p cnf 8656 42465                                                                                    

1 0
c Encoding variable: x_00001_00001 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00001_00001' order represents '1' with '2'
c Var 'x_00001_00001' direct represents '1' with '2'
c Var 'x_00001_00001' order represents '2' with '3'
-2 3 0
c Var 'x_00001_00001' direct represents '2' with '4'
2 -3 4 0
-4 3 0
-4 -2 0
c Var 'x_00001_00001' order represents '3' with '5'
-3 5 0
c Var 'x_00001_00001' direct represents '3' with '6'
3 -5 6 0
-6 5 0
-6 -3 0
c Var 'x_00001_00001' order represents '4' with '7'
-5 7 0
c Var 'x_00001_00001' direct represents '4' with '8'
5 -7 8 0
-8 7 0
-8 -5 0
c Var 'x_00001_00001' order represents '5' with '9'
-7 9 0
c Var 'x_00001_00001' direct represents '5' with '10'
7 -9 10 0
-10 9 0
-10 -7 0
c Var 'x_00001_00001' order represents '6' with '11'
-9 11 0
c Var 'x_00001_00001' direct represents '6' with '12'
9 -11 12 0
-12 11 0
-12 -9 0
c Var 'x_00001_00001' order represents '7' with '13'
-11 13 0
c Var 'x_00001_00001' direct represents '7' with '14'
11 -13 14 0
-14 13 0
-14 -11 0
c Var 'x_00001_00001' order represents '8' with '15'
-13 15 0
c Var 'x_00001_00001' direct represents '8' with '16'
13 -15 16 0
-16 15 0
-16 -13 0
c Var 'x_00001_00001' direct represents '9' with '-15'
2 4 6 8 10 12 14 16 -15 0
c Encoding variable: x_00001_00002 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00001_00002' order represents '1' with '17'
c Var 'x_00001_00002' direct represents '1' with '17'
c Var 'x_00001_00002' order represents '2' with '18'
-17 18 0
c Var 'x_00001_00002' direct represents '2' with '19'
17 -18 19 0
-19 18 0
-19 -17 0
c Var 'x_00001_00002' order represents '3' with '20'
-18 20 0
c Var 'x_00001_00002' direct represents '3' with '21'
18 -20 21 0
-21 20 0
-21 -18 0
c Var 'x_00001_00002' order represents '4' with '22'
-20 22 0
c Var 'x_00001_00002' direct represents '4' with '23'
20 -22 23 0
-23 22 0
-23 -20 0
c Var 'x_00001_00002' order represents '5' with '24'
-22 24 0
c Var 'x_00001_00002' direct represents '5' with '25'
22 -24 25 0
-25 24 0
-25 -22 0
c Var 'x_00001_00002' order represents '6' with '26'
-24 26 0
c Var 'x_00001_00002' direct represents '6' with '27'
24 -26 27 0
-27 26 0
-27 -24 0
c Var 'x_00001_00002' order represents '7' with '28'
-26 28 0
c Var 'x_00001_00002' direct represents '7' with '29'
26 -28 29 0
-29 28 0
-29 -26 0
c Var 'x_00001_00002' order represents '8' with '30'
-28 30 0
c Var 'x_00001_00002' direct represents '8' with '31'
28 -30 31 0
-31 30 0
-31 -28 0
c Var 'x_00001_00002' direct represents '9' with '-30'
17 19 21 23 25 27 29 31 -30 0
c Encoding variable: x_00001_00003 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00001_00003' order represents '1' with '32'
c Var 'x_00001_00003' direct represents '1' with '32'
c Var 'x_00001_00003' order represents '2' with '33'
-32 33 0
c Var 'x_00001_00003' direct represents '2' with '34'
32 -33 34 0
-34 33 0
-34 -32 0
c Var 'x_00001_00003' order represents '3' with '35'
-33 35 0
c Var 'x_00001_00003' direct represents '3' with '36'
33 -35 36 0
-36 35 0
-36 -33 0
c Var 'x_00001_00003' order represents '4' with '37'
-35 37 0
c Var 'x_00001_00003' direct represents '4' with '38'
35 -37 38 0
-38 37 0
-38 -35 0
c Var 'x_00001_00003' order represents '5' with '39'
-37 39 0
c Var 'x_00001_00003' direct represents '5' with '40'
37 -39 40 0
-40 39 0
-40 -37 0
c Var 'x_00001_00003' order represents '6' with '41'
-39 41 0
c Var 'x_00001_00003' direct represents '6' with '42'
39 -41 42 0
-42 41 0
-42 -39 0
c Var 'x_00001_00003' order represents '7' with '43'
-41 43 0
c Var 'x_00001_00003' direct represents '7' with '44'
41 -43 44 0
-44 43 0
-44 -41 0
c Var 'x_00001_00003' order represents '8' with '45'
-43 45 0
c Var 'x_00001_00003' direct represents '8' with '46'
43 -45 46 0
-46 45 0
-46 -43 0
c Var 'x_00001_00003' direct represents '9' with '-45'
32 34 36 38 40 42 44 46 -45 0
c Encoding variable: x_00001_00004 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00001_00004' order represents '1' with '47'
c Var 'x_00001_00004' direct represents '1' with '47'
c Var 'x_00001_00004' order represents '2' with '48'
-47 48 0
c Var 'x_00001_00004' direct represents '2' with '49'
47 -48 49 0
-49 48 0
-49 -47 0
c Var 'x_00001_00004' order represents '3' with '50'
-48 50 0
c Var 'x_00001_00004' direct represents '3' with '51'
48 -50 51 0
-51 50 0
-51 -48 0
c Var 'x_00001_00004' order represents '4' with '52'
-50 52 0
c Var 'x_00001_00004' direct represents '4' with '53'
50 -52 53 0
-53 52 0
-53 -50 0
c Var 'x_00001_00004' order represents '5' with '54'
-52 54 0
c Var 'x_00001_00004' direct represents '5' with '55'
52 -54 55 0
-55 54 0
-55 -52 0
c Var 'x_00001_00004' order represents '6' with '56'
-54 56 0
c Var 'x_00001_00004' direct represents '6' with '57'
54 -56 57 0
-57 56 0
-57 -54 0
c Var 'x_00001_00004' order represents '7' with '58'
-56 58 0
c Var 'x_00001_00004' direct represents '7' with '59'
56 -58 59 0
-59 58 0
-59 -56 0
c Var 'x_00001_00004' order represents '8' with '60'
-58 60 0
c Var 'x_00001_00004' direct represents '8' with '61'
58 -60 61 0
-61 60 0
-61 -58 0
c Var 'x_00001_00004' direct represents '9' with '-60'
47 49 51 53 55 57 59 61 -60 0
c Encoding variable: x_00001_00005 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00001_00005' order represents '1' with '62'
c Var 'x_00001_00005' direct represents '1' with '62'
c Var 'x_00001_00005' order represents '2' with '63'
-62 63 0
c Var 'x_00001_00005' direct represents '2' with '64'
62 -63 64 0
-64 63 0
-64 -62 0
c Var 'x_00001_00005' order represents '3' with '65'
-63 65 0
c Var 'x_00001_00005' direct represents '3' with '66'
63 -65 66 0
-66 65 0
-66 -63 0
c Var 'x_00001_00005' order represents '4' with '67'
-65 67 0
c Var 'x_00001_00005' direct represents '4' with '68'
65 -67 68 0
-68 67 0
-68 -65 0
c Var 'x_00001_00005' order represents '5' with '69'
-67 69 0
c Var 'x_00001_00005' direct represents '5' with '70'
67 -69 70 0
-70 69 0
-70 -67 0
c Var 'x_00001_00005' order represents '6' with '71'
-69 71 0
c Var 'x_00001_00005' direct represents '6' with '72'
69 -71 72 0
-72 71 0
-72 -69 0
c Var 'x_00001_00005' order represents '7' with '73'
-71 73 0
c Var 'x_00001_00005' direct represents '7' with '74'
71 -73 74 0
-74 73 0
-74 -71 0
c Var 'x_00001_00005' order represents '8' with '75'
-73 75 0
c Var 'x_00001_00005' direct represents '8' with '76'
73 -75 76 0
-76 75 0
-76 -73 0
c Var 'x_00001_00005' direct represents '9' with '-75'
62 64 66 68 70 72 74 76 -75 0
c Encoding variable: x_00001_00006 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00001_00006' order represents '1' with '77'
c Var 'x_00001_00006' direct represents '1' with '77'
c Var 'x_00001_00006' order represents '2' with '78'
-77 78 0
c Var 'x_00001_00006' direct represents '2' with '79'
77 -78 79 0
-79 78 0
-79 -77 0
c Var 'x_00001_00006' order represents '3' with '80'
-78 80 0
c Var 'x_00001_00006' direct represents '3' with '81'
78 -80 81 0
-81 80 0
-81 -78 0
c Var 'x_00001_00006' order represents '4' with '82'
-80 82 0
c Var 'x_00001_00006' direct represents '4' with '83'
80 -82 83 0
-83 82 0
-83 -80 0
c Var 'x_00001_00006' order represents '5' with '84'
-82 84 0
c Var 'x_00001_00006' direct represents '5' with '85'
82 -84 85 0
-85 84 0
-85 -82 0
c Var 'x_00001_00006' order represents '6' with '86'
-84 86 0
c Var 'x_00001_00006' direct represents '6' with '87'
84 -86 87 0
-87 86 0
-87 -84 0
c Var 'x_00001_00006' order represents '7' with '88'
-86 88 0
c Var 'x_00001_00006' direct represents '7' with '89'
86 -88 89 0
-89 88 0
-89 -86 0
c Var 'x_00001_00006' order represents '8' with '90'
-88 90 0
c Var 'x_00001_00006' direct represents '8' with '91'
88 -90 91 0
-91 90 0
-91 -88 0
c Var 'x_00001_00006' direct represents '9' with '-90'
77 79 81 83 85 87 89 91 -90 0
c Encoding variable: x_00001_00007 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00001_00007' order represents '1' with '92'
c Var 'x_00001_00007' direct represents '1' with '92'
c Var 'x_00001_00007' order represents '2' with '93'
-92 93 0
c Var 'x_00001_00007' direct represents '2' with '94'
92 -93 94 0
-94 93 0
-94 -92 0
c Var 'x_00001_00007' order represents '3' with '95'
-93 95 0
c Var 'x_00001_00007' direct represents '3' with '96'
93 -95 96 0
-96 95 0
-96 -93 0
c Var 'x_00001_00007' order represents '4' with '97'
-95 97 0
c Var 'x_00001_00007' direct represents '4' with '98'
95 -97 98 0
-98 97 0
-98 -95 0
c Var 'x_00001_00007' order represents '5' with '99'
-97 99 0
c Var 'x_00001_00007' direct represents '5' with '100'
97 -99 100 0
-100 99 0
-100 -97 0
c Var 'x_00001_00007' order represents '6' with '101'
-99 101 0
c Var 'x_00001_00007' direct represents '6' with '102'
99 -101 102 0
-102 101 0
-102 -99 0
c Var 'x_00001_00007' order represents '7' with '103'
-101 103 0
c Var 'x_00001_00007' direct represents '7' with '104'
101 -103 104 0
-104 103 0
-104 -101 0
c Var 'x_00001_00007' order represents '8' with '105'
-103 105 0
c Var 'x_00001_00007' direct represents '8' with '106'
103 -105 106 0
-106 105 0
-106 -103 0
c Var 'x_00001_00007' direct represents '9' with '-105'
92 94 96 98 100 102 104 106 -105 0
c Encoding variable: x_00001_00008 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00001_00008' order represents '1' with '107'
c Var 'x_00001_00008' direct represents '1' with '107'
c Var 'x_00001_00008' order represents '2' with '108'
-107 108 0
c Var 'x_00001_00008' direct represents '2' with '109'
107 -108 109 0
-109 108 0
-109 -107 0
c Var 'x_00001_00008' order represents '3' with '110'
-108 110 0
c Var 'x_00001_00008' direct represents '3' with '111'
108 -110 111 0
-111 110 0
-111 -108 0
c Var 'x_00001_00008' order represents '4' with '112'
-110 112 0
c Var 'x_00001_00008' direct represents '4' with '113'
110 -112 113 0
-113 112 0
-113 -110 0
c Var 'x_00001_00008' order represents '5' with '114'
-112 114 0
c Var 'x_00001_00008' direct represents '5' with '115'
112 -114 115 0
-115 114 0
-115 -112 0
c Var 'x_00001_00008' order represents '6' with '116'
-114 116 0
c Var 'x_00001_00008' direct represents '6' with '117'
114 -116 117 0
-117 116 0
-117 -114 0
c Var 'x_00001_00008' order represents '7' with '118'
-116 118 0
c Var 'x_00001_00008' direct represents '7' with '119'
116 -118 119 0
-119 118 0
-119 -116 0
c Var 'x_00001_00008' order represents '8' with '120'
-118 120 0
c Var 'x_00001_00008' direct represents '8' with '121'
118 -120 121 0
-121 120 0
-121 -118 0
c Var 'x_00001_00008' direct represents '9' with '-120'
107 109 111 113 115 117 119 121 -120 0
c Encoding variable: x_00001_00009 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00001_00009' order represents '1' with '122'
c Var 'x_00001_00009' direct represents '1' with '122'
c Var 'x_00001_00009' order represents '2' with '123'
-122 123 0
c Var 'x_00001_00009' direct represents '2' with '124'
122 -123 124 0
-124 123 0
-124 -122 0
c Var 'x_00001_00009' order represents '3' with '125'
-123 125 0
c Var 'x_00001_00009' direct represents '3' with '126'
123 -125 126 0
-126 125 0
-126 -123 0
c Var 'x_00001_00009' order represents '4' with '127'
-125 127 0
c Var 'x_00001_00009' direct represents '4' with '128'
125 -127 128 0
-128 127 0
-128 -125 0
c Var 'x_00001_00009' order represents '5' with '129'
-127 129 0
c Var 'x_00001_00009' direct represents '5' with '130'
127 -129 130 0
-130 129 0
-130 -127 0
c Var 'x_00001_00009' order represents '6' with '131'
-129 131 0
c Var 'x_00001_00009' direct represents '6' with '132'
129 -131 132 0
-132 131 0
-132 -129 0
c Var 'x_00001_00009' order represents '7' with '133'
-131 133 0
c Var 'x_00001_00009' direct represents '7' with '134'
131 -133 134 0
-134 133 0
-134 -131 0
c Var 'x_00001_00009' order represents '8' with '135'
-133 135 0
c Var 'x_00001_00009' direct represents '8' with '136'
133 -135 136 0
-136 135 0
-136 -133 0
c Var 'x_00001_00009' direct represents '9' with '-135'
122 124 126 128 130 132 134 136 -135 0
c Encoding variable: x_00002_00001 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00002_00001' order represents '1' with '137'
c Var 'x_00002_00001' direct represents '1' with '137'
c Var 'x_00002_00001' order represents '2' with '138'
-137 138 0
c Var 'x_00002_00001' direct represents '2' with '139'
137 -138 139 0
-139 138 0
-139 -137 0
c Var 'x_00002_00001' order represents '3' with '140'
-138 140 0
c Var 'x_00002_00001' direct represents '3' with '141'
138 -140 141 0
-141 140 0
-141 -138 0
c Var 'x_00002_00001' order represents '4' with '142'
-140 142 0
c Var 'x_00002_00001' direct represents '4' with '143'
140 -142 143 0
-143 142 0
-143 -140 0
c Var 'x_00002_00001' order represents '5' with '144'
-142 144 0
c Var 'x_00002_00001' direct represents '5' with '145'
142 -144 145 0
-145 144 0
-145 -142 0
c Var 'x_00002_00001' order represents '6' with '146'
-144 146 0
c Var 'x_00002_00001' direct represents '6' with '147'
144 -146 147 0
-147 146 0
-147 -144 0
c Var 'x_00002_00001' order represents '7' with '148'
-146 148 0
c Var 'x_00002_00001' direct represents '7' with '149'
146 -148 149 0
-149 148 0
-149 -146 0
c Var 'x_00002_00001' order represents '8' with '150'
-148 150 0
c Var 'x_00002_00001' direct represents '8' with '151'
148 -150 151 0
-151 150 0
-151 -148 0
c Var 'x_00002_00001' direct represents '9' with '-150'
137 139 141 143 145 147 149 151 -150 0
c Encoding variable: x_00002_00002 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00002_00002' order represents '1' with '152'
c Var 'x_00002_00002' direct represents '1' with '152'
c Var 'x_00002_00002' order represents '2' with '153'
-152 153 0
c Var 'x_00002_00002' direct represents '2' with '154'
152 -153 154 0
-154 153 0
-154 -152 0
c Var 'x_00002_00002' order represents '3' with '155'
-153 155 0
c Var 'x_00002_00002' direct represents '3' with '156'
153 -155 156 0
-156 155 0
-156 -153 0
c Var 'x_00002_00002' order represents '4' with '157'
-155 157 0
c Var 'x_00002_00002' direct represents '4' with '158'
155 -157 158 0
-158 157 0
-158 -155 0
c Var 'x_00002_00002' order represents '5' with '159'
-157 159 0
c Var 'x_00002_00002' direct represents '5' with '160'
157 -159 160 0
-160 159 0
-160 -157 0
c Var 'x_00002_00002' order represents '6' with '161'
-159 161 0
c Var 'x_00002_00002' direct represents '6' with '162'
159 -161 162 0
-162 161 0
-162 -159 0
c Var 'x_00002_00002' order represents '7' with '163'
-161 163 0
c Var 'x_00002_00002' direct represents '7' with '164'
161 -163 164 0
-164 163 0
-164 -161 0
c Var 'x_00002_00002' order represents '8' with '165'
-163 165 0
c Var 'x_00002_00002' direct represents '8' with '166'
163 -165 166 0
-166 165 0
-166 -163 0
c Var 'x_00002_00002' direct represents '9' with '-165'
152 154 156 158 160 162 164 166 -165 0
c Encoding variable: x_00002_00003 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00002_00003' order represents '1' with '167'
c Var 'x_00002_00003' direct represents '1' with '167'
c Var 'x_00002_00003' order represents '2' with '168'
-167 168 0
c Var 'x_00002_00003' direct represents '2' with '169'
167 -168 169 0
-169 168 0
-169 -167 0
c Var 'x_00002_00003' order represents '3' with '170'
-168 170 0
c Var 'x_00002_00003' direct represents '3' with '171'
168 -170 171 0
-171 170 0
-171 -168 0
c Var 'x_00002_00003' order represents '4' with '172'
-170 172 0
c Var 'x_00002_00003' direct represents '4' with '173'
170 -172 173 0
-173 172 0
-173 -170 0
c Var 'x_00002_00003' order represents '5' with '174'
-172 174 0
c Var 'x_00002_00003' direct represents '5' with '175'
172 -174 175 0
-175 174 0
-175 -172 0
c Var 'x_00002_00003' order represents '6' with '176'
-174 176 0
c Var 'x_00002_00003' direct represents '6' with '177'
174 -176 177 0
-177 176 0
-177 -174 0
c Var 'x_00002_00003' order represents '7' with '178'
-176 178 0
c Var 'x_00002_00003' direct represents '7' with '179'
176 -178 179 0
-179 178 0
-179 -176 0
c Var 'x_00002_00003' order represents '8' with '180'
-178 180 0
c Var 'x_00002_00003' direct represents '8' with '181'
178 -180 181 0
-181 180 0
-181 -178 0
c Var 'x_00002_00003' direct represents '9' with '-180'
167 169 171 173 175 177 179 181 -180 0
c Encoding variable: x_00002_00004 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00002_00004' order represents '1' with '182'
c Var 'x_00002_00004' direct represents '1' with '182'
c Var 'x_00002_00004' order represents '2' with '183'
-182 183 0
c Var 'x_00002_00004' direct represents '2' with '184'
182 -183 184 0
-184 183 0
-184 -182 0
c Var 'x_00002_00004' order represents '3' with '185'
-183 185 0
c Var 'x_00002_00004' direct represents '3' with '186'
183 -185 186 0
-186 185 0
-186 -183 0
c Var 'x_00002_00004' order represents '4' with '187'
-185 187 0
c Var 'x_00002_00004' direct represents '4' with '188'
185 -187 188 0
-188 187 0
-188 -185 0
c Var 'x_00002_00004' order represents '5' with '189'
-187 189 0
c Var 'x_00002_00004' direct represents '5' with '190'
187 -189 190 0
-190 189 0
-190 -187 0
c Var 'x_00002_00004' order represents '6' with '191'
-189 191 0
c Var 'x_00002_00004' direct represents '6' with '192'
189 -191 192 0
-192 191 0
-192 -189 0
c Var 'x_00002_00004' order represents '7' with '193'
-191 193 0
c Var 'x_00002_00004' direct represents '7' with '194'
191 -193 194 0
-194 193 0
-194 -191 0
c Var 'x_00002_00004' order represents '8' with '195'
-193 195 0
c Var 'x_00002_00004' direct represents '8' with '196'
193 -195 196 0
-196 195 0
-196 -193 0
c Var 'x_00002_00004' direct represents '9' with '-195'
182 184 186 188 190 192 194 196 -195 0
c Encoding variable: x_00002_00005 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00002_00005' order represents '1' with '197'
c Var 'x_00002_00005' direct represents '1' with '197'
c Var 'x_00002_00005' order represents '2' with '198'
-197 198 0
c Var 'x_00002_00005' direct represents '2' with '199'
197 -198 199 0
-199 198 0
-199 -197 0
c Var 'x_00002_00005' order represents '3' with '200'
-198 200 0
c Var 'x_00002_00005' direct represents '3' with '201'
198 -200 201 0
-201 200 0
-201 -198 0
c Var 'x_00002_00005' order represents '4' with '202'
-200 202 0
c Var 'x_00002_00005' direct represents '4' with '203'
200 -202 203 0
-203 202 0
-203 -200 0
c Var 'x_00002_00005' order represents '5' with '204'
-202 204 0
c Var 'x_00002_00005' direct represents '5' with '205'
202 -204 205 0
-205 204 0
-205 -202 0
c Var 'x_00002_00005' order represents '6' with '206'
-204 206 0
c Var 'x_00002_00005' direct represents '6' with '207'
204 -206 207 0
-207 206 0
-207 -204 0
c Var 'x_00002_00005' order represents '7' with '208'
-206 208 0
c Var 'x_00002_00005' direct represents '7' with '209'
206 -208 209 0
-209 208 0
-209 -206 0
c Var 'x_00002_00005' order represents '8' with '210'
-208 210 0
c Var 'x_00002_00005' direct represents '8' with '211'
208 -210 211 0
-211 210 0
-211 -208 0
c Var 'x_00002_00005' direct represents '9' with '-210'
197 199 201 203 205 207 209 211 -210 0
c Encoding variable: x_00002_00006 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00002_00006' order represents '1' with '212'
c Var 'x_00002_00006' direct represents '1' with '212'
c Var 'x_00002_00006' order represents '2' with '213'
-212 213 0
c Var 'x_00002_00006' direct represents '2' with '214'
212 -213 214 0
-214 213 0
-214 -212 0
c Var 'x_00002_00006' order represents '3' with '215'
-213 215 0
c Var 'x_00002_00006' direct represents '3' with '216'
213 -215 216 0
-216 215 0
-216 -213 0
c Var 'x_00002_00006' order represents '4' with '217'
-215 217 0
c Var 'x_00002_00006' direct represents '4' with '218'
215 -217 218 0
-218 217 0
-218 -215 0
c Var 'x_00002_00006' order represents '5' with '219'
-217 219 0
c Var 'x_00002_00006' direct represents '5' with '220'
217 -219 220 0
-220 219 0
-220 -217 0
c Var 'x_00002_00006' order represents '6' with '221'
-219 221 0
c Var 'x_00002_00006' direct represents '6' with '222'
219 -221 222 0
-222 221 0
-222 -219 0
c Var 'x_00002_00006' order represents '7' with '223'
-221 223 0
c Var 'x_00002_00006' direct represents '7' with '224'
221 -223 224 0
-224 223 0
-224 -221 0
c Var 'x_00002_00006' order represents '8' with '225'
-223 225 0
c Var 'x_00002_00006' direct represents '8' with '226'
223 -225 226 0
-226 225 0
-226 -223 0
c Var 'x_00002_00006' direct represents '9' with '-225'
212 214 216 218 220 222 224 226 -225 0
c Encoding variable: x_00002_00007 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00002_00007' order represents '1' with '227'
c Var 'x_00002_00007' direct represents '1' with '227'
c Var 'x_00002_00007' order represents '2' with '228'
-227 228 0
c Var 'x_00002_00007' direct represents '2' with '229'
227 -228 229 0
-229 228 0
-229 -227 0
c Var 'x_00002_00007' order represents '3' with '230'
-228 230 0
c Var 'x_00002_00007' direct represents '3' with '231'
228 -230 231 0
-231 230 0
-231 -228 0
c Var 'x_00002_00007' order represents '4' with '232'
-230 232 0
c Var 'x_00002_00007' direct represents '4' with '233'
230 -232 233 0
-233 232 0
-233 -230 0
c Var 'x_00002_00007' order represents '5' with '234'
-232 234 0
c Var 'x_00002_00007' direct represents '5' with '235'
232 -234 235 0
-235 234 0
-235 -232 0
c Var 'x_00002_00007' order represents '6' with '236'
-234 236 0
c Var 'x_00002_00007' direct represents '6' with '237'
234 -236 237 0
-237 236 0
-237 -234 0
c Var 'x_00002_00007' order represents '7' with '238'
-236 238 0
c Var 'x_00002_00007' direct represents '7' with '239'
236 -238 239 0
-239 238 0
-239 -236 0
c Var 'x_00002_00007' order represents '8' with '240'
-238 240 0
c Var 'x_00002_00007' direct represents '8' with '241'
238 -240 241 0
-241 240 0
-241 -238 0
c Var 'x_00002_00007' direct represents '9' with '-240'
227 229 231 233 235 237 239 241 -240 0
c Encoding variable: x_00002_00008 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00002_00008' order represents '1' with '242'
c Var 'x_00002_00008' direct represents '1' with '242'
c Var 'x_00002_00008' order represents '2' with '243'
-242 243 0
c Var 'x_00002_00008' direct represents '2' with '244'
242 -243 244 0
-244 243 0
-244 -242 0
c Var 'x_00002_00008' order represents '3' with '245'
-243 245 0
c Var 'x_00002_00008' direct represents '3' with '246'
243 -245 246 0
-246 245 0
-246 -243 0
c Var 'x_00002_00008' order represents '4' with '247'
-245 247 0
c Var 'x_00002_00008' direct represents '4' with '248'
245 -247 248 0
-248 247 0
-248 -245 0
c Var 'x_00002_00008' order represents '5' with '249'
-247 249 0
c Var 'x_00002_00008' direct represents '5' with '250'
247 -249 250 0
-250 249 0
-250 -247 0
c Var 'x_00002_00008' order represents '6' with '251'
-249 251 0
c Var 'x_00002_00008' direct represents '6' with '252'
249 -251 252 0
-252 251 0
-252 -249 0
c Var 'x_00002_00008' order represents '7' with '253'
-251 253 0
c Var 'x_00002_00008' direct represents '7' with '254'
251 -253 254 0
-254 253 0
-254 -251 0
c Var 'x_00002_00008' order represents '8' with '255'
-253 255 0
c Var 'x_00002_00008' direct represents '8' with '256'
253 -255 256 0
-256 255 0
-256 -253 0
c Var 'x_00002_00008' direct represents '9' with '-255'
242 244 246 248 250 252 254 256 -255 0
c Encoding variable: x_00002_00009 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00002_00009' order represents '1' with '257'
c Var 'x_00002_00009' direct represents '1' with '257'
c Var 'x_00002_00009' order represents '2' with '258'
-257 258 0
c Var 'x_00002_00009' direct represents '2' with '259'
257 -258 259 0
-259 258 0
-259 -257 0
c Var 'x_00002_00009' order represents '3' with '260'
-258 260 0
c Var 'x_00002_00009' direct represents '3' with '261'
258 -260 261 0
-261 260 0
-261 -258 0
c Var 'x_00002_00009' order represents '4' with '262'
-260 262 0
c Var 'x_00002_00009' direct represents '4' with '263'
260 -262 263 0
-263 262 0
-263 -260 0
c Var 'x_00002_00009' order represents '5' with '264'
-262 264 0
c Var 'x_00002_00009' direct represents '5' with '265'
262 -264 265 0
-265 264 0
-265 -262 0
c Var 'x_00002_00009' order represents '6' with '266'
-264 266 0
c Var 'x_00002_00009' direct represents '6' with '267'
264 -266 267 0
-267 266 0
-267 -264 0
c Var 'x_00002_00009' order represents '7' with '268'
-266 268 0
c Var 'x_00002_00009' direct represents '7' with '269'
266 -268 269 0
-269 268 0
-269 -266 0
c Var 'x_00002_00009' order represents '8' with '270'
-268 270 0
c Var 'x_00002_00009' direct represents '8' with '271'
268 -270 271 0
-271 270 0
-271 -268 0
c Var 'x_00002_00009' direct represents '9' with '-270'
257 259 261 263 265 267 269 271 -270 0
c Encoding variable: x_00003_00001 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00003_00001' order represents '1' with '272'
c Var 'x_00003_00001' direct represents '1' with '272'
c Var 'x_00003_00001' order represents '2' with '273'
-272 273 0
c Var 'x_00003_00001' direct represents '2' with '274'
272 -273 274 0
-274 273 0
-274 -272 0
c Var 'x_00003_00001' order represents '3' with '275'
-273 275 0
c Var 'x_00003_00001' direct represents '3' with '276'
273 -275 276 0
-276 275 0
-276 -273 0
c Var 'x_00003_00001' order represents '4' with '277'
-275 277 0
c Var 'x_00003_00001' direct represents '4' with '278'
275 -277 278 0
-278 277 0
-278 -275 0
c Var 'x_00003_00001' order represents '5' with '279'
-277 279 0
c Var 'x_00003_00001' direct represents '5' with '280'
277 -279 280 0
-280 279 0
-280 -277 0
c Var 'x_00003_00001' order represents '6' with '281'
-279 281 0
c Var 'x_00003_00001' direct represents '6' with '282'
279 -281 282 0
-282 281 0
-282 -279 0
c Var 'x_00003_00001' order represents '7' with '283'
-281 283 0
c Var 'x_00003_00001' direct represents '7' with '284'
281 -283 284 0
-284 283 0
-284 -281 0
c Var 'x_00003_00001' order represents '8' with '285'
-283 285 0
c Var 'x_00003_00001' direct represents '8' with '286'
283 -285 286 0
-286 285 0
-286 -283 0
c Var 'x_00003_00001' direct represents '9' with '-285'
272 274 276 278 280 282 284 286 -285 0
c Encoding variable: x_00003_00002 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00003_00002' order represents '1' with '287'
c Var 'x_00003_00002' direct represents '1' with '287'
c Var 'x_00003_00002' order represents '2' with '288'
-287 288 0
c Var 'x_00003_00002' direct represents '2' with '289'
287 -288 289 0
-289 288 0
-289 -287 0
c Var 'x_00003_00002' order represents '3' with '290'
-288 290 0
c Var 'x_00003_00002' direct represents '3' with '291'
288 -290 291 0
-291 290 0
-291 -288 0
c Var 'x_00003_00002' order represents '4' with '292'
-290 292 0
c Var 'x_00003_00002' direct represents '4' with '293'
290 -292 293 0
-293 292 0
-293 -290 0
c Var 'x_00003_00002' order represents '5' with '294'
-292 294 0
c Var 'x_00003_00002' direct represents '5' with '295'
292 -294 295 0
-295 294 0
-295 -292 0
c Var 'x_00003_00002' order represents '6' with '296'
-294 296 0
c Var 'x_00003_00002' direct represents '6' with '297'
294 -296 297 0
-297 296 0
-297 -294 0
c Var 'x_00003_00002' order represents '7' with '298'
-296 298 0
c Var 'x_00003_00002' direct represents '7' with '299'
296 -298 299 0
-299 298 0
-299 -296 0
c Var 'x_00003_00002' order represents '8' with '300'
-298 300 0
c Var 'x_00003_00002' direct represents '8' with '301'
298 -300 301 0
-301 300 0
-301 -298 0
c Var 'x_00003_00002' direct represents '9' with '-300'
287 289 291 293 295 297 299 301 -300 0
c Encoding variable: x_00003_00003 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00003_00003' order represents '1' with '302'
c Var 'x_00003_00003' direct represents '1' with '302'
c Var 'x_00003_00003' order represents '2' with '303'
-302 303 0
c Var 'x_00003_00003' direct represents '2' with '304'
302 -303 304 0
-304 303 0
-304 -302 0
c Var 'x_00003_00003' order represents '3' with '305'
-303 305 0
c Var 'x_00003_00003' direct represents '3' with '306'
303 -305 306 0
-306 305 0
-306 -303 0
c Var 'x_00003_00003' order represents '4' with '307'
-305 307 0
c Var 'x_00003_00003' direct represents '4' with '308'
305 -307 308 0
-308 307 0
-308 -305 0
c Var 'x_00003_00003' order represents '5' with '309'
-307 309 0
c Var 'x_00003_00003' direct represents '5' with '310'
307 -309 310 0
-310 309 0
-310 -307 0
c Var 'x_00003_00003' order represents '6' with '311'
-309 311 0
c Var 'x_00003_00003' direct represents '6' with '312'
309 -311 312 0
-312 311 0
-312 -309 0
c Var 'x_00003_00003' order represents '7' with '313'
-311 313 0
c Var 'x_00003_00003' direct represents '7' with '314'
311 -313 314 0
-314 313 0
-314 -311 0
c Var 'x_00003_00003' order represents '8' with '315'
-313 315 0
c Var 'x_00003_00003' direct represents '8' with '316'
313 -315 316 0
-316 315 0
-316 -313 0
c Var 'x_00003_00003' direct represents '9' with '-315'
302 304 306 308 310 312 314 316 -315 0
c Encoding variable: x_00003_00004 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00003_00004' order represents '1' with '317'
c Var 'x_00003_00004' direct represents '1' with '317'
c Var 'x_00003_00004' order represents '2' with '318'
-317 318 0
c Var 'x_00003_00004' direct represents '2' with '319'
317 -318 319 0
-319 318 0
-319 -317 0
c Var 'x_00003_00004' order represents '3' with '320'
-318 320 0
c Var 'x_00003_00004' direct represents '3' with '321'
318 -320 321 0
-321 320 0
-321 -318 0
c Var 'x_00003_00004' order represents '4' with '322'
-320 322 0
c Var 'x_00003_00004' direct represents '4' with '323'
320 -322 323 0
-323 322 0
-323 -320 0
c Var 'x_00003_00004' order represents '5' with '324'
-322 324 0
c Var 'x_00003_00004' direct represents '5' with '325'
322 -324 325 0
-325 324 0
-325 -322 0
c Var 'x_00003_00004' order represents '6' with '326'
-324 326 0
c Var 'x_00003_00004' direct represents '6' with '327'
324 -326 327 0
-327 326 0
-327 -324 0
c Var 'x_00003_00004' order represents '7' with '328'
-326 328 0
c Var 'x_00003_00004' direct represents '7' with '329'
326 -328 329 0
-329 328 0
-329 -326 0
c Var 'x_00003_00004' order represents '8' with '330'
-328 330 0
c Var 'x_00003_00004' direct represents '8' with '331'
328 -330 331 0
-331 330 0
-331 -328 0
c Var 'x_00003_00004' direct represents '9' with '-330'
317 319 321 323 325 327 329 331 -330 0
c Encoding variable: x_00003_00005 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00003_00005' order represents '1' with '332'
c Var 'x_00003_00005' direct represents '1' with '332'
c Var 'x_00003_00005' order represents '2' with '333'
-332 333 0
c Var 'x_00003_00005' direct represents '2' with '334'
332 -333 334 0
-334 333 0
-334 -332 0
c Var 'x_00003_00005' order represents '3' with '335'
-333 335 0
c Var 'x_00003_00005' direct represents '3' with '336'
333 -335 336 0
-336 335 0
-336 -333 0
c Var 'x_00003_00005' order represents '4' with '337'
-335 337 0
c Var 'x_00003_00005' direct represents '4' with '338'
335 -337 338 0
-338 337 0
-338 -335 0
c Var 'x_00003_00005' order represents '5' with '339'
-337 339 0
c Var 'x_00003_00005' direct represents '5' with '340'
337 -339 340 0
-340 339 0
-340 -337 0
c Var 'x_00003_00005' order represents '6' with '341'
-339 341 0
c Var 'x_00003_00005' direct represents '6' with '342'
339 -341 342 0
-342 341 0
-342 -339 0
c Var 'x_00003_00005' order represents '7' with '343'
-341 343 0
c Var 'x_00003_00005' direct represents '7' with '344'
341 -343 344 0
-344 343 0
-344 -341 0
c Var 'x_00003_00005' order represents '8' with '345'
-343 345 0
c Var 'x_00003_00005' direct represents '8' with '346'
343 -345 346 0
-346 345 0
-346 -343 0
c Var 'x_00003_00005' direct represents '9' with '-345'
332 334 336 338 340 342 344 346 -345 0
c Encoding variable: x_00003_00006 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00003_00006' order represents '1' with '347'
c Var 'x_00003_00006' direct represents '1' with '347'
c Var 'x_00003_00006' order represents '2' with '348'
-347 348 0
c Var 'x_00003_00006' direct represents '2' with '349'
347 -348 349 0
-349 348 0
-349 -347 0
c Var 'x_00003_00006' order represents '3' with '350'
-348 350 0
c Var 'x_00003_00006' direct represents '3' with '351'
348 -350 351 0
-351 350 0
-351 -348 0
c Var 'x_00003_00006' order represents '4' with '352'
-350 352 0
c Var 'x_00003_00006' direct represents '4' with '353'
350 -352 353 0
-353 352 0
-353 -350 0
c Var 'x_00003_00006' order represents '5' with '354'
-352 354 0
c Var 'x_00003_00006' direct represents '5' with '355'
352 -354 355 0
-355 354 0
-355 -352 0
c Var 'x_00003_00006' order represents '6' with '356'
-354 356 0
c Var 'x_00003_00006' direct represents '6' with '357'
354 -356 357 0
-357 356 0
-357 -354 0
c Var 'x_00003_00006' order represents '7' with '358'
-356 358 0
c Var 'x_00003_00006' direct represents '7' with '359'
356 -358 359 0
-359 358 0
-359 -356 0
c Var 'x_00003_00006' order represents '8' with '360'
-358 360 0
c Var 'x_00003_00006' direct represents '8' with '361'
358 -360 361 0
-361 360 0
-361 -358 0
c Var 'x_00003_00006' direct represents '9' with '-360'
347 349 351 353 355 357 359 361 -360 0
c Encoding variable: x_00003_00007 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00003_00007' order represents '1' with '362'
c Var 'x_00003_00007' direct represents '1' with '362'
c Var 'x_00003_00007' order represents '2' with '363'
-362 363 0
c Var 'x_00003_00007' direct represents '2' with '364'
362 -363 364 0
-364 363 0
-364 -362 0
c Var 'x_00003_00007' order represents '3' with '365'
-363 365 0
c Var 'x_00003_00007' direct represents '3' with '366'
363 -365 366 0
-366 365 0
-366 -363 0
c Var 'x_00003_00007' order represents '4' with '367'
-365 367 0
c Var 'x_00003_00007' direct represents '4' with '368'
365 -367 368 0
-368 367 0
-368 -365 0
c Var 'x_00003_00007' order represents '5' with '369'
-367 369 0
c Var 'x_00003_00007' direct represents '5' with '370'
367 -369 370 0
-370 369 0
-370 -367 0
c Var 'x_00003_00007' order represents '6' with '371'
-369 371 0
c Var 'x_00003_00007' direct represents '6' with '372'
369 -371 372 0
-372 371 0
-372 -369 0
c Var 'x_00003_00007' order represents '7' with '373'
-371 373 0
c Var 'x_00003_00007' direct represents '7' with '374'
371 -373 374 0
-374 373 0
-374 -371 0
c Var 'x_00003_00007' order represents '8' with '375'
-373 375 0
c Var 'x_00003_00007' direct represents '8' with '376'
373 -375 376 0
-376 375 0
-376 -373 0
c Var 'x_00003_00007' direct represents '9' with '-375'
362 364 366 368 370 372 374 376 -375 0
c Encoding variable: x_00003_00008 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00003_00008' order represents '1' with '377'
c Var 'x_00003_00008' direct represents '1' with '377'
c Var 'x_00003_00008' order represents '2' with '378'
-377 378 0
c Var 'x_00003_00008' direct represents '2' with '379'
377 -378 379 0
-379 378 0
-379 -377 0
c Var 'x_00003_00008' order represents '3' with '380'
-378 380 0
c Var 'x_00003_00008' direct represents '3' with '381'
378 -380 381 0
-381 380 0
-381 -378 0
c Var 'x_00003_00008' order represents '4' with '382'
-380 382 0
c Var 'x_00003_00008' direct represents '4' with '383'
380 -382 383 0
-383 382 0
-383 -380 0
c Var 'x_00003_00008' order represents '5' with '384'
-382 384 0
c Var 'x_00003_00008' direct represents '5' with '385'
382 -384 385 0
-385 384 0
-385 -382 0
c Var 'x_00003_00008' order represents '6' with '386'
-384 386 0
c Var 'x_00003_00008' direct represents '6' with '387'
384 -386 387 0
-387 386 0
-387 -384 0
c Var 'x_00003_00008' order represents '7' with '388'
-386 388 0
c Var 'x_00003_00008' direct represents '7' with '389'
386 -388 389 0
-389 388 0
-389 -386 0
c Var 'x_00003_00008' order represents '8' with '390'
-388 390 0
c Var 'x_00003_00008' direct represents '8' with '391'
388 -390 391 0
-391 390 0
-391 -388 0
c Var 'x_00003_00008' direct represents '9' with '-390'
377 379 381 383 385 387 389 391 -390 0
c Encoding variable: x_00003_00009 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00003_00009' order represents '1' with '392'
c Var 'x_00003_00009' direct represents '1' with '392'
c Var 'x_00003_00009' order represents '2' with '393'
-392 393 0
c Var 'x_00003_00009' direct represents '2' with '394'
392 -393 394 0
-394 393 0
-394 -392 0
c Var 'x_00003_00009' order represents '3' with '395'
-393 395 0
c Var 'x_00003_00009' direct represents '3' with '396'
393 -395 396 0
-396 395 0
-396 -393 0
c Var 'x_00003_00009' order represents '4' with '397'
-395 397 0
c Var 'x_00003_00009' direct represents '4' with '398'
395 -397 398 0
-398 397 0
-398 -395 0
c Var 'x_00003_00009' order represents '5' with '399'
-397 399 0
c Var 'x_00003_00009' direct represents '5' with '400'
397 -399 400 0
-400 399 0
-400 -397 0
c Var 'x_00003_00009' order represents '6' with '401'
-399 401 0
c Var 'x_00003_00009' direct represents '6' with '402'
399 -401 402 0
-402 401 0
-402 -399 0
c Var 'x_00003_00009' order represents '7' with '403'
-401 403 0
c Var 'x_00003_00009' direct represents '7' with '404'
401 -403 404 0
-404 403 0
-404 -401 0
c Var 'x_00003_00009' order represents '8' with '405'
-403 405 0
c Var 'x_00003_00009' direct represents '8' with '406'
403 -405 406 0
-406 405 0
-406 -403 0
c Var 'x_00003_00009' direct represents '9' with '-405'
392 394 396 398 400 402 404 406 -405 0
c Encoding variable: x_00004_00001 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00004_00001' order represents '1' with '407'
c Var 'x_00004_00001' direct represents '1' with '407'
c Var 'x_00004_00001' order represents '2' with '408'
-407 408 0
c Var 'x_00004_00001' direct represents '2' with '409'
407 -408 409 0
-409 408 0
-409 -407 0
c Var 'x_00004_00001' order represents '3' with '410'
-408 410 0
c Var 'x_00004_00001' direct represents '3' with '411'
408 -410 411 0
-411 410 0
-411 -408 0
c Var 'x_00004_00001' order represents '4' with '412'
-410 412 0
c Var 'x_00004_00001' direct represents '4' with '413'
410 -412 413 0
-413 412 0
-413 -410 0
c Var 'x_00004_00001' order represents '5' with '414'
-412 414 0
c Var 'x_00004_00001' direct represents '5' with '415'
412 -414 415 0
-415 414 0
-415 -412 0
c Var 'x_00004_00001' order represents '6' with '416'
-414 416 0
c Var 'x_00004_00001' direct represents '6' with '417'
414 -416 417 0
-417 416 0
-417 -414 0
c Var 'x_00004_00001' order represents '7' with '418'
-416 418 0
c Var 'x_00004_00001' direct represents '7' with '419'
416 -418 419 0
-419 418 0
-419 -416 0
c Var 'x_00004_00001' order represents '8' with '420'
-418 420 0
c Var 'x_00004_00001' direct represents '8' with '421'
418 -420 421 0
-421 420 0
-421 -418 0
c Var 'x_00004_00001' direct represents '9' with '-420'
407 409 411 413 415 417 419 421 -420 0
c Encoding variable: x_00004_00002 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00004_00002' order represents '1' with '422'
c Var 'x_00004_00002' direct represents '1' with '422'
c Var 'x_00004_00002' order represents '2' with '423'
-422 423 0
c Var 'x_00004_00002' direct represents '2' with '424'
422 -423 424 0
-424 423 0
-424 -422 0
c Var 'x_00004_00002' order represents '3' with '425'
-423 425 0
c Var 'x_00004_00002' direct represents '3' with '426'
423 -425 426 0
-426 425 0
-426 -423 0
c Var 'x_00004_00002' order represents '4' with '427'
-425 427 0
c Var 'x_00004_00002' direct represents '4' with '428'
425 -427 428 0
-428 427 0
-428 -425 0
c Var 'x_00004_00002' order represents '5' with '429'
-427 429 0
c Var 'x_00004_00002' direct represents '5' with '430'
427 -429 430 0
-430 429 0
-430 -427 0
c Var 'x_00004_00002' order represents '6' with '431'
-429 431 0
c Var 'x_00004_00002' direct represents '6' with '432'
429 -431 432 0
-432 431 0
-432 -429 0
c Var 'x_00004_00002' order represents '7' with '433'
-431 433 0
c Var 'x_00004_00002' direct represents '7' with '434'
431 -433 434 0
-434 433 0
-434 -431 0
c Var 'x_00004_00002' order represents '8' with '435'
-433 435 0
c Var 'x_00004_00002' direct represents '8' with '436'
433 -435 436 0
-436 435 0
-436 -433 0
c Var 'x_00004_00002' direct represents '9' with '-435'
422 424 426 428 430 432 434 436 -435 0
c Encoding variable: x_00004_00003 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00004_00003' order represents '1' with '437'
c Var 'x_00004_00003' direct represents '1' with '437'
c Var 'x_00004_00003' order represents '2' with '438'
-437 438 0
c Var 'x_00004_00003' direct represents '2' with '439'
437 -438 439 0
-439 438 0
-439 -437 0
c Var 'x_00004_00003' order represents '3' with '440'
-438 440 0
c Var 'x_00004_00003' direct represents '3' with '441'
438 -440 441 0
-441 440 0
-441 -438 0
c Var 'x_00004_00003' order represents '4' with '442'
-440 442 0
c Var 'x_00004_00003' direct represents '4' with '443'
440 -442 443 0
-443 442 0
-443 -440 0
c Var 'x_00004_00003' order represents '5' with '444'
-442 444 0
c Var 'x_00004_00003' direct represents '5' with '445'
442 -444 445 0
-445 444 0
-445 -442 0
c Var 'x_00004_00003' order represents '6' with '446'
-444 446 0
c Var 'x_00004_00003' direct represents '6' with '447'
444 -446 447 0
-447 446 0
-447 -444 0
c Var 'x_00004_00003' order represents '7' with '448'
-446 448 0
c Var 'x_00004_00003' direct represents '7' with '449'
446 -448 449 0
-449 448 0
-449 -446 0
c Var 'x_00004_00003' order represents '8' with '450'
-448 450 0
c Var 'x_00004_00003' direct represents '8' with '451'
448 -450 451 0
-451 450 0
-451 -448 0
c Var 'x_00004_00003' direct represents '9' with '-450'
437 439 441 443 445 447 449 451 -450 0
c Encoding variable: x_00004_00004 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00004_00004' order represents '1' with '452'
c Var 'x_00004_00004' direct represents '1' with '452'
c Var 'x_00004_00004' order represents '2' with '453'
-452 453 0
c Var 'x_00004_00004' direct represents '2' with '454'
452 -453 454 0
-454 453 0
-454 -452 0
c Var 'x_00004_00004' order represents '3' with '455'
-453 455 0
c Var 'x_00004_00004' direct represents '3' with '456'
453 -455 456 0
-456 455 0
-456 -453 0
c Var 'x_00004_00004' order represents '4' with '457'
-455 457 0
c Var 'x_00004_00004' direct represents '4' with '458'
455 -457 458 0
-458 457 0
-458 -455 0
c Var 'x_00004_00004' order represents '5' with '459'
-457 459 0
c Var 'x_00004_00004' direct represents '5' with '460'
457 -459 460 0
-460 459 0
-460 -457 0
c Var 'x_00004_00004' order represents '6' with '461'
-459 461 0
c Var 'x_00004_00004' direct represents '6' with '462'
459 -461 462 0
-462 461 0
-462 -459 0
c Var 'x_00004_00004' order represents '7' with '463'
-461 463 0
c Var 'x_00004_00004' direct represents '7' with '464'
461 -463 464 0
-464 463 0
-464 -461 0
c Var 'x_00004_00004' order represents '8' with '465'
-463 465 0
c Var 'x_00004_00004' direct represents '8' with '466'
463 -465 466 0
-466 465 0
-466 -463 0
c Var 'x_00004_00004' direct represents '9' with '-465'
452 454 456 458 460 462 464 466 -465 0
c Encoding variable: x_00004_00005 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00004_00005' order represents '1' with '467'
c Var 'x_00004_00005' direct represents '1' with '467'
c Var 'x_00004_00005' order represents '2' with '468'
-467 468 0
c Var 'x_00004_00005' direct represents '2' with '469'
467 -468 469 0
-469 468 0
-469 -467 0
c Var 'x_00004_00005' order represents '3' with '470'
-468 470 0
c Var 'x_00004_00005' direct represents '3' with '471'
468 -470 471 0
-471 470 0
-471 -468 0
c Var 'x_00004_00005' order represents '4' with '472'
-470 472 0
c Var 'x_00004_00005' direct represents '4' with '473'
470 -472 473 0
-473 472 0
-473 -470 0
c Var 'x_00004_00005' order represents '5' with '474'
-472 474 0
c Var 'x_00004_00005' direct represents '5' with '475'
472 -474 475 0
-475 474 0
-475 -472 0
c Var 'x_00004_00005' order represents '6' with '476'
-474 476 0
c Var 'x_00004_00005' direct represents '6' with '477'
474 -476 477 0
-477 476 0
-477 -474 0
c Var 'x_00004_00005' order represents '7' with '478'
-476 478 0
c Var 'x_00004_00005' direct represents '7' with '479'
476 -478 479 0
-479 478 0
-479 -476 0
c Var 'x_00004_00005' order represents '8' with '480'
-478 480 0
c Var 'x_00004_00005' direct represents '8' with '481'
478 -480 481 0
-481 480 0
-481 -478 0
c Var 'x_00004_00005' direct represents '9' with '-480'
467 469 471 473 475 477 479 481 -480 0
c Encoding variable: x_00004_00006 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00004_00006' order represents '1' with '482'
c Var 'x_00004_00006' direct represents '1' with '482'
c Var 'x_00004_00006' order represents '2' with '483'
-482 483 0
c Var 'x_00004_00006' direct represents '2' with '484'
482 -483 484 0
-484 483 0
-484 -482 0
c Var 'x_00004_00006' order represents '3' with '485'
-483 485 0
c Var 'x_00004_00006' direct represents '3' with '486'
483 -485 486 0
-486 485 0
-486 -483 0
c Var 'x_00004_00006' order represents '4' with '487'
-485 487 0
c Var 'x_00004_00006' direct represents '4' with '488'
485 -487 488 0
-488 487 0
-488 -485 0
c Var 'x_00004_00006' order represents '5' with '489'
-487 489 0
c Var 'x_00004_00006' direct represents '5' with '490'
487 -489 490 0
-490 489 0
-490 -487 0
c Var 'x_00004_00006' order represents '6' with '491'
-489 491 0
c Var 'x_00004_00006' direct represents '6' with '492'
489 -491 492 0
-492 491 0
-492 -489 0
c Var 'x_00004_00006' order represents '7' with '493'
-491 493 0
c Var 'x_00004_00006' direct represents '7' with '494'
491 -493 494 0
-494 493 0
-494 -491 0
c Var 'x_00004_00006' order represents '8' with '495'
-493 495 0
c Var 'x_00004_00006' direct represents '8' with '496'
493 -495 496 0
-496 495 0
-496 -493 0
c Var 'x_00004_00006' direct represents '9' with '-495'
482 484 486 488 490 492 494 496 -495 0
c Encoding variable: x_00004_00007 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00004_00007' order represents '1' with '497'
c Var 'x_00004_00007' direct represents '1' with '497'
c Var 'x_00004_00007' order represents '2' with '498'
-497 498 0
c Var 'x_00004_00007' direct represents '2' with '499'
497 -498 499 0
-499 498 0
-499 -497 0
c Var 'x_00004_00007' order represents '3' with '500'
-498 500 0
c Var 'x_00004_00007' direct represents '3' with '501'
498 -500 501 0
-501 500 0
-501 -498 0
c Var 'x_00004_00007' order represents '4' with '502'
-500 502 0
c Var 'x_00004_00007' direct represents '4' with '503'
500 -502 503 0
-503 502 0
-503 -500 0
c Var 'x_00004_00007' order represents '5' with '504'
-502 504 0
c Var 'x_00004_00007' direct represents '5' with '505'
502 -504 505 0
-505 504 0
-505 -502 0
c Var 'x_00004_00007' order represents '6' with '506'
-504 506 0
c Var 'x_00004_00007' direct represents '6' with '507'
504 -506 507 0
-507 506 0
-507 -504 0
c Var 'x_00004_00007' order represents '7' with '508'
-506 508 0
c Var 'x_00004_00007' direct represents '7' with '509'
506 -508 509 0
-509 508 0
-509 -506 0
c Var 'x_00004_00007' order represents '8' with '510'
-508 510 0
c Var 'x_00004_00007' direct represents '8' with '511'
508 -510 511 0
-511 510 0
-511 -508 0
c Var 'x_00004_00007' direct represents '9' with '-510'
497 499 501 503 505 507 509 511 -510 0
c Encoding variable: x_00004_00008 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00004_00008' order represents '1' with '512'
c Var 'x_00004_00008' direct represents '1' with '512'
c Var 'x_00004_00008' order represents '2' with '513'
-512 513 0
c Var 'x_00004_00008' direct represents '2' with '514'
512 -513 514 0
-514 513 0
-514 -512 0
c Var 'x_00004_00008' order represents '3' with '515'
-513 515 0
c Var 'x_00004_00008' direct represents '3' with '516'
513 -515 516 0
-516 515 0
-516 -513 0
c Var 'x_00004_00008' order represents '4' with '517'
-515 517 0
c Var 'x_00004_00008' direct represents '4' with '518'
515 -517 518 0
-518 517 0
-518 -515 0
c Var 'x_00004_00008' order represents '5' with '519'
-517 519 0
c Var 'x_00004_00008' direct represents '5' with '520'
517 -519 520 0
-520 519 0
-520 -517 0
c Var 'x_00004_00008' order represents '6' with '521'
-519 521 0
c Var 'x_00004_00008' direct represents '6' with '522'
519 -521 522 0
-522 521 0
-522 -519 0
c Var 'x_00004_00008' order represents '7' with '523'
-521 523 0
c Var 'x_00004_00008' direct represents '7' with '524'
521 -523 524 0
-524 523 0
-524 -521 0
c Var 'x_00004_00008' order represents '8' with '525'
-523 525 0
c Var 'x_00004_00008' direct represents '8' with '526'
523 -525 526 0
-526 525 0
-526 -523 0
c Var 'x_00004_00008' direct represents '9' with '-525'
512 514 516 518 520 522 524 526 -525 0
c Encoding variable: x_00004_00009 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00004_00009' order represents '1' with '527'
c Var 'x_00004_00009' direct represents '1' with '527'
c Var 'x_00004_00009' order represents '2' with '528'
-527 528 0
c Var 'x_00004_00009' direct represents '2' with '529'
527 -528 529 0
-529 528 0
-529 -527 0
c Var 'x_00004_00009' order represents '3' with '530'
-528 530 0
c Var 'x_00004_00009' direct represents '3' with '531'
528 -530 531 0
-531 530 0
-531 -528 0
c Var 'x_00004_00009' order represents '4' with '532'
-530 532 0
c Var 'x_00004_00009' direct represents '4' with '533'
530 -532 533 0
-533 532 0
-533 -530 0
c Var 'x_00004_00009' order represents '5' with '534'
-532 534 0
c Var 'x_00004_00009' direct represents '5' with '535'
532 -534 535 0
-535 534 0
-535 -532 0
c Var 'x_00004_00009' order represents '6' with '536'
-534 536 0
c Var 'x_00004_00009' direct represents '6' with '537'
534 -536 537 0
-537 536 0
-537 -534 0
c Var 'x_00004_00009' order represents '7' with '538'
-536 538 0
c Var 'x_00004_00009' direct represents '7' with '539'
536 -538 539 0
-539 538 0
-539 -536 0
c Var 'x_00004_00009' order represents '8' with '540'
-538 540 0
c Var 'x_00004_00009' direct represents '8' with '541'
538 -540 541 0
-541 540 0
-541 -538 0
c Var 'x_00004_00009' direct represents '9' with '-540'
527 529 531 533 535 537 539 541 -540 0
c Encoding variable: x_00005_00001 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00005_00001' order represents '1' with '542'
c Var 'x_00005_00001' direct represents '1' with '542'
c Var 'x_00005_00001' order represents '2' with '543'
-542 543 0
c Var 'x_00005_00001' direct represents '2' with '544'
542 -543 544 0
-544 543 0
-544 -542 0
c Var 'x_00005_00001' order represents '3' with '545'
-543 545 0
c Var 'x_00005_00001' direct represents '3' with '546'
543 -545 546 0
-546 545 0
-546 -543 0
c Var 'x_00005_00001' order represents '4' with '547'
-545 547 0
c Var 'x_00005_00001' direct represents '4' with '548'
545 -547 548 0
-548 547 0
-548 -545 0
c Var 'x_00005_00001' order represents '5' with '549'
-547 549 0
c Var 'x_00005_00001' direct represents '5' with '550'
547 -549 550 0
-550 549 0
-550 -547 0
c Var 'x_00005_00001' order represents '6' with '551'
-549 551 0
c Var 'x_00005_00001' direct represents '6' with '552'
549 -551 552 0
-552 551 0
-552 -549 0
c Var 'x_00005_00001' order represents '7' with '553'
-551 553 0
c Var 'x_00005_00001' direct represents '7' with '554'
551 -553 554 0
-554 553 0
-554 -551 0
c Var 'x_00005_00001' order represents '8' with '555'
-553 555 0
c Var 'x_00005_00001' direct represents '8' with '556'
553 -555 556 0
-556 555 0
-556 -553 0
c Var 'x_00005_00001' direct represents '9' with '-555'
542 544 546 548 550 552 554 556 -555 0
c Encoding variable: x_00005_00002 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00005_00002' order represents '1' with '557'
c Var 'x_00005_00002' direct represents '1' with '557'
c Var 'x_00005_00002' order represents '2' with '558'
-557 558 0
c Var 'x_00005_00002' direct represents '2' with '559'
557 -558 559 0
-559 558 0
-559 -557 0
c Var 'x_00005_00002' order represents '3' with '560'
-558 560 0
c Var 'x_00005_00002' direct represents '3' with '561'
558 -560 561 0
-561 560 0
-561 -558 0
c Var 'x_00005_00002' order represents '4' with '562'
-560 562 0
c Var 'x_00005_00002' direct represents '4' with '563'
560 -562 563 0
-563 562 0
-563 -560 0
c Var 'x_00005_00002' order represents '5' with '564'
-562 564 0
c Var 'x_00005_00002' direct represents '5' with '565'
562 -564 565 0
-565 564 0
-565 -562 0
c Var 'x_00005_00002' order represents '6' with '566'
-564 566 0
c Var 'x_00005_00002' direct represents '6' with '567'
564 -566 567 0
-567 566 0
-567 -564 0
c Var 'x_00005_00002' order represents '7' with '568'
-566 568 0
c Var 'x_00005_00002' direct represents '7' with '569'
566 -568 569 0
-569 568 0
-569 -566 0
c Var 'x_00005_00002' order represents '8' with '570'
-568 570 0
c Var 'x_00005_00002' direct represents '8' with '571'
568 -570 571 0
-571 570 0
-571 -568 0
c Var 'x_00005_00002' direct represents '9' with '-570'
557 559 561 563 565 567 569 571 -570 0
c Encoding variable: x_00005_00003 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00005_00003' order represents '1' with '572'
c Var 'x_00005_00003' direct represents '1' with '572'
c Var 'x_00005_00003' order represents '2' with '573'
-572 573 0
c Var 'x_00005_00003' direct represents '2' with '574'
572 -573 574 0
-574 573 0
-574 -572 0
c Var 'x_00005_00003' order represents '3' with '575'
-573 575 0
c Var 'x_00005_00003' direct represents '3' with '576'
573 -575 576 0
-576 575 0
-576 -573 0
c Var 'x_00005_00003' order represents '4' with '577'
-575 577 0
c Var 'x_00005_00003' direct represents '4' with '578'
575 -577 578 0
-578 577 0
-578 -575 0
c Var 'x_00005_00003' order represents '5' with '579'
-577 579 0
c Var 'x_00005_00003' direct represents '5' with '580'
577 -579 580 0
-580 579 0
-580 -577 0
c Var 'x_00005_00003' order represents '6' with '581'
-579 581 0
c Var 'x_00005_00003' direct represents '6' with '582'
579 -581 582 0
-582 581 0
-582 -579 0
c Var 'x_00005_00003' order represents '7' with '583'
-581 583 0
c Var 'x_00005_00003' direct represents '7' with '584'
581 -583 584 0
-584 583 0
-584 -581 0
c Var 'x_00005_00003' order represents '8' with '585'
-583 585 0
c Var 'x_00005_00003' direct represents '8' with '586'
583 -585 586 0
-586 585 0
-586 -583 0
c Var 'x_00005_00003' direct represents '9' with '-585'
572 574 576 578 580 582 584 586 -585 0
c Encoding variable: x_00005_00004 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00005_00004' order represents '1' with '587'
c Var 'x_00005_00004' direct represents '1' with '587'
c Var 'x_00005_00004' order represents '2' with '588'
-587 588 0
c Var 'x_00005_00004' direct represents '2' with '589'
587 -588 589 0
-589 588 0
-589 -587 0
c Var 'x_00005_00004' order represents '3' with '590'
-588 590 0
c Var 'x_00005_00004' direct represents '3' with '591'
588 -590 591 0
-591 590 0
-591 -588 0
c Var 'x_00005_00004' order represents '4' with '592'
-590 592 0
c Var 'x_00005_00004' direct represents '4' with '593'
590 -592 593 0
-593 592 0
-593 -590 0
c Var 'x_00005_00004' order represents '5' with '594'
-592 594 0
c Var 'x_00005_00004' direct represents '5' with '595'
592 -594 595 0
-595 594 0
-595 -592 0
c Var 'x_00005_00004' order represents '6' with '596'
-594 596 0
c Var 'x_00005_00004' direct represents '6' with '597'
594 -596 597 0
-597 596 0
-597 -594 0
c Var 'x_00005_00004' order represents '7' with '598'
-596 598 0
c Var 'x_00005_00004' direct represents '7' with '599'
596 -598 599 0
-599 598 0
-599 -596 0
c Var 'x_00005_00004' order represents '8' with '600'
-598 600 0
c Var 'x_00005_00004' direct represents '8' with '601'
598 -600 601 0
-601 600 0
-601 -598 0
c Var 'x_00005_00004' direct represents '9' with '-600'
587 589 591 593 595 597 599 601 -600 0
c Encoding variable: x_00005_00005 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00005_00005' order represents '1' with '602'
c Var 'x_00005_00005' direct represents '1' with '602'
c Var 'x_00005_00005' order represents '2' with '603'
-602 603 0
c Var 'x_00005_00005' direct represents '2' with '604'
602 -603 604 0
-604 603 0
-604 -602 0
c Var 'x_00005_00005' order represents '3' with '605'
-603 605 0
c Var 'x_00005_00005' direct represents '3' with '606'
603 -605 606 0
-606 605 0
-606 -603 0
c Var 'x_00005_00005' order represents '4' with '607'
-605 607 0
c Var 'x_00005_00005' direct represents '4' with '608'
605 -607 608 0
-608 607 0
-608 -605 0
c Var 'x_00005_00005' order represents '5' with '609'
-607 609 0
c Var 'x_00005_00005' direct represents '5' with '610'
607 -609 610 0
-610 609 0
-610 -607 0
c Var 'x_00005_00005' order represents '6' with '611'
-609 611 0
c Var 'x_00005_00005' direct represents '6' with '612'
609 -611 612 0
-612 611 0
-612 -609 0
c Var 'x_00005_00005' order represents '7' with '613'
-611 613 0
c Var 'x_00005_00005' direct represents '7' with '614'
611 -613 614 0
-614 613 0
-614 -611 0
c Var 'x_00005_00005' order represents '8' with '615'
-613 615 0
c Var 'x_00005_00005' direct represents '8' with '616'
613 -615 616 0
-616 615 0
-616 -613 0
c Var 'x_00005_00005' direct represents '9' with '-615'
602 604 606 608 610 612 614 616 -615 0
c Encoding variable: x_00005_00006 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00005_00006' order represents '1' with '617'
c Var 'x_00005_00006' direct represents '1' with '617'
c Var 'x_00005_00006' order represents '2' with '618'
-617 618 0
c Var 'x_00005_00006' direct represents '2' with '619'
617 -618 619 0
-619 618 0
-619 -617 0
c Var 'x_00005_00006' order represents '3' with '620'
-618 620 0
c Var 'x_00005_00006' direct represents '3' with '621'
618 -620 621 0
-621 620 0
-621 -618 0
c Var 'x_00005_00006' order represents '4' with '622'
-620 622 0
c Var 'x_00005_00006' direct represents '4' with '623'
620 -622 623 0
-623 622 0
-623 -620 0
c Var 'x_00005_00006' order represents '5' with '624'
-622 624 0
c Var 'x_00005_00006' direct represents '5' with '625'
622 -624 625 0
-625 624 0
-625 -622 0
c Var 'x_00005_00006' order represents '6' with '626'
-624 626 0
c Var 'x_00005_00006' direct represents '6' with '627'
624 -626 627 0
-627 626 0
-627 -624 0
c Var 'x_00005_00006' order represents '7' with '628'
-626 628 0
c Var 'x_00005_00006' direct represents '7' with '629'
626 -628 629 0
-629 628 0
-629 -626 0
c Var 'x_00005_00006' order represents '8' with '630'
-628 630 0
c Var 'x_00005_00006' direct represents '8' with '631'
628 -630 631 0
-631 630 0
-631 -628 0
c Var 'x_00005_00006' direct represents '9' with '-630'
617 619 621 623 625 627 629 631 -630 0
c Encoding variable: x_00005_00007 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00005_00007' order represents '1' with '632'
c Var 'x_00005_00007' direct represents '1' with '632'
c Var 'x_00005_00007' order represents '2' with '633'
-632 633 0
c Var 'x_00005_00007' direct represents '2' with '634'
632 -633 634 0
-634 633 0
-634 -632 0
c Var 'x_00005_00007' order represents '3' with '635'
-633 635 0
c Var 'x_00005_00007' direct represents '3' with '636'
633 -635 636 0
-636 635 0
-636 -633 0
c Var 'x_00005_00007' order represents '4' with '637'
-635 637 0
c Var 'x_00005_00007' direct represents '4' with '638'
635 -637 638 0
-638 637 0
-638 -635 0
c Var 'x_00005_00007' order represents '5' with '639'
-637 639 0
c Var 'x_00005_00007' direct represents '5' with '640'
637 -639 640 0
-640 639 0
-640 -637 0
c Var 'x_00005_00007' order represents '6' with '641'
-639 641 0
c Var 'x_00005_00007' direct represents '6' with '642'
639 -641 642 0
-642 641 0
-642 -639 0
c Var 'x_00005_00007' order represents '7' with '643'
-641 643 0
c Var 'x_00005_00007' direct represents '7' with '644'
641 -643 644 0
-644 643 0
-644 -641 0
c Var 'x_00005_00007' order represents '8' with '645'
-643 645 0
c Var 'x_00005_00007' direct represents '8' with '646'
643 -645 646 0
-646 645 0
-646 -643 0
c Var 'x_00005_00007' direct represents '9' with '-645'
632 634 636 638 640 642 644 646 -645 0
c Encoding variable: x_00005_00008 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00005_00008' order represents '1' with '647'
c Var 'x_00005_00008' direct represents '1' with '647'
c Var 'x_00005_00008' order represents '2' with '648'
-647 648 0
c Var 'x_00005_00008' direct represents '2' with '649'
647 -648 649 0
-649 648 0
-649 -647 0
c Var 'x_00005_00008' order represents '3' with '650'
-648 650 0
c Var 'x_00005_00008' direct represents '3' with '651'
648 -650 651 0
-651 650 0
-651 -648 0
c Var 'x_00005_00008' order represents '4' with '652'
-650 652 0
c Var 'x_00005_00008' direct represents '4' with '653'
650 -652 653 0
-653 652 0
-653 -650 0
c Var 'x_00005_00008' order represents '5' with '654'
-652 654 0
c Var 'x_00005_00008' direct represents '5' with '655'
652 -654 655 0
-655 654 0
-655 -652 0
c Var 'x_00005_00008' order represents '6' with '656'
-654 656 0
c Var 'x_00005_00008' direct represents '6' with '657'
654 -656 657 0
-657 656 0
-657 -654 0
c Var 'x_00005_00008' order represents '7' with '658'
-656 658 0
c Var 'x_00005_00008' direct represents '7' with '659'
656 -658 659 0
-659 658 0
-659 -656 0
c Var 'x_00005_00008' order represents '8' with '660'
-658 660 0
c Var 'x_00005_00008' direct represents '8' with '661'
658 -660 661 0
-661 660 0
-661 -658 0
c Var 'x_00005_00008' direct represents '9' with '-660'
647 649 651 653 655 657 659 661 -660 0
c Encoding variable: x_00005_00009 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00005_00009' order represents '1' with '662'
c Var 'x_00005_00009' direct represents '1' with '662'
c Var 'x_00005_00009' order represents '2' with '663'
-662 663 0
c Var 'x_00005_00009' direct represents '2' with '664'
662 -663 664 0
-664 663 0
-664 -662 0
c Var 'x_00005_00009' order represents '3' with '665'
-663 665 0
c Var 'x_00005_00009' direct represents '3' with '666'
663 -665 666 0
-666 665 0
-666 -663 0
c Var 'x_00005_00009' order represents '4' with '667'
-665 667 0
c Var 'x_00005_00009' direct represents '4' with '668'
665 -667 668 0
-668 667 0
-668 -665 0
c Var 'x_00005_00009' order represents '5' with '669'
-667 669 0
c Var 'x_00005_00009' direct represents '5' with '670'
667 -669 670 0
-670 669 0
-670 -667 0
c Var 'x_00005_00009' order represents '6' with '671'
-669 671 0
c Var 'x_00005_00009' direct represents '6' with '672'
669 -671 672 0
-672 671 0
-672 -669 0
c Var 'x_00005_00009' order represents '7' with '673'
-671 673 0
c Var 'x_00005_00009' direct represents '7' with '674'
671 -673 674 0
-674 673 0
-674 -671 0
c Var 'x_00005_00009' order represents '8' with '675'
-673 675 0
c Var 'x_00005_00009' direct represents '8' with '676'
673 -675 676 0
-676 675 0
-676 -673 0
c Var 'x_00005_00009' direct represents '9' with '-675'
662 664 666 668 670 672 674 676 -675 0
c Encoding variable: x_00006_00001 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00006_00001' order represents '1' with '677'
c Var 'x_00006_00001' direct represents '1' with '677'
c Var 'x_00006_00001' order represents '2' with '678'
-677 678 0
c Var 'x_00006_00001' direct represents '2' with '679'
677 -678 679 0
-679 678 0
-679 -677 0
c Var 'x_00006_00001' order represents '3' with '680'
-678 680 0
c Var 'x_00006_00001' direct represents '3' with '681'
678 -680 681 0
-681 680 0
-681 -678 0
c Var 'x_00006_00001' order represents '4' with '682'
-680 682 0
c Var 'x_00006_00001' direct represents '4' with '683'
680 -682 683 0
-683 682 0
-683 -680 0
c Var 'x_00006_00001' order represents '5' with '684'
-682 684 0
c Var 'x_00006_00001' direct represents '5' with '685'
682 -684 685 0
-685 684 0
-685 -682 0
c Var 'x_00006_00001' order represents '6' with '686'
-684 686 0
c Var 'x_00006_00001' direct represents '6' with '687'
684 -686 687 0
-687 686 0
-687 -684 0
c Var 'x_00006_00001' order represents '7' with '688'
-686 688 0
c Var 'x_00006_00001' direct represents '7' with '689'
686 -688 689 0
-689 688 0
-689 -686 0
c Var 'x_00006_00001' order represents '8' with '690'
-688 690 0
c Var 'x_00006_00001' direct represents '8' with '691'
688 -690 691 0
-691 690 0
-691 -688 0
c Var 'x_00006_00001' direct represents '9' with '-690'
677 679 681 683 685 687 689 691 -690 0
c Encoding variable: x_00006_00002 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00006_00002' order represents '1' with '692'
c Var 'x_00006_00002' direct represents '1' with '692'
c Var 'x_00006_00002' order represents '2' with '693'
-692 693 0
c Var 'x_00006_00002' direct represents '2' with '694'
692 -693 694 0
-694 693 0
-694 -692 0
c Var 'x_00006_00002' order represents '3' with '695'
-693 695 0
c Var 'x_00006_00002' direct represents '3' with '696'
693 -695 696 0
-696 695 0
-696 -693 0
c Var 'x_00006_00002' order represents '4' with '697'
-695 697 0
c Var 'x_00006_00002' direct represents '4' with '698'
695 -697 698 0
-698 697 0
-698 -695 0
c Var 'x_00006_00002' order represents '5' with '699'
-697 699 0
c Var 'x_00006_00002' direct represents '5' with '700'
697 -699 700 0
-700 699 0
-700 -697 0
c Var 'x_00006_00002' order represents '6' with '701'
-699 701 0
c Var 'x_00006_00002' direct represents '6' with '702'
699 -701 702 0
-702 701 0
-702 -699 0
c Var 'x_00006_00002' order represents '7' with '703'
-701 703 0
c Var 'x_00006_00002' direct represents '7' with '704'
701 -703 704 0
-704 703 0
-704 -701 0
c Var 'x_00006_00002' order represents '8' with '705'
-703 705 0
c Var 'x_00006_00002' direct represents '8' with '706'
703 -705 706 0
-706 705 0
-706 -703 0
c Var 'x_00006_00002' direct represents '9' with '-705'
692 694 696 698 700 702 704 706 -705 0
c Encoding variable: x_00006_00003 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00006_00003' order represents '1' with '707'
c Var 'x_00006_00003' direct represents '1' with '707'
c Var 'x_00006_00003' order represents '2' with '708'
-707 708 0
c Var 'x_00006_00003' direct represents '2' with '709'
707 -708 709 0
-709 708 0
-709 -707 0
c Var 'x_00006_00003' order represents '3' with '710'
-708 710 0
c Var 'x_00006_00003' direct represents '3' with '711'
708 -710 711 0
-711 710 0
-711 -708 0
c Var 'x_00006_00003' order represents '4' with '712'
-710 712 0
c Var 'x_00006_00003' direct represents '4' with '713'
710 -712 713 0
-713 712 0
-713 -710 0
c Var 'x_00006_00003' order represents '5' with '714'
-712 714 0
c Var 'x_00006_00003' direct represents '5' with '715'
712 -714 715 0
-715 714 0
-715 -712 0
c Var 'x_00006_00003' order represents '6' with '716'
-714 716 0
c Var 'x_00006_00003' direct represents '6' with '717'
714 -716 717 0
-717 716 0
-717 -714 0
c Var 'x_00006_00003' order represents '7' with '718'
-716 718 0
c Var 'x_00006_00003' direct represents '7' with '719'
716 -718 719 0
-719 718 0
-719 -716 0
c Var 'x_00006_00003' order represents '8' with '720'
-718 720 0
c Var 'x_00006_00003' direct represents '8' with '721'
718 -720 721 0
-721 720 0
-721 -718 0
c Var 'x_00006_00003' direct represents '9' with '-720'
707 709 711 713 715 717 719 721 -720 0
c Encoding variable: x_00006_00004 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00006_00004' order represents '1' with '722'
c Var 'x_00006_00004' direct represents '1' with '722'
c Var 'x_00006_00004' order represents '2' with '723'
-722 723 0
c Var 'x_00006_00004' direct represents '2' with '724'
722 -723 724 0
-724 723 0
-724 -722 0
c Var 'x_00006_00004' order represents '3' with '725'
-723 725 0
c Var 'x_00006_00004' direct represents '3' with '726'
723 -725 726 0
-726 725 0
-726 -723 0
c Var 'x_00006_00004' order represents '4' with '727'
-725 727 0
c Var 'x_00006_00004' direct represents '4' with '728'
725 -727 728 0
-728 727 0
-728 -725 0
c Var 'x_00006_00004' order represents '5' with '729'
-727 729 0
c Var 'x_00006_00004' direct represents '5' with '730'
727 -729 730 0
-730 729 0
-730 -727 0
c Var 'x_00006_00004' order represents '6' with '731'
-729 731 0
c Var 'x_00006_00004' direct represents '6' with '732'
729 -731 732 0
-732 731 0
-732 -729 0
c Var 'x_00006_00004' order represents '7' with '733'
-731 733 0
c Var 'x_00006_00004' direct represents '7' with '734'
731 -733 734 0
-734 733 0
-734 -731 0
c Var 'x_00006_00004' order represents '8' with '735'
-733 735 0
c Var 'x_00006_00004' direct represents '8' with '736'
733 -735 736 0
-736 735 0
-736 -733 0
c Var 'x_00006_00004' direct represents '9' with '-735'
722 724 726 728 730 732 734 736 -735 0
c Encoding variable: x_00006_00005 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00006_00005' order represents '1' with '737'
c Var 'x_00006_00005' direct represents '1' with '737'
c Var 'x_00006_00005' order represents '2' with '738'
-737 738 0
c Var 'x_00006_00005' direct represents '2' with '739'
737 -738 739 0
-739 738 0
-739 -737 0
c Var 'x_00006_00005' order represents '3' with '740'
-738 740 0
c Var 'x_00006_00005' direct represents '3' with '741'
738 -740 741 0
-741 740 0
-741 -738 0
c Var 'x_00006_00005' order represents '4' with '742'
-740 742 0
c Var 'x_00006_00005' direct represents '4' with '743'
740 -742 743 0
-743 742 0
-743 -740 0
c Var 'x_00006_00005' order represents '5' with '744'
-742 744 0
c Var 'x_00006_00005' direct represents '5' with '745'
742 -744 745 0
-745 744 0
-745 -742 0
c Var 'x_00006_00005' order represents '6' with '746'
-744 746 0
c Var 'x_00006_00005' direct represents '6' with '747'
744 -746 747 0
-747 746 0
-747 -744 0
c Var 'x_00006_00005' order represents '7' with '748'
-746 748 0
c Var 'x_00006_00005' direct represents '7' with '749'
746 -748 749 0
-749 748 0
-749 -746 0
c Var 'x_00006_00005' order represents '8' with '750'
-748 750 0
c Var 'x_00006_00005' direct represents '8' with '751'
748 -750 751 0
-751 750 0
-751 -748 0
c Var 'x_00006_00005' direct represents '9' with '-750'
737 739 741 743 745 747 749 751 -750 0
c Encoding variable: x_00006_00006 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00006_00006' order represents '1' with '752'
c Var 'x_00006_00006' direct represents '1' with '752'
c Var 'x_00006_00006' order represents '2' with '753'
-752 753 0
c Var 'x_00006_00006' direct represents '2' with '754'
752 -753 754 0
-754 753 0
-754 -752 0
c Var 'x_00006_00006' order represents '3' with '755'
-753 755 0
c Var 'x_00006_00006' direct represents '3' with '756'
753 -755 756 0
-756 755 0
-756 -753 0
c Var 'x_00006_00006' order represents '4' with '757'
-755 757 0
c Var 'x_00006_00006' direct represents '4' with '758'
755 -757 758 0
-758 757 0
-758 -755 0
c Var 'x_00006_00006' order represents '5' with '759'
-757 759 0
c Var 'x_00006_00006' direct represents '5' with '760'
757 -759 760 0
-760 759 0
-760 -757 0
c Var 'x_00006_00006' order represents '6' with '761'
-759 761 0
c Var 'x_00006_00006' direct represents '6' with '762'
759 -761 762 0
-762 761 0
-762 -759 0
c Var 'x_00006_00006' order represents '7' with '763'
-761 763 0
c Var 'x_00006_00006' direct represents '7' with '764'
761 -763 764 0
-764 763 0
-764 -761 0
c Var 'x_00006_00006' order represents '8' with '765'
-763 765 0
c Var 'x_00006_00006' direct represents '8' with '766'
763 -765 766 0
-766 765 0
-766 -763 0
c Var 'x_00006_00006' direct represents '9' with '-765'
752 754 756 758 760 762 764 766 -765 0
c Encoding variable: x_00006_00007 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00006_00007' order represents '1' with '767'
c Var 'x_00006_00007' direct represents '1' with '767'
c Var 'x_00006_00007' order represents '2' with '768'
-767 768 0
c Var 'x_00006_00007' direct represents '2' with '769'
767 -768 769 0
-769 768 0
-769 -767 0
c Var 'x_00006_00007' order represents '3' with '770'
-768 770 0
c Var 'x_00006_00007' direct represents '3' with '771'
768 -770 771 0
-771 770 0
-771 -768 0
c Var 'x_00006_00007' order represents '4' with '772'
-770 772 0
c Var 'x_00006_00007' direct represents '4' with '773'
770 -772 773 0
-773 772 0
-773 -770 0
c Var 'x_00006_00007' order represents '5' with '774'
-772 774 0
c Var 'x_00006_00007' direct represents '5' with '775'
772 -774 775 0
-775 774 0
-775 -772 0
c Var 'x_00006_00007' order represents '6' with '776'
-774 776 0
c Var 'x_00006_00007' direct represents '6' with '777'
774 -776 777 0
-777 776 0
-777 -774 0
c Var 'x_00006_00007' order represents '7' with '778'
-776 778 0
c Var 'x_00006_00007' direct represents '7' with '779'
776 -778 779 0
-779 778 0
-779 -776 0
c Var 'x_00006_00007' order represents '8' with '780'
-778 780 0
c Var 'x_00006_00007' direct represents '8' with '781'
778 -780 781 0
-781 780 0
-781 -778 0
c Var 'x_00006_00007' direct represents '9' with '-780'
767 769 771 773 775 777 779 781 -780 0
c Encoding variable: x_00006_00008 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00006_00008' order represents '1' with '782'
c Var 'x_00006_00008' direct represents '1' with '782'
c Var 'x_00006_00008' order represents '2' with '783'
-782 783 0
c Var 'x_00006_00008' direct represents '2' with '784'
782 -783 784 0
-784 783 0
-784 -782 0
c Var 'x_00006_00008' order represents '3' with '785'
-783 785 0
c Var 'x_00006_00008' direct represents '3' with '786'
783 -785 786 0
-786 785 0
-786 -783 0
c Var 'x_00006_00008' order represents '4' with '787'
-785 787 0
c Var 'x_00006_00008' direct represents '4' with '788'
785 -787 788 0
-788 787 0
-788 -785 0
c Var 'x_00006_00008' order represents '5' with '789'
-787 789 0
c Var 'x_00006_00008' direct represents '5' with '790'
787 -789 790 0
-790 789 0
-790 -787 0
c Var 'x_00006_00008' order represents '6' with '791'
-789 791 0
c Var 'x_00006_00008' direct represents '6' with '792'
789 -791 792 0
-792 791 0
-792 -789 0
c Var 'x_00006_00008' order represents '7' with '793'
-791 793 0
c Var 'x_00006_00008' direct represents '7' with '794'
791 -793 794 0
-794 793 0
-794 -791 0
c Var 'x_00006_00008' order represents '8' with '795'
-793 795 0
c Var 'x_00006_00008' direct represents '8' with '796'
793 -795 796 0
-796 795 0
-796 -793 0
c Var 'x_00006_00008' direct represents '9' with '-795'
782 784 786 788 790 792 794 796 -795 0
c Encoding variable: x_00006_00009 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00006_00009' order represents '1' with '797'
c Var 'x_00006_00009' direct represents '1' with '797'
c Var 'x_00006_00009' order represents '2' with '798'
-797 798 0
c Var 'x_00006_00009' direct represents '2' with '799'
797 -798 799 0
-799 798 0
-799 -797 0
c Var 'x_00006_00009' order represents '3' with '800'
-798 800 0
c Var 'x_00006_00009' direct represents '3' with '801'
798 -800 801 0
-801 800 0
-801 -798 0
c Var 'x_00006_00009' order represents '4' with '802'
-800 802 0
c Var 'x_00006_00009' direct represents '4' with '803'
800 -802 803 0
-803 802 0
-803 -800 0
c Var 'x_00006_00009' order represents '5' with '804'
-802 804 0
c Var 'x_00006_00009' direct represents '5' with '805'
802 -804 805 0
-805 804 0
-805 -802 0
c Var 'x_00006_00009' order represents '6' with '806'
-804 806 0
c Var 'x_00006_00009' direct represents '6' with '807'
804 -806 807 0
-807 806 0
-807 -804 0
c Var 'x_00006_00009' order represents '7' with '808'
-806 808 0
c Var 'x_00006_00009' direct represents '7' with '809'
806 -808 809 0
-809 808 0
-809 -806 0
c Var 'x_00006_00009' order represents '8' with '810'
-808 810 0
c Var 'x_00006_00009' direct represents '8' with '811'
808 -810 811 0
-811 810 0
-811 -808 0
c Var 'x_00006_00009' direct represents '9' with '-810'
797 799 801 803 805 807 809 811 -810 0
c Encoding variable: x_00007_00001 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00007_00001' order represents '1' with '812'
c Var 'x_00007_00001' direct represents '1' with '812'
c Var 'x_00007_00001' order represents '2' with '813'
-812 813 0
c Var 'x_00007_00001' direct represents '2' with '814'
812 -813 814 0
-814 813 0
-814 -812 0
c Var 'x_00007_00001' order represents '3' with '815'
-813 815 0
c Var 'x_00007_00001' direct represents '3' with '816'
813 -815 816 0
-816 815 0
-816 -813 0
c Var 'x_00007_00001' order represents '4' with '817'
-815 817 0
c Var 'x_00007_00001' direct represents '4' with '818'
815 -817 818 0
-818 817 0
-818 -815 0
c Var 'x_00007_00001' order represents '5' with '819'
-817 819 0
c Var 'x_00007_00001' direct represents '5' with '820'
817 -819 820 0
-820 819 0
-820 -817 0
c Var 'x_00007_00001' order represents '6' with '821'
-819 821 0
c Var 'x_00007_00001' direct represents '6' with '822'
819 -821 822 0
-822 821 0
-822 -819 0
c Var 'x_00007_00001' order represents '7' with '823'
-821 823 0
c Var 'x_00007_00001' direct represents '7' with '824'
821 -823 824 0
-824 823 0
-824 -821 0
c Var 'x_00007_00001' order represents '8' with '825'
-823 825 0
c Var 'x_00007_00001' direct represents '8' with '826'
823 -825 826 0
-826 825 0
-826 -823 0
c Var 'x_00007_00001' direct represents '9' with '-825'
812 814 816 818 820 822 824 826 -825 0
c Encoding variable: x_00007_00002 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00007_00002' order represents '1' with '827'
c Var 'x_00007_00002' direct represents '1' with '827'
c Var 'x_00007_00002' order represents '2' with '828'
-827 828 0
c Var 'x_00007_00002' direct represents '2' with '829'
827 -828 829 0
-829 828 0
-829 -827 0
c Var 'x_00007_00002' order represents '3' with '830'
-828 830 0
c Var 'x_00007_00002' direct represents '3' with '831'
828 -830 831 0
-831 830 0
-831 -828 0
c Var 'x_00007_00002' order represents '4' with '832'
-830 832 0
c Var 'x_00007_00002' direct represents '4' with '833'
830 -832 833 0
-833 832 0
-833 -830 0
c Var 'x_00007_00002' order represents '5' with '834'
-832 834 0
c Var 'x_00007_00002' direct represents '5' with '835'
832 -834 835 0
-835 834 0
-835 -832 0
c Var 'x_00007_00002' order represents '6' with '836'
-834 836 0
c Var 'x_00007_00002' direct represents '6' with '837'
834 -836 837 0
-837 836 0
-837 -834 0
c Var 'x_00007_00002' order represents '7' with '838'
-836 838 0
c Var 'x_00007_00002' direct represents '7' with '839'
836 -838 839 0
-839 838 0
-839 -836 0
c Var 'x_00007_00002' order represents '8' with '840'
-838 840 0
c Var 'x_00007_00002' direct represents '8' with '841'
838 -840 841 0
-841 840 0
-841 -838 0
c Var 'x_00007_00002' direct represents '9' with '-840'
827 829 831 833 835 837 839 841 -840 0
c Encoding variable: x_00007_00003 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00007_00003' order represents '1' with '842'
c Var 'x_00007_00003' direct represents '1' with '842'
c Var 'x_00007_00003' order represents '2' with '843'
-842 843 0
c Var 'x_00007_00003' direct represents '2' with '844'
842 -843 844 0
-844 843 0
-844 -842 0
c Var 'x_00007_00003' order represents '3' with '845'
-843 845 0
c Var 'x_00007_00003' direct represents '3' with '846'
843 -845 846 0
-846 845 0
-846 -843 0
c Var 'x_00007_00003' order represents '4' with '847'
-845 847 0
c Var 'x_00007_00003' direct represents '4' with '848'
845 -847 848 0
-848 847 0
-848 -845 0
c Var 'x_00007_00003' order represents '5' with '849'
-847 849 0
c Var 'x_00007_00003' direct represents '5' with '850'
847 -849 850 0
-850 849 0
-850 -847 0
c Var 'x_00007_00003' order represents '6' with '851'
-849 851 0
c Var 'x_00007_00003' direct represents '6' with '852'
849 -851 852 0
-852 851 0
-852 -849 0
c Var 'x_00007_00003' order represents '7' with '853'
-851 853 0
c Var 'x_00007_00003' direct represents '7' with '854'
851 -853 854 0
-854 853 0
-854 -851 0
c Var 'x_00007_00003' order represents '8' with '855'
-853 855 0
c Var 'x_00007_00003' direct represents '8' with '856'
853 -855 856 0
-856 855 0
-856 -853 0
c Var 'x_00007_00003' direct represents '9' with '-855'
842 844 846 848 850 852 854 856 -855 0
c Encoding variable: x_00007_00004 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00007_00004' order represents '1' with '857'
c Var 'x_00007_00004' direct represents '1' with '857'
c Var 'x_00007_00004' order represents '2' with '858'
-857 858 0
c Var 'x_00007_00004' direct represents '2' with '859'
857 -858 859 0
-859 858 0
-859 -857 0
c Var 'x_00007_00004' order represents '3' with '860'
-858 860 0
c Var 'x_00007_00004' direct represents '3' with '861'
858 -860 861 0
-861 860 0
-861 -858 0
c Var 'x_00007_00004' order represents '4' with '862'
-860 862 0
c Var 'x_00007_00004' direct represents '4' with '863'
860 -862 863 0
-863 862 0
-863 -860 0
c Var 'x_00007_00004' order represents '5' with '864'
-862 864 0
c Var 'x_00007_00004' direct represents '5' with '865'
862 -864 865 0
-865 864 0
-865 -862 0
c Var 'x_00007_00004' order represents '6' with '866'
-864 866 0
c Var 'x_00007_00004' direct represents '6' with '867'
864 -866 867 0
-867 866 0
-867 -864 0
c Var 'x_00007_00004' order represents '7' with '868'
-866 868 0
c Var 'x_00007_00004' direct represents '7' with '869'
866 -868 869 0
-869 868 0
-869 -866 0
c Var 'x_00007_00004' order represents '8' with '870'
-868 870 0
c Var 'x_00007_00004' direct represents '8' with '871'
868 -870 871 0
-871 870 0
-871 -868 0
c Var 'x_00007_00004' direct represents '9' with '-870'
857 859 861 863 865 867 869 871 -870 0
c Encoding variable: x_00007_00005 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00007_00005' order represents '1' with '872'
c Var 'x_00007_00005' direct represents '1' with '872'
c Var 'x_00007_00005' order represents '2' with '873'
-872 873 0
c Var 'x_00007_00005' direct represents '2' with '874'
872 -873 874 0
-874 873 0
-874 -872 0
c Var 'x_00007_00005' order represents '3' with '875'
-873 875 0
c Var 'x_00007_00005' direct represents '3' with '876'
873 -875 876 0
-876 875 0
-876 -873 0
c Var 'x_00007_00005' order represents '4' with '877'
-875 877 0
c Var 'x_00007_00005' direct represents '4' with '878'
875 -877 878 0
-878 877 0
-878 -875 0
c Var 'x_00007_00005' order represents '5' with '879'
-877 879 0
c Var 'x_00007_00005' direct represents '5' with '880'
877 -879 880 0
-880 879 0
-880 -877 0
c Var 'x_00007_00005' order represents '6' with '881'
-879 881 0
c Var 'x_00007_00005' direct represents '6' with '882'
879 -881 882 0
-882 881 0
-882 -879 0
c Var 'x_00007_00005' order represents '7' with '883'
-881 883 0
c Var 'x_00007_00005' direct represents '7' with '884'
881 -883 884 0
-884 883 0
-884 -881 0
c Var 'x_00007_00005' order represents '8' with '885'
-883 885 0
c Var 'x_00007_00005' direct represents '8' with '886'
883 -885 886 0
-886 885 0
-886 -883 0
c Var 'x_00007_00005' direct represents '9' with '-885'
872 874 876 878 880 882 884 886 -885 0
c Encoding variable: x_00007_00006 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00007_00006' order represents '1' with '887'
c Var 'x_00007_00006' direct represents '1' with '887'
c Var 'x_00007_00006' order represents '2' with '888'
-887 888 0
c Var 'x_00007_00006' direct represents '2' with '889'
887 -888 889 0
-889 888 0
-889 -887 0
c Var 'x_00007_00006' order represents '3' with '890'
-888 890 0
c Var 'x_00007_00006' direct represents '3' with '891'
888 -890 891 0
-891 890 0
-891 -888 0
c Var 'x_00007_00006' order represents '4' with '892'
-890 892 0
c Var 'x_00007_00006' direct represents '4' with '893'
890 -892 893 0
-893 892 0
-893 -890 0
c Var 'x_00007_00006' order represents '5' with '894'
-892 894 0
c Var 'x_00007_00006' direct represents '5' with '895'
892 -894 895 0
-895 894 0
-895 -892 0
c Var 'x_00007_00006' order represents '6' with '896'
-894 896 0
c Var 'x_00007_00006' direct represents '6' with '897'
894 -896 897 0
-897 896 0
-897 -894 0
c Var 'x_00007_00006' order represents '7' with '898'
-896 898 0
c Var 'x_00007_00006' direct represents '7' with '899'
896 -898 899 0
-899 898 0
-899 -896 0
c Var 'x_00007_00006' order represents '8' with '900'
-898 900 0
c Var 'x_00007_00006' direct represents '8' with '901'
898 -900 901 0
-901 900 0
-901 -898 0
c Var 'x_00007_00006' direct represents '9' with '-900'
887 889 891 893 895 897 899 901 -900 0
c Encoding variable: x_00007_00007 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00007_00007' order represents '1' with '902'
c Var 'x_00007_00007' direct represents '1' with '902'
c Var 'x_00007_00007' order represents '2' with '903'
-902 903 0
c Var 'x_00007_00007' direct represents '2' with '904'
902 -903 904 0
-904 903 0
-904 -902 0
c Var 'x_00007_00007' order represents '3' with '905'
-903 905 0
c Var 'x_00007_00007' direct represents '3' with '906'
903 -905 906 0
-906 905 0
-906 -903 0
c Var 'x_00007_00007' order represents '4' with '907'
-905 907 0
c Var 'x_00007_00007' direct represents '4' with '908'
905 -907 908 0
-908 907 0
-908 -905 0
c Var 'x_00007_00007' order represents '5' with '909'
-907 909 0
c Var 'x_00007_00007' direct represents '5' with '910'
907 -909 910 0
-910 909 0
-910 -907 0
c Var 'x_00007_00007' order represents '6' with '911'
-909 911 0
c Var 'x_00007_00007' direct represents '6' with '912'
909 -911 912 0
-912 911 0
-912 -909 0
c Var 'x_00007_00007' order represents '7' with '913'
-911 913 0
c Var 'x_00007_00007' direct represents '7' with '914'
911 -913 914 0
-914 913 0
-914 -911 0
c Var 'x_00007_00007' order represents '8' with '915'
-913 915 0
c Var 'x_00007_00007' direct represents '8' with '916'
913 -915 916 0
-916 915 0
-916 -913 0
c Var 'x_00007_00007' direct represents '9' with '-915'
902 904 906 908 910 912 914 916 -915 0
c Encoding variable: x_00007_00008 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00007_00008' order represents '1' with '917'
c Var 'x_00007_00008' direct represents '1' with '917'
c Var 'x_00007_00008' order represents '2' with '918'
-917 918 0
c Var 'x_00007_00008' direct represents '2' with '919'
917 -918 919 0
-919 918 0
-919 -917 0
c Var 'x_00007_00008' order represents '3' with '920'
-918 920 0
c Var 'x_00007_00008' direct represents '3' with '921'
918 -920 921 0
-921 920 0
-921 -918 0
c Var 'x_00007_00008' order represents '4' with '922'
-920 922 0
c Var 'x_00007_00008' direct represents '4' with '923'
920 -922 923 0
-923 922 0
-923 -920 0
c Var 'x_00007_00008' order represents '5' with '924'
-922 924 0
c Var 'x_00007_00008' direct represents '5' with '925'
922 -924 925 0
-925 924 0
-925 -922 0
c Var 'x_00007_00008' order represents '6' with '926'
-924 926 0
c Var 'x_00007_00008' direct represents '6' with '927'
924 -926 927 0
-927 926 0
-927 -924 0
c Var 'x_00007_00008' order represents '7' with '928'
-926 928 0
c Var 'x_00007_00008' direct represents '7' with '929'
926 -928 929 0
-929 928 0
-929 -926 0
c Var 'x_00007_00008' order represents '8' with '930'
-928 930 0
c Var 'x_00007_00008' direct represents '8' with '931'
928 -930 931 0
-931 930 0
-931 -928 0
c Var 'x_00007_00008' direct represents '9' with '-930'
917 919 921 923 925 927 929 931 -930 0
c Encoding variable: x_00007_00009 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00007_00009' order represents '1' with '932'
c Var 'x_00007_00009' direct represents '1' with '932'
c Var 'x_00007_00009' order represents '2' with '933'
-932 933 0
c Var 'x_00007_00009' direct represents '2' with '934'
932 -933 934 0
-934 933 0
-934 -932 0
c Var 'x_00007_00009' order represents '3' with '935'
-933 935 0
c Var 'x_00007_00009' direct represents '3' with '936'
933 -935 936 0
-936 935 0
-936 -933 0
c Var 'x_00007_00009' order represents '4' with '937'
-935 937 0
c Var 'x_00007_00009' direct represents '4' with '938'
935 -937 938 0
-938 937 0
-938 -935 0
c Var 'x_00007_00009' order represents '5' with '939'
-937 939 0
c Var 'x_00007_00009' direct represents '5' with '940'
937 -939 940 0
-940 939 0
-940 -937 0
c Var 'x_00007_00009' order represents '6' with '941'
-939 941 0
c Var 'x_00007_00009' direct represents '6' with '942'
939 -941 942 0
-942 941 0
-942 -939 0
c Var 'x_00007_00009' order represents '7' with '943'
-941 943 0
c Var 'x_00007_00009' direct represents '7' with '944'
941 -943 944 0
-944 943 0
-944 -941 0
c Var 'x_00007_00009' order represents '8' with '945'
-943 945 0
c Var 'x_00007_00009' direct represents '8' with '946'
943 -945 946 0
-946 945 0
-946 -943 0
c Var 'x_00007_00009' direct represents '9' with '-945'
932 934 936 938 940 942 944 946 -945 0
c Encoding variable: x_00008_00001 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00008_00001' order represents '1' with '947'
c Var 'x_00008_00001' direct represents '1' with '947'
c Var 'x_00008_00001' order represents '2' with '948'
-947 948 0
c Var 'x_00008_00001' direct represents '2' with '949'
947 -948 949 0
-949 948 0
-949 -947 0
c Var 'x_00008_00001' order represents '3' with '950'
-948 950 0
c Var 'x_00008_00001' direct represents '3' with '951'
948 -950 951 0
-951 950 0
-951 -948 0
c Var 'x_00008_00001' order represents '4' with '952'
-950 952 0
c Var 'x_00008_00001' direct represents '4' with '953'
950 -952 953 0
-953 952 0
-953 -950 0
c Var 'x_00008_00001' order represents '5' with '954'
-952 954 0
c Var 'x_00008_00001' direct represents '5' with '955'
952 -954 955 0
-955 954 0
-955 -952 0
c Var 'x_00008_00001' order represents '6' with '956'
-954 956 0
c Var 'x_00008_00001' direct represents '6' with '957'
954 -956 957 0
-957 956 0
-957 -954 0
c Var 'x_00008_00001' order represents '7' with '958'
-956 958 0
c Var 'x_00008_00001' direct represents '7' with '959'
956 -958 959 0
-959 958 0
-959 -956 0
c Var 'x_00008_00001' order represents '8' with '960'
-958 960 0
c Var 'x_00008_00001' direct represents '8' with '961'
958 -960 961 0
-961 960 0
-961 -958 0
c Var 'x_00008_00001' direct represents '9' with '-960'
947 949 951 953 955 957 959 961 -960 0
c Encoding variable: x_00008_00002 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00008_00002' order represents '1' with '962'
c Var 'x_00008_00002' direct represents '1' with '962'
c Var 'x_00008_00002' order represents '2' with '963'
-962 963 0
c Var 'x_00008_00002' direct represents '2' with '964'
962 -963 964 0
-964 963 0
-964 -962 0
c Var 'x_00008_00002' order represents '3' with '965'
-963 965 0
c Var 'x_00008_00002' direct represents '3' with '966'
963 -965 966 0
-966 965 0
-966 -963 0
c Var 'x_00008_00002' order represents '4' with '967'
-965 967 0
c Var 'x_00008_00002' direct represents '4' with '968'
965 -967 968 0
-968 967 0
-968 -965 0
c Var 'x_00008_00002' order represents '5' with '969'
-967 969 0
c Var 'x_00008_00002' direct represents '5' with '970'
967 -969 970 0
-970 969 0
-970 -967 0
c Var 'x_00008_00002' order represents '6' with '971'
-969 971 0
c Var 'x_00008_00002' direct represents '6' with '972'
969 -971 972 0
-972 971 0
-972 -969 0
c Var 'x_00008_00002' order represents '7' with '973'
-971 973 0
c Var 'x_00008_00002' direct represents '7' with '974'
971 -973 974 0
-974 973 0
-974 -971 0
c Var 'x_00008_00002' order represents '8' with '975'
-973 975 0
c Var 'x_00008_00002' direct represents '8' with '976'
973 -975 976 0
-976 975 0
-976 -973 0
c Var 'x_00008_00002' direct represents '9' with '-975'
962 964 966 968 970 972 974 976 -975 0
c Encoding variable: x_00008_00003 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00008_00003' order represents '1' with '977'
c Var 'x_00008_00003' direct represents '1' with '977'
c Var 'x_00008_00003' order represents '2' with '978'
-977 978 0
c Var 'x_00008_00003' direct represents '2' with '979'
977 -978 979 0
-979 978 0
-979 -977 0
c Var 'x_00008_00003' order represents '3' with '980'
-978 980 0
c Var 'x_00008_00003' direct represents '3' with '981'
978 -980 981 0
-981 980 0
-981 -978 0
c Var 'x_00008_00003' order represents '4' with '982'
-980 982 0
c Var 'x_00008_00003' direct represents '4' with '983'
980 -982 983 0
-983 982 0
-983 -980 0
c Var 'x_00008_00003' order represents '5' with '984'
-982 984 0
c Var 'x_00008_00003' direct represents '5' with '985'
982 -984 985 0
-985 984 0
-985 -982 0
c Var 'x_00008_00003' order represents '6' with '986'
-984 986 0
c Var 'x_00008_00003' direct represents '6' with '987'
984 -986 987 0
-987 986 0
-987 -984 0
c Var 'x_00008_00003' order represents '7' with '988'
-986 988 0
c Var 'x_00008_00003' direct represents '7' with '989'
986 -988 989 0
-989 988 0
-989 -986 0
c Var 'x_00008_00003' order represents '8' with '990'
-988 990 0
c Var 'x_00008_00003' direct represents '8' with '991'
988 -990 991 0
-991 990 0
-991 -988 0
c Var 'x_00008_00003' direct represents '9' with '-990'
977 979 981 983 985 987 989 991 -990 0
c Encoding variable: x_00008_00004 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00008_00004' order represents '1' with '992'
c Var 'x_00008_00004' direct represents '1' with '992'
c Var 'x_00008_00004' order represents '2' with '993'
-992 993 0
c Var 'x_00008_00004' direct represents '2' with '994'
992 -993 994 0
-994 993 0
-994 -992 0
c Var 'x_00008_00004' order represents '3' with '995'
-993 995 0
c Var 'x_00008_00004' direct represents '3' with '996'
993 -995 996 0
-996 995 0
-996 -993 0
c Var 'x_00008_00004' order represents '4' with '997'
-995 997 0
c Var 'x_00008_00004' direct represents '4' with '998'
995 -997 998 0
-998 997 0
-998 -995 0
c Var 'x_00008_00004' order represents '5' with '999'
-997 999 0
c Var 'x_00008_00004' direct represents '5' with '1000'
997 -999 1000 0
-1000 999 0
-1000 -997 0
c Var 'x_00008_00004' order represents '6' with '1001'
-999 1001 0
c Var 'x_00008_00004' direct represents '6' with '1002'
999 -1001 1002 0
-1002 1001 0
-1002 -999 0
c Var 'x_00008_00004' order represents '7' with '1003'
-1001 1003 0
c Var 'x_00008_00004' direct represents '7' with '1004'
1001 -1003 1004 0
-1004 1003 0
-1004 -1001 0
c Var 'x_00008_00004' order represents '8' with '1005'
-1003 1005 0
c Var 'x_00008_00004' direct represents '8' with '1006'
1003 -1005 1006 0
-1006 1005 0
-1006 -1003 0
c Var 'x_00008_00004' direct represents '9' with '-1005'
992 994 996 998 1000 1002 1004 1006 -1005 0
c Encoding variable: x_00008_00005 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00008_00005' order represents '1' with '1007'
c Var 'x_00008_00005' direct represents '1' with '1007'
c Var 'x_00008_00005' order represents '2' with '1008'
-1007 1008 0
c Var 'x_00008_00005' direct represents '2' with '1009'
1007 -1008 1009 0
-1009 1008 0
-1009 -1007 0
c Var 'x_00008_00005' order represents '3' with '1010'
-1008 1010 0
c Var 'x_00008_00005' direct represents '3' with '1011'
1008 -1010 1011 0
-1011 1010 0
-1011 -1008 0
c Var 'x_00008_00005' order represents '4' with '1012'
-1010 1012 0
c Var 'x_00008_00005' direct represents '4' with '1013'
1010 -1012 1013 0
-1013 1012 0
-1013 -1010 0
c Var 'x_00008_00005' order represents '5' with '1014'
-1012 1014 0
c Var 'x_00008_00005' direct represents '5' with '1015'
1012 -1014 1015 0
-1015 1014 0
-1015 -1012 0
c Var 'x_00008_00005' order represents '6' with '1016'
-1014 1016 0
c Var 'x_00008_00005' direct represents '6' with '1017'
1014 -1016 1017 0
-1017 1016 0
-1017 -1014 0
c Var 'x_00008_00005' order represents '7' with '1018'
-1016 1018 0
c Var 'x_00008_00005' direct represents '7' with '1019'
1016 -1018 1019 0
-1019 1018 0
-1019 -1016 0
c Var 'x_00008_00005' order represents '8' with '1020'
-1018 1020 0
c Var 'x_00008_00005' direct represents '8' with '1021'
1018 -1020 1021 0
-1021 1020 0
-1021 -1018 0
c Var 'x_00008_00005' direct represents '9' with '-1020'
1007 1009 1011 1013 1015 1017 1019 1021 -1020 0
c Encoding variable: x_00008_00006 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00008_00006' order represents '1' with '1022'
c Var 'x_00008_00006' direct represents '1' with '1022'
c Var 'x_00008_00006' order represents '2' with '1023'
-1022 1023 0
c Var 'x_00008_00006' direct represents '2' with '1024'
1022 -1023 1024 0
-1024 1023 0
-1024 -1022 0
c Var 'x_00008_00006' order represents '3' with '1025'
-1023 1025 0
c Var 'x_00008_00006' direct represents '3' with '1026'
1023 -1025 1026 0
-1026 1025 0
-1026 -1023 0
c Var 'x_00008_00006' order represents '4' with '1027'
-1025 1027 0
c Var 'x_00008_00006' direct represents '4' with '1028'
1025 -1027 1028 0
-1028 1027 0
-1028 -1025 0
c Var 'x_00008_00006' order represents '5' with '1029'
-1027 1029 0
c Var 'x_00008_00006' direct represents '5' with '1030'
1027 -1029 1030 0
-1030 1029 0
-1030 -1027 0
c Var 'x_00008_00006' order represents '6' with '1031'
-1029 1031 0
c Var 'x_00008_00006' direct represents '6' with '1032'
1029 -1031 1032 0
-1032 1031 0
-1032 -1029 0
c Var 'x_00008_00006' order represents '7' with '1033'
-1031 1033 0
c Var 'x_00008_00006' direct represents '7' with '1034'
1031 -1033 1034 0
-1034 1033 0
-1034 -1031 0
c Var 'x_00008_00006' order represents '8' with '1035'
-1033 1035 0
c Var 'x_00008_00006' direct represents '8' with '1036'
1033 -1035 1036 0
-1036 1035 0
-1036 -1033 0
c Var 'x_00008_00006' direct represents '9' with '-1035'
1022 1024 1026 1028 1030 1032 1034 1036 -1035 0
c Encoding variable: x_00008_00007 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00008_00007' order represents '1' with '1037'
c Var 'x_00008_00007' direct represents '1' with '1037'
c Var 'x_00008_00007' order represents '2' with '1038'
-1037 1038 0
c Var 'x_00008_00007' direct represents '2' with '1039'
1037 -1038 1039 0
-1039 1038 0
-1039 -1037 0
c Var 'x_00008_00007' order represents '3' with '1040'
-1038 1040 0
c Var 'x_00008_00007' direct represents '3' with '1041'
1038 -1040 1041 0
-1041 1040 0
-1041 -1038 0
c Var 'x_00008_00007' order represents '4' with '1042'
-1040 1042 0
c Var 'x_00008_00007' direct represents '4' with '1043'
1040 -1042 1043 0
-1043 1042 0
-1043 -1040 0
c Var 'x_00008_00007' order represents '5' with '1044'
-1042 1044 0
c Var 'x_00008_00007' direct represents '5' with '1045'
1042 -1044 1045 0
-1045 1044 0
-1045 -1042 0
c Var 'x_00008_00007' order represents '6' with '1046'
-1044 1046 0
c Var 'x_00008_00007' direct represents '6' with '1047'
1044 -1046 1047 0
-1047 1046 0
-1047 -1044 0
c Var 'x_00008_00007' order represents '7' with '1048'
-1046 1048 0
c Var 'x_00008_00007' direct represents '7' with '1049'
1046 -1048 1049 0
-1049 1048 0
-1049 -1046 0
c Var 'x_00008_00007' order represents '8' with '1050'
-1048 1050 0
c Var 'x_00008_00007' direct represents '8' with '1051'
1048 -1050 1051 0
-1051 1050 0
-1051 -1048 0
c Var 'x_00008_00007' direct represents '9' with '-1050'
1037 1039 1041 1043 1045 1047 1049 1051 -1050 0
c Encoding variable: x_00008_00008 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00008_00008' order represents '1' with '1052'
c Var 'x_00008_00008' direct represents '1' with '1052'
c Var 'x_00008_00008' order represents '2' with '1053'
-1052 1053 0
c Var 'x_00008_00008' direct represents '2' with '1054'
1052 -1053 1054 0
-1054 1053 0
-1054 -1052 0
c Var 'x_00008_00008' order represents '3' with '1055'
-1053 1055 0
c Var 'x_00008_00008' direct represents '3' with '1056'
1053 -1055 1056 0
-1056 1055 0
-1056 -1053 0
c Var 'x_00008_00008' order represents '4' with '1057'
-1055 1057 0
c Var 'x_00008_00008' direct represents '4' with '1058'
1055 -1057 1058 0
-1058 1057 0
-1058 -1055 0
c Var 'x_00008_00008' order represents '5' with '1059'
-1057 1059 0
c Var 'x_00008_00008' direct represents '5' with '1060'
1057 -1059 1060 0
-1060 1059 0
-1060 -1057 0
c Var 'x_00008_00008' order represents '6' with '1061'
-1059 1061 0
c Var 'x_00008_00008' direct represents '6' with '1062'
1059 -1061 1062 0
-1062 1061 0
-1062 -1059 0
c Var 'x_00008_00008' order represents '7' with '1063'
-1061 1063 0
c Var 'x_00008_00008' direct represents '7' with '1064'
1061 -1063 1064 0
-1064 1063 0
-1064 -1061 0
c Var 'x_00008_00008' order represents '8' with '1065'
-1063 1065 0
c Var 'x_00008_00008' direct represents '8' with '1066'
1063 -1065 1066 0
-1066 1065 0
-1066 -1063 0
c Var 'x_00008_00008' direct represents '9' with '-1065'
1052 1054 1056 1058 1060 1062 1064 1066 -1065 0
c Encoding variable: x_00008_00009 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00008_00009' order represents '1' with '1067'
c Var 'x_00008_00009' direct represents '1' with '1067'
c Var 'x_00008_00009' order represents '2' with '1068'
-1067 1068 0
c Var 'x_00008_00009' direct represents '2' with '1069'
1067 -1068 1069 0
-1069 1068 0
-1069 -1067 0
c Var 'x_00008_00009' order represents '3' with '1070'
-1068 1070 0
c Var 'x_00008_00009' direct represents '3' with '1071'
1068 -1070 1071 0
-1071 1070 0
-1071 -1068 0
c Var 'x_00008_00009' order represents '4' with '1072'
-1070 1072 0
c Var 'x_00008_00009' direct represents '4' with '1073'
1070 -1072 1073 0
-1073 1072 0
-1073 -1070 0
c Var 'x_00008_00009' order represents '5' with '1074'
-1072 1074 0
c Var 'x_00008_00009' direct represents '5' with '1075'
1072 -1074 1075 0
-1075 1074 0
-1075 -1072 0
c Var 'x_00008_00009' order represents '6' with '1076'
-1074 1076 0
c Var 'x_00008_00009' direct represents '6' with '1077'
1074 -1076 1077 0
-1077 1076 0
-1077 -1074 0
c Var 'x_00008_00009' order represents '7' with '1078'
-1076 1078 0
c Var 'x_00008_00009' direct represents '7' with '1079'
1076 -1078 1079 0
-1079 1078 0
-1079 -1076 0
c Var 'x_00008_00009' order represents '8' with '1080'
-1078 1080 0
c Var 'x_00008_00009' direct represents '8' with '1081'
1078 -1080 1081 0
-1081 1080 0
-1081 -1078 0
c Var 'x_00008_00009' direct represents '9' with '-1080'
1067 1069 1071 1073 1075 1077 1079 1081 -1080 0
c Encoding variable: x_00009_00001 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00009_00001' order represents '1' with '1082'
c Var 'x_00009_00001' direct represents '1' with '1082'
c Var 'x_00009_00001' order represents '2' with '1083'
-1082 1083 0
c Var 'x_00009_00001' direct represents '2' with '1084'
1082 -1083 1084 0
-1084 1083 0
-1084 -1082 0
c Var 'x_00009_00001' order represents '3' with '1085'
-1083 1085 0
c Var 'x_00009_00001' direct represents '3' with '1086'
1083 -1085 1086 0
-1086 1085 0
-1086 -1083 0
c Var 'x_00009_00001' order represents '4' with '1087'
-1085 1087 0
c Var 'x_00009_00001' direct represents '4' with '1088'
1085 -1087 1088 0
-1088 1087 0
-1088 -1085 0
c Var 'x_00009_00001' order represents '5' with '1089'
-1087 1089 0
c Var 'x_00009_00001' direct represents '5' with '1090'
1087 -1089 1090 0
-1090 1089 0
-1090 -1087 0
c Var 'x_00009_00001' order represents '6' with '1091'
-1089 1091 0
c Var 'x_00009_00001' direct represents '6' with '1092'
1089 -1091 1092 0
-1092 1091 0
-1092 -1089 0
c Var 'x_00009_00001' order represents '7' with '1093'
-1091 1093 0
c Var 'x_00009_00001' direct represents '7' with '1094'
1091 -1093 1094 0
-1094 1093 0
-1094 -1091 0
c Var 'x_00009_00001' order represents '8' with '1095'
-1093 1095 0
c Var 'x_00009_00001' direct represents '8' with '1096'
1093 -1095 1096 0
-1096 1095 0
-1096 -1093 0
c Var 'x_00009_00001' direct represents '9' with '-1095'
1082 1084 1086 1088 1090 1092 1094 1096 -1095 0
c Encoding variable: x_00009_00002 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00009_00002' order represents '1' with '1097'
c Var 'x_00009_00002' direct represents '1' with '1097'
c Var 'x_00009_00002' order represents '2' with '1098'
-1097 1098 0
c Var 'x_00009_00002' direct represents '2' with '1099'
1097 -1098 1099 0
-1099 1098 0
-1099 -1097 0
c Var 'x_00009_00002' order represents '3' with '1100'
-1098 1100 0
c Var 'x_00009_00002' direct represents '3' with '1101'
1098 -1100 1101 0
-1101 1100 0
-1101 -1098 0
c Var 'x_00009_00002' order represents '4' with '1102'
-1100 1102 0
c Var 'x_00009_00002' direct represents '4' with '1103'
1100 -1102 1103 0
-1103 1102 0
-1103 -1100 0
c Var 'x_00009_00002' order represents '5' with '1104'
-1102 1104 0
c Var 'x_00009_00002' direct represents '5' with '1105'
1102 -1104 1105 0
-1105 1104 0
-1105 -1102 0
c Var 'x_00009_00002' order represents '6' with '1106'
-1104 1106 0
c Var 'x_00009_00002' direct represents '6' with '1107'
1104 -1106 1107 0
-1107 1106 0
-1107 -1104 0
c Var 'x_00009_00002' order represents '7' with '1108'
-1106 1108 0
c Var 'x_00009_00002' direct represents '7' with '1109'
1106 -1108 1109 0
-1109 1108 0
-1109 -1106 0
c Var 'x_00009_00002' order represents '8' with '1110'
-1108 1110 0
c Var 'x_00009_00002' direct represents '8' with '1111'
1108 -1110 1111 0
-1111 1110 0
-1111 -1108 0
c Var 'x_00009_00002' direct represents '9' with '-1110'
1097 1099 1101 1103 1105 1107 1109 1111 -1110 0
c Encoding variable: x_00009_00003 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00009_00003' order represents '1' with '1112'
c Var 'x_00009_00003' direct represents '1' with '1112'
c Var 'x_00009_00003' order represents '2' with '1113'
-1112 1113 0
c Var 'x_00009_00003' direct represents '2' with '1114'
1112 -1113 1114 0
-1114 1113 0
-1114 -1112 0
c Var 'x_00009_00003' order represents '3' with '1115'
-1113 1115 0
c Var 'x_00009_00003' direct represents '3' with '1116'
1113 -1115 1116 0
-1116 1115 0
-1116 -1113 0
c Var 'x_00009_00003' order represents '4' with '1117'
-1115 1117 0
c Var 'x_00009_00003' direct represents '4' with '1118'
1115 -1117 1118 0
-1118 1117 0
-1118 -1115 0
c Var 'x_00009_00003' order represents '5' with '1119'
-1117 1119 0
c Var 'x_00009_00003' direct represents '5' with '1120'
1117 -1119 1120 0
-1120 1119 0
-1120 -1117 0
c Var 'x_00009_00003' order represents '6' with '1121'
-1119 1121 0
c Var 'x_00009_00003' direct represents '6' with '1122'
1119 -1121 1122 0
-1122 1121 0
-1122 -1119 0
c Var 'x_00009_00003' order represents '7' with '1123'
-1121 1123 0
c Var 'x_00009_00003' direct represents '7' with '1124'
1121 -1123 1124 0
-1124 1123 0
-1124 -1121 0
c Var 'x_00009_00003' order represents '8' with '1125'
-1123 1125 0
c Var 'x_00009_00003' direct represents '8' with '1126'
1123 -1125 1126 0
-1126 1125 0
-1126 -1123 0
c Var 'x_00009_00003' direct represents '9' with '-1125'
1112 1114 1116 1118 1120 1122 1124 1126 -1125 0
c Encoding variable: x_00009_00004 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00009_00004' order represents '1' with '1127'
c Var 'x_00009_00004' direct represents '1' with '1127'
c Var 'x_00009_00004' order represents '2' with '1128'
-1127 1128 0
c Var 'x_00009_00004' direct represents '2' with '1129'
1127 -1128 1129 0
-1129 1128 0
-1129 -1127 0
c Var 'x_00009_00004' order represents '3' with '1130'
-1128 1130 0
c Var 'x_00009_00004' direct represents '3' with '1131'
1128 -1130 1131 0
-1131 1130 0
-1131 -1128 0
c Var 'x_00009_00004' order represents '4' with '1132'
-1130 1132 0
c Var 'x_00009_00004' direct represents '4' with '1133'
1130 -1132 1133 0
-1133 1132 0
-1133 -1130 0
c Var 'x_00009_00004' order represents '5' with '1134'
-1132 1134 0
c Var 'x_00009_00004' direct represents '5' with '1135'
1132 -1134 1135 0
-1135 1134 0
-1135 -1132 0
c Var 'x_00009_00004' order represents '6' with '1136'
-1134 1136 0
c Var 'x_00009_00004' direct represents '6' with '1137'
1134 -1136 1137 0
-1137 1136 0
-1137 -1134 0
c Var 'x_00009_00004' order represents '7' with '1138'
-1136 1138 0
c Var 'x_00009_00004' direct represents '7' with '1139'
1136 -1138 1139 0
-1139 1138 0
-1139 -1136 0
c Var 'x_00009_00004' order represents '8' with '1140'
-1138 1140 0
c Var 'x_00009_00004' direct represents '8' with '1141'
1138 -1140 1141 0
-1141 1140 0
-1141 -1138 0
c Var 'x_00009_00004' direct represents '9' with '-1140'
1127 1129 1131 1133 1135 1137 1139 1141 -1140 0
c Encoding variable: x_00009_00005 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00009_00005' order represents '1' with '1142'
c Var 'x_00009_00005' direct represents '1' with '1142'
c Var 'x_00009_00005' order represents '2' with '1143'
-1142 1143 0
c Var 'x_00009_00005' direct represents '2' with '1144'
1142 -1143 1144 0
-1144 1143 0
-1144 -1142 0
c Var 'x_00009_00005' order represents '3' with '1145'
-1143 1145 0
c Var 'x_00009_00005' direct represents '3' with '1146'
1143 -1145 1146 0
-1146 1145 0
-1146 -1143 0
c Var 'x_00009_00005' order represents '4' with '1147'
-1145 1147 0
c Var 'x_00009_00005' direct represents '4' with '1148'
1145 -1147 1148 0
-1148 1147 0
-1148 -1145 0
c Var 'x_00009_00005' order represents '5' with '1149'
-1147 1149 0
c Var 'x_00009_00005' direct represents '5' with '1150'
1147 -1149 1150 0
-1150 1149 0
-1150 -1147 0
c Var 'x_00009_00005' order represents '6' with '1151'
-1149 1151 0
c Var 'x_00009_00005' direct represents '6' with '1152'
1149 -1151 1152 0
-1152 1151 0
-1152 -1149 0
c Var 'x_00009_00005' order represents '7' with '1153'
-1151 1153 0
c Var 'x_00009_00005' direct represents '7' with '1154'
1151 -1153 1154 0
-1154 1153 0
-1154 -1151 0
c Var 'x_00009_00005' order represents '8' with '1155'
-1153 1155 0
c Var 'x_00009_00005' direct represents '8' with '1156'
1153 -1155 1156 0
-1156 1155 0
-1156 -1153 0
c Var 'x_00009_00005' direct represents '9' with '-1155'
1142 1144 1146 1148 1150 1152 1154 1156 -1155 0
c Encoding variable: x_00009_00006 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00009_00006' order represents '1' with '1157'
c Var 'x_00009_00006' direct represents '1' with '1157'
c Var 'x_00009_00006' order represents '2' with '1158'
-1157 1158 0
c Var 'x_00009_00006' direct represents '2' with '1159'
1157 -1158 1159 0
-1159 1158 0
-1159 -1157 0
c Var 'x_00009_00006' order represents '3' with '1160'
-1158 1160 0
c Var 'x_00009_00006' direct represents '3' with '1161'
1158 -1160 1161 0
-1161 1160 0
-1161 -1158 0
c Var 'x_00009_00006' order represents '4' with '1162'
-1160 1162 0
c Var 'x_00009_00006' direct represents '4' with '1163'
1160 -1162 1163 0
-1163 1162 0
-1163 -1160 0
c Var 'x_00009_00006' order represents '5' with '1164'
-1162 1164 0
c Var 'x_00009_00006' direct represents '5' with '1165'
1162 -1164 1165 0
-1165 1164 0
-1165 -1162 0
c Var 'x_00009_00006' order represents '6' with '1166'
-1164 1166 0
c Var 'x_00009_00006' direct represents '6' with '1167'
1164 -1166 1167 0
-1167 1166 0
-1167 -1164 0
c Var 'x_00009_00006' order represents '7' with '1168'
-1166 1168 0
c Var 'x_00009_00006' direct represents '7' with '1169'
1166 -1168 1169 0
-1169 1168 0
-1169 -1166 0
c Var 'x_00009_00006' order represents '8' with '1170'
-1168 1170 0
c Var 'x_00009_00006' direct represents '8' with '1171'
1168 -1170 1171 0
-1171 1170 0
-1171 -1168 0
c Var 'x_00009_00006' direct represents '9' with '-1170'
1157 1159 1161 1163 1165 1167 1169 1171 -1170 0
c Encoding variable: x_00009_00007 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00009_00007' order represents '1' with '1172'
c Var 'x_00009_00007' direct represents '1' with '1172'
c Var 'x_00009_00007' order represents '2' with '1173'
-1172 1173 0
c Var 'x_00009_00007' direct represents '2' with '1174'
1172 -1173 1174 0
-1174 1173 0
-1174 -1172 0
c Var 'x_00009_00007' order represents '3' with '1175'
-1173 1175 0
c Var 'x_00009_00007' direct represents '3' with '1176'
1173 -1175 1176 0
-1176 1175 0
-1176 -1173 0
c Var 'x_00009_00007' order represents '4' with '1177'
-1175 1177 0
c Var 'x_00009_00007' direct represents '4' with '1178'
1175 -1177 1178 0
-1178 1177 0
-1178 -1175 0
c Var 'x_00009_00007' order represents '5' with '1179'
-1177 1179 0
c Var 'x_00009_00007' direct represents '5' with '1180'
1177 -1179 1180 0
-1180 1179 0
-1180 -1177 0
c Var 'x_00009_00007' order represents '6' with '1181'
-1179 1181 0
c Var 'x_00009_00007' direct represents '6' with '1182'
1179 -1181 1182 0
-1182 1181 0
-1182 -1179 0
c Var 'x_00009_00007' order represents '7' with '1183'
-1181 1183 0
c Var 'x_00009_00007' direct represents '7' with '1184'
1181 -1183 1184 0
-1184 1183 0
-1184 -1181 0
c Var 'x_00009_00007' order represents '8' with '1185'
-1183 1185 0
c Var 'x_00009_00007' direct represents '8' with '1186'
1183 -1185 1186 0
-1186 1185 0
-1186 -1183 0
c Var 'x_00009_00007' direct represents '9' with '-1185'
1172 1174 1176 1178 1180 1182 1184 1186 -1185 0
c Encoding variable: x_00009_00008 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00009_00008' order represents '1' with '1187'
c Var 'x_00009_00008' direct represents '1' with '1187'
c Var 'x_00009_00008' order represents '2' with '1188'
-1187 1188 0
c Var 'x_00009_00008' direct represents '2' with '1189'
1187 -1188 1189 0
-1189 1188 0
-1189 -1187 0
c Var 'x_00009_00008' order represents '3' with '1190'
-1188 1190 0
c Var 'x_00009_00008' direct represents '3' with '1191'
1188 -1190 1191 0
-1191 1190 0
-1191 -1188 0
c Var 'x_00009_00008' order represents '4' with '1192'
-1190 1192 0
c Var 'x_00009_00008' direct represents '4' with '1193'
1190 -1192 1193 0
-1193 1192 0
-1193 -1190 0
c Var 'x_00009_00008' order represents '5' with '1194'
-1192 1194 0
c Var 'x_00009_00008' direct represents '5' with '1195'
1192 -1194 1195 0
-1195 1194 0
-1195 -1192 0
c Var 'x_00009_00008' order represents '6' with '1196'
-1194 1196 0
c Var 'x_00009_00008' direct represents '6' with '1197'
1194 -1196 1197 0
-1197 1196 0
-1197 -1194 0
c Var 'x_00009_00008' order represents '7' with '1198'
-1196 1198 0
c Var 'x_00009_00008' direct represents '7' with '1199'
1196 -1198 1199 0
-1199 1198 0
-1199 -1196 0
c Var 'x_00009_00008' order represents '8' with '1200'
-1198 1200 0
c Var 'x_00009_00008' direct represents '8' with '1201'
1198 -1200 1201 0
-1201 1200 0
-1201 -1198 0
c Var 'x_00009_00008' direct represents '9' with '-1200'
1187 1189 1191 1193 1195 1197 1199 1201 -1200 0
c Encoding variable: x_00009_00009 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00009_00009' order represents '1' with '1202'
c Var 'x_00009_00009' direct represents '1' with '1202'
c Var 'x_00009_00009' order represents '2' with '1203'
-1202 1203 0
c Var 'x_00009_00009' direct represents '2' with '1204'
1202 -1203 1204 0
-1204 1203 0
-1204 -1202 0
c Var 'x_00009_00009' order represents '3' with '1205'
-1203 1205 0
c Var 'x_00009_00009' direct represents '3' with '1206'
1203 -1205 1206 0
-1206 1205 0
-1206 -1203 0
c Var 'x_00009_00009' order represents '4' with '1207'
-1205 1207 0
c Var 'x_00009_00009' direct represents '4' with '1208'
1205 -1207 1208 0
-1208 1207 0
-1208 -1205 0
c Var 'x_00009_00009' order represents '5' with '1209'
-1207 1209 0
c Var 'x_00009_00009' direct represents '5' with '1210'
1207 -1209 1210 0
-1210 1209 0
-1210 -1207 0
c Var 'x_00009_00009' order represents '6' with '1211'
-1209 1211 0
c Var 'x_00009_00009' direct represents '6' with '1212'
1209 -1211 1212 0
-1212 1211 0
-1212 -1209 0
c Var 'x_00009_00009' order represents '7' with '1213'
-1211 1213 0
c Var 'x_00009_00009' direct represents '7' with '1214'
1211 -1213 1214 0
-1214 1213 0
-1214 -1211 0
c Var 'x_00009_00009' order represents '8' with '1215'
-1213 1215 0
c Var 'x_00009_00009' direct represents '8' with '1216'
1213 -1215 1216 0
-1216 1215 0
-1216 -1213 0
c Var 'x_00009_00009' direct represents '9' with '-1215'
1202 1204 1206 1208 1210 1212 1214 1216 -1215 0
c Encoding variable: alldiff_row_00001 with domain: bool (representing constraint )
c Var 'alldiff_row_00001' direct represents '0' with '-1217'
c Var 'alldiff_row_00001' direct represents '1' with '1217'
c Var 'alldiff_row_00001' order represents '1' with '1'
c Var 'alldiff_row_00001' order represents '0' with '-1217'
c Encoding variable: alldiff_row_00002 with domain: bool (representing constraint )
c Var 'alldiff_row_00002' direct represents '0' with '-1218'
c Var 'alldiff_row_00002' direct represents '1' with '1218'
c Var 'alldiff_row_00002' order represents '1' with '1'
c Var 'alldiff_row_00002' order represents '0' with '-1218'
c Encoding variable: alldiff_row_00003 with domain: bool (representing constraint )
c Var 'alldiff_row_00003' direct represents '0' with '-1219'
c Var 'alldiff_row_00003' direct represents '1' with '1219'
c Var 'alldiff_row_00003' order represents '1' with '1'
c Var 'alldiff_row_00003' order represents '0' with '-1219'
c Encoding variable: alldiff_row_00004 with domain: bool (representing constraint )
c Var 'alldiff_row_00004' direct represents '0' with '-1220'
c Var 'alldiff_row_00004' direct represents '1' with '1220'
c Var 'alldiff_row_00004' order represents '1' with '1'
c Var 'alldiff_row_00004' order represents '0' with '-1220'
c Encoding variable: alldiff_row_00005 with domain: bool (representing constraint )
c Var 'alldiff_row_00005' direct represents '0' with '-1221'
c Var 'alldiff_row_00005' direct represents '1' with '1221'
c Var 'alldiff_row_00005' order represents '1' with '1'
c Var 'alldiff_row_00005' order represents '0' with '-1221'
c Encoding variable: alldiff_row_00006 with domain: bool (representing constraint )
c Var 'alldiff_row_00006' direct represents '0' with '-1222'
c Var 'alldiff_row_00006' direct represents '1' with '1222'
c Var 'alldiff_row_00006' order represents '1' with '1'
c Var 'alldiff_row_00006' order represents '0' with '-1222'
c Encoding variable: alldiff_row_00007 with domain: bool (representing constraint )
c Var 'alldiff_row_00007' direct represents '0' with '-1223'
c Var 'alldiff_row_00007' direct represents '1' with '1223'
c Var 'alldiff_row_00007' order represents '1' with '1'
c Var 'alldiff_row_00007' order represents '0' with '-1223'
c Encoding variable: alldiff_row_00008 with domain: bool (representing constraint )
c Var 'alldiff_row_00008' direct represents '0' with '-1224'
c Var 'alldiff_row_00008' direct represents '1' with '1224'
c Var 'alldiff_row_00008' order represents '1' with '1'
c Var 'alldiff_row_00008' order represents '0' with '-1224'
c Encoding variable: alldiff_row_00009 with domain: bool (representing constraint )
c Var 'alldiff_row_00009' direct represents '0' with '-1225'
c Var 'alldiff_row_00009' direct represents '1' with '1225'
c Var 'alldiff_row_00009' order represents '1' with '1'
c Var 'alldiff_row_00009' order represents '0' with '-1225'
c Encoding variable: alldiff_col_00001 with domain: bool (representing constraint )
c Var 'alldiff_col_00001' direct represents '0' with '-1226'
c Var 'alldiff_col_00001' direct represents '1' with '1226'
c Var 'alldiff_col_00001' order represents '1' with '1'
c Var 'alldiff_col_00001' order represents '0' with '-1226'
c Encoding variable: alldiff_col_00002 with domain: bool (representing constraint )
c Var 'alldiff_col_00002' direct represents '0' with '-1227'
c Var 'alldiff_col_00002' direct represents '1' with '1227'
c Var 'alldiff_col_00002' order represents '1' with '1'
c Var 'alldiff_col_00002' order represents '0' with '-1227'
c Encoding variable: alldiff_col_00003 with domain: bool (representing constraint )
c Var 'alldiff_col_00003' direct represents '0' with '-1228'
c Var 'alldiff_col_00003' direct represents '1' with '1228'
c Var 'alldiff_col_00003' order represents '1' with '1'
c Var 'alldiff_col_00003' order represents '0' with '-1228'
c Encoding variable: alldiff_col_00004 with domain: bool (representing constraint )
c Var 'alldiff_col_00004' direct represents '0' with '-1229'
c Var 'alldiff_col_00004' direct represents '1' with '1229'
c Var 'alldiff_col_00004' order represents '1' with '1'
c Var 'alldiff_col_00004' order represents '0' with '-1229'
c Encoding variable: alldiff_col_00005 with domain: bool (representing constraint )
c Var 'alldiff_col_00005' direct represents '0' with '-1230'
c Var 'alldiff_col_00005' direct represents '1' with '1230'
c Var 'alldiff_col_00005' order represents '1' with '1'
c Var 'alldiff_col_00005' order represents '0' with '-1230'
c Encoding variable: alldiff_col_00006 with domain: bool (representing constraint )
c Var 'alldiff_col_00006' direct represents '0' with '-1231'
c Var 'alldiff_col_00006' direct represents '1' with '1231'
c Var 'alldiff_col_00006' order represents '1' with '1'
c Var 'alldiff_col_00006' order represents '0' with '-1231'
c Encoding variable: alldiff_col_00007 with domain: bool (representing constraint )
c Var 'alldiff_col_00007' direct represents '0' with '-1232'
c Var 'alldiff_col_00007' direct represents '1' with '1232'
c Var 'alldiff_col_00007' order represents '1' with '1'
c Var 'alldiff_col_00007' order represents '0' with '-1232'
c Encoding variable: alldiff_col_00008 with domain: bool (representing constraint )
c Var 'alldiff_col_00008' direct represents '0' with '-1233'
c Var 'alldiff_col_00008' direct represents '1' with '1233'
c Var 'alldiff_col_00008' order represents '1' with '1'
c Var 'alldiff_col_00008' order represents '0' with '-1233'
c Encoding variable: alldiff_col_00009 with domain: bool (representing constraint )
c Var 'alldiff_col_00009' direct represents '0' with '-1234'
c Var 'alldiff_col_00009' direct represents '1' with '1234'
c Var 'alldiff_col_00009' order represents '1' with '1'
c Var 'alldiff_col_00009' order represents '0' with '-1234'
c Encoding variable: alldiff_box_00001 with domain: bool (representing constraint )
c Var 'alldiff_box_00001' direct represents '0' with '-1235'
c Var 'alldiff_box_00001' direct represents '1' with '1235'
c Var 'alldiff_box_00001' order represents '1' with '1'
c Var 'alldiff_box_00001' order represents '0' with '-1235'
c Encoding variable: alldiff_box_00002 with domain: bool (representing constraint )
c Var 'alldiff_box_00002' direct represents '0' with '-1236'
c Var 'alldiff_box_00002' direct represents '1' with '1236'
c Var 'alldiff_box_00002' order represents '1' with '1'
c Var 'alldiff_box_00002' order represents '0' with '-1236'
c Encoding variable: alldiff_box_00003 with domain: bool (representing constraint )
c Var 'alldiff_box_00003' direct represents '0' with '-1237'
c Var 'alldiff_box_00003' direct represents '1' with '1237'
c Var 'alldiff_box_00003' order represents '1' with '1'
c Var 'alldiff_box_00003' order represents '0' with '-1237'
c Encoding variable: alldiff_box_00004 with domain: bool (representing constraint )
c Var 'alldiff_box_00004' direct represents '0' with '-1238'
c Var 'alldiff_box_00004' direct represents '1' with '1238'
c Var 'alldiff_box_00004' order represents '1' with '1'
c Var 'alldiff_box_00004' order represents '0' with '-1238'
c Encoding variable: alldiff_box_00005 with domain: bool (representing constraint )
c Var 'alldiff_box_00005' direct represents '0' with '-1239'
c Var 'alldiff_box_00005' direct represents '1' with '1239'
c Var 'alldiff_box_00005' order represents '1' with '1'
c Var 'alldiff_box_00005' order represents '0' with '-1239'
c Encoding variable: alldiff_box_00006 with domain: bool (representing constraint )
c Var 'alldiff_box_00006' direct represents '0' with '-1240'
c Var 'alldiff_box_00006' direct represents '1' with '1240'
c Var 'alldiff_box_00006' order represents '1' with '1'
c Var 'alldiff_box_00006' order represents '0' with '-1240'
c Encoding variable: alldiff_box_00007 with domain: bool (representing constraint )
c Var 'alldiff_box_00007' direct represents '0' with '-1241'
c Var 'alldiff_box_00007' direct represents '1' with '1241'
c Var 'alldiff_box_00007' order represents '1' with '1'
c Var 'alldiff_box_00007' order represents '0' with '-1241'
c Encoding variable: alldiff_box_00008 with domain: bool (representing constraint )
c Var 'alldiff_box_00008' direct represents '0' with '-1242'
c Var 'alldiff_box_00008' direct represents '1' with '1242'
c Var 'alldiff_box_00008' order represents '1' with '1'
c Var 'alldiff_box_00008' order represents '0' with '-1242'
c Encoding variable: alldiff_box_00009 with domain: bool (representing constraint )
c Var 'alldiff_box_00009' direct represents '0' with '-1243'
c Var 'alldiff_box_00009' direct represents '1' with '1243'
c Var 'alldiff_box_00009' order represents '1' with '1'
c Var 'alldiff_box_00009' order represents '0' with '-1243'
c Encoding variable: alldiff_hint_00001 with domain: bool (representing constraint )
c Var 'alldiff_hint_00001' direct represents '0' with '-1244'
c Var 'alldiff_hint_00001' direct represents '1' with '1244'
c Var 'alldiff_hint_00001' order represents '1' with '1'
c Var 'alldiff_hint_00001' order represents '0' with '-1244'
c Encoding variable: alldiff_hint_00002 with domain: bool (representing constraint )
c Var 'alldiff_hint_00002' direct represents '0' with '-1245'
c Var 'alldiff_hint_00002' direct represents '1' with '1245'
c Var 'alldiff_hint_00002' order represents '1' with '1'
c Var 'alldiff_hint_00002' order represents '0' with '-1245'
c Encoding variable: alldiff_hint_00003 with domain: bool (representing constraint )
c Var 'alldiff_hint_00003' direct represents '0' with '-1246'
c Var 'alldiff_hint_00003' direct represents '1' with '1246'
c Var 'alldiff_hint_00003' order represents '1' with '1'
c Var 'alldiff_hint_00003' order represents '0' with '-1246'
c Encoding variable: alldiff_hint_00004 with domain: bool (representing constraint )
c Var 'alldiff_hint_00004' direct represents '0' with '-1247'
c Var 'alldiff_hint_00004' direct represents '1' with '1247'
c Var 'alldiff_hint_00004' order represents '1' with '1'
c Var 'alldiff_hint_00004' order represents '0' with '-1247'
c Encoding variable: alldiff_hint_00005 with domain: bool (representing constraint )
c Var 'alldiff_hint_00005' direct represents '0' with '-1248'
c Var 'alldiff_hint_00005' direct represents '1' with '1248'
c Var 'alldiff_hint_00005' order represents '1' with '1'
c Var 'alldiff_hint_00005' order represents '0' with '-1248'
c Encoding variable: alldiff_hint_00006 with domain: bool (representing constraint )
c Var 'alldiff_hint_00006' direct represents '0' with '-1249'
c Var 'alldiff_hint_00006' direct represents '1' with '1249'
c Var 'alldiff_hint_00006' order represents '1' with '1'
c Var 'alldiff_hint_00006' order represents '0' with '-1249'
c Encoding variable: alldiff_hint_00007 with domain: bool (representing constraint )
c Var 'alldiff_hint_00007' direct represents '0' with '-1250'
c Var 'alldiff_hint_00007' direct represents '1' with '1250'
c Var 'alldiff_hint_00007' order represents '1' with '1'
c Var 'alldiff_hint_00007' order represents '0' with '-1250'
c Encoding variable: alldiff_hint_00008 with domain: bool (representing constraint )
c Var 'alldiff_hint_00008' direct represents '0' with '-1251'
c Var 'alldiff_hint_00008' direct represents '1' with '1251'
c Var 'alldiff_hint_00008' order represents '1' with '1'
c Var 'alldiff_hint_00008' order represents '0' with '-1251'
c Encoding variable: alldiff_hint_00009 with domain: bool (representing constraint )
c Var 'alldiff_hint_00009' direct represents '0' with '-1252'
c Var 'alldiff_hint_00009' direct represents '1' with '1252'
c Var 'alldiff_hint_00009' order represents '1' with '1'
c Var 'alldiff_hint_00009' order represents '0' with '-1252'
c Encoding variable: alldiff_hint_00010 with domain: bool (representing constraint )
c Var 'alldiff_hint_00010' direct represents '0' with '-1253'
c Var 'alldiff_hint_00010' direct represents '1' with '1253'
c Var 'alldiff_hint_00010' order represents '1' with '1'
c Var 'alldiff_hint_00010' order represents '0' with '-1253'
c Encoding variable: alldiff_hint_00011 with domain: bool (representing constraint )
c Var 'alldiff_hint_00011' direct represents '0' with '-1254'
c Var 'alldiff_hint_00011' direct represents '1' with '1254'
c Var 'alldiff_hint_00011' order represents '1' with '1'
c Var 'alldiff_hint_00011' order represents '0' with '-1254'
c Encoding variable: alldiff_hint_00012 with domain: bool (representing constraint )
c Var 'alldiff_hint_00012' direct represents '0' with '-1255'
c Var 'alldiff_hint_00012' direct represents '1' with '1255'
c Var 'alldiff_hint_00012' order represents '1' with '1'
c Var 'alldiff_hint_00012' order represents '0' with '-1255'
c Encoding variable: alldiff_hint_00013 with domain: bool (representing constraint )
c Var 'alldiff_hint_00013' direct represents '0' with '-1256'
c Var 'alldiff_hint_00013' direct represents '1' with '1256'
c Var 'alldiff_hint_00013' order represents '1' with '1'
c Var 'alldiff_hint_00013' order represents '0' with '-1256'
c Encoding variable: alldiff_hint_00014 with domain: bool (representing constraint )
c Var 'alldiff_hint_00014' direct represents '0' with '-1257'
c Var 'alldiff_hint_00014' direct represents '1' with '1257'
c Var 'alldiff_hint_00014' order represents '1' with '1'
c Var 'alldiff_hint_00014' order represents '0' with '-1257'
c Encoding variable: alldiff_hint_00015 with domain: bool (representing constraint )
c Var 'alldiff_hint_00015' direct represents '0' with '-1258'
c Var 'alldiff_hint_00015' direct represents '1' with '1258'
c Var 'alldiff_hint_00015' order represents '1' with '1'
c Var 'alldiff_hint_00015' order represents '0' with '-1258'
c Encoding variable: alldiff_hint_00016 with domain: bool (representing constraint )
c Var 'alldiff_hint_00016' direct represents '0' with '-1259'
c Var 'alldiff_hint_00016' direct represents '1' with '1259'
c Var 'alldiff_hint_00016' order represents '1' with '1'
c Var 'alldiff_hint_00016' order represents '0' with '-1259'
c Encoding variable: alldiff_hint_00017 with domain: bool (representing constraint )
c Var 'alldiff_hint_00017' direct represents '0' with '-1260'
c Var 'alldiff_hint_00017' direct represents '1' with '1260'
c Var 'alldiff_hint_00017' order represents '1' with '1'
c Var 'alldiff_hint_00017' order represents '0' with '-1260'
c Encoding variable: alldiff_hint_00018 with domain: bool (representing constraint )
c Var 'alldiff_hint_00018' direct represents '0' with '-1261'
c Var 'alldiff_hint_00018' direct represents '1' with '1261'
c Var 'alldiff_hint_00018' order represents '1' with '1'
c Var 'alldiff_hint_00018' order represents '0' with '-1261'
c Encoding variable: alldiff_hint_00019 with domain: bool (representing constraint )
c Var 'alldiff_hint_00019' direct represents '0' with '-1262'
c Var 'alldiff_hint_00019' direct represents '1' with '1262'
c Var 'alldiff_hint_00019' order represents '1' with '1'
c Var 'alldiff_hint_00019' order represents '0' with '-1262'
c Encoding variable: alldiff_hint_00020 with domain: bool (representing constraint )
c Var 'alldiff_hint_00020' direct represents '0' with '-1263'
c Var 'alldiff_hint_00020' direct represents '1' with '1263'
c Var 'alldiff_hint_00020' order represents '1' with '1'
c Var 'alldiff_hint_00020' order represents '0' with '-1263'
c Encoding variable: alldiff_hint_00021 with domain: bool (representing constraint )
c Var 'alldiff_hint_00021' direct represents '0' with '-1264'
c Var 'alldiff_hint_00021' direct represents '1' with '1264'
c Var 'alldiff_hint_00021' order represents '1' with '1'
c Var 'alldiff_hint_00021' order represents '0' with '-1264'
c Encoding variable: alldiff_hint_00022 with domain: bool (representing constraint )
c Var 'alldiff_hint_00022' direct represents '0' with '-1265'
c Var 'alldiff_hint_00022' direct represents '1' with '1265'
c Var 'alldiff_hint_00022' order represents '1' with '1'
c Var 'alldiff_hint_00022' order represents '0' with '-1265'
c Encoding variable: alldiff_hint_00023 with domain: bool (representing constraint )
c Var 'alldiff_hint_00023' direct represents '0' with '-1266'
c Var 'alldiff_hint_00023' direct represents '1' with '1266'
c Var 'alldiff_hint_00023' order represents '1' with '1'
c Var 'alldiff_hint_00023' order represents '0' with '-1266'
c Encoding variable: alldiff_hint_00024 with domain: bool (representing constraint )
c Var 'alldiff_hint_00024' direct represents '0' with '-1267'
c Var 'alldiff_hint_00024' direct represents '1' with '1267'
c Var 'alldiff_hint_00024' order represents '1' with '1'
c Var 'alldiff_hint_00024' order represents '0' with '-1267'
c Encoding variable: alldiff_hint_00025 with domain: bool (representing constraint )
c Var 'alldiff_hint_00025' direct represents '0' with '-1268'
c Var 'alldiff_hint_00025' direct represents '1' with '1268'
c Var 'alldiff_hint_00025' order represents '1' with '1'
c Var 'alldiff_hint_00025' order represents '0' with '-1268'
c Encoding variable: alldiff_hint_00026 with domain: bool (representing constraint )
c Var 'alldiff_hint_00026' direct represents '0' with '-1269'
c Var 'alldiff_hint_00026' direct represents '1' with '1269'
c Var 'alldiff_hint_00026' order represents '1' with '1'
c Var 'alldiff_hint_00026' order represents '0' with '-1269'
c Encoding variable: alldiff_hint_00027 with domain: bool (representing constraint )
c Var 'alldiff_hint_00027' direct represents '0' with '-1270'
c Var 'alldiff_hint_00027' direct represents '1' with '1270'
c Var 'alldiff_hint_00027' order represents '1' with '1'
c Var 'alldiff_hint_00027' order represents '0' with '-1270'
c Encoding variable: alldiff_hint_00028 with domain: bool (representing constraint )
c Var 'alldiff_hint_00028' direct represents '0' with '-1271'
c Var 'alldiff_hint_00028' direct represents '1' with '1271'
c Var 'alldiff_hint_00028' order represents '1' with '1'
c Var 'alldiff_hint_00028' order represents '0' with '-1271'
c Encoding variable: sum_hint_00001 with domain: bool (representing constraint )
c Var 'sum_hint_00001' direct represents '0' with '-1272'
c Var 'sum_hint_00001' direct represents '1' with '1272'
c Var 'sum_hint_00001' order represents '1' with '1'
c Var 'sum_hint_00001' order represents '0' with '-1272'
c Encoding variable: sum_hint_00002 with domain: bool (representing constraint )
c Var 'sum_hint_00002' direct represents '0' with '-1273'
c Var 'sum_hint_00002' direct represents '1' with '1273'
c Var 'sum_hint_00002' order represents '1' with '1'
c Var 'sum_hint_00002' order represents '0' with '-1273'
c Encoding variable: sum_hint_00003 with domain: bool (representing constraint )
c Var 'sum_hint_00003' direct represents '0' with '-1274'
c Var 'sum_hint_00003' direct represents '1' with '1274'
c Var 'sum_hint_00003' order represents '1' with '1'
c Var 'sum_hint_00003' order represents '0' with '-1274'
c Encoding variable: sum_hint_00004 with domain: bool (representing constraint )
c Var 'sum_hint_00004' direct represents '0' with '-1275'
c Var 'sum_hint_00004' direct represents '1' with '1275'
c Var 'sum_hint_00004' order represents '1' with '1'
c Var 'sum_hint_00004' order represents '0' with '-1275'
c Encoding variable: sum_hint_00005 with domain: bool (representing constraint )
c Var 'sum_hint_00005' direct represents '0' with '-1276'
c Var 'sum_hint_00005' direct represents '1' with '1276'
c Var 'sum_hint_00005' order represents '1' with '1'
c Var 'sum_hint_00005' order represents '0' with '-1276'
c Encoding variable: sum_hint_00006 with domain: bool (representing constraint )
c Var 'sum_hint_00006' direct represents '0' with '-1277'
c Var 'sum_hint_00006' direct represents '1' with '1277'
c Var 'sum_hint_00006' order represents '1' with '1'
c Var 'sum_hint_00006' order represents '0' with '-1277'
c Encoding variable: sum_hint_00007 with domain: bool (representing constraint )
c Var 'sum_hint_00007' direct represents '0' with '-1278'
c Var 'sum_hint_00007' direct represents '1' with '1278'
c Var 'sum_hint_00007' order represents '1' with '1'
c Var 'sum_hint_00007' order represents '0' with '-1278'
c Encoding variable: sum_hint_00008 with domain: bool (representing constraint )
c Var 'sum_hint_00008' direct represents '0' with '-1279'
c Var 'sum_hint_00008' direct represents '1' with '1279'
c Var 'sum_hint_00008' order represents '1' with '1'
c Var 'sum_hint_00008' order represents '0' with '-1279'
c Encoding variable: sum_hint_00009 with domain: bool (representing constraint )
c Var 'sum_hint_00009' direct represents '0' with '-1280'
c Var 'sum_hint_00009' direct represents '1' with '1280'
c Var 'sum_hint_00009' order represents '1' with '1'
c Var 'sum_hint_00009' order represents '0' with '-1280'
c Encoding variable: sum_hint_00010 with domain: bool (representing constraint )
c Var 'sum_hint_00010' direct represents '0' with '-1281'
c Var 'sum_hint_00010' direct represents '1' with '1281'
c Var 'sum_hint_00010' order represents '1' with '1'
c Var 'sum_hint_00010' order represents '0' with '-1281'
c Encoding variable: sum_hint_00011 with domain: bool (representing constraint )
c Var 'sum_hint_00011' direct represents '0' with '-1282'
c Var 'sum_hint_00011' direct represents '1' with '1282'
c Var 'sum_hint_00011' order represents '1' with '1'
c Var 'sum_hint_00011' order represents '0' with '-1282'
c Encoding variable: sum_hint_00012 with domain: bool (representing constraint )
c Var 'sum_hint_00012' direct represents '0' with '-1283'
c Var 'sum_hint_00012' direct represents '1' with '1283'
c Var 'sum_hint_00012' order represents '1' with '1'
c Var 'sum_hint_00012' order represents '0' with '-1283'
c Encoding variable: sum_hint_00013 with domain: bool (representing constraint )
c Var 'sum_hint_00013' direct represents '0' with '-1284'
c Var 'sum_hint_00013' direct represents '1' with '1284'
c Var 'sum_hint_00013' order represents '1' with '1'
c Var 'sum_hint_00013' order represents '0' with '-1284'
c Encoding variable: sum_hint_00014 with domain: bool (representing constraint )
c Var 'sum_hint_00014' direct represents '0' with '-1285'
c Var 'sum_hint_00014' direct represents '1' with '1285'
c Var 'sum_hint_00014' order represents '1' with '1'
c Var 'sum_hint_00014' order represents '0' with '-1285'
c Encoding variable: sum_hint_00015 with domain: bool (representing constraint )
c Var 'sum_hint_00015' direct represents '0' with '-1286'
c Var 'sum_hint_00015' direct represents '1' with '1286'
c Var 'sum_hint_00015' order represents '1' with '1'
c Var 'sum_hint_00015' order represents '0' with '-1286'
c Encoding variable: sum_hint_00016 with domain: bool (representing constraint )
c Var 'sum_hint_00016' direct represents '0' with '-1287'
c Var 'sum_hint_00016' direct represents '1' with '1287'
c Var 'sum_hint_00016' order represents '1' with '1'
c Var 'sum_hint_00016' order represents '0' with '-1287'
c Encoding variable: sum_hint_00017 with domain: bool (representing constraint )
c Var 'sum_hint_00017' direct represents '0' with '-1288'
c Var 'sum_hint_00017' direct represents '1' with '1288'
c Var 'sum_hint_00017' order represents '1' with '1'
c Var 'sum_hint_00017' order represents '0' with '-1288'
c Encoding variable: sum_hint_00018 with domain: bool (representing constraint )
c Var 'sum_hint_00018' direct represents '0' with '-1289'
c Var 'sum_hint_00018' direct represents '1' with '1289'
c Var 'sum_hint_00018' order represents '1' with '1'
c Var 'sum_hint_00018' order represents '0' with '-1289'
c Encoding variable: sum_hint_00019 with domain: bool (representing constraint )
c Var 'sum_hint_00019' direct represents '0' with '-1290'
c Var 'sum_hint_00019' direct represents '1' with '1290'
c Var 'sum_hint_00019' order represents '1' with '1'
c Var 'sum_hint_00019' order represents '0' with '-1290'
c Encoding variable: sum_hint_00020 with domain: bool (representing constraint )
c Var 'sum_hint_00020' direct represents '0' with '-1291'
c Var 'sum_hint_00020' direct represents '1' with '1291'
c Var 'sum_hint_00020' order represents '1' with '1'
c Var 'sum_hint_00020' order represents '0' with '-1291'
c Encoding variable: sum_hint_00021 with domain: bool (representing constraint )
c Var 'sum_hint_00021' direct represents '0' with '-1292'
c Var 'sum_hint_00021' direct represents '1' with '1292'
c Var 'sum_hint_00021' order represents '1' with '1'
c Var 'sum_hint_00021' order represents '0' with '-1292'
c Encoding variable: sum_hint_00022 with domain: bool (representing constraint )
c Var 'sum_hint_00022' direct represents '0' with '-1293'
c Var 'sum_hint_00022' direct represents '1' with '1293'
c Var 'sum_hint_00022' order represents '1' with '1'
c Var 'sum_hint_00022' order represents '0' with '-1293'
c Encoding variable: sum_hint_00023 with domain: bool (representing constraint )
c Var 'sum_hint_00023' direct represents '0' with '-1294'
c Var 'sum_hint_00023' direct represents '1' with '1294'
c Var 'sum_hint_00023' order represents '1' with '1'
c Var 'sum_hint_00023' order represents '0' with '-1294'
c Encoding variable: sum_hint_00024 with domain: bool (representing constraint )
c Var 'sum_hint_00024' direct represents '0' with '-1295'
c Var 'sum_hint_00024' direct represents '1' with '1295'
c Var 'sum_hint_00024' order represents '1' with '1'
c Var 'sum_hint_00024' order represents '0' with '-1295'
c Encoding variable: sum_hint_00025 with domain: bool (representing constraint )
c Var 'sum_hint_00025' direct represents '0' with '-1296'
c Var 'sum_hint_00025' direct represents '1' with '1296'
c Var 'sum_hint_00025' order represents '1' with '1'
c Var 'sum_hint_00025' order represents '0' with '-1296'
c Encoding variable: sum_hint_00026 with domain: bool (representing constraint )
c Var 'sum_hint_00026' direct represents '0' with '-1297'
c Var 'sum_hint_00026' direct represents '1' with '1297'
c Var 'sum_hint_00026' order represents '1' with '1'
c Var 'sum_hint_00026' order represents '0' with '-1297'
c Encoding variable: sum_hint_00027 with domain: bool (representing constraint )
c Var 'sum_hint_00027' direct represents '0' with '-1298'
c Var 'sum_hint_00027' direct represents '1' with '1298'
c Var 'sum_hint_00027' order represents '1' with '1'
c Var 'sum_hint_00027' order represents '0' with '-1298'
c Encoding variable: sum_hint_00028 with domain: bool (representing constraint )
c Var 'sum_hint_00028' direct represents '0' with '-1299'
c Var 'sum_hint_00028' direct represents '1' with '1299'
c Var 'sum_hint_00028' order represents '1' with '1'
c Var 'sum_hint_00028' order represents '0' with '-1299'
c Encoding variable: aux0 with domain: bool (representing constraint ((x_00001_00001 + x_00001_00002)=tv=11))
c Var 'aux0' direct represents '0' with '-1300'
c Var 'aux0' direct represents '1' with '1300'
c Var 'aux0' order represents '1' with '1'
c Var 'aux0' order represents '0' with '-1300'
c Encoding variable: aux1 with domain: bool (representing constraint ((x_00002_00003 + x_00001_00003)=tv=8))
c Var 'aux1' direct represents '0' with '-1301'
c Var 'aux1' direct represents '1' with '1301'
c Var 'aux1' order represents '1' with '1'
c Var 'aux1' order represents '0' with '-1301'
c Encoding variable: aux2 with domain: bool (representing constraint ((x_00002_00004 + x_00001_00004 + x_00001_00005)=tv=14))
c Var 'aux2' direct represents '0' with '-1302'
c Var 'aux2' direct represents '1' with '1302'
c Var 'aux2' order represents '1' with '1'
c Var 'aux2' order represents '0' with '-1302'
c Encoding variable: aux3 with domain: bool (representing constraint ((x_00001_00006 + x_00001_00007)=tv=6))
c Var 'aux3' direct represents '0' with '-1303'
c Var 'aux3' direct represents '1' with '1303'
c Var 'aux3' order represents '1' with '1'
c Var 'aux3' order represents '0' with '-1303'
c Encoding variable: aux4 with domain: bool (representing constraint ((x_00002_00009 + x_00001_00008 + x_00001_00009)=tv=23))
c Var 'aux4' direct represents '0' with '-1304'
c Var 'aux4' direct represents '1' with '1304'
c Var 'aux4' order represents '1' with '1'
c Var 'aux4' order represents '0' with '-1304'
c Encoding variable: aux5 with domain: bool (representing constraint ((x_00002_00001 + x_00002_00002)=tv=11))
c Var 'aux5' direct represents '0' with '-1305'
c Var 'aux5' direct represents '1' with '1305'
c Var 'aux5' order represents '1' with '1'
c Var 'aux5' order represents '0' with '-1305'
c Encoding variable: aux6 with domain: bool (representing constraint ((x_00002_00005 + x_00002_00006)=tv=14))
c Var 'aux6' direct represents '0' with '-1306'
c Var 'aux6' direct represents '1' with '1306'
c Var 'aux6' order represents '1' with '1'
c Var 'aux6' order represents '0' with '-1306'
c Encoding variable: aux7 with domain: bool (representing constraint ((x_00002_00007 + x_00002_00008 + x_00003_00008)=tv=6))
c Var 'aux7' direct represents '0' with '-1307'
c Var 'aux7' direct represents '1' with '1307'
c Var 'aux7' order represents '1' with '1'
c Var 'aux7' order represents '0' with '-1307'
c Encoding variable: aux8 with domain: bool (representing constraint ((x_00003_00001 + x_00004_00001 + x_00005_00001 + x_00006_00001)=tv=18))
c Var 'aux8' direct represents '0' with '-1308'
c Var 'aux8' direct represents '1' with '1308'
c Var 'aux8' order represents '1' with '1'
c Var 'aux8' order represents '0' with '-1308'
c Encoding variable: aux9 with domain: bool (representing constraint ((x_00003_00002 + x_00004_00002 + x_00005_00002)=tv=15))
c Var 'aux9' direct represents '0' with '-1309'
c Var 'aux9' direct represents '1' with '1309'
c Var 'aux9' order represents '1' with '1'
c Var 'aux9' order represents '0' with '-1309'
c Encoding variable: aux10 with domain: bool (representing constraint ((x_00003_00003 + x_00003_00004 + x_00004_00004)=tv=11))
c Var 'aux10' direct represents '0' with '-1310'
c Var 'aux10' direct represents '1' with '1310'
c Var 'aux10' order represents '1' with '1'
c Var 'aux10' order represents '0' with '-1310'
c Encoding variable: aux11 with domain: bool (representing constraint ((x_00003_00005 + x_00004_00005)=tv=8))
c Var 'aux11' direct represents '0' with '-1311'
c Var 'aux11' direct represents '1' with '1311'
c Var 'aux11' order represents '1' with '1'
c Var 'aux11' order represents '0' with '-1311'
c Encoding variable: aux12 with domain: bool (representing constraint ((x_00003_00006 + x_00003_00007 + x_00004_00006 + x_00004_00007)=tv=22))
c Var 'aux12' direct represents '0' with '-1312'
c Var 'aux12' direct represents '1' with '1312'
c Var 'aux12' order represents '1' with '1'
c Var 'aux12' order represents '0' with '-1312'
c Encoding variable: aux13 with domain: bool (representing constraint ((x_00003_00009 + x_00004_00009)=tv=12))
c Var 'aux13' direct represents '0' with '-1313'
c Var 'aux13' direct represents '1' with '1313'
c Var 'aux13' order represents '1' with '1'
c Var 'aux13' order represents '0' with '-1313'
c Encoding variable: aux14 with domain: bool (representing constraint ((x_00007_00003 + x_00007_00004 + x_00007_00005 + x_00007_00006 + x_00004_00003 + x_00005_00003 + x_00006_00003)=tv=42))
c Var 'aux14' direct represents '0' with '-1314'
c Var 'aux14' direct represents '1' with '1314'
c Var 'aux14' order represents '1' with '1'
c Var 'aux14' order represents '0' with '-1314'
c Encoding variable: aux15 with domain: bool (representing constraint ((x_00004_00008 + x_00005_00008)=tv=17))
c Var 'aux15' direct represents '0' with '-1315'
c Var 'aux15' direct represents '1' with '1315'
c Var 'aux15' order represents '1' with '1'
c Var 'aux15' order represents '0' with '-1315'
c Encoding variable: aux16 with domain: bool (representing constraint ((x_00005_00004 + x_00005_00005 + x_00006_00004 + x_00006_00005)=tv=18))
c Var 'aux16' direct represents '0' with '-1316'
c Var 'aux16' direct represents '1' with '1316'
c Var 'aux16' order represents '1' with '1'
c Var 'aux16' order represents '0' with '-1316'
c Encoding variable: aux17 with domain: bool (representing constraint ((x_00005_00006 + x_00005_00007)=tv=13))
c Var 'aux17' direct represents '0' with '-1317'
c Var 'aux17' direct represents '1' with '1317'
c Var 'aux17' order represents '1' with '1'
c Var 'aux17' order represents '0' with '-1317'
c Encoding variable: aux18 with domain: bool (representing constraint ((x_00005_00009 + x_00006_00008 + x_00006_00009)=tv=7))
c Var 'aux18' direct represents '0' with '-1318'
c Var 'aux18' direct represents '1' with '1318'
c Var 'aux18' order represents '1' with '1'
c Var 'aux18' order represents '0' with '-1318'
c Encoding variable: aux19 with domain: bool (representing constraint ((x_00007_00001 + x_00007_00002 + x_00006_00002)=tv=19))
c Var 'aux19' direct represents '0' with '-1319'
c Var 'aux19' direct represents '1' with '1319'
c Var 'aux19' order represents '1' with '1'
c Var 'aux19' order represents '0' with '-1319'
c Encoding variable: aux20 with domain: bool (representing constraint ((x_00007_00007 + x_00006_00006 + x_00006_00007)=tv=12))
c Var 'aux20' direct represents '0' with '-1320'
c Var 'aux20' direct represents '1' with '1320'
c Var 'aux20' order represents '1' with '1'
c Var 'aux20' order represents '0' with '-1320'
c Encoding variable: aux21 with domain: bool (representing constraint ((x_00007_00008 + x_00007_00009)=tv=8))
c Var 'aux21' direct represents '0' with '-1321'
c Var 'aux21' direct represents '1' with '1321'
c Var 'aux21' order represents '1' with '1'
c Var 'aux21' order represents '0' with '-1321'
c Encoding variable: aux22 with domain: bool (representing constraint ((x_00008_00001 + x_00008_00002 + x_00009_00001 + x_00009_00002)=tv=16))
c Var 'aux22' direct represents '0' with '-1322'
c Var 'aux22' direct represents '1' with '1322'
c Var 'aux22' order represents '1' with '1'
c Var 'aux22' order represents '0' with '-1322'
c Encoding variable: aux23 with domain: bool (representing constraint ((x_00008_00003 + x_00008_00004 + x_00009_00003)=tv=16))
c Var 'aux23' direct represents '0' with '-1323'
c Var 'aux23' direct represents '1' with '1323'
c Var 'aux23' order represents '1' with '1'
c Var 'aux23' order represents '0' with '-1323'
c Encoding variable: aux24 with domain: bool (representing constraint ((x_00008_00005 + x_00008_00006 + x_00008_00007)=tv=17))
c Var 'aux24' direct represents '0' with '-1324'
c Var 'aux24' direct represents '1' with '1324'
c Var 'aux24' order represents '1' with '1'
c Var 'aux24' order represents '0' with '-1324'
c Encoding variable: aux25 with domain: bool (representing constraint ((x_00008_00008 + x_00009_00008)=tv=9))
c Var 'aux25' direct represents '0' with '-1325'
c Var 'aux25' direct represents '1' with '1325'
c Var 'aux25' order represents '1' with '1'
c Var 'aux25' order represents '0' with '-1325'
c Encoding variable: aux26 with domain: bool (representing constraint ((x_00008_00009 + x_00009_00009)=tv=9))
c Var 'aux26' direct represents '0' with '-1326'
c Var 'aux26' direct represents '1' with '1326'
c Var 'aux26' order represents '1' with '1'
c Var 'aux26' order represents '0' with '-1326'
c Encoding variable: aux27 with domain: bool (representing constraint ((x_00009_00004 + x_00009_00005 + x_00009_00006 + x_00009_00007)=tv=23))
c Var 'aux27' direct represents '0' with '-1327'
c Var 'aux27' direct represents '1' with '1327'
c Var 'aux27' order represents '1' with '1'
c Var 'aux27' order represents '0' with '-1327'
c Encoding variable: aux28 with domain: bool (representing constraint (x_00001_00001 != x_00001_00002))
c Var 'aux28' direct represents '0' with '-1328'
c Var 'aux28' direct represents '1' with '1328'
c Var 'aux28' order represents '1' with '1'
c Var 'aux28' order represents '0' with '-1328'
c Encoding variable: aux29 with domain: bool (representing constraint (x_00002_00003 != x_00001_00003))
c Var 'aux29' direct represents '0' with '-1329'
c Var 'aux29' direct represents '1' with '1329'
c Var 'aux29' order represents '1' with '1'
c Var 'aux29' order represents '0' with '-1329'
c Encoding variable: aux30 with domain: bool (representing constraint (x_00001_00006 != x_00001_00007))
c Var 'aux30' direct represents '0' with '-1330'
c Var 'aux30' direct represents '1' with '1330'
c Var 'aux30' order represents '1' with '1'
c Var 'aux30' order represents '0' with '-1330'
c Encoding variable: aux31 with domain: bool (representing constraint (x_00002_00001 != x_00002_00002))
c Var 'aux31' direct represents '0' with '-1331'
c Var 'aux31' direct represents '1' with '1331'
c Var 'aux31' order represents '1' with '1'
c Var 'aux31' order represents '0' with '-1331'
c Encoding variable: aux32 with domain: bool (representing constraint (x_00002_00005 != x_00002_00006))
c Var 'aux32' direct represents '0' with '-1332'
c Var 'aux32' direct represents '1' with '1332'
c Var 'aux32' order represents '1' with '1'
c Var 'aux32' order represents '0' with '-1332'
c Encoding variable: aux33 with domain: bool (representing constraint (x_00003_00005 != x_00004_00005))
c Var 'aux33' direct represents '0' with '-1333'
c Var 'aux33' direct represents '1' with '1333'
c Var 'aux33' order represents '1' with '1'
c Var 'aux33' order represents '0' with '-1333'
c Encoding variable: aux34 with domain: bool (representing constraint (x_00003_00009 != x_00004_00009))
c Var 'aux34' direct represents '0' with '-1334'
c Var 'aux34' direct represents '1' with '1334'
c Var 'aux34' order represents '1' with '1'
c Var 'aux34' order represents '0' with '-1334'
c Encoding variable: aux35 with domain: bool (representing constraint (x_00004_00008 != x_00005_00008))
c Var 'aux35' direct represents '0' with '-1335'
c Var 'aux35' direct represents '1' with '1335'
c Var 'aux35' order represents '1' with '1'
c Var 'aux35' order represents '0' with '-1335'
c Encoding variable: aux36 with domain: bool (representing constraint (x_00005_00006 != x_00005_00007))
c Var 'aux36' direct represents '0' with '-1336'
c Var 'aux36' direct represents '1' with '1336'
c Var 'aux36' order represents '1' with '1'
c Var 'aux36' order represents '0' with '-1336'
c Encoding variable: aux37 with domain: bool (representing constraint (x_00007_00008 != x_00007_00009))
c Var 'aux37' direct represents '0' with '-1337'
c Var 'aux37' direct represents '1' with '1337'
c Var 'aux37' order represents '1' with '1'
c Var 'aux37' order represents '0' with '-1337'
c Encoding variable: aux38 with domain: bool (representing constraint (x_00008_00008 != x_00009_00008))
c Var 'aux38' direct represents '0' with '-1338'
c Var 'aux38' direct represents '1' with '1338'
c Var 'aux38' order represents '1' with '1'
c Var 'aux38' order represents '0' with '-1338'
c Encoding variable: aux39 with domain: bool (representing constraint (x_00008_00009 != x_00009_00009))
c Var 'aux39' direct represents '0' with '-1339'
c Var 'aux39' direct represents '1' with '1339'
c Var 'aux39' order represents '1' with '1'
c Var 'aux39' order represents '0' with '-1339'
c Encoding variable: aux40 with domain: bool (representing constraint (((x_00003_00001=1) + (x_00008_00001=1) + (x_00001_00001=1) + (x_00006_00001=1) + (x_00004_00001=1) + (x_00009_00001=1) + (x_00002_00001=1) + (x_00007_00001=1) + (x_00005_00001=1))=tv=1))
c Var 'aux40' direct represents '0' with '-1340'
c Var 'aux40' direct represents '1' with '1340'
c Var 'aux40' order represents '1' with '1'
c Var 'aux40' order represents '0' with '-1340'
c Encoding variable: aux41 with domain: bool (representing constraint (((x_00003_00001=2) + (x_00008_00001=2) + (x_00001_00001=2) + (x_00006_00001=2) + (x_00004_00001=2) + (x_00009_00001=2) + (x_00002_00001=2) + (x_00007_00001=2) + (x_00005_00001=2))=tv=1))
c Var 'aux41' direct represents '0' with '-1341'
c Var 'aux41' direct represents '1' with '1341'
c Var 'aux41' order represents '1' with '1'
c Var 'aux41' order represents '0' with '-1341'
c Encoding variable: aux42 with domain: bool (representing constraint (((x_00003_00001=3) + (x_00008_00001=3) + (x_00001_00001=3) + (x_00006_00001=3) + (x_00004_00001=3) + (x_00009_00001=3) + (x_00002_00001=3) + (x_00007_00001=3) + (x_00005_00001=3))=tv=1))
c Var 'aux42' direct represents '0' with '-1342'
c Var 'aux42' direct represents '1' with '1342'
c Var 'aux42' order represents '1' with '1'
c Var 'aux42' order represents '0' with '-1342'
c Encoding variable: aux43 with domain: bool (representing constraint (((x_00003_00001=4) + (x_00008_00001=4) + (x_00001_00001=4) + (x_00006_00001=4) + (x_00004_00001=4) + (x_00009_00001=4) + (x_00002_00001=4) + (x_00007_00001=4) + (x_00005_00001=4))=tv=1))
c Var 'aux43' direct represents '0' with '-1343'
c Var 'aux43' direct represents '1' with '1343'
c Var 'aux43' order represents '1' with '1'
c Var 'aux43' order represents '0' with '-1343'
c Encoding variable: aux44 with domain: bool (representing constraint (((x_00003_00001=5) + (x_00008_00001=5) + (x_00001_00001=5) + (x_00006_00001=5) + (x_00004_00001=5) + (x_00009_00001=5) + (x_00002_00001=5) + (x_00007_00001=5) + (x_00005_00001=5))=tv=1))
c Var 'aux44' direct represents '0' with '-1344'
c Var 'aux44' direct represents '1' with '1344'
c Var 'aux44' order represents '1' with '1'
c Var 'aux44' order represents '0' with '-1344'
c Encoding variable: aux45 with domain: bool (representing constraint (((x_00003_00001=6) + (x_00008_00001=6) + (x_00001_00001=6) + (x_00006_00001=6) + (x_00004_00001=6) + (x_00009_00001=6) + (x_00002_00001=6) + (x_00007_00001=6) + (x_00005_00001=6))=tv=1))
c Var 'aux45' direct represents '0' with '-1345'
c Var 'aux45' direct represents '1' with '1345'
c Var 'aux45' order represents '1' with '1'
c Var 'aux45' order represents '0' with '-1345'
c Encoding variable: aux46 with domain: bool (representing constraint (((x_00003_00001=7) + (x_00008_00001=7) + (x_00001_00001=7) + (x_00006_00001=7) + (x_00004_00001=7) + (x_00009_00001=7) + (x_00002_00001=7) + (x_00007_00001=7) + (x_00005_00001=7))=tv=1))
c Var 'aux46' direct represents '0' with '-1346'
c Var 'aux46' direct represents '1' with '1346'
c Var 'aux46' order represents '1' with '1'
c Var 'aux46' order represents '0' with '-1346'
c Encoding variable: aux47 with domain: bool (representing constraint (((x_00003_00001=8) + (x_00008_00001=8) + (x_00001_00001=8) + (x_00006_00001=8) + (x_00004_00001=8) + (x_00009_00001=8) + (x_00002_00001=8) + (x_00007_00001=8) + (x_00005_00001=8))=tv=1))
c Var 'aux47' direct represents '0' with '-1347'
c Var 'aux47' direct represents '1' with '1347'
c Var 'aux47' order represents '1' with '1'
c Var 'aux47' order represents '0' with '-1347'
c Encoding variable: aux48 with domain: bool (representing constraint (((x_00003_00001=9) + (x_00008_00001=9) + (x_00001_00001=9) + (x_00006_00001=9) + (x_00004_00001=9) + (x_00009_00001=9) + (x_00002_00001=9) + (x_00007_00001=9) + (x_00005_00001=9))=tv=1))
c Var 'aux48' direct represents '0' with '-1348'
c Var 'aux48' direct represents '1' with '1348'
c Var 'aux48' order represents '1' with '1'
c Var 'aux48' order represents '0' with '-1348'
c Encoding variable: aux49 with domain: bool (representing constraint (((x_00003_00002=1) + (x_00008_00002=1) + (x_00001_00002=1) + (x_00006_00002=1) + (x_00004_00002=1) + (x_00009_00002=1) + (x_00002_00002=1) + (x_00007_00002=1) + (x_00005_00002=1))=tv=1))
c Var 'aux49' direct represents '0' with '-1349'
c Var 'aux49' direct represents '1' with '1349'
c Var 'aux49' order represents '1' with '1'
c Var 'aux49' order represents '0' with '-1349'
c Encoding variable: aux50 with domain: bool (representing constraint (((x_00003_00002=2) + (x_00008_00002=2) + (x_00001_00002=2) + (x_00006_00002=2) + (x_00004_00002=2) + (x_00009_00002=2) + (x_00002_00002=2) + (x_00007_00002=2) + (x_00005_00002=2))=tv=1))
c Var 'aux50' direct represents '0' with '-1350'
c Var 'aux50' direct represents '1' with '1350'
c Var 'aux50' order represents '1' with '1'
c Var 'aux50' order represents '0' with '-1350'
c Encoding variable: aux51 with domain: bool (representing constraint (((x_00003_00002=3) + (x_00008_00002=3) + (x_00001_00002=3) + (x_00006_00002=3) + (x_00004_00002=3) + (x_00009_00002=3) + (x_00002_00002=3) + (x_00007_00002=3) + (x_00005_00002=3))=tv=1))
c Var 'aux51' direct represents '0' with '-1351'
c Var 'aux51' direct represents '1' with '1351'
c Var 'aux51' order represents '1' with '1'
c Var 'aux51' order represents '0' with '-1351'
c Encoding variable: aux52 with domain: bool (representing constraint (((x_00003_00002=4) + (x_00008_00002=4) + (x_00001_00002=4) + (x_00006_00002=4) + (x_00004_00002=4) + (x_00009_00002=4) + (x_00002_00002=4) + (x_00007_00002=4) + (x_00005_00002=4))=tv=1))
c Var 'aux52' direct represents '0' with '-1352'
c Var 'aux52' direct represents '1' with '1352'
c Var 'aux52' order represents '1' with '1'
c Var 'aux52' order represents '0' with '-1352'
c Encoding variable: aux53 with domain: bool (representing constraint (((x_00003_00002=5) + (x_00008_00002=5) + (x_00001_00002=5) + (x_00006_00002=5) + (x_00004_00002=5) + (x_00009_00002=5) + (x_00002_00002=5) + (x_00007_00002=5) + (x_00005_00002=5))=tv=1))
c Var 'aux53' direct represents '0' with '-1353'
c Var 'aux53' direct represents '1' with '1353'
c Var 'aux53' order represents '1' with '1'
c Var 'aux53' order represents '0' with '-1353'
c Encoding variable: aux54 with domain: bool (representing constraint (((x_00003_00002=6) + (x_00008_00002=6) + (x_00001_00002=6) + (x_00006_00002=6) + (x_00004_00002=6) + (x_00009_00002=6) + (x_00002_00002=6) + (x_00007_00002=6) + (x_00005_00002=6))=tv=1))
c Var 'aux54' direct represents '0' with '-1354'
c Var 'aux54' direct represents '1' with '1354'
c Var 'aux54' order represents '1' with '1'
c Var 'aux54' order represents '0' with '-1354'
c Encoding variable: aux55 with domain: bool (representing constraint (((x_00003_00002=7) + (x_00008_00002=7) + (x_00001_00002=7) + (x_00006_00002=7) + (x_00004_00002=7) + (x_00009_00002=7) + (x_00002_00002=7) + (x_00007_00002=7) + (x_00005_00002=7))=tv=1))
c Var 'aux55' direct represents '0' with '-1355'
c Var 'aux55' direct represents '1' with '1355'
c Var 'aux55' order represents '1' with '1'
c Var 'aux55' order represents '0' with '-1355'
c Encoding variable: aux56 with domain: bool (representing constraint (((x_00003_00002=8) + (x_00008_00002=8) + (x_00001_00002=8) + (x_00006_00002=8) + (x_00004_00002=8) + (x_00009_00002=8) + (x_00002_00002=8) + (x_00007_00002=8) + (x_00005_00002=8))=tv=1))
c Var 'aux56' direct represents '0' with '-1356'
c Var 'aux56' direct represents '1' with '1356'
c Var 'aux56' order represents '1' with '1'
c Var 'aux56' order represents '0' with '-1356'
c Encoding variable: aux57 with domain: bool (representing constraint (((x_00003_00002=9) + (x_00008_00002=9) + (x_00001_00002=9) + (x_00006_00002=9) + (x_00004_00002=9) + (x_00009_00002=9) + (x_00002_00002=9) + (x_00007_00002=9) + (x_00005_00002=9))=tv=1))
c Var 'aux57' direct represents '0' with '-1357'
c Var 'aux57' direct represents '1' with '1357'
c Var 'aux57' order represents '1' with '1'
c Var 'aux57' order represents '0' with '-1357'
c Encoding variable: aux58 with domain: bool (representing constraint (((x_00003_00003=1) + (x_00008_00003=1) + (x_00001_00003=1) + (x_00006_00003=1) + (x_00004_00003=1) + (x_00009_00003=1) + (x_00002_00003=1) + (x_00007_00003=1) + (x_00005_00003=1))=tv=1))
c Var 'aux58' direct represents '0' with '-1358'
c Var 'aux58' direct represents '1' with '1358'
c Var 'aux58' order represents '1' with '1'
c Var 'aux58' order represents '0' with '-1358'
c Encoding variable: aux59 with domain: bool (representing constraint (((x_00003_00003=2) + (x_00008_00003=2) + (x_00001_00003=2) + (x_00006_00003=2) + (x_00004_00003=2) + (x_00009_00003=2) + (x_00002_00003=2) + (x_00007_00003=2) + (x_00005_00003=2))=tv=1))
c Var 'aux59' direct represents '0' with '-1359'
c Var 'aux59' direct represents '1' with '1359'
c Var 'aux59' order represents '1' with '1'
c Var 'aux59' order represents '0' with '-1359'
c Encoding variable: aux60 with domain: bool (representing constraint (((x_00003_00003=3) + (x_00008_00003=3) + (x_00001_00003=3) + (x_00006_00003=3) + (x_00004_00003=3) + (x_00009_00003=3) + (x_00002_00003=3) + (x_00007_00003=3) + (x_00005_00003=3))=tv=1))
c Var 'aux60' direct represents '0' with '-1360'
c Var 'aux60' direct represents '1' with '1360'
c Var 'aux60' order represents '1' with '1'
c Var 'aux60' order represents '0' with '-1360'
c Encoding variable: aux61 with domain: bool (representing constraint (((x_00003_00003=4) + (x_00008_00003=4) + (x_00001_00003=4) + (x_00006_00003=4) + (x_00004_00003=4) + (x_00009_00003=4) + (x_00002_00003=4) + (x_00007_00003=4) + (x_00005_00003=4))=tv=1))
c Var 'aux61' direct represents '0' with '-1361'
c Var 'aux61' direct represents '1' with '1361'
c Var 'aux61' order represents '1' with '1'
c Var 'aux61' order represents '0' with '-1361'
c Encoding variable: aux62 with domain: bool (representing constraint (((x_00003_00003=5) + (x_00008_00003=5) + (x_00001_00003=5) + (x_00006_00003=5) + (x_00004_00003=5) + (x_00009_00003=5) + (x_00002_00003=5) + (x_00007_00003=5) + (x_00005_00003=5))=tv=1))
c Var 'aux62' direct represents '0' with '-1362'
c Var 'aux62' direct represents '1' with '1362'
c Var 'aux62' order represents '1' with '1'
c Var 'aux62' order represents '0' with '-1362'
c Encoding variable: aux63 with domain: bool (representing constraint (((x_00003_00003=6) + (x_00008_00003=6) + (x_00001_00003=6) + (x_00006_00003=6) + (x_00004_00003=6) + (x_00009_00003=6) + (x_00002_00003=6) + (x_00007_00003=6) + (x_00005_00003=6))=tv=1))
c Var 'aux63' direct represents '0' with '-1363'
c Var 'aux63' direct represents '1' with '1363'
c Var 'aux63' order represents '1' with '1'
c Var 'aux63' order represents '0' with '-1363'
c Encoding variable: aux64 with domain: bool (representing constraint (((x_00003_00003=7) + (x_00008_00003=7) + (x_00001_00003=7) + (x_00006_00003=7) + (x_00004_00003=7) + (x_00009_00003=7) + (x_00002_00003=7) + (x_00007_00003=7) + (x_00005_00003=7))=tv=1))
c Var 'aux64' direct represents '0' with '-1364'
c Var 'aux64' direct represents '1' with '1364'
c Var 'aux64' order represents '1' with '1'
c Var 'aux64' order represents '0' with '-1364'
c Encoding variable: aux65 with domain: bool (representing constraint (((x_00003_00003=8) + (x_00008_00003=8) + (x_00001_00003=8) + (x_00006_00003=8) + (x_00004_00003=8) + (x_00009_00003=8) + (x_00002_00003=8) + (x_00007_00003=8) + (x_00005_00003=8))=tv=1))
c Var 'aux65' direct represents '0' with '-1365'
c Var 'aux65' direct represents '1' with '1365'
c Var 'aux65' order represents '1' with '1'
c Var 'aux65' order represents '0' with '-1365'
c Encoding variable: aux66 with domain: bool (representing constraint (((x_00003_00003=9) + (x_00008_00003=9) + (x_00001_00003=9) + (x_00006_00003=9) + (x_00004_00003=9) + (x_00009_00003=9) + (x_00002_00003=9) + (x_00007_00003=9) + (x_00005_00003=9))=tv=1))
c Var 'aux66' direct represents '0' with '-1366'
c Var 'aux66' direct represents '1' with '1366'
c Var 'aux66' order represents '1' with '1'
c Var 'aux66' order represents '0' with '-1366'
c Encoding variable: aux67 with domain: bool (representing constraint (((x_00003_00004=1) + (x_00008_00004=1) + (x_00001_00004=1) + (x_00006_00004=1) + (x_00004_00004=1) + (x_00009_00004=1) + (x_00002_00004=1) + (x_00007_00004=1) + (x_00005_00004=1))=tv=1))
c Var 'aux67' direct represents '0' with '-1367'
c Var 'aux67' direct represents '1' with '1367'
c Var 'aux67' order represents '1' with '1'
c Var 'aux67' order represents '0' with '-1367'
c Encoding variable: aux68 with domain: bool (representing constraint (((x_00003_00004=2) + (x_00008_00004=2) + (x_00001_00004=2) + (x_00006_00004=2) + (x_00004_00004=2) + (x_00009_00004=2) + (x_00002_00004=2) + (x_00007_00004=2) + (x_00005_00004=2))=tv=1))
c Var 'aux68' direct represents '0' with '-1368'
c Var 'aux68' direct represents '1' with '1368'
c Var 'aux68' order represents '1' with '1'
c Var 'aux68' order represents '0' with '-1368'
c Encoding variable: aux69 with domain: bool (representing constraint (((x_00003_00004=3) + (x_00008_00004=3) + (x_00001_00004=3) + (x_00006_00004=3) + (x_00004_00004=3) + (x_00009_00004=3) + (x_00002_00004=3) + (x_00007_00004=3) + (x_00005_00004=3))=tv=1))
c Var 'aux69' direct represents '0' with '-1369'
c Var 'aux69' direct represents '1' with '1369'
c Var 'aux69' order represents '1' with '1'
c Var 'aux69' order represents '0' with '-1369'
c Encoding variable: aux70 with domain: bool (representing constraint (((x_00003_00004=4) + (x_00008_00004=4) + (x_00001_00004=4) + (x_00006_00004=4) + (x_00004_00004=4) + (x_00009_00004=4) + (x_00002_00004=4) + (x_00007_00004=4) + (x_00005_00004=4))=tv=1))
c Var 'aux70' direct represents '0' with '-1370'
c Var 'aux70' direct represents '1' with '1370'
c Var 'aux70' order represents '1' with '1'
c Var 'aux70' order represents '0' with '-1370'
c Encoding variable: aux71 with domain: bool (representing constraint (((x_00003_00004=5) + (x_00008_00004=5) + (x_00001_00004=5) + (x_00006_00004=5) + (x_00004_00004=5) + (x_00009_00004=5) + (x_00002_00004=5) + (x_00007_00004=5) + (x_00005_00004=5))=tv=1))
c Var 'aux71' direct represents '0' with '-1371'
c Var 'aux71' direct represents '1' with '1371'
c Var 'aux71' order represents '1' with '1'
c Var 'aux71' order represents '0' with '-1371'
c Encoding variable: aux72 with domain: bool (representing constraint (((x_00003_00004=6) + (x_00008_00004=6) + (x_00001_00004=6) + (x_00006_00004=6) + (x_00004_00004=6) + (x_00009_00004=6) + (x_00002_00004=6) + (x_00007_00004=6) + (x_00005_00004=6))=tv=1))
c Var 'aux72' direct represents '0' with '-1372'
c Var 'aux72' direct represents '1' with '1372'
c Var 'aux72' order represents '1' with '1'
c Var 'aux72' order represents '0' with '-1372'
c Encoding variable: aux73 with domain: bool (representing constraint (((x_00003_00004=7) + (x_00008_00004=7) + (x_00001_00004=7) + (x_00006_00004=7) + (x_00004_00004=7) + (x_00009_00004=7) + (x_00002_00004=7) + (x_00007_00004=7) + (x_00005_00004=7))=tv=1))
c Var 'aux73' direct represents '0' with '-1373'
c Var 'aux73' direct represents '1' with '1373'
c Var 'aux73' order represents '1' with '1'
c Var 'aux73' order represents '0' with '-1373'
c Encoding variable: aux74 with domain: bool (representing constraint (((x_00003_00004=8) + (x_00008_00004=8) + (x_00001_00004=8) + (x_00006_00004=8) + (x_00004_00004=8) + (x_00009_00004=8) + (x_00002_00004=8) + (x_00007_00004=8) + (x_00005_00004=8))=tv=1))
c Var 'aux74' direct represents '0' with '-1374'
c Var 'aux74' direct represents '1' with '1374'
c Var 'aux74' order represents '1' with '1'
c Var 'aux74' order represents '0' with '-1374'
c Encoding variable: aux75 with domain: bool (representing constraint (((x_00003_00004=9) + (x_00008_00004=9) + (x_00001_00004=9) + (x_00006_00004=9) + (x_00004_00004=9) + (x_00009_00004=9) + (x_00002_00004=9) + (x_00007_00004=9) + (x_00005_00004=9))=tv=1))
c Var 'aux75' direct represents '0' with '-1375'
c Var 'aux75' direct represents '1' with '1375'
c Var 'aux75' order represents '1' with '1'
c Var 'aux75' order represents '0' with '-1375'
c Encoding variable: aux76 with domain: bool (representing constraint (((x_00003_00005=1) + (x_00008_00005=1) + (x_00001_00005=1) + (x_00006_00005=1) + (x_00004_00005=1) + (x_00009_00005=1) + (x_00002_00005=1) + (x_00007_00005=1) + (x_00005_00005=1))=tv=1))
c Var 'aux76' direct represents '0' with '-1376'
c Var 'aux76' direct represents '1' with '1376'
c Var 'aux76' order represents '1' with '1'
c Var 'aux76' order represents '0' with '-1376'
c Encoding variable: aux77 with domain: bool (representing constraint (((x_00003_00005=2) + (x_00008_00005=2) + (x_00001_00005=2) + (x_00006_00005=2) + (x_00004_00005=2) + (x_00009_00005=2) + (x_00002_00005=2) + (x_00007_00005=2) + (x_00005_00005=2))=tv=1))
c Var 'aux77' direct represents '0' with '-1377'
c Var 'aux77' direct represents '1' with '1377'
c Var 'aux77' order represents '1' with '1'
c Var 'aux77' order represents '0' with '-1377'
c Encoding variable: aux78 with domain: bool (representing constraint (((x_00003_00005=3) + (x_00008_00005=3) + (x_00001_00005=3) + (x_00006_00005=3) + (x_00004_00005=3) + (x_00009_00005=3) + (x_00002_00005=3) + (x_00007_00005=3) + (x_00005_00005=3))=tv=1))
c Var 'aux78' direct represents '0' with '-1378'
c Var 'aux78' direct represents '1' with '1378'
c Var 'aux78' order represents '1' with '1'
c Var 'aux78' order represents '0' with '-1378'
c Encoding variable: aux79 with domain: bool (representing constraint (((x_00003_00005=4) + (x_00008_00005=4) + (x_00001_00005=4) + (x_00006_00005=4) + (x_00004_00005=4) + (x_00009_00005=4) + (x_00002_00005=4) + (x_00007_00005=4) + (x_00005_00005=4))=tv=1))
c Var 'aux79' direct represents '0' with '-1379'
c Var 'aux79' direct represents '1' with '1379'
c Var 'aux79' order represents '1' with '1'
c Var 'aux79' order represents '0' with '-1379'
c Encoding variable: aux80 with domain: bool (representing constraint (((x_00003_00005=5) + (x_00008_00005=5) + (x_00001_00005=5) + (x_00006_00005=5) + (x_00004_00005=5) + (x_00009_00005=5) + (x_00002_00005=5) + (x_00007_00005=5) + (x_00005_00005=5))=tv=1))
c Var 'aux80' direct represents '0' with '-1380'
c Var 'aux80' direct represents '1' with '1380'
c Var 'aux80' order represents '1' with '1'
c Var 'aux80' order represents '0' with '-1380'
c Encoding variable: aux81 with domain: bool (representing constraint (((x_00003_00005=6) + (x_00008_00005=6) + (x_00001_00005=6) + (x_00006_00005=6) + (x_00004_00005=6) + (x_00009_00005=6) + (x_00002_00005=6) + (x_00007_00005=6) + (x_00005_00005=6))=tv=1))
c Var 'aux81' direct represents '0' with '-1381'
c Var 'aux81' direct represents '1' with '1381'
c Var 'aux81' order represents '1' with '1'
c Var 'aux81' order represents '0' with '-1381'
c Encoding variable: aux82 with domain: bool (representing constraint (((x_00003_00005=7) + (x_00008_00005=7) + (x_00001_00005=7) + (x_00006_00005=7) + (x_00004_00005=7) + (x_00009_00005=7) + (x_00002_00005=7) + (x_00007_00005=7) + (x_00005_00005=7))=tv=1))
c Var 'aux82' direct represents '0' with '-1382'
c Var 'aux82' direct represents '1' with '1382'
c Var 'aux82' order represents '1' with '1'
c Var 'aux82' order represents '0' with '-1382'
c Encoding variable: aux83 with domain: bool (representing constraint (((x_00003_00005=8) + (x_00008_00005=8) + (x_00001_00005=8) + (x_00006_00005=8) + (x_00004_00005=8) + (x_00009_00005=8) + (x_00002_00005=8) + (x_00007_00005=8) + (x_00005_00005=8))=tv=1))
c Var 'aux83' direct represents '0' with '-1383'
c Var 'aux83' direct represents '1' with '1383'
c Var 'aux83' order represents '1' with '1'
c Var 'aux83' order represents '0' with '-1383'
c Encoding variable: aux84 with domain: bool (representing constraint (((x_00003_00005=9) + (x_00008_00005=9) + (x_00001_00005=9) + (x_00006_00005=9) + (x_00004_00005=9) + (x_00009_00005=9) + (x_00002_00005=9) + (x_00007_00005=9) + (x_00005_00005=9))=tv=1))
c Var 'aux84' direct represents '0' with '-1384'
c Var 'aux84' direct represents '1' with '1384'
c Var 'aux84' order represents '1' with '1'
c Var 'aux84' order represents '0' with '-1384'
c Encoding variable: aux85 with domain: bool (representing constraint (((x_00003_00006=1) + (x_00008_00006=1) + (x_00001_00006=1) + (x_00006_00006=1) + (x_00004_00006=1) + (x_00009_00006=1) + (x_00002_00006=1) + (x_00007_00006=1) + (x_00005_00006=1))=tv=1))
c Var 'aux85' direct represents '0' with '-1385'
c Var 'aux85' direct represents '1' with '1385'
c Var 'aux85' order represents '1' with '1'
c Var 'aux85' order represents '0' with '-1385'
c Encoding variable: aux86 with domain: bool (representing constraint (((x_00003_00006=2) + (x_00008_00006=2) + (x_00001_00006=2) + (x_00006_00006=2) + (x_00004_00006=2) + (x_00009_00006=2) + (x_00002_00006=2) + (x_00007_00006=2) + (x_00005_00006=2))=tv=1))
c Var 'aux86' direct represents '0' with '-1386'
c Var 'aux86' direct represents '1' with '1386'
c Var 'aux86' order represents '1' with '1'
c Var 'aux86' order represents '0' with '-1386'
c Encoding variable: aux87 with domain: bool (representing constraint (((x_00003_00006=3) + (x_00008_00006=3) + (x_00001_00006=3) + (x_00006_00006=3) + (x_00004_00006=3) + (x_00009_00006=3) + (x_00002_00006=3) + (x_00007_00006=3) + (x_00005_00006=3))=tv=1))
c Var 'aux87' direct represents '0' with '-1387'
c Var 'aux87' direct represents '1' with '1387'
c Var 'aux87' order represents '1' with '1'
c Var 'aux87' order represents '0' with '-1387'
c Encoding variable: aux88 with domain: bool (representing constraint (((x_00003_00006=4) + (x_00008_00006=4) + (x_00001_00006=4) + (x_00006_00006=4) + (x_00004_00006=4) + (x_00009_00006=4) + (x_00002_00006=4) + (x_00007_00006=4) + (x_00005_00006=4))=tv=1))
c Var 'aux88' direct represents '0' with '-1388'
c Var 'aux88' direct represents '1' with '1388'
c Var 'aux88' order represents '1' with '1'
c Var 'aux88' order represents '0' with '-1388'
c Encoding variable: aux89 with domain: bool (representing constraint (((x_00003_00006=5) + (x_00008_00006=5) + (x_00001_00006=5) + (x_00006_00006=5) + (x_00004_00006=5) + (x_00009_00006=5) + (x_00002_00006=5) + (x_00007_00006=5) + (x_00005_00006=5))=tv=1))
c Var 'aux89' direct represents '0' with '-1389'
c Var 'aux89' direct represents '1' with '1389'
c Var 'aux89' order represents '1' with '1'
c Var 'aux89' order represents '0' with '-1389'
c Encoding variable: aux90 with domain: bool (representing constraint (((x_00003_00006=6) + (x_00008_00006=6) + (x_00001_00006=6) + (x_00006_00006=6) + (x_00004_00006=6) + (x_00009_00006=6) + (x_00002_00006=6) + (x_00007_00006=6) + (x_00005_00006=6))=tv=1))
c Var 'aux90' direct represents '0' with '-1390'
c Var 'aux90' direct represents '1' with '1390'
c Var 'aux90' order represents '1' with '1'
c Var 'aux90' order represents '0' with '-1390'
c Encoding variable: aux91 with domain: bool (representing constraint (((x_00003_00006=7) + (x_00008_00006=7) + (x_00001_00006=7) + (x_00006_00006=7) + (x_00004_00006=7) + (x_00009_00006=7) + (x_00002_00006=7) + (x_00007_00006=7) + (x_00005_00006=7))=tv=1))
c Var 'aux91' direct represents '0' with '-1391'
c Var 'aux91' direct represents '1' with '1391'
c Var 'aux91' order represents '1' with '1'
c Var 'aux91' order represents '0' with '-1391'
c Encoding variable: aux92 with domain: bool (representing constraint (((x_00003_00006=8) + (x_00008_00006=8) + (x_00001_00006=8) + (x_00006_00006=8) + (x_00004_00006=8) + (x_00009_00006=8) + (x_00002_00006=8) + (x_00007_00006=8) + (x_00005_00006=8))=tv=1))
c Var 'aux92' direct represents '0' with '-1392'
c Var 'aux92' direct represents '1' with '1392'
c Var 'aux92' order represents '1' with '1'
c Var 'aux92' order represents '0' with '-1392'
c Encoding variable: aux93 with domain: bool (representing constraint (((x_00003_00006=9) + (x_00008_00006=9) + (x_00001_00006=9) + (x_00006_00006=9) + (x_00004_00006=9) + (x_00009_00006=9) + (x_00002_00006=9) + (x_00007_00006=9) + (x_00005_00006=9))=tv=1))
c Var 'aux93' direct represents '0' with '-1393'
c Var 'aux93' direct represents '1' with '1393'
c Var 'aux93' order represents '1' with '1'
c Var 'aux93' order represents '0' with '-1393'
c Encoding variable: aux94 with domain: bool (representing constraint (((x_00003_00007=1) + (x_00008_00007=1) + (x_00001_00007=1) + (x_00006_00007=1) + (x_00004_00007=1) + (x_00009_00007=1) + (x_00002_00007=1) + (x_00007_00007=1) + (x_00005_00007=1))=tv=1))
c Var 'aux94' direct represents '0' with '-1394'
c Var 'aux94' direct represents '1' with '1394'
c Var 'aux94' order represents '1' with '1'
c Var 'aux94' order represents '0' with '-1394'
c Encoding variable: aux95 with domain: bool (representing constraint (((x_00003_00007=2) + (x_00008_00007=2) + (x_00001_00007=2) + (x_00006_00007=2) + (x_00004_00007=2) + (x_00009_00007=2) + (x_00002_00007=2) + (x_00007_00007=2) + (x_00005_00007=2))=tv=1))
c Var 'aux95' direct represents '0' with '-1395'
c Var 'aux95' direct represents '1' with '1395'
c Var 'aux95' order represents '1' with '1'
c Var 'aux95' order represents '0' with '-1395'
c Encoding variable: aux96 with domain: bool (representing constraint (((x_00003_00007=3) + (x_00008_00007=3) + (x_00001_00007=3) + (x_00006_00007=3) + (x_00004_00007=3) + (x_00009_00007=3) + (x_00002_00007=3) + (x_00007_00007=3) + (x_00005_00007=3))=tv=1))
c Var 'aux96' direct represents '0' with '-1396'
c Var 'aux96' direct represents '1' with '1396'
c Var 'aux96' order represents '1' with '1'
c Var 'aux96' order represents '0' with '-1396'
c Encoding variable: aux97 with domain: bool (representing constraint (((x_00003_00007=4) + (x_00008_00007=4) + (x_00001_00007=4) + (x_00006_00007=4) + (x_00004_00007=4) + (x_00009_00007=4) + (x_00002_00007=4) + (x_00007_00007=4) + (x_00005_00007=4))=tv=1))
c Var 'aux97' direct represents '0' with '-1397'
c Var 'aux97' direct represents '1' with '1397'
c Var 'aux97' order represents '1' with '1'
c Var 'aux97' order represents '0' with '-1397'
c Encoding variable: aux98 with domain: bool (representing constraint (((x_00003_00007=5) + (x_00008_00007=5) + (x_00001_00007=5) + (x_00006_00007=5) + (x_00004_00007=5) + (x_00009_00007=5) + (x_00002_00007=5) + (x_00007_00007=5) + (x_00005_00007=5))=tv=1))
c Var 'aux98' direct represents '0' with '-1398'
c Var 'aux98' direct represents '1' with '1398'
c Var 'aux98' order represents '1' with '1'
c Var 'aux98' order represents '0' with '-1398'
c Encoding variable: aux99 with domain: bool (representing constraint (((x_00003_00007=6) + (x_00008_00007=6) + (x_00001_00007=6) + (x_00006_00007=6) + (x_00004_00007=6) + (x_00009_00007=6) + (x_00002_00007=6) + (x_00007_00007=6) + (x_00005_00007=6))=tv=1))
c Var 'aux99' direct represents '0' with '-1399'
c Var 'aux99' direct represents '1' with '1399'
c Var 'aux99' order represents '1' with '1'
c Var 'aux99' order represents '0' with '-1399'
c Encoding variable: aux100 with domain: bool (representing constraint (((x_00003_00007=7) + (x_00008_00007=7) + (x_00001_00007=7) + (x_00006_00007=7) + (x_00004_00007=7) + (x_00009_00007=7) + (x_00002_00007=7) + (x_00007_00007=7) + (x_00005_00007=7))=tv=1))
c Var 'aux100' direct represents '0' with '-1400'
c Var 'aux100' direct represents '1' with '1400'
c Var 'aux100' order represents '1' with '1'
c Var 'aux100' order represents '0' with '-1400'
c Encoding variable: aux101 with domain: bool (representing constraint (((x_00003_00007=8) + (x_00008_00007=8) + (x_00001_00007=8) + (x_00006_00007=8) + (x_00004_00007=8) + (x_00009_00007=8) + (x_00002_00007=8) + (x_00007_00007=8) + (x_00005_00007=8))=tv=1))
c Var 'aux101' direct represents '0' with '-1401'
c Var 'aux101' direct represents '1' with '1401'
c Var 'aux101' order represents '1' with '1'
c Var 'aux101' order represents '0' with '-1401'
c Encoding variable: aux102 with domain: bool (representing constraint (((x_00003_00007=9) + (x_00008_00007=9) + (x_00001_00007=9) + (x_00006_00007=9) + (x_00004_00007=9) + (x_00009_00007=9) + (x_00002_00007=9) + (x_00007_00007=9) + (x_00005_00007=9))=tv=1))
c Var 'aux102' direct represents '0' with '-1402'
c Var 'aux102' direct represents '1' with '1402'
c Var 'aux102' order represents '1' with '1'
c Var 'aux102' order represents '0' with '-1402'
c Encoding variable: aux103 with domain: bool (representing constraint (((x_00003_00008=1) + (x_00008_00008=1) + (x_00001_00008=1) + (x_00006_00008=1) + (x_00004_00008=1) + (x_00009_00008=1) + (x_00002_00008=1) + (x_00007_00008=1) + (x_00005_00008=1))=tv=1))
c Var 'aux103' direct represents '0' with '-1403'
c Var 'aux103' direct represents '1' with '1403'
c Var 'aux103' order represents '1' with '1'
c Var 'aux103' order represents '0' with '-1403'
c Encoding variable: aux104 with domain: bool (representing constraint (((x_00003_00008=2) + (x_00008_00008=2) + (x_00001_00008=2) + (x_00006_00008=2) + (x_00004_00008=2) + (x_00009_00008=2) + (x_00002_00008=2) + (x_00007_00008=2) + (x_00005_00008=2))=tv=1))
c Var 'aux104' direct represents '0' with '-1404'
c Var 'aux104' direct represents '1' with '1404'
c Var 'aux104' order represents '1' with '1'
c Var 'aux104' order represents '0' with '-1404'
c Encoding variable: aux105 with domain: bool (representing constraint (((x_00003_00008=3) + (x_00008_00008=3) + (x_00001_00008=3) + (x_00006_00008=3) + (x_00004_00008=3) + (x_00009_00008=3) + (x_00002_00008=3) + (x_00007_00008=3) + (x_00005_00008=3))=tv=1))
c Var 'aux105' direct represents '0' with '-1405'
c Var 'aux105' direct represents '1' with '1405'
c Var 'aux105' order represents '1' with '1'
c Var 'aux105' order represents '0' with '-1405'
c Encoding variable: aux106 with domain: bool (representing constraint (((x_00003_00008=4) + (x_00008_00008=4) + (x_00001_00008=4) + (x_00006_00008=4) + (x_00004_00008=4) + (x_00009_00008=4) + (x_00002_00008=4) + (x_00007_00008=4) + (x_00005_00008=4))=tv=1))
c Var 'aux106' direct represents '0' with '-1406'
c Var 'aux106' direct represents '1' with '1406'
c Var 'aux106' order represents '1' with '1'
c Var 'aux106' order represents '0' with '-1406'
c Encoding variable: aux107 with domain: bool (representing constraint (((x_00003_00008=5) + (x_00008_00008=5) + (x_00001_00008=5) + (x_00006_00008=5) + (x_00004_00008=5) + (x_00009_00008=5) + (x_00002_00008=5) + (x_00007_00008=5) + (x_00005_00008=5))=tv=1))
c Var 'aux107' direct represents '0' with '-1407'
c Var 'aux107' direct represents '1' with '1407'
c Var 'aux107' order represents '1' with '1'
c Var 'aux107' order represents '0' with '-1407'
c Encoding variable: aux108 with domain: bool (representing constraint (((x_00003_00008=6) + (x_00008_00008=6) + (x_00001_00008=6) + (x_00006_00008=6) + (x_00004_00008=6) + (x_00009_00008=6) + (x_00002_00008=6) + (x_00007_00008=6) + (x_00005_00008=6))=tv=1))
c Var 'aux108' direct represents '0' with '-1408'
c Var 'aux108' direct represents '1' with '1408'
c Var 'aux108' order represents '1' with '1'
c Var 'aux108' order represents '0' with '-1408'
c Encoding variable: aux109 with domain: bool (representing constraint (((x_00003_00008=7) + (x_00008_00008=7) + (x_00001_00008=7) + (x_00006_00008=7) + (x_00004_00008=7) + (x_00009_00008=7) + (x_00002_00008=7) + (x_00007_00008=7) + (x_00005_00008=7))=tv=1))
c Var 'aux109' direct represents '0' with '-1409'
c Var 'aux109' direct represents '1' with '1409'
c Var 'aux109' order represents '1' with '1'
c Var 'aux109' order represents '0' with '-1409'
c Encoding variable: aux110 with domain: bool (representing constraint (((x_00003_00008=8) + (x_00008_00008=8) + (x_00001_00008=8) + (x_00006_00008=8) + (x_00004_00008=8) + (x_00009_00008=8) + (x_00002_00008=8) + (x_00007_00008=8) + (x_00005_00008=8))=tv=1))
c Var 'aux110' direct represents '0' with '-1410'
c Var 'aux110' direct represents '1' with '1410'
c Var 'aux110' order represents '1' with '1'
c Var 'aux110' order represents '0' with '-1410'
c Encoding variable: aux111 with domain: bool (representing constraint (((x_00003_00008=9) + (x_00008_00008=9) + (x_00001_00008=9) + (x_00006_00008=9) + (x_00004_00008=9) + (x_00009_00008=9) + (x_00002_00008=9) + (x_00007_00008=9) + (x_00005_00008=9))=tv=1))
c Var 'aux111' direct represents '0' with '-1411'
c Var 'aux111' direct represents '1' with '1411'
c Var 'aux111' order represents '1' with '1'
c Var 'aux111' order represents '0' with '-1411'
c Encoding variable: aux112 with domain: bool (representing constraint (((x_00003_00009=1) + (x_00008_00009=1) + (x_00001_00009=1) + (x_00006_00009=1) + (x_00004_00009=1) + (x_00009_00009=1) + (x_00002_00009=1) + (x_00007_00009=1) + (x_00005_00009=1))=tv=1))
c Var 'aux112' direct represents '0' with '-1412'
c Var 'aux112' direct represents '1' with '1412'
c Var 'aux112' order represents '1' with '1'
c Var 'aux112' order represents '0' with '-1412'
c Encoding variable: aux113 with domain: bool (representing constraint (((x_00003_00009=2) + (x_00008_00009=2) + (x_00001_00009=2) + (x_00006_00009=2) + (x_00004_00009=2) + (x_00009_00009=2) + (x_00002_00009=2) + (x_00007_00009=2) + (x_00005_00009=2))=tv=1))
c Var 'aux113' direct represents '0' with '-1413'
c Var 'aux113' direct represents '1' with '1413'
c Var 'aux113' order represents '1' with '1'
c Var 'aux113' order represents '0' with '-1413'
c Encoding variable: aux114 with domain: bool (representing constraint (((x_00003_00009=3) + (x_00008_00009=3) + (x_00001_00009=3) + (x_00006_00009=3) + (x_00004_00009=3) + (x_00009_00009=3) + (x_00002_00009=3) + (x_00007_00009=3) + (x_00005_00009=3))=tv=1))
c Var 'aux114' direct represents '0' with '-1414'
c Var 'aux114' direct represents '1' with '1414'
c Var 'aux114' order represents '1' with '1'
c Var 'aux114' order represents '0' with '-1414'
c Encoding variable: aux115 with domain: bool (representing constraint (((x_00003_00009=4) + (x_00008_00009=4) + (x_00001_00009=4) + (x_00006_00009=4) + (x_00004_00009=4) + (x_00009_00009=4) + (x_00002_00009=4) + (x_00007_00009=4) + (x_00005_00009=4))=tv=1))
c Var 'aux115' direct represents '0' with '-1415'
c Var 'aux115' direct represents '1' with '1415'
c Var 'aux115' order represents '1' with '1'
c Var 'aux115' order represents '0' with '-1415'
c Encoding variable: aux116 with domain: bool (representing constraint (((x_00003_00009=5) + (x_00008_00009=5) + (x_00001_00009=5) + (x_00006_00009=5) + (x_00004_00009=5) + (x_00009_00009=5) + (x_00002_00009=5) + (x_00007_00009=5) + (x_00005_00009=5))=tv=1))
c Var 'aux116' direct represents '0' with '-1416'
c Var 'aux116' direct represents '1' with '1416'
c Var 'aux116' order represents '1' with '1'
c Var 'aux116' order represents '0' with '-1416'
c Encoding variable: aux117 with domain: bool (representing constraint (((x_00003_00009=6) + (x_00008_00009=6) + (x_00001_00009=6) + (x_00006_00009=6) + (x_00004_00009=6) + (x_00009_00009=6) + (x_00002_00009=6) + (x_00007_00009=6) + (x_00005_00009=6))=tv=1))
c Var 'aux117' direct represents '0' with '-1417'
c Var 'aux117' direct represents '1' with '1417'
c Var 'aux117' order represents '1' with '1'
c Var 'aux117' order represents '0' with '-1417'
c Encoding variable: aux118 with domain: bool (representing constraint (((x_00003_00009=7) + (x_00008_00009=7) + (x_00001_00009=7) + (x_00006_00009=7) + (x_00004_00009=7) + (x_00009_00009=7) + (x_00002_00009=7) + (x_00007_00009=7) + (x_00005_00009=7))=tv=1))
c Var 'aux118' direct represents '0' with '-1418'
c Var 'aux118' direct represents '1' with '1418'
c Var 'aux118' order represents '1' with '1'
c Var 'aux118' order represents '0' with '-1418'
c Encoding variable: aux119 with domain: bool (representing constraint (((x_00003_00009=8) + (x_00008_00009=8) + (x_00001_00009=8) + (x_00006_00009=8) + (x_00004_00009=8) + (x_00009_00009=8) + (x_00002_00009=8) + (x_00007_00009=8) + (x_00005_00009=8))=tv=1))
c Var 'aux119' direct represents '0' with '-1419'
c Var 'aux119' direct represents '1' with '1419'
c Var 'aux119' order represents '1' with '1'
c Var 'aux119' order represents '0' with '-1419'
c Encoding variable: aux120 with domain: bool (representing constraint (((x_00003_00009=9) + (x_00008_00009=9) + (x_00001_00009=9) + (x_00006_00009=9) + (x_00004_00009=9) + (x_00009_00009=9) + (x_00002_00009=9) + (x_00007_00009=9) + (x_00005_00009=9))=tv=1))
c Var 'aux120' direct represents '0' with '-1420'
c Var 'aux120' direct represents '1' with '1420'
c Var 'aux120' order represents '1' with '1'
c Var 'aux120' order represents '0' with '-1420'
c Encoding variable: aux121 with domain: bool (representing constraint (((x_00001_00001=1) + (x_00001_00002=1) + (x_00001_00003=1) + (x_00001_00004=1) + (x_00001_00005=1) + (x_00001_00006=1) + (x_00001_00007=1) + (x_00001_00008=1) + (x_00001_00009=1))=tv=1))
c Var 'aux121' direct represents '0' with '-1421'
c Var 'aux121' direct represents '1' with '1421'
c Var 'aux121' order represents '1' with '1'
c Var 'aux121' order represents '0' with '-1421'
c Encoding variable: aux122 with domain: bool (representing constraint (((x_00001_00001=2) + (x_00001_00002=2) + (x_00001_00003=2) + (x_00001_00004=2) + (x_00001_00005=2) + (x_00001_00006=2) + (x_00001_00007=2) + (x_00001_00008=2) + (x_00001_00009=2))=tv=1))
c Var 'aux122' direct represents '0' with '-1422'
c Var 'aux122' direct represents '1' with '1422'
c Var 'aux122' order represents '1' with '1'
c Var 'aux122' order represents '0' with '-1422'
c Encoding variable: aux123 with domain: bool (representing constraint (((x_00001_00001=3) + (x_00001_00002=3) + (x_00001_00003=3) + (x_00001_00004=3) + (x_00001_00005=3) + (x_00001_00006=3) + (x_00001_00007=3) + (x_00001_00008=3) + (x_00001_00009=3))=tv=1))
c Var 'aux123' direct represents '0' with '-1423'
c Var 'aux123' direct represents '1' with '1423'
c Var 'aux123' order represents '1' with '1'
c Var 'aux123' order represents '0' with '-1423'
c Encoding variable: aux124 with domain: bool (representing constraint (((x_00001_00001=4) + (x_00001_00002=4) + (x_00001_00003=4) + (x_00001_00004=4) + (x_00001_00005=4) + (x_00001_00006=4) + (x_00001_00007=4) + (x_00001_00008=4) + (x_00001_00009=4))=tv=1))
c Var 'aux124' direct represents '0' with '-1424'
c Var 'aux124' direct represents '1' with '1424'
c Var 'aux124' order represents '1' with '1'
c Var 'aux124' order represents '0' with '-1424'
c Encoding variable: aux125 with domain: bool (representing constraint (((x_00001_00001=5) + (x_00001_00002=5) + (x_00001_00003=5) + (x_00001_00004=5) + (x_00001_00005=5) + (x_00001_00006=5) + (x_00001_00007=5) + (x_00001_00008=5) + (x_00001_00009=5))=tv=1))
c Var 'aux125' direct represents '0' with '-1425'
c Var 'aux125' direct represents '1' with '1425'
c Var 'aux125' order represents '1' with '1'
c Var 'aux125' order represents '0' with '-1425'
c Encoding variable: aux126 with domain: bool (representing constraint (((x_00001_00001=6) + (x_00001_00002=6) + (x_00001_00003=6) + (x_00001_00004=6) + (x_00001_00005=6) + (x_00001_00006=6) + (x_00001_00007=6) + (x_00001_00008=6) + (x_00001_00009=6))=tv=1))
c Var 'aux126' direct represents '0' with '-1426'
c Var 'aux126' direct represents '1' with '1426'
c Var 'aux126' order represents '1' with '1'
c Var 'aux126' order represents '0' with '-1426'
c Encoding variable: aux127 with domain: bool (representing constraint (((x_00001_00001=7) + (x_00001_00002=7) + (x_00001_00003=7) + (x_00001_00004=7) + (x_00001_00005=7) + (x_00001_00006=7) + (x_00001_00007=7) + (x_00001_00008=7) + (x_00001_00009=7))=tv=1))
c Var 'aux127' direct represents '0' with '-1427'
c Var 'aux127' direct represents '1' with '1427'
c Var 'aux127' order represents '1' with '1'
c Var 'aux127' order represents '0' with '-1427'
c Encoding variable: aux128 with domain: bool (representing constraint (((x_00001_00001=8) + (x_00001_00002=8) + (x_00001_00003=8) + (x_00001_00004=8) + (x_00001_00005=8) + (x_00001_00006=8) + (x_00001_00007=8) + (x_00001_00008=8) + (x_00001_00009=8))=tv=1))
c Var 'aux128' direct represents '0' with '-1428'
c Var 'aux128' direct represents '1' with '1428'
c Var 'aux128' order represents '1' with '1'
c Var 'aux128' order represents '0' with '-1428'
c Encoding variable: aux129 with domain: bool (representing constraint (((x_00001_00001=9) + (x_00001_00002=9) + (x_00001_00003=9) + (x_00001_00004=9) + (x_00001_00005=9) + (x_00001_00006=9) + (x_00001_00007=9) + (x_00001_00008=9) + (x_00001_00009=9))=tv=1))
c Var 'aux129' direct represents '0' with '-1429'
c Var 'aux129' direct represents '1' with '1429'
c Var 'aux129' order represents '1' with '1'
c Var 'aux129' order represents '0' with '-1429'
c Encoding variable: aux130 with domain: bool (representing constraint (((x_00002_00001=1) + (x_00002_00002=1) + (x_00002_00003=1) + (x_00002_00004=1) + (x_00002_00005=1) + (x_00002_00006=1) + (x_00002_00007=1) + (x_00002_00008=1) + (x_00002_00009=1))=tv=1))
c Var 'aux130' direct represents '0' with '-1430'
c Var 'aux130' direct represents '1' with '1430'
c Var 'aux130' order represents '1' with '1'
c Var 'aux130' order represents '0' with '-1430'
c Encoding variable: aux131 with domain: bool (representing constraint (((x_00002_00001=2) + (x_00002_00002=2) + (x_00002_00003=2) + (x_00002_00004=2) + (x_00002_00005=2) + (x_00002_00006=2) + (x_00002_00007=2) + (x_00002_00008=2) + (x_00002_00009=2))=tv=1))
c Var 'aux131' direct represents '0' with '-1431'
c Var 'aux131' direct represents '1' with '1431'
c Var 'aux131' order represents '1' with '1'
c Var 'aux131' order represents '0' with '-1431'
c Encoding variable: aux132 with domain: bool (representing constraint (((x_00002_00001=3) + (x_00002_00002=3) + (x_00002_00003=3) + (x_00002_00004=3) + (x_00002_00005=3) + (x_00002_00006=3) + (x_00002_00007=3) + (x_00002_00008=3) + (x_00002_00009=3))=tv=1))
c Var 'aux132' direct represents '0' with '-1432'
c Var 'aux132' direct represents '1' with '1432'
c Var 'aux132' order represents '1' with '1'
c Var 'aux132' order represents '0' with '-1432'
c Encoding variable: aux133 with domain: bool (representing constraint (((x_00002_00001=4) + (x_00002_00002=4) + (x_00002_00003=4) + (x_00002_00004=4) + (x_00002_00005=4) + (x_00002_00006=4) + (x_00002_00007=4) + (x_00002_00008=4) + (x_00002_00009=4))=tv=1))
c Var 'aux133' direct represents '0' with '-1433'
c Var 'aux133' direct represents '1' with '1433'
c Var 'aux133' order represents '1' with '1'
c Var 'aux133' order represents '0' with '-1433'
c Encoding variable: aux134 with domain: bool (representing constraint (((x_00002_00001=5) + (x_00002_00002=5) + (x_00002_00003=5) + (x_00002_00004=5) + (x_00002_00005=5) + (x_00002_00006=5) + (x_00002_00007=5) + (x_00002_00008=5) + (x_00002_00009=5))=tv=1))
c Var 'aux134' direct represents '0' with '-1434'
c Var 'aux134' direct represents '1' with '1434'
c Var 'aux134' order represents '1' with '1'
c Var 'aux134' order represents '0' with '-1434'
c Encoding variable: aux135 with domain: bool (representing constraint (((x_00002_00001=6) + (x_00002_00002=6) + (x_00002_00003=6) + (x_00002_00004=6) + (x_00002_00005=6) + (x_00002_00006=6) + (x_00002_00007=6) + (x_00002_00008=6) + (x_00002_00009=6))=tv=1))
c Var 'aux135' direct represents '0' with '-1435'
c Var 'aux135' direct represents '1' with '1435'
c Var 'aux135' order represents '1' with '1'
c Var 'aux135' order represents '0' with '-1435'
c Encoding variable: aux136 with domain: bool (representing constraint (((x_00002_00001=7) + (x_00002_00002=7) + (x_00002_00003=7) + (x_00002_00004=7) + (x_00002_00005=7) + (x_00002_00006=7) + (x_00002_00007=7) + (x_00002_00008=7) + (x_00002_00009=7))=tv=1))
c Var 'aux136' direct represents '0' with '-1436'
c Var 'aux136' direct represents '1' with '1436'
c Var 'aux136' order represents '1' with '1'
c Var 'aux136' order represents '0' with '-1436'
c Encoding variable: aux137 with domain: bool (representing constraint (((x_00002_00001=8) + (x_00002_00002=8) + (x_00002_00003=8) + (x_00002_00004=8) + (x_00002_00005=8) + (x_00002_00006=8) + (x_00002_00007=8) + (x_00002_00008=8) + (x_00002_00009=8))=tv=1))
c Var 'aux137' direct represents '0' with '-1437'
c Var 'aux137' direct represents '1' with '1437'
c Var 'aux137' order represents '1' with '1'
c Var 'aux137' order represents '0' with '-1437'
c Encoding variable: aux138 with domain: bool (representing constraint (((x_00002_00001=9) + (x_00002_00002=9) + (x_00002_00003=9) + (x_00002_00004=9) + (x_00002_00005=9) + (x_00002_00006=9) + (x_00002_00007=9) + (x_00002_00008=9) + (x_00002_00009=9))=tv=1))
c Var 'aux138' direct represents '0' with '-1438'
c Var 'aux138' direct represents '1' with '1438'
c Var 'aux138' order represents '1' with '1'
c Var 'aux138' order represents '0' with '-1438'
c Encoding variable: aux139 with domain: bool (representing constraint (((x_00003_00001=1) + (x_00003_00002=1) + (x_00003_00003=1) + (x_00003_00004=1) + (x_00003_00005=1) + (x_00003_00006=1) + (x_00003_00007=1) + (x_00003_00008=1) + (x_00003_00009=1))=tv=1))
c Var 'aux139' direct represents '0' with '-1439'
c Var 'aux139' direct represents '1' with '1439'
c Var 'aux139' order represents '1' with '1'
c Var 'aux139' order represents '0' with '-1439'
c Encoding variable: aux140 with domain: bool (representing constraint (((x_00003_00001=2) + (x_00003_00002=2) + (x_00003_00003=2) + (x_00003_00004=2) + (x_00003_00005=2) + (x_00003_00006=2) + (x_00003_00007=2) + (x_00003_00008=2) + (x_00003_00009=2))=tv=1))
c Var 'aux140' direct represents '0' with '-1440'
c Var 'aux140' direct represents '1' with '1440'
c Var 'aux140' order represents '1' with '1'
c Var 'aux140' order represents '0' with '-1440'
c Encoding variable: aux141 with domain: bool (representing constraint (((x_00003_00001=3) + (x_00003_00002=3) + (x_00003_00003=3) + (x_00003_00004=3) + (x_00003_00005=3) + (x_00003_00006=3) + (x_00003_00007=3) + (x_00003_00008=3) + (x_00003_00009=3))=tv=1))
c Var 'aux141' direct represents '0' with '-1441'
c Var 'aux141' direct represents '1' with '1441'
c Var 'aux141' order represents '1' with '1'
c Var 'aux141' order represents '0' with '-1441'
c Encoding variable: aux142 with domain: bool (representing constraint (((x_00003_00001=4) + (x_00003_00002=4) + (x_00003_00003=4) + (x_00003_00004=4) + (x_00003_00005=4) + (x_00003_00006=4) + (x_00003_00007=4) + (x_00003_00008=4) + (x_00003_00009=4))=tv=1))
c Var 'aux142' direct represents '0' with '-1442'
c Var 'aux142' direct represents '1' with '1442'
c Var 'aux142' order represents '1' with '1'
c Var 'aux142' order represents '0' with '-1442'
c Encoding variable: aux143 with domain: bool (representing constraint (((x_00003_00001=5) + (x_00003_00002=5) + (x_00003_00003=5) + (x_00003_00004=5) + (x_00003_00005=5) + (x_00003_00006=5) + (x_00003_00007=5) + (x_00003_00008=5) + (x_00003_00009=5))=tv=1))
c Var 'aux143' direct represents '0' with '-1443'
c Var 'aux143' direct represents '1' with '1443'
c Var 'aux143' order represents '1' with '1'
c Var 'aux143' order represents '0' with '-1443'
c Encoding variable: aux144 with domain: bool (representing constraint (((x_00003_00001=6) + (x_00003_00002=6) + (x_00003_00003=6) + (x_00003_00004=6) + (x_00003_00005=6) + (x_00003_00006=6) + (x_00003_00007=6) + (x_00003_00008=6) + (x_00003_00009=6))=tv=1))
c Var 'aux144' direct represents '0' with '-1444'
c Var 'aux144' direct represents '1' with '1444'
c Var 'aux144' order represents '1' with '1'
c Var 'aux144' order represents '0' with '-1444'
c Encoding variable: aux145 with domain: bool (representing constraint (((x_00003_00001=7) + (x_00003_00002=7) + (x_00003_00003=7) + (x_00003_00004=7) + (x_00003_00005=7) + (x_00003_00006=7) + (x_00003_00007=7) + (x_00003_00008=7) + (x_00003_00009=7))=tv=1))
c Var 'aux145' direct represents '0' with '-1445'
c Var 'aux145' direct represents '1' with '1445'
c Var 'aux145' order represents '1' with '1'
c Var 'aux145' order represents '0' with '-1445'
c Encoding variable: aux146 with domain: bool (representing constraint (((x_00003_00001=8) + (x_00003_00002=8) + (x_00003_00003=8) + (x_00003_00004=8) + (x_00003_00005=8) + (x_00003_00006=8) + (x_00003_00007=8) + (x_00003_00008=8) + (x_00003_00009=8))=tv=1))
c Var 'aux146' direct represents '0' with '-1446'
c Var 'aux146' direct represents '1' with '1446'
c Var 'aux146' order represents '1' with '1'
c Var 'aux146' order represents '0' with '-1446'
c Encoding variable: aux147 with domain: bool (representing constraint (((x_00003_00001=9) + (x_00003_00002=9) + (x_00003_00003=9) + (x_00003_00004=9) + (x_00003_00005=9) + (x_00003_00006=9) + (x_00003_00007=9) + (x_00003_00008=9) + (x_00003_00009=9))=tv=1))
c Var 'aux147' direct represents '0' with '-1447'
c Var 'aux147' direct represents '1' with '1447'
c Var 'aux147' order represents '1' with '1'
c Var 'aux147' order represents '0' with '-1447'
c Encoding variable: aux148 with domain: bool (representing constraint (((x_00004_00001=1) + (x_00004_00002=1) + (x_00004_00003=1) + (x_00004_00004=1) + (x_00004_00005=1) + (x_00004_00006=1) + (x_00004_00007=1) + (x_00004_00008=1) + (x_00004_00009=1))=tv=1))
c Var 'aux148' direct represents '0' with '-1448'
c Var 'aux148' direct represents '1' with '1448'
c Var 'aux148' order represents '1' with '1'
c Var 'aux148' order represents '0' with '-1448'
c Encoding variable: aux149 with domain: bool (representing constraint (((x_00004_00001=2) + (x_00004_00002=2) + (x_00004_00003=2) + (x_00004_00004=2) + (x_00004_00005=2) + (x_00004_00006=2) + (x_00004_00007=2) + (x_00004_00008=2) + (x_00004_00009=2))=tv=1))
c Var 'aux149' direct represents '0' with '-1449'
c Var 'aux149' direct represents '1' with '1449'
c Var 'aux149' order represents '1' with '1'
c Var 'aux149' order represents '0' with '-1449'
c Encoding variable: aux150 with domain: bool (representing constraint (((x_00004_00001=3) + (x_00004_00002=3) + (x_00004_00003=3) + (x_00004_00004=3) + (x_00004_00005=3) + (x_00004_00006=3) + (x_00004_00007=3) + (x_00004_00008=3) + (x_00004_00009=3))=tv=1))
c Var 'aux150' direct represents '0' with '-1450'
c Var 'aux150' direct represents '1' with '1450'
c Var 'aux150' order represents '1' with '1'
c Var 'aux150' order represents '0' with '-1450'
c Encoding variable: aux151 with domain: bool (representing constraint (((x_00004_00001=4) + (x_00004_00002=4) + (x_00004_00003=4) + (x_00004_00004=4) + (x_00004_00005=4) + (x_00004_00006=4) + (x_00004_00007=4) + (x_00004_00008=4) + (x_00004_00009=4))=tv=1))
c Var 'aux151' direct represents '0' with '-1451'
c Var 'aux151' direct represents '1' with '1451'
c Var 'aux151' order represents '1' with '1'
c Var 'aux151' order represents '0' with '-1451'
c Encoding variable: aux152 with domain: bool (representing constraint (((x_00004_00001=5) + (x_00004_00002=5) + (x_00004_00003=5) + (x_00004_00004=5) + (x_00004_00005=5) + (x_00004_00006=5) + (x_00004_00007=5) + (x_00004_00008=5) + (x_00004_00009=5))=tv=1))
c Var 'aux152' direct represents '0' with '-1452'
c Var 'aux152' direct represents '1' with '1452'
c Var 'aux152' order represents '1' with '1'
c Var 'aux152' order represents '0' with '-1452'
c Encoding variable: aux153 with domain: bool (representing constraint (((x_00004_00001=6) + (x_00004_00002=6) + (x_00004_00003=6) + (x_00004_00004=6) + (x_00004_00005=6) + (x_00004_00006=6) + (x_00004_00007=6) + (x_00004_00008=6) + (x_00004_00009=6))=tv=1))
c Var 'aux153' direct represents '0' with '-1453'
c Var 'aux153' direct represents '1' with '1453'
c Var 'aux153' order represents '1' with '1'
c Var 'aux153' order represents '0' with '-1453'
c Encoding variable: aux154 with domain: bool (representing constraint (((x_00004_00001=7) + (x_00004_00002=7) + (x_00004_00003=7) + (x_00004_00004=7) + (x_00004_00005=7) + (x_00004_00006=7) + (x_00004_00007=7) + (x_00004_00008=7) + (x_00004_00009=7))=tv=1))
c Var 'aux154' direct represents '0' with '-1454'
c Var 'aux154' direct represents '1' with '1454'
c Var 'aux154' order represents '1' with '1'
c Var 'aux154' order represents '0' with '-1454'
c Encoding variable: aux155 with domain: bool (representing constraint (((x_00004_00001=8) + (x_00004_00002=8) + (x_00004_00003=8) + (x_00004_00004=8) + (x_00004_00005=8) + (x_00004_00006=8) + (x_00004_00007=8) + (x_00004_00008=8) + (x_00004_00009=8))=tv=1))
c Var 'aux155' direct represents '0' with '-1455'
c Var 'aux155' direct represents '1' with '1455'
c Var 'aux155' order represents '1' with '1'
c Var 'aux155' order represents '0' with '-1455'
c Encoding variable: aux156 with domain: bool (representing constraint (((x_00004_00001=9) + (x_00004_00002=9) + (x_00004_00003=9) + (x_00004_00004=9) + (x_00004_00005=9) + (x_00004_00006=9) + (x_00004_00007=9) + (x_00004_00008=9) + (x_00004_00009=9))=tv=1))
c Var 'aux156' direct represents '0' with '-1456'
c Var 'aux156' direct represents '1' with '1456'
c Var 'aux156' order represents '1' with '1'
c Var 'aux156' order represents '0' with '-1456'
c Encoding variable: aux157 with domain: bool (representing constraint (((x_00005_00001=1) + (x_00005_00002=1) + (x_00005_00003=1) + (x_00005_00004=1) + (x_00005_00005=1) + (x_00005_00006=1) + (x_00005_00007=1) + (x_00005_00008=1) + (x_00005_00009=1))=tv=1))
c Var 'aux157' direct represents '0' with '-1457'
c Var 'aux157' direct represents '1' with '1457'
c Var 'aux157' order represents '1' with '1'
c Var 'aux157' order represents '0' with '-1457'
c Encoding variable: aux158 with domain: bool (representing constraint (((x_00005_00001=2) + (x_00005_00002=2) + (x_00005_00003=2) + (x_00005_00004=2) + (x_00005_00005=2) + (x_00005_00006=2) + (x_00005_00007=2) + (x_00005_00008=2) + (x_00005_00009=2))=tv=1))
c Var 'aux158' direct represents '0' with '-1458'
c Var 'aux158' direct represents '1' with '1458'
c Var 'aux158' order represents '1' with '1'
c Var 'aux158' order represents '0' with '-1458'
c Encoding variable: aux159 with domain: bool (representing constraint (((x_00005_00001=3) + (x_00005_00002=3) + (x_00005_00003=3) + (x_00005_00004=3) + (x_00005_00005=3) + (x_00005_00006=3) + (x_00005_00007=3) + (x_00005_00008=3) + (x_00005_00009=3))=tv=1))
c Var 'aux159' direct represents '0' with '-1459'
c Var 'aux159' direct represents '1' with '1459'
c Var 'aux159' order represents '1' with '1'
c Var 'aux159' order represents '0' with '-1459'
c Encoding variable: aux160 with domain: bool (representing constraint (((x_00005_00001=4) + (x_00005_00002=4) + (x_00005_00003=4) + (x_00005_00004=4) + (x_00005_00005=4) + (x_00005_00006=4) + (x_00005_00007=4) + (x_00005_00008=4) + (x_00005_00009=4))=tv=1))
c Var 'aux160' direct represents '0' with '-1460'
c Var 'aux160' direct represents '1' with '1460'
c Var 'aux160' order represents '1' with '1'
c Var 'aux160' order represents '0' with '-1460'
c Encoding variable: aux161 with domain: bool (representing constraint (((x_00005_00001=5) + (x_00005_00002=5) + (x_00005_00003=5) + (x_00005_00004=5) + (x_00005_00005=5) + (x_00005_00006=5) + (x_00005_00007=5) + (x_00005_00008=5) + (x_00005_00009=5))=tv=1))
c Var 'aux161' direct represents '0' with '-1461'
c Var 'aux161' direct represents '1' with '1461'
c Var 'aux161' order represents '1' with '1'
c Var 'aux161' order represents '0' with '-1461'
c Encoding variable: aux162 with domain: bool (representing constraint (((x_00005_00001=6) + (x_00005_00002=6) + (x_00005_00003=6) + (x_00005_00004=6) + (x_00005_00005=6) + (x_00005_00006=6) + (x_00005_00007=6) + (x_00005_00008=6) + (x_00005_00009=6))=tv=1))
c Var 'aux162' direct represents '0' with '-1462'
c Var 'aux162' direct represents '1' with '1462'
c Var 'aux162' order represents '1' with '1'
c Var 'aux162' order represents '0' with '-1462'
c Encoding variable: aux163 with domain: bool (representing constraint (((x_00005_00001=7) + (x_00005_00002=7) + (x_00005_00003=7) + (x_00005_00004=7) + (x_00005_00005=7) + (x_00005_00006=7) + (x_00005_00007=7) + (x_00005_00008=7) + (x_00005_00009=7))=tv=1))
c Var 'aux163' direct represents '0' with '-1463'
c Var 'aux163' direct represents '1' with '1463'
c Var 'aux163' order represents '1' with '1'
c Var 'aux163' order represents '0' with '-1463'
c Encoding variable: aux164 with domain: bool (representing constraint (((x_00005_00001=8) + (x_00005_00002=8) + (x_00005_00003=8) + (x_00005_00004=8) + (x_00005_00005=8) + (x_00005_00006=8) + (x_00005_00007=8) + (x_00005_00008=8) + (x_00005_00009=8))=tv=1))
c Var 'aux164' direct represents '0' with '-1464'
c Var 'aux164' direct represents '1' with '1464'
c Var 'aux164' order represents '1' with '1'
c Var 'aux164' order represents '0' with '-1464'
c Encoding variable: aux165 with domain: bool (representing constraint (((x_00005_00001=9) + (x_00005_00002=9) + (x_00005_00003=9) + (x_00005_00004=9) + (x_00005_00005=9) + (x_00005_00006=9) + (x_00005_00007=9) + (x_00005_00008=9) + (x_00005_00009=9))=tv=1))
c Var 'aux165' direct represents '0' with '-1465'
c Var 'aux165' direct represents '1' with '1465'
c Var 'aux165' order represents '1' with '1'
c Var 'aux165' order represents '0' with '-1465'
c Encoding variable: aux166 with domain: bool (representing constraint (((x_00006_00001=1) + (x_00006_00002=1) + (x_00006_00003=1) + (x_00006_00004=1) + (x_00006_00005=1) + (x_00006_00006=1) + (x_00006_00007=1) + (x_00006_00008=1) + (x_00006_00009=1))=tv=1))
c Var 'aux166' direct represents '0' with '-1466'
c Var 'aux166' direct represents '1' with '1466'
c Var 'aux166' order represents '1' with '1'
c Var 'aux166' order represents '0' with '-1466'
c Encoding variable: aux167 with domain: bool (representing constraint (((x_00006_00001=2) + (x_00006_00002=2) + (x_00006_00003=2) + (x_00006_00004=2) + (x_00006_00005=2) + (x_00006_00006=2) + (x_00006_00007=2) + (x_00006_00008=2) + (x_00006_00009=2))=tv=1))
c Var 'aux167' direct represents '0' with '-1467'
c Var 'aux167' direct represents '1' with '1467'
c Var 'aux167' order represents '1' with '1'
c Var 'aux167' order represents '0' with '-1467'
c Encoding variable: aux168 with domain: bool (representing constraint (((x_00006_00001=3) + (x_00006_00002=3) + (x_00006_00003=3) + (x_00006_00004=3) + (x_00006_00005=3) + (x_00006_00006=3) + (x_00006_00007=3) + (x_00006_00008=3) + (x_00006_00009=3))=tv=1))
c Var 'aux168' direct represents '0' with '-1468'
c Var 'aux168' direct represents '1' with '1468'
c Var 'aux168' order represents '1' with '1'
c Var 'aux168' order represents '0' with '-1468'
c Encoding variable: aux169 with domain: bool (representing constraint (((x_00006_00001=4) + (x_00006_00002=4) + (x_00006_00003=4) + (x_00006_00004=4) + (x_00006_00005=4) + (x_00006_00006=4) + (x_00006_00007=4) + (x_00006_00008=4) + (x_00006_00009=4))=tv=1))
c Var 'aux169' direct represents '0' with '-1469'
c Var 'aux169' direct represents '1' with '1469'
c Var 'aux169' order represents '1' with '1'
c Var 'aux169' order represents '0' with '-1469'
c Encoding variable: aux170 with domain: bool (representing constraint (((x_00006_00001=5) + (x_00006_00002=5) + (x_00006_00003=5) + (x_00006_00004=5) + (x_00006_00005=5) + (x_00006_00006=5) + (x_00006_00007=5) + (x_00006_00008=5) + (x_00006_00009=5))=tv=1))
c Var 'aux170' direct represents '0' with '-1470'
c Var 'aux170' direct represents '1' with '1470'
c Var 'aux170' order represents '1' with '1'
c Var 'aux170' order represents '0' with '-1470'
c Encoding variable: aux171 with domain: bool (representing constraint (((x_00006_00001=6) + (x_00006_00002=6) + (x_00006_00003=6) + (x_00006_00004=6) + (x_00006_00005=6) + (x_00006_00006=6) + (x_00006_00007=6) + (x_00006_00008=6) + (x_00006_00009=6))=tv=1))
c Var 'aux171' direct represents '0' with '-1471'
c Var 'aux171' direct represents '1' with '1471'
c Var 'aux171' order represents '1' with '1'
c Var 'aux171' order represents '0' with '-1471'
c Encoding variable: aux172 with domain: bool (representing constraint (((x_00006_00001=7) + (x_00006_00002=7) + (x_00006_00003=7) + (x_00006_00004=7) + (x_00006_00005=7) + (x_00006_00006=7) + (x_00006_00007=7) + (x_00006_00008=7) + (x_00006_00009=7))=tv=1))
c Var 'aux172' direct represents '0' with '-1472'
c Var 'aux172' direct represents '1' with '1472'
c Var 'aux172' order represents '1' with '1'
c Var 'aux172' order represents '0' with '-1472'
c Encoding variable: aux173 with domain: bool (representing constraint (((x_00006_00001=8) + (x_00006_00002=8) + (x_00006_00003=8) + (x_00006_00004=8) + (x_00006_00005=8) + (x_00006_00006=8) + (x_00006_00007=8) + (x_00006_00008=8) + (x_00006_00009=8))=tv=1))
c Var 'aux173' direct represents '0' with '-1473'
c Var 'aux173' direct represents '1' with '1473'
c Var 'aux173' order represents '1' with '1'
c Var 'aux173' order represents '0' with '-1473'
c Encoding variable: aux174 with domain: bool (representing constraint (((x_00006_00001=9) + (x_00006_00002=9) + (x_00006_00003=9) + (x_00006_00004=9) + (x_00006_00005=9) + (x_00006_00006=9) + (x_00006_00007=9) + (x_00006_00008=9) + (x_00006_00009=9))=tv=1))
c Var 'aux174' direct represents '0' with '-1474'
c Var 'aux174' direct represents '1' with '1474'
c Var 'aux174' order represents '1' with '1'
c Var 'aux174' order represents '0' with '-1474'
c Encoding variable: aux175 with domain: bool (representing constraint (((x_00007_00001=1) + (x_00007_00002=1) + (x_00007_00003=1) + (x_00007_00004=1) + (x_00007_00005=1) + (x_00007_00006=1) + (x_00007_00007=1) + (x_00007_00008=1) + (x_00007_00009=1))=tv=1))
c Var 'aux175' direct represents '0' with '-1475'
c Var 'aux175' direct represents '1' with '1475'
c Var 'aux175' order represents '1' with '1'
c Var 'aux175' order represents '0' with '-1475'
c Encoding variable: aux176 with domain: bool (representing constraint (((x_00007_00001=2) + (x_00007_00002=2) + (x_00007_00003=2) + (x_00007_00004=2) + (x_00007_00005=2) + (x_00007_00006=2) + (x_00007_00007=2) + (x_00007_00008=2) + (x_00007_00009=2))=tv=1))
c Var 'aux176' direct represents '0' with '-1476'
c Var 'aux176' direct represents '1' with '1476'
c Var 'aux176' order represents '1' with '1'
c Var 'aux176' order represents '0' with '-1476'
c Encoding variable: aux177 with domain: bool (representing constraint (((x_00007_00001=3) + (x_00007_00002=3) + (x_00007_00003=3) + (x_00007_00004=3) + (x_00007_00005=3) + (x_00007_00006=3) + (x_00007_00007=3) + (x_00007_00008=3) + (x_00007_00009=3))=tv=1))
c Var 'aux177' direct represents '0' with '-1477'
c Var 'aux177' direct represents '1' with '1477'
c Var 'aux177' order represents '1' with '1'
c Var 'aux177' order represents '0' with '-1477'
c Encoding variable: aux178 with domain: bool (representing constraint (((x_00007_00001=4) + (x_00007_00002=4) + (x_00007_00003=4) + (x_00007_00004=4) + (x_00007_00005=4) + (x_00007_00006=4) + (x_00007_00007=4) + (x_00007_00008=4) + (x_00007_00009=4))=tv=1))
c Var 'aux178' direct represents '0' with '-1478'
c Var 'aux178' direct represents '1' with '1478'
c Var 'aux178' order represents '1' with '1'
c Var 'aux178' order represents '0' with '-1478'
c Encoding variable: aux179 with domain: bool (representing constraint (((x_00007_00001=5) + (x_00007_00002=5) + (x_00007_00003=5) + (x_00007_00004=5) + (x_00007_00005=5) + (x_00007_00006=5) + (x_00007_00007=5) + (x_00007_00008=5) + (x_00007_00009=5))=tv=1))
c Var 'aux179' direct represents '0' with '-1479'
c Var 'aux179' direct represents '1' with '1479'
c Var 'aux179' order represents '1' with '1'
c Var 'aux179' order represents '0' with '-1479'
c Encoding variable: aux180 with domain: bool (representing constraint (((x_00007_00001=6) + (x_00007_00002=6) + (x_00007_00003=6) + (x_00007_00004=6) + (x_00007_00005=6) + (x_00007_00006=6) + (x_00007_00007=6) + (x_00007_00008=6) + (x_00007_00009=6))=tv=1))
c Var 'aux180' direct represents '0' with '-1480'
c Var 'aux180' direct represents '1' with '1480'
c Var 'aux180' order represents '1' with '1'
c Var 'aux180' order represents '0' with '-1480'
c Encoding variable: aux181 with domain: bool (representing constraint (((x_00007_00001=7) + (x_00007_00002=7) + (x_00007_00003=7) + (x_00007_00004=7) + (x_00007_00005=7) + (x_00007_00006=7) + (x_00007_00007=7) + (x_00007_00008=7) + (x_00007_00009=7))=tv=1))
c Var 'aux181' direct represents '0' with '-1481'
c Var 'aux181' direct represents '1' with '1481'
c Var 'aux181' order represents '1' with '1'
c Var 'aux181' order represents '0' with '-1481'
c Encoding variable: aux182 with domain: bool (representing constraint (((x_00007_00001=8) + (x_00007_00002=8) + (x_00007_00003=8) + (x_00007_00004=8) + (x_00007_00005=8) + (x_00007_00006=8) + (x_00007_00007=8) + (x_00007_00008=8) + (x_00007_00009=8))=tv=1))
c Var 'aux182' direct represents '0' with '-1482'
c Var 'aux182' direct represents '1' with '1482'
c Var 'aux182' order represents '1' with '1'
c Var 'aux182' order represents '0' with '-1482'
c Encoding variable: aux183 with domain: bool (representing constraint (((x_00007_00001=9) + (x_00007_00002=9) + (x_00007_00003=9) + (x_00007_00004=9) + (x_00007_00005=9) + (x_00007_00006=9) + (x_00007_00007=9) + (x_00007_00008=9) + (x_00007_00009=9))=tv=1))
c Var 'aux183' direct represents '0' with '-1483'
c Var 'aux183' direct represents '1' with '1483'
c Var 'aux183' order represents '1' with '1'
c Var 'aux183' order represents '0' with '-1483'
c Encoding variable: aux184 with domain: bool (representing constraint (((x_00008_00001=1) + (x_00008_00002=1) + (x_00008_00003=1) + (x_00008_00004=1) + (x_00008_00005=1) + (x_00008_00006=1) + (x_00008_00007=1) + (x_00008_00008=1) + (x_00008_00009=1))=tv=1))
c Var 'aux184' direct represents '0' with '-1484'
c Var 'aux184' direct represents '1' with '1484'
c Var 'aux184' order represents '1' with '1'
c Var 'aux184' order represents '0' with '-1484'
c Encoding variable: aux185 with domain: bool (representing constraint (((x_00008_00001=2) + (x_00008_00002=2) + (x_00008_00003=2) + (x_00008_00004=2) + (x_00008_00005=2) + (x_00008_00006=2) + (x_00008_00007=2) + (x_00008_00008=2) + (x_00008_00009=2))=tv=1))
c Var 'aux185' direct represents '0' with '-1485'
c Var 'aux185' direct represents '1' with '1485'
c Var 'aux185' order represents '1' with '1'
c Var 'aux185' order represents '0' with '-1485'
c Encoding variable: aux186 with domain: bool (representing constraint (((x_00008_00001=3) + (x_00008_00002=3) + (x_00008_00003=3) + (x_00008_00004=3) + (x_00008_00005=3) + (x_00008_00006=3) + (x_00008_00007=3) + (x_00008_00008=3) + (x_00008_00009=3))=tv=1))
c Var 'aux186' direct represents '0' with '-1486'
c Var 'aux186' direct represents '1' with '1486'
c Var 'aux186' order represents '1' with '1'
c Var 'aux186' order represents '0' with '-1486'
c Encoding variable: aux187 with domain: bool (representing constraint (((x_00008_00001=4) + (x_00008_00002=4) + (x_00008_00003=4) + (x_00008_00004=4) + (x_00008_00005=4) + (x_00008_00006=4) + (x_00008_00007=4) + (x_00008_00008=4) + (x_00008_00009=4))=tv=1))
c Var 'aux187' direct represents '0' with '-1487'
c Var 'aux187' direct represents '1' with '1487'
c Var 'aux187' order represents '1' with '1'
c Var 'aux187' order represents '0' with '-1487'
c Encoding variable: aux188 with domain: bool (representing constraint (((x_00008_00001=5) + (x_00008_00002=5) + (x_00008_00003=5) + (x_00008_00004=5) + (x_00008_00005=5) + (x_00008_00006=5) + (x_00008_00007=5) + (x_00008_00008=5) + (x_00008_00009=5))=tv=1))
c Var 'aux188' direct represents '0' with '-1488'
c Var 'aux188' direct represents '1' with '1488'
c Var 'aux188' order represents '1' with '1'
c Var 'aux188' order represents '0' with '-1488'
c Encoding variable: aux189 with domain: bool (representing constraint (((x_00008_00001=6) + (x_00008_00002=6) + (x_00008_00003=6) + (x_00008_00004=6) + (x_00008_00005=6) + (x_00008_00006=6) + (x_00008_00007=6) + (x_00008_00008=6) + (x_00008_00009=6))=tv=1))
c Var 'aux189' direct represents '0' with '-1489'
c Var 'aux189' direct represents '1' with '1489'
c Var 'aux189' order represents '1' with '1'
c Var 'aux189' order represents '0' with '-1489'
c Encoding variable: aux190 with domain: bool (representing constraint (((x_00008_00001=7) + (x_00008_00002=7) + (x_00008_00003=7) + (x_00008_00004=7) + (x_00008_00005=7) + (x_00008_00006=7) + (x_00008_00007=7) + (x_00008_00008=7) + (x_00008_00009=7))=tv=1))
c Var 'aux190' direct represents '0' with '-1490'
c Var 'aux190' direct represents '1' with '1490'
c Var 'aux190' order represents '1' with '1'
c Var 'aux190' order represents '0' with '-1490'
c Encoding variable: aux191 with domain: bool (representing constraint (((x_00008_00001=8) + (x_00008_00002=8) + (x_00008_00003=8) + (x_00008_00004=8) + (x_00008_00005=8) + (x_00008_00006=8) + (x_00008_00007=8) + (x_00008_00008=8) + (x_00008_00009=8))=tv=1))
c Var 'aux191' direct represents '0' with '-1491'
c Var 'aux191' direct represents '1' with '1491'
c Var 'aux191' order represents '1' with '1'
c Var 'aux191' order represents '0' with '-1491'
c Encoding variable: aux192 with domain: bool (representing constraint (((x_00008_00001=9) + (x_00008_00002=9) + (x_00008_00003=9) + (x_00008_00004=9) + (x_00008_00005=9) + (x_00008_00006=9) + (x_00008_00007=9) + (x_00008_00008=9) + (x_00008_00009=9))=tv=1))
c Var 'aux192' direct represents '0' with '-1492'
c Var 'aux192' direct represents '1' with '1492'
c Var 'aux192' order represents '1' with '1'
c Var 'aux192' order represents '0' with '-1492'
c Encoding variable: aux193 with domain: bool (representing constraint (((x_00009_00001=1) + (x_00009_00002=1) + (x_00009_00003=1) + (x_00009_00004=1) + (x_00009_00005=1) + (x_00009_00006=1) + (x_00009_00007=1) + (x_00009_00008=1) + (x_00009_00009=1))=tv=1))
c Var 'aux193' direct represents '0' with '-1493'
c Var 'aux193' direct represents '1' with '1493'
c Var 'aux193' order represents '1' with '1'
c Var 'aux193' order represents '0' with '-1493'
c Encoding variable: aux194 with domain: bool (representing constraint (((x_00009_00001=2) + (x_00009_00002=2) + (x_00009_00003=2) + (x_00009_00004=2) + (x_00009_00005=2) + (x_00009_00006=2) + (x_00009_00007=2) + (x_00009_00008=2) + (x_00009_00009=2))=tv=1))
c Var 'aux194' direct represents '0' with '-1494'
c Var 'aux194' direct represents '1' with '1494'
c Var 'aux194' order represents '1' with '1'
c Var 'aux194' order represents '0' with '-1494'
c Encoding variable: aux195 with domain: bool (representing constraint (((x_00009_00001=3) + (x_00009_00002=3) + (x_00009_00003=3) + (x_00009_00004=3) + (x_00009_00005=3) + (x_00009_00006=3) + (x_00009_00007=3) + (x_00009_00008=3) + (x_00009_00009=3))=tv=1))
c Var 'aux195' direct represents '0' with '-1495'
c Var 'aux195' direct represents '1' with '1495'
c Var 'aux195' order represents '1' with '1'
c Var 'aux195' order represents '0' with '-1495'
c Encoding variable: aux196 with domain: bool (representing constraint (((x_00009_00001=4) + (x_00009_00002=4) + (x_00009_00003=4) + (x_00009_00004=4) + (x_00009_00005=4) + (x_00009_00006=4) + (x_00009_00007=4) + (x_00009_00008=4) + (x_00009_00009=4))=tv=1))
c Var 'aux196' direct represents '0' with '-1496'
c Var 'aux196' direct represents '1' with '1496'
c Var 'aux196' order represents '1' with '1'
c Var 'aux196' order represents '0' with '-1496'
c Encoding variable: aux197 with domain: bool (representing constraint (((x_00009_00001=5) + (x_00009_00002=5) + (x_00009_00003=5) + (x_00009_00004=5) + (x_00009_00005=5) + (x_00009_00006=5) + (x_00009_00007=5) + (x_00009_00008=5) + (x_00009_00009=5))=tv=1))
c Var 'aux197' direct represents '0' with '-1497'
c Var 'aux197' direct represents '1' with '1497'
c Var 'aux197' order represents '1' with '1'
c Var 'aux197' order represents '0' with '-1497'
c Encoding variable: aux198 with domain: bool (representing constraint (((x_00009_00001=6) + (x_00009_00002=6) + (x_00009_00003=6) + (x_00009_00004=6) + (x_00009_00005=6) + (x_00009_00006=6) + (x_00009_00007=6) + (x_00009_00008=6) + (x_00009_00009=6))=tv=1))
c Var 'aux198' direct represents '0' with '-1498'
c Var 'aux198' direct represents '1' with '1498'
c Var 'aux198' order represents '1' with '1'
c Var 'aux198' order represents '0' with '-1498'
c Encoding variable: aux199 with domain: bool (representing constraint (((x_00009_00001=7) + (x_00009_00002=7) + (x_00009_00003=7) + (x_00009_00004=7) + (x_00009_00005=7) + (x_00009_00006=7) + (x_00009_00007=7) + (x_00009_00008=7) + (x_00009_00009=7))=tv=1))
c Var 'aux199' direct represents '0' with '-1499'
c Var 'aux199' direct represents '1' with '1499'
c Var 'aux199' order represents '1' with '1'
c Var 'aux199' order represents '0' with '-1499'
c Encoding variable: aux200 with domain: bool (representing constraint (((x_00009_00001=8) + (x_00009_00002=8) + (x_00009_00003=8) + (x_00009_00004=8) + (x_00009_00005=8) + (x_00009_00006=8) + (x_00009_00007=8) + (x_00009_00008=8) + (x_00009_00009=8))=tv=1))
c Var 'aux200' direct represents '0' with '-1500'
c Var 'aux200' direct represents '1' with '1500'
c Var 'aux200' order represents '1' with '1'
c Var 'aux200' order represents '0' with '-1500'
c Encoding variable: aux201 with domain: bool (representing constraint (((x_00009_00001=9) + (x_00009_00002=9) + (x_00009_00003=9) + (x_00009_00004=9) + (x_00009_00005=9) + (x_00009_00006=9) + (x_00009_00007=9) + (x_00009_00008=9) + (x_00009_00009=9))=tv=1))
c Var 'aux201' direct represents '0' with '-1501'
c Var 'aux201' direct represents '1' with '1501'
c Var 'aux201' order represents '1' with '1'
c Var 'aux201' order represents '0' with '-1501'
c Encoding variable: aux202 with domain: bool (representing constraint (((x_00003_00001=1) + (x_00003_00002=1) + (x_00003_00003=1) + (x_00001_00001=1) + (x_00001_00002=1) + (x_00001_00003=1) + (x_00002_00001=1) + (x_00002_00002=1) + (x_00002_00003=1))=tv=1))
c Var 'aux202' direct represents '0' with '-1502'
c Var 'aux202' direct represents '1' with '1502'
c Var 'aux202' order represents '1' with '1'
c Var 'aux202' order represents '0' with '-1502'
c Encoding variable: aux203 with domain: bool (representing constraint (((x_00003_00001=2) + (x_00003_00002=2) + (x_00003_00003=2) + (x_00001_00001=2) + (x_00001_00002=2) + (x_00001_00003=2) + (x_00002_00001=2) + (x_00002_00002=2) + (x_00002_00003=2))=tv=1))
c Var 'aux203' direct represents '0' with '-1503'
c Var 'aux203' direct represents '1' with '1503'
c Var 'aux203' order represents '1' with '1'
c Var 'aux203' order represents '0' with '-1503'
c Encoding variable: aux204 with domain: bool (representing constraint (((x_00003_00001=3) + (x_00003_00002=3) + (x_00003_00003=3) + (x_00001_00001=3) + (x_00001_00002=3) + (x_00001_00003=3) + (x_00002_00001=3) + (x_00002_00002=3) + (x_00002_00003=3))=tv=1))
c Var 'aux204' direct represents '0' with '-1504'
c Var 'aux204' direct represents '1' with '1504'
c Var 'aux204' order represents '1' with '1'
c Var 'aux204' order represents '0' with '-1504'
c Encoding variable: aux205 with domain: bool (representing constraint (((x_00003_00001=4) + (x_00003_00002=4) + (x_00003_00003=4) + (x_00001_00001=4) + (x_00001_00002=4) + (x_00001_00003=4) + (x_00002_00001=4) + (x_00002_00002=4) + (x_00002_00003=4))=tv=1))
c Var 'aux205' direct represents '0' with '-1505'
c Var 'aux205' direct represents '1' with '1505'
c Var 'aux205' order represents '1' with '1'
c Var 'aux205' order represents '0' with '-1505'
c Encoding variable: aux206 with domain: bool (representing constraint (((x_00003_00001=5) + (x_00003_00002=5) + (x_00003_00003=5) + (x_00001_00001=5) + (x_00001_00002=5) + (x_00001_00003=5) + (x_00002_00001=5) + (x_00002_00002=5) + (x_00002_00003=5))=tv=1))
c Var 'aux206' direct represents '0' with '-1506'
c Var 'aux206' direct represents '1' with '1506'
c Var 'aux206' order represents '1' with '1'
c Var 'aux206' order represents '0' with '-1506'
c Encoding variable: aux207 with domain: bool (representing constraint (((x_00003_00001=6) + (x_00003_00002=6) + (x_00003_00003=6) + (x_00001_00001=6) + (x_00001_00002=6) + (x_00001_00003=6) + (x_00002_00001=6) + (x_00002_00002=6) + (x_00002_00003=6))=tv=1))
c Var 'aux207' direct represents '0' with '-1507'
c Var 'aux207' direct represents '1' with '1507'
c Var 'aux207' order represents '1' with '1'
c Var 'aux207' order represents '0' with '-1507'
c Encoding variable: aux208 with domain: bool (representing constraint (((x_00003_00001=7) + (x_00003_00002=7) + (x_00003_00003=7) + (x_00001_00001=7) + (x_00001_00002=7) + (x_00001_00003=7) + (x_00002_00001=7) + (x_00002_00002=7) + (x_00002_00003=7))=tv=1))
c Var 'aux208' direct represents '0' with '-1508'
c Var 'aux208' direct represents '1' with '1508'
c Var 'aux208' order represents '1' with '1'
c Var 'aux208' order represents '0' with '-1508'
c Encoding variable: aux209 with domain: bool (representing constraint (((x_00003_00001=8) + (x_00003_00002=8) + (x_00003_00003=8) + (x_00001_00001=8) + (x_00001_00002=8) + (x_00001_00003=8) + (x_00002_00001=8) + (x_00002_00002=8) + (x_00002_00003=8))=tv=1))
c Var 'aux209' direct represents '0' with '-1509'
c Var 'aux209' direct represents '1' with '1509'
c Var 'aux209' order represents '1' with '1'
c Var 'aux209' order represents '0' with '-1509'
c Encoding variable: aux210 with domain: bool (representing constraint (((x_00003_00001=9) + (x_00003_00002=9) + (x_00003_00003=9) + (x_00001_00001=9) + (x_00001_00002=9) + (x_00001_00003=9) + (x_00002_00001=9) + (x_00002_00002=9) + (x_00002_00003=9))=tv=1))
c Var 'aux210' direct represents '0' with '-1510'
c Var 'aux210' direct represents '1' with '1510'
c Var 'aux210' order represents '1' with '1'
c Var 'aux210' order represents '0' with '-1510'
c Encoding variable: aux211 with domain: bool (representing constraint (((x_00003_00004=1) + (x_00003_00005=1) + (x_00003_00006=1) + (x_00001_00004=1) + (x_00001_00005=1) + (x_00001_00006=1) + (x_00002_00004=1) + (x_00002_00005=1) + (x_00002_00006=1))=tv=1))
c Var 'aux211' direct represents '0' with '-1511'
c Var 'aux211' direct represents '1' with '1511'
c Var 'aux211' order represents '1' with '1'
c Var 'aux211' order represents '0' with '-1511'
c Encoding variable: aux212 with domain: bool (representing constraint (((x_00003_00004=2) + (x_00003_00005=2) + (x_00003_00006=2) + (x_00001_00004=2) + (x_00001_00005=2) + (x_00001_00006=2) + (x_00002_00004=2) + (x_00002_00005=2) + (x_00002_00006=2))=tv=1))
c Var 'aux212' direct represents '0' with '-1512'
c Var 'aux212' direct represents '1' with '1512'
c Var 'aux212' order represents '1' with '1'
c Var 'aux212' order represents '0' with '-1512'
c Encoding variable: aux213 with domain: bool (representing constraint (((x_00003_00004=3) + (x_00003_00005=3) + (x_00003_00006=3) + (x_00001_00004=3) + (x_00001_00005=3) + (x_00001_00006=3) + (x_00002_00004=3) + (x_00002_00005=3) + (x_00002_00006=3))=tv=1))
c Var 'aux213' direct represents '0' with '-1513'
c Var 'aux213' direct represents '1' with '1513'
c Var 'aux213' order represents '1' with '1'
c Var 'aux213' order represents '0' with '-1513'
c Encoding variable: aux214 with domain: bool (representing constraint (((x_00003_00004=4) + (x_00003_00005=4) + (x_00003_00006=4) + (x_00001_00004=4) + (x_00001_00005=4) + (x_00001_00006=4) + (x_00002_00004=4) + (x_00002_00005=4) + (x_00002_00006=4))=tv=1))
c Var 'aux214' direct represents '0' with '-1514'
c Var 'aux214' direct represents '1' with '1514'
c Var 'aux214' order represents '1' with '1'
c Var 'aux214' order represents '0' with '-1514'
c Encoding variable: aux215 with domain: bool (representing constraint (((x_00003_00004=5) + (x_00003_00005=5) + (x_00003_00006=5) + (x_00001_00004=5) + (x_00001_00005=5) + (x_00001_00006=5) + (x_00002_00004=5) + (x_00002_00005=5) + (x_00002_00006=5))=tv=1))
c Var 'aux215' direct represents '0' with '-1515'
c Var 'aux215' direct represents '1' with '1515'
c Var 'aux215' order represents '1' with '1'
c Var 'aux215' order represents '0' with '-1515'
c Encoding variable: aux216 with domain: bool (representing constraint (((x_00003_00004=6) + (x_00003_00005=6) + (x_00003_00006=6) + (x_00001_00004=6) + (x_00001_00005=6) + (x_00001_00006=6) + (x_00002_00004=6) + (x_00002_00005=6) + (x_00002_00006=6))=tv=1))
c Var 'aux216' direct represents '0' with '-1516'
c Var 'aux216' direct represents '1' with '1516'
c Var 'aux216' order represents '1' with '1'
c Var 'aux216' order represents '0' with '-1516'
c Encoding variable: aux217 with domain: bool (representing constraint (((x_00003_00004=7) + (x_00003_00005=7) + (x_00003_00006=7) + (x_00001_00004=7) + (x_00001_00005=7) + (x_00001_00006=7) + (x_00002_00004=7) + (x_00002_00005=7) + (x_00002_00006=7))=tv=1))
c Var 'aux217' direct represents '0' with '-1517'
c Var 'aux217' direct represents '1' with '1517'
c Var 'aux217' order represents '1' with '1'
c Var 'aux217' order represents '0' with '-1517'
c Encoding variable: aux218 with domain: bool (representing constraint (((x_00003_00004=8) + (x_00003_00005=8) + (x_00003_00006=8) + (x_00001_00004=8) + (x_00001_00005=8) + (x_00001_00006=8) + (x_00002_00004=8) + (x_00002_00005=8) + (x_00002_00006=8))=tv=1))
c Var 'aux218' direct represents '0' with '-1518'
c Var 'aux218' direct represents '1' with '1518'
c Var 'aux218' order represents '1' with '1'
c Var 'aux218' order represents '0' with '-1518'
c Encoding variable: aux219 with domain: bool (representing constraint (((x_00003_00004=9) + (x_00003_00005=9) + (x_00003_00006=9) + (x_00001_00004=9) + (x_00001_00005=9) + (x_00001_00006=9) + (x_00002_00004=9) + (x_00002_00005=9) + (x_00002_00006=9))=tv=1))
c Var 'aux219' direct represents '0' with '-1519'
c Var 'aux219' direct represents '1' with '1519'
c Var 'aux219' order represents '1' with '1'
c Var 'aux219' order represents '0' with '-1519'
c Encoding variable: aux220 with domain: bool (representing constraint (((x_00003_00007=1) + (x_00003_00008=1) + (x_00003_00009=1) + (x_00001_00007=1) + (x_00001_00008=1) + (x_00001_00009=1) + (x_00002_00007=1) + (x_00002_00008=1) + (x_00002_00009=1))=tv=1))
c Var 'aux220' direct represents '0' with '-1520'
c Var 'aux220' direct represents '1' with '1520'
c Var 'aux220' order represents '1' with '1'
c Var 'aux220' order represents '0' with '-1520'
c Encoding variable: aux221 with domain: bool (representing constraint (((x_00003_00007=2) + (x_00003_00008=2) + (x_00003_00009=2) + (x_00001_00007=2) + (x_00001_00008=2) + (x_00001_00009=2) + (x_00002_00007=2) + (x_00002_00008=2) + (x_00002_00009=2))=tv=1))
c Var 'aux221' direct represents '0' with '-1521'
c Var 'aux221' direct represents '1' with '1521'
c Var 'aux221' order represents '1' with '1'
c Var 'aux221' order represents '0' with '-1521'
c Encoding variable: aux222 with domain: bool (representing constraint (((x_00003_00007=3) + (x_00003_00008=3) + (x_00003_00009=3) + (x_00001_00007=3) + (x_00001_00008=3) + (x_00001_00009=3) + (x_00002_00007=3) + (x_00002_00008=3) + (x_00002_00009=3))=tv=1))
c Var 'aux222' direct represents '0' with '-1522'
c Var 'aux222' direct represents '1' with '1522'
c Var 'aux222' order represents '1' with '1'
c Var 'aux222' order represents '0' with '-1522'
c Encoding variable: aux223 with domain: bool (representing constraint (((x_00003_00007=4) + (x_00003_00008=4) + (x_00003_00009=4) + (x_00001_00007=4) + (x_00001_00008=4) + (x_00001_00009=4) + (x_00002_00007=4) + (x_00002_00008=4) + (x_00002_00009=4))=tv=1))
c Var 'aux223' direct represents '0' with '-1523'
c Var 'aux223' direct represents '1' with '1523'
c Var 'aux223' order represents '1' with '1'
c Var 'aux223' order represents '0' with '-1523'
c Encoding variable: aux224 with domain: bool (representing constraint (((x_00003_00007=5) + (x_00003_00008=5) + (x_00003_00009=5) + (x_00001_00007=5) + (x_00001_00008=5) + (x_00001_00009=5) + (x_00002_00007=5) + (x_00002_00008=5) + (x_00002_00009=5))=tv=1))
c Var 'aux224' direct represents '0' with '-1524'
c Var 'aux224' direct represents '1' with '1524'
c Var 'aux224' order represents '1' with '1'
c Var 'aux224' order represents '0' with '-1524'
c Encoding variable: aux225 with domain: bool (representing constraint (((x_00003_00007=6) + (x_00003_00008=6) + (x_00003_00009=6) + (x_00001_00007=6) + (x_00001_00008=6) + (x_00001_00009=6) + (x_00002_00007=6) + (x_00002_00008=6) + (x_00002_00009=6))=tv=1))
c Var 'aux225' direct represents '0' with '-1525'
c Var 'aux225' direct represents '1' with '1525'
c Var 'aux225' order represents '1' with '1'
c Var 'aux225' order represents '0' with '-1525'
c Encoding variable: aux226 with domain: bool (representing constraint (((x_00003_00007=7) + (x_00003_00008=7) + (x_00003_00009=7) + (x_00001_00007=7) + (x_00001_00008=7) + (x_00001_00009=7) + (x_00002_00007=7) + (x_00002_00008=7) + (x_00002_00009=7))=tv=1))
c Var 'aux226' direct represents '0' with '-1526'
c Var 'aux226' direct represents '1' with '1526'
c Var 'aux226' order represents '1' with '1'
c Var 'aux226' order represents '0' with '-1526'
c Encoding variable: aux227 with domain: bool (representing constraint (((x_00003_00007=8) + (x_00003_00008=8) + (x_00003_00009=8) + (x_00001_00007=8) + (x_00001_00008=8) + (x_00001_00009=8) + (x_00002_00007=8) + (x_00002_00008=8) + (x_00002_00009=8))=tv=1))
c Var 'aux227' direct represents '0' with '-1527'
c Var 'aux227' direct represents '1' with '1527'
c Var 'aux227' order represents '1' with '1'
c Var 'aux227' order represents '0' with '-1527'
c Encoding variable: aux228 with domain: bool (representing constraint (((x_00003_00007=9) + (x_00003_00008=9) + (x_00003_00009=9) + (x_00001_00007=9) + (x_00001_00008=9) + (x_00001_00009=9) + (x_00002_00007=9) + (x_00002_00008=9) + (x_00002_00009=9))=tv=1))
c Var 'aux228' direct represents '0' with '-1528'
c Var 'aux228' direct represents '1' with '1528'
c Var 'aux228' order represents '1' with '1'
c Var 'aux228' order represents '0' with '-1528'
c Encoding variable: aux229 with domain: bool (representing constraint (((x_00006_00001=1) + (x_00006_00002=1) + (x_00006_00003=1) + (x_00004_00001=1) + (x_00004_00002=1) + (x_00004_00003=1) + (x_00005_00001=1) + (x_00005_00002=1) + (x_00005_00003=1))=tv=1))
c Var 'aux229' direct represents '0' with '-1529'
c Var 'aux229' direct represents '1' with '1529'
c Var 'aux229' order represents '1' with '1'
c Var 'aux229' order represents '0' with '-1529'
c Encoding variable: aux230 with domain: bool (representing constraint (((x_00006_00001=2) + (x_00006_00002=2) + (x_00006_00003=2) + (x_00004_00001=2) + (x_00004_00002=2) + (x_00004_00003=2) + (x_00005_00001=2) + (x_00005_00002=2) + (x_00005_00003=2))=tv=1))
c Var 'aux230' direct represents '0' with '-1530'
c Var 'aux230' direct represents '1' with '1530'
c Var 'aux230' order represents '1' with '1'
c Var 'aux230' order represents '0' with '-1530'
c Encoding variable: aux231 with domain: bool (representing constraint (((x_00006_00001=3) + (x_00006_00002=3) + (x_00006_00003=3) + (x_00004_00001=3) + (x_00004_00002=3) + (x_00004_00003=3) + (x_00005_00001=3) + (x_00005_00002=3) + (x_00005_00003=3))=tv=1))
c Var 'aux231' direct represents '0' with '-1531'
c Var 'aux231' direct represents '1' with '1531'
c Var 'aux231' order represents '1' with '1'
c Var 'aux231' order represents '0' with '-1531'
c Encoding variable: aux232 with domain: bool (representing constraint (((x_00006_00001=4) + (x_00006_00002=4) + (x_00006_00003=4) + (x_00004_00001=4) + (x_00004_00002=4) + (x_00004_00003=4) + (x_00005_00001=4) + (x_00005_00002=4) + (x_00005_00003=4))=tv=1))
c Var 'aux232' direct represents '0' with '-1532'
c Var 'aux232' direct represents '1' with '1532'
c Var 'aux232' order represents '1' with '1'
c Var 'aux232' order represents '0' with '-1532'
c Encoding variable: aux233 with domain: bool (representing constraint (((x_00006_00001=5) + (x_00006_00002=5) + (x_00006_00003=5) + (x_00004_00001=5) + (x_00004_00002=5) + (x_00004_00003=5) + (x_00005_00001=5) + (x_00005_00002=5) + (x_00005_00003=5))=tv=1))
c Var 'aux233' direct represents '0' with '-1533'
c Var 'aux233' direct represents '1' with '1533'
c Var 'aux233' order represents '1' with '1'
c Var 'aux233' order represents '0' with '-1533'
c Encoding variable: aux234 with domain: bool (representing constraint (((x_00006_00001=6) + (x_00006_00002=6) + (x_00006_00003=6) + (x_00004_00001=6) + (x_00004_00002=6) + (x_00004_00003=6) + (x_00005_00001=6) + (x_00005_00002=6) + (x_00005_00003=6))=tv=1))
c Var 'aux234' direct represents '0' with '-1534'
c Var 'aux234' direct represents '1' with '1534'
c Var 'aux234' order represents '1' with '1'
c Var 'aux234' order represents '0' with '-1534'
c Encoding variable: aux235 with domain: bool (representing constraint (((x_00006_00001=7) + (x_00006_00002=7) + (x_00006_00003=7) + (x_00004_00001=7) + (x_00004_00002=7) + (x_00004_00003=7) + (x_00005_00001=7) + (x_00005_00002=7) + (x_00005_00003=7))=tv=1))
c Var 'aux235' direct represents '0' with '-1535'
c Var 'aux235' direct represents '1' with '1535'
c Var 'aux235' order represents '1' with '1'
c Var 'aux235' order represents '0' with '-1535'
c Encoding variable: aux236 with domain: bool (representing constraint (((x_00006_00001=8) + (x_00006_00002=8) + (x_00006_00003=8) + (x_00004_00001=8) + (x_00004_00002=8) + (x_00004_00003=8) + (x_00005_00001=8) + (x_00005_00002=8) + (x_00005_00003=8))=tv=1))
c Var 'aux236' direct represents '0' with '-1536'
c Var 'aux236' direct represents '1' with '1536'
c Var 'aux236' order represents '1' with '1'
c Var 'aux236' order represents '0' with '-1536'
c Encoding variable: aux237 with domain: bool (representing constraint (((x_00006_00001=9) + (x_00006_00002=9) + (x_00006_00003=9) + (x_00004_00001=9) + (x_00004_00002=9) + (x_00004_00003=9) + (x_00005_00001=9) + (x_00005_00002=9) + (x_00005_00003=9))=tv=1))
c Var 'aux237' direct represents '0' with '-1537'
c Var 'aux237' direct represents '1' with '1537'
c Var 'aux237' order represents '1' with '1'
c Var 'aux237' order represents '0' with '-1537'
c Encoding variable: aux238 with domain: bool (representing constraint (((x_00006_00004=1) + (x_00006_00005=1) + (x_00006_00006=1) + (x_00004_00004=1) + (x_00004_00005=1) + (x_00004_00006=1) + (x_00005_00004=1) + (x_00005_00005=1) + (x_00005_00006=1))=tv=1))
c Var 'aux238' direct represents '0' with '-1538'
c Var 'aux238' direct represents '1' with '1538'
c Var 'aux238' order represents '1' with '1'
c Var 'aux238' order represents '0' with '-1538'
c Encoding variable: aux239 with domain: bool (representing constraint (((x_00006_00004=2) + (x_00006_00005=2) + (x_00006_00006=2) + (x_00004_00004=2) + (x_00004_00005=2) + (x_00004_00006=2) + (x_00005_00004=2) + (x_00005_00005=2) + (x_00005_00006=2))=tv=1))
c Var 'aux239' direct represents '0' with '-1539'
c Var 'aux239' direct represents '1' with '1539'
c Var 'aux239' order represents '1' with '1'
c Var 'aux239' order represents '0' with '-1539'
c Encoding variable: aux240 with domain: bool (representing constraint (((x_00006_00004=3) + (x_00006_00005=3) + (x_00006_00006=3) + (x_00004_00004=3) + (x_00004_00005=3) + (x_00004_00006=3) + (x_00005_00004=3) + (x_00005_00005=3) + (x_00005_00006=3))=tv=1))
c Var 'aux240' direct represents '0' with '-1540'
c Var 'aux240' direct represents '1' with '1540'
c Var 'aux240' order represents '1' with '1'
c Var 'aux240' order represents '0' with '-1540'
c Encoding variable: aux241 with domain: bool (representing constraint (((x_00006_00004=4) + (x_00006_00005=4) + (x_00006_00006=4) + (x_00004_00004=4) + (x_00004_00005=4) + (x_00004_00006=4) + (x_00005_00004=4) + (x_00005_00005=4) + (x_00005_00006=4))=tv=1))
c Var 'aux241' direct represents '0' with '-1541'
c Var 'aux241' direct represents '1' with '1541'
c Var 'aux241' order represents '1' with '1'
c Var 'aux241' order represents '0' with '-1541'
c Encoding variable: aux242 with domain: bool (representing constraint (((x_00006_00004=5) + (x_00006_00005=5) + (x_00006_00006=5) + (x_00004_00004=5) + (x_00004_00005=5) + (x_00004_00006=5) + (x_00005_00004=5) + (x_00005_00005=5) + (x_00005_00006=5))=tv=1))
c Var 'aux242' direct represents '0' with '-1542'
c Var 'aux242' direct represents '1' with '1542'
c Var 'aux242' order represents '1' with '1'
c Var 'aux242' order represents '0' with '-1542'
c Encoding variable: aux243 with domain: bool (representing constraint (((x_00006_00004=6) + (x_00006_00005=6) + (x_00006_00006=6) + (x_00004_00004=6) + (x_00004_00005=6) + (x_00004_00006=6) + (x_00005_00004=6) + (x_00005_00005=6) + (x_00005_00006=6))=tv=1))
c Var 'aux243' direct represents '0' with '-1543'
c Var 'aux243' direct represents '1' with '1543'
c Var 'aux243' order represents '1' with '1'
c Var 'aux243' order represents '0' with '-1543'
c Encoding variable: aux244 with domain: bool (representing constraint (((x_00006_00004=7) + (x_00006_00005=7) + (x_00006_00006=7) + (x_00004_00004=7) + (x_00004_00005=7) + (x_00004_00006=7) + (x_00005_00004=7) + (x_00005_00005=7) + (x_00005_00006=7))=tv=1))
c Var 'aux244' direct represents '0' with '-1544'
c Var 'aux244' direct represents '1' with '1544'
c Var 'aux244' order represents '1' with '1'
c Var 'aux244' order represents '0' with '-1544'
c Encoding variable: aux245 with domain: bool (representing constraint (((x_00006_00004=8) + (x_00006_00005=8) + (x_00006_00006=8) + (x_00004_00004=8) + (x_00004_00005=8) + (x_00004_00006=8) + (x_00005_00004=8) + (x_00005_00005=8) + (x_00005_00006=8))=tv=1))
c Var 'aux245' direct represents '0' with '-1545'
c Var 'aux245' direct represents '1' with '1545'
c Var 'aux245' order represents '1' with '1'
c Var 'aux245' order represents '0' with '-1545'
c Encoding variable: aux246 with domain: bool (representing constraint (((x_00006_00004=9) + (x_00006_00005=9) + (x_00006_00006=9) + (x_00004_00004=9) + (x_00004_00005=9) + (x_00004_00006=9) + (x_00005_00004=9) + (x_00005_00005=9) + (x_00005_00006=9))=tv=1))
c Var 'aux246' direct represents '0' with '-1546'
c Var 'aux246' direct represents '1' with '1546'
c Var 'aux246' order represents '1' with '1'
c Var 'aux246' order represents '0' with '-1546'
c Encoding variable: aux247 with domain: bool (representing constraint (((x_00006_00007=1) + (x_00006_00008=1) + (x_00006_00009=1) + (x_00004_00007=1) + (x_00004_00008=1) + (x_00004_00009=1) + (x_00005_00007=1) + (x_00005_00008=1) + (x_00005_00009=1))=tv=1))
c Var 'aux247' direct represents '0' with '-1547'
c Var 'aux247' direct represents '1' with '1547'
c Var 'aux247' order represents '1' with '1'
c Var 'aux247' order represents '0' with '-1547'
c Encoding variable: aux248 with domain: bool (representing constraint (((x_00006_00007=2) + (x_00006_00008=2) + (x_00006_00009=2) + (x_00004_00007=2) + (x_00004_00008=2) + (x_00004_00009=2) + (x_00005_00007=2) + (x_00005_00008=2) + (x_00005_00009=2))=tv=1))
c Var 'aux248' direct represents '0' with '-1548'
c Var 'aux248' direct represents '1' with '1548'
c Var 'aux248' order represents '1' with '1'
c Var 'aux248' order represents '0' with '-1548'
c Encoding variable: aux249 with domain: bool (representing constraint (((x_00006_00007=3) + (x_00006_00008=3) + (x_00006_00009=3) + (x_00004_00007=3) + (x_00004_00008=3) + (x_00004_00009=3) + (x_00005_00007=3) + (x_00005_00008=3) + (x_00005_00009=3))=tv=1))
c Var 'aux249' direct represents '0' with '-1549'
c Var 'aux249' direct represents '1' with '1549'
c Var 'aux249' order represents '1' with '1'
c Var 'aux249' order represents '0' with '-1549'
c Encoding variable: aux250 with domain: bool (representing constraint (((x_00006_00007=4) + (x_00006_00008=4) + (x_00006_00009=4) + (x_00004_00007=4) + (x_00004_00008=4) + (x_00004_00009=4) + (x_00005_00007=4) + (x_00005_00008=4) + (x_00005_00009=4))=tv=1))
c Var 'aux250' direct represents '0' with '-1550'
c Var 'aux250' direct represents '1' with '1550'
c Var 'aux250' order represents '1' with '1'
c Var 'aux250' order represents '0' with '-1550'
c Encoding variable: aux251 with domain: bool (representing constraint (((x_00006_00007=5) + (x_00006_00008=5) + (x_00006_00009=5) + (x_00004_00007=5) + (x_00004_00008=5) + (x_00004_00009=5) + (x_00005_00007=5) + (x_00005_00008=5) + (x_00005_00009=5))=tv=1))
c Var 'aux251' direct represents '0' with '-1551'
c Var 'aux251' direct represents '1' with '1551'
c Var 'aux251' order represents '1' with '1'
c Var 'aux251' order represents '0' with '-1551'
c Encoding variable: aux252 with domain: bool (representing constraint (((x_00006_00007=6) + (x_00006_00008=6) + (x_00006_00009=6) + (x_00004_00007=6) + (x_00004_00008=6) + (x_00004_00009=6) + (x_00005_00007=6) + (x_00005_00008=6) + (x_00005_00009=6))=tv=1))
c Var 'aux252' direct represents '0' with '-1552'
c Var 'aux252' direct represents '1' with '1552'
c Var 'aux252' order represents '1' with '1'
c Var 'aux252' order represents '0' with '-1552'
c Encoding variable: aux253 with domain: bool (representing constraint (((x_00006_00007=7) + (x_00006_00008=7) + (x_00006_00009=7) + (x_00004_00007=7) + (x_00004_00008=7) + (x_00004_00009=7) + (x_00005_00007=7) + (x_00005_00008=7) + (x_00005_00009=7))=tv=1))
c Var 'aux253' direct represents '0' with '-1553'
c Var 'aux253' direct represents '1' with '1553'
c Var 'aux253' order represents '1' with '1'
c Var 'aux253' order represents '0' with '-1553'
c Encoding variable: aux254 with domain: bool (representing constraint (((x_00006_00007=8) + (x_00006_00008=8) + (x_00006_00009=8) + (x_00004_00007=8) + (x_00004_00008=8) + (x_00004_00009=8) + (x_00005_00007=8) + (x_00005_00008=8) + (x_00005_00009=8))=tv=1))
c Var 'aux254' direct represents '0' with '-1554'
c Var 'aux254' direct represents '1' with '1554'
c Var 'aux254' order represents '1' with '1'
c Var 'aux254' order represents '0' with '-1554'
c Encoding variable: aux255 with domain: bool (representing constraint (((x_00006_00007=9) + (x_00006_00008=9) + (x_00006_00009=9) + (x_00004_00007=9) + (x_00004_00008=9) + (x_00004_00009=9) + (x_00005_00007=9) + (x_00005_00008=9) + (x_00005_00009=9))=tv=1))
c Var 'aux255' direct represents '0' with '-1555'
c Var 'aux255' direct represents '1' with '1555'
c Var 'aux255' order represents '1' with '1'
c Var 'aux255' order represents '0' with '-1555'
c Encoding variable: aux256 with domain: bool (representing constraint (((x_00008_00001=1) + (x_00008_00002=1) + (x_00008_00003=1) + (x_00009_00001=1) + (x_00009_00002=1) + (x_00009_00003=1) + (x_00007_00001=1) + (x_00007_00002=1) + (x_00007_00003=1))=tv=1))
c Var 'aux256' direct represents '0' with '-1556'
c Var 'aux256' direct represents '1' with '1556'
c Var 'aux256' order represents '1' with '1'
c Var 'aux256' order represents '0' with '-1556'
c Encoding variable: aux257 with domain: bool (representing constraint (((x_00008_00001=2) + (x_00008_00002=2) + (x_00008_00003=2) + (x_00009_00001=2) + (x_00009_00002=2) + (x_00009_00003=2) + (x_00007_00001=2) + (x_00007_00002=2) + (x_00007_00003=2))=tv=1))
c Var 'aux257' direct represents '0' with '-1557'
c Var 'aux257' direct represents '1' with '1557'
c Var 'aux257' order represents '1' with '1'
c Var 'aux257' order represents '0' with '-1557'
c Encoding variable: aux258 with domain: bool (representing constraint (((x_00008_00001=3) + (x_00008_00002=3) + (x_00008_00003=3) + (x_00009_00001=3) + (x_00009_00002=3) + (x_00009_00003=3) + (x_00007_00001=3) + (x_00007_00002=3) + (x_00007_00003=3))=tv=1))
c Var 'aux258' direct represents '0' with '-1558'
c Var 'aux258' direct represents '1' with '1558'
c Var 'aux258' order represents '1' with '1'
c Var 'aux258' order represents '0' with '-1558'
c Encoding variable: aux259 with domain: bool (representing constraint (((x_00008_00001=4) + (x_00008_00002=4) + (x_00008_00003=4) + (x_00009_00001=4) + (x_00009_00002=4) + (x_00009_00003=4) + (x_00007_00001=4) + (x_00007_00002=4) + (x_00007_00003=4))=tv=1))
c Var 'aux259' direct represents '0' with '-1559'
c Var 'aux259' direct represents '1' with '1559'
c Var 'aux259' order represents '1' with '1'
c Var 'aux259' order represents '0' with '-1559'
c Encoding variable: aux260 with domain: bool (representing constraint (((x_00008_00001=5) + (x_00008_00002=5) + (x_00008_00003=5) + (x_00009_00001=5) + (x_00009_00002=5) + (x_00009_00003=5) + (x_00007_00001=5) + (x_00007_00002=5) + (x_00007_00003=5))=tv=1))
c Var 'aux260' direct represents '0' with '-1560'
c Var 'aux260' direct represents '1' with '1560'
c Var 'aux260' order represents '1' with '1'
c Var 'aux260' order represents '0' with '-1560'
c Encoding variable: aux261 with domain: bool (representing constraint (((x_00008_00001=6) + (x_00008_00002=6) + (x_00008_00003=6) + (x_00009_00001=6) + (x_00009_00002=6) + (x_00009_00003=6) + (x_00007_00001=6) + (x_00007_00002=6) + (x_00007_00003=6))=tv=1))
c Var 'aux261' direct represents '0' with '-1561'
c Var 'aux261' direct represents '1' with '1561'
c Var 'aux261' order represents '1' with '1'
c Var 'aux261' order represents '0' with '-1561'
c Encoding variable: aux262 with domain: bool (representing constraint (((x_00008_00001=7) + (x_00008_00002=7) + (x_00008_00003=7) + (x_00009_00001=7) + (x_00009_00002=7) + (x_00009_00003=7) + (x_00007_00001=7) + (x_00007_00002=7) + (x_00007_00003=7))=tv=1))
c Var 'aux262' direct represents '0' with '-1562'
c Var 'aux262' direct represents '1' with '1562'
c Var 'aux262' order represents '1' with '1'
c Var 'aux262' order represents '0' with '-1562'
c Encoding variable: aux263 with domain: bool (representing constraint (((x_00008_00001=8) + (x_00008_00002=8) + (x_00008_00003=8) + (x_00009_00001=8) + (x_00009_00002=8) + (x_00009_00003=8) + (x_00007_00001=8) + (x_00007_00002=8) + (x_00007_00003=8))=tv=1))
c Var 'aux263' direct represents '0' with '-1563'
c Var 'aux263' direct represents '1' with '1563'
c Var 'aux263' order represents '1' with '1'
c Var 'aux263' order represents '0' with '-1563'
c Encoding variable: aux264 with domain: bool (representing constraint (((x_00008_00001=9) + (x_00008_00002=9) + (x_00008_00003=9) + (x_00009_00001=9) + (x_00009_00002=9) + (x_00009_00003=9) + (x_00007_00001=9) + (x_00007_00002=9) + (x_00007_00003=9))=tv=1))
c Var 'aux264' direct represents '0' with '-1564'
c Var 'aux264' direct represents '1' with '1564'
c Var 'aux264' order represents '1' with '1'
c Var 'aux264' order represents '0' with '-1564'
c Encoding variable: aux265 with domain: bool (representing constraint (((x_00008_00004=1) + (x_00008_00005=1) + (x_00008_00006=1) + (x_00009_00004=1) + (x_00009_00005=1) + (x_00009_00006=1) + (x_00007_00004=1) + (x_00007_00005=1) + (x_00007_00006=1))=tv=1))
c Var 'aux265' direct represents '0' with '-1565'
c Var 'aux265' direct represents '1' with '1565'
c Var 'aux265' order represents '1' with '1'
c Var 'aux265' order represents '0' with '-1565'
c Encoding variable: aux266 with domain: bool (representing constraint (((x_00008_00004=2) + (x_00008_00005=2) + (x_00008_00006=2) + (x_00009_00004=2) + (x_00009_00005=2) + (x_00009_00006=2) + (x_00007_00004=2) + (x_00007_00005=2) + (x_00007_00006=2))=tv=1))
c Var 'aux266' direct represents '0' with '-1566'
c Var 'aux266' direct represents '1' with '1566'
c Var 'aux266' order represents '1' with '1'
c Var 'aux266' order represents '0' with '-1566'
c Encoding variable: aux267 with domain: bool (representing constraint (((x_00008_00004=3) + (x_00008_00005=3) + (x_00008_00006=3) + (x_00009_00004=3) + (x_00009_00005=3) + (x_00009_00006=3) + (x_00007_00004=3) + (x_00007_00005=3) + (x_00007_00006=3))=tv=1))
c Var 'aux267' direct represents '0' with '-1567'
c Var 'aux267' direct represents '1' with '1567'
c Var 'aux267' order represents '1' with '1'
c Var 'aux267' order represents '0' with '-1567'
c Encoding variable: aux268 with domain: bool (representing constraint (((x_00008_00004=4) + (x_00008_00005=4) + (x_00008_00006=4) + (x_00009_00004=4) + (x_00009_00005=4) + (x_00009_00006=4) + (x_00007_00004=4) + (x_00007_00005=4) + (x_00007_00006=4))=tv=1))
c Var 'aux268' direct represents '0' with '-1568'
c Var 'aux268' direct represents '1' with '1568'
c Var 'aux268' order represents '1' with '1'
c Var 'aux268' order represents '0' with '-1568'
c Encoding variable: aux269 with domain: bool (representing constraint (((x_00008_00004=5) + (x_00008_00005=5) + (x_00008_00006=5) + (x_00009_00004=5) + (x_00009_00005=5) + (x_00009_00006=5) + (x_00007_00004=5) + (x_00007_00005=5) + (x_00007_00006=5))=tv=1))
c Var 'aux269' direct represents '0' with '-1569'
c Var 'aux269' direct represents '1' with '1569'
c Var 'aux269' order represents '1' with '1'
c Var 'aux269' order represents '0' with '-1569'
c Encoding variable: aux270 with domain: bool (representing constraint (((x_00008_00004=6) + (x_00008_00005=6) + (x_00008_00006=6) + (x_00009_00004=6) + (x_00009_00005=6) + (x_00009_00006=6) + (x_00007_00004=6) + (x_00007_00005=6) + (x_00007_00006=6))=tv=1))
c Var 'aux270' direct represents '0' with '-1570'
c Var 'aux270' direct represents '1' with '1570'
c Var 'aux270' order represents '1' with '1'
c Var 'aux270' order represents '0' with '-1570'
c Encoding variable: aux271 with domain: bool (representing constraint (((x_00008_00004=7) + (x_00008_00005=7) + (x_00008_00006=7) + (x_00009_00004=7) + (x_00009_00005=7) + (x_00009_00006=7) + (x_00007_00004=7) + (x_00007_00005=7) + (x_00007_00006=7))=tv=1))
c Var 'aux271' direct represents '0' with '-1571'
c Var 'aux271' direct represents '1' with '1571'
c Var 'aux271' order represents '1' with '1'
c Var 'aux271' order represents '0' with '-1571'
c Encoding variable: aux272 with domain: bool (representing constraint (((x_00008_00004=8) + (x_00008_00005=8) + (x_00008_00006=8) + (x_00009_00004=8) + (x_00009_00005=8) + (x_00009_00006=8) + (x_00007_00004=8) + (x_00007_00005=8) + (x_00007_00006=8))=tv=1))
c Var 'aux272' direct represents '0' with '-1572'
c Var 'aux272' direct represents '1' with '1572'
c Var 'aux272' order represents '1' with '1'
c Var 'aux272' order represents '0' with '-1572'
c Encoding variable: aux273 with domain: bool (representing constraint (((x_00008_00004=9) + (x_00008_00005=9) + (x_00008_00006=9) + (x_00009_00004=9) + (x_00009_00005=9) + (x_00009_00006=9) + (x_00007_00004=9) + (x_00007_00005=9) + (x_00007_00006=9))=tv=1))
c Var 'aux273' direct represents '0' with '-1573'
c Var 'aux273' direct represents '1' with '1573'
c Var 'aux273' order represents '1' with '1'
c Var 'aux273' order represents '0' with '-1573'
c Encoding variable: aux274 with domain: bool (representing constraint (((x_00008_00007=1) + (x_00008_00008=1) + (x_00008_00009=1) + (x_00009_00007=1) + (x_00009_00008=1) + (x_00009_00009=1) + (x_00007_00007=1) + (x_00007_00008=1) + (x_00007_00009=1))=tv=1))
c Var 'aux274' direct represents '0' with '-1574'
c Var 'aux274' direct represents '1' with '1574'
c Var 'aux274' order represents '1' with '1'
c Var 'aux274' order represents '0' with '-1574'
c Encoding variable: aux275 with domain: bool (representing constraint (((x_00008_00007=2) + (x_00008_00008=2) + (x_00008_00009=2) + (x_00009_00007=2) + (x_00009_00008=2) + (x_00009_00009=2) + (x_00007_00007=2) + (x_00007_00008=2) + (x_00007_00009=2))=tv=1))
c Var 'aux275' direct represents '0' with '-1575'
c Var 'aux275' direct represents '1' with '1575'
c Var 'aux275' order represents '1' with '1'
c Var 'aux275' order represents '0' with '-1575'
c Encoding variable: aux276 with domain: bool (representing constraint (((x_00008_00007=3) + (x_00008_00008=3) + (x_00008_00009=3) + (x_00009_00007=3) + (x_00009_00008=3) + (x_00009_00009=3) + (x_00007_00007=3) + (x_00007_00008=3) + (x_00007_00009=3))=tv=1))
c Var 'aux276' direct represents '0' with '-1576'
c Var 'aux276' direct represents '1' with '1576'
c Var 'aux276' order represents '1' with '1'
c Var 'aux276' order represents '0' with '-1576'
c Encoding variable: aux277 with domain: bool (representing constraint (((x_00008_00007=4) + (x_00008_00008=4) + (x_00008_00009=4) + (x_00009_00007=4) + (x_00009_00008=4) + (x_00009_00009=4) + (x_00007_00007=4) + (x_00007_00008=4) + (x_00007_00009=4))=tv=1))
c Var 'aux277' direct represents '0' with '-1577'
c Var 'aux277' direct represents '1' with '1577'
c Var 'aux277' order represents '1' with '1'
c Var 'aux277' order represents '0' with '-1577'
c Encoding variable: aux278 with domain: bool (representing constraint (((x_00008_00007=5) + (x_00008_00008=5) + (x_00008_00009=5) + (x_00009_00007=5) + (x_00009_00008=5) + (x_00009_00009=5) + (x_00007_00007=5) + (x_00007_00008=5) + (x_00007_00009=5))=tv=1))
c Var 'aux278' direct represents '0' with '-1578'
c Var 'aux278' direct represents '1' with '1578'
c Var 'aux278' order represents '1' with '1'
c Var 'aux278' order represents '0' with '-1578'
c Encoding variable: aux279 with domain: bool (representing constraint (((x_00008_00007=6) + (x_00008_00008=6) + (x_00008_00009=6) + (x_00009_00007=6) + (x_00009_00008=6) + (x_00009_00009=6) + (x_00007_00007=6) + (x_00007_00008=6) + (x_00007_00009=6))=tv=1))
c Var 'aux279' direct represents '0' with '-1579'
c Var 'aux279' direct represents '1' with '1579'
c Var 'aux279' order represents '1' with '1'
c Var 'aux279' order represents '0' with '-1579'
c Encoding variable: aux280 with domain: bool (representing constraint (((x_00008_00007=7) + (x_00008_00008=7) + (x_00008_00009=7) + (x_00009_00007=7) + (x_00009_00008=7) + (x_00009_00009=7) + (x_00007_00007=7) + (x_00007_00008=7) + (x_00007_00009=7))=tv=1))
c Var 'aux280' direct represents '0' with '-1580'
c Var 'aux280' direct represents '1' with '1580'
c Var 'aux280' order represents '1' with '1'
c Var 'aux280' order represents '0' with '-1580'
c Encoding variable: aux281 with domain: bool (representing constraint (((x_00008_00007=8) + (x_00008_00008=8) + (x_00008_00009=8) + (x_00009_00007=8) + (x_00009_00008=8) + (x_00009_00009=8) + (x_00007_00007=8) + (x_00007_00008=8) + (x_00007_00009=8))=tv=1))
c Var 'aux281' direct represents '0' with '-1581'
c Var 'aux281' direct represents '1' with '1581'
c Var 'aux281' order represents '1' with '1'
c Var 'aux281' order represents '0' with '-1581'
c Encoding variable: aux282 with domain: bool (representing constraint (((x_00008_00007=9) + (x_00008_00008=9) + (x_00008_00009=9) + (x_00009_00007=9) + (x_00009_00008=9) + (x_00009_00009=9) + (x_00007_00007=9) + (x_00007_00008=9) + (x_00007_00009=9))=tv=1))
c Var 'aux282' direct represents '0' with '-1582'
c Var 'aux282' direct represents '1' with '1582'
c Var 'aux282' order represents '1' with '1'
c Var 'aux282' order represents '0' with '-1582'
c Encoding variable: aux283 with domain: bool (representing constraint (((x_00001_00004=1) + (x_00001_00005=1) + (x_00002_00004=1))<=1))
c Var 'aux283' direct represents '0' with '-1583'
c Var 'aux283' direct represents '1' with '1583'
c Var 'aux283' order represents '1' with '1'
c Var 'aux283' order represents '0' with '-1583'
c Encoding variable: aux284 with domain: bool (representing constraint (((x_00001_00004=2) + (x_00001_00005=2) + (x_00002_00004=2))<=1))
c Var 'aux284' direct represents '0' with '-1584'
c Var 'aux284' direct represents '1' with '1584'
c Var 'aux284' order represents '1' with '1'
c Var 'aux284' order represents '0' with '-1584'
c Encoding variable: aux285 with domain: bool (representing constraint (((x_00001_00004=3) + (x_00001_00005=3) + (x_00002_00004=3))<=1))
c Var 'aux285' direct represents '0' with '-1585'
c Var 'aux285' direct represents '1' with '1585'
c Var 'aux285' order represents '1' with '1'
c Var 'aux285' order represents '0' with '-1585'
c Encoding variable: aux286 with domain: bool (representing constraint (((x_00001_00004=4) + (x_00001_00005=4) + (x_00002_00004=4))<=1))
c Var 'aux286' direct represents '0' with '-1586'
c Var 'aux286' direct represents '1' with '1586'
c Var 'aux286' order represents '1' with '1'
c Var 'aux286' order represents '0' with '-1586'
c Encoding variable: aux287 with domain: bool (representing constraint (((x_00001_00004=5) + (x_00001_00005=5) + (x_00002_00004=5))<=1))
c Var 'aux287' direct represents '0' with '-1587'
c Var 'aux287' direct represents '1' with '1587'
c Var 'aux287' order represents '1' with '1'
c Var 'aux287' order represents '0' with '-1587'
c Encoding variable: aux288 with domain: bool (representing constraint (((x_00001_00004=6) + (x_00001_00005=6) + (x_00002_00004=6))<=1))
c Var 'aux288' direct represents '0' with '-1588'
c Var 'aux288' direct represents '1' with '1588'
c Var 'aux288' order represents '1' with '1'
c Var 'aux288' order represents '0' with '-1588'
c Encoding variable: aux289 with domain: bool (representing constraint (((x_00001_00004=7) + (x_00001_00005=7) + (x_00002_00004=7))<=1))
c Var 'aux289' direct represents '0' with '-1589'
c Var 'aux289' direct represents '1' with '1589'
c Var 'aux289' order represents '1' with '1'
c Var 'aux289' order represents '0' with '-1589'
c Encoding variable: aux290 with domain: bool (representing constraint (((x_00001_00004=8) + (x_00001_00005=8) + (x_00002_00004=8))<=1))
c Var 'aux290' direct represents '0' with '-1590'
c Var 'aux290' direct represents '1' with '1590'
c Var 'aux290' order represents '1' with '1'
c Var 'aux290' order represents '0' with '-1590'
c Encoding variable: aux291 with domain: bool (representing constraint (((x_00001_00004=9) + (x_00001_00005=9) + (x_00002_00004=9))<=1))
c Var 'aux291' direct represents '0' with '-1591'
c Var 'aux291' direct represents '1' with '1591'
c Var 'aux291' order represents '1' with '1'
c Var 'aux291' order represents '0' with '-1591'
c Encoding variable: aux292 with domain: bool (representing constraint (((x_00001_00008=1) + (x_00001_00009=1) + (x_00002_00009=1))<=1))
c Var 'aux292' direct represents '0' with '-1592'
c Var 'aux292' direct represents '1' with '1592'
c Var 'aux292' order represents '1' with '1'
c Var 'aux292' order represents '0' with '-1592'
c Encoding variable: aux293 with domain: bool (representing constraint (((x_00001_00008=2) + (x_00001_00009=2) + (x_00002_00009=2))<=1))
c Var 'aux293' direct represents '0' with '-1593'
c Var 'aux293' direct represents '1' with '1593'
c Var 'aux293' order represents '1' with '1'
c Var 'aux293' order represents '0' with '-1593'
c Encoding variable: aux294 with domain: bool (representing constraint (((x_00001_00008=3) + (x_00001_00009=3) + (x_00002_00009=3))<=1))
c Var 'aux294' direct represents '0' with '-1594'
c Var 'aux294' direct represents '1' with '1594'
c Var 'aux294' order represents '1' with '1'
c Var 'aux294' order represents '0' with '-1594'
c Encoding variable: aux295 with domain: bool (representing constraint (((x_00001_00008=4) + (x_00001_00009=4) + (x_00002_00009=4))<=1))
c Var 'aux295' direct represents '0' with '-1595'
c Var 'aux295' direct represents '1' with '1595'
c Var 'aux295' order represents '1' with '1'
c Var 'aux295' order represents '0' with '-1595'
c Encoding variable: aux296 with domain: bool (representing constraint (((x_00001_00008=5) + (x_00001_00009=5) + (x_00002_00009=5))<=1))
c Var 'aux296' direct represents '0' with '-1596'
c Var 'aux296' direct represents '1' with '1596'
c Var 'aux296' order represents '1' with '1'
c Var 'aux296' order represents '0' with '-1596'
c Encoding variable: aux297 with domain: bool (representing constraint (((x_00001_00008=6) + (x_00001_00009=6) + (x_00002_00009=6))<=1))
c Var 'aux297' direct represents '0' with '-1597'
c Var 'aux297' direct represents '1' with '1597'
c Var 'aux297' order represents '1' with '1'
c Var 'aux297' order represents '0' with '-1597'
c Encoding variable: aux298 with domain: bool (representing constraint (((x_00001_00008=7) + (x_00001_00009=7) + (x_00002_00009=7))<=1))
c Var 'aux298' direct represents '0' with '-1598'
c Var 'aux298' direct represents '1' with '1598'
c Var 'aux298' order represents '1' with '1'
c Var 'aux298' order represents '0' with '-1598'
c Encoding variable: aux299 with domain: bool (representing constraint (((x_00001_00008=8) + (x_00001_00009=8) + (x_00002_00009=8))<=1))
c Var 'aux299' direct represents '0' with '-1599'
c Var 'aux299' direct represents '1' with '1599'
c Var 'aux299' order represents '1' with '1'
c Var 'aux299' order represents '0' with '-1599'
c Encoding variable: aux300 with domain: bool (representing constraint (((x_00001_00008=9) + (x_00001_00009=9) + (x_00002_00009=9))<=1))
c Var 'aux300' direct represents '0' with '-1600'
c Var 'aux300' direct represents '1' with '1600'
c Var 'aux300' order represents '1' with '1'
c Var 'aux300' order represents '0' with '-1600'
c Encoding variable: aux301 with domain: bool (representing constraint (((x_00003_00008=1) + (x_00002_00007=1) + (x_00002_00008=1))<=1))
c Var 'aux301' direct represents '0' with '-1601'
c Var 'aux301' direct represents '1' with '1601'
c Var 'aux301' order represents '1' with '1'
c Var 'aux301' order represents '0' with '-1601'
c Encoding variable: aux302 with domain: bool (representing constraint (((x_00003_00008=2) + (x_00002_00007=2) + (x_00002_00008=2))<=1))
c Var 'aux302' direct represents '0' with '-1602'
c Var 'aux302' direct represents '1' with '1602'
c Var 'aux302' order represents '1' with '1'
c Var 'aux302' order represents '0' with '-1602'
c Encoding variable: aux303 with domain: bool (representing constraint (((x_00003_00008=3) + (x_00002_00007=3) + (x_00002_00008=3))<=1))
c Var 'aux303' direct represents '0' with '-1603'
c Var 'aux303' direct represents '1' with '1603'
c Var 'aux303' order represents '1' with '1'
c Var 'aux303' order represents '0' with '-1603'
c Encoding variable: aux304 with domain: bool (representing constraint (((x_00003_00008=4) + (x_00002_00007=4) + (x_00002_00008=4))<=1))
c Var 'aux304' direct represents '0' with '-1604'
c Var 'aux304' direct represents '1' with '1604'
c Var 'aux304' order represents '1' with '1'
c Var 'aux304' order represents '0' with '-1604'
c Encoding variable: aux305 with domain: bool (representing constraint (((x_00003_00008=5) + (x_00002_00007=5) + (x_00002_00008=5))<=1))
c Var 'aux305' direct represents '0' with '-1605'
c Var 'aux305' direct represents '1' with '1605'
c Var 'aux305' order represents '1' with '1'
c Var 'aux305' order represents '0' with '-1605'
c Encoding variable: aux306 with domain: bool (representing constraint (((x_00003_00008=6) + (x_00002_00007=6) + (x_00002_00008=6))<=1))
c Var 'aux306' direct represents '0' with '-1606'
c Var 'aux306' direct represents '1' with '1606'
c Var 'aux306' order represents '1' with '1'
c Var 'aux306' order represents '0' with '-1606'
c Encoding variable: aux307 with domain: bool (representing constraint (((x_00003_00008=7) + (x_00002_00007=7) + (x_00002_00008=7))<=1))
c Var 'aux307' direct represents '0' with '-1607'
c Var 'aux307' direct represents '1' with '1607'
c Var 'aux307' order represents '1' with '1'
c Var 'aux307' order represents '0' with '-1607'
c Encoding variable: aux308 with domain: bool (representing constraint (((x_00003_00008=8) + (x_00002_00007=8) + (x_00002_00008=8))<=1))
c Var 'aux308' direct represents '0' with '-1608'
c Var 'aux308' direct represents '1' with '1608'
c Var 'aux308' order represents '1' with '1'
c Var 'aux308' order represents '0' with '-1608'
c Encoding variable: aux309 with domain: bool (representing constraint (((x_00003_00008=9) + (x_00002_00007=9) + (x_00002_00008=9))<=1))
c Var 'aux309' direct represents '0' with '-1609'
c Var 'aux309' direct represents '1' with '1609'
c Var 'aux309' order represents '1' with '1'
c Var 'aux309' order represents '0' with '-1609'
c Encoding variable: aux310 with domain: bool (representing constraint (((x_00003_00001=1) + (x_00006_00001=1) + (x_00004_00001=1) + (x_00005_00001=1))<=1))
c Var 'aux310' direct represents '0' with '-1610'
c Var 'aux310' direct represents '1' with '1610'
c Var 'aux310' order represents '1' with '1'
c Var 'aux310' order represents '0' with '-1610'
c Encoding variable: aux311 with domain: bool (representing constraint (((x_00003_00001=2) + (x_00006_00001=2) + (x_00004_00001=2) + (x_00005_00001=2))<=1))
c Var 'aux311' direct represents '0' with '-1611'
c Var 'aux311' direct represents '1' with '1611'
c Var 'aux311' order represents '1' with '1'
c Var 'aux311' order represents '0' with '-1611'
c Encoding variable: aux312 with domain: bool (representing constraint (((x_00003_00001=3) + (x_00006_00001=3) + (x_00004_00001=3) + (x_00005_00001=3))<=1))
c Var 'aux312' direct represents '0' with '-1612'
c Var 'aux312' direct represents '1' with '1612'
c Var 'aux312' order represents '1' with '1'
c Var 'aux312' order represents '0' with '-1612'
c Encoding variable: aux313 with domain: bool (representing constraint (((x_00003_00001=4) + (x_00006_00001=4) + (x_00004_00001=4) + (x_00005_00001=4))<=1))
c Var 'aux313' direct represents '0' with '-1613'
c Var 'aux313' direct represents '1' with '1613'
c Var 'aux313' order represents '1' with '1'
c Var 'aux313' order represents '0' with '-1613'
c Encoding variable: aux314 with domain: bool (representing constraint (((x_00003_00001=5) + (x_00006_00001=5) + (x_00004_00001=5) + (x_00005_00001=5))<=1))
c Var 'aux314' direct represents '0' with '-1614'
c Var 'aux314' direct represents '1' with '1614'
c Var 'aux314' order represents '1' with '1'
c Var 'aux314' order represents '0' with '-1614'
c Encoding variable: aux315 with domain: bool (representing constraint (((x_00003_00001=6) + (x_00006_00001=6) + (x_00004_00001=6) + (x_00005_00001=6))<=1))
c Var 'aux315' direct represents '0' with '-1615'
c Var 'aux315' direct represents '1' with '1615'
c Var 'aux315' order represents '1' with '1'
c Var 'aux315' order represents '0' with '-1615'
c Encoding variable: aux316 with domain: bool (representing constraint (((x_00003_00001=7) + (x_00006_00001=7) + (x_00004_00001=7) + (x_00005_00001=7))<=1))
c Var 'aux316' direct represents '0' with '-1616'
c Var 'aux316' direct represents '1' with '1616'
c Var 'aux316' order represents '1' with '1'
c Var 'aux316' order represents '0' with '-1616'
c Encoding variable: aux317 with domain: bool (representing constraint (((x_00003_00001=8) + (x_00006_00001=8) + (x_00004_00001=8) + (x_00005_00001=8))<=1))
c Var 'aux317' direct represents '0' with '-1617'
c Var 'aux317' direct represents '1' with '1617'
c Var 'aux317' order represents '1' with '1'
c Var 'aux317' order represents '0' with '-1617'
c Encoding variable: aux318 with domain: bool (representing constraint (((x_00003_00001=9) + (x_00006_00001=9) + (x_00004_00001=9) + (x_00005_00001=9))<=1))
c Var 'aux318' direct represents '0' with '-1618'
c Var 'aux318' direct represents '1' with '1618'
c Var 'aux318' order represents '1' with '1'
c Var 'aux318' order represents '0' with '-1618'
c Encoding variable: aux319 with domain: bool (representing constraint (((x_00003_00002=1) + (x_00004_00002=1) + (x_00005_00002=1))<=1))
c Var 'aux319' direct represents '0' with '-1619'
c Var 'aux319' direct represents '1' with '1619'
c Var 'aux319' order represents '1' with '1'
c Var 'aux319' order represents '0' with '-1619'
c Encoding variable: aux320 with domain: bool (representing constraint (((x_00003_00002=2) + (x_00004_00002=2) + (x_00005_00002=2))<=1))
c Var 'aux320' direct represents '0' with '-1620'
c Var 'aux320' direct represents '1' with '1620'
c Var 'aux320' order represents '1' with '1'
c Var 'aux320' order represents '0' with '-1620'
c Encoding variable: aux321 with domain: bool (representing constraint (((x_00003_00002=3) + (x_00004_00002=3) + (x_00005_00002=3))<=1))
c Var 'aux321' direct represents '0' with '-1621'
c Var 'aux321' direct represents '1' with '1621'
c Var 'aux321' order represents '1' with '1'
c Var 'aux321' order represents '0' with '-1621'
c Encoding variable: aux322 with domain: bool (representing constraint (((x_00003_00002=4) + (x_00004_00002=4) + (x_00005_00002=4))<=1))
c Var 'aux322' direct represents '0' with '-1622'
c Var 'aux322' direct represents '1' with '1622'
c Var 'aux322' order represents '1' with '1'
c Var 'aux322' order represents '0' with '-1622'
c Encoding variable: aux323 with domain: bool (representing constraint (((x_00003_00002=5) + (x_00004_00002=5) + (x_00005_00002=5))<=1))
c Var 'aux323' direct represents '0' with '-1623'
c Var 'aux323' direct represents '1' with '1623'
c Var 'aux323' order represents '1' with '1'
c Var 'aux323' order represents '0' with '-1623'
c Encoding variable: aux324 with domain: bool (representing constraint (((x_00003_00002=6) + (x_00004_00002=6) + (x_00005_00002=6))<=1))
c Var 'aux324' direct represents '0' with '-1624'
c Var 'aux324' direct represents '1' with '1624'
c Var 'aux324' order represents '1' with '1'
c Var 'aux324' order represents '0' with '-1624'
c Encoding variable: aux325 with domain: bool (representing constraint (((x_00003_00002=7) + (x_00004_00002=7) + (x_00005_00002=7))<=1))
c Var 'aux325' direct represents '0' with '-1625'
c Var 'aux325' direct represents '1' with '1625'
c Var 'aux325' order represents '1' with '1'
c Var 'aux325' order represents '0' with '-1625'
c Encoding variable: aux326 with domain: bool (representing constraint (((x_00003_00002=8) + (x_00004_00002=8) + (x_00005_00002=8))<=1))
c Var 'aux326' direct represents '0' with '-1626'
c Var 'aux326' direct represents '1' with '1626'
c Var 'aux326' order represents '1' with '1'
c Var 'aux326' order represents '0' with '-1626'
c Encoding variable: aux327 with domain: bool (representing constraint (((x_00003_00002=9) + (x_00004_00002=9) + (x_00005_00002=9))<=1))
c Var 'aux327' direct represents '0' with '-1627'
c Var 'aux327' direct represents '1' with '1627'
c Var 'aux327' order represents '1' with '1'
c Var 'aux327' order represents '0' with '-1627'
c Encoding variable: aux328 with domain: bool (representing constraint (((x_00003_00003=1) + (x_00003_00004=1) + (x_00004_00004=1))<=1))
c Var 'aux328' direct represents '0' with '-1628'
c Var 'aux328' direct represents '1' with '1628'
c Var 'aux328' order represents '1' with '1'
c Var 'aux328' order represents '0' with '-1628'
c Encoding variable: aux329 with domain: bool (representing constraint (((x_00003_00003=2) + (x_00003_00004=2) + (x_00004_00004=2))<=1))
c Var 'aux329' direct represents '0' with '-1629'
c Var 'aux329' direct represents '1' with '1629'
c Var 'aux329' order represents '1' with '1'
c Var 'aux329' order represents '0' with '-1629'
c Encoding variable: aux330 with domain: bool (representing constraint (((x_00003_00003=3) + (x_00003_00004=3) + (x_00004_00004=3))<=1))
c Var 'aux330' direct represents '0' with '-1630'
c Var 'aux330' direct represents '1' with '1630'
c Var 'aux330' order represents '1' with '1'
c Var 'aux330' order represents '0' with '-1630'
c Encoding variable: aux331 with domain: bool (representing constraint (((x_00003_00003=4) + (x_00003_00004=4) + (x_00004_00004=4))<=1))
c Var 'aux331' direct represents '0' with '-1631'
c Var 'aux331' direct represents '1' with '1631'
c Var 'aux331' order represents '1' with '1'
c Var 'aux331' order represents '0' with '-1631'
c Encoding variable: aux332 with domain: bool (representing constraint (((x_00003_00003=5) + (x_00003_00004=5) + (x_00004_00004=5))<=1))
c Var 'aux332' direct represents '0' with '-1632'
c Var 'aux332' direct represents '1' with '1632'
c Var 'aux332' order represents '1' with '1'
c Var 'aux332' order represents '0' with '-1632'
c Encoding variable: aux333 with domain: bool (representing constraint (((x_00003_00003=6) + (x_00003_00004=6) + (x_00004_00004=6))<=1))
c Var 'aux333' direct represents '0' with '-1633'
c Var 'aux333' direct represents '1' with '1633'
c Var 'aux333' order represents '1' with '1'
c Var 'aux333' order represents '0' with '-1633'
c Encoding variable: aux334 with domain: bool (representing constraint (((x_00003_00003=7) + (x_00003_00004=7) + (x_00004_00004=7))<=1))
c Var 'aux334' direct represents '0' with '-1634'
c Var 'aux334' direct represents '1' with '1634'
c Var 'aux334' order represents '1' with '1'
c Var 'aux334' order represents '0' with '-1634'
c Encoding variable: aux335 with domain: bool (representing constraint (((x_00003_00003=8) + (x_00003_00004=8) + (x_00004_00004=8))<=1))
c Var 'aux335' direct represents '0' with '-1635'
c Var 'aux335' direct represents '1' with '1635'
c Var 'aux335' order represents '1' with '1'
c Var 'aux335' order represents '0' with '-1635'
c Encoding variable: aux336 with domain: bool (representing constraint (((x_00003_00003=9) + (x_00003_00004=9) + (x_00004_00004=9))<=1))
c Var 'aux336' direct represents '0' with '-1636'
c Var 'aux336' direct represents '1' with '1636'
c Var 'aux336' order represents '1' with '1'
c Var 'aux336' order represents '0' with '-1636'
c Encoding variable: aux337 with domain: bool (representing constraint (((x_00003_00006=1) + (x_00003_00007=1) + (x_00004_00006=1) + (x_00004_00007=1))<=1))
c Var 'aux337' direct represents '0' with '-1637'
c Var 'aux337' direct represents '1' with '1637'
c Var 'aux337' order represents '1' with '1'
c Var 'aux337' order represents '0' with '-1637'
c Encoding variable: aux338 with domain: bool (representing constraint (((x_00003_00006=2) + (x_00003_00007=2) + (x_00004_00006=2) + (x_00004_00007=2))<=1))
c Var 'aux338' direct represents '0' with '-1638'
c Var 'aux338' direct represents '1' with '1638'
c Var 'aux338' order represents '1' with '1'
c Var 'aux338' order represents '0' with '-1638'
c Encoding variable: aux339 with domain: bool (representing constraint (((x_00003_00006=3) + (x_00003_00007=3) + (x_00004_00006=3) + (x_00004_00007=3))<=1))
c Var 'aux339' direct represents '0' with '-1639'
c Var 'aux339' direct represents '1' with '1639'
c Var 'aux339' order represents '1' with '1'
c Var 'aux339' order represents '0' with '-1639'
c Encoding variable: aux340 with domain: bool (representing constraint (((x_00003_00006=4) + (x_00003_00007=4) + (x_00004_00006=4) + (x_00004_00007=4))<=1))
c Var 'aux340' direct represents '0' with '-1640'
c Var 'aux340' direct represents '1' with '1640'
c Var 'aux340' order represents '1' with '1'
c Var 'aux340' order represents '0' with '-1640'
c Encoding variable: aux341 with domain: bool (representing constraint (((x_00003_00006=5) + (x_00003_00007=5) + (x_00004_00006=5) + (x_00004_00007=5))<=1))
c Var 'aux341' direct represents '0' with '-1641'
c Var 'aux341' direct represents '1' with '1641'
c Var 'aux341' order represents '1' with '1'
c Var 'aux341' order represents '0' with '-1641'
c Encoding variable: aux342 with domain: bool (representing constraint (((x_00003_00006=6) + (x_00003_00007=6) + (x_00004_00006=6) + (x_00004_00007=6))<=1))
c Var 'aux342' direct represents '0' with '-1642'
c Var 'aux342' direct represents '1' with '1642'
c Var 'aux342' order represents '1' with '1'
c Var 'aux342' order represents '0' with '-1642'
c Encoding variable: aux343 with domain: bool (representing constraint (((x_00003_00006=7) + (x_00003_00007=7) + (x_00004_00006=7) + (x_00004_00007=7))<=1))
c Var 'aux343' direct represents '0' with '-1643'
c Var 'aux343' direct represents '1' with '1643'
c Var 'aux343' order represents '1' with '1'
c Var 'aux343' order represents '0' with '-1643'
c Encoding variable: aux344 with domain: bool (representing constraint (((x_00003_00006=8) + (x_00003_00007=8) + (x_00004_00006=8) + (x_00004_00007=8))<=1))
c Var 'aux344' direct represents '0' with '-1644'
c Var 'aux344' direct represents '1' with '1644'
c Var 'aux344' order represents '1' with '1'
c Var 'aux344' order represents '0' with '-1644'
c Encoding variable: aux345 with domain: bool (representing constraint (((x_00003_00006=9) + (x_00003_00007=9) + (x_00004_00006=9) + (x_00004_00007=9))<=1))
c Var 'aux345' direct represents '0' with '-1645'
c Var 'aux345' direct represents '1' with '1645'
c Var 'aux345' order represents '1' with '1'
c Var 'aux345' order represents '0' with '-1645'
c Encoding variable: aux346 with domain: bool (representing constraint (((x_00006_00003=1) + (x_00004_00003=1) + (x_00007_00003=1) + (x_00007_00004=1) + (x_00007_00005=1) + (x_00007_00006=1) + (x_00005_00003=1))<=1))
c Var 'aux346' direct represents '0' with '-1646'
c Var 'aux346' direct represents '1' with '1646'
c Var 'aux346' order represents '1' with '1'
c Var 'aux346' order represents '0' with '-1646'
c Encoding variable: aux347 with domain: bool (representing constraint (((x_00006_00003=2) + (x_00004_00003=2) + (x_00007_00003=2) + (x_00007_00004=2) + (x_00007_00005=2) + (x_00007_00006=2) + (x_00005_00003=2))<=1))
c Var 'aux347' direct represents '0' with '-1647'
c Var 'aux347' direct represents '1' with '1647'
c Var 'aux347' order represents '1' with '1'
c Var 'aux347' order represents '0' with '-1647'
c Encoding variable: aux348 with domain: bool (representing constraint (((x_00006_00003=3) + (x_00004_00003=3) + (x_00007_00003=3) + (x_00007_00004=3) + (x_00007_00005=3) + (x_00007_00006=3) + (x_00005_00003=3))<=1))
c Var 'aux348' direct represents '0' with '-1648'
c Var 'aux348' direct represents '1' with '1648'
c Var 'aux348' order represents '1' with '1'
c Var 'aux348' order represents '0' with '-1648'
c Encoding variable: aux349 with domain: bool (representing constraint (((x_00006_00003=4) + (x_00004_00003=4) + (x_00007_00003=4) + (x_00007_00004=4) + (x_00007_00005=4) + (x_00007_00006=4) + (x_00005_00003=4))<=1))
c Var 'aux349' direct represents '0' with '-1649'
c Var 'aux349' direct represents '1' with '1649'
c Var 'aux349' order represents '1' with '1'
c Var 'aux349' order represents '0' with '-1649'
c Encoding variable: aux350 with domain: bool (representing constraint (((x_00006_00003=5) + (x_00004_00003=5) + (x_00007_00003=5) + (x_00007_00004=5) + (x_00007_00005=5) + (x_00007_00006=5) + (x_00005_00003=5))<=1))
c Var 'aux350' direct represents '0' with '-1650'
c Var 'aux350' direct represents '1' with '1650'
c Var 'aux350' order represents '1' with '1'
c Var 'aux350' order represents '0' with '-1650'
c Encoding variable: aux351 with domain: bool (representing constraint (((x_00006_00003=6) + (x_00004_00003=6) + (x_00007_00003=6) + (x_00007_00004=6) + (x_00007_00005=6) + (x_00007_00006=6) + (x_00005_00003=6))<=1))
c Var 'aux351' direct represents '0' with '-1651'
c Var 'aux351' direct represents '1' with '1651'
c Var 'aux351' order represents '1' with '1'
c Var 'aux351' order represents '0' with '-1651'
c Encoding variable: aux352 with domain: bool (representing constraint (((x_00006_00003=7) + (x_00004_00003=7) + (x_00007_00003=7) + (x_00007_00004=7) + (x_00007_00005=7) + (x_00007_00006=7) + (x_00005_00003=7))<=1))
c Var 'aux352' direct represents '0' with '-1652'
c Var 'aux352' direct represents '1' with '1652'
c Var 'aux352' order represents '1' with '1'
c Var 'aux352' order represents '0' with '-1652'
c Encoding variable: aux353 with domain: bool (representing constraint (((x_00006_00003=8) + (x_00004_00003=8) + (x_00007_00003=8) + (x_00007_00004=8) + (x_00007_00005=8) + (x_00007_00006=8) + (x_00005_00003=8))<=1))
c Var 'aux353' direct represents '0' with '-1653'
c Var 'aux353' direct represents '1' with '1653'
c Var 'aux353' order represents '1' with '1'
c Var 'aux353' order represents '0' with '-1653'
c Encoding variable: aux354 with domain: bool (representing constraint (((x_00006_00003=9) + (x_00004_00003=9) + (x_00007_00003=9) + (x_00007_00004=9) + (x_00007_00005=9) + (x_00007_00006=9) + (x_00005_00003=9))<=1))
c Var 'aux354' direct represents '0' with '-1654'
c Var 'aux354' direct represents '1' with '1654'
c Var 'aux354' order represents '1' with '1'
c Var 'aux354' order represents '0' with '-1654'
c Encoding variable: aux355 with domain: bool (representing constraint (((x_00006_00004=1) + (x_00006_00005=1) + (x_00005_00004=1) + (x_00005_00005=1))<=1))
c Var 'aux355' direct represents '0' with '-1655'
c Var 'aux355' direct represents '1' with '1655'
c Var 'aux355' order represents '1' with '1'
c Var 'aux355' order represents '0' with '-1655'
c Encoding variable: aux356 with domain: bool (representing constraint (((x_00006_00004=2) + (x_00006_00005=2) + (x_00005_00004=2) + (x_00005_00005=2))<=1))
c Var 'aux356' direct represents '0' with '-1656'
c Var 'aux356' direct represents '1' with '1656'
c Var 'aux356' order represents '1' with '1'
c Var 'aux356' order represents '0' with '-1656'
c Encoding variable: aux357 with domain: bool (representing constraint (((x_00006_00004=3) + (x_00006_00005=3) + (x_00005_00004=3) + (x_00005_00005=3))<=1))
c Var 'aux357' direct represents '0' with '-1657'
c Var 'aux357' direct represents '1' with '1657'
c Var 'aux357' order represents '1' with '1'
c Var 'aux357' order represents '0' with '-1657'
c Encoding variable: aux358 with domain: bool (representing constraint (((x_00006_00004=4) + (x_00006_00005=4) + (x_00005_00004=4) + (x_00005_00005=4))<=1))
c Var 'aux358' direct represents '0' with '-1658'
c Var 'aux358' direct represents '1' with '1658'
c Var 'aux358' order represents '1' with '1'
c Var 'aux358' order represents '0' with '-1658'
c Encoding variable: aux359 with domain: bool (representing constraint (((x_00006_00004=5) + (x_00006_00005=5) + (x_00005_00004=5) + (x_00005_00005=5))<=1))
c Var 'aux359' direct represents '0' with '-1659'
c Var 'aux359' direct represents '1' with '1659'
c Var 'aux359' order represents '1' with '1'
c Var 'aux359' order represents '0' with '-1659'
c Encoding variable: aux360 with domain: bool (representing constraint (((x_00006_00004=6) + (x_00006_00005=6) + (x_00005_00004=6) + (x_00005_00005=6))<=1))
c Var 'aux360' direct represents '0' with '-1660'
c Var 'aux360' direct represents '1' with '1660'
c Var 'aux360' order represents '1' with '1'
c Var 'aux360' order represents '0' with '-1660'
c Encoding variable: aux361 with domain: bool (representing constraint (((x_00006_00004=7) + (x_00006_00005=7) + (x_00005_00004=7) + (x_00005_00005=7))<=1))
c Var 'aux361' direct represents '0' with '-1661'
c Var 'aux361' direct represents '1' with '1661'
c Var 'aux361' order represents '1' with '1'
c Var 'aux361' order represents '0' with '-1661'
c Encoding variable: aux362 with domain: bool (representing constraint (((x_00006_00004=8) + (x_00006_00005=8) + (x_00005_00004=8) + (x_00005_00005=8))<=1))
c Var 'aux362' direct represents '0' with '-1662'
c Var 'aux362' direct represents '1' with '1662'
c Var 'aux362' order represents '1' with '1'
c Var 'aux362' order represents '0' with '-1662'
c Encoding variable: aux363 with domain: bool (representing constraint (((x_00006_00004=9) + (x_00006_00005=9) + (x_00005_00004=9) + (x_00005_00005=9))<=1))
c Var 'aux363' direct represents '0' with '-1663'
c Var 'aux363' direct represents '1' with '1663'
c Var 'aux363' order represents '1' with '1'
c Var 'aux363' order represents '0' with '-1663'
c Encoding variable: aux364 with domain: bool (representing constraint (((x_00006_00008=1) + (x_00006_00009=1) + (x_00005_00009=1))<=1))
c Var 'aux364' direct represents '0' with '-1664'
c Var 'aux364' direct represents '1' with '1664'
c Var 'aux364' order represents '1' with '1'
c Var 'aux364' order represents '0' with '-1664'
c Encoding variable: aux365 with domain: bool (representing constraint (((x_00006_00008=2) + (x_00006_00009=2) + (x_00005_00009=2))<=1))
c Var 'aux365' direct represents '0' with '-1665'
c Var 'aux365' direct represents '1' with '1665'
c Var 'aux365' order represents '1' with '1'
c Var 'aux365' order represents '0' with '-1665'
c Encoding variable: aux366 with domain: bool (representing constraint (((x_00006_00008=3) + (x_00006_00009=3) + (x_00005_00009=3))<=1))
c Var 'aux366' direct represents '0' with '-1666'
c Var 'aux366' direct represents '1' with '1666'
c Var 'aux366' order represents '1' with '1'
c Var 'aux366' order represents '0' with '-1666'
c Encoding variable: aux367 with domain: bool (representing constraint (((x_00006_00008=4) + (x_00006_00009=4) + (x_00005_00009=4))<=1))
c Var 'aux367' direct represents '0' with '-1667'
c Var 'aux367' direct represents '1' with '1667'
c Var 'aux367' order represents '1' with '1'
c Var 'aux367' order represents '0' with '-1667'
c Encoding variable: aux368 with domain: bool (representing constraint (((x_00006_00008=5) + (x_00006_00009=5) + (x_00005_00009=5))<=1))
c Var 'aux368' direct represents '0' with '-1668'
c Var 'aux368' direct represents '1' with '1668'
c Var 'aux368' order represents '1' with '1'
c Var 'aux368' order represents '0' with '-1668'
c Encoding variable: aux369 with domain: bool (representing constraint (((x_00006_00008=6) + (x_00006_00009=6) + (x_00005_00009=6))<=1))
c Var 'aux369' direct represents '0' with '-1669'
c Var 'aux369' direct represents '1' with '1669'
c Var 'aux369' order represents '1' with '1'
c Var 'aux369' order represents '0' with '-1669'
c Encoding variable: aux370 with domain: bool (representing constraint (((x_00006_00008=7) + (x_00006_00009=7) + (x_00005_00009=7))<=1))
c Var 'aux370' direct represents '0' with '-1670'
c Var 'aux370' direct represents '1' with '1670'
c Var 'aux370' order represents '1' with '1'
c Var 'aux370' order represents '0' with '-1670'
c Encoding variable: aux371 with domain: bool (representing constraint (((x_00006_00008=8) + (x_00006_00009=8) + (x_00005_00009=8))<=1))
c Var 'aux371' direct represents '0' with '-1671'
c Var 'aux371' direct represents '1' with '1671'
c Var 'aux371' order represents '1' with '1'
c Var 'aux371' order represents '0' with '-1671'
c Encoding variable: aux372 with domain: bool (representing constraint (((x_00006_00008=9) + (x_00006_00009=9) + (x_00005_00009=9))<=1))
c Var 'aux372' direct represents '0' with '-1672'
c Var 'aux372' direct represents '1' with '1672'
c Var 'aux372' order represents '1' with '1'
c Var 'aux372' order represents '0' with '-1672'
c Encoding variable: aux373 with domain: bool (representing constraint (((x_00006_00002=1) + (x_00007_00001=1) + (x_00007_00002=1))<=1))
c Var 'aux373' direct represents '0' with '-1673'
c Var 'aux373' direct represents '1' with '1673'
c Var 'aux373' order represents '1' with '1'
c Var 'aux373' order represents '0' with '-1673'
c Encoding variable: aux374 with domain: bool (representing constraint (((x_00006_00002=2) + (x_00007_00001=2) + (x_00007_00002=2))<=1))
c Var 'aux374' direct represents '0' with '-1674'
c Var 'aux374' direct represents '1' with '1674'
c Var 'aux374' order represents '1' with '1'
c Var 'aux374' order represents '0' with '-1674'
c Encoding variable: aux375 with domain: bool (representing constraint (((x_00006_00002=3) + (x_00007_00001=3) + (x_00007_00002=3))<=1))
c Var 'aux375' direct represents '0' with '-1675'
c Var 'aux375' direct represents '1' with '1675'
c Var 'aux375' order represents '1' with '1'
c Var 'aux375' order represents '0' with '-1675'
c Encoding variable: aux376 with domain: bool (representing constraint (((x_00006_00002=4) + (x_00007_00001=4) + (x_00007_00002=4))<=1))
c Var 'aux376' direct represents '0' with '-1676'
c Var 'aux376' direct represents '1' with '1676'
c Var 'aux376' order represents '1' with '1'
c Var 'aux376' order represents '0' with '-1676'
c Encoding variable: aux377 with domain: bool (representing constraint (((x_00006_00002=5) + (x_00007_00001=5) + (x_00007_00002=5))<=1))
c Var 'aux377' direct represents '0' with '-1677'
c Var 'aux377' direct represents '1' with '1677'
c Var 'aux377' order represents '1' with '1'
c Var 'aux377' order represents '0' with '-1677'
c Encoding variable: aux378 with domain: bool (representing constraint (((x_00006_00002=6) + (x_00007_00001=6) + (x_00007_00002=6))<=1))
c Var 'aux378' direct represents '0' with '-1678'
c Var 'aux378' direct represents '1' with '1678'
c Var 'aux378' order represents '1' with '1'
c Var 'aux378' order represents '0' with '-1678'
c Encoding variable: aux379 with domain: bool (representing constraint (((x_00006_00002=7) + (x_00007_00001=7) + (x_00007_00002=7))<=1))
c Var 'aux379' direct represents '0' with '-1679'
c Var 'aux379' direct represents '1' with '1679'
c Var 'aux379' order represents '1' with '1'
c Var 'aux379' order represents '0' with '-1679'
c Encoding variable: aux380 with domain: bool (representing constraint (((x_00006_00002=8) + (x_00007_00001=8) + (x_00007_00002=8))<=1))
c Var 'aux380' direct represents '0' with '-1680'
c Var 'aux380' direct represents '1' with '1680'
c Var 'aux380' order represents '1' with '1'
c Var 'aux380' order represents '0' with '-1680'
c Encoding variable: aux381 with domain: bool (representing constraint (((x_00006_00002=9) + (x_00007_00001=9) + (x_00007_00002=9))<=1))
c Var 'aux381' direct represents '0' with '-1681'
c Var 'aux381' direct represents '1' with '1681'
c Var 'aux381' order represents '1' with '1'
c Var 'aux381' order represents '0' with '-1681'
c Encoding variable: aux382 with domain: bool (representing constraint (((x_00006_00006=1) + (x_00006_00007=1) + (x_00007_00007=1))<=1))
c Var 'aux382' direct represents '0' with '-1682'
c Var 'aux382' direct represents '1' with '1682'
c Var 'aux382' order represents '1' with '1'
c Var 'aux382' order represents '0' with '-1682'
c Encoding variable: aux383 with domain: bool (representing constraint (((x_00006_00006=2) + (x_00006_00007=2) + (x_00007_00007=2))<=1))
c Var 'aux383' direct represents '0' with '-1683'
c Var 'aux383' direct represents '1' with '1683'
c Var 'aux383' order represents '1' with '1'
c Var 'aux383' order represents '0' with '-1683'
c Encoding variable: aux384 with domain: bool (representing constraint (((x_00006_00006=3) + (x_00006_00007=3) + (x_00007_00007=3))<=1))
c Var 'aux384' direct represents '0' with '-1684'
c Var 'aux384' direct represents '1' with '1684'
c Var 'aux384' order represents '1' with '1'
c Var 'aux384' order represents '0' with '-1684'
c Encoding variable: aux385 with domain: bool (representing constraint (((x_00006_00006=4) + (x_00006_00007=4) + (x_00007_00007=4))<=1))
c Var 'aux385' direct represents '0' with '-1685'
c Var 'aux385' direct represents '1' with '1685'
c Var 'aux385' order represents '1' with '1'
c Var 'aux385' order represents '0' with '-1685'
c Encoding variable: aux386 with domain: bool (representing constraint (((x_00006_00006=5) + (x_00006_00007=5) + (x_00007_00007=5))<=1))
c Var 'aux386' direct represents '0' with '-1686'
c Var 'aux386' direct represents '1' with '1686'
c Var 'aux386' order represents '1' with '1'
c Var 'aux386' order represents '0' with '-1686'
c Encoding variable: aux387 with domain: bool (representing constraint (((x_00006_00006=6) + (x_00006_00007=6) + (x_00007_00007=6))<=1))
c Var 'aux387' direct represents '0' with '-1687'
c Var 'aux387' direct represents '1' with '1687'
c Var 'aux387' order represents '1' with '1'
c Var 'aux387' order represents '0' with '-1687'
c Encoding variable: aux388 with domain: bool (representing constraint (((x_00006_00006=7) + (x_00006_00007=7) + (x_00007_00007=7))<=1))
c Var 'aux388' direct represents '0' with '-1688'
c Var 'aux388' direct represents '1' with '1688'
c Var 'aux388' order represents '1' with '1'
c Var 'aux388' order represents '0' with '-1688'
c Encoding variable: aux389 with domain: bool (representing constraint (((x_00006_00006=8) + (x_00006_00007=8) + (x_00007_00007=8))<=1))
c Var 'aux389' direct represents '0' with '-1689'
c Var 'aux389' direct represents '1' with '1689'
c Var 'aux389' order represents '1' with '1'
c Var 'aux389' order represents '0' with '-1689'
c Encoding variable: aux390 with domain: bool (representing constraint (((x_00006_00006=9) + (x_00006_00007=9) + (x_00007_00007=9))<=1))
c Var 'aux390' direct represents '0' with '-1690'
c Var 'aux390' direct represents '1' with '1690'
c Var 'aux390' order represents '1' with '1'
c Var 'aux390' order represents '0' with '-1690'
c Encoding variable: aux391 with domain: bool (representing constraint (((x_00008_00001=1) + (x_00008_00002=1) + (x_00009_00001=1) + (x_00009_00002=1))<=1))
c Var 'aux391' direct represents '0' with '-1691'
c Var 'aux391' direct represents '1' with '1691'
c Var 'aux391' order represents '1' with '1'
c Var 'aux391' order represents '0' with '-1691'
c Encoding variable: aux392 with domain: bool (representing constraint (((x_00008_00001=2) + (x_00008_00002=2) + (x_00009_00001=2) + (x_00009_00002=2))<=1))
c Var 'aux392' direct represents '0' with '-1692'
c Var 'aux392' direct represents '1' with '1692'
c Var 'aux392' order represents '1' with '1'
c Var 'aux392' order represents '0' with '-1692'
c Encoding variable: aux393 with domain: bool (representing constraint (((x_00008_00001=3) + (x_00008_00002=3) + (x_00009_00001=3) + (x_00009_00002=3))<=1))
c Var 'aux393' direct represents '0' with '-1693'
c Var 'aux393' direct represents '1' with '1693'
c Var 'aux393' order represents '1' with '1'
c Var 'aux393' order represents '0' with '-1693'
c Encoding variable: aux394 with domain: bool (representing constraint (((x_00008_00001=4) + (x_00008_00002=4) + (x_00009_00001=4) + (x_00009_00002=4))<=1))
c Var 'aux394' direct represents '0' with '-1694'
c Var 'aux394' direct represents '1' with '1694'
c Var 'aux394' order represents '1' with '1'
c Var 'aux394' order represents '0' with '-1694'
c Encoding variable: aux395 with domain: bool (representing constraint (((x_00008_00001=5) + (x_00008_00002=5) + (x_00009_00001=5) + (x_00009_00002=5))<=1))
c Var 'aux395' direct represents '0' with '-1695'
c Var 'aux395' direct represents '1' with '1695'
c Var 'aux395' order represents '1' with '1'
c Var 'aux395' order represents '0' with '-1695'
c Encoding variable: aux396 with domain: bool (representing constraint (((x_00008_00001=6) + (x_00008_00002=6) + (x_00009_00001=6) + (x_00009_00002=6))<=1))
c Var 'aux396' direct represents '0' with '-1696'
c Var 'aux396' direct represents '1' with '1696'
c Var 'aux396' order represents '1' with '1'
c Var 'aux396' order represents '0' with '-1696'
c Encoding variable: aux397 with domain: bool (representing constraint (((x_00008_00001=7) + (x_00008_00002=7) + (x_00009_00001=7) + (x_00009_00002=7))<=1))
c Var 'aux397' direct represents '0' with '-1697'
c Var 'aux397' direct represents '1' with '1697'
c Var 'aux397' order represents '1' with '1'
c Var 'aux397' order represents '0' with '-1697'
c Encoding variable: aux398 with domain: bool (representing constraint (((x_00008_00001=8) + (x_00008_00002=8) + (x_00009_00001=8) + (x_00009_00002=8))<=1))
c Var 'aux398' direct represents '0' with '-1698'
c Var 'aux398' direct represents '1' with '1698'
c Var 'aux398' order represents '1' with '1'
c Var 'aux398' order represents '0' with '-1698'
c Encoding variable: aux399 with domain: bool (representing constraint (((x_00008_00001=9) + (x_00008_00002=9) + (x_00009_00001=9) + (x_00009_00002=9))<=1))
c Var 'aux399' direct represents '0' with '-1699'
c Var 'aux399' direct represents '1' with '1699'
c Var 'aux399' order represents '1' with '1'
c Var 'aux399' order represents '0' with '-1699'
c Encoding variable: aux400 with domain: bool (representing constraint (((x_00008_00003=1) + (x_00008_00004=1) + (x_00009_00003=1))<=1))
c Var 'aux400' direct represents '0' with '-1700'
c Var 'aux400' direct represents '1' with '1700'
c Var 'aux400' order represents '1' with '1'
c Var 'aux400' order represents '0' with '-1700'
c Encoding variable: aux401 with domain: bool (representing constraint (((x_00008_00003=2) + (x_00008_00004=2) + (x_00009_00003=2))<=1))
c Var 'aux401' direct represents '0' with '-1701'
c Var 'aux401' direct represents '1' with '1701'
c Var 'aux401' order represents '1' with '1'
c Var 'aux401' order represents '0' with '-1701'
c Encoding variable: aux402 with domain: bool (representing constraint (((x_00008_00003=3) + (x_00008_00004=3) + (x_00009_00003=3))<=1))
c Var 'aux402' direct represents '0' with '-1702'
c Var 'aux402' direct represents '1' with '1702'
c Var 'aux402' order represents '1' with '1'
c Var 'aux402' order represents '0' with '-1702'
c Encoding variable: aux403 with domain: bool (representing constraint (((x_00008_00003=4) + (x_00008_00004=4) + (x_00009_00003=4))<=1))
c Var 'aux403' direct represents '0' with '-1703'
c Var 'aux403' direct represents '1' with '1703'
c Var 'aux403' order represents '1' with '1'
c Var 'aux403' order represents '0' with '-1703'
c Encoding variable: aux404 with domain: bool (representing constraint (((x_00008_00003=5) + (x_00008_00004=5) + (x_00009_00003=5))<=1))
c Var 'aux404' direct represents '0' with '-1704'
c Var 'aux404' direct represents '1' with '1704'
c Var 'aux404' order represents '1' with '1'
c Var 'aux404' order represents '0' with '-1704'
c Encoding variable: aux405 with domain: bool (representing constraint (((x_00008_00003=6) + (x_00008_00004=6) + (x_00009_00003=6))<=1))
c Var 'aux405' direct represents '0' with '-1705'
c Var 'aux405' direct represents '1' with '1705'
c Var 'aux405' order represents '1' with '1'
c Var 'aux405' order represents '0' with '-1705'
c Encoding variable: aux406 with domain: bool (representing constraint (((x_00008_00003=7) + (x_00008_00004=7) + (x_00009_00003=7))<=1))
c Var 'aux406' direct represents '0' with '-1706'
c Var 'aux406' direct represents '1' with '1706'
c Var 'aux406' order represents '1' with '1'
c Var 'aux406' order represents '0' with '-1706'
c Encoding variable: aux407 with domain: bool (representing constraint (((x_00008_00003=8) + (x_00008_00004=8) + (x_00009_00003=8))<=1))
c Var 'aux407' direct represents '0' with '-1707'
c Var 'aux407' direct represents '1' with '1707'
c Var 'aux407' order represents '1' with '1'
c Var 'aux407' order represents '0' with '-1707'
c Encoding variable: aux408 with domain: bool (representing constraint (((x_00008_00003=9) + (x_00008_00004=9) + (x_00009_00003=9))<=1))
c Var 'aux408' direct represents '0' with '-1708'
c Var 'aux408' direct represents '1' with '1708'
c Var 'aux408' order represents '1' with '1'
c Var 'aux408' order represents '0' with '-1708'
c Encoding variable: aux409 with domain: bool (representing constraint (((x_00008_00005=1) + (x_00008_00006=1) + (x_00008_00007=1))<=1))
c Var 'aux409' direct represents '0' with '-1709'
c Var 'aux409' direct represents '1' with '1709'
c Var 'aux409' order represents '1' with '1'
c Var 'aux409' order represents '0' with '-1709'
c Encoding variable: aux410 with domain: bool (representing constraint (((x_00008_00005=2) + (x_00008_00006=2) + (x_00008_00007=2))<=1))
c Var 'aux410' direct represents '0' with '-1710'
c Var 'aux410' direct represents '1' with '1710'
c Var 'aux410' order represents '1' with '1'
c Var 'aux410' order represents '0' with '-1710'
c Encoding variable: aux411 with domain: bool (representing constraint (((x_00008_00005=3) + (x_00008_00006=3) + (x_00008_00007=3))<=1))
c Var 'aux411' direct represents '0' with '-1711'
c Var 'aux411' direct represents '1' with '1711'
c Var 'aux411' order represents '1' with '1'
c Var 'aux411' order represents '0' with '-1711'
c Encoding variable: aux412 with domain: bool (representing constraint (((x_00008_00005=4) + (x_00008_00006=4) + (x_00008_00007=4))<=1))
c Var 'aux412' direct represents '0' with '-1712'
c Var 'aux412' direct represents '1' with '1712'
c Var 'aux412' order represents '1' with '1'
c Var 'aux412' order represents '0' with '-1712'
c Encoding variable: aux413 with domain: bool (representing constraint (((x_00008_00005=5) + (x_00008_00006=5) + (x_00008_00007=5))<=1))
c Var 'aux413' direct represents '0' with '-1713'
c Var 'aux413' direct represents '1' with '1713'
c Var 'aux413' order represents '1' with '1'
c Var 'aux413' order represents '0' with '-1713'
c Encoding variable: aux414 with domain: bool (representing constraint (((x_00008_00005=6) + (x_00008_00006=6) + (x_00008_00007=6))<=1))
c Var 'aux414' direct represents '0' with '-1714'
c Var 'aux414' direct represents '1' with '1714'
c Var 'aux414' order represents '1' with '1'
c Var 'aux414' order represents '0' with '-1714'
c Encoding variable: aux415 with domain: bool (representing constraint (((x_00008_00005=7) + (x_00008_00006=7) + (x_00008_00007=7))<=1))
c Var 'aux415' direct represents '0' with '-1715'
c Var 'aux415' direct represents '1' with '1715'
c Var 'aux415' order represents '1' with '1'
c Var 'aux415' order represents '0' with '-1715'
c Encoding variable: aux416 with domain: bool (representing constraint (((x_00008_00005=8) + (x_00008_00006=8) + (x_00008_00007=8))<=1))
c Var 'aux416' direct represents '0' with '-1716'
c Var 'aux416' direct represents '1' with '1716'
c Var 'aux416' order represents '1' with '1'
c Var 'aux416' order represents '0' with '-1716'
c Encoding variable: aux417 with domain: bool (representing constraint (((x_00008_00005=9) + (x_00008_00006=9) + (x_00008_00007=9))<=1))
c Var 'aux417' direct represents '0' with '-1717'
c Var 'aux417' direct represents '1' with '1717'
c Var 'aux417' order represents '1' with '1'
c Var 'aux417' order represents '0' with '-1717'
c Encoding variable: aux418 with domain: bool (representing constraint (((x_00009_00004=1) + (x_00009_00005=1) + (x_00009_00006=1) + (x_00009_00007=1))<=1))
c Var 'aux418' direct represents '0' with '-1718'
c Var 'aux418' direct represents '1' with '1718'
c Var 'aux418' order represents '1' with '1'
c Var 'aux418' order represents '0' with '-1718'
c Encoding variable: aux419 with domain: bool (representing constraint (((x_00009_00004=2) + (x_00009_00005=2) + (x_00009_00006=2) + (x_00009_00007=2))<=1))
c Var 'aux419' direct represents '0' with '-1719'
c Var 'aux419' direct represents '1' with '1719'
c Var 'aux419' order represents '1' with '1'
c Var 'aux419' order represents '0' with '-1719'
c Encoding variable: aux420 with domain: bool (representing constraint (((x_00009_00004=3) + (x_00009_00005=3) + (x_00009_00006=3) + (x_00009_00007=3))<=1))
c Var 'aux420' direct represents '0' with '-1720'
c Var 'aux420' direct represents '1' with '1720'
c Var 'aux420' order represents '1' with '1'
c Var 'aux420' order represents '0' with '-1720'
c Encoding variable: aux421 with domain: bool (representing constraint (((x_00009_00004=4) + (x_00009_00005=4) + (x_00009_00006=4) + (x_00009_00007=4))<=1))
c Var 'aux421' direct represents '0' with '-1721'
c Var 'aux421' direct represents '1' with '1721'
c Var 'aux421' order represents '1' with '1'
c Var 'aux421' order represents '0' with '-1721'
c Encoding variable: aux422 with domain: bool (representing constraint (((x_00009_00004=5) + (x_00009_00005=5) + (x_00009_00006=5) + (x_00009_00007=5))<=1))
c Var 'aux422' direct represents '0' with '-1722'
c Var 'aux422' direct represents '1' with '1722'
c Var 'aux422' order represents '1' with '1'
c Var 'aux422' order represents '0' with '-1722'
c Encoding variable: aux423 with domain: bool (representing constraint (((x_00009_00004=6) + (x_00009_00005=6) + (x_00009_00006=6) + (x_00009_00007=6))<=1))
c Var 'aux423' direct represents '0' with '-1723'
c Var 'aux423' direct represents '1' with '1723'
c Var 'aux423' order represents '1' with '1'
c Var 'aux423' order represents '0' with '-1723'
c Encoding variable: aux424 with domain: bool (representing constraint (((x_00009_00004=7) + (x_00009_00005=7) + (x_00009_00006=7) + (x_00009_00007=7))<=1))
c Var 'aux424' direct represents '0' with '-1724'
c Var 'aux424' direct represents '1' with '1724'
c Var 'aux424' order represents '1' with '1'
c Var 'aux424' order represents '0' with '-1724'
c Encoding variable: aux425 with domain: bool (representing constraint (((x_00009_00004=8) + (x_00009_00005=8) + (x_00009_00006=8) + (x_00009_00007=8))<=1))
c Var 'aux425' direct represents '0' with '-1725'
c Var 'aux425' direct represents '1' with '1725'
c Var 'aux425' order represents '1' with '1'
c Var 'aux425' order represents '0' with '-1725'
c Encoding variable: aux426 with domain: bool (representing constraint (((x_00009_00004=9) + (x_00009_00005=9) + (x_00009_00006=9) + (x_00009_00007=9))<=1))
c Var 'aux426' direct represents '0' with '-1726'
c Var 'aux426' direct represents '1' with '1726'
c Var 'aux426' order represents '1' with '1'
c Var 'aux426' order represents '0' with '-1726'
c Encoding variable: aux427 with domain: int(0..16) (representing constraint (shift(x_00003_00001, -1) + shift(x_00006_00001, -1)))
c Both direct and order encoding.
c Var 'aux427' order represents '0' with '1727'
c Var 'aux427' direct represents '0' with '1727'
c Var 'aux427' order represents '1' with '1728'
-1727 1728 0
c Var 'aux427' direct represents '1' with '1729'
1727 -1728 1729 0
-1729 1728 0
-1729 -1727 0
c Var 'aux427' order represents '2' with '1730'
-1728 1730 0
c Var 'aux427' direct represents '2' with '1731'
1728 -1730 1731 0
-1731 1730 0
-1731 -1728 0
c Var 'aux427' order represents '3' with '1732'
-1730 1732 0
c Var 'aux427' direct represents '3' with '1733'
1730 -1732 1733 0
-1733 1732 0
-1733 -1730 0
c Var 'aux427' order represents '4' with '1734'
-1732 1734 0
c Var 'aux427' direct represents '4' with '1735'
1732 -1734 1735 0
-1735 1734 0
-1735 -1732 0
c Var 'aux427' order represents '5' with '1736'
-1734 1736 0
c Var 'aux427' direct represents '5' with '1737'
1734 -1736 1737 0
-1737 1736 0
-1737 -1734 0
c Var 'aux427' order represents '6' with '1738'
-1736 1738 0
c Var 'aux427' direct represents '6' with '1739'
1736 -1738 1739 0
-1739 1738 0
-1739 -1736 0
c Var 'aux427' order represents '7' with '1740'
-1738 1740 0
c Var 'aux427' direct represents '7' with '1741'
1738 -1740 1741 0
-1741 1740 0
-1741 -1738 0
c Var 'aux427' order represents '8' with '1742'
-1740 1742 0
c Var 'aux427' direct represents '8' with '1743'
1740 -1742 1743 0
-1743 1742 0
-1743 -1740 0
c Var 'aux427' order represents '9' with '1744'
-1742 1744 0
c Var 'aux427' direct represents '9' with '1745'
1742 -1744 1745 0
-1745 1744 0
-1745 -1742 0
c Var 'aux427' order represents '10' with '1746'
-1744 1746 0
c Var 'aux427' direct represents '10' with '1747'
1744 -1746 1747 0
-1747 1746 0
-1747 -1744 0
c Var 'aux427' order represents '11' with '1748'
-1746 1748 0
c Var 'aux427' direct represents '11' with '1749'
1746 -1748 1749 0
-1749 1748 0
-1749 -1746 0
c Var 'aux427' order represents '12' with '1750'
-1748 1750 0
c Var 'aux427' direct represents '12' with '1751'
1748 -1750 1751 0
-1751 1750 0
-1751 -1748 0
c Var 'aux427' order represents '13' with '1752'
-1750 1752 0
c Var 'aux427' direct represents '13' with '1753'
1750 -1752 1753 0
-1753 1752 0
-1753 -1750 0
c Var 'aux427' order represents '14' with '1754'
-1752 1754 0
c Var 'aux427' direct represents '14' with '1755'
1752 -1754 1755 0
-1755 1754 0
-1755 -1752 0
c Var 'aux427' order represents '15' with '1756'
-1754 1756 0
c Var 'aux427' direct represents '15' with '1757'
1754 -1756 1757 0
-1757 1756 0
-1757 -1754 0
c Var 'aux427' direct represents '16' with '-1756'
1727 1729 1731 1733 1735 1737 1739 1741 1743 1745 1747 1749 1751 1753 1755 1757 -1756 0
c Encoding variable: aux428 with domain: int(0..16) (representing constraint (shift(x_00003_00006, -1) + shift(x_00004_00007, -1)))
c Both direct and order encoding.
c Var 'aux428' order represents '0' with '1758'
c Var 'aux428' direct represents '0' with '1758'
c Var 'aux428' order represents '1' with '1759'
-1758 1759 0
c Var 'aux428' direct represents '1' with '1760'
1758 -1759 1760 0
-1760 1759 0
-1760 -1758 0
c Var 'aux428' order represents '2' with '1761'
-1759 1761 0
c Var 'aux428' direct represents '2' with '1762'
1759 -1761 1762 0
-1762 1761 0
-1762 -1759 0
c Var 'aux428' order represents '3' with '1763'
-1761 1763 0
c Var 'aux428' direct represents '3' with '1764'
1761 -1763 1764 0
-1764 1763 0
-1764 -1761 0
c Var 'aux428' order represents '4' with '1765'
-1763 1765 0
c Var 'aux428' direct represents '4' with '1766'
1763 -1765 1766 0
-1766 1765 0
-1766 -1763 0
c Var 'aux428' order represents '5' with '1767'
-1765 1767 0
c Var 'aux428' direct represents '5' with '1768'
1765 -1767 1768 0
-1768 1767 0
-1768 -1765 0
c Var 'aux428' order represents '6' with '1769'
-1767 1769 0
c Var 'aux428' direct represents '6' with '1770'
1767 -1769 1770 0
-1770 1769 0
-1770 -1767 0
c Var 'aux428' order represents '7' with '1771'
-1769 1771 0
c Var 'aux428' direct represents '7' with '1772'
1769 -1771 1772 0
-1772 1771 0
-1772 -1769 0
c Var 'aux428' order represents '8' with '1773'
-1771 1773 0
c Var 'aux428' direct represents '8' with '1774'
1771 -1773 1774 0
-1774 1773 0
-1774 -1771 0
c Var 'aux428' order represents '9' with '1775'
-1773 1775 0
c Var 'aux428' direct represents '9' with '1776'
1773 -1775 1776 0
-1776 1775 0
-1776 -1773 0
c Var 'aux428' order represents '10' with '1777'
-1775 1777 0
c Var 'aux428' direct represents '10' with '1778'
1775 -1777 1778 0
-1778 1777 0
-1778 -1775 0
c Var 'aux428' order represents '11' with '1779'
-1777 1779 0
c Var 'aux428' direct represents '11' with '1780'
1777 -1779 1780 0
-1780 1779 0
-1780 -1777 0
c Var 'aux428' order represents '12' with '1781'
-1779 1781 0
c Var 'aux428' direct represents '12' with '1782'
1779 -1781 1782 0
-1782 1781 0
-1782 -1779 0
c Var 'aux428' order represents '13' with '1783'
-1781 1783 0
c Var 'aux428' direct represents '13' with '1784'
1781 -1783 1784 0
-1784 1783 0
-1784 -1781 0
c Var 'aux428' order represents '14' with '1785'
-1783 1785 0
c Var 'aux428' direct represents '14' with '1786'
1783 -1785 1786 0
-1786 1785 0
-1786 -1783 0
c Var 'aux428' order represents '15' with '1787'
-1785 1787 0
c Var 'aux428' direct represents '15' with '1788'
1785 -1787 1788 0
-1788 1787 0
-1788 -1785 0
c Var 'aux428' direct represents '16' with '-1787'
1758 1760 1762 1764 1766 1768 1770 1772 1774 1776 1778 1780 1782 1784 1786 1788 -1787 0
c Encoding variable: aux429 with domain: int(0..16) (representing constraint (shift(x_00007_00003, -1) + shift(x_00006_00003, -1)))
c Both direct and order encoding.
c Var 'aux429' order represents '0' with '1789'
c Var 'aux429' direct represents '0' with '1789'
c Var 'aux429' order represents '1' with '1790'
-1789 1790 0
c Var 'aux429' direct represents '1' with '1791'
1789 -1790 1791 0
-1791 1790 0
-1791 -1789 0
c Var 'aux429' order represents '2' with '1792'
-1790 1792 0
c Var 'aux429' direct represents '2' with '1793'
1790 -1792 1793 0
-1793 1792 0
-1793 -1790 0
c Var 'aux429' order represents '3' with '1794'
-1792 1794 0
c Var 'aux429' direct represents '3' with '1795'
1792 -1794 1795 0
-1795 1794 0
-1795 -1792 0
c Var 'aux429' order represents '4' with '1796'
-1794 1796 0
c Var 'aux429' direct represents '4' with '1797'
1794 -1796 1797 0
-1797 1796 0
-1797 -1794 0
c Var 'aux429' order represents '5' with '1798'
-1796 1798 0
c Var 'aux429' direct represents '5' with '1799'
1796 -1798 1799 0
-1799 1798 0
-1799 -1796 0
c Var 'aux429' order represents '6' with '1800'
-1798 1800 0
c Var 'aux429' direct represents '6' with '1801'
1798 -1800 1801 0
-1801 1800 0
-1801 -1798 0
c Var 'aux429' order represents '7' with '1802'
-1800 1802 0
c Var 'aux429' direct represents '7' with '1803'
1800 -1802 1803 0
-1803 1802 0
-1803 -1800 0
c Var 'aux429' order represents '8' with '1804'
-1802 1804 0
c Var 'aux429' direct represents '8' with '1805'
1802 -1804 1805 0
-1805 1804 0
-1805 -1802 0
c Var 'aux429' order represents '9' with '1806'
-1804 1806 0
c Var 'aux429' direct represents '9' with '1807'
1804 -1806 1807 0
-1807 1806 0
-1807 -1804 0
c Var 'aux429' order represents '10' with '1808'
-1806 1808 0
c Var 'aux429' direct represents '10' with '1809'
1806 -1808 1809 0
-1809 1808 0
-1809 -1806 0
c Var 'aux429' order represents '11' with '1810'
-1808 1810 0
c Var 'aux429' direct represents '11' with '1811'
1808 -1810 1811 0
-1811 1810 0
-1811 -1808 0
c Var 'aux429' order represents '12' with '1812'
-1810 1812 0
c Var 'aux429' direct represents '12' with '1813'
1810 -1812 1813 0
-1813 1812 0
-1813 -1810 0
c Var 'aux429' order represents '13' with '1814'
-1812 1814 0
c Var 'aux429' direct represents '13' with '1815'
1812 -1814 1815 0
-1815 1814 0
-1815 -1812 0
c Var 'aux429' order represents '14' with '1816'
-1814 1816 0
c Var 'aux429' direct represents '14' with '1817'
1814 -1816 1817 0
-1817 1816 0
-1817 -1814 0
c Var 'aux429' order represents '15' with '1818'
-1816 1818 0
c Var 'aux429' direct represents '15' with '1819'
1816 -1818 1819 0
-1819 1818 0
-1819 -1816 0
c Var 'aux429' direct represents '16' with '-1818'
1789 1791 1793 1795 1797 1799 1801 1803 1805 1807 1809 1811 1813 1815 1817 1819 -1818 0
c Encoding variable: aux430 with domain: int(0..16) (representing constraint (shift(x_00005_00003, -1) + shift(x_00007_00004, -1)))
c Both direct and order encoding.
c Var 'aux430' order represents '0' with '1820'
c Var 'aux430' direct represents '0' with '1820'
c Var 'aux430' order represents '1' with '1821'
-1820 1821 0
c Var 'aux430' direct represents '1' with '1822'
1820 -1821 1822 0
-1822 1821 0
-1822 -1820 0
c Var 'aux430' order represents '2' with '1823'
-1821 1823 0
c Var 'aux430' direct represents '2' with '1824'
1821 -1823 1824 0
-1824 1823 0
-1824 -1821 0
c Var 'aux430' order represents '3' with '1825'
-1823 1825 0
c Var 'aux430' direct represents '3' with '1826'
1823 -1825 1826 0
-1826 1825 0
-1826 -1823 0
c Var 'aux430' order represents '4' with '1827'
-1825 1827 0
c Var 'aux430' direct represents '4' with '1828'
1825 -1827 1828 0
-1828 1827 0
-1828 -1825 0
c Var 'aux430' order represents '5' with '1829'
-1827 1829 0
c Var 'aux430' direct represents '5' with '1830'
1827 -1829 1830 0
-1830 1829 0
-1830 -1827 0
c Var 'aux430' order represents '6' with '1831'
-1829 1831 0
c Var 'aux430' direct represents '6' with '1832'
1829 -1831 1832 0
-1832 1831 0
-1832 -1829 0
c Var 'aux430' order represents '7' with '1833'
-1831 1833 0
c Var 'aux430' direct represents '7' with '1834'
1831 -1833 1834 0
-1834 1833 0
-1834 -1831 0
c Var 'aux430' order represents '8' with '1835'
-1833 1835 0
c Var 'aux430' direct represents '8' with '1836'
1833 -1835 1836 0
-1836 1835 0
-1836 -1833 0
c Var 'aux430' order represents '9' with '1837'
-1835 1837 0
c Var 'aux430' direct represents '9' with '1838'
1835 -1837 1838 0
-1838 1837 0
-1838 -1835 0
c Var 'aux430' order represents '10' with '1839'
-1837 1839 0
c Var 'aux430' direct represents '10' with '1840'
1837 -1839 1840 0
-1840 1839 0
-1840 -1837 0
c Var 'aux430' order represents '11' with '1841'
-1839 1841 0
c Var 'aux430' direct represents '11' with '1842'
1839 -1841 1842 0
-1842 1841 0
-1842 -1839 0
c Var 'aux430' order represents '12' with '1843'
-1841 1843 0
c Var 'aux430' direct represents '12' with '1844'
1841 -1843 1844 0
-1844 1843 0
-1844 -1841 0
c Var 'aux430' order represents '13' with '1845'
-1843 1845 0
c Var 'aux430' direct represents '13' with '1846'
1843 -1845 1846 0
-1846 1845 0
-1846 -1843 0
c Var 'aux430' order represents '14' with '1847'
-1845 1847 0
c Var 'aux430' direct represents '14' with '1848'
1845 -1847 1848 0
-1848 1847 0
-1848 -1845 0
c Var 'aux430' order represents '15' with '1849'
-1847 1849 0
c Var 'aux430' direct represents '15' with '1850'
1847 -1849 1850 0
-1850 1849 0
-1850 -1847 0
c Var 'aux430' direct represents '16' with '-1849'
1820 1822 1824 1826 1828 1830 1832 1834 1836 1838 1840 1842 1844 1846 1848 1850 -1849 0
c Encoding variable: aux431 with domain: int(0..16) (representing constraint (shift(x_00004_00003, -1) + shift(x_00007_00006, -1)))
c Both direct and order encoding.
c Var 'aux431' order represents '0' with '1851'
c Var 'aux431' direct represents '0' with '1851'
c Var 'aux431' order represents '1' with '1852'
-1851 1852 0
c Var 'aux431' direct represents '1' with '1853'
1851 -1852 1853 0
-1853 1852 0
-1853 -1851 0
c Var 'aux431' order represents '2' with '1854'
-1852 1854 0
c Var 'aux431' direct represents '2' with '1855'
1852 -1854 1855 0
-1855 1854 0
-1855 -1852 0
c Var 'aux431' order represents '3' with '1856'
-1854 1856 0
c Var 'aux431' direct represents '3' with '1857'
1854 -1856 1857 0
-1857 1856 0
-1857 -1854 0
c Var 'aux431' order represents '4' with '1858'
-1856 1858 0
c Var 'aux431' direct represents '4' with '1859'
1856 -1858 1859 0
-1859 1858 0
-1859 -1856 0
c Var 'aux431' order represents '5' with '1860'
-1858 1860 0
c Var 'aux431' direct represents '5' with '1861'
1858 -1860 1861 0
-1861 1860 0
-1861 -1858 0
c Var 'aux431' order represents '6' with '1862'
-1860 1862 0
c Var 'aux431' direct represents '6' with '1863'
1860 -1862 1863 0
-1863 1862 0
-1863 -1860 0
c Var 'aux431' order represents '7' with '1864'
-1862 1864 0
c Var 'aux431' direct represents '7' with '1865'
1862 -1864 1865 0
-1865 1864 0
-1865 -1862 0
c Var 'aux431' order represents '8' with '1866'
-1864 1866 0
c Var 'aux431' direct represents '8' with '1867'
1864 -1866 1867 0
-1867 1866 0
-1867 -1864 0
c Var 'aux431' order represents '9' with '1868'
-1866 1868 0
c Var 'aux431' direct represents '9' with '1869'
1866 -1868 1869 0
-1869 1868 0
-1869 -1866 0
c Var 'aux431' order represents '10' with '1870'
-1868 1870 0
c Var 'aux431' direct represents '10' with '1871'
1868 -1870 1871 0
-1871 1870 0
-1871 -1868 0
c Var 'aux431' order represents '11' with '1872'
-1870 1872 0
c Var 'aux431' direct represents '11' with '1873'
1870 -1872 1873 0
-1873 1872 0
-1873 -1870 0
c Var 'aux431' order represents '12' with '1874'
-1872 1874 0
c Var 'aux431' direct represents '12' with '1875'
1872 -1874 1875 0
-1875 1874 0
-1875 -1872 0
c Var 'aux431' order represents '13' with '1876'
-1874 1876 0
c Var 'aux431' direct represents '13' with '1877'
1874 -1876 1877 0
-1877 1876 0
-1877 -1874 0
c Var 'aux431' order represents '14' with '1878'
-1876 1878 0
c Var 'aux431' direct represents '14' with '1879'
1876 -1878 1879 0
-1879 1878 0
-1879 -1876 0
c Var 'aux431' order represents '15' with '1880'
-1878 1880 0
c Var 'aux431' direct represents '15' with '1881'
1878 -1880 1881 0
-1881 1880 0
-1881 -1878 0
c Var 'aux431' direct represents '16' with '-1880'
1851 1853 1855 1857 1859 1861 1863 1865 1867 1869 1871 1873 1875 1877 1879 1881 -1880 0
c Encoding variable: aux432 with domain: int(0..24) (representing constraint (shift(x_00007_00005, -1) + aux431))
c Both direct and order encoding.
c Var 'aux432' order represents '0' with '1882'
c Var 'aux432' direct represents '0' with '1882'
c Var 'aux432' order represents '1' with '1883'
-1882 1883 0
c Var 'aux432' direct represents '1' with '1884'
1882 -1883 1884 0
-1884 1883 0
-1884 -1882 0
c Var 'aux432' order represents '2' with '1885'
-1883 1885 0
c Var 'aux432' direct represents '2' with '1886'
1883 -1885 1886 0
-1886 1885 0
-1886 -1883 0
c Var 'aux432' order represents '3' with '1887'
-1885 1887 0
c Var 'aux432' direct represents '3' with '1888'
1885 -1887 1888 0
-1888 1887 0
-1888 -1885 0
c Var 'aux432' order represents '4' with '1889'
-1887 1889 0
c Var 'aux432' direct represents '4' with '1890'
1887 -1889 1890 0
-1890 1889 0
-1890 -1887 0
c Var 'aux432' order represents '5' with '1891'
-1889 1891 0
c Var 'aux432' direct represents '5' with '1892'
1889 -1891 1892 0
-1892 1891 0
-1892 -1889 0
c Var 'aux432' order represents '6' with '1893'
-1891 1893 0
c Var 'aux432' direct represents '6' with '1894'
1891 -1893 1894 0
-1894 1893 0
-1894 -1891 0
c Var 'aux432' order represents '7' with '1895'
-1893 1895 0
c Var 'aux432' direct represents '7' with '1896'
1893 -1895 1896 0
-1896 1895 0
-1896 -1893 0
c Var 'aux432' order represents '8' with '1897'
-1895 1897 0
c Var 'aux432' direct represents '8' with '1898'
1895 -1897 1898 0
-1898 1897 0
-1898 -1895 0
c Var 'aux432' order represents '9' with '1899'
-1897 1899 0
c Var 'aux432' direct represents '9' with '1900'
1897 -1899 1900 0
-1900 1899 0
-1900 -1897 0
c Var 'aux432' order represents '10' with '1901'
-1899 1901 0
c Var 'aux432' direct represents '10' with '1902'
1899 -1901 1902 0
-1902 1901 0
-1902 -1899 0
c Var 'aux432' order represents '11' with '1903'
-1901 1903 0
c Var 'aux432' direct represents '11' with '1904'
1901 -1903 1904 0
-1904 1903 0
-1904 -1901 0
c Var 'aux432' order represents '12' with '1905'
-1903 1905 0
c Var 'aux432' direct represents '12' with '1906'
1903 -1905 1906 0
-1906 1905 0
-1906 -1903 0
c Var 'aux432' order represents '13' with '1907'
-1905 1907 0
c Var 'aux432' direct represents '13' with '1908'
1905 -1907 1908 0
-1908 1907 0
-1908 -1905 0
c Var 'aux432' order represents '14' with '1909'
-1907 1909 0
c Var 'aux432' direct represents '14' with '1910'
1907 -1909 1910 0
-1910 1909 0
-1910 -1907 0
c Var 'aux432' order represents '15' with '1911'
-1909 1911 0
c Var 'aux432' direct represents '15' with '1912'
1909 -1911 1912 0
-1912 1911 0
-1912 -1909 0
c Var 'aux432' order represents '16' with '1913'
-1911 1913 0
c Var 'aux432' direct represents '16' with '1914'
1911 -1913 1914 0
-1914 1913 0
-1914 -1911 0
c Var 'aux432' order represents '17' with '1915'
-1913 1915 0
c Var 'aux432' direct represents '17' with '1916'
1913 -1915 1916 0
-1916 1915 0
-1916 -1913 0
c Var 'aux432' order represents '18' with '1917'
-1915 1917 0
c Var 'aux432' direct represents '18' with '1918'
1915 -1917 1918 0
-1918 1917 0
-1918 -1915 0
c Var 'aux432' order represents '19' with '1919'
-1917 1919 0
c Var 'aux432' direct represents '19' with '1920'
1917 -1919 1920 0
-1920 1919 0
-1920 -1917 0
c Var 'aux432' order represents '20' with '1921'
-1919 1921 0
c Var 'aux432' direct represents '20' with '1922'
1919 -1921 1922 0
-1922 1921 0
-1922 -1919 0
c Var 'aux432' order represents '21' with '1923'
-1921 1923 0
c Var 'aux432' direct represents '21' with '1924'
1921 -1923 1924 0
-1924 1923 0
-1924 -1921 0
c Var 'aux432' order represents '22' with '1925'
-1923 1925 0
c Var 'aux432' direct represents '22' with '1926'
1923 -1925 1926 0
-1926 1925 0
-1926 -1923 0
c Var 'aux432' order represents '23' with '1927'
-1925 1927 0
c Var 'aux432' direct represents '23' with '1928'
1925 -1927 1928 0
-1928 1927 0
-1928 -1925 0
c Var 'aux432' direct represents '24' with '-1927'
1882 1884 1886 1888 1890 1892 1894 1896 1898 1900 1902 1904 1906 1908 1910 1912 1914 1916 1918 1920 1922 1924 1926 1928 -1927 0
c Encoding variable: aux433 with domain: int(0..16) (representing constraint (shift(x_00005_00004, -1) + shift(x_00006_00005, -1)))
c Both direct and order encoding.
c Var 'aux433' order represents '0' with '1929'
c Var 'aux433' direct represents '0' with '1929'
c Var 'aux433' order represents '1' with '1930'
-1929 1930 0
c Var 'aux433' direct represents '1' with '1931'
1929 -1930 1931 0
-1931 1930 0
-1931 -1929 0
c Var 'aux433' order represents '2' with '1932'
-1930 1932 0
c Var 'aux433' direct represents '2' with '1933'
1930 -1932 1933 0
-1933 1932 0
-1933 -1930 0
c Var 'aux433' order represents '3' with '1934'
-1932 1934 0
c Var 'aux433' direct represents '3' with '1935'
1932 -1934 1935 0
-1935 1934 0
-1935 -1932 0
c Var 'aux433' order represents '4' with '1936'
-1934 1936 0
c Var 'aux433' direct represents '4' with '1937'
1934 -1936 1937 0
-1937 1936 0
-1937 -1934 0
c Var 'aux433' order represents '5' with '1938'
-1936 1938 0
c Var 'aux433' direct represents '5' with '1939'
1936 -1938 1939 0
-1939 1938 0
-1939 -1936 0
c Var 'aux433' order represents '6' with '1940'
-1938 1940 0
c Var 'aux433' direct represents '6' with '1941'
1938 -1940 1941 0
-1941 1940 0
-1941 -1938 0
c Var 'aux433' order represents '7' with '1942'
-1940 1942 0
c Var 'aux433' direct represents '7' with '1943'
1940 -1942 1943 0
-1943 1942 0
-1943 -1940 0
c Var 'aux433' order represents '8' with '1944'
-1942 1944 0
c Var 'aux433' direct represents '8' with '1945'
1942 -1944 1945 0
-1945 1944 0
-1945 -1942 0
c Var 'aux433' order represents '9' with '1946'
-1944 1946 0
c Var 'aux433' direct represents '9' with '1947'
1944 -1946 1947 0
-1947 1946 0
-1947 -1944 0
c Var 'aux433' order represents '10' with '1948'
-1946 1948 0
c Var 'aux433' direct represents '10' with '1949'
1946 -1948 1949 0
-1949 1948 0
-1949 -1946 0
c Var 'aux433' order represents '11' with '1950'
-1948 1950 0
c Var 'aux433' direct represents '11' with '1951'
1948 -1950 1951 0
-1951 1950 0
-1951 -1948 0
c Var 'aux433' order represents '12' with '1952'
-1950 1952 0
c Var 'aux433' direct represents '12' with '1953'
1950 -1952 1953 0
-1953 1952 0
-1953 -1950 0
c Var 'aux433' order represents '13' with '1954'
-1952 1954 0
c Var 'aux433' direct represents '13' with '1955'
1952 -1954 1955 0
-1955 1954 0
-1955 -1952 0
c Var 'aux433' order represents '14' with '1956'
-1954 1956 0
c Var 'aux433' direct represents '14' with '1957'
1954 -1956 1957 0
-1957 1956 0
-1957 -1954 0
c Var 'aux433' order represents '15' with '1958'
-1956 1958 0
c Var 'aux433' direct represents '15' with '1959'
1956 -1958 1959 0
-1959 1958 0
-1959 -1956 0
c Var 'aux433' direct represents '16' with '-1958'
1929 1931 1933 1935 1937 1939 1941 1943 1945 1947 1949 1951 1953 1955 1957 1959 -1958 0
c Encoding variable: aux434 with domain: int(0..16) (representing constraint (shift(x_00008_00001, -1) + shift(x_00009_00002, -1)))
c Both direct and order encoding.
c Var 'aux434' order represents '0' with '1960'
c Var 'aux434' direct represents '0' with '1960'
c Var 'aux434' order represents '1' with '1961'
-1960 1961 0
c Var 'aux434' direct represents '1' with '1962'
1960 -1961 1962 0
-1962 1961 0
-1962 -1960 0
c Var 'aux434' order represents '2' with '1963'
-1961 1963 0
c Var 'aux434' direct represents '2' with '1964'
1961 -1963 1964 0
-1964 1963 0
-1964 -1961 0
c Var 'aux434' order represents '3' with '1965'
-1963 1965 0
c Var 'aux434' direct represents '3' with '1966'
1963 -1965 1966 0
-1966 1965 0
-1966 -1963 0
c Var 'aux434' order represents '4' with '1967'
-1965 1967 0
c Var 'aux434' direct represents '4' with '1968'
1965 -1967 1968 0
-1968 1967 0
-1968 -1965 0
c Var 'aux434' order represents '5' with '1969'
-1967 1969 0
c Var 'aux434' direct represents '5' with '1970'
1967 -1969 1970 0
-1970 1969 0
-1970 -1967 0
c Var 'aux434' order represents '6' with '1971'
-1969 1971 0
c Var 'aux434' direct represents '6' with '1972'
1969 -1971 1972 0
-1972 1971 0
-1972 -1969 0
c Var 'aux434' order represents '7' with '1973'
-1971 1973 0
c Var 'aux434' direct represents '7' with '1974'
1971 -1973 1974 0
-1974 1973 0
-1974 -1971 0
c Var 'aux434' order represents '8' with '1975'
-1973 1975 0
c Var 'aux434' direct represents '8' with '1976'
1973 -1975 1976 0
-1976 1975 0
-1976 -1973 0
c Var 'aux434' order represents '9' with '1977'
-1975 1977 0
c Var 'aux434' direct represents '9' with '1978'
1975 -1977 1978 0
-1978 1977 0
-1978 -1975 0
c Var 'aux434' order represents '10' with '1979'
-1977 1979 0
c Var 'aux434' direct represents '10' with '1980'
1977 -1979 1980 0
-1980 1979 0
-1980 -1977 0
c Var 'aux434' order represents '11' with '1981'
-1979 1981 0
c Var 'aux434' direct represents '11' with '1982'
1979 -1981 1982 0
-1982 1981 0
-1982 -1979 0
c Var 'aux434' order represents '12' with '1983'
-1981 1983 0
c Var 'aux434' direct represents '12' with '1984'
1981 -1983 1984 0
-1984 1983 0
-1984 -1981 0
c Var 'aux434' order represents '13' with '1985'
-1983 1985 0
c Var 'aux434' direct represents '13' with '1986'
1983 -1985 1986 0
-1986 1985 0
-1986 -1983 0
c Var 'aux434' order represents '14' with '1987'
-1985 1987 0
c Var 'aux434' direct represents '14' with '1988'
1985 -1987 1988 0
-1988 1987 0
-1988 -1985 0
c Var 'aux434' order represents '15' with '1989'
-1987 1989 0
c Var 'aux434' direct represents '15' with '1990'
1987 -1989 1990 0
-1990 1989 0
-1990 -1987 0
c Var 'aux434' direct represents '16' with '-1989'
1960 1962 1964 1966 1968 1970 1972 1974 1976 1978 1980 1982 1984 1986 1988 1990 -1989 0
c Encoding variable: aux435 with domain: int(0..16) (representing constraint (shift(x_00009_00004, -1) + shift(x_00009_00007, -1)))
c Both direct and order encoding.
c Var 'aux435' order represents '0' with '1991'
c Var 'aux435' direct represents '0' with '1991'
c Var 'aux435' order represents '1' with '1992'
-1991 1992 0
c Var 'aux435' direct represents '1' with '1993'
1991 -1992 1993 0
-1993 1992 0
-1993 -1991 0
c Var 'aux435' order represents '2' with '1994'
-1992 1994 0
c Var 'aux435' direct represents '2' with '1995'
1992 -1994 1995 0
-1995 1994 0
-1995 -1992 0
c Var 'aux435' order represents '3' with '1996'
-1994 1996 0
c Var 'aux435' direct represents '3' with '1997'
1994 -1996 1997 0
-1997 1996 0
-1997 -1994 0
c Var 'aux435' order represents '4' with '1998'
-1996 1998 0
c Var 'aux435' direct represents '4' with '1999'
1996 -1998 1999 0
-1999 1998 0
-1999 -1996 0
c Var 'aux435' order represents '5' with '2000'
-1998 2000 0
c Var 'aux435' direct represents '5' with '2001'
1998 -2000 2001 0
-2001 2000 0
-2001 -1998 0
c Var 'aux435' order represents '6' with '2002'
-2000 2002 0
c Var 'aux435' direct represents '6' with '2003'
2000 -2002 2003 0
-2003 2002 0
-2003 -2000 0
c Var 'aux435' order represents '7' with '2004'
-2002 2004 0
c Var 'aux435' direct represents '7' with '2005'
2002 -2004 2005 0
-2005 2004 0
-2005 -2002 0
c Var 'aux435' order represents '8' with '2006'
-2004 2006 0
c Var 'aux435' direct represents '8' with '2007'
2004 -2006 2007 0
-2007 2006 0
-2007 -2004 0
c Var 'aux435' order represents '9' with '2008'
-2006 2008 0
c Var 'aux435' direct represents '9' with '2009'
2006 -2008 2009 0
-2009 2008 0
-2009 -2006 0
c Var 'aux435' order represents '10' with '2010'
-2008 2010 0
c Var 'aux435' direct represents '10' with '2011'
2008 -2010 2011 0
-2011 2010 0
-2011 -2008 0
c Var 'aux435' order represents '11' with '2012'
-2010 2012 0
c Var 'aux435' direct represents '11' with '2013'
2010 -2012 2013 0
-2013 2012 0
-2013 -2010 0
c Var 'aux435' order represents '12' with '2014'
-2012 2014 0
c Var 'aux435' direct represents '12' with '2015'
2012 -2014 2015 0
-2015 2014 0
-2015 -2012 0
c Var 'aux435' order represents '13' with '2016'
-2014 2016 0
c Var 'aux435' direct represents '13' with '2017'
2014 -2016 2017 0
-2017 2016 0
-2017 -2014 0
c Var 'aux435' order represents '14' with '2018'
-2016 2018 0
c Var 'aux435' direct represents '14' with '2019'
2016 -2018 2019 0
-2019 2018 0
-2019 -2016 0
c Var 'aux435' order represents '15' with '2020'
-2018 2020 0
c Var 'aux435' direct represents '15' with '2021'
2018 -2020 2021 0
-2021 2020 0
-2021 -2018 0
c Var 'aux435' direct represents '16' with '-2020'
1991 1993 1995 1997 1999 2001 2003 2005 2007 2009 2011 2013 2015 2017 2019 2021 -2020 0
c Encoding variable: aux436 with domain: int(0..2) (representing constraint ((x_00003_00001=1) + (x_00005_00001=1)))
c Both direct and order encoding.
c Var 'aux436' order represents '0' with '2022'
c Var 'aux436' direct represents '0' with '2022'
c Var 'aux436' order represents '1' with '2023'
-2022 2023 0
c Var 'aux436' direct represents '1' with '2024'
2022 -2023 2024 0
-2024 2023 0
-2024 -2022 0
c Var 'aux436' direct represents '2' with '-2023'
2022 2024 -2023 0
c Encoding variable: aux437 with domain: int(0..2) (representing constraint ((x_00007_00001=1) + (x_00008_00001=1)))
c Both direct and order encoding.
c Var 'aux437' order represents '0' with '2025'
c Var 'aux437' direct represents '0' with '2025'
c Var 'aux437' order represents '1' with '2026'
-2025 2026 0
c Var 'aux437' direct represents '1' with '2027'
2025 -2026 2027 0
-2027 2026 0
-2027 -2025 0
c Var 'aux437' direct represents '2' with '-2026'
2025 2027 -2026 0
c Encoding variable: aux438 with domain: int(0..2) (representing constraint ((x_00002_00001=1) + (x_00006_00001=1)))
c Both direct and order encoding.
c Var 'aux438' order represents '0' with '2028'
c Var 'aux438' direct represents '0' with '2028'
c Var 'aux438' order represents '1' with '2029'
-2028 2029 0
c Var 'aux438' direct represents '1' with '2030'
2028 -2029 2030 0
-2030 2029 0
-2030 -2028 0
c Var 'aux438' direct represents '2' with '-2029'
2028 2030 -2029 0
c Encoding variable: aux439 with domain: int(0..2) (representing constraint ((x_00009_00001=1) + (x_00004_00001=1)))
c Both direct and order encoding.
c Var 'aux439' order represents '0' with '2031'
c Var 'aux439' direct represents '0' with '2031'
c Var 'aux439' order represents '1' with '2032'
-2031 2032 0
c Var 'aux439' direct represents '1' with '2033'
2031 -2032 2033 0
-2033 2032 0
-2033 -2031 0
c Var 'aux439' direct represents '2' with '-2032'
2031 2033 -2032 0
c Encoding variable: aux440 with domain: int(0..3) (representing constraint ((x_00001_00001=1) + aux439))
c Both direct and order encoding.
c Var 'aux440' order represents '0' with '2034'
c Var 'aux440' direct represents '0' with '2034'
c Var 'aux440' order represents '1' with '2035'
-2034 2035 0
c Var 'aux440' direct represents '1' with '2036'
2034 -2035 2036 0
-2036 2035 0
-2036 -2034 0
c Var 'aux440' order represents '2' with '2037'
-2035 2037 0
c Var 'aux440' direct represents '2' with '2038'
2035 -2037 2038 0
-2038 2037 0
-2038 -2035 0
c Var 'aux440' direct represents '3' with '-2037'
2034 2036 2038 -2037 0
c Encoding variable: aux441 with domain: int(0..4) (representing constraint (aux436 + aux438))
c Both direct and order encoding.
c Var 'aux441' order represents '0' with '2039'
c Var 'aux441' direct represents '0' with '2039'
c Var 'aux441' order represents '1' with '2040'
-2039 2040 0
c Var 'aux441' direct represents '1' with '2041'
2039 -2040 2041 0
-2041 2040 0
-2041 -2039 0
c Var 'aux441' order represents '2' with '2042'
-2040 2042 0
c Var 'aux441' direct represents '2' with '2043'
2040 -2042 2043 0
-2043 2042 0
-2043 -2040 0
c Var 'aux441' order represents '3' with '2044'
-2042 2044 0
c Var 'aux441' direct represents '3' with '2045'
2042 -2044 2045 0
-2045 2044 0
-2045 -2042 0
c Var 'aux441' direct represents '4' with '-2044'
2039 2041 2043 2045 -2044 0
c Encoding variable: aux442 with domain: int(0..2) (representing constraint ((x_00003_00001=2) + (x_00005_00001=2)))
c Both direct and order encoding.
c Var 'aux442' order represents '0' with '2046'
c Var 'aux442' direct represents '0' with '2046'
c Var 'aux442' order represents '1' with '2047'
-2046 2047 0
c Var 'aux442' direct represents '1' with '2048'
2046 -2047 2048 0
-2048 2047 0
-2048 -2046 0
c Var 'aux442' direct represents '2' with '-2047'
2046 2048 -2047 0
c Encoding variable: aux443 with domain: int(0..2) (representing constraint ((x_00007_00001=2) + (x_00008_00001=2)))
c Both direct and order encoding.
c Var 'aux443' order represents '0' with '2049'
c Var 'aux443' direct represents '0' with '2049'
c Var 'aux443' order represents '1' with '2050'
-2049 2050 0
c Var 'aux443' direct represents '1' with '2051'
2049 -2050 2051 0
-2051 2050 0
-2051 -2049 0
c Var 'aux443' direct represents '2' with '-2050'
2049 2051 -2050 0
c Encoding variable: aux444 with domain: int(0..2) (representing constraint ((x_00002_00001=2) + (x_00006_00001=2)))
c Both direct and order encoding.
c Var 'aux444' order represents '0' with '2052'
c Var 'aux444' direct represents '0' with '2052'
c Var 'aux444' order represents '1' with '2053'
-2052 2053 0
c Var 'aux444' direct represents '1' with '2054'
2052 -2053 2054 0
-2054 2053 0
-2054 -2052 0
c Var 'aux444' direct represents '2' with '-2053'
2052 2054 -2053 0
c Encoding variable: aux445 with domain: int(0..2) (representing constraint ((x_00009_00001=2) + (x_00004_00001=2)))
c Both direct and order encoding.
c Var 'aux445' order represents '0' with '2055'
c Var 'aux445' direct represents '0' with '2055'
c Var 'aux445' order represents '1' with '2056'
-2055 2056 0
c Var 'aux445' direct represents '1' with '2057'
2055 -2056 2057 0
-2057 2056 0
-2057 -2055 0
c Var 'aux445' direct represents '2' with '-2056'
2055 2057 -2056 0
c Encoding variable: aux446 with domain: int(0..3) (representing constraint ((x_00001_00001=2) + aux445))
c Both direct and order encoding.
c Var 'aux446' order represents '0' with '2058'
c Var 'aux446' direct represents '0' with '2058'
c Var 'aux446' order represents '1' with '2059'
-2058 2059 0
c Var 'aux446' direct represents '1' with '2060'
2058 -2059 2060 0
-2060 2059 0
-2060 -2058 0
c Var 'aux446' order represents '2' with '2061'
-2059 2061 0
c Var 'aux446' direct represents '2' with '2062'
2059 -2061 2062 0
-2062 2061 0
-2062 -2059 0
c Var 'aux446' direct represents '3' with '-2061'
2058 2060 2062 -2061 0
c Encoding variable: aux447 with domain: int(0..4) (representing constraint (aux442 + aux444))
c Both direct and order encoding.
c Var 'aux447' order represents '0' with '2063'
c Var 'aux447' direct represents '0' with '2063'
c Var 'aux447' order represents '1' with '2064'
-2063 2064 0
c Var 'aux447' direct represents '1' with '2065'
2063 -2064 2065 0
-2065 2064 0
-2065 -2063 0
c Var 'aux447' order represents '2' with '2066'
-2064 2066 0
c Var 'aux447' direct represents '2' with '2067'
2064 -2066 2067 0
-2067 2066 0
-2067 -2064 0
c Var 'aux447' order represents '3' with '2068'
-2066 2068 0
c Var 'aux447' direct represents '3' with '2069'
2066 -2068 2069 0
-2069 2068 0
-2069 -2066 0
c Var 'aux447' direct represents '4' with '-2068'
2063 2065 2067 2069 -2068 0
c Encoding variable: aux448 with domain: int(0..2) (representing constraint ((x_00003_00001=3) + (x_00005_00001=3)))
c Both direct and order encoding.
c Var 'aux448' order represents '0' with '2070'
c Var 'aux448' direct represents '0' with '2070'
c Var 'aux448' order represents '1' with '2071'
-2070 2071 0
c Var 'aux448' direct represents '1' with '2072'
2070 -2071 2072 0
-2072 2071 0
-2072 -2070 0
c Var 'aux448' direct represents '2' with '-2071'
2070 2072 -2071 0
c Encoding variable: aux449 with domain: int(0..2) (representing constraint ((x_00007_00001=3) + (x_00008_00001=3)))
c Both direct and order encoding.
c Var 'aux449' order represents '0' with '2073'
c Var 'aux449' direct represents '0' with '2073'
c Var 'aux449' order represents '1' with '2074'
-2073 2074 0
c Var 'aux449' direct represents '1' with '2075'
2073 -2074 2075 0
-2075 2074 0
-2075 -2073 0
c Var 'aux449' direct represents '2' with '-2074'
2073 2075 -2074 0
c Encoding variable: aux450 with domain: int(0..2) (representing constraint ((x_00002_00001=3) + (x_00006_00001=3)))
c Both direct and order encoding.
c Var 'aux450' order represents '0' with '2076'
c Var 'aux450' direct represents '0' with '2076'
c Var 'aux450' order represents '1' with '2077'
-2076 2077 0
c Var 'aux450' direct represents '1' with '2078'
2076 -2077 2078 0
-2078 2077 0
-2078 -2076 0
c Var 'aux450' direct represents '2' with '-2077'
2076 2078 -2077 0
c Encoding variable: aux451 with domain: int(0..2) (representing constraint ((x_00009_00001=3) + (x_00004_00001=3)))
c Both direct and order encoding.
c Var 'aux451' order represents '0' with '2079'
c Var 'aux451' direct represents '0' with '2079'
c Var 'aux451' order represents '1' with '2080'
-2079 2080 0
c Var 'aux451' direct represents '1' with '2081'
2079 -2080 2081 0
-2081 2080 0
-2081 -2079 0
c Var 'aux451' direct represents '2' with '-2080'
2079 2081 -2080 0
c Encoding variable: aux452 with domain: int(0..3) (representing constraint ((x_00001_00001=3) + aux451))
c Both direct and order encoding.
c Var 'aux452' order represents '0' with '2082'
c Var 'aux452' direct represents '0' with '2082'
c Var 'aux452' order represents '1' with '2083'
-2082 2083 0
c Var 'aux452' direct represents '1' with '2084'
2082 -2083 2084 0
-2084 2083 0
-2084 -2082 0
c Var 'aux452' order represents '2' with '2085'
-2083 2085 0
c Var 'aux452' direct represents '2' with '2086'
2083 -2085 2086 0
-2086 2085 0
-2086 -2083 0
c Var 'aux452' direct represents '3' with '-2085'
2082 2084 2086 -2085 0
c Encoding variable: aux453 with domain: int(0..4) (representing constraint (aux448 + aux450))
c Both direct and order encoding.
c Var 'aux453' order represents '0' with '2087'
c Var 'aux453' direct represents '0' with '2087'
c Var 'aux453' order represents '1' with '2088'
-2087 2088 0
c Var 'aux453' direct represents '1' with '2089'
2087 -2088 2089 0
-2089 2088 0
-2089 -2087 0
c Var 'aux453' order represents '2' with '2090'
-2088 2090 0
c Var 'aux453' direct represents '2' with '2091'
2088 -2090 2091 0
-2091 2090 0
-2091 -2088 0
c Var 'aux453' order represents '3' with '2092'
-2090 2092 0
c Var 'aux453' direct represents '3' with '2093'
2090 -2092 2093 0
-2093 2092 0
-2093 -2090 0
c Var 'aux453' direct represents '4' with '-2092'
2087 2089 2091 2093 -2092 0
c Encoding variable: aux454 with domain: int(0..2) (representing constraint ((x_00003_00001=4) + (x_00005_00001=4)))
c Both direct and order encoding.
c Var 'aux454' order represents '0' with '2094'
c Var 'aux454' direct represents '0' with '2094'
c Var 'aux454' order represents '1' with '2095'
-2094 2095 0
c Var 'aux454' direct represents '1' with '2096'
2094 -2095 2096 0
-2096 2095 0
-2096 -2094 0
c Var 'aux454' direct represents '2' with '-2095'
2094 2096 -2095 0
c Encoding variable: aux455 with domain: int(0..2) (representing constraint ((x_00007_00001=4) + (x_00008_00001=4)))
c Both direct and order encoding.
c Var 'aux455' order represents '0' with '2097'
c Var 'aux455' direct represents '0' with '2097'
c Var 'aux455' order represents '1' with '2098'
-2097 2098 0
c Var 'aux455' direct represents '1' with '2099'
2097 -2098 2099 0
-2099 2098 0
-2099 -2097 0
c Var 'aux455' direct represents '2' with '-2098'
2097 2099 -2098 0
c Encoding variable: aux456 with domain: int(0..2) (representing constraint ((x_00002_00001=4) + (x_00006_00001=4)))
c Both direct and order encoding.
c Var 'aux456' order represents '0' with '2100'
c Var 'aux456' direct represents '0' with '2100'
c Var 'aux456' order represents '1' with '2101'
-2100 2101 0
c Var 'aux456' direct represents '1' with '2102'
2100 -2101 2102 0
-2102 2101 0
-2102 -2100 0
c Var 'aux456' direct represents '2' with '-2101'
2100 2102 -2101 0
c Encoding variable: aux457 with domain: int(0..2) (representing constraint ((x_00009_00001=4) + (x_00004_00001=4)))
c Both direct and order encoding.
c Var 'aux457' order represents '0' with '2103'
c Var 'aux457' direct represents '0' with '2103'
c Var 'aux457' order represents '1' with '2104'
-2103 2104 0
c Var 'aux457' direct represents '1' with '2105'
2103 -2104 2105 0
-2105 2104 0
-2105 -2103 0
c Var 'aux457' direct represents '2' with '-2104'
2103 2105 -2104 0
c Encoding variable: aux458 with domain: int(0..3) (representing constraint ((x_00001_00001=4) + aux457))
c Both direct and order encoding.
c Var 'aux458' order represents '0' with '2106'
c Var 'aux458' direct represents '0' with '2106'
c Var 'aux458' order represents '1' with '2107'
-2106 2107 0
c Var 'aux458' direct represents '1' with '2108'
2106 -2107 2108 0
-2108 2107 0
-2108 -2106 0
c Var 'aux458' order represents '2' with '2109'
-2107 2109 0
c Var 'aux458' direct represents '2' with '2110'
2107 -2109 2110 0
-2110 2109 0
-2110 -2107 0
c Var 'aux458' direct represents '3' with '-2109'
2106 2108 2110 -2109 0
c Encoding variable: aux459 with domain: int(0..4) (representing constraint (aux454 + aux456))
c Both direct and order encoding.
c Var 'aux459' order represents '0' with '2111'
c Var 'aux459' direct represents '0' with '2111'
c Var 'aux459' order represents '1' with '2112'
-2111 2112 0
c Var 'aux459' direct represents '1' with '2113'
2111 -2112 2113 0
-2113 2112 0
-2113 -2111 0
c Var 'aux459' order represents '2' with '2114'
-2112 2114 0
c Var 'aux459' direct represents '2' with '2115'
2112 -2114 2115 0
-2115 2114 0
-2115 -2112 0
c Var 'aux459' order represents '3' with '2116'
-2114 2116 0
c Var 'aux459' direct represents '3' with '2117'
2114 -2116 2117 0
-2117 2116 0
-2117 -2114 0
c Var 'aux459' direct represents '4' with '-2116'
2111 2113 2115 2117 -2116 0
c Encoding variable: aux460 with domain: int(0..2) (representing constraint ((x_00003_00001=5) + (x_00005_00001=5)))
c Both direct and order encoding.
c Var 'aux460' order represents '0' with '2118'
c Var 'aux460' direct represents '0' with '2118'
c Var 'aux460' order represents '1' with '2119'
-2118 2119 0
c Var 'aux460' direct represents '1' with '2120'
2118 -2119 2120 0
-2120 2119 0
-2120 -2118 0
c Var 'aux460' direct represents '2' with '-2119'
2118 2120 -2119 0
c Encoding variable: aux461 with domain: int(0..2) (representing constraint ((x_00007_00001=5) + (x_00008_00001=5)))
c Both direct and order encoding.
c Var 'aux461' order represents '0' with '2121'
c Var 'aux461' direct represents '0' with '2121'
c Var 'aux461' order represents '1' with '2122'
-2121 2122 0
c Var 'aux461' direct represents '1' with '2123'
2121 -2122 2123 0
-2123 2122 0
-2123 -2121 0
c Var 'aux461' direct represents '2' with '-2122'
2121 2123 -2122 0
c Encoding variable: aux462 with domain: int(0..2) (representing constraint ((x_00002_00001=5) + (x_00006_00001=5)))
c Both direct and order encoding.
c Var 'aux462' order represents '0' with '2124'
c Var 'aux462' direct represents '0' with '2124'
c Var 'aux462' order represents '1' with '2125'
-2124 2125 0
c Var 'aux462' direct represents '1' with '2126'
2124 -2125 2126 0
-2126 2125 0
-2126 -2124 0
c Var 'aux462' direct represents '2' with '-2125'
2124 2126 -2125 0
c Encoding variable: aux463 with domain: int(0..2) (representing constraint ((x_00009_00001=5) + (x_00004_00001=5)))
c Both direct and order encoding.
c Var 'aux463' order represents '0' with '2127'
c Var 'aux463' direct represents '0' with '2127'
c Var 'aux463' order represents '1' with '2128'
-2127 2128 0
c Var 'aux463' direct represents '1' with '2129'
2127 -2128 2129 0
-2129 2128 0
-2129 -2127 0
c Var 'aux463' direct represents '2' with '-2128'
2127 2129 -2128 0
c Encoding variable: aux464 with domain: int(0..3) (representing constraint ((x_00001_00001=5) + aux463))
c Both direct and order encoding.
c Var 'aux464' order represents '0' with '2130'
c Var 'aux464' direct represents '0' with '2130'
c Var 'aux464' order represents '1' with '2131'
-2130 2131 0
c Var 'aux464' direct represents '1' with '2132'
2130 -2131 2132 0
-2132 2131 0
-2132 -2130 0
c Var 'aux464' order represents '2' with '2133'
-2131 2133 0
c Var 'aux464' direct represents '2' with '2134'
2131 -2133 2134 0
-2134 2133 0
-2134 -2131 0
c Var 'aux464' direct represents '3' with '-2133'
2130 2132 2134 -2133 0
c Encoding variable: aux465 with domain: int(0..4) (representing constraint (aux460 + aux462))
c Both direct and order encoding.
c Var 'aux465' order represents '0' with '2135'
c Var 'aux465' direct represents '0' with '2135'
c Var 'aux465' order represents '1' with '2136'
-2135 2136 0
c Var 'aux465' direct represents '1' with '2137'
2135 -2136 2137 0
-2137 2136 0
-2137 -2135 0
c Var 'aux465' order represents '2' with '2138'
-2136 2138 0
c Var 'aux465' direct represents '2' with '2139'
2136 -2138 2139 0
-2139 2138 0
-2139 -2136 0
c Var 'aux465' order represents '3' with '2140'
-2138 2140 0
c Var 'aux465' direct represents '3' with '2141'
2138 -2140 2141 0
-2141 2140 0
-2141 -2138 0
c Var 'aux465' direct represents '4' with '-2140'
2135 2137 2139 2141 -2140 0
c Encoding variable: aux466 with domain: int(0..2) (representing constraint ((x_00003_00001=6) + (x_00005_00001=6)))
c Both direct and order encoding.
c Var 'aux466' order represents '0' with '2142'
c Var 'aux466' direct represents '0' with '2142'
c Var 'aux466' order represents '1' with '2143'
-2142 2143 0
c Var 'aux466' direct represents '1' with '2144'
2142 -2143 2144 0
-2144 2143 0
-2144 -2142 0
c Var 'aux466' direct represents '2' with '-2143'
2142 2144 -2143 0
c Encoding variable: aux467 with domain: int(0..2) (representing constraint ((x_00007_00001=6) + (x_00008_00001=6)))
c Both direct and order encoding.
c Var 'aux467' order represents '0' with '2145'
c Var 'aux467' direct represents '0' with '2145'
c Var 'aux467' order represents '1' with '2146'
-2145 2146 0
c Var 'aux467' direct represents '1' with '2147'
2145 -2146 2147 0
-2147 2146 0
-2147 -2145 0
c Var 'aux467' direct represents '2' with '-2146'
2145 2147 -2146 0
c Encoding variable: aux468 with domain: int(0..2) (representing constraint ((x_00002_00001=6) + (x_00006_00001=6)))
c Both direct and order encoding.
c Var 'aux468' order represents '0' with '2148'
c Var 'aux468' direct represents '0' with '2148'
c Var 'aux468' order represents '1' with '2149'
-2148 2149 0
c Var 'aux468' direct represents '1' with '2150'
2148 -2149 2150 0
-2150 2149 0
-2150 -2148 0
c Var 'aux468' direct represents '2' with '-2149'
2148 2150 -2149 0
c Encoding variable: aux469 with domain: int(0..2) (representing constraint ((x_00009_00001=6) + (x_00004_00001=6)))
c Both direct and order encoding.
c Var 'aux469' order represents '0' with '2151'
c Var 'aux469' direct represents '0' with '2151'
c Var 'aux469' order represents '1' with '2152'
-2151 2152 0
c Var 'aux469' direct represents '1' with '2153'
2151 -2152 2153 0
-2153 2152 0
-2153 -2151 0
c Var 'aux469' direct represents '2' with '-2152'
2151 2153 -2152 0
c Encoding variable: aux470 with domain: int(0..3) (representing constraint ((x_00001_00001=6) + aux469))
c Both direct and order encoding.
c Var 'aux470' order represents '0' with '2154'
c Var 'aux470' direct represents '0' with '2154'
c Var 'aux470' order represents '1' with '2155'
-2154 2155 0
c Var 'aux470' direct represents '1' with '2156'
2154 -2155 2156 0
-2156 2155 0
-2156 -2154 0
c Var 'aux470' order represents '2' with '2157'
-2155 2157 0
c Var 'aux470' direct represents '2' with '2158'
2155 -2157 2158 0
-2158 2157 0
-2158 -2155 0
c Var 'aux470' direct represents '3' with '-2157'
2154 2156 2158 -2157 0
c Encoding variable: aux471 with domain: int(0..4) (representing constraint (aux466 + aux468))
c Both direct and order encoding.
c Var 'aux471' order represents '0' with '2159'
c Var 'aux471' direct represents '0' with '2159'
c Var 'aux471' order represents '1' with '2160'
-2159 2160 0
c Var 'aux471' direct represents '1' with '2161'
2159 -2160 2161 0
-2161 2160 0
-2161 -2159 0
c Var 'aux471' order represents '2' with '2162'
-2160 2162 0
c Var 'aux471' direct represents '2' with '2163'
2160 -2162 2163 0
-2163 2162 0
-2163 -2160 0
c Var 'aux471' order represents '3' with '2164'
-2162 2164 0
c Var 'aux471' direct represents '3' with '2165'
2162 -2164 2165 0
-2165 2164 0
-2165 -2162 0
c Var 'aux471' direct represents '4' with '-2164'
2159 2161 2163 2165 -2164 0
c Encoding variable: aux472 with domain: int(0..2) (representing constraint ((x_00003_00001=7) + (x_00005_00001=7)))
c Both direct and order encoding.
c Var 'aux472' order represents '0' with '2166'
c Var 'aux472' direct represents '0' with '2166'
c Var 'aux472' order represents '1' with '2167'
-2166 2167 0
c Var 'aux472' direct represents '1' with '2168'
2166 -2167 2168 0
-2168 2167 0
-2168 -2166 0
c Var 'aux472' direct represents '2' with '-2167'
2166 2168 -2167 0
c Encoding variable: aux473 with domain: int(0..2) (representing constraint ((x_00007_00001=7) + (x_00008_00001=7)))
c Both direct and order encoding.
c Var 'aux473' order represents '0' with '2169'
c Var 'aux473' direct represents '0' with '2169'
c Var 'aux473' order represents '1' with '2170'
-2169 2170 0
c Var 'aux473' direct represents '1' with '2171'
2169 -2170 2171 0
-2171 2170 0
-2171 -2169 0
c Var 'aux473' direct represents '2' with '-2170'
2169 2171 -2170 0
c Encoding variable: aux474 with domain: int(0..2) (representing constraint ((x_00002_00001=7) + (x_00006_00001=7)))
c Both direct and order encoding.
c Var 'aux474' order represents '0' with '2172'
c Var 'aux474' direct represents '0' with '2172'
c Var 'aux474' order represents '1' with '2173'
-2172 2173 0
c Var 'aux474' direct represents '1' with '2174'
2172 -2173 2174 0
-2174 2173 0
-2174 -2172 0
c Var 'aux474' direct represents '2' with '-2173'
2172 2174 -2173 0
c Encoding variable: aux475 with domain: int(0..2) (representing constraint ((x_00009_00001=7) + (x_00004_00001=7)))
c Both direct and order encoding.
c Var 'aux475' order represents '0' with '2175'
c Var 'aux475' direct represents '0' with '2175'
c Var 'aux475' order represents '1' with '2176'
-2175 2176 0
c Var 'aux475' direct represents '1' with '2177'
2175 -2176 2177 0
-2177 2176 0
-2177 -2175 0
c Var 'aux475' direct represents '2' with '-2176'
2175 2177 -2176 0
c Encoding variable: aux476 with domain: int(0..3) (representing constraint ((x_00001_00001=7) + aux475))
c Both direct and order encoding.
c Var 'aux476' order represents '0' with '2178'
c Var 'aux476' direct represents '0' with '2178'
c Var 'aux476' order represents '1' with '2179'
-2178 2179 0
c Var 'aux476' direct represents '1' with '2180'
2178 -2179 2180 0
-2180 2179 0
-2180 -2178 0
c Var 'aux476' order represents '2' with '2181'
-2179 2181 0
c Var 'aux476' direct represents '2' with '2182'
2179 -2181 2182 0
-2182 2181 0
-2182 -2179 0
c Var 'aux476' direct represents '3' with '-2181'
2178 2180 2182 -2181 0
c Encoding variable: aux477 with domain: int(0..4) (representing constraint (aux472 + aux474))
c Both direct and order encoding.
c Var 'aux477' order represents '0' with '2183'
c Var 'aux477' direct represents '0' with '2183'
c Var 'aux477' order represents '1' with '2184'
-2183 2184 0
c Var 'aux477' direct represents '1' with '2185'
2183 -2184 2185 0
-2185 2184 0
-2185 -2183 0
c Var 'aux477' order represents '2' with '2186'
-2184 2186 0
c Var 'aux477' direct represents '2' with '2187'
2184 -2186 2187 0
-2187 2186 0
-2187 -2184 0
c Var 'aux477' order represents '3' with '2188'
-2186 2188 0
c Var 'aux477' direct represents '3' with '2189'
2186 -2188 2189 0
-2189 2188 0
-2189 -2186 0
c Var 'aux477' direct represents '4' with '-2188'
2183 2185 2187 2189 -2188 0
c Encoding variable: aux478 with domain: int(0..2) (representing constraint ((x_00003_00001=8) + (x_00005_00001=8)))
c Both direct and order encoding.
c Var 'aux478' order represents '0' with '2190'
c Var 'aux478' direct represents '0' with '2190'
c Var 'aux478' order represents '1' with '2191'
-2190 2191 0
c Var 'aux478' direct represents '1' with '2192'
2190 -2191 2192 0
-2192 2191 0
-2192 -2190 0
c Var 'aux478' direct represents '2' with '-2191'
2190 2192 -2191 0
c Encoding variable: aux479 with domain: int(0..2) (representing constraint ((x_00007_00001=8) + (x_00008_00001=8)))
c Both direct and order encoding.
c Var 'aux479' order represents '0' with '2193'
c Var 'aux479' direct represents '0' with '2193'
c Var 'aux479' order represents '1' with '2194'
-2193 2194 0
c Var 'aux479' direct represents '1' with '2195'
2193 -2194 2195 0
-2195 2194 0
-2195 -2193 0
c Var 'aux479' direct represents '2' with '-2194'
2193 2195 -2194 0
c Encoding variable: aux480 with domain: int(0..2) (representing constraint ((x_00002_00001=8) + (x_00006_00001=8)))
c Both direct and order encoding.
c Var 'aux480' order represents '0' with '2196'
c Var 'aux480' direct represents '0' with '2196'
c Var 'aux480' order represents '1' with '2197'
-2196 2197 0
c Var 'aux480' direct represents '1' with '2198'
2196 -2197 2198 0
-2198 2197 0
-2198 -2196 0
c Var 'aux480' direct represents '2' with '-2197'
2196 2198 -2197 0
c Encoding variable: aux481 with domain: int(0..2) (representing constraint ((x_00009_00001=8) + (x_00004_00001=8)))
c Both direct and order encoding.
c Var 'aux481' order represents '0' with '2199'
c Var 'aux481' direct represents '0' with '2199'
c Var 'aux481' order represents '1' with '2200'
-2199 2200 0
c Var 'aux481' direct represents '1' with '2201'
2199 -2200 2201 0
-2201 2200 0
-2201 -2199 0
c Var 'aux481' direct represents '2' with '-2200'
2199 2201 -2200 0
c Encoding variable: aux482 with domain: int(0..3) (representing constraint ((x_00001_00001=8) + aux481))
c Both direct and order encoding.
c Var 'aux482' order represents '0' with '2202'
c Var 'aux482' direct represents '0' with '2202'
c Var 'aux482' order represents '1' with '2203'
-2202 2203 0
c Var 'aux482' direct represents '1' with '2204'
2202 -2203 2204 0
-2204 2203 0
-2204 -2202 0
c Var 'aux482' order represents '2' with '2205'
-2203 2205 0
c Var 'aux482' direct represents '2' with '2206'
2203 -2205 2206 0
-2206 2205 0
-2206 -2203 0
c Var 'aux482' direct represents '3' with '-2205'
2202 2204 2206 -2205 0
c Encoding variable: aux483 with domain: int(0..4) (representing constraint (aux478 + aux480))
c Both direct and order encoding.
c Var 'aux483' order represents '0' with '2207'
c Var 'aux483' direct represents '0' with '2207'
c Var 'aux483' order represents '1' with '2208'
-2207 2208 0
c Var 'aux483' direct represents '1' with '2209'
2207 -2208 2209 0
-2209 2208 0
-2209 -2207 0
c Var 'aux483' order represents '2' with '2210'
-2208 2210 0
c Var 'aux483' direct represents '2' with '2211'
2208 -2210 2211 0
-2211 2210 0
-2211 -2208 0
c Var 'aux483' order represents '3' with '2212'
-2210 2212 0
c Var 'aux483' direct represents '3' with '2213'
2210 -2212 2213 0
-2213 2212 0
-2213 -2210 0
c Var 'aux483' direct represents '4' with '-2212'
2207 2209 2211 2213 -2212 0
c Encoding variable: aux484 with domain: int(0..2) (representing constraint ((x_00003_00001=9) + (x_00005_00001=9)))
c Both direct and order encoding.
c Var 'aux484' order represents '0' with '2214'
c Var 'aux484' direct represents '0' with '2214'
c Var 'aux484' order represents '1' with '2215'
-2214 2215 0
c Var 'aux484' direct represents '1' with '2216'
2214 -2215 2216 0
-2216 2215 0
-2216 -2214 0
c Var 'aux484' direct represents '2' with '-2215'
2214 2216 -2215 0
c Encoding variable: aux485 with domain: int(0..2) (representing constraint ((x_00007_00001=9) + (x_00008_00001=9)))
c Both direct and order encoding.
c Var 'aux485' order represents '0' with '2217'
c Var 'aux485' direct represents '0' with '2217'
c Var 'aux485' order represents '1' with '2218'
-2217 2218 0
c Var 'aux485' direct represents '1' with '2219'
2217 -2218 2219 0
-2219 2218 0
-2219 -2217 0
c Var 'aux485' direct represents '2' with '-2218'
2217 2219 -2218 0
c Encoding variable: aux486 with domain: int(0..2) (representing constraint ((x_00002_00001=9) + (x_00006_00001=9)))
c Both direct and order encoding.
c Var 'aux486' order represents '0' with '2220'
c Var 'aux486' direct represents '0' with '2220'
c Var 'aux486' order represents '1' with '2221'
-2220 2221 0
c Var 'aux486' direct represents '1' with '2222'
2220 -2221 2222 0
-2222 2221 0
-2222 -2220 0
c Var 'aux486' direct represents '2' with '-2221'
2220 2222 -2221 0
c Encoding variable: aux487 with domain: int(0..2) (representing constraint ((x_00009_00001=9) + (x_00004_00001=9)))
c Both direct and order encoding.
c Var 'aux487' order represents '0' with '2223'
c Var 'aux487' direct represents '0' with '2223'
c Var 'aux487' order represents '1' with '2224'
-2223 2224 0
c Var 'aux487' direct represents '1' with '2225'
2223 -2224 2225 0
-2225 2224 0
-2225 -2223 0
c Var 'aux487' direct represents '2' with '-2224'
2223 2225 -2224 0
c Encoding variable: aux488 with domain: int(0..3) (representing constraint ((x_00001_00001=9) + aux487))
c Both direct and order encoding.
c Var 'aux488' order represents '0' with '2226'
c Var 'aux488' direct represents '0' with '2226'
c Var 'aux488' order represents '1' with '2227'
-2226 2227 0
c Var 'aux488' direct represents '1' with '2228'
2226 -2227 2228 0
-2228 2227 0
-2228 -2226 0
c Var 'aux488' order represents '2' with '2229'
-2227 2229 0
c Var 'aux488' direct represents '2' with '2230'
2227 -2229 2230 0
-2230 2229 0
-2230 -2227 0
c Var 'aux488' direct represents '3' with '-2229'
2226 2228 2230 -2229 0
c Encoding variable: aux489 with domain: int(0..4) (representing constraint (aux484 + aux486))
c Both direct and order encoding.
c Var 'aux489' order represents '0' with '2231'
c Var 'aux489' direct represents '0' with '2231'
c Var 'aux489' order represents '1' with '2232'
-2231 2232 0
c Var 'aux489' direct represents '1' with '2233'
2231 -2232 2233 0
-2233 2232 0
-2233 -2231 0
c Var 'aux489' order represents '2' with '2234'
-2232 2234 0
c Var 'aux489' direct represents '2' with '2235'
2232 -2234 2235 0
-2235 2234 0
-2235 -2232 0
c Var 'aux489' order represents '3' with '2236'
-2234 2236 0
c Var 'aux489' direct represents '3' with '2237'
2234 -2236 2237 0
-2237 2236 0
-2237 -2234 0
c Var 'aux489' direct represents '4' with '-2236'
2231 2233 2235 2237 -2236 0
c Encoding variable: aux490 with domain: int(0..2) (representing constraint ((x_00003_00002=1) + (x_00005_00002=1)))
c Both direct and order encoding.
c Var 'aux490' order represents '0' with '2238'
c Var 'aux490' direct represents '0' with '2238'
c Var 'aux490' order represents '1' with '2239'
-2238 2239 0
c Var 'aux490' direct represents '1' with '2240'
2238 -2239 2240 0
-2240 2239 0
-2240 -2238 0
c Var 'aux490' direct represents '2' with '-2239'
2238 2240 -2239 0
c Encoding variable: aux491 with domain: int(0..2) (representing constraint ((x_00007_00002=1) + (x_00008_00002=1)))
c Both direct and order encoding.
c Var 'aux491' order represents '0' with '2241'
c Var 'aux491' direct represents '0' with '2241'
c Var 'aux491' order represents '1' with '2242'
-2241 2242 0
c Var 'aux491' direct represents '1' with '2243'
2241 -2242 2243 0
-2243 2242 0
-2243 -2241 0
c Var 'aux491' direct represents '2' with '-2242'
2241 2243 -2242 0
c Encoding variable: aux492 with domain: int(0..2) (representing constraint ((x_00002_00002=1) + (x_00006_00002=1)))
c Both direct and order encoding.
c Var 'aux492' order represents '0' with '2244'
c Var 'aux492' direct represents '0' with '2244'
c Var 'aux492' order represents '1' with '2245'
-2244 2245 0
c Var 'aux492' direct represents '1' with '2246'
2244 -2245 2246 0
-2246 2245 0
-2246 -2244 0
c Var 'aux492' direct represents '2' with '-2245'
2244 2246 -2245 0
c Encoding variable: aux493 with domain: int(0..2) (representing constraint ((x_00009_00002=1) + (x_00004_00002=1)))
c Both direct and order encoding.
c Var 'aux493' order represents '0' with '2247'
c Var 'aux493' direct represents '0' with '2247'
c Var 'aux493' order represents '1' with '2248'
-2247 2248 0
c Var 'aux493' direct represents '1' with '2249'
2247 -2248 2249 0
-2249 2248 0
-2249 -2247 0
c Var 'aux493' direct represents '2' with '-2248'
2247 2249 -2248 0
c Encoding variable: aux494 with domain: int(0..3) (representing constraint ((x_00001_00002=1) + aux493))
c Both direct and order encoding.
c Var 'aux494' order represents '0' with '2250'
c Var 'aux494' direct represents '0' with '2250'
c Var 'aux494' order represents '1' with '2251'
-2250 2251 0
c Var 'aux494' direct represents '1' with '2252'
2250 -2251 2252 0
-2252 2251 0
-2252 -2250 0
c Var 'aux494' order represents '2' with '2253'
-2251 2253 0
c Var 'aux494' direct represents '2' with '2254'
2251 -2253 2254 0
-2254 2253 0
-2254 -2251 0
c Var 'aux494' direct represents '3' with '-2253'
2250 2252 2254 -2253 0
c Encoding variable: aux495 with domain: int(0..4) (representing constraint (aux490 + aux492))
c Both direct and order encoding.
c Var 'aux495' order represents '0' with '2255'
c Var 'aux495' direct represents '0' with '2255'
c Var 'aux495' order represents '1' with '2256'
-2255 2256 0
c Var 'aux495' direct represents '1' with '2257'
2255 -2256 2257 0
-2257 2256 0
-2257 -2255 0
c Var 'aux495' order represents '2' with '2258'
-2256 2258 0
c Var 'aux495' direct represents '2' with '2259'
2256 -2258 2259 0
-2259 2258 0
-2259 -2256 0
c Var 'aux495' order represents '3' with '2260'
-2258 2260 0
c Var 'aux495' direct represents '3' with '2261'
2258 -2260 2261 0
-2261 2260 0
-2261 -2258 0
c Var 'aux495' direct represents '4' with '-2260'
2255 2257 2259 2261 -2260 0
c Encoding variable: aux496 with domain: int(0..2) (representing constraint ((x_00003_00002=2) + (x_00005_00002=2)))
c Both direct and order encoding.
c Var 'aux496' order represents '0' with '2262'
c Var 'aux496' direct represents '0' with '2262'
c Var 'aux496' order represents '1' with '2263'
-2262 2263 0
c Var 'aux496' direct represents '1' with '2264'
2262 -2263 2264 0
-2264 2263 0
-2264 -2262 0
c Var 'aux496' direct represents '2' with '-2263'
2262 2264 -2263 0
c Encoding variable: aux497 with domain: int(0..2) (representing constraint ((x_00007_00002=2) + (x_00008_00002=2)))
c Both direct and order encoding.
c Var 'aux497' order represents '0' with '2265'
c Var 'aux497' direct represents '0' with '2265'
c Var 'aux497' order represents '1' with '2266'
-2265 2266 0
c Var 'aux497' direct represents '1' with '2267'
2265 -2266 2267 0
-2267 2266 0
-2267 -2265 0
c Var 'aux497' direct represents '2' with '-2266'
2265 2267 -2266 0
c Encoding variable: aux498 with domain: int(0..2) (representing constraint ((x_00002_00002=2) + (x_00006_00002=2)))
c Both direct and order encoding.
c Var 'aux498' order represents '0' with '2268'
c Var 'aux498' direct represents '0' with '2268'
c Var 'aux498' order represents '1' with '2269'
-2268 2269 0
c Var 'aux498' direct represents '1' with '2270'
2268 -2269 2270 0
-2270 2269 0
-2270 -2268 0
c Var 'aux498' direct represents '2' with '-2269'
2268 2270 -2269 0
c Encoding variable: aux499 with domain: int(0..2) (representing constraint ((x_00009_00002=2) + (x_00004_00002=2)))
c Both direct and order encoding.
c Var 'aux499' order represents '0' with '2271'
c Var 'aux499' direct represents '0' with '2271'
c Var 'aux499' order represents '1' with '2272'
-2271 2272 0
c Var 'aux499' direct represents '1' with '2273'
2271 -2272 2273 0
-2273 2272 0
-2273 -2271 0
c Var 'aux499' direct represents '2' with '-2272'
2271 2273 -2272 0
c Encoding variable: aux500 with domain: int(0..3) (representing constraint ((x_00001_00002=2) + aux499))
c Both direct and order encoding.
c Var 'aux500' order represents '0' with '2274'
c Var 'aux500' direct represents '0' with '2274'
c Var 'aux500' order represents '1' with '2275'
-2274 2275 0
c Var 'aux500' direct represents '1' with '2276'
2274 -2275 2276 0
-2276 2275 0
-2276 -2274 0
c Var 'aux500' order represents '2' with '2277'
-2275 2277 0
c Var 'aux500' direct represents '2' with '2278'
2275 -2277 2278 0
-2278 2277 0
-2278 -2275 0
c Var 'aux500' direct represents '3' with '-2277'
2274 2276 2278 -2277 0
c Encoding variable: aux501 with domain: int(0..4) (representing constraint (aux496 + aux498))
c Both direct and order encoding.
c Var 'aux501' order represents '0' with '2279'
c Var 'aux501' direct represents '0' with '2279'
c Var 'aux501' order represents '1' with '2280'
-2279 2280 0
c Var 'aux501' direct represents '1' with '2281'
2279 -2280 2281 0
-2281 2280 0
-2281 -2279 0
c Var 'aux501' order represents '2' with '2282'
-2280 2282 0
c Var 'aux501' direct represents '2' with '2283'
2280 -2282 2283 0
-2283 2282 0
-2283 -2280 0
c Var 'aux501' order represents '3' with '2284'
-2282 2284 0
c Var 'aux501' direct represents '3' with '2285'
2282 -2284 2285 0
-2285 2284 0
-2285 -2282 0
c Var 'aux501' direct represents '4' with '-2284'
2279 2281 2283 2285 -2284 0
c Encoding variable: aux502 with domain: int(0..2) (representing constraint ((x_00003_00002=3) + (x_00005_00002=3)))
c Both direct and order encoding.
c Var 'aux502' order represents '0' with '2286'
c Var 'aux502' direct represents '0' with '2286'
c Var 'aux502' order represents '1' with '2287'
-2286 2287 0
c Var 'aux502' direct represents '1' with '2288'
2286 -2287 2288 0
-2288 2287 0
-2288 -2286 0
c Var 'aux502' direct represents '2' with '-2287'
2286 2288 -2287 0
c Encoding variable: aux503 with domain: int(0..2) (representing constraint ((x_00007_00002=3) + (x_00008_00002=3)))
c Both direct and order encoding.
c Var 'aux503' order represents '0' with '2289'
c Var 'aux503' direct represents '0' with '2289'
c Var 'aux503' order represents '1' with '2290'
-2289 2290 0
c Var 'aux503' direct represents '1' with '2291'
2289 -2290 2291 0
-2291 2290 0
-2291 -2289 0
c Var 'aux503' direct represents '2' with '-2290'
2289 2291 -2290 0
c Encoding variable: aux504 with domain: int(0..2) (representing constraint ((x_00002_00002=3) + (x_00006_00002=3)))
c Both direct and order encoding.
c Var 'aux504' order represents '0' with '2292'
c Var 'aux504' direct represents '0' with '2292'
c Var 'aux504' order represents '1' with '2293'
-2292 2293 0
c Var 'aux504' direct represents '1' with '2294'
2292 -2293 2294 0
-2294 2293 0
-2294 -2292 0
c Var 'aux504' direct represents '2' with '-2293'
2292 2294 -2293 0
c Encoding variable: aux505 with domain: int(0..2) (representing constraint ((x_00009_00002=3) + (x_00004_00002=3)))
c Both direct and order encoding.
c Var 'aux505' order represents '0' with '2295'
c Var 'aux505' direct represents '0' with '2295'
c Var 'aux505' order represents '1' with '2296'
-2295 2296 0
c Var 'aux505' direct represents '1' with '2297'
2295 -2296 2297 0
-2297 2296 0
-2297 -2295 0
c Var 'aux505' direct represents '2' with '-2296'
2295 2297 -2296 0
c Encoding variable: aux506 with domain: int(0..3) (representing constraint ((x_00001_00002=3) + aux505))
c Both direct and order encoding.
c Var 'aux506' order represents '0' with '2298'
c Var 'aux506' direct represents '0' with '2298'
c Var 'aux506' order represents '1' with '2299'
-2298 2299 0
c Var 'aux506' direct represents '1' with '2300'
2298 -2299 2300 0
-2300 2299 0
-2300 -2298 0
c Var 'aux506' order represents '2' with '2301'
-2299 2301 0
c Var 'aux506' direct represents '2' with '2302'
2299 -2301 2302 0
-2302 2301 0
-2302 -2299 0
c Var 'aux506' direct represents '3' with '-2301'
2298 2300 2302 -2301 0
c Encoding variable: aux507 with domain: int(0..4) (representing constraint (aux502 + aux504))
c Both direct and order encoding.
c Var 'aux507' order represents '0' with '2303'
c Var 'aux507' direct represents '0' with '2303'
c Var 'aux507' order represents '1' with '2304'
-2303 2304 0
c Var 'aux507' direct represents '1' with '2305'
2303 -2304 2305 0
-2305 2304 0
-2305 -2303 0
c Var 'aux507' order represents '2' with '2306'
-2304 2306 0
c Var 'aux507' direct represents '2' with '2307'
2304 -2306 2307 0
-2307 2306 0
-2307 -2304 0
c Var 'aux507' order represents '3' with '2308'
-2306 2308 0
c Var 'aux507' direct represents '3' with '2309'
2306 -2308 2309 0
-2309 2308 0
-2309 -2306 0
c Var 'aux507' direct represents '4' with '-2308'
2303 2305 2307 2309 -2308 0
c Encoding variable: aux508 with domain: int(0..2) (representing constraint ((x_00003_00002=4) + (x_00005_00002=4)))
c Both direct and order encoding.
c Var 'aux508' order represents '0' with '2310'
c Var 'aux508' direct represents '0' with '2310'
c Var 'aux508' order represents '1' with '2311'
-2310 2311 0
c Var 'aux508' direct represents '1' with '2312'
2310 -2311 2312 0
-2312 2311 0
-2312 -2310 0
c Var 'aux508' direct represents '2' with '-2311'
2310 2312 -2311 0
c Encoding variable: aux509 with domain: int(0..2) (representing constraint ((x_00007_00002=4) + (x_00008_00002=4)))
c Both direct and order encoding.
c Var 'aux509' order represents '0' with '2313'
c Var 'aux509' direct represents '0' with '2313'
c Var 'aux509' order represents '1' with '2314'
-2313 2314 0
c Var 'aux509' direct represents '1' with '2315'
2313 -2314 2315 0
-2315 2314 0
-2315 -2313 0
c Var 'aux509' direct represents '2' with '-2314'
2313 2315 -2314 0
c Encoding variable: aux510 with domain: int(0..2) (representing constraint ((x_00002_00002=4) + (x_00006_00002=4)))
c Both direct and order encoding.
c Var 'aux510' order represents '0' with '2316'
c Var 'aux510' direct represents '0' with '2316'
c Var 'aux510' order represents '1' with '2317'
-2316 2317 0
c Var 'aux510' direct represents '1' with '2318'
2316 -2317 2318 0
-2318 2317 0
-2318 -2316 0
c Var 'aux510' direct represents '2' with '-2317'
2316 2318 -2317 0
c Encoding variable: aux511 with domain: int(0..2) (representing constraint ((x_00009_00002=4) + (x_00004_00002=4)))
c Both direct and order encoding.
c Var 'aux511' order represents '0' with '2319'
c Var 'aux511' direct represents '0' with '2319'
c Var 'aux511' order represents '1' with '2320'
-2319 2320 0
c Var 'aux511' direct represents '1' with '2321'
2319 -2320 2321 0
-2321 2320 0
-2321 -2319 0
c Var 'aux511' direct represents '2' with '-2320'
2319 2321 -2320 0
c Encoding variable: aux512 with domain: int(0..3) (representing constraint ((x_00001_00002=4) + aux511))
c Both direct and order encoding.
c Var 'aux512' order represents '0' with '2322'
c Var 'aux512' direct represents '0' with '2322'
c Var 'aux512' order represents '1' with '2323'
-2322 2323 0
c Var 'aux512' direct represents '1' with '2324'
2322 -2323 2324 0
-2324 2323 0
-2324 -2322 0
c Var 'aux512' order represents '2' with '2325'
-2323 2325 0
c Var 'aux512' direct represents '2' with '2326'
2323 -2325 2326 0
-2326 2325 0
-2326 -2323 0
c Var 'aux512' direct represents '3' with '-2325'
2322 2324 2326 -2325 0
c Encoding variable: aux513 with domain: int(0..4) (representing constraint (aux508 + aux510))
c Both direct and order encoding.
c Var 'aux513' order represents '0' with '2327'
c Var 'aux513' direct represents '0' with '2327'
c Var 'aux513' order represents '1' with '2328'
-2327 2328 0
c Var 'aux513' direct represents '1' with '2329'
2327 -2328 2329 0
-2329 2328 0
-2329 -2327 0
c Var 'aux513' order represents '2' with '2330'
-2328 2330 0
c Var 'aux513' direct represents '2' with '2331'
2328 -2330 2331 0
-2331 2330 0
-2331 -2328 0
c Var 'aux513' order represents '3' with '2332'
-2330 2332 0
c Var 'aux513' direct represents '3' with '2333'
2330 -2332 2333 0
-2333 2332 0
-2333 -2330 0
c Var 'aux513' direct represents '4' with '-2332'
2327 2329 2331 2333 -2332 0
c Encoding variable: aux514 with domain: int(0..2) (representing constraint ((x_00003_00002=5) + (x_00005_00002=5)))
c Both direct and order encoding.
c Var 'aux514' order represents '0' with '2334'
c Var 'aux514' direct represents '0' with '2334'
c Var 'aux514' order represents '1' with '2335'
-2334 2335 0
c Var 'aux514' direct represents '1' with '2336'
2334 -2335 2336 0
-2336 2335 0
-2336 -2334 0
c Var 'aux514' direct represents '2' with '-2335'
2334 2336 -2335 0
c Encoding variable: aux515 with domain: int(0..2) (representing constraint ((x_00007_00002=5) + (x_00008_00002=5)))
c Both direct and order encoding.
c Var 'aux515' order represents '0' with '2337'
c Var 'aux515' direct represents '0' with '2337'
c Var 'aux515' order represents '1' with '2338'
-2337 2338 0
c Var 'aux515' direct represents '1' with '2339'
2337 -2338 2339 0
-2339 2338 0
-2339 -2337 0
c Var 'aux515' direct represents '2' with '-2338'
2337 2339 -2338 0
c Encoding variable: aux516 with domain: int(0..2) (representing constraint ((x_00002_00002=5) + (x_00006_00002=5)))
c Both direct and order encoding.
c Var 'aux516' order represents '0' with '2340'
c Var 'aux516' direct represents '0' with '2340'
c Var 'aux516' order represents '1' with '2341'
-2340 2341 0
c Var 'aux516' direct represents '1' with '2342'
2340 -2341 2342 0
-2342 2341 0
-2342 -2340 0
c Var 'aux516' direct represents '2' with '-2341'
2340 2342 -2341 0
c Encoding variable: aux517 with domain: int(0..2) (representing constraint ((x_00009_00002=5) + (x_00004_00002=5)))
c Both direct and order encoding.
c Var 'aux517' order represents '0' with '2343'
c Var 'aux517' direct represents '0' with '2343'
c Var 'aux517' order represents '1' with '2344'
-2343 2344 0
c Var 'aux517' direct represents '1' with '2345'
2343 -2344 2345 0
-2345 2344 0
-2345 -2343 0
c Var 'aux517' direct represents '2' with '-2344'
2343 2345 -2344 0
c Encoding variable: aux518 with domain: int(0..3) (representing constraint ((x_00001_00002=5) + aux517))
c Both direct and order encoding.
c Var 'aux518' order represents '0' with '2346'
c Var 'aux518' direct represents '0' with '2346'
c Var 'aux518' order represents '1' with '2347'
-2346 2347 0
c Var 'aux518' direct represents '1' with '2348'
2346 -2347 2348 0
-2348 2347 0
-2348 -2346 0
c Var 'aux518' order represents '2' with '2349'
-2347 2349 0
c Var 'aux518' direct represents '2' with '2350'
2347 -2349 2350 0
-2350 2349 0
-2350 -2347 0
c Var 'aux518' direct represents '3' with '-2349'
2346 2348 2350 -2349 0
c Encoding variable: aux519 with domain: int(0..4) (representing constraint (aux514 + aux516))
c Both direct and order encoding.
c Var 'aux519' order represents '0' with '2351'
c Var 'aux519' direct represents '0' with '2351'
c Var 'aux519' order represents '1' with '2352'
-2351 2352 0
c Var 'aux519' direct represents '1' with '2353'
2351 -2352 2353 0
-2353 2352 0
-2353 -2351 0
c Var 'aux519' order represents '2' with '2354'
-2352 2354 0
c Var 'aux519' direct represents '2' with '2355'
2352 -2354 2355 0
-2355 2354 0
-2355 -2352 0
c Var 'aux519' order represents '3' with '2356'
-2354 2356 0
c Var 'aux519' direct represents '3' with '2357'
2354 -2356 2357 0
-2357 2356 0
-2357 -2354 0
c Var 'aux519' direct represents '4' with '-2356'
2351 2353 2355 2357 -2356 0
c Encoding variable: aux520 with domain: int(0..2) (representing constraint ((x_00003_00002=6) + (x_00005_00002=6)))
c Both direct and order encoding.
c Var 'aux520' order represents '0' with '2358'
c Var 'aux520' direct represents '0' with '2358'
c Var 'aux520' order represents '1' with '2359'
-2358 2359 0
c Var 'aux520' direct represents '1' with '2360'
2358 -2359 2360 0
-2360 2359 0
-2360 -2358 0
c Var 'aux520' direct represents '2' with '-2359'
2358 2360 -2359 0
c Encoding variable: aux521 with domain: int(0..2) (representing constraint ((x_00007_00002=6) + (x_00008_00002=6)))
c Both direct and order encoding.
c Var 'aux521' order represents '0' with '2361'
c Var 'aux521' direct represents '0' with '2361'
c Var 'aux521' order represents '1' with '2362'
-2361 2362 0
c Var 'aux521' direct represents '1' with '2363'
2361 -2362 2363 0
-2363 2362 0
-2363 -2361 0
c Var 'aux521' direct represents '2' with '-2362'
2361 2363 -2362 0
c Encoding variable: aux522 with domain: int(0..2) (representing constraint ((x_00002_00002=6) + (x_00006_00002=6)))
c Both direct and order encoding.
c Var 'aux522' order represents '0' with '2364'
c Var 'aux522' direct represents '0' with '2364'
c Var 'aux522' order represents '1' with '2365'
-2364 2365 0
c Var 'aux522' direct represents '1' with '2366'
2364 -2365 2366 0
-2366 2365 0
-2366 -2364 0
c Var 'aux522' direct represents '2' with '-2365'
2364 2366 -2365 0
c Encoding variable: aux523 with domain: int(0..2) (representing constraint ((x_00009_00002=6) + (x_00004_00002=6)))
c Both direct and order encoding.
c Var 'aux523' order represents '0' with '2367'
c Var 'aux523' direct represents '0' with '2367'
c Var 'aux523' order represents '1' with '2368'
-2367 2368 0
c Var 'aux523' direct represents '1' with '2369'
2367 -2368 2369 0
-2369 2368 0
-2369 -2367 0
c Var 'aux523' direct represents '2' with '-2368'
2367 2369 -2368 0
c Encoding variable: aux524 with domain: int(0..3) (representing constraint ((x_00001_00002=6) + aux523))
c Both direct and order encoding.
c Var 'aux524' order represents '0' with '2370'
c Var 'aux524' direct represents '0' with '2370'
c Var 'aux524' order represents '1' with '2371'
-2370 2371 0
c Var 'aux524' direct represents '1' with '2372'
2370 -2371 2372 0
-2372 2371 0
-2372 -2370 0
c Var 'aux524' order represents '2' with '2373'
-2371 2373 0
c Var 'aux524' direct represents '2' with '2374'
2371 -2373 2374 0
-2374 2373 0
-2374 -2371 0
c Var 'aux524' direct represents '3' with '-2373'
2370 2372 2374 -2373 0
c Encoding variable: aux525 with domain: int(0..4) (representing constraint (aux520 + aux522))
c Both direct and order encoding.
c Var 'aux525' order represents '0' with '2375'
c Var 'aux525' direct represents '0' with '2375'
c Var 'aux525' order represents '1' with '2376'
-2375 2376 0
c Var 'aux525' direct represents '1' with '2377'
2375 -2376 2377 0
-2377 2376 0
-2377 -2375 0
c Var 'aux525' order represents '2' with '2378'
-2376 2378 0
c Var 'aux525' direct represents '2' with '2379'
2376 -2378 2379 0
-2379 2378 0
-2379 -2376 0
c Var 'aux525' order represents '3' with '2380'
-2378 2380 0
c Var 'aux525' direct represents '3' with '2381'
2378 -2380 2381 0
-2381 2380 0
-2381 -2378 0
c Var 'aux525' direct represents '4' with '-2380'
2375 2377 2379 2381 -2380 0
c Encoding variable: aux526 with domain: int(0..2) (representing constraint ((x_00003_00002=7) + (x_00005_00002=7)))
c Both direct and order encoding.
c Var 'aux526' order represents '0' with '2382'
c Var 'aux526' direct represents '0' with '2382'
c Var 'aux526' order represents '1' with '2383'
-2382 2383 0
c Var 'aux526' direct represents '1' with '2384'
2382 -2383 2384 0
-2384 2383 0
-2384 -2382 0
c Var 'aux526' direct represents '2' with '-2383'
2382 2384 -2383 0
c Encoding variable: aux527 with domain: int(0..2) (representing constraint ((x_00007_00002=7) + (x_00008_00002=7)))
c Both direct and order encoding.
c Var 'aux527' order represents '0' with '2385'
c Var 'aux527' direct represents '0' with '2385'
c Var 'aux527' order represents '1' with '2386'
-2385 2386 0
c Var 'aux527' direct represents '1' with '2387'
2385 -2386 2387 0
-2387 2386 0
-2387 -2385 0
c Var 'aux527' direct represents '2' with '-2386'
2385 2387 -2386 0
c Encoding variable: aux528 with domain: int(0..2) (representing constraint ((x_00002_00002=7) + (x_00006_00002=7)))
c Both direct and order encoding.
c Var 'aux528' order represents '0' with '2388'
c Var 'aux528' direct represents '0' with '2388'
c Var 'aux528' order represents '1' with '2389'
-2388 2389 0
c Var 'aux528' direct represents '1' with '2390'
2388 -2389 2390 0
-2390 2389 0
-2390 -2388 0
c Var 'aux528' direct represents '2' with '-2389'
2388 2390 -2389 0
c Encoding variable: aux529 with domain: int(0..2) (representing constraint ((x_00009_00002=7) + (x_00004_00002=7)))
c Both direct and order encoding.
c Var 'aux529' order represents '0' with '2391'
c Var 'aux529' direct represents '0' with '2391'
c Var 'aux529' order represents '1' with '2392'
-2391 2392 0
c Var 'aux529' direct represents '1' with '2393'
2391 -2392 2393 0
-2393 2392 0
-2393 -2391 0
c Var 'aux529' direct represents '2' with '-2392'
2391 2393 -2392 0
c Encoding variable: aux530 with domain: int(0..3) (representing constraint ((x_00001_00002=7) + aux529))
c Both direct and order encoding.
c Var 'aux530' order represents '0' with '2394'
c Var 'aux530' direct represents '0' with '2394'
c Var 'aux530' order represents '1' with '2395'
-2394 2395 0
c Var 'aux530' direct represents '1' with '2396'
2394 -2395 2396 0
-2396 2395 0
-2396 -2394 0
c Var 'aux530' order represents '2' with '2397'
-2395 2397 0
c Var 'aux530' direct represents '2' with '2398'
2395 -2397 2398 0
-2398 2397 0
-2398 -2395 0
c Var 'aux530' direct represents '3' with '-2397'
2394 2396 2398 -2397 0
c Encoding variable: aux531 with domain: int(0..4) (representing constraint (aux526 + aux528))
c Both direct and order encoding.
c Var 'aux531' order represents '0' with '2399'
c Var 'aux531' direct represents '0' with '2399'
c Var 'aux531' order represents '1' with '2400'
-2399 2400 0
c Var 'aux531' direct represents '1' with '2401'
2399 -2400 2401 0
-2401 2400 0
-2401 -2399 0
c Var 'aux531' order represents '2' with '2402'
-2400 2402 0
c Var 'aux531' direct represents '2' with '2403'
2400 -2402 2403 0
-2403 2402 0
-2403 -2400 0
c Var 'aux531' order represents '3' with '2404'
-2402 2404 0
c Var 'aux531' direct represents '3' with '2405'
2402 -2404 2405 0
-2405 2404 0
-2405 -2402 0
c Var 'aux531' direct represents '4' with '-2404'
2399 2401 2403 2405 -2404 0
c Encoding variable: aux532 with domain: int(0..2) (representing constraint ((x_00003_00002=8) + (x_00005_00002=8)))
c Both direct and order encoding.
c Var 'aux532' order represents '0' with '2406'
c Var 'aux532' direct represents '0' with '2406'
c Var 'aux532' order represents '1' with '2407'
-2406 2407 0
c Var 'aux532' direct represents '1' with '2408'
2406 -2407 2408 0
-2408 2407 0
-2408 -2406 0
c Var 'aux532' direct represents '2' with '-2407'
2406 2408 -2407 0
c Encoding variable: aux533 with domain: int(0..2) (representing constraint ((x_00007_00002=8) + (x_00008_00002=8)))
c Both direct and order encoding.
c Var 'aux533' order represents '0' with '2409'
c Var 'aux533' direct represents '0' with '2409'
c Var 'aux533' order represents '1' with '2410'
-2409 2410 0
c Var 'aux533' direct represents '1' with '2411'
2409 -2410 2411 0
-2411 2410 0
-2411 -2409 0
c Var 'aux533' direct represents '2' with '-2410'
2409 2411 -2410 0
c Encoding variable: aux534 with domain: int(0..2) (representing constraint ((x_00002_00002=8) + (x_00006_00002=8)))
c Both direct and order encoding.
c Var 'aux534' order represents '0' with '2412'
c Var 'aux534' direct represents '0' with '2412'
c Var 'aux534' order represents '1' with '2413'
-2412 2413 0
c Var 'aux534' direct represents '1' with '2414'
2412 -2413 2414 0
-2414 2413 0
-2414 -2412 0
c Var 'aux534' direct represents '2' with '-2413'
2412 2414 -2413 0
c Encoding variable: aux535 with domain: int(0..2) (representing constraint ((x_00009_00002=8) + (x_00004_00002=8)))
c Both direct and order encoding.
c Var 'aux535' order represents '0' with '2415'
c Var 'aux535' direct represents '0' with '2415'
c Var 'aux535' order represents '1' with '2416'
-2415 2416 0
c Var 'aux535' direct represents '1' with '2417'
2415 -2416 2417 0
-2417 2416 0
-2417 -2415 0
c Var 'aux535' direct represents '2' with '-2416'
2415 2417 -2416 0
c Encoding variable: aux536 with domain: int(0..3) (representing constraint ((x_00001_00002=8) + aux535))
c Both direct and order encoding.
c Var 'aux536' order represents '0' with '2418'
c Var 'aux536' direct represents '0' with '2418'
c Var 'aux536' order represents '1' with '2419'
-2418 2419 0
c Var 'aux536' direct represents '1' with '2420'
2418 -2419 2420 0
-2420 2419 0
-2420 -2418 0
c Var 'aux536' order represents '2' with '2421'
-2419 2421 0
c Var 'aux536' direct represents '2' with '2422'
2419 -2421 2422 0
-2422 2421 0
-2422 -2419 0
c Var 'aux536' direct represents '3' with '-2421'
2418 2420 2422 -2421 0
c Encoding variable: aux537 with domain: int(0..4) (representing constraint (aux532 + aux534))
c Both direct and order encoding.
c Var 'aux537' order represents '0' with '2423'
c Var 'aux537' direct represents '0' with '2423'
c Var 'aux537' order represents '1' with '2424'
-2423 2424 0
c Var 'aux537' direct represents '1' with '2425'
2423 -2424 2425 0
-2425 2424 0
-2425 -2423 0
c Var 'aux537' order represents '2' with '2426'
-2424 2426 0
c Var 'aux537' direct represents '2' with '2427'
2424 -2426 2427 0
-2427 2426 0
-2427 -2424 0
c Var 'aux537' order represents '3' with '2428'
-2426 2428 0
c Var 'aux537' direct represents '3' with '2429'
2426 -2428 2429 0
-2429 2428 0
-2429 -2426 0
c Var 'aux537' direct represents '4' with '-2428'
2423 2425 2427 2429 -2428 0
c Encoding variable: aux538 with domain: int(0..2) (representing constraint ((x_00003_00002=9) + (x_00005_00002=9)))
c Both direct and order encoding.
c Var 'aux538' order represents '0' with '2430'
c Var 'aux538' direct represents '0' with '2430'
c Var 'aux538' order represents '1' with '2431'
-2430 2431 0
c Var 'aux538' direct represents '1' with '2432'
2430 -2431 2432 0
-2432 2431 0
-2432 -2430 0
c Var 'aux538' direct represents '2' with '-2431'
2430 2432 -2431 0
c Encoding variable: aux539 with domain: int(0..2) (representing constraint ((x_00007_00002=9) + (x_00008_00002=9)))
c Both direct and order encoding.
c Var 'aux539' order represents '0' with '2433'
c Var 'aux539' direct represents '0' with '2433'
c Var 'aux539' order represents '1' with '2434'
-2433 2434 0
c Var 'aux539' direct represents '1' with '2435'
2433 -2434 2435 0
-2435 2434 0
-2435 -2433 0
c Var 'aux539' direct represents '2' with '-2434'
2433 2435 -2434 0
c Encoding variable: aux540 with domain: int(0..2) (representing constraint ((x_00002_00002=9) + (x_00006_00002=9)))
c Both direct and order encoding.
c Var 'aux540' order represents '0' with '2436'
c Var 'aux540' direct represents '0' with '2436'
c Var 'aux540' order represents '1' with '2437'
-2436 2437 0
c Var 'aux540' direct represents '1' with '2438'
2436 -2437 2438 0
-2438 2437 0
-2438 -2436 0
c Var 'aux540' direct represents '2' with '-2437'
2436 2438 -2437 0
c Encoding variable: aux541 with domain: int(0..2) (representing constraint ((x_00009_00002=9) + (x_00004_00002=9)))
c Both direct and order encoding.
c Var 'aux541' order represents '0' with '2439'
c Var 'aux541' direct represents '0' with '2439'
c Var 'aux541' order represents '1' with '2440'
-2439 2440 0
c Var 'aux541' direct represents '1' with '2441'
2439 -2440 2441 0
-2441 2440 0
-2441 -2439 0
c Var 'aux541' direct represents '2' with '-2440'
2439 2441 -2440 0
c Encoding variable: aux542 with domain: int(0..3) (representing constraint ((x_00001_00002=9) + aux541))
c Both direct and order encoding.
c Var 'aux542' order represents '0' with '2442'
c Var 'aux542' direct represents '0' with '2442'
c Var 'aux542' order represents '1' with '2443'
-2442 2443 0
c Var 'aux542' direct represents '1' with '2444'
2442 -2443 2444 0
-2444 2443 0
-2444 -2442 0
c Var 'aux542' order represents '2' with '2445'
-2443 2445 0
c Var 'aux542' direct represents '2' with '2446'
2443 -2445 2446 0
-2446 2445 0
-2446 -2443 0
c Var 'aux542' direct represents '3' with '-2445'
2442 2444 2446 -2445 0
c Encoding variable: aux543 with domain: int(0..4) (representing constraint (aux538 + aux540))
c Both direct and order encoding.
c Var 'aux543' order represents '0' with '2447'
c Var 'aux543' direct represents '0' with '2447'
c Var 'aux543' order represents '1' with '2448'
-2447 2448 0
c Var 'aux543' direct represents '1' with '2449'
2447 -2448 2449 0
-2449 2448 0
-2449 -2447 0
c Var 'aux543' order represents '2' with '2450'
-2448 2450 0
c Var 'aux543' direct represents '2' with '2451'
2448 -2450 2451 0
-2451 2450 0
-2451 -2448 0
c Var 'aux543' order represents '3' with '2452'
-2450 2452 0
c Var 'aux543' direct represents '3' with '2453'
2450 -2452 2453 0
-2453 2452 0
-2453 -2450 0
c Var 'aux543' direct represents '4' with '-2452'
2447 2449 2451 2453 -2452 0
c Encoding variable: aux544 with domain: int(0..2) (representing constraint ((x_00003_00003=1) + (x_00005_00003=1)))
c Both direct and order encoding.
c Var 'aux544' order represents '0' with '2454'
c Var 'aux544' direct represents '0' with '2454'
c Var 'aux544' order represents '1' with '2455'
-2454 2455 0
c Var 'aux544' direct represents '1' with '2456'
2454 -2455 2456 0
-2456 2455 0
-2456 -2454 0
c Var 'aux544' direct represents '2' with '-2455'
2454 2456 -2455 0
c Encoding variable: aux545 with domain: int(0..2) (representing constraint ((x_00007_00003=1) + (x_00008_00003=1)))
c Both direct and order encoding.
c Var 'aux545' order represents '0' with '2457'
c Var 'aux545' direct represents '0' with '2457'
c Var 'aux545' order represents '1' with '2458'
-2457 2458 0
c Var 'aux545' direct represents '1' with '2459'
2457 -2458 2459 0
-2459 2458 0
-2459 -2457 0
c Var 'aux545' direct represents '2' with '-2458'
2457 2459 -2458 0
c Encoding variable: aux546 with domain: int(0..2) (representing constraint ((x_00002_00003=1) + (x_00006_00003=1)))
c Both direct and order encoding.
c Var 'aux546' order represents '0' with '2460'
c Var 'aux546' direct represents '0' with '2460'
c Var 'aux546' order represents '1' with '2461'
-2460 2461 0
c Var 'aux546' direct represents '1' with '2462'
2460 -2461 2462 0
-2462 2461 0
-2462 -2460 0
c Var 'aux546' direct represents '2' with '-2461'
2460 2462 -2461 0
c Encoding variable: aux547 with domain: int(0..2) (representing constraint ((x_00009_00003=1) + (x_00004_00003=1)))
c Both direct and order encoding.
c Var 'aux547' order represents '0' with '2463'
c Var 'aux547' direct represents '0' with '2463'
c Var 'aux547' order represents '1' with '2464'
-2463 2464 0
c Var 'aux547' direct represents '1' with '2465'
2463 -2464 2465 0
-2465 2464 0
-2465 -2463 0
c Var 'aux547' direct represents '2' with '-2464'
2463 2465 -2464 0
c Encoding variable: aux548 with domain: int(0..3) (representing constraint ((x_00001_00003=1) + aux547))
c Both direct and order encoding.
c Var 'aux548' order represents '0' with '2466'
c Var 'aux548' direct represents '0' with '2466'
c Var 'aux548' order represents '1' with '2467'
-2466 2467 0
c Var 'aux548' direct represents '1' with '2468'
2466 -2467 2468 0
-2468 2467 0
-2468 -2466 0
c Var 'aux548' order represents '2' with '2469'
-2467 2469 0
c Var 'aux548' direct represents '2' with '2470'
2467 -2469 2470 0
-2470 2469 0
-2470 -2467 0
c Var 'aux548' direct represents '3' with '-2469'
2466 2468 2470 -2469 0
c Encoding variable: aux549 with domain: int(0..4) (representing constraint (aux544 + aux546))
c Both direct and order encoding.
c Var 'aux549' order represents '0' with '2471'
c Var 'aux549' direct represents '0' with '2471'
c Var 'aux549' order represents '1' with '2472'
-2471 2472 0
c Var 'aux549' direct represents '1' with '2473'
2471 -2472 2473 0
-2473 2472 0
-2473 -2471 0
c Var 'aux549' order represents '2' with '2474'
-2472 2474 0
c Var 'aux549' direct represents '2' with '2475'
2472 -2474 2475 0
-2475 2474 0
-2475 -2472 0
c Var 'aux549' order represents '3' with '2476'
-2474 2476 0
c Var 'aux549' direct represents '3' with '2477'
2474 -2476 2477 0
-2477 2476 0
-2477 -2474 0
c Var 'aux549' direct represents '4' with '-2476'
2471 2473 2475 2477 -2476 0
c Encoding variable: aux550 with domain: int(0..2) (representing constraint ((x_00003_00003=2) + (x_00005_00003=2)))
c Both direct and order encoding.
c Var 'aux550' order represents '0' with '2478'
c Var 'aux550' direct represents '0' with '2478'
c Var 'aux550' order represents '1' with '2479'
-2478 2479 0
c Var 'aux550' direct represents '1' with '2480'
2478 -2479 2480 0
-2480 2479 0
-2480 -2478 0
c Var 'aux550' direct represents '2' with '-2479'
2478 2480 -2479 0
c Encoding variable: aux551 with domain: int(0..2) (representing constraint ((x_00007_00003=2) + (x_00008_00003=2)))
c Both direct and order encoding.
c Var 'aux551' order represents '0' with '2481'
c Var 'aux551' direct represents '0' with '2481'
c Var 'aux551' order represents '1' with '2482'
-2481 2482 0
c Var 'aux551' direct represents '1' with '2483'
2481 -2482 2483 0
-2483 2482 0
-2483 -2481 0
c Var 'aux551' direct represents '2' with '-2482'
2481 2483 -2482 0
c Encoding variable: aux552 with domain: int(0..2) (representing constraint ((x_00002_00003=2) + (x_00006_00003=2)))
c Both direct and order encoding.
c Var 'aux552' order represents '0' with '2484'
c Var 'aux552' direct represents '0' with '2484'
c Var 'aux552' order represents '1' with '2485'
-2484 2485 0
c Var 'aux552' direct represents '1' with '2486'
2484 -2485 2486 0
-2486 2485 0
-2486 -2484 0
c Var 'aux552' direct represents '2' with '-2485'
2484 2486 -2485 0
c Encoding variable: aux553 with domain: int(0..2) (representing constraint ((x_00009_00003=2) + (x_00004_00003=2)))
c Both direct and order encoding.
c Var 'aux553' order represents '0' with '2487'
c Var 'aux553' direct represents '0' with '2487'
c Var 'aux553' order represents '1' with '2488'
-2487 2488 0
c Var 'aux553' direct represents '1' with '2489'
2487 -2488 2489 0
-2489 2488 0
-2489 -2487 0
c Var 'aux553' direct represents '2' with '-2488'
2487 2489 -2488 0
c Encoding variable: aux554 with domain: int(0..3) (representing constraint ((x_00001_00003=2) + aux553))
c Both direct and order encoding.
c Var 'aux554' order represents '0' with '2490'
c Var 'aux554' direct represents '0' with '2490'
c Var 'aux554' order represents '1' with '2491'
-2490 2491 0
c Var 'aux554' direct represents '1' with '2492'
2490 -2491 2492 0
-2492 2491 0
-2492 -2490 0
c Var 'aux554' order represents '2' with '2493'
-2491 2493 0
c Var 'aux554' direct represents '2' with '2494'
2491 -2493 2494 0
-2494 2493 0
-2494 -2491 0
c Var 'aux554' direct represents '3' with '-2493'
2490 2492 2494 -2493 0
c Encoding variable: aux555 with domain: int(0..4) (representing constraint (aux550 + aux552))
c Both direct and order encoding.
c Var 'aux555' order represents '0' with '2495'
c Var 'aux555' direct represents '0' with '2495'
c Var 'aux555' order represents '1' with '2496'
-2495 2496 0
c Var 'aux555' direct represents '1' with '2497'
2495 -2496 2497 0
-2497 2496 0
-2497 -2495 0
c Var 'aux555' order represents '2' with '2498'
-2496 2498 0
c Var 'aux555' direct represents '2' with '2499'
2496 -2498 2499 0
-2499 2498 0
-2499 -2496 0
c Var 'aux555' order represents '3' with '2500'
-2498 2500 0
c Var 'aux555' direct represents '3' with '2501'
2498 -2500 2501 0
-2501 2500 0
-2501 -2498 0
c Var 'aux555' direct represents '4' with '-2500'
2495 2497 2499 2501 -2500 0
c Encoding variable: aux556 with domain: int(0..2) (representing constraint ((x_00003_00003=3) + (x_00005_00003=3)))
c Both direct and order encoding.
c Var 'aux556' order represents '0' with '2502'
c Var 'aux556' direct represents '0' with '2502'
c Var 'aux556' order represents '1' with '2503'
-2502 2503 0
c Var 'aux556' direct represents '1' with '2504'
2502 -2503 2504 0
-2504 2503 0
-2504 -2502 0
c Var 'aux556' direct represents '2' with '-2503'
2502 2504 -2503 0
c Encoding variable: aux557 with domain: int(0..2) (representing constraint ((x_00007_00003=3) + (x_00008_00003=3)))
c Both direct and order encoding.
c Var 'aux557' order represents '0' with '2505'
c Var 'aux557' direct represents '0' with '2505'
c Var 'aux557' order represents '1' with '2506'
-2505 2506 0
c Var 'aux557' direct represents '1' with '2507'
2505 -2506 2507 0
-2507 2506 0
-2507 -2505 0
c Var 'aux557' direct represents '2' with '-2506'
2505 2507 -2506 0
c Encoding variable: aux558 with domain: int(0..2) (representing constraint ((x_00002_00003=3) + (x_00006_00003=3)))
c Both direct and order encoding.
c Var 'aux558' order represents '0' with '2508'
c Var 'aux558' direct represents '0' with '2508'
c Var 'aux558' order represents '1' with '2509'
-2508 2509 0
c Var 'aux558' direct represents '1' with '2510'
2508 -2509 2510 0
-2510 2509 0
-2510 -2508 0
c Var 'aux558' direct represents '2' with '-2509'
2508 2510 -2509 0
c Encoding variable: aux559 with domain: int(0..2) (representing constraint ((x_00009_00003=3) + (x_00004_00003=3)))
c Both direct and order encoding.
c Var 'aux559' order represents '0' with '2511'
c Var 'aux559' direct represents '0' with '2511'
c Var 'aux559' order represents '1' with '2512'
-2511 2512 0
c Var 'aux559' direct represents '1' with '2513'
2511 -2512 2513 0
-2513 2512 0
-2513 -2511 0
c Var 'aux559' direct represents '2' with '-2512'
2511 2513 -2512 0
c Encoding variable: aux560 with domain: int(0..3) (representing constraint ((x_00001_00003=3) + aux559))
c Both direct and order encoding.
c Var 'aux560' order represents '0' with '2514'
c Var 'aux560' direct represents '0' with '2514'
c Var 'aux560' order represents '1' with '2515'
-2514 2515 0
c Var 'aux560' direct represents '1' with '2516'
2514 -2515 2516 0
-2516 2515 0
-2516 -2514 0
c Var 'aux560' order represents '2' with '2517'
-2515 2517 0
c Var 'aux560' direct represents '2' with '2518'
2515 -2517 2518 0
-2518 2517 0
-2518 -2515 0
c Var 'aux560' direct represents '3' with '-2517'
2514 2516 2518 -2517 0
c Encoding variable: aux561 with domain: int(0..4) (representing constraint (aux556 + aux558))
c Both direct and order encoding.
c Var 'aux561' order represents '0' with '2519'
c Var 'aux561' direct represents '0' with '2519'
c Var 'aux561' order represents '1' with '2520'
-2519 2520 0
c Var 'aux561' direct represents '1' with '2521'
2519 -2520 2521 0
-2521 2520 0
-2521 -2519 0
c Var 'aux561' order represents '2' with '2522'
-2520 2522 0
c Var 'aux561' direct represents '2' with '2523'
2520 -2522 2523 0
-2523 2522 0
-2523 -2520 0
c Var 'aux561' order represents '3' with '2524'
-2522 2524 0
c Var 'aux561' direct represents '3' with '2525'
2522 -2524 2525 0
-2525 2524 0
-2525 -2522 0
c Var 'aux561' direct represents '4' with '-2524'
2519 2521 2523 2525 -2524 0
c Encoding variable: aux562 with domain: int(0..2) (representing constraint ((x_00003_00003=4) + (x_00005_00003=4)))
c Both direct and order encoding.
c Var 'aux562' order represents '0' with '2526'
c Var 'aux562' direct represents '0' with '2526'
c Var 'aux562' order represents '1' with '2527'
-2526 2527 0
c Var 'aux562' direct represents '1' with '2528'
2526 -2527 2528 0
-2528 2527 0
-2528 -2526 0
c Var 'aux562' direct represents '2' with '-2527'
2526 2528 -2527 0
c Encoding variable: aux563 with domain: int(0..2) (representing constraint ((x_00007_00003=4) + (x_00008_00003=4)))
c Both direct and order encoding.
c Var 'aux563' order represents '0' with '2529'
c Var 'aux563' direct represents '0' with '2529'
c Var 'aux563' order represents '1' with '2530'
-2529 2530 0
c Var 'aux563' direct represents '1' with '2531'
2529 -2530 2531 0
-2531 2530 0
-2531 -2529 0
c Var 'aux563' direct represents '2' with '-2530'
2529 2531 -2530 0
c Encoding variable: aux564 with domain: int(0..2) (representing constraint ((x_00002_00003=4) + (x_00006_00003=4)))
c Both direct and order encoding.
c Var 'aux564' order represents '0' with '2532'
c Var 'aux564' direct represents '0' with '2532'
c Var 'aux564' order represents '1' with '2533'
-2532 2533 0
c Var 'aux564' direct represents '1' with '2534'
2532 -2533 2534 0
-2534 2533 0
-2534 -2532 0
c Var 'aux564' direct represents '2' with '-2533'
2532 2534 -2533 0
c Encoding variable: aux565 with domain: int(0..2) (representing constraint ((x_00009_00003=4) + (x_00004_00003=4)))
c Both direct and order encoding.
c Var 'aux565' order represents '0' with '2535'
c Var 'aux565' direct represents '0' with '2535'
c Var 'aux565' order represents '1' with '2536'
-2535 2536 0
c Var 'aux565' direct represents '1' with '2537'
2535 -2536 2537 0
-2537 2536 0
-2537 -2535 0
c Var 'aux565' direct represents '2' with '-2536'
2535 2537 -2536 0
c Encoding variable: aux566 with domain: int(0..3) (representing constraint ((x_00001_00003=4) + aux565))
c Both direct and order encoding.
c Var 'aux566' order represents '0' with '2538'
c Var 'aux566' direct represents '0' with '2538'
c Var 'aux566' order represents '1' with '2539'
-2538 2539 0
c Var 'aux566' direct represents '1' with '2540'
2538 -2539 2540 0
-2540 2539 0
-2540 -2538 0
c Var 'aux566' order represents '2' with '2541'
-2539 2541 0
c Var 'aux566' direct represents '2' with '2542'
2539 -2541 2542 0
-2542 2541 0
-2542 -2539 0
c Var 'aux566' direct represents '3' with '-2541'
2538 2540 2542 -2541 0
c Encoding variable: aux567 with domain: int(0..4) (representing constraint (aux562 + aux564))
c Both direct and order encoding.
c Var 'aux567' order represents '0' with '2543'
c Var 'aux567' direct represents '0' with '2543'
c Var 'aux567' order represents '1' with '2544'
-2543 2544 0
c Var 'aux567' direct represents '1' with '2545'
2543 -2544 2545 0
-2545 2544 0
-2545 -2543 0
c Var 'aux567' order represents '2' with '2546'
-2544 2546 0
c Var 'aux567' direct represents '2' with '2547'
2544 -2546 2547 0
-2547 2546 0
-2547 -2544 0
c Var 'aux567' order represents '3' with '2548'
-2546 2548 0
c Var 'aux567' direct represents '3' with '2549'
2546 -2548 2549 0
-2549 2548 0
-2549 -2546 0
c Var 'aux567' direct represents '4' with '-2548'
2543 2545 2547 2549 -2548 0
c Encoding variable: aux568 with domain: int(0..2) (representing constraint ((x_00003_00003=5) + (x_00005_00003=5)))
c Both direct and order encoding.
c Var 'aux568' order represents '0' with '2550'
c Var 'aux568' direct represents '0' with '2550'
c Var 'aux568' order represents '1' with '2551'
-2550 2551 0
c Var 'aux568' direct represents '1' with '2552'
2550 -2551 2552 0
-2552 2551 0
-2552 -2550 0
c Var 'aux568' direct represents '2' with '-2551'
2550 2552 -2551 0
c Encoding variable: aux569 with domain: int(0..2) (representing constraint ((x_00007_00003=5) + (x_00008_00003=5)))
c Both direct and order encoding.
c Var 'aux569' order represents '0' with '2553'
c Var 'aux569' direct represents '0' with '2553'
c Var 'aux569' order represents '1' with '2554'
-2553 2554 0
c Var 'aux569' direct represents '1' with '2555'
2553 -2554 2555 0
-2555 2554 0
-2555 -2553 0
c Var 'aux569' direct represents '2' with '-2554'
2553 2555 -2554 0
c Encoding variable: aux570 with domain: int(0..2) (representing constraint ((x_00002_00003=5) + (x_00006_00003=5)))
c Both direct and order encoding.
c Var 'aux570' order represents '0' with '2556'
c Var 'aux570' direct represents '0' with '2556'
c Var 'aux570' order represents '1' with '2557'
-2556 2557 0
c Var 'aux570' direct represents '1' with '2558'
2556 -2557 2558 0
-2558 2557 0
-2558 -2556 0
c Var 'aux570' direct represents '2' with '-2557'
2556 2558 -2557 0
c Encoding variable: aux571 with domain: int(0..2) (representing constraint ((x_00009_00003=5) + (x_00004_00003=5)))
c Both direct and order encoding.
c Var 'aux571' order represents '0' with '2559'
c Var 'aux571' direct represents '0' with '2559'
c Var 'aux571' order represents '1' with '2560'
-2559 2560 0
c Var 'aux571' direct represents '1' with '2561'
2559 -2560 2561 0
-2561 2560 0
-2561 -2559 0
c Var 'aux571' direct represents '2' with '-2560'
2559 2561 -2560 0
c Encoding variable: aux572 with domain: int(0..3) (representing constraint ((x_00001_00003=5) + aux571))
c Both direct and order encoding.
c Var 'aux572' order represents '0' with '2562'
c Var 'aux572' direct represents '0' with '2562'
c Var 'aux572' order represents '1' with '2563'
-2562 2563 0
c Var 'aux572' direct represents '1' with '2564'
2562 -2563 2564 0
-2564 2563 0
-2564 -2562 0
c Var 'aux572' order represents '2' with '2565'
-2563 2565 0
c Var 'aux572' direct represents '2' with '2566'
2563 -2565 2566 0
-2566 2565 0
-2566 -2563 0
c Var 'aux572' direct represents '3' with '-2565'
2562 2564 2566 -2565 0
c Encoding variable: aux573 with domain: int(0..4) (representing constraint (aux568 + aux570))
c Both direct and order encoding.
c Var 'aux573' order represents '0' with '2567'
c Var 'aux573' direct represents '0' with '2567'
c Var 'aux573' order represents '1' with '2568'
-2567 2568 0
c Var 'aux573' direct represents '1' with '2569'
2567 -2568 2569 0
-2569 2568 0
-2569 -2567 0
c Var 'aux573' order represents '2' with '2570'
-2568 2570 0
c Var 'aux573' direct represents '2' with '2571'
2568 -2570 2571 0
-2571 2570 0
-2571 -2568 0
c Var 'aux573' order represents '3' with '2572'
-2570 2572 0
c Var 'aux573' direct represents '3' with '2573'
2570 -2572 2573 0
-2573 2572 0
-2573 -2570 0
c Var 'aux573' direct represents '4' with '-2572'
2567 2569 2571 2573 -2572 0
c Encoding variable: aux574 with domain: int(0..2) (representing constraint ((x_00003_00003=6) + (x_00005_00003=6)))
c Both direct and order encoding.
c Var 'aux574' order represents '0' with '2574'
c Var 'aux574' direct represents '0' with '2574'
c Var 'aux574' order represents '1' with '2575'
-2574 2575 0
c Var 'aux574' direct represents '1' with '2576'
2574 -2575 2576 0
-2576 2575 0
-2576 -2574 0
c Var 'aux574' direct represents '2' with '-2575'
2574 2576 -2575 0
c Encoding variable: aux575 with domain: int(0..2) (representing constraint ((x_00007_00003=6) + (x_00008_00003=6)))
c Both direct and order encoding.
c Var 'aux575' order represents '0' with '2577'
c Var 'aux575' direct represents '0' with '2577'
c Var 'aux575' order represents '1' with '2578'
-2577 2578 0
c Var 'aux575' direct represents '1' with '2579'
2577 -2578 2579 0
-2579 2578 0
-2579 -2577 0
c Var 'aux575' direct represents '2' with '-2578'
2577 2579 -2578 0
c Encoding variable: aux576 with domain: int(0..2) (representing constraint ((x_00002_00003=6) + (x_00006_00003=6)))
c Both direct and order encoding.
c Var 'aux576' order represents '0' with '2580'
c Var 'aux576' direct represents '0' with '2580'
c Var 'aux576' order represents '1' with '2581'
-2580 2581 0
c Var 'aux576' direct represents '1' with '2582'
2580 -2581 2582 0
-2582 2581 0
-2582 -2580 0
c Var 'aux576' direct represents '2' with '-2581'
2580 2582 -2581 0
c Encoding variable: aux577 with domain: int(0..2) (representing constraint ((x_00009_00003=6) + (x_00004_00003=6)))
c Both direct and order encoding.
c Var 'aux577' order represents '0' with '2583'
c Var 'aux577' direct represents '0' with '2583'
c Var 'aux577' order represents '1' with '2584'
-2583 2584 0
c Var 'aux577' direct represents '1' with '2585'
2583 -2584 2585 0
-2585 2584 0
-2585 -2583 0
c Var 'aux577' direct represents '2' with '-2584'
2583 2585 -2584 0
c Encoding variable: aux578 with domain: int(0..3) (representing constraint ((x_00001_00003=6) + aux577))
c Both direct and order encoding.
c Var 'aux578' order represents '0' with '2586'
c Var 'aux578' direct represents '0' with '2586'
c Var 'aux578' order represents '1' with '2587'
-2586 2587 0
c Var 'aux578' direct represents '1' with '2588'
2586 -2587 2588 0
-2588 2587 0
-2588 -2586 0
c Var 'aux578' order represents '2' with '2589'
-2587 2589 0
c Var 'aux578' direct represents '2' with '2590'
2587 -2589 2590 0
-2590 2589 0
-2590 -2587 0
c Var 'aux578' direct represents '3' with '-2589'
2586 2588 2590 -2589 0
c Encoding variable: aux579 with domain: int(0..4) (representing constraint (aux574 + aux576))
c Both direct and order encoding.
c Var 'aux579' order represents '0' with '2591'
c Var 'aux579' direct represents '0' with '2591'
c Var 'aux579' order represents '1' with '2592'
-2591 2592 0
c Var 'aux579' direct represents '1' with '2593'
2591 -2592 2593 0
-2593 2592 0
-2593 -2591 0
c Var 'aux579' order represents '2' with '2594'
-2592 2594 0
c Var 'aux579' direct represents '2' with '2595'
2592 -2594 2595 0
-2595 2594 0
-2595 -2592 0
c Var 'aux579' order represents '3' with '2596'
-2594 2596 0
c Var 'aux579' direct represents '3' with '2597'
2594 -2596 2597 0
-2597 2596 0
-2597 -2594 0
c Var 'aux579' direct represents '4' with '-2596'
2591 2593 2595 2597 -2596 0
c Encoding variable: aux580 with domain: int(0..2) (representing constraint ((x_00003_00003=7) + (x_00005_00003=7)))
c Both direct and order encoding.
c Var 'aux580' order represents '0' with '2598'
c Var 'aux580' direct represents '0' with '2598'
c Var 'aux580' order represents '1' with '2599'
-2598 2599 0
c Var 'aux580' direct represents '1' with '2600'
2598 -2599 2600 0
-2600 2599 0
-2600 -2598 0
c Var 'aux580' direct represents '2' with '-2599'
2598 2600 -2599 0
c Encoding variable: aux581 with domain: int(0..2) (representing constraint ((x_00007_00003=7) + (x_00008_00003=7)))
c Both direct and order encoding.
c Var 'aux581' order represents '0' with '2601'
c Var 'aux581' direct represents '0' with '2601'
c Var 'aux581' order represents '1' with '2602'
-2601 2602 0
c Var 'aux581' direct represents '1' with '2603'
2601 -2602 2603 0
-2603 2602 0
-2603 -2601 0
c Var 'aux581' direct represents '2' with '-2602'
2601 2603 -2602 0
c Encoding variable: aux582 with domain: int(0..2) (representing constraint ((x_00002_00003=7) + (x_00006_00003=7)))
c Both direct and order encoding.
c Var 'aux582' order represents '0' with '2604'
c Var 'aux582' direct represents '0' with '2604'
c Var 'aux582' order represents '1' with '2605'
-2604 2605 0
c Var 'aux582' direct represents '1' with '2606'
2604 -2605 2606 0
-2606 2605 0
-2606 -2604 0
c Var 'aux582' direct represents '2' with '-2605'
2604 2606 -2605 0
c Encoding variable: aux583 with domain: int(0..2) (representing constraint ((x_00009_00003=7) + (x_00004_00003=7)))
c Both direct and order encoding.
c Var 'aux583' order represents '0' with '2607'
c Var 'aux583' direct represents '0' with '2607'
c Var 'aux583' order represents '1' with '2608'
-2607 2608 0
c Var 'aux583' direct represents '1' with '2609'
2607 -2608 2609 0
-2609 2608 0
-2609 -2607 0
c Var 'aux583' direct represents '2' with '-2608'
2607 2609 -2608 0
c Encoding variable: aux584 with domain: int(0..3) (representing constraint ((x_00001_00003=7) + aux583))
c Both direct and order encoding.
c Var 'aux584' order represents '0' with '2610'
c Var 'aux584' direct represents '0' with '2610'
c Var 'aux584' order represents '1' with '2611'
-2610 2611 0
c Var 'aux584' direct represents '1' with '2612'
2610 -2611 2612 0
-2612 2611 0
-2612 -2610 0
c Var 'aux584' order represents '2' with '2613'
-2611 2613 0
c Var 'aux584' direct represents '2' with '2614'
2611 -2613 2614 0
-2614 2613 0
-2614 -2611 0
c Var 'aux584' direct represents '3' with '-2613'
2610 2612 2614 -2613 0
c Encoding variable: aux585 with domain: int(0..4) (representing constraint (aux580 + aux582))
c Both direct and order encoding.
c Var 'aux585' order represents '0' with '2615'
c Var 'aux585' direct represents '0' with '2615'
c Var 'aux585' order represents '1' with '2616'
-2615 2616 0
c Var 'aux585' direct represents '1' with '2617'
2615 -2616 2617 0
-2617 2616 0
-2617 -2615 0
c Var 'aux585' order represents '2' with '2618'
-2616 2618 0
c Var 'aux585' direct represents '2' with '2619'
2616 -2618 2619 0
-2619 2618 0
-2619 -2616 0
c Var 'aux585' order represents '3' with '2620'
-2618 2620 0
c Var 'aux585' direct represents '3' with '2621'
2618 -2620 2621 0
-2621 2620 0
-2621 -2618 0
c Var 'aux585' direct represents '4' with '-2620'
2615 2617 2619 2621 -2620 0
c Encoding variable: aux586 with domain: int(0..2) (representing constraint ((x_00003_00003=8) + (x_00005_00003=8)))
c Both direct and order encoding.
c Var 'aux586' order represents '0' with '2622'
c Var 'aux586' direct represents '0' with '2622'
c Var 'aux586' order represents '1' with '2623'
-2622 2623 0
c Var 'aux586' direct represents '1' with '2624'
2622 -2623 2624 0
-2624 2623 0
-2624 -2622 0
c Var 'aux586' direct represents '2' with '-2623'
2622 2624 -2623 0
c Encoding variable: aux587 with domain: int(0..2) (representing constraint ((x_00007_00003=8) + (x_00008_00003=8)))
c Both direct and order encoding.
c Var 'aux587' order represents '0' with '2625'
c Var 'aux587' direct represents '0' with '2625'
c Var 'aux587' order represents '1' with '2626'
-2625 2626 0
c Var 'aux587' direct represents '1' with '2627'
2625 -2626 2627 0
-2627 2626 0
-2627 -2625 0
c Var 'aux587' direct represents '2' with '-2626'
2625 2627 -2626 0
c Encoding variable: aux588 with domain: int(0..2) (representing constraint ((x_00002_00003=8) + (x_00006_00003=8)))
c Both direct and order encoding.
c Var 'aux588' order represents '0' with '2628'
c Var 'aux588' direct represents '0' with '2628'
c Var 'aux588' order represents '1' with '2629'
-2628 2629 0
c Var 'aux588' direct represents '1' with '2630'
2628 -2629 2630 0
-2630 2629 0
-2630 -2628 0
c Var 'aux588' direct represents '2' with '-2629'
2628 2630 -2629 0
c Encoding variable: aux589 with domain: int(0..2) (representing constraint ((x_00009_00003=8) + (x_00004_00003=8)))
c Both direct and order encoding.
c Var 'aux589' order represents '0' with '2631'
c Var 'aux589' direct represents '0' with '2631'
c Var 'aux589' order represents '1' with '2632'
-2631 2632 0
c Var 'aux589' direct represents '1' with '2633'
2631 -2632 2633 0
-2633 2632 0
-2633 -2631 0
c Var 'aux589' direct represents '2' with '-2632'
2631 2633 -2632 0
c Encoding variable: aux590 with domain: int(0..3) (representing constraint ((x_00001_00003=8) + aux589))
c Both direct and order encoding.
c Var 'aux590' order represents '0' with '2634'
c Var 'aux590' direct represents '0' with '2634'
c Var 'aux590' order represents '1' with '2635'
-2634 2635 0
c Var 'aux590' direct represents '1' with '2636'
2634 -2635 2636 0
-2636 2635 0
-2636 -2634 0
c Var 'aux590' order represents '2' with '2637'
-2635 2637 0
c Var 'aux590' direct represents '2' with '2638'
2635 -2637 2638 0
-2638 2637 0
-2638 -2635 0
c Var 'aux590' direct represents '3' with '-2637'
2634 2636 2638 -2637 0
c Encoding variable: aux591 with domain: int(0..4) (representing constraint (aux586 + aux588))
c Both direct and order encoding.
c Var 'aux591' order represents '0' with '2639'
c Var 'aux591' direct represents '0' with '2639'
c Var 'aux591' order represents '1' with '2640'
-2639 2640 0
c Var 'aux591' direct represents '1' with '2641'
2639 -2640 2641 0
-2641 2640 0
-2641 -2639 0
c Var 'aux591' order represents '2' with '2642'
-2640 2642 0
c Var 'aux591' direct represents '2' with '2643'
2640 -2642 2643 0
-2643 2642 0
-2643 -2640 0
c Var 'aux591' order represents '3' with '2644'
-2642 2644 0
c Var 'aux591' direct represents '3' with '2645'
2642 -2644 2645 0
-2645 2644 0
-2645 -2642 0
c Var 'aux591' direct represents '4' with '-2644'
2639 2641 2643 2645 -2644 0
c Encoding variable: aux592 with domain: int(0..2) (representing constraint ((x_00003_00003=9) + (x_00005_00003=9)))
c Both direct and order encoding.
c Var 'aux592' order represents '0' with '2646'
c Var 'aux592' direct represents '0' with '2646'
c Var 'aux592' order represents '1' with '2647'
-2646 2647 0
c Var 'aux592' direct represents '1' with '2648'
2646 -2647 2648 0
-2648 2647 0
-2648 -2646 0
c Var 'aux592' direct represents '2' with '-2647'
2646 2648 -2647 0
c Encoding variable: aux593 with domain: int(0..2) (representing constraint ((x_00007_00003=9) + (x_00008_00003=9)))
c Both direct and order encoding.
c Var 'aux593' order represents '0' with '2649'
c Var 'aux593' direct represents '0' with '2649'
c Var 'aux593' order represents '1' with '2650'
-2649 2650 0
c Var 'aux593' direct represents '1' with '2651'
2649 -2650 2651 0
-2651 2650 0
-2651 -2649 0
c Var 'aux593' direct represents '2' with '-2650'
2649 2651 -2650 0
c Encoding variable: aux594 with domain: int(0..2) (representing constraint ((x_00002_00003=9) + (x_00006_00003=9)))
c Both direct and order encoding.
c Var 'aux594' order represents '0' with '2652'
c Var 'aux594' direct represents '0' with '2652'
c Var 'aux594' order represents '1' with '2653'
-2652 2653 0
c Var 'aux594' direct represents '1' with '2654'
2652 -2653 2654 0
-2654 2653 0
-2654 -2652 0
c Var 'aux594' direct represents '2' with '-2653'
2652 2654 -2653 0
c Encoding variable: aux595 with domain: int(0..2) (representing constraint ((x_00009_00003=9) + (x_00004_00003=9)))
c Both direct and order encoding.
c Var 'aux595' order represents '0' with '2655'
c Var 'aux595' direct represents '0' with '2655'
c Var 'aux595' order represents '1' with '2656'
-2655 2656 0
c Var 'aux595' direct represents '1' with '2657'
2655 -2656 2657 0
-2657 2656 0
-2657 -2655 0
c Var 'aux595' direct represents '2' with '-2656'
2655 2657 -2656 0
c Encoding variable: aux596 with domain: int(0..3) (representing constraint ((x_00001_00003=9) + aux595))
c Both direct and order encoding.
c Var 'aux596' order represents '0' with '2658'
c Var 'aux596' direct represents '0' with '2658'
c Var 'aux596' order represents '1' with '2659'
-2658 2659 0
c Var 'aux596' direct represents '1' with '2660'
2658 -2659 2660 0
-2660 2659 0
-2660 -2658 0
c Var 'aux596' order represents '2' with '2661'
-2659 2661 0
c Var 'aux596' direct represents '2' with '2662'
2659 -2661 2662 0
-2662 2661 0
-2662 -2659 0
c Var 'aux596' direct represents '3' with '-2661'
2658 2660 2662 -2661 0
c Encoding variable: aux597 with domain: int(0..4) (representing constraint (aux592 + aux594))
c Both direct and order encoding.
c Var 'aux597' order represents '0' with '2663'
c Var 'aux597' direct represents '0' with '2663'
c Var 'aux597' order represents '1' with '2664'
-2663 2664 0
c Var 'aux597' direct represents '1' with '2665'
2663 -2664 2665 0
-2665 2664 0
-2665 -2663 0
c Var 'aux597' order represents '2' with '2666'
-2664 2666 0
c Var 'aux597' direct represents '2' with '2667'
2664 -2666 2667 0
-2667 2666 0
-2667 -2664 0
c Var 'aux597' order represents '3' with '2668'
-2666 2668 0
c Var 'aux597' direct represents '3' with '2669'
2666 -2668 2669 0
-2669 2668 0
-2669 -2666 0
c Var 'aux597' direct represents '4' with '-2668'
2663 2665 2667 2669 -2668 0
c Encoding variable: aux598 with domain: int(0..2) (representing constraint ((x_00003_00004=1) + (x_00005_00004=1)))
c Both direct and order encoding.
c Var 'aux598' order represents '0' with '2670'
c Var 'aux598' direct represents '0' with '2670'
c Var 'aux598' order represents '1' with '2671'
-2670 2671 0
c Var 'aux598' direct represents '1' with '2672'
2670 -2671 2672 0
-2672 2671 0
-2672 -2670 0
c Var 'aux598' direct represents '2' with '-2671'
2670 2672 -2671 0
c Encoding variable: aux599 with domain: int(0..2) (representing constraint ((x_00007_00004=1) + (x_00008_00004=1)))
c Both direct and order encoding.
c Var 'aux599' order represents '0' with '2673'
c Var 'aux599' direct represents '0' with '2673'
c Var 'aux599' order represents '1' with '2674'
-2673 2674 0
c Var 'aux599' direct represents '1' with '2675'
2673 -2674 2675 0
-2675 2674 0
-2675 -2673 0
c Var 'aux599' direct represents '2' with '-2674'
2673 2675 -2674 0
c Encoding variable: aux600 with domain: int(0..2) (representing constraint ((x_00002_00004=1) + (x_00006_00004=1)))
c Both direct and order encoding.
c Var 'aux600' order represents '0' with '2676'
c Var 'aux600' direct represents '0' with '2676'
c Var 'aux600' order represents '1' with '2677'
-2676 2677 0
c Var 'aux600' direct represents '1' with '2678'
2676 -2677 2678 0
-2678 2677 0
-2678 -2676 0
c Var 'aux600' direct represents '2' with '-2677'
2676 2678 -2677 0
c Encoding variable: aux601 with domain: int(0..2) (representing constraint ((x_00009_00004=1) + (x_00004_00004=1)))
c Both direct and order encoding.
c Var 'aux601' order represents '0' with '2679'
c Var 'aux601' direct represents '0' with '2679'
c Var 'aux601' order represents '1' with '2680'
-2679 2680 0
c Var 'aux601' direct represents '1' with '2681'
2679 -2680 2681 0
-2681 2680 0
-2681 -2679 0
c Var 'aux601' direct represents '2' with '-2680'
2679 2681 -2680 0
c Encoding variable: aux602 with domain: int(0..3) (representing constraint ((x_00001_00004=1) + aux601))
c Both direct and order encoding.
c Var 'aux602' order represents '0' with '2682'
c Var 'aux602' direct represents '0' with '2682'
c Var 'aux602' order represents '1' with '2683'
-2682 2683 0
c Var 'aux602' direct represents '1' with '2684'
2682 -2683 2684 0
-2684 2683 0
-2684 -2682 0
c Var 'aux602' order represents '2' with '2685'
-2683 2685 0
c Var 'aux602' direct represents '2' with '2686'
2683 -2685 2686 0
-2686 2685 0
-2686 -2683 0
c Var 'aux602' direct represents '3' with '-2685'
2682 2684 2686 -2685 0
c Encoding variable: aux603 with domain: int(0..4) (representing constraint (aux598 + aux600))
c Both direct and order encoding.
c Var 'aux603' order represents '0' with '2687'
c Var 'aux603' direct represents '0' with '2687'
c Var 'aux603' order represents '1' with '2688'
-2687 2688 0
c Var 'aux603' direct represents '1' with '2689'
2687 -2688 2689 0
-2689 2688 0
-2689 -2687 0
c Var 'aux603' order represents '2' with '2690'
-2688 2690 0
c Var 'aux603' direct represents '2' with '2691'
2688 -2690 2691 0
-2691 2690 0
-2691 -2688 0
c Var 'aux603' order represents '3' with '2692'
-2690 2692 0
c Var 'aux603' direct represents '3' with '2693'
2690 -2692 2693 0
-2693 2692 0
-2693 -2690 0
c Var 'aux603' direct represents '4' with '-2692'
2687 2689 2691 2693 -2692 0
c Encoding variable: aux604 with domain: int(0..2) (representing constraint ((x_00003_00004=2) + (x_00005_00004=2)))
c Both direct and order encoding.
c Var 'aux604' order represents '0' with '2694'
c Var 'aux604' direct represents '0' with '2694'
c Var 'aux604' order represents '1' with '2695'
-2694 2695 0
c Var 'aux604' direct represents '1' with '2696'
2694 -2695 2696 0
-2696 2695 0
-2696 -2694 0
c Var 'aux604' direct represents '2' with '-2695'
2694 2696 -2695 0
c Encoding variable: aux605 with domain: int(0..2) (representing constraint ((x_00007_00004=2) + (x_00008_00004=2)))
c Both direct and order encoding.
c Var 'aux605' order represents '0' with '2697'
c Var 'aux605' direct represents '0' with '2697'
c Var 'aux605' order represents '1' with '2698'
-2697 2698 0
c Var 'aux605' direct represents '1' with '2699'
2697 -2698 2699 0
-2699 2698 0
-2699 -2697 0
c Var 'aux605' direct represents '2' with '-2698'
2697 2699 -2698 0
c Encoding variable: aux606 with domain: int(0..2) (representing constraint ((x_00002_00004=2) + (x_00006_00004=2)))
c Both direct and order encoding.
c Var 'aux606' order represents '0' with '2700'
c Var 'aux606' direct represents '0' with '2700'
c Var 'aux606' order represents '1' with '2701'
-2700 2701 0
c Var 'aux606' direct represents '1' with '2702'
2700 -2701 2702 0
-2702 2701 0
-2702 -2700 0
c Var 'aux606' direct represents '2' with '-2701'
2700 2702 -2701 0
c Encoding variable: aux607 with domain: int(0..2) (representing constraint ((x_00009_00004=2) + (x_00004_00004=2)))
c Both direct and order encoding.
c Var 'aux607' order represents '0' with '2703'
c Var 'aux607' direct represents '0' with '2703'
c Var 'aux607' order represents '1' with '2704'
-2703 2704 0
c Var 'aux607' direct represents '1' with '2705'
2703 -2704 2705 0
-2705 2704 0
-2705 -2703 0
c Var 'aux607' direct represents '2' with '-2704'
2703 2705 -2704 0
c Encoding variable: aux608 with domain: int(0..3) (representing constraint ((x_00001_00004=2) + aux607))
c Both direct and order encoding.
c Var 'aux608' order represents '0' with '2706'
c Var 'aux608' direct represents '0' with '2706'
c Var 'aux608' order represents '1' with '2707'
-2706 2707 0
c Var 'aux608' direct represents '1' with '2708'
2706 -2707 2708 0
-2708 2707 0
-2708 -2706 0
c Var 'aux608' order represents '2' with '2709'
-2707 2709 0
c Var 'aux608' direct represents '2' with '2710'
2707 -2709 2710 0
-2710 2709 0
-2710 -2707 0
c Var 'aux608' direct represents '3' with '-2709'
2706 2708 2710 -2709 0
c Encoding variable: aux609 with domain: int(0..4) (representing constraint (aux604 + aux606))
c Both direct and order encoding.
c Var 'aux609' order represents '0' with '2711'
c Var 'aux609' direct represents '0' with '2711'
c Var 'aux609' order represents '1' with '2712'
-2711 2712 0
c Var 'aux609' direct represents '1' with '2713'
2711 -2712 2713 0
-2713 2712 0
-2713 -2711 0
c Var 'aux609' order represents '2' with '2714'
-2712 2714 0
c Var 'aux609' direct represents '2' with '2715'
2712 -2714 2715 0
-2715 2714 0
-2715 -2712 0
c Var 'aux609' order represents '3' with '2716'
-2714 2716 0
c Var 'aux609' direct represents '3' with '2717'
2714 -2716 2717 0
-2717 2716 0
-2717 -2714 0
c Var 'aux609' direct represents '4' with '-2716'
2711 2713 2715 2717 -2716 0
c Encoding variable: aux610 with domain: int(0..2) (representing constraint ((x_00003_00004=3) + (x_00005_00004=3)))
c Both direct and order encoding.
c Var 'aux610' order represents '0' with '2718'
c Var 'aux610' direct represents '0' with '2718'
c Var 'aux610' order represents '1' with '2719'
-2718 2719 0
c Var 'aux610' direct represents '1' with '2720'
2718 -2719 2720 0
-2720 2719 0
-2720 -2718 0
c Var 'aux610' direct represents '2' with '-2719'
2718 2720 -2719 0
c Encoding variable: aux611 with domain: int(0..2) (representing constraint ((x_00007_00004=3) + (x_00008_00004=3)))
c Both direct and order encoding.
c Var 'aux611' order represents '0' with '2721'
c Var 'aux611' direct represents '0' with '2721'
c Var 'aux611' order represents '1' with '2722'
-2721 2722 0
c Var 'aux611' direct represents '1' with '2723'
2721 -2722 2723 0
-2723 2722 0
-2723 -2721 0
c Var 'aux611' direct represents '2' with '-2722'
2721 2723 -2722 0
c Encoding variable: aux612 with domain: int(0..2) (representing constraint ((x_00002_00004=3) + (x_00006_00004=3)))
c Both direct and order encoding.
c Var 'aux612' order represents '0' with '2724'
c Var 'aux612' direct represents '0' with '2724'
c Var 'aux612' order represents '1' with '2725'
-2724 2725 0
c Var 'aux612' direct represents '1' with '2726'
2724 -2725 2726 0
-2726 2725 0
-2726 -2724 0
c Var 'aux612' direct represents '2' with '-2725'
2724 2726 -2725 0
c Encoding variable: aux613 with domain: int(0..2) (representing constraint ((x_00009_00004=3) + (x_00004_00004=3)))
c Both direct and order encoding.
c Var 'aux613' order represents '0' with '2727'
c Var 'aux613' direct represents '0' with '2727'
c Var 'aux613' order represents '1' with '2728'
-2727 2728 0
c Var 'aux613' direct represents '1' with '2729'
2727 -2728 2729 0
-2729 2728 0
-2729 -2727 0
c Var 'aux613' direct represents '2' with '-2728'
2727 2729 -2728 0
c Encoding variable: aux614 with domain: int(0..3) (representing constraint ((x_00001_00004=3) + aux613))
c Both direct and order encoding.
c Var 'aux614' order represents '0' with '2730'
c Var 'aux614' direct represents '0' with '2730'
c Var 'aux614' order represents '1' with '2731'
-2730 2731 0
c Var 'aux614' direct represents '1' with '2732'
2730 -2731 2732 0
-2732 2731 0
-2732 -2730 0
c Var 'aux614' order represents '2' with '2733'
-2731 2733 0
c Var 'aux614' direct represents '2' with '2734'
2731 -2733 2734 0
-2734 2733 0
-2734 -2731 0
c Var 'aux614' direct represents '3' with '-2733'
2730 2732 2734 -2733 0
c Encoding variable: aux615 with domain: int(0..4) (representing constraint (aux610 + aux612))
c Both direct and order encoding.
c Var 'aux615' order represents '0' with '2735'
c Var 'aux615' direct represents '0' with '2735'
c Var 'aux615' order represents '1' with '2736'
-2735 2736 0
c Var 'aux615' direct represents '1' with '2737'
2735 -2736 2737 0
-2737 2736 0
-2737 -2735 0
c Var 'aux615' order represents '2' with '2738'
-2736 2738 0
c Var 'aux615' direct represents '2' with '2739'
2736 -2738 2739 0
-2739 2738 0
-2739 -2736 0
c Var 'aux615' order represents '3' with '2740'
-2738 2740 0
c Var 'aux615' direct represents '3' with '2741'
2738 -2740 2741 0
-2741 2740 0
-2741 -2738 0
c Var 'aux615' direct represents '4' with '-2740'
2735 2737 2739 2741 -2740 0
c Encoding variable: aux616 with domain: int(0..2) (representing constraint ((x_00003_00004=4) + (x_00005_00004=4)))
c Both direct and order encoding.
c Var 'aux616' order represents '0' with '2742'
c Var 'aux616' direct represents '0' with '2742'
c Var 'aux616' order represents '1' with '2743'
-2742 2743 0
c Var 'aux616' direct represents '1' with '2744'
2742 -2743 2744 0
-2744 2743 0
-2744 -2742 0
c Var 'aux616' direct represents '2' with '-2743'
2742 2744 -2743 0
c Encoding variable: aux617 with domain: int(0..2) (representing constraint ((x_00007_00004=4) + (x_00008_00004=4)))
c Both direct and order encoding.
c Var 'aux617' order represents '0' with '2745'
c Var 'aux617' direct represents '0' with '2745'
c Var 'aux617' order represents '1' with '2746'
-2745 2746 0
c Var 'aux617' direct represents '1' with '2747'
2745 -2746 2747 0
-2747 2746 0
-2747 -2745 0
c Var 'aux617' direct represents '2' with '-2746'
2745 2747 -2746 0
c Encoding variable: aux618 with domain: int(0..2) (representing constraint ((x_00002_00004=4) + (x_00006_00004=4)))
c Both direct and order encoding.
c Var 'aux618' order represents '0' with '2748'
c Var 'aux618' direct represents '0' with '2748'
c Var 'aux618' order represents '1' with '2749'
-2748 2749 0
c Var 'aux618' direct represents '1' with '2750'
2748 -2749 2750 0
-2750 2749 0
-2750 -2748 0
c Var 'aux618' direct represents '2' with '-2749'
2748 2750 -2749 0
c Encoding variable: aux619 with domain: int(0..2) (representing constraint ((x_00009_00004=4) + (x_00004_00004=4)))
c Both direct and order encoding.
c Var 'aux619' order represents '0' with '2751'
c Var 'aux619' direct represents '0' with '2751'
c Var 'aux619' order represents '1' with '2752'
-2751 2752 0
c Var 'aux619' direct represents '1' with '2753'
2751 -2752 2753 0
-2753 2752 0
-2753 -2751 0
c Var 'aux619' direct represents '2' with '-2752'
2751 2753 -2752 0
c Encoding variable: aux620 with domain: int(0..3) (representing constraint ((x_00001_00004=4) + aux619))
c Both direct and order encoding.
c Var 'aux620' order represents '0' with '2754'
c Var 'aux620' direct represents '0' with '2754'
c Var 'aux620' order represents '1' with '2755'
-2754 2755 0
c Var 'aux620' direct represents '1' with '2756'
2754 -2755 2756 0
-2756 2755 0
-2756 -2754 0
c Var 'aux620' order represents '2' with '2757'
-2755 2757 0
c Var 'aux620' direct represents '2' with '2758'
2755 -2757 2758 0
-2758 2757 0
-2758 -2755 0
c Var 'aux620' direct represents '3' with '-2757'
2754 2756 2758 -2757 0
c Encoding variable: aux621 with domain: int(0..4) (representing constraint (aux616 + aux618))
c Both direct and order encoding.
c Var 'aux621' order represents '0' with '2759'
c Var 'aux621' direct represents '0' with '2759'
c Var 'aux621' order represents '1' with '2760'
-2759 2760 0
c Var 'aux621' direct represents '1' with '2761'
2759 -2760 2761 0
-2761 2760 0
-2761 -2759 0
c Var 'aux621' order represents '2' with '2762'
-2760 2762 0
c Var 'aux621' direct represents '2' with '2763'
2760 -2762 2763 0
-2763 2762 0
-2763 -2760 0
c Var 'aux621' order represents '3' with '2764'
-2762 2764 0
c Var 'aux621' direct represents '3' with '2765'
2762 -2764 2765 0
-2765 2764 0
-2765 -2762 0
c Var 'aux621' direct represents '4' with '-2764'
2759 2761 2763 2765 -2764 0
c Encoding variable: aux622 with domain: int(0..2) (representing constraint ((x_00003_00004=5) + (x_00005_00004=5)))
c Both direct and order encoding.
c Var 'aux622' order represents '0' with '2766'
c Var 'aux622' direct represents '0' with '2766'
c Var 'aux622' order represents '1' with '2767'
-2766 2767 0
c Var 'aux622' direct represents '1' with '2768'
2766 -2767 2768 0
-2768 2767 0
-2768 -2766 0
c Var 'aux622' direct represents '2' with '-2767'
2766 2768 -2767 0
c Encoding variable: aux623 with domain: int(0..2) (representing constraint ((x_00007_00004=5) + (x_00008_00004=5)))
c Both direct and order encoding.
c Var 'aux623' order represents '0' with '2769'
c Var 'aux623' direct represents '0' with '2769'
c Var 'aux623' order represents '1' with '2770'
-2769 2770 0
c Var 'aux623' direct represents '1' with '2771'
2769 -2770 2771 0
-2771 2770 0
-2771 -2769 0
c Var 'aux623' direct represents '2' with '-2770'
2769 2771 -2770 0
c Encoding variable: aux624 with domain: int(0..2) (representing constraint ((x_00002_00004=5) + (x_00006_00004=5)))
c Both direct and order encoding.
c Var 'aux624' order represents '0' with '2772'
c Var 'aux624' direct represents '0' with '2772'
c Var 'aux624' order represents '1' with '2773'
-2772 2773 0
c Var 'aux624' direct represents '1' with '2774'
2772 -2773 2774 0
-2774 2773 0
-2774 -2772 0
c Var 'aux624' direct represents '2' with '-2773'
2772 2774 -2773 0
c Encoding variable: aux625 with domain: int(0..2) (representing constraint ((x_00009_00004=5) + (x_00004_00004=5)))
c Both direct and order encoding.
c Var 'aux625' order represents '0' with '2775'
c Var 'aux625' direct represents '0' with '2775'
c Var 'aux625' order represents '1' with '2776'
-2775 2776 0
c Var 'aux625' direct represents '1' with '2777'
2775 -2776 2777 0
-2777 2776 0
-2777 -2775 0
c Var 'aux625' direct represents '2' with '-2776'
2775 2777 -2776 0
c Encoding variable: aux626 with domain: int(0..3) (representing constraint ((x_00001_00004=5) + aux625))
c Both direct and order encoding.
c Var 'aux626' order represents '0' with '2778'
c Var 'aux626' direct represents '0' with '2778'
c Var 'aux626' order represents '1' with '2779'
-2778 2779 0
c Var 'aux626' direct represents '1' with '2780'
2778 -2779 2780 0
-2780 2779 0
-2780 -2778 0
c Var 'aux626' order represents '2' with '2781'
-2779 2781 0
c Var 'aux626' direct represents '2' with '2782'
2779 -2781 2782 0
-2782 2781 0
-2782 -2779 0
c Var 'aux626' direct represents '3' with '-2781'
2778 2780 2782 -2781 0
c Encoding variable: aux627 with domain: int(0..4) (representing constraint (aux622 + aux624))
c Both direct and order encoding.
c Var 'aux627' order represents '0' with '2783'
c Var 'aux627' direct represents '0' with '2783'
c Var 'aux627' order represents '1' with '2784'
-2783 2784 0
c Var 'aux627' direct represents '1' with '2785'
2783 -2784 2785 0
-2785 2784 0
-2785 -2783 0
c Var 'aux627' order represents '2' with '2786'
-2784 2786 0
c Var 'aux627' direct represents '2' with '2787'
2784 -2786 2787 0
-2787 2786 0
-2787 -2784 0
c Var 'aux627' order represents '3' with '2788'
-2786 2788 0
c Var 'aux627' direct represents '3' with '2789'
2786 -2788 2789 0
-2789 2788 0
-2789 -2786 0
c Var 'aux627' direct represents '4' with '-2788'
2783 2785 2787 2789 -2788 0
c Encoding variable: aux628 with domain: int(0..2) (representing constraint ((x_00003_00004=6) + (x_00005_00004=6)))
c Both direct and order encoding.
c Var 'aux628' order represents '0' with '2790'
c Var 'aux628' direct represents '0' with '2790'
c Var 'aux628' order represents '1' with '2791'
-2790 2791 0
c Var 'aux628' direct represents '1' with '2792'
2790 -2791 2792 0
-2792 2791 0
-2792 -2790 0
c Var 'aux628' direct represents '2' with '-2791'
2790 2792 -2791 0
c Encoding variable: aux629 with domain: int(0..2) (representing constraint ((x_00007_00004=6) + (x_00008_00004=6)))
c Both direct and order encoding.
c Var 'aux629' order represents '0' with '2793'
c Var 'aux629' direct represents '0' with '2793'
c Var 'aux629' order represents '1' with '2794'
-2793 2794 0
c Var 'aux629' direct represents '1' with '2795'
2793 -2794 2795 0
-2795 2794 0
-2795 -2793 0
c Var 'aux629' direct represents '2' with '-2794'
2793 2795 -2794 0
c Encoding variable: aux630 with domain: int(0..2) (representing constraint ((x_00002_00004=6) + (x_00006_00004=6)))
c Both direct and order encoding.
c Var 'aux630' order represents '0' with '2796'
c Var 'aux630' direct represents '0' with '2796'
c Var 'aux630' order represents '1' with '2797'
-2796 2797 0
c Var 'aux630' direct represents '1' with '2798'
2796 -2797 2798 0
-2798 2797 0
-2798 -2796 0
c Var 'aux630' direct represents '2' with '-2797'
2796 2798 -2797 0
c Encoding variable: aux631 with domain: int(0..2) (representing constraint ((x_00009_00004=6) + (x_00004_00004=6)))
c Both direct and order encoding.
c Var 'aux631' order represents '0' with '2799'
c Var 'aux631' direct represents '0' with '2799'
c Var 'aux631' order represents '1' with '2800'
-2799 2800 0
c Var 'aux631' direct represents '1' with '2801'
2799 -2800 2801 0
-2801 2800 0
-2801 -2799 0
c Var 'aux631' direct represents '2' with '-2800'
2799 2801 -2800 0
c Encoding variable: aux632 with domain: int(0..3) (representing constraint ((x_00001_00004=6) + aux631))
c Both direct and order encoding.
c Var 'aux632' order represents '0' with '2802'
c Var 'aux632' direct represents '0' with '2802'
c Var 'aux632' order represents '1' with '2803'
-2802 2803 0
c Var 'aux632' direct represents '1' with '2804'
2802 -2803 2804 0
-2804 2803 0
-2804 -2802 0
c Var 'aux632' order represents '2' with '2805'
-2803 2805 0
c Var 'aux632' direct represents '2' with '2806'
2803 -2805 2806 0
-2806 2805 0
-2806 -2803 0
c Var 'aux632' direct represents '3' with '-2805'
2802 2804 2806 -2805 0
c Encoding variable: aux633 with domain: int(0..4) (representing constraint (aux628 + aux630))
c Both direct and order encoding.
c Var 'aux633' order represents '0' with '2807'
c Var 'aux633' direct represents '0' with '2807'
c Var 'aux633' order represents '1' with '2808'
-2807 2808 0
c Var 'aux633' direct represents '1' with '2809'
2807 -2808 2809 0
-2809 2808 0
-2809 -2807 0
c Var 'aux633' order represents '2' with '2810'
-2808 2810 0
c Var 'aux633' direct represents '2' with '2811'
2808 -2810 2811 0
-2811 2810 0
-2811 -2808 0
c Var 'aux633' order represents '3' with '2812'
-2810 2812 0
c Var 'aux633' direct represents '3' with '2813'
2810 -2812 2813 0
-2813 2812 0
-2813 -2810 0
c Var 'aux633' direct represents '4' with '-2812'
2807 2809 2811 2813 -2812 0
c Encoding variable: aux634 with domain: int(0..2) (representing constraint ((x_00003_00004=7) + (x_00005_00004=7)))
c Both direct and order encoding.
c Var 'aux634' order represents '0' with '2814'
c Var 'aux634' direct represents '0' with '2814'
c Var 'aux634' order represents '1' with '2815'
-2814 2815 0
c Var 'aux634' direct represents '1' with '2816'
2814 -2815 2816 0
-2816 2815 0
-2816 -2814 0
c Var 'aux634' direct represents '2' with '-2815'
2814 2816 -2815 0
c Encoding variable: aux635 with domain: int(0..2) (representing constraint ((x_00007_00004=7) + (x_00008_00004=7)))
c Both direct and order encoding.
c Var 'aux635' order represents '0' with '2817'
c Var 'aux635' direct represents '0' with '2817'
c Var 'aux635' order represents '1' with '2818'
-2817 2818 0
c Var 'aux635' direct represents '1' with '2819'
2817 -2818 2819 0
-2819 2818 0
-2819 -2817 0
c Var 'aux635' direct represents '2' with '-2818'
2817 2819 -2818 0
c Encoding variable: aux636 with domain: int(0..2) (representing constraint ((x_00002_00004=7) + (x_00006_00004=7)))
c Both direct and order encoding.
c Var 'aux636' order represents '0' with '2820'
c Var 'aux636' direct represents '0' with '2820'
c Var 'aux636' order represents '1' with '2821'
-2820 2821 0
c Var 'aux636' direct represents '1' with '2822'
2820 -2821 2822 0
-2822 2821 0
-2822 -2820 0
c Var 'aux636' direct represents '2' with '-2821'
2820 2822 -2821 0
c Encoding variable: aux637 with domain: int(0..2) (representing constraint ((x_00009_00004=7) + (x_00004_00004=7)))
c Both direct and order encoding.
c Var 'aux637' order represents '0' with '2823'
c Var 'aux637' direct represents '0' with '2823'
c Var 'aux637' order represents '1' with '2824'
-2823 2824 0
c Var 'aux637' direct represents '1' with '2825'
2823 -2824 2825 0
-2825 2824 0
-2825 -2823 0
c Var 'aux637' direct represents '2' with '-2824'
2823 2825 -2824 0
c Encoding variable: aux638 with domain: int(0..3) (representing constraint ((x_00001_00004=7) + aux637))
c Both direct and order encoding.
c Var 'aux638' order represents '0' with '2826'
c Var 'aux638' direct represents '0' with '2826'
c Var 'aux638' order represents '1' with '2827'
-2826 2827 0
c Var 'aux638' direct represents '1' with '2828'
2826 -2827 2828 0
-2828 2827 0
-2828 -2826 0
c Var 'aux638' order represents '2' with '2829'
-2827 2829 0
c Var 'aux638' direct represents '2' with '2830'
2827 -2829 2830 0
-2830 2829 0
-2830 -2827 0
c Var 'aux638' direct represents '3' with '-2829'
2826 2828 2830 -2829 0
c Encoding variable: aux639 with domain: int(0..4) (representing constraint (aux634 + aux636))
c Both direct and order encoding.
c Var 'aux639' order represents '0' with '2831'
c Var 'aux639' direct represents '0' with '2831'
c Var 'aux639' order represents '1' with '2832'
-2831 2832 0
c Var 'aux639' direct represents '1' with '2833'
2831 -2832 2833 0
-2833 2832 0
-2833 -2831 0
c Var 'aux639' order represents '2' with '2834'
-2832 2834 0
c Var 'aux639' direct represents '2' with '2835'
2832 -2834 2835 0
-2835 2834 0
-2835 -2832 0
c Var 'aux639' order represents '3' with '2836'
-2834 2836 0
c Var 'aux639' direct represents '3' with '2837'
2834 -2836 2837 0
-2837 2836 0
-2837 -2834 0
c Var 'aux639' direct represents '4' with '-2836'
2831 2833 2835 2837 -2836 0
c Encoding variable: aux640 with domain: int(0..2) (representing constraint ((x_00003_00004=8) + (x_00005_00004=8)))
c Both direct and order encoding.
c Var 'aux640' order represents '0' with '2838'
c Var 'aux640' direct represents '0' with '2838'
c Var 'aux640' order represents '1' with '2839'
-2838 2839 0
c Var 'aux640' direct represents '1' with '2840'
2838 -2839 2840 0
-2840 2839 0
-2840 -2838 0
c Var 'aux640' direct represents '2' with '-2839'
2838 2840 -2839 0
c Encoding variable: aux641 with domain: int(0..2) (representing constraint ((x_00007_00004=8) + (x_00008_00004=8)))
c Both direct and order encoding.
c Var 'aux641' order represents '0' with '2841'
c Var 'aux641' direct represents '0' with '2841'
c Var 'aux641' order represents '1' with '2842'
-2841 2842 0
c Var 'aux641' direct represents '1' with '2843'
2841 -2842 2843 0
-2843 2842 0
-2843 -2841 0
c Var 'aux641' direct represents '2' with '-2842'
2841 2843 -2842 0
c Encoding variable: aux642 with domain: int(0..2) (representing constraint ((x_00002_00004=8) + (x_00006_00004=8)))
c Both direct and order encoding.
c Var 'aux642' order represents '0' with '2844'
c Var 'aux642' direct represents '0' with '2844'
c Var 'aux642' order represents '1' with '2845'
-2844 2845 0
c Var 'aux642' direct represents '1' with '2846'
2844 -2845 2846 0
-2846 2845 0
-2846 -2844 0
c Var 'aux642' direct represents '2' with '-2845'
2844 2846 -2845 0
c Encoding variable: aux643 with domain: int(0..2) (representing constraint ((x_00009_00004=8) + (x_00004_00004=8)))
c Both direct and order encoding.
c Var 'aux643' order represents '0' with '2847'
c Var 'aux643' direct represents '0' with '2847'
c Var 'aux643' order represents '1' with '2848'
-2847 2848 0
c Var 'aux643' direct represents '1' with '2849'
2847 -2848 2849 0
-2849 2848 0
-2849 -2847 0
c Var 'aux643' direct represents '2' with '-2848'
2847 2849 -2848 0
c Encoding variable: aux644 with domain: int(0..3) (representing constraint ((x_00001_00004=8) + aux643))
c Both direct and order encoding.
c Var 'aux644' order represents '0' with '2850'
c Var 'aux644' direct represents '0' with '2850'
c Var 'aux644' order represents '1' with '2851'
-2850 2851 0
c Var 'aux644' direct represents '1' with '2852'
2850 -2851 2852 0
-2852 2851 0
-2852 -2850 0
c Var 'aux644' order represents '2' with '2853'
-2851 2853 0
c Var 'aux644' direct represents '2' with '2854'
2851 -2853 2854 0
-2854 2853 0
-2854 -2851 0
c Var 'aux644' direct represents '3' with '-2853'
2850 2852 2854 -2853 0
c Encoding variable: aux645 with domain: int(0..4) (representing constraint (aux640 + aux642))
c Both direct and order encoding.
c Var 'aux645' order represents '0' with '2855'
c Var 'aux645' direct represents '0' with '2855'
c Var 'aux645' order represents '1' with '2856'
-2855 2856 0
c Var 'aux645' direct represents '1' with '2857'
2855 -2856 2857 0
-2857 2856 0
-2857 -2855 0
c Var 'aux645' order represents '2' with '2858'
-2856 2858 0
c Var 'aux645' direct represents '2' with '2859'
2856 -2858 2859 0
-2859 2858 0
-2859 -2856 0
c Var 'aux645' order represents '3' with '2860'
-2858 2860 0
c Var 'aux645' direct represents '3' with '2861'
2858 -2860 2861 0
-2861 2860 0
-2861 -2858 0
c Var 'aux645' direct represents '4' with '-2860'
2855 2857 2859 2861 -2860 0
c Encoding variable: aux646 with domain: int(0..2) (representing constraint ((x_00003_00004=9) + (x_00005_00004=9)))
c Both direct and order encoding.
c Var 'aux646' order represents '0' with '2862'
c Var 'aux646' direct represents '0' with '2862'
c Var 'aux646' order represents '1' with '2863'
-2862 2863 0
c Var 'aux646' direct represents '1' with '2864'
2862 -2863 2864 0
-2864 2863 0
-2864 -2862 0
c Var 'aux646' direct represents '2' with '-2863'
2862 2864 -2863 0
c Encoding variable: aux647 with domain: int(0..2) (representing constraint ((x_00007_00004=9) + (x_00008_00004=9)))
c Both direct and order encoding.
c Var 'aux647' order represents '0' with '2865'
c Var 'aux647' direct represents '0' with '2865'
c Var 'aux647' order represents '1' with '2866'
-2865 2866 0
c Var 'aux647' direct represents '1' with '2867'
2865 -2866 2867 0
-2867 2866 0
-2867 -2865 0
c Var 'aux647' direct represents '2' with '-2866'
2865 2867 -2866 0
c Encoding variable: aux648 with domain: int(0..2) (representing constraint ((x_00002_00004=9) + (x_00006_00004=9)))
c Both direct and order encoding.
c Var 'aux648' order represents '0' with '2868'
c Var 'aux648' direct represents '0' with '2868'
c Var 'aux648' order represents '1' with '2869'
-2868 2869 0
c Var 'aux648' direct represents '1' with '2870'
2868 -2869 2870 0
-2870 2869 0
-2870 -2868 0
c Var 'aux648' direct represents '2' with '-2869'
2868 2870 -2869 0
c Encoding variable: aux649 with domain: int(0..2) (representing constraint ((x_00009_00004=9) + (x_00004_00004=9)))
c Both direct and order encoding.
c Var 'aux649' order represents '0' with '2871'
c Var 'aux649' direct represents '0' with '2871'
c Var 'aux649' order represents '1' with '2872'
-2871 2872 0
c Var 'aux649' direct represents '1' with '2873'
2871 -2872 2873 0
-2873 2872 0
-2873 -2871 0
c Var 'aux649' direct represents '2' with '-2872'
2871 2873 -2872 0
c Encoding variable: aux650 with domain: int(0..3) (representing constraint ((x_00001_00004=9) + aux649))
c Both direct and order encoding.
c Var 'aux650' order represents '0' with '2874'
c Var 'aux650' direct represents '0' with '2874'
c Var 'aux650' order represents '1' with '2875'
-2874 2875 0
c Var 'aux650' direct represents '1' with '2876'
2874 -2875 2876 0
-2876 2875 0
-2876 -2874 0
c Var 'aux650' order represents '2' with '2877'
-2875 2877 0
c Var 'aux650' direct represents '2' with '2878'
2875 -2877 2878 0
-2878 2877 0
-2878 -2875 0
c Var 'aux650' direct represents '3' with '-2877'
2874 2876 2878 -2877 0
c Encoding variable: aux651 with domain: int(0..4) (representing constraint (aux646 + aux648))
c Both direct and order encoding.
c Var 'aux651' order represents '0' with '2879'
c Var 'aux651' direct represents '0' with '2879'
c Var 'aux651' order represents '1' with '2880'
-2879 2880 0
c Var 'aux651' direct represents '1' with '2881'
2879 -2880 2881 0
-2881 2880 0
-2881 -2879 0
c Var 'aux651' order represents '2' with '2882'
-2880 2882 0
c Var 'aux651' direct represents '2' with '2883'
2880 -2882 2883 0
-2883 2882 0
-2883 -2880 0
c Var 'aux651' order represents '3' with '2884'
-2882 2884 0
c Var 'aux651' direct represents '3' with '2885'
2882 -2884 2885 0
-2885 2884 0
-2885 -2882 0
c Var 'aux651' direct represents '4' with '-2884'
2879 2881 2883 2885 -2884 0
c Encoding variable: aux652 with domain: int(0..2) (representing constraint ((x_00003_00005=1) + (x_00005_00005=1)))
c Both direct and order encoding.
c Var 'aux652' order represents '0' with '2886'
c Var 'aux652' direct represents '0' with '2886'
c Var 'aux652' order represents '1' with '2887'
-2886 2887 0
c Var 'aux652' direct represents '1' with '2888'
2886 -2887 2888 0
-2888 2887 0
-2888 -2886 0
c Var 'aux652' direct represents '2' with '-2887'
2886 2888 -2887 0
c Encoding variable: aux653 with domain: int(0..2) (representing constraint ((x_00007_00005=1) + (x_00008_00005=1)))
c Both direct and order encoding.
c Var 'aux653' order represents '0' with '2889'
c Var 'aux653' direct represents '0' with '2889'
c Var 'aux653' order represents '1' with '2890'
-2889 2890 0
c Var 'aux653' direct represents '1' with '2891'
2889 -2890 2891 0
-2891 2890 0
-2891 -2889 0
c Var 'aux653' direct represents '2' with '-2890'
2889 2891 -2890 0
c Encoding variable: aux654 with domain: int(0..2) (representing constraint ((x_00002_00005=1) + (x_00006_00005=1)))
c Both direct and order encoding.
c Var 'aux654' order represents '0' with '2892'
c Var 'aux654' direct represents '0' with '2892'
c Var 'aux654' order represents '1' with '2893'
-2892 2893 0
c Var 'aux654' direct represents '1' with '2894'
2892 -2893 2894 0
-2894 2893 0
-2894 -2892 0
c Var 'aux654' direct represents '2' with '-2893'
2892 2894 -2893 0
c Encoding variable: aux655 with domain: int(0..2) (representing constraint ((x_00009_00005=1) + (x_00004_00005=1)))
c Both direct and order encoding.
c Var 'aux655' order represents '0' with '2895'
c Var 'aux655' direct represents '0' with '2895'
c Var 'aux655' order represents '1' with '2896'
-2895 2896 0
c Var 'aux655' direct represents '1' with '2897'
2895 -2896 2897 0
-2897 2896 0
-2897 -2895 0
c Var 'aux655' direct represents '2' with '-2896'
2895 2897 -2896 0
c Encoding variable: aux656 with domain: int(0..3) (representing constraint ((x_00001_00005=1) + aux655))
c Both direct and order encoding.
c Var 'aux656' order represents '0' with '2898'
c Var 'aux656' direct represents '0' with '2898'
c Var 'aux656' order represents '1' with '2899'
-2898 2899 0
c Var 'aux656' direct represents '1' with '2900'
2898 -2899 2900 0
-2900 2899 0
-2900 -2898 0
c Var 'aux656' order represents '2' with '2901'
-2899 2901 0
c Var 'aux656' direct represents '2' with '2902'
2899 -2901 2902 0
-2902 2901 0
-2902 -2899 0
c Var 'aux656' direct represents '3' with '-2901'
2898 2900 2902 -2901 0
c Encoding variable: aux657 with domain: int(0..4) (representing constraint (aux652 + aux654))
c Both direct and order encoding.
c Var 'aux657' order represents '0' with '2903'
c Var 'aux657' direct represents '0' with '2903'
c Var 'aux657' order represents '1' with '2904'
-2903 2904 0
c Var 'aux657' direct represents '1' with '2905'
2903 -2904 2905 0
-2905 2904 0
-2905 -2903 0
c Var 'aux657' order represents '2' with '2906'
-2904 2906 0
c Var 'aux657' direct represents '2' with '2907'
2904 -2906 2907 0
-2907 2906 0
-2907 -2904 0
c Var 'aux657' order represents '3' with '2908'
-2906 2908 0
c Var 'aux657' direct represents '3' with '2909'
2906 -2908 2909 0
-2909 2908 0
-2909 -2906 0
c Var 'aux657' direct represents '4' with '-2908'
2903 2905 2907 2909 -2908 0
c Encoding variable: aux658 with domain: int(0..2) (representing constraint ((x_00003_00005=2) + (x_00005_00005=2)))
c Both direct and order encoding.
c Var 'aux658' order represents '0' with '2910'
c Var 'aux658' direct represents '0' with '2910'
c Var 'aux658' order represents '1' with '2911'
-2910 2911 0
c Var 'aux658' direct represents '1' with '2912'
2910 -2911 2912 0
-2912 2911 0
-2912 -2910 0
c Var 'aux658' direct represents '2' with '-2911'
2910 2912 -2911 0
c Encoding variable: aux659 with domain: int(0..2) (representing constraint ((x_00007_00005=2) + (x_00008_00005=2)))
c Both direct and order encoding.
c Var 'aux659' order represents '0' with '2913'
c Var 'aux659' direct represents '0' with '2913'
c Var 'aux659' order represents '1' with '2914'
-2913 2914 0
c Var 'aux659' direct represents '1' with '2915'
2913 -2914 2915 0
-2915 2914 0
-2915 -2913 0
c Var 'aux659' direct represents '2' with '-2914'
2913 2915 -2914 0
c Encoding variable: aux660 with domain: int(0..2) (representing constraint ((x_00002_00005=2) + (x_00006_00005=2)))
c Both direct and order encoding.
c Var 'aux660' order represents '0' with '2916'
c Var 'aux660' direct represents '0' with '2916'
c Var 'aux660' order represents '1' with '2917'
-2916 2917 0
c Var 'aux660' direct represents '1' with '2918'
2916 -2917 2918 0
-2918 2917 0
-2918 -2916 0
c Var 'aux660' direct represents '2' with '-2917'
2916 2918 -2917 0
c Encoding variable: aux661 with domain: int(0..2) (representing constraint ((x_00009_00005=2) + (x_00004_00005=2)))
c Both direct and order encoding.
c Var 'aux661' order represents '0' with '2919'
c Var 'aux661' direct represents '0' with '2919'
c Var 'aux661' order represents '1' with '2920'
-2919 2920 0
c Var 'aux661' direct represents '1' with '2921'
2919 -2920 2921 0
-2921 2920 0
-2921 -2919 0
c Var 'aux661' direct represents '2' with '-2920'
2919 2921 -2920 0
c Encoding variable: aux662 with domain: int(0..3) (representing constraint ((x_00001_00005=2) + aux661))
c Both direct and order encoding.
c Var 'aux662' order represents '0' with '2922'
c Var 'aux662' direct represents '0' with '2922'
c Var 'aux662' order represents '1' with '2923'
-2922 2923 0
c Var 'aux662' direct represents '1' with '2924'
2922 -2923 2924 0
-2924 2923 0
-2924 -2922 0
c Var 'aux662' order represents '2' with '2925'
-2923 2925 0
c Var 'aux662' direct represents '2' with '2926'
2923 -2925 2926 0
-2926 2925 0
-2926 -2923 0
c Var 'aux662' direct represents '3' with '-2925'
2922 2924 2926 -2925 0
c Encoding variable: aux663 with domain: int(0..4) (representing constraint (aux658 + aux660))
c Both direct and order encoding.
c Var 'aux663' order represents '0' with '2927'
c Var 'aux663' direct represents '0' with '2927'
c Var 'aux663' order represents '1' with '2928'
-2927 2928 0
c Var 'aux663' direct represents '1' with '2929'
2927 -2928 2929 0
-2929 2928 0
-2929 -2927 0
c Var 'aux663' order represents '2' with '2930'
-2928 2930 0
c Var 'aux663' direct represents '2' with '2931'
2928 -2930 2931 0
-2931 2930 0
-2931 -2928 0
c Var 'aux663' order represents '3' with '2932'
-2930 2932 0
c Var 'aux663' direct represents '3' with '2933'
2930 -2932 2933 0
-2933 2932 0
-2933 -2930 0
c Var 'aux663' direct represents '4' with '-2932'
2927 2929 2931 2933 -2932 0
c Encoding variable: aux664 with domain: int(0..2) (representing constraint ((x_00003_00005=3) + (x_00005_00005=3)))
c Both direct and order encoding.
c Var 'aux664' order represents '0' with '2934'
c Var 'aux664' direct represents '0' with '2934'
c Var 'aux664' order represents '1' with '2935'
-2934 2935 0
c Var 'aux664' direct represents '1' with '2936'
2934 -2935 2936 0
-2936 2935 0
-2936 -2934 0
c Var 'aux664' direct represents '2' with '-2935'
2934 2936 -2935 0
c Encoding variable: aux665 with domain: int(0..2) (representing constraint ((x_00007_00005=3) + (x_00008_00005=3)))
c Both direct and order encoding.
c Var 'aux665' order represents '0' with '2937'
c Var 'aux665' direct represents '0' with '2937'
c Var 'aux665' order represents '1' with '2938'
-2937 2938 0
c Var 'aux665' direct represents '1' with '2939'
2937 -2938 2939 0
-2939 2938 0
-2939 -2937 0
c Var 'aux665' direct represents '2' with '-2938'
2937 2939 -2938 0
c Encoding variable: aux666 with domain: int(0..2) (representing constraint ((x_00002_00005=3) + (x_00006_00005=3)))
c Both direct and order encoding.
c Var 'aux666' order represents '0' with '2940'
c Var 'aux666' direct represents '0' with '2940'
c Var 'aux666' order represents '1' with '2941'
-2940 2941 0
c Var 'aux666' direct represents '1' with '2942'
2940 -2941 2942 0
-2942 2941 0
-2942 -2940 0
c Var 'aux666' direct represents '2' with '-2941'
2940 2942 -2941 0
c Encoding variable: aux667 with domain: int(0..2) (representing constraint ((x_00009_00005=3) + (x_00004_00005=3)))
c Both direct and order encoding.
c Var 'aux667' order represents '0' with '2943'
c Var 'aux667' direct represents '0' with '2943'
c Var 'aux667' order represents '1' with '2944'
-2943 2944 0
c Var 'aux667' direct represents '1' with '2945'
2943 -2944 2945 0
-2945 2944 0
-2945 -2943 0
c Var 'aux667' direct represents '2' with '-2944'
2943 2945 -2944 0
c Encoding variable: aux668 with domain: int(0..3) (representing constraint ((x_00001_00005=3) + aux667))
c Both direct and order encoding.
c Var 'aux668' order represents '0' with '2946'
c Var 'aux668' direct represents '0' with '2946'
c Var 'aux668' order represents '1' with '2947'
-2946 2947 0
c Var 'aux668' direct represents '1' with '2948'
2946 -2947 2948 0
-2948 2947 0
-2948 -2946 0
c Var 'aux668' order represents '2' with '2949'
-2947 2949 0
c Var 'aux668' direct represents '2' with '2950'
2947 -2949 2950 0
-2950 2949 0
-2950 -2947 0
c Var 'aux668' direct represents '3' with '-2949'
2946 2948 2950 -2949 0
c Encoding variable: aux669 with domain: int(0..4) (representing constraint (aux664 + aux666))
c Both direct and order encoding.
c Var 'aux669' order represents '0' with '2951'
c Var 'aux669' direct represents '0' with '2951'
c Var 'aux669' order represents '1' with '2952'
-2951 2952 0
c Var 'aux669' direct represents '1' with '2953'
2951 -2952 2953 0
-2953 2952 0
-2953 -2951 0
c Var 'aux669' order represents '2' with '2954'
-2952 2954 0
c Var 'aux669' direct represents '2' with '2955'
2952 -2954 2955 0
-2955 2954 0
-2955 -2952 0
c Var 'aux669' order represents '3' with '2956'
-2954 2956 0
c Var 'aux669' direct represents '3' with '2957'
2954 -2956 2957 0
-2957 2956 0
-2957 -2954 0
c Var 'aux669' direct represents '4' with '-2956'
2951 2953 2955 2957 -2956 0
c Encoding variable: aux670 with domain: int(0..2) (representing constraint ((x_00003_00005=4) + (x_00005_00005=4)))
c Both direct and order encoding.
c Var 'aux670' order represents '0' with '2958'
c Var 'aux670' direct represents '0' with '2958'
c Var 'aux670' order represents '1' with '2959'
-2958 2959 0
c Var 'aux670' direct represents '1' with '2960'
2958 -2959 2960 0
-2960 2959 0
-2960 -2958 0
c Var 'aux670' direct represents '2' with '-2959'
2958 2960 -2959 0
c Encoding variable: aux671 with domain: int(0..2) (representing constraint ((x_00007_00005=4) + (x_00008_00005=4)))
c Both direct and order encoding.
c Var 'aux671' order represents '0' with '2961'
c Var 'aux671' direct represents '0' with '2961'
c Var 'aux671' order represents '1' with '2962'
-2961 2962 0
c Var 'aux671' direct represents '1' with '2963'
2961 -2962 2963 0
-2963 2962 0
-2963 -2961 0
c Var 'aux671' direct represents '2' with '-2962'
2961 2963 -2962 0
c Encoding variable: aux672 with domain: int(0..2) (representing constraint ((x_00002_00005=4) + (x_00006_00005=4)))
c Both direct and order encoding.
c Var 'aux672' order represents '0' with '2964'
c Var 'aux672' direct represents '0' with '2964'
c Var 'aux672' order represents '1' with '2965'
-2964 2965 0
c Var 'aux672' direct represents '1' with '2966'
2964 -2965 2966 0
-2966 2965 0
-2966 -2964 0
c Var 'aux672' direct represents '2' with '-2965'
2964 2966 -2965 0
c Encoding variable: aux673 with domain: int(0..2) (representing constraint ((x_00009_00005=4) + (x_00004_00005=4)))
c Both direct and order encoding.
c Var 'aux673' order represents '0' with '2967'
c Var 'aux673' direct represents '0' with '2967'
c Var 'aux673' order represents '1' with '2968'
-2967 2968 0
c Var 'aux673' direct represents '1' with '2969'
2967 -2968 2969 0
-2969 2968 0
-2969 -2967 0
c Var 'aux673' direct represents '2' with '-2968'
2967 2969 -2968 0
c Encoding variable: aux674 with domain: int(0..3) (representing constraint ((x_00001_00005=4) + aux673))
c Both direct and order encoding.
c Var 'aux674' order represents '0' with '2970'
c Var 'aux674' direct represents '0' with '2970'
c Var 'aux674' order represents '1' with '2971'
-2970 2971 0
c Var 'aux674' direct represents '1' with '2972'
2970 -2971 2972 0
-2972 2971 0
-2972 -2970 0
c Var 'aux674' order represents '2' with '2973'
-2971 2973 0
c Var 'aux674' direct represents '2' with '2974'
2971 -2973 2974 0
-2974 2973 0
-2974 -2971 0
c Var 'aux674' direct represents '3' with '-2973'
2970 2972 2974 -2973 0
c Encoding variable: aux675 with domain: int(0..4) (representing constraint (aux670 + aux672))
c Both direct and order encoding.
c Var 'aux675' order represents '0' with '2975'
c Var 'aux675' direct represents '0' with '2975'
c Var 'aux675' order represents '1' with '2976'
-2975 2976 0
c Var 'aux675' direct represents '1' with '2977'
2975 -2976 2977 0
-2977 2976 0
-2977 -2975 0
c Var 'aux675' order represents '2' with '2978'
-2976 2978 0
c Var 'aux675' direct represents '2' with '2979'
2976 -2978 2979 0
-2979 2978 0
-2979 -2976 0
c Var 'aux675' order represents '3' with '2980'
-2978 2980 0
c Var 'aux675' direct represents '3' with '2981'
2978 -2980 2981 0
-2981 2980 0
-2981 -2978 0
c Var 'aux675' direct represents '4' with '-2980'
2975 2977 2979 2981 -2980 0
c Encoding variable: aux676 with domain: int(0..2) (representing constraint ((x_00003_00005=5) + (x_00005_00005=5)))
c Both direct and order encoding.
c Var 'aux676' order represents '0' with '2982'
c Var 'aux676' direct represents '0' with '2982'
c Var 'aux676' order represents '1' with '2983'
-2982 2983 0
c Var 'aux676' direct represents '1' with '2984'
2982 -2983 2984 0
-2984 2983 0
-2984 -2982 0
c Var 'aux676' direct represents '2' with '-2983'
2982 2984 -2983 0
c Encoding variable: aux677 with domain: int(0..2) (representing constraint ((x_00007_00005=5) + (x_00008_00005=5)))
c Both direct and order encoding.
c Var 'aux677' order represents '0' with '2985'
c Var 'aux677' direct represents '0' with '2985'
c Var 'aux677' order represents '1' with '2986'
-2985 2986 0
c Var 'aux677' direct represents '1' with '2987'
2985 -2986 2987 0
-2987 2986 0
-2987 -2985 0
c Var 'aux677' direct represents '2' with '-2986'
2985 2987 -2986 0
c Encoding variable: aux678 with domain: int(0..2) (representing constraint ((x_00002_00005=5) + (x_00006_00005=5)))
c Both direct and order encoding.
c Var 'aux678' order represents '0' with '2988'
c Var 'aux678' direct represents '0' with '2988'
c Var 'aux678' order represents '1' with '2989'
-2988 2989 0
c Var 'aux678' direct represents '1' with '2990'
2988 -2989 2990 0
-2990 2989 0
-2990 -2988 0
c Var 'aux678' direct represents '2' with '-2989'
2988 2990 -2989 0
c Encoding variable: aux679 with domain: int(0..2) (representing constraint ((x_00009_00005=5) + (x_00004_00005=5)))
c Both direct and order encoding.
c Var 'aux679' order represents '0' with '2991'
c Var 'aux679' direct represents '0' with '2991'
c Var 'aux679' order represents '1' with '2992'
-2991 2992 0
c Var 'aux679' direct represents '1' with '2993'
2991 -2992 2993 0
-2993 2992 0
-2993 -2991 0
c Var 'aux679' direct represents '2' with '-2992'
2991 2993 -2992 0
c Encoding variable: aux680 with domain: int(0..3) (representing constraint ((x_00001_00005=5) + aux679))
c Both direct and order encoding.
c Var 'aux680' order represents '0' with '2994'
c Var 'aux680' direct represents '0' with '2994'
c Var 'aux680' order represents '1' with '2995'
-2994 2995 0
c Var 'aux680' direct represents '1' with '2996'
2994 -2995 2996 0
-2996 2995 0
-2996 -2994 0
c Var 'aux680' order represents '2' with '2997'
-2995 2997 0
c Var 'aux680' direct represents '2' with '2998'
2995 -2997 2998 0
-2998 2997 0
-2998 -2995 0
c Var 'aux680' direct represents '3' with '-2997'
2994 2996 2998 -2997 0
c Encoding variable: aux681 with domain: int(0..4) (representing constraint (aux676 + aux678))
c Both direct and order encoding.
c Var 'aux681' order represents '0' with '2999'
c Var 'aux681' direct represents '0' with '2999'
c Var 'aux681' order represents '1' with '3000'
-2999 3000 0
c Var 'aux681' direct represents '1' with '3001'
2999 -3000 3001 0
-3001 3000 0
-3001 -2999 0
c Var 'aux681' order represents '2' with '3002'
-3000 3002 0
c Var 'aux681' direct represents '2' with '3003'
3000 -3002 3003 0
-3003 3002 0
-3003 -3000 0
c Var 'aux681' order represents '3' with '3004'
-3002 3004 0
c Var 'aux681' direct represents '3' with '3005'
3002 -3004 3005 0
-3005 3004 0
-3005 -3002 0
c Var 'aux681' direct represents '4' with '-3004'
2999 3001 3003 3005 -3004 0
c Encoding variable: aux682 with domain: int(0..2) (representing constraint ((x_00003_00005=6) + (x_00005_00005=6)))
c Both direct and order encoding.
c Var 'aux682' order represents '0' with '3006'
c Var 'aux682' direct represents '0' with '3006'
c Var 'aux682' order represents '1' with '3007'
-3006 3007 0
c Var 'aux682' direct represents '1' with '3008'
3006 -3007 3008 0
-3008 3007 0
-3008 -3006 0
c Var 'aux682' direct represents '2' with '-3007'
3006 3008 -3007 0
c Encoding variable: aux683 with domain: int(0..2) (representing constraint ((x_00007_00005=6) + (x_00008_00005=6)))
c Both direct and order encoding.
c Var 'aux683' order represents '0' with '3009'
c Var 'aux683' direct represents '0' with '3009'
c Var 'aux683' order represents '1' with '3010'
-3009 3010 0
c Var 'aux683' direct represents '1' with '3011'
3009 -3010 3011 0
-3011 3010 0
-3011 -3009 0
c Var 'aux683' direct represents '2' with '-3010'
3009 3011 -3010 0
c Encoding variable: aux684 with domain: int(0..2) (representing constraint ((x_00002_00005=6) + (x_00006_00005=6)))
c Both direct and order encoding.
c Var 'aux684' order represents '0' with '3012'
c Var 'aux684' direct represents '0' with '3012'
c Var 'aux684' order represents '1' with '3013'
-3012 3013 0
c Var 'aux684' direct represents '1' with '3014'
3012 -3013 3014 0
-3014 3013 0
-3014 -3012 0
c Var 'aux684' direct represents '2' with '-3013'
3012 3014 -3013 0
c Encoding variable: aux685 with domain: int(0..2) (representing constraint ((x_00009_00005=6) + (x_00004_00005=6)))
c Both direct and order encoding.
c Var 'aux685' order represents '0' with '3015'
c Var 'aux685' direct represents '0' with '3015'
c Var 'aux685' order represents '1' with '3016'
-3015 3016 0
c Var 'aux685' direct represents '1' with '3017'
3015 -3016 3017 0
-3017 3016 0
-3017 -3015 0
c Var 'aux685' direct represents '2' with '-3016'
3015 3017 -3016 0
c Encoding variable: aux686 with domain: int(0..3) (representing constraint ((x_00001_00005=6) + aux685))
c Both direct and order encoding.
c Var 'aux686' order represents '0' with '3018'
c Var 'aux686' direct represents '0' with '3018'
c Var 'aux686' order represents '1' with '3019'
-3018 3019 0
c Var 'aux686' direct represents '1' with '3020'
3018 -3019 3020 0
-3020 3019 0
-3020 -3018 0
c Var 'aux686' order represents '2' with '3021'
-3019 3021 0
c Var 'aux686' direct represents '2' with '3022'
3019 -3021 3022 0
-3022 3021 0
-3022 -3019 0
c Var 'aux686' direct represents '3' with '-3021'
3018 3020 3022 -3021 0
c Encoding variable: aux687 with domain: int(0..4) (representing constraint (aux682 + aux684))
c Both direct and order encoding.
c Var 'aux687' order represents '0' with '3023'
c Var 'aux687' direct represents '0' with '3023'
c Var 'aux687' order represents '1' with '3024'
-3023 3024 0
c Var 'aux687' direct represents '1' with '3025'
3023 -3024 3025 0
-3025 3024 0
-3025 -3023 0
c Var 'aux687' order represents '2' with '3026'
-3024 3026 0
c Var 'aux687' direct represents '2' with '3027'
3024 -3026 3027 0
-3027 3026 0
-3027 -3024 0
c Var 'aux687' order represents '3' with '3028'
-3026 3028 0
c Var 'aux687' direct represents '3' with '3029'
3026 -3028 3029 0
-3029 3028 0
-3029 -3026 0
c Var 'aux687' direct represents '4' with '-3028'
3023 3025 3027 3029 -3028 0
c Encoding variable: aux688 with domain: int(0..2) (representing constraint ((x_00003_00005=7) + (x_00005_00005=7)))
c Both direct and order encoding.
c Var 'aux688' order represents '0' with '3030'
c Var 'aux688' direct represents '0' with '3030'
c Var 'aux688' order represents '1' with '3031'
-3030 3031 0
c Var 'aux688' direct represents '1' with '3032'
3030 -3031 3032 0
-3032 3031 0
-3032 -3030 0
c Var 'aux688' direct represents '2' with '-3031'
3030 3032 -3031 0
c Encoding variable: aux689 with domain: int(0..2) (representing constraint ((x_00007_00005=7) + (x_00008_00005=7)))
c Both direct and order encoding.
c Var 'aux689' order represents '0' with '3033'
c Var 'aux689' direct represents '0' with '3033'
c Var 'aux689' order represents '1' with '3034'
-3033 3034 0
c Var 'aux689' direct represents '1' with '3035'
3033 -3034 3035 0
-3035 3034 0
-3035 -3033 0
c Var 'aux689' direct represents '2' with '-3034'
3033 3035 -3034 0
c Encoding variable: aux690 with domain: int(0..2) (representing constraint ((x_00002_00005=7) + (x_00006_00005=7)))
c Both direct and order encoding.
c Var 'aux690' order represents '0' with '3036'
c Var 'aux690' direct represents '0' with '3036'
c Var 'aux690' order represents '1' with '3037'
-3036 3037 0
c Var 'aux690' direct represents '1' with '3038'
3036 -3037 3038 0
-3038 3037 0
-3038 -3036 0
c Var 'aux690' direct represents '2' with '-3037'
3036 3038 -3037 0
c Encoding variable: aux691 with domain: int(0..2) (representing constraint ((x_00009_00005=7) + (x_00004_00005=7)))
c Both direct and order encoding.
c Var 'aux691' order represents '0' with '3039'
c Var 'aux691' direct represents '0' with '3039'
c Var 'aux691' order represents '1' with '3040'
-3039 3040 0
c Var 'aux691' direct represents '1' with '3041'
3039 -3040 3041 0
-3041 3040 0
-3041 -3039 0
c Var 'aux691' direct represents '2' with '-3040'
3039 3041 -3040 0
c Encoding variable: aux692 with domain: int(0..3) (representing constraint ((x_00001_00005=7) + aux691))
c Both direct and order encoding.
c Var 'aux692' order represents '0' with '3042'
c Var 'aux692' direct represents '0' with '3042'
c Var 'aux692' order represents '1' with '3043'
-3042 3043 0
c Var 'aux692' direct represents '1' with '3044'
3042 -3043 3044 0
-3044 3043 0
-3044 -3042 0
c Var 'aux692' order represents '2' with '3045'
-3043 3045 0
c Var 'aux692' direct represents '2' with '3046'
3043 -3045 3046 0
-3046 3045 0
-3046 -3043 0
c Var 'aux692' direct represents '3' with '-3045'
3042 3044 3046 -3045 0
c Encoding variable: aux693 with domain: int(0..4) (representing constraint (aux688 + aux690))
c Both direct and order encoding.
c Var 'aux693' order represents '0' with '3047'
c Var 'aux693' direct represents '0' with '3047'
c Var 'aux693' order represents '1' with '3048'
-3047 3048 0
c Var 'aux693' direct represents '1' with '3049'
3047 -3048 3049 0
-3049 3048 0
-3049 -3047 0
c Var 'aux693' order represents '2' with '3050'
-3048 3050 0
c Var 'aux693' direct represents '2' with '3051'
3048 -3050 3051 0
-3051 3050 0
-3051 -3048 0
c Var 'aux693' order represents '3' with '3052'
-3050 3052 0
c Var 'aux693' direct represents '3' with '3053'
3050 -3052 3053 0
-3053 3052 0
-3053 -3050 0
c Var 'aux693' direct represents '4' with '-3052'
3047 3049 3051 3053 -3052 0
c Encoding variable: aux694 with domain: int(0..2) (representing constraint ((x_00003_00005=8) + (x_00005_00005=8)))
c Both direct and order encoding.
c Var 'aux694' order represents '0' with '3054'
c Var 'aux694' direct represents '0' with '3054'
c Var 'aux694' order represents '1' with '3055'
-3054 3055 0
c Var 'aux694' direct represents '1' with '3056'
3054 -3055 3056 0
-3056 3055 0
-3056 -3054 0
c Var 'aux694' direct represents '2' with '-3055'
3054 3056 -3055 0
c Encoding variable: aux695 with domain: int(0..2) (representing constraint ((x_00007_00005=8) + (x_00008_00005=8)))
c Both direct and order encoding.
c Var 'aux695' order represents '0' with '3057'
c Var 'aux695' direct represents '0' with '3057'
c Var 'aux695' order represents '1' with '3058'
-3057 3058 0
c Var 'aux695' direct represents '1' with '3059'
3057 -3058 3059 0
-3059 3058 0
-3059 -3057 0
c Var 'aux695' direct represents '2' with '-3058'
3057 3059 -3058 0
c Encoding variable: aux696 with domain: int(0..2) (representing constraint ((x_00002_00005=8) + (x_00006_00005=8)))
c Both direct and order encoding.
c Var 'aux696' order represents '0' with '3060'
c Var 'aux696' direct represents '0' with '3060'
c Var 'aux696' order represents '1' with '3061'
-3060 3061 0
c Var 'aux696' direct represents '1' with '3062'
3060 -3061 3062 0
-3062 3061 0
-3062 -3060 0
c Var 'aux696' direct represents '2' with '-3061'
3060 3062 -3061 0
c Encoding variable: aux697 with domain: int(0..2) (representing constraint ((x_00009_00005=8) + (x_00004_00005=8)))
c Both direct and order encoding.
c Var 'aux697' order represents '0' with '3063'
c Var 'aux697' direct represents '0' with '3063'
c Var 'aux697' order represents '1' with '3064'
-3063 3064 0
c Var 'aux697' direct represents '1' with '3065'
3063 -3064 3065 0
-3065 3064 0
-3065 -3063 0
c Var 'aux697' direct represents '2' with '-3064'
3063 3065 -3064 0
c Encoding variable: aux698 with domain: int(0..3) (representing constraint ((x_00001_00005=8) + aux697))
c Both direct and order encoding.
c Var 'aux698' order represents '0' with '3066'
c Var 'aux698' direct represents '0' with '3066'
c Var 'aux698' order represents '1' with '3067'
-3066 3067 0
c Var 'aux698' direct represents '1' with '3068'
3066 -3067 3068 0
-3068 3067 0
-3068 -3066 0
c Var 'aux698' order represents '2' with '3069'
-3067 3069 0
c Var 'aux698' direct represents '2' with '3070'
3067 -3069 3070 0
-3070 3069 0
-3070 -3067 0
c Var 'aux698' direct represents '3' with '-3069'
3066 3068 3070 -3069 0
c Encoding variable: aux699 with domain: int(0..4) (representing constraint (aux694 + aux696))
c Both direct and order encoding.
c Var 'aux699' order represents '0' with '3071'
c Var 'aux699' direct represents '0' with '3071'
c Var 'aux699' order represents '1' with '3072'
-3071 3072 0
c Var 'aux699' direct represents '1' with '3073'
3071 -3072 3073 0
-3073 3072 0
-3073 -3071 0
c Var 'aux699' order represents '2' with '3074'
-3072 3074 0
c Var 'aux699' direct represents '2' with '3075'
3072 -3074 3075 0
-3075 3074 0
-3075 -3072 0
c Var 'aux699' order represents '3' with '3076'
-3074 3076 0
c Var 'aux699' direct represents '3' with '3077'
3074 -3076 3077 0
-3077 3076 0
-3077 -3074 0
c Var 'aux699' direct represents '4' with '-3076'
3071 3073 3075 3077 -3076 0
c Encoding variable: aux700 with domain: int(0..2) (representing constraint ((x_00003_00005=9) + (x_00005_00005=9)))
c Both direct and order encoding.
c Var 'aux700' order represents '0' with '3078'
c Var 'aux700' direct represents '0' with '3078'
c Var 'aux700' order represents '1' with '3079'
-3078 3079 0
c Var 'aux700' direct represents '1' with '3080'
3078 -3079 3080 0
-3080 3079 0
-3080 -3078 0
c Var 'aux700' direct represents '2' with '-3079'
3078 3080 -3079 0
c Encoding variable: aux701 with domain: int(0..2) (representing constraint ((x_00007_00005=9) + (x_00008_00005=9)))
c Both direct and order encoding.
c Var 'aux701' order represents '0' with '3081'
c Var 'aux701' direct represents '0' with '3081'
c Var 'aux701' order represents '1' with '3082'
-3081 3082 0
c Var 'aux701' direct represents '1' with '3083'
3081 -3082 3083 0
-3083 3082 0
-3083 -3081 0
c Var 'aux701' direct represents '2' with '-3082'
3081 3083 -3082 0
c Encoding variable: aux702 with domain: int(0..2) (representing constraint ((x_00002_00005=9) + (x_00006_00005=9)))
c Both direct and order encoding.
c Var 'aux702' order represents '0' with '3084'
c Var 'aux702' direct represents '0' with '3084'
c Var 'aux702' order represents '1' with '3085'
-3084 3085 0
c Var 'aux702' direct represents '1' with '3086'
3084 -3085 3086 0
-3086 3085 0
-3086 -3084 0
c Var 'aux702' direct represents '2' with '-3085'
3084 3086 -3085 0
c Encoding variable: aux703 with domain: int(0..2) (representing constraint ((x_00009_00005=9) + (x_00004_00005=9)))
c Both direct and order encoding.
c Var 'aux703' order represents '0' with '3087'
c Var 'aux703' direct represents '0' with '3087'
c Var 'aux703' order represents '1' with '3088'
-3087 3088 0
c Var 'aux703' direct represents '1' with '3089'
3087 -3088 3089 0
-3089 3088 0
-3089 -3087 0
c Var 'aux703' direct represents '2' with '-3088'
3087 3089 -3088 0
c Encoding variable: aux704 with domain: int(0..3) (representing constraint ((x_00001_00005=9) + aux703))
c Both direct and order encoding.
c Var 'aux704' order represents '0' with '3090'
c Var 'aux704' direct represents '0' with '3090'
c Var 'aux704' order represents '1' with '3091'
-3090 3091 0
c Var 'aux704' direct represents '1' with '3092'
3090 -3091 3092 0
-3092 3091 0
-3092 -3090 0
c Var 'aux704' order represents '2' with '3093'
-3091 3093 0
c Var 'aux704' direct represents '2' with '3094'
3091 -3093 3094 0
-3094 3093 0
-3094 -3091 0
c Var 'aux704' direct represents '3' with '-3093'
3090 3092 3094 -3093 0
c Encoding variable: aux705 with domain: int(0..4) (representing constraint (aux700 + aux702))
c Both direct and order encoding.
c Var 'aux705' order represents '0' with '3095'
c Var 'aux705' direct represents '0' with '3095'
c Var 'aux705' order represents '1' with '3096'
-3095 3096 0
c Var 'aux705' direct represents '1' with '3097'
3095 -3096 3097 0
-3097 3096 0
-3097 -3095 0
c Var 'aux705' order represents '2' with '3098'
-3096 3098 0
c Var 'aux705' direct represents '2' with '3099'
3096 -3098 3099 0
-3099 3098 0
-3099 -3096 0
c Var 'aux705' order represents '3' with '3100'
-3098 3100 0
c Var 'aux705' direct represents '3' with '3101'
3098 -3100 3101 0
-3101 3100 0
-3101 -3098 0
c Var 'aux705' direct represents '4' with '-3100'
3095 3097 3099 3101 -3100 0
c Encoding variable: aux706 with domain: int(0..2) (representing constraint ((x_00003_00006=1) + (x_00005_00006=1)))
c Both direct and order encoding.
c Var 'aux706' order represents '0' with '3102'
c Var 'aux706' direct represents '0' with '3102'
c Var 'aux706' order represents '1' with '3103'
-3102 3103 0
c Var 'aux706' direct represents '1' with '3104'
3102 -3103 3104 0
-3104 3103 0
-3104 -3102 0
c Var 'aux706' direct represents '2' with '-3103'
3102 3104 -3103 0
c Encoding variable: aux707 with domain: int(0..2) (representing constraint ((x_00007_00006=1) + (x_00008_00006=1)))
c Both direct and order encoding.
c Var 'aux707' order represents '0' with '3105'
c Var 'aux707' direct represents '0' with '3105'
c Var 'aux707' order represents '1' with '3106'
-3105 3106 0
c Var 'aux707' direct represents '1' with '3107'
3105 -3106 3107 0
-3107 3106 0
-3107 -3105 0
c Var 'aux707' direct represents '2' with '-3106'
3105 3107 -3106 0
c Encoding variable: aux708 with domain: int(0..2) (representing constraint ((x_00002_00006=1) + (x_00006_00006=1)))
c Both direct and order encoding.
c Var 'aux708' order represents '0' with '3108'
c Var 'aux708' direct represents '0' with '3108'
c Var 'aux708' order represents '1' with '3109'
-3108 3109 0
c Var 'aux708' direct represents '1' with '3110'
3108 -3109 3110 0
-3110 3109 0
-3110 -3108 0
c Var 'aux708' direct represents '2' with '-3109'
3108 3110 -3109 0
c Encoding variable: aux709 with domain: int(0..2) (representing constraint ((x_00009_00006=1) + (x_00004_00006=1)))
c Both direct and order encoding.
c Var 'aux709' order represents '0' with '3111'
c Var 'aux709' direct represents '0' with '3111'
c Var 'aux709' order represents '1' with '3112'
-3111 3112 0
c Var 'aux709' direct represents '1' with '3113'
3111 -3112 3113 0
-3113 3112 0
-3113 -3111 0
c Var 'aux709' direct represents '2' with '-3112'
3111 3113 -3112 0
c Encoding variable: aux710 with domain: int(0..3) (representing constraint ((x_00001_00006=1) + aux709))
c Both direct and order encoding.
c Var 'aux710' order represents '0' with '3114'
c Var 'aux710' direct represents '0' with '3114'
c Var 'aux710' order represents '1' with '3115'
-3114 3115 0
c Var 'aux710' direct represents '1' with '3116'
3114 -3115 3116 0
-3116 3115 0
-3116 -3114 0
c Var 'aux710' order represents '2' with '3117'
-3115 3117 0
c Var 'aux710' direct represents '2' with '3118'
3115 -3117 3118 0
-3118 3117 0
-3118 -3115 0
c Var 'aux710' direct represents '3' with '-3117'
3114 3116 3118 -3117 0
c Encoding variable: aux711 with domain: int(0..4) (representing constraint (aux706 + aux708))
c Both direct and order encoding.
c Var 'aux711' order represents '0' with '3119'
c Var 'aux711' direct represents '0' with '3119'
c Var 'aux711' order represents '1' with '3120'
-3119 3120 0
c Var 'aux711' direct represents '1' with '3121'
3119 -3120 3121 0
-3121 3120 0
-3121 -3119 0
c Var 'aux711' order represents '2' with '3122'
-3120 3122 0
c Var 'aux711' direct represents '2' with '3123'
3120 -3122 3123 0
-3123 3122 0
-3123 -3120 0
c Var 'aux711' order represents '3' with '3124'
-3122 3124 0
c Var 'aux711' direct represents '3' with '3125'
3122 -3124 3125 0
-3125 3124 0
-3125 -3122 0
c Var 'aux711' direct represents '4' with '-3124'
3119 3121 3123 3125 -3124 0
c Encoding variable: aux712 with domain: int(0..2) (representing constraint ((x_00003_00006=2) + (x_00005_00006=2)))
c Both direct and order encoding.
c Var 'aux712' order represents '0' with '3126'
c Var 'aux712' direct represents '0' with '3126'
c Var 'aux712' order represents '1' with '3127'
-3126 3127 0
c Var 'aux712' direct represents '1' with '3128'
3126 -3127 3128 0
-3128 3127 0
-3128 -3126 0
c Var 'aux712' direct represents '2' with '-3127'
3126 3128 -3127 0
c Encoding variable: aux713 with domain: int(0..2) (representing constraint ((x_00007_00006=2) + (x_00008_00006=2)))
c Both direct and order encoding.
c Var 'aux713' order represents '0' with '3129'
c Var 'aux713' direct represents '0' with '3129'
c Var 'aux713' order represents '1' with '3130'
-3129 3130 0
c Var 'aux713' direct represents '1' with '3131'
3129 -3130 3131 0
-3131 3130 0
-3131 -3129 0
c Var 'aux713' direct represents '2' with '-3130'
3129 3131 -3130 0
c Encoding variable: aux714 with domain: int(0..2) (representing constraint ((x_00002_00006=2) + (x_00006_00006=2)))
c Both direct and order encoding.
c Var 'aux714' order represents '0' with '3132'
c Var 'aux714' direct represents '0' with '3132'
c Var 'aux714' order represents '1' with '3133'
-3132 3133 0
c Var 'aux714' direct represents '1' with '3134'
3132 -3133 3134 0
-3134 3133 0
-3134 -3132 0
c Var 'aux714' direct represents '2' with '-3133'
3132 3134 -3133 0
c Encoding variable: aux715 with domain: int(0..2) (representing constraint ((x_00009_00006=2) + (x_00004_00006=2)))
c Both direct and order encoding.
c Var 'aux715' order represents '0' with '3135'
c Var 'aux715' direct represents '0' with '3135'
c Var 'aux715' order represents '1' with '3136'
-3135 3136 0
c Var 'aux715' direct represents '1' with '3137'
3135 -3136 3137 0
-3137 3136 0
-3137 -3135 0
c Var 'aux715' direct represents '2' with '-3136'
3135 3137 -3136 0
c Encoding variable: aux716 with domain: int(0..3) (representing constraint ((x_00001_00006=2) + aux715))
c Both direct and order encoding.
c Var 'aux716' order represents '0' with '3138'
c Var 'aux716' direct represents '0' with '3138'
c Var 'aux716' order represents '1' with '3139'
-3138 3139 0
c Var 'aux716' direct represents '1' with '3140'
3138 -3139 3140 0
-3140 3139 0
-3140 -3138 0
c Var 'aux716' order represents '2' with '3141'
-3139 3141 0
c Var 'aux716' direct represents '2' with '3142'
3139 -3141 3142 0
-3142 3141 0
-3142 -3139 0
c Var 'aux716' direct represents '3' with '-3141'
3138 3140 3142 -3141 0
c Encoding variable: aux717 with domain: int(0..4) (representing constraint (aux712 + aux714))
c Both direct and order encoding.
c Var 'aux717' order represents '0' with '3143'
c Var 'aux717' direct represents '0' with '3143'
c Var 'aux717' order represents '1' with '3144'
-3143 3144 0
c Var 'aux717' direct represents '1' with '3145'
3143 -3144 3145 0
-3145 3144 0
-3145 -3143 0
c Var 'aux717' order represents '2' with '3146'
-3144 3146 0
c Var 'aux717' direct represents '2' with '3147'
3144 -3146 3147 0
-3147 3146 0
-3147 -3144 0
c Var 'aux717' order represents '3' with '3148'
-3146 3148 0
c Var 'aux717' direct represents '3' with '3149'
3146 -3148 3149 0
-3149 3148 0
-3149 -3146 0
c Var 'aux717' direct represents '4' with '-3148'
3143 3145 3147 3149 -3148 0
c Encoding variable: aux718 with domain: int(0..2) (representing constraint ((x_00003_00006=3) + (x_00005_00006=3)))
c Both direct and order encoding.
c Var 'aux718' order represents '0' with '3150'
c Var 'aux718' direct represents '0' with '3150'
c Var 'aux718' order represents '1' with '3151'
-3150 3151 0
c Var 'aux718' direct represents '1' with '3152'
3150 -3151 3152 0
-3152 3151 0
-3152 -3150 0
c Var 'aux718' direct represents '2' with '-3151'
3150 3152 -3151 0
c Encoding variable: aux719 with domain: int(0..2) (representing constraint ((x_00007_00006=3) + (x_00008_00006=3)))
c Both direct and order encoding.
c Var 'aux719' order represents '0' with '3153'
c Var 'aux719' direct represents '0' with '3153'
c Var 'aux719' order represents '1' with '3154'
-3153 3154 0
c Var 'aux719' direct represents '1' with '3155'
3153 -3154 3155 0
-3155 3154 0
-3155 -3153 0
c Var 'aux719' direct represents '2' with '-3154'
3153 3155 -3154 0
c Encoding variable: aux720 with domain: int(0..2) (representing constraint ((x_00002_00006=3) + (x_00006_00006=3)))
c Both direct and order encoding.
c Var 'aux720' order represents '0' with '3156'
c Var 'aux720' direct represents '0' with '3156'
c Var 'aux720' order represents '1' with '3157'
-3156 3157 0
c Var 'aux720' direct represents '1' with '3158'
3156 -3157 3158 0
-3158 3157 0
-3158 -3156 0
c Var 'aux720' direct represents '2' with '-3157'
3156 3158 -3157 0
c Encoding variable: aux721 with domain: int(0..2) (representing constraint ((x_00009_00006=3) + (x_00004_00006=3)))
c Both direct and order encoding.
c Var 'aux721' order represents '0' with '3159'
c Var 'aux721' direct represents '0' with '3159'
c Var 'aux721' order represents '1' with '3160'
-3159 3160 0
c Var 'aux721' direct represents '1' with '3161'
3159 -3160 3161 0
-3161 3160 0
-3161 -3159 0
c Var 'aux721' direct represents '2' with '-3160'
3159 3161 -3160 0
c Encoding variable: aux722 with domain: int(0..3) (representing constraint ((x_00001_00006=3) + aux721))
c Both direct and order encoding.
c Var 'aux722' order represents '0' with '3162'
c Var 'aux722' direct represents '0' with '3162'
c Var 'aux722' order represents '1' with '3163'
-3162 3163 0
c Var 'aux722' direct represents '1' with '3164'
3162 -3163 3164 0
-3164 3163 0
-3164 -3162 0
c Var 'aux722' order represents '2' with '3165'
-3163 3165 0
c Var 'aux722' direct represents '2' with '3166'
3163 -3165 3166 0
-3166 3165 0
-3166 -3163 0
c Var 'aux722' direct represents '3' with '-3165'
3162 3164 3166 -3165 0
c Encoding variable: aux723 with domain: int(0..4) (representing constraint (aux718 + aux720))
c Both direct and order encoding.
c Var 'aux723' order represents '0' with '3167'
c Var 'aux723' direct represents '0' with '3167'
c Var 'aux723' order represents '1' with '3168'
-3167 3168 0
c Var 'aux723' direct represents '1' with '3169'
3167 -3168 3169 0
-3169 3168 0
-3169 -3167 0
c Var 'aux723' order represents '2' with '3170'
-3168 3170 0
c Var 'aux723' direct represents '2' with '3171'
3168 -3170 3171 0
-3171 3170 0
-3171 -3168 0
c Var 'aux723' order represents '3' with '3172'
-3170 3172 0
c Var 'aux723' direct represents '3' with '3173'
3170 -3172 3173 0
-3173 3172 0
-3173 -3170 0
c Var 'aux723' direct represents '4' with '-3172'
3167 3169 3171 3173 -3172 0
c Encoding variable: aux724 with domain: int(0..2) (representing constraint ((x_00003_00006=4) + (x_00005_00006=4)))
c Both direct and order encoding.
c Var 'aux724' order represents '0' with '3174'
c Var 'aux724' direct represents '0' with '3174'
c Var 'aux724' order represents '1' with '3175'
-3174 3175 0
c Var 'aux724' direct represents '1' with '3176'
3174 -3175 3176 0
-3176 3175 0
-3176 -3174 0
c Var 'aux724' direct represents '2' with '-3175'
3174 3176 -3175 0
c Encoding variable: aux725 with domain: int(0..2) (representing constraint ((x_00007_00006=4) + (x_00008_00006=4)))
c Both direct and order encoding.
c Var 'aux725' order represents '0' with '3177'
c Var 'aux725' direct represents '0' with '3177'
c Var 'aux725' order represents '1' with '3178'
-3177 3178 0
c Var 'aux725' direct represents '1' with '3179'
3177 -3178 3179 0
-3179 3178 0
-3179 -3177 0
c Var 'aux725' direct represents '2' with '-3178'
3177 3179 -3178 0
c Encoding variable: aux726 with domain: int(0..2) (representing constraint ((x_00002_00006=4) + (x_00006_00006=4)))
c Both direct and order encoding.
c Var 'aux726' order represents '0' with '3180'
c Var 'aux726' direct represents '0' with '3180'
c Var 'aux726' order represents '1' with '3181'
-3180 3181 0
c Var 'aux726' direct represents '1' with '3182'
3180 -3181 3182 0
-3182 3181 0
-3182 -3180 0
c Var 'aux726' direct represents '2' with '-3181'
3180 3182 -3181 0
c Encoding variable: aux727 with domain: int(0..2) (representing constraint ((x_00009_00006=4) + (x_00004_00006=4)))
c Both direct and order encoding.
c Var 'aux727' order represents '0' with '3183'
c Var 'aux727' direct represents '0' with '3183'
c Var 'aux727' order represents '1' with '3184'
-3183 3184 0
c Var 'aux727' direct represents '1' with '3185'
3183 -3184 3185 0
-3185 3184 0
-3185 -3183 0
c Var 'aux727' direct represents '2' with '-3184'
3183 3185 -3184 0
c Encoding variable: aux728 with domain: int(0..3) (representing constraint ((x_00001_00006=4) + aux727))
c Both direct and order encoding.
c Var 'aux728' order represents '0' with '3186'
c Var 'aux728' direct represents '0' with '3186'
c Var 'aux728' order represents '1' with '3187'
-3186 3187 0
c Var 'aux728' direct represents '1' with '3188'
3186 -3187 3188 0
-3188 3187 0
-3188 -3186 0
c Var 'aux728' order represents '2' with '3189'
-3187 3189 0
c Var 'aux728' direct represents '2' with '3190'
3187 -3189 3190 0
-3190 3189 0
-3190 -3187 0
c Var 'aux728' direct represents '3' with '-3189'
3186 3188 3190 -3189 0
c Encoding variable: aux729 with domain: int(0..4) (representing constraint (aux724 + aux726))
c Both direct and order encoding.
c Var 'aux729' order represents '0' with '3191'
c Var 'aux729' direct represents '0' with '3191'
c Var 'aux729' order represents '1' with '3192'
-3191 3192 0
c Var 'aux729' direct represents '1' with '3193'
3191 -3192 3193 0
-3193 3192 0
-3193 -3191 0
c Var 'aux729' order represents '2' with '3194'
-3192 3194 0
c Var 'aux729' direct represents '2' with '3195'
3192 -3194 3195 0
-3195 3194 0
-3195 -3192 0
c Var 'aux729' order represents '3' with '3196'
-3194 3196 0
c Var 'aux729' direct represents '3' with '3197'
3194 -3196 3197 0
-3197 3196 0
-3197 -3194 0
c Var 'aux729' direct represents '4' with '-3196'
3191 3193 3195 3197 -3196 0
c Encoding variable: aux730 with domain: int(0..2) (representing constraint ((x_00003_00006=5) + (x_00005_00006=5)))
c Both direct and order encoding.
c Var 'aux730' order represents '0' with '3198'
c Var 'aux730' direct represents '0' with '3198'
c Var 'aux730' order represents '1' with '3199'
-3198 3199 0
c Var 'aux730' direct represents '1' with '3200'
3198 -3199 3200 0
-3200 3199 0
-3200 -3198 0
c Var 'aux730' direct represents '2' with '-3199'
3198 3200 -3199 0
c Encoding variable: aux731 with domain: int(0..2) (representing constraint ((x_00007_00006=5) + (x_00008_00006=5)))
c Both direct and order encoding.
c Var 'aux731' order represents '0' with '3201'
c Var 'aux731' direct represents '0' with '3201'
c Var 'aux731' order represents '1' with '3202'
-3201 3202 0
c Var 'aux731' direct represents '1' with '3203'
3201 -3202 3203 0
-3203 3202 0
-3203 -3201 0
c Var 'aux731' direct represents '2' with '-3202'
3201 3203 -3202 0
c Encoding variable: aux732 with domain: int(0..2) (representing constraint ((x_00002_00006=5) + (x_00006_00006=5)))
c Both direct and order encoding.
c Var 'aux732' order represents '0' with '3204'
c Var 'aux732' direct represents '0' with '3204'
c Var 'aux732' order represents '1' with '3205'
-3204 3205 0
c Var 'aux732' direct represents '1' with '3206'
3204 -3205 3206 0
-3206 3205 0
-3206 -3204 0
c Var 'aux732' direct represents '2' with '-3205'
3204 3206 -3205 0
c Encoding variable: aux733 with domain: int(0..2) (representing constraint ((x_00009_00006=5) + (x_00004_00006=5)))
c Both direct and order encoding.
c Var 'aux733' order represents '0' with '3207'
c Var 'aux733' direct represents '0' with '3207'
c Var 'aux733' order represents '1' with '3208'
-3207 3208 0
c Var 'aux733' direct represents '1' with '3209'
3207 -3208 3209 0
-3209 3208 0
-3209 -3207 0
c Var 'aux733' direct represents '2' with '-3208'
3207 3209 -3208 0
c Encoding variable: aux734 with domain: int(0..3) (representing constraint ((x_00001_00006=5) + aux733))
c Both direct and order encoding.
c Var 'aux734' order represents '0' with '3210'
c Var 'aux734' direct represents '0' with '3210'
c Var 'aux734' order represents '1' with '3211'
-3210 3211 0
c Var 'aux734' direct represents '1' with '3212'
3210 -3211 3212 0
-3212 3211 0
-3212 -3210 0
c Var 'aux734' order represents '2' with '3213'
-3211 3213 0
c Var 'aux734' direct represents '2' with '3214'
3211 -3213 3214 0
-3214 3213 0
-3214 -3211 0
c Var 'aux734' direct represents '3' with '-3213'
3210 3212 3214 -3213 0
c Encoding variable: aux735 with domain: int(0..4) (representing constraint (aux730 + aux732))
c Both direct and order encoding.
c Var 'aux735' order represents '0' with '3215'
c Var 'aux735' direct represents '0' with '3215'
c Var 'aux735' order represents '1' with '3216'
-3215 3216 0
c Var 'aux735' direct represents '1' with '3217'
3215 -3216 3217 0
-3217 3216 0
-3217 -3215 0
c Var 'aux735' order represents '2' with '3218'
-3216 3218 0
c Var 'aux735' direct represents '2' with '3219'
3216 -3218 3219 0
-3219 3218 0
-3219 -3216 0
c Var 'aux735' order represents '3' with '3220'
-3218 3220 0
c Var 'aux735' direct represents '3' with '3221'
3218 -3220 3221 0
-3221 3220 0
-3221 -3218 0
c Var 'aux735' direct represents '4' with '-3220'
3215 3217 3219 3221 -3220 0
c Encoding variable: aux736 with domain: int(0..2) (representing constraint ((x_00003_00006=6) + (x_00005_00006=6)))
c Both direct and order encoding.
c Var 'aux736' order represents '0' with '3222'
c Var 'aux736' direct represents '0' with '3222'
c Var 'aux736' order represents '1' with '3223'
-3222 3223 0
c Var 'aux736' direct represents '1' with '3224'
3222 -3223 3224 0
-3224 3223 0
-3224 -3222 0
c Var 'aux736' direct represents '2' with '-3223'
3222 3224 -3223 0
c Encoding variable: aux737 with domain: int(0..2) (representing constraint ((x_00007_00006=6) + (x_00008_00006=6)))
c Both direct and order encoding.
c Var 'aux737' order represents '0' with '3225'
c Var 'aux737' direct represents '0' with '3225'
c Var 'aux737' order represents '1' with '3226'
-3225 3226 0
c Var 'aux737' direct represents '1' with '3227'
3225 -3226 3227 0
-3227 3226 0
-3227 -3225 0
c Var 'aux737' direct represents '2' with '-3226'
3225 3227 -3226 0
c Encoding variable: aux738 with domain: int(0..2) (representing constraint ((x_00002_00006=6) + (x_00006_00006=6)))
c Both direct and order encoding.
c Var 'aux738' order represents '0' with '3228'
c Var 'aux738' direct represents '0' with '3228'
c Var 'aux738' order represents '1' with '3229'
-3228 3229 0
c Var 'aux738' direct represents '1' with '3230'
3228 -3229 3230 0
-3230 3229 0
-3230 -3228 0
c Var 'aux738' direct represents '2' with '-3229'
3228 3230 -3229 0
c Encoding variable: aux739 with domain: int(0..2) (representing constraint ((x_00009_00006=6) + (x_00004_00006=6)))
c Both direct and order encoding.
c Var 'aux739' order represents '0' with '3231'
c Var 'aux739' direct represents '0' with '3231'
c Var 'aux739' order represents '1' with '3232'
-3231 3232 0
c Var 'aux739' direct represents '1' with '3233'
3231 -3232 3233 0
-3233 3232 0
-3233 -3231 0
c Var 'aux739' direct represents '2' with '-3232'
3231 3233 -3232 0
c Encoding variable: aux740 with domain: int(0..3) (representing constraint ((x_00001_00006=6) + aux739))
c Both direct and order encoding.
c Var 'aux740' order represents '0' with '3234'
c Var 'aux740' direct represents '0' with '3234'
c Var 'aux740' order represents '1' with '3235'
-3234 3235 0
c Var 'aux740' direct represents '1' with '3236'
3234 -3235 3236 0
-3236 3235 0
-3236 -3234 0
c Var 'aux740' order represents '2' with '3237'
-3235 3237 0
c Var 'aux740' direct represents '2' with '3238'
3235 -3237 3238 0
-3238 3237 0
-3238 -3235 0
c Var 'aux740' direct represents '3' with '-3237'
3234 3236 3238 -3237 0
c Encoding variable: aux741 with domain: int(0..4) (representing constraint (aux736 + aux738))
c Both direct and order encoding.
c Var 'aux741' order represents '0' with '3239'
c Var 'aux741' direct represents '0' with '3239'
c Var 'aux741' order represents '1' with '3240'
-3239 3240 0
c Var 'aux741' direct represents '1' with '3241'
3239 -3240 3241 0
-3241 3240 0
-3241 -3239 0
c Var 'aux741' order represents '2' with '3242'
-3240 3242 0
c Var 'aux741' direct represents '2' with '3243'
3240 -3242 3243 0
-3243 3242 0
-3243 -3240 0
c Var 'aux741' order represents '3' with '3244'
-3242 3244 0
c Var 'aux741' direct represents '3' with '3245'
3242 -3244 3245 0
-3245 3244 0
-3245 -3242 0
c Var 'aux741' direct represents '4' with '-3244'
3239 3241 3243 3245 -3244 0
c Encoding variable: aux742 with domain: int(0..2) (representing constraint ((x_00003_00006=7) + (x_00005_00006=7)))
c Both direct and order encoding.
c Var 'aux742' order represents '0' with '3246'
c Var 'aux742' direct represents '0' with '3246'
c Var 'aux742' order represents '1' with '3247'
-3246 3247 0
c Var 'aux742' direct represents '1' with '3248'
3246 -3247 3248 0
-3248 3247 0
-3248 -3246 0
c Var 'aux742' direct represents '2' with '-3247'
3246 3248 -3247 0
c Encoding variable: aux743 with domain: int(0..2) (representing constraint ((x_00007_00006=7) + (x_00008_00006=7)))
c Both direct and order encoding.
c Var 'aux743' order represents '0' with '3249'
c Var 'aux743' direct represents '0' with '3249'
c Var 'aux743' order represents '1' with '3250'
-3249 3250 0
c Var 'aux743' direct represents '1' with '3251'
3249 -3250 3251 0
-3251 3250 0
-3251 -3249 0
c Var 'aux743' direct represents '2' with '-3250'
3249 3251 -3250 0
c Encoding variable: aux744 with domain: int(0..2) (representing constraint ((x_00002_00006=7) + (x_00006_00006=7)))
c Both direct and order encoding.
c Var 'aux744' order represents '0' with '3252'
c Var 'aux744' direct represents '0' with '3252'
c Var 'aux744' order represents '1' with '3253'
-3252 3253 0
c Var 'aux744' direct represents '1' with '3254'
3252 -3253 3254 0
-3254 3253 0
-3254 -3252 0
c Var 'aux744' direct represents '2' with '-3253'
3252 3254 -3253 0
c Encoding variable: aux745 with domain: int(0..2) (representing constraint ((x_00009_00006=7) + (x_00004_00006=7)))
c Both direct and order encoding.
c Var 'aux745' order represents '0' with '3255'
c Var 'aux745' direct represents '0' with '3255'
c Var 'aux745' order represents '1' with '3256'
-3255 3256 0
c Var 'aux745' direct represents '1' with '3257'
3255 -3256 3257 0
-3257 3256 0
-3257 -3255 0
c Var 'aux745' direct represents '2' with '-3256'
3255 3257 -3256 0
c Encoding variable: aux746 with domain: int(0..3) (representing constraint ((x_00001_00006=7) + aux745))
c Both direct and order encoding.
c Var 'aux746' order represents '0' with '3258'
c Var 'aux746' direct represents '0' with '3258'
c Var 'aux746' order represents '1' with '3259'
-3258 3259 0
c Var 'aux746' direct represents '1' with '3260'
3258 -3259 3260 0
-3260 3259 0
-3260 -3258 0
c Var 'aux746' order represents '2' with '3261'
-3259 3261 0
c Var 'aux746' direct represents '2' with '3262'
3259 -3261 3262 0
-3262 3261 0
-3262 -3259 0
c Var 'aux746' direct represents '3' with '-3261'
3258 3260 3262 -3261 0
c Encoding variable: aux747 with domain: int(0..4) (representing constraint (aux742 + aux744))
c Both direct and order encoding.
c Var 'aux747' order represents '0' with '3263'
c Var 'aux747' direct represents '0' with '3263'
c Var 'aux747' order represents '1' with '3264'
-3263 3264 0
c Var 'aux747' direct represents '1' with '3265'
3263 -3264 3265 0
-3265 3264 0
-3265 -3263 0
c Var 'aux747' order represents '2' with '3266'
-3264 3266 0
c Var 'aux747' direct represents '2' with '3267'
3264 -3266 3267 0
-3267 3266 0
-3267 -3264 0
c Var 'aux747' order represents '3' with '3268'
-3266 3268 0
c Var 'aux747' direct represents '3' with '3269'
3266 -3268 3269 0
-3269 3268 0
-3269 -3266 0
c Var 'aux747' direct represents '4' with '-3268'
3263 3265 3267 3269 -3268 0
c Encoding variable: aux748 with domain: int(0..2) (representing constraint ((x_00003_00006=8) + (x_00005_00006=8)))
c Both direct and order encoding.
c Var 'aux748' order represents '0' with '3270'
c Var 'aux748' direct represents '0' with '3270'
c Var 'aux748' order represents '1' with '3271'
-3270 3271 0
c Var 'aux748' direct represents '1' with '3272'
3270 -3271 3272 0
-3272 3271 0
-3272 -3270 0
c Var 'aux748' direct represents '2' with '-3271'
3270 3272 -3271 0
c Encoding variable: aux749 with domain: int(0..2) (representing constraint ((x_00007_00006=8) + (x_00008_00006=8)))
c Both direct and order encoding.
c Var 'aux749' order represents '0' with '3273'
c Var 'aux749' direct represents '0' with '3273'
c Var 'aux749' order represents '1' with '3274'
-3273 3274 0
c Var 'aux749' direct represents '1' with '3275'
3273 -3274 3275 0
-3275 3274 0
-3275 -3273 0
c Var 'aux749' direct represents '2' with '-3274'
3273 3275 -3274 0
c Encoding variable: aux750 with domain: int(0..2) (representing constraint ((x_00002_00006=8) + (x_00006_00006=8)))
c Both direct and order encoding.
c Var 'aux750' order represents '0' with '3276'
c Var 'aux750' direct represents '0' with '3276'
c Var 'aux750' order represents '1' with '3277'
-3276 3277 0
c Var 'aux750' direct represents '1' with '3278'
3276 -3277 3278 0
-3278 3277 0
-3278 -3276 0
c Var 'aux750' direct represents '2' with '-3277'
3276 3278 -3277 0
c Encoding variable: aux751 with domain: int(0..2) (representing constraint ((x_00009_00006=8) + (x_00004_00006=8)))
c Both direct and order encoding.
c Var 'aux751' order represents '0' with '3279'
c Var 'aux751' direct represents '0' with '3279'
c Var 'aux751' order represents '1' with '3280'
-3279 3280 0
c Var 'aux751' direct represents '1' with '3281'
3279 -3280 3281 0
-3281 3280 0
-3281 -3279 0
c Var 'aux751' direct represents '2' with '-3280'
3279 3281 -3280 0
c Encoding variable: aux752 with domain: int(0..3) (representing constraint ((x_00001_00006=8) + aux751))
c Both direct and order encoding.
c Var 'aux752' order represents '0' with '3282'
c Var 'aux752' direct represents '0' with '3282'
c Var 'aux752' order represents '1' with '3283'
-3282 3283 0
c Var 'aux752' direct represents '1' with '3284'
3282 -3283 3284 0
-3284 3283 0
-3284 -3282 0
c Var 'aux752' order represents '2' with '3285'
-3283 3285 0
c Var 'aux752' direct represents '2' with '3286'
3283 -3285 3286 0
-3286 3285 0
-3286 -3283 0
c Var 'aux752' direct represents '3' with '-3285'
3282 3284 3286 -3285 0
c Encoding variable: aux753 with domain: int(0..4) (representing constraint (aux748 + aux750))
c Both direct and order encoding.
c Var 'aux753' order represents '0' with '3287'
c Var 'aux753' direct represents '0' with '3287'
c Var 'aux753' order represents '1' with '3288'
-3287 3288 0
c Var 'aux753' direct represents '1' with '3289'
3287 -3288 3289 0
-3289 3288 0
-3289 -3287 0
c Var 'aux753' order represents '2' with '3290'
-3288 3290 0
c Var 'aux753' direct represents '2' with '3291'
3288 -3290 3291 0
-3291 3290 0
-3291 -3288 0
c Var 'aux753' order represents '3' with '3292'
-3290 3292 0
c Var 'aux753' direct represents '3' with '3293'
3290 -3292 3293 0
-3293 3292 0
-3293 -3290 0
c Var 'aux753' direct represents '4' with '-3292'
3287 3289 3291 3293 -3292 0
c Encoding variable: aux754 with domain: int(0..2) (representing constraint ((x_00003_00006=9) + (x_00005_00006=9)))
c Both direct and order encoding.
c Var 'aux754' order represents '0' with '3294'
c Var 'aux754' direct represents '0' with '3294'
c Var 'aux754' order represents '1' with '3295'
-3294 3295 0
c Var 'aux754' direct represents '1' with '3296'
3294 -3295 3296 0
-3296 3295 0
-3296 -3294 0
c Var 'aux754' direct represents '2' with '-3295'
3294 3296 -3295 0
c Encoding variable: aux755 with domain: int(0..2) (representing constraint ((x_00007_00006=9) + (x_00008_00006=9)))
c Both direct and order encoding.
c Var 'aux755' order represents '0' with '3297'
c Var 'aux755' direct represents '0' with '3297'
c Var 'aux755' order represents '1' with '3298'
-3297 3298 0
c Var 'aux755' direct represents '1' with '3299'
3297 -3298 3299 0
-3299 3298 0
-3299 -3297 0
c Var 'aux755' direct represents '2' with '-3298'
3297 3299 -3298 0
c Encoding variable: aux756 with domain: int(0..2) (representing constraint ((x_00002_00006=9) + (x_00006_00006=9)))
c Both direct and order encoding.
c Var 'aux756' order represents '0' with '3300'
c Var 'aux756' direct represents '0' with '3300'
c Var 'aux756' order represents '1' with '3301'
-3300 3301 0
c Var 'aux756' direct represents '1' with '3302'
3300 -3301 3302 0
-3302 3301 0
-3302 -3300 0
c Var 'aux756' direct represents '2' with '-3301'
3300 3302 -3301 0
c Encoding variable: aux757 with domain: int(0..2) (representing constraint ((x_00009_00006=9) + (x_00004_00006=9)))
c Both direct and order encoding.
c Var 'aux757' order represents '0' with '3303'
c Var 'aux757' direct represents '0' with '3303'
c Var 'aux757' order represents '1' with '3304'
-3303 3304 0
c Var 'aux757' direct represents '1' with '3305'
3303 -3304 3305 0
-3305 3304 0
-3305 -3303 0
c Var 'aux757' direct represents '2' with '-3304'
3303 3305 -3304 0
c Encoding variable: aux758 with domain: int(0..3) (representing constraint ((x_00001_00006=9) + aux757))
c Both direct and order encoding.
c Var 'aux758' order represents '0' with '3306'
c Var 'aux758' direct represents '0' with '3306'
c Var 'aux758' order represents '1' with '3307'
-3306 3307 0
c Var 'aux758' direct represents '1' with '3308'
3306 -3307 3308 0
-3308 3307 0
-3308 -3306 0
c Var 'aux758' order represents '2' with '3309'
-3307 3309 0
c Var 'aux758' direct represents '2' with '3310'
3307 -3309 3310 0
-3310 3309 0
-3310 -3307 0
c Var 'aux758' direct represents '3' with '-3309'
3306 3308 3310 -3309 0
c Encoding variable: aux759 with domain: int(0..4) (representing constraint (aux754 + aux756))
c Both direct and order encoding.
c Var 'aux759' order represents '0' with '3311'
c Var 'aux759' direct represents '0' with '3311'
c Var 'aux759' order represents '1' with '3312'
-3311 3312 0
c Var 'aux759' direct represents '1' with '3313'
3311 -3312 3313 0
-3313 3312 0
-3313 -3311 0
c Var 'aux759' order represents '2' with '3314'
-3312 3314 0
c Var 'aux759' direct represents '2' with '3315'
3312 -3314 3315 0
-3315 3314 0
-3315 -3312 0
c Var 'aux759' order represents '3' with '3316'
-3314 3316 0
c Var 'aux759' direct represents '3' with '3317'
3314 -3316 3317 0
-3317 3316 0
-3317 -3314 0
c Var 'aux759' direct represents '4' with '-3316'
3311 3313 3315 3317 -3316 0
c Encoding variable: aux760 with domain: int(0..2) (representing constraint ((x_00003_00007=1) + (x_00005_00007=1)))
c Both direct and order encoding.
c Var 'aux760' order represents '0' with '3318'
c Var 'aux760' direct represents '0' with '3318'
c Var 'aux760' order represents '1' with '3319'
-3318 3319 0
c Var 'aux760' direct represents '1' with '3320'
3318 -3319 3320 0
-3320 3319 0
-3320 -3318 0
c Var 'aux760' direct represents '2' with '-3319'
3318 3320 -3319 0
c Encoding variable: aux761 with domain: int(0..2) (representing constraint ((x_00007_00007=1) + (x_00008_00007=1)))
c Both direct and order encoding.
c Var 'aux761' order represents '0' with '3321'
c Var 'aux761' direct represents '0' with '3321'
c Var 'aux761' order represents '1' with '3322'
-3321 3322 0
c Var 'aux761' direct represents '1' with '3323'
3321 -3322 3323 0
-3323 3322 0
-3323 -3321 0
c Var 'aux761' direct represents '2' with '-3322'
3321 3323 -3322 0
c Encoding variable: aux762 with domain: int(0..2) (representing constraint ((x_00002_00007=1) + (x_00006_00007=1)))
c Both direct and order encoding.
c Var 'aux762' order represents '0' with '3324'
c Var 'aux762' direct represents '0' with '3324'
c Var 'aux762' order represents '1' with '3325'
-3324 3325 0
c Var 'aux762' direct represents '1' with '3326'
3324 -3325 3326 0
-3326 3325 0
-3326 -3324 0
c Var 'aux762' direct represents '2' with '-3325'
3324 3326 -3325 0
c Encoding variable: aux763 with domain: int(0..2) (representing constraint ((x_00009_00007=1) + (x_00004_00007=1)))
c Both direct and order encoding.
c Var 'aux763' order represents '0' with '3327'
c Var 'aux763' direct represents '0' with '3327'
c Var 'aux763' order represents '1' with '3328'
-3327 3328 0
c Var 'aux763' direct represents '1' with '3329'
3327 -3328 3329 0
-3329 3328 0
-3329 -3327 0
c Var 'aux763' direct represents '2' with '-3328'
3327 3329 -3328 0
c Encoding variable: aux764 with domain: int(0..3) (representing constraint ((x_00001_00007=1) + aux763))
c Both direct and order encoding.
c Var 'aux764' order represents '0' with '3330'
c Var 'aux764' direct represents '0' with '3330'
c Var 'aux764' order represents '1' with '3331'
-3330 3331 0
c Var 'aux764' direct represents '1' with '3332'
3330 -3331 3332 0
-3332 3331 0
-3332 -3330 0
c Var 'aux764' order represents '2' with '3333'
-3331 3333 0
c Var 'aux764' direct represents '2' with '3334'
3331 -3333 3334 0
-3334 3333 0
-3334 -3331 0
c Var 'aux764' direct represents '3' with '-3333'
3330 3332 3334 -3333 0
c Encoding variable: aux765 with domain: int(0..4) (representing constraint (aux760 + aux762))
c Both direct and order encoding.
c Var 'aux765' order represents '0' with '3335'
c Var 'aux765' direct represents '0' with '3335'
c Var 'aux765' order represents '1' with '3336'
-3335 3336 0
c Var 'aux765' direct represents '1' with '3337'
3335 -3336 3337 0
-3337 3336 0
-3337 -3335 0
c Var 'aux765' order represents '2' with '3338'
-3336 3338 0
c Var 'aux765' direct represents '2' with '3339'
3336 -3338 3339 0
-3339 3338 0
-3339 -3336 0
c Var 'aux765' order represents '3' with '3340'
-3338 3340 0
c Var 'aux765' direct represents '3' with '3341'
3338 -3340 3341 0
-3341 3340 0
-3341 -3338 0
c Var 'aux765' direct represents '4' with '-3340'
3335 3337 3339 3341 -3340 0
c Encoding variable: aux766 with domain: int(0..2) (representing constraint ((x_00003_00007=2) + (x_00005_00007=2)))
c Both direct and order encoding.
c Var 'aux766' order represents '0' with '3342'
c Var 'aux766' direct represents '0' with '3342'
c Var 'aux766' order represents '1' with '3343'
-3342 3343 0
c Var 'aux766' direct represents '1' with '3344'
3342 -3343 3344 0
-3344 3343 0
-3344 -3342 0
c Var 'aux766' direct represents '2' with '-3343'
3342 3344 -3343 0
c Encoding variable: aux767 with domain: int(0..2) (representing constraint ((x_00007_00007=2) + (x_00008_00007=2)))
c Both direct and order encoding.
c Var 'aux767' order represents '0' with '3345'
c Var 'aux767' direct represents '0' with '3345'
c Var 'aux767' order represents '1' with '3346'
-3345 3346 0
c Var 'aux767' direct represents '1' with '3347'
3345 -3346 3347 0
-3347 3346 0
-3347 -3345 0
c Var 'aux767' direct represents '2' with '-3346'
3345 3347 -3346 0
c Encoding variable: aux768 with domain: int(0..2) (representing constraint ((x_00002_00007=2) + (x_00006_00007=2)))
c Both direct and order encoding.
c Var 'aux768' order represents '0' with '3348'
c Var 'aux768' direct represents '0' with '3348'
c Var 'aux768' order represents '1' with '3349'
-3348 3349 0
c Var 'aux768' direct represents '1' with '3350'
3348 -3349 3350 0
-3350 3349 0
-3350 -3348 0
c Var 'aux768' direct represents '2' with '-3349'
3348 3350 -3349 0
c Encoding variable: aux769 with domain: int(0..2) (representing constraint ((x_00009_00007=2) + (x_00004_00007=2)))
c Both direct and order encoding.
c Var 'aux769' order represents '0' with '3351'
c Var 'aux769' direct represents '0' with '3351'
c Var 'aux769' order represents '1' with '3352'
-3351 3352 0
c Var 'aux769' direct represents '1' with '3353'
3351 -3352 3353 0
-3353 3352 0
-3353 -3351 0
c Var 'aux769' direct represents '2' with '-3352'
3351 3353 -3352 0
c Encoding variable: aux770 with domain: int(0..3) (representing constraint ((x_00001_00007=2) + aux769))
c Both direct and order encoding.
c Var 'aux770' order represents '0' with '3354'
c Var 'aux770' direct represents '0' with '3354'
c Var 'aux770' order represents '1' with '3355'
-3354 3355 0
c Var 'aux770' direct represents '1' with '3356'
3354 -3355 3356 0
-3356 3355 0
-3356 -3354 0
c Var 'aux770' order represents '2' with '3357'
-3355 3357 0
c Var 'aux770' direct represents '2' with '3358'
3355 -3357 3358 0
-3358 3357 0
-3358 -3355 0
c Var 'aux770' direct represents '3' with '-3357'
3354 3356 3358 -3357 0
c Encoding variable: aux771 with domain: int(0..4) (representing constraint (aux766 + aux768))
c Both direct and order encoding.
c Var 'aux771' order represents '0' with '3359'
c Var 'aux771' direct represents '0' with '3359'
c Var 'aux771' order represents '1' with '3360'
-3359 3360 0
c Var 'aux771' direct represents '1' with '3361'
3359 -3360 3361 0
-3361 3360 0
-3361 -3359 0
c Var 'aux771' order represents '2' with '3362'
-3360 3362 0
c Var 'aux771' direct represents '2' with '3363'
3360 -3362 3363 0
-3363 3362 0
-3363 -3360 0
c Var 'aux771' order represents '3' with '3364'
-3362 3364 0
c Var 'aux771' direct represents '3' with '3365'
3362 -3364 3365 0
-3365 3364 0
-3365 -3362 0
c Var 'aux771' direct represents '4' with '-3364'
3359 3361 3363 3365 -3364 0
c Encoding variable: aux772 with domain: int(0..2) (representing constraint ((x_00003_00007=3) + (x_00005_00007=3)))
c Both direct and order encoding.
c Var 'aux772' order represents '0' with '3366'
c Var 'aux772' direct represents '0' with '3366'
c Var 'aux772' order represents '1' with '3367'
-3366 3367 0
c Var 'aux772' direct represents '1' with '3368'
3366 -3367 3368 0
-3368 3367 0
-3368 -3366 0
c Var 'aux772' direct represents '2' with '-3367'
3366 3368 -3367 0
c Encoding variable: aux773 with domain: int(0..2) (representing constraint ((x_00007_00007=3) + (x_00008_00007=3)))
c Both direct and order encoding.
c Var 'aux773' order represents '0' with '3369'
c Var 'aux773' direct represents '0' with '3369'
c Var 'aux773' order represents '1' with '3370'
-3369 3370 0
c Var 'aux773' direct represents '1' with '3371'
3369 -3370 3371 0
-3371 3370 0
-3371 -3369 0
c Var 'aux773' direct represents '2' with '-3370'
3369 3371 -3370 0
c Encoding variable: aux774 with domain: int(0..2) (representing constraint ((x_00002_00007=3) + (x_00006_00007=3)))
c Both direct and order encoding.
c Var 'aux774' order represents '0' with '3372'
c Var 'aux774' direct represents '0' with '3372'
c Var 'aux774' order represents '1' with '3373'
-3372 3373 0
c Var 'aux774' direct represents '1' with '3374'
3372 -3373 3374 0
-3374 3373 0
-3374 -3372 0
c Var 'aux774' direct represents '2' with '-3373'
3372 3374 -3373 0
c Encoding variable: aux775 with domain: int(0..2) (representing constraint ((x_00009_00007=3) + (x_00004_00007=3)))
c Both direct and order encoding.
c Var 'aux775' order represents '0' with '3375'
c Var 'aux775' direct represents '0' with '3375'
c Var 'aux775' order represents '1' with '3376'
-3375 3376 0
c Var 'aux775' direct represents '1' with '3377'
3375 -3376 3377 0
-3377 3376 0
-3377 -3375 0
c Var 'aux775' direct represents '2' with '-3376'
3375 3377 -3376 0
c Encoding variable: aux776 with domain: int(0..3) (representing constraint ((x_00001_00007=3) + aux775))
c Both direct and order encoding.
c Var 'aux776' order represents '0' with '3378'
c Var 'aux776' direct represents '0' with '3378'
c Var 'aux776' order represents '1' with '3379'
-3378 3379 0
c Var 'aux776' direct represents '1' with '3380'
3378 -3379 3380 0
-3380 3379 0
-3380 -3378 0
c Var 'aux776' order represents '2' with '3381'
-3379 3381 0
c Var 'aux776' direct represents '2' with '3382'
3379 -3381 3382 0
-3382 3381 0
-3382 -3379 0
c Var 'aux776' direct represents '3' with '-3381'
3378 3380 3382 -3381 0
c Encoding variable: aux777 with domain: int(0..4) (representing constraint (aux772 + aux774))
c Both direct and order encoding.
c Var 'aux777' order represents '0' with '3383'
c Var 'aux777' direct represents '0' with '3383'
c Var 'aux777' order represents '1' with '3384'
-3383 3384 0
c Var 'aux777' direct represents '1' with '3385'
3383 -3384 3385 0
-3385 3384 0
-3385 -3383 0
c Var 'aux777' order represents '2' with '3386'
-3384 3386 0
c Var 'aux777' direct represents '2' with '3387'
3384 -3386 3387 0
-3387 3386 0
-3387 -3384 0
c Var 'aux777' order represents '3' with '3388'
-3386 3388 0
c Var 'aux777' direct represents '3' with '3389'
3386 -3388 3389 0
-3389 3388 0
-3389 -3386 0
c Var 'aux777' direct represents '4' with '-3388'
3383 3385 3387 3389 -3388 0
c Encoding variable: aux778 with domain: int(0..2) (representing constraint ((x_00003_00007=4) + (x_00005_00007=4)))
c Both direct and order encoding.
c Var 'aux778' order represents '0' with '3390'
c Var 'aux778' direct represents '0' with '3390'
c Var 'aux778' order represents '1' with '3391'
-3390 3391 0
c Var 'aux778' direct represents '1' with '3392'
3390 -3391 3392 0
-3392 3391 0
-3392 -3390 0
c Var 'aux778' direct represents '2' with '-3391'
3390 3392 -3391 0
c Encoding variable: aux779 with domain: int(0..2) (representing constraint ((x_00007_00007=4) + (x_00008_00007=4)))
c Both direct and order encoding.
c Var 'aux779' order represents '0' with '3393'
c Var 'aux779' direct represents '0' with '3393'
c Var 'aux779' order represents '1' with '3394'
-3393 3394 0
c Var 'aux779' direct represents '1' with '3395'
3393 -3394 3395 0
-3395 3394 0
-3395 -3393 0
c Var 'aux779' direct represents '2' with '-3394'
3393 3395 -3394 0
c Encoding variable: aux780 with domain: int(0..2) (representing constraint ((x_00002_00007=4) + (x_00006_00007=4)))
c Both direct and order encoding.
c Var 'aux780' order represents '0' with '3396'
c Var 'aux780' direct represents '0' with '3396'
c Var 'aux780' order represents '1' with '3397'
-3396 3397 0
c Var 'aux780' direct represents '1' with '3398'
3396 -3397 3398 0
-3398 3397 0
-3398 -3396 0
c Var 'aux780' direct represents '2' with '-3397'
3396 3398 -3397 0
c Encoding variable: aux781 with domain: int(0..2) (representing constraint ((x_00009_00007=4) + (x_00004_00007=4)))
c Both direct and order encoding.
c Var 'aux781' order represents '0' with '3399'
c Var 'aux781' direct represents '0' with '3399'
c Var 'aux781' order represents '1' with '3400'
-3399 3400 0
c Var 'aux781' direct represents '1' with '3401'
3399 -3400 3401 0
-3401 3400 0
-3401 -3399 0
c Var 'aux781' direct represents '2' with '-3400'
3399 3401 -3400 0
c Encoding variable: aux782 with domain: int(0..3) (representing constraint ((x_00001_00007=4) + aux781))
c Both direct and order encoding.
c Var 'aux782' order represents '0' with '3402'
c Var 'aux782' direct represents '0' with '3402'
c Var 'aux782' order represents '1' with '3403'
-3402 3403 0
c Var 'aux782' direct represents '1' with '3404'
3402 -3403 3404 0
-3404 3403 0
-3404 -3402 0
c Var 'aux782' order represents '2' with '3405'
-3403 3405 0
c Var 'aux782' direct represents '2' with '3406'
3403 -3405 3406 0
-3406 3405 0
-3406 -3403 0
c Var 'aux782' direct represents '3' with '-3405'
3402 3404 3406 -3405 0
c Encoding variable: aux783 with domain: int(0..4) (representing constraint (aux778 + aux780))
c Both direct and order encoding.
c Var 'aux783' order represents '0' with '3407'
c Var 'aux783' direct represents '0' with '3407'
c Var 'aux783' order represents '1' with '3408'
-3407 3408 0
c Var 'aux783' direct represents '1' with '3409'
3407 -3408 3409 0
-3409 3408 0
-3409 -3407 0
c Var 'aux783' order represents '2' with '3410'
-3408 3410 0
c Var 'aux783' direct represents '2' with '3411'
3408 -3410 3411 0
-3411 3410 0
-3411 -3408 0
c Var 'aux783' order represents '3' with '3412'
-3410 3412 0
c Var 'aux783' direct represents '3' with '3413'
3410 -3412 3413 0
-3413 3412 0
-3413 -3410 0
c Var 'aux783' direct represents '4' with '-3412'
3407 3409 3411 3413 -3412 0
c Encoding variable: aux784 with domain: int(0..2) (representing constraint ((x_00003_00007=5) + (x_00005_00007=5)))
c Both direct and order encoding.
c Var 'aux784' order represents '0' with '3414'
c Var 'aux784' direct represents '0' with '3414'
c Var 'aux784' order represents '1' with '3415'
-3414 3415 0
c Var 'aux784' direct represents '1' with '3416'
3414 -3415 3416 0
-3416 3415 0
-3416 -3414 0
c Var 'aux784' direct represents '2' with '-3415'
3414 3416 -3415 0
c Encoding variable: aux785 with domain: int(0..2) (representing constraint ((x_00007_00007=5) + (x_00008_00007=5)))
c Both direct and order encoding.
c Var 'aux785' order represents '0' with '3417'
c Var 'aux785' direct represents '0' with '3417'
c Var 'aux785' order represents '1' with '3418'
-3417 3418 0
c Var 'aux785' direct represents '1' with '3419'
3417 -3418 3419 0
-3419 3418 0
-3419 -3417 0
c Var 'aux785' direct represents '2' with '-3418'
3417 3419 -3418 0
c Encoding variable: aux786 with domain: int(0..2) (representing constraint ((x_00002_00007=5) + (x_00006_00007=5)))
c Both direct and order encoding.
c Var 'aux786' order represents '0' with '3420'
c Var 'aux786' direct represents '0' with '3420'
c Var 'aux786' order represents '1' with '3421'
-3420 3421 0
c Var 'aux786' direct represents '1' with '3422'
3420 -3421 3422 0
-3422 3421 0
-3422 -3420 0
c Var 'aux786' direct represents '2' with '-3421'
3420 3422 -3421 0
c Encoding variable: aux787 with domain: int(0..2) (representing constraint ((x_00009_00007=5) + (x_00004_00007=5)))
c Both direct and order encoding.
c Var 'aux787' order represents '0' with '3423'
c Var 'aux787' direct represents '0' with '3423'
c Var 'aux787' order represents '1' with '3424'
-3423 3424 0
c Var 'aux787' direct represents '1' with '3425'
3423 -3424 3425 0
-3425 3424 0
-3425 -3423 0
c Var 'aux787' direct represents '2' with '-3424'
3423 3425 -3424 0
c Encoding variable: aux788 with domain: int(0..3) (representing constraint ((x_00001_00007=5) + aux787))
c Both direct and order encoding.
c Var 'aux788' order represents '0' with '3426'
c Var 'aux788' direct represents '0' with '3426'
c Var 'aux788' order represents '1' with '3427'
-3426 3427 0
c Var 'aux788' direct represents '1' with '3428'
3426 -3427 3428 0
-3428 3427 0
-3428 -3426 0
c Var 'aux788' order represents '2' with '3429'
-3427 3429 0
c Var 'aux788' direct represents '2' with '3430'
3427 -3429 3430 0
-3430 3429 0
-3430 -3427 0
c Var 'aux788' direct represents '3' with '-3429'
3426 3428 3430 -3429 0
c Encoding variable: aux789 with domain: int(0..4) (representing constraint (aux784 + aux786))
c Both direct and order encoding.
c Var 'aux789' order represents '0' with '3431'
c Var 'aux789' direct represents '0' with '3431'
c Var 'aux789' order represents '1' with '3432'
-3431 3432 0
c Var 'aux789' direct represents '1' with '3433'
3431 -3432 3433 0
-3433 3432 0
-3433 -3431 0
c Var 'aux789' order represents '2' with '3434'
-3432 3434 0
c Var 'aux789' direct represents '2' with '3435'
3432 -3434 3435 0
-3435 3434 0
-3435 -3432 0
c Var 'aux789' order represents '3' with '3436'
-3434 3436 0
c Var 'aux789' direct represents '3' with '3437'
3434 -3436 3437 0
-3437 3436 0
-3437 -3434 0
c Var 'aux789' direct represents '4' with '-3436'
3431 3433 3435 3437 -3436 0
c Encoding variable: aux790 with domain: int(0..2) (representing constraint ((x_00003_00007=6) + (x_00005_00007=6)))
c Both direct and order encoding.
c Var 'aux790' order represents '0' with '3438'
c Var 'aux790' direct represents '0' with '3438'
c Var 'aux790' order represents '1' with '3439'
-3438 3439 0
c Var 'aux790' direct represents '1' with '3440'
3438 -3439 3440 0
-3440 3439 0
-3440 -3438 0
c Var 'aux790' direct represents '2' with '-3439'
3438 3440 -3439 0
c Encoding variable: aux791 with domain: int(0..2) (representing constraint ((x_00007_00007=6) + (x_00008_00007=6)))
c Both direct and order encoding.
c Var 'aux791' order represents '0' with '3441'
c Var 'aux791' direct represents '0' with '3441'
c Var 'aux791' order represents '1' with '3442'
-3441 3442 0
c Var 'aux791' direct represents '1' with '3443'
3441 -3442 3443 0
-3443 3442 0
-3443 -3441 0
c Var 'aux791' direct represents '2' with '-3442'
3441 3443 -3442 0
c Encoding variable: aux792 with domain: int(0..2) (representing constraint ((x_00002_00007=6) + (x_00006_00007=6)))
c Both direct and order encoding.
c Var 'aux792' order represents '0' with '3444'
c Var 'aux792' direct represents '0' with '3444'
c Var 'aux792' order represents '1' with '3445'
-3444 3445 0
c Var 'aux792' direct represents '1' with '3446'
3444 -3445 3446 0
-3446 3445 0
-3446 -3444 0
c Var 'aux792' direct represents '2' with '-3445'
3444 3446 -3445 0
c Encoding variable: aux793 with domain: int(0..2) (representing constraint ((x_00009_00007=6) + (x_00004_00007=6)))
c Both direct and order encoding.
c Var 'aux793' order represents '0' with '3447'
c Var 'aux793' direct represents '0' with '3447'
c Var 'aux793' order represents '1' with '3448'
-3447 3448 0
c Var 'aux793' direct represents '1' with '3449'
3447 -3448 3449 0
-3449 3448 0
-3449 -3447 0
c Var 'aux793' direct represents '2' with '-3448'
3447 3449 -3448 0
c Encoding variable: aux794 with domain: int(0..3) (representing constraint ((x_00001_00007=6) + aux793))
c Both direct and order encoding.
c Var 'aux794' order represents '0' with '3450'
c Var 'aux794' direct represents '0' with '3450'
c Var 'aux794' order represents '1' with '3451'
-3450 3451 0
c Var 'aux794' direct represents '1' with '3452'
3450 -3451 3452 0
-3452 3451 0
-3452 -3450 0
c Var 'aux794' order represents '2' with '3453'
-3451 3453 0
c Var 'aux794' direct represents '2' with '3454'
3451 -3453 3454 0
-3454 3453 0
-3454 -3451 0
c Var 'aux794' direct represents '3' with '-3453'
3450 3452 3454 -3453 0
c Encoding variable: aux795 with domain: int(0..4) (representing constraint (aux790 + aux792))
c Both direct and order encoding.
c Var 'aux795' order represents '0' with '3455'
c Var 'aux795' direct represents '0' with '3455'
c Var 'aux795' order represents '1' with '3456'
-3455 3456 0
c Var 'aux795' direct represents '1' with '3457'
3455 -3456 3457 0
-3457 3456 0
-3457 -3455 0
c Var 'aux795' order represents '2' with '3458'
-3456 3458 0
c Var 'aux795' direct represents '2' with '3459'
3456 -3458 3459 0
-3459 3458 0
-3459 -3456 0
c Var 'aux795' order represents '3' with '3460'
-3458 3460 0
c Var 'aux795' direct represents '3' with '3461'
3458 -3460 3461 0
-3461 3460 0
-3461 -3458 0
c Var 'aux795' direct represents '4' with '-3460'
3455 3457 3459 3461 -3460 0
c Encoding variable: aux796 with domain: int(0..2) (representing constraint ((x_00003_00007=7) + (x_00005_00007=7)))
c Both direct and order encoding.
c Var 'aux796' order represents '0' with '3462'
c Var 'aux796' direct represents '0' with '3462'
c Var 'aux796' order represents '1' with '3463'
-3462 3463 0
c Var 'aux796' direct represents '1' with '3464'
3462 -3463 3464 0
-3464 3463 0
-3464 -3462 0
c Var 'aux796' direct represents '2' with '-3463'
3462 3464 -3463 0
c Encoding variable: aux797 with domain: int(0..2) (representing constraint ((x_00007_00007=7) + (x_00008_00007=7)))
c Both direct and order encoding.
c Var 'aux797' order represents '0' with '3465'
c Var 'aux797' direct represents '0' with '3465'
c Var 'aux797' order represents '1' with '3466'
-3465 3466 0
c Var 'aux797' direct represents '1' with '3467'
3465 -3466 3467 0
-3467 3466 0
-3467 -3465 0
c Var 'aux797' direct represents '2' with '-3466'
3465 3467 -3466 0
c Encoding variable: aux798 with domain: int(0..2) (representing constraint ((x_00002_00007=7) + (x_00006_00007=7)))
c Both direct and order encoding.
c Var 'aux798' order represents '0' with '3468'
c Var 'aux798' direct represents '0' with '3468'
c Var 'aux798' order represents '1' with '3469'
-3468 3469 0
c Var 'aux798' direct represents '1' with '3470'
3468 -3469 3470 0
-3470 3469 0
-3470 -3468 0
c Var 'aux798' direct represents '2' with '-3469'
3468 3470 -3469 0
c Encoding variable: aux799 with domain: int(0..2) (representing constraint ((x_00009_00007=7) + (x_00004_00007=7)))
c Both direct and order encoding.
c Var 'aux799' order represents '0' with '3471'
c Var 'aux799' direct represents '0' with '3471'
c Var 'aux799' order represents '1' with '3472'
-3471 3472 0
c Var 'aux799' direct represents '1' with '3473'
3471 -3472 3473 0
-3473 3472 0
-3473 -3471 0
c Var 'aux799' direct represents '2' with '-3472'
3471 3473 -3472 0
c Encoding variable: aux800 with domain: int(0..3) (representing constraint ((x_00001_00007=7) + aux799))
c Both direct and order encoding.
c Var 'aux800' order represents '0' with '3474'
c Var 'aux800' direct represents '0' with '3474'
c Var 'aux800' order represents '1' with '3475'
-3474 3475 0
c Var 'aux800' direct represents '1' with '3476'
3474 -3475 3476 0
-3476 3475 0
-3476 -3474 0
c Var 'aux800' order represents '2' with '3477'
-3475 3477 0
c Var 'aux800' direct represents '2' with '3478'
3475 -3477 3478 0
-3478 3477 0
-3478 -3475 0
c Var 'aux800' direct represents '3' with '-3477'
3474 3476 3478 -3477 0
c Encoding variable: aux801 with domain: int(0..4) (representing constraint (aux796 + aux798))
c Both direct and order encoding.
c Var 'aux801' order represents '0' with '3479'
c Var 'aux801' direct represents '0' with '3479'
c Var 'aux801' order represents '1' with '3480'
-3479 3480 0
c Var 'aux801' direct represents '1' with '3481'
3479 -3480 3481 0
-3481 3480 0
-3481 -3479 0
c Var 'aux801' order represents '2' with '3482'
-3480 3482 0
c Var 'aux801' direct represents '2' with '3483'
3480 -3482 3483 0
-3483 3482 0
-3483 -3480 0
c Var 'aux801' order represents '3' with '3484'
-3482 3484 0
c Var 'aux801' direct represents '3' with '3485'
3482 -3484 3485 0
-3485 3484 0
-3485 -3482 0
c Var 'aux801' direct represents '4' with '-3484'
3479 3481 3483 3485 -3484 0
c Encoding variable: aux802 with domain: int(0..2) (representing constraint ((x_00003_00007=8) + (x_00005_00007=8)))
c Both direct and order encoding.
c Var 'aux802' order represents '0' with '3486'
c Var 'aux802' direct represents '0' with '3486'
c Var 'aux802' order represents '1' with '3487'
-3486 3487 0
c Var 'aux802' direct represents '1' with '3488'
3486 -3487 3488 0
-3488 3487 0
-3488 -3486 0
c Var 'aux802' direct represents '2' with '-3487'
3486 3488 -3487 0
c Encoding variable: aux803 with domain: int(0..2) (representing constraint ((x_00007_00007=8) + (x_00008_00007=8)))
c Both direct and order encoding.
c Var 'aux803' order represents '0' with '3489'
c Var 'aux803' direct represents '0' with '3489'
c Var 'aux803' order represents '1' with '3490'
-3489 3490 0
c Var 'aux803' direct represents '1' with '3491'
3489 -3490 3491 0
-3491 3490 0
-3491 -3489 0
c Var 'aux803' direct represents '2' with '-3490'
3489 3491 -3490 0
c Encoding variable: aux804 with domain: int(0..2) (representing constraint ((x_00002_00007=8) + (x_00006_00007=8)))
c Both direct and order encoding.
c Var 'aux804' order represents '0' with '3492'
c Var 'aux804' direct represents '0' with '3492'
c Var 'aux804' order represents '1' with '3493'
-3492 3493 0
c Var 'aux804' direct represents '1' with '3494'
3492 -3493 3494 0
-3494 3493 0
-3494 -3492 0
c Var 'aux804' direct represents '2' with '-3493'
3492 3494 -3493 0
c Encoding variable: aux805 with domain: int(0..2) (representing constraint ((x_00009_00007=8) + (x_00004_00007=8)))
c Both direct and order encoding.
c Var 'aux805' order represents '0' with '3495'
c Var 'aux805' direct represents '0' with '3495'
c Var 'aux805' order represents '1' with '3496'
-3495 3496 0
c Var 'aux805' direct represents '1' with '3497'
3495 -3496 3497 0
-3497 3496 0
-3497 -3495 0
c Var 'aux805' direct represents '2' with '-3496'
3495 3497 -3496 0
c Encoding variable: aux806 with domain: int(0..3) (representing constraint ((x_00001_00007=8) + aux805))
c Both direct and order encoding.
c Var 'aux806' order represents '0' with '3498'
c Var 'aux806' direct represents '0' with '3498'
c Var 'aux806' order represents '1' with '3499'
-3498 3499 0
c Var 'aux806' direct represents '1' with '3500'
3498 -3499 3500 0
-3500 3499 0
-3500 -3498 0
c Var 'aux806' order represents '2' with '3501'
-3499 3501 0
c Var 'aux806' direct represents '2' with '3502'
3499 -3501 3502 0
-3502 3501 0
-3502 -3499 0
c Var 'aux806' direct represents '3' with '-3501'
3498 3500 3502 -3501 0
c Encoding variable: aux807 with domain: int(0..4) (representing constraint (aux802 + aux804))
c Both direct and order encoding.
c Var 'aux807' order represents '0' with '3503'
c Var 'aux807' direct represents '0' with '3503'
c Var 'aux807' order represents '1' with '3504'
-3503 3504 0
c Var 'aux807' direct represents '1' with '3505'
3503 -3504 3505 0
-3505 3504 0
-3505 -3503 0
c Var 'aux807' order represents '2' with '3506'
-3504 3506 0
c Var 'aux807' direct represents '2' with '3507'
3504 -3506 3507 0
-3507 3506 0
-3507 -3504 0
c Var 'aux807' order represents '3' with '3508'
-3506 3508 0
c Var 'aux807' direct represents '3' with '3509'
3506 -3508 3509 0
-3509 3508 0
-3509 -3506 0
c Var 'aux807' direct represents '4' with '-3508'
3503 3505 3507 3509 -3508 0
c Encoding variable: aux808 with domain: int(0..2) (representing constraint ((x_00003_00007=9) + (x_00005_00007=9)))
c Both direct and order encoding.
c Var 'aux808' order represents '0' with '3510'
c Var 'aux808' direct represents '0' with '3510'
c Var 'aux808' order represents '1' with '3511'
-3510 3511 0
c Var 'aux808' direct represents '1' with '3512'
3510 -3511 3512 0
-3512 3511 0
-3512 -3510 0
c Var 'aux808' direct represents '2' with '-3511'
3510 3512 -3511 0
c Encoding variable: aux809 with domain: int(0..2) (representing constraint ((x_00007_00007=9) + (x_00008_00007=9)))
c Both direct and order encoding.
c Var 'aux809' order represents '0' with '3513'
c Var 'aux809' direct represents '0' with '3513'
c Var 'aux809' order represents '1' with '3514'
-3513 3514 0
c Var 'aux809' direct represents '1' with '3515'
3513 -3514 3515 0
-3515 3514 0
-3515 -3513 0
c Var 'aux809' direct represents '2' with '-3514'
3513 3515 -3514 0
c Encoding variable: aux810 with domain: int(0..2) (representing constraint ((x_00002_00007=9) + (x_00006_00007=9)))
c Both direct and order encoding.
c Var 'aux810' order represents '0' with '3516'
c Var 'aux810' direct represents '0' with '3516'
c Var 'aux810' order represents '1' with '3517'
-3516 3517 0
c Var 'aux810' direct represents '1' with '3518'
3516 -3517 3518 0
-3518 3517 0
-3518 -3516 0
c Var 'aux810' direct represents '2' with '-3517'
3516 3518 -3517 0
c Encoding variable: aux811 with domain: int(0..2) (representing constraint ((x_00009_00007=9) + (x_00004_00007=9)))
c Both direct and order encoding.
c Var 'aux811' order represents '0' with '3519'
c Var 'aux811' direct represents '0' with '3519'
c Var 'aux811' order represents '1' with '3520'
-3519 3520 0
c Var 'aux811' direct represents '1' with '3521'
3519 -3520 3521 0
-3521 3520 0
-3521 -3519 0
c Var 'aux811' direct represents '2' with '-3520'
3519 3521 -3520 0
c Encoding variable: aux812 with domain: int(0..3) (representing constraint ((x_00001_00007=9) + aux811))
c Both direct and order encoding.
c Var 'aux812' order represents '0' with '3522'
c Var 'aux812' direct represents '0' with '3522'
c Var 'aux812' order represents '1' with '3523'
-3522 3523 0
c Var 'aux812' direct represents '1' with '3524'
3522 -3523 3524 0
-3524 3523 0
-3524 -3522 0
c Var 'aux812' order represents '2' with '3525'
-3523 3525 0
c Var 'aux812' direct represents '2' with '3526'
3523 -3525 3526 0
-3526 3525 0
-3526 -3523 0
c Var 'aux812' direct represents '3' with '-3525'
3522 3524 3526 -3525 0
c Encoding variable: aux813 with domain: int(0..4) (representing constraint (aux808 + aux810))
c Both direct and order encoding.
c Var 'aux813' order represents '0' with '3527'
c Var 'aux813' direct represents '0' with '3527'
c Var 'aux813' order represents '1' with '3528'
-3527 3528 0
c Var 'aux813' direct represents '1' with '3529'
3527 -3528 3529 0
-3529 3528 0
-3529 -3527 0
c Var 'aux813' order represents '2' with '3530'
-3528 3530 0
c Var 'aux813' direct represents '2' with '3531'
3528 -3530 3531 0
-3531 3530 0
-3531 -3528 0
c Var 'aux813' order represents '3' with '3532'
-3530 3532 0
c Var 'aux813' direct represents '3' with '3533'
3530 -3532 3533 0
-3533 3532 0
-3533 -3530 0
c Var 'aux813' direct represents '4' with '-3532'
3527 3529 3531 3533 -3532 0
c Encoding variable: aux814 with domain: int(0..2) (representing constraint ((x_00003_00008=1) + (x_00005_00008=1)))
c Both direct and order encoding.
c Var 'aux814' order represents '0' with '3534'
c Var 'aux814' direct represents '0' with '3534'
c Var 'aux814' order represents '1' with '3535'
-3534 3535 0
c Var 'aux814' direct represents '1' with '3536'
3534 -3535 3536 0
-3536 3535 0
-3536 -3534 0
c Var 'aux814' direct represents '2' with '-3535'
3534 3536 -3535 0
c Encoding variable: aux815 with domain: int(0..2) (representing constraint ((x_00007_00008=1) + (x_00008_00008=1)))
c Both direct and order encoding.
c Var 'aux815' order represents '0' with '3537'
c Var 'aux815' direct represents '0' with '3537'
c Var 'aux815' order represents '1' with '3538'
-3537 3538 0
c Var 'aux815' direct represents '1' with '3539'
3537 -3538 3539 0
-3539 3538 0
-3539 -3537 0
c Var 'aux815' direct represents '2' with '-3538'
3537 3539 -3538 0
c Encoding variable: aux816 with domain: int(0..2) (representing constraint ((x_00002_00008=1) + (x_00006_00008=1)))
c Both direct and order encoding.
c Var 'aux816' order represents '0' with '3540'
c Var 'aux816' direct represents '0' with '3540'
c Var 'aux816' order represents '1' with '3541'
-3540 3541 0
c Var 'aux816' direct represents '1' with '3542'
3540 -3541 3542 0
-3542 3541 0
-3542 -3540 0
c Var 'aux816' direct represents '2' with '-3541'
3540 3542 -3541 0
c Encoding variable: aux817 with domain: int(0..2) (representing constraint ((x_00009_00008=1) + (x_00004_00008=1)))
c Both direct and order encoding.
c Var 'aux817' order represents '0' with '3543'
c Var 'aux817' direct represents '0' with '3543'
c Var 'aux817' order represents '1' with '3544'
-3543 3544 0
c Var 'aux817' direct represents '1' with '3545'
3543 -3544 3545 0
-3545 3544 0
-3545 -3543 0
c Var 'aux817' direct represents '2' with '-3544'
3543 3545 -3544 0
c Encoding variable: aux818 with domain: int(0..3) (representing constraint ((x_00001_00008=1) + aux817))
c Both direct and order encoding.
c Var 'aux818' order represents '0' with '3546'
c Var 'aux818' direct represents '0' with '3546'
c Var 'aux818' order represents '1' with '3547'
-3546 3547 0
c Var 'aux818' direct represents '1' with '3548'
3546 -3547 3548 0
-3548 3547 0
-3548 -3546 0
c Var 'aux818' order represents '2' with '3549'
-3547 3549 0
c Var 'aux818' direct represents '2' with '3550'
3547 -3549 3550 0
-3550 3549 0
-3550 -3547 0
c Var 'aux818' direct represents '3' with '-3549'
3546 3548 3550 -3549 0
c Encoding variable: aux819 with domain: int(0..4) (representing constraint (aux814 + aux816))
c Both direct and order encoding.
c Var 'aux819' order represents '0' with '3551'
c Var 'aux819' direct represents '0' with '3551'
c Var 'aux819' order represents '1' with '3552'
-3551 3552 0
c Var 'aux819' direct represents '1' with '3553'
3551 -3552 3553 0
-3553 3552 0
-3553 -3551 0
c Var 'aux819' order represents '2' with '3554'
-3552 3554 0
c Var 'aux819' direct represents '2' with '3555'
3552 -3554 3555 0
-3555 3554 0
-3555 -3552 0
c Var 'aux819' order represents '3' with '3556'
-3554 3556 0
c Var 'aux819' direct represents '3' with '3557'
3554 -3556 3557 0
-3557 3556 0
-3557 -3554 0
c Var 'aux819' direct represents '4' with '-3556'
3551 3553 3555 3557 -3556 0
c Encoding variable: aux820 with domain: int(0..2) (representing constraint ((x_00003_00008=2) + (x_00005_00008=2)))
c Both direct and order encoding.
c Var 'aux820' order represents '0' with '3558'
c Var 'aux820' direct represents '0' with '3558'
c Var 'aux820' order represents '1' with '3559'
-3558 3559 0
c Var 'aux820' direct represents '1' with '3560'
3558 -3559 3560 0
-3560 3559 0
-3560 -3558 0
c Var 'aux820' direct represents '2' with '-3559'
3558 3560 -3559 0
c Encoding variable: aux821 with domain: int(0..2) (representing constraint ((x_00007_00008=2) + (x_00008_00008=2)))
c Both direct and order encoding.
c Var 'aux821' order represents '0' with '3561'
c Var 'aux821' direct represents '0' with '3561'
c Var 'aux821' order represents '1' with '3562'
-3561 3562 0
c Var 'aux821' direct represents '1' with '3563'
3561 -3562 3563 0
-3563 3562 0
-3563 -3561 0
c Var 'aux821' direct represents '2' with '-3562'
3561 3563 -3562 0
c Encoding variable: aux822 with domain: int(0..2) (representing constraint ((x_00002_00008=2) + (x_00006_00008=2)))
c Both direct and order encoding.
c Var 'aux822' order represents '0' with '3564'
c Var 'aux822' direct represents '0' with '3564'
c Var 'aux822' order represents '1' with '3565'
-3564 3565 0
c Var 'aux822' direct represents '1' with '3566'
3564 -3565 3566 0
-3566 3565 0
-3566 -3564 0
c Var 'aux822' direct represents '2' with '-3565'
3564 3566 -3565 0
c Encoding variable: aux823 with domain: int(0..2) (representing constraint ((x_00009_00008=2) + (x_00004_00008=2)))
c Both direct and order encoding.
c Var 'aux823' order represents '0' with '3567'
c Var 'aux823' direct represents '0' with '3567'
c Var 'aux823' order represents '1' with '3568'
-3567 3568 0
c Var 'aux823' direct represents '1' with '3569'
3567 -3568 3569 0
-3569 3568 0
-3569 -3567 0
c Var 'aux823' direct represents '2' with '-3568'
3567 3569 -3568 0
c Encoding variable: aux824 with domain: int(0..3) (representing constraint ((x_00001_00008=2) + aux823))
c Both direct and order encoding.
c Var 'aux824' order represents '0' with '3570'
c Var 'aux824' direct represents '0' with '3570'
c Var 'aux824' order represents '1' with '3571'
-3570 3571 0
c Var 'aux824' direct represents '1' with '3572'
3570 -3571 3572 0
-3572 3571 0
-3572 -3570 0
c Var 'aux824' order represents '2' with '3573'
-3571 3573 0
c Var 'aux824' direct represents '2' with '3574'
3571 -3573 3574 0
-3574 3573 0
-3574 -3571 0
c Var 'aux824' direct represents '3' with '-3573'
3570 3572 3574 -3573 0
c Encoding variable: aux825 with domain: int(0..4) (representing constraint (aux820 + aux822))
c Both direct and order encoding.
c Var 'aux825' order represents '0' with '3575'
c Var 'aux825' direct represents '0' with '3575'
c Var 'aux825' order represents '1' with '3576'
-3575 3576 0
c Var 'aux825' direct represents '1' with '3577'
3575 -3576 3577 0
-3577 3576 0
-3577 -3575 0
c Var 'aux825' order represents '2' with '3578'
-3576 3578 0
c Var 'aux825' direct represents '2' with '3579'
3576 -3578 3579 0
-3579 3578 0
-3579 -3576 0
c Var 'aux825' order represents '3' with '3580'
-3578 3580 0
c Var 'aux825' direct represents '3' with '3581'
3578 -3580 3581 0
-3581 3580 0
-3581 -3578 0
c Var 'aux825' direct represents '4' with '-3580'
3575 3577 3579 3581 -3580 0
c Encoding variable: aux826 with domain: int(0..2) (representing constraint ((x_00003_00008=3) + (x_00005_00008=3)))
c Both direct and order encoding.
c Var 'aux826' order represents '0' with '3582'
c Var 'aux826' direct represents '0' with '3582'
c Var 'aux826' order represents '1' with '3583'
-3582 3583 0
c Var 'aux826' direct represents '1' with '3584'
3582 -3583 3584 0
-3584 3583 0
-3584 -3582 0
c Var 'aux826' direct represents '2' with '-3583'
3582 3584 -3583 0
c Encoding variable: aux827 with domain: int(0..2) (representing constraint ((x_00007_00008=3) + (x_00008_00008=3)))
c Both direct and order encoding.
c Var 'aux827' order represents '0' with '3585'
c Var 'aux827' direct represents '0' with '3585'
c Var 'aux827' order represents '1' with '3586'
-3585 3586 0
c Var 'aux827' direct represents '1' with '3587'
3585 -3586 3587 0
-3587 3586 0
-3587 -3585 0
c Var 'aux827' direct represents '2' with '-3586'
3585 3587 -3586 0
c Encoding variable: aux828 with domain: int(0..2) (representing constraint ((x_00002_00008=3) + (x_00006_00008=3)))
c Both direct and order encoding.
c Var 'aux828' order represents '0' with '3588'
c Var 'aux828' direct represents '0' with '3588'
c Var 'aux828' order represents '1' with '3589'
-3588 3589 0
c Var 'aux828' direct represents '1' with '3590'
3588 -3589 3590 0
-3590 3589 0
-3590 -3588 0
c Var 'aux828' direct represents '2' with '-3589'
3588 3590 -3589 0
c Encoding variable: aux829 with domain: int(0..2) (representing constraint ((x_00009_00008=3) + (x_00004_00008=3)))
c Both direct and order encoding.
c Var 'aux829' order represents '0' with '3591'
c Var 'aux829' direct represents '0' with '3591'
c Var 'aux829' order represents '1' with '3592'
-3591 3592 0
c Var 'aux829' direct represents '1' with '3593'
3591 -3592 3593 0
-3593 3592 0
-3593 -3591 0
c Var 'aux829' direct represents '2' with '-3592'
3591 3593 -3592 0
c Encoding variable: aux830 with domain: int(0..3) (representing constraint ((x_00001_00008=3) + aux829))
c Both direct and order encoding.
c Var 'aux830' order represents '0' with '3594'
c Var 'aux830' direct represents '0' with '3594'
c Var 'aux830' order represents '1' with '3595'
-3594 3595 0
c Var 'aux830' direct represents '1' with '3596'
3594 -3595 3596 0
-3596 3595 0
-3596 -3594 0
c Var 'aux830' order represents '2' with '3597'
-3595 3597 0
c Var 'aux830' direct represents '2' with '3598'
3595 -3597 3598 0
-3598 3597 0
-3598 -3595 0
c Var 'aux830' direct represents '3' with '-3597'
3594 3596 3598 -3597 0
c Encoding variable: aux831 with domain: int(0..4) (representing constraint (aux826 + aux828))
c Both direct and order encoding.
c Var 'aux831' order represents '0' with '3599'
c Var 'aux831' direct represents '0' with '3599'
c Var 'aux831' order represents '1' with '3600'
-3599 3600 0
c Var 'aux831' direct represents '1' with '3601'
3599 -3600 3601 0
-3601 3600 0
-3601 -3599 0
c Var 'aux831' order represents '2' with '3602'
-3600 3602 0
c Var 'aux831' direct represents '2' with '3603'
3600 -3602 3603 0
-3603 3602 0
-3603 -3600 0
c Var 'aux831' order represents '3' with '3604'
-3602 3604 0
c Var 'aux831' direct represents '3' with '3605'
3602 -3604 3605 0
-3605 3604 0
-3605 -3602 0
c Var 'aux831' direct represents '4' with '-3604'
3599 3601 3603 3605 -3604 0
c Encoding variable: aux832 with domain: int(0..2) (representing constraint ((x_00003_00008=4) + (x_00005_00008=4)))
c Both direct and order encoding.
c Var 'aux832' order represents '0' with '3606'
c Var 'aux832' direct represents '0' with '3606'
c Var 'aux832' order represents '1' with '3607'
-3606 3607 0
c Var 'aux832' direct represents '1' with '3608'
3606 -3607 3608 0
-3608 3607 0
-3608 -3606 0
c Var 'aux832' direct represents '2' with '-3607'
3606 3608 -3607 0
c Encoding variable: aux833 with domain: int(0..2) (representing constraint ((x_00007_00008=4) + (x_00008_00008=4)))
c Both direct and order encoding.
c Var 'aux833' order represents '0' with '3609'
c Var 'aux833' direct represents '0' with '3609'
c Var 'aux833' order represents '1' with '3610'
-3609 3610 0
c Var 'aux833' direct represents '1' with '3611'
3609 -3610 3611 0
-3611 3610 0
-3611 -3609 0
c Var 'aux833' direct represents '2' with '-3610'
3609 3611 -3610 0
c Encoding variable: aux834 with domain: int(0..2) (representing constraint ((x_00002_00008=4) + (x_00006_00008=4)))
c Both direct and order encoding.
c Var 'aux834' order represents '0' with '3612'
c Var 'aux834' direct represents '0' with '3612'
c Var 'aux834' order represents '1' with '3613'
-3612 3613 0
c Var 'aux834' direct represents '1' with '3614'
3612 -3613 3614 0
-3614 3613 0
-3614 -3612 0
c Var 'aux834' direct represents '2' with '-3613'
3612 3614 -3613 0
c Encoding variable: aux835 with domain: int(0..2) (representing constraint ((x_00009_00008=4) + (x_00004_00008=4)))
c Both direct and order encoding.
c Var 'aux835' order represents '0' with '3615'
c Var 'aux835' direct represents '0' with '3615'
c Var 'aux835' order represents '1' with '3616'
-3615 3616 0
c Var 'aux835' direct represents '1' with '3617'
3615 -3616 3617 0
-3617 3616 0
-3617 -3615 0
c Var 'aux835' direct represents '2' with '-3616'
3615 3617 -3616 0
c Encoding variable: aux836 with domain: int(0..3) (representing constraint ((x_00001_00008=4) + aux835))
c Both direct and order encoding.
c Var 'aux836' order represents '0' with '3618'
c Var 'aux836' direct represents '0' with '3618'
c Var 'aux836' order represents '1' with '3619'
-3618 3619 0
c Var 'aux836' direct represents '1' with '3620'
3618 -3619 3620 0
-3620 3619 0
-3620 -3618 0
c Var 'aux836' order represents '2' with '3621'
-3619 3621 0
c Var 'aux836' direct represents '2' with '3622'
3619 -3621 3622 0
-3622 3621 0
-3622 -3619 0
c Var 'aux836' direct represents '3' with '-3621'
3618 3620 3622 -3621 0
c Encoding variable: aux837 with domain: int(0..4) (representing constraint (aux832 + aux834))
c Both direct and order encoding.
c Var 'aux837' order represents '0' with '3623'
c Var 'aux837' direct represents '0' with '3623'
c Var 'aux837' order represents '1' with '3624'
-3623 3624 0
c Var 'aux837' direct represents '1' with '3625'
3623 -3624 3625 0
-3625 3624 0
-3625 -3623 0
c Var 'aux837' order represents '2' with '3626'
-3624 3626 0
c Var 'aux837' direct represents '2' with '3627'
3624 -3626 3627 0
-3627 3626 0
-3627 -3624 0
c Var 'aux837' order represents '3' with '3628'
-3626 3628 0
c Var 'aux837' direct represents '3' with '3629'
3626 -3628 3629 0
-3629 3628 0
-3629 -3626 0
c Var 'aux837' direct represents '4' with '-3628'
3623 3625 3627 3629 -3628 0
c Encoding variable: aux838 with domain: int(0..2) (representing constraint ((x_00003_00008=5) + (x_00005_00008=5)))
c Both direct and order encoding.
c Var 'aux838' order represents '0' with '3630'
c Var 'aux838' direct represents '0' with '3630'
c Var 'aux838' order represents '1' with '3631'
-3630 3631 0
c Var 'aux838' direct represents '1' with '3632'
3630 -3631 3632 0
-3632 3631 0
-3632 -3630 0
c Var 'aux838' direct represents '2' with '-3631'
3630 3632 -3631 0
c Encoding variable: aux839 with domain: int(0..2) (representing constraint ((x_00007_00008=5) + (x_00008_00008=5)))
c Both direct and order encoding.
c Var 'aux839' order represents '0' with '3633'
c Var 'aux839' direct represents '0' with '3633'
c Var 'aux839' order represents '1' with '3634'
-3633 3634 0
c Var 'aux839' direct represents '1' with '3635'
3633 -3634 3635 0
-3635 3634 0
-3635 -3633 0
c Var 'aux839' direct represents '2' with '-3634'
3633 3635 -3634 0
c Encoding variable: aux840 with domain: int(0..2) (representing constraint ((x_00002_00008=5) + (x_00006_00008=5)))
c Both direct and order encoding.
c Var 'aux840' order represents '0' with '3636'
c Var 'aux840' direct represents '0' with '3636'
c Var 'aux840' order represents '1' with '3637'
-3636 3637 0
c Var 'aux840' direct represents '1' with '3638'
3636 -3637 3638 0
-3638 3637 0
-3638 -3636 0
c Var 'aux840' direct represents '2' with '-3637'
3636 3638 -3637 0
c Encoding variable: aux841 with domain: int(0..2) (representing constraint ((x_00009_00008=5) + (x_00004_00008=5)))
c Both direct and order encoding.
c Var 'aux841' order represents '0' with '3639'
c Var 'aux841' direct represents '0' with '3639'
c Var 'aux841' order represents '1' with '3640'
-3639 3640 0
c Var 'aux841' direct represents '1' with '3641'
3639 -3640 3641 0
-3641 3640 0
-3641 -3639 0
c Var 'aux841' direct represents '2' with '-3640'
3639 3641 -3640 0
c Encoding variable: aux842 with domain: int(0..3) (representing constraint ((x_00001_00008=5) + aux841))
c Both direct and order encoding.
c Var 'aux842' order represents '0' with '3642'
c Var 'aux842' direct represents '0' with '3642'
c Var 'aux842' order represents '1' with '3643'
-3642 3643 0
c Var 'aux842' direct represents '1' with '3644'
3642 -3643 3644 0
-3644 3643 0
-3644 -3642 0
c Var 'aux842' order represents '2' with '3645'
-3643 3645 0
c Var 'aux842' direct represents '2' with '3646'
3643 -3645 3646 0
-3646 3645 0
-3646 -3643 0
c Var 'aux842' direct represents '3' with '-3645'
3642 3644 3646 -3645 0
c Encoding variable: aux843 with domain: int(0..4) (representing constraint (aux838 + aux840))
c Both direct and order encoding.
c Var 'aux843' order represents '0' with '3647'
c Var 'aux843' direct represents '0' with '3647'
c Var 'aux843' order represents '1' with '3648'
-3647 3648 0
c Var 'aux843' direct represents '1' with '3649'
3647 -3648 3649 0
-3649 3648 0
-3649 -3647 0
c Var 'aux843' order represents '2' with '3650'
-3648 3650 0
c Var 'aux843' direct represents '2' with '3651'
3648 -3650 3651 0
-3651 3650 0
-3651 -3648 0
c Var 'aux843' order represents '3' with '3652'
-3650 3652 0
c Var 'aux843' direct represents '3' with '3653'
3650 -3652 3653 0
-3653 3652 0
-3653 -3650 0
c Var 'aux843' direct represents '4' with '-3652'
3647 3649 3651 3653 -3652 0
c Encoding variable: aux844 with domain: int(0..2) (representing constraint ((x_00003_00008=6) + (x_00005_00008=6)))
c Both direct and order encoding.
c Var 'aux844' order represents '0' with '3654'
c Var 'aux844' direct represents '0' with '3654'
c Var 'aux844' order represents '1' with '3655'
-3654 3655 0
c Var 'aux844' direct represents '1' with '3656'
3654 -3655 3656 0
-3656 3655 0
-3656 -3654 0
c Var 'aux844' direct represents '2' with '-3655'
3654 3656 -3655 0
c Encoding variable: aux845 with domain: int(0..2) (representing constraint ((x_00007_00008=6) + (x_00008_00008=6)))
c Both direct and order encoding.
c Var 'aux845' order represents '0' with '3657'
c Var 'aux845' direct represents '0' with '3657'
c Var 'aux845' order represents '1' with '3658'
-3657 3658 0
c Var 'aux845' direct represents '1' with '3659'
3657 -3658 3659 0
-3659 3658 0
-3659 -3657 0
c Var 'aux845' direct represents '2' with '-3658'
3657 3659 -3658 0
c Encoding variable: aux846 with domain: int(0..2) (representing constraint ((x_00002_00008=6) + (x_00006_00008=6)))
c Both direct and order encoding.
c Var 'aux846' order represents '0' with '3660'
c Var 'aux846' direct represents '0' with '3660'
c Var 'aux846' order represents '1' with '3661'
-3660 3661 0
c Var 'aux846' direct represents '1' with '3662'
3660 -3661 3662 0
-3662 3661 0
-3662 -3660 0
c Var 'aux846' direct represents '2' with '-3661'
3660 3662 -3661 0
c Encoding variable: aux847 with domain: int(0..2) (representing constraint ((x_00009_00008=6) + (x_00004_00008=6)))
c Both direct and order encoding.
c Var 'aux847' order represents '0' with '3663'
c Var 'aux847' direct represents '0' with '3663'
c Var 'aux847' order represents '1' with '3664'
-3663 3664 0
c Var 'aux847' direct represents '1' with '3665'
3663 -3664 3665 0
-3665 3664 0
-3665 -3663 0
c Var 'aux847' direct represents '2' with '-3664'
3663 3665 -3664 0
c Encoding variable: aux848 with domain: int(0..3) (representing constraint ((x_00001_00008=6) + aux847))
c Both direct and order encoding.
c Var 'aux848' order represents '0' with '3666'
c Var 'aux848' direct represents '0' with '3666'
c Var 'aux848' order represents '1' with '3667'
-3666 3667 0
c Var 'aux848' direct represents '1' with '3668'
3666 -3667 3668 0
-3668 3667 0
-3668 -3666 0
c Var 'aux848' order represents '2' with '3669'
-3667 3669 0
c Var 'aux848' direct represents '2' with '3670'
3667 -3669 3670 0
-3670 3669 0
-3670 -3667 0
c Var 'aux848' direct represents '3' with '-3669'
3666 3668 3670 -3669 0
c Encoding variable: aux849 with domain: int(0..4) (representing constraint (aux844 + aux846))
c Both direct and order encoding.
c Var 'aux849' order represents '0' with '3671'
c Var 'aux849' direct represents '0' with '3671'
c Var 'aux849' order represents '1' with '3672'
-3671 3672 0
c Var 'aux849' direct represents '1' with '3673'
3671 -3672 3673 0
-3673 3672 0
-3673 -3671 0
c Var 'aux849' order represents '2' with '3674'
-3672 3674 0
c Var 'aux849' direct represents '2' with '3675'
3672 -3674 3675 0
-3675 3674 0
-3675 -3672 0
c Var 'aux849' order represents '3' with '3676'
-3674 3676 0
c Var 'aux849' direct represents '3' with '3677'
3674 -3676 3677 0
-3677 3676 0
-3677 -3674 0
c Var 'aux849' direct represents '4' with '-3676'
3671 3673 3675 3677 -3676 0
c Encoding variable: aux850 with domain: int(0..2) (representing constraint ((x_00003_00008=7) + (x_00005_00008=7)))
c Both direct and order encoding.
c Var 'aux850' order represents '0' with '3678'
c Var 'aux850' direct represents '0' with '3678'
c Var 'aux850' order represents '1' with '3679'
-3678 3679 0
c Var 'aux850' direct represents '1' with '3680'
3678 -3679 3680 0
-3680 3679 0
-3680 -3678 0
c Var 'aux850' direct represents '2' with '-3679'
3678 3680 -3679 0
c Encoding variable: aux851 with domain: int(0..2) (representing constraint ((x_00007_00008=7) + (x_00008_00008=7)))
c Both direct and order encoding.
c Var 'aux851' order represents '0' with '3681'
c Var 'aux851' direct represents '0' with '3681'
c Var 'aux851' order represents '1' with '3682'
-3681 3682 0
c Var 'aux851' direct represents '1' with '3683'
3681 -3682 3683 0
-3683 3682 0
-3683 -3681 0
c Var 'aux851' direct represents '2' with '-3682'
3681 3683 -3682 0
c Encoding variable: aux852 with domain: int(0..2) (representing constraint ((x_00002_00008=7) + (x_00006_00008=7)))
c Both direct and order encoding.
c Var 'aux852' order represents '0' with '3684'
c Var 'aux852' direct represents '0' with '3684'
c Var 'aux852' order represents '1' with '3685'
-3684 3685 0
c Var 'aux852' direct represents '1' with '3686'
3684 -3685 3686 0
-3686 3685 0
-3686 -3684 0
c Var 'aux852' direct represents '2' with '-3685'
3684 3686 -3685 0
c Encoding variable: aux853 with domain: int(0..2) (representing constraint ((x_00009_00008=7) + (x_00004_00008=7)))
c Both direct and order encoding.
c Var 'aux853' order represents '0' with '3687'
c Var 'aux853' direct represents '0' with '3687'
c Var 'aux853' order represents '1' with '3688'
-3687 3688 0
c Var 'aux853' direct represents '1' with '3689'
3687 -3688 3689 0
-3689 3688 0
-3689 -3687 0
c Var 'aux853' direct represents '2' with '-3688'
3687 3689 -3688 0
c Encoding variable: aux854 with domain: int(0..3) (representing constraint ((x_00001_00008=7) + aux853))
c Both direct and order encoding.
c Var 'aux854' order represents '0' with '3690'
c Var 'aux854' direct represents '0' with '3690'
c Var 'aux854' order represents '1' with '3691'
-3690 3691 0
c Var 'aux854' direct represents '1' with '3692'
3690 -3691 3692 0
-3692 3691 0
-3692 -3690 0
c Var 'aux854' order represents '2' with '3693'
-3691 3693 0
c Var 'aux854' direct represents '2' with '3694'
3691 -3693 3694 0
-3694 3693 0
-3694 -3691 0
c Var 'aux854' direct represents '3' with '-3693'
3690 3692 3694 -3693 0
c Encoding variable: aux855 with domain: int(0..4) (representing constraint (aux850 + aux852))
c Both direct and order encoding.
c Var 'aux855' order represents '0' with '3695'
c Var 'aux855' direct represents '0' with '3695'
c Var 'aux855' order represents '1' with '3696'
-3695 3696 0
c Var 'aux855' direct represents '1' with '3697'
3695 -3696 3697 0
-3697 3696 0
-3697 -3695 0
c Var 'aux855' order represents '2' with '3698'
-3696 3698 0
c Var 'aux855' direct represents '2' with '3699'
3696 -3698 3699 0
-3699 3698 0
-3699 -3696 0
c Var 'aux855' order represents '3' with '3700'
-3698 3700 0
c Var 'aux855' direct represents '3' with '3701'
3698 -3700 3701 0
-3701 3700 0
-3701 -3698 0
c Var 'aux855' direct represents '4' with '-3700'
3695 3697 3699 3701 -3700 0
c Encoding variable: aux856 with domain: int(0..2) (representing constraint ((x_00003_00008=8) + (x_00005_00008=8)))
c Both direct and order encoding.
c Var 'aux856' order represents '0' with '3702'
c Var 'aux856' direct represents '0' with '3702'
c Var 'aux856' order represents '1' with '3703'
-3702 3703 0
c Var 'aux856' direct represents '1' with '3704'
3702 -3703 3704 0
-3704 3703 0
-3704 -3702 0
c Var 'aux856' direct represents '2' with '-3703'
3702 3704 -3703 0
c Encoding variable: aux857 with domain: int(0..2) (representing constraint ((x_00007_00008=8) + (x_00008_00008=8)))
c Both direct and order encoding.
c Var 'aux857' order represents '0' with '3705'
c Var 'aux857' direct represents '0' with '3705'
c Var 'aux857' order represents '1' with '3706'
-3705 3706 0
c Var 'aux857' direct represents '1' with '3707'
3705 -3706 3707 0
-3707 3706 0
-3707 -3705 0
c Var 'aux857' direct represents '2' with '-3706'
3705 3707 -3706 0
c Encoding variable: aux858 with domain: int(0..2) (representing constraint ((x_00002_00008=8) + (x_00006_00008=8)))
c Both direct and order encoding.
c Var 'aux858' order represents '0' with '3708'
c Var 'aux858' direct represents '0' with '3708'
c Var 'aux858' order represents '1' with '3709'
-3708 3709 0
c Var 'aux858' direct represents '1' with '3710'
3708 -3709 3710 0
-3710 3709 0
-3710 -3708 0
c Var 'aux858' direct represents '2' with '-3709'
3708 3710 -3709 0
c Encoding variable: aux859 with domain: int(0..2) (representing constraint ((x_00009_00008=8) + (x_00004_00008=8)))
c Both direct and order encoding.
c Var 'aux859' order represents '0' with '3711'
c Var 'aux859' direct represents '0' with '3711'
c Var 'aux859' order represents '1' with '3712'
-3711 3712 0
c Var 'aux859' direct represents '1' with '3713'
3711 -3712 3713 0
-3713 3712 0
-3713 -3711 0
c Var 'aux859' direct represents '2' with '-3712'
3711 3713 -3712 0
c Encoding variable: aux860 with domain: int(0..3) (representing constraint ((x_00001_00008=8) + aux859))
c Both direct and order encoding.
c Var 'aux860' order represents '0' with '3714'
c Var 'aux860' direct represents '0' with '3714'
c Var 'aux860' order represents '1' with '3715'
-3714 3715 0
c Var 'aux860' direct represents '1' with '3716'
3714 -3715 3716 0
-3716 3715 0
-3716 -3714 0
c Var 'aux860' order represents '2' with '3717'
-3715 3717 0
c Var 'aux860' direct represents '2' with '3718'
3715 -3717 3718 0
-3718 3717 0
-3718 -3715 0
c Var 'aux860' direct represents '3' with '-3717'
3714 3716 3718 -3717 0
c Encoding variable: aux861 with domain: int(0..4) (representing constraint (aux856 + aux858))
c Both direct and order encoding.
c Var 'aux861' order represents '0' with '3719'
c Var 'aux861' direct represents '0' with '3719'
c Var 'aux861' order represents '1' with '3720'
-3719 3720 0
c Var 'aux861' direct represents '1' with '3721'
3719 -3720 3721 0
-3721 3720 0
-3721 -3719 0
c Var 'aux861' order represents '2' with '3722'
-3720 3722 0
c Var 'aux861' direct represents '2' with '3723'
3720 -3722 3723 0
-3723 3722 0
-3723 -3720 0
c Var 'aux861' order represents '3' with '3724'
-3722 3724 0
c Var 'aux861' direct represents '3' with '3725'
3722 -3724 3725 0
-3725 3724 0
-3725 -3722 0
c Var 'aux861' direct represents '4' with '-3724'
3719 3721 3723 3725 -3724 0
c Encoding variable: aux862 with domain: int(0..2) (representing constraint ((x_00003_00008=9) + (x_00005_00008=9)))
c Both direct and order encoding.
c Var 'aux862' order represents '0' with '3726'
c Var 'aux862' direct represents '0' with '3726'
c Var 'aux862' order represents '1' with '3727'
-3726 3727 0
c Var 'aux862' direct represents '1' with '3728'
3726 -3727 3728 0
-3728 3727 0
-3728 -3726 0
c Var 'aux862' direct represents '2' with '-3727'
3726 3728 -3727 0
c Encoding variable: aux863 with domain: int(0..2) (representing constraint ((x_00007_00008=9) + (x_00008_00008=9)))
c Both direct and order encoding.
c Var 'aux863' order represents '0' with '3729'
c Var 'aux863' direct represents '0' with '3729'
c Var 'aux863' order represents '1' with '3730'
-3729 3730 0
c Var 'aux863' direct represents '1' with '3731'
3729 -3730 3731 0
-3731 3730 0
-3731 -3729 0
c Var 'aux863' direct represents '2' with '-3730'
3729 3731 -3730 0
c Encoding variable: aux864 with domain: int(0..2) (representing constraint ((x_00002_00008=9) + (x_00006_00008=9)))
c Both direct and order encoding.
c Var 'aux864' order represents '0' with '3732'
c Var 'aux864' direct represents '0' with '3732'
c Var 'aux864' order represents '1' with '3733'
-3732 3733 0
c Var 'aux864' direct represents '1' with '3734'
3732 -3733 3734 0
-3734 3733 0
-3734 -3732 0
c Var 'aux864' direct represents '2' with '-3733'
3732 3734 -3733 0
c Encoding variable: aux865 with domain: int(0..2) (representing constraint ((x_00009_00008=9) + (x_00004_00008=9)))
c Both direct and order encoding.
c Var 'aux865' order represents '0' with '3735'
c Var 'aux865' direct represents '0' with '3735'
c Var 'aux865' order represents '1' with '3736'
-3735 3736 0
c Var 'aux865' direct represents '1' with '3737'
3735 -3736 3737 0
-3737 3736 0
-3737 -3735 0
c Var 'aux865' direct represents '2' with '-3736'
3735 3737 -3736 0
c Encoding variable: aux866 with domain: int(0..3) (representing constraint ((x_00001_00008=9) + aux865))
c Both direct and order encoding.
c Var 'aux866' order represents '0' with '3738'
c Var 'aux866' direct represents '0' with '3738'
c Var 'aux866' order represents '1' with '3739'
-3738 3739 0
c Var 'aux866' direct represents '1' with '3740'
3738 -3739 3740 0
-3740 3739 0
-3740 -3738 0
c Var 'aux866' order represents '2' with '3741'
-3739 3741 0
c Var 'aux866' direct represents '2' with '3742'
3739 -3741 3742 0
-3742 3741 0
-3742 -3739 0
c Var 'aux866' direct represents '3' with '-3741'
3738 3740 3742 -3741 0
c Encoding variable: aux867 with domain: int(0..4) (representing constraint (aux862 + aux864))
c Both direct and order encoding.
c Var 'aux867' order represents '0' with '3743'
c Var 'aux867' direct represents '0' with '3743'
c Var 'aux867' order represents '1' with '3744'
-3743 3744 0
c Var 'aux867' direct represents '1' with '3745'
3743 -3744 3745 0
-3745 3744 0
-3745 -3743 0
c Var 'aux867' order represents '2' with '3746'
-3744 3746 0
c Var 'aux867' direct represents '2' with '3747'
3744 -3746 3747 0
-3747 3746 0
-3747 -3744 0
c Var 'aux867' order represents '3' with '3748'
-3746 3748 0
c Var 'aux867' direct represents '3' with '3749'
3746 -3748 3749 0
-3749 3748 0
-3749 -3746 0
c Var 'aux867' direct represents '4' with '-3748'
3743 3745 3747 3749 -3748 0
c Encoding variable: aux868 with domain: int(0..2) (representing constraint ((x_00003_00009=1) + (x_00005_00009=1)))
c Both direct and order encoding.
c Var 'aux868' order represents '0' with '3750'
c Var 'aux868' direct represents '0' with '3750'
c Var 'aux868' order represents '1' with '3751'
-3750 3751 0
c Var 'aux868' direct represents '1' with '3752'
3750 -3751 3752 0
-3752 3751 0
-3752 -3750 0
c Var 'aux868' direct represents '2' with '-3751'
3750 3752 -3751 0
c Encoding variable: aux869 with domain: int(0..2) (representing constraint ((x_00007_00009=1) + (x_00008_00009=1)))
c Both direct and order encoding.
c Var 'aux869' order represents '0' with '3753'
c Var 'aux869' direct represents '0' with '3753'
c Var 'aux869' order represents '1' with '3754'
-3753 3754 0
c Var 'aux869' direct represents '1' with '3755'
3753 -3754 3755 0
-3755 3754 0
-3755 -3753 0
c Var 'aux869' direct represents '2' with '-3754'
3753 3755 -3754 0
c Encoding variable: aux870 with domain: int(0..2) (representing constraint ((x_00002_00009=1) + (x_00006_00009=1)))
c Both direct and order encoding.
c Var 'aux870' order represents '0' with '3756'
c Var 'aux870' direct represents '0' with '3756'
c Var 'aux870' order represents '1' with '3757'
-3756 3757 0
c Var 'aux870' direct represents '1' with '3758'
3756 -3757 3758 0
-3758 3757 0
-3758 -3756 0
c Var 'aux870' direct represents '2' with '-3757'
3756 3758 -3757 0
c Encoding variable: aux871 with domain: int(0..2) (representing constraint ((x_00009_00009=1) + (x_00004_00009=1)))
c Both direct and order encoding.
c Var 'aux871' order represents '0' with '3759'
c Var 'aux871' direct represents '0' with '3759'
c Var 'aux871' order represents '1' with '3760'
-3759 3760 0
c Var 'aux871' direct represents '1' with '3761'
3759 -3760 3761 0
-3761 3760 0
-3761 -3759 0
c Var 'aux871' direct represents '2' with '-3760'
3759 3761 -3760 0
c Encoding variable: aux872 with domain: int(0..3) (representing constraint ((x_00001_00009=1) + aux871))
c Both direct and order encoding.
c Var 'aux872' order represents '0' with '3762'
c Var 'aux872' direct represents '0' with '3762'
c Var 'aux872' order represents '1' with '3763'
-3762 3763 0
c Var 'aux872' direct represents '1' with '3764'
3762 -3763 3764 0
-3764 3763 0
-3764 -3762 0
c Var 'aux872' order represents '2' with '3765'
-3763 3765 0
c Var 'aux872' direct represents '2' with '3766'
3763 -3765 3766 0
-3766 3765 0
-3766 -3763 0
c Var 'aux872' direct represents '3' with '-3765'
3762 3764 3766 -3765 0
c Encoding variable: aux873 with domain: int(0..4) (representing constraint (aux868 + aux870))
c Both direct and order encoding.
c Var 'aux873' order represents '0' with '3767'
c Var 'aux873' direct represents '0' with '3767'
c Var 'aux873' order represents '1' with '3768'
-3767 3768 0
c Var 'aux873' direct represents '1' with '3769'
3767 -3768 3769 0
-3769 3768 0
-3769 -3767 0
c Var 'aux873' order represents '2' with '3770'
-3768 3770 0
c Var 'aux873' direct represents '2' with '3771'
3768 -3770 3771 0
-3771 3770 0
-3771 -3768 0
c Var 'aux873' order represents '3' with '3772'
-3770 3772 0
c Var 'aux873' direct represents '3' with '3773'
3770 -3772 3773 0
-3773 3772 0
-3773 -3770 0
c Var 'aux873' direct represents '4' with '-3772'
3767 3769 3771 3773 -3772 0
c Encoding variable: aux874 with domain: int(0..2) (representing constraint ((x_00003_00009=2) + (x_00005_00009=2)))
c Both direct and order encoding.
c Var 'aux874' order represents '0' with '3774'
c Var 'aux874' direct represents '0' with '3774'
c Var 'aux874' order represents '1' with '3775'
-3774 3775 0
c Var 'aux874' direct represents '1' with '3776'
3774 -3775 3776 0
-3776 3775 0
-3776 -3774 0
c Var 'aux874' direct represents '2' with '-3775'
3774 3776 -3775 0
c Encoding variable: aux875 with domain: int(0..2) (representing constraint ((x_00007_00009=2) + (x_00008_00009=2)))
c Both direct and order encoding.
c Var 'aux875' order represents '0' with '3777'
c Var 'aux875' direct represents '0' with '3777'
c Var 'aux875' order represents '1' with '3778'
-3777 3778 0
c Var 'aux875' direct represents '1' with '3779'
3777 -3778 3779 0
-3779 3778 0
-3779 -3777 0
c Var 'aux875' direct represents '2' with '-3778'
3777 3779 -3778 0
c Encoding variable: aux876 with domain: int(0..2) (representing constraint ((x_00002_00009=2) + (x_00006_00009=2)))
c Both direct and order encoding.
c Var 'aux876' order represents '0' with '3780'
c Var 'aux876' direct represents '0' with '3780'
c Var 'aux876' order represents '1' with '3781'
-3780 3781 0
c Var 'aux876' direct represents '1' with '3782'
3780 -3781 3782 0
-3782 3781 0
-3782 -3780 0
c Var 'aux876' direct represents '2' with '-3781'
3780 3782 -3781 0
c Encoding variable: aux877 with domain: int(0..2) (representing constraint ((x_00009_00009=2) + (x_00004_00009=2)))
c Both direct and order encoding.
c Var 'aux877' order represents '0' with '3783'
c Var 'aux877' direct represents '0' with '3783'
c Var 'aux877' order represents '1' with '3784'
-3783 3784 0
c Var 'aux877' direct represents '1' with '3785'
3783 -3784 3785 0
-3785 3784 0
-3785 -3783 0
c Var 'aux877' direct represents '2' with '-3784'
3783 3785 -3784 0
c Encoding variable: aux878 with domain: int(0..3) (representing constraint ((x_00001_00009=2) + aux877))
c Both direct and order encoding.
c Var 'aux878' order represents '0' with '3786'
c Var 'aux878' direct represents '0' with '3786'
c Var 'aux878' order represents '1' with '3787'
-3786 3787 0
c Var 'aux878' direct represents '1' with '3788'
3786 -3787 3788 0
-3788 3787 0
-3788 -3786 0
c Var 'aux878' order represents '2' with '3789'
-3787 3789 0
c Var 'aux878' direct represents '2' with '3790'
3787 -3789 3790 0
-3790 3789 0
-3790 -3787 0
c Var 'aux878' direct represents '3' with '-3789'
3786 3788 3790 -3789 0
c Encoding variable: aux879 with domain: int(0..4) (representing constraint (aux874 + aux876))
c Both direct and order encoding.
c Var 'aux879' order represents '0' with '3791'
c Var 'aux879' direct represents '0' with '3791'
c Var 'aux879' order represents '1' with '3792'
-3791 3792 0
c Var 'aux879' direct represents '1' with '3793'
3791 -3792 3793 0
-3793 3792 0
-3793 -3791 0
c Var 'aux879' order represents '2' with '3794'
-3792 3794 0
c Var 'aux879' direct represents '2' with '3795'
3792 -3794 3795 0
-3795 3794 0
-3795 -3792 0
c Var 'aux879' order represents '3' with '3796'
-3794 3796 0
c Var 'aux879' direct represents '3' with '3797'
3794 -3796 3797 0
-3797 3796 0
-3797 -3794 0
c Var 'aux879' direct represents '4' with '-3796'
3791 3793 3795 3797 -3796 0
c Encoding variable: aux880 with domain: int(0..2) (representing constraint ((x_00003_00009=3) + (x_00005_00009=3)))
c Both direct and order encoding.
c Var 'aux880' order represents '0' with '3798'
c Var 'aux880' direct represents '0' with '3798'
c Var 'aux880' order represents '1' with '3799'
-3798 3799 0
c Var 'aux880' direct represents '1' with '3800'
3798 -3799 3800 0
-3800 3799 0
-3800 -3798 0
c Var 'aux880' direct represents '2' with '-3799'
3798 3800 -3799 0
c Encoding variable: aux881 with domain: int(0..2) (representing constraint ((x_00007_00009=3) + (x_00008_00009=3)))
c Both direct and order encoding.
c Var 'aux881' order represents '0' with '3801'
c Var 'aux881' direct represents '0' with '3801'
c Var 'aux881' order represents '1' with '3802'
-3801 3802 0
c Var 'aux881' direct represents '1' with '3803'
3801 -3802 3803 0
-3803 3802 0
-3803 -3801 0
c Var 'aux881' direct represents '2' with '-3802'
3801 3803 -3802 0
c Encoding variable: aux882 with domain: int(0..2) (representing constraint ((x_00002_00009=3) + (x_00006_00009=3)))
c Both direct and order encoding.
c Var 'aux882' order represents '0' with '3804'
c Var 'aux882' direct represents '0' with '3804'
c Var 'aux882' order represents '1' with '3805'
-3804 3805 0
c Var 'aux882' direct represents '1' with '3806'
3804 -3805 3806 0
-3806 3805 0
-3806 -3804 0
c Var 'aux882' direct represents '2' with '-3805'
3804 3806 -3805 0
c Encoding variable: aux883 with domain: int(0..2) (representing constraint ((x_00009_00009=3) + (x_00004_00009=3)))
c Both direct and order encoding.
c Var 'aux883' order represents '0' with '3807'
c Var 'aux883' direct represents '0' with '3807'
c Var 'aux883' order represents '1' with '3808'
-3807 3808 0
c Var 'aux883' direct represents '1' with '3809'
3807 -3808 3809 0
-3809 3808 0
-3809 -3807 0
c Var 'aux883' direct represents '2' with '-3808'
3807 3809 -3808 0
c Encoding variable: aux884 with domain: int(0..3) (representing constraint ((x_00001_00009=3) + aux883))
c Both direct and order encoding.
c Var 'aux884' order represents '0' with '3810'
c Var 'aux884' direct represents '0' with '3810'
c Var 'aux884' order represents '1' with '3811'
-3810 3811 0
c Var 'aux884' direct represents '1' with '3812'
3810 -3811 3812 0
-3812 3811 0
-3812 -3810 0
c Var 'aux884' order represents '2' with '3813'
-3811 3813 0
c Var 'aux884' direct represents '2' with '3814'
3811 -3813 3814 0
-3814 3813 0
-3814 -3811 0
c Var 'aux884' direct represents '3' with '-3813'
3810 3812 3814 -3813 0
c Encoding variable: aux885 with domain: int(0..4) (representing constraint (aux880 + aux882))
c Both direct and order encoding.
c Var 'aux885' order represents '0' with '3815'
c Var 'aux885' direct represents '0' with '3815'
c Var 'aux885' order represents '1' with '3816'
-3815 3816 0
c Var 'aux885' direct represents '1' with '3817'
3815 -3816 3817 0
-3817 3816 0
-3817 -3815 0
c Var 'aux885' order represents '2' with '3818'
-3816 3818 0
c Var 'aux885' direct represents '2' with '3819'
3816 -3818 3819 0
-3819 3818 0
-3819 -3816 0
c Var 'aux885' order represents '3' with '3820'
-3818 3820 0
c Var 'aux885' direct represents '3' with '3821'
3818 -3820 3821 0
-3821 3820 0
-3821 -3818 0
c Var 'aux885' direct represents '4' with '-3820'
3815 3817 3819 3821 -3820 0
c Encoding variable: aux886 with domain: int(0..2) (representing constraint ((x_00003_00009=4) + (x_00005_00009=4)))
c Both direct and order encoding.
c Var 'aux886' order represents '0' with '3822'
c Var 'aux886' direct represents '0' with '3822'
c Var 'aux886' order represents '1' with '3823'
-3822 3823 0
c Var 'aux886' direct represents '1' with '3824'
3822 -3823 3824 0
-3824 3823 0
-3824 -3822 0
c Var 'aux886' direct represents '2' with '-3823'
3822 3824 -3823 0
c Encoding variable: aux887 with domain: int(0..2) (representing constraint ((x_00007_00009=4) + (x_00008_00009=4)))
c Both direct and order encoding.
c Var 'aux887' order represents '0' with '3825'
c Var 'aux887' direct represents '0' with '3825'
c Var 'aux887' order represents '1' with '3826'
-3825 3826 0
c Var 'aux887' direct represents '1' with '3827'
3825 -3826 3827 0
-3827 3826 0
-3827 -3825 0
c Var 'aux887' direct represents '2' with '-3826'
3825 3827 -3826 0
c Encoding variable: aux888 with domain: int(0..2) (representing constraint ((x_00002_00009=4) + (x_00006_00009=4)))
c Both direct and order encoding.
c Var 'aux888' order represents '0' with '3828'
c Var 'aux888' direct represents '0' with '3828'
c Var 'aux888' order represents '1' with '3829'
-3828 3829 0
c Var 'aux888' direct represents '1' with '3830'
3828 -3829 3830 0
-3830 3829 0
-3830 -3828 0
c Var 'aux888' direct represents '2' with '-3829'
3828 3830 -3829 0
c Encoding variable: aux889 with domain: int(0..2) (representing constraint ((x_00009_00009=4) + (x_00004_00009=4)))
c Both direct and order encoding.
c Var 'aux889' order represents '0' with '3831'
c Var 'aux889' direct represents '0' with '3831'
c Var 'aux889' order represents '1' with '3832'
-3831 3832 0
c Var 'aux889' direct represents '1' with '3833'
3831 -3832 3833 0
-3833 3832 0
-3833 -3831 0
c Var 'aux889' direct represents '2' with '-3832'
3831 3833 -3832 0
c Encoding variable: aux890 with domain: int(0..3) (representing constraint ((x_00001_00009=4) + aux889))
c Both direct and order encoding.
c Var 'aux890' order represents '0' with '3834'
c Var 'aux890' direct represents '0' with '3834'
c Var 'aux890' order represents '1' with '3835'
-3834 3835 0
c Var 'aux890' direct represents '1' with '3836'
3834 -3835 3836 0
-3836 3835 0
-3836 -3834 0
c Var 'aux890' order represents '2' with '3837'
-3835 3837 0
c Var 'aux890' direct represents '2' with '3838'
3835 -3837 3838 0
-3838 3837 0
-3838 -3835 0
c Var 'aux890' direct represents '3' with '-3837'
3834 3836 3838 -3837 0
c Encoding variable: aux891 with domain: int(0..4) (representing constraint (aux886 + aux888))
c Both direct and order encoding.
c Var 'aux891' order represents '0' with '3839'
c Var 'aux891' direct represents '0' with '3839'
c Var 'aux891' order represents '1' with '3840'
-3839 3840 0
c Var 'aux891' direct represents '1' with '3841'
3839 -3840 3841 0
-3841 3840 0
-3841 -3839 0
c Var 'aux891' order represents '2' with '3842'
-3840 3842 0
c Var 'aux891' direct represents '2' with '3843'
3840 -3842 3843 0
-3843 3842 0
-3843 -3840 0
c Var 'aux891' order represents '3' with '3844'
-3842 3844 0
c Var 'aux891' direct represents '3' with '3845'
3842 -3844 3845 0
-3845 3844 0
-3845 -3842 0
c Var 'aux891' direct represents '4' with '-3844'
3839 3841 3843 3845 -3844 0
c Encoding variable: aux892 with domain: int(0..2) (representing constraint ((x_00003_00009=5) + (x_00005_00009=5)))
c Both direct and order encoding.
c Var 'aux892' order represents '0' with '3846'
c Var 'aux892' direct represents '0' with '3846'
c Var 'aux892' order represents '1' with '3847'
-3846 3847 0
c Var 'aux892' direct represents '1' with '3848'
3846 -3847 3848 0
-3848 3847 0
-3848 -3846 0
c Var 'aux892' direct represents '2' with '-3847'
3846 3848 -3847 0
c Encoding variable: aux893 with domain: int(0..2) (representing constraint ((x_00007_00009=5) + (x_00008_00009=5)))
c Both direct and order encoding.
c Var 'aux893' order represents '0' with '3849'
c Var 'aux893' direct represents '0' with '3849'
c Var 'aux893' order represents '1' with '3850'
-3849 3850 0
c Var 'aux893' direct represents '1' with '3851'
3849 -3850 3851 0
-3851 3850 0
-3851 -3849 0
c Var 'aux893' direct represents '2' with '-3850'
3849 3851 -3850 0
c Encoding variable: aux894 with domain: int(0..2) (representing constraint ((x_00002_00009=5) + (x_00006_00009=5)))
c Both direct and order encoding.
c Var 'aux894' order represents '0' with '3852'
c Var 'aux894' direct represents '0' with '3852'
c Var 'aux894' order represents '1' with '3853'
-3852 3853 0
c Var 'aux894' direct represents '1' with '3854'
3852 -3853 3854 0
-3854 3853 0
-3854 -3852 0
c Var 'aux894' direct represents '2' with '-3853'
3852 3854 -3853 0
c Encoding variable: aux895 with domain: int(0..2) (representing constraint ((x_00009_00009=5) + (x_00004_00009=5)))
c Both direct and order encoding.
c Var 'aux895' order represents '0' with '3855'
c Var 'aux895' direct represents '0' with '3855'
c Var 'aux895' order represents '1' with '3856'
-3855 3856 0
c Var 'aux895' direct represents '1' with '3857'
3855 -3856 3857 0
-3857 3856 0
-3857 -3855 0
c Var 'aux895' direct represents '2' with '-3856'
3855 3857 -3856 0
c Encoding variable: aux896 with domain: int(0..3) (representing constraint ((x_00001_00009=5) + aux895))
c Both direct and order encoding.
c Var 'aux896' order represents '0' with '3858'
c Var 'aux896' direct represents '0' with '3858'
c Var 'aux896' order represents '1' with '3859'
-3858 3859 0
c Var 'aux896' direct represents '1' with '3860'
3858 -3859 3860 0
-3860 3859 0
-3860 -3858 0
c Var 'aux896' order represents '2' with '3861'
-3859 3861 0
c Var 'aux896' direct represents '2' with '3862'
3859 -3861 3862 0
-3862 3861 0
-3862 -3859 0
c Var 'aux896' direct represents '3' with '-3861'
3858 3860 3862 -3861 0
c Encoding variable: aux897 with domain: int(0..4) (representing constraint (aux892 + aux894))
c Both direct and order encoding.
c Var 'aux897' order represents '0' with '3863'
c Var 'aux897' direct represents '0' with '3863'
c Var 'aux897' order represents '1' with '3864'
-3863 3864 0
c Var 'aux897' direct represents '1' with '3865'
3863 -3864 3865 0
-3865 3864 0
-3865 -3863 0
c Var 'aux897' order represents '2' with '3866'
-3864 3866 0
c Var 'aux897' direct represents '2' with '3867'
3864 -3866 3867 0
-3867 3866 0
-3867 -3864 0
c Var 'aux897' order represents '3' with '3868'
-3866 3868 0
c Var 'aux897' direct represents '3' with '3869'
3866 -3868 3869 0
-3869 3868 0
-3869 -3866 0
c Var 'aux897' direct represents '4' with '-3868'
3863 3865 3867 3869 -3868 0
c Encoding variable: aux898 with domain: int(0..2) (representing constraint ((x_00003_00009=6) + (x_00005_00009=6)))
c Both direct and order encoding.
c Var 'aux898' order represents '0' with '3870'
c Var 'aux898' direct represents '0' with '3870'
c Var 'aux898' order represents '1' with '3871'
-3870 3871 0
c Var 'aux898' direct represents '1' with '3872'
3870 -3871 3872 0
-3872 3871 0
-3872 -3870 0
c Var 'aux898' direct represents '2' with '-3871'
3870 3872 -3871 0
c Encoding variable: aux899 with domain: int(0..2) (representing constraint ((x_00007_00009=6) + (x_00008_00009=6)))
c Both direct and order encoding.
c Var 'aux899' order represents '0' with '3873'
c Var 'aux899' direct represents '0' with '3873'
c Var 'aux899' order represents '1' with '3874'
-3873 3874 0
c Var 'aux899' direct represents '1' with '3875'
3873 -3874 3875 0
-3875 3874 0
-3875 -3873 0
c Var 'aux899' direct represents '2' with '-3874'
3873 3875 -3874 0
c Encoding variable: aux900 with domain: int(0..2) (representing constraint ((x_00002_00009=6) + (x_00006_00009=6)))
c Both direct and order encoding.
c Var 'aux900' order represents '0' with '3876'
c Var 'aux900' direct represents '0' with '3876'
c Var 'aux900' order represents '1' with '3877'
-3876 3877 0
c Var 'aux900' direct represents '1' with '3878'
3876 -3877 3878 0
-3878 3877 0
-3878 -3876 0
c Var 'aux900' direct represents '2' with '-3877'
3876 3878 -3877 0
c Encoding variable: aux901 with domain: int(0..2) (representing constraint ((x_00009_00009=6) + (x_00004_00009=6)))
c Both direct and order encoding.
c Var 'aux901' order represents '0' with '3879'
c Var 'aux901' direct represents '0' with '3879'
c Var 'aux901' order represents '1' with '3880'
-3879 3880 0
c Var 'aux901' direct represents '1' with '3881'
3879 -3880 3881 0
-3881 3880 0
-3881 -3879 0
c Var 'aux901' direct represents '2' with '-3880'
3879 3881 -3880 0
c Encoding variable: aux902 with domain: int(0..3) (representing constraint ((x_00001_00009=6) + aux901))
c Both direct and order encoding.
c Var 'aux902' order represents '0' with '3882'
c Var 'aux902' direct represents '0' with '3882'
c Var 'aux902' order represents '1' with '3883'
-3882 3883 0
c Var 'aux902' direct represents '1' with '3884'
3882 -3883 3884 0
-3884 3883 0
-3884 -3882 0
c Var 'aux902' order represents '2' with '3885'
-3883 3885 0
c Var 'aux902' direct represents '2' with '3886'
3883 -3885 3886 0
-3886 3885 0
-3886 -3883 0
c Var 'aux902' direct represents '3' with '-3885'
3882 3884 3886 -3885 0
c Encoding variable: aux903 with domain: int(0..4) (representing constraint (aux898 + aux900))
c Both direct and order encoding.
c Var 'aux903' order represents '0' with '3887'
c Var 'aux903' direct represents '0' with '3887'
c Var 'aux903' order represents '1' with '3888'
-3887 3888 0
c Var 'aux903' direct represents '1' with '3889'
3887 -3888 3889 0
-3889 3888 0
-3889 -3887 0
c Var 'aux903' order represents '2' with '3890'
-3888 3890 0
c Var 'aux903' direct represents '2' with '3891'
3888 -3890 3891 0
-3891 3890 0
-3891 -3888 0
c Var 'aux903' order represents '3' with '3892'
-3890 3892 0
c Var 'aux903' direct represents '3' with '3893'
3890 -3892 3893 0
-3893 3892 0
-3893 -3890 0
c Var 'aux903' direct represents '4' with '-3892'
3887 3889 3891 3893 -3892 0
c Encoding variable: aux904 with domain: int(0..2) (representing constraint ((x_00003_00009=7) + (x_00005_00009=7)))
c Both direct and order encoding.
c Var 'aux904' order represents '0' with '3894'
c Var 'aux904' direct represents '0' with '3894'
c Var 'aux904' order represents '1' with '3895'
-3894 3895 0
c Var 'aux904' direct represents '1' with '3896'
3894 -3895 3896 0
-3896 3895 0
-3896 -3894 0
c Var 'aux904' direct represents '2' with '-3895'
3894 3896 -3895 0
c Encoding variable: aux905 with domain: int(0..2) (representing constraint ((x_00007_00009=7) + (x_00008_00009=7)))
c Both direct and order encoding.
c Var 'aux905' order represents '0' with '3897'
c Var 'aux905' direct represents '0' with '3897'
c Var 'aux905' order represents '1' with '3898'
-3897 3898 0
c Var 'aux905' direct represents '1' with '3899'
3897 -3898 3899 0
-3899 3898 0
-3899 -3897 0
c Var 'aux905' direct represents '2' with '-3898'
3897 3899 -3898 0
c Encoding variable: aux906 with domain: int(0..2) (representing constraint ((x_00002_00009=7) + (x_00006_00009=7)))
c Both direct and order encoding.
c Var 'aux906' order represents '0' with '3900'
c Var 'aux906' direct represents '0' with '3900'
c Var 'aux906' order represents '1' with '3901'
-3900 3901 0
c Var 'aux906' direct represents '1' with '3902'
3900 -3901 3902 0
-3902 3901 0
-3902 -3900 0
c Var 'aux906' direct represents '2' with '-3901'
3900 3902 -3901 0
c Encoding variable: aux907 with domain: int(0..2) (representing constraint ((x_00009_00009=7) + (x_00004_00009=7)))
c Both direct and order encoding.
c Var 'aux907' order represents '0' with '3903'
c Var 'aux907' direct represents '0' with '3903'
c Var 'aux907' order represents '1' with '3904'
-3903 3904 0
c Var 'aux907' direct represents '1' with '3905'
3903 -3904 3905 0
-3905 3904 0
-3905 -3903 0
c Var 'aux907' direct represents '2' with '-3904'
3903 3905 -3904 0
c Encoding variable: aux908 with domain: int(0..3) (representing constraint ((x_00001_00009=7) + aux907))
c Both direct and order encoding.
c Var 'aux908' order represents '0' with '3906'
c Var 'aux908' direct represents '0' with '3906'
c Var 'aux908' order represents '1' with '3907'
-3906 3907 0
c Var 'aux908' direct represents '1' with '3908'
3906 -3907 3908 0
-3908 3907 0
-3908 -3906 0
c Var 'aux908' order represents '2' with '3909'
-3907 3909 0
c Var 'aux908' direct represents '2' with '3910'
3907 -3909 3910 0
-3910 3909 0
-3910 -3907 0
c Var 'aux908' direct represents '3' with '-3909'
3906 3908 3910 -3909 0
c Encoding variable: aux909 with domain: int(0..4) (representing constraint (aux904 + aux906))
c Both direct and order encoding.
c Var 'aux909' order represents '0' with '3911'
c Var 'aux909' direct represents '0' with '3911'
c Var 'aux909' order represents '1' with '3912'
-3911 3912 0
c Var 'aux909' direct represents '1' with '3913'
3911 -3912 3913 0
-3913 3912 0
-3913 -3911 0
c Var 'aux909' order represents '2' with '3914'
-3912 3914 0
c Var 'aux909' direct represents '2' with '3915'
3912 -3914 3915 0
-3915 3914 0
-3915 -3912 0
c Var 'aux909' order represents '3' with '3916'
-3914 3916 0
c Var 'aux909' direct represents '3' with '3917'
3914 -3916 3917 0
-3917 3916 0
-3917 -3914 0
c Var 'aux909' direct represents '4' with '-3916'
3911 3913 3915 3917 -3916 0
c Encoding variable: aux910 with domain: int(0..2) (representing constraint ((x_00003_00009=8) + (x_00005_00009=8)))
c Both direct and order encoding.
c Var 'aux910' order represents '0' with '3918'
c Var 'aux910' direct represents '0' with '3918'
c Var 'aux910' order represents '1' with '3919'
-3918 3919 0
c Var 'aux910' direct represents '1' with '3920'
3918 -3919 3920 0
-3920 3919 0
-3920 -3918 0
c Var 'aux910' direct represents '2' with '-3919'
3918 3920 -3919 0
c Encoding variable: aux911 with domain: int(0..2) (representing constraint ((x_00007_00009=8) + (x_00008_00009=8)))
c Both direct and order encoding.
c Var 'aux911' order represents '0' with '3921'
c Var 'aux911' direct represents '0' with '3921'
c Var 'aux911' order represents '1' with '3922'
-3921 3922 0
c Var 'aux911' direct represents '1' with '3923'
3921 -3922 3923 0
-3923 3922 0
-3923 -3921 0
c Var 'aux911' direct represents '2' with '-3922'
3921 3923 -3922 0
c Encoding variable: aux912 with domain: int(0..2) (representing constraint ((x_00002_00009=8) + (x_00006_00009=8)))
c Both direct and order encoding.
c Var 'aux912' order represents '0' with '3924'
c Var 'aux912' direct represents '0' with '3924'
c Var 'aux912' order represents '1' with '3925'
-3924 3925 0
c Var 'aux912' direct represents '1' with '3926'
3924 -3925 3926 0
-3926 3925 0
-3926 -3924 0
c Var 'aux912' direct represents '2' with '-3925'
3924 3926 -3925 0
c Encoding variable: aux913 with domain: int(0..2) (representing constraint ((x_00009_00009=8) + (x_00004_00009=8)))
c Both direct and order encoding.
c Var 'aux913' order represents '0' with '3927'
c Var 'aux913' direct represents '0' with '3927'
c Var 'aux913' order represents '1' with '3928'
-3927 3928 0
c Var 'aux913' direct represents '1' with '3929'
3927 -3928 3929 0
-3929 3928 0
-3929 -3927 0
c Var 'aux913' direct represents '2' with '-3928'
3927 3929 -3928 0
c Encoding variable: aux914 with domain: int(0..3) (representing constraint ((x_00001_00009=8) + aux913))
c Both direct and order encoding.
c Var 'aux914' order represents '0' with '3930'
c Var 'aux914' direct represents '0' with '3930'
c Var 'aux914' order represents '1' with '3931'
-3930 3931 0
c Var 'aux914' direct represents '1' with '3932'
3930 -3931 3932 0
-3932 3931 0
-3932 -3930 0
c Var 'aux914' order represents '2' with '3933'
-3931 3933 0
c Var 'aux914' direct represents '2' with '3934'
3931 -3933 3934 0
-3934 3933 0
-3934 -3931 0
c Var 'aux914' direct represents '3' with '-3933'
3930 3932 3934 -3933 0
c Encoding variable: aux915 with domain: int(0..4) (representing constraint (aux910 + aux912))
c Both direct and order encoding.
c Var 'aux915' order represents '0' with '3935'
c Var 'aux915' direct represents '0' with '3935'
c Var 'aux915' order represents '1' with '3936'
-3935 3936 0
c Var 'aux915' direct represents '1' with '3937'
3935 -3936 3937 0
-3937 3936 0
-3937 -3935 0
c Var 'aux915' order represents '2' with '3938'
-3936 3938 0
c Var 'aux915' direct represents '2' with '3939'
3936 -3938 3939 0
-3939 3938 0
-3939 -3936 0
c Var 'aux915' order represents '3' with '3940'
-3938 3940 0
c Var 'aux915' direct represents '3' with '3941'
3938 -3940 3941 0
-3941 3940 0
-3941 -3938 0
c Var 'aux915' direct represents '4' with '-3940'
3935 3937 3939 3941 -3940 0
c Encoding variable: aux916 with domain: int(0..2) (representing constraint ((x_00003_00009=9) + (x_00005_00009=9)))
c Both direct and order encoding.
c Var 'aux916' order represents '0' with '3942'
c Var 'aux916' direct represents '0' with '3942'
c Var 'aux916' order represents '1' with '3943'
-3942 3943 0
c Var 'aux916' direct represents '1' with '3944'
3942 -3943 3944 0
-3944 3943 0
-3944 -3942 0
c Var 'aux916' direct represents '2' with '-3943'
3942 3944 -3943 0
c Encoding variable: aux917 with domain: int(0..2) (representing constraint ((x_00007_00009=9) + (x_00008_00009=9)))
c Both direct and order encoding.
c Var 'aux917' order represents '0' with '3945'
c Var 'aux917' direct represents '0' with '3945'
c Var 'aux917' order represents '1' with '3946'
-3945 3946 0
c Var 'aux917' direct represents '1' with '3947'
3945 -3946 3947 0
-3947 3946 0
-3947 -3945 0
c Var 'aux917' direct represents '2' with '-3946'
3945 3947 -3946 0
c Encoding variable: aux918 with domain: int(0..2) (representing constraint ((x_00002_00009=9) + (x_00006_00009=9)))
c Both direct and order encoding.
c Var 'aux918' order represents '0' with '3948'
c Var 'aux918' direct represents '0' with '3948'
c Var 'aux918' order represents '1' with '3949'
-3948 3949 0
c Var 'aux918' direct represents '1' with '3950'
3948 -3949 3950 0
-3950 3949 0
-3950 -3948 0
c Var 'aux918' direct represents '2' with '-3949'
3948 3950 -3949 0
c Encoding variable: aux919 with domain: int(0..2) (representing constraint ((x_00009_00009=9) + (x_00004_00009=9)))
c Both direct and order encoding.
c Var 'aux919' order represents '0' with '3951'
c Var 'aux919' direct represents '0' with '3951'
c Var 'aux919' order represents '1' with '3952'
-3951 3952 0
c Var 'aux919' direct represents '1' with '3953'
3951 -3952 3953 0
-3953 3952 0
-3953 -3951 0
c Var 'aux919' direct represents '2' with '-3952'
3951 3953 -3952 0
c Encoding variable: aux920 with domain: int(0..3) (representing constraint ((x_00001_00009=9) + aux919))
c Both direct and order encoding.
c Var 'aux920' order represents '0' with '3954'
c Var 'aux920' direct represents '0' with '3954'
c Var 'aux920' order represents '1' with '3955'
-3954 3955 0
c Var 'aux920' direct represents '1' with '3956'
3954 -3955 3956 0
-3956 3955 0
-3956 -3954 0
c Var 'aux920' order represents '2' with '3957'
-3955 3957 0
c Var 'aux920' direct represents '2' with '3958'
3955 -3957 3958 0
-3958 3957 0
-3958 -3955 0
c Var 'aux920' direct represents '3' with '-3957'
3954 3956 3958 -3957 0
c Encoding variable: aux921 with domain: int(0..4) (representing constraint (aux916 + aux918))
c Both direct and order encoding.
c Var 'aux921' order represents '0' with '3959'
c Var 'aux921' direct represents '0' with '3959'
c Var 'aux921' order represents '1' with '3960'
-3959 3960 0
c Var 'aux921' direct represents '1' with '3961'
3959 -3960 3961 0
-3961 3960 0
-3961 -3959 0
c Var 'aux921' order represents '2' with '3962'
-3960 3962 0
c Var 'aux921' direct represents '2' with '3963'
3960 -3962 3963 0
-3963 3962 0
-3963 -3960 0
c Var 'aux921' order represents '3' with '3964'
-3962 3964 0
c Var 'aux921' direct represents '3' with '3965'
3962 -3964 3965 0
-3965 3964 0
-3965 -3962 0
c Var 'aux921' direct represents '4' with '-3964'
3959 3961 3963 3965 -3964 0
c Encoding variable: aux922 with domain: int(0..2) (representing constraint ((x_00001_00001=1) + (x_00001_00009=1)))
c Both direct and order encoding.
c Var 'aux922' order represents '0' with '3966'
c Var 'aux922' direct represents '0' with '3966'
c Var 'aux922' order represents '1' with '3967'
-3966 3967 0
c Var 'aux922' direct represents '1' with '3968'
3966 -3967 3968 0
-3968 3967 0
-3968 -3966 0
c Var 'aux922' direct represents '2' with '-3967'
3966 3968 -3967 0
c Encoding variable: aux923 with domain: int(0..2) (representing constraint ((x_00001_00008=1) + (x_00001_00002=1)))
c Both direct and order encoding.
c Var 'aux923' order represents '0' with '3969'
c Var 'aux923' direct represents '0' with '3969'
c Var 'aux923' order represents '1' with '3970'
-3969 3970 0
c Var 'aux923' direct represents '1' with '3971'
3969 -3970 3971 0
-3971 3970 0
-3971 -3969 0
c Var 'aux923' direct represents '2' with '-3970'
3969 3971 -3970 0
c Encoding variable: aux924 with domain: int(0..2) (representing constraint ((x_00001_00007=1) + (x_00001_00004=1)))
c Both direct and order encoding.
c Var 'aux924' order represents '0' with '3972'
c Var 'aux924' direct represents '0' with '3972'
c Var 'aux924' order represents '1' with '3973'
-3972 3973 0
c Var 'aux924' direct represents '1' with '3974'
3972 -3973 3974 0
-3974 3973 0
-3974 -3972 0
c Var 'aux924' direct represents '2' with '-3973'
3972 3974 -3973 0
c Encoding variable: aux925 with domain: int(0..2) (representing constraint ((x_00001_00006=1) + (x_00001_00005=1)))
c Both direct and order encoding.
c Var 'aux925' order represents '0' with '3975'
c Var 'aux925' direct represents '0' with '3975'
c Var 'aux925' order represents '1' with '3976'
-3975 3976 0
c Var 'aux925' direct represents '1' with '3977'
3975 -3976 3977 0
-3977 3976 0
-3977 -3975 0
c Var 'aux925' direct represents '2' with '-3976'
3975 3977 -3976 0
c Encoding variable: aux926 with domain: int(0..3) (representing constraint ((x_00001_00003=1) + aux925))
c Both direct and order encoding.
c Var 'aux926' order represents '0' with '3978'
c Var 'aux926' direct represents '0' with '3978'
c Var 'aux926' order represents '1' with '3979'
-3978 3979 0
c Var 'aux926' direct represents '1' with '3980'
3978 -3979 3980 0
-3980 3979 0
-3980 -3978 0
c Var 'aux926' order represents '2' with '3981'
-3979 3981 0
c Var 'aux926' direct represents '2' with '3982'
3979 -3981 3982 0
-3982 3981 0
-3982 -3979 0
c Var 'aux926' direct represents '3' with '-3981'
3978 3980 3982 -3981 0
c Encoding variable: aux927 with domain: int(0..4) (representing constraint (aux922 + aux924))
c Both direct and order encoding.
c Var 'aux927' order represents '0' with '3983'
c Var 'aux927' direct represents '0' with '3983'
c Var 'aux927' order represents '1' with '3984'
-3983 3984 0
c Var 'aux927' direct represents '1' with '3985'
3983 -3984 3985 0
-3985 3984 0
-3985 -3983 0
c Var 'aux927' order represents '2' with '3986'
-3984 3986 0
c Var 'aux927' direct represents '2' with '3987'
3984 -3986 3987 0
-3987 3986 0
-3987 -3984 0
c Var 'aux927' order represents '3' with '3988'
-3986 3988 0
c Var 'aux927' direct represents '3' with '3989'
3986 -3988 3989 0
-3989 3988 0
-3989 -3986 0
c Var 'aux927' direct represents '4' with '-3988'
3983 3985 3987 3989 -3988 0
c Encoding variable: aux928 with domain: int(0..2) (representing constraint ((x_00001_00001=2) + (x_00001_00009=2)))
c Both direct and order encoding.
c Var 'aux928' order represents '0' with '3990'
c Var 'aux928' direct represents '0' with '3990'
c Var 'aux928' order represents '1' with '3991'
-3990 3991 0
c Var 'aux928' direct represents '1' with '3992'
3990 -3991 3992 0
-3992 3991 0
-3992 -3990 0
c Var 'aux928' direct represents '2' with '-3991'
3990 3992 -3991 0
c Encoding variable: aux929 with domain: int(0..2) (representing constraint ((x_00001_00008=2) + (x_00001_00002=2)))
c Both direct and order encoding.
c Var 'aux929' order represents '0' with '3993'
c Var 'aux929' direct represents '0' with '3993'
c Var 'aux929' order represents '1' with '3994'
-3993 3994 0
c Var 'aux929' direct represents '1' with '3995'
3993 -3994 3995 0
-3995 3994 0
-3995 -3993 0
c Var 'aux929' direct represents '2' with '-3994'
3993 3995 -3994 0
c Encoding variable: aux930 with domain: int(0..2) (representing constraint ((x_00001_00007=2) + (x_00001_00004=2)))
c Both direct and order encoding.
c Var 'aux930' order represents '0' with '3996'
c Var 'aux930' direct represents '0' with '3996'
c Var 'aux930' order represents '1' with '3997'
-3996 3997 0
c Var 'aux930' direct represents '1' with '3998'
3996 -3997 3998 0
-3998 3997 0
-3998 -3996 0
c Var 'aux930' direct represents '2' with '-3997'
3996 3998 -3997 0
c Encoding variable: aux931 with domain: int(0..2) (representing constraint ((x_00001_00006=2) + (x_00001_00005=2)))
c Both direct and order encoding.
c Var 'aux931' order represents '0' with '3999'
c Var 'aux931' direct represents '0' with '3999'
c Var 'aux931' order represents '1' with '4000'
-3999 4000 0
c Var 'aux931' direct represents '1' with '4001'
3999 -4000 4001 0
-4001 4000 0
-4001 -3999 0
c Var 'aux931' direct represents '2' with '-4000'
3999 4001 -4000 0
c Encoding variable: aux932 with domain: int(0..3) (representing constraint ((x_00001_00003=2) + aux931))
c Both direct and order encoding.
c Var 'aux932' order represents '0' with '4002'
c Var 'aux932' direct represents '0' with '4002'
c Var 'aux932' order represents '1' with '4003'
-4002 4003 0
c Var 'aux932' direct represents '1' with '4004'
4002 -4003 4004 0
-4004 4003 0
-4004 -4002 0
c Var 'aux932' order represents '2' with '4005'
-4003 4005 0
c Var 'aux932' direct represents '2' with '4006'
4003 -4005 4006 0
-4006 4005 0
-4006 -4003 0
c Var 'aux932' direct represents '3' with '-4005'
4002 4004 4006 -4005 0
c Encoding variable: aux933 with domain: int(0..4) (representing constraint (aux928 + aux930))
c Both direct and order encoding.
c Var 'aux933' order represents '0' with '4007'
c Var 'aux933' direct represents '0' with '4007'
c Var 'aux933' order represents '1' with '4008'
-4007 4008 0
c Var 'aux933' direct represents '1' with '4009'
4007 -4008 4009 0
-4009 4008 0
-4009 -4007 0
c Var 'aux933' order represents '2' with '4010'
-4008 4010 0
c Var 'aux933' direct represents '2' with '4011'
4008 -4010 4011 0
-4011 4010 0
-4011 -4008 0
c Var 'aux933' order represents '3' with '4012'
-4010 4012 0
c Var 'aux933' direct represents '3' with '4013'
4010 -4012 4013 0
-4013 4012 0
-4013 -4010 0
c Var 'aux933' direct represents '4' with '-4012'
4007 4009 4011 4013 -4012 0
c Encoding variable: aux934 with domain: int(0..2) (representing constraint ((x_00001_00001=3) + (x_00001_00009=3)))
c Both direct and order encoding.
c Var 'aux934' order represents '0' with '4014'
c Var 'aux934' direct represents '0' with '4014'
c Var 'aux934' order represents '1' with '4015'
-4014 4015 0
c Var 'aux934' direct represents '1' with '4016'
4014 -4015 4016 0
-4016 4015 0
-4016 -4014 0
c Var 'aux934' direct represents '2' with '-4015'
4014 4016 -4015 0
c Encoding variable: aux935 with domain: int(0..2) (representing constraint ((x_00001_00008=3) + (x_00001_00002=3)))
c Both direct and order encoding.
c Var 'aux935' order represents '0' with '4017'
c Var 'aux935' direct represents '0' with '4017'
c Var 'aux935' order represents '1' with '4018'
-4017 4018 0
c Var 'aux935' direct represents '1' with '4019'
4017 -4018 4019 0
-4019 4018 0
-4019 -4017 0
c Var 'aux935' direct represents '2' with '-4018'
4017 4019 -4018 0
c Encoding variable: aux936 with domain: int(0..2) (representing constraint ((x_00001_00007=3) + (x_00001_00004=3)))
c Both direct and order encoding.
c Var 'aux936' order represents '0' with '4020'
c Var 'aux936' direct represents '0' with '4020'
c Var 'aux936' order represents '1' with '4021'
-4020 4021 0
c Var 'aux936' direct represents '1' with '4022'
4020 -4021 4022 0
-4022 4021 0
-4022 -4020 0
c Var 'aux936' direct represents '2' with '-4021'
4020 4022 -4021 0
c Encoding variable: aux937 with domain: int(0..2) (representing constraint ((x_00001_00006=3) + (x_00001_00005=3)))
c Both direct and order encoding.
c Var 'aux937' order represents '0' with '4023'
c Var 'aux937' direct represents '0' with '4023'
c Var 'aux937' order represents '1' with '4024'
-4023 4024 0
c Var 'aux937' direct represents '1' with '4025'
4023 -4024 4025 0
-4025 4024 0
-4025 -4023 0
c Var 'aux937' direct represents '2' with '-4024'
4023 4025 -4024 0
c Encoding variable: aux938 with domain: int(0..3) (representing constraint ((x_00001_00003=3) + aux937))
c Both direct and order encoding.
c Var 'aux938' order represents '0' with '4026'
c Var 'aux938' direct represents '0' with '4026'
c Var 'aux938' order represents '1' with '4027'
-4026 4027 0
c Var 'aux938' direct represents '1' with '4028'
4026 -4027 4028 0
-4028 4027 0
-4028 -4026 0
c Var 'aux938' order represents '2' with '4029'
-4027 4029 0
c Var 'aux938' direct represents '2' with '4030'
4027 -4029 4030 0
-4030 4029 0
-4030 -4027 0
c Var 'aux938' direct represents '3' with '-4029'
4026 4028 4030 -4029 0
c Encoding variable: aux939 with domain: int(0..4) (representing constraint (aux934 + aux936))
c Both direct and order encoding.
c Var 'aux939' order represents '0' with '4031'
c Var 'aux939' direct represents '0' with '4031'
c Var 'aux939' order represents '1' with '4032'
-4031 4032 0
c Var 'aux939' direct represents '1' with '4033'
4031 -4032 4033 0
-4033 4032 0
-4033 -4031 0
c Var 'aux939' order represents '2' with '4034'
-4032 4034 0
c Var 'aux939' direct represents '2' with '4035'
4032 -4034 4035 0
-4035 4034 0
-4035 -4032 0
c Var 'aux939' order represents '3' with '4036'
-4034 4036 0
c Var 'aux939' direct represents '3' with '4037'
4034 -4036 4037 0
-4037 4036 0
-4037 -4034 0
c Var 'aux939' direct represents '4' with '-4036'
4031 4033 4035 4037 -4036 0
c Encoding variable: aux940 with domain: int(0..2) (representing constraint ((x_00001_00001=4) + (x_00001_00009=4)))
c Both direct and order encoding.
c Var 'aux940' order represents '0' with '4038'
c Var 'aux940' direct represents '0' with '4038'
c Var 'aux940' order represents '1' with '4039'
-4038 4039 0
c Var 'aux940' direct represents '1' with '4040'
4038 -4039 4040 0
-4040 4039 0
-4040 -4038 0
c Var 'aux940' direct represents '2' with '-4039'
4038 4040 -4039 0
c Encoding variable: aux941 with domain: int(0..2) (representing constraint ((x_00001_00008=4) + (x_00001_00002=4)))
c Both direct and order encoding.
c Var 'aux941' order represents '0' with '4041'
c Var 'aux941' direct represents '0' with '4041'
c Var 'aux941' order represents '1' with '4042'
-4041 4042 0
c Var 'aux941' direct represents '1' with '4043'
4041 -4042 4043 0
-4043 4042 0
-4043 -4041 0
c Var 'aux941' direct represents '2' with '-4042'
4041 4043 -4042 0
c Encoding variable: aux942 with domain: int(0..2) (representing constraint ((x_00001_00007=4) + (x_00001_00004=4)))
c Both direct and order encoding.
c Var 'aux942' order represents '0' with '4044'
c Var 'aux942' direct represents '0' with '4044'
c Var 'aux942' order represents '1' with '4045'
-4044 4045 0
c Var 'aux942' direct represents '1' with '4046'
4044 -4045 4046 0
-4046 4045 0
-4046 -4044 0
c Var 'aux942' direct represents '2' with '-4045'
4044 4046 -4045 0
c Encoding variable: aux943 with domain: int(0..2) (representing constraint ((x_00001_00006=4) + (x_00001_00005=4)))
c Both direct and order encoding.
c Var 'aux943' order represents '0' with '4047'
c Var 'aux943' direct represents '0' with '4047'
c Var 'aux943' order represents '1' with '4048'
-4047 4048 0
c Var 'aux943' direct represents '1' with '4049'
4047 -4048 4049 0
-4049 4048 0
-4049 -4047 0
c Var 'aux943' direct represents '2' with '-4048'
4047 4049 -4048 0
c Encoding variable: aux944 with domain: int(0..3) (representing constraint ((x_00001_00003=4) + aux943))
c Both direct and order encoding.
c Var 'aux944' order represents '0' with '4050'
c Var 'aux944' direct represents '0' with '4050'
c Var 'aux944' order represents '1' with '4051'
-4050 4051 0
c Var 'aux944' direct represents '1' with '4052'
4050 -4051 4052 0
-4052 4051 0
-4052 -4050 0
c Var 'aux944' order represents '2' with '4053'
-4051 4053 0
c Var 'aux944' direct represents '2' with '4054'
4051 -4053 4054 0
-4054 4053 0
-4054 -4051 0
c Var 'aux944' direct represents '3' with '-4053'
4050 4052 4054 -4053 0
c Encoding variable: aux945 with domain: int(0..4) (representing constraint (aux940 + aux942))
c Both direct and order encoding.
c Var 'aux945' order represents '0' with '4055'
c Var 'aux945' direct represents '0' with '4055'
c Var 'aux945' order represents '1' with '4056'
-4055 4056 0
c Var 'aux945' direct represents '1' with '4057'
4055 -4056 4057 0
-4057 4056 0
-4057 -4055 0
c Var 'aux945' order represents '2' with '4058'
-4056 4058 0
c Var 'aux945' direct represents '2' with '4059'
4056 -4058 4059 0
-4059 4058 0
-4059 -4056 0
c Var 'aux945' order represents '3' with '4060'
-4058 4060 0
c Var 'aux945' direct represents '3' with '4061'
4058 -4060 4061 0
-4061 4060 0
-4061 -4058 0
c Var 'aux945' direct represents '4' with '-4060'
4055 4057 4059 4061 -4060 0
c Encoding variable: aux946 with domain: int(0..2) (representing constraint ((x_00001_00001=5) + (x_00001_00009=5)))
c Both direct and order encoding.
c Var 'aux946' order represents '0' with '4062'
c Var 'aux946' direct represents '0' with '4062'
c Var 'aux946' order represents '1' with '4063'
-4062 4063 0
c Var 'aux946' direct represents '1' with '4064'
4062 -4063 4064 0
-4064 4063 0
-4064 -4062 0
c Var 'aux946' direct represents '2' with '-4063'
4062 4064 -4063 0
c Encoding variable: aux947 with domain: int(0..2) (representing constraint ((x_00001_00008=5) + (x_00001_00002=5)))
c Both direct and order encoding.
c Var 'aux947' order represents '0' with '4065'
c Var 'aux947' direct represents '0' with '4065'
c Var 'aux947' order represents '1' with '4066'
-4065 4066 0
c Var 'aux947' direct represents '1' with '4067'
4065 -4066 4067 0
-4067 4066 0
-4067 -4065 0
c Var 'aux947' direct represents '2' with '-4066'
4065 4067 -4066 0
c Encoding variable: aux948 with domain: int(0..2) (representing constraint ((x_00001_00007=5) + (x_00001_00004=5)))
c Both direct and order encoding.
c Var 'aux948' order represents '0' with '4068'
c Var 'aux948' direct represents '0' with '4068'
c Var 'aux948' order represents '1' with '4069'
-4068 4069 0
c Var 'aux948' direct represents '1' with '4070'
4068 -4069 4070 0
-4070 4069 0
-4070 -4068 0
c Var 'aux948' direct represents '2' with '-4069'
4068 4070 -4069 0
c Encoding variable: aux949 with domain: int(0..2) (representing constraint ((x_00001_00006=5) + (x_00001_00005=5)))
c Both direct and order encoding.
c Var 'aux949' order represents '0' with '4071'
c Var 'aux949' direct represents '0' with '4071'
c Var 'aux949' order represents '1' with '4072'
-4071 4072 0
c Var 'aux949' direct represents '1' with '4073'
4071 -4072 4073 0
-4073 4072 0
-4073 -4071 0
c Var 'aux949' direct represents '2' with '-4072'
4071 4073 -4072 0
c Encoding variable: aux950 with domain: int(0..3) (representing constraint ((x_00001_00003=5) + aux949))
c Both direct and order encoding.
c Var 'aux950' order represents '0' with '4074'
c Var 'aux950' direct represents '0' with '4074'
c Var 'aux950' order represents '1' with '4075'
-4074 4075 0
c Var 'aux950' direct represents '1' with '4076'
4074 -4075 4076 0
-4076 4075 0
-4076 -4074 0
c Var 'aux950' order represents '2' with '4077'
-4075 4077 0
c Var 'aux950' direct represents '2' with '4078'
4075 -4077 4078 0
-4078 4077 0
-4078 -4075 0
c Var 'aux950' direct represents '3' with '-4077'
4074 4076 4078 -4077 0
c Encoding variable: aux951 with domain: int(0..4) (representing constraint (aux946 + aux948))
c Both direct and order encoding.
c Var 'aux951' order represents '0' with '4079'
c Var 'aux951' direct represents '0' with '4079'
c Var 'aux951' order represents '1' with '4080'
-4079 4080 0
c Var 'aux951' direct represents '1' with '4081'
4079 -4080 4081 0
-4081 4080 0
-4081 -4079 0
c Var 'aux951' order represents '2' with '4082'
-4080 4082 0
c Var 'aux951' direct represents '2' with '4083'
4080 -4082 4083 0
-4083 4082 0
-4083 -4080 0
c Var 'aux951' order represents '3' with '4084'
-4082 4084 0
c Var 'aux951' direct represents '3' with '4085'
4082 -4084 4085 0
-4085 4084 0
-4085 -4082 0
c Var 'aux951' direct represents '4' with '-4084'
4079 4081 4083 4085 -4084 0
c Encoding variable: aux952 with domain: int(0..2) (representing constraint ((x_00001_00001=6) + (x_00001_00009=6)))
c Both direct and order encoding.
c Var 'aux952' order represents '0' with '4086'
c Var 'aux952' direct represents '0' with '4086'
c Var 'aux952' order represents '1' with '4087'
-4086 4087 0
c Var 'aux952' direct represents '1' with '4088'
4086 -4087 4088 0
-4088 4087 0
-4088 -4086 0
c Var 'aux952' direct represents '2' with '-4087'
4086 4088 -4087 0
c Encoding variable: aux953 with domain: int(0..2) (representing constraint ((x_00001_00008=6) + (x_00001_00002=6)))
c Both direct and order encoding.
c Var 'aux953' order represents '0' with '4089'
c Var 'aux953' direct represents '0' with '4089'
c Var 'aux953' order represents '1' with '4090'
-4089 4090 0
c Var 'aux953' direct represents '1' with '4091'
4089 -4090 4091 0
-4091 4090 0
-4091 -4089 0
c Var 'aux953' direct represents '2' with '-4090'
4089 4091 -4090 0
c Encoding variable: aux954 with domain: int(0..2) (representing constraint ((x_00001_00007=6) + (x_00001_00004=6)))
c Both direct and order encoding.
c Var 'aux954' order represents '0' with '4092'
c Var 'aux954' direct represents '0' with '4092'
c Var 'aux954' order represents '1' with '4093'
-4092 4093 0
c Var 'aux954' direct represents '1' with '4094'
4092 -4093 4094 0
-4094 4093 0
-4094 -4092 0
c Var 'aux954' direct represents '2' with '-4093'
4092 4094 -4093 0
c Encoding variable: aux955 with domain: int(0..2) (representing constraint ((x_00001_00006=6) + (x_00001_00005=6)))
c Both direct and order encoding.
c Var 'aux955' order represents '0' with '4095'
c Var 'aux955' direct represents '0' with '4095'
c Var 'aux955' order represents '1' with '4096'
-4095 4096 0
c Var 'aux955' direct represents '1' with '4097'
4095 -4096 4097 0
-4097 4096 0
-4097 -4095 0
c Var 'aux955' direct represents '2' with '-4096'
4095 4097 -4096 0
c Encoding variable: aux956 with domain: int(0..3) (representing constraint ((x_00001_00003=6) + aux955))
c Both direct and order encoding.
c Var 'aux956' order represents '0' with '4098'
c Var 'aux956' direct represents '0' with '4098'
c Var 'aux956' order represents '1' with '4099'
-4098 4099 0
c Var 'aux956' direct represents '1' with '4100'
4098 -4099 4100 0
-4100 4099 0
-4100 -4098 0
c Var 'aux956' order represents '2' with '4101'
-4099 4101 0
c Var 'aux956' direct represents '2' with '4102'
4099 -4101 4102 0
-4102 4101 0
-4102 -4099 0
c Var 'aux956' direct represents '3' with '-4101'
4098 4100 4102 -4101 0
c Encoding variable: aux957 with domain: int(0..4) (representing constraint (aux952 + aux954))
c Both direct and order encoding.
c Var 'aux957' order represents '0' with '4103'
c Var 'aux957' direct represents '0' with '4103'
c Var 'aux957' order represents '1' with '4104'
-4103 4104 0
c Var 'aux957' direct represents '1' with '4105'
4103 -4104 4105 0
-4105 4104 0
-4105 -4103 0
c Var 'aux957' order represents '2' with '4106'
-4104 4106 0
c Var 'aux957' direct represents '2' with '4107'
4104 -4106 4107 0
-4107 4106 0
-4107 -4104 0
c Var 'aux957' order represents '3' with '4108'
-4106 4108 0
c Var 'aux957' direct represents '3' with '4109'
4106 -4108 4109 0
-4109 4108 0
-4109 -4106 0
c Var 'aux957' direct represents '4' with '-4108'
4103 4105 4107 4109 -4108 0
c Encoding variable: aux958 with domain: int(0..2) (representing constraint ((x_00001_00001=7) + (x_00001_00009=7)))
c Both direct and order encoding.
c Var 'aux958' order represents '0' with '4110'
c Var 'aux958' direct represents '0' with '4110'
c Var 'aux958' order represents '1' with '4111'
-4110 4111 0
c Var 'aux958' direct represents '1' with '4112'
4110 -4111 4112 0
-4112 4111 0
-4112 -4110 0
c Var 'aux958' direct represents '2' with '-4111'
4110 4112 -4111 0
c Encoding variable: aux959 with domain: int(0..2) (representing constraint ((x_00001_00008=7) + (x_00001_00002=7)))
c Both direct and order encoding.
c Var 'aux959' order represents '0' with '4113'
c Var 'aux959' direct represents '0' with '4113'
c Var 'aux959' order represents '1' with '4114'
-4113 4114 0
c Var 'aux959' direct represents '1' with '4115'
4113 -4114 4115 0
-4115 4114 0
-4115 -4113 0
c Var 'aux959' direct represents '2' with '-4114'
4113 4115 -4114 0
c Encoding variable: aux960 with domain: int(0..2) (representing constraint ((x_00001_00007=7) + (x_00001_00004=7)))
c Both direct and order encoding.
c Var 'aux960' order represents '0' with '4116'
c Var 'aux960' direct represents '0' with '4116'
c Var 'aux960' order represents '1' with '4117'
-4116 4117 0
c Var 'aux960' direct represents '1' with '4118'
4116 -4117 4118 0
-4118 4117 0
-4118 -4116 0
c Var 'aux960' direct represents '2' with '-4117'
4116 4118 -4117 0
c Encoding variable: aux961 with domain: int(0..2) (representing constraint ((x_00001_00006=7) + (x_00001_00005=7)))
c Both direct and order encoding.
c Var 'aux961' order represents '0' with '4119'
c Var 'aux961' direct represents '0' with '4119'
c Var 'aux961' order represents '1' with '4120'
-4119 4120 0
c Var 'aux961' direct represents '1' with '4121'
4119 -4120 4121 0
-4121 4120 0
-4121 -4119 0
c Var 'aux961' direct represents '2' with '-4120'
4119 4121 -4120 0
c Encoding variable: aux962 with domain: int(0..3) (representing constraint ((x_00001_00003=7) + aux961))
c Both direct and order encoding.
c Var 'aux962' order represents '0' with '4122'
c Var 'aux962' direct represents '0' with '4122'
c Var 'aux962' order represents '1' with '4123'
-4122 4123 0
c Var 'aux962' direct represents '1' with '4124'
4122 -4123 4124 0
-4124 4123 0
-4124 -4122 0
c Var 'aux962' order represents '2' with '4125'
-4123 4125 0
c Var 'aux962' direct represents '2' with '4126'
4123 -4125 4126 0
-4126 4125 0
-4126 -4123 0
c Var 'aux962' direct represents '3' with '-4125'
4122 4124 4126 -4125 0
c Encoding variable: aux963 with domain: int(0..4) (representing constraint (aux958 + aux960))
c Both direct and order encoding.
c Var 'aux963' order represents '0' with '4127'
c Var 'aux963' direct represents '0' with '4127'
c Var 'aux963' order represents '1' with '4128'
-4127 4128 0
c Var 'aux963' direct represents '1' with '4129'
4127 -4128 4129 0
-4129 4128 0
-4129 -4127 0
c Var 'aux963' order represents '2' with '4130'
-4128 4130 0
c Var 'aux963' direct represents '2' with '4131'
4128 -4130 4131 0
-4131 4130 0
-4131 -4128 0
c Var 'aux963' order represents '3' with '4132'
-4130 4132 0
c Var 'aux963' direct represents '3' with '4133'
4130 -4132 4133 0
-4133 4132 0
-4133 -4130 0
c Var 'aux963' direct represents '4' with '-4132'
4127 4129 4131 4133 -4132 0
c Encoding variable: aux964 with domain: int(0..2) (representing constraint ((x_00001_00001=8) + (x_00001_00009=8)))
c Both direct and order encoding.
c Var 'aux964' order represents '0' with '4134'
c Var 'aux964' direct represents '0' with '4134'
c Var 'aux964' order represents '1' with '4135'
-4134 4135 0
c Var 'aux964' direct represents '1' with '4136'
4134 -4135 4136 0
-4136 4135 0
-4136 -4134 0
c Var 'aux964' direct represents '2' with '-4135'
4134 4136 -4135 0
c Encoding variable: aux965 with domain: int(0..2) (representing constraint ((x_00001_00008=8) + (x_00001_00002=8)))
c Both direct and order encoding.
c Var 'aux965' order represents '0' with '4137'
c Var 'aux965' direct represents '0' with '4137'
c Var 'aux965' order represents '1' with '4138'
-4137 4138 0
c Var 'aux965' direct represents '1' with '4139'
4137 -4138 4139 0
-4139 4138 0
-4139 -4137 0
c Var 'aux965' direct represents '2' with '-4138'
4137 4139 -4138 0
c Encoding variable: aux966 with domain: int(0..2) (representing constraint ((x_00001_00007=8) + (x_00001_00004=8)))
c Both direct and order encoding.
c Var 'aux966' order represents '0' with '4140'
c Var 'aux966' direct represents '0' with '4140'
c Var 'aux966' order represents '1' with '4141'
-4140 4141 0
c Var 'aux966' direct represents '1' with '4142'
4140 -4141 4142 0
-4142 4141 0
-4142 -4140 0
c Var 'aux966' direct represents '2' with '-4141'
4140 4142 -4141 0
c Encoding variable: aux967 with domain: int(0..2) (representing constraint ((x_00001_00006=8) + (x_00001_00005=8)))
c Both direct and order encoding.
c Var 'aux967' order represents '0' with '4143'
c Var 'aux967' direct represents '0' with '4143'
c Var 'aux967' order represents '1' with '4144'
-4143 4144 0
c Var 'aux967' direct represents '1' with '4145'
4143 -4144 4145 0
-4145 4144 0
-4145 -4143 0
c Var 'aux967' direct represents '2' with '-4144'
4143 4145 -4144 0
c Encoding variable: aux968 with domain: int(0..3) (representing constraint ((x_00001_00003=8) + aux967))
c Both direct and order encoding.
c Var 'aux968' order represents '0' with '4146'
c Var 'aux968' direct represents '0' with '4146'
c Var 'aux968' order represents '1' with '4147'
-4146 4147 0
c Var 'aux968' direct represents '1' with '4148'
4146 -4147 4148 0
-4148 4147 0
-4148 -4146 0
c Var 'aux968' order represents '2' with '4149'
-4147 4149 0
c Var 'aux968' direct represents '2' with '4150'
4147 -4149 4150 0
-4150 4149 0
-4150 -4147 0
c Var 'aux968' direct represents '3' with '-4149'
4146 4148 4150 -4149 0
c Encoding variable: aux969 with domain: int(0..4) (representing constraint (aux964 + aux966))
c Both direct and order encoding.
c Var 'aux969' order represents '0' with '4151'
c Var 'aux969' direct represents '0' with '4151'
c Var 'aux969' order represents '1' with '4152'
-4151 4152 0
c Var 'aux969' direct represents '1' with '4153'
4151 -4152 4153 0
-4153 4152 0
-4153 -4151 0
c Var 'aux969' order represents '2' with '4154'
-4152 4154 0
c Var 'aux969' direct represents '2' with '4155'
4152 -4154 4155 0
-4155 4154 0
-4155 -4152 0
c Var 'aux969' order represents '3' with '4156'
-4154 4156 0
c Var 'aux969' direct represents '3' with '4157'
4154 -4156 4157 0
-4157 4156 0
-4157 -4154 0
c Var 'aux969' direct represents '4' with '-4156'
4151 4153 4155 4157 -4156 0
c Encoding variable: aux970 with domain: int(0..2) (representing constraint ((x_00001_00001=9) + (x_00001_00009=9)))
c Both direct and order encoding.
c Var 'aux970' order represents '0' with '4158'
c Var 'aux970' direct represents '0' with '4158'
c Var 'aux970' order represents '1' with '4159'
-4158 4159 0
c Var 'aux970' direct represents '1' with '4160'
4158 -4159 4160 0
-4160 4159 0
-4160 -4158 0
c Var 'aux970' direct represents '2' with '-4159'
4158 4160 -4159 0
c Encoding variable: aux971 with domain: int(0..2) (representing constraint ((x_00001_00008=9) + (x_00001_00002=9)))
c Both direct and order encoding.
c Var 'aux971' order represents '0' with '4161'
c Var 'aux971' direct represents '0' with '4161'
c Var 'aux971' order represents '1' with '4162'
-4161 4162 0
c Var 'aux971' direct represents '1' with '4163'
4161 -4162 4163 0
-4163 4162 0
-4163 -4161 0
c Var 'aux971' direct represents '2' with '-4162'
4161 4163 -4162 0
c Encoding variable: aux972 with domain: int(0..2) (representing constraint ((x_00001_00007=9) + (x_00001_00004=9)))
c Both direct and order encoding.
c Var 'aux972' order represents '0' with '4164'
c Var 'aux972' direct represents '0' with '4164'
c Var 'aux972' order represents '1' with '4165'
-4164 4165 0
c Var 'aux972' direct represents '1' with '4166'
4164 -4165 4166 0
-4166 4165 0
-4166 -4164 0
c Var 'aux972' direct represents '2' with '-4165'
4164 4166 -4165 0
c Encoding variable: aux973 with domain: int(0..2) (representing constraint ((x_00001_00006=9) + (x_00001_00005=9)))
c Both direct and order encoding.
c Var 'aux973' order represents '0' with '4167'
c Var 'aux973' direct represents '0' with '4167'
c Var 'aux973' order represents '1' with '4168'
-4167 4168 0
c Var 'aux973' direct represents '1' with '4169'
4167 -4168 4169 0
-4169 4168 0
-4169 -4167 0
c Var 'aux973' direct represents '2' with '-4168'
4167 4169 -4168 0
c Encoding variable: aux974 with domain: int(0..3) (representing constraint ((x_00001_00003=9) + aux973))
c Both direct and order encoding.
c Var 'aux974' order represents '0' with '4170'
c Var 'aux974' direct represents '0' with '4170'
c Var 'aux974' order represents '1' with '4171'
-4170 4171 0
c Var 'aux974' direct represents '1' with '4172'
4170 -4171 4172 0
-4172 4171 0
-4172 -4170 0
c Var 'aux974' order represents '2' with '4173'
-4171 4173 0
c Var 'aux974' direct represents '2' with '4174'
4171 -4173 4174 0
-4174 4173 0
-4174 -4171 0
c Var 'aux974' direct represents '3' with '-4173'
4170 4172 4174 -4173 0
c Encoding variable: aux975 with domain: int(0..4) (representing constraint (aux970 + aux972))
c Both direct and order encoding.
c Var 'aux975' order represents '0' with '4175'
c Var 'aux975' direct represents '0' with '4175'
c Var 'aux975' order represents '1' with '4176'
-4175 4176 0
c Var 'aux975' direct represents '1' with '4177'
4175 -4176 4177 0
-4177 4176 0
-4177 -4175 0
c Var 'aux975' order represents '2' with '4178'
-4176 4178 0
c Var 'aux975' direct represents '2' with '4179'
4176 -4178 4179 0
-4179 4178 0
-4179 -4176 0
c Var 'aux975' order represents '3' with '4180'
-4178 4180 0
c Var 'aux975' direct represents '3' with '4181'
4178 -4180 4181 0
-4181 4180 0
-4181 -4178 0
c Var 'aux975' direct represents '4' with '-4180'
4175 4177 4179 4181 -4180 0
c Encoding variable: aux976 with domain: int(0..2) (representing constraint ((x_00002_00001=1) + (x_00002_00009=1)))
c Both direct and order encoding.
c Var 'aux976' order represents '0' with '4182'
c Var 'aux976' direct represents '0' with '4182'
c Var 'aux976' order represents '1' with '4183'
-4182 4183 0
c Var 'aux976' direct represents '1' with '4184'
4182 -4183 4184 0
-4184 4183 0
-4184 -4182 0
c Var 'aux976' direct represents '2' with '-4183'
4182 4184 -4183 0
c Encoding variable: aux977 with domain: int(0..2) (representing constraint ((x_00002_00008=1) + (x_00002_00002=1)))
c Both direct and order encoding.
c Var 'aux977' order represents '0' with '4185'
c Var 'aux977' direct represents '0' with '4185'
c Var 'aux977' order represents '1' with '4186'
-4185 4186 0
c Var 'aux977' direct represents '1' with '4187'
4185 -4186 4187 0
-4187 4186 0
-4187 -4185 0
c Var 'aux977' direct represents '2' with '-4186'
4185 4187 -4186 0
c Encoding variable: aux978 with domain: int(0..2) (representing constraint ((x_00002_00007=1) + (x_00002_00004=1)))
c Both direct and order encoding.
c Var 'aux978' order represents '0' with '4188'
c Var 'aux978' direct represents '0' with '4188'
c Var 'aux978' order represents '1' with '4189'
-4188 4189 0
c Var 'aux978' direct represents '1' with '4190'
4188 -4189 4190 0
-4190 4189 0
-4190 -4188 0
c Var 'aux978' direct represents '2' with '-4189'
4188 4190 -4189 0
c Encoding variable: aux979 with domain: int(0..2) (representing constraint ((x_00002_00006=1) + (x_00002_00005=1)))
c Both direct and order encoding.
c Var 'aux979' order represents '0' with '4191'
c Var 'aux979' direct represents '0' with '4191'
c Var 'aux979' order represents '1' with '4192'
-4191 4192 0
c Var 'aux979' direct represents '1' with '4193'
4191 -4192 4193 0
-4193 4192 0
-4193 -4191 0
c Var 'aux979' direct represents '2' with '-4192'
4191 4193 -4192 0
c Encoding variable: aux980 with domain: int(0..3) (representing constraint ((x_00002_00003=1) + aux979))
c Both direct and order encoding.
c Var 'aux980' order represents '0' with '4194'
c Var 'aux980' direct represents '0' with '4194'
c Var 'aux980' order represents '1' with '4195'
-4194 4195 0
c Var 'aux980' direct represents '1' with '4196'
4194 -4195 4196 0
-4196 4195 0
-4196 -4194 0
c Var 'aux980' order represents '2' with '4197'
-4195 4197 0
c Var 'aux980' direct represents '2' with '4198'
4195 -4197 4198 0
-4198 4197 0
-4198 -4195 0
c Var 'aux980' direct represents '3' with '-4197'
4194 4196 4198 -4197 0
c Encoding variable: aux981 with domain: int(0..4) (representing constraint (aux976 + aux978))
c Both direct and order encoding.
c Var 'aux981' order represents '0' with '4199'
c Var 'aux981' direct represents '0' with '4199'
c Var 'aux981' order represents '1' with '4200'
-4199 4200 0
c Var 'aux981' direct represents '1' with '4201'
4199 -4200 4201 0
-4201 4200 0
-4201 -4199 0
c Var 'aux981' order represents '2' with '4202'
-4200 4202 0
c Var 'aux981' direct represents '2' with '4203'
4200 -4202 4203 0
-4203 4202 0
-4203 -4200 0
c Var 'aux981' order represents '3' with '4204'
-4202 4204 0
c Var 'aux981' direct represents '3' with '4205'
4202 -4204 4205 0
-4205 4204 0
-4205 -4202 0
c Var 'aux981' direct represents '4' with '-4204'
4199 4201 4203 4205 -4204 0
c Encoding variable: aux982 with domain: int(0..2) (representing constraint ((x_00002_00001=2) + (x_00002_00009=2)))
c Both direct and order encoding.
c Var 'aux982' order represents '0' with '4206'
c Var 'aux982' direct represents '0' with '4206'
c Var 'aux982' order represents '1' with '4207'
-4206 4207 0
c Var 'aux982' direct represents '1' with '4208'
4206 -4207 4208 0
-4208 4207 0
-4208 -4206 0
c Var 'aux982' direct represents '2' with '-4207'
4206 4208 -4207 0
c Encoding variable: aux983 with domain: int(0..2) (representing constraint ((x_00002_00008=2) + (x_00002_00002=2)))
c Both direct and order encoding.
c Var 'aux983' order represents '0' with '4209'
c Var 'aux983' direct represents '0' with '4209'
c Var 'aux983' order represents '1' with '4210'
-4209 4210 0
c Var 'aux983' direct represents '1' with '4211'
4209 -4210 4211 0
-4211 4210 0
-4211 -4209 0
c Var 'aux983' direct represents '2' with '-4210'
4209 4211 -4210 0
c Encoding variable: aux984 with domain: int(0..2) (representing constraint ((x_00002_00007=2) + (x_00002_00004=2)))
c Both direct and order encoding.
c Var 'aux984' order represents '0' with '4212'
c Var 'aux984' direct represents '0' with '4212'
c Var 'aux984' order represents '1' with '4213'
-4212 4213 0
c Var 'aux984' direct represents '1' with '4214'
4212 -4213 4214 0
-4214 4213 0
-4214 -4212 0
c Var 'aux984' direct represents '2' with '-4213'
4212 4214 -4213 0
c Encoding variable: aux985 with domain: int(0..2) (representing constraint ((x_00002_00006=2) + (x_00002_00005=2)))
c Both direct and order encoding.
c Var 'aux985' order represents '0' with '4215'
c Var 'aux985' direct represents '0' with '4215'
c Var 'aux985' order represents '1' with '4216'
-4215 4216 0
c Var 'aux985' direct represents '1' with '4217'
4215 -4216 4217 0
-4217 4216 0
-4217 -4215 0
c Var 'aux985' direct represents '2' with '-4216'
4215 4217 -4216 0
c Encoding variable: aux986 with domain: int(0..3) (representing constraint ((x_00002_00003=2) + aux985))
c Both direct and order encoding.
c Var 'aux986' order represents '0' with '4218'
c Var 'aux986' direct represents '0' with '4218'
c Var 'aux986' order represents '1' with '4219'
-4218 4219 0
c Var 'aux986' direct represents '1' with '4220'
4218 -4219 4220 0
-4220 4219 0
-4220 -4218 0
c Var 'aux986' order represents '2' with '4221'
-4219 4221 0
c Var 'aux986' direct represents '2' with '4222'
4219 -4221 4222 0
-4222 4221 0
-4222 -4219 0
c Var 'aux986' direct represents '3' with '-4221'
4218 4220 4222 -4221 0
c Encoding variable: aux987 with domain: int(0..4) (representing constraint (aux982 + aux984))
c Both direct and order encoding.
c Var 'aux987' order represents '0' with '4223'
c Var 'aux987' direct represents '0' with '4223'
c Var 'aux987' order represents '1' with '4224'
-4223 4224 0
c Var 'aux987' direct represents '1' with '4225'
4223 -4224 4225 0
-4225 4224 0
-4225 -4223 0
c Var 'aux987' order represents '2' with '4226'
-4224 4226 0
c Var 'aux987' direct represents '2' with '4227'
4224 -4226 4227 0
-4227 4226 0
-4227 -4224 0
c Var 'aux987' order represents '3' with '4228'
-4226 4228 0
c Var 'aux987' direct represents '3' with '4229'
4226 -4228 4229 0
-4229 4228 0
-4229 -4226 0
c Var 'aux987' direct represents '4' with '-4228'
4223 4225 4227 4229 -4228 0
c Encoding variable: aux988 with domain: int(0..2) (representing constraint ((x_00002_00001=3) + (x_00002_00009=3)))
c Both direct and order encoding.
c Var 'aux988' order represents '0' with '4230'
c Var 'aux988' direct represents '0' with '4230'
c Var 'aux988' order represents '1' with '4231'
-4230 4231 0
c Var 'aux988' direct represents '1' with '4232'
4230 -4231 4232 0
-4232 4231 0
-4232 -4230 0
c Var 'aux988' direct represents '2' with '-4231'
4230 4232 -4231 0
c Encoding variable: aux989 with domain: int(0..2) (representing constraint ((x_00002_00008=3) + (x_00002_00002=3)))
c Both direct and order encoding.
c Var 'aux989' order represents '0' with '4233'
c Var 'aux989' direct represents '0' with '4233'
c Var 'aux989' order represents '1' with '4234'
-4233 4234 0
c Var 'aux989' direct represents '1' with '4235'
4233 -4234 4235 0
-4235 4234 0
-4235 -4233 0
c Var 'aux989' direct represents '2' with '-4234'
4233 4235 -4234 0
c Encoding variable: aux990 with domain: int(0..2) (representing constraint ((x_00002_00007=3) + (x_00002_00004=3)))
c Both direct and order encoding.
c Var 'aux990' order represents '0' with '4236'
c Var 'aux990' direct represents '0' with '4236'
c Var 'aux990' order represents '1' with '4237'
-4236 4237 0
c Var 'aux990' direct represents '1' with '4238'
4236 -4237 4238 0
-4238 4237 0
-4238 -4236 0
c Var 'aux990' direct represents '2' with '-4237'
4236 4238 -4237 0
c Encoding variable: aux991 with domain: int(0..2) (representing constraint ((x_00002_00006=3) + (x_00002_00005=3)))
c Both direct and order encoding.
c Var 'aux991' order represents '0' with '4239'
c Var 'aux991' direct represents '0' with '4239'
c Var 'aux991' order represents '1' with '4240'
-4239 4240 0
c Var 'aux991' direct represents '1' with '4241'
4239 -4240 4241 0
-4241 4240 0
-4241 -4239 0
c Var 'aux991' direct represents '2' with '-4240'
4239 4241 -4240 0
c Encoding variable: aux992 with domain: int(0..3) (representing constraint ((x_00002_00003=3) + aux991))
c Both direct and order encoding.
c Var 'aux992' order represents '0' with '4242'
c Var 'aux992' direct represents '0' with '4242'
c Var 'aux992' order represents '1' with '4243'
-4242 4243 0
c Var 'aux992' direct represents '1' with '4244'
4242 -4243 4244 0
-4244 4243 0
-4244 -4242 0
c Var 'aux992' order represents '2' with '4245'
-4243 4245 0
c Var 'aux992' direct represents '2' with '4246'
4243 -4245 4246 0
-4246 4245 0
-4246 -4243 0
c Var 'aux992' direct represents '3' with '-4245'
4242 4244 4246 -4245 0
c Encoding variable: aux993 with domain: int(0..4) (representing constraint (aux988 + aux990))
c Both direct and order encoding.
c Var 'aux993' order represents '0' with '4247'
c Var 'aux993' direct represents '0' with '4247'
c Var 'aux993' order represents '1' with '4248'
-4247 4248 0
c Var 'aux993' direct represents '1' with '4249'
4247 -4248 4249 0
-4249 4248 0
-4249 -4247 0
c Var 'aux993' order represents '2' with '4250'
-4248 4250 0
c Var 'aux993' direct represents '2' with '4251'
4248 -4250 4251 0
-4251 4250 0
-4251 -4248 0
c Var 'aux993' order represents '3' with '4252'
-4250 4252 0
c Var 'aux993' direct represents '3' with '4253'
4250 -4252 4253 0
-4253 4252 0
-4253 -4250 0
c Var 'aux993' direct represents '4' with '-4252'
4247 4249 4251 4253 -4252 0
c Encoding variable: aux994 with domain: int(0..2) (representing constraint ((x_00002_00001=4) + (x_00002_00009=4)))
c Both direct and order encoding.
c Var 'aux994' order represents '0' with '4254'
c Var 'aux994' direct represents '0' with '4254'
c Var 'aux994' order represents '1' with '4255'
-4254 4255 0
c Var 'aux994' direct represents '1' with '4256'
4254 -4255 4256 0
-4256 4255 0
-4256 -4254 0
c Var 'aux994' direct represents '2' with '-4255'
4254 4256 -4255 0
c Encoding variable: aux995 with domain: int(0..2) (representing constraint ((x_00002_00008=4) + (x_00002_00002=4)))
c Both direct and order encoding.
c Var 'aux995' order represents '0' with '4257'
c Var 'aux995' direct represents '0' with '4257'
c Var 'aux995' order represents '1' with '4258'
-4257 4258 0
c Var 'aux995' direct represents '1' with '4259'
4257 -4258 4259 0
-4259 4258 0
-4259 -4257 0
c Var 'aux995' direct represents '2' with '-4258'
4257 4259 -4258 0
c Encoding variable: aux996 with domain: int(0..2) (representing constraint ((x_00002_00007=4) + (x_00002_00004=4)))
c Both direct and order encoding.
c Var 'aux996' order represents '0' with '4260'
c Var 'aux996' direct represents '0' with '4260'
c Var 'aux996' order represents '1' with '4261'
-4260 4261 0
c Var 'aux996' direct represents '1' with '4262'
4260 -4261 4262 0
-4262 4261 0
-4262 -4260 0
c Var 'aux996' direct represents '2' with '-4261'
4260 4262 -4261 0
c Encoding variable: aux997 with domain: int(0..2) (representing constraint ((x_00002_00006=4) + (x_00002_00005=4)))
c Both direct and order encoding.
c Var 'aux997' order represents '0' with '4263'
c Var 'aux997' direct represents '0' with '4263'
c Var 'aux997' order represents '1' with '4264'
-4263 4264 0
c Var 'aux997' direct represents '1' with '4265'
4263 -4264 4265 0
-4265 4264 0
-4265 -4263 0
c Var 'aux997' direct represents '2' with '-4264'
4263 4265 -4264 0
c Encoding variable: aux998 with domain: int(0..3) (representing constraint ((x_00002_00003=4) + aux997))
c Both direct and order encoding.
c Var 'aux998' order represents '0' with '4266'
c Var 'aux998' direct represents '0' with '4266'
c Var 'aux998' order represents '1' with '4267'
-4266 4267 0
c Var 'aux998' direct represents '1' with '4268'
4266 -4267 4268 0
-4268 4267 0
-4268 -4266 0
c Var 'aux998' order represents '2' with '4269'
-4267 4269 0
c Var 'aux998' direct represents '2' with '4270'
4267 -4269 4270 0
-4270 4269 0
-4270 -4267 0
c Var 'aux998' direct represents '3' with '-4269'
4266 4268 4270 -4269 0
c Encoding variable: aux999 with domain: int(0..4) (representing constraint (aux994 + aux996))
c Both direct and order encoding.
c Var 'aux999' order represents '0' with '4271'
c Var 'aux999' direct represents '0' with '4271'
c Var 'aux999' order represents '1' with '4272'
-4271 4272 0
c Var 'aux999' direct represents '1' with '4273'
4271 -4272 4273 0
-4273 4272 0
-4273 -4271 0
c Var 'aux999' order represents '2' with '4274'
-4272 4274 0
c Var 'aux999' direct represents '2' with '4275'
4272 -4274 4275 0
-4275 4274 0
-4275 -4272 0
c Var 'aux999' order represents '3' with '4276'
-4274 4276 0
c Var 'aux999' direct represents '3' with '4277'
4274 -4276 4277 0
-4277 4276 0
-4277 -4274 0
c Var 'aux999' direct represents '4' with '-4276'
4271 4273 4275 4277 -4276 0
c Encoding variable: aux1000 with domain: int(0..2) (representing constraint ((x_00002_00001=5) + (x_00002_00009=5)))
c Both direct and order encoding.
c Var 'aux1000' order represents '0' with '4278'
c Var 'aux1000' direct represents '0' with '4278'
c Var 'aux1000' order represents '1' with '4279'
-4278 4279 0
c Var 'aux1000' direct represents '1' with '4280'
4278 -4279 4280 0
-4280 4279 0
-4280 -4278 0
c Var 'aux1000' direct represents '2' with '-4279'
4278 4280 -4279 0
c Encoding variable: aux1001 with domain: int(0..2) (representing constraint ((x_00002_00008=5) + (x_00002_00002=5)))
c Both direct and order encoding.
c Var 'aux1001' order represents '0' with '4281'
c Var 'aux1001' direct represents '0' with '4281'
c Var 'aux1001' order represents '1' with '4282'
-4281 4282 0
c Var 'aux1001' direct represents '1' with '4283'
4281 -4282 4283 0
-4283 4282 0
-4283 -4281 0
c Var 'aux1001' direct represents '2' with '-4282'
4281 4283 -4282 0
c Encoding variable: aux1002 with domain: int(0..2) (representing constraint ((x_00002_00007=5) + (x_00002_00004=5)))
c Both direct and order encoding.
c Var 'aux1002' order represents '0' with '4284'
c Var 'aux1002' direct represents '0' with '4284'
c Var 'aux1002' order represents '1' with '4285'
-4284 4285 0
c Var 'aux1002' direct represents '1' with '4286'
4284 -4285 4286 0
-4286 4285 0
-4286 -4284 0
c Var 'aux1002' direct represents '2' with '-4285'
4284 4286 -4285 0
c Encoding variable: aux1003 with domain: int(0..2) (representing constraint ((x_00002_00006=5) + (x_00002_00005=5)))
c Both direct and order encoding.
c Var 'aux1003' order represents '0' with '4287'
c Var 'aux1003' direct represents '0' with '4287'
c Var 'aux1003' order represents '1' with '4288'
-4287 4288 0
c Var 'aux1003' direct represents '1' with '4289'
4287 -4288 4289 0
-4289 4288 0
-4289 -4287 0
c Var 'aux1003' direct represents '2' with '-4288'
4287 4289 -4288 0
c Encoding variable: aux1004 with domain: int(0..3) (representing constraint ((x_00002_00003=5) + aux1003))
c Both direct and order encoding.
c Var 'aux1004' order represents '0' with '4290'
c Var 'aux1004' direct represents '0' with '4290'
c Var 'aux1004' order represents '1' with '4291'
-4290 4291 0
c Var 'aux1004' direct represents '1' with '4292'
4290 -4291 4292 0
-4292 4291 0
-4292 -4290 0
c Var 'aux1004' order represents '2' with '4293'
-4291 4293 0
c Var 'aux1004' direct represents '2' with '4294'
4291 -4293 4294 0
-4294 4293 0
-4294 -4291 0
c Var 'aux1004' direct represents '3' with '-4293'
4290 4292 4294 -4293 0
c Encoding variable: aux1005 with domain: int(0..4) (representing constraint (aux1000 + aux1002))
c Both direct and order encoding.
c Var 'aux1005' order represents '0' with '4295'
c Var 'aux1005' direct represents '0' with '4295'
c Var 'aux1005' order represents '1' with '4296'
-4295 4296 0
c Var 'aux1005' direct represents '1' with '4297'
4295 -4296 4297 0
-4297 4296 0
-4297 -4295 0
c Var 'aux1005' order represents '2' with '4298'
-4296 4298 0
c Var 'aux1005' direct represents '2' with '4299'
4296 -4298 4299 0
-4299 4298 0
-4299 -4296 0
c Var 'aux1005' order represents '3' with '4300'
-4298 4300 0
c Var 'aux1005' direct represents '3' with '4301'
4298 -4300 4301 0
-4301 4300 0
-4301 -4298 0
c Var 'aux1005' direct represents '4' with '-4300'
4295 4297 4299 4301 -4300 0
c Encoding variable: aux1006 with domain: int(0..2) (representing constraint ((x_00002_00001=6) + (x_00002_00009=6)))
c Both direct and order encoding.
c Var 'aux1006' order represents '0' with '4302'
c Var 'aux1006' direct represents '0' with '4302'
c Var 'aux1006' order represents '1' with '4303'
-4302 4303 0
c Var 'aux1006' direct represents '1' with '4304'
4302 -4303 4304 0
-4304 4303 0
-4304 -4302 0
c Var 'aux1006' direct represents '2' with '-4303'
4302 4304 -4303 0
c Encoding variable: aux1007 with domain: int(0..2) (representing constraint ((x_00002_00008=6) + (x_00002_00002=6)))
c Both direct and order encoding.
c Var 'aux1007' order represents '0' with '4305'
c Var 'aux1007' direct represents '0' with '4305'
c Var 'aux1007' order represents '1' with '4306'
-4305 4306 0
c Var 'aux1007' direct represents '1' with '4307'
4305 -4306 4307 0
-4307 4306 0
-4307 -4305 0
c Var 'aux1007' direct represents '2' with '-4306'
4305 4307 -4306 0
c Encoding variable: aux1008 with domain: int(0..2) (representing constraint ((x_00002_00007=6) + (x_00002_00004=6)))
c Both direct and order encoding.
c Var 'aux1008' order represents '0' with '4308'
c Var 'aux1008' direct represents '0' with '4308'
c Var 'aux1008' order represents '1' with '4309'
-4308 4309 0
c Var 'aux1008' direct represents '1' with '4310'
4308 -4309 4310 0
-4310 4309 0
-4310 -4308 0
c Var 'aux1008' direct represents '2' with '-4309'
4308 4310 -4309 0
c Encoding variable: aux1009 with domain: int(0..2) (representing constraint ((x_00002_00006=6) + (x_00002_00005=6)))
c Both direct and order encoding.
c Var 'aux1009' order represents '0' with '4311'
c Var 'aux1009' direct represents '0' with '4311'
c Var 'aux1009' order represents '1' with '4312'
-4311 4312 0
c Var 'aux1009' direct represents '1' with '4313'
4311 -4312 4313 0
-4313 4312 0
-4313 -4311 0
c Var 'aux1009' direct represents '2' with '-4312'
4311 4313 -4312 0
c Encoding variable: aux1010 with domain: int(0..3) (representing constraint ((x_00002_00003=6) + aux1009))
c Both direct and order encoding.
c Var 'aux1010' order represents '0' with '4314'
c Var 'aux1010' direct represents '0' with '4314'
c Var 'aux1010' order represents '1' with '4315'
-4314 4315 0
c Var 'aux1010' direct represents '1' with '4316'
4314 -4315 4316 0
-4316 4315 0
-4316 -4314 0
c Var 'aux1010' order represents '2' with '4317'
-4315 4317 0
c Var 'aux1010' direct represents '2' with '4318'
4315 -4317 4318 0
-4318 4317 0
-4318 -4315 0
c Var 'aux1010' direct represents '3' with '-4317'
4314 4316 4318 -4317 0
c Encoding variable: aux1011 with domain: int(0..4) (representing constraint (aux1006 + aux1008))
c Both direct and order encoding.
c Var 'aux1011' order represents '0' with '4319'
c Var 'aux1011' direct represents '0' with '4319'
c Var 'aux1011' order represents '1' with '4320'
-4319 4320 0
c Var 'aux1011' direct represents '1' with '4321'
4319 -4320 4321 0
-4321 4320 0
-4321 -4319 0
c Var 'aux1011' order represents '2' with '4322'
-4320 4322 0
c Var 'aux1011' direct represents '2' with '4323'
4320 -4322 4323 0
-4323 4322 0
-4323 -4320 0
c Var 'aux1011' order represents '3' with '4324'
-4322 4324 0
c Var 'aux1011' direct represents '3' with '4325'
4322 -4324 4325 0
-4325 4324 0
-4325 -4322 0
c Var 'aux1011' direct represents '4' with '-4324'
4319 4321 4323 4325 -4324 0
c Encoding variable: aux1012 with domain: int(0..2) (representing constraint ((x_00002_00001=7) + (x_00002_00009=7)))
c Both direct and order encoding.
c Var 'aux1012' order represents '0' with '4326'
c Var 'aux1012' direct represents '0' with '4326'
c Var 'aux1012' order represents '1' with '4327'
-4326 4327 0
c Var 'aux1012' direct represents '1' with '4328'
4326 -4327 4328 0
-4328 4327 0
-4328 -4326 0
c Var 'aux1012' direct represents '2' with '-4327'
4326 4328 -4327 0
c Encoding variable: aux1013 with domain: int(0..2) (representing constraint ((x_00002_00008=7) + (x_00002_00002=7)))
c Both direct and order encoding.
c Var 'aux1013' order represents '0' with '4329'
c Var 'aux1013' direct represents '0' with '4329'
c Var 'aux1013' order represents '1' with '4330'
-4329 4330 0
c Var 'aux1013' direct represents '1' with '4331'
4329 -4330 4331 0
-4331 4330 0
-4331 -4329 0
c Var 'aux1013' direct represents '2' with '-4330'
4329 4331 -4330 0
c Encoding variable: aux1014 with domain: int(0..2) (representing constraint ((x_00002_00007=7) + (x_00002_00004=7)))
c Both direct and order encoding.
c Var 'aux1014' order represents '0' with '4332'
c Var 'aux1014' direct represents '0' with '4332'
c Var 'aux1014' order represents '1' with '4333'
-4332 4333 0
c Var 'aux1014' direct represents '1' with '4334'
4332 -4333 4334 0
-4334 4333 0
-4334 -4332 0
c Var 'aux1014' direct represents '2' with '-4333'
4332 4334 -4333 0
c Encoding variable: aux1015 with domain: int(0..2) (representing constraint ((x_00002_00006=7) + (x_00002_00005=7)))
c Both direct and order encoding.
c Var 'aux1015' order represents '0' with '4335'
c Var 'aux1015' direct represents '0' with '4335'
c Var 'aux1015' order represents '1' with '4336'
-4335 4336 0
c Var 'aux1015' direct represents '1' with '4337'
4335 -4336 4337 0
-4337 4336 0
-4337 -4335 0
c Var 'aux1015' direct represents '2' with '-4336'
4335 4337 -4336 0
c Encoding variable: aux1016 with domain: int(0..3) (representing constraint ((x_00002_00003=7) + aux1015))
c Both direct and order encoding.
c Var 'aux1016' order represents '0' with '4338'
c Var 'aux1016' direct represents '0' with '4338'
c Var 'aux1016' order represents '1' with '4339'
-4338 4339 0
c Var 'aux1016' direct represents '1' with '4340'
4338 -4339 4340 0
-4340 4339 0
-4340 -4338 0
c Var 'aux1016' order represents '2' with '4341'
-4339 4341 0
c Var 'aux1016' direct represents '2' with '4342'
4339 -4341 4342 0
-4342 4341 0
-4342 -4339 0
c Var 'aux1016' direct represents '3' with '-4341'
4338 4340 4342 -4341 0
c Encoding variable: aux1017 with domain: int(0..4) (representing constraint (aux1012 + aux1014))
c Both direct and order encoding.
c Var 'aux1017' order represents '0' with '4343'
c Var 'aux1017' direct represents '0' with '4343'
c Var 'aux1017' order represents '1' with '4344'
-4343 4344 0
c Var 'aux1017' direct represents '1' with '4345'
4343 -4344 4345 0
-4345 4344 0
-4345 -4343 0
c Var 'aux1017' order represents '2' with '4346'
-4344 4346 0
c Var 'aux1017' direct represents '2' with '4347'
4344 -4346 4347 0
-4347 4346 0
-4347 -4344 0
c Var 'aux1017' order represents '3' with '4348'
-4346 4348 0
c Var 'aux1017' direct represents '3' with '4349'
4346 -4348 4349 0
-4349 4348 0
-4349 -4346 0
c Var 'aux1017' direct represents '4' with '-4348'
4343 4345 4347 4349 -4348 0
c Encoding variable: aux1018 with domain: int(0..2) (representing constraint ((x_00002_00001=8) + (x_00002_00009=8)))
c Both direct and order encoding.
c Var 'aux1018' order represents '0' with '4350'
c Var 'aux1018' direct represents '0' with '4350'
c Var 'aux1018' order represents '1' with '4351'
-4350 4351 0
c Var 'aux1018' direct represents '1' with '4352'
4350 -4351 4352 0
-4352 4351 0
-4352 -4350 0
c Var 'aux1018' direct represents '2' with '-4351'
4350 4352 -4351 0
c Encoding variable: aux1019 with domain: int(0..2) (representing constraint ((x_00002_00008=8) + (x_00002_00002=8)))
c Both direct and order encoding.
c Var 'aux1019' order represents '0' with '4353'
c Var 'aux1019' direct represents '0' with '4353'
c Var 'aux1019' order represents '1' with '4354'
-4353 4354 0
c Var 'aux1019' direct represents '1' with '4355'
4353 -4354 4355 0
-4355 4354 0
-4355 -4353 0
c Var 'aux1019' direct represents '2' with '-4354'
4353 4355 -4354 0
c Encoding variable: aux1020 with domain: int(0..2) (representing constraint ((x_00002_00007=8) + (x_00002_00004=8)))
c Both direct and order encoding.
c Var 'aux1020' order represents '0' with '4356'
c Var 'aux1020' direct represents '0' with '4356'
c Var 'aux1020' order represents '1' with '4357'
-4356 4357 0
c Var 'aux1020' direct represents '1' with '4358'
4356 -4357 4358 0
-4358 4357 0
-4358 -4356 0
c Var 'aux1020' direct represents '2' with '-4357'
4356 4358 -4357 0
c Encoding variable: aux1021 with domain: int(0..2) (representing constraint ((x_00002_00006=8) + (x_00002_00005=8)))
c Both direct and order encoding.
c Var 'aux1021' order represents '0' with '4359'
c Var 'aux1021' direct represents '0' with '4359'
c Var 'aux1021' order represents '1' with '4360'
-4359 4360 0
c Var 'aux1021' direct represents '1' with '4361'
4359 -4360 4361 0
-4361 4360 0
-4361 -4359 0
c Var 'aux1021' direct represents '2' with '-4360'
4359 4361 -4360 0
c Encoding variable: aux1022 with domain: int(0..3) (representing constraint ((x_00002_00003=8) + aux1021))
c Both direct and order encoding.
c Var 'aux1022' order represents '0' with '4362'
c Var 'aux1022' direct represents '0' with '4362'
c Var 'aux1022' order represents '1' with '4363'
-4362 4363 0
c Var 'aux1022' direct represents '1' with '4364'
4362 -4363 4364 0
-4364 4363 0
-4364 -4362 0
c Var 'aux1022' order represents '2' with '4365'
-4363 4365 0
c Var 'aux1022' direct represents '2' with '4366'
4363 -4365 4366 0
-4366 4365 0
-4366 -4363 0
c Var 'aux1022' direct represents '3' with '-4365'
4362 4364 4366 -4365 0
c Encoding variable: aux1023 with domain: int(0..4) (representing constraint (aux1018 + aux1020))
c Both direct and order encoding.
c Var 'aux1023' order represents '0' with '4367'
c Var 'aux1023' direct represents '0' with '4367'
c Var 'aux1023' order represents '1' with '4368'
-4367 4368 0
c Var 'aux1023' direct represents '1' with '4369'
4367 -4368 4369 0
-4369 4368 0
-4369 -4367 0
c Var 'aux1023' order represents '2' with '4370'
-4368 4370 0
c Var 'aux1023' direct represents '2' with '4371'
4368 -4370 4371 0
-4371 4370 0
-4371 -4368 0
c Var 'aux1023' order represents '3' with '4372'
-4370 4372 0
c Var 'aux1023' direct represents '3' with '4373'
4370 -4372 4373 0
-4373 4372 0
-4373 -4370 0
c Var 'aux1023' direct represents '4' with '-4372'
4367 4369 4371 4373 -4372 0
c Encoding variable: aux1024 with domain: int(0..2) (representing constraint ((x_00002_00001=9) + (x_00002_00009=9)))
c Both direct and order encoding.
c Var 'aux1024' order represents '0' with '4374'
c Var 'aux1024' direct represents '0' with '4374'
c Var 'aux1024' order represents '1' with '4375'
-4374 4375 0
c Var 'aux1024' direct represents '1' with '4376'
4374 -4375 4376 0
-4376 4375 0
-4376 -4374 0
c Var 'aux1024' direct represents '2' with '-4375'
4374 4376 -4375 0
c Encoding variable: aux1025 with domain: int(0..2) (representing constraint ((x_00002_00008=9) + (x_00002_00002=9)))
c Both direct and order encoding.
c Var 'aux1025' order represents '0' with '4377'
c Var 'aux1025' direct represents '0' with '4377'
c Var 'aux1025' order represents '1' with '4378'
-4377 4378 0
c Var 'aux1025' direct represents '1' with '4379'
4377 -4378 4379 0
-4379 4378 0
-4379 -4377 0
c Var 'aux1025' direct represents '2' with '-4378'
4377 4379 -4378 0
c Encoding variable: aux1026 with domain: int(0..2) (representing constraint ((x_00002_00007=9) + (x_00002_00004=9)))
c Both direct and order encoding.
c Var 'aux1026' order represents '0' with '4380'
c Var 'aux1026' direct represents '0' with '4380'
c Var 'aux1026' order represents '1' with '4381'
-4380 4381 0
c Var 'aux1026' direct represents '1' with '4382'
4380 -4381 4382 0
-4382 4381 0
-4382 -4380 0
c Var 'aux1026' direct represents '2' with '-4381'
4380 4382 -4381 0
c Encoding variable: aux1027 with domain: int(0..2) (representing constraint ((x_00002_00006=9) + (x_00002_00005=9)))
c Both direct and order encoding.
c Var 'aux1027' order represents '0' with '4383'
c Var 'aux1027' direct represents '0' with '4383'
c Var 'aux1027' order represents '1' with '4384'
-4383 4384 0
c Var 'aux1027' direct represents '1' with '4385'
4383 -4384 4385 0
-4385 4384 0
-4385 -4383 0
c Var 'aux1027' direct represents '2' with '-4384'
4383 4385 -4384 0
c Encoding variable: aux1028 with domain: int(0..3) (representing constraint ((x_00002_00003=9) + aux1027))
c Both direct and order encoding.
c Var 'aux1028' order represents '0' with '4386'
c Var 'aux1028' direct represents '0' with '4386'
c Var 'aux1028' order represents '1' with '4387'
-4386 4387 0
c Var 'aux1028' direct represents '1' with '4388'
4386 -4387 4388 0
-4388 4387 0
-4388 -4386 0
c Var 'aux1028' order represents '2' with '4389'
-4387 4389 0
c Var 'aux1028' direct represents '2' with '4390'
4387 -4389 4390 0
-4390 4389 0
-4390 -4387 0
c Var 'aux1028' direct represents '3' with '-4389'
4386 4388 4390 -4389 0
c Encoding variable: aux1029 with domain: int(0..4) (representing constraint (aux1024 + aux1026))
c Both direct and order encoding.
c Var 'aux1029' order represents '0' with '4391'
c Var 'aux1029' direct represents '0' with '4391'
c Var 'aux1029' order represents '1' with '4392'
-4391 4392 0
c Var 'aux1029' direct represents '1' with '4393'
4391 -4392 4393 0
-4393 4392 0
-4393 -4391 0
c Var 'aux1029' order represents '2' with '4394'
-4392 4394 0
c Var 'aux1029' direct represents '2' with '4395'
4392 -4394 4395 0
-4395 4394 0
-4395 -4392 0
c Var 'aux1029' order represents '3' with '4396'
-4394 4396 0
c Var 'aux1029' direct represents '3' with '4397'
4394 -4396 4397 0
-4397 4396 0
-4397 -4394 0
c Var 'aux1029' direct represents '4' with '-4396'
4391 4393 4395 4397 -4396 0
c Encoding variable: aux1030 with domain: int(0..2) (representing constraint ((x_00003_00001=1) + (x_00003_00009=1)))
c Both direct and order encoding.
c Var 'aux1030' order represents '0' with '4398'
c Var 'aux1030' direct represents '0' with '4398'
c Var 'aux1030' order represents '1' with '4399'
-4398 4399 0
c Var 'aux1030' direct represents '1' with '4400'
4398 -4399 4400 0
-4400 4399 0
-4400 -4398 0
c Var 'aux1030' direct represents '2' with '-4399'
4398 4400 -4399 0
c Encoding variable: aux1031 with domain: int(0..2) (representing constraint ((x_00003_00008=1) + (x_00003_00002=1)))
c Both direct and order encoding.
c Var 'aux1031' order represents '0' with '4401'
c Var 'aux1031' direct represents '0' with '4401'
c Var 'aux1031' order represents '1' with '4402'
-4401 4402 0
c Var 'aux1031' direct represents '1' with '4403'
4401 -4402 4403 0
-4403 4402 0
-4403 -4401 0
c Var 'aux1031' direct represents '2' with '-4402'
4401 4403 -4402 0
c Encoding variable: aux1032 with domain: int(0..2) (representing constraint ((x_00003_00007=1) + (x_00003_00004=1)))
c Both direct and order encoding.
c Var 'aux1032' order represents '0' with '4404'
c Var 'aux1032' direct represents '0' with '4404'
c Var 'aux1032' order represents '1' with '4405'
-4404 4405 0
c Var 'aux1032' direct represents '1' with '4406'
4404 -4405 4406 0
-4406 4405 0
-4406 -4404 0
c Var 'aux1032' direct represents '2' with '-4405'
4404 4406 -4405 0
c Encoding variable: aux1033 with domain: int(0..2) (representing constraint ((x_00003_00006=1) + (x_00003_00005=1)))
c Both direct and order encoding.
c Var 'aux1033' order represents '0' with '4407'
c Var 'aux1033' direct represents '0' with '4407'
c Var 'aux1033' order represents '1' with '4408'
-4407 4408 0
c Var 'aux1033' direct represents '1' with '4409'
4407 -4408 4409 0
-4409 4408 0
-4409 -4407 0
c Var 'aux1033' direct represents '2' with '-4408'
4407 4409 -4408 0
c Encoding variable: aux1034 with domain: int(0..3) (representing constraint ((x_00003_00003=1) + aux1033))
c Both direct and order encoding.
c Var 'aux1034' order represents '0' with '4410'
c Var 'aux1034' direct represents '0' with '4410'
c Var 'aux1034' order represents '1' with '4411'
-4410 4411 0
c Var 'aux1034' direct represents '1' with '4412'
4410 -4411 4412 0
-4412 4411 0
-4412 -4410 0
c Var 'aux1034' order represents '2' with '4413'
-4411 4413 0
c Var 'aux1034' direct represents '2' with '4414'
4411 -4413 4414 0
-4414 4413 0
-4414 -4411 0
c Var 'aux1034' direct represents '3' with '-4413'
4410 4412 4414 -4413 0
c Encoding variable: aux1035 with domain: int(0..4) (representing constraint (aux1030 + aux1032))
c Both direct and order encoding.
c Var 'aux1035' order represents '0' with '4415'
c Var 'aux1035' direct represents '0' with '4415'
c Var 'aux1035' order represents '1' with '4416'
-4415 4416 0
c Var 'aux1035' direct represents '1' with '4417'
4415 -4416 4417 0
-4417 4416 0
-4417 -4415 0
c Var 'aux1035' order represents '2' with '4418'
-4416 4418 0
c Var 'aux1035' direct represents '2' with '4419'
4416 -4418 4419 0
-4419 4418 0
-4419 -4416 0
c Var 'aux1035' order represents '3' with '4420'
-4418 4420 0
c Var 'aux1035' direct represents '3' with '4421'
4418 -4420 4421 0
-4421 4420 0
-4421 -4418 0
c Var 'aux1035' direct represents '4' with '-4420'
4415 4417 4419 4421 -4420 0
c Encoding variable: aux1036 with domain: int(0..2) (representing constraint ((x_00003_00001=2) + (x_00003_00009=2)))
c Both direct and order encoding.
c Var 'aux1036' order represents '0' with '4422'
c Var 'aux1036' direct represents '0' with '4422'
c Var 'aux1036' order represents '1' with '4423'
-4422 4423 0
c Var 'aux1036' direct represents '1' with '4424'
4422 -4423 4424 0
-4424 4423 0
-4424 -4422 0
c Var 'aux1036' direct represents '2' with '-4423'
4422 4424 -4423 0
c Encoding variable: aux1037 with domain: int(0..2) (representing constraint ((x_00003_00008=2) + (x_00003_00002=2)))
c Both direct and order encoding.
c Var 'aux1037' order represents '0' with '4425'
c Var 'aux1037' direct represents '0' with '4425'
c Var 'aux1037' order represents '1' with '4426'
-4425 4426 0
c Var 'aux1037' direct represents '1' with '4427'
4425 -4426 4427 0
-4427 4426 0
-4427 -4425 0
c Var 'aux1037' direct represents '2' with '-4426'
4425 4427 -4426 0
c Encoding variable: aux1038 with domain: int(0..2) (representing constraint ((x_00003_00007=2) + (x_00003_00004=2)))
c Both direct and order encoding.
c Var 'aux1038' order represents '0' with '4428'
c Var 'aux1038' direct represents '0' with '4428'
c Var 'aux1038' order represents '1' with '4429'
-4428 4429 0
c Var 'aux1038' direct represents '1' with '4430'
4428 -4429 4430 0
-4430 4429 0
-4430 -4428 0
c Var 'aux1038' direct represents '2' with '-4429'
4428 4430 -4429 0
c Encoding variable: aux1039 with domain: int(0..2) (representing constraint ((x_00003_00006=2) + (x_00003_00005=2)))
c Both direct and order encoding.
c Var 'aux1039' order represents '0' with '4431'
c Var 'aux1039' direct represents '0' with '4431'
c Var 'aux1039' order represents '1' with '4432'
-4431 4432 0
c Var 'aux1039' direct represents '1' with '4433'
4431 -4432 4433 0
-4433 4432 0
-4433 -4431 0
c Var 'aux1039' direct represents '2' with '-4432'
4431 4433 -4432 0
c Encoding variable: aux1040 with domain: int(0..3) (representing constraint ((x_00003_00003=2) + aux1039))
c Both direct and order encoding.
c Var 'aux1040' order represents '0' with '4434'
c Var 'aux1040' direct represents '0' with '4434'
c Var 'aux1040' order represents '1' with '4435'
-4434 4435 0
c Var 'aux1040' direct represents '1' with '4436'
4434 -4435 4436 0
-4436 4435 0
-4436 -4434 0
c Var 'aux1040' order represents '2' with '4437'
-4435 4437 0
c Var 'aux1040' direct represents '2' with '4438'
4435 -4437 4438 0
-4438 4437 0
-4438 -4435 0
c Var 'aux1040' direct represents '3' with '-4437'
4434 4436 4438 -4437 0
c Encoding variable: aux1041 with domain: int(0..4) (representing constraint (aux1036 + aux1038))
c Both direct and order encoding.
c Var 'aux1041' order represents '0' with '4439'
c Var 'aux1041' direct represents '0' with '4439'
c Var 'aux1041' order represents '1' with '4440'
-4439 4440 0
c Var 'aux1041' direct represents '1' with '4441'
4439 -4440 4441 0
-4441 4440 0
-4441 -4439 0
c Var 'aux1041' order represents '2' with '4442'
-4440 4442 0
c Var 'aux1041' direct represents '2' with '4443'
4440 -4442 4443 0
-4443 4442 0
-4443 -4440 0
c Var 'aux1041' order represents '3' with '4444'
-4442 4444 0
c Var 'aux1041' direct represents '3' with '4445'
4442 -4444 4445 0
-4445 4444 0
-4445 -4442 0
c Var 'aux1041' direct represents '4' with '-4444'
4439 4441 4443 4445 -4444 0
c Encoding variable: aux1042 with domain: int(0..2) (representing constraint ((x_00003_00001=3) + (x_00003_00009=3)))
c Both direct and order encoding.
c Var 'aux1042' order represents '0' with '4446'
c Var 'aux1042' direct represents '0' with '4446'
c Var 'aux1042' order represents '1' with '4447'
-4446 4447 0
c Var 'aux1042' direct represents '1' with '4448'
4446 -4447 4448 0
-4448 4447 0
-4448 -4446 0
c Var 'aux1042' direct represents '2' with '-4447'
4446 4448 -4447 0
c Encoding variable: aux1043 with domain: int(0..2) (representing constraint ((x_00003_00008=3) + (x_00003_00002=3)))
c Both direct and order encoding.
c Var 'aux1043' order represents '0' with '4449'
c Var 'aux1043' direct represents '0' with '4449'
c Var 'aux1043' order represents '1' with '4450'
-4449 4450 0
c Var 'aux1043' direct represents '1' with '4451'
4449 -4450 4451 0
-4451 4450 0
-4451 -4449 0
c Var 'aux1043' direct represents '2' with '-4450'
4449 4451 -4450 0
c Encoding variable: aux1044 with domain: int(0..2) (representing constraint ((x_00003_00007=3) + (x_00003_00004=3)))
c Both direct and order encoding.
c Var 'aux1044' order represents '0' with '4452'
c Var 'aux1044' direct represents '0' with '4452'
c Var 'aux1044' order represents '1' with '4453'
-4452 4453 0
c Var 'aux1044' direct represents '1' with '4454'
4452 -4453 4454 0
-4454 4453 0
-4454 -4452 0
c Var 'aux1044' direct represents '2' with '-4453'
4452 4454 -4453 0
c Encoding variable: aux1045 with domain: int(0..2) (representing constraint ((x_00003_00006=3) + (x_00003_00005=3)))
c Both direct and order encoding.
c Var 'aux1045' order represents '0' with '4455'
c Var 'aux1045' direct represents '0' with '4455'
c Var 'aux1045' order represents '1' with '4456'
-4455 4456 0
c Var 'aux1045' direct represents '1' with '4457'
4455 -4456 4457 0
-4457 4456 0
-4457 -4455 0
c Var 'aux1045' direct represents '2' with '-4456'
4455 4457 -4456 0
c Encoding variable: aux1046 with domain: int(0..3) (representing constraint ((x_00003_00003=3) + aux1045))
c Both direct and order encoding.
c Var 'aux1046' order represents '0' with '4458'
c Var 'aux1046' direct represents '0' with '4458'
c Var 'aux1046' order represents '1' with '4459'
-4458 4459 0
c Var 'aux1046' direct represents '1' with '4460'
4458 -4459 4460 0
-4460 4459 0
-4460 -4458 0
c Var 'aux1046' order represents '2' with '4461'
-4459 4461 0
c Var 'aux1046' direct represents '2' with '4462'
4459 -4461 4462 0
-4462 4461 0
-4462 -4459 0
c Var 'aux1046' direct represents '3' with '-4461'
4458 4460 4462 -4461 0
c Encoding variable: aux1047 with domain: int(0..4) (representing constraint (aux1042 + aux1044))
c Both direct and order encoding.
c Var 'aux1047' order represents '0' with '4463'
c Var 'aux1047' direct represents '0' with '4463'
c Var 'aux1047' order represents '1' with '4464'
-4463 4464 0
c Var 'aux1047' direct represents '1' with '4465'
4463 -4464 4465 0
-4465 4464 0
-4465 -4463 0
c Var 'aux1047' order represents '2' with '4466'
-4464 4466 0
c Var 'aux1047' direct represents '2' with '4467'
4464 -4466 4467 0
-4467 4466 0
-4467 -4464 0
c Var 'aux1047' order represents '3' with '4468'
-4466 4468 0
c Var 'aux1047' direct represents '3' with '4469'
4466 -4468 4469 0
-4469 4468 0
-4469 -4466 0
c Var 'aux1047' direct represents '4' with '-4468'
4463 4465 4467 4469 -4468 0
c Encoding variable: aux1048 with domain: int(0..2) (representing constraint ((x_00003_00001=4) + (x_00003_00009=4)))
c Both direct and order encoding.
c Var 'aux1048' order represents '0' with '4470'
c Var 'aux1048' direct represents '0' with '4470'
c Var 'aux1048' order represents '1' with '4471'
-4470 4471 0
c Var 'aux1048' direct represents '1' with '4472'
4470 -4471 4472 0
-4472 4471 0
-4472 -4470 0
c Var 'aux1048' direct represents '2' with '-4471'
4470 4472 -4471 0
c Encoding variable: aux1049 with domain: int(0..2) (representing constraint ((x_00003_00008=4) + (x_00003_00002=4)))
c Both direct and order encoding.
c Var 'aux1049' order represents '0' with '4473'
c Var 'aux1049' direct represents '0' with '4473'
c Var 'aux1049' order represents '1' with '4474'
-4473 4474 0
c Var 'aux1049' direct represents '1' with '4475'
4473 -4474 4475 0
-4475 4474 0
-4475 -4473 0
c Var 'aux1049' direct represents '2' with '-4474'
4473 4475 -4474 0
c Encoding variable: aux1050 with domain: int(0..2) (representing constraint ((x_00003_00007=4) + (x_00003_00004=4)))
c Both direct and order encoding.
c Var 'aux1050' order represents '0' with '4476'
c Var 'aux1050' direct represents '0' with '4476'
c Var 'aux1050' order represents '1' with '4477'
-4476 4477 0
c Var 'aux1050' direct represents '1' with '4478'
4476 -4477 4478 0
-4478 4477 0
-4478 -4476 0
c Var 'aux1050' direct represents '2' with '-4477'
4476 4478 -4477 0
c Encoding variable: aux1051 with domain: int(0..2) (representing constraint ((x_00003_00006=4) + (x_00003_00005=4)))
c Both direct and order encoding.
c Var 'aux1051' order represents '0' with '4479'
c Var 'aux1051' direct represents '0' with '4479'
c Var 'aux1051' order represents '1' with '4480'
-4479 4480 0
c Var 'aux1051' direct represents '1' with '4481'
4479 -4480 4481 0
-4481 4480 0
-4481 -4479 0
c Var 'aux1051' direct represents '2' with '-4480'
4479 4481 -4480 0
c Encoding variable: aux1052 with domain: int(0..3) (representing constraint ((x_00003_00003=4) + aux1051))
c Both direct and order encoding.
c Var 'aux1052' order represents '0' with '4482'
c Var 'aux1052' direct represents '0' with '4482'
c Var 'aux1052' order represents '1' with '4483'
-4482 4483 0
c Var 'aux1052' direct represents '1' with '4484'
4482 -4483 4484 0
-4484 4483 0
-4484 -4482 0
c Var 'aux1052' order represents '2' with '4485'
-4483 4485 0
c Var 'aux1052' direct represents '2' with '4486'
4483 -4485 4486 0
-4486 4485 0
-4486 -4483 0
c Var 'aux1052' direct represents '3' with '-4485'
4482 4484 4486 -4485 0
c Encoding variable: aux1053 with domain: int(0..4) (representing constraint (aux1048 + aux1050))
c Both direct and order encoding.
c Var 'aux1053' order represents '0' with '4487'
c Var 'aux1053' direct represents '0' with '4487'
c Var 'aux1053' order represents '1' with '4488'
-4487 4488 0
c Var 'aux1053' direct represents '1' with '4489'
4487 -4488 4489 0
-4489 4488 0
-4489 -4487 0
c Var 'aux1053' order represents '2' with '4490'
-4488 4490 0
c Var 'aux1053' direct represents '2' with '4491'
4488 -4490 4491 0
-4491 4490 0
-4491 -4488 0
c Var 'aux1053' order represents '3' with '4492'
-4490 4492 0
c Var 'aux1053' direct represents '3' with '4493'
4490 -4492 4493 0
-4493 4492 0
-4493 -4490 0
c Var 'aux1053' direct represents '4' with '-4492'
4487 4489 4491 4493 -4492 0
c Encoding variable: aux1054 with domain: int(0..2) (representing constraint ((x_00003_00001=5) + (x_00003_00009=5)))
c Both direct and order encoding.
c Var 'aux1054' order represents '0' with '4494'
c Var 'aux1054' direct represents '0' with '4494'
c Var 'aux1054' order represents '1' with '4495'
-4494 4495 0
c Var 'aux1054' direct represents '1' with '4496'
4494 -4495 4496 0
-4496 4495 0
-4496 -4494 0
c Var 'aux1054' direct represents '2' with '-4495'
4494 4496 -4495 0
c Encoding variable: aux1055 with domain: int(0..2) (representing constraint ((x_00003_00008=5) + (x_00003_00002=5)))
c Both direct and order encoding.
c Var 'aux1055' order represents '0' with '4497'
c Var 'aux1055' direct represents '0' with '4497'
c Var 'aux1055' order represents '1' with '4498'
-4497 4498 0
c Var 'aux1055' direct represents '1' with '4499'
4497 -4498 4499 0
-4499 4498 0
-4499 -4497 0
c Var 'aux1055' direct represents '2' with '-4498'
4497 4499 -4498 0
c Encoding variable: aux1056 with domain: int(0..2) (representing constraint ((x_00003_00007=5) + (x_00003_00004=5)))
c Both direct and order encoding.
c Var 'aux1056' order represents '0' with '4500'
c Var 'aux1056' direct represents '0' with '4500'
c Var 'aux1056' order represents '1' with '4501'
-4500 4501 0
c Var 'aux1056' direct represents '1' with '4502'
4500 -4501 4502 0
-4502 4501 0
-4502 -4500 0
c Var 'aux1056' direct represents '2' with '-4501'
4500 4502 -4501 0
c Encoding variable: aux1057 with domain: int(0..2) (representing constraint ((x_00003_00006=5) + (x_00003_00005=5)))
c Both direct and order encoding.
c Var 'aux1057' order represents '0' with '4503'
c Var 'aux1057' direct represents '0' with '4503'
c Var 'aux1057' order represents '1' with '4504'
-4503 4504 0
c Var 'aux1057' direct represents '1' with '4505'
4503 -4504 4505 0
-4505 4504 0
-4505 -4503 0
c Var 'aux1057' direct represents '2' with '-4504'
4503 4505 -4504 0
c Encoding variable: aux1058 with domain: int(0..3) (representing constraint ((x_00003_00003=5) + aux1057))
c Both direct and order encoding.
c Var 'aux1058' order represents '0' with '4506'
c Var 'aux1058' direct represents '0' with '4506'
c Var 'aux1058' order represents '1' with '4507'
-4506 4507 0
c Var 'aux1058' direct represents '1' with '4508'
4506 -4507 4508 0
-4508 4507 0
-4508 -4506 0
c Var 'aux1058' order represents '2' with '4509'
-4507 4509 0
c Var 'aux1058' direct represents '2' with '4510'
4507 -4509 4510 0
-4510 4509 0
-4510 -4507 0
c Var 'aux1058' direct represents '3' with '-4509'
4506 4508 4510 -4509 0
c Encoding variable: aux1059 with domain: int(0..4) (representing constraint (aux1054 + aux1056))
c Both direct and order encoding.
c Var 'aux1059' order represents '0' with '4511'
c Var 'aux1059' direct represents '0' with '4511'
c Var 'aux1059' order represents '1' with '4512'
-4511 4512 0
c Var 'aux1059' direct represents '1' with '4513'
4511 -4512 4513 0
-4513 4512 0
-4513 -4511 0
c Var 'aux1059' order represents '2' with '4514'
-4512 4514 0
c Var 'aux1059' direct represents '2' with '4515'
4512 -4514 4515 0
-4515 4514 0
-4515 -4512 0
c Var 'aux1059' order represents '3' with '4516'
-4514 4516 0
c Var 'aux1059' direct represents '3' with '4517'
4514 -4516 4517 0
-4517 4516 0
-4517 -4514 0
c Var 'aux1059' direct represents '4' with '-4516'
4511 4513 4515 4517 -4516 0
c Encoding variable: aux1060 with domain: int(0..2) (representing constraint ((x_00003_00001=6) + (x_00003_00009=6)))
c Both direct and order encoding.
c Var 'aux1060' order represents '0' with '4518'
c Var 'aux1060' direct represents '0' with '4518'
c Var 'aux1060' order represents '1' with '4519'
-4518 4519 0
c Var 'aux1060' direct represents '1' with '4520'
4518 -4519 4520 0
-4520 4519 0
-4520 -4518 0
c Var 'aux1060' direct represents '2' with '-4519'
4518 4520 -4519 0
c Encoding variable: aux1061 with domain: int(0..2) (representing constraint ((x_00003_00008=6) + (x_00003_00002=6)))
c Both direct and order encoding.
c Var 'aux1061' order represents '0' with '4521'
c Var 'aux1061' direct represents '0' with '4521'
c Var 'aux1061' order represents '1' with '4522'
-4521 4522 0
c Var 'aux1061' direct represents '1' with '4523'
4521 -4522 4523 0
-4523 4522 0
-4523 -4521 0
c Var 'aux1061' direct represents '2' with '-4522'
4521 4523 -4522 0
c Encoding variable: aux1062 with domain: int(0..2) (representing constraint ((x_00003_00007=6) + (x_00003_00004=6)))
c Both direct and order encoding.
c Var 'aux1062' order represents '0' with '4524'
c Var 'aux1062' direct represents '0' with '4524'
c Var 'aux1062' order represents '1' with '4525'
-4524 4525 0
c Var 'aux1062' direct represents '1' with '4526'
4524 -4525 4526 0
-4526 4525 0
-4526 -4524 0
c Var 'aux1062' direct represents '2' with '-4525'
4524 4526 -4525 0
c Encoding variable: aux1063 with domain: int(0..2) (representing constraint ((x_00003_00006=6) + (x_00003_00005=6)))
c Both direct and order encoding.
c Var 'aux1063' order represents '0' with '4527'
c Var 'aux1063' direct represents '0' with '4527'
c Var 'aux1063' order represents '1' with '4528'
-4527 4528 0
c Var 'aux1063' direct represents '1' with '4529'
4527 -4528 4529 0
-4529 4528 0
-4529 -4527 0
c Var 'aux1063' direct represents '2' with '-4528'
4527 4529 -4528 0
c Encoding variable: aux1064 with domain: int(0..3) (representing constraint ((x_00003_00003=6) + aux1063))
c Both direct and order encoding.
c Var 'aux1064' order represents '0' with '4530'
c Var 'aux1064' direct represents '0' with '4530'
c Var 'aux1064' order represents '1' with '4531'
-4530 4531 0
c Var 'aux1064' direct represents '1' with '4532'
4530 -4531 4532 0
-4532 4531 0
-4532 -4530 0
c Var 'aux1064' order represents '2' with '4533'
-4531 4533 0
c Var 'aux1064' direct represents '2' with '4534'
4531 -4533 4534 0
-4534 4533 0
-4534 -4531 0
c Var 'aux1064' direct represents '3' with '-4533'
4530 4532 4534 -4533 0
c Encoding variable: aux1065 with domain: int(0..4) (representing constraint (aux1060 + aux1062))
c Both direct and order encoding.
c Var 'aux1065' order represents '0' with '4535'
c Var 'aux1065' direct represents '0' with '4535'
c Var 'aux1065' order represents '1' with '4536'
-4535 4536 0
c Var 'aux1065' direct represents '1' with '4537'
4535 -4536 4537 0
-4537 4536 0
-4537 -4535 0
c Var 'aux1065' order represents '2' with '4538'
-4536 4538 0
c Var 'aux1065' direct represents '2' with '4539'
4536 -4538 4539 0
-4539 4538 0
-4539 -4536 0
c Var 'aux1065' order represents '3' with '4540'
-4538 4540 0
c Var 'aux1065' direct represents '3' with '4541'
4538 -4540 4541 0
-4541 4540 0
-4541 -4538 0
c Var 'aux1065' direct represents '4' with '-4540'
4535 4537 4539 4541 -4540 0
c Encoding variable: aux1066 with domain: int(0..2) (representing constraint ((x_00003_00001=7) + (x_00003_00009=7)))
c Both direct and order encoding.
c Var 'aux1066' order represents '0' with '4542'
c Var 'aux1066' direct represents '0' with '4542'
c Var 'aux1066' order represents '1' with '4543'
-4542 4543 0
c Var 'aux1066' direct represents '1' with '4544'
4542 -4543 4544 0
-4544 4543 0
-4544 -4542 0
c Var 'aux1066' direct represents '2' with '-4543'
4542 4544 -4543 0
c Encoding variable: aux1067 with domain: int(0..2) (representing constraint ((x_00003_00008=7) + (x_00003_00002=7)))
c Both direct and order encoding.
c Var 'aux1067' order represents '0' with '4545'
c Var 'aux1067' direct represents '0' with '4545'
c Var 'aux1067' order represents '1' with '4546'
-4545 4546 0
c Var 'aux1067' direct represents '1' with '4547'
4545 -4546 4547 0
-4547 4546 0
-4547 -4545 0
c Var 'aux1067' direct represents '2' with '-4546'
4545 4547 -4546 0
c Encoding variable: aux1068 with domain: int(0..2) (representing constraint ((x_00003_00007=7) + (x_00003_00004=7)))
c Both direct and order encoding.
c Var 'aux1068' order represents '0' with '4548'
c Var 'aux1068' direct represents '0' with '4548'
c Var 'aux1068' order represents '1' with '4549'
-4548 4549 0
c Var 'aux1068' direct represents '1' with '4550'
4548 -4549 4550 0
-4550 4549 0
-4550 -4548 0
c Var 'aux1068' direct represents '2' with '-4549'
4548 4550 -4549 0
c Encoding variable: aux1069 with domain: int(0..2) (representing constraint ((x_00003_00006=7) + (x_00003_00005=7)))
c Both direct and order encoding.
c Var 'aux1069' order represents '0' with '4551'
c Var 'aux1069' direct represents '0' with '4551'
c Var 'aux1069' order represents '1' with '4552'
-4551 4552 0
c Var 'aux1069' direct represents '1' with '4553'
4551 -4552 4553 0
-4553 4552 0
-4553 -4551 0
c Var 'aux1069' direct represents '2' with '-4552'
4551 4553 -4552 0
c Encoding variable: aux1070 with domain: int(0..3) (representing constraint ((x_00003_00003=7) + aux1069))
c Both direct and order encoding.
c Var 'aux1070' order represents '0' with '4554'
c Var 'aux1070' direct represents '0' with '4554'
c Var 'aux1070' order represents '1' with '4555'
-4554 4555 0
c Var 'aux1070' direct represents '1' with '4556'
4554 -4555 4556 0
-4556 4555 0
-4556 -4554 0
c Var 'aux1070' order represents '2' with '4557'
-4555 4557 0
c Var 'aux1070' direct represents '2' with '4558'
4555 -4557 4558 0
-4558 4557 0
-4558 -4555 0
c Var 'aux1070' direct represents '3' with '-4557'
4554 4556 4558 -4557 0
c Encoding variable: aux1071 with domain: int(0..4) (representing constraint (aux1066 + aux1068))
c Both direct and order encoding.
c Var 'aux1071' order represents '0' with '4559'
c Var 'aux1071' direct represents '0' with '4559'
c Var 'aux1071' order represents '1' with '4560'
-4559 4560 0
c Var 'aux1071' direct represents '1' with '4561'
4559 -4560 4561 0
-4561 4560 0
-4561 -4559 0
c Var 'aux1071' order represents '2' with '4562'
-4560 4562 0
c Var 'aux1071' direct represents '2' with '4563'
4560 -4562 4563 0
-4563 4562 0
-4563 -4560 0
c Var 'aux1071' order represents '3' with '4564'
-4562 4564 0
c Var 'aux1071' direct represents '3' with '4565'
4562 -4564 4565 0
-4565 4564 0
-4565 -4562 0
c Var 'aux1071' direct represents '4' with '-4564'
4559 4561 4563 4565 -4564 0
c Encoding variable: aux1072 with domain: int(0..2) (representing constraint ((x_00003_00001=8) + (x_00003_00009=8)))
c Both direct and order encoding.
c Var 'aux1072' order represents '0' with '4566'
c Var 'aux1072' direct represents '0' with '4566'
c Var 'aux1072' order represents '1' with '4567'
-4566 4567 0
c Var 'aux1072' direct represents '1' with '4568'
4566 -4567 4568 0
-4568 4567 0
-4568 -4566 0
c Var 'aux1072' direct represents '2' with '-4567'
4566 4568 -4567 0
c Encoding variable: aux1073 with domain: int(0..2) (representing constraint ((x_00003_00008=8) + (x_00003_00002=8)))
c Both direct and order encoding.
c Var 'aux1073' order represents '0' with '4569'
c Var 'aux1073' direct represents '0' with '4569'
c Var 'aux1073' order represents '1' with '4570'
-4569 4570 0
c Var 'aux1073' direct represents '1' with '4571'
4569 -4570 4571 0
-4571 4570 0
-4571 -4569 0
c Var 'aux1073' direct represents '2' with '-4570'
4569 4571 -4570 0
c Encoding variable: aux1074 with domain: int(0..2) (representing constraint ((x_00003_00007=8) + (x_00003_00004=8)))
c Both direct and order encoding.
c Var 'aux1074' order represents '0' with '4572'
c Var 'aux1074' direct represents '0' with '4572'
c Var 'aux1074' order represents '1' with '4573'
-4572 4573 0
c Var 'aux1074' direct represents '1' with '4574'
4572 -4573 4574 0
-4574 4573 0
-4574 -4572 0
c Var 'aux1074' direct represents '2' with '-4573'
4572 4574 -4573 0
c Encoding variable: aux1075 with domain: int(0..2) (representing constraint ((x_00003_00006=8) + (x_00003_00005=8)))
c Both direct and order encoding.
c Var 'aux1075' order represents '0' with '4575'
c Var 'aux1075' direct represents '0' with '4575'
c Var 'aux1075' order represents '1' with '4576'
-4575 4576 0
c Var 'aux1075' direct represents '1' with '4577'
4575 -4576 4577 0
-4577 4576 0
-4577 -4575 0
c Var 'aux1075' direct represents '2' with '-4576'
4575 4577 -4576 0
c Encoding variable: aux1076 with domain: int(0..3) (representing constraint ((x_00003_00003=8) + aux1075))
c Both direct and order encoding.
c Var 'aux1076' order represents '0' with '4578'
c Var 'aux1076' direct represents '0' with '4578'
c Var 'aux1076' order represents '1' with '4579'
-4578 4579 0
c Var 'aux1076' direct represents '1' with '4580'
4578 -4579 4580 0
-4580 4579 0
-4580 -4578 0
c Var 'aux1076' order represents '2' with '4581'
-4579 4581 0
c Var 'aux1076' direct represents '2' with '4582'
4579 -4581 4582 0
-4582 4581 0
-4582 -4579 0
c Var 'aux1076' direct represents '3' with '-4581'
4578 4580 4582 -4581 0
c Encoding variable: aux1077 with domain: int(0..4) (representing constraint (aux1072 + aux1074))
c Both direct and order encoding.
c Var 'aux1077' order represents '0' with '4583'
c Var 'aux1077' direct represents '0' with '4583'
c Var 'aux1077' order represents '1' with '4584'
-4583 4584 0
c Var 'aux1077' direct represents '1' with '4585'
4583 -4584 4585 0
-4585 4584 0
-4585 -4583 0
c Var 'aux1077' order represents '2' with '4586'
-4584 4586 0
c Var 'aux1077' direct represents '2' with '4587'
4584 -4586 4587 0
-4587 4586 0
-4587 -4584 0
c Var 'aux1077' order represents '3' with '4588'
-4586 4588 0
c Var 'aux1077' direct represents '3' with '4589'
4586 -4588 4589 0
-4589 4588 0
-4589 -4586 0
c Var 'aux1077' direct represents '4' with '-4588'
4583 4585 4587 4589 -4588 0
c Encoding variable: aux1078 with domain: int(0..2) (representing constraint ((x_00003_00001=9) + (x_00003_00009=9)))
c Both direct and order encoding.
c Var 'aux1078' order represents '0' with '4590'
c Var 'aux1078' direct represents '0' with '4590'
c Var 'aux1078' order represents '1' with '4591'
-4590 4591 0
c Var 'aux1078' direct represents '1' with '4592'
4590 -4591 4592 0
-4592 4591 0
-4592 -4590 0
c Var 'aux1078' direct represents '2' with '-4591'
4590 4592 -4591 0
c Encoding variable: aux1079 with domain: int(0..2) (representing constraint ((x_00003_00008=9) + (x_00003_00002=9)))
c Both direct and order encoding.
c Var 'aux1079' order represents '0' with '4593'
c Var 'aux1079' direct represents '0' with '4593'
c Var 'aux1079' order represents '1' with '4594'
-4593 4594 0
c Var 'aux1079' direct represents '1' with '4595'
4593 -4594 4595 0
-4595 4594 0
-4595 -4593 0
c Var 'aux1079' direct represents '2' with '-4594'
4593 4595 -4594 0
c Encoding variable: aux1080 with domain: int(0..2) (representing constraint ((x_00003_00007=9) + (x_00003_00004=9)))
c Both direct and order encoding.
c Var 'aux1080' order represents '0' with '4596'
c Var 'aux1080' direct represents '0' with '4596'
c Var 'aux1080' order represents '1' with '4597'
-4596 4597 0
c Var 'aux1080' direct represents '1' with '4598'
4596 -4597 4598 0
-4598 4597 0
-4598 -4596 0
c Var 'aux1080' direct represents '2' with '-4597'
4596 4598 -4597 0
c Encoding variable: aux1081 with domain: int(0..2) (representing constraint ((x_00003_00006=9) + (x_00003_00005=9)))
c Both direct and order encoding.
c Var 'aux1081' order represents '0' with '4599'
c Var 'aux1081' direct represents '0' with '4599'
c Var 'aux1081' order represents '1' with '4600'
-4599 4600 0
c Var 'aux1081' direct represents '1' with '4601'
4599 -4600 4601 0
-4601 4600 0
-4601 -4599 0
c Var 'aux1081' direct represents '2' with '-4600'
4599 4601 -4600 0
c Encoding variable: aux1082 with domain: int(0..3) (representing constraint ((x_00003_00003=9) + aux1081))
c Both direct and order encoding.
c Var 'aux1082' order represents '0' with '4602'
c Var 'aux1082' direct represents '0' with '4602'
c Var 'aux1082' order represents '1' with '4603'
-4602 4603 0
c Var 'aux1082' direct represents '1' with '4604'
4602 -4603 4604 0
-4604 4603 0
-4604 -4602 0
c Var 'aux1082' order represents '2' with '4605'
-4603 4605 0
c Var 'aux1082' direct represents '2' with '4606'
4603 -4605 4606 0
-4606 4605 0
-4606 -4603 0
c Var 'aux1082' direct represents '3' with '-4605'
4602 4604 4606 -4605 0
c Encoding variable: aux1083 with domain: int(0..4) (representing constraint (aux1078 + aux1080))
c Both direct and order encoding.
c Var 'aux1083' order represents '0' with '4607'
c Var 'aux1083' direct represents '0' with '4607'
c Var 'aux1083' order represents '1' with '4608'
-4607 4608 0
c Var 'aux1083' direct represents '1' with '4609'
4607 -4608 4609 0
-4609 4608 0
-4609 -4607 0
c Var 'aux1083' order represents '2' with '4610'
-4608 4610 0
c Var 'aux1083' direct represents '2' with '4611'
4608 -4610 4611 0
-4611 4610 0
-4611 -4608 0
c Var 'aux1083' order represents '3' with '4612'
-4610 4612 0
c Var 'aux1083' direct represents '3' with '4613'
4610 -4612 4613 0
-4613 4612 0
-4613 -4610 0
c Var 'aux1083' direct represents '4' with '-4612'
4607 4609 4611 4613 -4612 0
c Encoding variable: aux1084 with domain: int(0..2) (representing constraint ((x_00004_00001=1) + (x_00004_00009=1)))
c Both direct and order encoding.
c Var 'aux1084' order represents '0' with '4614'
c Var 'aux1084' direct represents '0' with '4614'
c Var 'aux1084' order represents '1' with '4615'
-4614 4615 0
c Var 'aux1084' direct represents '1' with '4616'
4614 -4615 4616 0
-4616 4615 0
-4616 -4614 0
c Var 'aux1084' direct represents '2' with '-4615'
4614 4616 -4615 0
c Encoding variable: aux1085 with domain: int(0..2) (representing constraint ((x_00004_00008=1) + (x_00004_00002=1)))
c Both direct and order encoding.
c Var 'aux1085' order represents '0' with '4617'
c Var 'aux1085' direct represents '0' with '4617'
c Var 'aux1085' order represents '1' with '4618'
-4617 4618 0
c Var 'aux1085' direct represents '1' with '4619'
4617 -4618 4619 0
-4619 4618 0
-4619 -4617 0
c Var 'aux1085' direct represents '2' with '-4618'
4617 4619 -4618 0
c Encoding variable: aux1086 with domain: int(0..2) (representing constraint ((x_00004_00007=1) + (x_00004_00004=1)))
c Both direct and order encoding.
c Var 'aux1086' order represents '0' with '4620'
c Var 'aux1086' direct represents '0' with '4620'
c Var 'aux1086' order represents '1' with '4621'
-4620 4621 0
c Var 'aux1086' direct represents '1' with '4622'
4620 -4621 4622 0
-4622 4621 0
-4622 -4620 0
c Var 'aux1086' direct represents '2' with '-4621'
4620 4622 -4621 0
c Encoding variable: aux1087 with domain: int(0..2) (representing constraint ((x_00004_00006=1) + (x_00004_00005=1)))
c Both direct and order encoding.
c Var 'aux1087' order represents '0' with '4623'
c Var 'aux1087' direct represents '0' with '4623'
c Var 'aux1087' order represents '1' with '4624'
-4623 4624 0
c Var 'aux1087' direct represents '1' with '4625'
4623 -4624 4625 0
-4625 4624 0
-4625 -4623 0
c Var 'aux1087' direct represents '2' with '-4624'
4623 4625 -4624 0
c Encoding variable: aux1088 with domain: int(0..3) (representing constraint ((x_00004_00003=1) + aux1087))
c Both direct and order encoding.
c Var 'aux1088' order represents '0' with '4626'
c Var 'aux1088' direct represents '0' with '4626'
c Var 'aux1088' order represents '1' with '4627'
-4626 4627 0
c Var 'aux1088' direct represents '1' with '4628'
4626 -4627 4628 0
-4628 4627 0
-4628 -4626 0
c Var 'aux1088' order represents '2' with '4629'
-4627 4629 0
c Var 'aux1088' direct represents '2' with '4630'
4627 -4629 4630 0
-4630 4629 0
-4630 -4627 0
c Var 'aux1088' direct represents '3' with '-4629'
4626 4628 4630 -4629 0
c Encoding variable: aux1089 with domain: int(0..4) (representing constraint (aux1084 + aux1086))
c Both direct and order encoding.
c Var 'aux1089' order represents '0' with '4631'
c Var 'aux1089' direct represents '0' with '4631'
c Var 'aux1089' order represents '1' with '4632'
-4631 4632 0
c Var 'aux1089' direct represents '1' with '4633'
4631 -4632 4633 0
-4633 4632 0
-4633 -4631 0
c Var 'aux1089' order represents '2' with '4634'
-4632 4634 0
c Var 'aux1089' direct represents '2' with '4635'
4632 -4634 4635 0
-4635 4634 0
-4635 -4632 0
c Var 'aux1089' order represents '3' with '4636'
-4634 4636 0
c Var 'aux1089' direct represents '3' with '4637'
4634 -4636 4637 0
-4637 4636 0
-4637 -4634 0
c Var 'aux1089' direct represents '4' with '-4636'
4631 4633 4635 4637 -4636 0
c Encoding variable: aux1090 with domain: int(0..2) (representing constraint ((x_00004_00001=2) + (x_00004_00009=2)))
c Both direct and order encoding.
c Var 'aux1090' order represents '0' with '4638'
c Var 'aux1090' direct represents '0' with '4638'
c Var 'aux1090' order represents '1' with '4639'
-4638 4639 0
c Var 'aux1090' direct represents '1' with '4640'
4638 -4639 4640 0
-4640 4639 0
-4640 -4638 0
c Var 'aux1090' direct represents '2' with '-4639'
4638 4640 -4639 0
c Encoding variable: aux1091 with domain: int(0..2) (representing constraint ((x_00004_00008=2) + (x_00004_00002=2)))
c Both direct and order encoding.
c Var 'aux1091' order represents '0' with '4641'
c Var 'aux1091' direct represents '0' with '4641'
c Var 'aux1091' order represents '1' with '4642'
-4641 4642 0
c Var 'aux1091' direct represents '1' with '4643'
4641 -4642 4643 0
-4643 4642 0
-4643 -4641 0
c Var 'aux1091' direct represents '2' with '-4642'
4641 4643 -4642 0
c Encoding variable: aux1092 with domain: int(0..2) (representing constraint ((x_00004_00007=2) + (x_00004_00004=2)))
c Both direct and order encoding.
c Var 'aux1092' order represents '0' with '4644'
c Var 'aux1092' direct represents '0' with '4644'
c Var 'aux1092' order represents '1' with '4645'
-4644 4645 0
c Var 'aux1092' direct represents '1' with '4646'
4644 -4645 4646 0
-4646 4645 0
-4646 -4644 0
c Var 'aux1092' direct represents '2' with '-4645'
4644 4646 -4645 0
c Encoding variable: aux1093 with domain: int(0..2) (representing constraint ((x_00004_00006=2) + (x_00004_00005=2)))
c Both direct and order encoding.
c Var 'aux1093' order represents '0' with '4647'
c Var 'aux1093' direct represents '0' with '4647'
c Var 'aux1093' order represents '1' with '4648'
-4647 4648 0
c Var 'aux1093' direct represents '1' with '4649'
4647 -4648 4649 0
-4649 4648 0
-4649 -4647 0
c Var 'aux1093' direct represents '2' with '-4648'
4647 4649 -4648 0
c Encoding variable: aux1094 with domain: int(0..3) (representing constraint ((x_00004_00003=2) + aux1093))
c Both direct and order encoding.
c Var 'aux1094' order represents '0' with '4650'
c Var 'aux1094' direct represents '0' with '4650'
c Var 'aux1094' order represents '1' with '4651'
-4650 4651 0
c Var 'aux1094' direct represents '1' with '4652'
4650 -4651 4652 0
-4652 4651 0
-4652 -4650 0
c Var 'aux1094' order represents '2' with '4653'
-4651 4653 0
c Var 'aux1094' direct represents '2' with '4654'
4651 -4653 4654 0
-4654 4653 0
-4654 -4651 0
c Var 'aux1094' direct represents '3' with '-4653'
4650 4652 4654 -4653 0
c Encoding variable: aux1095 with domain: int(0..4) (representing constraint (aux1090 + aux1092))
c Both direct and order encoding.
c Var 'aux1095' order represents '0' with '4655'
c Var 'aux1095' direct represents '0' with '4655'
c Var 'aux1095' order represents '1' with '4656'
-4655 4656 0
c Var 'aux1095' direct represents '1' with '4657'
4655 -4656 4657 0
-4657 4656 0
-4657 -4655 0
c Var 'aux1095' order represents '2' with '4658'
-4656 4658 0
c Var 'aux1095' direct represents '2' with '4659'
4656 -4658 4659 0
-4659 4658 0
-4659 -4656 0
c Var 'aux1095' order represents '3' with '4660'
-4658 4660 0
c Var 'aux1095' direct represents '3' with '4661'
4658 -4660 4661 0
-4661 4660 0
-4661 -4658 0
c Var 'aux1095' direct represents '4' with '-4660'
4655 4657 4659 4661 -4660 0
c Encoding variable: aux1096 with domain: int(0..2) (representing constraint ((x_00004_00001=3) + (x_00004_00009=3)))
c Both direct and order encoding.
c Var 'aux1096' order represents '0' with '4662'
c Var 'aux1096' direct represents '0' with '4662'
c Var 'aux1096' order represents '1' with '4663'
-4662 4663 0
c Var 'aux1096' direct represents '1' with '4664'
4662 -4663 4664 0
-4664 4663 0
-4664 -4662 0
c Var 'aux1096' direct represents '2' with '-4663'
4662 4664 -4663 0
c Encoding variable: aux1097 with domain: int(0..2) (representing constraint ((x_00004_00008=3) + (x_00004_00002=3)))
c Both direct and order encoding.
c Var 'aux1097' order represents '0' with '4665'
c Var 'aux1097' direct represents '0' with '4665'
c Var 'aux1097' order represents '1' with '4666'
-4665 4666 0
c Var 'aux1097' direct represents '1' with '4667'
4665 -4666 4667 0
-4667 4666 0
-4667 -4665 0
c Var 'aux1097' direct represents '2' with '-4666'
4665 4667 -4666 0
c Encoding variable: aux1098 with domain: int(0..2) (representing constraint ((x_00004_00007=3) + (x_00004_00004=3)))
c Both direct and order encoding.
c Var 'aux1098' order represents '0' with '4668'
c Var 'aux1098' direct represents '0' with '4668'
c Var 'aux1098' order represents '1' with '4669'
-4668 4669 0
c Var 'aux1098' direct represents '1' with '4670'
4668 -4669 4670 0
-4670 4669 0
-4670 -4668 0
c Var 'aux1098' direct represents '2' with '-4669'
4668 4670 -4669 0
c Encoding variable: aux1099 with domain: int(0..2) (representing constraint ((x_00004_00006=3) + (x_00004_00005=3)))
c Both direct and order encoding.
c Var 'aux1099' order represents '0' with '4671'
c Var 'aux1099' direct represents '0' with '4671'
c Var 'aux1099' order represents '1' with '4672'
-4671 4672 0
c Var 'aux1099' direct represents '1' with '4673'
4671 -4672 4673 0
-4673 4672 0
-4673 -4671 0
c Var 'aux1099' direct represents '2' with '-4672'
4671 4673 -4672 0
c Encoding variable: aux1100 with domain: int(0..3) (representing constraint ((x_00004_00003=3) + aux1099))
c Both direct and order encoding.
c Var 'aux1100' order represents '0' with '4674'
c Var 'aux1100' direct represents '0' with '4674'
c Var 'aux1100' order represents '1' with '4675'
-4674 4675 0
c Var 'aux1100' direct represents '1' with '4676'
4674 -4675 4676 0
-4676 4675 0
-4676 -4674 0
c Var 'aux1100' order represents '2' with '4677'
-4675 4677 0
c Var 'aux1100' direct represents '2' with '4678'
4675 -4677 4678 0
-4678 4677 0
-4678 -4675 0
c Var 'aux1100' direct represents '3' with '-4677'
4674 4676 4678 -4677 0
c Encoding variable: aux1101 with domain: int(0..4) (representing constraint (aux1096 + aux1098))
c Both direct and order encoding.
c Var 'aux1101' order represents '0' with '4679'
c Var 'aux1101' direct represents '0' with '4679'
c Var 'aux1101' order represents '1' with '4680'
-4679 4680 0
c Var 'aux1101' direct represents '1' with '4681'
4679 -4680 4681 0
-4681 4680 0
-4681 -4679 0
c Var 'aux1101' order represents '2' with '4682'
-4680 4682 0
c Var 'aux1101' direct represents '2' with '4683'
4680 -4682 4683 0
-4683 4682 0
-4683 -4680 0
c Var 'aux1101' order represents '3' with '4684'
-4682 4684 0
c Var 'aux1101' direct represents '3' with '4685'
4682 -4684 4685 0
-4685 4684 0
-4685 -4682 0
c Var 'aux1101' direct represents '4' with '-4684'
4679 4681 4683 4685 -4684 0
c Encoding variable: aux1102 with domain: int(0..2) (representing constraint ((x_00004_00001=4) + (x_00004_00009=4)))
c Both direct and order encoding.
c Var 'aux1102' order represents '0' with '4686'
c Var 'aux1102' direct represents '0' with '4686'
c Var 'aux1102' order represents '1' with '4687'
-4686 4687 0
c Var 'aux1102' direct represents '1' with '4688'
4686 -4687 4688 0
-4688 4687 0
-4688 -4686 0
c Var 'aux1102' direct represents '2' with '-4687'
4686 4688 -4687 0
c Encoding variable: aux1103 with domain: int(0..2) (representing constraint ((x_00004_00008=4) + (x_00004_00002=4)))
c Both direct and order encoding.
c Var 'aux1103' order represents '0' with '4689'
c Var 'aux1103' direct represents '0' with '4689'
c Var 'aux1103' order represents '1' with '4690'
-4689 4690 0
c Var 'aux1103' direct represents '1' with '4691'
4689 -4690 4691 0
-4691 4690 0
-4691 -4689 0
c Var 'aux1103' direct represents '2' with '-4690'
4689 4691 -4690 0
c Encoding variable: aux1104 with domain: int(0..2) (representing constraint ((x_00004_00007=4) + (x_00004_00004=4)))
c Both direct and order encoding.
c Var 'aux1104' order represents '0' with '4692'
c Var 'aux1104' direct represents '0' with '4692'
c Var 'aux1104' order represents '1' with '4693'
-4692 4693 0
c Var 'aux1104' direct represents '1' with '4694'
4692 -4693 4694 0
-4694 4693 0
-4694 -4692 0
c Var 'aux1104' direct represents '2' with '-4693'
4692 4694 -4693 0
c Encoding variable: aux1105 with domain: int(0..2) (representing constraint ((x_00004_00006=4) + (x_00004_00005=4)))
c Both direct and order encoding.
c Var 'aux1105' order represents '0' with '4695'
c Var 'aux1105' direct represents '0' with '4695'
c Var 'aux1105' order represents '1' with '4696'
-4695 4696 0
c Var 'aux1105' direct represents '1' with '4697'
4695 -4696 4697 0
-4697 4696 0
-4697 -4695 0
c Var 'aux1105' direct represents '2' with '-4696'
4695 4697 -4696 0
c Encoding variable: aux1106 with domain: int(0..3) (representing constraint ((x_00004_00003=4) + aux1105))
c Both direct and order encoding.
c Var 'aux1106' order represents '0' with '4698'
c Var 'aux1106' direct represents '0' with '4698'
c Var 'aux1106' order represents '1' with '4699'
-4698 4699 0
c Var 'aux1106' direct represents '1' with '4700'
4698 -4699 4700 0
-4700 4699 0
-4700 -4698 0
c Var 'aux1106' order represents '2' with '4701'
-4699 4701 0
c Var 'aux1106' direct represents '2' with '4702'
4699 -4701 4702 0
-4702 4701 0
-4702 -4699 0
c Var 'aux1106' direct represents '3' with '-4701'
4698 4700 4702 -4701 0
c Encoding variable: aux1107 with domain: int(0..4) (representing constraint (aux1102 + aux1104))
c Both direct and order encoding.
c Var 'aux1107' order represents '0' with '4703'
c Var 'aux1107' direct represents '0' with '4703'
c Var 'aux1107' order represents '1' with '4704'
-4703 4704 0
c Var 'aux1107' direct represents '1' with '4705'
4703 -4704 4705 0
-4705 4704 0
-4705 -4703 0
c Var 'aux1107' order represents '2' with '4706'
-4704 4706 0
c Var 'aux1107' direct represents '2' with '4707'
4704 -4706 4707 0
-4707 4706 0
-4707 -4704 0
c Var 'aux1107' order represents '3' with '4708'
-4706 4708 0
c Var 'aux1107' direct represents '3' with '4709'
4706 -4708 4709 0
-4709 4708 0
-4709 -4706 0
c Var 'aux1107' direct represents '4' with '-4708'
4703 4705 4707 4709 -4708 0
c Encoding variable: aux1108 with domain: int(0..2) (representing constraint ((x_00004_00001=5) + (x_00004_00009=5)))
c Both direct and order encoding.
c Var 'aux1108' order represents '0' with '4710'
c Var 'aux1108' direct represents '0' with '4710'
c Var 'aux1108' order represents '1' with '4711'
-4710 4711 0
c Var 'aux1108' direct represents '1' with '4712'
4710 -4711 4712 0
-4712 4711 0
-4712 -4710 0
c Var 'aux1108' direct represents '2' with '-4711'
4710 4712 -4711 0
c Encoding variable: aux1109 with domain: int(0..2) (representing constraint ((x_00004_00008=5) + (x_00004_00002=5)))
c Both direct and order encoding.
c Var 'aux1109' order represents '0' with '4713'
c Var 'aux1109' direct represents '0' with '4713'
c Var 'aux1109' order represents '1' with '4714'
-4713 4714 0
c Var 'aux1109' direct represents '1' with '4715'
4713 -4714 4715 0
-4715 4714 0
-4715 -4713 0
c Var 'aux1109' direct represents '2' with '-4714'
4713 4715 -4714 0
c Encoding variable: aux1110 with domain: int(0..2) (representing constraint ((x_00004_00007=5) + (x_00004_00004=5)))
c Both direct and order encoding.
c Var 'aux1110' order represents '0' with '4716'
c Var 'aux1110' direct represents '0' with '4716'
c Var 'aux1110' order represents '1' with '4717'
-4716 4717 0
c Var 'aux1110' direct represents '1' with '4718'
4716 -4717 4718 0
-4718 4717 0
-4718 -4716 0
c Var 'aux1110' direct represents '2' with '-4717'
4716 4718 -4717 0
c Encoding variable: aux1111 with domain: int(0..2) (representing constraint ((x_00004_00006=5) + (x_00004_00005=5)))
c Both direct and order encoding.
c Var 'aux1111' order represents '0' with '4719'
c Var 'aux1111' direct represents '0' with '4719'
c Var 'aux1111' order represents '1' with '4720'
-4719 4720 0
c Var 'aux1111' direct represents '1' with '4721'
4719 -4720 4721 0
-4721 4720 0
-4721 -4719 0
c Var 'aux1111' direct represents '2' with '-4720'
4719 4721 -4720 0
c Encoding variable: aux1112 with domain: int(0..3) (representing constraint ((x_00004_00003=5) + aux1111))
c Both direct and order encoding.
c Var 'aux1112' order represents '0' with '4722'
c Var 'aux1112' direct represents '0' with '4722'
c Var 'aux1112' order represents '1' with '4723'
-4722 4723 0
c Var 'aux1112' direct represents '1' with '4724'
4722 -4723 4724 0
-4724 4723 0
-4724 -4722 0
c Var 'aux1112' order represents '2' with '4725'
-4723 4725 0
c Var 'aux1112' direct represents '2' with '4726'
4723 -4725 4726 0
-4726 4725 0
-4726 -4723 0
c Var 'aux1112' direct represents '3' with '-4725'
4722 4724 4726 -4725 0
c Encoding variable: aux1113 with domain: int(0..4) (representing constraint (aux1108 + aux1110))
c Both direct and order encoding.
c Var 'aux1113' order represents '0' with '4727'
c Var 'aux1113' direct represents '0' with '4727'
c Var 'aux1113' order represents '1' with '4728'
-4727 4728 0
c Var 'aux1113' direct represents '1' with '4729'
4727 -4728 4729 0
-4729 4728 0
-4729 -4727 0
c Var 'aux1113' order represents '2' with '4730'
-4728 4730 0
c Var 'aux1113' direct represents '2' with '4731'
4728 -4730 4731 0
-4731 4730 0
-4731 -4728 0
c Var 'aux1113' order represents '3' with '4732'
-4730 4732 0
c Var 'aux1113' direct represents '3' with '4733'
4730 -4732 4733 0
-4733 4732 0
-4733 -4730 0
c Var 'aux1113' direct represents '4' with '-4732'
4727 4729 4731 4733 -4732 0
c Encoding variable: aux1114 with domain: int(0..2) (representing constraint ((x_00004_00001=6) + (x_00004_00009=6)))
c Both direct and order encoding.
c Var 'aux1114' order represents '0' with '4734'
c Var 'aux1114' direct represents '0' with '4734'
c Var 'aux1114' order represents '1' with '4735'
-4734 4735 0
c Var 'aux1114' direct represents '1' with '4736'
4734 -4735 4736 0
-4736 4735 0
-4736 -4734 0
c Var 'aux1114' direct represents '2' with '-4735'
4734 4736 -4735 0
c Encoding variable: aux1115 with domain: int(0..2) (representing constraint ((x_00004_00008=6) + (x_00004_00002=6)))
c Both direct and order encoding.
c Var 'aux1115' order represents '0' with '4737'
c Var 'aux1115' direct represents '0' with '4737'
c Var 'aux1115' order represents '1' with '4738'
-4737 4738 0
c Var 'aux1115' direct represents '1' with '4739'
4737 -4738 4739 0
-4739 4738 0
-4739 -4737 0
c Var 'aux1115' direct represents '2' with '-4738'
4737 4739 -4738 0
c Encoding variable: aux1116 with domain: int(0..2) (representing constraint ((x_00004_00007=6) + (x_00004_00004=6)))
c Both direct and order encoding.
c Var 'aux1116' order represents '0' with '4740'
c Var 'aux1116' direct represents '0' with '4740'
c Var 'aux1116' order represents '1' with '4741'
-4740 4741 0
c Var 'aux1116' direct represents '1' with '4742'
4740 -4741 4742 0
-4742 4741 0
-4742 -4740 0
c Var 'aux1116' direct represents '2' with '-4741'
4740 4742 -4741 0
c Encoding variable: aux1117 with domain: int(0..2) (representing constraint ((x_00004_00006=6) + (x_00004_00005=6)))
c Both direct and order encoding.
c Var 'aux1117' order represents '0' with '4743'
c Var 'aux1117' direct represents '0' with '4743'
c Var 'aux1117' order represents '1' with '4744'
-4743 4744 0
c Var 'aux1117' direct represents '1' with '4745'
4743 -4744 4745 0
-4745 4744 0
-4745 -4743 0
c Var 'aux1117' direct represents '2' with '-4744'
4743 4745 -4744 0
c Encoding variable: aux1118 with domain: int(0..3) (representing constraint ((x_00004_00003=6) + aux1117))
c Both direct and order encoding.
c Var 'aux1118' order represents '0' with '4746'
c Var 'aux1118' direct represents '0' with '4746'
c Var 'aux1118' order represents '1' with '4747'
-4746 4747 0
c Var 'aux1118' direct represents '1' with '4748'
4746 -4747 4748 0
-4748 4747 0
-4748 -4746 0
c Var 'aux1118' order represents '2' with '4749'
-4747 4749 0
c Var 'aux1118' direct represents '2' with '4750'
4747 -4749 4750 0
-4750 4749 0
-4750 -4747 0
c Var 'aux1118' direct represents '3' with '-4749'
4746 4748 4750 -4749 0
c Encoding variable: aux1119 with domain: int(0..4) (representing constraint (aux1114 + aux1116))
c Both direct and order encoding.
c Var 'aux1119' order represents '0' with '4751'
c Var 'aux1119' direct represents '0' with '4751'
c Var 'aux1119' order represents '1' with '4752'
-4751 4752 0
c Var 'aux1119' direct represents '1' with '4753'
4751 -4752 4753 0
-4753 4752 0
-4753 -4751 0
c Var 'aux1119' order represents '2' with '4754'
-4752 4754 0
c Var 'aux1119' direct represents '2' with '4755'
4752 -4754 4755 0
-4755 4754 0
-4755 -4752 0
c Var 'aux1119' order represents '3' with '4756'
-4754 4756 0
c Var 'aux1119' direct represents '3' with '4757'
4754 -4756 4757 0
-4757 4756 0
-4757 -4754 0
c Var 'aux1119' direct represents '4' with '-4756'
4751 4753 4755 4757 -4756 0
c Encoding variable: aux1120 with domain: int(0..2) (representing constraint ((x_00004_00001=7) + (x_00004_00009=7)))
c Both direct and order encoding.
c Var 'aux1120' order represents '0' with '4758'
c Var 'aux1120' direct represents '0' with '4758'
c Var 'aux1120' order represents '1' with '4759'
-4758 4759 0
c Var 'aux1120' direct represents '1' with '4760'
4758 -4759 4760 0
-4760 4759 0
-4760 -4758 0
c Var 'aux1120' direct represents '2' with '-4759'
4758 4760 -4759 0
c Encoding variable: aux1121 with domain: int(0..2) (representing constraint ((x_00004_00008=7) + (x_00004_00002=7)))
c Both direct and order encoding.
c Var 'aux1121' order represents '0' with '4761'
c Var 'aux1121' direct represents '0' with '4761'
c Var 'aux1121' order represents '1' with '4762'
-4761 4762 0
c Var 'aux1121' direct represents '1' with '4763'
4761 -4762 4763 0
-4763 4762 0
-4763 -4761 0
c Var 'aux1121' direct represents '2' with '-4762'
4761 4763 -4762 0
c Encoding variable: aux1122 with domain: int(0..2) (representing constraint ((x_00004_00007=7) + (x_00004_00004=7)))
c Both direct and order encoding.
c Var 'aux1122' order represents '0' with '4764'
c Var 'aux1122' direct represents '0' with '4764'
c Var 'aux1122' order represents '1' with '4765'
-4764 4765 0
c Var 'aux1122' direct represents '1' with '4766'
4764 -4765 4766 0
-4766 4765 0
-4766 -4764 0
c Var 'aux1122' direct represents '2' with '-4765'
4764 4766 -4765 0
c Encoding variable: aux1123 with domain: int(0..2) (representing constraint ((x_00004_00006=7) + (x_00004_00005=7)))
c Both direct and order encoding.
c Var 'aux1123' order represents '0' with '4767'
c Var 'aux1123' direct represents '0' with '4767'
c Var 'aux1123' order represents '1' with '4768'
-4767 4768 0
c Var 'aux1123' direct represents '1' with '4769'
4767 -4768 4769 0
-4769 4768 0
-4769 -4767 0
c Var 'aux1123' direct represents '2' with '-4768'
4767 4769 -4768 0
c Encoding variable: aux1124 with domain: int(0..3) (representing constraint ((x_00004_00003=7) + aux1123))
c Both direct and order encoding.
c Var 'aux1124' order represents '0' with '4770'
c Var 'aux1124' direct represents '0' with '4770'
c Var 'aux1124' order represents '1' with '4771'
-4770 4771 0
c Var 'aux1124' direct represents '1' with '4772'
4770 -4771 4772 0
-4772 4771 0
-4772 -4770 0
c Var 'aux1124' order represents '2' with '4773'
-4771 4773 0
c Var 'aux1124' direct represents '2' with '4774'
4771 -4773 4774 0
-4774 4773 0
-4774 -4771 0
c Var 'aux1124' direct represents '3' with '-4773'
4770 4772 4774 -4773 0
c Encoding variable: aux1125 with domain: int(0..4) (representing constraint (aux1120 + aux1122))
c Both direct and order encoding.
c Var 'aux1125' order represents '0' with '4775'
c Var 'aux1125' direct represents '0' with '4775'
c Var 'aux1125' order represents '1' with '4776'
-4775 4776 0
c Var 'aux1125' direct represents '1' with '4777'
4775 -4776 4777 0
-4777 4776 0
-4777 -4775 0
c Var 'aux1125' order represents '2' with '4778'
-4776 4778 0
c Var 'aux1125' direct represents '2' with '4779'
4776 -4778 4779 0
-4779 4778 0
-4779 -4776 0
c Var 'aux1125' order represents '3' with '4780'
-4778 4780 0
c Var 'aux1125' direct represents '3' with '4781'
4778 -4780 4781 0
-4781 4780 0
-4781 -4778 0
c Var 'aux1125' direct represents '4' with '-4780'
4775 4777 4779 4781 -4780 0
c Encoding variable: aux1126 with domain: int(0..2) (representing constraint ((x_00004_00001=8) + (x_00004_00009=8)))
c Both direct and order encoding.
c Var 'aux1126' order represents '0' with '4782'
c Var 'aux1126' direct represents '0' with '4782'
c Var 'aux1126' order represents '1' with '4783'
-4782 4783 0
c Var 'aux1126' direct represents '1' with '4784'
4782 -4783 4784 0
-4784 4783 0
-4784 -4782 0
c Var 'aux1126' direct represents '2' with '-4783'
4782 4784 -4783 0
c Encoding variable: aux1127 with domain: int(0..2) (representing constraint ((x_00004_00008=8) + (x_00004_00002=8)))
c Both direct and order encoding.
c Var 'aux1127' order represents '0' with '4785'
c Var 'aux1127' direct represents '0' with '4785'
c Var 'aux1127' order represents '1' with '4786'
-4785 4786 0
c Var 'aux1127' direct represents '1' with '4787'
4785 -4786 4787 0
-4787 4786 0
-4787 -4785 0
c Var 'aux1127' direct represents '2' with '-4786'
4785 4787 -4786 0
c Encoding variable: aux1128 with domain: int(0..2) (representing constraint ((x_00004_00007=8) + (x_00004_00004=8)))
c Both direct and order encoding.
c Var 'aux1128' order represents '0' with '4788'
c Var 'aux1128' direct represents '0' with '4788'
c Var 'aux1128' order represents '1' with '4789'
-4788 4789 0
c Var 'aux1128' direct represents '1' with '4790'
4788 -4789 4790 0
-4790 4789 0
-4790 -4788 0
c Var 'aux1128' direct represents '2' with '-4789'
4788 4790 -4789 0
c Encoding variable: aux1129 with domain: int(0..2) (representing constraint ((x_00004_00006=8) + (x_00004_00005=8)))
c Both direct and order encoding.
c Var 'aux1129' order represents '0' with '4791'
c Var 'aux1129' direct represents '0' with '4791'
c Var 'aux1129' order represents '1' with '4792'
-4791 4792 0
c Var 'aux1129' direct represents '1' with '4793'
4791 -4792 4793 0
-4793 4792 0
-4793 -4791 0
c Var 'aux1129' direct represents '2' with '-4792'
4791 4793 -4792 0
c Encoding variable: aux1130 with domain: int(0..3) (representing constraint ((x_00004_00003=8) + aux1129))
c Both direct and order encoding.
c Var 'aux1130' order represents '0' with '4794'
c Var 'aux1130' direct represents '0' with '4794'
c Var 'aux1130' order represents '1' with '4795'
-4794 4795 0
c Var 'aux1130' direct represents '1' with '4796'
4794 -4795 4796 0
-4796 4795 0
-4796 -4794 0
c Var 'aux1130' order represents '2' with '4797'
-4795 4797 0
c Var 'aux1130' direct represents '2' with '4798'
4795 -4797 4798 0
-4798 4797 0
-4798 -4795 0
c Var 'aux1130' direct represents '3' with '-4797'
4794 4796 4798 -4797 0
c Encoding variable: aux1131 with domain: int(0..4) (representing constraint (aux1126 + aux1128))
c Both direct and order encoding.
c Var 'aux1131' order represents '0' with '4799'
c Var 'aux1131' direct represents '0' with '4799'
c Var 'aux1131' order represents '1' with '4800'
-4799 4800 0
c Var 'aux1131' direct represents '1' with '4801'
4799 -4800 4801 0
-4801 4800 0
-4801 -4799 0
c Var 'aux1131' order represents '2' with '4802'
-4800 4802 0
c Var 'aux1131' direct represents '2' with '4803'
4800 -4802 4803 0
-4803 4802 0
-4803 -4800 0
c Var 'aux1131' order represents '3' with '4804'
-4802 4804 0
c Var 'aux1131' direct represents '3' with '4805'
4802 -4804 4805 0
-4805 4804 0
-4805 -4802 0
c Var 'aux1131' direct represents '4' with '-4804'
4799 4801 4803 4805 -4804 0
c Encoding variable: aux1132 with domain: int(0..2) (representing constraint ((x_00004_00001=9) + (x_00004_00009=9)))
c Both direct and order encoding.
c Var 'aux1132' order represents '0' with '4806'
c Var 'aux1132' direct represents '0' with '4806'
c Var 'aux1132' order represents '1' with '4807'
-4806 4807 0
c Var 'aux1132' direct represents '1' with '4808'
4806 -4807 4808 0
-4808 4807 0
-4808 -4806 0
c Var 'aux1132' direct represents '2' with '-4807'
4806 4808 -4807 0
c Encoding variable: aux1133 with domain: int(0..2) (representing constraint ((x_00004_00008=9) + (x_00004_00002=9)))
c Both direct and order encoding.
c Var 'aux1133' order represents '0' with '4809'
c Var 'aux1133' direct represents '0' with '4809'
c Var 'aux1133' order represents '1' with '4810'
-4809 4810 0
c Var 'aux1133' direct represents '1' with '4811'
4809 -4810 4811 0
-4811 4810 0
-4811 -4809 0
c Var 'aux1133' direct represents '2' with '-4810'
4809 4811 -4810 0
c Encoding variable: aux1134 with domain: int(0..2) (representing constraint ((x_00004_00007=9) + (x_00004_00004=9)))
c Both direct and order encoding.
c Var 'aux1134' order represents '0' with '4812'
c Var 'aux1134' direct represents '0' with '4812'
c Var 'aux1134' order represents '1' with '4813'
-4812 4813 0
c Var 'aux1134' direct represents '1' with '4814'
4812 -4813 4814 0
-4814 4813 0
-4814 -4812 0
c Var 'aux1134' direct represents '2' with '-4813'
4812 4814 -4813 0
c Encoding variable: aux1135 with domain: int(0..2) (representing constraint ((x_00004_00006=9) + (x_00004_00005=9)))
c Both direct and order encoding.
c Var 'aux1135' order represents '0' with '4815'
c Var 'aux1135' direct represents '0' with '4815'
c Var 'aux1135' order represents '1' with '4816'
-4815 4816 0
c Var 'aux1135' direct represents '1' with '4817'
4815 -4816 4817 0
-4817 4816 0
-4817 -4815 0
c Var 'aux1135' direct represents '2' with '-4816'
4815 4817 -4816 0
c Encoding variable: aux1136 with domain: int(0..3) (representing constraint ((x_00004_00003=9) + aux1135))
c Both direct and order encoding.
c Var 'aux1136' order represents '0' with '4818'
c Var 'aux1136' direct represents '0' with '4818'
c Var 'aux1136' order represents '1' with '4819'
-4818 4819 0
c Var 'aux1136' direct represents '1' with '4820'
4818 -4819 4820 0
-4820 4819 0
-4820 -4818 0
c Var 'aux1136' order represents '2' with '4821'
-4819 4821 0
c Var 'aux1136' direct represents '2' with '4822'
4819 -4821 4822 0
-4822 4821 0
-4822 -4819 0
c Var 'aux1136' direct represents '3' with '-4821'
4818 4820 4822 -4821 0
c Encoding variable: aux1137 with domain: int(0..4) (representing constraint (aux1132 + aux1134))
c Both direct and order encoding.
c Var 'aux1137' order represents '0' with '4823'
c Var 'aux1137' direct represents '0' with '4823'
c Var 'aux1137' order represents '1' with '4824'
-4823 4824 0
c Var 'aux1137' direct represents '1' with '4825'
4823 -4824 4825 0
-4825 4824 0
-4825 -4823 0
c Var 'aux1137' order represents '2' with '4826'
-4824 4826 0
c Var 'aux1137' direct represents '2' with '4827'
4824 -4826 4827 0
-4827 4826 0
-4827 -4824 0
c Var 'aux1137' order represents '3' with '4828'
-4826 4828 0
c Var 'aux1137' direct represents '3' with '4829'
4826 -4828 4829 0
-4829 4828 0
-4829 -4826 0
c Var 'aux1137' direct represents '4' with '-4828'
4823 4825 4827 4829 -4828 0
c Encoding variable: aux1138 with domain: int(0..2) (representing constraint ((x_00005_00001=1) + (x_00005_00009=1)))
c Both direct and order encoding.
c Var 'aux1138' order represents '0' with '4830'
c Var 'aux1138' direct represents '0' with '4830'
c Var 'aux1138' order represents '1' with '4831'
-4830 4831 0
c Var 'aux1138' direct represents '1' with '4832'
4830 -4831 4832 0
-4832 4831 0
-4832 -4830 0
c Var 'aux1138' direct represents '2' with '-4831'
4830 4832 -4831 0
c Encoding variable: aux1139 with domain: int(0..2) (representing constraint ((x_00005_00008=1) + (x_00005_00002=1)))
c Both direct and order encoding.
c Var 'aux1139' order represents '0' with '4833'
c Var 'aux1139' direct represents '0' with '4833'
c Var 'aux1139' order represents '1' with '4834'
-4833 4834 0
c Var 'aux1139' direct represents '1' with '4835'
4833 -4834 4835 0
-4835 4834 0
-4835 -4833 0
c Var 'aux1139' direct represents '2' with '-4834'
4833 4835 -4834 0
c Encoding variable: aux1140 with domain: int(0..2) (representing constraint ((x_00005_00007=1) + (x_00005_00004=1)))
c Both direct and order encoding.
c Var 'aux1140' order represents '0' with '4836'
c Var 'aux1140' direct represents '0' with '4836'
c Var 'aux1140' order represents '1' with '4837'
-4836 4837 0
c Var 'aux1140' direct represents '1' with '4838'
4836 -4837 4838 0
-4838 4837 0
-4838 -4836 0
c Var 'aux1140' direct represents '2' with '-4837'
4836 4838 -4837 0
c Encoding variable: aux1141 with domain: int(0..2) (representing constraint ((x_00005_00006=1) + (x_00005_00005=1)))
c Both direct and order encoding.
c Var 'aux1141' order represents '0' with '4839'
c Var 'aux1141' direct represents '0' with '4839'
c Var 'aux1141' order represents '1' with '4840'
-4839 4840 0
c Var 'aux1141' direct represents '1' with '4841'
4839 -4840 4841 0
-4841 4840 0
-4841 -4839 0
c Var 'aux1141' direct represents '2' with '-4840'
4839 4841 -4840 0
c Encoding variable: aux1142 with domain: int(0..3) (representing constraint ((x_00005_00003=1) + aux1141))
c Both direct and order encoding.
c Var 'aux1142' order represents '0' with '4842'
c Var 'aux1142' direct represents '0' with '4842'
c Var 'aux1142' order represents '1' with '4843'
-4842 4843 0
c Var 'aux1142' direct represents '1' with '4844'
4842 -4843 4844 0
-4844 4843 0
-4844 -4842 0
c Var 'aux1142' order represents '2' with '4845'
-4843 4845 0
c Var 'aux1142' direct represents '2' with '4846'
4843 -4845 4846 0
-4846 4845 0
-4846 -4843 0
c Var 'aux1142' direct represents '3' with '-4845'
4842 4844 4846 -4845 0
c Encoding variable: aux1143 with domain: int(0..4) (representing constraint (aux1138 + aux1140))
c Both direct and order encoding.
c Var 'aux1143' order represents '0' with '4847'
c Var 'aux1143' direct represents '0' with '4847'
c Var 'aux1143' order represents '1' with '4848'
-4847 4848 0
c Var 'aux1143' direct represents '1' with '4849'
4847 -4848 4849 0
-4849 4848 0
-4849 -4847 0
c Var 'aux1143' order represents '2' with '4850'
-4848 4850 0
c Var 'aux1143' direct represents '2' with '4851'
4848 -4850 4851 0
-4851 4850 0
-4851 -4848 0
c Var 'aux1143' order represents '3' with '4852'
-4850 4852 0
c Var 'aux1143' direct represents '3' with '4853'
4850 -4852 4853 0
-4853 4852 0
-4853 -4850 0
c Var 'aux1143' direct represents '4' with '-4852'
4847 4849 4851 4853 -4852 0
c Encoding variable: aux1144 with domain: int(0..2) (representing constraint ((x_00005_00001=2) + (x_00005_00009=2)))
c Both direct and order encoding.
c Var 'aux1144' order represents '0' with '4854'
c Var 'aux1144' direct represents '0' with '4854'
c Var 'aux1144' order represents '1' with '4855'
-4854 4855 0
c Var 'aux1144' direct represents '1' with '4856'
4854 -4855 4856 0
-4856 4855 0
-4856 -4854 0
c Var 'aux1144' direct represents '2' with '-4855'
4854 4856 -4855 0
c Encoding variable: aux1145 with domain: int(0..2) (representing constraint ((x_00005_00008=2) + (x_00005_00002=2)))
c Both direct and order encoding.
c Var 'aux1145' order represents '0' with '4857'
c Var 'aux1145' direct represents '0' with '4857'
c Var 'aux1145' order represents '1' with '4858'
-4857 4858 0
c Var 'aux1145' direct represents '1' with '4859'
4857 -4858 4859 0
-4859 4858 0
-4859 -4857 0
c Var 'aux1145' direct represents '2' with '-4858'
4857 4859 -4858 0
c Encoding variable: aux1146 with domain: int(0..2) (representing constraint ((x_00005_00007=2) + (x_00005_00004=2)))
c Both direct and order encoding.
c Var 'aux1146' order represents '0' with '4860'
c Var 'aux1146' direct represents '0' with '4860'
c Var 'aux1146' order represents '1' with '4861'
-4860 4861 0
c Var 'aux1146' direct represents '1' with '4862'
4860 -4861 4862 0
-4862 4861 0
-4862 -4860 0
c Var 'aux1146' direct represents '2' with '-4861'
4860 4862 -4861 0
c Encoding variable: aux1147 with domain: int(0..2) (representing constraint ((x_00005_00006=2) + (x_00005_00005=2)))
c Both direct and order encoding.
c Var 'aux1147' order represents '0' with '4863'
c Var 'aux1147' direct represents '0' with '4863'
c Var 'aux1147' order represents '1' with '4864'
-4863 4864 0
c Var 'aux1147' direct represents '1' with '4865'
4863 -4864 4865 0
-4865 4864 0
-4865 -4863 0
c Var 'aux1147' direct represents '2' with '-4864'
4863 4865 -4864 0
c Encoding variable: aux1148 with domain: int(0..3) (representing constraint ((x_00005_00003=2) + aux1147))
c Both direct and order encoding.
c Var 'aux1148' order represents '0' with '4866'
c Var 'aux1148' direct represents '0' with '4866'
c Var 'aux1148' order represents '1' with '4867'
-4866 4867 0
c Var 'aux1148' direct represents '1' with '4868'
4866 -4867 4868 0
-4868 4867 0
-4868 -4866 0
c Var 'aux1148' order represents '2' with '4869'
-4867 4869 0
c Var 'aux1148' direct represents '2' with '4870'
4867 -4869 4870 0
-4870 4869 0
-4870 -4867 0
c Var 'aux1148' direct represents '3' with '-4869'
4866 4868 4870 -4869 0
c Encoding variable: aux1149 with domain: int(0..4) (representing constraint (aux1144 + aux1146))
c Both direct and order encoding.
c Var 'aux1149' order represents '0' with '4871'
c Var 'aux1149' direct represents '0' with '4871'
c Var 'aux1149' order represents '1' with '4872'
-4871 4872 0
c Var 'aux1149' direct represents '1' with '4873'
4871 -4872 4873 0
-4873 4872 0
-4873 -4871 0
c Var 'aux1149' order represents '2' with '4874'
-4872 4874 0
c Var 'aux1149' direct represents '2' with '4875'
4872 -4874 4875 0
-4875 4874 0
-4875 -4872 0
c Var 'aux1149' order represents '3' with '4876'
-4874 4876 0
c Var 'aux1149' direct represents '3' with '4877'
4874 -4876 4877 0
-4877 4876 0
-4877 -4874 0
c Var 'aux1149' direct represents '4' with '-4876'
4871 4873 4875 4877 -4876 0
c Encoding variable: aux1150 with domain: int(0..2) (representing constraint ((x_00005_00001=3) + (x_00005_00009=3)))
c Both direct and order encoding.
c Var 'aux1150' order represents '0' with '4878'
c Var 'aux1150' direct represents '0' with '4878'
c Var 'aux1150' order represents '1' with '4879'
-4878 4879 0
c Var 'aux1150' direct represents '1' with '4880'
4878 -4879 4880 0
-4880 4879 0
-4880 -4878 0
c Var 'aux1150' direct represents '2' with '-4879'
4878 4880 -4879 0
c Encoding variable: aux1151 with domain: int(0..2) (representing constraint ((x_00005_00008=3) + (x_00005_00002=3)))
c Both direct and order encoding.
c Var 'aux1151' order represents '0' with '4881'
c Var 'aux1151' direct represents '0' with '4881'
c Var 'aux1151' order represents '1' with '4882'
-4881 4882 0
c Var 'aux1151' direct represents '1' with '4883'
4881 -4882 4883 0
-4883 4882 0
-4883 -4881 0
c Var 'aux1151' direct represents '2' with '-4882'
4881 4883 -4882 0
c Encoding variable: aux1152 with domain: int(0..2) (representing constraint ((x_00005_00007=3) + (x_00005_00004=3)))
c Both direct and order encoding.
c Var 'aux1152' order represents '0' with '4884'
c Var 'aux1152' direct represents '0' with '4884'
c Var 'aux1152' order represents '1' with '4885'
-4884 4885 0
c Var 'aux1152' direct represents '1' with '4886'
4884 -4885 4886 0
-4886 4885 0
-4886 -4884 0
c Var 'aux1152' direct represents '2' with '-4885'
4884 4886 -4885 0
c Encoding variable: aux1153 with domain: int(0..2) (representing constraint ((x_00005_00006=3) + (x_00005_00005=3)))
c Both direct and order encoding.
c Var 'aux1153' order represents '0' with '4887'
c Var 'aux1153' direct represents '0' with '4887'
c Var 'aux1153' order represents '1' with '4888'
-4887 4888 0
c Var 'aux1153' direct represents '1' with '4889'
4887 -4888 4889 0
-4889 4888 0
-4889 -4887 0
c Var 'aux1153' direct represents '2' with '-4888'
4887 4889 -4888 0
c Encoding variable: aux1154 with domain: int(0..3) (representing constraint ((x_00005_00003=3) + aux1153))
c Both direct and order encoding.
c Var 'aux1154' order represents '0' with '4890'
c Var 'aux1154' direct represents '0' with '4890'
c Var 'aux1154' order represents '1' with '4891'
-4890 4891 0
c Var 'aux1154' direct represents '1' with '4892'
4890 -4891 4892 0
-4892 4891 0
-4892 -4890 0
c Var 'aux1154' order represents '2' with '4893'
-4891 4893 0
c Var 'aux1154' direct represents '2' with '4894'
4891 -4893 4894 0
-4894 4893 0
-4894 -4891 0
c Var 'aux1154' direct represents '3' with '-4893'
4890 4892 4894 -4893 0
c Encoding variable: aux1155 with domain: int(0..4) (representing constraint (aux1150 + aux1152))
c Both direct and order encoding.
c Var 'aux1155' order represents '0' with '4895'
c Var 'aux1155' direct represents '0' with '4895'
c Var 'aux1155' order represents '1' with '4896'
-4895 4896 0
c Var 'aux1155' direct represents '1' with '4897'
4895 -4896 4897 0
-4897 4896 0
-4897 -4895 0
c Var 'aux1155' order represents '2' with '4898'
-4896 4898 0
c Var 'aux1155' direct represents '2' with '4899'
4896 -4898 4899 0
-4899 4898 0
-4899 -4896 0
c Var 'aux1155' order represents '3' with '4900'
-4898 4900 0
c Var 'aux1155' direct represents '3' with '4901'
4898 -4900 4901 0
-4901 4900 0
-4901 -4898 0
c Var 'aux1155' direct represents '4' with '-4900'
4895 4897 4899 4901 -4900 0
c Encoding variable: aux1156 with domain: int(0..2) (representing constraint ((x_00005_00001=4) + (x_00005_00009=4)))
c Both direct and order encoding.
c Var 'aux1156' order represents '0' with '4902'
c Var 'aux1156' direct represents '0' with '4902'
c Var 'aux1156' order represents '1' with '4903'
-4902 4903 0
c Var 'aux1156' direct represents '1' with '4904'
4902 -4903 4904 0
-4904 4903 0
-4904 -4902 0
c Var 'aux1156' direct represents '2' with '-4903'
4902 4904 -4903 0
c Encoding variable: aux1157 with domain: int(0..2) (representing constraint ((x_00005_00008=4) + (x_00005_00002=4)))
c Both direct and order encoding.
c Var 'aux1157' order represents '0' with '4905'
c Var 'aux1157' direct represents '0' with '4905'
c Var 'aux1157' order represents '1' with '4906'
-4905 4906 0
c Var 'aux1157' direct represents '1' with '4907'
4905 -4906 4907 0
-4907 4906 0
-4907 -4905 0
c Var 'aux1157' direct represents '2' with '-4906'
4905 4907 -4906 0
c Encoding variable: aux1158 with domain: int(0..2) (representing constraint ((x_00005_00007=4) + (x_00005_00004=4)))
c Both direct and order encoding.
c Var 'aux1158' order represents '0' with '4908'
c Var 'aux1158' direct represents '0' with '4908'
c Var 'aux1158' order represents '1' with '4909'
-4908 4909 0
c Var 'aux1158' direct represents '1' with '4910'
4908 -4909 4910 0
-4910 4909 0
-4910 -4908 0
c Var 'aux1158' direct represents '2' with '-4909'
4908 4910 -4909 0
c Encoding variable: aux1159 with domain: int(0..2) (representing constraint ((x_00005_00006=4) + (x_00005_00005=4)))
c Both direct and order encoding.
c Var 'aux1159' order represents '0' with '4911'
c Var 'aux1159' direct represents '0' with '4911'
c Var 'aux1159' order represents '1' with '4912'
-4911 4912 0
c Var 'aux1159' direct represents '1' with '4913'
4911 -4912 4913 0
-4913 4912 0
-4913 -4911 0
c Var 'aux1159' direct represents '2' with '-4912'
4911 4913 -4912 0
c Encoding variable: aux1160 with domain: int(0..3) (representing constraint ((x_00005_00003=4) + aux1159))
c Both direct and order encoding.
c Var 'aux1160' order represents '0' with '4914'
c Var 'aux1160' direct represents '0' with '4914'
c Var 'aux1160' order represents '1' with '4915'
-4914 4915 0
c Var 'aux1160' direct represents '1' with '4916'
4914 -4915 4916 0
-4916 4915 0
-4916 -4914 0
c Var 'aux1160' order represents '2' with '4917'
-4915 4917 0
c Var 'aux1160' direct represents '2' with '4918'
4915 -4917 4918 0
-4918 4917 0
-4918 -4915 0
c Var 'aux1160' direct represents '3' with '-4917'
4914 4916 4918 -4917 0
c Encoding variable: aux1161 with domain: int(0..4) (representing constraint (aux1156 + aux1158))
c Both direct and order encoding.
c Var 'aux1161' order represents '0' with '4919'
c Var 'aux1161' direct represents '0' with '4919'
c Var 'aux1161' order represents '1' with '4920'
-4919 4920 0
c Var 'aux1161' direct represents '1' with '4921'
4919 -4920 4921 0
-4921 4920 0
-4921 -4919 0
c Var 'aux1161' order represents '2' with '4922'
-4920 4922 0
c Var 'aux1161' direct represents '2' with '4923'
4920 -4922 4923 0
-4923 4922 0
-4923 -4920 0
c Var 'aux1161' order represents '3' with '4924'
-4922 4924 0
c Var 'aux1161' direct represents '3' with '4925'
4922 -4924 4925 0
-4925 4924 0
-4925 -4922 0
c Var 'aux1161' direct represents '4' with '-4924'
4919 4921 4923 4925 -4924 0
c Encoding variable: aux1162 with domain: int(0..2) (representing constraint ((x_00005_00001=5) + (x_00005_00009=5)))
c Both direct and order encoding.
c Var 'aux1162' order represents '0' with '4926'
c Var 'aux1162' direct represents '0' with '4926'
c Var 'aux1162' order represents '1' with '4927'
-4926 4927 0
c Var 'aux1162' direct represents '1' with '4928'
4926 -4927 4928 0
-4928 4927 0
-4928 -4926 0
c Var 'aux1162' direct represents '2' with '-4927'
4926 4928 -4927 0
c Encoding variable: aux1163 with domain: int(0..2) (representing constraint ((x_00005_00008=5) + (x_00005_00002=5)))
c Both direct and order encoding.
c Var 'aux1163' order represents '0' with '4929'
c Var 'aux1163' direct represents '0' with '4929'
c Var 'aux1163' order represents '1' with '4930'
-4929 4930 0
c Var 'aux1163' direct represents '1' with '4931'
4929 -4930 4931 0
-4931 4930 0
-4931 -4929 0
c Var 'aux1163' direct represents '2' with '-4930'
4929 4931 -4930 0
c Encoding variable: aux1164 with domain: int(0..2) (representing constraint ((x_00005_00007=5) + (x_00005_00004=5)))
c Both direct and order encoding.
c Var 'aux1164' order represents '0' with '4932'
c Var 'aux1164' direct represents '0' with '4932'
c Var 'aux1164' order represents '1' with '4933'
-4932 4933 0
c Var 'aux1164' direct represents '1' with '4934'
4932 -4933 4934 0
-4934 4933 0
-4934 -4932 0
c Var 'aux1164' direct represents '2' with '-4933'
4932 4934 -4933 0
c Encoding variable: aux1165 with domain: int(0..2) (representing constraint ((x_00005_00006=5) + (x_00005_00005=5)))
c Both direct and order encoding.
c Var 'aux1165' order represents '0' with '4935'
c Var 'aux1165' direct represents '0' with '4935'
c Var 'aux1165' order represents '1' with '4936'
-4935 4936 0
c Var 'aux1165' direct represents '1' with '4937'
4935 -4936 4937 0
-4937 4936 0
-4937 -4935 0
c Var 'aux1165' direct represents '2' with '-4936'
4935 4937 -4936 0
c Encoding variable: aux1166 with domain: int(0..3) (representing constraint ((x_00005_00003=5) + aux1165))
c Both direct and order encoding.
c Var 'aux1166' order represents '0' with '4938'
c Var 'aux1166' direct represents '0' with '4938'
c Var 'aux1166' order represents '1' with '4939'
-4938 4939 0
c Var 'aux1166' direct represents '1' with '4940'
4938 -4939 4940 0
-4940 4939 0
-4940 -4938 0
c Var 'aux1166' order represents '2' with '4941'
-4939 4941 0
c Var 'aux1166' direct represents '2' with '4942'
4939 -4941 4942 0
-4942 4941 0
-4942 -4939 0
c Var 'aux1166' direct represents '3' with '-4941'
4938 4940 4942 -4941 0
c Encoding variable: aux1167 with domain: int(0..4) (representing constraint (aux1162 + aux1164))
c Both direct and order encoding.
c Var 'aux1167' order represents '0' with '4943'
c Var 'aux1167' direct represents '0' with '4943'
c Var 'aux1167' order represents '1' with '4944'
-4943 4944 0
c Var 'aux1167' direct represents '1' with '4945'
4943 -4944 4945 0
-4945 4944 0
-4945 -4943 0
c Var 'aux1167' order represents '2' with '4946'
-4944 4946 0
c Var 'aux1167' direct represents '2' with '4947'
4944 -4946 4947 0
-4947 4946 0
-4947 -4944 0
c Var 'aux1167' order represents '3' with '4948'
-4946 4948 0
c Var 'aux1167' direct represents '3' with '4949'
4946 -4948 4949 0
-4949 4948 0
-4949 -4946 0
c Var 'aux1167' direct represents '4' with '-4948'
4943 4945 4947 4949 -4948 0
c Encoding variable: aux1168 with domain: int(0..2) (representing constraint ((x_00005_00001=6) + (x_00005_00009=6)))
c Both direct and order encoding.
c Var 'aux1168' order represents '0' with '4950'
c Var 'aux1168' direct represents '0' with '4950'
c Var 'aux1168' order represents '1' with '4951'
-4950 4951 0
c Var 'aux1168' direct represents '1' with '4952'
4950 -4951 4952 0
-4952 4951 0
-4952 -4950 0
c Var 'aux1168' direct represents '2' with '-4951'
4950 4952 -4951 0
c Encoding variable: aux1169 with domain: int(0..2) (representing constraint ((x_00005_00008=6) + (x_00005_00002=6)))
c Both direct and order encoding.
c Var 'aux1169' order represents '0' with '4953'
c Var 'aux1169' direct represents '0' with '4953'
c Var 'aux1169' order represents '1' with '4954'
-4953 4954 0
c Var 'aux1169' direct represents '1' with '4955'
4953 -4954 4955 0
-4955 4954 0
-4955 -4953 0
c Var 'aux1169' direct represents '2' with '-4954'
4953 4955 -4954 0
c Encoding variable: aux1170 with domain: int(0..2) (representing constraint ((x_00005_00007=6) + (x_00005_00004=6)))
c Both direct and order encoding.
c Var 'aux1170' order represents '0' with '4956'
c Var 'aux1170' direct represents '0' with '4956'
c Var 'aux1170' order represents '1' with '4957'
-4956 4957 0
c Var 'aux1170' direct represents '1' with '4958'
4956 -4957 4958 0
-4958 4957 0
-4958 -4956 0
c Var 'aux1170' direct represents '2' with '-4957'
4956 4958 -4957 0
c Encoding variable: aux1171 with domain: int(0..2) (representing constraint ((x_00005_00006=6) + (x_00005_00005=6)))
c Both direct and order encoding.
c Var 'aux1171' order represents '0' with '4959'
c Var 'aux1171' direct represents '0' with '4959'
c Var 'aux1171' order represents '1' with '4960'
-4959 4960 0
c Var 'aux1171' direct represents '1' with '4961'
4959 -4960 4961 0
-4961 4960 0
-4961 -4959 0
c Var 'aux1171' direct represents '2' with '-4960'
4959 4961 -4960 0
c Encoding variable: aux1172 with domain: int(0..3) (representing constraint ((x_00005_00003=6) + aux1171))
c Both direct and order encoding.
c Var 'aux1172' order represents '0' with '4962'
c Var 'aux1172' direct represents '0' with '4962'
c Var 'aux1172' order represents '1' with '4963'
-4962 4963 0
c Var 'aux1172' direct represents '1' with '4964'
4962 -4963 4964 0
-4964 4963 0
-4964 -4962 0
c Var 'aux1172' order represents '2' with '4965'
-4963 4965 0
c Var 'aux1172' direct represents '2' with '4966'
4963 -4965 4966 0
-4966 4965 0
-4966 -4963 0
c Var 'aux1172' direct represents '3' with '-4965'
4962 4964 4966 -4965 0
c Encoding variable: aux1173 with domain: int(0..4) (representing constraint (aux1168 + aux1170))
c Both direct and order encoding.
c Var 'aux1173' order represents '0' with '4967'
c Var 'aux1173' direct represents '0' with '4967'
c Var 'aux1173' order represents '1' with '4968'
-4967 4968 0
c Var 'aux1173' direct represents '1' with '4969'
4967 -4968 4969 0
-4969 4968 0
-4969 -4967 0
c Var 'aux1173' order represents '2' with '4970'
-4968 4970 0
c Var 'aux1173' direct represents '2' with '4971'
4968 -4970 4971 0
-4971 4970 0
-4971 -4968 0
c Var 'aux1173' order represents '3' with '4972'
-4970 4972 0
c Var 'aux1173' direct represents '3' with '4973'
4970 -4972 4973 0
-4973 4972 0
-4973 -4970 0
c Var 'aux1173' direct represents '4' with '-4972'
4967 4969 4971 4973 -4972 0
c Encoding variable: aux1174 with domain: int(0..2) (representing constraint ((x_00005_00001=7) + (x_00005_00009=7)))
c Both direct and order encoding.
c Var 'aux1174' order represents '0' with '4974'
c Var 'aux1174' direct represents '0' with '4974'
c Var 'aux1174' order represents '1' with '4975'
-4974 4975 0
c Var 'aux1174' direct represents '1' with '4976'
4974 -4975 4976 0
-4976 4975 0
-4976 -4974 0
c Var 'aux1174' direct represents '2' with '-4975'
4974 4976 -4975 0
c Encoding variable: aux1175 with domain: int(0..2) (representing constraint ((x_00005_00008=7) + (x_00005_00002=7)))
c Both direct and order encoding.
c Var 'aux1175' order represents '0' with '4977'
c Var 'aux1175' direct represents '0' with '4977'
c Var 'aux1175' order represents '1' with '4978'
-4977 4978 0
c Var 'aux1175' direct represents '1' with '4979'
4977 -4978 4979 0
-4979 4978 0
-4979 -4977 0
c Var 'aux1175' direct represents '2' with '-4978'
4977 4979 -4978 0
c Encoding variable: aux1176 with domain: int(0..2) (representing constraint ((x_00005_00007=7) + (x_00005_00004=7)))
c Both direct and order encoding.
c Var 'aux1176' order represents '0' with '4980'
c Var 'aux1176' direct represents '0' with '4980'
c Var 'aux1176' order represents '1' with '4981'
-4980 4981 0
c Var 'aux1176' direct represents '1' with '4982'
4980 -4981 4982 0
-4982 4981 0
-4982 -4980 0
c Var 'aux1176' direct represents '2' with '-4981'
4980 4982 -4981 0
c Encoding variable: aux1177 with domain: int(0..2) (representing constraint ((x_00005_00006=7) + (x_00005_00005=7)))
c Both direct and order encoding.
c Var 'aux1177' order represents '0' with '4983'
c Var 'aux1177' direct represents '0' with '4983'
c Var 'aux1177' order represents '1' with '4984'
-4983 4984 0
c Var 'aux1177' direct represents '1' with '4985'
4983 -4984 4985 0
-4985 4984 0
-4985 -4983 0
c Var 'aux1177' direct represents '2' with '-4984'
4983 4985 -4984 0
c Encoding variable: aux1178 with domain: int(0..3) (representing constraint ((x_00005_00003=7) + aux1177))
c Both direct and order encoding.
c Var 'aux1178' order represents '0' with '4986'
c Var 'aux1178' direct represents '0' with '4986'
c Var 'aux1178' order represents '1' with '4987'
-4986 4987 0
c Var 'aux1178' direct represents '1' with '4988'
4986 -4987 4988 0
-4988 4987 0
-4988 -4986 0
c Var 'aux1178' order represents '2' with '4989'
-4987 4989 0
c Var 'aux1178' direct represents '2' with '4990'
4987 -4989 4990 0
-4990 4989 0
-4990 -4987 0
c Var 'aux1178' direct represents '3' with '-4989'
4986 4988 4990 -4989 0
c Encoding variable: aux1179 with domain: int(0..4) (representing constraint (aux1174 + aux1176))
c Both direct and order encoding.
c Var 'aux1179' order represents '0' with '4991'
c Var 'aux1179' direct represents '0' with '4991'
c Var 'aux1179' order represents '1' with '4992'
-4991 4992 0
c Var 'aux1179' direct represents '1' with '4993'
4991 -4992 4993 0
-4993 4992 0
-4993 -4991 0
c Var 'aux1179' order represents '2' with '4994'
-4992 4994 0
c Var 'aux1179' direct represents '2' with '4995'
4992 -4994 4995 0
-4995 4994 0
-4995 -4992 0
c Var 'aux1179' order represents '3' with '4996'
-4994 4996 0
c Var 'aux1179' direct represents '3' with '4997'
4994 -4996 4997 0
-4997 4996 0
-4997 -4994 0
c Var 'aux1179' direct represents '4' with '-4996'
4991 4993 4995 4997 -4996 0
c Encoding variable: aux1180 with domain: int(0..2) (representing constraint ((x_00005_00001=8) + (x_00005_00009=8)))
c Both direct and order encoding.
c Var 'aux1180' order represents '0' with '4998'
c Var 'aux1180' direct represents '0' with '4998'
c Var 'aux1180' order represents '1' with '4999'
-4998 4999 0
c Var 'aux1180' direct represents '1' with '5000'
4998 -4999 5000 0
-5000 4999 0
-5000 -4998 0
c Var 'aux1180' direct represents '2' with '-4999'
4998 5000 -4999 0
c Encoding variable: aux1181 with domain: int(0..2) (representing constraint ((x_00005_00008=8) + (x_00005_00002=8)))
c Both direct and order encoding.
c Var 'aux1181' order represents '0' with '5001'
c Var 'aux1181' direct represents '0' with '5001'
c Var 'aux1181' order represents '1' with '5002'
-5001 5002 0
c Var 'aux1181' direct represents '1' with '5003'
5001 -5002 5003 0
-5003 5002 0
-5003 -5001 0
c Var 'aux1181' direct represents '2' with '-5002'
5001 5003 -5002 0
c Encoding variable: aux1182 with domain: int(0..2) (representing constraint ((x_00005_00007=8) + (x_00005_00004=8)))
c Both direct and order encoding.
c Var 'aux1182' order represents '0' with '5004'
c Var 'aux1182' direct represents '0' with '5004'
c Var 'aux1182' order represents '1' with '5005'
-5004 5005 0
c Var 'aux1182' direct represents '1' with '5006'
5004 -5005 5006 0
-5006 5005 0
-5006 -5004 0
c Var 'aux1182' direct represents '2' with '-5005'
5004 5006 -5005 0
c Encoding variable: aux1183 with domain: int(0..2) (representing constraint ((x_00005_00006=8) + (x_00005_00005=8)))
c Both direct and order encoding.
c Var 'aux1183' order represents '0' with '5007'
c Var 'aux1183' direct represents '0' with '5007'
c Var 'aux1183' order represents '1' with '5008'
-5007 5008 0
c Var 'aux1183' direct represents '1' with '5009'
5007 -5008 5009 0
-5009 5008 0
-5009 -5007 0
c Var 'aux1183' direct represents '2' with '-5008'
5007 5009 -5008 0
c Encoding variable: aux1184 with domain: int(0..3) (representing constraint ((x_00005_00003=8) + aux1183))
c Both direct and order encoding.
c Var 'aux1184' order represents '0' with '5010'
c Var 'aux1184' direct represents '0' with '5010'
c Var 'aux1184' order represents '1' with '5011'
-5010 5011 0
c Var 'aux1184' direct represents '1' with '5012'
5010 -5011 5012 0
-5012 5011 0
-5012 -5010 0
c Var 'aux1184' order represents '2' with '5013'
-5011 5013 0
c Var 'aux1184' direct represents '2' with '5014'
5011 -5013 5014 0
-5014 5013 0
-5014 -5011 0
c Var 'aux1184' direct represents '3' with '-5013'
5010 5012 5014 -5013 0
c Encoding variable: aux1185 with domain: int(0..4) (representing constraint (aux1180 + aux1182))
c Both direct and order encoding.
c Var 'aux1185' order represents '0' with '5015'
c Var 'aux1185' direct represents '0' with '5015'
c Var 'aux1185' order represents '1' with '5016'
-5015 5016 0
c Var 'aux1185' direct represents '1' with '5017'
5015 -5016 5017 0
-5017 5016 0
-5017 -5015 0
c Var 'aux1185' order represents '2' with '5018'
-5016 5018 0
c Var 'aux1185' direct represents '2' with '5019'
5016 -5018 5019 0
-5019 5018 0
-5019 -5016 0
c Var 'aux1185' order represents '3' with '5020'
-5018 5020 0
c Var 'aux1185' direct represents '3' with '5021'
5018 -5020 5021 0
-5021 5020 0
-5021 -5018 0
c Var 'aux1185' direct represents '4' with '-5020'
5015 5017 5019 5021 -5020 0
c Encoding variable: aux1186 with domain: int(0..2) (representing constraint ((x_00005_00001=9) + (x_00005_00009=9)))
c Both direct and order encoding.
c Var 'aux1186' order represents '0' with '5022'
c Var 'aux1186' direct represents '0' with '5022'
c Var 'aux1186' order represents '1' with '5023'
-5022 5023 0
c Var 'aux1186' direct represents '1' with '5024'
5022 -5023 5024 0
-5024 5023 0
-5024 -5022 0
c Var 'aux1186' direct represents '2' with '-5023'
5022 5024 -5023 0
c Encoding variable: aux1187 with domain: int(0..2) (representing constraint ((x_00005_00008=9) + (x_00005_00002=9)))
c Both direct and order encoding.
c Var 'aux1187' order represents '0' with '5025'
c Var 'aux1187' direct represents '0' with '5025'
c Var 'aux1187' order represents '1' with '5026'
-5025 5026 0
c Var 'aux1187' direct represents '1' with '5027'
5025 -5026 5027 0
-5027 5026 0
-5027 -5025 0
c Var 'aux1187' direct represents '2' with '-5026'
5025 5027 -5026 0
c Encoding variable: aux1188 with domain: int(0..2) (representing constraint ((x_00005_00007=9) + (x_00005_00004=9)))
c Both direct and order encoding.
c Var 'aux1188' order represents '0' with '5028'
c Var 'aux1188' direct represents '0' with '5028'
c Var 'aux1188' order represents '1' with '5029'
-5028 5029 0
c Var 'aux1188' direct represents '1' with '5030'
5028 -5029 5030 0
-5030 5029 0
-5030 -5028 0
c Var 'aux1188' direct represents '2' with '-5029'
5028 5030 -5029 0
c Encoding variable: aux1189 with domain: int(0..2) (representing constraint ((x_00005_00006=9) + (x_00005_00005=9)))
c Both direct and order encoding.
c Var 'aux1189' order represents '0' with '5031'
c Var 'aux1189' direct represents '0' with '5031'
c Var 'aux1189' order represents '1' with '5032'
-5031 5032 0
c Var 'aux1189' direct represents '1' with '5033'
5031 -5032 5033 0
-5033 5032 0
-5033 -5031 0
c Var 'aux1189' direct represents '2' with '-5032'
5031 5033 -5032 0
c Encoding variable: aux1190 with domain: int(0..3) (representing constraint ((x_00005_00003=9) + aux1189))
c Both direct and order encoding.
c Var 'aux1190' order represents '0' with '5034'
c Var 'aux1190' direct represents '0' with '5034'
c Var 'aux1190' order represents '1' with '5035'
-5034 5035 0
c Var 'aux1190' direct represents '1' with '5036'
5034 -5035 5036 0
-5036 5035 0
-5036 -5034 0
c Var 'aux1190' order represents '2' with '5037'
-5035 5037 0
c Var 'aux1190' direct represents '2' with '5038'
5035 -5037 5038 0
-5038 5037 0
-5038 -5035 0
c Var 'aux1190' direct represents '3' with '-5037'
5034 5036 5038 -5037 0
c Encoding variable: aux1191 with domain: int(0..4) (representing constraint (aux1186 + aux1188))
c Both direct and order encoding.
c Var 'aux1191' order represents '0' with '5039'
c Var 'aux1191' direct represents '0' with '5039'
c Var 'aux1191' order represents '1' with '5040'
-5039 5040 0
c Var 'aux1191' direct represents '1' with '5041'
5039 -5040 5041 0
-5041 5040 0
-5041 -5039 0
c Var 'aux1191' order represents '2' with '5042'
-5040 5042 0
c Var 'aux1191' direct represents '2' with '5043'
5040 -5042 5043 0
-5043 5042 0
-5043 -5040 0
c Var 'aux1191' order represents '3' with '5044'
-5042 5044 0
c Var 'aux1191' direct represents '3' with '5045'
5042 -5044 5045 0
-5045 5044 0
-5045 -5042 0
c Var 'aux1191' direct represents '4' with '-5044'
5039 5041 5043 5045 -5044 0
c Encoding variable: aux1192 with domain: int(0..2) (representing constraint ((x_00006_00001=1) + (x_00006_00009=1)))
c Both direct and order encoding.
c Var 'aux1192' order represents '0' with '5046'
c Var 'aux1192' direct represents '0' with '5046'
c Var 'aux1192' order represents '1' with '5047'
-5046 5047 0
c Var 'aux1192' direct represents '1' with '5048'
5046 -5047 5048 0
-5048 5047 0
-5048 -5046 0
c Var 'aux1192' direct represents '2' with '-5047'
5046 5048 -5047 0
c Encoding variable: aux1193 with domain: int(0..2) (representing constraint ((x_00006_00008=1) + (x_00006_00002=1)))
c Both direct and order encoding.
c Var 'aux1193' order represents '0' with '5049'
c Var 'aux1193' direct represents '0' with '5049'
c Var 'aux1193' order represents '1' with '5050'
-5049 5050 0
c Var 'aux1193' direct represents '1' with '5051'
5049 -5050 5051 0
-5051 5050 0
-5051 -5049 0
c Var 'aux1193' direct represents '2' with '-5050'
5049 5051 -5050 0
c Encoding variable: aux1194 with domain: int(0..2) (representing constraint ((x_00006_00007=1) + (x_00006_00004=1)))
c Both direct and order encoding.
c Var 'aux1194' order represents '0' with '5052'
c Var 'aux1194' direct represents '0' with '5052'
c Var 'aux1194' order represents '1' with '5053'
-5052 5053 0
c Var 'aux1194' direct represents '1' with '5054'
5052 -5053 5054 0
-5054 5053 0
-5054 -5052 0
c Var 'aux1194' direct represents '2' with '-5053'
5052 5054 -5053 0
c Encoding variable: aux1195 with domain: int(0..2) (representing constraint ((x_00006_00006=1) + (x_00006_00005=1)))
c Both direct and order encoding.
c Var 'aux1195' order represents '0' with '5055'
c Var 'aux1195' direct represents '0' with '5055'
c Var 'aux1195' order represents '1' with '5056'
-5055 5056 0
c Var 'aux1195' direct represents '1' with '5057'
5055 -5056 5057 0
-5057 5056 0
-5057 -5055 0
c Var 'aux1195' direct represents '2' with '-5056'
5055 5057 -5056 0
c Encoding variable: aux1196 with domain: int(0..3) (representing constraint ((x_00006_00003=1) + aux1195))
c Both direct and order encoding.
c Var 'aux1196' order represents '0' with '5058'
c Var 'aux1196' direct represents '0' with '5058'
c Var 'aux1196' order represents '1' with '5059'
-5058 5059 0
c Var 'aux1196' direct represents '1' with '5060'
5058 -5059 5060 0
-5060 5059 0
-5060 -5058 0
c Var 'aux1196' order represents '2' with '5061'
-5059 5061 0
c Var 'aux1196' direct represents '2' with '5062'
5059 -5061 5062 0
-5062 5061 0
-5062 -5059 0
c Var 'aux1196' direct represents '3' with '-5061'
5058 5060 5062 -5061 0
c Encoding variable: aux1197 with domain: int(0..4) (representing constraint (aux1192 + aux1194))
c Both direct and order encoding.
c Var 'aux1197' order represents '0' with '5063'
c Var 'aux1197' direct represents '0' with '5063'
c Var 'aux1197' order represents '1' with '5064'
-5063 5064 0
c Var 'aux1197' direct represents '1' with '5065'
5063 -5064 5065 0
-5065 5064 0
-5065 -5063 0
c Var 'aux1197' order represents '2' with '5066'
-5064 5066 0
c Var 'aux1197' direct represents '2' with '5067'
5064 -5066 5067 0
-5067 5066 0
-5067 -5064 0
c Var 'aux1197' order represents '3' with '5068'
-5066 5068 0
c Var 'aux1197' direct represents '3' with '5069'
5066 -5068 5069 0
-5069 5068 0
-5069 -5066 0
c Var 'aux1197' direct represents '4' with '-5068'
5063 5065 5067 5069 -5068 0
c Encoding variable: aux1198 with domain: int(0..2) (representing constraint ((x_00006_00001=2) + (x_00006_00009=2)))
c Both direct and order encoding.
c Var 'aux1198' order represents '0' with '5070'
c Var 'aux1198' direct represents '0' with '5070'
c Var 'aux1198' order represents '1' with '5071'
-5070 5071 0
c Var 'aux1198' direct represents '1' with '5072'
5070 -5071 5072 0
-5072 5071 0
-5072 -5070 0
c Var 'aux1198' direct represents '2' with '-5071'
5070 5072 -5071 0
c Encoding variable: aux1199 with domain: int(0..2) (representing constraint ((x_00006_00008=2) + (x_00006_00002=2)))
c Both direct and order encoding.
c Var 'aux1199' order represents '0' with '5073'
c Var 'aux1199' direct represents '0' with '5073'
c Var 'aux1199' order represents '1' with '5074'
-5073 5074 0
c Var 'aux1199' direct represents '1' with '5075'
5073 -5074 5075 0
-5075 5074 0
-5075 -5073 0
c Var 'aux1199' direct represents '2' with '-5074'
5073 5075 -5074 0
c Encoding variable: aux1200 with domain: int(0..2) (representing constraint ((x_00006_00007=2) + (x_00006_00004=2)))
c Both direct and order encoding.
c Var 'aux1200' order represents '0' with '5076'
c Var 'aux1200' direct represents '0' with '5076'
c Var 'aux1200' order represents '1' with '5077'
-5076 5077 0
c Var 'aux1200' direct represents '1' with '5078'
5076 -5077 5078 0
-5078 5077 0
-5078 -5076 0
c Var 'aux1200' direct represents '2' with '-5077'
5076 5078 -5077 0
c Encoding variable: aux1201 with domain: int(0..2) (representing constraint ((x_00006_00006=2) + (x_00006_00005=2)))
c Both direct and order encoding.
c Var 'aux1201' order represents '0' with '5079'
c Var 'aux1201' direct represents '0' with '5079'
c Var 'aux1201' order represents '1' with '5080'
-5079 5080 0
c Var 'aux1201' direct represents '1' with '5081'
5079 -5080 5081 0
-5081 5080 0
-5081 -5079 0
c Var 'aux1201' direct represents '2' with '-5080'
5079 5081 -5080 0
c Encoding variable: aux1202 with domain: int(0..3) (representing constraint ((x_00006_00003=2) + aux1201))
c Both direct and order encoding.
c Var 'aux1202' order represents '0' with '5082'
c Var 'aux1202' direct represents '0' with '5082'
c Var 'aux1202' order represents '1' with '5083'
-5082 5083 0
c Var 'aux1202' direct represents '1' with '5084'
5082 -5083 5084 0
-5084 5083 0
-5084 -5082 0
c Var 'aux1202' order represents '2' with '5085'
-5083 5085 0
c Var 'aux1202' direct represents '2' with '5086'
5083 -5085 5086 0
-5086 5085 0
-5086 -5083 0
c Var 'aux1202' direct represents '3' with '-5085'
5082 5084 5086 -5085 0
c Encoding variable: aux1203 with domain: int(0..4) (representing constraint (aux1198 + aux1200))
c Both direct and order encoding.
c Var 'aux1203' order represents '0' with '5087'
c Var 'aux1203' direct represents '0' with '5087'
c Var 'aux1203' order represents '1' with '5088'
-5087 5088 0
c Var 'aux1203' direct represents '1' with '5089'
5087 -5088 5089 0
-5089 5088 0
-5089 -5087 0
c Var 'aux1203' order represents '2' with '5090'
-5088 5090 0
c Var 'aux1203' direct represents '2' with '5091'
5088 -5090 5091 0
-5091 5090 0
-5091 -5088 0
c Var 'aux1203' order represents '3' with '5092'
-5090 5092 0
c Var 'aux1203' direct represents '3' with '5093'
5090 -5092 5093 0
-5093 5092 0
-5093 -5090 0
c Var 'aux1203' direct represents '4' with '-5092'
5087 5089 5091 5093 -5092 0
c Encoding variable: aux1204 with domain: int(0..2) (representing constraint ((x_00006_00001=3) + (x_00006_00009=3)))
c Both direct and order encoding.
c Var 'aux1204' order represents '0' with '5094'
c Var 'aux1204' direct represents '0' with '5094'
c Var 'aux1204' order represents '1' with '5095'
-5094 5095 0
c Var 'aux1204' direct represents '1' with '5096'
5094 -5095 5096 0
-5096 5095 0
-5096 -5094 0
c Var 'aux1204' direct represents '2' with '-5095'
5094 5096 -5095 0
c Encoding variable: aux1205 with domain: int(0..2) (representing constraint ((x_00006_00008=3) + (x_00006_00002=3)))
c Both direct and order encoding.
c Var 'aux1205' order represents '0' with '5097'
c Var 'aux1205' direct represents '0' with '5097'
c Var 'aux1205' order represents '1' with '5098'
-5097 5098 0
c Var 'aux1205' direct represents '1' with '5099'
5097 -5098 5099 0
-5099 5098 0
-5099 -5097 0
c Var 'aux1205' direct represents '2' with '-5098'
5097 5099 -5098 0
c Encoding variable: aux1206 with domain: int(0..2) (representing constraint ((x_00006_00007=3) + (x_00006_00004=3)))
c Both direct and order encoding.
c Var 'aux1206' order represents '0' with '5100'
c Var 'aux1206' direct represents '0' with '5100'
c Var 'aux1206' order represents '1' with '5101'
-5100 5101 0
c Var 'aux1206' direct represents '1' with '5102'
5100 -5101 5102 0
-5102 5101 0
-5102 -5100 0
c Var 'aux1206' direct represents '2' with '-5101'
5100 5102 -5101 0
c Encoding variable: aux1207 with domain: int(0..2) (representing constraint ((x_00006_00006=3) + (x_00006_00005=3)))
c Both direct and order encoding.
c Var 'aux1207' order represents '0' with '5103'
c Var 'aux1207' direct represents '0' with '5103'
c Var 'aux1207' order represents '1' with '5104'
-5103 5104 0
c Var 'aux1207' direct represents '1' with '5105'
5103 -5104 5105 0
-5105 5104 0
-5105 -5103 0
c Var 'aux1207' direct represents '2' with '-5104'
5103 5105 -5104 0
c Encoding variable: aux1208 with domain: int(0..3) (representing constraint ((x_00006_00003=3) + aux1207))
c Both direct and order encoding.
c Var 'aux1208' order represents '0' with '5106'
c Var 'aux1208' direct represents '0' with '5106'
c Var 'aux1208' order represents '1' with '5107'
-5106 5107 0
c Var 'aux1208' direct represents '1' with '5108'
5106 -5107 5108 0
-5108 5107 0
-5108 -5106 0
c Var 'aux1208' order represents '2' with '5109'
-5107 5109 0
c Var 'aux1208' direct represents '2' with '5110'
5107 -5109 5110 0
-5110 5109 0
-5110 -5107 0
c Var 'aux1208' direct represents '3' with '-5109'
5106 5108 5110 -5109 0
c Encoding variable: aux1209 with domain: int(0..4) (representing constraint (aux1204 + aux1206))
c Both direct and order encoding.
c Var 'aux1209' order represents '0' with '5111'
c Var 'aux1209' direct represents '0' with '5111'
c Var 'aux1209' order represents '1' with '5112'
-5111 5112 0
c Var 'aux1209' direct represents '1' with '5113'
5111 -5112 5113 0
-5113 5112 0
-5113 -5111 0
c Var 'aux1209' order represents '2' with '5114'
-5112 5114 0
c Var 'aux1209' direct represents '2' with '5115'
5112 -5114 5115 0
-5115 5114 0
-5115 -5112 0
c Var 'aux1209' order represents '3' with '5116'
-5114 5116 0
c Var 'aux1209' direct represents '3' with '5117'
5114 -5116 5117 0
-5117 5116 0
-5117 -5114 0
c Var 'aux1209' direct represents '4' with '-5116'
5111 5113 5115 5117 -5116 0
c Encoding variable: aux1210 with domain: int(0..2) (representing constraint ((x_00006_00001=4) + (x_00006_00009=4)))
c Both direct and order encoding.
c Var 'aux1210' order represents '0' with '5118'
c Var 'aux1210' direct represents '0' with '5118'
c Var 'aux1210' order represents '1' with '5119'
-5118 5119 0
c Var 'aux1210' direct represents '1' with '5120'
5118 -5119 5120 0
-5120 5119 0
-5120 -5118 0
c Var 'aux1210' direct represents '2' with '-5119'
5118 5120 -5119 0
c Encoding variable: aux1211 with domain: int(0..2) (representing constraint ((x_00006_00008=4) + (x_00006_00002=4)))
c Both direct and order encoding.
c Var 'aux1211' order represents '0' with '5121'
c Var 'aux1211' direct represents '0' with '5121'
c Var 'aux1211' order represents '1' with '5122'
-5121 5122 0
c Var 'aux1211' direct represents '1' with '5123'
5121 -5122 5123 0
-5123 5122 0
-5123 -5121 0
c Var 'aux1211' direct represents '2' with '-5122'
5121 5123 -5122 0
c Encoding variable: aux1212 with domain: int(0..2) (representing constraint ((x_00006_00007=4) + (x_00006_00004=4)))
c Both direct and order encoding.
c Var 'aux1212' order represents '0' with '5124'
c Var 'aux1212' direct represents '0' with '5124'
c Var 'aux1212' order represents '1' with '5125'
-5124 5125 0
c Var 'aux1212' direct represents '1' with '5126'
5124 -5125 5126 0
-5126 5125 0
-5126 -5124 0
c Var 'aux1212' direct represents '2' with '-5125'
5124 5126 -5125 0
c Encoding variable: aux1213 with domain: int(0..2) (representing constraint ((x_00006_00006=4) + (x_00006_00005=4)))
c Both direct and order encoding.
c Var 'aux1213' order represents '0' with '5127'
c Var 'aux1213' direct represents '0' with '5127'
c Var 'aux1213' order represents '1' with '5128'
-5127 5128 0
c Var 'aux1213' direct represents '1' with '5129'
5127 -5128 5129 0
-5129 5128 0
-5129 -5127 0
c Var 'aux1213' direct represents '2' with '-5128'
5127 5129 -5128 0
c Encoding variable: aux1214 with domain: int(0..3) (representing constraint ((x_00006_00003=4) + aux1213))
c Both direct and order encoding.
c Var 'aux1214' order represents '0' with '5130'
c Var 'aux1214' direct represents '0' with '5130'
c Var 'aux1214' order represents '1' with '5131'
-5130 5131 0
c Var 'aux1214' direct represents '1' with '5132'
5130 -5131 5132 0
-5132 5131 0
-5132 -5130 0
c Var 'aux1214' order represents '2' with '5133'
-5131 5133 0
c Var 'aux1214' direct represents '2' with '5134'
5131 -5133 5134 0
-5134 5133 0
-5134 -5131 0
c Var 'aux1214' direct represents '3' with '-5133'
5130 5132 5134 -5133 0
c Encoding variable: aux1215 with domain: int(0..4) (representing constraint (aux1210 + aux1212))
c Both direct and order encoding.
c Var 'aux1215' order represents '0' with '5135'
c Var 'aux1215' direct represents '0' with '5135'
c Var 'aux1215' order represents '1' with '5136'
-5135 5136 0
c Var 'aux1215' direct represents '1' with '5137'
5135 -5136 5137 0
-5137 5136 0
-5137 -5135 0
c Var 'aux1215' order represents '2' with '5138'
-5136 5138 0
c Var 'aux1215' direct represents '2' with '5139'
5136 -5138 5139 0
-5139 5138 0
-5139 -5136 0
c Var 'aux1215' order represents '3' with '5140'
-5138 5140 0
c Var 'aux1215' direct represents '3' with '5141'
5138 -5140 5141 0
-5141 5140 0
-5141 -5138 0
c Var 'aux1215' direct represents '4' with '-5140'
5135 5137 5139 5141 -5140 0
c Encoding variable: aux1216 with domain: int(0..2) (representing constraint ((x_00006_00001=5) + (x_00006_00009=5)))
c Both direct and order encoding.
c Var 'aux1216' order represents '0' with '5142'
c Var 'aux1216' direct represents '0' with '5142'
c Var 'aux1216' order represents '1' with '5143'
-5142 5143 0
c Var 'aux1216' direct represents '1' with '5144'
5142 -5143 5144 0
-5144 5143 0
-5144 -5142 0
c Var 'aux1216' direct represents '2' with '-5143'
5142 5144 -5143 0
c Encoding variable: aux1217 with domain: int(0..2) (representing constraint ((x_00006_00008=5) + (x_00006_00002=5)))
c Both direct and order encoding.
c Var 'aux1217' order represents '0' with '5145'
c Var 'aux1217' direct represents '0' with '5145'
c Var 'aux1217' order represents '1' with '5146'
-5145 5146 0
c Var 'aux1217' direct represents '1' with '5147'
5145 -5146 5147 0
-5147 5146 0
-5147 -5145 0
c Var 'aux1217' direct represents '2' with '-5146'
5145 5147 -5146 0
c Encoding variable: aux1218 with domain: int(0..2) (representing constraint ((x_00006_00007=5) + (x_00006_00004=5)))
c Both direct and order encoding.
c Var 'aux1218' order represents '0' with '5148'
c Var 'aux1218' direct represents '0' with '5148'
c Var 'aux1218' order represents '1' with '5149'
-5148 5149 0
c Var 'aux1218' direct represents '1' with '5150'
5148 -5149 5150 0
-5150 5149 0
-5150 -5148 0
c Var 'aux1218' direct represents '2' with '-5149'
5148 5150 -5149 0
c Encoding variable: aux1219 with domain: int(0..2) (representing constraint ((x_00006_00006=5) + (x_00006_00005=5)))
c Both direct and order encoding.
c Var 'aux1219' order represents '0' with '5151'
c Var 'aux1219' direct represents '0' with '5151'
c Var 'aux1219' order represents '1' with '5152'
-5151 5152 0
c Var 'aux1219' direct represents '1' with '5153'
5151 -5152 5153 0
-5153 5152 0
-5153 -5151 0
c Var 'aux1219' direct represents '2' with '-5152'
5151 5153 -5152 0
c Encoding variable: aux1220 with domain: int(0..3) (representing constraint ((x_00006_00003=5) + aux1219))
c Both direct and order encoding.
c Var 'aux1220' order represents '0' with '5154'
c Var 'aux1220' direct represents '0' with '5154'
c Var 'aux1220' order represents '1' with '5155'
-5154 5155 0
c Var 'aux1220' direct represents '1' with '5156'
5154 -5155 5156 0
-5156 5155 0
-5156 -5154 0
c Var 'aux1220' order represents '2' with '5157'
-5155 5157 0
c Var 'aux1220' direct represents '2' with '5158'
5155 -5157 5158 0
-5158 5157 0
-5158 -5155 0
c Var 'aux1220' direct represents '3' with '-5157'
5154 5156 5158 -5157 0
c Encoding variable: aux1221 with domain: int(0..4) (representing constraint (aux1216 + aux1218))
c Both direct and order encoding.
c Var 'aux1221' order represents '0' with '5159'
c Var 'aux1221' direct represents '0' with '5159'
c Var 'aux1221' order represents '1' with '5160'
-5159 5160 0
c Var 'aux1221' direct represents '1' with '5161'
5159 -5160 5161 0
-5161 5160 0
-5161 -5159 0
c Var 'aux1221' order represents '2' with '5162'
-5160 5162 0
c Var 'aux1221' direct represents '2' with '5163'
5160 -5162 5163 0
-5163 5162 0
-5163 -5160 0
c Var 'aux1221' order represents '3' with '5164'
-5162 5164 0
c Var 'aux1221' direct represents '3' with '5165'
5162 -5164 5165 0
-5165 5164 0
-5165 -5162 0
c Var 'aux1221' direct represents '4' with '-5164'
5159 5161 5163 5165 -5164 0
c Encoding variable: aux1222 with domain: int(0..2) (representing constraint ((x_00006_00001=6) + (x_00006_00009=6)))
c Both direct and order encoding.
c Var 'aux1222' order represents '0' with '5166'
c Var 'aux1222' direct represents '0' with '5166'
c Var 'aux1222' order represents '1' with '5167'
-5166 5167 0
c Var 'aux1222' direct represents '1' with '5168'
5166 -5167 5168 0
-5168 5167 0
-5168 -5166 0
c Var 'aux1222' direct represents '2' with '-5167'
5166 5168 -5167 0
c Encoding variable: aux1223 with domain: int(0..2) (representing constraint ((x_00006_00008=6) + (x_00006_00002=6)))
c Both direct and order encoding.
c Var 'aux1223' order represents '0' with '5169'
c Var 'aux1223' direct represents '0' with '5169'
c Var 'aux1223' order represents '1' with '5170'
-5169 5170 0
c Var 'aux1223' direct represents '1' with '5171'
5169 -5170 5171 0
-5171 5170 0
-5171 -5169 0
c Var 'aux1223' direct represents '2' with '-5170'
5169 5171 -5170 0
c Encoding variable: aux1224 with domain: int(0..2) (representing constraint ((x_00006_00007=6) + (x_00006_00004=6)))
c Both direct and order encoding.
c Var 'aux1224' order represents '0' with '5172'
c Var 'aux1224' direct represents '0' with '5172'
c Var 'aux1224' order represents '1' with '5173'
-5172 5173 0
c Var 'aux1224' direct represents '1' with '5174'
5172 -5173 5174 0
-5174 5173 0
-5174 -5172 0
c Var 'aux1224' direct represents '2' with '-5173'
5172 5174 -5173 0
c Encoding variable: aux1225 with domain: int(0..2) (representing constraint ((x_00006_00006=6) + (x_00006_00005=6)))
c Both direct and order encoding.
c Var 'aux1225' order represents '0' with '5175'
c Var 'aux1225' direct represents '0' with '5175'
c Var 'aux1225' order represents '1' with '5176'
-5175 5176 0
c Var 'aux1225' direct represents '1' with '5177'
5175 -5176 5177 0
-5177 5176 0
-5177 -5175 0
c Var 'aux1225' direct represents '2' with '-5176'
5175 5177 -5176 0
c Encoding variable: aux1226 with domain: int(0..3) (representing constraint ((x_00006_00003=6) + aux1225))
c Both direct and order encoding.
c Var 'aux1226' order represents '0' with '5178'
c Var 'aux1226' direct represents '0' with '5178'
c Var 'aux1226' order represents '1' with '5179'
-5178 5179 0
c Var 'aux1226' direct represents '1' with '5180'
5178 -5179 5180 0
-5180 5179 0
-5180 -5178 0
c Var 'aux1226' order represents '2' with '5181'
-5179 5181 0
c Var 'aux1226' direct represents '2' with '5182'
5179 -5181 5182 0
-5182 5181 0
-5182 -5179 0
c Var 'aux1226' direct represents '3' with '-5181'
5178 5180 5182 -5181 0
c Encoding variable: aux1227 with domain: int(0..4) (representing constraint (aux1222 + aux1224))
c Both direct and order encoding.
c Var 'aux1227' order represents '0' with '5183'
c Var 'aux1227' direct represents '0' with '5183'
c Var 'aux1227' order represents '1' with '5184'
-5183 5184 0
c Var 'aux1227' direct represents '1' with '5185'
5183 -5184 5185 0
-5185 5184 0
-5185 -5183 0
c Var 'aux1227' order represents '2' with '5186'
-5184 5186 0
c Var 'aux1227' direct represents '2' with '5187'
5184 -5186 5187 0
-5187 5186 0
-5187 -5184 0
c Var 'aux1227' order represents '3' with '5188'
-5186 5188 0
c Var 'aux1227' direct represents '3' with '5189'
5186 -5188 5189 0
-5189 5188 0
-5189 -5186 0
c Var 'aux1227' direct represents '4' with '-5188'
5183 5185 5187 5189 -5188 0
c Encoding variable: aux1228 with domain: int(0..2) (representing constraint ((x_00006_00001=7) + (x_00006_00009=7)))
c Both direct and order encoding.
c Var 'aux1228' order represents '0' with '5190'
c Var 'aux1228' direct represents '0' with '5190'
c Var 'aux1228' order represents '1' with '5191'
-5190 5191 0
c Var 'aux1228' direct represents '1' with '5192'
5190 -5191 5192 0
-5192 5191 0
-5192 -5190 0
c Var 'aux1228' direct represents '2' with '-5191'
5190 5192 -5191 0
c Encoding variable: aux1229 with domain: int(0..2) (representing constraint ((x_00006_00008=7) + (x_00006_00002=7)))
c Both direct and order encoding.
c Var 'aux1229' order represents '0' with '5193'
c Var 'aux1229' direct represents '0' with '5193'
c Var 'aux1229' order represents '1' with '5194'
-5193 5194 0
c Var 'aux1229' direct represents '1' with '5195'
5193 -5194 5195 0
-5195 5194 0
-5195 -5193 0
c Var 'aux1229' direct represents '2' with '-5194'
5193 5195 -5194 0
c Encoding variable: aux1230 with domain: int(0..2) (representing constraint ((x_00006_00007=7) + (x_00006_00004=7)))
c Both direct and order encoding.
c Var 'aux1230' order represents '0' with '5196'
c Var 'aux1230' direct represents '0' with '5196'
c Var 'aux1230' order represents '1' with '5197'
-5196 5197 0
c Var 'aux1230' direct represents '1' with '5198'
5196 -5197 5198 0
-5198 5197 0
-5198 -5196 0
c Var 'aux1230' direct represents '2' with '-5197'
5196 5198 -5197 0
c Encoding variable: aux1231 with domain: int(0..2) (representing constraint ((x_00006_00006=7) + (x_00006_00005=7)))
c Both direct and order encoding.
c Var 'aux1231' order represents '0' with '5199'
c Var 'aux1231' direct represents '0' with '5199'
c Var 'aux1231' order represents '1' with '5200'
-5199 5200 0
c Var 'aux1231' direct represents '1' with '5201'
5199 -5200 5201 0
-5201 5200 0
-5201 -5199 0
c Var 'aux1231' direct represents '2' with '-5200'
5199 5201 -5200 0
c Encoding variable: aux1232 with domain: int(0..3) (representing constraint ((x_00006_00003=7) + aux1231))
c Both direct and order encoding.
c Var 'aux1232' order represents '0' with '5202'
c Var 'aux1232' direct represents '0' with '5202'
c Var 'aux1232' order represents '1' with '5203'
-5202 5203 0
c Var 'aux1232' direct represents '1' with '5204'
5202 -5203 5204 0
-5204 5203 0
-5204 -5202 0
c Var 'aux1232' order represents '2' with '5205'
-5203 5205 0
c Var 'aux1232' direct represents '2' with '5206'
5203 -5205 5206 0
-5206 5205 0
-5206 -5203 0
c Var 'aux1232' direct represents '3' with '-5205'
5202 5204 5206 -5205 0
c Encoding variable: aux1233 with domain: int(0..4) (representing constraint (aux1228 + aux1230))
c Both direct and order encoding.
c Var 'aux1233' order represents '0' with '5207'
c Var 'aux1233' direct represents '0' with '5207'
c Var 'aux1233' order represents '1' with '5208'
-5207 5208 0
c Var 'aux1233' direct represents '1' with '5209'
5207 -5208 5209 0
-5209 5208 0
-5209 -5207 0
c Var 'aux1233' order represents '2' with '5210'
-5208 5210 0
c Var 'aux1233' direct represents '2' with '5211'
5208 -5210 5211 0
-5211 5210 0
-5211 -5208 0
c Var 'aux1233' order represents '3' with '5212'
-5210 5212 0
c Var 'aux1233' direct represents '3' with '5213'
5210 -5212 5213 0
-5213 5212 0
-5213 -5210 0
c Var 'aux1233' direct represents '4' with '-5212'
5207 5209 5211 5213 -5212 0
c Encoding variable: aux1234 with domain: int(0..2) (representing constraint ((x_00006_00001=8) + (x_00006_00009=8)))
c Both direct and order encoding.
c Var 'aux1234' order represents '0' with '5214'
c Var 'aux1234' direct represents '0' with '5214'
c Var 'aux1234' order represents '1' with '5215'
-5214 5215 0
c Var 'aux1234' direct represents '1' with '5216'
5214 -5215 5216 0
-5216 5215 0
-5216 -5214 0
c Var 'aux1234' direct represents '2' with '-5215'
5214 5216 -5215 0
c Encoding variable: aux1235 with domain: int(0..2) (representing constraint ((x_00006_00008=8) + (x_00006_00002=8)))
c Both direct and order encoding.
c Var 'aux1235' order represents '0' with '5217'
c Var 'aux1235' direct represents '0' with '5217'
c Var 'aux1235' order represents '1' with '5218'
-5217 5218 0
c Var 'aux1235' direct represents '1' with '5219'
5217 -5218 5219 0
-5219 5218 0
-5219 -5217 0
c Var 'aux1235' direct represents '2' with '-5218'
5217 5219 -5218 0
c Encoding variable: aux1236 with domain: int(0..2) (representing constraint ((x_00006_00007=8) + (x_00006_00004=8)))
c Both direct and order encoding.
c Var 'aux1236' order represents '0' with '5220'
c Var 'aux1236' direct represents '0' with '5220'
c Var 'aux1236' order represents '1' with '5221'
-5220 5221 0
c Var 'aux1236' direct represents '1' with '5222'
5220 -5221 5222 0
-5222 5221 0
-5222 -5220 0
c Var 'aux1236' direct represents '2' with '-5221'
5220 5222 -5221 0
c Encoding variable: aux1237 with domain: int(0..2) (representing constraint ((x_00006_00006=8) + (x_00006_00005=8)))
c Both direct and order encoding.
c Var 'aux1237' order represents '0' with '5223'
c Var 'aux1237' direct represents '0' with '5223'
c Var 'aux1237' order represents '1' with '5224'
-5223 5224 0
c Var 'aux1237' direct represents '1' with '5225'
5223 -5224 5225 0
-5225 5224 0
-5225 -5223 0
c Var 'aux1237' direct represents '2' with '-5224'
5223 5225 -5224 0
c Encoding variable: aux1238 with domain: int(0..3) (representing constraint ((x_00006_00003=8) + aux1237))
c Both direct and order encoding.
c Var 'aux1238' order represents '0' with '5226'
c Var 'aux1238' direct represents '0' with '5226'
c Var 'aux1238' order represents '1' with '5227'
-5226 5227 0
c Var 'aux1238' direct represents '1' with '5228'
5226 -5227 5228 0
-5228 5227 0
-5228 -5226 0
c Var 'aux1238' order represents '2' with '5229'
-5227 5229 0
c Var 'aux1238' direct represents '2' with '5230'
5227 -5229 5230 0
-5230 5229 0
-5230 -5227 0
c Var 'aux1238' direct represents '3' with '-5229'
5226 5228 5230 -5229 0
c Encoding variable: aux1239 with domain: int(0..4) (representing constraint (aux1234 + aux1236))
c Both direct and order encoding.
c Var 'aux1239' order represents '0' with '5231'
c Var 'aux1239' direct represents '0' with '5231'
c Var 'aux1239' order represents '1' with '5232'
-5231 5232 0
c Var 'aux1239' direct represents '1' with '5233'
5231 -5232 5233 0
-5233 5232 0
-5233 -5231 0
c Var 'aux1239' order represents '2' with '5234'
-5232 5234 0
c Var 'aux1239' direct represents '2' with '5235'
5232 -5234 5235 0
-5235 5234 0
-5235 -5232 0
c Var 'aux1239' order represents '3' with '5236'
-5234 5236 0
c Var 'aux1239' direct represents '3' with '5237'
5234 -5236 5237 0
-5237 5236 0
-5237 -5234 0
c Var 'aux1239' direct represents '4' with '-5236'
5231 5233 5235 5237 -5236 0
c Encoding variable: aux1240 with domain: int(0..2) (representing constraint ((x_00006_00001=9) + (x_00006_00009=9)))
c Both direct and order encoding.
c Var 'aux1240' order represents '0' with '5238'
c Var 'aux1240' direct represents '0' with '5238'
c Var 'aux1240' order represents '1' with '5239'
-5238 5239 0
c Var 'aux1240' direct represents '1' with '5240'
5238 -5239 5240 0
-5240 5239 0
-5240 -5238 0
c Var 'aux1240' direct represents '2' with '-5239'
5238 5240 -5239 0
c Encoding variable: aux1241 with domain: int(0..2) (representing constraint ((x_00006_00008=9) + (x_00006_00002=9)))
c Both direct and order encoding.
c Var 'aux1241' order represents '0' with '5241'
c Var 'aux1241' direct represents '0' with '5241'
c Var 'aux1241' order represents '1' with '5242'
-5241 5242 0
c Var 'aux1241' direct represents '1' with '5243'
5241 -5242 5243 0
-5243 5242 0
-5243 -5241 0
c Var 'aux1241' direct represents '2' with '-5242'
5241 5243 -5242 0
c Encoding variable: aux1242 with domain: int(0..2) (representing constraint ((x_00006_00007=9) + (x_00006_00004=9)))
c Both direct and order encoding.
c Var 'aux1242' order represents '0' with '5244'
c Var 'aux1242' direct represents '0' with '5244'
c Var 'aux1242' order represents '1' with '5245'
-5244 5245 0
c Var 'aux1242' direct represents '1' with '5246'
5244 -5245 5246 0
-5246 5245 0
-5246 -5244 0
c Var 'aux1242' direct represents '2' with '-5245'
5244 5246 -5245 0
c Encoding variable: aux1243 with domain: int(0..2) (representing constraint ((x_00006_00006=9) + (x_00006_00005=9)))
c Both direct and order encoding.
c Var 'aux1243' order represents '0' with '5247'
c Var 'aux1243' direct represents '0' with '5247'
c Var 'aux1243' order represents '1' with '5248'
-5247 5248 0
c Var 'aux1243' direct represents '1' with '5249'
5247 -5248 5249 0
-5249 5248 0
-5249 -5247 0
c Var 'aux1243' direct represents '2' with '-5248'
5247 5249 -5248 0
c Encoding variable: aux1244 with domain: int(0..3) (representing constraint ((x_00006_00003=9) + aux1243))
c Both direct and order encoding.
c Var 'aux1244' order represents '0' with '5250'
c Var 'aux1244' direct represents '0' with '5250'
c Var 'aux1244' order represents '1' with '5251'
-5250 5251 0
c Var 'aux1244' direct represents '1' with '5252'
5250 -5251 5252 0
-5252 5251 0
-5252 -5250 0
c Var 'aux1244' order represents '2' with '5253'
-5251 5253 0
c Var 'aux1244' direct represents '2' with '5254'
5251 -5253 5254 0
-5254 5253 0
-5254 -5251 0
c Var 'aux1244' direct represents '3' with '-5253'
5250 5252 5254 -5253 0
c Encoding variable: aux1245 with domain: int(0..4) (representing constraint (aux1240 + aux1242))
c Both direct and order encoding.
c Var 'aux1245' order represents '0' with '5255'
c Var 'aux1245' direct represents '0' with '5255'
c Var 'aux1245' order represents '1' with '5256'
-5255 5256 0
c Var 'aux1245' direct represents '1' with '5257'
5255 -5256 5257 0
-5257 5256 0
-5257 -5255 0
c Var 'aux1245' order represents '2' with '5258'
-5256 5258 0
c Var 'aux1245' direct represents '2' with '5259'
5256 -5258 5259 0
-5259 5258 0
-5259 -5256 0
c Var 'aux1245' order represents '3' with '5260'
-5258 5260 0
c Var 'aux1245' direct represents '3' with '5261'
5258 -5260 5261 0
-5261 5260 0
-5261 -5258 0
c Var 'aux1245' direct represents '4' with '-5260'
5255 5257 5259 5261 -5260 0
c Encoding variable: aux1246 with domain: int(0..2) (representing constraint ((x_00007_00001=1) + (x_00007_00009=1)))
c Both direct and order encoding.
c Var 'aux1246' order represents '0' with '5262'
c Var 'aux1246' direct represents '0' with '5262'
c Var 'aux1246' order represents '1' with '5263'
-5262 5263 0
c Var 'aux1246' direct represents '1' with '5264'
5262 -5263 5264 0
-5264 5263 0
-5264 -5262 0
c Var 'aux1246' direct represents '2' with '-5263'
5262 5264 -5263 0
c Encoding variable: aux1247 with domain: int(0..2) (representing constraint ((x_00007_00008=1) + (x_00007_00002=1)))
c Both direct and order encoding.
c Var 'aux1247' order represents '0' with '5265'
c Var 'aux1247' direct represents '0' with '5265'
c Var 'aux1247' order represents '1' with '5266'
-5265 5266 0
c Var 'aux1247' direct represents '1' with '5267'
5265 -5266 5267 0
-5267 5266 0
-5267 -5265 0
c Var 'aux1247' direct represents '2' with '-5266'
5265 5267 -5266 0
c Encoding variable: aux1248 with domain: int(0..2) (representing constraint ((x_00007_00007=1) + (x_00007_00004=1)))
c Both direct and order encoding.
c Var 'aux1248' order represents '0' with '5268'
c Var 'aux1248' direct represents '0' with '5268'
c Var 'aux1248' order represents '1' with '5269'
-5268 5269 0
c Var 'aux1248' direct represents '1' with '5270'
5268 -5269 5270 0
-5270 5269 0
-5270 -5268 0
c Var 'aux1248' direct represents '2' with '-5269'
5268 5270 -5269 0
c Encoding variable: aux1249 with domain: int(0..2) (representing constraint ((x_00007_00006=1) + (x_00007_00005=1)))
c Both direct and order encoding.
c Var 'aux1249' order represents '0' with '5271'
c Var 'aux1249' direct represents '0' with '5271'
c Var 'aux1249' order represents '1' with '5272'
-5271 5272 0
c Var 'aux1249' direct represents '1' with '5273'
5271 -5272 5273 0
-5273 5272 0
-5273 -5271 0
c Var 'aux1249' direct represents '2' with '-5272'
5271 5273 -5272 0
c Encoding variable: aux1250 with domain: int(0..3) (representing constraint ((x_00007_00003=1) + aux1249))
c Both direct and order encoding.
c Var 'aux1250' order represents '0' with '5274'
c Var 'aux1250' direct represents '0' with '5274'
c Var 'aux1250' order represents '1' with '5275'
-5274 5275 0
c Var 'aux1250' direct represents '1' with '5276'
5274 -5275 5276 0
-5276 5275 0
-5276 -5274 0
c Var 'aux1250' order represents '2' with '5277'
-5275 5277 0
c Var 'aux1250' direct represents '2' with '5278'
5275 -5277 5278 0
-5278 5277 0
-5278 -5275 0
c Var 'aux1250' direct represents '3' with '-5277'
5274 5276 5278 -5277 0
c Encoding variable: aux1251 with domain: int(0..4) (representing constraint (aux1246 + aux1248))
c Both direct and order encoding.
c Var 'aux1251' order represents '0' with '5279'
c Var 'aux1251' direct represents '0' with '5279'
c Var 'aux1251' order represents '1' with '5280'
-5279 5280 0
c Var 'aux1251' direct represents '1' with '5281'
5279 -5280 5281 0
-5281 5280 0
-5281 -5279 0
c Var 'aux1251' order represents '2' with '5282'
-5280 5282 0
c Var 'aux1251' direct represents '2' with '5283'
5280 -5282 5283 0
-5283 5282 0
-5283 -5280 0
c Var 'aux1251' order represents '3' with '5284'
-5282 5284 0
c Var 'aux1251' direct represents '3' with '5285'
5282 -5284 5285 0
-5285 5284 0
-5285 -5282 0
c Var 'aux1251' direct represents '4' with '-5284'
5279 5281 5283 5285 -5284 0
c Encoding variable: aux1252 with domain: int(0..2) (representing constraint ((x_00007_00001=2) + (x_00007_00009=2)))
c Both direct and order encoding.
c Var 'aux1252' order represents '0' with '5286'
c Var 'aux1252' direct represents '0' with '5286'
c Var 'aux1252' order represents '1' with '5287'
-5286 5287 0
c Var 'aux1252' direct represents '1' with '5288'
5286 -5287 5288 0
-5288 5287 0
-5288 -5286 0
c Var 'aux1252' direct represents '2' with '-5287'
5286 5288 -5287 0
c Encoding variable: aux1253 with domain: int(0..2) (representing constraint ((x_00007_00008=2) + (x_00007_00002=2)))
c Both direct and order encoding.
c Var 'aux1253' order represents '0' with '5289'
c Var 'aux1253' direct represents '0' with '5289'
c Var 'aux1253' order represents '1' with '5290'
-5289 5290 0
c Var 'aux1253' direct represents '1' with '5291'
5289 -5290 5291 0
-5291 5290 0
-5291 -5289 0
c Var 'aux1253' direct represents '2' with '-5290'
5289 5291 -5290 0
c Encoding variable: aux1254 with domain: int(0..2) (representing constraint ((x_00007_00007=2) + (x_00007_00004=2)))
c Both direct and order encoding.
c Var 'aux1254' order represents '0' with '5292'
c Var 'aux1254' direct represents '0' with '5292'
c Var 'aux1254' order represents '1' with '5293'
-5292 5293 0
c Var 'aux1254' direct represents '1' with '5294'
5292 -5293 5294 0
-5294 5293 0
-5294 -5292 0
c Var 'aux1254' direct represents '2' with '-5293'
5292 5294 -5293 0
c Encoding variable: aux1255 with domain: int(0..2) (representing constraint ((x_00007_00006=2) + (x_00007_00005=2)))
c Both direct and order encoding.
c Var 'aux1255' order represents '0' with '5295'
c Var 'aux1255' direct represents '0' with '5295'
c Var 'aux1255' order represents '1' with '5296'
-5295 5296 0
c Var 'aux1255' direct represents '1' with '5297'
5295 -5296 5297 0
-5297 5296 0
-5297 -5295 0
c Var 'aux1255' direct represents '2' with '-5296'
5295 5297 -5296 0
c Encoding variable: aux1256 with domain: int(0..3) (representing constraint ((x_00007_00003=2) + aux1255))
c Both direct and order encoding.
c Var 'aux1256' order represents '0' with '5298'
c Var 'aux1256' direct represents '0' with '5298'
c Var 'aux1256' order represents '1' with '5299'
-5298 5299 0
c Var 'aux1256' direct represents '1' with '5300'
5298 -5299 5300 0
-5300 5299 0
-5300 -5298 0
c Var 'aux1256' order represents '2' with '5301'
-5299 5301 0
c Var 'aux1256' direct represents '2' with '5302'
5299 -5301 5302 0
-5302 5301 0
-5302 -5299 0
c Var 'aux1256' direct represents '3' with '-5301'
5298 5300 5302 -5301 0
c Encoding variable: aux1257 with domain: int(0..4) (representing constraint (aux1252 + aux1254))
c Both direct and order encoding.
c Var 'aux1257' order represents '0' with '5303'
c Var 'aux1257' direct represents '0' with '5303'
c Var 'aux1257' order represents '1' with '5304'
-5303 5304 0
c Var 'aux1257' direct represents '1' with '5305'
5303 -5304 5305 0
-5305 5304 0
-5305 -5303 0
c Var 'aux1257' order represents '2' with '5306'
-5304 5306 0
c Var 'aux1257' direct represents '2' with '5307'
5304 -5306 5307 0
-5307 5306 0
-5307 -5304 0
c Var 'aux1257' order represents '3' with '5308'
-5306 5308 0
c Var 'aux1257' direct represents '3' with '5309'
5306 -5308 5309 0
-5309 5308 0
-5309 -5306 0
c Var 'aux1257' direct represents '4' with '-5308'
5303 5305 5307 5309 -5308 0
c Encoding variable: aux1258 with domain: int(0..2) (representing constraint ((x_00007_00001=3) + (x_00007_00009=3)))
c Both direct and order encoding.
c Var 'aux1258' order represents '0' with '5310'
c Var 'aux1258' direct represents '0' with '5310'
c Var 'aux1258' order represents '1' with '5311'
-5310 5311 0
c Var 'aux1258' direct represents '1' with '5312'
5310 -5311 5312 0
-5312 5311 0
-5312 -5310 0
c Var 'aux1258' direct represents '2' with '-5311'
5310 5312 -5311 0
c Encoding variable: aux1259 with domain: int(0..2) (representing constraint ((x_00007_00008=3) + (x_00007_00002=3)))
c Both direct and order encoding.
c Var 'aux1259' order represents '0' with '5313'
c Var 'aux1259' direct represents '0' with '5313'
c Var 'aux1259' order represents '1' with '5314'
-5313 5314 0
c Var 'aux1259' direct represents '1' with '5315'
5313 -5314 5315 0
-5315 5314 0
-5315 -5313 0
c Var 'aux1259' direct represents '2' with '-5314'
5313 5315 -5314 0
c Encoding variable: aux1260 with domain: int(0..2) (representing constraint ((x_00007_00007=3) + (x_00007_00004=3)))
c Both direct and order encoding.
c Var 'aux1260' order represents '0' with '5316'
c Var 'aux1260' direct represents '0' with '5316'
c Var 'aux1260' order represents '1' with '5317'
-5316 5317 0
c Var 'aux1260' direct represents '1' with '5318'
5316 -5317 5318 0
-5318 5317 0
-5318 -5316 0
c Var 'aux1260' direct represents '2' with '-5317'
5316 5318 -5317 0
c Encoding variable: aux1261 with domain: int(0..2) (representing constraint ((x_00007_00006=3) + (x_00007_00005=3)))
c Both direct and order encoding.
c Var 'aux1261' order represents '0' with '5319'
c Var 'aux1261' direct represents '0' with '5319'
c Var 'aux1261' order represents '1' with '5320'
-5319 5320 0
c Var 'aux1261' direct represents '1' with '5321'
5319 -5320 5321 0
-5321 5320 0
-5321 -5319 0
c Var 'aux1261' direct represents '2' with '-5320'
5319 5321 -5320 0
c Encoding variable: aux1262 with domain: int(0..3) (representing constraint ((x_00007_00003=3) + aux1261))
c Both direct and order encoding.
c Var 'aux1262' order represents '0' with '5322'
c Var 'aux1262' direct represents '0' with '5322'
c Var 'aux1262' order represents '1' with '5323'
-5322 5323 0
c Var 'aux1262' direct represents '1' with '5324'
5322 -5323 5324 0
-5324 5323 0
-5324 -5322 0
c Var 'aux1262' order represents '2' with '5325'
-5323 5325 0
c Var 'aux1262' direct represents '2' with '5326'
5323 -5325 5326 0
-5326 5325 0
-5326 -5323 0
c Var 'aux1262' direct represents '3' with '-5325'
5322 5324 5326 -5325 0
c Encoding variable: aux1263 with domain: int(0..4) (representing constraint (aux1258 + aux1260))
c Both direct and order encoding.
c Var 'aux1263' order represents '0' with '5327'
c Var 'aux1263' direct represents '0' with '5327'
c Var 'aux1263' order represents '1' with '5328'
-5327 5328 0
c Var 'aux1263' direct represents '1' with '5329'
5327 -5328 5329 0
-5329 5328 0
-5329 -5327 0
c Var 'aux1263' order represents '2' with '5330'
-5328 5330 0
c Var 'aux1263' direct represents '2' with '5331'
5328 -5330 5331 0
-5331 5330 0
-5331 -5328 0
c Var 'aux1263' order represents '3' with '5332'
-5330 5332 0
c Var 'aux1263' direct represents '3' with '5333'
5330 -5332 5333 0
-5333 5332 0
-5333 -5330 0
c Var 'aux1263' direct represents '4' with '-5332'
5327 5329 5331 5333 -5332 0
c Encoding variable: aux1264 with domain: int(0..2) (representing constraint ((x_00007_00001=4) + (x_00007_00009=4)))
c Both direct and order encoding.
c Var 'aux1264' order represents '0' with '5334'
c Var 'aux1264' direct represents '0' with '5334'
c Var 'aux1264' order represents '1' with '5335'
-5334 5335 0
c Var 'aux1264' direct represents '1' with '5336'
5334 -5335 5336 0
-5336 5335 0
-5336 -5334 0
c Var 'aux1264' direct represents '2' with '-5335'
5334 5336 -5335 0
c Encoding variable: aux1265 with domain: int(0..2) (representing constraint ((x_00007_00008=4) + (x_00007_00002=4)))
c Both direct and order encoding.
c Var 'aux1265' order represents '0' with '5337'
c Var 'aux1265' direct represents '0' with '5337'
c Var 'aux1265' order represents '1' with '5338'
-5337 5338 0
c Var 'aux1265' direct represents '1' with '5339'
5337 -5338 5339 0
-5339 5338 0
-5339 -5337 0
c Var 'aux1265' direct represents '2' with '-5338'
5337 5339 -5338 0
c Encoding variable: aux1266 with domain: int(0..2) (representing constraint ((x_00007_00007=4) + (x_00007_00004=4)))
c Both direct and order encoding.
c Var 'aux1266' order represents '0' with '5340'
c Var 'aux1266' direct represents '0' with '5340'
c Var 'aux1266' order represents '1' with '5341'
-5340 5341 0
c Var 'aux1266' direct represents '1' with '5342'
5340 -5341 5342 0
-5342 5341 0
-5342 -5340 0
c Var 'aux1266' direct represents '2' with '-5341'
5340 5342 -5341 0
c Encoding variable: aux1267 with domain: int(0..2) (representing constraint ((x_00007_00006=4) + (x_00007_00005=4)))
c Both direct and order encoding.
c Var 'aux1267' order represents '0' with '5343'
c Var 'aux1267' direct represents '0' with '5343'
c Var 'aux1267' order represents '1' with '5344'
-5343 5344 0
c Var 'aux1267' direct represents '1' with '5345'
5343 -5344 5345 0
-5345 5344 0
-5345 -5343 0
c Var 'aux1267' direct represents '2' with '-5344'
5343 5345 -5344 0
c Encoding variable: aux1268 with domain: int(0..3) (representing constraint ((x_00007_00003=4) + aux1267))
c Both direct and order encoding.
c Var 'aux1268' order represents '0' with '5346'
c Var 'aux1268' direct represents '0' with '5346'
c Var 'aux1268' order represents '1' with '5347'
-5346 5347 0
c Var 'aux1268' direct represents '1' with '5348'
5346 -5347 5348 0
-5348 5347 0
-5348 -5346 0
c Var 'aux1268' order represents '2' with '5349'
-5347 5349 0
c Var 'aux1268' direct represents '2' with '5350'
5347 -5349 5350 0
-5350 5349 0
-5350 -5347 0
c Var 'aux1268' direct represents '3' with '-5349'
5346 5348 5350 -5349 0
c Encoding variable: aux1269 with domain: int(0..4) (representing constraint (aux1264 + aux1266))
c Both direct and order encoding.
c Var 'aux1269' order represents '0' with '5351'
c Var 'aux1269' direct represents '0' with '5351'
c Var 'aux1269' order represents '1' with '5352'
-5351 5352 0
c Var 'aux1269' direct represents '1' with '5353'
5351 -5352 5353 0
-5353 5352 0
-5353 -5351 0
c Var 'aux1269' order represents '2' with '5354'
-5352 5354 0
c Var 'aux1269' direct represents '2' with '5355'
5352 -5354 5355 0
-5355 5354 0
-5355 -5352 0
c Var 'aux1269' order represents '3' with '5356'
-5354 5356 0
c Var 'aux1269' direct represents '3' with '5357'
5354 -5356 5357 0
-5357 5356 0
-5357 -5354 0
c Var 'aux1269' direct represents '4' with '-5356'
5351 5353 5355 5357 -5356 0
c Encoding variable: aux1270 with domain: int(0..2) (representing constraint ((x_00007_00001=5) + (x_00007_00009=5)))
c Both direct and order encoding.
c Var 'aux1270' order represents '0' with '5358'
c Var 'aux1270' direct represents '0' with '5358'
c Var 'aux1270' order represents '1' with '5359'
-5358 5359 0
c Var 'aux1270' direct represents '1' with '5360'
5358 -5359 5360 0
-5360 5359 0
-5360 -5358 0
c Var 'aux1270' direct represents '2' with '-5359'
5358 5360 -5359 0
c Encoding variable: aux1271 with domain: int(0..2) (representing constraint ((x_00007_00008=5) + (x_00007_00002=5)))
c Both direct and order encoding.
c Var 'aux1271' order represents '0' with '5361'
c Var 'aux1271' direct represents '0' with '5361'
c Var 'aux1271' order represents '1' with '5362'
-5361 5362 0
c Var 'aux1271' direct represents '1' with '5363'
5361 -5362 5363 0
-5363 5362 0
-5363 -5361 0
c Var 'aux1271' direct represents '2' with '-5362'
5361 5363 -5362 0
c Encoding variable: aux1272 with domain: int(0..2) (representing constraint ((x_00007_00007=5) + (x_00007_00004=5)))
c Both direct and order encoding.
c Var 'aux1272' order represents '0' with '5364'
c Var 'aux1272' direct represents '0' with '5364'
c Var 'aux1272' order represents '1' with '5365'
-5364 5365 0
c Var 'aux1272' direct represents '1' with '5366'
5364 -5365 5366 0
-5366 5365 0
-5366 -5364 0
c Var 'aux1272' direct represents '2' with '-5365'
5364 5366 -5365 0
c Encoding variable: aux1273 with domain: int(0..2) (representing constraint ((x_00007_00006=5) + (x_00007_00005=5)))
c Both direct and order encoding.
c Var 'aux1273' order represents '0' with '5367'
c Var 'aux1273' direct represents '0' with '5367'
c Var 'aux1273' order represents '1' with '5368'
-5367 5368 0
c Var 'aux1273' direct represents '1' with '5369'
5367 -5368 5369 0
-5369 5368 0
-5369 -5367 0
c Var 'aux1273' direct represents '2' with '-5368'
5367 5369 -5368 0
c Encoding variable: aux1274 with domain: int(0..3) (representing constraint ((x_00007_00003=5) + aux1273))
c Both direct and order encoding.
c Var 'aux1274' order represents '0' with '5370'
c Var 'aux1274' direct represents '0' with '5370'
c Var 'aux1274' order represents '1' with '5371'
-5370 5371 0
c Var 'aux1274' direct represents '1' with '5372'
5370 -5371 5372 0
-5372 5371 0
-5372 -5370 0
c Var 'aux1274' order represents '2' with '5373'
-5371 5373 0
c Var 'aux1274' direct represents '2' with '5374'
5371 -5373 5374 0
-5374 5373 0
-5374 -5371 0
c Var 'aux1274' direct represents '3' with '-5373'
5370 5372 5374 -5373 0
c Encoding variable: aux1275 with domain: int(0..4) (representing constraint (aux1270 + aux1272))
c Both direct and order encoding.
c Var 'aux1275' order represents '0' with '5375'
c Var 'aux1275' direct represents '0' with '5375'
c Var 'aux1275' order represents '1' with '5376'
-5375 5376 0
c Var 'aux1275' direct represents '1' with '5377'
5375 -5376 5377 0
-5377 5376 0
-5377 -5375 0
c Var 'aux1275' order represents '2' with '5378'
-5376 5378 0
c Var 'aux1275' direct represents '2' with '5379'
5376 -5378 5379 0
-5379 5378 0
-5379 -5376 0
c Var 'aux1275' order represents '3' with '5380'
-5378 5380 0
c Var 'aux1275' direct represents '3' with '5381'
5378 -5380 5381 0
-5381 5380 0
-5381 -5378 0
c Var 'aux1275' direct represents '4' with '-5380'
5375 5377 5379 5381 -5380 0
c Encoding variable: aux1276 with domain: int(0..2) (representing constraint ((x_00007_00001=6) + (x_00007_00009=6)))
c Both direct and order encoding.
c Var 'aux1276' order represents '0' with '5382'
c Var 'aux1276' direct represents '0' with '5382'
c Var 'aux1276' order represents '1' with '5383'
-5382 5383 0
c Var 'aux1276' direct represents '1' with '5384'
5382 -5383 5384 0
-5384 5383 0
-5384 -5382 0
c Var 'aux1276' direct represents '2' with '-5383'
5382 5384 -5383 0
c Encoding variable: aux1277 with domain: int(0..2) (representing constraint ((x_00007_00008=6) + (x_00007_00002=6)))
c Both direct and order encoding.
c Var 'aux1277' order represents '0' with '5385'
c Var 'aux1277' direct represents '0' with '5385'
c Var 'aux1277' order represents '1' with '5386'
-5385 5386 0
c Var 'aux1277' direct represents '1' with '5387'
5385 -5386 5387 0
-5387 5386 0
-5387 -5385 0
c Var 'aux1277' direct represents '2' with '-5386'
5385 5387 -5386 0
c Encoding variable: aux1278 with domain: int(0..2) (representing constraint ((x_00007_00007=6) + (x_00007_00004=6)))
c Both direct and order encoding.
c Var 'aux1278' order represents '0' with '5388'
c Var 'aux1278' direct represents '0' with '5388'
c Var 'aux1278' order represents '1' with '5389'
-5388 5389 0
c Var 'aux1278' direct represents '1' with '5390'
5388 -5389 5390 0
-5390 5389 0
-5390 -5388 0
c Var 'aux1278' direct represents '2' with '-5389'
5388 5390 -5389 0
c Encoding variable: aux1279 with domain: int(0..2) (representing constraint ((x_00007_00006=6) + (x_00007_00005=6)))
c Both direct and order encoding.
c Var 'aux1279' order represents '0' with '5391'
c Var 'aux1279' direct represents '0' with '5391'
c Var 'aux1279' order represents '1' with '5392'
-5391 5392 0
c Var 'aux1279' direct represents '1' with '5393'
5391 -5392 5393 0
-5393 5392 0
-5393 -5391 0
c Var 'aux1279' direct represents '2' with '-5392'
5391 5393 -5392 0
c Encoding variable: aux1280 with domain: int(0..3) (representing constraint ((x_00007_00003=6) + aux1279))
c Both direct and order encoding.
c Var 'aux1280' order represents '0' with '5394'
c Var 'aux1280' direct represents '0' with '5394'
c Var 'aux1280' order represents '1' with '5395'
-5394 5395 0
c Var 'aux1280' direct represents '1' with '5396'
5394 -5395 5396 0
-5396 5395 0
-5396 -5394 0
c Var 'aux1280' order represents '2' with '5397'
-5395 5397 0
c Var 'aux1280' direct represents '2' with '5398'
5395 -5397 5398 0
-5398 5397 0
-5398 -5395 0
c Var 'aux1280' direct represents '3' with '-5397'
5394 5396 5398 -5397 0
c Encoding variable: aux1281 with domain: int(0..4) (representing constraint (aux1276 + aux1278))
c Both direct and order encoding.
c Var 'aux1281' order represents '0' with '5399'
c Var 'aux1281' direct represents '0' with '5399'
c Var 'aux1281' order represents '1' with '5400'
-5399 5400 0
c Var 'aux1281' direct represents '1' with '5401'
5399 -5400 5401 0
-5401 5400 0
-5401 -5399 0
c Var 'aux1281' order represents '2' with '5402'
-5400 5402 0
c Var 'aux1281' direct represents '2' with '5403'
5400 -5402 5403 0
-5403 5402 0
-5403 -5400 0
c Var 'aux1281' order represents '3' with '5404'
-5402 5404 0
c Var 'aux1281' direct represents '3' with '5405'
5402 -5404 5405 0
-5405 5404 0
-5405 -5402 0
c Var 'aux1281' direct represents '4' with '-5404'
5399 5401 5403 5405 -5404 0
c Encoding variable: aux1282 with domain: int(0..2) (representing constraint ((x_00007_00001=7) + (x_00007_00009=7)))
c Both direct and order encoding.
c Var 'aux1282' order represents '0' with '5406'
c Var 'aux1282' direct represents '0' with '5406'
c Var 'aux1282' order represents '1' with '5407'
-5406 5407 0
c Var 'aux1282' direct represents '1' with '5408'
5406 -5407 5408 0
-5408 5407 0
-5408 -5406 0
c Var 'aux1282' direct represents '2' with '-5407'
5406 5408 -5407 0
c Encoding variable: aux1283 with domain: int(0..2) (representing constraint ((x_00007_00008=7) + (x_00007_00002=7)))
c Both direct and order encoding.
c Var 'aux1283' order represents '0' with '5409'
c Var 'aux1283' direct represents '0' with '5409'
c Var 'aux1283' order represents '1' with '5410'
-5409 5410 0
c Var 'aux1283' direct represents '1' with '5411'
5409 -5410 5411 0
-5411 5410 0
-5411 -5409 0
c Var 'aux1283' direct represents '2' with '-5410'
5409 5411 -5410 0
c Encoding variable: aux1284 with domain: int(0..2) (representing constraint ((x_00007_00007=7) + (x_00007_00004=7)))
c Both direct and order encoding.
c Var 'aux1284' order represents '0' with '5412'
c Var 'aux1284' direct represents '0' with '5412'
c Var 'aux1284' order represents '1' with '5413'
-5412 5413 0
c Var 'aux1284' direct represents '1' with '5414'
5412 -5413 5414 0
-5414 5413 0
-5414 -5412 0
c Var 'aux1284' direct represents '2' with '-5413'
5412 5414 -5413 0
c Encoding variable: aux1285 with domain: int(0..2) (representing constraint ((x_00007_00006=7) + (x_00007_00005=7)))
c Both direct and order encoding.
c Var 'aux1285' order represents '0' with '5415'
c Var 'aux1285' direct represents '0' with '5415'
c Var 'aux1285' order represents '1' with '5416'
-5415 5416 0
c Var 'aux1285' direct represents '1' with '5417'
5415 -5416 5417 0
-5417 5416 0
-5417 -5415 0
c Var 'aux1285' direct represents '2' with '-5416'
5415 5417 -5416 0
c Encoding variable: aux1286 with domain: int(0..3) (representing constraint ((x_00007_00003=7) + aux1285))
c Both direct and order encoding.
c Var 'aux1286' order represents '0' with '5418'
c Var 'aux1286' direct represents '0' with '5418'
c Var 'aux1286' order represents '1' with '5419'
-5418 5419 0
c Var 'aux1286' direct represents '1' with '5420'
5418 -5419 5420 0
-5420 5419 0
-5420 -5418 0
c Var 'aux1286' order represents '2' with '5421'
-5419 5421 0
c Var 'aux1286' direct represents '2' with '5422'
5419 -5421 5422 0
-5422 5421 0
-5422 -5419 0
c Var 'aux1286' direct represents '3' with '-5421'
5418 5420 5422 -5421 0
c Encoding variable: aux1287 with domain: int(0..4) (representing constraint (aux1282 + aux1284))
c Both direct and order encoding.
c Var 'aux1287' order represents '0' with '5423'
c Var 'aux1287' direct represents '0' with '5423'
c Var 'aux1287' order represents '1' with '5424'
-5423 5424 0
c Var 'aux1287' direct represents '1' with '5425'
5423 -5424 5425 0
-5425 5424 0
-5425 -5423 0
c Var 'aux1287' order represents '2' with '5426'
-5424 5426 0
c Var 'aux1287' direct represents '2' with '5427'
5424 -5426 5427 0
-5427 5426 0
-5427 -5424 0
c Var 'aux1287' order represents '3' with '5428'
-5426 5428 0
c Var 'aux1287' direct represents '3' with '5429'
5426 -5428 5429 0
-5429 5428 0
-5429 -5426 0
c Var 'aux1287' direct represents '4' with '-5428'
5423 5425 5427 5429 -5428 0
c Encoding variable: aux1288 with domain: int(0..2) (representing constraint ((x_00007_00001=8) + (x_00007_00009=8)))
c Both direct and order encoding.
c Var 'aux1288' order represents '0' with '5430'
c Var 'aux1288' direct represents '0' with '5430'
c Var 'aux1288' order represents '1' with '5431'
-5430 5431 0
c Var 'aux1288' direct represents '1' with '5432'
5430 -5431 5432 0
-5432 5431 0
-5432 -5430 0
c Var 'aux1288' direct represents '2' with '-5431'
5430 5432 -5431 0
c Encoding variable: aux1289 with domain: int(0..2) (representing constraint ((x_00007_00008=8) + (x_00007_00002=8)))
c Both direct and order encoding.
c Var 'aux1289' order represents '0' with '5433'
c Var 'aux1289' direct represents '0' with '5433'
c Var 'aux1289' order represents '1' with '5434'
-5433 5434 0
c Var 'aux1289' direct represents '1' with '5435'
5433 -5434 5435 0
-5435 5434 0
-5435 -5433 0
c Var 'aux1289' direct represents '2' with '-5434'
5433 5435 -5434 0
c Encoding variable: aux1290 with domain: int(0..2) (representing constraint ((x_00007_00007=8) + (x_00007_00004=8)))
c Both direct and order encoding.
c Var 'aux1290' order represents '0' with '5436'
c Var 'aux1290' direct represents '0' with '5436'
c Var 'aux1290' order represents '1' with '5437'
-5436 5437 0
c Var 'aux1290' direct represents '1' with '5438'
5436 -5437 5438 0
-5438 5437 0
-5438 -5436 0
c Var 'aux1290' direct represents '2' with '-5437'
5436 5438 -5437 0
c Encoding variable: aux1291 with domain: int(0..2) (representing constraint ((x_00007_00006=8) + (x_00007_00005=8)))
c Both direct and order encoding.
c Var 'aux1291' order represents '0' with '5439'
c Var 'aux1291' direct represents '0' with '5439'
c Var 'aux1291' order represents '1' with '5440'
-5439 5440 0
c Var 'aux1291' direct represents '1' with '5441'
5439 -5440 5441 0
-5441 5440 0
-5441 -5439 0
c Var 'aux1291' direct represents '2' with '-5440'
5439 5441 -5440 0
c Encoding variable: aux1292 with domain: int(0..3) (representing constraint ((x_00007_00003=8) + aux1291))
c Both direct and order encoding.
c Var 'aux1292' order represents '0' with '5442'
c Var 'aux1292' direct represents '0' with '5442'
c Var 'aux1292' order represents '1' with '5443'
-5442 5443 0
c Var 'aux1292' direct represents '1' with '5444'
5442 -5443 5444 0
-5444 5443 0
-5444 -5442 0
c Var 'aux1292' order represents '2' with '5445'
-5443 5445 0
c Var 'aux1292' direct represents '2' with '5446'
5443 -5445 5446 0
-5446 5445 0
-5446 -5443 0
c Var 'aux1292' direct represents '3' with '-5445'
5442 5444 5446 -5445 0
c Encoding variable: aux1293 with domain: int(0..4) (representing constraint (aux1288 + aux1290))
c Both direct and order encoding.
c Var 'aux1293' order represents '0' with '5447'
c Var 'aux1293' direct represents '0' with '5447'
c Var 'aux1293' order represents '1' with '5448'
-5447 5448 0
c Var 'aux1293' direct represents '1' with '5449'
5447 -5448 5449 0
-5449 5448 0
-5449 -5447 0
c Var 'aux1293' order represents '2' with '5450'
-5448 5450 0
c Var 'aux1293' direct represents '2' with '5451'
5448 -5450 5451 0
-5451 5450 0
-5451 -5448 0
c Var 'aux1293' order represents '3' with '5452'
-5450 5452 0
c Var 'aux1293' direct represents '3' with '5453'
5450 -5452 5453 0
-5453 5452 0
-5453 -5450 0
c Var 'aux1293' direct represents '4' with '-5452'
5447 5449 5451 5453 -5452 0
c Encoding variable: aux1294 with domain: int(0..2) (representing constraint ((x_00007_00001=9) + (x_00007_00009=9)))
c Both direct and order encoding.
c Var 'aux1294' order represents '0' with '5454'
c Var 'aux1294' direct represents '0' with '5454'
c Var 'aux1294' order represents '1' with '5455'
-5454 5455 0
c Var 'aux1294' direct represents '1' with '5456'
5454 -5455 5456 0
-5456 5455 0
-5456 -5454 0
c Var 'aux1294' direct represents '2' with '-5455'
5454 5456 -5455 0
c Encoding variable: aux1295 with domain: int(0..2) (representing constraint ((x_00007_00008=9) + (x_00007_00002=9)))
c Both direct and order encoding.
c Var 'aux1295' order represents '0' with '5457'
c Var 'aux1295' direct represents '0' with '5457'
c Var 'aux1295' order represents '1' with '5458'
-5457 5458 0
c Var 'aux1295' direct represents '1' with '5459'
5457 -5458 5459 0
-5459 5458 0
-5459 -5457 0
c Var 'aux1295' direct represents '2' with '-5458'
5457 5459 -5458 0
c Encoding variable: aux1296 with domain: int(0..2) (representing constraint ((x_00007_00007=9) + (x_00007_00004=9)))
c Both direct and order encoding.
c Var 'aux1296' order represents '0' with '5460'
c Var 'aux1296' direct represents '0' with '5460'
c Var 'aux1296' order represents '1' with '5461'
-5460 5461 0
c Var 'aux1296' direct represents '1' with '5462'
5460 -5461 5462 0
-5462 5461 0
-5462 -5460 0
c Var 'aux1296' direct represents '2' with '-5461'
5460 5462 -5461 0
c Encoding variable: aux1297 with domain: int(0..2) (representing constraint ((x_00007_00006=9) + (x_00007_00005=9)))
c Both direct and order encoding.
c Var 'aux1297' order represents '0' with '5463'
c Var 'aux1297' direct represents '0' with '5463'
c Var 'aux1297' order represents '1' with '5464'
-5463 5464 0
c Var 'aux1297' direct represents '1' with '5465'
5463 -5464 5465 0
-5465 5464 0
-5465 -5463 0
c Var 'aux1297' direct represents '2' with '-5464'
5463 5465 -5464 0
c Encoding variable: aux1298 with domain: int(0..3) (representing constraint ((x_00007_00003=9) + aux1297))
c Both direct and order encoding.
c Var 'aux1298' order represents '0' with '5466'
c Var 'aux1298' direct represents '0' with '5466'
c Var 'aux1298' order represents '1' with '5467'
-5466 5467 0
c Var 'aux1298' direct represents '1' with '5468'
5466 -5467 5468 0
-5468 5467 0
-5468 -5466 0
c Var 'aux1298' order represents '2' with '5469'
-5467 5469 0
c Var 'aux1298' direct represents '2' with '5470'
5467 -5469 5470 0
-5470 5469 0
-5470 -5467 0
c Var 'aux1298' direct represents '3' with '-5469'
5466 5468 5470 -5469 0
c Encoding variable: aux1299 with domain: int(0..4) (representing constraint (aux1294 + aux1296))
c Both direct and order encoding.
c Var 'aux1299' order represents '0' with '5471'
c Var 'aux1299' direct represents '0' with '5471'
c Var 'aux1299' order represents '1' with '5472'
-5471 5472 0
c Var 'aux1299' direct represents '1' with '5473'
5471 -5472 5473 0
-5473 5472 0
-5473 -5471 0
c Var 'aux1299' order represents '2' with '5474'
-5472 5474 0
c Var 'aux1299' direct represents '2' with '5475'
5472 -5474 5475 0
-5475 5474 0
-5475 -5472 0
c Var 'aux1299' order represents '3' with '5476'
-5474 5476 0
c Var 'aux1299' direct represents '3' with '5477'
5474 -5476 5477 0
-5477 5476 0
-5477 -5474 0
c Var 'aux1299' direct represents '4' with '-5476'
5471 5473 5475 5477 -5476 0
c Encoding variable: aux1300 with domain: int(0..2) (representing constraint ((x_00008_00001=1) + (x_00008_00009=1)))
c Both direct and order encoding.
c Var 'aux1300' order represents '0' with '5478'
c Var 'aux1300' direct represents '0' with '5478'
c Var 'aux1300' order represents '1' with '5479'
-5478 5479 0
c Var 'aux1300' direct represents '1' with '5480'
5478 -5479 5480 0
-5480 5479 0
-5480 -5478 0
c Var 'aux1300' direct represents '2' with '-5479'
5478 5480 -5479 0
c Encoding variable: aux1301 with domain: int(0..2) (representing constraint ((x_00008_00008=1) + (x_00008_00002=1)))
c Both direct and order encoding.
c Var 'aux1301' order represents '0' with '5481'
c Var 'aux1301' direct represents '0' with '5481'
c Var 'aux1301' order represents '1' with '5482'
-5481 5482 0
c Var 'aux1301' direct represents '1' with '5483'
5481 -5482 5483 0
-5483 5482 0
-5483 -5481 0
c Var 'aux1301' direct represents '2' with '-5482'
5481 5483 -5482 0
c Encoding variable: aux1302 with domain: int(0..2) (representing constraint ((x_00008_00007=1) + (x_00008_00004=1)))
c Both direct and order encoding.
c Var 'aux1302' order represents '0' with '5484'
c Var 'aux1302' direct represents '0' with '5484'
c Var 'aux1302' order represents '1' with '5485'
-5484 5485 0
c Var 'aux1302' direct represents '1' with '5486'
5484 -5485 5486 0
-5486 5485 0
-5486 -5484 0
c Var 'aux1302' direct represents '2' with '-5485'
5484 5486 -5485 0
c Encoding variable: aux1303 with domain: int(0..2) (representing constraint ((x_00008_00006=1) + (x_00008_00005=1)))
c Both direct and order encoding.
c Var 'aux1303' order represents '0' with '5487'
c Var 'aux1303' direct represents '0' with '5487'
c Var 'aux1303' order represents '1' with '5488'
-5487 5488 0
c Var 'aux1303' direct represents '1' with '5489'
5487 -5488 5489 0
-5489 5488 0
-5489 -5487 0
c Var 'aux1303' direct represents '2' with '-5488'
5487 5489 -5488 0
c Encoding variable: aux1304 with domain: int(0..3) (representing constraint ((x_00008_00003=1) + aux1303))
c Both direct and order encoding.
c Var 'aux1304' order represents '0' with '5490'
c Var 'aux1304' direct represents '0' with '5490'
c Var 'aux1304' order represents '1' with '5491'
-5490 5491 0
c Var 'aux1304' direct represents '1' with '5492'
5490 -5491 5492 0
-5492 5491 0
-5492 -5490 0
c Var 'aux1304' order represents '2' with '5493'
-5491 5493 0
c Var 'aux1304' direct represents '2' with '5494'
5491 -5493 5494 0
-5494 5493 0
-5494 -5491 0
c Var 'aux1304' direct represents '3' with '-5493'
5490 5492 5494 -5493 0
c Encoding variable: aux1305 with domain: int(0..4) (representing constraint (aux1300 + aux1302))
c Both direct and order encoding.
c Var 'aux1305' order represents '0' with '5495'
c Var 'aux1305' direct represents '0' with '5495'
c Var 'aux1305' order represents '1' with '5496'
-5495 5496 0
c Var 'aux1305' direct represents '1' with '5497'
5495 -5496 5497 0
-5497 5496 0
-5497 -5495 0
c Var 'aux1305' order represents '2' with '5498'
-5496 5498 0
c Var 'aux1305' direct represents '2' with '5499'
5496 -5498 5499 0
-5499 5498 0
-5499 -5496 0
c Var 'aux1305' order represents '3' with '5500'
-5498 5500 0
c Var 'aux1305' direct represents '3' with '5501'
5498 -5500 5501 0
-5501 5500 0
-5501 -5498 0
c Var 'aux1305' direct represents '4' with '-5500'
5495 5497 5499 5501 -5500 0
c Encoding variable: aux1306 with domain: int(0..2) (representing constraint ((x_00008_00001=2) + (x_00008_00009=2)))
c Both direct and order encoding.
c Var 'aux1306' order represents '0' with '5502'
c Var 'aux1306' direct represents '0' with '5502'
c Var 'aux1306' order represents '1' with '5503'
-5502 5503 0
c Var 'aux1306' direct represents '1' with '5504'
5502 -5503 5504 0
-5504 5503 0
-5504 -5502 0
c Var 'aux1306' direct represents '2' with '-5503'
5502 5504 -5503 0
c Encoding variable: aux1307 with domain: int(0..2) (representing constraint ((x_00008_00008=2) + (x_00008_00002=2)))
c Both direct and order encoding.
c Var 'aux1307' order represents '0' with '5505'
c Var 'aux1307' direct represents '0' with '5505'
c Var 'aux1307' order represents '1' with '5506'
-5505 5506 0
c Var 'aux1307' direct represents '1' with '5507'
5505 -5506 5507 0
-5507 5506 0
-5507 -5505 0
c Var 'aux1307' direct represents '2' with '-5506'
5505 5507 -5506 0
c Encoding variable: aux1308 with domain: int(0..2) (representing constraint ((x_00008_00007=2) + (x_00008_00004=2)))
c Both direct and order encoding.
c Var 'aux1308' order represents '0' with '5508'
c Var 'aux1308' direct represents '0' with '5508'
c Var 'aux1308' order represents '1' with '5509'
-5508 5509 0
c Var 'aux1308' direct represents '1' with '5510'
5508 -5509 5510 0
-5510 5509 0
-5510 -5508 0
c Var 'aux1308' direct represents '2' with '-5509'
5508 5510 -5509 0
c Encoding variable: aux1309 with domain: int(0..2) (representing constraint ((x_00008_00006=2) + (x_00008_00005=2)))
c Both direct and order encoding.
c Var 'aux1309' order represents '0' with '5511'
c Var 'aux1309' direct represents '0' with '5511'
c Var 'aux1309' order represents '1' with '5512'
-5511 5512 0
c Var 'aux1309' direct represents '1' with '5513'
5511 -5512 5513 0
-5513 5512 0
-5513 -5511 0
c Var 'aux1309' direct represents '2' with '-5512'
5511 5513 -5512 0
c Encoding variable: aux1310 with domain: int(0..3) (representing constraint ((x_00008_00003=2) + aux1309))
c Both direct and order encoding.
c Var 'aux1310' order represents '0' with '5514'
c Var 'aux1310' direct represents '0' with '5514'
c Var 'aux1310' order represents '1' with '5515'
-5514 5515 0
c Var 'aux1310' direct represents '1' with '5516'
5514 -5515 5516 0
-5516 5515 0
-5516 -5514 0
c Var 'aux1310' order represents '2' with '5517'
-5515 5517 0
c Var 'aux1310' direct represents '2' with '5518'
5515 -5517 5518 0
-5518 5517 0
-5518 -5515 0
c Var 'aux1310' direct represents '3' with '-5517'
5514 5516 5518 -5517 0
c Encoding variable: aux1311 with domain: int(0..4) (representing constraint (aux1306 + aux1308))
c Both direct and order encoding.
c Var 'aux1311' order represents '0' with '5519'
c Var 'aux1311' direct represents '0' with '5519'
c Var 'aux1311' order represents '1' with '5520'
-5519 5520 0
c Var 'aux1311' direct represents '1' with '5521'
5519 -5520 5521 0
-5521 5520 0
-5521 -5519 0
c Var 'aux1311' order represents '2' with '5522'
-5520 5522 0
c Var 'aux1311' direct represents '2' with '5523'
5520 -5522 5523 0
-5523 5522 0
-5523 -5520 0
c Var 'aux1311' order represents '3' with '5524'
-5522 5524 0
c Var 'aux1311' direct represents '3' with '5525'
5522 -5524 5525 0
-5525 5524 0
-5525 -5522 0
c Var 'aux1311' direct represents '4' with '-5524'
5519 5521 5523 5525 -5524 0
c Encoding variable: aux1312 with domain: int(0..2) (representing constraint ((x_00008_00001=3) + (x_00008_00009=3)))
c Both direct and order encoding.
c Var 'aux1312' order represents '0' with '5526'
c Var 'aux1312' direct represents '0' with '5526'
c Var 'aux1312' order represents '1' with '5527'
-5526 5527 0
c Var 'aux1312' direct represents '1' with '5528'
5526 -5527 5528 0
-5528 5527 0
-5528 -5526 0
c Var 'aux1312' direct represents '2' with '-5527'
5526 5528 -5527 0
c Encoding variable: aux1313 with domain: int(0..2) (representing constraint ((x_00008_00008=3) + (x_00008_00002=3)))
c Both direct and order encoding.
c Var 'aux1313' order represents '0' with '5529'
c Var 'aux1313' direct represents '0' with '5529'
c Var 'aux1313' order represents '1' with '5530'
-5529 5530 0
c Var 'aux1313' direct represents '1' with '5531'
5529 -5530 5531 0
-5531 5530 0
-5531 -5529 0
c Var 'aux1313' direct represents '2' with '-5530'
5529 5531 -5530 0
c Encoding variable: aux1314 with domain: int(0..2) (representing constraint ((x_00008_00007=3) + (x_00008_00004=3)))
c Both direct and order encoding.
c Var 'aux1314' order represents '0' with '5532'
c Var 'aux1314' direct represents '0' with '5532'
c Var 'aux1314' order represents '1' with '5533'
-5532 5533 0
c Var 'aux1314' direct represents '1' with '5534'
5532 -5533 5534 0
-5534 5533 0
-5534 -5532 0
c Var 'aux1314' direct represents '2' with '-5533'
5532 5534 -5533 0
c Encoding variable: aux1315 with domain: int(0..2) (representing constraint ((x_00008_00006=3) + (x_00008_00005=3)))
c Both direct and order encoding.
c Var 'aux1315' order represents '0' with '5535'
c Var 'aux1315' direct represents '0' with '5535'
c Var 'aux1315' order represents '1' with '5536'
-5535 5536 0
c Var 'aux1315' direct represents '1' with '5537'
5535 -5536 5537 0
-5537 5536 0
-5537 -5535 0
c Var 'aux1315' direct represents '2' with '-5536'
5535 5537 -5536 0
c Encoding variable: aux1316 with domain: int(0..3) (representing constraint ((x_00008_00003=3) + aux1315))
c Both direct and order encoding.
c Var 'aux1316' order represents '0' with '5538'
c Var 'aux1316' direct represents '0' with '5538'
c Var 'aux1316' order represents '1' with '5539'
-5538 5539 0
c Var 'aux1316' direct represents '1' with '5540'
5538 -5539 5540 0
-5540 5539 0
-5540 -5538 0
c Var 'aux1316' order represents '2' with '5541'
-5539 5541 0
c Var 'aux1316' direct represents '2' with '5542'
5539 -5541 5542 0
-5542 5541 0
-5542 -5539 0
c Var 'aux1316' direct represents '3' with '-5541'
5538 5540 5542 -5541 0
c Encoding variable: aux1317 with domain: int(0..4) (representing constraint (aux1312 + aux1314))
c Both direct and order encoding.
c Var 'aux1317' order represents '0' with '5543'
c Var 'aux1317' direct represents '0' with '5543'
c Var 'aux1317' order represents '1' with '5544'
-5543 5544 0
c Var 'aux1317' direct represents '1' with '5545'
5543 -5544 5545 0
-5545 5544 0
-5545 -5543 0
c Var 'aux1317' order represents '2' with '5546'
-5544 5546 0
c Var 'aux1317' direct represents '2' with '5547'
5544 -5546 5547 0
-5547 5546 0
-5547 -5544 0
c Var 'aux1317' order represents '3' with '5548'
-5546 5548 0
c Var 'aux1317' direct represents '3' with '5549'
5546 -5548 5549 0
-5549 5548 0
-5549 -5546 0
c Var 'aux1317' direct represents '4' with '-5548'
5543 5545 5547 5549 -5548 0
c Encoding variable: aux1318 with domain: int(0..2) (representing constraint ((x_00008_00001=4) + (x_00008_00009=4)))
c Both direct and order encoding.
c Var 'aux1318' order represents '0' with '5550'
c Var 'aux1318' direct represents '0' with '5550'
c Var 'aux1318' order represents '1' with '5551'
-5550 5551 0
c Var 'aux1318' direct represents '1' with '5552'
5550 -5551 5552 0
-5552 5551 0
-5552 -5550 0
c Var 'aux1318' direct represents '2' with '-5551'
5550 5552 -5551 0
c Encoding variable: aux1319 with domain: int(0..2) (representing constraint ((x_00008_00008=4) + (x_00008_00002=4)))
c Both direct and order encoding.
c Var 'aux1319' order represents '0' with '5553'
c Var 'aux1319' direct represents '0' with '5553'
c Var 'aux1319' order represents '1' with '5554'
-5553 5554 0
c Var 'aux1319' direct represents '1' with '5555'
5553 -5554 5555 0
-5555 5554 0
-5555 -5553 0
c Var 'aux1319' direct represents '2' with '-5554'
5553 5555 -5554 0
c Encoding variable: aux1320 with domain: int(0..2) (representing constraint ((x_00008_00007=4) + (x_00008_00004=4)))
c Both direct and order encoding.
c Var 'aux1320' order represents '0' with '5556'
c Var 'aux1320' direct represents '0' with '5556'
c Var 'aux1320' order represents '1' with '5557'
-5556 5557 0
c Var 'aux1320' direct represents '1' with '5558'
5556 -5557 5558 0
-5558 5557 0
-5558 -5556 0
c Var 'aux1320' direct represents '2' with '-5557'
5556 5558 -5557 0
c Encoding variable: aux1321 with domain: int(0..2) (representing constraint ((x_00008_00006=4) + (x_00008_00005=4)))
c Both direct and order encoding.
c Var 'aux1321' order represents '0' with '5559'
c Var 'aux1321' direct represents '0' with '5559'
c Var 'aux1321' order represents '1' with '5560'
-5559 5560 0
c Var 'aux1321' direct represents '1' with '5561'
5559 -5560 5561 0
-5561 5560 0
-5561 -5559 0
c Var 'aux1321' direct represents '2' with '-5560'
5559 5561 -5560 0
c Encoding variable: aux1322 with domain: int(0..3) (representing constraint ((x_00008_00003=4) + aux1321))
c Both direct and order encoding.
c Var 'aux1322' order represents '0' with '5562'
c Var 'aux1322' direct represents '0' with '5562'
c Var 'aux1322' order represents '1' with '5563'
-5562 5563 0
c Var 'aux1322' direct represents '1' with '5564'
5562 -5563 5564 0
-5564 5563 0
-5564 -5562 0
c Var 'aux1322' order represents '2' with '5565'
-5563 5565 0
c Var 'aux1322' direct represents '2' with '5566'
5563 -5565 5566 0
-5566 5565 0
-5566 -5563 0
c Var 'aux1322' direct represents '3' with '-5565'
5562 5564 5566 -5565 0
c Encoding variable: aux1323 with domain: int(0..4) (representing constraint (aux1318 + aux1320))
c Both direct and order encoding.
c Var 'aux1323' order represents '0' with '5567'
c Var 'aux1323' direct represents '0' with '5567'
c Var 'aux1323' order represents '1' with '5568'
-5567 5568 0
c Var 'aux1323' direct represents '1' with '5569'
5567 -5568 5569 0
-5569 5568 0
-5569 -5567 0
c Var 'aux1323' order represents '2' with '5570'
-5568 5570 0
c Var 'aux1323' direct represents '2' with '5571'
5568 -5570 5571 0
-5571 5570 0
-5571 -5568 0
c Var 'aux1323' order represents '3' with '5572'
-5570 5572 0
c Var 'aux1323' direct represents '3' with '5573'
5570 -5572 5573 0
-5573 5572 0
-5573 -5570 0
c Var 'aux1323' direct represents '4' with '-5572'
5567 5569 5571 5573 -5572 0
c Encoding variable: aux1324 with domain: int(0..2) (representing constraint ((x_00008_00001=5) + (x_00008_00009=5)))
c Both direct and order encoding.
c Var 'aux1324' order represents '0' with '5574'
c Var 'aux1324' direct represents '0' with '5574'
c Var 'aux1324' order represents '1' with '5575'
-5574 5575 0
c Var 'aux1324' direct represents '1' with '5576'
5574 -5575 5576 0
-5576 5575 0
-5576 -5574 0
c Var 'aux1324' direct represents '2' with '-5575'
5574 5576 -5575 0
c Encoding variable: aux1325 with domain: int(0..2) (representing constraint ((x_00008_00008=5) + (x_00008_00002=5)))
c Both direct and order encoding.
c Var 'aux1325' order represents '0' with '5577'
c Var 'aux1325' direct represents '0' with '5577'
c Var 'aux1325' order represents '1' with '5578'
-5577 5578 0
c Var 'aux1325' direct represents '1' with '5579'
5577 -5578 5579 0
-5579 5578 0
-5579 -5577 0
c Var 'aux1325' direct represents '2' with '-5578'
5577 5579 -5578 0
c Encoding variable: aux1326 with domain: int(0..2) (representing constraint ((x_00008_00007=5) + (x_00008_00004=5)))
c Both direct and order encoding.
c Var 'aux1326' order represents '0' with '5580'
c Var 'aux1326' direct represents '0' with '5580'
c Var 'aux1326' order represents '1' with '5581'
-5580 5581 0
c Var 'aux1326' direct represents '1' with '5582'
5580 -5581 5582 0
-5582 5581 0
-5582 -5580 0
c Var 'aux1326' direct represents '2' with '-5581'
5580 5582 -5581 0
c Encoding variable: aux1327 with domain: int(0..2) (representing constraint ((x_00008_00006=5) + (x_00008_00005=5)))
c Both direct and order encoding.
c Var 'aux1327' order represents '0' with '5583'
c Var 'aux1327' direct represents '0' with '5583'
c Var 'aux1327' order represents '1' with '5584'
-5583 5584 0
c Var 'aux1327' direct represents '1' with '5585'
5583 -5584 5585 0
-5585 5584 0
-5585 -5583 0
c Var 'aux1327' direct represents '2' with '-5584'
5583 5585 -5584 0
c Encoding variable: aux1328 with domain: int(0..3) (representing constraint ((x_00008_00003=5) + aux1327))
c Both direct and order encoding.
c Var 'aux1328' order represents '0' with '5586'
c Var 'aux1328' direct represents '0' with '5586'
c Var 'aux1328' order represents '1' with '5587'
-5586 5587 0
c Var 'aux1328' direct represents '1' with '5588'
5586 -5587 5588 0
-5588 5587 0
-5588 -5586 0
c Var 'aux1328' order represents '2' with '5589'
-5587 5589 0
c Var 'aux1328' direct represents '2' with '5590'
5587 -5589 5590 0
-5590 5589 0
-5590 -5587 0
c Var 'aux1328' direct represents '3' with '-5589'
5586 5588 5590 -5589 0
c Encoding variable: aux1329 with domain: int(0..4) (representing constraint (aux1324 + aux1326))
c Both direct and order encoding.
c Var 'aux1329' order represents '0' with '5591'
c Var 'aux1329' direct represents '0' with '5591'
c Var 'aux1329' order represents '1' with '5592'
-5591 5592 0
c Var 'aux1329' direct represents '1' with '5593'
5591 -5592 5593 0
-5593 5592 0
-5593 -5591 0
c Var 'aux1329' order represents '2' with '5594'
-5592 5594 0
c Var 'aux1329' direct represents '2' with '5595'
5592 -5594 5595 0
-5595 5594 0
-5595 -5592 0
c Var 'aux1329' order represents '3' with '5596'
-5594 5596 0
c Var 'aux1329' direct represents '3' with '5597'
5594 -5596 5597 0
-5597 5596 0
-5597 -5594 0
c Var 'aux1329' direct represents '4' with '-5596'
5591 5593 5595 5597 -5596 0
c Encoding variable: aux1330 with domain: int(0..2) (representing constraint ((x_00008_00001=6) + (x_00008_00009=6)))
c Both direct and order encoding.
c Var 'aux1330' order represents '0' with '5598'
c Var 'aux1330' direct represents '0' with '5598'
c Var 'aux1330' order represents '1' with '5599'
-5598 5599 0
c Var 'aux1330' direct represents '1' with '5600'
5598 -5599 5600 0
-5600 5599 0
-5600 -5598 0
c Var 'aux1330' direct represents '2' with '-5599'
5598 5600 -5599 0
c Encoding variable: aux1331 with domain: int(0..2) (representing constraint ((x_00008_00008=6) + (x_00008_00002=6)))
c Both direct and order encoding.
c Var 'aux1331' order represents '0' with '5601'
c Var 'aux1331' direct represents '0' with '5601'
c Var 'aux1331' order represents '1' with '5602'
-5601 5602 0
c Var 'aux1331' direct represents '1' with '5603'
5601 -5602 5603 0
-5603 5602 0
-5603 -5601 0
c Var 'aux1331' direct represents '2' with '-5602'
5601 5603 -5602 0
c Encoding variable: aux1332 with domain: int(0..2) (representing constraint ((x_00008_00007=6) + (x_00008_00004=6)))
c Both direct and order encoding.
c Var 'aux1332' order represents '0' with '5604'
c Var 'aux1332' direct represents '0' with '5604'
c Var 'aux1332' order represents '1' with '5605'
-5604 5605 0
c Var 'aux1332' direct represents '1' with '5606'
5604 -5605 5606 0
-5606 5605 0
-5606 -5604 0
c Var 'aux1332' direct represents '2' with '-5605'
5604 5606 -5605 0
c Encoding variable: aux1333 with domain: int(0..2) (representing constraint ((x_00008_00006=6) + (x_00008_00005=6)))
c Both direct and order encoding.
c Var 'aux1333' order represents '0' with '5607'
c Var 'aux1333' direct represents '0' with '5607'
c Var 'aux1333' order represents '1' with '5608'
-5607 5608 0
c Var 'aux1333' direct represents '1' with '5609'
5607 -5608 5609 0
-5609 5608 0
-5609 -5607 0
c Var 'aux1333' direct represents '2' with '-5608'
5607 5609 -5608 0
c Encoding variable: aux1334 with domain: int(0..3) (representing constraint ((x_00008_00003=6) + aux1333))
c Both direct and order encoding.
c Var 'aux1334' order represents '0' with '5610'
c Var 'aux1334' direct represents '0' with '5610'
c Var 'aux1334' order represents '1' with '5611'
-5610 5611 0
c Var 'aux1334' direct represents '1' with '5612'
5610 -5611 5612 0
-5612 5611 0
-5612 -5610 0
c Var 'aux1334' order represents '2' with '5613'
-5611 5613 0
c Var 'aux1334' direct represents '2' with '5614'
5611 -5613 5614 0
-5614 5613 0
-5614 -5611 0
c Var 'aux1334' direct represents '3' with '-5613'
5610 5612 5614 -5613 0
c Encoding variable: aux1335 with domain: int(0..4) (representing constraint (aux1330 + aux1332))
c Both direct and order encoding.
c Var 'aux1335' order represents '0' with '5615'
c Var 'aux1335' direct represents '0' with '5615'
c Var 'aux1335' order represents '1' with '5616'
-5615 5616 0
c Var 'aux1335' direct represents '1' with '5617'
5615 -5616 5617 0
-5617 5616 0
-5617 -5615 0
c Var 'aux1335' order represents '2' with '5618'
-5616 5618 0
c Var 'aux1335' direct represents '2' with '5619'
5616 -5618 5619 0
-5619 5618 0
-5619 -5616 0
c Var 'aux1335' order represents '3' with '5620'
-5618 5620 0
c Var 'aux1335' direct represents '3' with '5621'
5618 -5620 5621 0
-5621 5620 0
-5621 -5618 0
c Var 'aux1335' direct represents '4' with '-5620'
5615 5617 5619 5621 -5620 0
c Encoding variable: aux1336 with domain: int(0..2) (representing constraint ((x_00008_00001=7) + (x_00008_00009=7)))
c Both direct and order encoding.
c Var 'aux1336' order represents '0' with '5622'
c Var 'aux1336' direct represents '0' with '5622'
c Var 'aux1336' order represents '1' with '5623'
-5622 5623 0
c Var 'aux1336' direct represents '1' with '5624'
5622 -5623 5624 0
-5624 5623 0
-5624 -5622 0
c Var 'aux1336' direct represents '2' with '-5623'
5622 5624 -5623 0
c Encoding variable: aux1337 with domain: int(0..2) (representing constraint ((x_00008_00008=7) + (x_00008_00002=7)))
c Both direct and order encoding.
c Var 'aux1337' order represents '0' with '5625'
c Var 'aux1337' direct represents '0' with '5625'
c Var 'aux1337' order represents '1' with '5626'
-5625 5626 0
c Var 'aux1337' direct represents '1' with '5627'
5625 -5626 5627 0
-5627 5626 0
-5627 -5625 0
c Var 'aux1337' direct represents '2' with '-5626'
5625 5627 -5626 0
c Encoding variable: aux1338 with domain: int(0..2) (representing constraint ((x_00008_00007=7) + (x_00008_00004=7)))
c Both direct and order encoding.
c Var 'aux1338' order represents '0' with '5628'
c Var 'aux1338' direct represents '0' with '5628'
c Var 'aux1338' order represents '1' with '5629'
-5628 5629 0
c Var 'aux1338' direct represents '1' with '5630'
5628 -5629 5630 0
-5630 5629 0
-5630 -5628 0
c Var 'aux1338' direct represents '2' with '-5629'
5628 5630 -5629 0
c Encoding variable: aux1339 with domain: int(0..2) (representing constraint ((x_00008_00006=7) + (x_00008_00005=7)))
c Both direct and order encoding.
c Var 'aux1339' order represents '0' with '5631'
c Var 'aux1339' direct represents '0' with '5631'
c Var 'aux1339' order represents '1' with '5632'
-5631 5632 0
c Var 'aux1339' direct represents '1' with '5633'
5631 -5632 5633 0
-5633 5632 0
-5633 -5631 0
c Var 'aux1339' direct represents '2' with '-5632'
5631 5633 -5632 0
c Encoding variable: aux1340 with domain: int(0..3) (representing constraint ((x_00008_00003=7) + aux1339))
c Both direct and order encoding.
c Var 'aux1340' order represents '0' with '5634'
c Var 'aux1340' direct represents '0' with '5634'
c Var 'aux1340' order represents '1' with '5635'
-5634 5635 0
c Var 'aux1340' direct represents '1' with '5636'
5634 -5635 5636 0
-5636 5635 0
-5636 -5634 0
c Var 'aux1340' order represents '2' with '5637'
-5635 5637 0
c Var 'aux1340' direct represents '2' with '5638'
5635 -5637 5638 0
-5638 5637 0
-5638 -5635 0
c Var 'aux1340' direct represents '3' with '-5637'
5634 5636 5638 -5637 0
c Encoding variable: aux1341 with domain: int(0..4) (representing constraint (aux1336 + aux1338))
c Both direct and order encoding.
c Var 'aux1341' order represents '0' with '5639'
c Var 'aux1341' direct represents '0' with '5639'
c Var 'aux1341' order represents '1' with '5640'
-5639 5640 0
c Var 'aux1341' direct represents '1' with '5641'
5639 -5640 5641 0
-5641 5640 0
-5641 -5639 0
c Var 'aux1341' order represents '2' with '5642'
-5640 5642 0
c Var 'aux1341' direct represents '2' with '5643'
5640 -5642 5643 0
-5643 5642 0
-5643 -5640 0
c Var 'aux1341' order represents '3' with '5644'
-5642 5644 0
c Var 'aux1341' direct represents '3' with '5645'
5642 -5644 5645 0
-5645 5644 0
-5645 -5642 0
c Var 'aux1341' direct represents '4' with '-5644'
5639 5641 5643 5645 -5644 0
c Encoding variable: aux1342 with domain: int(0..2) (representing constraint ((x_00008_00001=8) + (x_00008_00009=8)))
c Both direct and order encoding.
c Var 'aux1342' order represents '0' with '5646'
c Var 'aux1342' direct represents '0' with '5646'
c Var 'aux1342' order represents '1' with '5647'
-5646 5647 0
c Var 'aux1342' direct represents '1' with '5648'
5646 -5647 5648 0
-5648 5647 0
-5648 -5646 0
c Var 'aux1342' direct represents '2' with '-5647'
5646 5648 -5647 0
c Encoding variable: aux1343 with domain: int(0..2) (representing constraint ((x_00008_00008=8) + (x_00008_00002=8)))
c Both direct and order encoding.
c Var 'aux1343' order represents '0' with '5649'
c Var 'aux1343' direct represents '0' with '5649'
c Var 'aux1343' order represents '1' with '5650'
-5649 5650 0
c Var 'aux1343' direct represents '1' with '5651'
5649 -5650 5651 0
-5651 5650 0
-5651 -5649 0
c Var 'aux1343' direct represents '2' with '-5650'
5649 5651 -5650 0
c Encoding variable: aux1344 with domain: int(0..2) (representing constraint ((x_00008_00007=8) + (x_00008_00004=8)))
c Both direct and order encoding.
c Var 'aux1344' order represents '0' with '5652'
c Var 'aux1344' direct represents '0' with '5652'
c Var 'aux1344' order represents '1' with '5653'
-5652 5653 0
c Var 'aux1344' direct represents '1' with '5654'
5652 -5653 5654 0
-5654 5653 0
-5654 -5652 0
c Var 'aux1344' direct represents '2' with '-5653'
5652 5654 -5653 0
c Encoding variable: aux1345 with domain: int(0..2) (representing constraint ((x_00008_00006=8) + (x_00008_00005=8)))
c Both direct and order encoding.
c Var 'aux1345' order represents '0' with '5655'
c Var 'aux1345' direct represents '0' with '5655'
c Var 'aux1345' order represents '1' with '5656'
-5655 5656 0
c Var 'aux1345' direct represents '1' with '5657'
5655 -5656 5657 0
-5657 5656 0
-5657 -5655 0
c Var 'aux1345' direct represents '2' with '-5656'
5655 5657 -5656 0
c Encoding variable: aux1346 with domain: int(0..3) (representing constraint ((x_00008_00003=8) + aux1345))
c Both direct and order encoding.
c Var 'aux1346' order represents '0' with '5658'
c Var 'aux1346' direct represents '0' with '5658'
c Var 'aux1346' order represents '1' with '5659'
-5658 5659 0
c Var 'aux1346' direct represents '1' with '5660'
5658 -5659 5660 0
-5660 5659 0
-5660 -5658 0
c Var 'aux1346' order represents '2' with '5661'
-5659 5661 0
c Var 'aux1346' direct represents '2' with '5662'
5659 -5661 5662 0
-5662 5661 0
-5662 -5659 0
c Var 'aux1346' direct represents '3' with '-5661'
5658 5660 5662 -5661 0
c Encoding variable: aux1347 with domain: int(0..4) (representing constraint (aux1342 + aux1344))
c Both direct and order encoding.
c Var 'aux1347' order represents '0' with '5663'
c Var 'aux1347' direct represents '0' with '5663'
c Var 'aux1347' order represents '1' with '5664'
-5663 5664 0
c Var 'aux1347' direct represents '1' with '5665'
5663 -5664 5665 0
-5665 5664 0
-5665 -5663 0
c Var 'aux1347' order represents '2' with '5666'
-5664 5666 0
c Var 'aux1347' direct represents '2' with '5667'
5664 -5666 5667 0
-5667 5666 0
-5667 -5664 0
c Var 'aux1347' order represents '3' with '5668'
-5666 5668 0
c Var 'aux1347' direct represents '3' with '5669'
5666 -5668 5669 0
-5669 5668 0
-5669 -5666 0
c Var 'aux1347' direct represents '4' with '-5668'
5663 5665 5667 5669 -5668 0
c Encoding variable: aux1348 with domain: int(0..2) (representing constraint ((x_00008_00001=9) + (x_00008_00009=9)))
c Both direct and order encoding.
c Var 'aux1348' order represents '0' with '5670'
c Var 'aux1348' direct represents '0' with '5670'
c Var 'aux1348' order represents '1' with '5671'
-5670 5671 0
c Var 'aux1348' direct represents '1' with '5672'
5670 -5671 5672 0
-5672 5671 0
-5672 -5670 0
c Var 'aux1348' direct represents '2' with '-5671'
5670 5672 -5671 0
c Encoding variable: aux1349 with domain: int(0..2) (representing constraint ((x_00008_00008=9) + (x_00008_00002=9)))
c Both direct and order encoding.
c Var 'aux1349' order represents '0' with '5673'
c Var 'aux1349' direct represents '0' with '5673'
c Var 'aux1349' order represents '1' with '5674'
-5673 5674 0
c Var 'aux1349' direct represents '1' with '5675'
5673 -5674 5675 0
-5675 5674 0
-5675 -5673 0
c Var 'aux1349' direct represents '2' with '-5674'
5673 5675 -5674 0
c Encoding variable: aux1350 with domain: int(0..2) (representing constraint ((x_00008_00007=9) + (x_00008_00004=9)))
c Both direct and order encoding.
c Var 'aux1350' order represents '0' with '5676'
c Var 'aux1350' direct represents '0' with '5676'
c Var 'aux1350' order represents '1' with '5677'
-5676 5677 0
c Var 'aux1350' direct represents '1' with '5678'
5676 -5677 5678 0
-5678 5677 0
-5678 -5676 0
c Var 'aux1350' direct represents '2' with '-5677'
5676 5678 -5677 0
c Encoding variable: aux1351 with domain: int(0..2) (representing constraint ((x_00008_00006=9) + (x_00008_00005=9)))
c Both direct and order encoding.
c Var 'aux1351' order represents '0' with '5679'
c Var 'aux1351' direct represents '0' with '5679'
c Var 'aux1351' order represents '1' with '5680'
-5679 5680 0
c Var 'aux1351' direct represents '1' with '5681'
5679 -5680 5681 0
-5681 5680 0
-5681 -5679 0
c Var 'aux1351' direct represents '2' with '-5680'
5679 5681 -5680 0
c Encoding variable: aux1352 with domain: int(0..3) (representing constraint ((x_00008_00003=9) + aux1351))
c Both direct and order encoding.
c Var 'aux1352' order represents '0' with '5682'
c Var 'aux1352' direct represents '0' with '5682'
c Var 'aux1352' order represents '1' with '5683'
-5682 5683 0
c Var 'aux1352' direct represents '1' with '5684'
5682 -5683 5684 0
-5684 5683 0
-5684 -5682 0
c Var 'aux1352' order represents '2' with '5685'
-5683 5685 0
c Var 'aux1352' direct represents '2' with '5686'
5683 -5685 5686 0
-5686 5685 0
-5686 -5683 0
c Var 'aux1352' direct represents '3' with '-5685'
5682 5684 5686 -5685 0
c Encoding variable: aux1353 with domain: int(0..4) (representing constraint (aux1348 + aux1350))
c Both direct and order encoding.
c Var 'aux1353' order represents '0' with '5687'
c Var 'aux1353' direct represents '0' with '5687'
c Var 'aux1353' order represents '1' with '5688'
-5687 5688 0
c Var 'aux1353' direct represents '1' with '5689'
5687 -5688 5689 0
-5689 5688 0
-5689 -5687 0
c Var 'aux1353' order represents '2' with '5690'
-5688 5690 0
c Var 'aux1353' direct represents '2' with '5691'
5688 -5690 5691 0
-5691 5690 0
-5691 -5688 0
c Var 'aux1353' order represents '3' with '5692'
-5690 5692 0
c Var 'aux1353' direct represents '3' with '5693'
5690 -5692 5693 0
-5693 5692 0
-5693 -5690 0
c Var 'aux1353' direct represents '4' with '-5692'
5687 5689 5691 5693 -5692 0
c Encoding variable: aux1354 with domain: int(0..2) (representing constraint ((x_00009_00001=1) + (x_00009_00009=1)))
c Both direct and order encoding.
c Var 'aux1354' order represents '0' with '5694'
c Var 'aux1354' direct represents '0' with '5694'
c Var 'aux1354' order represents '1' with '5695'
-5694 5695 0
c Var 'aux1354' direct represents '1' with '5696'
5694 -5695 5696 0
-5696 5695 0
-5696 -5694 0
c Var 'aux1354' direct represents '2' with '-5695'
5694 5696 -5695 0
c Encoding variable: aux1355 with domain: int(0..2) (representing constraint ((x_00009_00008=1) + (x_00009_00002=1)))
c Both direct and order encoding.
c Var 'aux1355' order represents '0' with '5697'
c Var 'aux1355' direct represents '0' with '5697'
c Var 'aux1355' order represents '1' with '5698'
-5697 5698 0
c Var 'aux1355' direct represents '1' with '5699'
5697 -5698 5699 0
-5699 5698 0
-5699 -5697 0
c Var 'aux1355' direct represents '2' with '-5698'
5697 5699 -5698 0
c Encoding variable: aux1356 with domain: int(0..2) (representing constraint ((x_00009_00007=1) + (x_00009_00004=1)))
c Both direct and order encoding.
c Var 'aux1356' order represents '0' with '5700'
c Var 'aux1356' direct represents '0' with '5700'
c Var 'aux1356' order represents '1' with '5701'
-5700 5701 0
c Var 'aux1356' direct represents '1' with '5702'
5700 -5701 5702 0
-5702 5701 0
-5702 -5700 0
c Var 'aux1356' direct represents '2' with '-5701'
5700 5702 -5701 0
c Encoding variable: aux1357 with domain: int(0..2) (representing constraint ((x_00009_00006=1) + (x_00009_00005=1)))
c Both direct and order encoding.
c Var 'aux1357' order represents '0' with '5703'
c Var 'aux1357' direct represents '0' with '5703'
c Var 'aux1357' order represents '1' with '5704'
-5703 5704 0
c Var 'aux1357' direct represents '1' with '5705'
5703 -5704 5705 0
-5705 5704 0
-5705 -5703 0
c Var 'aux1357' direct represents '2' with '-5704'
5703 5705 -5704 0
c Encoding variable: aux1358 with domain: int(0..3) (representing constraint ((x_00009_00003=1) + aux1357))
c Both direct and order encoding.
c Var 'aux1358' order represents '0' with '5706'
c Var 'aux1358' direct represents '0' with '5706'
c Var 'aux1358' order represents '1' with '5707'
-5706 5707 0
c Var 'aux1358' direct represents '1' with '5708'
5706 -5707 5708 0
-5708 5707 0
-5708 -5706 0
c Var 'aux1358' order represents '2' with '5709'
-5707 5709 0
c Var 'aux1358' direct represents '2' with '5710'
5707 -5709 5710 0
-5710 5709 0
-5710 -5707 0
c Var 'aux1358' direct represents '3' with '-5709'
5706 5708 5710 -5709 0
c Encoding variable: aux1359 with domain: int(0..4) (representing constraint (aux1354 + aux1356))
c Both direct and order encoding.
c Var 'aux1359' order represents '0' with '5711'
c Var 'aux1359' direct represents '0' with '5711'
c Var 'aux1359' order represents '1' with '5712'
-5711 5712 0
c Var 'aux1359' direct represents '1' with '5713'
5711 -5712 5713 0
-5713 5712 0
-5713 -5711 0
c Var 'aux1359' order represents '2' with '5714'
-5712 5714 0
c Var 'aux1359' direct represents '2' with '5715'
5712 -5714 5715 0
-5715 5714 0
-5715 -5712 0
c Var 'aux1359' order represents '3' with '5716'
-5714 5716 0
c Var 'aux1359' direct represents '3' with '5717'
5714 -5716 5717 0
-5717 5716 0
-5717 -5714 0
c Var 'aux1359' direct represents '4' with '-5716'
5711 5713 5715 5717 -5716 0
c Encoding variable: aux1360 with domain: int(0..2) (representing constraint ((x_00009_00001=2) + (x_00009_00009=2)))
c Both direct and order encoding.
c Var 'aux1360' order represents '0' with '5718'
c Var 'aux1360' direct represents '0' with '5718'
c Var 'aux1360' order represents '1' with '5719'
-5718 5719 0
c Var 'aux1360' direct represents '1' with '5720'
5718 -5719 5720 0
-5720 5719 0
-5720 -5718 0
c Var 'aux1360' direct represents '2' with '-5719'
5718 5720 -5719 0
c Encoding variable: aux1361 with domain: int(0..2) (representing constraint ((x_00009_00008=2) + (x_00009_00002=2)))
c Both direct and order encoding.
c Var 'aux1361' order represents '0' with '5721'
c Var 'aux1361' direct represents '0' with '5721'
c Var 'aux1361' order represents '1' with '5722'
-5721 5722 0
c Var 'aux1361' direct represents '1' with '5723'
5721 -5722 5723 0
-5723 5722 0
-5723 -5721 0
c Var 'aux1361' direct represents '2' with '-5722'
5721 5723 -5722 0
c Encoding variable: aux1362 with domain: int(0..2) (representing constraint ((x_00009_00007=2) + (x_00009_00004=2)))
c Both direct and order encoding.
c Var 'aux1362' order represents '0' with '5724'
c Var 'aux1362' direct represents '0' with '5724'
c Var 'aux1362' order represents '1' with '5725'
-5724 5725 0
c Var 'aux1362' direct represents '1' with '5726'
5724 -5725 5726 0
-5726 5725 0
-5726 -5724 0
c Var 'aux1362' direct represents '2' with '-5725'
5724 5726 -5725 0
c Encoding variable: aux1363 with domain: int(0..2) (representing constraint ((x_00009_00006=2) + (x_00009_00005=2)))
c Both direct and order encoding.
c Var 'aux1363' order represents '0' with '5727'
c Var 'aux1363' direct represents '0' with '5727'
c Var 'aux1363' order represents '1' with '5728'
-5727 5728 0
c Var 'aux1363' direct represents '1' with '5729'
5727 -5728 5729 0
-5729 5728 0
-5729 -5727 0
c Var 'aux1363' direct represents '2' with '-5728'
5727 5729 -5728 0
c Encoding variable: aux1364 with domain: int(0..3) (representing constraint ((x_00009_00003=2) + aux1363))
c Both direct and order encoding.
c Var 'aux1364' order represents '0' with '5730'
c Var 'aux1364' direct represents '0' with '5730'
c Var 'aux1364' order represents '1' with '5731'
-5730 5731 0
c Var 'aux1364' direct represents '1' with '5732'
5730 -5731 5732 0
-5732 5731 0
-5732 -5730 0
c Var 'aux1364' order represents '2' with '5733'
-5731 5733 0
c Var 'aux1364' direct represents '2' with '5734'
5731 -5733 5734 0
-5734 5733 0
-5734 -5731 0
c Var 'aux1364' direct represents '3' with '-5733'
5730 5732 5734 -5733 0
c Encoding variable: aux1365 with domain: int(0..4) (representing constraint (aux1360 + aux1362))
c Both direct and order encoding.
c Var 'aux1365' order represents '0' with '5735'
c Var 'aux1365' direct represents '0' with '5735'
c Var 'aux1365' order represents '1' with '5736'
-5735 5736 0
c Var 'aux1365' direct represents '1' with '5737'
5735 -5736 5737 0
-5737 5736 0
-5737 -5735 0
c Var 'aux1365' order represents '2' with '5738'
-5736 5738 0
c Var 'aux1365' direct represents '2' with '5739'
5736 -5738 5739 0
-5739 5738 0
-5739 -5736 0
c Var 'aux1365' order represents '3' with '5740'
-5738 5740 0
c Var 'aux1365' direct represents '3' with '5741'
5738 -5740 5741 0
-5741 5740 0
-5741 -5738 0
c Var 'aux1365' direct represents '4' with '-5740'
5735 5737 5739 5741 -5740 0
c Encoding variable: aux1366 with domain: int(0..2) (representing constraint ((x_00009_00001=3) + (x_00009_00009=3)))
c Both direct and order encoding.
c Var 'aux1366' order represents '0' with '5742'
c Var 'aux1366' direct represents '0' with '5742'
c Var 'aux1366' order represents '1' with '5743'
-5742 5743 0
c Var 'aux1366' direct represents '1' with '5744'
5742 -5743 5744 0
-5744 5743 0
-5744 -5742 0
c Var 'aux1366' direct represents '2' with '-5743'
5742 5744 -5743 0
c Encoding variable: aux1367 with domain: int(0..2) (representing constraint ((x_00009_00008=3) + (x_00009_00002=3)))
c Both direct and order encoding.
c Var 'aux1367' order represents '0' with '5745'
c Var 'aux1367' direct represents '0' with '5745'
c Var 'aux1367' order represents '1' with '5746'
-5745 5746 0
c Var 'aux1367' direct represents '1' with '5747'
5745 -5746 5747 0
-5747 5746 0
-5747 -5745 0
c Var 'aux1367' direct represents '2' with '-5746'
5745 5747 -5746 0
c Encoding variable: aux1368 with domain: int(0..2) (representing constraint ((x_00009_00007=3) + (x_00009_00004=3)))
c Both direct and order encoding.
c Var 'aux1368' order represents '0' with '5748'
c Var 'aux1368' direct represents '0' with '5748'
c Var 'aux1368' order represents '1' with '5749'
-5748 5749 0
c Var 'aux1368' direct represents '1' with '5750'
5748 -5749 5750 0
-5750 5749 0
-5750 -5748 0
c Var 'aux1368' direct represents '2' with '-5749'
5748 5750 -5749 0
c Encoding variable: aux1369 with domain: int(0..2) (representing constraint ((x_00009_00006=3) + (x_00009_00005=3)))
c Both direct and order encoding.
c Var 'aux1369' order represents '0' with '5751'
c Var 'aux1369' direct represents '0' with '5751'
c Var 'aux1369' order represents '1' with '5752'
-5751 5752 0
c Var 'aux1369' direct represents '1' with '5753'
5751 -5752 5753 0
-5753 5752 0
-5753 -5751 0
c Var 'aux1369' direct represents '2' with '-5752'
5751 5753 -5752 0
c Encoding variable: aux1370 with domain: int(0..3) (representing constraint ((x_00009_00003=3) + aux1369))
c Both direct and order encoding.
c Var 'aux1370' order represents '0' with '5754'
c Var 'aux1370' direct represents '0' with '5754'
c Var 'aux1370' order represents '1' with '5755'
-5754 5755 0
c Var 'aux1370' direct represents '1' with '5756'
5754 -5755 5756 0
-5756 5755 0
-5756 -5754 0
c Var 'aux1370' order represents '2' with '5757'
-5755 5757 0
c Var 'aux1370' direct represents '2' with '5758'
5755 -5757 5758 0
-5758 5757 0
-5758 -5755 0
c Var 'aux1370' direct represents '3' with '-5757'
5754 5756 5758 -5757 0
c Encoding variable: aux1371 with domain: int(0..4) (representing constraint (aux1366 + aux1368))
c Both direct and order encoding.
c Var 'aux1371' order represents '0' with '5759'
c Var 'aux1371' direct represents '0' with '5759'
c Var 'aux1371' order represents '1' with '5760'
-5759 5760 0
c Var 'aux1371' direct represents '1' with '5761'
5759 -5760 5761 0
-5761 5760 0
-5761 -5759 0
c Var 'aux1371' order represents '2' with '5762'
-5760 5762 0
c Var 'aux1371' direct represents '2' with '5763'
5760 -5762 5763 0
-5763 5762 0
-5763 -5760 0
c Var 'aux1371' order represents '3' with '5764'
-5762 5764 0
c Var 'aux1371' direct represents '3' with '5765'
5762 -5764 5765 0
-5765 5764 0
-5765 -5762 0
c Var 'aux1371' direct represents '4' with '-5764'
5759 5761 5763 5765 -5764 0
c Encoding variable: aux1372 with domain: int(0..2) (representing constraint ((x_00009_00001=4) + (x_00009_00009=4)))
c Both direct and order encoding.
c Var 'aux1372' order represents '0' with '5766'
c Var 'aux1372' direct represents '0' with '5766'
c Var 'aux1372' order represents '1' with '5767'
-5766 5767 0
c Var 'aux1372' direct represents '1' with '5768'
5766 -5767 5768 0
-5768 5767 0
-5768 -5766 0
c Var 'aux1372' direct represents '2' with '-5767'
5766 5768 -5767 0
c Encoding variable: aux1373 with domain: int(0..2) (representing constraint ((x_00009_00008=4) + (x_00009_00002=4)))
c Both direct and order encoding.
c Var 'aux1373' order represents '0' with '5769'
c Var 'aux1373' direct represents '0' with '5769'
c Var 'aux1373' order represents '1' with '5770'
-5769 5770 0
c Var 'aux1373' direct represents '1' with '5771'
5769 -5770 5771 0
-5771 5770 0
-5771 -5769 0
c Var 'aux1373' direct represents '2' with '-5770'
5769 5771 -5770 0
c Encoding variable: aux1374 with domain: int(0..2) (representing constraint ((x_00009_00007=4) + (x_00009_00004=4)))
c Both direct and order encoding.
c Var 'aux1374' order represents '0' with '5772'
c Var 'aux1374' direct represents '0' with '5772'
c Var 'aux1374' order represents '1' with '5773'
-5772 5773 0
c Var 'aux1374' direct represents '1' with '5774'
5772 -5773 5774 0
-5774 5773 0
-5774 -5772 0
c Var 'aux1374' direct represents '2' with '-5773'
5772 5774 -5773 0
c Encoding variable: aux1375 with domain: int(0..2) (representing constraint ((x_00009_00006=4) + (x_00009_00005=4)))
c Both direct and order encoding.
c Var 'aux1375' order represents '0' with '5775'
c Var 'aux1375' direct represents '0' with '5775'
c Var 'aux1375' order represents '1' with '5776'
-5775 5776 0
c Var 'aux1375' direct represents '1' with '5777'
5775 -5776 5777 0
-5777 5776 0
-5777 -5775 0
c Var 'aux1375' direct represents '2' with '-5776'
5775 5777 -5776 0
c Encoding variable: aux1376 with domain: int(0..3) (representing constraint ((x_00009_00003=4) + aux1375))
c Both direct and order encoding.
c Var 'aux1376' order represents '0' with '5778'
c Var 'aux1376' direct represents '0' with '5778'
c Var 'aux1376' order represents '1' with '5779'
-5778 5779 0
c Var 'aux1376' direct represents '1' with '5780'
5778 -5779 5780 0
-5780 5779 0
-5780 -5778 0
c Var 'aux1376' order represents '2' with '5781'
-5779 5781 0
c Var 'aux1376' direct represents '2' with '5782'
5779 -5781 5782 0
-5782 5781 0
-5782 -5779 0
c Var 'aux1376' direct represents '3' with '-5781'
5778 5780 5782 -5781 0
c Encoding variable: aux1377 with domain: int(0..4) (representing constraint (aux1372 + aux1374))
c Both direct and order encoding.
c Var 'aux1377' order represents '0' with '5783'
c Var 'aux1377' direct represents '0' with '5783'
c Var 'aux1377' order represents '1' with '5784'
-5783 5784 0
c Var 'aux1377' direct represents '1' with '5785'
5783 -5784 5785 0
-5785 5784 0
-5785 -5783 0
c Var 'aux1377' order represents '2' with '5786'
-5784 5786 0
c Var 'aux1377' direct represents '2' with '5787'
5784 -5786 5787 0
-5787 5786 0
-5787 -5784 0
c Var 'aux1377' order represents '3' with '5788'
-5786 5788 0
c Var 'aux1377' direct represents '3' with '5789'
5786 -5788 5789 0
-5789 5788 0
-5789 -5786 0
c Var 'aux1377' direct represents '4' with '-5788'
5783 5785 5787 5789 -5788 0
c Encoding variable: aux1378 with domain: int(0..2) (representing constraint ((x_00009_00001=5) + (x_00009_00009=5)))
c Both direct and order encoding.
c Var 'aux1378' order represents '0' with '5790'
c Var 'aux1378' direct represents '0' with '5790'
c Var 'aux1378' order represents '1' with '5791'
-5790 5791 0
c Var 'aux1378' direct represents '1' with '5792'
5790 -5791 5792 0
-5792 5791 0
-5792 -5790 0
c Var 'aux1378' direct represents '2' with '-5791'
5790 5792 -5791 0
c Encoding variable: aux1379 with domain: int(0..2) (representing constraint ((x_00009_00008=5) + (x_00009_00002=5)))
c Both direct and order encoding.
c Var 'aux1379' order represents '0' with '5793'
c Var 'aux1379' direct represents '0' with '5793'
c Var 'aux1379' order represents '1' with '5794'
-5793 5794 0
c Var 'aux1379' direct represents '1' with '5795'
5793 -5794 5795 0
-5795 5794 0
-5795 -5793 0
c Var 'aux1379' direct represents '2' with '-5794'
5793 5795 -5794 0
c Encoding variable: aux1380 with domain: int(0..2) (representing constraint ((x_00009_00007=5) + (x_00009_00004=5)))
c Both direct and order encoding.
c Var 'aux1380' order represents '0' with '5796'
c Var 'aux1380' direct represents '0' with '5796'
c Var 'aux1380' order represents '1' with '5797'
-5796 5797 0
c Var 'aux1380' direct represents '1' with '5798'
5796 -5797 5798 0
-5798 5797 0
-5798 -5796 0
c Var 'aux1380' direct represents '2' with '-5797'
5796 5798 -5797 0
c Encoding variable: aux1381 with domain: int(0..2) (representing constraint ((x_00009_00006=5) + (x_00009_00005=5)))
c Both direct and order encoding.
c Var 'aux1381' order represents '0' with '5799'
c Var 'aux1381' direct represents '0' with '5799'
c Var 'aux1381' order represents '1' with '5800'
-5799 5800 0
c Var 'aux1381' direct represents '1' with '5801'
5799 -5800 5801 0
-5801 5800 0
-5801 -5799 0
c Var 'aux1381' direct represents '2' with '-5800'
5799 5801 -5800 0
c Encoding variable: aux1382 with domain: int(0..3) (representing constraint ((x_00009_00003=5) + aux1381))
c Both direct and order encoding.
c Var 'aux1382' order represents '0' with '5802'
c Var 'aux1382' direct represents '0' with '5802'
c Var 'aux1382' order represents '1' with '5803'
-5802 5803 0
c Var 'aux1382' direct represents '1' with '5804'
5802 -5803 5804 0
-5804 5803 0
-5804 -5802 0
c Var 'aux1382' order represents '2' with '5805'
-5803 5805 0
c Var 'aux1382' direct represents '2' with '5806'
5803 -5805 5806 0
-5806 5805 0
-5806 -5803 0
c Var 'aux1382' direct represents '3' with '-5805'
5802 5804 5806 -5805 0
c Encoding variable: aux1383 with domain: int(0..4) (representing constraint (aux1378 + aux1380))
c Both direct and order encoding.
c Var 'aux1383' order represents '0' with '5807'
c Var 'aux1383' direct represents '0' with '5807'
c Var 'aux1383' order represents '1' with '5808'
-5807 5808 0
c Var 'aux1383' direct represents '1' with '5809'
5807 -5808 5809 0
-5809 5808 0
-5809 -5807 0
c Var 'aux1383' order represents '2' with '5810'
-5808 5810 0
c Var 'aux1383' direct represents '2' with '5811'
5808 -5810 5811 0
-5811 5810 0
-5811 -5808 0
c Var 'aux1383' order represents '3' with '5812'
-5810 5812 0
c Var 'aux1383' direct represents '3' with '5813'
5810 -5812 5813 0
-5813 5812 0
-5813 -5810 0
c Var 'aux1383' direct represents '4' with '-5812'
5807 5809 5811 5813 -5812 0
c Encoding variable: aux1384 with domain: int(0..2) (representing constraint ((x_00009_00001=6) + (x_00009_00009=6)))
c Both direct and order encoding.
c Var 'aux1384' order represents '0' with '5814'
c Var 'aux1384' direct represents '0' with '5814'
c Var 'aux1384' order represents '1' with '5815'
-5814 5815 0
c Var 'aux1384' direct represents '1' with '5816'
5814 -5815 5816 0
-5816 5815 0
-5816 -5814 0
c Var 'aux1384' direct represents '2' with '-5815'
5814 5816 -5815 0
c Encoding variable: aux1385 with domain: int(0..2) (representing constraint ((x_00009_00008=6) + (x_00009_00002=6)))
c Both direct and order encoding.
c Var 'aux1385' order represents '0' with '5817'
c Var 'aux1385' direct represents '0' with '5817'
c Var 'aux1385' order represents '1' with '5818'
-5817 5818 0
c Var 'aux1385' direct represents '1' with '5819'
5817 -5818 5819 0
-5819 5818 0
-5819 -5817 0
c Var 'aux1385' direct represents '2' with '-5818'
5817 5819 -5818 0
c Encoding variable: aux1386 with domain: int(0..2) (representing constraint ((x_00009_00007=6) + (x_00009_00004=6)))
c Both direct and order encoding.
c Var 'aux1386' order represents '0' with '5820'
c Var 'aux1386' direct represents '0' with '5820'
c Var 'aux1386' order represents '1' with '5821'
-5820 5821 0
c Var 'aux1386' direct represents '1' with '5822'
5820 -5821 5822 0
-5822 5821 0
-5822 -5820 0
c Var 'aux1386' direct represents '2' with '-5821'
5820 5822 -5821 0
c Encoding variable: aux1387 with domain: int(0..2) (representing constraint ((x_00009_00006=6) + (x_00009_00005=6)))
c Both direct and order encoding.
c Var 'aux1387' order represents '0' with '5823'
c Var 'aux1387' direct represents '0' with '5823'
c Var 'aux1387' order represents '1' with '5824'
-5823 5824 0
c Var 'aux1387' direct represents '1' with '5825'
5823 -5824 5825 0
-5825 5824 0
-5825 -5823 0
c Var 'aux1387' direct represents '2' with '-5824'
5823 5825 -5824 0
c Encoding variable: aux1388 with domain: int(0..3) (representing constraint ((x_00009_00003=6) + aux1387))
c Both direct and order encoding.
c Var 'aux1388' order represents '0' with '5826'
c Var 'aux1388' direct represents '0' with '5826'
c Var 'aux1388' order represents '1' with '5827'
-5826 5827 0
c Var 'aux1388' direct represents '1' with '5828'
5826 -5827 5828 0
-5828 5827 0
-5828 -5826 0
c Var 'aux1388' order represents '2' with '5829'
-5827 5829 0
c Var 'aux1388' direct represents '2' with '5830'
5827 -5829 5830 0
-5830 5829 0
-5830 -5827 0
c Var 'aux1388' direct represents '3' with '-5829'
5826 5828 5830 -5829 0
c Encoding variable: aux1389 with domain: int(0..4) (representing constraint (aux1384 + aux1386))
c Both direct and order encoding.
c Var 'aux1389' order represents '0' with '5831'
c Var 'aux1389' direct represents '0' with '5831'
c Var 'aux1389' order represents '1' with '5832'
-5831 5832 0
c Var 'aux1389' direct represents '1' with '5833'
5831 -5832 5833 0
-5833 5832 0
-5833 -5831 0
c Var 'aux1389' order represents '2' with '5834'
-5832 5834 0
c Var 'aux1389' direct represents '2' with '5835'
5832 -5834 5835 0
-5835 5834 0
-5835 -5832 0
c Var 'aux1389' order represents '3' with '5836'
-5834 5836 0
c Var 'aux1389' direct represents '3' with '5837'
5834 -5836 5837 0
-5837 5836 0
-5837 -5834 0
c Var 'aux1389' direct represents '4' with '-5836'
5831 5833 5835 5837 -5836 0
c Encoding variable: aux1390 with domain: int(0..2) (representing constraint ((x_00009_00001=7) + (x_00009_00009=7)))
c Both direct and order encoding.
c Var 'aux1390' order represents '0' with '5838'
c Var 'aux1390' direct represents '0' with '5838'
c Var 'aux1390' order represents '1' with '5839'
-5838 5839 0
c Var 'aux1390' direct represents '1' with '5840'
5838 -5839 5840 0
-5840 5839 0
-5840 -5838 0
c Var 'aux1390' direct represents '2' with '-5839'
5838 5840 -5839 0
c Encoding variable: aux1391 with domain: int(0..2) (representing constraint ((x_00009_00008=7) + (x_00009_00002=7)))
c Both direct and order encoding.
c Var 'aux1391' order represents '0' with '5841'
c Var 'aux1391' direct represents '0' with '5841'
c Var 'aux1391' order represents '1' with '5842'
-5841 5842 0
c Var 'aux1391' direct represents '1' with '5843'
5841 -5842 5843 0
-5843 5842 0
-5843 -5841 0
c Var 'aux1391' direct represents '2' with '-5842'
5841 5843 -5842 0
c Encoding variable: aux1392 with domain: int(0..2) (representing constraint ((x_00009_00007=7) + (x_00009_00004=7)))
c Both direct and order encoding.
c Var 'aux1392' order represents '0' with '5844'
c Var 'aux1392' direct represents '0' with '5844'
c Var 'aux1392' order represents '1' with '5845'
-5844 5845 0
c Var 'aux1392' direct represents '1' with '5846'
5844 -5845 5846 0
-5846 5845 0
-5846 -5844 0
c Var 'aux1392' direct represents '2' with '-5845'
5844 5846 -5845 0
c Encoding variable: aux1393 with domain: int(0..2) (representing constraint ((x_00009_00006=7) + (x_00009_00005=7)))
c Both direct and order encoding.
c Var 'aux1393' order represents '0' with '5847'
c Var 'aux1393' direct represents '0' with '5847'
c Var 'aux1393' order represents '1' with '5848'
-5847 5848 0
c Var 'aux1393' direct represents '1' with '5849'
5847 -5848 5849 0
-5849 5848 0
-5849 -5847 0
c Var 'aux1393' direct represents '2' with '-5848'
5847 5849 -5848 0
c Encoding variable: aux1394 with domain: int(0..3) (representing constraint ((x_00009_00003=7) + aux1393))
c Both direct and order encoding.
c Var 'aux1394' order represents '0' with '5850'
c Var 'aux1394' direct represents '0' with '5850'
c Var 'aux1394' order represents '1' with '5851'
-5850 5851 0
c Var 'aux1394' direct represents '1' with '5852'
5850 -5851 5852 0
-5852 5851 0
-5852 -5850 0
c Var 'aux1394' order represents '2' with '5853'
-5851 5853 0
c Var 'aux1394' direct represents '2' with '5854'
5851 -5853 5854 0
-5854 5853 0
-5854 -5851 0
c Var 'aux1394' direct represents '3' with '-5853'
5850 5852 5854 -5853 0
c Encoding variable: aux1395 with domain: int(0..4) (representing constraint (aux1390 + aux1392))
c Both direct and order encoding.
c Var 'aux1395' order represents '0' with '5855'
c Var 'aux1395' direct represents '0' with '5855'
c Var 'aux1395' order represents '1' with '5856'
-5855 5856 0
c Var 'aux1395' direct represents '1' with '5857'
5855 -5856 5857 0
-5857 5856 0
-5857 -5855 0
c Var 'aux1395' order represents '2' with '5858'
-5856 5858 0
c Var 'aux1395' direct represents '2' with '5859'
5856 -5858 5859 0
-5859 5858 0
-5859 -5856 0
c Var 'aux1395' order represents '3' with '5860'
-5858 5860 0
c Var 'aux1395' direct represents '3' with '5861'
5858 -5860 5861 0
-5861 5860 0
-5861 -5858 0
c Var 'aux1395' direct represents '4' with '-5860'
5855 5857 5859 5861 -5860 0
c Encoding variable: aux1396 with domain: int(0..2) (representing constraint ((x_00009_00001=8) + (x_00009_00009=8)))
c Both direct and order encoding.
c Var 'aux1396' order represents '0' with '5862'
c Var 'aux1396' direct represents '0' with '5862'
c Var 'aux1396' order represents '1' with '5863'
-5862 5863 0
c Var 'aux1396' direct represents '1' with '5864'
5862 -5863 5864 0
-5864 5863 0
-5864 -5862 0
c Var 'aux1396' direct represents '2' with '-5863'
5862 5864 -5863 0
c Encoding variable: aux1397 with domain: int(0..2) (representing constraint ((x_00009_00008=8) + (x_00009_00002=8)))
c Both direct and order encoding.
c Var 'aux1397' order represents '0' with '5865'
c Var 'aux1397' direct represents '0' with '5865'
c Var 'aux1397' order represents '1' with '5866'
-5865 5866 0
c Var 'aux1397' direct represents '1' with '5867'
5865 -5866 5867 0
-5867 5866 0
-5867 -5865 0
c Var 'aux1397' direct represents '2' with '-5866'
5865 5867 -5866 0
c Encoding variable: aux1398 with domain: int(0..2) (representing constraint ((x_00009_00007=8) + (x_00009_00004=8)))
c Both direct and order encoding.
c Var 'aux1398' order represents '0' with '5868'
c Var 'aux1398' direct represents '0' with '5868'
c Var 'aux1398' order represents '1' with '5869'
-5868 5869 0
c Var 'aux1398' direct represents '1' with '5870'
5868 -5869 5870 0
-5870 5869 0
-5870 -5868 0
c Var 'aux1398' direct represents '2' with '-5869'
5868 5870 -5869 0
c Encoding variable: aux1399 with domain: int(0..2) (representing constraint ((x_00009_00006=8) + (x_00009_00005=8)))
c Both direct and order encoding.
c Var 'aux1399' order represents '0' with '5871'
c Var 'aux1399' direct represents '0' with '5871'
c Var 'aux1399' order represents '1' with '5872'
-5871 5872 0
c Var 'aux1399' direct represents '1' with '5873'
5871 -5872 5873 0
-5873 5872 0
-5873 -5871 0
c Var 'aux1399' direct represents '2' with '-5872'
5871 5873 -5872 0
c Encoding variable: aux1400 with domain: int(0..3) (representing constraint ((x_00009_00003=8) + aux1399))
c Both direct and order encoding.
c Var 'aux1400' order represents '0' with '5874'
c Var 'aux1400' direct represents '0' with '5874'
c Var 'aux1400' order represents '1' with '5875'
-5874 5875 0
c Var 'aux1400' direct represents '1' with '5876'
5874 -5875 5876 0
-5876 5875 0
-5876 -5874 0
c Var 'aux1400' order represents '2' with '5877'
-5875 5877 0
c Var 'aux1400' direct represents '2' with '5878'
5875 -5877 5878 0
-5878 5877 0
-5878 -5875 0
c Var 'aux1400' direct represents '3' with '-5877'
5874 5876 5878 -5877 0
c Encoding variable: aux1401 with domain: int(0..4) (representing constraint (aux1396 + aux1398))
c Both direct and order encoding.
c Var 'aux1401' order represents '0' with '5879'
c Var 'aux1401' direct represents '0' with '5879'
c Var 'aux1401' order represents '1' with '5880'
-5879 5880 0
c Var 'aux1401' direct represents '1' with '5881'
5879 -5880 5881 0
-5881 5880 0
-5881 -5879 0
c Var 'aux1401' order represents '2' with '5882'
-5880 5882 0
c Var 'aux1401' direct represents '2' with '5883'
5880 -5882 5883 0
-5883 5882 0
-5883 -5880 0
c Var 'aux1401' order represents '3' with '5884'
-5882 5884 0
c Var 'aux1401' direct represents '3' with '5885'
5882 -5884 5885 0
-5885 5884 0
-5885 -5882 0
c Var 'aux1401' direct represents '4' with '-5884'
5879 5881 5883 5885 -5884 0
c Encoding variable: aux1402 with domain: int(0..2) (representing constraint ((x_00009_00001=9) + (x_00009_00009=9)))
c Both direct and order encoding.
c Var 'aux1402' order represents '0' with '5886'
c Var 'aux1402' direct represents '0' with '5886'
c Var 'aux1402' order represents '1' with '5887'
-5886 5887 0
c Var 'aux1402' direct represents '1' with '5888'
5886 -5887 5888 0
-5888 5887 0
-5888 -5886 0
c Var 'aux1402' direct represents '2' with '-5887'
5886 5888 -5887 0
c Encoding variable: aux1403 with domain: int(0..2) (representing constraint ((x_00009_00008=9) + (x_00009_00002=9)))
c Both direct and order encoding.
c Var 'aux1403' order represents '0' with '5889'
c Var 'aux1403' direct represents '0' with '5889'
c Var 'aux1403' order represents '1' with '5890'
-5889 5890 0
c Var 'aux1403' direct represents '1' with '5891'
5889 -5890 5891 0
-5891 5890 0
-5891 -5889 0
c Var 'aux1403' direct represents '2' with '-5890'
5889 5891 -5890 0
c Encoding variable: aux1404 with domain: int(0..2) (representing constraint ((x_00009_00007=9) + (x_00009_00004=9)))
c Both direct and order encoding.
c Var 'aux1404' order represents '0' with '5892'
c Var 'aux1404' direct represents '0' with '5892'
c Var 'aux1404' order represents '1' with '5893'
-5892 5893 0
c Var 'aux1404' direct represents '1' with '5894'
5892 -5893 5894 0
-5894 5893 0
-5894 -5892 0
c Var 'aux1404' direct represents '2' with '-5893'
5892 5894 -5893 0
c Encoding variable: aux1405 with domain: int(0..2) (representing constraint ((x_00009_00006=9) + (x_00009_00005=9)))
c Both direct and order encoding.
c Var 'aux1405' order represents '0' with '5895'
c Var 'aux1405' direct represents '0' with '5895'
c Var 'aux1405' order represents '1' with '5896'
-5895 5896 0
c Var 'aux1405' direct represents '1' with '5897'
5895 -5896 5897 0
-5897 5896 0
-5897 -5895 0
c Var 'aux1405' direct represents '2' with '-5896'
5895 5897 -5896 0
c Encoding variable: aux1406 with domain: int(0..3) (representing constraint ((x_00009_00003=9) + aux1405))
c Both direct and order encoding.
c Var 'aux1406' order represents '0' with '5898'
c Var 'aux1406' direct represents '0' with '5898'
c Var 'aux1406' order represents '1' with '5899'
-5898 5899 0
c Var 'aux1406' direct represents '1' with '5900'
5898 -5899 5900 0
-5900 5899 0
-5900 -5898 0
c Var 'aux1406' order represents '2' with '5901'
-5899 5901 0
c Var 'aux1406' direct represents '2' with '5902'
5899 -5901 5902 0
-5902 5901 0
-5902 -5899 0
c Var 'aux1406' direct represents '3' with '-5901'
5898 5900 5902 -5901 0
c Encoding variable: aux1407 with domain: int(0..4) (representing constraint (aux1402 + aux1404))
c Both direct and order encoding.
c Var 'aux1407' order represents '0' with '5903'
c Var 'aux1407' direct represents '0' with '5903'
c Var 'aux1407' order represents '1' with '5904'
-5903 5904 0
c Var 'aux1407' direct represents '1' with '5905'
5903 -5904 5905 0
-5905 5904 0
-5905 -5903 0
c Var 'aux1407' order represents '2' with '5906'
-5904 5906 0
c Var 'aux1407' direct represents '2' with '5907'
5904 -5906 5907 0
-5907 5906 0
-5907 -5904 0
c Var 'aux1407' order represents '3' with '5908'
-5906 5908 0
c Var 'aux1407' direct represents '3' with '5909'
5906 -5908 5909 0
-5909 5908 0
-5909 -5906 0
c Var 'aux1407' direct represents '4' with '-5908'
5903 5905 5907 5909 -5908 0
c Encoding variable: aux1408 with domain: int(0..2) (representing constraint ((x_00003_00001=1) + (x_00002_00003=1)))
c Both direct and order encoding.
c Var 'aux1408' order represents '0' with '5910'
c Var 'aux1408' direct represents '0' with '5910'
c Var 'aux1408' order represents '1' with '5911'
-5910 5911 0
c Var 'aux1408' direct represents '1' with '5912'
5910 -5911 5912 0
-5912 5911 0
-5912 -5910 0
c Var 'aux1408' direct represents '2' with '-5911'
5910 5912 -5911 0
c Encoding variable: aux1409 with domain: int(0..2) (representing constraint ((x_00002_00002=1) + (x_00003_00002=1)))
c Both direct and order encoding.
c Var 'aux1409' order represents '0' with '5913'
c Var 'aux1409' direct represents '0' with '5913'
c Var 'aux1409' order represents '1' with '5914'
-5913 5914 0
c Var 'aux1409' direct represents '1' with '5915'
5913 -5914 5915 0
-5915 5914 0
-5915 -5913 0
c Var 'aux1409' direct represents '2' with '-5914'
5913 5915 -5914 0
c Encoding variable: aux1410 with domain: int(0..2) (representing constraint ((x_00002_00001=1) + (x_00001_00001=1)))
c Both direct and order encoding.
c Var 'aux1410' order represents '0' with '5916'
c Var 'aux1410' direct represents '0' with '5916'
c Var 'aux1410' order represents '1' with '5917'
-5916 5917 0
c Var 'aux1410' direct represents '1' with '5918'
5916 -5917 5918 0
-5918 5917 0
-5918 -5916 0
c Var 'aux1410' direct represents '2' with '-5917'
5916 5918 -5917 0
c Encoding variable: aux1411 with domain: int(0..2) (representing constraint ((x_00001_00003=1) + (x_00001_00002=1)))
c Both direct and order encoding.
c Var 'aux1411' order represents '0' with '5919'
c Var 'aux1411' direct represents '0' with '5919'
c Var 'aux1411' order represents '1' with '5920'
-5919 5920 0
c Var 'aux1411' direct represents '1' with '5921'
5919 -5920 5921 0
-5921 5920 0
-5921 -5919 0
c Var 'aux1411' direct represents '2' with '-5920'
5919 5921 -5920 0
c Encoding variable: aux1412 with domain: int(0..3) (representing constraint ((x_00003_00003=1) + aux1411))
c Both direct and order encoding.
c Var 'aux1412' order represents '0' with '5922'
c Var 'aux1412' direct represents '0' with '5922'
c Var 'aux1412' order represents '1' with '5923'
-5922 5923 0
c Var 'aux1412' direct represents '1' with '5924'
5922 -5923 5924 0
-5924 5923 0
-5924 -5922 0
c Var 'aux1412' order represents '2' with '5925'
-5923 5925 0
c Var 'aux1412' direct represents '2' with '5926'
5923 -5925 5926 0
-5926 5925 0
-5926 -5923 0
c Var 'aux1412' direct represents '3' with '-5925'
5922 5924 5926 -5925 0
c Encoding variable: aux1413 with domain: int(0..4) (representing constraint (aux1408 + aux1410))
c Both direct and order encoding.
c Var 'aux1413' order represents '0' with '5927'
c Var 'aux1413' direct represents '0' with '5927'
c Var 'aux1413' order represents '1' with '5928'
-5927 5928 0
c Var 'aux1413' direct represents '1' with '5929'
5927 -5928 5929 0
-5929 5928 0
-5929 -5927 0
c Var 'aux1413' order represents '2' with '5930'
-5928 5930 0
c Var 'aux1413' direct represents '2' with '5931'
5928 -5930 5931 0
-5931 5930 0
-5931 -5928 0
c Var 'aux1413' order represents '3' with '5932'
-5930 5932 0
c Var 'aux1413' direct represents '3' with '5933'
5930 -5932 5933 0
-5933 5932 0
-5933 -5930 0
c Var 'aux1413' direct represents '4' with '-5932'
5927 5929 5931 5933 -5932 0
c Encoding variable: aux1414 with domain: int(0..2) (representing constraint ((x_00003_00001=2) + (x_00002_00003=2)))
c Both direct and order encoding.
c Var 'aux1414' order represents '0' with '5934'
c Var 'aux1414' direct represents '0' with '5934'
c Var 'aux1414' order represents '1' with '5935'
-5934 5935 0
c Var 'aux1414' direct represents '1' with '5936'
5934 -5935 5936 0
-5936 5935 0
-5936 -5934 0
c Var 'aux1414' direct represents '2' with '-5935'
5934 5936 -5935 0
c Encoding variable: aux1415 with domain: int(0..2) (representing constraint ((x_00002_00002=2) + (x_00003_00002=2)))
c Both direct and order encoding.
c Var 'aux1415' order represents '0' with '5937'
c Var 'aux1415' direct represents '0' with '5937'
c Var 'aux1415' order represents '1' with '5938'
-5937 5938 0
c Var 'aux1415' direct represents '1' with '5939'
5937 -5938 5939 0
-5939 5938 0
-5939 -5937 0
c Var 'aux1415' direct represents '2' with '-5938'
5937 5939 -5938 0
c Encoding variable: aux1416 with domain: int(0..2) (representing constraint ((x_00002_00001=2) + (x_00001_00001=2)))
c Both direct and order encoding.
c Var 'aux1416' order represents '0' with '5940'
c Var 'aux1416' direct represents '0' with '5940'
c Var 'aux1416' order represents '1' with '5941'
-5940 5941 0
c Var 'aux1416' direct represents '1' with '5942'
5940 -5941 5942 0
-5942 5941 0
-5942 -5940 0
c Var 'aux1416' direct represents '2' with '-5941'
5940 5942 -5941 0
c Encoding variable: aux1417 with domain: int(0..2) (representing constraint ((x_00001_00003=2) + (x_00001_00002=2)))
c Both direct and order encoding.
c Var 'aux1417' order represents '0' with '5943'
c Var 'aux1417' direct represents '0' with '5943'
c Var 'aux1417' order represents '1' with '5944'
-5943 5944 0
c Var 'aux1417' direct represents '1' with '5945'
5943 -5944 5945 0
-5945 5944 0
-5945 -5943 0
c Var 'aux1417' direct represents '2' with '-5944'
5943 5945 -5944 0
c Encoding variable: aux1418 with domain: int(0..3) (representing constraint ((x_00003_00003=2) + aux1417))
c Both direct and order encoding.
c Var 'aux1418' order represents '0' with '5946'
c Var 'aux1418' direct represents '0' with '5946'
c Var 'aux1418' order represents '1' with '5947'
-5946 5947 0
c Var 'aux1418' direct represents '1' with '5948'
5946 -5947 5948 0
-5948 5947 0
-5948 -5946 0
c Var 'aux1418' order represents '2' with '5949'
-5947 5949 0
c Var 'aux1418' direct represents '2' with '5950'
5947 -5949 5950 0
-5950 5949 0
-5950 -5947 0
c Var 'aux1418' direct represents '3' with '-5949'
5946 5948 5950 -5949 0
c Encoding variable: aux1419 with domain: int(0..4) (representing constraint (aux1414 + aux1416))
c Both direct and order encoding.
c Var 'aux1419' order represents '0' with '5951'
c Var 'aux1419' direct represents '0' with '5951'
c Var 'aux1419' order represents '1' with '5952'
-5951 5952 0
c Var 'aux1419' direct represents '1' with '5953'
5951 -5952 5953 0
-5953 5952 0
-5953 -5951 0
c Var 'aux1419' order represents '2' with '5954'
-5952 5954 0
c Var 'aux1419' direct represents '2' with '5955'
5952 -5954 5955 0
-5955 5954 0
-5955 -5952 0
c Var 'aux1419' order represents '3' with '5956'
-5954 5956 0
c Var 'aux1419' direct represents '3' with '5957'
5954 -5956 5957 0
-5957 5956 0
-5957 -5954 0
c Var 'aux1419' direct represents '4' with '-5956'
5951 5953 5955 5957 -5956 0
c Encoding variable: aux1420 with domain: int(0..2) (representing constraint ((x_00003_00001=3) + (x_00002_00003=3)))
c Both direct and order encoding.
c Var 'aux1420' order represents '0' with '5958'
c Var 'aux1420' direct represents '0' with '5958'
c Var 'aux1420' order represents '1' with '5959'
-5958 5959 0
c Var 'aux1420' direct represents '1' with '5960'
5958 -5959 5960 0
-5960 5959 0
-5960 -5958 0
c Var 'aux1420' direct represents '2' with '-5959'
5958 5960 -5959 0
c Encoding variable: aux1421 with domain: int(0..2) (representing constraint ((x_00002_00002=3) + (x_00003_00002=3)))
c Both direct and order encoding.
c Var 'aux1421' order represents '0' with '5961'
c Var 'aux1421' direct represents '0' with '5961'
c Var 'aux1421' order represents '1' with '5962'
-5961 5962 0
c Var 'aux1421' direct represents '1' with '5963'
5961 -5962 5963 0
-5963 5962 0
-5963 -5961 0
c Var 'aux1421' direct represents '2' with '-5962'
5961 5963 -5962 0
c Encoding variable: aux1422 with domain: int(0..2) (representing constraint ((x_00002_00001=3) + (x_00001_00001=3)))
c Both direct and order encoding.
c Var 'aux1422' order represents '0' with '5964'
c Var 'aux1422' direct represents '0' with '5964'
c Var 'aux1422' order represents '1' with '5965'
-5964 5965 0
c Var 'aux1422' direct represents '1' with '5966'
5964 -5965 5966 0
-5966 5965 0
-5966 -5964 0
c Var 'aux1422' direct represents '2' with '-5965'
5964 5966 -5965 0
c Encoding variable: aux1423 with domain: int(0..2) (representing constraint ((x_00001_00003=3) + (x_00001_00002=3)))
c Both direct and order encoding.
c Var 'aux1423' order represents '0' with '5967'
c Var 'aux1423' direct represents '0' with '5967'
c Var 'aux1423' order represents '1' with '5968'
-5967 5968 0
c Var 'aux1423' direct represents '1' with '5969'
5967 -5968 5969 0
-5969 5968 0
-5969 -5967 0
c Var 'aux1423' direct represents '2' with '-5968'
5967 5969 -5968 0
c Encoding variable: aux1424 with domain: int(0..3) (representing constraint ((x_00003_00003=3) + aux1423))
c Both direct and order encoding.
c Var 'aux1424' order represents '0' with '5970'
c Var 'aux1424' direct represents '0' with '5970'
c Var 'aux1424' order represents '1' with '5971'
-5970 5971 0
c Var 'aux1424' direct represents '1' with '5972'
5970 -5971 5972 0
-5972 5971 0
-5972 -5970 0
c Var 'aux1424' order represents '2' with '5973'
-5971 5973 0
c Var 'aux1424' direct represents '2' with '5974'
5971 -5973 5974 0
-5974 5973 0
-5974 -5971 0
c Var 'aux1424' direct represents '3' with '-5973'
5970 5972 5974 -5973 0
c Encoding variable: aux1425 with domain: int(0..4) (representing constraint (aux1420 + aux1422))
c Both direct and order encoding.
c Var 'aux1425' order represents '0' with '5975'
c Var 'aux1425' direct represents '0' with '5975'
c Var 'aux1425' order represents '1' with '5976'
-5975 5976 0
c Var 'aux1425' direct represents '1' with '5977'
5975 -5976 5977 0
-5977 5976 0
-5977 -5975 0
c Var 'aux1425' order represents '2' with '5978'
-5976 5978 0
c Var 'aux1425' direct represents '2' with '5979'
5976 -5978 5979 0
-5979 5978 0
-5979 -5976 0
c Var 'aux1425' order represents '3' with '5980'
-5978 5980 0
c Var 'aux1425' direct represents '3' with '5981'
5978 -5980 5981 0
-5981 5980 0
-5981 -5978 0
c Var 'aux1425' direct represents '4' with '-5980'
5975 5977 5979 5981 -5980 0
c Encoding variable: aux1426 with domain: int(0..2) (representing constraint ((x_00003_00001=4) + (x_00002_00003=4)))
c Both direct and order encoding.
c Var 'aux1426' order represents '0' with '5982'
c Var 'aux1426' direct represents '0' with '5982'
c Var 'aux1426' order represents '1' with '5983'
-5982 5983 0
c Var 'aux1426' direct represents '1' with '5984'
5982 -5983 5984 0
-5984 5983 0
-5984 -5982 0
c Var 'aux1426' direct represents '2' with '-5983'
5982 5984 -5983 0
c Encoding variable: aux1427 with domain: int(0..2) (representing constraint ((x_00002_00002=4) + (x_00003_00002=4)))
c Both direct and order encoding.
c Var 'aux1427' order represents '0' with '5985'
c Var 'aux1427' direct represents '0' with '5985'
c Var 'aux1427' order represents '1' with '5986'
-5985 5986 0
c Var 'aux1427' direct represents '1' with '5987'
5985 -5986 5987 0
-5987 5986 0
-5987 -5985 0
c Var 'aux1427' direct represents '2' with '-5986'
5985 5987 -5986 0
c Encoding variable: aux1428 with domain: int(0..2) (representing constraint ((x_00002_00001=4) + (x_00001_00001=4)))
c Both direct and order encoding.
c Var 'aux1428' order represents '0' with '5988'
c Var 'aux1428' direct represents '0' with '5988'
c Var 'aux1428' order represents '1' with '5989'
-5988 5989 0
c Var 'aux1428' direct represents '1' with '5990'
5988 -5989 5990 0
-5990 5989 0
-5990 -5988 0
c Var 'aux1428' direct represents '2' with '-5989'
5988 5990 -5989 0
c Encoding variable: aux1429 with domain: int(0..2) (representing constraint ((x_00001_00003=4) + (x_00001_00002=4)))
c Both direct and order encoding.
c Var 'aux1429' order represents '0' with '5991'
c Var 'aux1429' direct represents '0' with '5991'
c Var 'aux1429' order represents '1' with '5992'
-5991 5992 0
c Var 'aux1429' direct represents '1' with '5993'
5991 -5992 5993 0
-5993 5992 0
-5993 -5991 0
c Var 'aux1429' direct represents '2' with '-5992'
5991 5993 -5992 0
c Encoding variable: aux1430 with domain: int(0..3) (representing constraint ((x_00003_00003=4) + aux1429))
c Both direct and order encoding.
c Var 'aux1430' order represents '0' with '5994'
c Var 'aux1430' direct represents '0' with '5994'
c Var 'aux1430' order represents '1' with '5995'
-5994 5995 0
c Var 'aux1430' direct represents '1' with '5996'
5994 -5995 5996 0
-5996 5995 0
-5996 -5994 0
c Var 'aux1430' order represents '2' with '5997'
-5995 5997 0
c Var 'aux1430' direct represents '2' with '5998'
5995 -5997 5998 0
-5998 5997 0
-5998 -5995 0
c Var 'aux1430' direct represents '3' with '-5997'
5994 5996 5998 -5997 0
c Encoding variable: aux1431 with domain: int(0..4) (representing constraint (aux1426 + aux1428))
c Both direct and order encoding.
c Var 'aux1431' order represents '0' with '5999'
c Var 'aux1431' direct represents '0' with '5999'
c Var 'aux1431' order represents '1' with '6000'
-5999 6000 0
c Var 'aux1431' direct represents '1' with '6001'
5999 -6000 6001 0
-6001 6000 0
-6001 -5999 0
c Var 'aux1431' order represents '2' with '6002'
-6000 6002 0
c Var 'aux1431' direct represents '2' with '6003'
6000 -6002 6003 0
-6003 6002 0
-6003 -6000 0
c Var 'aux1431' order represents '3' with '6004'
-6002 6004 0
c Var 'aux1431' direct represents '3' with '6005'
6002 -6004 6005 0
-6005 6004 0
-6005 -6002 0
c Var 'aux1431' direct represents '4' with '-6004'
5999 6001 6003 6005 -6004 0
c Encoding variable: aux1432 with domain: int(0..2) (representing constraint ((x_00003_00001=5) + (x_00002_00003=5)))
c Both direct and order encoding.
c Var 'aux1432' order represents '0' with '6006'
c Var 'aux1432' direct represents '0' with '6006'
c Var 'aux1432' order represents '1' with '6007'
-6006 6007 0
c Var 'aux1432' direct represents '1' with '6008'
6006 -6007 6008 0
-6008 6007 0
-6008 -6006 0
c Var 'aux1432' direct represents '2' with '-6007'
6006 6008 -6007 0
c Encoding variable: aux1433 with domain: int(0..2) (representing constraint ((x_00002_00002=5) + (x_00003_00002=5)))
c Both direct and order encoding.
c Var 'aux1433' order represents '0' with '6009'
c Var 'aux1433' direct represents '0' with '6009'
c Var 'aux1433' order represents '1' with '6010'
-6009 6010 0
c Var 'aux1433' direct represents '1' with '6011'
6009 -6010 6011 0
-6011 6010 0
-6011 -6009 0
c Var 'aux1433' direct represents '2' with '-6010'
6009 6011 -6010 0
c Encoding variable: aux1434 with domain: int(0..2) (representing constraint ((x_00002_00001=5) + (x_00001_00001=5)))
c Both direct and order encoding.
c Var 'aux1434' order represents '0' with '6012'
c Var 'aux1434' direct represents '0' with '6012'
c Var 'aux1434' order represents '1' with '6013'
-6012 6013 0
c Var 'aux1434' direct represents '1' with '6014'
6012 -6013 6014 0
-6014 6013 0
-6014 -6012 0
c Var 'aux1434' direct represents '2' with '-6013'
6012 6014 -6013 0
c Encoding variable: aux1435 with domain: int(0..2) (representing constraint ((x_00001_00003=5) + (x_00001_00002=5)))
c Both direct and order encoding.
c Var 'aux1435' order represents '0' with '6015'
c Var 'aux1435' direct represents '0' with '6015'
c Var 'aux1435' order represents '1' with '6016'
-6015 6016 0
c Var 'aux1435' direct represents '1' with '6017'
6015 -6016 6017 0
-6017 6016 0
-6017 -6015 0
c Var 'aux1435' direct represents '2' with '-6016'
6015 6017 -6016 0
c Encoding variable: aux1436 with domain: int(0..3) (representing constraint ((x_00003_00003=5) + aux1435))
c Both direct and order encoding.
c Var 'aux1436' order represents '0' with '6018'
c Var 'aux1436' direct represents '0' with '6018'
c Var 'aux1436' order represents '1' with '6019'
-6018 6019 0
c Var 'aux1436' direct represents '1' with '6020'
6018 -6019 6020 0
-6020 6019 0
-6020 -6018 0
c Var 'aux1436' order represents '2' with '6021'
-6019 6021 0
c Var 'aux1436' direct represents '2' with '6022'
6019 -6021 6022 0
-6022 6021 0
-6022 -6019 0
c Var 'aux1436' direct represents '3' with '-6021'
6018 6020 6022 -6021 0
c Encoding variable: aux1437 with domain: int(0..4) (representing constraint (aux1432 + aux1434))
c Both direct and order encoding.
c Var 'aux1437' order represents '0' with '6023'
c Var 'aux1437' direct represents '0' with '6023'
c Var 'aux1437' order represents '1' with '6024'
-6023 6024 0
c Var 'aux1437' direct represents '1' with '6025'
6023 -6024 6025 0
-6025 6024 0
-6025 -6023 0
c Var 'aux1437' order represents '2' with '6026'
-6024 6026 0
c Var 'aux1437' direct represents '2' with '6027'
6024 -6026 6027 0
-6027 6026 0
-6027 -6024 0
c Var 'aux1437' order represents '3' with '6028'
-6026 6028 0
c Var 'aux1437' direct represents '3' with '6029'
6026 -6028 6029 0
-6029 6028 0
-6029 -6026 0
c Var 'aux1437' direct represents '4' with '-6028'
6023 6025 6027 6029 -6028 0
c Encoding variable: aux1438 with domain: int(0..2) (representing constraint ((x_00003_00001=6) + (x_00002_00003=6)))
c Both direct and order encoding.
c Var 'aux1438' order represents '0' with '6030'
c Var 'aux1438' direct represents '0' with '6030'
c Var 'aux1438' order represents '1' with '6031'
-6030 6031 0
c Var 'aux1438' direct represents '1' with '6032'
6030 -6031 6032 0
-6032 6031 0
-6032 -6030 0
c Var 'aux1438' direct represents '2' with '-6031'
6030 6032 -6031 0
c Encoding variable: aux1439 with domain: int(0..2) (representing constraint ((x_00002_00002=6) + (x_00003_00002=6)))
c Both direct and order encoding.
c Var 'aux1439' order represents '0' with '6033'
c Var 'aux1439' direct represents '0' with '6033'
c Var 'aux1439' order represents '1' with '6034'
-6033 6034 0
c Var 'aux1439' direct represents '1' with '6035'
6033 -6034 6035 0
-6035 6034 0
-6035 -6033 0
c Var 'aux1439' direct represents '2' with '-6034'
6033 6035 -6034 0
c Encoding variable: aux1440 with domain: int(0..2) (representing constraint ((x_00002_00001=6) + (x_00001_00001=6)))
c Both direct and order encoding.
c Var 'aux1440' order represents '0' with '6036'
c Var 'aux1440' direct represents '0' with '6036'
c Var 'aux1440' order represents '1' with '6037'
-6036 6037 0
c Var 'aux1440' direct represents '1' with '6038'
6036 -6037 6038 0
-6038 6037 0
-6038 -6036 0
c Var 'aux1440' direct represents '2' with '-6037'
6036 6038 -6037 0
c Encoding variable: aux1441 with domain: int(0..2) (representing constraint ((x_00001_00003=6) + (x_00001_00002=6)))
c Both direct and order encoding.
c Var 'aux1441' order represents '0' with '6039'
c Var 'aux1441' direct represents '0' with '6039'
c Var 'aux1441' order represents '1' with '6040'
-6039 6040 0
c Var 'aux1441' direct represents '1' with '6041'
6039 -6040 6041 0
-6041 6040 0
-6041 -6039 0
c Var 'aux1441' direct represents '2' with '-6040'
6039 6041 -6040 0
c Encoding variable: aux1442 with domain: int(0..3) (representing constraint ((x_00003_00003=6) + aux1441))
c Both direct and order encoding.
c Var 'aux1442' order represents '0' with '6042'
c Var 'aux1442' direct represents '0' with '6042'
c Var 'aux1442' order represents '1' with '6043'
-6042 6043 0
c Var 'aux1442' direct represents '1' with '6044'
6042 -6043 6044 0
-6044 6043 0
-6044 -6042 0
c Var 'aux1442' order represents '2' with '6045'
-6043 6045 0
c Var 'aux1442' direct represents '2' with '6046'
6043 -6045 6046 0
-6046 6045 0
-6046 -6043 0
c Var 'aux1442' direct represents '3' with '-6045'
6042 6044 6046 -6045 0
c Encoding variable: aux1443 with domain: int(0..4) (representing constraint (aux1438 + aux1440))
c Both direct and order encoding.
c Var 'aux1443' order represents '0' with '6047'
c Var 'aux1443' direct represents '0' with '6047'
c Var 'aux1443' order represents '1' with '6048'
-6047 6048 0
c Var 'aux1443' direct represents '1' with '6049'
6047 -6048 6049 0
-6049 6048 0
-6049 -6047 0
c Var 'aux1443' order represents '2' with '6050'
-6048 6050 0
c Var 'aux1443' direct represents '2' with '6051'
6048 -6050 6051 0
-6051 6050 0
-6051 -6048 0
c Var 'aux1443' order represents '3' with '6052'
-6050 6052 0
c Var 'aux1443' direct represents '3' with '6053'
6050 -6052 6053 0
-6053 6052 0
-6053 -6050 0
c Var 'aux1443' direct represents '4' with '-6052'
6047 6049 6051 6053 -6052 0
c Encoding variable: aux1444 with domain: int(0..2) (representing constraint ((x_00003_00001=7) + (x_00002_00003=7)))
c Both direct and order encoding.
c Var 'aux1444' order represents '0' with '6054'
c Var 'aux1444' direct represents '0' with '6054'
c Var 'aux1444' order represents '1' with '6055'
-6054 6055 0
c Var 'aux1444' direct represents '1' with '6056'
6054 -6055 6056 0
-6056 6055 0
-6056 -6054 0
c Var 'aux1444' direct represents '2' with '-6055'
6054 6056 -6055 0
c Encoding variable: aux1445 with domain: int(0..2) (representing constraint ((x_00002_00002=7) + (x_00003_00002=7)))
c Both direct and order encoding.
c Var 'aux1445' order represents '0' with '6057'
c Var 'aux1445' direct represents '0' with '6057'
c Var 'aux1445' order represents '1' with '6058'
-6057 6058 0
c Var 'aux1445' direct represents '1' with '6059'
6057 -6058 6059 0
-6059 6058 0
-6059 -6057 0
c Var 'aux1445' direct represents '2' with '-6058'
6057 6059 -6058 0
c Encoding variable: aux1446 with domain: int(0..2) (representing constraint ((x_00002_00001=7) + (x_00001_00001=7)))
c Both direct and order encoding.
c Var 'aux1446' order represents '0' with '6060'
c Var 'aux1446' direct represents '0' with '6060'
c Var 'aux1446' order represents '1' with '6061'
-6060 6061 0
c Var 'aux1446' direct represents '1' with '6062'
6060 -6061 6062 0
-6062 6061 0
-6062 -6060 0
c Var 'aux1446' direct represents '2' with '-6061'
6060 6062 -6061 0
c Encoding variable: aux1447 with domain: int(0..2) (representing constraint ((x_00001_00003=7) + (x_00001_00002=7)))
c Both direct and order encoding.
c Var 'aux1447' order represents '0' with '6063'
c Var 'aux1447' direct represents '0' with '6063'
c Var 'aux1447' order represents '1' with '6064'
-6063 6064 0
c Var 'aux1447' direct represents '1' with '6065'
6063 -6064 6065 0
-6065 6064 0
-6065 -6063 0
c Var 'aux1447' direct represents '2' with '-6064'
6063 6065 -6064 0
c Encoding variable: aux1448 with domain: int(0..3) (representing constraint ((x_00003_00003=7) + aux1447))
c Both direct and order encoding.
c Var 'aux1448' order represents '0' with '6066'
c Var 'aux1448' direct represents '0' with '6066'
c Var 'aux1448' order represents '1' with '6067'
-6066 6067 0
c Var 'aux1448' direct represents '1' with '6068'
6066 -6067 6068 0
-6068 6067 0
-6068 -6066 0
c Var 'aux1448' order represents '2' with '6069'
-6067 6069 0
c Var 'aux1448' direct represents '2' with '6070'
6067 -6069 6070 0
-6070 6069 0
-6070 -6067 0
c Var 'aux1448' direct represents '3' with '-6069'
6066 6068 6070 -6069 0
c Encoding variable: aux1449 with domain: int(0..4) (representing constraint (aux1444 + aux1446))
c Both direct and order encoding.
c Var 'aux1449' order represents '0' with '6071'
c Var 'aux1449' direct represents '0' with '6071'
c Var 'aux1449' order represents '1' with '6072'
-6071 6072 0
c Var 'aux1449' direct represents '1' with '6073'
6071 -6072 6073 0
-6073 6072 0
-6073 -6071 0
c Var 'aux1449' order represents '2' with '6074'
-6072 6074 0
c Var 'aux1449' direct represents '2' with '6075'
6072 -6074 6075 0
-6075 6074 0
-6075 -6072 0
c Var 'aux1449' order represents '3' with '6076'
-6074 6076 0
c Var 'aux1449' direct represents '3' with '6077'
6074 -6076 6077 0
-6077 6076 0
-6077 -6074 0
c Var 'aux1449' direct represents '4' with '-6076'
6071 6073 6075 6077 -6076 0
c Encoding variable: aux1450 with domain: int(0..2) (representing constraint ((x_00003_00001=8) + (x_00002_00003=8)))
c Both direct and order encoding.
c Var 'aux1450' order represents '0' with '6078'
c Var 'aux1450' direct represents '0' with '6078'
c Var 'aux1450' order represents '1' with '6079'
-6078 6079 0
c Var 'aux1450' direct represents '1' with '6080'
6078 -6079 6080 0
-6080 6079 0
-6080 -6078 0
c Var 'aux1450' direct represents '2' with '-6079'
6078 6080 -6079 0
c Encoding variable: aux1451 with domain: int(0..2) (representing constraint ((x_00002_00002=8) + (x_00003_00002=8)))
c Both direct and order encoding.
c Var 'aux1451' order represents '0' with '6081'
c Var 'aux1451' direct represents '0' with '6081'
c Var 'aux1451' order represents '1' with '6082'
-6081 6082 0
c Var 'aux1451' direct represents '1' with '6083'
6081 -6082 6083 0
-6083 6082 0
-6083 -6081 0
c Var 'aux1451' direct represents '2' with '-6082'
6081 6083 -6082 0
c Encoding variable: aux1452 with domain: int(0..2) (representing constraint ((x_00002_00001=8) + (x_00001_00001=8)))
c Both direct and order encoding.
c Var 'aux1452' order represents '0' with '6084'
c Var 'aux1452' direct represents '0' with '6084'
c Var 'aux1452' order represents '1' with '6085'
-6084 6085 0
c Var 'aux1452' direct represents '1' with '6086'
6084 -6085 6086 0
-6086 6085 0
-6086 -6084 0
c Var 'aux1452' direct represents '2' with '-6085'
6084 6086 -6085 0
c Encoding variable: aux1453 with domain: int(0..2) (representing constraint ((x_00001_00003=8) + (x_00001_00002=8)))
c Both direct and order encoding.
c Var 'aux1453' order represents '0' with '6087'
c Var 'aux1453' direct represents '0' with '6087'
c Var 'aux1453' order represents '1' with '6088'
-6087 6088 0
c Var 'aux1453' direct represents '1' with '6089'
6087 -6088 6089 0
-6089 6088 0
-6089 -6087 0
c Var 'aux1453' direct represents '2' with '-6088'
6087 6089 -6088 0
c Encoding variable: aux1454 with domain: int(0..3) (representing constraint ((x_00003_00003=8) + aux1453))
c Both direct and order encoding.
c Var 'aux1454' order represents '0' with '6090'
c Var 'aux1454' direct represents '0' with '6090'
c Var 'aux1454' order represents '1' with '6091'
-6090 6091 0
c Var 'aux1454' direct represents '1' with '6092'
6090 -6091 6092 0
-6092 6091 0
-6092 -6090 0
c Var 'aux1454' order represents '2' with '6093'
-6091 6093 0
c Var 'aux1454' direct represents '2' with '6094'
6091 -6093 6094 0
-6094 6093 0
-6094 -6091 0
c Var 'aux1454' direct represents '3' with '-6093'
6090 6092 6094 -6093 0
c Encoding variable: aux1455 with domain: int(0..4) (representing constraint (aux1450 + aux1452))
c Both direct and order encoding.
c Var 'aux1455' order represents '0' with '6095'
c Var 'aux1455' direct represents '0' with '6095'
c Var 'aux1455' order represents '1' with '6096'
-6095 6096 0
c Var 'aux1455' direct represents '1' with '6097'
6095 -6096 6097 0
-6097 6096 0
-6097 -6095 0
c Var 'aux1455' order represents '2' with '6098'
-6096 6098 0
c Var 'aux1455' direct represents '2' with '6099'
6096 -6098 6099 0
-6099 6098 0
-6099 -6096 0
c Var 'aux1455' order represents '3' with '6100'
-6098 6100 0
c Var 'aux1455' direct represents '3' with '6101'
6098 -6100 6101 0
-6101 6100 0
-6101 -6098 0
c Var 'aux1455' direct represents '4' with '-6100'
6095 6097 6099 6101 -6100 0
c Encoding variable: aux1456 with domain: int(0..2) (representing constraint ((x_00003_00001=9) + (x_00002_00003=9)))
c Both direct and order encoding.
c Var 'aux1456' order represents '0' with '6102'
c Var 'aux1456' direct represents '0' with '6102'
c Var 'aux1456' order represents '1' with '6103'
-6102 6103 0
c Var 'aux1456' direct represents '1' with '6104'
6102 -6103 6104 0
-6104 6103 0
-6104 -6102 0
c Var 'aux1456' direct represents '2' with '-6103'
6102 6104 -6103 0
c Encoding variable: aux1457 with domain: int(0..2) (representing constraint ((x_00002_00002=9) + (x_00003_00002=9)))
c Both direct and order encoding.
c Var 'aux1457' order represents '0' with '6105'
c Var 'aux1457' direct represents '0' with '6105'
c Var 'aux1457' order represents '1' with '6106'
-6105 6106 0
c Var 'aux1457' direct represents '1' with '6107'
6105 -6106 6107 0
-6107 6106 0
-6107 -6105 0
c Var 'aux1457' direct represents '2' with '-6106'
6105 6107 -6106 0
c Encoding variable: aux1458 with domain: int(0..2) (representing constraint ((x_00002_00001=9) + (x_00001_00001=9)))
c Both direct and order encoding.
c Var 'aux1458' order represents '0' with '6108'
c Var 'aux1458' direct represents '0' with '6108'
c Var 'aux1458' order represents '1' with '6109'
-6108 6109 0
c Var 'aux1458' direct represents '1' with '6110'
6108 -6109 6110 0
-6110 6109 0
-6110 -6108 0
c Var 'aux1458' direct represents '2' with '-6109'
6108 6110 -6109 0
c Encoding variable: aux1459 with domain: int(0..2) (representing constraint ((x_00001_00003=9) + (x_00001_00002=9)))
c Both direct and order encoding.
c Var 'aux1459' order represents '0' with '6111'
c Var 'aux1459' direct represents '0' with '6111'
c Var 'aux1459' order represents '1' with '6112'
-6111 6112 0
c Var 'aux1459' direct represents '1' with '6113'
6111 -6112 6113 0
-6113 6112 0
-6113 -6111 0
c Var 'aux1459' direct represents '2' with '-6112'
6111 6113 -6112 0
c Encoding variable: aux1460 with domain: int(0..3) (representing constraint ((x_00003_00003=9) + aux1459))
c Both direct and order encoding.
c Var 'aux1460' order represents '0' with '6114'
c Var 'aux1460' direct represents '0' with '6114'
c Var 'aux1460' order represents '1' with '6115'
-6114 6115 0
c Var 'aux1460' direct represents '1' with '6116'
6114 -6115 6116 0
-6116 6115 0
-6116 -6114 0
c Var 'aux1460' order represents '2' with '6117'
-6115 6117 0
c Var 'aux1460' direct represents '2' with '6118'
6115 -6117 6118 0
-6118 6117 0
-6118 -6115 0
c Var 'aux1460' direct represents '3' with '-6117'
6114 6116 6118 -6117 0
c Encoding variable: aux1461 with domain: int(0..4) (representing constraint (aux1456 + aux1458))
c Both direct and order encoding.
c Var 'aux1461' order represents '0' with '6119'
c Var 'aux1461' direct represents '0' with '6119'
c Var 'aux1461' order represents '1' with '6120'
-6119 6120 0
c Var 'aux1461' direct represents '1' with '6121'
6119 -6120 6121 0
-6121 6120 0
-6121 -6119 0
c Var 'aux1461' order represents '2' with '6122'
-6120 6122 0
c Var 'aux1461' direct represents '2' with '6123'
6120 -6122 6123 0
-6123 6122 0
-6123 -6120 0
c Var 'aux1461' order represents '3' with '6124'
-6122 6124 0
c Var 'aux1461' direct represents '3' with '6125'
6122 -6124 6125 0
-6125 6124 0
-6125 -6122 0
c Var 'aux1461' direct represents '4' with '-6124'
6119 6121 6123 6125 -6124 0
c Encoding variable: aux1462 with domain: int(0..2) (representing constraint ((x_00003_00004=1) + (x_00002_00006=1)))
c Both direct and order encoding.
c Var 'aux1462' order represents '0' with '6126'
c Var 'aux1462' direct represents '0' with '6126'
c Var 'aux1462' order represents '1' with '6127'
-6126 6127 0
c Var 'aux1462' direct represents '1' with '6128'
6126 -6127 6128 0
-6128 6127 0
-6128 -6126 0
c Var 'aux1462' direct represents '2' with '-6127'
6126 6128 -6127 0
c Encoding variable: aux1463 with domain: int(0..2) (representing constraint ((x_00002_00005=1) + (x_00003_00005=1)))
c Both direct and order encoding.
c Var 'aux1463' order represents '0' with '6129'
c Var 'aux1463' direct represents '0' with '6129'
c Var 'aux1463' order represents '1' with '6130'
-6129 6130 0
c Var 'aux1463' direct represents '1' with '6131'
6129 -6130 6131 0
-6131 6130 0
-6131 -6129 0
c Var 'aux1463' direct represents '2' with '-6130'
6129 6131 -6130 0
c Encoding variable: aux1464 with domain: int(0..2) (representing constraint ((x_00002_00004=1) + (x_00001_00004=1)))
c Both direct and order encoding.
c Var 'aux1464' order represents '0' with '6132'
c Var 'aux1464' direct represents '0' with '6132'
c Var 'aux1464' order represents '1' with '6133'
-6132 6133 0
c Var 'aux1464' direct represents '1' with '6134'
6132 -6133 6134 0
-6134 6133 0
-6134 -6132 0
c Var 'aux1464' direct represents '2' with '-6133'
6132 6134 -6133 0
c Encoding variable: aux1465 with domain: int(0..2) (representing constraint ((x_00001_00006=1) + (x_00001_00005=1)))
c Both direct and order encoding.
c Var 'aux1465' order represents '0' with '6135'
c Var 'aux1465' direct represents '0' with '6135'
c Var 'aux1465' order represents '1' with '6136'
-6135 6136 0
c Var 'aux1465' direct represents '1' with '6137'
6135 -6136 6137 0
-6137 6136 0
-6137 -6135 0
c Var 'aux1465' direct represents '2' with '-6136'
6135 6137 -6136 0
c Encoding variable: aux1466 with domain: int(0..3) (representing constraint ((x_00003_00006=1) + aux1465))
c Both direct and order encoding.
c Var 'aux1466' order represents '0' with '6138'
c Var 'aux1466' direct represents '0' with '6138'
c Var 'aux1466' order represents '1' with '6139'
-6138 6139 0
c Var 'aux1466' direct represents '1' with '6140'
6138 -6139 6140 0
-6140 6139 0
-6140 -6138 0
c Var 'aux1466' order represents '2' with '6141'
-6139 6141 0
c Var 'aux1466' direct represents '2' with '6142'
6139 -6141 6142 0
-6142 6141 0
-6142 -6139 0
c Var 'aux1466' direct represents '3' with '-6141'
6138 6140 6142 -6141 0
c Encoding variable: aux1467 with domain: int(0..4) (representing constraint (aux1462 + aux1464))
c Both direct and order encoding.
c Var 'aux1467' order represents '0' with '6143'
c Var 'aux1467' direct represents '0' with '6143'
c Var 'aux1467' order represents '1' with '6144'
-6143 6144 0
c Var 'aux1467' direct represents '1' with '6145'
6143 -6144 6145 0
-6145 6144 0
-6145 -6143 0
c Var 'aux1467' order represents '2' with '6146'
-6144 6146 0
c Var 'aux1467' direct represents '2' with '6147'
6144 -6146 6147 0
-6147 6146 0
-6147 -6144 0
c Var 'aux1467' order represents '3' with '6148'
-6146 6148 0
c Var 'aux1467' direct represents '3' with '6149'
6146 -6148 6149 0
-6149 6148 0
-6149 -6146 0
c Var 'aux1467' direct represents '4' with '-6148'
6143 6145 6147 6149 -6148 0
c Encoding variable: aux1468 with domain: int(0..2) (representing constraint ((x_00003_00004=2) + (x_00002_00006=2)))
c Both direct and order encoding.
c Var 'aux1468' order represents '0' with '6150'
c Var 'aux1468' direct represents '0' with '6150'
c Var 'aux1468' order represents '1' with '6151'
-6150 6151 0
c Var 'aux1468' direct represents '1' with '6152'
6150 -6151 6152 0
-6152 6151 0
-6152 -6150 0
c Var 'aux1468' direct represents '2' with '-6151'
6150 6152 -6151 0
c Encoding variable: aux1469 with domain: int(0..2) (representing constraint ((x_00002_00005=2) + (x_00003_00005=2)))
c Both direct and order encoding.
c Var 'aux1469' order represents '0' with '6153'
c Var 'aux1469' direct represents '0' with '6153'
c Var 'aux1469' order represents '1' with '6154'
-6153 6154 0
c Var 'aux1469' direct represents '1' with '6155'
6153 -6154 6155 0
-6155 6154 0
-6155 -6153 0
c Var 'aux1469' direct represents '2' with '-6154'
6153 6155 -6154 0
c Encoding variable: aux1470 with domain: int(0..2) (representing constraint ((x_00002_00004=2) + (x_00001_00004=2)))
c Both direct and order encoding.
c Var 'aux1470' order represents '0' with '6156'
c Var 'aux1470' direct represents '0' with '6156'
c Var 'aux1470' order represents '1' with '6157'
-6156 6157 0
c Var 'aux1470' direct represents '1' with '6158'
6156 -6157 6158 0
-6158 6157 0
-6158 -6156 0
c Var 'aux1470' direct represents '2' with '-6157'
6156 6158 -6157 0
c Encoding variable: aux1471 with domain: int(0..2) (representing constraint ((x_00001_00006=2) + (x_00001_00005=2)))
c Both direct and order encoding.
c Var 'aux1471' order represents '0' with '6159'
c Var 'aux1471' direct represents '0' with '6159'
c Var 'aux1471' order represents '1' with '6160'
-6159 6160 0
c Var 'aux1471' direct represents '1' with '6161'
6159 -6160 6161 0
-6161 6160 0
-6161 -6159 0
c Var 'aux1471' direct represents '2' with '-6160'
6159 6161 -6160 0
c Encoding variable: aux1472 with domain: int(0..3) (representing constraint ((x_00003_00006=2) + aux1471))
c Both direct and order encoding.
c Var 'aux1472' order represents '0' with '6162'
c Var 'aux1472' direct represents '0' with '6162'
c Var 'aux1472' order represents '1' with '6163'
-6162 6163 0
c Var 'aux1472' direct represents '1' with '6164'
6162 -6163 6164 0
-6164 6163 0
-6164 -6162 0
c Var 'aux1472' order represents '2' with '6165'
-6163 6165 0
c Var 'aux1472' direct represents '2' with '6166'
6163 -6165 6166 0
-6166 6165 0
-6166 -6163 0
c Var 'aux1472' direct represents '3' with '-6165'
6162 6164 6166 -6165 0
c Encoding variable: aux1473 with domain: int(0..4) (representing constraint (aux1468 + aux1470))
c Both direct and order encoding.
c Var 'aux1473' order represents '0' with '6167'
c Var 'aux1473' direct represents '0' with '6167'
c Var 'aux1473' order represents '1' with '6168'
-6167 6168 0
c Var 'aux1473' direct represents '1' with '6169'
6167 -6168 6169 0
-6169 6168 0
-6169 -6167 0
c Var 'aux1473' order represents '2' with '6170'
-6168 6170 0
c Var 'aux1473' direct represents '2' with '6171'
6168 -6170 6171 0
-6171 6170 0
-6171 -6168 0
c Var 'aux1473' order represents '3' with '6172'
-6170 6172 0
c Var 'aux1473' direct represents '3' with '6173'
6170 -6172 6173 0
-6173 6172 0
-6173 -6170 0
c Var 'aux1473' direct represents '4' with '-6172'
6167 6169 6171 6173 -6172 0
c Encoding variable: aux1474 with domain: int(0..2) (representing constraint ((x_00003_00004=3) + (x_00002_00006=3)))
c Both direct and order encoding.
c Var 'aux1474' order represents '0' with '6174'
c Var 'aux1474' direct represents '0' with '6174'
c Var 'aux1474' order represents '1' with '6175'
-6174 6175 0
c Var 'aux1474' direct represents '1' with '6176'
6174 -6175 6176 0
-6176 6175 0
-6176 -6174 0
c Var 'aux1474' direct represents '2' with '-6175'
6174 6176 -6175 0
c Encoding variable: aux1475 with domain: int(0..2) (representing constraint ((x_00002_00005=3) + (x_00003_00005=3)))
c Both direct and order encoding.
c Var 'aux1475' order represents '0' with '6177'
c Var 'aux1475' direct represents '0' with '6177'
c Var 'aux1475' order represents '1' with '6178'
-6177 6178 0
c Var 'aux1475' direct represents '1' with '6179'
6177 -6178 6179 0
-6179 6178 0
-6179 -6177 0
c Var 'aux1475' direct represents '2' with '-6178'
6177 6179 -6178 0
c Encoding variable: aux1476 with domain: int(0..2) (representing constraint ((x_00002_00004=3) + (x_00001_00004=3)))
c Both direct and order encoding.
c Var 'aux1476' order represents '0' with '6180'
c Var 'aux1476' direct represents '0' with '6180'
c Var 'aux1476' order represents '1' with '6181'
-6180 6181 0
c Var 'aux1476' direct represents '1' with '6182'
6180 -6181 6182 0
-6182 6181 0
-6182 -6180 0
c Var 'aux1476' direct represents '2' with '-6181'
6180 6182 -6181 0
c Encoding variable: aux1477 with domain: int(0..2) (representing constraint ((x_00001_00006=3) + (x_00001_00005=3)))
c Both direct and order encoding.
c Var 'aux1477' order represents '0' with '6183'
c Var 'aux1477' direct represents '0' with '6183'
c Var 'aux1477' order represents '1' with '6184'
-6183 6184 0
c Var 'aux1477' direct represents '1' with '6185'
6183 -6184 6185 0
-6185 6184 0
-6185 -6183 0
c Var 'aux1477' direct represents '2' with '-6184'
6183 6185 -6184 0
c Encoding variable: aux1478 with domain: int(0..3) (representing constraint ((x_00003_00006=3) + aux1477))
c Both direct and order encoding.
c Var 'aux1478' order represents '0' with '6186'
c Var 'aux1478' direct represents '0' with '6186'
c Var 'aux1478' order represents '1' with '6187'
-6186 6187 0
c Var 'aux1478' direct represents '1' with '6188'
6186 -6187 6188 0
-6188 6187 0
-6188 -6186 0
c Var 'aux1478' order represents '2' with '6189'
-6187 6189 0
c Var 'aux1478' direct represents '2' with '6190'
6187 -6189 6190 0
-6190 6189 0
-6190 -6187 0
c Var 'aux1478' direct represents '3' with '-6189'
6186 6188 6190 -6189 0
c Encoding variable: aux1479 with domain: int(0..4) (representing constraint (aux1474 + aux1476))
c Both direct and order encoding.
c Var 'aux1479' order represents '0' with '6191'
c Var 'aux1479' direct represents '0' with '6191'
c Var 'aux1479' order represents '1' with '6192'
-6191 6192 0
c Var 'aux1479' direct represents '1' with '6193'
6191 -6192 6193 0
-6193 6192 0
-6193 -6191 0
c Var 'aux1479' order represents '2' with '6194'
-6192 6194 0
c Var 'aux1479' direct represents '2' with '6195'
6192 -6194 6195 0
-6195 6194 0
-6195 -6192 0
c Var 'aux1479' order represents '3' with '6196'
-6194 6196 0
c Var 'aux1479' direct represents '3' with '6197'
6194 -6196 6197 0
-6197 6196 0
-6197 -6194 0
c Var 'aux1479' direct represents '4' with '-6196'
6191 6193 6195 6197 -6196 0
c Encoding variable: aux1480 with domain: int(0..2) (representing constraint ((x_00003_00004=4) + (x_00002_00006=4)))
c Both direct and order encoding.
c Var 'aux1480' order represents '0' with '6198'
c Var 'aux1480' direct represents '0' with '6198'
c Var 'aux1480' order represents '1' with '6199'
-6198 6199 0
c Var 'aux1480' direct represents '1' with '6200'
6198 -6199 6200 0
-6200 6199 0
-6200 -6198 0
c Var 'aux1480' direct represents '2' with '-6199'
6198 6200 -6199 0
c Encoding variable: aux1481 with domain: int(0..2) (representing constraint ((x_00002_00005=4) + (x_00003_00005=4)))
c Both direct and order encoding.
c Var 'aux1481' order represents '0' with '6201'
c Var 'aux1481' direct represents '0' with '6201'
c Var 'aux1481' order represents '1' with '6202'
-6201 6202 0
c Var 'aux1481' direct represents '1' with '6203'
6201 -6202 6203 0
-6203 6202 0
-6203 -6201 0
c Var 'aux1481' direct represents '2' with '-6202'
6201 6203 -6202 0
c Encoding variable: aux1482 with domain: int(0..2) (representing constraint ((x_00002_00004=4) + (x_00001_00004=4)))
c Both direct and order encoding.
c Var 'aux1482' order represents '0' with '6204'
c Var 'aux1482' direct represents '0' with '6204'
c Var 'aux1482' order represents '1' with '6205'
-6204 6205 0
c Var 'aux1482' direct represents '1' with '6206'
6204 -6205 6206 0
-6206 6205 0
-6206 -6204 0
c Var 'aux1482' direct represents '2' with '-6205'
6204 6206 -6205 0
c Encoding variable: aux1483 with domain: int(0..2) (representing constraint ((x_00001_00006=4) + (x_00001_00005=4)))
c Both direct and order encoding.
c Var 'aux1483' order represents '0' with '6207'
c Var 'aux1483' direct represents '0' with '6207'
c Var 'aux1483' order represents '1' with '6208'
-6207 6208 0
c Var 'aux1483' direct represents '1' with '6209'
6207 -6208 6209 0
-6209 6208 0
-6209 -6207 0
c Var 'aux1483' direct represents '2' with '-6208'
6207 6209 -6208 0
c Encoding variable: aux1484 with domain: int(0..3) (representing constraint ((x_00003_00006=4) + aux1483))
c Both direct and order encoding.
c Var 'aux1484' order represents '0' with '6210'
c Var 'aux1484' direct represents '0' with '6210'
c Var 'aux1484' order represents '1' with '6211'
-6210 6211 0
c Var 'aux1484' direct represents '1' with '6212'
6210 -6211 6212 0
-6212 6211 0
-6212 -6210 0
c Var 'aux1484' order represents '2' with '6213'
-6211 6213 0
c Var 'aux1484' direct represents '2' with '6214'
6211 -6213 6214 0
-6214 6213 0
-6214 -6211 0
c Var 'aux1484' direct represents '3' with '-6213'
6210 6212 6214 -6213 0
c Encoding variable: aux1485 with domain: int(0..4) (representing constraint (aux1480 + aux1482))
c Both direct and order encoding.
c Var 'aux1485' order represents '0' with '6215'
c Var 'aux1485' direct represents '0' with '6215'
c Var 'aux1485' order represents '1' with '6216'
-6215 6216 0
c Var 'aux1485' direct represents '1' with '6217'
6215 -6216 6217 0
-6217 6216 0
-6217 -6215 0
c Var 'aux1485' order represents '2' with '6218'
-6216 6218 0
c Var 'aux1485' direct represents '2' with '6219'
6216 -6218 6219 0
-6219 6218 0
-6219 -6216 0
c Var 'aux1485' order represents '3' with '6220'
-6218 6220 0
c Var 'aux1485' direct represents '3' with '6221'
6218 -6220 6221 0
-6221 6220 0
-6221 -6218 0
c Var 'aux1485' direct represents '4' with '-6220'
6215 6217 6219 6221 -6220 0
c Encoding variable: aux1486 with domain: int(0..2) (representing constraint ((x_00003_00004=5) + (x_00002_00006=5)))
c Both direct and order encoding.
c Var 'aux1486' order represents '0' with '6222'
c Var 'aux1486' direct represents '0' with '6222'
c Var 'aux1486' order represents '1' with '6223'
-6222 6223 0
c Var 'aux1486' direct represents '1' with '6224'
6222 -6223 6224 0
-6224 6223 0
-6224 -6222 0
c Var 'aux1486' direct represents '2' with '-6223'
6222 6224 -6223 0
c Encoding variable: aux1487 with domain: int(0..2) (representing constraint ((x_00002_00005=5) + (x_00003_00005=5)))
c Both direct and order encoding.
c Var 'aux1487' order represents '0' with '6225'
c Var 'aux1487' direct represents '0' with '6225'
c Var 'aux1487' order represents '1' with '6226'
-6225 6226 0
c Var 'aux1487' direct represents '1' with '6227'
6225 -6226 6227 0
-6227 6226 0
-6227 -6225 0
c Var 'aux1487' direct represents '2' with '-6226'
6225 6227 -6226 0
c Encoding variable: aux1488 with domain: int(0..2) (representing constraint ((x_00002_00004=5) + (x_00001_00004=5)))
c Both direct and order encoding.
c Var 'aux1488' order represents '0' with '6228'
c Var 'aux1488' direct represents '0' with '6228'
c Var 'aux1488' order represents '1' with '6229'
-6228 6229 0
c Var 'aux1488' direct represents '1' with '6230'
6228 -6229 6230 0
-6230 6229 0
-6230 -6228 0
c Var 'aux1488' direct represents '2' with '-6229'
6228 6230 -6229 0
c Encoding variable: aux1489 with domain: int(0..2) (representing constraint ((x_00001_00006=5) + (x_00001_00005=5)))
c Both direct and order encoding.
c Var 'aux1489' order represents '0' with '6231'
c Var 'aux1489' direct represents '0' with '6231'
c Var 'aux1489' order represents '1' with '6232'
-6231 6232 0
c Var 'aux1489' direct represents '1' with '6233'
6231 -6232 6233 0
-6233 6232 0
-6233 -6231 0
c Var 'aux1489' direct represents '2' with '-6232'
6231 6233 -6232 0
c Encoding variable: aux1490 with domain: int(0..3) (representing constraint ((x_00003_00006=5) + aux1489))
c Both direct and order encoding.
c Var 'aux1490' order represents '0' with '6234'
c Var 'aux1490' direct represents '0' with '6234'
c Var 'aux1490' order represents '1' with '6235'
-6234 6235 0
c Var 'aux1490' direct represents '1' with '6236'
6234 -6235 6236 0
-6236 6235 0
-6236 -6234 0
c Var 'aux1490' order represents '2' with '6237'
-6235 6237 0
c Var 'aux1490' direct represents '2' with '6238'
6235 -6237 6238 0
-6238 6237 0
-6238 -6235 0
c Var 'aux1490' direct represents '3' with '-6237'
6234 6236 6238 -6237 0
c Encoding variable: aux1491 with domain: int(0..4) (representing constraint (aux1486 + aux1488))
c Both direct and order encoding.
c Var 'aux1491' order represents '0' with '6239'
c Var 'aux1491' direct represents '0' with '6239'
c Var 'aux1491' order represents '1' with '6240'
-6239 6240 0
c Var 'aux1491' direct represents '1' with '6241'
6239 -6240 6241 0
-6241 6240 0
-6241 -6239 0
c Var 'aux1491' order represents '2' with '6242'
-6240 6242 0
c Var 'aux1491' direct represents '2' with '6243'
6240 -6242 6243 0
-6243 6242 0
-6243 -6240 0
c Var 'aux1491' order represents '3' with '6244'
-6242 6244 0
c Var 'aux1491' direct represents '3' with '6245'
6242 -6244 6245 0
-6245 6244 0
-6245 -6242 0
c Var 'aux1491' direct represents '4' with '-6244'
6239 6241 6243 6245 -6244 0
c Encoding variable: aux1492 with domain: int(0..2) (representing constraint ((x_00003_00004=6) + (x_00002_00006=6)))
c Both direct and order encoding.
c Var 'aux1492' order represents '0' with '6246'
c Var 'aux1492' direct represents '0' with '6246'
c Var 'aux1492' order represents '1' with '6247'
-6246 6247 0
c Var 'aux1492' direct represents '1' with '6248'
6246 -6247 6248 0
-6248 6247 0
-6248 -6246 0
c Var 'aux1492' direct represents '2' with '-6247'
6246 6248 -6247 0
c Encoding variable: aux1493 with domain: int(0..2) (representing constraint ((x_00002_00005=6) + (x_00003_00005=6)))
c Both direct and order encoding.
c Var 'aux1493' order represents '0' with '6249'
c Var 'aux1493' direct represents '0' with '6249'
c Var 'aux1493' order represents '1' with '6250'
-6249 6250 0
c Var 'aux1493' direct represents '1' with '6251'
6249 -6250 6251 0
-6251 6250 0
-6251 -6249 0
c Var 'aux1493' direct represents '2' with '-6250'
6249 6251 -6250 0
c Encoding variable: aux1494 with domain: int(0..2) (representing constraint ((x_00002_00004=6) + (x_00001_00004=6)))
c Both direct and order encoding.
c Var 'aux1494' order represents '0' with '6252'
c Var 'aux1494' direct represents '0' with '6252'
c Var 'aux1494' order represents '1' with '6253'
-6252 6253 0
c Var 'aux1494' direct represents '1' with '6254'
6252 -6253 6254 0
-6254 6253 0
-6254 -6252 0
c Var 'aux1494' direct represents '2' with '-6253'
6252 6254 -6253 0
c Encoding variable: aux1495 with domain: int(0..2) (representing constraint ((x_00001_00006=6) + (x_00001_00005=6)))
c Both direct and order encoding.
c Var 'aux1495' order represents '0' with '6255'
c Var 'aux1495' direct represents '0' with '6255'
c Var 'aux1495' order represents '1' with '6256'
-6255 6256 0
c Var 'aux1495' direct represents '1' with '6257'
6255 -6256 6257 0
-6257 6256 0
-6257 -6255 0
c Var 'aux1495' direct represents '2' with '-6256'
6255 6257 -6256 0
c Encoding variable: aux1496 with domain: int(0..3) (representing constraint ((x_00003_00006=6) + aux1495))
c Both direct and order encoding.
c Var 'aux1496' order represents '0' with '6258'
c Var 'aux1496' direct represents '0' with '6258'
c Var 'aux1496' order represents '1' with '6259'
-6258 6259 0
c Var 'aux1496' direct represents '1' with '6260'
6258 -6259 6260 0
-6260 6259 0
-6260 -6258 0
c Var 'aux1496' order represents '2' with '6261'
-6259 6261 0
c Var 'aux1496' direct represents '2' with '6262'
6259 -6261 6262 0
-6262 6261 0
-6262 -6259 0
c Var 'aux1496' direct represents '3' with '-6261'
6258 6260 6262 -6261 0
c Encoding variable: aux1497 with domain: int(0..4) (representing constraint (aux1492 + aux1494))
c Both direct and order encoding.
c Var 'aux1497' order represents '0' with '6263'
c Var 'aux1497' direct represents '0' with '6263'
c Var 'aux1497' order represents '1' with '6264'
-6263 6264 0
c Var 'aux1497' direct represents '1' with '6265'
6263 -6264 6265 0
-6265 6264 0
-6265 -6263 0
c Var 'aux1497' order represents '2' with '6266'
-6264 6266 0
c Var 'aux1497' direct represents '2' with '6267'
6264 -6266 6267 0
-6267 6266 0
-6267 -6264 0
c Var 'aux1497' order represents '3' with '6268'
-6266 6268 0
c Var 'aux1497' direct represents '3' with '6269'
6266 -6268 6269 0
-6269 6268 0
-6269 -6266 0
c Var 'aux1497' direct represents '4' with '-6268'
6263 6265 6267 6269 -6268 0
c Encoding variable: aux1498 with domain: int(0..2) (representing constraint ((x_00003_00004=7) + (x_00002_00006=7)))
c Both direct and order encoding.
c Var 'aux1498' order represents '0' with '6270'
c Var 'aux1498' direct represents '0' with '6270'
c Var 'aux1498' order represents '1' with '6271'
-6270 6271 0
c Var 'aux1498' direct represents '1' with '6272'
6270 -6271 6272 0
-6272 6271 0
-6272 -6270 0
c Var 'aux1498' direct represents '2' with '-6271'
6270 6272 -6271 0
c Encoding variable: aux1499 with domain: int(0..2) (representing constraint ((x_00002_00005=7) + (x_00003_00005=7)))
c Both direct and order encoding.
c Var 'aux1499' order represents '0' with '6273'
c Var 'aux1499' direct represents '0' with '6273'
c Var 'aux1499' order represents '1' with '6274'
-6273 6274 0
c Var 'aux1499' direct represents '1' with '6275'
6273 -6274 6275 0
-6275 6274 0
-6275 -6273 0
c Var 'aux1499' direct represents '2' with '-6274'
6273 6275 -6274 0
c Encoding variable: aux1500 with domain: int(0..2) (representing constraint ((x_00002_00004=7) + (x_00001_00004=7)))
c Both direct and order encoding.
c Var 'aux1500' order represents '0' with '6276'
c Var 'aux1500' direct represents '0' with '6276'
c Var 'aux1500' order represents '1' with '6277'
-6276 6277 0
c Var 'aux1500' direct represents '1' with '6278'
6276 -6277 6278 0
-6278 6277 0
-6278 -6276 0
c Var 'aux1500' direct represents '2' with '-6277'
6276 6278 -6277 0
c Encoding variable: aux1501 with domain: int(0..2) (representing constraint ((x_00001_00006=7) + (x_00001_00005=7)))
c Both direct and order encoding.
c Var 'aux1501' order represents '0' with '6279'
c Var 'aux1501' direct represents '0' with '6279'
c Var 'aux1501' order represents '1' with '6280'
-6279 6280 0
c Var 'aux1501' direct represents '1' with '6281'
6279 -6280 6281 0
-6281 6280 0
-6281 -6279 0
c Var 'aux1501' direct represents '2' with '-6280'
6279 6281 -6280 0
c Encoding variable: aux1502 with domain: int(0..3) (representing constraint ((x_00003_00006=7) + aux1501))
c Both direct and order encoding.
c Var 'aux1502' order represents '0' with '6282'
c Var 'aux1502' direct represents '0' with '6282'
c Var 'aux1502' order represents '1' with '6283'
-6282 6283 0
c Var 'aux1502' direct represents '1' with '6284'
6282 -6283 6284 0
-6284 6283 0
-6284 -6282 0
c Var 'aux1502' order represents '2' with '6285'
-6283 6285 0
c Var 'aux1502' direct represents '2' with '6286'
6283 -6285 6286 0
-6286 6285 0
-6286 -6283 0
c Var 'aux1502' direct represents '3' with '-6285'
6282 6284 6286 -6285 0
c Encoding variable: aux1503 with domain: int(0..4) (representing constraint (aux1498 + aux1500))
c Both direct and order encoding.
c Var 'aux1503' order represents '0' with '6287'
c Var 'aux1503' direct represents '0' with '6287'
c Var 'aux1503' order represents '1' with '6288'
-6287 6288 0
c Var 'aux1503' direct represents '1' with '6289'
6287 -6288 6289 0
-6289 6288 0
-6289 -6287 0
c Var 'aux1503' order represents '2' with '6290'
-6288 6290 0
c Var 'aux1503' direct represents '2' with '6291'
6288 -6290 6291 0
-6291 6290 0
-6291 -6288 0
c Var 'aux1503' order represents '3' with '6292'
-6290 6292 0
c Var 'aux1503' direct represents '3' with '6293'
6290 -6292 6293 0
-6293 6292 0
-6293 -6290 0
c Var 'aux1503' direct represents '4' with '-6292'
6287 6289 6291 6293 -6292 0
c Encoding variable: aux1504 with domain: int(0..2) (representing constraint ((x_00003_00004=8) + (x_00002_00006=8)))
c Both direct and order encoding.
c Var 'aux1504' order represents '0' with '6294'
c Var 'aux1504' direct represents '0' with '6294'
c Var 'aux1504' order represents '1' with '6295'
-6294 6295 0
c Var 'aux1504' direct represents '1' with '6296'
6294 -6295 6296 0
-6296 6295 0
-6296 -6294 0
c Var 'aux1504' direct represents '2' with '-6295'
6294 6296 -6295 0
c Encoding variable: aux1505 with domain: int(0..2) (representing constraint ((x_00002_00005=8) + (x_00003_00005=8)))
c Both direct and order encoding.
c Var 'aux1505' order represents '0' with '6297'
c Var 'aux1505' direct represents '0' with '6297'
c Var 'aux1505' order represents '1' with '6298'
-6297 6298 0
c Var 'aux1505' direct represents '1' with '6299'
6297 -6298 6299 0
-6299 6298 0
-6299 -6297 0
c Var 'aux1505' direct represents '2' with '-6298'
6297 6299 -6298 0
c Encoding variable: aux1506 with domain: int(0..2) (representing constraint ((x_00002_00004=8) + (x_00001_00004=8)))
c Both direct and order encoding.
c Var 'aux1506' order represents '0' with '6300'
c Var 'aux1506' direct represents '0' with '6300'
c Var 'aux1506' order represents '1' with '6301'
-6300 6301 0
c Var 'aux1506' direct represents '1' with '6302'
6300 -6301 6302 0
-6302 6301 0
-6302 -6300 0
c Var 'aux1506' direct represents '2' with '-6301'
6300 6302 -6301 0
c Encoding variable: aux1507 with domain: int(0..2) (representing constraint ((x_00001_00006=8) + (x_00001_00005=8)))
c Both direct and order encoding.
c Var 'aux1507' order represents '0' with '6303'
c Var 'aux1507' direct represents '0' with '6303'
c Var 'aux1507' order represents '1' with '6304'
-6303 6304 0
c Var 'aux1507' direct represents '1' with '6305'
6303 -6304 6305 0
-6305 6304 0
-6305 -6303 0
c Var 'aux1507' direct represents '2' with '-6304'
6303 6305 -6304 0
c Encoding variable: aux1508 with domain: int(0..3) (representing constraint ((x_00003_00006=8) + aux1507))
c Both direct and order encoding.
c Var 'aux1508' order represents '0' with '6306'
c Var 'aux1508' direct represents '0' with '6306'
c Var 'aux1508' order represents '1' with '6307'
-6306 6307 0
c Var 'aux1508' direct represents '1' with '6308'
6306 -6307 6308 0
-6308 6307 0
-6308 -6306 0
c Var 'aux1508' order represents '2' with '6309'
-6307 6309 0
c Var 'aux1508' direct represents '2' with '6310'
6307 -6309 6310 0
-6310 6309 0
-6310 -6307 0
c Var 'aux1508' direct represents '3' with '-6309'
6306 6308 6310 -6309 0
c Encoding variable: aux1509 with domain: int(0..4) (representing constraint (aux1504 + aux1506))
c Both direct and order encoding.
c Var 'aux1509' order represents '0' with '6311'
c Var 'aux1509' direct represents '0' with '6311'
c Var 'aux1509' order represents '1' with '6312'
-6311 6312 0
c Var 'aux1509' direct represents '1' with '6313'
6311 -6312 6313 0
-6313 6312 0
-6313 -6311 0
c Var 'aux1509' order represents '2' with '6314'
-6312 6314 0
c Var 'aux1509' direct represents '2' with '6315'
6312 -6314 6315 0
-6315 6314 0
-6315 -6312 0
c Var 'aux1509' order represents '3' with '6316'
-6314 6316 0
c Var 'aux1509' direct represents '3' with '6317'
6314 -6316 6317 0
-6317 6316 0
-6317 -6314 0
c Var 'aux1509' direct represents '4' with '-6316'
6311 6313 6315 6317 -6316 0
c Encoding variable: aux1510 with domain: int(0..2) (representing constraint ((x_00003_00004=9) + (x_00002_00006=9)))
c Both direct and order encoding.
c Var 'aux1510' order represents '0' with '6318'
c Var 'aux1510' direct represents '0' with '6318'
c Var 'aux1510' order represents '1' with '6319'
-6318 6319 0
c Var 'aux1510' direct represents '1' with '6320'
6318 -6319 6320 0
-6320 6319 0
-6320 -6318 0
c Var 'aux1510' direct represents '2' with '-6319'
6318 6320 -6319 0
c Encoding variable: aux1511 with domain: int(0..2) (representing constraint ((x_00002_00005=9) + (x_00003_00005=9)))
c Both direct and order encoding.
c Var 'aux1511' order represents '0' with '6321'
c Var 'aux1511' direct represents '0' with '6321'
c Var 'aux1511' order represents '1' with '6322'
-6321 6322 0
c Var 'aux1511' direct represents '1' with '6323'
6321 -6322 6323 0
-6323 6322 0
-6323 -6321 0
c Var 'aux1511' direct represents '2' with '-6322'
6321 6323 -6322 0
c Encoding variable: aux1512 with domain: int(0..2) (representing constraint ((x_00002_00004=9) + (x_00001_00004=9)))
c Both direct and order encoding.
c Var 'aux1512' order represents '0' with '6324'
c Var 'aux1512' direct represents '0' with '6324'
c Var 'aux1512' order represents '1' with '6325'
-6324 6325 0
c Var 'aux1512' direct represents '1' with '6326'
6324 -6325 6326 0
-6326 6325 0
-6326 -6324 0
c Var 'aux1512' direct represents '2' with '-6325'
6324 6326 -6325 0
c Encoding variable: aux1513 with domain: int(0..2) (representing constraint ((x_00001_00006=9) + (x_00001_00005=9)))
c Both direct and order encoding.
c Var 'aux1513' order represents '0' with '6327'
c Var 'aux1513' direct represents '0' with '6327'
c Var 'aux1513' order represents '1' with '6328'
-6327 6328 0
c Var 'aux1513' direct represents '1' with '6329'
6327 -6328 6329 0
-6329 6328 0
-6329 -6327 0
c Var 'aux1513' direct represents '2' with '-6328'
6327 6329 -6328 0
c Encoding variable: aux1514 with domain: int(0..3) (representing constraint ((x_00003_00006=9) + aux1513))
c Both direct and order encoding.
c Var 'aux1514' order represents '0' with '6330'
c Var 'aux1514' direct represents '0' with '6330'
c Var 'aux1514' order represents '1' with '6331'
-6330 6331 0
c Var 'aux1514' direct represents '1' with '6332'
6330 -6331 6332 0
-6332 6331 0
-6332 -6330 0
c Var 'aux1514' order represents '2' with '6333'
-6331 6333 0
c Var 'aux1514' direct represents '2' with '6334'
6331 -6333 6334 0
-6334 6333 0
-6334 -6331 0
c Var 'aux1514' direct represents '3' with '-6333'
6330 6332 6334 -6333 0
c Encoding variable: aux1515 with domain: int(0..4) (representing constraint (aux1510 + aux1512))
c Both direct and order encoding.
c Var 'aux1515' order represents '0' with '6335'
c Var 'aux1515' direct represents '0' with '6335'
c Var 'aux1515' order represents '1' with '6336'
-6335 6336 0
c Var 'aux1515' direct represents '1' with '6337'
6335 -6336 6337 0
-6337 6336 0
-6337 -6335 0
c Var 'aux1515' order represents '2' with '6338'
-6336 6338 0
c Var 'aux1515' direct represents '2' with '6339'
6336 -6338 6339 0
-6339 6338 0
-6339 -6336 0
c Var 'aux1515' order represents '3' with '6340'
-6338 6340 0
c Var 'aux1515' direct represents '3' with '6341'
6338 -6340 6341 0
-6341 6340 0
-6341 -6338 0
c Var 'aux1515' direct represents '4' with '-6340'
6335 6337 6339 6341 -6340 0
c Encoding variable: aux1516 with domain: int(0..2) (representing constraint ((x_00003_00007=1) + (x_00002_00009=1)))
c Both direct and order encoding.
c Var 'aux1516' order represents '0' with '6342'
c Var 'aux1516' direct represents '0' with '6342'
c Var 'aux1516' order represents '1' with '6343'
-6342 6343 0
c Var 'aux1516' direct represents '1' with '6344'
6342 -6343 6344 0
-6344 6343 0
-6344 -6342 0
c Var 'aux1516' direct represents '2' with '-6343'
6342 6344 -6343 0
c Encoding variable: aux1517 with domain: int(0..2) (representing constraint ((x_00002_00008=1) + (x_00003_00008=1)))
c Both direct and order encoding.
c Var 'aux1517' order represents '0' with '6345'
c Var 'aux1517' direct represents '0' with '6345'
c Var 'aux1517' order represents '1' with '6346'
-6345 6346 0
c Var 'aux1517' direct represents '1' with '6347'
6345 -6346 6347 0
-6347 6346 0
-6347 -6345 0
c Var 'aux1517' direct represents '2' with '-6346'
6345 6347 -6346 0
c Encoding variable: aux1518 with domain: int(0..2) (representing constraint ((x_00002_00007=1) + (x_00001_00007=1)))
c Both direct and order encoding.
c Var 'aux1518' order represents '0' with '6348'
c Var 'aux1518' direct represents '0' with '6348'
c Var 'aux1518' order represents '1' with '6349'
-6348 6349 0
c Var 'aux1518' direct represents '1' with '6350'
6348 -6349 6350 0
-6350 6349 0
-6350 -6348 0
c Var 'aux1518' direct represents '2' with '-6349'
6348 6350 -6349 0
c Encoding variable: aux1519 with domain: int(0..2) (representing constraint ((x_00001_00009=1) + (x_00001_00008=1)))
c Both direct and order encoding.
c Var 'aux1519' order represents '0' with '6351'
c Var 'aux1519' direct represents '0' with '6351'
c Var 'aux1519' order represents '1' with '6352'
-6351 6352 0
c Var 'aux1519' direct represents '1' with '6353'
6351 -6352 6353 0
-6353 6352 0
-6353 -6351 0
c Var 'aux1519' direct represents '2' with '-6352'
6351 6353 -6352 0
c Encoding variable: aux1520 with domain: int(0..3) (representing constraint ((x_00003_00009=1) + aux1519))
c Both direct and order encoding.
c Var 'aux1520' order represents '0' with '6354'
c Var 'aux1520' direct represents '0' with '6354'
c Var 'aux1520' order represents '1' with '6355'
-6354 6355 0
c Var 'aux1520' direct represents '1' with '6356'
6354 -6355 6356 0
-6356 6355 0
-6356 -6354 0
c Var 'aux1520' order represents '2' with '6357'
-6355 6357 0
c Var 'aux1520' direct represents '2' with '6358'
6355 -6357 6358 0
-6358 6357 0
-6358 -6355 0
c Var 'aux1520' direct represents '3' with '-6357'
6354 6356 6358 -6357 0
c Encoding variable: aux1521 with domain: int(0..4) (representing constraint (aux1516 + aux1518))
c Both direct and order encoding.
c Var 'aux1521' order represents '0' with '6359'
c Var 'aux1521' direct represents '0' with '6359'
c Var 'aux1521' order represents '1' with '6360'
-6359 6360 0
c Var 'aux1521' direct represents '1' with '6361'
6359 -6360 6361 0
-6361 6360 0
-6361 -6359 0
c Var 'aux1521' order represents '2' with '6362'
-6360 6362 0
c Var 'aux1521' direct represents '2' with '6363'
6360 -6362 6363 0
-6363 6362 0
-6363 -6360 0
c Var 'aux1521' order represents '3' with '6364'
-6362 6364 0
c Var 'aux1521' direct represents '3' with '6365'
6362 -6364 6365 0
-6365 6364 0
-6365 -6362 0
c Var 'aux1521' direct represents '4' with '-6364'
6359 6361 6363 6365 -6364 0
c Encoding variable: aux1522 with domain: int(0..2) (representing constraint ((x_00003_00007=2) + (x_00002_00009=2)))
c Both direct and order encoding.
c Var 'aux1522' order represents '0' with '6366'
c Var 'aux1522' direct represents '0' with '6366'
c Var 'aux1522' order represents '1' with '6367'
-6366 6367 0
c Var 'aux1522' direct represents '1' with '6368'
6366 -6367 6368 0
-6368 6367 0
-6368 -6366 0
c Var 'aux1522' direct represents '2' with '-6367'
6366 6368 -6367 0
c Encoding variable: aux1523 with domain: int(0..2) (representing constraint ((x_00002_00008=2) + (x_00003_00008=2)))
c Both direct and order encoding.
c Var 'aux1523' order represents '0' with '6369'
c Var 'aux1523' direct represents '0' with '6369'
c Var 'aux1523' order represents '1' with '6370'
-6369 6370 0
c Var 'aux1523' direct represents '1' with '6371'
6369 -6370 6371 0
-6371 6370 0
-6371 -6369 0
c Var 'aux1523' direct represents '2' with '-6370'
6369 6371 -6370 0
c Encoding variable: aux1524 with domain: int(0..2) (representing constraint ((x_00002_00007=2) + (x_00001_00007=2)))
c Both direct and order encoding.
c Var 'aux1524' order represents '0' with '6372'
c Var 'aux1524' direct represents '0' with '6372'
c Var 'aux1524' order represents '1' with '6373'
-6372 6373 0
c Var 'aux1524' direct represents '1' with '6374'
6372 -6373 6374 0
-6374 6373 0
-6374 -6372 0
c Var 'aux1524' direct represents '2' with '-6373'
6372 6374 -6373 0
c Encoding variable: aux1525 with domain: int(0..2) (representing constraint ((x_00001_00009=2) + (x_00001_00008=2)))
c Both direct and order encoding.
c Var 'aux1525' order represents '0' with '6375'
c Var 'aux1525' direct represents '0' with '6375'
c Var 'aux1525' order represents '1' with '6376'
-6375 6376 0
c Var 'aux1525' direct represents '1' with '6377'
6375 -6376 6377 0
-6377 6376 0
-6377 -6375 0
c Var 'aux1525' direct represents '2' with '-6376'
6375 6377 -6376 0
c Encoding variable: aux1526 with domain: int(0..3) (representing constraint ((x_00003_00009=2) + aux1525))
c Both direct and order encoding.
c Var 'aux1526' order represents '0' with '6378'
c Var 'aux1526' direct represents '0' with '6378'
c Var 'aux1526' order represents '1' with '6379'
-6378 6379 0
c Var 'aux1526' direct represents '1' with '6380'
6378 -6379 6380 0
-6380 6379 0
-6380 -6378 0
c Var 'aux1526' order represents '2' with '6381'
-6379 6381 0
c Var 'aux1526' direct represents '2' with '6382'
6379 -6381 6382 0
-6382 6381 0
-6382 -6379 0
c Var 'aux1526' direct represents '3' with '-6381'
6378 6380 6382 -6381 0
c Encoding variable: aux1527 with domain: int(0..4) (representing constraint (aux1522 + aux1524))
c Both direct and order encoding.
c Var 'aux1527' order represents '0' with '6383'
c Var 'aux1527' direct represents '0' with '6383'
c Var 'aux1527' order represents '1' with '6384'
-6383 6384 0
c Var 'aux1527' direct represents '1' with '6385'
6383 -6384 6385 0
-6385 6384 0
-6385 -6383 0
c Var 'aux1527' order represents '2' with '6386'
-6384 6386 0
c Var 'aux1527' direct represents '2' with '6387'
6384 -6386 6387 0
-6387 6386 0
-6387 -6384 0
c Var 'aux1527' order represents '3' with '6388'
-6386 6388 0
c Var 'aux1527' direct represents '3' with '6389'
6386 -6388 6389 0
-6389 6388 0
-6389 -6386 0
c Var 'aux1527' direct represents '4' with '-6388'
6383 6385 6387 6389 -6388 0
c Encoding variable: aux1528 with domain: int(0..2) (representing constraint ((x_00003_00007=3) + (x_00002_00009=3)))
c Both direct and order encoding.
c Var 'aux1528' order represents '0' with '6390'
c Var 'aux1528' direct represents '0' with '6390'
c Var 'aux1528' order represents '1' with '6391'
-6390 6391 0
c Var 'aux1528' direct represents '1' with '6392'
6390 -6391 6392 0
-6392 6391 0
-6392 -6390 0
c Var 'aux1528' direct represents '2' with '-6391'
6390 6392 -6391 0
c Encoding variable: aux1529 with domain: int(0..2) (representing constraint ((x_00002_00008=3) + (x_00003_00008=3)))
c Both direct and order encoding.
c Var 'aux1529' order represents '0' with '6393'
c Var 'aux1529' direct represents '0' with '6393'
c Var 'aux1529' order represents '1' with '6394'
-6393 6394 0
c Var 'aux1529' direct represents '1' with '6395'
6393 -6394 6395 0
-6395 6394 0
-6395 -6393 0
c Var 'aux1529' direct represents '2' with '-6394'
6393 6395 -6394 0
c Encoding variable: aux1530 with domain: int(0..2) (representing constraint ((x_00002_00007=3) + (x_00001_00007=3)))
c Both direct and order encoding.
c Var 'aux1530' order represents '0' with '6396'
c Var 'aux1530' direct represents '0' with '6396'
c Var 'aux1530' order represents '1' with '6397'
-6396 6397 0
c Var 'aux1530' direct represents '1' with '6398'
6396 -6397 6398 0
-6398 6397 0
-6398 -6396 0
c Var 'aux1530' direct represents '2' with '-6397'
6396 6398 -6397 0
c Encoding variable: aux1531 with domain: int(0..2) (representing constraint ((x_00001_00009=3) + (x_00001_00008=3)))
c Both direct and order encoding.
c Var 'aux1531' order represents '0' with '6399'
c Var 'aux1531' direct represents '0' with '6399'
c Var 'aux1531' order represents '1' with '6400'
-6399 6400 0
c Var 'aux1531' direct represents '1' with '6401'
6399 -6400 6401 0
-6401 6400 0
-6401 -6399 0
c Var 'aux1531' direct represents '2' with '-6400'
6399 6401 -6400 0
c Encoding variable: aux1532 with domain: int(0..3) (representing constraint ((x_00003_00009=3) + aux1531))
c Both direct and order encoding.
c Var 'aux1532' order represents '0' with '6402'
c Var 'aux1532' direct represents '0' with '6402'
c Var 'aux1532' order represents '1' with '6403'
-6402 6403 0
c Var 'aux1532' direct represents '1' with '6404'
6402 -6403 6404 0
-6404 6403 0
-6404 -6402 0
c Var 'aux1532' order represents '2' with '6405'
-6403 6405 0
c Var 'aux1532' direct represents '2' with '6406'
6403 -6405 6406 0
-6406 6405 0
-6406 -6403 0
c Var 'aux1532' direct represents '3' with '-6405'
6402 6404 6406 -6405 0
c Encoding variable: aux1533 with domain: int(0..4) (representing constraint (aux1528 + aux1530))
c Both direct and order encoding.
c Var 'aux1533' order represents '0' with '6407'
c Var 'aux1533' direct represents '0' with '6407'
c Var 'aux1533' order represents '1' with '6408'
-6407 6408 0
c Var 'aux1533' direct represents '1' with '6409'
6407 -6408 6409 0
-6409 6408 0
-6409 -6407 0
c Var 'aux1533' order represents '2' with '6410'
-6408 6410 0
c Var 'aux1533' direct represents '2' with '6411'
6408 -6410 6411 0
-6411 6410 0
-6411 -6408 0
c Var 'aux1533' order represents '3' with '6412'
-6410 6412 0
c Var 'aux1533' direct represents '3' with '6413'
6410 -6412 6413 0
-6413 6412 0
-6413 -6410 0
c Var 'aux1533' direct represents '4' with '-6412'
6407 6409 6411 6413 -6412 0
c Encoding variable: aux1534 with domain: int(0..2) (representing constraint ((x_00003_00007=4) + (x_00002_00009=4)))
c Both direct and order encoding.
c Var 'aux1534' order represents '0' with '6414'
c Var 'aux1534' direct represents '0' with '6414'
c Var 'aux1534' order represents '1' with '6415'
-6414 6415 0
c Var 'aux1534' direct represents '1' with '6416'
6414 -6415 6416 0
-6416 6415 0
-6416 -6414 0
c Var 'aux1534' direct represents '2' with '-6415'
6414 6416 -6415 0
c Encoding variable: aux1535 with domain: int(0..2) (representing constraint ((x_00002_00008=4) + (x_00003_00008=4)))
c Both direct and order encoding.
c Var 'aux1535' order represents '0' with '6417'
c Var 'aux1535' direct represents '0' with '6417'
c Var 'aux1535' order represents '1' with '6418'
-6417 6418 0
c Var 'aux1535' direct represents '1' with '6419'
6417 -6418 6419 0
-6419 6418 0
-6419 -6417 0
c Var 'aux1535' direct represents '2' with '-6418'
6417 6419 -6418 0
c Encoding variable: aux1536 with domain: int(0..2) (representing constraint ((x_00002_00007=4) + (x_00001_00007=4)))
c Both direct and order encoding.
c Var 'aux1536' order represents '0' with '6420'
c Var 'aux1536' direct represents '0' with '6420'
c Var 'aux1536' order represents '1' with '6421'
-6420 6421 0
c Var 'aux1536' direct represents '1' with '6422'
6420 -6421 6422 0
-6422 6421 0
-6422 -6420 0
c Var 'aux1536' direct represents '2' with '-6421'
6420 6422 -6421 0
c Encoding variable: aux1537 with domain: int(0..2) (representing constraint ((x_00001_00009=4) + (x_00001_00008=4)))
c Both direct and order encoding.
c Var 'aux1537' order represents '0' with '6423'
c Var 'aux1537' direct represents '0' with '6423'
c Var 'aux1537' order represents '1' with '6424'
-6423 6424 0
c Var 'aux1537' direct represents '1' with '6425'
6423 -6424 6425 0
-6425 6424 0
-6425 -6423 0
c Var 'aux1537' direct represents '2' with '-6424'
6423 6425 -6424 0
c Encoding variable: aux1538 with domain: int(0..3) (representing constraint ((x_00003_00009=4) + aux1537))
c Both direct and order encoding.
c Var 'aux1538' order represents '0' with '6426'
c Var 'aux1538' direct represents '0' with '6426'
c Var 'aux1538' order represents '1' with '6427'
-6426 6427 0
c Var 'aux1538' direct represents '1' with '6428'
6426 -6427 6428 0
-6428 6427 0
-6428 -6426 0
c Var 'aux1538' order represents '2' with '6429'
-6427 6429 0
c Var 'aux1538' direct represents '2' with '6430'
6427 -6429 6430 0
-6430 6429 0
-6430 -6427 0
c Var 'aux1538' direct represents '3' with '-6429'
6426 6428 6430 -6429 0
c Encoding variable: aux1539 with domain: int(0..4) (representing constraint (aux1534 + aux1536))
c Both direct and order encoding.
c Var 'aux1539' order represents '0' with '6431'
c Var 'aux1539' direct represents '0' with '6431'
c Var 'aux1539' order represents '1' with '6432'
-6431 6432 0
c Var 'aux1539' direct represents '1' with '6433'
6431 -6432 6433 0
-6433 6432 0
-6433 -6431 0
c Var 'aux1539' order represents '2' with '6434'
-6432 6434 0
c Var 'aux1539' direct represents '2' with '6435'
6432 -6434 6435 0
-6435 6434 0
-6435 -6432 0
c Var 'aux1539' order represents '3' with '6436'
-6434 6436 0
c Var 'aux1539' direct represents '3' with '6437'
6434 -6436 6437 0
-6437 6436 0
-6437 -6434 0
c Var 'aux1539' direct represents '4' with '-6436'
6431 6433 6435 6437 -6436 0
c Encoding variable: aux1540 with domain: int(0..2) (representing constraint ((x_00003_00007=5) + (x_00002_00009=5)))
c Both direct and order encoding.
c Var 'aux1540' order represents '0' with '6438'
c Var 'aux1540' direct represents '0' with '6438'
c Var 'aux1540' order represents '1' with '6439'
-6438 6439 0
c Var 'aux1540' direct represents '1' with '6440'
6438 -6439 6440 0
-6440 6439 0
-6440 -6438 0
c Var 'aux1540' direct represents '2' with '-6439'
6438 6440 -6439 0
c Encoding variable: aux1541 with domain: int(0..2) (representing constraint ((x_00002_00008=5) + (x_00003_00008=5)))
c Both direct and order encoding.
c Var 'aux1541' order represents '0' with '6441'
c Var 'aux1541' direct represents '0' with '6441'
c Var 'aux1541' order represents '1' with '6442'
-6441 6442 0
c Var 'aux1541' direct represents '1' with '6443'
6441 -6442 6443 0
-6443 6442 0
-6443 -6441 0
c Var 'aux1541' direct represents '2' with '-6442'
6441 6443 -6442 0
c Encoding variable: aux1542 with domain: int(0..2) (representing constraint ((x_00002_00007=5) + (x_00001_00007=5)))
c Both direct and order encoding.
c Var 'aux1542' order represents '0' with '6444'
c Var 'aux1542' direct represents '0' with '6444'
c Var 'aux1542' order represents '1' with '6445'
-6444 6445 0
c Var 'aux1542' direct represents '1' with '6446'
6444 -6445 6446 0
-6446 6445 0
-6446 -6444 0
c Var 'aux1542' direct represents '2' with '-6445'
6444 6446 -6445 0
c Encoding variable: aux1543 with domain: int(0..2) (representing constraint ((x_00001_00009=5) + (x_00001_00008=5)))
c Both direct and order encoding.
c Var 'aux1543' order represents '0' with '6447'
c Var 'aux1543' direct represents '0' with '6447'
c Var 'aux1543' order represents '1' with '6448'
-6447 6448 0
c Var 'aux1543' direct represents '1' with '6449'
6447 -6448 6449 0
-6449 6448 0
-6449 -6447 0
c Var 'aux1543' direct represents '2' with '-6448'
6447 6449 -6448 0
c Encoding variable: aux1544 with domain: int(0..3) (representing constraint ((x_00003_00009=5) + aux1543))
c Both direct and order encoding.
c Var 'aux1544' order represents '0' with '6450'
c Var 'aux1544' direct represents '0' with '6450'
c Var 'aux1544' order represents '1' with '6451'
-6450 6451 0
c Var 'aux1544' direct represents '1' with '6452'
6450 -6451 6452 0
-6452 6451 0
-6452 -6450 0
c Var 'aux1544' order represents '2' with '6453'
-6451 6453 0
c Var 'aux1544' direct represents '2' with '6454'
6451 -6453 6454 0
-6454 6453 0
-6454 -6451 0
c Var 'aux1544' direct represents '3' with '-6453'
6450 6452 6454 -6453 0
c Encoding variable: aux1545 with domain: int(0..4) (representing constraint (aux1540 + aux1542))
c Both direct and order encoding.
c Var 'aux1545' order represents '0' with '6455'
c Var 'aux1545' direct represents '0' with '6455'
c Var 'aux1545' order represents '1' with '6456'
-6455 6456 0
c Var 'aux1545' direct represents '1' with '6457'
6455 -6456 6457 0
-6457 6456 0
-6457 -6455 0
c Var 'aux1545' order represents '2' with '6458'
-6456 6458 0
c Var 'aux1545' direct represents '2' with '6459'
6456 -6458 6459 0
-6459 6458 0
-6459 -6456 0
c Var 'aux1545' order represents '3' with '6460'
-6458 6460 0
c Var 'aux1545' direct represents '3' with '6461'
6458 -6460 6461 0
-6461 6460 0
-6461 -6458 0
c Var 'aux1545' direct represents '4' with '-6460'
6455 6457 6459 6461 -6460 0
c Encoding variable: aux1546 with domain: int(0..2) (representing constraint ((x_00003_00007=6) + (x_00002_00009=6)))
c Both direct and order encoding.
c Var 'aux1546' order represents '0' with '6462'
c Var 'aux1546' direct represents '0' with '6462'
c Var 'aux1546' order represents '1' with '6463'
-6462 6463 0
c Var 'aux1546' direct represents '1' with '6464'
6462 -6463 6464 0
-6464 6463 0
-6464 -6462 0
c Var 'aux1546' direct represents '2' with '-6463'
6462 6464 -6463 0
c Encoding variable: aux1547 with domain: int(0..2) (representing constraint ((x_00002_00008=6) + (x_00003_00008=6)))
c Both direct and order encoding.
c Var 'aux1547' order represents '0' with '6465'
c Var 'aux1547' direct represents '0' with '6465'
c Var 'aux1547' order represents '1' with '6466'
-6465 6466 0
c Var 'aux1547' direct represents '1' with '6467'
6465 -6466 6467 0
-6467 6466 0
-6467 -6465 0
c Var 'aux1547' direct represents '2' with '-6466'
6465 6467 -6466 0
c Encoding variable: aux1548 with domain: int(0..2) (representing constraint ((x_00002_00007=6) + (x_00001_00007=6)))
c Both direct and order encoding.
c Var 'aux1548' order represents '0' with '6468'
c Var 'aux1548' direct represents '0' with '6468'
c Var 'aux1548' order represents '1' with '6469'
-6468 6469 0
c Var 'aux1548' direct represents '1' with '6470'
6468 -6469 6470 0
-6470 6469 0
-6470 -6468 0
c Var 'aux1548' direct represents '2' with '-6469'
6468 6470 -6469 0
c Encoding variable: aux1549 with domain: int(0..2) (representing constraint ((x_00001_00009=6) + (x_00001_00008=6)))
c Both direct and order encoding.
c Var 'aux1549' order represents '0' with '6471'
c Var 'aux1549' direct represents '0' with '6471'
c Var 'aux1549' order represents '1' with '6472'
-6471 6472 0
c Var 'aux1549' direct represents '1' with '6473'
6471 -6472 6473 0
-6473 6472 0
-6473 -6471 0
c Var 'aux1549' direct represents '2' with '-6472'
6471 6473 -6472 0
c Encoding variable: aux1550 with domain: int(0..3) (representing constraint ((x_00003_00009=6) + aux1549))
c Both direct and order encoding.
c Var 'aux1550' order represents '0' with '6474'
c Var 'aux1550' direct represents '0' with '6474'
c Var 'aux1550' order represents '1' with '6475'
-6474 6475 0
c Var 'aux1550' direct represents '1' with '6476'
6474 -6475 6476 0
-6476 6475 0
-6476 -6474 0
c Var 'aux1550' order represents '2' with '6477'
-6475 6477 0
c Var 'aux1550' direct represents '2' with '6478'
6475 -6477 6478 0
-6478 6477 0
-6478 -6475 0
c Var 'aux1550' direct represents '3' with '-6477'
6474 6476 6478 -6477 0
c Encoding variable: aux1551 with domain: int(0..4) (representing constraint (aux1546 + aux1548))
c Both direct and order encoding.
c Var 'aux1551' order represents '0' with '6479'
c Var 'aux1551' direct represents '0' with '6479'
c Var 'aux1551' order represents '1' with '6480'
-6479 6480 0
c Var 'aux1551' direct represents '1' with '6481'
6479 -6480 6481 0
-6481 6480 0
-6481 -6479 0
c Var 'aux1551' order represents '2' with '6482'
-6480 6482 0
c Var 'aux1551' direct represents '2' with '6483'
6480 -6482 6483 0
-6483 6482 0
-6483 -6480 0
c Var 'aux1551' order represents '3' with '6484'
-6482 6484 0
c Var 'aux1551' direct represents '3' with '6485'
6482 -6484 6485 0
-6485 6484 0
-6485 -6482 0
c Var 'aux1551' direct represents '4' with '-6484'
6479 6481 6483 6485 -6484 0
c Encoding variable: aux1552 with domain: int(0..2) (representing constraint ((x_00003_00007=7) + (x_00002_00009=7)))
c Both direct and order encoding.
c Var 'aux1552' order represents '0' with '6486'
c Var 'aux1552' direct represents '0' with '6486'
c Var 'aux1552' order represents '1' with '6487'
-6486 6487 0
c Var 'aux1552' direct represents '1' with '6488'
6486 -6487 6488 0
-6488 6487 0
-6488 -6486 0
c Var 'aux1552' direct represents '2' with '-6487'
6486 6488 -6487 0
c Encoding variable: aux1553 with domain: int(0..2) (representing constraint ((x_00002_00008=7) + (x_00003_00008=7)))
c Both direct and order encoding.
c Var 'aux1553' order represents '0' with '6489'
c Var 'aux1553' direct represents '0' with '6489'
c Var 'aux1553' order represents '1' with '6490'
-6489 6490 0
c Var 'aux1553' direct represents '1' with '6491'
6489 -6490 6491 0
-6491 6490 0
-6491 -6489 0
c Var 'aux1553' direct represents '2' with '-6490'
6489 6491 -6490 0
c Encoding variable: aux1554 with domain: int(0..2) (representing constraint ((x_00002_00007=7) + (x_00001_00007=7)))
c Both direct and order encoding.
c Var 'aux1554' order represents '0' with '6492'
c Var 'aux1554' direct represents '0' with '6492'
c Var 'aux1554' order represents '1' with '6493'
-6492 6493 0
c Var 'aux1554' direct represents '1' with '6494'
6492 -6493 6494 0
-6494 6493 0
-6494 -6492 0
c Var 'aux1554' direct represents '2' with '-6493'
6492 6494 -6493 0
c Encoding variable: aux1555 with domain: int(0..2) (representing constraint ((x_00001_00009=7) + (x_00001_00008=7)))
c Both direct and order encoding.
c Var 'aux1555' order represents '0' with '6495'
c Var 'aux1555' direct represents '0' with '6495'
c Var 'aux1555' order represents '1' with '6496'
-6495 6496 0
c Var 'aux1555' direct represents '1' with '6497'
6495 -6496 6497 0
-6497 6496 0
-6497 -6495 0
c Var 'aux1555' direct represents '2' with '-6496'
6495 6497 -6496 0
c Encoding variable: aux1556 with domain: int(0..3) (representing constraint ((x_00003_00009=7) + aux1555))
c Both direct and order encoding.
c Var 'aux1556' order represents '0' with '6498'
c Var 'aux1556' direct represents '0' with '6498'
c Var 'aux1556' order represents '1' with '6499'
-6498 6499 0
c Var 'aux1556' direct represents '1' with '6500'
6498 -6499 6500 0
-6500 6499 0
-6500 -6498 0
c Var 'aux1556' order represents '2' with '6501'
-6499 6501 0
c Var 'aux1556' direct represents '2' with '6502'
6499 -6501 6502 0
-6502 6501 0
-6502 -6499 0
c Var 'aux1556' direct represents '3' with '-6501'
6498 6500 6502 -6501 0
c Encoding variable: aux1557 with domain: int(0..4) (representing constraint (aux1552 + aux1554))
c Both direct and order encoding.
c Var 'aux1557' order represents '0' with '6503'
c Var 'aux1557' direct represents '0' with '6503'
c Var 'aux1557' order represents '1' with '6504'
-6503 6504 0
c Var 'aux1557' direct represents '1' with '6505'
6503 -6504 6505 0
-6505 6504 0
-6505 -6503 0
c Var 'aux1557' order represents '2' with '6506'
-6504 6506 0
c Var 'aux1557' direct represents '2' with '6507'
6504 -6506 6507 0
-6507 6506 0
-6507 -6504 0
c Var 'aux1557' order represents '3' with '6508'
-6506 6508 0
c Var 'aux1557' direct represents '3' with '6509'
6506 -6508 6509 0
-6509 6508 0
-6509 -6506 0
c Var 'aux1557' direct represents '4' with '-6508'
6503 6505 6507 6509 -6508 0
c Encoding variable: aux1558 with domain: int(0..2) (representing constraint ((x_00003_00007=8) + (x_00002_00009=8)))
c Both direct and order encoding.
c Var 'aux1558' order represents '0' with '6510'
c Var 'aux1558' direct represents '0' with '6510'
c Var 'aux1558' order represents '1' with '6511'
-6510 6511 0
c Var 'aux1558' direct represents '1' with '6512'
6510 -6511 6512 0
-6512 6511 0
-6512 -6510 0
c Var 'aux1558' direct represents '2' with '-6511'
6510 6512 -6511 0
c Encoding variable: aux1559 with domain: int(0..2) (representing constraint ((x_00002_00008=8) + (x_00003_00008=8)))
c Both direct and order encoding.
c Var 'aux1559' order represents '0' with '6513'
c Var 'aux1559' direct represents '0' with '6513'
c Var 'aux1559' order represents '1' with '6514'
-6513 6514 0
c Var 'aux1559' direct represents '1' with '6515'
6513 -6514 6515 0
-6515 6514 0
-6515 -6513 0
c Var 'aux1559' direct represents '2' with '-6514'
6513 6515 -6514 0
c Encoding variable: aux1560 with domain: int(0..2) (representing constraint ((x_00002_00007=8) + (x_00001_00007=8)))
c Both direct and order encoding.
c Var 'aux1560' order represents '0' with '6516'
c Var 'aux1560' direct represents '0' with '6516'
c Var 'aux1560' order represents '1' with '6517'
-6516 6517 0
c Var 'aux1560' direct represents '1' with '6518'
6516 -6517 6518 0
-6518 6517 0
-6518 -6516 0
c Var 'aux1560' direct represents '2' with '-6517'
6516 6518 -6517 0
c Encoding variable: aux1561 with domain: int(0..2) (representing constraint ((x_00001_00009=8) + (x_00001_00008=8)))
c Both direct and order encoding.
c Var 'aux1561' order represents '0' with '6519'
c Var 'aux1561' direct represents '0' with '6519'
c Var 'aux1561' order represents '1' with '6520'
-6519 6520 0
c Var 'aux1561' direct represents '1' with '6521'
6519 -6520 6521 0
-6521 6520 0
-6521 -6519 0
c Var 'aux1561' direct represents '2' with '-6520'
6519 6521 -6520 0
c Encoding variable: aux1562 with domain: int(0..3) (representing constraint ((x_00003_00009=8) + aux1561))
c Both direct and order encoding.
c Var 'aux1562' order represents '0' with '6522'
c Var 'aux1562' direct represents '0' with '6522'
c Var 'aux1562' order represents '1' with '6523'
-6522 6523 0
c Var 'aux1562' direct represents '1' with '6524'
6522 -6523 6524 0
-6524 6523 0
-6524 -6522 0
c Var 'aux1562' order represents '2' with '6525'
-6523 6525 0
c Var 'aux1562' direct represents '2' with '6526'
6523 -6525 6526 0
-6526 6525 0
-6526 -6523 0
c Var 'aux1562' direct represents '3' with '-6525'
6522 6524 6526 -6525 0
c Encoding variable: aux1563 with domain: int(0..4) (representing constraint (aux1558 + aux1560))
c Both direct and order encoding.
c Var 'aux1563' order represents '0' with '6527'
c Var 'aux1563' direct represents '0' with '6527'
c Var 'aux1563' order represents '1' with '6528'
-6527 6528 0
c Var 'aux1563' direct represents '1' with '6529'
6527 -6528 6529 0
-6529 6528 0
-6529 -6527 0
c Var 'aux1563' order represents '2' with '6530'
-6528 6530 0
c Var 'aux1563' direct represents '2' with '6531'
6528 -6530 6531 0
-6531 6530 0
-6531 -6528 0
c Var 'aux1563' order represents '3' with '6532'
-6530 6532 0
c Var 'aux1563' direct represents '3' with '6533'
6530 -6532 6533 0
-6533 6532 0
-6533 -6530 0
c Var 'aux1563' direct represents '4' with '-6532'
6527 6529 6531 6533 -6532 0
c Encoding variable: aux1564 with domain: int(0..2) (representing constraint ((x_00003_00007=9) + (x_00002_00009=9)))
c Both direct and order encoding.
c Var 'aux1564' order represents '0' with '6534'
c Var 'aux1564' direct represents '0' with '6534'
c Var 'aux1564' order represents '1' with '6535'
-6534 6535 0
c Var 'aux1564' direct represents '1' with '6536'
6534 -6535 6536 0
-6536 6535 0
-6536 -6534 0
c Var 'aux1564' direct represents '2' with '-6535'
6534 6536 -6535 0
c Encoding variable: aux1565 with domain: int(0..2) (representing constraint ((x_00002_00008=9) + (x_00003_00008=9)))
c Both direct and order encoding.
c Var 'aux1565' order represents '0' with '6537'
c Var 'aux1565' direct represents '0' with '6537'
c Var 'aux1565' order represents '1' with '6538'
-6537 6538 0
c Var 'aux1565' direct represents '1' with '6539'
6537 -6538 6539 0
-6539 6538 0
-6539 -6537 0
c Var 'aux1565' direct represents '2' with '-6538'
6537 6539 -6538 0
c Encoding variable: aux1566 with domain: int(0..2) (representing constraint ((x_00002_00007=9) + (x_00001_00007=9)))
c Both direct and order encoding.
c Var 'aux1566' order represents '0' with '6540'
c Var 'aux1566' direct represents '0' with '6540'
c Var 'aux1566' order represents '1' with '6541'
-6540 6541 0
c Var 'aux1566' direct represents '1' with '6542'
6540 -6541 6542 0
-6542 6541 0
-6542 -6540 0
c Var 'aux1566' direct represents '2' with '-6541'
6540 6542 -6541 0
c Encoding variable: aux1567 with domain: int(0..2) (representing constraint ((x_00001_00009=9) + (x_00001_00008=9)))
c Both direct and order encoding.
c Var 'aux1567' order represents '0' with '6543'
c Var 'aux1567' direct represents '0' with '6543'
c Var 'aux1567' order represents '1' with '6544'
-6543 6544 0
c Var 'aux1567' direct represents '1' with '6545'
6543 -6544 6545 0
-6545 6544 0
-6545 -6543 0
c Var 'aux1567' direct represents '2' with '-6544'
6543 6545 -6544 0
c Encoding variable: aux1568 with domain: int(0..3) (representing constraint ((x_00003_00009=9) + aux1567))
c Both direct and order encoding.
c Var 'aux1568' order represents '0' with '6546'
c Var 'aux1568' direct represents '0' with '6546'
c Var 'aux1568' order represents '1' with '6547'
-6546 6547 0
c Var 'aux1568' direct represents '1' with '6548'
6546 -6547 6548 0
-6548 6547 0
-6548 -6546 0
c Var 'aux1568' order represents '2' with '6549'
-6547 6549 0
c Var 'aux1568' direct represents '2' with '6550'
6547 -6549 6550 0
-6550 6549 0
-6550 -6547 0
c Var 'aux1568' direct represents '3' with '-6549'
6546 6548 6550 -6549 0
c Encoding variable: aux1569 with domain: int(0..4) (representing constraint (aux1564 + aux1566))
c Both direct and order encoding.
c Var 'aux1569' order represents '0' with '6551'
c Var 'aux1569' direct represents '0' with '6551'
c Var 'aux1569' order represents '1' with '6552'
-6551 6552 0
c Var 'aux1569' direct represents '1' with '6553'
6551 -6552 6553 0
-6553 6552 0
-6553 -6551 0
c Var 'aux1569' order represents '2' with '6554'
-6552 6554 0
c Var 'aux1569' direct represents '2' with '6555'
6552 -6554 6555 0
-6555 6554 0
-6555 -6552 0
c Var 'aux1569' order represents '3' with '6556'
-6554 6556 0
c Var 'aux1569' direct represents '3' with '6557'
6554 -6556 6557 0
-6557 6556 0
-6557 -6554 0
c Var 'aux1569' direct represents '4' with '-6556'
6551 6553 6555 6557 -6556 0
c Encoding variable: aux1570 with domain: int(0..2) (representing constraint ((x_00006_00001=1) + (x_00005_00003=1)))
c Both direct and order encoding.
c Var 'aux1570' order represents '0' with '6558'
c Var 'aux1570' direct represents '0' with '6558'
c Var 'aux1570' order represents '1' with '6559'
-6558 6559 0
c Var 'aux1570' direct represents '1' with '6560'
6558 -6559 6560 0
-6560 6559 0
-6560 -6558 0
c Var 'aux1570' direct represents '2' with '-6559'
6558 6560 -6559 0
c Encoding variable: aux1571 with domain: int(0..2) (representing constraint ((x_00005_00002=1) + (x_00006_00002=1)))
c Both direct and order encoding.
c Var 'aux1571' order represents '0' with '6561'
c Var 'aux1571' direct represents '0' with '6561'
c Var 'aux1571' order represents '1' with '6562'
-6561 6562 0
c Var 'aux1571' direct represents '1' with '6563'
6561 -6562 6563 0
-6563 6562 0
-6563 -6561 0
c Var 'aux1571' direct represents '2' with '-6562'
6561 6563 -6562 0
c Encoding variable: aux1572 with domain: int(0..2) (representing constraint ((x_00005_00001=1) + (x_00004_00001=1)))
c Both direct and order encoding.
c Var 'aux1572' order represents '0' with '6564'
c Var 'aux1572' direct represents '0' with '6564'
c Var 'aux1572' order represents '1' with '6565'
-6564 6565 0
c Var 'aux1572' direct represents '1' with '6566'
6564 -6565 6566 0
-6566 6565 0
-6566 -6564 0
c Var 'aux1572' direct represents '2' with '-6565'
6564 6566 -6565 0
c Encoding variable: aux1573 with domain: int(0..2) (representing constraint ((x_00004_00003=1) + (x_00004_00002=1)))
c Both direct and order encoding.
c Var 'aux1573' order represents '0' with '6567'
c Var 'aux1573' direct represents '0' with '6567'
c Var 'aux1573' order represents '1' with '6568'
-6567 6568 0
c Var 'aux1573' direct represents '1' with '6569'
6567 -6568 6569 0
-6569 6568 0
-6569 -6567 0
c Var 'aux1573' direct represents '2' with '-6568'
6567 6569 -6568 0
c Encoding variable: aux1574 with domain: int(0..3) (representing constraint ((x_00006_00003=1) + aux1573))
c Both direct and order encoding.
c Var 'aux1574' order represents '0' with '6570'
c Var 'aux1574' direct represents '0' with '6570'
c Var 'aux1574' order represents '1' with '6571'
-6570 6571 0
c Var 'aux1574' direct represents '1' with '6572'
6570 -6571 6572 0
-6572 6571 0
-6572 -6570 0
c Var 'aux1574' order represents '2' with '6573'
-6571 6573 0
c Var 'aux1574' direct represents '2' with '6574'
6571 -6573 6574 0
-6574 6573 0
-6574 -6571 0
c Var 'aux1574' direct represents '3' with '-6573'
6570 6572 6574 -6573 0
c Encoding variable: aux1575 with domain: int(0..4) (representing constraint (aux1570 + aux1572))
c Both direct and order encoding.
c Var 'aux1575' order represents '0' with '6575'
c Var 'aux1575' direct represents '0' with '6575'
c Var 'aux1575' order represents '1' with '6576'
-6575 6576 0
c Var 'aux1575' direct represents '1' with '6577'
6575 -6576 6577 0
-6577 6576 0
-6577 -6575 0
c Var 'aux1575' order represents '2' with '6578'
-6576 6578 0
c Var 'aux1575' direct represents '2' with '6579'
6576 -6578 6579 0
-6579 6578 0
-6579 -6576 0
c Var 'aux1575' order represents '3' with '6580'
-6578 6580 0
c Var 'aux1575' direct represents '3' with '6581'
6578 -6580 6581 0
-6581 6580 0
-6581 -6578 0
c Var 'aux1575' direct represents '4' with '-6580'
6575 6577 6579 6581 -6580 0
c Encoding variable: aux1576 with domain: int(0..2) (representing constraint ((x_00006_00001=2) + (x_00005_00003=2)))
c Both direct and order encoding.
c Var 'aux1576' order represents '0' with '6582'
c Var 'aux1576' direct represents '0' with '6582'
c Var 'aux1576' order represents '1' with '6583'
-6582 6583 0
c Var 'aux1576' direct represents '1' with '6584'
6582 -6583 6584 0
-6584 6583 0
-6584 -6582 0
c Var 'aux1576' direct represents '2' with '-6583'
6582 6584 -6583 0
c Encoding variable: aux1577 with domain: int(0..2) (representing constraint ((x_00005_00002=2) + (x_00006_00002=2)))
c Both direct and order encoding.
c Var 'aux1577' order represents '0' with '6585'
c Var 'aux1577' direct represents '0' with '6585'
c Var 'aux1577' order represents '1' with '6586'
-6585 6586 0
c Var 'aux1577' direct represents '1' with '6587'
6585 -6586 6587 0
-6587 6586 0
-6587 -6585 0
c Var 'aux1577' direct represents '2' with '-6586'
6585 6587 -6586 0
c Encoding variable: aux1578 with domain: int(0..2) (representing constraint ((x_00005_00001=2) + (x_00004_00001=2)))
c Both direct and order encoding.
c Var 'aux1578' order represents '0' with '6588'
c Var 'aux1578' direct represents '0' with '6588'
c Var 'aux1578' order represents '1' with '6589'
-6588 6589 0
c Var 'aux1578' direct represents '1' with '6590'
6588 -6589 6590 0
-6590 6589 0
-6590 -6588 0
c Var 'aux1578' direct represents '2' with '-6589'
6588 6590 -6589 0
c Encoding variable: aux1579 with domain: int(0..2) (representing constraint ((x_00004_00003=2) + (x_00004_00002=2)))
c Both direct and order encoding.
c Var 'aux1579' order represents '0' with '6591'
c Var 'aux1579' direct represents '0' with '6591'
c Var 'aux1579' order represents '1' with '6592'
-6591 6592 0
c Var 'aux1579' direct represents '1' with '6593'
6591 -6592 6593 0
-6593 6592 0
-6593 -6591 0
c Var 'aux1579' direct represents '2' with '-6592'
6591 6593 -6592 0
c Encoding variable: aux1580 with domain: int(0..3) (representing constraint ((x_00006_00003=2) + aux1579))
c Both direct and order encoding.
c Var 'aux1580' order represents '0' with '6594'
c Var 'aux1580' direct represents '0' with '6594'
c Var 'aux1580' order represents '1' with '6595'
-6594 6595 0
c Var 'aux1580' direct represents '1' with '6596'
6594 -6595 6596 0
-6596 6595 0
-6596 -6594 0
c Var 'aux1580' order represents '2' with '6597'
-6595 6597 0
c Var 'aux1580' direct represents '2' with '6598'
6595 -6597 6598 0
-6598 6597 0
-6598 -6595 0
c Var 'aux1580' direct represents '3' with '-6597'
6594 6596 6598 -6597 0
c Encoding variable: aux1581 with domain: int(0..4) (representing constraint (aux1576 + aux1578))
c Both direct and order encoding.
c Var 'aux1581' order represents '0' with '6599'
c Var 'aux1581' direct represents '0' with '6599'
c Var 'aux1581' order represents '1' with '6600'
-6599 6600 0
c Var 'aux1581' direct represents '1' with '6601'
6599 -6600 6601 0
-6601 6600 0
-6601 -6599 0
c Var 'aux1581' order represents '2' with '6602'
-6600 6602 0
c Var 'aux1581' direct represents '2' with '6603'
6600 -6602 6603 0
-6603 6602 0
-6603 -6600 0
c Var 'aux1581' order represents '3' with '6604'
-6602 6604 0
c Var 'aux1581' direct represents '3' with '6605'
6602 -6604 6605 0
-6605 6604 0
-6605 -6602 0
c Var 'aux1581' direct represents '4' with '-6604'
6599 6601 6603 6605 -6604 0
c Encoding variable: aux1582 with domain: int(0..2) (representing constraint ((x_00006_00001=3) + (x_00005_00003=3)))
c Both direct and order encoding.
c Var 'aux1582' order represents '0' with '6606'
c Var 'aux1582' direct represents '0' with '6606'
c Var 'aux1582' order represents '1' with '6607'
-6606 6607 0
c Var 'aux1582' direct represents '1' with '6608'
6606 -6607 6608 0
-6608 6607 0
-6608 -6606 0
c Var 'aux1582' direct represents '2' with '-6607'
6606 6608 -6607 0
c Encoding variable: aux1583 with domain: int(0..2) (representing constraint ((x_00005_00002=3) + (x_00006_00002=3)))
c Both direct and order encoding.
c Var 'aux1583' order represents '0' with '6609'
c Var 'aux1583' direct represents '0' with '6609'
c Var 'aux1583' order represents '1' with '6610'
-6609 6610 0
c Var 'aux1583' direct represents '1' with '6611'
6609 -6610 6611 0
-6611 6610 0
-6611 -6609 0
c Var 'aux1583' direct represents '2' with '-6610'
6609 6611 -6610 0
c Encoding variable: aux1584 with domain: int(0..2) (representing constraint ((x_00005_00001=3) + (x_00004_00001=3)))
c Both direct and order encoding.
c Var 'aux1584' order represents '0' with '6612'
c Var 'aux1584' direct represents '0' with '6612'
c Var 'aux1584' order represents '1' with '6613'
-6612 6613 0
c Var 'aux1584' direct represents '1' with '6614'
6612 -6613 6614 0
-6614 6613 0
-6614 -6612 0
c Var 'aux1584' direct represents '2' with '-6613'
6612 6614 -6613 0
c Encoding variable: aux1585 with domain: int(0..2) (representing constraint ((x_00004_00003=3) + (x_00004_00002=3)))
c Both direct and order encoding.
c Var 'aux1585' order represents '0' with '6615'
c Var 'aux1585' direct represents '0' with '6615'
c Var 'aux1585' order represents '1' with '6616'
-6615 6616 0
c Var 'aux1585' direct represents '1' with '6617'
6615 -6616 6617 0
-6617 6616 0
-6617 -6615 0
c Var 'aux1585' direct represents '2' with '-6616'
6615 6617 -6616 0
c Encoding variable: aux1586 with domain: int(0..3) (representing constraint ((x_00006_00003=3) + aux1585))
c Both direct and order encoding.
c Var 'aux1586' order represents '0' with '6618'
c Var 'aux1586' direct represents '0' with '6618'
c Var 'aux1586' order represents '1' with '6619'
-6618 6619 0
c Var 'aux1586' direct represents '1' with '6620'
6618 -6619 6620 0
-6620 6619 0
-6620 -6618 0
c Var 'aux1586' order represents '2' with '6621'
-6619 6621 0
c Var 'aux1586' direct represents '2' with '6622'
6619 -6621 6622 0
-6622 6621 0
-6622 -6619 0
c Var 'aux1586' direct represents '3' with '-6621'
6618 6620 6622 -6621 0
c Encoding variable: aux1587 with domain: int(0..4) (representing constraint (aux1582 + aux1584))
c Both direct and order encoding.
c Var 'aux1587' order represents '0' with '6623'
c Var 'aux1587' direct represents '0' with '6623'
c Var 'aux1587' order represents '1' with '6624'
-6623 6624 0
c Var 'aux1587' direct represents '1' with '6625'
6623 -6624 6625 0
-6625 6624 0
-6625 -6623 0
c Var 'aux1587' order represents '2' with '6626'
-6624 6626 0
c Var 'aux1587' direct represents '2' with '6627'
6624 -6626 6627 0
-6627 6626 0
-6627 -6624 0
c Var 'aux1587' order represents '3' with '6628'
-6626 6628 0
c Var 'aux1587' direct represents '3' with '6629'
6626 -6628 6629 0
-6629 6628 0
-6629 -6626 0
c Var 'aux1587' direct represents '4' with '-6628'
6623 6625 6627 6629 -6628 0
c Encoding variable: aux1588 with domain: int(0..2) (representing constraint ((x_00006_00001=4) + (x_00005_00003=4)))
c Both direct and order encoding.
c Var 'aux1588' order represents '0' with '6630'
c Var 'aux1588' direct represents '0' with '6630'
c Var 'aux1588' order represents '1' with '6631'
-6630 6631 0
c Var 'aux1588' direct represents '1' with '6632'
6630 -6631 6632 0
-6632 6631 0
-6632 -6630 0
c Var 'aux1588' direct represents '2' with '-6631'
6630 6632 -6631 0
c Encoding variable: aux1589 with domain: int(0..2) (representing constraint ((x_00005_00002=4) + (x_00006_00002=4)))
c Both direct and order encoding.
c Var 'aux1589' order represents '0' with '6633'
c Var 'aux1589' direct represents '0' with '6633'
c Var 'aux1589' order represents '1' with '6634'
-6633 6634 0
c Var 'aux1589' direct represents '1' with '6635'
6633 -6634 6635 0
-6635 6634 0
-6635 -6633 0
c Var 'aux1589' direct represents '2' with '-6634'
6633 6635 -6634 0
c Encoding variable: aux1590 with domain: int(0..2) (representing constraint ((x_00005_00001=4) + (x_00004_00001=4)))
c Both direct and order encoding.
c Var 'aux1590' order represents '0' with '6636'
c Var 'aux1590' direct represents '0' with '6636'
c Var 'aux1590' order represents '1' with '6637'
-6636 6637 0
c Var 'aux1590' direct represents '1' with '6638'
6636 -6637 6638 0
-6638 6637 0
-6638 -6636 0
c Var 'aux1590' direct represents '2' with '-6637'
6636 6638 -6637 0
c Encoding variable: aux1591 with domain: int(0..2) (representing constraint ((x_00004_00003=4) + (x_00004_00002=4)))
c Both direct and order encoding.
c Var 'aux1591' order represents '0' with '6639'
c Var 'aux1591' direct represents '0' with '6639'
c Var 'aux1591' order represents '1' with '6640'
-6639 6640 0
c Var 'aux1591' direct represents '1' with '6641'
6639 -6640 6641 0
-6641 6640 0
-6641 -6639 0
c Var 'aux1591' direct represents '2' with '-6640'
6639 6641 -6640 0
c Encoding variable: aux1592 with domain: int(0..3) (representing constraint ((x_00006_00003=4) + aux1591))
c Both direct and order encoding.
c Var 'aux1592' order represents '0' with '6642'
c Var 'aux1592' direct represents '0' with '6642'
c Var 'aux1592' order represents '1' with '6643'
-6642 6643 0
c Var 'aux1592' direct represents '1' with '6644'
6642 -6643 6644 0
-6644 6643 0
-6644 -6642 0
c Var 'aux1592' order represents '2' with '6645'
-6643 6645 0
c Var 'aux1592' direct represents '2' with '6646'
6643 -6645 6646 0
-6646 6645 0
-6646 -6643 0
c Var 'aux1592' direct represents '3' with '-6645'
6642 6644 6646 -6645 0
c Encoding variable: aux1593 with domain: int(0..4) (representing constraint (aux1588 + aux1590))
c Both direct and order encoding.
c Var 'aux1593' order represents '0' with '6647'
c Var 'aux1593' direct represents '0' with '6647'
c Var 'aux1593' order represents '1' with '6648'
-6647 6648 0
c Var 'aux1593' direct represents '1' with '6649'
6647 -6648 6649 0
-6649 6648 0
-6649 -6647 0
c Var 'aux1593' order represents '2' with '6650'
-6648 6650 0
c Var 'aux1593' direct represents '2' with '6651'
6648 -6650 6651 0
-6651 6650 0
-6651 -6648 0
c Var 'aux1593' order represents '3' with '6652'
-6650 6652 0
c Var 'aux1593' direct represents '3' with '6653'
6650 -6652 6653 0
-6653 6652 0
-6653 -6650 0
c Var 'aux1593' direct represents '4' with '-6652'
6647 6649 6651 6653 -6652 0
c Encoding variable: aux1594 with domain: int(0..2) (representing constraint ((x_00006_00001=5) + (x_00005_00003=5)))
c Both direct and order encoding.
c Var 'aux1594' order represents '0' with '6654'
c Var 'aux1594' direct represents '0' with '6654'
c Var 'aux1594' order represents '1' with '6655'
-6654 6655 0
c Var 'aux1594' direct represents '1' with '6656'
6654 -6655 6656 0
-6656 6655 0
-6656 -6654 0
c Var 'aux1594' direct represents '2' with '-6655'
6654 6656 -6655 0
c Encoding variable: aux1595 with domain: int(0..2) (representing constraint ((x_00005_00002=5) + (x_00006_00002=5)))
c Both direct and order encoding.
c Var 'aux1595' order represents '0' with '6657'
c Var 'aux1595' direct represents '0' with '6657'
c Var 'aux1595' order represents '1' with '6658'
-6657 6658 0
c Var 'aux1595' direct represents '1' with '6659'
6657 -6658 6659 0
-6659 6658 0
-6659 -6657 0
c Var 'aux1595' direct represents '2' with '-6658'
6657 6659 -6658 0
c Encoding variable: aux1596 with domain: int(0..2) (representing constraint ((x_00005_00001=5) + (x_00004_00001=5)))
c Both direct and order encoding.
c Var 'aux1596' order represents '0' with '6660'
c Var 'aux1596' direct represents '0' with '6660'
c Var 'aux1596' order represents '1' with '6661'
-6660 6661 0
c Var 'aux1596' direct represents '1' with '6662'
6660 -6661 6662 0
-6662 6661 0
-6662 -6660 0
c Var 'aux1596' direct represents '2' with '-6661'
6660 6662 -6661 0
c Encoding variable: aux1597 with domain: int(0..2) (representing constraint ((x_00004_00003=5) + (x_00004_00002=5)))
c Both direct and order encoding.
c Var 'aux1597' order represents '0' with '6663'
c Var 'aux1597' direct represents '0' with '6663'
c Var 'aux1597' order represents '1' with '6664'
-6663 6664 0
c Var 'aux1597' direct represents '1' with '6665'
6663 -6664 6665 0
-6665 6664 0
-6665 -6663 0
c Var 'aux1597' direct represents '2' with '-6664'
6663 6665 -6664 0
c Encoding variable: aux1598 with domain: int(0..3) (representing constraint ((x_00006_00003=5) + aux1597))
c Both direct and order encoding.
c Var 'aux1598' order represents '0' with '6666'
c Var 'aux1598' direct represents '0' with '6666'
c Var 'aux1598' order represents '1' with '6667'
-6666 6667 0
c Var 'aux1598' direct represents '1' with '6668'
6666 -6667 6668 0
-6668 6667 0
-6668 -6666 0
c Var 'aux1598' order represents '2' with '6669'
-6667 6669 0
c Var 'aux1598' direct represents '2' with '6670'
6667 -6669 6670 0
-6670 6669 0
-6670 -6667 0
c Var 'aux1598' direct represents '3' with '-6669'
6666 6668 6670 -6669 0
c Encoding variable: aux1599 with domain: int(0..4) (representing constraint (aux1594 + aux1596))
c Both direct and order encoding.
c Var 'aux1599' order represents '0' with '6671'
c Var 'aux1599' direct represents '0' with '6671'
c Var 'aux1599' order represents '1' with '6672'
-6671 6672 0
c Var 'aux1599' direct represents '1' with '6673'
6671 -6672 6673 0
-6673 6672 0
-6673 -6671 0
c Var 'aux1599' order represents '2' with '6674'
-6672 6674 0
c Var 'aux1599' direct represents '2' with '6675'
6672 -6674 6675 0
-6675 6674 0
-6675 -6672 0
c Var 'aux1599' order represents '3' with '6676'
-6674 6676 0
c Var 'aux1599' direct represents '3' with '6677'
6674 -6676 6677 0
-6677 6676 0
-6677 -6674 0
c Var 'aux1599' direct represents '4' with '-6676'
6671 6673 6675 6677 -6676 0
c Encoding variable: aux1600 with domain: int(0..2) (representing constraint ((x_00006_00001=6) + (x_00005_00003=6)))
c Both direct and order encoding.
c Var 'aux1600' order represents '0' with '6678'
c Var 'aux1600' direct represents '0' with '6678'
c Var 'aux1600' order represents '1' with '6679'
-6678 6679 0
c Var 'aux1600' direct represents '1' with '6680'
6678 -6679 6680 0
-6680 6679 0
-6680 -6678 0
c Var 'aux1600' direct represents '2' with '-6679'
6678 6680 -6679 0
c Encoding variable: aux1601 with domain: int(0..2) (representing constraint ((x_00005_00002=6) + (x_00006_00002=6)))
c Both direct and order encoding.
c Var 'aux1601' order represents '0' with '6681'
c Var 'aux1601' direct represents '0' with '6681'
c Var 'aux1601' order represents '1' with '6682'
-6681 6682 0
c Var 'aux1601' direct represents '1' with '6683'
6681 -6682 6683 0
-6683 6682 0
-6683 -6681 0
c Var 'aux1601' direct represents '2' with '-6682'
6681 6683 -6682 0
c Encoding variable: aux1602 with domain: int(0..2) (representing constraint ((x_00005_00001=6) + (x_00004_00001=6)))
c Both direct and order encoding.
c Var 'aux1602' order represents '0' with '6684'
c Var 'aux1602' direct represents '0' with '6684'
c Var 'aux1602' order represents '1' with '6685'
-6684 6685 0
c Var 'aux1602' direct represents '1' with '6686'
6684 -6685 6686 0
-6686 6685 0
-6686 -6684 0
c Var 'aux1602' direct represents '2' with '-6685'
6684 6686 -6685 0
c Encoding variable: aux1603 with domain: int(0..2) (representing constraint ((x_00004_00003=6) + (x_00004_00002=6)))
c Both direct and order encoding.
c Var 'aux1603' order represents '0' with '6687'
c Var 'aux1603' direct represents '0' with '6687'
c Var 'aux1603' order represents '1' with '6688'
-6687 6688 0
c Var 'aux1603' direct represents '1' with '6689'
6687 -6688 6689 0
-6689 6688 0
-6689 -6687 0
c Var 'aux1603' direct represents '2' with '-6688'
6687 6689 -6688 0
c Encoding variable: aux1604 with domain: int(0..3) (representing constraint ((x_00006_00003=6) + aux1603))
c Both direct and order encoding.
c Var 'aux1604' order represents '0' with '6690'
c Var 'aux1604' direct represents '0' with '6690'
c Var 'aux1604' order represents '1' with '6691'
-6690 6691 0
c Var 'aux1604' direct represents '1' with '6692'
6690 -6691 6692 0
-6692 6691 0
-6692 -6690 0
c Var 'aux1604' order represents '2' with '6693'
-6691 6693 0
c Var 'aux1604' direct represents '2' with '6694'
6691 -6693 6694 0
-6694 6693 0
-6694 -6691 0
c Var 'aux1604' direct represents '3' with '-6693'
6690 6692 6694 -6693 0
c Encoding variable: aux1605 with domain: int(0..4) (representing constraint (aux1600 + aux1602))
c Both direct and order encoding.
c Var 'aux1605' order represents '0' with '6695'
c Var 'aux1605' direct represents '0' with '6695'
c Var 'aux1605' order represents '1' with '6696'
-6695 6696 0
c Var 'aux1605' direct represents '1' with '6697'
6695 -6696 6697 0
-6697 6696 0
-6697 -6695 0
c Var 'aux1605' order represents '2' with '6698'
-6696 6698 0
c Var 'aux1605' direct represents '2' with '6699'
6696 -6698 6699 0
-6699 6698 0
-6699 -6696 0
c Var 'aux1605' order represents '3' with '6700'
-6698 6700 0
c Var 'aux1605' direct represents '3' with '6701'
6698 -6700 6701 0
-6701 6700 0
-6701 -6698 0
c Var 'aux1605' direct represents '4' with '-6700'
6695 6697 6699 6701 -6700 0
c Encoding variable: aux1606 with domain: int(0..2) (representing constraint ((x_00006_00001=7) + (x_00005_00003=7)))
c Both direct and order encoding.
c Var 'aux1606' order represents '0' with '6702'
c Var 'aux1606' direct represents '0' with '6702'
c Var 'aux1606' order represents '1' with '6703'
-6702 6703 0
c Var 'aux1606' direct represents '1' with '6704'
6702 -6703 6704 0
-6704 6703 0
-6704 -6702 0
c Var 'aux1606' direct represents '2' with '-6703'
6702 6704 -6703 0
c Encoding variable: aux1607 with domain: int(0..2) (representing constraint ((x_00005_00002=7) + (x_00006_00002=7)))
c Both direct and order encoding.
c Var 'aux1607' order represents '0' with '6705'
c Var 'aux1607' direct represents '0' with '6705'
c Var 'aux1607' order represents '1' with '6706'
-6705 6706 0
c Var 'aux1607' direct represents '1' with '6707'
6705 -6706 6707 0
-6707 6706 0
-6707 -6705 0
c Var 'aux1607' direct represents '2' with '-6706'
6705 6707 -6706 0
c Encoding variable: aux1608 with domain: int(0..2) (representing constraint ((x_00005_00001=7) + (x_00004_00001=7)))
c Both direct and order encoding.
c Var 'aux1608' order represents '0' with '6708'
c Var 'aux1608' direct represents '0' with '6708'
c Var 'aux1608' order represents '1' with '6709'
-6708 6709 0
c Var 'aux1608' direct represents '1' with '6710'
6708 -6709 6710 0
-6710 6709 0
-6710 -6708 0
c Var 'aux1608' direct represents '2' with '-6709'
6708 6710 -6709 0
c Encoding variable: aux1609 with domain: int(0..2) (representing constraint ((x_00004_00003=7) + (x_00004_00002=7)))
c Both direct and order encoding.
c Var 'aux1609' order represents '0' with '6711'
c Var 'aux1609' direct represents '0' with '6711'
c Var 'aux1609' order represents '1' with '6712'
-6711 6712 0
c Var 'aux1609' direct represents '1' with '6713'
6711 -6712 6713 0
-6713 6712 0
-6713 -6711 0
c Var 'aux1609' direct represents '2' with '-6712'
6711 6713 -6712 0
c Encoding variable: aux1610 with domain: int(0..3) (representing constraint ((x_00006_00003=7) + aux1609))
c Both direct and order encoding.
c Var 'aux1610' order represents '0' with '6714'
c Var 'aux1610' direct represents '0' with '6714'
c Var 'aux1610' order represents '1' with '6715'
-6714 6715 0
c Var 'aux1610' direct represents '1' with '6716'
6714 -6715 6716 0
-6716 6715 0
-6716 -6714 0
c Var 'aux1610' order represents '2' with '6717'
-6715 6717 0
c Var 'aux1610' direct represents '2' with '6718'
6715 -6717 6718 0
-6718 6717 0
-6718 -6715 0
c Var 'aux1610' direct represents '3' with '-6717'
6714 6716 6718 -6717 0
c Encoding variable: aux1611 with domain: int(0..4) (representing constraint (aux1606 + aux1608))
c Both direct and order encoding.
c Var 'aux1611' order represents '0' with '6719'
c Var 'aux1611' direct represents '0' with '6719'
c Var 'aux1611' order represents '1' with '6720'
-6719 6720 0
c Var 'aux1611' direct represents '1' with '6721'
6719 -6720 6721 0
-6721 6720 0
-6721 -6719 0
c Var 'aux1611' order represents '2' with '6722'
-6720 6722 0
c Var 'aux1611' direct represents '2' with '6723'
6720 -6722 6723 0
-6723 6722 0
-6723 -6720 0
c Var 'aux1611' order represents '3' with '6724'
-6722 6724 0
c Var 'aux1611' direct represents '3' with '6725'
6722 -6724 6725 0
-6725 6724 0
-6725 -6722 0
c Var 'aux1611' direct represents '4' with '-6724'
6719 6721 6723 6725 -6724 0
c Encoding variable: aux1612 with domain: int(0..2) (representing constraint ((x_00006_00001=8) + (x_00005_00003=8)))
c Both direct and order encoding.
c Var 'aux1612' order represents '0' with '6726'
c Var 'aux1612' direct represents '0' with '6726'
c Var 'aux1612' order represents '1' with '6727'
-6726 6727 0
c Var 'aux1612' direct represents '1' with '6728'
6726 -6727 6728 0
-6728 6727 0
-6728 -6726 0
c Var 'aux1612' direct represents '2' with '-6727'
6726 6728 -6727 0
c Encoding variable: aux1613 with domain: int(0..2) (representing constraint ((x_00005_00002=8) + (x_00006_00002=8)))
c Both direct and order encoding.
c Var 'aux1613' order represents '0' with '6729'
c Var 'aux1613' direct represents '0' with '6729'
c Var 'aux1613' order represents '1' with '6730'
-6729 6730 0
c Var 'aux1613' direct represents '1' with '6731'
6729 -6730 6731 0
-6731 6730 0
-6731 -6729 0
c Var 'aux1613' direct represents '2' with '-6730'
6729 6731 -6730 0
c Encoding variable: aux1614 with domain: int(0..2) (representing constraint ((x_00005_00001=8) + (x_00004_00001=8)))
c Both direct and order encoding.
c Var 'aux1614' order represents '0' with '6732'
c Var 'aux1614' direct represents '0' with '6732'
c Var 'aux1614' order represents '1' with '6733'
-6732 6733 0
c Var 'aux1614' direct represents '1' with '6734'
6732 -6733 6734 0
-6734 6733 0
-6734 -6732 0
c Var 'aux1614' direct represents '2' with '-6733'
6732 6734 -6733 0
c Encoding variable: aux1615 with domain: int(0..2) (representing constraint ((x_00004_00003=8) + (x_00004_00002=8)))
c Both direct and order encoding.
c Var 'aux1615' order represents '0' with '6735'
c Var 'aux1615' direct represents '0' with '6735'
c Var 'aux1615' order represents '1' with '6736'
-6735 6736 0
c Var 'aux1615' direct represents '1' with '6737'
6735 -6736 6737 0
-6737 6736 0
-6737 -6735 0
c Var 'aux1615' direct represents '2' with '-6736'
6735 6737 -6736 0
c Encoding variable: aux1616 with domain: int(0..3) (representing constraint ((x_00006_00003=8) + aux1615))
c Both direct and order encoding.
c Var 'aux1616' order represents '0' with '6738'
c Var 'aux1616' direct represents '0' with '6738'
c Var 'aux1616' order represents '1' with '6739'
-6738 6739 0
c Var 'aux1616' direct represents '1' with '6740'
6738 -6739 6740 0
-6740 6739 0
-6740 -6738 0
c Var 'aux1616' order represents '2' with '6741'
-6739 6741 0
c Var 'aux1616' direct represents '2' with '6742'
6739 -6741 6742 0
-6742 6741 0
-6742 -6739 0
c Var 'aux1616' direct represents '3' with '-6741'
6738 6740 6742 -6741 0
c Encoding variable: aux1617 with domain: int(0..4) (representing constraint (aux1612 + aux1614))
c Both direct and order encoding.
c Var 'aux1617' order represents '0' with '6743'
c Var 'aux1617' direct represents '0' with '6743'
c Var 'aux1617' order represents '1' with '6744'
-6743 6744 0
c Var 'aux1617' direct represents '1' with '6745'
6743 -6744 6745 0
-6745 6744 0
-6745 -6743 0
c Var 'aux1617' order represents '2' with '6746'
-6744 6746 0
c Var 'aux1617' direct represents '2' with '6747'
6744 -6746 6747 0
-6747 6746 0
-6747 -6744 0
c Var 'aux1617' order represents '3' with '6748'
-6746 6748 0
c Var 'aux1617' direct represents '3' with '6749'
6746 -6748 6749 0
-6749 6748 0
-6749 -6746 0
c Var 'aux1617' direct represents '4' with '-6748'
6743 6745 6747 6749 -6748 0
c Encoding variable: aux1618 with domain: int(0..2) (representing constraint ((x_00006_00001=9) + (x_00005_00003=9)))
c Both direct and order encoding.
c Var 'aux1618' order represents '0' with '6750'
c Var 'aux1618' direct represents '0' with '6750'
c Var 'aux1618' order represents '1' with '6751'
-6750 6751 0
c Var 'aux1618' direct represents '1' with '6752'
6750 -6751 6752 0
-6752 6751 0
-6752 -6750 0
c Var 'aux1618' direct represents '2' with '-6751'
6750 6752 -6751 0
c Encoding variable: aux1619 with domain: int(0..2) (representing constraint ((x_00005_00002=9) + (x_00006_00002=9)))
c Both direct and order encoding.
c Var 'aux1619' order represents '0' with '6753'
c Var 'aux1619' direct represents '0' with '6753'
c Var 'aux1619' order represents '1' with '6754'
-6753 6754 0
c Var 'aux1619' direct represents '1' with '6755'
6753 -6754 6755 0
-6755 6754 0
-6755 -6753 0
c Var 'aux1619' direct represents '2' with '-6754'
6753 6755 -6754 0
c Encoding variable: aux1620 with domain: int(0..2) (representing constraint ((x_00005_00001=9) + (x_00004_00001=9)))
c Both direct and order encoding.
c Var 'aux1620' order represents '0' with '6756'
c Var 'aux1620' direct represents '0' with '6756'
c Var 'aux1620' order represents '1' with '6757'
-6756 6757 0
c Var 'aux1620' direct represents '1' with '6758'
6756 -6757 6758 0
-6758 6757 0
-6758 -6756 0
c Var 'aux1620' direct represents '2' with '-6757'
6756 6758 -6757 0
c Encoding variable: aux1621 with domain: int(0..2) (representing constraint ((x_00004_00003=9) + (x_00004_00002=9)))
c Both direct and order encoding.
c Var 'aux1621' order represents '0' with '6759'
c Var 'aux1621' direct represents '0' with '6759'
c Var 'aux1621' order represents '1' with '6760'
-6759 6760 0
c Var 'aux1621' direct represents '1' with '6761'
6759 -6760 6761 0
-6761 6760 0
-6761 -6759 0
c Var 'aux1621' direct represents '2' with '-6760'
6759 6761 -6760 0
c Encoding variable: aux1622 with domain: int(0..3) (representing constraint ((x_00006_00003=9) + aux1621))
c Both direct and order encoding.
c Var 'aux1622' order represents '0' with '6762'
c Var 'aux1622' direct represents '0' with '6762'
c Var 'aux1622' order represents '1' with '6763'
-6762 6763 0
c Var 'aux1622' direct represents '1' with '6764'
6762 -6763 6764 0
-6764 6763 0
-6764 -6762 0
c Var 'aux1622' order represents '2' with '6765'
-6763 6765 0
c Var 'aux1622' direct represents '2' with '6766'
6763 -6765 6766 0
-6766 6765 0
-6766 -6763 0
c Var 'aux1622' direct represents '3' with '-6765'
6762 6764 6766 -6765 0
c Encoding variable: aux1623 with domain: int(0..4) (representing constraint (aux1618 + aux1620))
c Both direct and order encoding.
c Var 'aux1623' order represents '0' with '6767'
c Var 'aux1623' direct represents '0' with '6767'
c Var 'aux1623' order represents '1' with '6768'
-6767 6768 0
c Var 'aux1623' direct represents '1' with '6769'
6767 -6768 6769 0
-6769 6768 0
-6769 -6767 0
c Var 'aux1623' order represents '2' with '6770'
-6768 6770 0
c Var 'aux1623' direct represents '2' with '6771'
6768 -6770 6771 0
-6771 6770 0
-6771 -6768 0
c Var 'aux1623' order represents '3' with '6772'
-6770 6772 0
c Var 'aux1623' direct represents '3' with '6773'
6770 -6772 6773 0
-6773 6772 0
-6773 -6770 0
c Var 'aux1623' direct represents '4' with '-6772'
6767 6769 6771 6773 -6772 0
c Encoding variable: aux1624 with domain: int(0..2) (representing constraint ((x_00006_00004=1) + (x_00005_00006=1)))
c Both direct and order encoding.
c Var 'aux1624' order represents '0' with '6774'
c Var 'aux1624' direct represents '0' with '6774'
c Var 'aux1624' order represents '1' with '6775'
-6774 6775 0
c Var 'aux1624' direct represents '1' with '6776'
6774 -6775 6776 0
-6776 6775 0
-6776 -6774 0
c Var 'aux1624' direct represents '2' with '-6775'
6774 6776 -6775 0
c Encoding variable: aux1625 with domain: int(0..2) (representing constraint ((x_00005_00005=1) + (x_00006_00005=1)))
c Both direct and order encoding.
c Var 'aux1625' order represents '0' with '6777'
c Var 'aux1625' direct represents '0' with '6777'
c Var 'aux1625' order represents '1' with '6778'
-6777 6778 0
c Var 'aux1625' direct represents '1' with '6779'
6777 -6778 6779 0
-6779 6778 0
-6779 -6777 0
c Var 'aux1625' direct represents '2' with '-6778'
6777 6779 -6778 0
c Encoding variable: aux1626 with domain: int(0..2) (representing constraint ((x_00005_00004=1) + (x_00004_00004=1)))
c Both direct and order encoding.
c Var 'aux1626' order represents '0' with '6780'
c Var 'aux1626' direct represents '0' with '6780'
c Var 'aux1626' order represents '1' with '6781'
-6780 6781 0
c Var 'aux1626' direct represents '1' with '6782'
6780 -6781 6782 0
-6782 6781 0
-6782 -6780 0
c Var 'aux1626' direct represents '2' with '-6781'
6780 6782 -6781 0
c Encoding variable: aux1627 with domain: int(0..2) (representing constraint ((x_00004_00006=1) + (x_00004_00005=1)))
c Both direct and order encoding.
c Var 'aux1627' order represents '0' with '6783'
c Var 'aux1627' direct represents '0' with '6783'
c Var 'aux1627' order represents '1' with '6784'
-6783 6784 0
c Var 'aux1627' direct represents '1' with '6785'
6783 -6784 6785 0
-6785 6784 0
-6785 -6783 0
c Var 'aux1627' direct represents '2' with '-6784'
6783 6785 -6784 0
c Encoding variable: aux1628 with domain: int(0..3) (representing constraint ((x_00006_00006=1) + aux1627))
c Both direct and order encoding.
c Var 'aux1628' order represents '0' with '6786'
c Var 'aux1628' direct represents '0' with '6786'
c Var 'aux1628' order represents '1' with '6787'
-6786 6787 0
c Var 'aux1628' direct represents '1' with '6788'
6786 -6787 6788 0
-6788 6787 0
-6788 -6786 0
c Var 'aux1628' order represents '2' with '6789'
-6787 6789 0
c Var 'aux1628' direct represents '2' with '6790'
6787 -6789 6790 0
-6790 6789 0
-6790 -6787 0
c Var 'aux1628' direct represents '3' with '-6789'
6786 6788 6790 -6789 0
c Encoding variable: aux1629 with domain: int(0..4) (representing constraint (aux1624 + aux1626))
c Both direct and order encoding.
c Var 'aux1629' order represents '0' with '6791'
c Var 'aux1629' direct represents '0' with '6791'
c Var 'aux1629' order represents '1' with '6792'
-6791 6792 0
c Var 'aux1629' direct represents '1' with '6793'
6791 -6792 6793 0
-6793 6792 0
-6793 -6791 0
c Var 'aux1629' order represents '2' with '6794'
-6792 6794 0
c Var 'aux1629' direct represents '2' with '6795'
6792 -6794 6795 0
-6795 6794 0
-6795 -6792 0
c Var 'aux1629' order represents '3' with '6796'
-6794 6796 0
c Var 'aux1629' direct represents '3' with '6797'
6794 -6796 6797 0
-6797 6796 0
-6797 -6794 0
c Var 'aux1629' direct represents '4' with '-6796'
6791 6793 6795 6797 -6796 0
c Encoding variable: aux1630 with domain: int(0..2) (representing constraint ((x_00006_00004=2) + (x_00005_00006=2)))
c Both direct and order encoding.
c Var 'aux1630' order represents '0' with '6798'
c Var 'aux1630' direct represents '0' with '6798'
c Var 'aux1630' order represents '1' with '6799'
-6798 6799 0
c Var 'aux1630' direct represents '1' with '6800'
6798 -6799 6800 0
-6800 6799 0
-6800 -6798 0
c Var 'aux1630' direct represents '2' with '-6799'
6798 6800 -6799 0
c Encoding variable: aux1631 with domain: int(0..2) (representing constraint ((x_00005_00005=2) + (x_00006_00005=2)))
c Both direct and order encoding.
c Var 'aux1631' order represents '0' with '6801'
c Var 'aux1631' direct represents '0' with '6801'
c Var 'aux1631' order represents '1' with '6802'
-6801 6802 0
c Var 'aux1631' direct represents '1' with '6803'
6801 -6802 6803 0
-6803 6802 0
-6803 -6801 0
c Var 'aux1631' direct represents '2' with '-6802'
6801 6803 -6802 0
c Encoding variable: aux1632 with domain: int(0..2) (representing constraint ((x_00005_00004=2) + (x_00004_00004=2)))
c Both direct and order encoding.
c Var 'aux1632' order represents '0' with '6804'
c Var 'aux1632' direct represents '0' with '6804'
c Var 'aux1632' order represents '1' with '6805'
-6804 6805 0
c Var 'aux1632' direct represents '1' with '6806'
6804 -6805 6806 0
-6806 6805 0
-6806 -6804 0
c Var 'aux1632' direct represents '2' with '-6805'
6804 6806 -6805 0
c Encoding variable: aux1633 with domain: int(0..2) (representing constraint ((x_00004_00006=2) + (x_00004_00005=2)))
c Both direct and order encoding.
c Var 'aux1633' order represents '0' with '6807'
c Var 'aux1633' direct represents '0' with '6807'
c Var 'aux1633' order represents '1' with '6808'
-6807 6808 0
c Var 'aux1633' direct represents '1' with '6809'
6807 -6808 6809 0
-6809 6808 0
-6809 -6807 0
c Var 'aux1633' direct represents '2' with '-6808'
6807 6809 -6808 0
c Encoding variable: aux1634 with domain: int(0..3) (representing constraint ((x_00006_00006=2) + aux1633))
c Both direct and order encoding.
c Var 'aux1634' order represents '0' with '6810'
c Var 'aux1634' direct represents '0' with '6810'
c Var 'aux1634' order represents '1' with '6811'
-6810 6811 0
c Var 'aux1634' direct represents '1' with '6812'
6810 -6811 6812 0
-6812 6811 0
-6812 -6810 0
c Var 'aux1634' order represents '2' with '6813'
-6811 6813 0
c Var 'aux1634' direct represents '2' with '6814'
6811 -6813 6814 0
-6814 6813 0
-6814 -6811 0
c Var 'aux1634' direct represents '3' with '-6813'
6810 6812 6814 -6813 0
c Encoding variable: aux1635 with domain: int(0..4) (representing constraint (aux1630 + aux1632))
c Both direct and order encoding.
c Var 'aux1635' order represents '0' with '6815'
c Var 'aux1635' direct represents '0' with '6815'
c Var 'aux1635' order represents '1' with '6816'
-6815 6816 0
c Var 'aux1635' direct represents '1' with '6817'
6815 -6816 6817 0
-6817 6816 0
-6817 -6815 0
c Var 'aux1635' order represents '2' with '6818'
-6816 6818 0
c Var 'aux1635' direct represents '2' with '6819'
6816 -6818 6819 0
-6819 6818 0
-6819 -6816 0
c Var 'aux1635' order represents '3' with '6820'
-6818 6820 0
c Var 'aux1635' direct represents '3' with '6821'
6818 -6820 6821 0
-6821 6820 0
-6821 -6818 0
c Var 'aux1635' direct represents '4' with '-6820'
6815 6817 6819 6821 -6820 0
c Encoding variable: aux1636 with domain: int(0..2) (representing constraint ((x_00006_00004=3) + (x_00005_00006=3)))
c Both direct and order encoding.
c Var 'aux1636' order represents '0' with '6822'
c Var 'aux1636' direct represents '0' with '6822'
c Var 'aux1636' order represents '1' with '6823'
-6822 6823 0
c Var 'aux1636' direct represents '1' with '6824'
6822 -6823 6824 0
-6824 6823 0
-6824 -6822 0
c Var 'aux1636' direct represents '2' with '-6823'
6822 6824 -6823 0
c Encoding variable: aux1637 with domain: int(0..2) (representing constraint ((x_00005_00005=3) + (x_00006_00005=3)))
c Both direct and order encoding.
c Var 'aux1637' order represents '0' with '6825'
c Var 'aux1637' direct represents '0' with '6825'
c Var 'aux1637' order represents '1' with '6826'
-6825 6826 0
c Var 'aux1637' direct represents '1' with '6827'
6825 -6826 6827 0
-6827 6826 0
-6827 -6825 0
c Var 'aux1637' direct represents '2' with '-6826'
6825 6827 -6826 0
c Encoding variable: aux1638 with domain: int(0..2) (representing constraint ((x_00005_00004=3) + (x_00004_00004=3)))
c Both direct and order encoding.
c Var 'aux1638' order represents '0' with '6828'
c Var 'aux1638' direct represents '0' with '6828'
c Var 'aux1638' order represents '1' with '6829'
-6828 6829 0
c Var 'aux1638' direct represents '1' with '6830'
6828 -6829 6830 0
-6830 6829 0
-6830 -6828 0
c Var 'aux1638' direct represents '2' with '-6829'
6828 6830 -6829 0
c Encoding variable: aux1639 with domain: int(0..2) (representing constraint ((x_00004_00006=3) + (x_00004_00005=3)))
c Both direct and order encoding.
c Var 'aux1639' order represents '0' with '6831'
c Var 'aux1639' direct represents '0' with '6831'
c Var 'aux1639' order represents '1' with '6832'
-6831 6832 0
c Var 'aux1639' direct represents '1' with '6833'
6831 -6832 6833 0
-6833 6832 0
-6833 -6831 0
c Var 'aux1639' direct represents '2' with '-6832'
6831 6833 -6832 0
c Encoding variable: aux1640 with domain: int(0..3) (representing constraint ((x_00006_00006=3) + aux1639))
c Both direct and order encoding.
c Var 'aux1640' order represents '0' with '6834'
c Var 'aux1640' direct represents '0' with '6834'
c Var 'aux1640' order represents '1' with '6835'
-6834 6835 0
c Var 'aux1640' direct represents '1' with '6836'
6834 -6835 6836 0
-6836 6835 0
-6836 -6834 0
c Var 'aux1640' order represents '2' with '6837'
-6835 6837 0
c Var 'aux1640' direct represents '2' with '6838'
6835 -6837 6838 0
-6838 6837 0
-6838 -6835 0
c Var 'aux1640' direct represents '3' with '-6837'
6834 6836 6838 -6837 0
c Encoding variable: aux1641 with domain: int(0..4) (representing constraint (aux1636 + aux1638))
c Both direct and order encoding.
c Var 'aux1641' order represents '0' with '6839'
c Var 'aux1641' direct represents '0' with '6839'
c Var 'aux1641' order represents '1' with '6840'
-6839 6840 0
c Var 'aux1641' direct represents '1' with '6841'
6839 -6840 6841 0
-6841 6840 0
-6841 -6839 0
c Var 'aux1641' order represents '2' with '6842'
-6840 6842 0
c Var 'aux1641' direct represents '2' with '6843'
6840 -6842 6843 0
-6843 6842 0
-6843 -6840 0
c Var 'aux1641' order represents '3' with '6844'
-6842 6844 0
c Var 'aux1641' direct represents '3' with '6845'
6842 -6844 6845 0
-6845 6844 0
-6845 -6842 0
c Var 'aux1641' direct represents '4' with '-6844'
6839 6841 6843 6845 -6844 0
c Encoding variable: aux1642 with domain: int(0..2) (representing constraint ((x_00006_00004=4) + (x_00005_00006=4)))
c Both direct and order encoding.
c Var 'aux1642' order represents '0' with '6846'
c Var 'aux1642' direct represents '0' with '6846'
c Var 'aux1642' order represents '1' with '6847'
-6846 6847 0
c Var 'aux1642' direct represents '1' with '6848'
6846 -6847 6848 0
-6848 6847 0
-6848 -6846 0
c Var 'aux1642' direct represents '2' with '-6847'
6846 6848 -6847 0
c Encoding variable: aux1643 with domain: int(0..2) (representing constraint ((x_00005_00005=4) + (x_00006_00005=4)))
c Both direct and order encoding.
c Var 'aux1643' order represents '0' with '6849'
c Var 'aux1643' direct represents '0' with '6849'
c Var 'aux1643' order represents '1' with '6850'
-6849 6850 0
c Var 'aux1643' direct represents '1' with '6851'
6849 -6850 6851 0
-6851 6850 0
-6851 -6849 0
c Var 'aux1643' direct represents '2' with '-6850'
6849 6851 -6850 0
c Encoding variable: aux1644 with domain: int(0..2) (representing constraint ((x_00005_00004=4) + (x_00004_00004=4)))
c Both direct and order encoding.
c Var 'aux1644' order represents '0' with '6852'
c Var 'aux1644' direct represents '0' with '6852'
c Var 'aux1644' order represents '1' with '6853'
-6852 6853 0
c Var 'aux1644' direct represents '1' with '6854'
6852 -6853 6854 0
-6854 6853 0
-6854 -6852 0
c Var 'aux1644' direct represents '2' with '-6853'
6852 6854 -6853 0
c Encoding variable: aux1645 with domain: int(0..2) (representing constraint ((x_00004_00006=4) + (x_00004_00005=4)))
c Both direct and order encoding.
c Var 'aux1645' order represents '0' with '6855'
c Var 'aux1645' direct represents '0' with '6855'
c Var 'aux1645' order represents '1' with '6856'
-6855 6856 0
c Var 'aux1645' direct represents '1' with '6857'
6855 -6856 6857 0
-6857 6856 0
-6857 -6855 0
c Var 'aux1645' direct represents '2' with '-6856'
6855 6857 -6856 0
c Encoding variable: aux1646 with domain: int(0..3) (representing constraint ((x_00006_00006=4) + aux1645))
c Both direct and order encoding.
c Var 'aux1646' order represents '0' with '6858'
c Var 'aux1646' direct represents '0' with '6858'
c Var 'aux1646' order represents '1' with '6859'
-6858 6859 0
c Var 'aux1646' direct represents '1' with '6860'
6858 -6859 6860 0
-6860 6859 0
-6860 -6858 0
c Var 'aux1646' order represents '2' with '6861'
-6859 6861 0
c Var 'aux1646' direct represents '2' with '6862'
6859 -6861 6862 0
-6862 6861 0
-6862 -6859 0
c Var 'aux1646' direct represents '3' with '-6861'
6858 6860 6862 -6861 0
c Encoding variable: aux1647 with domain: int(0..4) (representing constraint (aux1642 + aux1644))
c Both direct and order encoding.
c Var 'aux1647' order represents '0' with '6863'
c Var 'aux1647' direct represents '0' with '6863'
c Var 'aux1647' order represents '1' with '6864'
-6863 6864 0
c Var 'aux1647' direct represents '1' with '6865'
6863 -6864 6865 0
-6865 6864 0
-6865 -6863 0
c Var 'aux1647' order represents '2' with '6866'
-6864 6866 0
c Var 'aux1647' direct represents '2' with '6867'
6864 -6866 6867 0
-6867 6866 0
-6867 -6864 0
c Var 'aux1647' order represents '3' with '6868'
-6866 6868 0
c Var 'aux1647' direct represents '3' with '6869'
6866 -6868 6869 0
-6869 6868 0
-6869 -6866 0
c Var 'aux1647' direct represents '4' with '-6868'
6863 6865 6867 6869 -6868 0
c Encoding variable: aux1648 with domain: int(0..2) (representing constraint ((x_00006_00004=5) + (x_00005_00006=5)))
c Both direct and order encoding.
c Var 'aux1648' order represents '0' with '6870'
c Var 'aux1648' direct represents '0' with '6870'
c Var 'aux1648' order represents '1' with '6871'
-6870 6871 0
c Var 'aux1648' direct represents '1' with '6872'
6870 -6871 6872 0
-6872 6871 0
-6872 -6870 0
c Var 'aux1648' direct represents '2' with '-6871'
6870 6872 -6871 0
c Encoding variable: aux1649 with domain: int(0..2) (representing constraint ((x_00005_00005=5) + (x_00006_00005=5)))
c Both direct and order encoding.
c Var 'aux1649' order represents '0' with '6873'
c Var 'aux1649' direct represents '0' with '6873'
c Var 'aux1649' order represents '1' with '6874'
-6873 6874 0
c Var 'aux1649' direct represents '1' with '6875'
6873 -6874 6875 0
-6875 6874 0
-6875 -6873 0
c Var 'aux1649' direct represents '2' with '-6874'
6873 6875 -6874 0
c Encoding variable: aux1650 with domain: int(0..2) (representing constraint ((x_00005_00004=5) + (x_00004_00004=5)))
c Both direct and order encoding.
c Var 'aux1650' order represents '0' with '6876'
c Var 'aux1650' direct represents '0' with '6876'
c Var 'aux1650' order represents '1' with '6877'
-6876 6877 0
c Var 'aux1650' direct represents '1' with '6878'
6876 -6877 6878 0
-6878 6877 0
-6878 -6876 0
c Var 'aux1650' direct represents '2' with '-6877'
6876 6878 -6877 0
c Encoding variable: aux1651 with domain: int(0..2) (representing constraint ((x_00004_00006=5) + (x_00004_00005=5)))
c Both direct and order encoding.
c Var 'aux1651' order represents '0' with '6879'
c Var 'aux1651' direct represents '0' with '6879'
c Var 'aux1651' order represents '1' with '6880'
-6879 6880 0
c Var 'aux1651' direct represents '1' with '6881'
6879 -6880 6881 0
-6881 6880 0
-6881 -6879 0
c Var 'aux1651' direct represents '2' with '-6880'
6879 6881 -6880 0
c Encoding variable: aux1652 with domain: int(0..3) (representing constraint ((x_00006_00006=5) + aux1651))
c Both direct and order encoding.
c Var 'aux1652' order represents '0' with '6882'
c Var 'aux1652' direct represents '0' with '6882'
c Var 'aux1652' order represents '1' with '6883'
-6882 6883 0
c Var 'aux1652' direct represents '1' with '6884'
6882 -6883 6884 0
-6884 6883 0
-6884 -6882 0
c Var 'aux1652' order represents '2' with '6885'
-6883 6885 0
c Var 'aux1652' direct represents '2' with '6886'
6883 -6885 6886 0
-6886 6885 0
-6886 -6883 0
c Var 'aux1652' direct represents '3' with '-6885'
6882 6884 6886 -6885 0
c Encoding variable: aux1653 with domain: int(0..4) (representing constraint (aux1648 + aux1650))
c Both direct and order encoding.
c Var 'aux1653' order represents '0' with '6887'
c Var 'aux1653' direct represents '0' with '6887'
c Var 'aux1653' order represents '1' with '6888'
-6887 6888 0
c Var 'aux1653' direct represents '1' with '6889'
6887 -6888 6889 0
-6889 6888 0
-6889 -6887 0
c Var 'aux1653' order represents '2' with '6890'
-6888 6890 0
c Var 'aux1653' direct represents '2' with '6891'
6888 -6890 6891 0
-6891 6890 0
-6891 -6888 0
c Var 'aux1653' order represents '3' with '6892'
-6890 6892 0
c Var 'aux1653' direct represents '3' with '6893'
6890 -6892 6893 0
-6893 6892 0
-6893 -6890 0
c Var 'aux1653' direct represents '4' with '-6892'
6887 6889 6891 6893 -6892 0
c Encoding variable: aux1654 with domain: int(0..2) (representing constraint ((x_00006_00004=6) + (x_00005_00006=6)))
c Both direct and order encoding.
c Var 'aux1654' order represents '0' with '6894'
c Var 'aux1654' direct represents '0' with '6894'
c Var 'aux1654' order represents '1' with '6895'
-6894 6895 0
c Var 'aux1654' direct represents '1' with '6896'
6894 -6895 6896 0
-6896 6895 0
-6896 -6894 0
c Var 'aux1654' direct represents '2' with '-6895'
6894 6896 -6895 0
c Encoding variable: aux1655 with domain: int(0..2) (representing constraint ((x_00005_00005=6) + (x_00006_00005=6)))
c Both direct and order encoding.
c Var 'aux1655' order represents '0' with '6897'
c Var 'aux1655' direct represents '0' with '6897'
c Var 'aux1655' order represents '1' with '6898'
-6897 6898 0
c Var 'aux1655' direct represents '1' with '6899'
6897 -6898 6899 0
-6899 6898 0
-6899 -6897 0
c Var 'aux1655' direct represents '2' with '-6898'
6897 6899 -6898 0
c Encoding variable: aux1656 with domain: int(0..2) (representing constraint ((x_00005_00004=6) + (x_00004_00004=6)))
c Both direct and order encoding.
c Var 'aux1656' order represents '0' with '6900'
c Var 'aux1656' direct represents '0' with '6900'
c Var 'aux1656' order represents '1' with '6901'
-6900 6901 0
c Var 'aux1656' direct represents '1' with '6902'
6900 -6901 6902 0
-6902 6901 0
-6902 -6900 0
c Var 'aux1656' direct represents '2' with '-6901'
6900 6902 -6901 0
c Encoding variable: aux1657 with domain: int(0..2) (representing constraint ((x_00004_00006=6) + (x_00004_00005=6)))
c Both direct and order encoding.
c Var 'aux1657' order represents '0' with '6903'
c Var 'aux1657' direct represents '0' with '6903'
c Var 'aux1657' order represents '1' with '6904'
-6903 6904 0
c Var 'aux1657' direct represents '1' with '6905'
6903 -6904 6905 0
-6905 6904 0
-6905 -6903 0
c Var 'aux1657' direct represents '2' with '-6904'
6903 6905 -6904 0
c Encoding variable: aux1658 with domain: int(0..3) (representing constraint ((x_00006_00006=6) + aux1657))
c Both direct and order encoding.
c Var 'aux1658' order represents '0' with '6906'
c Var 'aux1658' direct represents '0' with '6906'
c Var 'aux1658' order represents '1' with '6907'
-6906 6907 0
c Var 'aux1658' direct represents '1' with '6908'
6906 -6907 6908 0
-6908 6907 0
-6908 -6906 0
c Var 'aux1658' order represents '2' with '6909'
-6907 6909 0
c Var 'aux1658' direct represents '2' with '6910'
6907 -6909 6910 0
-6910 6909 0
-6910 -6907 0
c Var 'aux1658' direct represents '3' with '-6909'
6906 6908 6910 -6909 0
c Encoding variable: aux1659 with domain: int(0..4) (representing constraint (aux1654 + aux1656))
c Both direct and order encoding.
c Var 'aux1659' order represents '0' with '6911'
c Var 'aux1659' direct represents '0' with '6911'
c Var 'aux1659' order represents '1' with '6912'
-6911 6912 0
c Var 'aux1659' direct represents '1' with '6913'
6911 -6912 6913 0
-6913 6912 0
-6913 -6911 0
c Var 'aux1659' order represents '2' with '6914'
-6912 6914 0
c Var 'aux1659' direct represents '2' with '6915'
6912 -6914 6915 0
-6915 6914 0
-6915 -6912 0
c Var 'aux1659' order represents '3' with '6916'
-6914 6916 0
c Var 'aux1659' direct represents '3' with '6917'
6914 -6916 6917 0
-6917 6916 0
-6917 -6914 0
c Var 'aux1659' direct represents '4' with '-6916'
6911 6913 6915 6917 -6916 0
c Encoding variable: aux1660 with domain: int(0..2) (representing constraint ((x_00006_00004=7) + (x_00005_00006=7)))
c Both direct and order encoding.
c Var 'aux1660' order represents '0' with '6918'
c Var 'aux1660' direct represents '0' with '6918'
c Var 'aux1660' order represents '1' with '6919'
-6918 6919 0
c Var 'aux1660' direct represents '1' with '6920'
6918 -6919 6920 0
-6920 6919 0
-6920 -6918 0
c Var 'aux1660' direct represents '2' with '-6919'
6918 6920 -6919 0
c Encoding variable: aux1661 with domain: int(0..2) (representing constraint ((x_00005_00005=7) + (x_00006_00005=7)))
c Both direct and order encoding.
c Var 'aux1661' order represents '0' with '6921'
c Var 'aux1661' direct represents '0' with '6921'
c Var 'aux1661' order represents '1' with '6922'
-6921 6922 0
c Var 'aux1661' direct represents '1' with '6923'
6921 -6922 6923 0
-6923 6922 0
-6923 -6921 0
c Var 'aux1661' direct represents '2' with '-6922'
6921 6923 -6922 0
c Encoding variable: aux1662 with domain: int(0..2) (representing constraint ((x_00005_00004=7) + (x_00004_00004=7)))
c Both direct and order encoding.
c Var 'aux1662' order represents '0' with '6924'
c Var 'aux1662' direct represents '0' with '6924'
c Var 'aux1662' order represents '1' with '6925'
-6924 6925 0
c Var 'aux1662' direct represents '1' with '6926'
6924 -6925 6926 0
-6926 6925 0
-6926 -6924 0
c Var 'aux1662' direct represents '2' with '-6925'
6924 6926 -6925 0
c Encoding variable: aux1663 with domain: int(0..2) (representing constraint ((x_00004_00006=7) + (x_00004_00005=7)))
c Both direct and order encoding.
c Var 'aux1663' order represents '0' with '6927'
c Var 'aux1663' direct represents '0' with '6927'
c Var 'aux1663' order represents '1' with '6928'
-6927 6928 0
c Var 'aux1663' direct represents '1' with '6929'
6927 -6928 6929 0
-6929 6928 0
-6929 -6927 0
c Var 'aux1663' direct represents '2' with '-6928'
6927 6929 -6928 0
c Encoding variable: aux1664 with domain: int(0..3) (representing constraint ((x_00006_00006=7) + aux1663))
c Both direct and order encoding.
c Var 'aux1664' order represents '0' with '6930'
c Var 'aux1664' direct represents '0' with '6930'
c Var 'aux1664' order represents '1' with '6931'
-6930 6931 0
c Var 'aux1664' direct represents '1' with '6932'
6930 -6931 6932 0
-6932 6931 0
-6932 -6930 0
c Var 'aux1664' order represents '2' with '6933'
-6931 6933 0
c Var 'aux1664' direct represents '2' with '6934'
6931 -6933 6934 0
-6934 6933 0
-6934 -6931 0
c Var 'aux1664' direct represents '3' with '-6933'
6930 6932 6934 -6933 0
c Encoding variable: aux1665 with domain: int(0..4) (representing constraint (aux1660 + aux1662))
c Both direct and order encoding.
c Var 'aux1665' order represents '0' with '6935'
c Var 'aux1665' direct represents '0' with '6935'
c Var 'aux1665' order represents '1' with '6936'
-6935 6936 0
c Var 'aux1665' direct represents '1' with '6937'
6935 -6936 6937 0
-6937 6936 0
-6937 -6935 0
c Var 'aux1665' order represents '2' with '6938'
-6936 6938 0
c Var 'aux1665' direct represents '2' with '6939'
6936 -6938 6939 0
-6939 6938 0
-6939 -6936 0
c Var 'aux1665' order represents '3' with '6940'
-6938 6940 0
c Var 'aux1665' direct represents '3' with '6941'
6938 -6940 6941 0
-6941 6940 0
-6941 -6938 0
c Var 'aux1665' direct represents '4' with '-6940'
6935 6937 6939 6941 -6940 0
c Encoding variable: aux1666 with domain: int(0..2) (representing constraint ((x_00006_00004=8) + (x_00005_00006=8)))
c Both direct and order encoding.
c Var 'aux1666' order represents '0' with '6942'
c Var 'aux1666' direct represents '0' with '6942'
c Var 'aux1666' order represents '1' with '6943'
-6942 6943 0
c Var 'aux1666' direct represents '1' with '6944'
6942 -6943 6944 0
-6944 6943 0
-6944 -6942 0
c Var 'aux1666' direct represents '2' with '-6943'
6942 6944 -6943 0
c Encoding variable: aux1667 with domain: int(0..2) (representing constraint ((x_00005_00005=8) + (x_00006_00005=8)))
c Both direct and order encoding.
c Var 'aux1667' order represents '0' with '6945'
c Var 'aux1667' direct represents '0' with '6945'
c Var 'aux1667' order represents '1' with '6946'
-6945 6946 0
c Var 'aux1667' direct represents '1' with '6947'
6945 -6946 6947 0
-6947 6946 0
-6947 -6945 0
c Var 'aux1667' direct represents '2' with '-6946'
6945 6947 -6946 0
c Encoding variable: aux1668 with domain: int(0..2) (representing constraint ((x_00005_00004=8) + (x_00004_00004=8)))
c Both direct and order encoding.
c Var 'aux1668' order represents '0' with '6948'
c Var 'aux1668' direct represents '0' with '6948'
c Var 'aux1668' order represents '1' with '6949'
-6948 6949 0
c Var 'aux1668' direct represents '1' with '6950'
6948 -6949 6950 0
-6950 6949 0
-6950 -6948 0
c Var 'aux1668' direct represents '2' with '-6949'
6948 6950 -6949 0
c Encoding variable: aux1669 with domain: int(0..2) (representing constraint ((x_00004_00006=8) + (x_00004_00005=8)))
c Both direct and order encoding.
c Var 'aux1669' order represents '0' with '6951'
c Var 'aux1669' direct represents '0' with '6951'
c Var 'aux1669' order represents '1' with '6952'
-6951 6952 0
c Var 'aux1669' direct represents '1' with '6953'
6951 -6952 6953 0
-6953 6952 0
-6953 -6951 0
c Var 'aux1669' direct represents '2' with '-6952'
6951 6953 -6952 0
c Encoding variable: aux1670 with domain: int(0..3) (representing constraint ((x_00006_00006=8) + aux1669))
c Both direct and order encoding.
c Var 'aux1670' order represents '0' with '6954'
c Var 'aux1670' direct represents '0' with '6954'
c Var 'aux1670' order represents '1' with '6955'
-6954 6955 0
c Var 'aux1670' direct represents '1' with '6956'
6954 -6955 6956 0
-6956 6955 0
-6956 -6954 0
c Var 'aux1670' order represents '2' with '6957'
-6955 6957 0
c Var 'aux1670' direct represents '2' with '6958'
6955 -6957 6958 0
-6958 6957 0
-6958 -6955 0
c Var 'aux1670' direct represents '3' with '-6957'
6954 6956 6958 -6957 0
c Encoding variable: aux1671 with domain: int(0..4) (representing constraint (aux1666 + aux1668))
c Both direct and order encoding.
c Var 'aux1671' order represents '0' with '6959'
c Var 'aux1671' direct represents '0' with '6959'
c Var 'aux1671' order represents '1' with '6960'
-6959 6960 0
c Var 'aux1671' direct represents '1' with '6961'
6959 -6960 6961 0
-6961 6960 0
-6961 -6959 0
c Var 'aux1671' order represents '2' with '6962'
-6960 6962 0
c Var 'aux1671' direct represents '2' with '6963'
6960 -6962 6963 0
-6963 6962 0
-6963 -6960 0
c Var 'aux1671' order represents '3' with '6964'
-6962 6964 0
c Var 'aux1671' direct represents '3' with '6965'
6962 -6964 6965 0
-6965 6964 0
-6965 -6962 0
c Var 'aux1671' direct represents '4' with '-6964'
6959 6961 6963 6965 -6964 0
c Encoding variable: aux1672 with domain: int(0..2) (representing constraint ((x_00006_00004=9) + (x_00005_00006=9)))
c Both direct and order encoding.
c Var 'aux1672' order represents '0' with '6966'
c Var 'aux1672' direct represents '0' with '6966'
c Var 'aux1672' order represents '1' with '6967'
-6966 6967 0
c Var 'aux1672' direct represents '1' with '6968'
6966 -6967 6968 0
-6968 6967 0
-6968 -6966 0
c Var 'aux1672' direct represents '2' with '-6967'
6966 6968 -6967 0
c Encoding variable: aux1673 with domain: int(0..2) (representing constraint ((x_00005_00005=9) + (x_00006_00005=9)))
c Both direct and order encoding.
c Var 'aux1673' order represents '0' with '6969'
c Var 'aux1673' direct represents '0' with '6969'
c Var 'aux1673' order represents '1' with '6970'
-6969 6970 0
c Var 'aux1673' direct represents '1' with '6971'
6969 -6970 6971 0
-6971 6970 0
-6971 -6969 0
c Var 'aux1673' direct represents '2' with '-6970'
6969 6971 -6970 0
c Encoding variable: aux1674 with domain: int(0..2) (representing constraint ((x_00005_00004=9) + (x_00004_00004=9)))
c Both direct and order encoding.
c Var 'aux1674' order represents '0' with '6972'
c Var 'aux1674' direct represents '0' with '6972'
c Var 'aux1674' order represents '1' with '6973'
-6972 6973 0
c Var 'aux1674' direct represents '1' with '6974'
6972 -6973 6974 0
-6974 6973 0
-6974 -6972 0
c Var 'aux1674' direct represents '2' with '-6973'
6972 6974 -6973 0
c Encoding variable: aux1675 with domain: int(0..2) (representing constraint ((x_00004_00006=9) + (x_00004_00005=9)))
c Both direct and order encoding.
c Var 'aux1675' order represents '0' with '6975'
c Var 'aux1675' direct represents '0' with '6975'
c Var 'aux1675' order represents '1' with '6976'
-6975 6976 0
c Var 'aux1675' direct represents '1' with '6977'
6975 -6976 6977 0
-6977 6976 0
-6977 -6975 0
c Var 'aux1675' direct represents '2' with '-6976'
6975 6977 -6976 0
c Encoding variable: aux1676 with domain: int(0..3) (representing constraint ((x_00006_00006=9) + aux1675))
c Both direct and order encoding.
c Var 'aux1676' order represents '0' with '6978'
c Var 'aux1676' direct represents '0' with '6978'
c Var 'aux1676' order represents '1' with '6979'
-6978 6979 0
c Var 'aux1676' direct represents '1' with '6980'
6978 -6979 6980 0
-6980 6979 0
-6980 -6978 0
c Var 'aux1676' order represents '2' with '6981'
-6979 6981 0
c Var 'aux1676' direct represents '2' with '6982'
6979 -6981 6982 0
-6982 6981 0
-6982 -6979 0
c Var 'aux1676' direct represents '3' with '-6981'
6978 6980 6982 -6981 0
c Encoding variable: aux1677 with domain: int(0..4) (representing constraint (aux1672 + aux1674))
c Both direct and order encoding.
c Var 'aux1677' order represents '0' with '6983'
c Var 'aux1677' direct represents '0' with '6983'
c Var 'aux1677' order represents '1' with '6984'
-6983 6984 0
c Var 'aux1677' direct represents '1' with '6985'
6983 -6984 6985 0
-6985 6984 0
-6985 -6983 0
c Var 'aux1677' order represents '2' with '6986'
-6984 6986 0
c Var 'aux1677' direct represents '2' with '6987'
6984 -6986 6987 0
-6987 6986 0
-6987 -6984 0
c Var 'aux1677' order represents '3' with '6988'
-6986 6988 0
c Var 'aux1677' direct represents '3' with '6989'
6986 -6988 6989 0
-6989 6988 0
-6989 -6986 0
c Var 'aux1677' direct represents '4' with '-6988'
6983 6985 6987 6989 -6988 0
c Encoding variable: aux1678 with domain: int(0..2) (representing constraint ((x_00006_00007=1) + (x_00005_00009=1)))
c Both direct and order encoding.
c Var 'aux1678' order represents '0' with '6990'
c Var 'aux1678' direct represents '0' with '6990'
c Var 'aux1678' order represents '1' with '6991'
-6990 6991 0
c Var 'aux1678' direct represents '1' with '6992'
6990 -6991 6992 0
-6992 6991 0
-6992 -6990 0
c Var 'aux1678' direct represents '2' with '-6991'
6990 6992 -6991 0
c Encoding variable: aux1679 with domain: int(0..2) (representing constraint ((x_00005_00008=1) + (x_00006_00008=1)))
c Both direct and order encoding.
c Var 'aux1679' order represents '0' with '6993'
c Var 'aux1679' direct represents '0' with '6993'
c Var 'aux1679' order represents '1' with '6994'
-6993 6994 0
c Var 'aux1679' direct represents '1' with '6995'
6993 -6994 6995 0
-6995 6994 0
-6995 -6993 0
c Var 'aux1679' direct represents '2' with '-6994'
6993 6995 -6994 0
c Encoding variable: aux1680 with domain: int(0..2) (representing constraint ((x_00005_00007=1) + (x_00004_00007=1)))
c Both direct and order encoding.
c Var 'aux1680' order represents '0' with '6996'
c Var 'aux1680' direct represents '0' with '6996'
c Var 'aux1680' order represents '1' with '6997'
-6996 6997 0
c Var 'aux1680' direct represents '1' with '6998'
6996 -6997 6998 0
-6998 6997 0
-6998 -6996 0
c Var 'aux1680' direct represents '2' with '-6997'
6996 6998 -6997 0
c Encoding variable: aux1681 with domain: int(0..2) (representing constraint ((x_00004_00009=1) + (x_00004_00008=1)))
c Both direct and order encoding.
c Var 'aux1681' order represents '0' with '6999'
c Var 'aux1681' direct represents '0' with '6999'
c Var 'aux1681' order represents '1' with '7000'
-6999 7000 0
c Var 'aux1681' direct represents '1' with '7001'
6999 -7000 7001 0
-7001 7000 0
-7001 -6999 0
c Var 'aux1681' direct represents '2' with '-7000'
6999 7001 -7000 0
c Encoding variable: aux1682 with domain: int(0..3) (representing constraint ((x_00006_00009=1) + aux1681))
c Both direct and order encoding.
c Var 'aux1682' order represents '0' with '7002'
c Var 'aux1682' direct represents '0' with '7002'
c Var 'aux1682' order represents '1' with '7003'
-7002 7003 0
c Var 'aux1682' direct represents '1' with '7004'
7002 -7003 7004 0
-7004 7003 0
-7004 -7002 0
c Var 'aux1682' order represents '2' with '7005'
-7003 7005 0
c Var 'aux1682' direct represents '2' with '7006'
7003 -7005 7006 0
-7006 7005 0
-7006 -7003 0
c Var 'aux1682' direct represents '3' with '-7005'
7002 7004 7006 -7005 0
c Encoding variable: aux1683 with domain: int(0..4) (representing constraint (aux1678 + aux1680))
c Both direct and order encoding.
c Var 'aux1683' order represents '0' with '7007'
c Var 'aux1683' direct represents '0' with '7007'
c Var 'aux1683' order represents '1' with '7008'
-7007 7008 0
c Var 'aux1683' direct represents '1' with '7009'
7007 -7008 7009 0
-7009 7008 0
-7009 -7007 0
c Var 'aux1683' order represents '2' with '7010'
-7008 7010 0
c Var 'aux1683' direct represents '2' with '7011'
7008 -7010 7011 0
-7011 7010 0
-7011 -7008 0
c Var 'aux1683' order represents '3' with '7012'
-7010 7012 0
c Var 'aux1683' direct represents '3' with '7013'
7010 -7012 7013 0
-7013 7012 0
-7013 -7010 0
c Var 'aux1683' direct represents '4' with '-7012'
7007 7009 7011 7013 -7012 0
c Encoding variable: aux1684 with domain: int(0..2) (representing constraint ((x_00006_00007=2) + (x_00005_00009=2)))
c Both direct and order encoding.
c Var 'aux1684' order represents '0' with '7014'
c Var 'aux1684' direct represents '0' with '7014'
c Var 'aux1684' order represents '1' with '7015'
-7014 7015 0
c Var 'aux1684' direct represents '1' with '7016'
7014 -7015 7016 0
-7016 7015 0
-7016 -7014 0
c Var 'aux1684' direct represents '2' with '-7015'
7014 7016 -7015 0
c Encoding variable: aux1685 with domain: int(0..2) (representing constraint ((x_00005_00008=2) + (x_00006_00008=2)))
c Both direct and order encoding.
c Var 'aux1685' order represents '0' with '7017'
c Var 'aux1685' direct represents '0' with '7017'
c Var 'aux1685' order represents '1' with '7018'
-7017 7018 0
c Var 'aux1685' direct represents '1' with '7019'
7017 -7018 7019 0
-7019 7018 0
-7019 -7017 0
c Var 'aux1685' direct represents '2' with '-7018'
7017 7019 -7018 0
c Encoding variable: aux1686 with domain: int(0..2) (representing constraint ((x_00005_00007=2) + (x_00004_00007=2)))
c Both direct and order encoding.
c Var 'aux1686' order represents '0' with '7020'
c Var 'aux1686' direct represents '0' with '7020'
c Var 'aux1686' order represents '1' with '7021'
-7020 7021 0
c Var 'aux1686' direct represents '1' with '7022'
7020 -7021 7022 0
-7022 7021 0
-7022 -7020 0
c Var 'aux1686' direct represents '2' with '-7021'
7020 7022 -7021 0
c Encoding variable: aux1687 with domain: int(0..2) (representing constraint ((x_00004_00009=2) + (x_00004_00008=2)))
c Both direct and order encoding.
c Var 'aux1687' order represents '0' with '7023'
c Var 'aux1687' direct represents '0' with '7023'
c Var 'aux1687' order represents '1' with '7024'
-7023 7024 0
c Var 'aux1687' direct represents '1' with '7025'
7023 -7024 7025 0
-7025 7024 0
-7025 -7023 0
c Var 'aux1687' direct represents '2' with '-7024'
7023 7025 -7024 0
c Encoding variable: aux1688 with domain: int(0..3) (representing constraint ((x_00006_00009=2) + aux1687))
c Both direct and order encoding.
c Var 'aux1688' order represents '0' with '7026'
c Var 'aux1688' direct represents '0' with '7026'
c Var 'aux1688' order represents '1' with '7027'
-7026 7027 0
c Var 'aux1688' direct represents '1' with '7028'
7026 -7027 7028 0
-7028 7027 0
-7028 -7026 0
c Var 'aux1688' order represents '2' with '7029'
-7027 7029 0
c Var 'aux1688' direct represents '2' with '7030'
7027 -7029 7030 0
-7030 7029 0
-7030 -7027 0
c Var 'aux1688' direct represents '3' with '-7029'
7026 7028 7030 -7029 0
c Encoding variable: aux1689 with domain: int(0..4) (representing constraint (aux1684 + aux1686))
c Both direct and order encoding.
c Var 'aux1689' order represents '0' with '7031'
c Var 'aux1689' direct represents '0' with '7031'
c Var 'aux1689' order represents '1' with '7032'
-7031 7032 0
c Var 'aux1689' direct represents '1' with '7033'
7031 -7032 7033 0
-7033 7032 0
-7033 -7031 0
c Var 'aux1689' order represents '2' with '7034'
-7032 7034 0
c Var 'aux1689' direct represents '2' with '7035'
7032 -7034 7035 0
-7035 7034 0
-7035 -7032 0
c Var 'aux1689' order represents '3' with '7036'
-7034 7036 0
c Var 'aux1689' direct represents '3' with '7037'
7034 -7036 7037 0
-7037 7036 0
-7037 -7034 0
c Var 'aux1689' direct represents '4' with '-7036'
7031 7033 7035 7037 -7036 0
c Encoding variable: aux1690 with domain: int(0..2) (representing constraint ((x_00006_00007=3) + (x_00005_00009=3)))
c Both direct and order encoding.
c Var 'aux1690' order represents '0' with '7038'
c Var 'aux1690' direct represents '0' with '7038'
c Var 'aux1690' order represents '1' with '7039'
-7038 7039 0
c Var 'aux1690' direct represents '1' with '7040'
7038 -7039 7040 0
-7040 7039 0
-7040 -7038 0
c Var 'aux1690' direct represents '2' with '-7039'
7038 7040 -7039 0
c Encoding variable: aux1691 with domain: int(0..2) (representing constraint ((x_00005_00008=3) + (x_00006_00008=3)))
c Both direct and order encoding.
c Var 'aux1691' order represents '0' with '7041'
c Var 'aux1691' direct represents '0' with '7041'
c Var 'aux1691' order represents '1' with '7042'
-7041 7042 0
c Var 'aux1691' direct represents '1' with '7043'
7041 -7042 7043 0
-7043 7042 0
-7043 -7041 0
c Var 'aux1691' direct represents '2' with '-7042'
7041 7043 -7042 0
c Encoding variable: aux1692 with domain: int(0..2) (representing constraint ((x_00005_00007=3) + (x_00004_00007=3)))
c Both direct and order encoding.
c Var 'aux1692' order represents '0' with '7044'
c Var 'aux1692' direct represents '0' with '7044'
c Var 'aux1692' order represents '1' with '7045'
-7044 7045 0
c Var 'aux1692' direct represents '1' with '7046'
7044 -7045 7046 0
-7046 7045 0
-7046 -7044 0
c Var 'aux1692' direct represents '2' with '-7045'
7044 7046 -7045 0
c Encoding variable: aux1693 with domain: int(0..2) (representing constraint ((x_00004_00009=3) + (x_00004_00008=3)))
c Both direct and order encoding.
c Var 'aux1693' order represents '0' with '7047'
c Var 'aux1693' direct represents '0' with '7047'
c Var 'aux1693' order represents '1' with '7048'
-7047 7048 0
c Var 'aux1693' direct represents '1' with '7049'
7047 -7048 7049 0
-7049 7048 0
-7049 -7047 0
c Var 'aux1693' direct represents '2' with '-7048'
7047 7049 -7048 0
c Encoding variable: aux1694 with domain: int(0..3) (representing constraint ((x_00006_00009=3) + aux1693))
c Both direct and order encoding.
c Var 'aux1694' order represents '0' with '7050'
c Var 'aux1694' direct represents '0' with '7050'
c Var 'aux1694' order represents '1' with '7051'
-7050 7051 0
c Var 'aux1694' direct represents '1' with '7052'
7050 -7051 7052 0
-7052 7051 0
-7052 -7050 0
c Var 'aux1694' order represents '2' with '7053'
-7051 7053 0
c Var 'aux1694' direct represents '2' with '7054'
7051 -7053 7054 0
-7054 7053 0
-7054 -7051 0
c Var 'aux1694' direct represents '3' with '-7053'
7050 7052 7054 -7053 0
c Encoding variable: aux1695 with domain: int(0..4) (representing constraint (aux1690 + aux1692))
c Both direct and order encoding.
c Var 'aux1695' order represents '0' with '7055'
c Var 'aux1695' direct represents '0' with '7055'
c Var 'aux1695' order represents '1' with '7056'
-7055 7056 0
c Var 'aux1695' direct represents '1' with '7057'
7055 -7056 7057 0
-7057 7056 0
-7057 -7055 0
c Var 'aux1695' order represents '2' with '7058'
-7056 7058 0
c Var 'aux1695' direct represents '2' with '7059'
7056 -7058 7059 0
-7059 7058 0
-7059 -7056 0
c Var 'aux1695' order represents '3' with '7060'
-7058 7060 0
c Var 'aux1695' direct represents '3' with '7061'
7058 -7060 7061 0
-7061 7060 0
-7061 -7058 0
c Var 'aux1695' direct represents '4' with '-7060'
7055 7057 7059 7061 -7060 0
c Encoding variable: aux1696 with domain: int(0..2) (representing constraint ((x_00006_00007=4) + (x_00005_00009=4)))
c Both direct and order encoding.
c Var 'aux1696' order represents '0' with '7062'
c Var 'aux1696' direct represents '0' with '7062'
c Var 'aux1696' order represents '1' with '7063'
-7062 7063 0
c Var 'aux1696' direct represents '1' with '7064'
7062 -7063 7064 0
-7064 7063 0
-7064 -7062 0
c Var 'aux1696' direct represents '2' with '-7063'
7062 7064 -7063 0
c Encoding variable: aux1697 with domain: int(0..2) (representing constraint ((x_00005_00008=4) + (x_00006_00008=4)))
c Both direct and order encoding.
c Var 'aux1697' order represents '0' with '7065'
c Var 'aux1697' direct represents '0' with '7065'
c Var 'aux1697' order represents '1' with '7066'
-7065 7066 0
c Var 'aux1697' direct represents '1' with '7067'
7065 -7066 7067 0
-7067 7066 0
-7067 -7065 0
c Var 'aux1697' direct represents '2' with '-7066'
7065 7067 -7066 0
c Encoding variable: aux1698 with domain: int(0..2) (representing constraint ((x_00005_00007=4) + (x_00004_00007=4)))
c Both direct and order encoding.
c Var 'aux1698' order represents '0' with '7068'
c Var 'aux1698' direct represents '0' with '7068'
c Var 'aux1698' order represents '1' with '7069'
-7068 7069 0
c Var 'aux1698' direct represents '1' with '7070'
7068 -7069 7070 0
-7070 7069 0
-7070 -7068 0
c Var 'aux1698' direct represents '2' with '-7069'
7068 7070 -7069 0
c Encoding variable: aux1699 with domain: int(0..2) (representing constraint ((x_00004_00009=4) + (x_00004_00008=4)))
c Both direct and order encoding.
c Var 'aux1699' order represents '0' with '7071'
c Var 'aux1699' direct represents '0' with '7071'
c Var 'aux1699' order represents '1' with '7072'
-7071 7072 0
c Var 'aux1699' direct represents '1' with '7073'
7071 -7072 7073 0
-7073 7072 0
-7073 -7071 0
c Var 'aux1699' direct represents '2' with '-7072'
7071 7073 -7072 0
c Encoding variable: aux1700 with domain: int(0..3) (representing constraint ((x_00006_00009=4) + aux1699))
c Both direct and order encoding.
c Var 'aux1700' order represents '0' with '7074'
c Var 'aux1700' direct represents '0' with '7074'
c Var 'aux1700' order represents '1' with '7075'
-7074 7075 0
c Var 'aux1700' direct represents '1' with '7076'
7074 -7075 7076 0
-7076 7075 0
-7076 -7074 0
c Var 'aux1700' order represents '2' with '7077'
-7075 7077 0
c Var 'aux1700' direct represents '2' with '7078'
7075 -7077 7078 0
-7078 7077 0
-7078 -7075 0
c Var 'aux1700' direct represents '3' with '-7077'
7074 7076 7078 -7077 0
c Encoding variable: aux1701 with domain: int(0..4) (representing constraint (aux1696 + aux1698))
c Both direct and order encoding.
c Var 'aux1701' order represents '0' with '7079'
c Var 'aux1701' direct represents '0' with '7079'
c Var 'aux1701' order represents '1' with '7080'
-7079 7080 0
c Var 'aux1701' direct represents '1' with '7081'
7079 -7080 7081 0
-7081 7080 0
-7081 -7079 0
c Var 'aux1701' order represents '2' with '7082'
-7080 7082 0
c Var 'aux1701' direct represents '2' with '7083'
7080 -7082 7083 0
-7083 7082 0
-7083 -7080 0
c Var 'aux1701' order represents '3' with '7084'
-7082 7084 0
c Var 'aux1701' direct represents '3' with '7085'
7082 -7084 7085 0
-7085 7084 0
-7085 -7082 0
c Var 'aux1701' direct represents '4' with '-7084'
7079 7081 7083 7085 -7084 0
c Encoding variable: aux1702 with domain: int(0..2) (representing constraint ((x_00006_00007=5) + (x_00005_00009=5)))
c Both direct and order encoding.
c Var 'aux1702' order represents '0' with '7086'
c Var 'aux1702' direct represents '0' with '7086'
c Var 'aux1702' order represents '1' with '7087'
-7086 7087 0
c Var 'aux1702' direct represents '1' with '7088'
7086 -7087 7088 0
-7088 7087 0
-7088 -7086 0
c Var 'aux1702' direct represents '2' with '-7087'
7086 7088 -7087 0
c Encoding variable: aux1703 with domain: int(0..2) (representing constraint ((x_00005_00008=5) + (x_00006_00008=5)))
c Both direct and order encoding.
c Var 'aux1703' order represents '0' with '7089'
c Var 'aux1703' direct represents '0' with '7089'
c Var 'aux1703' order represents '1' with '7090'
-7089 7090 0
c Var 'aux1703' direct represents '1' with '7091'
7089 -7090 7091 0
-7091 7090 0
-7091 -7089 0
c Var 'aux1703' direct represents '2' with '-7090'
7089 7091 -7090 0
c Encoding variable: aux1704 with domain: int(0..2) (representing constraint ((x_00005_00007=5) + (x_00004_00007=5)))
c Both direct and order encoding.
c Var 'aux1704' order represents '0' with '7092'
c Var 'aux1704' direct represents '0' with '7092'
c Var 'aux1704' order represents '1' with '7093'
-7092 7093 0
c Var 'aux1704' direct represents '1' with '7094'
7092 -7093 7094 0
-7094 7093 0
-7094 -7092 0
c Var 'aux1704' direct represents '2' with '-7093'
7092 7094 -7093 0
c Encoding variable: aux1705 with domain: int(0..2) (representing constraint ((x_00004_00009=5) + (x_00004_00008=5)))
c Both direct and order encoding.
c Var 'aux1705' order represents '0' with '7095'
c Var 'aux1705' direct represents '0' with '7095'
c Var 'aux1705' order represents '1' with '7096'
-7095 7096 0
c Var 'aux1705' direct represents '1' with '7097'
7095 -7096 7097 0
-7097 7096 0
-7097 -7095 0
c Var 'aux1705' direct represents '2' with '-7096'
7095 7097 -7096 0
c Encoding variable: aux1706 with domain: int(0..3) (representing constraint ((x_00006_00009=5) + aux1705))
c Both direct and order encoding.
c Var 'aux1706' order represents '0' with '7098'
c Var 'aux1706' direct represents '0' with '7098'
c Var 'aux1706' order represents '1' with '7099'
-7098 7099 0
c Var 'aux1706' direct represents '1' with '7100'
7098 -7099 7100 0
-7100 7099 0
-7100 -7098 0
c Var 'aux1706' order represents '2' with '7101'
-7099 7101 0
c Var 'aux1706' direct represents '2' with '7102'
7099 -7101 7102 0
-7102 7101 0
-7102 -7099 0
c Var 'aux1706' direct represents '3' with '-7101'
7098 7100 7102 -7101 0
c Encoding variable: aux1707 with domain: int(0..4) (representing constraint (aux1702 + aux1704))
c Both direct and order encoding.
c Var 'aux1707' order represents '0' with '7103'
c Var 'aux1707' direct represents '0' with '7103'
c Var 'aux1707' order represents '1' with '7104'
-7103 7104 0
c Var 'aux1707' direct represents '1' with '7105'
7103 -7104 7105 0
-7105 7104 0
-7105 -7103 0
c Var 'aux1707' order represents '2' with '7106'
-7104 7106 0
c Var 'aux1707' direct represents '2' with '7107'
7104 -7106 7107 0
-7107 7106 0
-7107 -7104 0
c Var 'aux1707' order represents '3' with '7108'
-7106 7108 0
c Var 'aux1707' direct represents '3' with '7109'
7106 -7108 7109 0
-7109 7108 0
-7109 -7106 0
c Var 'aux1707' direct represents '4' with '-7108'
7103 7105 7107 7109 -7108 0
c Encoding variable: aux1708 with domain: int(0..2) (representing constraint ((x_00006_00007=6) + (x_00005_00009=6)))
c Both direct and order encoding.
c Var 'aux1708' order represents '0' with '7110'
c Var 'aux1708' direct represents '0' with '7110'
c Var 'aux1708' order represents '1' with '7111'
-7110 7111 0
c Var 'aux1708' direct represents '1' with '7112'
7110 -7111 7112 0
-7112 7111 0
-7112 -7110 0
c Var 'aux1708' direct represents '2' with '-7111'
7110 7112 -7111 0
c Encoding variable: aux1709 with domain: int(0..2) (representing constraint ((x_00005_00008=6) + (x_00006_00008=6)))
c Both direct and order encoding.
c Var 'aux1709' order represents '0' with '7113'
c Var 'aux1709' direct represents '0' with '7113'
c Var 'aux1709' order represents '1' with '7114'
-7113 7114 0
c Var 'aux1709' direct represents '1' with '7115'
7113 -7114 7115 0
-7115 7114 0
-7115 -7113 0
c Var 'aux1709' direct represents '2' with '-7114'
7113 7115 -7114 0
c Encoding variable: aux1710 with domain: int(0..2) (representing constraint ((x_00005_00007=6) + (x_00004_00007=6)))
c Both direct and order encoding.
c Var 'aux1710' order represents '0' with '7116'
c Var 'aux1710' direct represents '0' with '7116'
c Var 'aux1710' order represents '1' with '7117'
-7116 7117 0
c Var 'aux1710' direct represents '1' with '7118'
7116 -7117 7118 0
-7118 7117 0
-7118 -7116 0
c Var 'aux1710' direct represents '2' with '-7117'
7116 7118 -7117 0
c Encoding variable: aux1711 with domain: int(0..2) (representing constraint ((x_00004_00009=6) + (x_00004_00008=6)))
c Both direct and order encoding.
c Var 'aux1711' order represents '0' with '7119'
c Var 'aux1711' direct represents '0' with '7119'
c Var 'aux1711' order represents '1' with '7120'
-7119 7120 0
c Var 'aux1711' direct represents '1' with '7121'
7119 -7120 7121 0
-7121 7120 0
-7121 -7119 0
c Var 'aux1711' direct represents '2' with '-7120'
7119 7121 -7120 0
c Encoding variable: aux1712 with domain: int(0..3) (representing constraint ((x_00006_00009=6) + aux1711))
c Both direct and order encoding.
c Var 'aux1712' order represents '0' with '7122'
c Var 'aux1712' direct represents '0' with '7122'
c Var 'aux1712' order represents '1' with '7123'
-7122 7123 0
c Var 'aux1712' direct represents '1' with '7124'
7122 -7123 7124 0
-7124 7123 0
-7124 -7122 0
c Var 'aux1712' order represents '2' with '7125'
-7123 7125 0
c Var 'aux1712' direct represents '2' with '7126'
7123 -7125 7126 0
-7126 7125 0
-7126 -7123 0
c Var 'aux1712' direct represents '3' with '-7125'
7122 7124 7126 -7125 0
c Encoding variable: aux1713 with domain: int(0..4) (representing constraint (aux1708 + aux1710))
c Both direct and order encoding.
c Var 'aux1713' order represents '0' with '7127'
c Var 'aux1713' direct represents '0' with '7127'
c Var 'aux1713' order represents '1' with '7128'
-7127 7128 0
c Var 'aux1713' direct represents '1' with '7129'
7127 -7128 7129 0
-7129 7128 0
-7129 -7127 0
c Var 'aux1713' order represents '2' with '7130'
-7128 7130 0
c Var 'aux1713' direct represents '2' with '7131'
7128 -7130 7131 0
-7131 7130 0
-7131 -7128 0
c Var 'aux1713' order represents '3' with '7132'
-7130 7132 0
c Var 'aux1713' direct represents '3' with '7133'
7130 -7132 7133 0
-7133 7132 0
-7133 -7130 0
c Var 'aux1713' direct represents '4' with '-7132'
7127 7129 7131 7133 -7132 0
c Encoding variable: aux1714 with domain: int(0..2) (representing constraint ((x_00006_00007=7) + (x_00005_00009=7)))
c Both direct and order encoding.
c Var 'aux1714' order represents '0' with '7134'
c Var 'aux1714' direct represents '0' with '7134'
c Var 'aux1714' order represents '1' with '7135'
-7134 7135 0
c Var 'aux1714' direct represents '1' with '7136'
7134 -7135 7136 0
-7136 7135 0
-7136 -7134 0
c Var 'aux1714' direct represents '2' with '-7135'
7134 7136 -7135 0
c Encoding variable: aux1715 with domain: int(0..2) (representing constraint ((x_00005_00008=7) + (x_00006_00008=7)))
c Both direct and order encoding.
c Var 'aux1715' order represents '0' with '7137'
c Var 'aux1715' direct represents '0' with '7137'
c Var 'aux1715' order represents '1' with '7138'
-7137 7138 0
c Var 'aux1715' direct represents '1' with '7139'
7137 -7138 7139 0
-7139 7138 0
-7139 -7137 0
c Var 'aux1715' direct represents '2' with '-7138'
7137 7139 -7138 0
c Encoding variable: aux1716 with domain: int(0..2) (representing constraint ((x_00005_00007=7) + (x_00004_00007=7)))
c Both direct and order encoding.
c Var 'aux1716' order represents '0' with '7140'
c Var 'aux1716' direct represents '0' with '7140'
c Var 'aux1716' order represents '1' with '7141'
-7140 7141 0
c Var 'aux1716' direct represents '1' with '7142'
7140 -7141 7142 0
-7142 7141 0
-7142 -7140 0
c Var 'aux1716' direct represents '2' with '-7141'
7140 7142 -7141 0
c Encoding variable: aux1717 with domain: int(0..2) (representing constraint ((x_00004_00009=7) + (x_00004_00008=7)))
c Both direct and order encoding.
c Var 'aux1717' order represents '0' with '7143'
c Var 'aux1717' direct represents '0' with '7143'
c Var 'aux1717' order represents '1' with '7144'
-7143 7144 0
c Var 'aux1717' direct represents '1' with '7145'
7143 -7144 7145 0
-7145 7144 0
-7145 -7143 0
c Var 'aux1717' direct represents '2' with '-7144'
7143 7145 -7144 0
c Encoding variable: aux1718 with domain: int(0..3) (representing constraint ((x_00006_00009=7) + aux1717))
c Both direct and order encoding.
c Var 'aux1718' order represents '0' with '7146'
c Var 'aux1718' direct represents '0' with '7146'
c Var 'aux1718' order represents '1' with '7147'
-7146 7147 0
c Var 'aux1718' direct represents '1' with '7148'
7146 -7147 7148 0
-7148 7147 0
-7148 -7146 0
c Var 'aux1718' order represents '2' with '7149'
-7147 7149 0
c Var 'aux1718' direct represents '2' with '7150'
7147 -7149 7150 0
-7150 7149 0
-7150 -7147 0
c Var 'aux1718' direct represents '3' with '-7149'
7146 7148 7150 -7149 0
c Encoding variable: aux1719 with domain: int(0..4) (representing constraint (aux1714 + aux1716))
c Both direct and order encoding.
c Var 'aux1719' order represents '0' with '7151'
c Var 'aux1719' direct represents '0' with '7151'
c Var 'aux1719' order represents '1' with '7152'
-7151 7152 0
c Var 'aux1719' direct represents '1' with '7153'
7151 -7152 7153 0
-7153 7152 0
-7153 -7151 0
c Var 'aux1719' order represents '2' with '7154'
-7152 7154 0
c Var 'aux1719' direct represents '2' with '7155'
7152 -7154 7155 0
-7155 7154 0
-7155 -7152 0
c Var 'aux1719' order represents '3' with '7156'
-7154 7156 0
c Var 'aux1719' direct represents '3' with '7157'
7154 -7156 7157 0
-7157 7156 0
-7157 -7154 0
c Var 'aux1719' direct represents '4' with '-7156'
7151 7153 7155 7157 -7156 0
c Encoding variable: aux1720 with domain: int(0..2) (representing constraint ((x_00006_00007=8) + (x_00005_00009=8)))
c Both direct and order encoding.
c Var 'aux1720' order represents '0' with '7158'
c Var 'aux1720' direct represents '0' with '7158'
c Var 'aux1720' order represents '1' with '7159'
-7158 7159 0
c Var 'aux1720' direct represents '1' with '7160'
7158 -7159 7160 0
-7160 7159 0
-7160 -7158 0
c Var 'aux1720' direct represents '2' with '-7159'
7158 7160 -7159 0
c Encoding variable: aux1721 with domain: int(0..2) (representing constraint ((x_00005_00008=8) + (x_00006_00008=8)))
c Both direct and order encoding.
c Var 'aux1721' order represents '0' with '7161'
c Var 'aux1721' direct represents '0' with '7161'
c Var 'aux1721' order represents '1' with '7162'
-7161 7162 0
c Var 'aux1721' direct represents '1' with '7163'
7161 -7162 7163 0
-7163 7162 0
-7163 -7161 0
c Var 'aux1721' direct represents '2' with '-7162'
7161 7163 -7162 0
c Encoding variable: aux1722 with domain: int(0..2) (representing constraint ((x_00005_00007=8) + (x_00004_00007=8)))
c Both direct and order encoding.
c Var 'aux1722' order represents '0' with '7164'
c Var 'aux1722' direct represents '0' with '7164'
c Var 'aux1722' order represents '1' with '7165'
-7164 7165 0
c Var 'aux1722' direct represents '1' with '7166'
7164 -7165 7166 0
-7166 7165 0
-7166 -7164 0
c Var 'aux1722' direct represents '2' with '-7165'
7164 7166 -7165 0
c Encoding variable: aux1723 with domain: int(0..2) (representing constraint ((x_00004_00009=8) + (x_00004_00008=8)))
c Both direct and order encoding.
c Var 'aux1723' order represents '0' with '7167'
c Var 'aux1723' direct represents '0' with '7167'
c Var 'aux1723' order represents '1' with '7168'
-7167 7168 0
c Var 'aux1723' direct represents '1' with '7169'
7167 -7168 7169 0
-7169 7168 0
-7169 -7167 0
c Var 'aux1723' direct represents '2' with '-7168'
7167 7169 -7168 0
c Encoding variable: aux1724 with domain: int(0..3) (representing constraint ((x_00006_00009=8) + aux1723))
c Both direct and order encoding.
c Var 'aux1724' order represents '0' with '7170'
c Var 'aux1724' direct represents '0' with '7170'
c Var 'aux1724' order represents '1' with '7171'
-7170 7171 0
c Var 'aux1724' direct represents '1' with '7172'
7170 -7171 7172 0
-7172 7171 0
-7172 -7170 0
c Var 'aux1724' order represents '2' with '7173'
-7171 7173 0
c Var 'aux1724' direct represents '2' with '7174'
7171 -7173 7174 0
-7174 7173 0
-7174 -7171 0
c Var 'aux1724' direct represents '3' with '-7173'
7170 7172 7174 -7173 0
c Encoding variable: aux1725 with domain: int(0..4) (representing constraint (aux1720 + aux1722))
c Both direct and order encoding.
c Var 'aux1725' order represents '0' with '7175'
c Var 'aux1725' direct represents '0' with '7175'
c Var 'aux1725' order represents '1' with '7176'
-7175 7176 0
c Var 'aux1725' direct represents '1' with '7177'
7175 -7176 7177 0
-7177 7176 0
-7177 -7175 0
c Var 'aux1725' order represents '2' with '7178'
-7176 7178 0
c Var 'aux1725' direct represents '2' with '7179'
7176 -7178 7179 0
-7179 7178 0
-7179 -7176 0
c Var 'aux1725' order represents '3' with '7180'
-7178 7180 0
c Var 'aux1725' direct represents '3' with '7181'
7178 -7180 7181 0
-7181 7180 0
-7181 -7178 0
c Var 'aux1725' direct represents '4' with '-7180'
7175 7177 7179 7181 -7180 0
c Encoding variable: aux1726 with domain: int(0..2) (representing constraint ((x_00006_00007=9) + (x_00005_00009=9)))
c Both direct and order encoding.
c Var 'aux1726' order represents '0' with '7182'
c Var 'aux1726' direct represents '0' with '7182'
c Var 'aux1726' order represents '1' with '7183'
-7182 7183 0
c Var 'aux1726' direct represents '1' with '7184'
7182 -7183 7184 0
-7184 7183 0
-7184 -7182 0
c Var 'aux1726' direct represents '2' with '-7183'
7182 7184 -7183 0
c Encoding variable: aux1727 with domain: int(0..2) (representing constraint ((x_00005_00008=9) + (x_00006_00008=9)))
c Both direct and order encoding.
c Var 'aux1727' order represents '0' with '7185'
c Var 'aux1727' direct represents '0' with '7185'
c Var 'aux1727' order represents '1' with '7186'
-7185 7186 0
c Var 'aux1727' direct represents '1' with '7187'
7185 -7186 7187 0
-7187 7186 0
-7187 -7185 0
c Var 'aux1727' direct represents '2' with '-7186'
7185 7187 -7186 0
c Encoding variable: aux1728 with domain: int(0..2) (representing constraint ((x_00005_00007=9) + (x_00004_00007=9)))
c Both direct and order encoding.
c Var 'aux1728' order represents '0' with '7188'
c Var 'aux1728' direct represents '0' with '7188'
c Var 'aux1728' order represents '1' with '7189'
-7188 7189 0
c Var 'aux1728' direct represents '1' with '7190'
7188 -7189 7190 0
-7190 7189 0
-7190 -7188 0
c Var 'aux1728' direct represents '2' with '-7189'
7188 7190 -7189 0
c Encoding variable: aux1729 with domain: int(0..2) (representing constraint ((x_00004_00009=9) + (x_00004_00008=9)))
c Both direct and order encoding.
c Var 'aux1729' order represents '0' with '7191'
c Var 'aux1729' direct represents '0' with '7191'
c Var 'aux1729' order represents '1' with '7192'
-7191 7192 0
c Var 'aux1729' direct represents '1' with '7193'
7191 -7192 7193 0
-7193 7192 0
-7193 -7191 0
c Var 'aux1729' direct represents '2' with '-7192'
7191 7193 -7192 0
c Encoding variable: aux1730 with domain: int(0..3) (representing constraint ((x_00006_00009=9) + aux1729))
c Both direct and order encoding.
c Var 'aux1730' order represents '0' with '7194'
c Var 'aux1730' direct represents '0' with '7194'
c Var 'aux1730' order represents '1' with '7195'
-7194 7195 0
c Var 'aux1730' direct represents '1' with '7196'
7194 -7195 7196 0
-7196 7195 0
-7196 -7194 0
c Var 'aux1730' order represents '2' with '7197'
-7195 7197 0
c Var 'aux1730' direct represents '2' with '7198'
7195 -7197 7198 0
-7198 7197 0
-7198 -7195 0
c Var 'aux1730' direct represents '3' with '-7197'
7194 7196 7198 -7197 0
c Encoding variable: aux1731 with domain: int(0..4) (representing constraint (aux1726 + aux1728))
c Both direct and order encoding.
c Var 'aux1731' order represents '0' with '7199'
c Var 'aux1731' direct represents '0' with '7199'
c Var 'aux1731' order represents '1' with '7200'
-7199 7200 0
c Var 'aux1731' direct represents '1' with '7201'
7199 -7200 7201 0
-7201 7200 0
-7201 -7199 0
c Var 'aux1731' order represents '2' with '7202'
-7200 7202 0
c Var 'aux1731' direct represents '2' with '7203'
7200 -7202 7203 0
-7203 7202 0
-7203 -7200 0
c Var 'aux1731' order represents '3' with '7204'
-7202 7204 0
c Var 'aux1731' direct represents '3' with '7205'
7202 -7204 7205 0
-7205 7204 0
-7205 -7202 0
c Var 'aux1731' direct represents '4' with '-7204'
7199 7201 7203 7205 -7204 0
c Encoding variable: aux1732 with domain: int(0..2) (representing constraint ((x_00008_00001=1) + (x_00007_00003=1)))
c Both direct and order encoding.
c Var 'aux1732' order represents '0' with '7206'
c Var 'aux1732' direct represents '0' with '7206'
c Var 'aux1732' order represents '1' with '7207'
-7206 7207 0
c Var 'aux1732' direct represents '1' with '7208'
7206 -7207 7208 0
-7208 7207 0
-7208 -7206 0
c Var 'aux1732' direct represents '2' with '-7207'
7206 7208 -7207 0
c Encoding variable: aux1733 with domain: int(0..2) (representing constraint ((x_00007_00002=1) + (x_00008_00002=1)))
c Both direct and order encoding.
c Var 'aux1733' order represents '0' with '7209'
c Var 'aux1733' direct represents '0' with '7209'
c Var 'aux1733' order represents '1' with '7210'
-7209 7210 0
c Var 'aux1733' direct represents '1' with '7211'
7209 -7210 7211 0
-7211 7210 0
-7211 -7209 0
c Var 'aux1733' direct represents '2' with '-7210'
7209 7211 -7210 0
c Encoding variable: aux1734 with domain: int(0..2) (representing constraint ((x_00007_00001=1) + (x_00009_00001=1)))
c Both direct and order encoding.
c Var 'aux1734' order represents '0' with '7212'
c Var 'aux1734' direct represents '0' with '7212'
c Var 'aux1734' order represents '1' with '7213'
-7212 7213 0
c Var 'aux1734' direct represents '1' with '7214'
7212 -7213 7214 0
-7214 7213 0
-7214 -7212 0
c Var 'aux1734' direct represents '2' with '-7213'
7212 7214 -7213 0
c Encoding variable: aux1735 with domain: int(0..2) (representing constraint ((x_00009_00003=1) + (x_00009_00002=1)))
c Both direct and order encoding.
c Var 'aux1735' order represents '0' with '7215'
c Var 'aux1735' direct represents '0' with '7215'
c Var 'aux1735' order represents '1' with '7216'
-7215 7216 0
c Var 'aux1735' direct represents '1' with '7217'
7215 -7216 7217 0
-7217 7216 0
-7217 -7215 0
c Var 'aux1735' direct represents '2' with '-7216'
7215 7217 -7216 0
c Encoding variable: aux1736 with domain: int(0..3) (representing constraint ((x_00008_00003=1) + aux1735))
c Both direct and order encoding.
c Var 'aux1736' order represents '0' with '7218'
c Var 'aux1736' direct represents '0' with '7218'
c Var 'aux1736' order represents '1' with '7219'
-7218 7219 0
c Var 'aux1736' direct represents '1' with '7220'
7218 -7219 7220 0
-7220 7219 0
-7220 -7218 0
c Var 'aux1736' order represents '2' with '7221'
-7219 7221 0
c Var 'aux1736' direct represents '2' with '7222'
7219 -7221 7222 0
-7222 7221 0
-7222 -7219 0
c Var 'aux1736' direct represents '3' with '-7221'
7218 7220 7222 -7221 0
c Encoding variable: aux1737 with domain: int(0..4) (representing constraint (aux1732 + aux1734))
c Both direct and order encoding.
c Var 'aux1737' order represents '0' with '7223'
c Var 'aux1737' direct represents '0' with '7223'
c Var 'aux1737' order represents '1' with '7224'
-7223 7224 0
c Var 'aux1737' direct represents '1' with '7225'
7223 -7224 7225 0
-7225 7224 0
-7225 -7223 0
c Var 'aux1737' order represents '2' with '7226'
-7224 7226 0
c Var 'aux1737' direct represents '2' with '7227'
7224 -7226 7227 0
-7227 7226 0
-7227 -7224 0
c Var 'aux1737' order represents '3' with '7228'
-7226 7228 0
c Var 'aux1737' direct represents '3' with '7229'
7226 -7228 7229 0
-7229 7228 0
-7229 -7226 0
c Var 'aux1737' direct represents '4' with '-7228'
7223 7225 7227 7229 -7228 0
c Encoding variable: aux1738 with domain: int(0..2) (representing constraint ((x_00008_00001=2) + (x_00007_00003=2)))
c Both direct and order encoding.
c Var 'aux1738' order represents '0' with '7230'
c Var 'aux1738' direct represents '0' with '7230'
c Var 'aux1738' order represents '1' with '7231'
-7230 7231 0
c Var 'aux1738' direct represents '1' with '7232'
7230 -7231 7232 0
-7232 7231 0
-7232 -7230 0
c Var 'aux1738' direct represents '2' with '-7231'
7230 7232 -7231 0
c Encoding variable: aux1739 with domain: int(0..2) (representing constraint ((x_00007_00002=2) + (x_00008_00002=2)))
c Both direct and order encoding.
c Var 'aux1739' order represents '0' with '7233'
c Var 'aux1739' direct represents '0' with '7233'
c Var 'aux1739' order represents '1' with '7234'
-7233 7234 0
c Var 'aux1739' direct represents '1' with '7235'
7233 -7234 7235 0
-7235 7234 0
-7235 -7233 0
c Var 'aux1739' direct represents '2' with '-7234'
7233 7235 -7234 0
c Encoding variable: aux1740 with domain: int(0..2) (representing constraint ((x_00007_00001=2) + (x_00009_00001=2)))
c Both direct and order encoding.
c Var 'aux1740' order represents '0' with '7236'
c Var 'aux1740' direct represents '0' with '7236'
c Var 'aux1740' order represents '1' with '7237'
-7236 7237 0
c Var 'aux1740' direct represents '1' with '7238'
7236 -7237 7238 0
-7238 7237 0
-7238 -7236 0
c Var 'aux1740' direct represents '2' with '-7237'
7236 7238 -7237 0
c Encoding variable: aux1741 with domain: int(0..2) (representing constraint ((x_00009_00003=2) + (x_00009_00002=2)))
c Both direct and order encoding.
c Var 'aux1741' order represents '0' with '7239'
c Var 'aux1741' direct represents '0' with '7239'
c Var 'aux1741' order represents '1' with '7240'
-7239 7240 0
c Var 'aux1741' direct represents '1' with '7241'
7239 -7240 7241 0
-7241 7240 0
-7241 -7239 0
c Var 'aux1741' direct represents '2' with '-7240'
7239 7241 -7240 0
c Encoding variable: aux1742 with domain: int(0..3) (representing constraint ((x_00008_00003=2) + aux1741))
c Both direct and order encoding.
c Var 'aux1742' order represents '0' with '7242'
c Var 'aux1742' direct represents '0' with '7242'
c Var 'aux1742' order represents '1' with '7243'
-7242 7243 0
c Var 'aux1742' direct represents '1' with '7244'
7242 -7243 7244 0
-7244 7243 0
-7244 -7242 0
c Var 'aux1742' order represents '2' with '7245'
-7243 7245 0
c Var 'aux1742' direct represents '2' with '7246'
7243 -7245 7246 0
-7246 7245 0
-7246 -7243 0
c Var 'aux1742' direct represents '3' with '-7245'
7242 7244 7246 -7245 0
c Encoding variable: aux1743 with domain: int(0..4) (representing constraint (aux1738 + aux1740))
c Both direct and order encoding.
c Var 'aux1743' order represents '0' with '7247'
c Var 'aux1743' direct represents '0' with '7247'
c Var 'aux1743' order represents '1' with '7248'
-7247 7248 0
c Var 'aux1743' direct represents '1' with '7249'
7247 -7248 7249 0
-7249 7248 0
-7249 -7247 0
c Var 'aux1743' order represents '2' with '7250'
-7248 7250 0
c Var 'aux1743' direct represents '2' with '7251'
7248 -7250 7251 0
-7251 7250 0
-7251 -7248 0
c Var 'aux1743' order represents '3' with '7252'
-7250 7252 0
c Var 'aux1743' direct represents '3' with '7253'
7250 -7252 7253 0
-7253 7252 0
-7253 -7250 0
c Var 'aux1743' direct represents '4' with '-7252'
7247 7249 7251 7253 -7252 0
c Encoding variable: aux1744 with domain: int(0..2) (representing constraint ((x_00008_00001=3) + (x_00007_00003=3)))
c Both direct and order encoding.
c Var 'aux1744' order represents '0' with '7254'
c Var 'aux1744' direct represents '0' with '7254'
c Var 'aux1744' order represents '1' with '7255'
-7254 7255 0
c Var 'aux1744' direct represents '1' with '7256'
7254 -7255 7256 0
-7256 7255 0
-7256 -7254 0
c Var 'aux1744' direct represents '2' with '-7255'
7254 7256 -7255 0
c Encoding variable: aux1745 with domain: int(0..2) (representing constraint ((x_00007_00002=3) + (x_00008_00002=3)))
c Both direct and order encoding.
c Var 'aux1745' order represents '0' with '7257'
c Var 'aux1745' direct represents '0' with '7257'
c Var 'aux1745' order represents '1' with '7258'
-7257 7258 0
c Var 'aux1745' direct represents '1' with '7259'
7257 -7258 7259 0
-7259 7258 0
-7259 -7257 0
c Var 'aux1745' direct represents '2' with '-7258'
7257 7259 -7258 0
c Encoding variable: aux1746 with domain: int(0..2) (representing constraint ((x_00007_00001=3) + (x_00009_00001=3)))
c Both direct and order encoding.
c Var 'aux1746' order represents '0' with '7260'
c Var 'aux1746' direct represents '0' with '7260'
c Var 'aux1746' order represents '1' with '7261'
-7260 7261 0
c Var 'aux1746' direct represents '1' with '7262'
7260 -7261 7262 0
-7262 7261 0
-7262 -7260 0
c Var 'aux1746' direct represents '2' with '-7261'
7260 7262 -7261 0
c Encoding variable: aux1747 with domain: int(0..2) (representing constraint ((x_00009_00003=3) + (x_00009_00002=3)))
c Both direct and order encoding.
c Var 'aux1747' order represents '0' with '7263'
c Var 'aux1747' direct represents '0' with '7263'
c Var 'aux1747' order represents '1' with '7264'
-7263 7264 0
c Var 'aux1747' direct represents '1' with '7265'
7263 -7264 7265 0
-7265 7264 0
-7265 -7263 0
c Var 'aux1747' direct represents '2' with '-7264'
7263 7265 -7264 0
c Encoding variable: aux1748 with domain: int(0..3) (representing constraint ((x_00008_00003=3) + aux1747))
c Both direct and order encoding.
c Var 'aux1748' order represents '0' with '7266'
c Var 'aux1748' direct represents '0' with '7266'
c Var 'aux1748' order represents '1' with '7267'
-7266 7267 0
c Var 'aux1748' direct represents '1' with '7268'
7266 -7267 7268 0
-7268 7267 0
-7268 -7266 0
c Var 'aux1748' order represents '2' with '7269'
-7267 7269 0
c Var 'aux1748' direct represents '2' with '7270'
7267 -7269 7270 0
-7270 7269 0
-7270 -7267 0
c Var 'aux1748' direct represents '3' with '-7269'
7266 7268 7270 -7269 0
c Encoding variable: aux1749 with domain: int(0..4) (representing constraint (aux1744 + aux1746))
c Both direct and order encoding.
c Var 'aux1749' order represents '0' with '7271'
c Var 'aux1749' direct represents '0' with '7271'
c Var 'aux1749' order represents '1' with '7272'
-7271 7272 0
c Var 'aux1749' direct represents '1' with '7273'
7271 -7272 7273 0
-7273 7272 0
-7273 -7271 0
c Var 'aux1749' order represents '2' with '7274'
-7272 7274 0
c Var 'aux1749' direct represents '2' with '7275'
7272 -7274 7275 0
-7275 7274 0
-7275 -7272 0
c Var 'aux1749' order represents '3' with '7276'
-7274 7276 0
c Var 'aux1749' direct represents '3' with '7277'
7274 -7276 7277 0
-7277 7276 0
-7277 -7274 0
c Var 'aux1749' direct represents '4' with '-7276'
7271 7273 7275 7277 -7276 0
c Encoding variable: aux1750 with domain: int(0..2) (representing constraint ((x_00008_00001=4) + (x_00007_00003=4)))
c Both direct and order encoding.
c Var 'aux1750' order represents '0' with '7278'
c Var 'aux1750' direct represents '0' with '7278'
c Var 'aux1750' order represents '1' with '7279'
-7278 7279 0
c Var 'aux1750' direct represents '1' with '7280'
7278 -7279 7280 0
-7280 7279 0
-7280 -7278 0
c Var 'aux1750' direct represents '2' with '-7279'
7278 7280 -7279 0
c Encoding variable: aux1751 with domain: int(0..2) (representing constraint ((x_00007_00002=4) + (x_00008_00002=4)))
c Both direct and order encoding.
c Var 'aux1751' order represents '0' with '7281'
c Var 'aux1751' direct represents '0' with '7281'
c Var 'aux1751' order represents '1' with '7282'
-7281 7282 0
c Var 'aux1751' direct represents '1' with '7283'
7281 -7282 7283 0
-7283 7282 0
-7283 -7281 0
c Var 'aux1751' direct represents '2' with '-7282'
7281 7283 -7282 0
c Encoding variable: aux1752 with domain: int(0..2) (representing constraint ((x_00007_00001=4) + (x_00009_00001=4)))
c Both direct and order encoding.
c Var 'aux1752' order represents '0' with '7284'
c Var 'aux1752' direct represents '0' with '7284'
c Var 'aux1752' order represents '1' with '7285'
-7284 7285 0
c Var 'aux1752' direct represents '1' with '7286'
7284 -7285 7286 0
-7286 7285 0
-7286 -7284 0
c Var 'aux1752' direct represents '2' with '-7285'
7284 7286 -7285 0
c Encoding variable: aux1753 with domain: int(0..2) (representing constraint ((x_00009_00003=4) + (x_00009_00002=4)))
c Both direct and order encoding.
c Var 'aux1753' order represents '0' with '7287'
c Var 'aux1753' direct represents '0' with '7287'
c Var 'aux1753' order represents '1' with '7288'
-7287 7288 0
c Var 'aux1753' direct represents '1' with '7289'
7287 -7288 7289 0
-7289 7288 0
-7289 -7287 0
c Var 'aux1753' direct represents '2' with '-7288'
7287 7289 -7288 0
c Encoding variable: aux1754 with domain: int(0..3) (representing constraint ((x_00008_00003=4) + aux1753))
c Both direct and order encoding.
c Var 'aux1754' order represents '0' with '7290'
c Var 'aux1754' direct represents '0' with '7290'
c Var 'aux1754' order represents '1' with '7291'
-7290 7291 0
c Var 'aux1754' direct represents '1' with '7292'
7290 -7291 7292 0
-7292 7291 0
-7292 -7290 0
c Var 'aux1754' order represents '2' with '7293'
-7291 7293 0
c Var 'aux1754' direct represents '2' with '7294'
7291 -7293 7294 0
-7294 7293 0
-7294 -7291 0
c Var 'aux1754' direct represents '3' with '-7293'
7290 7292 7294 -7293 0
c Encoding variable: aux1755 with domain: int(0..4) (representing constraint (aux1750 + aux1752))
c Both direct and order encoding.
c Var 'aux1755' order represents '0' with '7295'
c Var 'aux1755' direct represents '0' with '7295'
c Var 'aux1755' order represents '1' with '7296'
-7295 7296 0
c Var 'aux1755' direct represents '1' with '7297'
7295 -7296 7297 0
-7297 7296 0
-7297 -7295 0
c Var 'aux1755' order represents '2' with '7298'
-7296 7298 0
c Var 'aux1755' direct represents '2' with '7299'
7296 -7298 7299 0
-7299 7298 0
-7299 -7296 0
c Var 'aux1755' order represents '3' with '7300'
-7298 7300 0
c Var 'aux1755' direct represents '3' with '7301'
7298 -7300 7301 0
-7301 7300 0
-7301 -7298 0
c Var 'aux1755' direct represents '4' with '-7300'
7295 7297 7299 7301 -7300 0
c Encoding variable: aux1756 with domain: int(0..2) (representing constraint ((x_00008_00001=5) + (x_00007_00003=5)))
c Both direct and order encoding.
c Var 'aux1756' order represents '0' with '7302'
c Var 'aux1756' direct represents '0' with '7302'
c Var 'aux1756' order represents '1' with '7303'
-7302 7303 0
c Var 'aux1756' direct represents '1' with '7304'
7302 -7303 7304 0
-7304 7303 0
-7304 -7302 0
c Var 'aux1756' direct represents '2' with '-7303'
7302 7304 -7303 0
c Encoding variable: aux1757 with domain: int(0..2) (representing constraint ((x_00007_00002=5) + (x_00008_00002=5)))
c Both direct and order encoding.
c Var 'aux1757' order represents '0' with '7305'
c Var 'aux1757' direct represents '0' with '7305'
c Var 'aux1757' order represents '1' with '7306'
-7305 7306 0
c Var 'aux1757' direct represents '1' with '7307'
7305 -7306 7307 0
-7307 7306 0
-7307 -7305 0
c Var 'aux1757' direct represents '2' with '-7306'
7305 7307 -7306 0
c Encoding variable: aux1758 with domain: int(0..2) (representing constraint ((x_00007_00001=5) + (x_00009_00001=5)))
c Both direct and order encoding.
c Var 'aux1758' order represents '0' with '7308'
c Var 'aux1758' direct represents '0' with '7308'
c Var 'aux1758' order represents '1' with '7309'
-7308 7309 0
c Var 'aux1758' direct represents '1' with '7310'
7308 -7309 7310 0
-7310 7309 0
-7310 -7308 0
c Var 'aux1758' direct represents '2' with '-7309'
7308 7310 -7309 0
c Encoding variable: aux1759 with domain: int(0..2) (representing constraint ((x_00009_00003=5) + (x_00009_00002=5)))
c Both direct and order encoding.
c Var 'aux1759' order represents '0' with '7311'
c Var 'aux1759' direct represents '0' with '7311'
c Var 'aux1759' order represents '1' with '7312'
-7311 7312 0
c Var 'aux1759' direct represents '1' with '7313'
7311 -7312 7313 0
-7313 7312 0
-7313 -7311 0
c Var 'aux1759' direct represents '2' with '-7312'
7311 7313 -7312 0
c Encoding variable: aux1760 with domain: int(0..3) (representing constraint ((x_00008_00003=5) + aux1759))
c Both direct and order encoding.
c Var 'aux1760' order represents '0' with '7314'
c Var 'aux1760' direct represents '0' with '7314'
c Var 'aux1760' order represents '1' with '7315'
-7314 7315 0
c Var 'aux1760' direct represents '1' with '7316'
7314 -7315 7316 0
-7316 7315 0
-7316 -7314 0
c Var 'aux1760' order represents '2' with '7317'
-7315 7317 0
c Var 'aux1760' direct represents '2' with '7318'
7315 -7317 7318 0
-7318 7317 0
-7318 -7315 0
c Var 'aux1760' direct represents '3' with '-7317'
7314 7316 7318 -7317 0
c Encoding variable: aux1761 with domain: int(0..4) (representing constraint (aux1756 + aux1758))
c Both direct and order encoding.
c Var 'aux1761' order represents '0' with '7319'
c Var 'aux1761' direct represents '0' with '7319'
c Var 'aux1761' order represents '1' with '7320'
-7319 7320 0
c Var 'aux1761' direct represents '1' with '7321'
7319 -7320 7321 0
-7321 7320 0
-7321 -7319 0
c Var 'aux1761' order represents '2' with '7322'
-7320 7322 0
c Var 'aux1761' direct represents '2' with '7323'
7320 -7322 7323 0
-7323 7322 0
-7323 -7320 0
c Var 'aux1761' order represents '3' with '7324'
-7322 7324 0
c Var 'aux1761' direct represents '3' with '7325'
7322 -7324 7325 0
-7325 7324 0
-7325 -7322 0
c Var 'aux1761' direct represents '4' with '-7324'
7319 7321 7323 7325 -7324 0
c Encoding variable: aux1762 with domain: int(0..2) (representing constraint ((x_00008_00001=6) + (x_00007_00003=6)))
c Both direct and order encoding.
c Var 'aux1762' order represents '0' with '7326'
c Var 'aux1762' direct represents '0' with '7326'
c Var 'aux1762' order represents '1' with '7327'
-7326 7327 0
c Var 'aux1762' direct represents '1' with '7328'
7326 -7327 7328 0
-7328 7327 0
-7328 -7326 0
c Var 'aux1762' direct represents '2' with '-7327'
7326 7328 -7327 0
c Encoding variable: aux1763 with domain: int(0..2) (representing constraint ((x_00007_00002=6) + (x_00008_00002=6)))
c Both direct and order encoding.
c Var 'aux1763' order represents '0' with '7329'
c Var 'aux1763' direct represents '0' with '7329'
c Var 'aux1763' order represents '1' with '7330'
-7329 7330 0
c Var 'aux1763' direct represents '1' with '7331'
7329 -7330 7331 0
-7331 7330 0
-7331 -7329 0
c Var 'aux1763' direct represents '2' with '-7330'
7329 7331 -7330 0
c Encoding variable: aux1764 with domain: int(0..2) (representing constraint ((x_00007_00001=6) + (x_00009_00001=6)))
c Both direct and order encoding.
c Var 'aux1764' order represents '0' with '7332'
c Var 'aux1764' direct represents '0' with '7332'
c Var 'aux1764' order represents '1' with '7333'
-7332 7333 0
c Var 'aux1764' direct represents '1' with '7334'
7332 -7333 7334 0
-7334 7333 0
-7334 -7332 0
c Var 'aux1764' direct represents '2' with '-7333'
7332 7334 -7333 0
c Encoding variable: aux1765 with domain: int(0..2) (representing constraint ((x_00009_00003=6) + (x_00009_00002=6)))
c Both direct and order encoding.
c Var 'aux1765' order represents '0' with '7335'
c Var 'aux1765' direct represents '0' with '7335'
c Var 'aux1765' order represents '1' with '7336'
-7335 7336 0
c Var 'aux1765' direct represents '1' with '7337'
7335 -7336 7337 0
-7337 7336 0
-7337 -7335 0
c Var 'aux1765' direct represents '2' with '-7336'
7335 7337 -7336 0
c Encoding variable: aux1766 with domain: int(0..3) (representing constraint ((x_00008_00003=6) + aux1765))
c Both direct and order encoding.
c Var 'aux1766' order represents '0' with '7338'
c Var 'aux1766' direct represents '0' with '7338'
c Var 'aux1766' order represents '1' with '7339'
-7338 7339 0
c Var 'aux1766' direct represents '1' with '7340'
7338 -7339 7340 0
-7340 7339 0
-7340 -7338 0
c Var 'aux1766' order represents '2' with '7341'
-7339 7341 0
c Var 'aux1766' direct represents '2' with '7342'
7339 -7341 7342 0
-7342 7341 0
-7342 -7339 0
c Var 'aux1766' direct represents '3' with '-7341'
7338 7340 7342 -7341 0
c Encoding variable: aux1767 with domain: int(0..4) (representing constraint (aux1762 + aux1764))
c Both direct and order encoding.
c Var 'aux1767' order represents '0' with '7343'
c Var 'aux1767' direct represents '0' with '7343'
c Var 'aux1767' order represents '1' with '7344'
-7343 7344 0
c Var 'aux1767' direct represents '1' with '7345'
7343 -7344 7345 0
-7345 7344 0
-7345 -7343 0
c Var 'aux1767' order represents '2' with '7346'
-7344 7346 0
c Var 'aux1767' direct represents '2' with '7347'
7344 -7346 7347 0
-7347 7346 0
-7347 -7344 0
c Var 'aux1767' order represents '3' with '7348'
-7346 7348 0
c Var 'aux1767' direct represents '3' with '7349'
7346 -7348 7349 0
-7349 7348 0
-7349 -7346 0
c Var 'aux1767' direct represents '4' with '-7348'
7343 7345 7347 7349 -7348 0
c Encoding variable: aux1768 with domain: int(0..2) (representing constraint ((x_00008_00001=7) + (x_00007_00003=7)))
c Both direct and order encoding.
c Var 'aux1768' order represents '0' with '7350'
c Var 'aux1768' direct represents '0' with '7350'
c Var 'aux1768' order represents '1' with '7351'
-7350 7351 0
c Var 'aux1768' direct represents '1' with '7352'
7350 -7351 7352 0
-7352 7351 0
-7352 -7350 0
c Var 'aux1768' direct represents '2' with '-7351'
7350 7352 -7351 0
c Encoding variable: aux1769 with domain: int(0..2) (representing constraint ((x_00007_00002=7) + (x_00008_00002=7)))
c Both direct and order encoding.
c Var 'aux1769' order represents '0' with '7353'
c Var 'aux1769' direct represents '0' with '7353'
c Var 'aux1769' order represents '1' with '7354'
-7353 7354 0
c Var 'aux1769' direct represents '1' with '7355'
7353 -7354 7355 0
-7355 7354 0
-7355 -7353 0
c Var 'aux1769' direct represents '2' with '-7354'
7353 7355 -7354 0
c Encoding variable: aux1770 with domain: int(0..2) (representing constraint ((x_00007_00001=7) + (x_00009_00001=7)))
c Both direct and order encoding.
c Var 'aux1770' order represents '0' with '7356'
c Var 'aux1770' direct represents '0' with '7356'
c Var 'aux1770' order represents '1' with '7357'
-7356 7357 0
c Var 'aux1770' direct represents '1' with '7358'
7356 -7357 7358 0
-7358 7357 0
-7358 -7356 0
c Var 'aux1770' direct represents '2' with '-7357'
7356 7358 -7357 0
c Encoding variable: aux1771 with domain: int(0..2) (representing constraint ((x_00009_00003=7) + (x_00009_00002=7)))
c Both direct and order encoding.
c Var 'aux1771' order represents '0' with '7359'
c Var 'aux1771' direct represents '0' with '7359'
c Var 'aux1771' order represents '1' with '7360'
-7359 7360 0
c Var 'aux1771' direct represents '1' with '7361'
7359 -7360 7361 0
-7361 7360 0
-7361 -7359 0
c Var 'aux1771' direct represents '2' with '-7360'
7359 7361 -7360 0
c Encoding variable: aux1772 with domain: int(0..3) (representing constraint ((x_00008_00003=7) + aux1771))
c Both direct and order encoding.
c Var 'aux1772' order represents '0' with '7362'
c Var 'aux1772' direct represents '0' with '7362'
c Var 'aux1772' order represents '1' with '7363'
-7362 7363 0
c Var 'aux1772' direct represents '1' with '7364'
7362 -7363 7364 0
-7364 7363 0
-7364 -7362 0
c Var 'aux1772' order represents '2' with '7365'
-7363 7365 0
c Var 'aux1772' direct represents '2' with '7366'
7363 -7365 7366 0
-7366 7365 0
-7366 -7363 0
c Var 'aux1772' direct represents '3' with '-7365'
7362 7364 7366 -7365 0
c Encoding variable: aux1773 with domain: int(0..4) (representing constraint (aux1768 + aux1770))
c Both direct and order encoding.
c Var 'aux1773' order represents '0' with '7367'
c Var 'aux1773' direct represents '0' with '7367'
c Var 'aux1773' order represents '1' with '7368'
-7367 7368 0
c Var 'aux1773' direct represents '1' with '7369'
7367 -7368 7369 0
-7369 7368 0
-7369 -7367 0
c Var 'aux1773' order represents '2' with '7370'
-7368 7370 0
c Var 'aux1773' direct represents '2' with '7371'
7368 -7370 7371 0
-7371 7370 0
-7371 -7368 0
c Var 'aux1773' order represents '3' with '7372'
-7370 7372 0
c Var 'aux1773' direct represents '3' with '7373'
7370 -7372 7373 0
-7373 7372 0
-7373 -7370 0
c Var 'aux1773' direct represents '4' with '-7372'
7367 7369 7371 7373 -7372 0
c Encoding variable: aux1774 with domain: int(0..2) (representing constraint ((x_00008_00001=8) + (x_00007_00003=8)))
c Both direct and order encoding.
c Var 'aux1774' order represents '0' with '7374'
c Var 'aux1774' direct represents '0' with '7374'
c Var 'aux1774' order represents '1' with '7375'
-7374 7375 0
c Var 'aux1774' direct represents '1' with '7376'
7374 -7375 7376 0
-7376 7375 0
-7376 -7374 0
c Var 'aux1774' direct represents '2' with '-7375'
7374 7376 -7375 0
c Encoding variable: aux1775 with domain: int(0..2) (representing constraint ((x_00007_00002=8) + (x_00008_00002=8)))
c Both direct and order encoding.
c Var 'aux1775' order represents '0' with '7377'
c Var 'aux1775' direct represents '0' with '7377'
c Var 'aux1775' order represents '1' with '7378'
-7377 7378 0
c Var 'aux1775' direct represents '1' with '7379'
7377 -7378 7379 0
-7379 7378 0
-7379 -7377 0
c Var 'aux1775' direct represents '2' with '-7378'
7377 7379 -7378 0
c Encoding variable: aux1776 with domain: int(0..2) (representing constraint ((x_00007_00001=8) + (x_00009_00001=8)))
c Both direct and order encoding.
c Var 'aux1776' order represents '0' with '7380'
c Var 'aux1776' direct represents '0' with '7380'
c Var 'aux1776' order represents '1' with '7381'
-7380 7381 0
c Var 'aux1776' direct represents '1' with '7382'
7380 -7381 7382 0
-7382 7381 0
-7382 -7380 0
c Var 'aux1776' direct represents '2' with '-7381'
7380 7382 -7381 0
c Encoding variable: aux1777 with domain: int(0..2) (representing constraint ((x_00009_00003=8) + (x_00009_00002=8)))
c Both direct and order encoding.
c Var 'aux1777' order represents '0' with '7383'
c Var 'aux1777' direct represents '0' with '7383'
c Var 'aux1777' order represents '1' with '7384'
-7383 7384 0
c Var 'aux1777' direct represents '1' with '7385'
7383 -7384 7385 0
-7385 7384 0
-7385 -7383 0
c Var 'aux1777' direct represents '2' with '-7384'
7383 7385 -7384 0
c Encoding variable: aux1778 with domain: int(0..3) (representing constraint ((x_00008_00003=8) + aux1777))
c Both direct and order encoding.
c Var 'aux1778' order represents '0' with '7386'
c Var 'aux1778' direct represents '0' with '7386'
c Var 'aux1778' order represents '1' with '7387'
-7386 7387 0
c Var 'aux1778' direct represents '1' with '7388'
7386 -7387 7388 0
-7388 7387 0
-7388 -7386 0
c Var 'aux1778' order represents '2' with '7389'
-7387 7389 0
c Var 'aux1778' direct represents '2' with '7390'
7387 -7389 7390 0
-7390 7389 0
-7390 -7387 0
c Var 'aux1778' direct represents '3' with '-7389'
7386 7388 7390 -7389 0
c Encoding variable: aux1779 with domain: int(0..4) (representing constraint (aux1774 + aux1776))
c Both direct and order encoding.
c Var 'aux1779' order represents '0' with '7391'
c Var 'aux1779' direct represents '0' with '7391'
c Var 'aux1779' order represents '1' with '7392'
-7391 7392 0
c Var 'aux1779' direct represents '1' with '7393'
7391 -7392 7393 0
-7393 7392 0
-7393 -7391 0
c Var 'aux1779' order represents '2' with '7394'
-7392 7394 0
c Var 'aux1779' direct represents '2' with '7395'
7392 -7394 7395 0
-7395 7394 0
-7395 -7392 0
c Var 'aux1779' order represents '3' with '7396'
-7394 7396 0
c Var 'aux1779' direct represents '3' with '7397'
7394 -7396 7397 0
-7397 7396 0
-7397 -7394 0
c Var 'aux1779' direct represents '4' with '-7396'
7391 7393 7395 7397 -7396 0
c Encoding variable: aux1780 with domain: int(0..2) (representing constraint ((x_00008_00001=9) + (x_00007_00003=9)))
c Both direct and order encoding.
c Var 'aux1780' order represents '0' with '7398'
c Var 'aux1780' direct represents '0' with '7398'
c Var 'aux1780' order represents '1' with '7399'
-7398 7399 0
c Var 'aux1780' direct represents '1' with '7400'
7398 -7399 7400 0
-7400 7399 0
-7400 -7398 0
c Var 'aux1780' direct represents '2' with '-7399'
7398 7400 -7399 0
c Encoding variable: aux1781 with domain: int(0..2) (representing constraint ((x_00007_00002=9) + (x_00008_00002=9)))
c Both direct and order encoding.
c Var 'aux1781' order represents '0' with '7401'
c Var 'aux1781' direct represents '0' with '7401'
c Var 'aux1781' order represents '1' with '7402'
-7401 7402 0
c Var 'aux1781' direct represents '1' with '7403'
7401 -7402 7403 0
-7403 7402 0
-7403 -7401 0
c Var 'aux1781' direct represents '2' with '-7402'
7401 7403 -7402 0
c Encoding variable: aux1782 with domain: int(0..2) (representing constraint ((x_00007_00001=9) + (x_00009_00001=9)))
c Both direct and order encoding.
c Var 'aux1782' order represents '0' with '7404'
c Var 'aux1782' direct represents '0' with '7404'
c Var 'aux1782' order represents '1' with '7405'
-7404 7405 0
c Var 'aux1782' direct represents '1' with '7406'
7404 -7405 7406 0
-7406 7405 0
-7406 -7404 0
c Var 'aux1782' direct represents '2' with '-7405'
7404 7406 -7405 0
c Encoding variable: aux1783 with domain: int(0..2) (representing constraint ((x_00009_00003=9) + (x_00009_00002=9)))
c Both direct and order encoding.
c Var 'aux1783' order represents '0' with '7407'
c Var 'aux1783' direct represents '0' with '7407'
c Var 'aux1783' order represents '1' with '7408'
-7407 7408 0
c Var 'aux1783' direct represents '1' with '7409'
7407 -7408 7409 0
-7409 7408 0
-7409 -7407 0
c Var 'aux1783' direct represents '2' with '-7408'
7407 7409 -7408 0
c Encoding variable: aux1784 with domain: int(0..3) (representing constraint ((x_00008_00003=9) + aux1783))
c Both direct and order encoding.
c Var 'aux1784' order represents '0' with '7410'
c Var 'aux1784' direct represents '0' with '7410'
c Var 'aux1784' order represents '1' with '7411'
-7410 7411 0
c Var 'aux1784' direct represents '1' with '7412'
7410 -7411 7412 0
-7412 7411 0
-7412 -7410 0
c Var 'aux1784' order represents '2' with '7413'
-7411 7413 0
c Var 'aux1784' direct represents '2' with '7414'
7411 -7413 7414 0
-7414 7413 0
-7414 -7411 0
c Var 'aux1784' direct represents '3' with '-7413'
7410 7412 7414 -7413 0
c Encoding variable: aux1785 with domain: int(0..4) (representing constraint (aux1780 + aux1782))
c Both direct and order encoding.
c Var 'aux1785' order represents '0' with '7415'
c Var 'aux1785' direct represents '0' with '7415'
c Var 'aux1785' order represents '1' with '7416'
-7415 7416 0
c Var 'aux1785' direct represents '1' with '7417'
7415 -7416 7417 0
-7417 7416 0
-7417 -7415 0
c Var 'aux1785' order represents '2' with '7418'
-7416 7418 0
c Var 'aux1785' direct represents '2' with '7419'
7416 -7418 7419 0
-7419 7418 0
-7419 -7416 0
c Var 'aux1785' order represents '3' with '7420'
-7418 7420 0
c Var 'aux1785' direct represents '3' with '7421'
7418 -7420 7421 0
-7421 7420 0
-7421 -7418 0
c Var 'aux1785' direct represents '4' with '-7420'
7415 7417 7419 7421 -7420 0
c Encoding variable: aux1786 with domain: int(0..2) (representing constraint ((x_00008_00004=1) + (x_00007_00006=1)))
c Both direct and order encoding.
c Var 'aux1786' order represents '0' with '7422'
c Var 'aux1786' direct represents '0' with '7422'
c Var 'aux1786' order represents '1' with '7423'
-7422 7423 0
c Var 'aux1786' direct represents '1' with '7424'
7422 -7423 7424 0
-7424 7423 0
-7424 -7422 0
c Var 'aux1786' direct represents '2' with '-7423'
7422 7424 -7423 0
c Encoding variable: aux1787 with domain: int(0..2) (representing constraint ((x_00007_00005=1) + (x_00008_00005=1)))
c Both direct and order encoding.
c Var 'aux1787' order represents '0' with '7425'
c Var 'aux1787' direct represents '0' with '7425'
c Var 'aux1787' order represents '1' with '7426'
-7425 7426 0
c Var 'aux1787' direct represents '1' with '7427'
7425 -7426 7427 0
-7427 7426 0
-7427 -7425 0
c Var 'aux1787' direct represents '2' with '-7426'
7425 7427 -7426 0
c Encoding variable: aux1788 with domain: int(0..2) (representing constraint ((x_00007_00004=1) + (x_00009_00004=1)))
c Both direct and order encoding.
c Var 'aux1788' order represents '0' with '7428'
c Var 'aux1788' direct represents '0' with '7428'
c Var 'aux1788' order represents '1' with '7429'
-7428 7429 0
c Var 'aux1788' direct represents '1' with '7430'
7428 -7429 7430 0
-7430 7429 0
-7430 -7428 0
c Var 'aux1788' direct represents '2' with '-7429'
7428 7430 -7429 0
c Encoding variable: aux1789 with domain: int(0..2) (representing constraint ((x_00009_00006=1) + (x_00009_00005=1)))
c Both direct and order encoding.
c Var 'aux1789' order represents '0' with '7431'
c Var 'aux1789' direct represents '0' with '7431'
c Var 'aux1789' order represents '1' with '7432'
-7431 7432 0
c Var 'aux1789' direct represents '1' with '7433'
7431 -7432 7433 0
-7433 7432 0
-7433 -7431 0
c Var 'aux1789' direct represents '2' with '-7432'
7431 7433 -7432 0
c Encoding variable: aux1790 with domain: int(0..3) (representing constraint ((x_00008_00006=1) + aux1789))
c Both direct and order encoding.
c Var 'aux1790' order represents '0' with '7434'
c Var 'aux1790' direct represents '0' with '7434'
c Var 'aux1790' order represents '1' with '7435'
-7434 7435 0
c Var 'aux1790' direct represents '1' with '7436'
7434 -7435 7436 0
-7436 7435 0
-7436 -7434 0
c Var 'aux1790' order represents '2' with '7437'
-7435 7437 0
c Var 'aux1790' direct represents '2' with '7438'
7435 -7437 7438 0
-7438 7437 0
-7438 -7435 0
c Var 'aux1790' direct represents '3' with '-7437'
7434 7436 7438 -7437 0
c Encoding variable: aux1791 with domain: int(0..4) (representing constraint (aux1786 + aux1788))
c Both direct and order encoding.
c Var 'aux1791' order represents '0' with '7439'
c Var 'aux1791' direct represents '0' with '7439'
c Var 'aux1791' order represents '1' with '7440'
-7439 7440 0
c Var 'aux1791' direct represents '1' with '7441'
7439 -7440 7441 0
-7441 7440 0
-7441 -7439 0
c Var 'aux1791' order represents '2' with '7442'
-7440 7442 0
c Var 'aux1791' direct represents '2' with '7443'
7440 -7442 7443 0
-7443 7442 0
-7443 -7440 0
c Var 'aux1791' order represents '3' with '7444'
-7442 7444 0
c Var 'aux1791' direct represents '3' with '7445'
7442 -7444 7445 0
-7445 7444 0
-7445 -7442 0
c Var 'aux1791' direct represents '4' with '-7444'
7439 7441 7443 7445 -7444 0
c Encoding variable: aux1792 with domain: int(0..2) (representing constraint ((x_00008_00004=2) + (x_00007_00006=2)))
c Both direct and order encoding.
c Var 'aux1792' order represents '0' with '7446'
c Var 'aux1792' direct represents '0' with '7446'
c Var 'aux1792' order represents '1' with '7447'
-7446 7447 0
c Var 'aux1792' direct represents '1' with '7448'
7446 -7447 7448 0
-7448 7447 0
-7448 -7446 0
c Var 'aux1792' direct represents '2' with '-7447'
7446 7448 -7447 0
c Encoding variable: aux1793 with domain: int(0..2) (representing constraint ((x_00007_00005=2) + (x_00008_00005=2)))
c Both direct and order encoding.
c Var 'aux1793' order represents '0' with '7449'
c Var 'aux1793' direct represents '0' with '7449'
c Var 'aux1793' order represents '1' with '7450'
-7449 7450 0
c Var 'aux1793' direct represents '1' with '7451'
7449 -7450 7451 0
-7451 7450 0
-7451 -7449 0
c Var 'aux1793' direct represents '2' with '-7450'
7449 7451 -7450 0
c Encoding variable: aux1794 with domain: int(0..2) (representing constraint ((x_00007_00004=2) + (x_00009_00004=2)))
c Both direct and order encoding.
c Var 'aux1794' order represents '0' with '7452'
c Var 'aux1794' direct represents '0' with '7452'
c Var 'aux1794' order represents '1' with '7453'
-7452 7453 0
c Var 'aux1794' direct represents '1' with '7454'
7452 -7453 7454 0
-7454 7453 0
-7454 -7452 0
c Var 'aux1794' direct represents '2' with '-7453'
7452 7454 -7453 0
c Encoding variable: aux1795 with domain: int(0..2) (representing constraint ((x_00009_00006=2) + (x_00009_00005=2)))
c Both direct and order encoding.
c Var 'aux1795' order represents '0' with '7455'
c Var 'aux1795' direct represents '0' with '7455'
c Var 'aux1795' order represents '1' with '7456'
-7455 7456 0
c Var 'aux1795' direct represents '1' with '7457'
7455 -7456 7457 0
-7457 7456 0
-7457 -7455 0
c Var 'aux1795' direct represents '2' with '-7456'
7455 7457 -7456 0
c Encoding variable: aux1796 with domain: int(0..3) (representing constraint ((x_00008_00006=2) + aux1795))
c Both direct and order encoding.
c Var 'aux1796' order represents '0' with '7458'
c Var 'aux1796' direct represents '0' with '7458'
c Var 'aux1796' order represents '1' with '7459'
-7458 7459 0
c Var 'aux1796' direct represents '1' with '7460'
7458 -7459 7460 0
-7460 7459 0
-7460 -7458 0
c Var 'aux1796' order represents '2' with '7461'
-7459 7461 0
c Var 'aux1796' direct represents '2' with '7462'
7459 -7461 7462 0
-7462 7461 0
-7462 -7459 0
c Var 'aux1796' direct represents '3' with '-7461'
7458 7460 7462 -7461 0
c Encoding variable: aux1797 with domain: int(0..4) (representing constraint (aux1792 + aux1794))
c Both direct and order encoding.
c Var 'aux1797' order represents '0' with '7463'
c Var 'aux1797' direct represents '0' with '7463'
c Var 'aux1797' order represents '1' with '7464'
-7463 7464 0
c Var 'aux1797' direct represents '1' with '7465'
7463 -7464 7465 0
-7465 7464 0
-7465 -7463 0
c Var 'aux1797' order represents '2' with '7466'
-7464 7466 0
c Var 'aux1797' direct represents '2' with '7467'
7464 -7466 7467 0
-7467 7466 0
-7467 -7464 0
c Var 'aux1797' order represents '3' with '7468'
-7466 7468 0
c Var 'aux1797' direct represents '3' with '7469'
7466 -7468 7469 0
-7469 7468 0
-7469 -7466 0
c Var 'aux1797' direct represents '4' with '-7468'
7463 7465 7467 7469 -7468 0
c Encoding variable: aux1798 with domain: int(0..2) (representing constraint ((x_00008_00004=3) + (x_00007_00006=3)))
c Both direct and order encoding.
c Var 'aux1798' order represents '0' with '7470'
c Var 'aux1798' direct represents '0' with '7470'
c Var 'aux1798' order represents '1' with '7471'
-7470 7471 0
c Var 'aux1798' direct represents '1' with '7472'
7470 -7471 7472 0
-7472 7471 0
-7472 -7470 0
c Var 'aux1798' direct represents '2' with '-7471'
7470 7472 -7471 0
c Encoding variable: aux1799 with domain: int(0..2) (representing constraint ((x_00007_00005=3) + (x_00008_00005=3)))
c Both direct and order encoding.
c Var 'aux1799' order represents '0' with '7473'
c Var 'aux1799' direct represents '0' with '7473'
c Var 'aux1799' order represents '1' with '7474'
-7473 7474 0
c Var 'aux1799' direct represents '1' with '7475'
7473 -7474 7475 0
-7475 7474 0
-7475 -7473 0
c Var 'aux1799' direct represents '2' with '-7474'
7473 7475 -7474 0
c Encoding variable: aux1800 with domain: int(0..2) (representing constraint ((x_00007_00004=3) + (x_00009_00004=3)))
c Both direct and order encoding.
c Var 'aux1800' order represents '0' with '7476'
c Var 'aux1800' direct represents '0' with '7476'
c Var 'aux1800' order represents '1' with '7477'
-7476 7477 0
c Var 'aux1800' direct represents '1' with '7478'
7476 -7477 7478 0
-7478 7477 0
-7478 -7476 0
c Var 'aux1800' direct represents '2' with '-7477'
7476 7478 -7477 0
c Encoding variable: aux1801 with domain: int(0..2) (representing constraint ((x_00009_00006=3) + (x_00009_00005=3)))
c Both direct and order encoding.
c Var 'aux1801' order represents '0' with '7479'
c Var 'aux1801' direct represents '0' with '7479'
c Var 'aux1801' order represents '1' with '7480'
-7479 7480 0
c Var 'aux1801' direct represents '1' with '7481'
7479 -7480 7481 0
-7481 7480 0
-7481 -7479 0
c Var 'aux1801' direct represents '2' with '-7480'
7479 7481 -7480 0
c Encoding variable: aux1802 with domain: int(0..3) (representing constraint ((x_00008_00006=3) + aux1801))
c Both direct and order encoding.
c Var 'aux1802' order represents '0' with '7482'
c Var 'aux1802' direct represents '0' with '7482'
c Var 'aux1802' order represents '1' with '7483'
-7482 7483 0
c Var 'aux1802' direct represents '1' with '7484'
7482 -7483 7484 0
-7484 7483 0
-7484 -7482 0
c Var 'aux1802' order represents '2' with '7485'
-7483 7485 0
c Var 'aux1802' direct represents '2' with '7486'
7483 -7485 7486 0
-7486 7485 0
-7486 -7483 0
c Var 'aux1802' direct represents '3' with '-7485'
7482 7484 7486 -7485 0
c Encoding variable: aux1803 with domain: int(0..4) (representing constraint (aux1798 + aux1800))
c Both direct and order encoding.
c Var 'aux1803' order represents '0' with '7487'
c Var 'aux1803' direct represents '0' with '7487'
c Var 'aux1803' order represents '1' with '7488'
-7487 7488 0
c Var 'aux1803' direct represents '1' with '7489'
7487 -7488 7489 0
-7489 7488 0
-7489 -7487 0
c Var 'aux1803' order represents '2' with '7490'
-7488 7490 0
c Var 'aux1803' direct represents '2' with '7491'
7488 -7490 7491 0
-7491 7490 0
-7491 -7488 0
c Var 'aux1803' order represents '3' with '7492'
-7490 7492 0
c Var 'aux1803' direct represents '3' with '7493'
7490 -7492 7493 0
-7493 7492 0
-7493 -7490 0
c Var 'aux1803' direct represents '4' with '-7492'
7487 7489 7491 7493 -7492 0
c Encoding variable: aux1804 with domain: int(0..2) (representing constraint ((x_00008_00004=4) + (x_00007_00006=4)))
c Both direct and order encoding.
c Var 'aux1804' order represents '0' with '7494'
c Var 'aux1804' direct represents '0' with '7494'
c Var 'aux1804' order represents '1' with '7495'
-7494 7495 0
c Var 'aux1804' direct represents '1' with '7496'
7494 -7495 7496 0
-7496 7495 0
-7496 -7494 0
c Var 'aux1804' direct represents '2' with '-7495'
7494 7496 -7495 0
c Encoding variable: aux1805 with domain: int(0..2) (representing constraint ((x_00007_00005=4) + (x_00008_00005=4)))
c Both direct and order encoding.
c Var 'aux1805' order represents '0' with '7497'
c Var 'aux1805' direct represents '0' with '7497'
c Var 'aux1805' order represents '1' with '7498'
-7497 7498 0
c Var 'aux1805' direct represents '1' with '7499'
7497 -7498 7499 0
-7499 7498 0
-7499 -7497 0
c Var 'aux1805' direct represents '2' with '-7498'
7497 7499 -7498 0
c Encoding variable: aux1806 with domain: int(0..2) (representing constraint ((x_00007_00004=4) + (x_00009_00004=4)))
c Both direct and order encoding.
c Var 'aux1806' order represents '0' with '7500'
c Var 'aux1806' direct represents '0' with '7500'
c Var 'aux1806' order represents '1' with '7501'
-7500 7501 0
c Var 'aux1806' direct represents '1' with '7502'
7500 -7501 7502 0
-7502 7501 0
-7502 -7500 0
c Var 'aux1806' direct represents '2' with '-7501'
7500 7502 -7501 0
c Encoding variable: aux1807 with domain: int(0..2) (representing constraint ((x_00009_00006=4) + (x_00009_00005=4)))
c Both direct and order encoding.
c Var 'aux1807' order represents '0' with '7503'
c Var 'aux1807' direct represents '0' with '7503'
c Var 'aux1807' order represents '1' with '7504'
-7503 7504 0
c Var 'aux1807' direct represents '1' with '7505'
7503 -7504 7505 0
-7505 7504 0
-7505 -7503 0
c Var 'aux1807' direct represents '2' with '-7504'
7503 7505 -7504 0
c Encoding variable: aux1808 with domain: int(0..3) (representing constraint ((x_00008_00006=4) + aux1807))
c Both direct and order encoding.
c Var 'aux1808' order represents '0' with '7506'
c Var 'aux1808' direct represents '0' with '7506'
c Var 'aux1808' order represents '1' with '7507'
-7506 7507 0
c Var 'aux1808' direct represents '1' with '7508'
7506 -7507 7508 0
-7508 7507 0
-7508 -7506 0
c Var 'aux1808' order represents '2' with '7509'
-7507 7509 0
c Var 'aux1808' direct represents '2' with '7510'
7507 -7509 7510 0
-7510 7509 0
-7510 -7507 0
c Var 'aux1808' direct represents '3' with '-7509'
7506 7508 7510 -7509 0
c Encoding variable: aux1809 with domain: int(0..4) (representing constraint (aux1804 + aux1806))
c Both direct and order encoding.
c Var 'aux1809' order represents '0' with '7511'
c Var 'aux1809' direct represents '0' with '7511'
c Var 'aux1809' order represents '1' with '7512'
-7511 7512 0
c Var 'aux1809' direct represents '1' with '7513'
7511 -7512 7513 0
-7513 7512 0
-7513 -7511 0
c Var 'aux1809' order represents '2' with '7514'
-7512 7514 0
c Var 'aux1809' direct represents '2' with '7515'
7512 -7514 7515 0
-7515 7514 0
-7515 -7512 0
c Var 'aux1809' order represents '3' with '7516'
-7514 7516 0
c Var 'aux1809' direct represents '3' with '7517'
7514 -7516 7517 0
-7517 7516 0
-7517 -7514 0
c Var 'aux1809' direct represents '4' with '-7516'
7511 7513 7515 7517 -7516 0
c Encoding variable: aux1810 with domain: int(0..2) (representing constraint ((x_00008_00004=5) + (x_00007_00006=5)))
c Both direct and order encoding.
c Var 'aux1810' order represents '0' with '7518'
c Var 'aux1810' direct represents '0' with '7518'
c Var 'aux1810' order represents '1' with '7519'
-7518 7519 0
c Var 'aux1810' direct represents '1' with '7520'
7518 -7519 7520 0
-7520 7519 0
-7520 -7518 0
c Var 'aux1810' direct represents '2' with '-7519'
7518 7520 -7519 0
c Encoding variable: aux1811 with domain: int(0..2) (representing constraint ((x_00007_00005=5) + (x_00008_00005=5)))
c Both direct and order encoding.
c Var 'aux1811' order represents '0' with '7521'
c Var 'aux1811' direct represents '0' with '7521'
c Var 'aux1811' order represents '1' with '7522'
-7521 7522 0
c Var 'aux1811' direct represents '1' with '7523'
7521 -7522 7523 0
-7523 7522 0
-7523 -7521 0
c Var 'aux1811' direct represents '2' with '-7522'
7521 7523 -7522 0
c Encoding variable: aux1812 with domain: int(0..2) (representing constraint ((x_00007_00004=5) + (x_00009_00004=5)))
c Both direct and order encoding.
c Var 'aux1812' order represents '0' with '7524'
c Var 'aux1812' direct represents '0' with '7524'
c Var 'aux1812' order represents '1' with '7525'
-7524 7525 0
c Var 'aux1812' direct represents '1' with '7526'
7524 -7525 7526 0
-7526 7525 0
-7526 -7524 0
c Var 'aux1812' direct represents '2' with '-7525'
7524 7526 -7525 0
c Encoding variable: aux1813 with domain: int(0..2) (representing constraint ((x_00009_00006=5) + (x_00009_00005=5)))
c Both direct and order encoding.
c Var 'aux1813' order represents '0' with '7527'
c Var 'aux1813' direct represents '0' with '7527'
c Var 'aux1813' order represents '1' with '7528'
-7527 7528 0
c Var 'aux1813' direct represents '1' with '7529'
7527 -7528 7529 0
-7529 7528 0
-7529 -7527 0
c Var 'aux1813' direct represents '2' with '-7528'
7527 7529 -7528 0
c Encoding variable: aux1814 with domain: int(0..3) (representing constraint ((x_00008_00006=5) + aux1813))
c Both direct and order encoding.
c Var 'aux1814' order represents '0' with '7530'
c Var 'aux1814' direct represents '0' with '7530'
c Var 'aux1814' order represents '1' with '7531'
-7530 7531 0
c Var 'aux1814' direct represents '1' with '7532'
7530 -7531 7532 0
-7532 7531 0
-7532 -7530 0
c Var 'aux1814' order represents '2' with '7533'
-7531 7533 0
c Var 'aux1814' direct represents '2' with '7534'
7531 -7533 7534 0
-7534 7533 0
-7534 -7531 0
c Var 'aux1814' direct represents '3' with '-7533'
7530 7532 7534 -7533 0
c Encoding variable: aux1815 with domain: int(0..4) (representing constraint (aux1810 + aux1812))
c Both direct and order encoding.
c Var 'aux1815' order represents '0' with '7535'
c Var 'aux1815' direct represents '0' with '7535'
c Var 'aux1815' order represents '1' with '7536'
-7535 7536 0
c Var 'aux1815' direct represents '1' with '7537'
7535 -7536 7537 0
-7537 7536 0
-7537 -7535 0
c Var 'aux1815' order represents '2' with '7538'
-7536 7538 0
c Var 'aux1815' direct represents '2' with '7539'
7536 -7538 7539 0
-7539 7538 0
-7539 -7536 0
c Var 'aux1815' order represents '3' with '7540'
-7538 7540 0
c Var 'aux1815' direct represents '3' with '7541'
7538 -7540 7541 0
-7541 7540 0
-7541 -7538 0
c Var 'aux1815' direct represents '4' with '-7540'
7535 7537 7539 7541 -7540 0
c Encoding variable: aux1816 with domain: int(0..2) (representing constraint ((x_00008_00004=6) + (x_00007_00006=6)))
c Both direct and order encoding.
c Var 'aux1816' order represents '0' with '7542'
c Var 'aux1816' direct represents '0' with '7542'
c Var 'aux1816' order represents '1' with '7543'
-7542 7543 0
c Var 'aux1816' direct represents '1' with '7544'
7542 -7543 7544 0
-7544 7543 0
-7544 -7542 0
c Var 'aux1816' direct represents '2' with '-7543'
7542 7544 -7543 0
c Encoding variable: aux1817 with domain: int(0..2) (representing constraint ((x_00007_00005=6) + (x_00008_00005=6)))
c Both direct and order encoding.
c Var 'aux1817' order represents '0' with '7545'
c Var 'aux1817' direct represents '0' with '7545'
c Var 'aux1817' order represents '1' with '7546'
-7545 7546 0
c Var 'aux1817' direct represents '1' with '7547'
7545 -7546 7547 0
-7547 7546 0
-7547 -7545 0
c Var 'aux1817' direct represents '2' with '-7546'
7545 7547 -7546 0
c Encoding variable: aux1818 with domain: int(0..2) (representing constraint ((x_00007_00004=6) + (x_00009_00004=6)))
c Both direct and order encoding.
c Var 'aux1818' order represents '0' with '7548'
c Var 'aux1818' direct represents '0' with '7548'
c Var 'aux1818' order represents '1' with '7549'
-7548 7549 0
c Var 'aux1818' direct represents '1' with '7550'
7548 -7549 7550 0
-7550 7549 0
-7550 -7548 0
c Var 'aux1818' direct represents '2' with '-7549'
7548 7550 -7549 0
c Encoding variable: aux1819 with domain: int(0..2) (representing constraint ((x_00009_00006=6) + (x_00009_00005=6)))
c Both direct and order encoding.
c Var 'aux1819' order represents '0' with '7551'
c Var 'aux1819' direct represents '0' with '7551'
c Var 'aux1819' order represents '1' with '7552'
-7551 7552 0
c Var 'aux1819' direct represents '1' with '7553'
7551 -7552 7553 0
-7553 7552 0
-7553 -7551 0
c Var 'aux1819' direct represents '2' with '-7552'
7551 7553 -7552 0
c Encoding variable: aux1820 with domain: int(0..3) (representing constraint ((x_00008_00006=6) + aux1819))
c Both direct and order encoding.
c Var 'aux1820' order represents '0' with '7554'
c Var 'aux1820' direct represents '0' with '7554'
c Var 'aux1820' order represents '1' with '7555'
-7554 7555 0
c Var 'aux1820' direct represents '1' with '7556'
7554 -7555 7556 0
-7556 7555 0
-7556 -7554 0
c Var 'aux1820' order represents '2' with '7557'
-7555 7557 0
c Var 'aux1820' direct represents '2' with '7558'
7555 -7557 7558 0
-7558 7557 0
-7558 -7555 0
c Var 'aux1820' direct represents '3' with '-7557'
7554 7556 7558 -7557 0
c Encoding variable: aux1821 with domain: int(0..4) (representing constraint (aux1816 + aux1818))
c Both direct and order encoding.
c Var 'aux1821' order represents '0' with '7559'
c Var 'aux1821' direct represents '0' with '7559'
c Var 'aux1821' order represents '1' with '7560'
-7559 7560 0
c Var 'aux1821' direct represents '1' with '7561'
7559 -7560 7561 0
-7561 7560 0
-7561 -7559 0
c Var 'aux1821' order represents '2' with '7562'
-7560 7562 0
c Var 'aux1821' direct represents '2' with '7563'
7560 -7562 7563 0
-7563 7562 0
-7563 -7560 0
c Var 'aux1821' order represents '3' with '7564'
-7562 7564 0
c Var 'aux1821' direct represents '3' with '7565'
7562 -7564 7565 0
-7565 7564 0
-7565 -7562 0
c Var 'aux1821' direct represents '4' with '-7564'
7559 7561 7563 7565 -7564 0
c Encoding variable: aux1822 with domain: int(0..2) (representing constraint ((x_00008_00004=7) + (x_00007_00006=7)))
c Both direct and order encoding.
c Var 'aux1822' order represents '0' with '7566'
c Var 'aux1822' direct represents '0' with '7566'
c Var 'aux1822' order represents '1' with '7567'
-7566 7567 0
c Var 'aux1822' direct represents '1' with '7568'
7566 -7567 7568 0
-7568 7567 0
-7568 -7566 0
c Var 'aux1822' direct represents '2' with '-7567'
7566 7568 -7567 0
c Encoding variable: aux1823 with domain: int(0..2) (representing constraint ((x_00007_00005=7) + (x_00008_00005=7)))
c Both direct and order encoding.
c Var 'aux1823' order represents '0' with '7569'
c Var 'aux1823' direct represents '0' with '7569'
c Var 'aux1823' order represents '1' with '7570'
-7569 7570 0
c Var 'aux1823' direct represents '1' with '7571'
7569 -7570 7571 0
-7571 7570 0
-7571 -7569 0
c Var 'aux1823' direct represents '2' with '-7570'
7569 7571 -7570 0
c Encoding variable: aux1824 with domain: int(0..2) (representing constraint ((x_00007_00004=7) + (x_00009_00004=7)))
c Both direct and order encoding.
c Var 'aux1824' order represents '0' with '7572'
c Var 'aux1824' direct represents '0' with '7572'
c Var 'aux1824' order represents '1' with '7573'
-7572 7573 0
c Var 'aux1824' direct represents '1' with '7574'
7572 -7573 7574 0
-7574 7573 0
-7574 -7572 0
c Var 'aux1824' direct represents '2' with '-7573'
7572 7574 -7573 0
c Encoding variable: aux1825 with domain: int(0..2) (representing constraint ((x_00009_00006=7) + (x_00009_00005=7)))
c Both direct and order encoding.
c Var 'aux1825' order represents '0' with '7575'
c Var 'aux1825' direct represents '0' with '7575'
c Var 'aux1825' order represents '1' with '7576'
-7575 7576 0
c Var 'aux1825' direct represents '1' with '7577'
7575 -7576 7577 0
-7577 7576 0
-7577 -7575 0
c Var 'aux1825' direct represents '2' with '-7576'
7575 7577 -7576 0
c Encoding variable: aux1826 with domain: int(0..3) (representing constraint ((x_00008_00006=7) + aux1825))
c Both direct and order encoding.
c Var 'aux1826' order represents '0' with '7578'
c Var 'aux1826' direct represents '0' with '7578'
c Var 'aux1826' order represents '1' with '7579'
-7578 7579 0
c Var 'aux1826' direct represents '1' with '7580'
7578 -7579 7580 0
-7580 7579 0
-7580 -7578 0
c Var 'aux1826' order represents '2' with '7581'
-7579 7581 0
c Var 'aux1826' direct represents '2' with '7582'
7579 -7581 7582 0
-7582 7581 0
-7582 -7579 0
c Var 'aux1826' direct represents '3' with '-7581'
7578 7580 7582 -7581 0
c Encoding variable: aux1827 with domain: int(0..4) (representing constraint (aux1822 + aux1824))
c Both direct and order encoding.
c Var 'aux1827' order represents '0' with '7583'
c Var 'aux1827' direct represents '0' with '7583'
c Var 'aux1827' order represents '1' with '7584'
-7583 7584 0
c Var 'aux1827' direct represents '1' with '7585'
7583 -7584 7585 0
-7585 7584 0
-7585 -7583 0
c Var 'aux1827' order represents '2' with '7586'
-7584 7586 0
c Var 'aux1827' direct represents '2' with '7587'
7584 -7586 7587 0
-7587 7586 0
-7587 -7584 0
c Var 'aux1827' order represents '3' with '7588'
-7586 7588 0
c Var 'aux1827' direct represents '3' with '7589'
7586 -7588 7589 0
-7589 7588 0
-7589 -7586 0
c Var 'aux1827' direct represents '4' with '-7588'
7583 7585 7587 7589 -7588 0
c Encoding variable: aux1828 with domain: int(0..2) (representing constraint ((x_00008_00004=8) + (x_00007_00006=8)))
c Both direct and order encoding.
c Var 'aux1828' order represents '0' with '7590'
c Var 'aux1828' direct represents '0' with '7590'
c Var 'aux1828' order represents '1' with '7591'
-7590 7591 0
c Var 'aux1828' direct represents '1' with '7592'
7590 -7591 7592 0
-7592 7591 0
-7592 -7590 0
c Var 'aux1828' direct represents '2' with '-7591'
7590 7592 -7591 0
c Encoding variable: aux1829 with domain: int(0..2) (representing constraint ((x_00007_00005=8) + (x_00008_00005=8)))
c Both direct and order encoding.
c Var 'aux1829' order represents '0' with '7593'
c Var 'aux1829' direct represents '0' with '7593'
c Var 'aux1829' order represents '1' with '7594'
-7593 7594 0
c Var 'aux1829' direct represents '1' with '7595'
7593 -7594 7595 0
-7595 7594 0
-7595 -7593 0
c Var 'aux1829' direct represents '2' with '-7594'
7593 7595 -7594 0
c Encoding variable: aux1830 with domain: int(0..2) (representing constraint ((x_00007_00004=8) + (x_00009_00004=8)))
c Both direct and order encoding.
c Var 'aux1830' order represents '0' with '7596'
c Var 'aux1830' direct represents '0' with '7596'
c Var 'aux1830' order represents '1' with '7597'
-7596 7597 0
c Var 'aux1830' direct represents '1' with '7598'
7596 -7597 7598 0
-7598 7597 0
-7598 -7596 0
c Var 'aux1830' direct represents '2' with '-7597'
7596 7598 -7597 0
c Encoding variable: aux1831 with domain: int(0..2) (representing constraint ((x_00009_00006=8) + (x_00009_00005=8)))
c Both direct and order encoding.
c Var 'aux1831' order represents '0' with '7599'
c Var 'aux1831' direct represents '0' with '7599'
c Var 'aux1831' order represents '1' with '7600'
-7599 7600 0
c Var 'aux1831' direct represents '1' with '7601'
7599 -7600 7601 0
-7601 7600 0
-7601 -7599 0
c Var 'aux1831' direct represents '2' with '-7600'
7599 7601 -7600 0
c Encoding variable: aux1832 with domain: int(0..3) (representing constraint ((x_00008_00006=8) + aux1831))
c Both direct and order encoding.
c Var 'aux1832' order represents '0' with '7602'
c Var 'aux1832' direct represents '0' with '7602'
c Var 'aux1832' order represents '1' with '7603'
-7602 7603 0
c Var 'aux1832' direct represents '1' with '7604'
7602 -7603 7604 0
-7604 7603 0
-7604 -7602 0
c Var 'aux1832' order represents '2' with '7605'
-7603 7605 0
c Var 'aux1832' direct represents '2' with '7606'
7603 -7605 7606 0
-7606 7605 0
-7606 -7603 0
c Var 'aux1832' direct represents '3' with '-7605'
7602 7604 7606 -7605 0
c Encoding variable: aux1833 with domain: int(0..4) (representing constraint (aux1828 + aux1830))
c Both direct and order encoding.
c Var 'aux1833' order represents '0' with '7607'
c Var 'aux1833' direct represents '0' with '7607'
c Var 'aux1833' order represents '1' with '7608'
-7607 7608 0
c Var 'aux1833' direct represents '1' with '7609'
7607 -7608 7609 0
-7609 7608 0
-7609 -7607 0
c Var 'aux1833' order represents '2' with '7610'
-7608 7610 0
c Var 'aux1833' direct represents '2' with '7611'
7608 -7610 7611 0
-7611 7610 0
-7611 -7608 0
c Var 'aux1833' order represents '3' with '7612'
-7610 7612 0
c Var 'aux1833' direct represents '3' with '7613'
7610 -7612 7613 0
-7613 7612 0
-7613 -7610 0
c Var 'aux1833' direct represents '4' with '-7612'
7607 7609 7611 7613 -7612 0
c Encoding variable: aux1834 with domain: int(0..2) (representing constraint ((x_00008_00004=9) + (x_00007_00006=9)))
c Both direct and order encoding.
c Var 'aux1834' order represents '0' with '7614'
c Var 'aux1834' direct represents '0' with '7614'
c Var 'aux1834' order represents '1' with '7615'
-7614 7615 0
c Var 'aux1834' direct represents '1' with '7616'
7614 -7615 7616 0
-7616 7615 0
-7616 -7614 0
c Var 'aux1834' direct represents '2' with '-7615'
7614 7616 -7615 0
c Encoding variable: aux1835 with domain: int(0..2) (representing constraint ((x_00007_00005=9) + (x_00008_00005=9)))
c Both direct and order encoding.
c Var 'aux1835' order represents '0' with '7617'
c Var 'aux1835' direct represents '0' with '7617'
c Var 'aux1835' order represents '1' with '7618'
-7617 7618 0
c Var 'aux1835' direct represents '1' with '7619'
7617 -7618 7619 0
-7619 7618 0
-7619 -7617 0
c Var 'aux1835' direct represents '2' with '-7618'
7617 7619 -7618 0
c Encoding variable: aux1836 with domain: int(0..2) (representing constraint ((x_00007_00004=9) + (x_00009_00004=9)))
c Both direct and order encoding.
c Var 'aux1836' order represents '0' with '7620'
c Var 'aux1836' direct represents '0' with '7620'
c Var 'aux1836' order represents '1' with '7621'
-7620 7621 0
c Var 'aux1836' direct represents '1' with '7622'
7620 -7621 7622 0
-7622 7621 0
-7622 -7620 0
c Var 'aux1836' direct represents '2' with '-7621'
7620 7622 -7621 0
c Encoding variable: aux1837 with domain: int(0..2) (representing constraint ((x_00009_00006=9) + (x_00009_00005=9)))
c Both direct and order encoding.
c Var 'aux1837' order represents '0' with '7623'
c Var 'aux1837' direct represents '0' with '7623'
c Var 'aux1837' order represents '1' with '7624'
-7623 7624 0
c Var 'aux1837' direct represents '1' with '7625'
7623 -7624 7625 0
-7625 7624 0
-7625 -7623 0
c Var 'aux1837' direct represents '2' with '-7624'
7623 7625 -7624 0
c Encoding variable: aux1838 with domain: int(0..3) (representing constraint ((x_00008_00006=9) + aux1837))
c Both direct and order encoding.
c Var 'aux1838' order represents '0' with '7626'
c Var 'aux1838' direct represents '0' with '7626'
c Var 'aux1838' order represents '1' with '7627'
-7626 7627 0
c Var 'aux1838' direct represents '1' with '7628'
7626 -7627 7628 0
-7628 7627 0
-7628 -7626 0
c Var 'aux1838' order represents '2' with '7629'
-7627 7629 0
c Var 'aux1838' direct represents '2' with '7630'
7627 -7629 7630 0
-7630 7629 0
-7630 -7627 0
c Var 'aux1838' direct represents '3' with '-7629'
7626 7628 7630 -7629 0
c Encoding variable: aux1839 with domain: int(0..4) (representing constraint (aux1834 + aux1836))
c Both direct and order encoding.
c Var 'aux1839' order represents '0' with '7631'
c Var 'aux1839' direct represents '0' with '7631'
c Var 'aux1839' order represents '1' with '7632'
-7631 7632 0
c Var 'aux1839' direct represents '1' with '7633'
7631 -7632 7633 0
-7633 7632 0
-7633 -7631 0
c Var 'aux1839' order represents '2' with '7634'
-7632 7634 0
c Var 'aux1839' direct represents '2' with '7635'
7632 -7634 7635 0
-7635 7634 0
-7635 -7632 0
c Var 'aux1839' order represents '3' with '7636'
-7634 7636 0
c Var 'aux1839' direct represents '3' with '7637'
7634 -7636 7637 0
-7637 7636 0
-7637 -7634 0
c Var 'aux1839' direct represents '4' with '-7636'
7631 7633 7635 7637 -7636 0
c Encoding variable: aux1840 with domain: int(0..2) (representing constraint ((x_00008_00007=1) + (x_00007_00009=1)))
c Both direct and order encoding.
c Var 'aux1840' order represents '0' with '7638'
c Var 'aux1840' direct represents '0' with '7638'
c Var 'aux1840' order represents '1' with '7639'
-7638 7639 0
c Var 'aux1840' direct represents '1' with '7640'
7638 -7639 7640 0
-7640 7639 0
-7640 -7638 0
c Var 'aux1840' direct represents '2' with '-7639'
7638 7640 -7639 0
c Encoding variable: aux1841 with domain: int(0..2) (representing constraint ((x_00007_00008=1) + (x_00008_00008=1)))
c Both direct and order encoding.
c Var 'aux1841' order represents '0' with '7641'
c Var 'aux1841' direct represents '0' with '7641'
c Var 'aux1841' order represents '1' with '7642'
-7641 7642 0
c Var 'aux1841' direct represents '1' with '7643'
7641 -7642 7643 0
-7643 7642 0
-7643 -7641 0
c Var 'aux1841' direct represents '2' with '-7642'
7641 7643 -7642 0
c Encoding variable: aux1842 with domain: int(0..2) (representing constraint ((x_00007_00007=1) + (x_00009_00007=1)))
c Both direct and order encoding.
c Var 'aux1842' order represents '0' with '7644'
c Var 'aux1842' direct represents '0' with '7644'
c Var 'aux1842' order represents '1' with '7645'
-7644 7645 0
c Var 'aux1842' direct represents '1' with '7646'
7644 -7645 7646 0
-7646 7645 0
-7646 -7644 0
c Var 'aux1842' direct represents '2' with '-7645'
7644 7646 -7645 0
c Encoding variable: aux1843 with domain: int(0..2) (representing constraint ((x_00009_00009=1) + (x_00009_00008=1)))
c Both direct and order encoding.
c Var 'aux1843' order represents '0' with '7647'
c Var 'aux1843' direct represents '0' with '7647'
c Var 'aux1843' order represents '1' with '7648'
-7647 7648 0
c Var 'aux1843' direct represents '1' with '7649'
7647 -7648 7649 0
-7649 7648 0
-7649 -7647 0
c Var 'aux1843' direct represents '2' with '-7648'
7647 7649 -7648 0
c Encoding variable: aux1844 with domain: int(0..3) (representing constraint ((x_00008_00009=1) + aux1843))
c Both direct and order encoding.
c Var 'aux1844' order represents '0' with '7650'
c Var 'aux1844' direct represents '0' with '7650'
c Var 'aux1844' order represents '1' with '7651'
-7650 7651 0
c Var 'aux1844' direct represents '1' with '7652'
7650 -7651 7652 0
-7652 7651 0
-7652 -7650 0
c Var 'aux1844' order represents '2' with '7653'
-7651 7653 0
c Var 'aux1844' direct represents '2' with '7654'
7651 -7653 7654 0
-7654 7653 0
-7654 -7651 0
c Var 'aux1844' direct represents '3' with '-7653'
7650 7652 7654 -7653 0
c Encoding variable: aux1845 with domain: int(0..4) (representing constraint (aux1840 + aux1842))
c Both direct and order encoding.
c Var 'aux1845' order represents '0' with '7655'
c Var 'aux1845' direct represents '0' with '7655'
c Var 'aux1845' order represents '1' with '7656'
-7655 7656 0
c Var 'aux1845' direct represents '1' with '7657'
7655 -7656 7657 0
-7657 7656 0
-7657 -7655 0
c Var 'aux1845' order represents '2' with '7658'
-7656 7658 0
c Var 'aux1845' direct represents '2' with '7659'
7656 -7658 7659 0
-7659 7658 0
-7659 -7656 0
c Var 'aux1845' order represents '3' with '7660'
-7658 7660 0
c Var 'aux1845' direct represents '3' with '7661'
7658 -7660 7661 0
-7661 7660 0
-7661 -7658 0
c Var 'aux1845' direct represents '4' with '-7660'
7655 7657 7659 7661 -7660 0
c Encoding variable: aux1846 with domain: int(0..2) (representing constraint ((x_00008_00007=2) + (x_00007_00009=2)))
c Both direct and order encoding.
c Var 'aux1846' order represents '0' with '7662'
c Var 'aux1846' direct represents '0' with '7662'
c Var 'aux1846' order represents '1' with '7663'
-7662 7663 0
c Var 'aux1846' direct represents '1' with '7664'
7662 -7663 7664 0
-7664 7663 0
-7664 -7662 0
c Var 'aux1846' direct represents '2' with '-7663'
7662 7664 -7663 0
c Encoding variable: aux1847 with domain: int(0..2) (representing constraint ((x_00007_00008=2) + (x_00008_00008=2)))
c Both direct and order encoding.
c Var 'aux1847' order represents '0' with '7665'
c Var 'aux1847' direct represents '0' with '7665'
c Var 'aux1847' order represents '1' with '7666'
-7665 7666 0
c Var 'aux1847' direct represents '1' with '7667'
7665 -7666 7667 0
-7667 7666 0
-7667 -7665 0
c Var 'aux1847' direct represents '2' with '-7666'
7665 7667 -7666 0
c Encoding variable: aux1848 with domain: int(0..2) (representing constraint ((x_00007_00007=2) + (x_00009_00007=2)))
c Both direct and order encoding.
c Var 'aux1848' order represents '0' with '7668'
c Var 'aux1848' direct represents '0' with '7668'
c Var 'aux1848' order represents '1' with '7669'
-7668 7669 0
c Var 'aux1848' direct represents '1' with '7670'
7668 -7669 7670 0
-7670 7669 0
-7670 -7668 0
c Var 'aux1848' direct represents '2' with '-7669'
7668 7670 -7669 0
c Encoding variable: aux1849 with domain: int(0..2) (representing constraint ((x_00009_00009=2) + (x_00009_00008=2)))
c Both direct and order encoding.
c Var 'aux1849' order represents '0' with '7671'
c Var 'aux1849' direct represents '0' with '7671'
c Var 'aux1849' order represents '1' with '7672'
-7671 7672 0
c Var 'aux1849' direct represents '1' with '7673'
7671 -7672 7673 0
-7673 7672 0
-7673 -7671 0
c Var 'aux1849' direct represents '2' with '-7672'
7671 7673 -7672 0
c Encoding variable: aux1850 with domain: int(0..3) (representing constraint ((x_00008_00009=2) + aux1849))
c Both direct and order encoding.
c Var 'aux1850' order represents '0' with '7674'
c Var 'aux1850' direct represents '0' with '7674'
c Var 'aux1850' order represents '1' with '7675'
-7674 7675 0
c Var 'aux1850' direct represents '1' with '7676'
7674 -7675 7676 0
-7676 7675 0
-7676 -7674 0
c Var 'aux1850' order represents '2' with '7677'
-7675 7677 0
c Var 'aux1850' direct represents '2' with '7678'
7675 -7677 7678 0
-7678 7677 0
-7678 -7675 0
c Var 'aux1850' direct represents '3' with '-7677'
7674 7676 7678 -7677 0
c Encoding variable: aux1851 with domain: int(0..4) (representing constraint (aux1846 + aux1848))
c Both direct and order encoding.
c Var 'aux1851' order represents '0' with '7679'
c Var 'aux1851' direct represents '0' with '7679'
c Var 'aux1851' order represents '1' with '7680'
-7679 7680 0
c Var 'aux1851' direct represents '1' with '7681'
7679 -7680 7681 0
-7681 7680 0
-7681 -7679 0
c Var 'aux1851' order represents '2' with '7682'
-7680 7682 0
c Var 'aux1851' direct represents '2' with '7683'
7680 -7682 7683 0
-7683 7682 0
-7683 -7680 0
c Var 'aux1851' order represents '3' with '7684'
-7682 7684 0
c Var 'aux1851' direct represents '3' with '7685'
7682 -7684 7685 0
-7685 7684 0
-7685 -7682 0
c Var 'aux1851' direct represents '4' with '-7684'
7679 7681 7683 7685 -7684 0
c Encoding variable: aux1852 with domain: int(0..2) (representing constraint ((x_00008_00007=3) + (x_00007_00009=3)))
c Both direct and order encoding.
c Var 'aux1852' order represents '0' with '7686'
c Var 'aux1852' direct represents '0' with '7686'
c Var 'aux1852' order represents '1' with '7687'
-7686 7687 0
c Var 'aux1852' direct represents '1' with '7688'
7686 -7687 7688 0
-7688 7687 0
-7688 -7686 0
c Var 'aux1852' direct represents '2' with '-7687'
7686 7688 -7687 0
c Encoding variable: aux1853 with domain: int(0..2) (representing constraint ((x_00007_00008=3) + (x_00008_00008=3)))
c Both direct and order encoding.
c Var 'aux1853' order represents '0' with '7689'
c Var 'aux1853' direct represents '0' with '7689'
c Var 'aux1853' order represents '1' with '7690'
-7689 7690 0
c Var 'aux1853' direct represents '1' with '7691'
7689 -7690 7691 0
-7691 7690 0
-7691 -7689 0
c Var 'aux1853' direct represents '2' with '-7690'
7689 7691 -7690 0
c Encoding variable: aux1854 with domain: int(0..2) (representing constraint ((x_00007_00007=3) + (x_00009_00007=3)))
c Both direct and order encoding.
c Var 'aux1854' order represents '0' with '7692'
c Var 'aux1854' direct represents '0' with '7692'
c Var 'aux1854' order represents '1' with '7693'
-7692 7693 0
c Var 'aux1854' direct represents '1' with '7694'
7692 -7693 7694 0
-7694 7693 0
-7694 -7692 0
c Var 'aux1854' direct represents '2' with '-7693'
7692 7694 -7693 0
c Encoding variable: aux1855 with domain: int(0..2) (representing constraint ((x_00009_00009=3) + (x_00009_00008=3)))
c Both direct and order encoding.
c Var 'aux1855' order represents '0' with '7695'
c Var 'aux1855' direct represents '0' with '7695'
c Var 'aux1855' order represents '1' with '7696'
-7695 7696 0
c Var 'aux1855' direct represents '1' with '7697'
7695 -7696 7697 0
-7697 7696 0
-7697 -7695 0
c Var 'aux1855' direct represents '2' with '-7696'
7695 7697 -7696 0
c Encoding variable: aux1856 with domain: int(0..3) (representing constraint ((x_00008_00009=3) + aux1855))
c Both direct and order encoding.
c Var 'aux1856' order represents '0' with '7698'
c Var 'aux1856' direct represents '0' with '7698'
c Var 'aux1856' order represents '1' with '7699'
-7698 7699 0
c Var 'aux1856' direct represents '1' with '7700'
7698 -7699 7700 0
-7700 7699 0
-7700 -7698 0
c Var 'aux1856' order represents '2' with '7701'
-7699 7701 0
c Var 'aux1856' direct represents '2' with '7702'
7699 -7701 7702 0
-7702 7701 0
-7702 -7699 0
c Var 'aux1856' direct represents '3' with '-7701'
7698 7700 7702 -7701 0
c Encoding variable: aux1857 with domain: int(0..4) (representing constraint (aux1852 + aux1854))
c Both direct and order encoding.
c Var 'aux1857' order represents '0' with '7703'
c Var 'aux1857' direct represents '0' with '7703'
c Var 'aux1857' order represents '1' with '7704'
-7703 7704 0
c Var 'aux1857' direct represents '1' with '7705'
7703 -7704 7705 0
-7705 7704 0
-7705 -7703 0
c Var 'aux1857' order represents '2' with '7706'
-7704 7706 0
c Var 'aux1857' direct represents '2' with '7707'
7704 -7706 7707 0
-7707 7706 0
-7707 -7704 0
c Var 'aux1857' order represents '3' with '7708'
-7706 7708 0
c Var 'aux1857' direct represents '3' with '7709'
7706 -7708 7709 0
-7709 7708 0
-7709 -7706 0
c Var 'aux1857' direct represents '4' with '-7708'
7703 7705 7707 7709 -7708 0
c Encoding variable: aux1858 with domain: int(0..2) (representing constraint ((x_00008_00007=4) + (x_00007_00009=4)))
c Both direct and order encoding.
c Var 'aux1858' order represents '0' with '7710'
c Var 'aux1858' direct represents '0' with '7710'
c Var 'aux1858' order represents '1' with '7711'
-7710 7711 0
c Var 'aux1858' direct represents '1' with '7712'
7710 -7711 7712 0
-7712 7711 0
-7712 -7710 0
c Var 'aux1858' direct represents '2' with '-7711'
7710 7712 -7711 0
c Encoding variable: aux1859 with domain: int(0..2) (representing constraint ((x_00007_00008=4) + (x_00008_00008=4)))
c Both direct and order encoding.
c Var 'aux1859' order represents '0' with '7713'
c Var 'aux1859' direct represents '0' with '7713'
c Var 'aux1859' order represents '1' with '7714'
-7713 7714 0
c Var 'aux1859' direct represents '1' with '7715'
7713 -7714 7715 0
-7715 7714 0
-7715 -7713 0
c Var 'aux1859' direct represents '2' with '-7714'
7713 7715 -7714 0
c Encoding variable: aux1860 with domain: int(0..2) (representing constraint ((x_00007_00007=4) + (x_00009_00007=4)))
c Both direct and order encoding.
c Var 'aux1860' order represents '0' with '7716'
c Var 'aux1860' direct represents '0' with '7716'
c Var 'aux1860' order represents '1' with '7717'
-7716 7717 0
c Var 'aux1860' direct represents '1' with '7718'
7716 -7717 7718 0
-7718 7717 0
-7718 -7716 0
c Var 'aux1860' direct represents '2' with '-7717'
7716 7718 -7717 0
c Encoding variable: aux1861 with domain: int(0..2) (representing constraint ((x_00009_00009=4) + (x_00009_00008=4)))
c Both direct and order encoding.
c Var 'aux1861' order represents '0' with '7719'
c Var 'aux1861' direct represents '0' with '7719'
c Var 'aux1861' order represents '1' with '7720'
-7719 7720 0
c Var 'aux1861' direct represents '1' with '7721'
7719 -7720 7721 0
-7721 7720 0
-7721 -7719 0
c Var 'aux1861' direct represents '2' with '-7720'
7719 7721 -7720 0
c Encoding variable: aux1862 with domain: int(0..3) (representing constraint ((x_00008_00009=4) + aux1861))
c Both direct and order encoding.
c Var 'aux1862' order represents '0' with '7722'
c Var 'aux1862' direct represents '0' with '7722'
c Var 'aux1862' order represents '1' with '7723'
-7722 7723 0
c Var 'aux1862' direct represents '1' with '7724'
7722 -7723 7724 0
-7724 7723 0
-7724 -7722 0
c Var 'aux1862' order represents '2' with '7725'
-7723 7725 0
c Var 'aux1862' direct represents '2' with '7726'
7723 -7725 7726 0
-7726 7725 0
-7726 -7723 0
c Var 'aux1862' direct represents '3' with '-7725'
7722 7724 7726 -7725 0
c Encoding variable: aux1863 with domain: int(0..4) (representing constraint (aux1858 + aux1860))
c Both direct and order encoding.
c Var 'aux1863' order represents '0' with '7727'
c Var 'aux1863' direct represents '0' with '7727'
c Var 'aux1863' order represents '1' with '7728'
-7727 7728 0
c Var 'aux1863' direct represents '1' with '7729'
7727 -7728 7729 0
-7729 7728 0
-7729 -7727 0
c Var 'aux1863' order represents '2' with '7730'
-7728 7730 0
c Var 'aux1863' direct represents '2' with '7731'
7728 -7730 7731 0
-7731 7730 0
-7731 -7728 0
c Var 'aux1863' order represents '3' with '7732'
-7730 7732 0
c Var 'aux1863' direct represents '3' with '7733'
7730 -7732 7733 0
-7733 7732 0
-7733 -7730 0
c Var 'aux1863' direct represents '4' with '-7732'
7727 7729 7731 7733 -7732 0
c Encoding variable: aux1864 with domain: int(0..2) (representing constraint ((x_00008_00007=5) + (x_00007_00009=5)))
c Both direct and order encoding.
c Var 'aux1864' order represents '0' with '7734'
c Var 'aux1864' direct represents '0' with '7734'
c Var 'aux1864' order represents '1' with '7735'
-7734 7735 0
c Var 'aux1864' direct represents '1' with '7736'
7734 -7735 7736 0
-7736 7735 0
-7736 -7734 0
c Var 'aux1864' direct represents '2' with '-7735'
7734 7736 -7735 0
c Encoding variable: aux1865 with domain: int(0..2) (representing constraint ((x_00007_00008=5) + (x_00008_00008=5)))
c Both direct and order encoding.
c Var 'aux1865' order represents '0' with '7737'
c Var 'aux1865' direct represents '0' with '7737'
c Var 'aux1865' order represents '1' with '7738'
-7737 7738 0
c Var 'aux1865' direct represents '1' with '7739'
7737 -7738 7739 0
-7739 7738 0
-7739 -7737 0
c Var 'aux1865' direct represents '2' with '-7738'
7737 7739 -7738 0
c Encoding variable: aux1866 with domain: int(0..2) (representing constraint ((x_00007_00007=5) + (x_00009_00007=5)))
c Both direct and order encoding.
c Var 'aux1866' order represents '0' with '7740'
c Var 'aux1866' direct represents '0' with '7740'
c Var 'aux1866' order represents '1' with '7741'
-7740 7741 0
c Var 'aux1866' direct represents '1' with '7742'
7740 -7741 7742 0
-7742 7741 0
-7742 -7740 0
c Var 'aux1866' direct represents '2' with '-7741'
7740 7742 -7741 0
c Encoding variable: aux1867 with domain: int(0..2) (representing constraint ((x_00009_00009=5) + (x_00009_00008=5)))
c Both direct and order encoding.
c Var 'aux1867' order represents '0' with '7743'
c Var 'aux1867' direct represents '0' with '7743'
c Var 'aux1867' order represents '1' with '7744'
-7743 7744 0
c Var 'aux1867' direct represents '1' with '7745'
7743 -7744 7745 0
-7745 7744 0
-7745 -7743 0
c Var 'aux1867' direct represents '2' with '-7744'
7743 7745 -7744 0
c Encoding variable: aux1868 with domain: int(0..3) (representing constraint ((x_00008_00009=5) + aux1867))
c Both direct and order encoding.
c Var 'aux1868' order represents '0' with '7746'
c Var 'aux1868' direct represents '0' with '7746'
c Var 'aux1868' order represents '1' with '7747'
-7746 7747 0
c Var 'aux1868' direct represents '1' with '7748'
7746 -7747 7748 0
-7748 7747 0
-7748 -7746 0
c Var 'aux1868' order represents '2' with '7749'
-7747 7749 0
c Var 'aux1868' direct represents '2' with '7750'
7747 -7749 7750 0
-7750 7749 0
-7750 -7747 0
c Var 'aux1868' direct represents '3' with '-7749'
7746 7748 7750 -7749 0
c Encoding variable: aux1869 with domain: int(0..4) (representing constraint (aux1864 + aux1866))
c Both direct and order encoding.
c Var 'aux1869' order represents '0' with '7751'
c Var 'aux1869' direct represents '0' with '7751'
c Var 'aux1869' order represents '1' with '7752'
-7751 7752 0
c Var 'aux1869' direct represents '1' with '7753'
7751 -7752 7753 0
-7753 7752 0
-7753 -7751 0
c Var 'aux1869' order represents '2' with '7754'
-7752 7754 0
c Var 'aux1869' direct represents '2' with '7755'
7752 -7754 7755 0
-7755 7754 0
-7755 -7752 0
c Var 'aux1869' order represents '3' with '7756'
-7754 7756 0
c Var 'aux1869' direct represents '3' with '7757'
7754 -7756 7757 0
-7757 7756 0
-7757 -7754 0
c Var 'aux1869' direct represents '4' with '-7756'
7751 7753 7755 7757 -7756 0
c Encoding variable: aux1870 with domain: int(0..2) (representing constraint ((x_00008_00007=6) + (x_00007_00009=6)))
c Both direct and order encoding.
c Var 'aux1870' order represents '0' with '7758'
c Var 'aux1870' direct represents '0' with '7758'
c Var 'aux1870' order represents '1' with '7759'
-7758 7759 0
c Var 'aux1870' direct represents '1' with '7760'
7758 -7759 7760 0
-7760 7759 0
-7760 -7758 0
c Var 'aux1870' direct represents '2' with '-7759'
7758 7760 -7759 0
c Encoding variable: aux1871 with domain: int(0..2) (representing constraint ((x_00007_00008=6) + (x_00008_00008=6)))
c Both direct and order encoding.
c Var 'aux1871' order represents '0' with '7761'
c Var 'aux1871' direct represents '0' with '7761'
c Var 'aux1871' order represents '1' with '7762'
-7761 7762 0
c Var 'aux1871' direct represents '1' with '7763'
7761 -7762 7763 0
-7763 7762 0
-7763 -7761 0
c Var 'aux1871' direct represents '2' with '-7762'
7761 7763 -7762 0
c Encoding variable: aux1872 with domain: int(0..2) (representing constraint ((x_00007_00007=6) + (x_00009_00007=6)))
c Both direct and order encoding.
c Var 'aux1872' order represents '0' with '7764'
c Var 'aux1872' direct represents '0' with '7764'
c Var 'aux1872' order represents '1' with '7765'
-7764 7765 0
c Var 'aux1872' direct represents '1' with '7766'
7764 -7765 7766 0
-7766 7765 0
-7766 -7764 0
c Var 'aux1872' direct represents '2' with '-7765'
7764 7766 -7765 0
c Encoding variable: aux1873 with domain: int(0..2) (representing constraint ((x_00009_00009=6) + (x_00009_00008=6)))
c Both direct and order encoding.
c Var 'aux1873' order represents '0' with '7767'
c Var 'aux1873' direct represents '0' with '7767'
c Var 'aux1873' order represents '1' with '7768'
-7767 7768 0
c Var 'aux1873' direct represents '1' with '7769'
7767 -7768 7769 0
-7769 7768 0
-7769 -7767 0
c Var 'aux1873' direct represents '2' with '-7768'
7767 7769 -7768 0
c Encoding variable: aux1874 with domain: int(0..3) (representing constraint ((x_00008_00009=6) + aux1873))
c Both direct and order encoding.
c Var 'aux1874' order represents '0' with '7770'
c Var 'aux1874' direct represents '0' with '7770'
c Var 'aux1874' order represents '1' with '7771'
-7770 7771 0
c Var 'aux1874' direct represents '1' with '7772'
7770 -7771 7772 0
-7772 7771 0
-7772 -7770 0
c Var 'aux1874' order represents '2' with '7773'
-7771 7773 0
c Var 'aux1874' direct represents '2' with '7774'
7771 -7773 7774 0
-7774 7773 0
-7774 -7771 0
c Var 'aux1874' direct represents '3' with '-7773'
7770 7772 7774 -7773 0
c Encoding variable: aux1875 with domain: int(0..4) (representing constraint (aux1870 + aux1872))
c Both direct and order encoding.
c Var 'aux1875' order represents '0' with '7775'
c Var 'aux1875' direct represents '0' with '7775'
c Var 'aux1875' order represents '1' with '7776'
-7775 7776 0
c Var 'aux1875' direct represents '1' with '7777'
7775 -7776 7777 0
-7777 7776 0
-7777 -7775 0
c Var 'aux1875' order represents '2' with '7778'
-7776 7778 0
c Var 'aux1875' direct represents '2' with '7779'
7776 -7778 7779 0
-7779 7778 0
-7779 -7776 0
c Var 'aux1875' order represents '3' with '7780'
-7778 7780 0
c Var 'aux1875' direct represents '3' with '7781'
7778 -7780 7781 0
-7781 7780 0
-7781 -7778 0
c Var 'aux1875' direct represents '4' with '-7780'
7775 7777 7779 7781 -7780 0
c Encoding variable: aux1876 with domain: int(0..2) (representing constraint ((x_00008_00007=7) + (x_00007_00009=7)))
c Both direct and order encoding.
c Var 'aux1876' order represents '0' with '7782'
c Var 'aux1876' direct represents '0' with '7782'
c Var 'aux1876' order represents '1' with '7783'
-7782 7783 0
c Var 'aux1876' direct represents '1' with '7784'
7782 -7783 7784 0
-7784 7783 0
-7784 -7782 0
c Var 'aux1876' direct represents '2' with '-7783'
7782 7784 -7783 0
c Encoding variable: aux1877 with domain: int(0..2) (representing constraint ((x_00007_00008=7) + (x_00008_00008=7)))
c Both direct and order encoding.
c Var 'aux1877' order represents '0' with '7785'
c Var 'aux1877' direct represents '0' with '7785'
c Var 'aux1877' order represents '1' with '7786'
-7785 7786 0
c Var 'aux1877' direct represents '1' with '7787'
7785 -7786 7787 0
-7787 7786 0
-7787 -7785 0
c Var 'aux1877' direct represents '2' with '-7786'
7785 7787 -7786 0
c Encoding variable: aux1878 with domain: int(0..2) (representing constraint ((x_00007_00007=7) + (x_00009_00007=7)))
c Both direct and order encoding.
c Var 'aux1878' order represents '0' with '7788'
c Var 'aux1878' direct represents '0' with '7788'
c Var 'aux1878' order represents '1' with '7789'
-7788 7789 0
c Var 'aux1878' direct represents '1' with '7790'
7788 -7789 7790 0
-7790 7789 0
-7790 -7788 0
c Var 'aux1878' direct represents '2' with '-7789'
7788 7790 -7789 0
c Encoding variable: aux1879 with domain: int(0..2) (representing constraint ((x_00009_00009=7) + (x_00009_00008=7)))
c Both direct and order encoding.
c Var 'aux1879' order represents '0' with '7791'
c Var 'aux1879' direct represents '0' with '7791'
c Var 'aux1879' order represents '1' with '7792'
-7791 7792 0
c Var 'aux1879' direct represents '1' with '7793'
7791 -7792 7793 0
-7793 7792 0
-7793 -7791 0
c Var 'aux1879' direct represents '2' with '-7792'
7791 7793 -7792 0
c Encoding variable: aux1880 with domain: int(0..3) (representing constraint ((x_00008_00009=7) + aux1879))
c Both direct and order encoding.
c Var 'aux1880' order represents '0' with '7794'
c Var 'aux1880' direct represents '0' with '7794'
c Var 'aux1880' order represents '1' with '7795'
-7794 7795 0
c Var 'aux1880' direct represents '1' with '7796'
7794 -7795 7796 0
-7796 7795 0
-7796 -7794 0
c Var 'aux1880' order represents '2' with '7797'
-7795 7797 0
c Var 'aux1880' direct represents '2' with '7798'
7795 -7797 7798 0
-7798 7797 0
-7798 -7795 0
c Var 'aux1880' direct represents '3' with '-7797'
7794 7796 7798 -7797 0
c Encoding variable: aux1881 with domain: int(0..4) (representing constraint (aux1876 + aux1878))
c Both direct and order encoding.
c Var 'aux1881' order represents '0' with '7799'
c Var 'aux1881' direct represents '0' with '7799'
c Var 'aux1881' order represents '1' with '7800'
-7799 7800 0
c Var 'aux1881' direct represents '1' with '7801'
7799 -7800 7801 0
-7801 7800 0
-7801 -7799 0
c Var 'aux1881' order represents '2' with '7802'
-7800 7802 0
c Var 'aux1881' direct represents '2' with '7803'
7800 -7802 7803 0
-7803 7802 0
-7803 -7800 0
c Var 'aux1881' order represents '3' with '7804'
-7802 7804 0
c Var 'aux1881' direct represents '3' with '7805'
7802 -7804 7805 0
-7805 7804 0
-7805 -7802 0
c Var 'aux1881' direct represents '4' with '-7804'
7799 7801 7803 7805 -7804 0
c Encoding variable: aux1882 with domain: int(0..2) (representing constraint ((x_00008_00007=8) + (x_00007_00009=8)))
c Both direct and order encoding.
c Var 'aux1882' order represents '0' with '7806'
c Var 'aux1882' direct represents '0' with '7806'
c Var 'aux1882' order represents '1' with '7807'
-7806 7807 0
c Var 'aux1882' direct represents '1' with '7808'
7806 -7807 7808 0
-7808 7807 0
-7808 -7806 0
c Var 'aux1882' direct represents '2' with '-7807'
7806 7808 -7807 0
c Encoding variable: aux1883 with domain: int(0..2) (representing constraint ((x_00007_00008=8) + (x_00008_00008=8)))
c Both direct and order encoding.
c Var 'aux1883' order represents '0' with '7809'
c Var 'aux1883' direct represents '0' with '7809'
c Var 'aux1883' order represents '1' with '7810'
-7809 7810 0
c Var 'aux1883' direct represents '1' with '7811'
7809 -7810 7811 0
-7811 7810 0
-7811 -7809 0
c Var 'aux1883' direct represents '2' with '-7810'
7809 7811 -7810 0
c Encoding variable: aux1884 with domain: int(0..2) (representing constraint ((x_00007_00007=8) + (x_00009_00007=8)))
c Both direct and order encoding.
c Var 'aux1884' order represents '0' with '7812'
c Var 'aux1884' direct represents '0' with '7812'
c Var 'aux1884' order represents '1' with '7813'
-7812 7813 0
c Var 'aux1884' direct represents '1' with '7814'
7812 -7813 7814 0
-7814 7813 0
-7814 -7812 0
c Var 'aux1884' direct represents '2' with '-7813'
7812 7814 -7813 0
c Encoding variable: aux1885 with domain: int(0..2) (representing constraint ((x_00009_00009=8) + (x_00009_00008=8)))
c Both direct and order encoding.
c Var 'aux1885' order represents '0' with '7815'
c Var 'aux1885' direct represents '0' with '7815'
c Var 'aux1885' order represents '1' with '7816'
-7815 7816 0
c Var 'aux1885' direct represents '1' with '7817'
7815 -7816 7817 0
-7817 7816 0
-7817 -7815 0
c Var 'aux1885' direct represents '2' with '-7816'
7815 7817 -7816 0
c Encoding variable: aux1886 with domain: int(0..3) (representing constraint ((x_00008_00009=8) + aux1885))
c Both direct and order encoding.
c Var 'aux1886' order represents '0' with '7818'
c Var 'aux1886' direct represents '0' with '7818'
c Var 'aux1886' order represents '1' with '7819'
-7818 7819 0
c Var 'aux1886' direct represents '1' with '7820'
7818 -7819 7820 0
-7820 7819 0
-7820 -7818 0
c Var 'aux1886' order represents '2' with '7821'
-7819 7821 0
c Var 'aux1886' direct represents '2' with '7822'
7819 -7821 7822 0
-7822 7821 0
-7822 -7819 0
c Var 'aux1886' direct represents '3' with '-7821'
7818 7820 7822 -7821 0
c Encoding variable: aux1887 with domain: int(0..4) (representing constraint (aux1882 + aux1884))
c Both direct and order encoding.
c Var 'aux1887' order represents '0' with '7823'
c Var 'aux1887' direct represents '0' with '7823'
c Var 'aux1887' order represents '1' with '7824'
-7823 7824 0
c Var 'aux1887' direct represents '1' with '7825'
7823 -7824 7825 0
-7825 7824 0
-7825 -7823 0
c Var 'aux1887' order represents '2' with '7826'
-7824 7826 0
c Var 'aux1887' direct represents '2' with '7827'
7824 -7826 7827 0
-7827 7826 0
-7827 -7824 0
c Var 'aux1887' order represents '3' with '7828'
-7826 7828 0
c Var 'aux1887' direct represents '3' with '7829'
7826 -7828 7829 0
-7829 7828 0
-7829 -7826 0
c Var 'aux1887' direct represents '4' with '-7828'
7823 7825 7827 7829 -7828 0
c Encoding variable: aux1888 with domain: int(0..2) (representing constraint ((x_00008_00007=9) + (x_00007_00009=9)))
c Both direct and order encoding.
c Var 'aux1888' order represents '0' with '7830'
c Var 'aux1888' direct represents '0' with '7830'
c Var 'aux1888' order represents '1' with '7831'
-7830 7831 0
c Var 'aux1888' direct represents '1' with '7832'
7830 -7831 7832 0
-7832 7831 0
-7832 -7830 0
c Var 'aux1888' direct represents '2' with '-7831'
7830 7832 -7831 0
c Encoding variable: aux1889 with domain: int(0..2) (representing constraint ((x_00007_00008=9) + (x_00008_00008=9)))
c Both direct and order encoding.
c Var 'aux1889' order represents '0' with '7833'
c Var 'aux1889' direct represents '0' with '7833'
c Var 'aux1889' order represents '1' with '7834'
-7833 7834 0
c Var 'aux1889' direct represents '1' with '7835'
7833 -7834 7835 0
-7835 7834 0
-7835 -7833 0
c Var 'aux1889' direct represents '2' with '-7834'
7833 7835 -7834 0
c Encoding variable: aux1890 with domain: int(0..2) (representing constraint ((x_00007_00007=9) + (x_00009_00007=9)))
c Both direct and order encoding.
c Var 'aux1890' order represents '0' with '7836'
c Var 'aux1890' direct represents '0' with '7836'
c Var 'aux1890' order represents '1' with '7837'
-7836 7837 0
c Var 'aux1890' direct represents '1' with '7838'
7836 -7837 7838 0
-7838 7837 0
-7838 -7836 0
c Var 'aux1890' direct represents '2' with '-7837'
7836 7838 -7837 0
c Encoding variable: aux1891 with domain: int(0..2) (representing constraint ((x_00009_00009=9) + (x_00009_00008=9)))
c Both direct and order encoding.
c Var 'aux1891' order represents '0' with '7839'
c Var 'aux1891' direct represents '0' with '7839'
c Var 'aux1891' order represents '1' with '7840'
-7839 7840 0
c Var 'aux1891' direct represents '1' with '7841'
7839 -7840 7841 0
-7841 7840 0
-7841 -7839 0
c Var 'aux1891' direct represents '2' with '-7840'
7839 7841 -7840 0
c Encoding variable: aux1892 with domain: int(0..3) (representing constraint ((x_00008_00009=9) + aux1891))
c Both direct and order encoding.
c Var 'aux1892' order represents '0' with '7842'
c Var 'aux1892' direct represents '0' with '7842'
c Var 'aux1892' order represents '1' with '7843'
-7842 7843 0
c Var 'aux1892' direct represents '1' with '7844'
7842 -7843 7844 0
-7844 7843 0
-7844 -7842 0
c Var 'aux1892' order represents '2' with '7845'
-7843 7845 0
c Var 'aux1892' direct represents '2' with '7846'
7843 -7845 7846 0
-7846 7845 0
-7846 -7843 0
c Var 'aux1892' direct represents '3' with '-7845'
7842 7844 7846 -7845 0
c Encoding variable: aux1893 with domain: int(0..4) (representing constraint (aux1888 + aux1890))
c Both direct and order encoding.
c Var 'aux1893' order represents '0' with '7847'
c Var 'aux1893' direct represents '0' with '7847'
c Var 'aux1893' order represents '1' with '7848'
-7847 7848 0
c Var 'aux1893' direct represents '1' with '7849'
7847 -7848 7849 0
-7849 7848 0
-7849 -7847 0
c Var 'aux1893' order represents '2' with '7850'
-7848 7850 0
c Var 'aux1893' direct represents '2' with '7851'
7848 -7850 7851 0
-7851 7850 0
-7851 -7848 0
c Var 'aux1893' order represents '3' with '7852'
-7850 7852 0
c Var 'aux1893' direct represents '3' with '7853'
7850 -7852 7853 0
-7853 7852 0
-7853 -7850 0
c Var 'aux1893' direct represents '4' with '-7852'
7847 7849 7851 7853 -7852 0
c Encoding variable: aux1894 with domain: int(0..2) (representing constraint ((x_00003_00001=1) + (x_00005_00001=1)))
c Both direct and order encoding.
c Var 'aux1894' order represents '0' with '7854'
c Var 'aux1894' direct represents '0' with '7854'
c Var 'aux1894' order represents '1' with '7855'
-7854 7855 0
c Var 'aux1894' direct represents '1' with '7856'
7854 -7855 7856 0
-7856 7855 0
-7856 -7854 0
c Var 'aux1894' direct represents '2' with '-7855'
7854 7856 -7855 0
c Encoding variable: aux1895 with domain: int(0..2) (representing constraint ((x_00003_00001=2) + (x_00005_00001=2)))
c Both direct and order encoding.
c Var 'aux1895' order represents '0' with '7857'
c Var 'aux1895' direct represents '0' with '7857'
c Var 'aux1895' order represents '1' with '7858'
-7857 7858 0
c Var 'aux1895' direct represents '1' with '7859'
7857 -7858 7859 0
-7859 7858 0
-7859 -7857 0
c Var 'aux1895' direct represents '2' with '-7858'
7857 7859 -7858 0
c Encoding variable: aux1896 with domain: int(0..2) (representing constraint ((x_00003_00001=3) + (x_00005_00001=3)))
c Both direct and order encoding.
c Var 'aux1896' order represents '0' with '7860'
c Var 'aux1896' direct represents '0' with '7860'
c Var 'aux1896' order represents '1' with '7861'
-7860 7861 0
c Var 'aux1896' direct represents '1' with '7862'
7860 -7861 7862 0
-7862 7861 0
-7862 -7860 0
c Var 'aux1896' direct represents '2' with '-7861'
7860 7862 -7861 0
c Encoding variable: aux1897 with domain: int(0..2) (representing constraint ((x_00003_00001=4) + (x_00005_00001=4)))
c Both direct and order encoding.
c Var 'aux1897' order represents '0' with '7863'
c Var 'aux1897' direct represents '0' with '7863'
c Var 'aux1897' order represents '1' with '7864'
-7863 7864 0
c Var 'aux1897' direct represents '1' with '7865'
7863 -7864 7865 0
-7865 7864 0
-7865 -7863 0
c Var 'aux1897' direct represents '2' with '-7864'
7863 7865 -7864 0
c Encoding variable: aux1898 with domain: int(0..2) (representing constraint ((x_00003_00001=5) + (x_00005_00001=5)))
c Both direct and order encoding.
c Var 'aux1898' order represents '0' with '7866'
c Var 'aux1898' direct represents '0' with '7866'
c Var 'aux1898' order represents '1' with '7867'
-7866 7867 0
c Var 'aux1898' direct represents '1' with '7868'
7866 -7867 7868 0
-7868 7867 0
-7868 -7866 0
c Var 'aux1898' direct represents '2' with '-7867'
7866 7868 -7867 0
c Encoding variable: aux1899 with domain: int(0..2) (representing constraint ((x_00003_00001=6) + (x_00005_00001=6)))
c Both direct and order encoding.
c Var 'aux1899' order represents '0' with '7869'
c Var 'aux1899' direct represents '0' with '7869'
c Var 'aux1899' order represents '1' with '7870'
-7869 7870 0
c Var 'aux1899' direct represents '1' with '7871'
7869 -7870 7871 0
-7871 7870 0
-7871 -7869 0
c Var 'aux1899' direct represents '2' with '-7870'
7869 7871 -7870 0
c Encoding variable: aux1900 with domain: int(0..2) (representing constraint ((x_00003_00001=7) + (x_00005_00001=7)))
c Both direct and order encoding.
c Var 'aux1900' order represents '0' with '7872'
c Var 'aux1900' direct represents '0' with '7872'
c Var 'aux1900' order represents '1' with '7873'
-7872 7873 0
c Var 'aux1900' direct represents '1' with '7874'
7872 -7873 7874 0
-7874 7873 0
-7874 -7872 0
c Var 'aux1900' direct represents '2' with '-7873'
7872 7874 -7873 0
c Encoding variable: aux1901 with domain: int(0..2) (representing constraint ((x_00003_00001=8) + (x_00005_00001=8)))
c Both direct and order encoding.
c Var 'aux1901' order represents '0' with '7875'
c Var 'aux1901' direct represents '0' with '7875'
c Var 'aux1901' order represents '1' with '7876'
-7875 7876 0
c Var 'aux1901' direct represents '1' with '7877'
7875 -7876 7877 0
-7877 7876 0
-7877 -7875 0
c Var 'aux1901' direct represents '2' with '-7876'
7875 7877 -7876 0
c Encoding variable: aux1902 with domain: int(0..2) (representing constraint ((x_00003_00001=9) + (x_00005_00001=9)))
c Both direct and order encoding.
c Var 'aux1902' order represents '0' with '7878'
c Var 'aux1902' direct represents '0' with '7878'
c Var 'aux1902' order represents '1' with '7879'
-7878 7879 0
c Var 'aux1902' direct represents '1' with '7880'
7878 -7879 7880 0
-7880 7879 0
-7880 -7878 0
c Var 'aux1902' direct represents '2' with '-7879'
7878 7880 -7879 0
c Encoding variable: aux1903 with domain: int(0..2) (representing constraint ((x_00003_00006=1) + (x_00004_00007=1)))
c Both direct and order encoding.
c Var 'aux1903' order represents '0' with '7881'
c Var 'aux1903' direct represents '0' with '7881'
c Var 'aux1903' order represents '1' with '7882'
-7881 7882 0
c Var 'aux1903' direct represents '1' with '7883'
7881 -7882 7883 0
-7883 7882 0
-7883 -7881 0
c Var 'aux1903' direct represents '2' with '-7882'
7881 7883 -7882 0
c Encoding variable: aux1904 with domain: int(0..2) (representing constraint ((x_00003_00006=2) + (x_00004_00007=2)))
c Both direct and order encoding.
c Var 'aux1904' order represents '0' with '7884'
c Var 'aux1904' direct represents '0' with '7884'
c Var 'aux1904' order represents '1' with '7885'
-7884 7885 0
c Var 'aux1904' direct represents '1' with '7886'
7884 -7885 7886 0
-7886 7885 0
-7886 -7884 0
c Var 'aux1904' direct represents '2' with '-7885'
7884 7886 -7885 0
c Encoding variable: aux1905 with domain: int(0..2) (representing constraint ((x_00003_00006=3) + (x_00004_00007=3)))
c Both direct and order encoding.
c Var 'aux1905' order represents '0' with '7887'
c Var 'aux1905' direct represents '0' with '7887'
c Var 'aux1905' order represents '1' with '7888'
-7887 7888 0
c Var 'aux1905' direct represents '1' with '7889'
7887 -7888 7889 0
-7889 7888 0
-7889 -7887 0
c Var 'aux1905' direct represents '2' with '-7888'
7887 7889 -7888 0
c Encoding variable: aux1906 with domain: int(0..2) (representing constraint ((x_00003_00006=4) + (x_00004_00007=4)))
c Both direct and order encoding.
c Var 'aux1906' order represents '0' with '7890'
c Var 'aux1906' direct represents '0' with '7890'
c Var 'aux1906' order represents '1' with '7891'
-7890 7891 0
c Var 'aux1906' direct represents '1' with '7892'
7890 -7891 7892 0
-7892 7891 0
-7892 -7890 0
c Var 'aux1906' direct represents '2' with '-7891'
7890 7892 -7891 0
c Encoding variable: aux1907 with domain: int(0..2) (representing constraint ((x_00003_00006=5) + (x_00004_00007=5)))
c Both direct and order encoding.
c Var 'aux1907' order represents '0' with '7893'
c Var 'aux1907' direct represents '0' with '7893'
c Var 'aux1907' order represents '1' with '7894'
-7893 7894 0
c Var 'aux1907' direct represents '1' with '7895'
7893 -7894 7895 0
-7895 7894 0
-7895 -7893 0
c Var 'aux1907' direct represents '2' with '-7894'
7893 7895 -7894 0
c Encoding variable: aux1908 with domain: int(0..2) (representing constraint ((x_00003_00006=6) + (x_00004_00007=6)))
c Both direct and order encoding.
c Var 'aux1908' order represents '0' with '7896'
c Var 'aux1908' direct represents '0' with '7896'
c Var 'aux1908' order represents '1' with '7897'
-7896 7897 0
c Var 'aux1908' direct represents '1' with '7898'
7896 -7897 7898 0
-7898 7897 0
-7898 -7896 0
c Var 'aux1908' direct represents '2' with '-7897'
7896 7898 -7897 0
c Encoding variable: aux1909 with domain: int(0..2) (representing constraint ((x_00003_00006=7) + (x_00004_00007=7)))
c Both direct and order encoding.
c Var 'aux1909' order represents '0' with '7899'
c Var 'aux1909' direct represents '0' with '7899'
c Var 'aux1909' order represents '1' with '7900'
-7899 7900 0
c Var 'aux1909' direct represents '1' with '7901'
7899 -7900 7901 0
-7901 7900 0
-7901 -7899 0
c Var 'aux1909' direct represents '2' with '-7900'
7899 7901 -7900 0
c Encoding variable: aux1910 with domain: int(0..2) (representing constraint ((x_00003_00006=8) + (x_00004_00007=8)))
c Both direct and order encoding.
c Var 'aux1910' order represents '0' with '7902'
c Var 'aux1910' direct represents '0' with '7902'
c Var 'aux1910' order represents '1' with '7903'
-7902 7903 0
c Var 'aux1910' direct represents '1' with '7904'
7902 -7903 7904 0
-7904 7903 0
-7904 -7902 0
c Var 'aux1910' direct represents '2' with '-7903'
7902 7904 -7903 0
c Encoding variable: aux1911 with domain: int(0..2) (representing constraint ((x_00003_00006=9) + (x_00004_00007=9)))
c Both direct and order encoding.
c Var 'aux1911' order represents '0' with '7905'
c Var 'aux1911' direct represents '0' with '7905'
c Var 'aux1911' order represents '1' with '7906'
-7905 7906 0
c Var 'aux1911' direct represents '1' with '7907'
7905 -7906 7907 0
-7907 7906 0
-7907 -7905 0
c Var 'aux1911' direct represents '2' with '-7906'
7905 7907 -7906 0
c Encoding variable: aux1912 with domain: int(0..2) (representing constraint ((x_00006_00003=1) + (x_00005_00003=1)))
c Both direct and order encoding.
c Var 'aux1912' order represents '0' with '7908'
c Var 'aux1912' direct represents '0' with '7908'
c Var 'aux1912' order represents '1' with '7909'
-7908 7909 0
c Var 'aux1912' direct represents '1' with '7910'
7908 -7909 7910 0
-7910 7909 0
-7910 -7908 0
c Var 'aux1912' direct represents '2' with '-7909'
7908 7910 -7909 0
c Encoding variable: aux1913 with domain: int(0..2) (representing constraint ((x_00007_00006=1) + (x_00004_00003=1)))
c Both direct and order encoding.
c Var 'aux1913' order represents '0' with '7911'
c Var 'aux1913' direct represents '0' with '7911'
c Var 'aux1913' order represents '1' with '7912'
-7911 7912 0
c Var 'aux1913' direct represents '1' with '7913'
7911 -7912 7913 0
-7913 7912 0
-7913 -7911 0
c Var 'aux1913' direct represents '2' with '-7912'
7911 7913 -7912 0
c Encoding variable: aux1914 with domain: int(0..2) (representing constraint ((x_00007_00005=1) + (x_00007_00004=1)))
c Both direct and order encoding.
c Var 'aux1914' order represents '0' with '7914'
c Var 'aux1914' direct represents '0' with '7914'
c Var 'aux1914' order represents '1' with '7915'
-7914 7915 0
c Var 'aux1914' direct represents '1' with '7916'
7914 -7915 7916 0
-7916 7915 0
-7916 -7914 0
c Var 'aux1914' direct represents '2' with '-7915'
7914 7916 -7915 0
c Encoding variable: aux1915 with domain: int(0..3) (representing constraint ((x_00007_00003=1) + aux1914))
c Both direct and order encoding.
c Var 'aux1915' order represents '0' with '7917'
c Var 'aux1915' direct represents '0' with '7917'
c Var 'aux1915' order represents '1' with '7918'
-7917 7918 0
c Var 'aux1915' direct represents '1' with '7919'
7917 -7918 7919 0
-7919 7918 0
-7919 -7917 0
c Var 'aux1915' order represents '2' with '7920'
-7918 7920 0
c Var 'aux1915' direct represents '2' with '7921'
7918 -7920 7921 0
-7921 7920 0
-7921 -7918 0
c Var 'aux1915' direct represents '3' with '-7920'
7917 7919 7921 -7920 0
c Encoding variable: aux1916 with domain: int(0..2) (representing constraint ((x_00006_00003=2) + (x_00005_00003=2)))
c Both direct and order encoding.
c Var 'aux1916' order represents '0' with '7922'
c Var 'aux1916' direct represents '0' with '7922'
c Var 'aux1916' order represents '1' with '7923'
-7922 7923 0
c Var 'aux1916' direct represents '1' with '7924'
7922 -7923 7924 0
-7924 7923 0
-7924 -7922 0
c Var 'aux1916' direct represents '2' with '-7923'
7922 7924 -7923 0
c Encoding variable: aux1917 with domain: int(0..2) (representing constraint ((x_00007_00006=2) + (x_00004_00003=2)))
c Both direct and order encoding.
c Var 'aux1917' order represents '0' with '7925'
c Var 'aux1917' direct represents '0' with '7925'
c Var 'aux1917' order represents '1' with '7926'
-7925 7926 0
c Var 'aux1917' direct represents '1' with '7927'
7925 -7926 7927 0
-7927 7926 0
-7927 -7925 0
c Var 'aux1917' direct represents '2' with '-7926'
7925 7927 -7926 0
c Encoding variable: aux1918 with domain: int(0..2) (representing constraint ((x_00007_00005=2) + (x_00007_00004=2)))
c Both direct and order encoding.
c Var 'aux1918' order represents '0' with '7928'
c Var 'aux1918' direct represents '0' with '7928'
c Var 'aux1918' order represents '1' with '7929'
-7928 7929 0
c Var 'aux1918' direct represents '1' with '7930'
7928 -7929 7930 0
-7930 7929 0
-7930 -7928 0
c Var 'aux1918' direct represents '2' with '-7929'
7928 7930 -7929 0
c Encoding variable: aux1919 with domain: int(0..3) (representing constraint ((x_00007_00003=2) + aux1918))
c Both direct and order encoding.
c Var 'aux1919' order represents '0' with '7931'
c Var 'aux1919' direct represents '0' with '7931'
c Var 'aux1919' order represents '1' with '7932'
-7931 7932 0
c Var 'aux1919' direct represents '1' with '7933'
7931 -7932 7933 0
-7933 7932 0
-7933 -7931 0
c Var 'aux1919' order represents '2' with '7934'
-7932 7934 0
c Var 'aux1919' direct represents '2' with '7935'
7932 -7934 7935 0
-7935 7934 0
-7935 -7932 0
c Var 'aux1919' direct represents '3' with '-7934'
7931 7933 7935 -7934 0
c Encoding variable: aux1920 with domain: int(0..2) (representing constraint ((x_00006_00003=3) + (x_00005_00003=3)))
c Both direct and order encoding.
c Var 'aux1920' order represents '0' with '7936'
c Var 'aux1920' direct represents '0' with '7936'
c Var 'aux1920' order represents '1' with '7937'
-7936 7937 0
c Var 'aux1920' direct represents '1' with '7938'
7936 -7937 7938 0
-7938 7937 0
-7938 -7936 0
c Var 'aux1920' direct represents '2' with '-7937'
7936 7938 -7937 0
c Encoding variable: aux1921 with domain: int(0..2) (representing constraint ((x_00007_00006=3) + (x_00004_00003=3)))
c Both direct and order encoding.
c Var 'aux1921' order represents '0' with '7939'
c Var 'aux1921' direct represents '0' with '7939'
c Var 'aux1921' order represents '1' with '7940'
-7939 7940 0
c Var 'aux1921' direct represents '1' with '7941'
7939 -7940 7941 0
-7941 7940 0
-7941 -7939 0
c Var 'aux1921' direct represents '2' with '-7940'
7939 7941 -7940 0
c Encoding variable: aux1922 with domain: int(0..2) (representing constraint ((x_00007_00005=3) + (x_00007_00004=3)))
c Both direct and order encoding.
c Var 'aux1922' order represents '0' with '7942'
c Var 'aux1922' direct represents '0' with '7942'
c Var 'aux1922' order represents '1' with '7943'
-7942 7943 0
c Var 'aux1922' direct represents '1' with '7944'
7942 -7943 7944 0
-7944 7943 0
-7944 -7942 0
c Var 'aux1922' direct represents '2' with '-7943'
7942 7944 -7943 0
c Encoding variable: aux1923 with domain: int(0..3) (representing constraint ((x_00007_00003=3) + aux1922))
c Both direct and order encoding.
c Var 'aux1923' order represents '0' with '7945'
c Var 'aux1923' direct represents '0' with '7945'
c Var 'aux1923' order represents '1' with '7946'
-7945 7946 0
c Var 'aux1923' direct represents '1' with '7947'
7945 -7946 7947 0
-7947 7946 0
-7947 -7945 0
c Var 'aux1923' order represents '2' with '7948'
-7946 7948 0
c Var 'aux1923' direct represents '2' with '7949'
7946 -7948 7949 0
-7949 7948 0
-7949 -7946 0
c Var 'aux1923' direct represents '3' with '-7948'
7945 7947 7949 -7948 0
c Encoding variable: aux1924 with domain: int(0..2) (representing constraint ((x_00006_00003=4) + (x_00005_00003=4)))
c Both direct and order encoding.
c Var 'aux1924' order represents '0' with '7950'
c Var 'aux1924' direct represents '0' with '7950'
c Var 'aux1924' order represents '1' with '7951'
-7950 7951 0
c Var 'aux1924' direct represents '1' with '7952'
7950 -7951 7952 0
-7952 7951 0
-7952 -7950 0
c Var 'aux1924' direct represents '2' with '-7951'
7950 7952 -7951 0
c Encoding variable: aux1925 with domain: int(0..2) (representing constraint ((x_00007_00006=4) + (x_00004_00003=4)))
c Both direct and order encoding.
c Var 'aux1925' order represents '0' with '7953'
c Var 'aux1925' direct represents '0' with '7953'
c Var 'aux1925' order represents '1' with '7954'
-7953 7954 0
c Var 'aux1925' direct represents '1' with '7955'
7953 -7954 7955 0
-7955 7954 0
-7955 -7953 0
c Var 'aux1925' direct represents '2' with '-7954'
7953 7955 -7954 0
c Encoding variable: aux1926 with domain: int(0..2) (representing constraint ((x_00007_00005=4) + (x_00007_00004=4)))
c Both direct and order encoding.
c Var 'aux1926' order represents '0' with '7956'
c Var 'aux1926' direct represents '0' with '7956'
c Var 'aux1926' order represents '1' with '7957'
-7956 7957 0
c Var 'aux1926' direct represents '1' with '7958'
7956 -7957 7958 0
-7958 7957 0
-7958 -7956 0
c Var 'aux1926' direct represents '2' with '-7957'
7956 7958 -7957 0
c Encoding variable: aux1927 with domain: int(0..3) (representing constraint ((x_00007_00003=4) + aux1926))
c Both direct and order encoding.
c Var 'aux1927' order represents '0' with '7959'
c Var 'aux1927' direct represents '0' with '7959'
c Var 'aux1927' order represents '1' with '7960'
-7959 7960 0
c Var 'aux1927' direct represents '1' with '7961'
7959 -7960 7961 0
-7961 7960 0
-7961 -7959 0
c Var 'aux1927' order represents '2' with '7962'
-7960 7962 0
c Var 'aux1927' direct represents '2' with '7963'
7960 -7962 7963 0
-7963 7962 0
-7963 -7960 0
c Var 'aux1927' direct represents '3' with '-7962'
7959 7961 7963 -7962 0
c Encoding variable: aux1928 with domain: int(0..2) (representing constraint ((x_00006_00003=5) + (x_00005_00003=5)))
c Both direct and order encoding.
c Var 'aux1928' order represents '0' with '7964'
c Var 'aux1928' direct represents '0' with '7964'
c Var 'aux1928' order represents '1' with '7965'
-7964 7965 0
c Var 'aux1928' direct represents '1' with '7966'
7964 -7965 7966 0
-7966 7965 0
-7966 -7964 0
c Var 'aux1928' direct represents '2' with '-7965'
7964 7966 -7965 0
c Encoding variable: aux1929 with domain: int(0..2) (representing constraint ((x_00007_00006=5) + (x_00004_00003=5)))
c Both direct and order encoding.
c Var 'aux1929' order represents '0' with '7967'
c Var 'aux1929' direct represents '0' with '7967'
c Var 'aux1929' order represents '1' with '7968'
-7967 7968 0
c Var 'aux1929' direct represents '1' with '7969'
7967 -7968 7969 0
-7969 7968 0
-7969 -7967 0
c Var 'aux1929' direct represents '2' with '-7968'
7967 7969 -7968 0
c Encoding variable: aux1930 with domain: int(0..2) (representing constraint ((x_00007_00005=5) + (x_00007_00004=5)))
c Both direct and order encoding.
c Var 'aux1930' order represents '0' with '7970'
c Var 'aux1930' direct represents '0' with '7970'
c Var 'aux1930' order represents '1' with '7971'
-7970 7971 0
c Var 'aux1930' direct represents '1' with '7972'
7970 -7971 7972 0
-7972 7971 0
-7972 -7970 0
c Var 'aux1930' direct represents '2' with '-7971'
7970 7972 -7971 0
c Encoding variable: aux1931 with domain: int(0..3) (representing constraint ((x_00007_00003=5) + aux1930))
c Both direct and order encoding.
c Var 'aux1931' order represents '0' with '7973'
c Var 'aux1931' direct represents '0' with '7973'
c Var 'aux1931' order represents '1' with '7974'
-7973 7974 0
c Var 'aux1931' direct represents '1' with '7975'
7973 -7974 7975 0
-7975 7974 0
-7975 -7973 0
c Var 'aux1931' order represents '2' with '7976'
-7974 7976 0
c Var 'aux1931' direct represents '2' with '7977'
7974 -7976 7977 0
-7977 7976 0
-7977 -7974 0
c Var 'aux1931' direct represents '3' with '-7976'
7973 7975 7977 -7976 0
c Encoding variable: aux1932 with domain: int(0..2) (representing constraint ((x_00006_00003=6) + (x_00005_00003=6)))
c Both direct and order encoding.
c Var 'aux1932' order represents '0' with '7978'
c Var 'aux1932' direct represents '0' with '7978'
c Var 'aux1932' order represents '1' with '7979'
-7978 7979 0
c Var 'aux1932' direct represents '1' with '7980'
7978 -7979 7980 0
-7980 7979 0
-7980 -7978 0
c Var 'aux1932' direct represents '2' with '-7979'
7978 7980 -7979 0
c Encoding variable: aux1933 with domain: int(0..2) (representing constraint ((x_00007_00006=6) + (x_00004_00003=6)))
c Both direct and order encoding.
c Var 'aux1933' order represents '0' with '7981'
c Var 'aux1933' direct represents '0' with '7981'
c Var 'aux1933' order represents '1' with '7982'
-7981 7982 0
c Var 'aux1933' direct represents '1' with '7983'
7981 -7982 7983 0
-7983 7982 0
-7983 -7981 0
c Var 'aux1933' direct represents '2' with '-7982'
7981 7983 -7982 0
c Encoding variable: aux1934 with domain: int(0..2) (representing constraint ((x_00007_00005=6) + (x_00007_00004=6)))
c Both direct and order encoding.
c Var 'aux1934' order represents '0' with '7984'
c Var 'aux1934' direct represents '0' with '7984'
c Var 'aux1934' order represents '1' with '7985'
-7984 7985 0
c Var 'aux1934' direct represents '1' with '7986'
7984 -7985 7986 0
-7986 7985 0
-7986 -7984 0
c Var 'aux1934' direct represents '2' with '-7985'
7984 7986 -7985 0
c Encoding variable: aux1935 with domain: int(0..3) (representing constraint ((x_00007_00003=6) + aux1934))
c Both direct and order encoding.
c Var 'aux1935' order represents '0' with '7987'
c Var 'aux1935' direct represents '0' with '7987'
c Var 'aux1935' order represents '1' with '7988'
-7987 7988 0
c Var 'aux1935' direct represents '1' with '7989'
7987 -7988 7989 0
-7989 7988 0
-7989 -7987 0
c Var 'aux1935' order represents '2' with '7990'
-7988 7990 0
c Var 'aux1935' direct represents '2' with '7991'
7988 -7990 7991 0
-7991 7990 0
-7991 -7988 0
c Var 'aux1935' direct represents '3' with '-7990'
7987 7989 7991 -7990 0
c Encoding variable: aux1936 with domain: int(0..2) (representing constraint ((x_00006_00003=7) + (x_00005_00003=7)))
c Both direct and order encoding.
c Var 'aux1936' order represents '0' with '7992'
c Var 'aux1936' direct represents '0' with '7992'
c Var 'aux1936' order represents '1' with '7993'
-7992 7993 0
c Var 'aux1936' direct represents '1' with '7994'
7992 -7993 7994 0
-7994 7993 0
-7994 -7992 0
c Var 'aux1936' direct represents '2' with '-7993'
7992 7994 -7993 0
c Encoding variable: aux1937 with domain: int(0..2) (representing constraint ((x_00007_00006=7) + (x_00004_00003=7)))
c Both direct and order encoding.
c Var 'aux1937' order represents '0' with '7995'
c Var 'aux1937' direct represents '0' with '7995'
c Var 'aux1937' order represents '1' with '7996'
-7995 7996 0
c Var 'aux1937' direct represents '1' with '7997'
7995 -7996 7997 0
-7997 7996 0
-7997 -7995 0
c Var 'aux1937' direct represents '2' with '-7996'
7995 7997 -7996 0
c Encoding variable: aux1938 with domain: int(0..2) (representing constraint ((x_00007_00005=7) + (x_00007_00004=7)))
c Both direct and order encoding.
c Var 'aux1938' order represents '0' with '7998'
c Var 'aux1938' direct represents '0' with '7998'
c Var 'aux1938' order represents '1' with '7999'
-7998 7999 0
c Var 'aux1938' direct represents '1' with '8000'
7998 -7999 8000 0
-8000 7999 0
-8000 -7998 0
c Var 'aux1938' direct represents '2' with '-7999'
7998 8000 -7999 0
c Encoding variable: aux1939 with domain: int(0..3) (representing constraint ((x_00007_00003=7) + aux1938))
c Both direct and order encoding.
c Var 'aux1939' order represents '0' with '8001'
c Var 'aux1939' direct represents '0' with '8001'
c Var 'aux1939' order represents '1' with '8002'
-8001 8002 0
c Var 'aux1939' direct represents '1' with '8003'
8001 -8002 8003 0
-8003 8002 0
-8003 -8001 0
c Var 'aux1939' order represents '2' with '8004'
-8002 8004 0
c Var 'aux1939' direct represents '2' with '8005'
8002 -8004 8005 0
-8005 8004 0
-8005 -8002 0
c Var 'aux1939' direct represents '3' with '-8004'
8001 8003 8005 -8004 0
c Encoding variable: aux1940 with domain: int(0..2) (representing constraint ((x_00006_00003=8) + (x_00005_00003=8)))
c Both direct and order encoding.
c Var 'aux1940' order represents '0' with '8006'
c Var 'aux1940' direct represents '0' with '8006'
c Var 'aux1940' order represents '1' with '8007'
-8006 8007 0
c Var 'aux1940' direct represents '1' with '8008'
8006 -8007 8008 0
-8008 8007 0
-8008 -8006 0
c Var 'aux1940' direct represents '2' with '-8007'
8006 8008 -8007 0
c Encoding variable: aux1941 with domain: int(0..2) (representing constraint ((x_00007_00006=8) + (x_00004_00003=8)))
c Both direct and order encoding.
c Var 'aux1941' order represents '0' with '8009'
c Var 'aux1941' direct represents '0' with '8009'
c Var 'aux1941' order represents '1' with '8010'
-8009 8010 0
c Var 'aux1941' direct represents '1' with '8011'
8009 -8010 8011 0
-8011 8010 0
-8011 -8009 0
c Var 'aux1941' direct represents '2' with '-8010'
8009 8011 -8010 0
c Encoding variable: aux1942 with domain: int(0..2) (representing constraint ((x_00007_00005=8) + (x_00007_00004=8)))
c Both direct and order encoding.
c Var 'aux1942' order represents '0' with '8012'
c Var 'aux1942' direct represents '0' with '8012'
c Var 'aux1942' order represents '1' with '8013'
-8012 8013 0
c Var 'aux1942' direct represents '1' with '8014'
8012 -8013 8014 0
-8014 8013 0
-8014 -8012 0
c Var 'aux1942' direct represents '2' with '-8013'
8012 8014 -8013 0
c Encoding variable: aux1943 with domain: int(0..3) (representing constraint ((x_00007_00003=8) + aux1942))
c Both direct and order encoding.
c Var 'aux1943' order represents '0' with '8015'
c Var 'aux1943' direct represents '0' with '8015'
c Var 'aux1943' order represents '1' with '8016'
-8015 8016 0
c Var 'aux1943' direct represents '1' with '8017'
8015 -8016 8017 0
-8017 8016 0
-8017 -8015 0
c Var 'aux1943' order represents '2' with '8018'
-8016 8018 0
c Var 'aux1943' direct represents '2' with '8019'
8016 -8018 8019 0
-8019 8018 0
-8019 -8016 0
c Var 'aux1943' direct represents '3' with '-8018'
8015 8017 8019 -8018 0
c Encoding variable: aux1944 with domain: int(0..2) (representing constraint ((x_00006_00003=9) + (x_00005_00003=9)))
c Both direct and order encoding.
c Var 'aux1944' order represents '0' with '8020'
c Var 'aux1944' direct represents '0' with '8020'
c Var 'aux1944' order represents '1' with '8021'
-8020 8021 0
c Var 'aux1944' direct represents '1' with '8022'
8020 -8021 8022 0
-8022 8021 0
-8022 -8020 0
c Var 'aux1944' direct represents '2' with '-8021'
8020 8022 -8021 0
c Encoding variable: aux1945 with domain: int(0..2) (representing constraint ((x_00007_00006=9) + (x_00004_00003=9)))
c Both direct and order encoding.
c Var 'aux1945' order represents '0' with '8023'
c Var 'aux1945' direct represents '0' with '8023'
c Var 'aux1945' order represents '1' with '8024'
-8023 8024 0
c Var 'aux1945' direct represents '1' with '8025'
8023 -8024 8025 0
-8025 8024 0
-8025 -8023 0
c Var 'aux1945' direct represents '2' with '-8024'
8023 8025 -8024 0
c Encoding variable: aux1946 with domain: int(0..2) (representing constraint ((x_00007_00005=9) + (x_00007_00004=9)))
c Both direct and order encoding.
c Var 'aux1946' order represents '0' with '8026'
c Var 'aux1946' direct represents '0' with '8026'
c Var 'aux1946' order represents '1' with '8027'
-8026 8027 0
c Var 'aux1946' direct represents '1' with '8028'
8026 -8027 8028 0
-8028 8027 0
-8028 -8026 0
c Var 'aux1946' direct represents '2' with '-8027'
8026 8028 -8027 0
c Encoding variable: aux1947 with domain: int(0..3) (representing constraint ((x_00007_00003=9) + aux1946))
c Both direct and order encoding.
c Var 'aux1947' order represents '0' with '8029'
c Var 'aux1947' direct represents '0' with '8029'
c Var 'aux1947' order represents '1' with '8030'
-8029 8030 0
c Var 'aux1947' direct represents '1' with '8031'
8029 -8030 8031 0
-8031 8030 0
-8031 -8029 0
c Var 'aux1947' order represents '2' with '8032'
-8030 8032 0
c Var 'aux1947' direct represents '2' with '8033'
8030 -8032 8033 0
-8033 8032 0
-8033 -8030 0
c Var 'aux1947' direct represents '3' with '-8032'
8029 8031 8033 -8032 0
c Encoding variable: aux1948 with domain: int(0..2) (representing constraint ((x_00006_00004=1) + (x_00005_00005=1)))
c Both direct and order encoding.
c Var 'aux1948' order represents '0' with '8034'
c Var 'aux1948' direct represents '0' with '8034'
c Var 'aux1948' order represents '1' with '8035'
-8034 8035 0
c Var 'aux1948' direct represents '1' with '8036'
8034 -8035 8036 0
-8036 8035 0
-8036 -8034 0
c Var 'aux1948' direct represents '2' with '-8035'
8034 8036 -8035 0
c Encoding variable: aux1949 with domain: int(0..2) (representing constraint ((x_00006_00004=2) + (x_00005_00005=2)))
c Both direct and order encoding.
c Var 'aux1949' order represents '0' with '8037'
c Var 'aux1949' direct represents '0' with '8037'
c Var 'aux1949' order represents '1' with '8038'
-8037 8038 0
c Var 'aux1949' direct represents '1' with '8039'
8037 -8038 8039 0
-8039 8038 0
-8039 -8037 0
c Var 'aux1949' direct represents '2' with '-8038'
8037 8039 -8038 0
c Encoding variable: aux1950 with domain: int(0..2) (representing constraint ((x_00006_00004=3) + (x_00005_00005=3)))
c Both direct and order encoding.
c Var 'aux1950' order represents '0' with '8040'
c Var 'aux1950' direct represents '0' with '8040'
c Var 'aux1950' order represents '1' with '8041'
-8040 8041 0
c Var 'aux1950' direct represents '1' with '8042'
8040 -8041 8042 0
-8042 8041 0
-8042 -8040 0
c Var 'aux1950' direct represents '2' with '-8041'
8040 8042 -8041 0
c Encoding variable: aux1951 with domain: int(0..2) (representing constraint ((x_00006_00004=4) + (x_00005_00005=4)))
c Both direct and order encoding.
c Var 'aux1951' order represents '0' with '8043'
c Var 'aux1951' direct represents '0' with '8043'
c Var 'aux1951' order represents '1' with '8044'
-8043 8044 0
c Var 'aux1951' direct represents '1' with '8045'
8043 -8044 8045 0
-8045 8044 0
-8045 -8043 0
c Var 'aux1951' direct represents '2' with '-8044'
8043 8045 -8044 0
c Encoding variable: aux1952 with domain: int(0..2) (representing constraint ((x_00006_00004=5) + (x_00005_00005=5)))
c Both direct and order encoding.
c Var 'aux1952' order represents '0' with '8046'
c Var 'aux1952' direct represents '0' with '8046'
c Var 'aux1952' order represents '1' with '8047'
-8046 8047 0
c Var 'aux1952' direct represents '1' with '8048'
8046 -8047 8048 0
-8048 8047 0
-8048 -8046 0
c Var 'aux1952' direct represents '2' with '-8047'
8046 8048 -8047 0
c Encoding variable: aux1953 with domain: int(0..2) (representing constraint ((x_00006_00004=6) + (x_00005_00005=6)))
c Both direct and order encoding.
c Var 'aux1953' order represents '0' with '8049'
c Var 'aux1953' direct represents '0' with '8049'
c Var 'aux1953' order represents '1' with '8050'
-8049 8050 0
c Var 'aux1953' direct represents '1' with '8051'
8049 -8050 8051 0
-8051 8050 0
-8051 -8049 0
c Var 'aux1953' direct represents '2' with '-8050'
8049 8051 -8050 0
c Encoding variable: aux1954 with domain: int(0..2) (representing constraint ((x_00006_00004=7) + (x_00005_00005=7)))
c Both direct and order encoding.
c Var 'aux1954' order represents '0' with '8052'
c Var 'aux1954' direct represents '0' with '8052'
c Var 'aux1954' order represents '1' with '8053'
-8052 8053 0
c Var 'aux1954' direct represents '1' with '8054'
8052 -8053 8054 0
-8054 8053 0
-8054 -8052 0
c Var 'aux1954' direct represents '2' with '-8053'
8052 8054 -8053 0
c Encoding variable: aux1955 with domain: int(0..2) (representing constraint ((x_00006_00004=8) + (x_00005_00005=8)))
c Both direct and order encoding.
c Var 'aux1955' order represents '0' with '8055'
c Var 'aux1955' direct represents '0' with '8055'
c Var 'aux1955' order represents '1' with '8056'
-8055 8056 0
c Var 'aux1955' direct represents '1' with '8057'
8055 -8056 8057 0
-8057 8056 0
-8057 -8055 0
c Var 'aux1955' direct represents '2' with '-8056'
8055 8057 -8056 0
c Encoding variable: aux1956 with domain: int(0..2) (representing constraint ((x_00006_00004=9) + (x_00005_00005=9)))
c Both direct and order encoding.
c Var 'aux1956' order represents '0' with '8058'
c Var 'aux1956' direct represents '0' with '8058'
c Var 'aux1956' order represents '1' with '8059'
-8058 8059 0
c Var 'aux1956' direct represents '1' with '8060'
8058 -8059 8060 0
-8060 8059 0
-8060 -8058 0
c Var 'aux1956' direct represents '2' with '-8059'
8058 8060 -8059 0
c Encoding variable: aux1957 with domain: int(0..2) (representing constraint ((x_00008_00001=1) + (x_00009_00002=1)))
c Both direct and order encoding.
c Var 'aux1957' order represents '0' with '8061'
c Var 'aux1957' direct represents '0' with '8061'
c Var 'aux1957' order represents '1' with '8062'
-8061 8062 0
c Var 'aux1957' direct represents '1' with '8063'
8061 -8062 8063 0
-8063 8062 0
-8063 -8061 0
c Var 'aux1957' direct represents '2' with '-8062'
8061 8063 -8062 0
c Encoding variable: aux1958 with domain: int(0..2) (representing constraint ((x_00008_00001=2) + (x_00009_00002=2)))
c Both direct and order encoding.
c Var 'aux1958' order represents '0' with '8064'
c Var 'aux1958' direct represents '0' with '8064'
c Var 'aux1958' order represents '1' with '8065'
-8064 8065 0
c Var 'aux1958' direct represents '1' with '8066'
8064 -8065 8066 0
-8066 8065 0
-8066 -8064 0
c Var 'aux1958' direct represents '2' with '-8065'
8064 8066 -8065 0
c Encoding variable: aux1959 with domain: int(0..2) (representing constraint ((x_00008_00001=3) + (x_00009_00002=3)))
c Both direct and order encoding.
c Var 'aux1959' order represents '0' with '8067'
c Var 'aux1959' direct represents '0' with '8067'
c Var 'aux1959' order represents '1' with '8068'
-8067 8068 0
c Var 'aux1959' direct represents '1' with '8069'
8067 -8068 8069 0
-8069 8068 0
-8069 -8067 0
c Var 'aux1959' direct represents '2' with '-8068'
8067 8069 -8068 0
c Encoding variable: aux1960 with domain: int(0..2) (representing constraint ((x_00008_00001=4) + (x_00009_00002=4)))
c Both direct and order encoding.
c Var 'aux1960' order represents '0' with '8070'
c Var 'aux1960' direct represents '0' with '8070'
c Var 'aux1960' order represents '1' with '8071'
-8070 8071 0
c Var 'aux1960' direct represents '1' with '8072'
8070 -8071 8072 0
-8072 8071 0
-8072 -8070 0
c Var 'aux1960' direct represents '2' with '-8071'
8070 8072 -8071 0
c Encoding variable: aux1961 with domain: int(0..2) (representing constraint ((x_00008_00001=5) + (x_00009_00002=5)))
c Both direct and order encoding.
c Var 'aux1961' order represents '0' with '8073'
c Var 'aux1961' direct represents '0' with '8073'
c Var 'aux1961' order represents '1' with '8074'
-8073 8074 0
c Var 'aux1961' direct represents '1' with '8075'
8073 -8074 8075 0
-8075 8074 0
-8075 -8073 0
c Var 'aux1961' direct represents '2' with '-8074'
8073 8075 -8074 0
c Encoding variable: aux1962 with domain: int(0..2) (representing constraint ((x_00008_00001=6) + (x_00009_00002=6)))
c Both direct and order encoding.
c Var 'aux1962' order represents '0' with '8076'
c Var 'aux1962' direct represents '0' with '8076'
c Var 'aux1962' order represents '1' with '8077'
-8076 8077 0
c Var 'aux1962' direct represents '1' with '8078'
8076 -8077 8078 0
-8078 8077 0
-8078 -8076 0
c Var 'aux1962' direct represents '2' with '-8077'
8076 8078 -8077 0
c Encoding variable: aux1963 with domain: int(0..2) (representing constraint ((x_00008_00001=7) + (x_00009_00002=7)))
c Both direct and order encoding.
c Var 'aux1963' order represents '0' with '8079'
c Var 'aux1963' direct represents '0' with '8079'
c Var 'aux1963' order represents '1' with '8080'
-8079 8080 0
c Var 'aux1963' direct represents '1' with '8081'
8079 -8080 8081 0
-8081 8080 0
-8081 -8079 0
c Var 'aux1963' direct represents '2' with '-8080'
8079 8081 -8080 0
c Encoding variable: aux1964 with domain: int(0..2) (representing constraint ((x_00008_00001=8) + (x_00009_00002=8)))
c Both direct and order encoding.
c Var 'aux1964' order represents '0' with '8082'
c Var 'aux1964' direct represents '0' with '8082'
c Var 'aux1964' order represents '1' with '8083'
-8082 8083 0
c Var 'aux1964' direct represents '1' with '8084'
8082 -8083 8084 0
-8084 8083 0
-8084 -8082 0
c Var 'aux1964' direct represents '2' with '-8083'
8082 8084 -8083 0
c Encoding variable: aux1965 with domain: int(0..2) (representing constraint ((x_00008_00001=9) + (x_00009_00002=9)))
c Both direct and order encoding.
c Var 'aux1965' order represents '0' with '8085'
c Var 'aux1965' direct represents '0' with '8085'
c Var 'aux1965' order represents '1' with '8086'
-8085 8086 0
c Var 'aux1965' direct represents '1' with '8087'
8085 -8086 8087 0
-8087 8086 0
-8087 -8085 0
c Var 'aux1965' direct represents '2' with '-8086'
8085 8087 -8086 0
c Encoding variable: aux1966 with domain: int(0..2) (representing constraint ((x_00009_00004=1) + (x_00009_00007=1)))
c Both direct and order encoding.
c Var 'aux1966' order represents '0' with '8088'
c Var 'aux1966' direct represents '0' with '8088'
c Var 'aux1966' order represents '1' with '8089'
-8088 8089 0
c Var 'aux1966' direct represents '1' with '8090'
8088 -8089 8090 0
-8090 8089 0
-8090 -8088 0
c Var 'aux1966' direct represents '2' with '-8089'
8088 8090 -8089 0
c Encoding variable: aux1967 with domain: int(0..2) (representing constraint ((x_00009_00004=2) + (x_00009_00007=2)))
c Both direct and order encoding.
c Var 'aux1967' order represents '0' with '8091'
c Var 'aux1967' direct represents '0' with '8091'
c Var 'aux1967' order represents '1' with '8092'
-8091 8092 0
c Var 'aux1967' direct represents '1' with '8093'
8091 -8092 8093 0
-8093 8092 0
-8093 -8091 0
c Var 'aux1967' direct represents '2' with '-8092'
8091 8093 -8092 0
c Encoding variable: aux1968 with domain: int(0..2) (representing constraint ((x_00009_00004=3) + (x_00009_00007=3)))
c Both direct and order encoding.
c Var 'aux1968' order represents '0' with '8094'
c Var 'aux1968' direct represents '0' with '8094'
c Var 'aux1968' order represents '1' with '8095'
-8094 8095 0
c Var 'aux1968' direct represents '1' with '8096'
8094 -8095 8096 0
-8096 8095 0
-8096 -8094 0
c Var 'aux1968' direct represents '2' with '-8095'
8094 8096 -8095 0
c Encoding variable: aux1969 with domain: int(0..2) (representing constraint ((x_00009_00004=4) + (x_00009_00007=4)))
c Both direct and order encoding.
c Var 'aux1969' order represents '0' with '8097'
c Var 'aux1969' direct represents '0' with '8097'
c Var 'aux1969' order represents '1' with '8098'
-8097 8098 0
c Var 'aux1969' direct represents '1' with '8099'
8097 -8098 8099 0
-8099 8098 0
-8099 -8097 0
c Var 'aux1969' direct represents '2' with '-8098'
8097 8099 -8098 0
c Encoding variable: aux1970 with domain: int(0..2) (representing constraint ((x_00009_00004=5) + (x_00009_00007=5)))
c Both direct and order encoding.
c Var 'aux1970' order represents '0' with '8100'
c Var 'aux1970' direct represents '0' with '8100'
c Var 'aux1970' order represents '1' with '8101'
-8100 8101 0
c Var 'aux1970' direct represents '1' with '8102'
8100 -8101 8102 0
-8102 8101 0
-8102 -8100 0
c Var 'aux1970' direct represents '2' with '-8101'
8100 8102 -8101 0
c Encoding variable: aux1971 with domain: int(0..2) (representing constraint ((x_00009_00004=6) + (x_00009_00007=6)))
c Both direct and order encoding.
c Var 'aux1971' order represents '0' with '8103'
c Var 'aux1971' direct represents '0' with '8103'
c Var 'aux1971' order represents '1' with '8104'
-8103 8104 0
c Var 'aux1971' direct represents '1' with '8105'
8103 -8104 8105 0
-8105 8104 0
-8105 -8103 0
c Var 'aux1971' direct represents '2' with '-8104'
8103 8105 -8104 0
c Encoding variable: aux1972 with domain: int(0..2) (representing constraint ((x_00009_00004=7) + (x_00009_00007=7)))
c Both direct and order encoding.
c Var 'aux1972' order represents '0' with '8106'
c Var 'aux1972' direct represents '0' with '8106'
c Var 'aux1972' order represents '1' with '8107'
-8106 8107 0
c Var 'aux1972' direct represents '1' with '8108'
8106 -8107 8108 0
-8108 8107 0
-8108 -8106 0
c Var 'aux1972' direct represents '2' with '-8107'
8106 8108 -8107 0
c Encoding variable: aux1973 with domain: int(0..2) (representing constraint ((x_00009_00004=8) + (x_00009_00007=8)))
c Both direct and order encoding.
c Var 'aux1973' order represents '0' with '8109'
c Var 'aux1973' direct represents '0' with '8109'
c Var 'aux1973' order represents '1' with '8110'
-8109 8110 0
c Var 'aux1973' direct represents '1' with '8111'
8109 -8110 8111 0
-8111 8110 0
-8111 -8109 0
c Var 'aux1973' direct represents '2' with '-8110'
8109 8111 -8110 0
c Encoding variable: aux1974 with domain: int(0..2) (representing constraint ((x_00009_00004=9) + (x_00009_00007=9)))
c Both direct and order encoding.
c Var 'aux1974' order represents '0' with '8112'
c Var 'aux1974' direct represents '0' with '8112'
c Var 'aux1974' order represents '1' with '8113'
-8112 8113 0
c Var 'aux1974' direct represents '1' with '8114'
8112 -8113 8114 0
-8114 8113 0
-8114 -8112 0
c Var 'aux1974' direct represents '2' with '-8113'
8112 8114 -8113 0
c Encoding variable: aux1975 with domain: bool (representing constraint ((x_00001_00001 + x_00001_00002)<=11))
c Var 'aux1975' direct represents '0' with '-8115'
c Var 'aux1975' direct represents '1' with '8115'
c Var 'aux1975' order represents '1' with '1'
c Var 'aux1975' order represents '0' with '-8115'
c Encoding variable: aux1976 with domain: bool (representing constraint (11<=(x_00001_00001 + x_00001_00002)))
c Var 'aux1976' direct represents '0' with '-8116'
c Var 'aux1976' direct represents '1' with '8116'
c Var 'aux1976' order represents '1' with '1'
c Var 'aux1976' order represents '0' with '-8116'
c Encoding variable: aux1977 with domain: bool (representing constraint ((x_00002_00003 + x_00001_00003)<=8))
c Var 'aux1977' direct represents '0' with '-8117'
c Var 'aux1977' direct represents '1' with '8117'
c Var 'aux1977' order represents '1' with '1'
c Var 'aux1977' order represents '0' with '-8117'
c Encoding variable: aux1978 with domain: bool (representing constraint (8<=(x_00002_00003 + x_00001_00003)))
c Var 'aux1978' direct represents '0' with '-8118'
c Var 'aux1978' direct represents '1' with '8118'
c Var 'aux1978' order represents '1' with '1'
c Var 'aux1978' order represents '0' with '-8118'
c Encoding variable: aux1979 with domain: bool (representing constraint ((x_00002_00004 + x_00001_00004 + x_00001_00005)<=14))
c Var 'aux1979' direct represents '0' with '-8119'
c Var 'aux1979' direct represents '1' with '8119'
c Var 'aux1979' order represents '1' with '1'
c Var 'aux1979' order represents '0' with '-8119'
c Encoding variable: aux1980 with domain: bool (representing constraint (14<=(x_00002_00004 + x_00001_00004 + x_00001_00005)))
c Var 'aux1980' direct represents '0' with '-8120'
c Var 'aux1980' direct represents '1' with '8120'
c Var 'aux1980' order represents '1' with '1'
c Var 'aux1980' order represents '0' with '-8120'
c Encoding variable: aux1981 with domain: bool (representing constraint ((x_00001_00006 + x_00001_00007)<=6))
c Var 'aux1981' direct represents '0' with '-8121'
c Var 'aux1981' direct represents '1' with '8121'
c Var 'aux1981' order represents '1' with '1'
c Var 'aux1981' order represents '0' with '-8121'
c Encoding variable: aux1982 with domain: bool (representing constraint (6<=(x_00001_00006 + x_00001_00007)))
c Var 'aux1982' direct represents '0' with '-8122'
c Var 'aux1982' direct represents '1' with '8122'
c Var 'aux1982' order represents '1' with '1'
c Var 'aux1982' order represents '0' with '-8122'
c Encoding variable: aux1983 with domain: bool (representing constraint ((x_00002_00009 + x_00001_00008 + x_00001_00009)<=23))
c Var 'aux1983' direct represents '0' with '-8123'
c Var 'aux1983' direct represents '1' with '8123'
c Var 'aux1983' order represents '1' with '1'
c Var 'aux1983' order represents '0' with '-8123'
c Encoding variable: aux1984 with domain: bool (representing constraint (23<=(x_00002_00009 + x_00001_00008 + x_00001_00009)))
c Var 'aux1984' direct represents '0' with '-8124'
c Var 'aux1984' direct represents '1' with '8124'
c Var 'aux1984' order represents '1' with '1'
c Var 'aux1984' order represents '0' with '-8124'
c Encoding variable: aux1985 with domain: bool (representing constraint ((x_00002_00001 + x_00002_00002)<=11))
c Var 'aux1985' direct represents '0' with '-8125'
c Var 'aux1985' direct represents '1' with '8125'
c Var 'aux1985' order represents '1' with '1'
c Var 'aux1985' order represents '0' with '-8125'
c Encoding variable: aux1986 with domain: bool (representing constraint (11<=(x_00002_00001 + x_00002_00002)))
c Var 'aux1986' direct represents '0' with '-8126'
c Var 'aux1986' direct represents '1' with '8126'
c Var 'aux1986' order represents '1' with '1'
c Var 'aux1986' order represents '0' with '-8126'
c Encoding variable: aux1987 with domain: bool (representing constraint ((x_00002_00005 + x_00002_00006)<=14))
c Var 'aux1987' direct represents '0' with '-8127'
c Var 'aux1987' direct represents '1' with '8127'
c Var 'aux1987' order represents '1' with '1'
c Var 'aux1987' order represents '0' with '-8127'
c Encoding variable: aux1988 with domain: bool (representing constraint (14<=(x_00002_00005 + x_00002_00006)))
c Var 'aux1988' direct represents '0' with '-8128'
c Var 'aux1988' direct represents '1' with '8128'
c Var 'aux1988' order represents '1' with '1'
c Var 'aux1988' order represents '0' with '-8128'
c Encoding variable: aux1989 with domain: bool (representing constraint ((x_00002_00007 + x_00002_00008 + x_00003_00008)<=6))
c Var 'aux1989' direct represents '0' with '-8129'
c Var 'aux1989' direct represents '1' with '8129'
c Var 'aux1989' order represents '1' with '1'
c Var 'aux1989' order represents '0' with '-8129'
c Encoding variable: aux1990 with domain: bool (representing constraint (6<=(x_00002_00007 + x_00002_00008 + x_00003_00008)))
c Var 'aux1990' direct represents '0' with '-8130'
c Var 'aux1990' direct represents '1' with '8130'
c Var 'aux1990' order represents '1' with '1'
c Var 'aux1990' order represents '0' with '-8130'
c Encoding variable: aux1991 with domain: bool (representing constraint ((aux427 + shift(x_00005_00001, -1) + shift(x_00004_00001, -1))<=14))
c Var 'aux1991' direct represents '0' with '-8131'
c Var 'aux1991' direct represents '1' with '8131'
c Var 'aux1991' order represents '1' with '1'
c Var 'aux1991' order represents '0' with '-8131'
c Encoding variable: aux1992 with domain: bool (representing constraint (14<=(aux427 + shift(x_00005_00001, -1) + shift(x_00004_00001, -1))))
c Var 'aux1992' direct represents '0' with '-8132'
c Var 'aux1992' direct represents '1' with '8132'
c Var 'aux1992' order represents '1' with '1'
c Var 'aux1992' order represents '0' with '-8132'
c Encoding variable: aux1993 with domain: bool (representing constraint ((x_00003_00002 + x_00004_00002 + x_00005_00002)<=15))
c Var 'aux1993' direct represents '0' with '-8133'
c Var 'aux1993' direct represents '1' with '8133'
c Var 'aux1993' order represents '1' with '1'
c Var 'aux1993' order represents '0' with '-8133'
c Encoding variable: aux1994 with domain: bool (representing constraint (15<=(x_00003_00002 + x_00004_00002 + x_00005_00002)))
c Var 'aux1994' direct represents '0' with '-8134'
c Var 'aux1994' direct represents '1' with '8134'
c Var 'aux1994' order represents '1' with '1'
c Var 'aux1994' order represents '0' with '-8134'
c Encoding variable: aux1995 with domain: bool (representing constraint ((x_00003_00003 + x_00003_00004 + x_00004_00004)<=11))
c Var 'aux1995' direct represents '0' with '-8135'
c Var 'aux1995' direct represents '1' with '8135'
c Var 'aux1995' order represents '1' with '1'
c Var 'aux1995' order represents '0' with '-8135'
c Encoding variable: aux1996 with domain: bool (representing constraint (11<=(x_00003_00003 + x_00003_00004 + x_00004_00004)))
c Var 'aux1996' direct represents '0' with '-8136'
c Var 'aux1996' direct represents '1' with '8136'
c Var 'aux1996' order represents '1' with '1'
c Var 'aux1996' order represents '0' with '-8136'
c Encoding variable: aux1997 with domain: bool (representing constraint ((x_00003_00005 + x_00004_00005)<=8))
c Var 'aux1997' direct represents '0' with '-8137'
c Var 'aux1997' direct represents '1' with '8137'
c Var 'aux1997' order represents '1' with '1'
c Var 'aux1997' order represents '0' with '-8137'
c Encoding variable: aux1998 with domain: bool (representing constraint (8<=(x_00003_00005 + x_00004_00005)))
c Var 'aux1998' direct represents '0' with '-8138'
c Var 'aux1998' direct represents '1' with '8138'
c Var 'aux1998' order represents '1' with '1'
c Var 'aux1998' order represents '0' with '-8138'
c Encoding variable: aux1999 with domain: bool (representing constraint ((aux428 + shift(x_00003_00007, -1) + shift(x_00004_00006, -1))<=18))
c Var 'aux1999' direct represents '0' with '-8139'
c Var 'aux1999' direct represents '1' with '8139'
c Var 'aux1999' order represents '1' with '1'
c Var 'aux1999' order represents '0' with '-8139'
c Encoding variable: aux2000 with domain: bool (representing constraint (18<=(aux428 + shift(x_00003_00007, -1) + shift(x_00004_00006, -1))))
c Var 'aux2000' direct represents '0' with '-8140'
c Var 'aux2000' direct represents '1' with '8140'
c Var 'aux2000' order represents '1' with '1'
c Var 'aux2000' order represents '0' with '-8140'
c Encoding variable: aux2001 with domain: bool (representing constraint ((x_00003_00009 + x_00004_00009)<=12))
c Var 'aux2001' direct represents '0' with '-8141'
c Var 'aux2001' direct represents '1' with '8141'
c Var 'aux2001' order represents '1' with '1'
c Var 'aux2001' order represents '0' with '-8141'
c Encoding variable: aux2002 with domain: bool (representing constraint (12<=(x_00003_00009 + x_00004_00009)))
c Var 'aux2002' direct represents '0' with '-8142'
c Var 'aux2002' direct represents '1' with '8142'
c Var 'aux2002' order represents '1' with '1'
c Var 'aux2002' order represents '0' with '-8142'
c Encoding variable: aux2003 with domain: bool (representing constraint ((aux429 + aux430 + aux432)<=35))
c Var 'aux2003' direct represents '0' with '-8143'
c Var 'aux2003' direct represents '1' with '8143'
c Var 'aux2003' order represents '1' with '1'
c Var 'aux2003' order represents '0' with '-8143'
c Encoding variable: aux2004 with domain: bool (representing constraint (35<=(aux429 + aux430 + aux432)))
c Var 'aux2004' direct represents '0' with '-8144'
c Var 'aux2004' direct represents '1' with '8144'
c Var 'aux2004' order represents '1' with '1'
c Var 'aux2004' order represents '0' with '-8144'
c Encoding variable: aux2005 with domain: bool (representing constraint ((x_00004_00008 + x_00005_00008)<=17))
c Var 'aux2005' direct represents '0' with '-8145'
c Var 'aux2005' direct represents '1' with '8145'
c Var 'aux2005' order represents '1' with '1'
c Var 'aux2005' order represents '0' with '-8145'
c Encoding variable: aux2006 with domain: bool (representing constraint (17<=(x_00004_00008 + x_00005_00008)))
c Var 'aux2006' direct represents '0' with '-8146'
c Var 'aux2006' direct represents '1' with '8146'
c Var 'aux2006' order represents '1' with '1'
c Var 'aux2006' order represents '0' with '-8146'
c Encoding variable: aux2007 with domain: bool (representing constraint ((aux433 + shift(x_00005_00005, -1) + shift(x_00006_00004, -1))<=14))
c Var 'aux2007' direct represents '0' with '-8147'
c Var 'aux2007' direct represents '1' with '8147'
c Var 'aux2007' order represents '1' with '1'
c Var 'aux2007' order represents '0' with '-8147'
c Encoding variable: aux2008 with domain: bool (representing constraint (14<=(aux433 + shift(x_00005_00005, -1) + shift(x_00006_00004, -1))))
c Var 'aux2008' direct represents '0' with '-8148'
c Var 'aux2008' direct represents '1' with '8148'
c Var 'aux2008' order represents '1' with '1'
c Var 'aux2008' order represents '0' with '-8148'
c Encoding variable: aux2009 with domain: bool (representing constraint ((x_00005_00006 + x_00005_00007)<=13))
c Var 'aux2009' direct represents '0' with '-8149'
c Var 'aux2009' direct represents '1' with '8149'
c Var 'aux2009' order represents '1' with '1'
c Var 'aux2009' order represents '0' with '-8149'
c Encoding variable: aux2010 with domain: bool (representing constraint (13<=(x_00005_00006 + x_00005_00007)))
c Var 'aux2010' direct represents '0' with '-8150'
c Var 'aux2010' direct represents '1' with '8150'
c Var 'aux2010' order represents '1' with '1'
c Var 'aux2010' order represents '0' with '-8150'
c Encoding variable: aux2011 with domain: bool (representing constraint ((x_00005_00009 + x_00006_00008 + x_00006_00009)<=7))
c Var 'aux2011' direct represents '0' with '-8151'
c Var 'aux2011' direct represents '1' with '8151'
c Var 'aux2011' order represents '1' with '1'
c Var 'aux2011' order represents '0' with '-8151'
c Encoding variable: aux2012 with domain: bool (representing constraint (7<=(x_00005_00009 + x_00006_00008 + x_00006_00009)))
c Var 'aux2012' direct represents '0' with '-8152'
c Var 'aux2012' direct represents '1' with '8152'
c Var 'aux2012' order represents '1' with '1'
c Var 'aux2012' order represents '0' with '-8152'
c Encoding variable: aux2013 with domain: bool (representing constraint ((x_00007_00001 + x_00007_00002 + x_00006_00002)<=19))
c Var 'aux2013' direct represents '0' with '-8153'
c Var 'aux2013' direct represents '1' with '8153'
c Var 'aux2013' order represents '1' with '1'
c Var 'aux2013' order represents '0' with '-8153'
c Encoding variable: aux2014 with domain: bool (representing constraint (19<=(x_00007_00001 + x_00007_00002 + x_00006_00002)))
c Var 'aux2014' direct represents '0' with '-8154'
c Var 'aux2014' direct represents '1' with '8154'
c Var 'aux2014' order represents '1' with '1'
c Var 'aux2014' order represents '0' with '-8154'
c Encoding variable: aux2015 with domain: bool (representing constraint ((x_00007_00007 + x_00006_00006 + x_00006_00007)<=12))
c Var 'aux2015' direct represents '0' with '-8155'
c Var 'aux2015' direct represents '1' with '8155'
c Var 'aux2015' order represents '1' with '1'
c Var 'aux2015' order represents '0' with '-8155'
c Encoding variable: aux2016 with domain: bool (representing constraint (12<=(x_00007_00007 + x_00006_00006 + x_00006_00007)))
c Var 'aux2016' direct represents '0' with '-8156'
c Var 'aux2016' direct represents '1' with '8156'
c Var 'aux2016' order represents '1' with '1'
c Var 'aux2016' order represents '0' with '-8156'
c Encoding variable: aux2017 with domain: bool (representing constraint ((x_00007_00008 + x_00007_00009)<=8))
c Var 'aux2017' direct represents '0' with '-8157'
c Var 'aux2017' direct represents '1' with '8157'
c Var 'aux2017' order represents '1' with '1'
c Var 'aux2017' order represents '0' with '-8157'
c Encoding variable: aux2018 with domain: bool (representing constraint (8<=(x_00007_00008 + x_00007_00009)))
c Var 'aux2018' direct represents '0' with '-8158'
c Var 'aux2018' direct represents '1' with '8158'
c Var 'aux2018' order represents '1' with '1'
c Var 'aux2018' order represents '0' with '-8158'
c Encoding variable: aux2019 with domain: bool (representing constraint ((aux434 + shift(x_00008_00002, -1) + shift(x_00009_00001, -1))<=12))
c Var 'aux2019' direct represents '0' with '-8159'
c Var 'aux2019' direct represents '1' with '8159'
c Var 'aux2019' order represents '1' with '1'
c Var 'aux2019' order represents '0' with '-8159'
c Encoding variable: aux2020 with domain: bool (representing constraint (12<=(aux434 + shift(x_00008_00002, -1) + shift(x_00009_00001, -1))))
c Var 'aux2020' direct represents '0' with '-8160'
c Var 'aux2020' direct represents '1' with '8160'
c Var 'aux2020' order represents '1' with '1'
c Var 'aux2020' order represents '0' with '-8160'
c Encoding variable: aux2021 with domain: bool (representing constraint ((x_00008_00003 + x_00008_00004 + x_00009_00003)<=16))
c Var 'aux2021' direct represents '0' with '-8161'
c Var 'aux2021' direct represents '1' with '8161'
c Var 'aux2021' order represents '1' with '1'
c Var 'aux2021' order represents '0' with '-8161'
c Encoding variable: aux2022 with domain: bool (representing constraint (16<=(x_00008_00003 + x_00008_00004 + x_00009_00003)))
c Var 'aux2022' direct represents '0' with '-8162'
c Var 'aux2022' direct represents '1' with '8162'
c Var 'aux2022' order represents '1' with '1'
c Var 'aux2022' order represents '0' with '-8162'
c Encoding variable: aux2023 with domain: bool (representing constraint ((x_00008_00005 + x_00008_00006 + x_00008_00007)<=17))
c Var 'aux2023' direct represents '0' with '-8163'
c Var 'aux2023' direct represents '1' with '8163'
c Var 'aux2023' order represents '1' with '1'
c Var 'aux2023' order represents '0' with '-8163'
c Encoding variable: aux2024 with domain: bool (representing constraint (17<=(x_00008_00005 + x_00008_00006 + x_00008_00007)))
c Var 'aux2024' direct represents '0' with '-8164'
c Var 'aux2024' direct represents '1' with '8164'
c Var 'aux2024' order represents '1' with '1'
c Var 'aux2024' order represents '0' with '-8164'
c Encoding variable: aux2025 with domain: bool (representing constraint ((x_00008_00008 + x_00009_00008)<=9))
c Var 'aux2025' direct represents '0' with '-8165'
c Var 'aux2025' direct represents '1' with '8165'
c Var 'aux2025' order represents '1' with '1'
c Var 'aux2025' order represents '0' with '-8165'
c Encoding variable: aux2026 with domain: bool (representing constraint (9<=(x_00008_00008 + x_00009_00008)))
c Var 'aux2026' direct represents '0' with '-8166'
c Var 'aux2026' direct represents '1' with '8166'
c Var 'aux2026' order represents '1' with '1'
c Var 'aux2026' order represents '0' with '-8166'
c Encoding variable: aux2027 with domain: bool (representing constraint ((x_00008_00009 + x_00009_00009)<=9))
c Var 'aux2027' direct represents '0' with '-8167'
c Var 'aux2027' direct represents '1' with '8167'
c Var 'aux2027' order represents '1' with '1'
c Var 'aux2027' order represents '0' with '-8167'
c Encoding variable: aux2028 with domain: bool (representing constraint (9<=(x_00008_00009 + x_00009_00009)))
c Var 'aux2028' direct represents '0' with '-8168'
c Var 'aux2028' direct represents '1' with '8168'
c Var 'aux2028' order represents '1' with '1'
c Var 'aux2028' order represents '0' with '-8168'
c Encoding variable: aux2029 with domain: bool (representing constraint ((aux435 + shift(x_00009_00005, -1) + shift(x_00009_00006, -1))<=19))
c Var 'aux2029' direct represents '0' with '-8169'
c Var 'aux2029' direct represents '1' with '8169'
c Var 'aux2029' order represents '1' with '1'
c Var 'aux2029' order represents '0' with '-8169'
c Encoding variable: aux2030 with domain: bool (representing constraint (19<=(aux435 + shift(x_00009_00005, -1) + shift(x_00009_00006, -1))))
c Var 'aux2030' direct represents '0' with '-8170'
c Var 'aux2030' direct represents '1' with '8170'
c Var 'aux2030' order represents '1' with '1'
c Var 'aux2030' order represents '0' with '-8170'
c Encoding variable: aux2031 with domain: bool (representing constraint ((aux437 + aux440 + aux441)<=1))
c Var 'aux2031' direct represents '0' with '-8171'
c Var 'aux2031' direct represents '1' with '8171'
c Var 'aux2031' order represents '1' with '1'
c Var 'aux2031' order represents '0' with '-8171'
c Encoding variable: aux2032 with domain: bool (representing constraint (1<=(aux437 + aux440 + aux441)))
c Var 'aux2032' direct represents '0' with '-8172'
c Var 'aux2032' direct represents '1' with '8172'
c Var 'aux2032' order represents '1' with '1'
c Var 'aux2032' order represents '0' with '-8172'
c Encoding variable: aux2033 with domain: bool (representing constraint ((aux443 + aux446 + aux447)<=1))
c Var 'aux2033' direct represents '0' with '-8173'
c Var 'aux2033' direct represents '1' with '8173'
c Var 'aux2033' order represents '1' with '1'
c Var 'aux2033' order represents '0' with '-8173'
c Encoding variable: aux2034 with domain: bool (representing constraint (1<=(aux443 + aux446 + aux447)))
c Var 'aux2034' direct represents '0' with '-8174'
c Var 'aux2034' direct represents '1' with '8174'
c Var 'aux2034' order represents '1' with '1'
c Var 'aux2034' order represents '0' with '-8174'
c Encoding variable: aux2035 with domain: bool (representing constraint ((aux449 + aux452 + aux453)<=1))
c Var 'aux2035' direct represents '0' with '-8175'
c Var 'aux2035' direct represents '1' with '8175'
c Var 'aux2035' order represents '1' with '1'
c Var 'aux2035' order represents '0' with '-8175'
c Encoding variable: aux2036 with domain: bool (representing constraint (1<=(aux449 + aux452 + aux453)))
c Var 'aux2036' direct represents '0' with '-8176'
c Var 'aux2036' direct represents '1' with '8176'
c Var 'aux2036' order represents '1' with '1'
c Var 'aux2036' order represents '0' with '-8176'
c Encoding variable: aux2037 with domain: bool (representing constraint ((aux455 + aux458 + aux459)<=1))
c Var 'aux2037' direct represents '0' with '-8177'
c Var 'aux2037' direct represents '1' with '8177'
c Var 'aux2037' order represents '1' with '1'
c Var 'aux2037' order represents '0' with '-8177'
c Encoding variable: aux2038 with domain: bool (representing constraint (1<=(aux455 + aux458 + aux459)))
c Var 'aux2038' direct represents '0' with '-8178'
c Var 'aux2038' direct represents '1' with '8178'
c Var 'aux2038' order represents '1' with '1'
c Var 'aux2038' order represents '0' with '-8178'
c Encoding variable: aux2039 with domain: bool (representing constraint ((aux461 + aux464 + aux465)<=1))
c Var 'aux2039' direct represents '0' with '-8179'
c Var 'aux2039' direct represents '1' with '8179'
c Var 'aux2039' order represents '1' with '1'
c Var 'aux2039' order represents '0' with '-8179'
c Encoding variable: aux2040 with domain: bool (representing constraint (1<=(aux461 + aux464 + aux465)))
c Var 'aux2040' direct represents '0' with '-8180'
c Var 'aux2040' direct represents '1' with '8180'
c Var 'aux2040' order represents '1' with '1'
c Var 'aux2040' order represents '0' with '-8180'
c Encoding variable: aux2041 with domain: bool (representing constraint ((aux467 + aux470 + aux471)<=1))
c Var 'aux2041' direct represents '0' with '-8181'
c Var 'aux2041' direct represents '1' with '8181'
c Var 'aux2041' order represents '1' with '1'
c Var 'aux2041' order represents '0' with '-8181'
c Encoding variable: aux2042 with domain: bool (representing constraint (1<=(aux467 + aux470 + aux471)))
c Var 'aux2042' direct represents '0' with '-8182'
c Var 'aux2042' direct represents '1' with '8182'
c Var 'aux2042' order represents '1' with '1'
c Var 'aux2042' order represents '0' with '-8182'
c Encoding variable: aux2043 with domain: bool (representing constraint ((aux473 + aux476 + aux477)<=1))
c Var 'aux2043' direct represents '0' with '-8183'
c Var 'aux2043' direct represents '1' with '8183'
c Var 'aux2043' order represents '1' with '1'
c Var 'aux2043' order represents '0' with '-8183'
c Encoding variable: aux2044 with domain: bool (representing constraint (1<=(aux473 + aux476 + aux477)))
c Var 'aux2044' direct represents '0' with '-8184'
c Var 'aux2044' direct represents '1' with '8184'
c Var 'aux2044' order represents '1' with '1'
c Var 'aux2044' order represents '0' with '-8184'
c Encoding variable: aux2045 with domain: bool (representing constraint ((aux479 + aux482 + aux483)<=1))
c Var 'aux2045' direct represents '0' with '-8185'
c Var 'aux2045' direct represents '1' with '8185'
c Var 'aux2045' order represents '1' with '1'
c Var 'aux2045' order represents '0' with '-8185'
c Encoding variable: aux2046 with domain: bool (representing constraint (1<=(aux479 + aux482 + aux483)))
c Var 'aux2046' direct represents '0' with '-8186'
c Var 'aux2046' direct represents '1' with '8186'
c Var 'aux2046' order represents '1' with '1'
c Var 'aux2046' order represents '0' with '-8186'
c Encoding variable: aux2047 with domain: bool (representing constraint ((aux485 + aux488 + aux489)<=1))
c Var 'aux2047' direct represents '0' with '-8187'
c Var 'aux2047' direct represents '1' with '8187'
c Var 'aux2047' order represents '1' with '1'
c Var 'aux2047' order represents '0' with '-8187'
c Encoding variable: aux2048 with domain: bool (representing constraint (1<=(aux485 + aux488 + aux489)))
c Var 'aux2048' direct represents '0' with '-8188'
c Var 'aux2048' direct represents '1' with '8188'
c Var 'aux2048' order represents '1' with '1'
c Var 'aux2048' order represents '0' with '-8188'
c Encoding variable: aux2049 with domain: bool (representing constraint ((aux491 + aux494 + aux495)<=1))
c Var 'aux2049' direct represents '0' with '-8189'
c Var 'aux2049' direct represents '1' with '8189'
c Var 'aux2049' order represents '1' with '1'
c Var 'aux2049' order represents '0' with '-8189'
c Encoding variable: aux2050 with domain: bool (representing constraint (1<=(aux491 + aux494 + aux495)))
c Var 'aux2050' direct represents '0' with '-8190'
c Var 'aux2050' direct represents '1' with '8190'
c Var 'aux2050' order represents '1' with '1'
c Var 'aux2050' order represents '0' with '-8190'
c Encoding variable: aux2051 with domain: bool (representing constraint ((aux497 + aux500 + aux501)<=1))
c Var 'aux2051' direct represents '0' with '-8191'
c Var 'aux2051' direct represents '1' with '8191'
c Var 'aux2051' order represents '1' with '1'
c Var 'aux2051' order represents '0' with '-8191'
c Encoding variable: aux2052 with domain: bool (representing constraint (1<=(aux497 + aux500 + aux501)))
c Var 'aux2052' direct represents '0' with '-8192'
c Var 'aux2052' direct represents '1' with '8192'
c Var 'aux2052' order represents '1' with '1'
c Var 'aux2052' order represents '0' with '-8192'
c Encoding variable: aux2053 with domain: bool (representing constraint ((aux503 + aux506 + aux507)<=1))
c Var 'aux2053' direct represents '0' with '-8193'
c Var 'aux2053' direct represents '1' with '8193'
c Var 'aux2053' order represents '1' with '1'
c Var 'aux2053' order represents '0' with '-8193'
c Encoding variable: aux2054 with domain: bool (representing constraint (1<=(aux503 + aux506 + aux507)))
c Var 'aux2054' direct represents '0' with '-8194'
c Var 'aux2054' direct represents '1' with '8194'
c Var 'aux2054' order represents '1' with '1'
c Var 'aux2054' order represents '0' with '-8194'
c Encoding variable: aux2055 with domain: bool (representing constraint ((aux509 + aux512 + aux513)<=1))
c Var 'aux2055' direct represents '0' with '-8195'
c Var 'aux2055' direct represents '1' with '8195'
c Var 'aux2055' order represents '1' with '1'
c Var 'aux2055' order represents '0' with '-8195'
c Encoding variable: aux2056 with domain: bool (representing constraint (1<=(aux509 + aux512 + aux513)))
c Var 'aux2056' direct represents '0' with '-8196'
c Var 'aux2056' direct represents '1' with '8196'
c Var 'aux2056' order represents '1' with '1'
c Var 'aux2056' order represents '0' with '-8196'
c Encoding variable: aux2057 with domain: bool (representing constraint ((aux515 + aux518 + aux519)<=1))
c Var 'aux2057' direct represents '0' with '-8197'
c Var 'aux2057' direct represents '1' with '8197'
c Var 'aux2057' order represents '1' with '1'
c Var 'aux2057' order represents '0' with '-8197'
c Encoding variable: aux2058 with domain: bool (representing constraint (1<=(aux515 + aux518 + aux519)))
c Var 'aux2058' direct represents '0' with '-8198'
c Var 'aux2058' direct represents '1' with '8198'
c Var 'aux2058' order represents '1' with '1'
c Var 'aux2058' order represents '0' with '-8198'
c Encoding variable: aux2059 with domain: bool (representing constraint ((aux521 + aux524 + aux525)<=1))
c Var 'aux2059' direct represents '0' with '-8199'
c Var 'aux2059' direct represents '1' with '8199'
c Var 'aux2059' order represents '1' with '1'
c Var 'aux2059' order represents '0' with '-8199'
c Encoding variable: aux2060 with domain: bool (representing constraint (1<=(aux521 + aux524 + aux525)))
c Var 'aux2060' direct represents '0' with '-8200'
c Var 'aux2060' direct represents '1' with '8200'
c Var 'aux2060' order represents '1' with '1'
c Var 'aux2060' order represents '0' with '-8200'
c Encoding variable: aux2061 with domain: bool (representing constraint ((aux527 + aux530 + aux531)<=1))
c Var 'aux2061' direct represents '0' with '-8201'
c Var 'aux2061' direct represents '1' with '8201'
c Var 'aux2061' order represents '1' with '1'
c Var 'aux2061' order represents '0' with '-8201'
c Encoding variable: aux2062 with domain: bool (representing constraint (1<=(aux527 + aux530 + aux531)))
c Var 'aux2062' direct represents '0' with '-8202'
c Var 'aux2062' direct represents '1' with '8202'
c Var 'aux2062' order represents '1' with '1'
c Var 'aux2062' order represents '0' with '-8202'
c Encoding variable: aux2063 with domain: bool (representing constraint ((aux533 + aux536 + aux537)<=1))
c Var 'aux2063' direct represents '0' with '-8203'
c Var 'aux2063' direct represents '1' with '8203'
c Var 'aux2063' order represents '1' with '1'
c Var 'aux2063' order represents '0' with '-8203'
c Encoding variable: aux2064 with domain: bool (representing constraint (1<=(aux533 + aux536 + aux537)))
c Var 'aux2064' direct represents '0' with '-8204'
c Var 'aux2064' direct represents '1' with '8204'
c Var 'aux2064' order represents '1' with '1'
c Var 'aux2064' order represents '0' with '-8204'
c Encoding variable: aux2065 with domain: bool (representing constraint ((aux539 + aux542 + aux543)<=1))
c Var 'aux2065' direct represents '0' with '-8205'
c Var 'aux2065' direct represents '1' with '8205'
c Var 'aux2065' order represents '1' with '1'
c Var 'aux2065' order represents '0' with '-8205'
c Encoding variable: aux2066 with domain: bool (representing constraint (1<=(aux539 + aux542 + aux543)))
c Var 'aux2066' direct represents '0' with '-8206'
c Var 'aux2066' direct represents '1' with '8206'
c Var 'aux2066' order represents '1' with '1'
c Var 'aux2066' order represents '0' with '-8206'
c Encoding variable: aux2067 with domain: bool (representing constraint ((aux545 + aux548 + aux549)<=1))
c Var 'aux2067' direct represents '0' with '-8207'
c Var 'aux2067' direct represents '1' with '8207'
c Var 'aux2067' order represents '1' with '1'
c Var 'aux2067' order represents '0' with '-8207'
c Encoding variable: aux2068 with domain: bool (representing constraint (1<=(aux545 + aux548 + aux549)))
c Var 'aux2068' direct represents '0' with '-8208'
c Var 'aux2068' direct represents '1' with '8208'
c Var 'aux2068' order represents '1' with '1'
c Var 'aux2068' order represents '0' with '-8208'
c Encoding variable: aux2069 with domain: bool (representing constraint ((aux551 + aux554 + aux555)<=1))
c Var 'aux2069' direct represents '0' with '-8209'
c Var 'aux2069' direct represents '1' with '8209'
c Var 'aux2069' order represents '1' with '1'
c Var 'aux2069' order represents '0' with '-8209'
c Encoding variable: aux2070 with domain: bool (representing constraint (1<=(aux551 + aux554 + aux555)))
c Var 'aux2070' direct represents '0' with '-8210'
c Var 'aux2070' direct represents '1' with '8210'
c Var 'aux2070' order represents '1' with '1'
c Var 'aux2070' order represents '0' with '-8210'
c Encoding variable: aux2071 with domain: bool (representing constraint ((aux557 + aux560 + aux561)<=1))
c Var 'aux2071' direct represents '0' with '-8211'
c Var 'aux2071' direct represents '1' with '8211'
c Var 'aux2071' order represents '1' with '1'
c Var 'aux2071' order represents '0' with '-8211'
c Encoding variable: aux2072 with domain: bool (representing constraint (1<=(aux557 + aux560 + aux561)))
c Var 'aux2072' direct represents '0' with '-8212'
c Var 'aux2072' direct represents '1' with '8212'
c Var 'aux2072' order represents '1' with '1'
c Var 'aux2072' order represents '0' with '-8212'
c Encoding variable: aux2073 with domain: bool (representing constraint ((aux563 + aux566 + aux567)<=1))
c Var 'aux2073' direct represents '0' with '-8213'
c Var 'aux2073' direct represents '1' with '8213'
c Var 'aux2073' order represents '1' with '1'
c Var 'aux2073' order represents '0' with '-8213'
c Encoding variable: aux2074 with domain: bool (representing constraint (1<=(aux563 + aux566 + aux567)))
c Var 'aux2074' direct represents '0' with '-8214'
c Var 'aux2074' direct represents '1' with '8214'
c Var 'aux2074' order represents '1' with '1'
c Var 'aux2074' order represents '0' with '-8214'
c Encoding variable: aux2075 with domain: bool (representing constraint ((aux569 + aux572 + aux573)<=1))
c Var 'aux2075' direct represents '0' with '-8215'
c Var 'aux2075' direct represents '1' with '8215'
c Var 'aux2075' order represents '1' with '1'
c Var 'aux2075' order represents '0' with '-8215'
c Encoding variable: aux2076 with domain: bool (representing constraint (1<=(aux569 + aux572 + aux573)))
c Var 'aux2076' direct represents '0' with '-8216'
c Var 'aux2076' direct represents '1' with '8216'
c Var 'aux2076' order represents '1' with '1'
c Var 'aux2076' order represents '0' with '-8216'
c Encoding variable: aux2077 with domain: bool (representing constraint ((aux575 + aux578 + aux579)<=1))
c Var 'aux2077' direct represents '0' with '-8217'
c Var 'aux2077' direct represents '1' with '8217'
c Var 'aux2077' order represents '1' with '1'
c Var 'aux2077' order represents '0' with '-8217'
c Encoding variable: aux2078 with domain: bool (representing constraint (1<=(aux575 + aux578 + aux579)))
c Var 'aux2078' direct represents '0' with '-8218'
c Var 'aux2078' direct represents '1' with '8218'
c Var 'aux2078' order represents '1' with '1'
c Var 'aux2078' order represents '0' with '-8218'
c Encoding variable: aux2079 with domain: bool (representing constraint ((aux581 + aux584 + aux585)<=1))
c Var 'aux2079' direct represents '0' with '-8219'
c Var 'aux2079' direct represents '1' with '8219'
c Var 'aux2079' order represents '1' with '1'
c Var 'aux2079' order represents '0' with '-8219'
c Encoding variable: aux2080 with domain: bool (representing constraint (1<=(aux581 + aux584 + aux585)))
c Var 'aux2080' direct represents '0' with '-8220'
c Var 'aux2080' direct represents '1' with '8220'
c Var 'aux2080' order represents '1' with '1'
c Var 'aux2080' order represents '0' with '-8220'
c Encoding variable: aux2081 with domain: bool (representing constraint ((aux587 + aux590 + aux591)<=1))
c Var 'aux2081' direct represents '0' with '-8221'
c Var 'aux2081' direct represents '1' with '8221'
c Var 'aux2081' order represents '1' with '1'
c Var 'aux2081' order represents '0' with '-8221'
c Encoding variable: aux2082 with domain: bool (representing constraint (1<=(aux587 + aux590 + aux591)))
c Var 'aux2082' direct represents '0' with '-8222'
c Var 'aux2082' direct represents '1' with '8222'
c Var 'aux2082' order represents '1' with '1'
c Var 'aux2082' order represents '0' with '-8222'
c Encoding variable: aux2083 with domain: bool (representing constraint ((aux593 + aux596 + aux597)<=1))
c Var 'aux2083' direct represents '0' with '-8223'
c Var 'aux2083' direct represents '1' with '8223'
c Var 'aux2083' order represents '1' with '1'
c Var 'aux2083' order represents '0' with '-8223'
c Encoding variable: aux2084 with domain: bool (representing constraint (1<=(aux593 + aux596 + aux597)))
c Var 'aux2084' direct represents '0' with '-8224'
c Var 'aux2084' direct represents '1' with '8224'
c Var 'aux2084' order represents '1' with '1'
c Var 'aux2084' order represents '0' with '-8224'
c Encoding variable: aux2085 with domain: bool (representing constraint ((aux599 + aux602 + aux603)<=1))
c Var 'aux2085' direct represents '0' with '-8225'
c Var 'aux2085' direct represents '1' with '8225'
c Var 'aux2085' order represents '1' with '1'
c Var 'aux2085' order represents '0' with '-8225'
c Encoding variable: aux2086 with domain: bool (representing constraint (1<=(aux599 + aux602 + aux603)))
c Var 'aux2086' direct represents '0' with '-8226'
c Var 'aux2086' direct represents '1' with '8226'
c Var 'aux2086' order represents '1' with '1'
c Var 'aux2086' order represents '0' with '-8226'
c Encoding variable: aux2087 with domain: bool (representing constraint ((aux605 + aux608 + aux609)<=1))
c Var 'aux2087' direct represents '0' with '-8227'
c Var 'aux2087' direct represents '1' with '8227'
c Var 'aux2087' order represents '1' with '1'
c Var 'aux2087' order represents '0' with '-8227'
c Encoding variable: aux2088 with domain: bool (representing constraint (1<=(aux605 + aux608 + aux609)))
c Var 'aux2088' direct represents '0' with '-8228'
c Var 'aux2088' direct represents '1' with '8228'
c Var 'aux2088' order represents '1' with '1'
c Var 'aux2088' order represents '0' with '-8228'
c Encoding variable: aux2089 with domain: bool (representing constraint ((aux611 + aux614 + aux615)<=1))
c Var 'aux2089' direct represents '0' with '-8229'
c Var 'aux2089' direct represents '1' with '8229'
c Var 'aux2089' order represents '1' with '1'
c Var 'aux2089' order represents '0' with '-8229'
c Encoding variable: aux2090 with domain: bool (representing constraint (1<=(aux611 + aux614 + aux615)))
c Var 'aux2090' direct represents '0' with '-8230'
c Var 'aux2090' direct represents '1' with '8230'
c Var 'aux2090' order represents '1' with '1'
c Var 'aux2090' order represents '0' with '-8230'
c Encoding variable: aux2091 with domain: bool (representing constraint ((aux617 + aux620 + aux621)<=1))
c Var 'aux2091' direct represents '0' with '-8231'
c Var 'aux2091' direct represents '1' with '8231'
c Var 'aux2091' order represents '1' with '1'
c Var 'aux2091' order represents '0' with '-8231'
c Encoding variable: aux2092 with domain: bool (representing constraint (1<=(aux617 + aux620 + aux621)))
c Var 'aux2092' direct represents '0' with '-8232'
c Var 'aux2092' direct represents '1' with '8232'
c Var 'aux2092' order represents '1' with '1'
c Var 'aux2092' order represents '0' with '-8232'
c Encoding variable: aux2093 with domain: bool (representing constraint ((aux623 + aux626 + aux627)<=1))
c Var 'aux2093' direct represents '0' with '-8233'
c Var 'aux2093' direct represents '1' with '8233'
c Var 'aux2093' order represents '1' with '1'
c Var 'aux2093' order represents '0' with '-8233'
c Encoding variable: aux2094 with domain: bool (representing constraint (1<=(aux623 + aux626 + aux627)))
c Var 'aux2094' direct represents '0' with '-8234'
c Var 'aux2094' direct represents '1' with '8234'
c Var 'aux2094' order represents '1' with '1'
c Var 'aux2094' order represents '0' with '-8234'
c Encoding variable: aux2095 with domain: bool (representing constraint ((aux629 + aux632 + aux633)<=1))
c Var 'aux2095' direct represents '0' with '-8235'
c Var 'aux2095' direct represents '1' with '8235'
c Var 'aux2095' order represents '1' with '1'
c Var 'aux2095' order represents '0' with '-8235'
c Encoding variable: aux2096 with domain: bool (representing constraint (1<=(aux629 + aux632 + aux633)))
c Var 'aux2096' direct represents '0' with '-8236'
c Var 'aux2096' direct represents '1' with '8236'
c Var 'aux2096' order represents '1' with '1'
c Var 'aux2096' order represents '0' with '-8236'
c Encoding variable: aux2097 with domain: bool (representing constraint ((aux635 + aux638 + aux639)<=1))
c Var 'aux2097' direct represents '0' with '-8237'
c Var 'aux2097' direct represents '1' with '8237'
c Var 'aux2097' order represents '1' with '1'
c Var 'aux2097' order represents '0' with '-8237'
c Encoding variable: aux2098 with domain: bool (representing constraint (1<=(aux635 + aux638 + aux639)))
c Var 'aux2098' direct represents '0' with '-8238'
c Var 'aux2098' direct represents '1' with '8238'
c Var 'aux2098' order represents '1' with '1'
c Var 'aux2098' order represents '0' with '-8238'
c Encoding variable: aux2099 with domain: bool (representing constraint ((aux641 + aux644 + aux645)<=1))
c Var 'aux2099' direct represents '0' with '-8239'
c Var 'aux2099' direct represents '1' with '8239'
c Var 'aux2099' order represents '1' with '1'
c Var 'aux2099' order represents '0' with '-8239'
c Encoding variable: aux2100 with domain: bool (representing constraint (1<=(aux641 + aux644 + aux645)))
c Var 'aux2100' direct represents '0' with '-8240'
c Var 'aux2100' direct represents '1' with '8240'
c Var 'aux2100' order represents '1' with '1'
c Var 'aux2100' order represents '0' with '-8240'
c Encoding variable: aux2101 with domain: bool (representing constraint ((aux647 + aux650 + aux651)<=1))
c Var 'aux2101' direct represents '0' with '-8241'
c Var 'aux2101' direct represents '1' with '8241'
c Var 'aux2101' order represents '1' with '1'
c Var 'aux2101' order represents '0' with '-8241'
c Encoding variable: aux2102 with domain: bool (representing constraint (1<=(aux647 + aux650 + aux651)))
c Var 'aux2102' direct represents '0' with '-8242'
c Var 'aux2102' direct represents '1' with '8242'
c Var 'aux2102' order represents '1' with '1'
c Var 'aux2102' order represents '0' with '-8242'
c Encoding variable: aux2103 with domain: bool (representing constraint ((aux653 + aux656 + aux657)<=1))
c Var 'aux2103' direct represents '0' with '-8243'
c Var 'aux2103' direct represents '1' with '8243'
c Var 'aux2103' order represents '1' with '1'
c Var 'aux2103' order represents '0' with '-8243'
c Encoding variable: aux2104 with domain: bool (representing constraint (1<=(aux653 + aux656 + aux657)))
c Var 'aux2104' direct represents '0' with '-8244'
c Var 'aux2104' direct represents '1' with '8244'
c Var 'aux2104' order represents '1' with '1'
c Var 'aux2104' order represents '0' with '-8244'
c Encoding variable: aux2105 with domain: bool (representing constraint ((aux659 + aux662 + aux663)<=1))
c Var 'aux2105' direct represents '0' with '-8245'
c Var 'aux2105' direct represents '1' with '8245'
c Var 'aux2105' order represents '1' with '1'
c Var 'aux2105' order represents '0' with '-8245'
c Encoding variable: aux2106 with domain: bool (representing constraint (1<=(aux659 + aux662 + aux663)))
c Var 'aux2106' direct represents '0' with '-8246'
c Var 'aux2106' direct represents '1' with '8246'
c Var 'aux2106' order represents '1' with '1'
c Var 'aux2106' order represents '0' with '-8246'
c Encoding variable: aux2107 with domain: bool (representing constraint ((aux665 + aux668 + aux669)<=1))
c Var 'aux2107' direct represents '0' with '-8247'
c Var 'aux2107' direct represents '1' with '8247'
c Var 'aux2107' order represents '1' with '1'
c Var 'aux2107' order represents '0' with '-8247'
c Encoding variable: aux2108 with domain: bool (representing constraint (1<=(aux665 + aux668 + aux669)))
c Var 'aux2108' direct represents '0' with '-8248'
c Var 'aux2108' direct represents '1' with '8248'
c Var 'aux2108' order represents '1' with '1'
c Var 'aux2108' order represents '0' with '-8248'
c Encoding variable: aux2109 with domain: bool (representing constraint ((aux671 + aux674 + aux675)<=1))
c Var 'aux2109' direct represents '0' with '-8249'
c Var 'aux2109' direct represents '1' with '8249'
c Var 'aux2109' order represents '1' with '1'
c Var 'aux2109' order represents '0' with '-8249'
c Encoding variable: aux2110 with domain: bool (representing constraint (1<=(aux671 + aux674 + aux675)))
c Var 'aux2110' direct represents '0' with '-8250'
c Var 'aux2110' direct represents '1' with '8250'
c Var 'aux2110' order represents '1' with '1'
c Var 'aux2110' order represents '0' with '-8250'
c Encoding variable: aux2111 with domain: bool (representing constraint ((aux677 + aux680 + aux681)<=1))
c Var 'aux2111' direct represents '0' with '-8251'
c Var 'aux2111' direct represents '1' with '8251'
c Var 'aux2111' order represents '1' with '1'
c Var 'aux2111' order represents '0' with '-8251'
c Encoding variable: aux2112 with domain: bool (representing constraint (1<=(aux677 + aux680 + aux681)))
c Var 'aux2112' direct represents '0' with '-8252'
c Var 'aux2112' direct represents '1' with '8252'
c Var 'aux2112' order represents '1' with '1'
c Var 'aux2112' order represents '0' with '-8252'
c Encoding variable: aux2113 with domain: bool (representing constraint ((aux683 + aux686 + aux687)<=1))
c Var 'aux2113' direct represents '0' with '-8253'
c Var 'aux2113' direct represents '1' with '8253'
c Var 'aux2113' order represents '1' with '1'
c Var 'aux2113' order represents '0' with '-8253'
c Encoding variable: aux2114 with domain: bool (representing constraint (1<=(aux683 + aux686 + aux687)))
c Var 'aux2114' direct represents '0' with '-8254'
c Var 'aux2114' direct represents '1' with '8254'
c Var 'aux2114' order represents '1' with '1'
c Var 'aux2114' order represents '0' with '-8254'
c Encoding variable: aux2115 with domain: bool (representing constraint ((aux689 + aux692 + aux693)<=1))
c Var 'aux2115' direct represents '0' with '-8255'
c Var 'aux2115' direct represents '1' with '8255'
c Var 'aux2115' order represents '1' with '1'
c Var 'aux2115' order represents '0' with '-8255'
c Encoding variable: aux2116 with domain: bool (representing constraint (1<=(aux689 + aux692 + aux693)))
c Var 'aux2116' direct represents '0' with '-8256'
c Var 'aux2116' direct represents '1' with '8256'
c Var 'aux2116' order represents '1' with '1'
c Var 'aux2116' order represents '0' with '-8256'
c Encoding variable: aux2117 with domain: bool (representing constraint ((aux695 + aux698 + aux699)<=1))
c Var 'aux2117' direct represents '0' with '-8257'
c Var 'aux2117' direct represents '1' with '8257'
c Var 'aux2117' order represents '1' with '1'
c Var 'aux2117' order represents '0' with '-8257'
c Encoding variable: aux2118 with domain: bool (representing constraint (1<=(aux695 + aux698 + aux699)))
c Var 'aux2118' direct represents '0' with '-8258'
c Var 'aux2118' direct represents '1' with '8258'
c Var 'aux2118' order represents '1' with '1'
c Var 'aux2118' order represents '0' with '-8258'
c Encoding variable: aux2119 with domain: bool (representing constraint ((aux701 + aux704 + aux705)<=1))
c Var 'aux2119' direct represents '0' with '-8259'
c Var 'aux2119' direct represents '1' with '8259'
c Var 'aux2119' order represents '1' with '1'
c Var 'aux2119' order represents '0' with '-8259'
c Encoding variable: aux2120 with domain: bool (representing constraint (1<=(aux701 + aux704 + aux705)))
c Var 'aux2120' direct represents '0' with '-8260'
c Var 'aux2120' direct represents '1' with '8260'
c Var 'aux2120' order represents '1' with '1'
c Var 'aux2120' order represents '0' with '-8260'
c Encoding variable: aux2121 with domain: bool (representing constraint ((aux707 + aux710 + aux711)<=1))
c Var 'aux2121' direct represents '0' with '-8261'
c Var 'aux2121' direct represents '1' with '8261'
c Var 'aux2121' order represents '1' with '1'
c Var 'aux2121' order represents '0' with '-8261'
c Encoding variable: aux2122 with domain: bool (representing constraint (1<=(aux707 + aux710 + aux711)))
c Var 'aux2122' direct represents '0' with '-8262'
c Var 'aux2122' direct represents '1' with '8262'
c Var 'aux2122' order represents '1' with '1'
c Var 'aux2122' order represents '0' with '-8262'
c Encoding variable: aux2123 with domain: bool (representing constraint ((aux713 + aux716 + aux717)<=1))
c Var 'aux2123' direct represents '0' with '-8263'
c Var 'aux2123' direct represents '1' with '8263'
c Var 'aux2123' order represents '1' with '1'
c Var 'aux2123' order represents '0' with '-8263'
c Encoding variable: aux2124 with domain: bool (representing constraint (1<=(aux713 + aux716 + aux717)))
c Var 'aux2124' direct represents '0' with '-8264'
c Var 'aux2124' direct represents '1' with '8264'
c Var 'aux2124' order represents '1' with '1'
c Var 'aux2124' order represents '0' with '-8264'
c Encoding variable: aux2125 with domain: bool (representing constraint ((aux719 + aux722 + aux723)<=1))
c Var 'aux2125' direct represents '0' with '-8265'
c Var 'aux2125' direct represents '1' with '8265'
c Var 'aux2125' order represents '1' with '1'
c Var 'aux2125' order represents '0' with '-8265'
c Encoding variable: aux2126 with domain: bool (representing constraint (1<=(aux719 + aux722 + aux723)))
c Var 'aux2126' direct represents '0' with '-8266'
c Var 'aux2126' direct represents '1' with '8266'
c Var 'aux2126' order represents '1' with '1'
c Var 'aux2126' order represents '0' with '-8266'
c Encoding variable: aux2127 with domain: bool (representing constraint ((aux725 + aux728 + aux729)<=1))
c Var 'aux2127' direct represents '0' with '-8267'
c Var 'aux2127' direct represents '1' with '8267'
c Var 'aux2127' order represents '1' with '1'
c Var 'aux2127' order represents '0' with '-8267'
c Encoding variable: aux2128 with domain: bool (representing constraint (1<=(aux725 + aux728 + aux729)))
c Var 'aux2128' direct represents '0' with '-8268'
c Var 'aux2128' direct represents '1' with '8268'
c Var 'aux2128' order represents '1' with '1'
c Var 'aux2128' order represents '0' with '-8268'
c Encoding variable: aux2129 with domain: bool (representing constraint ((aux731 + aux734 + aux735)<=1))
c Var 'aux2129' direct represents '0' with '-8269'
c Var 'aux2129' direct represents '1' with '8269'
c Var 'aux2129' order represents '1' with '1'
c Var 'aux2129' order represents '0' with '-8269'
c Encoding variable: aux2130 with domain: bool (representing constraint (1<=(aux731 + aux734 + aux735)))
c Var 'aux2130' direct represents '0' with '-8270'
c Var 'aux2130' direct represents '1' with '8270'
c Var 'aux2130' order represents '1' with '1'
c Var 'aux2130' order represents '0' with '-8270'
c Encoding variable: aux2131 with domain: bool (representing constraint ((aux737 + aux740 + aux741)<=1))
c Var 'aux2131' direct represents '0' with '-8271'
c Var 'aux2131' direct represents '1' with '8271'
c Var 'aux2131' order represents '1' with '1'
c Var 'aux2131' order represents '0' with '-8271'
c Encoding variable: aux2132 with domain: bool (representing constraint (1<=(aux737 + aux740 + aux741)))
c Var 'aux2132' direct represents '0' with '-8272'
c Var 'aux2132' direct represents '1' with '8272'
c Var 'aux2132' order represents '1' with '1'
c Var 'aux2132' order represents '0' with '-8272'
c Encoding variable: aux2133 with domain: bool (representing constraint ((aux743 + aux746 + aux747)<=1))
c Var 'aux2133' direct represents '0' with '-8273'
c Var 'aux2133' direct represents '1' with '8273'
c Var 'aux2133' order represents '1' with '1'
c Var 'aux2133' order represents '0' with '-8273'
c Encoding variable: aux2134 with domain: bool (representing constraint (1<=(aux743 + aux746 + aux747)))
c Var 'aux2134' direct represents '0' with '-8274'
c Var 'aux2134' direct represents '1' with '8274'
c Var 'aux2134' order represents '1' with '1'
c Var 'aux2134' order represents '0' with '-8274'
c Encoding variable: aux2135 with domain: bool (representing constraint ((aux749 + aux752 + aux753)<=1))
c Var 'aux2135' direct represents '0' with '-8275'
c Var 'aux2135' direct represents '1' with '8275'
c Var 'aux2135' order represents '1' with '1'
c Var 'aux2135' order represents '0' with '-8275'
c Encoding variable: aux2136 with domain: bool (representing constraint (1<=(aux749 + aux752 + aux753)))
c Var 'aux2136' direct represents '0' with '-8276'
c Var 'aux2136' direct represents '1' with '8276'
c Var 'aux2136' order represents '1' with '1'
c Var 'aux2136' order represents '0' with '-8276'
c Encoding variable: aux2137 with domain: bool (representing constraint ((aux755 + aux758 + aux759)<=1))
c Var 'aux2137' direct represents '0' with '-8277'
c Var 'aux2137' direct represents '1' with '8277'
c Var 'aux2137' order represents '1' with '1'
c Var 'aux2137' order represents '0' with '-8277'
c Encoding variable: aux2138 with domain: bool (representing constraint (1<=(aux755 + aux758 + aux759)))
c Var 'aux2138' direct represents '0' with '-8278'
c Var 'aux2138' direct represents '1' with '8278'
c Var 'aux2138' order represents '1' with '1'
c Var 'aux2138' order represents '0' with '-8278'
c Encoding variable: aux2139 with domain: bool (representing constraint ((aux761 + aux764 + aux765)<=1))
c Var 'aux2139' direct represents '0' with '-8279'
c Var 'aux2139' direct represents '1' with '8279'
c Var 'aux2139' order represents '1' with '1'
c Var 'aux2139' order represents '0' with '-8279'
c Encoding variable: aux2140 with domain: bool (representing constraint (1<=(aux761 + aux764 + aux765)))
c Var 'aux2140' direct represents '0' with '-8280'
c Var 'aux2140' direct represents '1' with '8280'
c Var 'aux2140' order represents '1' with '1'
c Var 'aux2140' order represents '0' with '-8280'
c Encoding variable: aux2141 with domain: bool (representing constraint ((aux767 + aux770 + aux771)<=1))
c Var 'aux2141' direct represents '0' with '-8281'
c Var 'aux2141' direct represents '1' with '8281'
c Var 'aux2141' order represents '1' with '1'
c Var 'aux2141' order represents '0' with '-8281'
c Encoding variable: aux2142 with domain: bool (representing constraint (1<=(aux767 + aux770 + aux771)))
c Var 'aux2142' direct represents '0' with '-8282'
c Var 'aux2142' direct represents '1' with '8282'
c Var 'aux2142' order represents '1' with '1'
c Var 'aux2142' order represents '0' with '-8282'
c Encoding variable: aux2143 with domain: bool (representing constraint ((aux773 + aux776 + aux777)<=1))
c Var 'aux2143' direct represents '0' with '-8283'
c Var 'aux2143' direct represents '1' with '8283'
c Var 'aux2143' order represents '1' with '1'
c Var 'aux2143' order represents '0' with '-8283'
c Encoding variable: aux2144 with domain: bool (representing constraint (1<=(aux773 + aux776 + aux777)))
c Var 'aux2144' direct represents '0' with '-8284'
c Var 'aux2144' direct represents '1' with '8284'
c Var 'aux2144' order represents '1' with '1'
c Var 'aux2144' order represents '0' with '-8284'
c Encoding variable: aux2145 with domain: bool (representing constraint ((aux779 + aux782 + aux783)<=1))
c Var 'aux2145' direct represents '0' with '-8285'
c Var 'aux2145' direct represents '1' with '8285'
c Var 'aux2145' order represents '1' with '1'
c Var 'aux2145' order represents '0' with '-8285'
c Encoding variable: aux2146 with domain: bool (representing constraint (1<=(aux779 + aux782 + aux783)))
c Var 'aux2146' direct represents '0' with '-8286'
c Var 'aux2146' direct represents '1' with '8286'
c Var 'aux2146' order represents '1' with '1'
c Var 'aux2146' order represents '0' with '-8286'
c Encoding variable: aux2147 with domain: bool (representing constraint ((aux785 + aux788 + aux789)<=1))
c Var 'aux2147' direct represents '0' with '-8287'
c Var 'aux2147' direct represents '1' with '8287'
c Var 'aux2147' order represents '1' with '1'
c Var 'aux2147' order represents '0' with '-8287'
c Encoding variable: aux2148 with domain: bool (representing constraint (1<=(aux785 + aux788 + aux789)))
c Var 'aux2148' direct represents '0' with '-8288'
c Var 'aux2148' direct represents '1' with '8288'
c Var 'aux2148' order represents '1' with '1'
c Var 'aux2148' order represents '0' with '-8288'
c Encoding variable: aux2149 with domain: bool (representing constraint ((aux791 + aux794 + aux795)<=1))
c Var 'aux2149' direct represents '0' with '-8289'
c Var 'aux2149' direct represents '1' with '8289'
c Var 'aux2149' order represents '1' with '1'
c Var 'aux2149' order represents '0' with '-8289'
c Encoding variable: aux2150 with domain: bool (representing constraint (1<=(aux791 + aux794 + aux795)))
c Var 'aux2150' direct represents '0' with '-8290'
c Var 'aux2150' direct represents '1' with '8290'
c Var 'aux2150' order represents '1' with '1'
c Var 'aux2150' order represents '0' with '-8290'
c Encoding variable: aux2151 with domain: bool (representing constraint ((aux797 + aux800 + aux801)<=1))
c Var 'aux2151' direct represents '0' with '-8291'
c Var 'aux2151' direct represents '1' with '8291'
c Var 'aux2151' order represents '1' with '1'
c Var 'aux2151' order represents '0' with '-8291'
c Encoding variable: aux2152 with domain: bool (representing constraint (1<=(aux797 + aux800 + aux801)))
c Var 'aux2152' direct represents '0' with '-8292'
c Var 'aux2152' direct represents '1' with '8292'
c Var 'aux2152' order represents '1' with '1'
c Var 'aux2152' order represents '0' with '-8292'
c Encoding variable: aux2153 with domain: bool (representing constraint ((aux803 + aux806 + aux807)<=1))
c Var 'aux2153' direct represents '0' with '-8293'
c Var 'aux2153' direct represents '1' with '8293'
c Var 'aux2153' order represents '1' with '1'
c Var 'aux2153' order represents '0' with '-8293'
c Encoding variable: aux2154 with domain: bool (representing constraint (1<=(aux803 + aux806 + aux807)))
c Var 'aux2154' direct represents '0' with '-8294'
c Var 'aux2154' direct represents '1' with '8294'
c Var 'aux2154' order represents '1' with '1'
c Var 'aux2154' order represents '0' with '-8294'
c Encoding variable: aux2155 with domain: bool (representing constraint ((aux809 + aux812 + aux813)<=1))
c Var 'aux2155' direct represents '0' with '-8295'
c Var 'aux2155' direct represents '1' with '8295'
c Var 'aux2155' order represents '1' with '1'
c Var 'aux2155' order represents '0' with '-8295'
c Encoding variable: aux2156 with domain: bool (representing constraint (1<=(aux809 + aux812 + aux813)))
c Var 'aux2156' direct represents '0' with '-8296'
c Var 'aux2156' direct represents '1' with '8296'
c Var 'aux2156' order represents '1' with '1'
c Var 'aux2156' order represents '0' with '-8296'
c Encoding variable: aux2157 with domain: bool (representing constraint ((aux815 + aux818 + aux819)<=1))
c Var 'aux2157' direct represents '0' with '-8297'
c Var 'aux2157' direct represents '1' with '8297'
c Var 'aux2157' order represents '1' with '1'
c Var 'aux2157' order represents '0' with '-8297'
c Encoding variable: aux2158 with domain: bool (representing constraint (1<=(aux815 + aux818 + aux819)))
c Var 'aux2158' direct represents '0' with '-8298'
c Var 'aux2158' direct represents '1' with '8298'
c Var 'aux2158' order represents '1' with '1'
c Var 'aux2158' order represents '0' with '-8298'
c Encoding variable: aux2159 with domain: bool (representing constraint ((aux821 + aux824 + aux825)<=1))
c Var 'aux2159' direct represents '0' with '-8299'
c Var 'aux2159' direct represents '1' with '8299'
c Var 'aux2159' order represents '1' with '1'
c Var 'aux2159' order represents '0' with '-8299'
c Encoding variable: aux2160 with domain: bool (representing constraint (1<=(aux821 + aux824 + aux825)))
c Var 'aux2160' direct represents '0' with '-8300'
c Var 'aux2160' direct represents '1' with '8300'
c Var 'aux2160' order represents '1' with '1'
c Var 'aux2160' order represents '0' with '-8300'
c Encoding variable: aux2161 with domain: bool (representing constraint ((aux827 + aux830 + aux831)<=1))
c Var 'aux2161' direct represents '0' with '-8301'
c Var 'aux2161' direct represents '1' with '8301'
c Var 'aux2161' order represents '1' with '1'
c Var 'aux2161' order represents '0' with '-8301'
c Encoding variable: aux2162 with domain: bool (representing constraint (1<=(aux827 + aux830 + aux831)))
c Var 'aux2162' direct represents '0' with '-8302'
c Var 'aux2162' direct represents '1' with '8302'
c Var 'aux2162' order represents '1' with '1'
c Var 'aux2162' order represents '0' with '-8302'
c Encoding variable: aux2163 with domain: bool (representing constraint ((aux833 + aux836 + aux837)<=1))
c Var 'aux2163' direct represents '0' with '-8303'
c Var 'aux2163' direct represents '1' with '8303'
c Var 'aux2163' order represents '1' with '1'
c Var 'aux2163' order represents '0' with '-8303'
c Encoding variable: aux2164 with domain: bool (representing constraint (1<=(aux833 + aux836 + aux837)))
c Var 'aux2164' direct represents '0' with '-8304'
c Var 'aux2164' direct represents '1' with '8304'
c Var 'aux2164' order represents '1' with '1'
c Var 'aux2164' order represents '0' with '-8304'
c Encoding variable: aux2165 with domain: bool (representing constraint ((aux839 + aux842 + aux843)<=1))
c Var 'aux2165' direct represents '0' with '-8305'
c Var 'aux2165' direct represents '1' with '8305'
c Var 'aux2165' order represents '1' with '1'
c Var 'aux2165' order represents '0' with '-8305'
c Encoding variable: aux2166 with domain: bool (representing constraint (1<=(aux839 + aux842 + aux843)))
c Var 'aux2166' direct represents '0' with '-8306'
c Var 'aux2166' direct represents '1' with '8306'
c Var 'aux2166' order represents '1' with '1'
c Var 'aux2166' order represents '0' with '-8306'
c Encoding variable: aux2167 with domain: bool (representing constraint ((aux845 + aux848 + aux849)<=1))
c Var 'aux2167' direct represents '0' with '-8307'
c Var 'aux2167' direct represents '1' with '8307'
c Var 'aux2167' order represents '1' with '1'
c Var 'aux2167' order represents '0' with '-8307'
c Encoding variable: aux2168 with domain: bool (representing constraint (1<=(aux845 + aux848 + aux849)))
c Var 'aux2168' direct represents '0' with '-8308'
c Var 'aux2168' direct represents '1' with '8308'
c Var 'aux2168' order represents '1' with '1'
c Var 'aux2168' order represents '0' with '-8308'
c Encoding variable: aux2169 with domain: bool (representing constraint ((aux851 + aux854 + aux855)<=1))
c Var 'aux2169' direct represents '0' with '-8309'
c Var 'aux2169' direct represents '1' with '8309'
c Var 'aux2169' order represents '1' with '1'
c Var 'aux2169' order represents '0' with '-8309'
c Encoding variable: aux2170 with domain: bool (representing constraint (1<=(aux851 + aux854 + aux855)))
c Var 'aux2170' direct represents '0' with '-8310'
c Var 'aux2170' direct represents '1' with '8310'
c Var 'aux2170' order represents '1' with '1'
c Var 'aux2170' order represents '0' with '-8310'
c Encoding variable: aux2171 with domain: bool (representing constraint ((aux857 + aux860 + aux861)<=1))
c Var 'aux2171' direct represents '0' with '-8311'
c Var 'aux2171' direct represents '1' with '8311'
c Var 'aux2171' order represents '1' with '1'
c Var 'aux2171' order represents '0' with '-8311'
c Encoding variable: aux2172 with domain: bool (representing constraint (1<=(aux857 + aux860 + aux861)))
c Var 'aux2172' direct represents '0' with '-8312'
c Var 'aux2172' direct represents '1' with '8312'
c Var 'aux2172' order represents '1' with '1'
c Var 'aux2172' order represents '0' with '-8312'
c Encoding variable: aux2173 with domain: bool (representing constraint ((aux863 + aux866 + aux867)<=1))
c Var 'aux2173' direct represents '0' with '-8313'
c Var 'aux2173' direct represents '1' with '8313'
c Var 'aux2173' order represents '1' with '1'
c Var 'aux2173' order represents '0' with '-8313'
c Encoding variable: aux2174 with domain: bool (representing constraint (1<=(aux863 + aux866 + aux867)))
c Var 'aux2174' direct represents '0' with '-8314'
c Var 'aux2174' direct represents '1' with '8314'
c Var 'aux2174' order represents '1' with '1'
c Var 'aux2174' order represents '0' with '-8314'
c Encoding variable: aux2175 with domain: bool (representing constraint ((aux869 + aux872 + aux873)<=1))
c Var 'aux2175' direct represents '0' with '-8315'
c Var 'aux2175' direct represents '1' with '8315'
c Var 'aux2175' order represents '1' with '1'
c Var 'aux2175' order represents '0' with '-8315'
c Encoding variable: aux2176 with domain: bool (representing constraint (1<=(aux869 + aux872 + aux873)))
c Var 'aux2176' direct represents '0' with '-8316'
c Var 'aux2176' direct represents '1' with '8316'
c Var 'aux2176' order represents '1' with '1'
c Var 'aux2176' order represents '0' with '-8316'
c Encoding variable: aux2177 with domain: bool (representing constraint ((aux875 + aux878 + aux879)<=1))
c Var 'aux2177' direct represents '0' with '-8317'
c Var 'aux2177' direct represents '1' with '8317'
c Var 'aux2177' order represents '1' with '1'
c Var 'aux2177' order represents '0' with '-8317'
c Encoding variable: aux2178 with domain: bool (representing constraint (1<=(aux875 + aux878 + aux879)))
c Var 'aux2178' direct represents '0' with '-8318'
c Var 'aux2178' direct represents '1' with '8318'
c Var 'aux2178' order represents '1' with '1'
c Var 'aux2178' order represents '0' with '-8318'
c Encoding variable: aux2179 with domain: bool (representing constraint ((aux881 + aux884 + aux885)<=1))
c Var 'aux2179' direct represents '0' with '-8319'
c Var 'aux2179' direct represents '1' with '8319'
c Var 'aux2179' order represents '1' with '1'
c Var 'aux2179' order represents '0' with '-8319'
c Encoding variable: aux2180 with domain: bool (representing constraint (1<=(aux881 + aux884 + aux885)))
c Var 'aux2180' direct represents '0' with '-8320'
c Var 'aux2180' direct represents '1' with '8320'
c Var 'aux2180' order represents '1' with '1'
c Var 'aux2180' order represents '0' with '-8320'
c Encoding variable: aux2181 with domain: bool (representing constraint ((aux887 + aux890 + aux891)<=1))
c Var 'aux2181' direct represents '0' with '-8321'
c Var 'aux2181' direct represents '1' with '8321'
c Var 'aux2181' order represents '1' with '1'
c Var 'aux2181' order represents '0' with '-8321'
c Encoding variable: aux2182 with domain: bool (representing constraint (1<=(aux887 + aux890 + aux891)))
c Var 'aux2182' direct represents '0' with '-8322'
c Var 'aux2182' direct represents '1' with '8322'
c Var 'aux2182' order represents '1' with '1'
c Var 'aux2182' order represents '0' with '-8322'
c Encoding variable: aux2183 with domain: bool (representing constraint ((aux893 + aux896 + aux897)<=1))
c Var 'aux2183' direct represents '0' with '-8323'
c Var 'aux2183' direct represents '1' with '8323'
c Var 'aux2183' order represents '1' with '1'
c Var 'aux2183' order represents '0' with '-8323'
c Encoding variable: aux2184 with domain: bool (representing constraint (1<=(aux893 + aux896 + aux897)))
c Var 'aux2184' direct represents '0' with '-8324'
c Var 'aux2184' direct represents '1' with '8324'
c Var 'aux2184' order represents '1' with '1'
c Var 'aux2184' order represents '0' with '-8324'
c Encoding variable: aux2185 with domain: bool (representing constraint ((aux899 + aux902 + aux903)<=1))
c Var 'aux2185' direct represents '0' with '-8325'
c Var 'aux2185' direct represents '1' with '8325'
c Var 'aux2185' order represents '1' with '1'
c Var 'aux2185' order represents '0' with '-8325'
c Encoding variable: aux2186 with domain: bool (representing constraint (1<=(aux899 + aux902 + aux903)))
c Var 'aux2186' direct represents '0' with '-8326'
c Var 'aux2186' direct represents '1' with '8326'
c Var 'aux2186' order represents '1' with '1'
c Var 'aux2186' order represents '0' with '-8326'
c Encoding variable: aux2187 with domain: bool (representing constraint ((aux905 + aux908 + aux909)<=1))
c Var 'aux2187' direct represents '0' with '-8327'
c Var 'aux2187' direct represents '1' with '8327'
c Var 'aux2187' order represents '1' with '1'
c Var 'aux2187' order represents '0' with '-8327'
c Encoding variable: aux2188 with domain: bool (representing constraint (1<=(aux905 + aux908 + aux909)))
c Var 'aux2188' direct represents '0' with '-8328'
c Var 'aux2188' direct represents '1' with '8328'
c Var 'aux2188' order represents '1' with '1'
c Var 'aux2188' order represents '0' with '-8328'
c Encoding variable: aux2189 with domain: bool (representing constraint ((aux911 + aux914 + aux915)<=1))
c Var 'aux2189' direct represents '0' with '-8329'
c Var 'aux2189' direct represents '1' with '8329'
c Var 'aux2189' order represents '1' with '1'
c Var 'aux2189' order represents '0' with '-8329'
c Encoding variable: aux2190 with domain: bool (representing constraint (1<=(aux911 + aux914 + aux915)))
c Var 'aux2190' direct represents '0' with '-8330'
c Var 'aux2190' direct represents '1' with '8330'
c Var 'aux2190' order represents '1' with '1'
c Var 'aux2190' order represents '0' with '-8330'
c Encoding variable: aux2191 with domain: bool (representing constraint ((aux917 + aux920 + aux921)<=1))
c Var 'aux2191' direct represents '0' with '-8331'
c Var 'aux2191' direct represents '1' with '8331'
c Var 'aux2191' order represents '1' with '1'
c Var 'aux2191' order represents '0' with '-8331'
c Encoding variable: aux2192 with domain: bool (representing constraint (1<=(aux917 + aux920 + aux921)))
c Var 'aux2192' direct represents '0' with '-8332'
c Var 'aux2192' direct represents '1' with '8332'
c Var 'aux2192' order represents '1' with '1'
c Var 'aux2192' order represents '0' with '-8332'
c Encoding variable: aux2193 with domain: bool (representing constraint ((aux923 + aux926 + aux927)<=1))
c Var 'aux2193' direct represents '0' with '-8333'
c Var 'aux2193' direct represents '1' with '8333'
c Var 'aux2193' order represents '1' with '1'
c Var 'aux2193' order represents '0' with '-8333'
c Encoding variable: aux2194 with domain: bool (representing constraint (1<=(aux923 + aux926 + aux927)))
c Var 'aux2194' direct represents '0' with '-8334'
c Var 'aux2194' direct represents '1' with '8334'
c Var 'aux2194' order represents '1' with '1'
c Var 'aux2194' order represents '0' with '-8334'
c Encoding variable: aux2195 with domain: bool (representing constraint ((aux929 + aux932 + aux933)<=1))
c Var 'aux2195' direct represents '0' with '-8335'
c Var 'aux2195' direct represents '1' with '8335'
c Var 'aux2195' order represents '1' with '1'
c Var 'aux2195' order represents '0' with '-8335'
c Encoding variable: aux2196 with domain: bool (representing constraint (1<=(aux929 + aux932 + aux933)))
c Var 'aux2196' direct represents '0' with '-8336'
c Var 'aux2196' direct represents '1' with '8336'
c Var 'aux2196' order represents '1' with '1'
c Var 'aux2196' order represents '0' with '-8336'
c Encoding variable: aux2197 with domain: bool (representing constraint ((aux935 + aux938 + aux939)<=1))
c Var 'aux2197' direct represents '0' with '-8337'
c Var 'aux2197' direct represents '1' with '8337'
c Var 'aux2197' order represents '1' with '1'
c Var 'aux2197' order represents '0' with '-8337'
c Encoding variable: aux2198 with domain: bool (representing constraint (1<=(aux935 + aux938 + aux939)))
c Var 'aux2198' direct represents '0' with '-8338'
c Var 'aux2198' direct represents '1' with '8338'
c Var 'aux2198' order represents '1' with '1'
c Var 'aux2198' order represents '0' with '-8338'
c Encoding variable: aux2199 with domain: bool (representing constraint ((aux941 + aux944 + aux945)<=1))
c Var 'aux2199' direct represents '0' with '-8339'
c Var 'aux2199' direct represents '1' with '8339'
c Var 'aux2199' order represents '1' with '1'
c Var 'aux2199' order represents '0' with '-8339'
c Encoding variable: aux2200 with domain: bool (representing constraint (1<=(aux941 + aux944 + aux945)))
c Var 'aux2200' direct represents '0' with '-8340'
c Var 'aux2200' direct represents '1' with '8340'
c Var 'aux2200' order represents '1' with '1'
c Var 'aux2200' order represents '0' with '-8340'
c Encoding variable: aux2201 with domain: bool (representing constraint ((aux947 + aux950 + aux951)<=1))
c Var 'aux2201' direct represents '0' with '-8341'
c Var 'aux2201' direct represents '1' with '8341'
c Var 'aux2201' order represents '1' with '1'
c Var 'aux2201' order represents '0' with '-8341'
c Encoding variable: aux2202 with domain: bool (representing constraint (1<=(aux947 + aux950 + aux951)))
c Var 'aux2202' direct represents '0' with '-8342'
c Var 'aux2202' direct represents '1' with '8342'
c Var 'aux2202' order represents '1' with '1'
c Var 'aux2202' order represents '0' with '-8342'
c Encoding variable: aux2203 with domain: bool (representing constraint ((aux953 + aux956 + aux957)<=1))
c Var 'aux2203' direct represents '0' with '-8343'
c Var 'aux2203' direct represents '1' with '8343'
c Var 'aux2203' order represents '1' with '1'
c Var 'aux2203' order represents '0' with '-8343'
c Encoding variable: aux2204 with domain: bool (representing constraint (1<=(aux953 + aux956 + aux957)))
c Var 'aux2204' direct represents '0' with '-8344'
c Var 'aux2204' direct represents '1' with '8344'
c Var 'aux2204' order represents '1' with '1'
c Var 'aux2204' order represents '0' with '-8344'
c Encoding variable: aux2205 with domain: bool (representing constraint ((aux959 + aux962 + aux963)<=1))
c Var 'aux2205' direct represents '0' with '-8345'
c Var 'aux2205' direct represents '1' with '8345'
c Var 'aux2205' order represents '1' with '1'
c Var 'aux2205' order represents '0' with '-8345'
c Encoding variable: aux2206 with domain: bool (representing constraint (1<=(aux959 + aux962 + aux963)))
c Var 'aux2206' direct represents '0' with '-8346'
c Var 'aux2206' direct represents '1' with '8346'
c Var 'aux2206' order represents '1' with '1'
c Var 'aux2206' order represents '0' with '-8346'
c Encoding variable: aux2207 with domain: bool (representing constraint ((aux965 + aux968 + aux969)<=1))
c Var 'aux2207' direct represents '0' with '-8347'
c Var 'aux2207' direct represents '1' with '8347'
c Var 'aux2207' order represents '1' with '1'
c Var 'aux2207' order represents '0' with '-8347'
c Encoding variable: aux2208 with domain: bool (representing constraint (1<=(aux965 + aux968 + aux969)))
c Var 'aux2208' direct represents '0' with '-8348'
c Var 'aux2208' direct represents '1' with '8348'
c Var 'aux2208' order represents '1' with '1'
c Var 'aux2208' order represents '0' with '-8348'
c Encoding variable: aux2209 with domain: bool (representing constraint ((aux971 + aux974 + aux975)<=1))
c Var 'aux2209' direct represents '0' with '-8349'
c Var 'aux2209' direct represents '1' with '8349'
c Var 'aux2209' order represents '1' with '1'
c Var 'aux2209' order represents '0' with '-8349'
c Encoding variable: aux2210 with domain: bool (representing constraint (1<=(aux971 + aux974 + aux975)))
c Var 'aux2210' direct represents '0' with '-8350'
c Var 'aux2210' direct represents '1' with '8350'
c Var 'aux2210' order represents '1' with '1'
c Var 'aux2210' order represents '0' with '-8350'
c Encoding variable: aux2211 with domain: bool (representing constraint ((aux977 + aux980 + aux981)<=1))
c Var 'aux2211' direct represents '0' with '-8351'
c Var 'aux2211' direct represents '1' with '8351'
c Var 'aux2211' order represents '1' with '1'
c Var 'aux2211' order represents '0' with '-8351'
c Encoding variable: aux2212 with domain: bool (representing constraint (1<=(aux977 + aux980 + aux981)))
c Var 'aux2212' direct represents '0' with '-8352'
c Var 'aux2212' direct represents '1' with '8352'
c Var 'aux2212' order represents '1' with '1'
c Var 'aux2212' order represents '0' with '-8352'
c Encoding variable: aux2213 with domain: bool (representing constraint ((aux983 + aux986 + aux987)<=1))
c Var 'aux2213' direct represents '0' with '-8353'
c Var 'aux2213' direct represents '1' with '8353'
c Var 'aux2213' order represents '1' with '1'
c Var 'aux2213' order represents '0' with '-8353'
c Encoding variable: aux2214 with domain: bool (representing constraint (1<=(aux983 + aux986 + aux987)))
c Var 'aux2214' direct represents '0' with '-8354'
c Var 'aux2214' direct represents '1' with '8354'
c Var 'aux2214' order represents '1' with '1'
c Var 'aux2214' order represents '0' with '-8354'
c Encoding variable: aux2215 with domain: bool (representing constraint ((aux989 + aux992 + aux993)<=1))
c Var 'aux2215' direct represents '0' with '-8355'
c Var 'aux2215' direct represents '1' with '8355'
c Var 'aux2215' order represents '1' with '1'
c Var 'aux2215' order represents '0' with '-8355'
c Encoding variable: aux2216 with domain: bool (representing constraint (1<=(aux989 + aux992 + aux993)))
c Var 'aux2216' direct represents '0' with '-8356'
c Var 'aux2216' direct represents '1' with '8356'
c Var 'aux2216' order represents '1' with '1'
c Var 'aux2216' order represents '0' with '-8356'
c Encoding variable: aux2217 with domain: bool (representing constraint ((aux995 + aux998 + aux999)<=1))
c Var 'aux2217' direct represents '0' with '-8357'
c Var 'aux2217' direct represents '1' with '8357'
c Var 'aux2217' order represents '1' with '1'
c Var 'aux2217' order represents '0' with '-8357'
c Encoding variable: aux2218 with domain: bool (representing constraint (1<=(aux995 + aux998 + aux999)))
c Var 'aux2218' direct represents '0' with '-8358'
c Var 'aux2218' direct represents '1' with '8358'
c Var 'aux2218' order represents '1' with '1'
c Var 'aux2218' order represents '0' with '-8358'
c Encoding variable: aux2219 with domain: bool (representing constraint ((aux1001 + aux1004 + aux1005)<=1))
c Var 'aux2219' direct represents '0' with '-8359'
c Var 'aux2219' direct represents '1' with '8359'
c Var 'aux2219' order represents '1' with '1'
c Var 'aux2219' order represents '0' with '-8359'
c Encoding variable: aux2220 with domain: bool (representing constraint (1<=(aux1001 + aux1004 + aux1005)))
c Var 'aux2220' direct represents '0' with '-8360'
c Var 'aux2220' direct represents '1' with '8360'
c Var 'aux2220' order represents '1' with '1'
c Var 'aux2220' order represents '0' with '-8360'
c Encoding variable: aux2221 with domain: bool (representing constraint ((aux1007 + aux1010 + aux1011)<=1))
c Var 'aux2221' direct represents '0' with '-8361'
c Var 'aux2221' direct represents '1' with '8361'
c Var 'aux2221' order represents '1' with '1'
c Var 'aux2221' order represents '0' with '-8361'
c Encoding variable: aux2222 with domain: bool (representing constraint (1<=(aux1007 + aux1010 + aux1011)))
c Var 'aux2222' direct represents '0' with '-8362'
c Var 'aux2222' direct represents '1' with '8362'
c Var 'aux2222' order represents '1' with '1'
c Var 'aux2222' order represents '0' with '-8362'
c Encoding variable: aux2223 with domain: bool (representing constraint ((aux1013 + aux1016 + aux1017)<=1))
c Var 'aux2223' direct represents '0' with '-8363'
c Var 'aux2223' direct represents '1' with '8363'
c Var 'aux2223' order represents '1' with '1'
c Var 'aux2223' order represents '0' with '-8363'
c Encoding variable: aux2224 with domain: bool (representing constraint (1<=(aux1013 + aux1016 + aux1017)))
c Var 'aux2224' direct represents '0' with '-8364'
c Var 'aux2224' direct represents '1' with '8364'
c Var 'aux2224' order represents '1' with '1'
c Var 'aux2224' order represents '0' with '-8364'
c Encoding variable: aux2225 with domain: bool (representing constraint ((aux1019 + aux1022 + aux1023)<=1))
c Var 'aux2225' direct represents '0' with '-8365'
c Var 'aux2225' direct represents '1' with '8365'
c Var 'aux2225' order represents '1' with '1'
c Var 'aux2225' order represents '0' with '-8365'
c Encoding variable: aux2226 with domain: bool (representing constraint (1<=(aux1019 + aux1022 + aux1023)))
c Var 'aux2226' direct represents '0' with '-8366'
c Var 'aux2226' direct represents '1' with '8366'
c Var 'aux2226' order represents '1' with '1'
c Var 'aux2226' order represents '0' with '-8366'
c Encoding variable: aux2227 with domain: bool (representing constraint ((aux1025 + aux1028 + aux1029)<=1))
c Var 'aux2227' direct represents '0' with '-8367'
c Var 'aux2227' direct represents '1' with '8367'
c Var 'aux2227' order represents '1' with '1'
c Var 'aux2227' order represents '0' with '-8367'
c Encoding variable: aux2228 with domain: bool (representing constraint (1<=(aux1025 + aux1028 + aux1029)))
c Var 'aux2228' direct represents '0' with '-8368'
c Var 'aux2228' direct represents '1' with '8368'
c Var 'aux2228' order represents '1' with '1'
c Var 'aux2228' order represents '0' with '-8368'
c Encoding variable: aux2229 with domain: bool (representing constraint ((aux1031 + aux1034 + aux1035)<=1))
c Var 'aux2229' direct represents '0' with '-8369'
c Var 'aux2229' direct represents '1' with '8369'
c Var 'aux2229' order represents '1' with '1'
c Var 'aux2229' order represents '0' with '-8369'
c Encoding variable: aux2230 with domain: bool (representing constraint (1<=(aux1031 + aux1034 + aux1035)))
c Var 'aux2230' direct represents '0' with '-8370'
c Var 'aux2230' direct represents '1' with '8370'
c Var 'aux2230' order represents '1' with '1'
c Var 'aux2230' order represents '0' with '-8370'
c Encoding variable: aux2231 with domain: bool (representing constraint ((aux1037 + aux1040 + aux1041)<=1))
c Var 'aux2231' direct represents '0' with '-8371'
c Var 'aux2231' direct represents '1' with '8371'
c Var 'aux2231' order represents '1' with '1'
c Var 'aux2231' order represents '0' with '-8371'
c Encoding variable: aux2232 with domain: bool (representing constraint (1<=(aux1037 + aux1040 + aux1041)))
c Var 'aux2232' direct represents '0' with '-8372'
c Var 'aux2232' direct represents '1' with '8372'
c Var 'aux2232' order represents '1' with '1'
c Var 'aux2232' order represents '0' with '-8372'
c Encoding variable: aux2233 with domain: bool (representing constraint ((aux1043 + aux1046 + aux1047)<=1))
c Var 'aux2233' direct represents '0' with '-8373'
c Var 'aux2233' direct represents '1' with '8373'
c Var 'aux2233' order represents '1' with '1'
c Var 'aux2233' order represents '0' with '-8373'
c Encoding variable: aux2234 with domain: bool (representing constraint (1<=(aux1043 + aux1046 + aux1047)))
c Var 'aux2234' direct represents '0' with '-8374'
c Var 'aux2234' direct represents '1' with '8374'
c Var 'aux2234' order represents '1' with '1'
c Var 'aux2234' order represents '0' with '-8374'
c Encoding variable: aux2235 with domain: bool (representing constraint ((aux1049 + aux1052 + aux1053)<=1))
c Var 'aux2235' direct represents '0' with '-8375'
c Var 'aux2235' direct represents '1' with '8375'
c Var 'aux2235' order represents '1' with '1'
c Var 'aux2235' order represents '0' with '-8375'
c Encoding variable: aux2236 with domain: bool (representing constraint (1<=(aux1049 + aux1052 + aux1053)))
c Var 'aux2236' direct represents '0' with '-8376'
c Var 'aux2236' direct represents '1' with '8376'
c Var 'aux2236' order represents '1' with '1'
c Var 'aux2236' order represents '0' with '-8376'
c Encoding variable: aux2237 with domain: bool (representing constraint ((aux1055 + aux1058 + aux1059)<=1))
c Var 'aux2237' direct represents '0' with '-8377'
c Var 'aux2237' direct represents '1' with '8377'
c Var 'aux2237' order represents '1' with '1'
c Var 'aux2237' order represents '0' with '-8377'
c Encoding variable: aux2238 with domain: bool (representing constraint (1<=(aux1055 + aux1058 + aux1059)))
c Var 'aux2238' direct represents '0' with '-8378'
c Var 'aux2238' direct represents '1' with '8378'
c Var 'aux2238' order represents '1' with '1'
c Var 'aux2238' order represents '0' with '-8378'
c Encoding variable: aux2239 with domain: bool (representing constraint ((aux1061 + aux1064 + aux1065)<=1))
c Var 'aux2239' direct represents '0' with '-8379'
c Var 'aux2239' direct represents '1' with '8379'
c Var 'aux2239' order represents '1' with '1'
c Var 'aux2239' order represents '0' with '-8379'
c Encoding variable: aux2240 with domain: bool (representing constraint (1<=(aux1061 + aux1064 + aux1065)))
c Var 'aux2240' direct represents '0' with '-8380'
c Var 'aux2240' direct represents '1' with '8380'
c Var 'aux2240' order represents '1' with '1'
c Var 'aux2240' order represents '0' with '-8380'
c Encoding variable: aux2241 with domain: bool (representing constraint ((aux1067 + aux1070 + aux1071)<=1))
c Var 'aux2241' direct represents '0' with '-8381'
c Var 'aux2241' direct represents '1' with '8381'
c Var 'aux2241' order represents '1' with '1'
c Var 'aux2241' order represents '0' with '-8381'
c Encoding variable: aux2242 with domain: bool (representing constraint (1<=(aux1067 + aux1070 + aux1071)))
c Var 'aux2242' direct represents '0' with '-8382'
c Var 'aux2242' direct represents '1' with '8382'
c Var 'aux2242' order represents '1' with '1'
c Var 'aux2242' order represents '0' with '-8382'
c Encoding variable: aux2243 with domain: bool (representing constraint ((aux1073 + aux1076 + aux1077)<=1))
c Var 'aux2243' direct represents '0' with '-8383'
c Var 'aux2243' direct represents '1' with '8383'
c Var 'aux2243' order represents '1' with '1'
c Var 'aux2243' order represents '0' with '-8383'
c Encoding variable: aux2244 with domain: bool (representing constraint (1<=(aux1073 + aux1076 + aux1077)))
c Var 'aux2244' direct represents '0' with '-8384'
c Var 'aux2244' direct represents '1' with '8384'
c Var 'aux2244' order represents '1' with '1'
c Var 'aux2244' order represents '0' with '-8384'
c Encoding variable: aux2245 with domain: bool (representing constraint ((aux1079 + aux1082 + aux1083)<=1))
c Var 'aux2245' direct represents '0' with '-8385'
c Var 'aux2245' direct represents '1' with '8385'
c Var 'aux2245' order represents '1' with '1'
c Var 'aux2245' order represents '0' with '-8385'
c Encoding variable: aux2246 with domain: bool (representing constraint (1<=(aux1079 + aux1082 + aux1083)))
c Var 'aux2246' direct represents '0' with '-8386'
c Var 'aux2246' direct represents '1' with '8386'
c Var 'aux2246' order represents '1' with '1'
c Var 'aux2246' order represents '0' with '-8386'
c Encoding variable: aux2247 with domain: bool (representing constraint ((aux1085 + aux1088 + aux1089)<=1))
c Var 'aux2247' direct represents '0' with '-8387'
c Var 'aux2247' direct represents '1' with '8387'
c Var 'aux2247' order represents '1' with '1'
c Var 'aux2247' order represents '0' with '-8387'
c Encoding variable: aux2248 with domain: bool (representing constraint (1<=(aux1085 + aux1088 + aux1089)))
c Var 'aux2248' direct represents '0' with '-8388'
c Var 'aux2248' direct represents '1' with '8388'
c Var 'aux2248' order represents '1' with '1'
c Var 'aux2248' order represents '0' with '-8388'
c Encoding variable: aux2249 with domain: bool (representing constraint ((aux1091 + aux1094 + aux1095)<=1))
c Var 'aux2249' direct represents '0' with '-8389'
c Var 'aux2249' direct represents '1' with '8389'
c Var 'aux2249' order represents '1' with '1'
c Var 'aux2249' order represents '0' with '-8389'
c Encoding variable: aux2250 with domain: bool (representing constraint (1<=(aux1091 + aux1094 + aux1095)))
c Var 'aux2250' direct represents '0' with '-8390'
c Var 'aux2250' direct represents '1' with '8390'
c Var 'aux2250' order represents '1' with '1'
c Var 'aux2250' order represents '0' with '-8390'
c Encoding variable: aux2251 with domain: bool (representing constraint ((aux1097 + aux1100 + aux1101)<=1))
c Var 'aux2251' direct represents '0' with '-8391'
c Var 'aux2251' direct represents '1' with '8391'
c Var 'aux2251' order represents '1' with '1'
c Var 'aux2251' order represents '0' with '-8391'
c Encoding variable: aux2252 with domain: bool (representing constraint (1<=(aux1097 + aux1100 + aux1101)))
c Var 'aux2252' direct represents '0' with '-8392'
c Var 'aux2252' direct represents '1' with '8392'
c Var 'aux2252' order represents '1' with '1'
c Var 'aux2252' order represents '0' with '-8392'
c Encoding variable: aux2253 with domain: bool (representing constraint ((aux1103 + aux1106 + aux1107)<=1))
c Var 'aux2253' direct represents '0' with '-8393'
c Var 'aux2253' direct represents '1' with '8393'
c Var 'aux2253' order represents '1' with '1'
c Var 'aux2253' order represents '0' with '-8393'
c Encoding variable: aux2254 with domain: bool (representing constraint (1<=(aux1103 + aux1106 + aux1107)))
c Var 'aux2254' direct represents '0' with '-8394'
c Var 'aux2254' direct represents '1' with '8394'
c Var 'aux2254' order represents '1' with '1'
c Var 'aux2254' order represents '0' with '-8394'
c Encoding variable: aux2255 with domain: bool (representing constraint ((aux1109 + aux1112 + aux1113)<=1))
c Var 'aux2255' direct represents '0' with '-8395'
c Var 'aux2255' direct represents '1' with '8395'
c Var 'aux2255' order represents '1' with '1'
c Var 'aux2255' order represents '0' with '-8395'
c Encoding variable: aux2256 with domain: bool (representing constraint (1<=(aux1109 + aux1112 + aux1113)))
c Var 'aux2256' direct represents '0' with '-8396'
c Var 'aux2256' direct represents '1' with '8396'
c Var 'aux2256' order represents '1' with '1'
c Var 'aux2256' order represents '0' with '-8396'
c Encoding variable: aux2257 with domain: bool (representing constraint ((aux1115 + aux1118 + aux1119)<=1))
c Var 'aux2257' direct represents '0' with '-8397'
c Var 'aux2257' direct represents '1' with '8397'
c Var 'aux2257' order represents '1' with '1'
c Var 'aux2257' order represents '0' with '-8397'
c Encoding variable: aux2258 with domain: bool (representing constraint (1<=(aux1115 + aux1118 + aux1119)))
c Var 'aux2258' direct represents '0' with '-8398'
c Var 'aux2258' direct represents '1' with '8398'
c Var 'aux2258' order represents '1' with '1'
c Var 'aux2258' order represents '0' with '-8398'
c Encoding variable: aux2259 with domain: bool (representing constraint ((aux1121 + aux1124 + aux1125)<=1))
c Var 'aux2259' direct represents '0' with '-8399'
c Var 'aux2259' direct represents '1' with '8399'
c Var 'aux2259' order represents '1' with '1'
c Var 'aux2259' order represents '0' with '-8399'
c Encoding variable: aux2260 with domain: bool (representing constraint (1<=(aux1121 + aux1124 + aux1125)))
c Var 'aux2260' direct represents '0' with '-8400'
c Var 'aux2260' direct represents '1' with '8400'
c Var 'aux2260' order represents '1' with '1'
c Var 'aux2260' order represents '0' with '-8400'
c Encoding variable: aux2261 with domain: bool (representing constraint ((aux1127 + aux1130 + aux1131)<=1))
c Var 'aux2261' direct represents '0' with '-8401'
c Var 'aux2261' direct represents '1' with '8401'
c Var 'aux2261' order represents '1' with '1'
c Var 'aux2261' order represents '0' with '-8401'
c Encoding variable: aux2262 with domain: bool (representing constraint (1<=(aux1127 + aux1130 + aux1131)))
c Var 'aux2262' direct represents '0' with '-8402'
c Var 'aux2262' direct represents '1' with '8402'
c Var 'aux2262' order represents '1' with '1'
c Var 'aux2262' order represents '0' with '-8402'
c Encoding variable: aux2263 with domain: bool (representing constraint ((aux1133 + aux1136 + aux1137)<=1))
c Var 'aux2263' direct represents '0' with '-8403'
c Var 'aux2263' direct represents '1' with '8403'
c Var 'aux2263' order represents '1' with '1'
c Var 'aux2263' order represents '0' with '-8403'
c Encoding variable: aux2264 with domain: bool (representing constraint (1<=(aux1133 + aux1136 + aux1137)))
c Var 'aux2264' direct represents '0' with '-8404'
c Var 'aux2264' direct represents '1' with '8404'
c Var 'aux2264' order represents '1' with '1'
c Var 'aux2264' order represents '0' with '-8404'
c Encoding variable: aux2265 with domain: bool (representing constraint ((aux1139 + aux1142 + aux1143)<=1))
c Var 'aux2265' direct represents '0' with '-8405'
c Var 'aux2265' direct represents '1' with '8405'
c Var 'aux2265' order represents '1' with '1'
c Var 'aux2265' order represents '0' with '-8405'
c Encoding variable: aux2266 with domain: bool (representing constraint (1<=(aux1139 + aux1142 + aux1143)))
c Var 'aux2266' direct represents '0' with '-8406'
c Var 'aux2266' direct represents '1' with '8406'
c Var 'aux2266' order represents '1' with '1'
c Var 'aux2266' order represents '0' with '-8406'
c Encoding variable: aux2267 with domain: bool (representing constraint ((aux1145 + aux1148 + aux1149)<=1))
c Var 'aux2267' direct represents '0' with '-8407'
c Var 'aux2267' direct represents '1' with '8407'
c Var 'aux2267' order represents '1' with '1'
c Var 'aux2267' order represents '0' with '-8407'
c Encoding variable: aux2268 with domain: bool (representing constraint (1<=(aux1145 + aux1148 + aux1149)))
c Var 'aux2268' direct represents '0' with '-8408'
c Var 'aux2268' direct represents '1' with '8408'
c Var 'aux2268' order represents '1' with '1'
c Var 'aux2268' order represents '0' with '-8408'
c Encoding variable: aux2269 with domain: bool (representing constraint ((aux1151 + aux1154 + aux1155)<=1))
c Var 'aux2269' direct represents '0' with '-8409'
c Var 'aux2269' direct represents '1' with '8409'
c Var 'aux2269' order represents '1' with '1'
c Var 'aux2269' order represents '0' with '-8409'
c Encoding variable: aux2270 with domain: bool (representing constraint (1<=(aux1151 + aux1154 + aux1155)))
c Var 'aux2270' direct represents '0' with '-8410'
c Var 'aux2270' direct represents '1' with '8410'
c Var 'aux2270' order represents '1' with '1'
c Var 'aux2270' order represents '0' with '-8410'
c Encoding variable: aux2271 with domain: bool (representing constraint ((aux1157 + aux1160 + aux1161)<=1))
c Var 'aux2271' direct represents '0' with '-8411'
c Var 'aux2271' direct represents '1' with '8411'
c Var 'aux2271' order represents '1' with '1'
c Var 'aux2271' order represents '0' with '-8411'
c Encoding variable: aux2272 with domain: bool (representing constraint (1<=(aux1157 + aux1160 + aux1161)))
c Var 'aux2272' direct represents '0' with '-8412'
c Var 'aux2272' direct represents '1' with '8412'
c Var 'aux2272' order represents '1' with '1'
c Var 'aux2272' order represents '0' with '-8412'
c Encoding variable: aux2273 with domain: bool (representing constraint ((aux1163 + aux1166 + aux1167)<=1))
c Var 'aux2273' direct represents '0' with '-8413'
c Var 'aux2273' direct represents '1' with '8413'
c Var 'aux2273' order represents '1' with '1'
c Var 'aux2273' order represents '0' with '-8413'
c Encoding variable: aux2274 with domain: bool (representing constraint (1<=(aux1163 + aux1166 + aux1167)))
c Var 'aux2274' direct represents '0' with '-8414'
c Var 'aux2274' direct represents '1' with '8414'
c Var 'aux2274' order represents '1' with '1'
c Var 'aux2274' order represents '0' with '-8414'
c Encoding variable: aux2275 with domain: bool (representing constraint ((aux1169 + aux1172 + aux1173)<=1))
c Var 'aux2275' direct represents '0' with '-8415'
c Var 'aux2275' direct represents '1' with '8415'
c Var 'aux2275' order represents '1' with '1'
c Var 'aux2275' order represents '0' with '-8415'
c Encoding variable: aux2276 with domain: bool (representing constraint (1<=(aux1169 + aux1172 + aux1173)))
c Var 'aux2276' direct represents '0' with '-8416'
c Var 'aux2276' direct represents '1' with '8416'
c Var 'aux2276' order represents '1' with '1'
c Var 'aux2276' order represents '0' with '-8416'
c Encoding variable: aux2277 with domain: bool (representing constraint ((aux1175 + aux1178 + aux1179)<=1))
c Var 'aux2277' direct represents '0' with '-8417'
c Var 'aux2277' direct represents '1' with '8417'
c Var 'aux2277' order represents '1' with '1'
c Var 'aux2277' order represents '0' with '-8417'
c Encoding variable: aux2278 with domain: bool (representing constraint (1<=(aux1175 + aux1178 + aux1179)))
c Var 'aux2278' direct represents '0' with '-8418'
c Var 'aux2278' direct represents '1' with '8418'
c Var 'aux2278' order represents '1' with '1'
c Var 'aux2278' order represents '0' with '-8418'
c Encoding variable: aux2279 with domain: bool (representing constraint ((aux1181 + aux1184 + aux1185)<=1))
c Var 'aux2279' direct represents '0' with '-8419'
c Var 'aux2279' direct represents '1' with '8419'
c Var 'aux2279' order represents '1' with '1'
c Var 'aux2279' order represents '0' with '-8419'
c Encoding variable: aux2280 with domain: bool (representing constraint (1<=(aux1181 + aux1184 + aux1185)))
c Var 'aux2280' direct represents '0' with '-8420'
c Var 'aux2280' direct represents '1' with '8420'
c Var 'aux2280' order represents '1' with '1'
c Var 'aux2280' order represents '0' with '-8420'
c Encoding variable: aux2281 with domain: bool (representing constraint ((aux1187 + aux1190 + aux1191)<=1))
c Var 'aux2281' direct represents '0' with '-8421'
c Var 'aux2281' direct represents '1' with '8421'
c Var 'aux2281' order represents '1' with '1'
c Var 'aux2281' order represents '0' with '-8421'
c Encoding variable: aux2282 with domain: bool (representing constraint (1<=(aux1187 + aux1190 + aux1191)))
c Var 'aux2282' direct represents '0' with '-8422'
c Var 'aux2282' direct represents '1' with '8422'
c Var 'aux2282' order represents '1' with '1'
c Var 'aux2282' order represents '0' with '-8422'
c Encoding variable: aux2283 with domain: bool (representing constraint ((aux1193 + aux1196 + aux1197)<=1))
c Var 'aux2283' direct represents '0' with '-8423'
c Var 'aux2283' direct represents '1' with '8423'
c Var 'aux2283' order represents '1' with '1'
c Var 'aux2283' order represents '0' with '-8423'
c Encoding variable: aux2284 with domain: bool (representing constraint (1<=(aux1193 + aux1196 + aux1197)))
c Var 'aux2284' direct represents '0' with '-8424'
c Var 'aux2284' direct represents '1' with '8424'
c Var 'aux2284' order represents '1' with '1'
c Var 'aux2284' order represents '0' with '-8424'
c Encoding variable: aux2285 with domain: bool (representing constraint ((aux1199 + aux1202 + aux1203)<=1))
c Var 'aux2285' direct represents '0' with '-8425'
c Var 'aux2285' direct represents '1' with '8425'
c Var 'aux2285' order represents '1' with '1'
c Var 'aux2285' order represents '0' with '-8425'
c Encoding variable: aux2286 with domain: bool (representing constraint (1<=(aux1199 + aux1202 + aux1203)))
c Var 'aux2286' direct represents '0' with '-8426'
c Var 'aux2286' direct represents '1' with '8426'
c Var 'aux2286' order represents '1' with '1'
c Var 'aux2286' order represents '0' with '-8426'
c Encoding variable: aux2287 with domain: bool (representing constraint ((aux1205 + aux1208 + aux1209)<=1))
c Var 'aux2287' direct represents '0' with '-8427'
c Var 'aux2287' direct represents '1' with '8427'
c Var 'aux2287' order represents '1' with '1'
c Var 'aux2287' order represents '0' with '-8427'
c Encoding variable: aux2288 with domain: bool (representing constraint (1<=(aux1205 + aux1208 + aux1209)))
c Var 'aux2288' direct represents '0' with '-8428'
c Var 'aux2288' direct represents '1' with '8428'
c Var 'aux2288' order represents '1' with '1'
c Var 'aux2288' order represents '0' with '-8428'
c Encoding variable: aux2289 with domain: bool (representing constraint ((aux1211 + aux1214 + aux1215)<=1))
c Var 'aux2289' direct represents '0' with '-8429'
c Var 'aux2289' direct represents '1' with '8429'
c Var 'aux2289' order represents '1' with '1'
c Var 'aux2289' order represents '0' with '-8429'
c Encoding variable: aux2290 with domain: bool (representing constraint (1<=(aux1211 + aux1214 + aux1215)))
c Var 'aux2290' direct represents '0' with '-8430'
c Var 'aux2290' direct represents '1' with '8430'
c Var 'aux2290' order represents '1' with '1'
c Var 'aux2290' order represents '0' with '-8430'
c Encoding variable: aux2291 with domain: bool (representing constraint ((aux1217 + aux1220 + aux1221)<=1))
c Var 'aux2291' direct represents '0' with '-8431'
c Var 'aux2291' direct represents '1' with '8431'
c Var 'aux2291' order represents '1' with '1'
c Var 'aux2291' order represents '0' with '-8431'
c Encoding variable: aux2292 with domain: bool (representing constraint (1<=(aux1217 + aux1220 + aux1221)))
c Var 'aux2292' direct represents '0' with '-8432'
c Var 'aux2292' direct represents '1' with '8432'
c Var 'aux2292' order represents '1' with '1'
c Var 'aux2292' order represents '0' with '-8432'
c Encoding variable: aux2293 with domain: bool (representing constraint ((aux1223 + aux1226 + aux1227)<=1))
c Var 'aux2293' direct represents '0' with '-8433'
c Var 'aux2293' direct represents '1' with '8433'
c Var 'aux2293' order represents '1' with '1'
c Var 'aux2293' order represents '0' with '-8433'
c Encoding variable: aux2294 with domain: bool (representing constraint (1<=(aux1223 + aux1226 + aux1227)))
c Var 'aux2294' direct represents '0' with '-8434'
c Var 'aux2294' direct represents '1' with '8434'
c Var 'aux2294' order represents '1' with '1'
c Var 'aux2294' order represents '0' with '-8434'
c Encoding variable: aux2295 with domain: bool (representing constraint ((aux1229 + aux1232 + aux1233)<=1))
c Var 'aux2295' direct represents '0' with '-8435'
c Var 'aux2295' direct represents '1' with '8435'
c Var 'aux2295' order represents '1' with '1'
c Var 'aux2295' order represents '0' with '-8435'
c Encoding variable: aux2296 with domain: bool (representing constraint (1<=(aux1229 + aux1232 + aux1233)))
c Var 'aux2296' direct represents '0' with '-8436'
c Var 'aux2296' direct represents '1' with '8436'
c Var 'aux2296' order represents '1' with '1'
c Var 'aux2296' order represents '0' with '-8436'
c Encoding variable: aux2297 with domain: bool (representing constraint ((aux1235 + aux1238 + aux1239)<=1))
c Var 'aux2297' direct represents '0' with '-8437'
c Var 'aux2297' direct represents '1' with '8437'
c Var 'aux2297' order represents '1' with '1'
c Var 'aux2297' order represents '0' with '-8437'
c Encoding variable: aux2298 with domain: bool (representing constraint (1<=(aux1235 + aux1238 + aux1239)))
c Var 'aux2298' direct represents '0' with '-8438'
c Var 'aux2298' direct represents '1' with '8438'
c Var 'aux2298' order represents '1' with '1'
c Var 'aux2298' order represents '0' with '-8438'
c Encoding variable: aux2299 with domain: bool (representing constraint ((aux1241 + aux1244 + aux1245)<=1))
c Var 'aux2299' direct represents '0' with '-8439'
c Var 'aux2299' direct represents '1' with '8439'
c Var 'aux2299' order represents '1' with '1'
c Var 'aux2299' order represents '0' with '-8439'
c Encoding variable: aux2300 with domain: bool (representing constraint (1<=(aux1241 + aux1244 + aux1245)))
c Var 'aux2300' direct represents '0' with '-8440'
c Var 'aux2300' direct represents '1' with '8440'
c Var 'aux2300' order represents '1' with '1'
c Var 'aux2300' order represents '0' with '-8440'
c Encoding variable: aux2301 with domain: bool (representing constraint ((aux1247 + aux1250 + aux1251)<=1))
c Var 'aux2301' direct represents '0' with '-8441'
c Var 'aux2301' direct represents '1' with '8441'
c Var 'aux2301' order represents '1' with '1'
c Var 'aux2301' order represents '0' with '-8441'
c Encoding variable: aux2302 with domain: bool (representing constraint (1<=(aux1247 + aux1250 + aux1251)))
c Var 'aux2302' direct represents '0' with '-8442'
c Var 'aux2302' direct represents '1' with '8442'
c Var 'aux2302' order represents '1' with '1'
c Var 'aux2302' order represents '0' with '-8442'
c Encoding variable: aux2303 with domain: bool (representing constraint ((aux1253 + aux1256 + aux1257)<=1))
c Var 'aux2303' direct represents '0' with '-8443'
c Var 'aux2303' direct represents '1' with '8443'
c Var 'aux2303' order represents '1' with '1'
c Var 'aux2303' order represents '0' with '-8443'
c Encoding variable: aux2304 with domain: bool (representing constraint (1<=(aux1253 + aux1256 + aux1257)))
c Var 'aux2304' direct represents '0' with '-8444'
c Var 'aux2304' direct represents '1' with '8444'
c Var 'aux2304' order represents '1' with '1'
c Var 'aux2304' order represents '0' with '-8444'
c Encoding variable: aux2305 with domain: bool (representing constraint ((aux1259 + aux1262 + aux1263)<=1))
c Var 'aux2305' direct represents '0' with '-8445'
c Var 'aux2305' direct represents '1' with '8445'
c Var 'aux2305' order represents '1' with '1'
c Var 'aux2305' order represents '0' with '-8445'
c Encoding variable: aux2306 with domain: bool (representing constraint (1<=(aux1259 + aux1262 + aux1263)))
c Var 'aux2306' direct represents '0' with '-8446'
c Var 'aux2306' direct represents '1' with '8446'
c Var 'aux2306' order represents '1' with '1'
c Var 'aux2306' order represents '0' with '-8446'
c Encoding variable: aux2307 with domain: bool (representing constraint ((aux1265 + aux1268 + aux1269)<=1))
c Var 'aux2307' direct represents '0' with '-8447'
c Var 'aux2307' direct represents '1' with '8447'
c Var 'aux2307' order represents '1' with '1'
c Var 'aux2307' order represents '0' with '-8447'
c Encoding variable: aux2308 with domain: bool (representing constraint (1<=(aux1265 + aux1268 + aux1269)))
c Var 'aux2308' direct represents '0' with '-8448'
c Var 'aux2308' direct represents '1' with '8448'
c Var 'aux2308' order represents '1' with '1'
c Var 'aux2308' order represents '0' with '-8448'
c Encoding variable: aux2309 with domain: bool (representing constraint ((aux1271 + aux1274 + aux1275)<=1))
c Var 'aux2309' direct represents '0' with '-8449'
c Var 'aux2309' direct represents '1' with '8449'
c Var 'aux2309' order represents '1' with '1'
c Var 'aux2309' order represents '0' with '-8449'
c Encoding variable: aux2310 with domain: bool (representing constraint (1<=(aux1271 + aux1274 + aux1275)))
c Var 'aux2310' direct represents '0' with '-8450'
c Var 'aux2310' direct represents '1' with '8450'
c Var 'aux2310' order represents '1' with '1'
c Var 'aux2310' order represents '0' with '-8450'
c Encoding variable: aux2311 with domain: bool (representing constraint ((aux1277 + aux1280 + aux1281)<=1))
c Var 'aux2311' direct represents '0' with '-8451'
c Var 'aux2311' direct represents '1' with '8451'
c Var 'aux2311' order represents '1' with '1'
c Var 'aux2311' order represents '0' with '-8451'
c Encoding variable: aux2312 with domain: bool (representing constraint (1<=(aux1277 + aux1280 + aux1281)))
c Var 'aux2312' direct represents '0' with '-8452'
c Var 'aux2312' direct represents '1' with '8452'
c Var 'aux2312' order represents '1' with '1'
c Var 'aux2312' order represents '0' with '-8452'
c Encoding variable: aux2313 with domain: bool (representing constraint ((aux1283 + aux1286 + aux1287)<=1))
c Var 'aux2313' direct represents '0' with '-8453'
c Var 'aux2313' direct represents '1' with '8453'
c Var 'aux2313' order represents '1' with '1'
c Var 'aux2313' order represents '0' with '-8453'
c Encoding variable: aux2314 with domain: bool (representing constraint (1<=(aux1283 + aux1286 + aux1287)))
c Var 'aux2314' direct represents '0' with '-8454'
c Var 'aux2314' direct represents '1' with '8454'
c Var 'aux2314' order represents '1' with '1'
c Var 'aux2314' order represents '0' with '-8454'
c Encoding variable: aux2315 with domain: bool (representing constraint ((aux1289 + aux1292 + aux1293)<=1))
c Var 'aux2315' direct represents '0' with '-8455'
c Var 'aux2315' direct represents '1' with '8455'
c Var 'aux2315' order represents '1' with '1'
c Var 'aux2315' order represents '0' with '-8455'
c Encoding variable: aux2316 with domain: bool (representing constraint (1<=(aux1289 + aux1292 + aux1293)))
c Var 'aux2316' direct represents '0' with '-8456'
c Var 'aux2316' direct represents '1' with '8456'
c Var 'aux2316' order represents '1' with '1'
c Var 'aux2316' order represents '0' with '-8456'
c Encoding variable: aux2317 with domain: bool (representing constraint ((aux1295 + aux1298 + aux1299)<=1))
c Var 'aux2317' direct represents '0' with '-8457'
c Var 'aux2317' direct represents '1' with '8457'
c Var 'aux2317' order represents '1' with '1'
c Var 'aux2317' order represents '0' with '-8457'
c Encoding variable: aux2318 with domain: bool (representing constraint (1<=(aux1295 + aux1298 + aux1299)))
c Var 'aux2318' direct represents '0' with '-8458'
c Var 'aux2318' direct represents '1' with '8458'
c Var 'aux2318' order represents '1' with '1'
c Var 'aux2318' order represents '0' with '-8458'
c Encoding variable: aux2319 with domain: bool (representing constraint ((aux1301 + aux1304 + aux1305)<=1))
c Var 'aux2319' direct represents '0' with '-8459'
c Var 'aux2319' direct represents '1' with '8459'
c Var 'aux2319' order represents '1' with '1'
c Var 'aux2319' order represents '0' with '-8459'
c Encoding variable: aux2320 with domain: bool (representing constraint (1<=(aux1301 + aux1304 + aux1305)))
c Var 'aux2320' direct represents '0' with '-8460'
c Var 'aux2320' direct represents '1' with '8460'
c Var 'aux2320' order represents '1' with '1'
c Var 'aux2320' order represents '0' with '-8460'
c Encoding variable: aux2321 with domain: bool (representing constraint ((aux1307 + aux1310 + aux1311)<=1))
c Var 'aux2321' direct represents '0' with '-8461'
c Var 'aux2321' direct represents '1' with '8461'
c Var 'aux2321' order represents '1' with '1'
c Var 'aux2321' order represents '0' with '-8461'
c Encoding variable: aux2322 with domain: bool (representing constraint (1<=(aux1307 + aux1310 + aux1311)))
c Var 'aux2322' direct represents '0' with '-8462'
c Var 'aux2322' direct represents '1' with '8462'
c Var 'aux2322' order represents '1' with '1'
c Var 'aux2322' order represents '0' with '-8462'
c Encoding variable: aux2323 with domain: bool (representing constraint ((aux1313 + aux1316 + aux1317)<=1))
c Var 'aux2323' direct represents '0' with '-8463'
c Var 'aux2323' direct represents '1' with '8463'
c Var 'aux2323' order represents '1' with '1'
c Var 'aux2323' order represents '0' with '-8463'
c Encoding variable: aux2324 with domain: bool (representing constraint (1<=(aux1313 + aux1316 + aux1317)))
c Var 'aux2324' direct represents '0' with '-8464'
c Var 'aux2324' direct represents '1' with '8464'
c Var 'aux2324' order represents '1' with '1'
c Var 'aux2324' order represents '0' with '-8464'
c Encoding variable: aux2325 with domain: bool (representing constraint ((aux1319 + aux1322 + aux1323)<=1))
c Var 'aux2325' direct represents '0' with '-8465'
c Var 'aux2325' direct represents '1' with '8465'
c Var 'aux2325' order represents '1' with '1'
c Var 'aux2325' order represents '0' with '-8465'
c Encoding variable: aux2326 with domain: bool (representing constraint (1<=(aux1319 + aux1322 + aux1323)))
c Var 'aux2326' direct represents '0' with '-8466'
c Var 'aux2326' direct represents '1' with '8466'
c Var 'aux2326' order represents '1' with '1'
c Var 'aux2326' order represents '0' with '-8466'
c Encoding variable: aux2327 with domain: bool (representing constraint ((aux1325 + aux1328 + aux1329)<=1))
c Var 'aux2327' direct represents '0' with '-8467'
c Var 'aux2327' direct represents '1' with '8467'
c Var 'aux2327' order represents '1' with '1'
c Var 'aux2327' order represents '0' with '-8467'
c Encoding variable: aux2328 with domain: bool (representing constraint (1<=(aux1325 + aux1328 + aux1329)))
c Var 'aux2328' direct represents '0' with '-8468'
c Var 'aux2328' direct represents '1' with '8468'
c Var 'aux2328' order represents '1' with '1'
c Var 'aux2328' order represents '0' with '-8468'
c Encoding variable: aux2329 with domain: bool (representing constraint ((aux1331 + aux1334 + aux1335)<=1))
c Var 'aux2329' direct represents '0' with '-8469'
c Var 'aux2329' direct represents '1' with '8469'
c Var 'aux2329' order represents '1' with '1'
c Var 'aux2329' order represents '0' with '-8469'
c Encoding variable: aux2330 with domain: bool (representing constraint (1<=(aux1331 + aux1334 + aux1335)))
c Var 'aux2330' direct represents '0' with '-8470'
c Var 'aux2330' direct represents '1' with '8470'
c Var 'aux2330' order represents '1' with '1'
c Var 'aux2330' order represents '0' with '-8470'
c Encoding variable: aux2331 with domain: bool (representing constraint ((aux1337 + aux1340 + aux1341)<=1))
c Var 'aux2331' direct represents '0' with '-8471'
c Var 'aux2331' direct represents '1' with '8471'
c Var 'aux2331' order represents '1' with '1'
c Var 'aux2331' order represents '0' with '-8471'
c Encoding variable: aux2332 with domain: bool (representing constraint (1<=(aux1337 + aux1340 + aux1341)))
c Var 'aux2332' direct represents '0' with '-8472'
c Var 'aux2332' direct represents '1' with '8472'
c Var 'aux2332' order represents '1' with '1'
c Var 'aux2332' order represents '0' with '-8472'
c Encoding variable: aux2333 with domain: bool (representing constraint ((aux1343 + aux1346 + aux1347)<=1))
c Var 'aux2333' direct represents '0' with '-8473'
c Var 'aux2333' direct represents '1' with '8473'
c Var 'aux2333' order represents '1' with '1'
c Var 'aux2333' order represents '0' with '-8473'
c Encoding variable: aux2334 with domain: bool (representing constraint (1<=(aux1343 + aux1346 + aux1347)))
c Var 'aux2334' direct represents '0' with '-8474'
c Var 'aux2334' direct represents '1' with '8474'
c Var 'aux2334' order represents '1' with '1'
c Var 'aux2334' order represents '0' with '-8474'
c Encoding variable: aux2335 with domain: bool (representing constraint ((aux1349 + aux1352 + aux1353)<=1))
c Var 'aux2335' direct represents '0' with '-8475'
c Var 'aux2335' direct represents '1' with '8475'
c Var 'aux2335' order represents '1' with '1'
c Var 'aux2335' order represents '0' with '-8475'
c Encoding variable: aux2336 with domain: bool (representing constraint (1<=(aux1349 + aux1352 + aux1353)))
c Var 'aux2336' direct represents '0' with '-8476'
c Var 'aux2336' direct represents '1' with '8476'
c Var 'aux2336' order represents '1' with '1'
c Var 'aux2336' order represents '0' with '-8476'
c Encoding variable: aux2337 with domain: bool (representing constraint ((aux1355 + aux1358 + aux1359)<=1))
c Var 'aux2337' direct represents '0' with '-8477'
c Var 'aux2337' direct represents '1' with '8477'
c Var 'aux2337' order represents '1' with '1'
c Var 'aux2337' order represents '0' with '-8477'
c Encoding variable: aux2338 with domain: bool (representing constraint (1<=(aux1355 + aux1358 + aux1359)))
c Var 'aux2338' direct represents '0' with '-8478'
c Var 'aux2338' direct represents '1' with '8478'
c Var 'aux2338' order represents '1' with '1'
c Var 'aux2338' order represents '0' with '-8478'
c Encoding variable: aux2339 with domain: bool (representing constraint ((aux1361 + aux1364 + aux1365)<=1))
c Var 'aux2339' direct represents '0' with '-8479'
c Var 'aux2339' direct represents '1' with '8479'
c Var 'aux2339' order represents '1' with '1'
c Var 'aux2339' order represents '0' with '-8479'
c Encoding variable: aux2340 with domain: bool (representing constraint (1<=(aux1361 + aux1364 + aux1365)))
c Var 'aux2340' direct represents '0' with '-8480'
c Var 'aux2340' direct represents '1' with '8480'
c Var 'aux2340' order represents '1' with '1'
c Var 'aux2340' order represents '0' with '-8480'
c Encoding variable: aux2341 with domain: bool (representing constraint ((aux1367 + aux1370 + aux1371)<=1))
c Var 'aux2341' direct represents '0' with '-8481'
c Var 'aux2341' direct represents '1' with '8481'
c Var 'aux2341' order represents '1' with '1'
c Var 'aux2341' order represents '0' with '-8481'
c Encoding variable: aux2342 with domain: bool (representing constraint (1<=(aux1367 + aux1370 + aux1371)))
c Var 'aux2342' direct represents '0' with '-8482'
c Var 'aux2342' direct represents '1' with '8482'
c Var 'aux2342' order represents '1' with '1'
c Var 'aux2342' order represents '0' with '-8482'
c Encoding variable: aux2343 with domain: bool (representing constraint ((aux1373 + aux1376 + aux1377)<=1))
c Var 'aux2343' direct represents '0' with '-8483'
c Var 'aux2343' direct represents '1' with '8483'
c Var 'aux2343' order represents '1' with '1'
c Var 'aux2343' order represents '0' with '-8483'
c Encoding variable: aux2344 with domain: bool (representing constraint (1<=(aux1373 + aux1376 + aux1377)))
c Var 'aux2344' direct represents '0' with '-8484'
c Var 'aux2344' direct represents '1' with '8484'
c Var 'aux2344' order represents '1' with '1'
c Var 'aux2344' order represents '0' with '-8484'
c Encoding variable: aux2345 with domain: bool (representing constraint ((aux1379 + aux1382 + aux1383)<=1))
c Var 'aux2345' direct represents '0' with '-8485'
c Var 'aux2345' direct represents '1' with '8485'
c Var 'aux2345' order represents '1' with '1'
c Var 'aux2345' order represents '0' with '-8485'
c Encoding variable: aux2346 with domain: bool (representing constraint (1<=(aux1379 + aux1382 + aux1383)))
c Var 'aux2346' direct represents '0' with '-8486'
c Var 'aux2346' direct represents '1' with '8486'
c Var 'aux2346' order represents '1' with '1'
c Var 'aux2346' order represents '0' with '-8486'
c Encoding variable: aux2347 with domain: bool (representing constraint ((aux1385 + aux1388 + aux1389)<=1))
c Var 'aux2347' direct represents '0' with '-8487'
c Var 'aux2347' direct represents '1' with '8487'
c Var 'aux2347' order represents '1' with '1'
c Var 'aux2347' order represents '0' with '-8487'
c Encoding variable: aux2348 with domain: bool (representing constraint (1<=(aux1385 + aux1388 + aux1389)))
c Var 'aux2348' direct represents '0' with '-8488'
c Var 'aux2348' direct represents '1' with '8488'
c Var 'aux2348' order represents '1' with '1'
c Var 'aux2348' order represents '0' with '-8488'
c Encoding variable: aux2349 with domain: bool (representing constraint ((aux1391 + aux1394 + aux1395)<=1))
c Var 'aux2349' direct represents '0' with '-8489'
c Var 'aux2349' direct represents '1' with '8489'
c Var 'aux2349' order represents '1' with '1'
c Var 'aux2349' order represents '0' with '-8489'
c Encoding variable: aux2350 with domain: bool (representing constraint (1<=(aux1391 + aux1394 + aux1395)))
c Var 'aux2350' direct represents '0' with '-8490'
c Var 'aux2350' direct represents '1' with '8490'
c Var 'aux2350' order represents '1' with '1'
c Var 'aux2350' order represents '0' with '-8490'
c Encoding variable: aux2351 with domain: bool (representing constraint ((aux1397 + aux1400 + aux1401)<=1))
c Var 'aux2351' direct represents '0' with '-8491'
c Var 'aux2351' direct represents '1' with '8491'
c Var 'aux2351' order represents '1' with '1'
c Var 'aux2351' order represents '0' with '-8491'
c Encoding variable: aux2352 with domain: bool (representing constraint (1<=(aux1397 + aux1400 + aux1401)))
c Var 'aux2352' direct represents '0' with '-8492'
c Var 'aux2352' direct represents '1' with '8492'
c Var 'aux2352' order represents '1' with '1'
c Var 'aux2352' order represents '0' with '-8492'
c Encoding variable: aux2353 with domain: bool (representing constraint ((aux1403 + aux1406 + aux1407)<=1))
c Var 'aux2353' direct represents '0' with '-8493'
c Var 'aux2353' direct represents '1' with '8493'
c Var 'aux2353' order represents '1' with '1'
c Var 'aux2353' order represents '0' with '-8493'
c Encoding variable: aux2354 with domain: bool (representing constraint (1<=(aux1403 + aux1406 + aux1407)))
c Var 'aux2354' direct represents '0' with '-8494'
c Var 'aux2354' direct represents '1' with '8494'
c Var 'aux2354' order represents '1' with '1'
c Var 'aux2354' order represents '0' with '-8494'
c Encoding variable: aux2355 with domain: bool (representing constraint ((aux1409 + aux1412 + aux1413)<=1))
c Var 'aux2355' direct represents '0' with '-8495'
c Var 'aux2355' direct represents '1' with '8495'
c Var 'aux2355' order represents '1' with '1'
c Var 'aux2355' order represents '0' with '-8495'
c Encoding variable: aux2356 with domain: bool (representing constraint (1<=(aux1409 + aux1412 + aux1413)))
c Var 'aux2356' direct represents '0' with '-8496'
c Var 'aux2356' direct represents '1' with '8496'
c Var 'aux2356' order represents '1' with '1'
c Var 'aux2356' order represents '0' with '-8496'
c Encoding variable: aux2357 with domain: bool (representing constraint ((aux1415 + aux1418 + aux1419)<=1))
c Var 'aux2357' direct represents '0' with '-8497'
c Var 'aux2357' direct represents '1' with '8497'
c Var 'aux2357' order represents '1' with '1'
c Var 'aux2357' order represents '0' with '-8497'
c Encoding variable: aux2358 with domain: bool (representing constraint (1<=(aux1415 + aux1418 + aux1419)))
c Var 'aux2358' direct represents '0' with '-8498'
c Var 'aux2358' direct represents '1' with '8498'
c Var 'aux2358' order represents '1' with '1'
c Var 'aux2358' order represents '0' with '-8498'
c Encoding variable: aux2359 with domain: bool (representing constraint ((aux1421 + aux1424 + aux1425)<=1))
c Var 'aux2359' direct represents '0' with '-8499'
c Var 'aux2359' direct represents '1' with '8499'
c Var 'aux2359' order represents '1' with '1'
c Var 'aux2359' order represents '0' with '-8499'
c Encoding variable: aux2360 with domain: bool (representing constraint (1<=(aux1421 + aux1424 + aux1425)))
c Var 'aux2360' direct represents '0' with '-8500'
c Var 'aux2360' direct represents '1' with '8500'
c Var 'aux2360' order represents '1' with '1'
c Var 'aux2360' order represents '0' with '-8500'
c Encoding variable: aux2361 with domain: bool (representing constraint ((aux1427 + aux1430 + aux1431)<=1))
c Var 'aux2361' direct represents '0' with '-8501'
c Var 'aux2361' direct represents '1' with '8501'
c Var 'aux2361' order represents '1' with '1'
c Var 'aux2361' order represents '0' with '-8501'
c Encoding variable: aux2362 with domain: bool (representing constraint (1<=(aux1427 + aux1430 + aux1431)))
c Var 'aux2362' direct represents '0' with '-8502'
c Var 'aux2362' direct represents '1' with '8502'
c Var 'aux2362' order represents '1' with '1'
c Var 'aux2362' order represents '0' with '-8502'
c Encoding variable: aux2363 with domain: bool (representing constraint ((aux1433 + aux1436 + aux1437)<=1))
c Var 'aux2363' direct represents '0' with '-8503'
c Var 'aux2363' direct represents '1' with '8503'
c Var 'aux2363' order represents '1' with '1'
c Var 'aux2363' order represents '0' with '-8503'
c Encoding variable: aux2364 with domain: bool (representing constraint (1<=(aux1433 + aux1436 + aux1437)))
c Var 'aux2364' direct represents '0' with '-8504'
c Var 'aux2364' direct represents '1' with '8504'
c Var 'aux2364' order represents '1' with '1'
c Var 'aux2364' order represents '0' with '-8504'
c Encoding variable: aux2365 with domain: bool (representing constraint ((aux1439 + aux1442 + aux1443)<=1))
c Var 'aux2365' direct represents '0' with '-8505'
c Var 'aux2365' direct represents '1' with '8505'
c Var 'aux2365' order represents '1' with '1'
c Var 'aux2365' order represents '0' with '-8505'
c Encoding variable: aux2366 with domain: bool (representing constraint (1<=(aux1439 + aux1442 + aux1443)))
c Var 'aux2366' direct represents '0' with '-8506'
c Var 'aux2366' direct represents '1' with '8506'
c Var 'aux2366' order represents '1' with '1'
c Var 'aux2366' order represents '0' with '-8506'
c Encoding variable: aux2367 with domain: bool (representing constraint ((aux1445 + aux1448 + aux1449)<=1))
c Var 'aux2367' direct represents '0' with '-8507'
c Var 'aux2367' direct represents '1' with '8507'
c Var 'aux2367' order represents '1' with '1'
c Var 'aux2367' order represents '0' with '-8507'
c Encoding variable: aux2368 with domain: bool (representing constraint (1<=(aux1445 + aux1448 + aux1449)))
c Var 'aux2368' direct represents '0' with '-8508'
c Var 'aux2368' direct represents '1' with '8508'
c Var 'aux2368' order represents '1' with '1'
c Var 'aux2368' order represents '0' with '-8508'
c Encoding variable: aux2369 with domain: bool (representing constraint ((aux1451 + aux1454 + aux1455)<=1))
c Var 'aux2369' direct represents '0' with '-8509'
c Var 'aux2369' direct represents '1' with '8509'
c Var 'aux2369' order represents '1' with '1'
c Var 'aux2369' order represents '0' with '-8509'
c Encoding variable: aux2370 with domain: bool (representing constraint (1<=(aux1451 + aux1454 + aux1455)))
c Var 'aux2370' direct represents '0' with '-8510'
c Var 'aux2370' direct represents '1' with '8510'
c Var 'aux2370' order represents '1' with '1'
c Var 'aux2370' order represents '0' with '-8510'
c Encoding variable: aux2371 with domain: bool (representing constraint ((aux1457 + aux1460 + aux1461)<=1))
c Var 'aux2371' direct represents '0' with '-8511'
c Var 'aux2371' direct represents '1' with '8511'
c Var 'aux2371' order represents '1' with '1'
c Var 'aux2371' order represents '0' with '-8511'
c Encoding variable: aux2372 with domain: bool (representing constraint (1<=(aux1457 + aux1460 + aux1461)))
c Var 'aux2372' direct represents '0' with '-8512'
c Var 'aux2372' direct represents '1' with '8512'
c Var 'aux2372' order represents '1' with '1'
c Var 'aux2372' order represents '0' with '-8512'
c Encoding variable: aux2373 with domain: bool (representing constraint ((aux1463 + aux1466 + aux1467)<=1))
c Var 'aux2373' direct represents '0' with '-8513'
c Var 'aux2373' direct represents '1' with '8513'
c Var 'aux2373' order represents '1' with '1'
c Var 'aux2373' order represents '0' with '-8513'
c Encoding variable: aux2374 with domain: bool (representing constraint (1<=(aux1463 + aux1466 + aux1467)))
c Var 'aux2374' direct represents '0' with '-8514'
c Var 'aux2374' direct represents '1' with '8514'
c Var 'aux2374' order represents '1' with '1'
c Var 'aux2374' order represents '0' with '-8514'
c Encoding variable: aux2375 with domain: bool (representing constraint ((aux1469 + aux1472 + aux1473)<=1))
c Var 'aux2375' direct represents '0' with '-8515'
c Var 'aux2375' direct represents '1' with '8515'
c Var 'aux2375' order represents '1' with '1'
c Var 'aux2375' order represents '0' with '-8515'
c Encoding variable: aux2376 with domain: bool (representing constraint (1<=(aux1469 + aux1472 + aux1473)))
c Var 'aux2376' direct represents '0' with '-8516'
c Var 'aux2376' direct represents '1' with '8516'
c Var 'aux2376' order represents '1' with '1'
c Var 'aux2376' order represents '0' with '-8516'
c Encoding variable: aux2377 with domain: bool (representing constraint ((aux1475 + aux1478 + aux1479)<=1))
c Var 'aux2377' direct represents '0' with '-8517'
c Var 'aux2377' direct represents '1' with '8517'
c Var 'aux2377' order represents '1' with '1'
c Var 'aux2377' order represents '0' with '-8517'
c Encoding variable: aux2378 with domain: bool (representing constraint (1<=(aux1475 + aux1478 + aux1479)))
c Var 'aux2378' direct represents '0' with '-8518'
c Var 'aux2378' direct represents '1' with '8518'
c Var 'aux2378' order represents '1' with '1'
c Var 'aux2378' order represents '0' with '-8518'
c Encoding variable: aux2379 with domain: bool (representing constraint ((aux1481 + aux1484 + aux1485)<=1))
c Var 'aux2379' direct represents '0' with '-8519'
c Var 'aux2379' direct represents '1' with '8519'
c Var 'aux2379' order represents '1' with '1'
c Var 'aux2379' order represents '0' with '-8519'
c Encoding variable: aux2380 with domain: bool (representing constraint (1<=(aux1481 + aux1484 + aux1485)))
c Var 'aux2380' direct represents '0' with '-8520'
c Var 'aux2380' direct represents '1' with '8520'
c Var 'aux2380' order represents '1' with '1'
c Var 'aux2380' order represents '0' with '-8520'
c Encoding variable: aux2381 with domain: bool (representing constraint ((aux1487 + aux1490 + aux1491)<=1))
c Var 'aux2381' direct represents '0' with '-8521'
c Var 'aux2381' direct represents '1' with '8521'
c Var 'aux2381' order represents '1' with '1'
c Var 'aux2381' order represents '0' with '-8521'
c Encoding variable: aux2382 with domain: bool (representing constraint (1<=(aux1487 + aux1490 + aux1491)))
c Var 'aux2382' direct represents '0' with '-8522'
c Var 'aux2382' direct represents '1' with '8522'
c Var 'aux2382' order represents '1' with '1'
c Var 'aux2382' order represents '0' with '-8522'
c Encoding variable: aux2383 with domain: bool (representing constraint ((aux1493 + aux1496 + aux1497)<=1))
c Var 'aux2383' direct represents '0' with '-8523'
c Var 'aux2383' direct represents '1' with '8523'
c Var 'aux2383' order represents '1' with '1'
c Var 'aux2383' order represents '0' with '-8523'
c Encoding variable: aux2384 with domain: bool (representing constraint (1<=(aux1493 + aux1496 + aux1497)))
c Var 'aux2384' direct represents '0' with '-8524'
c Var 'aux2384' direct represents '1' with '8524'
c Var 'aux2384' order represents '1' with '1'
c Var 'aux2384' order represents '0' with '-8524'
c Encoding variable: aux2385 with domain: bool (representing constraint ((aux1499 + aux1502 + aux1503)<=1))
c Var 'aux2385' direct represents '0' with '-8525'
c Var 'aux2385' direct represents '1' with '8525'
c Var 'aux2385' order represents '1' with '1'
c Var 'aux2385' order represents '0' with '-8525'
c Encoding variable: aux2386 with domain: bool (representing constraint (1<=(aux1499 + aux1502 + aux1503)))
c Var 'aux2386' direct represents '0' with '-8526'
c Var 'aux2386' direct represents '1' with '8526'
c Var 'aux2386' order represents '1' with '1'
c Var 'aux2386' order represents '0' with '-8526'
c Encoding variable: aux2387 with domain: bool (representing constraint ((aux1505 + aux1508 + aux1509)<=1))
c Var 'aux2387' direct represents '0' with '-8527'
c Var 'aux2387' direct represents '1' with '8527'
c Var 'aux2387' order represents '1' with '1'
c Var 'aux2387' order represents '0' with '-8527'
c Encoding variable: aux2388 with domain: bool (representing constraint (1<=(aux1505 + aux1508 + aux1509)))
c Var 'aux2388' direct represents '0' with '-8528'
c Var 'aux2388' direct represents '1' with '8528'
c Var 'aux2388' order represents '1' with '1'
c Var 'aux2388' order represents '0' with '-8528'
c Encoding variable: aux2389 with domain: bool (representing constraint ((aux1511 + aux1514 + aux1515)<=1))
c Var 'aux2389' direct represents '0' with '-8529'
c Var 'aux2389' direct represents '1' with '8529'
c Var 'aux2389' order represents '1' with '1'
c Var 'aux2389' order represents '0' with '-8529'
c Encoding variable: aux2390 with domain: bool (representing constraint (1<=(aux1511 + aux1514 + aux1515)))
c Var 'aux2390' direct represents '0' with '-8530'
c Var 'aux2390' direct represents '1' with '8530'
c Var 'aux2390' order represents '1' with '1'
c Var 'aux2390' order represents '0' with '-8530'
c Encoding variable: aux2391 with domain: bool (representing constraint ((aux1517 + aux1520 + aux1521)<=1))
c Var 'aux2391' direct represents '0' with '-8531'
c Var 'aux2391' direct represents '1' with '8531'
c Var 'aux2391' order represents '1' with '1'
c Var 'aux2391' order represents '0' with '-8531'
c Encoding variable: aux2392 with domain: bool (representing constraint (1<=(aux1517 + aux1520 + aux1521)))
c Var 'aux2392' direct represents '0' with '-8532'
c Var 'aux2392' direct represents '1' with '8532'
c Var 'aux2392' order represents '1' with '1'
c Var 'aux2392' order represents '0' with '-8532'
c Encoding variable: aux2393 with domain: bool (representing constraint ((aux1523 + aux1526 + aux1527)<=1))
c Var 'aux2393' direct represents '0' with '-8533'
c Var 'aux2393' direct represents '1' with '8533'
c Var 'aux2393' order represents '1' with '1'
c Var 'aux2393' order represents '0' with '-8533'
c Encoding variable: aux2394 with domain: bool (representing constraint (1<=(aux1523 + aux1526 + aux1527)))
c Var 'aux2394' direct represents '0' with '-8534'
c Var 'aux2394' direct represents '1' with '8534'
c Var 'aux2394' order represents '1' with '1'
c Var 'aux2394' order represents '0' with '-8534'
c Encoding variable: aux2395 with domain: bool (representing constraint ((aux1529 + aux1532 + aux1533)<=1))
c Var 'aux2395' direct represents '0' with '-8535'
c Var 'aux2395' direct represents '1' with '8535'
c Var 'aux2395' order represents '1' with '1'
c Var 'aux2395' order represents '0' with '-8535'
c Encoding variable: aux2396 with domain: bool (representing constraint (1<=(aux1529 + aux1532 + aux1533)))
c Var 'aux2396' direct represents '0' with '-8536'
c Var 'aux2396' direct represents '1' with '8536'
c Var 'aux2396' order represents '1' with '1'
c Var 'aux2396' order represents '0' with '-8536'
c Encoding variable: aux2397 with domain: bool (representing constraint ((aux1535 + aux1538 + aux1539)<=1))
c Var 'aux2397' direct represents '0' with '-8537'
c Var 'aux2397' direct represents '1' with '8537'
c Var 'aux2397' order represents '1' with '1'
c Var 'aux2397' order represents '0' with '-8537'
c Encoding variable: aux2398 with domain: bool (representing constraint (1<=(aux1535 + aux1538 + aux1539)))
c Var 'aux2398' direct represents '0' with '-8538'
c Var 'aux2398' direct represents '1' with '8538'
c Var 'aux2398' order represents '1' with '1'
c Var 'aux2398' order represents '0' with '-8538'
c Encoding variable: aux2399 with domain: bool (representing constraint ((aux1541 + aux1544 + aux1545)<=1))
c Var 'aux2399' direct represents '0' with '-8539'
c Var 'aux2399' direct represents '1' with '8539'
c Var 'aux2399' order represents '1' with '1'
c Var 'aux2399' order represents '0' with '-8539'
c Encoding variable: aux2400 with domain: bool (representing constraint (1<=(aux1541 + aux1544 + aux1545)))
c Var 'aux2400' direct represents '0' with '-8540'
c Var 'aux2400' direct represents '1' with '8540'
c Var 'aux2400' order represents '1' with '1'
c Var 'aux2400' order represents '0' with '-8540'
c Encoding variable: aux2401 with domain: bool (representing constraint ((aux1547 + aux1550 + aux1551)<=1))
c Var 'aux2401' direct represents '0' with '-8541'
c Var 'aux2401' direct represents '1' with '8541'
c Var 'aux2401' order represents '1' with '1'
c Var 'aux2401' order represents '0' with '-8541'
c Encoding variable: aux2402 with domain: bool (representing constraint (1<=(aux1547 + aux1550 + aux1551)))
c Var 'aux2402' direct represents '0' with '-8542'
c Var 'aux2402' direct represents '1' with '8542'
c Var 'aux2402' order represents '1' with '1'
c Var 'aux2402' order represents '0' with '-8542'
c Encoding variable: aux2403 with domain: bool (representing constraint ((aux1553 + aux1556 + aux1557)<=1))
c Var 'aux2403' direct represents '0' with '-8543'
c Var 'aux2403' direct represents '1' with '8543'
c Var 'aux2403' order represents '1' with '1'
c Var 'aux2403' order represents '0' with '-8543'
c Encoding variable: aux2404 with domain: bool (representing constraint (1<=(aux1553 + aux1556 + aux1557)))
c Var 'aux2404' direct represents '0' with '-8544'
c Var 'aux2404' direct represents '1' with '8544'
c Var 'aux2404' order represents '1' with '1'
c Var 'aux2404' order represents '0' with '-8544'
c Encoding variable: aux2405 with domain: bool (representing constraint ((aux1559 + aux1562 + aux1563)<=1))
c Var 'aux2405' direct represents '0' with '-8545'
c Var 'aux2405' direct represents '1' with '8545'
c Var 'aux2405' order represents '1' with '1'
c Var 'aux2405' order represents '0' with '-8545'
c Encoding variable: aux2406 with domain: bool (representing constraint (1<=(aux1559 + aux1562 + aux1563)))
c Var 'aux2406' direct represents '0' with '-8546'
c Var 'aux2406' direct represents '1' with '8546'
c Var 'aux2406' order represents '1' with '1'
c Var 'aux2406' order represents '0' with '-8546'
c Encoding variable: aux2407 with domain: bool (representing constraint ((aux1565 + aux1568 + aux1569)<=1))
c Var 'aux2407' direct represents '0' with '-8547'
c Var 'aux2407' direct represents '1' with '8547'
c Var 'aux2407' order represents '1' with '1'
c Var 'aux2407' order represents '0' with '-8547'
c Encoding variable: aux2408 with domain: bool (representing constraint (1<=(aux1565 + aux1568 + aux1569)))
c Var 'aux2408' direct represents '0' with '-8548'
c Var 'aux2408' direct represents '1' with '8548'
c Var 'aux2408' order represents '1' with '1'
c Var 'aux2408' order represents '0' with '-8548'
c Encoding variable: aux2409 with domain: bool (representing constraint ((aux1571 + aux1574 + aux1575)<=1))
c Var 'aux2409' direct represents '0' with '-8549'
c Var 'aux2409' direct represents '1' with '8549'
c Var 'aux2409' order represents '1' with '1'
c Var 'aux2409' order represents '0' with '-8549'
c Encoding variable: aux2410 with domain: bool (representing constraint (1<=(aux1571 + aux1574 + aux1575)))
c Var 'aux2410' direct represents '0' with '-8550'
c Var 'aux2410' direct represents '1' with '8550'
c Var 'aux2410' order represents '1' with '1'
c Var 'aux2410' order represents '0' with '-8550'
c Encoding variable: aux2411 with domain: bool (representing constraint ((aux1577 + aux1580 + aux1581)<=1))
c Var 'aux2411' direct represents '0' with '-8551'
c Var 'aux2411' direct represents '1' with '8551'
c Var 'aux2411' order represents '1' with '1'
c Var 'aux2411' order represents '0' with '-8551'
c Encoding variable: aux2412 with domain: bool (representing constraint (1<=(aux1577 + aux1580 + aux1581)))
c Var 'aux2412' direct represents '0' with '-8552'
c Var 'aux2412' direct represents '1' with '8552'
c Var 'aux2412' order represents '1' with '1'
c Var 'aux2412' order represents '0' with '-8552'
c Encoding variable: aux2413 with domain: bool (representing constraint ((aux1583 + aux1586 + aux1587)<=1))
c Var 'aux2413' direct represents '0' with '-8553'
c Var 'aux2413' direct represents '1' with '8553'
c Var 'aux2413' order represents '1' with '1'
c Var 'aux2413' order represents '0' with '-8553'
c Encoding variable: aux2414 with domain: bool (representing constraint (1<=(aux1583 + aux1586 + aux1587)))
c Var 'aux2414' direct represents '0' with '-8554'
c Var 'aux2414' direct represents '1' with '8554'
c Var 'aux2414' order represents '1' with '1'
c Var 'aux2414' order represents '0' with '-8554'
c Encoding variable: aux2415 with domain: bool (representing constraint ((aux1589 + aux1592 + aux1593)<=1))
c Var 'aux2415' direct represents '0' with '-8555'
c Var 'aux2415' direct represents '1' with '8555'
c Var 'aux2415' order represents '1' with '1'
c Var 'aux2415' order represents '0' with '-8555'
c Encoding variable: aux2416 with domain: bool (representing constraint (1<=(aux1589 + aux1592 + aux1593)))
c Var 'aux2416' direct represents '0' with '-8556'
c Var 'aux2416' direct represents '1' with '8556'
c Var 'aux2416' order represents '1' with '1'
c Var 'aux2416' order represents '0' with '-8556'
c Encoding variable: aux2417 with domain: bool (representing constraint ((aux1595 + aux1598 + aux1599)<=1))
c Var 'aux2417' direct represents '0' with '-8557'
c Var 'aux2417' direct represents '1' with '8557'
c Var 'aux2417' order represents '1' with '1'
c Var 'aux2417' order represents '0' with '-8557'
c Encoding variable: aux2418 with domain: bool (representing constraint (1<=(aux1595 + aux1598 + aux1599)))
c Var 'aux2418' direct represents '0' with '-8558'
c Var 'aux2418' direct represents '1' with '8558'
c Var 'aux2418' order represents '1' with '1'
c Var 'aux2418' order represents '0' with '-8558'
c Encoding variable: aux2419 with domain: bool (representing constraint ((aux1601 + aux1604 + aux1605)<=1))
c Var 'aux2419' direct represents '0' with '-8559'
c Var 'aux2419' direct represents '1' with '8559'
c Var 'aux2419' order represents '1' with '1'
c Var 'aux2419' order represents '0' with '-8559'
c Encoding variable: aux2420 with domain: bool (representing constraint (1<=(aux1601 + aux1604 + aux1605)))
c Var 'aux2420' direct represents '0' with '-8560'
c Var 'aux2420' direct represents '1' with '8560'
c Var 'aux2420' order represents '1' with '1'
c Var 'aux2420' order represents '0' with '-8560'
c Encoding variable: aux2421 with domain: bool (representing constraint ((aux1607 + aux1610 + aux1611)<=1))
c Var 'aux2421' direct represents '0' with '-8561'
c Var 'aux2421' direct represents '1' with '8561'
c Var 'aux2421' order represents '1' with '1'
c Var 'aux2421' order represents '0' with '-8561'
c Encoding variable: aux2422 with domain: bool (representing constraint (1<=(aux1607 + aux1610 + aux1611)))
c Var 'aux2422' direct represents '0' with '-8562'
c Var 'aux2422' direct represents '1' with '8562'
c Var 'aux2422' order represents '1' with '1'
c Var 'aux2422' order represents '0' with '-8562'
c Encoding variable: aux2423 with domain: bool (representing constraint ((aux1613 + aux1616 + aux1617)<=1))
c Var 'aux2423' direct represents '0' with '-8563'
c Var 'aux2423' direct represents '1' with '8563'
c Var 'aux2423' order represents '1' with '1'
c Var 'aux2423' order represents '0' with '-8563'
c Encoding variable: aux2424 with domain: bool (representing constraint (1<=(aux1613 + aux1616 + aux1617)))
c Var 'aux2424' direct represents '0' with '-8564'
c Var 'aux2424' direct represents '1' with '8564'
c Var 'aux2424' order represents '1' with '1'
c Var 'aux2424' order represents '0' with '-8564'
c Encoding variable: aux2425 with domain: bool (representing constraint ((aux1619 + aux1622 + aux1623)<=1))
c Var 'aux2425' direct represents '0' with '-8565'
c Var 'aux2425' direct represents '1' with '8565'
c Var 'aux2425' order represents '1' with '1'
c Var 'aux2425' order represents '0' with '-8565'
c Encoding variable: aux2426 with domain: bool (representing constraint (1<=(aux1619 + aux1622 + aux1623)))
c Var 'aux2426' direct represents '0' with '-8566'
c Var 'aux2426' direct represents '1' with '8566'
c Var 'aux2426' order represents '1' with '1'
c Var 'aux2426' order represents '0' with '-8566'
c Encoding variable: aux2427 with domain: bool (representing constraint ((aux1625 + aux1628 + aux1629)<=1))
c Var 'aux2427' direct represents '0' with '-8567'
c Var 'aux2427' direct represents '1' with '8567'
c Var 'aux2427' order represents '1' with '1'
c Var 'aux2427' order represents '0' with '-8567'
c Encoding variable: aux2428 with domain: bool (representing constraint (1<=(aux1625 + aux1628 + aux1629)))
c Var 'aux2428' direct represents '0' with '-8568'
c Var 'aux2428' direct represents '1' with '8568'
c Var 'aux2428' order represents '1' with '1'
c Var 'aux2428' order represents '0' with '-8568'
c Encoding variable: aux2429 with domain: bool (representing constraint ((aux1631 + aux1634 + aux1635)<=1))
c Var 'aux2429' direct represents '0' with '-8569'
c Var 'aux2429' direct represents '1' with '8569'
c Var 'aux2429' order represents '1' with '1'
c Var 'aux2429' order represents '0' with '-8569'
c Encoding variable: aux2430 with domain: bool (representing constraint (1<=(aux1631 + aux1634 + aux1635)))
c Var 'aux2430' direct represents '0' with '-8570'
c Var 'aux2430' direct represents '1' with '8570'
c Var 'aux2430' order represents '1' with '1'
c Var 'aux2430' order represents '0' with '-8570'
c Encoding variable: aux2431 with domain: bool (representing constraint ((aux1637 + aux1640 + aux1641)<=1))
c Var 'aux2431' direct represents '0' with '-8571'
c Var 'aux2431' direct represents '1' with '8571'
c Var 'aux2431' order represents '1' with '1'
c Var 'aux2431' order represents '0' with '-8571'
c Encoding variable: aux2432 with domain: bool (representing constraint (1<=(aux1637 + aux1640 + aux1641)))
c Var 'aux2432' direct represents '0' with '-8572'
c Var 'aux2432' direct represents '1' with '8572'
c Var 'aux2432' order represents '1' with '1'
c Var 'aux2432' order represents '0' with '-8572'
c Encoding variable: aux2433 with domain: bool (representing constraint ((aux1643 + aux1646 + aux1647)<=1))
c Var 'aux2433' direct represents '0' with '-8573'
c Var 'aux2433' direct represents '1' with '8573'
c Var 'aux2433' order represents '1' with '1'
c Var 'aux2433' order represents '0' with '-8573'
c Encoding variable: aux2434 with domain: bool (representing constraint (1<=(aux1643 + aux1646 + aux1647)))
c Var 'aux2434' direct represents '0' with '-8574'
c Var 'aux2434' direct represents '1' with '8574'
c Var 'aux2434' order represents '1' with '1'
c Var 'aux2434' order represents '0' with '-8574'
c Encoding variable: aux2435 with domain: bool (representing constraint ((aux1649 + aux1652 + aux1653)<=1))
c Var 'aux2435' direct represents '0' with '-8575'
c Var 'aux2435' direct represents '1' with '8575'
c Var 'aux2435' order represents '1' with '1'
c Var 'aux2435' order represents '0' with '-8575'
c Encoding variable: aux2436 with domain: bool (representing constraint (1<=(aux1649 + aux1652 + aux1653)))
c Var 'aux2436' direct represents '0' with '-8576'
c Var 'aux2436' direct represents '1' with '8576'
c Var 'aux2436' order represents '1' with '1'
c Var 'aux2436' order represents '0' with '-8576'
c Encoding variable: aux2437 with domain: bool (representing constraint ((aux1655 + aux1658 + aux1659)<=1))
c Var 'aux2437' direct represents '0' with '-8577'
c Var 'aux2437' direct represents '1' with '8577'
c Var 'aux2437' order represents '1' with '1'
c Var 'aux2437' order represents '0' with '-8577'
c Encoding variable: aux2438 with domain: bool (representing constraint (1<=(aux1655 + aux1658 + aux1659)))
c Var 'aux2438' direct represents '0' with '-8578'
c Var 'aux2438' direct represents '1' with '8578'
c Var 'aux2438' order represents '1' with '1'
c Var 'aux2438' order represents '0' with '-8578'
c Encoding variable: aux2439 with domain: bool (representing constraint ((aux1661 + aux1664 + aux1665)<=1))
c Var 'aux2439' direct represents '0' with '-8579'
c Var 'aux2439' direct represents '1' with '8579'
c Var 'aux2439' order represents '1' with '1'
c Var 'aux2439' order represents '0' with '-8579'
c Encoding variable: aux2440 with domain: bool (representing constraint (1<=(aux1661 + aux1664 + aux1665)))
c Var 'aux2440' direct represents '0' with '-8580'
c Var 'aux2440' direct represents '1' with '8580'
c Var 'aux2440' order represents '1' with '1'
c Var 'aux2440' order represents '0' with '-8580'
c Encoding variable: aux2441 with domain: bool (representing constraint ((aux1667 + aux1670 + aux1671)<=1))
c Var 'aux2441' direct represents '0' with '-8581'
c Var 'aux2441' direct represents '1' with '8581'
c Var 'aux2441' order represents '1' with '1'
c Var 'aux2441' order represents '0' with '-8581'
c Encoding variable: aux2442 with domain: bool (representing constraint (1<=(aux1667 + aux1670 + aux1671)))
c Var 'aux2442' direct represents '0' with '-8582'
c Var 'aux2442' direct represents '1' with '8582'
c Var 'aux2442' order represents '1' with '1'
c Var 'aux2442' order represents '0' with '-8582'
c Encoding variable: aux2443 with domain: bool (representing constraint ((aux1673 + aux1676 + aux1677)<=1))
c Var 'aux2443' direct represents '0' with '-8583'
c Var 'aux2443' direct represents '1' with '8583'
c Var 'aux2443' order represents '1' with '1'
c Var 'aux2443' order represents '0' with '-8583'
c Encoding variable: aux2444 with domain: bool (representing constraint (1<=(aux1673 + aux1676 + aux1677)))
c Var 'aux2444' direct represents '0' with '-8584'
c Var 'aux2444' direct represents '1' with '8584'
c Var 'aux2444' order represents '1' with '1'
c Var 'aux2444' order represents '0' with '-8584'
c Encoding variable: aux2445 with domain: bool (representing constraint ((aux1679 + aux1682 + aux1683)<=1))
c Var 'aux2445' direct represents '0' with '-8585'
c Var 'aux2445' direct represents '1' with '8585'
c Var 'aux2445' order represents '1' with '1'
c Var 'aux2445' order represents '0' with '-8585'
c Encoding variable: aux2446 with domain: bool (representing constraint (1<=(aux1679 + aux1682 + aux1683)))
c Var 'aux2446' direct represents '0' with '-8586'
c Var 'aux2446' direct represents '1' with '8586'
c Var 'aux2446' order represents '1' with '1'
c Var 'aux2446' order represents '0' with '-8586'
c Encoding variable: aux2447 with domain: bool (representing constraint ((aux1685 + aux1688 + aux1689)<=1))
c Var 'aux2447' direct represents '0' with '-8587'
c Var 'aux2447' direct represents '1' with '8587'
c Var 'aux2447' order represents '1' with '1'
c Var 'aux2447' order represents '0' with '-8587'
c Encoding variable: aux2448 with domain: bool (representing constraint (1<=(aux1685 + aux1688 + aux1689)))
c Var 'aux2448' direct represents '0' with '-8588'
c Var 'aux2448' direct represents '1' with '8588'
c Var 'aux2448' order represents '1' with '1'
c Var 'aux2448' order represents '0' with '-8588'
c Encoding variable: aux2449 with domain: bool (representing constraint ((aux1691 + aux1694 + aux1695)<=1))
c Var 'aux2449' direct represents '0' with '-8589'
c Var 'aux2449' direct represents '1' with '8589'
c Var 'aux2449' order represents '1' with '1'
c Var 'aux2449' order represents '0' with '-8589'
c Encoding variable: aux2450 with domain: bool (representing constraint (1<=(aux1691 + aux1694 + aux1695)))
c Var 'aux2450' direct represents '0' with '-8590'
c Var 'aux2450' direct represents '1' with '8590'
c Var 'aux2450' order represents '1' with '1'
c Var 'aux2450' order represents '0' with '-8590'
c Encoding variable: aux2451 with domain: bool (representing constraint ((aux1697 + aux1700 + aux1701)<=1))
c Var 'aux2451' direct represents '0' with '-8591'
c Var 'aux2451' direct represents '1' with '8591'
c Var 'aux2451' order represents '1' with '1'
c Var 'aux2451' order represents '0' with '-8591'
c Encoding variable: aux2452 with domain: bool (representing constraint (1<=(aux1697 + aux1700 + aux1701)))
c Var 'aux2452' direct represents '0' with '-8592'
c Var 'aux2452' direct represents '1' with '8592'
c Var 'aux2452' order represents '1' with '1'
c Var 'aux2452' order represents '0' with '-8592'
c Encoding variable: aux2453 with domain: bool (representing constraint ((aux1703 + aux1706 + aux1707)<=1))
c Var 'aux2453' direct represents '0' with '-8593'
c Var 'aux2453' direct represents '1' with '8593'
c Var 'aux2453' order represents '1' with '1'
c Var 'aux2453' order represents '0' with '-8593'
c Encoding variable: aux2454 with domain: bool (representing constraint (1<=(aux1703 + aux1706 + aux1707)))
c Var 'aux2454' direct represents '0' with '-8594'
c Var 'aux2454' direct represents '1' with '8594'
c Var 'aux2454' order represents '1' with '1'
c Var 'aux2454' order represents '0' with '-8594'
c Encoding variable: aux2455 with domain: bool (representing constraint ((aux1709 + aux1712 + aux1713)<=1))
c Var 'aux2455' direct represents '0' with '-8595'
c Var 'aux2455' direct represents '1' with '8595'
c Var 'aux2455' order represents '1' with '1'
c Var 'aux2455' order represents '0' with '-8595'
c Encoding variable: aux2456 with domain: bool (representing constraint (1<=(aux1709 + aux1712 + aux1713)))
c Var 'aux2456' direct represents '0' with '-8596'
c Var 'aux2456' direct represents '1' with '8596'
c Var 'aux2456' order represents '1' with '1'
c Var 'aux2456' order represents '0' with '-8596'
c Encoding variable: aux2457 with domain: bool (representing constraint ((aux1715 + aux1718 + aux1719)<=1))
c Var 'aux2457' direct represents '0' with '-8597'
c Var 'aux2457' direct represents '1' with '8597'
c Var 'aux2457' order represents '1' with '1'
c Var 'aux2457' order represents '0' with '-8597'
c Encoding variable: aux2458 with domain: bool (representing constraint (1<=(aux1715 + aux1718 + aux1719)))
c Var 'aux2458' direct represents '0' with '-8598'
c Var 'aux2458' direct represents '1' with '8598'
c Var 'aux2458' order represents '1' with '1'
c Var 'aux2458' order represents '0' with '-8598'
c Encoding variable: aux2459 with domain: bool (representing constraint ((aux1721 + aux1724 + aux1725)<=1))
c Var 'aux2459' direct represents '0' with '-8599'
c Var 'aux2459' direct represents '1' with '8599'
c Var 'aux2459' order represents '1' with '1'
c Var 'aux2459' order represents '0' with '-8599'
c Encoding variable: aux2460 with domain: bool (representing constraint (1<=(aux1721 + aux1724 + aux1725)))
c Var 'aux2460' direct represents '0' with '-8600'
c Var 'aux2460' direct represents '1' with '8600'
c Var 'aux2460' order represents '1' with '1'
c Var 'aux2460' order represents '0' with '-8600'
c Encoding variable: aux2461 with domain: bool (representing constraint ((aux1727 + aux1730 + aux1731)<=1))
c Var 'aux2461' direct represents '0' with '-8601'
c Var 'aux2461' direct represents '1' with '8601'
c Var 'aux2461' order represents '1' with '1'
c Var 'aux2461' order represents '0' with '-8601'
c Encoding variable: aux2462 with domain: bool (representing constraint (1<=(aux1727 + aux1730 + aux1731)))
c Var 'aux2462' direct represents '0' with '-8602'
c Var 'aux2462' direct represents '1' with '8602'
c Var 'aux2462' order represents '1' with '1'
c Var 'aux2462' order represents '0' with '-8602'
c Encoding variable: aux2463 with domain: bool (representing constraint ((aux1733 + aux1736 + aux1737)<=1))
c Var 'aux2463' direct represents '0' with '-8603'
c Var 'aux2463' direct represents '1' with '8603'
c Var 'aux2463' order represents '1' with '1'
c Var 'aux2463' order represents '0' with '-8603'
c Encoding variable: aux2464 with domain: bool (representing constraint (1<=(aux1733 + aux1736 + aux1737)))
c Var 'aux2464' direct represents '0' with '-8604'
c Var 'aux2464' direct represents '1' with '8604'
c Var 'aux2464' order represents '1' with '1'
c Var 'aux2464' order represents '0' with '-8604'
c Encoding variable: aux2465 with domain: bool (representing constraint ((aux1739 + aux1742 + aux1743)<=1))
c Var 'aux2465' direct represents '0' with '-8605'
c Var 'aux2465' direct represents '1' with '8605'
c Var 'aux2465' order represents '1' with '1'
c Var 'aux2465' order represents '0' with '-8605'
c Encoding variable: aux2466 with domain: bool (representing constraint (1<=(aux1739 + aux1742 + aux1743)))
c Var 'aux2466' direct represents '0' with '-8606'
c Var 'aux2466' direct represents '1' with '8606'
c Var 'aux2466' order represents '1' with '1'
c Var 'aux2466' order represents '0' with '-8606'
c Encoding variable: aux2467 with domain: bool (representing constraint ((aux1745 + aux1748 + aux1749)<=1))
c Var 'aux2467' direct represents '0' with '-8607'
c Var 'aux2467' direct represents '1' with '8607'
c Var 'aux2467' order represents '1' with '1'
c Var 'aux2467' order represents '0' with '-8607'
c Encoding variable: aux2468 with domain: bool (representing constraint (1<=(aux1745 + aux1748 + aux1749)))
c Var 'aux2468' direct represents '0' with '-8608'
c Var 'aux2468' direct represents '1' with '8608'
c Var 'aux2468' order represents '1' with '1'
c Var 'aux2468' order represents '0' with '-8608'
c Encoding variable: aux2469 with domain: bool (representing constraint ((aux1751 + aux1754 + aux1755)<=1))
c Var 'aux2469' direct represents '0' with '-8609'
c Var 'aux2469' direct represents '1' with '8609'
c Var 'aux2469' order represents '1' with '1'
c Var 'aux2469' order represents '0' with '-8609'
c Encoding variable: aux2470 with domain: bool (representing constraint (1<=(aux1751 + aux1754 + aux1755)))
c Var 'aux2470' direct represents '0' with '-8610'
c Var 'aux2470' direct represents '1' with '8610'
c Var 'aux2470' order represents '1' with '1'
c Var 'aux2470' order represents '0' with '-8610'
c Encoding variable: aux2471 with domain: bool (representing constraint ((aux1757 + aux1760 + aux1761)<=1))
c Var 'aux2471' direct represents '0' with '-8611'
c Var 'aux2471' direct represents '1' with '8611'
c Var 'aux2471' order represents '1' with '1'
c Var 'aux2471' order represents '0' with '-8611'
c Encoding variable: aux2472 with domain: bool (representing constraint (1<=(aux1757 + aux1760 + aux1761)))
c Var 'aux2472' direct represents '0' with '-8612'
c Var 'aux2472' direct represents '1' with '8612'
c Var 'aux2472' order represents '1' with '1'
c Var 'aux2472' order represents '0' with '-8612'
c Encoding variable: aux2473 with domain: bool (representing constraint ((aux1763 + aux1766 + aux1767)<=1))
c Var 'aux2473' direct represents '0' with '-8613'
c Var 'aux2473' direct represents '1' with '8613'
c Var 'aux2473' order represents '1' with '1'
c Var 'aux2473' order represents '0' with '-8613'
c Encoding variable: aux2474 with domain: bool (representing constraint (1<=(aux1763 + aux1766 + aux1767)))
c Var 'aux2474' direct represents '0' with '-8614'
c Var 'aux2474' direct represents '1' with '8614'
c Var 'aux2474' order represents '1' with '1'
c Var 'aux2474' order represents '0' with '-8614'
c Encoding variable: aux2475 with domain: bool (representing constraint ((aux1769 + aux1772 + aux1773)<=1))
c Var 'aux2475' direct represents '0' with '-8615'
c Var 'aux2475' direct represents '1' with '8615'
c Var 'aux2475' order represents '1' with '1'
c Var 'aux2475' order represents '0' with '-8615'
c Encoding variable: aux2476 with domain: bool (representing constraint (1<=(aux1769 + aux1772 + aux1773)))
c Var 'aux2476' direct represents '0' with '-8616'
c Var 'aux2476' direct represents '1' with '8616'
c Var 'aux2476' order represents '1' with '1'
c Var 'aux2476' order represents '0' with '-8616'
c Encoding variable: aux2477 with domain: bool (representing constraint ((aux1775 + aux1778 + aux1779)<=1))
c Var 'aux2477' direct represents '0' with '-8617'
c Var 'aux2477' direct represents '1' with '8617'
c Var 'aux2477' order represents '1' with '1'
c Var 'aux2477' order represents '0' with '-8617'
c Encoding variable: aux2478 with domain: bool (representing constraint (1<=(aux1775 + aux1778 + aux1779)))
c Var 'aux2478' direct represents '0' with '-8618'
c Var 'aux2478' direct represents '1' with '8618'
c Var 'aux2478' order represents '1' with '1'
c Var 'aux2478' order represents '0' with '-8618'
c Encoding variable: aux2479 with domain: bool (representing constraint ((aux1781 + aux1784 + aux1785)<=1))
c Var 'aux2479' direct represents '0' with '-8619'
c Var 'aux2479' direct represents '1' with '8619'
c Var 'aux2479' order represents '1' with '1'
c Var 'aux2479' order represents '0' with '-8619'
c Encoding variable: aux2480 with domain: bool (representing constraint (1<=(aux1781 + aux1784 + aux1785)))
c Var 'aux2480' direct represents '0' with '-8620'
c Var 'aux2480' direct represents '1' with '8620'
c Var 'aux2480' order represents '1' with '1'
c Var 'aux2480' order represents '0' with '-8620'
c Encoding variable: aux2481 with domain: bool (representing constraint ((aux1787 + aux1790 + aux1791)<=1))
c Var 'aux2481' direct represents '0' with '-8621'
c Var 'aux2481' direct represents '1' with '8621'
c Var 'aux2481' order represents '1' with '1'
c Var 'aux2481' order represents '0' with '-8621'
c Encoding variable: aux2482 with domain: bool (representing constraint (1<=(aux1787 + aux1790 + aux1791)))
c Var 'aux2482' direct represents '0' with '-8622'
c Var 'aux2482' direct represents '1' with '8622'
c Var 'aux2482' order represents '1' with '1'
c Var 'aux2482' order represents '0' with '-8622'
c Encoding variable: aux2483 with domain: bool (representing constraint ((aux1793 + aux1796 + aux1797)<=1))
c Var 'aux2483' direct represents '0' with '-8623'
c Var 'aux2483' direct represents '1' with '8623'
c Var 'aux2483' order represents '1' with '1'
c Var 'aux2483' order represents '0' with '-8623'
c Encoding variable: aux2484 with domain: bool (representing constraint (1<=(aux1793 + aux1796 + aux1797)))
c Var 'aux2484' direct represents '0' with '-8624'
c Var 'aux2484' direct represents '1' with '8624'
c Var 'aux2484' order represents '1' with '1'
c Var 'aux2484' order represents '0' with '-8624'
c Encoding variable: aux2485 with domain: bool (representing constraint ((aux1799 + aux1802 + aux1803)<=1))
c Var 'aux2485' direct represents '0' with '-8625'
c Var 'aux2485' direct represents '1' with '8625'
c Var 'aux2485' order represents '1' with '1'
c Var 'aux2485' order represents '0' with '-8625'
c Encoding variable: aux2486 with domain: bool (representing constraint (1<=(aux1799 + aux1802 + aux1803)))
c Var 'aux2486' direct represents '0' with '-8626'
c Var 'aux2486' direct represents '1' with '8626'
c Var 'aux2486' order represents '1' with '1'
c Var 'aux2486' order represents '0' with '-8626'
c Encoding variable: aux2487 with domain: bool (representing constraint ((aux1805 + aux1808 + aux1809)<=1))
c Var 'aux2487' direct represents '0' with '-8627'
c Var 'aux2487' direct represents '1' with '8627'
c Var 'aux2487' order represents '1' with '1'
c Var 'aux2487' order represents '0' with '-8627'
c Encoding variable: aux2488 with domain: bool (representing constraint (1<=(aux1805 + aux1808 + aux1809)))
c Var 'aux2488' direct represents '0' with '-8628'
c Var 'aux2488' direct represents '1' with '8628'
c Var 'aux2488' order represents '1' with '1'
c Var 'aux2488' order represents '0' with '-8628'
c Encoding variable: aux2489 with domain: bool (representing constraint ((aux1811 + aux1814 + aux1815)<=1))
c Var 'aux2489' direct represents '0' with '-8629'
c Var 'aux2489' direct represents '1' with '8629'
c Var 'aux2489' order represents '1' with '1'
c Var 'aux2489' order represents '0' with '-8629'
c Encoding variable: aux2490 with domain: bool (representing constraint (1<=(aux1811 + aux1814 + aux1815)))
c Var 'aux2490' direct represents '0' with '-8630'
c Var 'aux2490' direct represents '1' with '8630'
c Var 'aux2490' order represents '1' with '1'
c Var 'aux2490' order represents '0' with '-8630'
c Encoding variable: aux2491 with domain: bool (representing constraint ((aux1817 + aux1820 + aux1821)<=1))
c Var 'aux2491' direct represents '0' with '-8631'
c Var 'aux2491' direct represents '1' with '8631'
c Var 'aux2491' order represents '1' with '1'
c Var 'aux2491' order represents '0' with '-8631'
c Encoding variable: aux2492 with domain: bool (representing constraint (1<=(aux1817 + aux1820 + aux1821)))
c Var 'aux2492' direct represents '0' with '-8632'
c Var 'aux2492' direct represents '1' with '8632'
c Var 'aux2492' order represents '1' with '1'
c Var 'aux2492' order represents '0' with '-8632'
c Encoding variable: aux2493 with domain: bool (representing constraint ((aux1823 + aux1826 + aux1827)<=1))
c Var 'aux2493' direct represents '0' with '-8633'
c Var 'aux2493' direct represents '1' with '8633'
c Var 'aux2493' order represents '1' with '1'
c Var 'aux2493' order represents '0' with '-8633'
c Encoding variable: aux2494 with domain: bool (representing constraint (1<=(aux1823 + aux1826 + aux1827)))
c Var 'aux2494' direct represents '0' with '-8634'
c Var 'aux2494' direct represents '1' with '8634'
c Var 'aux2494' order represents '1' with '1'
c Var 'aux2494' order represents '0' with '-8634'
c Encoding variable: aux2495 with domain: bool (representing constraint ((aux1829 + aux1832 + aux1833)<=1))
c Var 'aux2495' direct represents '0' with '-8635'
c Var 'aux2495' direct represents '1' with '8635'
c Var 'aux2495' order represents '1' with '1'
c Var 'aux2495' order represents '0' with '-8635'
c Encoding variable: aux2496 with domain: bool (representing constraint (1<=(aux1829 + aux1832 + aux1833)))
c Var 'aux2496' direct represents '0' with '-8636'
c Var 'aux2496' direct represents '1' with '8636'
c Var 'aux2496' order represents '1' with '1'
c Var 'aux2496' order represents '0' with '-8636'
c Encoding variable: aux2497 with domain: bool (representing constraint ((aux1835 + aux1838 + aux1839)<=1))
c Var 'aux2497' direct represents '0' with '-8637'
c Var 'aux2497' direct represents '1' with '8637'
c Var 'aux2497' order represents '1' with '1'
c Var 'aux2497' order represents '0' with '-8637'
c Encoding variable: aux2498 with domain: bool (representing constraint (1<=(aux1835 + aux1838 + aux1839)))
c Var 'aux2498' direct represents '0' with '-8638'
c Var 'aux2498' direct represents '1' with '8638'
c Var 'aux2498' order represents '1' with '1'
c Var 'aux2498' order represents '0' with '-8638'
c Encoding variable: aux2499 with domain: bool (representing constraint ((aux1841 + aux1844 + aux1845)<=1))
c Var 'aux2499' direct represents '0' with '-8639'
c Var 'aux2499' direct represents '1' with '8639'
c Var 'aux2499' order represents '1' with '1'
c Var 'aux2499' order represents '0' with '-8639'
c Encoding variable: aux2500 with domain: bool (representing constraint (1<=(aux1841 + aux1844 + aux1845)))
c Var 'aux2500' direct represents '0' with '-8640'
c Var 'aux2500' direct represents '1' with '8640'
c Var 'aux2500' order represents '1' with '1'
c Var 'aux2500' order represents '0' with '-8640'
c Encoding variable: aux2501 with domain: bool (representing constraint ((aux1847 + aux1850 + aux1851)<=1))
c Var 'aux2501' direct represents '0' with '-8641'
c Var 'aux2501' direct represents '1' with '8641'
c Var 'aux2501' order represents '1' with '1'
c Var 'aux2501' order represents '0' with '-8641'
c Encoding variable: aux2502 with domain: bool (representing constraint (1<=(aux1847 + aux1850 + aux1851)))
c Var 'aux2502' direct represents '0' with '-8642'
c Var 'aux2502' direct represents '1' with '8642'
c Var 'aux2502' order represents '1' with '1'
c Var 'aux2502' order represents '0' with '-8642'
c Encoding variable: aux2503 with domain: bool (representing constraint ((aux1853 + aux1856 + aux1857)<=1))
c Var 'aux2503' direct represents '0' with '-8643'
c Var 'aux2503' direct represents '1' with '8643'
c Var 'aux2503' order represents '1' with '1'
c Var 'aux2503' order represents '0' with '-8643'
c Encoding variable: aux2504 with domain: bool (representing constraint (1<=(aux1853 + aux1856 + aux1857)))
c Var 'aux2504' direct represents '0' with '-8644'
c Var 'aux2504' direct represents '1' with '8644'
c Var 'aux2504' order represents '1' with '1'
c Var 'aux2504' order represents '0' with '-8644'
c Encoding variable: aux2505 with domain: bool (representing constraint ((aux1859 + aux1862 + aux1863)<=1))
c Var 'aux2505' direct represents '0' with '-8645'
c Var 'aux2505' direct represents '1' with '8645'
c Var 'aux2505' order represents '1' with '1'
c Var 'aux2505' order represents '0' with '-8645'
c Encoding variable: aux2506 with domain: bool (representing constraint (1<=(aux1859 + aux1862 + aux1863)))
c Var 'aux2506' direct represents '0' with '-8646'
c Var 'aux2506' direct represents '1' with '8646'
c Var 'aux2506' order represents '1' with '1'
c Var 'aux2506' order represents '0' with '-8646'
c Encoding variable: aux2507 with domain: bool (representing constraint ((aux1865 + aux1868 + aux1869)<=1))
c Var 'aux2507' direct represents '0' with '-8647'
c Var 'aux2507' direct represents '1' with '8647'
c Var 'aux2507' order represents '1' with '1'
c Var 'aux2507' order represents '0' with '-8647'
c Encoding variable: aux2508 with domain: bool (representing constraint (1<=(aux1865 + aux1868 + aux1869)))
c Var 'aux2508' direct represents '0' with '-8648'
c Var 'aux2508' direct represents '1' with '8648'
c Var 'aux2508' order represents '1' with '1'
c Var 'aux2508' order represents '0' with '-8648'
c Encoding variable: aux2509 with domain: bool (representing constraint ((aux1871 + aux1874 + aux1875)<=1))
c Var 'aux2509' direct represents '0' with '-8649'
c Var 'aux2509' direct represents '1' with '8649'
c Var 'aux2509' order represents '1' with '1'
c Var 'aux2509' order represents '0' with '-8649'
c Encoding variable: aux2510 with domain: bool (representing constraint (1<=(aux1871 + aux1874 + aux1875)))
c Var 'aux2510' direct represents '0' with '-8650'
c Var 'aux2510' direct represents '1' with '8650'
c Var 'aux2510' order represents '1' with '1'
c Var 'aux2510' order represents '0' with '-8650'
c Encoding variable: aux2511 with domain: bool (representing constraint ((aux1877 + aux1880 + aux1881)<=1))
c Var 'aux2511' direct represents '0' with '-8651'
c Var 'aux2511' direct represents '1' with '8651'
c Var 'aux2511' order represents '1' with '1'
c Var 'aux2511' order represents '0' with '-8651'
c Encoding variable: aux2512 with domain: bool (representing constraint (1<=(aux1877 + aux1880 + aux1881)))
c Var 'aux2512' direct represents '0' with '-8652'
c Var 'aux2512' direct represents '1' with '8652'
c Var 'aux2512' order represents '1' with '1'
c Var 'aux2512' order represents '0' with '-8652'
c Encoding variable: aux2513 with domain: bool (representing constraint ((aux1883 + aux1886 + aux1887)<=1))
c Var 'aux2513' direct represents '0' with '-8653'
c Var 'aux2513' direct represents '1' with '8653'
c Var 'aux2513' order represents '1' with '1'
c Var 'aux2513' order represents '0' with '-8653'
c Encoding variable: aux2514 with domain: bool (representing constraint (1<=(aux1883 + aux1886 + aux1887)))
c Var 'aux2514' direct represents '0' with '-8654'
c Var 'aux2514' direct represents '1' with '8654'
c Var 'aux2514' order represents '1' with '1'
c Var 'aux2514' order represents '0' with '-8654'
c Encoding variable: aux2515 with domain: bool (representing constraint ((aux1889 + aux1892 + aux1893)<=1))
c Var 'aux2515' direct represents '0' with '-8655'
c Var 'aux2515' direct represents '1' with '8655'
c Var 'aux2515' order represents '1' with '1'
c Var 'aux2515' order represents '0' with '-8655'
c Encoding variable: aux2516 with domain: bool (representing constraint (1<=(aux1889 + aux1892 + aux1893)))
c Var 'aux2516' direct represents '0' with '-8656'
c Var 'aux2516' direct represents '1' with '8656'
c Var 'aux2516' order represents '1' with '1'
c Var 'aux2516' order represents '0' with '-8656'
c (((x_00001_00001 + x_00001_00002)<=11)=tv=SATLiteral(8115))
-8115 3 30 0
-8115 5 28 0
-8115 7 26 0
-8115 9 24 0
-8115 11 22 0
-8115 13 20 0
-8115 15 18 0
8115 -18 0
8115 -15 -20 0
8115 -13 -22 0
8115 -11 -24 0
8115 -9 -26 0
8115 -7 -28 0
8115 -5 -30 0
8115 -3 0
8115 -2 0
c ((11<=(x_00001_00001 + x_00001_00002))=tv=SATLiteral(8116))
-8116 -17 0
-8116 -15 -18 0
-8116 -13 -20 0
-8116 -11 -22 0
-8116 -9 -24 0
-8116 -7 -26 0
-8116 -5 -28 0
-8116 -3 -30 0
-8116 -2 0
8116 2 30 0
8116 3 28 0
8116 5 26 0
8116 7 24 0
8116 9 22 0
8116 11 20 0
8116 13 18 0
8116 15 17 0
c (((x_00002_00003 + x_00001_00003)<=8)=tv=SATLiteral(8117))
-8117 43 0
-8117 167 41 0
-8117 168 39 0
-8117 170 37 0
-8117 172 35 0
-8117 174 33 0
-8117 176 32 0
-8117 178 0
-8117 180 0
8117 -178 -32 0
8117 -176 -33 0
8117 -174 -35 0
8117 -172 -37 0
8117 -170 -39 0
8117 -168 -41 0
8117 -167 -43 0
c ((8<=(x_00002_00003 + x_00001_00003))=tv=SATLiteral(8118))
-8118 -176 -32 0
-8118 -174 -33 0
-8118 -172 -35 0
-8118 -170 -37 0
-8118 -168 -39 0
-8118 -167 -41 0
8118 41 0
8118 167 39 0
8118 168 37 0
8118 170 35 0
8118 172 33 0
8118 174 32 0
8118 176 0
8118 178 0
8118 180 0
c (((x_00002_00004 + x_00001_00004 + x_00001_00005)<=14)=tv=SATLiteral(8119))
-8119 52 75 0
-8119 54 73 0
-8119 56 71 0
-8119 58 69 0
-8119 60 67 0
-8119 182 50 75 0
-8119 182 52 73 0
-8119 182 54 71 0
-8119 182 56 69 0
-8119 182 58 67 0
-8119 182 60 65 0
-8119 183 48 75 0
-8119 183 50 73 0
-8119 183 52 71 0
-8119 183 54 69 0
-8119 183 56 67 0
-8119 183 58 65 0
-8119 183 60 63 0
-8119 185 47 75 0
-8119 185 48 73 0
-8119 185 50 71 0
-8119 185 52 69 0
-8119 185 54 67 0
-8119 185 56 65 0
-8119 185 58 63 0
-8119 185 60 62 0
-8119 187 75 0
-8119 187 47 73 0
-8119 187 48 71 0
-8119 187 50 69 0
-8119 187 52 67 0
-8119 187 54 65 0
-8119 187 56 63 0
-8119 187 58 62 0
-8119 187 60 0
-8119 189 73 0
-8119 189 47 71 0
-8119 189 48 69 0
-8119 189 50 67 0
-8119 189 52 65 0
-8119 189 54 63 0
-8119 189 56 62 0
-8119 189 58 0
-8119 189 60 0
-8119 191 71 0
-8119 191 47 69 0
-8119 191 48 67 0
-8119 191 50 65 0
-8119 191 52 63 0
-8119 191 54 62 0
-8119 191 56 0
-8119 191 58 0
-8119 191 60 0
-8119 193 69 0
-8119 193 47 67 0
-8119 193 48 65 0
-8119 193 50 63 0
-8119 193 52 62 0
-8119 193 54 0
-8119 193 56 0
-8119 193 58 0
-8119 193 60 0
-8119 195 67 0
-8119 195 47 65 0
-8119 195 48 63 0
-8119 195 50 62 0
-8119 195 52 0
-8119 195 54 0
-8119 195 56 0
-8119 195 58 0
-8119 195 60 0
8119 -52 -62 0
8119 -50 -63 0
8119 -48 -65 0
8119 -47 -67 0
8119 -195 -54 -62 0
8119 -195 -52 -63 0
8119 -195 -50 -65 0
8119 -195 -48 -67 0
8119 -195 -47 -69 0
8119 -193 -56 -62 0
8119 -193 -54 -63 0
8119 -193 -52 -65 0
8119 -193 -50 -67 0
8119 -193 -48 -69 0
8119 -193 -47 -71 0
8119 -191 -58 -62 0
8119 -191 -56 -63 0
8119 -191 -54 -65 0
8119 -191 -52 -67 0
8119 -191 -50 -69 0
8119 -191 -48 -71 0
8119 -191 -47 -73 0
8119 -189 -60 -62 0
8119 -189 -58 -63 0
8119 -189 -56 -65 0
8119 -189 -54 -67 0
8119 -189 -52 -69 0
8119 -189 -50 -71 0
8119 -189 -48 -73 0
8119 -189 -47 -75 0
8119 -187 -62 0
8119 -187 -60 -63 0
8119 -187 -58 -65 0
8119 -187 -56 -67 0
8119 -187 -54 -69 0
8119 -187 -52 -71 0
8119 -187 -50 -73 0
8119 -187 -48 -75 0
8119 -187 -47 0
8119 -185 -63 0
8119 -185 -60 -65 0
8119 -185 -58 -67 0
8119 -185 -56 -69 0
8119 -185 -54 -71 0
8119 -185 -52 -73 0
8119 -185 -50 -75 0
8119 -185 -48 0
8119 -185 -47 0
8119 -183 -65 0
8119 -183 -60 -67 0
8119 -183 -58 -69 0
8119 -183 -56 -71 0
8119 -183 -54 -73 0
8119 -183 -52 -75 0
8119 -183 -50 0
8119 -183 -48 0
8119 -183 -47 0
8119 -182 -67 0
8119 -182 -60 -69 0
8119 -182 -58 -71 0
8119 -182 -56 -73 0
8119 -182 -54 -75 0
8119 -182 -52 0
8119 -182 -50 0
8119 -182 -48 0
8119 -182 -47 0
c ((14<=(x_00002_00004 + x_00001_00004 + x_00001_00005))=tv=SATLiteral(8120))
-8120 -50 -62 0
-8120 -48 -63 0
-8120 -47 -65 0
-8120 -195 -52 -62 0
-8120 -195 -50 -63 0
-8120 -195 -48 -65 0
-8120 -195 -47 -67 0
-8120 -193 -54 -62 0
-8120 -193 -52 -63 0
-8120 -193 -50 -65 0
-8120 -193 -48 -67 0
-8120 -193 -47 -69 0
-8120 -191 -56 -62 0
-8120 -191 -54 -63 0
-8120 -191 -52 -65 0
-8120 -191 -50 -67 0
-8120 -191 -48 -69 0
-8120 -191 -47 -71 0
-8120 -189 -58 -62 0
-8120 -189 -56 -63 0
-8120 -189 -54 -65 0
-8120 -189 -52 -67 0
-8120 -189 -50 -69 0
-8120 -189 -48 -71 0
-8120 -189 -47 -73 0
-8120 -187 -60 -62 0
-8120 -187 -58 -63 0
-8120 -187 -56 -65 0
-8120 -187 -54 -67 0
-8120 -187 -52 -69 0
-8120 -187 -50 -71 0
-8120 -187 -48 -73 0
-8120 -187 -47 -75 0
-8120 -185 -62 0
-8120 -185 -60 -63 0
-8120 -185 -58 -65 0
-8120 -185 -56 -67 0
-8120 -185 -54 -69 0
-8120 -185 -52 -71 0
-8120 -185 -50 -73 0
-8120 -185 -48 -75 0
-8120 -185 -47 0
-8120 -183 -63 0
-8120 -183 -60 -65 0
-8120 -183 -58 -67 0
-8120 -183 -56 -69 0
-8120 -183 -54 -71 0
-8120 -183 -52 -73 0
-8120 -183 -50 -75 0
-8120 -183 -48 0
-8120 -183 -47 0
-8120 -182 -65 0
-8120 -182 -60 -67 0
-8120 -182 -58 -69 0
-8120 -182 -56 -71 0
-8120 -182 -54 -73 0
-8120 -182 -52 -75 0
-8120 -182 -50 0
-8120 -182 -48 0
-8120 -182 -47 0
8120 50 75 0
8120 52 73 0
8120 54 71 0
8120 56 69 0
8120 58 67 0
8120 60 65 0
8120 182 48 75 0
8120 182 50 73 0
8120 182 52 71 0
8120 182 54 69 0
8120 182 56 67 0
8120 182 58 65 0
8120 182 60 63 0
8120 183 47 75 0
8120 183 48 73 0
8120 183 50 71 0
8120 183 52 69 0
8120 183 54 67 0
8120 183 56 65 0
8120 183 58 63 0
8120 183 60 62 0
8120 185 75 0
8120 185 47 73 0
8120 185 48 71 0
8120 185 50 69 0
8120 185 52 67 0
8120 185 54 65 0
8120 185 56 63 0
8120 185 58 62 0
8120 185 60 0
8120 187 73 0
8120 187 47 71 0
8120 187 48 69 0
8120 187 50 67 0
8120 187 52 65 0
8120 187 54 63 0
8120 187 56 62 0
8120 187 58 0
8120 187 60 0
8120 189 71 0
8120 189 47 69 0
8120 189 48 67 0
8120 189 50 65 0
8120 189 52 63 0
8120 189 54 62 0
8120 189 56 0
8120 189 58 0
8120 189 60 0
8120 191 69 0
8120 191 47 67 0
8120 191 48 65 0
8120 191 50 63 0
8120 191 52 62 0
8120 191 54 0
8120 191 56 0
8120 191 58 0
8120 191 60 0
8120 193 67 0
8120 193 47 65 0
8120 193 48 63 0
8120 193 50 62 0
8120 193 52 0
8120 193 54 0
8120 193 56 0
8120 193 58 0
8120 193 60 0
8120 195 65 0
8120 195 47 63 0
8120 195 48 62 0
8120 195 50 0
8120 195 52 0
8120 195 54 0
8120 195 56 0
8120 195 58 0
8120 195 60 0
c (((x_00001_00006 + x_00001_00007)<=6)=tv=SATLiteral(8121))
-8121 99 0
-8121 77 97 0
-8121 78 95 0
-8121 80 93 0
-8121 82 92 0
-8121 84 0
-8121 86 0
-8121 88 0
-8121 90 0
8121 -84 -92 0
8121 -82 -93 0
8121 -80 -95 0
8121 -78 -97 0
8121 -77 -99 0
c ((6<=(x_00001_00006 + x_00001_00007))=tv=SATLiteral(8122))
-8122 -82 -92 0
-8122 -80 -93 0
-8122 -78 -95 0
-8122 -77 -97 0
8122 97 0
8122 77 95 0
8122 78 93 0
8122 80 92 0
8122 82 0
8122 84 0
8122 86 0
8122 88 0
8122 90 0
c (((x_00002_00009 + x_00001_00008 + x_00001_00009)<=23)=tv=SATLiteral(8123))
-8123 264 120 135 0
-8123 266 118 135 0
-8123 266 120 133 0
-8123 268 116 135 0
-8123 268 118 133 0
-8123 268 120 131 0
-8123 270 114 135 0
-8123 270 116 133 0
-8123 270 118 131 0
-8123 270 120 129 0
8123 -129 0
8123 -120 -131 0
8123 -118 -133 0
8123 -116 -135 0
8123 -114 0
8123 -112 0
8123 -110 0
8123 -108 0
8123 -107 0
8123 -270 -131 0
8123 -270 -120 -133 0
8123 -270 -118 -135 0
8123 -270 -116 0
8123 -270 -114 0
8123 -270 -112 0
8123 -270 -110 0
8123 -270 -108 0
8123 -270 -107 0
8123 -268 -133 0
8123 -268 -120 -135 0
8123 -268 -118 0
8123 -268 -116 0
8123 -268 -114 0
8123 -268 -112 0
8123 -268 -110 0
8123 -268 -108 0
8123 -268 -107 0
8123 -266 -135 0
8123 -266 -120 0
8123 -266 -118 0
8123 -266 -116 0
8123 -266 -114 0
8123 -266 -112 0
8123 -266 -110 0
8123 -266 -108 0
8123 -266 -107 0
8123 -264 0
8123 -264 -120 0
8123 -264 -118 0
8123 -264 -116 0
8123 -264 -114 0
8123 -264 -112 0
8123 -264 -110 0
8123 -264 -108 0
8123 -264 -107 0
8123 -262 0
8123 -262 -120 0
8123 -262 -118 0
8123 -262 -116 0
8123 -262 -114 0
8123 -262 -112 0
8123 -262 -110 0
8123 -262 -108 0
8123 -262 -107 0
8123 -260 0
8123 -260 -120 0
8123 -260 -118 0
8123 -260 -116 0
8123 -260 -114 0
8123 -260 -112 0
8123 -260 -110 0
8123 -260 -108 0
8123 -260 -107 0
8123 -258 0
8123 -258 -120 0
8123 -258 -118 0
8123 -258 -116 0
8123 -258 -114 0
8123 -258 -112 0
8123 -258 -110 0
8123 -258 -108 0
8123 -258 -107 0
8123 -257 0
8123 -257 -120 0
8123 -257 -118 0
8123 -257 -116 0
8123 -257 -114 0
8123 -257 -112 0
8123 -257 -110 0
8123 -257 -108 0
8123 -257 -107 0
c ((23<=(x_00002_00009 + x_00001_00008 + x_00001_00009))=tv=SATLiteral(8124))
-8124 -127 0
-8124 -120 -129 0
-8124 -118 -131 0
-8124 -116 -133 0
-8124 -114 -135 0
-8124 -112 0
-8124 -110 0
-8124 -108 0
-8124 -107 0
-8124 -270 -129 0
-8124 -270 -120 -131 0
-8124 -270 -118 -133 0
-8124 -270 -116 -135 0
-8124 -270 -114 0
-8124 -270 -112 0
-8124 -270 -110 0
-8124 -270 -108 0
-8124 -270 -107 0
-8124 -268 -131 0
-8124 -268 -120 -133 0
-8124 -268 -118 -135 0
-8124 -268 -116 0
-8124 -268 -114 0
-8124 -268 -112 0
-8124 -268 -110 0
-8124 -268 -108 0
-8124 -268 -107 0
-8124 -266 -133 0
-8124 -266 -120 -135 0
-8124 -266 -118 0
-8124 -266 -116 0
-8124 -266 -114 0
-8124 -266 -112 0
-8124 -266 -110 0
-8124 -266 -108 0
-8124 -266 -107 0
-8124 -264 -135 0
-8124 -264 -120 0
-8124 -264 -118 0
-8124 -264 -116 0
-8124 -264 -114 0
-8124 -264 -112 0
-8124 -264 -110 0
-8124 -264 -108 0
-8124 -264 -107 0
-8124 -262 0
-8124 -262 -120 0
-8124 -262 -118 0
-8124 -262 -116 0
-8124 -262 -114 0
-8124 -262 -112 0
-8124 -262 -110 0
-8124 -262 -108 0
-8124 -262 -107 0
-8124 -260 0
-8124 -260 -120 0
-8124 -260 -118 0
-8124 -260 -116 0
-8124 -260 -114 0
-8124 -260 -112 0
-8124 -260 -110 0
-8124 -260 -108 0
-8124 -260 -107 0
-8124 -258 0
-8124 -258 -120 0
-8124 -258 -118 0
-8124 -258 -116 0
-8124 -258 -114 0
-8124 -258 -112 0
-8124 -258 -110 0
-8124 -258 -108 0
-8124 -258 -107 0
-8124 -257 0
-8124 -257 -120 0
-8124 -257 -118 0
-8124 -257 -116 0
-8124 -257 -114 0
-8124 -257 -112 0
-8124 -257 -110 0
-8124 -257 -108 0
-8124 -257 -107 0
8124 262 120 135 0
8124 264 118 135 0
8124 264 120 133 0
8124 266 116 135 0
8124 266 118 133 0
8124 266 120 131 0
8124 268 114 135 0
8124 268 116 133 0
8124 268 118 131 0
8124 268 120 129 0
8124 270 112 135 0
8124 270 114 133 0
8124 270 116 131 0
8124 270 118 129 0
8124 270 120 127 0
c (((x_00002_00001 + x_00002_00002)<=11)=tv=SATLiteral(8125))
-8125 138 165 0
-8125 140 163 0
-8125 142 161 0
-8125 144 159 0
-8125 146 157 0
-8125 148 155 0
-8125 150 153 0
8125 -153 0
8125 -150 -155 0
8125 -148 -157 0
8125 -146 -159 0
8125 -144 -161 0
8125 -142 -163 0
8125 -140 -165 0
8125 -138 0
8125 -137 0
c ((11<=(x_00002_00001 + x_00002_00002))=tv=SATLiteral(8126))
-8126 -152 0
-8126 -150 -153 0
-8126 -148 -155 0
-8126 -146 -157 0
-8126 -144 -159 0
-8126 -142 -161 0
-8126 -140 -163 0
-8126 -138 -165 0
-8126 -137 0
8126 137 165 0
8126 138 163 0
8126 140 161 0
8126 142 159 0
8126 144 157 0
8126 146 155 0
8126 148 153 0
8126 150 152 0
c (((x_00002_00005 + x_00002_00006)<=14)=tv=SATLiteral(8127))
-8127 204 225 0
-8127 206 223 0
-8127 208 221 0
-8127 210 219 0
8127 -219 0
8127 -210 -221 0
8127 -208 -223 0
8127 -206 -225 0
8127 -204 0
8127 -202 0
8127 -200 0
8127 -198 0
8127 -197 0
c ((14<=(x_00002_00005 + x_00002_00006))=tv=SATLiteral(8128))
-8128 -217 0
-8128 -210 -219 0
-8128 -208 -221 0
-8128 -206 -223 0
-8128 -204 -225 0
-8128 -202 0
-8128 -200 0
-8128 -198 0
-8128 -197 0
8128 202 225 0
8128 204 223 0
8128 206 221 0
8128 208 219 0
8128 210 217 0
c (((x_00002_00007 + x_00002_00008 + x_00003_00008)<=6)=tv=SATLiteral(8129))
-8129 382 0
-8129 242 380 0
-8129 243 378 0
-8129 245 377 0
-8129 247 0
-8129 249 0
-8129 251 0
-8129 253 0
-8129 255 0
-8129 227 380 0
-8129 227 242 378 0
-8129 227 243 377 0
-8129 227 245 0
-8129 227 247 0
-8129 227 249 0
-8129 227 251 0
-8129 227 253 0
-8129 227 255 0
-8129 228 378 0
-8129 228 242 377 0
-8129 228 243 0
-8129 228 245 0
-8129 228 247 0
-8129 228 249 0
-8129 228 251 0
-8129 228 253 0
-8129 228 255 0
-8129 230 377 0
-8129 230 242 0
-8129 230 243 0
-8129 230 245 0
-8129 230 247 0
-8129 230 249 0
-8129 230 251 0
-8129 230 253 0
-8129 230 255 0
-8129 232 0
-8129 232 242 0
-8129 232 243 0
-8129 232 245 0
-8129 232 247 0
-8129 232 249 0
-8129 232 251 0
-8129 232 253 0
-8129 232 255 0
-8129 234 0
-8129 234 242 0
-8129 234 243 0
-8129 234 245 0
-8129 234 247 0
-8129 234 249 0
-8129 234 251 0
-8129 234 253 0
-8129 234 255 0
-8129 236 0
-8129 236 242 0
-8129 236 243 0
-8129 236 245 0
-8129 236 247 0
-8129 236 249 0
-8129 236 251 0
-8129 236 253 0
-8129 236 255 0
-8129 238 0
-8129 238 242 0
-8129 238 243 0
-8129 238 245 0
-8129 238 247 0
-8129 238 249 0
-8129 238 251 0
-8129 238 253 0
-8129 238 255 0
-8129 240 0
-8129 240 242 0
-8129 240 243 0
-8129 240 245 0
-8129 240 247 0
-8129 240 249 0
-8129 240 251 0
-8129 240 253 0
-8129 240 255 0
8129 -232 -242 -377 0
8129 -230 -243 -377 0
8129 -230 -242 -378 0
8129 -228 -245 -377 0
8129 -228 -243 -378 0
8129 -228 -242 -380 0
8129 -227 -247 -377 0
8129 -227 -245 -378 0
8129 -227 -243 -380 0
8129 -227 -242 -382 0
c ((6<=(x_00002_00007 + x_00002_00008 + x_00003_00008))=tv=SATLiteral(8130))
-8130 -230 -242 -377 0
-8130 -228 -243 -377 0
-8130 -228 -242 -378 0
-8130 -227 -245 -377 0
-8130 -227 -243 -378 0
-8130 -227 -242 -380 0
8130 380 0
8130 242 378 0
8130 243 377 0
8130 245 0
8130 247 0
8130 249 0
8130 251 0
8130 253 0
8130 255 0
8130 227 378 0
8130 227 242 377 0
8130 227 243 0
8130 227 245 0
8130 227 247 0
8130 227 249 0
8130 227 251 0
8130 227 253 0
8130 227 255 0
8130 228 377 0
8130 228 242 0
8130 228 243 0
8130 228 245 0
8130 228 247 0
8130 228 249 0
8130 228 251 0
8130 228 253 0
8130 228 255 0
8130 230 0
8130 230 242 0
8130 230 243 0
8130 230 245 0
8130 230 247 0
8130 230 249 0
8130 230 251 0
8130 230 253 0
8130 230 255 0
8130 232 0
8130 232 242 0
8130 232 243 0
8130 232 245 0
8130 232 247 0
8130 232 249 0
8130 232 251 0
8130 232 253 0
8130 232 255 0
8130 234 0
8130 234 242 0
8130 234 243 0
8130 234 245 0
8130 234 247 0
8130 234 249 0
8130 234 251 0
8130 234 253 0
8130 234 255 0
8130 236 0
8130 236 242 0
8130 236 243 0
8130 236 245 0
8130 236 247 0
8130 236 249 0
8130 236 251 0
8130 236 253 0
8130 236 255 0
8130 238 0
8130 238 242 0
8130 238 243 0
8130 238 245 0
8130 238 247 0
8130 238 249 0
8130 238 251 0
8130 238 253 0
8130 238 255 0
8130 240 0
8130 240 242 0
8130 240 243 0
8130 240 245 0
8130 240 247 0
8130 240 249 0
8130 240 251 0
8130 240 253 0
8130 240 255 0
c (((aux427 + shift(x_00005_00001, -1) + shift(x_00004_00001, -1))<=14)=tv=SATLiteral(8131))
-8131 1754 0
-8131 407 1752 0
-8131 408 1750 0
-8131 410 1748 0
-8131 412 1746 0
-8131 414 1744 0
-8131 416 1742 0
-8131 418 1740 0
-8131 420 1738 0
-8131 542 1752 0
-8131 542 407 1750 0
-8131 542 408 1748 0
-8131 542 410 1746 0
-8131 542 412 1744 0
-8131 542 414 1742 0
-8131 542 416 1740 0
-8131 542 418 1738 0
-8131 542 420 1736 0
-8131 543 1750 0
-8131 543 407 1748 0
-8131 543 408 1746 0
-8131 543 410 1744 0
-8131 543 412 1742 0
-8131 543 414 1740 0
-8131 543 416 1738 0
-8131 543 418 1736 0
-8131 543 420 1734 0
-8131 545 1748 0
-8131 545 407 1746 0
-8131 545 408 1744 0
-8131 545 410 1742 0
-8131 545 412 1740 0
-8131 545 414 1738 0
-8131 545 416 1736 0
-8131 545 418 1734 0
-8131 545 420 1732 0
-8131 547 1746 0
-8131 547 407 1744 0
-8131 547 408 1742 0
-8131 547 410 1740 0
-8131 547 412 1738 0
-8131 547 414 1736 0
-8131 547 416 1734 0
-8131 547 418 1732 0
-8131 547 420 1730 0
-8131 549 1744 0
-8131 549 407 1742 0
-8131 549 408 1740 0
-8131 549 410 1738 0
-8131 549 412 1736 0
-8131 549 414 1734 0
-8131 549 416 1732 0
-8131 549 418 1730 0
-8131 549 420 1728 0
-8131 551 1742 0
-8131 551 407 1740 0
-8131 551 408 1738 0
-8131 551 410 1736 0
-8131 551 412 1734 0
-8131 551 414 1732 0
-8131 551 416 1730 0
-8131 551 418 1728 0
-8131 551 420 1727 0
-8131 553 1740 0
-8131 553 407 1738 0
-8131 553 408 1736 0
-8131 553 410 1734 0
-8131 553 412 1732 0
-8131 553 414 1730 0
-8131 553 416 1728 0
-8131 553 418 1727 0
-8131 553 420 0
-8131 555 1738 0
-8131 555 407 1736 0
-8131 555 408 1734 0
-8131 555 410 1732 0
-8131 555 412 1730 0
-8131 555 414 1728 0
-8131 555 416 1727 0
-8131 555 418 0
-8131 555 420 0
8131 -418 -1727 0
8131 -416 -1728 0
8131 -414 -1730 0
8131 -412 -1732 0
8131 -410 -1734 0
8131 -408 -1736 0
8131 -407 -1738 0
8131 -555 -420 -1727 0
8131 -555 -418 -1728 0
8131 -555 -416 -1730 0
8131 -555 -414 -1732 0
8131 -555 -412 -1734 0
8131 -555 -410 -1736 0
8131 -555 -408 -1738 0
8131 -555 -407 -1740 0
8131 -553 -1727 0
8131 -553 -420 -1728 0
8131 -553 -418 -1730 0
8131 -553 -416 -1732 0
8131 -553 -414 -1734 0
8131 -553 -412 -1736 0
8131 -553 -410 -1738 0
8131 -553 -408 -1740 0
8131 -553 -407 -1742 0
8131 -551 -1728 0
8131 -551 -420 -1730 0
8131 -551 -418 -1732 0
8131 -551 -416 -1734 0
8131 -551 -414 -1736 0
8131 -551 -412 -1738 0
8131 -551 -410 -1740 0
8131 -551 -408 -1742 0
8131 -551 -407 -1744 0
8131 -549 -1730 0
8131 -549 -420 -1732 0
8131 -549 -418 -1734 0
8131 -549 -416 -1736 0
8131 -549 -414 -1738 0
8131 -549 -412 -1740 0
8131 -549 -410 -1742 0
8131 -549 -408 -1744 0
8131 -549 -407 -1746 0
8131 -547 -1732 0
8131 -547 -420 -1734 0
8131 -547 -418 -1736 0
8131 -547 -416 -1738 0
8131 -547 -414 -1740 0
8131 -547 -412 -1742 0
8131 -547 -410 -1744 0
8131 -547 -408 -1746 0
8131 -547 -407 -1748 0
8131 -545 -1734 0
8131 -545 -420 -1736 0
8131 -545 -418 -1738 0
8131 -545 -416 -1740 0
8131 -545 -414 -1742 0
8131 -545 -412 -1744 0
8131 -545 -410 -1746 0
8131 -545 -408 -1748 0
8131 -545 -407 -1750 0
8131 -543 -1736 0
8131 -543 -420 -1738 0
8131 -543 -418 -1740 0
8131 -543 -416 -1742 0
8131 -543 -414 -1744 0
8131 -543 -412 -1746 0
8131 -543 -410 -1748 0
8131 -543 -408 -1750 0
8131 -543 -407 -1752 0
8131 -542 -1738 0
8131 -542 -420 -1740 0
8131 -542 -418 -1742 0
8131 -542 -416 -1744 0
8131 -542 -414 -1746 0
8131 -542 -412 -1748 0
8131 -542 -410 -1750 0
8131 -542 -408 -1752 0
8131 -542 -407 -1754 0
c ((14<=(aux427 + shift(x_00005_00001, -1) + shift(x_00004_00001, -1)))=tv=SATLiteral(8132))
-8132 -416 -1727 0
-8132 -414 -1728 0
-8132 -412 -1730 0
-8132 -410 -1732 0
-8132 -408 -1734 0
-8132 -407 -1736 0
-8132 -555 -418 -1727 0
-8132 -555 -416 -1728 0
-8132 -555 -414 -1730 0
-8132 -555 -412 -1732 0
-8132 -555 -410 -1734 0
-8132 -555 -408 -1736 0
-8132 -555 -407 -1738 0
-8132 -553 -420 -1727 0
-8132 -553 -418 -1728 0
-8132 -553 -416 -1730 0
-8132 -553 -414 -1732 0
-8132 -553 -412 -1734 0
-8132 -553 -410 -1736 0
-8132 -553 -408 -1738 0
-8132 -553 -407 -1740 0
-8132 -551 -1727 0
-8132 -551 -420 -1728 0
-8132 -551 -418 -1730 0
-8132 -551 -416 -1732 0
-8132 -551 -414 -1734 0
-8132 -551 -412 -1736 0
-8132 -551 -410 -1738 0
-8132 -551 -408 -1740 0
-8132 -551 -407 -1742 0
-8132 -549 -1728 0
-8132 -549 -420 -1730 0
-8132 -549 -418 -1732 0
-8132 -549 -416 -1734 0
-8132 -549 -414 -1736 0
-8132 -549 -412 -1738 0
-8132 -549 -410 -1740 0
-8132 -549 -408 -1742 0
-8132 -549 -407 -1744 0
-8132 -547 -1730 0
-8132 -547 -420 -1732 0
-8132 -547 -418 -1734 0
-8132 -547 -416 -1736 0
-8132 -547 -414 -1738 0
-8132 -547 -412 -1740 0
-8132 -547 -410 -1742 0
-8132 -547 -408 -1744 0
-8132 -547 -407 -1746 0
-8132 -545 -1732 0
-8132 -545 -420 -1734 0
-8132 -545 -418 -1736 0
-8132 -545 -416 -1738 0
-8132 -545 -414 -1740 0
-8132 -545 -412 -1742 0
-8132 -545 -410 -1744 0
-8132 -545 -408 -1746 0
-8132 -545 -407 -1748 0
-8132 -543 -1734 0
-8132 -543 -420 -1736 0
-8132 -543 -418 -1738 0
-8132 -543 -416 -1740 0
-8132 -543 -414 -1742 0
-8132 -543 -412 -1744 0
-8132 -543 -410 -1746 0
-8132 -543 -408 -1748 0
-8132 -543 -407 -1750 0
-8132 -542 -1736 0
-8132 -542 -420 -1738 0
-8132 -542 -418 -1740 0
-8132 -542 -416 -1742 0
-8132 -542 -414 -1744 0
-8132 -542 -412 -1746 0
-8132 -542 -410 -1748 0
-8132 -542 -408 -1750 0
-8132 -542 -407 -1752 0
8132 1752 0
8132 407 1750 0
8132 408 1748 0
8132 410 1746 0
8132 412 1744 0
8132 414 1742 0
8132 416 1740 0
8132 418 1738 0
8132 420 1736 0
8132 542 1750 0
8132 542 407 1748 0
8132 542 408 1746 0
8132 542 410 1744 0
8132 542 412 1742 0
8132 542 414 1740 0
8132 542 416 1738 0
8132 542 418 1736 0
8132 542 420 1734 0
8132 543 1748 0
8132 543 407 1746 0
8132 543 408 1744 0
8132 543 410 1742 0
8132 543 412 1740 0
8132 543 414 1738 0
8132 543 416 1736 0
8132 543 418 1734 0
8132 543 420 1732 0
8132 545 1746 0
8132 545 407 1744 0
8132 545 408 1742 0
8132 545 410 1740 0
8132 545 412 1738 0
8132 545 414 1736 0
8132 545 416 1734 0
8132 545 418 1732 0
8132 545 420 1730 0
8132 547 1744 0
8132 547 407 1742 0
8132 547 408 1740 0
8132 547 410 1738 0
8132 547 412 1736 0
8132 547 414 1734 0
8132 547 416 1732 0
8132 547 418 1730 0
8132 547 420 1728 0
8132 549 1742 0
8132 549 407 1740 0
8132 549 408 1738 0
8132 549 410 1736 0
8132 549 412 1734 0
8132 549 414 1732 0
8132 549 416 1730 0
8132 549 418 1728 0
8132 549 420 1727 0
8132 551 1740 0
8132 551 407 1738 0
8132 551 408 1736 0
8132 551 410 1734 0
8132 551 412 1732 0
8132 551 414 1730 0
8132 551 416 1728 0
8132 551 418 1727 0
8132 551 420 0
8132 553 1738 0
8132 553 407 1736 0
8132 553 408 1734 0
8132 553 410 1732 0
8132 553 412 1730 0
8132 553 414 1728 0
8132 553 416 1727 0
8132 553 418 0
8132 553 420 0
8132 555 1736 0
8132 555 407 1734 0
8132 555 408 1732 0
8132 555 410 1730 0
8132 555 412 1728 0
8132 555 414 1727 0
8132 555 416 0
8132 555 418 0
8132 555 420 0
c (((x_00003_00002 + x_00004_00002 + x_00005_00002)<=15)=tv=SATLiteral(8133))
-8133 429 570 0
-8133 431 568 0
-8133 433 566 0
-8133 435 564 0
-8133 287 427 570 0
-8133 287 429 568 0
-8133 287 431 566 0
-8133 287 433 564 0
-8133 287 435 562 0
-8133 288 425 570 0
-8133 288 427 568 0
-8133 288 429 566 0
-8133 288 431 564 0
-8133 288 433 562 0
-8133 288 435 560 0
-8133 290 423 570 0
-8133 290 425 568 0
-8133 290 427 566 0
-8133 290 429 564 0
-8133 290 431 562 0
-8133 290 433 560 0
-8133 290 435 558 0
-8133 292 422 570 0
-8133 292 423 568 0
-8133 292 425 566 0
-8133 292 427 564 0
-8133 292 429 562 0
-8133 292 431 560 0
-8133 292 433 558 0
-8133 292 435 557 0
-8133 294 570 0
-8133 294 422 568 0
-8133 294 423 566 0
-8133 294 425 564 0
-8133 294 427 562 0
-8133 294 429 560 0
-8133 294 431 558 0
-8133 294 433 557 0
-8133 294 435 0
-8133 296 568 0
-8133 296 422 566 0
-8133 296 423 564 0
-8133 296 425 562 0
-8133 296 427 560 0
-8133 296 429 558 0
-8133 296 431 557 0
-8133 296 433 0
-8133 296 435 0
-8133 298 566 0
-8133 298 422 564 0
-8133 298 423 562 0
-8133 298 425 560 0
-8133 298 427 558 0
-8133 298 429 557 0
-8133 298 431 0
-8133 298 433 0
-8133 298 435 0
-8133 300 564 0
-8133 300 422 562 0
-8133 300 423 560 0
-8133 300 425 558 0
-8133 300 427 557 0
-8133 300 429 0
-8133 300 431 0
-8133 300 433 0
-8133 300 435 0
8133 -429 -557 0
8133 -427 -558 0
8133 -425 -560 0
8133 -423 -562 0
8133 -422 -564 0
8133 -300 -431 -557 0
8133 -300 -429 -558 0
8133 -300 -427 -560 0
8133 -300 -425 -562 0
8133 -300 -423 -564 0
8133 -300 -422 -566 0
8133 -298 -433 -557 0
8133 -298 -431 -558 0
8133 -298 -429 -560 0
8133 -298 -427 -562 0
8133 -298 -425 -564 0
8133 -298 -423 -566 0
8133 -298 -422 -568 0
8133 -296 -435 -557 0
8133 -296 -433 -558 0
8133 -296 -431 -560 0
8133 -296 -429 -562 0
8133 -296 -427 -564 0
8133 -296 -425 -566 0
8133 -296 -423 -568 0
8133 -296 -422 -570 0
8133 -294 -557 0
8133 -294 -435 -558 0
8133 -294 -433 -560 0
8133 -294 -431 -562 0
8133 -294 -429 -564 0
8133 -294 -427 -566 0
8133 -294 -425 -568 0
8133 -294 -423 -570 0
8133 -294 -422 0
8133 -292 -558 0
8133 -292 -435 -560 0
8133 -292 -433 -562 0
8133 -292 -431 -564 0
8133 -292 -429 -566 0
8133 -292 -427 -568 0
8133 -292 -425 -570 0
8133 -292 -423 0
8133 -292 -422 0
8133 -290 -560 0
8133 -290 -435 -562 0
8133 -290 -433 -564 0
8133 -290 -431 -566 0
8133 -290 -429 -568 0
8133 -290 -427 -570 0
8133 -290 -425 0
8133 -290 -423 0
8133 -290 -422 0
8133 -288 -562 0
8133 -288 -435 -564 0
8133 -288 -433 -566 0
8133 -288 -431 -568 0
8133 -288 -429 -570 0
8133 -288 -427 0
8133 -288 -425 0
8133 -288 -423 0
8133 -288 -422 0
8133 -287 -564 0
8133 -287 -435 -566 0
8133 -287 -433 -568 0
8133 -287 -431 -570 0
8133 -287 -429 0
8133 -287 -427 0
8133 -287 -425 0
8133 -287 -423 0
8133 -287 -422 0
c ((15<=(x_00003_00002 + x_00004_00002 + x_00005_00002))=tv=SATLiteral(8134))
-8134 -427 -557 0
-8134 -425 -558 0
-8134 -423 -560 0
-8134 -422 -562 0
-8134 -300 -429 -557 0
-8134 -300 -427 -558 0
-8134 -300 -425 -560 0
-8134 -300 -423 -562 0
-8134 -300 -422 -564 0
-8134 -298 -431 -557 0
-8134 -298 -429 -558 0
-8134 -298 -427 -560 0
-8134 -298 -425 -562 0
-8134 -298 -423 -564 0
-8134 -298 -422 -566 0
-8134 -296 -433 -557 0
-8134 -296 -431 -558 0
-8134 -296 -429 -560 0
-8134 -296 -427 -562 0
-8134 -296 -425 -564 0
-8134 -296 -423 -566 0
-8134 -296 -422 -568 0
-8134 -294 -435 -557 0
-8134 -294 -433 -558 0
-8134 -294 -431 -560 0
-8134 -294 -429 -562 0
-8134 -294 -427 -564 0
-8134 -294 -425 -566 0
-8134 -294 -423 -568 0
-8134 -294 -422 -570 0
-8134 -292 -557 0
-8134 -292 -435 -558 0
-8134 -292 -433 -560 0
-8134 -292 -431 -562 0
-8134 -292 -429 -564 0
-8134 -292 -427 -566 0
-8134 -292 -425 -568 0
-8134 -292 -423 -570 0
-8134 -292 -422 0
-8134 -290 -558 0
-8134 -290 -435 -560 0
-8134 -290 -433 -562 0
-8134 -290 -431 -564 0
-8134 -290 -429 -566 0
-8134 -290 -427 -568 0
-8134 -290 -425 -570 0
-8134 -290 -423 0
-8134 -290 -422 0
-8134 -288 -560 0
-8134 -288 -435 -562 0
-8134 -288 -433 -564 0
-8134 -288 -431 -566 0
-8134 -288 -429 -568 0
-8134 -288 -427 -570 0
-8134 -288 -425 0
-8134 -288 -423 0
-8134 -288 -422 0
-8134 -287 -562 0
-8134 -287 -435 -564 0
-8134 -287 -433 -566 0
-8134 -287 -431 -568 0
-8134 -287 -429 -570 0
-8134 -287 -427 0
-8134 -287 -425 0
-8134 -287 -423 0
-8134 -287 -422 0
8134 427 570 0
8134 429 568 0
8134 431 566 0
8134 433 564 0
8134 435 562 0
8134 287 425 570 0
8134 287 427 568 0
8134 287 429 566 0
8134 287 431 564 0
8134 287 433 562 0
8134 287 435 560 0
8134 288 423 570 0
8134 288 425 568 0
8134 288 427 566 0
8134 288 429 564 0
8134 288 431 562 0
8134 288 433 560 0
8134 288 435 558 0
8134 290 422 570 0
8134 290 423 568 0
8134 290 425 566 0
8134 290 427 564 0
8134 290 429 562 0
8134 290 431 560 0
8134 290 433 558 0
8134 290 435 557 0
8134 292 570 0
8134 292 422 568 0
8134 292 423 566 0
8134 292 425 564 0
8134 292 427 562 0
8134 292 429 560 0
8134 292 431 558 0
8134 292 433 557 0
8134 292 435 0
8134 294 568 0
8134 294 422 566 0
8134 294 423 564 0
8134 294 425 562 0
8134 294 427 560 0
8134 294 429 558 0
8134 294 431 557 0
8134 294 433 0
8134 294 435 0
8134 296 566 0
8134 296 422 564 0
8134 296 423 562 0
8134 296 425 560 0
8134 296 427 558 0
8134 296 429 557 0
8134 296 431 0
8134 296 433 0
8134 296 435 0
8134 298 564 0
8134 298 422 562 0
8134 298 423 560 0
8134 298 425 558 0
8134 298 427 557 0
8134 298 429 0
8134 298 431 0
8134 298 433 0
8134 298 435 0
8134 300 562 0
8134 300 422 560 0
8134 300 423 558 0
8134 300 425 557 0
8134 300 427 0
8134 300 429 0
8134 300 431 0
8134 300 433 0
8134 300 435 0
c (((x_00003_00003 + x_00003_00004 + x_00004_00004)<=11)=tv=SATLiteral(8135))
-8135 317 465 0
-8135 318 463 0
-8135 320 461 0
-8135 322 459 0
-8135 324 457 0
-8135 326 455 0
-8135 328 453 0
-8135 330 452 0
-8135 302 465 0
-8135 302 317 463 0
-8135 302 318 461 0
-8135 302 320 459 0
-8135 302 322 457 0
-8135 302 324 455 0
-8135 302 326 453 0
-8135 302 328 452 0
-8135 302 330 0
-8135 303 463 0
-8135 303 317 461 0
-8135 303 318 459 0
-8135 303 320 457 0
-8135 303 322 455 0
-8135 303 324 453 0
-8135 303 326 452 0
-8135 303 328 0
-8135 303 330 0
-8135 305 461 0
-8135 305 317 459 0
-8135 305 318 457 0
-8135 305 320 455 0
-8135 305 322 453 0
-8135 305 324 452 0
-8135 305 326 0
-8135 305 328 0
-8135 305 330 0
-8135 307 459 0
-8135 307 317 457 0
-8135 307 318 455 0
-8135 307 320 453 0
-8135 307 322 452 0
-8135 307 324 0
-8135 307 326 0
-8135 307 328 0
-8135 307 330 0
-8135 309 457 0
-8135 309 317 455 0
-8135 309 318 453 0
-8135 309 320 452 0
-8135 309 322 0
-8135 309 324 0
-8135 309 326 0
-8135 309 328 0
-8135 309 330 0
-8135 311 455 0
-8135 311 317 453 0
-8135 311 318 452 0
-8135 311 320 0
-8135 311 322 0
-8135 311 324 0
-8135 311 326 0
-8135 311 328 0
-8135 311 330 0
-8135 313 453 0
-8135 313 317 452 0
-8135 313 318 0
-8135 313 320 0
-8135 313 322 0
-8135 313 324 0
-8135 313 326 0
-8135 313 328 0
-8135 313 330 0
-8135 315 452 0
-8135 315 317 0
-8135 315 318 0
-8135 315 320 0
-8135 315 322 0
-8135 315 324 0
-8135 315 326 0
-8135 315 328 0
-8135 315 330 0
8135 -317 -452 0
8135 -315 -318 -452 0
8135 -315 -317 -453 0
8135 -313 -320 -452 0
8135 -313 -318 -453 0
8135 -313 -317 -455 0
8135 -311 -322 -452 0
8135 -311 -320 -453 0
8135 -311 -318 -455 0
8135 -311 -317 -457 0
8135 -309 -324 -452 0
8135 -309 -322 -453 0
8135 -309 -320 -455 0
8135 -309 -318 -457 0
8135 -309 -317 -459 0
8135 -307 -326 -452 0
8135 -307 -324 -453 0
8135 -307 -322 -455 0
8135 -307 -320 -457 0
8135 -307 -318 -459 0
8135 -307 -317 -461 0
8135 -305 -328 -452 0
8135 -305 -326 -453 0
8135 -305 -324 -455 0
8135 -305 -322 -457 0
8135 -305 -320 -459 0
8135 -305 -318 -461 0
8135 -305 -317 -463 0
8135 -303 -330 -452 0
8135 -303 -328 -453 0
8135 -303 -326 -455 0
8135 -303 -324 -457 0
8135 -303 -322 -459 0
8135 -303 -320 -461 0
8135 -303 -318 -463 0
8135 -303 -317 -465 0
8135 -302 -452 0
8135 -302 -330 -453 0
8135 -302 -328 -455 0
8135 -302 -326 -457 0
8135 -302 -324 -459 0
8135 -302 -322 -461 0
8135 -302 -320 -463 0
8135 -302 -318 -465 0
8135 -302 -317 0
c ((11<=(x_00003_00003 + x_00003_00004 + x_00004_00004))=tv=SATLiteral(8136))
-8136 -315 -317 -452 0
-8136 -313 -318 -452 0
-8136 -313 -317 -453 0
-8136 -311 -320 -452 0
-8136 -311 -318 -453 0
-8136 -311 -317 -455 0
-8136 -309 -322 -452 0
-8136 -309 -320 -453 0
-8136 -309 -318 -455 0
-8136 -309 -317 -457 0
-8136 -307 -324 -452 0
-8136 -307 -322 -453 0
-8136 -307 -320 -455 0
-8136 -307 -318 -457 0
-8136 -307 -317 -459 0
-8136 -305 -326 -452 0
-8136 -305 -324 -453 0
-8136 -305 -322 -455 0
-8136 -305 -320 -457 0
-8136 -305 -318 -459 0
-8136 -305 -317 -461 0
-8136 -303 -328 -452 0
-8136 -303 -326 -453 0
-8136 -303 -324 -455 0
-8136 -303 -322 -457 0
-8136 -303 -320 -459 0
-8136 -303 -318 -461 0
-8136 -303 -317 -463 0
-8136 -302 -330 -452 0
-8136 -302 -328 -453 0
-8136 -302 -326 -455 0
-8136 -302 -324 -457 0
-8136 -302 -322 -459 0
-8136 -302 -320 -461 0
-8136 -302 -318 -463 0
-8136 -302 -317 -465 0
8136 465 0
8136 317 463 0
8136 318 461 0
8136 320 459 0
8136 322 457 0
8136 324 455 0
8136 326 453 0
8136 328 452 0
8136 330 0
8136 302 463 0
8136 302 317 461 0
8136 302 318 459 0
8136 302 320 457 0
8136 302 322 455 0
8136 302 324 453 0
8136 302 326 452 0
8136 302 328 0
8136 302 330 0
8136 303 461 0
8136 303 317 459 0
8136 303 318 457 0
8136 303 320 455 0
8136 303 322 453 0
8136 303 324 452 0
8136 303 326 0
8136 303 328 0
8136 303 330 0
8136 305 459 0
8136 305 317 457 0
8136 305 318 455 0
8136 305 320 453 0
8136 305 322 452 0
8136 305 324 0
8136 305 326 0
8136 305 328 0
8136 305 330 0
8136 307 457 0
8136 307 317 455 0
8136 307 318 453 0
8136 307 320 452 0
8136 307 322 0
8136 307 324 0
8136 307 326 0
8136 307 328 0
8136 307 330 0
8136 309 455 0
8136 309 317 453 0
8136 309 318 452 0
8136 309 320 0
8136 309 322 0
8136 309 324 0
8136 309 326 0
8136 309 328 0
8136 309 330 0
8136 311 453 0
8136 311 317 452 0
8136 311 318 0
8136 311 320 0
8136 311 322 0
8136 311 324 0
8136 311 326 0
8136 311 328 0
8136 311 330 0
8136 313 452 0
8136 313 317 0
8136 313 318 0
8136 313 320 0
8136 313 322 0
8136 313 324 0
8136 313 326 0
8136 313 328 0
8136 313 330 0
8136 315 0
8136 315 317 0
8136 315 318 0
8136 315 320 0
8136 315 322 0
8136 315 324 0
8136 315 326 0
8136 315 328 0
8136 315 330 0
c (((x_00003_00005 + x_00004_00005)<=8)=tv=SATLiteral(8137))
-8137 478 0
-8137 332 476 0
-8137 333 474 0
-8137 335 472 0
-8137 337 470 0
-8137 339 468 0
-8137 341 467 0
-8137 343 0
-8137 345 0
8137 -343 -467 0
8137 -341 -468 0
8137 -339 -470 0
8137 -337 -472 0
8137 -335 -474 0
8137 -333 -476 0
8137 -332 -478 0
c ((8<=(x_00003_00005 + x_00004_00005))=tv=SATLiteral(8138))
-8138 -341 -467 0
-8138 -339 -468 0
-8138 -337 -470 0
-8138 -335 -472 0
-8138 -333 -474 0
-8138 -332 -476 0
8138 476 0
8138 332 474 0
8138 333 472 0
8138 335 470 0
8138 337 468 0
8138 339 467 0
8138 341 0
8138 343 0
8138 345 0
c (((aux428 + shift(x_00003_00007, -1) + shift(x_00004_00006, -1))<=18)=tv=SATLiteral(8139))
-8139 485 1787 0
-8139 487 1785 0
-8139 489 1783 0
-8139 491 1781 0
-8139 493 1779 0
-8139 495 1777 0
-8139 362 483 1787 0
-8139 362 485 1785 0
-8139 362 487 1783 0
-8139 362 489 1781 0
-8139 362 491 1779 0
-8139 362 493 1777 0
-8139 362 495 1775 0
-8139 363 482 1787 0
-8139 363 483 1785 0
-8139 363 485 1783 0
-8139 363 487 1781 0
-8139 363 489 1779 0
-8139 363 491 1777 0
-8139 363 493 1775 0
-8139 363 495 1773 0
-8139 365 1787 0
-8139 365 482 1785 0
-8139 365 483 1783 0
-8139 365 485 1781 0
-8139 365 487 1779 0
-8139 365 489 1777 0
-8139 365 491 1775 0
-8139 365 493 1773 0
-8139 365 495 1771 0
-8139 367 1785 0
-8139 367 482 1783 0
-8139 367 483 1781 0
-8139 367 485 1779 0
-8139 367 487 1777 0
-8139 367 489 1775 0
-8139 367 491 1773 0
-8139 367 493 1771 0
-8139 367 495 1769 0
-8139 369 1783 0
-8139 369 482 1781 0
-8139 369 483 1779 0
-8139 369 485 1777 0
-8139 369 487 1775 0
-8139 369 489 1773 0
-8139 369 491 1771 0
-8139 369 493 1769 0
-8139 369 495 1767 0
-8139 371 1781 0
-8139 371 482 1779 0
-8139 371 483 1777 0
-8139 371 485 1775 0
-8139 371 487 1773 0
-8139 371 489 1771 0
-8139 371 491 1769 0
-8139 371 493 1767 0
-8139 371 495 1765 0
-8139 373 1779 0
-8139 373 482 1777 0
-8139 373 483 1775 0
-8139 373 485 1773 0
-8139 373 487 1771 0
-8139 373 489 1769 0
-8139 373 491 1767 0
-8139 373 493 1765 0
-8139 373 495 1763 0
-8139 375 1777 0
-8139 375 482 1775 0
-8139 375 483 1773 0
-8139 375 485 1771 0
-8139 375 487 1769 0
-8139 375 489 1767 0
-8139 375 491 1765 0
-8139 375 493 1763 0
-8139 375 495 1761 0
8139 -1761 0
8139 -495 -1763 0
8139 -493 -1765 0
8139 -491 -1767 0
8139 -489 -1769 0
8139 -487 -1771 0
8139 -485 -1773 0
8139 -483 -1775 0
8139 -482 -1777 0
8139 -375 -1763 0
8139 -375 -495 -1765 0
8139 -375 -493 -1767 0
8139 -375 -491 -1769 0
8139 -375 -489 -1771 0
8139 -375 -487 -1773 0
8139 -375 -485 -1775 0
8139 -375 -483 -1777 0
8139 -375 -482 -1779 0
8139 -373 -1765 0
8139 -373 -495 -1767 0
8139 -373 -493 -1769 0
8139 -373 -491 -1771 0
8139 -373 -489 -1773 0
8139 -373 -487 -1775 0
8139 -373 -485 -1777 0
8139 -373 -483 -1779 0
8139 -373 -482 -1781 0
8139 -371 -1767 0
8139 -371 -495 -1769 0
8139 -371 -493 -1771 0
8139 -371 -491 -1773 0
8139 -371 -489 -1775 0
8139 -371 -487 -1777 0
8139 -371 -485 -1779 0
8139 -371 -483 -1781 0
8139 -371 -482 -1783 0
8139 -369 -1769 0
8139 -369 -495 -1771 0
8139 -369 -493 -1773 0
8139 -369 -491 -1775 0
8139 -369 -489 -1777 0
8139 -369 -487 -1779 0
8139 -369 -485 -1781 0
8139 -369 -483 -1783 0
8139 -369 -482 -1785 0
8139 -367 -1771 0
8139 -367 -495 -1773 0
8139 -367 -493 -1775 0
8139 -367 -491 -1777 0
8139 -367 -489 -1779 0
8139 -367 -487 -1781 0
8139 -367 -485 -1783 0
8139 -367 -483 -1785 0
8139 -367 -482 -1787 0
8139 -365 -1773 0
8139 -365 -495 -1775 0
8139 -365 -493 -1777 0
8139 -365 -491 -1779 0
8139 -365 -489 -1781 0
8139 -365 -487 -1783 0
8139 -365 -485 -1785 0
8139 -365 -483 -1787 0
8139 -365 -482 0
8139 -363 -1775 0
8139 -363 -495 -1777 0
8139 -363 -493 -1779 0
8139 -363 -491 -1781 0
8139 -363 -489 -1783 0
8139 -363 -487 -1785 0
8139 -363 -485 -1787 0
8139 -363 -483 0
8139 -363 -482 0
8139 -362 -1777 0
8139 -362 -495 -1779 0
8139 -362 -493 -1781 0
8139 -362 -491 -1783 0
8139 -362 -489 -1785 0
8139 -362 -487 -1787 0
8139 -362 -485 0
8139 -362 -483 0
8139 -362 -482 0
c ((18<=(aux428 + shift(x_00003_00007, -1) + shift(x_00004_00006, -1)))=tv=SATLiteral(8140))
-8140 -1759 0
-8140 -495 -1761 0
-8140 -493 -1763 0
-8140 -491 -1765 0
-8140 -489 -1767 0
-8140 -487 -1769 0
-8140 -485 -1771 0
-8140 -483 -1773 0
-8140 -482 -1775 0
-8140 -375 -1761 0
-8140 -375 -495 -1763 0
-8140 -375 -493 -1765 0
-8140 -375 -491 -1767 0
-8140 -375 -489 -1769 0
-8140 -375 -487 -1771 0
-8140 -375 -485 -1773 0
-8140 -375 -483 -1775 0
-8140 -375 -482 -1777 0
-8140 -373 -1763 0
-8140 -373 -495 -1765 0
-8140 -373 -493 -1767 0
-8140 -373 -491 -1769 0
-8140 -373 -489 -1771 0
-8140 -373 -487 -1773 0
-8140 -373 -485 -1775 0
-8140 -373 -483 -1777 0
-8140 -373 -482 -1779 0
-8140 -371 -1765 0
-8140 -371 -495 -1767 0
-8140 -371 -493 -1769 0
-8140 -371 -491 -1771 0
-8140 -371 -489 -1773 0
-8140 -371 -487 -1775 0
-8140 -371 -485 -1777 0
-8140 -371 -483 -1779 0
-8140 -371 -482 -1781 0
-8140 -369 -1767 0
-8140 -369 -495 -1769 0
-8140 -369 -493 -1771 0
-8140 -369 -491 -1773 0
-8140 -369 -489 -1775 0
-8140 -369 -487 -1777 0
-8140 -369 -485 -1779 0
-8140 -369 -483 -1781 0
-8140 -369 -482 -1783 0
-8140 -367 -1769 0
-8140 -367 -495 -1771 0
-8140 -367 -493 -1773 0
-8140 -367 -491 -1775 0
-8140 -367 -489 -1777 0
-8140 -367 -487 -1779 0
-8140 -367 -485 -1781 0
-8140 -367 -483 -1783 0
-8140 -367 -482 -1785 0
-8140 -365 -1771 0
-8140 -365 -495 -1773 0
-8140 -365 -493 -1775 0
-8140 -365 -491 -1777 0
-8140 -365 -489 -1779 0
-8140 -365 -487 -1781 0
-8140 -365 -485 -1783 0
-8140 -365 -483 -1785 0
-8140 -365 -482 -1787 0
-8140 -363 -1773 0
-8140 -363 -495 -1775 0
-8140 -363 -493 -1777 0
-8140 -363 -491 -1779 0
-8140 -363 -489 -1781 0
-8140 -363 -487 -1783 0
-8140 -363 -485 -1785 0
-8140 -363 -483 -1787 0
-8140 -363 -482 0
-8140 -362 -1775 0
-8140 -362 -495 -1777 0
-8140 -362 -493 -1779 0
-8140 -362 -491 -1781 0
-8140 -362 -489 -1783 0
-8140 -362 -487 -1785 0
-8140 -362 -485 -1787 0
-8140 -362 -483 0
-8140 -362 -482 0
8140 483 1787 0
8140 485 1785 0
8140 487 1783 0
8140 489 1781 0
8140 491 1779 0
8140 493 1777 0
8140 495 1775 0
8140 362 482 1787 0
8140 362 483 1785 0
8140 362 485 1783 0
8140 362 487 1781 0
8140 362 489 1779 0
8140 362 491 1777 0
8140 362 493 1775 0
8140 362 495 1773 0
8140 363 1787 0
8140 363 482 1785 0
8140 363 483 1783 0
8140 363 485 1781 0
8140 363 487 1779 0
8140 363 489 1777 0
8140 363 491 1775 0
8140 363 493 1773 0
8140 363 495 1771 0
8140 365 1785 0
8140 365 482 1783 0
8140 365 483 1781 0
8140 365 485 1779 0
8140 365 487 1777 0
8140 365 489 1775 0
8140 365 491 1773 0
8140 365 493 1771 0
8140 365 495 1769 0
8140 367 1783 0
8140 367 482 1781 0
8140 367 483 1779 0
8140 367 485 1777 0
8140 367 487 1775 0
8140 367 489 1773 0
8140 367 491 1771 0
8140 367 493 1769 0
8140 367 495 1767 0
8140 369 1781 0
8140 369 482 1779 0
8140 369 483 1777 0
8140 369 485 1775 0
8140 369 487 1773 0
8140 369 489 1771 0
8140 369 491 1769 0
8140 369 493 1767 0
8140 369 495 1765 0
8140 371 1779 0
8140 371 482 1777 0
8140 371 483 1775 0
8140 371 485 1773 0
8140 371 487 1771 0
8140 371 489 1769 0
8140 371 491 1767 0
8140 371 493 1765 0
8140 371 495 1763 0
8140 373 1777 0
8140 373 482 1775 0
8140 373 483 1773 0
8140 373 485 1771 0
8140 373 487 1769 0
8140 373 489 1767 0
8140 373 491 1765 0
8140 373 493 1763 0
8140 373 495 1761 0
8140 375 1775 0
8140 375 482 1773 0
8140 375 483 1771 0
8140 375 485 1769 0
8140 375 487 1767 0
8140 375 489 1765 0
8140 375 491 1763 0
8140 375 493 1761 0
8140 375 495 1759 0
c (((x_00003_00009 + x_00004_00009)<=12)=tv=SATLiteral(8141))
-8141 395 540 0
-8141 397 538 0
-8141 399 536 0
-8141 401 534 0
-8141 403 532 0
-8141 405 530 0
8141 -530 0
8141 -405 -532 0
8141 -403 -534 0
8141 -401 -536 0
8141 -399 -538 0
8141 -397 -540 0
8141 -395 0
8141 -393 0
8141 -392 0
c ((12<=(x_00003_00009 + x_00004_00009))=tv=SATLiteral(8142))
-8142 -528 0
-8142 -405 -530 0
-8142 -403 -532 0
-8142 -401 -534 0
-8142 -399 -536 0
-8142 -397 -538 0
-8142 -395 -540 0
-8142 -393 0
-8142 -392 0
8142 393 540 0
8142 395 538 0
8142 397 536 0
8142 399 534 0
8142 401 532 0
8142 403 530 0
8142 405 528 0
c (((aux429 + aux430 + aux432)<=35)=tv=SATLiteral(8143))
-8143 1841 1927 0
-8143 1843 1925 0
-8143 1845 1923 0
-8143 1847 1921 0
-8143 1849 1919 0
-8143 1789 1839 1927 0
-8143 1789 1841 1925 0
-8143 1789 1843 1923 0
-8143 1789 1845 1921 0
-8143 1789 1847 1919 0
-8143 1789 1849 1917 0
-8143 1790 1837 1927 0
-8143 1790 1839 1925 0
-8143 1790 1841 1923 0
-8143 1790 1843 1921 0
-8143 1790 1845 1919 0
-8143 1790 1847 1917 0
-8143 1790 1849 1915 0
-8143 1792 1835 1927 0
-8143 1792 1837 1925 0
-8143 1792 1839 1923 0
-8143 1792 1841 1921 0
-8143 1792 1843 1919 0
-8143 1792 1845 1917 0
-8143 1792 1847 1915 0
-8143 1792 1849 1913 0
-8143 1794 1833 1927 0
-8143 1794 1835 1925 0
-8143 1794 1837 1923 0
-8143 1794 1839 1921 0
-8143 1794 1841 1919 0
-8143 1794 1843 1917 0
-8143 1794 1845 1915 0
-8143 1794 1847 1913 0
-8143 1794 1849 1911 0
-8143 1796 1831 1927 0
-8143 1796 1833 1925 0
-8143 1796 1835 1923 0
-8143 1796 1837 1921 0
-8143 1796 1839 1919 0
-8143 1796 1841 1917 0
-8143 1796 1843 1915 0
-8143 1796 1845 1913 0
-8143 1796 1847 1911 0
-8143 1796 1849 1909 0
-8143 1798 1829 1927 0
-8143 1798 1831 1925 0
-8143 1798 1833 1923 0
-8143 1798 1835 1921 0
-8143 1798 1837 1919 0
-8143 1798 1839 1917 0
-8143 1798 1841 1915 0
-8143 1798 1843 1913 0
-8143 1798 1845 1911 0
-8143 1798 1847 1909 0
-8143 1798 1849 1907 0
-8143 1800 1827 1927 0
-8143 1800 1829 1925 0
-8143 1800 1831 1923 0
-8143 1800 1833 1921 0
-8143 1800 1835 1919 0
-8143 1800 1837 1917 0
-8143 1800 1839 1915 0
-8143 1800 1841 1913 0
-8143 1800 1843 1911 0
-8143 1800 1845 1909 0
-8143 1800 1847 1907 0
-8143 1800 1849 1905 0
-8143 1802 1825 1927 0
-8143 1802 1827 1925 0
-8143 1802 1829 1923 0
-8143 1802 1831 1921 0
-8143 1802 1833 1919 0
-8143 1802 1835 1917 0
-8143 1802 1837 1915 0
-8143 1802 1839 1913 0
-8143 1802 1841 1911 0
-8143 1802 1843 1909 0
-8143 1802 1845 1907 0
-8143 1802 1847 1905 0
-8143 1802 1849 1903 0
-8143 1804 1823 1927 0
-8143 1804 1825 1925 0
-8143 1804 1827 1923 0
-8143 1804 1829 1921 0
-8143 1804 1831 1919 0
-8143 1804 1833 1917 0
-8143 1804 1835 1915 0
-8143 1804 1837 1913 0
-8143 1804 1839 1911 0
-8143 1804 1841 1909 0
-8143 1804 1843 1907 0
-8143 1804 1845 1905 0
-8143 1804 1847 1903 0
-8143 1804 1849 1901 0
-8143 1806 1821 1927 0
-8143 1806 1823 1925 0
-8143 1806 1825 1923 0
-8143 1806 1827 1921 0
-8143 1806 1829 1919 0
-8143 1806 1831 1917 0
-8143 1806 1833 1915 0
-8143 1806 1835 1913 0
-8143 1806 1837 1911 0
-8143 1806 1839 1909 0
-8143 1806 1841 1907 0
-8143 1806 1843 1905 0
-8143 1806 1845 1903 0
-8143 1806 1847 1901 0
-8143 1806 1849 1899 0
-8143 1808 1820 1927 0
-8143 1808 1821 1925 0
-8143 1808 1823 1923 0
-8143 1808 1825 1921 0
-8143 1808 1827 1919 0
-8143 1808 1829 1917 0
-8143 1808 1831 1915 0
-8143 1808 1833 1913 0
-8143 1808 1835 1911 0
-8143 1808 1837 1909 0
-8143 1808 1839 1907 0
-8143 1808 1841 1905 0
-8143 1808 1843 1903 0
-8143 1808 1845 1901 0
-8143 1808 1847 1899 0
-8143 1808 1849 1897 0
-8143 1810 1927 0
-8143 1810 1820 1925 0
-8143 1810 1821 1923 0
-8143 1810 1823 1921 0
-8143 1810 1825 1919 0
-8143 1810 1827 1917 0
-8143 1810 1829 1915 0
-8143 1810 1831 1913 0
-8143 1810 1833 1911 0
-8143 1810 1835 1909 0
-8143 1810 1837 1907 0
-8143 1810 1839 1905 0
-8143 1810 1841 1903 0
-8143 1810 1843 1901 0
-8143 1810 1845 1899 0
-8143 1810 1847 1897 0
-8143 1810 1849 1895 0
-8143 1812 1925 0
-8143 1812 1820 1923 0
-8143 1812 1821 1921 0
-8143 1812 1823 1919 0
-8143 1812 1825 1917 0
-8143 1812 1827 1915 0
-8143 1812 1829 1913 0
-8143 1812 1831 1911 0
-8143 1812 1833 1909 0
-8143 1812 1835 1907 0
-8143 1812 1837 1905 0
-8143 1812 1839 1903 0
-8143 1812 1841 1901 0
-8143 1812 1843 1899 0
-8143 1812 1845 1897 0
-8143 1812 1847 1895 0
-8143 1812 1849 1893 0
-8143 1814 1923 0
-8143 1814 1820 1921 0
-8143 1814 1821 1919 0
-8143 1814 1823 1917 0
-8143 1814 1825 1915 0
-8143 1814 1827 1913 0
-8143 1814 1829 1911 0
-8143 1814 1831 1909 0
-8143 1814 1833 1907 0
-8143 1814 1835 1905 0
-8143 1814 1837 1903 0
-8143 1814 1839 1901 0
-8143 1814 1841 1899 0
-8143 1814 1843 1897 0
-8143 1814 1845 1895 0
-8143 1814 1847 1893 0
-8143 1814 1849 1891 0
-8143 1816 1921 0
-8143 1816 1820 1919 0
-8143 1816 1821 1917 0
-8143 1816 1823 1915 0
-8143 1816 1825 1913 0
-8143 1816 1827 1911 0
-8143 1816 1829 1909 0
-8143 1816 1831 1907 0
-8143 1816 1833 1905 0
-8143 1816 1835 1903 0
-8143 1816 1837 1901 0
-8143 1816 1839 1899 0
-8143 1816 1841 1897 0
-8143 1816 1843 1895 0
-8143 1816 1845 1893 0
-8143 1816 1847 1891 0
-8143 1816 1849 1889 0
-8143 1818 1919 0
-8143 1818 1820 1917 0
-8143 1818 1821 1915 0
-8143 1818 1823 1913 0
-8143 1818 1825 1911 0
-8143 1818 1827 1909 0
-8143 1818 1829 1907 0
-8143 1818 1831 1905 0
-8143 1818 1833 1903 0
-8143 1818 1835 1901 0
-8143 1818 1837 1899 0
-8143 1818 1839 1897 0
-8143 1818 1841 1895 0
-8143 1818 1843 1893 0
-8143 1818 1845 1891 0
-8143 1818 1847 1889 0
-8143 1818 1849 1887 0
8143 -1887 0
8143 -1849 -1889 0
8143 -1847 -1891 0
8143 -1845 -1893 0
8143 -1843 -1895 0
8143 -1841 -1897 0
8143 -1839 -1899 0
8143 -1837 -1901 0
8143 -1835 -1903 0
8143 -1833 -1905 0
8143 -1831 -1907 0
8143 -1829 -1909 0
8143 -1827 -1911 0
8143 -1825 -1913 0
8143 -1823 -1915 0
8143 -1821 -1917 0
8143 -1820 -1919 0
8143 -1818 -1889 0
8143 -1818 -1849 -1891 0
8143 -1818 -1847 -1893 0
8143 -1818 -1845 -1895 0
8143 -1818 -1843 -1897 0
8143 -1818 -1841 -1899 0
8143 -1818 -1839 -1901 0
8143 -1818 -1837 -1903 0
8143 -1818 -1835 -1905 0
8143 -1818 -1833 -1907 0
8143 -1818 -1831 -1909 0
8143 -1818 -1829 -1911 0
8143 -1818 -1827 -1913 0
8143 -1818 -1825 -1915 0
8143 -1818 -1823 -1917 0
8143 -1818 -1821 -1919 0
8143 -1818 -1820 -1921 0
8143 -1816 -1891 0
8143 -1816 -1849 -1893 0
8143 -1816 -1847 -1895 0
8143 -1816 -1845 -1897 0
8143 -1816 -1843 -1899 0
8143 -1816 -1841 -1901 0
8143 -1816 -1839 -1903 0
8143 -1816 -1837 -1905 0
8143 -1816 -1835 -1907 0
8143 -1816 -1833 -1909 0
8143 -1816 -1831 -1911 0
8143 -1816 -1829 -1913 0
8143 -1816 -1827 -1915 0
8143 -1816 -1825 -1917 0
8143 -1816 -1823 -1919 0
8143 -1816 -1821 -1921 0
8143 -1816 -1820 -1923 0
8143 -1814 -1893 0
8143 -1814 -1849 -1895 0
8143 -1814 -1847 -1897 0
8143 -1814 -1845 -1899 0
8143 -1814 -1843 -1901 0
8143 -1814 -1841 -1903 0
8143 -1814 -1839 -1905 0
8143 -1814 -1837 -1907 0
8143 -1814 -1835 -1909 0
8143 -1814 -1833 -1911 0
8143 -1814 -1831 -1913 0
8143 -1814 -1829 -1915 0
8143 -1814 -1827 -1917 0
8143 -1814 -1825 -1919 0
8143 -1814 -1823 -1921 0
8143 -1814 -1821 -1923 0
8143 -1814 -1820 -1925 0
8143 -1812 -1895 0
8143 -1812 -1849 -1897 0
8143 -1812 -1847 -1899 0
8143 -1812 -1845 -1901 0
8143 -1812 -1843 -1903 0
8143 -1812 -1841 -1905 0
8143 -1812 -1839 -1907 0
8143 -1812 -1837 -1909 0
8143 -1812 -1835 -1911 0
8143 -1812 -1833 -1913 0
8143 -1812 -1831 -1915 0
8143 -1812 -1829 -1917 0
8143 -1812 -1827 -1919 0
8143 -1812 -1825 -1921 0
8143 -1812 -1823 -1923 0
8143 -1812 -1821 -1925 0
8143 -1812 -1820 -1927 0
8143 -1810 -1897 0
8143 -1810 -1849 -1899 0
8143 -1810 -1847 -1901 0
8143 -1810 -1845 -1903 0
8143 -1810 -1843 -1905 0
8143 -1810 -1841 -1907 0
8143 -1810 -1839 -1909 0
8143 -1810 -1837 -1911 0
8143 -1810 -1835 -1913 0
8143 -1810 -1833 -1915 0
8143 -1810 -1831 -1917 0
8143 -1810 -1829 -1919 0
8143 -1810 -1827 -1921 0
8143 -1810 -1825 -1923 0
8143 -1810 -1823 -1925 0
8143 -1810 -1821 -1927 0
8143 -1810 -1820 0
8143 -1808 -1899 0
8143 -1808 -1849 -1901 0
8143 -1808 -1847 -1903 0
8143 -1808 -1845 -1905 0
8143 -1808 -1843 -1907 0
8143 -1808 -1841 -1909 0
8143 -1808 -1839 -1911 0
8143 -1808 -1837 -1913 0
8143 -1808 -1835 -1915 0
8143 -1808 -1833 -1917 0
8143 -1808 -1831 -1919 0
8143 -1808 -1829 -1921 0
8143 -1808 -1827 -1923 0
8143 -1808 -1825 -1925 0
8143 -1808 -1823 -1927 0
8143 -1808 -1821 0
8143 -1808 -1820 0
8143 -1806 -1901 0
8143 -1806 -1849 -1903 0
8143 -1806 -1847 -1905 0
8143 -1806 -1845 -1907 0
8143 -1806 -1843 -1909 0
8143 -1806 -1841 -1911 0
8143 -1806 -1839 -1913 0
8143 -1806 -1837 -1915 0
8143 -1806 -1835 -1917 0
8143 -1806 -1833 -1919 0
8143 -1806 -1831 -1921 0
8143 -1806 -1829 -1923 0
8143 -1806 -1827 -1925 0
8143 -1806 -1825 -1927 0
8143 -1806 -1823 0
8143 -1806 -1821 0
8143 -1806 -1820 0
8143 -1804 -1903 0
8143 -1804 -1849 -1905 0
8143 -1804 -1847 -1907 0
8143 -1804 -1845 -1909 0
8143 -1804 -1843 -1911 0
8143 -1804 -1841 -1913 0
8143 -1804 -1839 -1915 0
8143 -1804 -1837 -1917 0
8143 -1804 -1835 -1919 0
8143 -1804 -1833 -1921 0
8143 -1804 -1831 -1923 0
8143 -1804 -1829 -1925 0
8143 -1804 -1827 -1927 0
8143 -1804 -1825 0
8143 -1804 -1823 0
8143 -1804 -1821 0
8143 -1804 -1820 0
8143 -1802 -1905 0
8143 -1802 -1849 -1907 0
8143 -1802 -1847 -1909 0
8143 -1802 -1845 -1911 0
8143 -1802 -1843 -1913 0
8143 -1802 -1841 -1915 0
8143 -1802 -1839 -1917 0
8143 -1802 -1837 -1919 0
8143 -1802 -1835 -1921 0
8143 -1802 -1833 -1923 0
8143 -1802 -1831 -1925 0
8143 -1802 -1829 -1927 0
8143 -1802 -1827 0
8143 -1802 -1825 0
8143 -1802 -1823 0
8143 -1802 -1821 0
8143 -1802 -1820 0
8143 -1800 -1907 0
8143 -1800 -1849 -1909 0
8143 -1800 -1847 -1911 0
8143 -1800 -1845 -1913 0
8143 -1800 -1843 -1915 0
8143 -1800 -1841 -1917 0
8143 -1800 -1839 -1919 0
8143 -1800 -1837 -1921 0
8143 -1800 -1835 -1923 0
8143 -1800 -1833 -1925 0
8143 -1800 -1831 -1927 0
8143 -1800 -1829 0
8143 -1800 -1827 0
8143 -1800 -1825 0
8143 -1800 -1823 0
8143 -1800 -1821 0
8143 -1800 -1820 0
8143 -1798 -1909 0
8143 -1798 -1849 -1911 0
8143 -1798 -1847 -1913 0
8143 -1798 -1845 -1915 0
8143 -1798 -1843 -1917 0
8143 -1798 -1841 -1919 0
8143 -1798 -1839 -1921 0
8143 -1798 -1837 -1923 0
8143 -1798 -1835 -1925 0
8143 -1798 -1833 -1927 0
8143 -1798 -1831 0
8143 -1798 -1829 0
8143 -1798 -1827 0
8143 -1798 -1825 0
8143 -1798 -1823 0
8143 -1798 -1821 0
8143 -1798 -1820 0
8143 -1796 -1911 0
8143 -1796 -1849 -1913 0
8143 -1796 -1847 -1915 0
8143 -1796 -1845 -1917 0
8143 -1796 -1843 -1919 0
8143 -1796 -1841 -1921 0
8143 -1796 -1839 -1923 0
8143 -1796 -1837 -1925 0
8143 -1796 -1835 -1927 0
8143 -1796 -1833 0
8143 -1796 -1831 0
8143 -1796 -1829 0
8143 -1796 -1827 0
8143 -1796 -1825 0
8143 -1796 -1823 0
8143 -1796 -1821 0
8143 -1796 -1820 0
8143 -1794 -1913 0
8143 -1794 -1849 -1915 0
8143 -1794 -1847 -1917 0
8143 -1794 -1845 -1919 0
8143 -1794 -1843 -1921 0
8143 -1794 -1841 -1923 0
8143 -1794 -1839 -1925 0
8143 -1794 -1837 -1927 0
8143 -1794 -1835 0
8143 -1794 -1833 0
8143 -1794 -1831 0
8143 -1794 -1829 0
8143 -1794 -1827 0
8143 -1794 -1825 0
8143 -1794 -1823 0
8143 -1794 -1821 0
8143 -1794 -1820 0
8143 -1792 -1915 0
8143 -1792 -1849 -1917 0
8143 -1792 -1847 -1919 0
8143 -1792 -1845 -1921 0
8143 -1792 -1843 -1923 0
8143 -1792 -1841 -1925 0
8143 -1792 -1839 -1927 0
8143 -1792 -1837 0
8143 -1792 -1835 0
8143 -1792 -1833 0
8143 -1792 -1831 0
8143 -1792 -1829 0
8143 -1792 -1827 0
8143 -1792 -1825 0
8143 -1792 -1823 0
8143 -1792 -1821 0
8143 -1792 -1820 0
8143 -1790 -1917 0
8143 -1790 -1849 -1919 0
8143 -1790 -1847 -1921 0
8143 -1790 -1845 -1923 0
8143 -1790 -1843 -1925 0
8143 -1790 -1841 -1927 0
8143 -1790 -1839 0
8143 -1790 -1837 0
8143 -1790 -1835 0
8143 -1790 -1833 0
8143 -1790 -1831 0
8143 -1790 -1829 0
8143 -1790 -1827 0
8143 -1790 -1825 0
8143 -1790 -1823 0
8143 -1790 -1821 0
8143 -1790 -1820 0
8143 -1789 -1919 0
8143 -1789 -1849 -1921 0
8143 -1789 -1847 -1923 0
8143 -1789 -1845 -1925 0
8143 -1789 -1843 -1927 0
8143 -1789 -1841 0
8143 -1789 -1839 0
8143 -1789 -1837 0
8143 -1789 -1835 0
8143 -1789 -1833 0
8143 -1789 -1831 0
8143 -1789 -1829 0
8143 -1789 -1827 0
8143 -1789 -1825 0
8143 -1789 -1823 0
8143 -1789 -1821 0
8143 -1789 -1820 0
c ((35<=(aux429 + aux430 + aux432))=tv=SATLiteral(8144))
-8144 -1885 0
-8144 -1849 -1887 0
-8144 -1847 -1889 0
-8144 -1845 -1891 0
-8144 -1843 -1893 0
-8144 -1841 -1895 0
-8144 -1839 -1897 0
-8144 -1837 -1899 0
-8144 -1835 -1901 0
-8144 -1833 -1903 0
-8144 -1831 -1905 0
-8144 -1829 -1907 0
-8144 -1827 -1909 0
-8144 -1825 -1911 0
-8144 -1823 -1913 0
-8144 -1821 -1915 0
-8144 -1820 -1917 0
-8144 -1818 -1887 0
-8144 -1818 -1849 -1889 0
-8144 -1818 -1847 -1891 0
-8144 -1818 -1845 -1893 0
-8144 -1818 -1843 -1895 0
-8144 -1818 -1841 -1897 0
-8144 -1818 -1839 -1899 0
-8144 -1818 -1837 -1901 0
-8144 -1818 -1835 -1903 0
-8144 -1818 -1833 -1905 0
-8144 -1818 -1831 -1907 0
-8144 -1818 -1829 -1909 0
-8144 -1818 -1827 -1911 0
-8144 -1818 -1825 -1913 0
-8144 -1818 -1823 -1915 0
-8144 -1818 -1821 -1917 0
-8144 -1818 -1820 -1919 0
-8144 -1816 -1889 0
-8144 -1816 -1849 -1891 0
-8144 -1816 -1847 -1893 0
-8144 -1816 -1845 -1895 0
-8144 -1816 -1843 -1897 0
-8144 -1816 -1841 -1899 0
-8144 -1816 -1839 -1901 0
-8144 -1816 -1837 -1903 0
-8144 -1816 -1835 -1905 0
-8144 -1816 -1833 -1907 0
-8144 -1816 -1831 -1909 0
-8144 -1816 -1829 -1911 0
-8144 -1816 -1827 -1913 0
-8144 -1816 -1825 -1915 0
-8144 -1816 -1823 -1917 0
-8144 -1816 -1821 -1919 0
-8144 -1816 -1820 -1921 0
-8144 -1814 -1891 0
-8144 -1814 -1849 -1893 0
-8144 -1814 -1847 -1895 0
-8144 -1814 -1845 -1897 0
-8144 -1814 -1843 -1899 0
-8144 -1814 -1841 -1901 0
-8144 -1814 -1839 -1903 0
-8144 -1814 -1837 -1905 0
-8144 -1814 -1835 -1907 0
-8144 -1814 -1833 -1909 0
-8144 -1814 -1831 -1911 0
-8144 -1814 -1829 -1913 0
-8144 -1814 -1827 -1915 0
-8144 -1814 -1825 -1917 0
-8144 -1814 -1823 -1919 0
-8144 -1814 -1821 -1921 0
-8144 -1814 -1820 -1923 0
-8144 -1812 -1893 0
-8144 -1812 -1849 -1895 0
-8144 -1812 -1847 -1897 0
-8144 -1812 -1845 -1899 0
-8144 -1812 -1843 -1901 0
-8144 -1812 -1841 -1903 0
-8144 -1812 -1839 -1905 0
-8144 -1812 -1837 -1907 0
-8144 -1812 -1835 -1909 0
-8144 -1812 -1833 -1911 0
-8144 -1812 -1831 -1913 0
-8144 -1812 -1829 -1915 0
-8144 -1812 -1827 -1917 0
-8144 -1812 -1825 -1919 0
-8144 -1812 -1823 -1921 0
-8144 -1812 -1821 -1923 0
-8144 -1812 -1820 -1925 0
-8144 -1810 -1895 0
-8144 -1810 -1849 -1897 0
-8144 -1810 -1847 -1899 0
-8144 -1810 -1845 -1901 0
-8144 -1810 -1843 -1903 0
-8144 -1810 -1841 -1905 0
-8144 -1810 -1839 -1907 0
-8144 -1810 -1837 -1909 0
-8144 -1810 -1835 -1911 0
-8144 -1810 -1833 -1913 0
-8144 -1810 -1831 -1915 0
-8144 -1810 -1829 -1917 0
-8144 -1810 -1827 -1919 0
-8144 -1810 -1825 -1921 0
-8144 -1810 -1823 -1923 0
-8144 -1810 -1821 -1925 0
-8144 -1810 -1820 -1927 0
-8144 -1808 -1897 0
-8144 -1808 -1849 -1899 0
-8144 -1808 -1847 -1901 0
-8144 -1808 -1845 -1903 0
-8144 -1808 -1843 -1905 0
-8144 -1808 -1841 -1907 0
-8144 -1808 -1839 -1909 0
-8144 -1808 -1837 -1911 0
-8144 -1808 -1835 -1913 0
-8144 -1808 -1833 -1915 0
-8144 -1808 -1831 -1917 0
-8144 -1808 -1829 -1919 0
-8144 -1808 -1827 -1921 0
-8144 -1808 -1825 -1923 0
-8144 -1808 -1823 -1925 0
-8144 -1808 -1821 -1927 0
-8144 -1808 -1820 0
-8144 -1806 -1899 0
-8144 -1806 -1849 -1901 0
-8144 -1806 -1847 -1903 0
-8144 -1806 -1845 -1905 0
-8144 -1806 -1843 -1907 0
-8144 -1806 -1841 -1909 0
-8144 -1806 -1839 -1911 0
-8144 -1806 -1837 -1913 0
-8144 -1806 -1835 -1915 0
-8144 -1806 -1833 -1917 0
-8144 -1806 -1831 -1919 0
-8144 -1806 -1829 -1921 0
-8144 -1806 -1827 -1923 0
-8144 -1806 -1825 -1925 0
-8144 -1806 -1823 -1927 0
-8144 -1806 -1821 0
-8144 -1806 -1820 0
-8144 -1804 -1901 0
-8144 -1804 -1849 -1903 0
-8144 -1804 -1847 -1905 0
-8144 -1804 -1845 -1907 0
-8144 -1804 -1843 -1909 0
-8144 -1804 -1841 -1911 0
-8144 -1804 -1839 -1913 0
-8144 -1804 -1837 -1915 0
-8144 -1804 -1835 -1917 0
-8144 -1804 -1833 -1919 0
-8144 -1804 -1831 -1921 0
-8144 -1804 -1829 -1923 0
-8144 -1804 -1827 -1925 0
-8144 -1804 -1825 -1927 0
-8144 -1804 -1823 0
-8144 -1804 -1821 0
-8144 -1804 -1820 0
-8144 -1802 -1903 0
-8144 -1802 -1849 -1905 0
-8144 -1802 -1847 -1907 0
-8144 -1802 -1845 -1909 0
-8144 -1802 -1843 -1911 0
-8144 -1802 -1841 -1913 0
-8144 -1802 -1839 -1915 0
-8144 -1802 -1837 -1917 0
-8144 -1802 -1835 -1919 0
-8144 -1802 -1833 -1921 0
-8144 -1802 -1831 -1923 0
-8144 -1802 -1829 -1925 0
-8144 -1802 -1827 -1927 0
-8144 -1802 -1825 0
-8144 -1802 -1823 0
-8144 -1802 -1821 0
-8144 -1802 -1820 0
-8144 -1800 -1905 0
-8144 -1800 -1849 -1907 0
-8144 -1800 -1847 -1909 0
-8144 -1800 -1845 -1911 0
-8144 -1800 -1843 -1913 0
-8144 -1800 -1841 -1915 0
-8144 -1800 -1839 -1917 0
-8144 -1800 -1837 -1919 0
-8144 -1800 -1835 -1921 0
-8144 -1800 -1833 -1923 0
-8144 -1800 -1831 -1925 0
-8144 -1800 -1829 -1927 0
-8144 -1800 -1827 0
-8144 -1800 -1825 0
-8144 -1800 -1823 0
-8144 -1800 -1821 0
-8144 -1800 -1820 0
-8144 -1798 -1907 0
-8144 -1798 -1849 -1909 0
-8144 -1798 -1847 -1911 0
-8144 -1798 -1845 -1913 0
-8144 -1798 -1843 -1915 0
-8144 -1798 -1841 -1917 0
-8144 -1798 -1839 -1919 0
-8144 -1798 -1837 -1921 0
-8144 -1798 -1835 -1923 0
-8144 -1798 -1833 -1925 0
-8144 -1798 -1831 -1927 0
-8144 -1798 -1829 0
-8144 -1798 -1827 0
-8144 -1798 -1825 0
-8144 -1798 -1823 0
-8144 -1798 -1821 0
-8144 -1798 -1820 0
-8144 -1796 -1909 0
-8144 -1796 -1849 -1911 0
-8144 -1796 -1847 -1913 0
-8144 -1796 -1845 -1915 0
-8144 -1796 -1843 -1917 0
-8144 -1796 -1841 -1919 0
-8144 -1796 -1839 -1921 0
-8144 -1796 -1837 -1923 0
-8144 -1796 -1835 -1925 0
-8144 -1796 -1833 -1927 0
-8144 -1796 -1831 0
-8144 -1796 -1829 0
-8144 -1796 -1827 0
-8144 -1796 -1825 0
-8144 -1796 -1823 0
-8144 -1796 -1821 0
-8144 -1796 -1820 0
-8144 -1794 -1911 0
-8144 -1794 -1849 -1913 0
-8144 -1794 -1847 -1915 0
-8144 -1794 -1845 -1917 0
-8144 -1794 -1843 -1919 0
-8144 -1794 -1841 -1921 0
-8144 -1794 -1839 -1923 0
-8144 -1794 -1837 -1925 0
-8144 -1794 -1835 -1927 0
-8144 -1794 -1833 0
-8144 -1794 -1831 0
-8144 -1794 -1829 0
-8144 -1794 -1827 0
-8144 -1794 -1825 0
-8144 -1794 -1823 0
-8144 -1794 -1821 0
-8144 -1794 -1820 0
-8144 -1792 -1913 0
-8144 -1792 -1849 -1915 0
-8144 -1792 -1847 -1917 0
-8144 -1792 -1845 -1919 0
-8144 -1792 -1843 -1921 0
-8144 -1792 -1841 -1923 0
-8144 -1792 -1839 -1925 0
-8144 -1792 -1837 -1927 0
-8144 -1792 -1835 0
-8144 -1792 -1833 0
-8144 -1792 -1831 0
-8144 -1792 -1829 0
-8144 -1792 -1827 0
-8144 -1792 -1825 0
-8144 -1792 -1823 0
-8144 -1792 -1821 0
-8144 -1792 -1820 0
-8144 -1790 -1915 0
-8144 -1790 -1849 -1917 0
-8144 -1790 -1847 -1919 0
-8144 -1790 -1845 -1921 0
-8144 -1790 -1843 -1923 0
-8144 -1790 -1841 -1925 0
-8144 -1790 -1839 -1927 0
-8144 -1790 -1837 0
-8144 -1790 -1835 0
-8144 -1790 -1833 0
-8144 -1790 -1831 0
-8144 -1790 -1829 0
-8144 -1790 -1827 0
-8144 -1790 -1825 0
-8144 -1790 -1823 0
-8144 -1790 -1821 0
-8144 -1790 -1820 0
-8144 -1789 -1917 0
-8144 -1789 -1849 -1919 0
-8144 -1789 -1847 -1921 0
-8144 -1789 -1845 -1923 0
-8144 -1789 -1843 -1925 0
-8144 -1789 -1841 -1927 0
-8144 -1789 -1839 0
-8144 -1789 -1837 0
-8144 -1789 -1835 0
-8144 -1789 -1833 0
-8144 -1789 -1831 0
-8144 -1789 -1829 0
-8144 -1789 -1827 0
-8144 -1789 -1825 0
-8144 -1789 -1823 0
-8144 -1789 -1821 0
-8144 -1789 -1820 0
8144 1839 1927 0
8144 1841 1925 0
8144 1843 1923 0
8144 1845 1921 0
8144 1847 1919 0
8144 1849 1917 0
8144 1789 1837 1927 0
8144 1789 1839 1925 0
8144 1789 1841 1923 0
8144 1789 1843 1921 0
8144 1789 1845 1919 0
8144 1789 1847 1917 0
8144 1789 1849 1915 0
8144 1790 1835 1927 0
8144 1790 1837 1925 0
8144 1790 1839 1923 0
8144 1790 1841 1921 0
8144 1790 1843 1919 0
8144 1790 1845 1917 0
8144 1790 1847 1915 0
8144 1790 1849 1913 0
8144 1792 1833 1927 0
8144 1792 1835 1925 0
8144 1792 1837 1923 0
8144 1792 1839 1921 0
8144 1792 1841 1919 0
8144 1792 1843 1917 0
8144 1792 1845 1915 0
8144 1792 1847 1913 0
8144 1792 1849 1911 0
8144 1794 1831 1927 0
8144 1794 1833 1925 0
8144 1794 1835 1923 0
8144 1794 1837 1921 0
8144 1794 1839 1919 0
8144 1794 1841 1917 0
8144 1794 1843 1915 0
8144 1794 1845 1913 0
8144 1794 1847 1911 0
8144 1794 1849 1909 0
8144 1796 1829 1927 0
8144 1796 1831 1925 0
8144 1796 1833 1923 0
8144 1796 1835 1921 0
8144 1796 1837 1919 0
8144 1796 1839 1917 0
8144 1796 1841 1915 0
8144 1796 1843 1913 0
8144 1796 1845 1911 0
8144 1796 1847 1909 0
8144 1796 1849 1907 0
8144 1798 1827 1927 0
8144 1798 1829 1925 0
8144 1798 1831 1923 0
8144 1798 1833 1921 0
8144 1798 1835 1919 0
8144 1798 1837 1917 0
8144 1798 1839 1915 0
8144 1798 1841 1913 0
8144 1798 1843 1911 0
8144 1798 1845 1909 0
8144 1798 1847 1907 0
8144 1798 1849 1905 0
8144 1800 1825 1927 0
8144 1800 1827 1925 0
8144 1800 1829 1923 0
8144 1800 1831 1921 0
8144 1800 1833 1919 0
8144 1800 1835 1917 0
8144 1800 1837 1915 0
8144 1800 1839 1913 0
8144 1800 1841 1911 0
8144 1800 1843 1909 0
8144 1800 1845 1907 0
8144 1800 1847 1905 0
8144 1800 1849 1903 0
8144 1802 1823 1927 0
8144 1802 1825 1925 0
8144 1802 1827 1923 0
8144 1802 1829 1921 0
8144 1802 1831 1919 0
8144 1802 1833 1917 0
8144 1802 1835 1915 0
8144 1802 1837 1913 0
8144 1802 1839 1911 0
8144 1802 1841 1909 0
8144 1802 1843 1907 0
8144 1802 1845 1905 0
8144 1802 1847 1903 0
8144 1802 1849 1901 0
8144 1804 1821 1927 0
8144 1804 1823 1925 0
8144 1804 1825 1923 0
8144 1804 1827 1921 0
8144 1804 1829 1919 0
8144 1804 1831 1917 0
8144 1804 1833 1915 0
8144 1804 1835 1913 0
8144 1804 1837 1911 0
8144 1804 1839 1909 0
8144 1804 1841 1907 0
8144 1804 1843 1905 0
8144 1804 1845 1903 0
8144 1804 1847 1901 0
8144 1804 1849 1899 0
8144 1806 1820 1927 0
8144 1806 1821 1925 0
8144 1806 1823 1923 0
8144 1806 1825 1921 0
8144 1806 1827 1919 0
8144 1806 1829 1917 0
8144 1806 1831 1915 0
8144 1806 1833 1913 0
8144 1806 1835 1911 0
8144 1806 1837 1909 0
8144 1806 1839 1907 0
8144 1806 1841 1905 0
8144 1806 1843 1903 0
8144 1806 1845 1901 0
8144 1806 1847 1899 0
8144 1806 1849 1897 0
8144 1808 1927 0
8144 1808 1820 1925 0
8144 1808 1821 1923 0
8144 1808 1823 1921 0
8144 1808 1825 1919 0
8144 1808 1827 1917 0
8144 1808 1829 1915 0
8144 1808 1831 1913 0
8144 1808 1833 1911 0
8144 1808 1835 1909 0
8144 1808 1837 1907 0
8144 1808 1839 1905 0
8144 1808 1841 1903 0
8144 1808 1843 1901 0
8144 1808 1845 1899 0
8144 1808 1847 1897 0
8144 1808 1849 1895 0
8144 1810 1925 0
8144 1810 1820 1923 0
8144 1810 1821 1921 0
8144 1810 1823 1919 0
8144 1810 1825 1917 0
8144 1810 1827 1915 0
8144 1810 1829 1913 0
8144 1810 1831 1911 0
8144 1810 1833 1909 0
8144 1810 1835 1907 0
8144 1810 1837 1905 0
8144 1810 1839 1903 0
8144 1810 1841 1901 0
8144 1810 1843 1899 0
8144 1810 1845 1897 0
8144 1810 1847 1895 0
8144 1810 1849 1893 0
8144 1812 1923 0
8144 1812 1820 1921 0
8144 1812 1821 1919 0
8144 1812 1823 1917 0
8144 1812 1825 1915 0
8144 1812 1827 1913 0
8144 1812 1829 1911 0
8144 1812 1831 1909 0
8144 1812 1833 1907 0
8144 1812 1835 1905 0
8144 1812 1837 1903 0
8144 1812 1839 1901 0
8144 1812 1841 1899 0
8144 1812 1843 1897 0
8144 1812 1845 1895 0
8144 1812 1847 1893 0
8144 1812 1849 1891 0
8144 1814 1921 0
8144 1814 1820 1919 0
8144 1814 1821 1917 0
8144 1814 1823 1915 0
8144 1814 1825 1913 0
8144 1814 1827 1911 0
8144 1814 1829 1909 0
8144 1814 1831 1907 0
8144 1814 1833 1905 0
8144 1814 1835 1903 0
8144 1814 1837 1901 0
8144 1814 1839 1899 0
8144 1814 1841 1897 0
8144 1814 1843 1895 0
8144 1814 1845 1893 0
8144 1814 1847 1891 0
8144 1814 1849 1889 0
8144 1816 1919 0
8144 1816 1820 1917 0
8144 1816 1821 1915 0
8144 1816 1823 1913 0
8144 1816 1825 1911 0
8144 1816 1827 1909 0
8144 1816 1829 1907 0
8144 1816 1831 1905 0
8144 1816 1833 1903 0
8144 1816 1835 1901 0
8144 1816 1837 1899 0
8144 1816 1839 1897 0
8144 1816 1841 1895 0
8144 1816 1843 1893 0
8144 1816 1845 1891 0
8144 1816 1847 1889 0
8144 1816 1849 1887 0
8144 1818 1917 0
8144 1818 1820 1915 0
8144 1818 1821 1913 0
8144 1818 1823 1911 0
8144 1818 1825 1909 0
8144 1818 1827 1907 0
8144 1818 1829 1905 0
8144 1818 1831 1903 0
8144 1818 1833 1901 0
8144 1818 1835 1899 0
8144 1818 1837 1897 0
8144 1818 1839 1895 0
8144 1818 1841 1893 0
8144 1818 1843 1891 0
8144 1818 1845 1889 0
8144 1818 1847 1887 0
8144 1818 1849 1885 0
c (((x_00004_00008 + x_00005_00008)<=17)=tv=SATLiteral(8145))
-8145 525 660 0
8145 -660 0
8145 -525 0
8145 -523 0
8145 -521 0
8145 -519 0
8145 -517 0
8145 -515 0
8145 -513 0
8145 -512 0
c ((17<=(x_00004_00008 + x_00005_00008))=tv=SATLiteral(8146))
-8146 -658 0
-8146 -525 -660 0
-8146 -523 0
-8146 -521 0
-8146 -519 0
-8146 -517 0
-8146 -515 0
-8146 -513 0
-8146 -512 0
8146 523 660 0
8146 525 658 0
c (((aux433 + shift(x_00005_00005, -1) + shift(x_00006_00004, -1))<=14)=tv=SATLiteral(8147))
-8147 1956 0
-8147 722 1954 0
-8147 723 1952 0
-8147 725 1950 0
-8147 727 1948 0
-8147 729 1946 0
-8147 731 1944 0
-8147 733 1942 0
-8147 735 1940 0
-8147 602 1954 0
-8147 602 722 1952 0
-8147 602 723 1950 0
-8147 602 725 1948 0
-8147 602 727 1946 0
-8147 602 729 1944 0
-8147 602 731 1942 0
-8147 602 733 1940 0
-8147 602 735 1938 0
-8147 603 1952 0
-8147 603 722 1950 0
-8147 603 723 1948 0
-8147 603 725 1946 0
-8147 603 727 1944 0
-8147 603 729 1942 0
-8147 603 731 1940 0
-8147 603 733 1938 0
-8147 603 735 1936 0
-8147 605 1950 0
-8147 605 722 1948 0
-8147 605 723 1946 0
-8147 605 725 1944 0
-8147 605 727 1942 0
-8147 605 729 1940 0
-8147 605 731 1938 0
-8147 605 733 1936 0
-8147 605 735 1934 0
-8147 607 1948 0
-8147 607 722 1946 0
-8147 607 723 1944 0
-8147 607 725 1942 0
-8147 607 727 1940 0
-8147 607 729 1938 0
-8147 607 731 1936 0
-8147 607 733 1934 0
-8147 607 735 1932 0
-8147 609 1946 0
-8147 609 722 1944 0
-8147 609 723 1942 0
-8147 609 725 1940 0
-8147 609 727 1938 0
-8147 609 729 1936 0
-8147 609 731 1934 0
-8147 609 733 1932 0
-8147 609 735 1930 0
-8147 611 1944 0
-8147 611 722 1942 0
-8147 611 723 1940 0
-8147 611 725 1938 0
-8147 611 727 1936 0
-8147 611 729 1934 0
-8147 611 731 1932 0
-8147 611 733 1930 0
-8147 611 735 1929 0
-8147 613 1942 0
-8147 613 722 1940 0
-8147 613 723 1938 0
-8147 613 725 1936 0
-8147 613 727 1934 0
-8147 613 729 1932 0
-8147 613 731 1930 0
-8147 613 733 1929 0
-8147 613 735 0
-8147 615 1940 0
-8147 615 722 1938 0
-8147 615 723 1936 0
-8147 615 725 1934 0
-8147 615 727 1932 0
-8147 615 729 1930 0
-8147 615 731 1929 0
-8147 615 733 0
-8147 615 735 0
8147 -733 -1929 0
8147 -731 -1930 0
8147 -729 -1932 0
8147 -727 -1934 0
8147 -725 -1936 0
8147 -723 -1938 0
8147 -722 -1940 0
8147 -615 -735 -1929 0
8147 -615 -733 -1930 0
8147 -615 -731 -1932 0
8147 -615 -729 -1934 0
8147 -615 -727 -1936 0
8147 -615 -725 -1938 0
8147 -615 -723 -1940 0
8147 -615 -722 -1942 0
8147 -613 -1929 0
8147 -613 -735 -1930 0
8147 -613 -733 -1932 0
8147 -613 -731 -1934 0
8147 -613 -729 -1936 0
8147 -613 -727 -1938 0
8147 -613 -725 -1940 0
8147 -613 -723 -1942 0
8147 -613 -722 -1944 0
8147 -611 -1930 0
8147 -611 -735 -1932 0
8147 -611 -733 -1934 0
8147 -611 -731 -1936 0
8147 -611 -729 -1938 0
8147 -611 -727 -1940 0
8147 -611 -725 -1942 0
8147 -611 -723 -1944 0
8147 -611 -722 -1946 0
8147 -609 -1932 0
8147 -609 -735 -1934 0
8147 -609 -733 -1936 0
8147 -609 -731 -1938 0
8147 -609 -729 -1940 0
8147 -609 -727 -1942 0
8147 -609 -725 -1944 0
8147 -609 -723 -1946 0
8147 -609 -722 -1948 0
8147 -607 -1934 0
8147 -607 -735 -1936 0
8147 -607 -733 -1938 0
8147 -607 -731 -1940 0
8147 -607 -729 -1942 0
8147 -607 -727 -1944 0
8147 -607 -725 -1946 0
8147 -607 -723 -1948 0
8147 -607 -722 -1950 0
8147 -605 -1936 0
8147 -605 -735 -1938 0
8147 -605 -733 -1940 0
8147 -605 -731 -1942 0
8147 -605 -729 -1944 0
8147 -605 -727 -1946 0
8147 -605 -725 -1948 0
8147 -605 -723 -1950 0
8147 -605 -722 -1952 0
8147 -603 -1938 0
8147 -603 -735 -1940 0
8147 -603 -733 -1942 0
8147 -603 -731 -1944 0
8147 -603 -729 -1946 0
8147 -603 -727 -1948 0
8147 -603 -725 -1950 0
8147 -603 -723 -1952 0
8147 -603 -722 -1954 0
8147 -602 -1940 0
8147 -602 -735 -1942 0
8147 -602 -733 -1944 0
8147 -602 -731 -1946 0
8147 -602 -729 -1948 0
8147 -602 -727 -1950 0
8147 -602 -725 -1952 0
8147 -602 -723 -1954 0
8147 -602 -722 -1956 0
c ((14<=(aux433 + shift(x_00005_00005, -1) + shift(x_00006_00004, -1)))=tv=SATLiteral(8148))
-8148 -731 -1929 0
-8148 -729 -1930 0
-8148 -727 -1932 0
-8148 -725 -1934 0
-8148 -723 -1936 0
-8148 -722 -1938 0
-8148 -615 -733 -1929 0
-8148 -615 -731 -1930 0
-8148 -615 -729 -1932 0
-8148 -615 -727 -1934 0
-8148 -615 -725 -1936 0
-8148 -615 -723 -1938 0
-8148 -615 -722 -1940 0
-8148 -613 -735 -1929 0
-8148 -613 -733 -1930 0
-8148 -613 -731 -1932 0
-8148 -613 -729 -1934 0
-8148 -613 -727 -1936 0
-8148 -613 -725 -1938 0
-8148 -613 -723 -1940 0
-8148 -613 -722 -1942 0
-8148 -611 -1929 0
-8148 -611 -735 -1930 0
-8148 -611 -733 -1932 0
-8148 -611 -731 -1934 0
-8148 -611 -729 -1936 0
-8148 -611 -727 -1938 0
-8148 -611 -725 -1940 0
-8148 -611 -723 -1942 0
-8148 -611 -722 -1944 0
-8148 -609 -1930 0
-8148 -609 -735 -1932 0
-8148 -609 -733 -1934 0
-8148 -609 -731 -1936 0
-8148 -609 -729 -1938 0
-8148 -609 -727 -1940 0
-8148 -609 -725 -1942 0
-8148 -609 -723 -1944 0
-8148 -609 -722 -1946 0
-8148 -607 -1932 0
-8148 -607 -735 -1934 0
-8148 -607 -733 -1936 0
-8148 -607 -731 -1938 0
-8148 -607 -729 -1940 0
-8148 -607 -727 -1942 0
-8148 -607 -725 -1944 0
-8148 -607 -723 -1946 0
-8148 -607 -722 -1948 0
-8148 -605 -1934 0
-8148 -605 -735 -1936 0
-8148 -605 -733 -1938 0
-8148 -605 -731 -1940 0
-8148 -605 -729 -1942 0
-8148 -605 -727 -1944 0
-8148 -605 -725 -1946 0
-8148 -605 -723 -1948 0
-8148 -605 -722 -1950 0
-8148 -603 -1936 0
-8148 -603 -735 -1938 0
-8148 -603 -733 -1940 0
-8148 -603 -731 -1942 0
-8148 -603 -729 -1944 0
-8148 -603 -727 -1946 0
-8148 -603 -725 -1948 0
-8148 -603 -723 -1950 0
-8148 -603 -722 -1952 0
-8148 -602 -1938 0
-8148 -602 -735 -1940 0
-8148 -602 -733 -1942 0
-8148 -602 -731 -1944 0
-8148 -602 -729 -1946 0
-8148 -602 -727 -1948 0
-8148 -602 -725 -1950 0
-8148 -602 -723 -1952 0
-8148 -602 -722 -1954 0
8148 1954 0
8148 722 1952 0
8148 723 1950 0
8148 725 1948 0
8148 727 1946 0
8148 729 1944 0
8148 731 1942 0
8148 733 1940 0
8148 735 1938 0
8148 602 1952 0
8148 602 722 1950 0
8148 602 723 1948 0
8148 602 725 1946 0
8148 602 727 1944 0
8148 602 729 1942 0
8148 602 731 1940 0
8148 602 733 1938 0
8148 602 735 1936 0
8148 603 1950 0
8148 603 722 1948 0
8148 603 723 1946 0
8148 603 725 1944 0
8148 603 727 1942 0
8148 603 729 1940 0
8148 603 731 1938 0
8148 603 733 1936 0
8148 603 735 1934 0
8148 605 1948 0
8148 605 722 1946 0
8148 605 723 1944 0
8148 605 725 1942 0
8148 605 727 1940 0
8148 605 729 1938 0
8148 605 731 1936 0
8148 605 733 1934 0
8148 605 735 1932 0
8148 607 1946 0
8148 607 722 1944 0
8148 607 723 1942 0
8148 607 725 1940 0
8148 607 727 1938 0
8148 607 729 1936 0
8148 607 731 1934 0
8148 607 733 1932 0
8148 607 735 1930 0
8148 609 1944 0
8148 609 722 1942 0
8148 609 723 1940 0
8148 609 725 1938 0
8148 609 727 1936 0
8148 609 729 1934 0
8148 609 731 1932 0
8148 609 733 1930 0
8148 609 735 1929 0
8148 611 1942 0
8148 611 722 1940 0
8148 611 723 1938 0
8148 611 725 1936 0
8148 611 727 1934 0
8148 611 729 1932 0
8148 611 731 1930 0
8148 611 733 1929 0
8148 611 735 0
8148 613 1940 0
8148 613 722 1938 0
8148 613 723 1936 0
8148 613 725 1934 0
8148 613 727 1932 0
8148 613 729 1930 0
8148 613 731 1929 0
8148 613 733 0
8148 613 735 0
8148 615 1938 0
8148 615 722 1936 0
8148 615 723 1934 0
8148 615 725 1932 0
8148 615 727 1930 0
8148 615 729 1929 0
8148 615 731 0
8148 615 733 0
8148 615 735 0
c (((x_00005_00006 + x_00005_00007)<=13)=tv=SATLiteral(8149))
-8149 622 645 0
-8149 624 643 0
-8149 626 641 0
-8149 628 639 0
-8149 630 637 0
8149 -637 0
8149 -630 -639 0
8149 -628 -641 0
8149 -626 -643 0
8149 -624 -645 0
8149 -622 0
8149 -620 0
8149 -618 0
8149 -617 0
c ((13<=(x_00005_00006 + x_00005_00007))=tv=SATLiteral(8150))
-8150 -635 0
-8150 -630 -637 0
-8150 -628 -639 0
-8150 -626 -641 0
-8150 -624 -643 0
-8150 -622 -645 0
-8150 -620 0
-8150 -618 0
-8150 -617 0
8150 620 645 0
8150 622 643 0
8150 624 641 0
8150 626 639 0
8150 628 637 0
8150 630 635 0
c (((x_00005_00009 + x_00006_00008 + x_00006_00009)<=7)=tv=SATLiteral(8151))
-8151 804 0
-8151 782 802 0
-8151 783 800 0
-8151 785 798 0
-8151 787 797 0
-8151 789 0
-8151 791 0
-8151 793 0
-8151 795 0
-8151 662 802 0
-8151 662 782 800 0
-8151 662 783 798 0
-8151 662 785 797 0
-8151 662 787 0
-8151 662 789 0
-8151 662 791 0
-8151 662 793 0
-8151 662 795 0
-8151 663 800 0
-8151 663 782 798 0
-8151 663 783 797 0
-8151 663 785 0
-8151 663 787 0
-8151 663 789 0
-8151 663 791 0
-8151 663 793 0
-8151 663 795 0
-8151 665 798 0
-8151 665 782 797 0
-8151 665 783 0
-8151 665 785 0
-8151 665 787 0
-8151 665 789 0
-8151 665 791 0
-8151 665 793 0
-8151 665 795 0
-8151 667 797 0
-8151 667 782 0
-8151 667 783 0
-8151 667 785 0
-8151 667 787 0
-8151 667 789 0
-8151 667 791 0
-8151 667 793 0
-8151 667 795 0
-8151 669 0
-8151 669 782 0
-8151 669 783 0
-8151 669 785 0
-8151 669 787 0
-8151 669 789 0
-8151 669 791 0
-8151 669 793 0
-8151 669 795 0
-8151 671 0
-8151 671 782 0
-8151 671 783 0
-8151 671 785 0
-8151 671 787 0
-8151 671 789 0
-8151 671 791 0
-8151 671 793 0
-8151 671 795 0
-8151 673 0
-8151 673 782 0
-8151 673 783 0
-8151 673 785 0
-8151 673 787 0
-8151 673 789 0
-8151 673 791 0
-8151 673 793 0
-8151 673 795 0
-8151 675 0
-8151 675 782 0
-8151 675 783 0
-8151 675 785 0
-8151 675 787 0
-8151 675 789 0
-8151 675 791 0
-8151 675 793 0
-8151 675 795 0
8151 -669 -782 -797 0
8151 -667 -783 -797 0
8151 -667 -782 -798 0
8151 -665 -785 -797 0
8151 -665 -783 -798 0
8151 -665 -782 -800 0
8151 -663 -787 -797 0
8151 -663 -785 -798 0
8151 -663 -783 -800 0
8151 -663 -782 -802 0
8151 -662 -789 -797 0
8151 -662 -787 -798 0
8151 -662 -785 -800 0
8151 -662 -783 -802 0
8151 -662 -782 -804 0
c ((7<=(x_00005_00009 + x_00006_00008 + x_00006_00009))=tv=SATLiteral(8152))
-8152 -667 -782 -797 0
-8152 -665 -783 -797 0
-8152 -665 -782 -798 0
-8152 -663 -785 -797 0
-8152 -663 -783 -798 0
-8152 -663 -782 -800 0
-8152 -662 -787 -797 0
-8152 -662 -785 -798 0
-8152 -662 -783 -800 0
-8152 -662 -782 -802 0
8152 802 0
8152 782 800 0
8152 783 798 0
8152 785 797 0
8152 787 0
8152 789 0
8152 791 0
8152 793 0
8152 795 0
8152 662 800 0
8152 662 782 798 0
8152 662 783 797 0
8152 662 785 0
8152 662 787 0
8152 662 789 0
8152 662 791 0
8152 662 793 0
8152 662 795 0
8152 663 798 0
8152 663 782 797 0
8152 663 783 0
8152 663 785 0
8152 663 787 0
8152 663 789 0
8152 663 791 0
8152 663 793 0
8152 663 795 0
8152 665 797 0
8152 665 782 0
8152 665 783 0
8152 665 785 0
8152 665 787 0
8152 665 789 0
8152 665 791 0
8152 665 793 0
8152 665 795 0
8152 667 0
8152 667 782 0
8152 667 783 0
8152 667 785 0
8152 667 787 0
8152 667 789 0
8152 667 791 0
8152 667 793 0
8152 667 795 0
8152 669 0
8152 669 782 0
8152 669 783 0
8152 669 785 0
8152 669 787 0
8152 669 789 0
8152 669 791 0
8152 669 793 0
8152 669 795 0
8152 671 0
8152 671 782 0
8152 671 783 0
8152 671 785 0
8152 671 787 0
8152 671 789 0
8152 671 791 0
8152 671 793 0
8152 671 795 0
8152 673 0
8152 673 782 0
8152 673 783 0
8152 673 785 0
8152 673 787 0
8152 673 789 0
8152 673 791 0
8152 673 793 0
8152 673 795 0
8152 675 0
8152 675 782 0
8152 675 783 0
8152 675 785 0
8152 675 787 0
8152 675 789 0
8152 675 791 0
8152 675 793 0
8152 675 795 0
c (((x_00007_00001 + x_00007_00002 + x_00006_00002)<=19)=tv=SATLiteral(8153))
-8153 812 840 705 0
-8153 813 838 705 0
-8153 813 840 703 0
-8153 815 836 705 0
-8153 815 838 703 0
-8153 815 840 701 0
-8153 817 834 705 0
-8153 817 836 703 0
-8153 817 838 701 0
-8153 817 840 699 0
-8153 819 832 705 0
-8153 819 834 703 0
-8153 819 836 701 0
-8153 819 838 699 0
-8153 819 840 697 0
-8153 821 830 705 0
-8153 821 832 703 0
-8153 821 834 701 0
-8153 821 836 699 0
-8153 821 838 697 0
-8153 821 840 695 0
-8153 823 828 705 0
-8153 823 830 703 0
-8153 823 832 701 0
-8153 823 834 699 0
-8153 823 836 697 0
-8153 823 838 695 0
-8153 823 840 693 0
-8153 825 827 705 0
-8153 825 828 703 0
-8153 825 830 701 0
-8153 825 832 699 0
-8153 825 834 697 0
-8153 825 836 695 0
-8153 825 838 693 0
-8153 825 840 692 0
8153 -692 0
8153 -840 -693 0
8153 -838 -695 0
8153 -836 -697 0
8153 -834 -699 0
8153 -832 -701 0
8153 -830 -703 0
8153 -828 -705 0
8153 -827 0
8153 -825 -693 0
8153 -825 -840 -695 0
8153 -825 -838 -697 0
8153 -825 -836 -699 0
8153 -825 -834 -701 0
8153 -825 -832 -703 0
8153 -825 -830 -705 0
8153 -825 -828 0
8153 -825 -827 0
8153 -823 -695 0
8153 -823 -840 -697 0
8153 -823 -838 -699 0
8153 -823 -836 -701 0
8153 -823 -834 -703 0
8153 -823 -832 -705 0
8153 -823 -830 0
8153 -823 -828 0
8153 -823 -827 0
8153 -821 -697 0
8153 -821 -840 -699 0
8153 -821 -838 -701 0
8153 -821 -836 -703 0
8153 -821 -834 -705 0
8153 -821 -832 0
8153 -821 -830 0
8153 -821 -828 0
8153 -821 -827 0
8153 -819 -699 0
8153 -819 -840 -701 0
8153 -819 -838 -703 0
8153 -819 -836 -705 0
8153 -819 -834 0
8153 -819 -832 0
8153 -819 -830 0
8153 -819 -828 0
8153 -819 -827 0
8153 -817 -701 0
8153 -817 -840 -703 0
8153 -817 -838 -705 0
8153 -817 -836 0
8153 -817 -834 0
8153 -817 -832 0
8153 -817 -830 0
8153 -817 -828 0
8153 -817 -827 0
8153 -815 -703 0
8153 -815 -840 -705 0
8153 -815 -838 0
8153 -815 -836 0
8153 -815 -834 0
8153 -815 -832 0
8153 -815 -830 0
8153 -815 -828 0
8153 -815 -827 0
8153 -813 -705 0
8153 -813 -840 0
8153 -813 -838 0
8153 -813 -836 0
8153 -813 -834 0
8153 -813 -832 0
8153 -813 -830 0
8153 -813 -828 0
8153 -813 -827 0
8153 -812 0
8153 -812 -840 0
8153 -812 -838 0
8153 -812 -836 0
8153 -812 -834 0
8153 -812 -832 0
8153 -812 -830 0
8153 -812 -828 0
8153 -812 -827 0
c ((19<=(x_00007_00001 + x_00007_00002 + x_00006_00002))=tv=SATLiteral(8154))
-8154 -840 -692 0
-8154 -838 -693 0
-8154 -836 -695 0
-8154 -834 -697 0
-8154 -832 -699 0
-8154 -830 -701 0
-8154 -828 -703 0
-8154 -827 -705 0
-8154 -825 -692 0
-8154 -825 -840 -693 0
-8154 -825 -838 -695 0
-8154 -825 -836 -697 0
-8154 -825 -834 -699 0
-8154 -825 -832 -701 0
-8154 -825 -830 -703 0
-8154 -825 -828 -705 0
-8154 -825 -827 0
-8154 -823 -693 0
-8154 -823 -840 -695 0
-8154 -823 -838 -697 0
-8154 -823 -836 -699 0
-8154 -823 -834 -701 0
-8154 -823 -832 -703 0
-8154 -823 -830 -705 0
-8154 -823 -828 0
-8154 -823 -827 0
-8154 -821 -695 0
-8154 -821 -840 -697 0
-8154 -821 -838 -699 0
-8154 -821 -836 -701 0
-8154 -821 -834 -703 0
-8154 -821 -832 -705 0
-8154 -821 -830 0
-8154 -821 -828 0
-8154 -821 -827 0
-8154 -819 -697 0
-8154 -819 -840 -699 0
-8154 -819 -838 -701 0
-8154 -819 -836 -703 0
-8154 -819 -834 -705 0
-8154 -819 -832 0
-8154 -819 -830 0
-8154 -819 -828 0
-8154 -819 -827 0
-8154 -817 -699 0
-8154 -817 -840 -701 0
-8154 -817 -838 -703 0
-8154 -817 -836 -705 0
-8154 -817 -834 0
-8154 -817 -832 0
-8154 -817 -830 0
-8154 -817 -828 0
-8154 -817 -827 0
-8154 -815 -701 0
-8154 -815 -840 -703 0
-8154 -815 -838 -705 0
-8154 -815 -836 0
-8154 -815 -834 0
-8154 -815 -832 0
-8154 -815 -830 0
-8154 -815 -828 0
-8154 -815 -827 0
-8154 -813 -703 0
-8154 -813 -840 -705 0
-8154 -813 -838 0
-8154 -813 -836 0
-8154 -813 -834 0
-8154 -813 -832 0
-8154 -813 -830 0
-8154 -813 -828 0
-8154 -813 -827 0
-8154 -812 -705 0
-8154 -812 -840 0
-8154 -812 -838 0
-8154 -812 -836 0
-8154 -812 -834 0
-8154 -812 -832 0
-8154 -812 -830 0
-8154 -812 -828 0
-8154 -812 -827 0
8154 840 705 0
8154 812 838 705 0
8154 812 840 703 0
8154 813 836 705 0
8154 813 838 703 0
8154 813 840 701 0
8154 815 834 705 0
8154 815 836 703 0
8154 815 838 701 0
8154 815 840 699 0
8154 817 832 705 0
8154 817 834 703 0
8154 817 836 701 0
8154 817 838 699 0
8154 817 840 697 0
8154 819 830 705 0
8154 819 832 703 0
8154 819 834 701 0
8154 819 836 699 0
8154 819 838 697 0
8154 819 840 695 0
8154 821 828 705 0
8154 821 830 703 0
8154 821 832 701 0
8154 821 834 699 0
8154 821 836 697 0
8154 821 838 695 0
8154 821 840 693 0
8154 823 827 705 0
8154 823 828 703 0
8154 823 830 701 0
8154 823 832 699 0
8154 823 834 697 0
8154 823 836 695 0
8154 823 838 693 0
8154 823 840 692 0
8154 825 705 0
8154 825 827 703 0
8154 825 828 701 0
8154 825 830 699 0
8154 825 832 697 0
8154 825 834 695 0
8154 825 836 693 0
8154 825 838 692 0
8154 825 840 0
c (((x_00007_00007 + x_00006_00006 + x_00006_00007)<=12)=tv=SATLiteral(8155))
-8155 753 780 0
-8155 755 778 0
-8155 757 776 0
-8155 759 774 0
-8155 761 772 0
-8155 763 770 0
-8155 765 768 0
-8155 902 752 780 0
-8155 902 753 778 0
-8155 902 755 776 0
-8155 902 757 774 0
-8155 902 759 772 0
-8155 902 761 770 0
-8155 902 763 768 0
-8155 902 765 767 0
-8155 903 780 0
-8155 903 752 778 0
-8155 903 753 776 0
-8155 903 755 774 0
-8155 903 757 772 0
-8155 903 759 770 0
-8155 903 761 768 0
-8155 903 763 767 0
-8155 903 765 0
-8155 905 778 0
-8155 905 752 776 0
-8155 905 753 774 0
-8155 905 755 772 0
-8155 905 757 770 0
-8155 905 759 768 0
-8155 905 761 767 0
-8155 905 763 0
-8155 905 765 0
-8155 907 776 0
-8155 907 752 774 0
-8155 907 753 772 0
-8155 907 755 770 0
-8155 907 757 768 0
-8155 907 759 767 0
-8155 907 761 0
-8155 907 763 0
-8155 907 765 0
-8155 909 774 0
-8155 909 752 772 0
-8155 909 753 770 0
-8155 909 755 768 0
-8155 909 757 767 0
-8155 909 759 0
-8155 909 761 0
-8155 909 763 0
-8155 909 765 0
-8155 911 772 0
-8155 911 752 770 0
-8155 911 753 768 0
-8155 911 755 767 0
-8155 911 757 0
-8155 911 759 0
-8155 911 761 0
-8155 911 763 0
-8155 911 765 0
-8155 913 770 0
-8155 913 752 768 0
-8155 913 753 767 0
-8155 913 755 0
-8155 913 757 0
-8155 913 759 0
-8155 913 761 0
-8155 913 763 0
-8155 913 765 0
-8155 915 768 0
-8155 915 752 767 0
-8155 915 753 0
-8155 915 755 0
-8155 915 757 0
-8155 915 759 0
-8155 915 761 0
-8155 915 763 0
-8155 915 765 0
8155 -753 -767 0
8155 -752 -768 0
8155 -915 -755 -767 0
8155 -915 -753 -768 0
8155 -915 -752 -770 0
8155 -913 -757 -767 0
8155 -913 -755 -768 0
8155 -913 -753 -770 0
8155 -913 -752 -772 0
8155 -911 -759 -767 0
8155 -911 -757 -768 0
8155 -911 -755 -770 0
8155 -911 -753 -772 0
8155 -911 -752 -774 0
8155 -909 -761 -767 0
8155 -909 -759 -768 0
8155 -909 -757 -770 0
8155 -909 -755 -772 0
8155 -909 -753 -774 0
8155 -909 -752 -776 0
8155 -907 -763 -767 0
8155 -907 -761 -768 0
8155 -907 -759 -770 0
8155 -907 -757 -772 0
8155 -907 -755 -774 0
8155 -907 -753 -776 0
8155 -907 -752 -778 0
8155 -905 -765 -767 0
8155 -905 -763 -768 0
8155 -905 -761 -770 0
8155 -905 -759 -772 0
8155 -905 -757 -774 0
8155 -905 -755 -776 0
8155 -905 -753 -778 0
8155 -905 -752 -780 0
8155 -903 -767 0
8155 -903 -765 -768 0
8155 -903 -763 -770 0
8155 -903 -761 -772 0
8155 -903 -759 -774 0
8155 -903 -757 -776 0
8155 -903 -755 -778 0
8155 -903 -753 -780 0
8155 -903 -752 0
8155 -902 -768 0
8155 -902 -765 -770 0
8155 -902 -763 -772 0
8155 -902 -761 -774 0
8155 -902 -759 -776 0
8155 -902 -757 -778 0
8155 -902 -755 -780 0
8155 -902 -753 0
8155 -902 -752 0
c ((12<=(x_00007_00007 + x_00006_00006 + x_00006_00007))=tv=SATLiteral(8156))
-8156 -752 -767 0
-8156 -915 -753 -767 0
-8156 -915 -752 -768 0
-8156 -913 -755 -767 0
-8156 -913 -753 -768 0
-8156 -913 -752 -770 0
-8156 -911 -757 -767 0
-8156 -911 -755 -768 0
-8156 -911 -753 -770 0
-8156 -911 -752 -772 0
-8156 -909 -759 -767 0
-8156 -909 -757 -768 0
-8156 -909 -755 -770 0
-8156 -909 -753 -772 0
-8156 -909 -752 -774 0
-8156 -907 -761 -767 0
-8156 -907 -759 -768 0
-8156 -907 -757 -770 0
-8156 -907 -755 -772 0
-8156 -907 -753 -774 0
-8156 -907 -752 -776 0
-8156 -905 -763 -767 0
-8156 -905 -761 -768 0
-8156 -905 -759 -770 0
-8156 -905 -757 -772 0
-8156 -905 -755 -774 0
-8156 -905 -753 -776 0
-8156 -905 -752 -778 0
-8156 -903 -765 -767 0
-8156 -903 -763 -768 0
-8156 -903 -761 -770 0
-8156 -903 -759 -772 0
-8156 -903 -757 -774 0
-8156 -903 -755 -776 0
-8156 -903 -753 -778 0
-8156 -903 -752 -780 0
-8156 -902 -767 0
-8156 -902 -765 -768 0
-8156 -902 -763 -770 0
-8156 -902 -761 -772 0
-8156 -902 -759 -774 0
-8156 -902 -757 -776 0
-8156 -902 -755 -778 0
-8156 -902 -753 -780 0
-8156 -902 -752 0
8156 752 780 0
8156 753 778 0
8156 755 776 0
8156 757 774 0
8156 759 772 0
8156 761 770 0
8156 763 768 0
8156 765 767 0
8156 902 780 0
8156 902 752 778 0
8156 902 753 776 0
8156 902 755 774 0
8156 902 757 772 0
8156 902 759 770 0
8156 902 761 768 0
8156 902 763 767 0
8156 902 765 0
8156 903 778 0
8156 903 752 776 0
8156 903 753 774 0
8156 903 755 772 0
8156 903 757 770 0
8156 903 759 768 0
8156 903 761 767 0
8156 903 763 0
8156 903 765 0
8156 905 776 0
8156 905 752 774 0
8156 905 753 772 0
8156 905 755 770 0
8156 905 757 768 0
8156 905 759 767 0
8156 905 761 0
8156 905 763 0
8156 905 765 0
8156 907 774 0
8156 907 752 772 0
8156 907 753 770 0
8156 907 755 768 0
8156 907 757 767 0
8156 907 759 0
8156 907 761 0
8156 907 763 0
8156 907 765 0
8156 909 772 0
8156 909 752 770 0
8156 909 753 768 0
8156 909 755 767 0
8156 909 757 0
8156 909 759 0
8156 909 761 0
8156 909 763 0
8156 909 765 0
8156 911 770 0
8156 911 752 768 0
8156 911 753 767 0
8156 911 755 0
8156 911 757 0
8156 911 759 0
8156 911 761 0
8156 911 763 0
8156 911 765 0
8156 913 768 0
8156 913 752 767 0
8156 913 753 0
8156 913 755 0
8156 913 757 0
8156 913 759 0
8156 913 761 0
8156 913 763 0
8156 913 765 0
8156 915 767 0
8156 915 752 0
8156 915 753 0
8156 915 755 0
8156 915 757 0
8156 915 759 0
8156 915 761 0
8156 915 763 0
8156 915 765 0
c (((x_00007_00008 + x_00007_00009)<=8)=tv=SATLiteral(8157))
-8157 943 0
-8157 917 941 0
-8157 918 939 0
-8157 920 937 0
-8157 922 935 0
-8157 924 933 0
-8157 926 932 0
-8157 928 0
-8157 930 0
8157 -928 -932 0
8157 -926 -933 0
8157 -924 -935 0
8157 -922 -937 0
8157 -920 -939 0
8157 -918 -941 0
8157 -917 -943 0
c ((8<=(x_00007_00008 + x_00007_00009))=tv=SATLiteral(8158))
-8158 -926 -932 0
-8158 -924 -933 0
-8158 -922 -935 0
-8158 -920 -937 0
-8158 -918 -939 0
-8158 -917 -941 0
8158 941 0
8158 917 939 0
8158 918 937 0
8158 920 935 0
8158 922 933 0
8158 924 932 0
8158 926 0
8158 928 0
8158 930 0
c (((aux434 + shift(x_00008_00002, -1) + shift(x_00009_00001, -1))<=12)=tv=SATLiteral(8159))
-8159 1983 0
-8159 1082 1981 0
-8159 1083 1979 0
-8159 1085 1977 0
-8159 1087 1975 0
-8159 1089 1973 0
-8159 1091 1971 0
-8159 1093 1969 0
-8159 1095 1967 0
-8159 962 1981 0
-8159 962 1082 1979 0
-8159 962 1083 1977 0
-8159 962 1085 1975 0
-8159 962 1087 1973 0
-8159 962 1089 1971 0
-8159 962 1091 1969 0
-8159 962 1093 1967 0
-8159 962 1095 1965 0
-8159 963 1979 0
-8159 963 1082 1977 0
-8159 963 1083 1975 0
-8159 963 1085 1973 0
-8159 963 1087 1971 0
-8159 963 1089 1969 0
-8159 963 1091 1967 0
-8159 963 1093 1965 0
-8159 963 1095 1963 0
-8159 965 1977 0
-8159 965 1082 1975 0
-8159 965 1083 1973 0
-8159 965 1085 1971 0
-8159 965 1087 1969 0
-8159 965 1089 1967 0
-8159 965 1091 1965 0
-8159 965 1093 1963 0
-8159 965 1095 1961 0
-8159 967 1975 0
-8159 967 1082 1973 0
-8159 967 1083 1971 0
-8159 967 1085 1969 0
-8159 967 1087 1967 0
-8159 967 1089 1965 0
-8159 967 1091 1963 0
-8159 967 1093 1961 0
-8159 967 1095 1960 0
-8159 969 1973 0
-8159 969 1082 1971 0
-8159 969 1083 1969 0
-8159 969 1085 1967 0
-8159 969 1087 1965 0
-8159 969 1089 1963 0
-8159 969 1091 1961 0
-8159 969 1093 1960 0
-8159 969 1095 0
-8159 971 1971 0
-8159 971 1082 1969 0
-8159 971 1083 1967 0
-8159 971 1085 1965 0
-8159 971 1087 1963 0
-8159 971 1089 1961 0
-8159 971 1091 1960 0
-8159 971 1093 0
-8159 971 1095 0
-8159 973 1969 0
-8159 973 1082 1967 0
-8159 973 1083 1965 0
-8159 973 1085 1963 0
-8159 973 1087 1961 0
-8159 973 1089 1960 0
-8159 973 1091 0
-8159 973 1093 0
-8159 973 1095 0
-8159 975 1967 0
-8159 975 1082 1965 0
-8159 975 1083 1963 0
-8159 975 1085 1961 0
-8159 975 1087 1960 0
-8159 975 1089 0
-8159 975 1091 0
-8159 975 1093 0
-8159 975 1095 0
8159 -1089 -1960 0
8159 -1087 -1961 0
8159 -1085 -1963 0
8159 -1083 -1965 0
8159 -1082 -1967 0
8159 -975 -1091 -1960 0
8159 -975 -1089 -1961 0
8159 -975 -1087 -1963 0
8159 -975 -1085 -1965 0
8159 -975 -1083 -1967 0
8159 -975 -1082 -1969 0
8159 -973 -1093 -1960 0
8159 -973 -1091 -1961 0
8159 -973 -1089 -1963 0
8159 -973 -1087 -1965 0
8159 -973 -1085 -1967 0
8159 -973 -1083 -1969 0
8159 -973 -1082 -1971 0
8159 -971 -1095 -1960 0
8159 -971 -1093 -1961 0
8159 -971 -1091 -1963 0
8159 -971 -1089 -1965 0
8159 -971 -1087 -1967 0
8159 -971 -1085 -1969 0
8159 -971 -1083 -1971 0
8159 -971 -1082 -1973 0
8159 -969 -1960 0
8159 -969 -1095 -1961 0
8159 -969 -1093 -1963 0
8159 -969 -1091 -1965 0
8159 -969 -1089 -1967 0
8159 -969 -1087 -1969 0
8159 -969 -1085 -1971 0
8159 -969 -1083 -1973 0
8159 -969 -1082 -1975 0
8159 -967 -1961 0
8159 -967 -1095 -1963 0
8159 -967 -1093 -1965 0
8159 -967 -1091 -1967 0
8159 -967 -1089 -1969 0
8159 -967 -1087 -1971 0
8159 -967 -1085 -1973 0
8159 -967 -1083 -1975 0
8159 -967 -1082 -1977 0
8159 -965 -1963 0
8159 -965 -1095 -1965 0
8159 -965 -1093 -1967 0
8159 -965 -1091 -1969 0
8159 -965 -1089 -1971 0
8159 -965 -1087 -1973 0
8159 -965 -1085 -1975 0
8159 -965 -1083 -1977 0
8159 -965 -1082 -1979 0
8159 -963 -1965 0
8159 -963 -1095 -1967 0
8159 -963 -1093 -1969 0
8159 -963 -1091 -1971 0
8159 -963 -1089 -1973 0
8159 -963 -1087 -1975 0
8159 -963 -1085 -1977 0
8159 -963 -1083 -1979 0
8159 -963 -1082 -1981 0
8159 -962 -1967 0
8159 -962 -1095 -1969 0
8159 -962 -1093 -1971 0
8159 -962 -1091 -1973 0
8159 -962 -1089 -1975 0
8159 -962 -1087 -1977 0
8159 -962 -1085 -1979 0
8159 -962 -1083 -1981 0
8159 -962 -1082 -1983 0
c ((12<=(aux434 + shift(x_00008_00002, -1) + shift(x_00009_00001, -1)))=tv=SATLiteral(8160))
-8160 -1087 -1960 0
-8160 -1085 -1961 0
-8160 -1083 -1963 0
-8160 -1082 -1965 0
-8160 -975 -1089 -1960 0
-8160 -975 -1087 -1961 0
-8160 -975 -1085 -1963 0
-8160 -975 -1083 -1965 0
-8160 -975 -1082 -1967 0
-8160 -973 -1091 -1960 0
-8160 -973 -1089 -1961 0
-8160 -973 -1087 -1963 0
-8160 -973 -1085 -1965 0
-8160 -973 -1083 -1967 0
-8160 -973 -1082 -1969 0
-8160 -971 -1093 -1960 0
-8160 -971 -1091 -1961 0
-8160 -971 -1089 -1963 0
-8160 -971 -1087 -1965 0
-8160 -971 -1085 -1967 0
-8160 -971 -1083 -1969 0
-8160 -971 -1082 -1971 0
-8160 -969 -1095 -1960 0
-8160 -969 -1093 -1961 0
-8160 -969 -1091 -1963 0
-8160 -969 -1089 -1965 0
-8160 -969 -1087 -1967 0
-8160 -969 -1085 -1969 0
-8160 -969 -1083 -1971 0
-8160 -969 -1082 -1973 0
-8160 -967 -1960 0
-8160 -967 -1095 -1961 0
-8160 -967 -1093 -1963 0
-8160 -967 -1091 -1965 0
-8160 -967 -1089 -1967 0
-8160 -967 -1087 -1969 0
-8160 -967 -1085 -1971 0
-8160 -967 -1083 -1973 0
-8160 -967 -1082 -1975 0
-8160 -965 -1961 0
-8160 -965 -1095 -1963 0
-8160 -965 -1093 -1965 0
-8160 -965 -1091 -1967 0
-8160 -965 -1089 -1969 0
-8160 -965 -1087 -1971 0
-8160 -965 -1085 -1973 0
-8160 -965 -1083 -1975 0
-8160 -965 -1082 -1977 0
-8160 -963 -1963 0
-8160 -963 -1095 -1965 0
-8160 -963 -1093 -1967 0
-8160 -963 -1091 -1969 0
-8160 -963 -1089 -1971 0
-8160 -963 -1087 -1973 0
-8160 -963 -1085 -1975 0
-8160 -963 -1083 -1977 0
-8160 -963 -1082 -1979 0
-8160 -962 -1965 0
-8160 -962 -1095 -1967 0
-8160 -962 -1093 -1969 0
-8160 -962 -1091 -1971 0
-8160 -962 -1089 -1973 0
-8160 -962 -1087 -1975 0
-8160 -962 -1085 -1977 0
-8160 -962 -1083 -1979 0
-8160 -962 -1082 -1981 0
8160 1981 0
8160 1082 1979 0
8160 1083 1977 0
8160 1085 1975 0
8160 1087 1973 0
8160 1089 1971 0
8160 1091 1969 0
8160 1093 1967 0
8160 1095 1965 0
8160 962 1979 0
8160 962 1082 1977 0
8160 962 1083 1975 0
8160 962 1085 1973 0
8160 962 1087 1971 0
8160 962 1089 1969 0
8160 962 1091 1967 0
8160 962 1093 1965 0
8160 962 1095 1963 0
8160 963 1977 0
8160 963 1082 1975 0
8160 963 1083 1973 0
8160 963 1085 1971 0
8160 963 1087 1969 0
8160 963 1089 1967 0
8160 963 1091 1965 0
8160 963 1093 1963 0
8160 963 1095 1961 0
8160 965 1975 0
8160 965 1082 1973 0
8160 965 1083 1971 0
8160 965 1085 1969 0
8160 965 1087 1967 0
8160 965 1089 1965 0
8160 965 1091 1963 0
8160 965 1093 1961 0
8160 965 1095 1960 0
8160 967 1973 0
8160 967 1082 1971 0
8160 967 1083 1969 0
8160 967 1085 1967 0
8160 967 1087 1965 0
8160 967 1089 1963 0
8160 967 1091 1961 0
8160 967 1093 1960 0
8160 967 1095 0
8160 969 1971 0
8160 969 1082 1969 0
8160 969 1083 1967 0
8160 969 1085 1965 0
8160 969 1087 1963 0
8160 969 1089 1961 0
8160 969 1091 1960 0
8160 969 1093 0
8160 969 1095 0
8160 971 1969 0
8160 971 1082 1967 0
8160 971 1083 1965 0
8160 971 1085 1963 0
8160 971 1087 1961 0
8160 971 1089 1960 0
8160 971 1091 0
8160 971 1093 0
8160 971 1095 0
8160 973 1967 0
8160 973 1082 1965 0
8160 973 1083 1963 0
8160 973 1085 1961 0
8160 973 1087 1960 0
8160 973 1089 0
8160 973 1091 0
8160 973 1093 0
8160 973 1095 0
8160 975 1965 0
8160 975 1082 1963 0
8160 975 1083 1961 0
8160 975 1085 1960 0
8160 975 1087 0
8160 975 1089 0
8160 975 1091 0
8160 975 1093 0
8160 975 1095 0
c (((x_00008_00003 + x_00008_00004 + x_00009_00003)<=16)=tv=SATLiteral(8161))
-8161 1001 1125 0
-8161 1003 1123 0
-8161 1005 1121 0
-8161 977 999 1125 0
-8161 977 1001 1123 0
-8161 977 1003 1121 0
-8161 977 1005 1119 0
-8161 978 997 1125 0
-8161 978 999 1123 0
-8161 978 1001 1121 0
-8161 978 1003 1119 0
-8161 978 1005 1117 0
-8161 980 995 1125 0
-8161 980 997 1123 0
-8161 980 999 1121 0
-8161 980 1001 1119 0
-8161 980 1003 1117 0
-8161 980 1005 1115 0
-8161 982 993 1125 0
-8161 982 995 1123 0
-8161 982 997 1121 0
-8161 982 999 1119 0
-8161 982 1001 1117 0
-8161 982 1003 1115 0
-8161 982 1005 1113 0
-8161 984 992 1125 0
-8161 984 993 1123 0
-8161 984 995 1121 0
-8161 984 997 1119 0
-8161 984 999 1117 0
-8161 984 1001 1115 0
-8161 984 1003 1113 0
-8161 984 1005 1112 0
-8161 986 1125 0
-8161 986 992 1123 0
-8161 986 993 1121 0
-8161 986 995 1119 0
-8161 986 997 1117 0
-8161 986 999 1115 0
-8161 986 1001 1113 0
-8161 986 1003 1112 0
-8161 986 1005 0
-8161 988 1123 0
-8161 988 992 1121 0
-8161 988 993 1119 0
-8161 988 995 1117 0
-8161 988 997 1115 0
-8161 988 999 1113 0
-8161 988 1001 1112 0
-8161 988 1003 0
-8161 988 1005 0
-8161 990 1121 0
-8161 990 992 1119 0
-8161 990 993 1117 0
-8161 990 995 1115 0
-8161 990 997 1113 0
-8161 990 999 1112 0
-8161 990 1001 0
-8161 990 1003 0
-8161 990 1005 0
8161 -1001 -1112 0
8161 -999 -1113 0
8161 -997 -1115 0
8161 -995 -1117 0
8161 -993 -1119 0
8161 -992 -1121 0
8161 -990 -1003 -1112 0
8161 -990 -1001 -1113 0
8161 -990 -999 -1115 0
8161 -990 -997 -1117 0
8161 -990 -995 -1119 0
8161 -990 -993 -1121 0
8161 -990 -992 -1123 0
8161 -988 -1005 -1112 0
8161 -988 -1003 -1113 0
8161 -988 -1001 -1115 0
8161 -988 -999 -1117 0
8161 -988 -997 -1119 0
8161 -988 -995 -1121 0
8161 -988 -993 -1123 0
8161 -988 -992 -1125 0
8161 -986 -1112 0
8161 -986 -1005 -1113 0
8161 -986 -1003 -1115 0
8161 -986 -1001 -1117 0
8161 -986 -999 -1119 0
8161 -986 -997 -1121 0
8161 -986 -995 -1123 0
8161 -986 -993 -1125 0
8161 -986 -992 0
8161 -984 -1113 0
8161 -984 -1005 -1115 0
8161 -984 -1003 -1117 0
8161 -984 -1001 -1119 0
8161 -984 -999 -1121 0
8161 -984 -997 -1123 0
8161 -984 -995 -1125 0
8161 -984 -993 0
8161 -984 -992 0
8161 -982 -1115 0
8161 -982 -1005 -1117 0
8161 -982 -1003 -1119 0
8161 -982 -1001 -1121 0
8161 -982 -999 -1123 0
8161 -982 -997 -1125 0
8161 -982 -995 0
8161 -982 -993 0
8161 -982 -992 0
8161 -980 -1117 0
8161 -980 -1005 -1119 0
8161 -980 -1003 -1121 0
8161 -980 -1001 -1123 0
8161 -980 -999 -1125 0
8161 -980 -997 0
8161 -980 -995 0
8161 -980 -993 0
8161 -980 -992 0
8161 -978 -1119 0
8161 -978 -1005 -1121 0
8161 -978 -1003 -1123 0
8161 -978 -1001 -1125 0
8161 -978 -999 0
8161 -978 -997 0
8161 -978 -995 0
8161 -978 -993 0
8161 -978 -992 0
8161 -977 -1121 0
8161 -977 -1005 -1123 0
8161 -977 -1003 -1125 0
8161 -977 -1001 0
8161 -977 -999 0
8161 -977 -997 0
8161 -977 -995 0
8161 -977 -993 0
8161 -977 -992 0
c ((16<=(x_00008_00003 + x_00008_00004 + x_00009_00003))=tv=SATLiteral(8162))
-8162 -999 -1112 0
-8162 -997 -1113 0
-8162 -995 -1115 0
-8162 -993 -1117 0
-8162 -992 -1119 0
-8162 -990 -1001 -1112 0
-8162 -990 -999 -1113 0
-8162 -990 -997 -1115 0
-8162 -990 -995 -1117 0
-8162 -990 -993 -1119 0
-8162 -990 -992 -1121 0
-8162 -988 -1003 -1112 0
-8162 -988 -1001 -1113 0
-8162 -988 -999 -1115 0
-8162 -988 -997 -1117 0
-8162 -988 -995 -1119 0
-8162 -988 -993 -1121 0
-8162 -988 -992 -1123 0
-8162 -986 -1005 -1112 0
-8162 -986 -1003 -1113 0
-8162 -986 -1001 -1115 0
-8162 -986 -999 -1117 0
-8162 -986 -997 -1119 0
-8162 -986 -995 -1121 0
-8162 -986 -993 -1123 0
-8162 -986 -992 -1125 0
-8162 -984 -1112 0
-8162 -984 -1005 -1113 0
-8162 -984 -1003 -1115 0
-8162 -984 -1001 -1117 0
-8162 -984 -999 -1119 0
-8162 -984 -997 -1121 0
-8162 -984 -995 -1123 0
-8162 -984 -993 -1125 0
-8162 -984 -992 0
-8162 -982 -1113 0
-8162 -982 -1005 -1115 0
-8162 -982 -1003 -1117 0
-8162 -982 -1001 -1119 0
-8162 -982 -999 -1121 0
-8162 -982 -997 -1123 0
-8162 -982 -995 -1125 0
-8162 -982 -993 0
-8162 -982 -992 0
-8162 -980 -1115 0
-8162 -980 -1005 -1117 0
-8162 -980 -1003 -1119 0
-8162 -980 -1001 -1121 0
-8162 -980 -999 -1123 0
-8162 -980 -997 -1125 0
-8162 -980 -995 0
-8162 -980 -993 0
-8162 -980 -992 0
-8162 -978 -1117 0
-8162 -978 -1005 -1119 0
-8162 -978 -1003 -1121 0
-8162 -978 -1001 -1123 0
-8162 -978 -999 -1125 0
-8162 -978 -997 0
-8162 -978 -995 0
-8162 -978 -993 0
-8162 -978 -992 0
-8162 -977 -1119 0
-8162 -977 -1005 -1121 0
-8162 -977 -1003 -1123 0
-8162 -977 -1001 -1125 0
-8162 -977 -999 0
-8162 -977 -997 0
-8162 -977 -995 0
-8162 -977 -993 0
-8162 -977 -992 0
8162 999 1125 0
8162 1001 1123 0
8162 1003 1121 0
8162 1005 1119 0
8162 977 997 1125 0
8162 977 999 1123 0
8162 977 1001 1121 0
8162 977 1003 1119 0
8162 977 1005 1117 0
8162 978 995 1125 0
8162 978 997 1123 0
8162 978 999 1121 0
8162 978 1001 1119 0
8162 978 1003 1117 0
8162 978 1005 1115 0
8162 980 993 1125 0
8162 980 995 1123 0
8162 980 997 1121 0
8162 980 999 1119 0
8162 980 1001 1117 0
8162 980 1003 1115 0
8162 980 1005 1113 0
8162 982 992 1125 0
8162 982 993 1123 0
8162 982 995 1121 0
8162 982 997 1119 0
8162 982 999 1117 0
8162 982 1001 1115 0
8162 982 1003 1113 0
8162 982 1005 1112 0
8162 984 1125 0
8162 984 992 1123 0
8162 984 993 1121 0
8162 984 995 1119 0
8162 984 997 1117 0
8162 984 999 1115 0
8162 984 1001 1113 0
8162 984 1003 1112 0
8162 984 1005 0
8162 986 1123 0
8162 986 992 1121 0
8162 986 993 1119 0
8162 986 995 1117 0
8162 986 997 1115 0
8162 986 999 1113 0
8162 986 1001 1112 0
8162 986 1003 0
8162 986 1005 0
8162 988 1121 0
8162 988 992 1119 0
8162 988 993 1117 0
8162 988 995 1115 0
8162 988 997 1113 0
8162 988 999 1112 0
8162 988 1001 0
8162 988 1003 0
8162 988 1005 0
8162 990 1119 0
8162 990 992 1117 0
8162 990 993 1115 0
8162 990 995 1113 0
8162 990 997 1112 0
8162 990 999 0
8162 990 1001 0
8162 990 1003 0
8162 990 1005 0
c (((x_00008_00005 + x_00008_00006 + x_00008_00007)<=17)=tv=SATLiteral(8163))
-8163 1033 1050 0
-8163 1035 1048 0
-8163 1007 1031 1050 0
-8163 1007 1033 1048 0
-8163 1007 1035 1046 0
-8163 1008 1029 1050 0
-8163 1008 1031 1048 0
-8163 1008 1033 1046 0
-8163 1008 1035 1044 0
-8163 1010 1027 1050 0
-8163 1010 1029 1048 0
-8163 1010 1031 1046 0
-8163 1010 1033 1044 0
-8163 1010 1035 1042 0
-8163 1012 1025 1050 0
-8163 1012 1027 1048 0
-8163 1012 1029 1046 0
-8163 1012 1031 1044 0
-8163 1012 1033 1042 0
-8163 1012 1035 1040 0
-8163 1014 1023 1050 0
-8163 1014 1025 1048 0
-8163 1014 1027 1046 0
-8163 1014 1029 1044 0
-8163 1014 1031 1042 0
-8163 1014 1033 1040 0
-8163 1014 1035 1038 0
-8163 1016 1022 1050 0
-8163 1016 1023 1048 0
-8163 1016 1025 1046 0
-8163 1016 1027 1044 0
-8163 1016 1029 1042 0
-8163 1016 1031 1040 0
-8163 1016 1033 1038 0
-8163 1016 1035 1037 0
-8163 1018 1050 0
-8163 1018 1022 1048 0
-8163 1018 1023 1046 0
-8163 1018 1025 1044 0
-8163 1018 1027 1042 0
-8163 1018 1029 1040 0
-8163 1018 1031 1038 0
-8163 1018 1033 1037 0
-8163 1018 1035 0
-8163 1020 1048 0
-8163 1020 1022 1046 0
-8163 1020 1023 1044 0
-8163 1020 1025 1042 0
-8163 1020 1027 1040 0
-8163 1020 1029 1038 0
-8163 1020 1031 1037 0
-8163 1020 1033 0
-8163 1020 1035 0
8163 -1033 -1037 0
8163 -1031 -1038 0
8163 -1029 -1040 0
8163 -1027 -1042 0
8163 -1025 -1044 0
8163 -1023 -1046 0
8163 -1022 -1048 0
8163 -1020 -1035 -1037 0
8163 -1020 -1033 -1038 0
8163 -1020 -1031 -1040 0
8163 -1020 -1029 -1042 0
8163 -1020 -1027 -1044 0
8163 -1020 -1025 -1046 0
8163 -1020 -1023 -1048 0
8163 -1020 -1022 -1050 0
8163 -1018 -1037 0
8163 -1018 -1035 -1038 0
8163 -1018 -1033 -1040 0
8163 -1018 -1031 -1042 0
8163 -1018 -1029 -1044 0
8163 -1018 -1027 -1046 0
8163 -1018 -1025 -1048 0
8163 -1018 -1023 -1050 0
8163 -1018 -1022 0
8163 -1016 -1038 0
8163 -1016 -1035 -1040 0
8163 -1016 -1033 -1042 0
8163 -1016 -1031 -1044 0
8163 -1016 -1029 -1046 0
8163 -1016 -1027 -1048 0
8163 -1016 -1025 -1050 0
8163 -1016 -1023 0
8163 -1016 -1022 0
8163 -1014 -1040 0
8163 -1014 -1035 -1042 0
8163 -1014 -1033 -1044 0
8163 -1014 -1031 -1046 0
8163 -1014 -1029 -1048 0
8163 -1014 -1027 -1050 0
8163 -1014 -1025 0
8163 -1014 -1023 0
8163 -1014 -1022 0
8163 -1012 -1042 0
8163 -1012 -1035 -1044 0
8163 -1012 -1033 -1046 0
8163 -1012 -1031 -1048 0
8163 -1012 -1029 -1050 0
8163 -1012 -1027 0
8163 -1012 -1025 0
8163 -1012 -1023 0
8163 -1012 -1022 0
8163 -1010 -1044 0
8163 -1010 -1035 -1046 0
8163 -1010 -1033 -1048 0
8163 -1010 -1031 -1050 0
8163 -1010 -1029 0
8163 -1010 -1027 0
8163 -1010 -1025 0
8163 -1010 -1023 0
8163 -1010 -1022 0
8163 -1008 -1046 0
8163 -1008 -1035 -1048 0
8163 -1008 -1033 -1050 0
8163 -1008 -1031 0
8163 -1008 -1029 0
8163 -1008 -1027 0
8163 -1008 -1025 0
8163 -1008 -1023 0
8163 -1008 -1022 0
8163 -1007 -1048 0
8163 -1007 -1035 -1050 0
8163 -1007 -1033 0
8163 -1007 -1031 0
8163 -1007 -1029 0
8163 -1007 -1027 0
8163 -1007 -1025 0
8163 -1007 -1023 0
8163 -1007 -1022 0
c ((17<=(x_00008_00005 + x_00008_00006 + x_00008_00007))=tv=SATLiteral(8164))
-8164 -1031 -1037 0
-8164 -1029 -1038 0
-8164 -1027 -1040 0
-8164 -1025 -1042 0
-8164 -1023 -1044 0
-8164 -1022 -1046 0
-8164 -1020 -1033 -1037 0
-8164 -1020 -1031 -1038 0
-8164 -1020 -1029 -1040 0
-8164 -1020 -1027 -1042 0
-8164 -1020 -1025 -1044 0
-8164 -1020 -1023 -1046 0
-8164 -1020 -1022 -1048 0
-8164 -1018 -1035 -1037 0
-8164 -1018 -1033 -1038 0
-8164 -1018 -1031 -1040 0
-8164 -1018 -1029 -1042 0
-8164 -1018 -1027 -1044 0
-8164 -1018 -1025 -1046 0
-8164 -1018 -1023 -1048 0
-8164 -1018 -1022 -1050 0
-8164 -1016 -1037 0
-8164 -1016 -1035 -1038 0
-8164 -1016 -1033 -1040 0
-8164 -1016 -1031 -1042 0
-8164 -1016 -1029 -1044 0
-8164 -1016 -1027 -1046 0
-8164 -1016 -1025 -1048 0
-8164 -1016 -1023 -1050 0
-8164 -1016 -1022 0
-8164 -1014 -1038 0
-8164 -1014 -1035 -1040 0
-8164 -1014 -1033 -1042 0
-8164 -1014 -1031 -1044 0
-8164 -1014 -1029 -1046 0
-8164 -1014 -1027 -1048 0
-8164 -1014 -1025 -1050 0
-8164 -1014 -1023 0
-8164 -1014 -1022 0
-8164 -1012 -1040 0
-8164 -1012 -1035 -1042 0
-8164 -1012 -1033 -1044 0
-8164 -1012 -1031 -1046 0
-8164 -1012 -1029 -1048 0
-8164 -1012 -1027 -1050 0
-8164 -1012 -1025 0
-8164 -1012 -1023 0
-8164 -1012 -1022 0
-8164 -1010 -1042 0
-8164 -1010 -1035 -1044 0
-8164 -1010 -1033 -1046 0
-8164 -1010 -1031 -1048 0
-8164 -1010 -1029 -1050 0
-8164 -1010 -1027 0
-8164 -1010 -1025 0
-8164 -1010 -1023 0
-8164 -1010 -1022 0
-8164 -1008 -1044 0
-8164 -1008 -1035 -1046 0
-8164 -1008 -1033 -1048 0
-8164 -1008 -1031 -1050 0
-8164 -1008 -1029 0
-8164 -1008 -1027 0
-8164 -1008 -1025 0
-8164 -1008 -1023 0
-8164 -1008 -1022 0
-8164 -1007 -1046 0
-8164 -1007 -1035 -1048 0
-8164 -1007 -1033 -1050 0
-8164 -1007 -1031 0
-8164 -1007 -1029 0
-8164 -1007 -1027 0
-8164 -1007 -1025 0
-8164 -1007 -1023 0
-8164 -1007 -1022 0
8164 1031 1050 0
8164 1033 1048 0
8164 1035 1046 0
8164 1007 1029 1050 0
8164 1007 1031 1048 0
8164 1007 1033 1046 0
8164 1007 1035 1044 0
8164 1008 1027 1050 0
8164 1008 1029 1048 0
8164 1008 1031 1046 0
8164 1008 1033 1044 0
8164 1008 1035 1042 0
8164 1010 1025 1050 0
8164 1010 1027 1048 0
8164 1010 1029 1046 0
8164 1010 1031 1044 0
8164 1010 1033 1042 0
8164 1010 1035 1040 0
8164 1012 1023 1050 0
8164 1012 1025 1048 0
8164 1012 1027 1046 0
8164 1012 1029 1044 0
8164 1012 1031 1042 0
8164 1012 1033 1040 0
8164 1012 1035 1038 0
8164 1014 1022 1050 0
8164 1014 1023 1048 0
8164 1014 1025 1046 0
8164 1014 1027 1044 0
8164 1014 1029 1042 0
8164 1014 1031 1040 0
8164 1014 1033 1038 0
8164 1014 1035 1037 0
8164 1016 1050 0
8164 1016 1022 1048 0
8164 1016 1023 1046 0
8164 1016 1025 1044 0
8164 1016 1027 1042 0
8164 1016 1029 1040 0
8164 1016 1031 1038 0
8164 1016 1033 1037 0
8164 1016 1035 0
8164 1018 1048 0
8164 1018 1022 1046 0
8164 1018 1023 1044 0
8164 1018 1025 1042 0
8164 1018 1027 1040 0
8164 1018 1029 1038 0
8164 1018 1031 1037 0
8164 1018 1033 0
8164 1018 1035 0
8164 1020 1046 0
8164 1020 1022 1044 0
8164 1020 1023 1042 0
8164 1020 1025 1040 0
8164 1020 1027 1038 0
8164 1020 1029 1037 0
8164 1020 1031 0
8164 1020 1033 0
8164 1020 1035 0
c (((x_00008_00008 + x_00009_00008)<=9)=tv=SATLiteral(8165))
-8165 1200 0
-8165 1052 1198 0
-8165 1053 1196 0
-8165 1055 1194 0
-8165 1057 1192 0
-8165 1059 1190 0
-8165 1061 1188 0
-8165 1063 1187 0
-8165 1065 0
8165 -1065 -1187 0
8165 -1063 -1188 0
8165 -1061 -1190 0
8165 -1059 -1192 0
8165 -1057 -1194 0
8165 -1055 -1196 0
8165 -1053 -1198 0
8165 -1052 -1200 0
c ((9<=(x_00008_00008 + x_00009_00008))=tv=SATLiteral(8166))
-8166 -1063 -1187 0
-8166 -1061 -1188 0
-8166 -1059 -1190 0
-8166 -1057 -1192 0
-8166 -1055 -1194 0
-8166 -1053 -1196 0
-8166 -1052 -1198 0
8166 1198 0
8166 1052 1196 0
8166 1053 1194 0
8166 1055 1192 0
8166 1057 1190 0
8166 1059 1188 0
8166 1061 1187 0
8166 1063 0
8166 1065 0
c (((x_00008_00009 + x_00009_00009)<=9)=tv=SATLiteral(8167))
-8167 1215 0
-8167 1067 1213 0
-8167 1068 1211 0
-8167 1070 1209 0
-8167 1072 1207 0
-8167 1074 1205 0
-8167 1076 1203 0
-8167 1078 1202 0
-8167 1080 0
8167 -1080 -1202 0
8167 -1078 -1203 0
8167 -1076 -1205 0
8167 -1074 -1207 0
8167 -1072 -1209 0
8167 -1070 -1211 0
8167 -1068 -1213 0
8167 -1067 -1215 0
c ((9<=(x_00008_00009 + x_00009_00009))=tv=SATLiteral(8168))
-8168 -1078 -1202 0
-8168 -1076 -1203 0
-8168 -1074 -1205 0
-8168 -1072 -1207 0
-8168 -1070 -1209 0
-8168 -1068 -1211 0
-8168 -1067 -1213 0
8168 1213 0
8168 1067 1211 0
8168 1068 1209 0
8168 1070 1207 0
8168 1072 1205 0
8168 1074 1203 0
8168 1076 1202 0
8168 1078 0
8168 1080 0
c (((aux435 + shift(x_00009_00005, -1) + shift(x_00009_00006, -1))<=19)=tv=SATLiteral(8169))
-8169 1162 2020 0
-8169 1164 2018 0
-8169 1166 2016 0
-8169 1168 2014 0
-8169 1170 2012 0
-8169 1142 1160 2020 0
-8169 1142 1162 2018 0
-8169 1142 1164 2016 0
-8169 1142 1166 2014 0
-8169 1142 1168 2012 0
-8169 1142 1170 2010 0
-8169 1143 1158 2020 0
-8169 1143 1160 2018 0
-8169 1143 1162 2016 0
-8169 1143 1164 2014 0
-8169 1143 1166 2012 0
-8169 1143 1168 2010 0
-8169 1143 1170 2008 0
-8169 1145 1157 2020 0
-8169 1145 1158 2018 0
-8169 1145 1160 2016 0
-8169 1145 1162 2014 0
-8169 1145 1164 2012 0
-8169 1145 1166 2010 0
-8169 1145 1168 2008 0
-8169 1145 1170 2006 0
-8169 1147 2020 0
-8169 1147 1157 2018 0
-8169 1147 1158 2016 0
-8169 1147 1160 2014 0
-8169 1147 1162 2012 0
-8169 1147 1164 2010 0
-8169 1147 1166 2008 0
-8169 1147 1168 2006 0
-8169 1147 1170 2004 0
-8169 1149 2018 0
-8169 1149 1157 2016 0
-8169 1149 1158 2014 0
-8169 1149 1160 2012 0
-8169 1149 1162 2010 0
-8169 1149 1164 2008 0
-8169 1149 1166 2006 0
-8169 1149 1168 2004 0
-8169 1149 1170 2002 0
-8169 1151 2016 0
-8169 1151 1157 2014 0
-8169 1151 1158 2012 0
-8169 1151 1160 2010 0
-8169 1151 1162 2008 0
-8169 1151 1164 2006 0
-8169 1151 1166 2004 0
-8169 1151 1168 2002 0
-8169 1151 1170 2000 0
-8169 1153 2014 0
-8169 1153 1157 2012 0
-8169 1153 1158 2010 0
-8169 1153 1160 2008 0
-8169 1153 1162 2006 0
-8169 1153 1164 2004 0
-8169 1153 1166 2002 0
-8169 1153 1168 2000 0
-8169 1153 1170 1998 0
-8169 1155 2012 0
-8169 1155 1157 2010 0
-8169 1155 1158 2008 0
-8169 1155 1160 2006 0
-8169 1155 1162 2004 0
-8169 1155 1164 2002 0
-8169 1155 1166 2000 0
-8169 1155 1168 1998 0
-8169 1155 1170 1996 0
8169 -1996 0
8169 -1170 -1998 0
8169 -1168 -2000 0
8169 -1166 -2002 0
8169 -1164 -2004 0
8169 -1162 -2006 0
8169 -1160 -2008 0
8169 -1158 -2010 0
8169 -1157 -2012 0
8169 -1155 -1998 0
8169 -1155 -1170 -2000 0
8169 -1155 -1168 -2002 0
8169 -1155 -1166 -2004 0
8169 -1155 -1164 -2006 0
8169 -1155 -1162 -2008 0
8169 -1155 -1160 -2010 0
8169 -1155 -1158 -2012 0
8169 -1155 -1157 -2014 0
8169 -1153 -2000 0
8169 -1153 -1170 -2002 0
8169 -1153 -1168 -2004 0
8169 -1153 -1166 -2006 0
8169 -1153 -1164 -2008 0
8169 -1153 -1162 -2010 0
8169 -1153 -1160 -2012 0
8169 -1153 -1158 -2014 0
8169 -1153 -1157 -2016 0
8169 -1151 -2002 0
8169 -1151 -1170 -2004 0
8169 -1151 -1168 -2006 0
8169 -1151 -1166 -2008 0
8169 -1151 -1164 -2010 0
8169 -1151 -1162 -2012 0
8169 -1151 -1160 -2014 0
8169 -1151 -1158 -2016 0
8169 -1151 -1157 -2018 0
8169 -1149 -2004 0
8169 -1149 -1170 -2006 0
8169 -1149 -1168 -2008 0
8169 -1149 -1166 -2010 0
8169 -1149 -1164 -2012 0
8169 -1149 -1162 -2014 0
8169 -1149 -1160 -2016 0
8169 -1149 -1158 -2018 0
8169 -1149 -1157 -2020 0
8169 -1147 -2006 0
8169 -1147 -1170 -2008 0
8169 -1147 -1168 -2010 0
8169 -1147 -1166 -2012 0
8169 -1147 -1164 -2014 0
8169 -1147 -1162 -2016 0
8169 -1147 -1160 -2018 0
8169 -1147 -1158 -2020 0
8169 -1147 -1157 0
8169 -1145 -2008 0
8169 -1145 -1170 -2010 0
8169 -1145 -1168 -2012 0
8169 -1145 -1166 -2014 0
8169 -1145 -1164 -2016 0
8169 -1145 -1162 -2018 0
8169 -1145 -1160 -2020 0
8169 -1145 -1158 0
8169 -1145 -1157 0
8169 -1143 -2010 0
8169 -1143 -1170 -2012 0
8169 -1143 -1168 -2014 0
8169 -1143 -1166 -2016 0
8169 -1143 -1164 -2018 0
8169 -1143 -1162 -2020 0
8169 -1143 -1160 0
8169 -1143 -1158 0
8169 -1143 -1157 0
8169 -1142 -2012 0
8169 -1142 -1170 -2014 0
8169 -1142 -1168 -2016 0
8169 -1142 -1166 -2018 0
8169 -1142 -1164 -2020 0
8169 -1142 -1162 0
8169 -1142 -1160 0
8169 -1142 -1158 0
8169 -1142 -1157 0
c ((19<=(aux435 + shift(x_00009_00005, -1) + shift(x_00009_00006, -1)))=tv=SATLiteral(8170))
-8170 -1994 0
-8170 -1170 -1996 0
-8170 -1168 -1998 0
-8170 -1166 -2000 0
-8170 -1164 -2002 0
-8170 -1162 -2004 0
-8170 -1160 -2006 0
-8170 -1158 -2008 0
-8170 -1157 -2010 0
-8170 -1155 -1996 0
-8170 -1155 -1170 -1998 0
-8170 -1155 -1168 -2000 0
-8170 -1155 -1166 -2002 0
-8170 -1155 -1164 -2004 0
-8170 -1155 -1162 -2006 0
-8170 -1155 -1160 -2008 0
-8170 -1155 -1158 -2010 0
-8170 -1155 -1157 -2012 0
-8170 -1153 -1998 0
-8170 -1153 -1170 -2000 0
-8170 -1153 -1168 -2002 0
-8170 -1153 -1166 -2004 0
-8170 -1153 -1164 -2006 0
-8170 -1153 -1162 -2008 0
-8170 -1153 -1160 -2010 0
-8170 -1153 -1158 -2012 0
-8170 -1153 -1157 -2014 0
-8170 -1151 -2000 0
-8170 -1151 -1170 -2002 0
-8170 -1151 -1168 -2004 0
-8170 -1151 -1166 -2006 0
-8170 -1151 -1164 -2008 0
-8170 -1151 -1162 -2010 0
-8170 -1151 -1160 -2012 0
-8170 -1151 -1158 -2014 0
-8170 -1151 -1157 -2016 0
-8170 -1149 -2002 0
-8170 -1149 -1170 -2004 0
-8170 -1149 -1168 -2006 0
-8170 -1149 -1166 -2008 0
-8170 -1149 -1164 -2010 0
-8170 -1149 -1162 -2012 0
-8170 -1149 -1160 -2014 0
-8170 -1149 -1158 -2016 0
-8170 -1149 -1157 -2018 0
-8170 -1147 -2004 0
-8170 -1147 -1170 -2006 0
-8170 -1147 -1168 -2008 0
-8170 -1147 -1166 -2010 0
-8170 -1147 -1164 -2012 0
-8170 -1147 -1162 -2014 0
-8170 -1147 -1160 -2016 0
-8170 -1147 -1158 -2018 0
-8170 -1147 -1157 -2020 0
-8170 -1145 -2006 0
-8170 -1145 -1170 -2008 0
-8170 -1145 -1168 -2010 0
-8170 -1145 -1166 -2012 0
-8170 -1145 -1164 -2014 0
-8170 -1145 -1162 -2016 0
-8170 -1145 -1160 -2018 0
-8170 -1145 -1158 -2020 0
-8170 -1145 -1157 0
-8170 -1143 -2008 0
-8170 -1143 -1170 -2010 0
-8170 -1143 -1168 -2012 0
-8170 -1143 -1166 -2014 0
-8170 -1143 -1164 -2016 0
-8170 -1143 -1162 -2018 0
-8170 -1143 -1160 -2020 0
-8170 -1143 -1158 0
-8170 -1143 -1157 0
-8170 -1142 -2010 0
-8170 -1142 -1170 -2012 0
-8170 -1142 -1168 -2014 0
-8170 -1142 -1166 -2016 0
-8170 -1142 -1164 -2018 0
-8170 -1142 -1162 -2020 0
-8170 -1142 -1160 0
-8170 -1142 -1158 0
-8170 -1142 -1157 0
8170 1160 2020 0
8170 1162 2018 0
8170 1164 2016 0
8170 1166 2014 0
8170 1168 2012 0
8170 1170 2010 0
8170 1142 1158 2020 0
8170 1142 1160 2018 0
8170 1142 1162 2016 0
8170 1142 1164 2014 0
8170 1142 1166 2012 0
8170 1142 1168 2010 0
8170 1142 1170 2008 0
8170 1143 1157 2020 0
8170 1143 1158 2018 0
8170 1143 1160 2016 0
8170 1143 1162 2014 0
8170 1143 1164 2012 0
8170 1143 1166 2010 0
8170 1143 1168 2008 0
8170 1143 1170 2006 0
8170 1145 2020 0
8170 1145 1157 2018 0
8170 1145 1158 2016 0
8170 1145 1160 2014 0
8170 1145 1162 2012 0
8170 1145 1164 2010 0
8170 1145 1166 2008 0
8170 1145 1168 2006 0
8170 1145 1170 2004 0
8170 1147 2018 0
8170 1147 1157 2016 0
8170 1147 1158 2014 0
8170 1147 1160 2012 0
8170 1147 1162 2010 0
8170 1147 1164 2008 0
8170 1147 1166 2006 0
8170 1147 1168 2004 0
8170 1147 1170 2002 0
8170 1149 2016 0
8170 1149 1157 2014 0
8170 1149 1158 2012 0
8170 1149 1160 2010 0
8170 1149 1162 2008 0
8170 1149 1164 2006 0
8170 1149 1166 2004 0
8170 1149 1168 2002 0
8170 1149 1170 2000 0
8170 1151 2014 0
8170 1151 1157 2012 0
8170 1151 1158 2010 0
8170 1151 1160 2008 0
8170 1151 1162 2006 0
8170 1151 1164 2004 0
8170 1151 1166 2002 0
8170 1151 1168 2000 0
8170 1151 1170 1998 0
8170 1153 2012 0
8170 1153 1157 2010 0
8170 1153 1158 2008 0
8170 1153 1160 2006 0
8170 1153 1162 2004 0
8170 1153 1164 2002 0
8170 1153 1166 2000 0
8170 1153 1168 1998 0
8170 1153 1170 1996 0
8170 1155 2010 0
8170 1155 1157 2008 0
8170 1155 1158 2006 0
8170 1155 1160 2004 0
8170 1155 1162 2002 0
8170 1155 1164 2000 0
8170 1155 1166 1998 0
8170 1155 1168 1996 0
8170 1155 1170 1994 0
c (((aux437 + aux440 + aux441)<=1)=tv=SATLiteral(8171))
-8171 2040 0
-8171 2034 2039 0
-8171 2035 0
-8171 2037 0
-8171 2025 2039 0
-8171 2025 2034 0
-8171 2025 2035 0
-8171 2025 2037 0
-8171 2026 0
-8171 2026 2034 0
-8171 2026 2035 0
-8171 2026 2037 0
8171 -2026 -2034 -2039 0
8171 -2025 -2035 -2039 0
8171 -2025 -2034 -2040 0
c ((1<=(aux437 + aux440 + aux441))=tv=SATLiteral(8172))
-8172 -2025 -2034 -2039 0
8172 2039 0
8172 2034 0
8172 2035 0
8172 2037 0
8172 2025 0
8172 2025 2034 0
8172 2025 2035 0
8172 2025 2037 0
8172 2026 0
8172 2026 2034 0
8172 2026 2035 0
8172 2026 2037 0
c (((aux443 + aux446 + aux447)<=1)=tv=SATLiteral(8173))
-8173 2064 0
-8173 2058 2063 0
-8173 2059 0
-8173 2061 0
-8173 2049 2063 0
-8173 2049 2058 0
-8173 2049 2059 0
-8173 2049 2061 0
-8173 2050 0
-8173 2050 2058 0
-8173 2050 2059 0
-8173 2050 2061 0
8173 -2050 -2058 -2063 0
8173 -2049 -2059 -2063 0
8173 -2049 -2058 -2064 0
c ((1<=(aux443 + aux446 + aux447))=tv=SATLiteral(8174))
-8174 -2049 -2058 -2063 0
8174 2063 0
8174 2058 0
8174 2059 0
8174 2061 0
8174 2049 0
8174 2049 2058 0
8174 2049 2059 0
8174 2049 2061 0
8174 2050 0
8174 2050 2058 0
8174 2050 2059 0
8174 2050 2061 0
c (((aux449 + aux452 + aux453)<=1)=tv=SATLiteral(8175))
-8175 2088 0
-8175 2082 2087 0
-8175 2083 0
-8175 2085 0
-8175 2073 2087 0
-8175 2073 2082 0
-8175 2073 2083 0
-8175 2073 2085 0
-8175 2074 0
-8175 2074 2082 0
-8175 2074 2083 0
-8175 2074 2085 0
8175 -2074 -2082 -2087 0
8175 -2073 -2083 -2087 0
8175 -2073 -2082 -2088 0
c ((1<=(aux449 + aux452 + aux453))=tv=SATLiteral(8176))
-8176 -2073 -2082 -2087 0
8176 2087 0
8176 2082 0
8176 2083 0
8176 2085 0
8176 2073 0
8176 2073 2082 0
8176 2073 2083 0
8176 2073 2085 0
8176 2074 0
8176 2074 2082 0
8176 2074 2083 0
8176 2074 2085 0
c (((aux455 + aux458 + aux459)<=1)=tv=SATLiteral(8177))
-8177 2112 0
-8177 2106 2111 0
-8177 2107 0
-8177 2109 0
-8177 2097 2111 0
-8177 2097 2106 0
-8177 2097 2107 0
-8177 2097 2109 0
-8177 2098 0
-8177 2098 2106 0
-8177 2098 2107 0
-8177 2098 2109 0
8177 -2098 -2106 -2111 0
8177 -2097 -2107 -2111 0
8177 -2097 -2106 -2112 0
c ((1<=(aux455 + aux458 + aux459))=tv=SATLiteral(8178))
-8178 -2097 -2106 -2111 0
8178 2111 0
8178 2106 0
8178 2107 0
8178 2109 0
8178 2097 0
8178 2097 2106 0
8178 2097 2107 0
8178 2097 2109 0
8178 2098 0
8178 2098 2106 0
8178 2098 2107 0
8178 2098 2109 0
c (((aux461 + aux464 + aux465)<=1)=tv=SATLiteral(8179))
-8179 2136 0
-8179 2130 2135 0
-8179 2131 0
-8179 2133 0
-8179 2121 2135 0
-8179 2121 2130 0
-8179 2121 2131 0
-8179 2121 2133 0
-8179 2122 0
-8179 2122 2130 0
-8179 2122 2131 0
-8179 2122 2133 0
8179 -2122 -2130 -2135 0
8179 -2121 -2131 -2135 0
8179 -2121 -2130 -2136 0
c ((1<=(aux461 + aux464 + aux465))=tv=SATLiteral(8180))
-8180 -2121 -2130 -2135 0
8180 2135 0
8180 2130 0
8180 2131 0
8180 2133 0
8180 2121 0
8180 2121 2130 0
8180 2121 2131 0
8180 2121 2133 0
8180 2122 0
8180 2122 2130 0
8180 2122 2131 0
8180 2122 2133 0
c (((aux467 + aux470 + aux471)<=1)=tv=SATLiteral(8181))
-8181 2160 0
-8181 2154 2159 0
-8181 2155 0
-8181 2157 0
-8181 2145 2159 0
-8181 2145 2154 0
-8181 2145 2155 0
-8181 2145 2157 0
-8181 2146 0
-8181 2146 2154 0
-8181 2146 2155 0
-8181 2146 2157 0
8181 -2146 -2154 -2159 0
8181 -2145 -2155 -2159 0
8181 -2145 -2154 -2160 0
c ((1<=(aux467 + aux470 + aux471))=tv=SATLiteral(8182))
-8182 -2145 -2154 -2159 0
8182 2159 0
8182 2154 0
8182 2155 0
8182 2157 0
8182 2145 0
8182 2145 2154 0
8182 2145 2155 0
8182 2145 2157 0
8182 2146 0
8182 2146 2154 0
8182 2146 2155 0
8182 2146 2157 0
c (((aux473 + aux476 + aux477)<=1)=tv=SATLiteral(8183))
-8183 2184 0
-8183 2178 2183 0
-8183 2179 0
-8183 2181 0
-8183 2169 2183 0
-8183 2169 2178 0
-8183 2169 2179 0
-8183 2169 2181 0
-8183 2170 0
-8183 2170 2178 0
-8183 2170 2179 0
-8183 2170 2181 0
8183 -2170 -2178 -2183 0
8183 -2169 -2179 -2183 0
8183 -2169 -2178 -2184 0
c ((1<=(aux473 + aux476 + aux477))=tv=SATLiteral(8184))
-8184 -2169 -2178 -2183 0
8184 2183 0
8184 2178 0
8184 2179 0
8184 2181 0
8184 2169 0
8184 2169 2178 0
8184 2169 2179 0
8184 2169 2181 0
8184 2170 0
8184 2170 2178 0
8184 2170 2179 0
8184 2170 2181 0
c (((aux479 + aux482 + aux483)<=1)=tv=SATLiteral(8185))
-8185 2208 0
-8185 2202 2207 0
-8185 2203 0
-8185 2205 0
-8185 2193 2207 0
-8185 2193 2202 0
-8185 2193 2203 0
-8185 2193 2205 0
-8185 2194 0
-8185 2194 2202 0
-8185 2194 2203 0
-8185 2194 2205 0
8185 -2194 -2202 -2207 0
8185 -2193 -2203 -2207 0
8185 -2193 -2202 -2208 0
c ((1<=(aux479 + aux482 + aux483))=tv=SATLiteral(8186))
-8186 -2193 -2202 -2207 0
8186 2207 0
8186 2202 0
8186 2203 0
8186 2205 0
8186 2193 0
8186 2193 2202 0
8186 2193 2203 0
8186 2193 2205 0
8186 2194 0
8186 2194 2202 0
8186 2194 2203 0
8186 2194 2205 0
c (((aux485 + aux488 + aux489)<=1)=tv=SATLiteral(8187))
-8187 2232 0
-8187 2226 2231 0
-8187 2227 0
-8187 2229 0
-8187 2217 2231 0
-8187 2217 2226 0
-8187 2217 2227 0
-8187 2217 2229 0
-8187 2218 0
-8187 2218 2226 0
-8187 2218 2227 0
-8187 2218 2229 0
8187 -2218 -2226 -2231 0
8187 -2217 -2227 -2231 0
8187 -2217 -2226 -2232 0
c ((1<=(aux485 + aux488 + aux489))=tv=SATLiteral(8188))
-8188 -2217 -2226 -2231 0
8188 2231 0
8188 2226 0
8188 2227 0
8188 2229 0
8188 2217 0
8188 2217 2226 0
8188 2217 2227 0
8188 2217 2229 0
8188 2218 0
8188 2218 2226 0
8188 2218 2227 0
8188 2218 2229 0
c (((aux491 + aux494 + aux495)<=1)=tv=SATLiteral(8189))
-8189 2256 0
-8189 2250 2255 0
-8189 2251 0
-8189 2253 0
-8189 2241 2255 0
-8189 2241 2250 0
-8189 2241 2251 0
-8189 2241 2253 0
-8189 2242 0
-8189 2242 2250 0
-8189 2242 2251 0
-8189 2242 2253 0
8189 -2242 -2250 -2255 0
8189 -2241 -2251 -2255 0
8189 -2241 -2250 -2256 0
c ((1<=(aux491 + aux494 + aux495))=tv=SATLiteral(8190))
-8190 -2241 -2250 -2255 0
8190 2255 0
8190 2250 0
8190 2251 0
8190 2253 0
8190 2241 0
8190 2241 2250 0
8190 2241 2251 0
8190 2241 2253 0
8190 2242 0
8190 2242 2250 0
8190 2242 2251 0
8190 2242 2253 0
c (((aux497 + aux500 + aux501)<=1)=tv=SATLiteral(8191))
-8191 2280 0
-8191 2274 2279 0
-8191 2275 0
-8191 2277 0
-8191 2265 2279 0
-8191 2265 2274 0
-8191 2265 2275 0
-8191 2265 2277 0
-8191 2266 0
-8191 2266 2274 0
-8191 2266 2275 0
-8191 2266 2277 0
8191 -2266 -2274 -2279 0
8191 -2265 -2275 -2279 0
8191 -2265 -2274 -2280 0
c ((1<=(aux497 + aux500 + aux501))=tv=SATLiteral(8192))
-8192 -2265 -2274 -2279 0
8192 2279 0
8192 2274 0
8192 2275 0
8192 2277 0
8192 2265 0
8192 2265 2274 0
8192 2265 2275 0
8192 2265 2277 0
8192 2266 0
8192 2266 2274 0
8192 2266 2275 0
8192 2266 2277 0
c (((aux503 + aux506 + aux507)<=1)=tv=SATLiteral(8193))
-8193 2304 0
-8193 2298 2303 0
-8193 2299 0
-8193 2301 0
-8193 2289 2303 0
-8193 2289 2298 0
-8193 2289 2299 0
-8193 2289 2301 0
-8193 2290 0
-8193 2290 2298 0
-8193 2290 2299 0
-8193 2290 2301 0
8193 -2290 -2298 -2303 0
8193 -2289 -2299 -2303 0
8193 -2289 -2298 -2304 0
c ((1<=(aux503 + aux506 + aux507))=tv=SATLiteral(8194))
-8194 -2289 -2298 -2303 0
8194 2303 0
8194 2298 0
8194 2299 0
8194 2301 0
8194 2289 0
8194 2289 2298 0
8194 2289 2299 0
8194 2289 2301 0
8194 2290 0
8194 2290 2298 0
8194 2290 2299 0
8194 2290 2301 0
c (((aux509 + aux512 + aux513)<=1)=tv=SATLiteral(8195))
-8195 2328 0
-8195 2322 2327 0
-8195 2323 0
-8195 2325 0
-8195 2313 2327 0
-8195 2313 2322 0
-8195 2313 2323 0
-8195 2313 2325 0
-8195 2314 0
-8195 2314 2322 0
-8195 2314 2323 0
-8195 2314 2325 0
8195 -2314 -2322 -2327 0
8195 -2313 -2323 -2327 0
8195 -2313 -2322 -2328 0
c ((1<=(aux509 + aux512 + aux513))=tv=SATLiteral(8196))
-8196 -2313 -2322 -2327 0
8196 2327 0
8196 2322 0
8196 2323 0
8196 2325 0
8196 2313 0
8196 2313 2322 0
8196 2313 2323 0
8196 2313 2325 0
8196 2314 0
8196 2314 2322 0
8196 2314 2323 0
8196 2314 2325 0
c (((aux515 + aux518 + aux519)<=1)=tv=SATLiteral(8197))
-8197 2352 0
-8197 2346 2351 0
-8197 2347 0
-8197 2349 0
-8197 2337 2351 0
-8197 2337 2346 0
-8197 2337 2347 0
-8197 2337 2349 0
-8197 2338 0
-8197 2338 2346 0
-8197 2338 2347 0
-8197 2338 2349 0
8197 -2338 -2346 -2351 0
8197 -2337 -2347 -2351 0
8197 -2337 -2346 -2352 0
c ((1<=(aux515 + aux518 + aux519))=tv=SATLiteral(8198))
-8198 -2337 -2346 -2351 0
8198 2351 0
8198 2346 0
8198 2347 0
8198 2349 0
8198 2337 0
8198 2337 2346 0
8198 2337 2347 0
8198 2337 2349 0
8198 2338 0
8198 2338 2346 0
8198 2338 2347 0
8198 2338 2349 0
c (((aux521 + aux524 + aux525)<=1)=tv=SATLiteral(8199))
-8199 2376 0
-8199 2370 2375 0
-8199 2371 0
-8199 2373 0
-8199 2361 2375 0
-8199 2361 2370 0
-8199 2361 2371 0
-8199 2361 2373 0
-8199 2362 0
-8199 2362 2370 0
-8199 2362 2371 0
-8199 2362 2373 0
8199 -2362 -2370 -2375 0
8199 -2361 -2371 -2375 0
8199 -2361 -2370 -2376 0
c ((1<=(aux521 + aux524 + aux525))=tv=SATLiteral(8200))
-8200 -2361 -2370 -2375 0
8200 2375 0
8200 2370 0
8200 2371 0
8200 2373 0
8200 2361 0
8200 2361 2370 0
8200 2361 2371 0
8200 2361 2373 0
8200 2362 0
8200 2362 2370 0
8200 2362 2371 0
8200 2362 2373 0
c (((aux527 + aux530 + aux531)<=1)=tv=SATLiteral(8201))
-8201 2400 0
-8201 2394 2399 0
-8201 2395 0
-8201 2397 0
-8201 2385 2399 0
-8201 2385 2394 0
-8201 2385 2395 0
-8201 2385 2397 0
-8201 2386 0
-8201 2386 2394 0
-8201 2386 2395 0
-8201 2386 2397 0
8201 -2386 -2394 -2399 0
8201 -2385 -2395 -2399 0
8201 -2385 -2394 -2400 0
c ((1<=(aux527 + aux530 + aux531))=tv=SATLiteral(8202))
-8202 -2385 -2394 -2399 0
8202 2399 0
8202 2394 0
8202 2395 0
8202 2397 0
8202 2385 0
8202 2385 2394 0
8202 2385 2395 0
8202 2385 2397 0
8202 2386 0
8202 2386 2394 0
8202 2386 2395 0
8202 2386 2397 0
c (((aux533 + aux536 + aux537)<=1)=tv=SATLiteral(8203))
-8203 2424 0
-8203 2418 2423 0
-8203 2419 0
-8203 2421 0
-8203 2409 2423 0
-8203 2409 2418 0
-8203 2409 2419 0
-8203 2409 2421 0
-8203 2410 0
-8203 2410 2418 0
-8203 2410 2419 0
-8203 2410 2421 0
8203 -2410 -2418 -2423 0
8203 -2409 -2419 -2423 0
8203 -2409 -2418 -2424 0
c ((1<=(aux533 + aux536 + aux537))=tv=SATLiteral(8204))
-8204 -2409 -2418 -2423 0
8204 2423 0
8204 2418 0
8204 2419 0
8204 2421 0
8204 2409 0
8204 2409 2418 0
8204 2409 2419 0
8204 2409 2421 0
8204 2410 0
8204 2410 2418 0
8204 2410 2419 0
8204 2410 2421 0
c (((aux539 + aux542 + aux543)<=1)=tv=SATLiteral(8205))
-8205 2448 0
-8205 2442 2447 0
-8205 2443 0
-8205 2445 0
-8205 2433 2447 0
-8205 2433 2442 0
-8205 2433 2443 0
-8205 2433 2445 0
-8205 2434 0
-8205 2434 2442 0
-8205 2434 2443 0
-8205 2434 2445 0
8205 -2434 -2442 -2447 0
8205 -2433 -2443 -2447 0
8205 -2433 -2442 -2448 0
c ((1<=(aux539 + aux542 + aux543))=tv=SATLiteral(8206))
-8206 -2433 -2442 -2447 0
8206 2447 0
8206 2442 0
8206 2443 0
8206 2445 0
8206 2433 0
8206 2433 2442 0
8206 2433 2443 0
8206 2433 2445 0
8206 2434 0
8206 2434 2442 0
8206 2434 2443 0
8206 2434 2445 0
c (((aux545 + aux548 + aux549)<=1)=tv=SATLiteral(8207))
-8207 2472 0
-8207 2466 2471 0
-8207 2467 0
-8207 2469 0
-8207 2457 2471 0
-8207 2457 2466 0
-8207 2457 2467 0
-8207 2457 2469 0
-8207 2458 0
-8207 2458 2466 0
-8207 2458 2467 0
-8207 2458 2469 0
8207 -2458 -2466 -2471 0
8207 -2457 -2467 -2471 0
8207 -2457 -2466 -2472 0
c ((1<=(aux545 + aux548 + aux549))=tv=SATLiteral(8208))
-8208 -2457 -2466 -2471 0
8208 2471 0
8208 2466 0
8208 2467 0
8208 2469 0
8208 2457 0
8208 2457 2466 0
8208 2457 2467 0
8208 2457 2469 0
8208 2458 0
8208 2458 2466 0
8208 2458 2467 0
8208 2458 2469 0
c (((aux551 + aux554 + aux555)<=1)=tv=SATLiteral(8209))
-8209 2496 0
-8209 2490 2495 0
-8209 2491 0
-8209 2493 0
-8209 2481 2495 0
-8209 2481 2490 0
-8209 2481 2491 0
-8209 2481 2493 0
-8209 2482 0
-8209 2482 2490 0
-8209 2482 2491 0
-8209 2482 2493 0
8209 -2482 -2490 -2495 0
8209 -2481 -2491 -2495 0
8209 -2481 -2490 -2496 0
c ((1<=(aux551 + aux554 + aux555))=tv=SATLiteral(8210))
-8210 -2481 -2490 -2495 0
8210 2495 0
8210 2490 0
8210 2491 0
8210 2493 0
8210 2481 0
8210 2481 2490 0
8210 2481 2491 0
8210 2481 2493 0
8210 2482 0
8210 2482 2490 0
8210 2482 2491 0
8210 2482 2493 0
c (((aux557 + aux560 + aux561)<=1)=tv=SATLiteral(8211))
-8211 2520 0
-8211 2514 2519 0
-8211 2515 0
-8211 2517 0
-8211 2505 2519 0
-8211 2505 2514 0
-8211 2505 2515 0
-8211 2505 2517 0
-8211 2506 0
-8211 2506 2514 0
-8211 2506 2515 0
-8211 2506 2517 0
8211 -2506 -2514 -2519 0
8211 -2505 -2515 -2519 0
8211 -2505 -2514 -2520 0
c ((1<=(aux557 + aux560 + aux561))=tv=SATLiteral(8212))
-8212 -2505 -2514 -2519 0
8212 2519 0
8212 2514 0
8212 2515 0
8212 2517 0
8212 2505 0
8212 2505 2514 0
8212 2505 2515 0
8212 2505 2517 0
8212 2506 0
8212 2506 2514 0
8212 2506 2515 0
8212 2506 2517 0
c (((aux563 + aux566 + aux567)<=1)=tv=SATLiteral(8213))
-8213 2544 0
-8213 2538 2543 0
-8213 2539 0
-8213 2541 0
-8213 2529 2543 0
-8213 2529 2538 0
-8213 2529 2539 0
-8213 2529 2541 0
-8213 2530 0
-8213 2530 2538 0
-8213 2530 2539 0
-8213 2530 2541 0
8213 -2530 -2538 -2543 0
8213 -2529 -2539 -2543 0
8213 -2529 -2538 -2544 0
c ((1<=(aux563 + aux566 + aux567))=tv=SATLiteral(8214))
-8214 -2529 -2538 -2543 0
8214 2543 0
8214 2538 0
8214 2539 0
8214 2541 0
8214 2529 0
8214 2529 2538 0
8214 2529 2539 0
8214 2529 2541 0
8214 2530 0
8214 2530 2538 0
8214 2530 2539 0
8214 2530 2541 0
c (((aux569 + aux572 + aux573)<=1)=tv=SATLiteral(8215))
-8215 2568 0
-8215 2562 2567 0
-8215 2563 0
-8215 2565 0
-8215 2553 2567 0
-8215 2553 2562 0
-8215 2553 2563 0
-8215 2553 2565 0
-8215 2554 0
-8215 2554 2562 0
-8215 2554 2563 0
-8215 2554 2565 0
8215 -2554 -2562 -2567 0
8215 -2553 -2563 -2567 0
8215 -2553 -2562 -2568 0
c ((1<=(aux569 + aux572 + aux573))=tv=SATLiteral(8216))
-8216 -2553 -2562 -2567 0
8216 2567 0
8216 2562 0
8216 2563 0
8216 2565 0
8216 2553 0
8216 2553 2562 0
8216 2553 2563 0
8216 2553 2565 0
8216 2554 0
8216 2554 2562 0
8216 2554 2563 0
8216 2554 2565 0
c (((aux575 + aux578 + aux579)<=1)=tv=SATLiteral(8217))
-8217 2592 0
-8217 2586 2591 0
-8217 2587 0
-8217 2589 0
-8217 2577 2591 0
-8217 2577 2586 0
-8217 2577 2587 0
-8217 2577 2589 0
-8217 2578 0
-8217 2578 2586 0
-8217 2578 2587 0
-8217 2578 2589 0
8217 -2578 -2586 -2591 0
8217 -2577 -2587 -2591 0
8217 -2577 -2586 -2592 0
c ((1<=(aux575 + aux578 + aux579))=tv=SATLiteral(8218))
-8218 -2577 -2586 -2591 0
8218 2591 0
8218 2586 0
8218 2587 0
8218 2589 0
8218 2577 0
8218 2577 2586 0
8218 2577 2587 0
8218 2577 2589 0
8218 2578 0
8218 2578 2586 0
8218 2578 2587 0
8218 2578 2589 0
c (((aux581 + aux584 + aux585)<=1)=tv=SATLiteral(8219))
-8219 2616 0
-8219 2610 2615 0
-8219 2611 0
-8219 2613 0
-8219 2601 2615 0
-8219 2601 2610 0
-8219 2601 2611 0
-8219 2601 2613 0
-8219 2602 0
-8219 2602 2610 0
-8219 2602 2611 0
-8219 2602 2613 0
8219 -2602 -2610 -2615 0
8219 -2601 -2611 -2615 0
8219 -2601 -2610 -2616 0
c ((1<=(aux581 + aux584 + aux585))=tv=SATLiteral(8220))
-8220 -2601 -2610 -2615 0
8220 2615 0
8220 2610 0
8220 2611 0
8220 2613 0
8220 2601 0
8220 2601 2610 0
8220 2601 2611 0
8220 2601 2613 0
8220 2602 0
8220 2602 2610 0
8220 2602 2611 0
8220 2602 2613 0
c (((aux587 + aux590 + aux591)<=1)=tv=SATLiteral(8221))
-8221 2640 0
-8221 2634 2639 0
-8221 2635 0
-8221 2637 0
-8221 2625 2639 0
-8221 2625 2634 0
-8221 2625 2635 0
-8221 2625 2637 0
-8221 2626 0
-8221 2626 2634 0
-8221 2626 2635 0
-8221 2626 2637 0
8221 -2626 -2634 -2639 0
8221 -2625 -2635 -2639 0
8221 -2625 -2634 -2640 0
c ((1<=(aux587 + aux590 + aux591))=tv=SATLiteral(8222))
-8222 -2625 -2634 -2639 0
8222 2639 0
8222 2634 0
8222 2635 0
8222 2637 0
8222 2625 0
8222 2625 2634 0
8222 2625 2635 0
8222 2625 2637 0
8222 2626 0
8222 2626 2634 0
8222 2626 2635 0
8222 2626 2637 0
c (((aux593 + aux596 + aux597)<=1)=tv=SATLiteral(8223))
-8223 2664 0
-8223 2658 2663 0
-8223 2659 0
-8223 2661 0
-8223 2649 2663 0
-8223 2649 2658 0
-8223 2649 2659 0
-8223 2649 2661 0
-8223 2650 0
-8223 2650 2658 0
-8223 2650 2659 0
-8223 2650 2661 0
8223 -2650 -2658 -2663 0
8223 -2649 -2659 -2663 0
8223 -2649 -2658 -2664 0
c ((1<=(aux593 + aux596 + aux597))=tv=SATLiteral(8224))
-8224 -2649 -2658 -2663 0
8224 2663 0
8224 2658 0
8224 2659 0
8224 2661 0
8224 2649 0
8224 2649 2658 0
8224 2649 2659 0
8224 2649 2661 0
8224 2650 0
8224 2650 2658 0
8224 2650 2659 0
8224 2650 2661 0
c (((aux599 + aux602 + aux603)<=1)=tv=SATLiteral(8225))
-8225 2688 0
-8225 2682 2687 0
-8225 2683 0
-8225 2685 0
-8225 2673 2687 0
-8225 2673 2682 0
-8225 2673 2683 0
-8225 2673 2685 0
-8225 2674 0
-8225 2674 2682 0
-8225 2674 2683 0
-8225 2674 2685 0
8225 -2674 -2682 -2687 0
8225 -2673 -2683 -2687 0
8225 -2673 -2682 -2688 0
c ((1<=(aux599 + aux602 + aux603))=tv=SATLiteral(8226))
-8226 -2673 -2682 -2687 0
8226 2687 0
8226 2682 0
8226 2683 0
8226 2685 0
8226 2673 0
8226 2673 2682 0
8226 2673 2683 0
8226 2673 2685 0
8226 2674 0
8226 2674 2682 0
8226 2674 2683 0
8226 2674 2685 0
c (((aux605 + aux608 + aux609)<=1)=tv=SATLiteral(8227))
-8227 2712 0
-8227 2706 2711 0
-8227 2707 0
-8227 2709 0
-8227 2697 2711 0
-8227 2697 2706 0
-8227 2697 2707 0
-8227 2697 2709 0
-8227 2698 0
-8227 2698 2706 0
-8227 2698 2707 0
-8227 2698 2709 0
8227 -2698 -2706 -2711 0
8227 -2697 -2707 -2711 0
8227 -2697 -2706 -2712 0
c ((1<=(aux605 + aux608 + aux609))=tv=SATLiteral(8228))
-8228 -2697 -2706 -2711 0
8228 2711 0
8228 2706 0
8228 2707 0
8228 2709 0
8228 2697 0
8228 2697 2706 0
8228 2697 2707 0
8228 2697 2709 0
8228 2698 0
8228 2698 2706 0
8228 2698 2707 0
8228 2698 2709 0
c (((aux611 + aux614 + aux615)<=1)=tv=SATLiteral(8229))
-8229 2736 0
-8229 2730 2735 0
-8229 2731 0
-8229 2733 0
-8229 2721 2735 0
-8229 2721 2730 0
-8229 2721 2731 0
-8229 2721 2733 0
-8229 2722 0
-8229 2722 2730 0
-8229 2722 2731 0
-8229 2722 2733 0
8229 -2722 -2730 -2735 0
8229 -2721 -2731 -2735 0
8229 -2721 -2730 -2736 0
c ((1<=(aux611 + aux614 + aux615))=tv=SATLiteral(8230))
-8230 -2721 -2730 -2735 0
8230 2735 0
8230 2730 0
8230 2731 0
8230 2733 0
8230 2721 0
8230 2721 2730 0
8230 2721 2731 0
8230 2721 2733 0
8230 2722 0
8230 2722 2730 0
8230 2722 2731 0
8230 2722 2733 0
c (((aux617 + aux620 + aux621)<=1)=tv=SATLiteral(8231))
-8231 2760 0
-8231 2754 2759 0
-8231 2755 0
-8231 2757 0
-8231 2745 2759 0
-8231 2745 2754 0
-8231 2745 2755 0
-8231 2745 2757 0
-8231 2746 0
-8231 2746 2754 0
-8231 2746 2755 0
-8231 2746 2757 0
8231 -2746 -2754 -2759 0
8231 -2745 -2755 -2759 0
8231 -2745 -2754 -2760 0
c ((1<=(aux617 + aux620 + aux621))=tv=SATLiteral(8232))
-8232 -2745 -2754 -2759 0
8232 2759 0
8232 2754 0
8232 2755 0
8232 2757 0
8232 2745 0
8232 2745 2754 0
8232 2745 2755 0
8232 2745 2757 0
8232 2746 0
8232 2746 2754 0
8232 2746 2755 0
8232 2746 2757 0
c (((aux623 + aux626 + aux627)<=1)=tv=SATLiteral(8233))
-8233 2784 0
-8233 2778 2783 0
-8233 2779 0
-8233 2781 0
-8233 2769 2783 0
-8233 2769 2778 0
-8233 2769 2779 0
-8233 2769 2781 0
-8233 2770 0
-8233 2770 2778 0
-8233 2770 2779 0
-8233 2770 2781 0
8233 -2770 -2778 -2783 0
8233 -2769 -2779 -2783 0
8233 -2769 -2778 -2784 0
c ((1<=(aux623 + aux626 + aux627))=tv=SATLiteral(8234))
-8234 -2769 -2778 -2783 0
8234 2783 0
8234 2778 0
8234 2779 0
8234 2781 0
8234 2769 0
8234 2769 2778 0
8234 2769 2779 0
8234 2769 2781 0
8234 2770 0
8234 2770 2778 0
8234 2770 2779 0
8234 2770 2781 0
c (((aux629 + aux632 + aux633)<=1)=tv=SATLiteral(8235))
-8235 2808 0
-8235 2802 2807 0
-8235 2803 0
-8235 2805 0
-8235 2793 2807 0
-8235 2793 2802 0
-8235 2793 2803 0
-8235 2793 2805 0
-8235 2794 0
-8235 2794 2802 0
-8235 2794 2803 0
-8235 2794 2805 0
8235 -2794 -2802 -2807 0
8235 -2793 -2803 -2807 0
8235 -2793 -2802 -2808 0
c ((1<=(aux629 + aux632 + aux633))=tv=SATLiteral(8236))
-8236 -2793 -2802 -2807 0
8236 2807 0
8236 2802 0
8236 2803 0
8236 2805 0
8236 2793 0
8236 2793 2802 0
8236 2793 2803 0
8236 2793 2805 0
8236 2794 0
8236 2794 2802 0
8236 2794 2803 0
8236 2794 2805 0
c (((aux635 + aux638 + aux639)<=1)=tv=SATLiteral(8237))
-8237 2832 0
-8237 2826 2831 0
-8237 2827 0
-8237 2829 0
-8237 2817 2831 0
-8237 2817 2826 0
-8237 2817 2827 0
-8237 2817 2829 0
-8237 2818 0
-8237 2818 2826 0
-8237 2818 2827 0
-8237 2818 2829 0
8237 -2818 -2826 -2831 0
8237 -2817 -2827 -2831 0
8237 -2817 -2826 -2832 0
c ((1<=(aux635 + aux638 + aux639))=tv=SATLiteral(8238))
-8238 -2817 -2826 -2831 0
8238 2831 0
8238 2826 0
8238 2827 0
8238 2829 0
8238 2817 0
8238 2817 2826 0
8238 2817 2827 0
8238 2817 2829 0
8238 2818 0
8238 2818 2826 0
8238 2818 2827 0
8238 2818 2829 0
c (((aux641 + aux644 + aux645)<=1)=tv=SATLiteral(8239))
-8239 2856 0
-8239 2850 2855 0
-8239 2851 0
-8239 2853 0
-8239 2841 2855 0
-8239 2841 2850 0
-8239 2841 2851 0
-8239 2841 2853 0
-8239 2842 0
-8239 2842 2850 0
-8239 2842 2851 0
-8239 2842 2853 0
8239 -2842 -2850 -2855 0
8239 -2841 -2851 -2855 0
8239 -2841 -2850 -2856 0
c ((1<=(aux641 + aux644 + aux645))=tv=SATLiteral(8240))
-8240 -2841 -2850 -2855 0
8240 2855 0
8240 2850 0
8240 2851 0
8240 2853 0
8240 2841 0
8240 2841 2850 0
8240 2841 2851 0
8240 2841 2853 0
8240 2842 0
8240 2842 2850 0
8240 2842 2851 0
8240 2842 2853 0
c (((aux647 + aux650 + aux651)<=1)=tv=SATLiteral(8241))
-8241 2880 0
-8241 2874 2879 0
-8241 2875 0
-8241 2877 0
-8241 2865 2879 0
-8241 2865 2874 0
-8241 2865 2875 0
-8241 2865 2877 0
-8241 2866 0
-8241 2866 2874 0
-8241 2866 2875 0
-8241 2866 2877 0
8241 -2866 -2874 -2879 0
8241 -2865 -2875 -2879 0
8241 -2865 -2874 -2880 0
c ((1<=(aux647 + aux650 + aux651))=tv=SATLiteral(8242))
-8242 -2865 -2874 -2879 0
8242 2879 0
8242 2874 0
8242 2875 0
8242 2877 0
8242 2865 0
8242 2865 2874 0
8242 2865 2875 0
8242 2865 2877 0
8242 2866 0
8242 2866 2874 0
8242 2866 2875 0
8242 2866 2877 0
c (((aux653 + aux656 + aux657)<=1)=tv=SATLiteral(8243))
-8243 2904 0
-8243 2898 2903 0
-8243 2899 0
-8243 2901 0
-8243 2889 2903 0
-8243 2889 2898 0
-8243 2889 2899 0
-8243 2889 2901 0
-8243 2890 0
-8243 2890 2898 0
-8243 2890 2899 0
-8243 2890 2901 0
8243 -2890 -2898 -2903 0
8243 -2889 -2899 -2903 0
8243 -2889 -2898 -2904 0
c ((1<=(aux653 + aux656 + aux657))=tv=SATLiteral(8244))
-8244 -2889 -2898 -2903 0
8244 2903 0
8244 2898 0
8244 2899 0
8244 2901 0
8244 2889 0
8244 2889 2898 0
8244 2889 2899 0
8244 2889 2901 0
8244 2890 0
8244 2890 2898 0
8244 2890 2899 0
8244 2890 2901 0
c (((aux659 + aux662 + aux663)<=1)=tv=SATLiteral(8245))
-8245 2928 0
-8245 2922 2927 0
-8245 2923 0
-8245 2925 0
-8245 2913 2927 0
-8245 2913 2922 0
-8245 2913 2923 0
-8245 2913 2925 0
-8245 2914 0
-8245 2914 2922 0
-8245 2914 2923 0
-8245 2914 2925 0
8245 -2914 -2922 -2927 0
8245 -2913 -2923 -2927 0
8245 -2913 -2922 -2928 0
c ((1<=(aux659 + aux662 + aux663))=tv=SATLiteral(8246))
-8246 -2913 -2922 -2927 0
8246 2927 0
8246 2922 0
8246 2923 0
8246 2925 0
8246 2913 0
8246 2913 2922 0
8246 2913 2923 0
8246 2913 2925 0
8246 2914 0
8246 2914 2922 0
8246 2914 2923 0
8246 2914 2925 0
c (((aux665 + aux668 + aux669)<=1)=tv=SATLiteral(8247))
-8247 2952 0
-8247 2946 2951 0
-8247 2947 0
-8247 2949 0
-8247 2937 2951 0
-8247 2937 2946 0
-8247 2937 2947 0
-8247 2937 2949 0
-8247 2938 0
-8247 2938 2946 0
-8247 2938 2947 0
-8247 2938 2949 0
8247 -2938 -2946 -2951 0
8247 -2937 -2947 -2951 0
8247 -2937 -2946 -2952 0
c ((1<=(aux665 + aux668 + aux669))=tv=SATLiteral(8248))
-8248 -2937 -2946 -2951 0
8248 2951 0
8248 2946 0
8248 2947 0
8248 2949 0
8248 2937 0
8248 2937 2946 0
8248 2937 2947 0
8248 2937 2949 0
8248 2938 0
8248 2938 2946 0
8248 2938 2947 0
8248 2938 2949 0
c (((aux671 + aux674 + aux675)<=1)=tv=SATLiteral(8249))
-8249 2976 0
-8249 2970 2975 0
-8249 2971 0
-8249 2973 0
-8249 2961 2975 0
-8249 2961 2970 0
-8249 2961 2971 0
-8249 2961 2973 0
-8249 2962 0
-8249 2962 2970 0
-8249 2962 2971 0
-8249 2962 2973 0
8249 -2962 -2970 -2975 0
8249 -2961 -2971 -2975 0
8249 -2961 -2970 -2976 0
c ((1<=(aux671 + aux674 + aux675))=tv=SATLiteral(8250))
-8250 -2961 -2970 -2975 0
8250 2975 0
8250 2970 0
8250 2971 0
8250 2973 0
8250 2961 0
8250 2961 2970 0
8250 2961 2971 0
8250 2961 2973 0
8250 2962 0
8250 2962 2970 0
8250 2962 2971 0
8250 2962 2973 0
c (((aux677 + aux680 + aux681)<=1)=tv=SATLiteral(8251))
-8251 3000 0
-8251 2994 2999 0
-8251 2995 0
-8251 2997 0
-8251 2985 2999 0
-8251 2985 2994 0
-8251 2985 2995 0
-8251 2985 2997 0
-8251 2986 0
-8251 2986 2994 0
-8251 2986 2995 0
-8251 2986 2997 0
8251 -2986 -2994 -2999 0
8251 -2985 -2995 -2999 0
8251 -2985 -2994 -3000 0
c ((1<=(aux677 + aux680 + aux681))=tv=SATLiteral(8252))
-8252 -2985 -2994 -2999 0
8252 2999 0
8252 2994 0
8252 2995 0
8252 2997 0
8252 2985 0
8252 2985 2994 0
8252 2985 2995 0
8252 2985 2997 0
8252 2986 0
8252 2986 2994 0
8252 2986 2995 0
8252 2986 2997 0
c (((aux683 + aux686 + aux687)<=1)=tv=SATLiteral(8253))
-8253 3024 0
-8253 3018 3023 0
-8253 3019 0
-8253 3021 0
-8253 3009 3023 0
-8253 3009 3018 0
-8253 3009 3019 0
-8253 3009 3021 0
-8253 3010 0
-8253 3010 3018 0
-8253 3010 3019 0
-8253 3010 3021 0
8253 -3010 -3018 -3023 0
8253 -3009 -3019 -3023 0
8253 -3009 -3018 -3024 0
c ((1<=(aux683 + aux686 + aux687))=tv=SATLiteral(8254))
-8254 -3009 -3018 -3023 0
8254 3023 0
8254 3018 0
8254 3019 0
8254 3021 0
8254 3009 0
8254 3009 3018 0
8254 3009 3019 0
8254 3009 3021 0
8254 3010 0
8254 3010 3018 0
8254 3010 3019 0
8254 3010 3021 0
c (((aux689 + aux692 + aux693)<=1)=tv=SATLiteral(8255))
-8255 3048 0
-8255 3042 3047 0
-8255 3043 0
-8255 3045 0
-8255 3033 3047 0
-8255 3033 3042 0
-8255 3033 3043 0
-8255 3033 3045 0
-8255 3034 0
-8255 3034 3042 0
-8255 3034 3043 0
-8255 3034 3045 0
8255 -3034 -3042 -3047 0
8255 -3033 -3043 -3047 0
8255 -3033 -3042 -3048 0
c ((1<=(aux689 + aux692 + aux693))=tv=SATLiteral(8256))
-8256 -3033 -3042 -3047 0
8256 3047 0
8256 3042 0
8256 3043 0
8256 3045 0
8256 3033 0
8256 3033 3042 0
8256 3033 3043 0
8256 3033 3045 0
8256 3034 0
8256 3034 3042 0
8256 3034 3043 0
8256 3034 3045 0
c (((aux695 + aux698 + aux699)<=1)=tv=SATLiteral(8257))
-8257 3072 0
-8257 3066 3071 0
-8257 3067 0
-8257 3069 0
-8257 3057 3071 0
-8257 3057 3066 0
-8257 3057 3067 0
-8257 3057 3069 0
-8257 3058 0
-8257 3058 3066 0
-8257 3058 3067 0
-8257 3058 3069 0
8257 -3058 -3066 -3071 0
8257 -3057 -3067 -3071 0
8257 -3057 -3066 -3072 0
c ((1<=(aux695 + aux698 + aux699))=tv=SATLiteral(8258))
-8258 -3057 -3066 -3071 0
8258 3071 0
8258 3066 0
8258 3067 0
8258 3069 0
8258 3057 0
8258 3057 3066 0
8258 3057 3067 0
8258 3057 3069 0
8258 3058 0
8258 3058 3066 0
8258 3058 3067 0
8258 3058 3069 0
c (((aux701 + aux704 + aux705)<=1)=tv=SATLiteral(8259))
-8259 3096 0
-8259 3090 3095 0
-8259 3091 0
-8259 3093 0
-8259 3081 3095 0
-8259 3081 3090 0
-8259 3081 3091 0
-8259 3081 3093 0
-8259 3082 0
-8259 3082 3090 0
-8259 3082 3091 0
-8259 3082 3093 0
8259 -3082 -3090 -3095 0
8259 -3081 -3091 -3095 0
8259 -3081 -3090 -3096 0
c ((1<=(aux701 + aux704 + aux705))=tv=SATLiteral(8260))
-8260 -3081 -3090 -3095 0
8260 3095 0
8260 3090 0
8260 3091 0
8260 3093 0
8260 3081 0
8260 3081 3090 0
8260 3081 3091 0
8260 3081 3093 0
8260 3082 0
8260 3082 3090 0
8260 3082 3091 0
8260 3082 3093 0
c (((aux707 + aux710 + aux711)<=1)=tv=SATLiteral(8261))
-8261 3120 0
-8261 3114 3119 0
-8261 3115 0
-8261 3117 0
-8261 3105 3119 0
-8261 3105 3114 0
-8261 3105 3115 0
-8261 3105 3117 0
-8261 3106 0
-8261 3106 3114 0
-8261 3106 3115 0
-8261 3106 3117 0
8261 -3106 -3114 -3119 0
8261 -3105 -3115 -3119 0
8261 -3105 -3114 -3120 0
c ((1<=(aux707 + aux710 + aux711))=tv=SATLiteral(8262))
-8262 -3105 -3114 -3119 0
8262 3119 0
8262 3114 0
8262 3115 0
8262 3117 0
8262 3105 0
8262 3105 3114 0
8262 3105 3115 0
8262 3105 3117 0
8262 3106 0
8262 3106 3114 0
8262 3106 3115 0
8262 3106 3117 0
c (((aux713 + aux716 + aux717)<=1)=tv=SATLiteral(8263))
-8263 3144 0
-8263 3138 3143 0
-8263 3139 0
-8263 3141 0
-8263 3129 3143 0
-8263 3129 3138 0
-8263 3129 3139 0
-8263 3129 3141 0
-8263 3130 0
-8263 3130 3138 0
-8263 3130 3139 0
-8263 3130 3141 0
8263 -3130 -3138 -3143 0
8263 -3129 -3139 -3143 0
8263 -3129 -3138 -3144 0
c ((1<=(aux713 + aux716 + aux717))=tv=SATLiteral(8264))
-8264 -3129 -3138 -3143 0
8264 3143 0
8264 3138 0
8264 3139 0
8264 3141 0
8264 3129 0
8264 3129 3138 0
8264 3129 3139 0
8264 3129 3141 0
8264 3130 0
8264 3130 3138 0
8264 3130 3139 0
8264 3130 3141 0
c (((aux719 + aux722 + aux723)<=1)=tv=SATLiteral(8265))
-8265 3168 0
-8265 3162 3167 0
-8265 3163 0
-8265 3165 0
-8265 3153 3167 0
-8265 3153 3162 0
-8265 3153 3163 0
-8265 3153 3165 0
-8265 3154 0
-8265 3154 3162 0
-8265 3154 3163 0
-8265 3154 3165 0
8265 -3154 -3162 -3167 0
8265 -3153 -3163 -3167 0
8265 -3153 -3162 -3168 0
c ((1<=(aux719 + aux722 + aux723))=tv=SATLiteral(8266))
-8266 -3153 -3162 -3167 0
8266 3167 0
8266 3162 0
8266 3163 0
8266 3165 0
8266 3153 0
8266 3153 3162 0
8266 3153 3163 0
8266 3153 3165 0
8266 3154 0
8266 3154 3162 0
8266 3154 3163 0
8266 3154 3165 0
c (((aux725 + aux728 + aux729)<=1)=tv=SATLiteral(8267))
-8267 3192 0
-8267 3186 3191 0
-8267 3187 0
-8267 3189 0
-8267 3177 3191 0
-8267 3177 3186 0
-8267 3177 3187 0
-8267 3177 3189 0
-8267 3178 0
-8267 3178 3186 0
-8267 3178 3187 0
-8267 3178 3189 0
8267 -3178 -3186 -3191 0
8267 -3177 -3187 -3191 0
8267 -3177 -3186 -3192 0
c ((1<=(aux725 + aux728 + aux729))=tv=SATLiteral(8268))
-8268 -3177 -3186 -3191 0
8268 3191 0
8268 3186 0
8268 3187 0
8268 3189 0
8268 3177 0
8268 3177 3186 0
8268 3177 3187 0
8268 3177 3189 0
8268 3178 0
8268 3178 3186 0
8268 3178 3187 0
8268 3178 3189 0
c (((aux731 + aux734 + aux735)<=1)=tv=SATLiteral(8269))
-8269 3216 0
-8269 3210 3215 0
-8269 3211 0
-8269 3213 0
-8269 3201 3215 0
-8269 3201 3210 0
-8269 3201 3211 0
-8269 3201 3213 0
-8269 3202 0
-8269 3202 3210 0
-8269 3202 3211 0
-8269 3202 3213 0
8269 -3202 -3210 -3215 0
8269 -3201 -3211 -3215 0
8269 -3201 -3210 -3216 0
c ((1<=(aux731 + aux734 + aux735))=tv=SATLiteral(8270))
-8270 -3201 -3210 -3215 0
8270 3215 0
8270 3210 0
8270 3211 0
8270 3213 0
8270 3201 0
8270 3201 3210 0
8270 3201 3211 0
8270 3201 3213 0
8270 3202 0
8270 3202 3210 0
8270 3202 3211 0
8270 3202 3213 0
c (((aux737 + aux740 + aux741)<=1)=tv=SATLiteral(8271))
-8271 3240 0
-8271 3234 3239 0
-8271 3235 0
-8271 3237 0
-8271 3225 3239 0
-8271 3225 3234 0
-8271 3225 3235 0
-8271 3225 3237 0
-8271 3226 0
-8271 3226 3234 0
-8271 3226 3235 0
-8271 3226 3237 0
8271 -3226 -3234 -3239 0
8271 -3225 -3235 -3239 0
8271 -3225 -3234 -3240 0
c ((1<=(aux737 + aux740 + aux741))=tv=SATLiteral(8272))
-8272 -3225 -3234 -3239 0
8272 3239 0
8272 3234 0
8272 3235 0
8272 3237 0
8272 3225 0
8272 3225 3234 0
8272 3225 3235 0
8272 3225 3237 0
8272 3226 0
8272 3226 3234 0
8272 3226 3235 0
8272 3226 3237 0
c (((aux743 + aux746 + aux747)<=1)=tv=SATLiteral(8273))
-8273 3264 0
-8273 3258 3263 0
-8273 3259 0
-8273 3261 0
-8273 3249 3263 0
-8273 3249 3258 0
-8273 3249 3259 0
-8273 3249 3261 0
-8273 3250 0
-8273 3250 3258 0
-8273 3250 3259 0
-8273 3250 3261 0
8273 -3250 -3258 -3263 0
8273 -3249 -3259 -3263 0
8273 -3249 -3258 -3264 0
c ((1<=(aux743 + aux746 + aux747))=tv=SATLiteral(8274))
-8274 -3249 -3258 -3263 0
8274 3263 0
8274 3258 0
8274 3259 0
8274 3261 0
8274 3249 0
8274 3249 3258 0
8274 3249 3259 0
8274 3249 3261 0
8274 3250 0
8274 3250 3258 0
8274 3250 3259 0
8274 3250 3261 0
c (((aux749 + aux752 + aux753)<=1)=tv=SATLiteral(8275))
-8275 3288 0
-8275 3282 3287 0
-8275 3283 0
-8275 3285 0
-8275 3273 3287 0
-8275 3273 3282 0
-8275 3273 3283 0
-8275 3273 3285 0
-8275 3274 0
-8275 3274 3282 0
-8275 3274 3283 0
-8275 3274 3285 0
8275 -3274 -3282 -3287 0
8275 -3273 -3283 -3287 0
8275 -3273 -3282 -3288 0
c ((1<=(aux749 + aux752 + aux753))=tv=SATLiteral(8276))
-8276 -3273 -3282 -3287 0
8276 3287 0
8276 3282 0
8276 3283 0
8276 3285 0
8276 3273 0
8276 3273 3282 0
8276 3273 3283 0
8276 3273 3285 0
8276 3274 0
8276 3274 3282 0
8276 3274 3283 0
8276 3274 3285 0
c (((aux755 + aux758 + aux759)<=1)=tv=SATLiteral(8277))
-8277 3312 0
-8277 3306 3311 0
-8277 3307 0
-8277 3309 0
-8277 3297 3311 0
-8277 3297 3306 0
-8277 3297 3307 0
-8277 3297 3309 0
-8277 3298 0
-8277 3298 3306 0
-8277 3298 3307 0
-8277 3298 3309 0
8277 -3298 -3306 -3311 0
8277 -3297 -3307 -3311 0
8277 -3297 -3306 -3312 0
c ((1<=(aux755 + aux758 + aux759))=tv=SATLiteral(8278))
-8278 -3297 -3306 -3311 0
8278 3311 0
8278 3306 0
8278 3307 0
8278 3309 0
8278 3297 0
8278 3297 3306 0
8278 3297 3307 0
8278 3297 3309 0
8278 3298 0
8278 3298 3306 0
8278 3298 3307 0
8278 3298 3309 0
c (((aux761 + aux764 + aux765)<=1)=tv=SATLiteral(8279))
-8279 3336 0
-8279 3330 3335 0
-8279 3331 0
-8279 3333 0
-8279 3321 3335 0
-8279 3321 3330 0
-8279 3321 3331 0
-8279 3321 3333 0
-8279 3322 0
-8279 3322 3330 0
-8279 3322 3331 0
-8279 3322 3333 0
8279 -3322 -3330 -3335 0
8279 -3321 -3331 -3335 0
8279 -3321 -3330 -3336 0
c ((1<=(aux761 + aux764 + aux765))=tv=SATLiteral(8280))
-8280 -3321 -3330 -3335 0
8280 3335 0
8280 3330 0
8280 3331 0
8280 3333 0
8280 3321 0
8280 3321 3330 0
8280 3321 3331 0
8280 3321 3333 0
8280 3322 0
8280 3322 3330 0
8280 3322 3331 0
8280 3322 3333 0
c (((aux767 + aux770 + aux771)<=1)=tv=SATLiteral(8281))
-8281 3360 0
-8281 3354 3359 0
-8281 3355 0
-8281 3357 0
-8281 3345 3359 0
-8281 3345 3354 0
-8281 3345 3355 0
-8281 3345 3357 0
-8281 3346 0
-8281 3346 3354 0
-8281 3346 3355 0
-8281 3346 3357 0
8281 -3346 -3354 -3359 0
8281 -3345 -3355 -3359 0
8281 -3345 -3354 -3360 0
c ((1<=(aux767 + aux770 + aux771))=tv=SATLiteral(8282))
-8282 -3345 -3354 -3359 0
8282 3359 0
8282 3354 0
8282 3355 0
8282 3357 0
8282 3345 0
8282 3345 3354 0
8282 3345 3355 0
8282 3345 3357 0
8282 3346 0
8282 3346 3354 0
8282 3346 3355 0
8282 3346 3357 0
c (((aux773 + aux776 + aux777)<=1)=tv=SATLiteral(8283))
-8283 3384 0
-8283 3378 3383 0
-8283 3379 0
-8283 3381 0
-8283 3369 3383 0
-8283 3369 3378 0
-8283 3369 3379 0
-8283 3369 3381 0
-8283 3370 0
-8283 3370 3378 0
-8283 3370 3379 0
-8283 3370 3381 0
8283 -3370 -3378 -3383 0
8283 -3369 -3379 -3383 0
8283 -3369 -3378 -3384 0
c ((1<=(aux773 + aux776 + aux777))=tv=SATLiteral(8284))
-8284 -3369 -3378 -3383 0
8284 3383 0
8284 3378 0
8284 3379 0
8284 3381 0
8284 3369 0
8284 3369 3378 0
8284 3369 3379 0
8284 3369 3381 0
8284 3370 0
8284 3370 3378 0
8284 3370 3379 0
8284 3370 3381 0
c (((aux779 + aux782 + aux783)<=1)=tv=SATLiteral(8285))
-8285 3408 0
-8285 3402 3407 0
-8285 3403 0
-8285 3405 0
-8285 3393 3407 0
-8285 3393 3402 0
-8285 3393 3403 0
-8285 3393 3405 0
-8285 3394 0
-8285 3394 3402 0
-8285 3394 3403 0
-8285 3394 3405 0
8285 -3394 -3402 -3407 0
8285 -3393 -3403 -3407 0
8285 -3393 -3402 -3408 0
c ((1<=(aux779 + aux782 + aux783))=tv=SATLiteral(8286))
-8286 -3393 -3402 -3407 0
8286 3407 0
8286 3402 0
8286 3403 0
8286 3405 0
8286 3393 0
8286 3393 3402 0
8286 3393 3403 0
8286 3393 3405 0
8286 3394 0
8286 3394 3402 0
8286 3394 3403 0
8286 3394 3405 0
c (((aux785 + aux788 + aux789)<=1)=tv=SATLiteral(8287))
-8287 3432 0
-8287 3426 3431 0
-8287 3427 0
-8287 3429 0
-8287 3417 3431 0
-8287 3417 3426 0
-8287 3417 3427 0
-8287 3417 3429 0
-8287 3418 0
-8287 3418 3426 0
-8287 3418 3427 0
-8287 3418 3429 0
8287 -3418 -3426 -3431 0
8287 -3417 -3427 -3431 0
8287 -3417 -3426 -3432 0
c ((1<=(aux785 + aux788 + aux789))=tv=SATLiteral(8288))
-8288 -3417 -3426 -3431 0
8288 3431 0
8288 3426 0
8288 3427 0
8288 3429 0
8288 3417 0
8288 3417 3426 0
8288 3417 3427 0
8288 3417 3429 0
8288 3418 0
8288 3418 3426 0
8288 3418 3427 0
8288 3418 3429 0
c (((aux791 + aux794 + aux795)<=1)=tv=SATLiteral(8289))
-8289 3456 0
-8289 3450 3455 0
-8289 3451 0
-8289 3453 0
-8289 3441 3455 0
-8289 3441 3450 0
-8289 3441 3451 0
-8289 3441 3453 0
-8289 3442 0
-8289 3442 3450 0
-8289 3442 3451 0
-8289 3442 3453 0
8289 -3442 -3450 -3455 0
8289 -3441 -3451 -3455 0
8289 -3441 -3450 -3456 0
c ((1<=(aux791 + aux794 + aux795))=tv=SATLiteral(8290))
-8290 -3441 -3450 -3455 0
8290 3455 0
8290 3450 0
8290 3451 0
8290 3453 0
8290 3441 0
8290 3441 3450 0
8290 3441 3451 0
8290 3441 3453 0
8290 3442 0
8290 3442 3450 0
8290 3442 3451 0
8290 3442 3453 0
c (((aux797 + aux800 + aux801)<=1)=tv=SATLiteral(8291))
-8291 3480 0
-8291 3474 3479 0
-8291 3475 0
-8291 3477 0
-8291 3465 3479 0
-8291 3465 3474 0
-8291 3465 3475 0
-8291 3465 3477 0
-8291 3466 0
-8291 3466 3474 0
-8291 3466 3475 0
-8291 3466 3477 0
8291 -3466 -3474 -3479 0
8291 -3465 -3475 -3479 0
8291 -3465 -3474 -3480 0
c ((1<=(aux797 + aux800 + aux801))=tv=SATLiteral(8292))
-8292 -3465 -3474 -3479 0
8292 3479 0
8292 3474 0
8292 3475 0
8292 3477 0
8292 3465 0
8292 3465 3474 0
8292 3465 3475 0
8292 3465 3477 0
8292 3466 0
8292 3466 3474 0
8292 3466 3475 0
8292 3466 3477 0
c (((aux803 + aux806 + aux807)<=1)=tv=SATLiteral(8293))
-8293 3504 0
-8293 3498 3503 0
-8293 3499 0
-8293 3501 0
-8293 3489 3503 0
-8293 3489 3498 0
-8293 3489 3499 0
-8293 3489 3501 0
-8293 3490 0
-8293 3490 3498 0
-8293 3490 3499 0
-8293 3490 3501 0
8293 -3490 -3498 -3503 0
8293 -3489 -3499 -3503 0
8293 -3489 -3498 -3504 0
c ((1<=(aux803 + aux806 + aux807))=tv=SATLiteral(8294))
-8294 -3489 -3498 -3503 0
8294 3503 0
8294 3498 0
8294 3499 0
8294 3501 0
8294 3489 0
8294 3489 3498 0
8294 3489 3499 0
8294 3489 3501 0
8294 3490 0
8294 3490 3498 0
8294 3490 3499 0
8294 3490 3501 0
c (((aux809 + aux812 + aux813)<=1)=tv=SATLiteral(8295))
-8295 3528 0
-8295 3522 3527 0
-8295 3523 0
-8295 3525 0
-8295 3513 3527 0
-8295 3513 3522 0
-8295 3513 3523 0
-8295 3513 3525 0
-8295 3514 0
-8295 3514 3522 0
-8295 3514 3523 0
-8295 3514 3525 0
8295 -3514 -3522 -3527 0
8295 -3513 -3523 -3527 0
8295 -3513 -3522 -3528 0
c ((1<=(aux809 + aux812 + aux813))=tv=SATLiteral(8296))
-8296 -3513 -3522 -3527 0
8296 3527 0
8296 3522 0
8296 3523 0
8296 3525 0
8296 3513 0
8296 3513 3522 0
8296 3513 3523 0
8296 3513 3525 0
8296 3514 0
8296 3514 3522 0
8296 3514 3523 0
8296 3514 3525 0
c (((aux815 + aux818 + aux819)<=1)=tv=SATLiteral(8297))
-8297 3552 0
-8297 3546 3551 0
-8297 3547 0
-8297 3549 0
-8297 3537 3551 0
-8297 3537 3546 0
-8297 3537 3547 0
-8297 3537 3549 0
-8297 3538 0
-8297 3538 3546 0
-8297 3538 3547 0
-8297 3538 3549 0
8297 -3538 -3546 -3551 0
8297 -3537 -3547 -3551 0
8297 -3537 -3546 -3552 0
c ((1<=(aux815 + aux818 + aux819))=tv=SATLiteral(8298))
-8298 -3537 -3546 -3551 0
8298 3551 0
8298 3546 0
8298 3547 0
8298 3549 0
8298 3537 0
8298 3537 3546 0
8298 3537 3547 0
8298 3537 3549 0
8298 3538 0
8298 3538 3546 0
8298 3538 3547 0
8298 3538 3549 0
c (((aux821 + aux824 + aux825)<=1)=tv=SATLiteral(8299))
-8299 3576 0
-8299 3570 3575 0
-8299 3571 0
-8299 3573 0
-8299 3561 3575 0
-8299 3561 3570 0
-8299 3561 3571 0
-8299 3561 3573 0
-8299 3562 0
-8299 3562 3570 0
-8299 3562 3571 0
-8299 3562 3573 0
8299 -3562 -3570 -3575 0
8299 -3561 -3571 -3575 0
8299 -3561 -3570 -3576 0
c ((1<=(aux821 + aux824 + aux825))=tv=SATLiteral(8300))
-8300 -3561 -3570 -3575 0
8300 3575 0
8300 3570 0
8300 3571 0
8300 3573 0
8300 3561 0
8300 3561 3570 0
8300 3561 3571 0
8300 3561 3573 0
8300 3562 0
8300 3562 3570 0
8300 3562 3571 0
8300 3562 3573 0
c (((aux827 + aux830 + aux831)<=1)=tv=SATLiteral(8301))
-8301 3600 0
-8301 3594 3599 0
-8301 3595 0
-8301 3597 0
-8301 3585 3599 0
-8301 3585 3594 0
-8301 3585 3595 0
-8301 3585 3597 0
-8301 3586 0
-8301 3586 3594 0
-8301 3586 3595 0
-8301 3586 3597 0
8301 -3586 -3594 -3599 0
8301 -3585 -3595 -3599 0
8301 -3585 -3594 -3600 0
c ((1<=(aux827 + aux830 + aux831))=tv=SATLiteral(8302))
-8302 -3585 -3594 -3599 0
8302 3599 0
8302 3594 0
8302 3595 0
8302 3597 0
8302 3585 0
8302 3585 3594 0
8302 3585 3595 0
8302 3585 3597 0
8302 3586 0
8302 3586 3594 0
8302 3586 3595 0
8302 3586 3597 0
c (((aux833 + aux836 + aux837)<=1)=tv=SATLiteral(8303))
-8303 3624 0
-8303 3618 3623 0
-8303 3619 0
-8303 3621 0
-8303 3609 3623 0
-8303 3609 3618 0
-8303 3609 3619 0
-8303 3609 3621 0
-8303 3610 0
-8303 3610 3618 0
-8303 3610 3619 0
-8303 3610 3621 0
8303 -3610 -3618 -3623 0
8303 -3609 -3619 -3623 0
8303 -3609 -3618 -3624 0
c ((1<=(aux833 + aux836 + aux837))=tv=SATLiteral(8304))
-8304 -3609 -3618 -3623 0
8304 3623 0
8304 3618 0
8304 3619 0
8304 3621 0
8304 3609 0
8304 3609 3618 0
8304 3609 3619 0
8304 3609 3621 0
8304 3610 0
8304 3610 3618 0
8304 3610 3619 0
8304 3610 3621 0
c (((aux839 + aux842 + aux843)<=1)=tv=SATLiteral(8305))
-8305 3648 0
-8305 3642 3647 0
-8305 3643 0
-8305 3645 0
-8305 3633 3647 0
-8305 3633 3642 0
-8305 3633 3643 0
-8305 3633 3645 0
-8305 3634 0
-8305 3634 3642 0
-8305 3634 3643 0
-8305 3634 3645 0
8305 -3634 -3642 -3647 0
8305 -3633 -3643 -3647 0
8305 -3633 -3642 -3648 0
c ((1<=(aux839 + aux842 + aux843))=tv=SATLiteral(8306))
-8306 -3633 -3642 -3647 0
8306 3647 0
8306 3642 0
8306 3643 0
8306 3645 0
8306 3633 0
8306 3633 3642 0
8306 3633 3643 0
8306 3633 3645 0
8306 3634 0
8306 3634 3642 0
8306 3634 3643 0
8306 3634 3645 0
c (((aux845 + aux848 + aux849)<=1)=tv=SATLiteral(8307))
-8307 3672 0
-8307 3666 3671 0
-8307 3667 0
-8307 3669 0
-8307 3657 3671 0
-8307 3657 3666 0
-8307 3657 3667 0
-8307 3657 3669 0
-8307 3658 0
-8307 3658 3666 0
-8307 3658 3667 0
-8307 3658 3669 0
8307 -3658 -3666 -3671 0
8307 -3657 -3667 -3671 0
8307 -3657 -3666 -3672 0
c ((1<=(aux845 + aux848 + aux849))=tv=SATLiteral(8308))
-8308 -3657 -3666 -3671 0
8308 3671 0
8308 3666 0
8308 3667 0
8308 3669 0
8308 3657 0
8308 3657 3666 0
8308 3657 3667 0
8308 3657 3669 0
8308 3658 0
8308 3658 3666 0
8308 3658 3667 0
8308 3658 3669 0
c (((aux851 + aux854 + aux855)<=1)=tv=SATLiteral(8309))
-8309 3696 0
-8309 3690 3695 0
-8309 3691 0
-8309 3693 0
-8309 3681 3695 0
-8309 3681 3690 0
-8309 3681 3691 0
-8309 3681 3693 0
-8309 3682 0
-8309 3682 3690 0
-8309 3682 3691 0
-8309 3682 3693 0
8309 -3682 -3690 -3695 0
8309 -3681 -3691 -3695 0
8309 -3681 -3690 -3696 0
c ((1<=(aux851 + aux854 + aux855))=tv=SATLiteral(8310))
-8310 -3681 -3690 -3695 0
8310 3695 0
8310 3690 0
8310 3691 0
8310 3693 0
8310 3681 0
8310 3681 3690 0
8310 3681 3691 0
8310 3681 3693 0
8310 3682 0
8310 3682 3690 0
8310 3682 3691 0
8310 3682 3693 0
c (((aux857 + aux860 + aux861)<=1)=tv=SATLiteral(8311))
-8311 3720 0
-8311 3714 3719 0
-8311 3715 0
-8311 3717 0
-8311 3705 3719 0
-8311 3705 3714 0
-8311 3705 3715 0
-8311 3705 3717 0
-8311 3706 0
-8311 3706 3714 0
-8311 3706 3715 0
-8311 3706 3717 0
8311 -3706 -3714 -3719 0
8311 -3705 -3715 -3719 0
8311 -3705 -3714 -3720 0
c ((1<=(aux857 + aux860 + aux861))=tv=SATLiteral(8312))
-8312 -3705 -3714 -3719 0
8312 3719 0
8312 3714 0
8312 3715 0
8312 3717 0
8312 3705 0
8312 3705 3714 0
8312 3705 3715 0
8312 3705 3717 0
8312 3706 0
8312 3706 3714 0
8312 3706 3715 0
8312 3706 3717 0
c (((aux863 + aux866 + aux867)<=1)=tv=SATLiteral(8313))
-8313 3744 0
-8313 3738 3743 0
-8313 3739 0
-8313 3741 0
-8313 3729 3743 0
-8313 3729 3738 0
-8313 3729 3739 0
-8313 3729 3741 0
-8313 3730 0
-8313 3730 3738 0
-8313 3730 3739 0
-8313 3730 3741 0
8313 -3730 -3738 -3743 0
8313 -3729 -3739 -3743 0
8313 -3729 -3738 -3744 0
c ((1<=(aux863 + aux866 + aux867))=tv=SATLiteral(8314))
-8314 -3729 -3738 -3743 0
8314 3743 0
8314 3738 0
8314 3739 0
8314 3741 0
8314 3729 0
8314 3729 3738 0
8314 3729 3739 0
8314 3729 3741 0
8314 3730 0
8314 3730 3738 0
8314 3730 3739 0
8314 3730 3741 0
c (((aux869 + aux872 + aux873)<=1)=tv=SATLiteral(8315))
-8315 3768 0
-8315 3762 3767 0
-8315 3763 0
-8315 3765 0
-8315 3753 3767 0
-8315 3753 3762 0
-8315 3753 3763 0
-8315 3753 3765 0
-8315 3754 0
-8315 3754 3762 0
-8315 3754 3763 0
-8315 3754 3765 0
8315 -3754 -3762 -3767 0
8315 -3753 -3763 -3767 0
8315 -3753 -3762 -3768 0
c ((1<=(aux869 + aux872 + aux873))=tv=SATLiteral(8316))
-8316 -3753 -3762 -3767 0
8316 3767 0
8316 3762 0
8316 3763 0
8316 3765 0
8316 3753 0
8316 3753 3762 0
8316 3753 3763 0
8316 3753 3765 0
8316 3754 0
8316 3754 3762 0
8316 3754 3763 0
8316 3754 3765 0
c (((aux875 + aux878 + aux879)<=1)=tv=SATLiteral(8317))
-8317 3792 0
-8317 3786 3791 0
-8317 3787 0
-8317 3789 0
-8317 3777 3791 0
-8317 3777 3786 0
-8317 3777 3787 0
-8317 3777 3789 0
-8317 3778 0
-8317 3778 3786 0
-8317 3778 3787 0
-8317 3778 3789 0
8317 -3778 -3786 -3791 0
8317 -3777 -3787 -3791 0
8317 -3777 -3786 -3792 0
c ((1<=(aux875 + aux878 + aux879))=tv=SATLiteral(8318))
-8318 -3777 -3786 -3791 0
8318 3791 0
8318 3786 0
8318 3787 0
8318 3789 0
8318 3777 0
8318 3777 3786 0
8318 3777 3787 0
8318 3777 3789 0
8318 3778 0
8318 3778 3786 0
8318 3778 3787 0
8318 3778 3789 0
c (((aux881 + aux884 + aux885)<=1)=tv=SATLiteral(8319))
-8319 3816 0
-8319 3810 3815 0
-8319 3811 0
-8319 3813 0
-8319 3801 3815 0
-8319 3801 3810 0
-8319 3801 3811 0
-8319 3801 3813 0
-8319 3802 0
-8319 3802 3810 0
-8319 3802 3811 0
-8319 3802 3813 0
8319 -3802 -3810 -3815 0
8319 -3801 -3811 -3815 0
8319 -3801 -3810 -3816 0
c ((1<=(aux881 + aux884 + aux885))=tv=SATLiteral(8320))
-8320 -3801 -3810 -3815 0
8320 3815 0
8320 3810 0
8320 3811 0
8320 3813 0
8320 3801 0
8320 3801 3810 0
8320 3801 3811 0
8320 3801 3813 0
8320 3802 0
8320 3802 3810 0
8320 3802 3811 0
8320 3802 3813 0
c (((aux887 + aux890 + aux891)<=1)=tv=SATLiteral(8321))
-8321 3840 0
-8321 3834 3839 0
-8321 3835 0
-8321 3837 0
-8321 3825 3839 0
-8321 3825 3834 0
-8321 3825 3835 0
-8321 3825 3837 0
-8321 3826 0
-8321 3826 3834 0
-8321 3826 3835 0
-8321 3826 3837 0
8321 -3826 -3834 -3839 0
8321 -3825 -3835 -3839 0
8321 -3825 -3834 -3840 0
c ((1<=(aux887 + aux890 + aux891))=tv=SATLiteral(8322))
-8322 -3825 -3834 -3839 0
8322 3839 0
8322 3834 0
8322 3835 0
8322 3837 0
8322 3825 0
8322 3825 3834 0
8322 3825 3835 0
8322 3825 3837 0
8322 3826 0
8322 3826 3834 0
8322 3826 3835 0
8322 3826 3837 0
c (((aux893 + aux896 + aux897)<=1)=tv=SATLiteral(8323))
-8323 3864 0
-8323 3858 3863 0
-8323 3859 0
-8323 3861 0
-8323 3849 3863 0
-8323 3849 3858 0
-8323 3849 3859 0
-8323 3849 3861 0
-8323 3850 0
-8323 3850 3858 0
-8323 3850 3859 0
-8323 3850 3861 0
8323 -3850 -3858 -3863 0
8323 -3849 -3859 -3863 0
8323 -3849 -3858 -3864 0
c ((1<=(aux893 + aux896 + aux897))=tv=SATLiteral(8324))
-8324 -3849 -3858 -3863 0
8324 3863 0
8324 3858 0
8324 3859 0
8324 3861 0
8324 3849 0
8324 3849 3858 0
8324 3849 3859 0
8324 3849 3861 0
8324 3850 0
8324 3850 3858 0
8324 3850 3859 0
8324 3850 3861 0
c (((aux899 + aux902 + aux903)<=1)=tv=SATLiteral(8325))
-8325 3888 0
-8325 3882 3887 0
-8325 3883 0
-8325 3885 0
-8325 3873 3887 0
-8325 3873 3882 0
-8325 3873 3883 0
-8325 3873 3885 0
-8325 3874 0
-8325 3874 3882 0
-8325 3874 3883 0
-8325 3874 3885 0
8325 -3874 -3882 -3887 0
8325 -3873 -3883 -3887 0
8325 -3873 -3882 -3888 0
c ((1<=(aux899 + aux902 + aux903))=tv=SATLiteral(8326))
-8326 -3873 -3882 -3887 0
8326 3887 0
8326 3882 0
8326 3883 0
8326 3885 0
8326 3873 0
8326 3873 3882 0
8326 3873 3883 0
8326 3873 3885 0
8326 3874 0
8326 3874 3882 0
8326 3874 3883 0
8326 3874 3885 0
c (((aux905 + aux908 + aux909)<=1)=tv=SATLiteral(8327))
-8327 3912 0
-8327 3906 3911 0
-8327 3907 0
-8327 3909 0
-8327 3897 3911 0
-8327 3897 3906 0
-8327 3897 3907 0
-8327 3897 3909 0
-8327 3898 0
-8327 3898 3906 0
-8327 3898 3907 0
-8327 3898 3909 0
8327 -3898 -3906 -3911 0
8327 -3897 -3907 -3911 0
8327 -3897 -3906 -3912 0
c ((1<=(aux905 + aux908 + aux909))=tv=SATLiteral(8328))
-8328 -3897 -3906 -3911 0
8328 3911 0
8328 3906 0
8328 3907 0
8328 3909 0
8328 3897 0
8328 3897 3906 0
8328 3897 3907 0
8328 3897 3909 0
8328 3898 0
8328 3898 3906 0
8328 3898 3907 0
8328 3898 3909 0
c (((aux911 + aux914 + aux915)<=1)=tv=SATLiteral(8329))
-8329 3936 0
-8329 3930 3935 0
-8329 3931 0
-8329 3933 0
-8329 3921 3935 0
-8329 3921 3930 0
-8329 3921 3931 0
-8329 3921 3933 0
-8329 3922 0
-8329 3922 3930 0
-8329 3922 3931 0
-8329 3922 3933 0
8329 -3922 -3930 -3935 0
8329 -3921 -3931 -3935 0
8329 -3921 -3930 -3936 0
c ((1<=(aux911 + aux914 + aux915))=tv=SATLiteral(8330))
-8330 -3921 -3930 -3935 0
8330 3935 0
8330 3930 0
8330 3931 0
8330 3933 0
8330 3921 0
8330 3921 3930 0
8330 3921 3931 0
8330 3921 3933 0
8330 3922 0
8330 3922 3930 0
8330 3922 3931 0
8330 3922 3933 0
c (((aux917 + aux920 + aux921)<=1)=tv=SATLiteral(8331))
-8331 3960 0
-8331 3954 3959 0
-8331 3955 0
-8331 3957 0
-8331 3945 3959 0
-8331 3945 3954 0
-8331 3945 3955 0
-8331 3945 3957 0
-8331 3946 0
-8331 3946 3954 0
-8331 3946 3955 0
-8331 3946 3957 0
8331 -3946 -3954 -3959 0
8331 -3945 -3955 -3959 0
8331 -3945 -3954 -3960 0
c ((1<=(aux917 + aux920 + aux921))=tv=SATLiteral(8332))
-8332 -3945 -3954 -3959 0
8332 3959 0
8332 3954 0
8332 3955 0
8332 3957 0
8332 3945 0
8332 3945 3954 0
8332 3945 3955 0
8332 3945 3957 0
8332 3946 0
8332 3946 3954 0
8332 3946 3955 0
8332 3946 3957 0
c (((aux923 + aux926 + aux927)<=1)=tv=SATLiteral(8333))
-8333 3984 0
-8333 3978 3983 0
-8333 3979 0
-8333 3981 0
-8333 3969 3983 0
-8333 3969 3978 0
-8333 3969 3979 0
-8333 3969 3981 0
-8333 3970 0
-8333 3970 3978 0
-8333 3970 3979 0
-8333 3970 3981 0
8333 -3970 -3978 -3983 0
8333 -3969 -3979 -3983 0
8333 -3969 -3978 -3984 0
c ((1<=(aux923 + aux926 + aux927))=tv=SATLiteral(8334))
-8334 -3969 -3978 -3983 0
8334 3983 0
8334 3978 0
8334 3979 0
8334 3981 0
8334 3969 0
8334 3969 3978 0
8334 3969 3979 0
8334 3969 3981 0
8334 3970 0
8334 3970 3978 0
8334 3970 3979 0
8334 3970 3981 0
c (((aux929 + aux932 + aux933)<=1)=tv=SATLiteral(8335))
-8335 4008 0
-8335 4002 4007 0
-8335 4003 0
-8335 4005 0
-8335 3993 4007 0
-8335 3993 4002 0
-8335 3993 4003 0
-8335 3993 4005 0
-8335 3994 0
-8335 3994 4002 0
-8335 3994 4003 0
-8335 3994 4005 0
8335 -3994 -4002 -4007 0
8335 -3993 -4003 -4007 0
8335 -3993 -4002 -4008 0
c ((1<=(aux929 + aux932 + aux933))=tv=SATLiteral(8336))
-8336 -3993 -4002 -4007 0
8336 4007 0
8336 4002 0
8336 4003 0
8336 4005 0
8336 3993 0
8336 3993 4002 0
8336 3993 4003 0
8336 3993 4005 0
8336 3994 0
8336 3994 4002 0
8336 3994 4003 0
8336 3994 4005 0
c (((aux935 + aux938 + aux939)<=1)=tv=SATLiteral(8337))
-8337 4032 0
-8337 4026 4031 0
-8337 4027 0
-8337 4029 0
-8337 4017 4031 0
-8337 4017 4026 0
-8337 4017 4027 0
-8337 4017 4029 0
-8337 4018 0
-8337 4018 4026 0
-8337 4018 4027 0
-8337 4018 4029 0
8337 -4018 -4026 -4031 0
8337 -4017 -4027 -4031 0
8337 -4017 -4026 -4032 0
c ((1<=(aux935 + aux938 + aux939))=tv=SATLiteral(8338))
-8338 -4017 -4026 -4031 0
8338 4031 0
8338 4026 0
8338 4027 0
8338 4029 0
8338 4017 0
8338 4017 4026 0
8338 4017 4027 0
8338 4017 4029 0
8338 4018 0
8338 4018 4026 0
8338 4018 4027 0
8338 4018 4029 0
c (((aux941 + aux944 + aux945)<=1)=tv=SATLiteral(8339))
-8339 4056 0
-8339 4050 4055 0
-8339 4051 0
-8339 4053 0
-8339 4041 4055 0
-8339 4041 4050 0
-8339 4041 4051 0
-8339 4041 4053 0
-8339 4042 0
-8339 4042 4050 0
-8339 4042 4051 0
-8339 4042 4053 0
8339 -4042 -4050 -4055 0
8339 -4041 -4051 -4055 0
8339 -4041 -4050 -4056 0
c ((1<=(aux941 + aux944 + aux945))=tv=SATLiteral(8340))
-8340 -4041 -4050 -4055 0
8340 4055 0
8340 4050 0
8340 4051 0
8340 4053 0
8340 4041 0
8340 4041 4050 0
8340 4041 4051 0
8340 4041 4053 0
8340 4042 0
8340 4042 4050 0
8340 4042 4051 0
8340 4042 4053 0
c (((aux947 + aux950 + aux951)<=1)=tv=SATLiteral(8341))
-8341 4080 0
-8341 4074 4079 0
-8341 4075 0
-8341 4077 0
-8341 4065 4079 0
-8341 4065 4074 0
-8341 4065 4075 0
-8341 4065 4077 0
-8341 4066 0
-8341 4066 4074 0
-8341 4066 4075 0
-8341 4066 4077 0
8341 -4066 -4074 -4079 0
8341 -4065 -4075 -4079 0
8341 -4065 -4074 -4080 0
c ((1<=(aux947 + aux950 + aux951))=tv=SATLiteral(8342))
-8342 -4065 -4074 -4079 0
8342 4079 0
8342 4074 0
8342 4075 0
8342 4077 0
8342 4065 0
8342 4065 4074 0
8342 4065 4075 0
8342 4065 4077 0
8342 4066 0
8342 4066 4074 0
8342 4066 4075 0
8342 4066 4077 0
c (((aux953 + aux956 + aux957)<=1)=tv=SATLiteral(8343))
-8343 4104 0
-8343 4098 4103 0
-8343 4099 0
-8343 4101 0
-8343 4089 4103 0
-8343 4089 4098 0
-8343 4089 4099 0
-8343 4089 4101 0
-8343 4090 0
-8343 4090 4098 0
-8343 4090 4099 0
-8343 4090 4101 0
8343 -4090 -4098 -4103 0
8343 -4089 -4099 -4103 0
8343 -4089 -4098 -4104 0
c ((1<=(aux953 + aux956 + aux957))=tv=SATLiteral(8344))
-8344 -4089 -4098 -4103 0
8344 4103 0
8344 4098 0
8344 4099 0
8344 4101 0
8344 4089 0
8344 4089 4098 0
8344 4089 4099 0
8344 4089 4101 0
8344 4090 0
8344 4090 4098 0
8344 4090 4099 0
8344 4090 4101 0
c (((aux959 + aux962 + aux963)<=1)=tv=SATLiteral(8345))
-8345 4128 0
-8345 4122 4127 0
-8345 4123 0
-8345 4125 0
-8345 4113 4127 0
-8345 4113 4122 0
-8345 4113 4123 0
-8345 4113 4125 0
-8345 4114 0
-8345 4114 4122 0
-8345 4114 4123 0
-8345 4114 4125 0
8345 -4114 -4122 -4127 0
8345 -4113 -4123 -4127 0
8345 -4113 -4122 -4128 0
c ((1<=(aux959 + aux962 + aux963))=tv=SATLiteral(8346))
-8346 -4113 -4122 -4127 0
8346 4127 0
8346 4122 0
8346 4123 0
8346 4125 0
8346 4113 0
8346 4113 4122 0
8346 4113 4123 0
8346 4113 4125 0
8346 4114 0
8346 4114 4122 0
8346 4114 4123 0
8346 4114 4125 0
c (((aux965 + aux968 + aux969)<=1)=tv=SATLiteral(8347))
-8347 4152 0
-8347 4146 4151 0
-8347 4147 0
-8347 4149 0
-8347 4137 4151 0
-8347 4137 4146 0
-8347 4137 4147 0
-8347 4137 4149 0
-8347 4138 0
-8347 4138 4146 0
-8347 4138 4147 0
-8347 4138 4149 0
8347 -4138 -4146 -4151 0
8347 -4137 -4147 -4151 0
8347 -4137 -4146 -4152 0
c ((1<=(aux965 + aux968 + aux969))=tv=SATLiteral(8348))
-8348 -4137 -4146 -4151 0
8348 4151 0
8348 4146 0
8348 4147 0
8348 4149 0
8348 4137 0
8348 4137 4146 0
8348 4137 4147 0
8348 4137 4149 0
8348 4138 0
8348 4138 4146 0
8348 4138 4147 0
8348 4138 4149 0
c (((aux971 + aux974 + aux975)<=1)=tv=SATLiteral(8349))
-8349 4176 0
-8349 4170 4175 0
-8349 4171 0
-8349 4173 0
-8349 4161 4175 0
-8349 4161 4170 0
-8349 4161 4171 0
-8349 4161 4173 0
-8349 4162 0
-8349 4162 4170 0
-8349 4162 4171 0
-8349 4162 4173 0
8349 -4162 -4170 -4175 0
8349 -4161 -4171 -4175 0
8349 -4161 -4170 -4176 0
c ((1<=(aux971 + aux974 + aux975))=tv=SATLiteral(8350))
-8350 -4161 -4170 -4175 0
8350 4175 0
8350 4170 0
8350 4171 0
8350 4173 0
8350 4161 0
8350 4161 4170 0
8350 4161 4171 0
8350 4161 4173 0
8350 4162 0
8350 4162 4170 0
8350 4162 4171 0
8350 4162 4173 0
c (((aux977 + aux980 + aux981)<=1)=tv=SATLiteral(8351))
-8351 4200 0
-8351 4194 4199 0
-8351 4195 0
-8351 4197 0
-8351 4185 4199 0
-8351 4185 4194 0
-8351 4185 4195 0
-8351 4185 4197 0
-8351 4186 0
-8351 4186 4194 0
-8351 4186 4195 0
-8351 4186 4197 0
8351 -4186 -4194 -4199 0
8351 -4185 -4195 -4199 0
8351 -4185 -4194 -4200 0
c ((1<=(aux977 + aux980 + aux981))=tv=SATLiteral(8352))
-8352 -4185 -4194 -4199 0
8352 4199 0
8352 4194 0
8352 4195 0
8352 4197 0
8352 4185 0
8352 4185 4194 0
8352 4185 4195 0
8352 4185 4197 0
8352 4186 0
8352 4186 4194 0
8352 4186 4195 0
8352 4186 4197 0
c (((aux983 + aux986 + aux987)<=1)=tv=SATLiteral(8353))
-8353 4224 0
-8353 4218 4223 0
-8353 4219 0
-8353 4221 0
-8353 4209 4223 0
-8353 4209 4218 0
-8353 4209 4219 0
-8353 4209 4221 0
-8353 4210 0
-8353 4210 4218 0
-8353 4210 4219 0
-8353 4210 4221 0
8353 -4210 -4218 -4223 0
8353 -4209 -4219 -4223 0
8353 -4209 -4218 -4224 0
c ((1<=(aux983 + aux986 + aux987))=tv=SATLiteral(8354))
-8354 -4209 -4218 -4223 0
8354 4223 0
8354 4218 0
8354 4219 0
8354 4221 0
8354 4209 0
8354 4209 4218 0
8354 4209 4219 0
8354 4209 4221 0
8354 4210 0
8354 4210 4218 0
8354 4210 4219 0
8354 4210 4221 0
c (((aux989 + aux992 + aux993)<=1)=tv=SATLiteral(8355))
-8355 4248 0
-8355 4242 4247 0
-8355 4243 0
-8355 4245 0
-8355 4233 4247 0
-8355 4233 4242 0
-8355 4233 4243 0
-8355 4233 4245 0
-8355 4234 0
-8355 4234 4242 0
-8355 4234 4243 0
-8355 4234 4245 0
8355 -4234 -4242 -4247 0
8355 -4233 -4243 -4247 0
8355 -4233 -4242 -4248 0
c ((1<=(aux989 + aux992 + aux993))=tv=SATLiteral(8356))
-8356 -4233 -4242 -4247 0
8356 4247 0
8356 4242 0
8356 4243 0
8356 4245 0
8356 4233 0
8356 4233 4242 0
8356 4233 4243 0
8356 4233 4245 0
8356 4234 0
8356 4234 4242 0
8356 4234 4243 0
8356 4234 4245 0
c (((aux995 + aux998 + aux999)<=1)=tv=SATLiteral(8357))
-8357 4272 0
-8357 4266 4271 0
-8357 4267 0
-8357 4269 0
-8357 4257 4271 0
-8357 4257 4266 0
-8357 4257 4267 0
-8357 4257 4269 0
-8357 4258 0
-8357 4258 4266 0
-8357 4258 4267 0
-8357 4258 4269 0
8357 -4258 -4266 -4271 0
8357 -4257 -4267 -4271 0
8357 -4257 -4266 -4272 0
c ((1<=(aux995 + aux998 + aux999))=tv=SATLiteral(8358))
-8358 -4257 -4266 -4271 0
8358 4271 0
8358 4266 0
8358 4267 0
8358 4269 0
8358 4257 0
8358 4257 4266 0
8358 4257 4267 0
8358 4257 4269 0
8358 4258 0
8358 4258 4266 0
8358 4258 4267 0
8358 4258 4269 0
c (((aux1001 + aux1004 + aux1005)<=1)=tv=SATLiteral(8359))
-8359 4296 0
-8359 4290 4295 0
-8359 4291 0
-8359 4293 0
-8359 4281 4295 0
-8359 4281 4290 0
-8359 4281 4291 0
-8359 4281 4293 0
-8359 4282 0
-8359 4282 4290 0
-8359 4282 4291 0
-8359 4282 4293 0
8359 -4282 -4290 -4295 0
8359 -4281 -4291 -4295 0
8359 -4281 -4290 -4296 0
c ((1<=(aux1001 + aux1004 + aux1005))=tv=SATLiteral(8360))
-8360 -4281 -4290 -4295 0
8360 4295 0
8360 4290 0
8360 4291 0
8360 4293 0
8360 4281 0
8360 4281 4290 0
8360 4281 4291 0
8360 4281 4293 0
8360 4282 0
8360 4282 4290 0
8360 4282 4291 0
8360 4282 4293 0
c (((aux1007 + aux1010 + aux1011)<=1)=tv=SATLiteral(8361))
-8361 4320 0
-8361 4314 4319 0
-8361 4315 0
-8361 4317 0
-8361 4305 4319 0
-8361 4305 4314 0
-8361 4305 4315 0
-8361 4305 4317 0
-8361 4306 0
-8361 4306 4314 0
-8361 4306 4315 0
-8361 4306 4317 0
8361 -4306 -4314 -4319 0
8361 -4305 -4315 -4319 0
8361 -4305 -4314 -4320 0
c ((1<=(aux1007 + aux1010 + aux1011))=tv=SATLiteral(8362))
-8362 -4305 -4314 -4319 0
8362 4319 0
8362 4314 0
8362 4315 0
8362 4317 0
8362 4305 0
8362 4305 4314 0
8362 4305 4315 0
8362 4305 4317 0
8362 4306 0
8362 4306 4314 0
8362 4306 4315 0
8362 4306 4317 0
c (((aux1013 + aux1016 + aux1017)<=1)=tv=SATLiteral(8363))
-8363 4344 0
-8363 4338 4343 0
-8363 4339 0
-8363 4341 0
-8363 4329 4343 0
-8363 4329 4338 0
-8363 4329 4339 0
-8363 4329 4341 0
-8363 4330 0
-8363 4330 4338 0
-8363 4330 4339 0
-8363 4330 4341 0
8363 -4330 -4338 -4343 0
8363 -4329 -4339 -4343 0
8363 -4329 -4338 -4344 0
c ((1<=(aux1013 + aux1016 + aux1017))=tv=SATLiteral(8364))
-8364 -4329 -4338 -4343 0
8364 4343 0
8364 4338 0
8364 4339 0
8364 4341 0
8364 4329 0
8364 4329 4338 0
8364 4329 4339 0
8364 4329 4341 0
8364 4330 0
8364 4330 4338 0
8364 4330 4339 0
8364 4330 4341 0
c (((aux1019 + aux1022 + aux1023)<=1)=tv=SATLiteral(8365))
-8365 4368 0
-8365 4362 4367 0
-8365 4363 0
-8365 4365 0
-8365 4353 4367 0
-8365 4353 4362 0
-8365 4353 4363 0
-8365 4353 4365 0
-8365 4354 0
-8365 4354 4362 0
-8365 4354 4363 0
-8365 4354 4365 0
8365 -4354 -4362 -4367 0
8365 -4353 -4363 -4367 0
8365 -4353 -4362 -4368 0
c ((1<=(aux1019 + aux1022 + aux1023))=tv=SATLiteral(8366))
-8366 -4353 -4362 -4367 0
8366 4367 0
8366 4362 0
8366 4363 0
8366 4365 0
8366 4353 0
8366 4353 4362 0
8366 4353 4363 0
8366 4353 4365 0
8366 4354 0
8366 4354 4362 0
8366 4354 4363 0
8366 4354 4365 0
c (((aux1025 + aux1028 + aux1029)<=1)=tv=SATLiteral(8367))
-8367 4392 0
-8367 4386 4391 0
-8367 4387 0
-8367 4389 0
-8367 4377 4391 0
-8367 4377 4386 0
-8367 4377 4387 0
-8367 4377 4389 0
-8367 4378 0
-8367 4378 4386 0
-8367 4378 4387 0
-8367 4378 4389 0
8367 -4378 -4386 -4391 0
8367 -4377 -4387 -4391 0
8367 -4377 -4386 -4392 0
c ((1<=(aux1025 + aux1028 + aux1029))=tv=SATLiteral(8368))
-8368 -4377 -4386 -4391 0
8368 4391 0
8368 4386 0
8368 4387 0
8368 4389 0
8368 4377 0
8368 4377 4386 0
8368 4377 4387 0
8368 4377 4389 0
8368 4378 0
8368 4378 4386 0
8368 4378 4387 0
8368 4378 4389 0
c (((aux1031 + aux1034 + aux1035)<=1)=tv=SATLiteral(8369))
-8369 4416 0
-8369 4410 4415 0
-8369 4411 0
-8369 4413 0
-8369 4401 4415 0
-8369 4401 4410 0
-8369 4401 4411 0
-8369 4401 4413 0
-8369 4402 0
-8369 4402 4410 0
-8369 4402 4411 0
-8369 4402 4413 0
8369 -4402 -4410 -4415 0
8369 -4401 -4411 -4415 0
8369 -4401 -4410 -4416 0
c ((1<=(aux1031 + aux1034 + aux1035))=tv=SATLiteral(8370))
-8370 -4401 -4410 -4415 0
8370 4415 0
8370 4410 0
8370 4411 0
8370 4413 0
8370 4401 0
8370 4401 4410 0
8370 4401 4411 0
8370 4401 4413 0
8370 4402 0
8370 4402 4410 0
8370 4402 4411 0
8370 4402 4413 0
c (((aux1037 + aux1040 + aux1041)<=1)=tv=SATLiteral(8371))
-8371 4440 0
-8371 4434 4439 0
-8371 4435 0
-8371 4437 0
-8371 4425 4439 0
-8371 4425 4434 0
-8371 4425 4435 0
-8371 4425 4437 0
-8371 4426 0
-8371 4426 4434 0
-8371 4426 4435 0
-8371 4426 4437 0
8371 -4426 -4434 -4439 0
8371 -4425 -4435 -4439 0
8371 -4425 -4434 -4440 0
c ((1<=(aux1037 + aux1040 + aux1041))=tv=SATLiteral(8372))
-8372 -4425 -4434 -4439 0
8372 4439 0
8372 4434 0
8372 4435 0
8372 4437 0
8372 4425 0
8372 4425 4434 0
8372 4425 4435 0
8372 4425 4437 0
8372 4426 0
8372 4426 4434 0
8372 4426 4435 0
8372 4426 4437 0
c (((aux1043 + aux1046 + aux1047)<=1)=tv=SATLiteral(8373))
-8373 4464 0
-8373 4458 4463 0
-8373 4459 0
-8373 4461 0
-8373 4449 4463 0
-8373 4449 4458 0
-8373 4449 4459 0
-8373 4449 4461 0
-8373 4450 0
-8373 4450 4458 0
-8373 4450 4459 0
-8373 4450 4461 0
8373 -4450 -4458 -4463 0
8373 -4449 -4459 -4463 0
8373 -4449 -4458 -4464 0
c ((1<=(aux1043 + aux1046 + aux1047))=tv=SATLiteral(8374))
-8374 -4449 -4458 -4463 0
8374 4463 0
8374 4458 0
8374 4459 0
8374 4461 0
8374 4449 0
8374 4449 4458 0
8374 4449 4459 0
8374 4449 4461 0
8374 4450 0
8374 4450 4458 0
8374 4450 4459 0
8374 4450 4461 0
c (((aux1049 + aux1052 + aux1053)<=1)=tv=SATLiteral(8375))
-8375 4488 0
-8375 4482 4487 0
-8375 4483 0
-8375 4485 0
-8375 4473 4487 0
-8375 4473 4482 0
-8375 4473 4483 0
-8375 4473 4485 0
-8375 4474 0
-8375 4474 4482 0
-8375 4474 4483 0
-8375 4474 4485 0
8375 -4474 -4482 -4487 0
8375 -4473 -4483 -4487 0
8375 -4473 -4482 -4488 0
c ((1<=(aux1049 + aux1052 + aux1053))=tv=SATLiteral(8376))
-8376 -4473 -4482 -4487 0
8376 4487 0
8376 4482 0
8376 4483 0
8376 4485 0
8376 4473 0
8376 4473 4482 0
8376 4473 4483 0
8376 4473 4485 0
8376 4474 0
8376 4474 4482 0
8376 4474 4483 0
8376 4474 4485 0
c (((aux1055 + aux1058 + aux1059)<=1)=tv=SATLiteral(8377))
-8377 4512 0
-8377 4506 4511 0
-8377 4507 0
-8377 4509 0
-8377 4497 4511 0
-8377 4497 4506 0
-8377 4497 4507 0
-8377 4497 4509 0
-8377 4498 0
-8377 4498 4506 0
-8377 4498 4507 0
-8377 4498 4509 0
8377 -4498 -4506 -4511 0
8377 -4497 -4507 -4511 0
8377 -4497 -4506 -4512 0
c ((1<=(aux1055 + aux1058 + aux1059))=tv=SATLiteral(8378))
-8378 -4497 -4506 -4511 0
8378 4511 0
8378 4506 0
8378 4507 0
8378 4509 0
8378 4497 0
8378 4497 4506 0
8378 4497 4507 0
8378 4497 4509 0
8378 4498 0
8378 4498 4506 0
8378 4498 4507 0
8378 4498 4509 0
c (((aux1061 + aux1064 + aux1065)<=1)=tv=SATLiteral(8379))
-8379 4536 0
-8379 4530 4535 0
-8379 4531 0
-8379 4533 0
-8379 4521 4535 0
-8379 4521 4530 0
-8379 4521 4531 0
-8379 4521 4533 0
-8379 4522 0
-8379 4522 4530 0
-8379 4522 4531 0
-8379 4522 4533 0
8379 -4522 -4530 -4535 0
8379 -4521 -4531 -4535 0
8379 -4521 -4530 -4536 0
c ((1<=(aux1061 + aux1064 + aux1065))=tv=SATLiteral(8380))
-8380 -4521 -4530 -4535 0
8380 4535 0
8380 4530 0
8380 4531 0
8380 4533 0
8380 4521 0
8380 4521 4530 0
8380 4521 4531 0
8380 4521 4533 0
8380 4522 0
8380 4522 4530 0
8380 4522 4531 0
8380 4522 4533 0
c (((aux1067 + aux1070 + aux1071)<=1)=tv=SATLiteral(8381))
-8381 4560 0
-8381 4554 4559 0
-8381 4555 0
-8381 4557 0
-8381 4545 4559 0
-8381 4545 4554 0
-8381 4545 4555 0
-8381 4545 4557 0
-8381 4546 0
-8381 4546 4554 0
-8381 4546 4555 0
-8381 4546 4557 0
8381 -4546 -4554 -4559 0
8381 -4545 -4555 -4559 0
8381 -4545 -4554 -4560 0
c ((1<=(aux1067 + aux1070 + aux1071))=tv=SATLiteral(8382))
-8382 -4545 -4554 -4559 0
8382 4559 0
8382 4554 0
8382 4555 0
8382 4557 0
8382 4545 0
8382 4545 4554 0
8382 4545 4555 0
8382 4545 4557 0
8382 4546 0
8382 4546 4554 0
8382 4546 4555 0
8382 4546 4557 0
c (((aux1073 + aux1076 + aux1077)<=1)=tv=SATLiteral(8383))
-8383 4584 0
-8383 4578 4583 0
-8383 4579 0
-8383 4581 0
-8383 4569 4583 0
-8383 4569 4578 0
-8383 4569 4579 0
-8383 4569 4581 0
-8383 4570 0
-8383 4570 4578 0
-8383 4570 4579 0
-8383 4570 4581 0
8383 -4570 -4578 -4583 0
8383 -4569 -4579 -4583 0
8383 -4569 -4578 -4584 0
c ((1<=(aux1073 + aux1076 + aux1077))=tv=SATLiteral(8384))
-8384 -4569 -4578 -4583 0
8384 4583 0
8384 4578 0
8384 4579 0
8384 4581 0
8384 4569 0
8384 4569 4578 0
8384 4569 4579 0
8384 4569 4581 0
8384 4570 0
8384 4570 4578 0
8384 4570 4579 0
8384 4570 4581 0
c (((aux1079 + aux1082 + aux1083)<=1)=tv=SATLiteral(8385))
-8385 4608 0
-8385 4602 4607 0
-8385 4603 0
-8385 4605 0
-8385 4593 4607 0
-8385 4593 4602 0
-8385 4593 4603 0
-8385 4593 4605 0
-8385 4594 0
-8385 4594 4602 0
-8385 4594 4603 0
-8385 4594 4605 0
8385 -4594 -4602 -4607 0
8385 -4593 -4603 -4607 0
8385 -4593 -4602 -4608 0
c ((1<=(aux1079 + aux1082 + aux1083))=tv=SATLiteral(8386))
-8386 -4593 -4602 -4607 0
8386 4607 0
8386 4602 0
8386 4603 0
8386 4605 0
8386 4593 0
8386 4593 4602 0
8386 4593 4603 0
8386 4593 4605 0
8386 4594 0
8386 4594 4602 0
8386 4594 4603 0
8386 4594 4605 0
c (((aux1085 + aux1088 + aux1089)<=1)=tv=SATLiteral(8387))
-8387 4632 0
-8387 4626 4631 0
-8387 4627 0
-8387 4629 0
-8387 4617 4631 0
-8387 4617 4626 0
-8387 4617 4627 0
-8387 4617 4629 0
-8387 4618 0
-8387 4618 4626 0
-8387 4618 4627 0
-8387 4618 4629 0
8387 -4618 -4626 -4631 0
8387 -4617 -4627 -4631 0
8387 -4617 -4626 -4632 0
c ((1<=(aux1085 + aux1088 + aux1089))=tv=SATLiteral(8388))
-8388 -4617 -4626 -4631 0
8388 4631 0
8388 4626 0
8388 4627 0
8388 4629 0
8388 4617 0
8388 4617 4626 0
8388 4617 4627 0
8388 4617 4629 0
8388 4618 0
8388 4618 4626 0
8388 4618 4627 0
8388 4618 4629 0
c (((aux1091 + aux1094 + aux1095)<=1)=tv=SATLiteral(8389))
-8389 4656 0
-8389 4650 4655 0
-8389 4651 0
-8389 4653 0
-8389 4641 4655 0
-8389 4641 4650 0
-8389 4641 4651 0
-8389 4641 4653 0
-8389 4642 0
-8389 4642 4650 0
-8389 4642 4651 0
-8389 4642 4653 0
8389 -4642 -4650 -4655 0
8389 -4641 -4651 -4655 0
8389 -4641 -4650 -4656 0
c ((1<=(aux1091 + aux1094 + aux1095))=tv=SATLiteral(8390))
-8390 -4641 -4650 -4655 0
8390 4655 0
8390 4650 0
8390 4651 0
8390 4653 0
8390 4641 0
8390 4641 4650 0
8390 4641 4651 0
8390 4641 4653 0
8390 4642 0
8390 4642 4650 0
8390 4642 4651 0
8390 4642 4653 0
c (((aux1097 + aux1100 + aux1101)<=1)=tv=SATLiteral(8391))
-8391 4680 0
-8391 4674 4679 0
-8391 4675 0
-8391 4677 0
-8391 4665 4679 0
-8391 4665 4674 0
-8391 4665 4675 0
-8391 4665 4677 0
-8391 4666 0
-8391 4666 4674 0
-8391 4666 4675 0
-8391 4666 4677 0
8391 -4666 -4674 -4679 0
8391 -4665 -4675 -4679 0
8391 -4665 -4674 -4680 0
c ((1<=(aux1097 + aux1100 + aux1101))=tv=SATLiteral(8392))
-8392 -4665 -4674 -4679 0
8392 4679 0
8392 4674 0
8392 4675 0
8392 4677 0
8392 4665 0
8392 4665 4674 0
8392 4665 4675 0
8392 4665 4677 0
8392 4666 0
8392 4666 4674 0
8392 4666 4675 0
8392 4666 4677 0
c (((aux1103 + aux1106 + aux1107)<=1)=tv=SATLiteral(8393))
-8393 4704 0
-8393 4698 4703 0
-8393 4699 0
-8393 4701 0
-8393 4689 4703 0
-8393 4689 4698 0
-8393 4689 4699 0
-8393 4689 4701 0
-8393 4690 0
-8393 4690 4698 0
-8393 4690 4699 0
-8393 4690 4701 0
8393 -4690 -4698 -4703 0
8393 -4689 -4699 -4703 0
8393 -4689 -4698 -4704 0
c ((1<=(aux1103 + aux1106 + aux1107))=tv=SATLiteral(8394))
-8394 -4689 -4698 -4703 0
8394 4703 0
8394 4698 0
8394 4699 0
8394 4701 0
8394 4689 0
8394 4689 4698 0
8394 4689 4699 0
8394 4689 4701 0
8394 4690 0
8394 4690 4698 0
8394 4690 4699 0
8394 4690 4701 0
c (((aux1109 + aux1112 + aux1113)<=1)=tv=SATLiteral(8395))
-8395 4728 0
-8395 4722 4727 0
-8395 4723 0
-8395 4725 0
-8395 4713 4727 0
-8395 4713 4722 0
-8395 4713 4723 0
-8395 4713 4725 0
-8395 4714 0
-8395 4714 4722 0
-8395 4714 4723 0
-8395 4714 4725 0
8395 -4714 -4722 -4727 0
8395 -4713 -4723 -4727 0
8395 -4713 -4722 -4728 0
c ((1<=(aux1109 + aux1112 + aux1113))=tv=SATLiteral(8396))
-8396 -4713 -4722 -4727 0
8396 4727 0
8396 4722 0
8396 4723 0
8396 4725 0
8396 4713 0
8396 4713 4722 0
8396 4713 4723 0
8396 4713 4725 0
8396 4714 0
8396 4714 4722 0
8396 4714 4723 0
8396 4714 4725 0
c (((aux1115 + aux1118 + aux1119)<=1)=tv=SATLiteral(8397))
-8397 4752 0
-8397 4746 4751 0
-8397 4747 0
-8397 4749 0
-8397 4737 4751 0
-8397 4737 4746 0
-8397 4737 4747 0
-8397 4737 4749 0
-8397 4738 0
-8397 4738 4746 0
-8397 4738 4747 0
-8397 4738 4749 0
8397 -4738 -4746 -4751 0
8397 -4737 -4747 -4751 0
8397 -4737 -4746 -4752 0
c ((1<=(aux1115 + aux1118 + aux1119))=tv=SATLiteral(8398))
-8398 -4737 -4746 -4751 0
8398 4751 0
8398 4746 0
8398 4747 0
8398 4749 0
8398 4737 0
8398 4737 4746 0
8398 4737 4747 0
8398 4737 4749 0
8398 4738 0
8398 4738 4746 0
8398 4738 4747 0
8398 4738 4749 0
c (((aux1121 + aux1124 + aux1125)<=1)=tv=SATLiteral(8399))
-8399 4776 0
-8399 4770 4775 0
-8399 4771 0
-8399 4773 0
-8399 4761 4775 0
-8399 4761 4770 0
-8399 4761 4771 0
-8399 4761 4773 0
-8399 4762 0
-8399 4762 4770 0
-8399 4762 4771 0
-8399 4762 4773 0
8399 -4762 -4770 -4775 0
8399 -4761 -4771 -4775 0
8399 -4761 -4770 -4776 0
c ((1<=(aux1121 + aux1124 + aux1125))=tv=SATLiteral(8400))
-8400 -4761 -4770 -4775 0
8400 4775 0
8400 4770 0
8400 4771 0
8400 4773 0
8400 4761 0
8400 4761 4770 0
8400 4761 4771 0
8400 4761 4773 0
8400 4762 0
8400 4762 4770 0
8400 4762 4771 0
8400 4762 4773 0
c (((aux1127 + aux1130 + aux1131)<=1)=tv=SATLiteral(8401))
-8401 4800 0
-8401 4794 4799 0
-8401 4795 0
-8401 4797 0
-8401 4785 4799 0
-8401 4785 4794 0
-8401 4785 4795 0
-8401 4785 4797 0
-8401 4786 0
-8401 4786 4794 0
-8401 4786 4795 0
-8401 4786 4797 0
8401 -4786 -4794 -4799 0
8401 -4785 -4795 -4799 0
8401 -4785 -4794 -4800 0
c ((1<=(aux1127 + aux1130 + aux1131))=tv=SATLiteral(8402))
-8402 -4785 -4794 -4799 0
8402 4799 0
8402 4794 0
8402 4795 0
8402 4797 0
8402 4785 0
8402 4785 4794 0
8402 4785 4795 0
8402 4785 4797 0
8402 4786 0
8402 4786 4794 0
8402 4786 4795 0
8402 4786 4797 0
c (((aux1133 + aux1136 + aux1137)<=1)=tv=SATLiteral(8403))
-8403 4824 0
-8403 4818 4823 0
-8403 4819 0
-8403 4821 0
-8403 4809 4823 0
-8403 4809 4818 0
-8403 4809 4819 0
-8403 4809 4821 0
-8403 4810 0
-8403 4810 4818 0
-8403 4810 4819 0
-8403 4810 4821 0
8403 -4810 -4818 -4823 0
8403 -4809 -4819 -4823 0
8403 -4809 -4818 -4824 0
c ((1<=(aux1133 + aux1136 + aux1137))=tv=SATLiteral(8404))
-8404 -4809 -4818 -4823 0
8404 4823 0
8404 4818 0
8404 4819 0
8404 4821 0
8404 4809 0
8404 4809 4818 0
8404 4809 4819 0
8404 4809 4821 0
8404 4810 0
8404 4810 4818 0
8404 4810 4819 0
8404 4810 4821 0
c (((aux1139 + aux1142 + aux1143)<=1)=tv=SATLiteral(8405))
-8405 4848 0
-8405 4842 4847 0
-8405 4843 0
-8405 4845 0
-8405 4833 4847 0
-8405 4833 4842 0
-8405 4833 4843 0
-8405 4833 4845 0
-8405 4834 0
-8405 4834 4842 0
-8405 4834 4843 0
-8405 4834 4845 0
8405 -4834 -4842 -4847 0
8405 -4833 -4843 -4847 0
8405 -4833 -4842 -4848 0
c ((1<=(aux1139 + aux1142 + aux1143))=tv=SATLiteral(8406))
-8406 -4833 -4842 -4847 0
8406 4847 0
8406 4842 0
8406 4843 0
8406 4845 0
8406 4833 0
8406 4833 4842 0
8406 4833 4843 0
8406 4833 4845 0
8406 4834 0
8406 4834 4842 0
8406 4834 4843 0
8406 4834 4845 0
c (((aux1145 + aux1148 + aux1149)<=1)=tv=SATLiteral(8407))
-8407 4872 0
-8407 4866 4871 0
-8407 4867 0
-8407 4869 0
-8407 4857 4871 0
-8407 4857 4866 0
-8407 4857 4867 0
-8407 4857 4869 0
-8407 4858 0
-8407 4858 4866 0
-8407 4858 4867 0
-8407 4858 4869 0
8407 -4858 -4866 -4871 0
8407 -4857 -4867 -4871 0
8407 -4857 -4866 -4872 0
c ((1<=(aux1145 + aux1148 + aux1149))=tv=SATLiteral(8408))
-8408 -4857 -4866 -4871 0
8408 4871 0
8408 4866 0
8408 4867 0
8408 4869 0
8408 4857 0
8408 4857 4866 0
8408 4857 4867 0
8408 4857 4869 0
8408 4858 0
8408 4858 4866 0
8408 4858 4867 0
8408 4858 4869 0
c (((aux1151 + aux1154 + aux1155)<=1)=tv=SATLiteral(8409))
-8409 4896 0
-8409 4890 4895 0
-8409 4891 0
-8409 4893 0
-8409 4881 4895 0
-8409 4881 4890 0
-8409 4881 4891 0
-8409 4881 4893 0
-8409 4882 0
-8409 4882 4890 0
-8409 4882 4891 0
-8409 4882 4893 0
8409 -4882 -4890 -4895 0
8409 -4881 -4891 -4895 0
8409 -4881 -4890 -4896 0
c ((1<=(aux1151 + aux1154 + aux1155))=tv=SATLiteral(8410))
-8410 -4881 -4890 -4895 0
8410 4895 0
8410 4890 0
8410 4891 0
8410 4893 0
8410 4881 0
8410 4881 4890 0
8410 4881 4891 0
8410 4881 4893 0
8410 4882 0
8410 4882 4890 0
8410 4882 4891 0
8410 4882 4893 0
c (((aux1157 + aux1160 + aux1161)<=1)=tv=SATLiteral(8411))
-8411 4920 0
-8411 4914 4919 0
-8411 4915 0
-8411 4917 0
-8411 4905 4919 0
-8411 4905 4914 0
-8411 4905 4915 0
-8411 4905 4917 0
-8411 4906 0
-8411 4906 4914 0
-8411 4906 4915 0
-8411 4906 4917 0
8411 -4906 -4914 -4919 0
8411 -4905 -4915 -4919 0
8411 -4905 -4914 -4920 0
c ((1<=(aux1157 + aux1160 + aux1161))=tv=SATLiteral(8412))
-8412 -4905 -4914 -4919 0
8412 4919 0
8412 4914 0
8412 4915 0
8412 4917 0
8412 4905 0
8412 4905 4914 0
8412 4905 4915 0
8412 4905 4917 0
8412 4906 0
8412 4906 4914 0
8412 4906 4915 0
8412 4906 4917 0
c (((aux1163 + aux1166 + aux1167)<=1)=tv=SATLiteral(8413))
-8413 4944 0
-8413 4938 4943 0
-8413 4939 0
-8413 4941 0
-8413 4929 4943 0
-8413 4929 4938 0
-8413 4929 4939 0
-8413 4929 4941 0
-8413 4930 0
-8413 4930 4938 0
-8413 4930 4939 0
-8413 4930 4941 0
8413 -4930 -4938 -4943 0
8413 -4929 -4939 -4943 0
8413 -4929 -4938 -4944 0
c ((1<=(aux1163 + aux1166 + aux1167))=tv=SATLiteral(8414))
-8414 -4929 -4938 -4943 0
8414 4943 0
8414 4938 0
8414 4939 0
8414 4941 0
8414 4929 0
8414 4929 4938 0
8414 4929 4939 0
8414 4929 4941 0
8414 4930 0
8414 4930 4938 0
8414 4930 4939 0
8414 4930 4941 0
c (((aux1169 + aux1172 + aux1173)<=1)=tv=SATLiteral(8415))
-8415 4968 0
-8415 4962 4967 0
-8415 4963 0
-8415 4965 0
-8415 4953 4967 0
-8415 4953 4962 0
-8415 4953 4963 0
-8415 4953 4965 0
-8415 4954 0
-8415 4954 4962 0
-8415 4954 4963 0
-8415 4954 4965 0
8415 -4954 -4962 -4967 0
8415 -4953 -4963 -4967 0
8415 -4953 -4962 -4968 0
c ((1<=(aux1169 + aux1172 + aux1173))=tv=SATLiteral(8416))
-8416 -4953 -4962 -4967 0
8416 4967 0
8416 4962 0
8416 4963 0
8416 4965 0
8416 4953 0
8416 4953 4962 0
8416 4953 4963 0
8416 4953 4965 0
8416 4954 0
8416 4954 4962 0
8416 4954 4963 0
8416 4954 4965 0
c (((aux1175 + aux1178 + aux1179)<=1)=tv=SATLiteral(8417))
-8417 4992 0
-8417 4986 4991 0
-8417 4987 0
-8417 4989 0
-8417 4977 4991 0
-8417 4977 4986 0
-8417 4977 4987 0
-8417 4977 4989 0
-8417 4978 0
-8417 4978 4986 0
-8417 4978 4987 0
-8417 4978 4989 0
8417 -4978 -4986 -4991 0
8417 -4977 -4987 -4991 0
8417 -4977 -4986 -4992 0
c ((1<=(aux1175 + aux1178 + aux1179))=tv=SATLiteral(8418))
-8418 -4977 -4986 -4991 0
8418 4991 0
8418 4986 0
8418 4987 0
8418 4989 0
8418 4977 0
8418 4977 4986 0
8418 4977 4987 0
8418 4977 4989 0
8418 4978 0
8418 4978 4986 0
8418 4978 4987 0
8418 4978 4989 0
c (((aux1181 + aux1184 + aux1185)<=1)=tv=SATLiteral(8419))
-8419 5016 0
-8419 5010 5015 0
-8419 5011 0
-8419 5013 0
-8419 5001 5015 0
-8419 5001 5010 0
-8419 5001 5011 0
-8419 5001 5013 0
-8419 5002 0
-8419 5002 5010 0
-8419 5002 5011 0
-8419 5002 5013 0
8419 -5002 -5010 -5015 0
8419 -5001 -5011 -5015 0
8419 -5001 -5010 -5016 0
c ((1<=(aux1181 + aux1184 + aux1185))=tv=SATLiteral(8420))
-8420 -5001 -5010 -5015 0
8420 5015 0
8420 5010 0
8420 5011 0
8420 5013 0
8420 5001 0
8420 5001 5010 0
8420 5001 5011 0
8420 5001 5013 0
8420 5002 0
8420 5002 5010 0
8420 5002 5011 0
8420 5002 5013 0
c (((aux1187 + aux1190 + aux1191)<=1)=tv=SATLiteral(8421))
-8421 5040 0
-8421 5034 5039 0
-8421 5035 0
-8421 5037 0
-8421 5025 5039 0
-8421 5025 5034 0
-8421 5025 5035 0
-8421 5025 5037 0
-8421 5026 0
-8421 5026 5034 0
-8421 5026 5035 0
-8421 5026 5037 0
8421 -5026 -5034 -5039 0
8421 -5025 -5035 -5039 0
8421 -5025 -5034 -5040 0
c ((1<=(aux1187 + aux1190 + aux1191))=tv=SATLiteral(8422))
-8422 -5025 -5034 -5039 0
8422 5039 0
8422 5034 0
8422 5035 0
8422 5037 0
8422 5025 0
8422 5025 5034 0
8422 5025 5035 0
8422 5025 5037 0
8422 5026 0
8422 5026 5034 0
8422 5026 5035 0
8422 5026 5037 0
c (((aux1193 + aux1196 + aux1197)<=1)=tv=SATLiteral(8423))
-8423 5064 0
-8423 5058 5063 0
-8423 5059 0
-8423 5061 0
-8423 5049 5063 0
-8423 5049 5058 0
-8423 5049 5059 0
-8423 5049 5061 0
-8423 5050 0
-8423 5050 5058 0
-8423 5050 5059 0
-8423 5050 5061 0
8423 -5050 -5058 -5063 0
8423 -5049 -5059 -5063 0
8423 -5049 -5058 -5064 0
c ((1<=(aux1193 + aux1196 + aux1197))=tv=SATLiteral(8424))
-8424 -5049 -5058 -5063 0
8424 5063 0
8424 5058 0
8424 5059 0
8424 5061 0
8424 5049 0
8424 5049 5058 0
8424 5049 5059 0
8424 5049 5061 0
8424 5050 0
8424 5050 5058 0
8424 5050 5059 0
8424 5050 5061 0
c (((aux1199 + aux1202 + aux1203)<=1)=tv=SATLiteral(8425))
-8425 5088 0
-8425 5082 5087 0
-8425 5083 0
-8425 5085 0
-8425 5073 5087 0
-8425 5073 5082 0
-8425 5073 5083 0
-8425 5073 5085 0
-8425 5074 0
-8425 5074 5082 0
-8425 5074 5083 0
-8425 5074 5085 0
8425 -5074 -5082 -5087 0
8425 -5073 -5083 -5087 0
8425 -5073 -5082 -5088 0
c ((1<=(aux1199 + aux1202 + aux1203))=tv=SATLiteral(8426))
-8426 -5073 -5082 -5087 0
8426 5087 0
8426 5082 0
8426 5083 0
8426 5085 0
8426 5073 0
8426 5073 5082 0
8426 5073 5083 0
8426 5073 5085 0
8426 5074 0
8426 5074 5082 0
8426 5074 5083 0
8426 5074 5085 0
c (((aux1205 + aux1208 + aux1209)<=1)=tv=SATLiteral(8427))
-8427 5112 0
-8427 5106 5111 0
-8427 5107 0
-8427 5109 0
-8427 5097 5111 0
-8427 5097 5106 0
-8427 5097 5107 0
-8427 5097 5109 0
-8427 5098 0
-8427 5098 5106 0
-8427 5098 5107 0
-8427 5098 5109 0
8427 -5098 -5106 -5111 0
8427 -5097 -5107 -5111 0
8427 -5097 -5106 -5112 0
c ((1<=(aux1205 + aux1208 + aux1209))=tv=SATLiteral(8428))
-8428 -5097 -5106 -5111 0
8428 5111 0
8428 5106 0
8428 5107 0
8428 5109 0
8428 5097 0
8428 5097 5106 0
8428 5097 5107 0
8428 5097 5109 0
8428 5098 0
8428 5098 5106 0
8428 5098 5107 0
8428 5098 5109 0
c (((aux1211 + aux1214 + aux1215)<=1)=tv=SATLiteral(8429))
-8429 5136 0
-8429 5130 5135 0
-8429 5131 0
-8429 5133 0
-8429 5121 5135 0
-8429 5121 5130 0
-8429 5121 5131 0
-8429 5121 5133 0
-8429 5122 0
-8429 5122 5130 0
-8429 5122 5131 0
-8429 5122 5133 0
8429 -5122 -5130 -5135 0
8429 -5121 -5131 -5135 0
8429 -5121 -5130 -5136 0
c ((1<=(aux1211 + aux1214 + aux1215))=tv=SATLiteral(8430))
-8430 -5121 -5130 -5135 0
8430 5135 0
8430 5130 0
8430 5131 0
8430 5133 0
8430 5121 0
8430 5121 5130 0
8430 5121 5131 0
8430 5121 5133 0
8430 5122 0
8430 5122 5130 0
8430 5122 5131 0
8430 5122 5133 0
c (((aux1217 + aux1220 + aux1221)<=1)=tv=SATLiteral(8431))
-8431 5160 0
-8431 5154 5159 0
-8431 5155 0
-8431 5157 0
-8431 5145 5159 0
-8431 5145 5154 0
-8431 5145 5155 0
-8431 5145 5157 0
-8431 5146 0
-8431 5146 5154 0
-8431 5146 5155 0
-8431 5146 5157 0
8431 -5146 -5154 -5159 0
8431 -5145 -5155 -5159 0
8431 -5145 -5154 -5160 0
c ((1<=(aux1217 + aux1220 + aux1221))=tv=SATLiteral(8432))
-8432 -5145 -5154 -5159 0
8432 5159 0
8432 5154 0
8432 5155 0
8432 5157 0
8432 5145 0
8432 5145 5154 0
8432 5145 5155 0
8432 5145 5157 0
8432 5146 0
8432 5146 5154 0
8432 5146 5155 0
8432 5146 5157 0
c (((aux1223 + aux1226 + aux1227)<=1)=tv=SATLiteral(8433))
-8433 5184 0
-8433 5178 5183 0
-8433 5179 0
-8433 5181 0
-8433 5169 5183 0
-8433 5169 5178 0
-8433 5169 5179 0
-8433 5169 5181 0
-8433 5170 0
-8433 5170 5178 0
-8433 5170 5179 0
-8433 5170 5181 0
8433 -5170 -5178 -5183 0
8433 -5169 -5179 -5183 0
8433 -5169 -5178 -5184 0
c ((1<=(aux1223 + aux1226 + aux1227))=tv=SATLiteral(8434))
-8434 -5169 -5178 -5183 0
8434 5183 0
8434 5178 0
8434 5179 0
8434 5181 0
8434 5169 0
8434 5169 5178 0
8434 5169 5179 0
8434 5169 5181 0
8434 5170 0
8434 5170 5178 0
8434 5170 5179 0
8434 5170 5181 0
c (((aux1229 + aux1232 + aux1233)<=1)=tv=SATLiteral(8435))
-8435 5208 0
-8435 5202 5207 0
-8435 5203 0
-8435 5205 0
-8435 5193 5207 0
-8435 5193 5202 0
-8435 5193 5203 0
-8435 5193 5205 0
-8435 5194 0
-8435 5194 5202 0
-8435 5194 5203 0
-8435 5194 5205 0
8435 -5194 -5202 -5207 0
8435 -5193 -5203 -5207 0
8435 -5193 -5202 -5208 0
c ((1<=(aux1229 + aux1232 + aux1233))=tv=SATLiteral(8436))
-8436 -5193 -5202 -5207 0
8436 5207 0
8436 5202 0
8436 5203 0
8436 5205 0
8436 5193 0
8436 5193 5202 0
8436 5193 5203 0
8436 5193 5205 0
8436 5194 0
8436 5194 5202 0
8436 5194 5203 0
8436 5194 5205 0
c (((aux1235 + aux1238 + aux1239)<=1)=tv=SATLiteral(8437))
-8437 5232 0
-8437 5226 5231 0
-8437 5227 0
-8437 5229 0
-8437 5217 5231 0
-8437 5217 5226 0
-8437 5217 5227 0
-8437 5217 5229 0
-8437 5218 0
-8437 5218 5226 0
-8437 5218 5227 0
-8437 5218 5229 0
8437 -5218 -5226 -5231 0
8437 -5217 -5227 -5231 0
8437 -5217 -5226 -5232 0
c ((1<=(aux1235 + aux1238 + aux1239))=tv=SATLiteral(8438))
-8438 -5217 -5226 -5231 0
8438 5231 0
8438 5226 0
8438 5227 0
8438 5229 0
8438 5217 0
8438 5217 5226 0
8438 5217 5227 0
8438 5217 5229 0
8438 5218 0
8438 5218 5226 0
8438 5218 5227 0
8438 5218 5229 0
c (((aux1241 + aux1244 + aux1245)<=1)=tv=SATLiteral(8439))
-8439 5256 0
-8439 5250 5255 0
-8439 5251 0
-8439 5253 0
-8439 5241 5255 0
-8439 5241 5250 0
-8439 5241 5251 0
-8439 5241 5253 0
-8439 5242 0
-8439 5242 5250 0
-8439 5242 5251 0
-8439 5242 5253 0
8439 -5242 -5250 -5255 0
8439 -5241 -5251 -5255 0
8439 -5241 -5250 -5256 0
c ((1<=(aux1241 + aux1244 + aux1245))=tv=SATLiteral(8440))
-8440 -5241 -5250 -5255 0
8440 5255 0
8440 5250 0
8440 5251 0
8440 5253 0
8440 5241 0
8440 5241 5250 0
8440 5241 5251 0
8440 5241 5253 0
8440 5242 0
8440 5242 5250 0
8440 5242 5251 0
8440 5242 5253 0
c (((aux1247 + aux1250 + aux1251)<=1)=tv=SATLiteral(8441))
-8441 5280 0
-8441 5274 5279 0
-8441 5275 0
-8441 5277 0
-8441 5265 5279 0
-8441 5265 5274 0
-8441 5265 5275 0
-8441 5265 5277 0
-8441 5266 0
-8441 5266 5274 0
-8441 5266 5275 0
-8441 5266 5277 0
8441 -5266 -5274 -5279 0
8441 -5265 -5275 -5279 0
8441 -5265 -5274 -5280 0
c ((1<=(aux1247 + aux1250 + aux1251))=tv=SATLiteral(8442))
-8442 -5265 -5274 -5279 0
8442 5279 0
8442 5274 0
8442 5275 0
8442 5277 0
8442 5265 0
8442 5265 5274 0
8442 5265 5275 0
8442 5265 5277 0
8442 5266 0
8442 5266 5274 0
8442 5266 5275 0
8442 5266 5277 0
c (((aux1253 + aux1256 + aux1257)<=1)=tv=SATLiteral(8443))
-8443 5304 0
-8443 5298 5303 0
-8443 5299 0
-8443 5301 0
-8443 5289 5303 0
-8443 5289 5298 0
-8443 5289 5299 0
-8443 5289 5301 0
-8443 5290 0
-8443 5290 5298 0
-8443 5290 5299 0
-8443 5290 5301 0
8443 -5290 -5298 -5303 0
8443 -5289 -5299 -5303 0
8443 -5289 -5298 -5304 0
c ((1<=(aux1253 + aux1256 + aux1257))=tv=SATLiteral(8444))
-8444 -5289 -5298 -5303 0
8444 5303 0
8444 5298 0
8444 5299 0
8444 5301 0
8444 5289 0
8444 5289 5298 0
8444 5289 5299 0
8444 5289 5301 0
8444 5290 0
8444 5290 5298 0
8444 5290 5299 0
8444 5290 5301 0
c (((aux1259 + aux1262 + aux1263)<=1)=tv=SATLiteral(8445))
-8445 5328 0
-8445 5322 5327 0
-8445 5323 0
-8445 5325 0
-8445 5313 5327 0
-8445 5313 5322 0
-8445 5313 5323 0
-8445 5313 5325 0
-8445 5314 0
-8445 5314 5322 0
-8445 5314 5323 0
-8445 5314 5325 0
8445 -5314 -5322 -5327 0
8445 -5313 -5323 -5327 0
8445 -5313 -5322 -5328 0
c ((1<=(aux1259 + aux1262 + aux1263))=tv=SATLiteral(8446))
-8446 -5313 -5322 -5327 0
8446 5327 0
8446 5322 0
8446 5323 0
8446 5325 0
8446 5313 0
8446 5313 5322 0
8446 5313 5323 0
8446 5313 5325 0
8446 5314 0
8446 5314 5322 0
8446 5314 5323 0
8446 5314 5325 0
c (((aux1265 + aux1268 + aux1269)<=1)=tv=SATLiteral(8447))
-8447 5352 0
-8447 5346 5351 0
-8447 5347 0
-8447 5349 0
-8447 5337 5351 0
-8447 5337 5346 0
-8447 5337 5347 0
-8447 5337 5349 0
-8447 5338 0
-8447 5338 5346 0
-8447 5338 5347 0
-8447 5338 5349 0
8447 -5338 -5346 -5351 0
8447 -5337 -5347 -5351 0
8447 -5337 -5346 -5352 0
c ((1<=(aux1265 + aux1268 + aux1269))=tv=SATLiteral(8448))
-8448 -5337 -5346 -5351 0
8448 5351 0
8448 5346 0
8448 5347 0
8448 5349 0
8448 5337 0
8448 5337 5346 0
8448 5337 5347 0
8448 5337 5349 0
8448 5338 0
8448 5338 5346 0
8448 5338 5347 0
8448 5338 5349 0
c (((aux1271 + aux1274 + aux1275)<=1)=tv=SATLiteral(8449))
-8449 5376 0
-8449 5370 5375 0
-8449 5371 0
-8449 5373 0
-8449 5361 5375 0
-8449 5361 5370 0
-8449 5361 5371 0
-8449 5361 5373 0
-8449 5362 0
-8449 5362 5370 0
-8449 5362 5371 0
-8449 5362 5373 0
8449 -5362 -5370 -5375 0
8449 -5361 -5371 -5375 0
8449 -5361 -5370 -5376 0
c ((1<=(aux1271 + aux1274 + aux1275))=tv=SATLiteral(8450))
-8450 -5361 -5370 -5375 0
8450 5375 0
8450 5370 0
8450 5371 0
8450 5373 0
8450 5361 0
8450 5361 5370 0
8450 5361 5371 0
8450 5361 5373 0
8450 5362 0
8450 5362 5370 0
8450 5362 5371 0
8450 5362 5373 0
c (((aux1277 + aux1280 + aux1281)<=1)=tv=SATLiteral(8451))
-8451 5400 0
-8451 5394 5399 0
-8451 5395 0
-8451 5397 0
-8451 5385 5399 0
-8451 5385 5394 0
-8451 5385 5395 0
-8451 5385 5397 0
-8451 5386 0
-8451 5386 5394 0
-8451 5386 5395 0
-8451 5386 5397 0
8451 -5386 -5394 -5399 0
8451 -5385 -5395 -5399 0
8451 -5385 -5394 -5400 0
c ((1<=(aux1277 + aux1280 + aux1281))=tv=SATLiteral(8452))
-8452 -5385 -5394 -5399 0
8452 5399 0
8452 5394 0
8452 5395 0
8452 5397 0
8452 5385 0
8452 5385 5394 0
8452 5385 5395 0
8452 5385 5397 0
8452 5386 0
8452 5386 5394 0
8452 5386 5395 0
8452 5386 5397 0
c (((aux1283 + aux1286 + aux1287)<=1)=tv=SATLiteral(8453))
-8453 5424 0
-8453 5418 5423 0
-8453 5419 0
-8453 5421 0
-8453 5409 5423 0
-8453 5409 5418 0
-8453 5409 5419 0
-8453 5409 5421 0
-8453 5410 0
-8453 5410 5418 0
-8453 5410 5419 0
-8453 5410 5421 0
8453 -5410 -5418 -5423 0
8453 -5409 -5419 -5423 0
8453 -5409 -5418 -5424 0
c ((1<=(aux1283 + aux1286 + aux1287))=tv=SATLiteral(8454))
-8454 -5409 -5418 -5423 0
8454 5423 0
8454 5418 0
8454 5419 0
8454 5421 0
8454 5409 0
8454 5409 5418 0
8454 5409 5419 0
8454 5409 5421 0
8454 5410 0
8454 5410 5418 0
8454 5410 5419 0
8454 5410 5421 0
c (((aux1289 + aux1292 + aux1293)<=1)=tv=SATLiteral(8455))
-8455 5448 0
-8455 5442 5447 0
-8455 5443 0
-8455 5445 0
-8455 5433 5447 0
-8455 5433 5442 0
-8455 5433 5443 0
-8455 5433 5445 0
-8455 5434 0
-8455 5434 5442 0
-8455 5434 5443 0
-8455 5434 5445 0
8455 -5434 -5442 -5447 0
8455 -5433 -5443 -5447 0
8455 -5433 -5442 -5448 0
c ((1<=(aux1289 + aux1292 + aux1293))=tv=SATLiteral(8456))
-8456 -5433 -5442 -5447 0
8456 5447 0
8456 5442 0
8456 5443 0
8456 5445 0
8456 5433 0
8456 5433 5442 0
8456 5433 5443 0
8456 5433 5445 0
8456 5434 0
8456 5434 5442 0
8456 5434 5443 0
8456 5434 5445 0
c (((aux1295 + aux1298 + aux1299)<=1)=tv=SATLiteral(8457))
-8457 5472 0
-8457 5466 5471 0
-8457 5467 0
-8457 5469 0
-8457 5457 5471 0
-8457 5457 5466 0
-8457 5457 5467 0
-8457 5457 5469 0
-8457 5458 0
-8457 5458 5466 0
-8457 5458 5467 0
-8457 5458 5469 0
8457 -5458 -5466 -5471 0
8457 -5457 -5467 -5471 0
8457 -5457 -5466 -5472 0
c ((1<=(aux1295 + aux1298 + aux1299))=tv=SATLiteral(8458))
-8458 -5457 -5466 -5471 0
8458 5471 0
8458 5466 0
8458 5467 0
8458 5469 0
8458 5457 0
8458 5457 5466 0
8458 5457 5467 0
8458 5457 5469 0
8458 5458 0
8458 5458 5466 0
8458 5458 5467 0
8458 5458 5469 0
c (((aux1301 + aux1304 + aux1305)<=1)=tv=SATLiteral(8459))
-8459 5496 0
-8459 5490 5495 0
-8459 5491 0
-8459 5493 0
-8459 5481 5495 0
-8459 5481 5490 0
-8459 5481 5491 0
-8459 5481 5493 0
-8459 5482 0
-8459 5482 5490 0
-8459 5482 5491 0
-8459 5482 5493 0
8459 -5482 -5490 -5495 0
8459 -5481 -5491 -5495 0
8459 -5481 -5490 -5496 0
c ((1<=(aux1301 + aux1304 + aux1305))=tv=SATLiteral(8460))
-8460 -5481 -5490 -5495 0
8460 5495 0
8460 5490 0
8460 5491 0
8460 5493 0
8460 5481 0
8460 5481 5490 0
8460 5481 5491 0
8460 5481 5493 0
8460 5482 0
8460 5482 5490 0
8460 5482 5491 0
8460 5482 5493 0
c (((aux1307 + aux1310 + aux1311)<=1)=tv=SATLiteral(8461))
-8461 5520 0
-8461 5514 5519 0
-8461 5515 0
-8461 5517 0
-8461 5505 5519 0
-8461 5505 5514 0
-8461 5505 5515 0
-8461 5505 5517 0
-8461 5506 0
-8461 5506 5514 0
-8461 5506 5515 0
-8461 5506 5517 0
8461 -5506 -5514 -5519 0
8461 -5505 -5515 -5519 0
8461 -5505 -5514 -5520 0
c ((1<=(aux1307 + aux1310 + aux1311))=tv=SATLiteral(8462))
-8462 -5505 -5514 -5519 0
8462 5519 0
8462 5514 0
8462 5515 0
8462 5517 0
8462 5505 0
8462 5505 5514 0
8462 5505 5515 0
8462 5505 5517 0
8462 5506 0
8462 5506 5514 0
8462 5506 5515 0
8462 5506 5517 0
c (((aux1313 + aux1316 + aux1317)<=1)=tv=SATLiteral(8463))
-8463 5544 0
-8463 5538 5543 0
-8463 5539 0
-8463 5541 0
-8463 5529 5543 0
-8463 5529 5538 0
-8463 5529 5539 0
-8463 5529 5541 0
-8463 5530 0
-8463 5530 5538 0
-8463 5530 5539 0
-8463 5530 5541 0
8463 -5530 -5538 -5543 0
8463 -5529 -5539 -5543 0
8463 -5529 -5538 -5544 0
c ((1<=(aux1313 + aux1316 + aux1317))=tv=SATLiteral(8464))
-8464 -5529 -5538 -5543 0
8464 5543 0
8464 5538 0
8464 5539 0
8464 5541 0
8464 5529 0
8464 5529 5538 0
8464 5529 5539 0
8464 5529 5541 0
8464 5530 0
8464 5530 5538 0
8464 5530 5539 0
8464 5530 5541 0
c (((aux1319 + aux1322 + aux1323)<=1)=tv=SATLiteral(8465))
-8465 5568 0
-8465 5562 5567 0
-8465 5563 0
-8465 5565 0
-8465 5553 5567 0
-8465 5553 5562 0
-8465 5553 5563 0
-8465 5553 5565 0
-8465 5554 0
-8465 5554 5562 0
-8465 5554 5563 0
-8465 5554 5565 0
8465 -5554 -5562 -5567 0
8465 -5553 -5563 -5567 0
8465 -5553 -5562 -5568 0
c ((1<=(aux1319 + aux1322 + aux1323))=tv=SATLiteral(8466))
-8466 -5553 -5562 -5567 0
8466 5567 0
8466 5562 0
8466 5563 0
8466 5565 0
8466 5553 0
8466 5553 5562 0
8466 5553 5563 0
8466 5553 5565 0
8466 5554 0
8466 5554 5562 0
8466 5554 5563 0
8466 5554 5565 0
c (((aux1325 + aux1328 + aux1329)<=1)=tv=SATLiteral(8467))
-8467 5592 0
-8467 5586 5591 0
-8467 5587 0
-8467 5589 0
-8467 5577 5591 0
-8467 5577 5586 0
-8467 5577 5587 0
-8467 5577 5589 0
-8467 5578 0
-8467 5578 5586 0
-8467 5578 5587 0
-8467 5578 5589 0
8467 -5578 -5586 -5591 0
8467 -5577 -5587 -5591 0
8467 -5577 -5586 -5592 0
c ((1<=(aux1325 + aux1328 + aux1329))=tv=SATLiteral(8468))
-8468 -5577 -5586 -5591 0
8468 5591 0
8468 5586 0
8468 5587 0
8468 5589 0
8468 5577 0
8468 5577 5586 0
8468 5577 5587 0
8468 5577 5589 0
8468 5578 0
8468 5578 5586 0
8468 5578 5587 0
8468 5578 5589 0
c (((aux1331 + aux1334 + aux1335)<=1)=tv=SATLiteral(8469))
-8469 5616 0
-8469 5610 5615 0
-8469 5611 0
-8469 5613 0
-8469 5601 5615 0
-8469 5601 5610 0
-8469 5601 5611 0
-8469 5601 5613 0
-8469 5602 0
-8469 5602 5610 0
-8469 5602 5611 0
-8469 5602 5613 0
8469 -5602 -5610 -5615 0
8469 -5601 -5611 -5615 0
8469 -5601 -5610 -5616 0
c ((1<=(aux1331 + aux1334 + aux1335))=tv=SATLiteral(8470))
-8470 -5601 -5610 -5615 0
8470 5615 0
8470 5610 0
8470 5611 0
8470 5613 0
8470 5601 0
8470 5601 5610 0
8470 5601 5611 0
8470 5601 5613 0
8470 5602 0
8470 5602 5610 0
8470 5602 5611 0
8470 5602 5613 0
c (((aux1337 + aux1340 + aux1341)<=1)=tv=SATLiteral(8471))
-8471 5640 0
-8471 5634 5639 0
-8471 5635 0
-8471 5637 0
-8471 5625 5639 0
-8471 5625 5634 0
-8471 5625 5635 0
-8471 5625 5637 0
-8471 5626 0
-8471 5626 5634 0
-8471 5626 5635 0
-8471 5626 5637 0
8471 -5626 -5634 -5639 0
8471 -5625 -5635 -5639 0
8471 -5625 -5634 -5640 0
c ((1<=(aux1337 + aux1340 + aux1341))=tv=SATLiteral(8472))
-8472 -5625 -5634 -5639 0
8472 5639 0
8472 5634 0
8472 5635 0
8472 5637 0
8472 5625 0
8472 5625 5634 0
8472 5625 5635 0
8472 5625 5637 0
8472 5626 0
8472 5626 5634 0
8472 5626 5635 0
8472 5626 5637 0
c (((aux1343 + aux1346 + aux1347)<=1)=tv=SATLiteral(8473))
-8473 5664 0
-8473 5658 5663 0
-8473 5659 0
-8473 5661 0
-8473 5649 5663 0
-8473 5649 5658 0
-8473 5649 5659 0
-8473 5649 5661 0
-8473 5650 0
-8473 5650 5658 0
-8473 5650 5659 0
-8473 5650 5661 0
8473 -5650 -5658 -5663 0
8473 -5649 -5659 -5663 0
8473 -5649 -5658 -5664 0
c ((1<=(aux1343 + aux1346 + aux1347))=tv=SATLiteral(8474))
-8474 -5649 -5658 -5663 0
8474 5663 0
8474 5658 0
8474 5659 0
8474 5661 0
8474 5649 0
8474 5649 5658 0
8474 5649 5659 0
8474 5649 5661 0
8474 5650 0
8474 5650 5658 0
8474 5650 5659 0
8474 5650 5661 0
c (((aux1349 + aux1352 + aux1353)<=1)=tv=SATLiteral(8475))
-8475 5688 0
-8475 5682 5687 0
-8475 5683 0
-8475 5685 0
-8475 5673 5687 0
-8475 5673 5682 0
-8475 5673 5683 0
-8475 5673 5685 0
-8475 5674 0
-8475 5674 5682 0
-8475 5674 5683 0
-8475 5674 5685 0
8475 -5674 -5682 -5687 0
8475 -5673 -5683 -5687 0
8475 -5673 -5682 -5688 0
c ((1<=(aux1349 + aux1352 + aux1353))=tv=SATLiteral(8476))
-8476 -5673 -5682 -5687 0
8476 5687 0
8476 5682 0
8476 5683 0
8476 5685 0
8476 5673 0
8476 5673 5682 0
8476 5673 5683 0
8476 5673 5685 0
8476 5674 0
8476 5674 5682 0
8476 5674 5683 0
8476 5674 5685 0
c (((aux1355 + aux1358 + aux1359)<=1)=tv=SATLiteral(8477))
-8477 5712 0
-8477 5706 5711 0
-8477 5707 0
-8477 5709 0
-8477 5697 5711 0
-8477 5697 5706 0
-8477 5697 5707 0
-8477 5697 5709 0
-8477 5698 0
-8477 5698 5706 0
-8477 5698 5707 0
-8477 5698 5709 0
8477 -5698 -5706 -5711 0
8477 -5697 -5707 -5711 0
8477 -5697 -5706 -5712 0
c ((1<=(aux1355 + aux1358 + aux1359))=tv=SATLiteral(8478))
-8478 -5697 -5706 -5711 0
8478 5711 0
8478 5706 0
8478 5707 0
8478 5709 0
8478 5697 0
8478 5697 5706 0
8478 5697 5707 0
8478 5697 5709 0
8478 5698 0
8478 5698 5706 0
8478 5698 5707 0
8478 5698 5709 0
c (((aux1361 + aux1364 + aux1365)<=1)=tv=SATLiteral(8479))
-8479 5736 0
-8479 5730 5735 0
-8479 5731 0
-8479 5733 0
-8479 5721 5735 0
-8479 5721 5730 0
-8479 5721 5731 0
-8479 5721 5733 0
-8479 5722 0
-8479 5722 5730 0
-8479 5722 5731 0
-8479 5722 5733 0
8479 -5722 -5730 -5735 0
8479 -5721 -5731 -5735 0
8479 -5721 -5730 -5736 0
c ((1<=(aux1361 + aux1364 + aux1365))=tv=SATLiteral(8480))
-8480 -5721 -5730 -5735 0
8480 5735 0
8480 5730 0
8480 5731 0
8480 5733 0
8480 5721 0
8480 5721 5730 0
8480 5721 5731 0
8480 5721 5733 0
8480 5722 0
8480 5722 5730 0
8480 5722 5731 0
8480 5722 5733 0
c (((aux1367 + aux1370 + aux1371)<=1)=tv=SATLiteral(8481))
-8481 5760 0
-8481 5754 5759 0
-8481 5755 0
-8481 5757 0
-8481 5745 5759 0
-8481 5745 5754 0
-8481 5745 5755 0
-8481 5745 5757 0
-8481 5746 0
-8481 5746 5754 0
-8481 5746 5755 0
-8481 5746 5757 0
8481 -5746 -5754 -5759 0
8481 -5745 -5755 -5759 0
8481 -5745 -5754 -5760 0
c ((1<=(aux1367 + aux1370 + aux1371))=tv=SATLiteral(8482))
-8482 -5745 -5754 -5759 0
8482 5759 0
8482 5754 0
8482 5755 0
8482 5757 0
8482 5745 0
8482 5745 5754 0
8482 5745 5755 0
8482 5745 5757 0
8482 5746 0
8482 5746 5754 0
8482 5746 5755 0
8482 5746 5757 0
c (((aux1373 + aux1376 + aux1377)<=1)=tv=SATLiteral(8483))
-8483 5784 0
-8483 5778 5783 0
-8483 5779 0
-8483 5781 0
-8483 5769 5783 0
-8483 5769 5778 0
-8483 5769 5779 0
-8483 5769 5781 0
-8483 5770 0
-8483 5770 5778 0
-8483 5770 5779 0
-8483 5770 5781 0
8483 -5770 -5778 -5783 0
8483 -5769 -5779 -5783 0
8483 -5769 -5778 -5784 0
c ((1<=(aux1373 + aux1376 + aux1377))=tv=SATLiteral(8484))
-8484 -5769 -5778 -5783 0
8484 5783 0
8484 5778 0
8484 5779 0
8484 5781 0
8484 5769 0
8484 5769 5778 0
8484 5769 5779 0
8484 5769 5781 0
8484 5770 0
8484 5770 5778 0
8484 5770 5779 0
8484 5770 5781 0
c (((aux1379 + aux1382 + aux1383)<=1)=tv=SATLiteral(8485))
-8485 5808 0
-8485 5802 5807 0
-8485 5803 0
-8485 5805 0
-8485 5793 5807 0
-8485 5793 5802 0
-8485 5793 5803 0
-8485 5793 5805 0
-8485 5794 0
-8485 5794 5802 0
-8485 5794 5803 0
-8485 5794 5805 0
8485 -5794 -5802 -5807 0
8485 -5793 -5803 -5807 0
8485 -5793 -5802 -5808 0
c ((1<=(aux1379 + aux1382 + aux1383))=tv=SATLiteral(8486))
-8486 -5793 -5802 -5807 0
8486 5807 0
8486 5802 0
8486 5803 0
8486 5805 0
8486 5793 0
8486 5793 5802 0
8486 5793 5803 0
8486 5793 5805 0
8486 5794 0
8486 5794 5802 0
8486 5794 5803 0
8486 5794 5805 0
c (((aux1385 + aux1388 + aux1389)<=1)=tv=SATLiteral(8487))
-8487 5832 0
-8487 5826 5831 0
-8487 5827 0
-8487 5829 0
-8487 5817 5831 0
-8487 5817 5826 0
-8487 5817 5827 0
-8487 5817 5829 0
-8487 5818 0
-8487 5818 5826 0
-8487 5818 5827 0
-8487 5818 5829 0
8487 -5818 -5826 -5831 0
8487 -5817 -5827 -5831 0
8487 -5817 -5826 -5832 0
c ((1<=(aux1385 + aux1388 + aux1389))=tv=SATLiteral(8488))
-8488 -5817 -5826 -5831 0
8488 5831 0
8488 5826 0
8488 5827 0
8488 5829 0
8488 5817 0
8488 5817 5826 0
8488 5817 5827 0
8488 5817 5829 0
8488 5818 0
8488 5818 5826 0
8488 5818 5827 0
8488 5818 5829 0
c (((aux1391 + aux1394 + aux1395)<=1)=tv=SATLiteral(8489))
-8489 5856 0
-8489 5850 5855 0
-8489 5851 0
-8489 5853 0
-8489 5841 5855 0
-8489 5841 5850 0
-8489 5841 5851 0
-8489 5841 5853 0
-8489 5842 0
-8489 5842 5850 0
-8489 5842 5851 0
-8489 5842 5853 0
8489 -5842 -5850 -5855 0
8489 -5841 -5851 -5855 0
8489 -5841 -5850 -5856 0
c ((1<=(aux1391 + aux1394 + aux1395))=tv=SATLiteral(8490))
-8490 -5841 -5850 -5855 0
8490 5855 0
8490 5850 0
8490 5851 0
8490 5853 0
8490 5841 0
8490 5841 5850 0
8490 5841 5851 0
8490 5841 5853 0
8490 5842 0
8490 5842 5850 0
8490 5842 5851 0
8490 5842 5853 0
c (((aux1397 + aux1400 + aux1401)<=1)=tv=SATLiteral(8491))
-8491 5880 0
-8491 5874 5879 0
-8491 5875 0
-8491 5877 0
-8491 5865 5879 0
-8491 5865 5874 0
-8491 5865 5875 0
-8491 5865 5877 0
-8491 5866 0
-8491 5866 5874 0
-8491 5866 5875 0
-8491 5866 5877 0
8491 -5866 -5874 -5879 0
8491 -5865 -5875 -5879 0
8491 -5865 -5874 -5880 0
c ((1<=(aux1397 + aux1400 + aux1401))=tv=SATLiteral(8492))
-8492 -5865 -5874 -5879 0
8492 5879 0
8492 5874 0
8492 5875 0
8492 5877 0
8492 5865 0
8492 5865 5874 0
8492 5865 5875 0
8492 5865 5877 0
8492 5866 0
8492 5866 5874 0
8492 5866 5875 0
8492 5866 5877 0
c (((aux1403 + aux1406 + aux1407)<=1)=tv=SATLiteral(8493))
-8493 5904 0
-8493 5898 5903 0
-8493 5899 0
-8493 5901 0
-8493 5889 5903 0
-8493 5889 5898 0
-8493 5889 5899 0
-8493 5889 5901 0
-8493 5890 0
-8493 5890 5898 0
-8493 5890 5899 0
-8493 5890 5901 0
8493 -5890 -5898 -5903 0
8493 -5889 -5899 -5903 0
8493 -5889 -5898 -5904 0
c ((1<=(aux1403 + aux1406 + aux1407))=tv=SATLiteral(8494))
-8494 -5889 -5898 -5903 0
8494 5903 0
8494 5898 0
8494 5899 0
8494 5901 0
8494 5889 0
8494 5889 5898 0
8494 5889 5899 0
8494 5889 5901 0
8494 5890 0
8494 5890 5898 0
8494 5890 5899 0
8494 5890 5901 0
c (((aux1409 + aux1412 + aux1413)<=1)=tv=SATLiteral(8495))
-8495 5928 0
-8495 5922 5927 0
-8495 5923 0
-8495 5925 0
-8495 5913 5927 0
-8495 5913 5922 0
-8495 5913 5923 0
-8495 5913 5925 0
-8495 5914 0
-8495 5914 5922 0
-8495 5914 5923 0
-8495 5914 5925 0
8495 -5914 -5922 -5927 0
8495 -5913 -5923 -5927 0
8495 -5913 -5922 -5928 0
c ((1<=(aux1409 + aux1412 + aux1413))=tv=SATLiteral(8496))
-8496 -5913 -5922 -5927 0
8496 5927 0
8496 5922 0
8496 5923 0
8496 5925 0
8496 5913 0
8496 5913 5922 0
8496 5913 5923 0
8496 5913 5925 0
8496 5914 0
8496 5914 5922 0
8496 5914 5923 0
8496 5914 5925 0
c (((aux1415 + aux1418 + aux1419)<=1)=tv=SATLiteral(8497))
-8497 5952 0
-8497 5946 5951 0
-8497 5947 0
-8497 5949 0
-8497 5937 5951 0
-8497 5937 5946 0
-8497 5937 5947 0
-8497 5937 5949 0
-8497 5938 0
-8497 5938 5946 0
-8497 5938 5947 0
-8497 5938 5949 0
8497 -5938 -5946 -5951 0
8497 -5937 -5947 -5951 0
8497 -5937 -5946 -5952 0
c ((1<=(aux1415 + aux1418 + aux1419))=tv=SATLiteral(8498))
-8498 -5937 -5946 -5951 0
8498 5951 0
8498 5946 0
8498 5947 0
8498 5949 0
8498 5937 0
8498 5937 5946 0
8498 5937 5947 0
8498 5937 5949 0
8498 5938 0
8498 5938 5946 0
8498 5938 5947 0
8498 5938 5949 0
c (((aux1421 + aux1424 + aux1425)<=1)=tv=SATLiteral(8499))
-8499 5976 0
-8499 5970 5975 0
-8499 5971 0
-8499 5973 0
-8499 5961 5975 0
-8499 5961 5970 0
-8499 5961 5971 0
-8499 5961 5973 0
-8499 5962 0
-8499 5962 5970 0
-8499 5962 5971 0
-8499 5962 5973 0
8499 -5962 -5970 -5975 0
8499 -5961 -5971 -5975 0
8499 -5961 -5970 -5976 0
c ((1<=(aux1421 + aux1424 + aux1425))=tv=SATLiteral(8500))
-8500 -5961 -5970 -5975 0
8500 5975 0
8500 5970 0
8500 5971 0
8500 5973 0
8500 5961 0
8500 5961 5970 0
8500 5961 5971 0
8500 5961 5973 0
8500 5962 0
8500 5962 5970 0
8500 5962 5971 0
8500 5962 5973 0
c (((aux1427 + aux1430 + aux1431)<=1)=tv=SATLiteral(8501))
-8501 6000 0
-8501 5994 5999 0
-8501 5995 0
-8501 5997 0
-8501 5985 5999 0
-8501 5985 5994 0
-8501 5985 5995 0
-8501 5985 5997 0
-8501 5986 0
-8501 5986 5994 0
-8501 5986 5995 0
-8501 5986 5997 0
8501 -5986 -5994 -5999 0
8501 -5985 -5995 -5999 0
8501 -5985 -5994 -6000 0
c ((1<=(aux1427 + aux1430 + aux1431))=tv=SATLiteral(8502))
-8502 -5985 -5994 -5999 0
8502 5999 0
8502 5994 0
8502 5995 0
8502 5997 0
8502 5985 0
8502 5985 5994 0
8502 5985 5995 0
8502 5985 5997 0
8502 5986 0
8502 5986 5994 0
8502 5986 5995 0
8502 5986 5997 0
c (((aux1433 + aux1436 + aux1437)<=1)=tv=SATLiteral(8503))
-8503 6024 0
-8503 6018 6023 0
-8503 6019 0
-8503 6021 0
-8503 6009 6023 0
-8503 6009 6018 0
-8503 6009 6019 0
-8503 6009 6021 0
-8503 6010 0
-8503 6010 6018 0
-8503 6010 6019 0
-8503 6010 6021 0
8503 -6010 -6018 -6023 0
8503 -6009 -6019 -6023 0
8503 -6009 -6018 -6024 0
c ((1<=(aux1433 + aux1436 + aux1437))=tv=SATLiteral(8504))
-8504 -6009 -6018 -6023 0
8504 6023 0
8504 6018 0
8504 6019 0
8504 6021 0
8504 6009 0
8504 6009 6018 0
8504 6009 6019 0
8504 6009 6021 0
8504 6010 0
8504 6010 6018 0
8504 6010 6019 0
8504 6010 6021 0
c (((aux1439 + aux1442 + aux1443)<=1)=tv=SATLiteral(8505))
-8505 6048 0
-8505 6042 6047 0
-8505 6043 0
-8505 6045 0
-8505 6033 6047 0
-8505 6033 6042 0
-8505 6033 6043 0
-8505 6033 6045 0
-8505 6034 0
-8505 6034 6042 0
-8505 6034 6043 0
-8505 6034 6045 0
8505 -6034 -6042 -6047 0
8505 -6033 -6043 -6047 0
8505 -6033 -6042 -6048 0
c ((1<=(aux1439 + aux1442 + aux1443))=tv=SATLiteral(8506))
-8506 -6033 -6042 -6047 0
8506 6047 0
8506 6042 0
8506 6043 0
8506 6045 0
8506 6033 0
8506 6033 6042 0
8506 6033 6043 0
8506 6033 6045 0
8506 6034 0
8506 6034 6042 0
8506 6034 6043 0
8506 6034 6045 0
c (((aux1445 + aux1448 + aux1449)<=1)=tv=SATLiteral(8507))
-8507 6072 0
-8507 6066 6071 0
-8507 6067 0
-8507 6069 0
-8507 6057 6071 0
-8507 6057 6066 0
-8507 6057 6067 0
-8507 6057 6069 0
-8507 6058 0
-8507 6058 6066 0
-8507 6058 6067 0
-8507 6058 6069 0
8507 -6058 -6066 -6071 0
8507 -6057 -6067 -6071 0
8507 -6057 -6066 -6072 0
c ((1<=(aux1445 + aux1448 + aux1449))=tv=SATLiteral(8508))
-8508 -6057 -6066 -6071 0
8508 6071 0
8508 6066 0
8508 6067 0
8508 6069 0
8508 6057 0
8508 6057 6066 0
8508 6057 6067 0
8508 6057 6069 0
8508 6058 0
8508 6058 6066 0
8508 6058 6067 0
8508 6058 6069 0
c (((aux1451 + aux1454 + aux1455)<=1)=tv=SATLiteral(8509))
-8509 6096 0
-8509 6090 6095 0
-8509 6091 0
-8509 6093 0
-8509 6081 6095 0
-8509 6081 6090 0
-8509 6081 6091 0
-8509 6081 6093 0
-8509 6082 0
-8509 6082 6090 0
-8509 6082 6091 0
-8509 6082 6093 0
8509 -6082 -6090 -6095 0
8509 -6081 -6091 -6095 0
8509 -6081 -6090 -6096 0
c ((1<=(aux1451 + aux1454 + aux1455))=tv=SATLiteral(8510))
-8510 -6081 -6090 -6095 0
8510 6095 0
8510 6090 0
8510 6091 0
8510 6093 0
8510 6081 0
8510 6081 6090 0
8510 6081 6091 0
8510 6081 6093 0
8510 6082 0
8510 6082 6090 0
8510 6082 6091 0
8510 6082 6093 0
c (((aux1457 + aux1460 + aux1461)<=1)=tv=SATLiteral(8511))
-8511 6120 0
-8511 6114 6119 0
-8511 6115 0
-8511 6117 0
-8511 6105 6119 0
-8511 6105 6114 0
-8511 6105 6115 0
-8511 6105 6117 0
-8511 6106 0
-8511 6106 6114 0
-8511 6106 6115 0
-8511 6106 6117 0
8511 -6106 -6114 -6119 0
8511 -6105 -6115 -6119 0
8511 -6105 -6114 -6120 0
c ((1<=(aux1457 + aux1460 + aux1461))=tv=SATLiteral(8512))
-8512 -6105 -6114 -6119 0
8512 6119 0
8512 6114 0
8512 6115 0
8512 6117 0
8512 6105 0
8512 6105 6114 0
8512 6105 6115 0
8512 6105 6117 0
8512 6106 0
8512 6106 6114 0
8512 6106 6115 0
8512 6106 6117 0
c (((aux1463 + aux1466 + aux1467)<=1)=tv=SATLiteral(8513))
-8513 6144 0
-8513 6138 6143 0
-8513 6139 0
-8513 6141 0
-8513 6129 6143 0
-8513 6129 6138 0
-8513 6129 6139 0
-8513 6129 6141 0
-8513 6130 0
-8513 6130 6138 0
-8513 6130 6139 0
-8513 6130 6141 0
8513 -6130 -6138 -6143 0
8513 -6129 -6139 -6143 0
8513 -6129 -6138 -6144 0
c ((1<=(aux1463 + aux1466 + aux1467))=tv=SATLiteral(8514))
-8514 -6129 -6138 -6143 0
8514 6143 0
8514 6138 0
8514 6139 0
8514 6141 0
8514 6129 0
8514 6129 6138 0
8514 6129 6139 0
8514 6129 6141 0
8514 6130 0
8514 6130 6138 0
8514 6130 6139 0
8514 6130 6141 0
c (((aux1469 + aux1472 + aux1473)<=1)=tv=SATLiteral(8515))
-8515 6168 0
-8515 6162 6167 0
-8515 6163 0
-8515 6165 0
-8515 6153 6167 0
-8515 6153 6162 0
-8515 6153 6163 0
-8515 6153 6165 0
-8515 6154 0
-8515 6154 6162 0
-8515 6154 6163 0
-8515 6154 6165 0
8515 -6154 -6162 -6167 0
8515 -6153 -6163 -6167 0
8515 -6153 -6162 -6168 0
c ((1<=(aux1469 + aux1472 + aux1473))=tv=SATLiteral(8516))
-8516 -6153 -6162 -6167 0
8516 6167 0
8516 6162 0
8516 6163 0
8516 6165 0
8516 6153 0
8516 6153 6162 0
8516 6153 6163 0
8516 6153 6165 0
8516 6154 0
8516 6154 6162 0
8516 6154 6163 0
8516 6154 6165 0
c (((aux1475 + aux1478 + aux1479)<=1)=tv=SATLiteral(8517))
-8517 6192 0
-8517 6186 6191 0
-8517 6187 0
-8517 6189 0
-8517 6177 6191 0
-8517 6177 6186 0
-8517 6177 6187 0
-8517 6177 6189 0
-8517 6178 0
-8517 6178 6186 0
-8517 6178 6187 0
-8517 6178 6189 0
8517 -6178 -6186 -6191 0
8517 -6177 -6187 -6191 0
8517 -6177 -6186 -6192 0
c ((1<=(aux1475 + aux1478 + aux1479))=tv=SATLiteral(8518))
-8518 -6177 -6186 -6191 0
8518 6191 0
8518 6186 0
8518 6187 0
8518 6189 0
8518 6177 0
8518 6177 6186 0
8518 6177 6187 0
8518 6177 6189 0
8518 6178 0
8518 6178 6186 0
8518 6178 6187 0
8518 6178 6189 0
c (((aux1481 + aux1484 + aux1485)<=1)=tv=SATLiteral(8519))
-8519 6216 0
-8519 6210 6215 0
-8519 6211 0
-8519 6213 0
-8519 6201 6215 0
-8519 6201 6210 0
-8519 6201 6211 0
-8519 6201 6213 0
-8519 6202 0
-8519 6202 6210 0
-8519 6202 6211 0
-8519 6202 6213 0
8519 -6202 -6210 -6215 0
8519 -6201 -6211 -6215 0
8519 -6201 -6210 -6216 0
c ((1<=(aux1481 + aux1484 + aux1485))=tv=SATLiteral(8520))
-8520 -6201 -6210 -6215 0
8520 6215 0
8520 6210 0
8520 6211 0
8520 6213 0
8520 6201 0
8520 6201 6210 0
8520 6201 6211 0
8520 6201 6213 0
8520 6202 0
8520 6202 6210 0
8520 6202 6211 0
8520 6202 6213 0
c (((aux1487 + aux1490 + aux1491)<=1)=tv=SATLiteral(8521))
-8521 6240 0
-8521 6234 6239 0
-8521 6235 0
-8521 6237 0
-8521 6225 6239 0
-8521 6225 6234 0
-8521 6225 6235 0
-8521 6225 6237 0
-8521 6226 0
-8521 6226 6234 0
-8521 6226 6235 0
-8521 6226 6237 0
8521 -6226 -6234 -6239 0
8521 -6225 -6235 -6239 0
8521 -6225 -6234 -6240 0
c ((1<=(aux1487 + aux1490 + aux1491))=tv=SATLiteral(8522))
-8522 -6225 -6234 -6239 0
8522 6239 0
8522 6234 0
8522 6235 0
8522 6237 0
8522 6225 0
8522 6225 6234 0
8522 6225 6235 0
8522 6225 6237 0
8522 6226 0
8522 6226 6234 0
8522 6226 6235 0
8522 6226 6237 0
c (((aux1493 + aux1496 + aux1497)<=1)=tv=SATLiteral(8523))
-8523 6264 0
-8523 6258 6263 0
-8523 6259 0
-8523 6261 0
-8523 6249 6263 0
-8523 6249 6258 0
-8523 6249 6259 0
-8523 6249 6261 0
-8523 6250 0
-8523 6250 6258 0
-8523 6250 6259 0
-8523 6250 6261 0
8523 -6250 -6258 -6263 0
8523 -6249 -6259 -6263 0
8523 -6249 -6258 -6264 0
c ((1<=(aux1493 + aux1496 + aux1497))=tv=SATLiteral(8524))
-8524 -6249 -6258 -6263 0
8524 6263 0
8524 6258 0
8524 6259 0
8524 6261 0
8524 6249 0
8524 6249 6258 0
8524 6249 6259 0
8524 6249 6261 0
8524 6250 0
8524 6250 6258 0
8524 6250 6259 0
8524 6250 6261 0
c (((aux1499 + aux1502 + aux1503)<=1)=tv=SATLiteral(8525))
-8525 6288 0
-8525 6282 6287 0
-8525 6283 0
-8525 6285 0
-8525 6273 6287 0
-8525 6273 6282 0
-8525 6273 6283 0
-8525 6273 6285 0
-8525 6274 0
-8525 6274 6282 0
-8525 6274 6283 0
-8525 6274 6285 0
8525 -6274 -6282 -6287 0
8525 -6273 -6283 -6287 0
8525 -6273 -6282 -6288 0
c ((1<=(aux1499 + aux1502 + aux1503))=tv=SATLiteral(8526))
-8526 -6273 -6282 -6287 0
8526 6287 0
8526 6282 0
8526 6283 0
8526 6285 0
8526 6273 0
8526 6273 6282 0
8526 6273 6283 0
8526 6273 6285 0
8526 6274 0
8526 6274 6282 0
8526 6274 6283 0
8526 6274 6285 0
c (((aux1505 + aux1508 + aux1509)<=1)=tv=SATLiteral(8527))
-8527 6312 0
-8527 6306 6311 0
-8527 6307 0
-8527 6309 0
-8527 6297 6311 0
-8527 6297 6306 0
-8527 6297 6307 0
-8527 6297 6309 0
-8527 6298 0
-8527 6298 6306 0
-8527 6298 6307 0
-8527 6298 6309 0
8527 -6298 -6306 -6311 0
8527 -6297 -6307 -6311 0
8527 -6297 -6306 -6312 0
c ((1<=(aux1505 + aux1508 + aux1509))=tv=SATLiteral(8528))
-8528 -6297 -6306 -6311 0
8528 6311 0
8528 6306 0
8528 6307 0
8528 6309 0
8528 6297 0
8528 6297 6306 0
8528 6297 6307 0
8528 6297 6309 0
8528 6298 0
8528 6298 6306 0
8528 6298 6307 0
8528 6298 6309 0
c (((aux1511 + aux1514 + aux1515)<=1)=tv=SATLiteral(8529))
-8529 6336 0
-8529 6330 6335 0
-8529 6331 0
-8529 6333 0
-8529 6321 6335 0
-8529 6321 6330 0
-8529 6321 6331 0
-8529 6321 6333 0
-8529 6322 0
-8529 6322 6330 0
-8529 6322 6331 0
-8529 6322 6333 0
8529 -6322 -6330 -6335 0
8529 -6321 -6331 -6335 0
8529 -6321 -6330 -6336 0
c ((1<=(aux1511 + aux1514 + aux1515))=tv=SATLiteral(8530))
-8530 -6321 -6330 -6335 0
8530 6335 0
8530 6330 0
8530 6331 0
8530 6333 0
8530 6321 0
8530 6321 6330 0
8530 6321 6331 0
8530 6321 6333 0
8530 6322 0
8530 6322 6330 0
8530 6322 6331 0
8530 6322 6333 0
c (((aux1517 + aux1520 + aux1521)<=1)=tv=SATLiteral(8531))
-8531 6360 0
-8531 6354 6359 0
-8531 6355 0
-8531 6357 0
-8531 6345 6359 0
-8531 6345 6354 0
-8531 6345 6355 0
-8531 6345 6357 0
-8531 6346 0
-8531 6346 6354 0
-8531 6346 6355 0
-8531 6346 6357 0
8531 -6346 -6354 -6359 0
8531 -6345 -6355 -6359 0
8531 -6345 -6354 -6360 0
c ((1<=(aux1517 + aux1520 + aux1521))=tv=SATLiteral(8532))
-8532 -6345 -6354 -6359 0
8532 6359 0
8532 6354 0
8532 6355 0
8532 6357 0
8532 6345 0
8532 6345 6354 0
8532 6345 6355 0
8532 6345 6357 0
8532 6346 0
8532 6346 6354 0
8532 6346 6355 0
8532 6346 6357 0
c (((aux1523 + aux1526 + aux1527)<=1)=tv=SATLiteral(8533))
-8533 6384 0
-8533 6378 6383 0
-8533 6379 0
-8533 6381 0
-8533 6369 6383 0
-8533 6369 6378 0
-8533 6369 6379 0
-8533 6369 6381 0
-8533 6370 0
-8533 6370 6378 0
-8533 6370 6379 0
-8533 6370 6381 0
8533 -6370 -6378 -6383 0
8533 -6369 -6379 -6383 0
8533 -6369 -6378 -6384 0
c ((1<=(aux1523 + aux1526 + aux1527))=tv=SATLiteral(8534))
-8534 -6369 -6378 -6383 0
8534 6383 0
8534 6378 0
8534 6379 0
8534 6381 0
8534 6369 0
8534 6369 6378 0
8534 6369 6379 0
8534 6369 6381 0
8534 6370 0
8534 6370 6378 0
8534 6370 6379 0
8534 6370 6381 0
c (((aux1529 + aux1532 + aux1533)<=1)=tv=SATLiteral(8535))
-8535 6408 0
-8535 6402 6407 0
-8535 6403 0
-8535 6405 0
-8535 6393 6407 0
-8535 6393 6402 0
-8535 6393 6403 0
-8535 6393 6405 0
-8535 6394 0
-8535 6394 6402 0
-8535 6394 6403 0
-8535 6394 6405 0
8535 -6394 -6402 -6407 0
8535 -6393 -6403 -6407 0
8535 -6393 -6402 -6408 0
c ((1<=(aux1529 + aux1532 + aux1533))=tv=SATLiteral(8536))
-8536 -6393 -6402 -6407 0
8536 6407 0
8536 6402 0
8536 6403 0
8536 6405 0
8536 6393 0
8536 6393 6402 0
8536 6393 6403 0
8536 6393 6405 0
8536 6394 0
8536 6394 6402 0
8536 6394 6403 0
8536 6394 6405 0
c (((aux1535 + aux1538 + aux1539)<=1)=tv=SATLiteral(8537))
-8537 6432 0
-8537 6426 6431 0
-8537 6427 0
-8537 6429 0
-8537 6417 6431 0
-8537 6417 6426 0
-8537 6417 6427 0
-8537 6417 6429 0
-8537 6418 0
-8537 6418 6426 0
-8537 6418 6427 0
-8537 6418 6429 0
8537 -6418 -6426 -6431 0
8537 -6417 -6427 -6431 0
8537 -6417 -6426 -6432 0
c ((1<=(aux1535 + aux1538 + aux1539))=tv=SATLiteral(8538))
-8538 -6417 -6426 -6431 0
8538 6431 0
8538 6426 0
8538 6427 0
8538 6429 0
8538 6417 0
8538 6417 6426 0
8538 6417 6427 0
8538 6417 6429 0
8538 6418 0
8538 6418 6426 0
8538 6418 6427 0
8538 6418 6429 0
c (((aux1541 + aux1544 + aux1545)<=1)=tv=SATLiteral(8539))
-8539 6456 0
-8539 6450 6455 0
-8539 6451 0
-8539 6453 0
-8539 6441 6455 0
-8539 6441 6450 0
-8539 6441 6451 0
-8539 6441 6453 0
-8539 6442 0
-8539 6442 6450 0
-8539 6442 6451 0
-8539 6442 6453 0
8539 -6442 -6450 -6455 0
8539 -6441 -6451 -6455 0
8539 -6441 -6450 -6456 0
c ((1<=(aux1541 + aux1544 + aux1545))=tv=SATLiteral(8540))
-8540 -6441 -6450 -6455 0
8540 6455 0
8540 6450 0
8540 6451 0
8540 6453 0
8540 6441 0
8540 6441 6450 0
8540 6441 6451 0
8540 6441 6453 0
8540 6442 0
8540 6442 6450 0
8540 6442 6451 0
8540 6442 6453 0
c (((aux1547 + aux1550 + aux1551)<=1)=tv=SATLiteral(8541))
-8541 6480 0
-8541 6474 6479 0
-8541 6475 0
-8541 6477 0
-8541 6465 6479 0
-8541 6465 6474 0
-8541 6465 6475 0
-8541 6465 6477 0
-8541 6466 0
-8541 6466 6474 0
-8541 6466 6475 0
-8541 6466 6477 0
8541 -6466 -6474 -6479 0
8541 -6465 -6475 -6479 0
8541 -6465 -6474 -6480 0
c ((1<=(aux1547 + aux1550 + aux1551))=tv=SATLiteral(8542))
-8542 -6465 -6474 -6479 0
8542 6479 0
8542 6474 0
8542 6475 0
8542 6477 0
8542 6465 0
8542 6465 6474 0
8542 6465 6475 0
8542 6465 6477 0
8542 6466 0
8542 6466 6474 0
8542 6466 6475 0
8542 6466 6477 0
c (((aux1553 + aux1556 + aux1557)<=1)=tv=SATLiteral(8543))
-8543 6504 0
-8543 6498 6503 0
-8543 6499 0
-8543 6501 0
-8543 6489 6503 0
-8543 6489 6498 0
-8543 6489 6499 0
-8543 6489 6501 0
-8543 6490 0
-8543 6490 6498 0
-8543 6490 6499 0
-8543 6490 6501 0
8543 -6490 -6498 -6503 0
8543 -6489 -6499 -6503 0
8543 -6489 -6498 -6504 0
c ((1<=(aux1553 + aux1556 + aux1557))=tv=SATLiteral(8544))
-8544 -6489 -6498 -6503 0
8544 6503 0
8544 6498 0
8544 6499 0
8544 6501 0
8544 6489 0
8544 6489 6498 0
8544 6489 6499 0
8544 6489 6501 0
8544 6490 0
8544 6490 6498 0
8544 6490 6499 0
8544 6490 6501 0
c (((aux1559 + aux1562 + aux1563)<=1)=tv=SATLiteral(8545))
-8545 6528 0
-8545 6522 6527 0
-8545 6523 0
-8545 6525 0
-8545 6513 6527 0
-8545 6513 6522 0
-8545 6513 6523 0
-8545 6513 6525 0
-8545 6514 0
-8545 6514 6522 0
-8545 6514 6523 0
-8545 6514 6525 0
8545 -6514 -6522 -6527 0
8545 -6513 -6523 -6527 0
8545 -6513 -6522 -6528 0
c ((1<=(aux1559 + aux1562 + aux1563))=tv=SATLiteral(8546))
-8546 -6513 -6522 -6527 0
8546 6527 0
8546 6522 0
8546 6523 0
8546 6525 0
8546 6513 0
8546 6513 6522 0
8546 6513 6523 0
8546 6513 6525 0
8546 6514 0
8546 6514 6522 0
8546 6514 6523 0
8546 6514 6525 0
c (((aux1565 + aux1568 + aux1569)<=1)=tv=SATLiteral(8547))
-8547 6552 0
-8547 6546 6551 0
-8547 6547 0
-8547 6549 0
-8547 6537 6551 0
-8547 6537 6546 0
-8547 6537 6547 0
-8547 6537 6549 0
-8547 6538 0
-8547 6538 6546 0
-8547 6538 6547 0
-8547 6538 6549 0
8547 -6538 -6546 -6551 0
8547 -6537 -6547 -6551 0
8547 -6537 -6546 -6552 0
c ((1<=(aux1565 + aux1568 + aux1569))=tv=SATLiteral(8548))
-8548 -6537 -6546 -6551 0
8548 6551 0
8548 6546 0
8548 6547 0
8548 6549 0
8548 6537 0
8548 6537 6546 0
8548 6537 6547 0
8548 6537 6549 0
8548 6538 0
8548 6538 6546 0
8548 6538 6547 0
8548 6538 6549 0
c (((aux1571 + aux1574 + aux1575)<=1)=tv=SATLiteral(8549))
-8549 6576 0
-8549 6570 6575 0
-8549 6571 0
-8549 6573 0
-8549 6561 6575 0
-8549 6561 6570 0
-8549 6561 6571 0
-8549 6561 6573 0
-8549 6562 0
-8549 6562 6570 0
-8549 6562 6571 0
-8549 6562 6573 0
8549 -6562 -6570 -6575 0
8549 -6561 -6571 -6575 0
8549 -6561 -6570 -6576 0
c ((1<=(aux1571 + aux1574 + aux1575))=tv=SATLiteral(8550))
-8550 -6561 -6570 -6575 0
8550 6575 0
8550 6570 0
8550 6571 0
8550 6573 0
8550 6561 0
8550 6561 6570 0
8550 6561 6571 0
8550 6561 6573 0
8550 6562 0
8550 6562 6570 0
8550 6562 6571 0
8550 6562 6573 0
c (((aux1577 + aux1580 + aux1581)<=1)=tv=SATLiteral(8551))
-8551 6600 0
-8551 6594 6599 0
-8551 6595 0
-8551 6597 0
-8551 6585 6599 0
-8551 6585 6594 0
-8551 6585 6595 0
-8551 6585 6597 0
-8551 6586 0
-8551 6586 6594 0
-8551 6586 6595 0
-8551 6586 6597 0
8551 -6586 -6594 -6599 0
8551 -6585 -6595 -6599 0
8551 -6585 -6594 -6600 0
c ((1<=(aux1577 + aux1580 + aux1581))=tv=SATLiteral(8552))
-8552 -6585 -6594 -6599 0
8552 6599 0
8552 6594 0
8552 6595 0
8552 6597 0
8552 6585 0
8552 6585 6594 0
8552 6585 6595 0
8552 6585 6597 0
8552 6586 0
8552 6586 6594 0
8552 6586 6595 0
8552 6586 6597 0
c (((aux1583 + aux1586 + aux1587)<=1)=tv=SATLiteral(8553))
-8553 6624 0
-8553 6618 6623 0
-8553 6619 0
-8553 6621 0
-8553 6609 6623 0
-8553 6609 6618 0
-8553 6609 6619 0
-8553 6609 6621 0
-8553 6610 0
-8553 6610 6618 0
-8553 6610 6619 0
-8553 6610 6621 0
8553 -6610 -6618 -6623 0
8553 -6609 -6619 -6623 0
8553 -6609 -6618 -6624 0
c ((1<=(aux1583 + aux1586 + aux1587))=tv=SATLiteral(8554))
-8554 -6609 -6618 -6623 0
8554 6623 0
8554 6618 0
8554 6619 0
8554 6621 0
8554 6609 0
8554 6609 6618 0
8554 6609 6619 0
8554 6609 6621 0
8554 6610 0
8554 6610 6618 0
8554 6610 6619 0
8554 6610 6621 0
c (((aux1589 + aux1592 + aux1593)<=1)=tv=SATLiteral(8555))
-8555 6648 0
-8555 6642 6647 0
-8555 6643 0
-8555 6645 0
-8555 6633 6647 0
-8555 6633 6642 0
-8555 6633 6643 0
-8555 6633 6645 0
-8555 6634 0
-8555 6634 6642 0
-8555 6634 6643 0
-8555 6634 6645 0
8555 -6634 -6642 -6647 0
8555 -6633 -6643 -6647 0
8555 -6633 -6642 -6648 0
c ((1<=(aux1589 + aux1592 + aux1593))=tv=SATLiteral(8556))
-8556 -6633 -6642 -6647 0
8556 6647 0
8556 6642 0
8556 6643 0
8556 6645 0
8556 6633 0
8556 6633 6642 0
8556 6633 6643 0
8556 6633 6645 0
8556 6634 0
8556 6634 6642 0
8556 6634 6643 0
8556 6634 6645 0
c (((aux1595 + aux1598 + aux1599)<=1)=tv=SATLiteral(8557))
-8557 6672 0
-8557 6666 6671 0
-8557 6667 0
-8557 6669 0
-8557 6657 6671 0
-8557 6657 6666 0
-8557 6657 6667 0
-8557 6657 6669 0
-8557 6658 0
-8557 6658 6666 0
-8557 6658 6667 0
-8557 6658 6669 0
8557 -6658 -6666 -6671 0
8557 -6657 -6667 -6671 0
8557 -6657 -6666 -6672 0
c ((1<=(aux1595 + aux1598 + aux1599))=tv=SATLiteral(8558))
-8558 -6657 -6666 -6671 0
8558 6671 0
8558 6666 0
8558 6667 0
8558 6669 0
8558 6657 0
8558 6657 6666 0
8558 6657 6667 0
8558 6657 6669 0
8558 6658 0
8558 6658 6666 0
8558 6658 6667 0
8558 6658 6669 0
c (((aux1601 + aux1604 + aux1605)<=1)=tv=SATLiteral(8559))
-8559 6696 0
-8559 6690 6695 0
-8559 6691 0
-8559 6693 0
-8559 6681 6695 0
-8559 6681 6690 0
-8559 6681 6691 0
-8559 6681 6693 0
-8559 6682 0
-8559 6682 6690 0
-8559 6682 6691 0
-8559 6682 6693 0
8559 -6682 -6690 -6695 0
8559 -6681 -6691 -6695 0
8559 -6681 -6690 -6696 0
c ((1<=(aux1601 + aux1604 + aux1605))=tv=SATLiteral(8560))
-8560 -6681 -6690 -6695 0
8560 6695 0
8560 6690 0
8560 6691 0
8560 6693 0
8560 6681 0
8560 6681 6690 0
8560 6681 6691 0
8560 6681 6693 0
8560 6682 0
8560 6682 6690 0
8560 6682 6691 0
8560 6682 6693 0
c (((aux1607 + aux1610 + aux1611)<=1)=tv=SATLiteral(8561))
-8561 6720 0
-8561 6714 6719 0
-8561 6715 0
-8561 6717 0
-8561 6705 6719 0
-8561 6705 6714 0
-8561 6705 6715 0
-8561 6705 6717 0
-8561 6706 0
-8561 6706 6714 0
-8561 6706 6715 0
-8561 6706 6717 0
8561 -6706 -6714 -6719 0
8561 -6705 -6715 -6719 0
8561 -6705 -6714 -6720 0
c ((1<=(aux1607 + aux1610 + aux1611))=tv=SATLiteral(8562))
-8562 -6705 -6714 -6719 0
8562 6719 0
8562 6714 0
8562 6715 0
8562 6717 0
8562 6705 0
8562 6705 6714 0
8562 6705 6715 0
8562 6705 6717 0
8562 6706 0
8562 6706 6714 0
8562 6706 6715 0
8562 6706 6717 0
c (((aux1613 + aux1616 + aux1617)<=1)=tv=SATLiteral(8563))
-8563 6744 0
-8563 6738 6743 0
-8563 6739 0
-8563 6741 0
-8563 6729 6743 0
-8563 6729 6738 0
-8563 6729 6739 0
-8563 6729 6741 0
-8563 6730 0
-8563 6730 6738 0
-8563 6730 6739 0
-8563 6730 6741 0
8563 -6730 -6738 -6743 0
8563 -6729 -6739 -6743 0
8563 -6729 -6738 -6744 0
c ((1<=(aux1613 + aux1616 + aux1617))=tv=SATLiteral(8564))
-8564 -6729 -6738 -6743 0
8564 6743 0
8564 6738 0
8564 6739 0
8564 6741 0
8564 6729 0
8564 6729 6738 0
8564 6729 6739 0
8564 6729 6741 0
8564 6730 0
8564 6730 6738 0
8564 6730 6739 0
8564 6730 6741 0
c (((aux1619 + aux1622 + aux1623)<=1)=tv=SATLiteral(8565))
-8565 6768 0
-8565 6762 6767 0
-8565 6763 0
-8565 6765 0
-8565 6753 6767 0
-8565 6753 6762 0
-8565 6753 6763 0
-8565 6753 6765 0
-8565 6754 0
-8565 6754 6762 0
-8565 6754 6763 0
-8565 6754 6765 0
8565 -6754 -6762 -6767 0
8565 -6753 -6763 -6767 0
8565 -6753 -6762 -6768 0
c ((1<=(aux1619 + aux1622 + aux1623))=tv=SATLiteral(8566))
-8566 -6753 -6762 -6767 0
8566 6767 0
8566 6762 0
8566 6763 0
8566 6765 0
8566 6753 0
8566 6753 6762 0
8566 6753 6763 0
8566 6753 6765 0
8566 6754 0
8566 6754 6762 0
8566 6754 6763 0
8566 6754 6765 0
c (((aux1625 + aux1628 + aux1629)<=1)=tv=SATLiteral(8567))
-8567 6792 0
-8567 6786 6791 0
-8567 6787 0
-8567 6789 0
-8567 6777 6791 0
-8567 6777 6786 0
-8567 6777 6787 0
-8567 6777 6789 0
-8567 6778 0
-8567 6778 6786 0
-8567 6778 6787 0
-8567 6778 6789 0
8567 -6778 -6786 -6791 0
8567 -6777 -6787 -6791 0
8567 -6777 -6786 -6792 0
c ((1<=(aux1625 + aux1628 + aux1629))=tv=SATLiteral(8568))
-8568 -6777 -6786 -6791 0
8568 6791 0
8568 6786 0
8568 6787 0
8568 6789 0
8568 6777 0
8568 6777 6786 0
8568 6777 6787 0
8568 6777 6789 0
8568 6778 0
8568 6778 6786 0
8568 6778 6787 0
8568 6778 6789 0
c (((aux1631 + aux1634 + aux1635)<=1)=tv=SATLiteral(8569))
-8569 6816 0
-8569 6810 6815 0
-8569 6811 0
-8569 6813 0
-8569 6801 6815 0
-8569 6801 6810 0
-8569 6801 6811 0
-8569 6801 6813 0
-8569 6802 0
-8569 6802 6810 0
-8569 6802 6811 0
-8569 6802 6813 0
8569 -6802 -6810 -6815 0
8569 -6801 -6811 -6815 0
8569 -6801 -6810 -6816 0
c ((1<=(aux1631 + aux1634 + aux1635))=tv=SATLiteral(8570))
-8570 -6801 -6810 -6815 0
8570 6815 0
8570 6810 0
8570 6811 0
8570 6813 0
8570 6801 0
8570 6801 6810 0
8570 6801 6811 0
8570 6801 6813 0
8570 6802 0
8570 6802 6810 0
8570 6802 6811 0
8570 6802 6813 0
c (((aux1637 + aux1640 + aux1641)<=1)=tv=SATLiteral(8571))
-8571 6840 0
-8571 6834 6839 0
-8571 6835 0
-8571 6837 0
-8571 6825 6839 0
-8571 6825 6834 0
-8571 6825 6835 0
-8571 6825 6837 0
-8571 6826 0
-8571 6826 6834 0
-8571 6826 6835 0
-8571 6826 6837 0
8571 -6826 -6834 -6839 0
8571 -6825 -6835 -6839 0
8571 -6825 -6834 -6840 0
c ((1<=(aux1637 + aux1640 + aux1641))=tv=SATLiteral(8572))
-8572 -6825 -6834 -6839 0
8572 6839 0
8572 6834 0
8572 6835 0
8572 6837 0
8572 6825 0
8572 6825 6834 0
8572 6825 6835 0
8572 6825 6837 0
8572 6826 0
8572 6826 6834 0
8572 6826 6835 0
8572 6826 6837 0
c (((aux1643 + aux1646 + aux1647)<=1)=tv=SATLiteral(8573))
-8573 6864 0
-8573 6858 6863 0
-8573 6859 0
-8573 6861 0
-8573 6849 6863 0
-8573 6849 6858 0
-8573 6849 6859 0
-8573 6849 6861 0
-8573 6850 0
-8573 6850 6858 0
-8573 6850 6859 0
-8573 6850 6861 0
8573 -6850 -6858 -6863 0
8573 -6849 -6859 -6863 0
8573 -6849 -6858 -6864 0
c ((1<=(aux1643 + aux1646 + aux1647))=tv=SATLiteral(8574))
-8574 -6849 -6858 -6863 0
8574 6863 0
8574 6858 0
8574 6859 0
8574 6861 0
8574 6849 0
8574 6849 6858 0
8574 6849 6859 0
8574 6849 6861 0
8574 6850 0
8574 6850 6858 0
8574 6850 6859 0
8574 6850 6861 0
c (((aux1649 + aux1652 + aux1653)<=1)=tv=SATLiteral(8575))
-8575 6888 0
-8575 6882 6887 0
-8575 6883 0
-8575 6885 0
-8575 6873 6887 0
-8575 6873 6882 0
-8575 6873 6883 0
-8575 6873 6885 0
-8575 6874 0
-8575 6874 6882 0
-8575 6874 6883 0
-8575 6874 6885 0
8575 -6874 -6882 -6887 0
8575 -6873 -6883 -6887 0
8575 -6873 -6882 -6888 0
c ((1<=(aux1649 + aux1652 + aux1653))=tv=SATLiteral(8576))
-8576 -6873 -6882 -6887 0
8576 6887 0
8576 6882 0
8576 6883 0
8576 6885 0
8576 6873 0
8576 6873 6882 0
8576 6873 6883 0
8576 6873 6885 0
8576 6874 0
8576 6874 6882 0
8576 6874 6883 0
8576 6874 6885 0
c (((aux1655 + aux1658 + aux1659)<=1)=tv=SATLiteral(8577))
-8577 6912 0
-8577 6906 6911 0
-8577 6907 0
-8577 6909 0
-8577 6897 6911 0
-8577 6897 6906 0
-8577 6897 6907 0
-8577 6897 6909 0
-8577 6898 0
-8577 6898 6906 0
-8577 6898 6907 0
-8577 6898 6909 0
8577 -6898 -6906 -6911 0
8577 -6897 -6907 -6911 0
8577 -6897 -6906 -6912 0
c ((1<=(aux1655 + aux1658 + aux1659))=tv=SATLiteral(8578))
-8578 -6897 -6906 -6911 0
8578 6911 0
8578 6906 0
8578 6907 0
8578 6909 0
8578 6897 0
8578 6897 6906 0
8578 6897 6907 0
8578 6897 6909 0
8578 6898 0
8578 6898 6906 0
8578 6898 6907 0
8578 6898 6909 0
c (((aux1661 + aux1664 + aux1665)<=1)=tv=SATLiteral(8579))
-8579 6936 0
-8579 6930 6935 0
-8579 6931 0
-8579 6933 0
-8579 6921 6935 0
-8579 6921 6930 0
-8579 6921 6931 0
-8579 6921 6933 0
-8579 6922 0
-8579 6922 6930 0
-8579 6922 6931 0
-8579 6922 6933 0
8579 -6922 -6930 -6935 0
8579 -6921 -6931 -6935 0
8579 -6921 -6930 -6936 0
c ((1<=(aux1661 + aux1664 + aux1665))=tv=SATLiteral(8580))
-8580 -6921 -6930 -6935 0
8580 6935 0
8580 6930 0
8580 6931 0
8580 6933 0
8580 6921 0
8580 6921 6930 0
8580 6921 6931 0
8580 6921 6933 0
8580 6922 0
8580 6922 6930 0
8580 6922 6931 0
8580 6922 6933 0
c (((aux1667 + aux1670 + aux1671)<=1)=tv=SATLiteral(8581))
-8581 6960 0
-8581 6954 6959 0
-8581 6955 0
-8581 6957 0
-8581 6945 6959 0
-8581 6945 6954 0
-8581 6945 6955 0
-8581 6945 6957 0
-8581 6946 0
-8581 6946 6954 0
-8581 6946 6955 0
-8581 6946 6957 0
8581 -6946 -6954 -6959 0
8581 -6945 -6955 -6959 0
8581 -6945 -6954 -6960 0
c ((1<=(aux1667 + aux1670 + aux1671))=tv=SATLiteral(8582))
-8582 -6945 -6954 -6959 0
8582 6959 0
8582 6954 0
8582 6955 0
8582 6957 0
8582 6945 0
8582 6945 6954 0
8582 6945 6955 0
8582 6945 6957 0
8582 6946 0
8582 6946 6954 0
8582 6946 6955 0
8582 6946 6957 0
c (((aux1673 + aux1676 + aux1677)<=1)=tv=SATLiteral(8583))
-8583 6984 0
-8583 6978 6983 0
-8583 6979 0
-8583 6981 0
-8583 6969 6983 0
-8583 6969 6978 0
-8583 6969 6979 0
-8583 6969 6981 0
-8583 6970 0
-8583 6970 6978 0
-8583 6970 6979 0
-8583 6970 6981 0
8583 -6970 -6978 -6983 0
8583 -6969 -6979 -6983 0
8583 -6969 -6978 -6984 0
c ((1<=(aux1673 + aux1676 + aux1677))=tv=SATLiteral(8584))
-8584 -6969 -6978 -6983 0
8584 6983 0
8584 6978 0
8584 6979 0
8584 6981 0
8584 6969 0
8584 6969 6978 0
8584 6969 6979 0
8584 6969 6981 0
8584 6970 0
8584 6970 6978 0
8584 6970 6979 0
8584 6970 6981 0
c (((aux1679 + aux1682 + aux1683)<=1)=tv=SATLiteral(8585))
-8585 7008 0
-8585 7002 7007 0
-8585 7003 0
-8585 7005 0
-8585 6993 7007 0
-8585 6993 7002 0
-8585 6993 7003 0
-8585 6993 7005 0
-8585 6994 0
-8585 6994 7002 0
-8585 6994 7003 0
-8585 6994 7005 0
8585 -6994 -7002 -7007 0
8585 -6993 -7003 -7007 0
8585 -6993 -7002 -7008 0
c ((1<=(aux1679 + aux1682 + aux1683))=tv=SATLiteral(8586))
-8586 -6993 -7002 -7007 0
8586 7007 0
8586 7002 0
8586 7003 0
8586 7005 0
8586 6993 0
8586 6993 7002 0
8586 6993 7003 0
8586 6993 7005 0
8586 6994 0
8586 6994 7002 0
8586 6994 7003 0
8586 6994 7005 0
c (((aux1685 + aux1688 + aux1689)<=1)=tv=SATLiteral(8587))
-8587 7032 0
-8587 7026 7031 0
-8587 7027 0
-8587 7029 0
-8587 7017 7031 0
-8587 7017 7026 0
-8587 7017 7027 0
-8587 7017 7029 0
-8587 7018 0
-8587 7018 7026 0
-8587 7018 7027 0
-8587 7018 7029 0
8587 -7018 -7026 -7031 0
8587 -7017 -7027 -7031 0
8587 -7017 -7026 -7032 0
c ((1<=(aux1685 + aux1688 + aux1689))=tv=SATLiteral(8588))
-8588 -7017 -7026 -7031 0
8588 7031 0
8588 7026 0
8588 7027 0
8588 7029 0
8588 7017 0
8588 7017 7026 0
8588 7017 7027 0
8588 7017 7029 0
8588 7018 0
8588 7018 7026 0
8588 7018 7027 0
8588 7018 7029 0
c (((aux1691 + aux1694 + aux1695)<=1)=tv=SATLiteral(8589))
-8589 7056 0
-8589 7050 7055 0
-8589 7051 0
-8589 7053 0
-8589 7041 7055 0
-8589 7041 7050 0
-8589 7041 7051 0
-8589 7041 7053 0
-8589 7042 0
-8589 7042 7050 0
-8589 7042 7051 0
-8589 7042 7053 0
8589 -7042 -7050 -7055 0
8589 -7041 -7051 -7055 0
8589 -7041 -7050 -7056 0
c ((1<=(aux1691 + aux1694 + aux1695))=tv=SATLiteral(8590))
-8590 -7041 -7050 -7055 0
8590 7055 0
8590 7050 0
8590 7051 0
8590 7053 0
8590 7041 0
8590 7041 7050 0
8590 7041 7051 0
8590 7041 7053 0
8590 7042 0
8590 7042 7050 0
8590 7042 7051 0
8590 7042 7053 0
c (((aux1697 + aux1700 + aux1701)<=1)=tv=SATLiteral(8591))
-8591 7080 0
-8591 7074 7079 0
-8591 7075 0
-8591 7077 0
-8591 7065 7079 0
-8591 7065 7074 0
-8591 7065 7075 0
-8591 7065 7077 0
-8591 7066 0
-8591 7066 7074 0
-8591 7066 7075 0
-8591 7066 7077 0
8591 -7066 -7074 -7079 0
8591 -7065 -7075 -7079 0
8591 -7065 -7074 -7080 0
c ((1<=(aux1697 + aux1700 + aux1701))=tv=SATLiteral(8592))
-8592 -7065 -7074 -7079 0
8592 7079 0
8592 7074 0
8592 7075 0
8592 7077 0
8592 7065 0
8592 7065 7074 0
8592 7065 7075 0
8592 7065 7077 0
8592 7066 0
8592 7066 7074 0
8592 7066 7075 0
8592 7066 7077 0
c (((aux1703 + aux1706 + aux1707)<=1)=tv=SATLiteral(8593))
-8593 7104 0
-8593 7098 7103 0
-8593 7099 0
-8593 7101 0
-8593 7089 7103 0
-8593 7089 7098 0
-8593 7089 7099 0
-8593 7089 7101 0
-8593 7090 0
-8593 7090 7098 0
-8593 7090 7099 0
-8593 7090 7101 0
8593 -7090 -7098 -7103 0
8593 -7089 -7099 -7103 0
8593 -7089 -7098 -7104 0
c ((1<=(aux1703 + aux1706 + aux1707))=tv=SATLiteral(8594))
-8594 -7089 -7098 -7103 0
8594 7103 0
8594 7098 0
8594 7099 0
8594 7101 0
8594 7089 0
8594 7089 7098 0
8594 7089 7099 0
8594 7089 7101 0
8594 7090 0
8594 7090 7098 0
8594 7090 7099 0
8594 7090 7101 0
c (((aux1709 + aux1712 + aux1713)<=1)=tv=SATLiteral(8595))
-8595 7128 0
-8595 7122 7127 0
-8595 7123 0
-8595 7125 0
-8595 7113 7127 0
-8595 7113 7122 0
-8595 7113 7123 0
-8595 7113 7125 0
-8595 7114 0
-8595 7114 7122 0
-8595 7114 7123 0
-8595 7114 7125 0
8595 -7114 -7122 -7127 0
8595 -7113 -7123 -7127 0
8595 -7113 -7122 -7128 0
c ((1<=(aux1709 + aux1712 + aux1713))=tv=SATLiteral(8596))
-8596 -7113 -7122 -7127 0
8596 7127 0
8596 7122 0
8596 7123 0
8596 7125 0
8596 7113 0
8596 7113 7122 0
8596 7113 7123 0
8596 7113 7125 0
8596 7114 0
8596 7114 7122 0
8596 7114 7123 0
8596 7114 7125 0
c (((aux1715 + aux1718 + aux1719)<=1)=tv=SATLiteral(8597))
-8597 7152 0
-8597 7146 7151 0
-8597 7147 0
-8597 7149 0
-8597 7137 7151 0
-8597 7137 7146 0
-8597 7137 7147 0
-8597 7137 7149 0
-8597 7138 0
-8597 7138 7146 0
-8597 7138 7147 0
-8597 7138 7149 0
8597 -7138 -7146 -7151 0
8597 -7137 -7147 -7151 0
8597 -7137 -7146 -7152 0
c ((1<=(aux1715 + aux1718 + aux1719))=tv=SATLiteral(8598))
-8598 -7137 -7146 -7151 0
8598 7151 0
8598 7146 0
8598 7147 0
8598 7149 0
8598 7137 0
8598 7137 7146 0
8598 7137 7147 0
8598 7137 7149 0
8598 7138 0
8598 7138 7146 0
8598 7138 7147 0
8598 7138 7149 0
c (((aux1721 + aux1724 + aux1725)<=1)=tv=SATLiteral(8599))
-8599 7176 0
-8599 7170 7175 0
-8599 7171 0
-8599 7173 0
-8599 7161 7175 0
-8599 7161 7170 0
-8599 7161 7171 0
-8599 7161 7173 0
-8599 7162 0
-8599 7162 7170 0
-8599 7162 7171 0
-8599 7162 7173 0
8599 -7162 -7170 -7175 0
8599 -7161 -7171 -7175 0
8599 -7161 -7170 -7176 0
c ((1<=(aux1721 + aux1724 + aux1725))=tv=SATLiteral(8600))
-8600 -7161 -7170 -7175 0
8600 7175 0
8600 7170 0
8600 7171 0
8600 7173 0
8600 7161 0
8600 7161 7170 0
8600 7161 7171 0
8600 7161 7173 0
8600 7162 0
8600 7162 7170 0
8600 7162 7171 0
8600 7162 7173 0
c (((aux1727 + aux1730 + aux1731)<=1)=tv=SATLiteral(8601))
-8601 7200 0
-8601 7194 7199 0
-8601 7195 0
-8601 7197 0
-8601 7185 7199 0
-8601 7185 7194 0
-8601 7185 7195 0
-8601 7185 7197 0
-8601 7186 0
-8601 7186 7194 0
-8601 7186 7195 0
-8601 7186 7197 0
8601 -7186 -7194 -7199 0
8601 -7185 -7195 -7199 0
8601 -7185 -7194 -7200 0
c ((1<=(aux1727 + aux1730 + aux1731))=tv=SATLiteral(8602))
-8602 -7185 -7194 -7199 0
8602 7199 0
8602 7194 0
8602 7195 0
8602 7197 0
8602 7185 0
8602 7185 7194 0
8602 7185 7195 0
8602 7185 7197 0
8602 7186 0
8602 7186 7194 0
8602 7186 7195 0
8602 7186 7197 0
c (((aux1733 + aux1736 + aux1737)<=1)=tv=SATLiteral(8603))
-8603 7224 0
-8603 7218 7223 0
-8603 7219 0
-8603 7221 0
-8603 7209 7223 0
-8603 7209 7218 0
-8603 7209 7219 0
-8603 7209 7221 0
-8603 7210 0
-8603 7210 7218 0
-8603 7210 7219 0
-8603 7210 7221 0
8603 -7210 -7218 -7223 0
8603 -7209 -7219 -7223 0
8603 -7209 -7218 -7224 0
c ((1<=(aux1733 + aux1736 + aux1737))=tv=SATLiteral(8604))
-8604 -7209 -7218 -7223 0
8604 7223 0
8604 7218 0
8604 7219 0
8604 7221 0
8604 7209 0
8604 7209 7218 0
8604 7209 7219 0
8604 7209 7221 0
8604 7210 0
8604 7210 7218 0
8604 7210 7219 0
8604 7210 7221 0
c (((aux1739 + aux1742 + aux1743)<=1)=tv=SATLiteral(8605))
-8605 7248 0
-8605 7242 7247 0
-8605 7243 0
-8605 7245 0
-8605 7233 7247 0
-8605 7233 7242 0
-8605 7233 7243 0
-8605 7233 7245 0
-8605 7234 0
-8605 7234 7242 0
-8605 7234 7243 0
-8605 7234 7245 0
8605 -7234 -7242 -7247 0
8605 -7233 -7243 -7247 0
8605 -7233 -7242 -7248 0
c ((1<=(aux1739 + aux1742 + aux1743))=tv=SATLiteral(8606))
-8606 -7233 -7242 -7247 0
8606 7247 0
8606 7242 0
8606 7243 0
8606 7245 0
8606 7233 0
8606 7233 7242 0
8606 7233 7243 0
8606 7233 7245 0
8606 7234 0
8606 7234 7242 0
8606 7234 7243 0
8606 7234 7245 0
c (((aux1745 + aux1748 + aux1749)<=1)=tv=SATLiteral(8607))
-8607 7272 0
-8607 7266 7271 0
-8607 7267 0
-8607 7269 0
-8607 7257 7271 0
-8607 7257 7266 0
-8607 7257 7267 0
-8607 7257 7269 0
-8607 7258 0
-8607 7258 7266 0
-8607 7258 7267 0
-8607 7258 7269 0
8607 -7258 -7266 -7271 0
8607 -7257 -7267 -7271 0
8607 -7257 -7266 -7272 0
c ((1<=(aux1745 + aux1748 + aux1749))=tv=SATLiteral(8608))
-8608 -7257 -7266 -7271 0
8608 7271 0
8608 7266 0
8608 7267 0
8608 7269 0
8608 7257 0
8608 7257 7266 0
8608 7257 7267 0
8608 7257 7269 0
8608 7258 0
8608 7258 7266 0
8608 7258 7267 0
8608 7258 7269 0
c (((aux1751 + aux1754 + aux1755)<=1)=tv=SATLiteral(8609))
-8609 7296 0
-8609 7290 7295 0
-8609 7291 0
-8609 7293 0
-8609 7281 7295 0
-8609 7281 7290 0
-8609 7281 7291 0
-8609 7281 7293 0
-8609 7282 0
-8609 7282 7290 0
-8609 7282 7291 0
-8609 7282 7293 0
8609 -7282 -7290 -7295 0
8609 -7281 -7291 -7295 0
8609 -7281 -7290 -7296 0
c ((1<=(aux1751 + aux1754 + aux1755))=tv=SATLiteral(8610))
-8610 -7281 -7290 -7295 0
8610 7295 0
8610 7290 0
8610 7291 0
8610 7293 0
8610 7281 0
8610 7281 7290 0
8610 7281 7291 0
8610 7281 7293 0
8610 7282 0
8610 7282 7290 0
8610 7282 7291 0
8610 7282 7293 0
c (((aux1757 + aux1760 + aux1761)<=1)=tv=SATLiteral(8611))
-8611 7320 0
-8611 7314 7319 0
-8611 7315 0
-8611 7317 0
-8611 7305 7319 0
-8611 7305 7314 0
-8611 7305 7315 0
-8611 7305 7317 0
-8611 7306 0
-8611 7306 7314 0
-8611 7306 7315 0
-8611 7306 7317 0
8611 -7306 -7314 -7319 0
8611 -7305 -7315 -7319 0
8611 -7305 -7314 -7320 0
c ((1<=(aux1757 + aux1760 + aux1761))=tv=SATLiteral(8612))
-8612 -7305 -7314 -7319 0
8612 7319 0
8612 7314 0
8612 7315 0
8612 7317 0
8612 7305 0
8612 7305 7314 0
8612 7305 7315 0
8612 7305 7317 0
8612 7306 0
8612 7306 7314 0
8612 7306 7315 0
8612 7306 7317 0
c (((aux1763 + aux1766 + aux1767)<=1)=tv=SATLiteral(8613))
-8613 7344 0
-8613 7338 7343 0
-8613 7339 0
-8613 7341 0
-8613 7329 7343 0
-8613 7329 7338 0
-8613 7329 7339 0
-8613 7329 7341 0
-8613 7330 0
-8613 7330 7338 0
-8613 7330 7339 0
-8613 7330 7341 0
8613 -7330 -7338 -7343 0
8613 -7329 -7339 -7343 0
8613 -7329 -7338 -7344 0
c ((1<=(aux1763 + aux1766 + aux1767))=tv=SATLiteral(8614))
-8614 -7329 -7338 -7343 0
8614 7343 0
8614 7338 0
8614 7339 0
8614 7341 0
8614 7329 0
8614 7329 7338 0
8614 7329 7339 0
8614 7329 7341 0
8614 7330 0
8614 7330 7338 0
8614 7330 7339 0
8614 7330 7341 0
c (((aux1769 + aux1772 + aux1773)<=1)=tv=SATLiteral(8615))
-8615 7368 0
-8615 7362 7367 0
-8615 7363 0
-8615 7365 0
-8615 7353 7367 0
-8615 7353 7362 0
-8615 7353 7363 0
-8615 7353 7365 0
-8615 7354 0
-8615 7354 7362 0
-8615 7354 7363 0
-8615 7354 7365 0
8615 -7354 -7362 -7367 0
8615 -7353 -7363 -7367 0
8615 -7353 -7362 -7368 0
c ((1<=(aux1769 + aux1772 + aux1773))=tv=SATLiteral(8616))
-8616 -7353 -7362 -7367 0
8616 7367 0
8616 7362 0
8616 7363 0
8616 7365 0
8616 7353 0
8616 7353 7362 0
8616 7353 7363 0
8616 7353 7365 0
8616 7354 0
8616 7354 7362 0
8616 7354 7363 0
8616 7354 7365 0
c (((aux1775 + aux1778 + aux1779)<=1)=tv=SATLiteral(8617))
-8617 7392 0
-8617 7386 7391 0
-8617 7387 0
-8617 7389 0
-8617 7377 7391 0
-8617 7377 7386 0
-8617 7377 7387 0
-8617 7377 7389 0
-8617 7378 0
-8617 7378 7386 0
-8617 7378 7387 0
-8617 7378 7389 0
8617 -7378 -7386 -7391 0
8617 -7377 -7387 -7391 0
8617 -7377 -7386 -7392 0
c ((1<=(aux1775 + aux1778 + aux1779))=tv=SATLiteral(8618))
-8618 -7377 -7386 -7391 0
8618 7391 0
8618 7386 0
8618 7387 0
8618 7389 0
8618 7377 0
8618 7377 7386 0
8618 7377 7387 0
8618 7377 7389 0
8618 7378 0
8618 7378 7386 0
8618 7378 7387 0
8618 7378 7389 0
c (((aux1781 + aux1784 + aux1785)<=1)=tv=SATLiteral(8619))
-8619 7416 0
-8619 7410 7415 0
-8619 7411 0
-8619 7413 0
-8619 7401 7415 0
-8619 7401 7410 0
-8619 7401 7411 0
-8619 7401 7413 0
-8619 7402 0
-8619 7402 7410 0
-8619 7402 7411 0
-8619 7402 7413 0
8619 -7402 -7410 -7415 0
8619 -7401 -7411 -7415 0
8619 -7401 -7410 -7416 0
c ((1<=(aux1781 + aux1784 + aux1785))=tv=SATLiteral(8620))
-8620 -7401 -7410 -7415 0
8620 7415 0
8620 7410 0
8620 7411 0
8620 7413 0
8620 7401 0
8620 7401 7410 0
8620 7401 7411 0
8620 7401 7413 0
8620 7402 0
8620 7402 7410 0
8620 7402 7411 0
8620 7402 7413 0
c (((aux1787 + aux1790 + aux1791)<=1)=tv=SATLiteral(8621))
-8621 7440 0
-8621 7434 7439 0
-8621 7435 0
-8621 7437 0
-8621 7425 7439 0
-8621 7425 7434 0
-8621 7425 7435 0
-8621 7425 7437 0
-8621 7426 0
-8621 7426 7434 0
-8621 7426 7435 0
-8621 7426 7437 0
8621 -7426 -7434 -7439 0
8621 -7425 -7435 -7439 0
8621 -7425 -7434 -7440 0
c ((1<=(aux1787 + aux1790 + aux1791))=tv=SATLiteral(8622))
-8622 -7425 -7434 -7439 0
8622 7439 0
8622 7434 0
8622 7435 0
8622 7437 0
8622 7425 0
8622 7425 7434 0
8622 7425 7435 0
8622 7425 7437 0
8622 7426 0
8622 7426 7434 0
8622 7426 7435 0
8622 7426 7437 0
c (((aux1793 + aux1796 + aux1797)<=1)=tv=SATLiteral(8623))
-8623 7464 0
-8623 7458 7463 0
-8623 7459 0
-8623 7461 0
-8623 7449 7463 0
-8623 7449 7458 0
-8623 7449 7459 0
-8623 7449 7461 0
-8623 7450 0
-8623 7450 7458 0
-8623 7450 7459 0
-8623 7450 7461 0
8623 -7450 -7458 -7463 0
8623 -7449 -7459 -7463 0
8623 -7449 -7458 -7464 0
c ((1<=(aux1793 + aux1796 + aux1797))=tv=SATLiteral(8624))
-8624 -7449 -7458 -7463 0
8624 7463 0
8624 7458 0
8624 7459 0
8624 7461 0
8624 7449 0
8624 7449 7458 0
8624 7449 7459 0
8624 7449 7461 0
8624 7450 0
8624 7450 7458 0
8624 7450 7459 0
8624 7450 7461 0
c (((aux1799 + aux1802 + aux1803)<=1)=tv=SATLiteral(8625))
-8625 7488 0
-8625 7482 7487 0
-8625 7483 0
-8625 7485 0
-8625 7473 7487 0
-8625 7473 7482 0
-8625 7473 7483 0
-8625 7473 7485 0
-8625 7474 0
-8625 7474 7482 0
-8625 7474 7483 0
-8625 7474 7485 0
8625 -7474 -7482 -7487 0
8625 -7473 -7483 -7487 0
8625 -7473 -7482 -7488 0
c ((1<=(aux1799 + aux1802 + aux1803))=tv=SATLiteral(8626))
-8626 -7473 -7482 -7487 0
8626 7487 0
8626 7482 0
8626 7483 0
8626 7485 0
8626 7473 0
8626 7473 7482 0
8626 7473 7483 0
8626 7473 7485 0
8626 7474 0
8626 7474 7482 0
8626 7474 7483 0
8626 7474 7485 0
c (((aux1805 + aux1808 + aux1809)<=1)=tv=SATLiteral(8627))
-8627 7512 0
-8627 7506 7511 0
-8627 7507 0
-8627 7509 0
-8627 7497 7511 0
-8627 7497 7506 0
-8627 7497 7507 0
-8627 7497 7509 0
-8627 7498 0
-8627 7498 7506 0
-8627 7498 7507 0
-8627 7498 7509 0
8627 -7498 -7506 -7511 0
8627 -7497 -7507 -7511 0
8627 -7497 -7506 -7512 0
c ((1<=(aux1805 + aux1808 + aux1809))=tv=SATLiteral(8628))
-8628 -7497 -7506 -7511 0
8628 7511 0
8628 7506 0
8628 7507 0
8628 7509 0
8628 7497 0
8628 7497 7506 0
8628 7497 7507 0
8628 7497 7509 0
8628 7498 0
8628 7498 7506 0
8628 7498 7507 0
8628 7498 7509 0
c (((aux1811 + aux1814 + aux1815)<=1)=tv=SATLiteral(8629))
-8629 7536 0
-8629 7530 7535 0
-8629 7531 0
-8629 7533 0
-8629 7521 7535 0
-8629 7521 7530 0
-8629 7521 7531 0
-8629 7521 7533 0
-8629 7522 0
-8629 7522 7530 0
-8629 7522 7531 0
-8629 7522 7533 0
8629 -7522 -7530 -7535 0
8629 -7521 -7531 -7535 0
8629 -7521 -7530 -7536 0
c ((1<=(aux1811 + aux1814 + aux1815))=tv=SATLiteral(8630))
-8630 -7521 -7530 -7535 0
8630 7535 0
8630 7530 0
8630 7531 0
8630 7533 0
8630 7521 0
8630 7521 7530 0
8630 7521 7531 0
8630 7521 7533 0
8630 7522 0
8630 7522 7530 0
8630 7522 7531 0
8630 7522 7533 0
c (((aux1817 + aux1820 + aux1821)<=1)=tv=SATLiteral(8631))
-8631 7560 0
-8631 7554 7559 0
-8631 7555 0
-8631 7557 0
-8631 7545 7559 0
-8631 7545 7554 0
-8631 7545 7555 0
-8631 7545 7557 0
-8631 7546 0
-8631 7546 7554 0
-8631 7546 7555 0
-8631 7546 7557 0
8631 -7546 -7554 -7559 0
8631 -7545 -7555 -7559 0
8631 -7545 -7554 -7560 0
c ((1<=(aux1817 + aux1820 + aux1821))=tv=SATLiteral(8632))
-8632 -7545 -7554 -7559 0
8632 7559 0
8632 7554 0
8632 7555 0
8632 7557 0
8632 7545 0
8632 7545 7554 0
8632 7545 7555 0
8632 7545 7557 0
8632 7546 0
8632 7546 7554 0
8632 7546 7555 0
8632 7546 7557 0
c (((aux1823 + aux1826 + aux1827)<=1)=tv=SATLiteral(8633))
-8633 7584 0
-8633 7578 7583 0
-8633 7579 0
-8633 7581 0
-8633 7569 7583 0
-8633 7569 7578 0
-8633 7569 7579 0
-8633 7569 7581 0
-8633 7570 0
-8633 7570 7578 0
-8633 7570 7579 0
-8633 7570 7581 0
8633 -7570 -7578 -7583 0
8633 -7569 -7579 -7583 0
8633 -7569 -7578 -7584 0
c ((1<=(aux1823 + aux1826 + aux1827))=tv=SATLiteral(8634))
-8634 -7569 -7578 -7583 0
8634 7583 0
8634 7578 0
8634 7579 0
8634 7581 0
8634 7569 0
8634 7569 7578 0
8634 7569 7579 0
8634 7569 7581 0
8634 7570 0
8634 7570 7578 0
8634 7570 7579 0
8634 7570 7581 0
c (((aux1829 + aux1832 + aux1833)<=1)=tv=SATLiteral(8635))
-8635 7608 0
-8635 7602 7607 0
-8635 7603 0
-8635 7605 0
-8635 7593 7607 0
-8635 7593 7602 0
-8635 7593 7603 0
-8635 7593 7605 0
-8635 7594 0
-8635 7594 7602 0
-8635 7594 7603 0
-8635 7594 7605 0
8635 -7594 -7602 -7607 0
8635 -7593 -7603 -7607 0
8635 -7593 -7602 -7608 0
c ((1<=(aux1829 + aux1832 + aux1833))=tv=SATLiteral(8636))
-8636 -7593 -7602 -7607 0
8636 7607 0
8636 7602 0
8636 7603 0
8636 7605 0
8636 7593 0
8636 7593 7602 0
8636 7593 7603 0
8636 7593 7605 0
8636 7594 0
8636 7594 7602 0
8636 7594 7603 0
8636 7594 7605 0
c (((aux1835 + aux1838 + aux1839)<=1)=tv=SATLiteral(8637))
-8637 7632 0
-8637 7626 7631 0
-8637 7627 0
-8637 7629 0
-8637 7617 7631 0
-8637 7617 7626 0
-8637 7617 7627 0
-8637 7617 7629 0
-8637 7618 0
-8637 7618 7626 0
-8637 7618 7627 0
-8637 7618 7629 0
8637 -7618 -7626 -7631 0
8637 -7617 -7627 -7631 0
8637 -7617 -7626 -7632 0
c ((1<=(aux1835 + aux1838 + aux1839))=tv=SATLiteral(8638))
-8638 -7617 -7626 -7631 0
8638 7631 0
8638 7626 0
8638 7627 0
8638 7629 0
8638 7617 0
8638 7617 7626 0
8638 7617 7627 0
8638 7617 7629 0
8638 7618 0
8638 7618 7626 0
8638 7618 7627 0
8638 7618 7629 0
c (((aux1841 + aux1844 + aux1845)<=1)=tv=SATLiteral(8639))
-8639 7656 0
-8639 7650 7655 0
-8639 7651 0
-8639 7653 0
-8639 7641 7655 0
-8639 7641 7650 0
-8639 7641 7651 0
-8639 7641 7653 0
-8639 7642 0
-8639 7642 7650 0
-8639 7642 7651 0
-8639 7642 7653 0
8639 -7642 -7650 -7655 0
8639 -7641 -7651 -7655 0
8639 -7641 -7650 -7656 0
c ((1<=(aux1841 + aux1844 + aux1845))=tv=SATLiteral(8640))
-8640 -7641 -7650 -7655 0
8640 7655 0
8640 7650 0
8640 7651 0
8640 7653 0
8640 7641 0
8640 7641 7650 0
8640 7641 7651 0
8640 7641 7653 0
8640 7642 0
8640 7642 7650 0
8640 7642 7651 0
8640 7642 7653 0
c (((aux1847 + aux1850 + aux1851)<=1)=tv=SATLiteral(8641))
-8641 7680 0
-8641 7674 7679 0
-8641 7675 0
-8641 7677 0
-8641 7665 7679 0
-8641 7665 7674 0
-8641 7665 7675 0
-8641 7665 7677 0
-8641 7666 0
-8641 7666 7674 0
-8641 7666 7675 0
-8641 7666 7677 0
8641 -7666 -7674 -7679 0
8641 -7665 -7675 -7679 0
8641 -7665 -7674 -7680 0
c ((1<=(aux1847 + aux1850 + aux1851))=tv=SATLiteral(8642))
-8642 -7665 -7674 -7679 0
8642 7679 0
8642 7674 0
8642 7675 0
8642 7677 0
8642 7665 0
8642 7665 7674 0
8642 7665 7675 0
8642 7665 7677 0
8642 7666 0
8642 7666 7674 0
8642 7666 7675 0
8642 7666 7677 0
c (((aux1853 + aux1856 + aux1857)<=1)=tv=SATLiteral(8643))
-8643 7704 0
-8643 7698 7703 0
-8643 7699 0
-8643 7701 0
-8643 7689 7703 0
-8643 7689 7698 0
-8643 7689 7699 0
-8643 7689 7701 0
-8643 7690 0
-8643 7690 7698 0
-8643 7690 7699 0
-8643 7690 7701 0
8643 -7690 -7698 -7703 0
8643 -7689 -7699 -7703 0
8643 -7689 -7698 -7704 0
c ((1<=(aux1853 + aux1856 + aux1857))=tv=SATLiteral(8644))
-8644 -7689 -7698 -7703 0
8644 7703 0
8644 7698 0
8644 7699 0
8644 7701 0
8644 7689 0
8644 7689 7698 0
8644 7689 7699 0
8644 7689 7701 0
8644 7690 0
8644 7690 7698 0
8644 7690 7699 0
8644 7690 7701 0
c (((aux1859 + aux1862 + aux1863)<=1)=tv=SATLiteral(8645))
-8645 7728 0
-8645 7722 7727 0
-8645 7723 0
-8645 7725 0
-8645 7713 7727 0
-8645 7713 7722 0
-8645 7713 7723 0
-8645 7713 7725 0
-8645 7714 0
-8645 7714 7722 0
-8645 7714 7723 0
-8645 7714 7725 0
8645 -7714 -7722 -7727 0
8645 -7713 -7723 -7727 0
8645 -7713 -7722 -7728 0
c ((1<=(aux1859 + aux1862 + aux1863))=tv=SATLiteral(8646))
-8646 -7713 -7722 -7727 0
8646 7727 0
8646 7722 0
8646 7723 0
8646 7725 0
8646 7713 0
8646 7713 7722 0
8646 7713 7723 0
8646 7713 7725 0
8646 7714 0
8646 7714 7722 0
8646 7714 7723 0
8646 7714 7725 0
c (((aux1865 + aux1868 + aux1869)<=1)=tv=SATLiteral(8647))
-8647 7752 0
-8647 7746 7751 0
-8647 7747 0
-8647 7749 0
-8647 7737 7751 0
-8647 7737 7746 0
-8647 7737 7747 0
-8647 7737 7749 0
-8647 7738 0
-8647 7738 7746 0
-8647 7738 7747 0
-8647 7738 7749 0
8647 -7738 -7746 -7751 0
8647 -7737 -7747 -7751 0
8647 -7737 -7746 -7752 0
c ((1<=(aux1865 + aux1868 + aux1869))=tv=SATLiteral(8648))
-8648 -7737 -7746 -7751 0
8648 7751 0
8648 7746 0
8648 7747 0
8648 7749 0
8648 7737 0
8648 7737 7746 0
8648 7737 7747 0
8648 7737 7749 0
8648 7738 0
8648 7738 7746 0
8648 7738 7747 0
8648 7738 7749 0
c (((aux1871 + aux1874 + aux1875)<=1)=tv=SATLiteral(8649))
-8649 7776 0
-8649 7770 7775 0
-8649 7771 0
-8649 7773 0
-8649 7761 7775 0
-8649 7761 7770 0
-8649 7761 7771 0
-8649 7761 7773 0
-8649 7762 0
-8649 7762 7770 0
-8649 7762 7771 0
-8649 7762 7773 0
8649 -7762 -7770 -7775 0
8649 -7761 -7771 -7775 0
8649 -7761 -7770 -7776 0
c ((1<=(aux1871 + aux1874 + aux1875))=tv=SATLiteral(8650))
-8650 -7761 -7770 -7775 0
8650 7775 0
8650 7770 0
8650 7771 0
8650 7773 0
8650 7761 0
8650 7761 7770 0
8650 7761 7771 0
8650 7761 7773 0
8650 7762 0
8650 7762 7770 0
8650 7762 7771 0
8650 7762 7773 0
c (((aux1877 + aux1880 + aux1881)<=1)=tv=SATLiteral(8651))
-8651 7800 0
-8651 7794 7799 0
-8651 7795 0
-8651 7797 0
-8651 7785 7799 0
-8651 7785 7794 0
-8651 7785 7795 0
-8651 7785 7797 0
-8651 7786 0
-8651 7786 7794 0
-8651 7786 7795 0
-8651 7786 7797 0
8651 -7786 -7794 -7799 0
8651 -7785 -7795 -7799 0
8651 -7785 -7794 -7800 0
c ((1<=(aux1877 + aux1880 + aux1881))=tv=SATLiteral(8652))
-8652 -7785 -7794 -7799 0
8652 7799 0
8652 7794 0
8652 7795 0
8652 7797 0
8652 7785 0
8652 7785 7794 0
8652 7785 7795 0
8652 7785 7797 0
8652 7786 0
8652 7786 7794 0
8652 7786 7795 0
8652 7786 7797 0
c (((aux1883 + aux1886 + aux1887)<=1)=tv=SATLiteral(8653))
-8653 7824 0
-8653 7818 7823 0
-8653 7819 0
-8653 7821 0
-8653 7809 7823 0
-8653 7809 7818 0
-8653 7809 7819 0
-8653 7809 7821 0
-8653 7810 0
-8653 7810 7818 0
-8653 7810 7819 0
-8653 7810 7821 0
8653 -7810 -7818 -7823 0
8653 -7809 -7819 -7823 0
8653 -7809 -7818 -7824 0
c ((1<=(aux1883 + aux1886 + aux1887))=tv=SATLiteral(8654))
-8654 -7809 -7818 -7823 0
8654 7823 0
8654 7818 0
8654 7819 0
8654 7821 0
8654 7809 0
8654 7809 7818 0
8654 7809 7819 0
8654 7809 7821 0
8654 7810 0
8654 7810 7818 0
8654 7810 7819 0
8654 7810 7821 0
c (((aux1889 + aux1892 + aux1893)<=1)=tv=SATLiteral(8655))
-8655 7848 0
-8655 7842 7847 0
-8655 7843 0
-8655 7845 0
-8655 7833 7847 0
-8655 7833 7842 0
-8655 7833 7843 0
-8655 7833 7845 0
-8655 7834 0
-8655 7834 7842 0
-8655 7834 7843 0
-8655 7834 7845 0
8655 -7834 -7842 -7847 0
8655 -7833 -7843 -7847 0
8655 -7833 -7842 -7848 0
c ((1<=(aux1889 + aux1892 + aux1893))=tv=SATLiteral(8656))
-8656 -7833 -7842 -7847 0
8656 7847 0
8656 7842 0
8656 7843 0
8656 7845 0
8656 7833 0
8656 7833 7842 0
8656 7833 7843 0
8656 7833 7845 0
8656 7834 0
8656 7834 7842 0
8656 7834 7843 0
8656 7834 7845 0
c ((SATLiteral(8115) /\ SATLiteral(8116))=tv=SATLiteral(1300))
1300 -8115 -8116 0
8115 -1300 0
8116 -1300 0
c ((SATLiteral(8117) /\ SATLiteral(8118))=tv=SATLiteral(1301))
1301 -8117 -8118 0
8117 -1301 0
8118 -1301 0
c ((SATLiteral(8119) /\ SATLiteral(8120))=tv=SATLiteral(1302))
1302 -8119 -8120 0
8119 -1302 0
8120 -1302 0
c ((SATLiteral(8121) /\ SATLiteral(8122))=tv=SATLiteral(1303))
1303 -8121 -8122 0
8121 -1303 0
8122 -1303 0
c ((SATLiteral(8123) /\ SATLiteral(8124))=tv=SATLiteral(1304))
1304 -8123 -8124 0
8123 -1304 0
8124 -1304 0
c ((SATLiteral(8125) /\ SATLiteral(8126))=tv=SATLiteral(1305))
1305 -8125 -8126 0
8125 -1305 0
8126 -1305 0
c ((SATLiteral(8127) /\ SATLiteral(8128))=tv=SATLiteral(1306))
1306 -8127 -8128 0
8127 -1306 0
8128 -1306 0
c ((SATLiteral(8129) /\ SATLiteral(8130))=tv=SATLiteral(1307))
1307 -8129 -8130 0
8129 -1307 0
8130 -1307 0
c ((SATLiteral(8131) /\ SATLiteral(8132))=tv=SATLiteral(1308))
1308 -8131 -8132 0
8131 -1308 0
8132 -1308 0
c ((SATLiteral(8133) /\ SATLiteral(8134))=tv=SATLiteral(1309))
1309 -8133 -8134 0
8133 -1309 0
8134 -1309 0
c ((SATLiteral(8135) /\ SATLiteral(8136))=tv=SATLiteral(1310))
1310 -8135 -8136 0
8135 -1310 0
8136 -1310 0
c ((SATLiteral(8137) /\ SATLiteral(8138))=tv=SATLiteral(1311))
1311 -8137 -8138 0
8137 -1311 0
8138 -1311 0
c ((SATLiteral(8139) /\ SATLiteral(8140))=tv=SATLiteral(1312))
1312 -8139 -8140 0
8139 -1312 0
8140 -1312 0
c ((SATLiteral(8141) /\ SATLiteral(8142))=tv=SATLiteral(1313))
1313 -8141 -8142 0
8141 -1313 0
8142 -1313 0
c ((SATLiteral(8143) /\ SATLiteral(8144))=tv=SATLiteral(1314))
1314 -8143 -8144 0
8143 -1314 0
8144 -1314 0
c ((SATLiteral(8145) /\ SATLiteral(8146))=tv=SATLiteral(1315))
1315 -8145 -8146 0
8145 -1315 0
8146 -1315 0
c ((SATLiteral(8147) /\ SATLiteral(8148))=tv=SATLiteral(1316))
1316 -8147 -8148 0
8147 -1316 0
8148 -1316 0
c ((SATLiteral(8149) /\ SATLiteral(8150))=tv=SATLiteral(1317))
1317 -8149 -8150 0
8149 -1317 0
8150 -1317 0
c ((SATLiteral(8151) /\ SATLiteral(8152))=tv=SATLiteral(1318))
1318 -8151 -8152 0
8151 -1318 0
8152 -1318 0
c ((SATLiteral(8153) /\ SATLiteral(8154))=tv=SATLiteral(1319))
1319 -8153 -8154 0
8153 -1319 0
8154 -1319 0
c ((SATLiteral(8155) /\ SATLiteral(8156))=tv=SATLiteral(1320))
1320 -8155 -8156 0
8155 -1320 0
8156 -1320 0
c ((SATLiteral(8157) /\ SATLiteral(8158))=tv=SATLiteral(1321))
1321 -8157 -8158 0
8157 -1321 0
8158 -1321 0
c ((SATLiteral(8159) /\ SATLiteral(8160))=tv=SATLiteral(1322))
1322 -8159 -8160 0
8159 -1322 0
8160 -1322 0
c ((SATLiteral(8161) /\ SATLiteral(8162))=tv=SATLiteral(1323))
1323 -8161 -8162 0
8161 -1323 0
8162 -1323 0
c ((SATLiteral(8163) /\ SATLiteral(8164))=tv=SATLiteral(1324))
1324 -8163 -8164 0
8163 -1324 0
8164 -1324 0
c ((SATLiteral(8165) /\ SATLiteral(8166))=tv=SATLiteral(1325))
1325 -8165 -8166 0
8165 -1325 0
8166 -1325 0
c ((SATLiteral(8167) /\ SATLiteral(8168))=tv=SATLiteral(1326))
1326 -8167 -8168 0
8167 -1326 0
8168 -1326 0
c ((SATLiteral(8169) /\ SATLiteral(8170))=tv=SATLiteral(1327))
1327 -8169 -8170 0
8169 -1327 0
8170 -1327 0
c ((x_00001_00001 != x_00001_00002)=tv=SATLiteral(1328))
-2 17 1328 0
-4 19 1328 0
-6 21 1328 0
-8 23 1328 0
-10 25 1328 0
-12 27 1328 0
-14 29 1328 0
-16 31 1328 0
15 -30 1328 0
-17 2 1328 0
-19 4 1328 0
-21 6 1328 0
-23 8 1328 0
-25 10 1328 0
-27 12 1328 0
-29 14 1328 0
-31 16 1328 0
30 -15 1328 0
-2 -17 -1328 0
-4 -19 -1328 0
-6 -21 -1328 0
-8 -23 -1328 0
-10 -25 -1328 0
-12 -27 -1328 0
-14 -29 -1328 0
-16 -31 -1328 0
15 30 -1328 0
c ((x_00002_00003 != x_00001_00003)=tv=SATLiteral(1329))
-167 32 1329 0
-169 34 1329 0
-171 36 1329 0
-173 38 1329 0
-175 40 1329 0
-177 42 1329 0
-179 44 1329 0
-181 46 1329 0
180 -45 1329 0
-32 167 1329 0
-34 169 1329 0
-36 171 1329 0
-38 173 1329 0
-40 175 1329 0
-42 177 1329 0
-44 179 1329 0
-46 181 1329 0
45 -180 1329 0
-167 -32 -1329 0
-169 -34 -1329 0
-171 -36 -1329 0
-173 -38 -1329 0
-175 -40 -1329 0
-177 -42 -1329 0
-179 -44 -1329 0
-181 -46 -1329 0
180 45 -1329 0
c ((x_00001_00006 != x_00001_00007)=tv=SATLiteral(1330))
-77 92 1330 0
-79 94 1330 0
-81 96 1330 0
-83 98 1330 0
-85 100 1330 0
-87 102 1330 0
-89 104 1330 0
-91 106 1330 0
90 -105 1330 0
-92 77 1330 0
-94 79 1330 0
-96 81 1330 0
-98 83 1330 0
-100 85 1330 0
-102 87 1330 0
-104 89 1330 0
-106 91 1330 0
105 -90 1330 0
-77 -92 -1330 0
-79 -94 -1330 0
-81 -96 -1330 0
-83 -98 -1330 0
-85 -100 -1330 0
-87 -102 -1330 0
-89 -104 -1330 0
-91 -106 -1330 0
90 105 -1330 0
c ((x_00002_00001 != x_00002_00002)=tv=SATLiteral(1331))
-137 152 1331 0
-139 154 1331 0
-141 156 1331 0
-143 158 1331 0
-145 160 1331 0
-147 162 1331 0
-149 164 1331 0
-151 166 1331 0
150 -165 1331 0
-152 137 1331 0
-154 139 1331 0
-156 141 1331 0
-158 143 1331 0
-160 145 1331 0
-162 147 1331 0
-164 149 1331 0
-166 151 1331 0
165 -150 1331 0
-137 -152 -1331 0
-139 -154 -1331 0
-141 -156 -1331 0
-143 -158 -1331 0
-145 -160 -1331 0
-147 -162 -1331 0
-149 -164 -1331 0
-151 -166 -1331 0
150 165 -1331 0
c ((x_00002_00005 != x_00002_00006)=tv=SATLiteral(1332))
-197 212 1332 0
-199 214 1332 0
-201 216 1332 0
-203 218 1332 0
-205 220 1332 0
-207 222 1332 0
-209 224 1332 0
-211 226 1332 0
210 -225 1332 0
-212 197 1332 0
-214 199 1332 0
-216 201 1332 0
-218 203 1332 0
-220 205 1332 0
-222 207 1332 0
-224 209 1332 0
-226 211 1332 0
225 -210 1332 0
-197 -212 -1332 0
-199 -214 -1332 0
-201 -216 -1332 0
-203 -218 -1332 0
-205 -220 -1332 0
-207 -222 -1332 0
-209 -224 -1332 0
-211 -226 -1332 0
210 225 -1332 0
c ((x_00003_00005 != x_00004_00005)=tv=SATLiteral(1333))
-332 467 1333 0
-334 469 1333 0
-336 471 1333 0
-338 473 1333 0
-340 475 1333 0
-342 477 1333 0
-344 479 1333 0
-346 481 1333 0
345 -480 1333 0
-467 332 1333 0
-469 334 1333 0
-471 336 1333 0
-473 338 1333 0
-475 340 1333 0
-477 342 1333 0
-479 344 1333 0
-481 346 1333 0
480 -345 1333 0
-332 -467 -1333 0
-334 -469 -1333 0
-336 -471 -1333 0
-338 -473 -1333 0
-340 -475 -1333 0
-342 -477 -1333 0
-344 -479 -1333 0
-346 -481 -1333 0
345 480 -1333 0
c ((x_00003_00009 != x_00004_00009)=tv=SATLiteral(1334))
-392 527 1334 0
-394 529 1334 0
-396 531 1334 0
-398 533 1334 0
-400 535 1334 0
-402 537 1334 0
-404 539 1334 0
-406 541 1334 0
405 -540 1334 0
-527 392 1334 0
-529 394 1334 0
-531 396 1334 0
-533 398 1334 0
-535 400 1334 0
-537 402 1334 0
-539 404 1334 0
-541 406 1334 0
540 -405 1334 0
-392 -527 -1334 0
-394 -529 -1334 0
-396 -531 -1334 0
-398 -533 -1334 0
-400 -535 -1334 0
-402 -537 -1334 0
-404 -539 -1334 0
-406 -541 -1334 0
405 540 -1334 0
c ((x_00004_00008 != x_00005_00008)=tv=SATLiteral(1335))
-512 647 1335 0
-514 649 1335 0
-516 651 1335 0
-518 653 1335 0
-520 655 1335 0
-522 657 1335 0
-524 659 1335 0
-526 661 1335 0
525 -660 1335 0
-647 512 1335 0
-649 514 1335 0
-651 516 1335 0
-653 518 1335 0
-655 520 1335 0
-657 522 1335 0
-659 524 1335 0
-661 526 1335 0
660 -525 1335 0
-512 -647 -1335 0
-514 -649 -1335 0
-516 -651 -1335 0
-518 -653 -1335 0
-520 -655 -1335 0
-522 -657 -1335 0
-524 -659 -1335 0
-526 -661 -1335 0
525 660 -1335 0
c ((x_00005_00006 != x_00005_00007)=tv=SATLiteral(1336))
-617 632 1336 0
-619 634 1336 0
-621 636 1336 0
-623 638 1336 0
-625 640 1336 0
-627 642 1336 0
-629 644 1336 0
-631 646 1336 0
630 -645 1336 0
-632 617 1336 0
-634 619 1336 0
-636 621 1336 0
-638 623 1336 0
-640 625 1336 0
-642 627 1336 0
-644 629 1336 0
-646 631 1336 0
645 -630 1336 0
-617 -632 -1336 0
-619 -634 -1336 0
-621 -636 -1336 0
-623 -638 -1336 0
-625 -640 -1336 0
-627 -642 -1336 0
-629 -644 -1336 0
-631 -646 -1336 0
630 645 -1336 0
c ((x_00007_00008 != x_00007_00009)=tv=SATLiteral(1337))
-917 932 1337 0
-919 934 1337 0
-921 936 1337 0
-923 938 1337 0
-925 940 1337 0
-927 942 1337 0
-929 944 1337 0
-931 946 1337 0
930 -945 1337 0
-932 917 1337 0
-934 919 1337 0
-936 921 1337 0
-938 923 1337 0
-940 925 1337 0
-942 927 1337 0
-944 929 1337 0
-946 931 1337 0
945 -930 1337 0
-917 -932 -1337 0
-919 -934 -1337 0
-921 -936 -1337 0
-923 -938 -1337 0
-925 -940 -1337 0
-927 -942 -1337 0
-929 -944 -1337 0
-931 -946 -1337 0
930 945 -1337 0
c ((x_00008_00008 != x_00009_00008)=tv=SATLiteral(1338))
-1052 1187 1338 0
-1054 1189 1338 0
-1056 1191 1338 0
-1058 1193 1338 0
-1060 1195 1338 0
-1062 1197 1338 0
-1064 1199 1338 0
-1066 1201 1338 0
1065 -1200 1338 0
-1187 1052 1338 0
-1189 1054 1338 0
-1191 1056 1338 0
-1193 1058 1338 0
-1195 1060 1338 0
-1197 1062 1338 0
-1199 1064 1338 0
-1201 1066 1338 0
1200 -1065 1338 0
-1052 -1187 -1338 0
-1054 -1189 -1338 0
-1056 -1191 -1338 0
-1058 -1193 -1338 0
-1060 -1195 -1338 0
-1062 -1197 -1338 0
-1064 -1199 -1338 0
-1066 -1201 -1338 0
1065 1200 -1338 0
c ((x_00008_00009 != x_00009_00009)=tv=SATLiteral(1339))
-1067 1202 1339 0
-1069 1204 1339 0
-1071 1206 1339 0
-1073 1208 1339 0
-1075 1210 1339 0
-1077 1212 1339 0
-1079 1214 1339 0
-1081 1216 1339 0
1080 -1215 1339 0
-1202 1067 1339 0
-1204 1069 1339 0
-1206 1071 1339 0
-1208 1073 1339 0
-1210 1075 1339 0
-1212 1077 1339 0
-1214 1079 1339 0
-1216 1081 1339 0
1215 -1080 1339 0
-1067 -1202 -1339 0
-1069 -1204 -1339 0
-1071 -1206 -1339 0
-1073 -1208 -1339 0
-1075 -1210 -1339 0
-1077 -1212 -1339 0
-1079 -1214 -1339 0
-1081 -1216 -1339 0
1080 1215 -1339 0
c ((SATLiteral(8171) /\ SATLiteral(8172))=tv=SATLiteral(1340))
1340 -8171 -8172 0
8171 -1340 0
8172 -1340 0
c ((SATLiteral(8173) /\ SATLiteral(8174))=tv=SATLiteral(1341))
1341 -8173 -8174 0
8173 -1341 0
8174 -1341 0
c ((SATLiteral(8175) /\ SATLiteral(8176))=tv=SATLiteral(1342))
1342 -8175 -8176 0
8175 -1342 0
8176 -1342 0
c ((SATLiteral(8177) /\ SATLiteral(8178))=tv=SATLiteral(1343))
1343 -8177 -8178 0
8177 -1343 0
8178 -1343 0
c ((SATLiteral(8179) /\ SATLiteral(8180))=tv=SATLiteral(1344))
1344 -8179 -8180 0
8179 -1344 0
8180 -1344 0
c ((SATLiteral(8181) /\ SATLiteral(8182))=tv=SATLiteral(1345))
1345 -8181 -8182 0
8181 -1345 0
8182 -1345 0
c ((SATLiteral(8183) /\ SATLiteral(8184))=tv=SATLiteral(1346))
1346 -8183 -8184 0
8183 -1346 0
8184 -1346 0
c ((SATLiteral(8185) /\ SATLiteral(8186))=tv=SATLiteral(1347))
1347 -8185 -8186 0
8185 -1347 0
8186 -1347 0
c ((SATLiteral(8187) /\ SATLiteral(8188))=tv=SATLiteral(1348))
1348 -8187 -8188 0
8187 -1348 0
8188 -1348 0
c ((SATLiteral(8189) /\ SATLiteral(8190))=tv=SATLiteral(1349))
1349 -8189 -8190 0
8189 -1349 0
8190 -1349 0
c ((SATLiteral(8191) /\ SATLiteral(8192))=tv=SATLiteral(1350))
1350 -8191 -8192 0
8191 -1350 0
8192 -1350 0
c ((SATLiteral(8193) /\ SATLiteral(8194))=tv=SATLiteral(1351))
1351 -8193 -8194 0
8193 -1351 0
8194 -1351 0
c ((SATLiteral(8195) /\ SATLiteral(8196))=tv=SATLiteral(1352))
1352 -8195 -8196 0
8195 -1352 0
8196 -1352 0
c ((SATLiteral(8197) /\ SATLiteral(8198))=tv=SATLiteral(1353))
1353 -8197 -8198 0
8197 -1353 0
8198 -1353 0
c ((SATLiteral(8199) /\ SATLiteral(8200))=tv=SATLiteral(1354))
1354 -8199 -8200 0
8199 -1354 0
8200 -1354 0
c ((SATLiteral(8201) /\ SATLiteral(8202))=tv=SATLiteral(1355))
1355 -8201 -8202 0
8201 -1355 0
8202 -1355 0
c ((SATLiteral(8203) /\ SATLiteral(8204))=tv=SATLiteral(1356))
1356 -8203 -8204 0
8203 -1356 0
8204 -1356 0
c ((SATLiteral(8205) /\ SATLiteral(8206))=tv=SATLiteral(1357))
1357 -8205 -8206 0
8205 -1357 0
8206 -1357 0
c ((SATLiteral(8207) /\ SATLiteral(8208))=tv=SATLiteral(1358))
1358 -8207 -8208 0
8207 -1358 0
8208 -1358 0
c ((SATLiteral(8209) /\ SATLiteral(8210))=tv=SATLiteral(1359))
1359 -8209 -8210 0
8209 -1359 0
8210 -1359 0
c ((SATLiteral(8211) /\ SATLiteral(8212))=tv=SATLiteral(1360))
1360 -8211 -8212 0
8211 -1360 0
8212 -1360 0
c ((SATLiteral(8213) /\ SATLiteral(8214))=tv=SATLiteral(1361))
1361 -8213 -8214 0
8213 -1361 0
8214 -1361 0
c ((SATLiteral(8215) /\ SATLiteral(8216))=tv=SATLiteral(1362))
1362 -8215 -8216 0
8215 -1362 0
8216 -1362 0
c ((SATLiteral(8217) /\ SATLiteral(8218))=tv=SATLiteral(1363))
1363 -8217 -8218 0
8217 -1363 0
8218 -1363 0
c ((SATLiteral(8219) /\ SATLiteral(8220))=tv=SATLiteral(1364))
1364 -8219 -8220 0
8219 -1364 0
8220 -1364 0
c ((SATLiteral(8221) /\ SATLiteral(8222))=tv=SATLiteral(1365))
1365 -8221 -8222 0
8221 -1365 0
8222 -1365 0
c ((SATLiteral(8223) /\ SATLiteral(8224))=tv=SATLiteral(1366))
1366 -8223 -8224 0
8223 -1366 0
8224 -1366 0
c ((SATLiteral(8225) /\ SATLiteral(8226))=tv=SATLiteral(1367))
1367 -8225 -8226 0
8225 -1367 0
8226 -1367 0
c ((SATLiteral(8227) /\ SATLiteral(8228))=tv=SATLiteral(1368))
1368 -8227 -8228 0
8227 -1368 0
8228 -1368 0
c ((SATLiteral(8229) /\ SATLiteral(8230))=tv=SATLiteral(1369))
1369 -8229 -8230 0
8229 -1369 0
8230 -1369 0
c ((SATLiteral(8231) /\ SATLiteral(8232))=tv=SATLiteral(1370))
1370 -8231 -8232 0
8231 -1370 0
8232 -1370 0
c ((SATLiteral(8233) /\ SATLiteral(8234))=tv=SATLiteral(1371))
1371 -8233 -8234 0
8233 -1371 0
8234 -1371 0
c ((SATLiteral(8235) /\ SATLiteral(8236))=tv=SATLiteral(1372))
1372 -8235 -8236 0
8235 -1372 0
8236 -1372 0
c ((SATLiteral(8237) /\ SATLiteral(8238))=tv=SATLiteral(1373))
1373 -8237 -8238 0
8237 -1373 0
8238 -1373 0
c ((SATLiteral(8239) /\ SATLiteral(8240))=tv=SATLiteral(1374))
1374 -8239 -8240 0
8239 -1374 0
8240 -1374 0
c ((SATLiteral(8241) /\ SATLiteral(8242))=tv=SATLiteral(1375))
1375 -8241 -8242 0
8241 -1375 0
8242 -1375 0
c ((SATLiteral(8243) /\ SATLiteral(8244))=tv=SATLiteral(1376))
1376 -8243 -8244 0
8243 -1376 0
8244 -1376 0
c ((SATLiteral(8245) /\ SATLiteral(8246))=tv=SATLiteral(1377))
1377 -8245 -8246 0
8245 -1377 0
8246 -1377 0
c ((SATLiteral(8247) /\ SATLiteral(8248))=tv=SATLiteral(1378))
1378 -8247 -8248 0
8247 -1378 0
8248 -1378 0
c ((SATLiteral(8249) /\ SATLiteral(8250))=tv=SATLiteral(1379))
1379 -8249 -8250 0
8249 -1379 0
8250 -1379 0
c ((SATLiteral(8251) /\ SATLiteral(8252))=tv=SATLiteral(1380))
1380 -8251 -8252 0
8251 -1380 0
8252 -1380 0
c ((SATLiteral(8253) /\ SATLiteral(8254))=tv=SATLiteral(1381))
1381 -8253 -8254 0
8253 -1381 0
8254 -1381 0
c ((SATLiteral(8255) /\ SATLiteral(8256))=tv=SATLiteral(1382))
1382 -8255 -8256 0
8255 -1382 0
8256 -1382 0
c ((SATLiteral(8257) /\ SATLiteral(8258))=tv=SATLiteral(1383))
1383 -8257 -8258 0
8257 -1383 0
8258 -1383 0
c ((SATLiteral(8259) /\ SATLiteral(8260))=tv=SATLiteral(1384))
1384 -8259 -8260 0
8259 -1384 0
8260 -1384 0
c ((SATLiteral(8261) /\ SATLiteral(8262))=tv=SATLiteral(1385))
1385 -8261 -8262 0
8261 -1385 0
8262 -1385 0
c ((SATLiteral(8263) /\ SATLiteral(8264))=tv=SATLiteral(1386))
1386 -8263 -8264 0
8263 -1386 0
8264 -1386 0
c ((SATLiteral(8265) /\ SATLiteral(8266))=tv=SATLiteral(1387))
1387 -8265 -8266 0
8265 -1387 0
8266 -1387 0
c ((SATLiteral(8267) /\ SATLiteral(8268))=tv=SATLiteral(1388))
1388 -8267 -8268 0
8267 -1388 0
8268 -1388 0
c ((SATLiteral(8269) /\ SATLiteral(8270))=tv=SATLiteral(1389))
1389 -8269 -8270 0
8269 -1389 0
8270 -1389 0
c ((SATLiteral(8271) /\ SATLiteral(8272))=tv=SATLiteral(1390))
1390 -8271 -8272 0
8271 -1390 0
8272 -1390 0
c ((SATLiteral(8273) /\ SATLiteral(8274))=tv=SATLiteral(1391))
1391 -8273 -8274 0
8273 -1391 0
8274 -1391 0
c ((SATLiteral(8275) /\ SATLiteral(8276))=tv=SATLiteral(1392))
1392 -8275 -8276 0
8275 -1392 0
8276 -1392 0
c ((SATLiteral(8277) /\ SATLiteral(8278))=tv=SATLiteral(1393))
1393 -8277 -8278 0
8277 -1393 0
8278 -1393 0
c ((SATLiteral(8279) /\ SATLiteral(8280))=tv=SATLiteral(1394))
1394 -8279 -8280 0
8279 -1394 0
8280 -1394 0
c ((SATLiteral(8281) /\ SATLiteral(8282))=tv=SATLiteral(1395))
1395 -8281 -8282 0
8281 -1395 0
8282 -1395 0
c ((SATLiteral(8283) /\ SATLiteral(8284))=tv=SATLiteral(1396))
1396 -8283 -8284 0
8283 -1396 0
8284 -1396 0
c ((SATLiteral(8285) /\ SATLiteral(8286))=tv=SATLiteral(1397))
1397 -8285 -8286 0
8285 -1397 0
8286 -1397 0
c ((SATLiteral(8287) /\ SATLiteral(8288))=tv=SATLiteral(1398))
1398 -8287 -8288 0
8287 -1398 0
8288 -1398 0
c ((SATLiteral(8289) /\ SATLiteral(8290))=tv=SATLiteral(1399))
1399 -8289 -8290 0
8289 -1399 0
8290 -1399 0
c ((SATLiteral(8291) /\ SATLiteral(8292))=tv=SATLiteral(1400))
1400 -8291 -8292 0
8291 -1400 0
8292 -1400 0
c ((SATLiteral(8293) /\ SATLiteral(8294))=tv=SATLiteral(1401))
1401 -8293 -8294 0
8293 -1401 0
8294 -1401 0
c ((SATLiteral(8295) /\ SATLiteral(8296))=tv=SATLiteral(1402))
1402 -8295 -8296 0
8295 -1402 0
8296 -1402 0
c ((SATLiteral(8297) /\ SATLiteral(8298))=tv=SATLiteral(1403))
1403 -8297 -8298 0
8297 -1403 0
8298 -1403 0
c ((SATLiteral(8299) /\ SATLiteral(8300))=tv=SATLiteral(1404))
1404 -8299 -8300 0
8299 -1404 0
8300 -1404 0
c ((SATLiteral(8301) /\ SATLiteral(8302))=tv=SATLiteral(1405))
1405 -8301 -8302 0
8301 -1405 0
8302 -1405 0
c ((SATLiteral(8303) /\ SATLiteral(8304))=tv=SATLiteral(1406))
1406 -8303 -8304 0
8303 -1406 0
8304 -1406 0
c ((SATLiteral(8305) /\ SATLiteral(8306))=tv=SATLiteral(1407))
1407 -8305 -8306 0
8305 -1407 0
8306 -1407 0
c ((SATLiteral(8307) /\ SATLiteral(8308))=tv=SATLiteral(1408))
1408 -8307 -8308 0
8307 -1408 0
8308 -1408 0
c ((SATLiteral(8309) /\ SATLiteral(8310))=tv=SATLiteral(1409))
1409 -8309 -8310 0
8309 -1409 0
8310 -1409 0
c ((SATLiteral(8311) /\ SATLiteral(8312))=tv=SATLiteral(1410))
1410 -8311 -8312 0
8311 -1410 0
8312 -1410 0
c ((SATLiteral(8313) /\ SATLiteral(8314))=tv=SATLiteral(1411))
1411 -8313 -8314 0
8313 -1411 0
8314 -1411 0
c ((SATLiteral(8315) /\ SATLiteral(8316))=tv=SATLiteral(1412))
1412 -8315 -8316 0
8315 -1412 0
8316 -1412 0
c ((SATLiteral(8317) /\ SATLiteral(8318))=tv=SATLiteral(1413))
1413 -8317 -8318 0
8317 -1413 0
8318 -1413 0
c ((SATLiteral(8319) /\ SATLiteral(8320))=tv=SATLiteral(1414))
1414 -8319 -8320 0
8319 -1414 0
8320 -1414 0
c ((SATLiteral(8321) /\ SATLiteral(8322))=tv=SATLiteral(1415))
1415 -8321 -8322 0
8321 -1415 0
8322 -1415 0
c ((SATLiteral(8323) /\ SATLiteral(8324))=tv=SATLiteral(1416))
1416 -8323 -8324 0
8323 -1416 0
8324 -1416 0
c ((SATLiteral(8325) /\ SATLiteral(8326))=tv=SATLiteral(1417))
1417 -8325 -8326 0
8325 -1417 0
8326 -1417 0
c ((SATLiteral(8327) /\ SATLiteral(8328))=tv=SATLiteral(1418))
1418 -8327 -8328 0
8327 -1418 0
8328 -1418 0
c ((SATLiteral(8329) /\ SATLiteral(8330))=tv=SATLiteral(1419))
1419 -8329 -8330 0
8329 -1419 0
8330 -1419 0
c ((SATLiteral(8331) /\ SATLiteral(8332))=tv=SATLiteral(1420))
1420 -8331 -8332 0
8331 -1420 0
8332 -1420 0
c ((SATLiteral(8333) /\ SATLiteral(8334))=tv=SATLiteral(1421))
1421 -8333 -8334 0
8333 -1421 0
8334 -1421 0
c ((SATLiteral(8335) /\ SATLiteral(8336))=tv=SATLiteral(1422))
1422 -8335 -8336 0
8335 -1422 0
8336 -1422 0
c ((SATLiteral(8337) /\ SATLiteral(8338))=tv=SATLiteral(1423))
1423 -8337 -8338 0
8337 -1423 0
8338 -1423 0
c ((SATLiteral(8339) /\ SATLiteral(8340))=tv=SATLiteral(1424))
1424 -8339 -8340 0
8339 -1424 0
8340 -1424 0
c ((SATLiteral(8341) /\ SATLiteral(8342))=tv=SATLiteral(1425))
1425 -8341 -8342 0
8341 -1425 0
8342 -1425 0
c ((SATLiteral(8343) /\ SATLiteral(8344))=tv=SATLiteral(1426))
1426 -8343 -8344 0
8343 -1426 0
8344 -1426 0
c ((SATLiteral(8345) /\ SATLiteral(8346))=tv=SATLiteral(1427))
1427 -8345 -8346 0
8345 -1427 0
8346 -1427 0
c ((SATLiteral(8347) /\ SATLiteral(8348))=tv=SATLiteral(1428))
1428 -8347 -8348 0
8347 -1428 0
8348 -1428 0
c ((SATLiteral(8349) /\ SATLiteral(8350))=tv=SATLiteral(1429))
1429 -8349 -8350 0
8349 -1429 0
8350 -1429 0
c ((SATLiteral(8351) /\ SATLiteral(8352))=tv=SATLiteral(1430))
1430 -8351 -8352 0
8351 -1430 0
8352 -1430 0
c ((SATLiteral(8353) /\ SATLiteral(8354))=tv=SATLiteral(1431))
1431 -8353 -8354 0
8353 -1431 0
8354 -1431 0
c ((SATLiteral(8355) /\ SATLiteral(8356))=tv=SATLiteral(1432))
1432 -8355 -8356 0
8355 -1432 0
8356 -1432 0
c ((SATLiteral(8357) /\ SATLiteral(8358))=tv=SATLiteral(1433))
1433 -8357 -8358 0
8357 -1433 0
8358 -1433 0
c ((SATLiteral(8359) /\ SATLiteral(8360))=tv=SATLiteral(1434))
1434 -8359 -8360 0
8359 -1434 0
8360 -1434 0
c ((SATLiteral(8361) /\ SATLiteral(8362))=tv=SATLiteral(1435))
1435 -8361 -8362 0
8361 -1435 0
8362 -1435 0
c ((SATLiteral(8363) /\ SATLiteral(8364))=tv=SATLiteral(1436))
1436 -8363 -8364 0
8363 -1436 0
8364 -1436 0
c ((SATLiteral(8365) /\ SATLiteral(8366))=tv=SATLiteral(1437))
1437 -8365 -8366 0
8365 -1437 0
8366 -1437 0
c ((SATLiteral(8367) /\ SATLiteral(8368))=tv=SATLiteral(1438))
1438 -8367 -8368 0
8367 -1438 0
8368 -1438 0
c ((SATLiteral(8369) /\ SATLiteral(8370))=tv=SATLiteral(1439))
1439 -8369 -8370 0
8369 -1439 0
8370 -1439 0
c ((SATLiteral(8371) /\ SATLiteral(8372))=tv=SATLiteral(1440))
1440 -8371 -8372 0
8371 -1440 0
8372 -1440 0
c ((SATLiteral(8373) /\ SATLiteral(8374))=tv=SATLiteral(1441))
1441 -8373 -8374 0
8373 -1441 0
8374 -1441 0
c ((SATLiteral(8375) /\ SATLiteral(8376))=tv=SATLiteral(1442))
1442 -8375 -8376 0
8375 -1442 0
8376 -1442 0
c ((SATLiteral(8377) /\ SATLiteral(8378))=tv=SATLiteral(1443))
1443 -8377 -8378 0
8377 -1443 0
8378 -1443 0
c ((SATLiteral(8379) /\ SATLiteral(8380))=tv=SATLiteral(1444))
1444 -8379 -8380 0
8379 -1444 0
8380 -1444 0
c ((SATLiteral(8381) /\ SATLiteral(8382))=tv=SATLiteral(1445))
1445 -8381 -8382 0
8381 -1445 0
8382 -1445 0
c ((SATLiteral(8383) /\ SATLiteral(8384))=tv=SATLiteral(1446))
1446 -8383 -8384 0
8383 -1446 0
8384 -1446 0
c ((SATLiteral(8385) /\ SATLiteral(8386))=tv=SATLiteral(1447))
1447 -8385 -8386 0
8385 -1447 0
8386 -1447 0
c ((SATLiteral(8387) /\ SATLiteral(8388))=tv=SATLiteral(1448))
1448 -8387 -8388 0
8387 -1448 0
8388 -1448 0
c ((SATLiteral(8389) /\ SATLiteral(8390))=tv=SATLiteral(1449))
1449 -8389 -8390 0
8389 -1449 0
8390 -1449 0
c ((SATLiteral(8391) /\ SATLiteral(8392))=tv=SATLiteral(1450))
1450 -8391 -8392 0
8391 -1450 0
8392 -1450 0
c ((SATLiteral(8393) /\ SATLiteral(8394))=tv=SATLiteral(1451))
1451 -8393 -8394 0
8393 -1451 0
8394 -1451 0
c ((SATLiteral(8395) /\ SATLiteral(8396))=tv=SATLiteral(1452))
1452 -8395 -8396 0
8395 -1452 0
8396 -1452 0
c ((SATLiteral(8397) /\ SATLiteral(8398))=tv=SATLiteral(1453))
1453 -8397 -8398 0
8397 -1453 0
8398 -1453 0
c ((SATLiteral(8399) /\ SATLiteral(8400))=tv=SATLiteral(1454))
1454 -8399 -8400 0
8399 -1454 0
8400 -1454 0
c ((SATLiteral(8401) /\ SATLiteral(8402))=tv=SATLiteral(1455))
1455 -8401 -8402 0
8401 -1455 0
8402 -1455 0
c ((SATLiteral(8403) /\ SATLiteral(8404))=tv=SATLiteral(1456))
1456 -8403 -8404 0
8403 -1456 0
8404 -1456 0
c ((SATLiteral(8405) /\ SATLiteral(8406))=tv=SATLiteral(1457))
1457 -8405 -8406 0
8405 -1457 0
8406 -1457 0
c ((SATLiteral(8407) /\ SATLiteral(8408))=tv=SATLiteral(1458))
1458 -8407 -8408 0
8407 -1458 0
8408 -1458 0
c ((SATLiteral(8409) /\ SATLiteral(8410))=tv=SATLiteral(1459))
1459 -8409 -8410 0
8409 -1459 0
8410 -1459 0
c ((SATLiteral(8411) /\ SATLiteral(8412))=tv=SATLiteral(1460))
1460 -8411 -8412 0
8411 -1460 0
8412 -1460 0
c ((SATLiteral(8413) /\ SATLiteral(8414))=tv=SATLiteral(1461))
1461 -8413 -8414 0
8413 -1461 0
8414 -1461 0
c ((SATLiteral(8415) /\ SATLiteral(8416))=tv=SATLiteral(1462))
1462 -8415 -8416 0
8415 -1462 0
8416 -1462 0
c ((SATLiteral(8417) /\ SATLiteral(8418))=tv=SATLiteral(1463))
1463 -8417 -8418 0
8417 -1463 0
8418 -1463 0
c ((SATLiteral(8419) /\ SATLiteral(8420))=tv=SATLiteral(1464))
1464 -8419 -8420 0
8419 -1464 0
8420 -1464 0
c ((SATLiteral(8421) /\ SATLiteral(8422))=tv=SATLiteral(1465))
1465 -8421 -8422 0
8421 -1465 0
8422 -1465 0
c ((SATLiteral(8423) /\ SATLiteral(8424))=tv=SATLiteral(1466))
1466 -8423 -8424 0
8423 -1466 0
8424 -1466 0
c ((SATLiteral(8425) /\ SATLiteral(8426))=tv=SATLiteral(1467))
1467 -8425 -8426 0
8425 -1467 0
8426 -1467 0
c ((SATLiteral(8427) /\ SATLiteral(8428))=tv=SATLiteral(1468))
1468 -8427 -8428 0
8427 -1468 0
8428 -1468 0
c ((SATLiteral(8429) /\ SATLiteral(8430))=tv=SATLiteral(1469))
1469 -8429 -8430 0
8429 -1469 0
8430 -1469 0
c ((SATLiteral(8431) /\ SATLiteral(8432))=tv=SATLiteral(1470))
1470 -8431 -8432 0
8431 -1470 0
8432 -1470 0
c ((SATLiteral(8433) /\ SATLiteral(8434))=tv=SATLiteral(1471))
1471 -8433 -8434 0
8433 -1471 0
8434 -1471 0
c ((SATLiteral(8435) /\ SATLiteral(8436))=tv=SATLiteral(1472))
1472 -8435 -8436 0
8435 -1472 0
8436 -1472 0
c ((SATLiteral(8437) /\ SATLiteral(8438))=tv=SATLiteral(1473))
1473 -8437 -8438 0
8437 -1473 0
8438 -1473 0
c ((SATLiteral(8439) /\ SATLiteral(8440))=tv=SATLiteral(1474))
1474 -8439 -8440 0
8439 -1474 0
8440 -1474 0
c ((SATLiteral(8441) /\ SATLiteral(8442))=tv=SATLiteral(1475))
1475 -8441 -8442 0
8441 -1475 0
8442 -1475 0
c ((SATLiteral(8443) /\ SATLiteral(8444))=tv=SATLiteral(1476))
1476 -8443 -8444 0
8443 -1476 0
8444 -1476 0
c ((SATLiteral(8445) /\ SATLiteral(8446))=tv=SATLiteral(1477))
1477 -8445 -8446 0
8445 -1477 0
8446 -1477 0
c ((SATLiteral(8447) /\ SATLiteral(8448))=tv=SATLiteral(1478))
1478 -8447 -8448 0
8447 -1478 0
8448 -1478 0
c ((SATLiteral(8449) /\ SATLiteral(8450))=tv=SATLiteral(1479))
1479 -8449 -8450 0
8449 -1479 0
8450 -1479 0
c ((SATLiteral(8451) /\ SATLiteral(8452))=tv=SATLiteral(1480))
1480 -8451 -8452 0
8451 -1480 0
8452 -1480 0
c ((SATLiteral(8453) /\ SATLiteral(8454))=tv=SATLiteral(1481))
1481 -8453 -8454 0
8453 -1481 0
8454 -1481 0
c ((SATLiteral(8455) /\ SATLiteral(8456))=tv=SATLiteral(1482))
1482 -8455 -8456 0
8455 -1482 0
8456 -1482 0
c ((SATLiteral(8457) /\ SATLiteral(8458))=tv=SATLiteral(1483))
1483 -8457 -8458 0
8457 -1483 0
8458 -1483 0
c ((SATLiteral(8459) /\ SATLiteral(8460))=tv=SATLiteral(1484))
1484 -8459 -8460 0
8459 -1484 0
8460 -1484 0
c ((SATLiteral(8461) /\ SATLiteral(8462))=tv=SATLiteral(1485))
1485 -8461 -8462 0
8461 -1485 0
8462 -1485 0
c ((SATLiteral(8463) /\ SATLiteral(8464))=tv=SATLiteral(1486))
1486 -8463 -8464 0
8463 -1486 0
8464 -1486 0
c ((SATLiteral(8465) /\ SATLiteral(8466))=tv=SATLiteral(1487))
1487 -8465 -8466 0
8465 -1487 0
8466 -1487 0
c ((SATLiteral(8467) /\ SATLiteral(8468))=tv=SATLiteral(1488))
1488 -8467 -8468 0
8467 -1488 0
8468 -1488 0
c ((SATLiteral(8469) /\ SATLiteral(8470))=tv=SATLiteral(1489))
1489 -8469 -8470 0
8469 -1489 0
8470 -1489 0
c ((SATLiteral(8471) /\ SATLiteral(8472))=tv=SATLiteral(1490))
1490 -8471 -8472 0
8471 -1490 0
8472 -1490 0
c ((SATLiteral(8473) /\ SATLiteral(8474))=tv=SATLiteral(1491))
1491 -8473 -8474 0
8473 -1491 0
8474 -1491 0
c ((SATLiteral(8475) /\ SATLiteral(8476))=tv=SATLiteral(1492))
1492 -8475 -8476 0
8475 -1492 0
8476 -1492 0
c ((SATLiteral(8477) /\ SATLiteral(8478))=tv=SATLiteral(1493))
1493 -8477 -8478 0
8477 -1493 0
8478 -1493 0
c ((SATLiteral(8479) /\ SATLiteral(8480))=tv=SATLiteral(1494))
1494 -8479 -8480 0
8479 -1494 0
8480 -1494 0
c ((SATLiteral(8481) /\ SATLiteral(8482))=tv=SATLiteral(1495))
1495 -8481 -8482 0
8481 -1495 0
8482 -1495 0
c ((SATLiteral(8483) /\ SATLiteral(8484))=tv=SATLiteral(1496))
1496 -8483 -8484 0
8483 -1496 0
8484 -1496 0
c ((SATLiteral(8485) /\ SATLiteral(8486))=tv=SATLiteral(1497))
1497 -8485 -8486 0
8485 -1497 0
8486 -1497 0
c ((SATLiteral(8487) /\ SATLiteral(8488))=tv=SATLiteral(1498))
1498 -8487 -8488 0
8487 -1498 0
8488 -1498 0
c ((SATLiteral(8489) /\ SATLiteral(8490))=tv=SATLiteral(1499))
1499 -8489 -8490 0
8489 -1499 0
8490 -1499 0
c ((SATLiteral(8491) /\ SATLiteral(8492))=tv=SATLiteral(1500))
1500 -8491 -8492 0
8491 -1500 0
8492 -1500 0
c ((SATLiteral(8493) /\ SATLiteral(8494))=tv=SATLiteral(1501))
1501 -8493 -8494 0
8493 -1501 0
8494 -1501 0
c ((SATLiteral(8495) /\ SATLiteral(8496))=tv=SATLiteral(1502))
1502 -8495 -8496 0
8495 -1502 0
8496 -1502 0
c ((SATLiteral(8497) /\ SATLiteral(8498))=tv=SATLiteral(1503))
1503 -8497 -8498 0
8497 -1503 0
8498 -1503 0
c ((SATLiteral(8499) /\ SATLiteral(8500))=tv=SATLiteral(1504))
1504 -8499 -8500 0
8499 -1504 0
8500 -1504 0
c ((SATLiteral(8501) /\ SATLiteral(8502))=tv=SATLiteral(1505))
1505 -8501 -8502 0
8501 -1505 0
8502 -1505 0
c ((SATLiteral(8503) /\ SATLiteral(8504))=tv=SATLiteral(1506))
1506 -8503 -8504 0
8503 -1506 0
8504 -1506 0
c ((SATLiteral(8505) /\ SATLiteral(8506))=tv=SATLiteral(1507))
1507 -8505 -8506 0
8505 -1507 0
8506 -1507 0
c ((SATLiteral(8507) /\ SATLiteral(8508))=tv=SATLiteral(1508))
1508 -8507 -8508 0
8507 -1508 0
8508 -1508 0
c ((SATLiteral(8509) /\ SATLiteral(8510))=tv=SATLiteral(1509))
1509 -8509 -8510 0
8509 -1509 0
8510 -1509 0
c ((SATLiteral(8511) /\ SATLiteral(8512))=tv=SATLiteral(1510))
1510 -8511 -8512 0
8511 -1510 0
8512 -1510 0
c ((SATLiteral(8513) /\ SATLiteral(8514))=tv=SATLiteral(1511))
1511 -8513 -8514 0
8513 -1511 0
8514 -1511 0
c ((SATLiteral(8515) /\ SATLiteral(8516))=tv=SATLiteral(1512))
1512 -8515 -8516 0
8515 -1512 0
8516 -1512 0
c ((SATLiteral(8517) /\ SATLiteral(8518))=tv=SATLiteral(1513))
1513 -8517 -8518 0
8517 -1513 0
8518 -1513 0
c ((SATLiteral(8519) /\ SATLiteral(8520))=tv=SATLiteral(1514))
1514 -8519 -8520 0
8519 -1514 0
8520 -1514 0
c ((SATLiteral(8521) /\ SATLiteral(8522))=tv=SATLiteral(1515))
1515 -8521 -8522 0
8521 -1515 0
8522 -1515 0
c ((SATLiteral(8523) /\ SATLiteral(8524))=tv=SATLiteral(1516))
1516 -8523 -8524 0
8523 -1516 0
8524 -1516 0
c ((SATLiteral(8525) /\ SATLiteral(8526))=tv=SATLiteral(1517))
1517 -8525 -8526 0
8525 -1517 0
8526 -1517 0
c ((SATLiteral(8527) /\ SATLiteral(8528))=tv=SATLiteral(1518))
1518 -8527 -8528 0
8527 -1518 0
8528 -1518 0
c ((SATLiteral(8529) /\ SATLiteral(8530))=tv=SATLiteral(1519))
1519 -8529 -8530 0
8529 -1519 0
8530 -1519 0
c ((SATLiteral(8531) /\ SATLiteral(8532))=tv=SATLiteral(1520))
1520 -8531 -8532 0
8531 -1520 0
8532 -1520 0
c ((SATLiteral(8533) /\ SATLiteral(8534))=tv=SATLiteral(1521))
1521 -8533 -8534 0
8533 -1521 0
8534 -1521 0
c ((SATLiteral(8535) /\ SATLiteral(8536))=tv=SATLiteral(1522))
1522 -8535 -8536 0
8535 -1522 0
8536 -1522 0
c ((SATLiteral(8537) /\ SATLiteral(8538))=tv=SATLiteral(1523))
1523 -8537 -8538 0
8537 -1523 0
8538 -1523 0
c ((SATLiteral(8539) /\ SATLiteral(8540))=tv=SATLiteral(1524))
1524 -8539 -8540 0
8539 -1524 0
8540 -1524 0
c ((SATLiteral(8541) /\ SATLiteral(8542))=tv=SATLiteral(1525))
1525 -8541 -8542 0
8541 -1525 0
8542 -1525 0
c ((SATLiteral(8543) /\ SATLiteral(8544))=tv=SATLiteral(1526))
1526 -8543 -8544 0
8543 -1526 0
8544 -1526 0
c ((SATLiteral(8545) /\ SATLiteral(8546))=tv=SATLiteral(1527))
1527 -8545 -8546 0
8545 -1527 0
8546 -1527 0
c ((SATLiteral(8547) /\ SATLiteral(8548))=tv=SATLiteral(1528))
1528 -8547 -8548 0
8547 -1528 0
8548 -1528 0
c ((SATLiteral(8549) /\ SATLiteral(8550))=tv=SATLiteral(1529))
1529 -8549 -8550 0
8549 -1529 0
8550 -1529 0
c ((SATLiteral(8551) /\ SATLiteral(8552))=tv=SATLiteral(1530))
1530 -8551 -8552 0
8551 -1530 0
8552 -1530 0
c ((SATLiteral(8553) /\ SATLiteral(8554))=tv=SATLiteral(1531))
1531 -8553 -8554 0
8553 -1531 0
8554 -1531 0
c ((SATLiteral(8555) /\ SATLiteral(8556))=tv=SATLiteral(1532))
1532 -8555 -8556 0
8555 -1532 0
8556 -1532 0
c ((SATLiteral(8557) /\ SATLiteral(8558))=tv=SATLiteral(1533))
1533 -8557 -8558 0
8557 -1533 0
8558 -1533 0
c ((SATLiteral(8559) /\ SATLiteral(8560))=tv=SATLiteral(1534))
1534 -8559 -8560 0
8559 -1534 0
8560 -1534 0
c ((SATLiteral(8561) /\ SATLiteral(8562))=tv=SATLiteral(1535))
1535 -8561 -8562 0
8561 -1535 0
8562 -1535 0
c ((SATLiteral(8563) /\ SATLiteral(8564))=tv=SATLiteral(1536))
1536 -8563 -8564 0
8563 -1536 0
8564 -1536 0
c ((SATLiteral(8565) /\ SATLiteral(8566))=tv=SATLiteral(1537))
1537 -8565 -8566 0
8565 -1537 0
8566 -1537 0
c ((SATLiteral(8567) /\ SATLiteral(8568))=tv=SATLiteral(1538))
1538 -8567 -8568 0
8567 -1538 0
8568 -1538 0
c ((SATLiteral(8569) /\ SATLiteral(8570))=tv=SATLiteral(1539))
1539 -8569 -8570 0
8569 -1539 0
8570 -1539 0
c ((SATLiteral(8571) /\ SATLiteral(8572))=tv=SATLiteral(1540))
1540 -8571 -8572 0
8571 -1540 0
8572 -1540 0
c ((SATLiteral(8573) /\ SATLiteral(8574))=tv=SATLiteral(1541))
1541 -8573 -8574 0
8573 -1541 0
8574 -1541 0
c ((SATLiteral(8575) /\ SATLiteral(8576))=tv=SATLiteral(1542))
1542 -8575 -8576 0
8575 -1542 0
8576 -1542 0
c ((SATLiteral(8577) /\ SATLiteral(8578))=tv=SATLiteral(1543))
1543 -8577 -8578 0
8577 -1543 0
8578 -1543 0
c ((SATLiteral(8579) /\ SATLiteral(8580))=tv=SATLiteral(1544))
1544 -8579 -8580 0
8579 -1544 0
8580 -1544 0
c ((SATLiteral(8581) /\ SATLiteral(8582))=tv=SATLiteral(1545))
1545 -8581 -8582 0
8581 -1545 0
8582 -1545 0
c ((SATLiteral(8583) /\ SATLiteral(8584))=tv=SATLiteral(1546))
1546 -8583 -8584 0
8583 -1546 0
8584 -1546 0
c ((SATLiteral(8585) /\ SATLiteral(8586))=tv=SATLiteral(1547))
1547 -8585 -8586 0
8585 -1547 0
8586 -1547 0
c ((SATLiteral(8587) /\ SATLiteral(8588))=tv=SATLiteral(1548))
1548 -8587 -8588 0
8587 -1548 0
8588 -1548 0
c ((SATLiteral(8589) /\ SATLiteral(8590))=tv=SATLiteral(1549))
1549 -8589 -8590 0
8589 -1549 0
8590 -1549 0
c ((SATLiteral(8591) /\ SATLiteral(8592))=tv=SATLiteral(1550))
1550 -8591 -8592 0
8591 -1550 0
8592 -1550 0
c ((SATLiteral(8593) /\ SATLiteral(8594))=tv=SATLiteral(1551))
1551 -8593 -8594 0
8593 -1551 0
8594 -1551 0
c ((SATLiteral(8595) /\ SATLiteral(8596))=tv=SATLiteral(1552))
1552 -8595 -8596 0
8595 -1552 0
8596 -1552 0
c ((SATLiteral(8597) /\ SATLiteral(8598))=tv=SATLiteral(1553))
1553 -8597 -8598 0
8597 -1553 0
8598 -1553 0
c ((SATLiteral(8599) /\ SATLiteral(8600))=tv=SATLiteral(1554))
1554 -8599 -8600 0
8599 -1554 0
8600 -1554 0
c ((SATLiteral(8601) /\ SATLiteral(8602))=tv=SATLiteral(1555))
1555 -8601 -8602 0
8601 -1555 0
8602 -1555 0
c ((SATLiteral(8603) /\ SATLiteral(8604))=tv=SATLiteral(1556))
1556 -8603 -8604 0
8603 -1556 0
8604 -1556 0
c ((SATLiteral(8605) /\ SATLiteral(8606))=tv=SATLiteral(1557))
1557 -8605 -8606 0
8605 -1557 0
8606 -1557 0
c ((SATLiteral(8607) /\ SATLiteral(8608))=tv=SATLiteral(1558))
1558 -8607 -8608 0
8607 -1558 0
8608 -1558 0
c ((SATLiteral(8609) /\ SATLiteral(8610))=tv=SATLiteral(1559))
1559 -8609 -8610 0
8609 -1559 0
8610 -1559 0
c ((SATLiteral(8611) /\ SATLiteral(8612))=tv=SATLiteral(1560))
1560 -8611 -8612 0
8611 -1560 0
8612 -1560 0
c ((SATLiteral(8613) /\ SATLiteral(8614))=tv=SATLiteral(1561))
1561 -8613 -8614 0
8613 -1561 0
8614 -1561 0
c ((SATLiteral(8615) /\ SATLiteral(8616))=tv=SATLiteral(1562))
1562 -8615 -8616 0
8615 -1562 0
8616 -1562 0
c ((SATLiteral(8617) /\ SATLiteral(8618))=tv=SATLiteral(1563))
1563 -8617 -8618 0
8617 -1563 0
8618 -1563 0
c ((SATLiteral(8619) /\ SATLiteral(8620))=tv=SATLiteral(1564))
1564 -8619 -8620 0
8619 -1564 0
8620 -1564 0
c ((SATLiteral(8621) /\ SATLiteral(8622))=tv=SATLiteral(1565))
1565 -8621 -8622 0
8621 -1565 0
8622 -1565 0
c ((SATLiteral(8623) /\ SATLiteral(8624))=tv=SATLiteral(1566))
1566 -8623 -8624 0
8623 -1566 0
8624 -1566 0
c ((SATLiteral(8625) /\ SATLiteral(8626))=tv=SATLiteral(1567))
1567 -8625 -8626 0
8625 -1567 0
8626 -1567 0
c ((SATLiteral(8627) /\ SATLiteral(8628))=tv=SATLiteral(1568))
1568 -8627 -8628 0
8627 -1568 0
8628 -1568 0
c ((SATLiteral(8629) /\ SATLiteral(8630))=tv=SATLiteral(1569))
1569 -8629 -8630 0
8629 -1569 0
8630 -1569 0
c ((SATLiteral(8631) /\ SATLiteral(8632))=tv=SATLiteral(1570))
1570 -8631 -8632 0
8631 -1570 0
8632 -1570 0
c ((SATLiteral(8633) /\ SATLiteral(8634))=tv=SATLiteral(1571))
1571 -8633 -8634 0
8633 -1571 0
8634 -1571 0
c ((SATLiteral(8635) /\ SATLiteral(8636))=tv=SATLiteral(1572))
1572 -8635 -8636 0
8635 -1572 0
8636 -1572 0
c ((SATLiteral(8637) /\ SATLiteral(8638))=tv=SATLiteral(1573))
1573 -8637 -8638 0
8637 -1573 0
8638 -1573 0
c ((SATLiteral(8639) /\ SATLiteral(8640))=tv=SATLiteral(1574))
1574 -8639 -8640 0
8639 -1574 0
8640 -1574 0
c ((SATLiteral(8641) /\ SATLiteral(8642))=tv=SATLiteral(1575))
1575 -8641 -8642 0
8641 -1575 0
8642 -1575 0
c ((SATLiteral(8643) /\ SATLiteral(8644))=tv=SATLiteral(1576))
1576 -8643 -8644 0
8643 -1576 0
8644 -1576 0
c ((SATLiteral(8645) /\ SATLiteral(8646))=tv=SATLiteral(1577))
1577 -8645 -8646 0
8645 -1577 0
8646 -1577 0
c ((SATLiteral(8647) /\ SATLiteral(8648))=tv=SATLiteral(1578))
1578 -8647 -8648 0
8647 -1578 0
8648 -1578 0
c ((SATLiteral(8649) /\ SATLiteral(8650))=tv=SATLiteral(1579))
1579 -8649 -8650 0
8649 -1579 0
8650 -1579 0
c ((SATLiteral(8651) /\ SATLiteral(8652))=tv=SATLiteral(1580))
1580 -8651 -8652 0
8651 -1580 0
8652 -1580 0
c ((SATLiteral(8653) /\ SATLiteral(8654))=tv=SATLiteral(1581))
1581 -8653 -8654 0
8653 -1581 0
8654 -1581 0
c ((SATLiteral(8655) /\ SATLiteral(8656))=tv=SATLiteral(1582))
1582 -8655 -8656 0
8655 -1582 0
8656 -1582 0
c (((SATLiteral(47) + SATLiteral(62) + SATLiteral(182))<=1)=tv=SATLiteral(1583))
-1583 -62 -182 0
-1583 -47 -182 0
-1583 -47 -62 0
1583 62 182 0
1583 47 182 0
1583 47 62 0
c (((SATLiteral(49) + SATLiteral(64) + SATLiteral(184))<=1)=tv=SATLiteral(1584))
-1584 -64 -184 0
-1584 -49 -184 0
-1584 -49 -64 0
1584 64 184 0
1584 49 184 0
1584 49 64 0
c (((SATLiteral(51) + SATLiteral(66) + SATLiteral(186))<=1)=tv=SATLiteral(1585))
-1585 -66 -186 0
-1585 -51 -186 0
-1585 -51 -66 0
1585 66 186 0
1585 51 186 0
1585 51 66 0
c (((SATLiteral(53) + SATLiteral(68) + SATLiteral(188))<=1)=tv=SATLiteral(1586))
-1586 -68 -188 0
-1586 -53 -188 0
-1586 -53 -68 0
1586 68 188 0
1586 53 188 0
1586 53 68 0
c (((SATLiteral(55) + SATLiteral(70) + SATLiteral(190))<=1)=tv=SATLiteral(1587))
-1587 -70 -190 0
-1587 -55 -190 0
-1587 -55 -70 0
1587 70 190 0
1587 55 190 0
1587 55 70 0
c (((SATLiteral(57) + SATLiteral(72) + SATLiteral(192))<=1)=tv=SATLiteral(1588))
-1588 -72 -192 0
-1588 -57 -192 0
-1588 -57 -72 0
1588 72 192 0
1588 57 192 0
1588 57 72 0
c (((SATLiteral(59) + SATLiteral(74) + SATLiteral(194))<=1)=tv=SATLiteral(1589))
-1589 -74 -194 0
-1589 -59 -194 0
-1589 -59 -74 0
1589 74 194 0
1589 59 194 0
1589 59 74 0
c (((SATLiteral(61) + SATLiteral(76) + SATLiteral(196))<=1)=tv=SATLiteral(1590))
-1590 -76 -196 0
-1590 -61 -196 0
-1590 -61 -76 0
1590 76 196 0
1590 61 196 0
1590 61 76 0
c (((SATLiteral(-60) + SATLiteral(-75) + SATLiteral(-195))<=1)=tv=SATLiteral(1591))
-1591 75 195 0
-1591 60 195 0
-1591 60 75 0
1591 -75 -195 0
1591 -60 -195 0
1591 -60 -75 0
c (((SATLiteral(107) + SATLiteral(122) + SATLiteral(257))<=1)=tv=SATLiteral(1592))
-1592 -122 -257 0
-1592 -107 -257 0
-1592 -107 -122 0
1592 122 257 0
1592 107 257 0
1592 107 122 0
c (((SATLiteral(109) + SATLiteral(124) + SATLiteral(259))<=1)=tv=SATLiteral(1593))
-1593 -124 -259 0
-1593 -109 -259 0
-1593 -109 -124 0
1593 124 259 0
1593 109 259 0
1593 109 124 0
c (((SATLiteral(111) + SATLiteral(126) + SATLiteral(261))<=1)=tv=SATLiteral(1594))
-1594 -126 -261 0
-1594 -111 -261 0
-1594 -111 -126 0
1594 126 261 0
1594 111 261 0
1594 111 126 0
c (((SATLiteral(113) + SATLiteral(128) + SATLiteral(263))<=1)=tv=SATLiteral(1595))
-1595 -128 -263 0
-1595 -113 -263 0
-1595 -113 -128 0
1595 128 263 0
1595 113 263 0
1595 113 128 0
c (((SATLiteral(115) + SATLiteral(130) + SATLiteral(265))<=1)=tv=SATLiteral(1596))
-1596 -130 -265 0
-1596 -115 -265 0
-1596 -115 -130 0
1596 130 265 0
1596 115 265 0
1596 115 130 0
c (((SATLiteral(117) + SATLiteral(132) + SATLiteral(267))<=1)=tv=SATLiteral(1597))
-1597 -132 -267 0
-1597 -117 -267 0
-1597 -117 -132 0
1597 132 267 0
1597 117 267 0
1597 117 132 0
c (((SATLiteral(119) + SATLiteral(134) + SATLiteral(269))<=1)=tv=SATLiteral(1598))
-1598 -134 -269 0
-1598 -119 -269 0
-1598 -119 -134 0
1598 134 269 0
1598 119 269 0
1598 119 134 0
c (((SATLiteral(121) + SATLiteral(136) + SATLiteral(271))<=1)=tv=SATLiteral(1599))
-1599 -136 -271 0
-1599 -121 -271 0
-1599 -121 -136 0
1599 136 271 0
1599 121 271 0
1599 121 136 0
c (((SATLiteral(-120) + SATLiteral(-135) + SATLiteral(-270))<=1)=tv=SATLiteral(1600))
-1600 135 270 0
-1600 120 270 0
-1600 120 135 0
1600 -135 -270 0
1600 -120 -270 0
1600 -120 -135 0
c (((SATLiteral(377) + SATLiteral(227) + SATLiteral(242))<=1)=tv=SATLiteral(1601))
-1601 -227 -242 0
-1601 -377 -242 0
-1601 -377 -227 0
1601 227 242 0
1601 377 242 0
1601 377 227 0
c (((SATLiteral(379) + SATLiteral(229) + SATLiteral(244))<=1)=tv=SATLiteral(1602))
-1602 -229 -244 0
-1602 -379 -244 0
-1602 -379 -229 0
1602 229 244 0
1602 379 244 0
1602 379 229 0
c (((SATLiteral(381) + SATLiteral(231) + SATLiteral(246))<=1)=tv=SATLiteral(1603))
-1603 -231 -246 0
-1603 -381 -246 0
-1603 -381 -231 0
1603 231 246 0
1603 381 246 0
1603 381 231 0
c (((SATLiteral(383) + SATLiteral(233) + SATLiteral(248))<=1)=tv=SATLiteral(1604))
-1604 -233 -248 0
-1604 -383 -248 0
-1604 -383 -233 0
1604 233 248 0
1604 383 248 0
1604 383 233 0
c (((SATLiteral(385) + SATLiteral(235) + SATLiteral(250))<=1)=tv=SATLiteral(1605))
-1605 -235 -250 0
-1605 -385 -250 0
-1605 -385 -235 0
1605 235 250 0
1605 385 250 0
1605 385 235 0
c (((SATLiteral(387) + SATLiteral(237) + SATLiteral(252))<=1)=tv=SATLiteral(1606))
-1606 -237 -252 0
-1606 -387 -252 0
-1606 -387 -237 0
1606 237 252 0
1606 387 252 0
1606 387 237 0
c (((SATLiteral(389) + SATLiteral(239) + SATLiteral(254))<=1)=tv=SATLiteral(1607))
-1607 -239 -254 0
-1607 -389 -254 0
-1607 -389 -239 0
1607 239 254 0
1607 389 254 0
1607 389 239 0
c (((SATLiteral(391) + SATLiteral(241) + SATLiteral(256))<=1)=tv=SATLiteral(1608))
-1608 -241 -256 0
-1608 -391 -256 0
-1608 -391 -241 0
1608 241 256 0
1608 391 256 0
1608 391 241 0
c (((SATLiteral(-390) + SATLiteral(-240) + SATLiteral(-255))<=1)=tv=SATLiteral(1609))
-1609 240 255 0
-1609 390 255 0
-1609 390 240 0
1609 -240 -255 0
1609 -390 -255 0
1609 -390 -240 0
c (((SATLiteral(677) + aux1894 + SATLiteral(407))<=1)=tv=SATLiteral(1610))
-1610 7855 0
-1610 -407 7854 0
-1610 -677 7854 0
-1610 -677 -407 0
1610 407 -7854 0
1610 677 -7854 0
1610 677 407 -7855 0
c (((SATLiteral(679) + aux1895 + SATLiteral(409))<=1)=tv=SATLiteral(1611))
-1611 7858 0
-1611 -409 7857 0
-1611 -679 7857 0
-1611 -679 -409 0
1611 409 -7857 0
1611 679 -7857 0
1611 679 409 -7858 0
c (((SATLiteral(681) + aux1896 + SATLiteral(411))<=1)=tv=SATLiteral(1612))
-1612 7861 0
-1612 -411 7860 0
-1612 -681 7860 0
-1612 -681 -411 0
1612 411 -7860 0
1612 681 -7860 0
1612 681 411 -7861 0
c (((SATLiteral(683) + aux1897 + SATLiteral(413))<=1)=tv=SATLiteral(1613))
-1613 7864 0
-1613 -413 7863 0
-1613 -683 7863 0
-1613 -683 -413 0
1613 413 -7863 0
1613 683 -7863 0
1613 683 413 -7864 0
c (((SATLiteral(685) + aux1898 + SATLiteral(415))<=1)=tv=SATLiteral(1614))
-1614 7867 0
-1614 -415 7866 0
-1614 -685 7866 0
-1614 -685 -415 0
1614 415 -7866 0
1614 685 -7866 0
1614 685 415 -7867 0
c (((SATLiteral(687) + aux1899 + SATLiteral(417))<=1)=tv=SATLiteral(1615))
-1615 7870 0
-1615 -417 7869 0
-1615 -687 7869 0
-1615 -687 -417 0
1615 417 -7869 0
1615 687 -7869 0
1615 687 417 -7870 0
c (((SATLiteral(689) + aux1900 + SATLiteral(419))<=1)=tv=SATLiteral(1616))
-1616 7873 0
-1616 -419 7872 0
-1616 -689 7872 0
-1616 -689 -419 0
1616 419 -7872 0
1616 689 -7872 0
1616 689 419 -7873 0
c (((SATLiteral(691) + aux1901 + SATLiteral(421))<=1)=tv=SATLiteral(1617))
-1617 7876 0
-1617 -421 7875 0
-1617 -691 7875 0
-1617 -691 -421 0
1617 421 -7875 0
1617 691 -7875 0
1617 691 421 -7876 0
c (((SATLiteral(-690) + aux1902 + SATLiteral(-420))<=1)=tv=SATLiteral(1618))
-1618 7879 0
-1618 420 7878 0
-1618 690 7878 0
-1618 690 420 0
1618 -420 -7878 0
1618 -690 -7878 0
1618 -690 -420 -7879 0
c (((SATLiteral(287) + SATLiteral(422) + SATLiteral(557))<=1)=tv=SATLiteral(1619))
-1619 -422 -557 0
-1619 -287 -557 0
-1619 -287 -422 0
1619 422 557 0
1619 287 557 0
1619 287 422 0
c (((SATLiteral(289) + SATLiteral(424) + SATLiteral(559))<=1)=tv=SATLiteral(1620))
-1620 -424 -559 0
-1620 -289 -559 0
-1620 -289 -424 0
1620 424 559 0
1620 289 559 0
1620 289 424 0
c (((SATLiteral(291) + SATLiteral(426) + SATLiteral(561))<=1)=tv=SATLiteral(1621))
-1621 -426 -561 0
-1621 -291 -561 0
-1621 -291 -426 0
1621 426 561 0
1621 291 561 0
1621 291 426 0
c (((SATLiteral(293) + SATLiteral(428) + SATLiteral(563))<=1)=tv=SATLiteral(1622))
-1622 -428 -563 0
-1622 -293 -563 0
-1622 -293 -428 0
1622 428 563 0
1622 293 563 0
1622 293 428 0
c (((SATLiteral(295) + SATLiteral(430) + SATLiteral(565))<=1)=tv=SATLiteral(1623))
-1623 -430 -565 0
-1623 -295 -565 0
-1623 -295 -430 0
1623 430 565 0
1623 295 565 0
1623 295 430 0
c (((SATLiteral(297) + SATLiteral(432) + SATLiteral(567))<=1)=tv=SATLiteral(1624))
-1624 -432 -567 0
-1624 -297 -567 0
-1624 -297 -432 0
1624 432 567 0
1624 297 567 0
1624 297 432 0
c (((SATLiteral(299) + SATLiteral(434) + SATLiteral(569))<=1)=tv=SATLiteral(1625))
-1625 -434 -569 0
-1625 -299 -569 0
-1625 -299 -434 0
1625 434 569 0
1625 299 569 0
1625 299 434 0
c (((SATLiteral(301) + SATLiteral(436) + SATLiteral(571))<=1)=tv=SATLiteral(1626))
-1626 -436 -571 0
-1626 -301 -571 0
-1626 -301 -436 0
1626 436 571 0
1626 301 571 0
1626 301 436 0
c (((SATLiteral(-300) + SATLiteral(-435) + SATLiteral(-570))<=1)=tv=SATLiteral(1627))
-1627 435 570 0
-1627 300 570 0
-1627 300 435 0
1627 -435 -570 0
1627 -300 -570 0
1627 -300 -435 0
c (((SATLiteral(302) + SATLiteral(317) + SATLiteral(452))<=1)=tv=SATLiteral(1628))
-1628 -317 -452 0
-1628 -302 -452 0
-1628 -302 -317 0
1628 317 452 0
1628 302 452 0
1628 302 317 0
c (((SATLiteral(304) + SATLiteral(319) + SATLiteral(454))<=1)=tv=SATLiteral(1629))
-1629 -319 -454 0
-1629 -304 -454 0
-1629 -304 -319 0
1629 319 454 0
1629 304 454 0
1629 304 319 0
c (((SATLiteral(306) + SATLiteral(321) + SATLiteral(456))<=1)=tv=SATLiteral(1630))
-1630 -321 -456 0
-1630 -306 -456 0
-1630 -306 -321 0
1630 321 456 0
1630 306 456 0
1630 306 321 0
c (((SATLiteral(308) + SATLiteral(323) + SATLiteral(458))<=1)=tv=SATLiteral(1631))
-1631 -323 -458 0
-1631 -308 -458 0
-1631 -308 -323 0
1631 323 458 0
1631 308 458 0
1631 308 323 0
c (((SATLiteral(310) + SATLiteral(325) + SATLiteral(460))<=1)=tv=SATLiteral(1632))
-1632 -325 -460 0
-1632 -310 -460 0
-1632 -310 -325 0
1632 325 460 0
1632 310 460 0
1632 310 325 0
c (((SATLiteral(312) + SATLiteral(327) + SATLiteral(462))<=1)=tv=SATLiteral(1633))
-1633 -327 -462 0
-1633 -312 -462 0
-1633 -312 -327 0
1633 327 462 0
1633 312 462 0
1633 312 327 0
c (((SATLiteral(314) + SATLiteral(329) + SATLiteral(464))<=1)=tv=SATLiteral(1634))
-1634 -329 -464 0
-1634 -314 -464 0
-1634 -314 -329 0
1634 329 464 0
1634 314 464 0
1634 314 329 0
c (((SATLiteral(316) + SATLiteral(331) + SATLiteral(466))<=1)=tv=SATLiteral(1635))
-1635 -331 -466 0
-1635 -316 -466 0
-1635 -316 -331 0
1635 331 466 0
1635 316 466 0
1635 316 331 0
c (((SATLiteral(-315) + SATLiteral(-330) + SATLiteral(-465))<=1)=tv=SATLiteral(1636))
-1636 330 465 0
-1636 315 465 0
-1636 315 330 0
1636 -330 -465 0
1636 -315 -465 0
1636 -315 -330 0
c (((SATLiteral(362) + aux1903 + SATLiteral(482))<=1)=tv=SATLiteral(1637))
-1637 7882 0
-1637 -482 7881 0
-1637 -362 7881 0
-1637 -362 -482 0
1637 482 -7881 0
1637 362 -7881 0
1637 362 482 -7882 0
c (((SATLiteral(364) + aux1904 + SATLiteral(484))<=1)=tv=SATLiteral(1638))
-1638 7885 0
-1638 -484 7884 0
-1638 -364 7884 0
-1638 -364 -484 0
1638 484 -7884 0
1638 364 -7884 0
1638 364 484 -7885 0
c (((SATLiteral(366) + aux1905 + SATLiteral(486))<=1)=tv=SATLiteral(1639))
-1639 7888 0
-1639 -486 7887 0
-1639 -366 7887 0
-1639 -366 -486 0
1639 486 -7887 0
1639 366 -7887 0
1639 366 486 -7888 0
c (((SATLiteral(368) + aux1906 + SATLiteral(488))<=1)=tv=SATLiteral(1640))
-1640 7891 0
-1640 -488 7890 0
-1640 -368 7890 0
-1640 -368 -488 0
1640 488 -7890 0
1640 368 -7890 0
1640 368 488 -7891 0
c (((SATLiteral(370) + aux1907 + SATLiteral(490))<=1)=tv=SATLiteral(1641))
-1641 7894 0
-1641 -490 7893 0
-1641 -370 7893 0
-1641 -370 -490 0
1641 490 -7893 0
1641 370 -7893 0
1641 370 490 -7894 0
c (((SATLiteral(372) + aux1908 + SATLiteral(492))<=1)=tv=SATLiteral(1642))
-1642 7897 0
-1642 -492 7896 0
-1642 -372 7896 0
-1642 -372 -492 0
1642 492 -7896 0
1642 372 -7896 0
1642 372 492 -7897 0
c (((SATLiteral(374) + aux1909 + SATLiteral(494))<=1)=tv=SATLiteral(1643))
-1643 7900 0
-1643 -494 7899 0
-1643 -374 7899 0
-1643 -374 -494 0
1643 494 -7899 0
1643 374 -7899 0
1643 374 494 -7900 0
c (((SATLiteral(376) + aux1910 + SATLiteral(496))<=1)=tv=SATLiteral(1644))
-1644 7903 0
-1644 -496 7902 0
-1644 -376 7902 0
-1644 -376 -496 0
1644 496 -7902 0
1644 376 -7902 0
1644 376 496 -7903 0
c (((SATLiteral(-375) + aux1911 + SATLiteral(-495))<=1)=tv=SATLiteral(1645))
-1645 7906 0
-1645 495 7905 0
-1645 375 7905 0
-1645 375 495 0
1645 -495 -7905 0
1645 -375 -7905 0
1645 -375 -495 -7906 0
c (((aux1912 + aux1913 + aux1915)<=1)=tv=SATLiteral(1646))
-1646 7918 0
-1646 7911 7917 0
-1646 7912 0
-1646 7908 7917 0
-1646 7908 7911 0
-1646 7908 7912 0
-1646 7909 0
-1646 7909 7911 0
-1646 7909 7912 0
1646 -7909 -7911 -7917 0
1646 -7908 -7912 -7917 0
1646 -7908 -7911 -7918 0
c (((aux1916 + aux1917 + aux1919)<=1)=tv=SATLiteral(1647))
-1647 7932 0
-1647 7925 7931 0
-1647 7926 0
-1647 7922 7931 0
-1647 7922 7925 0
-1647 7922 7926 0
-1647 7923 0
-1647 7923 7925 0
-1647 7923 7926 0
1647 -7923 -7925 -7931 0
1647 -7922 -7926 -7931 0
1647 -7922 -7925 -7932 0
c (((aux1920 + aux1921 + aux1923)<=1)=tv=SATLiteral(1648))
-1648 7946 0
-1648 7939 7945 0
-1648 7940 0
-1648 7936 7945 0
-1648 7936 7939 0
-1648 7936 7940 0
-1648 7937 0
-1648 7937 7939 0
-1648 7937 7940 0
1648 -7937 -7939 -7945 0
1648 -7936 -7940 -7945 0
1648 -7936 -7939 -7946 0
c (((aux1924 + aux1925 + aux1927)<=1)=tv=SATLiteral(1649))
-1649 7960 0
-1649 7953 7959 0
-1649 7954 0
-1649 7950 7959 0
-1649 7950 7953 0
-1649 7950 7954 0
-1649 7951 0
-1649 7951 7953 0
-1649 7951 7954 0
1649 -7951 -7953 -7959 0
1649 -7950 -7954 -7959 0
1649 -7950 -7953 -7960 0
c (((aux1928 + aux1929 + aux1931)<=1)=tv=SATLiteral(1650))
-1650 7974 0
-1650 7967 7973 0
-1650 7968 0
-1650 7964 7973 0
-1650 7964 7967 0
-1650 7964 7968 0
-1650 7965 0
-1650 7965 7967 0
-1650 7965 7968 0
1650 -7965 -7967 -7973 0
1650 -7964 -7968 -7973 0
1650 -7964 -7967 -7974 0
c (((aux1932 + aux1933 + aux1935)<=1)=tv=SATLiteral(1651))
-1651 7988 0
-1651 7981 7987 0
-1651 7982 0
-1651 7978 7987 0
-1651 7978 7981 0
-1651 7978 7982 0
-1651 7979 0
-1651 7979 7981 0
-1651 7979 7982 0
1651 -7979 -7981 -7987 0
1651 -7978 -7982 -7987 0
1651 -7978 -7981 -7988 0
c (((aux1936 + aux1937 + aux1939)<=1)=tv=SATLiteral(1652))
-1652 8002 0
-1652 7995 8001 0
-1652 7996 0
-1652 7992 8001 0
-1652 7992 7995 0
-1652 7992 7996 0
-1652 7993 0
-1652 7993 7995 0
-1652 7993 7996 0
1652 -7993 -7995 -8001 0
1652 -7992 -7996 -8001 0
1652 -7992 -7995 -8002 0
c (((aux1940 + aux1941 + aux1943)<=1)=tv=SATLiteral(1653))
-1653 8016 0
-1653 8009 8015 0
-1653 8010 0
-1653 8006 8015 0
-1653 8006 8009 0
-1653 8006 8010 0
-1653 8007 0
-1653 8007 8009 0
-1653 8007 8010 0
1653 -8007 -8009 -8015 0
1653 -8006 -8010 -8015 0
1653 -8006 -8009 -8016 0
c (((aux1944 + aux1945 + aux1947)<=1)=tv=SATLiteral(1654))
-1654 8030 0
-1654 8023 8029 0
-1654 8024 0
-1654 8020 8029 0
-1654 8020 8023 0
-1654 8020 8024 0
-1654 8021 0
-1654 8021 8023 0
-1654 8021 8024 0
1654 -8021 -8023 -8029 0
1654 -8020 -8024 -8029 0
1654 -8020 -8023 -8030 0
c (((SATLiteral(737) + aux1948 + SATLiteral(587))<=1)=tv=SATLiteral(1655))
-1655 8035 0
-1655 -587 8034 0
-1655 -737 8034 0
-1655 -737 -587 0
1655 587 -8034 0
1655 737 -8034 0
1655 737 587 -8035 0
c (((SATLiteral(739) + aux1949 + SATLiteral(589))<=1)=tv=SATLiteral(1656))
-1656 8038 0
-1656 -589 8037 0
-1656 -739 8037 0
-1656 -739 -589 0
1656 589 -8037 0
1656 739 -8037 0
1656 739 589 -8038 0
c (((SATLiteral(741) + aux1950 + SATLiteral(591))<=1)=tv=SATLiteral(1657))
-1657 8041 0
-1657 -591 8040 0
-1657 -741 8040 0
-1657 -741 -591 0
1657 591 -8040 0
1657 741 -8040 0
1657 741 591 -8041 0
c (((SATLiteral(743) + aux1951 + SATLiteral(593))<=1)=tv=SATLiteral(1658))
-1658 8044 0
-1658 -593 8043 0
-1658 -743 8043 0
-1658 -743 -593 0
1658 593 -8043 0
1658 743 -8043 0
1658 743 593 -8044 0
c (((SATLiteral(745) + aux1952 + SATLiteral(595))<=1)=tv=SATLiteral(1659))
-1659 8047 0
-1659 -595 8046 0
-1659 -745 8046 0
-1659 -745 -595 0
1659 595 -8046 0
1659 745 -8046 0
1659 745 595 -8047 0
c (((SATLiteral(747) + aux1953 + SATLiteral(597))<=1)=tv=SATLiteral(1660))
-1660 8050 0
-1660 -597 8049 0
-1660 -747 8049 0
-1660 -747 -597 0
1660 597 -8049 0
1660 747 -8049 0
1660 747 597 -8050 0
c (((SATLiteral(749) + aux1954 + SATLiteral(599))<=1)=tv=SATLiteral(1661))
-1661 8053 0
-1661 -599 8052 0
-1661 -749 8052 0
-1661 -749 -599 0
1661 599 -8052 0
1661 749 -8052 0
1661 749 599 -8053 0
c (((SATLiteral(751) + aux1955 + SATLiteral(601))<=1)=tv=SATLiteral(1662))
-1662 8056 0
-1662 -601 8055 0
-1662 -751 8055 0
-1662 -751 -601 0
1662 601 -8055 0
1662 751 -8055 0
1662 751 601 -8056 0
c (((SATLiteral(-750) + aux1956 + SATLiteral(-600))<=1)=tv=SATLiteral(1663))
-1663 8059 0
-1663 600 8058 0
-1663 750 8058 0
-1663 750 600 0
1663 -600 -8058 0
1663 -750 -8058 0
1663 -750 -600 -8059 0
c (((SATLiteral(782) + SATLiteral(797) + SATLiteral(662))<=1)=tv=SATLiteral(1664))
-1664 -797 -662 0
-1664 -782 -662 0
-1664 -782 -797 0
1664 797 662 0
1664 782 662 0
1664 782 797 0
c (((SATLiteral(784) + SATLiteral(799) + SATLiteral(664))<=1)=tv=SATLiteral(1665))
-1665 -799 -664 0
-1665 -784 -664 0
-1665 -784 -799 0
1665 799 664 0
1665 784 664 0
1665 784 799 0
c (((SATLiteral(786) + SATLiteral(801) + SATLiteral(666))<=1)=tv=SATLiteral(1666))
-1666 -801 -666 0
-1666 -786 -666 0
-1666 -786 -801 0
1666 801 666 0
1666 786 666 0
1666 786 801 0
c (((SATLiteral(788) + SATLiteral(803) + SATLiteral(668))<=1)=tv=SATLiteral(1667))
-1667 -803 -668 0
-1667 -788 -668 0
-1667 -788 -803 0
1667 803 668 0
1667 788 668 0
1667 788 803 0
c (((SATLiteral(790) + SATLiteral(805) + SATLiteral(670))<=1)=tv=SATLiteral(1668))
-1668 -805 -670 0
-1668 -790 -670 0
-1668 -790 -805 0
1668 805 670 0
1668 790 670 0
1668 790 805 0
c (((SATLiteral(792) + SATLiteral(807) + SATLiteral(672))<=1)=tv=SATLiteral(1669))
-1669 -807 -672 0
-1669 -792 -672 0
-1669 -792 -807 0
1669 807 672 0
1669 792 672 0
1669 792 807 0
c (((SATLiteral(794) + SATLiteral(809) + SATLiteral(674))<=1)=tv=SATLiteral(1670))
-1670 -809 -674 0
-1670 -794 -674 0
-1670 -794 -809 0
1670 809 674 0
1670 794 674 0
1670 794 809 0
c (((SATLiteral(796) + SATLiteral(811) + SATLiteral(676))<=1)=tv=SATLiteral(1671))
-1671 -811 -676 0
-1671 -796 -676 0
-1671 -796 -811 0
1671 811 676 0
1671 796 676 0
1671 796 811 0
c (((SATLiteral(-795) + SATLiteral(-810) + SATLiteral(-675))<=1)=tv=SATLiteral(1672))
-1672 810 675 0
-1672 795 675 0
-1672 795 810 0
1672 -810 -675 0
1672 -795 -675 0
1672 -795 -810 0
c (((SATLiteral(692) + SATLiteral(812) + SATLiteral(827))<=1)=tv=SATLiteral(1673))
-1673 -812 -827 0
-1673 -692 -827 0
-1673 -692 -812 0
1673 812 827 0
1673 692 827 0
1673 692 812 0
c (((SATLiteral(694) + SATLiteral(814) + SATLiteral(829))<=1)=tv=SATLiteral(1674))
-1674 -814 -829 0
-1674 -694 -829 0
-1674 -694 -814 0
1674 814 829 0
1674 694 829 0
1674 694 814 0
c (((SATLiteral(696) + SATLiteral(816) + SATLiteral(831))<=1)=tv=SATLiteral(1675))
-1675 -816 -831 0
-1675 -696 -831 0
-1675 -696 -816 0
1675 816 831 0
1675 696 831 0
1675 696 816 0
c (((SATLiteral(698) + SATLiteral(818) + SATLiteral(833))<=1)=tv=SATLiteral(1676))
-1676 -818 -833 0
-1676 -698 -833 0
-1676 -698 -818 0
1676 818 833 0
1676 698 833 0
1676 698 818 0
c (((SATLiteral(700) + SATLiteral(820) + SATLiteral(835))<=1)=tv=SATLiteral(1677))
-1677 -820 -835 0
-1677 -700 -835 0
-1677 -700 -820 0
1677 820 835 0
1677 700 835 0
1677 700 820 0
c (((SATLiteral(702) + SATLiteral(822) + SATLiteral(837))<=1)=tv=SATLiteral(1678))
-1678 -822 -837 0
-1678 -702 -837 0
-1678 -702 -822 0
1678 822 837 0
1678 702 837 0
1678 702 822 0
c (((SATLiteral(704) + SATLiteral(824) + SATLiteral(839))<=1)=tv=SATLiteral(1679))
-1679 -824 -839 0
-1679 -704 -839 0
-1679 -704 -824 0
1679 824 839 0
1679 704 839 0
1679 704 824 0
c (((SATLiteral(706) + SATLiteral(826) + SATLiteral(841))<=1)=tv=SATLiteral(1680))
-1680 -826 -841 0
-1680 -706 -841 0
-1680 -706 -826 0
1680 826 841 0
1680 706 841 0
1680 706 826 0
c (((SATLiteral(-705) + SATLiteral(-825) + SATLiteral(-840))<=1)=tv=SATLiteral(1681))
-1681 825 840 0
-1681 705 840 0
-1681 705 825 0
1681 -825 -840 0
1681 -705 -840 0
1681 -705 -825 0
c (((SATLiteral(752) + SATLiteral(767) + SATLiteral(902))<=1)=tv=SATLiteral(1682))
-1682 -767 -902 0
-1682 -752 -902 0
-1682 -752 -767 0
1682 767 902 0
1682 752 902 0
1682 752 767 0
c (((SATLiteral(754) + SATLiteral(769) + SATLiteral(904))<=1)=tv=SATLiteral(1683))
-1683 -769 -904 0
-1683 -754 -904 0
-1683 -754 -769 0
1683 769 904 0
1683 754 904 0
1683 754 769 0
c (((SATLiteral(756) + SATLiteral(771) + SATLiteral(906))<=1)=tv=SATLiteral(1684))
-1684 -771 -906 0
-1684 -756 -906 0
-1684 -756 -771 0
1684 771 906 0
1684 756 906 0
1684 756 771 0
c (((SATLiteral(758) + SATLiteral(773) + SATLiteral(908))<=1)=tv=SATLiteral(1685))
-1685 -773 -908 0
-1685 -758 -908 0
-1685 -758 -773 0
1685 773 908 0
1685 758 908 0
1685 758 773 0
c (((SATLiteral(760) + SATLiteral(775) + SATLiteral(910))<=1)=tv=SATLiteral(1686))
-1686 -775 -910 0
-1686 -760 -910 0
-1686 -760 -775 0
1686 775 910 0
1686 760 910 0
1686 760 775 0
c (((SATLiteral(762) + SATLiteral(777) + SATLiteral(912))<=1)=tv=SATLiteral(1687))
-1687 -777 -912 0
-1687 -762 -912 0
-1687 -762 -777 0
1687 777 912 0
1687 762 912 0
1687 762 777 0
c (((SATLiteral(764) + SATLiteral(779) + SATLiteral(914))<=1)=tv=SATLiteral(1688))
-1688 -779 -914 0
-1688 -764 -914 0
-1688 -764 -779 0
1688 779 914 0
1688 764 914 0
1688 764 779 0
c (((SATLiteral(766) + SATLiteral(781) + SATLiteral(916))<=1)=tv=SATLiteral(1689))
-1689 -781 -916 0
-1689 -766 -916 0
-1689 -766 -781 0
1689 781 916 0
1689 766 916 0
1689 766 781 0
c (((SATLiteral(-765) + SATLiteral(-780) + SATLiteral(-915))<=1)=tv=SATLiteral(1690))
-1690 780 915 0
-1690 765 915 0
-1690 765 780 0
1690 -780 -915 0
1690 -765 -915 0
1690 -765 -780 0
c (((SATLiteral(962) + aux1957 + SATLiteral(1082))<=1)=tv=SATLiteral(1691))
-1691 8062 0
-1691 -1082 8061 0
-1691 -962 8061 0
-1691 -962 -1082 0
1691 1082 -8061 0
1691 962 -8061 0
1691 962 1082 -8062 0
c (((SATLiteral(964) + aux1958 + SATLiteral(1084))<=1)=tv=SATLiteral(1692))
-1692 8065 0
-1692 -1084 8064 0
-1692 -964 8064 0
-1692 -964 -1084 0
1692 1084 -8064 0
1692 964 -8064 0
1692 964 1084 -8065 0
c (((SATLiteral(966) + aux1959 + SATLiteral(1086))<=1)=tv=SATLiteral(1693))
-1693 8068 0
-1693 -1086 8067 0
-1693 -966 8067 0
-1693 -966 -1086 0
1693 1086 -8067 0
1693 966 -8067 0
1693 966 1086 -8068 0
c (((SATLiteral(968) + aux1960 + SATLiteral(1088))<=1)=tv=SATLiteral(1694))
-1694 8071 0
-1694 -1088 8070 0
-1694 -968 8070 0
-1694 -968 -1088 0
1694 1088 -8070 0
1694 968 -8070 0
1694 968 1088 -8071 0
c (((SATLiteral(970) + aux1961 + SATLiteral(1090))<=1)=tv=SATLiteral(1695))
-1695 8074 0
-1695 -1090 8073 0
-1695 -970 8073 0
-1695 -970 -1090 0
1695 1090 -8073 0
1695 970 -8073 0
1695 970 1090 -8074 0
c (((SATLiteral(972) + aux1962 + SATLiteral(1092))<=1)=tv=SATLiteral(1696))
-1696 8077 0
-1696 -1092 8076 0
-1696 -972 8076 0
-1696 -972 -1092 0
1696 1092 -8076 0
1696 972 -8076 0
1696 972 1092 -8077 0
c (((SATLiteral(974) + aux1963 + SATLiteral(1094))<=1)=tv=SATLiteral(1697))
-1697 8080 0
-1697 -1094 8079 0
-1697 -974 8079 0
-1697 -974 -1094 0
1697 1094 -8079 0
1697 974 -8079 0
1697 974 1094 -8080 0
c (((SATLiteral(976) + aux1964 + SATLiteral(1096))<=1)=tv=SATLiteral(1698))
-1698 8083 0
-1698 -1096 8082 0
-1698 -976 8082 0
-1698 -976 -1096 0
1698 1096 -8082 0
1698 976 -8082 0
1698 976 1096 -8083 0
c (((SATLiteral(-975) + aux1965 + SATLiteral(-1095))<=1)=tv=SATLiteral(1699))
-1699 8086 0
-1699 1095 8085 0
-1699 975 8085 0
-1699 975 1095 0
1699 -1095 -8085 0
1699 -975 -8085 0
1699 -975 -1095 -8086 0
c (((SATLiteral(977) + SATLiteral(992) + SATLiteral(1112))<=1)=tv=SATLiteral(1700))
-1700 -992 -1112 0
-1700 -977 -1112 0
-1700 -977 -992 0
1700 992 1112 0
1700 977 1112 0
1700 977 992 0
c (((SATLiteral(979) + SATLiteral(994) + SATLiteral(1114))<=1)=tv=SATLiteral(1701))
-1701 -994 -1114 0
-1701 -979 -1114 0
-1701 -979 -994 0
1701 994 1114 0
1701 979 1114 0
1701 979 994 0
c (((SATLiteral(981) + SATLiteral(996) + SATLiteral(1116))<=1)=tv=SATLiteral(1702))
-1702 -996 -1116 0
-1702 -981 -1116 0
-1702 -981 -996 0
1702 996 1116 0
1702 981 1116 0
1702 981 996 0
c (((SATLiteral(983) + SATLiteral(998) + SATLiteral(1118))<=1)=tv=SATLiteral(1703))
-1703 -998 -1118 0
-1703 -983 -1118 0
-1703 -983 -998 0
1703 998 1118 0
1703 983 1118 0
1703 983 998 0
c (((SATLiteral(985) + SATLiteral(1000) + SATLiteral(1120))<=1)=tv=SATLiteral(1704))
-1704 -1000 -1120 0
-1704 -985 -1120 0
-1704 -985 -1000 0
1704 1000 1120 0
1704 985 1120 0
1704 985 1000 0
c (((SATLiteral(987) + SATLiteral(1002) + SATLiteral(1122))<=1)=tv=SATLiteral(1705))
-1705 -1002 -1122 0
-1705 -987 -1122 0
-1705 -987 -1002 0
1705 1002 1122 0
1705 987 1122 0
1705 987 1002 0
c (((SATLiteral(989) + SATLiteral(1004) + SATLiteral(1124))<=1)=tv=SATLiteral(1706))
-1706 -1004 -1124 0
-1706 -989 -1124 0
-1706 -989 -1004 0
1706 1004 1124 0
1706 989 1124 0
1706 989 1004 0
c (((SATLiteral(991) + SATLiteral(1006) + SATLiteral(1126))<=1)=tv=SATLiteral(1707))
-1707 -1006 -1126 0
-1707 -991 -1126 0
-1707 -991 -1006 0
1707 1006 1126 0
1707 991 1126 0
1707 991 1006 0
c (((SATLiteral(-990) + SATLiteral(-1005) + SATLiteral(-1125))<=1)=tv=SATLiteral(1708))
-1708 1005 1125 0
-1708 990 1125 0
-1708 990 1005 0
1708 -1005 -1125 0
1708 -990 -1125 0
1708 -990 -1005 0
c (((SATLiteral(1007) + SATLiteral(1022) + SATLiteral(1037))<=1)=tv=SATLiteral(1709))
-1709 -1022 -1037 0
-1709 -1007 -1037 0
-1709 -1007 -1022 0
1709 1022 1037 0
1709 1007 1037 0
1709 1007 1022 0
c (((SATLiteral(1009) + SATLiteral(1024) + SATLiteral(1039))<=1)=tv=SATLiteral(1710))
-1710 -1024 -1039 0
-1710 -1009 -1039 0
-1710 -1009 -1024 0
1710 1024 1039 0
1710 1009 1039 0
1710 1009 1024 0
c (((SATLiteral(1011) + SATLiteral(1026) + SATLiteral(1041))<=1)=tv=SATLiteral(1711))
-1711 -1026 -1041 0
-1711 -1011 -1041 0
-1711 -1011 -1026 0
1711 1026 1041 0
1711 1011 1041 0
1711 1011 1026 0
c (((SATLiteral(1013) + SATLiteral(1028) + SATLiteral(1043))<=1)=tv=SATLiteral(1712))
-1712 -1028 -1043 0
-1712 -1013 -1043 0
-1712 -1013 -1028 0
1712 1028 1043 0
1712 1013 1043 0
1712 1013 1028 0
c (((SATLiteral(1015) + SATLiteral(1030) + SATLiteral(1045))<=1)=tv=SATLiteral(1713))
-1713 -1030 -1045 0
-1713 -1015 -1045 0
-1713 -1015 -1030 0
1713 1030 1045 0
1713 1015 1045 0
1713 1015 1030 0
c (((SATLiteral(1017) + SATLiteral(1032) + SATLiteral(1047))<=1)=tv=SATLiteral(1714))
-1714 -1032 -1047 0
-1714 -1017 -1047 0
-1714 -1017 -1032 0
1714 1032 1047 0
1714 1017 1047 0
1714 1017 1032 0
c (((SATLiteral(1019) + SATLiteral(1034) + SATLiteral(1049))<=1)=tv=SATLiteral(1715))
-1715 -1034 -1049 0
-1715 -1019 -1049 0
-1715 -1019 -1034 0
1715 1034 1049 0
1715 1019 1049 0
1715 1019 1034 0
c (((SATLiteral(1021) + SATLiteral(1036) + SATLiteral(1051))<=1)=tv=SATLiteral(1716))
-1716 -1036 -1051 0
-1716 -1021 -1051 0
-1716 -1021 -1036 0
1716 1036 1051 0
1716 1021 1051 0
1716 1021 1036 0
c (((SATLiteral(-1020) + SATLiteral(-1035) + SATLiteral(-1050))<=1)=tv=SATLiteral(1717))
-1717 1035 1050 0
-1717 1020 1050 0
-1717 1020 1035 0
1717 -1035 -1050 0
1717 -1020 -1050 0
1717 -1020 -1035 0
c (((aux1966 + SATLiteral(1142) + SATLiteral(1157))<=1)=tv=SATLiteral(1718))
-1718 8089 0
-1718 -1157 8088 0
-1718 -1142 8088 0
-1718 -1142 -1157 0
1718 1157 -8088 0
1718 1142 -8088 0
1718 1142 1157 -8089 0
c (((aux1967 + SATLiteral(1144) + SATLiteral(1159))<=1)=tv=SATLiteral(1719))
-1719 8092 0
-1719 -1159 8091 0
-1719 -1144 8091 0
-1719 -1144 -1159 0
1719 1159 -8091 0
1719 1144 -8091 0
1719 1144 1159 -8092 0
c (((aux1968 + SATLiteral(1146) + SATLiteral(1161))<=1)=tv=SATLiteral(1720))
-1720 8095 0
-1720 -1161 8094 0
-1720 -1146 8094 0
-1720 -1146 -1161 0
1720 1161 -8094 0
1720 1146 -8094 0
1720 1146 1161 -8095 0
c (((aux1969 + SATLiteral(1148) + SATLiteral(1163))<=1)=tv=SATLiteral(1721))
-1721 8098 0
-1721 -1163 8097 0
-1721 -1148 8097 0
-1721 -1148 -1163 0
1721 1163 -8097 0
1721 1148 -8097 0
1721 1148 1163 -8098 0
c (((aux1970 + SATLiteral(1150) + SATLiteral(1165))<=1)=tv=SATLiteral(1722))
-1722 8101 0
-1722 -1165 8100 0
-1722 -1150 8100 0
-1722 -1150 -1165 0
1722 1165 -8100 0
1722 1150 -8100 0
1722 1150 1165 -8101 0
c (((aux1971 + SATLiteral(1152) + SATLiteral(1167))<=1)=tv=SATLiteral(1723))
-1723 8104 0
-1723 -1167 8103 0
-1723 -1152 8103 0
-1723 -1152 -1167 0
1723 1167 -8103 0
1723 1152 -8103 0
1723 1152 1167 -8104 0
c (((aux1972 + SATLiteral(1154) + SATLiteral(1169))<=1)=tv=SATLiteral(1724))
-1724 8107 0
-1724 -1169 8106 0
-1724 -1154 8106 0
-1724 -1154 -1169 0
1724 1169 -8106 0
1724 1154 -8106 0
1724 1154 1169 -8107 0
c (((aux1973 + SATLiteral(1156) + SATLiteral(1171))<=1)=tv=SATLiteral(1725))
-1725 8110 0
-1725 -1171 8109 0
-1725 -1156 8109 0
-1725 -1156 -1171 0
1725 1171 -8109 0
1725 1156 -8109 0
1725 1156 1171 -8110 0
c (((aux1974 + SATLiteral(-1155) + SATLiteral(-1170))<=1)=tv=SATLiteral(1726))
-1726 8113 0
-1726 1170 8112 0
-1726 1155 8112 0
-1726 1155 1170 0
1726 -1170 -8112 0
1726 -1155 -8112 0
1726 -1155 -1170 -8113 0
c (SATLiteral(1272) -> SATLiteral(1300))
-1272 1300 0
c (SATLiteral(1273) -> SATLiteral(1301))
-1273 1301 0
c (SATLiteral(1274) -> SATLiteral(1302))
-1274 1302 0
c (SATLiteral(1275) -> SATLiteral(1303))
-1275 1303 0
c (SATLiteral(1276) -> SATLiteral(1304))
-1276 1304 0
c (SATLiteral(1277) -> SATLiteral(1305))
-1277 1305 0
c (SATLiteral(1278) -> SATLiteral(1306))
-1278 1306 0
c (SATLiteral(1279) -> SATLiteral(1307))
-1279 1307 0
c (SATLiteral(1280) -> SATLiteral(1308))
-1280 1308 0
c (SATLiteral(1281) -> SATLiteral(1309))
-1281 1309 0
c (SATLiteral(1282) -> SATLiteral(1310))
-1282 1310 0
c (SATLiteral(1283) -> SATLiteral(1311))
-1283 1311 0
c (SATLiteral(1284) -> SATLiteral(1312))
-1284 1312 0
c (SATLiteral(1285) -> SATLiteral(1313))
-1285 1313 0
c (SATLiteral(1286) -> SATLiteral(1314))
-1286 1314 0
c (SATLiteral(1287) -> SATLiteral(1315))
-1287 1315 0
c (SATLiteral(1288) -> SATLiteral(1316))
-1288 1316 0
c (SATLiteral(1289) -> SATLiteral(1317))
-1289 1317 0
c (SATLiteral(1290) -> SATLiteral(1318))
-1290 1318 0
c (SATLiteral(1291) -> SATLiteral(1319))
-1291 1319 0
c (SATLiteral(1292) -> SATLiteral(1320))
-1292 1320 0
c (SATLiteral(1293) -> SATLiteral(1321))
-1293 1321 0
c (SATLiteral(1294) -> SATLiteral(1322))
-1294 1322 0
c (SATLiteral(1295) -> SATLiteral(1323))
-1295 1323 0
c (SATLiteral(1296) -> SATLiteral(1324))
-1296 1324 0
c (SATLiteral(1297) -> SATLiteral(1325))
-1297 1325 0
c (SATLiteral(1298) -> SATLiteral(1326))
-1298 1326 0
c (SATLiteral(1299) -> SATLiteral(1327))
-1299 1327 0
c (SATLiteral(1244) -> SATLiteral(1328))
-1244 1328 0
c (SATLiteral(1245) -> SATLiteral(1329))
-1245 1329 0
c (SATLiteral(1247) -> SATLiteral(1330))
-1247 1330 0
c (SATLiteral(1249) -> SATLiteral(1331))
-1249 1331 0
c (SATLiteral(1250) -> SATLiteral(1332))
-1250 1332 0
c (SATLiteral(1255) -> SATLiteral(1333))
-1255 1333 0
c (SATLiteral(1257) -> SATLiteral(1334))
-1257 1334 0
c (SATLiteral(1259) -> SATLiteral(1335))
-1259 1335 0
c (SATLiteral(1261) -> SATLiteral(1336))
-1261 1336 0
c (SATLiteral(1265) -> SATLiteral(1337))
-1265 1337 0
c (SATLiteral(1269) -> SATLiteral(1338))
-1269 1338 0
c (SATLiteral(1270) -> SATLiteral(1339))
-1270 1339 0
c (SATLiteral(1217) -> SATLiteral(1340))
-1217 1340 0
c (SATLiteral(1217) -> SATLiteral(1341))
-1217 1341 0
c (SATLiteral(1217) -> SATLiteral(1342))
-1217 1342 0
c (SATLiteral(1217) -> SATLiteral(1343))
-1217 1343 0
c (SATLiteral(1217) -> SATLiteral(1344))
-1217 1344 0
c (SATLiteral(1217) -> SATLiteral(1345))
-1217 1345 0
c (SATLiteral(1217) -> SATLiteral(1346))
-1217 1346 0
c (SATLiteral(1217) -> SATLiteral(1347))
-1217 1347 0
c (SATLiteral(1217) -> SATLiteral(1348))
-1217 1348 0
c (SATLiteral(1218) -> SATLiteral(1349))
-1218 1349 0
c (SATLiteral(1218) -> SATLiteral(1350))
-1218 1350 0
c (SATLiteral(1218) -> SATLiteral(1351))
-1218 1351 0
c (SATLiteral(1218) -> SATLiteral(1352))
-1218 1352 0
c (SATLiteral(1218) -> SATLiteral(1353))
-1218 1353 0
c (SATLiteral(1218) -> SATLiteral(1354))
-1218 1354 0
c (SATLiteral(1218) -> SATLiteral(1355))
-1218 1355 0
c (SATLiteral(1218) -> SATLiteral(1356))
-1218 1356 0
c (SATLiteral(1218) -> SATLiteral(1357))
-1218 1357 0
c (SATLiteral(1219) -> SATLiteral(1358))
-1219 1358 0
c (SATLiteral(1219) -> SATLiteral(1359))
-1219 1359 0
c (SATLiteral(1219) -> SATLiteral(1360))
-1219 1360 0
c (SATLiteral(1219) -> SATLiteral(1361))
-1219 1361 0
c (SATLiteral(1219) -> SATLiteral(1362))
-1219 1362 0
c (SATLiteral(1219) -> SATLiteral(1363))
-1219 1363 0
c (SATLiteral(1219) -> SATLiteral(1364))
-1219 1364 0
c (SATLiteral(1219) -> SATLiteral(1365))
-1219 1365 0
c (SATLiteral(1219) -> SATLiteral(1366))
-1219 1366 0
c (SATLiteral(1220) -> SATLiteral(1367))
-1220 1367 0
c (SATLiteral(1220) -> SATLiteral(1368))
-1220 1368 0
c (SATLiteral(1220) -> SATLiteral(1369))
-1220 1369 0
c (SATLiteral(1220) -> SATLiteral(1370))
-1220 1370 0
c (SATLiteral(1220) -> SATLiteral(1371))
-1220 1371 0
c (SATLiteral(1220) -> SATLiteral(1372))
-1220 1372 0
c (SATLiteral(1220) -> SATLiteral(1373))
-1220 1373 0
c (SATLiteral(1220) -> SATLiteral(1374))
-1220 1374 0
c (SATLiteral(1220) -> SATLiteral(1375))
-1220 1375 0
c (SATLiteral(1221) -> SATLiteral(1376))
-1221 1376 0
c (SATLiteral(1221) -> SATLiteral(1377))
-1221 1377 0
c (SATLiteral(1221) -> SATLiteral(1378))
-1221 1378 0
c (SATLiteral(1221) -> SATLiteral(1379))
-1221 1379 0
c (SATLiteral(1221) -> SATLiteral(1380))
-1221 1380 0
c (SATLiteral(1221) -> SATLiteral(1381))
-1221 1381 0
c (SATLiteral(1221) -> SATLiteral(1382))
-1221 1382 0
c (SATLiteral(1221) -> SATLiteral(1383))
-1221 1383 0
c (SATLiteral(1221) -> SATLiteral(1384))
-1221 1384 0
c (SATLiteral(1222) -> SATLiteral(1385))
-1222 1385 0
c (SATLiteral(1222) -> SATLiteral(1386))
-1222 1386 0
c (SATLiteral(1222) -> SATLiteral(1387))
-1222 1387 0
c (SATLiteral(1222) -> SATLiteral(1388))
-1222 1388 0
c (SATLiteral(1222) -> SATLiteral(1389))
-1222 1389 0
c (SATLiteral(1222) -> SATLiteral(1390))
-1222 1390 0
c (SATLiteral(1222) -> SATLiteral(1391))
-1222 1391 0
c (SATLiteral(1222) -> SATLiteral(1392))
-1222 1392 0
c (SATLiteral(1222) -> SATLiteral(1393))
-1222 1393 0
c (SATLiteral(1223) -> SATLiteral(1394))
-1223 1394 0
c (SATLiteral(1223) -> SATLiteral(1395))
-1223 1395 0
c (SATLiteral(1223) -> SATLiteral(1396))
-1223 1396 0
c (SATLiteral(1223) -> SATLiteral(1397))
-1223 1397 0
c (SATLiteral(1223) -> SATLiteral(1398))
-1223 1398 0
c (SATLiteral(1223) -> SATLiteral(1399))
-1223 1399 0
c (SATLiteral(1223) -> SATLiteral(1400))
-1223 1400 0
c (SATLiteral(1223) -> SATLiteral(1401))
-1223 1401 0
c (SATLiteral(1223) -> SATLiteral(1402))
-1223 1402 0
c (SATLiteral(1224) -> SATLiteral(1403))
-1224 1403 0
c (SATLiteral(1224) -> SATLiteral(1404))
-1224 1404 0
c (SATLiteral(1224) -> SATLiteral(1405))
-1224 1405 0
c (SATLiteral(1224) -> SATLiteral(1406))
-1224 1406 0
c (SATLiteral(1224) -> SATLiteral(1407))
-1224 1407 0
c (SATLiteral(1224) -> SATLiteral(1408))
-1224 1408 0
c (SATLiteral(1224) -> SATLiteral(1409))
-1224 1409 0
c (SATLiteral(1224) -> SATLiteral(1410))
-1224 1410 0
c (SATLiteral(1224) -> SATLiteral(1411))
-1224 1411 0
c (SATLiteral(1225) -> SATLiteral(1412))
-1225 1412 0
c (SATLiteral(1225) -> SATLiteral(1413))
-1225 1413 0
c (SATLiteral(1225) -> SATLiteral(1414))
-1225 1414 0
c (SATLiteral(1225) -> SATLiteral(1415))
-1225 1415 0
c (SATLiteral(1225) -> SATLiteral(1416))
-1225 1416 0
c (SATLiteral(1225) -> SATLiteral(1417))
-1225 1417 0
c (SATLiteral(1225) -> SATLiteral(1418))
-1225 1418 0
c (SATLiteral(1225) -> SATLiteral(1419))
-1225 1419 0
c (SATLiteral(1225) -> SATLiteral(1420))
-1225 1420 0
c (SATLiteral(1226) -> SATLiteral(1421))
-1226 1421 0
c (SATLiteral(1226) -> SATLiteral(1422))
-1226 1422 0
c (SATLiteral(1226) -> SATLiteral(1423))
-1226 1423 0
c (SATLiteral(1226) -> SATLiteral(1424))
-1226 1424 0
c (SATLiteral(1226) -> SATLiteral(1425))
-1226 1425 0
c (SATLiteral(1226) -> SATLiteral(1426))
-1226 1426 0
c (SATLiteral(1226) -> SATLiteral(1427))
-1226 1427 0
c (SATLiteral(1226) -> SATLiteral(1428))
-1226 1428 0
c (SATLiteral(1226) -> SATLiteral(1429))
-1226 1429 0
c (SATLiteral(1227) -> SATLiteral(1430))
-1227 1430 0
c (SATLiteral(1227) -> SATLiteral(1431))
-1227 1431 0
c (SATLiteral(1227) -> SATLiteral(1432))
-1227 1432 0
c (SATLiteral(1227) -> SATLiteral(1433))
-1227 1433 0
c (SATLiteral(1227) -> SATLiteral(1434))
-1227 1434 0
c (SATLiteral(1227) -> SATLiteral(1435))
-1227 1435 0
c (SATLiteral(1227) -> SATLiteral(1436))
-1227 1436 0
c (SATLiteral(1227) -> SATLiteral(1437))
-1227 1437 0
c (SATLiteral(1227) -> SATLiteral(1438))
-1227 1438 0
c (SATLiteral(1228) -> SATLiteral(1439))
-1228 1439 0
c (SATLiteral(1228) -> SATLiteral(1440))
-1228 1440 0
c (SATLiteral(1228) -> SATLiteral(1441))
-1228 1441 0
c (SATLiteral(1228) -> SATLiteral(1442))
-1228 1442 0
c (SATLiteral(1228) -> SATLiteral(1443))
-1228 1443 0
c (SATLiteral(1228) -> SATLiteral(1444))
-1228 1444 0
c (SATLiteral(1228) -> SATLiteral(1445))
-1228 1445 0
c (SATLiteral(1228) -> SATLiteral(1446))
-1228 1446 0
c (SATLiteral(1228) -> SATLiteral(1447))
-1228 1447 0
c (SATLiteral(1229) -> SATLiteral(1448))
-1229 1448 0
c (SATLiteral(1229) -> SATLiteral(1449))
-1229 1449 0
c (SATLiteral(1229) -> SATLiteral(1450))
-1229 1450 0
c (SATLiteral(1229) -> SATLiteral(1451))
-1229 1451 0
c (SATLiteral(1229) -> SATLiteral(1452))
-1229 1452 0
c (SATLiteral(1229) -> SATLiteral(1453))
-1229 1453 0
c (SATLiteral(1229) -> SATLiteral(1454))
-1229 1454 0
c (SATLiteral(1229) -> SATLiteral(1455))
-1229 1455 0
c (SATLiteral(1229) -> SATLiteral(1456))
-1229 1456 0
c (SATLiteral(1230) -> SATLiteral(1457))
-1230 1457 0
c (SATLiteral(1230) -> SATLiteral(1458))
-1230 1458 0
c (SATLiteral(1230) -> SATLiteral(1459))
-1230 1459 0
c (SATLiteral(1230) -> SATLiteral(1460))
-1230 1460 0
c (SATLiteral(1230) -> SATLiteral(1461))
-1230 1461 0
c (SATLiteral(1230) -> SATLiteral(1462))
-1230 1462 0
c (SATLiteral(1230) -> SATLiteral(1463))
-1230 1463 0
c (SATLiteral(1230) -> SATLiteral(1464))
-1230 1464 0
c (SATLiteral(1230) -> SATLiteral(1465))
-1230 1465 0
c (SATLiteral(1231) -> SATLiteral(1466))
-1231 1466 0
c (SATLiteral(1231) -> SATLiteral(1467))
-1231 1467 0
c (SATLiteral(1231) -> SATLiteral(1468))
-1231 1468 0
c (SATLiteral(1231) -> SATLiteral(1469))
-1231 1469 0
c (SATLiteral(1231) -> SATLiteral(1470))
-1231 1470 0
c (SATLiteral(1231) -> SATLiteral(1471))
-1231 1471 0
c (SATLiteral(1231) -> SATLiteral(1472))
-1231 1472 0
c (SATLiteral(1231) -> SATLiteral(1473))
-1231 1473 0
c (SATLiteral(1231) -> SATLiteral(1474))
-1231 1474 0
c (SATLiteral(1232) -> SATLiteral(1475))
-1232 1475 0
c (SATLiteral(1232) -> SATLiteral(1476))
-1232 1476 0
c (SATLiteral(1232) -> SATLiteral(1477))
-1232 1477 0
c (SATLiteral(1232) -> SATLiteral(1478))
-1232 1478 0
c (SATLiteral(1232) -> SATLiteral(1479))
-1232 1479 0
c (SATLiteral(1232) -> SATLiteral(1480))
-1232 1480 0
c (SATLiteral(1232) -> SATLiteral(1481))
-1232 1481 0
c (SATLiteral(1232) -> SATLiteral(1482))
-1232 1482 0
c (SATLiteral(1232) -> SATLiteral(1483))
-1232 1483 0
c (SATLiteral(1233) -> SATLiteral(1484))
-1233 1484 0
c (SATLiteral(1233) -> SATLiteral(1485))
-1233 1485 0
c (SATLiteral(1233) -> SATLiteral(1486))
-1233 1486 0
c (SATLiteral(1233) -> SATLiteral(1487))
-1233 1487 0
c (SATLiteral(1233) -> SATLiteral(1488))
-1233 1488 0
c (SATLiteral(1233) -> SATLiteral(1489))
-1233 1489 0
c (SATLiteral(1233) -> SATLiteral(1490))
-1233 1490 0
c (SATLiteral(1233) -> SATLiteral(1491))
-1233 1491 0
c (SATLiteral(1233) -> SATLiteral(1492))
-1233 1492 0
c (SATLiteral(1234) -> SATLiteral(1493))
-1234 1493 0
c (SATLiteral(1234) -> SATLiteral(1494))
-1234 1494 0
c (SATLiteral(1234) -> SATLiteral(1495))
-1234 1495 0
c (SATLiteral(1234) -> SATLiteral(1496))
-1234 1496 0
c (SATLiteral(1234) -> SATLiteral(1497))
-1234 1497 0
c (SATLiteral(1234) -> SATLiteral(1498))
-1234 1498 0
c (SATLiteral(1234) -> SATLiteral(1499))
-1234 1499 0
c (SATLiteral(1234) -> SATLiteral(1500))
-1234 1500 0
c (SATLiteral(1234) -> SATLiteral(1501))
-1234 1501 0
c (SATLiteral(1235) -> SATLiteral(1502))
-1235 1502 0
c (SATLiteral(1235) -> SATLiteral(1503))
-1235 1503 0
c (SATLiteral(1235) -> SATLiteral(1504))
-1235 1504 0
c (SATLiteral(1235) -> SATLiteral(1505))
-1235 1505 0
c (SATLiteral(1235) -> SATLiteral(1506))
-1235 1506 0
c (SATLiteral(1235) -> SATLiteral(1507))
-1235 1507 0
c (SATLiteral(1235) -> SATLiteral(1508))
-1235 1508 0
c (SATLiteral(1235) -> SATLiteral(1509))
-1235 1509 0
c (SATLiteral(1235) -> SATLiteral(1510))
-1235 1510 0
c (SATLiteral(1236) -> SATLiteral(1511))
-1236 1511 0
c (SATLiteral(1236) -> SATLiteral(1512))
-1236 1512 0
c (SATLiteral(1236) -> SATLiteral(1513))
-1236 1513 0
c (SATLiteral(1236) -> SATLiteral(1514))
-1236 1514 0
c (SATLiteral(1236) -> SATLiteral(1515))
-1236 1515 0
c (SATLiteral(1236) -> SATLiteral(1516))
-1236 1516 0
c (SATLiteral(1236) -> SATLiteral(1517))
-1236 1517 0
c (SATLiteral(1236) -> SATLiteral(1518))
-1236 1518 0
c (SATLiteral(1236) -> SATLiteral(1519))
-1236 1519 0
c (SATLiteral(1237) -> SATLiteral(1520))
-1237 1520 0
c (SATLiteral(1237) -> SATLiteral(1521))
-1237 1521 0
c (SATLiteral(1237) -> SATLiteral(1522))
-1237 1522 0
c (SATLiteral(1237) -> SATLiteral(1523))
-1237 1523 0
c (SATLiteral(1237) -> SATLiteral(1524))
-1237 1524 0
c (SATLiteral(1237) -> SATLiteral(1525))
-1237 1525 0
c (SATLiteral(1237) -> SATLiteral(1526))
-1237 1526 0
c (SATLiteral(1237) -> SATLiteral(1527))
-1237 1527 0
c (SATLiteral(1237) -> SATLiteral(1528))
-1237 1528 0
c (SATLiteral(1238) -> SATLiteral(1529))
-1238 1529 0
c (SATLiteral(1238) -> SATLiteral(1530))
-1238 1530 0
c (SATLiteral(1238) -> SATLiteral(1531))
-1238 1531 0
c (SATLiteral(1238) -> SATLiteral(1532))
-1238 1532 0
c (SATLiteral(1238) -> SATLiteral(1533))
-1238 1533 0
c (SATLiteral(1238) -> SATLiteral(1534))
-1238 1534 0
c (SATLiteral(1238) -> SATLiteral(1535))
-1238 1535 0
c (SATLiteral(1238) -> SATLiteral(1536))
-1238 1536 0
c (SATLiteral(1238) -> SATLiteral(1537))
-1238 1537 0
c (SATLiteral(1239) -> SATLiteral(1538))
-1239 1538 0
c (SATLiteral(1239) -> SATLiteral(1539))
-1239 1539 0
c (SATLiteral(1239) -> SATLiteral(1540))
-1239 1540 0
c (SATLiteral(1239) -> SATLiteral(1541))
-1239 1541 0
c (SATLiteral(1239) -> SATLiteral(1542))
-1239 1542 0
c (SATLiteral(1239) -> SATLiteral(1543))
-1239 1543 0
c (SATLiteral(1239) -> SATLiteral(1544))
-1239 1544 0
c (SATLiteral(1239) -> SATLiteral(1545))
-1239 1545 0
c (SATLiteral(1239) -> SATLiteral(1546))
-1239 1546 0
c (SATLiteral(1240) -> SATLiteral(1547))
-1240 1547 0
c (SATLiteral(1240) -> SATLiteral(1548))
-1240 1548 0
c (SATLiteral(1240) -> SATLiteral(1549))
-1240 1549 0
c (SATLiteral(1240) -> SATLiteral(1550))
-1240 1550 0
c (SATLiteral(1240) -> SATLiteral(1551))
-1240 1551 0
c (SATLiteral(1240) -> SATLiteral(1552))
-1240 1552 0
c (SATLiteral(1240) -> SATLiteral(1553))
-1240 1553 0
c (SATLiteral(1240) -> SATLiteral(1554))
-1240 1554 0
c (SATLiteral(1240) -> SATLiteral(1555))
-1240 1555 0
c (SATLiteral(1241) -> SATLiteral(1556))
-1241 1556 0
c (SATLiteral(1241) -> SATLiteral(1557))
-1241 1557 0
c (SATLiteral(1241) -> SATLiteral(1558))
-1241 1558 0
c (SATLiteral(1241) -> SATLiteral(1559))
-1241 1559 0
c (SATLiteral(1241) -> SATLiteral(1560))
-1241 1560 0
c (SATLiteral(1241) -> SATLiteral(1561))
-1241 1561 0
c (SATLiteral(1241) -> SATLiteral(1562))
-1241 1562 0
c (SATLiteral(1241) -> SATLiteral(1563))
-1241 1563 0
c (SATLiteral(1241) -> SATLiteral(1564))
-1241 1564 0
c (SATLiteral(1242) -> SATLiteral(1565))
-1242 1565 0
c (SATLiteral(1242) -> SATLiteral(1566))
-1242 1566 0
c (SATLiteral(1242) -> SATLiteral(1567))
-1242 1567 0
c (SATLiteral(1242) -> SATLiteral(1568))
-1242 1568 0
c (SATLiteral(1242) -> SATLiteral(1569))
-1242 1569 0
c (SATLiteral(1242) -> SATLiteral(1570))
-1242 1570 0
c (SATLiteral(1242) -> SATLiteral(1571))
-1242 1571 0
c (SATLiteral(1242) -> SATLiteral(1572))
-1242 1572 0
c (SATLiteral(1242) -> SATLiteral(1573))
-1242 1573 0
c (SATLiteral(1243) -> SATLiteral(1574))
-1243 1574 0
c (SATLiteral(1243) -> SATLiteral(1575))
-1243 1575 0
c (SATLiteral(1243) -> SATLiteral(1576))
-1243 1576 0
c (SATLiteral(1243) -> SATLiteral(1577))
-1243 1577 0
c (SATLiteral(1243) -> SATLiteral(1578))
-1243 1578 0
c (SATLiteral(1243) -> SATLiteral(1579))
-1243 1579 0
c (SATLiteral(1243) -> SATLiteral(1580))
-1243 1580 0
c (SATLiteral(1243) -> SATLiteral(1581))
-1243 1581 0
c (SATLiteral(1243) -> SATLiteral(1582))
-1243 1582 0
c (SATLiteral(1246) -> SATLiteral(1583))
-1246 1583 0
c (SATLiteral(1246) -> SATLiteral(1584))
-1246 1584 0
c (SATLiteral(1246) -> SATLiteral(1585))
-1246 1585 0
c (SATLiteral(1246) -> SATLiteral(1586))
-1246 1586 0
c (SATLiteral(1246) -> SATLiteral(1587))
-1246 1587 0
c (SATLiteral(1246) -> SATLiteral(1588))
-1246 1588 0
c (SATLiteral(1246) -> SATLiteral(1589))
-1246 1589 0
c (SATLiteral(1246) -> SATLiteral(1590))
-1246 1590 0
c (SATLiteral(1246) -> SATLiteral(1591))
-1246 1591 0
c (SATLiteral(1248) -> SATLiteral(1592))
-1248 1592 0
c (SATLiteral(1248) -> SATLiteral(1593))
-1248 1593 0
c (SATLiteral(1248) -> SATLiteral(1594))
-1248 1594 0
c (SATLiteral(1248) -> SATLiteral(1595))
-1248 1595 0
c (SATLiteral(1248) -> SATLiteral(1596))
-1248 1596 0
c (SATLiteral(1248) -> SATLiteral(1597))
-1248 1597 0
c (SATLiteral(1248) -> SATLiteral(1598))
-1248 1598 0
c (SATLiteral(1248) -> SATLiteral(1599))
-1248 1599 0
c (SATLiteral(1248) -> SATLiteral(1600))
-1248 1600 0
c (SATLiteral(1251) -> SATLiteral(1601))
-1251 1601 0
c (SATLiteral(1251) -> SATLiteral(1602))
-1251 1602 0
c (SATLiteral(1251) -> SATLiteral(1603))
-1251 1603 0
c (SATLiteral(1251) -> SATLiteral(1604))
-1251 1604 0
c (SATLiteral(1251) -> SATLiteral(1605))
-1251 1605 0
c (SATLiteral(1251) -> SATLiteral(1606))
-1251 1606 0
c (SATLiteral(1251) -> SATLiteral(1607))
-1251 1607 0
c (SATLiteral(1251) -> SATLiteral(1608))
-1251 1608 0
c (SATLiteral(1251) -> SATLiteral(1609))
-1251 1609 0
c (SATLiteral(1252) -> SATLiteral(1610))
-1252 1610 0
c (SATLiteral(1252) -> SATLiteral(1611))
-1252 1611 0
c (SATLiteral(1252) -> SATLiteral(1612))
-1252 1612 0
c (SATLiteral(1252) -> SATLiteral(1613))
-1252 1613 0
c (SATLiteral(1252) -> SATLiteral(1614))
-1252 1614 0
c (SATLiteral(1252) -> SATLiteral(1615))
-1252 1615 0
c (SATLiteral(1252) -> SATLiteral(1616))
-1252 1616 0
c (SATLiteral(1252) -> SATLiteral(1617))
-1252 1617 0
c (SATLiteral(1252) -> SATLiteral(1618))
-1252 1618 0
c (SATLiteral(1253) -> SATLiteral(1619))
-1253 1619 0
c (SATLiteral(1253) -> SATLiteral(1620))
-1253 1620 0
c (SATLiteral(1253) -> SATLiteral(1621))
-1253 1621 0
c (SATLiteral(1253) -> SATLiteral(1622))
-1253 1622 0
c (SATLiteral(1253) -> SATLiteral(1623))
-1253 1623 0
c (SATLiteral(1253) -> SATLiteral(1624))
-1253 1624 0
c (SATLiteral(1253) -> SATLiteral(1625))
-1253 1625 0
c (SATLiteral(1253) -> SATLiteral(1626))
-1253 1626 0
c (SATLiteral(1253) -> SATLiteral(1627))
-1253 1627 0
c (SATLiteral(1254) -> SATLiteral(1628))
-1254 1628 0
c (SATLiteral(1254) -> SATLiteral(1629))
-1254 1629 0
c (SATLiteral(1254) -> SATLiteral(1630))
-1254 1630 0
c (SATLiteral(1254) -> SATLiteral(1631))
-1254 1631 0
c (SATLiteral(1254) -> SATLiteral(1632))
-1254 1632 0
c (SATLiteral(1254) -> SATLiteral(1633))
-1254 1633 0
c (SATLiteral(1254) -> SATLiteral(1634))
-1254 1634 0
c (SATLiteral(1254) -> SATLiteral(1635))
-1254 1635 0
c (SATLiteral(1254) -> SATLiteral(1636))
-1254 1636 0
c (SATLiteral(1256) -> SATLiteral(1637))
-1256 1637 0
c (SATLiteral(1256) -> SATLiteral(1638))
-1256 1638 0
c (SATLiteral(1256) -> SATLiteral(1639))
-1256 1639 0
c (SATLiteral(1256) -> SATLiteral(1640))
-1256 1640 0
c (SATLiteral(1256) -> SATLiteral(1641))
-1256 1641 0
c (SATLiteral(1256) -> SATLiteral(1642))
-1256 1642 0
c (SATLiteral(1256) -> SATLiteral(1643))
-1256 1643 0
c (SATLiteral(1256) -> SATLiteral(1644))
-1256 1644 0
c (SATLiteral(1256) -> SATLiteral(1645))
-1256 1645 0
c (SATLiteral(1258) -> SATLiteral(1646))
-1258 1646 0
c (SATLiteral(1258) -> SATLiteral(1647))
-1258 1647 0
c (SATLiteral(1258) -> SATLiteral(1648))
-1258 1648 0
c (SATLiteral(1258) -> SATLiteral(1649))
-1258 1649 0
c (SATLiteral(1258) -> SATLiteral(1650))
-1258 1650 0
c (SATLiteral(1258) -> SATLiteral(1651))
-1258 1651 0
c (SATLiteral(1258) -> SATLiteral(1652))
-1258 1652 0
c (SATLiteral(1258) -> SATLiteral(1653))
-1258 1653 0
c (SATLiteral(1258) -> SATLiteral(1654))
-1258 1654 0
c (SATLiteral(1260) -> SATLiteral(1655))
-1260 1655 0
c (SATLiteral(1260) -> SATLiteral(1656))
-1260 1656 0
c (SATLiteral(1260) -> SATLiteral(1657))
-1260 1657 0
c (SATLiteral(1260) -> SATLiteral(1658))
-1260 1658 0
c (SATLiteral(1260) -> SATLiteral(1659))
-1260 1659 0
c (SATLiteral(1260) -> SATLiteral(1660))
-1260 1660 0
c (SATLiteral(1260) -> SATLiteral(1661))
-1260 1661 0
c (SATLiteral(1260) -> SATLiteral(1662))
-1260 1662 0
c (SATLiteral(1260) -> SATLiteral(1663))
-1260 1663 0
c (SATLiteral(1262) -> SATLiteral(1664))
-1262 1664 0
c (SATLiteral(1262) -> SATLiteral(1665))
-1262 1665 0
c (SATLiteral(1262) -> SATLiteral(1666))
-1262 1666 0
c (SATLiteral(1262) -> SATLiteral(1667))
-1262 1667 0
c (SATLiteral(1262) -> SATLiteral(1668))
-1262 1668 0
c (SATLiteral(1262) -> SATLiteral(1669))
-1262 1669 0
c (SATLiteral(1262) -> SATLiteral(1670))
-1262 1670 0
c (SATLiteral(1262) -> SATLiteral(1671))
-1262 1671 0
c (SATLiteral(1262) -> SATLiteral(1672))
-1262 1672 0
c (SATLiteral(1263) -> SATLiteral(1673))
-1263 1673 0
c (SATLiteral(1263) -> SATLiteral(1674))
-1263 1674 0
c (SATLiteral(1263) -> SATLiteral(1675))
-1263 1675 0
c (SATLiteral(1263) -> SATLiteral(1676))
-1263 1676 0
c (SATLiteral(1263) -> SATLiteral(1677))
-1263 1677 0
c (SATLiteral(1263) -> SATLiteral(1678))
-1263 1678 0
c (SATLiteral(1263) -> SATLiteral(1679))
-1263 1679 0
c (SATLiteral(1263) -> SATLiteral(1680))
-1263 1680 0
c (SATLiteral(1263) -> SATLiteral(1681))
-1263 1681 0
c (SATLiteral(1264) -> SATLiteral(1682))
-1264 1682 0
c (SATLiteral(1264) -> SATLiteral(1683))
-1264 1683 0
c (SATLiteral(1264) -> SATLiteral(1684))
-1264 1684 0
c (SATLiteral(1264) -> SATLiteral(1685))
-1264 1685 0
c (SATLiteral(1264) -> SATLiteral(1686))
-1264 1686 0
c (SATLiteral(1264) -> SATLiteral(1687))
-1264 1687 0
c (SATLiteral(1264) -> SATLiteral(1688))
-1264 1688 0
c (SATLiteral(1264) -> SATLiteral(1689))
-1264 1689 0
c (SATLiteral(1264) -> SATLiteral(1690))
-1264 1690 0
c (SATLiteral(1266) -> SATLiteral(1691))
-1266 1691 0
c (SATLiteral(1266) -> SATLiteral(1692))
-1266 1692 0
c (SATLiteral(1266) -> SATLiteral(1693))
-1266 1693 0
c (SATLiteral(1266) -> SATLiteral(1694))
-1266 1694 0
c (SATLiteral(1266) -> SATLiteral(1695))
-1266 1695 0
c (SATLiteral(1266) -> SATLiteral(1696))
-1266 1696 0
c (SATLiteral(1266) -> SATLiteral(1697))
-1266 1697 0
c (SATLiteral(1266) -> SATLiteral(1698))
-1266 1698 0
c (SATLiteral(1266) -> SATLiteral(1699))
-1266 1699 0
c (SATLiteral(1267) -> SATLiteral(1700))
-1267 1700 0
c (SATLiteral(1267) -> SATLiteral(1701))
-1267 1701 0
c (SATLiteral(1267) -> SATLiteral(1702))
-1267 1702 0
c (SATLiteral(1267) -> SATLiteral(1703))
-1267 1703 0
c (SATLiteral(1267) -> SATLiteral(1704))
-1267 1704 0
c (SATLiteral(1267) -> SATLiteral(1705))
-1267 1705 0
c (SATLiteral(1267) -> SATLiteral(1706))
-1267 1706 0
c (SATLiteral(1267) -> SATLiteral(1707))
-1267 1707 0
c (SATLiteral(1267) -> SATLiteral(1708))
-1267 1708 0
c (SATLiteral(1268) -> SATLiteral(1709))
-1268 1709 0
c (SATLiteral(1268) -> SATLiteral(1710))
-1268 1710 0
c (SATLiteral(1268) -> SATLiteral(1711))
-1268 1711 0
c (SATLiteral(1268) -> SATLiteral(1712))
-1268 1712 0
c (SATLiteral(1268) -> SATLiteral(1713))
-1268 1713 0
c (SATLiteral(1268) -> SATLiteral(1714))
-1268 1714 0
c (SATLiteral(1268) -> SATLiteral(1715))
-1268 1715 0
c (SATLiteral(1268) -> SATLiteral(1716))
-1268 1716 0
c (SATLiteral(1268) -> SATLiteral(1717))
-1268 1717 0
c (SATLiteral(1271) -> SATLiteral(1718))
-1271 1718 0
c (SATLiteral(1271) -> SATLiteral(1719))
-1271 1719 0
c (SATLiteral(1271) -> SATLiteral(1720))
-1271 1720 0
c (SATLiteral(1271) -> SATLiteral(1721))
-1271 1721 0
c (SATLiteral(1271) -> SATLiteral(1722))
-1271 1722 0
c (SATLiteral(1271) -> SATLiteral(1723))
-1271 1723 0
c (SATLiteral(1271) -> SATLiteral(1724))
-1271 1724 0
c (SATLiteral(1271) -> SATLiteral(1725))
-1271 1725 0
c (SATLiteral(1271) -> SATLiteral(1726))
-1271 1726 0
c (( - aux427 + shift(x_00003_00001, -1) + shift(x_00006_00001, -1))<=0)
677 -1727 0
678 -1728 0
680 -1730 0
682 -1732 0
684 -1734 0
686 -1736 0
688 -1738 0
690 -1740 0
272 -1727 0
272 677 -1728 0
272 678 -1730 0
272 680 -1732 0
272 682 -1734 0
272 684 -1736 0
272 686 -1738 0
272 688 -1740 0
272 690 -1742 0
273 -1728 0
273 677 -1730 0
273 678 -1732 0
273 680 -1734 0
273 682 -1736 0
273 684 -1738 0
273 686 -1740 0
273 688 -1742 0
273 690 -1744 0
275 -1730 0
275 677 -1732 0
275 678 -1734 0
275 680 -1736 0
275 682 -1738 0
275 684 -1740 0
275 686 -1742 0
275 688 -1744 0
275 690 -1746 0
277 -1732 0
277 677 -1734 0
277 678 -1736 0
277 680 -1738 0
277 682 -1740 0
277 684 -1742 0
277 686 -1744 0
277 688 -1746 0
277 690 -1748 0
279 -1734 0
279 677 -1736 0
279 678 -1738 0
279 680 -1740 0
279 682 -1742 0
279 684 -1744 0
279 686 -1746 0
279 688 -1748 0
279 690 -1750 0
281 -1736 0
281 677 -1738 0
281 678 -1740 0
281 680 -1742 0
281 682 -1744 0
281 684 -1746 0
281 686 -1748 0
281 688 -1750 0
281 690 -1752 0
283 -1738 0
283 677 -1740 0
283 678 -1742 0
283 680 -1744 0
283 682 -1746 0
283 684 -1748 0
283 686 -1750 0
283 688 -1752 0
283 690 -1754 0
285 -1740 0
285 677 -1742 0
285 678 -1744 0
285 680 -1746 0
285 682 -1748 0
285 684 -1750 0
285 686 -1752 0
285 688 -1754 0
285 690 -1756 0
c (0<=( - aux427 + shift(x_00003_00001, -1) + shift(x_00006_00001, -1)))
-690 1756 0
-688 1754 0
-686 1752 0
-684 1750 0
-682 1748 0
-680 1746 0
-678 1744 0
-677 1742 0
-285 1756 0
-285 -690 1754 0
-285 -688 1752 0
-285 -686 1750 0
-285 -684 1748 0
-285 -682 1746 0
-285 -680 1744 0
-285 -678 1742 0
-285 -677 1740 0
-283 1754 0
-283 -690 1752 0
-283 -688 1750 0
-283 -686 1748 0
-283 -684 1746 0
-283 -682 1744 0
-283 -680 1742 0
-283 -678 1740 0
-283 -677 1738 0
-281 1752 0
-281 -690 1750 0
-281 -688 1748 0
-281 -686 1746 0
-281 -684 1744 0
-281 -682 1742 0
-281 -680 1740 0
-281 -678 1738 0
-281 -677 1736 0
-279 1750 0
-279 -690 1748 0
-279 -688 1746 0
-279 -686 1744 0
-279 -684 1742 0
-279 -682 1740 0
-279 -680 1738 0
-279 -678 1736 0
-279 -677 1734 0
-277 1748 0
-277 -690 1746 0
-277 -688 1744 0
-277 -686 1742 0
-277 -684 1740 0
-277 -682 1738 0
-277 -680 1736 0
-277 -678 1734 0
-277 -677 1732 0
-275 1746 0
-275 -690 1744 0
-275 -688 1742 0
-275 -686 1740 0
-275 -684 1738 0
-275 -682 1736 0
-275 -680 1734 0
-275 -678 1732 0
-275 -677 1730 0
-273 1744 0
-273 -690 1742 0
-273 -688 1740 0
-273 -686 1738 0
-273 -684 1736 0
-273 -682 1734 0
-273 -680 1732 0
-273 -678 1730 0
-273 -677 1728 0
-272 1742 0
-272 -690 1740 0
-272 -688 1738 0
-272 -686 1736 0
-272 -684 1734 0
-272 -682 1732 0
-272 -680 1730 0
-272 -678 1728 0
-272 -677 1727 0
c (( - aux428 + shift(x_00003_00006, -1) + shift(x_00004_00007, -1))<=0)
497 -1758 0
498 -1759 0
500 -1761 0
502 -1763 0
504 -1765 0
506 -1767 0
508 -1769 0
510 -1771 0
347 -1758 0
347 497 -1759 0
347 498 -1761 0
347 500 -1763 0
347 502 -1765 0
347 504 -1767 0
347 506 -1769 0
347 508 -1771 0
347 510 -1773 0
348 -1759 0
348 497 -1761 0
348 498 -1763 0
348 500 -1765 0
348 502 -1767 0
348 504 -1769 0
348 506 -1771 0
348 508 -1773 0
348 510 -1775 0
350 -1761 0
350 497 -1763 0
350 498 -1765 0
350 500 -1767 0
350 502 -1769 0
350 504 -1771 0
350 506 -1773 0
350 508 -1775 0
350 510 -1777 0
352 -1763 0
352 497 -1765 0
352 498 -1767 0
352 500 -1769 0
352 502 -1771 0
352 504 -1773 0
352 506 -1775 0
352 508 -1777 0
352 510 -1779 0
354 -1765 0
354 497 -1767 0
354 498 -1769 0
354 500 -1771 0
354 502 -1773 0
354 504 -1775 0
354 506 -1777 0
354 508 -1779 0
354 510 -1781 0
356 -1767 0
356 497 -1769 0
356 498 -1771 0
356 500 -1773 0
356 502 -1775 0
356 504 -1777 0
356 506 -1779 0
356 508 -1781 0
356 510 -1783 0
358 -1769 0
358 497 -1771 0
358 498 -1773 0
358 500 -1775 0
358 502 -1777 0
358 504 -1779 0
358 506 -1781 0
358 508 -1783 0
358 510 -1785 0
360 -1771 0
360 497 -1773 0
360 498 -1775 0
360 500 -1777 0
360 502 -1779 0
360 504 -1781 0
360 506 -1783 0
360 508 -1785 0
360 510 -1787 0
c (0<=( - aux428 + shift(x_00003_00006, -1) + shift(x_00004_00007, -1)))
-510 1787 0
-508 1785 0
-506 1783 0
-504 1781 0
-502 1779 0
-500 1777 0
-498 1775 0
-497 1773 0
-360 1787 0
-360 -510 1785 0
-360 -508 1783 0
-360 -506 1781 0
-360 -504 1779 0
-360 -502 1777 0
-360 -500 1775 0
-360 -498 1773 0
-360 -497 1771 0
-358 1785 0
-358 -510 1783 0
-358 -508 1781 0
-358 -506 1779 0
-358 -504 1777 0
-358 -502 1775 0
-358 -500 1773 0
-358 -498 1771 0
-358 -497 1769 0
-356 1783 0
-356 -510 1781 0
-356 -508 1779 0
-356 -506 1777 0
-356 -504 1775 0
-356 -502 1773 0
-356 -500 1771 0
-356 -498 1769 0
-356 -497 1767 0
-354 1781 0
-354 -510 1779 0
-354 -508 1777 0
-354 -506 1775 0
-354 -504 1773 0
-354 -502 1771 0
-354 -500 1769 0
-354 -498 1767 0
-354 -497 1765 0
-352 1779 0
-352 -510 1777 0
-352 -508 1775 0
-352 -506 1773 0
-352 -504 1771 0
-352 -502 1769 0
-352 -500 1767 0
-352 -498 1765 0
-352 -497 1763 0
-350 1777 0
-350 -510 1775 0
-350 -508 1773 0
-350 -506 1771 0
-350 -504 1769 0
-350 -502 1767 0
-350 -500 1765 0
-350 -498 1763 0
-350 -497 1761 0
-348 1775 0
-348 -510 1773 0
-348 -508 1771 0
-348 -506 1769 0
-348 -504 1767 0
-348 -502 1765 0
-348 -500 1763 0
-348 -498 1761 0
-348 -497 1759 0
-347 1773 0
-347 -510 1771 0
-347 -508 1769 0
-347 -506 1767 0
-347 -504 1765 0
-347 -502 1763 0
-347 -500 1761 0
-347 -498 1759 0
-347 -497 1758 0
c (( - aux433 + shift(x_00005_00004, -1) + shift(x_00006_00005, -1))<=0)
737 -1929 0
738 -1930 0
740 -1932 0
742 -1934 0
744 -1936 0
746 -1938 0
748 -1940 0
750 -1942 0
587 -1929 0
587 737 -1930 0
587 738 -1932 0
587 740 -1934 0
587 742 -1936 0
587 744 -1938 0
587 746 -1940 0
587 748 -1942 0
587 750 -1944 0
588 -1930 0
588 737 -1932 0
588 738 -1934 0
588 740 -1936 0
588 742 -1938 0
588 744 -1940 0
588 746 -1942 0
588 748 -1944 0
588 750 -1946 0
590 -1932 0
590 737 -1934 0
590 738 -1936 0
590 740 -1938 0
590 742 -1940 0
590 744 -1942 0
590 746 -1944 0
590 748 -1946 0
590 750 -1948 0
592 -1934 0
592 737 -1936 0
592 738 -1938 0
592 740 -1940 0
592 742 -1942 0
592 744 -1944 0
592 746 -1946 0
592 748 -1948 0
592 750 -1950 0
594 -1936 0
594 737 -1938 0
594 738 -1940 0
594 740 -1942 0
594 742 -1944 0
594 744 -1946 0
594 746 -1948 0
594 748 -1950 0
594 750 -1952 0
596 -1938 0
596 737 -1940 0
596 738 -1942 0
596 740 -1944 0
596 742 -1946 0
596 744 -1948 0
596 746 -1950 0
596 748 -1952 0
596 750 -1954 0
598 -1940 0
598 737 -1942 0
598 738 -1944 0
598 740 -1946 0
598 742 -1948 0
598 744 -1950 0
598 746 -1952 0
598 748 -1954 0
598 750 -1956 0
600 -1942 0
600 737 -1944 0
600 738 -1946 0
600 740 -1948 0
600 742 -1950 0
600 744 -1952 0
600 746 -1954 0
600 748 -1956 0
600 750 -1958 0
c (0<=( - aux433 + shift(x_00005_00004, -1) + shift(x_00006_00005, -1)))
-750 1958 0
-748 1956 0
-746 1954 0
-744 1952 0
-742 1950 0
-740 1948 0
-738 1946 0
-737 1944 0
-600 1958 0
-600 -750 1956 0
-600 -748 1954 0
-600 -746 1952 0
-600 -744 1950 0
-600 -742 1948 0
-600 -740 1946 0
-600 -738 1944 0
-600 -737 1942 0
-598 1956 0
-598 -750 1954 0
-598 -748 1952 0
-598 -746 1950 0
-598 -744 1948 0
-598 -742 1946 0
-598 -740 1944 0
-598 -738 1942 0
-598 -737 1940 0
-596 1954 0
-596 -750 1952 0
-596 -748 1950 0
-596 -746 1948 0
-596 -744 1946 0
-596 -742 1944 0
-596 -740 1942 0
-596 -738 1940 0
-596 -737 1938 0
-594 1952 0
-594 -750 1950 0
-594 -748 1948 0
-594 -746 1946 0
-594 -744 1944 0
-594 -742 1942 0
-594 -740 1940 0
-594 -738 1938 0
-594 -737 1936 0
-592 1950 0
-592 -750 1948 0
-592 -748 1946 0
-592 -746 1944 0
-592 -744 1942 0
-592 -742 1940 0
-592 -740 1938 0
-592 -738 1936 0
-592 -737 1934 0
-590 1948 0
-590 -750 1946 0
-590 -748 1944 0
-590 -746 1942 0
-590 -744 1940 0
-590 -742 1938 0
-590 -740 1936 0
-590 -738 1934 0
-590 -737 1932 0
-588 1946 0
-588 -750 1944 0
-588 -748 1942 0
-588 -746 1940 0
-588 -744 1938 0
-588 -742 1936 0
-588 -740 1934 0
-588 -738 1932 0
-588 -737 1930 0
-587 1944 0
-587 -750 1942 0
-587 -748 1940 0
-587 -746 1938 0
-587 -744 1936 0
-587 -742 1934 0
-587 -740 1932 0
-587 -738 1930 0
-587 -737 1929 0
c (( - aux434 + shift(x_00008_00001, -1) + shift(x_00009_00002, -1))<=0)
1097 -1960 0
1098 -1961 0
1100 -1963 0
1102 -1965 0
1104 -1967 0
1106 -1969 0
1108 -1971 0
1110 -1973 0
947 -1960 0
947 1097 -1961 0
947 1098 -1963 0
947 1100 -1965 0
947 1102 -1967 0
947 1104 -1969 0
947 1106 -1971 0
947 1108 -1973 0
947 1110 -1975 0
948 -1961 0
948 1097 -1963 0
948 1098 -1965 0
948 1100 -1967 0
948 1102 -1969 0
948 1104 -1971 0
948 1106 -1973 0
948 1108 -1975 0
948 1110 -1977 0
950 -1963 0
950 1097 -1965 0
950 1098 -1967 0
950 1100 -1969 0
950 1102 -1971 0
950 1104 -1973 0
950 1106 -1975 0
950 1108 -1977 0
950 1110 -1979 0
952 -1965 0
952 1097 -1967 0
952 1098 -1969 0
952 1100 -1971 0
952 1102 -1973 0
952 1104 -1975 0
952 1106 -1977 0
952 1108 -1979 0
952 1110 -1981 0
954 -1967 0
954 1097 -1969 0
954 1098 -1971 0
954 1100 -1973 0
954 1102 -1975 0
954 1104 -1977 0
954 1106 -1979 0
954 1108 -1981 0
954 1110 -1983 0
956 -1969 0
956 1097 -1971 0
956 1098 -1973 0
956 1100 -1975 0
956 1102 -1977 0
956 1104 -1979 0
956 1106 -1981 0
956 1108 -1983 0
956 1110 -1985 0
958 -1971 0
958 1097 -1973 0
958 1098 -1975 0
958 1100 -1977 0
958 1102 -1979 0
958 1104 -1981 0
958 1106 -1983 0
958 1108 -1985 0
958 1110 -1987 0
960 -1973 0
960 1097 -1975 0
960 1098 -1977 0
960 1100 -1979 0
960 1102 -1981 0
960 1104 -1983 0
960 1106 -1985 0
960 1108 -1987 0
960 1110 -1989 0
c (0<=( - aux434 + shift(x_00008_00001, -1) + shift(x_00009_00002, -1)))
-1110 1989 0
-1108 1987 0
-1106 1985 0
-1104 1983 0
-1102 1981 0
-1100 1979 0
-1098 1977 0
-1097 1975 0
-960 1989 0
-960 -1110 1987 0
-960 -1108 1985 0
-960 -1106 1983 0
-960 -1104 1981 0
-960 -1102 1979 0
-960 -1100 1977 0
-960 -1098 1975 0
-960 -1097 1973 0
-958 1987 0
-958 -1110 1985 0
-958 -1108 1983 0
-958 -1106 1981 0
-958 -1104 1979 0
-958 -1102 1977 0
-958 -1100 1975 0
-958 -1098 1973 0
-958 -1097 1971 0
-956 1985 0
-956 -1110 1983 0
-956 -1108 1981 0
-956 -1106 1979 0
-956 -1104 1977 0
-956 -1102 1975 0
-956 -1100 1973 0
-956 -1098 1971 0
-956 -1097 1969 0
-954 1983 0
-954 -1110 1981 0
-954 -1108 1979 0
-954 -1106 1977 0
-954 -1104 1975 0
-954 -1102 1973 0
-954 -1100 1971 0
-954 -1098 1969 0
-954 -1097 1967 0
-952 1981 0
-952 -1110 1979 0
-952 -1108 1977 0
-952 -1106 1975 0
-952 -1104 1973 0
-952 -1102 1971 0
-952 -1100 1969 0
-952 -1098 1967 0
-952 -1097 1965 0
-950 1979 0
-950 -1110 1977 0
-950 -1108 1975 0
-950 -1106 1973 0
-950 -1104 1971 0
-950 -1102 1969 0
-950 -1100 1967 0
-950 -1098 1965 0
-950 -1097 1963 0
-948 1977 0
-948 -1110 1975 0
-948 -1108 1973 0
-948 -1106 1971 0
-948 -1104 1969 0
-948 -1102 1967 0
-948 -1100 1965 0
-948 -1098 1963 0
-948 -1097 1961 0
-947 1975 0
-947 -1110 1973 0
-947 -1108 1971 0
-947 -1106 1969 0
-947 -1104 1967 0
-947 -1102 1965 0
-947 -1100 1963 0
-947 -1098 1961 0
-947 -1097 1960 0
c (( - aux435 + shift(x_00009_00004, -1) + shift(x_00009_00007, -1))<=0)
1172 -1991 0
1173 -1992 0
1175 -1994 0
1177 -1996 0
1179 -1998 0
1181 -2000 0
1183 -2002 0
1185 -2004 0
1127 -1991 0
1127 1172 -1992 0
1127 1173 -1994 0
1127 1175 -1996 0
1127 1177 -1998 0
1127 1179 -2000 0
1127 1181 -2002 0
1127 1183 -2004 0
1127 1185 -2006 0
1128 -1992 0
1128 1172 -1994 0
1128 1173 -1996 0
1128 1175 -1998 0
1128 1177 -2000 0
1128 1179 -2002 0
1128 1181 -2004 0
1128 1183 -2006 0
1128 1185 -2008 0
1130 -1994 0
1130 1172 -1996 0
1130 1173 -1998 0
1130 1175 -2000 0
1130 1177 -2002 0
1130 1179 -2004 0
1130 1181 -2006 0
1130 1183 -2008 0
1130 1185 -2010 0
1132 -1996 0
1132 1172 -1998 0
1132 1173 -2000 0
1132 1175 -2002 0
1132 1177 -2004 0
1132 1179 -2006 0
1132 1181 -2008 0
1132 1183 -2010 0
1132 1185 -2012 0
1134 -1998 0
1134 1172 -2000 0
1134 1173 -2002 0
1134 1175 -2004 0
1134 1177 -2006 0
1134 1179 -2008 0
1134 1181 -2010 0
1134 1183 -2012 0
1134 1185 -2014 0
1136 -2000 0
1136 1172 -2002 0
1136 1173 -2004 0
1136 1175 -2006 0
1136 1177 -2008 0
1136 1179 -2010 0
1136 1181 -2012 0
1136 1183 -2014 0
1136 1185 -2016 0
1138 -2002 0
1138 1172 -2004 0
1138 1173 -2006 0
1138 1175 -2008 0
1138 1177 -2010 0
1138 1179 -2012 0
1138 1181 -2014 0
1138 1183 -2016 0
1138 1185 -2018 0
1140 -2004 0
1140 1172 -2006 0
1140 1173 -2008 0
1140 1175 -2010 0
1140 1177 -2012 0
1140 1179 -2014 0
1140 1181 -2016 0
1140 1183 -2018 0
1140 1185 -2020 0
c (0<=( - aux435 + shift(x_00009_00004, -1) + shift(x_00009_00007, -1)))
-1185 2020 0
-1183 2018 0
-1181 2016 0
-1179 2014 0
-1177 2012 0
-1175 2010 0
-1173 2008 0
-1172 2006 0
-1140 2020 0
-1140 -1185 2018 0
-1140 -1183 2016 0
-1140 -1181 2014 0
-1140 -1179 2012 0
-1140 -1177 2010 0
-1140 -1175 2008 0
-1140 -1173 2006 0
-1140 -1172 2004 0
-1138 2018 0
-1138 -1185 2016 0
-1138 -1183 2014 0
-1138 -1181 2012 0
-1138 -1179 2010 0
-1138 -1177 2008 0
-1138 -1175 2006 0
-1138 -1173 2004 0
-1138 -1172 2002 0
-1136 2016 0
-1136 -1185 2014 0
-1136 -1183 2012 0
-1136 -1181 2010 0
-1136 -1179 2008 0
-1136 -1177 2006 0
-1136 -1175 2004 0
-1136 -1173 2002 0
-1136 -1172 2000 0
-1134 2014 0
-1134 -1185 2012 0
-1134 -1183 2010 0
-1134 -1181 2008 0
-1134 -1179 2006 0
-1134 -1177 2004 0
-1134 -1175 2002 0
-1134 -1173 2000 0
-1134 -1172 1998 0
-1132 2012 0
-1132 -1185 2010 0
-1132 -1183 2008 0
-1132 -1181 2006 0
-1132 -1179 2004 0
-1132 -1177 2002 0
-1132 -1175 2000 0
-1132 -1173 1998 0
-1132 -1172 1996 0
-1130 2010 0
-1130 -1185 2008 0
-1130 -1183 2006 0
-1130 -1181 2004 0
-1130 -1179 2002 0
-1130 -1177 2000 0
-1130 -1175 1998 0
-1130 -1173 1996 0
-1130 -1172 1994 0
-1128 2008 0
-1128 -1185 2006 0
-1128 -1183 2004 0
-1128 -1181 2002 0
-1128 -1179 2000 0
-1128 -1177 1998 0
-1128 -1175 1996 0
-1128 -1173 1994 0
-1128 -1172 1992 0
-1127 2006 0
-1127 -1185 2004 0
-1127 -1183 2002 0
-1127 -1181 2000 0
-1127 -1179 1998 0
-1127 -1177 1996 0
-1127 -1175 1994 0
-1127 -1173 1992 0
-1127 -1172 1991 0
c ((SATLiteral(272) - aux1894 + SATLiteral(542))<=0)
-542 -7854 0
-272 -7854 0
-272 -542 -7855 0
c (0<=(SATLiteral(272) - aux1894 + SATLiteral(542)))
542 7855 0
272 7855 0
272 542 7854 0
c ((SATLiteral(274) - aux1895 + SATLiteral(544))<=0)
-544 -7857 0
-274 -7857 0
-274 -544 -7858 0
c (0<=(SATLiteral(274) - aux1895 + SATLiteral(544)))
544 7858 0
274 7858 0
274 544 7857 0
c ((SATLiteral(276) - aux1896 + SATLiteral(546))<=0)
-546 -7860 0
-276 -7860 0
-276 -546 -7861 0
c (0<=(SATLiteral(276) - aux1896 + SATLiteral(546)))
546 7861 0
276 7861 0
276 546 7860 0
c ((SATLiteral(278) - aux1897 + SATLiteral(548))<=0)
-548 -7863 0
-278 -7863 0
-278 -548 -7864 0
c (0<=(SATLiteral(278) - aux1897 + SATLiteral(548)))
548 7864 0
278 7864 0
278 548 7863 0
c ((SATLiteral(280) - aux1898 + SATLiteral(550))<=0)
-550 -7866 0
-280 -7866 0
-280 -550 -7867 0
c (0<=(SATLiteral(280) - aux1898 + SATLiteral(550)))
550 7867 0
280 7867 0
280 550 7866 0
c ((SATLiteral(282) - aux1899 + SATLiteral(552))<=0)
-552 -7869 0
-282 -7869 0
-282 -552 -7870 0
c (0<=(SATLiteral(282) - aux1899 + SATLiteral(552)))
552 7870 0
282 7870 0
282 552 7869 0
c ((SATLiteral(284) - aux1900 + SATLiteral(554))<=0)
-554 -7872 0
-284 -7872 0
-284 -554 -7873 0
c (0<=(SATLiteral(284) - aux1900 + SATLiteral(554)))
554 7873 0
284 7873 0
284 554 7872 0
c ((SATLiteral(286) - aux1901 + SATLiteral(556))<=0)
-556 -7875 0
-286 -7875 0
-286 -556 -7876 0
c (0<=(SATLiteral(286) - aux1901 + SATLiteral(556)))
556 7876 0
286 7876 0
286 556 7875 0
c ((SATLiteral(-285) - aux1902 + SATLiteral(-555))<=0)
555 -7878 0
285 -7878 0
285 555 -7879 0
c (0<=(SATLiteral(-285) - aux1902 + SATLiteral(-555)))
-555 7879 0
-285 7879 0
-285 -555 7878 0
c ((SATLiteral(347) - aux1903 + SATLiteral(497))<=0)
-497 -7881 0
-347 -7881 0
-347 -497 -7882 0
c (0<=(SATLiteral(347) - aux1903 + SATLiteral(497)))
497 7882 0
347 7882 0
347 497 7881 0
c ((SATLiteral(349) - aux1904 + SATLiteral(499))<=0)
-499 -7884 0
-349 -7884 0
-349 -499 -7885 0
c (0<=(SATLiteral(349) - aux1904 + SATLiteral(499)))
499 7885 0
349 7885 0
349 499 7884 0
c ((SATLiteral(351) - aux1905 + SATLiteral(501))<=0)
-501 -7887 0
-351 -7887 0
-351 -501 -7888 0
c (0<=(SATLiteral(351) - aux1905 + SATLiteral(501)))
501 7888 0
351 7888 0
351 501 7887 0
c ((SATLiteral(353) - aux1906 + SATLiteral(503))<=0)
-503 -7890 0
-353 -7890 0
-353 -503 -7891 0
c (0<=(SATLiteral(353) - aux1906 + SATLiteral(503)))
503 7891 0
353 7891 0
353 503 7890 0
c ((SATLiteral(355) - aux1907 + SATLiteral(505))<=0)
-505 -7893 0
-355 -7893 0
-355 -505 -7894 0
c (0<=(SATLiteral(355) - aux1907 + SATLiteral(505)))
505 7894 0
355 7894 0
355 505 7893 0
c ((SATLiteral(357) - aux1908 + SATLiteral(507))<=0)
-507 -7896 0
-357 -7896 0
-357 -507 -7897 0
c (0<=(SATLiteral(357) - aux1908 + SATLiteral(507)))
507 7897 0
357 7897 0
357 507 7896 0
c ((SATLiteral(359) - aux1909 + SATLiteral(509))<=0)
-509 -7899 0
-359 -7899 0
-359 -509 -7900 0
c (0<=(SATLiteral(359) - aux1909 + SATLiteral(509)))
509 7900 0
359 7900 0
359 509 7899 0
c ((SATLiteral(361) - aux1910 + SATLiteral(511))<=0)
-511 -7902 0
-361 -7902 0
-361 -511 -7903 0
c (0<=(SATLiteral(361) - aux1910 + SATLiteral(511)))
511 7903 0
361 7903 0
361 511 7902 0
c ((SATLiteral(-360) - aux1911 + SATLiteral(-510))<=0)
510 -7905 0
360 -7905 0
360 510 -7906 0
c (0<=(SATLiteral(-360) - aux1911 + SATLiteral(-510)))
-510 7906 0
-360 7906 0
-360 -510 7905 0
c ((SATLiteral(722) - aux1948 + SATLiteral(602))<=0)
-602 -8034 0
-722 -8034 0
-722 -602 -8035 0
c (0<=(SATLiteral(722) - aux1948 + SATLiteral(602)))
602 8035 0
722 8035 0
722 602 8034 0
c ((SATLiteral(724) - aux1949 + SATLiteral(604))<=0)
-604 -8037 0
-724 -8037 0
-724 -604 -8038 0
c (0<=(SATLiteral(724) - aux1949 + SATLiteral(604)))
604 8038 0
724 8038 0
724 604 8037 0
c ((SATLiteral(726) - aux1950 + SATLiteral(606))<=0)
-606 -8040 0
-726 -8040 0
-726 -606 -8041 0
c (0<=(SATLiteral(726) - aux1950 + SATLiteral(606)))
606 8041 0
726 8041 0
726 606 8040 0
c ((SATLiteral(728) - aux1951 + SATLiteral(608))<=0)
-608 -8043 0
-728 -8043 0
-728 -608 -8044 0
c (0<=(SATLiteral(728) - aux1951 + SATLiteral(608)))
608 8044 0
728 8044 0
728 608 8043 0
c ((SATLiteral(730) - aux1952 + SATLiteral(610))<=0)
-610 -8046 0
-730 -8046 0
-730 -610 -8047 0
c (0<=(SATLiteral(730) - aux1952 + SATLiteral(610)))
610 8047 0
730 8047 0
730 610 8046 0
c ((SATLiteral(732) - aux1953 + SATLiteral(612))<=0)
-612 -8049 0
-732 -8049 0
-732 -612 -8050 0
c (0<=(SATLiteral(732) - aux1953 + SATLiteral(612)))
612 8050 0
732 8050 0
732 612 8049 0
c ((SATLiteral(734) - aux1954 + SATLiteral(614))<=0)
-614 -8052 0
-734 -8052 0
-734 -614 -8053 0
c (0<=(SATLiteral(734) - aux1954 + SATLiteral(614)))
614 8053 0
734 8053 0
734 614 8052 0
c ((SATLiteral(736) - aux1955 + SATLiteral(616))<=0)
-616 -8055 0
-736 -8055 0
-736 -616 -8056 0
c (0<=(SATLiteral(736) - aux1955 + SATLiteral(616)))
616 8056 0
736 8056 0
736 616 8055 0
c ((SATLiteral(-735) - aux1956 + SATLiteral(-615))<=0)
615 -8058 0
735 -8058 0
735 615 -8059 0
c (0<=(SATLiteral(-735) - aux1956 + SATLiteral(-615)))
-615 8059 0
-735 8059 0
-735 -615 8058 0
c ((SATLiteral(947) - aux1957 + SATLiteral(1097))<=0)
-1097 -8061 0
-947 -8061 0
-947 -1097 -8062 0
c (0<=(SATLiteral(947) - aux1957 + SATLiteral(1097)))
1097 8062 0
947 8062 0
947 1097 8061 0
c ((SATLiteral(949) - aux1958 + SATLiteral(1099))<=0)
-1099 -8064 0
-949 -8064 0
-949 -1099 -8065 0
c (0<=(SATLiteral(949) - aux1958 + SATLiteral(1099)))
1099 8065 0
949 8065 0
949 1099 8064 0
c ((SATLiteral(951) - aux1959 + SATLiteral(1101))<=0)
-1101 -8067 0
-951 -8067 0
-951 -1101 -8068 0
c (0<=(SATLiteral(951) - aux1959 + SATLiteral(1101)))
1101 8068 0
951 8068 0
951 1101 8067 0
c ((SATLiteral(953) - aux1960 + SATLiteral(1103))<=0)
-1103 -8070 0
-953 -8070 0
-953 -1103 -8071 0
c (0<=(SATLiteral(953) - aux1960 + SATLiteral(1103)))
1103 8071 0
953 8071 0
953 1103 8070 0
c ((SATLiteral(955) - aux1961 + SATLiteral(1105))<=0)
-1105 -8073 0
-955 -8073 0
-955 -1105 -8074 0
c (0<=(SATLiteral(955) - aux1961 + SATLiteral(1105)))
1105 8074 0
955 8074 0
955 1105 8073 0
c ((SATLiteral(957) - aux1962 + SATLiteral(1107))<=0)
-1107 -8076 0
-957 -8076 0
-957 -1107 -8077 0
c (0<=(SATLiteral(957) - aux1962 + SATLiteral(1107)))
1107 8077 0
957 8077 0
957 1107 8076 0
c ((SATLiteral(959) - aux1963 + SATLiteral(1109))<=0)
-1109 -8079 0
-959 -8079 0
-959 -1109 -8080 0
c (0<=(SATLiteral(959) - aux1963 + SATLiteral(1109)))
1109 8080 0
959 8080 0
959 1109 8079 0
c ((SATLiteral(961) - aux1964 + SATLiteral(1111))<=0)
-1111 -8082 0
-961 -8082 0
-961 -1111 -8083 0
c (0<=(SATLiteral(961) - aux1964 + SATLiteral(1111)))
1111 8083 0
961 8083 0
961 1111 8082 0
c ((SATLiteral(-960) - aux1965 + SATLiteral(-1110))<=0)
1110 -8085 0
960 -8085 0
960 1110 -8086 0
c (0<=(SATLiteral(-960) - aux1965 + SATLiteral(-1110)))
-1110 8086 0
-960 8086 0
-960 -1110 8085 0
c (( - aux1966 + SATLiteral(1127) + SATLiteral(1172))<=0)
-1172 -8088 0
-1127 -8088 0
-1127 -1172 -8089 0
c (0<=( - aux1966 + SATLiteral(1127) + SATLiteral(1172)))
1172 8089 0
1127 8089 0
1127 1172 8088 0
c (( - aux1967 + SATLiteral(1129) + SATLiteral(1174))<=0)
-1174 -8091 0
-1129 -8091 0
-1129 -1174 -8092 0
c (0<=( - aux1967 + SATLiteral(1129) + SATLiteral(1174)))
1174 8092 0
1129 8092 0
1129 1174 8091 0
c (( - aux1968 + SATLiteral(1131) + SATLiteral(1176))<=0)
-1176 -8094 0
-1131 -8094 0
-1131 -1176 -8095 0
c (0<=( - aux1968 + SATLiteral(1131) + SATLiteral(1176)))
1176 8095 0
1131 8095 0
1131 1176 8094 0
c (( - aux1969 + SATLiteral(1133) + SATLiteral(1178))<=0)
-1178 -8097 0
-1133 -8097 0
-1133 -1178 -8098 0
c (0<=( - aux1969 + SATLiteral(1133) + SATLiteral(1178)))
1178 8098 0
1133 8098 0
1133 1178 8097 0
c (( - aux1970 + SATLiteral(1135) + SATLiteral(1180))<=0)
-1180 -8100 0
-1135 -8100 0
-1135 -1180 -8101 0
c (0<=( - aux1970 + SATLiteral(1135) + SATLiteral(1180)))
1180 8101 0
1135 8101 0
1135 1180 8100 0
c (( - aux1971 + SATLiteral(1137) + SATLiteral(1182))<=0)
-1182 -8103 0
-1137 -8103 0
-1137 -1182 -8104 0
c (0<=( - aux1971 + SATLiteral(1137) + SATLiteral(1182)))
1182 8104 0
1137 8104 0
1137 1182 8103 0
c (( - aux1972 + SATLiteral(1139) + SATLiteral(1184))<=0)
-1184 -8106 0
-1139 -8106 0
-1139 -1184 -8107 0
c (0<=( - aux1972 + SATLiteral(1139) + SATLiteral(1184)))
1184 8107 0
1139 8107 0
1139 1184 8106 0
c (( - aux1973 + SATLiteral(1141) + SATLiteral(1186))<=0)
-1186 -8109 0
-1141 -8109 0
-1141 -1186 -8110 0
c (0<=( - aux1973 + SATLiteral(1141) + SATLiteral(1186)))
1186 8110 0
1141 8110 0
1141 1186 8109 0
c (( - aux1974 + SATLiteral(-1140) + SATLiteral(-1185))<=0)
1185 -8112 0
1140 -8112 0
1140 1185 -8113 0
c (0<=( - aux1974 + SATLiteral(-1140) + SATLiteral(-1185)))
-1185 8113 0
-1140 8113 0
-1140 -1185 8112 0
c ((shift(x_00007_00003, -1) - aux429 + shift(x_00006_00003, -1))<=0)
707 -1789 0
708 -1790 0
710 -1792 0
712 -1794 0
714 -1796 0
716 -1798 0
718 -1800 0
720 -1802 0
842 -1789 0
842 707 -1790 0
842 708 -1792 0
842 710 -1794 0
842 712 -1796 0
842 714 -1798 0
842 716 -1800 0
842 718 -1802 0
842 720 -1804 0
843 -1790 0
843 707 -1792 0
843 708 -1794 0
843 710 -1796 0
843 712 -1798 0
843 714 -1800 0
843 716 -1802 0
843 718 -1804 0
843 720 -1806 0
845 -1792 0
845 707 -1794 0
845 708 -1796 0
845 710 -1798 0
845 712 -1800 0
845 714 -1802 0
845 716 -1804 0
845 718 -1806 0
845 720 -1808 0
847 -1794 0
847 707 -1796 0
847 708 -1798 0
847 710 -1800 0
847 712 -1802 0
847 714 -1804 0
847 716 -1806 0
847 718 -1808 0
847 720 -1810 0
849 -1796 0
849 707 -1798 0
849 708 -1800 0
849 710 -1802 0
849 712 -1804 0
849 714 -1806 0
849 716 -1808 0
849 718 -1810 0
849 720 -1812 0
851 -1798 0
851 707 -1800 0
851 708 -1802 0
851 710 -1804 0
851 712 -1806 0
851 714 -1808 0
851 716 -1810 0
851 718 -1812 0
851 720 -1814 0
853 -1800 0
853 707 -1802 0
853 708 -1804 0
853 710 -1806 0
853 712 -1808 0
853 714 -1810 0
853 716 -1812 0
853 718 -1814 0
853 720 -1816 0
855 -1802 0
855 707 -1804 0
855 708 -1806 0
855 710 -1808 0
855 712 -1810 0
855 714 -1812 0
855 716 -1814 0
855 718 -1816 0
855 720 -1818 0
c (0<=(shift(x_00007_00003, -1) - aux429 + shift(x_00006_00003, -1)))
-720 1818 0
-718 1816 0
-716 1814 0
-714 1812 0
-712 1810 0
-710 1808 0
-708 1806 0
-707 1804 0
-855 1818 0
-855 -720 1816 0
-855 -718 1814 0
-855 -716 1812 0
-855 -714 1810 0
-855 -712 1808 0
-855 -710 1806 0
-855 -708 1804 0
-855 -707 1802 0
-853 1816 0
-853 -720 1814 0
-853 -718 1812 0
-853 -716 1810 0
-853 -714 1808 0
-853 -712 1806 0
-853 -710 1804 0
-853 -708 1802 0
-853 -707 1800 0
-851 1814 0
-851 -720 1812 0
-851 -718 1810 0
-851 -716 1808 0
-851 -714 1806 0
-851 -712 1804 0
-851 -710 1802 0
-851 -708 1800 0
-851 -707 1798 0
-849 1812 0
-849 -720 1810 0
-849 -718 1808 0
-849 -716 1806 0
-849 -714 1804 0
-849 -712 1802 0
-849 -710 1800 0
-849 -708 1798 0
-849 -707 1796 0
-847 1810 0
-847 -720 1808 0
-847 -718 1806 0
-847 -716 1804 0
-847 -714 1802 0
-847 -712 1800 0
-847 -710 1798 0
-847 -708 1796 0
-847 -707 1794 0
-845 1808 0
-845 -720 1806 0
-845 -718 1804 0
-845 -716 1802 0
-845 -714 1800 0
-845 -712 1798 0
-845 -710 1796 0
-845 -708 1794 0
-845 -707 1792 0
-843 1806 0
-843 -720 1804 0
-843 -718 1802 0
-843 -716 1800 0
-843 -714 1798 0
-843 -712 1796 0
-843 -710 1794 0
-843 -708 1792 0
-843 -707 1790 0
-842 1804 0
-842 -720 1802 0
-842 -718 1800 0
-842 -716 1798 0
-842 -714 1796 0
-842 -712 1794 0
-842 -710 1792 0
-842 -708 1790 0
-842 -707 1789 0
c ((shift(x_00007_00004, -1) - aux430 + shift(x_00005_00003, -1))<=0)
572 -1820 0
573 -1821 0
575 -1823 0
577 -1825 0
579 -1827 0
581 -1829 0
583 -1831 0
585 -1833 0
857 -1820 0
857 572 -1821 0
857 573 -1823 0
857 575 -1825 0
857 577 -1827 0
857 579 -1829 0
857 581 -1831 0
857 583 -1833 0
857 585 -1835 0
858 -1821 0
858 572 -1823 0
858 573 -1825 0
858 575 -1827 0
858 577 -1829 0
858 579 -1831 0
858 581 -1833 0
858 583 -1835 0
858 585 -1837 0
860 -1823 0
860 572 -1825 0
860 573 -1827 0
860 575 -1829 0
860 577 -1831 0
860 579 -1833 0
860 581 -1835 0
860 583 -1837 0
860 585 -1839 0
862 -1825 0
862 572 -1827 0
862 573 -1829 0
862 575 -1831 0
862 577 -1833 0
862 579 -1835 0
862 581 -1837 0
862 583 -1839 0
862 585 -1841 0
864 -1827 0
864 572 -1829 0
864 573 -1831 0
864 575 -1833 0
864 577 -1835 0
864 579 -1837 0
864 581 -1839 0
864 583 -1841 0
864 585 -1843 0
866 -1829 0
866 572 -1831 0
866 573 -1833 0
866 575 -1835 0
866 577 -1837 0
866 579 -1839 0
866 581 -1841 0
866 583 -1843 0
866 585 -1845 0
868 -1831 0
868 572 -1833 0
868 573 -1835 0
868 575 -1837 0
868 577 -1839 0
868 579 -1841 0
868 581 -1843 0
868 583 -1845 0
868 585 -1847 0
870 -1833 0
870 572 -1835 0
870 573 -1837 0
870 575 -1839 0
870 577 -1841 0
870 579 -1843 0
870 581 -1845 0
870 583 -1847 0
870 585 -1849 0
c (0<=(shift(x_00007_00004, -1) - aux430 + shift(x_00005_00003, -1)))
-585 1849 0
-583 1847 0
-581 1845 0
-579 1843 0
-577 1841 0
-575 1839 0
-573 1837 0
-572 1835 0
-870 1849 0
-870 -585 1847 0
-870 -583 1845 0
-870 -581 1843 0
-870 -579 1841 0
-870 -577 1839 0
-870 -575 1837 0
-870 -573 1835 0
-870 -572 1833 0
-868 1847 0
-868 -585 1845 0
-868 -583 1843 0
-868 -581 1841 0
-868 -579 1839 0
-868 -577 1837 0
-868 -575 1835 0
-868 -573 1833 0
-868 -572 1831 0
-866 1845 0
-866 -585 1843 0
-866 -583 1841 0
-866 -581 1839 0
-866 -579 1837 0
-866 -577 1835 0
-866 -575 1833 0
-866 -573 1831 0
-866 -572 1829 0
-864 1843 0
-864 -585 1841 0
-864 -583 1839 0
-864 -581 1837 0
-864 -579 1835 0
-864 -577 1833 0
-864 -575 1831 0
-864 -573 1829 0
-864 -572 1827 0
-862 1841 0
-862 -585 1839 0
-862 -583 1837 0
-862 -581 1835 0
-862 -579 1833 0
-862 -577 1831 0
-862 -575 1829 0
-862 -573 1827 0
-862 -572 1825 0
-860 1839 0
-860 -585 1837 0
-860 -583 1835 0
-860 -581 1833 0
-860 -579 1831 0
-860 -577 1829 0
-860 -575 1827 0
-860 -573 1825 0
-860 -572 1823 0
-858 1837 0
-858 -585 1835 0
-858 -583 1833 0
-858 -581 1831 0
-858 -579 1829 0
-858 -577 1827 0
-858 -575 1825 0
-858 -573 1823 0
-858 -572 1821 0
-857 1835 0
-857 -585 1833 0
-857 -583 1831 0
-857 -581 1829 0
-857 -579 1827 0
-857 -577 1825 0
-857 -575 1823 0
-857 -573 1821 0
-857 -572 1820 0
c ((shift(x_00007_00006, -1) - aux431 + shift(x_00004_00003, -1))<=0)
437 -1851 0
438 -1852 0
440 -1854 0
442 -1856 0
444 -1858 0
446 -1860 0
448 -1862 0
450 -1864 0
887 -1851 0
887 437 -1852 0
887 438 -1854 0
887 440 -1856 0
887 442 -1858 0
887 444 -1860 0
887 446 -1862 0
887 448 -1864 0
887 450 -1866 0
888 -1852 0
888 437 -1854 0
888 438 -1856 0
888 440 -1858 0
888 442 -1860 0
888 444 -1862 0
888 446 -1864 0
888 448 -1866 0
888 450 -1868 0
890 -1854 0
890 437 -1856 0
890 438 -1858 0
890 440 -1860 0
890 442 -1862 0
890 444 -1864 0
890 446 -1866 0
890 448 -1868 0
890 450 -1870 0
892 -1856 0
892 437 -1858 0
892 438 -1860 0
892 440 -1862 0
892 442 -1864 0
892 444 -1866 0
892 446 -1868 0
892 448 -1870 0
892 450 -1872 0
894 -1858 0
894 437 -1860 0
894 438 -1862 0
894 440 -1864 0
894 442 -1866 0
894 444 -1868 0
894 446 -1870 0
894 448 -1872 0
894 450 -1874 0
896 -1860 0
896 437 -1862 0
896 438 -1864 0
896 440 -1866 0
896 442 -1868 0
896 444 -1870 0
896 446 -1872 0
896 448 -1874 0
896 450 -1876 0
898 -1862 0
898 437 -1864 0
898 438 -1866 0
898 440 -1868 0
898 442 -1870 0
898 444 -1872 0
898 446 -1874 0
898 448 -1876 0
898 450 -1878 0
900 -1864 0
900 437 -1866 0
900 438 -1868 0
900 440 -1870 0
900 442 -1872 0
900 444 -1874 0
900 446 -1876 0
900 448 -1878 0
900 450 -1880 0
c (0<=(shift(x_00007_00006, -1) - aux431 + shift(x_00004_00003, -1)))
-450 1880 0
-448 1878 0
-446 1876 0
-444 1874 0
-442 1872 0
-440 1870 0
-438 1868 0
-437 1866 0
-900 1880 0
-900 -450 1878 0
-900 -448 1876 0
-900 -446 1874 0
-900 -444 1872 0
-900 -442 1870 0
-900 -440 1868 0
-900 -438 1866 0
-900 -437 1864 0
-898 1878 0
-898 -450 1876 0
-898 -448 1874 0
-898 -446 1872 0
-898 -444 1870 0
-898 -442 1868 0
-898 -440 1866 0
-898 -438 1864 0
-898 -437 1862 0
-896 1876 0
-896 -450 1874 0
-896 -448 1872 0
-896 -446 1870 0
-896 -444 1868 0
-896 -442 1866 0
-896 -440 1864 0
-896 -438 1862 0
-896 -437 1860 0
-894 1874 0
-894 -450 1872 0
-894 -448 1870 0
-894 -446 1868 0
-894 -444 1866 0
-894 -442 1864 0
-894 -440 1862 0
-894 -438 1860 0
-894 -437 1858 0
-892 1872 0
-892 -450 1870 0
-892 -448 1868 0
-892 -446 1866 0
-892 -444 1864 0
-892 -442 1862 0
-892 -440 1860 0
-892 -438 1858 0
-892 -437 1856 0
-890 1870 0
-890 -450 1868 0
-890 -448 1866 0
-890 -446 1864 0
-890 -444 1862 0
-890 -442 1860 0
-890 -440 1858 0
-890 -438 1856 0
-890 -437 1854 0
-888 1868 0
-888 -450 1866 0
-888 -448 1864 0
-888 -446 1862 0
-888 -444 1860 0
-888 -442 1858 0
-888 -440 1856 0
-888 -438 1854 0
-888 -437 1852 0
-887 1866 0
-887 -450 1864 0
-887 -448 1862 0
-887 -446 1860 0
-887 -444 1858 0
-887 -442 1856 0
-887 -440 1854 0
-887 -438 1852 0
-887 -437 1851 0
c ((shift(x_00007_00005, -1) + aux431 - aux432)<=0)
1851 -1882 0
1852 -1883 0
1854 -1885 0
1856 -1887 0
1858 -1889 0
1860 -1891 0
1862 -1893 0
1864 -1895 0
1866 -1897 0
1868 -1899 0
1870 -1901 0
1872 -1903 0
1874 -1905 0
1876 -1907 0
1878 -1909 0
1880 -1911 0
872 -1882 0
872 1851 -1883 0
872 1852 -1885 0
872 1854 -1887 0
872 1856 -1889 0
872 1858 -1891 0
872 1860 -1893 0
872 1862 -1895 0
872 1864 -1897 0
872 1866 -1899 0
872 1868 -1901 0
872 1870 -1903 0
872 1872 -1905 0
872 1874 -1907 0
872 1876 -1909 0
872 1878 -1911 0
872 1880 -1913 0
873 -1883 0
873 1851 -1885 0
873 1852 -1887 0
873 1854 -1889 0
873 1856 -1891 0
873 1858 -1893 0
873 1860 -1895 0
873 1862 -1897 0
873 1864 -1899 0
873 1866 -1901 0
873 1868 -1903 0
873 1870 -1905 0
873 1872 -1907 0
873 1874 -1909 0
873 1876 -1911 0
873 1878 -1913 0
873 1880 -1915 0
875 -1885 0
875 1851 -1887 0
875 1852 -1889 0
875 1854 -1891 0
875 1856 -1893 0
875 1858 -1895 0
875 1860 -1897 0
875 1862 -1899 0
875 1864 -1901 0
875 1866 -1903 0
875 1868 -1905 0
875 1870 -1907 0
875 1872 -1909 0
875 1874 -1911 0
875 1876 -1913 0
875 1878 -1915 0
875 1880 -1917 0
877 -1887 0
877 1851 -1889 0
877 1852 -1891 0
877 1854 -1893 0
877 1856 -1895 0
877 1858 -1897 0
877 1860 -1899 0
877 1862 -1901 0
877 1864 -1903 0
877 1866 -1905 0
877 1868 -1907 0
877 1870 -1909 0
877 1872 -1911 0
877 1874 -1913 0
877 1876 -1915 0
877 1878 -1917 0
877 1880 -1919 0
879 -1889 0
879 1851 -1891 0
879 1852 -1893 0
879 1854 -1895 0
879 1856 -1897 0
879 1858 -1899 0
879 1860 -1901 0
879 1862 -1903 0
879 1864 -1905 0
879 1866 -1907 0
879 1868 -1909 0
879 1870 -1911 0
879 1872 -1913 0
879 1874 -1915 0
879 1876 -1917 0
879 1878 -1919 0
879 1880 -1921 0
881 -1891 0
881 1851 -1893 0
881 1852 -1895 0
881 1854 -1897 0
881 1856 -1899 0
881 1858 -1901 0
881 1860 -1903 0
881 1862 -1905 0
881 1864 -1907 0
881 1866 -1909 0
881 1868 -1911 0
881 1870 -1913 0
881 1872 -1915 0
881 1874 -1917 0
881 1876 -1919 0
881 1878 -1921 0
881 1880 -1923 0
883 -1893 0
883 1851 -1895 0
883 1852 -1897 0
883 1854 -1899 0
883 1856 -1901 0
883 1858 -1903 0
883 1860 -1905 0
883 1862 -1907 0
883 1864 -1909 0
883 1866 -1911 0
883 1868 -1913 0
883 1870 -1915 0
883 1872 -1917 0
883 1874 -1919 0
883 1876 -1921 0
883 1878 -1923 0
883 1880 -1925 0
885 -1895 0
885 1851 -1897 0
885 1852 -1899 0
885 1854 -1901 0
885 1856 -1903 0
885 1858 -1905 0
885 1860 -1907 0
885 1862 -1909 0
885 1864 -1911 0
885 1866 -1913 0
885 1868 -1915 0
885 1870 -1917 0
885 1872 -1919 0
885 1874 -1921 0
885 1876 -1923 0
885 1878 -1925 0
885 1880 -1927 0
c (0<=(shift(x_00007_00005, -1) + aux431 - aux432))
-1880 1927 0
-1878 1925 0
-1876 1923 0
-1874 1921 0
-1872 1919 0
-1870 1917 0
-1868 1915 0
-1866 1913 0
-1864 1911 0
-1862 1909 0
-1860 1907 0
-1858 1905 0
-1856 1903 0
-1854 1901 0
-1852 1899 0
-1851 1897 0
-885 1927 0
-885 -1880 1925 0
-885 -1878 1923 0
-885 -1876 1921 0
-885 -1874 1919 0
-885 -1872 1917 0
-885 -1870 1915 0
-885 -1868 1913 0
-885 -1866 1911 0
-885 -1864 1909 0
-885 -1862 1907 0
-885 -1860 1905 0
-885 -1858 1903 0
-885 -1856 1901 0
-885 -1854 1899 0
-885 -1852 1897 0
-885 -1851 1895 0
-883 1925 0
-883 -1880 1923 0
-883 -1878 1921 0
-883 -1876 1919 0
-883 -1874 1917 0
-883 -1872 1915 0
-883 -1870 1913 0
-883 -1868 1911 0
-883 -1866 1909 0
-883 -1864 1907 0
-883 -1862 1905 0
-883 -1860 1903 0
-883 -1858 1901 0
-883 -1856 1899 0
-883 -1854 1897 0
-883 -1852 1895 0
-883 -1851 1893 0
-881 1923 0
-881 -1880 1921 0
-881 -1878 1919 0
-881 -1876 1917 0
-881 -1874 1915 0
-881 -1872 1913 0
-881 -1870 1911 0
-881 -1868 1909 0
-881 -1866 1907 0
-881 -1864 1905 0
-881 -1862 1903 0
-881 -1860 1901 0
-881 -1858 1899 0
-881 -1856 1897 0
-881 -1854 1895 0
-881 -1852 1893 0
-881 -1851 1891 0
-879 1921 0
-879 -1880 1919 0
-879 -1878 1917 0
-879 -1876 1915 0
-879 -1874 1913 0
-879 -1872 1911 0
-879 -1870 1909 0
-879 -1868 1907 0
-879 -1866 1905 0
-879 -1864 1903 0
-879 -1862 1901 0
-879 -1860 1899 0
-879 -1858 1897 0
-879 -1856 1895 0
-879 -1854 1893 0
-879 -1852 1891 0
-879 -1851 1889 0
-877 1919 0
-877 -1880 1917 0
-877 -1878 1915 0
-877 -1876 1913 0
-877 -1874 1911 0
-877 -1872 1909 0
-877 -1870 1907 0
-877 -1868 1905 0
-877 -1866 1903 0
-877 -1864 1901 0
-877 -1862 1899 0
-877 -1860 1897 0
-877 -1858 1895 0
-877 -1856 1893 0
-877 -1854 1891 0
-877 -1852 1889 0
-877 -1851 1887 0
-875 1917 0
-875 -1880 1915 0
-875 -1878 1913 0
-875 -1876 1911 0
-875 -1874 1909 0
-875 -1872 1907 0
-875 -1870 1905 0
-875 -1868 1903 0
-875 -1866 1901 0
-875 -1864 1899 0
-875 -1862 1897 0
-875 -1860 1895 0
-875 -1858 1893 0
-875 -1856 1891 0
-875 -1854 1889 0
-875 -1852 1887 0
-875 -1851 1885 0
-873 1915 0
-873 -1880 1913 0
-873 -1878 1911 0
-873 -1876 1909 0
-873 -1874 1907 0
-873 -1872 1905 0
-873 -1870 1903 0
-873 -1868 1901 0
-873 -1866 1899 0
-873 -1864 1897 0
-873 -1862 1895 0
-873 -1860 1893 0
-873 -1858 1891 0
-873 -1856 1889 0
-873 -1854 1887 0
-873 -1852 1885 0
-873 -1851 1883 0
-872 1913 0
-872 -1880 1911 0
-872 -1878 1909 0
-872 -1876 1907 0
-872 -1874 1905 0
-872 -1872 1903 0
-872 -1870 1901 0
-872 -1868 1899 0
-872 -1866 1897 0
-872 -1864 1895 0
-872 -1862 1893 0
-872 -1860 1891 0
-872 -1858 1889 0
-872 -1856 1887 0
-872 -1854 1885 0
-872 -1852 1883 0
-872 -1851 1882 0
c ((SATLiteral(272) - aux436 + SATLiteral(542))<=0)
-542 -2022 0
-272 -2022 0
-272 -542 -2023 0
c (0<=(SATLiteral(272) - aux436 + SATLiteral(542)))
542 2023 0
272 2023 0
272 542 2022 0
c ((SATLiteral(947) - aux437 + SATLiteral(812))<=0)
-812 -2025 0
-947 -2025 0
-947 -812 -2026 0
c (0<=(SATLiteral(947) - aux437 + SATLiteral(812)))
812 2026 0
947 2026 0
947 812 2025 0
c (( - aux438 + SATLiteral(677) + SATLiteral(137))<=0)
-137 -2028 0
-677 -2028 0
-677 -137 -2029 0
c (0<=( - aux438 + SATLiteral(677) + SATLiteral(137)))
137 2029 0
677 2029 0
677 137 2028 0
c (( - aux439 + SATLiteral(407) + SATLiteral(1082))<=0)
-1082 -2031 0
-407 -2031 0
-407 -1082 -2032 0
c (0<=( - aux439 + SATLiteral(407) + SATLiteral(1082)))
1082 2032 0
407 2032 0
407 1082 2031 0
c ((aux439 - aux440 + SATLiteral(2))<=0)
2031 -2034 0
2032 -2035 0
-2 -2034 0
-2 2031 -2035 0
-2 2032 -2037 0
c (0<=(aux439 - aux440 + SATLiteral(2)))
-2032 2037 0
-2031 2035 0
2 2037 0
2 -2032 2035 0
2 -2031 2034 0
c ((aux436 + aux438 - aux441)<=0)
2028 -2039 0
2029 -2040 0
2022 -2039 0
2022 2028 -2040 0
2022 2029 -2042 0
2023 -2040 0
2023 2028 -2042 0
2023 2029 -2044 0
c (0<=(aux436 + aux438 - aux441))
-2029 2044 0
-2028 2042 0
-2023 2044 0
-2023 -2029 2042 0
-2023 -2028 2040 0
-2022 2042 0
-2022 -2029 2040 0
-2022 -2028 2039 0
c ((SATLiteral(274) - aux442 + SATLiteral(544))<=0)
-544 -2046 0
-274 -2046 0
-274 -544 -2047 0
c (0<=(SATLiteral(274) - aux442 + SATLiteral(544)))
544 2047 0
274 2047 0
274 544 2046 0
c ((SATLiteral(949) - aux443 + SATLiteral(814))<=0)
-814 -2049 0
-949 -2049 0
-949 -814 -2050 0
c (0<=(SATLiteral(949) - aux443 + SATLiteral(814)))
814 2050 0
949 2050 0
949 814 2049 0
c (( - aux444 + SATLiteral(679) + SATLiteral(139))<=0)
-139 -2052 0
-679 -2052 0
-679 -139 -2053 0
c (0<=( - aux444 + SATLiteral(679) + SATLiteral(139)))
139 2053 0
679 2053 0
679 139 2052 0
c (( - aux445 + SATLiteral(409) + SATLiteral(1084))<=0)
-1084 -2055 0
-409 -2055 0
-409 -1084 -2056 0
c (0<=( - aux445 + SATLiteral(409) + SATLiteral(1084)))
1084 2056 0
409 2056 0
409 1084 2055 0
c ((aux445 - aux446 + SATLiteral(4))<=0)
2055 -2058 0
2056 -2059 0
-4 -2058 0
-4 2055 -2059 0
-4 2056 -2061 0
c (0<=(aux445 - aux446 + SATLiteral(4)))
-2056 2061 0
-2055 2059 0
4 2061 0
4 -2056 2059 0
4 -2055 2058 0
c ((aux442 + aux444 - aux447)<=0)
2052 -2063 0
2053 -2064 0
2046 -2063 0
2046 2052 -2064 0
2046 2053 -2066 0
2047 -2064 0
2047 2052 -2066 0
2047 2053 -2068 0
c (0<=(aux442 + aux444 - aux447))
-2053 2068 0
-2052 2066 0
-2047 2068 0
-2047 -2053 2066 0
-2047 -2052 2064 0
-2046 2066 0
-2046 -2053 2064 0
-2046 -2052 2063 0
c ((SATLiteral(276) - aux448 + SATLiteral(546))<=0)
-546 -2070 0
-276 -2070 0
-276 -546 -2071 0
c (0<=(SATLiteral(276) - aux448 + SATLiteral(546)))
546 2071 0
276 2071 0
276 546 2070 0
c ((SATLiteral(951) - aux449 + SATLiteral(816))<=0)
-816 -2073 0
-951 -2073 0
-951 -816 -2074 0
c (0<=(SATLiteral(951) - aux449 + SATLiteral(816)))
816 2074 0
951 2074 0
951 816 2073 0
c (( - aux450 + SATLiteral(681) + SATLiteral(141))<=0)
-141 -2076 0
-681 -2076 0
-681 -141 -2077 0
c (0<=( - aux450 + SATLiteral(681) + SATLiteral(141)))
141 2077 0
681 2077 0
681 141 2076 0
c (( - aux451 + SATLiteral(411) + SATLiteral(1086))<=0)
-1086 -2079 0
-411 -2079 0
-411 -1086 -2080 0
c (0<=( - aux451 + SATLiteral(411) + SATLiteral(1086)))
1086 2080 0
411 2080 0
411 1086 2079 0
c ((aux451 - aux452 + SATLiteral(6))<=0)
2079 -2082 0
2080 -2083 0
-6 -2082 0
-6 2079 -2083 0
-6 2080 -2085 0
c (0<=(aux451 - aux452 + SATLiteral(6)))
-2080 2085 0
-2079 2083 0
6 2085 0
6 -2080 2083 0
6 -2079 2082 0
c ((aux448 + aux450 - aux453)<=0)
2076 -2087 0
2077 -2088 0
2070 -2087 0
2070 2076 -2088 0
2070 2077 -2090 0
2071 -2088 0
2071 2076 -2090 0
2071 2077 -2092 0
c (0<=(aux448 + aux450 - aux453))
-2077 2092 0
-2076 2090 0
-2071 2092 0
-2071 -2077 2090 0
-2071 -2076 2088 0
-2070 2090 0
-2070 -2077 2088 0
-2070 -2076 2087 0
c ((SATLiteral(278) - aux454 + SATLiteral(548))<=0)
-548 -2094 0
-278 -2094 0
-278 -548 -2095 0
c (0<=(SATLiteral(278) - aux454 + SATLiteral(548)))
548 2095 0
278 2095 0
278 548 2094 0
c ((SATLiteral(953) - aux455 + SATLiteral(818))<=0)
-818 -2097 0
-953 -2097 0
-953 -818 -2098 0
c (0<=(SATLiteral(953) - aux455 + SATLiteral(818)))
818 2098 0
953 2098 0
953 818 2097 0
c (( - aux456 + SATLiteral(683) + SATLiteral(143))<=0)
-143 -2100 0
-683 -2100 0
-683 -143 -2101 0
c (0<=( - aux456 + SATLiteral(683) + SATLiteral(143)))
143 2101 0
683 2101 0
683 143 2100 0
c (( - aux457 + SATLiteral(413) + SATLiteral(1088))<=0)
-1088 -2103 0
-413 -2103 0
-413 -1088 -2104 0
c (0<=( - aux457 + SATLiteral(413) + SATLiteral(1088)))
1088 2104 0
413 2104 0
413 1088 2103 0
c ((aux457 - aux458 + SATLiteral(8))<=0)
2103 -2106 0
2104 -2107 0
-8 -2106 0
-8 2103 -2107 0
-8 2104 -2109 0
c (0<=(aux457 - aux458 + SATLiteral(8)))
-2104 2109 0
-2103 2107 0
8 2109 0
8 -2104 2107 0
8 -2103 2106 0
c ((aux454 + aux456 - aux459)<=0)
2100 -2111 0
2101 -2112 0
2094 -2111 0
2094 2100 -2112 0
2094 2101 -2114 0
2095 -2112 0
2095 2100 -2114 0
2095 2101 -2116 0
c (0<=(aux454 + aux456 - aux459))
-2101 2116 0
-2100 2114 0
-2095 2116 0
-2095 -2101 2114 0
-2095 -2100 2112 0
-2094 2114 0
-2094 -2101 2112 0
-2094 -2100 2111 0
c ((SATLiteral(280) - aux460 + SATLiteral(550))<=0)
-550 -2118 0
-280 -2118 0
-280 -550 -2119 0
c (0<=(SATLiteral(280) - aux460 + SATLiteral(550)))
550 2119 0
280 2119 0
280 550 2118 0
c ((SATLiteral(955) - aux461 + SATLiteral(820))<=0)
-820 -2121 0
-955 -2121 0
-955 -820 -2122 0
c (0<=(SATLiteral(955) - aux461 + SATLiteral(820)))
820 2122 0
955 2122 0
955 820 2121 0
c (( - aux462 + SATLiteral(685) + SATLiteral(145))<=0)
-145 -2124 0
-685 -2124 0
-685 -145 -2125 0
c (0<=( - aux462 + SATLiteral(685) + SATLiteral(145)))
145 2125 0
685 2125 0
685 145 2124 0
c (( - aux463 + SATLiteral(415) + SATLiteral(1090))<=0)
-1090 -2127 0
-415 -2127 0
-415 -1090 -2128 0
c (0<=( - aux463 + SATLiteral(415) + SATLiteral(1090)))
1090 2128 0
415 2128 0
415 1090 2127 0
c ((aux463 - aux464 + SATLiteral(10))<=0)
2127 -2130 0
2128 -2131 0
-10 -2130 0
-10 2127 -2131 0
-10 2128 -2133 0
c (0<=(aux463 - aux464 + SATLiteral(10)))
-2128 2133 0
-2127 2131 0
10 2133 0
10 -2128 2131 0
10 -2127 2130 0
c ((aux460 + aux462 - aux465)<=0)
2124 -2135 0
2125 -2136 0
2118 -2135 0
2118 2124 -2136 0
2118 2125 -2138 0
2119 -2136 0
2119 2124 -2138 0
2119 2125 -2140 0
c (0<=(aux460 + aux462 - aux465))
-2125 2140 0
-2124 2138 0
-2119 2140 0
-2119 -2125 2138 0
-2119 -2124 2136 0
-2118 2138 0
-2118 -2125 2136 0
-2118 -2124 2135 0
c ((SATLiteral(282) - aux466 + SATLiteral(552))<=0)
-552 -2142 0
-282 -2142 0
-282 -552 -2143 0
c (0<=(SATLiteral(282) - aux466 + SATLiteral(552)))
552 2143 0
282 2143 0
282 552 2142 0
c ((SATLiteral(957) - aux467 + SATLiteral(822))<=0)
-822 -2145 0
-957 -2145 0
-957 -822 -2146 0
c (0<=(SATLiteral(957) - aux467 + SATLiteral(822)))
822 2146 0
957 2146 0
957 822 2145 0
c (( - aux468 + SATLiteral(687) + SATLiteral(147))<=0)
-147 -2148 0
-687 -2148 0
-687 -147 -2149 0
c (0<=( - aux468 + SATLiteral(687) + SATLiteral(147)))
147 2149 0
687 2149 0
687 147 2148 0
c (( - aux469 + SATLiteral(417) + SATLiteral(1092))<=0)
-1092 -2151 0
-417 -2151 0
-417 -1092 -2152 0
c (0<=( - aux469 + SATLiteral(417) + SATLiteral(1092)))
1092 2152 0
417 2152 0
417 1092 2151 0
c ((aux469 - aux470 + SATLiteral(12))<=0)
2151 -2154 0
2152 -2155 0
-12 -2154 0
-12 2151 -2155 0
-12 2152 -2157 0
c (0<=(aux469 - aux470 + SATLiteral(12)))
-2152 2157 0
-2151 2155 0
12 2157 0
12 -2152 2155 0
12 -2151 2154 0
c ((aux466 + aux468 - aux471)<=0)
2148 -2159 0
2149 -2160 0
2142 -2159 0
2142 2148 -2160 0
2142 2149 -2162 0
2143 -2160 0
2143 2148 -2162 0
2143 2149 -2164 0
c (0<=(aux466 + aux468 - aux471))
-2149 2164 0
-2148 2162 0
-2143 2164 0
-2143 -2149 2162 0
-2143 -2148 2160 0
-2142 2162 0
-2142 -2149 2160 0
-2142 -2148 2159 0
c ((SATLiteral(284) - aux472 + SATLiteral(554))<=0)
-554 -2166 0
-284 -2166 0
-284 -554 -2167 0
c (0<=(SATLiteral(284) - aux472 + SATLiteral(554)))
554 2167 0
284 2167 0
284 554 2166 0
c ((SATLiteral(959) - aux473 + SATLiteral(824))<=0)
-824 -2169 0
-959 -2169 0
-959 -824 -2170 0
c (0<=(SATLiteral(959) - aux473 + SATLiteral(824)))
824 2170 0
959 2170 0
959 824 2169 0
c (( - aux474 + SATLiteral(689) + SATLiteral(149))<=0)
-149 -2172 0
-689 -2172 0
-689 -149 -2173 0
c (0<=( - aux474 + SATLiteral(689) + SATLiteral(149)))
149 2173 0
689 2173 0
689 149 2172 0
c (( - aux475 + SATLiteral(419) + SATLiteral(1094))<=0)
-1094 -2175 0
-419 -2175 0
-419 -1094 -2176 0
c (0<=( - aux475 + SATLiteral(419) + SATLiteral(1094)))
1094 2176 0
419 2176 0
419 1094 2175 0
c ((aux475 - aux476 + SATLiteral(14))<=0)
2175 -2178 0
2176 -2179 0
-14 -2178 0
-14 2175 -2179 0
-14 2176 -2181 0
c (0<=(aux475 - aux476 + SATLiteral(14)))
-2176 2181 0
-2175 2179 0
14 2181 0
14 -2176 2179 0
14 -2175 2178 0
c ((aux472 + aux474 - aux477)<=0)
2172 -2183 0
2173 -2184 0
2166 -2183 0
2166 2172 -2184 0
2166 2173 -2186 0
2167 -2184 0
2167 2172 -2186 0
2167 2173 -2188 0
c (0<=(aux472 + aux474 - aux477))
-2173 2188 0
-2172 2186 0
-2167 2188 0
-2167 -2173 2186 0
-2167 -2172 2184 0
-2166 2186 0
-2166 -2173 2184 0
-2166 -2172 2183 0
c ((SATLiteral(286) - aux478 + SATLiteral(556))<=0)
-556 -2190 0
-286 -2190 0
-286 -556 -2191 0
c (0<=(SATLiteral(286) - aux478 + SATLiteral(556)))
556 2191 0
286 2191 0
286 556 2190 0
c ((SATLiteral(961) - aux479 + SATLiteral(826))<=0)
-826 -2193 0
-961 -2193 0
-961 -826 -2194 0
c (0<=(SATLiteral(961) - aux479 + SATLiteral(826)))
826 2194 0
961 2194 0
961 826 2193 0
c (( - aux480 + SATLiteral(691) + SATLiteral(151))<=0)
-151 -2196 0
-691 -2196 0
-691 -151 -2197 0
c (0<=( - aux480 + SATLiteral(691) + SATLiteral(151)))
151 2197 0
691 2197 0
691 151 2196 0
c (( - aux481 + SATLiteral(421) + SATLiteral(1096))<=0)
-1096 -2199 0
-421 -2199 0
-421 -1096 -2200 0
c (0<=( - aux481 + SATLiteral(421) + SATLiteral(1096)))
1096 2200 0
421 2200 0
421 1096 2199 0
c ((aux481 - aux482 + SATLiteral(16))<=0)
2199 -2202 0
2200 -2203 0
-16 -2202 0
-16 2199 -2203 0
-16 2200 -2205 0
c (0<=(aux481 - aux482 + SATLiteral(16)))
-2200 2205 0
-2199 2203 0
16 2205 0
16 -2200 2203 0
16 -2199 2202 0
c ((aux478 + aux480 - aux483)<=0)
2196 -2207 0
2197 -2208 0
2190 -2207 0
2190 2196 -2208 0
2190 2197 -2210 0
2191 -2208 0
2191 2196 -2210 0
2191 2197 -2212 0
c (0<=(aux478 + aux480 - aux483))
-2197 2212 0
-2196 2210 0
-2191 2212 0
-2191 -2197 2210 0
-2191 -2196 2208 0
-2190 2210 0
-2190 -2197 2208 0
-2190 -2196 2207 0
c ((SATLiteral(-285) - aux484 + SATLiteral(-555))<=0)
555 -2214 0
285 -2214 0
285 555 -2215 0
c (0<=(SATLiteral(-285) - aux484 + SATLiteral(-555)))
-555 2215 0
-285 2215 0
-285 -555 2214 0
c ((SATLiteral(-960) - aux485 + SATLiteral(-825))<=0)
825 -2217 0
960 -2217 0
960 825 -2218 0
c (0<=(SATLiteral(-960) - aux485 + SATLiteral(-825)))
-825 2218 0
-960 2218 0
-960 -825 2217 0
c (( - aux486 + SATLiteral(-690) + SATLiteral(-150))<=0)
150 -2220 0
690 -2220 0
690 150 -2221 0
c (0<=( - aux486 + SATLiteral(-690) + SATLiteral(-150)))
-150 2221 0
-690 2221 0
-690 -150 2220 0
c (( - aux487 + SATLiteral(-420) + SATLiteral(-1095))<=0)
1095 -2223 0
420 -2223 0
420 1095 -2224 0
c (0<=( - aux487 + SATLiteral(-420) + SATLiteral(-1095)))
-1095 2224 0
-420 2224 0
-420 -1095 2223 0
c ((aux487 - aux488 + SATLiteral(-15))<=0)
2223 -2226 0
2224 -2227 0
15 -2226 0
15 2223 -2227 0
15 2224 -2229 0
c (0<=(aux487 - aux488 + SATLiteral(-15)))
-2224 2229 0
-2223 2227 0
-15 2229 0
-15 -2224 2227 0
-15 -2223 2226 0
c ((aux484 + aux486 - aux489)<=0)
2220 -2231 0
2221 -2232 0
2214 -2231 0
2214 2220 -2232 0
2214 2221 -2234 0
2215 -2232 0
2215 2220 -2234 0
2215 2221 -2236 0
c (0<=(aux484 + aux486 - aux489))
-2221 2236 0
-2220 2234 0
-2215 2236 0
-2215 -2221 2234 0
-2215 -2220 2232 0
-2214 2234 0
-2214 -2221 2232 0
-2214 -2220 2231 0
c ((SATLiteral(287) - aux490 + SATLiteral(557))<=0)
-557 -2238 0
-287 -2238 0
-287 -557 -2239 0
c (0<=(SATLiteral(287) - aux490 + SATLiteral(557)))
557 2239 0
287 2239 0
287 557 2238 0
c ((SATLiteral(962) - aux491 + SATLiteral(827))<=0)
-827 -2241 0
-962 -2241 0
-962 -827 -2242 0
c (0<=(SATLiteral(962) - aux491 + SATLiteral(827)))
827 2242 0
962 2242 0
962 827 2241 0
c (( - aux492 + SATLiteral(692) + SATLiteral(152))<=0)
-152 -2244 0
-692 -2244 0
-692 -152 -2245 0
c (0<=( - aux492 + SATLiteral(692) + SATLiteral(152)))
152 2245 0
692 2245 0
692 152 2244 0
c (( - aux493 + SATLiteral(422) + SATLiteral(1097))<=0)
-1097 -2247 0
-422 -2247 0
-422 -1097 -2248 0
c (0<=( - aux493 + SATLiteral(422) + SATLiteral(1097)))
1097 2248 0
422 2248 0
422 1097 2247 0
c ((aux493 - aux494 + SATLiteral(17))<=0)
2247 -2250 0
2248 -2251 0
-17 -2250 0
-17 2247 -2251 0
-17 2248 -2253 0
c (0<=(aux493 - aux494 + SATLiteral(17)))
-2248 2253 0
-2247 2251 0
17 2253 0
17 -2248 2251 0
17 -2247 2250 0
c ((aux490 + aux492 - aux495)<=0)
2244 -2255 0
2245 -2256 0
2238 -2255 0
2238 2244 -2256 0
2238 2245 -2258 0
2239 -2256 0
2239 2244 -2258 0
2239 2245 -2260 0
c (0<=(aux490 + aux492 - aux495))
-2245 2260 0
-2244 2258 0
-2239 2260 0
-2239 -2245 2258 0
-2239 -2244 2256 0
-2238 2258 0
-2238 -2245 2256 0
-2238 -2244 2255 0
c ((SATLiteral(289) - aux496 + SATLiteral(559))<=0)
-559 -2262 0
-289 -2262 0
-289 -559 -2263 0
c (0<=(SATLiteral(289) - aux496 + SATLiteral(559)))
559 2263 0
289 2263 0
289 559 2262 0
c ((SATLiteral(964) - aux497 + SATLiteral(829))<=0)
-829 -2265 0
-964 -2265 0
-964 -829 -2266 0
c (0<=(SATLiteral(964) - aux497 + SATLiteral(829)))
829 2266 0
964 2266 0
964 829 2265 0
c (( - aux498 + SATLiteral(694) + SATLiteral(154))<=0)
-154 -2268 0
-694 -2268 0
-694 -154 -2269 0
c (0<=( - aux498 + SATLiteral(694) + SATLiteral(154)))
154 2269 0
694 2269 0
694 154 2268 0
c (( - aux499 + SATLiteral(424) + SATLiteral(1099))<=0)
-1099 -2271 0
-424 -2271 0
-424 -1099 -2272 0
c (0<=( - aux499 + SATLiteral(424) + SATLiteral(1099)))
1099 2272 0
424 2272 0
424 1099 2271 0
c ((aux499 - aux500 + SATLiteral(19))<=0)
2271 -2274 0
2272 -2275 0
-19 -2274 0
-19 2271 -2275 0
-19 2272 -2277 0
c (0<=(aux499 - aux500 + SATLiteral(19)))
-2272 2277 0
-2271 2275 0
19 2277 0
19 -2272 2275 0
19 -2271 2274 0
c ((aux496 + aux498 - aux501)<=0)
2268 -2279 0
2269 -2280 0
2262 -2279 0
2262 2268 -2280 0
2262 2269 -2282 0
2263 -2280 0
2263 2268 -2282 0
2263 2269 -2284 0
c (0<=(aux496 + aux498 - aux501))
-2269 2284 0
-2268 2282 0
-2263 2284 0
-2263 -2269 2282 0
-2263 -2268 2280 0
-2262 2282 0
-2262 -2269 2280 0
-2262 -2268 2279 0
c ((SATLiteral(291) - aux502 + SATLiteral(561))<=0)
-561 -2286 0
-291 -2286 0
-291 -561 -2287 0
c (0<=(SATLiteral(291) - aux502 + SATLiteral(561)))
561 2287 0
291 2287 0
291 561 2286 0
c ((SATLiteral(966) - aux503 + SATLiteral(831))<=0)
-831 -2289 0
-966 -2289 0
-966 -831 -2290 0
c (0<=(SATLiteral(966) - aux503 + SATLiteral(831)))
831 2290 0
966 2290 0
966 831 2289 0
c (( - aux504 + SATLiteral(696) + SATLiteral(156))<=0)
-156 -2292 0
-696 -2292 0
-696 -156 -2293 0
c (0<=( - aux504 + SATLiteral(696) + SATLiteral(156)))
156 2293 0
696 2293 0
696 156 2292 0
c (( - aux505 + SATLiteral(426) + SATLiteral(1101))<=0)
-1101 -2295 0
-426 -2295 0
-426 -1101 -2296 0
c (0<=( - aux505 + SATLiteral(426) + SATLiteral(1101)))
1101 2296 0
426 2296 0
426 1101 2295 0
c ((aux505 - aux506 + SATLiteral(21))<=0)
2295 -2298 0
2296 -2299 0
-21 -2298 0
-21 2295 -2299 0
-21 2296 -2301 0
c (0<=(aux505 - aux506 + SATLiteral(21)))
-2296 2301 0
-2295 2299 0
21 2301 0
21 -2296 2299 0
21 -2295 2298 0
c ((aux502 + aux504 - aux507)<=0)
2292 -2303 0
2293 -2304 0
2286 -2303 0
2286 2292 -2304 0
2286 2293 -2306 0
2287 -2304 0
2287 2292 -2306 0
2287 2293 -2308 0
c (0<=(aux502 + aux504 - aux507))
-2293 2308 0
-2292 2306 0
-2287 2308 0
-2287 -2293 2306 0
-2287 -2292 2304 0
-2286 2306 0
-2286 -2293 2304 0
-2286 -2292 2303 0
c ((SATLiteral(293) - aux508 + SATLiteral(563))<=0)
-563 -2310 0
-293 -2310 0
-293 -563 -2311 0
c (0<=(SATLiteral(293) - aux508 + SATLiteral(563)))
563 2311 0
293 2311 0
293 563 2310 0
c ((SATLiteral(968) - aux509 + SATLiteral(833))<=0)
-833 -2313 0
-968 -2313 0
-968 -833 -2314 0
c (0<=(SATLiteral(968) - aux509 + SATLiteral(833)))
833 2314 0
968 2314 0
968 833 2313 0
c (( - aux510 + SATLiteral(698) + SATLiteral(158))<=0)
-158 -2316 0
-698 -2316 0
-698 -158 -2317 0
c (0<=( - aux510 + SATLiteral(698) + SATLiteral(158)))
158 2317 0
698 2317 0
698 158 2316 0
c (( - aux511 + SATLiteral(428) + SATLiteral(1103))<=0)
-1103 -2319 0
-428 -2319 0
-428 -1103 -2320 0
c (0<=( - aux511 + SATLiteral(428) + SATLiteral(1103)))
1103 2320 0
428 2320 0
428 1103 2319 0
c ((aux511 - aux512 + SATLiteral(23))<=0)
2319 -2322 0
2320 -2323 0
-23 -2322 0
-23 2319 -2323 0
-23 2320 -2325 0
c (0<=(aux511 - aux512 + SATLiteral(23)))
-2320 2325 0
-2319 2323 0
23 2325 0
23 -2320 2323 0
23 -2319 2322 0
c ((aux508 + aux510 - aux513)<=0)
2316 -2327 0
2317 -2328 0
2310 -2327 0
2310 2316 -2328 0
2310 2317 -2330 0
2311 -2328 0
2311 2316 -2330 0
2311 2317 -2332 0
c (0<=(aux508 + aux510 - aux513))
-2317 2332 0
-2316 2330 0
-2311 2332 0
-2311 -2317 2330 0
-2311 -2316 2328 0
-2310 2330 0
-2310 -2317 2328 0
-2310 -2316 2327 0
c ((SATLiteral(295) - aux514 + SATLiteral(565))<=0)
-565 -2334 0
-295 -2334 0
-295 -565 -2335 0
c (0<=(SATLiteral(295) - aux514 + SATLiteral(565)))
565 2335 0
295 2335 0
295 565 2334 0
c ((SATLiteral(970) - aux515 + SATLiteral(835))<=0)
-835 -2337 0
-970 -2337 0
-970 -835 -2338 0
c (0<=(SATLiteral(970) - aux515 + SATLiteral(835)))
835 2338 0
970 2338 0
970 835 2337 0
c (( - aux516 + SATLiteral(700) + SATLiteral(160))<=0)
-160 -2340 0
-700 -2340 0
-700 -160 -2341 0
c (0<=( - aux516 + SATLiteral(700) + SATLiteral(160)))
160 2341 0
700 2341 0
700 160 2340 0
c (( - aux517 + SATLiteral(430) + SATLiteral(1105))<=0)
-1105 -2343 0
-430 -2343 0
-430 -1105 -2344 0
c (0<=( - aux517 + SATLiteral(430) + SATLiteral(1105)))
1105 2344 0
430 2344 0
430 1105 2343 0
c ((aux517 - aux518 + SATLiteral(25))<=0)
2343 -2346 0
2344 -2347 0
-25 -2346 0
-25 2343 -2347 0
-25 2344 -2349 0
c (0<=(aux517 - aux518 + SATLiteral(25)))
-2344 2349 0
-2343 2347 0
25 2349 0
25 -2344 2347 0
25 -2343 2346 0
c ((aux514 + aux516 - aux519)<=0)
2340 -2351 0
2341 -2352 0
2334 -2351 0
2334 2340 -2352 0
2334 2341 -2354 0
2335 -2352 0
2335 2340 -2354 0
2335 2341 -2356 0
c (0<=(aux514 + aux516 - aux519))
-2341 2356 0
-2340 2354 0
-2335 2356 0
-2335 -2341 2354 0
-2335 -2340 2352 0
-2334 2354 0
-2334 -2341 2352 0
-2334 -2340 2351 0
c ((SATLiteral(297) - aux520 + SATLiteral(567))<=0)
-567 -2358 0
-297 -2358 0
-297 -567 -2359 0
c (0<=(SATLiteral(297) - aux520 + SATLiteral(567)))
567 2359 0
297 2359 0
297 567 2358 0
c ((SATLiteral(972) - aux521 + SATLiteral(837))<=0)
-837 -2361 0
-972 -2361 0
-972 -837 -2362 0
c (0<=(SATLiteral(972) - aux521 + SATLiteral(837)))
837 2362 0
972 2362 0
972 837 2361 0
c (( - aux522 + SATLiteral(702) + SATLiteral(162))<=0)
-162 -2364 0
-702 -2364 0
-702 -162 -2365 0
c (0<=( - aux522 + SATLiteral(702) + SATLiteral(162)))
162 2365 0
702 2365 0
702 162 2364 0
c (( - aux523 + SATLiteral(432) + SATLiteral(1107))<=0)
-1107 -2367 0
-432 -2367 0
-432 -1107 -2368 0
c (0<=( - aux523 + SATLiteral(432) + SATLiteral(1107)))
1107 2368 0
432 2368 0
432 1107 2367 0
c ((aux523 - aux524 + SATLiteral(27))<=0)
2367 -2370 0
2368 -2371 0
-27 -2370 0
-27 2367 -2371 0
-27 2368 -2373 0
c (0<=(aux523 - aux524 + SATLiteral(27)))
-2368 2373 0
-2367 2371 0
27 2373 0
27 -2368 2371 0
27 -2367 2370 0
c ((aux520 + aux522 - aux525)<=0)
2364 -2375 0
2365 -2376 0
2358 -2375 0
2358 2364 -2376 0
2358 2365 -2378 0
2359 -2376 0
2359 2364 -2378 0
2359 2365 -2380 0
c (0<=(aux520 + aux522 - aux525))
-2365 2380 0
-2364 2378 0
-2359 2380 0
-2359 -2365 2378 0
-2359 -2364 2376 0
-2358 2378 0
-2358 -2365 2376 0
-2358 -2364 2375 0
c ((SATLiteral(299) - aux526 + SATLiteral(569))<=0)
-569 -2382 0
-299 -2382 0
-299 -569 -2383 0
c (0<=(SATLiteral(299) - aux526 + SATLiteral(569)))
569 2383 0
299 2383 0
299 569 2382 0
c ((SATLiteral(974) - aux527 + SATLiteral(839))<=0)
-839 -2385 0
-974 -2385 0
-974 -839 -2386 0
c (0<=(SATLiteral(974) - aux527 + SATLiteral(839)))
839 2386 0
974 2386 0
974 839 2385 0
c (( - aux528 + SATLiteral(704) + SATLiteral(164))<=0)
-164 -2388 0
-704 -2388 0
-704 -164 -2389 0
c (0<=( - aux528 + SATLiteral(704) + SATLiteral(164)))
164 2389 0
704 2389 0
704 164 2388 0
c (( - aux529 + SATLiteral(434) + SATLiteral(1109))<=0)
-1109 -2391 0
-434 -2391 0
-434 -1109 -2392 0
c (0<=( - aux529 + SATLiteral(434) + SATLiteral(1109)))
1109 2392 0
434 2392 0
434 1109 2391 0
c ((aux529 - aux530 + SATLiteral(29))<=0)
2391 -2394 0
2392 -2395 0
-29 -2394 0
-29 2391 -2395 0
-29 2392 -2397 0
c (0<=(aux529 - aux530 + SATLiteral(29)))
-2392 2397 0
-2391 2395 0
29 2397 0
29 -2392 2395 0
29 -2391 2394 0
c ((aux526 + aux528 - aux531)<=0)
2388 -2399 0
2389 -2400 0
2382 -2399 0
2382 2388 -2400 0
2382 2389 -2402 0
2383 -2400 0
2383 2388 -2402 0
2383 2389 -2404 0
c (0<=(aux526 + aux528 - aux531))
-2389 2404 0
-2388 2402 0
-2383 2404 0
-2383 -2389 2402 0
-2383 -2388 2400 0
-2382 2402 0
-2382 -2389 2400 0
-2382 -2388 2399 0
c ((SATLiteral(301) - aux532 + SATLiteral(571))<=0)
-571 -2406 0
-301 -2406 0
-301 -571 -2407 0
c (0<=(SATLiteral(301) - aux532 + SATLiteral(571)))
571 2407 0
301 2407 0
301 571 2406 0
c ((SATLiteral(976) - aux533 + SATLiteral(841))<=0)
-841 -2409 0
-976 -2409 0
-976 -841 -2410 0
c (0<=(SATLiteral(976) - aux533 + SATLiteral(841)))
841 2410 0
976 2410 0
976 841 2409 0
c (( - aux534 + SATLiteral(706) + SATLiteral(166))<=0)
-166 -2412 0
-706 -2412 0
-706 -166 -2413 0
c (0<=( - aux534 + SATLiteral(706) + SATLiteral(166)))
166 2413 0
706 2413 0
706 166 2412 0
c (( - aux535 + SATLiteral(436) + SATLiteral(1111))<=0)
-1111 -2415 0
-436 -2415 0
-436 -1111 -2416 0
c (0<=( - aux535 + SATLiteral(436) + SATLiteral(1111)))
1111 2416 0
436 2416 0
436 1111 2415 0
c ((aux535 - aux536 + SATLiteral(31))<=0)
2415 -2418 0
2416 -2419 0
-31 -2418 0
-31 2415 -2419 0
-31 2416 -2421 0
c (0<=(aux535 - aux536 + SATLiteral(31)))
-2416 2421 0
-2415 2419 0
31 2421 0
31 -2416 2419 0
31 -2415 2418 0
c ((aux532 + aux534 - aux537)<=0)
2412 -2423 0
2413 -2424 0
2406 -2423 0
2406 2412 -2424 0
2406 2413 -2426 0
2407 -2424 0
2407 2412 -2426 0
2407 2413 -2428 0
c (0<=(aux532 + aux534 - aux537))
-2413 2428 0
-2412 2426 0
-2407 2428 0
-2407 -2413 2426 0
-2407 -2412 2424 0
-2406 2426 0
-2406 -2413 2424 0
-2406 -2412 2423 0
c ((SATLiteral(-300) - aux538 + SATLiteral(-570))<=0)
570 -2430 0
300 -2430 0
300 570 -2431 0
c (0<=(SATLiteral(-300) - aux538 + SATLiteral(-570)))
-570 2431 0
-300 2431 0
-300 -570 2430 0
c ((SATLiteral(-975) - aux539 + SATLiteral(-840))<=0)
840 -2433 0
975 -2433 0
975 840 -2434 0
c (0<=(SATLiteral(-975) - aux539 + SATLiteral(-840)))
-840 2434 0
-975 2434 0
-975 -840 2433 0
c (( - aux540 + SATLiteral(-705) + SATLiteral(-165))<=0)
165 -2436 0
705 -2436 0
705 165 -2437 0
c (0<=( - aux540 + SATLiteral(-705) + SATLiteral(-165)))
-165 2437 0
-705 2437 0
-705 -165 2436 0
c (( - aux541 + SATLiteral(-435) + SATLiteral(-1110))<=0)
1110 -2439 0
435 -2439 0
435 1110 -2440 0
c (0<=( - aux541 + SATLiteral(-435) + SATLiteral(-1110)))
-1110 2440 0
-435 2440 0
-435 -1110 2439 0
c ((aux541 - aux542 + SATLiteral(-30))<=0)
2439 -2442 0
2440 -2443 0
30 -2442 0
30 2439 -2443 0
30 2440 -2445 0
c (0<=(aux541 - aux542 + SATLiteral(-30)))
-2440 2445 0
-2439 2443 0
-30 2445 0
-30 -2440 2443 0
-30 -2439 2442 0
c ((aux538 + aux540 - aux543)<=0)
2436 -2447 0
2437 -2448 0
2430 -2447 0
2430 2436 -2448 0
2430 2437 -2450 0
2431 -2448 0
2431 2436 -2450 0
2431 2437 -2452 0
c (0<=(aux538 + aux540 - aux543))
-2437 2452 0
-2436 2450 0
-2431 2452 0
-2431 -2437 2450 0
-2431 -2436 2448 0
-2430 2450 0
-2430 -2437 2448 0
-2430 -2436 2447 0
c ((SATLiteral(302) - aux544 + SATLiteral(572))<=0)
-572 -2454 0
-302 -2454 0
-302 -572 -2455 0
c (0<=(SATLiteral(302) - aux544 + SATLiteral(572)))
572 2455 0
302 2455 0
302 572 2454 0
c ((SATLiteral(977) - aux545 + SATLiteral(842))<=0)
-842 -2457 0
-977 -2457 0
-977 -842 -2458 0
c (0<=(SATLiteral(977) - aux545 + SATLiteral(842)))
842 2458 0
977 2458 0
977 842 2457 0
c (( - aux546 + SATLiteral(707) + SATLiteral(167))<=0)
-167 -2460 0
-707 -2460 0
-707 -167 -2461 0
c (0<=( - aux546 + SATLiteral(707) + SATLiteral(167)))
167 2461 0
707 2461 0
707 167 2460 0
c (( - aux547 + SATLiteral(437) + SATLiteral(1112))<=0)
-1112 -2463 0
-437 -2463 0
-437 -1112 -2464 0
c (0<=( - aux547 + SATLiteral(437) + SATLiteral(1112)))
1112 2464 0
437 2464 0
437 1112 2463 0
c ((aux547 - aux548 + SATLiteral(32))<=0)
2463 -2466 0
2464 -2467 0
-32 -2466 0
-32 2463 -2467 0
-32 2464 -2469 0
c (0<=(aux547 - aux548 + SATLiteral(32)))
-2464 2469 0
-2463 2467 0
32 2469 0
32 -2464 2467 0
32 -2463 2466 0
c ((aux544 + aux546 - aux549)<=0)
2460 -2471 0
2461 -2472 0
2454 -2471 0
2454 2460 -2472 0
2454 2461 -2474 0
2455 -2472 0
2455 2460 -2474 0
2455 2461 -2476 0
c (0<=(aux544 + aux546 - aux549))
-2461 2476 0
-2460 2474 0
-2455 2476 0
-2455 -2461 2474 0
-2455 -2460 2472 0
-2454 2474 0
-2454 -2461 2472 0
-2454 -2460 2471 0
c ((SATLiteral(304) - aux550 + SATLiteral(574))<=0)
-574 -2478 0
-304 -2478 0
-304 -574 -2479 0
c (0<=(SATLiteral(304) - aux550 + SATLiteral(574)))
574 2479 0
304 2479 0
304 574 2478 0
c ((SATLiteral(979) - aux551 + SATLiteral(844))<=0)
-844 -2481 0
-979 -2481 0
-979 -844 -2482 0
c (0<=(SATLiteral(979) - aux551 + SATLiteral(844)))
844 2482 0
979 2482 0
979 844 2481 0
c (( - aux552 + SATLiteral(709) + SATLiteral(169))<=0)
-169 -2484 0
-709 -2484 0
-709 -169 -2485 0
c (0<=( - aux552 + SATLiteral(709) + SATLiteral(169)))
169 2485 0
709 2485 0
709 169 2484 0
c (( - aux553 + SATLiteral(439) + SATLiteral(1114))<=0)
-1114 -2487 0
-439 -2487 0
-439 -1114 -2488 0
c (0<=( - aux553 + SATLiteral(439) + SATLiteral(1114)))
1114 2488 0
439 2488 0
439 1114 2487 0
c ((aux553 - aux554 + SATLiteral(34))<=0)
2487 -2490 0
2488 -2491 0
-34 -2490 0
-34 2487 -2491 0
-34 2488 -2493 0
c (0<=(aux553 - aux554 + SATLiteral(34)))
-2488 2493 0
-2487 2491 0
34 2493 0
34 -2488 2491 0
34 -2487 2490 0
c ((aux550 + aux552 - aux555)<=0)
2484 -2495 0
2485 -2496 0
2478 -2495 0
2478 2484 -2496 0
2478 2485 -2498 0
2479 -2496 0
2479 2484 -2498 0
2479 2485 -2500 0
c (0<=(aux550 + aux552 - aux555))
-2485 2500 0
-2484 2498 0
-2479 2500 0
-2479 -2485 2498 0
-2479 -2484 2496 0
-2478 2498 0
-2478 -2485 2496 0
-2478 -2484 2495 0
c ((SATLiteral(306) - aux556 + SATLiteral(576))<=0)
-576 -2502 0
-306 -2502 0
-306 -576 -2503 0
c (0<=(SATLiteral(306) - aux556 + SATLiteral(576)))
576 2503 0
306 2503 0
306 576 2502 0
c ((SATLiteral(981) - aux557 + SATLiteral(846))<=0)
-846 -2505 0
-981 -2505 0
-981 -846 -2506 0
c (0<=(SATLiteral(981) - aux557 + SATLiteral(846)))
846 2506 0
981 2506 0
981 846 2505 0
c (( - aux558 + SATLiteral(711) + SATLiteral(171))<=0)
-171 -2508 0
-711 -2508 0
-711 -171 -2509 0
c (0<=( - aux558 + SATLiteral(711) + SATLiteral(171)))
171 2509 0
711 2509 0
711 171 2508 0
c (( - aux559 + SATLiteral(441) + SATLiteral(1116))<=0)
-1116 -2511 0
-441 -2511 0
-441 -1116 -2512 0
c (0<=( - aux559 + SATLiteral(441) + SATLiteral(1116)))
1116 2512 0
441 2512 0
441 1116 2511 0
c ((aux559 - aux560 + SATLiteral(36))<=0)
2511 -2514 0
2512 -2515 0
-36 -2514 0
-36 2511 -2515 0
-36 2512 -2517 0
c (0<=(aux559 - aux560 + SATLiteral(36)))
-2512 2517 0
-2511 2515 0
36 2517 0
36 -2512 2515 0
36 -2511 2514 0
c ((aux556 + aux558 - aux561)<=0)
2508 -2519 0
2509 -2520 0
2502 -2519 0
2502 2508 -2520 0
2502 2509 -2522 0
2503 -2520 0
2503 2508 -2522 0
2503 2509 -2524 0
c (0<=(aux556 + aux558 - aux561))
-2509 2524 0
-2508 2522 0
-2503 2524 0
-2503 -2509 2522 0
-2503 -2508 2520 0
-2502 2522 0
-2502 -2509 2520 0
-2502 -2508 2519 0
c ((SATLiteral(308) - aux562 + SATLiteral(578))<=0)
-578 -2526 0
-308 -2526 0
-308 -578 -2527 0
c (0<=(SATLiteral(308) - aux562 + SATLiteral(578)))
578 2527 0
308 2527 0
308 578 2526 0
c ((SATLiteral(983) - aux563 + SATLiteral(848))<=0)
-848 -2529 0
-983 -2529 0
-983 -848 -2530 0
c (0<=(SATLiteral(983) - aux563 + SATLiteral(848)))
848 2530 0
983 2530 0
983 848 2529 0
c (( - aux564 + SATLiteral(713) + SATLiteral(173))<=0)
-173 -2532 0
-713 -2532 0
-713 -173 -2533 0
c (0<=( - aux564 + SATLiteral(713) + SATLiteral(173)))
173 2533 0
713 2533 0
713 173 2532 0
c (( - aux565 + SATLiteral(443) + SATLiteral(1118))<=0)
-1118 -2535 0
-443 -2535 0
-443 -1118 -2536 0
c (0<=( - aux565 + SATLiteral(443) + SATLiteral(1118)))
1118 2536 0
443 2536 0
443 1118 2535 0
c ((aux565 - aux566 + SATLiteral(38))<=0)
2535 -2538 0
2536 -2539 0
-38 -2538 0
-38 2535 -2539 0
-38 2536 -2541 0
c (0<=(aux565 - aux566 + SATLiteral(38)))
-2536 2541 0
-2535 2539 0
38 2541 0
38 -2536 2539 0
38 -2535 2538 0
c ((aux562 + aux564 - aux567)<=0)
2532 -2543 0
2533 -2544 0
2526 -2543 0
2526 2532 -2544 0
2526 2533 -2546 0
2527 -2544 0
2527 2532 -2546 0
2527 2533 -2548 0
c (0<=(aux562 + aux564 - aux567))
-2533 2548 0
-2532 2546 0
-2527 2548 0
-2527 -2533 2546 0
-2527 -2532 2544 0
-2526 2546 0
-2526 -2533 2544 0
-2526 -2532 2543 0
c ((SATLiteral(310) - aux568 + SATLiteral(580))<=0)
-580 -2550 0
-310 -2550 0
-310 -580 -2551 0
c (0<=(SATLiteral(310) - aux568 + SATLiteral(580)))
580 2551 0
310 2551 0
310 580 2550 0
c ((SATLiteral(985) - aux569 + SATLiteral(850))<=0)
-850 -2553 0
-985 -2553 0
-985 -850 -2554 0
c (0<=(SATLiteral(985) - aux569 + SATLiteral(850)))
850 2554 0
985 2554 0
985 850 2553 0
c (( - aux570 + SATLiteral(715) + SATLiteral(175))<=0)
-175 -2556 0
-715 -2556 0
-715 -175 -2557 0
c (0<=( - aux570 + SATLiteral(715) + SATLiteral(175)))
175 2557 0
715 2557 0
715 175 2556 0
c (( - aux571 + SATLiteral(445) + SATLiteral(1120))<=0)
-1120 -2559 0
-445 -2559 0
-445 -1120 -2560 0
c (0<=( - aux571 + SATLiteral(445) + SATLiteral(1120)))
1120 2560 0
445 2560 0
445 1120 2559 0
c ((aux571 - aux572 + SATLiteral(40))<=0)
2559 -2562 0
2560 -2563 0
-40 -2562 0
-40 2559 -2563 0
-40 2560 -2565 0
c (0<=(aux571 - aux572 + SATLiteral(40)))
-2560 2565 0
-2559 2563 0
40 2565 0
40 -2560 2563 0
40 -2559 2562 0
c ((aux568 + aux570 - aux573)<=0)
2556 -2567 0
2557 -2568 0
2550 -2567 0
2550 2556 -2568 0
2550 2557 -2570 0
2551 -2568 0
2551 2556 -2570 0
2551 2557 -2572 0
c (0<=(aux568 + aux570 - aux573))
-2557 2572 0
-2556 2570 0
-2551 2572 0
-2551 -2557 2570 0
-2551 -2556 2568 0
-2550 2570 0
-2550 -2557 2568 0
-2550 -2556 2567 0
c ((SATLiteral(312) - aux574 + SATLiteral(582))<=0)
-582 -2574 0
-312 -2574 0
-312 -582 -2575 0
c (0<=(SATLiteral(312) - aux574 + SATLiteral(582)))
582 2575 0
312 2575 0
312 582 2574 0
c ((SATLiteral(987) - aux575 + SATLiteral(852))<=0)
-852 -2577 0
-987 -2577 0
-987 -852 -2578 0
c (0<=(SATLiteral(987) - aux575 + SATLiteral(852)))
852 2578 0
987 2578 0
987 852 2577 0
c (( - aux576 + SATLiteral(717) + SATLiteral(177))<=0)
-177 -2580 0
-717 -2580 0
-717 -177 -2581 0
c (0<=( - aux576 + SATLiteral(717) + SATLiteral(177)))
177 2581 0
717 2581 0
717 177 2580 0
c (( - aux577 + SATLiteral(447) + SATLiteral(1122))<=0)
-1122 -2583 0
-447 -2583 0
-447 -1122 -2584 0
c (0<=( - aux577 + SATLiteral(447) + SATLiteral(1122)))
1122 2584 0
447 2584 0
447 1122 2583 0
c ((aux577 - aux578 + SATLiteral(42))<=0)
2583 -2586 0
2584 -2587 0
-42 -2586 0
-42 2583 -2587 0
-42 2584 -2589 0
c (0<=(aux577 - aux578 + SATLiteral(42)))
-2584 2589 0
-2583 2587 0
42 2589 0
42 -2584 2587 0
42 -2583 2586 0
c ((aux574 + aux576 - aux579)<=0)
2580 -2591 0
2581 -2592 0
2574 -2591 0
2574 2580 -2592 0
2574 2581 -2594 0
2575 -2592 0
2575 2580 -2594 0
2575 2581 -2596 0
c (0<=(aux574 + aux576 - aux579))
-2581 2596 0
-2580 2594 0
-2575 2596 0
-2575 -2581 2594 0
-2575 -2580 2592 0
-2574 2594 0
-2574 -2581 2592 0
-2574 -2580 2591 0
c ((SATLiteral(314) - aux580 + SATLiteral(584))<=0)
-584 -2598 0
-314 -2598 0
-314 -584 -2599 0
c (0<=(SATLiteral(314) - aux580 + SATLiteral(584)))
584 2599 0
314 2599 0
314 584 2598 0
c ((SATLiteral(989) - aux581 + SATLiteral(854))<=0)
-854 -2601 0
-989 -2601 0
-989 -854 -2602 0
c (0<=(SATLiteral(989) - aux581 + SATLiteral(854)))
854 2602 0
989 2602 0
989 854 2601 0
c (( - aux582 + SATLiteral(719) + SATLiteral(179))<=0)
-179 -2604 0
-719 -2604 0
-719 -179 -2605 0
c (0<=( - aux582 + SATLiteral(719) + SATLiteral(179)))
179 2605 0
719 2605 0
719 179 2604 0
c (( - aux583 + SATLiteral(449) + SATLiteral(1124))<=0)
-1124 -2607 0
-449 -2607 0
-449 -1124 -2608 0
c (0<=( - aux583 + SATLiteral(449) + SATLiteral(1124)))
1124 2608 0
449 2608 0
449 1124 2607 0
c ((aux583 - aux584 + SATLiteral(44))<=0)
2607 -2610 0
2608 -2611 0
-44 -2610 0
-44 2607 -2611 0
-44 2608 -2613 0
c (0<=(aux583 - aux584 + SATLiteral(44)))
-2608 2613 0
-2607 2611 0
44 2613 0
44 -2608 2611 0
44 -2607 2610 0
c ((aux580 + aux582 - aux585)<=0)
2604 -2615 0
2605 -2616 0
2598 -2615 0
2598 2604 -2616 0
2598 2605 -2618 0
2599 -2616 0
2599 2604 -2618 0
2599 2605 -2620 0
c (0<=(aux580 + aux582 - aux585))
-2605 2620 0
-2604 2618 0
-2599 2620 0
-2599 -2605 2618 0
-2599 -2604 2616 0
-2598 2618 0
-2598 -2605 2616 0
-2598 -2604 2615 0
c ((SATLiteral(316) - aux586 + SATLiteral(586))<=0)
-586 -2622 0
-316 -2622 0
-316 -586 -2623 0
c (0<=(SATLiteral(316) - aux586 + SATLiteral(586)))
586 2623 0
316 2623 0
316 586 2622 0
c ((SATLiteral(991) - aux587 + SATLiteral(856))<=0)
-856 -2625 0
-991 -2625 0
-991 -856 -2626 0
c (0<=(SATLiteral(991) - aux587 + SATLiteral(856)))
856 2626 0
991 2626 0
991 856 2625 0
c (( - aux588 + SATLiteral(721) + SATLiteral(181))<=0)
-181 -2628 0
-721 -2628 0
-721 -181 -2629 0
c (0<=( - aux588 + SATLiteral(721) + SATLiteral(181)))
181 2629 0
721 2629 0
721 181 2628 0
c (( - aux589 + SATLiteral(451) + SATLiteral(1126))<=0)
-1126 -2631 0
-451 -2631 0
-451 -1126 -2632 0
c (0<=( - aux589 + SATLiteral(451) + SATLiteral(1126)))
1126 2632 0
451 2632 0
451 1126 2631 0
c ((aux589 - aux590 + SATLiteral(46))<=0)
2631 -2634 0
2632 -2635 0
-46 -2634 0
-46 2631 -2635 0
-46 2632 -2637 0
c (0<=(aux589 - aux590 + SATLiteral(46)))
-2632 2637 0
-2631 2635 0
46 2637 0
46 -2632 2635 0
46 -2631 2634 0
c ((aux586 + aux588 - aux591)<=0)
2628 -2639 0
2629 -2640 0
2622 -2639 0
2622 2628 -2640 0
2622 2629 -2642 0
2623 -2640 0
2623 2628 -2642 0
2623 2629 -2644 0
c (0<=(aux586 + aux588 - aux591))
-2629 2644 0
-2628 2642 0
-2623 2644 0
-2623 -2629 2642 0
-2623 -2628 2640 0
-2622 2642 0
-2622 -2629 2640 0
-2622 -2628 2639 0
c ((SATLiteral(-315) - aux592 + SATLiteral(-585))<=0)
585 -2646 0
315 -2646 0
315 585 -2647 0
c (0<=(SATLiteral(-315) - aux592 + SATLiteral(-585)))
-585 2647 0
-315 2647 0
-315 -585 2646 0
c ((SATLiteral(-990) - aux593 + SATLiteral(-855))<=0)
855 -2649 0
990 -2649 0
990 855 -2650 0
c (0<=(SATLiteral(-990) - aux593 + SATLiteral(-855)))
-855 2650 0
-990 2650 0
-990 -855 2649 0
c (( - aux594 + SATLiteral(-720) + SATLiteral(-180))<=0)
180 -2652 0
720 -2652 0
720 180 -2653 0
c (0<=( - aux594 + SATLiteral(-720) + SATLiteral(-180)))
-180 2653 0
-720 2653 0
-720 -180 2652 0
c (( - aux595 + SATLiteral(-450) + SATLiteral(-1125))<=0)
1125 -2655 0
450 -2655 0
450 1125 -2656 0
c (0<=( - aux595 + SATLiteral(-450) + SATLiteral(-1125)))
-1125 2656 0
-450 2656 0
-450 -1125 2655 0
c ((aux595 - aux596 + SATLiteral(-45))<=0)
2655 -2658 0
2656 -2659 0
45 -2658 0
45 2655 -2659 0
45 2656 -2661 0
c (0<=(aux595 - aux596 + SATLiteral(-45)))
-2656 2661 0
-2655 2659 0
-45 2661 0
-45 -2656 2659 0
-45 -2655 2658 0
c ((aux592 + aux594 - aux597)<=0)
2652 -2663 0
2653 -2664 0
2646 -2663 0
2646 2652 -2664 0
2646 2653 -2666 0
2647 -2664 0
2647 2652 -2666 0
2647 2653 -2668 0
c (0<=(aux592 + aux594 - aux597))
-2653 2668 0
-2652 2666 0
-2647 2668 0
-2647 -2653 2666 0
-2647 -2652 2664 0
-2646 2666 0
-2646 -2653 2664 0
-2646 -2652 2663 0
c ((SATLiteral(317) - aux598 + SATLiteral(587))<=0)
-587 -2670 0
-317 -2670 0
-317 -587 -2671 0
c (0<=(SATLiteral(317) - aux598 + SATLiteral(587)))
587 2671 0
317 2671 0
317 587 2670 0
c ((SATLiteral(992) - aux599 + SATLiteral(857))<=0)
-857 -2673 0
-992 -2673 0
-992 -857 -2674 0
c (0<=(SATLiteral(992) - aux599 + SATLiteral(857)))
857 2674 0
992 2674 0
992 857 2673 0
c (( - aux600 + SATLiteral(722) + SATLiteral(182))<=0)
-182 -2676 0
-722 -2676 0
-722 -182 -2677 0
c (0<=( - aux600 + SATLiteral(722) + SATLiteral(182)))
182 2677 0
722 2677 0
722 182 2676 0
c (( - aux601 + SATLiteral(452) + SATLiteral(1127))<=0)
-1127 -2679 0
-452 -2679 0
-452 -1127 -2680 0
c (0<=( - aux601 + SATLiteral(452) + SATLiteral(1127)))
1127 2680 0
452 2680 0
452 1127 2679 0
c ((aux601 - aux602 + SATLiteral(47))<=0)
2679 -2682 0
2680 -2683 0
-47 -2682 0
-47 2679 -2683 0
-47 2680 -2685 0
c (0<=(aux601 - aux602 + SATLiteral(47)))
-2680 2685 0
-2679 2683 0
47 2685 0
47 -2680 2683 0
47 -2679 2682 0
c ((aux598 + aux600 - aux603)<=0)
2676 -2687 0
2677 -2688 0
2670 -2687 0
2670 2676 -2688 0
2670 2677 -2690 0
2671 -2688 0
2671 2676 -2690 0
2671 2677 -2692 0
c (0<=(aux598 + aux600 - aux603))
-2677 2692 0
-2676 2690 0
-2671 2692 0
-2671 -2677 2690 0
-2671 -2676 2688 0
-2670 2690 0
-2670 -2677 2688 0
-2670 -2676 2687 0
c ((SATLiteral(319) - aux604 + SATLiteral(589))<=0)
-589 -2694 0
-319 -2694 0
-319 -589 -2695 0
c (0<=(SATLiteral(319) - aux604 + SATLiteral(589)))
589 2695 0
319 2695 0
319 589 2694 0
c ((SATLiteral(994) - aux605 + SATLiteral(859))<=0)
-859 -2697 0
-994 -2697 0
-994 -859 -2698 0
c (0<=(SATLiteral(994) - aux605 + SATLiteral(859)))
859 2698 0
994 2698 0
994 859 2697 0
c (( - aux606 + SATLiteral(724) + SATLiteral(184))<=0)
-184 -2700 0
-724 -2700 0
-724 -184 -2701 0
c (0<=( - aux606 + SATLiteral(724) + SATLiteral(184)))
184 2701 0
724 2701 0
724 184 2700 0
c (( - aux607 + SATLiteral(454) + SATLiteral(1129))<=0)
-1129 -2703 0
-454 -2703 0
-454 -1129 -2704 0
c (0<=( - aux607 + SATLiteral(454) + SATLiteral(1129)))
1129 2704 0
454 2704 0
454 1129 2703 0
c ((aux607 - aux608 + SATLiteral(49))<=0)
2703 -2706 0
2704 -2707 0
-49 -2706 0
-49 2703 -2707 0
-49 2704 -2709 0
c (0<=(aux607 - aux608 + SATLiteral(49)))
-2704 2709 0
-2703 2707 0
49 2709 0
49 -2704 2707 0
49 -2703 2706 0
c ((aux604 + aux606 - aux609)<=0)
2700 -2711 0
2701 -2712 0
2694 -2711 0
2694 2700 -2712 0
2694 2701 -2714 0
2695 -2712 0
2695 2700 -2714 0
2695 2701 -2716 0
c (0<=(aux604 + aux606 - aux609))
-2701 2716 0
-2700 2714 0
-2695 2716 0
-2695 -2701 2714 0
-2695 -2700 2712 0
-2694 2714 0
-2694 -2701 2712 0
-2694 -2700 2711 0
c ((SATLiteral(321) - aux610 + SATLiteral(591))<=0)
-591 -2718 0
-321 -2718 0
-321 -591 -2719 0
c (0<=(SATLiteral(321) - aux610 + SATLiteral(591)))
591 2719 0
321 2719 0
321 591 2718 0
c ((SATLiteral(996) - aux611 + SATLiteral(861))<=0)
-861 -2721 0
-996 -2721 0
-996 -861 -2722 0
c (0<=(SATLiteral(996) - aux611 + SATLiteral(861)))
861 2722 0
996 2722 0
996 861 2721 0
c (( - aux612 + SATLiteral(726) + SATLiteral(186))<=0)
-186 -2724 0
-726 -2724 0
-726 -186 -2725 0
c (0<=( - aux612 + SATLiteral(726) + SATLiteral(186)))
186 2725 0
726 2725 0
726 186 2724 0
c (( - aux613 + SATLiteral(456) + SATLiteral(1131))<=0)
-1131 -2727 0
-456 -2727 0
-456 -1131 -2728 0
c (0<=( - aux613 + SATLiteral(456) + SATLiteral(1131)))
1131 2728 0
456 2728 0
456 1131 2727 0
c ((aux613 - aux614 + SATLiteral(51))<=0)
2727 -2730 0
2728 -2731 0
-51 -2730 0
-51 2727 -2731 0
-51 2728 -2733 0
c (0<=(aux613 - aux614 + SATLiteral(51)))
-2728 2733 0
-2727 2731 0
51 2733 0
51 -2728 2731 0
51 -2727 2730 0
c ((aux610 + aux612 - aux615)<=0)
2724 -2735 0
2725 -2736 0
2718 -2735 0
2718 2724 -2736 0
2718 2725 -2738 0
2719 -2736 0
2719 2724 -2738 0
2719 2725 -2740 0
c (0<=(aux610 + aux612 - aux615))
-2725 2740 0
-2724 2738 0
-2719 2740 0
-2719 -2725 2738 0
-2719 -2724 2736 0
-2718 2738 0
-2718 -2725 2736 0
-2718 -2724 2735 0
c ((SATLiteral(323) - aux616 + SATLiteral(593))<=0)
-593 -2742 0
-323 -2742 0
-323 -593 -2743 0
c (0<=(SATLiteral(323) - aux616 + SATLiteral(593)))
593 2743 0
323 2743 0
323 593 2742 0
c ((SATLiteral(998) - aux617 + SATLiteral(863))<=0)
-863 -2745 0
-998 -2745 0
-998 -863 -2746 0
c (0<=(SATLiteral(998) - aux617 + SATLiteral(863)))
863 2746 0
998 2746 0
998 863 2745 0
c (( - aux618 + SATLiteral(728) + SATLiteral(188))<=0)
-188 -2748 0
-728 -2748 0
-728 -188 -2749 0
c (0<=( - aux618 + SATLiteral(728) + SATLiteral(188)))
188 2749 0
728 2749 0
728 188 2748 0
c (( - aux619 + SATLiteral(458) + SATLiteral(1133))<=0)
-1133 -2751 0
-458 -2751 0
-458 -1133 -2752 0
c (0<=( - aux619 + SATLiteral(458) + SATLiteral(1133)))
1133 2752 0
458 2752 0
458 1133 2751 0
c ((aux619 - aux620 + SATLiteral(53))<=0)
2751 -2754 0
2752 -2755 0
-53 -2754 0
-53 2751 -2755 0
-53 2752 -2757 0
c (0<=(aux619 - aux620 + SATLiteral(53)))
-2752 2757 0
-2751 2755 0
53 2757 0
53 -2752 2755 0
53 -2751 2754 0
c ((aux616 + aux618 - aux621)<=0)
2748 -2759 0
2749 -2760 0
2742 -2759 0
2742 2748 -2760 0
2742 2749 -2762 0
2743 -2760 0
2743 2748 -2762 0
2743 2749 -2764 0
c (0<=(aux616 + aux618 - aux621))
-2749 2764 0
-2748 2762 0
-2743 2764 0
-2743 -2749 2762 0
-2743 -2748 2760 0
-2742 2762 0
-2742 -2749 2760 0
-2742 -2748 2759 0
c ((SATLiteral(325) - aux622 + SATLiteral(595))<=0)
-595 -2766 0
-325 -2766 0
-325 -595 -2767 0
c (0<=(SATLiteral(325) - aux622 + SATLiteral(595)))
595 2767 0
325 2767 0
325 595 2766 0
c ((SATLiteral(1000) - aux623 + SATLiteral(865))<=0)
-865 -2769 0
-1000 -2769 0
-1000 -865 -2770 0
c (0<=(SATLiteral(1000) - aux623 + SATLiteral(865)))
865 2770 0
1000 2770 0
1000 865 2769 0
c (( - aux624 + SATLiteral(730) + SATLiteral(190))<=0)
-190 -2772 0
-730 -2772 0
-730 -190 -2773 0
c (0<=( - aux624 + SATLiteral(730) + SATLiteral(190)))
190 2773 0
730 2773 0
730 190 2772 0
c (( - aux625 + SATLiteral(460) + SATLiteral(1135))<=0)
-1135 -2775 0
-460 -2775 0
-460 -1135 -2776 0
c (0<=( - aux625 + SATLiteral(460) + SATLiteral(1135)))
1135 2776 0
460 2776 0
460 1135 2775 0
c ((aux625 - aux626 + SATLiteral(55))<=0)
2775 -2778 0
2776 -2779 0
-55 -2778 0
-55 2775 -2779 0
-55 2776 -2781 0
c (0<=(aux625 - aux626 + SATLiteral(55)))
-2776 2781 0
-2775 2779 0
55 2781 0
55 -2776 2779 0
55 -2775 2778 0
c ((aux622 + aux624 - aux627)<=0)
2772 -2783 0
2773 -2784 0
2766 -2783 0
2766 2772 -2784 0
2766 2773 -2786 0
2767 -2784 0
2767 2772 -2786 0
2767 2773 -2788 0
c (0<=(aux622 + aux624 - aux627))
-2773 2788 0
-2772 2786 0
-2767 2788 0
-2767 -2773 2786 0
-2767 -2772 2784 0
-2766 2786 0
-2766 -2773 2784 0
-2766 -2772 2783 0
c ((SATLiteral(327) - aux628 + SATLiteral(597))<=0)
-597 -2790 0
-327 -2790 0
-327 -597 -2791 0
c (0<=(SATLiteral(327) - aux628 + SATLiteral(597)))
597 2791 0
327 2791 0
327 597 2790 0
c ((SATLiteral(1002) - aux629 + SATLiteral(867))<=0)
-867 -2793 0
-1002 -2793 0
-1002 -867 -2794 0
c (0<=(SATLiteral(1002) - aux629 + SATLiteral(867)))
867 2794 0
1002 2794 0
1002 867 2793 0
c (( - aux630 + SATLiteral(732) + SATLiteral(192))<=0)
-192 -2796 0
-732 -2796 0
-732 -192 -2797 0
c (0<=( - aux630 + SATLiteral(732) + SATLiteral(192)))
192 2797 0
732 2797 0
732 192 2796 0
c (( - aux631 + SATLiteral(462) + SATLiteral(1137))<=0)
-1137 -2799 0
-462 -2799 0
-462 -1137 -2800 0
c (0<=( - aux631 + SATLiteral(462) + SATLiteral(1137)))
1137 2800 0
462 2800 0
462 1137 2799 0
c ((aux631 - aux632 + SATLiteral(57))<=0)
2799 -2802 0
2800 -2803 0
-57 -2802 0
-57 2799 -2803 0
-57 2800 -2805 0
c (0<=(aux631 - aux632 + SATLiteral(57)))
-2800 2805 0
-2799 2803 0
57 2805 0
57 -2800 2803 0
57 -2799 2802 0
c ((aux628 + aux630 - aux633)<=0)
2796 -2807 0
2797 -2808 0
2790 -2807 0
2790 2796 -2808 0
2790 2797 -2810 0
2791 -2808 0
2791 2796 -2810 0
2791 2797 -2812 0
c (0<=(aux628 + aux630 - aux633))
-2797 2812 0
-2796 2810 0
-2791 2812 0
-2791 -2797 2810 0
-2791 -2796 2808 0
-2790 2810 0
-2790 -2797 2808 0
-2790 -2796 2807 0
c ((SATLiteral(329) - aux634 + SATLiteral(599))<=0)
-599 -2814 0
-329 -2814 0
-329 -599 -2815 0
c (0<=(SATLiteral(329) - aux634 + SATLiteral(599)))
599 2815 0
329 2815 0
329 599 2814 0
c ((SATLiteral(1004) - aux635 + SATLiteral(869))<=0)
-869 -2817 0
-1004 -2817 0
-1004 -869 -2818 0
c (0<=(SATLiteral(1004) - aux635 + SATLiteral(869)))
869 2818 0
1004 2818 0
1004 869 2817 0
c (( - aux636 + SATLiteral(734) + SATLiteral(194))<=0)
-194 -2820 0
-734 -2820 0
-734 -194 -2821 0
c (0<=( - aux636 + SATLiteral(734) + SATLiteral(194)))
194 2821 0
734 2821 0
734 194 2820 0
c (( - aux637 + SATLiteral(464) + SATLiteral(1139))<=0)
-1139 -2823 0
-464 -2823 0
-464 -1139 -2824 0
c (0<=( - aux637 + SATLiteral(464) + SATLiteral(1139)))
1139 2824 0
464 2824 0
464 1139 2823 0
c ((aux637 - aux638 + SATLiteral(59))<=0)
2823 -2826 0
2824 -2827 0
-59 -2826 0
-59 2823 -2827 0
-59 2824 -2829 0
c (0<=(aux637 - aux638 + SATLiteral(59)))
-2824 2829 0
-2823 2827 0
59 2829 0
59 -2824 2827 0
59 -2823 2826 0
c ((aux634 + aux636 - aux639)<=0)
2820 -2831 0
2821 -2832 0
2814 -2831 0
2814 2820 -2832 0
2814 2821 -2834 0
2815 -2832 0
2815 2820 -2834 0
2815 2821 -2836 0
c (0<=(aux634 + aux636 - aux639))
-2821 2836 0
-2820 2834 0
-2815 2836 0
-2815 -2821 2834 0
-2815 -2820 2832 0
-2814 2834 0
-2814 -2821 2832 0
-2814 -2820 2831 0
c ((SATLiteral(331) - aux640 + SATLiteral(601))<=0)
-601 -2838 0
-331 -2838 0
-331 -601 -2839 0
c (0<=(SATLiteral(331) - aux640 + SATLiteral(601)))
601 2839 0
331 2839 0
331 601 2838 0
c ((SATLiteral(1006) - aux641 + SATLiteral(871))<=0)
-871 -2841 0
-1006 -2841 0
-1006 -871 -2842 0
c (0<=(SATLiteral(1006) - aux641 + SATLiteral(871)))
871 2842 0
1006 2842 0
1006 871 2841 0
c (( - aux642 + SATLiteral(736) + SATLiteral(196))<=0)
-196 -2844 0
-736 -2844 0
-736 -196 -2845 0
c (0<=( - aux642 + SATLiteral(736) + SATLiteral(196)))
196 2845 0
736 2845 0
736 196 2844 0
c (( - aux643 + SATLiteral(466) + SATLiteral(1141))<=0)
-1141 -2847 0
-466 -2847 0
-466 -1141 -2848 0
c (0<=( - aux643 + SATLiteral(466) + SATLiteral(1141)))
1141 2848 0
466 2848 0
466 1141 2847 0
c ((aux643 - aux644 + SATLiteral(61))<=0)
2847 -2850 0
2848 -2851 0
-61 -2850 0
-61 2847 -2851 0
-61 2848 -2853 0
c (0<=(aux643 - aux644 + SATLiteral(61)))
-2848 2853 0
-2847 2851 0
61 2853 0
61 -2848 2851 0
61 -2847 2850 0
c ((aux640 + aux642 - aux645)<=0)
2844 -2855 0
2845 -2856 0
2838 -2855 0
2838 2844 -2856 0
2838 2845 -2858 0
2839 -2856 0
2839 2844 -2858 0
2839 2845 -2860 0
c (0<=(aux640 + aux642 - aux645))
-2845 2860 0
-2844 2858 0
-2839 2860 0
-2839 -2845 2858 0
-2839 -2844 2856 0
-2838 2858 0
-2838 -2845 2856 0
-2838 -2844 2855 0
c ((SATLiteral(-330) - aux646 + SATLiteral(-600))<=0)
600 -2862 0
330 -2862 0
330 600 -2863 0
c (0<=(SATLiteral(-330) - aux646 + SATLiteral(-600)))
-600 2863 0
-330 2863 0
-330 -600 2862 0
c ((SATLiteral(-1005) - aux647 + SATLiteral(-870))<=0)
870 -2865 0
1005 -2865 0
1005 870 -2866 0
c (0<=(SATLiteral(-1005) - aux647 + SATLiteral(-870)))
-870 2866 0
-1005 2866 0
-1005 -870 2865 0
c (( - aux648 + SATLiteral(-735) + SATLiteral(-195))<=0)
195 -2868 0
735 -2868 0
735 195 -2869 0
c (0<=( - aux648 + SATLiteral(-735) + SATLiteral(-195)))
-195 2869 0
-735 2869 0
-735 -195 2868 0
c (( - aux649 + SATLiteral(-465) + SATLiteral(-1140))<=0)
1140 -2871 0
465 -2871 0
465 1140 -2872 0
c (0<=( - aux649 + SATLiteral(-465) + SATLiteral(-1140)))
-1140 2872 0
-465 2872 0
-465 -1140 2871 0
c ((aux649 - aux650 + SATLiteral(-60))<=0)
2871 -2874 0
2872 -2875 0
60 -2874 0
60 2871 -2875 0
60 2872 -2877 0
c (0<=(aux649 - aux650 + SATLiteral(-60)))
-2872 2877 0
-2871 2875 0
-60 2877 0
-60 -2872 2875 0
-60 -2871 2874 0
c ((aux646 + aux648 - aux651)<=0)
2868 -2879 0
2869 -2880 0
2862 -2879 0
2862 2868 -2880 0
2862 2869 -2882 0
2863 -2880 0
2863 2868 -2882 0
2863 2869 -2884 0
c (0<=(aux646 + aux648 - aux651))
-2869 2884 0
-2868 2882 0
-2863 2884 0
-2863 -2869 2882 0
-2863 -2868 2880 0
-2862 2882 0
-2862 -2869 2880 0
-2862 -2868 2879 0
c ((SATLiteral(332) - aux652 + SATLiteral(602))<=0)
-602 -2886 0
-332 -2886 0
-332 -602 -2887 0
c (0<=(SATLiteral(332) - aux652 + SATLiteral(602)))
602 2887 0
332 2887 0
332 602 2886 0
c ((SATLiteral(1007) - aux653 + SATLiteral(872))<=0)
-872 -2889 0
-1007 -2889 0
-1007 -872 -2890 0
c (0<=(SATLiteral(1007) - aux653 + SATLiteral(872)))
872 2890 0
1007 2890 0
1007 872 2889 0
c (( - aux654 + SATLiteral(737) + SATLiteral(197))<=0)
-197 -2892 0
-737 -2892 0
-737 -197 -2893 0
c (0<=( - aux654 + SATLiteral(737) + SATLiteral(197)))
197 2893 0
737 2893 0
737 197 2892 0
c (( - aux655 + SATLiteral(467) + SATLiteral(1142))<=0)
-1142 -2895 0
-467 -2895 0
-467 -1142 -2896 0
c (0<=( - aux655 + SATLiteral(467) + SATLiteral(1142)))
1142 2896 0
467 2896 0
467 1142 2895 0
c ((aux655 - aux656 + SATLiteral(62))<=0)
2895 -2898 0
2896 -2899 0
-62 -2898 0
-62 2895 -2899 0
-62 2896 -2901 0
c (0<=(aux655 - aux656 + SATLiteral(62)))
-2896 2901 0
-2895 2899 0
62 2901 0
62 -2896 2899 0
62 -2895 2898 0
c ((aux652 + aux654 - aux657)<=0)
2892 -2903 0
2893 -2904 0
2886 -2903 0
2886 2892 -2904 0
2886 2893 -2906 0
2887 -2904 0
2887 2892 -2906 0
2887 2893 -2908 0
c (0<=(aux652 + aux654 - aux657))
-2893 2908 0
-2892 2906 0
-2887 2908 0
-2887 -2893 2906 0
-2887 -2892 2904 0
-2886 2906 0
-2886 -2893 2904 0
-2886 -2892 2903 0
c ((SATLiteral(334) - aux658 + SATLiteral(604))<=0)
-604 -2910 0
-334 -2910 0
-334 -604 -2911 0
c (0<=(SATLiteral(334) - aux658 + SATLiteral(604)))
604 2911 0
334 2911 0
334 604 2910 0
c ((SATLiteral(1009) - aux659 + SATLiteral(874))<=0)
-874 -2913 0
-1009 -2913 0
-1009 -874 -2914 0
c (0<=(SATLiteral(1009) - aux659 + SATLiteral(874)))
874 2914 0
1009 2914 0
1009 874 2913 0
c (( - aux660 + SATLiteral(739) + SATLiteral(199))<=0)
-199 -2916 0
-739 -2916 0
-739 -199 -2917 0
c (0<=( - aux660 + SATLiteral(739) + SATLiteral(199)))
199 2917 0
739 2917 0
739 199 2916 0
c (( - aux661 + SATLiteral(469) + SATLiteral(1144))<=0)
-1144 -2919 0
-469 -2919 0
-469 -1144 -2920 0
c (0<=( - aux661 + SATLiteral(469) + SATLiteral(1144)))
1144 2920 0
469 2920 0
469 1144 2919 0
c ((aux661 - aux662 + SATLiteral(64))<=0)
2919 -2922 0
2920 -2923 0
-64 -2922 0
-64 2919 -2923 0
-64 2920 -2925 0
c (0<=(aux661 - aux662 + SATLiteral(64)))
-2920 2925 0
-2919 2923 0
64 2925 0
64 -2920 2923 0
64 -2919 2922 0
c ((aux658 + aux660 - aux663)<=0)
2916 -2927 0
2917 -2928 0
2910 -2927 0
2910 2916 -2928 0
2910 2917 -2930 0
2911 -2928 0
2911 2916 -2930 0
2911 2917 -2932 0
c (0<=(aux658 + aux660 - aux663))
-2917 2932 0
-2916 2930 0
-2911 2932 0
-2911 -2917 2930 0
-2911 -2916 2928 0
-2910 2930 0
-2910 -2917 2928 0
-2910 -2916 2927 0
c ((SATLiteral(336) - aux664 + SATLiteral(606))<=0)
-606 -2934 0
-336 -2934 0
-336 -606 -2935 0
c (0<=(SATLiteral(336) - aux664 + SATLiteral(606)))
606 2935 0
336 2935 0
336 606 2934 0
c ((SATLiteral(1011) - aux665 + SATLiteral(876))<=0)
-876 -2937 0
-1011 -2937 0
-1011 -876 -2938 0
c (0<=(SATLiteral(1011) - aux665 + SATLiteral(876)))
876 2938 0
1011 2938 0
1011 876 2937 0
c (( - aux666 + SATLiteral(741) + SATLiteral(201))<=0)
-201 -2940 0
-741 -2940 0
-741 -201 -2941 0
c (0<=( - aux666 + SATLiteral(741) + SATLiteral(201)))
201 2941 0
741 2941 0
741 201 2940 0
c (( - aux667 + SATLiteral(471) + SATLiteral(1146))<=0)
-1146 -2943 0
-471 -2943 0
-471 -1146 -2944 0
c (0<=( - aux667 + SATLiteral(471) + SATLiteral(1146)))
1146 2944 0
471 2944 0
471 1146 2943 0
c ((aux667 - aux668 + SATLiteral(66))<=0)
2943 -2946 0
2944 -2947 0
-66 -2946 0
-66 2943 -2947 0
-66 2944 -2949 0
c (0<=(aux667 - aux668 + SATLiteral(66)))
-2944 2949 0
-2943 2947 0
66 2949 0
66 -2944 2947 0
66 -2943 2946 0
c ((aux664 + aux666 - aux669)<=0)
2940 -2951 0
2941 -2952 0
2934 -2951 0
2934 2940 -2952 0
2934 2941 -2954 0
2935 -2952 0
2935 2940 -2954 0
2935 2941 -2956 0
c (0<=(aux664 + aux666 - aux669))
-2941 2956 0
-2940 2954 0
-2935 2956 0
-2935 -2941 2954 0
-2935 -2940 2952 0
-2934 2954 0
-2934 -2941 2952 0
-2934 -2940 2951 0
c ((SATLiteral(338) - aux670 + SATLiteral(608))<=0)
-608 -2958 0
-338 -2958 0
-338 -608 -2959 0
c (0<=(SATLiteral(338) - aux670 + SATLiteral(608)))
608 2959 0
338 2959 0
338 608 2958 0
c ((SATLiteral(1013) - aux671 + SATLiteral(878))<=0)
-878 -2961 0
-1013 -2961 0
-1013 -878 -2962 0
c (0<=(SATLiteral(1013) - aux671 + SATLiteral(878)))
878 2962 0
1013 2962 0
1013 878 2961 0
c (( - aux672 + SATLiteral(743) + SATLiteral(203))<=0)
-203 -2964 0
-743 -2964 0
-743 -203 -2965 0
c (0<=( - aux672 + SATLiteral(743) + SATLiteral(203)))
203 2965 0
743 2965 0
743 203 2964 0
c (( - aux673 + SATLiteral(473) + SATLiteral(1148))<=0)
-1148 -2967 0
-473 -2967 0
-473 -1148 -2968 0
c (0<=( - aux673 + SATLiteral(473) + SATLiteral(1148)))
1148 2968 0
473 2968 0
473 1148 2967 0
c ((aux673 - aux674 + SATLiteral(68))<=0)
2967 -2970 0
2968 -2971 0
-68 -2970 0
-68 2967 -2971 0
-68 2968 -2973 0
c (0<=(aux673 - aux674 + SATLiteral(68)))
-2968 2973 0
-2967 2971 0
68 2973 0
68 -2968 2971 0
68 -2967 2970 0
c ((aux670 + aux672 - aux675)<=0)
2964 -2975 0
2965 -2976 0
2958 -2975 0
2958 2964 -2976 0
2958 2965 -2978 0
2959 -2976 0
2959 2964 -2978 0
2959 2965 -2980 0
c (0<=(aux670 + aux672 - aux675))
-2965 2980 0
-2964 2978 0
-2959 2980 0
-2959 -2965 2978 0
-2959 -2964 2976 0
-2958 2978 0
-2958 -2965 2976 0
-2958 -2964 2975 0
c ((SATLiteral(340) - aux676 + SATLiteral(610))<=0)
-610 -2982 0
-340 -2982 0
-340 -610 -2983 0
c (0<=(SATLiteral(340) - aux676 + SATLiteral(610)))
610 2983 0
340 2983 0
340 610 2982 0
c ((SATLiteral(1015) - aux677 + SATLiteral(880))<=0)
-880 -2985 0
-1015 -2985 0
-1015 -880 -2986 0
c (0<=(SATLiteral(1015) - aux677 + SATLiteral(880)))
880 2986 0
1015 2986 0
1015 880 2985 0
c (( - aux678 + SATLiteral(745) + SATLiteral(205))<=0)
-205 -2988 0
-745 -2988 0
-745 -205 -2989 0
c (0<=( - aux678 + SATLiteral(745) + SATLiteral(205)))
205 2989 0
745 2989 0
745 205 2988 0
c (( - aux679 + SATLiteral(475) + SATLiteral(1150))<=0)
-1150 -2991 0
-475 -2991 0
-475 -1150 -2992 0
c (0<=( - aux679 + SATLiteral(475) + SATLiteral(1150)))
1150 2992 0
475 2992 0
475 1150 2991 0
c ((aux679 - aux680 + SATLiteral(70))<=0)
2991 -2994 0
2992 -2995 0
-70 -2994 0
-70 2991 -2995 0
-70 2992 -2997 0
c (0<=(aux679 - aux680 + SATLiteral(70)))
-2992 2997 0
-2991 2995 0
70 2997 0
70 -2992 2995 0
70 -2991 2994 0
c ((aux676 + aux678 - aux681)<=0)
2988 -2999 0
2989 -3000 0
2982 -2999 0
2982 2988 -3000 0
2982 2989 -3002 0
2983 -3000 0
2983 2988 -3002 0
2983 2989 -3004 0
c (0<=(aux676 + aux678 - aux681))
-2989 3004 0
-2988 3002 0
-2983 3004 0
-2983 -2989 3002 0
-2983 -2988 3000 0
-2982 3002 0
-2982 -2989 3000 0
-2982 -2988 2999 0
c ((SATLiteral(342) - aux682 + SATLiteral(612))<=0)
-612 -3006 0
-342 -3006 0
-342 -612 -3007 0
c (0<=(SATLiteral(342) - aux682 + SATLiteral(612)))
612 3007 0
342 3007 0
342 612 3006 0
c ((SATLiteral(1017) - aux683 + SATLiteral(882))<=0)
-882 -3009 0
-1017 -3009 0
-1017 -882 -3010 0
c (0<=(SATLiteral(1017) - aux683 + SATLiteral(882)))
882 3010 0
1017 3010 0
1017 882 3009 0
c (( - aux684 + SATLiteral(747) + SATLiteral(207))<=0)
-207 -3012 0
-747 -3012 0
-747 -207 -3013 0
c (0<=( - aux684 + SATLiteral(747) + SATLiteral(207)))
207 3013 0
747 3013 0
747 207 3012 0
c (( - aux685 + SATLiteral(477) + SATLiteral(1152))<=0)
-1152 -3015 0
-477 -3015 0
-477 -1152 -3016 0
c (0<=( - aux685 + SATLiteral(477) + SATLiteral(1152)))
1152 3016 0
477 3016 0
477 1152 3015 0
c ((aux685 - aux686 + SATLiteral(72))<=0)
3015 -3018 0
3016 -3019 0
-72 -3018 0
-72 3015 -3019 0
-72 3016 -3021 0
c (0<=(aux685 - aux686 + SATLiteral(72)))
-3016 3021 0
-3015 3019 0
72 3021 0
72 -3016 3019 0
72 -3015 3018 0
c ((aux682 + aux684 - aux687)<=0)
3012 -3023 0
3013 -3024 0
3006 -3023 0
3006 3012 -3024 0
3006 3013 -3026 0
3007 -3024 0
3007 3012 -3026 0
3007 3013 -3028 0
c (0<=(aux682 + aux684 - aux687))
-3013 3028 0
-3012 3026 0
-3007 3028 0
-3007 -3013 3026 0
-3007 -3012 3024 0
-3006 3026 0
-3006 -3013 3024 0
-3006 -3012 3023 0
c ((SATLiteral(344) - aux688 + SATLiteral(614))<=0)
-614 -3030 0
-344 -3030 0
-344 -614 -3031 0
c (0<=(SATLiteral(344) - aux688 + SATLiteral(614)))
614 3031 0
344 3031 0
344 614 3030 0
c ((SATLiteral(1019) - aux689 + SATLiteral(884))<=0)
-884 -3033 0
-1019 -3033 0
-1019 -884 -3034 0
c (0<=(SATLiteral(1019) - aux689 + SATLiteral(884)))
884 3034 0
1019 3034 0
1019 884 3033 0
c (( - aux690 + SATLiteral(749) + SATLiteral(209))<=0)
-209 -3036 0
-749 -3036 0
-749 -209 -3037 0
c (0<=( - aux690 + SATLiteral(749) + SATLiteral(209)))
209 3037 0
749 3037 0
749 209 3036 0
c (( - aux691 + SATLiteral(479) + SATLiteral(1154))<=0)
-1154 -3039 0
-479 -3039 0
-479 -1154 -3040 0
c (0<=( - aux691 + SATLiteral(479) + SATLiteral(1154)))
1154 3040 0
479 3040 0
479 1154 3039 0
c ((aux691 - aux692 + SATLiteral(74))<=0)
3039 -3042 0
3040 -3043 0
-74 -3042 0
-74 3039 -3043 0
-74 3040 -3045 0
c (0<=(aux691 - aux692 + SATLiteral(74)))
-3040 3045 0
-3039 3043 0
74 3045 0
74 -3040 3043 0
74 -3039 3042 0
c ((aux688 + aux690 - aux693)<=0)
3036 -3047 0
3037 -3048 0
3030 -3047 0
3030 3036 -3048 0
3030 3037 -3050 0
3031 -3048 0
3031 3036 -3050 0
3031 3037 -3052 0
c (0<=(aux688 + aux690 - aux693))
-3037 3052 0
-3036 3050 0
-3031 3052 0
-3031 -3037 3050 0
-3031 -3036 3048 0
-3030 3050 0
-3030 -3037 3048 0
-3030 -3036 3047 0
c ((SATLiteral(346) - aux694 + SATLiteral(616))<=0)
-616 -3054 0
-346 -3054 0
-346 -616 -3055 0
c (0<=(SATLiteral(346) - aux694 + SATLiteral(616)))
616 3055 0
346 3055 0
346 616 3054 0
c ((SATLiteral(1021) - aux695 + SATLiteral(886))<=0)
-886 -3057 0
-1021 -3057 0
-1021 -886 -3058 0
c (0<=(SATLiteral(1021) - aux695 + SATLiteral(886)))
886 3058 0
1021 3058 0
1021 886 3057 0
c (( - aux696 + SATLiteral(751) + SATLiteral(211))<=0)
-211 -3060 0
-751 -3060 0
-751 -211 -3061 0
c (0<=( - aux696 + SATLiteral(751) + SATLiteral(211)))
211 3061 0
751 3061 0
751 211 3060 0
c (( - aux697 + SATLiteral(481) + SATLiteral(1156))<=0)
-1156 -3063 0
-481 -3063 0
-481 -1156 -3064 0
c (0<=( - aux697 + SATLiteral(481) + SATLiteral(1156)))
1156 3064 0
481 3064 0
481 1156 3063 0
c ((aux697 - aux698 + SATLiteral(76))<=0)
3063 -3066 0
3064 -3067 0
-76 -3066 0
-76 3063 -3067 0
-76 3064 -3069 0
c (0<=(aux697 - aux698 + SATLiteral(76)))
-3064 3069 0
-3063 3067 0
76 3069 0
76 -3064 3067 0
76 -3063 3066 0
c ((aux694 + aux696 - aux699)<=0)
3060 -3071 0
3061 -3072 0
3054 -3071 0
3054 3060 -3072 0
3054 3061 -3074 0
3055 -3072 0
3055 3060 -3074 0
3055 3061 -3076 0
c (0<=(aux694 + aux696 - aux699))
-3061 3076 0
-3060 3074 0
-3055 3076 0
-3055 -3061 3074 0
-3055 -3060 3072 0
-3054 3074 0
-3054 -3061 3072 0
-3054 -3060 3071 0
c ((SATLiteral(-345) - aux700 + SATLiteral(-615))<=0)
615 -3078 0
345 -3078 0
345 615 -3079 0
c (0<=(SATLiteral(-345) - aux700 + SATLiteral(-615)))
-615 3079 0
-345 3079 0
-345 -615 3078 0
c ((SATLiteral(-1020) - aux701 + SATLiteral(-885))<=0)
885 -3081 0
1020 -3081 0
1020 885 -3082 0
c (0<=(SATLiteral(-1020) - aux701 + SATLiteral(-885)))
-885 3082 0
-1020 3082 0
-1020 -885 3081 0
c (( - aux702 + SATLiteral(-750) + SATLiteral(-210))<=0)
210 -3084 0
750 -3084 0
750 210 -3085 0
c (0<=( - aux702 + SATLiteral(-750) + SATLiteral(-210)))
-210 3085 0
-750 3085 0
-750 -210 3084 0
c (( - aux703 + SATLiteral(-480) + SATLiteral(-1155))<=0)
1155 -3087 0
480 -3087 0
480 1155 -3088 0
c (0<=( - aux703 + SATLiteral(-480) + SATLiteral(-1155)))
-1155 3088 0
-480 3088 0
-480 -1155 3087 0
c ((aux703 - aux704 + SATLiteral(-75))<=0)
3087 -3090 0
3088 -3091 0
75 -3090 0
75 3087 -3091 0
75 3088 -3093 0
c (0<=(aux703 - aux704 + SATLiteral(-75)))
-3088 3093 0
-3087 3091 0
-75 3093 0
-75 -3088 3091 0
-75 -3087 3090 0
c ((aux700 + aux702 - aux705)<=0)
3084 -3095 0
3085 -3096 0
3078 -3095 0
3078 3084 -3096 0
3078 3085 -3098 0
3079 -3096 0
3079 3084 -3098 0
3079 3085 -3100 0
c (0<=(aux700 + aux702 - aux705))
-3085 3100 0
-3084 3098 0
-3079 3100 0
-3079 -3085 3098 0
-3079 -3084 3096 0
-3078 3098 0
-3078 -3085 3096 0
-3078 -3084 3095 0
c ((SATLiteral(347) - aux706 + SATLiteral(617))<=0)
-617 -3102 0
-347 -3102 0
-347 -617 -3103 0
c (0<=(SATLiteral(347) - aux706 + SATLiteral(617)))
617 3103 0
347 3103 0
347 617 3102 0
c ((SATLiteral(1022) - aux707 + SATLiteral(887))<=0)
-887 -3105 0
-1022 -3105 0
-1022 -887 -3106 0
c (0<=(SATLiteral(1022) - aux707 + SATLiteral(887)))
887 3106 0
1022 3106 0
1022 887 3105 0
c (( - aux708 + SATLiteral(752) + SATLiteral(212))<=0)
-212 -3108 0
-752 -3108 0
-752 -212 -3109 0
c (0<=( - aux708 + SATLiteral(752) + SATLiteral(212)))
212 3109 0
752 3109 0
752 212 3108 0
c (( - aux709 + SATLiteral(482) + SATLiteral(1157))<=0)
-1157 -3111 0
-482 -3111 0
-482 -1157 -3112 0
c (0<=( - aux709 + SATLiteral(482) + SATLiteral(1157)))
1157 3112 0
482 3112 0
482 1157 3111 0
c ((aux709 - aux710 + SATLiteral(77))<=0)
3111 -3114 0
3112 -3115 0
-77 -3114 0
-77 3111 -3115 0
-77 3112 -3117 0
c (0<=(aux709 - aux710 + SATLiteral(77)))
-3112 3117 0
-3111 3115 0
77 3117 0
77 -3112 3115 0
77 -3111 3114 0
c ((aux706 + aux708 - aux711)<=0)
3108 -3119 0
3109 -3120 0
3102 -3119 0
3102 3108 -3120 0
3102 3109 -3122 0
3103 -3120 0
3103 3108 -3122 0
3103 3109 -3124 0
c (0<=(aux706 + aux708 - aux711))
-3109 3124 0
-3108 3122 0
-3103 3124 0
-3103 -3109 3122 0
-3103 -3108 3120 0
-3102 3122 0
-3102 -3109 3120 0
-3102 -3108 3119 0
c ((SATLiteral(349) - aux712 + SATLiteral(619))<=0)
-619 -3126 0
-349 -3126 0
-349 -619 -3127 0
c (0<=(SATLiteral(349) - aux712 + SATLiteral(619)))
619 3127 0
349 3127 0
349 619 3126 0
c ((SATLiteral(1024) - aux713 + SATLiteral(889))<=0)
-889 -3129 0
-1024 -3129 0
-1024 -889 -3130 0
c (0<=(SATLiteral(1024) - aux713 + SATLiteral(889)))
889 3130 0
1024 3130 0
1024 889 3129 0
c (( - aux714 + SATLiteral(754) + SATLiteral(214))<=0)
-214 -3132 0
-754 -3132 0
-754 -214 -3133 0
c (0<=( - aux714 + SATLiteral(754) + SATLiteral(214)))
214 3133 0
754 3133 0
754 214 3132 0
c (( - aux715 + SATLiteral(484) + SATLiteral(1159))<=0)
-1159 -3135 0
-484 -3135 0
-484 -1159 -3136 0
c (0<=( - aux715 + SATLiteral(484) + SATLiteral(1159)))
1159 3136 0
484 3136 0
484 1159 3135 0
c ((aux715 - aux716 + SATLiteral(79))<=0)
3135 -3138 0
3136 -3139 0
-79 -3138 0
-79 3135 -3139 0
-79 3136 -3141 0
c (0<=(aux715 - aux716 + SATLiteral(79)))
-3136 3141 0
-3135 3139 0
79 3141 0
79 -3136 3139 0
79 -3135 3138 0
c ((aux712 + aux714 - aux717)<=0)
3132 -3143 0
3133 -3144 0
3126 -3143 0
3126 3132 -3144 0
3126 3133 -3146 0
3127 -3144 0
3127 3132 -3146 0
3127 3133 -3148 0
c (0<=(aux712 + aux714 - aux717))
-3133 3148 0
-3132 3146 0
-3127 3148 0
-3127 -3133 3146 0
-3127 -3132 3144 0
-3126 3146 0
-3126 -3133 3144 0
-3126 -3132 3143 0
c ((SATLiteral(351) - aux718 + SATLiteral(621))<=0)
-621 -3150 0
-351 -3150 0
-351 -621 -3151 0
c (0<=(SATLiteral(351) - aux718 + SATLiteral(621)))
621 3151 0
351 3151 0
351 621 3150 0
c ((SATLiteral(1026) - aux719 + SATLiteral(891))<=0)
-891 -3153 0
-1026 -3153 0
-1026 -891 -3154 0
c (0<=(SATLiteral(1026) - aux719 + SATLiteral(891)))
891 3154 0
1026 3154 0
1026 891 3153 0
c (( - aux720 + SATLiteral(756) + SATLiteral(216))<=0)
-216 -3156 0
-756 -3156 0
-756 -216 -3157 0
c (0<=( - aux720 + SATLiteral(756) + SATLiteral(216)))
216 3157 0
756 3157 0
756 216 3156 0
c (( - aux721 + SATLiteral(486) + SATLiteral(1161))<=0)
-1161 -3159 0
-486 -3159 0
-486 -1161 -3160 0
c (0<=( - aux721 + SATLiteral(486) + SATLiteral(1161)))
1161 3160 0
486 3160 0
486 1161 3159 0
c ((aux721 - aux722 + SATLiteral(81))<=0)
3159 -3162 0
3160 -3163 0
-81 -3162 0
-81 3159 -3163 0
-81 3160 -3165 0
c (0<=(aux721 - aux722 + SATLiteral(81)))
-3160 3165 0
-3159 3163 0
81 3165 0
81 -3160 3163 0
81 -3159 3162 0
c ((aux718 + aux720 - aux723)<=0)
3156 -3167 0
3157 -3168 0
3150 -3167 0
3150 3156 -3168 0
3150 3157 -3170 0
3151 -3168 0
3151 3156 -3170 0
3151 3157 -3172 0
c (0<=(aux718 + aux720 - aux723))
-3157 3172 0
-3156 3170 0
-3151 3172 0
-3151 -3157 3170 0
-3151 -3156 3168 0
-3150 3170 0
-3150 -3157 3168 0
-3150 -3156 3167 0
c ((SATLiteral(353) - aux724 + SATLiteral(623))<=0)
-623 -3174 0
-353 -3174 0
-353 -623 -3175 0
c (0<=(SATLiteral(353) - aux724 + SATLiteral(623)))
623 3175 0
353 3175 0
353 623 3174 0
c ((SATLiteral(1028) - aux725 + SATLiteral(893))<=0)
-893 -3177 0
-1028 -3177 0
-1028 -893 -3178 0
c (0<=(SATLiteral(1028) - aux725 + SATLiteral(893)))
893 3178 0
1028 3178 0
1028 893 3177 0
c (( - aux726 + SATLiteral(758) + SATLiteral(218))<=0)
-218 -3180 0
-758 -3180 0
-758 -218 -3181 0
c (0<=( - aux726 + SATLiteral(758) + SATLiteral(218)))
218 3181 0
758 3181 0
758 218 3180 0
c (( - aux727 + SATLiteral(488) + SATLiteral(1163))<=0)
-1163 -3183 0
-488 -3183 0
-488 -1163 -3184 0
c (0<=( - aux727 + SATLiteral(488) + SATLiteral(1163)))
1163 3184 0
488 3184 0
488 1163 3183 0
c ((aux727 - aux728 + SATLiteral(83))<=0)
3183 -3186 0
3184 -3187 0
-83 -3186 0
-83 3183 -3187 0
-83 3184 -3189 0
c (0<=(aux727 - aux728 + SATLiteral(83)))
-3184 3189 0
-3183 3187 0
83 3189 0
83 -3184 3187 0
83 -3183 3186 0
c ((aux724 + aux726 - aux729)<=0)
3180 -3191 0
3181 -3192 0
3174 -3191 0
3174 3180 -3192 0
3174 3181 -3194 0
3175 -3192 0
3175 3180 -3194 0
3175 3181 -3196 0
c (0<=(aux724 + aux726 - aux729))
-3181 3196 0
-3180 3194 0
-3175 3196 0
-3175 -3181 3194 0
-3175 -3180 3192 0
-3174 3194 0
-3174 -3181 3192 0
-3174 -3180 3191 0
c ((SATLiteral(355) - aux730 + SATLiteral(625))<=0)
-625 -3198 0
-355 -3198 0
-355 -625 -3199 0
c (0<=(SATLiteral(355) - aux730 + SATLiteral(625)))
625 3199 0
355 3199 0
355 625 3198 0
c ((SATLiteral(1030) - aux731 + SATLiteral(895))<=0)
-895 -3201 0
-1030 -3201 0
-1030 -895 -3202 0
c (0<=(SATLiteral(1030) - aux731 + SATLiteral(895)))
895 3202 0
1030 3202 0
1030 895 3201 0
c (( - aux732 + SATLiteral(760) + SATLiteral(220))<=0)
-220 -3204 0
-760 -3204 0
-760 -220 -3205 0
c (0<=( - aux732 + SATLiteral(760) + SATLiteral(220)))
220 3205 0
760 3205 0
760 220 3204 0
c (( - aux733 + SATLiteral(490) + SATLiteral(1165))<=0)
-1165 -3207 0
-490 -3207 0
-490 -1165 -3208 0
c (0<=( - aux733 + SATLiteral(490) + SATLiteral(1165)))
1165 3208 0
490 3208 0
490 1165 3207 0
c ((aux733 - aux734 + SATLiteral(85))<=0)
3207 -3210 0
3208 -3211 0
-85 -3210 0
-85 3207 -3211 0
-85 3208 -3213 0
c (0<=(aux733 - aux734 + SATLiteral(85)))
-3208 3213 0
-3207 3211 0
85 3213 0
85 -3208 3211 0
85 -3207 3210 0
c ((aux730 + aux732 - aux735)<=0)
3204 -3215 0
3205 -3216 0
3198 -3215 0
3198 3204 -3216 0
3198 3205 -3218 0
3199 -3216 0
3199 3204 -3218 0
3199 3205 -3220 0
c (0<=(aux730 + aux732 - aux735))
-3205 3220 0
-3204 3218 0
-3199 3220 0
-3199 -3205 3218 0
-3199 -3204 3216 0
-3198 3218 0
-3198 -3205 3216 0
-3198 -3204 3215 0
c ((SATLiteral(357) - aux736 + SATLiteral(627))<=0)
-627 -3222 0
-357 -3222 0
-357 -627 -3223 0
c (0<=(SATLiteral(357) - aux736 + SATLiteral(627)))
627 3223 0
357 3223 0
357 627 3222 0
c ((SATLiteral(1032) - aux737 + SATLiteral(897))<=0)
-897 -3225 0
-1032 -3225 0
-1032 -897 -3226 0
c (0<=(SATLiteral(1032) - aux737 + SATLiteral(897)))
897 3226 0
1032 3226 0
1032 897 3225 0
c (( - aux738 + SATLiteral(762) + SATLiteral(222))<=0)
-222 -3228 0
-762 -3228 0
-762 -222 -3229 0
c (0<=( - aux738 + SATLiteral(762) + SATLiteral(222)))
222 3229 0
762 3229 0
762 222 3228 0
c (( - aux739 + SATLiteral(492) + SATLiteral(1167))<=0)
-1167 -3231 0
-492 -3231 0
-492 -1167 -3232 0
c (0<=( - aux739 + SATLiteral(492) + SATLiteral(1167)))
1167 3232 0
492 3232 0
492 1167 3231 0
c ((aux739 - aux740 + SATLiteral(87))<=0)
3231 -3234 0
3232 -3235 0
-87 -3234 0
-87 3231 -3235 0
-87 3232 -3237 0
c (0<=(aux739 - aux740 + SATLiteral(87)))
-3232 3237 0
-3231 3235 0
87 3237 0
87 -3232 3235 0
87 -3231 3234 0
c ((aux736 + aux738 - aux741)<=0)
3228 -3239 0
3229 -3240 0
3222 -3239 0
3222 3228 -3240 0
3222 3229 -3242 0
3223 -3240 0
3223 3228 -3242 0
3223 3229 -3244 0
c (0<=(aux736 + aux738 - aux741))
-3229 3244 0
-3228 3242 0
-3223 3244 0
-3223 -3229 3242 0
-3223 -3228 3240 0
-3222 3242 0
-3222 -3229 3240 0
-3222 -3228 3239 0
c ((SATLiteral(359) - aux742 + SATLiteral(629))<=0)
-629 -3246 0
-359 -3246 0
-359 -629 -3247 0
c (0<=(SATLiteral(359) - aux742 + SATLiteral(629)))
629 3247 0
359 3247 0
359 629 3246 0
c ((SATLiteral(1034) - aux743 + SATLiteral(899))<=0)
-899 -3249 0
-1034 -3249 0
-1034 -899 -3250 0
c (0<=(SATLiteral(1034) - aux743 + SATLiteral(899)))
899 3250 0
1034 3250 0
1034 899 3249 0
c (( - aux744 + SATLiteral(764) + SATLiteral(224))<=0)
-224 -3252 0
-764 -3252 0
-764 -224 -3253 0
c (0<=( - aux744 + SATLiteral(764) + SATLiteral(224)))
224 3253 0
764 3253 0
764 224 3252 0
c (( - aux745 + SATLiteral(494) + SATLiteral(1169))<=0)
-1169 -3255 0
-494 -3255 0
-494 -1169 -3256 0
c (0<=( - aux745 + SATLiteral(494) + SATLiteral(1169)))
1169 3256 0
494 3256 0
494 1169 3255 0
c ((aux745 - aux746 + SATLiteral(89))<=0)
3255 -3258 0
3256 -3259 0
-89 -3258 0
-89 3255 -3259 0
-89 3256 -3261 0
c (0<=(aux745 - aux746 + SATLiteral(89)))
-3256 3261 0
-3255 3259 0
89 3261 0
89 -3256 3259 0
89 -3255 3258 0
c ((aux742 + aux744 - aux747)<=0)
3252 -3263 0
3253 -3264 0
3246 -3263 0
3246 3252 -3264 0
3246 3253 -3266 0
3247 -3264 0
3247 3252 -3266 0
3247 3253 -3268 0
c (0<=(aux742 + aux744 - aux747))
-3253 3268 0
-3252 3266 0
-3247 3268 0
-3247 -3253 3266 0
-3247 -3252 3264 0
-3246 3266 0
-3246 -3253 3264 0
-3246 -3252 3263 0
c ((SATLiteral(361) - aux748 + SATLiteral(631))<=0)
-631 -3270 0
-361 -3270 0
-361 -631 -3271 0
c (0<=(SATLiteral(361) - aux748 + SATLiteral(631)))
631 3271 0
361 3271 0
361 631 3270 0
c ((SATLiteral(1036) - aux749 + SATLiteral(901))<=0)
-901 -3273 0
-1036 -3273 0
-1036 -901 -3274 0
c (0<=(SATLiteral(1036) - aux749 + SATLiteral(901)))
901 3274 0
1036 3274 0
1036 901 3273 0
c (( - aux750 + SATLiteral(766) + SATLiteral(226))<=0)
-226 -3276 0
-766 -3276 0
-766 -226 -3277 0
c (0<=( - aux750 + SATLiteral(766) + SATLiteral(226)))
226 3277 0
766 3277 0
766 226 3276 0
c (( - aux751 + SATLiteral(496) + SATLiteral(1171))<=0)
-1171 -3279 0
-496 -3279 0
-496 -1171 -3280 0
c (0<=( - aux751 + SATLiteral(496) + SATLiteral(1171)))
1171 3280 0
496 3280 0
496 1171 3279 0
c ((aux751 - aux752 + SATLiteral(91))<=0)
3279 -3282 0
3280 -3283 0
-91 -3282 0
-91 3279 -3283 0
-91 3280 -3285 0
c (0<=(aux751 - aux752 + SATLiteral(91)))
-3280 3285 0
-3279 3283 0
91 3285 0
91 -3280 3283 0
91 -3279 3282 0
c ((aux748 + aux750 - aux753)<=0)
3276 -3287 0
3277 -3288 0
3270 -3287 0
3270 3276 -3288 0
3270 3277 -3290 0
3271 -3288 0
3271 3276 -3290 0
3271 3277 -3292 0
c (0<=(aux748 + aux750 - aux753))
-3277 3292 0
-3276 3290 0
-3271 3292 0
-3271 -3277 3290 0
-3271 -3276 3288 0
-3270 3290 0
-3270 -3277 3288 0
-3270 -3276 3287 0
c ((SATLiteral(-360) - aux754 + SATLiteral(-630))<=0)
630 -3294 0
360 -3294 0
360 630 -3295 0
c (0<=(SATLiteral(-360) - aux754 + SATLiteral(-630)))
-630 3295 0
-360 3295 0
-360 -630 3294 0
c ((SATLiteral(-1035) - aux755 + SATLiteral(-900))<=0)
900 -3297 0
1035 -3297 0
1035 900 -3298 0
c (0<=(SATLiteral(-1035) - aux755 + SATLiteral(-900)))
-900 3298 0
-1035 3298 0
-1035 -900 3297 0
c (( - aux756 + SATLiteral(-765) + SATLiteral(-225))<=0)
225 -3300 0
765 -3300 0
765 225 -3301 0
c (0<=( - aux756 + SATLiteral(-765) + SATLiteral(-225)))
-225 3301 0
-765 3301 0
-765 -225 3300 0
c (( - aux757 + SATLiteral(-495) + SATLiteral(-1170))<=0)
1170 -3303 0
495 -3303 0
495 1170 -3304 0
c (0<=( - aux757 + SATLiteral(-495) + SATLiteral(-1170)))
-1170 3304 0
-495 3304 0
-495 -1170 3303 0
c ((aux757 - aux758 + SATLiteral(-90))<=0)
3303 -3306 0
3304 -3307 0
90 -3306 0
90 3303 -3307 0
90 3304 -3309 0
c (0<=(aux757 - aux758 + SATLiteral(-90)))
-3304 3309 0
-3303 3307 0
-90 3309 0
-90 -3304 3307 0
-90 -3303 3306 0
c ((aux754 + aux756 - aux759)<=0)
3300 -3311 0
3301 -3312 0
3294 -3311 0
3294 3300 -3312 0
3294 3301 -3314 0
3295 -3312 0
3295 3300 -3314 0
3295 3301 -3316 0
c (0<=(aux754 + aux756 - aux759))
-3301 3316 0
-3300 3314 0
-3295 3316 0
-3295 -3301 3314 0
-3295 -3300 3312 0
-3294 3314 0
-3294 -3301 3312 0
-3294 -3300 3311 0
c ((SATLiteral(362) - aux760 + SATLiteral(632))<=0)
-632 -3318 0
-362 -3318 0
-362 -632 -3319 0
c (0<=(SATLiteral(362) - aux760 + SATLiteral(632)))
632 3319 0
362 3319 0
362 632 3318 0
c ((SATLiteral(1037) - aux761 + SATLiteral(902))<=0)
-902 -3321 0
-1037 -3321 0
-1037 -902 -3322 0
c (0<=(SATLiteral(1037) - aux761 + SATLiteral(902)))
902 3322 0
1037 3322 0
1037 902 3321 0
c (( - aux762 + SATLiteral(767) + SATLiteral(227))<=0)
-227 -3324 0
-767 -3324 0
-767 -227 -3325 0
c (0<=( - aux762 + SATLiteral(767) + SATLiteral(227)))
227 3325 0
767 3325 0
767 227 3324 0
c (( - aux763 + SATLiteral(497) + SATLiteral(1172))<=0)
-1172 -3327 0
-497 -3327 0
-497 -1172 -3328 0
c (0<=( - aux763 + SATLiteral(497) + SATLiteral(1172)))
1172 3328 0
497 3328 0
497 1172 3327 0
c ((aux763 - aux764 + SATLiteral(92))<=0)
3327 -3330 0
3328 -3331 0
-92 -3330 0
-92 3327 -3331 0
-92 3328 -3333 0
c (0<=(aux763 - aux764 + SATLiteral(92)))
-3328 3333 0
-3327 3331 0
92 3333 0
92 -3328 3331 0
92 -3327 3330 0
c ((aux760 + aux762 - aux765)<=0)
3324 -3335 0
3325 -3336 0
3318 -3335 0
3318 3324 -3336 0
3318 3325 -3338 0
3319 -3336 0
3319 3324 -3338 0
3319 3325 -3340 0
c (0<=(aux760 + aux762 - aux765))
-3325 3340 0
-3324 3338 0
-3319 3340 0
-3319 -3325 3338 0
-3319 -3324 3336 0
-3318 3338 0
-3318 -3325 3336 0
-3318 -3324 3335 0
c ((SATLiteral(364) - aux766 + SATLiteral(634))<=0)
-634 -3342 0
-364 -3342 0
-364 -634 -3343 0
c (0<=(SATLiteral(364) - aux766 + SATLiteral(634)))
634 3343 0
364 3343 0
364 634 3342 0
c ((SATLiteral(1039) - aux767 + SATLiteral(904))<=0)
-904 -3345 0
-1039 -3345 0
-1039 -904 -3346 0
c (0<=(SATLiteral(1039) - aux767 + SATLiteral(904)))
904 3346 0
1039 3346 0
1039 904 3345 0
c (( - aux768 + SATLiteral(769) + SATLiteral(229))<=0)
-229 -3348 0
-769 -3348 0
-769 -229 -3349 0
c (0<=( - aux768 + SATLiteral(769) + SATLiteral(229)))
229 3349 0
769 3349 0
769 229 3348 0
c (( - aux769 + SATLiteral(499) + SATLiteral(1174))<=0)
-1174 -3351 0
-499 -3351 0
-499 -1174 -3352 0
c (0<=( - aux769 + SATLiteral(499) + SATLiteral(1174)))
1174 3352 0
499 3352 0
499 1174 3351 0
c ((aux769 - aux770 + SATLiteral(94))<=0)
3351 -3354 0
3352 -3355 0
-94 -3354 0
-94 3351 -3355 0
-94 3352 -3357 0
c (0<=(aux769 - aux770 + SATLiteral(94)))
-3352 3357 0
-3351 3355 0
94 3357 0
94 -3352 3355 0
94 -3351 3354 0
c ((aux766 + aux768 - aux771)<=0)
3348 -3359 0
3349 -3360 0
3342 -3359 0
3342 3348 -3360 0
3342 3349 -3362 0
3343 -3360 0
3343 3348 -3362 0
3343 3349 -3364 0
c (0<=(aux766 + aux768 - aux771))
-3349 3364 0
-3348 3362 0
-3343 3364 0
-3343 -3349 3362 0
-3343 -3348 3360 0
-3342 3362 0
-3342 -3349 3360 0
-3342 -3348 3359 0
c ((SATLiteral(366) - aux772 + SATLiteral(636))<=0)
-636 -3366 0
-366 -3366 0
-366 -636 -3367 0
c (0<=(SATLiteral(366) - aux772 + SATLiteral(636)))
636 3367 0
366 3367 0
366 636 3366 0
c ((SATLiteral(1041) - aux773 + SATLiteral(906))<=0)
-906 -3369 0
-1041 -3369 0
-1041 -906 -3370 0
c (0<=(SATLiteral(1041) - aux773 + SATLiteral(906)))
906 3370 0
1041 3370 0
1041 906 3369 0
c (( - aux774 + SATLiteral(771) + SATLiteral(231))<=0)
-231 -3372 0
-771 -3372 0
-771 -231 -3373 0
c (0<=( - aux774 + SATLiteral(771) + SATLiteral(231)))
231 3373 0
771 3373 0
771 231 3372 0
c (( - aux775 + SATLiteral(501) + SATLiteral(1176))<=0)
-1176 -3375 0
-501 -3375 0
-501 -1176 -3376 0
c (0<=( - aux775 + SATLiteral(501) + SATLiteral(1176)))
1176 3376 0
501 3376 0
501 1176 3375 0
c ((aux775 - aux776 + SATLiteral(96))<=0)
3375 -3378 0
3376 -3379 0
-96 -3378 0
-96 3375 -3379 0
-96 3376 -3381 0
c (0<=(aux775 - aux776 + SATLiteral(96)))
-3376 3381 0
-3375 3379 0
96 3381 0
96 -3376 3379 0
96 -3375 3378 0
c ((aux772 + aux774 - aux777)<=0)
3372 -3383 0
3373 -3384 0
3366 -3383 0
3366 3372 -3384 0
3366 3373 -3386 0
3367 -3384 0
3367 3372 -3386 0
3367 3373 -3388 0
c (0<=(aux772 + aux774 - aux777))
-3373 3388 0
-3372 3386 0
-3367 3388 0
-3367 -3373 3386 0
-3367 -3372 3384 0
-3366 3386 0
-3366 -3373 3384 0
-3366 -3372 3383 0
c ((SATLiteral(368) - aux778 + SATLiteral(638))<=0)
-638 -3390 0
-368 -3390 0
-368 -638 -3391 0
c (0<=(SATLiteral(368) - aux778 + SATLiteral(638)))
638 3391 0
368 3391 0
368 638 3390 0
c ((SATLiteral(1043) - aux779 + SATLiteral(908))<=0)
-908 -3393 0
-1043 -3393 0
-1043 -908 -3394 0
c (0<=(SATLiteral(1043) - aux779 + SATLiteral(908)))
908 3394 0
1043 3394 0
1043 908 3393 0
c (( - aux780 + SATLiteral(773) + SATLiteral(233))<=0)
-233 -3396 0
-773 -3396 0
-773 -233 -3397 0
c (0<=( - aux780 + SATLiteral(773) + SATLiteral(233)))
233 3397 0
773 3397 0
773 233 3396 0
c (( - aux781 + SATLiteral(503) + SATLiteral(1178))<=0)
-1178 -3399 0
-503 -3399 0
-503 -1178 -3400 0
c (0<=( - aux781 + SATLiteral(503) + SATLiteral(1178)))
1178 3400 0
503 3400 0
503 1178 3399 0
c ((aux781 - aux782 + SATLiteral(98))<=0)
3399 -3402 0
3400 -3403 0
-98 -3402 0
-98 3399 -3403 0
-98 3400 -3405 0
c (0<=(aux781 - aux782 + SATLiteral(98)))
-3400 3405 0
-3399 3403 0
98 3405 0
98 -3400 3403 0
98 -3399 3402 0
c ((aux778 + aux780 - aux783)<=0)
3396 -3407 0
3397 -3408 0
3390 -3407 0
3390 3396 -3408 0
3390 3397 -3410 0
3391 -3408 0
3391 3396 -3410 0
3391 3397 -3412 0
c (0<=(aux778 + aux780 - aux783))
-3397 3412 0
-3396 3410 0
-3391 3412 0
-3391 -3397 3410 0
-3391 -3396 3408 0
-3390 3410 0
-3390 -3397 3408 0
-3390 -3396 3407 0
c ((SATLiteral(370) - aux784 + SATLiteral(640))<=0)
-640 -3414 0
-370 -3414 0
-370 -640 -3415 0
c (0<=(SATLiteral(370) - aux784 + SATLiteral(640)))
640 3415 0
370 3415 0
370 640 3414 0
c ((SATLiteral(1045) - aux785 + SATLiteral(910))<=0)
-910 -3417 0
-1045 -3417 0
-1045 -910 -3418 0
c (0<=(SATLiteral(1045) - aux785 + SATLiteral(910)))
910 3418 0
1045 3418 0
1045 910 3417 0
c (( - aux786 + SATLiteral(775) + SATLiteral(235))<=0)
-235 -3420 0
-775 -3420 0
-775 -235 -3421 0
c (0<=( - aux786 + SATLiteral(775) + SATLiteral(235)))
235 3421 0
775 3421 0
775 235 3420 0
c (( - aux787 + SATLiteral(505) + SATLiteral(1180))<=0)
-1180 -3423 0
-505 -3423 0
-505 -1180 -3424 0
c (0<=( - aux787 + SATLiteral(505) + SATLiteral(1180)))
1180 3424 0
505 3424 0
505 1180 3423 0
c ((aux787 - aux788 + SATLiteral(100))<=0)
3423 -3426 0
3424 -3427 0
-100 -3426 0
-100 3423 -3427 0
-100 3424 -3429 0
c (0<=(aux787 - aux788 + SATLiteral(100)))
-3424 3429 0
-3423 3427 0
100 3429 0
100 -3424 3427 0
100 -3423 3426 0
c ((aux784 + aux786 - aux789)<=0)
3420 -3431 0
3421 -3432 0
3414 -3431 0
3414 3420 -3432 0
3414 3421 -3434 0
3415 -3432 0
3415 3420 -3434 0
3415 3421 -3436 0
c (0<=(aux784 + aux786 - aux789))
-3421 3436 0
-3420 3434 0
-3415 3436 0
-3415 -3421 3434 0
-3415 -3420 3432 0
-3414 3434 0
-3414 -3421 3432 0
-3414 -3420 3431 0
c ((SATLiteral(372) - aux790 + SATLiteral(642))<=0)
-642 -3438 0
-372 -3438 0
-372 -642 -3439 0
c (0<=(SATLiteral(372) - aux790 + SATLiteral(642)))
642 3439 0
372 3439 0
372 642 3438 0
c ((SATLiteral(1047) - aux791 + SATLiteral(912))<=0)
-912 -3441 0
-1047 -3441 0
-1047 -912 -3442 0
c (0<=(SATLiteral(1047) - aux791 + SATLiteral(912)))
912 3442 0
1047 3442 0
1047 912 3441 0
c (( - aux792 + SATLiteral(777) + SATLiteral(237))<=0)
-237 -3444 0
-777 -3444 0
-777 -237 -3445 0
c (0<=( - aux792 + SATLiteral(777) + SATLiteral(237)))
237 3445 0
777 3445 0
777 237 3444 0
c (( - aux793 + SATLiteral(507) + SATLiteral(1182))<=0)
-1182 -3447 0
-507 -3447 0
-507 -1182 -3448 0
c (0<=( - aux793 + SATLiteral(507) + SATLiteral(1182)))
1182 3448 0
507 3448 0
507 1182 3447 0
c ((aux793 - aux794 + SATLiteral(102))<=0)
3447 -3450 0
3448 -3451 0
-102 -3450 0
-102 3447 -3451 0
-102 3448 -3453 0
c (0<=(aux793 - aux794 + SATLiteral(102)))
-3448 3453 0
-3447 3451 0
102 3453 0
102 -3448 3451 0
102 -3447 3450 0
c ((aux790 + aux792 - aux795)<=0)
3444 -3455 0
3445 -3456 0
3438 -3455 0
3438 3444 -3456 0
3438 3445 -3458 0
3439 -3456 0
3439 3444 -3458 0
3439 3445 -3460 0
c (0<=(aux790 + aux792 - aux795))
-3445 3460 0
-3444 3458 0
-3439 3460 0
-3439 -3445 3458 0
-3439 -3444 3456 0
-3438 3458 0
-3438 -3445 3456 0
-3438 -3444 3455 0
c ((SATLiteral(374) - aux796 + SATLiteral(644))<=0)
-644 -3462 0
-374 -3462 0
-374 -644 -3463 0
c (0<=(SATLiteral(374) - aux796 + SATLiteral(644)))
644 3463 0
374 3463 0
374 644 3462 0
c ((SATLiteral(1049) - aux797 + SATLiteral(914))<=0)
-914 -3465 0
-1049 -3465 0
-1049 -914 -3466 0
c (0<=(SATLiteral(1049) - aux797 + SATLiteral(914)))
914 3466 0
1049 3466 0
1049 914 3465 0
c (( - aux798 + SATLiteral(779) + SATLiteral(239))<=0)
-239 -3468 0
-779 -3468 0
-779 -239 -3469 0
c (0<=( - aux798 + SATLiteral(779) + SATLiteral(239)))
239 3469 0
779 3469 0
779 239 3468 0
c (( - aux799 + SATLiteral(509) + SATLiteral(1184))<=0)
-1184 -3471 0
-509 -3471 0
-509 -1184 -3472 0
c (0<=( - aux799 + SATLiteral(509) + SATLiteral(1184)))
1184 3472 0
509 3472 0
509 1184 3471 0
c ((aux799 - aux800 + SATLiteral(104))<=0)
3471 -3474 0
3472 -3475 0
-104 -3474 0
-104 3471 -3475 0
-104 3472 -3477 0
c (0<=(aux799 - aux800 + SATLiteral(104)))
-3472 3477 0
-3471 3475 0
104 3477 0
104 -3472 3475 0
104 -3471 3474 0
c ((aux796 + aux798 - aux801)<=0)
3468 -3479 0
3469 -3480 0
3462 -3479 0
3462 3468 -3480 0
3462 3469 -3482 0
3463 -3480 0
3463 3468 -3482 0
3463 3469 -3484 0
c (0<=(aux796 + aux798 - aux801))
-3469 3484 0
-3468 3482 0
-3463 3484 0
-3463 -3469 3482 0
-3463 -3468 3480 0
-3462 3482 0
-3462 -3469 3480 0
-3462 -3468 3479 0
c ((SATLiteral(376) - aux802 + SATLiteral(646))<=0)
-646 -3486 0
-376 -3486 0
-376 -646 -3487 0
c (0<=(SATLiteral(376) - aux802 + SATLiteral(646)))
646 3487 0
376 3487 0
376 646 3486 0
c ((SATLiteral(1051) - aux803 + SATLiteral(916))<=0)
-916 -3489 0
-1051 -3489 0
-1051 -916 -3490 0
c (0<=(SATLiteral(1051) - aux803 + SATLiteral(916)))
916 3490 0
1051 3490 0
1051 916 3489 0
c (( - aux804 + SATLiteral(781) + SATLiteral(241))<=0)
-241 -3492 0
-781 -3492 0
-781 -241 -3493 0
c (0<=( - aux804 + SATLiteral(781) + SATLiteral(241)))
241 3493 0
781 3493 0
781 241 3492 0
c (( - aux805 + SATLiteral(511) + SATLiteral(1186))<=0)
-1186 -3495 0
-511 -3495 0
-511 -1186 -3496 0
c (0<=( - aux805 + SATLiteral(511) + SATLiteral(1186)))
1186 3496 0
511 3496 0
511 1186 3495 0
c ((aux805 - aux806 + SATLiteral(106))<=0)
3495 -3498 0
3496 -3499 0
-106 -3498 0
-106 3495 -3499 0
-106 3496 -3501 0
c (0<=(aux805 - aux806 + SATLiteral(106)))
-3496 3501 0
-3495 3499 0
106 3501 0
106 -3496 3499 0
106 -3495 3498 0
c ((aux802 + aux804 - aux807)<=0)
3492 -3503 0
3493 -3504 0
3486 -3503 0
3486 3492 -3504 0
3486 3493 -3506 0
3487 -3504 0
3487 3492 -3506 0
3487 3493 -3508 0
c (0<=(aux802 + aux804 - aux807))
-3493 3508 0
-3492 3506 0
-3487 3508 0
-3487 -3493 3506 0
-3487 -3492 3504 0
-3486 3506 0
-3486 -3493 3504 0
-3486 -3492 3503 0
c ((SATLiteral(-375) - aux808 + SATLiteral(-645))<=0)
645 -3510 0
375 -3510 0
375 645 -3511 0
c (0<=(SATLiteral(-375) - aux808 + SATLiteral(-645)))
-645 3511 0
-375 3511 0
-375 -645 3510 0
c ((SATLiteral(-1050) - aux809 + SATLiteral(-915))<=0)
915 -3513 0
1050 -3513 0
1050 915 -3514 0
c (0<=(SATLiteral(-1050) - aux809 + SATLiteral(-915)))
-915 3514 0
-1050 3514 0
-1050 -915 3513 0
c (( - aux810 + SATLiteral(-780) + SATLiteral(-240))<=0)
240 -3516 0
780 -3516 0
780 240 -3517 0
c (0<=( - aux810 + SATLiteral(-780) + SATLiteral(-240)))
-240 3517 0
-780 3517 0
-780 -240 3516 0
c (( - aux811 + SATLiteral(-510) + SATLiteral(-1185))<=0)
1185 -3519 0
510 -3519 0
510 1185 -3520 0
c (0<=( - aux811 + SATLiteral(-510) + SATLiteral(-1185)))
-1185 3520 0
-510 3520 0
-510 -1185 3519 0
c ((aux811 - aux812 + SATLiteral(-105))<=0)
3519 -3522 0
3520 -3523 0
105 -3522 0
105 3519 -3523 0
105 3520 -3525 0
c (0<=(aux811 - aux812 + SATLiteral(-105)))
-3520 3525 0
-3519 3523 0
-105 3525 0
-105 -3520 3523 0
-105 -3519 3522 0
c ((aux808 + aux810 - aux813)<=0)
3516 -3527 0
3517 -3528 0
3510 -3527 0
3510 3516 -3528 0
3510 3517 -3530 0
3511 -3528 0
3511 3516 -3530 0
3511 3517 -3532 0
c (0<=(aux808 + aux810 - aux813))
-3517 3532 0
-3516 3530 0
-3511 3532 0
-3511 -3517 3530 0
-3511 -3516 3528 0
-3510 3530 0
-3510 -3517 3528 0
-3510 -3516 3527 0
c ((SATLiteral(377) - aux814 + SATLiteral(647))<=0)
-647 -3534 0
-377 -3534 0
-377 -647 -3535 0
c (0<=(SATLiteral(377) - aux814 + SATLiteral(647)))
647 3535 0
377 3535 0
377 647 3534 0
c ((SATLiteral(1052) - aux815 + SATLiteral(917))<=0)
-917 -3537 0
-1052 -3537 0
-1052 -917 -3538 0
c (0<=(SATLiteral(1052) - aux815 + SATLiteral(917)))
917 3538 0
1052 3538 0
1052 917 3537 0
c (( - aux816 + SATLiteral(782) + SATLiteral(242))<=0)
-242 -3540 0
-782 -3540 0
-782 -242 -3541 0
c (0<=( - aux816 + SATLiteral(782) + SATLiteral(242)))
242 3541 0
782 3541 0
782 242 3540 0
c (( - aux817 + SATLiteral(512) + SATLiteral(1187))<=0)
-1187 -3543 0
-512 -3543 0
-512 -1187 -3544 0
c (0<=( - aux817 + SATLiteral(512) + SATLiteral(1187)))
1187 3544 0
512 3544 0
512 1187 3543 0
c ((aux817 - aux818 + SATLiteral(107))<=0)
3543 -3546 0
3544 -3547 0
-107 -3546 0
-107 3543 -3547 0
-107 3544 -3549 0
c (0<=(aux817 - aux818 + SATLiteral(107)))
-3544 3549 0
-3543 3547 0
107 3549 0
107 -3544 3547 0
107 -3543 3546 0
c ((aux814 + aux816 - aux819)<=0)
3540 -3551 0
3541 -3552 0
3534 -3551 0
3534 3540 -3552 0
3534 3541 -3554 0
3535 -3552 0
3535 3540 -3554 0
3535 3541 -3556 0
c (0<=(aux814 + aux816 - aux819))
-3541 3556 0
-3540 3554 0
-3535 3556 0
-3535 -3541 3554 0
-3535 -3540 3552 0
-3534 3554 0
-3534 -3541 3552 0
-3534 -3540 3551 0
c ((SATLiteral(379) - aux820 + SATLiteral(649))<=0)
-649 -3558 0
-379 -3558 0
-379 -649 -3559 0
c (0<=(SATLiteral(379) - aux820 + SATLiteral(649)))
649 3559 0
379 3559 0
379 649 3558 0
c ((SATLiteral(1054) - aux821 + SATLiteral(919))<=0)
-919 -3561 0
-1054 -3561 0
-1054 -919 -3562 0
c (0<=(SATLiteral(1054) - aux821 + SATLiteral(919)))
919 3562 0
1054 3562 0
1054 919 3561 0
c (( - aux822 + SATLiteral(784) + SATLiteral(244))<=0)
-244 -3564 0
-784 -3564 0
-784 -244 -3565 0
c (0<=( - aux822 + SATLiteral(784) + SATLiteral(244)))
244 3565 0
784 3565 0
784 244 3564 0
c (( - aux823 + SATLiteral(514) + SATLiteral(1189))<=0)
-1189 -3567 0
-514 -3567 0
-514 -1189 -3568 0
c (0<=( - aux823 + SATLiteral(514) + SATLiteral(1189)))
1189 3568 0
514 3568 0
514 1189 3567 0
c ((aux823 - aux824 + SATLiteral(109))<=0)
3567 -3570 0
3568 -3571 0
-109 -3570 0
-109 3567 -3571 0
-109 3568 -3573 0
c (0<=(aux823 - aux824 + SATLiteral(109)))
-3568 3573 0
-3567 3571 0
109 3573 0
109 -3568 3571 0
109 -3567 3570 0
c ((aux820 + aux822 - aux825)<=0)
3564 -3575 0
3565 -3576 0
3558 -3575 0
3558 3564 -3576 0
3558 3565 -3578 0
3559 -3576 0
3559 3564 -3578 0
3559 3565 -3580 0
c (0<=(aux820 + aux822 - aux825))
-3565 3580 0
-3564 3578 0
-3559 3580 0
-3559 -3565 3578 0
-3559 -3564 3576 0
-3558 3578 0
-3558 -3565 3576 0
-3558 -3564 3575 0
c ((SATLiteral(381) - aux826 + SATLiteral(651))<=0)
-651 -3582 0
-381 -3582 0
-381 -651 -3583 0
c (0<=(SATLiteral(381) - aux826 + SATLiteral(651)))
651 3583 0
381 3583 0
381 651 3582 0
c ((SATLiteral(1056) - aux827 + SATLiteral(921))<=0)
-921 -3585 0
-1056 -3585 0
-1056 -921 -3586 0
c (0<=(SATLiteral(1056) - aux827 + SATLiteral(921)))
921 3586 0
1056 3586 0
1056 921 3585 0
c (( - aux828 + SATLiteral(786) + SATLiteral(246))<=0)
-246 -3588 0
-786 -3588 0
-786 -246 -3589 0
c (0<=( - aux828 + SATLiteral(786) + SATLiteral(246)))
246 3589 0
786 3589 0
786 246 3588 0
c (( - aux829 + SATLiteral(516) + SATLiteral(1191))<=0)
-1191 -3591 0
-516 -3591 0
-516 -1191 -3592 0
c (0<=( - aux829 + SATLiteral(516) + SATLiteral(1191)))
1191 3592 0
516 3592 0
516 1191 3591 0
c ((aux829 - aux830 + SATLiteral(111))<=0)
3591 -3594 0
3592 -3595 0
-111 -3594 0
-111 3591 -3595 0
-111 3592 -3597 0
c (0<=(aux829 - aux830 + SATLiteral(111)))
-3592 3597 0
-3591 3595 0
111 3597 0
111 -3592 3595 0
111 -3591 3594 0
c ((aux826 + aux828 - aux831)<=0)
3588 -3599 0
3589 -3600 0
3582 -3599 0
3582 3588 -3600 0
3582 3589 -3602 0
3583 -3600 0
3583 3588 -3602 0
3583 3589 -3604 0
c (0<=(aux826 + aux828 - aux831))
-3589 3604 0
-3588 3602 0
-3583 3604 0
-3583 -3589 3602 0
-3583 -3588 3600 0
-3582 3602 0
-3582 -3589 3600 0
-3582 -3588 3599 0
c ((SATLiteral(383) - aux832 + SATLiteral(653))<=0)
-653 -3606 0
-383 -3606 0
-383 -653 -3607 0
c (0<=(SATLiteral(383) - aux832 + SATLiteral(653)))
653 3607 0
383 3607 0
383 653 3606 0
c ((SATLiteral(1058) - aux833 + SATLiteral(923))<=0)
-923 -3609 0
-1058 -3609 0
-1058 -923 -3610 0
c (0<=(SATLiteral(1058) - aux833 + SATLiteral(923)))
923 3610 0
1058 3610 0
1058 923 3609 0
c (( - aux834 + SATLiteral(788) + SATLiteral(248))<=0)
-248 -3612 0
-788 -3612 0
-788 -248 -3613 0
c (0<=( - aux834 + SATLiteral(788) + SATLiteral(248)))
248 3613 0
788 3613 0
788 248 3612 0
c (( - aux835 + SATLiteral(518) + SATLiteral(1193))<=0)
-1193 -3615 0
-518 -3615 0
-518 -1193 -3616 0
c (0<=( - aux835 + SATLiteral(518) + SATLiteral(1193)))
1193 3616 0
518 3616 0
518 1193 3615 0
c ((aux835 - aux836 + SATLiteral(113))<=0)
3615 -3618 0
3616 -3619 0
-113 -3618 0
-113 3615 -3619 0
-113 3616 -3621 0
c (0<=(aux835 - aux836 + SATLiteral(113)))
-3616 3621 0
-3615 3619 0
113 3621 0
113 -3616 3619 0
113 -3615 3618 0
c ((aux832 + aux834 - aux837)<=0)
3612 -3623 0
3613 -3624 0
3606 -3623 0
3606 3612 -3624 0
3606 3613 -3626 0
3607 -3624 0
3607 3612 -3626 0
3607 3613 -3628 0
c (0<=(aux832 + aux834 - aux837))
-3613 3628 0
-3612 3626 0
-3607 3628 0
-3607 -3613 3626 0
-3607 -3612 3624 0
-3606 3626 0
-3606 -3613 3624 0
-3606 -3612 3623 0
c ((SATLiteral(385) - aux838 + SATLiteral(655))<=0)
-655 -3630 0
-385 -3630 0
-385 -655 -3631 0
c (0<=(SATLiteral(385) - aux838 + SATLiteral(655)))
655 3631 0
385 3631 0
385 655 3630 0
c ((SATLiteral(1060) - aux839 + SATLiteral(925))<=0)
-925 -3633 0
-1060 -3633 0
-1060 -925 -3634 0
c (0<=(SATLiteral(1060) - aux839 + SATLiteral(925)))
925 3634 0
1060 3634 0
1060 925 3633 0
c (( - aux840 + SATLiteral(790) + SATLiteral(250))<=0)
-250 -3636 0
-790 -3636 0
-790 -250 -3637 0
c (0<=( - aux840 + SATLiteral(790) + SATLiteral(250)))
250 3637 0
790 3637 0
790 250 3636 0
c (( - aux841 + SATLiteral(520) + SATLiteral(1195))<=0)
-1195 -3639 0
-520 -3639 0
-520 -1195 -3640 0
c (0<=( - aux841 + SATLiteral(520) + SATLiteral(1195)))
1195 3640 0
520 3640 0
520 1195 3639 0
c ((aux841 - aux842 + SATLiteral(115))<=0)
3639 -3642 0
3640 -3643 0
-115 -3642 0
-115 3639 -3643 0
-115 3640 -3645 0
c (0<=(aux841 - aux842 + SATLiteral(115)))
-3640 3645 0
-3639 3643 0
115 3645 0
115 -3640 3643 0
115 -3639 3642 0
c ((aux838 + aux840 - aux843)<=0)
3636 -3647 0
3637 -3648 0
3630 -3647 0
3630 3636 -3648 0
3630 3637 -3650 0
3631 -3648 0
3631 3636 -3650 0
3631 3637 -3652 0
c (0<=(aux838 + aux840 - aux843))
-3637 3652 0
-3636 3650 0
-3631 3652 0
-3631 -3637 3650 0
-3631 -3636 3648 0
-3630 3650 0
-3630 -3637 3648 0
-3630 -3636 3647 0
c ((SATLiteral(387) - aux844 + SATLiteral(657))<=0)
-657 -3654 0
-387 -3654 0
-387 -657 -3655 0
c (0<=(SATLiteral(387) - aux844 + SATLiteral(657)))
657 3655 0
387 3655 0
387 657 3654 0
c ((SATLiteral(1062) - aux845 + SATLiteral(927))<=0)
-927 -3657 0
-1062 -3657 0
-1062 -927 -3658 0
c (0<=(SATLiteral(1062) - aux845 + SATLiteral(927)))
927 3658 0
1062 3658 0
1062 927 3657 0
c (( - aux846 + SATLiteral(792) + SATLiteral(252))<=0)
-252 -3660 0
-792 -3660 0
-792 -252 -3661 0
c (0<=( - aux846 + SATLiteral(792) + SATLiteral(252)))
252 3661 0
792 3661 0
792 252 3660 0
c (( - aux847 + SATLiteral(522) + SATLiteral(1197))<=0)
-1197 -3663 0
-522 -3663 0
-522 -1197 -3664 0
c (0<=( - aux847 + SATLiteral(522) + SATLiteral(1197)))
1197 3664 0
522 3664 0
522 1197 3663 0
c ((aux847 - aux848 + SATLiteral(117))<=0)
3663 -3666 0
3664 -3667 0
-117 -3666 0
-117 3663 -3667 0
-117 3664 -3669 0
c (0<=(aux847 - aux848 + SATLiteral(117)))
-3664 3669 0
-3663 3667 0
117 3669 0
117 -3664 3667 0
117 -3663 3666 0
c ((aux844 + aux846 - aux849)<=0)
3660 -3671 0
3661 -3672 0
3654 -3671 0
3654 3660 -3672 0
3654 3661 -3674 0
3655 -3672 0
3655 3660 -3674 0
3655 3661 -3676 0
c (0<=(aux844 + aux846 - aux849))
-3661 3676 0
-3660 3674 0
-3655 3676 0
-3655 -3661 3674 0
-3655 -3660 3672 0
-3654 3674 0
-3654 -3661 3672 0
-3654 -3660 3671 0
c ((SATLiteral(389) - aux850 + SATLiteral(659))<=0)
-659 -3678 0
-389 -3678 0
-389 -659 -3679 0
c (0<=(SATLiteral(389) - aux850 + SATLiteral(659)))
659 3679 0
389 3679 0
389 659 3678 0
c ((SATLiteral(1064) - aux851 + SATLiteral(929))<=0)
-929 -3681 0
-1064 -3681 0
-1064 -929 -3682 0
c (0<=(SATLiteral(1064) - aux851 + SATLiteral(929)))
929 3682 0
1064 3682 0
1064 929 3681 0
c (( - aux852 + SATLiteral(794) + SATLiteral(254))<=0)
-254 -3684 0
-794 -3684 0
-794 -254 -3685 0
c (0<=( - aux852 + SATLiteral(794) + SATLiteral(254)))
254 3685 0
794 3685 0
794 254 3684 0
c (( - aux853 + SATLiteral(524) + SATLiteral(1199))<=0)
-1199 -3687 0
-524 -3687 0
-524 -1199 -3688 0
c (0<=( - aux853 + SATLiteral(524) + SATLiteral(1199)))
1199 3688 0
524 3688 0
524 1199 3687 0
c ((aux853 - aux854 + SATLiteral(119))<=0)
3687 -3690 0
3688 -3691 0
-119 -3690 0
-119 3687 -3691 0
-119 3688 -3693 0
c (0<=(aux853 - aux854 + SATLiteral(119)))
-3688 3693 0
-3687 3691 0
119 3693 0
119 -3688 3691 0
119 -3687 3690 0
c ((aux850 + aux852 - aux855)<=0)
3684 -3695 0
3685 -3696 0
3678 -3695 0
3678 3684 -3696 0
3678 3685 -3698 0
3679 -3696 0
3679 3684 -3698 0
3679 3685 -3700 0
c (0<=(aux850 + aux852 - aux855))
-3685 3700 0
-3684 3698 0
-3679 3700 0
-3679 -3685 3698 0
-3679 -3684 3696 0
-3678 3698 0
-3678 -3685 3696 0
-3678 -3684 3695 0
c ((SATLiteral(391) - aux856 + SATLiteral(661))<=0)
-661 -3702 0
-391 -3702 0
-391 -661 -3703 0
c (0<=(SATLiteral(391) - aux856 + SATLiteral(661)))
661 3703 0
391 3703 0
391 661 3702 0
c ((SATLiteral(1066) - aux857 + SATLiteral(931))<=0)
-931 -3705 0
-1066 -3705 0
-1066 -931 -3706 0
c (0<=(SATLiteral(1066) - aux857 + SATLiteral(931)))
931 3706 0
1066 3706 0
1066 931 3705 0
c (( - aux858 + SATLiteral(796) + SATLiteral(256))<=0)
-256 -3708 0
-796 -3708 0
-796 -256 -3709 0
c (0<=( - aux858 + SATLiteral(796) + SATLiteral(256)))
256 3709 0
796 3709 0
796 256 3708 0
c (( - aux859 + SATLiteral(526) + SATLiteral(1201))<=0)
-1201 -3711 0
-526 -3711 0
-526 -1201 -3712 0
c (0<=( - aux859 + SATLiteral(526) + SATLiteral(1201)))
1201 3712 0
526 3712 0
526 1201 3711 0
c ((aux859 - aux860 + SATLiteral(121))<=0)
3711 -3714 0
3712 -3715 0
-121 -3714 0
-121 3711 -3715 0
-121 3712 -3717 0
c (0<=(aux859 - aux860 + SATLiteral(121)))
-3712 3717 0
-3711 3715 0
121 3717 0
121 -3712 3715 0
121 -3711 3714 0
c ((aux856 + aux858 - aux861)<=0)
3708 -3719 0
3709 -3720 0
3702 -3719 0
3702 3708 -3720 0
3702 3709 -3722 0
3703 -3720 0
3703 3708 -3722 0
3703 3709 -3724 0
c (0<=(aux856 + aux858 - aux861))
-3709 3724 0
-3708 3722 0
-3703 3724 0
-3703 -3709 3722 0
-3703 -3708 3720 0
-3702 3722 0
-3702 -3709 3720 0
-3702 -3708 3719 0
c ((SATLiteral(-390) - aux862 + SATLiteral(-660))<=0)
660 -3726 0
390 -3726 0
390 660 -3727 0
c (0<=(SATLiteral(-390) - aux862 + SATLiteral(-660)))
-660 3727 0
-390 3727 0
-390 -660 3726 0
c ((SATLiteral(-1065) - aux863 + SATLiteral(-930))<=0)
930 -3729 0
1065 -3729 0
1065 930 -3730 0
c (0<=(SATLiteral(-1065) - aux863 + SATLiteral(-930)))
-930 3730 0
-1065 3730 0
-1065 -930 3729 0
c (( - aux864 + SATLiteral(-795) + SATLiteral(-255))<=0)
255 -3732 0
795 -3732 0
795 255 -3733 0
c (0<=( - aux864 + SATLiteral(-795) + SATLiteral(-255)))
-255 3733 0
-795 3733 0
-795 -255 3732 0
c (( - aux865 + SATLiteral(-525) + SATLiteral(-1200))<=0)
1200 -3735 0
525 -3735 0
525 1200 -3736 0
c (0<=( - aux865 + SATLiteral(-525) + SATLiteral(-1200)))
-1200 3736 0
-525 3736 0
-525 -1200 3735 0
c ((aux865 - aux866 + SATLiteral(-120))<=0)
3735 -3738 0
3736 -3739 0
120 -3738 0
120 3735 -3739 0
120 3736 -3741 0
c (0<=(aux865 - aux866 + SATLiteral(-120)))
-3736 3741 0
-3735 3739 0
-120 3741 0
-120 -3736 3739 0
-120 -3735 3738 0
c ((aux862 + aux864 - aux867)<=0)
3732 -3743 0
3733 -3744 0
3726 -3743 0
3726 3732 -3744 0
3726 3733 -3746 0
3727 -3744 0
3727 3732 -3746 0
3727 3733 -3748 0
c (0<=(aux862 + aux864 - aux867))
-3733 3748 0
-3732 3746 0
-3727 3748 0
-3727 -3733 3746 0
-3727 -3732 3744 0
-3726 3746 0
-3726 -3733 3744 0
-3726 -3732 3743 0
c ((SATLiteral(392) - aux868 + SATLiteral(662))<=0)
-662 -3750 0
-392 -3750 0
-392 -662 -3751 0
c (0<=(SATLiteral(392) - aux868 + SATLiteral(662)))
662 3751 0
392 3751 0
392 662 3750 0
c ((SATLiteral(1067) - aux869 + SATLiteral(932))<=0)
-932 -3753 0
-1067 -3753 0
-1067 -932 -3754 0
c (0<=(SATLiteral(1067) - aux869 + SATLiteral(932)))
932 3754 0
1067 3754 0
1067 932 3753 0
c (( - aux870 + SATLiteral(797) + SATLiteral(257))<=0)
-257 -3756 0
-797 -3756 0
-797 -257 -3757 0
c (0<=( - aux870 + SATLiteral(797) + SATLiteral(257)))
257 3757 0
797 3757 0
797 257 3756 0
c (( - aux871 + SATLiteral(527) + SATLiteral(1202))<=0)
-1202 -3759 0
-527 -3759 0
-527 -1202 -3760 0
c (0<=( - aux871 + SATLiteral(527) + SATLiteral(1202)))
1202 3760 0
527 3760 0
527 1202 3759 0
c ((aux871 - aux872 + SATLiteral(122))<=0)
3759 -3762 0
3760 -3763 0
-122 -3762 0
-122 3759 -3763 0
-122 3760 -3765 0
c (0<=(aux871 - aux872 + SATLiteral(122)))
-3760 3765 0
-3759 3763 0
122 3765 0
122 -3760 3763 0
122 -3759 3762 0
c ((aux868 + aux870 - aux873)<=0)
3756 -3767 0
3757 -3768 0
3750 -3767 0
3750 3756 -3768 0
3750 3757 -3770 0
3751 -3768 0
3751 3756 -3770 0
3751 3757 -3772 0
c (0<=(aux868 + aux870 - aux873))
-3757 3772 0
-3756 3770 0
-3751 3772 0
-3751 -3757 3770 0
-3751 -3756 3768 0
-3750 3770 0
-3750 -3757 3768 0
-3750 -3756 3767 0
c ((SATLiteral(394) - aux874 + SATLiteral(664))<=0)
-664 -3774 0
-394 -3774 0
-394 -664 -3775 0
c (0<=(SATLiteral(394) - aux874 + SATLiteral(664)))
664 3775 0
394 3775 0
394 664 3774 0
c ((SATLiteral(1069) - aux875 + SATLiteral(934))<=0)
-934 -3777 0
-1069 -3777 0
-1069 -934 -3778 0
c (0<=(SATLiteral(1069) - aux875 + SATLiteral(934)))
934 3778 0
1069 3778 0
1069 934 3777 0
c (( - aux876 + SATLiteral(799) + SATLiteral(259))<=0)
-259 -3780 0
-799 -3780 0
-799 -259 -3781 0
c (0<=( - aux876 + SATLiteral(799) + SATLiteral(259)))
259 3781 0
799 3781 0
799 259 3780 0
c (( - aux877 + SATLiteral(529) + SATLiteral(1204))<=0)
-1204 -3783 0
-529 -3783 0
-529 -1204 -3784 0
c (0<=( - aux877 + SATLiteral(529) + SATLiteral(1204)))
1204 3784 0
529 3784 0
529 1204 3783 0
c ((aux877 - aux878 + SATLiteral(124))<=0)
3783 -3786 0
3784 -3787 0
-124 -3786 0
-124 3783 -3787 0
-124 3784 -3789 0
c (0<=(aux877 - aux878 + SATLiteral(124)))
-3784 3789 0
-3783 3787 0
124 3789 0
124 -3784 3787 0
124 -3783 3786 0
c ((aux874 + aux876 - aux879)<=0)
3780 -3791 0
3781 -3792 0
3774 -3791 0
3774 3780 -3792 0
3774 3781 -3794 0
3775 -3792 0
3775 3780 -3794 0
3775 3781 -3796 0
c (0<=(aux874 + aux876 - aux879))
-3781 3796 0
-3780 3794 0
-3775 3796 0
-3775 -3781 3794 0
-3775 -3780 3792 0
-3774 3794 0
-3774 -3781 3792 0
-3774 -3780 3791 0
c ((SATLiteral(396) - aux880 + SATLiteral(666))<=0)
-666 -3798 0
-396 -3798 0
-396 -666 -3799 0
c (0<=(SATLiteral(396) - aux880 + SATLiteral(666)))
666 3799 0
396 3799 0
396 666 3798 0
c ((SATLiteral(1071) - aux881 + SATLiteral(936))<=0)
-936 -3801 0
-1071 -3801 0
-1071 -936 -3802 0
c (0<=(SATLiteral(1071) - aux881 + SATLiteral(936)))
936 3802 0
1071 3802 0
1071 936 3801 0
c (( - aux882 + SATLiteral(801) + SATLiteral(261))<=0)
-261 -3804 0
-801 -3804 0
-801 -261 -3805 0
c (0<=( - aux882 + SATLiteral(801) + SATLiteral(261)))
261 3805 0
801 3805 0
801 261 3804 0
c (( - aux883 + SATLiteral(531) + SATLiteral(1206))<=0)
-1206 -3807 0
-531 -3807 0
-531 -1206 -3808 0
c (0<=( - aux883 + SATLiteral(531) + SATLiteral(1206)))
1206 3808 0
531 3808 0
531 1206 3807 0
c ((aux883 - aux884 + SATLiteral(126))<=0)
3807 -3810 0
3808 -3811 0
-126 -3810 0
-126 3807 -3811 0
-126 3808 -3813 0
c (0<=(aux883 - aux884 + SATLiteral(126)))
-3808 3813 0
-3807 3811 0
126 3813 0
126 -3808 3811 0
126 -3807 3810 0
c ((aux880 + aux882 - aux885)<=0)
3804 -3815 0
3805 -3816 0
3798 -3815 0
3798 3804 -3816 0
3798 3805 -3818 0
3799 -3816 0
3799 3804 -3818 0
3799 3805 -3820 0
c (0<=(aux880 + aux882 - aux885))
-3805 3820 0
-3804 3818 0
-3799 3820 0
-3799 -3805 3818 0
-3799 -3804 3816 0
-3798 3818 0
-3798 -3805 3816 0
-3798 -3804 3815 0
c ((SATLiteral(398) - aux886 + SATLiteral(668))<=0)
-668 -3822 0
-398 -3822 0
-398 -668 -3823 0
c (0<=(SATLiteral(398) - aux886 + SATLiteral(668)))
668 3823 0
398 3823 0
398 668 3822 0
c ((SATLiteral(1073) - aux887 + SATLiteral(938))<=0)
-938 -3825 0
-1073 -3825 0
-1073 -938 -3826 0
c (0<=(SATLiteral(1073) - aux887 + SATLiteral(938)))
938 3826 0
1073 3826 0
1073 938 3825 0
c (( - aux888 + SATLiteral(803) + SATLiteral(263))<=0)
-263 -3828 0
-803 -3828 0
-803 -263 -3829 0
c (0<=( - aux888 + SATLiteral(803) + SATLiteral(263)))
263 3829 0
803 3829 0
803 263 3828 0
c (( - aux889 + SATLiteral(533) + SATLiteral(1208))<=0)
-1208 -3831 0
-533 -3831 0
-533 -1208 -3832 0
c (0<=( - aux889 + SATLiteral(533) + SATLiteral(1208)))
1208 3832 0
533 3832 0
533 1208 3831 0
c ((aux889 - aux890 + SATLiteral(128))<=0)
3831 -3834 0
3832 -3835 0
-128 -3834 0
-128 3831 -3835 0
-128 3832 -3837 0
c (0<=(aux889 - aux890 + SATLiteral(128)))
-3832 3837 0
-3831 3835 0
128 3837 0
128 -3832 3835 0
128 -3831 3834 0
c ((aux886 + aux888 - aux891)<=0)
3828 -3839 0
3829 -3840 0
3822 -3839 0
3822 3828 -3840 0
3822 3829 -3842 0
3823 -3840 0
3823 3828 -3842 0
3823 3829 -3844 0
c (0<=(aux886 + aux888 - aux891))
-3829 3844 0
-3828 3842 0
-3823 3844 0
-3823 -3829 3842 0
-3823 -3828 3840 0
-3822 3842 0
-3822 -3829 3840 0
-3822 -3828 3839 0
c ((SATLiteral(400) - aux892 + SATLiteral(670))<=0)
-670 -3846 0
-400 -3846 0
-400 -670 -3847 0
c (0<=(SATLiteral(400) - aux892 + SATLiteral(670)))
670 3847 0
400 3847 0
400 670 3846 0
c ((SATLiteral(1075) - aux893 + SATLiteral(940))<=0)
-940 -3849 0
-1075 -3849 0
-1075 -940 -3850 0
c (0<=(SATLiteral(1075) - aux893 + SATLiteral(940)))
940 3850 0
1075 3850 0
1075 940 3849 0
c (( - aux894 + SATLiteral(805) + SATLiteral(265))<=0)
-265 -3852 0
-805 -3852 0
-805 -265 -3853 0
c (0<=( - aux894 + SATLiteral(805) + SATLiteral(265)))
265 3853 0
805 3853 0
805 265 3852 0
c (( - aux895 + SATLiteral(535) + SATLiteral(1210))<=0)
-1210 -3855 0
-535 -3855 0
-535 -1210 -3856 0
c (0<=( - aux895 + SATLiteral(535) + SATLiteral(1210)))
1210 3856 0
535 3856 0
535 1210 3855 0
c ((aux895 - aux896 + SATLiteral(130))<=0)
3855 -3858 0
3856 -3859 0
-130 -3858 0
-130 3855 -3859 0
-130 3856 -3861 0
c (0<=(aux895 - aux896 + SATLiteral(130)))
-3856 3861 0
-3855 3859 0
130 3861 0
130 -3856 3859 0
130 -3855 3858 0
c ((aux892 + aux894 - aux897)<=0)
3852 -3863 0
3853 -3864 0
3846 -3863 0
3846 3852 -3864 0
3846 3853 -3866 0
3847 -3864 0
3847 3852 -3866 0
3847 3853 -3868 0
c (0<=(aux892 + aux894 - aux897))
-3853 3868 0
-3852 3866 0
-3847 3868 0
-3847 -3853 3866 0
-3847 -3852 3864 0
-3846 3866 0
-3846 -3853 3864 0
-3846 -3852 3863 0
c ((SATLiteral(402) - aux898 + SATLiteral(672))<=0)
-672 -3870 0
-402 -3870 0
-402 -672 -3871 0
c (0<=(SATLiteral(402) - aux898 + SATLiteral(672)))
672 3871 0
402 3871 0
402 672 3870 0
c ((SATLiteral(1077) - aux899 + SATLiteral(942))<=0)
-942 -3873 0
-1077 -3873 0
-1077 -942 -3874 0
c (0<=(SATLiteral(1077) - aux899 + SATLiteral(942)))
942 3874 0
1077 3874 0
1077 942 3873 0
c (( - aux900 + SATLiteral(807) + SATLiteral(267))<=0)
-267 -3876 0
-807 -3876 0
-807 -267 -3877 0
c (0<=( - aux900 + SATLiteral(807) + SATLiteral(267)))
267 3877 0
807 3877 0
807 267 3876 0
c (( - aux901 + SATLiteral(537) + SATLiteral(1212))<=0)
-1212 -3879 0
-537 -3879 0
-537 -1212 -3880 0
c (0<=( - aux901 + SATLiteral(537) + SATLiteral(1212)))
1212 3880 0
537 3880 0
537 1212 3879 0
c ((aux901 - aux902 + SATLiteral(132))<=0)
3879 -3882 0
3880 -3883 0
-132 -3882 0
-132 3879 -3883 0
-132 3880 -3885 0
c (0<=(aux901 - aux902 + SATLiteral(132)))
-3880 3885 0
-3879 3883 0
132 3885 0
132 -3880 3883 0
132 -3879 3882 0
c ((aux898 + aux900 - aux903)<=0)
3876 -3887 0
3877 -3888 0
3870 -3887 0
3870 3876 -3888 0
3870 3877 -3890 0
3871 -3888 0
3871 3876 -3890 0
3871 3877 -3892 0
c (0<=(aux898 + aux900 - aux903))
-3877 3892 0
-3876 3890 0
-3871 3892 0
-3871 -3877 3890 0
-3871 -3876 3888 0
-3870 3890 0
-3870 -3877 3888 0
-3870 -3876 3887 0
c ((SATLiteral(404) - aux904 + SATLiteral(674))<=0)
-674 -3894 0
-404 -3894 0
-404 -674 -3895 0
c (0<=(SATLiteral(404) - aux904 + SATLiteral(674)))
674 3895 0
404 3895 0
404 674 3894 0
c ((SATLiteral(1079) - aux905 + SATLiteral(944))<=0)
-944 -3897 0
-1079 -3897 0
-1079 -944 -3898 0
c (0<=(SATLiteral(1079) - aux905 + SATLiteral(944)))
944 3898 0
1079 3898 0
1079 944 3897 0
c (( - aux906 + SATLiteral(809) + SATLiteral(269))<=0)
-269 -3900 0
-809 -3900 0
-809 -269 -3901 0
c (0<=( - aux906 + SATLiteral(809) + SATLiteral(269)))
269 3901 0
809 3901 0
809 269 3900 0
c (( - aux907 + SATLiteral(539) + SATLiteral(1214))<=0)
-1214 -3903 0
-539 -3903 0
-539 -1214 -3904 0
c (0<=( - aux907 + SATLiteral(539) + SATLiteral(1214)))
1214 3904 0
539 3904 0
539 1214 3903 0
c ((aux907 - aux908 + SATLiteral(134))<=0)
3903 -3906 0
3904 -3907 0
-134 -3906 0
-134 3903 -3907 0
-134 3904 -3909 0
c (0<=(aux907 - aux908 + SATLiteral(134)))
-3904 3909 0
-3903 3907 0
134 3909 0
134 -3904 3907 0
134 -3903 3906 0
c ((aux904 + aux906 - aux909)<=0)
3900 -3911 0
3901 -3912 0
3894 -3911 0
3894 3900 -3912 0
3894 3901 -3914 0
3895 -3912 0
3895 3900 -3914 0
3895 3901 -3916 0
c (0<=(aux904 + aux906 - aux909))
-3901 3916 0
-3900 3914 0
-3895 3916 0
-3895 -3901 3914 0
-3895 -3900 3912 0
-3894 3914 0
-3894 -3901 3912 0
-3894 -3900 3911 0
c ((SATLiteral(406) - aux910 + SATLiteral(676))<=0)
-676 -3918 0
-406 -3918 0
-406 -676 -3919 0
c (0<=(SATLiteral(406) - aux910 + SATLiteral(676)))
676 3919 0
406 3919 0
406 676 3918 0
c ((SATLiteral(1081) - aux911 + SATLiteral(946))<=0)
-946 -3921 0
-1081 -3921 0
-1081 -946 -3922 0
c (0<=(SATLiteral(1081) - aux911 + SATLiteral(946)))
946 3922 0
1081 3922 0
1081 946 3921 0
c (( - aux912 + SATLiteral(811) + SATLiteral(271))<=0)
-271 -3924 0
-811 -3924 0
-811 -271 -3925 0
c (0<=( - aux912 + SATLiteral(811) + SATLiteral(271)))
271 3925 0
811 3925 0
811 271 3924 0
c (( - aux913 + SATLiteral(541) + SATLiteral(1216))<=0)
-1216 -3927 0
-541 -3927 0
-541 -1216 -3928 0
c (0<=( - aux913 + SATLiteral(541) + SATLiteral(1216)))
1216 3928 0
541 3928 0
541 1216 3927 0
c ((aux913 - aux914 + SATLiteral(136))<=0)
3927 -3930 0
3928 -3931 0
-136 -3930 0
-136 3927 -3931 0
-136 3928 -3933 0
c (0<=(aux913 - aux914 + SATLiteral(136)))
-3928 3933 0
-3927 3931 0
136 3933 0
136 -3928 3931 0
136 -3927 3930 0
c ((aux910 + aux912 - aux915)<=0)
3924 -3935 0
3925 -3936 0
3918 -3935 0
3918 3924 -3936 0
3918 3925 -3938 0
3919 -3936 0
3919 3924 -3938 0
3919 3925 -3940 0
c (0<=(aux910 + aux912 - aux915))
-3925 3940 0
-3924 3938 0
-3919 3940 0
-3919 -3925 3938 0
-3919 -3924 3936 0
-3918 3938 0
-3918 -3925 3936 0
-3918 -3924 3935 0
c ((SATLiteral(-405) - aux916 + SATLiteral(-675))<=0)
675 -3942 0
405 -3942 0
405 675 -3943 0
c (0<=(SATLiteral(-405) - aux916 + SATLiteral(-675)))
-675 3943 0
-405 3943 0
-405 -675 3942 0
c ((SATLiteral(-1080) - aux917 + SATLiteral(-945))<=0)
945 -3945 0
1080 -3945 0
1080 945 -3946 0
c (0<=(SATLiteral(-1080) - aux917 + SATLiteral(-945)))
-945 3946 0
-1080 3946 0
-1080 -945 3945 0
c (( - aux918 + SATLiteral(-810) + SATLiteral(-270))<=0)
270 -3948 0
810 -3948 0
810 270 -3949 0
c (0<=( - aux918 + SATLiteral(-810) + SATLiteral(-270)))
-270 3949 0
-810 3949 0
-810 -270 3948 0
c (( - aux919 + SATLiteral(-540) + SATLiteral(-1215))<=0)
1215 -3951 0
540 -3951 0
540 1215 -3952 0
c (0<=( - aux919 + SATLiteral(-540) + SATLiteral(-1215)))
-1215 3952 0
-540 3952 0
-540 -1215 3951 0
c ((aux919 - aux920 + SATLiteral(-135))<=0)
3951 -3954 0
3952 -3955 0
135 -3954 0
135 3951 -3955 0
135 3952 -3957 0
c (0<=(aux919 - aux920 + SATLiteral(-135)))
-3952 3957 0
-3951 3955 0
-135 3957 0
-135 -3952 3955 0
-135 -3951 3954 0
c ((aux916 + aux918 - aux921)<=0)
3948 -3959 0
3949 -3960 0
3942 -3959 0
3942 3948 -3960 0
3942 3949 -3962 0
3943 -3960 0
3943 3948 -3962 0
3943 3949 -3964 0
c (0<=(aux916 + aux918 - aux921))
-3949 3964 0
-3948 3962 0
-3943 3964 0
-3943 -3949 3962 0
-3943 -3948 3960 0
-3942 3962 0
-3942 -3949 3960 0
-3942 -3948 3959 0
c (( - aux922 + SATLiteral(2) + SATLiteral(122))<=0)
-122 -3966 0
-2 -3966 0
-2 -122 -3967 0
c (0<=( - aux922 + SATLiteral(2) + SATLiteral(122)))
122 3967 0
2 3967 0
2 122 3966 0
c (( - aux923 + SATLiteral(17) + SATLiteral(107))<=0)
-107 -3969 0
-17 -3969 0
-17 -107 -3970 0
c (0<=( - aux923 + SATLiteral(17) + SATLiteral(107)))
107 3970 0
17 3970 0
17 107 3969 0
c (( - aux924 + SATLiteral(47) + SATLiteral(92))<=0)
-92 -3972 0
-47 -3972 0
-47 -92 -3973 0
c (0<=( - aux924 + SATLiteral(47) + SATLiteral(92)))
92 3973 0
47 3973 0
47 92 3972 0
c (( - aux925 + SATLiteral(62) + SATLiteral(77))<=0)
-77 -3975 0
-62 -3975 0
-62 -77 -3976 0
c (0<=( - aux925 + SATLiteral(62) + SATLiteral(77)))
77 3976 0
62 3976 0
62 77 3975 0
c ((aux925 - aux926 + SATLiteral(32))<=0)
3975 -3978 0
3976 -3979 0
-32 -3978 0
-32 3975 -3979 0
-32 3976 -3981 0
c (0<=(aux925 - aux926 + SATLiteral(32)))
-3976 3981 0
-3975 3979 0
32 3981 0
32 -3976 3979 0
32 -3975 3978 0
c ((aux922 + aux924 - aux927)<=0)
3972 -3983 0
3973 -3984 0
3966 -3983 0
3966 3972 -3984 0
3966 3973 -3986 0
3967 -3984 0
3967 3972 -3986 0
3967 3973 -3988 0
c (0<=(aux922 + aux924 - aux927))
-3973 3988 0
-3972 3986 0
-3967 3988 0
-3967 -3973 3986 0
-3967 -3972 3984 0
-3966 3986 0
-3966 -3973 3984 0
-3966 -3972 3983 0
c (( - aux928 + SATLiteral(4) + SATLiteral(124))<=0)
-124 -3990 0
-4 -3990 0
-4 -124 -3991 0
c (0<=( - aux928 + SATLiteral(4) + SATLiteral(124)))
124 3991 0
4 3991 0
4 124 3990 0
c (( - aux929 + SATLiteral(19) + SATLiteral(109))<=0)
-109 -3993 0
-19 -3993 0
-19 -109 -3994 0
c (0<=( - aux929 + SATLiteral(19) + SATLiteral(109)))
109 3994 0
19 3994 0
19 109 3993 0
c (( - aux930 + SATLiteral(49) + SATLiteral(94))<=0)
-94 -3996 0
-49 -3996 0
-49 -94 -3997 0
c (0<=( - aux930 + SATLiteral(49) + SATLiteral(94)))
94 3997 0
49 3997 0
49 94 3996 0
c (( - aux931 + SATLiteral(64) + SATLiteral(79))<=0)
-79 -3999 0
-64 -3999 0
-64 -79 -4000 0
c (0<=( - aux931 + SATLiteral(64) + SATLiteral(79)))
79 4000 0
64 4000 0
64 79 3999 0
c ((aux931 - aux932 + SATLiteral(34))<=0)
3999 -4002 0
4000 -4003 0
-34 -4002 0
-34 3999 -4003 0
-34 4000 -4005 0
c (0<=(aux931 - aux932 + SATLiteral(34)))
-4000 4005 0
-3999 4003 0
34 4005 0
34 -4000 4003 0
34 -3999 4002 0
c ((aux928 + aux930 - aux933)<=0)
3996 -4007 0
3997 -4008 0
3990 -4007 0
3990 3996 -4008 0
3990 3997 -4010 0
3991 -4008 0
3991 3996 -4010 0
3991 3997 -4012 0
c (0<=(aux928 + aux930 - aux933))
-3997 4012 0
-3996 4010 0
-3991 4012 0
-3991 -3997 4010 0
-3991 -3996 4008 0
-3990 4010 0
-3990 -3997 4008 0
-3990 -3996 4007 0
c (( - aux934 + SATLiteral(6) + SATLiteral(126))<=0)
-126 -4014 0
-6 -4014 0
-6 -126 -4015 0
c (0<=( - aux934 + SATLiteral(6) + SATLiteral(126)))
126 4015 0
6 4015 0
6 126 4014 0
c (( - aux935 + SATLiteral(21) + SATLiteral(111))<=0)
-111 -4017 0
-21 -4017 0
-21 -111 -4018 0
c (0<=( - aux935 + SATLiteral(21) + SATLiteral(111)))
111 4018 0
21 4018 0
21 111 4017 0
c (( - aux936 + SATLiteral(51) + SATLiteral(96))<=0)
-96 -4020 0
-51 -4020 0
-51 -96 -4021 0
c (0<=( - aux936 + SATLiteral(51) + SATLiteral(96)))
96 4021 0
51 4021 0
51 96 4020 0
c (( - aux937 + SATLiteral(66) + SATLiteral(81))<=0)
-81 -4023 0
-66 -4023 0
-66 -81 -4024 0
c (0<=( - aux937 + SATLiteral(66) + SATLiteral(81)))
81 4024 0
66 4024 0
66 81 4023 0
c ((aux937 - aux938 + SATLiteral(36))<=0)
4023 -4026 0
4024 -4027 0
-36 -4026 0
-36 4023 -4027 0
-36 4024 -4029 0
c (0<=(aux937 - aux938 + SATLiteral(36)))
-4024 4029 0
-4023 4027 0
36 4029 0
36 -4024 4027 0
36 -4023 4026 0
c ((aux934 + aux936 - aux939)<=0)
4020 -4031 0
4021 -4032 0
4014 -4031 0
4014 4020 -4032 0
4014 4021 -4034 0
4015 -4032 0
4015 4020 -4034 0
4015 4021 -4036 0
c (0<=(aux934 + aux936 - aux939))
-4021 4036 0
-4020 4034 0
-4015 4036 0
-4015 -4021 4034 0
-4015 -4020 4032 0
-4014 4034 0
-4014 -4021 4032 0
-4014 -4020 4031 0
c (( - aux940 + SATLiteral(8) + SATLiteral(128))<=0)
-128 -4038 0
-8 -4038 0
-8 -128 -4039 0
c (0<=( - aux940 + SATLiteral(8) + SATLiteral(128)))
128 4039 0
8 4039 0
8 128 4038 0
c (( - aux941 + SATLiteral(23) + SATLiteral(113))<=0)
-113 -4041 0
-23 -4041 0
-23 -113 -4042 0
c (0<=( - aux941 + SATLiteral(23) + SATLiteral(113)))
113 4042 0
23 4042 0
23 113 4041 0
c (( - aux942 + SATLiteral(53) + SATLiteral(98))<=0)
-98 -4044 0
-53 -4044 0
-53 -98 -4045 0
c (0<=( - aux942 + SATLiteral(53) + SATLiteral(98)))
98 4045 0
53 4045 0
53 98 4044 0
c (( - aux943 + SATLiteral(68) + SATLiteral(83))<=0)
-83 -4047 0
-68 -4047 0
-68 -83 -4048 0
c (0<=( - aux943 + SATLiteral(68) + SATLiteral(83)))
83 4048 0
68 4048 0
68 83 4047 0
c ((aux943 - aux944 + SATLiteral(38))<=0)
4047 -4050 0
4048 -4051 0
-38 -4050 0
-38 4047 -4051 0
-38 4048 -4053 0
c (0<=(aux943 - aux944 + SATLiteral(38)))
-4048 4053 0
-4047 4051 0
38 4053 0
38 -4048 4051 0
38 -4047 4050 0
c ((aux940 + aux942 - aux945)<=0)
4044 -4055 0
4045 -4056 0
4038 -4055 0
4038 4044 -4056 0
4038 4045 -4058 0
4039 -4056 0
4039 4044 -4058 0
4039 4045 -4060 0
c (0<=(aux940 + aux942 - aux945))
-4045 4060 0
-4044 4058 0
-4039 4060 0
-4039 -4045 4058 0
-4039 -4044 4056 0
-4038 4058 0
-4038 -4045 4056 0
-4038 -4044 4055 0
c (( - aux946 + SATLiteral(10) + SATLiteral(130))<=0)
-130 -4062 0
-10 -4062 0
-10 -130 -4063 0
c (0<=( - aux946 + SATLiteral(10) + SATLiteral(130)))
130 4063 0
10 4063 0
10 130 4062 0
c (( - aux947 + SATLiteral(25) + SATLiteral(115))<=0)
-115 -4065 0
-25 -4065 0
-25 -115 -4066 0
c (0<=( - aux947 + SATLiteral(25) + SATLiteral(115)))
115 4066 0
25 4066 0
25 115 4065 0
c (( - aux948 + SATLiteral(55) + SATLiteral(100))<=0)
-100 -4068 0
-55 -4068 0
-55 -100 -4069 0
c (0<=( - aux948 + SATLiteral(55) + SATLiteral(100)))
100 4069 0
55 4069 0
55 100 4068 0
c (( - aux949 + SATLiteral(70) + SATLiteral(85))<=0)
-85 -4071 0
-70 -4071 0
-70 -85 -4072 0
c (0<=( - aux949 + SATLiteral(70) + SATLiteral(85)))
85 4072 0
70 4072 0
70 85 4071 0
c ((aux949 - aux950 + SATLiteral(40))<=0)
4071 -4074 0
4072 -4075 0
-40 -4074 0
-40 4071 -4075 0
-40 4072 -4077 0
c (0<=(aux949 - aux950 + SATLiteral(40)))
-4072 4077 0
-4071 4075 0
40 4077 0
40 -4072 4075 0
40 -4071 4074 0
c ((aux946 + aux948 - aux951)<=0)
4068 -4079 0
4069 -4080 0
4062 -4079 0
4062 4068 -4080 0
4062 4069 -4082 0
4063 -4080 0
4063 4068 -4082 0
4063 4069 -4084 0
c (0<=(aux946 + aux948 - aux951))
-4069 4084 0
-4068 4082 0
-4063 4084 0
-4063 -4069 4082 0
-4063 -4068 4080 0
-4062 4082 0
-4062 -4069 4080 0
-4062 -4068 4079 0
c (( - aux952 + SATLiteral(12) + SATLiteral(132))<=0)
-132 -4086 0
-12 -4086 0
-12 -132 -4087 0
c (0<=( - aux952 + SATLiteral(12) + SATLiteral(132)))
132 4087 0
12 4087 0
12 132 4086 0
c (( - aux953 + SATLiteral(27) + SATLiteral(117))<=0)
-117 -4089 0
-27 -4089 0
-27 -117 -4090 0
c (0<=( - aux953 + SATLiteral(27) + SATLiteral(117)))
117 4090 0
27 4090 0
27 117 4089 0
c (( - aux954 + SATLiteral(57) + SATLiteral(102))<=0)
-102 -4092 0
-57 -4092 0
-57 -102 -4093 0
c (0<=( - aux954 + SATLiteral(57) + SATLiteral(102)))
102 4093 0
57 4093 0
57 102 4092 0
c (( - aux955 + SATLiteral(72) + SATLiteral(87))<=0)
-87 -4095 0
-72 -4095 0
-72 -87 -4096 0
c (0<=( - aux955 + SATLiteral(72) + SATLiteral(87)))
87 4096 0
72 4096 0
72 87 4095 0
c ((aux955 - aux956 + SATLiteral(42))<=0)
4095 -4098 0
4096 -4099 0
-42 -4098 0
-42 4095 -4099 0
-42 4096 -4101 0
c (0<=(aux955 - aux956 + SATLiteral(42)))
-4096 4101 0
-4095 4099 0
42 4101 0
42 -4096 4099 0
42 -4095 4098 0
c ((aux952 + aux954 - aux957)<=0)
4092 -4103 0
4093 -4104 0
4086 -4103 0
4086 4092 -4104 0
4086 4093 -4106 0
4087 -4104 0
4087 4092 -4106 0
4087 4093 -4108 0
c (0<=(aux952 + aux954 - aux957))
-4093 4108 0
-4092 4106 0
-4087 4108 0
-4087 -4093 4106 0
-4087 -4092 4104 0
-4086 4106 0
-4086 -4093 4104 0
-4086 -4092 4103 0
c (( - aux958 + SATLiteral(14) + SATLiteral(134))<=0)
-134 -4110 0
-14 -4110 0
-14 -134 -4111 0
c (0<=( - aux958 + SATLiteral(14) + SATLiteral(134)))
134 4111 0
14 4111 0
14 134 4110 0
c (( - aux959 + SATLiteral(29) + SATLiteral(119))<=0)
-119 -4113 0
-29 -4113 0
-29 -119 -4114 0
c (0<=( - aux959 + SATLiteral(29) + SATLiteral(119)))
119 4114 0
29 4114 0
29 119 4113 0
c (( - aux960 + SATLiteral(59) + SATLiteral(104))<=0)
-104 -4116 0
-59 -4116 0
-59 -104 -4117 0
c (0<=( - aux960 + SATLiteral(59) + SATLiteral(104)))
104 4117 0
59 4117 0
59 104 4116 0
c (( - aux961 + SATLiteral(74) + SATLiteral(89))<=0)
-89 -4119 0
-74 -4119 0
-74 -89 -4120 0
c (0<=( - aux961 + SATLiteral(74) + SATLiteral(89)))
89 4120 0
74 4120 0
74 89 4119 0
c ((aux961 - aux962 + SATLiteral(44))<=0)
4119 -4122 0
4120 -4123 0
-44 -4122 0
-44 4119 -4123 0
-44 4120 -4125 0
c (0<=(aux961 - aux962 + SATLiteral(44)))
-4120 4125 0
-4119 4123 0
44 4125 0
44 -4120 4123 0
44 -4119 4122 0
c ((aux958 + aux960 - aux963)<=0)
4116 -4127 0
4117 -4128 0
4110 -4127 0
4110 4116 -4128 0
4110 4117 -4130 0
4111 -4128 0
4111 4116 -4130 0
4111 4117 -4132 0
c (0<=(aux958 + aux960 - aux963))
-4117 4132 0
-4116 4130 0
-4111 4132 0
-4111 -4117 4130 0
-4111 -4116 4128 0
-4110 4130 0
-4110 -4117 4128 0
-4110 -4116 4127 0
c (( - aux964 + SATLiteral(16) + SATLiteral(136))<=0)
-136 -4134 0
-16 -4134 0
-16 -136 -4135 0
c (0<=( - aux964 + SATLiteral(16) + SATLiteral(136)))
136 4135 0
16 4135 0
16 136 4134 0
c (( - aux965 + SATLiteral(31) + SATLiteral(121))<=0)
-121 -4137 0
-31 -4137 0
-31 -121 -4138 0
c (0<=( - aux965 + SATLiteral(31) + SATLiteral(121)))
121 4138 0
31 4138 0
31 121 4137 0
c (( - aux966 + SATLiteral(61) + SATLiteral(106))<=0)
-106 -4140 0
-61 -4140 0
-61 -106 -4141 0
c (0<=( - aux966 + SATLiteral(61) + SATLiteral(106)))
106 4141 0
61 4141 0
61 106 4140 0
c (( - aux967 + SATLiteral(76) + SATLiteral(91))<=0)
-91 -4143 0
-76 -4143 0
-76 -91 -4144 0
c (0<=( - aux967 + SATLiteral(76) + SATLiteral(91)))
91 4144 0
76 4144 0
76 91 4143 0
c ((aux967 - aux968 + SATLiteral(46))<=0)
4143 -4146 0
4144 -4147 0
-46 -4146 0
-46 4143 -4147 0
-46 4144 -4149 0
c (0<=(aux967 - aux968 + SATLiteral(46)))
-4144 4149 0
-4143 4147 0
46 4149 0
46 -4144 4147 0
46 -4143 4146 0
c ((aux964 + aux966 - aux969)<=0)
4140 -4151 0
4141 -4152 0
4134 -4151 0
4134 4140 -4152 0
4134 4141 -4154 0
4135 -4152 0
4135 4140 -4154 0
4135 4141 -4156 0
c (0<=(aux964 + aux966 - aux969))
-4141 4156 0
-4140 4154 0
-4135 4156 0
-4135 -4141 4154 0
-4135 -4140 4152 0
-4134 4154 0
-4134 -4141 4152 0
-4134 -4140 4151 0
c (( - aux970 + SATLiteral(-15) + SATLiteral(-135))<=0)
135 -4158 0
15 -4158 0
15 135 -4159 0
c (0<=( - aux970 + SATLiteral(-15) + SATLiteral(-135)))
-135 4159 0
-15 4159 0
-15 -135 4158 0
c (( - aux971 + SATLiteral(-30) + SATLiteral(-120))<=0)
120 -4161 0
30 -4161 0
30 120 -4162 0
c (0<=( - aux971 + SATLiteral(-30) + SATLiteral(-120)))
-120 4162 0
-30 4162 0
-30 -120 4161 0
c (( - aux972 + SATLiteral(-60) + SATLiteral(-105))<=0)
105 -4164 0
60 -4164 0
60 105 -4165 0
c (0<=( - aux972 + SATLiteral(-60) + SATLiteral(-105)))
-105 4165 0
-60 4165 0
-60 -105 4164 0
c (( - aux973 + SATLiteral(-75) + SATLiteral(-90))<=0)
90 -4167 0
75 -4167 0
75 90 -4168 0
c (0<=( - aux973 + SATLiteral(-75) + SATLiteral(-90)))
-90 4168 0
-75 4168 0
-75 -90 4167 0
c ((aux973 - aux974 + SATLiteral(-45))<=0)
4167 -4170 0
4168 -4171 0
45 -4170 0
45 4167 -4171 0
45 4168 -4173 0
c (0<=(aux973 - aux974 + SATLiteral(-45)))
-4168 4173 0
-4167 4171 0
-45 4173 0
-45 -4168 4171 0
-45 -4167 4170 0
c ((aux970 + aux972 - aux975)<=0)
4164 -4175 0
4165 -4176 0
4158 -4175 0
4158 4164 -4176 0
4158 4165 -4178 0
4159 -4176 0
4159 4164 -4178 0
4159 4165 -4180 0
c (0<=(aux970 + aux972 - aux975))
-4165 4180 0
-4164 4178 0
-4159 4180 0
-4159 -4165 4178 0
-4159 -4164 4176 0
-4158 4178 0
-4158 -4165 4176 0
-4158 -4164 4175 0
c (( - aux976 + SATLiteral(137) + SATLiteral(257))<=0)
-257 -4182 0
-137 -4182 0
-137 -257 -4183 0
c (0<=( - aux976 + SATLiteral(137) + SATLiteral(257)))
257 4183 0
137 4183 0
137 257 4182 0
c (( - aux977 + SATLiteral(152) + SATLiteral(242))<=0)
-242 -4185 0
-152 -4185 0
-152 -242 -4186 0
c (0<=( - aux977 + SATLiteral(152) + SATLiteral(242)))
242 4186 0
152 4186 0
152 242 4185 0
c (( - aux978 + SATLiteral(182) + SATLiteral(227))<=0)
-227 -4188 0
-182 -4188 0
-182 -227 -4189 0
c (0<=( - aux978 + SATLiteral(182) + SATLiteral(227)))
227 4189 0
182 4189 0
182 227 4188 0
c (( - aux979 + SATLiteral(197) + SATLiteral(212))<=0)
-212 -4191 0
-197 -4191 0
-197 -212 -4192 0
c (0<=( - aux979 + SATLiteral(197) + SATLiteral(212)))
212 4192 0
197 4192 0
197 212 4191 0
c ((aux979 - aux980 + SATLiteral(167))<=0)
4191 -4194 0
4192 -4195 0
-167 -4194 0
-167 4191 -4195 0
-167 4192 -4197 0
c (0<=(aux979 - aux980 + SATLiteral(167)))
-4192 4197 0
-4191 4195 0
167 4197 0
167 -4192 4195 0
167 -4191 4194 0
c ((aux976 + aux978 - aux981)<=0)
4188 -4199 0
4189 -4200 0
4182 -4199 0
4182 4188 -4200 0
4182 4189 -4202 0
4183 -4200 0
4183 4188 -4202 0
4183 4189 -4204 0
c (0<=(aux976 + aux978 - aux981))
-4189 4204 0
-4188 4202 0
-4183 4204 0
-4183 -4189 4202 0
-4183 -4188 4200 0
-4182 4202 0
-4182 -4189 4200 0
-4182 -4188 4199 0
c (( - aux982 + SATLiteral(139) + SATLiteral(259))<=0)
-259 -4206 0
-139 -4206 0
-139 -259 -4207 0
c (0<=( - aux982 + SATLiteral(139) + SATLiteral(259)))
259 4207 0
139 4207 0
139 259 4206 0
c (( - aux983 + SATLiteral(154) + SATLiteral(244))<=0)
-244 -4209 0
-154 -4209 0
-154 -244 -4210 0
c (0<=( - aux983 + SATLiteral(154) + SATLiteral(244)))
244 4210 0
154 4210 0
154 244 4209 0
c (( - aux984 + SATLiteral(184) + SATLiteral(229))<=0)
-229 -4212 0
-184 -4212 0
-184 -229 -4213 0
c (0<=( - aux984 + SATLiteral(184) + SATLiteral(229)))
229 4213 0
184 4213 0
184 229 4212 0
c (( - aux985 + SATLiteral(199) + SATLiteral(214))<=0)
-214 -4215 0
-199 -4215 0
-199 -214 -4216 0
c (0<=( - aux985 + SATLiteral(199) + SATLiteral(214)))
214 4216 0
199 4216 0
199 214 4215 0
c ((aux985 - aux986 + SATLiteral(169))<=0)
4215 -4218 0
4216 -4219 0
-169 -4218 0
-169 4215 -4219 0
-169 4216 -4221 0
c (0<=(aux985 - aux986 + SATLiteral(169)))
-4216 4221 0
-4215 4219 0
169 4221 0
169 -4216 4219 0
169 -4215 4218 0
c ((aux982 + aux984 - aux987)<=0)
4212 -4223 0
4213 -4224 0
4206 -4223 0
4206 4212 -4224 0
4206 4213 -4226 0
4207 -4224 0
4207 4212 -4226 0
4207 4213 -4228 0
c (0<=(aux982 + aux984 - aux987))
-4213 4228 0
-4212 4226 0
-4207 4228 0
-4207 -4213 4226 0
-4207 -4212 4224 0
-4206 4226 0
-4206 -4213 4224 0
-4206 -4212 4223 0
c (( - aux988 + SATLiteral(141) + SATLiteral(261))<=0)
-261 -4230 0
-141 -4230 0
-141 -261 -4231 0
c (0<=( - aux988 + SATLiteral(141) + SATLiteral(261)))
261 4231 0
141 4231 0
141 261 4230 0
c (( - aux989 + SATLiteral(156) + SATLiteral(246))<=0)
-246 -4233 0
-156 -4233 0
-156 -246 -4234 0
c (0<=( - aux989 + SATLiteral(156) + SATLiteral(246)))
246 4234 0
156 4234 0
156 246 4233 0
c (( - aux990 + SATLiteral(186) + SATLiteral(231))<=0)
-231 -4236 0
-186 -4236 0
-186 -231 -4237 0
c (0<=( - aux990 + SATLiteral(186) + SATLiteral(231)))
231 4237 0
186 4237 0
186 231 4236 0
c (( - aux991 + SATLiteral(201) + SATLiteral(216))<=0)
-216 -4239 0
-201 -4239 0
-201 -216 -4240 0
c (0<=( - aux991 + SATLiteral(201) + SATLiteral(216)))
216 4240 0
201 4240 0
201 216 4239 0
c ((aux991 - aux992 + SATLiteral(171))<=0)
4239 -4242 0
4240 -4243 0
-171 -4242 0
-171 4239 -4243 0
-171 4240 -4245 0
c (0<=(aux991 - aux992 + SATLiteral(171)))
-4240 4245 0
-4239 4243 0
171 4245 0
171 -4240 4243 0
171 -4239 4242 0
c ((aux988 + aux990 - aux993)<=0)
4236 -4247 0
4237 -4248 0
4230 -4247 0
4230 4236 -4248 0
4230 4237 -4250 0
4231 -4248 0
4231 4236 -4250 0
4231 4237 -4252 0
c (0<=(aux988 + aux990 - aux993))
-4237 4252 0
-4236 4250 0
-4231 4252 0
-4231 -4237 4250 0
-4231 -4236 4248 0
-4230 4250 0
-4230 -4237 4248 0
-4230 -4236 4247 0
c (( - aux994 + SATLiteral(143) + SATLiteral(263))<=0)
-263 -4254 0
-143 -4254 0
-143 -263 -4255 0
c (0<=( - aux994 + SATLiteral(143) + SATLiteral(263)))
263 4255 0
143 4255 0
143 263 4254 0
c (( - aux995 + SATLiteral(158) + SATLiteral(248))<=0)
-248 -4257 0
-158 -4257 0
-158 -248 -4258 0
c (0<=( - aux995 + SATLiteral(158) + SATLiteral(248)))
248 4258 0
158 4258 0
158 248 4257 0
c (( - aux996 + SATLiteral(188) + SATLiteral(233))<=0)
-233 -4260 0
-188 -4260 0
-188 -233 -4261 0
c (0<=( - aux996 + SATLiteral(188) + SATLiteral(233)))
233 4261 0
188 4261 0
188 233 4260 0
c (( - aux997 + SATLiteral(203) + SATLiteral(218))<=0)
-218 -4263 0
-203 -4263 0
-203 -218 -4264 0
c (0<=( - aux997 + SATLiteral(203) + SATLiteral(218)))
218 4264 0
203 4264 0
203 218 4263 0
c ((aux997 - aux998 + SATLiteral(173))<=0)
4263 -4266 0
4264 -4267 0
-173 -4266 0
-173 4263 -4267 0
-173 4264 -4269 0
c (0<=(aux997 - aux998 + SATLiteral(173)))
-4264 4269 0
-4263 4267 0
173 4269 0
173 -4264 4267 0
173 -4263 4266 0
c ((aux994 + aux996 - aux999)<=0)
4260 -4271 0
4261 -4272 0
4254 -4271 0
4254 4260 -4272 0
4254 4261 -4274 0
4255 -4272 0
4255 4260 -4274 0
4255 4261 -4276 0
c (0<=(aux994 + aux996 - aux999))
-4261 4276 0
-4260 4274 0
-4255 4276 0
-4255 -4261 4274 0
-4255 -4260 4272 0
-4254 4274 0
-4254 -4261 4272 0
-4254 -4260 4271 0
c (( - aux1000 + SATLiteral(145) + SATLiteral(265))<=0)
-265 -4278 0
-145 -4278 0
-145 -265 -4279 0
c (0<=( - aux1000 + SATLiteral(145) + SATLiteral(265)))
265 4279 0
145 4279 0
145 265 4278 0
c (( - aux1001 + SATLiteral(160) + SATLiteral(250))<=0)
-250 -4281 0
-160 -4281 0
-160 -250 -4282 0
c (0<=( - aux1001 + SATLiteral(160) + SATLiteral(250)))
250 4282 0
160 4282 0
160 250 4281 0
c (( - aux1002 + SATLiteral(190) + SATLiteral(235))<=0)
-235 -4284 0
-190 -4284 0
-190 -235 -4285 0
c (0<=( - aux1002 + SATLiteral(190) + SATLiteral(235)))
235 4285 0
190 4285 0
190 235 4284 0
c (( - aux1003 + SATLiteral(205) + SATLiteral(220))<=0)
-220 -4287 0
-205 -4287 0
-205 -220 -4288 0
c (0<=( - aux1003 + SATLiteral(205) + SATLiteral(220)))
220 4288 0
205 4288 0
205 220 4287 0
c ((aux1003 - aux1004 + SATLiteral(175))<=0)
4287 -4290 0
4288 -4291 0
-175 -4290 0
-175 4287 -4291 0
-175 4288 -4293 0
c (0<=(aux1003 - aux1004 + SATLiteral(175)))
-4288 4293 0
-4287 4291 0
175 4293 0
175 -4288 4291 0
175 -4287 4290 0
c ((aux1000 + aux1002 - aux1005)<=0)
4284 -4295 0
4285 -4296 0
4278 -4295 0
4278 4284 -4296 0
4278 4285 -4298 0
4279 -4296 0
4279 4284 -4298 0
4279 4285 -4300 0
c (0<=(aux1000 + aux1002 - aux1005))
-4285 4300 0
-4284 4298 0
-4279 4300 0
-4279 -4285 4298 0
-4279 -4284 4296 0
-4278 4298 0
-4278 -4285 4296 0
-4278 -4284 4295 0
c (( - aux1006 + SATLiteral(147) + SATLiteral(267))<=0)
-267 -4302 0
-147 -4302 0
-147 -267 -4303 0
c (0<=( - aux1006 + SATLiteral(147) + SATLiteral(267)))
267 4303 0
147 4303 0
147 267 4302 0
c (( - aux1007 + SATLiteral(162) + SATLiteral(252))<=0)
-252 -4305 0
-162 -4305 0
-162 -252 -4306 0
c (0<=( - aux1007 + SATLiteral(162) + SATLiteral(252)))
252 4306 0
162 4306 0
162 252 4305 0
c (( - aux1008 + SATLiteral(192) + SATLiteral(237))<=0)
-237 -4308 0
-192 -4308 0
-192 -237 -4309 0
c (0<=( - aux1008 + SATLiteral(192) + SATLiteral(237)))
237 4309 0
192 4309 0
192 237 4308 0
c (( - aux1009 + SATLiteral(207) + SATLiteral(222))<=0)
-222 -4311 0
-207 -4311 0
-207 -222 -4312 0
c (0<=( - aux1009 + SATLiteral(207) + SATLiteral(222)))
222 4312 0
207 4312 0
207 222 4311 0
c ((aux1009 - aux1010 + SATLiteral(177))<=0)
4311 -4314 0
4312 -4315 0
-177 -4314 0
-177 4311 -4315 0
-177 4312 -4317 0
c (0<=(aux1009 - aux1010 + SATLiteral(177)))
-4312 4317 0
-4311 4315 0
177 4317 0
177 -4312 4315 0
177 -4311 4314 0
c ((aux1006 + aux1008 - aux1011)<=0)
4308 -4319 0
4309 -4320 0
4302 -4319 0
4302 4308 -4320 0
4302 4309 -4322 0
4303 -4320 0
4303 4308 -4322 0
4303 4309 -4324 0
c (0<=(aux1006 + aux1008 - aux1011))
-4309 4324 0
-4308 4322 0
-4303 4324 0
-4303 -4309 4322 0
-4303 -4308 4320 0
-4302 4322 0
-4302 -4309 4320 0
-4302 -4308 4319 0
c (( - aux1012 + SATLiteral(149) + SATLiteral(269))<=0)
-269 -4326 0
-149 -4326 0
-149 -269 -4327 0
c (0<=( - aux1012 + SATLiteral(149) + SATLiteral(269)))
269 4327 0
149 4327 0
149 269 4326 0
c (( - aux1013 + SATLiteral(164) + SATLiteral(254))<=0)
-254 -4329 0
-164 -4329 0
-164 -254 -4330 0
c (0<=( - aux1013 + SATLiteral(164) + SATLiteral(254)))
254 4330 0
164 4330 0
164 254 4329 0
c (( - aux1014 + SATLiteral(194) + SATLiteral(239))<=0)
-239 -4332 0
-194 -4332 0
-194 -239 -4333 0
c (0<=( - aux1014 + SATLiteral(194) + SATLiteral(239)))
239 4333 0
194 4333 0
194 239 4332 0
c (( - aux1015 + SATLiteral(209) + SATLiteral(224))<=0)
-224 -4335 0
-209 -4335 0
-209 -224 -4336 0
c (0<=( - aux1015 + SATLiteral(209) + SATLiteral(224)))
224 4336 0
209 4336 0
209 224 4335 0
c ((aux1015 - aux1016 + SATLiteral(179))<=0)
4335 -4338 0
4336 -4339 0
-179 -4338 0
-179 4335 -4339 0
-179 4336 -4341 0
c (0<=(aux1015 - aux1016 + SATLiteral(179)))
-4336 4341 0
-4335 4339 0
179 4341 0
179 -4336 4339 0
179 -4335 4338 0
c ((aux1012 + aux1014 - aux1017)<=0)
4332 -4343 0
4333 -4344 0
4326 -4343 0
4326 4332 -4344 0
4326 4333 -4346 0
4327 -4344 0
4327 4332 -4346 0
4327 4333 -4348 0
c (0<=(aux1012 + aux1014 - aux1017))
-4333 4348 0
-4332 4346 0
-4327 4348 0
-4327 -4333 4346 0
-4327 -4332 4344 0
-4326 4346 0
-4326 -4333 4344 0
-4326 -4332 4343 0
c (( - aux1018 + SATLiteral(151) + SATLiteral(271))<=0)
-271 -4350 0
-151 -4350 0
-151 -271 -4351 0
c (0<=( - aux1018 + SATLiteral(151) + SATLiteral(271)))
271 4351 0
151 4351 0
151 271 4350 0
c (( - aux1019 + SATLiteral(166) + SATLiteral(256))<=0)
-256 -4353 0
-166 -4353 0
-166 -256 -4354 0
c (0<=( - aux1019 + SATLiteral(166) + SATLiteral(256)))
256 4354 0
166 4354 0
166 256 4353 0
c (( - aux1020 + SATLiteral(196) + SATLiteral(241))<=0)
-241 -4356 0
-196 -4356 0
-196 -241 -4357 0
c (0<=( - aux1020 + SATLiteral(196) + SATLiteral(241)))
241 4357 0
196 4357 0
196 241 4356 0
c (( - aux1021 + SATLiteral(211) + SATLiteral(226))<=0)
-226 -4359 0
-211 -4359 0
-211 -226 -4360 0
c (0<=( - aux1021 + SATLiteral(211) + SATLiteral(226)))
226 4360 0
211 4360 0
211 226 4359 0
c ((aux1021 - aux1022 + SATLiteral(181))<=0)
4359 -4362 0
4360 -4363 0
-181 -4362 0
-181 4359 -4363 0
-181 4360 -4365 0
c (0<=(aux1021 - aux1022 + SATLiteral(181)))
-4360 4365 0
-4359 4363 0
181 4365 0
181 -4360 4363 0
181 -4359 4362 0
c ((aux1018 + aux1020 - aux1023)<=0)
4356 -4367 0
4357 -4368 0
4350 -4367 0
4350 4356 -4368 0
4350 4357 -4370 0
4351 -4368 0
4351 4356 -4370 0
4351 4357 -4372 0
c (0<=(aux1018 + aux1020 - aux1023))
-4357 4372 0
-4356 4370 0
-4351 4372 0
-4351 -4357 4370 0
-4351 -4356 4368 0
-4350 4370 0
-4350 -4357 4368 0
-4350 -4356 4367 0
c (( - aux1024 + SATLiteral(-150) + SATLiteral(-270))<=0)
270 -4374 0
150 -4374 0
150 270 -4375 0
c (0<=( - aux1024 + SATLiteral(-150) + SATLiteral(-270)))
-270 4375 0
-150 4375 0
-150 -270 4374 0
c (( - aux1025 + SATLiteral(-165) + SATLiteral(-255))<=0)
255 -4377 0
165 -4377 0
165 255 -4378 0
c (0<=( - aux1025 + SATLiteral(-165) + SATLiteral(-255)))
-255 4378 0
-165 4378 0
-165 -255 4377 0
c (( - aux1026 + SATLiteral(-195) + SATLiteral(-240))<=0)
240 -4380 0
195 -4380 0
195 240 -4381 0
c (0<=( - aux1026 + SATLiteral(-195) + SATLiteral(-240)))
-240 4381 0
-195 4381 0
-195 -240 4380 0
c (( - aux1027 + SATLiteral(-210) + SATLiteral(-225))<=0)
225 -4383 0
210 -4383 0
210 225 -4384 0
c (0<=( - aux1027 + SATLiteral(-210) + SATLiteral(-225)))
-225 4384 0
-210 4384 0
-210 -225 4383 0
c ((aux1027 - aux1028 + SATLiteral(-180))<=0)
4383 -4386 0
4384 -4387 0
180 -4386 0
180 4383 -4387 0
180 4384 -4389 0
c (0<=(aux1027 - aux1028 + SATLiteral(-180)))
-4384 4389 0
-4383 4387 0
-180 4389 0
-180 -4384 4387 0
-180 -4383 4386 0
c ((aux1024 + aux1026 - aux1029)<=0)
4380 -4391 0
4381 -4392 0
4374 -4391 0
4374 4380 -4392 0
4374 4381 -4394 0
4375 -4392 0
4375 4380 -4394 0
4375 4381 -4396 0
c (0<=(aux1024 + aux1026 - aux1029))
-4381 4396 0
-4380 4394 0
-4375 4396 0
-4375 -4381 4394 0
-4375 -4380 4392 0
-4374 4394 0
-4374 -4381 4392 0
-4374 -4380 4391 0
c ((SATLiteral(272) + SATLiteral(392) - aux1030)<=0)
-392 -4398 0
-272 -4398 0
-272 -392 -4399 0
c (0<=(SATLiteral(272) + SATLiteral(392) - aux1030))
392 4399 0
272 4399 0
272 392 4398 0
c ((SATLiteral(287) + SATLiteral(377) - aux1031)<=0)
-377 -4401 0
-287 -4401 0
-287 -377 -4402 0
c (0<=(SATLiteral(287) + SATLiteral(377) - aux1031))
377 4402 0
287 4402 0
287 377 4401 0
c ((SATLiteral(317) + SATLiteral(362) - aux1032)<=0)
-362 -4404 0
-317 -4404 0
-317 -362 -4405 0
c (0<=(SATLiteral(317) + SATLiteral(362) - aux1032))
362 4405 0
317 4405 0
317 362 4404 0
c ((SATLiteral(332) + SATLiteral(347) - aux1033)<=0)
-347 -4407 0
-332 -4407 0
-332 -347 -4408 0
c (0<=(SATLiteral(332) + SATLiteral(347) - aux1033))
347 4408 0
332 4408 0
332 347 4407 0
c ((SATLiteral(302) + aux1033 - aux1034)<=0)
4407 -4410 0
4408 -4411 0
-302 -4410 0
-302 4407 -4411 0
-302 4408 -4413 0
c (0<=(SATLiteral(302) + aux1033 - aux1034))
-4408 4413 0
-4407 4411 0
302 4413 0
302 -4408 4411 0
302 -4407 4410 0
c ((aux1030 + aux1032 - aux1035)<=0)
4404 -4415 0
4405 -4416 0
4398 -4415 0
4398 4404 -4416 0
4398 4405 -4418 0
4399 -4416 0
4399 4404 -4418 0
4399 4405 -4420 0
c (0<=(aux1030 + aux1032 - aux1035))
-4405 4420 0
-4404 4418 0
-4399 4420 0
-4399 -4405 4418 0
-4399 -4404 4416 0
-4398 4418 0
-4398 -4405 4416 0
-4398 -4404 4415 0
c ((SATLiteral(274) + SATLiteral(394) - aux1036)<=0)
-394 -4422 0
-274 -4422 0
-274 -394 -4423 0
c (0<=(SATLiteral(274) + SATLiteral(394) - aux1036))
394 4423 0
274 4423 0
274 394 4422 0
c ((SATLiteral(289) + SATLiteral(379) - aux1037)<=0)
-379 -4425 0
-289 -4425 0
-289 -379 -4426 0
c (0<=(SATLiteral(289) + SATLiteral(379) - aux1037))
379 4426 0
289 4426 0
289 379 4425 0
c ((SATLiteral(319) + SATLiteral(364) - aux1038)<=0)
-364 -4428 0
-319 -4428 0
-319 -364 -4429 0
c (0<=(SATLiteral(319) + SATLiteral(364) - aux1038))
364 4429 0
319 4429 0
319 364 4428 0
c ((SATLiteral(334) + SATLiteral(349) - aux1039)<=0)
-349 -4431 0
-334 -4431 0
-334 -349 -4432 0
c (0<=(SATLiteral(334) + SATLiteral(349) - aux1039))
349 4432 0
334 4432 0
334 349 4431 0
c ((SATLiteral(304) + aux1039 - aux1040)<=0)
4431 -4434 0
4432 -4435 0
-304 -4434 0
-304 4431 -4435 0
-304 4432 -4437 0
c (0<=(SATLiteral(304) + aux1039 - aux1040))
-4432 4437 0
-4431 4435 0
304 4437 0
304 -4432 4435 0
304 -4431 4434 0
c ((aux1036 + aux1038 - aux1041)<=0)
4428 -4439 0
4429 -4440 0
4422 -4439 0
4422 4428 -4440 0
4422 4429 -4442 0
4423 -4440 0
4423 4428 -4442 0
4423 4429 -4444 0
c (0<=(aux1036 + aux1038 - aux1041))
-4429 4444 0
-4428 4442 0
-4423 4444 0
-4423 -4429 4442 0
-4423 -4428 4440 0
-4422 4442 0
-4422 -4429 4440 0
-4422 -4428 4439 0
c ((SATLiteral(276) + SATLiteral(396) - aux1042)<=0)
-396 -4446 0
-276 -4446 0
-276 -396 -4447 0
c (0<=(SATLiteral(276) + SATLiteral(396) - aux1042))
396 4447 0
276 4447 0
276 396 4446 0
c ((SATLiteral(291) + SATLiteral(381) - aux1043)<=0)
-381 -4449 0
-291 -4449 0
-291 -381 -4450 0
c (0<=(SATLiteral(291) + SATLiteral(381) - aux1043))
381 4450 0
291 4450 0
291 381 4449 0
c ((SATLiteral(321) + SATLiteral(366) - aux1044)<=0)
-366 -4452 0
-321 -4452 0
-321 -366 -4453 0
c (0<=(SATLiteral(321) + SATLiteral(366) - aux1044))
366 4453 0
321 4453 0
321 366 4452 0
c ((SATLiteral(336) + SATLiteral(351) - aux1045)<=0)
-351 -4455 0
-336 -4455 0
-336 -351 -4456 0
c (0<=(SATLiteral(336) + SATLiteral(351) - aux1045))
351 4456 0
336 4456 0
336 351 4455 0
c ((SATLiteral(306) + aux1045 - aux1046)<=0)
4455 -4458 0
4456 -4459 0
-306 -4458 0
-306 4455 -4459 0
-306 4456 -4461 0
c (0<=(SATLiteral(306) + aux1045 - aux1046))
-4456 4461 0
-4455 4459 0
306 4461 0
306 -4456 4459 0
306 -4455 4458 0
c ((aux1042 + aux1044 - aux1047)<=0)
4452 -4463 0
4453 -4464 0
4446 -4463 0
4446 4452 -4464 0
4446 4453 -4466 0
4447 -4464 0
4447 4452 -4466 0
4447 4453 -4468 0
c (0<=(aux1042 + aux1044 - aux1047))
-4453 4468 0
-4452 4466 0
-4447 4468 0
-4447 -4453 4466 0
-4447 -4452 4464 0
-4446 4466 0
-4446 -4453 4464 0
-4446 -4452 4463 0
c ((SATLiteral(278) + SATLiteral(398) - aux1048)<=0)
-398 -4470 0
-278 -4470 0
-278 -398 -4471 0
c (0<=(SATLiteral(278) + SATLiteral(398) - aux1048))
398 4471 0
278 4471 0
278 398 4470 0
c ((SATLiteral(293) + SATLiteral(383) - aux1049)<=0)
-383 -4473 0
-293 -4473 0
-293 -383 -4474 0
c (0<=(SATLiteral(293) + SATLiteral(383) - aux1049))
383 4474 0
293 4474 0
293 383 4473 0
c ((SATLiteral(323) + SATLiteral(368) - aux1050)<=0)
-368 -4476 0
-323 -4476 0
-323 -368 -4477 0
c (0<=(SATLiteral(323) + SATLiteral(368) - aux1050))
368 4477 0
323 4477 0
323 368 4476 0
c ((SATLiteral(338) + SATLiteral(353) - aux1051)<=0)
-353 -4479 0
-338 -4479 0
-338 -353 -4480 0
c (0<=(SATLiteral(338) + SATLiteral(353) - aux1051))
353 4480 0
338 4480 0
338 353 4479 0
c ((SATLiteral(308) + aux1051 - aux1052)<=0)
4479 -4482 0
4480 -4483 0
-308 -4482 0
-308 4479 -4483 0
-308 4480 -4485 0
c (0<=(SATLiteral(308) + aux1051 - aux1052))
-4480 4485 0
-4479 4483 0
308 4485 0
308 -4480 4483 0
308 -4479 4482 0
c ((aux1048 + aux1050 - aux1053)<=0)
4476 -4487 0
4477 -4488 0
4470 -4487 0
4470 4476 -4488 0
4470 4477 -4490 0
4471 -4488 0
4471 4476 -4490 0
4471 4477 -4492 0
c (0<=(aux1048 + aux1050 - aux1053))
-4477 4492 0
-4476 4490 0
-4471 4492 0
-4471 -4477 4490 0
-4471 -4476 4488 0
-4470 4490 0
-4470 -4477 4488 0
-4470 -4476 4487 0
c ((SATLiteral(280) + SATLiteral(400) - aux1054)<=0)
-400 -4494 0
-280 -4494 0
-280 -400 -4495 0
c (0<=(SATLiteral(280) + SATLiteral(400) - aux1054))
400 4495 0
280 4495 0
280 400 4494 0
c ((SATLiteral(295) + SATLiteral(385) - aux1055)<=0)
-385 -4497 0
-295 -4497 0
-295 -385 -4498 0
c (0<=(SATLiteral(295) + SATLiteral(385) - aux1055))
385 4498 0
295 4498 0
295 385 4497 0
c ((SATLiteral(325) + SATLiteral(370) - aux1056)<=0)
-370 -4500 0
-325 -4500 0
-325 -370 -4501 0
c (0<=(SATLiteral(325) + SATLiteral(370) - aux1056))
370 4501 0
325 4501 0
325 370 4500 0
c ((SATLiteral(340) + SATLiteral(355) - aux1057)<=0)
-355 -4503 0
-340 -4503 0
-340 -355 -4504 0
c (0<=(SATLiteral(340) + SATLiteral(355) - aux1057))
355 4504 0
340 4504 0
340 355 4503 0
c ((SATLiteral(310) + aux1057 - aux1058)<=0)
4503 -4506 0
4504 -4507 0
-310 -4506 0
-310 4503 -4507 0
-310 4504 -4509 0
c (0<=(SATLiteral(310) + aux1057 - aux1058))
-4504 4509 0
-4503 4507 0
310 4509 0
310 -4504 4507 0
310 -4503 4506 0
c ((aux1054 + aux1056 - aux1059)<=0)
4500 -4511 0
4501 -4512 0
4494 -4511 0
4494 4500 -4512 0
4494 4501 -4514 0
4495 -4512 0
4495 4500 -4514 0
4495 4501 -4516 0
c (0<=(aux1054 + aux1056 - aux1059))
-4501 4516 0
-4500 4514 0
-4495 4516 0
-4495 -4501 4514 0
-4495 -4500 4512 0
-4494 4514 0
-4494 -4501 4512 0
-4494 -4500 4511 0
c ((SATLiteral(282) + SATLiteral(402) - aux1060)<=0)
-402 -4518 0
-282 -4518 0
-282 -402 -4519 0
c (0<=(SATLiteral(282) + SATLiteral(402) - aux1060))
402 4519 0
282 4519 0
282 402 4518 0
c ((SATLiteral(297) + SATLiteral(387) - aux1061)<=0)
-387 -4521 0
-297 -4521 0
-297 -387 -4522 0
c (0<=(SATLiteral(297) + SATLiteral(387) - aux1061))
387 4522 0
297 4522 0
297 387 4521 0
c ((SATLiteral(327) + SATLiteral(372) - aux1062)<=0)
-372 -4524 0
-327 -4524 0
-327 -372 -4525 0
c (0<=(SATLiteral(327) + SATLiteral(372) - aux1062))
372 4525 0
327 4525 0
327 372 4524 0
c ((SATLiteral(342) + SATLiteral(357) - aux1063)<=0)
-357 -4527 0
-342 -4527 0
-342 -357 -4528 0
c (0<=(SATLiteral(342) + SATLiteral(357) - aux1063))
357 4528 0
342 4528 0
342 357 4527 0
c ((SATLiteral(312) + aux1063 - aux1064)<=0)
4527 -4530 0
4528 -4531 0
-312 -4530 0
-312 4527 -4531 0
-312 4528 -4533 0
c (0<=(SATLiteral(312) + aux1063 - aux1064))
-4528 4533 0
-4527 4531 0
312 4533 0
312 -4528 4531 0
312 -4527 4530 0
c ((aux1060 + aux1062 - aux1065)<=0)
4524 -4535 0
4525 -4536 0
4518 -4535 0
4518 4524 -4536 0
4518 4525 -4538 0
4519 -4536 0
4519 4524 -4538 0
4519 4525 -4540 0
c (0<=(aux1060 + aux1062 - aux1065))
-4525 4540 0
-4524 4538 0
-4519 4540 0
-4519 -4525 4538 0
-4519 -4524 4536 0
-4518 4538 0
-4518 -4525 4536 0
-4518 -4524 4535 0
c ((SATLiteral(284) + SATLiteral(404) - aux1066)<=0)
-404 -4542 0
-284 -4542 0
-284 -404 -4543 0
c (0<=(SATLiteral(284) + SATLiteral(404) - aux1066))
404 4543 0
284 4543 0
284 404 4542 0
c ((SATLiteral(299) + SATLiteral(389) - aux1067)<=0)
-389 -4545 0
-299 -4545 0
-299 -389 -4546 0
c (0<=(SATLiteral(299) + SATLiteral(389) - aux1067))
389 4546 0
299 4546 0
299 389 4545 0
c ((SATLiteral(329) + SATLiteral(374) - aux1068)<=0)
-374 -4548 0
-329 -4548 0
-329 -374 -4549 0
c (0<=(SATLiteral(329) + SATLiteral(374) - aux1068))
374 4549 0
329 4549 0
329 374 4548 0
c ((SATLiteral(344) + SATLiteral(359) - aux1069)<=0)
-359 -4551 0
-344 -4551 0
-344 -359 -4552 0
c (0<=(SATLiteral(344) + SATLiteral(359) - aux1069))
359 4552 0
344 4552 0
344 359 4551 0
c ((SATLiteral(314) + aux1069 - aux1070)<=0)
4551 -4554 0
4552 -4555 0
-314 -4554 0
-314 4551 -4555 0
-314 4552 -4557 0
c (0<=(SATLiteral(314) + aux1069 - aux1070))
-4552 4557 0
-4551 4555 0
314 4557 0
314 -4552 4555 0
314 -4551 4554 0
c ((aux1066 + aux1068 - aux1071)<=0)
4548 -4559 0
4549 -4560 0
4542 -4559 0
4542 4548 -4560 0
4542 4549 -4562 0
4543 -4560 0
4543 4548 -4562 0
4543 4549 -4564 0
c (0<=(aux1066 + aux1068 - aux1071))
-4549 4564 0
-4548 4562 0
-4543 4564 0
-4543 -4549 4562 0
-4543 -4548 4560 0
-4542 4562 0
-4542 -4549 4560 0
-4542 -4548 4559 0
c ((SATLiteral(286) + SATLiteral(406) - aux1072)<=0)
-406 -4566 0
-286 -4566 0
-286 -406 -4567 0
c (0<=(SATLiteral(286) + SATLiteral(406) - aux1072))
406 4567 0
286 4567 0
286 406 4566 0
c ((SATLiteral(301) + SATLiteral(391) - aux1073)<=0)
-391 -4569 0
-301 -4569 0
-301 -391 -4570 0
c (0<=(SATLiteral(301) + SATLiteral(391) - aux1073))
391 4570 0
301 4570 0
301 391 4569 0
c ((SATLiteral(331) + SATLiteral(376) - aux1074)<=0)
-376 -4572 0
-331 -4572 0
-331 -376 -4573 0
c (0<=(SATLiteral(331) + SATLiteral(376) - aux1074))
376 4573 0
331 4573 0
331 376 4572 0
c ((SATLiteral(346) + SATLiteral(361) - aux1075)<=0)
-361 -4575 0
-346 -4575 0
-346 -361 -4576 0
c (0<=(SATLiteral(346) + SATLiteral(361) - aux1075))
361 4576 0
346 4576 0
346 361 4575 0
c ((SATLiteral(316) + aux1075 - aux1076)<=0)
4575 -4578 0
4576 -4579 0
-316 -4578 0
-316 4575 -4579 0
-316 4576 -4581 0
c (0<=(SATLiteral(316) + aux1075 - aux1076))
-4576 4581 0
-4575 4579 0
316 4581 0
316 -4576 4579 0
316 -4575 4578 0
c ((aux1072 + aux1074 - aux1077)<=0)
4572 -4583 0
4573 -4584 0
4566 -4583 0
4566 4572 -4584 0
4566 4573 -4586 0
4567 -4584 0
4567 4572 -4586 0
4567 4573 -4588 0
c (0<=(aux1072 + aux1074 - aux1077))
-4573 4588 0
-4572 4586 0
-4567 4588 0
-4567 -4573 4586 0
-4567 -4572 4584 0
-4566 4586 0
-4566 -4573 4584 0
-4566 -4572 4583 0
c ((SATLiteral(-285) + SATLiteral(-405) - aux1078)<=0)
405 -4590 0
285 -4590 0
285 405 -4591 0
c (0<=(SATLiteral(-285) + SATLiteral(-405) - aux1078))
-405 4591 0
-285 4591 0
-285 -405 4590 0
c ((SATLiteral(-300) + SATLiteral(-390) - aux1079)<=0)
390 -4593 0
300 -4593 0
300 390 -4594 0
c (0<=(SATLiteral(-300) + SATLiteral(-390) - aux1079))
-390 4594 0
-300 4594 0
-300 -390 4593 0
c ((SATLiteral(-330) + SATLiteral(-375) - aux1080)<=0)
375 -4596 0
330 -4596 0
330 375 -4597 0
c (0<=(SATLiteral(-330) + SATLiteral(-375) - aux1080))
-375 4597 0
-330 4597 0
-330 -375 4596 0
c ((SATLiteral(-345) + SATLiteral(-360) - aux1081)<=0)
360 -4599 0
345 -4599 0
345 360 -4600 0
c (0<=(SATLiteral(-345) + SATLiteral(-360) - aux1081))
-360 4600 0
-345 4600 0
-345 -360 4599 0
c ((SATLiteral(-315) + aux1081 - aux1082)<=0)
4599 -4602 0
4600 -4603 0
315 -4602 0
315 4599 -4603 0
315 4600 -4605 0
c (0<=(SATLiteral(-315) + aux1081 - aux1082))
-4600 4605 0
-4599 4603 0
-315 4605 0
-315 -4600 4603 0
-315 -4599 4602 0
c ((aux1078 + aux1080 - aux1083)<=0)
4596 -4607 0
4597 -4608 0
4590 -4607 0
4590 4596 -4608 0
4590 4597 -4610 0
4591 -4608 0
4591 4596 -4610 0
4591 4597 -4612 0
c (0<=(aux1078 + aux1080 - aux1083))
-4597 4612 0
-4596 4610 0
-4591 4612 0
-4591 -4597 4610 0
-4591 -4596 4608 0
-4590 4610 0
-4590 -4597 4608 0
-4590 -4596 4607 0
c (( - aux1084 + SATLiteral(407) + SATLiteral(527))<=0)
-527 -4614 0
-407 -4614 0
-407 -527 -4615 0
c (0<=( - aux1084 + SATLiteral(407) + SATLiteral(527)))
527 4615 0
407 4615 0
407 527 4614 0
c (( - aux1085 + SATLiteral(422) + SATLiteral(512))<=0)
-512 -4617 0
-422 -4617 0
-422 -512 -4618 0
c (0<=( - aux1085 + SATLiteral(422) + SATLiteral(512)))
512 4618 0
422 4618 0
422 512 4617 0
c (( - aux1086 + SATLiteral(452) + SATLiteral(497))<=0)
-497 -4620 0
-452 -4620 0
-452 -497 -4621 0
c (0<=( - aux1086 + SATLiteral(452) + SATLiteral(497)))
497 4621 0
452 4621 0
452 497 4620 0
c (( - aux1087 + SATLiteral(467) + SATLiteral(482))<=0)
-482 -4623 0
-467 -4623 0
-467 -482 -4624 0
c (0<=( - aux1087 + SATLiteral(467) + SATLiteral(482)))
482 4624 0
467 4624 0
467 482 4623 0
c ((aux1087 - aux1088 + SATLiteral(437))<=0)
4623 -4626 0
4624 -4627 0
-437 -4626 0
-437 4623 -4627 0
-437 4624 -4629 0
c (0<=(aux1087 - aux1088 + SATLiteral(437)))
-4624 4629 0
-4623 4627 0
437 4629 0
437 -4624 4627 0
437 -4623 4626 0
c ((aux1084 + aux1086 - aux1089)<=0)
4620 -4631 0
4621 -4632 0
4614 -4631 0
4614 4620 -4632 0
4614 4621 -4634 0
4615 -4632 0
4615 4620 -4634 0
4615 4621 -4636 0
c (0<=(aux1084 + aux1086 - aux1089))
-4621 4636 0
-4620 4634 0
-4615 4636 0
-4615 -4621 4634 0
-4615 -4620 4632 0
-4614 4634 0
-4614 -4621 4632 0
-4614 -4620 4631 0
c (( - aux1090 + SATLiteral(409) + SATLiteral(529))<=0)
-529 -4638 0
-409 -4638 0
-409 -529 -4639 0
c (0<=( - aux1090 + SATLiteral(409) + SATLiteral(529)))
529 4639 0
409 4639 0
409 529 4638 0
c (( - aux1091 + SATLiteral(424) + SATLiteral(514))<=0)
-514 -4641 0
-424 -4641 0
-424 -514 -4642 0
c (0<=( - aux1091 + SATLiteral(424) + SATLiteral(514)))
514 4642 0
424 4642 0
424 514 4641 0
c (( - aux1092 + SATLiteral(454) + SATLiteral(499))<=0)
-499 -4644 0
-454 -4644 0
-454 -499 -4645 0
c (0<=( - aux1092 + SATLiteral(454) + SATLiteral(499)))
499 4645 0
454 4645 0
454 499 4644 0
c (( - aux1093 + SATLiteral(469) + SATLiteral(484))<=0)
-484 -4647 0
-469 -4647 0
-469 -484 -4648 0
c (0<=( - aux1093 + SATLiteral(469) + SATLiteral(484)))
484 4648 0
469 4648 0
469 484 4647 0
c ((aux1093 - aux1094 + SATLiteral(439))<=0)
4647 -4650 0
4648 -4651 0
-439 -4650 0
-439 4647 -4651 0
-439 4648 -4653 0
c (0<=(aux1093 - aux1094 + SATLiteral(439)))
-4648 4653 0
-4647 4651 0
439 4653 0
439 -4648 4651 0
439 -4647 4650 0
c ((aux1090 + aux1092 - aux1095)<=0)
4644 -4655 0
4645 -4656 0
4638 -4655 0
4638 4644 -4656 0
4638 4645 -4658 0
4639 -4656 0
4639 4644 -4658 0
4639 4645 -4660 0
c (0<=(aux1090 + aux1092 - aux1095))
-4645 4660 0
-4644 4658 0
-4639 4660 0
-4639 -4645 4658 0
-4639 -4644 4656 0
-4638 4658 0
-4638 -4645 4656 0
-4638 -4644 4655 0
c (( - aux1096 + SATLiteral(411) + SATLiteral(531))<=0)
-531 -4662 0
-411 -4662 0
-411 -531 -4663 0
c (0<=( - aux1096 + SATLiteral(411) + SATLiteral(531)))
531 4663 0
411 4663 0
411 531 4662 0
c (( - aux1097 + SATLiteral(426) + SATLiteral(516))<=0)
-516 -4665 0
-426 -4665 0
-426 -516 -4666 0
c (0<=( - aux1097 + SATLiteral(426) + SATLiteral(516)))
516 4666 0
426 4666 0
426 516 4665 0
c (( - aux1098 + SATLiteral(456) + SATLiteral(501))<=0)
-501 -4668 0
-456 -4668 0
-456 -501 -4669 0
c (0<=( - aux1098 + SATLiteral(456) + SATLiteral(501)))
501 4669 0
456 4669 0
456 501 4668 0
c (( - aux1099 + SATLiteral(471) + SATLiteral(486))<=0)
-486 -4671 0
-471 -4671 0
-471 -486 -4672 0
c (0<=( - aux1099 + SATLiteral(471) + SATLiteral(486)))
486 4672 0
471 4672 0
471 486 4671 0
c ((aux1099 - aux1100 + SATLiteral(441))<=0)
4671 -4674 0
4672 -4675 0
-441 -4674 0
-441 4671 -4675 0
-441 4672 -4677 0
c (0<=(aux1099 - aux1100 + SATLiteral(441)))
-4672 4677 0
-4671 4675 0
441 4677 0
441 -4672 4675 0
441 -4671 4674 0
c ((aux1096 + aux1098 - aux1101)<=0)
4668 -4679 0
4669 -4680 0
4662 -4679 0
4662 4668 -4680 0
4662 4669 -4682 0
4663 -4680 0
4663 4668 -4682 0
4663 4669 -4684 0
c (0<=(aux1096 + aux1098 - aux1101))
-4669 4684 0
-4668 4682 0
-4663 4684 0
-4663 -4669 4682 0
-4663 -4668 4680 0
-4662 4682 0
-4662 -4669 4680 0
-4662 -4668 4679 0
c (( - aux1102 + SATLiteral(413) + SATLiteral(533))<=0)
-533 -4686 0
-413 -4686 0
-413 -533 -4687 0
c (0<=( - aux1102 + SATLiteral(413) + SATLiteral(533)))
533 4687 0
413 4687 0
413 533 4686 0
c (( - aux1103 + SATLiteral(428) + SATLiteral(518))<=0)
-518 -4689 0
-428 -4689 0
-428 -518 -4690 0
c (0<=( - aux1103 + SATLiteral(428) + SATLiteral(518)))
518 4690 0
428 4690 0
428 518 4689 0
c (( - aux1104 + SATLiteral(458) + SATLiteral(503))<=0)
-503 -4692 0
-458 -4692 0
-458 -503 -4693 0
c (0<=( - aux1104 + SATLiteral(458) + SATLiteral(503)))
503 4693 0
458 4693 0
458 503 4692 0
c (( - aux1105 + SATLiteral(473) + SATLiteral(488))<=0)
-488 -4695 0
-473 -4695 0
-473 -488 -4696 0
c (0<=( - aux1105 + SATLiteral(473) + SATLiteral(488)))
488 4696 0
473 4696 0
473 488 4695 0
c ((aux1105 - aux1106 + SATLiteral(443))<=0)
4695 -4698 0
4696 -4699 0
-443 -4698 0
-443 4695 -4699 0
-443 4696 -4701 0
c (0<=(aux1105 - aux1106 + SATLiteral(443)))
-4696 4701 0
-4695 4699 0
443 4701 0
443 -4696 4699 0
443 -4695 4698 0
c ((aux1102 + aux1104 - aux1107)<=0)
4692 -4703 0
4693 -4704 0
4686 -4703 0
4686 4692 -4704 0
4686 4693 -4706 0
4687 -4704 0
4687 4692 -4706 0
4687 4693 -4708 0
c (0<=(aux1102 + aux1104 - aux1107))
-4693 4708 0
-4692 4706 0
-4687 4708 0
-4687 -4693 4706 0
-4687 -4692 4704 0
-4686 4706 0
-4686 -4693 4704 0
-4686 -4692 4703 0
c (( - aux1108 + SATLiteral(415) + SATLiteral(535))<=0)
-535 -4710 0
-415 -4710 0
-415 -535 -4711 0
c (0<=( - aux1108 + SATLiteral(415) + SATLiteral(535)))
535 4711 0
415 4711 0
415 535 4710 0
c (( - aux1109 + SATLiteral(430) + SATLiteral(520))<=0)
-520 -4713 0
-430 -4713 0
-430 -520 -4714 0
c (0<=( - aux1109 + SATLiteral(430) + SATLiteral(520)))
520 4714 0
430 4714 0
430 520 4713 0
c (( - aux1110 + SATLiteral(460) + SATLiteral(505))<=0)
-505 -4716 0
-460 -4716 0
-460 -505 -4717 0
c (0<=( - aux1110 + SATLiteral(460) + SATLiteral(505)))
505 4717 0
460 4717 0
460 505 4716 0
c (( - aux1111 + SATLiteral(475) + SATLiteral(490))<=0)
-490 -4719 0
-475 -4719 0
-475 -490 -4720 0
c (0<=( - aux1111 + SATLiteral(475) + SATLiteral(490)))
490 4720 0
475 4720 0
475 490 4719 0
c ((aux1111 - aux1112 + SATLiteral(445))<=0)
4719 -4722 0
4720 -4723 0
-445 -4722 0
-445 4719 -4723 0
-445 4720 -4725 0
c (0<=(aux1111 - aux1112 + SATLiteral(445)))
-4720 4725 0
-4719 4723 0
445 4725 0
445 -4720 4723 0
445 -4719 4722 0
c ((aux1108 + aux1110 - aux1113)<=0)
4716 -4727 0
4717 -4728 0
4710 -4727 0
4710 4716 -4728 0
4710 4717 -4730 0
4711 -4728 0
4711 4716 -4730 0
4711 4717 -4732 0
c (0<=(aux1108 + aux1110 - aux1113))
-4717 4732 0
-4716 4730 0
-4711 4732 0
-4711 -4717 4730 0
-4711 -4716 4728 0
-4710 4730 0
-4710 -4717 4728 0
-4710 -4716 4727 0
c (( - aux1114 + SATLiteral(417) + SATLiteral(537))<=0)
-537 -4734 0
-417 -4734 0
-417 -537 -4735 0
c (0<=( - aux1114 + SATLiteral(417) + SATLiteral(537)))
537 4735 0
417 4735 0
417 537 4734 0
c (( - aux1115 + SATLiteral(432) + SATLiteral(522))<=0)
-522 -4737 0
-432 -4737 0
-432 -522 -4738 0
c (0<=( - aux1115 + SATLiteral(432) + SATLiteral(522)))
522 4738 0
432 4738 0
432 522 4737 0
c (( - aux1116 + SATLiteral(462) + SATLiteral(507))<=0)
-507 -4740 0
-462 -4740 0
-462 -507 -4741 0
c (0<=( - aux1116 + SATLiteral(462) + SATLiteral(507)))
507 4741 0
462 4741 0
462 507 4740 0
c (( - aux1117 + SATLiteral(477) + SATLiteral(492))<=0)
-492 -4743 0
-477 -4743 0
-477 -492 -4744 0
c (0<=( - aux1117 + SATLiteral(477) + SATLiteral(492)))
492 4744 0
477 4744 0
477 492 4743 0
c ((aux1117 - aux1118 + SATLiteral(447))<=0)
4743 -4746 0
4744 -4747 0
-447 -4746 0
-447 4743 -4747 0
-447 4744 -4749 0
c (0<=(aux1117 - aux1118 + SATLiteral(447)))
-4744 4749 0
-4743 4747 0
447 4749 0
447 -4744 4747 0
447 -4743 4746 0
c ((aux1114 + aux1116 - aux1119)<=0)
4740 -4751 0
4741 -4752 0
4734 -4751 0
4734 4740 -4752 0
4734 4741 -4754 0
4735 -4752 0
4735 4740 -4754 0
4735 4741 -4756 0
c (0<=(aux1114 + aux1116 - aux1119))
-4741 4756 0
-4740 4754 0
-4735 4756 0
-4735 -4741 4754 0
-4735 -4740 4752 0
-4734 4754 0
-4734 -4741 4752 0
-4734 -4740 4751 0
c (( - aux1120 + SATLiteral(419) + SATLiteral(539))<=0)
-539 -4758 0
-419 -4758 0
-419 -539 -4759 0
c (0<=( - aux1120 + SATLiteral(419) + SATLiteral(539)))
539 4759 0
419 4759 0
419 539 4758 0
c (( - aux1121 + SATLiteral(434) + SATLiteral(524))<=0)
-524 -4761 0
-434 -4761 0
-434 -524 -4762 0
c (0<=( - aux1121 + SATLiteral(434) + SATLiteral(524)))
524 4762 0
434 4762 0
434 524 4761 0
c (( - aux1122 + SATLiteral(464) + SATLiteral(509))<=0)
-509 -4764 0
-464 -4764 0
-464 -509 -4765 0
c (0<=( - aux1122 + SATLiteral(464) + SATLiteral(509)))
509 4765 0
464 4765 0
464 509 4764 0
c (( - aux1123 + SATLiteral(479) + SATLiteral(494))<=0)
-494 -4767 0
-479 -4767 0
-479 -494 -4768 0
c (0<=( - aux1123 + SATLiteral(479) + SATLiteral(494)))
494 4768 0
479 4768 0
479 494 4767 0
c ((aux1123 - aux1124 + SATLiteral(449))<=0)
4767 -4770 0
4768 -4771 0
-449 -4770 0
-449 4767 -4771 0
-449 4768 -4773 0
c (0<=(aux1123 - aux1124 + SATLiteral(449)))
-4768 4773 0
-4767 4771 0
449 4773 0
449 -4768 4771 0
449 -4767 4770 0
c ((aux1120 + aux1122 - aux1125)<=0)
4764 -4775 0
4765 -4776 0
4758 -4775 0
4758 4764 -4776 0
4758 4765 -4778 0
4759 -4776 0
4759 4764 -4778 0
4759 4765 -4780 0
c (0<=(aux1120 + aux1122 - aux1125))
-4765 4780 0
-4764 4778 0
-4759 4780 0
-4759 -4765 4778 0
-4759 -4764 4776 0
-4758 4778 0
-4758 -4765 4776 0
-4758 -4764 4775 0
c (( - aux1126 + SATLiteral(421) + SATLiteral(541))<=0)
-541 -4782 0
-421 -4782 0
-421 -541 -4783 0
c (0<=( - aux1126 + SATLiteral(421) + SATLiteral(541)))
541 4783 0
421 4783 0
421 541 4782 0
c (( - aux1127 + SATLiteral(436) + SATLiteral(526))<=0)
-526 -4785 0
-436 -4785 0
-436 -526 -4786 0
c (0<=( - aux1127 + SATLiteral(436) + SATLiteral(526)))
526 4786 0
436 4786 0
436 526 4785 0
c (( - aux1128 + SATLiteral(466) + SATLiteral(511))<=0)
-511 -4788 0
-466 -4788 0
-466 -511 -4789 0
c (0<=( - aux1128 + SATLiteral(466) + SATLiteral(511)))
511 4789 0
466 4789 0
466 511 4788 0
c (( - aux1129 + SATLiteral(481) + SATLiteral(496))<=0)
-496 -4791 0
-481 -4791 0
-481 -496 -4792 0
c (0<=( - aux1129 + SATLiteral(481) + SATLiteral(496)))
496 4792 0
481 4792 0
481 496 4791 0
c ((aux1129 - aux1130 + SATLiteral(451))<=0)
4791 -4794 0
4792 -4795 0
-451 -4794 0
-451 4791 -4795 0
-451 4792 -4797 0
c (0<=(aux1129 - aux1130 + SATLiteral(451)))
-4792 4797 0
-4791 4795 0
451 4797 0
451 -4792 4795 0
451 -4791 4794 0
c ((aux1126 + aux1128 - aux1131)<=0)
4788 -4799 0
4789 -4800 0
4782 -4799 0
4782 4788 -4800 0
4782 4789 -4802 0
4783 -4800 0
4783 4788 -4802 0
4783 4789 -4804 0
c (0<=(aux1126 + aux1128 - aux1131))
-4789 4804 0
-4788 4802 0
-4783 4804 0
-4783 -4789 4802 0
-4783 -4788 4800 0
-4782 4802 0
-4782 -4789 4800 0
-4782 -4788 4799 0
c (( - aux1132 + SATLiteral(-420) + SATLiteral(-540))<=0)
540 -4806 0
420 -4806 0
420 540 -4807 0
c (0<=( - aux1132 + SATLiteral(-420) + SATLiteral(-540)))
-540 4807 0
-420 4807 0
-420 -540 4806 0
c (( - aux1133 + SATLiteral(-435) + SATLiteral(-525))<=0)
525 -4809 0
435 -4809 0
435 525 -4810 0
c (0<=( - aux1133 + SATLiteral(-435) + SATLiteral(-525)))
-525 4810 0
-435 4810 0
-435 -525 4809 0
c (( - aux1134 + SATLiteral(-465) + SATLiteral(-510))<=0)
510 -4812 0
465 -4812 0
465 510 -4813 0
c (0<=( - aux1134 + SATLiteral(-465) + SATLiteral(-510)))
-510 4813 0
-465 4813 0
-465 -510 4812 0
c (( - aux1135 + SATLiteral(-480) + SATLiteral(-495))<=0)
495 -4815 0
480 -4815 0
480 495 -4816 0
c (0<=( - aux1135 + SATLiteral(-480) + SATLiteral(-495)))
-495 4816 0
-480 4816 0
-480 -495 4815 0
c ((aux1135 - aux1136 + SATLiteral(-450))<=0)
4815 -4818 0
4816 -4819 0
450 -4818 0
450 4815 -4819 0
450 4816 -4821 0
c (0<=(aux1135 - aux1136 + SATLiteral(-450)))
-4816 4821 0
-4815 4819 0
-450 4821 0
-450 -4816 4819 0
-450 -4815 4818 0
c ((aux1132 + aux1134 - aux1137)<=0)
4812 -4823 0
4813 -4824 0
4806 -4823 0
4806 4812 -4824 0
4806 4813 -4826 0
4807 -4824 0
4807 4812 -4826 0
4807 4813 -4828 0
c (0<=(aux1132 + aux1134 - aux1137))
-4813 4828 0
-4812 4826 0
-4807 4828 0
-4807 -4813 4826 0
-4807 -4812 4824 0
-4806 4826 0
-4806 -4813 4824 0
-4806 -4812 4823 0
c (( - aux1138 + SATLiteral(542) + SATLiteral(662))<=0)
-662 -4830 0
-542 -4830 0
-542 -662 -4831 0
c (0<=( - aux1138 + SATLiteral(542) + SATLiteral(662)))
662 4831 0
542 4831 0
542 662 4830 0
c (( - aux1139 + SATLiteral(557) + SATLiteral(647))<=0)
-647 -4833 0
-557 -4833 0
-557 -647 -4834 0
c (0<=( - aux1139 + SATLiteral(557) + SATLiteral(647)))
647 4834 0
557 4834 0
557 647 4833 0
c (( - aux1140 + SATLiteral(587) + SATLiteral(632))<=0)
-632 -4836 0
-587 -4836 0
-587 -632 -4837 0
c (0<=( - aux1140 + SATLiteral(587) + SATLiteral(632)))
632 4837 0
587 4837 0
587 632 4836 0
c (( - aux1141 + SATLiteral(602) + SATLiteral(617))<=0)
-617 -4839 0
-602 -4839 0
-602 -617 -4840 0
c (0<=( - aux1141 + SATLiteral(602) + SATLiteral(617)))
617 4840 0
602 4840 0
602 617 4839 0
c ((aux1141 - aux1142 + SATLiteral(572))<=0)
4839 -4842 0
4840 -4843 0
-572 -4842 0
-572 4839 -4843 0
-572 4840 -4845 0
c (0<=(aux1141 - aux1142 + SATLiteral(572)))
-4840 4845 0
-4839 4843 0
572 4845 0
572 -4840 4843 0
572 -4839 4842 0
c ((aux1138 + aux1140 - aux1143)<=0)
4836 -4847 0
4837 -4848 0
4830 -4847 0
4830 4836 -4848 0
4830 4837 -4850 0
4831 -4848 0
4831 4836 -4850 0
4831 4837 -4852 0
c (0<=(aux1138 + aux1140 - aux1143))
-4837 4852 0
-4836 4850 0
-4831 4852 0
-4831 -4837 4850 0
-4831 -4836 4848 0
-4830 4850 0
-4830 -4837 4848 0
-4830 -4836 4847 0
c (( - aux1144 + SATLiteral(544) + SATLiteral(664))<=0)
-664 -4854 0
-544 -4854 0
-544 -664 -4855 0
c (0<=( - aux1144 + SATLiteral(544) + SATLiteral(664)))
664 4855 0
544 4855 0
544 664 4854 0
c (( - aux1145 + SATLiteral(559) + SATLiteral(649))<=0)
-649 -4857 0
-559 -4857 0
-559 -649 -4858 0
c (0<=( - aux1145 + SATLiteral(559) + SATLiteral(649)))
649 4858 0
559 4858 0
559 649 4857 0
c (( - aux1146 + SATLiteral(589) + SATLiteral(634))<=0)
-634 -4860 0
-589 -4860 0
-589 -634 -4861 0
c (0<=( - aux1146 + SATLiteral(589) + SATLiteral(634)))
634 4861 0
589 4861 0
589 634 4860 0
c (( - aux1147 + SATLiteral(604) + SATLiteral(619))<=0)
-619 -4863 0
-604 -4863 0
-604 -619 -4864 0
c (0<=( - aux1147 + SATLiteral(604) + SATLiteral(619)))
619 4864 0
604 4864 0
604 619 4863 0
c ((aux1147 - aux1148 + SATLiteral(574))<=0)
4863 -4866 0
4864 -4867 0
-574 -4866 0
-574 4863 -4867 0
-574 4864 -4869 0
c (0<=(aux1147 - aux1148 + SATLiteral(574)))
-4864 4869 0
-4863 4867 0
574 4869 0
574 -4864 4867 0
574 -4863 4866 0
c ((aux1144 + aux1146 - aux1149)<=0)
4860 -4871 0
4861 -4872 0
4854 -4871 0
4854 4860 -4872 0
4854 4861 -4874 0
4855 -4872 0
4855 4860 -4874 0
4855 4861 -4876 0
c (0<=(aux1144 + aux1146 - aux1149))
-4861 4876 0
-4860 4874 0
-4855 4876 0
-4855 -4861 4874 0
-4855 -4860 4872 0
-4854 4874 0
-4854 -4861 4872 0
-4854 -4860 4871 0
c (( - aux1150 + SATLiteral(546) + SATLiteral(666))<=0)
-666 -4878 0
-546 -4878 0
-546 -666 -4879 0
c (0<=( - aux1150 + SATLiteral(546) + SATLiteral(666)))
666 4879 0
546 4879 0
546 666 4878 0
c (( - aux1151 + SATLiteral(561) + SATLiteral(651))<=0)
-651 -4881 0
-561 -4881 0
-561 -651 -4882 0
c (0<=( - aux1151 + SATLiteral(561) + SATLiteral(651)))
651 4882 0
561 4882 0
561 651 4881 0
c (( - aux1152 + SATLiteral(591) + SATLiteral(636))<=0)
-636 -4884 0
-591 -4884 0
-591 -636 -4885 0
c (0<=( - aux1152 + SATLiteral(591) + SATLiteral(636)))
636 4885 0
591 4885 0
591 636 4884 0
c (( - aux1153 + SATLiteral(606) + SATLiteral(621))<=0)
-621 -4887 0
-606 -4887 0
-606 -621 -4888 0
c (0<=( - aux1153 + SATLiteral(606) + SATLiteral(621)))
621 4888 0
606 4888 0
606 621 4887 0
c ((aux1153 - aux1154 + SATLiteral(576))<=0)
4887 -4890 0
4888 -4891 0
-576 -4890 0
-576 4887 -4891 0
-576 4888 -4893 0
c (0<=(aux1153 - aux1154 + SATLiteral(576)))
-4888 4893 0
-4887 4891 0
576 4893 0
576 -4888 4891 0
576 -4887 4890 0
c ((aux1150 + aux1152 - aux1155)<=0)
4884 -4895 0
4885 -4896 0
4878 -4895 0
4878 4884 -4896 0
4878 4885 -4898 0
4879 -4896 0
4879 4884 -4898 0
4879 4885 -4900 0
c (0<=(aux1150 + aux1152 - aux1155))
-4885 4900 0
-4884 4898 0
-4879 4900 0
-4879 -4885 4898 0
-4879 -4884 4896 0
-4878 4898 0
-4878 -4885 4896 0
-4878 -4884 4895 0
c (( - aux1156 + SATLiteral(548) + SATLiteral(668))<=0)
-668 -4902 0
-548 -4902 0
-548 -668 -4903 0
c (0<=( - aux1156 + SATLiteral(548) + SATLiteral(668)))
668 4903 0
548 4903 0
548 668 4902 0
c (( - aux1157 + SATLiteral(563) + SATLiteral(653))<=0)
-653 -4905 0
-563 -4905 0
-563 -653 -4906 0
c (0<=( - aux1157 + SATLiteral(563) + SATLiteral(653)))
653 4906 0
563 4906 0
563 653 4905 0
c (( - aux1158 + SATLiteral(593) + SATLiteral(638))<=0)
-638 -4908 0
-593 -4908 0
-593 -638 -4909 0
c (0<=( - aux1158 + SATLiteral(593) + SATLiteral(638)))
638 4909 0
593 4909 0
593 638 4908 0
c (( - aux1159 + SATLiteral(608) + SATLiteral(623))<=0)
-623 -4911 0
-608 -4911 0
-608 -623 -4912 0
c (0<=( - aux1159 + SATLiteral(608) + SATLiteral(623)))
623 4912 0
608 4912 0
608 623 4911 0
c ((aux1159 - aux1160 + SATLiteral(578))<=0)
4911 -4914 0
4912 -4915 0
-578 -4914 0
-578 4911 -4915 0
-578 4912 -4917 0
c (0<=(aux1159 - aux1160 + SATLiteral(578)))
-4912 4917 0
-4911 4915 0
578 4917 0
578 -4912 4915 0
578 -4911 4914 0
c ((aux1156 + aux1158 - aux1161)<=0)
4908 -4919 0
4909 -4920 0
4902 -4919 0
4902 4908 -4920 0
4902 4909 -4922 0
4903 -4920 0
4903 4908 -4922 0
4903 4909 -4924 0
c (0<=(aux1156 + aux1158 - aux1161))
-4909 4924 0
-4908 4922 0
-4903 4924 0
-4903 -4909 4922 0
-4903 -4908 4920 0
-4902 4922 0
-4902 -4909 4920 0
-4902 -4908 4919 0
c (( - aux1162 + SATLiteral(550) + SATLiteral(670))<=0)
-670 -4926 0
-550 -4926 0
-550 -670 -4927 0
c (0<=( - aux1162 + SATLiteral(550) + SATLiteral(670)))
670 4927 0
550 4927 0
550 670 4926 0
c (( - aux1163 + SATLiteral(565) + SATLiteral(655))<=0)
-655 -4929 0
-565 -4929 0
-565 -655 -4930 0
c (0<=( - aux1163 + SATLiteral(565) + SATLiteral(655)))
655 4930 0
565 4930 0
565 655 4929 0
c (( - aux1164 + SATLiteral(595) + SATLiteral(640))<=0)
-640 -4932 0
-595 -4932 0
-595 -640 -4933 0
c (0<=( - aux1164 + SATLiteral(595) + SATLiteral(640)))
640 4933 0
595 4933 0
595 640 4932 0
c (( - aux1165 + SATLiteral(610) + SATLiteral(625))<=0)
-625 -4935 0
-610 -4935 0
-610 -625 -4936 0
c (0<=( - aux1165 + SATLiteral(610) + SATLiteral(625)))
625 4936 0
610 4936 0
610 625 4935 0
c ((aux1165 - aux1166 + SATLiteral(580))<=0)
4935 -4938 0
4936 -4939 0
-580 -4938 0
-580 4935 -4939 0
-580 4936 -4941 0
c (0<=(aux1165 - aux1166 + SATLiteral(580)))
-4936 4941 0
-4935 4939 0
580 4941 0
580 -4936 4939 0
580 -4935 4938 0
c ((aux1162 + aux1164 - aux1167)<=0)
4932 -4943 0
4933 -4944 0
4926 -4943 0
4926 4932 -4944 0
4926 4933 -4946 0
4927 -4944 0
4927 4932 -4946 0
4927 4933 -4948 0
c (0<=(aux1162 + aux1164 - aux1167))
-4933 4948 0
-4932 4946 0
-4927 4948 0
-4927 -4933 4946 0
-4927 -4932 4944 0
-4926 4946 0
-4926 -4933 4944 0
-4926 -4932 4943 0
c (( - aux1168 + SATLiteral(552) + SATLiteral(672))<=0)
-672 -4950 0
-552 -4950 0
-552 -672 -4951 0
c (0<=( - aux1168 + SATLiteral(552) + SATLiteral(672)))
672 4951 0
552 4951 0
552 672 4950 0
c (( - aux1169 + SATLiteral(567) + SATLiteral(657))<=0)
-657 -4953 0
-567 -4953 0
-567 -657 -4954 0
c (0<=( - aux1169 + SATLiteral(567) + SATLiteral(657)))
657 4954 0
567 4954 0
567 657 4953 0
c (( - aux1170 + SATLiteral(597) + SATLiteral(642))<=0)
-642 -4956 0
-597 -4956 0
-597 -642 -4957 0
c (0<=( - aux1170 + SATLiteral(597) + SATLiteral(642)))
642 4957 0
597 4957 0
597 642 4956 0
c (( - aux1171 + SATLiteral(612) + SATLiteral(627))<=0)
-627 -4959 0
-612 -4959 0
-612 -627 -4960 0
c (0<=( - aux1171 + SATLiteral(612) + SATLiteral(627)))
627 4960 0
612 4960 0
612 627 4959 0
c ((aux1171 - aux1172 + SATLiteral(582))<=0)
4959 -4962 0
4960 -4963 0
-582 -4962 0
-582 4959 -4963 0
-582 4960 -4965 0
c (0<=(aux1171 - aux1172 + SATLiteral(582)))
-4960 4965 0
-4959 4963 0
582 4965 0
582 -4960 4963 0
582 -4959 4962 0
c ((aux1168 + aux1170 - aux1173)<=0)
4956 -4967 0
4957 -4968 0
4950 -4967 0
4950 4956 -4968 0
4950 4957 -4970 0
4951 -4968 0
4951 4956 -4970 0
4951 4957 -4972 0
c (0<=(aux1168 + aux1170 - aux1173))
-4957 4972 0
-4956 4970 0
-4951 4972 0
-4951 -4957 4970 0
-4951 -4956 4968 0
-4950 4970 0
-4950 -4957 4968 0
-4950 -4956 4967 0
c (( - aux1174 + SATLiteral(554) + SATLiteral(674))<=0)
-674 -4974 0
-554 -4974 0
-554 -674 -4975 0
c (0<=( - aux1174 + SATLiteral(554) + SATLiteral(674)))
674 4975 0
554 4975 0
554 674 4974 0
c (( - aux1175 + SATLiteral(569) + SATLiteral(659))<=0)
-659 -4977 0
-569 -4977 0
-569 -659 -4978 0
c (0<=( - aux1175 + SATLiteral(569) + SATLiteral(659)))
659 4978 0
569 4978 0
569 659 4977 0
c (( - aux1176 + SATLiteral(599) + SATLiteral(644))<=0)
-644 -4980 0
-599 -4980 0
-599 -644 -4981 0
c (0<=( - aux1176 + SATLiteral(599) + SATLiteral(644)))
644 4981 0
599 4981 0
599 644 4980 0
c (( - aux1177 + SATLiteral(614) + SATLiteral(629))<=0)
-629 -4983 0
-614 -4983 0
-614 -629 -4984 0
c (0<=( - aux1177 + SATLiteral(614) + SATLiteral(629)))
629 4984 0
614 4984 0
614 629 4983 0
c ((aux1177 - aux1178 + SATLiteral(584))<=0)
4983 -4986 0
4984 -4987 0
-584 -4986 0
-584 4983 -4987 0
-584 4984 -4989 0
c (0<=(aux1177 - aux1178 + SATLiteral(584)))
-4984 4989 0
-4983 4987 0
584 4989 0
584 -4984 4987 0
584 -4983 4986 0
c ((aux1174 + aux1176 - aux1179)<=0)
4980 -4991 0
4981 -4992 0
4974 -4991 0
4974 4980 -4992 0
4974 4981 -4994 0
4975 -4992 0
4975 4980 -4994 0
4975 4981 -4996 0
c (0<=(aux1174 + aux1176 - aux1179))
-4981 4996 0
-4980 4994 0
-4975 4996 0
-4975 -4981 4994 0
-4975 -4980 4992 0
-4974 4994 0
-4974 -4981 4992 0
-4974 -4980 4991 0
c (( - aux1180 + SATLiteral(556) + SATLiteral(676))<=0)
-676 -4998 0
-556 -4998 0
-556 -676 -4999 0
c (0<=( - aux1180 + SATLiteral(556) + SATLiteral(676)))
676 4999 0
556 4999 0
556 676 4998 0
c (( - aux1181 + SATLiteral(571) + SATLiteral(661))<=0)
-661 -5001 0
-571 -5001 0
-571 -661 -5002 0
c (0<=( - aux1181 + SATLiteral(571) + SATLiteral(661)))
661 5002 0
571 5002 0
571 661 5001 0
c (( - aux1182 + SATLiteral(601) + SATLiteral(646))<=0)
-646 -5004 0
-601 -5004 0
-601 -646 -5005 0
c (0<=( - aux1182 + SATLiteral(601) + SATLiteral(646)))
646 5005 0
601 5005 0
601 646 5004 0
c (( - aux1183 + SATLiteral(616) + SATLiteral(631))<=0)
-631 -5007 0
-616 -5007 0
-616 -631 -5008 0
c (0<=( - aux1183 + SATLiteral(616) + SATLiteral(631)))
631 5008 0
616 5008 0
616 631 5007 0
c ((aux1183 - aux1184 + SATLiteral(586))<=0)
5007 -5010 0
5008 -5011 0
-586 -5010 0
-586 5007 -5011 0
-586 5008 -5013 0
c (0<=(aux1183 - aux1184 + SATLiteral(586)))
-5008 5013 0
-5007 5011 0
586 5013 0
586 -5008 5011 0
586 -5007 5010 0
c ((aux1180 + aux1182 - aux1185)<=0)
5004 -5015 0
5005 -5016 0
4998 -5015 0
4998 5004 -5016 0
4998 5005 -5018 0
4999 -5016 0
4999 5004 -5018 0
4999 5005 -5020 0
c (0<=(aux1180 + aux1182 - aux1185))
-5005 5020 0
-5004 5018 0
-4999 5020 0
-4999 -5005 5018 0
-4999 -5004 5016 0
-4998 5018 0
-4998 -5005 5016 0
-4998 -5004 5015 0
c (( - aux1186 + SATLiteral(-555) + SATLiteral(-675))<=0)
675 -5022 0
555 -5022 0
555 675 -5023 0
c (0<=( - aux1186 + SATLiteral(-555) + SATLiteral(-675)))
-675 5023 0
-555 5023 0
-555 -675 5022 0
c (( - aux1187 + SATLiteral(-570) + SATLiteral(-660))<=0)
660 -5025 0
570 -5025 0
570 660 -5026 0
c (0<=( - aux1187 + SATLiteral(-570) + SATLiteral(-660)))
-660 5026 0
-570 5026 0
-570 -660 5025 0
c (( - aux1188 + SATLiteral(-600) + SATLiteral(-645))<=0)
645 -5028 0
600 -5028 0
600 645 -5029 0
c (0<=( - aux1188 + SATLiteral(-600) + SATLiteral(-645)))
-645 5029 0
-600 5029 0
-600 -645 5028 0
c (( - aux1189 + SATLiteral(-615) + SATLiteral(-630))<=0)
630 -5031 0
615 -5031 0
615 630 -5032 0
c (0<=( - aux1189 + SATLiteral(-615) + SATLiteral(-630)))
-630 5032 0
-615 5032 0
-615 -630 5031 0
c ((aux1189 - aux1190 + SATLiteral(-585))<=0)
5031 -5034 0
5032 -5035 0
585 -5034 0
585 5031 -5035 0
585 5032 -5037 0
c (0<=(aux1189 - aux1190 + SATLiteral(-585)))
-5032 5037 0
-5031 5035 0
-585 5037 0
-585 -5032 5035 0
-585 -5031 5034 0
c ((aux1186 + aux1188 - aux1191)<=0)
5028 -5039 0
5029 -5040 0
5022 -5039 0
5022 5028 -5040 0
5022 5029 -5042 0
5023 -5040 0
5023 5028 -5042 0
5023 5029 -5044 0
c (0<=(aux1186 + aux1188 - aux1191))
-5029 5044 0
-5028 5042 0
-5023 5044 0
-5023 -5029 5042 0
-5023 -5028 5040 0
-5022 5042 0
-5022 -5029 5040 0
-5022 -5028 5039 0
c ((SATLiteral(677) + SATLiteral(797) - aux1192)<=0)
-797 -5046 0
-677 -5046 0
-677 -797 -5047 0
c (0<=(SATLiteral(677) + SATLiteral(797) - aux1192))
797 5047 0
677 5047 0
677 797 5046 0
c ((SATLiteral(692) + SATLiteral(782) - aux1193)<=0)
-782 -5049 0
-692 -5049 0
-692 -782 -5050 0
c (0<=(SATLiteral(692) + SATLiteral(782) - aux1193))
782 5050 0
692 5050 0
692 782 5049 0
c ((SATLiteral(722) + SATLiteral(767) - aux1194)<=0)
-767 -5052 0
-722 -5052 0
-722 -767 -5053 0
c (0<=(SATLiteral(722) + SATLiteral(767) - aux1194))
767 5053 0
722 5053 0
722 767 5052 0
c ((SATLiteral(737) + SATLiteral(752) - aux1195)<=0)
-752 -5055 0
-737 -5055 0
-737 -752 -5056 0
c (0<=(SATLiteral(737) + SATLiteral(752) - aux1195))
752 5056 0
737 5056 0
737 752 5055 0
c ((SATLiteral(707) + aux1195 - aux1196)<=0)
5055 -5058 0
5056 -5059 0
-707 -5058 0
-707 5055 -5059 0
-707 5056 -5061 0
c (0<=(SATLiteral(707) + aux1195 - aux1196))
-5056 5061 0
-5055 5059 0
707 5061 0
707 -5056 5059 0
707 -5055 5058 0
c ((aux1192 + aux1194 - aux1197)<=0)
5052 -5063 0
5053 -5064 0
5046 -5063 0
5046 5052 -5064 0
5046 5053 -5066 0
5047 -5064 0
5047 5052 -5066 0
5047 5053 -5068 0
c (0<=(aux1192 + aux1194 - aux1197))
-5053 5068 0
-5052 5066 0
-5047 5068 0
-5047 -5053 5066 0
-5047 -5052 5064 0
-5046 5066 0
-5046 -5053 5064 0
-5046 -5052 5063 0
c ((SATLiteral(679) + SATLiteral(799) - aux1198)<=0)
-799 -5070 0
-679 -5070 0
-679 -799 -5071 0
c (0<=(SATLiteral(679) + SATLiteral(799) - aux1198))
799 5071 0
679 5071 0
679 799 5070 0
c ((SATLiteral(694) + SATLiteral(784) - aux1199)<=0)
-784 -5073 0
-694 -5073 0
-694 -784 -5074 0
c (0<=(SATLiteral(694) + SATLiteral(784) - aux1199))
784 5074 0
694 5074 0
694 784 5073 0
c ((SATLiteral(724) + SATLiteral(769) - aux1200)<=0)
-769 -5076 0
-724 -5076 0
-724 -769 -5077 0
c (0<=(SATLiteral(724) + SATLiteral(769) - aux1200))
769 5077 0
724 5077 0
724 769 5076 0
c ((SATLiteral(739) + SATLiteral(754) - aux1201)<=0)
-754 -5079 0
-739 -5079 0
-739 -754 -5080 0
c (0<=(SATLiteral(739) + SATLiteral(754) - aux1201))
754 5080 0
739 5080 0
739 754 5079 0
c ((SATLiteral(709) + aux1201 - aux1202)<=0)
5079 -5082 0
5080 -5083 0
-709 -5082 0
-709 5079 -5083 0
-709 5080 -5085 0
c (0<=(SATLiteral(709) + aux1201 - aux1202))
-5080 5085 0
-5079 5083 0
709 5085 0
709 -5080 5083 0
709 -5079 5082 0
c ((aux1198 + aux1200 - aux1203)<=0)
5076 -5087 0
5077 -5088 0
5070 -5087 0
5070 5076 -5088 0
5070 5077 -5090 0
5071 -5088 0
5071 5076 -5090 0
5071 5077 -5092 0
c (0<=(aux1198 + aux1200 - aux1203))
-5077 5092 0
-5076 5090 0
-5071 5092 0
-5071 -5077 5090 0
-5071 -5076 5088 0
-5070 5090 0
-5070 -5077 5088 0
-5070 -5076 5087 0
c ((SATLiteral(681) + SATLiteral(801) - aux1204)<=0)
-801 -5094 0
-681 -5094 0
-681 -801 -5095 0
c (0<=(SATLiteral(681) + SATLiteral(801) - aux1204))
801 5095 0
681 5095 0
681 801 5094 0
c ((SATLiteral(696) + SATLiteral(786) - aux1205)<=0)
-786 -5097 0
-696 -5097 0
-696 -786 -5098 0
c (0<=(SATLiteral(696) + SATLiteral(786) - aux1205))
786 5098 0
696 5098 0
696 786 5097 0
c ((SATLiteral(726) + SATLiteral(771) - aux1206)<=0)
-771 -5100 0
-726 -5100 0
-726 -771 -5101 0
c (0<=(SATLiteral(726) + SATLiteral(771) - aux1206))
771 5101 0
726 5101 0
726 771 5100 0
c ((SATLiteral(741) + SATLiteral(756) - aux1207)<=0)
-756 -5103 0
-741 -5103 0
-741 -756 -5104 0
c (0<=(SATLiteral(741) + SATLiteral(756) - aux1207))
756 5104 0
741 5104 0
741 756 5103 0
c ((SATLiteral(711) + aux1207 - aux1208)<=0)
5103 -5106 0
5104 -5107 0
-711 -5106 0
-711 5103 -5107 0
-711 5104 -5109 0
c (0<=(SATLiteral(711) + aux1207 - aux1208))
-5104 5109 0
-5103 5107 0
711 5109 0
711 -5104 5107 0
711 -5103 5106 0
c ((aux1204 + aux1206 - aux1209)<=0)
5100 -5111 0
5101 -5112 0
5094 -5111 0
5094 5100 -5112 0
5094 5101 -5114 0
5095 -5112 0
5095 5100 -5114 0
5095 5101 -5116 0
c (0<=(aux1204 + aux1206 - aux1209))
-5101 5116 0
-5100 5114 0
-5095 5116 0
-5095 -5101 5114 0
-5095 -5100 5112 0
-5094 5114 0
-5094 -5101 5112 0
-5094 -5100 5111 0
c ((SATLiteral(683) + SATLiteral(803) - aux1210)<=0)
-803 -5118 0
-683 -5118 0
-683 -803 -5119 0
c (0<=(SATLiteral(683) + SATLiteral(803) - aux1210))
803 5119 0
683 5119 0
683 803 5118 0
c ((SATLiteral(698) + SATLiteral(788) - aux1211)<=0)
-788 -5121 0
-698 -5121 0
-698 -788 -5122 0
c (0<=(SATLiteral(698) + SATLiteral(788) - aux1211))
788 5122 0
698 5122 0
698 788 5121 0
c ((SATLiteral(728) + SATLiteral(773) - aux1212)<=0)
-773 -5124 0
-728 -5124 0
-728 -773 -5125 0
c (0<=(SATLiteral(728) + SATLiteral(773) - aux1212))
773 5125 0
728 5125 0
728 773 5124 0
c ((SATLiteral(743) + SATLiteral(758) - aux1213)<=0)
-758 -5127 0
-743 -5127 0
-743 -758 -5128 0
c (0<=(SATLiteral(743) + SATLiteral(758) - aux1213))
758 5128 0
743 5128 0
743 758 5127 0
c ((SATLiteral(713) + aux1213 - aux1214)<=0)
5127 -5130 0
5128 -5131 0
-713 -5130 0
-713 5127 -5131 0
-713 5128 -5133 0
c (0<=(SATLiteral(713) + aux1213 - aux1214))
-5128 5133 0
-5127 5131 0
713 5133 0
713 -5128 5131 0
713 -5127 5130 0
c ((aux1210 + aux1212 - aux1215)<=0)
5124 -5135 0
5125 -5136 0
5118 -5135 0
5118 5124 -5136 0
5118 5125 -5138 0
5119 -5136 0
5119 5124 -5138 0
5119 5125 -5140 0
c (0<=(aux1210 + aux1212 - aux1215))
-5125 5140 0
-5124 5138 0
-5119 5140 0
-5119 -5125 5138 0
-5119 -5124 5136 0
-5118 5138 0
-5118 -5125 5136 0
-5118 -5124 5135 0
c ((SATLiteral(685) + SATLiteral(805) - aux1216)<=0)
-805 -5142 0
-685 -5142 0
-685 -805 -5143 0
c (0<=(SATLiteral(685) + SATLiteral(805) - aux1216))
805 5143 0
685 5143 0
685 805 5142 0
c ((SATLiteral(700) + SATLiteral(790) - aux1217)<=0)
-790 -5145 0
-700 -5145 0
-700 -790 -5146 0
c (0<=(SATLiteral(700) + SATLiteral(790) - aux1217))
790 5146 0
700 5146 0
700 790 5145 0
c ((SATLiteral(730) + SATLiteral(775) - aux1218)<=0)
-775 -5148 0
-730 -5148 0
-730 -775 -5149 0
c (0<=(SATLiteral(730) + SATLiteral(775) - aux1218))
775 5149 0
730 5149 0
730 775 5148 0
c ((SATLiteral(745) + SATLiteral(760) - aux1219)<=0)
-760 -5151 0
-745 -5151 0
-745 -760 -5152 0
c (0<=(SATLiteral(745) + SATLiteral(760) - aux1219))
760 5152 0
745 5152 0
745 760 5151 0
c ((SATLiteral(715) + aux1219 - aux1220)<=0)
5151 -5154 0
5152 -5155 0
-715 -5154 0
-715 5151 -5155 0
-715 5152 -5157 0
c (0<=(SATLiteral(715) + aux1219 - aux1220))
-5152 5157 0
-5151 5155 0
715 5157 0
715 -5152 5155 0
715 -5151 5154 0
c ((aux1216 + aux1218 - aux1221)<=0)
5148 -5159 0
5149 -5160 0
5142 -5159 0
5142 5148 -5160 0
5142 5149 -5162 0
5143 -5160 0
5143 5148 -5162 0
5143 5149 -5164 0
c (0<=(aux1216 + aux1218 - aux1221))
-5149 5164 0
-5148 5162 0
-5143 5164 0
-5143 -5149 5162 0
-5143 -5148 5160 0
-5142 5162 0
-5142 -5149 5160 0
-5142 -5148 5159 0
c ((SATLiteral(687) + SATLiteral(807) - aux1222)<=0)
-807 -5166 0
-687 -5166 0
-687 -807 -5167 0
c (0<=(SATLiteral(687) + SATLiteral(807) - aux1222))
807 5167 0
687 5167 0
687 807 5166 0
c ((SATLiteral(702) + SATLiteral(792) - aux1223)<=0)
-792 -5169 0
-702 -5169 0
-702 -792 -5170 0
c (0<=(SATLiteral(702) + SATLiteral(792) - aux1223))
792 5170 0
702 5170 0
702 792 5169 0
c ((SATLiteral(732) + SATLiteral(777) - aux1224)<=0)
-777 -5172 0
-732 -5172 0
-732 -777 -5173 0
c (0<=(SATLiteral(732) + SATLiteral(777) - aux1224))
777 5173 0
732 5173 0
732 777 5172 0
c ((SATLiteral(747) + SATLiteral(762) - aux1225)<=0)
-762 -5175 0
-747 -5175 0
-747 -762 -5176 0
c (0<=(SATLiteral(747) + SATLiteral(762) - aux1225))
762 5176 0
747 5176 0
747 762 5175 0
c ((SATLiteral(717) + aux1225 - aux1226)<=0)
5175 -5178 0
5176 -5179 0
-717 -5178 0
-717 5175 -5179 0
-717 5176 -5181 0
c (0<=(SATLiteral(717) + aux1225 - aux1226))
-5176 5181 0
-5175 5179 0
717 5181 0
717 -5176 5179 0
717 -5175 5178 0
c ((aux1222 + aux1224 - aux1227)<=0)
5172 -5183 0
5173 -5184 0
5166 -5183 0
5166 5172 -5184 0
5166 5173 -5186 0
5167 -5184 0
5167 5172 -5186 0
5167 5173 -5188 0
c (0<=(aux1222 + aux1224 - aux1227))
-5173 5188 0
-5172 5186 0
-5167 5188 0
-5167 -5173 5186 0
-5167 -5172 5184 0
-5166 5186 0
-5166 -5173 5184 0
-5166 -5172 5183 0
c ((SATLiteral(689) + SATLiteral(809) - aux1228)<=0)
-809 -5190 0
-689 -5190 0
-689 -809 -5191 0
c (0<=(SATLiteral(689) + SATLiteral(809) - aux1228))
809 5191 0
689 5191 0
689 809 5190 0
c ((SATLiteral(704) + SATLiteral(794) - aux1229)<=0)
-794 -5193 0
-704 -5193 0
-704 -794 -5194 0
c (0<=(SATLiteral(704) + SATLiteral(794) - aux1229))
794 5194 0
704 5194 0
704 794 5193 0
c ((SATLiteral(734) + SATLiteral(779) - aux1230)<=0)
-779 -5196 0
-734 -5196 0
-734 -779 -5197 0
c (0<=(SATLiteral(734) + SATLiteral(779) - aux1230))
779 5197 0
734 5197 0
734 779 5196 0
c ((SATLiteral(749) + SATLiteral(764) - aux1231)<=0)
-764 -5199 0
-749 -5199 0
-749 -764 -5200 0
c (0<=(SATLiteral(749) + SATLiteral(764) - aux1231))
764 5200 0
749 5200 0
749 764 5199 0
c ((SATLiteral(719) + aux1231 - aux1232)<=0)
5199 -5202 0
5200 -5203 0
-719 -5202 0
-719 5199 -5203 0
-719 5200 -5205 0
c (0<=(SATLiteral(719) + aux1231 - aux1232))
-5200 5205 0
-5199 5203 0
719 5205 0
719 -5200 5203 0
719 -5199 5202 0
c ((aux1228 + aux1230 - aux1233)<=0)
5196 -5207 0
5197 -5208 0
5190 -5207 0
5190 5196 -5208 0
5190 5197 -5210 0
5191 -5208 0
5191 5196 -5210 0
5191 5197 -5212 0
c (0<=(aux1228 + aux1230 - aux1233))
-5197 5212 0
-5196 5210 0
-5191 5212 0
-5191 -5197 5210 0
-5191 -5196 5208 0
-5190 5210 0
-5190 -5197 5208 0
-5190 -5196 5207 0
c ((SATLiteral(691) + SATLiteral(811) - aux1234)<=0)
-811 -5214 0
-691 -5214 0
-691 -811 -5215 0
c (0<=(SATLiteral(691) + SATLiteral(811) - aux1234))
811 5215 0
691 5215 0
691 811 5214 0
c ((SATLiteral(706) + SATLiteral(796) - aux1235)<=0)
-796 -5217 0
-706 -5217 0
-706 -796 -5218 0
c (0<=(SATLiteral(706) + SATLiteral(796) - aux1235))
796 5218 0
706 5218 0
706 796 5217 0
c ((SATLiteral(736) + SATLiteral(781) - aux1236)<=0)
-781 -5220 0
-736 -5220 0
-736 -781 -5221 0
c (0<=(SATLiteral(736) + SATLiteral(781) - aux1236))
781 5221 0
736 5221 0
736 781 5220 0
c ((SATLiteral(751) + SATLiteral(766) - aux1237)<=0)
-766 -5223 0
-751 -5223 0
-751 -766 -5224 0
c (0<=(SATLiteral(751) + SATLiteral(766) - aux1237))
766 5224 0
751 5224 0
751 766 5223 0
c ((SATLiteral(721) + aux1237 - aux1238)<=0)
5223 -5226 0
5224 -5227 0
-721 -5226 0
-721 5223 -5227 0
-721 5224 -5229 0
c (0<=(SATLiteral(721) + aux1237 - aux1238))
-5224 5229 0
-5223 5227 0
721 5229 0
721 -5224 5227 0
721 -5223 5226 0
c ((aux1234 + aux1236 - aux1239)<=0)
5220 -5231 0
5221 -5232 0
5214 -5231 0
5214 5220 -5232 0
5214 5221 -5234 0
5215 -5232 0
5215 5220 -5234 0
5215 5221 -5236 0
c (0<=(aux1234 + aux1236 - aux1239))
-5221 5236 0
-5220 5234 0
-5215 5236 0
-5215 -5221 5234 0
-5215 -5220 5232 0
-5214 5234 0
-5214 -5221 5232 0
-5214 -5220 5231 0
c ((SATLiteral(-690) + SATLiteral(-810) - aux1240)<=0)
810 -5238 0
690 -5238 0
690 810 -5239 0
c (0<=(SATLiteral(-690) + SATLiteral(-810) - aux1240))
-810 5239 0
-690 5239 0
-690 -810 5238 0
c ((SATLiteral(-705) + SATLiteral(-795) - aux1241)<=0)
795 -5241 0
705 -5241 0
705 795 -5242 0
c (0<=(SATLiteral(-705) + SATLiteral(-795) - aux1241))
-795 5242 0
-705 5242 0
-705 -795 5241 0
c ((SATLiteral(-735) + SATLiteral(-780) - aux1242)<=0)
780 -5244 0
735 -5244 0
735 780 -5245 0
c (0<=(SATLiteral(-735) + SATLiteral(-780) - aux1242))
-780 5245 0
-735 5245 0
-735 -780 5244 0
c ((SATLiteral(-750) + SATLiteral(-765) - aux1243)<=0)
765 -5247 0
750 -5247 0
750 765 -5248 0
c (0<=(SATLiteral(-750) + SATLiteral(-765) - aux1243))
-765 5248 0
-750 5248 0
-750 -765 5247 0
c ((SATLiteral(-720) + aux1243 - aux1244)<=0)
5247 -5250 0
5248 -5251 0
720 -5250 0
720 5247 -5251 0
720 5248 -5253 0
c (0<=(SATLiteral(-720) + aux1243 - aux1244))
-5248 5253 0
-5247 5251 0
-720 5253 0
-720 -5248 5251 0
-720 -5247 5250 0
c ((aux1240 + aux1242 - aux1245)<=0)
5244 -5255 0
5245 -5256 0
5238 -5255 0
5238 5244 -5256 0
5238 5245 -5258 0
5239 -5256 0
5239 5244 -5258 0
5239 5245 -5260 0
c (0<=(aux1240 + aux1242 - aux1245))
-5245 5260 0
-5244 5258 0
-5239 5260 0
-5239 -5245 5258 0
-5239 -5244 5256 0
-5238 5258 0
-5238 -5245 5256 0
-5238 -5244 5255 0
c (( - aux1246 + SATLiteral(812) + SATLiteral(932))<=0)
-932 -5262 0
-812 -5262 0
-812 -932 -5263 0
c (0<=( - aux1246 + SATLiteral(812) + SATLiteral(932)))
932 5263 0
812 5263 0
812 932 5262 0
c (( - aux1247 + SATLiteral(827) + SATLiteral(917))<=0)
-917 -5265 0
-827 -5265 0
-827 -917 -5266 0
c (0<=( - aux1247 + SATLiteral(827) + SATLiteral(917)))
917 5266 0
827 5266 0
827 917 5265 0
c (( - aux1248 + SATLiteral(857) + SATLiteral(902))<=0)
-902 -5268 0
-857 -5268 0
-857 -902 -5269 0
c (0<=( - aux1248 + SATLiteral(857) + SATLiteral(902)))
902 5269 0
857 5269 0
857 902 5268 0
c (( - aux1249 + SATLiteral(872) + SATLiteral(887))<=0)
-887 -5271 0
-872 -5271 0
-872 -887 -5272 0
c (0<=( - aux1249 + SATLiteral(872) + SATLiteral(887)))
887 5272 0
872 5272 0
872 887 5271 0
c ((aux1249 - aux1250 + SATLiteral(842))<=0)
5271 -5274 0
5272 -5275 0
-842 -5274 0
-842 5271 -5275 0
-842 5272 -5277 0
c (0<=(aux1249 - aux1250 + SATLiteral(842)))
-5272 5277 0
-5271 5275 0
842 5277 0
842 -5272 5275 0
842 -5271 5274 0
c ((aux1246 + aux1248 - aux1251)<=0)
5268 -5279 0
5269 -5280 0
5262 -5279 0
5262 5268 -5280 0
5262 5269 -5282 0
5263 -5280 0
5263 5268 -5282 0
5263 5269 -5284 0
c (0<=(aux1246 + aux1248 - aux1251))
-5269 5284 0
-5268 5282 0
-5263 5284 0
-5263 -5269 5282 0
-5263 -5268 5280 0
-5262 5282 0
-5262 -5269 5280 0
-5262 -5268 5279 0
c (( - aux1252 + SATLiteral(814) + SATLiteral(934))<=0)
-934 -5286 0
-814 -5286 0
-814 -934 -5287 0
c (0<=( - aux1252 + SATLiteral(814) + SATLiteral(934)))
934 5287 0
814 5287 0
814 934 5286 0
c (( - aux1253 + SATLiteral(829) + SATLiteral(919))<=0)
-919 -5289 0
-829 -5289 0
-829 -919 -5290 0
c (0<=( - aux1253 + SATLiteral(829) + SATLiteral(919)))
919 5290 0
829 5290 0
829 919 5289 0
c (( - aux1254 + SATLiteral(859) + SATLiteral(904))<=0)
-904 -5292 0
-859 -5292 0
-859 -904 -5293 0
c (0<=( - aux1254 + SATLiteral(859) + SATLiteral(904)))
904 5293 0
859 5293 0
859 904 5292 0
c (( - aux1255 + SATLiteral(874) + SATLiteral(889))<=0)
-889 -5295 0
-874 -5295 0
-874 -889 -5296 0
c (0<=( - aux1255 + SATLiteral(874) + SATLiteral(889)))
889 5296 0
874 5296 0
874 889 5295 0
c ((aux1255 - aux1256 + SATLiteral(844))<=0)
5295 -5298 0
5296 -5299 0
-844 -5298 0
-844 5295 -5299 0
-844 5296 -5301 0
c (0<=(aux1255 - aux1256 + SATLiteral(844)))
-5296 5301 0
-5295 5299 0
844 5301 0
844 -5296 5299 0
844 -5295 5298 0
c ((aux1252 + aux1254 - aux1257)<=0)
5292 -5303 0
5293 -5304 0
5286 -5303 0
5286 5292 -5304 0
5286 5293 -5306 0
5287 -5304 0
5287 5292 -5306 0
5287 5293 -5308 0
c (0<=(aux1252 + aux1254 - aux1257))
-5293 5308 0
-5292 5306 0
-5287 5308 0
-5287 -5293 5306 0
-5287 -5292 5304 0
-5286 5306 0
-5286 -5293 5304 0
-5286 -5292 5303 0
c (( - aux1258 + SATLiteral(816) + SATLiteral(936))<=0)
-936 -5310 0
-816 -5310 0
-816 -936 -5311 0
c (0<=( - aux1258 + SATLiteral(816) + SATLiteral(936)))
936 5311 0
816 5311 0
816 936 5310 0
c (( - aux1259 + SATLiteral(831) + SATLiteral(921))<=0)
-921 -5313 0
-831 -5313 0
-831 -921 -5314 0
c (0<=( - aux1259 + SATLiteral(831) + SATLiteral(921)))
921 5314 0
831 5314 0
831 921 5313 0
c (( - aux1260 + SATLiteral(861) + SATLiteral(906))<=0)
-906 -5316 0
-861 -5316 0
-861 -906 -5317 0
c (0<=( - aux1260 + SATLiteral(861) + SATLiteral(906)))
906 5317 0
861 5317 0
861 906 5316 0
c (( - aux1261 + SATLiteral(876) + SATLiteral(891))<=0)
-891 -5319 0
-876 -5319 0
-876 -891 -5320 0
c (0<=( - aux1261 + SATLiteral(876) + SATLiteral(891)))
891 5320 0
876 5320 0
876 891 5319 0
c ((aux1261 - aux1262 + SATLiteral(846))<=0)
5319 -5322 0
5320 -5323 0
-846 -5322 0
-846 5319 -5323 0
-846 5320 -5325 0
c (0<=(aux1261 - aux1262 + SATLiteral(846)))
-5320 5325 0
-5319 5323 0
846 5325 0
846 -5320 5323 0
846 -5319 5322 0
c ((aux1258 + aux1260 - aux1263)<=0)
5316 -5327 0
5317 -5328 0
5310 -5327 0
5310 5316 -5328 0
5310 5317 -5330 0
5311 -5328 0
5311 5316 -5330 0
5311 5317 -5332 0
c (0<=(aux1258 + aux1260 - aux1263))
-5317 5332 0
-5316 5330 0
-5311 5332 0
-5311 -5317 5330 0
-5311 -5316 5328 0
-5310 5330 0
-5310 -5317 5328 0
-5310 -5316 5327 0
c (( - aux1264 + SATLiteral(818) + SATLiteral(938))<=0)
-938 -5334 0
-818 -5334 0
-818 -938 -5335 0
c (0<=( - aux1264 + SATLiteral(818) + SATLiteral(938)))
938 5335 0
818 5335 0
818 938 5334 0
c (( - aux1265 + SATLiteral(833) + SATLiteral(923))<=0)
-923 -5337 0
-833 -5337 0
-833 -923 -5338 0
c (0<=( - aux1265 + SATLiteral(833) + SATLiteral(923)))
923 5338 0
833 5338 0
833 923 5337 0
c (( - aux1266 + SATLiteral(863) + SATLiteral(908))<=0)
-908 -5340 0
-863 -5340 0
-863 -908 -5341 0
c (0<=( - aux1266 + SATLiteral(863) + SATLiteral(908)))
908 5341 0
863 5341 0
863 908 5340 0
c (( - aux1267 + SATLiteral(878) + SATLiteral(893))<=0)
-893 -5343 0
-878 -5343 0
-878 -893 -5344 0
c (0<=( - aux1267 + SATLiteral(878) + SATLiteral(893)))
893 5344 0
878 5344 0
878 893 5343 0
c ((aux1267 - aux1268 + SATLiteral(848))<=0)
5343 -5346 0
5344 -5347 0
-848 -5346 0
-848 5343 -5347 0
-848 5344 -5349 0
c (0<=(aux1267 - aux1268 + SATLiteral(848)))
-5344 5349 0
-5343 5347 0
848 5349 0
848 -5344 5347 0
848 -5343 5346 0
c ((aux1264 + aux1266 - aux1269)<=0)
5340 -5351 0
5341 -5352 0
5334 -5351 0
5334 5340 -5352 0
5334 5341 -5354 0
5335 -5352 0
5335 5340 -5354 0
5335 5341 -5356 0
c (0<=(aux1264 + aux1266 - aux1269))
-5341 5356 0
-5340 5354 0
-5335 5356 0
-5335 -5341 5354 0
-5335 -5340 5352 0
-5334 5354 0
-5334 -5341 5352 0
-5334 -5340 5351 0
c (( - aux1270 + SATLiteral(820) + SATLiteral(940))<=0)
-940 -5358 0
-820 -5358 0
-820 -940 -5359 0
c (0<=( - aux1270 + SATLiteral(820) + SATLiteral(940)))
940 5359 0
820 5359 0
820 940 5358 0
c (( - aux1271 + SATLiteral(835) + SATLiteral(925))<=0)
-925 -5361 0
-835 -5361 0
-835 -925 -5362 0
c (0<=( - aux1271 + SATLiteral(835) + SATLiteral(925)))
925 5362 0
835 5362 0
835 925 5361 0
c (( - aux1272 + SATLiteral(865) + SATLiteral(910))<=0)
-910 -5364 0
-865 -5364 0
-865 -910 -5365 0
c (0<=( - aux1272 + SATLiteral(865) + SATLiteral(910)))
910 5365 0
865 5365 0
865 910 5364 0
c (( - aux1273 + SATLiteral(880) + SATLiteral(895))<=0)
-895 -5367 0
-880 -5367 0
-880 -895 -5368 0
c (0<=( - aux1273 + SATLiteral(880) + SATLiteral(895)))
895 5368 0
880 5368 0
880 895 5367 0
c ((aux1273 - aux1274 + SATLiteral(850))<=0)
5367 -5370 0
5368 -5371 0
-850 -5370 0
-850 5367 -5371 0
-850 5368 -5373 0
c (0<=(aux1273 - aux1274 + SATLiteral(850)))
-5368 5373 0
-5367 5371 0
850 5373 0
850 -5368 5371 0
850 -5367 5370 0
c ((aux1270 + aux1272 - aux1275)<=0)
5364 -5375 0
5365 -5376 0
5358 -5375 0
5358 5364 -5376 0
5358 5365 -5378 0
5359 -5376 0
5359 5364 -5378 0
5359 5365 -5380 0
c (0<=(aux1270 + aux1272 - aux1275))
-5365 5380 0
-5364 5378 0
-5359 5380 0
-5359 -5365 5378 0
-5359 -5364 5376 0
-5358 5378 0
-5358 -5365 5376 0
-5358 -5364 5375 0
c (( - aux1276 + SATLiteral(822) + SATLiteral(942))<=0)
-942 -5382 0
-822 -5382 0
-822 -942 -5383 0
c (0<=( - aux1276 + SATLiteral(822) + SATLiteral(942)))
942 5383 0
822 5383 0
822 942 5382 0
c (( - aux1277 + SATLiteral(837) + SATLiteral(927))<=0)
-927 -5385 0
-837 -5385 0
-837 -927 -5386 0
c (0<=( - aux1277 + SATLiteral(837) + SATLiteral(927)))
927 5386 0
837 5386 0
837 927 5385 0
c (( - aux1278 + SATLiteral(867) + SATLiteral(912))<=0)
-912 -5388 0
-867 -5388 0
-867 -912 -5389 0
c (0<=( - aux1278 + SATLiteral(867) + SATLiteral(912)))
912 5389 0
867 5389 0
867 912 5388 0
c (( - aux1279 + SATLiteral(882) + SATLiteral(897))<=0)
-897 -5391 0
-882 -5391 0
-882 -897 -5392 0
c (0<=( - aux1279 + SATLiteral(882) + SATLiteral(897)))
897 5392 0
882 5392 0
882 897 5391 0
c ((aux1279 - aux1280 + SATLiteral(852))<=0)
5391 -5394 0
5392 -5395 0
-852 -5394 0
-852 5391 -5395 0
-852 5392 -5397 0
c (0<=(aux1279 - aux1280 + SATLiteral(852)))
-5392 5397 0
-5391 5395 0
852 5397 0
852 -5392 5395 0
852 -5391 5394 0
c ((aux1276 + aux1278 - aux1281)<=0)
5388 -5399 0
5389 -5400 0
5382 -5399 0
5382 5388 -5400 0
5382 5389 -5402 0
5383 -5400 0
5383 5388 -5402 0
5383 5389 -5404 0
c (0<=(aux1276 + aux1278 - aux1281))
-5389 5404 0
-5388 5402 0
-5383 5404 0
-5383 -5389 5402 0
-5383 -5388 5400 0
-5382 5402 0
-5382 -5389 5400 0
-5382 -5388 5399 0
c (( - aux1282 + SATLiteral(824) + SATLiteral(944))<=0)
-944 -5406 0
-824 -5406 0
-824 -944 -5407 0
c (0<=( - aux1282 + SATLiteral(824) + SATLiteral(944)))
944 5407 0
824 5407 0
824 944 5406 0
c (( - aux1283 + SATLiteral(839) + SATLiteral(929))<=0)
-929 -5409 0
-839 -5409 0
-839 -929 -5410 0
c (0<=( - aux1283 + SATLiteral(839) + SATLiteral(929)))
929 5410 0
839 5410 0
839 929 5409 0
c (( - aux1284 + SATLiteral(869) + SATLiteral(914))<=0)
-914 -5412 0
-869 -5412 0
-869 -914 -5413 0
c (0<=( - aux1284 + SATLiteral(869) + SATLiteral(914)))
914 5413 0
869 5413 0
869 914 5412 0
c (( - aux1285 + SATLiteral(884) + SATLiteral(899))<=0)
-899 -5415 0
-884 -5415 0
-884 -899 -5416 0
c (0<=( - aux1285 + SATLiteral(884) + SATLiteral(899)))
899 5416 0
884 5416 0
884 899 5415 0
c ((aux1285 - aux1286 + SATLiteral(854))<=0)
5415 -5418 0
5416 -5419 0
-854 -5418 0
-854 5415 -5419 0
-854 5416 -5421 0
c (0<=(aux1285 - aux1286 + SATLiteral(854)))
-5416 5421 0
-5415 5419 0
854 5421 0
854 -5416 5419 0
854 -5415 5418 0
c ((aux1282 + aux1284 - aux1287)<=0)
5412 -5423 0
5413 -5424 0
5406 -5423 0
5406 5412 -5424 0
5406 5413 -5426 0
5407 -5424 0
5407 5412 -5426 0
5407 5413 -5428 0
c (0<=(aux1282 + aux1284 - aux1287))
-5413 5428 0
-5412 5426 0
-5407 5428 0
-5407 -5413 5426 0
-5407 -5412 5424 0
-5406 5426 0
-5406 -5413 5424 0
-5406 -5412 5423 0
c (( - aux1288 + SATLiteral(826) + SATLiteral(946))<=0)
-946 -5430 0
-826 -5430 0
-826 -946 -5431 0
c (0<=( - aux1288 + SATLiteral(826) + SATLiteral(946)))
946 5431 0
826 5431 0
826 946 5430 0
c (( - aux1289 + SATLiteral(841) + SATLiteral(931))<=0)
-931 -5433 0
-841 -5433 0
-841 -931 -5434 0
c (0<=( - aux1289 + SATLiteral(841) + SATLiteral(931)))
931 5434 0
841 5434 0
841 931 5433 0
c (( - aux1290 + SATLiteral(871) + SATLiteral(916))<=0)
-916 -5436 0
-871 -5436 0
-871 -916 -5437 0
c (0<=( - aux1290 + SATLiteral(871) + SATLiteral(916)))
916 5437 0
871 5437 0
871 916 5436 0
c (( - aux1291 + SATLiteral(886) + SATLiteral(901))<=0)
-901 -5439 0
-886 -5439 0
-886 -901 -5440 0
c (0<=( - aux1291 + SATLiteral(886) + SATLiteral(901)))
901 5440 0
886 5440 0
886 901 5439 0
c ((aux1291 - aux1292 + SATLiteral(856))<=0)
5439 -5442 0
5440 -5443 0
-856 -5442 0
-856 5439 -5443 0
-856 5440 -5445 0
c (0<=(aux1291 - aux1292 + SATLiteral(856)))
-5440 5445 0
-5439 5443 0
856 5445 0
856 -5440 5443 0
856 -5439 5442 0
c ((aux1288 + aux1290 - aux1293)<=0)
5436 -5447 0
5437 -5448 0
5430 -5447 0
5430 5436 -5448 0
5430 5437 -5450 0
5431 -5448 0
5431 5436 -5450 0
5431 5437 -5452 0
c (0<=(aux1288 + aux1290 - aux1293))
-5437 5452 0
-5436 5450 0
-5431 5452 0
-5431 -5437 5450 0
-5431 -5436 5448 0
-5430 5450 0
-5430 -5437 5448 0
-5430 -5436 5447 0
c (( - aux1294 + SATLiteral(-825) + SATLiteral(-945))<=0)
945 -5454 0
825 -5454 0
825 945 -5455 0
c (0<=( - aux1294 + SATLiteral(-825) + SATLiteral(-945)))
-945 5455 0
-825 5455 0
-825 -945 5454 0
c (( - aux1295 + SATLiteral(-840) + SATLiteral(-930))<=0)
930 -5457 0
840 -5457 0
840 930 -5458 0
c (0<=( - aux1295 + SATLiteral(-840) + SATLiteral(-930)))
-930 5458 0
-840 5458 0
-840 -930 5457 0
c (( - aux1296 + SATLiteral(-870) + SATLiteral(-915))<=0)
915 -5460 0
870 -5460 0
870 915 -5461 0
c (0<=( - aux1296 + SATLiteral(-870) + SATLiteral(-915)))
-915 5461 0
-870 5461 0
-870 -915 5460 0
c (( - aux1297 + SATLiteral(-885) + SATLiteral(-900))<=0)
900 -5463 0
885 -5463 0
885 900 -5464 0
c (0<=( - aux1297 + SATLiteral(-885) + SATLiteral(-900)))
-900 5464 0
-885 5464 0
-885 -900 5463 0
c ((aux1297 - aux1298 + SATLiteral(-855))<=0)
5463 -5466 0
5464 -5467 0
855 -5466 0
855 5463 -5467 0
855 5464 -5469 0
c (0<=(aux1297 - aux1298 + SATLiteral(-855)))
-5464 5469 0
-5463 5467 0
-855 5469 0
-855 -5464 5467 0
-855 -5463 5466 0
c ((aux1294 + aux1296 - aux1299)<=0)
5460 -5471 0
5461 -5472 0
5454 -5471 0
5454 5460 -5472 0
5454 5461 -5474 0
5455 -5472 0
5455 5460 -5474 0
5455 5461 -5476 0
c (0<=(aux1294 + aux1296 - aux1299))
-5461 5476 0
-5460 5474 0
-5455 5476 0
-5455 -5461 5474 0
-5455 -5460 5472 0
-5454 5474 0
-5454 -5461 5472 0
-5454 -5460 5471 0
c ((SATLiteral(947) + SATLiteral(1067) - aux1300)<=0)
-1067 -5478 0
-947 -5478 0
-947 -1067 -5479 0
c (0<=(SATLiteral(947) + SATLiteral(1067) - aux1300))
1067 5479 0
947 5479 0
947 1067 5478 0
c ((SATLiteral(962) + SATLiteral(1052) - aux1301)<=0)
-1052 -5481 0
-962 -5481 0
-962 -1052 -5482 0
c (0<=(SATLiteral(962) + SATLiteral(1052) - aux1301))
1052 5482 0
962 5482 0
962 1052 5481 0
c ((SATLiteral(992) + SATLiteral(1037) - aux1302)<=0)
-1037 -5484 0
-992 -5484 0
-992 -1037 -5485 0
c (0<=(SATLiteral(992) + SATLiteral(1037) - aux1302))
1037 5485 0
992 5485 0
992 1037 5484 0
c ((SATLiteral(1007) + SATLiteral(1022) - aux1303)<=0)
-1022 -5487 0
-1007 -5487 0
-1007 -1022 -5488 0
c (0<=(SATLiteral(1007) + SATLiteral(1022) - aux1303))
1022 5488 0
1007 5488 0
1007 1022 5487 0
c ((SATLiteral(977) + aux1303 - aux1304)<=0)
5487 -5490 0
5488 -5491 0
-977 -5490 0
-977 5487 -5491 0
-977 5488 -5493 0
c (0<=(SATLiteral(977) + aux1303 - aux1304))
-5488 5493 0
-5487 5491 0
977 5493 0
977 -5488 5491 0
977 -5487 5490 0
c ((aux1300 + aux1302 - aux1305)<=0)
5484 -5495 0
5485 -5496 0
5478 -5495 0
5478 5484 -5496 0
5478 5485 -5498 0
5479 -5496 0
5479 5484 -5498 0
5479 5485 -5500 0
c (0<=(aux1300 + aux1302 - aux1305))
-5485 5500 0
-5484 5498 0
-5479 5500 0
-5479 -5485 5498 0
-5479 -5484 5496 0
-5478 5498 0
-5478 -5485 5496 0
-5478 -5484 5495 0
c ((SATLiteral(949) + SATLiteral(1069) - aux1306)<=0)
-1069 -5502 0
-949 -5502 0
-949 -1069 -5503 0
c (0<=(SATLiteral(949) + SATLiteral(1069) - aux1306))
1069 5503 0
949 5503 0
949 1069 5502 0
c ((SATLiteral(964) + SATLiteral(1054) - aux1307)<=0)
-1054 -5505 0
-964 -5505 0
-964 -1054 -5506 0
c (0<=(SATLiteral(964) + SATLiteral(1054) - aux1307))
1054 5506 0
964 5506 0
964 1054 5505 0
c ((SATLiteral(994) + SATLiteral(1039) - aux1308)<=0)
-1039 -5508 0
-994 -5508 0
-994 -1039 -5509 0
c (0<=(SATLiteral(994) + SATLiteral(1039) - aux1308))
1039 5509 0
994 5509 0
994 1039 5508 0
c ((SATLiteral(1009) + SATLiteral(1024) - aux1309)<=0)
-1024 -5511 0
-1009 -5511 0
-1009 -1024 -5512 0
c (0<=(SATLiteral(1009) + SATLiteral(1024) - aux1309))
1024 5512 0
1009 5512 0
1009 1024 5511 0
c ((SATLiteral(979) + aux1309 - aux1310)<=0)
5511 -5514 0
5512 -5515 0
-979 -5514 0
-979 5511 -5515 0
-979 5512 -5517 0
c (0<=(SATLiteral(979) + aux1309 - aux1310))
-5512 5517 0
-5511 5515 0
979 5517 0
979 -5512 5515 0
979 -5511 5514 0
c ((aux1306 + aux1308 - aux1311)<=0)
5508 -5519 0
5509 -5520 0
5502 -5519 0
5502 5508 -5520 0
5502 5509 -5522 0
5503 -5520 0
5503 5508 -5522 0
5503 5509 -5524 0
c (0<=(aux1306 + aux1308 - aux1311))
-5509 5524 0
-5508 5522 0
-5503 5524 0
-5503 -5509 5522 0
-5503 -5508 5520 0
-5502 5522 0
-5502 -5509 5520 0
-5502 -5508 5519 0
c ((SATLiteral(951) + SATLiteral(1071) - aux1312)<=0)
-1071 -5526 0
-951 -5526 0
-951 -1071 -5527 0
c (0<=(SATLiteral(951) + SATLiteral(1071) - aux1312))
1071 5527 0
951 5527 0
951 1071 5526 0
c ((SATLiteral(966) + SATLiteral(1056) - aux1313)<=0)
-1056 -5529 0
-966 -5529 0
-966 -1056 -5530 0
c (0<=(SATLiteral(966) + SATLiteral(1056) - aux1313))
1056 5530 0
966 5530 0
966 1056 5529 0
c ((SATLiteral(996) + SATLiteral(1041) - aux1314)<=0)
-1041 -5532 0
-996 -5532 0
-996 -1041 -5533 0
c (0<=(SATLiteral(996) + SATLiteral(1041) - aux1314))
1041 5533 0
996 5533 0
996 1041 5532 0
c ((SATLiteral(1011) + SATLiteral(1026) - aux1315)<=0)
-1026 -5535 0
-1011 -5535 0
-1011 -1026 -5536 0
c (0<=(SATLiteral(1011) + SATLiteral(1026) - aux1315))
1026 5536 0
1011 5536 0
1011 1026 5535 0
c ((SATLiteral(981) + aux1315 - aux1316)<=0)
5535 -5538 0
5536 -5539 0
-981 -5538 0
-981 5535 -5539 0
-981 5536 -5541 0
c (0<=(SATLiteral(981) + aux1315 - aux1316))
-5536 5541 0
-5535 5539 0
981 5541 0
981 -5536 5539 0
981 -5535 5538 0
c ((aux1312 + aux1314 - aux1317)<=0)
5532 -5543 0
5533 -5544 0
5526 -5543 0
5526 5532 -5544 0
5526 5533 -5546 0
5527 -5544 0
5527 5532 -5546 0
5527 5533 -5548 0
c (0<=(aux1312 + aux1314 - aux1317))
-5533 5548 0
-5532 5546 0
-5527 5548 0
-5527 -5533 5546 0
-5527 -5532 5544 0
-5526 5546 0
-5526 -5533 5544 0
-5526 -5532 5543 0
c ((SATLiteral(953) + SATLiteral(1073) - aux1318)<=0)
-1073 -5550 0
-953 -5550 0
-953 -1073 -5551 0
c (0<=(SATLiteral(953) + SATLiteral(1073) - aux1318))
1073 5551 0
953 5551 0
953 1073 5550 0
c ((SATLiteral(968) + SATLiteral(1058) - aux1319)<=0)
-1058 -5553 0
-968 -5553 0
-968 -1058 -5554 0
c (0<=(SATLiteral(968) + SATLiteral(1058) - aux1319))
1058 5554 0
968 5554 0
968 1058 5553 0
c ((SATLiteral(998) + SATLiteral(1043) - aux1320)<=0)
-1043 -5556 0
-998 -5556 0
-998 -1043 -5557 0
c (0<=(SATLiteral(998) + SATLiteral(1043) - aux1320))
1043 5557 0
998 5557 0
998 1043 5556 0
c ((SATLiteral(1013) + SATLiteral(1028) - aux1321)<=0)
-1028 -5559 0
-1013 -5559 0
-1013 -1028 -5560 0
c (0<=(SATLiteral(1013) + SATLiteral(1028) - aux1321))
1028 5560 0
1013 5560 0
1013 1028 5559 0
c ((SATLiteral(983) + aux1321 - aux1322)<=0)
5559 -5562 0
5560 -5563 0
-983 -5562 0
-983 5559 -5563 0
-983 5560 -5565 0
c (0<=(SATLiteral(983) + aux1321 - aux1322))
-5560 5565 0
-5559 5563 0
983 5565 0
983 -5560 5563 0
983 -5559 5562 0
c ((aux1318 + aux1320 - aux1323)<=0)
5556 -5567 0
5557 -5568 0
5550 -5567 0
5550 5556 -5568 0
5550 5557 -5570 0
5551 -5568 0
5551 5556 -5570 0
5551 5557 -5572 0
c (0<=(aux1318 + aux1320 - aux1323))
-5557 5572 0
-5556 5570 0
-5551 5572 0
-5551 -5557 5570 0
-5551 -5556 5568 0
-5550 5570 0
-5550 -5557 5568 0
-5550 -5556 5567 0
c ((SATLiteral(955) + SATLiteral(1075) - aux1324)<=0)
-1075 -5574 0
-955 -5574 0
-955 -1075 -5575 0
c (0<=(SATLiteral(955) + SATLiteral(1075) - aux1324))
1075 5575 0
955 5575 0
955 1075 5574 0
c ((SATLiteral(970) + SATLiteral(1060) - aux1325)<=0)
-1060 -5577 0
-970 -5577 0
-970 -1060 -5578 0
c (0<=(SATLiteral(970) + SATLiteral(1060) - aux1325))
1060 5578 0
970 5578 0
970 1060 5577 0
c ((SATLiteral(1000) + SATLiteral(1045) - aux1326)<=0)
-1045 -5580 0
-1000 -5580 0
-1000 -1045 -5581 0
c (0<=(SATLiteral(1000) + SATLiteral(1045) - aux1326))
1045 5581 0
1000 5581 0
1000 1045 5580 0
c ((SATLiteral(1015) + SATLiteral(1030) - aux1327)<=0)
-1030 -5583 0
-1015 -5583 0
-1015 -1030 -5584 0
c (0<=(SATLiteral(1015) + SATLiteral(1030) - aux1327))
1030 5584 0
1015 5584 0
1015 1030 5583 0
c ((SATLiteral(985) + aux1327 - aux1328)<=0)
5583 -5586 0
5584 -5587 0
-985 -5586 0
-985 5583 -5587 0
-985 5584 -5589 0
c (0<=(SATLiteral(985) + aux1327 - aux1328))
-5584 5589 0
-5583 5587 0
985 5589 0
985 -5584 5587 0
985 -5583 5586 0
c ((aux1324 + aux1326 - aux1329)<=0)
5580 -5591 0
5581 -5592 0
5574 -5591 0
5574 5580 -5592 0
5574 5581 -5594 0
5575 -5592 0
5575 5580 -5594 0
5575 5581 -5596 0
c (0<=(aux1324 + aux1326 - aux1329))
-5581 5596 0
-5580 5594 0
-5575 5596 0
-5575 -5581 5594 0
-5575 -5580 5592 0
-5574 5594 0
-5574 -5581 5592 0
-5574 -5580 5591 0
c ((SATLiteral(957) + SATLiteral(1077) - aux1330)<=0)
-1077 -5598 0
-957 -5598 0
-957 -1077 -5599 0
c (0<=(SATLiteral(957) + SATLiteral(1077) - aux1330))
1077 5599 0
957 5599 0
957 1077 5598 0
c ((SATLiteral(972) + SATLiteral(1062) - aux1331)<=0)
-1062 -5601 0
-972 -5601 0
-972 -1062 -5602 0
c (0<=(SATLiteral(972) + SATLiteral(1062) - aux1331))
1062 5602 0
972 5602 0
972 1062 5601 0
c ((SATLiteral(1002) + SATLiteral(1047) - aux1332)<=0)
-1047 -5604 0
-1002 -5604 0
-1002 -1047 -5605 0
c (0<=(SATLiteral(1002) + SATLiteral(1047) - aux1332))
1047 5605 0
1002 5605 0
1002 1047 5604 0
c ((SATLiteral(1017) + SATLiteral(1032) - aux1333)<=0)
-1032 -5607 0
-1017 -5607 0
-1017 -1032 -5608 0
c (0<=(SATLiteral(1017) + SATLiteral(1032) - aux1333))
1032 5608 0
1017 5608 0
1017 1032 5607 0
c ((SATLiteral(987) + aux1333 - aux1334)<=0)
5607 -5610 0
5608 -5611 0
-987 -5610 0
-987 5607 -5611 0
-987 5608 -5613 0
c (0<=(SATLiteral(987) + aux1333 - aux1334))
-5608 5613 0
-5607 5611 0
987 5613 0
987 -5608 5611 0
987 -5607 5610 0
c ((aux1330 + aux1332 - aux1335)<=0)
5604 -5615 0
5605 -5616 0
5598 -5615 0
5598 5604 -5616 0
5598 5605 -5618 0
5599 -5616 0
5599 5604 -5618 0
5599 5605 -5620 0
c (0<=(aux1330 + aux1332 - aux1335))
-5605 5620 0
-5604 5618 0
-5599 5620 0
-5599 -5605 5618 0
-5599 -5604 5616 0
-5598 5618 0
-5598 -5605 5616 0
-5598 -5604 5615 0
c ((SATLiteral(959) + SATLiteral(1079) - aux1336)<=0)
-1079 -5622 0
-959 -5622 0
-959 -1079 -5623 0
c (0<=(SATLiteral(959) + SATLiteral(1079) - aux1336))
1079 5623 0
959 5623 0
959 1079 5622 0
c ((SATLiteral(974) + SATLiteral(1064) - aux1337)<=0)
-1064 -5625 0
-974 -5625 0
-974 -1064 -5626 0
c (0<=(SATLiteral(974) + SATLiteral(1064) - aux1337))
1064 5626 0
974 5626 0
974 1064 5625 0
c ((SATLiteral(1004) + SATLiteral(1049) - aux1338)<=0)
-1049 -5628 0
-1004 -5628 0
-1004 -1049 -5629 0
c (0<=(SATLiteral(1004) + SATLiteral(1049) - aux1338))
1049 5629 0
1004 5629 0
1004 1049 5628 0
c ((SATLiteral(1019) + SATLiteral(1034) - aux1339)<=0)
-1034 -5631 0
-1019 -5631 0
-1019 -1034 -5632 0
c (0<=(SATLiteral(1019) + SATLiteral(1034) - aux1339))
1034 5632 0
1019 5632 0
1019 1034 5631 0
c ((SATLiteral(989) + aux1339 - aux1340)<=0)
5631 -5634 0
5632 -5635 0
-989 -5634 0
-989 5631 -5635 0
-989 5632 -5637 0
c (0<=(SATLiteral(989) + aux1339 - aux1340))
-5632 5637 0
-5631 5635 0
989 5637 0
989 -5632 5635 0
989 -5631 5634 0
c ((aux1336 + aux1338 - aux1341)<=0)
5628 -5639 0
5629 -5640 0
5622 -5639 0
5622 5628 -5640 0
5622 5629 -5642 0
5623 -5640 0
5623 5628 -5642 0
5623 5629 -5644 0
c (0<=(aux1336 + aux1338 - aux1341))
-5629 5644 0
-5628 5642 0
-5623 5644 0
-5623 -5629 5642 0
-5623 -5628 5640 0
-5622 5642 0
-5622 -5629 5640 0
-5622 -5628 5639 0
c ((SATLiteral(961) + SATLiteral(1081) - aux1342)<=0)
-1081 -5646 0
-961 -5646 0
-961 -1081 -5647 0
c (0<=(SATLiteral(961) + SATLiteral(1081) - aux1342))
1081 5647 0
961 5647 0
961 1081 5646 0
c ((SATLiteral(976) + SATLiteral(1066) - aux1343)<=0)
-1066 -5649 0
-976 -5649 0
-976 -1066 -5650 0
c (0<=(SATLiteral(976) + SATLiteral(1066) - aux1343))
1066 5650 0
976 5650 0
976 1066 5649 0
c ((SATLiteral(1006) + SATLiteral(1051) - aux1344)<=0)
-1051 -5652 0
-1006 -5652 0
-1006 -1051 -5653 0
c (0<=(SATLiteral(1006) + SATLiteral(1051) - aux1344))
1051 5653 0
1006 5653 0
1006 1051 5652 0
c ((SATLiteral(1021) + SATLiteral(1036) - aux1345)<=0)
-1036 -5655 0
-1021 -5655 0
-1021 -1036 -5656 0
c (0<=(SATLiteral(1021) + SATLiteral(1036) - aux1345))
1036 5656 0
1021 5656 0
1021 1036 5655 0
c ((SATLiteral(991) + aux1345 - aux1346)<=0)
5655 -5658 0
5656 -5659 0
-991 -5658 0
-991 5655 -5659 0
-991 5656 -5661 0
c (0<=(SATLiteral(991) + aux1345 - aux1346))
-5656 5661 0
-5655 5659 0
991 5661 0
991 -5656 5659 0
991 -5655 5658 0
c ((aux1342 + aux1344 - aux1347)<=0)
5652 -5663 0
5653 -5664 0
5646 -5663 0
5646 5652 -5664 0
5646 5653 -5666 0
5647 -5664 0
5647 5652 -5666 0
5647 5653 -5668 0
c (0<=(aux1342 + aux1344 - aux1347))
-5653 5668 0
-5652 5666 0
-5647 5668 0
-5647 -5653 5666 0
-5647 -5652 5664 0
-5646 5666 0
-5646 -5653 5664 0
-5646 -5652 5663 0
c ((SATLiteral(-960) + SATLiteral(-1080) - aux1348)<=0)
1080 -5670 0
960 -5670 0
960 1080 -5671 0
c (0<=(SATLiteral(-960) + SATLiteral(-1080) - aux1348))
-1080 5671 0
-960 5671 0
-960 -1080 5670 0
c ((SATLiteral(-975) + SATLiteral(-1065) - aux1349)<=0)
1065 -5673 0
975 -5673 0
975 1065 -5674 0
c (0<=(SATLiteral(-975) + SATLiteral(-1065) - aux1349))
-1065 5674 0
-975 5674 0
-975 -1065 5673 0
c ((SATLiteral(-1005) + SATLiteral(-1050) - aux1350)<=0)
1050 -5676 0
1005 -5676 0
1005 1050 -5677 0
c (0<=(SATLiteral(-1005) + SATLiteral(-1050) - aux1350))
-1050 5677 0
-1005 5677 0
-1005 -1050 5676 0
c ((SATLiteral(-1020) + SATLiteral(-1035) - aux1351)<=0)
1035 -5679 0
1020 -5679 0
1020 1035 -5680 0
c (0<=(SATLiteral(-1020) + SATLiteral(-1035) - aux1351))
-1035 5680 0
-1020 5680 0
-1020 -1035 5679 0
c ((SATLiteral(-990) + aux1351 - aux1352)<=0)
5679 -5682 0
5680 -5683 0
990 -5682 0
990 5679 -5683 0
990 5680 -5685 0
c (0<=(SATLiteral(-990) + aux1351 - aux1352))
-5680 5685 0
-5679 5683 0
-990 5685 0
-990 -5680 5683 0
-990 -5679 5682 0
c ((aux1348 + aux1350 - aux1353)<=0)
5676 -5687 0
5677 -5688 0
5670 -5687 0
5670 5676 -5688 0
5670 5677 -5690 0
5671 -5688 0
5671 5676 -5690 0
5671 5677 -5692 0
c (0<=(aux1348 + aux1350 - aux1353))
-5677 5692 0
-5676 5690 0
-5671 5692 0
-5671 -5677 5690 0
-5671 -5676 5688 0
-5670 5690 0
-5670 -5677 5688 0
-5670 -5676 5687 0
c (( - aux1354 + SATLiteral(1082) + SATLiteral(1202))<=0)
-1202 -5694 0
-1082 -5694 0
-1082 -1202 -5695 0
c (0<=( - aux1354 + SATLiteral(1082) + SATLiteral(1202)))
1202 5695 0
1082 5695 0
1082 1202 5694 0
c (( - aux1355 + SATLiteral(1097) + SATLiteral(1187))<=0)
-1187 -5697 0
-1097 -5697 0
-1097 -1187 -5698 0
c (0<=( - aux1355 + SATLiteral(1097) + SATLiteral(1187)))
1187 5698 0
1097 5698 0
1097 1187 5697 0
c (( - aux1356 + SATLiteral(1127) + SATLiteral(1172))<=0)
-1172 -5700 0
-1127 -5700 0
-1127 -1172 -5701 0
c (0<=( - aux1356 + SATLiteral(1127) + SATLiteral(1172)))
1172 5701 0
1127 5701 0
1127 1172 5700 0
c (( - aux1357 + SATLiteral(1142) + SATLiteral(1157))<=0)
-1157 -5703 0
-1142 -5703 0
-1142 -1157 -5704 0
c (0<=( - aux1357 + SATLiteral(1142) + SATLiteral(1157)))
1157 5704 0
1142 5704 0
1142 1157 5703 0
c ((aux1357 - aux1358 + SATLiteral(1112))<=0)
5703 -5706 0
5704 -5707 0
-1112 -5706 0
-1112 5703 -5707 0
-1112 5704 -5709 0
c (0<=(aux1357 - aux1358 + SATLiteral(1112)))
-5704 5709 0
-5703 5707 0
1112 5709 0
1112 -5704 5707 0
1112 -5703 5706 0
c ((aux1354 + aux1356 - aux1359)<=0)
5700 -5711 0
5701 -5712 0
5694 -5711 0
5694 5700 -5712 0
5694 5701 -5714 0
5695 -5712 0
5695 5700 -5714 0
5695 5701 -5716 0
c (0<=(aux1354 + aux1356 - aux1359))
-5701 5716 0
-5700 5714 0
-5695 5716 0
-5695 -5701 5714 0
-5695 -5700 5712 0
-5694 5714 0
-5694 -5701 5712 0
-5694 -5700 5711 0
c (( - aux1360 + SATLiteral(1084) + SATLiteral(1204))<=0)
-1204 -5718 0
-1084 -5718 0
-1084 -1204 -5719 0
c (0<=( - aux1360 + SATLiteral(1084) + SATLiteral(1204)))
1204 5719 0
1084 5719 0
1084 1204 5718 0
c (( - aux1361 + SATLiteral(1099) + SATLiteral(1189))<=0)
-1189 -5721 0
-1099 -5721 0
-1099 -1189 -5722 0
c (0<=( - aux1361 + SATLiteral(1099) + SATLiteral(1189)))
1189 5722 0
1099 5722 0
1099 1189 5721 0
c (( - aux1362 + SATLiteral(1129) + SATLiteral(1174))<=0)
-1174 -5724 0
-1129 -5724 0
-1129 -1174 -5725 0
c (0<=( - aux1362 + SATLiteral(1129) + SATLiteral(1174)))
1174 5725 0
1129 5725 0
1129 1174 5724 0
c (( - aux1363 + SATLiteral(1144) + SATLiteral(1159))<=0)
-1159 -5727 0
-1144 -5727 0
-1144 -1159 -5728 0
c (0<=( - aux1363 + SATLiteral(1144) + SATLiteral(1159)))
1159 5728 0
1144 5728 0
1144 1159 5727 0
c ((aux1363 - aux1364 + SATLiteral(1114))<=0)
5727 -5730 0
5728 -5731 0
-1114 -5730 0
-1114 5727 -5731 0
-1114 5728 -5733 0
c (0<=(aux1363 - aux1364 + SATLiteral(1114)))
-5728 5733 0
-5727 5731 0
1114 5733 0
1114 -5728 5731 0
1114 -5727 5730 0
c ((aux1360 + aux1362 - aux1365)<=0)
5724 -5735 0
5725 -5736 0
5718 -5735 0
5718 5724 -5736 0
5718 5725 -5738 0
5719 -5736 0
5719 5724 -5738 0
5719 5725 -5740 0
c (0<=(aux1360 + aux1362 - aux1365))
-5725 5740 0
-5724 5738 0
-5719 5740 0
-5719 -5725 5738 0
-5719 -5724 5736 0
-5718 5738 0
-5718 -5725 5736 0
-5718 -5724 5735 0
c (( - aux1366 + SATLiteral(1086) + SATLiteral(1206))<=0)
-1206 -5742 0
-1086 -5742 0
-1086 -1206 -5743 0
c (0<=( - aux1366 + SATLiteral(1086) + SATLiteral(1206)))
1206 5743 0
1086 5743 0
1086 1206 5742 0
c (( - aux1367 + SATLiteral(1101) + SATLiteral(1191))<=0)
-1191 -5745 0
-1101 -5745 0
-1101 -1191 -5746 0
c (0<=( - aux1367 + SATLiteral(1101) + SATLiteral(1191)))
1191 5746 0
1101 5746 0
1101 1191 5745 0
c (( - aux1368 + SATLiteral(1131) + SATLiteral(1176))<=0)
-1176 -5748 0
-1131 -5748 0
-1131 -1176 -5749 0
c (0<=( - aux1368 + SATLiteral(1131) + SATLiteral(1176)))
1176 5749 0
1131 5749 0
1131 1176 5748 0
c (( - aux1369 + SATLiteral(1146) + SATLiteral(1161))<=0)
-1161 -5751 0
-1146 -5751 0
-1146 -1161 -5752 0
c (0<=( - aux1369 + SATLiteral(1146) + SATLiteral(1161)))
1161 5752 0
1146 5752 0
1146 1161 5751 0
c ((aux1369 - aux1370 + SATLiteral(1116))<=0)
5751 -5754 0
5752 -5755 0
-1116 -5754 0
-1116 5751 -5755 0
-1116 5752 -5757 0
c (0<=(aux1369 - aux1370 + SATLiteral(1116)))
-5752 5757 0
-5751 5755 0
1116 5757 0
1116 -5752 5755 0
1116 -5751 5754 0
c ((aux1366 + aux1368 - aux1371)<=0)
5748 -5759 0
5749 -5760 0
5742 -5759 0
5742 5748 -5760 0
5742 5749 -5762 0
5743 -5760 0
5743 5748 -5762 0
5743 5749 -5764 0
c (0<=(aux1366 + aux1368 - aux1371))
-5749 5764 0
-5748 5762 0
-5743 5764 0
-5743 -5749 5762 0
-5743 -5748 5760 0
-5742 5762 0
-5742 -5749 5760 0
-5742 -5748 5759 0
c (( - aux1372 + SATLiteral(1088) + SATLiteral(1208))<=0)
-1208 -5766 0
-1088 -5766 0
-1088 -1208 -5767 0
c (0<=( - aux1372 + SATLiteral(1088) + SATLiteral(1208)))
1208 5767 0
1088 5767 0
1088 1208 5766 0
c (( - aux1373 + SATLiteral(1103) + SATLiteral(1193))<=0)
-1193 -5769 0
-1103 -5769 0
-1103 -1193 -5770 0
c (0<=( - aux1373 + SATLiteral(1103) + SATLiteral(1193)))
1193 5770 0
1103 5770 0
1103 1193 5769 0
c (( - aux1374 + SATLiteral(1133) + SATLiteral(1178))<=0)
-1178 -5772 0
-1133 -5772 0
-1133 -1178 -5773 0
c (0<=( - aux1374 + SATLiteral(1133) + SATLiteral(1178)))
1178 5773 0
1133 5773 0
1133 1178 5772 0
c (( - aux1375 + SATLiteral(1148) + SATLiteral(1163))<=0)
-1163 -5775 0
-1148 -5775 0
-1148 -1163 -5776 0
c (0<=( - aux1375 + SATLiteral(1148) + SATLiteral(1163)))
1163 5776 0
1148 5776 0
1148 1163 5775 0
c ((aux1375 - aux1376 + SATLiteral(1118))<=0)
5775 -5778 0
5776 -5779 0
-1118 -5778 0
-1118 5775 -5779 0
-1118 5776 -5781 0
c (0<=(aux1375 - aux1376 + SATLiteral(1118)))
-5776 5781 0
-5775 5779 0
1118 5781 0
1118 -5776 5779 0
1118 -5775 5778 0
c ((aux1372 + aux1374 - aux1377)<=0)
5772 -5783 0
5773 -5784 0
5766 -5783 0
5766 5772 -5784 0
5766 5773 -5786 0
5767 -5784 0
5767 5772 -5786 0
5767 5773 -5788 0
c (0<=(aux1372 + aux1374 - aux1377))
-5773 5788 0
-5772 5786 0
-5767 5788 0
-5767 -5773 5786 0
-5767 -5772 5784 0
-5766 5786 0
-5766 -5773 5784 0
-5766 -5772 5783 0
c (( - aux1378 + SATLiteral(1090) + SATLiteral(1210))<=0)
-1210 -5790 0
-1090 -5790 0
-1090 -1210 -5791 0
c (0<=( - aux1378 + SATLiteral(1090) + SATLiteral(1210)))
1210 5791 0
1090 5791 0
1090 1210 5790 0
c (( - aux1379 + SATLiteral(1105) + SATLiteral(1195))<=0)
-1195 -5793 0
-1105 -5793 0
-1105 -1195 -5794 0
c (0<=( - aux1379 + SATLiteral(1105) + SATLiteral(1195)))
1195 5794 0
1105 5794 0
1105 1195 5793 0
c (( - aux1380 + SATLiteral(1135) + SATLiteral(1180))<=0)
-1180 -5796 0
-1135 -5796 0
-1135 -1180 -5797 0
c (0<=( - aux1380 + SATLiteral(1135) + SATLiteral(1180)))
1180 5797 0
1135 5797 0
1135 1180 5796 0
c (( - aux1381 + SATLiteral(1150) + SATLiteral(1165))<=0)
-1165 -5799 0
-1150 -5799 0
-1150 -1165 -5800 0
c (0<=( - aux1381 + SATLiteral(1150) + SATLiteral(1165)))
1165 5800 0
1150 5800 0
1150 1165 5799 0
c ((aux1381 - aux1382 + SATLiteral(1120))<=0)
5799 -5802 0
5800 -5803 0
-1120 -5802 0
-1120 5799 -5803 0
-1120 5800 -5805 0
c (0<=(aux1381 - aux1382 + SATLiteral(1120)))
-5800 5805 0
-5799 5803 0
1120 5805 0
1120 -5800 5803 0
1120 -5799 5802 0
c ((aux1378 + aux1380 - aux1383)<=0)
5796 -5807 0
5797 -5808 0
5790 -5807 0
5790 5796 -5808 0
5790 5797 -5810 0
5791 -5808 0
5791 5796 -5810 0
5791 5797 -5812 0
c (0<=(aux1378 + aux1380 - aux1383))
-5797 5812 0
-5796 5810 0
-5791 5812 0
-5791 -5797 5810 0
-5791 -5796 5808 0
-5790 5810 0
-5790 -5797 5808 0
-5790 -5796 5807 0
c (( - aux1384 + SATLiteral(1092) + SATLiteral(1212))<=0)
-1212 -5814 0
-1092 -5814 0
-1092 -1212 -5815 0
c (0<=( - aux1384 + SATLiteral(1092) + SATLiteral(1212)))
1212 5815 0
1092 5815 0
1092 1212 5814 0
c (( - aux1385 + SATLiteral(1107) + SATLiteral(1197))<=0)
-1197 -5817 0
-1107 -5817 0
-1107 -1197 -5818 0
c (0<=( - aux1385 + SATLiteral(1107) + SATLiteral(1197)))
1197 5818 0
1107 5818 0
1107 1197 5817 0
c (( - aux1386 + SATLiteral(1137) + SATLiteral(1182))<=0)
-1182 -5820 0
-1137 -5820 0
-1137 -1182 -5821 0
c (0<=( - aux1386 + SATLiteral(1137) + SATLiteral(1182)))
1182 5821 0
1137 5821 0
1137 1182 5820 0
c (( - aux1387 + SATLiteral(1152) + SATLiteral(1167))<=0)
-1167 -5823 0
-1152 -5823 0
-1152 -1167 -5824 0
c (0<=( - aux1387 + SATLiteral(1152) + SATLiteral(1167)))
1167 5824 0
1152 5824 0
1152 1167 5823 0
c ((aux1387 - aux1388 + SATLiteral(1122))<=0)
5823 -5826 0
5824 -5827 0
-1122 -5826 0
-1122 5823 -5827 0
-1122 5824 -5829 0
c (0<=(aux1387 - aux1388 + SATLiteral(1122)))
-5824 5829 0
-5823 5827 0
1122 5829 0
1122 -5824 5827 0
1122 -5823 5826 0
c ((aux1384 + aux1386 - aux1389)<=0)
5820 -5831 0
5821 -5832 0
5814 -5831 0
5814 5820 -5832 0
5814 5821 -5834 0
5815 -5832 0
5815 5820 -5834 0
5815 5821 -5836 0
c (0<=(aux1384 + aux1386 - aux1389))
-5821 5836 0
-5820 5834 0
-5815 5836 0
-5815 -5821 5834 0
-5815 -5820 5832 0
-5814 5834 0
-5814 -5821 5832 0
-5814 -5820 5831 0
c (( - aux1390 + SATLiteral(1094) + SATLiteral(1214))<=0)
-1214 -5838 0
-1094 -5838 0
-1094 -1214 -5839 0
c (0<=( - aux1390 + SATLiteral(1094) + SATLiteral(1214)))
1214 5839 0
1094 5839 0
1094 1214 5838 0
c (( - aux1391 + SATLiteral(1109) + SATLiteral(1199))<=0)
-1199 -5841 0
-1109 -5841 0
-1109 -1199 -5842 0
c (0<=( - aux1391 + SATLiteral(1109) + SATLiteral(1199)))
1199 5842 0
1109 5842 0
1109 1199 5841 0
c (( - aux1392 + SATLiteral(1139) + SATLiteral(1184))<=0)
-1184 -5844 0
-1139 -5844 0
-1139 -1184 -5845 0
c (0<=( - aux1392 + SATLiteral(1139) + SATLiteral(1184)))
1184 5845 0
1139 5845 0
1139 1184 5844 0
c (( - aux1393 + SATLiteral(1154) + SATLiteral(1169))<=0)
-1169 -5847 0
-1154 -5847 0
-1154 -1169 -5848 0
c (0<=( - aux1393 + SATLiteral(1154) + SATLiteral(1169)))
1169 5848 0
1154 5848 0
1154 1169 5847 0
c ((aux1393 - aux1394 + SATLiteral(1124))<=0)
5847 -5850 0
5848 -5851 0
-1124 -5850 0
-1124 5847 -5851 0
-1124 5848 -5853 0
c (0<=(aux1393 - aux1394 + SATLiteral(1124)))
-5848 5853 0
-5847 5851 0
1124 5853 0
1124 -5848 5851 0
1124 -5847 5850 0
c ((aux1390 + aux1392 - aux1395)<=0)
5844 -5855 0
5845 -5856 0
5838 -5855 0
5838 5844 -5856 0
5838 5845 -5858 0
5839 -5856 0
5839 5844 -5858 0
5839 5845 -5860 0
c (0<=(aux1390 + aux1392 - aux1395))
-5845 5860 0
-5844 5858 0
-5839 5860 0
-5839 -5845 5858 0
-5839 -5844 5856 0
-5838 5858 0
-5838 -5845 5856 0
-5838 -5844 5855 0
c (( - aux1396 + SATLiteral(1096) + SATLiteral(1216))<=0)
-1216 -5862 0
-1096 -5862 0
-1096 -1216 -5863 0
c (0<=( - aux1396 + SATLiteral(1096) + SATLiteral(1216)))
1216 5863 0
1096 5863 0
1096 1216 5862 0
c (( - aux1397 + SATLiteral(1111) + SATLiteral(1201))<=0)
-1201 -5865 0
-1111 -5865 0
-1111 -1201 -5866 0
c (0<=( - aux1397 + SATLiteral(1111) + SATLiteral(1201)))
1201 5866 0
1111 5866 0
1111 1201 5865 0
c (( - aux1398 + SATLiteral(1141) + SATLiteral(1186))<=0)
-1186 -5868 0
-1141 -5868 0
-1141 -1186 -5869 0
c (0<=( - aux1398 + SATLiteral(1141) + SATLiteral(1186)))
1186 5869 0
1141 5869 0
1141 1186 5868 0
c (( - aux1399 + SATLiteral(1156) + SATLiteral(1171))<=0)
-1171 -5871 0
-1156 -5871 0
-1156 -1171 -5872 0
c (0<=( - aux1399 + SATLiteral(1156) + SATLiteral(1171)))
1171 5872 0
1156 5872 0
1156 1171 5871 0
c ((aux1399 - aux1400 + SATLiteral(1126))<=0)
5871 -5874 0
5872 -5875 0
-1126 -5874 0
-1126 5871 -5875 0
-1126 5872 -5877 0
c (0<=(aux1399 - aux1400 + SATLiteral(1126)))
-5872 5877 0
-5871 5875 0
1126 5877 0
1126 -5872 5875 0
1126 -5871 5874 0
c ((aux1396 + aux1398 - aux1401)<=0)
5868 -5879 0
5869 -5880 0
5862 -5879 0
5862 5868 -5880 0
5862 5869 -5882 0
5863 -5880 0
5863 5868 -5882 0
5863 5869 -5884 0
c (0<=(aux1396 + aux1398 - aux1401))
-5869 5884 0
-5868 5882 0
-5863 5884 0
-5863 -5869 5882 0
-5863 -5868 5880 0
-5862 5882 0
-5862 -5869 5880 0
-5862 -5868 5879 0
c (( - aux1402 + SATLiteral(-1095) + SATLiteral(-1215))<=0)
1215 -5886 0
1095 -5886 0
1095 1215 -5887 0
c (0<=( - aux1402 + SATLiteral(-1095) + SATLiteral(-1215)))
-1215 5887 0
-1095 5887 0
-1095 -1215 5886 0
c (( - aux1403 + SATLiteral(-1110) + SATLiteral(-1200))<=0)
1200 -5889 0
1110 -5889 0
1110 1200 -5890 0
c (0<=( - aux1403 + SATLiteral(-1110) + SATLiteral(-1200)))
-1200 5890 0
-1110 5890 0
-1110 -1200 5889 0
c (( - aux1404 + SATLiteral(-1140) + SATLiteral(-1185))<=0)
1185 -5892 0
1140 -5892 0
1140 1185 -5893 0
c (0<=( - aux1404 + SATLiteral(-1140) + SATLiteral(-1185)))
-1185 5893 0
-1140 5893 0
-1140 -1185 5892 0
c (( - aux1405 + SATLiteral(-1155) + SATLiteral(-1170))<=0)
1170 -5895 0
1155 -5895 0
1155 1170 -5896 0
c (0<=( - aux1405 + SATLiteral(-1155) + SATLiteral(-1170)))
-1170 5896 0
-1155 5896 0
-1155 -1170 5895 0
c ((aux1405 - aux1406 + SATLiteral(-1125))<=0)
5895 -5898 0
5896 -5899 0
1125 -5898 0
1125 5895 -5899 0
1125 5896 -5901 0
c (0<=(aux1405 - aux1406 + SATLiteral(-1125)))
-5896 5901 0
-5895 5899 0
-1125 5901 0
-1125 -5896 5899 0
-1125 -5895 5898 0
c ((aux1402 + aux1404 - aux1407)<=0)
5892 -5903 0
5893 -5904 0
5886 -5903 0
5886 5892 -5904 0
5886 5893 -5906 0
5887 -5904 0
5887 5892 -5906 0
5887 5893 -5908 0
c (0<=(aux1402 + aux1404 - aux1407))
-5893 5908 0
-5892 5906 0
-5887 5908 0
-5887 -5893 5906 0
-5887 -5892 5904 0
-5886 5906 0
-5886 -5893 5904 0
-5886 -5892 5903 0
c ((SATLiteral(272) - aux1408 + SATLiteral(167))<=0)
-167 -5910 0
-272 -5910 0
-272 -167 -5911 0
c (0<=(SATLiteral(272) - aux1408 + SATLiteral(167)))
167 5911 0
272 5911 0
272 167 5910 0
c ((SATLiteral(287) - aux1409 + SATLiteral(152))<=0)
-152 -5913 0
-287 -5913 0
-287 -152 -5914 0
c (0<=(SATLiteral(287) - aux1409 + SATLiteral(152)))
152 5914 0
287 5914 0
287 152 5913 0
c ((SATLiteral(2) - aux1410 + SATLiteral(137))<=0)
-137 -5916 0
-2 -5916 0
-2 -137 -5917 0
c (0<=(SATLiteral(2) - aux1410 + SATLiteral(137)))
137 5917 0
2 5917 0
2 137 5916 0
c ((SATLiteral(17) + SATLiteral(32) - aux1411)<=0)
-32 -5919 0
-17 -5919 0
-17 -32 -5920 0
c (0<=(SATLiteral(17) + SATLiteral(32) - aux1411))
32 5920 0
17 5920 0
17 32 5919 0
c ((SATLiteral(302) + aux1411 - aux1412)<=0)
5919 -5922 0
5920 -5923 0
-302 -5922 0
-302 5919 -5923 0
-302 5920 -5925 0
c (0<=(SATLiteral(302) + aux1411 - aux1412))
-5920 5925 0
-5919 5923 0
302 5925 0
302 -5920 5923 0
302 -5919 5922 0
c ((aux1408 + aux1410 - aux1413)<=0)
5916 -5927 0
5917 -5928 0
5910 -5927 0
5910 5916 -5928 0
5910 5917 -5930 0
5911 -5928 0
5911 5916 -5930 0
5911 5917 -5932 0
c (0<=(aux1408 + aux1410 - aux1413))
-5917 5932 0
-5916 5930 0
-5911 5932 0
-5911 -5917 5930 0
-5911 -5916 5928 0
-5910 5930 0
-5910 -5917 5928 0
-5910 -5916 5927 0
c ((SATLiteral(274) - aux1414 + SATLiteral(169))<=0)
-169 -5934 0
-274 -5934 0
-274 -169 -5935 0
c (0<=(SATLiteral(274) - aux1414 + SATLiteral(169)))
169 5935 0
274 5935 0
274 169 5934 0
c ((SATLiteral(289) - aux1415 + SATLiteral(154))<=0)
-154 -5937 0
-289 -5937 0
-289 -154 -5938 0
c (0<=(SATLiteral(289) - aux1415 + SATLiteral(154)))
154 5938 0
289 5938 0
289 154 5937 0
c ((SATLiteral(4) - aux1416 + SATLiteral(139))<=0)
-139 -5940 0
-4 -5940 0
-4 -139 -5941 0
c (0<=(SATLiteral(4) - aux1416 + SATLiteral(139)))
139 5941 0
4 5941 0
4 139 5940 0
c ((SATLiteral(19) + SATLiteral(34) - aux1417)<=0)
-34 -5943 0
-19 -5943 0
-19 -34 -5944 0
c (0<=(SATLiteral(19) + SATLiteral(34) - aux1417))
34 5944 0
19 5944 0
19 34 5943 0
c ((SATLiteral(304) + aux1417 - aux1418)<=0)
5943 -5946 0
5944 -5947 0
-304 -5946 0
-304 5943 -5947 0
-304 5944 -5949 0
c (0<=(SATLiteral(304) + aux1417 - aux1418))
-5944 5949 0
-5943 5947 0
304 5949 0
304 -5944 5947 0
304 -5943 5946 0
c ((aux1414 + aux1416 - aux1419)<=0)
5940 -5951 0
5941 -5952 0
5934 -5951 0
5934 5940 -5952 0
5934 5941 -5954 0
5935 -5952 0
5935 5940 -5954 0
5935 5941 -5956 0
c (0<=(aux1414 + aux1416 - aux1419))
-5941 5956 0
-5940 5954 0
-5935 5956 0
-5935 -5941 5954 0
-5935 -5940 5952 0
-5934 5954 0
-5934 -5941 5952 0
-5934 -5940 5951 0
c ((SATLiteral(276) - aux1420 + SATLiteral(171))<=0)
-171 -5958 0
-276 -5958 0
-276 -171 -5959 0
c (0<=(SATLiteral(276) - aux1420 + SATLiteral(171)))
171 5959 0
276 5959 0
276 171 5958 0
c ((SATLiteral(291) - aux1421 + SATLiteral(156))<=0)
-156 -5961 0
-291 -5961 0
-291 -156 -5962 0
c (0<=(SATLiteral(291) - aux1421 + SATLiteral(156)))
156 5962 0
291 5962 0
291 156 5961 0
c ((SATLiteral(6) - aux1422 + SATLiteral(141))<=0)
-141 -5964 0
-6 -5964 0
-6 -141 -5965 0
c (0<=(SATLiteral(6) - aux1422 + SATLiteral(141)))
141 5965 0
6 5965 0
6 141 5964 0
c ((SATLiteral(21) + SATLiteral(36) - aux1423)<=0)
-36 -5967 0
-21 -5967 0
-21 -36 -5968 0
c (0<=(SATLiteral(21) + SATLiteral(36) - aux1423))
36 5968 0
21 5968 0
21 36 5967 0
c ((SATLiteral(306) + aux1423 - aux1424)<=0)
5967 -5970 0
5968 -5971 0
-306 -5970 0
-306 5967 -5971 0
-306 5968 -5973 0
c (0<=(SATLiteral(306) + aux1423 - aux1424))
-5968 5973 0
-5967 5971 0
306 5973 0
306 -5968 5971 0
306 -5967 5970 0
c ((aux1420 + aux1422 - aux1425)<=0)
5964 -5975 0
5965 -5976 0
5958 -5975 0
5958 5964 -5976 0
5958 5965 -5978 0
5959 -5976 0
5959 5964 -5978 0
5959 5965 -5980 0
c (0<=(aux1420 + aux1422 - aux1425))
-5965 5980 0
-5964 5978 0
-5959 5980 0
-5959 -5965 5978 0
-5959 -5964 5976 0
-5958 5978 0
-5958 -5965 5976 0
-5958 -5964 5975 0
c ((SATLiteral(278) - aux1426 + SATLiteral(173))<=0)
-173 -5982 0
-278 -5982 0
-278 -173 -5983 0
c (0<=(SATLiteral(278) - aux1426 + SATLiteral(173)))
173 5983 0
278 5983 0
278 173 5982 0
c ((SATLiteral(293) - aux1427 + SATLiteral(158))<=0)
-158 -5985 0
-293 -5985 0
-293 -158 -5986 0
c (0<=(SATLiteral(293) - aux1427 + SATLiteral(158)))
158 5986 0
293 5986 0
293 158 5985 0
c ((SATLiteral(8) - aux1428 + SATLiteral(143))<=0)
-143 -5988 0
-8 -5988 0
-8 -143 -5989 0
c (0<=(SATLiteral(8) - aux1428 + SATLiteral(143)))
143 5989 0
8 5989 0
8 143 5988 0
c ((SATLiteral(23) + SATLiteral(38) - aux1429)<=0)
-38 -5991 0
-23 -5991 0
-23 -38 -5992 0
c (0<=(SATLiteral(23) + SATLiteral(38) - aux1429))
38 5992 0
23 5992 0
23 38 5991 0
c ((SATLiteral(308) + aux1429 - aux1430)<=0)
5991 -5994 0
5992 -5995 0
-308 -5994 0
-308 5991 -5995 0
-308 5992 -5997 0
c (0<=(SATLiteral(308) + aux1429 - aux1430))
-5992 5997 0
-5991 5995 0
308 5997 0
308 -5992 5995 0
308 -5991 5994 0
c ((aux1426 + aux1428 - aux1431)<=0)
5988 -5999 0
5989 -6000 0
5982 -5999 0
5982 5988 -6000 0
5982 5989 -6002 0
5983 -6000 0
5983 5988 -6002 0
5983 5989 -6004 0
c (0<=(aux1426 + aux1428 - aux1431))
-5989 6004 0
-5988 6002 0
-5983 6004 0
-5983 -5989 6002 0
-5983 -5988 6000 0
-5982 6002 0
-5982 -5989 6000 0
-5982 -5988 5999 0
c ((SATLiteral(280) - aux1432 + SATLiteral(175))<=0)
-175 -6006 0
-280 -6006 0
-280 -175 -6007 0
c (0<=(SATLiteral(280) - aux1432 + SATLiteral(175)))
175 6007 0
280 6007 0
280 175 6006 0
c ((SATLiteral(295) - aux1433 + SATLiteral(160))<=0)
-160 -6009 0
-295 -6009 0
-295 -160 -6010 0
c (0<=(SATLiteral(295) - aux1433 + SATLiteral(160)))
160 6010 0
295 6010 0
295 160 6009 0
c ((SATLiteral(10) - aux1434 + SATLiteral(145))<=0)
-145 -6012 0
-10 -6012 0
-10 -145 -6013 0
c (0<=(SATLiteral(10) - aux1434 + SATLiteral(145)))
145 6013 0
10 6013 0
10 145 6012 0
c ((SATLiteral(25) + SATLiteral(40) - aux1435)<=0)
-40 -6015 0
-25 -6015 0
-25 -40 -6016 0
c (0<=(SATLiteral(25) + SATLiteral(40) - aux1435))
40 6016 0
25 6016 0
25 40 6015 0
c ((SATLiteral(310) + aux1435 - aux1436)<=0)
6015 -6018 0
6016 -6019 0
-310 -6018 0
-310 6015 -6019 0
-310 6016 -6021 0
c (0<=(SATLiteral(310) + aux1435 - aux1436))
-6016 6021 0
-6015 6019 0
310 6021 0
310 -6016 6019 0
310 -6015 6018 0
c ((aux1432 + aux1434 - aux1437)<=0)
6012 -6023 0
6013 -6024 0
6006 -6023 0
6006 6012 -6024 0
6006 6013 -6026 0
6007 -6024 0
6007 6012 -6026 0
6007 6013 -6028 0
c (0<=(aux1432 + aux1434 - aux1437))
-6013 6028 0
-6012 6026 0
-6007 6028 0
-6007 -6013 6026 0
-6007 -6012 6024 0
-6006 6026 0
-6006 -6013 6024 0
-6006 -6012 6023 0
c ((SATLiteral(282) - aux1438 + SATLiteral(177))<=0)
-177 -6030 0
-282 -6030 0
-282 -177 -6031 0
c (0<=(SATLiteral(282) - aux1438 + SATLiteral(177)))
177 6031 0
282 6031 0
282 177 6030 0
c ((SATLiteral(297) - aux1439 + SATLiteral(162))<=0)
-162 -6033 0
-297 -6033 0
-297 -162 -6034 0
c (0<=(SATLiteral(297) - aux1439 + SATLiteral(162)))
162 6034 0
297 6034 0
297 162 6033 0
c ((SATLiteral(12) - aux1440 + SATLiteral(147))<=0)
-147 -6036 0
-12 -6036 0
-12 -147 -6037 0
c (0<=(SATLiteral(12) - aux1440 + SATLiteral(147)))
147 6037 0
12 6037 0
12 147 6036 0
c ((SATLiteral(27) + SATLiteral(42) - aux1441)<=0)
-42 -6039 0
-27 -6039 0
-27 -42 -6040 0
c (0<=(SATLiteral(27) + SATLiteral(42) - aux1441))
42 6040 0
27 6040 0
27 42 6039 0
c ((SATLiteral(312) + aux1441 - aux1442)<=0)
6039 -6042 0
6040 -6043 0
-312 -6042 0
-312 6039 -6043 0
-312 6040 -6045 0
c (0<=(SATLiteral(312) + aux1441 - aux1442))
-6040 6045 0
-6039 6043 0
312 6045 0
312 -6040 6043 0
312 -6039 6042 0
c ((aux1438 + aux1440 - aux1443)<=0)
6036 -6047 0
6037 -6048 0
6030 -6047 0
6030 6036 -6048 0
6030 6037 -6050 0
6031 -6048 0
6031 6036 -6050 0
6031 6037 -6052 0
c (0<=(aux1438 + aux1440 - aux1443))
-6037 6052 0
-6036 6050 0
-6031 6052 0
-6031 -6037 6050 0
-6031 -6036 6048 0
-6030 6050 0
-6030 -6037 6048 0
-6030 -6036 6047 0
c ((SATLiteral(284) - aux1444 + SATLiteral(179))<=0)
-179 -6054 0
-284 -6054 0
-284 -179 -6055 0
c (0<=(SATLiteral(284) - aux1444 + SATLiteral(179)))
179 6055 0
284 6055 0
284 179 6054 0
c ((SATLiteral(299) - aux1445 + SATLiteral(164))<=0)
-164 -6057 0
-299 -6057 0
-299 -164 -6058 0
c (0<=(SATLiteral(299) - aux1445 + SATLiteral(164)))
164 6058 0
299 6058 0
299 164 6057 0
c ((SATLiteral(14) - aux1446 + SATLiteral(149))<=0)
-149 -6060 0
-14 -6060 0
-14 -149 -6061 0
c (0<=(SATLiteral(14) - aux1446 + SATLiteral(149)))
149 6061 0
14 6061 0
14 149 6060 0
c ((SATLiteral(29) + SATLiteral(44) - aux1447)<=0)
-44 -6063 0
-29 -6063 0
-29 -44 -6064 0
c (0<=(SATLiteral(29) + SATLiteral(44) - aux1447))
44 6064 0
29 6064 0
29 44 6063 0
c ((SATLiteral(314) + aux1447 - aux1448)<=0)
6063 -6066 0
6064 -6067 0
-314 -6066 0
-314 6063 -6067 0
-314 6064 -6069 0
c (0<=(SATLiteral(314) + aux1447 - aux1448))
-6064 6069 0
-6063 6067 0
314 6069 0
314 -6064 6067 0
314 -6063 6066 0
c ((aux1444 + aux1446 - aux1449)<=0)
6060 -6071 0
6061 -6072 0
6054 -6071 0
6054 6060 -6072 0
6054 6061 -6074 0
6055 -6072 0
6055 6060 -6074 0
6055 6061 -6076 0
c (0<=(aux1444 + aux1446 - aux1449))
-6061 6076 0
-6060 6074 0
-6055 6076 0
-6055 -6061 6074 0
-6055 -6060 6072 0
-6054 6074 0
-6054 -6061 6072 0
-6054 -6060 6071 0
c ((SATLiteral(286) - aux1450 + SATLiteral(181))<=0)
-181 -6078 0
-286 -6078 0
-286 -181 -6079 0
c (0<=(SATLiteral(286) - aux1450 + SATLiteral(181)))
181 6079 0
286 6079 0
286 181 6078 0
c ((SATLiteral(301) - aux1451 + SATLiteral(166))<=0)
-166 -6081 0
-301 -6081 0
-301 -166 -6082 0
c (0<=(SATLiteral(301) - aux1451 + SATLiteral(166)))
166 6082 0
301 6082 0
301 166 6081 0
c ((SATLiteral(16) - aux1452 + SATLiteral(151))<=0)
-151 -6084 0
-16 -6084 0
-16 -151 -6085 0
c (0<=(SATLiteral(16) - aux1452 + SATLiteral(151)))
151 6085 0
16 6085 0
16 151 6084 0
c ((SATLiteral(31) + SATLiteral(46) - aux1453)<=0)
-46 -6087 0
-31 -6087 0
-31 -46 -6088 0
c (0<=(SATLiteral(31) + SATLiteral(46) - aux1453))
46 6088 0
31 6088 0
31 46 6087 0
c ((SATLiteral(316) + aux1453 - aux1454)<=0)
6087 -6090 0
6088 -6091 0
-316 -6090 0
-316 6087 -6091 0
-316 6088 -6093 0
c (0<=(SATLiteral(316) + aux1453 - aux1454))
-6088 6093 0
-6087 6091 0
316 6093 0
316 -6088 6091 0
316 -6087 6090 0
c ((aux1450 + aux1452 - aux1455)<=0)
6084 -6095 0
6085 -6096 0
6078 -6095 0
6078 6084 -6096 0
6078 6085 -6098 0
6079 -6096 0
6079 6084 -6098 0
6079 6085 -6100 0
c (0<=(aux1450 + aux1452 - aux1455))
-6085 6100 0
-6084 6098 0
-6079 6100 0
-6079 -6085 6098 0
-6079 -6084 6096 0
-6078 6098 0
-6078 -6085 6096 0
-6078 -6084 6095 0
c ((SATLiteral(-285) - aux1456 + SATLiteral(-180))<=0)
180 -6102 0
285 -6102 0
285 180 -6103 0
c (0<=(SATLiteral(-285) - aux1456 + SATLiteral(-180)))
-180 6103 0
-285 6103 0
-285 -180 6102 0
c ((SATLiteral(-300) - aux1457 + SATLiteral(-165))<=0)
165 -6105 0
300 -6105 0
300 165 -6106 0
c (0<=(SATLiteral(-300) - aux1457 + SATLiteral(-165)))
-165 6106 0
-300 6106 0
-300 -165 6105 0
c ((SATLiteral(-15) - aux1458 + SATLiteral(-150))<=0)
150 -6108 0
15 -6108 0
15 150 -6109 0
c (0<=(SATLiteral(-15) - aux1458 + SATLiteral(-150)))
-150 6109 0
-15 6109 0
-15 -150 6108 0
c ((SATLiteral(-30) + SATLiteral(-45) - aux1459)<=0)
45 -6111 0
30 -6111 0
30 45 -6112 0
c (0<=(SATLiteral(-30) + SATLiteral(-45) - aux1459))
-45 6112 0
-30 6112 0
-30 -45 6111 0
c ((SATLiteral(-315) + aux1459 - aux1460)<=0)
6111 -6114 0
6112 -6115 0
315 -6114 0
315 6111 -6115 0
315 6112 -6117 0
c (0<=(SATLiteral(-315) + aux1459 - aux1460))
-6112 6117 0
-6111 6115 0
-315 6117 0
-315 -6112 6115 0
-315 -6111 6114 0
c ((aux1456 + aux1458 - aux1461)<=0)
6108 -6119 0
6109 -6120 0
6102 -6119 0
6102 6108 -6120 0
6102 6109 -6122 0
6103 -6120 0
6103 6108 -6122 0
6103 6109 -6124 0
c (0<=(aux1456 + aux1458 - aux1461))
-6109 6124 0
-6108 6122 0
-6103 6124 0
-6103 -6109 6122 0
-6103 -6108 6120 0
-6102 6122 0
-6102 -6109 6120 0
-6102 -6108 6119 0
c ((SATLiteral(317) - aux1462 + SATLiteral(212))<=0)
-212 -6126 0
-317 -6126 0
-317 -212 -6127 0
c (0<=(SATLiteral(317) - aux1462 + SATLiteral(212)))
212 6127 0
317 6127 0
317 212 6126 0
c ((SATLiteral(332) - aux1463 + SATLiteral(197))<=0)
-197 -6129 0
-332 -6129 0
-332 -197 -6130 0
c (0<=(SATLiteral(332) - aux1463 + SATLiteral(197)))
197 6130 0
332 6130 0
332 197 6129 0
c ((SATLiteral(47) - aux1464 + SATLiteral(182))<=0)
-182 -6132 0
-47 -6132 0
-47 -182 -6133 0
c (0<=(SATLiteral(47) - aux1464 + SATLiteral(182)))
182 6133 0
47 6133 0
47 182 6132 0
c ((SATLiteral(62) + SATLiteral(77) - aux1465)<=0)
-77 -6135 0
-62 -6135 0
-62 -77 -6136 0
c (0<=(SATLiteral(62) + SATLiteral(77) - aux1465))
77 6136 0
62 6136 0
62 77 6135 0
c ((SATLiteral(347) + aux1465 - aux1466)<=0)
6135 -6138 0
6136 -6139 0
-347 -6138 0
-347 6135 -6139 0
-347 6136 -6141 0
c (0<=(SATLiteral(347) + aux1465 - aux1466))
-6136 6141 0
-6135 6139 0
347 6141 0
347 -6136 6139 0
347 -6135 6138 0
c ((aux1462 + aux1464 - aux1467)<=0)
6132 -6143 0
6133 -6144 0
6126 -6143 0
6126 6132 -6144 0
6126 6133 -6146 0
6127 -6144 0
6127 6132 -6146 0
6127 6133 -6148 0
c (0<=(aux1462 + aux1464 - aux1467))
-6133 6148 0
-6132 6146 0
-6127 6148 0
-6127 -6133 6146 0
-6127 -6132 6144 0
-6126 6146 0
-6126 -6133 6144 0
-6126 -6132 6143 0
c ((SATLiteral(319) - aux1468 + SATLiteral(214))<=0)
-214 -6150 0
-319 -6150 0
-319 -214 -6151 0
c (0<=(SATLiteral(319) - aux1468 + SATLiteral(214)))
214 6151 0
319 6151 0
319 214 6150 0
c ((SATLiteral(334) - aux1469 + SATLiteral(199))<=0)
-199 -6153 0
-334 -6153 0
-334 -199 -6154 0
c (0<=(SATLiteral(334) - aux1469 + SATLiteral(199)))
199 6154 0
334 6154 0
334 199 6153 0
c ((SATLiteral(49) - aux1470 + SATLiteral(184))<=0)
-184 -6156 0
-49 -6156 0
-49 -184 -6157 0
c (0<=(SATLiteral(49) - aux1470 + SATLiteral(184)))
184 6157 0
49 6157 0
49 184 6156 0
c ((SATLiteral(64) + SATLiteral(79) - aux1471)<=0)
-79 -6159 0
-64 -6159 0
-64 -79 -6160 0
c (0<=(SATLiteral(64) + SATLiteral(79) - aux1471))
79 6160 0
64 6160 0
64 79 6159 0
c ((SATLiteral(349) + aux1471 - aux1472)<=0)
6159 -6162 0
6160 -6163 0
-349 -6162 0
-349 6159 -6163 0
-349 6160 -6165 0
c (0<=(SATLiteral(349) + aux1471 - aux1472))
-6160 6165 0
-6159 6163 0
349 6165 0
349 -6160 6163 0
349 -6159 6162 0
c ((aux1468 + aux1470 - aux1473)<=0)
6156 -6167 0
6157 -6168 0
6150 -6167 0
6150 6156 -6168 0
6150 6157 -6170 0
6151 -6168 0
6151 6156 -6170 0
6151 6157 -6172 0
c (0<=(aux1468 + aux1470 - aux1473))
-6157 6172 0
-6156 6170 0
-6151 6172 0
-6151 -6157 6170 0
-6151 -6156 6168 0
-6150 6170 0
-6150 -6157 6168 0
-6150 -6156 6167 0
c ((SATLiteral(321) - aux1474 + SATLiteral(216))<=0)
-216 -6174 0
-321 -6174 0
-321 -216 -6175 0
c (0<=(SATLiteral(321) - aux1474 + SATLiteral(216)))
216 6175 0
321 6175 0
321 216 6174 0
c ((SATLiteral(336) - aux1475 + SATLiteral(201))<=0)
-201 -6177 0
-336 -6177 0
-336 -201 -6178 0
c (0<=(SATLiteral(336) - aux1475 + SATLiteral(201)))
201 6178 0
336 6178 0
336 201 6177 0
c ((SATLiteral(51) - aux1476 + SATLiteral(186))<=0)
-186 -6180 0
-51 -6180 0
-51 -186 -6181 0
c (0<=(SATLiteral(51) - aux1476 + SATLiteral(186)))
186 6181 0
51 6181 0
51 186 6180 0
c ((SATLiteral(66) + SATLiteral(81) - aux1477)<=0)
-81 -6183 0
-66 -6183 0
-66 -81 -6184 0
c (0<=(SATLiteral(66) + SATLiteral(81) - aux1477))
81 6184 0
66 6184 0
66 81 6183 0
c ((SATLiteral(351) + aux1477 - aux1478)<=0)
6183 -6186 0
6184 -6187 0
-351 -6186 0
-351 6183 -6187 0
-351 6184 -6189 0
c (0<=(SATLiteral(351) + aux1477 - aux1478))
-6184 6189 0
-6183 6187 0
351 6189 0
351 -6184 6187 0
351 -6183 6186 0
c ((aux1474 + aux1476 - aux1479)<=0)
6180 -6191 0
6181 -6192 0
6174 -6191 0
6174 6180 -6192 0
6174 6181 -6194 0
6175 -6192 0
6175 6180 -6194 0
6175 6181 -6196 0
c (0<=(aux1474 + aux1476 - aux1479))
-6181 6196 0
-6180 6194 0
-6175 6196 0
-6175 -6181 6194 0
-6175 -6180 6192 0
-6174 6194 0
-6174 -6181 6192 0
-6174 -6180 6191 0
c ((SATLiteral(323) - aux1480 + SATLiteral(218))<=0)
-218 -6198 0
-323 -6198 0
-323 -218 -6199 0
c (0<=(SATLiteral(323) - aux1480 + SATLiteral(218)))
218 6199 0
323 6199 0
323 218 6198 0
c ((SATLiteral(338) - aux1481 + SATLiteral(203))<=0)
-203 -6201 0
-338 -6201 0
-338 -203 -6202 0
c (0<=(SATLiteral(338) - aux1481 + SATLiteral(203)))
203 6202 0
338 6202 0
338 203 6201 0
c ((SATLiteral(53) - aux1482 + SATLiteral(188))<=0)
-188 -6204 0
-53 -6204 0
-53 -188 -6205 0
c (0<=(SATLiteral(53) - aux1482 + SATLiteral(188)))
188 6205 0
53 6205 0
53 188 6204 0
c ((SATLiteral(68) + SATLiteral(83) - aux1483)<=0)
-83 -6207 0
-68 -6207 0
-68 -83 -6208 0
c (0<=(SATLiteral(68) + SATLiteral(83) - aux1483))
83 6208 0
68 6208 0
68 83 6207 0
c ((SATLiteral(353) + aux1483 - aux1484)<=0)
6207 -6210 0
6208 -6211 0
-353 -6210 0
-353 6207 -6211 0
-353 6208 -6213 0
c (0<=(SATLiteral(353) + aux1483 - aux1484))
-6208 6213 0
-6207 6211 0
353 6213 0
353 -6208 6211 0
353 -6207 6210 0
c ((aux1480 + aux1482 - aux1485)<=0)
6204 -6215 0
6205 -6216 0
6198 -6215 0
6198 6204 -6216 0
6198 6205 -6218 0
6199 -6216 0
6199 6204 -6218 0
6199 6205 -6220 0
c (0<=(aux1480 + aux1482 - aux1485))
-6205 6220 0
-6204 6218 0
-6199 6220 0
-6199 -6205 6218 0
-6199 -6204 6216 0
-6198 6218 0
-6198 -6205 6216 0
-6198 -6204 6215 0
c ((SATLiteral(325) - aux1486 + SATLiteral(220))<=0)
-220 -6222 0
-325 -6222 0
-325 -220 -6223 0
c (0<=(SATLiteral(325) - aux1486 + SATLiteral(220)))
220 6223 0
325 6223 0
325 220 6222 0
c ((SATLiteral(340) - aux1487 + SATLiteral(205))<=0)
-205 -6225 0
-340 -6225 0
-340 -205 -6226 0
c (0<=(SATLiteral(340) - aux1487 + SATLiteral(205)))
205 6226 0
340 6226 0
340 205 6225 0
c ((SATLiteral(55) - aux1488 + SATLiteral(190))<=0)
-190 -6228 0
-55 -6228 0
-55 -190 -6229 0
c (0<=(SATLiteral(55) - aux1488 + SATLiteral(190)))
190 6229 0
55 6229 0
55 190 6228 0
c ((SATLiteral(70) + SATLiteral(85) - aux1489)<=0)
-85 -6231 0
-70 -6231 0
-70 -85 -6232 0
c (0<=(SATLiteral(70) + SATLiteral(85) - aux1489))
85 6232 0
70 6232 0
70 85 6231 0
c ((SATLiteral(355) + aux1489 - aux1490)<=0)
6231 -6234 0
6232 -6235 0
-355 -6234 0
-355 6231 -6235 0
-355 6232 -6237 0
c (0<=(SATLiteral(355) + aux1489 - aux1490))
-6232 6237 0
-6231 6235 0
355 6237 0
355 -6232 6235 0
355 -6231 6234 0
c ((aux1486 + aux1488 - aux1491)<=0)
6228 -6239 0
6229 -6240 0
6222 -6239 0
6222 6228 -6240 0
6222 6229 -6242 0
6223 -6240 0
6223 6228 -6242 0
6223 6229 -6244 0
c (0<=(aux1486 + aux1488 - aux1491))
-6229 6244 0
-6228 6242 0
-6223 6244 0
-6223 -6229 6242 0
-6223 -6228 6240 0
-6222 6242 0
-6222 -6229 6240 0
-6222 -6228 6239 0
c ((SATLiteral(327) - aux1492 + SATLiteral(222))<=0)
-222 -6246 0
-327 -6246 0
-327 -222 -6247 0
c (0<=(SATLiteral(327) - aux1492 + SATLiteral(222)))
222 6247 0
327 6247 0
327 222 6246 0
c ((SATLiteral(342) - aux1493 + SATLiteral(207))<=0)
-207 -6249 0
-342 -6249 0
-342 -207 -6250 0
c (0<=(SATLiteral(342) - aux1493 + SATLiteral(207)))
207 6250 0
342 6250 0
342 207 6249 0
c ((SATLiteral(57) - aux1494 + SATLiteral(192))<=0)
-192 -6252 0
-57 -6252 0
-57 -192 -6253 0
c (0<=(SATLiteral(57) - aux1494 + SATLiteral(192)))
192 6253 0
57 6253 0
57 192 6252 0
c ((SATLiteral(72) + SATLiteral(87) - aux1495)<=0)
-87 -6255 0
-72 -6255 0
-72 -87 -6256 0
c (0<=(SATLiteral(72) + SATLiteral(87) - aux1495))
87 6256 0
72 6256 0
72 87 6255 0
c ((SATLiteral(357) + aux1495 - aux1496)<=0)
6255 -6258 0
6256 -6259 0
-357 -6258 0
-357 6255 -6259 0
-357 6256 -6261 0
c (0<=(SATLiteral(357) + aux1495 - aux1496))
-6256 6261 0
-6255 6259 0
357 6261 0
357 -6256 6259 0
357 -6255 6258 0
c ((aux1492 + aux1494 - aux1497)<=0)
6252 -6263 0
6253 -6264 0
6246 -6263 0
6246 6252 -6264 0
6246 6253 -6266 0
6247 -6264 0
6247 6252 -6266 0
6247 6253 -6268 0
c (0<=(aux1492 + aux1494 - aux1497))
-6253 6268 0
-6252 6266 0
-6247 6268 0
-6247 -6253 6266 0
-6247 -6252 6264 0
-6246 6266 0
-6246 -6253 6264 0
-6246 -6252 6263 0
c ((SATLiteral(329) - aux1498 + SATLiteral(224))<=0)
-224 -6270 0
-329 -6270 0
-329 -224 -6271 0
c (0<=(SATLiteral(329) - aux1498 + SATLiteral(224)))
224 6271 0
329 6271 0
329 224 6270 0
c ((SATLiteral(344) - aux1499 + SATLiteral(209))<=0)
-209 -6273 0
-344 -6273 0
-344 -209 -6274 0
c (0<=(SATLiteral(344) - aux1499 + SATLiteral(209)))
209 6274 0
344 6274 0
344 209 6273 0
c ((SATLiteral(59) - aux1500 + SATLiteral(194))<=0)
-194 -6276 0
-59 -6276 0
-59 -194 -6277 0
c (0<=(SATLiteral(59) - aux1500 + SATLiteral(194)))
194 6277 0
59 6277 0
59 194 6276 0
c ((SATLiteral(74) + SATLiteral(89) - aux1501)<=0)
-89 -6279 0
-74 -6279 0
-74 -89 -6280 0
c (0<=(SATLiteral(74) + SATLiteral(89) - aux1501))
89 6280 0
74 6280 0
74 89 6279 0
c ((SATLiteral(359) + aux1501 - aux1502)<=0)
6279 -6282 0
6280 -6283 0
-359 -6282 0
-359 6279 -6283 0
-359 6280 -6285 0
c (0<=(SATLiteral(359) + aux1501 - aux1502))
-6280 6285 0
-6279 6283 0
359 6285 0
359 -6280 6283 0
359 -6279 6282 0
c ((aux1498 + aux1500 - aux1503)<=0)
6276 -6287 0
6277 -6288 0
6270 -6287 0
6270 6276 -6288 0
6270 6277 -6290 0
6271 -6288 0
6271 6276 -6290 0
6271 6277 -6292 0
c (0<=(aux1498 + aux1500 - aux1503))
-6277 6292 0
-6276 6290 0
-6271 6292 0
-6271 -6277 6290 0
-6271 -6276 6288 0
-6270 6290 0
-6270 -6277 6288 0
-6270 -6276 6287 0
c ((SATLiteral(331) - aux1504 + SATLiteral(226))<=0)
-226 -6294 0
-331 -6294 0
-331 -226 -6295 0
c (0<=(SATLiteral(331) - aux1504 + SATLiteral(226)))
226 6295 0
331 6295 0
331 226 6294 0
c ((SATLiteral(346) - aux1505 + SATLiteral(211))<=0)
-211 -6297 0
-346 -6297 0
-346 -211 -6298 0
c (0<=(SATLiteral(346) - aux1505 + SATLiteral(211)))
211 6298 0
346 6298 0
346 211 6297 0
c ((SATLiteral(61) - aux1506 + SATLiteral(196))<=0)
-196 -6300 0
-61 -6300 0
-61 -196 -6301 0
c (0<=(SATLiteral(61) - aux1506 + SATLiteral(196)))
196 6301 0
61 6301 0
61 196 6300 0
c ((SATLiteral(76) + SATLiteral(91) - aux1507)<=0)
-91 -6303 0
-76 -6303 0
-76 -91 -6304 0
c (0<=(SATLiteral(76) + SATLiteral(91) - aux1507))
91 6304 0
76 6304 0
76 91 6303 0
c ((SATLiteral(361) + aux1507 - aux1508)<=0)
6303 -6306 0
6304 -6307 0
-361 -6306 0
-361 6303 -6307 0
-361 6304 -6309 0
c (0<=(SATLiteral(361) + aux1507 - aux1508))
-6304 6309 0
-6303 6307 0
361 6309 0
361 -6304 6307 0
361 -6303 6306 0
c ((aux1504 + aux1506 - aux1509)<=0)
6300 -6311 0
6301 -6312 0
6294 -6311 0
6294 6300 -6312 0
6294 6301 -6314 0
6295 -6312 0
6295 6300 -6314 0
6295 6301 -6316 0
c (0<=(aux1504 + aux1506 - aux1509))
-6301 6316 0
-6300 6314 0
-6295 6316 0
-6295 -6301 6314 0
-6295 -6300 6312 0
-6294 6314 0
-6294 -6301 6312 0
-6294 -6300 6311 0
c ((SATLiteral(-330) - aux1510 + SATLiteral(-225))<=0)
225 -6318 0
330 -6318 0
330 225 -6319 0
c (0<=(SATLiteral(-330) - aux1510 + SATLiteral(-225)))
-225 6319 0
-330 6319 0
-330 -225 6318 0
c ((SATLiteral(-345) - aux1511 + SATLiteral(-210))<=0)
210 -6321 0
345 -6321 0
345 210 -6322 0
c (0<=(SATLiteral(-345) - aux1511 + SATLiteral(-210)))
-210 6322 0
-345 6322 0
-345 -210 6321 0
c ((SATLiteral(-60) - aux1512 + SATLiteral(-195))<=0)
195 -6324 0
60 -6324 0
60 195 -6325 0
c (0<=(SATLiteral(-60) - aux1512 + SATLiteral(-195)))
-195 6325 0
-60 6325 0
-60 -195 6324 0
c ((SATLiteral(-75) + SATLiteral(-90) - aux1513)<=0)
90 -6327 0
75 -6327 0
75 90 -6328 0
c (0<=(SATLiteral(-75) + SATLiteral(-90) - aux1513))
-90 6328 0
-75 6328 0
-75 -90 6327 0
c ((SATLiteral(-360) + aux1513 - aux1514)<=0)
6327 -6330 0
6328 -6331 0
360 -6330 0
360 6327 -6331 0
360 6328 -6333 0
c (0<=(SATLiteral(-360) + aux1513 - aux1514))
-6328 6333 0
-6327 6331 0
-360 6333 0
-360 -6328 6331 0
-360 -6327 6330 0
c ((aux1510 + aux1512 - aux1515)<=0)
6324 -6335 0
6325 -6336 0
6318 -6335 0
6318 6324 -6336 0
6318 6325 -6338 0
6319 -6336 0
6319 6324 -6338 0
6319 6325 -6340 0
c (0<=(aux1510 + aux1512 - aux1515))
-6325 6340 0
-6324 6338 0
-6319 6340 0
-6319 -6325 6338 0
-6319 -6324 6336 0
-6318 6338 0
-6318 -6325 6336 0
-6318 -6324 6335 0
c ((SATLiteral(362) - aux1516 + SATLiteral(257))<=0)
-257 -6342 0
-362 -6342 0
-362 -257 -6343 0
c (0<=(SATLiteral(362) - aux1516 + SATLiteral(257)))
257 6343 0
362 6343 0
362 257 6342 0
c ((SATLiteral(377) - aux1517 + SATLiteral(242))<=0)
-242 -6345 0
-377 -6345 0
-377 -242 -6346 0
c (0<=(SATLiteral(377) - aux1517 + SATLiteral(242)))
242 6346 0
377 6346 0
377 242 6345 0
c ((SATLiteral(92) - aux1518 + SATLiteral(227))<=0)
-227 -6348 0
-92 -6348 0
-92 -227 -6349 0
c (0<=(SATLiteral(92) - aux1518 + SATLiteral(227)))
227 6349 0
92 6349 0
92 227 6348 0
c ((SATLiteral(107) + SATLiteral(122) - aux1519)<=0)
-122 -6351 0
-107 -6351 0
-107 -122 -6352 0
c (0<=(SATLiteral(107) + SATLiteral(122) - aux1519))
122 6352 0
107 6352 0
107 122 6351 0
c ((SATLiteral(392) + aux1519 - aux1520)<=0)
6351 -6354 0
6352 -6355 0
-392 -6354 0
-392 6351 -6355 0
-392 6352 -6357 0
c (0<=(SATLiteral(392) + aux1519 - aux1520))
-6352 6357 0
-6351 6355 0
392 6357 0
392 -6352 6355 0
392 -6351 6354 0
c ((aux1516 + aux1518 - aux1521)<=0)
6348 -6359 0
6349 -6360 0
6342 -6359 0
6342 6348 -6360 0
6342 6349 -6362 0
6343 -6360 0
6343 6348 -6362 0
6343 6349 -6364 0
c (0<=(aux1516 + aux1518 - aux1521))
-6349 6364 0
-6348 6362 0
-6343 6364 0
-6343 -6349 6362 0
-6343 -6348 6360 0
-6342 6362 0
-6342 -6349 6360 0
-6342 -6348 6359 0
c ((SATLiteral(364) - aux1522 + SATLiteral(259))<=0)
-259 -6366 0
-364 -6366 0
-364 -259 -6367 0
c (0<=(SATLiteral(364) - aux1522 + SATLiteral(259)))
259 6367 0
364 6367 0
364 259 6366 0
c ((SATLiteral(379) - aux1523 + SATLiteral(244))<=0)
-244 -6369 0
-379 -6369 0
-379 -244 -6370 0
c (0<=(SATLiteral(379) - aux1523 + SATLiteral(244)))
244 6370 0
379 6370 0
379 244 6369 0
c ((SATLiteral(94) - aux1524 + SATLiteral(229))<=0)
-229 -6372 0
-94 -6372 0
-94 -229 -6373 0
c (0<=(SATLiteral(94) - aux1524 + SATLiteral(229)))
229 6373 0
94 6373 0
94 229 6372 0
c ((SATLiteral(109) + SATLiteral(124) - aux1525)<=0)
-124 -6375 0
-109 -6375 0
-109 -124 -6376 0
c (0<=(SATLiteral(109) + SATLiteral(124) - aux1525))
124 6376 0
109 6376 0
109 124 6375 0
c ((SATLiteral(394) + aux1525 - aux1526)<=0)
6375 -6378 0
6376 -6379 0
-394 -6378 0
-394 6375 -6379 0
-394 6376 -6381 0
c (0<=(SATLiteral(394) + aux1525 - aux1526))
-6376 6381 0
-6375 6379 0
394 6381 0
394 -6376 6379 0
394 -6375 6378 0
c ((aux1522 + aux1524 - aux1527)<=0)
6372 -6383 0
6373 -6384 0
6366 -6383 0
6366 6372 -6384 0
6366 6373 -6386 0
6367 -6384 0
6367 6372 -6386 0
6367 6373 -6388 0
c (0<=(aux1522 + aux1524 - aux1527))
-6373 6388 0
-6372 6386 0
-6367 6388 0
-6367 -6373 6386 0
-6367 -6372 6384 0
-6366 6386 0
-6366 -6373 6384 0
-6366 -6372 6383 0
c ((SATLiteral(366) - aux1528 + SATLiteral(261))<=0)
-261 -6390 0
-366 -6390 0
-366 -261 -6391 0
c (0<=(SATLiteral(366) - aux1528 + SATLiteral(261)))
261 6391 0
366 6391 0
366 261 6390 0
c ((SATLiteral(381) - aux1529 + SATLiteral(246))<=0)
-246 -6393 0
-381 -6393 0
-381 -246 -6394 0
c (0<=(SATLiteral(381) - aux1529 + SATLiteral(246)))
246 6394 0
381 6394 0
381 246 6393 0
c ((SATLiteral(96) - aux1530 + SATLiteral(231))<=0)
-231 -6396 0
-96 -6396 0
-96 -231 -6397 0
c (0<=(SATLiteral(96) - aux1530 + SATLiteral(231)))
231 6397 0
96 6397 0
96 231 6396 0
c ((SATLiteral(111) + SATLiteral(126) - aux1531)<=0)
-126 -6399 0
-111 -6399 0
-111 -126 -6400 0
c (0<=(SATLiteral(111) + SATLiteral(126) - aux1531))
126 6400 0
111 6400 0
111 126 6399 0
c ((SATLiteral(396) + aux1531 - aux1532)<=0)
6399 -6402 0
6400 -6403 0
-396 -6402 0
-396 6399 -6403 0
-396 6400 -6405 0
c (0<=(SATLiteral(396) + aux1531 - aux1532))
-6400 6405 0
-6399 6403 0
396 6405 0
396 -6400 6403 0
396 -6399 6402 0
c ((aux1528 + aux1530 - aux1533)<=0)
6396 -6407 0
6397 -6408 0
6390 -6407 0
6390 6396 -6408 0
6390 6397 -6410 0
6391 -6408 0
6391 6396 -6410 0
6391 6397 -6412 0
c (0<=(aux1528 + aux1530 - aux1533))
-6397 6412 0
-6396 6410 0
-6391 6412 0
-6391 -6397 6410 0
-6391 -6396 6408 0
-6390 6410 0
-6390 -6397 6408 0
-6390 -6396 6407 0
c ((SATLiteral(368) - aux1534 + SATLiteral(263))<=0)
-263 -6414 0
-368 -6414 0
-368 -263 -6415 0
c (0<=(SATLiteral(368) - aux1534 + SATLiteral(263)))
263 6415 0
368 6415 0
368 263 6414 0
c ((SATLiteral(383) - aux1535 + SATLiteral(248))<=0)
-248 -6417 0
-383 -6417 0
-383 -248 -6418 0
c (0<=(SATLiteral(383) - aux1535 + SATLiteral(248)))
248 6418 0
383 6418 0
383 248 6417 0
c ((SATLiteral(98) - aux1536 + SATLiteral(233))<=0)
-233 -6420 0
-98 -6420 0
-98 -233 -6421 0
c (0<=(SATLiteral(98) - aux1536 + SATLiteral(233)))
233 6421 0
98 6421 0
98 233 6420 0
c ((SATLiteral(113) + SATLiteral(128) - aux1537)<=0)
-128 -6423 0
-113 -6423 0
-113 -128 -6424 0
c (0<=(SATLiteral(113) + SATLiteral(128) - aux1537))
128 6424 0
113 6424 0
113 128 6423 0
c ((SATLiteral(398) + aux1537 - aux1538)<=0)
6423 -6426 0
6424 -6427 0
-398 -6426 0
-398 6423 -6427 0
-398 6424 -6429 0
c (0<=(SATLiteral(398) + aux1537 - aux1538))
-6424 6429 0
-6423 6427 0
398 6429 0
398 -6424 6427 0
398 -6423 6426 0
c ((aux1534 + aux1536 - aux1539)<=0)
6420 -6431 0
6421 -6432 0
6414 -6431 0
6414 6420 -6432 0
6414 6421 -6434 0
6415 -6432 0
6415 6420 -6434 0
6415 6421 -6436 0
c (0<=(aux1534 + aux1536 - aux1539))
-6421 6436 0
-6420 6434 0
-6415 6436 0
-6415 -6421 6434 0
-6415 -6420 6432 0
-6414 6434 0
-6414 -6421 6432 0
-6414 -6420 6431 0
c ((SATLiteral(370) - aux1540 + SATLiteral(265))<=0)
-265 -6438 0
-370 -6438 0
-370 -265 -6439 0
c (0<=(SATLiteral(370) - aux1540 + SATLiteral(265)))
265 6439 0
370 6439 0
370 265 6438 0
c ((SATLiteral(385) - aux1541 + SATLiteral(250))<=0)
-250 -6441 0
-385 -6441 0
-385 -250 -6442 0
c (0<=(SATLiteral(385) - aux1541 + SATLiteral(250)))
250 6442 0
385 6442 0
385 250 6441 0
c ((SATLiteral(100) - aux1542 + SATLiteral(235))<=0)
-235 -6444 0
-100 -6444 0
-100 -235 -6445 0
c (0<=(SATLiteral(100) - aux1542 + SATLiteral(235)))
235 6445 0
100 6445 0
100 235 6444 0
c ((SATLiteral(115) + SATLiteral(130) - aux1543)<=0)
-130 -6447 0
-115 -6447 0
-115 -130 -6448 0
c (0<=(SATLiteral(115) + SATLiteral(130) - aux1543))
130 6448 0
115 6448 0
115 130 6447 0
c ((SATLiteral(400) + aux1543 - aux1544)<=0)
6447 -6450 0
6448 -6451 0
-400 -6450 0
-400 6447 -6451 0
-400 6448 -6453 0
c (0<=(SATLiteral(400) + aux1543 - aux1544))
-6448 6453 0
-6447 6451 0
400 6453 0
400 -6448 6451 0
400 -6447 6450 0
c ((aux1540 + aux1542 - aux1545)<=0)
6444 -6455 0
6445 -6456 0
6438 -6455 0
6438 6444 -6456 0
6438 6445 -6458 0
6439 -6456 0
6439 6444 -6458 0
6439 6445 -6460 0
c (0<=(aux1540 + aux1542 - aux1545))
-6445 6460 0
-6444 6458 0
-6439 6460 0
-6439 -6445 6458 0
-6439 -6444 6456 0
-6438 6458 0
-6438 -6445 6456 0
-6438 -6444 6455 0
c ((SATLiteral(372) - aux1546 + SATLiteral(267))<=0)
-267 -6462 0
-372 -6462 0
-372 -267 -6463 0
c (0<=(SATLiteral(372) - aux1546 + SATLiteral(267)))
267 6463 0
372 6463 0
372 267 6462 0
c ((SATLiteral(387) - aux1547 + SATLiteral(252))<=0)
-252 -6465 0
-387 -6465 0
-387 -252 -6466 0
c (0<=(SATLiteral(387) - aux1547 + SATLiteral(252)))
252 6466 0
387 6466 0
387 252 6465 0
c ((SATLiteral(102) - aux1548 + SATLiteral(237))<=0)
-237 -6468 0
-102 -6468 0
-102 -237 -6469 0
c (0<=(SATLiteral(102) - aux1548 + SATLiteral(237)))
237 6469 0
102 6469 0
102 237 6468 0
c ((SATLiteral(117) + SATLiteral(132) - aux1549)<=0)
-132 -6471 0
-117 -6471 0
-117 -132 -6472 0
c (0<=(SATLiteral(117) + SATLiteral(132) - aux1549))
132 6472 0
117 6472 0
117 132 6471 0
c ((SATLiteral(402) + aux1549 - aux1550)<=0)
6471 -6474 0
6472 -6475 0
-402 -6474 0
-402 6471 -6475 0
-402 6472 -6477 0
c (0<=(SATLiteral(402) + aux1549 - aux1550))
-6472 6477 0
-6471 6475 0
402 6477 0
402 -6472 6475 0
402 -6471 6474 0
c ((aux1546 + aux1548 - aux1551)<=0)
6468 -6479 0
6469 -6480 0
6462 -6479 0
6462 6468 -6480 0
6462 6469 -6482 0
6463 -6480 0
6463 6468 -6482 0
6463 6469 -6484 0
c (0<=(aux1546 + aux1548 - aux1551))
-6469 6484 0
-6468 6482 0
-6463 6484 0
-6463 -6469 6482 0
-6463 -6468 6480 0
-6462 6482 0
-6462 -6469 6480 0
-6462 -6468 6479 0
c ((SATLiteral(374) - aux1552 + SATLiteral(269))<=0)
-269 -6486 0
-374 -6486 0
-374 -269 -6487 0
c (0<=(SATLiteral(374) - aux1552 + SATLiteral(269)))
269 6487 0
374 6487 0
374 269 6486 0
c ((SATLiteral(389) - aux1553 + SATLiteral(254))<=0)
-254 -6489 0
-389 -6489 0
-389 -254 -6490 0
c (0<=(SATLiteral(389) - aux1553 + SATLiteral(254)))
254 6490 0
389 6490 0
389 254 6489 0
c ((SATLiteral(104) - aux1554 + SATLiteral(239))<=0)
-239 -6492 0
-104 -6492 0
-104 -239 -6493 0
c (0<=(SATLiteral(104) - aux1554 + SATLiteral(239)))
239 6493 0
104 6493 0
104 239 6492 0
c ((SATLiteral(119) + SATLiteral(134) - aux1555)<=0)
-134 -6495 0
-119 -6495 0
-119 -134 -6496 0
c (0<=(SATLiteral(119) + SATLiteral(134) - aux1555))
134 6496 0
119 6496 0
119 134 6495 0
c ((SATLiteral(404) + aux1555 - aux1556)<=0)
6495 -6498 0
6496 -6499 0
-404 -6498 0
-404 6495 -6499 0
-404 6496 -6501 0
c (0<=(SATLiteral(404) + aux1555 - aux1556))
-6496 6501 0
-6495 6499 0
404 6501 0
404 -6496 6499 0
404 -6495 6498 0
c ((aux1552 + aux1554 - aux1557)<=0)
6492 -6503 0
6493 -6504 0
6486 -6503 0
6486 6492 -6504 0
6486 6493 -6506 0
6487 -6504 0
6487 6492 -6506 0
6487 6493 -6508 0
c (0<=(aux1552 + aux1554 - aux1557))
-6493 6508 0
-6492 6506 0
-6487 6508 0
-6487 -6493 6506 0
-6487 -6492 6504 0
-6486 6506 0
-6486 -6493 6504 0
-6486 -6492 6503 0
c ((SATLiteral(376) - aux1558 + SATLiteral(271))<=0)
-271 -6510 0
-376 -6510 0
-376 -271 -6511 0
c (0<=(SATLiteral(376) - aux1558 + SATLiteral(271)))
271 6511 0
376 6511 0
376 271 6510 0
c ((SATLiteral(391) - aux1559 + SATLiteral(256))<=0)
-256 -6513 0
-391 -6513 0
-391 -256 -6514 0
c (0<=(SATLiteral(391) - aux1559 + SATLiteral(256)))
256 6514 0
391 6514 0
391 256 6513 0
c ((SATLiteral(106) - aux1560 + SATLiteral(241))<=0)
-241 -6516 0
-106 -6516 0
-106 -241 -6517 0
c (0<=(SATLiteral(106) - aux1560 + SATLiteral(241)))
241 6517 0
106 6517 0
106 241 6516 0
c ((SATLiteral(121) + SATLiteral(136) - aux1561)<=0)
-136 -6519 0
-121 -6519 0
-121 -136 -6520 0
c (0<=(SATLiteral(121) + SATLiteral(136) - aux1561))
136 6520 0
121 6520 0
121 136 6519 0
c ((SATLiteral(406) + aux1561 - aux1562)<=0)
6519 -6522 0
6520 -6523 0
-406 -6522 0
-406 6519 -6523 0
-406 6520 -6525 0
c (0<=(SATLiteral(406) + aux1561 - aux1562))
-6520 6525 0
-6519 6523 0
406 6525 0
406 -6520 6523 0
406 -6519 6522 0
c ((aux1558 + aux1560 - aux1563)<=0)
6516 -6527 0
6517 -6528 0
6510 -6527 0
6510 6516 -6528 0
6510 6517 -6530 0
6511 -6528 0
6511 6516 -6530 0
6511 6517 -6532 0
c (0<=(aux1558 + aux1560 - aux1563))
-6517 6532 0
-6516 6530 0
-6511 6532 0
-6511 -6517 6530 0
-6511 -6516 6528 0
-6510 6530 0
-6510 -6517 6528 0
-6510 -6516 6527 0
c ((SATLiteral(-375) - aux1564 + SATLiteral(-270))<=0)
270 -6534 0
375 -6534 0
375 270 -6535 0
c (0<=(SATLiteral(-375) - aux1564 + SATLiteral(-270)))
-270 6535 0
-375 6535 0
-375 -270 6534 0
c ((SATLiteral(-390) - aux1565 + SATLiteral(-255))<=0)
255 -6537 0
390 -6537 0
390 255 -6538 0
c (0<=(SATLiteral(-390) - aux1565 + SATLiteral(-255)))
-255 6538 0
-390 6538 0
-390 -255 6537 0
c ((SATLiteral(-105) - aux1566 + SATLiteral(-240))<=0)
240 -6540 0
105 -6540 0
105 240 -6541 0
c (0<=(SATLiteral(-105) - aux1566 + SATLiteral(-240)))
-240 6541 0
-105 6541 0
-105 -240 6540 0
c ((SATLiteral(-120) + SATLiteral(-135) - aux1567)<=0)
135 -6543 0
120 -6543 0
120 135 -6544 0
c (0<=(SATLiteral(-120) + SATLiteral(-135) - aux1567))
-135 6544 0
-120 6544 0
-120 -135 6543 0
c ((SATLiteral(-405) + aux1567 - aux1568)<=0)
6543 -6546 0
6544 -6547 0
405 -6546 0
405 6543 -6547 0
405 6544 -6549 0
c (0<=(SATLiteral(-405) + aux1567 - aux1568))
-6544 6549 0
-6543 6547 0
-405 6549 0
-405 -6544 6547 0
-405 -6543 6546 0
c ((aux1564 + aux1566 - aux1569)<=0)
6540 -6551 0
6541 -6552 0
6534 -6551 0
6534 6540 -6552 0
6534 6541 -6554 0
6535 -6552 0
6535 6540 -6554 0
6535 6541 -6556 0
c (0<=(aux1564 + aux1566 - aux1569))
-6541 6556 0
-6540 6554 0
-6535 6556 0
-6535 -6541 6554 0
-6535 -6540 6552 0
-6534 6554 0
-6534 -6541 6552 0
-6534 -6540 6551 0
c ((SATLiteral(677) - aux1570 + SATLiteral(572))<=0)
-572 -6558 0
-677 -6558 0
-677 -572 -6559 0
c (0<=(SATLiteral(677) - aux1570 + SATLiteral(572)))
572 6559 0
677 6559 0
677 572 6558 0
c ((SATLiteral(692) - aux1571 + SATLiteral(557))<=0)
-557 -6561 0
-692 -6561 0
-692 -557 -6562 0
c (0<=(SATLiteral(692) - aux1571 + SATLiteral(557)))
557 6562 0
692 6562 0
692 557 6561 0
c (( - aux1572 + SATLiteral(407) + SATLiteral(542))<=0)
-542 -6564 0
-407 -6564 0
-407 -542 -6565 0
c (0<=( - aux1572 + SATLiteral(407) + SATLiteral(542)))
542 6565 0
407 6565 0
407 542 6564 0
c (( - aux1573 + SATLiteral(422) + SATLiteral(437))<=0)
-437 -6567 0
-422 -6567 0
-422 -437 -6568 0
c (0<=( - aux1573 + SATLiteral(422) + SATLiteral(437)))
437 6568 0
422 6568 0
422 437 6567 0
c ((SATLiteral(707) + aux1573 - aux1574)<=0)
6567 -6570 0
6568 -6571 0
-707 -6570 0
-707 6567 -6571 0
-707 6568 -6573 0
c (0<=(SATLiteral(707) + aux1573 - aux1574))
-6568 6573 0
-6567 6571 0
707 6573 0
707 -6568 6571 0
707 -6567 6570 0
c ((aux1570 + aux1572 - aux1575)<=0)
6564 -6575 0
6565 -6576 0
6558 -6575 0
6558 6564 -6576 0
6558 6565 -6578 0
6559 -6576 0
6559 6564 -6578 0
6559 6565 -6580 0
c (0<=(aux1570 + aux1572 - aux1575))
-6565 6580 0
-6564 6578 0
-6559 6580 0
-6559 -6565 6578 0
-6559 -6564 6576 0
-6558 6578 0
-6558 -6565 6576 0
-6558 -6564 6575 0
c ((SATLiteral(679) - aux1576 + SATLiteral(574))<=0)
-574 -6582 0
-679 -6582 0
-679 -574 -6583 0
c (0<=(SATLiteral(679) - aux1576 + SATLiteral(574)))
574 6583 0
679 6583 0
679 574 6582 0
c ((SATLiteral(694) - aux1577 + SATLiteral(559))<=0)
-559 -6585 0
-694 -6585 0
-694 -559 -6586 0
c (0<=(SATLiteral(694) - aux1577 + SATLiteral(559)))
559 6586 0
694 6586 0
694 559 6585 0
c (( - aux1578 + SATLiteral(409) + SATLiteral(544))<=0)
-544 -6588 0
-409 -6588 0
-409 -544 -6589 0
c (0<=( - aux1578 + SATLiteral(409) + SATLiteral(544)))
544 6589 0
409 6589 0
409 544 6588 0
c (( - aux1579 + SATLiteral(424) + SATLiteral(439))<=0)
-439 -6591 0
-424 -6591 0
-424 -439 -6592 0
c (0<=( - aux1579 + SATLiteral(424) + SATLiteral(439)))
439 6592 0
424 6592 0
424 439 6591 0
c ((SATLiteral(709) + aux1579 - aux1580)<=0)
6591 -6594 0
6592 -6595 0
-709 -6594 0
-709 6591 -6595 0
-709 6592 -6597 0
c (0<=(SATLiteral(709) + aux1579 - aux1580))
-6592 6597 0
-6591 6595 0
709 6597 0
709 -6592 6595 0
709 -6591 6594 0
c ((aux1576 + aux1578 - aux1581)<=0)
6588 -6599 0
6589 -6600 0
6582 -6599 0
6582 6588 -6600 0
6582 6589 -6602 0
6583 -6600 0
6583 6588 -6602 0
6583 6589 -6604 0
c (0<=(aux1576 + aux1578 - aux1581))
-6589 6604 0
-6588 6602 0
-6583 6604 0
-6583 -6589 6602 0
-6583 -6588 6600 0
-6582 6602 0
-6582 -6589 6600 0
-6582 -6588 6599 0
c ((SATLiteral(681) - aux1582 + SATLiteral(576))<=0)
-576 -6606 0
-681 -6606 0
-681 -576 -6607 0
c (0<=(SATLiteral(681) - aux1582 + SATLiteral(576)))
576 6607 0
681 6607 0
681 576 6606 0
c ((SATLiteral(696) - aux1583 + SATLiteral(561))<=0)
-561 -6609 0
-696 -6609 0
-696 -561 -6610 0
c (0<=(SATLiteral(696) - aux1583 + SATLiteral(561)))
561 6610 0
696 6610 0
696 561 6609 0
c (( - aux1584 + SATLiteral(411) + SATLiteral(546))<=0)
-546 -6612 0
-411 -6612 0
-411 -546 -6613 0
c (0<=( - aux1584 + SATLiteral(411) + SATLiteral(546)))
546 6613 0
411 6613 0
411 546 6612 0
c (( - aux1585 + SATLiteral(426) + SATLiteral(441))<=0)
-441 -6615 0
-426 -6615 0
-426 -441 -6616 0
c (0<=( - aux1585 + SATLiteral(426) + SATLiteral(441)))
441 6616 0
426 6616 0
426 441 6615 0
c ((SATLiteral(711) + aux1585 - aux1586)<=0)
6615 -6618 0
6616 -6619 0
-711 -6618 0
-711 6615 -6619 0
-711 6616 -6621 0
c (0<=(SATLiteral(711) + aux1585 - aux1586))
-6616 6621 0
-6615 6619 0
711 6621 0
711 -6616 6619 0
711 -6615 6618 0
c ((aux1582 + aux1584 - aux1587)<=0)
6612 -6623 0
6613 -6624 0
6606 -6623 0
6606 6612 -6624 0
6606 6613 -6626 0
6607 -6624 0
6607 6612 -6626 0
6607 6613 -6628 0
c (0<=(aux1582 + aux1584 - aux1587))
-6613 6628 0
-6612 6626 0
-6607 6628 0
-6607 -6613 6626 0
-6607 -6612 6624 0
-6606 6626 0
-6606 -6613 6624 0
-6606 -6612 6623 0
c ((SATLiteral(683) - aux1588 + SATLiteral(578))<=0)
-578 -6630 0
-683 -6630 0
-683 -578 -6631 0
c (0<=(SATLiteral(683) - aux1588 + SATLiteral(578)))
578 6631 0
683 6631 0
683 578 6630 0
c ((SATLiteral(698) - aux1589 + SATLiteral(563))<=0)
-563 -6633 0
-698 -6633 0
-698 -563 -6634 0
c (0<=(SATLiteral(698) - aux1589 + SATLiteral(563)))
563 6634 0
698 6634 0
698 563 6633 0
c (( - aux1590 + SATLiteral(413) + SATLiteral(548))<=0)
-548 -6636 0
-413 -6636 0
-413 -548 -6637 0
c (0<=( - aux1590 + SATLiteral(413) + SATLiteral(548)))
548 6637 0
413 6637 0
413 548 6636 0
c (( - aux1591 + SATLiteral(428) + SATLiteral(443))<=0)
-443 -6639 0
-428 -6639 0
-428 -443 -6640 0
c (0<=( - aux1591 + SATLiteral(428) + SATLiteral(443)))
443 6640 0
428 6640 0
428 443 6639 0
c ((SATLiteral(713) + aux1591 - aux1592)<=0)
6639 -6642 0
6640 -6643 0
-713 -6642 0
-713 6639 -6643 0
-713 6640 -6645 0
c (0<=(SATLiteral(713) + aux1591 - aux1592))
-6640 6645 0
-6639 6643 0
713 6645 0
713 -6640 6643 0
713 -6639 6642 0
c ((aux1588 + aux1590 - aux1593)<=0)
6636 -6647 0
6637 -6648 0
6630 -6647 0
6630 6636 -6648 0
6630 6637 -6650 0
6631 -6648 0
6631 6636 -6650 0
6631 6637 -6652 0
c (0<=(aux1588 + aux1590 - aux1593))
-6637 6652 0
-6636 6650 0
-6631 6652 0
-6631 -6637 6650 0
-6631 -6636 6648 0
-6630 6650 0
-6630 -6637 6648 0
-6630 -6636 6647 0
c ((SATLiteral(685) - aux1594 + SATLiteral(580))<=0)
-580 -6654 0
-685 -6654 0
-685 -580 -6655 0
c (0<=(SATLiteral(685) - aux1594 + SATLiteral(580)))
580 6655 0
685 6655 0
685 580 6654 0
c ((SATLiteral(700) - aux1595 + SATLiteral(565))<=0)
-565 -6657 0
-700 -6657 0
-700 -565 -6658 0
c (0<=(SATLiteral(700) - aux1595 + SATLiteral(565)))
565 6658 0
700 6658 0
700 565 6657 0
c (( - aux1596 + SATLiteral(415) + SATLiteral(550))<=0)
-550 -6660 0
-415 -6660 0
-415 -550 -6661 0
c (0<=( - aux1596 + SATLiteral(415) + SATLiteral(550)))
550 6661 0
415 6661 0
415 550 6660 0
c (( - aux1597 + SATLiteral(430) + SATLiteral(445))<=0)
-445 -6663 0
-430 -6663 0
-430 -445 -6664 0
c (0<=( - aux1597 + SATLiteral(430) + SATLiteral(445)))
445 6664 0
430 6664 0
430 445 6663 0
c ((SATLiteral(715) + aux1597 - aux1598)<=0)
6663 -6666 0
6664 -6667 0
-715 -6666 0
-715 6663 -6667 0
-715 6664 -6669 0
c (0<=(SATLiteral(715) + aux1597 - aux1598))
-6664 6669 0
-6663 6667 0
715 6669 0
715 -6664 6667 0
715 -6663 6666 0
c ((aux1594 + aux1596 - aux1599)<=0)
6660 -6671 0
6661 -6672 0
6654 -6671 0
6654 6660 -6672 0
6654 6661 -6674 0
6655 -6672 0
6655 6660 -6674 0
6655 6661 -6676 0
c (0<=(aux1594 + aux1596 - aux1599))
-6661 6676 0
-6660 6674 0
-6655 6676 0
-6655 -6661 6674 0
-6655 -6660 6672 0
-6654 6674 0
-6654 -6661 6672 0
-6654 -6660 6671 0
c ((SATLiteral(687) - aux1600 + SATLiteral(582))<=0)
-582 -6678 0
-687 -6678 0
-687 -582 -6679 0
c (0<=(SATLiteral(687) - aux1600 + SATLiteral(582)))
582 6679 0
687 6679 0
687 582 6678 0
c ((SATLiteral(702) - aux1601 + SATLiteral(567))<=0)
-567 -6681 0
-702 -6681 0
-702 -567 -6682 0
c (0<=(SATLiteral(702) - aux1601 + SATLiteral(567)))
567 6682 0
702 6682 0
702 567 6681 0
c (( - aux1602 + SATLiteral(417) + SATLiteral(552))<=0)
-552 -6684 0
-417 -6684 0
-417 -552 -6685 0
c (0<=( - aux1602 + SATLiteral(417) + SATLiteral(552)))
552 6685 0
417 6685 0
417 552 6684 0
c (( - aux1603 + SATLiteral(432) + SATLiteral(447))<=0)
-447 -6687 0
-432 -6687 0
-432 -447 -6688 0
c (0<=( - aux1603 + SATLiteral(432) + SATLiteral(447)))
447 6688 0
432 6688 0
432 447 6687 0
c ((SATLiteral(717) + aux1603 - aux1604)<=0)
6687 -6690 0
6688 -6691 0
-717 -6690 0
-717 6687 -6691 0
-717 6688 -6693 0
c (0<=(SATLiteral(717) + aux1603 - aux1604))
-6688 6693 0
-6687 6691 0
717 6693 0
717 -6688 6691 0
717 -6687 6690 0
c ((aux1600 + aux1602 - aux1605)<=0)
6684 -6695 0
6685 -6696 0
6678 -6695 0
6678 6684 -6696 0
6678 6685 -6698 0
6679 -6696 0
6679 6684 -6698 0
6679 6685 -6700 0
c (0<=(aux1600 + aux1602 - aux1605))
-6685 6700 0
-6684 6698 0
-6679 6700 0
-6679 -6685 6698 0
-6679 -6684 6696 0
-6678 6698 0
-6678 -6685 6696 0
-6678 -6684 6695 0
c ((SATLiteral(689) - aux1606 + SATLiteral(584))<=0)
-584 -6702 0
-689 -6702 0
-689 -584 -6703 0
c (0<=(SATLiteral(689) - aux1606 + SATLiteral(584)))
584 6703 0
689 6703 0
689 584 6702 0
c ((SATLiteral(704) - aux1607 + SATLiteral(569))<=0)
-569 -6705 0
-704 -6705 0
-704 -569 -6706 0
c (0<=(SATLiteral(704) - aux1607 + SATLiteral(569)))
569 6706 0
704 6706 0
704 569 6705 0
c (( - aux1608 + SATLiteral(419) + SATLiteral(554))<=0)
-554 -6708 0
-419 -6708 0
-419 -554 -6709 0
c (0<=( - aux1608 + SATLiteral(419) + SATLiteral(554)))
554 6709 0
419 6709 0
419 554 6708 0
c (( - aux1609 + SATLiteral(434) + SATLiteral(449))<=0)
-449 -6711 0
-434 -6711 0
-434 -449 -6712 0
c (0<=( - aux1609 + SATLiteral(434) + SATLiteral(449)))
449 6712 0
434 6712 0
434 449 6711 0
c ((SATLiteral(719) + aux1609 - aux1610)<=0)
6711 -6714 0
6712 -6715 0
-719 -6714 0
-719 6711 -6715 0
-719 6712 -6717 0
c (0<=(SATLiteral(719) + aux1609 - aux1610))
-6712 6717 0
-6711 6715 0
719 6717 0
719 -6712 6715 0
719 -6711 6714 0
c ((aux1606 + aux1608 - aux1611)<=0)
6708 -6719 0
6709 -6720 0
6702 -6719 0
6702 6708 -6720 0
6702 6709 -6722 0
6703 -6720 0
6703 6708 -6722 0
6703 6709 -6724 0
c (0<=(aux1606 + aux1608 - aux1611))
-6709 6724 0
-6708 6722 0
-6703 6724 0
-6703 -6709 6722 0
-6703 -6708 6720 0
-6702 6722 0
-6702 -6709 6720 0
-6702 -6708 6719 0
c ((SATLiteral(691) - aux1612 + SATLiteral(586))<=0)
-586 -6726 0
-691 -6726 0
-691 -586 -6727 0
c (0<=(SATLiteral(691) - aux1612 + SATLiteral(586)))
586 6727 0
691 6727 0
691 586 6726 0
c ((SATLiteral(706) - aux1613 + SATLiteral(571))<=0)
-571 -6729 0
-706 -6729 0
-706 -571 -6730 0
c (0<=(SATLiteral(706) - aux1613 + SATLiteral(571)))
571 6730 0
706 6730 0
706 571 6729 0
c (( - aux1614 + SATLiteral(421) + SATLiteral(556))<=0)
-556 -6732 0
-421 -6732 0
-421 -556 -6733 0
c (0<=( - aux1614 + SATLiteral(421) + SATLiteral(556)))
556 6733 0
421 6733 0
421 556 6732 0
c (( - aux1615 + SATLiteral(436) + SATLiteral(451))<=0)
-451 -6735 0
-436 -6735 0
-436 -451 -6736 0
c (0<=( - aux1615 + SATLiteral(436) + SATLiteral(451)))
451 6736 0
436 6736 0
436 451 6735 0
c ((SATLiteral(721) + aux1615 - aux1616)<=0)
6735 -6738 0
6736 -6739 0
-721 -6738 0
-721 6735 -6739 0
-721 6736 -6741 0
c (0<=(SATLiteral(721) + aux1615 - aux1616))
-6736 6741 0
-6735 6739 0
721 6741 0
721 -6736 6739 0
721 -6735 6738 0
c ((aux1612 + aux1614 - aux1617)<=0)
6732 -6743 0
6733 -6744 0
6726 -6743 0
6726 6732 -6744 0
6726 6733 -6746 0
6727 -6744 0
6727 6732 -6746 0
6727 6733 -6748 0
c (0<=(aux1612 + aux1614 - aux1617))
-6733 6748 0
-6732 6746 0
-6727 6748 0
-6727 -6733 6746 0
-6727 -6732 6744 0
-6726 6746 0
-6726 -6733 6744 0
-6726 -6732 6743 0
c ((SATLiteral(-690) - aux1618 + SATLiteral(-585))<=0)
585 -6750 0
690 -6750 0
690 585 -6751 0
c (0<=(SATLiteral(-690) - aux1618 + SATLiteral(-585)))
-585 6751 0
-690 6751 0
-690 -585 6750 0
c ((SATLiteral(-705) - aux1619 + SATLiteral(-570))<=0)
570 -6753 0
705 -6753 0
705 570 -6754 0
c (0<=(SATLiteral(-705) - aux1619 + SATLiteral(-570)))
-570 6754 0
-705 6754 0
-705 -570 6753 0
c (( - aux1620 + SATLiteral(-420) + SATLiteral(-555))<=0)
555 -6756 0
420 -6756 0
420 555 -6757 0
c (0<=( - aux1620 + SATLiteral(-420) + SATLiteral(-555)))
-555 6757 0
-420 6757 0
-420 -555 6756 0
c (( - aux1621 + SATLiteral(-435) + SATLiteral(-450))<=0)
450 -6759 0
435 -6759 0
435 450 -6760 0
c (0<=( - aux1621 + SATLiteral(-435) + SATLiteral(-450)))
-450 6760 0
-435 6760 0
-435 -450 6759 0
c ((SATLiteral(-720) + aux1621 - aux1622)<=0)
6759 -6762 0
6760 -6763 0
720 -6762 0
720 6759 -6763 0
720 6760 -6765 0
c (0<=(SATLiteral(-720) + aux1621 - aux1622))
-6760 6765 0
-6759 6763 0
-720 6765 0
-720 -6760 6763 0
-720 -6759 6762 0
c ((aux1618 + aux1620 - aux1623)<=0)
6756 -6767 0
6757 -6768 0
6750 -6767 0
6750 6756 -6768 0
6750 6757 -6770 0
6751 -6768 0
6751 6756 -6770 0
6751 6757 -6772 0
c (0<=(aux1618 + aux1620 - aux1623))
-6757 6772 0
-6756 6770 0
-6751 6772 0
-6751 -6757 6770 0
-6751 -6756 6768 0
-6750 6770 0
-6750 -6757 6768 0
-6750 -6756 6767 0
c ((SATLiteral(722) - aux1624 + SATLiteral(617))<=0)
-617 -6774 0
-722 -6774 0
-722 -617 -6775 0
c (0<=(SATLiteral(722) - aux1624 + SATLiteral(617)))
617 6775 0
722 6775 0
722 617 6774 0
c ((SATLiteral(737) - aux1625 + SATLiteral(602))<=0)
-602 -6777 0
-737 -6777 0
-737 -602 -6778 0
c (0<=(SATLiteral(737) - aux1625 + SATLiteral(602)))
602 6778 0
737 6778 0
737 602 6777 0
c (( - aux1626 + SATLiteral(452) + SATLiteral(587))<=0)
-587 -6780 0
-452 -6780 0
-452 -587 -6781 0
c (0<=( - aux1626 + SATLiteral(452) + SATLiteral(587)))
587 6781 0
452 6781 0
452 587 6780 0
c (( - aux1627 + SATLiteral(467) + SATLiteral(482))<=0)
-482 -6783 0
-467 -6783 0
-467 -482 -6784 0
c (0<=( - aux1627 + SATLiteral(467) + SATLiteral(482)))
482 6784 0
467 6784 0
467 482 6783 0
c ((SATLiteral(752) + aux1627 - aux1628)<=0)
6783 -6786 0
6784 -6787 0
-752 -6786 0
-752 6783 -6787 0
-752 6784 -6789 0
c (0<=(SATLiteral(752) + aux1627 - aux1628))
-6784 6789 0
-6783 6787 0
752 6789 0
752 -6784 6787 0
752 -6783 6786 0
c ((aux1624 + aux1626 - aux1629)<=0)
6780 -6791 0
6781 -6792 0
6774 -6791 0
6774 6780 -6792 0
6774 6781 -6794 0
6775 -6792 0
6775 6780 -6794 0
6775 6781 -6796 0
c (0<=(aux1624 + aux1626 - aux1629))
-6781 6796 0
-6780 6794 0
-6775 6796 0
-6775 -6781 6794 0
-6775 -6780 6792 0
-6774 6794 0
-6774 -6781 6792 0
-6774 -6780 6791 0
c ((SATLiteral(724) - aux1630 + SATLiteral(619))<=0)
-619 -6798 0
-724 -6798 0
-724 -619 -6799 0
c (0<=(SATLiteral(724) - aux1630 + SATLiteral(619)))
619 6799 0
724 6799 0
724 619 6798 0
c ((SATLiteral(739) - aux1631 + SATLiteral(604))<=0)
-604 -6801 0
-739 -6801 0
-739 -604 -6802 0
c (0<=(SATLiteral(739) - aux1631 + SATLiteral(604)))
604 6802 0
739 6802 0
739 604 6801 0
c (( - aux1632 + SATLiteral(454) + SATLiteral(589))<=0)
-589 -6804 0
-454 -6804 0
-454 -589 -6805 0
c (0<=( - aux1632 + SATLiteral(454) + SATLiteral(589)))
589 6805 0
454 6805 0
454 589 6804 0
c (( - aux1633 + SATLiteral(469) + SATLiteral(484))<=0)
-484 -6807 0
-469 -6807 0
-469 -484 -6808 0
c (0<=( - aux1633 + SATLiteral(469) + SATLiteral(484)))
484 6808 0
469 6808 0
469 484 6807 0
c ((SATLiteral(754) + aux1633 - aux1634)<=0)
6807 -6810 0
6808 -6811 0
-754 -6810 0
-754 6807 -6811 0
-754 6808 -6813 0
c (0<=(SATLiteral(754) + aux1633 - aux1634))
-6808 6813 0
-6807 6811 0
754 6813 0
754 -6808 6811 0
754 -6807 6810 0
c ((aux1630 + aux1632 - aux1635)<=0)
6804 -6815 0
6805 -6816 0
6798 -6815 0
6798 6804 -6816 0
6798 6805 -6818 0
6799 -6816 0
6799 6804 -6818 0
6799 6805 -6820 0
c (0<=(aux1630 + aux1632 - aux1635))
-6805 6820 0
-6804 6818 0
-6799 6820 0
-6799 -6805 6818 0
-6799 -6804 6816 0
-6798 6818 0
-6798 -6805 6816 0
-6798 -6804 6815 0
c ((SATLiteral(726) - aux1636 + SATLiteral(621))<=0)
-621 -6822 0
-726 -6822 0
-726 -621 -6823 0
c (0<=(SATLiteral(726) - aux1636 + SATLiteral(621)))
621 6823 0
726 6823 0
726 621 6822 0
c ((SATLiteral(741) - aux1637 + SATLiteral(606))<=0)
-606 -6825 0
-741 -6825 0
-741 -606 -6826 0
c (0<=(SATLiteral(741) - aux1637 + SATLiteral(606)))
606 6826 0
741 6826 0
741 606 6825 0
c (( - aux1638 + SATLiteral(456) + SATLiteral(591))<=0)
-591 -6828 0
-456 -6828 0
-456 -591 -6829 0
c (0<=( - aux1638 + SATLiteral(456) + SATLiteral(591)))
591 6829 0
456 6829 0
456 591 6828 0
c (( - aux1639 + SATLiteral(471) + SATLiteral(486))<=0)
-486 -6831 0
-471 -6831 0
-471 -486 -6832 0
c (0<=( - aux1639 + SATLiteral(471) + SATLiteral(486)))
486 6832 0
471 6832 0
471 486 6831 0
c ((SATLiteral(756) + aux1639 - aux1640)<=0)
6831 -6834 0
6832 -6835 0
-756 -6834 0
-756 6831 -6835 0
-756 6832 -6837 0
c (0<=(SATLiteral(756) + aux1639 - aux1640))
-6832 6837 0
-6831 6835 0
756 6837 0
756 -6832 6835 0
756 -6831 6834 0
c ((aux1636 + aux1638 - aux1641)<=0)
6828 -6839 0
6829 -6840 0
6822 -6839 0
6822 6828 -6840 0
6822 6829 -6842 0
6823 -6840 0
6823 6828 -6842 0
6823 6829 -6844 0
c (0<=(aux1636 + aux1638 - aux1641))
-6829 6844 0
-6828 6842 0
-6823 6844 0
-6823 -6829 6842 0
-6823 -6828 6840 0
-6822 6842 0
-6822 -6829 6840 0
-6822 -6828 6839 0
c ((SATLiteral(728) - aux1642 + SATLiteral(623))<=0)
-623 -6846 0
-728 -6846 0
-728 -623 -6847 0
c (0<=(SATLiteral(728) - aux1642 + SATLiteral(623)))
623 6847 0
728 6847 0
728 623 6846 0
c ((SATLiteral(743) - aux1643 + SATLiteral(608))<=0)
-608 -6849 0
-743 -6849 0
-743 -608 -6850 0
c (0<=(SATLiteral(743) - aux1643 + SATLiteral(608)))
608 6850 0
743 6850 0
743 608 6849 0
c (( - aux1644 + SATLiteral(458) + SATLiteral(593))<=0)
-593 -6852 0
-458 -6852 0
-458 -593 -6853 0
c (0<=( - aux1644 + SATLiteral(458) + SATLiteral(593)))
593 6853 0
458 6853 0
458 593 6852 0
c (( - aux1645 + SATLiteral(473) + SATLiteral(488))<=0)
-488 -6855 0
-473 -6855 0
-473 -488 -6856 0
c (0<=( - aux1645 + SATLiteral(473) + SATLiteral(488)))
488 6856 0
473 6856 0
473 488 6855 0
c ((SATLiteral(758) + aux1645 - aux1646)<=0)
6855 -6858 0
6856 -6859 0
-758 -6858 0
-758 6855 -6859 0
-758 6856 -6861 0
c (0<=(SATLiteral(758) + aux1645 - aux1646))
-6856 6861 0
-6855 6859 0
758 6861 0
758 -6856 6859 0
758 -6855 6858 0
c ((aux1642 + aux1644 - aux1647)<=0)
6852 -6863 0
6853 -6864 0
6846 -6863 0
6846 6852 -6864 0
6846 6853 -6866 0
6847 -6864 0
6847 6852 -6866 0
6847 6853 -6868 0
c (0<=(aux1642 + aux1644 - aux1647))
-6853 6868 0
-6852 6866 0
-6847 6868 0
-6847 -6853 6866 0
-6847 -6852 6864 0
-6846 6866 0
-6846 -6853 6864 0
-6846 -6852 6863 0
c ((SATLiteral(730) - aux1648 + SATLiteral(625))<=0)
-625 -6870 0
-730 -6870 0
-730 -625 -6871 0
c (0<=(SATLiteral(730) - aux1648 + SATLiteral(625)))
625 6871 0
730 6871 0
730 625 6870 0
c ((SATLiteral(745) - aux1649 + SATLiteral(610))<=0)
-610 -6873 0
-745 -6873 0
-745 -610 -6874 0
c (0<=(SATLiteral(745) - aux1649 + SATLiteral(610)))
610 6874 0
745 6874 0
745 610 6873 0
c (( - aux1650 + SATLiteral(460) + SATLiteral(595))<=0)
-595 -6876 0
-460 -6876 0
-460 -595 -6877 0
c (0<=( - aux1650 + SATLiteral(460) + SATLiteral(595)))
595 6877 0
460 6877 0
460 595 6876 0
c (( - aux1651 + SATLiteral(475) + SATLiteral(490))<=0)
-490 -6879 0
-475 -6879 0
-475 -490 -6880 0
c (0<=( - aux1651 + SATLiteral(475) + SATLiteral(490)))
490 6880 0
475 6880 0
475 490 6879 0
c ((SATLiteral(760) + aux1651 - aux1652)<=0)
6879 -6882 0
6880 -6883 0
-760 -6882 0
-760 6879 -6883 0
-760 6880 -6885 0
c (0<=(SATLiteral(760) + aux1651 - aux1652))
-6880 6885 0
-6879 6883 0
760 6885 0
760 -6880 6883 0
760 -6879 6882 0
c ((aux1648 + aux1650 - aux1653)<=0)
6876 -6887 0
6877 -6888 0
6870 -6887 0
6870 6876 -6888 0
6870 6877 -6890 0
6871 -6888 0
6871 6876 -6890 0
6871 6877 -6892 0
c (0<=(aux1648 + aux1650 - aux1653))
-6877 6892 0
-6876 6890 0
-6871 6892 0
-6871 -6877 6890 0
-6871 -6876 6888 0
-6870 6890 0
-6870 -6877 6888 0
-6870 -6876 6887 0
c ((SATLiteral(732) - aux1654 + SATLiteral(627))<=0)
-627 -6894 0
-732 -6894 0
-732 -627 -6895 0
c (0<=(SATLiteral(732) - aux1654 + SATLiteral(627)))
627 6895 0
732 6895 0
732 627 6894 0
c ((SATLiteral(747) - aux1655 + SATLiteral(612))<=0)
-612 -6897 0
-747 -6897 0
-747 -612 -6898 0
c (0<=(SATLiteral(747) - aux1655 + SATLiteral(612)))
612 6898 0
747 6898 0
747 612 6897 0
c (( - aux1656 + SATLiteral(462) + SATLiteral(597))<=0)
-597 -6900 0
-462 -6900 0
-462 -597 -6901 0
c (0<=( - aux1656 + SATLiteral(462) + SATLiteral(597)))
597 6901 0
462 6901 0
462 597 6900 0
c (( - aux1657 + SATLiteral(477) + SATLiteral(492))<=0)
-492 -6903 0
-477 -6903 0
-477 -492 -6904 0
c (0<=( - aux1657 + SATLiteral(477) + SATLiteral(492)))
492 6904 0
477 6904 0
477 492 6903 0
c ((SATLiteral(762) + aux1657 - aux1658)<=0)
6903 -6906 0
6904 -6907 0
-762 -6906 0
-762 6903 -6907 0
-762 6904 -6909 0
c (0<=(SATLiteral(762) + aux1657 - aux1658))
-6904 6909 0
-6903 6907 0
762 6909 0
762 -6904 6907 0
762 -6903 6906 0
c ((aux1654 + aux1656 - aux1659)<=0)
6900 -6911 0
6901 -6912 0
6894 -6911 0
6894 6900 -6912 0
6894 6901 -6914 0
6895 -6912 0
6895 6900 -6914 0
6895 6901 -6916 0
c (0<=(aux1654 + aux1656 - aux1659))
-6901 6916 0
-6900 6914 0
-6895 6916 0
-6895 -6901 6914 0
-6895 -6900 6912 0
-6894 6914 0
-6894 -6901 6912 0
-6894 -6900 6911 0
c ((SATLiteral(734) - aux1660 + SATLiteral(629))<=0)
-629 -6918 0
-734 -6918 0
-734 -629 -6919 0
c (0<=(SATLiteral(734) - aux1660 + SATLiteral(629)))
629 6919 0
734 6919 0
734 629 6918 0
c ((SATLiteral(749) - aux1661 + SATLiteral(614))<=0)
-614 -6921 0
-749 -6921 0
-749 -614 -6922 0
c (0<=(SATLiteral(749) - aux1661 + SATLiteral(614)))
614 6922 0
749 6922 0
749 614 6921 0
c (( - aux1662 + SATLiteral(464) + SATLiteral(599))<=0)
-599 -6924 0
-464 -6924 0
-464 -599 -6925 0
c (0<=( - aux1662 + SATLiteral(464) + SATLiteral(599)))
599 6925 0
464 6925 0
464 599 6924 0
c (( - aux1663 + SATLiteral(479) + SATLiteral(494))<=0)
-494 -6927 0
-479 -6927 0
-479 -494 -6928 0
c (0<=( - aux1663 + SATLiteral(479) + SATLiteral(494)))
494 6928 0
479 6928 0
479 494 6927 0
c ((SATLiteral(764) + aux1663 - aux1664)<=0)
6927 -6930 0
6928 -6931 0
-764 -6930 0
-764 6927 -6931 0
-764 6928 -6933 0
c (0<=(SATLiteral(764) + aux1663 - aux1664))
-6928 6933 0
-6927 6931 0
764 6933 0
764 -6928 6931 0
764 -6927 6930 0
c ((aux1660 + aux1662 - aux1665)<=0)
6924 -6935 0
6925 -6936 0
6918 -6935 0
6918 6924 -6936 0
6918 6925 -6938 0
6919 -6936 0
6919 6924 -6938 0
6919 6925 -6940 0
c (0<=(aux1660 + aux1662 - aux1665))
-6925 6940 0
-6924 6938 0
-6919 6940 0
-6919 -6925 6938 0
-6919 -6924 6936 0
-6918 6938 0
-6918 -6925 6936 0
-6918 -6924 6935 0
c ((SATLiteral(736) - aux1666 + SATLiteral(631))<=0)
-631 -6942 0
-736 -6942 0
-736 -631 -6943 0
c (0<=(SATLiteral(736) - aux1666 + SATLiteral(631)))
631 6943 0
736 6943 0
736 631 6942 0
c ((SATLiteral(751) - aux1667 + SATLiteral(616))<=0)
-616 -6945 0
-751 -6945 0
-751 -616 -6946 0
c (0<=(SATLiteral(751) - aux1667 + SATLiteral(616)))
616 6946 0
751 6946 0
751 616 6945 0
c (( - aux1668 + SATLiteral(466) + SATLiteral(601))<=0)
-601 -6948 0
-466 -6948 0
-466 -601 -6949 0
c (0<=( - aux1668 + SATLiteral(466) + SATLiteral(601)))
601 6949 0
466 6949 0
466 601 6948 0
c (( - aux1669 + SATLiteral(481) + SATLiteral(496))<=0)
-496 -6951 0
-481 -6951 0
-481 -496 -6952 0
c (0<=( - aux1669 + SATLiteral(481) + SATLiteral(496)))
496 6952 0
481 6952 0
481 496 6951 0
c ((SATLiteral(766) + aux1669 - aux1670)<=0)
6951 -6954 0
6952 -6955 0
-766 -6954 0
-766 6951 -6955 0
-766 6952 -6957 0
c (0<=(SATLiteral(766) + aux1669 - aux1670))
-6952 6957 0
-6951 6955 0
766 6957 0
766 -6952 6955 0
766 -6951 6954 0
c ((aux1666 + aux1668 - aux1671)<=0)
6948 -6959 0
6949 -6960 0
6942 -6959 0
6942 6948 -6960 0
6942 6949 -6962 0
6943 -6960 0
6943 6948 -6962 0
6943 6949 -6964 0
c (0<=(aux1666 + aux1668 - aux1671))
-6949 6964 0
-6948 6962 0
-6943 6964 0
-6943 -6949 6962 0
-6943 -6948 6960 0
-6942 6962 0
-6942 -6949 6960 0
-6942 -6948 6959 0
c ((SATLiteral(-735) - aux1672 + SATLiteral(-630))<=0)
630 -6966 0
735 -6966 0
735 630 -6967 0
c (0<=(SATLiteral(-735) - aux1672 + SATLiteral(-630)))
-630 6967 0
-735 6967 0
-735 -630 6966 0
c ((SATLiteral(-750) - aux1673 + SATLiteral(-615))<=0)
615 -6969 0
750 -6969 0
750 615 -6970 0
c (0<=(SATLiteral(-750) - aux1673 + SATLiteral(-615)))
-615 6970 0
-750 6970 0
-750 -615 6969 0
c (( - aux1674 + SATLiteral(-465) + SATLiteral(-600))<=0)
600 -6972 0
465 -6972 0
465 600 -6973 0
c (0<=( - aux1674 + SATLiteral(-465) + SATLiteral(-600)))
-600 6973 0
-465 6973 0
-465 -600 6972 0
c (( - aux1675 + SATLiteral(-480) + SATLiteral(-495))<=0)
495 -6975 0
480 -6975 0
480 495 -6976 0
c (0<=( - aux1675 + SATLiteral(-480) + SATLiteral(-495)))
-495 6976 0
-480 6976 0
-480 -495 6975 0
c ((SATLiteral(-765) + aux1675 - aux1676)<=0)
6975 -6978 0
6976 -6979 0
765 -6978 0
765 6975 -6979 0
765 6976 -6981 0
c (0<=(SATLiteral(-765) + aux1675 - aux1676))
-6976 6981 0
-6975 6979 0
-765 6981 0
-765 -6976 6979 0
-765 -6975 6978 0
c ((aux1672 + aux1674 - aux1677)<=0)
6972 -6983 0
6973 -6984 0
6966 -6983 0
6966 6972 -6984 0
6966 6973 -6986 0
6967 -6984 0
6967 6972 -6986 0
6967 6973 -6988 0
c (0<=(aux1672 + aux1674 - aux1677))
-6973 6988 0
-6972 6986 0
-6967 6988 0
-6967 -6973 6986 0
-6967 -6972 6984 0
-6966 6986 0
-6966 -6973 6984 0
-6966 -6972 6983 0
c ((SATLiteral(767) - aux1678 + SATLiteral(662))<=0)
-662 -6990 0
-767 -6990 0
-767 -662 -6991 0
c (0<=(SATLiteral(767) - aux1678 + SATLiteral(662)))
662 6991 0
767 6991 0
767 662 6990 0
c ((SATLiteral(782) - aux1679 + SATLiteral(647))<=0)
-647 -6993 0
-782 -6993 0
-782 -647 -6994 0
c (0<=(SATLiteral(782) - aux1679 + SATLiteral(647)))
647 6994 0
782 6994 0
782 647 6993 0
c (( - aux1680 + SATLiteral(497) + SATLiteral(632))<=0)
-632 -6996 0
-497 -6996 0
-497 -632 -6997 0
c (0<=( - aux1680 + SATLiteral(497) + SATLiteral(632)))
632 6997 0
497 6997 0
497 632 6996 0
c (( - aux1681 + SATLiteral(512) + SATLiteral(527))<=0)
-527 -6999 0
-512 -6999 0
-512 -527 -7000 0
c (0<=( - aux1681 + SATLiteral(512) + SATLiteral(527)))
527 7000 0
512 7000 0
512 527 6999 0
c ((SATLiteral(797) + aux1681 - aux1682)<=0)
6999 -7002 0
7000 -7003 0
-797 -7002 0
-797 6999 -7003 0
-797 7000 -7005 0
c (0<=(SATLiteral(797) + aux1681 - aux1682))
-7000 7005 0
-6999 7003 0
797 7005 0
797 -7000 7003 0
797 -6999 7002 0
c ((aux1678 + aux1680 - aux1683)<=0)
6996 -7007 0
6997 -7008 0
6990 -7007 0
6990 6996 -7008 0
6990 6997 -7010 0
6991 -7008 0
6991 6996 -7010 0
6991 6997 -7012 0
c (0<=(aux1678 + aux1680 - aux1683))
-6997 7012 0
-6996 7010 0
-6991 7012 0
-6991 -6997 7010 0
-6991 -6996 7008 0
-6990 7010 0
-6990 -6997 7008 0
-6990 -6996 7007 0
c ((SATLiteral(769) - aux1684 + SATLiteral(664))<=0)
-664 -7014 0
-769 -7014 0
-769 -664 -7015 0
c (0<=(SATLiteral(769) - aux1684 + SATLiteral(664)))
664 7015 0
769 7015 0
769 664 7014 0
c ((SATLiteral(784) - aux1685 + SATLiteral(649))<=0)
-649 -7017 0
-784 -7017 0
-784 -649 -7018 0
c (0<=(SATLiteral(784) - aux1685 + SATLiteral(649)))
649 7018 0
784 7018 0
784 649 7017 0
c (( - aux1686 + SATLiteral(499) + SATLiteral(634))<=0)
-634 -7020 0
-499 -7020 0
-499 -634 -7021 0
c (0<=( - aux1686 + SATLiteral(499) + SATLiteral(634)))
634 7021 0
499 7021 0
499 634 7020 0
c (( - aux1687 + SATLiteral(514) + SATLiteral(529))<=0)
-529 -7023 0
-514 -7023 0
-514 -529 -7024 0
c (0<=( - aux1687 + SATLiteral(514) + SATLiteral(529)))
529 7024 0
514 7024 0
514 529 7023 0
c ((SATLiteral(799) + aux1687 - aux1688)<=0)
7023 -7026 0
7024 -7027 0
-799 -7026 0
-799 7023 -7027 0
-799 7024 -7029 0
c (0<=(SATLiteral(799) + aux1687 - aux1688))
-7024 7029 0
-7023 7027 0
799 7029 0
799 -7024 7027 0
799 -7023 7026 0
c ((aux1684 + aux1686 - aux1689)<=0)
7020 -7031 0
7021 -7032 0
7014 -7031 0
7014 7020 -7032 0
7014 7021 -7034 0
7015 -7032 0
7015 7020 -7034 0
7015 7021 -7036 0
c (0<=(aux1684 + aux1686 - aux1689))
-7021 7036 0
-7020 7034 0
-7015 7036 0
-7015 -7021 7034 0
-7015 -7020 7032 0
-7014 7034 0
-7014 -7021 7032 0
-7014 -7020 7031 0
c ((SATLiteral(771) - aux1690 + SATLiteral(666))<=0)
-666 -7038 0
-771 -7038 0
-771 -666 -7039 0
c (0<=(SATLiteral(771) - aux1690 + SATLiteral(666)))
666 7039 0
771 7039 0
771 666 7038 0
c ((SATLiteral(786) - aux1691 + SATLiteral(651))<=0)
-651 -7041 0
-786 -7041 0
-786 -651 -7042 0
c (0<=(SATLiteral(786) - aux1691 + SATLiteral(651)))
651 7042 0
786 7042 0
786 651 7041 0
c (( - aux1692 + SATLiteral(501) + SATLiteral(636))<=0)
-636 -7044 0
-501 -7044 0
-501 -636 -7045 0
c (0<=( - aux1692 + SATLiteral(501) + SATLiteral(636)))
636 7045 0
501 7045 0
501 636 7044 0
c (( - aux1693 + SATLiteral(516) + SATLiteral(531))<=0)
-531 -7047 0
-516 -7047 0
-516 -531 -7048 0
c (0<=( - aux1693 + SATLiteral(516) + SATLiteral(531)))
531 7048 0
516 7048 0
516 531 7047 0
c ((SATLiteral(801) + aux1693 - aux1694)<=0)
7047 -7050 0
7048 -7051 0
-801 -7050 0
-801 7047 -7051 0
-801 7048 -7053 0
c (0<=(SATLiteral(801) + aux1693 - aux1694))
-7048 7053 0
-7047 7051 0
801 7053 0
801 -7048 7051 0
801 -7047 7050 0
c ((aux1690 + aux1692 - aux1695)<=0)
7044 -7055 0
7045 -7056 0
7038 -7055 0
7038 7044 -7056 0
7038 7045 -7058 0
7039 -7056 0
7039 7044 -7058 0
7039 7045 -7060 0
c (0<=(aux1690 + aux1692 - aux1695))
-7045 7060 0
-7044 7058 0
-7039 7060 0
-7039 -7045 7058 0
-7039 -7044 7056 0
-7038 7058 0
-7038 -7045 7056 0
-7038 -7044 7055 0
c ((SATLiteral(773) - aux1696 + SATLiteral(668))<=0)
-668 -7062 0
-773 -7062 0
-773 -668 -7063 0
c (0<=(SATLiteral(773) - aux1696 + SATLiteral(668)))
668 7063 0
773 7063 0
773 668 7062 0
c ((SATLiteral(788) - aux1697 + SATLiteral(653))<=0)
-653 -7065 0
-788 -7065 0
-788 -653 -7066 0
c (0<=(SATLiteral(788) - aux1697 + SATLiteral(653)))
653 7066 0
788 7066 0
788 653 7065 0
c (( - aux1698 + SATLiteral(503) + SATLiteral(638))<=0)
-638 -7068 0
-503 -7068 0
-503 -638 -7069 0
c (0<=( - aux1698 + SATLiteral(503) + SATLiteral(638)))
638 7069 0
503 7069 0
503 638 7068 0
c (( - aux1699 + SATLiteral(518) + SATLiteral(533))<=0)
-533 -7071 0
-518 -7071 0
-518 -533 -7072 0
c (0<=( - aux1699 + SATLiteral(518) + SATLiteral(533)))
533 7072 0
518 7072 0
518 533 7071 0
c ((SATLiteral(803) + aux1699 - aux1700)<=0)
7071 -7074 0
7072 -7075 0
-803 -7074 0
-803 7071 -7075 0
-803 7072 -7077 0
c (0<=(SATLiteral(803) + aux1699 - aux1700))
-7072 7077 0
-7071 7075 0
803 7077 0
803 -7072 7075 0
803 -7071 7074 0
c ((aux1696 + aux1698 - aux1701)<=0)
7068 -7079 0
7069 -7080 0
7062 -7079 0
7062 7068 -7080 0
7062 7069 -7082 0
7063 -7080 0
7063 7068 -7082 0
7063 7069 -7084 0
c (0<=(aux1696 + aux1698 - aux1701))
-7069 7084 0
-7068 7082 0
-7063 7084 0
-7063 -7069 7082 0
-7063 -7068 7080 0
-7062 7082 0
-7062 -7069 7080 0
-7062 -7068 7079 0
c ((SATLiteral(775) - aux1702 + SATLiteral(670))<=0)
-670 -7086 0
-775 -7086 0
-775 -670 -7087 0
c (0<=(SATLiteral(775) - aux1702 + SATLiteral(670)))
670 7087 0
775 7087 0
775 670 7086 0
c ((SATLiteral(790) - aux1703 + SATLiteral(655))<=0)
-655 -7089 0
-790 -7089 0
-790 -655 -7090 0
c (0<=(SATLiteral(790) - aux1703 + SATLiteral(655)))
655 7090 0
790 7090 0
790 655 7089 0
c (( - aux1704 + SATLiteral(505) + SATLiteral(640))<=0)
-640 -7092 0
-505 -7092 0
-505 -640 -7093 0
c (0<=( - aux1704 + SATLiteral(505) + SATLiteral(640)))
640 7093 0
505 7093 0
505 640 7092 0
c (( - aux1705 + SATLiteral(520) + SATLiteral(535))<=0)
-535 -7095 0
-520 -7095 0
-520 -535 -7096 0
c (0<=( - aux1705 + SATLiteral(520) + SATLiteral(535)))
535 7096 0
520 7096 0
520 535 7095 0
c ((SATLiteral(805) + aux1705 - aux1706)<=0)
7095 -7098 0
7096 -7099 0
-805 -7098 0
-805 7095 -7099 0
-805 7096 -7101 0
c (0<=(SATLiteral(805) + aux1705 - aux1706))
-7096 7101 0
-7095 7099 0
805 7101 0
805 -7096 7099 0
805 -7095 7098 0
c ((aux1702 + aux1704 - aux1707)<=0)
7092 -7103 0
7093 -7104 0
7086 -7103 0
7086 7092 -7104 0
7086 7093 -7106 0
7087 -7104 0
7087 7092 -7106 0
7087 7093 -7108 0
c (0<=(aux1702 + aux1704 - aux1707))
-7093 7108 0
-7092 7106 0
-7087 7108 0
-7087 -7093 7106 0
-7087 -7092 7104 0
-7086 7106 0
-7086 -7093 7104 0
-7086 -7092 7103 0
c ((SATLiteral(777) - aux1708 + SATLiteral(672))<=0)
-672 -7110 0
-777 -7110 0
-777 -672 -7111 0
c (0<=(SATLiteral(777) - aux1708 + SATLiteral(672)))
672 7111 0
777 7111 0
777 672 7110 0
c ((SATLiteral(792) - aux1709 + SATLiteral(657))<=0)
-657 -7113 0
-792 -7113 0
-792 -657 -7114 0
c (0<=(SATLiteral(792) - aux1709 + SATLiteral(657)))
657 7114 0
792 7114 0
792 657 7113 0
c (( - aux1710 + SATLiteral(507) + SATLiteral(642))<=0)
-642 -7116 0
-507 -7116 0
-507 -642 -7117 0
c (0<=( - aux1710 + SATLiteral(507) + SATLiteral(642)))
642 7117 0
507 7117 0
507 642 7116 0
c (( - aux1711 + SATLiteral(522) + SATLiteral(537))<=0)
-537 -7119 0
-522 -7119 0
-522 -537 -7120 0
c (0<=( - aux1711 + SATLiteral(522) + SATLiteral(537)))
537 7120 0
522 7120 0
522 537 7119 0
c ((SATLiteral(807) + aux1711 - aux1712)<=0)
7119 -7122 0
7120 -7123 0
-807 -7122 0
-807 7119 -7123 0
-807 7120 -7125 0
c (0<=(SATLiteral(807) + aux1711 - aux1712))
-7120 7125 0
-7119 7123 0
807 7125 0
807 -7120 7123 0
807 -7119 7122 0
c ((aux1708 + aux1710 - aux1713)<=0)
7116 -7127 0
7117 -7128 0
7110 -7127 0
7110 7116 -7128 0
7110 7117 -7130 0
7111 -7128 0
7111 7116 -7130 0
7111 7117 -7132 0
c (0<=(aux1708 + aux1710 - aux1713))
-7117 7132 0
-7116 7130 0
-7111 7132 0
-7111 -7117 7130 0
-7111 -7116 7128 0
-7110 7130 0
-7110 -7117 7128 0
-7110 -7116 7127 0
c ((SATLiteral(779) - aux1714 + SATLiteral(674))<=0)
-674 -7134 0
-779 -7134 0
-779 -674 -7135 0
c (0<=(SATLiteral(779) - aux1714 + SATLiteral(674)))
674 7135 0
779 7135 0
779 674 7134 0
c ((SATLiteral(794) - aux1715 + SATLiteral(659))<=0)
-659 -7137 0
-794 -7137 0
-794 -659 -7138 0
c (0<=(SATLiteral(794) - aux1715 + SATLiteral(659)))
659 7138 0
794 7138 0
794 659 7137 0
c (( - aux1716 + SATLiteral(509) + SATLiteral(644))<=0)
-644 -7140 0
-509 -7140 0
-509 -644 -7141 0
c (0<=( - aux1716 + SATLiteral(509) + SATLiteral(644)))
644 7141 0
509 7141 0
509 644 7140 0
c (( - aux1717 + SATLiteral(524) + SATLiteral(539))<=0)
-539 -7143 0
-524 -7143 0
-524 -539 -7144 0
c (0<=( - aux1717 + SATLiteral(524) + SATLiteral(539)))
539 7144 0
524 7144 0
524 539 7143 0
c ((SATLiteral(809) + aux1717 - aux1718)<=0)
7143 -7146 0
7144 -7147 0
-809 -7146 0
-809 7143 -7147 0
-809 7144 -7149 0
c (0<=(SATLiteral(809) + aux1717 - aux1718))
-7144 7149 0
-7143 7147 0
809 7149 0
809 -7144 7147 0
809 -7143 7146 0
c ((aux1714 + aux1716 - aux1719)<=0)
7140 -7151 0
7141 -7152 0
7134 -7151 0
7134 7140 -7152 0
7134 7141 -7154 0
7135 -7152 0
7135 7140 -7154 0
7135 7141 -7156 0
c (0<=(aux1714 + aux1716 - aux1719))
-7141 7156 0
-7140 7154 0
-7135 7156 0
-7135 -7141 7154 0
-7135 -7140 7152 0
-7134 7154 0
-7134 -7141 7152 0
-7134 -7140 7151 0
c ((SATLiteral(781) - aux1720 + SATLiteral(676))<=0)
-676 -7158 0
-781 -7158 0
-781 -676 -7159 0
c (0<=(SATLiteral(781) - aux1720 + SATLiteral(676)))
676 7159 0
781 7159 0
781 676 7158 0
c ((SATLiteral(796) - aux1721 + SATLiteral(661))<=0)
-661 -7161 0
-796 -7161 0
-796 -661 -7162 0
c (0<=(SATLiteral(796) - aux1721 + SATLiteral(661)))
661 7162 0
796 7162 0
796 661 7161 0
c (( - aux1722 + SATLiteral(511) + SATLiteral(646))<=0)
-646 -7164 0
-511 -7164 0
-511 -646 -7165 0
c (0<=( - aux1722 + SATLiteral(511) + SATLiteral(646)))
646 7165 0
511 7165 0
511 646 7164 0
c (( - aux1723 + SATLiteral(526) + SATLiteral(541))<=0)
-541 -7167 0
-526 -7167 0
-526 -541 -7168 0
c (0<=( - aux1723 + SATLiteral(526) + SATLiteral(541)))
541 7168 0
526 7168 0
526 541 7167 0
c ((SATLiteral(811) + aux1723 - aux1724)<=0)
7167 -7170 0
7168 -7171 0
-811 -7170 0
-811 7167 -7171 0
-811 7168 -7173 0
c (0<=(SATLiteral(811) + aux1723 - aux1724))
-7168 7173 0
-7167 7171 0
811 7173 0
811 -7168 7171 0
811 -7167 7170 0
c ((aux1720 + aux1722 - aux1725)<=0)
7164 -7175 0
7165 -7176 0
7158 -7175 0
7158 7164 -7176 0
7158 7165 -7178 0
7159 -7176 0
7159 7164 -7178 0
7159 7165 -7180 0
c (0<=(aux1720 + aux1722 - aux1725))
-7165 7180 0
-7164 7178 0
-7159 7180 0
-7159 -7165 7178 0
-7159 -7164 7176 0
-7158 7178 0
-7158 -7165 7176 0
-7158 -7164 7175 0
c ((SATLiteral(-780) - aux1726 + SATLiteral(-675))<=0)
675 -7182 0
780 -7182 0
780 675 -7183 0
c (0<=(SATLiteral(-780) - aux1726 + SATLiteral(-675)))
-675 7183 0
-780 7183 0
-780 -675 7182 0
c ((SATLiteral(-795) - aux1727 + SATLiteral(-660))<=0)
660 -7185 0
795 -7185 0
795 660 -7186 0
c (0<=(SATLiteral(-795) - aux1727 + SATLiteral(-660)))
-660 7186 0
-795 7186 0
-795 -660 7185 0
c (( - aux1728 + SATLiteral(-510) + SATLiteral(-645))<=0)
645 -7188 0
510 -7188 0
510 645 -7189 0
c (0<=( - aux1728 + SATLiteral(-510) + SATLiteral(-645)))
-645 7189 0
-510 7189 0
-510 -645 7188 0
c (( - aux1729 + SATLiteral(-525) + SATLiteral(-540))<=0)
540 -7191 0
525 -7191 0
525 540 -7192 0
c (0<=( - aux1729 + SATLiteral(-525) + SATLiteral(-540)))
-540 7192 0
-525 7192 0
-525 -540 7191 0
c ((SATLiteral(-810) + aux1729 - aux1730)<=0)
7191 -7194 0
7192 -7195 0
810 -7194 0
810 7191 -7195 0
810 7192 -7197 0
c (0<=(SATLiteral(-810) + aux1729 - aux1730))
-7192 7197 0
-7191 7195 0
-810 7197 0
-810 -7192 7195 0
-810 -7191 7194 0
c ((aux1726 + aux1728 - aux1731)<=0)
7188 -7199 0
7189 -7200 0
7182 -7199 0
7182 7188 -7200 0
7182 7189 -7202 0
7183 -7200 0
7183 7188 -7202 0
7183 7189 -7204 0
c (0<=(aux1726 + aux1728 - aux1731))
-7189 7204 0
-7188 7202 0
-7183 7204 0
-7183 -7189 7202 0
-7183 -7188 7200 0
-7182 7202 0
-7182 -7189 7200 0
-7182 -7188 7199 0
c ((SATLiteral(947) - aux1732 + SATLiteral(842))<=0)
-842 -7206 0
-947 -7206 0
-947 -842 -7207 0
c (0<=(SATLiteral(947) - aux1732 + SATLiteral(842)))
842 7207 0
947 7207 0
947 842 7206 0
c ((SATLiteral(962) - aux1733 + SATLiteral(827))<=0)
-827 -7209 0
-962 -7209 0
-962 -827 -7210 0
c (0<=(SATLiteral(962) - aux1733 + SATLiteral(827)))
827 7210 0
962 7210 0
962 827 7209 0
c (( - aux1734 + SATLiteral(1082) + SATLiteral(812))<=0)
-812 -7212 0
-1082 -7212 0
-1082 -812 -7213 0
c (0<=( - aux1734 + SATLiteral(1082) + SATLiteral(812)))
812 7213 0
1082 7213 0
1082 812 7212 0
c (( - aux1735 + SATLiteral(1097) + SATLiteral(1112))<=0)
-1112 -7215 0
-1097 -7215 0
-1097 -1112 -7216 0
c (0<=( - aux1735 + SATLiteral(1097) + SATLiteral(1112)))
1112 7216 0
1097 7216 0
1097 1112 7215 0
c ((SATLiteral(977) + aux1735 - aux1736)<=0)
7215 -7218 0
7216 -7219 0
-977 -7218 0
-977 7215 -7219 0
-977 7216 -7221 0
c (0<=(SATLiteral(977) + aux1735 - aux1736))
-7216 7221 0
-7215 7219 0
977 7221 0
977 -7216 7219 0
977 -7215 7218 0
c ((aux1732 + aux1734 - aux1737)<=0)
7212 -7223 0
7213 -7224 0
7206 -7223 0
7206 7212 -7224 0
7206 7213 -7226 0
7207 -7224 0
7207 7212 -7226 0
7207 7213 -7228 0
c (0<=(aux1732 + aux1734 - aux1737))
-7213 7228 0
-7212 7226 0
-7207 7228 0
-7207 -7213 7226 0
-7207 -7212 7224 0
-7206 7226 0
-7206 -7213 7224 0
-7206 -7212 7223 0
c ((SATLiteral(949) - aux1738 + SATLiteral(844))<=0)
-844 -7230 0
-949 -7230 0
-949 -844 -7231 0
c (0<=(SATLiteral(949) - aux1738 + SATLiteral(844)))
844 7231 0
949 7231 0
949 844 7230 0
c ((SATLiteral(964) - aux1739 + SATLiteral(829))<=0)
-829 -7233 0
-964 -7233 0
-964 -829 -7234 0
c (0<=(SATLiteral(964) - aux1739 + SATLiteral(829)))
829 7234 0
964 7234 0
964 829 7233 0
c (( - aux1740 + SATLiteral(1084) + SATLiteral(814))<=0)
-814 -7236 0
-1084 -7236 0
-1084 -814 -7237 0
c (0<=( - aux1740 + SATLiteral(1084) + SATLiteral(814)))
814 7237 0
1084 7237 0
1084 814 7236 0
c (( - aux1741 + SATLiteral(1099) + SATLiteral(1114))<=0)
-1114 -7239 0
-1099 -7239 0
-1099 -1114 -7240 0
c (0<=( - aux1741 + SATLiteral(1099) + SATLiteral(1114)))
1114 7240 0
1099 7240 0
1099 1114 7239 0
c ((SATLiteral(979) + aux1741 - aux1742)<=0)
7239 -7242 0
7240 -7243 0
-979 -7242 0
-979 7239 -7243 0
-979 7240 -7245 0
c (0<=(SATLiteral(979) + aux1741 - aux1742))
-7240 7245 0
-7239 7243 0
979 7245 0
979 -7240 7243 0
979 -7239 7242 0
c ((aux1738 + aux1740 - aux1743)<=0)
7236 -7247 0
7237 -7248 0
7230 -7247 0
7230 7236 -7248 0
7230 7237 -7250 0
7231 -7248 0
7231 7236 -7250 0
7231 7237 -7252 0
c (0<=(aux1738 + aux1740 - aux1743))
-7237 7252 0
-7236 7250 0
-7231 7252 0
-7231 -7237 7250 0
-7231 -7236 7248 0
-7230 7250 0
-7230 -7237 7248 0
-7230 -7236 7247 0
c ((SATLiteral(951) - aux1744 + SATLiteral(846))<=0)
-846 -7254 0
-951 -7254 0
-951 -846 -7255 0
c (0<=(SATLiteral(951) - aux1744 + SATLiteral(846)))
846 7255 0
951 7255 0
951 846 7254 0
c ((SATLiteral(966) - aux1745 + SATLiteral(831))<=0)
-831 -7257 0
-966 -7257 0
-966 -831 -7258 0
c (0<=(SATLiteral(966) - aux1745 + SATLiteral(831)))
831 7258 0
966 7258 0
966 831 7257 0
c (( - aux1746 + SATLiteral(1086) + SATLiteral(816))<=0)
-816 -7260 0
-1086 -7260 0
-1086 -816 -7261 0
c (0<=( - aux1746 + SATLiteral(1086) + SATLiteral(816)))
816 7261 0
1086 7261 0
1086 816 7260 0
c (( - aux1747 + SATLiteral(1101) + SATLiteral(1116))<=0)
-1116 -7263 0
-1101 -7263 0
-1101 -1116 -7264 0
c (0<=( - aux1747 + SATLiteral(1101) + SATLiteral(1116)))
1116 7264 0
1101 7264 0
1101 1116 7263 0
c ((SATLiteral(981) + aux1747 - aux1748)<=0)
7263 -7266 0
7264 -7267 0
-981 -7266 0
-981 7263 -7267 0
-981 7264 -7269 0
c (0<=(SATLiteral(981) + aux1747 - aux1748))
-7264 7269 0
-7263 7267 0
981 7269 0
981 -7264 7267 0
981 -7263 7266 0
c ((aux1744 + aux1746 - aux1749)<=0)
7260 -7271 0
7261 -7272 0
7254 -7271 0
7254 7260 -7272 0
7254 7261 -7274 0
7255 -7272 0
7255 7260 -7274 0
7255 7261 -7276 0
c (0<=(aux1744 + aux1746 - aux1749))
-7261 7276 0
-7260 7274 0
-7255 7276 0
-7255 -7261 7274 0
-7255 -7260 7272 0
-7254 7274 0
-7254 -7261 7272 0
-7254 -7260 7271 0
c ((SATLiteral(953) - aux1750 + SATLiteral(848))<=0)
-848 -7278 0
-953 -7278 0
-953 -848 -7279 0
c (0<=(SATLiteral(953) - aux1750 + SATLiteral(848)))
848 7279 0
953 7279 0
953 848 7278 0
c ((SATLiteral(968) - aux1751 + SATLiteral(833))<=0)
-833 -7281 0
-968 -7281 0
-968 -833 -7282 0
c (0<=(SATLiteral(968) - aux1751 + SATLiteral(833)))
833 7282 0
968 7282 0
968 833 7281 0
c (( - aux1752 + SATLiteral(1088) + SATLiteral(818))<=0)
-818 -7284 0
-1088 -7284 0
-1088 -818 -7285 0
c (0<=( - aux1752 + SATLiteral(1088) + SATLiteral(818)))
818 7285 0
1088 7285 0
1088 818 7284 0
c (( - aux1753 + SATLiteral(1103) + SATLiteral(1118))<=0)
-1118 -7287 0
-1103 -7287 0
-1103 -1118 -7288 0
c (0<=( - aux1753 + SATLiteral(1103) + SATLiteral(1118)))
1118 7288 0
1103 7288 0
1103 1118 7287 0
c ((SATLiteral(983) + aux1753 - aux1754)<=0)
7287 -7290 0
7288 -7291 0
-983 -7290 0
-983 7287 -7291 0
-983 7288 -7293 0
c (0<=(SATLiteral(983) + aux1753 - aux1754))
-7288 7293 0
-7287 7291 0
983 7293 0
983 -7288 7291 0
983 -7287 7290 0
c ((aux1750 + aux1752 - aux1755)<=0)
7284 -7295 0
7285 -7296 0
7278 -7295 0
7278 7284 -7296 0
7278 7285 -7298 0
7279 -7296 0
7279 7284 -7298 0
7279 7285 -7300 0
c (0<=(aux1750 + aux1752 - aux1755))
-7285 7300 0
-7284 7298 0
-7279 7300 0
-7279 -7285 7298 0
-7279 -7284 7296 0
-7278 7298 0
-7278 -7285 7296 0
-7278 -7284 7295 0
c ((SATLiteral(955) - aux1756 + SATLiteral(850))<=0)
-850 -7302 0
-955 -7302 0
-955 -850 -7303 0
c (0<=(SATLiteral(955) - aux1756 + SATLiteral(850)))
850 7303 0
955 7303 0
955 850 7302 0
c ((SATLiteral(970) - aux1757 + SATLiteral(835))<=0)
-835 -7305 0
-970 -7305 0
-970 -835 -7306 0
c (0<=(SATLiteral(970) - aux1757 + SATLiteral(835)))
835 7306 0
970 7306 0
970 835 7305 0
c (( - aux1758 + SATLiteral(1090) + SATLiteral(820))<=0)
-820 -7308 0
-1090 -7308 0
-1090 -820 -7309 0
c (0<=( - aux1758 + SATLiteral(1090) + SATLiteral(820)))
820 7309 0
1090 7309 0
1090 820 7308 0
c (( - aux1759 + SATLiteral(1105) + SATLiteral(1120))<=0)
-1120 -7311 0
-1105 -7311 0
-1105 -1120 -7312 0
c (0<=( - aux1759 + SATLiteral(1105) + SATLiteral(1120)))
1120 7312 0
1105 7312 0
1105 1120 7311 0
c ((SATLiteral(985) + aux1759 - aux1760)<=0)
7311 -7314 0
7312 -7315 0
-985 -7314 0
-985 7311 -7315 0
-985 7312 -7317 0
c (0<=(SATLiteral(985) + aux1759 - aux1760))
-7312 7317 0
-7311 7315 0
985 7317 0
985 -7312 7315 0
985 -7311 7314 0
c ((aux1756 + aux1758 - aux1761)<=0)
7308 -7319 0
7309 -7320 0
7302 -7319 0
7302 7308 -7320 0
7302 7309 -7322 0
7303 -7320 0
7303 7308 -7322 0
7303 7309 -7324 0
c (0<=(aux1756 + aux1758 - aux1761))
-7309 7324 0
-7308 7322 0
-7303 7324 0
-7303 -7309 7322 0
-7303 -7308 7320 0
-7302 7322 0
-7302 -7309 7320 0
-7302 -7308 7319 0
c ((SATLiteral(957) - aux1762 + SATLiteral(852))<=0)
-852 -7326 0
-957 -7326 0
-957 -852 -7327 0
c (0<=(SATLiteral(957) - aux1762 + SATLiteral(852)))
852 7327 0
957 7327 0
957 852 7326 0
c ((SATLiteral(972) - aux1763 + SATLiteral(837))<=0)
-837 -7329 0
-972 -7329 0
-972 -837 -7330 0
c (0<=(SATLiteral(972) - aux1763 + SATLiteral(837)))
837 7330 0
972 7330 0
972 837 7329 0
c (( - aux1764 + SATLiteral(1092) + SATLiteral(822))<=0)
-822 -7332 0
-1092 -7332 0
-1092 -822 -7333 0
c (0<=( - aux1764 + SATLiteral(1092) + SATLiteral(822)))
822 7333 0
1092 7333 0
1092 822 7332 0
c (( - aux1765 + SATLiteral(1107) + SATLiteral(1122))<=0)
-1122 -7335 0
-1107 -7335 0
-1107 -1122 -7336 0
c (0<=( - aux1765 + SATLiteral(1107) + SATLiteral(1122)))
1122 7336 0
1107 7336 0
1107 1122 7335 0
c ((SATLiteral(987) + aux1765 - aux1766)<=0)
7335 -7338 0
7336 -7339 0
-987 -7338 0
-987 7335 -7339 0
-987 7336 -7341 0
c (0<=(SATLiteral(987) + aux1765 - aux1766))
-7336 7341 0
-7335 7339 0
987 7341 0
987 -7336 7339 0
987 -7335 7338 0
c ((aux1762 + aux1764 - aux1767)<=0)
7332 -7343 0
7333 -7344 0
7326 -7343 0
7326 7332 -7344 0
7326 7333 -7346 0
7327 -7344 0
7327 7332 -7346 0
7327 7333 -7348 0
c (0<=(aux1762 + aux1764 - aux1767))
-7333 7348 0
-7332 7346 0
-7327 7348 0
-7327 -7333 7346 0
-7327 -7332 7344 0
-7326 7346 0
-7326 -7333 7344 0
-7326 -7332 7343 0
c ((SATLiteral(959) - aux1768 + SATLiteral(854))<=0)
-854 -7350 0
-959 -7350 0
-959 -854 -7351 0
c (0<=(SATLiteral(959) - aux1768 + SATLiteral(854)))
854 7351 0
959 7351 0
959 854 7350 0
c ((SATLiteral(974) - aux1769 + SATLiteral(839))<=0)
-839 -7353 0
-974 -7353 0
-974 -839 -7354 0
c (0<=(SATLiteral(974) - aux1769 + SATLiteral(839)))
839 7354 0
974 7354 0
974 839 7353 0
c (( - aux1770 + SATLiteral(1094) + SATLiteral(824))<=0)
-824 -7356 0
-1094 -7356 0
-1094 -824 -7357 0
c (0<=( - aux1770 + SATLiteral(1094) + SATLiteral(824)))
824 7357 0
1094 7357 0
1094 824 7356 0
c (( - aux1771 + SATLiteral(1109) + SATLiteral(1124))<=0)
-1124 -7359 0
-1109 -7359 0
-1109 -1124 -7360 0
c (0<=( - aux1771 + SATLiteral(1109) + SATLiteral(1124)))
1124 7360 0
1109 7360 0
1109 1124 7359 0
c ((SATLiteral(989) + aux1771 - aux1772)<=0)
7359 -7362 0
7360 -7363 0
-989 -7362 0
-989 7359 -7363 0
-989 7360 -7365 0
c (0<=(SATLiteral(989) + aux1771 - aux1772))
-7360 7365 0
-7359 7363 0
989 7365 0
989 -7360 7363 0
989 -7359 7362 0
c ((aux1768 + aux1770 - aux1773)<=0)
7356 -7367 0
7357 -7368 0
7350 -7367 0
7350 7356 -7368 0
7350 7357 -7370 0
7351 -7368 0
7351 7356 -7370 0
7351 7357 -7372 0
c (0<=(aux1768 + aux1770 - aux1773))
-7357 7372 0
-7356 7370 0
-7351 7372 0
-7351 -7357 7370 0
-7351 -7356 7368 0
-7350 7370 0
-7350 -7357 7368 0
-7350 -7356 7367 0
c ((SATLiteral(961) - aux1774 + SATLiteral(856))<=0)
-856 -7374 0
-961 -7374 0
-961 -856 -7375 0
c (0<=(SATLiteral(961) - aux1774 + SATLiteral(856)))
856 7375 0
961 7375 0
961 856 7374 0
c ((SATLiteral(976) - aux1775 + SATLiteral(841))<=0)
-841 -7377 0
-976 -7377 0
-976 -841 -7378 0
c (0<=(SATLiteral(976) - aux1775 + SATLiteral(841)))
841 7378 0
976 7378 0
976 841 7377 0
c (( - aux1776 + SATLiteral(1096) + SATLiteral(826))<=0)
-826 -7380 0
-1096 -7380 0
-1096 -826 -7381 0
c (0<=( - aux1776 + SATLiteral(1096) + SATLiteral(826)))
826 7381 0
1096 7381 0
1096 826 7380 0
c (( - aux1777 + SATLiteral(1111) + SATLiteral(1126))<=0)
-1126 -7383 0
-1111 -7383 0
-1111 -1126 -7384 0
c (0<=( - aux1777 + SATLiteral(1111) + SATLiteral(1126)))
1126 7384 0
1111 7384 0
1111 1126 7383 0
c ((SATLiteral(991) + aux1777 - aux1778)<=0)
7383 -7386 0
7384 -7387 0
-991 -7386 0
-991 7383 -7387 0
-991 7384 -7389 0
c (0<=(SATLiteral(991) + aux1777 - aux1778))
-7384 7389 0
-7383 7387 0
991 7389 0
991 -7384 7387 0
991 -7383 7386 0
c ((aux1774 + aux1776 - aux1779)<=0)
7380 -7391 0
7381 -7392 0
7374 -7391 0
7374 7380 -7392 0
7374 7381 -7394 0
7375 -7392 0
7375 7380 -7394 0
7375 7381 -7396 0
c (0<=(aux1774 + aux1776 - aux1779))
-7381 7396 0
-7380 7394 0
-7375 7396 0
-7375 -7381 7394 0
-7375 -7380 7392 0
-7374 7394 0
-7374 -7381 7392 0
-7374 -7380 7391 0
c ((SATLiteral(-960) - aux1780 + SATLiteral(-855))<=0)
855 -7398 0
960 -7398 0
960 855 -7399 0
c (0<=(SATLiteral(-960) - aux1780 + SATLiteral(-855)))
-855 7399 0
-960 7399 0
-960 -855 7398 0
c ((SATLiteral(-975) - aux1781 + SATLiteral(-840))<=0)
840 -7401 0
975 -7401 0
975 840 -7402 0
c (0<=(SATLiteral(-975) - aux1781 + SATLiteral(-840)))
-840 7402 0
-975 7402 0
-975 -840 7401 0
c (( - aux1782 + SATLiteral(-1095) + SATLiteral(-825))<=0)
825 -7404 0
1095 -7404 0
1095 825 -7405 0
c (0<=( - aux1782 + SATLiteral(-1095) + SATLiteral(-825)))
-825 7405 0
-1095 7405 0
-1095 -825 7404 0
c (( - aux1783 + SATLiteral(-1110) + SATLiteral(-1125))<=0)
1125 -7407 0
1110 -7407 0
1110 1125 -7408 0
c (0<=( - aux1783 + SATLiteral(-1110) + SATLiteral(-1125)))
-1125 7408 0
-1110 7408 0
-1110 -1125 7407 0
c ((SATLiteral(-990) + aux1783 - aux1784)<=0)
7407 -7410 0
7408 -7411 0
990 -7410 0
990 7407 -7411 0
990 7408 -7413 0
c (0<=(SATLiteral(-990) + aux1783 - aux1784))
-7408 7413 0
-7407 7411 0
-990 7413 0
-990 -7408 7411 0
-990 -7407 7410 0
c ((aux1780 + aux1782 - aux1785)<=0)
7404 -7415 0
7405 -7416 0
7398 -7415 0
7398 7404 -7416 0
7398 7405 -7418 0
7399 -7416 0
7399 7404 -7418 0
7399 7405 -7420 0
c (0<=(aux1780 + aux1782 - aux1785))
-7405 7420 0
-7404 7418 0
-7399 7420 0
-7399 -7405 7418 0
-7399 -7404 7416 0
-7398 7418 0
-7398 -7405 7416 0
-7398 -7404 7415 0
c ((SATLiteral(992) - aux1786 + SATLiteral(887))<=0)
-887 -7422 0
-992 -7422 0
-992 -887 -7423 0
c (0<=(SATLiteral(992) - aux1786 + SATLiteral(887)))
887 7423 0
992 7423 0
992 887 7422 0
c ((SATLiteral(1007) - aux1787 + SATLiteral(872))<=0)
-872 -7425 0
-1007 -7425 0
-1007 -872 -7426 0
c (0<=(SATLiteral(1007) - aux1787 + SATLiteral(872)))
872 7426 0
1007 7426 0
1007 872 7425 0
c (( - aux1788 + SATLiteral(1127) + SATLiteral(857))<=0)
-857 -7428 0
-1127 -7428 0
-1127 -857 -7429 0
c (0<=( - aux1788 + SATLiteral(1127) + SATLiteral(857)))
857 7429 0
1127 7429 0
1127 857 7428 0
c (( - aux1789 + SATLiteral(1142) + SATLiteral(1157))<=0)
-1157 -7431 0
-1142 -7431 0
-1142 -1157 -7432 0
c (0<=( - aux1789 + SATLiteral(1142) + SATLiteral(1157)))
1157 7432 0
1142 7432 0
1142 1157 7431 0
c ((SATLiteral(1022) + aux1789 - aux1790)<=0)
7431 -7434 0
7432 -7435 0
-1022 -7434 0
-1022 7431 -7435 0
-1022 7432 -7437 0
c (0<=(SATLiteral(1022) + aux1789 - aux1790))
-7432 7437 0
-7431 7435 0
1022 7437 0
1022 -7432 7435 0
1022 -7431 7434 0
c ((aux1786 + aux1788 - aux1791)<=0)
7428 -7439 0
7429 -7440 0
7422 -7439 0
7422 7428 -7440 0
7422 7429 -7442 0
7423 -7440 0
7423 7428 -7442 0
7423 7429 -7444 0
c (0<=(aux1786 + aux1788 - aux1791))
-7429 7444 0
-7428 7442 0
-7423 7444 0
-7423 -7429 7442 0
-7423 -7428 7440 0
-7422 7442 0
-7422 -7429 7440 0
-7422 -7428 7439 0
c ((SATLiteral(994) - aux1792 + SATLiteral(889))<=0)
-889 -7446 0
-994 -7446 0
-994 -889 -7447 0
c (0<=(SATLiteral(994) - aux1792 + SATLiteral(889)))
889 7447 0
994 7447 0
994 889 7446 0
c ((SATLiteral(1009) - aux1793 + SATLiteral(874))<=0)
-874 -7449 0
-1009 -7449 0
-1009 -874 -7450 0
c (0<=(SATLiteral(1009) - aux1793 + SATLiteral(874)))
874 7450 0
1009 7450 0
1009 874 7449 0
c (( - aux1794 + SATLiteral(1129) + SATLiteral(859))<=0)
-859 -7452 0
-1129 -7452 0
-1129 -859 -7453 0
c (0<=( - aux1794 + SATLiteral(1129) + SATLiteral(859)))
859 7453 0
1129 7453 0
1129 859 7452 0
c (( - aux1795 + SATLiteral(1144) + SATLiteral(1159))<=0)
-1159 -7455 0
-1144 -7455 0
-1144 -1159 -7456 0
c (0<=( - aux1795 + SATLiteral(1144) + SATLiteral(1159)))
1159 7456 0
1144 7456 0
1144 1159 7455 0
c ((SATLiteral(1024) + aux1795 - aux1796)<=0)
7455 -7458 0
7456 -7459 0
-1024 -7458 0
-1024 7455 -7459 0
-1024 7456 -7461 0
c (0<=(SATLiteral(1024) + aux1795 - aux1796))
-7456 7461 0
-7455 7459 0
1024 7461 0
1024 -7456 7459 0
1024 -7455 7458 0
c ((aux1792 + aux1794 - aux1797)<=0)
7452 -7463 0
7453 -7464 0
7446 -7463 0
7446 7452 -7464 0
7446 7453 -7466 0
7447 -7464 0
7447 7452 -7466 0
7447 7453 -7468 0
c (0<=(aux1792 + aux1794 - aux1797))
-7453 7468 0
-7452 7466 0
-7447 7468 0
-7447 -7453 7466 0
-7447 -7452 7464 0
-7446 7466 0
-7446 -7453 7464 0
-7446 -7452 7463 0
c ((SATLiteral(996) - aux1798 + SATLiteral(891))<=0)
-891 -7470 0
-996 -7470 0
-996 -891 -7471 0
c (0<=(SATLiteral(996) - aux1798 + SATLiteral(891)))
891 7471 0
996 7471 0
996 891 7470 0
c ((SATLiteral(1011) - aux1799 + SATLiteral(876))<=0)
-876 -7473 0
-1011 -7473 0
-1011 -876 -7474 0
c (0<=(SATLiteral(1011) - aux1799 + SATLiteral(876)))
876 7474 0
1011 7474 0
1011 876 7473 0
c (( - aux1800 + SATLiteral(1131) + SATLiteral(861))<=0)
-861 -7476 0
-1131 -7476 0
-1131 -861 -7477 0
c (0<=( - aux1800 + SATLiteral(1131) + SATLiteral(861)))
861 7477 0
1131 7477 0
1131 861 7476 0
c (( - aux1801 + SATLiteral(1146) + SATLiteral(1161))<=0)
-1161 -7479 0
-1146 -7479 0
-1146 -1161 -7480 0
c (0<=( - aux1801 + SATLiteral(1146) + SATLiteral(1161)))
1161 7480 0
1146 7480 0
1146 1161 7479 0
c ((SATLiteral(1026) + aux1801 - aux1802)<=0)
7479 -7482 0
7480 -7483 0
-1026 -7482 0
-1026 7479 -7483 0
-1026 7480 -7485 0
c (0<=(SATLiteral(1026) + aux1801 - aux1802))
-7480 7485 0
-7479 7483 0
1026 7485 0
1026 -7480 7483 0
1026 -7479 7482 0
c ((aux1798 + aux1800 - aux1803)<=0)
7476 -7487 0
7477 -7488 0
7470 -7487 0
7470 7476 -7488 0
7470 7477 -7490 0
7471 -7488 0
7471 7476 -7490 0
7471 7477 -7492 0
c (0<=(aux1798 + aux1800 - aux1803))
-7477 7492 0
-7476 7490 0
-7471 7492 0
-7471 -7477 7490 0
-7471 -7476 7488 0
-7470 7490 0
-7470 -7477 7488 0
-7470 -7476 7487 0
c ((SATLiteral(998) - aux1804 + SATLiteral(893))<=0)
-893 -7494 0
-998 -7494 0
-998 -893 -7495 0
c (0<=(SATLiteral(998) - aux1804 + SATLiteral(893)))
893 7495 0
998 7495 0
998 893 7494 0
c ((SATLiteral(1013) - aux1805 + SATLiteral(878))<=0)
-878 -7497 0
-1013 -7497 0
-1013 -878 -7498 0
c (0<=(SATLiteral(1013) - aux1805 + SATLiteral(878)))
878 7498 0
1013 7498 0
1013 878 7497 0
c (( - aux1806 + SATLiteral(1133) + SATLiteral(863))<=0)
-863 -7500 0
-1133 -7500 0
-1133 -863 -7501 0
c (0<=( - aux1806 + SATLiteral(1133) + SATLiteral(863)))
863 7501 0
1133 7501 0
1133 863 7500 0
c (( - aux1807 + SATLiteral(1148) + SATLiteral(1163))<=0)
-1163 -7503 0
-1148 -7503 0
-1148 -1163 -7504 0
c (0<=( - aux1807 + SATLiteral(1148) + SATLiteral(1163)))
1163 7504 0
1148 7504 0
1148 1163 7503 0
c ((SATLiteral(1028) + aux1807 - aux1808)<=0)
7503 -7506 0
7504 -7507 0
-1028 -7506 0
-1028 7503 -7507 0
-1028 7504 -7509 0
c (0<=(SATLiteral(1028) + aux1807 - aux1808))
-7504 7509 0
-7503 7507 0
1028 7509 0
1028 -7504 7507 0
1028 -7503 7506 0
c ((aux1804 + aux1806 - aux1809)<=0)
7500 -7511 0
7501 -7512 0
7494 -7511 0
7494 7500 -7512 0
7494 7501 -7514 0
7495 -7512 0
7495 7500 -7514 0
7495 7501 -7516 0
c (0<=(aux1804 + aux1806 - aux1809))
-7501 7516 0
-7500 7514 0
-7495 7516 0
-7495 -7501 7514 0
-7495 -7500 7512 0
-7494 7514 0
-7494 -7501 7512 0
-7494 -7500 7511 0
c ((SATLiteral(1000) - aux1810 + SATLiteral(895))<=0)
-895 -7518 0
-1000 -7518 0
-1000 -895 -7519 0
c (0<=(SATLiteral(1000) - aux1810 + SATLiteral(895)))
895 7519 0
1000 7519 0
1000 895 7518 0
c ((SATLiteral(1015) - aux1811 + SATLiteral(880))<=0)
-880 -7521 0
-1015 -7521 0
-1015 -880 -7522 0
c (0<=(SATLiteral(1015) - aux1811 + SATLiteral(880)))
880 7522 0
1015 7522 0
1015 880 7521 0
c (( - aux1812 + SATLiteral(1135) + SATLiteral(865))<=0)
-865 -7524 0
-1135 -7524 0
-1135 -865 -7525 0
c (0<=( - aux1812 + SATLiteral(1135) + SATLiteral(865)))
865 7525 0
1135 7525 0
1135 865 7524 0
c (( - aux1813 + SATLiteral(1150) + SATLiteral(1165))<=0)
-1165 -7527 0
-1150 -7527 0
-1150 -1165 -7528 0
c (0<=( - aux1813 + SATLiteral(1150) + SATLiteral(1165)))
1165 7528 0
1150 7528 0
1150 1165 7527 0
c ((SATLiteral(1030) + aux1813 - aux1814)<=0)
7527 -7530 0
7528 -7531 0
-1030 -7530 0
-1030 7527 -7531 0
-1030 7528 -7533 0
c (0<=(SATLiteral(1030) + aux1813 - aux1814))
-7528 7533 0
-7527 7531 0
1030 7533 0
1030 -7528 7531 0
1030 -7527 7530 0
c ((aux1810 + aux1812 - aux1815)<=0)
7524 -7535 0
7525 -7536 0
7518 -7535 0
7518 7524 -7536 0
7518 7525 -7538 0
7519 -7536 0
7519 7524 -7538 0
7519 7525 -7540 0
c (0<=(aux1810 + aux1812 - aux1815))
-7525 7540 0
-7524 7538 0
-7519 7540 0
-7519 -7525 7538 0
-7519 -7524 7536 0
-7518 7538 0
-7518 -7525 7536 0
-7518 -7524 7535 0
c ((SATLiteral(1002) - aux1816 + SATLiteral(897))<=0)
-897 -7542 0
-1002 -7542 0
-1002 -897 -7543 0
c (0<=(SATLiteral(1002) - aux1816 + SATLiteral(897)))
897 7543 0
1002 7543 0
1002 897 7542 0
c ((SATLiteral(1017) - aux1817 + SATLiteral(882))<=0)
-882 -7545 0
-1017 -7545 0
-1017 -882 -7546 0
c (0<=(SATLiteral(1017) - aux1817 + SATLiteral(882)))
882 7546 0
1017 7546 0
1017 882 7545 0
c (( - aux1818 + SATLiteral(1137) + SATLiteral(867))<=0)
-867 -7548 0
-1137 -7548 0
-1137 -867 -7549 0
c (0<=( - aux1818 + SATLiteral(1137) + SATLiteral(867)))
867 7549 0
1137 7549 0
1137 867 7548 0
c (( - aux1819 + SATLiteral(1152) + SATLiteral(1167))<=0)
-1167 -7551 0
-1152 -7551 0
-1152 -1167 -7552 0
c (0<=( - aux1819 + SATLiteral(1152) + SATLiteral(1167)))
1167 7552 0
1152 7552 0
1152 1167 7551 0
c ((SATLiteral(1032) + aux1819 - aux1820)<=0)
7551 -7554 0
7552 -7555 0
-1032 -7554 0
-1032 7551 -7555 0
-1032 7552 -7557 0
c (0<=(SATLiteral(1032) + aux1819 - aux1820))
-7552 7557 0
-7551 7555 0
1032 7557 0
1032 -7552 7555 0
1032 -7551 7554 0
c ((aux1816 + aux1818 - aux1821)<=0)
7548 -7559 0
7549 -7560 0
7542 -7559 0
7542 7548 -7560 0
7542 7549 -7562 0
7543 -7560 0
7543 7548 -7562 0
7543 7549 -7564 0
c (0<=(aux1816 + aux1818 - aux1821))
-7549 7564 0
-7548 7562 0
-7543 7564 0
-7543 -7549 7562 0
-7543 -7548 7560 0
-7542 7562 0
-7542 -7549 7560 0
-7542 -7548 7559 0
c ((SATLiteral(1004) - aux1822 + SATLiteral(899))<=0)
-899 -7566 0
-1004 -7566 0
-1004 -899 -7567 0
c (0<=(SATLiteral(1004) - aux1822 + SATLiteral(899)))
899 7567 0
1004 7567 0
1004 899 7566 0
c ((SATLiteral(1019) - aux1823 + SATLiteral(884))<=0)
-884 -7569 0
-1019 -7569 0
-1019 -884 -7570 0
c (0<=(SATLiteral(1019) - aux1823 + SATLiteral(884)))
884 7570 0
1019 7570 0
1019 884 7569 0
c (( - aux1824 + SATLiteral(1139) + SATLiteral(869))<=0)
-869 -7572 0
-1139 -7572 0
-1139 -869 -7573 0
c (0<=( - aux1824 + SATLiteral(1139) + SATLiteral(869)))
869 7573 0
1139 7573 0
1139 869 7572 0
c (( - aux1825 + SATLiteral(1154) + SATLiteral(1169))<=0)
-1169 -7575 0
-1154 -7575 0
-1154 -1169 -7576 0
c (0<=( - aux1825 + SATLiteral(1154) + SATLiteral(1169)))
1169 7576 0
1154 7576 0
1154 1169 7575 0
c ((SATLiteral(1034) + aux1825 - aux1826)<=0)
7575 -7578 0
7576 -7579 0
-1034 -7578 0
-1034 7575 -7579 0
-1034 7576 -7581 0
c (0<=(SATLiteral(1034) + aux1825 - aux1826))
-7576 7581 0
-7575 7579 0
1034 7581 0
1034 -7576 7579 0
1034 -7575 7578 0
c ((aux1822 + aux1824 - aux1827)<=0)
7572 -7583 0
7573 -7584 0
7566 -7583 0
7566 7572 -7584 0
7566 7573 -7586 0
7567 -7584 0
7567 7572 -7586 0
7567 7573 -7588 0
c (0<=(aux1822 + aux1824 - aux1827))
-7573 7588 0
-7572 7586 0
-7567 7588 0
-7567 -7573 7586 0
-7567 -7572 7584 0
-7566 7586 0
-7566 -7573 7584 0
-7566 -7572 7583 0
c ((SATLiteral(1006) - aux1828 + SATLiteral(901))<=0)
-901 -7590 0
-1006 -7590 0
-1006 -901 -7591 0
c (0<=(SATLiteral(1006) - aux1828 + SATLiteral(901)))
901 7591 0
1006 7591 0
1006 901 7590 0
c ((SATLiteral(1021) - aux1829 + SATLiteral(886))<=0)
-886 -7593 0
-1021 -7593 0
-1021 -886 -7594 0
c (0<=(SATLiteral(1021) - aux1829 + SATLiteral(886)))
886 7594 0
1021 7594 0
1021 886 7593 0
c (( - aux1830 + SATLiteral(1141) + SATLiteral(871))<=0)
-871 -7596 0
-1141 -7596 0
-1141 -871 -7597 0
c (0<=( - aux1830 + SATLiteral(1141) + SATLiteral(871)))
871 7597 0
1141 7597 0
1141 871 7596 0
c (( - aux1831 + SATLiteral(1156) + SATLiteral(1171))<=0)
-1171 -7599 0
-1156 -7599 0
-1156 -1171 -7600 0
c (0<=( - aux1831 + SATLiteral(1156) + SATLiteral(1171)))
1171 7600 0
1156 7600 0
1156 1171 7599 0
c ((SATLiteral(1036) + aux1831 - aux1832)<=0)
7599 -7602 0
7600 -7603 0
-1036 -7602 0
-1036 7599 -7603 0
-1036 7600 -7605 0
c (0<=(SATLiteral(1036) + aux1831 - aux1832))
-7600 7605 0
-7599 7603 0
1036 7605 0
1036 -7600 7603 0
1036 -7599 7602 0
c ((aux1828 + aux1830 - aux1833)<=0)
7596 -7607 0
7597 -7608 0
7590 -7607 0
7590 7596 -7608 0
7590 7597 -7610 0
7591 -7608 0
7591 7596 -7610 0
7591 7597 -7612 0
c (0<=(aux1828 + aux1830 - aux1833))
-7597 7612 0
-7596 7610 0
-7591 7612 0
-7591 -7597 7610 0
-7591 -7596 7608 0
-7590 7610 0
-7590 -7597 7608 0
-7590 -7596 7607 0
c ((SATLiteral(-1005) - aux1834 + SATLiteral(-900))<=0)
900 -7614 0
1005 -7614 0
1005 900 -7615 0
c (0<=(SATLiteral(-1005) - aux1834 + SATLiteral(-900)))
-900 7615 0
-1005 7615 0
-1005 -900 7614 0
c ((SATLiteral(-1020) - aux1835 + SATLiteral(-885))<=0)
885 -7617 0
1020 -7617 0
1020 885 -7618 0
c (0<=(SATLiteral(-1020) - aux1835 + SATLiteral(-885)))
-885 7618 0
-1020 7618 0
-1020 -885 7617 0
c (( - aux1836 + SATLiteral(-1140) + SATLiteral(-870))<=0)
870 -7620 0
1140 -7620 0
1140 870 -7621 0
c (0<=( - aux1836 + SATLiteral(-1140) + SATLiteral(-870)))
-870 7621 0
-1140 7621 0
-1140 -870 7620 0
c (( - aux1837 + SATLiteral(-1155) + SATLiteral(-1170))<=0)
1170 -7623 0
1155 -7623 0
1155 1170 -7624 0
c (0<=( - aux1837 + SATLiteral(-1155) + SATLiteral(-1170)))
-1170 7624 0
-1155 7624 0
-1155 -1170 7623 0
c ((SATLiteral(-1035) + aux1837 - aux1838)<=0)
7623 -7626 0
7624 -7627 0
1035 -7626 0
1035 7623 -7627 0
1035 7624 -7629 0
c (0<=(SATLiteral(-1035) + aux1837 - aux1838))
-7624 7629 0
-7623 7627 0
-1035 7629 0
-1035 -7624 7627 0
-1035 -7623 7626 0
c ((aux1834 + aux1836 - aux1839)<=0)
7620 -7631 0
7621 -7632 0
7614 -7631 0
7614 7620 -7632 0
7614 7621 -7634 0
7615 -7632 0
7615 7620 -7634 0
7615 7621 -7636 0
c (0<=(aux1834 + aux1836 - aux1839))
-7621 7636 0
-7620 7634 0
-7615 7636 0
-7615 -7621 7634 0
-7615 -7620 7632 0
-7614 7634 0
-7614 -7621 7632 0
-7614 -7620 7631 0
c ((SATLiteral(1037) - aux1840 + SATLiteral(932))<=0)
-932 -7638 0
-1037 -7638 0
-1037 -932 -7639 0
c (0<=(SATLiteral(1037) - aux1840 + SATLiteral(932)))
932 7639 0
1037 7639 0
1037 932 7638 0
c ((SATLiteral(1052) - aux1841 + SATLiteral(917))<=0)
-917 -7641 0
-1052 -7641 0
-1052 -917 -7642 0
c (0<=(SATLiteral(1052) - aux1841 + SATLiteral(917)))
917 7642 0
1052 7642 0
1052 917 7641 0
c (( - aux1842 + SATLiteral(1172) + SATLiteral(902))<=0)
-902 -7644 0
-1172 -7644 0
-1172 -902 -7645 0
c (0<=( - aux1842 + SATLiteral(1172) + SATLiteral(902)))
902 7645 0
1172 7645 0
1172 902 7644 0
c (( - aux1843 + SATLiteral(1187) + SATLiteral(1202))<=0)
-1202 -7647 0
-1187 -7647 0
-1187 -1202 -7648 0
c (0<=( - aux1843 + SATLiteral(1187) + SATLiteral(1202)))
1202 7648 0
1187 7648 0
1187 1202 7647 0
c ((SATLiteral(1067) + aux1843 - aux1844)<=0)
7647 -7650 0
7648 -7651 0
-1067 -7650 0
-1067 7647 -7651 0
-1067 7648 -7653 0
c (0<=(SATLiteral(1067) + aux1843 - aux1844))
-7648 7653 0
-7647 7651 0
1067 7653 0
1067 -7648 7651 0
1067 -7647 7650 0
c ((aux1840 + aux1842 - aux1845)<=0)
7644 -7655 0
7645 -7656 0
7638 -7655 0
7638 7644 -7656 0
7638 7645 -7658 0
7639 -7656 0
7639 7644 -7658 0
7639 7645 -7660 0
c (0<=(aux1840 + aux1842 - aux1845))
-7645 7660 0
-7644 7658 0
-7639 7660 0
-7639 -7645 7658 0
-7639 -7644 7656 0
-7638 7658 0
-7638 -7645 7656 0
-7638 -7644 7655 0
c ((SATLiteral(1039) - aux1846 + SATLiteral(934))<=0)
-934 -7662 0
-1039 -7662 0
-1039 -934 -7663 0
c (0<=(SATLiteral(1039) - aux1846 + SATLiteral(934)))
934 7663 0
1039 7663 0
1039 934 7662 0
c ((SATLiteral(1054) - aux1847 + SATLiteral(919))<=0)
-919 -7665 0
-1054 -7665 0
-1054 -919 -7666 0
c (0<=(SATLiteral(1054) - aux1847 + SATLiteral(919)))
919 7666 0
1054 7666 0
1054 919 7665 0
c (( - aux1848 + SATLiteral(1174) + SATLiteral(904))<=0)
-904 -7668 0
-1174 -7668 0
-1174 -904 -7669 0
c (0<=( - aux1848 + SATLiteral(1174) + SATLiteral(904)))
904 7669 0
1174 7669 0
1174 904 7668 0
c (( - aux1849 + SATLiteral(1189) + SATLiteral(1204))<=0)
-1204 -7671 0
-1189 -7671 0
-1189 -1204 -7672 0
c (0<=( - aux1849 + SATLiteral(1189) + SATLiteral(1204)))
1204 7672 0
1189 7672 0
1189 1204 7671 0
c ((SATLiteral(1069) + aux1849 - aux1850)<=0)
7671 -7674 0
7672 -7675 0
-1069 -7674 0
-1069 7671 -7675 0
-1069 7672 -7677 0
c (0<=(SATLiteral(1069) + aux1849 - aux1850))
-7672 7677 0
-7671 7675 0
1069 7677 0
1069 -7672 7675 0
1069 -7671 7674 0
c ((aux1846 + aux1848 - aux1851)<=0)
7668 -7679 0
7669 -7680 0
7662 -7679 0
7662 7668 -7680 0
7662 7669 -7682 0
7663 -7680 0
7663 7668 -7682 0
7663 7669 -7684 0
c (0<=(aux1846 + aux1848 - aux1851))
-7669 7684 0
-7668 7682 0
-7663 7684 0
-7663 -7669 7682 0
-7663 -7668 7680 0
-7662 7682 0
-7662 -7669 7680 0
-7662 -7668 7679 0
c ((SATLiteral(1041) - aux1852 + SATLiteral(936))<=0)
-936 -7686 0
-1041 -7686 0
-1041 -936 -7687 0
c (0<=(SATLiteral(1041) - aux1852 + SATLiteral(936)))
936 7687 0
1041 7687 0
1041 936 7686 0
c ((SATLiteral(1056) - aux1853 + SATLiteral(921))<=0)
-921 -7689 0
-1056 -7689 0
-1056 -921 -7690 0
c (0<=(SATLiteral(1056) - aux1853 + SATLiteral(921)))
921 7690 0
1056 7690 0
1056 921 7689 0
c (( - aux1854 + SATLiteral(1176) + SATLiteral(906))<=0)
-906 -7692 0
-1176 -7692 0
-1176 -906 -7693 0
c (0<=( - aux1854 + SATLiteral(1176) + SATLiteral(906)))
906 7693 0
1176 7693 0
1176 906 7692 0
c (( - aux1855 + SATLiteral(1191) + SATLiteral(1206))<=0)
-1206 -7695 0
-1191 -7695 0
-1191 -1206 -7696 0
c (0<=( - aux1855 + SATLiteral(1191) + SATLiteral(1206)))
1206 7696 0
1191 7696 0
1191 1206 7695 0
c ((SATLiteral(1071) + aux1855 - aux1856)<=0)
7695 -7698 0
7696 -7699 0
-1071 -7698 0
-1071 7695 -7699 0
-1071 7696 -7701 0
c (0<=(SATLiteral(1071) + aux1855 - aux1856))
-7696 7701 0
-7695 7699 0
1071 7701 0
1071 -7696 7699 0
1071 -7695 7698 0
c ((aux1852 + aux1854 - aux1857)<=0)
7692 -7703 0
7693 -7704 0
7686 -7703 0
7686 7692 -7704 0
7686 7693 -7706 0
7687 -7704 0
7687 7692 -7706 0
7687 7693 -7708 0
c (0<=(aux1852 + aux1854 - aux1857))
-7693 7708 0
-7692 7706 0
-7687 7708 0
-7687 -7693 7706 0
-7687 -7692 7704 0
-7686 7706 0
-7686 -7693 7704 0
-7686 -7692 7703 0
c ((SATLiteral(1043) - aux1858 + SATLiteral(938))<=0)
-938 -7710 0
-1043 -7710 0
-1043 -938 -7711 0
c (0<=(SATLiteral(1043) - aux1858 + SATLiteral(938)))
938 7711 0
1043 7711 0
1043 938 7710 0
c ((SATLiteral(1058) - aux1859 + SATLiteral(923))<=0)
-923 -7713 0
-1058 -7713 0
-1058 -923 -7714 0
c (0<=(SATLiteral(1058) - aux1859 + SATLiteral(923)))
923 7714 0
1058 7714 0
1058 923 7713 0
c (( - aux1860 + SATLiteral(1178) + SATLiteral(908))<=0)
-908 -7716 0
-1178 -7716 0
-1178 -908 -7717 0
c (0<=( - aux1860 + SATLiteral(1178) + SATLiteral(908)))
908 7717 0
1178 7717 0
1178 908 7716 0
c (( - aux1861 + SATLiteral(1193) + SATLiteral(1208))<=0)
-1208 -7719 0
-1193 -7719 0
-1193 -1208 -7720 0
c (0<=( - aux1861 + SATLiteral(1193) + SATLiteral(1208)))
1208 7720 0
1193 7720 0
1193 1208 7719 0
c ((SATLiteral(1073) + aux1861 - aux1862)<=0)
7719 -7722 0
7720 -7723 0
-1073 -7722 0
-1073 7719 -7723 0
-1073 7720 -7725 0
c (0<=(SATLiteral(1073) + aux1861 - aux1862))
-7720 7725 0
-7719 7723 0
1073 7725 0
1073 -7720 7723 0
1073 -7719 7722 0
c ((aux1858 + aux1860 - aux1863)<=0)
7716 -7727 0
7717 -7728 0
7710 -7727 0
7710 7716 -7728 0
7710 7717 -7730 0
7711 -7728 0
7711 7716 -7730 0
7711 7717 -7732 0
c (0<=(aux1858 + aux1860 - aux1863))
-7717 7732 0
-7716 7730 0
-7711 7732 0
-7711 -7717 7730 0
-7711 -7716 7728 0
-7710 7730 0
-7710 -7717 7728 0
-7710 -7716 7727 0
c ((SATLiteral(1045) - aux1864 + SATLiteral(940))<=0)
-940 -7734 0
-1045 -7734 0
-1045 -940 -7735 0
c (0<=(SATLiteral(1045) - aux1864 + SATLiteral(940)))
940 7735 0
1045 7735 0
1045 940 7734 0
c ((SATLiteral(1060) - aux1865 + SATLiteral(925))<=0)
-925 -7737 0
-1060 -7737 0
-1060 -925 -7738 0
c (0<=(SATLiteral(1060) - aux1865 + SATLiteral(925)))
925 7738 0
1060 7738 0
1060 925 7737 0
c (( - aux1866 + SATLiteral(1180) + SATLiteral(910))<=0)
-910 -7740 0
-1180 -7740 0
-1180 -910 -7741 0
c (0<=( - aux1866 + SATLiteral(1180) + SATLiteral(910)))
910 7741 0
1180 7741 0
1180 910 7740 0
c (( - aux1867 + SATLiteral(1195) + SATLiteral(1210))<=0)
-1210 -7743 0
-1195 -7743 0
-1195 -1210 -7744 0
c (0<=( - aux1867 + SATLiteral(1195) + SATLiteral(1210)))
1210 7744 0
1195 7744 0
1195 1210 7743 0
c ((SATLiteral(1075) + aux1867 - aux1868)<=0)
7743 -7746 0
7744 -7747 0
-1075 -7746 0
-1075 7743 -7747 0
-1075 7744 -7749 0
c (0<=(SATLiteral(1075) + aux1867 - aux1868))
-7744 7749 0
-7743 7747 0
1075 7749 0
1075 -7744 7747 0
1075 -7743 7746 0
c ((aux1864 + aux1866 - aux1869)<=0)
7740 -7751 0
7741 -7752 0
7734 -7751 0
7734 7740 -7752 0
7734 7741 -7754 0
7735 -7752 0
7735 7740 -7754 0
7735 7741 -7756 0
c (0<=(aux1864 + aux1866 - aux1869))
-7741 7756 0
-7740 7754 0
-7735 7756 0
-7735 -7741 7754 0
-7735 -7740 7752 0
-7734 7754 0
-7734 -7741 7752 0
-7734 -7740 7751 0
c ((SATLiteral(1047) - aux1870 + SATLiteral(942))<=0)
-942 -7758 0
-1047 -7758 0
-1047 -942 -7759 0
c (0<=(SATLiteral(1047) - aux1870 + SATLiteral(942)))
942 7759 0
1047 7759 0
1047 942 7758 0
c ((SATLiteral(1062) - aux1871 + SATLiteral(927))<=0)
-927 -7761 0
-1062 -7761 0
-1062 -927 -7762 0
c (0<=(SATLiteral(1062) - aux1871 + SATLiteral(927)))
927 7762 0
1062 7762 0
1062 927 7761 0
c (( - aux1872 + SATLiteral(1182) + SATLiteral(912))<=0)
-912 -7764 0
-1182 -7764 0
-1182 -912 -7765 0
c (0<=( - aux1872 + SATLiteral(1182) + SATLiteral(912)))
912 7765 0
1182 7765 0
1182 912 7764 0
c (( - aux1873 + SATLiteral(1197) + SATLiteral(1212))<=0)
-1212 -7767 0
-1197 -7767 0
-1197 -1212 -7768 0
c (0<=( - aux1873 + SATLiteral(1197) + SATLiteral(1212)))
1212 7768 0
1197 7768 0
1197 1212 7767 0
c ((SATLiteral(1077) + aux1873 - aux1874)<=0)
7767 -7770 0
7768 -7771 0
-1077 -7770 0
-1077 7767 -7771 0
-1077 7768 -7773 0
c (0<=(SATLiteral(1077) + aux1873 - aux1874))
-7768 7773 0
-7767 7771 0
1077 7773 0
1077 -7768 7771 0
1077 -7767 7770 0
c ((aux1870 + aux1872 - aux1875)<=0)
7764 -7775 0
7765 -7776 0
7758 -7775 0
7758 7764 -7776 0
7758 7765 -7778 0
7759 -7776 0
7759 7764 -7778 0
7759 7765 -7780 0
c (0<=(aux1870 + aux1872 - aux1875))
-7765 7780 0
-7764 7778 0
-7759 7780 0
-7759 -7765 7778 0
-7759 -7764 7776 0
-7758 7778 0
-7758 -7765 7776 0
-7758 -7764 7775 0
c ((SATLiteral(1049) - aux1876 + SATLiteral(944))<=0)
-944 -7782 0
-1049 -7782 0
-1049 -944 -7783 0
c (0<=(SATLiteral(1049) - aux1876 + SATLiteral(944)))
944 7783 0
1049 7783 0
1049 944 7782 0
c ((SATLiteral(1064) - aux1877 + SATLiteral(929))<=0)
-929 -7785 0
-1064 -7785 0
-1064 -929 -7786 0
c (0<=(SATLiteral(1064) - aux1877 + SATLiteral(929)))
929 7786 0
1064 7786 0
1064 929 7785 0
c (( - aux1878 + SATLiteral(1184) + SATLiteral(914))<=0)
-914 -7788 0
-1184 -7788 0
-1184 -914 -7789 0
c (0<=( - aux1878 + SATLiteral(1184) + SATLiteral(914)))
914 7789 0
1184 7789 0
1184 914 7788 0
c (( - aux1879 + SATLiteral(1199) + SATLiteral(1214))<=0)
-1214 -7791 0
-1199 -7791 0
-1199 -1214 -7792 0
c (0<=( - aux1879 + SATLiteral(1199) + SATLiteral(1214)))
1214 7792 0
1199 7792 0
1199 1214 7791 0
c ((SATLiteral(1079) + aux1879 - aux1880)<=0)
7791 -7794 0
7792 -7795 0
-1079 -7794 0
-1079 7791 -7795 0
-1079 7792 -7797 0
c (0<=(SATLiteral(1079) + aux1879 - aux1880))
-7792 7797 0
-7791 7795 0
1079 7797 0
1079 -7792 7795 0
1079 -7791 7794 0
c ((aux1876 + aux1878 - aux1881)<=0)
7788 -7799 0
7789 -7800 0
7782 -7799 0
7782 7788 -7800 0
7782 7789 -7802 0
7783 -7800 0
7783 7788 -7802 0
7783 7789 -7804 0
c (0<=(aux1876 + aux1878 - aux1881))
-7789 7804 0
-7788 7802 0
-7783 7804 0
-7783 -7789 7802 0
-7783 -7788 7800 0
-7782 7802 0
-7782 -7789 7800 0
-7782 -7788 7799 0
c ((SATLiteral(1051) - aux1882 + SATLiteral(946))<=0)
-946 -7806 0
-1051 -7806 0
-1051 -946 -7807 0
c (0<=(SATLiteral(1051) - aux1882 + SATLiteral(946)))
946 7807 0
1051 7807 0
1051 946 7806 0
c ((SATLiteral(1066) - aux1883 + SATLiteral(931))<=0)
-931 -7809 0
-1066 -7809 0
-1066 -931 -7810 0
c (0<=(SATLiteral(1066) - aux1883 + SATLiteral(931)))
931 7810 0
1066 7810 0
1066 931 7809 0
c (( - aux1884 + SATLiteral(1186) + SATLiteral(916))<=0)
-916 -7812 0
-1186 -7812 0
-1186 -916 -7813 0
c (0<=( - aux1884 + SATLiteral(1186) + SATLiteral(916)))
916 7813 0
1186 7813 0
1186 916 7812 0
c (( - aux1885 + SATLiteral(1201) + SATLiteral(1216))<=0)
-1216 -7815 0
-1201 -7815 0
-1201 -1216 -7816 0
c (0<=( - aux1885 + SATLiteral(1201) + SATLiteral(1216)))
1216 7816 0
1201 7816 0
1201 1216 7815 0
c ((SATLiteral(1081) + aux1885 - aux1886)<=0)
7815 -7818 0
7816 -7819 0
-1081 -7818 0
-1081 7815 -7819 0
-1081 7816 -7821 0
c (0<=(SATLiteral(1081) + aux1885 - aux1886))
-7816 7821 0
-7815 7819 0
1081 7821 0
1081 -7816 7819 0
1081 -7815 7818 0
c ((aux1882 + aux1884 - aux1887)<=0)
7812 -7823 0
7813 -7824 0
7806 -7823 0
7806 7812 -7824 0
7806 7813 -7826 0
7807 -7824 0
7807 7812 -7826 0
7807 7813 -7828 0
c (0<=(aux1882 + aux1884 - aux1887))
-7813 7828 0
-7812 7826 0
-7807 7828 0
-7807 -7813 7826 0
-7807 -7812 7824 0
-7806 7826 0
-7806 -7813 7824 0
-7806 -7812 7823 0
c ((SATLiteral(-1050) - aux1888 + SATLiteral(-945))<=0)
945 -7830 0
1050 -7830 0
1050 945 -7831 0
c (0<=(SATLiteral(-1050) - aux1888 + SATLiteral(-945)))
-945 7831 0
-1050 7831 0
-1050 -945 7830 0
c ((SATLiteral(-1065) - aux1889 + SATLiteral(-930))<=0)
930 -7833 0
1065 -7833 0
1065 930 -7834 0
c (0<=(SATLiteral(-1065) - aux1889 + SATLiteral(-930)))
-930 7834 0
-1065 7834 0
-1065 -930 7833 0
c (( - aux1890 + SATLiteral(-1185) + SATLiteral(-915))<=0)
915 -7836 0
1185 -7836 0
1185 915 -7837 0
c (0<=( - aux1890 + SATLiteral(-1185) + SATLiteral(-915)))
-915 7837 0
-1185 7837 0
-1185 -915 7836 0
c (( - aux1891 + SATLiteral(-1200) + SATLiteral(-1215))<=0)
1215 -7839 0
1200 -7839 0
1200 1215 -7840 0
c (0<=( - aux1891 + SATLiteral(-1200) + SATLiteral(-1215)))
-1215 7840 0
-1200 7840 0
-1200 -1215 7839 0
c ((SATLiteral(-1080) + aux1891 - aux1892)<=0)
7839 -7842 0
7840 -7843 0
1080 -7842 0
1080 7839 -7843 0
1080 7840 -7845 0
c (0<=(SATLiteral(-1080) + aux1891 - aux1892))
-7840 7845 0
-7839 7843 0
-1080 7845 0
-1080 -7840 7843 0
-1080 -7839 7842 0
c ((aux1888 + aux1890 - aux1893)<=0)
7836 -7847 0
7837 -7848 0
7830 -7847 0
7830 7836 -7848 0
7830 7837 -7850 0
7831 -7848 0
7831 7836 -7850 0
7831 7837 -7852 0
c (0<=(aux1888 + aux1890 - aux1893))
-7837 7852 0
-7836 7850 0
-7831 7852 0
-7831 -7837 7850 0
-7831 -7836 7848 0
-7830 7850 0
-7830 -7837 7848 0
-7830 -7836 7847 0
c ((SATLiteral(707) - aux1912 + SATLiteral(572))<=0)
-572 -7908 0
-707 -7908 0
-707 -572 -7909 0
c (0<=(SATLiteral(707) - aux1912 + SATLiteral(572)))
572 7909 0
707 7909 0
707 572 7908 0
c (( - aux1913 + SATLiteral(437) + SATLiteral(887))<=0)
-887 -7911 0
-437 -7911 0
-437 -887 -7912 0
c (0<=( - aux1913 + SATLiteral(437) + SATLiteral(887)))
887 7912 0
437 7912 0
437 887 7911 0
c (( - aux1914 + SATLiteral(857) + SATLiteral(872))<=0)
-872 -7914 0
-857 -7914 0
-857 -872 -7915 0
c (0<=( - aux1914 + SATLiteral(857) + SATLiteral(872)))
872 7915 0
857 7915 0
857 872 7914 0
c ((aux1914 - aux1915 + SATLiteral(842))<=0)
7914 -7917 0
7915 -7918 0
-842 -7917 0
-842 7914 -7918 0
-842 7915 -7920 0
c (0<=(aux1914 - aux1915 + SATLiteral(842)))
-7915 7920 0
-7914 7918 0
842 7920 0
842 -7915 7918 0
842 -7914 7917 0
c ((SATLiteral(709) - aux1916 + SATLiteral(574))<=0)
-574 -7922 0
-709 -7922 0
-709 -574 -7923 0
c (0<=(SATLiteral(709) - aux1916 + SATLiteral(574)))
574 7923 0
709 7923 0
709 574 7922 0
c (( - aux1917 + SATLiteral(439) + SATLiteral(889))<=0)
-889 -7925 0
-439 -7925 0
-439 -889 -7926 0
c (0<=( - aux1917 + SATLiteral(439) + SATLiteral(889)))
889 7926 0
439 7926 0
439 889 7925 0
c (( - aux1918 + SATLiteral(859) + SATLiteral(874))<=0)
-874 -7928 0
-859 -7928 0
-859 -874 -7929 0
c (0<=( - aux1918 + SATLiteral(859) + SATLiteral(874)))
874 7929 0
859 7929 0
859 874 7928 0
c ((aux1918 - aux1919 + SATLiteral(844))<=0)
7928 -7931 0
7929 -7932 0
-844 -7931 0
-844 7928 -7932 0
-844 7929 -7934 0
c (0<=(aux1918 - aux1919 + SATLiteral(844)))
-7929 7934 0
-7928 7932 0
844 7934 0
844 -7929 7932 0
844 -7928 7931 0
c ((SATLiteral(711) - aux1920 + SATLiteral(576))<=0)
-576 -7936 0
-711 -7936 0
-711 -576 -7937 0
c (0<=(SATLiteral(711) - aux1920 + SATLiteral(576)))
576 7937 0
711 7937 0
711 576 7936 0
c (( - aux1921 + SATLiteral(441) + SATLiteral(891))<=0)
-891 -7939 0
-441 -7939 0
-441 -891 -7940 0
c (0<=( - aux1921 + SATLiteral(441) + SATLiteral(891)))
891 7940 0
441 7940 0
441 891 7939 0
c (( - aux1922 + SATLiteral(861) + SATLiteral(876))<=0)
-876 -7942 0
-861 -7942 0
-861 -876 -7943 0
c (0<=( - aux1922 + SATLiteral(861) + SATLiteral(876)))
876 7943 0
861 7943 0
861 876 7942 0
c ((aux1922 - aux1923 + SATLiteral(846))<=0)
7942 -7945 0
7943 -7946 0
-846 -7945 0
-846 7942 -7946 0
-846 7943 -7948 0
c (0<=(aux1922 - aux1923 + SATLiteral(846)))
-7943 7948 0
-7942 7946 0
846 7948 0
846 -7943 7946 0
846 -7942 7945 0
c ((SATLiteral(713) - aux1924 + SATLiteral(578))<=0)
-578 -7950 0
-713 -7950 0
-713 -578 -7951 0
c (0<=(SATLiteral(713) - aux1924 + SATLiteral(578)))
578 7951 0
713 7951 0
713 578 7950 0
c (( - aux1925 + SATLiteral(443) + SATLiteral(893))<=0)
-893 -7953 0
-443 -7953 0
-443 -893 -7954 0
c (0<=( - aux1925 + SATLiteral(443) + SATLiteral(893)))
893 7954 0
443 7954 0
443 893 7953 0
c (( - aux1926 + SATLiteral(863) + SATLiteral(878))<=0)
-878 -7956 0
-863 -7956 0
-863 -878 -7957 0
c (0<=( - aux1926 + SATLiteral(863) + SATLiteral(878)))
878 7957 0
863 7957 0
863 878 7956 0
c ((aux1926 - aux1927 + SATLiteral(848))<=0)
7956 -7959 0
7957 -7960 0
-848 -7959 0
-848 7956 -7960 0
-848 7957 -7962 0
c (0<=(aux1926 - aux1927 + SATLiteral(848)))
-7957 7962 0
-7956 7960 0
848 7962 0
848 -7957 7960 0
848 -7956 7959 0
c ((SATLiteral(715) - aux1928 + SATLiteral(580))<=0)
-580 -7964 0
-715 -7964 0
-715 -580 -7965 0
c (0<=(SATLiteral(715) - aux1928 + SATLiteral(580)))
580 7965 0
715 7965 0
715 580 7964 0
c (( - aux1929 + SATLiteral(445) + SATLiteral(895))<=0)
-895 -7967 0
-445 -7967 0
-445 -895 -7968 0
c (0<=( - aux1929 + SATLiteral(445) + SATLiteral(895)))
895 7968 0
445 7968 0
445 895 7967 0
c (( - aux1930 + SATLiteral(865) + SATLiteral(880))<=0)
-880 -7970 0
-865 -7970 0
-865 -880 -7971 0
c (0<=( - aux1930 + SATLiteral(865) + SATLiteral(880)))
880 7971 0
865 7971 0
865 880 7970 0
c ((aux1930 - aux1931 + SATLiteral(850))<=0)
7970 -7973 0
7971 -7974 0
-850 -7973 0
-850 7970 -7974 0
-850 7971 -7976 0
c (0<=(aux1930 - aux1931 + SATLiteral(850)))
-7971 7976 0
-7970 7974 0
850 7976 0
850 -7971 7974 0
850 -7970 7973 0
c ((SATLiteral(717) - aux1932 + SATLiteral(582))<=0)
-582 -7978 0
-717 -7978 0
-717 -582 -7979 0
c (0<=(SATLiteral(717) - aux1932 + SATLiteral(582)))
582 7979 0
717 7979 0
717 582 7978 0
c (( - aux1933 + SATLiteral(447) + SATLiteral(897))<=0)
-897 -7981 0
-447 -7981 0
-447 -897 -7982 0
c (0<=( - aux1933 + SATLiteral(447) + SATLiteral(897)))
897 7982 0
447 7982 0
447 897 7981 0
c (( - aux1934 + SATLiteral(867) + SATLiteral(882))<=0)
-882 -7984 0
-867 -7984 0
-867 -882 -7985 0
c (0<=( - aux1934 + SATLiteral(867) + SATLiteral(882)))
882 7985 0
867 7985 0
867 882 7984 0
c ((aux1934 - aux1935 + SATLiteral(852))<=0)
7984 -7987 0
7985 -7988 0
-852 -7987 0
-852 7984 -7988 0
-852 7985 -7990 0
c (0<=(aux1934 - aux1935 + SATLiteral(852)))
-7985 7990 0
-7984 7988 0
852 7990 0
852 -7985 7988 0
852 -7984 7987 0
c ((SATLiteral(719) - aux1936 + SATLiteral(584))<=0)
-584 -7992 0
-719 -7992 0
-719 -584 -7993 0
c (0<=(SATLiteral(719) - aux1936 + SATLiteral(584)))
584 7993 0
719 7993 0
719 584 7992 0
c (( - aux1937 + SATLiteral(449) + SATLiteral(899))<=0)
-899 -7995 0
-449 -7995 0
-449 -899 -7996 0
c (0<=( - aux1937 + SATLiteral(449) + SATLiteral(899)))
899 7996 0
449 7996 0
449 899 7995 0
c (( - aux1938 + SATLiteral(869) + SATLiteral(884))<=0)
-884 -7998 0
-869 -7998 0
-869 -884 -7999 0
c (0<=( - aux1938 + SATLiteral(869) + SATLiteral(884)))
884 7999 0
869 7999 0
869 884 7998 0
c ((aux1938 - aux1939 + SATLiteral(854))<=0)
7998 -8001 0
7999 -8002 0
-854 -8001 0
-854 7998 -8002 0
-854 7999 -8004 0
c (0<=(aux1938 - aux1939 + SATLiteral(854)))
-7999 8004 0
-7998 8002 0
854 8004 0
854 -7999 8002 0
854 -7998 8001 0
c ((SATLiteral(721) - aux1940 + SATLiteral(586))<=0)
-586 -8006 0
-721 -8006 0
-721 -586 -8007 0
c (0<=(SATLiteral(721) - aux1940 + SATLiteral(586)))
586 8007 0
721 8007 0
721 586 8006 0
c (( - aux1941 + SATLiteral(451) + SATLiteral(901))<=0)
-901 -8009 0
-451 -8009 0
-451 -901 -8010 0
c (0<=( - aux1941 + SATLiteral(451) + SATLiteral(901)))
901 8010 0
451 8010 0
451 901 8009 0
c (( - aux1942 + SATLiteral(871) + SATLiteral(886))<=0)
-886 -8012 0
-871 -8012 0
-871 -886 -8013 0
c (0<=( - aux1942 + SATLiteral(871) + SATLiteral(886)))
886 8013 0
871 8013 0
871 886 8012 0
c ((aux1942 - aux1943 + SATLiteral(856))<=0)
8012 -8015 0
8013 -8016 0
-856 -8015 0
-856 8012 -8016 0
-856 8013 -8018 0
c (0<=(aux1942 - aux1943 + SATLiteral(856)))
-8013 8018 0
-8012 8016 0
856 8018 0
856 -8013 8016 0
856 -8012 8015 0
c ((SATLiteral(-720) - aux1944 + SATLiteral(-585))<=0)
585 -8020 0
720 -8020 0
720 585 -8021 0
c (0<=(SATLiteral(-720) - aux1944 + SATLiteral(-585)))
-585 8021 0
-720 8021 0
-720 -585 8020 0
c (( - aux1945 + SATLiteral(-450) + SATLiteral(-900))<=0)
900 -8023 0
450 -8023 0
450 900 -8024 0
c (0<=( - aux1945 + SATLiteral(-450) + SATLiteral(-900)))
-900 8024 0
-450 8024 0
-450 -900 8023 0
c (( - aux1946 + SATLiteral(-870) + SATLiteral(-885))<=0)
885 -8026 0
870 -8026 0
870 885 -8027 0
c (0<=( - aux1946 + SATLiteral(-870) + SATLiteral(-885)))
-885 8027 0
-870 8027 0
-870 -885 8026 0
c ((aux1946 - aux1947 + SATLiteral(-855))<=0)
8026 -8029 0
8027 -8030 0
855 -8029 0
855 8026 -8030 0
855 8027 -8032 0
c (0<=(aux1946 - aux1947 + SATLiteral(-855)))
-8027 8032 0
-8026 8030 0
-855 8032 0
-855 -8027 8030 0
-855 -8026 8029 0
