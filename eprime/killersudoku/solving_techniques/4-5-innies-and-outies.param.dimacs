p cnf 8516 41348                                                                                    

1 0
c Encoding variable: x_00001_00001 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00001_00001' order represents '1' with '2'
c Var 'x_00001_00001' direct represents '1' with '2'
c Var 'x_00001_00001' order represents '2' with '3'
-2 3 0
c Var 'x_00001_00001' direct represents '2' with '4'
2 -3 4 0
-4 3 0
-4 -2 0
c Var 'x_00001_00001' order represents '3' with '5'
-3 5 0
c Var 'x_00001_00001' direct represents '3' with '6'
3 -5 6 0
-6 5 0
-6 -3 0
c Var 'x_00001_00001' order represents '4' with '7'
-5 7 0
c Var 'x_00001_00001' direct represents '4' with '8'
5 -7 8 0
-8 7 0
-8 -5 0
c Var 'x_00001_00001' order represents '5' with '9'
-7 9 0
c Var 'x_00001_00001' direct represents '5' with '10'
7 -9 10 0
-10 9 0
-10 -7 0
c Var 'x_00001_00001' order represents '6' with '11'
-9 11 0
c Var 'x_00001_00001' direct represents '6' with '12'
9 -11 12 0
-12 11 0
-12 -9 0
c Var 'x_00001_00001' order represents '7' with '13'
-11 13 0
c Var 'x_00001_00001' direct represents '7' with '14'
11 -13 14 0
-14 13 0
-14 -11 0
c Var 'x_00001_00001' order represents '8' with '15'
-13 15 0
c Var 'x_00001_00001' direct represents '8' with '16'
13 -15 16 0
-16 15 0
-16 -13 0
c Var 'x_00001_00001' direct represents '9' with '-15'
2 4 6 8 10 12 14 16 -15 0
c Encoding variable: x_00001_00002 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00001_00002' order represents '1' with '17'
c Var 'x_00001_00002' direct represents '1' with '17'
c Var 'x_00001_00002' order represents '2' with '18'
-17 18 0
c Var 'x_00001_00002' direct represents '2' with '19'
17 -18 19 0
-19 18 0
-19 -17 0
c Var 'x_00001_00002' order represents '3' with '20'
-18 20 0
c Var 'x_00001_00002' direct represents '3' with '21'
18 -20 21 0
-21 20 0
-21 -18 0
c Var 'x_00001_00002' order represents '4' with '22'
-20 22 0
c Var 'x_00001_00002' direct represents '4' with '23'
20 -22 23 0
-23 22 0
-23 -20 0
c Var 'x_00001_00002' order represents '5' with '24'
-22 24 0
c Var 'x_00001_00002' direct represents '5' with '25'
22 -24 25 0
-25 24 0
-25 -22 0
c Var 'x_00001_00002' order represents '6' with '26'
-24 26 0
c Var 'x_00001_00002' direct represents '6' with '27'
24 -26 27 0
-27 26 0
-27 -24 0
c Var 'x_00001_00002' order represents '7' with '28'
-26 28 0
c Var 'x_00001_00002' direct represents '7' with '29'
26 -28 29 0
-29 28 0
-29 -26 0
c Var 'x_00001_00002' order represents '8' with '30'
-28 30 0
c Var 'x_00001_00002' direct represents '8' with '31'
28 -30 31 0
-31 30 0
-31 -28 0
c Var 'x_00001_00002' direct represents '9' with '-30'
17 19 21 23 25 27 29 31 -30 0
c Encoding variable: x_00001_00003 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00001_00003' order represents '1' with '32'
c Var 'x_00001_00003' direct represents '1' with '32'
c Var 'x_00001_00003' order represents '2' with '33'
-32 33 0
c Var 'x_00001_00003' direct represents '2' with '34'
32 -33 34 0
-34 33 0
-34 -32 0
c Var 'x_00001_00003' order represents '3' with '35'
-33 35 0
c Var 'x_00001_00003' direct represents '3' with '36'
33 -35 36 0
-36 35 0
-36 -33 0
c Var 'x_00001_00003' order represents '4' with '37'
-35 37 0
c Var 'x_00001_00003' direct represents '4' with '38'
35 -37 38 0
-38 37 0
-38 -35 0
c Var 'x_00001_00003' order represents '5' with '39'
-37 39 0
c Var 'x_00001_00003' direct represents '5' with '40'
37 -39 40 0
-40 39 0
-40 -37 0
c Var 'x_00001_00003' order represents '6' with '41'
-39 41 0
c Var 'x_00001_00003' direct represents '6' with '42'
39 -41 42 0
-42 41 0
-42 -39 0
c Var 'x_00001_00003' order represents '7' with '43'
-41 43 0
c Var 'x_00001_00003' direct represents '7' with '44'
41 -43 44 0
-44 43 0
-44 -41 0
c Var 'x_00001_00003' order represents '8' with '45'
-43 45 0
c Var 'x_00001_00003' direct represents '8' with '46'
43 -45 46 0
-46 45 0
-46 -43 0
c Var 'x_00001_00003' direct represents '9' with '-45'
32 34 36 38 40 42 44 46 -45 0
c Encoding variable: x_00001_00004 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00001_00004' order represents '1' with '47'
c Var 'x_00001_00004' direct represents '1' with '47'
c Var 'x_00001_00004' order represents '2' with '48'
-47 48 0
c Var 'x_00001_00004' direct represents '2' with '49'
47 -48 49 0
-49 48 0
-49 -47 0
c Var 'x_00001_00004' order represents '3' with '50'
-48 50 0
c Var 'x_00001_00004' direct represents '3' with '51'
48 -50 51 0
-51 50 0
-51 -48 0
c Var 'x_00001_00004' order represents '4' with '52'
-50 52 0
c Var 'x_00001_00004' direct represents '4' with '53'
50 -52 53 0
-53 52 0
-53 -50 0
c Var 'x_00001_00004' order represents '5' with '54'
-52 54 0
c Var 'x_00001_00004' direct represents '5' with '55'
52 -54 55 0
-55 54 0
-55 -52 0
c Var 'x_00001_00004' order represents '6' with '56'
-54 56 0
c Var 'x_00001_00004' direct represents '6' with '57'
54 -56 57 0
-57 56 0
-57 -54 0
c Var 'x_00001_00004' order represents '7' with '58'
-56 58 0
c Var 'x_00001_00004' direct represents '7' with '59'
56 -58 59 0
-59 58 0
-59 -56 0
c Var 'x_00001_00004' order represents '8' with '60'
-58 60 0
c Var 'x_00001_00004' direct represents '8' with '61'
58 -60 61 0
-61 60 0
-61 -58 0
c Var 'x_00001_00004' direct represents '9' with '-60'
47 49 51 53 55 57 59 61 -60 0
c Encoding variable: x_00001_00005 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00001_00005' order represents '1' with '62'
c Var 'x_00001_00005' direct represents '1' with '62'
c Var 'x_00001_00005' order represents '2' with '63'
-62 63 0
c Var 'x_00001_00005' direct represents '2' with '64'
62 -63 64 0
-64 63 0
-64 -62 0
c Var 'x_00001_00005' order represents '3' with '65'
-63 65 0
c Var 'x_00001_00005' direct represents '3' with '66'
63 -65 66 0
-66 65 0
-66 -63 0
c Var 'x_00001_00005' order represents '4' with '67'
-65 67 0
c Var 'x_00001_00005' direct represents '4' with '68'
65 -67 68 0
-68 67 0
-68 -65 0
c Var 'x_00001_00005' order represents '5' with '69'
-67 69 0
c Var 'x_00001_00005' direct represents '5' with '70'
67 -69 70 0
-70 69 0
-70 -67 0
c Var 'x_00001_00005' order represents '6' with '71'
-69 71 0
c Var 'x_00001_00005' direct represents '6' with '72'
69 -71 72 0
-72 71 0
-72 -69 0
c Var 'x_00001_00005' order represents '7' with '73'
-71 73 0
c Var 'x_00001_00005' direct represents '7' with '74'
71 -73 74 0
-74 73 0
-74 -71 0
c Var 'x_00001_00005' order represents '8' with '75'
-73 75 0
c Var 'x_00001_00005' direct represents '8' with '76'
73 -75 76 0
-76 75 0
-76 -73 0
c Var 'x_00001_00005' direct represents '9' with '-75'
62 64 66 68 70 72 74 76 -75 0
c Encoding variable: x_00001_00006 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00001_00006' order represents '1' with '77'
c Var 'x_00001_00006' direct represents '1' with '77'
c Var 'x_00001_00006' order represents '2' with '78'
-77 78 0
c Var 'x_00001_00006' direct represents '2' with '79'
77 -78 79 0
-79 78 0
-79 -77 0
c Var 'x_00001_00006' order represents '3' with '80'
-78 80 0
c Var 'x_00001_00006' direct represents '3' with '81'
78 -80 81 0
-81 80 0
-81 -78 0
c Var 'x_00001_00006' order represents '4' with '82'
-80 82 0
c Var 'x_00001_00006' direct represents '4' with '83'
80 -82 83 0
-83 82 0
-83 -80 0
c Var 'x_00001_00006' order represents '5' with '84'
-82 84 0
c Var 'x_00001_00006' direct represents '5' with '85'
82 -84 85 0
-85 84 0
-85 -82 0
c Var 'x_00001_00006' order represents '6' with '86'
-84 86 0
c Var 'x_00001_00006' direct represents '6' with '87'
84 -86 87 0
-87 86 0
-87 -84 0
c Var 'x_00001_00006' order represents '7' with '88'
-86 88 0
c Var 'x_00001_00006' direct represents '7' with '89'
86 -88 89 0
-89 88 0
-89 -86 0
c Var 'x_00001_00006' order represents '8' with '90'
-88 90 0
c Var 'x_00001_00006' direct represents '8' with '91'
88 -90 91 0
-91 90 0
-91 -88 0
c Var 'x_00001_00006' direct represents '9' with '-90'
77 79 81 83 85 87 89 91 -90 0
c Encoding variable: x_00001_00007 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00001_00007' order represents '1' with '92'
c Var 'x_00001_00007' direct represents '1' with '92'
c Var 'x_00001_00007' order represents '2' with '93'
-92 93 0
c Var 'x_00001_00007' direct represents '2' with '94'
92 -93 94 0
-94 93 0
-94 -92 0
c Var 'x_00001_00007' order represents '3' with '95'
-93 95 0
c Var 'x_00001_00007' direct represents '3' with '96'
93 -95 96 0
-96 95 0
-96 -93 0
c Var 'x_00001_00007' order represents '4' with '97'
-95 97 0
c Var 'x_00001_00007' direct represents '4' with '98'
95 -97 98 0
-98 97 0
-98 -95 0
c Var 'x_00001_00007' order represents '5' with '99'
-97 99 0
c Var 'x_00001_00007' direct represents '5' with '100'
97 -99 100 0
-100 99 0
-100 -97 0
c Var 'x_00001_00007' order represents '6' with '101'
-99 101 0
c Var 'x_00001_00007' direct represents '6' with '102'
99 -101 102 0
-102 101 0
-102 -99 0
c Var 'x_00001_00007' order represents '7' with '103'
-101 103 0
c Var 'x_00001_00007' direct represents '7' with '104'
101 -103 104 0
-104 103 0
-104 -101 0
c Var 'x_00001_00007' order represents '8' with '105'
-103 105 0
c Var 'x_00001_00007' direct represents '8' with '106'
103 -105 106 0
-106 105 0
-106 -103 0
c Var 'x_00001_00007' direct represents '9' with '-105'
92 94 96 98 100 102 104 106 -105 0
c Encoding variable: x_00001_00008 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00001_00008' order represents '1' with '107'
c Var 'x_00001_00008' direct represents '1' with '107'
c Var 'x_00001_00008' order represents '2' with '108'
-107 108 0
c Var 'x_00001_00008' direct represents '2' with '109'
107 -108 109 0
-109 108 0
-109 -107 0
c Var 'x_00001_00008' order represents '3' with '110'
-108 110 0
c Var 'x_00001_00008' direct represents '3' with '111'
108 -110 111 0
-111 110 0
-111 -108 0
c Var 'x_00001_00008' order represents '4' with '112'
-110 112 0
c Var 'x_00001_00008' direct represents '4' with '113'
110 -112 113 0
-113 112 0
-113 -110 0
c Var 'x_00001_00008' order represents '5' with '114'
-112 114 0
c Var 'x_00001_00008' direct represents '5' with '115'
112 -114 115 0
-115 114 0
-115 -112 0
c Var 'x_00001_00008' order represents '6' with '116'
-114 116 0
c Var 'x_00001_00008' direct represents '6' with '117'
114 -116 117 0
-117 116 0
-117 -114 0
c Var 'x_00001_00008' order represents '7' with '118'
-116 118 0
c Var 'x_00001_00008' direct represents '7' with '119'
116 -118 119 0
-119 118 0
-119 -116 0
c Var 'x_00001_00008' order represents '8' with '120'
-118 120 0
c Var 'x_00001_00008' direct represents '8' with '121'
118 -120 121 0
-121 120 0
-121 -118 0
c Var 'x_00001_00008' direct represents '9' with '-120'
107 109 111 113 115 117 119 121 -120 0
c Encoding variable: x_00001_00009 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00001_00009' order represents '1' with '122'
c Var 'x_00001_00009' direct represents '1' with '122'
c Var 'x_00001_00009' order represents '2' with '123'
-122 123 0
c Var 'x_00001_00009' direct represents '2' with '124'
122 -123 124 0
-124 123 0
-124 -122 0
c Var 'x_00001_00009' order represents '3' with '125'
-123 125 0
c Var 'x_00001_00009' direct represents '3' with '126'
123 -125 126 0
-126 125 0
-126 -123 0
c Var 'x_00001_00009' order represents '4' with '127'
-125 127 0
c Var 'x_00001_00009' direct represents '4' with '128'
125 -127 128 0
-128 127 0
-128 -125 0
c Var 'x_00001_00009' order represents '5' with '129'
-127 129 0
c Var 'x_00001_00009' direct represents '5' with '130'
127 -129 130 0
-130 129 0
-130 -127 0
c Var 'x_00001_00009' order represents '6' with '131'
-129 131 0
c Var 'x_00001_00009' direct represents '6' with '132'
129 -131 132 0
-132 131 0
-132 -129 0
c Var 'x_00001_00009' order represents '7' with '133'
-131 133 0
c Var 'x_00001_00009' direct represents '7' with '134'
131 -133 134 0
-134 133 0
-134 -131 0
c Var 'x_00001_00009' order represents '8' with '135'
-133 135 0
c Var 'x_00001_00009' direct represents '8' with '136'
133 -135 136 0
-136 135 0
-136 -133 0
c Var 'x_00001_00009' direct represents '9' with '-135'
122 124 126 128 130 132 134 136 -135 0
c Encoding variable: x_00002_00001 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00002_00001' order represents '1' with '137'
c Var 'x_00002_00001' direct represents '1' with '137'
c Var 'x_00002_00001' order represents '2' with '138'
-137 138 0
c Var 'x_00002_00001' direct represents '2' with '139'
137 -138 139 0
-139 138 0
-139 -137 0
c Var 'x_00002_00001' order represents '3' with '140'
-138 140 0
c Var 'x_00002_00001' direct represents '3' with '141'
138 -140 141 0
-141 140 0
-141 -138 0
c Var 'x_00002_00001' order represents '4' with '142'
-140 142 0
c Var 'x_00002_00001' direct represents '4' with '143'
140 -142 143 0
-143 142 0
-143 -140 0
c Var 'x_00002_00001' order represents '5' with '144'
-142 144 0
c Var 'x_00002_00001' direct represents '5' with '145'
142 -144 145 0
-145 144 0
-145 -142 0
c Var 'x_00002_00001' order represents '6' with '146'
-144 146 0
c Var 'x_00002_00001' direct represents '6' with '147'
144 -146 147 0
-147 146 0
-147 -144 0
c Var 'x_00002_00001' order represents '7' with '148'
-146 148 0
c Var 'x_00002_00001' direct represents '7' with '149'
146 -148 149 0
-149 148 0
-149 -146 0
c Var 'x_00002_00001' order represents '8' with '150'
-148 150 0
c Var 'x_00002_00001' direct represents '8' with '151'
148 -150 151 0
-151 150 0
-151 -148 0
c Var 'x_00002_00001' direct represents '9' with '-150'
137 139 141 143 145 147 149 151 -150 0
c Encoding variable: x_00002_00002 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00002_00002' order represents '1' with '152'
c Var 'x_00002_00002' direct represents '1' with '152'
c Var 'x_00002_00002' order represents '2' with '153'
-152 153 0
c Var 'x_00002_00002' direct represents '2' with '154'
152 -153 154 0
-154 153 0
-154 -152 0
c Var 'x_00002_00002' order represents '3' with '155'
-153 155 0
c Var 'x_00002_00002' direct represents '3' with '156'
153 -155 156 0
-156 155 0
-156 -153 0
c Var 'x_00002_00002' order represents '4' with '157'
-155 157 0
c Var 'x_00002_00002' direct represents '4' with '158'
155 -157 158 0
-158 157 0
-158 -155 0
c Var 'x_00002_00002' order represents '5' with '159'
-157 159 0
c Var 'x_00002_00002' direct represents '5' with '160'
157 -159 160 0
-160 159 0
-160 -157 0
c Var 'x_00002_00002' order represents '6' with '161'
-159 161 0
c Var 'x_00002_00002' direct represents '6' with '162'
159 -161 162 0
-162 161 0
-162 -159 0
c Var 'x_00002_00002' order represents '7' with '163'
-161 163 0
c Var 'x_00002_00002' direct represents '7' with '164'
161 -163 164 0
-164 163 0
-164 -161 0
c Var 'x_00002_00002' order represents '8' with '165'
-163 165 0
c Var 'x_00002_00002' direct represents '8' with '166'
163 -165 166 0
-166 165 0
-166 -163 0
c Var 'x_00002_00002' direct represents '9' with '-165'
152 154 156 158 160 162 164 166 -165 0
c Encoding variable: x_00002_00003 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00002_00003' order represents '1' with '167'
c Var 'x_00002_00003' direct represents '1' with '167'
c Var 'x_00002_00003' order represents '2' with '168'
-167 168 0
c Var 'x_00002_00003' direct represents '2' with '169'
167 -168 169 0
-169 168 0
-169 -167 0
c Var 'x_00002_00003' order represents '3' with '170'
-168 170 0
c Var 'x_00002_00003' direct represents '3' with '171'
168 -170 171 0
-171 170 0
-171 -168 0
c Var 'x_00002_00003' order represents '4' with '172'
-170 172 0
c Var 'x_00002_00003' direct represents '4' with '173'
170 -172 173 0
-173 172 0
-173 -170 0
c Var 'x_00002_00003' order represents '5' with '174'
-172 174 0
c Var 'x_00002_00003' direct represents '5' with '175'
172 -174 175 0
-175 174 0
-175 -172 0
c Var 'x_00002_00003' order represents '6' with '176'
-174 176 0
c Var 'x_00002_00003' direct represents '6' with '177'
174 -176 177 0
-177 176 0
-177 -174 0
c Var 'x_00002_00003' order represents '7' with '178'
-176 178 0
c Var 'x_00002_00003' direct represents '7' with '179'
176 -178 179 0
-179 178 0
-179 -176 0
c Var 'x_00002_00003' order represents '8' with '180'
-178 180 0
c Var 'x_00002_00003' direct represents '8' with '181'
178 -180 181 0
-181 180 0
-181 -178 0
c Var 'x_00002_00003' direct represents '9' with '-180'
167 169 171 173 175 177 179 181 -180 0
c Encoding variable: x_00002_00004 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00002_00004' order represents '1' with '182'
c Var 'x_00002_00004' direct represents '1' with '182'
c Var 'x_00002_00004' order represents '2' with '183'
-182 183 0
c Var 'x_00002_00004' direct represents '2' with '184'
182 -183 184 0
-184 183 0
-184 -182 0
c Var 'x_00002_00004' order represents '3' with '185'
-183 185 0
c Var 'x_00002_00004' direct represents '3' with '186'
183 -185 186 0
-186 185 0
-186 -183 0
c Var 'x_00002_00004' order represents '4' with '187'
-185 187 0
c Var 'x_00002_00004' direct represents '4' with '188'
185 -187 188 0
-188 187 0
-188 -185 0
c Var 'x_00002_00004' order represents '5' with '189'
-187 189 0
c Var 'x_00002_00004' direct represents '5' with '190'
187 -189 190 0
-190 189 0
-190 -187 0
c Var 'x_00002_00004' order represents '6' with '191'
-189 191 0
c Var 'x_00002_00004' direct represents '6' with '192'
189 -191 192 0
-192 191 0
-192 -189 0
c Var 'x_00002_00004' order represents '7' with '193'
-191 193 0
c Var 'x_00002_00004' direct represents '7' with '194'
191 -193 194 0
-194 193 0
-194 -191 0
c Var 'x_00002_00004' order represents '8' with '195'
-193 195 0
c Var 'x_00002_00004' direct represents '8' with '196'
193 -195 196 0
-196 195 0
-196 -193 0
c Var 'x_00002_00004' direct represents '9' with '-195'
182 184 186 188 190 192 194 196 -195 0
c Encoding variable: x_00002_00005 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00002_00005' order represents '1' with '197'
c Var 'x_00002_00005' direct represents '1' with '197'
c Var 'x_00002_00005' order represents '2' with '198'
-197 198 0
c Var 'x_00002_00005' direct represents '2' with '199'
197 -198 199 0
-199 198 0
-199 -197 0
c Var 'x_00002_00005' order represents '3' with '200'
-198 200 0
c Var 'x_00002_00005' direct represents '3' with '201'
198 -200 201 0
-201 200 0
-201 -198 0
c Var 'x_00002_00005' order represents '4' with '202'
-200 202 0
c Var 'x_00002_00005' direct represents '4' with '203'
200 -202 203 0
-203 202 0
-203 -200 0
c Var 'x_00002_00005' order represents '5' with '204'
-202 204 0
c Var 'x_00002_00005' direct represents '5' with '205'
202 -204 205 0
-205 204 0
-205 -202 0
c Var 'x_00002_00005' order represents '6' with '206'
-204 206 0
c Var 'x_00002_00005' direct represents '6' with '207'
204 -206 207 0
-207 206 0
-207 -204 0
c Var 'x_00002_00005' order represents '7' with '208'
-206 208 0
c Var 'x_00002_00005' direct represents '7' with '209'
206 -208 209 0
-209 208 0
-209 -206 0
c Var 'x_00002_00005' order represents '8' with '210'
-208 210 0
c Var 'x_00002_00005' direct represents '8' with '211'
208 -210 211 0
-211 210 0
-211 -208 0
c Var 'x_00002_00005' direct represents '9' with '-210'
197 199 201 203 205 207 209 211 -210 0
c Encoding variable: x_00002_00006 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00002_00006' order represents '1' with '212'
c Var 'x_00002_00006' direct represents '1' with '212'
c Var 'x_00002_00006' order represents '2' with '213'
-212 213 0
c Var 'x_00002_00006' direct represents '2' with '214'
212 -213 214 0
-214 213 0
-214 -212 0
c Var 'x_00002_00006' order represents '3' with '215'
-213 215 0
c Var 'x_00002_00006' direct represents '3' with '216'
213 -215 216 0
-216 215 0
-216 -213 0
c Var 'x_00002_00006' order represents '4' with '217'
-215 217 0
c Var 'x_00002_00006' direct represents '4' with '218'
215 -217 218 0
-218 217 0
-218 -215 0
c Var 'x_00002_00006' order represents '5' with '219'
-217 219 0
c Var 'x_00002_00006' direct represents '5' with '220'
217 -219 220 0
-220 219 0
-220 -217 0
c Var 'x_00002_00006' order represents '6' with '221'
-219 221 0
c Var 'x_00002_00006' direct represents '6' with '222'
219 -221 222 0
-222 221 0
-222 -219 0
c Var 'x_00002_00006' order represents '7' with '223'
-221 223 0
c Var 'x_00002_00006' direct represents '7' with '224'
221 -223 224 0
-224 223 0
-224 -221 0
c Var 'x_00002_00006' order represents '8' with '225'
-223 225 0
c Var 'x_00002_00006' direct represents '8' with '226'
223 -225 226 0
-226 225 0
-226 -223 0
c Var 'x_00002_00006' direct represents '9' with '-225'
212 214 216 218 220 222 224 226 -225 0
c Encoding variable: x_00002_00007 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00002_00007' order represents '1' with '227'
c Var 'x_00002_00007' direct represents '1' with '227'
c Var 'x_00002_00007' order represents '2' with '228'
-227 228 0
c Var 'x_00002_00007' direct represents '2' with '229'
227 -228 229 0
-229 228 0
-229 -227 0
c Var 'x_00002_00007' order represents '3' with '230'
-228 230 0
c Var 'x_00002_00007' direct represents '3' with '231'
228 -230 231 0
-231 230 0
-231 -228 0
c Var 'x_00002_00007' order represents '4' with '232'
-230 232 0
c Var 'x_00002_00007' direct represents '4' with '233'
230 -232 233 0
-233 232 0
-233 -230 0
c Var 'x_00002_00007' order represents '5' with '234'
-232 234 0
c Var 'x_00002_00007' direct represents '5' with '235'
232 -234 235 0
-235 234 0
-235 -232 0
c Var 'x_00002_00007' order represents '6' with '236'
-234 236 0
c Var 'x_00002_00007' direct represents '6' with '237'
234 -236 237 0
-237 236 0
-237 -234 0
c Var 'x_00002_00007' order represents '7' with '238'
-236 238 0
c Var 'x_00002_00007' direct represents '7' with '239'
236 -238 239 0
-239 238 0
-239 -236 0
c Var 'x_00002_00007' order represents '8' with '240'
-238 240 0
c Var 'x_00002_00007' direct represents '8' with '241'
238 -240 241 0
-241 240 0
-241 -238 0
c Var 'x_00002_00007' direct represents '9' with '-240'
227 229 231 233 235 237 239 241 -240 0
c Encoding variable: x_00002_00008 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00002_00008' order represents '1' with '242'
c Var 'x_00002_00008' direct represents '1' with '242'
c Var 'x_00002_00008' order represents '2' with '243'
-242 243 0
c Var 'x_00002_00008' direct represents '2' with '244'
242 -243 244 0
-244 243 0
-244 -242 0
c Var 'x_00002_00008' order represents '3' with '245'
-243 245 0
c Var 'x_00002_00008' direct represents '3' with '246'
243 -245 246 0
-246 245 0
-246 -243 0
c Var 'x_00002_00008' order represents '4' with '247'
-245 247 0
c Var 'x_00002_00008' direct represents '4' with '248'
245 -247 248 0
-248 247 0
-248 -245 0
c Var 'x_00002_00008' order represents '5' with '249'
-247 249 0
c Var 'x_00002_00008' direct represents '5' with '250'
247 -249 250 0
-250 249 0
-250 -247 0
c Var 'x_00002_00008' order represents '6' with '251'
-249 251 0
c Var 'x_00002_00008' direct represents '6' with '252'
249 -251 252 0
-252 251 0
-252 -249 0
c Var 'x_00002_00008' order represents '7' with '253'
-251 253 0
c Var 'x_00002_00008' direct represents '7' with '254'
251 -253 254 0
-254 253 0
-254 -251 0
c Var 'x_00002_00008' order represents '8' with '255'
-253 255 0
c Var 'x_00002_00008' direct represents '8' with '256'
253 -255 256 0
-256 255 0
-256 -253 0
c Var 'x_00002_00008' direct represents '9' with '-255'
242 244 246 248 250 252 254 256 -255 0
c Encoding variable: x_00002_00009 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00002_00009' order represents '1' with '257'
c Var 'x_00002_00009' direct represents '1' with '257'
c Var 'x_00002_00009' order represents '2' with '258'
-257 258 0
c Var 'x_00002_00009' direct represents '2' with '259'
257 -258 259 0
-259 258 0
-259 -257 0
c Var 'x_00002_00009' order represents '3' with '260'
-258 260 0
c Var 'x_00002_00009' direct represents '3' with '261'
258 -260 261 0
-261 260 0
-261 -258 0
c Var 'x_00002_00009' order represents '4' with '262'
-260 262 0
c Var 'x_00002_00009' direct represents '4' with '263'
260 -262 263 0
-263 262 0
-263 -260 0
c Var 'x_00002_00009' order represents '5' with '264'
-262 264 0
c Var 'x_00002_00009' direct represents '5' with '265'
262 -264 265 0
-265 264 0
-265 -262 0
c Var 'x_00002_00009' order represents '6' with '266'
-264 266 0
c Var 'x_00002_00009' direct represents '6' with '267'
264 -266 267 0
-267 266 0
-267 -264 0
c Var 'x_00002_00009' order represents '7' with '268'
-266 268 0
c Var 'x_00002_00009' direct represents '7' with '269'
266 -268 269 0
-269 268 0
-269 -266 0
c Var 'x_00002_00009' order represents '8' with '270'
-268 270 0
c Var 'x_00002_00009' direct represents '8' with '271'
268 -270 271 0
-271 270 0
-271 -268 0
c Var 'x_00002_00009' direct represents '9' with '-270'
257 259 261 263 265 267 269 271 -270 0
c Encoding variable: x_00003_00001 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00003_00001' order represents '1' with '272'
c Var 'x_00003_00001' direct represents '1' with '272'
c Var 'x_00003_00001' order represents '2' with '273'
-272 273 0
c Var 'x_00003_00001' direct represents '2' with '274'
272 -273 274 0
-274 273 0
-274 -272 0
c Var 'x_00003_00001' order represents '3' with '275'
-273 275 0
c Var 'x_00003_00001' direct represents '3' with '276'
273 -275 276 0
-276 275 0
-276 -273 0
c Var 'x_00003_00001' order represents '4' with '277'
-275 277 0
c Var 'x_00003_00001' direct represents '4' with '278'
275 -277 278 0
-278 277 0
-278 -275 0
c Var 'x_00003_00001' order represents '5' with '279'
-277 279 0
c Var 'x_00003_00001' direct represents '5' with '280'
277 -279 280 0
-280 279 0
-280 -277 0
c Var 'x_00003_00001' order represents '6' with '281'
-279 281 0
c Var 'x_00003_00001' direct represents '6' with '282'
279 -281 282 0
-282 281 0
-282 -279 0
c Var 'x_00003_00001' order represents '7' with '283'
-281 283 0
c Var 'x_00003_00001' direct represents '7' with '284'
281 -283 284 0
-284 283 0
-284 -281 0
c Var 'x_00003_00001' order represents '8' with '285'
-283 285 0
c Var 'x_00003_00001' direct represents '8' with '286'
283 -285 286 0
-286 285 0
-286 -283 0
c Var 'x_00003_00001' direct represents '9' with '-285'
272 274 276 278 280 282 284 286 -285 0
c Encoding variable: x_00003_00002 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00003_00002' order represents '1' with '287'
c Var 'x_00003_00002' direct represents '1' with '287'
c Var 'x_00003_00002' order represents '2' with '288'
-287 288 0
c Var 'x_00003_00002' direct represents '2' with '289'
287 -288 289 0
-289 288 0
-289 -287 0
c Var 'x_00003_00002' order represents '3' with '290'
-288 290 0
c Var 'x_00003_00002' direct represents '3' with '291'
288 -290 291 0
-291 290 0
-291 -288 0
c Var 'x_00003_00002' order represents '4' with '292'
-290 292 0
c Var 'x_00003_00002' direct represents '4' with '293'
290 -292 293 0
-293 292 0
-293 -290 0
c Var 'x_00003_00002' order represents '5' with '294'
-292 294 0
c Var 'x_00003_00002' direct represents '5' with '295'
292 -294 295 0
-295 294 0
-295 -292 0
c Var 'x_00003_00002' order represents '6' with '296'
-294 296 0
c Var 'x_00003_00002' direct represents '6' with '297'
294 -296 297 0
-297 296 0
-297 -294 0
c Var 'x_00003_00002' order represents '7' with '298'
-296 298 0
c Var 'x_00003_00002' direct represents '7' with '299'
296 -298 299 0
-299 298 0
-299 -296 0
c Var 'x_00003_00002' order represents '8' with '300'
-298 300 0
c Var 'x_00003_00002' direct represents '8' with '301'
298 -300 301 0
-301 300 0
-301 -298 0
c Var 'x_00003_00002' direct represents '9' with '-300'
287 289 291 293 295 297 299 301 -300 0
c Encoding variable: x_00003_00003 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00003_00003' order represents '1' with '302'
c Var 'x_00003_00003' direct represents '1' with '302'
c Var 'x_00003_00003' order represents '2' with '303'
-302 303 0
c Var 'x_00003_00003' direct represents '2' with '304'
302 -303 304 0
-304 303 0
-304 -302 0
c Var 'x_00003_00003' order represents '3' with '305'
-303 305 0
c Var 'x_00003_00003' direct represents '3' with '306'
303 -305 306 0
-306 305 0
-306 -303 0
c Var 'x_00003_00003' order represents '4' with '307'
-305 307 0
c Var 'x_00003_00003' direct represents '4' with '308'
305 -307 308 0
-308 307 0
-308 -305 0
c Var 'x_00003_00003' order represents '5' with '309'
-307 309 0
c Var 'x_00003_00003' direct represents '5' with '310'
307 -309 310 0
-310 309 0
-310 -307 0
c Var 'x_00003_00003' order represents '6' with '311'
-309 311 0
c Var 'x_00003_00003' direct represents '6' with '312'
309 -311 312 0
-312 311 0
-312 -309 0
c Var 'x_00003_00003' order represents '7' with '313'
-311 313 0
c Var 'x_00003_00003' direct represents '7' with '314'
311 -313 314 0
-314 313 0
-314 -311 0
c Var 'x_00003_00003' order represents '8' with '315'
-313 315 0
c Var 'x_00003_00003' direct represents '8' with '316'
313 -315 316 0
-316 315 0
-316 -313 0
c Var 'x_00003_00003' direct represents '9' with '-315'
302 304 306 308 310 312 314 316 -315 0
c Encoding variable: x_00003_00004 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00003_00004' order represents '1' with '317'
c Var 'x_00003_00004' direct represents '1' with '317'
c Var 'x_00003_00004' order represents '2' with '318'
-317 318 0
c Var 'x_00003_00004' direct represents '2' with '319'
317 -318 319 0
-319 318 0
-319 -317 0
c Var 'x_00003_00004' order represents '3' with '320'
-318 320 0
c Var 'x_00003_00004' direct represents '3' with '321'
318 -320 321 0
-321 320 0
-321 -318 0
c Var 'x_00003_00004' order represents '4' with '322'
-320 322 0
c Var 'x_00003_00004' direct represents '4' with '323'
320 -322 323 0
-323 322 0
-323 -320 0
c Var 'x_00003_00004' order represents '5' with '324'
-322 324 0
c Var 'x_00003_00004' direct represents '5' with '325'
322 -324 325 0
-325 324 0
-325 -322 0
c Var 'x_00003_00004' order represents '6' with '326'
-324 326 0
c Var 'x_00003_00004' direct represents '6' with '327'
324 -326 327 0
-327 326 0
-327 -324 0
c Var 'x_00003_00004' order represents '7' with '328'
-326 328 0
c Var 'x_00003_00004' direct represents '7' with '329'
326 -328 329 0
-329 328 0
-329 -326 0
c Var 'x_00003_00004' order represents '8' with '330'
-328 330 0
c Var 'x_00003_00004' direct represents '8' with '331'
328 -330 331 0
-331 330 0
-331 -328 0
c Var 'x_00003_00004' direct represents '9' with '-330'
317 319 321 323 325 327 329 331 -330 0
c Encoding variable: x_00003_00005 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00003_00005' order represents '1' with '332'
c Var 'x_00003_00005' direct represents '1' with '332'
c Var 'x_00003_00005' order represents '2' with '333'
-332 333 0
c Var 'x_00003_00005' direct represents '2' with '334'
332 -333 334 0
-334 333 0
-334 -332 0
c Var 'x_00003_00005' order represents '3' with '335'
-333 335 0
c Var 'x_00003_00005' direct represents '3' with '336'
333 -335 336 0
-336 335 0
-336 -333 0
c Var 'x_00003_00005' order represents '4' with '337'
-335 337 0
c Var 'x_00003_00005' direct represents '4' with '338'
335 -337 338 0
-338 337 0
-338 -335 0
c Var 'x_00003_00005' order represents '5' with '339'
-337 339 0
c Var 'x_00003_00005' direct represents '5' with '340'
337 -339 340 0
-340 339 0
-340 -337 0
c Var 'x_00003_00005' order represents '6' with '341'
-339 341 0
c Var 'x_00003_00005' direct represents '6' with '342'
339 -341 342 0
-342 341 0
-342 -339 0
c Var 'x_00003_00005' order represents '7' with '343'
-341 343 0
c Var 'x_00003_00005' direct represents '7' with '344'
341 -343 344 0
-344 343 0
-344 -341 0
c Var 'x_00003_00005' order represents '8' with '345'
-343 345 0
c Var 'x_00003_00005' direct represents '8' with '346'
343 -345 346 0
-346 345 0
-346 -343 0
c Var 'x_00003_00005' direct represents '9' with '-345'
332 334 336 338 340 342 344 346 -345 0
c Encoding variable: x_00003_00006 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00003_00006' order represents '1' with '347'
c Var 'x_00003_00006' direct represents '1' with '347'
c Var 'x_00003_00006' order represents '2' with '348'
-347 348 0
c Var 'x_00003_00006' direct represents '2' with '349'
347 -348 349 0
-349 348 0
-349 -347 0
c Var 'x_00003_00006' order represents '3' with '350'
-348 350 0
c Var 'x_00003_00006' direct represents '3' with '351'
348 -350 351 0
-351 350 0
-351 -348 0
c Var 'x_00003_00006' order represents '4' with '352'
-350 352 0
c Var 'x_00003_00006' direct represents '4' with '353'
350 -352 353 0
-353 352 0
-353 -350 0
c Var 'x_00003_00006' order represents '5' with '354'
-352 354 0
c Var 'x_00003_00006' direct represents '5' with '355'
352 -354 355 0
-355 354 0
-355 -352 0
c Var 'x_00003_00006' order represents '6' with '356'
-354 356 0
c Var 'x_00003_00006' direct represents '6' with '357'
354 -356 357 0
-357 356 0
-357 -354 0
c Var 'x_00003_00006' order represents '7' with '358'
-356 358 0
c Var 'x_00003_00006' direct represents '7' with '359'
356 -358 359 0
-359 358 0
-359 -356 0
c Var 'x_00003_00006' order represents '8' with '360'
-358 360 0
c Var 'x_00003_00006' direct represents '8' with '361'
358 -360 361 0
-361 360 0
-361 -358 0
c Var 'x_00003_00006' direct represents '9' with '-360'
347 349 351 353 355 357 359 361 -360 0
c Encoding variable: x_00003_00007 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00003_00007' order represents '1' with '362'
c Var 'x_00003_00007' direct represents '1' with '362'
c Var 'x_00003_00007' order represents '2' with '363'
-362 363 0
c Var 'x_00003_00007' direct represents '2' with '364'
362 -363 364 0
-364 363 0
-364 -362 0
c Var 'x_00003_00007' order represents '3' with '365'
-363 365 0
c Var 'x_00003_00007' direct represents '3' with '366'
363 -365 366 0
-366 365 0
-366 -363 0
c Var 'x_00003_00007' order represents '4' with '367'
-365 367 0
c Var 'x_00003_00007' direct represents '4' with '368'
365 -367 368 0
-368 367 0
-368 -365 0
c Var 'x_00003_00007' order represents '5' with '369'
-367 369 0
c Var 'x_00003_00007' direct represents '5' with '370'
367 -369 370 0
-370 369 0
-370 -367 0
c Var 'x_00003_00007' order represents '6' with '371'
-369 371 0
c Var 'x_00003_00007' direct represents '6' with '372'
369 -371 372 0
-372 371 0
-372 -369 0
c Var 'x_00003_00007' order represents '7' with '373'
-371 373 0
c Var 'x_00003_00007' direct represents '7' with '374'
371 -373 374 0
-374 373 0
-374 -371 0
c Var 'x_00003_00007' order represents '8' with '375'
-373 375 0
c Var 'x_00003_00007' direct represents '8' with '376'
373 -375 376 0
-376 375 0
-376 -373 0
c Var 'x_00003_00007' direct represents '9' with '-375'
362 364 366 368 370 372 374 376 -375 0
c Encoding variable: x_00003_00008 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00003_00008' order represents '1' with '377'
c Var 'x_00003_00008' direct represents '1' with '377'
c Var 'x_00003_00008' order represents '2' with '378'
-377 378 0
c Var 'x_00003_00008' direct represents '2' with '379'
377 -378 379 0
-379 378 0
-379 -377 0
c Var 'x_00003_00008' order represents '3' with '380'
-378 380 0
c Var 'x_00003_00008' direct represents '3' with '381'
378 -380 381 0
-381 380 0
-381 -378 0
c Var 'x_00003_00008' order represents '4' with '382'
-380 382 0
c Var 'x_00003_00008' direct represents '4' with '383'
380 -382 383 0
-383 382 0
-383 -380 0
c Var 'x_00003_00008' order represents '5' with '384'
-382 384 0
c Var 'x_00003_00008' direct represents '5' with '385'
382 -384 385 0
-385 384 0
-385 -382 0
c Var 'x_00003_00008' order represents '6' with '386'
-384 386 0
c Var 'x_00003_00008' direct represents '6' with '387'
384 -386 387 0
-387 386 0
-387 -384 0
c Var 'x_00003_00008' order represents '7' with '388'
-386 388 0
c Var 'x_00003_00008' direct represents '7' with '389'
386 -388 389 0
-389 388 0
-389 -386 0
c Var 'x_00003_00008' order represents '8' with '390'
-388 390 0
c Var 'x_00003_00008' direct represents '8' with '391'
388 -390 391 0
-391 390 0
-391 -388 0
c Var 'x_00003_00008' direct represents '9' with '-390'
377 379 381 383 385 387 389 391 -390 0
c Encoding variable: x_00003_00009 with domain: int(1..9) (representing constraint )
c Direct encoding.
c Var 'x_00003_00009' direct represents '1' with '392'
c Var 'x_00003_00009' direct represents '2' with '393'
c Var 'x_00003_00009' direct represents '3' with '394'
c Var 'x_00003_00009' direct represents '4' with '395'
c Var 'x_00003_00009' direct represents '5' with '396'
c Var 'x_00003_00009' direct represents '6' with '397'
c Var 'x_00003_00009' direct represents '7' with '398'
c Var 'x_00003_00009' direct represents '8' with '399'
c Var 'x_00003_00009' direct represents '9' with '400'
392 393 394 395 396 397 398 399 400 0
-392 401 0
-392 404 0
-393 402 0
-393 404 0
-394 403 0
-394 404 0
-395 401 0
-395 405 0
-396 402 0
-396 405 0
-397 403 0
-397 405 0
-398 401 0
-398 406 0
-399 402 0
-399 406 0
-400 403 0
-400 406 0
-401 -402 0
-401 -403 0
-402 -403 0
-404 -405 0
-404 -406 0
-405 -406 0
c Encoding variable: x_00004_00001 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00004_00001' order represents '1' with '407'
c Var 'x_00004_00001' direct represents '1' with '407'
c Var 'x_00004_00001' order represents '2' with '408'
-407 408 0
c Var 'x_00004_00001' direct represents '2' with '409'
407 -408 409 0
-409 408 0
-409 -407 0
c Var 'x_00004_00001' order represents '3' with '410'
-408 410 0
c Var 'x_00004_00001' direct represents '3' with '411'
408 -410 411 0
-411 410 0
-411 -408 0
c Var 'x_00004_00001' order represents '4' with '412'
-410 412 0
c Var 'x_00004_00001' direct represents '4' with '413'
410 -412 413 0
-413 412 0
-413 -410 0
c Var 'x_00004_00001' order represents '5' with '414'
-412 414 0
c Var 'x_00004_00001' direct represents '5' with '415'
412 -414 415 0
-415 414 0
-415 -412 0
c Var 'x_00004_00001' order represents '6' with '416'
-414 416 0
c Var 'x_00004_00001' direct represents '6' with '417'
414 -416 417 0
-417 416 0
-417 -414 0
c Var 'x_00004_00001' order represents '7' with '418'
-416 418 0
c Var 'x_00004_00001' direct represents '7' with '419'
416 -418 419 0
-419 418 0
-419 -416 0
c Var 'x_00004_00001' order represents '8' with '420'
-418 420 0
c Var 'x_00004_00001' direct represents '8' with '421'
418 -420 421 0
-421 420 0
-421 -418 0
c Var 'x_00004_00001' direct represents '9' with '-420'
407 409 411 413 415 417 419 421 -420 0
c Encoding variable: x_00004_00002 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00004_00002' order represents '1' with '422'
c Var 'x_00004_00002' direct represents '1' with '422'
c Var 'x_00004_00002' order represents '2' with '423'
-422 423 0
c Var 'x_00004_00002' direct represents '2' with '424'
422 -423 424 0
-424 423 0
-424 -422 0
c Var 'x_00004_00002' order represents '3' with '425'
-423 425 0
c Var 'x_00004_00002' direct represents '3' with '426'
423 -425 426 0
-426 425 0
-426 -423 0
c Var 'x_00004_00002' order represents '4' with '427'
-425 427 0
c Var 'x_00004_00002' direct represents '4' with '428'
425 -427 428 0
-428 427 0
-428 -425 0
c Var 'x_00004_00002' order represents '5' with '429'
-427 429 0
c Var 'x_00004_00002' direct represents '5' with '430'
427 -429 430 0
-430 429 0
-430 -427 0
c Var 'x_00004_00002' order represents '6' with '431'
-429 431 0
c Var 'x_00004_00002' direct represents '6' with '432'
429 -431 432 0
-432 431 0
-432 -429 0
c Var 'x_00004_00002' order represents '7' with '433'
-431 433 0
c Var 'x_00004_00002' direct represents '7' with '434'
431 -433 434 0
-434 433 0
-434 -431 0
c Var 'x_00004_00002' order represents '8' with '435'
-433 435 0
c Var 'x_00004_00002' direct represents '8' with '436'
433 -435 436 0
-436 435 0
-436 -433 0
c Var 'x_00004_00002' direct represents '9' with '-435'
422 424 426 428 430 432 434 436 -435 0
c Encoding variable: x_00004_00003 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00004_00003' order represents '1' with '437'
c Var 'x_00004_00003' direct represents '1' with '437'
c Var 'x_00004_00003' order represents '2' with '438'
-437 438 0
c Var 'x_00004_00003' direct represents '2' with '439'
437 -438 439 0
-439 438 0
-439 -437 0
c Var 'x_00004_00003' order represents '3' with '440'
-438 440 0
c Var 'x_00004_00003' direct represents '3' with '441'
438 -440 441 0
-441 440 0
-441 -438 0
c Var 'x_00004_00003' order represents '4' with '442'
-440 442 0
c Var 'x_00004_00003' direct represents '4' with '443'
440 -442 443 0
-443 442 0
-443 -440 0
c Var 'x_00004_00003' order represents '5' with '444'
-442 444 0
c Var 'x_00004_00003' direct represents '5' with '445'
442 -444 445 0
-445 444 0
-445 -442 0
c Var 'x_00004_00003' order represents '6' with '446'
-444 446 0
c Var 'x_00004_00003' direct represents '6' with '447'
444 -446 447 0
-447 446 0
-447 -444 0
c Var 'x_00004_00003' order represents '7' with '448'
-446 448 0
c Var 'x_00004_00003' direct represents '7' with '449'
446 -448 449 0
-449 448 0
-449 -446 0
c Var 'x_00004_00003' order represents '8' with '450'
-448 450 0
c Var 'x_00004_00003' direct represents '8' with '451'
448 -450 451 0
-451 450 0
-451 -448 0
c Var 'x_00004_00003' direct represents '9' with '-450'
437 439 441 443 445 447 449 451 -450 0
c Encoding variable: x_00004_00004 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00004_00004' order represents '1' with '452'
c Var 'x_00004_00004' direct represents '1' with '452'
c Var 'x_00004_00004' order represents '2' with '453'
-452 453 0
c Var 'x_00004_00004' direct represents '2' with '454'
452 -453 454 0
-454 453 0
-454 -452 0
c Var 'x_00004_00004' order represents '3' with '455'
-453 455 0
c Var 'x_00004_00004' direct represents '3' with '456'
453 -455 456 0
-456 455 0
-456 -453 0
c Var 'x_00004_00004' order represents '4' with '457'
-455 457 0
c Var 'x_00004_00004' direct represents '4' with '458'
455 -457 458 0
-458 457 0
-458 -455 0
c Var 'x_00004_00004' order represents '5' with '459'
-457 459 0
c Var 'x_00004_00004' direct represents '5' with '460'
457 -459 460 0
-460 459 0
-460 -457 0
c Var 'x_00004_00004' order represents '6' with '461'
-459 461 0
c Var 'x_00004_00004' direct represents '6' with '462'
459 -461 462 0
-462 461 0
-462 -459 0
c Var 'x_00004_00004' order represents '7' with '463'
-461 463 0
c Var 'x_00004_00004' direct represents '7' with '464'
461 -463 464 0
-464 463 0
-464 -461 0
c Var 'x_00004_00004' order represents '8' with '465'
-463 465 0
c Var 'x_00004_00004' direct represents '8' with '466'
463 -465 466 0
-466 465 0
-466 -463 0
c Var 'x_00004_00004' direct represents '9' with '-465'
452 454 456 458 460 462 464 466 -465 0
c Encoding variable: x_00004_00005 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00004_00005' order represents '1' with '467'
c Var 'x_00004_00005' direct represents '1' with '467'
c Var 'x_00004_00005' order represents '2' with '468'
-467 468 0
c Var 'x_00004_00005' direct represents '2' with '469'
467 -468 469 0
-469 468 0
-469 -467 0
c Var 'x_00004_00005' order represents '3' with '470'
-468 470 0
c Var 'x_00004_00005' direct represents '3' with '471'
468 -470 471 0
-471 470 0
-471 -468 0
c Var 'x_00004_00005' order represents '4' with '472'
-470 472 0
c Var 'x_00004_00005' direct represents '4' with '473'
470 -472 473 0
-473 472 0
-473 -470 0
c Var 'x_00004_00005' order represents '5' with '474'
-472 474 0
c Var 'x_00004_00005' direct represents '5' with '475'
472 -474 475 0
-475 474 0
-475 -472 0
c Var 'x_00004_00005' order represents '6' with '476'
-474 476 0
c Var 'x_00004_00005' direct represents '6' with '477'
474 -476 477 0
-477 476 0
-477 -474 0
c Var 'x_00004_00005' order represents '7' with '478'
-476 478 0
c Var 'x_00004_00005' direct represents '7' with '479'
476 -478 479 0
-479 478 0
-479 -476 0
c Var 'x_00004_00005' order represents '8' with '480'
-478 480 0
c Var 'x_00004_00005' direct represents '8' with '481'
478 -480 481 0
-481 480 0
-481 -478 0
c Var 'x_00004_00005' direct represents '9' with '-480'
467 469 471 473 475 477 479 481 -480 0
c Encoding variable: x_00004_00006 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00004_00006' order represents '1' with '482'
c Var 'x_00004_00006' direct represents '1' with '482'
c Var 'x_00004_00006' order represents '2' with '483'
-482 483 0
c Var 'x_00004_00006' direct represents '2' with '484'
482 -483 484 0
-484 483 0
-484 -482 0
c Var 'x_00004_00006' order represents '3' with '485'
-483 485 0
c Var 'x_00004_00006' direct represents '3' with '486'
483 -485 486 0
-486 485 0
-486 -483 0
c Var 'x_00004_00006' order represents '4' with '487'
-485 487 0
c Var 'x_00004_00006' direct represents '4' with '488'
485 -487 488 0
-488 487 0
-488 -485 0
c Var 'x_00004_00006' order represents '5' with '489'
-487 489 0
c Var 'x_00004_00006' direct represents '5' with '490'
487 -489 490 0
-490 489 0
-490 -487 0
c Var 'x_00004_00006' order represents '6' with '491'
-489 491 0
c Var 'x_00004_00006' direct represents '6' with '492'
489 -491 492 0
-492 491 0
-492 -489 0
c Var 'x_00004_00006' order represents '7' with '493'
-491 493 0
c Var 'x_00004_00006' direct represents '7' with '494'
491 -493 494 0
-494 493 0
-494 -491 0
c Var 'x_00004_00006' order represents '8' with '495'
-493 495 0
c Var 'x_00004_00006' direct represents '8' with '496'
493 -495 496 0
-496 495 0
-496 -493 0
c Var 'x_00004_00006' direct represents '9' with '-495'
482 484 486 488 490 492 494 496 -495 0
c Encoding variable: x_00004_00007 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00004_00007' order represents '1' with '497'
c Var 'x_00004_00007' direct represents '1' with '497'
c Var 'x_00004_00007' order represents '2' with '498'
-497 498 0
c Var 'x_00004_00007' direct represents '2' with '499'
497 -498 499 0
-499 498 0
-499 -497 0
c Var 'x_00004_00007' order represents '3' with '500'
-498 500 0
c Var 'x_00004_00007' direct represents '3' with '501'
498 -500 501 0
-501 500 0
-501 -498 0
c Var 'x_00004_00007' order represents '4' with '502'
-500 502 0
c Var 'x_00004_00007' direct represents '4' with '503'
500 -502 503 0
-503 502 0
-503 -500 0
c Var 'x_00004_00007' order represents '5' with '504'
-502 504 0
c Var 'x_00004_00007' direct represents '5' with '505'
502 -504 505 0
-505 504 0
-505 -502 0
c Var 'x_00004_00007' order represents '6' with '506'
-504 506 0
c Var 'x_00004_00007' direct represents '6' with '507'
504 -506 507 0
-507 506 0
-507 -504 0
c Var 'x_00004_00007' order represents '7' with '508'
-506 508 0
c Var 'x_00004_00007' direct represents '7' with '509'
506 -508 509 0
-509 508 0
-509 -506 0
c Var 'x_00004_00007' order represents '8' with '510'
-508 510 0
c Var 'x_00004_00007' direct represents '8' with '511'
508 -510 511 0
-511 510 0
-511 -508 0
c Var 'x_00004_00007' direct represents '9' with '-510'
497 499 501 503 505 507 509 511 -510 0
c Encoding variable: x_00004_00008 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00004_00008' order represents '1' with '512'
c Var 'x_00004_00008' direct represents '1' with '512'
c Var 'x_00004_00008' order represents '2' with '513'
-512 513 0
c Var 'x_00004_00008' direct represents '2' with '514'
512 -513 514 0
-514 513 0
-514 -512 0
c Var 'x_00004_00008' order represents '3' with '515'
-513 515 0
c Var 'x_00004_00008' direct represents '3' with '516'
513 -515 516 0
-516 515 0
-516 -513 0
c Var 'x_00004_00008' order represents '4' with '517'
-515 517 0
c Var 'x_00004_00008' direct represents '4' with '518'
515 -517 518 0
-518 517 0
-518 -515 0
c Var 'x_00004_00008' order represents '5' with '519'
-517 519 0
c Var 'x_00004_00008' direct represents '5' with '520'
517 -519 520 0
-520 519 0
-520 -517 0
c Var 'x_00004_00008' order represents '6' with '521'
-519 521 0
c Var 'x_00004_00008' direct represents '6' with '522'
519 -521 522 0
-522 521 0
-522 -519 0
c Var 'x_00004_00008' order represents '7' with '523'
-521 523 0
c Var 'x_00004_00008' direct represents '7' with '524'
521 -523 524 0
-524 523 0
-524 -521 0
c Var 'x_00004_00008' order represents '8' with '525'
-523 525 0
c Var 'x_00004_00008' direct represents '8' with '526'
523 -525 526 0
-526 525 0
-526 -523 0
c Var 'x_00004_00008' direct represents '9' with '-525'
512 514 516 518 520 522 524 526 -525 0
c Encoding variable: x_00004_00009 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00004_00009' order represents '1' with '527'
c Var 'x_00004_00009' direct represents '1' with '527'
c Var 'x_00004_00009' order represents '2' with '528'
-527 528 0
c Var 'x_00004_00009' direct represents '2' with '529'
527 -528 529 0
-529 528 0
-529 -527 0
c Var 'x_00004_00009' order represents '3' with '530'
-528 530 0
c Var 'x_00004_00009' direct represents '3' with '531'
528 -530 531 0
-531 530 0
-531 -528 0
c Var 'x_00004_00009' order represents '4' with '532'
-530 532 0
c Var 'x_00004_00009' direct represents '4' with '533'
530 -532 533 0
-533 532 0
-533 -530 0
c Var 'x_00004_00009' order represents '5' with '534'
-532 534 0
c Var 'x_00004_00009' direct represents '5' with '535'
532 -534 535 0
-535 534 0
-535 -532 0
c Var 'x_00004_00009' order represents '6' with '536'
-534 536 0
c Var 'x_00004_00009' direct represents '6' with '537'
534 -536 537 0
-537 536 0
-537 -534 0
c Var 'x_00004_00009' order represents '7' with '538'
-536 538 0
c Var 'x_00004_00009' direct represents '7' with '539'
536 -538 539 0
-539 538 0
-539 -536 0
c Var 'x_00004_00009' order represents '8' with '540'
-538 540 0
c Var 'x_00004_00009' direct represents '8' with '541'
538 -540 541 0
-541 540 0
-541 -538 0
c Var 'x_00004_00009' direct represents '9' with '-540'
527 529 531 533 535 537 539 541 -540 0
c Encoding variable: x_00005_00001 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00005_00001' order represents '1' with '542'
c Var 'x_00005_00001' direct represents '1' with '542'
c Var 'x_00005_00001' order represents '2' with '543'
-542 543 0
c Var 'x_00005_00001' direct represents '2' with '544'
542 -543 544 0
-544 543 0
-544 -542 0
c Var 'x_00005_00001' order represents '3' with '545'
-543 545 0
c Var 'x_00005_00001' direct represents '3' with '546'
543 -545 546 0
-546 545 0
-546 -543 0
c Var 'x_00005_00001' order represents '4' with '547'
-545 547 0
c Var 'x_00005_00001' direct represents '4' with '548'
545 -547 548 0
-548 547 0
-548 -545 0
c Var 'x_00005_00001' order represents '5' with '549'
-547 549 0
c Var 'x_00005_00001' direct represents '5' with '550'
547 -549 550 0
-550 549 0
-550 -547 0
c Var 'x_00005_00001' order represents '6' with '551'
-549 551 0
c Var 'x_00005_00001' direct represents '6' with '552'
549 -551 552 0
-552 551 0
-552 -549 0
c Var 'x_00005_00001' order represents '7' with '553'
-551 553 0
c Var 'x_00005_00001' direct represents '7' with '554'
551 -553 554 0
-554 553 0
-554 -551 0
c Var 'x_00005_00001' order represents '8' with '555'
-553 555 0
c Var 'x_00005_00001' direct represents '8' with '556'
553 -555 556 0
-556 555 0
-556 -553 0
c Var 'x_00005_00001' direct represents '9' with '-555'
542 544 546 548 550 552 554 556 -555 0
c Encoding variable: x_00005_00002 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00005_00002' order represents '1' with '557'
c Var 'x_00005_00002' direct represents '1' with '557'
c Var 'x_00005_00002' order represents '2' with '558'
-557 558 0
c Var 'x_00005_00002' direct represents '2' with '559'
557 -558 559 0
-559 558 0
-559 -557 0
c Var 'x_00005_00002' order represents '3' with '560'
-558 560 0
c Var 'x_00005_00002' direct represents '3' with '561'
558 -560 561 0
-561 560 0
-561 -558 0
c Var 'x_00005_00002' order represents '4' with '562'
-560 562 0
c Var 'x_00005_00002' direct represents '4' with '563'
560 -562 563 0
-563 562 0
-563 -560 0
c Var 'x_00005_00002' order represents '5' with '564'
-562 564 0
c Var 'x_00005_00002' direct represents '5' with '565'
562 -564 565 0
-565 564 0
-565 -562 0
c Var 'x_00005_00002' order represents '6' with '566'
-564 566 0
c Var 'x_00005_00002' direct represents '6' with '567'
564 -566 567 0
-567 566 0
-567 -564 0
c Var 'x_00005_00002' order represents '7' with '568'
-566 568 0
c Var 'x_00005_00002' direct represents '7' with '569'
566 -568 569 0
-569 568 0
-569 -566 0
c Var 'x_00005_00002' order represents '8' with '570'
-568 570 0
c Var 'x_00005_00002' direct represents '8' with '571'
568 -570 571 0
-571 570 0
-571 -568 0
c Var 'x_00005_00002' direct represents '9' with '-570'
557 559 561 563 565 567 569 571 -570 0
c Encoding variable: x_00005_00003 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00005_00003' order represents '1' with '572'
c Var 'x_00005_00003' direct represents '1' with '572'
c Var 'x_00005_00003' order represents '2' with '573'
-572 573 0
c Var 'x_00005_00003' direct represents '2' with '574'
572 -573 574 0
-574 573 0
-574 -572 0
c Var 'x_00005_00003' order represents '3' with '575'
-573 575 0
c Var 'x_00005_00003' direct represents '3' with '576'
573 -575 576 0
-576 575 0
-576 -573 0
c Var 'x_00005_00003' order represents '4' with '577'
-575 577 0
c Var 'x_00005_00003' direct represents '4' with '578'
575 -577 578 0
-578 577 0
-578 -575 0
c Var 'x_00005_00003' order represents '5' with '579'
-577 579 0
c Var 'x_00005_00003' direct represents '5' with '580'
577 -579 580 0
-580 579 0
-580 -577 0
c Var 'x_00005_00003' order represents '6' with '581'
-579 581 0
c Var 'x_00005_00003' direct represents '6' with '582'
579 -581 582 0
-582 581 0
-582 -579 0
c Var 'x_00005_00003' order represents '7' with '583'
-581 583 0
c Var 'x_00005_00003' direct represents '7' with '584'
581 -583 584 0
-584 583 0
-584 -581 0
c Var 'x_00005_00003' order represents '8' with '585'
-583 585 0
c Var 'x_00005_00003' direct represents '8' with '586'
583 -585 586 0
-586 585 0
-586 -583 0
c Var 'x_00005_00003' direct represents '9' with '-585'
572 574 576 578 580 582 584 586 -585 0
c Encoding variable: x_00005_00004 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00005_00004' order represents '1' with '587'
c Var 'x_00005_00004' direct represents '1' with '587'
c Var 'x_00005_00004' order represents '2' with '588'
-587 588 0
c Var 'x_00005_00004' direct represents '2' with '589'
587 -588 589 0
-589 588 0
-589 -587 0
c Var 'x_00005_00004' order represents '3' with '590'
-588 590 0
c Var 'x_00005_00004' direct represents '3' with '591'
588 -590 591 0
-591 590 0
-591 -588 0
c Var 'x_00005_00004' order represents '4' with '592'
-590 592 0
c Var 'x_00005_00004' direct represents '4' with '593'
590 -592 593 0
-593 592 0
-593 -590 0
c Var 'x_00005_00004' order represents '5' with '594'
-592 594 0
c Var 'x_00005_00004' direct represents '5' with '595'
592 -594 595 0
-595 594 0
-595 -592 0
c Var 'x_00005_00004' order represents '6' with '596'
-594 596 0
c Var 'x_00005_00004' direct represents '6' with '597'
594 -596 597 0
-597 596 0
-597 -594 0
c Var 'x_00005_00004' order represents '7' with '598'
-596 598 0
c Var 'x_00005_00004' direct represents '7' with '599'
596 -598 599 0
-599 598 0
-599 -596 0
c Var 'x_00005_00004' order represents '8' with '600'
-598 600 0
c Var 'x_00005_00004' direct represents '8' with '601'
598 -600 601 0
-601 600 0
-601 -598 0
c Var 'x_00005_00004' direct represents '9' with '-600'
587 589 591 593 595 597 599 601 -600 0
c Encoding variable: x_00005_00005 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00005_00005' order represents '1' with '602'
c Var 'x_00005_00005' direct represents '1' with '602'
c Var 'x_00005_00005' order represents '2' with '603'
-602 603 0
c Var 'x_00005_00005' direct represents '2' with '604'
602 -603 604 0
-604 603 0
-604 -602 0
c Var 'x_00005_00005' order represents '3' with '605'
-603 605 0
c Var 'x_00005_00005' direct represents '3' with '606'
603 -605 606 0
-606 605 0
-606 -603 0
c Var 'x_00005_00005' order represents '4' with '607'
-605 607 0
c Var 'x_00005_00005' direct represents '4' with '608'
605 -607 608 0
-608 607 0
-608 -605 0
c Var 'x_00005_00005' order represents '5' with '609'
-607 609 0
c Var 'x_00005_00005' direct represents '5' with '610'
607 -609 610 0
-610 609 0
-610 -607 0
c Var 'x_00005_00005' order represents '6' with '611'
-609 611 0
c Var 'x_00005_00005' direct represents '6' with '612'
609 -611 612 0
-612 611 0
-612 -609 0
c Var 'x_00005_00005' order represents '7' with '613'
-611 613 0
c Var 'x_00005_00005' direct represents '7' with '614'
611 -613 614 0
-614 613 0
-614 -611 0
c Var 'x_00005_00005' order represents '8' with '615'
-613 615 0
c Var 'x_00005_00005' direct represents '8' with '616'
613 -615 616 0
-616 615 0
-616 -613 0
c Var 'x_00005_00005' direct represents '9' with '-615'
602 604 606 608 610 612 614 616 -615 0
c Encoding variable: x_00005_00006 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00005_00006' order represents '1' with '617'
c Var 'x_00005_00006' direct represents '1' with '617'
c Var 'x_00005_00006' order represents '2' with '618'
-617 618 0
c Var 'x_00005_00006' direct represents '2' with '619'
617 -618 619 0
-619 618 0
-619 -617 0
c Var 'x_00005_00006' order represents '3' with '620'
-618 620 0
c Var 'x_00005_00006' direct represents '3' with '621'
618 -620 621 0
-621 620 0
-621 -618 0
c Var 'x_00005_00006' order represents '4' with '622'
-620 622 0
c Var 'x_00005_00006' direct represents '4' with '623'
620 -622 623 0
-623 622 0
-623 -620 0
c Var 'x_00005_00006' order represents '5' with '624'
-622 624 0
c Var 'x_00005_00006' direct represents '5' with '625'
622 -624 625 0
-625 624 0
-625 -622 0
c Var 'x_00005_00006' order represents '6' with '626'
-624 626 0
c Var 'x_00005_00006' direct represents '6' with '627'
624 -626 627 0
-627 626 0
-627 -624 0
c Var 'x_00005_00006' order represents '7' with '628'
-626 628 0
c Var 'x_00005_00006' direct represents '7' with '629'
626 -628 629 0
-629 628 0
-629 -626 0
c Var 'x_00005_00006' order represents '8' with '630'
-628 630 0
c Var 'x_00005_00006' direct represents '8' with '631'
628 -630 631 0
-631 630 0
-631 -628 0
c Var 'x_00005_00006' direct represents '9' with '-630'
617 619 621 623 625 627 629 631 -630 0
c Encoding variable: x_00005_00007 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00005_00007' order represents '1' with '632'
c Var 'x_00005_00007' direct represents '1' with '632'
c Var 'x_00005_00007' order represents '2' with '633'
-632 633 0
c Var 'x_00005_00007' direct represents '2' with '634'
632 -633 634 0
-634 633 0
-634 -632 0
c Var 'x_00005_00007' order represents '3' with '635'
-633 635 0
c Var 'x_00005_00007' direct represents '3' with '636'
633 -635 636 0
-636 635 0
-636 -633 0
c Var 'x_00005_00007' order represents '4' with '637'
-635 637 0
c Var 'x_00005_00007' direct represents '4' with '638'
635 -637 638 0
-638 637 0
-638 -635 0
c Var 'x_00005_00007' order represents '5' with '639'
-637 639 0
c Var 'x_00005_00007' direct represents '5' with '640'
637 -639 640 0
-640 639 0
-640 -637 0
c Var 'x_00005_00007' order represents '6' with '641'
-639 641 0
c Var 'x_00005_00007' direct represents '6' with '642'
639 -641 642 0
-642 641 0
-642 -639 0
c Var 'x_00005_00007' order represents '7' with '643'
-641 643 0
c Var 'x_00005_00007' direct represents '7' with '644'
641 -643 644 0
-644 643 0
-644 -641 0
c Var 'x_00005_00007' order represents '8' with '645'
-643 645 0
c Var 'x_00005_00007' direct represents '8' with '646'
643 -645 646 0
-646 645 0
-646 -643 0
c Var 'x_00005_00007' direct represents '9' with '-645'
632 634 636 638 640 642 644 646 -645 0
c Encoding variable: x_00005_00008 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00005_00008' order represents '1' with '647'
c Var 'x_00005_00008' direct represents '1' with '647'
c Var 'x_00005_00008' order represents '2' with '648'
-647 648 0
c Var 'x_00005_00008' direct represents '2' with '649'
647 -648 649 0
-649 648 0
-649 -647 0
c Var 'x_00005_00008' order represents '3' with '650'
-648 650 0
c Var 'x_00005_00008' direct represents '3' with '651'
648 -650 651 0
-651 650 0
-651 -648 0
c Var 'x_00005_00008' order represents '4' with '652'
-650 652 0
c Var 'x_00005_00008' direct represents '4' with '653'
650 -652 653 0
-653 652 0
-653 -650 0
c Var 'x_00005_00008' order represents '5' with '654'
-652 654 0
c Var 'x_00005_00008' direct represents '5' with '655'
652 -654 655 0
-655 654 0
-655 -652 0
c Var 'x_00005_00008' order represents '6' with '656'
-654 656 0
c Var 'x_00005_00008' direct represents '6' with '657'
654 -656 657 0
-657 656 0
-657 -654 0
c Var 'x_00005_00008' order represents '7' with '658'
-656 658 0
c Var 'x_00005_00008' direct represents '7' with '659'
656 -658 659 0
-659 658 0
-659 -656 0
c Var 'x_00005_00008' order represents '8' with '660'
-658 660 0
c Var 'x_00005_00008' direct represents '8' with '661'
658 -660 661 0
-661 660 0
-661 -658 0
c Var 'x_00005_00008' direct represents '9' with '-660'
647 649 651 653 655 657 659 661 -660 0
c Encoding variable: x_00005_00009 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00005_00009' order represents '1' with '662'
c Var 'x_00005_00009' direct represents '1' with '662'
c Var 'x_00005_00009' order represents '2' with '663'
-662 663 0
c Var 'x_00005_00009' direct represents '2' with '664'
662 -663 664 0
-664 663 0
-664 -662 0
c Var 'x_00005_00009' order represents '3' with '665'
-663 665 0
c Var 'x_00005_00009' direct represents '3' with '666'
663 -665 666 0
-666 665 0
-666 -663 0
c Var 'x_00005_00009' order represents '4' with '667'
-665 667 0
c Var 'x_00005_00009' direct represents '4' with '668'
665 -667 668 0
-668 667 0
-668 -665 0
c Var 'x_00005_00009' order represents '5' with '669'
-667 669 0
c Var 'x_00005_00009' direct represents '5' with '670'
667 -669 670 0
-670 669 0
-670 -667 0
c Var 'x_00005_00009' order represents '6' with '671'
-669 671 0
c Var 'x_00005_00009' direct represents '6' with '672'
669 -671 672 0
-672 671 0
-672 -669 0
c Var 'x_00005_00009' order represents '7' with '673'
-671 673 0
c Var 'x_00005_00009' direct represents '7' with '674'
671 -673 674 0
-674 673 0
-674 -671 0
c Var 'x_00005_00009' order represents '8' with '675'
-673 675 0
c Var 'x_00005_00009' direct represents '8' with '676'
673 -675 676 0
-676 675 0
-676 -673 0
c Var 'x_00005_00009' direct represents '9' with '-675'
662 664 666 668 670 672 674 676 -675 0
c Encoding variable: x_00006_00001 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00006_00001' order represents '1' with '677'
c Var 'x_00006_00001' direct represents '1' with '677'
c Var 'x_00006_00001' order represents '2' with '678'
-677 678 0
c Var 'x_00006_00001' direct represents '2' with '679'
677 -678 679 0
-679 678 0
-679 -677 0
c Var 'x_00006_00001' order represents '3' with '680'
-678 680 0
c Var 'x_00006_00001' direct represents '3' with '681'
678 -680 681 0
-681 680 0
-681 -678 0
c Var 'x_00006_00001' order represents '4' with '682'
-680 682 0
c Var 'x_00006_00001' direct represents '4' with '683'
680 -682 683 0
-683 682 0
-683 -680 0
c Var 'x_00006_00001' order represents '5' with '684'
-682 684 0
c Var 'x_00006_00001' direct represents '5' with '685'
682 -684 685 0
-685 684 0
-685 -682 0
c Var 'x_00006_00001' order represents '6' with '686'
-684 686 0
c Var 'x_00006_00001' direct represents '6' with '687'
684 -686 687 0
-687 686 0
-687 -684 0
c Var 'x_00006_00001' order represents '7' with '688'
-686 688 0
c Var 'x_00006_00001' direct represents '7' with '689'
686 -688 689 0
-689 688 0
-689 -686 0
c Var 'x_00006_00001' order represents '8' with '690'
-688 690 0
c Var 'x_00006_00001' direct represents '8' with '691'
688 -690 691 0
-691 690 0
-691 -688 0
c Var 'x_00006_00001' direct represents '9' with '-690'
677 679 681 683 685 687 689 691 -690 0
c Encoding variable: x_00006_00002 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00006_00002' order represents '1' with '692'
c Var 'x_00006_00002' direct represents '1' with '692'
c Var 'x_00006_00002' order represents '2' with '693'
-692 693 0
c Var 'x_00006_00002' direct represents '2' with '694'
692 -693 694 0
-694 693 0
-694 -692 0
c Var 'x_00006_00002' order represents '3' with '695'
-693 695 0
c Var 'x_00006_00002' direct represents '3' with '696'
693 -695 696 0
-696 695 0
-696 -693 0
c Var 'x_00006_00002' order represents '4' with '697'
-695 697 0
c Var 'x_00006_00002' direct represents '4' with '698'
695 -697 698 0
-698 697 0
-698 -695 0
c Var 'x_00006_00002' order represents '5' with '699'
-697 699 0
c Var 'x_00006_00002' direct represents '5' with '700'
697 -699 700 0
-700 699 0
-700 -697 0
c Var 'x_00006_00002' order represents '6' with '701'
-699 701 0
c Var 'x_00006_00002' direct represents '6' with '702'
699 -701 702 0
-702 701 0
-702 -699 0
c Var 'x_00006_00002' order represents '7' with '703'
-701 703 0
c Var 'x_00006_00002' direct represents '7' with '704'
701 -703 704 0
-704 703 0
-704 -701 0
c Var 'x_00006_00002' order represents '8' with '705'
-703 705 0
c Var 'x_00006_00002' direct represents '8' with '706'
703 -705 706 0
-706 705 0
-706 -703 0
c Var 'x_00006_00002' direct represents '9' with '-705'
692 694 696 698 700 702 704 706 -705 0
c Encoding variable: x_00006_00003 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00006_00003' order represents '1' with '707'
c Var 'x_00006_00003' direct represents '1' with '707'
c Var 'x_00006_00003' order represents '2' with '708'
-707 708 0
c Var 'x_00006_00003' direct represents '2' with '709'
707 -708 709 0
-709 708 0
-709 -707 0
c Var 'x_00006_00003' order represents '3' with '710'
-708 710 0
c Var 'x_00006_00003' direct represents '3' with '711'
708 -710 711 0
-711 710 0
-711 -708 0
c Var 'x_00006_00003' order represents '4' with '712'
-710 712 0
c Var 'x_00006_00003' direct represents '4' with '713'
710 -712 713 0
-713 712 0
-713 -710 0
c Var 'x_00006_00003' order represents '5' with '714'
-712 714 0
c Var 'x_00006_00003' direct represents '5' with '715'
712 -714 715 0
-715 714 0
-715 -712 0
c Var 'x_00006_00003' order represents '6' with '716'
-714 716 0
c Var 'x_00006_00003' direct represents '6' with '717'
714 -716 717 0
-717 716 0
-717 -714 0
c Var 'x_00006_00003' order represents '7' with '718'
-716 718 0
c Var 'x_00006_00003' direct represents '7' with '719'
716 -718 719 0
-719 718 0
-719 -716 0
c Var 'x_00006_00003' order represents '8' with '720'
-718 720 0
c Var 'x_00006_00003' direct represents '8' with '721'
718 -720 721 0
-721 720 0
-721 -718 0
c Var 'x_00006_00003' direct represents '9' with '-720'
707 709 711 713 715 717 719 721 -720 0
c Encoding variable: x_00006_00004 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00006_00004' order represents '1' with '722'
c Var 'x_00006_00004' direct represents '1' with '722'
c Var 'x_00006_00004' order represents '2' with '723'
-722 723 0
c Var 'x_00006_00004' direct represents '2' with '724'
722 -723 724 0
-724 723 0
-724 -722 0
c Var 'x_00006_00004' order represents '3' with '725'
-723 725 0
c Var 'x_00006_00004' direct represents '3' with '726'
723 -725 726 0
-726 725 0
-726 -723 0
c Var 'x_00006_00004' order represents '4' with '727'
-725 727 0
c Var 'x_00006_00004' direct represents '4' with '728'
725 -727 728 0
-728 727 0
-728 -725 0
c Var 'x_00006_00004' order represents '5' with '729'
-727 729 0
c Var 'x_00006_00004' direct represents '5' with '730'
727 -729 730 0
-730 729 0
-730 -727 0
c Var 'x_00006_00004' order represents '6' with '731'
-729 731 0
c Var 'x_00006_00004' direct represents '6' with '732'
729 -731 732 0
-732 731 0
-732 -729 0
c Var 'x_00006_00004' order represents '7' with '733'
-731 733 0
c Var 'x_00006_00004' direct represents '7' with '734'
731 -733 734 0
-734 733 0
-734 -731 0
c Var 'x_00006_00004' order represents '8' with '735'
-733 735 0
c Var 'x_00006_00004' direct represents '8' with '736'
733 -735 736 0
-736 735 0
-736 -733 0
c Var 'x_00006_00004' direct represents '9' with '-735'
722 724 726 728 730 732 734 736 -735 0
c Encoding variable: x_00006_00005 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00006_00005' order represents '1' with '737'
c Var 'x_00006_00005' direct represents '1' with '737'
c Var 'x_00006_00005' order represents '2' with '738'
-737 738 0
c Var 'x_00006_00005' direct represents '2' with '739'
737 -738 739 0
-739 738 0
-739 -737 0
c Var 'x_00006_00005' order represents '3' with '740'
-738 740 0
c Var 'x_00006_00005' direct represents '3' with '741'
738 -740 741 0
-741 740 0
-741 -738 0
c Var 'x_00006_00005' order represents '4' with '742'
-740 742 0
c Var 'x_00006_00005' direct represents '4' with '743'
740 -742 743 0
-743 742 0
-743 -740 0
c Var 'x_00006_00005' order represents '5' with '744'
-742 744 0
c Var 'x_00006_00005' direct represents '5' with '745'
742 -744 745 0
-745 744 0
-745 -742 0
c Var 'x_00006_00005' order represents '6' with '746'
-744 746 0
c Var 'x_00006_00005' direct represents '6' with '747'
744 -746 747 0
-747 746 0
-747 -744 0
c Var 'x_00006_00005' order represents '7' with '748'
-746 748 0
c Var 'x_00006_00005' direct represents '7' with '749'
746 -748 749 0
-749 748 0
-749 -746 0
c Var 'x_00006_00005' order represents '8' with '750'
-748 750 0
c Var 'x_00006_00005' direct represents '8' with '751'
748 -750 751 0
-751 750 0
-751 -748 0
c Var 'x_00006_00005' direct represents '9' with '-750'
737 739 741 743 745 747 749 751 -750 0
c Encoding variable: x_00006_00006 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00006_00006' order represents '1' with '752'
c Var 'x_00006_00006' direct represents '1' with '752'
c Var 'x_00006_00006' order represents '2' with '753'
-752 753 0
c Var 'x_00006_00006' direct represents '2' with '754'
752 -753 754 0
-754 753 0
-754 -752 0
c Var 'x_00006_00006' order represents '3' with '755'
-753 755 0
c Var 'x_00006_00006' direct represents '3' with '756'
753 -755 756 0
-756 755 0
-756 -753 0
c Var 'x_00006_00006' order represents '4' with '757'
-755 757 0
c Var 'x_00006_00006' direct represents '4' with '758'
755 -757 758 0
-758 757 0
-758 -755 0
c Var 'x_00006_00006' order represents '5' with '759'
-757 759 0
c Var 'x_00006_00006' direct represents '5' with '760'
757 -759 760 0
-760 759 0
-760 -757 0
c Var 'x_00006_00006' order represents '6' with '761'
-759 761 0
c Var 'x_00006_00006' direct represents '6' with '762'
759 -761 762 0
-762 761 0
-762 -759 0
c Var 'x_00006_00006' order represents '7' with '763'
-761 763 0
c Var 'x_00006_00006' direct represents '7' with '764'
761 -763 764 0
-764 763 0
-764 -761 0
c Var 'x_00006_00006' order represents '8' with '765'
-763 765 0
c Var 'x_00006_00006' direct represents '8' with '766'
763 -765 766 0
-766 765 0
-766 -763 0
c Var 'x_00006_00006' direct represents '9' with '-765'
752 754 756 758 760 762 764 766 -765 0
c Encoding variable: x_00006_00007 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00006_00007' order represents '1' with '767'
c Var 'x_00006_00007' direct represents '1' with '767'
c Var 'x_00006_00007' order represents '2' with '768'
-767 768 0
c Var 'x_00006_00007' direct represents '2' with '769'
767 -768 769 0
-769 768 0
-769 -767 0
c Var 'x_00006_00007' order represents '3' with '770'
-768 770 0
c Var 'x_00006_00007' direct represents '3' with '771'
768 -770 771 0
-771 770 0
-771 -768 0
c Var 'x_00006_00007' order represents '4' with '772'
-770 772 0
c Var 'x_00006_00007' direct represents '4' with '773'
770 -772 773 0
-773 772 0
-773 -770 0
c Var 'x_00006_00007' order represents '5' with '774'
-772 774 0
c Var 'x_00006_00007' direct represents '5' with '775'
772 -774 775 0
-775 774 0
-775 -772 0
c Var 'x_00006_00007' order represents '6' with '776'
-774 776 0
c Var 'x_00006_00007' direct represents '6' with '777'
774 -776 777 0
-777 776 0
-777 -774 0
c Var 'x_00006_00007' order represents '7' with '778'
-776 778 0
c Var 'x_00006_00007' direct represents '7' with '779'
776 -778 779 0
-779 778 0
-779 -776 0
c Var 'x_00006_00007' order represents '8' with '780'
-778 780 0
c Var 'x_00006_00007' direct represents '8' with '781'
778 -780 781 0
-781 780 0
-781 -778 0
c Var 'x_00006_00007' direct represents '9' with '-780'
767 769 771 773 775 777 779 781 -780 0
c Encoding variable: x_00006_00008 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00006_00008' order represents '1' with '782'
c Var 'x_00006_00008' direct represents '1' with '782'
c Var 'x_00006_00008' order represents '2' with '783'
-782 783 0
c Var 'x_00006_00008' direct represents '2' with '784'
782 -783 784 0
-784 783 0
-784 -782 0
c Var 'x_00006_00008' order represents '3' with '785'
-783 785 0
c Var 'x_00006_00008' direct represents '3' with '786'
783 -785 786 0
-786 785 0
-786 -783 0
c Var 'x_00006_00008' order represents '4' with '787'
-785 787 0
c Var 'x_00006_00008' direct represents '4' with '788'
785 -787 788 0
-788 787 0
-788 -785 0
c Var 'x_00006_00008' order represents '5' with '789'
-787 789 0
c Var 'x_00006_00008' direct represents '5' with '790'
787 -789 790 0
-790 789 0
-790 -787 0
c Var 'x_00006_00008' order represents '6' with '791'
-789 791 0
c Var 'x_00006_00008' direct represents '6' with '792'
789 -791 792 0
-792 791 0
-792 -789 0
c Var 'x_00006_00008' order represents '7' with '793'
-791 793 0
c Var 'x_00006_00008' direct represents '7' with '794'
791 -793 794 0
-794 793 0
-794 -791 0
c Var 'x_00006_00008' order represents '8' with '795'
-793 795 0
c Var 'x_00006_00008' direct represents '8' with '796'
793 -795 796 0
-796 795 0
-796 -793 0
c Var 'x_00006_00008' direct represents '9' with '-795'
782 784 786 788 790 792 794 796 -795 0
c Encoding variable: x_00006_00009 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00006_00009' order represents '1' with '797'
c Var 'x_00006_00009' direct represents '1' with '797'
c Var 'x_00006_00009' order represents '2' with '798'
-797 798 0
c Var 'x_00006_00009' direct represents '2' with '799'
797 -798 799 0
-799 798 0
-799 -797 0
c Var 'x_00006_00009' order represents '3' with '800'
-798 800 0
c Var 'x_00006_00009' direct represents '3' with '801'
798 -800 801 0
-801 800 0
-801 -798 0
c Var 'x_00006_00009' order represents '4' with '802'
-800 802 0
c Var 'x_00006_00009' direct represents '4' with '803'
800 -802 803 0
-803 802 0
-803 -800 0
c Var 'x_00006_00009' order represents '5' with '804'
-802 804 0
c Var 'x_00006_00009' direct represents '5' with '805'
802 -804 805 0
-805 804 0
-805 -802 0
c Var 'x_00006_00009' order represents '6' with '806'
-804 806 0
c Var 'x_00006_00009' direct represents '6' with '807'
804 -806 807 0
-807 806 0
-807 -804 0
c Var 'x_00006_00009' order represents '7' with '808'
-806 808 0
c Var 'x_00006_00009' direct represents '7' with '809'
806 -808 809 0
-809 808 0
-809 -806 0
c Var 'x_00006_00009' order represents '8' with '810'
-808 810 0
c Var 'x_00006_00009' direct represents '8' with '811'
808 -810 811 0
-811 810 0
-811 -808 0
c Var 'x_00006_00009' direct represents '9' with '-810'
797 799 801 803 805 807 809 811 -810 0
c Encoding variable: x_00007_00001 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00007_00001' order represents '1' with '812'
c Var 'x_00007_00001' direct represents '1' with '812'
c Var 'x_00007_00001' order represents '2' with '813'
-812 813 0
c Var 'x_00007_00001' direct represents '2' with '814'
812 -813 814 0
-814 813 0
-814 -812 0
c Var 'x_00007_00001' order represents '3' with '815'
-813 815 0
c Var 'x_00007_00001' direct represents '3' with '816'
813 -815 816 0
-816 815 0
-816 -813 0
c Var 'x_00007_00001' order represents '4' with '817'
-815 817 0
c Var 'x_00007_00001' direct represents '4' with '818'
815 -817 818 0
-818 817 0
-818 -815 0
c Var 'x_00007_00001' order represents '5' with '819'
-817 819 0
c Var 'x_00007_00001' direct represents '5' with '820'
817 -819 820 0
-820 819 0
-820 -817 0
c Var 'x_00007_00001' order represents '6' with '821'
-819 821 0
c Var 'x_00007_00001' direct represents '6' with '822'
819 -821 822 0
-822 821 0
-822 -819 0
c Var 'x_00007_00001' order represents '7' with '823'
-821 823 0
c Var 'x_00007_00001' direct represents '7' with '824'
821 -823 824 0
-824 823 0
-824 -821 0
c Var 'x_00007_00001' order represents '8' with '825'
-823 825 0
c Var 'x_00007_00001' direct represents '8' with '826'
823 -825 826 0
-826 825 0
-826 -823 0
c Var 'x_00007_00001' direct represents '9' with '-825'
812 814 816 818 820 822 824 826 -825 0
c Encoding variable: x_00007_00002 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00007_00002' order represents '1' with '827'
c Var 'x_00007_00002' direct represents '1' with '827'
c Var 'x_00007_00002' order represents '2' with '828'
-827 828 0
c Var 'x_00007_00002' direct represents '2' with '829'
827 -828 829 0
-829 828 0
-829 -827 0
c Var 'x_00007_00002' order represents '3' with '830'
-828 830 0
c Var 'x_00007_00002' direct represents '3' with '831'
828 -830 831 0
-831 830 0
-831 -828 0
c Var 'x_00007_00002' order represents '4' with '832'
-830 832 0
c Var 'x_00007_00002' direct represents '4' with '833'
830 -832 833 0
-833 832 0
-833 -830 0
c Var 'x_00007_00002' order represents '5' with '834'
-832 834 0
c Var 'x_00007_00002' direct represents '5' with '835'
832 -834 835 0
-835 834 0
-835 -832 0
c Var 'x_00007_00002' order represents '6' with '836'
-834 836 0
c Var 'x_00007_00002' direct represents '6' with '837'
834 -836 837 0
-837 836 0
-837 -834 0
c Var 'x_00007_00002' order represents '7' with '838'
-836 838 0
c Var 'x_00007_00002' direct represents '7' with '839'
836 -838 839 0
-839 838 0
-839 -836 0
c Var 'x_00007_00002' order represents '8' with '840'
-838 840 0
c Var 'x_00007_00002' direct represents '8' with '841'
838 -840 841 0
-841 840 0
-841 -838 0
c Var 'x_00007_00002' direct represents '9' with '-840'
827 829 831 833 835 837 839 841 -840 0
c Encoding variable: x_00007_00003 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00007_00003' order represents '1' with '842'
c Var 'x_00007_00003' direct represents '1' with '842'
c Var 'x_00007_00003' order represents '2' with '843'
-842 843 0
c Var 'x_00007_00003' direct represents '2' with '844'
842 -843 844 0
-844 843 0
-844 -842 0
c Var 'x_00007_00003' order represents '3' with '845'
-843 845 0
c Var 'x_00007_00003' direct represents '3' with '846'
843 -845 846 0
-846 845 0
-846 -843 0
c Var 'x_00007_00003' order represents '4' with '847'
-845 847 0
c Var 'x_00007_00003' direct represents '4' with '848'
845 -847 848 0
-848 847 0
-848 -845 0
c Var 'x_00007_00003' order represents '5' with '849'
-847 849 0
c Var 'x_00007_00003' direct represents '5' with '850'
847 -849 850 0
-850 849 0
-850 -847 0
c Var 'x_00007_00003' order represents '6' with '851'
-849 851 0
c Var 'x_00007_00003' direct represents '6' with '852'
849 -851 852 0
-852 851 0
-852 -849 0
c Var 'x_00007_00003' order represents '7' with '853'
-851 853 0
c Var 'x_00007_00003' direct represents '7' with '854'
851 -853 854 0
-854 853 0
-854 -851 0
c Var 'x_00007_00003' order represents '8' with '855'
-853 855 0
c Var 'x_00007_00003' direct represents '8' with '856'
853 -855 856 0
-856 855 0
-856 -853 0
c Var 'x_00007_00003' direct represents '9' with '-855'
842 844 846 848 850 852 854 856 -855 0
c Encoding variable: x_00007_00004 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00007_00004' order represents '1' with '857'
c Var 'x_00007_00004' direct represents '1' with '857'
c Var 'x_00007_00004' order represents '2' with '858'
-857 858 0
c Var 'x_00007_00004' direct represents '2' with '859'
857 -858 859 0
-859 858 0
-859 -857 0
c Var 'x_00007_00004' order represents '3' with '860'
-858 860 0
c Var 'x_00007_00004' direct represents '3' with '861'
858 -860 861 0
-861 860 0
-861 -858 0
c Var 'x_00007_00004' order represents '4' with '862'
-860 862 0
c Var 'x_00007_00004' direct represents '4' with '863'
860 -862 863 0
-863 862 0
-863 -860 0
c Var 'x_00007_00004' order represents '5' with '864'
-862 864 0
c Var 'x_00007_00004' direct represents '5' with '865'
862 -864 865 0
-865 864 0
-865 -862 0
c Var 'x_00007_00004' order represents '6' with '866'
-864 866 0
c Var 'x_00007_00004' direct represents '6' with '867'
864 -866 867 0
-867 866 0
-867 -864 0
c Var 'x_00007_00004' order represents '7' with '868'
-866 868 0
c Var 'x_00007_00004' direct represents '7' with '869'
866 -868 869 0
-869 868 0
-869 -866 0
c Var 'x_00007_00004' order represents '8' with '870'
-868 870 0
c Var 'x_00007_00004' direct represents '8' with '871'
868 -870 871 0
-871 870 0
-871 -868 0
c Var 'x_00007_00004' direct represents '9' with '-870'
857 859 861 863 865 867 869 871 -870 0
c Encoding variable: x_00007_00005 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00007_00005' order represents '1' with '872'
c Var 'x_00007_00005' direct represents '1' with '872'
c Var 'x_00007_00005' order represents '2' with '873'
-872 873 0
c Var 'x_00007_00005' direct represents '2' with '874'
872 -873 874 0
-874 873 0
-874 -872 0
c Var 'x_00007_00005' order represents '3' with '875'
-873 875 0
c Var 'x_00007_00005' direct represents '3' with '876'
873 -875 876 0
-876 875 0
-876 -873 0
c Var 'x_00007_00005' order represents '4' with '877'
-875 877 0
c Var 'x_00007_00005' direct represents '4' with '878'
875 -877 878 0
-878 877 0
-878 -875 0
c Var 'x_00007_00005' order represents '5' with '879'
-877 879 0
c Var 'x_00007_00005' direct represents '5' with '880'
877 -879 880 0
-880 879 0
-880 -877 0
c Var 'x_00007_00005' order represents '6' with '881'
-879 881 0
c Var 'x_00007_00005' direct represents '6' with '882'
879 -881 882 0
-882 881 0
-882 -879 0
c Var 'x_00007_00005' order represents '7' with '883'
-881 883 0
c Var 'x_00007_00005' direct represents '7' with '884'
881 -883 884 0
-884 883 0
-884 -881 0
c Var 'x_00007_00005' order represents '8' with '885'
-883 885 0
c Var 'x_00007_00005' direct represents '8' with '886'
883 -885 886 0
-886 885 0
-886 -883 0
c Var 'x_00007_00005' direct represents '9' with '-885'
872 874 876 878 880 882 884 886 -885 0
c Encoding variable: x_00007_00006 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00007_00006' order represents '1' with '887'
c Var 'x_00007_00006' direct represents '1' with '887'
c Var 'x_00007_00006' order represents '2' with '888'
-887 888 0
c Var 'x_00007_00006' direct represents '2' with '889'
887 -888 889 0
-889 888 0
-889 -887 0
c Var 'x_00007_00006' order represents '3' with '890'
-888 890 0
c Var 'x_00007_00006' direct represents '3' with '891'
888 -890 891 0
-891 890 0
-891 -888 0
c Var 'x_00007_00006' order represents '4' with '892'
-890 892 0
c Var 'x_00007_00006' direct represents '4' with '893'
890 -892 893 0
-893 892 0
-893 -890 0
c Var 'x_00007_00006' order represents '5' with '894'
-892 894 0
c Var 'x_00007_00006' direct represents '5' with '895'
892 -894 895 0
-895 894 0
-895 -892 0
c Var 'x_00007_00006' order represents '6' with '896'
-894 896 0
c Var 'x_00007_00006' direct represents '6' with '897'
894 -896 897 0
-897 896 0
-897 -894 0
c Var 'x_00007_00006' order represents '7' with '898'
-896 898 0
c Var 'x_00007_00006' direct represents '7' with '899'
896 -898 899 0
-899 898 0
-899 -896 0
c Var 'x_00007_00006' order represents '8' with '900'
-898 900 0
c Var 'x_00007_00006' direct represents '8' with '901'
898 -900 901 0
-901 900 0
-901 -898 0
c Var 'x_00007_00006' direct represents '9' with '-900'
887 889 891 893 895 897 899 901 -900 0
c Encoding variable: x_00007_00007 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00007_00007' order represents '1' with '902'
c Var 'x_00007_00007' direct represents '1' with '902'
c Var 'x_00007_00007' order represents '2' with '903'
-902 903 0
c Var 'x_00007_00007' direct represents '2' with '904'
902 -903 904 0
-904 903 0
-904 -902 0
c Var 'x_00007_00007' order represents '3' with '905'
-903 905 0
c Var 'x_00007_00007' direct represents '3' with '906'
903 -905 906 0
-906 905 0
-906 -903 0
c Var 'x_00007_00007' order represents '4' with '907'
-905 907 0
c Var 'x_00007_00007' direct represents '4' with '908'
905 -907 908 0
-908 907 0
-908 -905 0
c Var 'x_00007_00007' order represents '5' with '909'
-907 909 0
c Var 'x_00007_00007' direct represents '5' with '910'
907 -909 910 0
-910 909 0
-910 -907 0
c Var 'x_00007_00007' order represents '6' with '911'
-909 911 0
c Var 'x_00007_00007' direct represents '6' with '912'
909 -911 912 0
-912 911 0
-912 -909 0
c Var 'x_00007_00007' order represents '7' with '913'
-911 913 0
c Var 'x_00007_00007' direct represents '7' with '914'
911 -913 914 0
-914 913 0
-914 -911 0
c Var 'x_00007_00007' order represents '8' with '915'
-913 915 0
c Var 'x_00007_00007' direct represents '8' with '916'
913 -915 916 0
-916 915 0
-916 -913 0
c Var 'x_00007_00007' direct represents '9' with '-915'
902 904 906 908 910 912 914 916 -915 0
c Encoding variable: x_00007_00008 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00007_00008' order represents '1' with '917'
c Var 'x_00007_00008' direct represents '1' with '917'
c Var 'x_00007_00008' order represents '2' with '918'
-917 918 0
c Var 'x_00007_00008' direct represents '2' with '919'
917 -918 919 0
-919 918 0
-919 -917 0
c Var 'x_00007_00008' order represents '3' with '920'
-918 920 0
c Var 'x_00007_00008' direct represents '3' with '921'
918 -920 921 0
-921 920 0
-921 -918 0
c Var 'x_00007_00008' order represents '4' with '922'
-920 922 0
c Var 'x_00007_00008' direct represents '4' with '923'
920 -922 923 0
-923 922 0
-923 -920 0
c Var 'x_00007_00008' order represents '5' with '924'
-922 924 0
c Var 'x_00007_00008' direct represents '5' with '925'
922 -924 925 0
-925 924 0
-925 -922 0
c Var 'x_00007_00008' order represents '6' with '926'
-924 926 0
c Var 'x_00007_00008' direct represents '6' with '927'
924 -926 927 0
-927 926 0
-927 -924 0
c Var 'x_00007_00008' order represents '7' with '928'
-926 928 0
c Var 'x_00007_00008' direct represents '7' with '929'
926 -928 929 0
-929 928 0
-929 -926 0
c Var 'x_00007_00008' order represents '8' with '930'
-928 930 0
c Var 'x_00007_00008' direct represents '8' with '931'
928 -930 931 0
-931 930 0
-931 -928 0
c Var 'x_00007_00008' direct represents '9' with '-930'
917 919 921 923 925 927 929 931 -930 0
c Encoding variable: x_00007_00009 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00007_00009' order represents '1' with '932'
c Var 'x_00007_00009' direct represents '1' with '932'
c Var 'x_00007_00009' order represents '2' with '933'
-932 933 0
c Var 'x_00007_00009' direct represents '2' with '934'
932 -933 934 0
-934 933 0
-934 -932 0
c Var 'x_00007_00009' order represents '3' with '935'
-933 935 0
c Var 'x_00007_00009' direct represents '3' with '936'
933 -935 936 0
-936 935 0
-936 -933 0
c Var 'x_00007_00009' order represents '4' with '937'
-935 937 0
c Var 'x_00007_00009' direct represents '4' with '938'
935 -937 938 0
-938 937 0
-938 -935 0
c Var 'x_00007_00009' order represents '5' with '939'
-937 939 0
c Var 'x_00007_00009' direct represents '5' with '940'
937 -939 940 0
-940 939 0
-940 -937 0
c Var 'x_00007_00009' order represents '6' with '941'
-939 941 0
c Var 'x_00007_00009' direct represents '6' with '942'
939 -941 942 0
-942 941 0
-942 -939 0
c Var 'x_00007_00009' order represents '7' with '943'
-941 943 0
c Var 'x_00007_00009' direct represents '7' with '944'
941 -943 944 0
-944 943 0
-944 -941 0
c Var 'x_00007_00009' order represents '8' with '945'
-943 945 0
c Var 'x_00007_00009' direct represents '8' with '946'
943 -945 946 0
-946 945 0
-946 -943 0
c Var 'x_00007_00009' direct represents '9' with '-945'
932 934 936 938 940 942 944 946 -945 0
c Encoding variable: x_00008_00001 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00008_00001' order represents '1' with '947'
c Var 'x_00008_00001' direct represents '1' with '947'
c Var 'x_00008_00001' order represents '2' with '948'
-947 948 0
c Var 'x_00008_00001' direct represents '2' with '949'
947 -948 949 0
-949 948 0
-949 -947 0
c Var 'x_00008_00001' order represents '3' with '950'
-948 950 0
c Var 'x_00008_00001' direct represents '3' with '951'
948 -950 951 0
-951 950 0
-951 -948 0
c Var 'x_00008_00001' order represents '4' with '952'
-950 952 0
c Var 'x_00008_00001' direct represents '4' with '953'
950 -952 953 0
-953 952 0
-953 -950 0
c Var 'x_00008_00001' order represents '5' with '954'
-952 954 0
c Var 'x_00008_00001' direct represents '5' with '955'
952 -954 955 0
-955 954 0
-955 -952 0
c Var 'x_00008_00001' order represents '6' with '956'
-954 956 0
c Var 'x_00008_00001' direct represents '6' with '957'
954 -956 957 0
-957 956 0
-957 -954 0
c Var 'x_00008_00001' order represents '7' with '958'
-956 958 0
c Var 'x_00008_00001' direct represents '7' with '959'
956 -958 959 0
-959 958 0
-959 -956 0
c Var 'x_00008_00001' order represents '8' with '960'
-958 960 0
c Var 'x_00008_00001' direct represents '8' with '961'
958 -960 961 0
-961 960 0
-961 -958 0
c Var 'x_00008_00001' direct represents '9' with '-960'
947 949 951 953 955 957 959 961 -960 0
c Encoding variable: x_00008_00002 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00008_00002' order represents '1' with '962'
c Var 'x_00008_00002' direct represents '1' with '962'
c Var 'x_00008_00002' order represents '2' with '963'
-962 963 0
c Var 'x_00008_00002' direct represents '2' with '964'
962 -963 964 0
-964 963 0
-964 -962 0
c Var 'x_00008_00002' order represents '3' with '965'
-963 965 0
c Var 'x_00008_00002' direct represents '3' with '966'
963 -965 966 0
-966 965 0
-966 -963 0
c Var 'x_00008_00002' order represents '4' with '967'
-965 967 0
c Var 'x_00008_00002' direct represents '4' with '968'
965 -967 968 0
-968 967 0
-968 -965 0
c Var 'x_00008_00002' order represents '5' with '969'
-967 969 0
c Var 'x_00008_00002' direct represents '5' with '970'
967 -969 970 0
-970 969 0
-970 -967 0
c Var 'x_00008_00002' order represents '6' with '971'
-969 971 0
c Var 'x_00008_00002' direct represents '6' with '972'
969 -971 972 0
-972 971 0
-972 -969 0
c Var 'x_00008_00002' order represents '7' with '973'
-971 973 0
c Var 'x_00008_00002' direct represents '7' with '974'
971 -973 974 0
-974 973 0
-974 -971 0
c Var 'x_00008_00002' order represents '8' with '975'
-973 975 0
c Var 'x_00008_00002' direct represents '8' with '976'
973 -975 976 0
-976 975 0
-976 -973 0
c Var 'x_00008_00002' direct represents '9' with '-975'
962 964 966 968 970 972 974 976 -975 0
c Encoding variable: x_00008_00003 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00008_00003' order represents '1' with '977'
c Var 'x_00008_00003' direct represents '1' with '977'
c Var 'x_00008_00003' order represents '2' with '978'
-977 978 0
c Var 'x_00008_00003' direct represents '2' with '979'
977 -978 979 0
-979 978 0
-979 -977 0
c Var 'x_00008_00003' order represents '3' with '980'
-978 980 0
c Var 'x_00008_00003' direct represents '3' with '981'
978 -980 981 0
-981 980 0
-981 -978 0
c Var 'x_00008_00003' order represents '4' with '982'
-980 982 0
c Var 'x_00008_00003' direct represents '4' with '983'
980 -982 983 0
-983 982 0
-983 -980 0
c Var 'x_00008_00003' order represents '5' with '984'
-982 984 0
c Var 'x_00008_00003' direct represents '5' with '985'
982 -984 985 0
-985 984 0
-985 -982 0
c Var 'x_00008_00003' order represents '6' with '986'
-984 986 0
c Var 'x_00008_00003' direct represents '6' with '987'
984 -986 987 0
-987 986 0
-987 -984 0
c Var 'x_00008_00003' order represents '7' with '988'
-986 988 0
c Var 'x_00008_00003' direct represents '7' with '989'
986 -988 989 0
-989 988 0
-989 -986 0
c Var 'x_00008_00003' order represents '8' with '990'
-988 990 0
c Var 'x_00008_00003' direct represents '8' with '991'
988 -990 991 0
-991 990 0
-991 -988 0
c Var 'x_00008_00003' direct represents '9' with '-990'
977 979 981 983 985 987 989 991 -990 0
c Encoding variable: x_00008_00004 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00008_00004' order represents '1' with '992'
c Var 'x_00008_00004' direct represents '1' with '992'
c Var 'x_00008_00004' order represents '2' with '993'
-992 993 0
c Var 'x_00008_00004' direct represents '2' with '994'
992 -993 994 0
-994 993 0
-994 -992 0
c Var 'x_00008_00004' order represents '3' with '995'
-993 995 0
c Var 'x_00008_00004' direct represents '3' with '996'
993 -995 996 0
-996 995 0
-996 -993 0
c Var 'x_00008_00004' order represents '4' with '997'
-995 997 0
c Var 'x_00008_00004' direct represents '4' with '998'
995 -997 998 0
-998 997 0
-998 -995 0
c Var 'x_00008_00004' order represents '5' with '999'
-997 999 0
c Var 'x_00008_00004' direct represents '5' with '1000'
997 -999 1000 0
-1000 999 0
-1000 -997 0
c Var 'x_00008_00004' order represents '6' with '1001'
-999 1001 0
c Var 'x_00008_00004' direct represents '6' with '1002'
999 -1001 1002 0
-1002 1001 0
-1002 -999 0
c Var 'x_00008_00004' order represents '7' with '1003'
-1001 1003 0
c Var 'x_00008_00004' direct represents '7' with '1004'
1001 -1003 1004 0
-1004 1003 0
-1004 -1001 0
c Var 'x_00008_00004' order represents '8' with '1005'
-1003 1005 0
c Var 'x_00008_00004' direct represents '8' with '1006'
1003 -1005 1006 0
-1006 1005 0
-1006 -1003 0
c Var 'x_00008_00004' direct represents '9' with '-1005'
992 994 996 998 1000 1002 1004 1006 -1005 0
c Encoding variable: x_00008_00005 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00008_00005' order represents '1' with '1007'
c Var 'x_00008_00005' direct represents '1' with '1007'
c Var 'x_00008_00005' order represents '2' with '1008'
-1007 1008 0
c Var 'x_00008_00005' direct represents '2' with '1009'
1007 -1008 1009 0
-1009 1008 0
-1009 -1007 0
c Var 'x_00008_00005' order represents '3' with '1010'
-1008 1010 0
c Var 'x_00008_00005' direct represents '3' with '1011'
1008 -1010 1011 0
-1011 1010 0
-1011 -1008 0
c Var 'x_00008_00005' order represents '4' with '1012'
-1010 1012 0
c Var 'x_00008_00005' direct represents '4' with '1013'
1010 -1012 1013 0
-1013 1012 0
-1013 -1010 0
c Var 'x_00008_00005' order represents '5' with '1014'
-1012 1014 0
c Var 'x_00008_00005' direct represents '5' with '1015'
1012 -1014 1015 0
-1015 1014 0
-1015 -1012 0
c Var 'x_00008_00005' order represents '6' with '1016'
-1014 1016 0
c Var 'x_00008_00005' direct represents '6' with '1017'
1014 -1016 1017 0
-1017 1016 0
-1017 -1014 0
c Var 'x_00008_00005' order represents '7' with '1018'
-1016 1018 0
c Var 'x_00008_00005' direct represents '7' with '1019'
1016 -1018 1019 0
-1019 1018 0
-1019 -1016 0
c Var 'x_00008_00005' order represents '8' with '1020'
-1018 1020 0
c Var 'x_00008_00005' direct represents '8' with '1021'
1018 -1020 1021 0
-1021 1020 0
-1021 -1018 0
c Var 'x_00008_00005' direct represents '9' with '-1020'
1007 1009 1011 1013 1015 1017 1019 1021 -1020 0
c Encoding variable: x_00008_00006 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00008_00006' order represents '1' with '1022'
c Var 'x_00008_00006' direct represents '1' with '1022'
c Var 'x_00008_00006' order represents '2' with '1023'
-1022 1023 0
c Var 'x_00008_00006' direct represents '2' with '1024'
1022 -1023 1024 0
-1024 1023 0
-1024 -1022 0
c Var 'x_00008_00006' order represents '3' with '1025'
-1023 1025 0
c Var 'x_00008_00006' direct represents '3' with '1026'
1023 -1025 1026 0
-1026 1025 0
-1026 -1023 0
c Var 'x_00008_00006' order represents '4' with '1027'
-1025 1027 0
c Var 'x_00008_00006' direct represents '4' with '1028'
1025 -1027 1028 0
-1028 1027 0
-1028 -1025 0
c Var 'x_00008_00006' order represents '5' with '1029'
-1027 1029 0
c Var 'x_00008_00006' direct represents '5' with '1030'
1027 -1029 1030 0
-1030 1029 0
-1030 -1027 0
c Var 'x_00008_00006' order represents '6' with '1031'
-1029 1031 0
c Var 'x_00008_00006' direct represents '6' with '1032'
1029 -1031 1032 0
-1032 1031 0
-1032 -1029 0
c Var 'x_00008_00006' order represents '7' with '1033'
-1031 1033 0
c Var 'x_00008_00006' direct represents '7' with '1034'
1031 -1033 1034 0
-1034 1033 0
-1034 -1031 0
c Var 'x_00008_00006' order represents '8' with '1035'
-1033 1035 0
c Var 'x_00008_00006' direct represents '8' with '1036'
1033 -1035 1036 0
-1036 1035 0
-1036 -1033 0
c Var 'x_00008_00006' direct represents '9' with '-1035'
1022 1024 1026 1028 1030 1032 1034 1036 -1035 0
c Encoding variable: x_00008_00007 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00008_00007' order represents '1' with '1037'
c Var 'x_00008_00007' direct represents '1' with '1037'
c Var 'x_00008_00007' order represents '2' with '1038'
-1037 1038 0
c Var 'x_00008_00007' direct represents '2' with '1039'
1037 -1038 1039 0
-1039 1038 0
-1039 -1037 0
c Var 'x_00008_00007' order represents '3' with '1040'
-1038 1040 0
c Var 'x_00008_00007' direct represents '3' with '1041'
1038 -1040 1041 0
-1041 1040 0
-1041 -1038 0
c Var 'x_00008_00007' order represents '4' with '1042'
-1040 1042 0
c Var 'x_00008_00007' direct represents '4' with '1043'
1040 -1042 1043 0
-1043 1042 0
-1043 -1040 0
c Var 'x_00008_00007' order represents '5' with '1044'
-1042 1044 0
c Var 'x_00008_00007' direct represents '5' with '1045'
1042 -1044 1045 0
-1045 1044 0
-1045 -1042 0
c Var 'x_00008_00007' order represents '6' with '1046'
-1044 1046 0
c Var 'x_00008_00007' direct represents '6' with '1047'
1044 -1046 1047 0
-1047 1046 0
-1047 -1044 0
c Var 'x_00008_00007' order represents '7' with '1048'
-1046 1048 0
c Var 'x_00008_00007' direct represents '7' with '1049'
1046 -1048 1049 0
-1049 1048 0
-1049 -1046 0
c Var 'x_00008_00007' order represents '8' with '1050'
-1048 1050 0
c Var 'x_00008_00007' direct represents '8' with '1051'
1048 -1050 1051 0
-1051 1050 0
-1051 -1048 0
c Var 'x_00008_00007' direct represents '9' with '-1050'
1037 1039 1041 1043 1045 1047 1049 1051 -1050 0
c Encoding variable: x_00008_00008 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00008_00008' order represents '1' with '1052'
c Var 'x_00008_00008' direct represents '1' with '1052'
c Var 'x_00008_00008' order represents '2' with '1053'
-1052 1053 0
c Var 'x_00008_00008' direct represents '2' with '1054'
1052 -1053 1054 0
-1054 1053 0
-1054 -1052 0
c Var 'x_00008_00008' order represents '3' with '1055'
-1053 1055 0
c Var 'x_00008_00008' direct represents '3' with '1056'
1053 -1055 1056 0
-1056 1055 0
-1056 -1053 0
c Var 'x_00008_00008' order represents '4' with '1057'
-1055 1057 0
c Var 'x_00008_00008' direct represents '4' with '1058'
1055 -1057 1058 0
-1058 1057 0
-1058 -1055 0
c Var 'x_00008_00008' order represents '5' with '1059'
-1057 1059 0
c Var 'x_00008_00008' direct represents '5' with '1060'
1057 -1059 1060 0
-1060 1059 0
-1060 -1057 0
c Var 'x_00008_00008' order represents '6' with '1061'
-1059 1061 0
c Var 'x_00008_00008' direct represents '6' with '1062'
1059 -1061 1062 0
-1062 1061 0
-1062 -1059 0
c Var 'x_00008_00008' order represents '7' with '1063'
-1061 1063 0
c Var 'x_00008_00008' direct represents '7' with '1064'
1061 -1063 1064 0
-1064 1063 0
-1064 -1061 0
c Var 'x_00008_00008' order represents '8' with '1065'
-1063 1065 0
c Var 'x_00008_00008' direct represents '8' with '1066'
1063 -1065 1066 0
-1066 1065 0
-1066 -1063 0
c Var 'x_00008_00008' direct represents '9' with '-1065'
1052 1054 1056 1058 1060 1062 1064 1066 -1065 0
c Encoding variable: x_00008_00009 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00008_00009' order represents '1' with '1067'
c Var 'x_00008_00009' direct represents '1' with '1067'
c Var 'x_00008_00009' order represents '2' with '1068'
-1067 1068 0
c Var 'x_00008_00009' direct represents '2' with '1069'
1067 -1068 1069 0
-1069 1068 0
-1069 -1067 0
c Var 'x_00008_00009' order represents '3' with '1070'
-1068 1070 0
c Var 'x_00008_00009' direct represents '3' with '1071'
1068 -1070 1071 0
-1071 1070 0
-1071 -1068 0
c Var 'x_00008_00009' order represents '4' with '1072'
-1070 1072 0
c Var 'x_00008_00009' direct represents '4' with '1073'
1070 -1072 1073 0
-1073 1072 0
-1073 -1070 0
c Var 'x_00008_00009' order represents '5' with '1074'
-1072 1074 0
c Var 'x_00008_00009' direct represents '5' with '1075'
1072 -1074 1075 0
-1075 1074 0
-1075 -1072 0
c Var 'x_00008_00009' order represents '6' with '1076'
-1074 1076 0
c Var 'x_00008_00009' direct represents '6' with '1077'
1074 -1076 1077 0
-1077 1076 0
-1077 -1074 0
c Var 'x_00008_00009' order represents '7' with '1078'
-1076 1078 0
c Var 'x_00008_00009' direct represents '7' with '1079'
1076 -1078 1079 0
-1079 1078 0
-1079 -1076 0
c Var 'x_00008_00009' order represents '8' with '1080'
-1078 1080 0
c Var 'x_00008_00009' direct represents '8' with '1081'
1078 -1080 1081 0
-1081 1080 0
-1081 -1078 0
c Var 'x_00008_00009' direct represents '9' with '-1080'
1067 1069 1071 1073 1075 1077 1079 1081 -1080 0
c Encoding variable: x_00009_00001 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00009_00001' order represents '1' with '1082'
c Var 'x_00009_00001' direct represents '1' with '1082'
c Var 'x_00009_00001' order represents '2' with '1083'
-1082 1083 0
c Var 'x_00009_00001' direct represents '2' with '1084'
1082 -1083 1084 0
-1084 1083 0
-1084 -1082 0
c Var 'x_00009_00001' order represents '3' with '1085'
-1083 1085 0
c Var 'x_00009_00001' direct represents '3' with '1086'
1083 -1085 1086 0
-1086 1085 0
-1086 -1083 0
c Var 'x_00009_00001' order represents '4' with '1087'
-1085 1087 0
c Var 'x_00009_00001' direct represents '4' with '1088'
1085 -1087 1088 0
-1088 1087 0
-1088 -1085 0
c Var 'x_00009_00001' order represents '5' with '1089'
-1087 1089 0
c Var 'x_00009_00001' direct represents '5' with '1090'
1087 -1089 1090 0
-1090 1089 0
-1090 -1087 0
c Var 'x_00009_00001' order represents '6' with '1091'
-1089 1091 0
c Var 'x_00009_00001' direct represents '6' with '1092'
1089 -1091 1092 0
-1092 1091 0
-1092 -1089 0
c Var 'x_00009_00001' order represents '7' with '1093'
-1091 1093 0
c Var 'x_00009_00001' direct represents '7' with '1094'
1091 -1093 1094 0
-1094 1093 0
-1094 -1091 0
c Var 'x_00009_00001' order represents '8' with '1095'
-1093 1095 0
c Var 'x_00009_00001' direct represents '8' with '1096'
1093 -1095 1096 0
-1096 1095 0
-1096 -1093 0
c Var 'x_00009_00001' direct represents '9' with '-1095'
1082 1084 1086 1088 1090 1092 1094 1096 -1095 0
c Encoding variable: x_00009_00002 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00009_00002' order represents '1' with '1097'
c Var 'x_00009_00002' direct represents '1' with '1097'
c Var 'x_00009_00002' order represents '2' with '1098'
-1097 1098 0
c Var 'x_00009_00002' direct represents '2' with '1099'
1097 -1098 1099 0
-1099 1098 0
-1099 -1097 0
c Var 'x_00009_00002' order represents '3' with '1100'
-1098 1100 0
c Var 'x_00009_00002' direct represents '3' with '1101'
1098 -1100 1101 0
-1101 1100 0
-1101 -1098 0
c Var 'x_00009_00002' order represents '4' with '1102'
-1100 1102 0
c Var 'x_00009_00002' direct represents '4' with '1103'
1100 -1102 1103 0
-1103 1102 0
-1103 -1100 0
c Var 'x_00009_00002' order represents '5' with '1104'
-1102 1104 0
c Var 'x_00009_00002' direct represents '5' with '1105'
1102 -1104 1105 0
-1105 1104 0
-1105 -1102 0
c Var 'x_00009_00002' order represents '6' with '1106'
-1104 1106 0
c Var 'x_00009_00002' direct represents '6' with '1107'
1104 -1106 1107 0
-1107 1106 0
-1107 -1104 0
c Var 'x_00009_00002' order represents '7' with '1108'
-1106 1108 0
c Var 'x_00009_00002' direct represents '7' with '1109'
1106 -1108 1109 0
-1109 1108 0
-1109 -1106 0
c Var 'x_00009_00002' order represents '8' with '1110'
-1108 1110 0
c Var 'x_00009_00002' direct represents '8' with '1111'
1108 -1110 1111 0
-1111 1110 0
-1111 -1108 0
c Var 'x_00009_00002' direct represents '9' with '-1110'
1097 1099 1101 1103 1105 1107 1109 1111 -1110 0
c Encoding variable: x_00009_00003 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00009_00003' order represents '1' with '1112'
c Var 'x_00009_00003' direct represents '1' with '1112'
c Var 'x_00009_00003' order represents '2' with '1113'
-1112 1113 0
c Var 'x_00009_00003' direct represents '2' with '1114'
1112 -1113 1114 0
-1114 1113 0
-1114 -1112 0
c Var 'x_00009_00003' order represents '3' with '1115'
-1113 1115 0
c Var 'x_00009_00003' direct represents '3' with '1116'
1113 -1115 1116 0
-1116 1115 0
-1116 -1113 0
c Var 'x_00009_00003' order represents '4' with '1117'
-1115 1117 0
c Var 'x_00009_00003' direct represents '4' with '1118'
1115 -1117 1118 0
-1118 1117 0
-1118 -1115 0
c Var 'x_00009_00003' order represents '5' with '1119'
-1117 1119 0
c Var 'x_00009_00003' direct represents '5' with '1120'
1117 -1119 1120 0
-1120 1119 0
-1120 -1117 0
c Var 'x_00009_00003' order represents '6' with '1121'
-1119 1121 0
c Var 'x_00009_00003' direct represents '6' with '1122'
1119 -1121 1122 0
-1122 1121 0
-1122 -1119 0
c Var 'x_00009_00003' order represents '7' with '1123'
-1121 1123 0
c Var 'x_00009_00003' direct represents '7' with '1124'
1121 -1123 1124 0
-1124 1123 0
-1124 -1121 0
c Var 'x_00009_00003' order represents '8' with '1125'
-1123 1125 0
c Var 'x_00009_00003' direct represents '8' with '1126'
1123 -1125 1126 0
-1126 1125 0
-1126 -1123 0
c Var 'x_00009_00003' direct represents '9' with '-1125'
1112 1114 1116 1118 1120 1122 1124 1126 -1125 0
c Encoding variable: x_00009_00004 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00009_00004' order represents '1' with '1127'
c Var 'x_00009_00004' direct represents '1' with '1127'
c Var 'x_00009_00004' order represents '2' with '1128'
-1127 1128 0
c Var 'x_00009_00004' direct represents '2' with '1129'
1127 -1128 1129 0
-1129 1128 0
-1129 -1127 0
c Var 'x_00009_00004' order represents '3' with '1130'
-1128 1130 0
c Var 'x_00009_00004' direct represents '3' with '1131'
1128 -1130 1131 0
-1131 1130 0
-1131 -1128 0
c Var 'x_00009_00004' order represents '4' with '1132'
-1130 1132 0
c Var 'x_00009_00004' direct represents '4' with '1133'
1130 -1132 1133 0
-1133 1132 0
-1133 -1130 0
c Var 'x_00009_00004' order represents '5' with '1134'
-1132 1134 0
c Var 'x_00009_00004' direct represents '5' with '1135'
1132 -1134 1135 0
-1135 1134 0
-1135 -1132 0
c Var 'x_00009_00004' order represents '6' with '1136'
-1134 1136 0
c Var 'x_00009_00004' direct represents '6' with '1137'
1134 -1136 1137 0
-1137 1136 0
-1137 -1134 0
c Var 'x_00009_00004' order represents '7' with '1138'
-1136 1138 0
c Var 'x_00009_00004' direct represents '7' with '1139'
1136 -1138 1139 0
-1139 1138 0
-1139 -1136 0
c Var 'x_00009_00004' order represents '8' with '1140'
-1138 1140 0
c Var 'x_00009_00004' direct represents '8' with '1141'
1138 -1140 1141 0
-1141 1140 0
-1141 -1138 0
c Var 'x_00009_00004' direct represents '9' with '-1140'
1127 1129 1131 1133 1135 1137 1139 1141 -1140 0
c Encoding variable: x_00009_00005 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00009_00005' order represents '1' with '1142'
c Var 'x_00009_00005' direct represents '1' with '1142'
c Var 'x_00009_00005' order represents '2' with '1143'
-1142 1143 0
c Var 'x_00009_00005' direct represents '2' with '1144'
1142 -1143 1144 0
-1144 1143 0
-1144 -1142 0
c Var 'x_00009_00005' order represents '3' with '1145'
-1143 1145 0
c Var 'x_00009_00005' direct represents '3' with '1146'
1143 -1145 1146 0
-1146 1145 0
-1146 -1143 0
c Var 'x_00009_00005' order represents '4' with '1147'
-1145 1147 0
c Var 'x_00009_00005' direct represents '4' with '1148'
1145 -1147 1148 0
-1148 1147 0
-1148 -1145 0
c Var 'x_00009_00005' order represents '5' with '1149'
-1147 1149 0
c Var 'x_00009_00005' direct represents '5' with '1150'
1147 -1149 1150 0
-1150 1149 0
-1150 -1147 0
c Var 'x_00009_00005' order represents '6' with '1151'
-1149 1151 0
c Var 'x_00009_00005' direct represents '6' with '1152'
1149 -1151 1152 0
-1152 1151 0
-1152 -1149 0
c Var 'x_00009_00005' order represents '7' with '1153'
-1151 1153 0
c Var 'x_00009_00005' direct represents '7' with '1154'
1151 -1153 1154 0
-1154 1153 0
-1154 -1151 0
c Var 'x_00009_00005' order represents '8' with '1155'
-1153 1155 0
c Var 'x_00009_00005' direct represents '8' with '1156'
1153 -1155 1156 0
-1156 1155 0
-1156 -1153 0
c Var 'x_00009_00005' direct represents '9' with '-1155'
1142 1144 1146 1148 1150 1152 1154 1156 -1155 0
c Encoding variable: x_00009_00006 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00009_00006' order represents '1' with '1157'
c Var 'x_00009_00006' direct represents '1' with '1157'
c Var 'x_00009_00006' order represents '2' with '1158'
-1157 1158 0
c Var 'x_00009_00006' direct represents '2' with '1159'
1157 -1158 1159 0
-1159 1158 0
-1159 -1157 0
c Var 'x_00009_00006' order represents '3' with '1160'
-1158 1160 0
c Var 'x_00009_00006' direct represents '3' with '1161'
1158 -1160 1161 0
-1161 1160 0
-1161 -1158 0
c Var 'x_00009_00006' order represents '4' with '1162'
-1160 1162 0
c Var 'x_00009_00006' direct represents '4' with '1163'
1160 -1162 1163 0
-1163 1162 0
-1163 -1160 0
c Var 'x_00009_00006' order represents '5' with '1164'
-1162 1164 0
c Var 'x_00009_00006' direct represents '5' with '1165'
1162 -1164 1165 0
-1165 1164 0
-1165 -1162 0
c Var 'x_00009_00006' order represents '6' with '1166'
-1164 1166 0
c Var 'x_00009_00006' direct represents '6' with '1167'
1164 -1166 1167 0
-1167 1166 0
-1167 -1164 0
c Var 'x_00009_00006' order represents '7' with '1168'
-1166 1168 0
c Var 'x_00009_00006' direct represents '7' with '1169'
1166 -1168 1169 0
-1169 1168 0
-1169 -1166 0
c Var 'x_00009_00006' order represents '8' with '1170'
-1168 1170 0
c Var 'x_00009_00006' direct represents '8' with '1171'
1168 -1170 1171 0
-1171 1170 0
-1171 -1168 0
c Var 'x_00009_00006' direct represents '9' with '-1170'
1157 1159 1161 1163 1165 1167 1169 1171 -1170 0
c Encoding variable: x_00009_00007 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00009_00007' order represents '1' with '1172'
c Var 'x_00009_00007' direct represents '1' with '1172'
c Var 'x_00009_00007' order represents '2' with '1173'
-1172 1173 0
c Var 'x_00009_00007' direct represents '2' with '1174'
1172 -1173 1174 0
-1174 1173 0
-1174 -1172 0
c Var 'x_00009_00007' order represents '3' with '1175'
-1173 1175 0
c Var 'x_00009_00007' direct represents '3' with '1176'
1173 -1175 1176 0
-1176 1175 0
-1176 -1173 0
c Var 'x_00009_00007' order represents '4' with '1177'
-1175 1177 0
c Var 'x_00009_00007' direct represents '4' with '1178'
1175 -1177 1178 0
-1178 1177 0
-1178 -1175 0
c Var 'x_00009_00007' order represents '5' with '1179'
-1177 1179 0
c Var 'x_00009_00007' direct represents '5' with '1180'
1177 -1179 1180 0
-1180 1179 0
-1180 -1177 0
c Var 'x_00009_00007' order represents '6' with '1181'
-1179 1181 0
c Var 'x_00009_00007' direct represents '6' with '1182'
1179 -1181 1182 0
-1182 1181 0
-1182 -1179 0
c Var 'x_00009_00007' order represents '7' with '1183'
-1181 1183 0
c Var 'x_00009_00007' direct represents '7' with '1184'
1181 -1183 1184 0
-1184 1183 0
-1184 -1181 0
c Var 'x_00009_00007' order represents '8' with '1185'
-1183 1185 0
c Var 'x_00009_00007' direct represents '8' with '1186'
1183 -1185 1186 0
-1186 1185 0
-1186 -1183 0
c Var 'x_00009_00007' direct represents '9' with '-1185'
1172 1174 1176 1178 1180 1182 1184 1186 -1185 0
c Encoding variable: x_00009_00008 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00009_00008' order represents '1' with '1187'
c Var 'x_00009_00008' direct represents '1' with '1187'
c Var 'x_00009_00008' order represents '2' with '1188'
-1187 1188 0
c Var 'x_00009_00008' direct represents '2' with '1189'
1187 -1188 1189 0
-1189 1188 0
-1189 -1187 0
c Var 'x_00009_00008' order represents '3' with '1190'
-1188 1190 0
c Var 'x_00009_00008' direct represents '3' with '1191'
1188 -1190 1191 0
-1191 1190 0
-1191 -1188 0
c Var 'x_00009_00008' order represents '4' with '1192'
-1190 1192 0
c Var 'x_00009_00008' direct represents '4' with '1193'
1190 -1192 1193 0
-1193 1192 0
-1193 -1190 0
c Var 'x_00009_00008' order represents '5' with '1194'
-1192 1194 0
c Var 'x_00009_00008' direct represents '5' with '1195'
1192 -1194 1195 0
-1195 1194 0
-1195 -1192 0
c Var 'x_00009_00008' order represents '6' with '1196'
-1194 1196 0
c Var 'x_00009_00008' direct represents '6' with '1197'
1194 -1196 1197 0
-1197 1196 0
-1197 -1194 0
c Var 'x_00009_00008' order represents '7' with '1198'
-1196 1198 0
c Var 'x_00009_00008' direct represents '7' with '1199'
1196 -1198 1199 0
-1199 1198 0
-1199 -1196 0
c Var 'x_00009_00008' order represents '8' with '1200'
-1198 1200 0
c Var 'x_00009_00008' direct represents '8' with '1201'
1198 -1200 1201 0
-1201 1200 0
-1201 -1198 0
c Var 'x_00009_00008' direct represents '9' with '-1200'
1187 1189 1191 1193 1195 1197 1199 1201 -1200 0
c Encoding variable: x_00009_00009 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00009_00009' order represents '1' with '1202'
c Var 'x_00009_00009' direct represents '1' with '1202'
c Var 'x_00009_00009' order represents '2' with '1203'
-1202 1203 0
c Var 'x_00009_00009' direct represents '2' with '1204'
1202 -1203 1204 0
-1204 1203 0
-1204 -1202 0
c Var 'x_00009_00009' order represents '3' with '1205'
-1203 1205 0
c Var 'x_00009_00009' direct represents '3' with '1206'
1203 -1205 1206 0
-1206 1205 0
-1206 -1203 0
c Var 'x_00009_00009' order represents '4' with '1207'
-1205 1207 0
c Var 'x_00009_00009' direct represents '4' with '1208'
1205 -1207 1208 0
-1208 1207 0
-1208 -1205 0
c Var 'x_00009_00009' order represents '5' with '1209'
-1207 1209 0
c Var 'x_00009_00009' direct represents '5' with '1210'
1207 -1209 1210 0
-1210 1209 0
-1210 -1207 0
c Var 'x_00009_00009' order represents '6' with '1211'
-1209 1211 0
c Var 'x_00009_00009' direct represents '6' with '1212'
1209 -1211 1212 0
-1212 1211 0
-1212 -1209 0
c Var 'x_00009_00009' order represents '7' with '1213'
-1211 1213 0
c Var 'x_00009_00009' direct represents '7' with '1214'
1211 -1213 1214 0
-1214 1213 0
-1214 -1211 0
c Var 'x_00009_00009' order represents '8' with '1215'
-1213 1215 0
c Var 'x_00009_00009' direct represents '8' with '1216'
1213 -1215 1216 0
-1216 1215 0
-1216 -1213 0
c Var 'x_00009_00009' direct represents '9' with '-1215'
1202 1204 1206 1208 1210 1212 1214 1216 -1215 0
c Encoding variable: alldiff_row_00001 with domain: bool (representing constraint )
c Var 'alldiff_row_00001' direct represents '0' with '-1217'
c Var 'alldiff_row_00001' direct represents '1' with '1217'
c Var 'alldiff_row_00001' order represents '1' with '1'
c Var 'alldiff_row_00001' order represents '0' with '-1217'
c Encoding variable: alldiff_row_00002 with domain: bool (representing constraint )
c Var 'alldiff_row_00002' direct represents '0' with '-1218'
c Var 'alldiff_row_00002' direct represents '1' with '1218'
c Var 'alldiff_row_00002' order represents '1' with '1'
c Var 'alldiff_row_00002' order represents '0' with '-1218'
c Encoding variable: alldiff_row_00003 with domain: bool (representing constraint )
c Var 'alldiff_row_00003' direct represents '0' with '-1219'
c Var 'alldiff_row_00003' direct represents '1' with '1219'
c Var 'alldiff_row_00003' order represents '1' with '1'
c Var 'alldiff_row_00003' order represents '0' with '-1219'
c Encoding variable: alldiff_row_00004 with domain: bool (representing constraint )
c Var 'alldiff_row_00004' direct represents '0' with '-1220'
c Var 'alldiff_row_00004' direct represents '1' with '1220'
c Var 'alldiff_row_00004' order represents '1' with '1'
c Var 'alldiff_row_00004' order represents '0' with '-1220'
c Encoding variable: alldiff_row_00005 with domain: bool (representing constraint )
c Var 'alldiff_row_00005' direct represents '0' with '-1221'
c Var 'alldiff_row_00005' direct represents '1' with '1221'
c Var 'alldiff_row_00005' order represents '1' with '1'
c Var 'alldiff_row_00005' order represents '0' with '-1221'
c Encoding variable: alldiff_row_00006 with domain: bool (representing constraint )
c Var 'alldiff_row_00006' direct represents '0' with '-1222'
c Var 'alldiff_row_00006' direct represents '1' with '1222'
c Var 'alldiff_row_00006' order represents '1' with '1'
c Var 'alldiff_row_00006' order represents '0' with '-1222'
c Encoding variable: alldiff_row_00007 with domain: bool (representing constraint )
c Var 'alldiff_row_00007' direct represents '0' with '-1223'
c Var 'alldiff_row_00007' direct represents '1' with '1223'
c Var 'alldiff_row_00007' order represents '1' with '1'
c Var 'alldiff_row_00007' order represents '0' with '-1223'
c Encoding variable: alldiff_row_00008 with domain: bool (representing constraint )
c Var 'alldiff_row_00008' direct represents '0' with '-1224'
c Var 'alldiff_row_00008' direct represents '1' with '1224'
c Var 'alldiff_row_00008' order represents '1' with '1'
c Var 'alldiff_row_00008' order represents '0' with '-1224'
c Encoding variable: alldiff_row_00009 with domain: bool (representing constraint )
c Var 'alldiff_row_00009' direct represents '0' with '-1225'
c Var 'alldiff_row_00009' direct represents '1' with '1225'
c Var 'alldiff_row_00009' order represents '1' with '1'
c Var 'alldiff_row_00009' order represents '0' with '-1225'
c Encoding variable: alldiff_col_00001 with domain: bool (representing constraint )
c Var 'alldiff_col_00001' direct represents '0' with '-1226'
c Var 'alldiff_col_00001' direct represents '1' with '1226'
c Var 'alldiff_col_00001' order represents '1' with '1'
c Var 'alldiff_col_00001' order represents '0' with '-1226'
c Encoding variable: alldiff_col_00002 with domain: bool (representing constraint )
c Var 'alldiff_col_00002' direct represents '0' with '-1227'
c Var 'alldiff_col_00002' direct represents '1' with '1227'
c Var 'alldiff_col_00002' order represents '1' with '1'
c Var 'alldiff_col_00002' order represents '0' with '-1227'
c Encoding variable: alldiff_col_00003 with domain: bool (representing constraint )
c Var 'alldiff_col_00003' direct represents '0' with '-1228'
c Var 'alldiff_col_00003' direct represents '1' with '1228'
c Var 'alldiff_col_00003' order represents '1' with '1'
c Var 'alldiff_col_00003' order represents '0' with '-1228'
c Encoding variable: alldiff_col_00004 with domain: bool (representing constraint )
c Var 'alldiff_col_00004' direct represents '0' with '-1229'
c Var 'alldiff_col_00004' direct represents '1' with '1229'
c Var 'alldiff_col_00004' order represents '1' with '1'
c Var 'alldiff_col_00004' order represents '0' with '-1229'
c Encoding variable: alldiff_col_00005 with domain: bool (representing constraint )
c Var 'alldiff_col_00005' direct represents '0' with '-1230'
c Var 'alldiff_col_00005' direct represents '1' with '1230'
c Var 'alldiff_col_00005' order represents '1' with '1'
c Var 'alldiff_col_00005' order represents '0' with '-1230'
c Encoding variable: alldiff_col_00006 with domain: bool (representing constraint )
c Var 'alldiff_col_00006' direct represents '0' with '-1231'
c Var 'alldiff_col_00006' direct represents '1' with '1231'
c Var 'alldiff_col_00006' order represents '1' with '1'
c Var 'alldiff_col_00006' order represents '0' with '-1231'
c Encoding variable: alldiff_col_00007 with domain: bool (representing constraint )
c Var 'alldiff_col_00007' direct represents '0' with '-1232'
c Var 'alldiff_col_00007' direct represents '1' with '1232'
c Var 'alldiff_col_00007' order represents '1' with '1'
c Var 'alldiff_col_00007' order represents '0' with '-1232'
c Encoding variable: alldiff_col_00008 with domain: bool (representing constraint )
c Var 'alldiff_col_00008' direct represents '0' with '-1233'
c Var 'alldiff_col_00008' direct represents '1' with '1233'
c Var 'alldiff_col_00008' order represents '1' with '1'
c Var 'alldiff_col_00008' order represents '0' with '-1233'
c Encoding variable: alldiff_col_00009 with domain: bool (representing constraint )
c Var 'alldiff_col_00009' direct represents '0' with '-1234'
c Var 'alldiff_col_00009' direct represents '1' with '1234'
c Var 'alldiff_col_00009' order represents '1' with '1'
c Var 'alldiff_col_00009' order represents '0' with '-1234'
c Encoding variable: alldiff_box_00001 with domain: bool (representing constraint )
c Var 'alldiff_box_00001' direct represents '0' with '-1235'
c Var 'alldiff_box_00001' direct represents '1' with '1235'
c Var 'alldiff_box_00001' order represents '1' with '1'
c Var 'alldiff_box_00001' order represents '0' with '-1235'
c Encoding variable: alldiff_box_00002 with domain: bool (representing constraint )
c Var 'alldiff_box_00002' direct represents '0' with '-1236'
c Var 'alldiff_box_00002' direct represents '1' with '1236'
c Var 'alldiff_box_00002' order represents '1' with '1'
c Var 'alldiff_box_00002' order represents '0' with '-1236'
c Encoding variable: alldiff_box_00003 with domain: bool (representing constraint )
c Var 'alldiff_box_00003' direct represents '0' with '-1237'
c Var 'alldiff_box_00003' direct represents '1' with '1237'
c Var 'alldiff_box_00003' order represents '1' with '1'
c Var 'alldiff_box_00003' order represents '0' with '-1237'
c Encoding variable: alldiff_box_00004 with domain: bool (representing constraint )
c Var 'alldiff_box_00004' direct represents '0' with '-1238'
c Var 'alldiff_box_00004' direct represents '1' with '1238'
c Var 'alldiff_box_00004' order represents '1' with '1'
c Var 'alldiff_box_00004' order represents '0' with '-1238'
c Encoding variable: alldiff_box_00005 with domain: bool (representing constraint )
c Var 'alldiff_box_00005' direct represents '0' with '-1239'
c Var 'alldiff_box_00005' direct represents '1' with '1239'
c Var 'alldiff_box_00005' order represents '1' with '1'
c Var 'alldiff_box_00005' order represents '0' with '-1239'
c Encoding variable: alldiff_box_00006 with domain: bool (representing constraint )
c Var 'alldiff_box_00006' direct represents '0' with '-1240'
c Var 'alldiff_box_00006' direct represents '1' with '1240'
c Var 'alldiff_box_00006' order represents '1' with '1'
c Var 'alldiff_box_00006' order represents '0' with '-1240'
c Encoding variable: alldiff_box_00007 with domain: bool (representing constraint )
c Var 'alldiff_box_00007' direct represents '0' with '-1241'
c Var 'alldiff_box_00007' direct represents '1' with '1241'
c Var 'alldiff_box_00007' order represents '1' with '1'
c Var 'alldiff_box_00007' order represents '0' with '-1241'
c Encoding variable: alldiff_box_00008 with domain: bool (representing constraint )
c Var 'alldiff_box_00008' direct represents '0' with '-1242'
c Var 'alldiff_box_00008' direct represents '1' with '1242'
c Var 'alldiff_box_00008' order represents '1' with '1'
c Var 'alldiff_box_00008' order represents '0' with '-1242'
c Encoding variable: alldiff_box_00009 with domain: bool (representing constraint )
c Var 'alldiff_box_00009' direct represents '0' with '-1243'
c Var 'alldiff_box_00009' direct represents '1' with '1243'
c Var 'alldiff_box_00009' order represents '1' with '1'
c Var 'alldiff_box_00009' order represents '0' with '-1243'
c Encoding variable: alldiff_hint_00001 with domain: bool (representing constraint )
c Var 'alldiff_hint_00001' direct represents '0' with '-1244'
c Var 'alldiff_hint_00001' direct represents '1' with '1244'
c Var 'alldiff_hint_00001' order represents '1' with '1'
c Var 'alldiff_hint_00001' order represents '0' with '-1244'
c Encoding variable: alldiff_hint_00002 with domain: bool (representing constraint )
c Var 'alldiff_hint_00002' direct represents '0' with '-1245'
c Var 'alldiff_hint_00002' direct represents '1' with '1245'
c Var 'alldiff_hint_00002' order represents '1' with '1'
c Var 'alldiff_hint_00002' order represents '0' with '-1245'
c Encoding variable: alldiff_hint_00003 with domain: bool (representing constraint )
c Var 'alldiff_hint_00003' direct represents '0' with '-1246'
c Var 'alldiff_hint_00003' direct represents '1' with '1246'
c Var 'alldiff_hint_00003' order represents '1' with '1'
c Var 'alldiff_hint_00003' order represents '0' with '-1246'
c Encoding variable: alldiff_hint_00004 with domain: bool (representing constraint )
c Var 'alldiff_hint_00004' direct represents '0' with '-1247'
c Var 'alldiff_hint_00004' direct represents '1' with '1247'
c Var 'alldiff_hint_00004' order represents '1' with '1'
c Var 'alldiff_hint_00004' order represents '0' with '-1247'
c Encoding variable: alldiff_hint_00005 with domain: bool (representing constraint )
c Var 'alldiff_hint_00005' direct represents '0' with '-1248'
c Var 'alldiff_hint_00005' direct represents '1' with '1248'
c Var 'alldiff_hint_00005' order represents '1' with '1'
c Var 'alldiff_hint_00005' order represents '0' with '-1248'
c Encoding variable: alldiff_hint_00006 with domain: bool (representing constraint )
c Var 'alldiff_hint_00006' direct represents '0' with '-1249'
c Var 'alldiff_hint_00006' direct represents '1' with '1249'
c Var 'alldiff_hint_00006' order represents '1' with '1'
c Var 'alldiff_hint_00006' order represents '0' with '-1249'
c Encoding variable: alldiff_hint_00007 with domain: bool (representing constraint )
c Var 'alldiff_hint_00007' direct represents '0' with '-1250'
c Var 'alldiff_hint_00007' direct represents '1' with '1250'
c Var 'alldiff_hint_00007' order represents '1' with '1'
c Var 'alldiff_hint_00007' order represents '0' with '-1250'
c Encoding variable: alldiff_hint_00008 with domain: bool (representing constraint )
c Var 'alldiff_hint_00008' direct represents '0' with '-1251'
c Var 'alldiff_hint_00008' direct represents '1' with '1251'
c Var 'alldiff_hint_00008' order represents '1' with '1'
c Var 'alldiff_hint_00008' order represents '0' with '-1251'
c Encoding variable: alldiff_hint_00009 with domain: bool (representing constraint )
c Var 'alldiff_hint_00009' direct represents '0' with '-1252'
c Var 'alldiff_hint_00009' direct represents '1' with '1252'
c Var 'alldiff_hint_00009' order represents '1' with '1'
c Var 'alldiff_hint_00009' order represents '0' with '-1252'
c Encoding variable: alldiff_hint_00010 with domain: bool (representing constraint )
c Var 'alldiff_hint_00010' direct represents '0' with '-1253'
c Var 'alldiff_hint_00010' direct represents '1' with '1253'
c Var 'alldiff_hint_00010' order represents '1' with '1'
c Var 'alldiff_hint_00010' order represents '0' with '-1253'
1253 -1253 0
c Encoding variable: alldiff_hint_00011 with domain: bool (representing constraint )
c Var 'alldiff_hint_00011' direct represents '0' with '-1254'
c Var 'alldiff_hint_00011' direct represents '1' with '1254'
c Var 'alldiff_hint_00011' order represents '1' with '1'
c Var 'alldiff_hint_00011' order represents '0' with '-1254'
c Encoding variable: alldiff_hint_00012 with domain: bool (representing constraint )
c Var 'alldiff_hint_00012' direct represents '0' with '-1255'
c Var 'alldiff_hint_00012' direct represents '1' with '1255'
c Var 'alldiff_hint_00012' order represents '1' with '1'
c Var 'alldiff_hint_00012' order represents '0' with '-1255'
c Encoding variable: alldiff_hint_00013 with domain: bool (representing constraint )
c Var 'alldiff_hint_00013' direct represents '0' with '-1256'
c Var 'alldiff_hint_00013' direct represents '1' with '1256'
c Var 'alldiff_hint_00013' order represents '1' with '1'
c Var 'alldiff_hint_00013' order represents '0' with '-1256'
c Encoding variable: alldiff_hint_00014 with domain: bool (representing constraint )
c Var 'alldiff_hint_00014' direct represents '0' with '-1257'
c Var 'alldiff_hint_00014' direct represents '1' with '1257'
c Var 'alldiff_hint_00014' order represents '1' with '1'
c Var 'alldiff_hint_00014' order represents '0' with '-1257'
c Encoding variable: alldiff_hint_00015 with domain: bool (representing constraint )
c Var 'alldiff_hint_00015' direct represents '0' with '-1258'
c Var 'alldiff_hint_00015' direct represents '1' with '1258'
c Var 'alldiff_hint_00015' order represents '1' with '1'
c Var 'alldiff_hint_00015' order represents '0' with '-1258'
c Encoding variable: alldiff_hint_00016 with domain: bool (representing constraint )
c Var 'alldiff_hint_00016' direct represents '0' with '-1259'
c Var 'alldiff_hint_00016' direct represents '1' with '1259'
c Var 'alldiff_hint_00016' order represents '1' with '1'
c Var 'alldiff_hint_00016' order represents '0' with '-1259'
c Encoding variable: alldiff_hint_00017 with domain: bool (representing constraint )
c Var 'alldiff_hint_00017' direct represents '0' with '-1260'
c Var 'alldiff_hint_00017' direct represents '1' with '1260'
c Var 'alldiff_hint_00017' order represents '1' with '1'
c Var 'alldiff_hint_00017' order represents '0' with '-1260'
c Encoding variable: alldiff_hint_00018 with domain: bool (representing constraint )
c Var 'alldiff_hint_00018' direct represents '0' with '-1261'
c Var 'alldiff_hint_00018' direct represents '1' with '1261'
c Var 'alldiff_hint_00018' order represents '1' with '1'
c Var 'alldiff_hint_00018' order represents '0' with '-1261'
c Encoding variable: alldiff_hint_00019 with domain: bool (representing constraint )
c Var 'alldiff_hint_00019' direct represents '0' with '-1262'
c Var 'alldiff_hint_00019' direct represents '1' with '1262'
c Var 'alldiff_hint_00019' order represents '1' with '1'
c Var 'alldiff_hint_00019' order represents '0' with '-1262'
c Encoding variable: alldiff_hint_00020 with domain: bool (representing constraint )
c Var 'alldiff_hint_00020' direct represents '0' with '-1263'
c Var 'alldiff_hint_00020' direct represents '1' with '1263'
c Var 'alldiff_hint_00020' order represents '1' with '1'
c Var 'alldiff_hint_00020' order represents '0' with '-1263'
c Encoding variable: alldiff_hint_00021 with domain: bool (representing constraint )
c Var 'alldiff_hint_00021' direct represents '0' with '-1264'
c Var 'alldiff_hint_00021' direct represents '1' with '1264'
c Var 'alldiff_hint_00021' order represents '1' with '1'
c Var 'alldiff_hint_00021' order represents '0' with '-1264'
c Encoding variable: alldiff_hint_00022 with domain: bool (representing constraint )
c Var 'alldiff_hint_00022' direct represents '0' with '-1265'
c Var 'alldiff_hint_00022' direct represents '1' with '1265'
c Var 'alldiff_hint_00022' order represents '1' with '1'
c Var 'alldiff_hint_00022' order represents '0' with '-1265'
c Encoding variable: alldiff_hint_00023 with domain: bool (representing constraint )
c Var 'alldiff_hint_00023' direct represents '0' with '-1266'
c Var 'alldiff_hint_00023' direct represents '1' with '1266'
c Var 'alldiff_hint_00023' order represents '1' with '1'
c Var 'alldiff_hint_00023' order represents '0' with '-1266'
c Encoding variable: alldiff_hint_00024 with domain: bool (representing constraint )
c Var 'alldiff_hint_00024' direct represents '0' with '-1267'
c Var 'alldiff_hint_00024' direct represents '1' with '1267'
c Var 'alldiff_hint_00024' order represents '1' with '1'
c Var 'alldiff_hint_00024' order represents '0' with '-1267'
c Encoding variable: alldiff_hint_00025 with domain: bool (representing constraint )
c Var 'alldiff_hint_00025' direct represents '0' with '-1268'
c Var 'alldiff_hint_00025' direct represents '1' with '1268'
c Var 'alldiff_hint_00025' order represents '1' with '1'
c Var 'alldiff_hint_00025' order represents '0' with '-1268'
c Encoding variable: alldiff_hint_00026 with domain: bool (representing constraint )
c Var 'alldiff_hint_00026' direct represents '0' with '-1269'
c Var 'alldiff_hint_00026' direct represents '1' with '1269'
c Var 'alldiff_hint_00026' order represents '1' with '1'
c Var 'alldiff_hint_00026' order represents '0' with '-1269'
c Encoding variable: alldiff_hint_00027 with domain: bool (representing constraint )
c Var 'alldiff_hint_00027' direct represents '0' with '-1270'
c Var 'alldiff_hint_00027' direct represents '1' with '1270'
c Var 'alldiff_hint_00027' order represents '1' with '1'
c Var 'alldiff_hint_00027' order represents '0' with '-1270'
c Encoding variable: alldiff_hint_00028 with domain: bool (representing constraint )
c Var 'alldiff_hint_00028' direct represents '0' with '-1271'
c Var 'alldiff_hint_00028' direct represents '1' with '1271'
c Var 'alldiff_hint_00028' order represents '1' with '1'
c Var 'alldiff_hint_00028' order represents '0' with '-1271'
c Encoding variable: alldiff_hint_00029 with domain: bool (representing constraint )
c Var 'alldiff_hint_00029' direct represents '0' with '-1272'
c Var 'alldiff_hint_00029' direct represents '1' with '1272'
c Var 'alldiff_hint_00029' order represents '1' with '1'
c Var 'alldiff_hint_00029' order represents '0' with '-1272'
c Encoding variable: sum_hint_00001 with domain: bool (representing constraint )
c Var 'sum_hint_00001' direct represents '0' with '-1273'
c Var 'sum_hint_00001' direct represents '1' with '1273'
c Var 'sum_hint_00001' order represents '1' with '1'
c Var 'sum_hint_00001' order represents '0' with '-1273'
c Encoding variable: sum_hint_00002 with domain: bool (representing constraint )
c Var 'sum_hint_00002' direct represents '0' with '-1274'
c Var 'sum_hint_00002' direct represents '1' with '1274'
c Var 'sum_hint_00002' order represents '1' with '1'
c Var 'sum_hint_00002' order represents '0' with '-1274'
c Encoding variable: sum_hint_00003 with domain: bool (representing constraint )
c Var 'sum_hint_00003' direct represents '0' with '-1275'
c Var 'sum_hint_00003' direct represents '1' with '1275'
c Var 'sum_hint_00003' order represents '1' with '1'
c Var 'sum_hint_00003' order represents '0' with '-1275'
c Encoding variable: sum_hint_00004 with domain: bool (representing constraint )
c Var 'sum_hint_00004' direct represents '0' with '-1276'
c Var 'sum_hint_00004' direct represents '1' with '1276'
c Var 'sum_hint_00004' order represents '1' with '1'
c Var 'sum_hint_00004' order represents '0' with '-1276'
c Encoding variable: sum_hint_00005 with domain: bool (representing constraint )
c Var 'sum_hint_00005' direct represents '0' with '-1277'
c Var 'sum_hint_00005' direct represents '1' with '1277'
c Var 'sum_hint_00005' order represents '1' with '1'
c Var 'sum_hint_00005' order represents '0' with '-1277'
c Encoding variable: sum_hint_00006 with domain: bool (representing constraint )
c Var 'sum_hint_00006' direct represents '0' with '-1278'
c Var 'sum_hint_00006' direct represents '1' with '1278'
c Var 'sum_hint_00006' order represents '1' with '1'
c Var 'sum_hint_00006' order represents '0' with '-1278'
c Encoding variable: sum_hint_00007 with domain: bool (representing constraint )
c Var 'sum_hint_00007' direct represents '0' with '-1279'
c Var 'sum_hint_00007' direct represents '1' with '1279'
c Var 'sum_hint_00007' order represents '1' with '1'
c Var 'sum_hint_00007' order represents '0' with '-1279'
c Encoding variable: sum_hint_00008 with domain: bool (representing constraint )
c Var 'sum_hint_00008' direct represents '0' with '-1280'
c Var 'sum_hint_00008' direct represents '1' with '1280'
c Var 'sum_hint_00008' order represents '1' with '1'
c Var 'sum_hint_00008' order represents '0' with '-1280'
c Encoding variable: sum_hint_00009 with domain: bool (representing constraint )
c Var 'sum_hint_00009' direct represents '0' with '-1281'
c Var 'sum_hint_00009' direct represents '1' with '1281'
c Var 'sum_hint_00009' order represents '1' with '1'
c Var 'sum_hint_00009' order represents '0' with '-1281'
c Encoding variable: sum_hint_00010 with domain: bool (representing constraint )
c Var 'sum_hint_00010' direct represents '0' with '-1282'
c Var 'sum_hint_00010' direct represents '1' with '1282'
c Var 'sum_hint_00010' order represents '1' with '1'
c Var 'sum_hint_00010' order represents '0' with '-1282'
c Encoding variable: sum_hint_00011 with domain: bool (representing constraint )
c Var 'sum_hint_00011' direct represents '0' with '-1283'
c Var 'sum_hint_00011' direct represents '1' with '1283'
c Var 'sum_hint_00011' order represents '1' with '1'
c Var 'sum_hint_00011' order represents '0' with '-1283'
c Encoding variable: sum_hint_00012 with domain: bool (representing constraint )
c Var 'sum_hint_00012' direct represents '0' with '-1284'
c Var 'sum_hint_00012' direct represents '1' with '1284'
c Var 'sum_hint_00012' order represents '1' with '1'
c Var 'sum_hint_00012' order represents '0' with '-1284'
c Encoding variable: sum_hint_00013 with domain: bool (representing constraint )
c Var 'sum_hint_00013' direct represents '0' with '-1285'
c Var 'sum_hint_00013' direct represents '1' with '1285'
c Var 'sum_hint_00013' order represents '1' with '1'
c Var 'sum_hint_00013' order represents '0' with '-1285'
c Encoding variable: sum_hint_00014 with domain: bool (representing constraint )
c Var 'sum_hint_00014' direct represents '0' with '-1286'
c Var 'sum_hint_00014' direct represents '1' with '1286'
c Var 'sum_hint_00014' order represents '1' with '1'
c Var 'sum_hint_00014' order represents '0' with '-1286'
c Encoding variable: sum_hint_00015 with domain: bool (representing constraint )
c Var 'sum_hint_00015' direct represents '0' with '-1287'
c Var 'sum_hint_00015' direct represents '1' with '1287'
c Var 'sum_hint_00015' order represents '1' with '1'
c Var 'sum_hint_00015' order represents '0' with '-1287'
c Encoding variable: sum_hint_00016 with domain: bool (representing constraint )
c Var 'sum_hint_00016' direct represents '0' with '-1288'
c Var 'sum_hint_00016' direct represents '1' with '1288'
c Var 'sum_hint_00016' order represents '1' with '1'
c Var 'sum_hint_00016' order represents '0' with '-1288'
c Encoding variable: sum_hint_00017 with domain: bool (representing constraint )
c Var 'sum_hint_00017' direct represents '0' with '-1289'
c Var 'sum_hint_00017' direct represents '1' with '1289'
c Var 'sum_hint_00017' order represents '1' with '1'
c Var 'sum_hint_00017' order represents '0' with '-1289'
c Encoding variable: sum_hint_00018 with domain: bool (representing constraint )
c Var 'sum_hint_00018' direct represents '0' with '-1290'
c Var 'sum_hint_00018' direct represents '1' with '1290'
c Var 'sum_hint_00018' order represents '1' with '1'
c Var 'sum_hint_00018' order represents '0' with '-1290'
c Encoding variable: sum_hint_00019 with domain: bool (representing constraint )
c Var 'sum_hint_00019' direct represents '0' with '-1291'
c Var 'sum_hint_00019' direct represents '1' with '1291'
c Var 'sum_hint_00019' order represents '1' with '1'
c Var 'sum_hint_00019' order represents '0' with '-1291'
c Encoding variable: sum_hint_00020 with domain: bool (representing constraint )
c Var 'sum_hint_00020' direct represents '0' with '-1292'
c Var 'sum_hint_00020' direct represents '1' with '1292'
c Var 'sum_hint_00020' order represents '1' with '1'
c Var 'sum_hint_00020' order represents '0' with '-1292'
c Encoding variable: sum_hint_00021 with domain: bool (representing constraint )
c Var 'sum_hint_00021' direct represents '0' with '-1293'
c Var 'sum_hint_00021' direct represents '1' with '1293'
c Var 'sum_hint_00021' order represents '1' with '1'
c Var 'sum_hint_00021' order represents '0' with '-1293'
c Encoding variable: sum_hint_00022 with domain: bool (representing constraint )
c Var 'sum_hint_00022' direct represents '0' with '-1294'
c Var 'sum_hint_00022' direct represents '1' with '1294'
c Var 'sum_hint_00022' order represents '1' with '1'
c Var 'sum_hint_00022' order represents '0' with '-1294'
c Encoding variable: sum_hint_00023 with domain: bool (representing constraint )
c Var 'sum_hint_00023' direct represents '0' with '-1295'
c Var 'sum_hint_00023' direct represents '1' with '1295'
c Var 'sum_hint_00023' order represents '1' with '1'
c Var 'sum_hint_00023' order represents '0' with '-1295'
c Encoding variable: sum_hint_00024 with domain: bool (representing constraint )
c Var 'sum_hint_00024' direct represents '0' with '-1296'
c Var 'sum_hint_00024' direct represents '1' with '1296'
c Var 'sum_hint_00024' order represents '1' with '1'
c Var 'sum_hint_00024' order represents '0' with '-1296'
c Encoding variable: sum_hint_00025 with domain: bool (representing constraint )
c Var 'sum_hint_00025' direct represents '0' with '-1297'
c Var 'sum_hint_00025' direct represents '1' with '1297'
c Var 'sum_hint_00025' order represents '1' with '1'
c Var 'sum_hint_00025' order represents '0' with '-1297'
c Encoding variable: sum_hint_00026 with domain: bool (representing constraint )
c Var 'sum_hint_00026' direct represents '0' with '-1298'
c Var 'sum_hint_00026' direct represents '1' with '1298'
c Var 'sum_hint_00026' order represents '1' with '1'
c Var 'sum_hint_00026' order represents '0' with '-1298'
c Encoding variable: sum_hint_00027 with domain: bool (representing constraint )
c Var 'sum_hint_00027' direct represents '0' with '-1299'
c Var 'sum_hint_00027' direct represents '1' with '1299'
c Var 'sum_hint_00027' order represents '1' with '1'
c Var 'sum_hint_00027' order represents '0' with '-1299'
c Encoding variable: sum_hint_00028 with domain: bool (representing constraint )
c Var 'sum_hint_00028' direct represents '0' with '-1300'
c Var 'sum_hint_00028' direct represents '1' with '1300'
c Var 'sum_hint_00028' order represents '1' with '1'
c Var 'sum_hint_00028' order represents '0' with '-1300'
c Encoding variable: sum_hint_00029 with domain: bool (representing constraint )
c Var 'sum_hint_00029' direct represents '0' with '-1301'
c Var 'sum_hint_00029' direct represents '1' with '1301'
c Var 'sum_hint_00029' order represents '1' with '1'
c Var 'sum_hint_00029' order represents '0' with '-1301'
c Encoding variable: aux0 with domain: bool (representing constraint ((x_00002_00001 + x_00002_00002 + x_00002_00003 + x_00001_00001 + x_00001_00002)=tv=31))
c Var 'aux0' direct represents '0' with '-1302'
c Var 'aux0' direct represents '1' with '1302'
c Var 'aux0' order represents '1' with '1'
c Var 'aux0' order represents '0' with '-1302'
c Encoding variable: aux1 with domain: bool (representing constraint ((x_00002_00004 + x_00001_00003 + x_00001_00004 + x_00001_00005)=tv=14))
c Var 'aux1' direct represents '0' with '-1303'
c Var 'aux1' direct represents '1' with '1303'
c Var 'aux1' order represents '1' with '1'
c Var 'aux1' order represents '0' with '-1303'
c Encoding variable: aux2 with domain: bool (representing constraint ((x_00001_00006 + x_00001_00007 + x_00001_00008)=tv=11))
c Var 'aux2' direct represents '0' with '-1304'
c Var 'aux2' direct represents '1' with '1304'
c Var 'aux2' order represents '1' with '1'
c Var 'aux2' order represents '0' with '-1304'
c Encoding variable: aux3 with domain: bool (representing constraint ((x_00002_00009 + x_00001_00009)=tv=11))
c Var 'aux3' direct represents '0' with '-1305'
c Var 'aux3' direct represents '1' with '1305'
c Var 'aux3' order represents '1' with '1'
c Var 'aux3' order represents '0' with '-1305'
c Encoding variable: aux4 with domain: bool (representing constraint ((x_00002_00005 + x_00003_00004 + x_00003_00005 + x_00004_00005)=tv=24))
c Var 'aux4' direct represents '0' with '-1306'
c Var 'aux4' direct represents '1' with '1306'
c Var 'aux4' order represents '1' with '1'
c Var 'aux4' order represents '0' with '-1306'
c Encoding variable: aux5 with domain: bool (representing constraint ((x_00002_00006 + x_00002_00007 + x_00002_00008)=tv=17))
c Var 'aux5' direct represents '0' with '-1307'
c Var 'aux5' direct represents '1' with '1307'
c Var 'aux5' order represents '1' with '1'
c Var 'aux5' order represents '0' with '-1307'
c Encoding variable: aux6 with domain: bool (representing constraint ((x_00003_00001 + x_00003_00002 + x_00003_00003)=tv=13))
c Var 'aux6' direct represents '0' with '-1308'
c Var 'aux6' direct represents '1' with '1308'
c Var 'aux6' order represents '1' with '1'
c Var 'aux6' order represents '0' with '-1308'
c Encoding variable: aux7 with domain: bool (representing constraint ((x_00003_00006 + x_00004_00006 + x_00005_00005 + x_00005_00006)=tv=15))
c Var 'aux7' direct represents '0' with '-1309'
c Var 'aux7' direct represents '1' with '1309'
c Var 'aux7' order represents '1' with '1'
c Var 'aux7' order represents '0' with '-1309'
c Encoding variable: aux8 with domain: bool (representing constraint ((x_00003_00007 + x_00003_00008 + x_00004_00008)=tv=11))
c Var 'aux8' direct represents '0' with '-1310'
c Var 'aux8' direct represents '1' with '1310'
c Var 'aux8' order represents '1' with '1'
c Var 'aux8' order represents '0' with '-1310'
c Encoding variable: aux9 with domain: bool (representing constraint ((x_00004_00001 + x_00004_00002 + x_00005_00001)=tv=15))
c Var 'aux9' direct represents '0' with '-1311'
c Var 'aux9' direct represents '1' with '1311'
c Var 'aux9' order represents '1' with '1'
c Var 'aux9' order represents '0' with '-1311'
c Encoding variable: aux10 with domain: bool (representing constraint ((x_00004_00003 + x_00005_00002 + x_00005_00003)=tv=18))
c Var 'aux10' direct represents '0' with '-1312'
c Var 'aux10' direct represents '1' with '1312'
c Var 'aux10' order represents '1' with '1'
c Var 'aux10' order represents '0' with '-1312'
c Encoding variable: aux11 with domain: bool (representing constraint ((x_00004_00004 + x_00005_00004 + x_00006_00004 + x_00006_00005)=tv=20))
c Var 'aux11' direct represents '0' with '-1313'
c Var 'aux11' direct represents '1' with '1313'
c Var 'aux11' order represents '1' with '1'
c Var 'aux11' order represents '0' with '-1313'
c Encoding variable: aux12 with domain: bool (representing constraint ((x_00004_00007 + x_00005_00007 + x_00005_00008)=tv=23))
c Var 'aux12' direct represents '0' with '-1314'
c Var 'aux12' direct represents '1' with '1314'
c Var 'aux12' order represents '1' with '1'
c Var 'aux12' order represents '0' with '-1314'
c Encoding variable: aux13 with domain: bool (representing constraint ((x_00004_00009 + x_00005_00009)=tv=10))
c Var 'aux13' direct represents '0' with '-1315'
c Var 'aux13' direct represents '1' with '1315'
c Var 'aux13' order represents '1' with '1'
c Var 'aux13' order represents '0' with '-1315'
c Encoding variable: aux14 with domain: bool (representing constraint ((x_00007_00001 + x_00006_00001)=tv=7))
c Var 'aux14' direct represents '0' with '-1316'
c Var 'aux14' direct represents '1' with '1316'
c Var 'aux14' order represents '1' with '1'
c Var 'aux14' order represents '0' with '-1316'
c Encoding variable: aux15 with domain: bool (representing constraint ((x_00007_00002 + x_00006_00002)=tv=8))
c Var 'aux15' direct represents '0' with '-1317'
c Var 'aux15' direct represents '1' with '1317'
c Var 'aux15' order represents '1' with '1'
c Var 'aux15' order represents '0' with '-1317'
c Encoding variable: aux16 with domain: bool (representing constraint ((x_00007_00003 + x_00008_00003 + x_00006_00003)=tv=18))
c Var 'aux16' direct represents '0' with '-1318'
c Var 'aux16' direct represents '1' with '1318'
c Var 'aux16' order represents '1' with '1'
c Var 'aux16' order represents '0' with '-1318'
c Encoding variable: aux17 with domain: bool (representing constraint ((x_00007_00006 + x_00006_00006)=tv=15))
c Var 'aux17' direct represents '0' with '-1319'
c Var 'aux17' direct represents '1' with '1319'
c Var 'aux17' order represents '1' with '1'
c Var 'aux17' order represents '0' with '-1319'
c Encoding variable: aux18 with domain: bool (representing constraint ((x_00006_00007 + x_00006_00008 + x_00006_00009)=tv=11))
c Var 'aux18' direct represents '0' with '-1320'
c Var 'aux18' direct represents '1' with '1320'
c Var 'aux18' order represents '1' with '1'
c Var 'aux18' order represents '0' with '-1320'
c Encoding variable: aux19 with domain: bool (representing constraint ((x_00007_00004 + x_00007_00005)=tv=5))
c Var 'aux19' direct represents '0' with '-1321'
c Var 'aux19' direct represents '1' with '1321'
c Var 'aux19' order represents '1' with '1'
c Var 'aux19' order represents '0' with '-1321'
c Encoding variable: aux20 with domain: bool (representing constraint ((x_00007_00007 + x_00007_00008)=tv=15))
c Var 'aux20' direct represents '0' with '-1322'
c Var 'aux20' direct represents '1' with '1322'
c Var 'aux20' order represents '1' with '1'
c Var 'aux20' order represents '0' with '-1322'
c Encoding variable: aux21 with domain: bool (representing constraint ((x_00007_00009 + x_00008_00009 + x_00009_00008 + x_00009_00009)=tv=16))
c Var 'aux21' direct represents '0' with '-1323'
c Var 'aux21' direct represents '1' with '1323'
c Var 'aux21' order represents '1' with '1'
c Var 'aux21' order represents '0' with '-1323'
c Encoding variable: aux22 with domain: bool (representing constraint ((x_00008_00001 + x_00008_00002)=tv=5))
c Var 'aux22' direct represents '0' with '-1324'
c Var 'aux22' direct represents '1' with '1324'
c Var 'aux22' order represents '1' with '1'
c Var 'aux22' order represents '0' with '-1324'
c Encoding variable: aux23 with domain: bool (representing constraint ((x_00008_00004 + x_00008_00005 + x_00009_00005)=tv=14))
c Var 'aux23' direct represents '0' with '-1325'
c Var 'aux23' direct represents '1' with '1325'
c Var 'aux23' order represents '1' with '1'
c Var 'aux23' order represents '0' with '-1325'
c Encoding variable: aux24 with domain: bool (representing constraint ((x_00008_00006 + x_00009_00006)=tv=11))
c Var 'aux24' direct represents '0' with '-1326'
c Var 'aux24' direct represents '1' with '1326'
c Var 'aux24' order represents '1' with '1'
c Var 'aux24' order represents '0' with '-1326'
c Encoding variable: aux25 with domain: bool (representing constraint ((x_00008_00007 + x_00008_00008 + x_00009_00007)=tv=14))
c Var 'aux25' direct represents '0' with '-1327'
c Var 'aux25' direct represents '1' with '1327'
c Var 'aux25' order represents '1' with '1'
c Var 'aux25' order represents '0' with '-1327'
c Encoding variable: aux26 with domain: bool (representing constraint ((x_00009_00001 + x_00009_00002)=tv=17))
c Var 'aux26' direct represents '0' with '-1328'
c Var 'aux26' direct represents '1' with '1328'
c Var 'aux26' order represents '1' with '1'
c Var 'aux26' order represents '0' with '-1328'
c Encoding variable: aux27 with domain: bool (representing constraint ((x_00009_00003 + x_00009_00004)=tv=8))
c Var 'aux27' direct represents '0' with '-1329'
c Var 'aux27' direct represents '1' with '1329'
c Var 'aux27' order represents '1' with '1'
c Var 'aux27' order represents '0' with '-1329'
c Encoding variable: aux28 with domain: bool (representing constraint (x_00002_00009 != x_00001_00009))
c Var 'aux28' direct represents '0' with '-1330'
c Var 'aux28' direct represents '1' with '1330'
c Var 'aux28' order represents '1' with '1'
c Var 'aux28' order represents '0' with '-1330'
c Encoding variable: aux29 with domain: bool (representing constraint (x_00004_00009 != x_00005_00009))
c Var 'aux29' direct represents '0' with '-1331'
c Var 'aux29' direct represents '1' with '1331'
c Var 'aux29' order represents '1' with '1'
c Var 'aux29' order represents '0' with '-1331'
c Encoding variable: aux30 with domain: bool (representing constraint (x_00007_00001 != x_00006_00001))
c Var 'aux30' direct represents '0' with '-1332'
c Var 'aux30' direct represents '1' with '1332'
c Var 'aux30' order represents '1' with '1'
c Var 'aux30' order represents '0' with '-1332'
c Encoding variable: aux31 with domain: bool (representing constraint (x_00007_00002 != x_00006_00002))
c Var 'aux31' direct represents '0' with '-1333'
c Var 'aux31' direct represents '1' with '1333'
c Var 'aux31' order represents '1' with '1'
c Var 'aux31' order represents '0' with '-1333'
c Encoding variable: aux32 with domain: bool (representing constraint (x_00007_00006 != x_00006_00006))
c Var 'aux32' direct represents '0' with '-1334'
c Var 'aux32' direct represents '1' with '1334'
c Var 'aux32' order represents '1' with '1'
c Var 'aux32' order represents '0' with '-1334'
c Encoding variable: aux33 with domain: bool (representing constraint (x_00007_00004 != x_00007_00005))
c Var 'aux33' direct represents '0' with '-1335'
c Var 'aux33' direct represents '1' with '1335'
c Var 'aux33' order represents '1' with '1'
c Var 'aux33' order represents '0' with '-1335'
c Encoding variable: aux34 with domain: bool (representing constraint (x_00007_00007 != x_00007_00008))
c Var 'aux34' direct represents '0' with '-1336'
c Var 'aux34' direct represents '1' with '1336'
c Var 'aux34' order represents '1' with '1'
c Var 'aux34' order represents '0' with '-1336'
c Encoding variable: aux35 with domain: bool (representing constraint (x_00008_00001 != x_00008_00002))
c Var 'aux35' direct represents '0' with '-1337'
c Var 'aux35' direct represents '1' with '1337'
c Var 'aux35' order represents '1' with '1'
c Var 'aux35' order represents '0' with '-1337'
c Encoding variable: aux36 with domain: bool (representing constraint (x_00008_00006 != x_00009_00006))
c Var 'aux36' direct represents '0' with '-1338'
c Var 'aux36' direct represents '1' with '1338'
c Var 'aux36' order represents '1' with '1'
c Var 'aux36' order represents '0' with '-1338'
c Encoding variable: aux37 with domain: bool (representing constraint (x_00009_00001 != x_00009_00002))
c Var 'aux37' direct represents '0' with '-1339'
c Var 'aux37' direct represents '1' with '1339'
c Var 'aux37' order represents '1' with '1'
c Var 'aux37' order represents '0' with '-1339'
c Encoding variable: aux38 with domain: bool (representing constraint (x_00009_00003 != x_00009_00004))
c Var 'aux38' direct represents '0' with '-1340'
c Var 'aux38' direct represents '1' with '1340'
c Var 'aux38' order represents '1' with '1'
c Var 'aux38' order represents '0' with '-1340'
c Encoding variable: aux39 with domain: bool (representing constraint (((x_00003_00001=1) + (x_00008_00001=1) + (x_00001_00001=1) + (x_00006_00001=1) + (x_00004_00001=1) + (x_00009_00001=1) + (x_00002_00001=1) + (x_00007_00001=1) + (x_00005_00001=1))=tv=1))
c Var 'aux39' direct represents '0' with '-1341'
c Var 'aux39' direct represents '1' with '1341'
c Var 'aux39' order represents '1' with '1'
c Var 'aux39' order represents '0' with '-1341'
c Encoding variable: aux40 with domain: bool (representing constraint (((x_00003_00001=2) + (x_00008_00001=2) + (x_00001_00001=2) + (x_00006_00001=2) + (x_00004_00001=2) + (x_00009_00001=2) + (x_00002_00001=2) + (x_00007_00001=2) + (x_00005_00001=2))=tv=1))
c Var 'aux40' direct represents '0' with '-1342'
c Var 'aux40' direct represents '1' with '1342'
c Var 'aux40' order represents '1' with '1'
c Var 'aux40' order represents '0' with '-1342'
c Encoding variable: aux41 with domain: bool (representing constraint (((x_00003_00001=3) + (x_00008_00001=3) + (x_00001_00001=3) + (x_00006_00001=3) + (x_00004_00001=3) + (x_00009_00001=3) + (x_00002_00001=3) + (x_00007_00001=3) + (x_00005_00001=3))=tv=1))
c Var 'aux41' direct represents '0' with '-1343'
c Var 'aux41' direct represents '1' with '1343'
c Var 'aux41' order represents '1' with '1'
c Var 'aux41' order represents '0' with '-1343'
c Encoding variable: aux42 with domain: bool (representing constraint (((x_00003_00001=4) + (x_00008_00001=4) + (x_00001_00001=4) + (x_00006_00001=4) + (x_00004_00001=4) + (x_00009_00001=4) + (x_00002_00001=4) + (x_00007_00001=4) + (x_00005_00001=4))=tv=1))
c Var 'aux42' direct represents '0' with '-1344'
c Var 'aux42' direct represents '1' with '1344'
c Var 'aux42' order represents '1' with '1'
c Var 'aux42' order represents '0' with '-1344'
c Encoding variable: aux43 with domain: bool (representing constraint (((x_00003_00001=5) + (x_00008_00001=5) + (x_00001_00001=5) + (x_00006_00001=5) + (x_00004_00001=5) + (x_00009_00001=5) + (x_00002_00001=5) + (x_00007_00001=5) + (x_00005_00001=5))=tv=1))
c Var 'aux43' direct represents '0' with '-1345'
c Var 'aux43' direct represents '1' with '1345'
c Var 'aux43' order represents '1' with '1'
c Var 'aux43' order represents '0' with '-1345'
c Encoding variable: aux44 with domain: bool (representing constraint (((x_00003_00001=6) + (x_00008_00001=6) + (x_00001_00001=6) + (x_00006_00001=6) + (x_00004_00001=6) + (x_00009_00001=6) + (x_00002_00001=6) + (x_00007_00001=6) + (x_00005_00001=6))=tv=1))
c Var 'aux44' direct represents '0' with '-1346'
c Var 'aux44' direct represents '1' with '1346'
c Var 'aux44' order represents '1' with '1'
c Var 'aux44' order represents '0' with '-1346'
c Encoding variable: aux45 with domain: bool (representing constraint (((x_00003_00001=7) + (x_00008_00001=7) + (x_00001_00001=7) + (x_00006_00001=7) + (x_00004_00001=7) + (x_00009_00001=7) + (x_00002_00001=7) + (x_00007_00001=7) + (x_00005_00001=7))=tv=1))
c Var 'aux45' direct represents '0' with '-1347'
c Var 'aux45' direct represents '1' with '1347'
c Var 'aux45' order represents '1' with '1'
c Var 'aux45' order represents '0' with '-1347'
c Encoding variable: aux46 with domain: bool (representing constraint (((x_00003_00001=8) + (x_00008_00001=8) + (x_00001_00001=8) + (x_00006_00001=8) + (x_00004_00001=8) + (x_00009_00001=8) + (x_00002_00001=8) + (x_00007_00001=8) + (x_00005_00001=8))=tv=1))
c Var 'aux46' direct represents '0' with '-1348'
c Var 'aux46' direct represents '1' with '1348'
c Var 'aux46' order represents '1' with '1'
c Var 'aux46' order represents '0' with '-1348'
c Encoding variable: aux47 with domain: bool (representing constraint (((x_00003_00001=9) + (x_00008_00001=9) + (x_00001_00001=9) + (x_00006_00001=9) + (x_00004_00001=9) + (x_00009_00001=9) + (x_00002_00001=9) + (x_00007_00001=9) + (x_00005_00001=9))=tv=1))
c Var 'aux47' direct represents '0' with '-1349'
c Var 'aux47' direct represents '1' with '1349'
c Var 'aux47' order represents '1' with '1'
c Var 'aux47' order represents '0' with '-1349'
c Encoding variable: aux48 with domain: bool (representing constraint (((x_00003_00002=1) + (x_00008_00002=1) + (x_00001_00002=1) + (x_00006_00002=1) + (x_00004_00002=1) + (x_00009_00002=1) + (x_00002_00002=1) + (x_00007_00002=1) + (x_00005_00002=1))=tv=1))
c Var 'aux48' direct represents '0' with '-1350'
c Var 'aux48' direct represents '1' with '1350'
c Var 'aux48' order represents '1' with '1'
c Var 'aux48' order represents '0' with '-1350'
c Encoding variable: aux49 with domain: bool (representing constraint (((x_00003_00002=2) + (x_00008_00002=2) + (x_00001_00002=2) + (x_00006_00002=2) + (x_00004_00002=2) + (x_00009_00002=2) + (x_00002_00002=2) + (x_00007_00002=2) + (x_00005_00002=2))=tv=1))
c Var 'aux49' direct represents '0' with '-1351'
c Var 'aux49' direct represents '1' with '1351'
c Var 'aux49' order represents '1' with '1'
c Var 'aux49' order represents '0' with '-1351'
c Encoding variable: aux50 with domain: bool (representing constraint (((x_00003_00002=3) + (x_00008_00002=3) + (x_00001_00002=3) + (x_00006_00002=3) + (x_00004_00002=3) + (x_00009_00002=3) + (x_00002_00002=3) + (x_00007_00002=3) + (x_00005_00002=3))=tv=1))
c Var 'aux50' direct represents '0' with '-1352'
c Var 'aux50' direct represents '1' with '1352'
c Var 'aux50' order represents '1' with '1'
c Var 'aux50' order represents '0' with '-1352'
c Encoding variable: aux51 with domain: bool (representing constraint (((x_00003_00002=4) + (x_00008_00002=4) + (x_00001_00002=4) + (x_00006_00002=4) + (x_00004_00002=4) + (x_00009_00002=4) + (x_00002_00002=4) + (x_00007_00002=4) + (x_00005_00002=4))=tv=1))
c Var 'aux51' direct represents '0' with '-1353'
c Var 'aux51' direct represents '1' with '1353'
c Var 'aux51' order represents '1' with '1'
c Var 'aux51' order represents '0' with '-1353'
c Encoding variable: aux52 with domain: bool (representing constraint (((x_00003_00002=5) + (x_00008_00002=5) + (x_00001_00002=5) + (x_00006_00002=5) + (x_00004_00002=5) + (x_00009_00002=5) + (x_00002_00002=5) + (x_00007_00002=5) + (x_00005_00002=5))=tv=1))
c Var 'aux52' direct represents '0' with '-1354'
c Var 'aux52' direct represents '1' with '1354'
c Var 'aux52' order represents '1' with '1'
c Var 'aux52' order represents '0' with '-1354'
c Encoding variable: aux53 with domain: bool (representing constraint (((x_00003_00002=6) + (x_00008_00002=6) + (x_00001_00002=6) + (x_00006_00002=6) + (x_00004_00002=6) + (x_00009_00002=6) + (x_00002_00002=6) + (x_00007_00002=6) + (x_00005_00002=6))=tv=1))
c Var 'aux53' direct represents '0' with '-1355'
c Var 'aux53' direct represents '1' with '1355'
c Var 'aux53' order represents '1' with '1'
c Var 'aux53' order represents '0' with '-1355'
c Encoding variable: aux54 with domain: bool (representing constraint (((x_00003_00002=7) + (x_00008_00002=7) + (x_00001_00002=7) + (x_00006_00002=7) + (x_00004_00002=7) + (x_00009_00002=7) + (x_00002_00002=7) + (x_00007_00002=7) + (x_00005_00002=7))=tv=1))
c Var 'aux54' direct represents '0' with '-1356'
c Var 'aux54' direct represents '1' with '1356'
c Var 'aux54' order represents '1' with '1'
c Var 'aux54' order represents '0' with '-1356'
c Encoding variable: aux55 with domain: bool (representing constraint (((x_00003_00002=8) + (x_00008_00002=8) + (x_00001_00002=8) + (x_00006_00002=8) + (x_00004_00002=8) + (x_00009_00002=8) + (x_00002_00002=8) + (x_00007_00002=8) + (x_00005_00002=8))=tv=1))
c Var 'aux55' direct represents '0' with '-1357'
c Var 'aux55' direct represents '1' with '1357'
c Var 'aux55' order represents '1' with '1'
c Var 'aux55' order represents '0' with '-1357'
c Encoding variable: aux56 with domain: bool (representing constraint (((x_00003_00002=9) + (x_00008_00002=9) + (x_00001_00002=9) + (x_00006_00002=9) + (x_00004_00002=9) + (x_00009_00002=9) + (x_00002_00002=9) + (x_00007_00002=9) + (x_00005_00002=9))=tv=1))
c Var 'aux56' direct represents '0' with '-1358'
c Var 'aux56' direct represents '1' with '1358'
c Var 'aux56' order represents '1' with '1'
c Var 'aux56' order represents '0' with '-1358'
c Encoding variable: aux57 with domain: bool (representing constraint (((x_00003_00003=1) + (x_00008_00003=1) + (x_00001_00003=1) + (x_00006_00003=1) + (x_00004_00003=1) + (x_00009_00003=1) + (x_00002_00003=1) + (x_00007_00003=1) + (x_00005_00003=1))=tv=1))
c Var 'aux57' direct represents '0' with '-1359'
c Var 'aux57' direct represents '1' with '1359'
c Var 'aux57' order represents '1' with '1'
c Var 'aux57' order represents '0' with '-1359'
c Encoding variable: aux58 with domain: bool (representing constraint (((x_00003_00003=2) + (x_00008_00003=2) + (x_00001_00003=2) + (x_00006_00003=2) + (x_00004_00003=2) + (x_00009_00003=2) + (x_00002_00003=2) + (x_00007_00003=2) + (x_00005_00003=2))=tv=1))
c Var 'aux58' direct represents '0' with '-1360'
c Var 'aux58' direct represents '1' with '1360'
c Var 'aux58' order represents '1' with '1'
c Var 'aux58' order represents '0' with '-1360'
c Encoding variable: aux59 with domain: bool (representing constraint (((x_00003_00003=3) + (x_00008_00003=3) + (x_00001_00003=3) + (x_00006_00003=3) + (x_00004_00003=3) + (x_00009_00003=3) + (x_00002_00003=3) + (x_00007_00003=3) + (x_00005_00003=3))=tv=1))
c Var 'aux59' direct represents '0' with '-1361'
c Var 'aux59' direct represents '1' with '1361'
c Var 'aux59' order represents '1' with '1'
c Var 'aux59' order represents '0' with '-1361'
c Encoding variable: aux60 with domain: bool (representing constraint (((x_00003_00003=4) + (x_00008_00003=4) + (x_00001_00003=4) + (x_00006_00003=4) + (x_00004_00003=4) + (x_00009_00003=4) + (x_00002_00003=4) + (x_00007_00003=4) + (x_00005_00003=4))=tv=1))
c Var 'aux60' direct represents '0' with '-1362'
c Var 'aux60' direct represents '1' with '1362'
c Var 'aux60' order represents '1' with '1'
c Var 'aux60' order represents '0' with '-1362'
c Encoding variable: aux61 with domain: bool (representing constraint (((x_00003_00003=5) + (x_00008_00003=5) + (x_00001_00003=5) + (x_00006_00003=5) + (x_00004_00003=5) + (x_00009_00003=5) + (x_00002_00003=5) + (x_00007_00003=5) + (x_00005_00003=5))=tv=1))
c Var 'aux61' direct represents '0' with '-1363'
c Var 'aux61' direct represents '1' with '1363'
c Var 'aux61' order represents '1' with '1'
c Var 'aux61' order represents '0' with '-1363'
c Encoding variable: aux62 with domain: bool (representing constraint (((x_00003_00003=6) + (x_00008_00003=6) + (x_00001_00003=6) + (x_00006_00003=6) + (x_00004_00003=6) + (x_00009_00003=6) + (x_00002_00003=6) + (x_00007_00003=6) + (x_00005_00003=6))=tv=1))
c Var 'aux62' direct represents '0' with '-1364'
c Var 'aux62' direct represents '1' with '1364'
c Var 'aux62' order represents '1' with '1'
c Var 'aux62' order represents '0' with '-1364'
c Encoding variable: aux63 with domain: bool (representing constraint (((x_00003_00003=7) + (x_00008_00003=7) + (x_00001_00003=7) + (x_00006_00003=7) + (x_00004_00003=7) + (x_00009_00003=7) + (x_00002_00003=7) + (x_00007_00003=7) + (x_00005_00003=7))=tv=1))
c Var 'aux63' direct represents '0' with '-1365'
c Var 'aux63' direct represents '1' with '1365'
c Var 'aux63' order represents '1' with '1'
c Var 'aux63' order represents '0' with '-1365'
c Encoding variable: aux64 with domain: bool (representing constraint (((x_00003_00003=8) + (x_00008_00003=8) + (x_00001_00003=8) + (x_00006_00003=8) + (x_00004_00003=8) + (x_00009_00003=8) + (x_00002_00003=8) + (x_00007_00003=8) + (x_00005_00003=8))=tv=1))
c Var 'aux64' direct represents '0' with '-1366'
c Var 'aux64' direct represents '1' with '1366'
c Var 'aux64' order represents '1' with '1'
c Var 'aux64' order represents '0' with '-1366'
c Encoding variable: aux65 with domain: bool (representing constraint (((x_00003_00003=9) + (x_00008_00003=9) + (x_00001_00003=9) + (x_00006_00003=9) + (x_00004_00003=9) + (x_00009_00003=9) + (x_00002_00003=9) + (x_00007_00003=9) + (x_00005_00003=9))=tv=1))
c Var 'aux65' direct represents '0' with '-1367'
c Var 'aux65' direct represents '1' with '1367'
c Var 'aux65' order represents '1' with '1'
c Var 'aux65' order represents '0' with '-1367'
c Encoding variable: aux66 with domain: bool (representing constraint (((x_00003_00004=1) + (x_00008_00004=1) + (x_00001_00004=1) + (x_00006_00004=1) + (x_00004_00004=1) + (x_00009_00004=1) + (x_00002_00004=1) + (x_00007_00004=1) + (x_00005_00004=1))=tv=1))
c Var 'aux66' direct represents '0' with '-1368'
c Var 'aux66' direct represents '1' with '1368'
c Var 'aux66' order represents '1' with '1'
c Var 'aux66' order represents '0' with '-1368'
c Encoding variable: aux67 with domain: bool (representing constraint (((x_00003_00004=2) + (x_00008_00004=2) + (x_00001_00004=2) + (x_00006_00004=2) + (x_00004_00004=2) + (x_00009_00004=2) + (x_00002_00004=2) + (x_00007_00004=2) + (x_00005_00004=2))=tv=1))
c Var 'aux67' direct represents '0' with '-1369'
c Var 'aux67' direct represents '1' with '1369'
c Var 'aux67' order represents '1' with '1'
c Var 'aux67' order represents '0' with '-1369'
c Encoding variable: aux68 with domain: bool (representing constraint (((x_00003_00004=3) + (x_00008_00004=3) + (x_00001_00004=3) + (x_00006_00004=3) + (x_00004_00004=3) + (x_00009_00004=3) + (x_00002_00004=3) + (x_00007_00004=3) + (x_00005_00004=3))=tv=1))
c Var 'aux68' direct represents '0' with '-1370'
c Var 'aux68' direct represents '1' with '1370'
c Var 'aux68' order represents '1' with '1'
c Var 'aux68' order represents '0' with '-1370'
c Encoding variable: aux69 with domain: bool (representing constraint (((x_00003_00004=4) + (x_00008_00004=4) + (x_00001_00004=4) + (x_00006_00004=4) + (x_00004_00004=4) + (x_00009_00004=4) + (x_00002_00004=4) + (x_00007_00004=4) + (x_00005_00004=4))=tv=1))
c Var 'aux69' direct represents '0' with '-1371'
c Var 'aux69' direct represents '1' with '1371'
c Var 'aux69' order represents '1' with '1'
c Var 'aux69' order represents '0' with '-1371'
c Encoding variable: aux70 with domain: bool (representing constraint (((x_00003_00004=5) + (x_00008_00004=5) + (x_00001_00004=5) + (x_00006_00004=5) + (x_00004_00004=5) + (x_00009_00004=5) + (x_00002_00004=5) + (x_00007_00004=5) + (x_00005_00004=5))=tv=1))
c Var 'aux70' direct represents '0' with '-1372'
c Var 'aux70' direct represents '1' with '1372'
c Var 'aux70' order represents '1' with '1'
c Var 'aux70' order represents '0' with '-1372'
c Encoding variable: aux71 with domain: bool (representing constraint (((x_00003_00004=6) + (x_00008_00004=6) + (x_00001_00004=6) + (x_00006_00004=6) + (x_00004_00004=6) + (x_00009_00004=6) + (x_00002_00004=6) + (x_00007_00004=6) + (x_00005_00004=6))=tv=1))
c Var 'aux71' direct represents '0' with '-1373'
c Var 'aux71' direct represents '1' with '1373'
c Var 'aux71' order represents '1' with '1'
c Var 'aux71' order represents '0' with '-1373'
c Encoding variable: aux72 with domain: bool (representing constraint (((x_00003_00004=7) + (x_00008_00004=7) + (x_00001_00004=7) + (x_00006_00004=7) + (x_00004_00004=7) + (x_00009_00004=7) + (x_00002_00004=7) + (x_00007_00004=7) + (x_00005_00004=7))=tv=1))
c Var 'aux72' direct represents '0' with '-1374'
c Var 'aux72' direct represents '1' with '1374'
c Var 'aux72' order represents '1' with '1'
c Var 'aux72' order represents '0' with '-1374'
c Encoding variable: aux73 with domain: bool (representing constraint (((x_00003_00004=8) + (x_00008_00004=8) + (x_00001_00004=8) + (x_00006_00004=8) + (x_00004_00004=8) + (x_00009_00004=8) + (x_00002_00004=8) + (x_00007_00004=8) + (x_00005_00004=8))=tv=1))
c Var 'aux73' direct represents '0' with '-1375'
c Var 'aux73' direct represents '1' with '1375'
c Var 'aux73' order represents '1' with '1'
c Var 'aux73' order represents '0' with '-1375'
c Encoding variable: aux74 with domain: bool (representing constraint (((x_00003_00004=9) + (x_00008_00004=9) + (x_00001_00004=9) + (x_00006_00004=9) + (x_00004_00004=9) + (x_00009_00004=9) + (x_00002_00004=9) + (x_00007_00004=9) + (x_00005_00004=9))=tv=1))
c Var 'aux74' direct represents '0' with '-1376'
c Var 'aux74' direct represents '1' with '1376'
c Var 'aux74' order represents '1' with '1'
c Var 'aux74' order represents '0' with '-1376'
c Encoding variable: aux75 with domain: bool (representing constraint (((x_00003_00005=1) + (x_00008_00005=1) + (x_00001_00005=1) + (x_00006_00005=1) + (x_00004_00005=1) + (x_00009_00005=1) + (x_00002_00005=1) + (x_00007_00005=1) + (x_00005_00005=1))=tv=1))
c Var 'aux75' direct represents '0' with '-1377'
c Var 'aux75' direct represents '1' with '1377'
c Var 'aux75' order represents '1' with '1'
c Var 'aux75' order represents '0' with '-1377'
c Encoding variable: aux76 with domain: bool (representing constraint (((x_00003_00005=2) + (x_00008_00005=2) + (x_00001_00005=2) + (x_00006_00005=2) + (x_00004_00005=2) + (x_00009_00005=2) + (x_00002_00005=2) + (x_00007_00005=2) + (x_00005_00005=2))=tv=1))
c Var 'aux76' direct represents '0' with '-1378'
c Var 'aux76' direct represents '1' with '1378'
c Var 'aux76' order represents '1' with '1'
c Var 'aux76' order represents '0' with '-1378'
c Encoding variable: aux77 with domain: bool (representing constraint (((x_00003_00005=3) + (x_00008_00005=3) + (x_00001_00005=3) + (x_00006_00005=3) + (x_00004_00005=3) + (x_00009_00005=3) + (x_00002_00005=3) + (x_00007_00005=3) + (x_00005_00005=3))=tv=1))
c Var 'aux77' direct represents '0' with '-1379'
c Var 'aux77' direct represents '1' with '1379'
c Var 'aux77' order represents '1' with '1'
c Var 'aux77' order represents '0' with '-1379'
c Encoding variable: aux78 with domain: bool (representing constraint (((x_00003_00005=4) + (x_00008_00005=4) + (x_00001_00005=4) + (x_00006_00005=4) + (x_00004_00005=4) + (x_00009_00005=4) + (x_00002_00005=4) + (x_00007_00005=4) + (x_00005_00005=4))=tv=1))
c Var 'aux78' direct represents '0' with '-1380'
c Var 'aux78' direct represents '1' with '1380'
c Var 'aux78' order represents '1' with '1'
c Var 'aux78' order represents '0' with '-1380'
c Encoding variable: aux79 with domain: bool (representing constraint (((x_00003_00005=5) + (x_00008_00005=5) + (x_00001_00005=5) + (x_00006_00005=5) + (x_00004_00005=5) + (x_00009_00005=5) + (x_00002_00005=5) + (x_00007_00005=5) + (x_00005_00005=5))=tv=1))
c Var 'aux79' direct represents '0' with '-1381'
c Var 'aux79' direct represents '1' with '1381'
c Var 'aux79' order represents '1' with '1'
c Var 'aux79' order represents '0' with '-1381'
c Encoding variable: aux80 with domain: bool (representing constraint (((x_00003_00005=6) + (x_00008_00005=6) + (x_00001_00005=6) + (x_00006_00005=6) + (x_00004_00005=6) + (x_00009_00005=6) + (x_00002_00005=6) + (x_00007_00005=6) + (x_00005_00005=6))=tv=1))
c Var 'aux80' direct represents '0' with '-1382'
c Var 'aux80' direct represents '1' with '1382'
c Var 'aux80' order represents '1' with '1'
c Var 'aux80' order represents '0' with '-1382'
c Encoding variable: aux81 with domain: bool (representing constraint (((x_00003_00005=7) + (x_00008_00005=7) + (x_00001_00005=7) + (x_00006_00005=7) + (x_00004_00005=7) + (x_00009_00005=7) + (x_00002_00005=7) + (x_00007_00005=7) + (x_00005_00005=7))=tv=1))
c Var 'aux81' direct represents '0' with '-1383'
c Var 'aux81' direct represents '1' with '1383'
c Var 'aux81' order represents '1' with '1'
c Var 'aux81' order represents '0' with '-1383'
c Encoding variable: aux82 with domain: bool (representing constraint (((x_00003_00005=8) + (x_00008_00005=8) + (x_00001_00005=8) + (x_00006_00005=8) + (x_00004_00005=8) + (x_00009_00005=8) + (x_00002_00005=8) + (x_00007_00005=8) + (x_00005_00005=8))=tv=1))
c Var 'aux82' direct represents '0' with '-1384'
c Var 'aux82' direct represents '1' with '1384'
c Var 'aux82' order represents '1' with '1'
c Var 'aux82' order represents '0' with '-1384'
c Encoding variable: aux83 with domain: bool (representing constraint (((x_00003_00005=9) + (x_00008_00005=9) + (x_00001_00005=9) + (x_00006_00005=9) + (x_00004_00005=9) + (x_00009_00005=9) + (x_00002_00005=9) + (x_00007_00005=9) + (x_00005_00005=9))=tv=1))
c Var 'aux83' direct represents '0' with '-1385'
c Var 'aux83' direct represents '1' with '1385'
c Var 'aux83' order represents '1' with '1'
c Var 'aux83' order represents '0' with '-1385'
c Encoding variable: aux84 with domain: bool (representing constraint (((x_00003_00006=1) + (x_00008_00006=1) + (x_00001_00006=1) + (x_00006_00006=1) + (x_00004_00006=1) + (x_00009_00006=1) + (x_00002_00006=1) + (x_00007_00006=1) + (x_00005_00006=1))=tv=1))
c Var 'aux84' direct represents '0' with '-1386'
c Var 'aux84' direct represents '1' with '1386'
c Var 'aux84' order represents '1' with '1'
c Var 'aux84' order represents '0' with '-1386'
c Encoding variable: aux85 with domain: bool (representing constraint (((x_00003_00006=2) + (x_00008_00006=2) + (x_00001_00006=2) + (x_00006_00006=2) + (x_00004_00006=2) + (x_00009_00006=2) + (x_00002_00006=2) + (x_00007_00006=2) + (x_00005_00006=2))=tv=1))
c Var 'aux85' direct represents '0' with '-1387'
c Var 'aux85' direct represents '1' with '1387'
c Var 'aux85' order represents '1' with '1'
c Var 'aux85' order represents '0' with '-1387'
c Encoding variable: aux86 with domain: bool (representing constraint (((x_00003_00006=3) + (x_00008_00006=3) + (x_00001_00006=3) + (x_00006_00006=3) + (x_00004_00006=3) + (x_00009_00006=3) + (x_00002_00006=3) + (x_00007_00006=3) + (x_00005_00006=3))=tv=1))
c Var 'aux86' direct represents '0' with '-1388'
c Var 'aux86' direct represents '1' with '1388'
c Var 'aux86' order represents '1' with '1'
c Var 'aux86' order represents '0' with '-1388'
c Encoding variable: aux87 with domain: bool (representing constraint (((x_00003_00006=4) + (x_00008_00006=4) + (x_00001_00006=4) + (x_00006_00006=4) + (x_00004_00006=4) + (x_00009_00006=4) + (x_00002_00006=4) + (x_00007_00006=4) + (x_00005_00006=4))=tv=1))
c Var 'aux87' direct represents '0' with '-1389'
c Var 'aux87' direct represents '1' with '1389'
c Var 'aux87' order represents '1' with '1'
c Var 'aux87' order represents '0' with '-1389'
c Encoding variable: aux88 with domain: bool (representing constraint (((x_00003_00006=5) + (x_00008_00006=5) + (x_00001_00006=5) + (x_00006_00006=5) + (x_00004_00006=5) + (x_00009_00006=5) + (x_00002_00006=5) + (x_00007_00006=5) + (x_00005_00006=5))=tv=1))
c Var 'aux88' direct represents '0' with '-1390'
c Var 'aux88' direct represents '1' with '1390'
c Var 'aux88' order represents '1' with '1'
c Var 'aux88' order represents '0' with '-1390'
c Encoding variable: aux89 with domain: bool (representing constraint (((x_00003_00006=6) + (x_00008_00006=6) + (x_00001_00006=6) + (x_00006_00006=6) + (x_00004_00006=6) + (x_00009_00006=6) + (x_00002_00006=6) + (x_00007_00006=6) + (x_00005_00006=6))=tv=1))
c Var 'aux89' direct represents '0' with '-1391'
c Var 'aux89' direct represents '1' with '1391'
c Var 'aux89' order represents '1' with '1'
c Var 'aux89' order represents '0' with '-1391'
c Encoding variable: aux90 with domain: bool (representing constraint (((x_00003_00006=7) + (x_00008_00006=7) + (x_00001_00006=7) + (x_00006_00006=7) + (x_00004_00006=7) + (x_00009_00006=7) + (x_00002_00006=7) + (x_00007_00006=7) + (x_00005_00006=7))=tv=1))
c Var 'aux90' direct represents '0' with '-1392'
c Var 'aux90' direct represents '1' with '1392'
c Var 'aux90' order represents '1' with '1'
c Var 'aux90' order represents '0' with '-1392'
c Encoding variable: aux91 with domain: bool (representing constraint (((x_00003_00006=8) + (x_00008_00006=8) + (x_00001_00006=8) + (x_00006_00006=8) + (x_00004_00006=8) + (x_00009_00006=8) + (x_00002_00006=8) + (x_00007_00006=8) + (x_00005_00006=8))=tv=1))
c Var 'aux91' direct represents '0' with '-1393'
c Var 'aux91' direct represents '1' with '1393'
c Var 'aux91' order represents '1' with '1'
c Var 'aux91' order represents '0' with '-1393'
c Encoding variable: aux92 with domain: bool (representing constraint (((x_00003_00006=9) + (x_00008_00006=9) + (x_00001_00006=9) + (x_00006_00006=9) + (x_00004_00006=9) + (x_00009_00006=9) + (x_00002_00006=9) + (x_00007_00006=9) + (x_00005_00006=9))=tv=1))
c Var 'aux92' direct represents '0' with '-1394'
c Var 'aux92' direct represents '1' with '1394'
c Var 'aux92' order represents '1' with '1'
c Var 'aux92' order represents '0' with '-1394'
c Encoding variable: aux93 with domain: bool (representing constraint (((x_00003_00007=1) + (x_00008_00007=1) + (x_00001_00007=1) + (x_00006_00007=1) + (x_00004_00007=1) + (x_00009_00007=1) + (x_00002_00007=1) + (x_00007_00007=1) + (x_00005_00007=1))=tv=1))
c Var 'aux93' direct represents '0' with '-1395'
c Var 'aux93' direct represents '1' with '1395'
c Var 'aux93' order represents '1' with '1'
c Var 'aux93' order represents '0' with '-1395'
c Encoding variable: aux94 with domain: bool (representing constraint (((x_00003_00007=2) + (x_00008_00007=2) + (x_00001_00007=2) + (x_00006_00007=2) + (x_00004_00007=2) + (x_00009_00007=2) + (x_00002_00007=2) + (x_00007_00007=2) + (x_00005_00007=2))=tv=1))
c Var 'aux94' direct represents '0' with '-1396'
c Var 'aux94' direct represents '1' with '1396'
c Var 'aux94' order represents '1' with '1'
c Var 'aux94' order represents '0' with '-1396'
c Encoding variable: aux95 with domain: bool (representing constraint (((x_00003_00007=3) + (x_00008_00007=3) + (x_00001_00007=3) + (x_00006_00007=3) + (x_00004_00007=3) + (x_00009_00007=3) + (x_00002_00007=3) + (x_00007_00007=3) + (x_00005_00007=3))=tv=1))
c Var 'aux95' direct represents '0' with '-1397'
c Var 'aux95' direct represents '1' with '1397'
c Var 'aux95' order represents '1' with '1'
c Var 'aux95' order represents '0' with '-1397'
c Encoding variable: aux96 with domain: bool (representing constraint (((x_00003_00007=4) + (x_00008_00007=4) + (x_00001_00007=4) + (x_00006_00007=4) + (x_00004_00007=4) + (x_00009_00007=4) + (x_00002_00007=4) + (x_00007_00007=4) + (x_00005_00007=4))=tv=1))
c Var 'aux96' direct represents '0' with '-1398'
c Var 'aux96' direct represents '1' with '1398'
c Var 'aux96' order represents '1' with '1'
c Var 'aux96' order represents '0' with '-1398'
c Encoding variable: aux97 with domain: bool (representing constraint (((x_00003_00007=5) + (x_00008_00007=5) + (x_00001_00007=5) + (x_00006_00007=5) + (x_00004_00007=5) + (x_00009_00007=5) + (x_00002_00007=5) + (x_00007_00007=5) + (x_00005_00007=5))=tv=1))
c Var 'aux97' direct represents '0' with '-1399'
c Var 'aux97' direct represents '1' with '1399'
c Var 'aux97' order represents '1' with '1'
c Var 'aux97' order represents '0' with '-1399'
c Encoding variable: aux98 with domain: bool (representing constraint (((x_00003_00007=6) + (x_00008_00007=6) + (x_00001_00007=6) + (x_00006_00007=6) + (x_00004_00007=6) + (x_00009_00007=6) + (x_00002_00007=6) + (x_00007_00007=6) + (x_00005_00007=6))=tv=1))
c Var 'aux98' direct represents '0' with '-1400'
c Var 'aux98' direct represents '1' with '1400'
c Var 'aux98' order represents '1' with '1'
c Var 'aux98' order represents '0' with '-1400'
c Encoding variable: aux99 with domain: bool (representing constraint (((x_00003_00007=7) + (x_00008_00007=7) + (x_00001_00007=7) + (x_00006_00007=7) + (x_00004_00007=7) + (x_00009_00007=7) + (x_00002_00007=7) + (x_00007_00007=7) + (x_00005_00007=7))=tv=1))
c Var 'aux99' direct represents '0' with '-1401'
c Var 'aux99' direct represents '1' with '1401'
c Var 'aux99' order represents '1' with '1'
c Var 'aux99' order represents '0' with '-1401'
c Encoding variable: aux100 with domain: bool (representing constraint (((x_00003_00007=8) + (x_00008_00007=8) + (x_00001_00007=8) + (x_00006_00007=8) + (x_00004_00007=8) + (x_00009_00007=8) + (x_00002_00007=8) + (x_00007_00007=8) + (x_00005_00007=8))=tv=1))
c Var 'aux100' direct represents '0' with '-1402'
c Var 'aux100' direct represents '1' with '1402'
c Var 'aux100' order represents '1' with '1'
c Var 'aux100' order represents '0' with '-1402'
c Encoding variable: aux101 with domain: bool (representing constraint (((x_00003_00007=9) + (x_00008_00007=9) + (x_00001_00007=9) + (x_00006_00007=9) + (x_00004_00007=9) + (x_00009_00007=9) + (x_00002_00007=9) + (x_00007_00007=9) + (x_00005_00007=9))=tv=1))
c Var 'aux101' direct represents '0' with '-1403'
c Var 'aux101' direct represents '1' with '1403'
c Var 'aux101' order represents '1' with '1'
c Var 'aux101' order represents '0' with '-1403'
c Encoding variable: aux102 with domain: bool (representing constraint (((x_00003_00008=1) + (x_00008_00008=1) + (x_00001_00008=1) + (x_00006_00008=1) + (x_00004_00008=1) + (x_00009_00008=1) + (x_00002_00008=1) + (x_00007_00008=1) + (x_00005_00008=1))=tv=1))
c Var 'aux102' direct represents '0' with '-1404'
c Var 'aux102' direct represents '1' with '1404'
c Var 'aux102' order represents '1' with '1'
c Var 'aux102' order represents '0' with '-1404'
c Encoding variable: aux103 with domain: bool (representing constraint (((x_00003_00008=2) + (x_00008_00008=2) + (x_00001_00008=2) + (x_00006_00008=2) + (x_00004_00008=2) + (x_00009_00008=2) + (x_00002_00008=2) + (x_00007_00008=2) + (x_00005_00008=2))=tv=1))
c Var 'aux103' direct represents '0' with '-1405'
c Var 'aux103' direct represents '1' with '1405'
c Var 'aux103' order represents '1' with '1'
c Var 'aux103' order represents '0' with '-1405'
c Encoding variable: aux104 with domain: bool (representing constraint (((x_00003_00008=3) + (x_00008_00008=3) + (x_00001_00008=3) + (x_00006_00008=3) + (x_00004_00008=3) + (x_00009_00008=3) + (x_00002_00008=3) + (x_00007_00008=3) + (x_00005_00008=3))=tv=1))
c Var 'aux104' direct represents '0' with '-1406'
c Var 'aux104' direct represents '1' with '1406'
c Var 'aux104' order represents '1' with '1'
c Var 'aux104' order represents '0' with '-1406'
c Encoding variable: aux105 with domain: bool (representing constraint (((x_00003_00008=4) + (x_00008_00008=4) + (x_00001_00008=4) + (x_00006_00008=4) + (x_00004_00008=4) + (x_00009_00008=4) + (x_00002_00008=4) + (x_00007_00008=4) + (x_00005_00008=4))=tv=1))
c Var 'aux105' direct represents '0' with '-1407'
c Var 'aux105' direct represents '1' with '1407'
c Var 'aux105' order represents '1' with '1'
c Var 'aux105' order represents '0' with '-1407'
c Encoding variable: aux106 with domain: bool (representing constraint (((x_00003_00008=5) + (x_00008_00008=5) + (x_00001_00008=5) + (x_00006_00008=5) + (x_00004_00008=5) + (x_00009_00008=5) + (x_00002_00008=5) + (x_00007_00008=5) + (x_00005_00008=5))=tv=1))
c Var 'aux106' direct represents '0' with '-1408'
c Var 'aux106' direct represents '1' with '1408'
c Var 'aux106' order represents '1' with '1'
c Var 'aux106' order represents '0' with '-1408'
c Encoding variable: aux107 with domain: bool (representing constraint (((x_00003_00008=6) + (x_00008_00008=6) + (x_00001_00008=6) + (x_00006_00008=6) + (x_00004_00008=6) + (x_00009_00008=6) + (x_00002_00008=6) + (x_00007_00008=6) + (x_00005_00008=6))=tv=1))
c Var 'aux107' direct represents '0' with '-1409'
c Var 'aux107' direct represents '1' with '1409'
c Var 'aux107' order represents '1' with '1'
c Var 'aux107' order represents '0' with '-1409'
c Encoding variable: aux108 with domain: bool (representing constraint (((x_00003_00008=7) + (x_00008_00008=7) + (x_00001_00008=7) + (x_00006_00008=7) + (x_00004_00008=7) + (x_00009_00008=7) + (x_00002_00008=7) + (x_00007_00008=7) + (x_00005_00008=7))=tv=1))
c Var 'aux108' direct represents '0' with '-1410'
c Var 'aux108' direct represents '1' with '1410'
c Var 'aux108' order represents '1' with '1'
c Var 'aux108' order represents '0' with '-1410'
c Encoding variable: aux109 with domain: bool (representing constraint (((x_00003_00008=8) + (x_00008_00008=8) + (x_00001_00008=8) + (x_00006_00008=8) + (x_00004_00008=8) + (x_00009_00008=8) + (x_00002_00008=8) + (x_00007_00008=8) + (x_00005_00008=8))=tv=1))
c Var 'aux109' direct represents '0' with '-1411'
c Var 'aux109' direct represents '1' with '1411'
c Var 'aux109' order represents '1' with '1'
c Var 'aux109' order represents '0' with '-1411'
c Encoding variable: aux110 with domain: bool (representing constraint (((x_00003_00008=9) + (x_00008_00008=9) + (x_00001_00008=9) + (x_00006_00008=9) + (x_00004_00008=9) + (x_00009_00008=9) + (x_00002_00008=9) + (x_00007_00008=9) + (x_00005_00008=9))=tv=1))
c Var 'aux110' direct represents '0' with '-1412'
c Var 'aux110' direct represents '1' with '1412'
c Var 'aux110' order represents '1' with '1'
c Var 'aux110' order represents '0' with '-1412'
c Encoding variable: aux111 with domain: bool (representing constraint (((x_00003_00009=1) + (x_00008_00009=1) + (x_00001_00009=1) + (x_00006_00009=1) + (x_00004_00009=1) + (x_00009_00009=1) + (x_00002_00009=1) + (x_00007_00009=1) + (x_00005_00009=1))=tv=1))
c Var 'aux111' direct represents '0' with '-1413'
c Var 'aux111' direct represents '1' with '1413'
c Var 'aux111' order represents '1' with '1'
c Var 'aux111' order represents '0' with '-1413'
c Encoding variable: aux112 with domain: bool (representing constraint (((x_00003_00009=2) + (x_00008_00009=2) + (x_00001_00009=2) + (x_00006_00009=2) + (x_00004_00009=2) + (x_00009_00009=2) + (x_00002_00009=2) + (x_00007_00009=2) + (x_00005_00009=2))=tv=1))
c Var 'aux112' direct represents '0' with '-1414'
c Var 'aux112' direct represents '1' with '1414'
c Var 'aux112' order represents '1' with '1'
c Var 'aux112' order represents '0' with '-1414'
c Encoding variable: aux113 with domain: bool (representing constraint (((x_00003_00009=3) + (x_00008_00009=3) + (x_00001_00009=3) + (x_00006_00009=3) + (x_00004_00009=3) + (x_00009_00009=3) + (x_00002_00009=3) + (x_00007_00009=3) + (x_00005_00009=3))=tv=1))
c Var 'aux113' direct represents '0' with '-1415'
c Var 'aux113' direct represents '1' with '1415'
c Var 'aux113' order represents '1' with '1'
c Var 'aux113' order represents '0' with '-1415'
c Encoding variable: aux114 with domain: bool (representing constraint (((x_00003_00009=4) + (x_00008_00009=4) + (x_00001_00009=4) + (x_00006_00009=4) + (x_00004_00009=4) + (x_00009_00009=4) + (x_00002_00009=4) + (x_00007_00009=4) + (x_00005_00009=4))=tv=1))
c Var 'aux114' direct represents '0' with '-1416'
c Var 'aux114' direct represents '1' with '1416'
c Var 'aux114' order represents '1' with '1'
c Var 'aux114' order represents '0' with '-1416'
c Encoding variable: aux115 with domain: bool (representing constraint (((x_00003_00009=5) + (x_00008_00009=5) + (x_00001_00009=5) + (x_00006_00009=5) + (x_00004_00009=5) + (x_00009_00009=5) + (x_00002_00009=5) + (x_00007_00009=5) + (x_00005_00009=5))=tv=1))
c Var 'aux115' direct represents '0' with '-1417'
c Var 'aux115' direct represents '1' with '1417'
c Var 'aux115' order represents '1' with '1'
c Var 'aux115' order represents '0' with '-1417'
c Encoding variable: aux116 with domain: bool (representing constraint (((x_00003_00009=6) + (x_00008_00009=6) + (x_00001_00009=6) + (x_00006_00009=6) + (x_00004_00009=6) + (x_00009_00009=6) + (x_00002_00009=6) + (x_00007_00009=6) + (x_00005_00009=6))=tv=1))
c Var 'aux116' direct represents '0' with '-1418'
c Var 'aux116' direct represents '1' with '1418'
c Var 'aux116' order represents '1' with '1'
c Var 'aux116' order represents '0' with '-1418'
c Encoding variable: aux117 with domain: bool (representing constraint (((x_00003_00009=7) + (x_00008_00009=7) + (x_00001_00009=7) + (x_00006_00009=7) + (x_00004_00009=7) + (x_00009_00009=7) + (x_00002_00009=7) + (x_00007_00009=7) + (x_00005_00009=7))=tv=1))
c Var 'aux117' direct represents '0' with '-1419'
c Var 'aux117' direct represents '1' with '1419'
c Var 'aux117' order represents '1' with '1'
c Var 'aux117' order represents '0' with '-1419'
c Encoding variable: aux118 with domain: bool (representing constraint (((x_00003_00009=8) + (x_00008_00009=8) + (x_00001_00009=8) + (x_00006_00009=8) + (x_00004_00009=8) + (x_00009_00009=8) + (x_00002_00009=8) + (x_00007_00009=8) + (x_00005_00009=8))=tv=1))
c Var 'aux118' direct represents '0' with '-1420'
c Var 'aux118' direct represents '1' with '1420'
c Var 'aux118' order represents '1' with '1'
c Var 'aux118' order represents '0' with '-1420'
c Encoding variable: aux119 with domain: bool (representing constraint (((x_00003_00009=9) + (x_00008_00009=9) + (x_00001_00009=9) + (x_00006_00009=9) + (x_00004_00009=9) + (x_00009_00009=9) + (x_00002_00009=9) + (x_00007_00009=9) + (x_00005_00009=9))=tv=1))
c Var 'aux119' direct represents '0' with '-1421'
c Var 'aux119' direct represents '1' with '1421'
c Var 'aux119' order represents '1' with '1'
c Var 'aux119' order represents '0' with '-1421'
c Encoding variable: aux120 with domain: bool (representing constraint (((x_00001_00001=1) + (x_00001_00002=1) + (x_00001_00003=1) + (x_00001_00004=1) + (x_00001_00005=1) + (x_00001_00006=1) + (x_00001_00007=1) + (x_00001_00008=1) + (x_00001_00009=1))=tv=1))
c Var 'aux120' direct represents '0' with '-1422'
c Var 'aux120' direct represents '1' with '1422'
c Var 'aux120' order represents '1' with '1'
c Var 'aux120' order represents '0' with '-1422'
c Encoding variable: aux121 with domain: bool (representing constraint (((x_00001_00001=2) + (x_00001_00002=2) + (x_00001_00003=2) + (x_00001_00004=2) + (x_00001_00005=2) + (x_00001_00006=2) + (x_00001_00007=2) + (x_00001_00008=2) + (x_00001_00009=2))=tv=1))
c Var 'aux121' direct represents '0' with '-1423'
c Var 'aux121' direct represents '1' with '1423'
c Var 'aux121' order represents '1' with '1'
c Var 'aux121' order represents '0' with '-1423'
c Encoding variable: aux122 with domain: bool (representing constraint (((x_00001_00001=3) + (x_00001_00002=3) + (x_00001_00003=3) + (x_00001_00004=3) + (x_00001_00005=3) + (x_00001_00006=3) + (x_00001_00007=3) + (x_00001_00008=3) + (x_00001_00009=3))=tv=1))
c Var 'aux122' direct represents '0' with '-1424'
c Var 'aux122' direct represents '1' with '1424'
c Var 'aux122' order represents '1' with '1'
c Var 'aux122' order represents '0' with '-1424'
c Encoding variable: aux123 with domain: bool (representing constraint (((x_00001_00001=4) + (x_00001_00002=4) + (x_00001_00003=4) + (x_00001_00004=4) + (x_00001_00005=4) + (x_00001_00006=4) + (x_00001_00007=4) + (x_00001_00008=4) + (x_00001_00009=4))=tv=1))
c Var 'aux123' direct represents '0' with '-1425'
c Var 'aux123' direct represents '1' with '1425'
c Var 'aux123' order represents '1' with '1'
c Var 'aux123' order represents '0' with '-1425'
c Encoding variable: aux124 with domain: bool (representing constraint (((x_00001_00001=5) + (x_00001_00002=5) + (x_00001_00003=5) + (x_00001_00004=5) + (x_00001_00005=5) + (x_00001_00006=5) + (x_00001_00007=5) + (x_00001_00008=5) + (x_00001_00009=5))=tv=1))
c Var 'aux124' direct represents '0' with '-1426'
c Var 'aux124' direct represents '1' with '1426'
c Var 'aux124' order represents '1' with '1'
c Var 'aux124' order represents '0' with '-1426'
c Encoding variable: aux125 with domain: bool (representing constraint (((x_00001_00001=6) + (x_00001_00002=6) + (x_00001_00003=6) + (x_00001_00004=6) + (x_00001_00005=6) + (x_00001_00006=6) + (x_00001_00007=6) + (x_00001_00008=6) + (x_00001_00009=6))=tv=1))
c Var 'aux125' direct represents '0' with '-1427'
c Var 'aux125' direct represents '1' with '1427'
c Var 'aux125' order represents '1' with '1'
c Var 'aux125' order represents '0' with '-1427'
c Encoding variable: aux126 with domain: bool (representing constraint (((x_00001_00001=7) + (x_00001_00002=7) + (x_00001_00003=7) + (x_00001_00004=7) + (x_00001_00005=7) + (x_00001_00006=7) + (x_00001_00007=7) + (x_00001_00008=7) + (x_00001_00009=7))=tv=1))
c Var 'aux126' direct represents '0' with '-1428'
c Var 'aux126' direct represents '1' with '1428'
c Var 'aux126' order represents '1' with '1'
c Var 'aux126' order represents '0' with '-1428'
c Encoding variable: aux127 with domain: bool (representing constraint (((x_00001_00001=8) + (x_00001_00002=8) + (x_00001_00003=8) + (x_00001_00004=8) + (x_00001_00005=8) + (x_00001_00006=8) + (x_00001_00007=8) + (x_00001_00008=8) + (x_00001_00009=8))=tv=1))
c Var 'aux127' direct represents '0' with '-1429'
c Var 'aux127' direct represents '1' with '1429'
c Var 'aux127' order represents '1' with '1'
c Var 'aux127' order represents '0' with '-1429'
c Encoding variable: aux128 with domain: bool (representing constraint (((x_00001_00001=9) + (x_00001_00002=9) + (x_00001_00003=9) + (x_00001_00004=9) + (x_00001_00005=9) + (x_00001_00006=9) + (x_00001_00007=9) + (x_00001_00008=9) + (x_00001_00009=9))=tv=1))
c Var 'aux128' direct represents '0' with '-1430'
c Var 'aux128' direct represents '1' with '1430'
c Var 'aux128' order represents '1' with '1'
c Var 'aux128' order represents '0' with '-1430'
c Encoding variable: aux129 with domain: bool (representing constraint (((x_00002_00001=1) + (x_00002_00002=1) + (x_00002_00003=1) + (x_00002_00004=1) + (x_00002_00005=1) + (x_00002_00006=1) + (x_00002_00007=1) + (x_00002_00008=1) + (x_00002_00009=1))=tv=1))
c Var 'aux129' direct represents '0' with '-1431'
c Var 'aux129' direct represents '1' with '1431'
c Var 'aux129' order represents '1' with '1'
c Var 'aux129' order represents '0' with '-1431'
c Encoding variable: aux130 with domain: bool (representing constraint (((x_00002_00001=2) + (x_00002_00002=2) + (x_00002_00003=2) + (x_00002_00004=2) + (x_00002_00005=2) + (x_00002_00006=2) + (x_00002_00007=2) + (x_00002_00008=2) + (x_00002_00009=2))=tv=1))
c Var 'aux130' direct represents '0' with '-1432'
c Var 'aux130' direct represents '1' with '1432'
c Var 'aux130' order represents '1' with '1'
c Var 'aux130' order represents '0' with '-1432'
c Encoding variable: aux131 with domain: bool (representing constraint (((x_00002_00001=3) + (x_00002_00002=3) + (x_00002_00003=3) + (x_00002_00004=3) + (x_00002_00005=3) + (x_00002_00006=3) + (x_00002_00007=3) + (x_00002_00008=3) + (x_00002_00009=3))=tv=1))
c Var 'aux131' direct represents '0' with '-1433'
c Var 'aux131' direct represents '1' with '1433'
c Var 'aux131' order represents '1' with '1'
c Var 'aux131' order represents '0' with '-1433'
c Encoding variable: aux132 with domain: bool (representing constraint (((x_00002_00001=4) + (x_00002_00002=4) + (x_00002_00003=4) + (x_00002_00004=4) + (x_00002_00005=4) + (x_00002_00006=4) + (x_00002_00007=4) + (x_00002_00008=4) + (x_00002_00009=4))=tv=1))
c Var 'aux132' direct represents '0' with '-1434'
c Var 'aux132' direct represents '1' with '1434'
c Var 'aux132' order represents '1' with '1'
c Var 'aux132' order represents '0' with '-1434'
c Encoding variable: aux133 with domain: bool (representing constraint (((x_00002_00001=5) + (x_00002_00002=5) + (x_00002_00003=5) + (x_00002_00004=5) + (x_00002_00005=5) + (x_00002_00006=5) + (x_00002_00007=5) + (x_00002_00008=5) + (x_00002_00009=5))=tv=1))
c Var 'aux133' direct represents '0' with '-1435'
c Var 'aux133' direct represents '1' with '1435'
c Var 'aux133' order represents '1' with '1'
c Var 'aux133' order represents '0' with '-1435'
c Encoding variable: aux134 with domain: bool (representing constraint (((x_00002_00001=6) + (x_00002_00002=6) + (x_00002_00003=6) + (x_00002_00004=6) + (x_00002_00005=6) + (x_00002_00006=6) + (x_00002_00007=6) + (x_00002_00008=6) + (x_00002_00009=6))=tv=1))
c Var 'aux134' direct represents '0' with '-1436'
c Var 'aux134' direct represents '1' with '1436'
c Var 'aux134' order represents '1' with '1'
c Var 'aux134' order represents '0' with '-1436'
c Encoding variable: aux135 with domain: bool (representing constraint (((x_00002_00001=7) + (x_00002_00002=7) + (x_00002_00003=7) + (x_00002_00004=7) + (x_00002_00005=7) + (x_00002_00006=7) + (x_00002_00007=7) + (x_00002_00008=7) + (x_00002_00009=7))=tv=1))
c Var 'aux135' direct represents '0' with '-1437'
c Var 'aux135' direct represents '1' with '1437'
c Var 'aux135' order represents '1' with '1'
c Var 'aux135' order represents '0' with '-1437'
c Encoding variable: aux136 with domain: bool (representing constraint (((x_00002_00001=8) + (x_00002_00002=8) + (x_00002_00003=8) + (x_00002_00004=8) + (x_00002_00005=8) + (x_00002_00006=8) + (x_00002_00007=8) + (x_00002_00008=8) + (x_00002_00009=8))=tv=1))
c Var 'aux136' direct represents '0' with '-1438'
c Var 'aux136' direct represents '1' with '1438'
c Var 'aux136' order represents '1' with '1'
c Var 'aux136' order represents '0' with '-1438'
c Encoding variable: aux137 with domain: bool (representing constraint (((x_00002_00001=9) + (x_00002_00002=9) + (x_00002_00003=9) + (x_00002_00004=9) + (x_00002_00005=9) + (x_00002_00006=9) + (x_00002_00007=9) + (x_00002_00008=9) + (x_00002_00009=9))=tv=1))
c Var 'aux137' direct represents '0' with '-1439'
c Var 'aux137' direct represents '1' with '1439'
c Var 'aux137' order represents '1' with '1'
c Var 'aux137' order represents '0' with '-1439'
c Encoding variable: aux138 with domain: bool (representing constraint (((x_00003_00001=1) + (x_00003_00002=1) + (x_00003_00003=1) + (x_00003_00004=1) + (x_00003_00005=1) + (x_00003_00006=1) + (x_00003_00007=1) + (x_00003_00008=1) + (x_00003_00009=1))=tv=1))
c Var 'aux138' direct represents '0' with '-1440'
c Var 'aux138' direct represents '1' with '1440'
c Var 'aux138' order represents '1' with '1'
c Var 'aux138' order represents '0' with '-1440'
c Encoding variable: aux139 with domain: bool (representing constraint (((x_00003_00001=2) + (x_00003_00002=2) + (x_00003_00003=2) + (x_00003_00004=2) + (x_00003_00005=2) + (x_00003_00006=2) + (x_00003_00007=2) + (x_00003_00008=2) + (x_00003_00009=2))=tv=1))
c Var 'aux139' direct represents '0' with '-1441'
c Var 'aux139' direct represents '1' with '1441'
c Var 'aux139' order represents '1' with '1'
c Var 'aux139' order represents '0' with '-1441'
c Encoding variable: aux140 with domain: bool (representing constraint (((x_00003_00001=3) + (x_00003_00002=3) + (x_00003_00003=3) + (x_00003_00004=3) + (x_00003_00005=3) + (x_00003_00006=3) + (x_00003_00007=3) + (x_00003_00008=3) + (x_00003_00009=3))=tv=1))
c Var 'aux140' direct represents '0' with '-1442'
c Var 'aux140' direct represents '1' with '1442'
c Var 'aux140' order represents '1' with '1'
c Var 'aux140' order represents '0' with '-1442'
c Encoding variable: aux141 with domain: bool (representing constraint (((x_00003_00001=4) + (x_00003_00002=4) + (x_00003_00003=4) + (x_00003_00004=4) + (x_00003_00005=4) + (x_00003_00006=4) + (x_00003_00007=4) + (x_00003_00008=4) + (x_00003_00009=4))=tv=1))
c Var 'aux141' direct represents '0' with '-1443'
c Var 'aux141' direct represents '1' with '1443'
c Var 'aux141' order represents '1' with '1'
c Var 'aux141' order represents '0' with '-1443'
c Encoding variable: aux142 with domain: bool (representing constraint (((x_00003_00001=5) + (x_00003_00002=5) + (x_00003_00003=5) + (x_00003_00004=5) + (x_00003_00005=5) + (x_00003_00006=5) + (x_00003_00007=5) + (x_00003_00008=5) + (x_00003_00009=5))=tv=1))
c Var 'aux142' direct represents '0' with '-1444'
c Var 'aux142' direct represents '1' with '1444'
c Var 'aux142' order represents '1' with '1'
c Var 'aux142' order represents '0' with '-1444'
c Encoding variable: aux143 with domain: bool (representing constraint (((x_00003_00001=6) + (x_00003_00002=6) + (x_00003_00003=6) + (x_00003_00004=6) + (x_00003_00005=6) + (x_00003_00006=6) + (x_00003_00007=6) + (x_00003_00008=6) + (x_00003_00009=6))=tv=1))
c Var 'aux143' direct represents '0' with '-1445'
c Var 'aux143' direct represents '1' with '1445'
c Var 'aux143' order represents '1' with '1'
c Var 'aux143' order represents '0' with '-1445'
c Encoding variable: aux144 with domain: bool (representing constraint (((x_00003_00001=7) + (x_00003_00002=7) + (x_00003_00003=7) + (x_00003_00004=7) + (x_00003_00005=7) + (x_00003_00006=7) + (x_00003_00007=7) + (x_00003_00008=7) + (x_00003_00009=7))=tv=1))
c Var 'aux144' direct represents '0' with '-1446'
c Var 'aux144' direct represents '1' with '1446'
c Var 'aux144' order represents '1' with '1'
c Var 'aux144' order represents '0' with '-1446'
c Encoding variable: aux145 with domain: bool (representing constraint (((x_00003_00001=8) + (x_00003_00002=8) + (x_00003_00003=8) + (x_00003_00004=8) + (x_00003_00005=8) + (x_00003_00006=8) + (x_00003_00007=8) + (x_00003_00008=8) + (x_00003_00009=8))=tv=1))
c Var 'aux145' direct represents '0' with '-1447'
c Var 'aux145' direct represents '1' with '1447'
c Var 'aux145' order represents '1' with '1'
c Var 'aux145' order represents '0' with '-1447'
c Encoding variable: aux146 with domain: bool (representing constraint (((x_00003_00001=9) + (x_00003_00002=9) + (x_00003_00003=9) + (x_00003_00004=9) + (x_00003_00005=9) + (x_00003_00006=9) + (x_00003_00007=9) + (x_00003_00008=9) + (x_00003_00009=9))=tv=1))
c Var 'aux146' direct represents '0' with '-1448'
c Var 'aux146' direct represents '1' with '1448'
c Var 'aux146' order represents '1' with '1'
c Var 'aux146' order represents '0' with '-1448'
c Encoding variable: aux147 with domain: bool (representing constraint (((x_00004_00001=1) + (x_00004_00002=1) + (x_00004_00003=1) + (x_00004_00004=1) + (x_00004_00005=1) + (x_00004_00006=1) + (x_00004_00007=1) + (x_00004_00008=1) + (x_00004_00009=1))=tv=1))
c Var 'aux147' direct represents '0' with '-1449'
c Var 'aux147' direct represents '1' with '1449'
c Var 'aux147' order represents '1' with '1'
c Var 'aux147' order represents '0' with '-1449'
c Encoding variable: aux148 with domain: bool (representing constraint (((x_00004_00001=2) + (x_00004_00002=2) + (x_00004_00003=2) + (x_00004_00004=2) + (x_00004_00005=2) + (x_00004_00006=2) + (x_00004_00007=2) + (x_00004_00008=2) + (x_00004_00009=2))=tv=1))
c Var 'aux148' direct represents '0' with '-1450'
c Var 'aux148' direct represents '1' with '1450'
c Var 'aux148' order represents '1' with '1'
c Var 'aux148' order represents '0' with '-1450'
c Encoding variable: aux149 with domain: bool (representing constraint (((x_00004_00001=3) + (x_00004_00002=3) + (x_00004_00003=3) + (x_00004_00004=3) + (x_00004_00005=3) + (x_00004_00006=3) + (x_00004_00007=3) + (x_00004_00008=3) + (x_00004_00009=3))=tv=1))
c Var 'aux149' direct represents '0' with '-1451'
c Var 'aux149' direct represents '1' with '1451'
c Var 'aux149' order represents '1' with '1'
c Var 'aux149' order represents '0' with '-1451'
c Encoding variable: aux150 with domain: bool (representing constraint (((x_00004_00001=4) + (x_00004_00002=4) + (x_00004_00003=4) + (x_00004_00004=4) + (x_00004_00005=4) + (x_00004_00006=4) + (x_00004_00007=4) + (x_00004_00008=4) + (x_00004_00009=4))=tv=1))
c Var 'aux150' direct represents '0' with '-1452'
c Var 'aux150' direct represents '1' with '1452'
c Var 'aux150' order represents '1' with '1'
c Var 'aux150' order represents '0' with '-1452'
c Encoding variable: aux151 with domain: bool (representing constraint (((x_00004_00001=5) + (x_00004_00002=5) + (x_00004_00003=5) + (x_00004_00004=5) + (x_00004_00005=5) + (x_00004_00006=5) + (x_00004_00007=5) + (x_00004_00008=5) + (x_00004_00009=5))=tv=1))
c Var 'aux151' direct represents '0' with '-1453'
c Var 'aux151' direct represents '1' with '1453'
c Var 'aux151' order represents '1' with '1'
c Var 'aux151' order represents '0' with '-1453'
c Encoding variable: aux152 with domain: bool (representing constraint (((x_00004_00001=6) + (x_00004_00002=6) + (x_00004_00003=6) + (x_00004_00004=6) + (x_00004_00005=6) + (x_00004_00006=6) + (x_00004_00007=6) + (x_00004_00008=6) + (x_00004_00009=6))=tv=1))
c Var 'aux152' direct represents '0' with '-1454'
c Var 'aux152' direct represents '1' with '1454'
c Var 'aux152' order represents '1' with '1'
c Var 'aux152' order represents '0' with '-1454'
c Encoding variable: aux153 with domain: bool (representing constraint (((x_00004_00001=7) + (x_00004_00002=7) + (x_00004_00003=7) + (x_00004_00004=7) + (x_00004_00005=7) + (x_00004_00006=7) + (x_00004_00007=7) + (x_00004_00008=7) + (x_00004_00009=7))=tv=1))
c Var 'aux153' direct represents '0' with '-1455'
c Var 'aux153' direct represents '1' with '1455'
c Var 'aux153' order represents '1' with '1'
c Var 'aux153' order represents '0' with '-1455'
c Encoding variable: aux154 with domain: bool (representing constraint (((x_00004_00001=8) + (x_00004_00002=8) + (x_00004_00003=8) + (x_00004_00004=8) + (x_00004_00005=8) + (x_00004_00006=8) + (x_00004_00007=8) + (x_00004_00008=8) + (x_00004_00009=8))=tv=1))
c Var 'aux154' direct represents '0' with '-1456'
c Var 'aux154' direct represents '1' with '1456'
c Var 'aux154' order represents '1' with '1'
c Var 'aux154' order represents '0' with '-1456'
c Encoding variable: aux155 with domain: bool (representing constraint (((x_00004_00001=9) + (x_00004_00002=9) + (x_00004_00003=9) + (x_00004_00004=9) + (x_00004_00005=9) + (x_00004_00006=9) + (x_00004_00007=9) + (x_00004_00008=9) + (x_00004_00009=9))=tv=1))
c Var 'aux155' direct represents '0' with '-1457'
c Var 'aux155' direct represents '1' with '1457'
c Var 'aux155' order represents '1' with '1'
c Var 'aux155' order represents '0' with '-1457'
c Encoding variable: aux156 with domain: bool (representing constraint (((x_00005_00001=1) + (x_00005_00002=1) + (x_00005_00003=1) + (x_00005_00004=1) + (x_00005_00005=1) + (x_00005_00006=1) + (x_00005_00007=1) + (x_00005_00008=1) + (x_00005_00009=1))=tv=1))
c Var 'aux156' direct represents '0' with '-1458'
c Var 'aux156' direct represents '1' with '1458'
c Var 'aux156' order represents '1' with '1'
c Var 'aux156' order represents '0' with '-1458'
c Encoding variable: aux157 with domain: bool (representing constraint (((x_00005_00001=2) + (x_00005_00002=2) + (x_00005_00003=2) + (x_00005_00004=2) + (x_00005_00005=2) + (x_00005_00006=2) + (x_00005_00007=2) + (x_00005_00008=2) + (x_00005_00009=2))=tv=1))
c Var 'aux157' direct represents '0' with '-1459'
c Var 'aux157' direct represents '1' with '1459'
c Var 'aux157' order represents '1' with '1'
c Var 'aux157' order represents '0' with '-1459'
c Encoding variable: aux158 with domain: bool (representing constraint (((x_00005_00001=3) + (x_00005_00002=3) + (x_00005_00003=3) + (x_00005_00004=3) + (x_00005_00005=3) + (x_00005_00006=3) + (x_00005_00007=3) + (x_00005_00008=3) + (x_00005_00009=3))=tv=1))
c Var 'aux158' direct represents '0' with '-1460'
c Var 'aux158' direct represents '1' with '1460'
c Var 'aux158' order represents '1' with '1'
c Var 'aux158' order represents '0' with '-1460'
c Encoding variable: aux159 with domain: bool (representing constraint (((x_00005_00001=4) + (x_00005_00002=4) + (x_00005_00003=4) + (x_00005_00004=4) + (x_00005_00005=4) + (x_00005_00006=4) + (x_00005_00007=4) + (x_00005_00008=4) + (x_00005_00009=4))=tv=1))
c Var 'aux159' direct represents '0' with '-1461'
c Var 'aux159' direct represents '1' with '1461'
c Var 'aux159' order represents '1' with '1'
c Var 'aux159' order represents '0' with '-1461'
c Encoding variable: aux160 with domain: bool (representing constraint (((x_00005_00001=5) + (x_00005_00002=5) + (x_00005_00003=5) + (x_00005_00004=5) + (x_00005_00005=5) + (x_00005_00006=5) + (x_00005_00007=5) + (x_00005_00008=5) + (x_00005_00009=5))=tv=1))
c Var 'aux160' direct represents '0' with '-1462'
c Var 'aux160' direct represents '1' with '1462'
c Var 'aux160' order represents '1' with '1'
c Var 'aux160' order represents '0' with '-1462'
c Encoding variable: aux161 with domain: bool (representing constraint (((x_00005_00001=6) + (x_00005_00002=6) + (x_00005_00003=6) + (x_00005_00004=6) + (x_00005_00005=6) + (x_00005_00006=6) + (x_00005_00007=6) + (x_00005_00008=6) + (x_00005_00009=6))=tv=1))
c Var 'aux161' direct represents '0' with '-1463'
c Var 'aux161' direct represents '1' with '1463'
c Var 'aux161' order represents '1' with '1'
c Var 'aux161' order represents '0' with '-1463'
c Encoding variable: aux162 with domain: bool (representing constraint (((x_00005_00001=7) + (x_00005_00002=7) + (x_00005_00003=7) + (x_00005_00004=7) + (x_00005_00005=7) + (x_00005_00006=7) + (x_00005_00007=7) + (x_00005_00008=7) + (x_00005_00009=7))=tv=1))
c Var 'aux162' direct represents '0' with '-1464'
c Var 'aux162' direct represents '1' with '1464'
c Var 'aux162' order represents '1' with '1'
c Var 'aux162' order represents '0' with '-1464'
c Encoding variable: aux163 with domain: bool (representing constraint (((x_00005_00001=8) + (x_00005_00002=8) + (x_00005_00003=8) + (x_00005_00004=8) + (x_00005_00005=8) + (x_00005_00006=8) + (x_00005_00007=8) + (x_00005_00008=8) + (x_00005_00009=8))=tv=1))
c Var 'aux163' direct represents '0' with '-1465'
c Var 'aux163' direct represents '1' with '1465'
c Var 'aux163' order represents '1' with '1'
c Var 'aux163' order represents '0' with '-1465'
c Encoding variable: aux164 with domain: bool (representing constraint (((x_00005_00001=9) + (x_00005_00002=9) + (x_00005_00003=9) + (x_00005_00004=9) + (x_00005_00005=9) + (x_00005_00006=9) + (x_00005_00007=9) + (x_00005_00008=9) + (x_00005_00009=9))=tv=1))
c Var 'aux164' direct represents '0' with '-1466'
c Var 'aux164' direct represents '1' with '1466'
c Var 'aux164' order represents '1' with '1'
c Var 'aux164' order represents '0' with '-1466'
c Encoding variable: aux165 with domain: bool (representing constraint (((x_00006_00001=1) + (x_00006_00002=1) + (x_00006_00003=1) + (x_00006_00004=1) + (x_00006_00005=1) + (x_00006_00006=1) + (x_00006_00007=1) + (x_00006_00008=1) + (x_00006_00009=1))=tv=1))
c Var 'aux165' direct represents '0' with '-1467'
c Var 'aux165' direct represents '1' with '1467'
c Var 'aux165' order represents '1' with '1'
c Var 'aux165' order represents '0' with '-1467'
c Encoding variable: aux166 with domain: bool (representing constraint (((x_00006_00001=2) + (x_00006_00002=2) + (x_00006_00003=2) + (x_00006_00004=2) + (x_00006_00005=2) + (x_00006_00006=2) + (x_00006_00007=2) + (x_00006_00008=2) + (x_00006_00009=2))=tv=1))
c Var 'aux166' direct represents '0' with '-1468'
c Var 'aux166' direct represents '1' with '1468'
c Var 'aux166' order represents '1' with '1'
c Var 'aux166' order represents '0' with '-1468'
c Encoding variable: aux167 with domain: bool (representing constraint (((x_00006_00001=3) + (x_00006_00002=3) + (x_00006_00003=3) + (x_00006_00004=3) + (x_00006_00005=3) + (x_00006_00006=3) + (x_00006_00007=3) + (x_00006_00008=3) + (x_00006_00009=3))=tv=1))
c Var 'aux167' direct represents '0' with '-1469'
c Var 'aux167' direct represents '1' with '1469'
c Var 'aux167' order represents '1' with '1'
c Var 'aux167' order represents '0' with '-1469'
c Encoding variable: aux168 with domain: bool (representing constraint (((x_00006_00001=4) + (x_00006_00002=4) + (x_00006_00003=4) + (x_00006_00004=4) + (x_00006_00005=4) + (x_00006_00006=4) + (x_00006_00007=4) + (x_00006_00008=4) + (x_00006_00009=4))=tv=1))
c Var 'aux168' direct represents '0' with '-1470'
c Var 'aux168' direct represents '1' with '1470'
c Var 'aux168' order represents '1' with '1'
c Var 'aux168' order represents '0' with '-1470'
c Encoding variable: aux169 with domain: bool (representing constraint (((x_00006_00001=5) + (x_00006_00002=5) + (x_00006_00003=5) + (x_00006_00004=5) + (x_00006_00005=5) + (x_00006_00006=5) + (x_00006_00007=5) + (x_00006_00008=5) + (x_00006_00009=5))=tv=1))
c Var 'aux169' direct represents '0' with '-1471'
c Var 'aux169' direct represents '1' with '1471'
c Var 'aux169' order represents '1' with '1'
c Var 'aux169' order represents '0' with '-1471'
c Encoding variable: aux170 with domain: bool (representing constraint (((x_00006_00001=6) + (x_00006_00002=6) + (x_00006_00003=6) + (x_00006_00004=6) + (x_00006_00005=6) + (x_00006_00006=6) + (x_00006_00007=6) + (x_00006_00008=6) + (x_00006_00009=6))=tv=1))
c Var 'aux170' direct represents '0' with '-1472'
c Var 'aux170' direct represents '1' with '1472'
c Var 'aux170' order represents '1' with '1'
c Var 'aux170' order represents '0' with '-1472'
c Encoding variable: aux171 with domain: bool (representing constraint (((x_00006_00001=7) + (x_00006_00002=7) + (x_00006_00003=7) + (x_00006_00004=7) + (x_00006_00005=7) + (x_00006_00006=7) + (x_00006_00007=7) + (x_00006_00008=7) + (x_00006_00009=7))=tv=1))
c Var 'aux171' direct represents '0' with '-1473'
c Var 'aux171' direct represents '1' with '1473'
c Var 'aux171' order represents '1' with '1'
c Var 'aux171' order represents '0' with '-1473'
c Encoding variable: aux172 with domain: bool (representing constraint (((x_00006_00001=8) + (x_00006_00002=8) + (x_00006_00003=8) + (x_00006_00004=8) + (x_00006_00005=8) + (x_00006_00006=8) + (x_00006_00007=8) + (x_00006_00008=8) + (x_00006_00009=8))=tv=1))
c Var 'aux172' direct represents '0' with '-1474'
c Var 'aux172' direct represents '1' with '1474'
c Var 'aux172' order represents '1' with '1'
c Var 'aux172' order represents '0' with '-1474'
c Encoding variable: aux173 with domain: bool (representing constraint (((x_00006_00001=9) + (x_00006_00002=9) + (x_00006_00003=9) + (x_00006_00004=9) + (x_00006_00005=9) + (x_00006_00006=9) + (x_00006_00007=9) + (x_00006_00008=9) + (x_00006_00009=9))=tv=1))
c Var 'aux173' direct represents '0' with '-1475'
c Var 'aux173' direct represents '1' with '1475'
c Var 'aux173' order represents '1' with '1'
c Var 'aux173' order represents '0' with '-1475'
c Encoding variable: aux174 with domain: bool (representing constraint (((x_00007_00001=1) + (x_00007_00002=1) + (x_00007_00003=1) + (x_00007_00004=1) + (x_00007_00005=1) + (x_00007_00006=1) + (x_00007_00007=1) + (x_00007_00008=1) + (x_00007_00009=1))=tv=1))
c Var 'aux174' direct represents '0' with '-1476'
c Var 'aux174' direct represents '1' with '1476'
c Var 'aux174' order represents '1' with '1'
c Var 'aux174' order represents '0' with '-1476'
c Encoding variable: aux175 with domain: bool (representing constraint (((x_00007_00001=2) + (x_00007_00002=2) + (x_00007_00003=2) + (x_00007_00004=2) + (x_00007_00005=2) + (x_00007_00006=2) + (x_00007_00007=2) + (x_00007_00008=2) + (x_00007_00009=2))=tv=1))
c Var 'aux175' direct represents '0' with '-1477'
c Var 'aux175' direct represents '1' with '1477'
c Var 'aux175' order represents '1' with '1'
c Var 'aux175' order represents '0' with '-1477'
c Encoding variable: aux176 with domain: bool (representing constraint (((x_00007_00001=3) + (x_00007_00002=3) + (x_00007_00003=3) + (x_00007_00004=3) + (x_00007_00005=3) + (x_00007_00006=3) + (x_00007_00007=3) + (x_00007_00008=3) + (x_00007_00009=3))=tv=1))
c Var 'aux176' direct represents '0' with '-1478'
c Var 'aux176' direct represents '1' with '1478'
c Var 'aux176' order represents '1' with '1'
c Var 'aux176' order represents '0' with '-1478'
c Encoding variable: aux177 with domain: bool (representing constraint (((x_00007_00001=4) + (x_00007_00002=4) + (x_00007_00003=4) + (x_00007_00004=4) + (x_00007_00005=4) + (x_00007_00006=4) + (x_00007_00007=4) + (x_00007_00008=4) + (x_00007_00009=4))=tv=1))
c Var 'aux177' direct represents '0' with '-1479'
c Var 'aux177' direct represents '1' with '1479'
c Var 'aux177' order represents '1' with '1'
c Var 'aux177' order represents '0' with '-1479'
c Encoding variable: aux178 with domain: bool (representing constraint (((x_00007_00001=5) + (x_00007_00002=5) + (x_00007_00003=5) + (x_00007_00004=5) + (x_00007_00005=5) + (x_00007_00006=5) + (x_00007_00007=5) + (x_00007_00008=5) + (x_00007_00009=5))=tv=1))
c Var 'aux178' direct represents '0' with '-1480'
c Var 'aux178' direct represents '1' with '1480'
c Var 'aux178' order represents '1' with '1'
c Var 'aux178' order represents '0' with '-1480'
c Encoding variable: aux179 with domain: bool (representing constraint (((x_00007_00001=6) + (x_00007_00002=6) + (x_00007_00003=6) + (x_00007_00004=6) + (x_00007_00005=6) + (x_00007_00006=6) + (x_00007_00007=6) + (x_00007_00008=6) + (x_00007_00009=6))=tv=1))
c Var 'aux179' direct represents '0' with '-1481'
c Var 'aux179' direct represents '1' with '1481'
c Var 'aux179' order represents '1' with '1'
c Var 'aux179' order represents '0' with '-1481'
c Encoding variable: aux180 with domain: bool (representing constraint (((x_00007_00001=7) + (x_00007_00002=7) + (x_00007_00003=7) + (x_00007_00004=7) + (x_00007_00005=7) + (x_00007_00006=7) + (x_00007_00007=7) + (x_00007_00008=7) + (x_00007_00009=7))=tv=1))
c Var 'aux180' direct represents '0' with '-1482'
c Var 'aux180' direct represents '1' with '1482'
c Var 'aux180' order represents '1' with '1'
c Var 'aux180' order represents '0' with '-1482'
c Encoding variable: aux181 with domain: bool (representing constraint (((x_00007_00001=8) + (x_00007_00002=8) + (x_00007_00003=8) + (x_00007_00004=8) + (x_00007_00005=8) + (x_00007_00006=8) + (x_00007_00007=8) + (x_00007_00008=8) + (x_00007_00009=8))=tv=1))
c Var 'aux181' direct represents '0' with '-1483'
c Var 'aux181' direct represents '1' with '1483'
c Var 'aux181' order represents '1' with '1'
c Var 'aux181' order represents '0' with '-1483'
c Encoding variable: aux182 with domain: bool (representing constraint (((x_00007_00001=9) + (x_00007_00002=9) + (x_00007_00003=9) + (x_00007_00004=9) + (x_00007_00005=9) + (x_00007_00006=9) + (x_00007_00007=9) + (x_00007_00008=9) + (x_00007_00009=9))=tv=1))
c Var 'aux182' direct represents '0' with '-1484'
c Var 'aux182' direct represents '1' with '1484'
c Var 'aux182' order represents '1' with '1'
c Var 'aux182' order represents '0' with '-1484'
c Encoding variable: aux183 with domain: bool (representing constraint (((x_00008_00001=1) + (x_00008_00002=1) + (x_00008_00003=1) + (x_00008_00004=1) + (x_00008_00005=1) + (x_00008_00006=1) + (x_00008_00007=1) + (x_00008_00008=1) + (x_00008_00009=1))=tv=1))
c Var 'aux183' direct represents '0' with '-1485'
c Var 'aux183' direct represents '1' with '1485'
c Var 'aux183' order represents '1' with '1'
c Var 'aux183' order represents '0' with '-1485'
c Encoding variable: aux184 with domain: bool (representing constraint (((x_00008_00001=2) + (x_00008_00002=2) + (x_00008_00003=2) + (x_00008_00004=2) + (x_00008_00005=2) + (x_00008_00006=2) + (x_00008_00007=2) + (x_00008_00008=2) + (x_00008_00009=2))=tv=1))
c Var 'aux184' direct represents '0' with '-1486'
c Var 'aux184' direct represents '1' with '1486'
c Var 'aux184' order represents '1' with '1'
c Var 'aux184' order represents '0' with '-1486'
c Encoding variable: aux185 with domain: bool (representing constraint (((x_00008_00001=3) + (x_00008_00002=3) + (x_00008_00003=3) + (x_00008_00004=3) + (x_00008_00005=3) + (x_00008_00006=3) + (x_00008_00007=3) + (x_00008_00008=3) + (x_00008_00009=3))=tv=1))
c Var 'aux185' direct represents '0' with '-1487'
c Var 'aux185' direct represents '1' with '1487'
c Var 'aux185' order represents '1' with '1'
c Var 'aux185' order represents '0' with '-1487'
c Encoding variable: aux186 with domain: bool (representing constraint (((x_00008_00001=4) + (x_00008_00002=4) + (x_00008_00003=4) + (x_00008_00004=4) + (x_00008_00005=4) + (x_00008_00006=4) + (x_00008_00007=4) + (x_00008_00008=4) + (x_00008_00009=4))=tv=1))
c Var 'aux186' direct represents '0' with '-1488'
c Var 'aux186' direct represents '1' with '1488'
c Var 'aux186' order represents '1' with '1'
c Var 'aux186' order represents '0' with '-1488'
c Encoding variable: aux187 with domain: bool (representing constraint (((x_00008_00001=5) + (x_00008_00002=5) + (x_00008_00003=5) + (x_00008_00004=5) + (x_00008_00005=5) + (x_00008_00006=5) + (x_00008_00007=5) + (x_00008_00008=5) + (x_00008_00009=5))=tv=1))
c Var 'aux187' direct represents '0' with '-1489'
c Var 'aux187' direct represents '1' with '1489'
c Var 'aux187' order represents '1' with '1'
c Var 'aux187' order represents '0' with '-1489'
c Encoding variable: aux188 with domain: bool (representing constraint (((x_00008_00001=6) + (x_00008_00002=6) + (x_00008_00003=6) + (x_00008_00004=6) + (x_00008_00005=6) + (x_00008_00006=6) + (x_00008_00007=6) + (x_00008_00008=6) + (x_00008_00009=6))=tv=1))
c Var 'aux188' direct represents '0' with '-1490'
c Var 'aux188' direct represents '1' with '1490'
c Var 'aux188' order represents '1' with '1'
c Var 'aux188' order represents '0' with '-1490'
c Encoding variable: aux189 with domain: bool (representing constraint (((x_00008_00001=7) + (x_00008_00002=7) + (x_00008_00003=7) + (x_00008_00004=7) + (x_00008_00005=7) + (x_00008_00006=7) + (x_00008_00007=7) + (x_00008_00008=7) + (x_00008_00009=7))=tv=1))
c Var 'aux189' direct represents '0' with '-1491'
c Var 'aux189' direct represents '1' with '1491'
c Var 'aux189' order represents '1' with '1'
c Var 'aux189' order represents '0' with '-1491'
c Encoding variable: aux190 with domain: bool (representing constraint (((x_00008_00001=8) + (x_00008_00002=8) + (x_00008_00003=8) + (x_00008_00004=8) + (x_00008_00005=8) + (x_00008_00006=8) + (x_00008_00007=8) + (x_00008_00008=8) + (x_00008_00009=8))=tv=1))
c Var 'aux190' direct represents '0' with '-1492'
c Var 'aux190' direct represents '1' with '1492'
c Var 'aux190' order represents '1' with '1'
c Var 'aux190' order represents '0' with '-1492'
c Encoding variable: aux191 with domain: bool (representing constraint (((x_00008_00001=9) + (x_00008_00002=9) + (x_00008_00003=9) + (x_00008_00004=9) + (x_00008_00005=9) + (x_00008_00006=9) + (x_00008_00007=9) + (x_00008_00008=9) + (x_00008_00009=9))=tv=1))
c Var 'aux191' direct represents '0' with '-1493'
c Var 'aux191' direct represents '1' with '1493'
c Var 'aux191' order represents '1' with '1'
c Var 'aux191' order represents '0' with '-1493'
c Encoding variable: aux192 with domain: bool (representing constraint (((x_00009_00001=1) + (x_00009_00002=1) + (x_00009_00003=1) + (x_00009_00004=1) + (x_00009_00005=1) + (x_00009_00006=1) + (x_00009_00007=1) + (x_00009_00008=1) + (x_00009_00009=1))=tv=1))
c Var 'aux192' direct represents '0' with '-1494'
c Var 'aux192' direct represents '1' with '1494'
c Var 'aux192' order represents '1' with '1'
c Var 'aux192' order represents '0' with '-1494'
c Encoding variable: aux193 with domain: bool (representing constraint (((x_00009_00001=2) + (x_00009_00002=2) + (x_00009_00003=2) + (x_00009_00004=2) + (x_00009_00005=2) + (x_00009_00006=2) + (x_00009_00007=2) + (x_00009_00008=2) + (x_00009_00009=2))=tv=1))
c Var 'aux193' direct represents '0' with '-1495'
c Var 'aux193' direct represents '1' with '1495'
c Var 'aux193' order represents '1' with '1'
c Var 'aux193' order represents '0' with '-1495'
c Encoding variable: aux194 with domain: bool (representing constraint (((x_00009_00001=3) + (x_00009_00002=3) + (x_00009_00003=3) + (x_00009_00004=3) + (x_00009_00005=3) + (x_00009_00006=3) + (x_00009_00007=3) + (x_00009_00008=3) + (x_00009_00009=3))=tv=1))
c Var 'aux194' direct represents '0' with '-1496'
c Var 'aux194' direct represents '1' with '1496'
c Var 'aux194' order represents '1' with '1'
c Var 'aux194' order represents '0' with '-1496'
c Encoding variable: aux195 with domain: bool (representing constraint (((x_00009_00001=4) + (x_00009_00002=4) + (x_00009_00003=4) + (x_00009_00004=4) + (x_00009_00005=4) + (x_00009_00006=4) + (x_00009_00007=4) + (x_00009_00008=4) + (x_00009_00009=4))=tv=1))
c Var 'aux195' direct represents '0' with '-1497'
c Var 'aux195' direct represents '1' with '1497'
c Var 'aux195' order represents '1' with '1'
c Var 'aux195' order represents '0' with '-1497'
c Encoding variable: aux196 with domain: bool (representing constraint (((x_00009_00001=5) + (x_00009_00002=5) + (x_00009_00003=5) + (x_00009_00004=5) + (x_00009_00005=5) + (x_00009_00006=5) + (x_00009_00007=5) + (x_00009_00008=5) + (x_00009_00009=5))=tv=1))
c Var 'aux196' direct represents '0' with '-1498'
c Var 'aux196' direct represents '1' with '1498'
c Var 'aux196' order represents '1' with '1'
c Var 'aux196' order represents '0' with '-1498'
c Encoding variable: aux197 with domain: bool (representing constraint (((x_00009_00001=6) + (x_00009_00002=6) + (x_00009_00003=6) + (x_00009_00004=6) + (x_00009_00005=6) + (x_00009_00006=6) + (x_00009_00007=6) + (x_00009_00008=6) + (x_00009_00009=6))=tv=1))
c Var 'aux197' direct represents '0' with '-1499'
c Var 'aux197' direct represents '1' with '1499'
c Var 'aux197' order represents '1' with '1'
c Var 'aux197' order represents '0' with '-1499'
c Encoding variable: aux198 with domain: bool (representing constraint (((x_00009_00001=7) + (x_00009_00002=7) + (x_00009_00003=7) + (x_00009_00004=7) + (x_00009_00005=7) + (x_00009_00006=7) + (x_00009_00007=7) + (x_00009_00008=7) + (x_00009_00009=7))=tv=1))
c Var 'aux198' direct represents '0' with '-1500'
c Var 'aux198' direct represents '1' with '1500'
c Var 'aux198' order represents '1' with '1'
c Var 'aux198' order represents '0' with '-1500'
c Encoding variable: aux199 with domain: bool (representing constraint (((x_00009_00001=8) + (x_00009_00002=8) + (x_00009_00003=8) + (x_00009_00004=8) + (x_00009_00005=8) + (x_00009_00006=8) + (x_00009_00007=8) + (x_00009_00008=8) + (x_00009_00009=8))=tv=1))
c Var 'aux199' direct represents '0' with '-1501'
c Var 'aux199' direct represents '1' with '1501'
c Var 'aux199' order represents '1' with '1'
c Var 'aux199' order represents '0' with '-1501'
c Encoding variable: aux200 with domain: bool (representing constraint (((x_00009_00001=9) + (x_00009_00002=9) + (x_00009_00003=9) + (x_00009_00004=9) + (x_00009_00005=9) + (x_00009_00006=9) + (x_00009_00007=9) + (x_00009_00008=9) + (x_00009_00009=9))=tv=1))
c Var 'aux200' direct represents '0' with '-1502'
c Var 'aux200' direct represents '1' with '1502'
c Var 'aux200' order represents '1' with '1'
c Var 'aux200' order represents '0' with '-1502'
c Encoding variable: aux201 with domain: bool (representing constraint (((x_00003_00001=1) + (x_00003_00002=1) + (x_00003_00003=1) + (x_00001_00001=1) + (x_00001_00002=1) + (x_00001_00003=1) + (x_00002_00001=1) + (x_00002_00002=1) + (x_00002_00003=1))=tv=1))
c Var 'aux201' direct represents '0' with '-1503'
c Var 'aux201' direct represents '1' with '1503'
c Var 'aux201' order represents '1' with '1'
c Var 'aux201' order represents '0' with '-1503'
c Encoding variable: aux202 with domain: bool (representing constraint (((x_00003_00001=2) + (x_00003_00002=2) + (x_00003_00003=2) + (x_00001_00001=2) + (x_00001_00002=2) + (x_00001_00003=2) + (x_00002_00001=2) + (x_00002_00002=2) + (x_00002_00003=2))=tv=1))
c Var 'aux202' direct represents '0' with '-1504'
c Var 'aux202' direct represents '1' with '1504'
c Var 'aux202' order represents '1' with '1'
c Var 'aux202' order represents '0' with '-1504'
c Encoding variable: aux203 with domain: bool (representing constraint (((x_00003_00001=3) + (x_00003_00002=3) + (x_00003_00003=3) + (x_00001_00001=3) + (x_00001_00002=3) + (x_00001_00003=3) + (x_00002_00001=3) + (x_00002_00002=3) + (x_00002_00003=3))=tv=1))
c Var 'aux203' direct represents '0' with '-1505'
c Var 'aux203' direct represents '1' with '1505'
c Var 'aux203' order represents '1' with '1'
c Var 'aux203' order represents '0' with '-1505'
c Encoding variable: aux204 with domain: bool (representing constraint (((x_00003_00001=4) + (x_00003_00002=4) + (x_00003_00003=4) + (x_00001_00001=4) + (x_00001_00002=4) + (x_00001_00003=4) + (x_00002_00001=4) + (x_00002_00002=4) + (x_00002_00003=4))=tv=1))
c Var 'aux204' direct represents '0' with '-1506'
c Var 'aux204' direct represents '1' with '1506'
c Var 'aux204' order represents '1' with '1'
c Var 'aux204' order represents '0' with '-1506'
c Encoding variable: aux205 with domain: bool (representing constraint (((x_00003_00001=5) + (x_00003_00002=5) + (x_00003_00003=5) + (x_00001_00001=5) + (x_00001_00002=5) + (x_00001_00003=5) + (x_00002_00001=5) + (x_00002_00002=5) + (x_00002_00003=5))=tv=1))
c Var 'aux205' direct represents '0' with '-1507'
c Var 'aux205' direct represents '1' with '1507'
c Var 'aux205' order represents '1' with '1'
c Var 'aux205' order represents '0' with '-1507'
c Encoding variable: aux206 with domain: bool (representing constraint (((x_00003_00001=6) + (x_00003_00002=6) + (x_00003_00003=6) + (x_00001_00001=6) + (x_00001_00002=6) + (x_00001_00003=6) + (x_00002_00001=6) + (x_00002_00002=6) + (x_00002_00003=6))=tv=1))
c Var 'aux206' direct represents '0' with '-1508'
c Var 'aux206' direct represents '1' with '1508'
c Var 'aux206' order represents '1' with '1'
c Var 'aux206' order represents '0' with '-1508'
c Encoding variable: aux207 with domain: bool (representing constraint (((x_00003_00001=7) + (x_00003_00002=7) + (x_00003_00003=7) + (x_00001_00001=7) + (x_00001_00002=7) + (x_00001_00003=7) + (x_00002_00001=7) + (x_00002_00002=7) + (x_00002_00003=7))=tv=1))
c Var 'aux207' direct represents '0' with '-1509'
c Var 'aux207' direct represents '1' with '1509'
c Var 'aux207' order represents '1' with '1'
c Var 'aux207' order represents '0' with '-1509'
c Encoding variable: aux208 with domain: bool (representing constraint (((x_00003_00001=8) + (x_00003_00002=8) + (x_00003_00003=8) + (x_00001_00001=8) + (x_00001_00002=8) + (x_00001_00003=8) + (x_00002_00001=8) + (x_00002_00002=8) + (x_00002_00003=8))=tv=1))
c Var 'aux208' direct represents '0' with '-1510'
c Var 'aux208' direct represents '1' with '1510'
c Var 'aux208' order represents '1' with '1'
c Var 'aux208' order represents '0' with '-1510'
c Encoding variable: aux209 with domain: bool (representing constraint (((x_00003_00001=9) + (x_00003_00002=9) + (x_00003_00003=9) + (x_00001_00001=9) + (x_00001_00002=9) + (x_00001_00003=9) + (x_00002_00001=9) + (x_00002_00002=9) + (x_00002_00003=9))=tv=1))
c Var 'aux209' direct represents '0' with '-1511'
c Var 'aux209' direct represents '1' with '1511'
c Var 'aux209' order represents '1' with '1'
c Var 'aux209' order represents '0' with '-1511'
c Encoding variable: aux210 with domain: bool (representing constraint (((x_00003_00004=1) + (x_00003_00005=1) + (x_00003_00006=1) + (x_00001_00004=1) + (x_00001_00005=1) + (x_00001_00006=1) + (x_00002_00004=1) + (x_00002_00005=1) + (x_00002_00006=1))=tv=1))
c Var 'aux210' direct represents '0' with '-1512'
c Var 'aux210' direct represents '1' with '1512'
c Var 'aux210' order represents '1' with '1'
c Var 'aux210' order represents '0' with '-1512'
c Encoding variable: aux211 with domain: bool (representing constraint (((x_00003_00004=2) + (x_00003_00005=2) + (x_00003_00006=2) + (x_00001_00004=2) + (x_00001_00005=2) + (x_00001_00006=2) + (x_00002_00004=2) + (x_00002_00005=2) + (x_00002_00006=2))=tv=1))
c Var 'aux211' direct represents '0' with '-1513'
c Var 'aux211' direct represents '1' with '1513'
c Var 'aux211' order represents '1' with '1'
c Var 'aux211' order represents '0' with '-1513'
c Encoding variable: aux212 with domain: bool (representing constraint (((x_00003_00004=3) + (x_00003_00005=3) + (x_00003_00006=3) + (x_00001_00004=3) + (x_00001_00005=3) + (x_00001_00006=3) + (x_00002_00004=3) + (x_00002_00005=3) + (x_00002_00006=3))=tv=1))
c Var 'aux212' direct represents '0' with '-1514'
c Var 'aux212' direct represents '1' with '1514'
c Var 'aux212' order represents '1' with '1'
c Var 'aux212' order represents '0' with '-1514'
c Encoding variable: aux213 with domain: bool (representing constraint (((x_00003_00004=4) + (x_00003_00005=4) + (x_00003_00006=4) + (x_00001_00004=4) + (x_00001_00005=4) + (x_00001_00006=4) + (x_00002_00004=4) + (x_00002_00005=4) + (x_00002_00006=4))=tv=1))
c Var 'aux213' direct represents '0' with '-1515'
c Var 'aux213' direct represents '1' with '1515'
c Var 'aux213' order represents '1' with '1'
c Var 'aux213' order represents '0' with '-1515'
c Encoding variable: aux214 with domain: bool (representing constraint (((x_00003_00004=5) + (x_00003_00005=5) + (x_00003_00006=5) + (x_00001_00004=5) + (x_00001_00005=5) + (x_00001_00006=5) + (x_00002_00004=5) + (x_00002_00005=5) + (x_00002_00006=5))=tv=1))
c Var 'aux214' direct represents '0' with '-1516'
c Var 'aux214' direct represents '1' with '1516'
c Var 'aux214' order represents '1' with '1'
c Var 'aux214' order represents '0' with '-1516'
c Encoding variable: aux215 with domain: bool (representing constraint (((x_00003_00004=6) + (x_00003_00005=6) + (x_00003_00006=6) + (x_00001_00004=6) + (x_00001_00005=6) + (x_00001_00006=6) + (x_00002_00004=6) + (x_00002_00005=6) + (x_00002_00006=6))=tv=1))
c Var 'aux215' direct represents '0' with '-1517'
c Var 'aux215' direct represents '1' with '1517'
c Var 'aux215' order represents '1' with '1'
c Var 'aux215' order represents '0' with '-1517'
c Encoding variable: aux216 with domain: bool (representing constraint (((x_00003_00004=7) + (x_00003_00005=7) + (x_00003_00006=7) + (x_00001_00004=7) + (x_00001_00005=7) + (x_00001_00006=7) + (x_00002_00004=7) + (x_00002_00005=7) + (x_00002_00006=7))=tv=1))
c Var 'aux216' direct represents '0' with '-1518'
c Var 'aux216' direct represents '1' with '1518'
c Var 'aux216' order represents '1' with '1'
c Var 'aux216' order represents '0' with '-1518'
c Encoding variable: aux217 with domain: bool (representing constraint (((x_00003_00004=8) + (x_00003_00005=8) + (x_00003_00006=8) + (x_00001_00004=8) + (x_00001_00005=8) + (x_00001_00006=8) + (x_00002_00004=8) + (x_00002_00005=8) + (x_00002_00006=8))=tv=1))
c Var 'aux217' direct represents '0' with '-1519'
c Var 'aux217' direct represents '1' with '1519'
c Var 'aux217' order represents '1' with '1'
c Var 'aux217' order represents '0' with '-1519'
c Encoding variable: aux218 with domain: bool (representing constraint (((x_00003_00004=9) + (x_00003_00005=9) + (x_00003_00006=9) + (x_00001_00004=9) + (x_00001_00005=9) + (x_00001_00006=9) + (x_00002_00004=9) + (x_00002_00005=9) + (x_00002_00006=9))=tv=1))
c Var 'aux218' direct represents '0' with '-1520'
c Var 'aux218' direct represents '1' with '1520'
c Var 'aux218' order represents '1' with '1'
c Var 'aux218' order represents '0' with '-1520'
c Encoding variable: aux219 with domain: bool (representing constraint (((x_00003_00007=1) + (x_00003_00008=1) + (x_00003_00009=1) + (x_00001_00007=1) + (x_00001_00008=1) + (x_00001_00009=1) + (x_00002_00007=1) + (x_00002_00008=1) + (x_00002_00009=1))=tv=1))
c Var 'aux219' direct represents '0' with '-1521'
c Var 'aux219' direct represents '1' with '1521'
c Var 'aux219' order represents '1' with '1'
c Var 'aux219' order represents '0' with '-1521'
c Encoding variable: aux220 with domain: bool (representing constraint (((x_00003_00007=2) + (x_00003_00008=2) + (x_00003_00009=2) + (x_00001_00007=2) + (x_00001_00008=2) + (x_00001_00009=2) + (x_00002_00007=2) + (x_00002_00008=2) + (x_00002_00009=2))=tv=1))
c Var 'aux220' direct represents '0' with '-1522'
c Var 'aux220' direct represents '1' with '1522'
c Var 'aux220' order represents '1' with '1'
c Var 'aux220' order represents '0' with '-1522'
c Encoding variable: aux221 with domain: bool (representing constraint (((x_00003_00007=3) + (x_00003_00008=3) + (x_00003_00009=3) + (x_00001_00007=3) + (x_00001_00008=3) + (x_00001_00009=3) + (x_00002_00007=3) + (x_00002_00008=3) + (x_00002_00009=3))=tv=1))
c Var 'aux221' direct represents '0' with '-1523'
c Var 'aux221' direct represents '1' with '1523'
c Var 'aux221' order represents '1' with '1'
c Var 'aux221' order represents '0' with '-1523'
c Encoding variable: aux222 with domain: bool (representing constraint (((x_00003_00007=4) + (x_00003_00008=4) + (x_00003_00009=4) + (x_00001_00007=4) + (x_00001_00008=4) + (x_00001_00009=4) + (x_00002_00007=4) + (x_00002_00008=4) + (x_00002_00009=4))=tv=1))
c Var 'aux222' direct represents '0' with '-1524'
c Var 'aux222' direct represents '1' with '1524'
c Var 'aux222' order represents '1' with '1'
c Var 'aux222' order represents '0' with '-1524'
c Encoding variable: aux223 with domain: bool (representing constraint (((x_00003_00007=5) + (x_00003_00008=5) + (x_00003_00009=5) + (x_00001_00007=5) + (x_00001_00008=5) + (x_00001_00009=5) + (x_00002_00007=5) + (x_00002_00008=5) + (x_00002_00009=5))=tv=1))
c Var 'aux223' direct represents '0' with '-1525'
c Var 'aux223' direct represents '1' with '1525'
c Var 'aux223' order represents '1' with '1'
c Var 'aux223' order represents '0' with '-1525'
c Encoding variable: aux224 with domain: bool (representing constraint (((x_00003_00007=6) + (x_00003_00008=6) + (x_00003_00009=6) + (x_00001_00007=6) + (x_00001_00008=6) + (x_00001_00009=6) + (x_00002_00007=6) + (x_00002_00008=6) + (x_00002_00009=6))=tv=1))
c Var 'aux224' direct represents '0' with '-1526'
c Var 'aux224' direct represents '1' with '1526'
c Var 'aux224' order represents '1' with '1'
c Var 'aux224' order represents '0' with '-1526'
c Encoding variable: aux225 with domain: bool (representing constraint (((x_00003_00007=7) + (x_00003_00008=7) + (x_00003_00009=7) + (x_00001_00007=7) + (x_00001_00008=7) + (x_00001_00009=7) + (x_00002_00007=7) + (x_00002_00008=7) + (x_00002_00009=7))=tv=1))
c Var 'aux225' direct represents '0' with '-1527'
c Var 'aux225' direct represents '1' with '1527'
c Var 'aux225' order represents '1' with '1'
c Var 'aux225' order represents '0' with '-1527'
c Encoding variable: aux226 with domain: bool (representing constraint (((x_00003_00007=8) + (x_00003_00008=8) + (x_00003_00009=8) + (x_00001_00007=8) + (x_00001_00008=8) + (x_00001_00009=8) + (x_00002_00007=8) + (x_00002_00008=8) + (x_00002_00009=8))=tv=1))
c Var 'aux226' direct represents '0' with '-1528'
c Var 'aux226' direct represents '1' with '1528'
c Var 'aux226' order represents '1' with '1'
c Var 'aux226' order represents '0' with '-1528'
c Encoding variable: aux227 with domain: bool (representing constraint (((x_00003_00007=9) + (x_00003_00008=9) + (x_00003_00009=9) + (x_00001_00007=9) + (x_00001_00008=9) + (x_00001_00009=9) + (x_00002_00007=9) + (x_00002_00008=9) + (x_00002_00009=9))=tv=1))
c Var 'aux227' direct represents '0' with '-1529'
c Var 'aux227' direct represents '1' with '1529'
c Var 'aux227' order represents '1' with '1'
c Var 'aux227' order represents '0' with '-1529'
c Encoding variable: aux228 with domain: bool (representing constraint (((x_00006_00001=1) + (x_00006_00002=1) + (x_00006_00003=1) + (x_00004_00001=1) + (x_00004_00002=1) + (x_00004_00003=1) + (x_00005_00001=1) + (x_00005_00002=1) + (x_00005_00003=1))=tv=1))
c Var 'aux228' direct represents '0' with '-1530'
c Var 'aux228' direct represents '1' with '1530'
c Var 'aux228' order represents '1' with '1'
c Var 'aux228' order represents '0' with '-1530'
c Encoding variable: aux229 with domain: bool (representing constraint (((x_00006_00001=2) + (x_00006_00002=2) + (x_00006_00003=2) + (x_00004_00001=2) + (x_00004_00002=2) + (x_00004_00003=2) + (x_00005_00001=2) + (x_00005_00002=2) + (x_00005_00003=2))=tv=1))
c Var 'aux229' direct represents '0' with '-1531'
c Var 'aux229' direct represents '1' with '1531'
c Var 'aux229' order represents '1' with '1'
c Var 'aux229' order represents '0' with '-1531'
c Encoding variable: aux230 with domain: bool (representing constraint (((x_00006_00001=3) + (x_00006_00002=3) + (x_00006_00003=3) + (x_00004_00001=3) + (x_00004_00002=3) + (x_00004_00003=3) + (x_00005_00001=3) + (x_00005_00002=3) + (x_00005_00003=3))=tv=1))
c Var 'aux230' direct represents '0' with '-1532'
c Var 'aux230' direct represents '1' with '1532'
c Var 'aux230' order represents '1' with '1'
c Var 'aux230' order represents '0' with '-1532'
c Encoding variable: aux231 with domain: bool (representing constraint (((x_00006_00001=4) + (x_00006_00002=4) + (x_00006_00003=4) + (x_00004_00001=4) + (x_00004_00002=4) + (x_00004_00003=4) + (x_00005_00001=4) + (x_00005_00002=4) + (x_00005_00003=4))=tv=1))
c Var 'aux231' direct represents '0' with '-1533'
c Var 'aux231' direct represents '1' with '1533'
c Var 'aux231' order represents '1' with '1'
c Var 'aux231' order represents '0' with '-1533'
c Encoding variable: aux232 with domain: bool (representing constraint (((x_00006_00001=5) + (x_00006_00002=5) + (x_00006_00003=5) + (x_00004_00001=5) + (x_00004_00002=5) + (x_00004_00003=5) + (x_00005_00001=5) + (x_00005_00002=5) + (x_00005_00003=5))=tv=1))
c Var 'aux232' direct represents '0' with '-1534'
c Var 'aux232' direct represents '1' with '1534'
c Var 'aux232' order represents '1' with '1'
c Var 'aux232' order represents '0' with '-1534'
c Encoding variable: aux233 with domain: bool (representing constraint (((x_00006_00001=6) + (x_00006_00002=6) + (x_00006_00003=6) + (x_00004_00001=6) + (x_00004_00002=6) + (x_00004_00003=6) + (x_00005_00001=6) + (x_00005_00002=6) + (x_00005_00003=6))=tv=1))
c Var 'aux233' direct represents '0' with '-1535'
c Var 'aux233' direct represents '1' with '1535'
c Var 'aux233' order represents '1' with '1'
c Var 'aux233' order represents '0' with '-1535'
c Encoding variable: aux234 with domain: bool (representing constraint (((x_00006_00001=7) + (x_00006_00002=7) + (x_00006_00003=7) + (x_00004_00001=7) + (x_00004_00002=7) + (x_00004_00003=7) + (x_00005_00001=7) + (x_00005_00002=7) + (x_00005_00003=7))=tv=1))
c Var 'aux234' direct represents '0' with '-1536'
c Var 'aux234' direct represents '1' with '1536'
c Var 'aux234' order represents '1' with '1'
c Var 'aux234' order represents '0' with '-1536'
c Encoding variable: aux235 with domain: bool (representing constraint (((x_00006_00001=8) + (x_00006_00002=8) + (x_00006_00003=8) + (x_00004_00001=8) + (x_00004_00002=8) + (x_00004_00003=8) + (x_00005_00001=8) + (x_00005_00002=8) + (x_00005_00003=8))=tv=1))
c Var 'aux235' direct represents '0' with '-1537'
c Var 'aux235' direct represents '1' with '1537'
c Var 'aux235' order represents '1' with '1'
c Var 'aux235' order represents '0' with '-1537'
c Encoding variable: aux236 with domain: bool (representing constraint (((x_00006_00001=9) + (x_00006_00002=9) + (x_00006_00003=9) + (x_00004_00001=9) + (x_00004_00002=9) + (x_00004_00003=9) + (x_00005_00001=9) + (x_00005_00002=9) + (x_00005_00003=9))=tv=1))
c Var 'aux236' direct represents '0' with '-1538'
c Var 'aux236' direct represents '1' with '1538'
c Var 'aux236' order represents '1' with '1'
c Var 'aux236' order represents '0' with '-1538'
c Encoding variable: aux237 with domain: bool (representing constraint (((x_00006_00004=1) + (x_00006_00005=1) + (x_00006_00006=1) + (x_00004_00004=1) + (x_00004_00005=1) + (x_00004_00006=1) + (x_00005_00004=1) + (x_00005_00005=1) + (x_00005_00006=1))=tv=1))
c Var 'aux237' direct represents '0' with '-1539'
c Var 'aux237' direct represents '1' with '1539'
c Var 'aux237' order represents '1' with '1'
c Var 'aux237' order represents '0' with '-1539'
c Encoding variable: aux238 with domain: bool (representing constraint (((x_00006_00004=2) + (x_00006_00005=2) + (x_00006_00006=2) + (x_00004_00004=2) + (x_00004_00005=2) + (x_00004_00006=2) + (x_00005_00004=2) + (x_00005_00005=2) + (x_00005_00006=2))=tv=1))
c Var 'aux238' direct represents '0' with '-1540'
c Var 'aux238' direct represents '1' with '1540'
c Var 'aux238' order represents '1' with '1'
c Var 'aux238' order represents '0' with '-1540'
c Encoding variable: aux239 with domain: bool (representing constraint (((x_00006_00004=3) + (x_00006_00005=3) + (x_00006_00006=3) + (x_00004_00004=3) + (x_00004_00005=3) + (x_00004_00006=3) + (x_00005_00004=3) + (x_00005_00005=3) + (x_00005_00006=3))=tv=1))
c Var 'aux239' direct represents '0' with '-1541'
c Var 'aux239' direct represents '1' with '1541'
c Var 'aux239' order represents '1' with '1'
c Var 'aux239' order represents '0' with '-1541'
c Encoding variable: aux240 with domain: bool (representing constraint (((x_00006_00004=4) + (x_00006_00005=4) + (x_00006_00006=4) + (x_00004_00004=4) + (x_00004_00005=4) + (x_00004_00006=4) + (x_00005_00004=4) + (x_00005_00005=4) + (x_00005_00006=4))=tv=1))
c Var 'aux240' direct represents '0' with '-1542'
c Var 'aux240' direct represents '1' with '1542'
c Var 'aux240' order represents '1' with '1'
c Var 'aux240' order represents '0' with '-1542'
c Encoding variable: aux241 with domain: bool (representing constraint (((x_00006_00004=5) + (x_00006_00005=5) + (x_00006_00006=5) + (x_00004_00004=5) + (x_00004_00005=5) + (x_00004_00006=5) + (x_00005_00004=5) + (x_00005_00005=5) + (x_00005_00006=5))=tv=1))
c Var 'aux241' direct represents '0' with '-1543'
c Var 'aux241' direct represents '1' with '1543'
c Var 'aux241' order represents '1' with '1'
c Var 'aux241' order represents '0' with '-1543'
c Encoding variable: aux242 with domain: bool (representing constraint (((x_00006_00004=6) + (x_00006_00005=6) + (x_00006_00006=6) + (x_00004_00004=6) + (x_00004_00005=6) + (x_00004_00006=6) + (x_00005_00004=6) + (x_00005_00005=6) + (x_00005_00006=6))=tv=1))
c Var 'aux242' direct represents '0' with '-1544'
c Var 'aux242' direct represents '1' with '1544'
c Var 'aux242' order represents '1' with '1'
c Var 'aux242' order represents '0' with '-1544'
c Encoding variable: aux243 with domain: bool (representing constraint (((x_00006_00004=7) + (x_00006_00005=7) + (x_00006_00006=7) + (x_00004_00004=7) + (x_00004_00005=7) + (x_00004_00006=7) + (x_00005_00004=7) + (x_00005_00005=7) + (x_00005_00006=7))=tv=1))
c Var 'aux243' direct represents '0' with '-1545'
c Var 'aux243' direct represents '1' with '1545'
c Var 'aux243' order represents '1' with '1'
c Var 'aux243' order represents '0' with '-1545'
c Encoding variable: aux244 with domain: bool (representing constraint (((x_00006_00004=8) + (x_00006_00005=8) + (x_00006_00006=8) + (x_00004_00004=8) + (x_00004_00005=8) + (x_00004_00006=8) + (x_00005_00004=8) + (x_00005_00005=8) + (x_00005_00006=8))=tv=1))
c Var 'aux244' direct represents '0' with '-1546'
c Var 'aux244' direct represents '1' with '1546'
c Var 'aux244' order represents '1' with '1'
c Var 'aux244' order represents '0' with '-1546'
c Encoding variable: aux245 with domain: bool (representing constraint (((x_00006_00004=9) + (x_00006_00005=9) + (x_00006_00006=9) + (x_00004_00004=9) + (x_00004_00005=9) + (x_00004_00006=9) + (x_00005_00004=9) + (x_00005_00005=9) + (x_00005_00006=9))=tv=1))
c Var 'aux245' direct represents '0' with '-1547'
c Var 'aux245' direct represents '1' with '1547'
c Var 'aux245' order represents '1' with '1'
c Var 'aux245' order represents '0' with '-1547'
c Encoding variable: aux246 with domain: bool (representing constraint (((x_00006_00007=1) + (x_00006_00008=1) + (x_00006_00009=1) + (x_00004_00007=1) + (x_00004_00008=1) + (x_00004_00009=1) + (x_00005_00007=1) + (x_00005_00008=1) + (x_00005_00009=1))=tv=1))
c Var 'aux246' direct represents '0' with '-1548'
c Var 'aux246' direct represents '1' with '1548'
c Var 'aux246' order represents '1' with '1'
c Var 'aux246' order represents '0' with '-1548'
c Encoding variable: aux247 with domain: bool (representing constraint (((x_00006_00007=2) + (x_00006_00008=2) + (x_00006_00009=2) + (x_00004_00007=2) + (x_00004_00008=2) + (x_00004_00009=2) + (x_00005_00007=2) + (x_00005_00008=2) + (x_00005_00009=2))=tv=1))
c Var 'aux247' direct represents '0' with '-1549'
c Var 'aux247' direct represents '1' with '1549'
c Var 'aux247' order represents '1' with '1'
c Var 'aux247' order represents '0' with '-1549'
c Encoding variable: aux248 with domain: bool (representing constraint (((x_00006_00007=3) + (x_00006_00008=3) + (x_00006_00009=3) + (x_00004_00007=3) + (x_00004_00008=3) + (x_00004_00009=3) + (x_00005_00007=3) + (x_00005_00008=3) + (x_00005_00009=3))=tv=1))
c Var 'aux248' direct represents '0' with '-1550'
c Var 'aux248' direct represents '1' with '1550'
c Var 'aux248' order represents '1' with '1'
c Var 'aux248' order represents '0' with '-1550'
c Encoding variable: aux249 with domain: bool (representing constraint (((x_00006_00007=4) + (x_00006_00008=4) + (x_00006_00009=4) + (x_00004_00007=4) + (x_00004_00008=4) + (x_00004_00009=4) + (x_00005_00007=4) + (x_00005_00008=4) + (x_00005_00009=4))=tv=1))
c Var 'aux249' direct represents '0' with '-1551'
c Var 'aux249' direct represents '1' with '1551'
c Var 'aux249' order represents '1' with '1'
c Var 'aux249' order represents '0' with '-1551'
c Encoding variable: aux250 with domain: bool (representing constraint (((x_00006_00007=5) + (x_00006_00008=5) + (x_00006_00009=5) + (x_00004_00007=5) + (x_00004_00008=5) + (x_00004_00009=5) + (x_00005_00007=5) + (x_00005_00008=5) + (x_00005_00009=5))=tv=1))
c Var 'aux250' direct represents '0' with '-1552'
c Var 'aux250' direct represents '1' with '1552'
c Var 'aux250' order represents '1' with '1'
c Var 'aux250' order represents '0' with '-1552'
c Encoding variable: aux251 with domain: bool (representing constraint (((x_00006_00007=6) + (x_00006_00008=6) + (x_00006_00009=6) + (x_00004_00007=6) + (x_00004_00008=6) + (x_00004_00009=6) + (x_00005_00007=6) + (x_00005_00008=6) + (x_00005_00009=6))=tv=1))
c Var 'aux251' direct represents '0' with '-1553'
c Var 'aux251' direct represents '1' with '1553'
c Var 'aux251' order represents '1' with '1'
c Var 'aux251' order represents '0' with '-1553'
c Encoding variable: aux252 with domain: bool (representing constraint (((x_00006_00007=7) + (x_00006_00008=7) + (x_00006_00009=7) + (x_00004_00007=7) + (x_00004_00008=7) + (x_00004_00009=7) + (x_00005_00007=7) + (x_00005_00008=7) + (x_00005_00009=7))=tv=1))
c Var 'aux252' direct represents '0' with '-1554'
c Var 'aux252' direct represents '1' with '1554'
c Var 'aux252' order represents '1' with '1'
c Var 'aux252' order represents '0' with '-1554'
c Encoding variable: aux253 with domain: bool (representing constraint (((x_00006_00007=8) + (x_00006_00008=8) + (x_00006_00009=8) + (x_00004_00007=8) + (x_00004_00008=8) + (x_00004_00009=8) + (x_00005_00007=8) + (x_00005_00008=8) + (x_00005_00009=8))=tv=1))
c Var 'aux253' direct represents '0' with '-1555'
c Var 'aux253' direct represents '1' with '1555'
c Var 'aux253' order represents '1' with '1'
c Var 'aux253' order represents '0' with '-1555'
c Encoding variable: aux254 with domain: bool (representing constraint (((x_00006_00007=9) + (x_00006_00008=9) + (x_00006_00009=9) + (x_00004_00007=9) + (x_00004_00008=9) + (x_00004_00009=9) + (x_00005_00007=9) + (x_00005_00008=9) + (x_00005_00009=9))=tv=1))
c Var 'aux254' direct represents '0' with '-1556'
c Var 'aux254' direct represents '1' with '1556'
c Var 'aux254' order represents '1' with '1'
c Var 'aux254' order represents '0' with '-1556'
c Encoding variable: aux255 with domain: bool (representing constraint (((x_00008_00001=1) + (x_00008_00002=1) + (x_00008_00003=1) + (x_00009_00001=1) + (x_00009_00002=1) + (x_00009_00003=1) + (x_00007_00001=1) + (x_00007_00002=1) + (x_00007_00003=1))=tv=1))
c Var 'aux255' direct represents '0' with '-1557'
c Var 'aux255' direct represents '1' with '1557'
c Var 'aux255' order represents '1' with '1'
c Var 'aux255' order represents '0' with '-1557'
c Encoding variable: aux256 with domain: bool (representing constraint (((x_00008_00001=2) + (x_00008_00002=2) + (x_00008_00003=2) + (x_00009_00001=2) + (x_00009_00002=2) + (x_00009_00003=2) + (x_00007_00001=2) + (x_00007_00002=2) + (x_00007_00003=2))=tv=1))
c Var 'aux256' direct represents '0' with '-1558'
c Var 'aux256' direct represents '1' with '1558'
c Var 'aux256' order represents '1' with '1'
c Var 'aux256' order represents '0' with '-1558'
c Encoding variable: aux257 with domain: bool (representing constraint (((x_00008_00001=3) + (x_00008_00002=3) + (x_00008_00003=3) + (x_00009_00001=3) + (x_00009_00002=3) + (x_00009_00003=3) + (x_00007_00001=3) + (x_00007_00002=3) + (x_00007_00003=3))=tv=1))
c Var 'aux257' direct represents '0' with '-1559'
c Var 'aux257' direct represents '1' with '1559'
c Var 'aux257' order represents '1' with '1'
c Var 'aux257' order represents '0' with '-1559'
c Encoding variable: aux258 with domain: bool (representing constraint (((x_00008_00001=4) + (x_00008_00002=4) + (x_00008_00003=4) + (x_00009_00001=4) + (x_00009_00002=4) + (x_00009_00003=4) + (x_00007_00001=4) + (x_00007_00002=4) + (x_00007_00003=4))=tv=1))
c Var 'aux258' direct represents '0' with '-1560'
c Var 'aux258' direct represents '1' with '1560'
c Var 'aux258' order represents '1' with '1'
c Var 'aux258' order represents '0' with '-1560'
c Encoding variable: aux259 with domain: bool (representing constraint (((x_00008_00001=5) + (x_00008_00002=5) + (x_00008_00003=5) + (x_00009_00001=5) + (x_00009_00002=5) + (x_00009_00003=5) + (x_00007_00001=5) + (x_00007_00002=5) + (x_00007_00003=5))=tv=1))
c Var 'aux259' direct represents '0' with '-1561'
c Var 'aux259' direct represents '1' with '1561'
c Var 'aux259' order represents '1' with '1'
c Var 'aux259' order represents '0' with '-1561'
c Encoding variable: aux260 with domain: bool (representing constraint (((x_00008_00001=6) + (x_00008_00002=6) + (x_00008_00003=6) + (x_00009_00001=6) + (x_00009_00002=6) + (x_00009_00003=6) + (x_00007_00001=6) + (x_00007_00002=6) + (x_00007_00003=6))=tv=1))
c Var 'aux260' direct represents '0' with '-1562'
c Var 'aux260' direct represents '1' with '1562'
c Var 'aux260' order represents '1' with '1'
c Var 'aux260' order represents '0' with '-1562'
c Encoding variable: aux261 with domain: bool (representing constraint (((x_00008_00001=7) + (x_00008_00002=7) + (x_00008_00003=7) + (x_00009_00001=7) + (x_00009_00002=7) + (x_00009_00003=7) + (x_00007_00001=7) + (x_00007_00002=7) + (x_00007_00003=7))=tv=1))
c Var 'aux261' direct represents '0' with '-1563'
c Var 'aux261' direct represents '1' with '1563'
c Var 'aux261' order represents '1' with '1'
c Var 'aux261' order represents '0' with '-1563'
c Encoding variable: aux262 with domain: bool (representing constraint (((x_00008_00001=8) + (x_00008_00002=8) + (x_00008_00003=8) + (x_00009_00001=8) + (x_00009_00002=8) + (x_00009_00003=8) + (x_00007_00001=8) + (x_00007_00002=8) + (x_00007_00003=8))=tv=1))
c Var 'aux262' direct represents '0' with '-1564'
c Var 'aux262' direct represents '1' with '1564'
c Var 'aux262' order represents '1' with '1'
c Var 'aux262' order represents '0' with '-1564'
c Encoding variable: aux263 with domain: bool (representing constraint (((x_00008_00001=9) + (x_00008_00002=9) + (x_00008_00003=9) + (x_00009_00001=9) + (x_00009_00002=9) + (x_00009_00003=9) + (x_00007_00001=9) + (x_00007_00002=9) + (x_00007_00003=9))=tv=1))
c Var 'aux263' direct represents '0' with '-1565'
c Var 'aux263' direct represents '1' with '1565'
c Var 'aux263' order represents '1' with '1'
c Var 'aux263' order represents '0' with '-1565'
c Encoding variable: aux264 with domain: bool (representing constraint (((x_00008_00004=1) + (x_00008_00005=1) + (x_00008_00006=1) + (x_00009_00004=1) + (x_00009_00005=1) + (x_00009_00006=1) + (x_00007_00004=1) + (x_00007_00005=1) + (x_00007_00006=1))=tv=1))
c Var 'aux264' direct represents '0' with '-1566'
c Var 'aux264' direct represents '1' with '1566'
c Var 'aux264' order represents '1' with '1'
c Var 'aux264' order represents '0' with '-1566'
c Encoding variable: aux265 with domain: bool (representing constraint (((x_00008_00004=2) + (x_00008_00005=2) + (x_00008_00006=2) + (x_00009_00004=2) + (x_00009_00005=2) + (x_00009_00006=2) + (x_00007_00004=2) + (x_00007_00005=2) + (x_00007_00006=2))=tv=1))
c Var 'aux265' direct represents '0' with '-1567'
c Var 'aux265' direct represents '1' with '1567'
c Var 'aux265' order represents '1' with '1'
c Var 'aux265' order represents '0' with '-1567'
c Encoding variable: aux266 with domain: bool (representing constraint (((x_00008_00004=3) + (x_00008_00005=3) + (x_00008_00006=3) + (x_00009_00004=3) + (x_00009_00005=3) + (x_00009_00006=3) + (x_00007_00004=3) + (x_00007_00005=3) + (x_00007_00006=3))=tv=1))
c Var 'aux266' direct represents '0' with '-1568'
c Var 'aux266' direct represents '1' with '1568'
c Var 'aux266' order represents '1' with '1'
c Var 'aux266' order represents '0' with '-1568'
c Encoding variable: aux267 with domain: bool (representing constraint (((x_00008_00004=4) + (x_00008_00005=4) + (x_00008_00006=4) + (x_00009_00004=4) + (x_00009_00005=4) + (x_00009_00006=4) + (x_00007_00004=4) + (x_00007_00005=4) + (x_00007_00006=4))=tv=1))
c Var 'aux267' direct represents '0' with '-1569'
c Var 'aux267' direct represents '1' with '1569'
c Var 'aux267' order represents '1' with '1'
c Var 'aux267' order represents '0' with '-1569'
c Encoding variable: aux268 with domain: bool (representing constraint (((x_00008_00004=5) + (x_00008_00005=5) + (x_00008_00006=5) + (x_00009_00004=5) + (x_00009_00005=5) + (x_00009_00006=5) + (x_00007_00004=5) + (x_00007_00005=5) + (x_00007_00006=5))=tv=1))
c Var 'aux268' direct represents '0' with '-1570'
c Var 'aux268' direct represents '1' with '1570'
c Var 'aux268' order represents '1' with '1'
c Var 'aux268' order represents '0' with '-1570'
c Encoding variable: aux269 with domain: bool (representing constraint (((x_00008_00004=6) + (x_00008_00005=6) + (x_00008_00006=6) + (x_00009_00004=6) + (x_00009_00005=6) + (x_00009_00006=6) + (x_00007_00004=6) + (x_00007_00005=6) + (x_00007_00006=6))=tv=1))
c Var 'aux269' direct represents '0' with '-1571'
c Var 'aux269' direct represents '1' with '1571'
c Var 'aux269' order represents '1' with '1'
c Var 'aux269' order represents '0' with '-1571'
c Encoding variable: aux270 with domain: bool (representing constraint (((x_00008_00004=7) + (x_00008_00005=7) + (x_00008_00006=7) + (x_00009_00004=7) + (x_00009_00005=7) + (x_00009_00006=7) + (x_00007_00004=7) + (x_00007_00005=7) + (x_00007_00006=7))=tv=1))
c Var 'aux270' direct represents '0' with '-1572'
c Var 'aux270' direct represents '1' with '1572'
c Var 'aux270' order represents '1' with '1'
c Var 'aux270' order represents '0' with '-1572'
c Encoding variable: aux271 with domain: bool (representing constraint (((x_00008_00004=8) + (x_00008_00005=8) + (x_00008_00006=8) + (x_00009_00004=8) + (x_00009_00005=8) + (x_00009_00006=8) + (x_00007_00004=8) + (x_00007_00005=8) + (x_00007_00006=8))=tv=1))
c Var 'aux271' direct represents '0' with '-1573'
c Var 'aux271' direct represents '1' with '1573'
c Var 'aux271' order represents '1' with '1'
c Var 'aux271' order represents '0' with '-1573'
c Encoding variable: aux272 with domain: bool (representing constraint (((x_00008_00004=9) + (x_00008_00005=9) + (x_00008_00006=9) + (x_00009_00004=9) + (x_00009_00005=9) + (x_00009_00006=9) + (x_00007_00004=9) + (x_00007_00005=9) + (x_00007_00006=9))=tv=1))
c Var 'aux272' direct represents '0' with '-1574'
c Var 'aux272' direct represents '1' with '1574'
c Var 'aux272' order represents '1' with '1'
c Var 'aux272' order represents '0' with '-1574'
c Encoding variable: aux273 with domain: bool (representing constraint (((x_00008_00007=1) + (x_00008_00008=1) + (x_00008_00009=1) + (x_00009_00007=1) + (x_00009_00008=1) + (x_00009_00009=1) + (x_00007_00007=1) + (x_00007_00008=1) + (x_00007_00009=1))=tv=1))
c Var 'aux273' direct represents '0' with '-1575'
c Var 'aux273' direct represents '1' with '1575'
c Var 'aux273' order represents '1' with '1'
c Var 'aux273' order represents '0' with '-1575'
c Encoding variable: aux274 with domain: bool (representing constraint (((x_00008_00007=2) + (x_00008_00008=2) + (x_00008_00009=2) + (x_00009_00007=2) + (x_00009_00008=2) + (x_00009_00009=2) + (x_00007_00007=2) + (x_00007_00008=2) + (x_00007_00009=2))=tv=1))
c Var 'aux274' direct represents '0' with '-1576'
c Var 'aux274' direct represents '1' with '1576'
c Var 'aux274' order represents '1' with '1'
c Var 'aux274' order represents '0' with '-1576'
c Encoding variable: aux275 with domain: bool (representing constraint (((x_00008_00007=3) + (x_00008_00008=3) + (x_00008_00009=3) + (x_00009_00007=3) + (x_00009_00008=3) + (x_00009_00009=3) + (x_00007_00007=3) + (x_00007_00008=3) + (x_00007_00009=3))=tv=1))
c Var 'aux275' direct represents '0' with '-1577'
c Var 'aux275' direct represents '1' with '1577'
c Var 'aux275' order represents '1' with '1'
c Var 'aux275' order represents '0' with '-1577'
c Encoding variable: aux276 with domain: bool (representing constraint (((x_00008_00007=4) + (x_00008_00008=4) + (x_00008_00009=4) + (x_00009_00007=4) + (x_00009_00008=4) + (x_00009_00009=4) + (x_00007_00007=4) + (x_00007_00008=4) + (x_00007_00009=4))=tv=1))
c Var 'aux276' direct represents '0' with '-1578'
c Var 'aux276' direct represents '1' with '1578'
c Var 'aux276' order represents '1' with '1'
c Var 'aux276' order represents '0' with '-1578'
c Encoding variable: aux277 with domain: bool (representing constraint (((x_00008_00007=5) + (x_00008_00008=5) + (x_00008_00009=5) + (x_00009_00007=5) + (x_00009_00008=5) + (x_00009_00009=5) + (x_00007_00007=5) + (x_00007_00008=5) + (x_00007_00009=5))=tv=1))
c Var 'aux277' direct represents '0' with '-1579'
c Var 'aux277' direct represents '1' with '1579'
c Var 'aux277' order represents '1' with '1'
c Var 'aux277' order represents '0' with '-1579'
c Encoding variable: aux278 with domain: bool (representing constraint (((x_00008_00007=6) + (x_00008_00008=6) + (x_00008_00009=6) + (x_00009_00007=6) + (x_00009_00008=6) + (x_00009_00009=6) + (x_00007_00007=6) + (x_00007_00008=6) + (x_00007_00009=6))=tv=1))
c Var 'aux278' direct represents '0' with '-1580'
c Var 'aux278' direct represents '1' with '1580'
c Var 'aux278' order represents '1' with '1'
c Var 'aux278' order represents '0' with '-1580'
c Encoding variable: aux279 with domain: bool (representing constraint (((x_00008_00007=7) + (x_00008_00008=7) + (x_00008_00009=7) + (x_00009_00007=7) + (x_00009_00008=7) + (x_00009_00009=7) + (x_00007_00007=7) + (x_00007_00008=7) + (x_00007_00009=7))=tv=1))
c Var 'aux279' direct represents '0' with '-1581'
c Var 'aux279' direct represents '1' with '1581'
c Var 'aux279' order represents '1' with '1'
c Var 'aux279' order represents '0' with '-1581'
c Encoding variable: aux280 with domain: bool (representing constraint (((x_00008_00007=8) + (x_00008_00008=8) + (x_00008_00009=8) + (x_00009_00007=8) + (x_00009_00008=8) + (x_00009_00009=8) + (x_00007_00007=8) + (x_00007_00008=8) + (x_00007_00009=8))=tv=1))
c Var 'aux280' direct represents '0' with '-1582'
c Var 'aux280' direct represents '1' with '1582'
c Var 'aux280' order represents '1' with '1'
c Var 'aux280' order represents '0' with '-1582'
c Encoding variable: aux281 with domain: bool (representing constraint (((x_00008_00007=9) + (x_00008_00008=9) + (x_00008_00009=9) + (x_00009_00007=9) + (x_00009_00008=9) + (x_00009_00009=9) + (x_00007_00007=9) + (x_00007_00008=9) + (x_00007_00009=9))=tv=1))
c Var 'aux281' direct represents '0' with '-1583'
c Var 'aux281' direct represents '1' with '1583'
c Var 'aux281' order represents '1' with '1'
c Var 'aux281' order represents '0' with '-1583'
c Encoding variable: aux282 with domain: bool (representing constraint (((x_00001_00001=1) + (x_00001_00002=1) + (x_00002_00001=1) + (x_00002_00002=1) + (x_00002_00003=1))<=1))
c Var 'aux282' direct represents '0' with '-1584'
c Var 'aux282' direct represents '1' with '1584'
c Var 'aux282' order represents '1' with '1'
c Var 'aux282' order represents '0' with '-1584'
c Encoding variable: aux283 with domain: bool (representing constraint (((x_00001_00001=2) + (x_00001_00002=2) + (x_00002_00001=2) + (x_00002_00002=2) + (x_00002_00003=2))<=1))
c Var 'aux283' direct represents '0' with '-1585'
c Var 'aux283' direct represents '1' with '1585'
c Var 'aux283' order represents '1' with '1'
c Var 'aux283' order represents '0' with '-1585'
c Encoding variable: aux284 with domain: bool (representing constraint (((x_00001_00001=3) + (x_00001_00002=3) + (x_00002_00001=3) + (x_00002_00002=3) + (x_00002_00003=3))<=1))
c Var 'aux284' direct represents '0' with '-1586'
c Var 'aux284' direct represents '1' with '1586'
c Var 'aux284' order represents '1' with '1'
c Var 'aux284' order represents '0' with '-1586'
c Encoding variable: aux285 with domain: bool (representing constraint (((x_00001_00001=4) + (x_00001_00002=4) + (x_00002_00001=4) + (x_00002_00002=4) + (x_00002_00003=4))<=1))
c Var 'aux285' direct represents '0' with '-1587'
c Var 'aux285' direct represents '1' with '1587'
c Var 'aux285' order represents '1' with '1'
c Var 'aux285' order represents '0' with '-1587'
c Encoding variable: aux286 with domain: bool (representing constraint (((x_00001_00001=5) + (x_00001_00002=5) + (x_00002_00001=5) + (x_00002_00002=5) + (x_00002_00003=5))<=1))
c Var 'aux286' direct represents '0' with '-1588'
c Var 'aux286' direct represents '1' with '1588'
c Var 'aux286' order represents '1' with '1'
c Var 'aux286' order represents '0' with '-1588'
c Encoding variable: aux287 with domain: bool (representing constraint (((x_00001_00001=6) + (x_00001_00002=6) + (x_00002_00001=6) + (x_00002_00002=6) + (x_00002_00003=6))<=1))
c Var 'aux287' direct represents '0' with '-1589'
c Var 'aux287' direct represents '1' with '1589'
c Var 'aux287' order represents '1' with '1'
c Var 'aux287' order represents '0' with '-1589'
c Encoding variable: aux288 with domain: bool (representing constraint (((x_00001_00001=7) + (x_00001_00002=7) + (x_00002_00001=7) + (x_00002_00002=7) + (x_00002_00003=7))<=1))
c Var 'aux288' direct represents '0' with '-1590'
c Var 'aux288' direct represents '1' with '1590'
c Var 'aux288' order represents '1' with '1'
c Var 'aux288' order represents '0' with '-1590'
c Encoding variable: aux289 with domain: bool (representing constraint (((x_00001_00001=8) + (x_00001_00002=8) + (x_00002_00001=8) + (x_00002_00002=8) + (x_00002_00003=8))<=1))
c Var 'aux289' direct represents '0' with '-1591'
c Var 'aux289' direct represents '1' with '1591'
c Var 'aux289' order represents '1' with '1'
c Var 'aux289' order represents '0' with '-1591'
c Encoding variable: aux290 with domain: bool (representing constraint (((x_00001_00001=9) + (x_00001_00002=9) + (x_00002_00001=9) + (x_00002_00002=9) + (x_00002_00003=9))<=1))
c Var 'aux290' direct represents '0' with '-1592'
c Var 'aux290' direct represents '1' with '1592'
c Var 'aux290' order represents '1' with '1'
c Var 'aux290' order represents '0' with '-1592'
c Encoding variable: aux291 with domain: bool (representing constraint (((x_00001_00003=1) + (x_00001_00004=1) + (x_00001_00005=1) + (x_00002_00004=1))<=1))
c Var 'aux291' direct represents '0' with '-1593'
c Var 'aux291' direct represents '1' with '1593'
c Var 'aux291' order represents '1' with '1'
c Var 'aux291' order represents '0' with '-1593'
c Encoding variable: aux292 with domain: bool (representing constraint (((x_00001_00003=2) + (x_00001_00004=2) + (x_00001_00005=2) + (x_00002_00004=2))<=1))
c Var 'aux292' direct represents '0' with '-1594'
c Var 'aux292' direct represents '1' with '1594'
c Var 'aux292' order represents '1' with '1'
c Var 'aux292' order represents '0' with '-1594'
c Encoding variable: aux293 with domain: bool (representing constraint (((x_00001_00003=3) + (x_00001_00004=3) + (x_00001_00005=3) + (x_00002_00004=3))<=1))
c Var 'aux293' direct represents '0' with '-1595'
c Var 'aux293' direct represents '1' with '1595'
c Var 'aux293' order represents '1' with '1'
c Var 'aux293' order represents '0' with '-1595'
c Encoding variable: aux294 with domain: bool (representing constraint (((x_00001_00003=4) + (x_00001_00004=4) + (x_00001_00005=4) + (x_00002_00004=4))<=1))
c Var 'aux294' direct represents '0' with '-1596'
c Var 'aux294' direct represents '1' with '1596'
c Var 'aux294' order represents '1' with '1'
c Var 'aux294' order represents '0' with '-1596'
c Encoding variable: aux295 with domain: bool (representing constraint (((x_00001_00003=5) + (x_00001_00004=5) + (x_00001_00005=5) + (x_00002_00004=5))<=1))
c Var 'aux295' direct represents '0' with '-1597'
c Var 'aux295' direct represents '1' with '1597'
c Var 'aux295' order represents '1' with '1'
c Var 'aux295' order represents '0' with '-1597'
c Encoding variable: aux296 with domain: bool (representing constraint (((x_00001_00003=6) + (x_00001_00004=6) + (x_00001_00005=6) + (x_00002_00004=6))<=1))
c Var 'aux296' direct represents '0' with '-1598'
c Var 'aux296' direct represents '1' with '1598'
c Var 'aux296' order represents '1' with '1'
c Var 'aux296' order represents '0' with '-1598'
c Encoding variable: aux297 with domain: bool (representing constraint (((x_00001_00003=7) + (x_00001_00004=7) + (x_00001_00005=7) + (x_00002_00004=7))<=1))
c Var 'aux297' direct represents '0' with '-1599'
c Var 'aux297' direct represents '1' with '1599'
c Var 'aux297' order represents '1' with '1'
c Var 'aux297' order represents '0' with '-1599'
c Encoding variable: aux298 with domain: bool (representing constraint (((x_00001_00003=8) + (x_00001_00004=8) + (x_00001_00005=8) + (x_00002_00004=8))<=1))
c Var 'aux298' direct represents '0' with '-1600'
c Var 'aux298' direct represents '1' with '1600'
c Var 'aux298' order represents '1' with '1'
c Var 'aux298' order represents '0' with '-1600'
c Encoding variable: aux299 with domain: bool (representing constraint (((x_00001_00003=9) + (x_00001_00004=9) + (x_00001_00005=9) + (x_00002_00004=9))<=1))
c Var 'aux299' direct represents '0' with '-1601'
c Var 'aux299' direct represents '1' with '1601'
c Var 'aux299' order represents '1' with '1'
c Var 'aux299' order represents '0' with '-1601'
c Encoding variable: aux300 with domain: bool (representing constraint (((x_00001_00006=1) + (x_00001_00007=1) + (x_00001_00008=1))<=1))
c Var 'aux300' direct represents '0' with '-1602'
c Var 'aux300' direct represents '1' with '1602'
c Var 'aux300' order represents '1' with '1'
c Var 'aux300' order represents '0' with '-1602'
c Encoding variable: aux301 with domain: bool (representing constraint (((x_00001_00006=2) + (x_00001_00007=2) + (x_00001_00008=2))<=1))
c Var 'aux301' direct represents '0' with '-1603'
c Var 'aux301' direct represents '1' with '1603'
c Var 'aux301' order represents '1' with '1'
c Var 'aux301' order represents '0' with '-1603'
c Encoding variable: aux302 with domain: bool (representing constraint (((x_00001_00006=3) + (x_00001_00007=3) + (x_00001_00008=3))<=1))
c Var 'aux302' direct represents '0' with '-1604'
c Var 'aux302' direct represents '1' with '1604'
c Var 'aux302' order represents '1' with '1'
c Var 'aux302' order represents '0' with '-1604'
c Encoding variable: aux303 with domain: bool (representing constraint (((x_00001_00006=4) + (x_00001_00007=4) + (x_00001_00008=4))<=1))
c Var 'aux303' direct represents '0' with '-1605'
c Var 'aux303' direct represents '1' with '1605'
c Var 'aux303' order represents '1' with '1'
c Var 'aux303' order represents '0' with '-1605'
c Encoding variable: aux304 with domain: bool (representing constraint (((x_00001_00006=5) + (x_00001_00007=5) + (x_00001_00008=5))<=1))
c Var 'aux304' direct represents '0' with '-1606'
c Var 'aux304' direct represents '1' with '1606'
c Var 'aux304' order represents '1' with '1'
c Var 'aux304' order represents '0' with '-1606'
c Encoding variable: aux305 with domain: bool (representing constraint (((x_00001_00006=6) + (x_00001_00007=6) + (x_00001_00008=6))<=1))
c Var 'aux305' direct represents '0' with '-1607'
c Var 'aux305' direct represents '1' with '1607'
c Var 'aux305' order represents '1' with '1'
c Var 'aux305' order represents '0' with '-1607'
c Encoding variable: aux306 with domain: bool (representing constraint (((x_00001_00006=7) + (x_00001_00007=7) + (x_00001_00008=7))<=1))
c Var 'aux306' direct represents '0' with '-1608'
c Var 'aux306' direct represents '1' with '1608'
c Var 'aux306' order represents '1' with '1'
c Var 'aux306' order represents '0' with '-1608'
c Encoding variable: aux307 with domain: bool (representing constraint (((x_00001_00006=8) + (x_00001_00007=8) + (x_00001_00008=8))<=1))
c Var 'aux307' direct represents '0' with '-1609'
c Var 'aux307' direct represents '1' with '1609'
c Var 'aux307' order represents '1' with '1'
c Var 'aux307' order represents '0' with '-1609'
c Encoding variable: aux308 with domain: bool (representing constraint (((x_00001_00006=9) + (x_00001_00007=9) + (x_00001_00008=9))<=1))
c Var 'aux308' direct represents '0' with '-1610'
c Var 'aux308' direct represents '1' with '1610'
c Var 'aux308' order represents '1' with '1'
c Var 'aux308' order represents '0' with '-1610'
c Encoding variable: aux309 with domain: bool (representing constraint (((x_00003_00004=1) + (x_00003_00005=1) + (x_00004_00005=1) + (x_00002_00005=1))<=1))
c Var 'aux309' direct represents '0' with '-1611'
c Var 'aux309' direct represents '1' with '1611'
c Var 'aux309' order represents '1' with '1'
c Var 'aux309' order represents '0' with '-1611'
c Encoding variable: aux310 with domain: bool (representing constraint (((x_00003_00004=2) + (x_00003_00005=2) + (x_00004_00005=2) + (x_00002_00005=2))<=1))
c Var 'aux310' direct represents '0' with '-1612'
c Var 'aux310' direct represents '1' with '1612'
c Var 'aux310' order represents '1' with '1'
c Var 'aux310' order represents '0' with '-1612'
c Encoding variable: aux311 with domain: bool (representing constraint (((x_00003_00004=3) + (x_00003_00005=3) + (x_00004_00005=3) + (x_00002_00005=3))<=1))
c Var 'aux311' direct represents '0' with '-1613'
c Var 'aux311' direct represents '1' with '1613'
c Var 'aux311' order represents '1' with '1'
c Var 'aux311' order represents '0' with '-1613'
c Encoding variable: aux312 with domain: bool (representing constraint (((x_00003_00004=4) + (x_00003_00005=4) + (x_00004_00005=4) + (x_00002_00005=4))<=1))
c Var 'aux312' direct represents '0' with '-1614'
c Var 'aux312' direct represents '1' with '1614'
c Var 'aux312' order represents '1' with '1'
c Var 'aux312' order represents '0' with '-1614'
c Encoding variable: aux313 with domain: bool (representing constraint (((x_00003_00004=5) + (x_00003_00005=5) + (x_00004_00005=5) + (x_00002_00005=5))<=1))
c Var 'aux313' direct represents '0' with '-1615'
c Var 'aux313' direct represents '1' with '1615'
c Var 'aux313' order represents '1' with '1'
c Var 'aux313' order represents '0' with '-1615'
c Encoding variable: aux314 with domain: bool (representing constraint (((x_00003_00004=6) + (x_00003_00005=6) + (x_00004_00005=6) + (x_00002_00005=6))<=1))
c Var 'aux314' direct represents '0' with '-1616'
c Var 'aux314' direct represents '1' with '1616'
c Var 'aux314' order represents '1' with '1'
c Var 'aux314' order represents '0' with '-1616'
c Encoding variable: aux315 with domain: bool (representing constraint (((x_00003_00004=7) + (x_00003_00005=7) + (x_00004_00005=7) + (x_00002_00005=7))<=1))
c Var 'aux315' direct represents '0' with '-1617'
c Var 'aux315' direct represents '1' with '1617'
c Var 'aux315' order represents '1' with '1'
c Var 'aux315' order represents '0' with '-1617'
c Encoding variable: aux316 with domain: bool (representing constraint (((x_00003_00004=8) + (x_00003_00005=8) + (x_00004_00005=8) + (x_00002_00005=8))<=1))
c Var 'aux316' direct represents '0' with '-1618'
c Var 'aux316' direct represents '1' with '1618'
c Var 'aux316' order represents '1' with '1'
c Var 'aux316' order represents '0' with '-1618'
c Encoding variable: aux317 with domain: bool (representing constraint (((x_00003_00004=9) + (x_00003_00005=9) + (x_00004_00005=9) + (x_00002_00005=9))<=1))
c Var 'aux317' direct represents '0' with '-1619'
c Var 'aux317' direct represents '1' with '1619'
c Var 'aux317' order represents '1' with '1'
c Var 'aux317' order represents '0' with '-1619'
c Encoding variable: aux318 with domain: bool (representing constraint (((x_00002_00006=1) + (x_00002_00007=1) + (x_00002_00008=1))<=1))
c Var 'aux318' direct represents '0' with '-1620'
c Var 'aux318' direct represents '1' with '1620'
c Var 'aux318' order represents '1' with '1'
c Var 'aux318' order represents '0' with '-1620'
c Encoding variable: aux319 with domain: bool (representing constraint (((x_00002_00006=2) + (x_00002_00007=2) + (x_00002_00008=2))<=1))
c Var 'aux319' direct represents '0' with '-1621'
c Var 'aux319' direct represents '1' with '1621'
c Var 'aux319' order represents '1' with '1'
c Var 'aux319' order represents '0' with '-1621'
c Encoding variable: aux320 with domain: bool (representing constraint (((x_00002_00006=3) + (x_00002_00007=3) + (x_00002_00008=3))<=1))
c Var 'aux320' direct represents '0' with '-1622'
c Var 'aux320' direct represents '1' with '1622'
c Var 'aux320' order represents '1' with '1'
c Var 'aux320' order represents '0' with '-1622'
c Encoding variable: aux321 with domain: bool (representing constraint (((x_00002_00006=4) + (x_00002_00007=4) + (x_00002_00008=4))<=1))
c Var 'aux321' direct represents '0' with '-1623'
c Var 'aux321' direct represents '1' with '1623'
c Var 'aux321' order represents '1' with '1'
c Var 'aux321' order represents '0' with '-1623'
c Encoding variable: aux322 with domain: bool (representing constraint (((x_00002_00006=5) + (x_00002_00007=5) + (x_00002_00008=5))<=1))
c Var 'aux322' direct represents '0' with '-1624'
c Var 'aux322' direct represents '1' with '1624'
c Var 'aux322' order represents '1' with '1'
c Var 'aux322' order represents '0' with '-1624'
c Encoding variable: aux323 with domain: bool (representing constraint (((x_00002_00006=6) + (x_00002_00007=6) + (x_00002_00008=6))<=1))
c Var 'aux323' direct represents '0' with '-1625'
c Var 'aux323' direct represents '1' with '1625'
c Var 'aux323' order represents '1' with '1'
c Var 'aux323' order represents '0' with '-1625'
c Encoding variable: aux324 with domain: bool (representing constraint (((x_00002_00006=7) + (x_00002_00007=7) + (x_00002_00008=7))<=1))
c Var 'aux324' direct represents '0' with '-1626'
c Var 'aux324' direct represents '1' with '1626'
c Var 'aux324' order represents '1' with '1'
c Var 'aux324' order represents '0' with '-1626'
c Encoding variable: aux325 with domain: bool (representing constraint (((x_00002_00006=8) + (x_00002_00007=8) + (x_00002_00008=8))<=1))
c Var 'aux325' direct represents '0' with '-1627'
c Var 'aux325' direct represents '1' with '1627'
c Var 'aux325' order represents '1' with '1'
c Var 'aux325' order represents '0' with '-1627'
c Encoding variable: aux326 with domain: bool (representing constraint (((x_00002_00006=9) + (x_00002_00007=9) + (x_00002_00008=9))<=1))
c Var 'aux326' direct represents '0' with '-1628'
c Var 'aux326' direct represents '1' with '1628'
c Var 'aux326' order represents '1' with '1'
c Var 'aux326' order represents '0' with '-1628'
c Encoding variable: aux327 with domain: bool (representing constraint (((x_00003_00001=1) + (x_00003_00002=1) + (x_00003_00003=1))<=1))
c Var 'aux327' direct represents '0' with '-1629'
c Var 'aux327' direct represents '1' with '1629'
c Var 'aux327' order represents '1' with '1'
c Var 'aux327' order represents '0' with '-1629'
c Encoding variable: aux328 with domain: bool (representing constraint (((x_00003_00001=2) + (x_00003_00002=2) + (x_00003_00003=2))<=1))
c Var 'aux328' direct represents '0' with '-1630'
c Var 'aux328' direct represents '1' with '1630'
c Var 'aux328' order represents '1' with '1'
c Var 'aux328' order represents '0' with '-1630'
c Encoding variable: aux329 with domain: bool (representing constraint (((x_00003_00001=3) + (x_00003_00002=3) + (x_00003_00003=3))<=1))
c Var 'aux329' direct represents '0' with '-1631'
c Var 'aux329' direct represents '1' with '1631'
c Var 'aux329' order represents '1' with '1'
c Var 'aux329' order represents '0' with '-1631'
c Encoding variable: aux330 with domain: bool (representing constraint (((x_00003_00001=4) + (x_00003_00002=4) + (x_00003_00003=4))<=1))
c Var 'aux330' direct represents '0' with '-1632'
c Var 'aux330' direct represents '1' with '1632'
c Var 'aux330' order represents '1' with '1'
c Var 'aux330' order represents '0' with '-1632'
c Encoding variable: aux331 with domain: bool (representing constraint (((x_00003_00001=5) + (x_00003_00002=5) + (x_00003_00003=5))<=1))
c Var 'aux331' direct represents '0' with '-1633'
c Var 'aux331' direct represents '1' with '1633'
c Var 'aux331' order represents '1' with '1'
c Var 'aux331' order represents '0' with '-1633'
c Encoding variable: aux332 with domain: bool (representing constraint (((x_00003_00001=6) + (x_00003_00002=6) + (x_00003_00003=6))<=1))
c Var 'aux332' direct represents '0' with '-1634'
c Var 'aux332' direct represents '1' with '1634'
c Var 'aux332' order represents '1' with '1'
c Var 'aux332' order represents '0' with '-1634'
c Encoding variable: aux333 with domain: bool (representing constraint (((x_00003_00001=7) + (x_00003_00002=7) + (x_00003_00003=7))<=1))
c Var 'aux333' direct represents '0' with '-1635'
c Var 'aux333' direct represents '1' with '1635'
c Var 'aux333' order represents '1' with '1'
c Var 'aux333' order represents '0' with '-1635'
c Encoding variable: aux334 with domain: bool (representing constraint (((x_00003_00001=8) + (x_00003_00002=8) + (x_00003_00003=8))<=1))
c Var 'aux334' direct represents '0' with '-1636'
c Var 'aux334' direct represents '1' with '1636'
c Var 'aux334' order represents '1' with '1'
c Var 'aux334' order represents '0' with '-1636'
c Encoding variable: aux335 with domain: bool (representing constraint (((x_00003_00001=9) + (x_00003_00002=9) + (x_00003_00003=9))<=1))
c Var 'aux335' direct represents '0' with '-1637'
c Var 'aux335' direct represents '1' with '1637'
c Var 'aux335' order represents '1' with '1'
c Var 'aux335' order represents '0' with '-1637'
c Encoding variable: aux336 with domain: bool (representing constraint (((x_00003_00006=1) + (x_00004_00006=1) + (x_00005_00005=1) + (x_00005_00006=1))<=1))
c Var 'aux336' direct represents '0' with '-1638'
c Var 'aux336' direct represents '1' with '1638'
c Var 'aux336' order represents '1' with '1'
c Var 'aux336' order represents '0' with '-1638'
c Encoding variable: aux337 with domain: bool (representing constraint (((x_00003_00006=2) + (x_00004_00006=2) + (x_00005_00005=2) + (x_00005_00006=2))<=1))
c Var 'aux337' direct represents '0' with '-1639'
c Var 'aux337' direct represents '1' with '1639'
c Var 'aux337' order represents '1' with '1'
c Var 'aux337' order represents '0' with '-1639'
c Encoding variable: aux338 with domain: bool (representing constraint (((x_00003_00006=3) + (x_00004_00006=3) + (x_00005_00005=3) + (x_00005_00006=3))<=1))
c Var 'aux338' direct represents '0' with '-1640'
c Var 'aux338' direct represents '1' with '1640'
c Var 'aux338' order represents '1' with '1'
c Var 'aux338' order represents '0' with '-1640'
c Encoding variable: aux339 with domain: bool (representing constraint (((x_00003_00006=4) + (x_00004_00006=4) + (x_00005_00005=4) + (x_00005_00006=4))<=1))
c Var 'aux339' direct represents '0' with '-1641'
c Var 'aux339' direct represents '1' with '1641'
c Var 'aux339' order represents '1' with '1'
c Var 'aux339' order represents '0' with '-1641'
c Encoding variable: aux340 with domain: bool (representing constraint (((x_00003_00006=5) + (x_00004_00006=5) + (x_00005_00005=5) + (x_00005_00006=5))<=1))
c Var 'aux340' direct represents '0' with '-1642'
c Var 'aux340' direct represents '1' with '1642'
c Var 'aux340' order represents '1' with '1'
c Var 'aux340' order represents '0' with '-1642'
c Encoding variable: aux341 with domain: bool (representing constraint (((x_00003_00006=6) + (x_00004_00006=6) + (x_00005_00005=6) + (x_00005_00006=6))<=1))
c Var 'aux341' direct represents '0' with '-1643'
c Var 'aux341' direct represents '1' with '1643'
c Var 'aux341' order represents '1' with '1'
c Var 'aux341' order represents '0' with '-1643'
c Encoding variable: aux342 with domain: bool (representing constraint (((x_00003_00006=7) + (x_00004_00006=7) + (x_00005_00005=7) + (x_00005_00006=7))<=1))
c Var 'aux342' direct represents '0' with '-1644'
c Var 'aux342' direct represents '1' with '1644'
c Var 'aux342' order represents '1' with '1'
c Var 'aux342' order represents '0' with '-1644'
c Encoding variable: aux343 with domain: bool (representing constraint (((x_00003_00006=8) + (x_00004_00006=8) + (x_00005_00005=8) + (x_00005_00006=8))<=1))
c Var 'aux343' direct represents '0' with '-1645'
c Var 'aux343' direct represents '1' with '1645'
c Var 'aux343' order represents '1' with '1'
c Var 'aux343' order represents '0' with '-1645'
c Encoding variable: aux344 with domain: bool (representing constraint (((x_00003_00006=9) + (x_00004_00006=9) + (x_00005_00005=9) + (x_00005_00006=9))<=1))
c Var 'aux344' direct represents '0' with '-1646'
c Var 'aux344' direct represents '1' with '1646'
c Var 'aux344' order represents '1' with '1'
c Var 'aux344' order represents '0' with '-1646'
c Encoding variable: aux345 with domain: bool (representing constraint (((x_00003_00007=1) + (x_00003_00008=1) + (x_00004_00008=1))<=1))
c Var 'aux345' direct represents '0' with '-1647'
c Var 'aux345' direct represents '1' with '1647'
c Var 'aux345' order represents '1' with '1'
c Var 'aux345' order represents '0' with '-1647'
c Encoding variable: aux346 with domain: bool (representing constraint (((x_00003_00007=2) + (x_00003_00008=2) + (x_00004_00008=2))<=1))
c Var 'aux346' direct represents '0' with '-1648'
c Var 'aux346' direct represents '1' with '1648'
c Var 'aux346' order represents '1' with '1'
c Var 'aux346' order represents '0' with '-1648'
c Encoding variable: aux347 with domain: bool (representing constraint (((x_00003_00007=3) + (x_00003_00008=3) + (x_00004_00008=3))<=1))
c Var 'aux347' direct represents '0' with '-1649'
c Var 'aux347' direct represents '1' with '1649'
c Var 'aux347' order represents '1' with '1'
c Var 'aux347' order represents '0' with '-1649'
c Encoding variable: aux348 with domain: bool (representing constraint (((x_00003_00007=4) + (x_00003_00008=4) + (x_00004_00008=4))<=1))
c Var 'aux348' direct represents '0' with '-1650'
c Var 'aux348' direct represents '1' with '1650'
c Var 'aux348' order represents '1' with '1'
c Var 'aux348' order represents '0' with '-1650'
c Encoding variable: aux349 with domain: bool (representing constraint (((x_00003_00007=5) + (x_00003_00008=5) + (x_00004_00008=5))<=1))
c Var 'aux349' direct represents '0' with '-1651'
c Var 'aux349' direct represents '1' with '1651'
c Var 'aux349' order represents '1' with '1'
c Var 'aux349' order represents '0' with '-1651'
c Encoding variable: aux350 with domain: bool (representing constraint (((x_00003_00007=6) + (x_00003_00008=6) + (x_00004_00008=6))<=1))
c Var 'aux350' direct represents '0' with '-1652'
c Var 'aux350' direct represents '1' with '1652'
c Var 'aux350' order represents '1' with '1'
c Var 'aux350' order represents '0' with '-1652'
c Encoding variable: aux351 with domain: bool (representing constraint (((x_00003_00007=7) + (x_00003_00008=7) + (x_00004_00008=7))<=1))
c Var 'aux351' direct represents '0' with '-1653'
c Var 'aux351' direct represents '1' with '1653'
c Var 'aux351' order represents '1' with '1'
c Var 'aux351' order represents '0' with '-1653'
c Encoding variable: aux352 with domain: bool (representing constraint (((x_00003_00007=8) + (x_00003_00008=8) + (x_00004_00008=8))<=1))
c Var 'aux352' direct represents '0' with '-1654'
c Var 'aux352' direct represents '1' with '1654'
c Var 'aux352' order represents '1' with '1'
c Var 'aux352' order represents '0' with '-1654'
c Encoding variable: aux353 with domain: bool (representing constraint (((x_00003_00007=9) + (x_00003_00008=9) + (x_00004_00008=9))<=1))
c Var 'aux353' direct represents '0' with '-1655'
c Var 'aux353' direct represents '1' with '1655'
c Var 'aux353' order represents '1' with '1'
c Var 'aux353' order represents '0' with '-1655'
c Encoding variable: aux354 with domain: bool (representing constraint (((x_00004_00001=1) + (x_00004_00002=1) + (x_00005_00001=1))<=1))
c Var 'aux354' direct represents '0' with '-1656'
c Var 'aux354' direct represents '1' with '1656'
c Var 'aux354' order represents '1' with '1'
c Var 'aux354' order represents '0' with '-1656'
c Encoding variable: aux355 with domain: bool (representing constraint (((x_00004_00001=2) + (x_00004_00002=2) + (x_00005_00001=2))<=1))
c Var 'aux355' direct represents '0' with '-1657'
c Var 'aux355' direct represents '1' with '1657'
c Var 'aux355' order represents '1' with '1'
c Var 'aux355' order represents '0' with '-1657'
c Encoding variable: aux356 with domain: bool (representing constraint (((x_00004_00001=3) + (x_00004_00002=3) + (x_00005_00001=3))<=1))
c Var 'aux356' direct represents '0' with '-1658'
c Var 'aux356' direct represents '1' with '1658'
c Var 'aux356' order represents '1' with '1'
c Var 'aux356' order represents '0' with '-1658'
c Encoding variable: aux357 with domain: bool (representing constraint (((x_00004_00001=4) + (x_00004_00002=4) + (x_00005_00001=4))<=1))
c Var 'aux357' direct represents '0' with '-1659'
c Var 'aux357' direct represents '1' with '1659'
c Var 'aux357' order represents '1' with '1'
c Var 'aux357' order represents '0' with '-1659'
c Encoding variable: aux358 with domain: bool (representing constraint (((x_00004_00001=5) + (x_00004_00002=5) + (x_00005_00001=5))<=1))
c Var 'aux358' direct represents '0' with '-1660'
c Var 'aux358' direct represents '1' with '1660'
c Var 'aux358' order represents '1' with '1'
c Var 'aux358' order represents '0' with '-1660'
c Encoding variable: aux359 with domain: bool (representing constraint (((x_00004_00001=6) + (x_00004_00002=6) + (x_00005_00001=6))<=1))
c Var 'aux359' direct represents '0' with '-1661'
c Var 'aux359' direct represents '1' with '1661'
c Var 'aux359' order represents '1' with '1'
c Var 'aux359' order represents '0' with '-1661'
c Encoding variable: aux360 with domain: bool (representing constraint (((x_00004_00001=7) + (x_00004_00002=7) + (x_00005_00001=7))<=1))
c Var 'aux360' direct represents '0' with '-1662'
c Var 'aux360' direct represents '1' with '1662'
c Var 'aux360' order represents '1' with '1'
c Var 'aux360' order represents '0' with '-1662'
c Encoding variable: aux361 with domain: bool (representing constraint (((x_00004_00001=8) + (x_00004_00002=8) + (x_00005_00001=8))<=1))
c Var 'aux361' direct represents '0' with '-1663'
c Var 'aux361' direct represents '1' with '1663'
c Var 'aux361' order represents '1' with '1'
c Var 'aux361' order represents '0' with '-1663'
c Encoding variable: aux362 with domain: bool (representing constraint (((x_00004_00001=9) + (x_00004_00002=9) + (x_00005_00001=9))<=1))
c Var 'aux362' direct represents '0' with '-1664'
c Var 'aux362' direct represents '1' with '1664'
c Var 'aux362' order represents '1' with '1'
c Var 'aux362' order represents '0' with '-1664'
c Encoding variable: aux363 with domain: bool (representing constraint (((x_00004_00003=1) + (x_00005_00002=1) + (x_00005_00003=1))<=1))
c Var 'aux363' direct represents '0' with '-1665'
c Var 'aux363' direct represents '1' with '1665'
c Var 'aux363' order represents '1' with '1'
c Var 'aux363' order represents '0' with '-1665'
c Encoding variable: aux364 with domain: bool (representing constraint (((x_00004_00003=2) + (x_00005_00002=2) + (x_00005_00003=2))<=1))
c Var 'aux364' direct represents '0' with '-1666'
c Var 'aux364' direct represents '1' with '1666'
c Var 'aux364' order represents '1' with '1'
c Var 'aux364' order represents '0' with '-1666'
c Encoding variable: aux365 with domain: bool (representing constraint (((x_00004_00003=3) + (x_00005_00002=3) + (x_00005_00003=3))<=1))
c Var 'aux365' direct represents '0' with '-1667'
c Var 'aux365' direct represents '1' with '1667'
c Var 'aux365' order represents '1' with '1'
c Var 'aux365' order represents '0' with '-1667'
c Encoding variable: aux366 with domain: bool (representing constraint (((x_00004_00003=4) + (x_00005_00002=4) + (x_00005_00003=4))<=1))
c Var 'aux366' direct represents '0' with '-1668'
c Var 'aux366' direct represents '1' with '1668'
c Var 'aux366' order represents '1' with '1'
c Var 'aux366' order represents '0' with '-1668'
c Encoding variable: aux367 with domain: bool (representing constraint (((x_00004_00003=5) + (x_00005_00002=5) + (x_00005_00003=5))<=1))
c Var 'aux367' direct represents '0' with '-1669'
c Var 'aux367' direct represents '1' with '1669'
c Var 'aux367' order represents '1' with '1'
c Var 'aux367' order represents '0' with '-1669'
c Encoding variable: aux368 with domain: bool (representing constraint (((x_00004_00003=6) + (x_00005_00002=6) + (x_00005_00003=6))<=1))
c Var 'aux368' direct represents '0' with '-1670'
c Var 'aux368' direct represents '1' with '1670'
c Var 'aux368' order represents '1' with '1'
c Var 'aux368' order represents '0' with '-1670'
c Encoding variable: aux369 with domain: bool (representing constraint (((x_00004_00003=7) + (x_00005_00002=7) + (x_00005_00003=7))<=1))
c Var 'aux369' direct represents '0' with '-1671'
c Var 'aux369' direct represents '1' with '1671'
c Var 'aux369' order represents '1' with '1'
c Var 'aux369' order represents '0' with '-1671'
c Encoding variable: aux370 with domain: bool (representing constraint (((x_00004_00003=8) + (x_00005_00002=8) + (x_00005_00003=8))<=1))
c Var 'aux370' direct represents '0' with '-1672'
c Var 'aux370' direct represents '1' with '1672'
c Var 'aux370' order represents '1' with '1'
c Var 'aux370' order represents '0' with '-1672'
c Encoding variable: aux371 with domain: bool (representing constraint (((x_00004_00003=9) + (x_00005_00002=9) + (x_00005_00003=9))<=1))
c Var 'aux371' direct represents '0' with '-1673'
c Var 'aux371' direct represents '1' with '1673'
c Var 'aux371' order represents '1' with '1'
c Var 'aux371' order represents '0' with '-1673'
c Encoding variable: aux372 with domain: bool (representing constraint (((x_00006_00004=1) + (x_00006_00005=1) + (x_00004_00004=1) + (x_00005_00004=1))<=1))
c Var 'aux372' direct represents '0' with '-1674'
c Var 'aux372' direct represents '1' with '1674'
c Var 'aux372' order represents '1' with '1'
c Var 'aux372' order represents '0' with '-1674'
c Encoding variable: aux373 with domain: bool (representing constraint (((x_00006_00004=2) + (x_00006_00005=2) + (x_00004_00004=2) + (x_00005_00004=2))<=1))
c Var 'aux373' direct represents '0' with '-1675'
c Var 'aux373' direct represents '1' with '1675'
c Var 'aux373' order represents '1' with '1'
c Var 'aux373' order represents '0' with '-1675'
c Encoding variable: aux374 with domain: bool (representing constraint (((x_00006_00004=3) + (x_00006_00005=3) + (x_00004_00004=3) + (x_00005_00004=3))<=1))
c Var 'aux374' direct represents '0' with '-1676'
c Var 'aux374' direct represents '1' with '1676'
c Var 'aux374' order represents '1' with '1'
c Var 'aux374' order represents '0' with '-1676'
c Encoding variable: aux375 with domain: bool (representing constraint (((x_00006_00004=4) + (x_00006_00005=4) + (x_00004_00004=4) + (x_00005_00004=4))<=1))
c Var 'aux375' direct represents '0' with '-1677'
c Var 'aux375' direct represents '1' with '1677'
c Var 'aux375' order represents '1' with '1'
c Var 'aux375' order represents '0' with '-1677'
c Encoding variable: aux376 with domain: bool (representing constraint (((x_00006_00004=5) + (x_00006_00005=5) + (x_00004_00004=5) + (x_00005_00004=5))<=1))
c Var 'aux376' direct represents '0' with '-1678'
c Var 'aux376' direct represents '1' with '1678'
c Var 'aux376' order represents '1' with '1'
c Var 'aux376' order represents '0' with '-1678'
c Encoding variable: aux377 with domain: bool (representing constraint (((x_00006_00004=6) + (x_00006_00005=6) + (x_00004_00004=6) + (x_00005_00004=6))<=1))
c Var 'aux377' direct represents '0' with '-1679'
c Var 'aux377' direct represents '1' with '1679'
c Var 'aux377' order represents '1' with '1'
c Var 'aux377' order represents '0' with '-1679'
c Encoding variable: aux378 with domain: bool (representing constraint (((x_00006_00004=7) + (x_00006_00005=7) + (x_00004_00004=7) + (x_00005_00004=7))<=1))
c Var 'aux378' direct represents '0' with '-1680'
c Var 'aux378' direct represents '1' with '1680'
c Var 'aux378' order represents '1' with '1'
c Var 'aux378' order represents '0' with '-1680'
c Encoding variable: aux379 with domain: bool (representing constraint (((x_00006_00004=8) + (x_00006_00005=8) + (x_00004_00004=8) + (x_00005_00004=8))<=1))
c Var 'aux379' direct represents '0' with '-1681'
c Var 'aux379' direct represents '1' with '1681'
c Var 'aux379' order represents '1' with '1'
c Var 'aux379' order represents '0' with '-1681'
c Encoding variable: aux380 with domain: bool (representing constraint (((x_00006_00004=9) + (x_00006_00005=9) + (x_00004_00004=9) + (x_00005_00004=9))<=1))
c Var 'aux380' direct represents '0' with '-1682'
c Var 'aux380' direct represents '1' with '1682'
c Var 'aux380' order represents '1' with '1'
c Var 'aux380' order represents '0' with '-1682'
c Encoding variable: aux381 with domain: bool (representing constraint (((x_00004_00007=1) + (x_00005_00007=1) + (x_00005_00008=1))<=1))
c Var 'aux381' direct represents '0' with '-1683'
c Var 'aux381' direct represents '1' with '1683'
c Var 'aux381' order represents '1' with '1'
c Var 'aux381' order represents '0' with '-1683'
c Encoding variable: aux382 with domain: bool (representing constraint (((x_00004_00007=2) + (x_00005_00007=2) + (x_00005_00008=2))<=1))
c Var 'aux382' direct represents '0' with '-1684'
c Var 'aux382' direct represents '1' with '1684'
c Var 'aux382' order represents '1' with '1'
c Var 'aux382' order represents '0' with '-1684'
c Encoding variable: aux383 with domain: bool (representing constraint (((x_00004_00007=3) + (x_00005_00007=3) + (x_00005_00008=3))<=1))
c Var 'aux383' direct represents '0' with '-1685'
c Var 'aux383' direct represents '1' with '1685'
c Var 'aux383' order represents '1' with '1'
c Var 'aux383' order represents '0' with '-1685'
c Encoding variable: aux384 with domain: bool (representing constraint (((x_00004_00007=4) + (x_00005_00007=4) + (x_00005_00008=4))<=1))
c Var 'aux384' direct represents '0' with '-1686'
c Var 'aux384' direct represents '1' with '1686'
c Var 'aux384' order represents '1' with '1'
c Var 'aux384' order represents '0' with '-1686'
c Encoding variable: aux385 with domain: bool (representing constraint (((x_00004_00007=5) + (x_00005_00007=5) + (x_00005_00008=5))<=1))
c Var 'aux385' direct represents '0' with '-1687'
c Var 'aux385' direct represents '1' with '1687'
c Var 'aux385' order represents '1' with '1'
c Var 'aux385' order represents '0' with '-1687'
c Encoding variable: aux386 with domain: bool (representing constraint (((x_00004_00007=6) + (x_00005_00007=6) + (x_00005_00008=6))<=1))
c Var 'aux386' direct represents '0' with '-1688'
c Var 'aux386' direct represents '1' with '1688'
c Var 'aux386' order represents '1' with '1'
c Var 'aux386' order represents '0' with '-1688'
c Encoding variable: aux387 with domain: bool (representing constraint (((x_00004_00007=7) + (x_00005_00007=7) + (x_00005_00008=7))<=1))
c Var 'aux387' direct represents '0' with '-1689'
c Var 'aux387' direct represents '1' with '1689'
c Var 'aux387' order represents '1' with '1'
c Var 'aux387' order represents '0' with '-1689'
c Encoding variable: aux388 with domain: bool (representing constraint (((x_00004_00007=8) + (x_00005_00007=8) + (x_00005_00008=8))<=1))
c Var 'aux388' direct represents '0' with '-1690'
c Var 'aux388' direct represents '1' with '1690'
c Var 'aux388' order represents '1' with '1'
c Var 'aux388' order represents '0' with '-1690'
c Encoding variable: aux389 with domain: bool (representing constraint (((x_00004_00007=9) + (x_00005_00007=9) + (x_00005_00008=9))<=1))
c Var 'aux389' direct represents '0' with '-1691'
c Var 'aux389' direct represents '1' with '1691'
c Var 'aux389' order represents '1' with '1'
c Var 'aux389' order represents '0' with '-1691'
c Encoding variable: aux390 with domain: bool (representing constraint (((x_00008_00003=1) + (x_00006_00003=1) + (x_00007_00003=1))<=1))
c Var 'aux390' direct represents '0' with '-1692'
c Var 'aux390' direct represents '1' with '1692'
c Var 'aux390' order represents '1' with '1'
c Var 'aux390' order represents '0' with '-1692'
c Encoding variable: aux391 with domain: bool (representing constraint (((x_00008_00003=2) + (x_00006_00003=2) + (x_00007_00003=2))<=1))
c Var 'aux391' direct represents '0' with '-1693'
c Var 'aux391' direct represents '1' with '1693'
c Var 'aux391' order represents '1' with '1'
c Var 'aux391' order represents '0' with '-1693'
c Encoding variable: aux392 with domain: bool (representing constraint (((x_00008_00003=3) + (x_00006_00003=3) + (x_00007_00003=3))<=1))
c Var 'aux392' direct represents '0' with '-1694'
c Var 'aux392' direct represents '1' with '1694'
c Var 'aux392' order represents '1' with '1'
c Var 'aux392' order represents '0' with '-1694'
c Encoding variable: aux393 with domain: bool (representing constraint (((x_00008_00003=4) + (x_00006_00003=4) + (x_00007_00003=4))<=1))
c Var 'aux393' direct represents '0' with '-1695'
c Var 'aux393' direct represents '1' with '1695'
c Var 'aux393' order represents '1' with '1'
c Var 'aux393' order represents '0' with '-1695'
c Encoding variable: aux394 with domain: bool (representing constraint (((x_00008_00003=5) + (x_00006_00003=5) + (x_00007_00003=5))<=1))
c Var 'aux394' direct represents '0' with '-1696'
c Var 'aux394' direct represents '1' with '1696'
c Var 'aux394' order represents '1' with '1'
c Var 'aux394' order represents '0' with '-1696'
c Encoding variable: aux395 with domain: bool (representing constraint (((x_00008_00003=6) + (x_00006_00003=6) + (x_00007_00003=6))<=1))
c Var 'aux395' direct represents '0' with '-1697'
c Var 'aux395' direct represents '1' with '1697'
c Var 'aux395' order represents '1' with '1'
c Var 'aux395' order represents '0' with '-1697'
c Encoding variable: aux396 with domain: bool (representing constraint (((x_00008_00003=7) + (x_00006_00003=7) + (x_00007_00003=7))<=1))
c Var 'aux396' direct represents '0' with '-1698'
c Var 'aux396' direct represents '1' with '1698'
c Var 'aux396' order represents '1' with '1'
c Var 'aux396' order represents '0' with '-1698'
c Encoding variable: aux397 with domain: bool (representing constraint (((x_00008_00003=8) + (x_00006_00003=8) + (x_00007_00003=8))<=1))
c Var 'aux397' direct represents '0' with '-1699'
c Var 'aux397' direct represents '1' with '1699'
c Var 'aux397' order represents '1' with '1'
c Var 'aux397' order represents '0' with '-1699'
c Encoding variable: aux398 with domain: bool (representing constraint (((x_00008_00003=9) + (x_00006_00003=9) + (x_00007_00003=9))<=1))
c Var 'aux398' direct represents '0' with '-1700'
c Var 'aux398' direct represents '1' with '1700'
c Var 'aux398' order represents '1' with '1'
c Var 'aux398' order represents '0' with '-1700'
c Encoding variable: aux399 with domain: bool (representing constraint (((x_00006_00007=1) + (x_00006_00008=1) + (x_00006_00009=1))<=1))
c Var 'aux399' direct represents '0' with '-1701'
c Var 'aux399' direct represents '1' with '1701'
c Var 'aux399' order represents '1' with '1'
c Var 'aux399' order represents '0' with '-1701'
c Encoding variable: aux400 with domain: bool (representing constraint (((x_00006_00007=2) + (x_00006_00008=2) + (x_00006_00009=2))<=1))
c Var 'aux400' direct represents '0' with '-1702'
c Var 'aux400' direct represents '1' with '1702'
c Var 'aux400' order represents '1' with '1'
c Var 'aux400' order represents '0' with '-1702'
c Encoding variable: aux401 with domain: bool (representing constraint (((x_00006_00007=3) + (x_00006_00008=3) + (x_00006_00009=3))<=1))
c Var 'aux401' direct represents '0' with '-1703'
c Var 'aux401' direct represents '1' with '1703'
c Var 'aux401' order represents '1' with '1'
c Var 'aux401' order represents '0' with '-1703'
c Encoding variable: aux402 with domain: bool (representing constraint (((x_00006_00007=4) + (x_00006_00008=4) + (x_00006_00009=4))<=1))
c Var 'aux402' direct represents '0' with '-1704'
c Var 'aux402' direct represents '1' with '1704'
c Var 'aux402' order represents '1' with '1'
c Var 'aux402' order represents '0' with '-1704'
c Encoding variable: aux403 with domain: bool (representing constraint (((x_00006_00007=5) + (x_00006_00008=5) + (x_00006_00009=5))<=1))
c Var 'aux403' direct represents '0' with '-1705'
c Var 'aux403' direct represents '1' with '1705'
c Var 'aux403' order represents '1' with '1'
c Var 'aux403' order represents '0' with '-1705'
c Encoding variable: aux404 with domain: bool (representing constraint (((x_00006_00007=6) + (x_00006_00008=6) + (x_00006_00009=6))<=1))
c Var 'aux404' direct represents '0' with '-1706'
c Var 'aux404' direct represents '1' with '1706'
c Var 'aux404' order represents '1' with '1'
c Var 'aux404' order represents '0' with '-1706'
c Encoding variable: aux405 with domain: bool (representing constraint (((x_00006_00007=7) + (x_00006_00008=7) + (x_00006_00009=7))<=1))
c Var 'aux405' direct represents '0' with '-1707'
c Var 'aux405' direct represents '1' with '1707'
c Var 'aux405' order represents '1' with '1'
c Var 'aux405' order represents '0' with '-1707'
c Encoding variable: aux406 with domain: bool (representing constraint (((x_00006_00007=8) + (x_00006_00008=8) + (x_00006_00009=8))<=1))
c Var 'aux406' direct represents '0' with '-1708'
c Var 'aux406' direct represents '1' with '1708'
c Var 'aux406' order represents '1' with '1'
c Var 'aux406' order represents '0' with '-1708'
c Encoding variable: aux407 with domain: bool (representing constraint (((x_00006_00007=9) + (x_00006_00008=9) + (x_00006_00009=9))<=1))
c Var 'aux407' direct represents '0' with '-1709'
c Var 'aux407' direct represents '1' with '1709'
c Var 'aux407' order represents '1' with '1'
c Var 'aux407' order represents '0' with '-1709'
c Encoding variable: aux408 with domain: bool (representing constraint (((x_00008_00009=1) + (x_00009_00008=1) + (x_00009_00009=1) + (x_00007_00009=1))<=1))
c Var 'aux408' direct represents '0' with '-1710'
c Var 'aux408' direct represents '1' with '1710'
c Var 'aux408' order represents '1' with '1'
c Var 'aux408' order represents '0' with '-1710'
c Encoding variable: aux409 with domain: bool (representing constraint (((x_00008_00009=2) + (x_00009_00008=2) + (x_00009_00009=2) + (x_00007_00009=2))<=1))
c Var 'aux409' direct represents '0' with '-1711'
c Var 'aux409' direct represents '1' with '1711'
c Var 'aux409' order represents '1' with '1'
c Var 'aux409' order represents '0' with '-1711'
c Encoding variable: aux410 with domain: bool (representing constraint (((x_00008_00009=3) + (x_00009_00008=3) + (x_00009_00009=3) + (x_00007_00009=3))<=1))
c Var 'aux410' direct represents '0' with '-1712'
c Var 'aux410' direct represents '1' with '1712'
c Var 'aux410' order represents '1' with '1'
c Var 'aux410' order represents '0' with '-1712'
c Encoding variable: aux411 with domain: bool (representing constraint (((x_00008_00009=4) + (x_00009_00008=4) + (x_00009_00009=4) + (x_00007_00009=4))<=1))
c Var 'aux411' direct represents '0' with '-1713'
c Var 'aux411' direct represents '1' with '1713'
c Var 'aux411' order represents '1' with '1'
c Var 'aux411' order represents '0' with '-1713'
c Encoding variable: aux412 with domain: bool (representing constraint (((x_00008_00009=5) + (x_00009_00008=5) + (x_00009_00009=5) + (x_00007_00009=5))<=1))
c Var 'aux412' direct represents '0' with '-1714'
c Var 'aux412' direct represents '1' with '1714'
c Var 'aux412' order represents '1' with '1'
c Var 'aux412' order represents '0' with '-1714'
c Encoding variable: aux413 with domain: bool (representing constraint (((x_00008_00009=6) + (x_00009_00008=6) + (x_00009_00009=6) + (x_00007_00009=6))<=1))
c Var 'aux413' direct represents '0' with '-1715'
c Var 'aux413' direct represents '1' with '1715'
c Var 'aux413' order represents '1' with '1'
c Var 'aux413' order represents '0' with '-1715'
c Encoding variable: aux414 with domain: bool (representing constraint (((x_00008_00009=7) + (x_00009_00008=7) + (x_00009_00009=7) + (x_00007_00009=7))<=1))
c Var 'aux414' direct represents '0' with '-1716'
c Var 'aux414' direct represents '1' with '1716'
c Var 'aux414' order represents '1' with '1'
c Var 'aux414' order represents '0' with '-1716'
c Encoding variable: aux415 with domain: bool (representing constraint (((x_00008_00009=8) + (x_00009_00008=8) + (x_00009_00009=8) + (x_00007_00009=8))<=1))
c Var 'aux415' direct represents '0' with '-1717'
c Var 'aux415' direct represents '1' with '1717'
c Var 'aux415' order represents '1' with '1'
c Var 'aux415' order represents '0' with '-1717'
c Encoding variable: aux416 with domain: bool (representing constraint (((x_00008_00009=9) + (x_00009_00008=9) + (x_00009_00009=9) + (x_00007_00009=9))<=1))
c Var 'aux416' direct represents '0' with '-1718'
c Var 'aux416' direct represents '1' with '1718'
c Var 'aux416' order represents '1' with '1'
c Var 'aux416' order represents '0' with '-1718'
c Encoding variable: aux417 with domain: bool (representing constraint (((x_00008_00004=1) + (x_00008_00005=1) + (x_00009_00005=1))<=1))
c Var 'aux417' direct represents '0' with '-1719'
c Var 'aux417' direct represents '1' with '1719'
c Var 'aux417' order represents '1' with '1'
c Var 'aux417' order represents '0' with '-1719'
c Encoding variable: aux418 with domain: bool (representing constraint (((x_00008_00004=2) + (x_00008_00005=2) + (x_00009_00005=2))<=1))
c Var 'aux418' direct represents '0' with '-1720'
c Var 'aux418' direct represents '1' with '1720'
c Var 'aux418' order represents '1' with '1'
c Var 'aux418' order represents '0' with '-1720'
c Encoding variable: aux419 with domain: bool (representing constraint (((x_00008_00004=3) + (x_00008_00005=3) + (x_00009_00005=3))<=1))
c Var 'aux419' direct represents '0' with '-1721'
c Var 'aux419' direct represents '1' with '1721'
c Var 'aux419' order represents '1' with '1'
c Var 'aux419' order represents '0' with '-1721'
c Encoding variable: aux420 with domain: bool (representing constraint (((x_00008_00004=4) + (x_00008_00005=4) + (x_00009_00005=4))<=1))
c Var 'aux420' direct represents '0' with '-1722'
c Var 'aux420' direct represents '1' with '1722'
c Var 'aux420' order represents '1' with '1'
c Var 'aux420' order represents '0' with '-1722'
c Encoding variable: aux421 with domain: bool (representing constraint (((x_00008_00004=5) + (x_00008_00005=5) + (x_00009_00005=5))<=1))
c Var 'aux421' direct represents '0' with '-1723'
c Var 'aux421' direct represents '1' with '1723'
c Var 'aux421' order represents '1' with '1'
c Var 'aux421' order represents '0' with '-1723'
c Encoding variable: aux422 with domain: bool (representing constraint (((x_00008_00004=6) + (x_00008_00005=6) + (x_00009_00005=6))<=1))
c Var 'aux422' direct represents '0' with '-1724'
c Var 'aux422' direct represents '1' with '1724'
c Var 'aux422' order represents '1' with '1'
c Var 'aux422' order represents '0' with '-1724'
c Encoding variable: aux423 with domain: bool (representing constraint (((x_00008_00004=7) + (x_00008_00005=7) + (x_00009_00005=7))<=1))
c Var 'aux423' direct represents '0' with '-1725'
c Var 'aux423' direct represents '1' with '1725'
c Var 'aux423' order represents '1' with '1'
c Var 'aux423' order represents '0' with '-1725'
c Encoding variable: aux424 with domain: bool (representing constraint (((x_00008_00004=8) + (x_00008_00005=8) + (x_00009_00005=8))<=1))
c Var 'aux424' direct represents '0' with '-1726'
c Var 'aux424' direct represents '1' with '1726'
c Var 'aux424' order represents '1' with '1'
c Var 'aux424' order represents '0' with '-1726'
c Encoding variable: aux425 with domain: bool (representing constraint (((x_00008_00004=9) + (x_00008_00005=9) + (x_00009_00005=9))<=1))
c Var 'aux425' direct represents '0' with '-1727'
c Var 'aux425' direct represents '1' with '1727'
c Var 'aux425' order represents '1' with '1'
c Var 'aux425' order represents '0' with '-1727'
c Encoding variable: aux426 with domain: bool (representing constraint (((x_00008_00007=1) + (x_00008_00008=1) + (x_00009_00007=1))<=1))
c Var 'aux426' direct represents '0' with '-1728'
c Var 'aux426' direct represents '1' with '1728'
c Var 'aux426' order represents '1' with '1'
c Var 'aux426' order represents '0' with '-1728'
c Encoding variable: aux427 with domain: bool (representing constraint (((x_00008_00007=2) + (x_00008_00008=2) + (x_00009_00007=2))<=1))
c Var 'aux427' direct represents '0' with '-1729'
c Var 'aux427' direct represents '1' with '1729'
c Var 'aux427' order represents '1' with '1'
c Var 'aux427' order represents '0' with '-1729'
c Encoding variable: aux428 with domain: bool (representing constraint (((x_00008_00007=3) + (x_00008_00008=3) + (x_00009_00007=3))<=1))
c Var 'aux428' direct represents '0' with '-1730'
c Var 'aux428' direct represents '1' with '1730'
c Var 'aux428' order represents '1' with '1'
c Var 'aux428' order represents '0' with '-1730'
c Encoding variable: aux429 with domain: bool (representing constraint (((x_00008_00007=4) + (x_00008_00008=4) + (x_00009_00007=4))<=1))
c Var 'aux429' direct represents '0' with '-1731'
c Var 'aux429' direct represents '1' with '1731'
c Var 'aux429' order represents '1' with '1'
c Var 'aux429' order represents '0' with '-1731'
c Encoding variable: aux430 with domain: bool (representing constraint (((x_00008_00007=5) + (x_00008_00008=5) + (x_00009_00007=5))<=1))
c Var 'aux430' direct represents '0' with '-1732'
c Var 'aux430' direct represents '1' with '1732'
c Var 'aux430' order represents '1' with '1'
c Var 'aux430' order represents '0' with '-1732'
c Encoding variable: aux431 with domain: bool (representing constraint (((x_00008_00007=6) + (x_00008_00008=6) + (x_00009_00007=6))<=1))
c Var 'aux431' direct represents '0' with '-1733'
c Var 'aux431' direct represents '1' with '1733'
c Var 'aux431' order represents '1' with '1'
c Var 'aux431' order represents '0' with '-1733'
c Encoding variable: aux432 with domain: bool (representing constraint (((x_00008_00007=7) + (x_00008_00008=7) + (x_00009_00007=7))<=1))
c Var 'aux432' direct represents '0' with '-1734'
c Var 'aux432' direct represents '1' with '1734'
c Var 'aux432' order represents '1' with '1'
c Var 'aux432' order represents '0' with '-1734'
c Encoding variable: aux433 with domain: bool (representing constraint (((x_00008_00007=8) + (x_00008_00008=8) + (x_00009_00007=8))<=1))
c Var 'aux433' direct represents '0' with '-1735'
c Var 'aux433' direct represents '1' with '1735'
c Var 'aux433' order represents '1' with '1'
c Var 'aux433' order represents '0' with '-1735'
c Encoding variable: aux434 with domain: bool (representing constraint (((x_00008_00007=9) + (x_00008_00008=9) + (x_00009_00007=9))<=1))
c Var 'aux434' direct represents '0' with '-1736'
c Var 'aux434' direct represents '1' with '1736'
c Var 'aux434' order represents '1' with '1'
c Var 'aux434' order represents '0' with '-1736'
c Encoding variable: aux435 with domain: int(0..16) (representing constraint (shift(x_00002_00001, -1) + shift(x_00001_00002, -1)))
c Both direct and order encoding.
c Var 'aux435' order represents '0' with '1737'
c Var 'aux435' direct represents '0' with '1737'
c Var 'aux435' order represents '1' with '1738'
-1737 1738 0
c Var 'aux435' direct represents '1' with '1739'
1737 -1738 1739 0
-1739 1738 0
-1739 -1737 0
c Var 'aux435' order represents '2' with '1740'
-1738 1740 0
c Var 'aux435' direct represents '2' with '1741'
1738 -1740 1741 0
-1741 1740 0
-1741 -1738 0
c Var 'aux435' order represents '3' with '1742'
-1740 1742 0
c Var 'aux435' direct represents '3' with '1743'
1740 -1742 1743 0
-1743 1742 0
-1743 -1740 0
c Var 'aux435' order represents '4' with '1744'
-1742 1744 0
c Var 'aux435' direct represents '4' with '1745'
1742 -1744 1745 0
-1745 1744 0
-1745 -1742 0
c Var 'aux435' order represents '5' with '1746'
-1744 1746 0
c Var 'aux435' direct represents '5' with '1747'
1744 -1746 1747 0
-1747 1746 0
-1747 -1744 0
c Var 'aux435' order represents '6' with '1748'
-1746 1748 0
c Var 'aux435' direct represents '6' with '1749'
1746 -1748 1749 0
-1749 1748 0
-1749 -1746 0
c Var 'aux435' order represents '7' with '1750'
-1748 1750 0
c Var 'aux435' direct represents '7' with '1751'
1748 -1750 1751 0
-1751 1750 0
-1751 -1748 0
c Var 'aux435' order represents '8' with '1752'
-1750 1752 0
c Var 'aux435' direct represents '8' with '1753'
1750 -1752 1753 0
-1753 1752 0
-1753 -1750 0
c Var 'aux435' order represents '9' with '1754'
-1752 1754 0
c Var 'aux435' direct represents '9' with '1755'
1752 -1754 1755 0
-1755 1754 0
-1755 -1752 0
c Var 'aux435' order represents '10' with '1756'
-1754 1756 0
c Var 'aux435' direct represents '10' with '1757'
1754 -1756 1757 0
-1757 1756 0
-1757 -1754 0
c Var 'aux435' order represents '11' with '1758'
-1756 1758 0
c Var 'aux435' direct represents '11' with '1759'
1756 -1758 1759 0
-1759 1758 0
-1759 -1756 0
c Var 'aux435' order represents '12' with '1760'
-1758 1760 0
c Var 'aux435' direct represents '12' with '1761'
1758 -1760 1761 0
-1761 1760 0
-1761 -1758 0
c Var 'aux435' order represents '13' with '1762'
-1760 1762 0
c Var 'aux435' direct represents '13' with '1763'
1760 -1762 1763 0
-1763 1762 0
-1763 -1760 0
c Var 'aux435' order represents '14' with '1764'
-1762 1764 0
c Var 'aux435' direct represents '14' with '1765'
1762 -1764 1765 0
-1765 1764 0
-1765 -1762 0
c Var 'aux435' order represents '15' with '1766'
-1764 1766 0
c Var 'aux435' direct represents '15' with '1767'
1764 -1766 1767 0
-1767 1766 0
-1767 -1764 0
c Var 'aux435' direct represents '16' with '-1766'
1737 1739 1741 1743 1745 1747 1749 1751 1753 1755 1757 1759 1761 1763 1765 1767 -1766 0
c Encoding variable: aux436 with domain: int(0..16) (representing constraint (shift(x_00001_00001, -1) + shift(x_00002_00002, -1)))
c Both direct and order encoding.
c Var 'aux436' order represents '0' with '1768'
c Var 'aux436' direct represents '0' with '1768'
c Var 'aux436' order represents '1' with '1769'
-1768 1769 0
c Var 'aux436' direct represents '1' with '1770'
1768 -1769 1770 0
-1770 1769 0
-1770 -1768 0
c Var 'aux436' order represents '2' with '1771'
-1769 1771 0
c Var 'aux436' direct represents '2' with '1772'
1769 -1771 1772 0
-1772 1771 0
-1772 -1769 0
c Var 'aux436' order represents '3' with '1773'
-1771 1773 0
c Var 'aux436' direct represents '3' with '1774'
1771 -1773 1774 0
-1774 1773 0
-1774 -1771 0
c Var 'aux436' order represents '4' with '1775'
-1773 1775 0
c Var 'aux436' direct represents '4' with '1776'
1773 -1775 1776 0
-1776 1775 0
-1776 -1773 0
c Var 'aux436' order represents '5' with '1777'
-1775 1777 0
c Var 'aux436' direct represents '5' with '1778'
1775 -1777 1778 0
-1778 1777 0
-1778 -1775 0
c Var 'aux436' order represents '6' with '1779'
-1777 1779 0
c Var 'aux436' direct represents '6' with '1780'
1777 -1779 1780 0
-1780 1779 0
-1780 -1777 0
c Var 'aux436' order represents '7' with '1781'
-1779 1781 0
c Var 'aux436' direct represents '7' with '1782'
1779 -1781 1782 0
-1782 1781 0
-1782 -1779 0
c Var 'aux436' order represents '8' with '1783'
-1781 1783 0
c Var 'aux436' direct represents '8' with '1784'
1781 -1783 1784 0
-1784 1783 0
-1784 -1781 0
c Var 'aux436' order represents '9' with '1785'
-1783 1785 0
c Var 'aux436' direct represents '9' with '1786'
1783 -1785 1786 0
-1786 1785 0
-1786 -1783 0
c Var 'aux436' order represents '10' with '1787'
-1785 1787 0
c Var 'aux436' direct represents '10' with '1788'
1785 -1787 1788 0
-1788 1787 0
-1788 -1785 0
c Var 'aux436' order represents '11' with '1789'
-1787 1789 0
c Var 'aux436' direct represents '11' with '1790'
1787 -1789 1790 0
-1790 1789 0
-1790 -1787 0
c Var 'aux436' order represents '12' with '1791'
-1789 1791 0
c Var 'aux436' direct represents '12' with '1792'
1789 -1791 1792 0
-1792 1791 0
-1792 -1789 0
c Var 'aux436' order represents '13' with '1793'
-1791 1793 0
c Var 'aux436' direct represents '13' with '1794'
1791 -1793 1794 0
-1794 1793 0
-1794 -1791 0
c Var 'aux436' order represents '14' with '1795'
-1793 1795 0
c Var 'aux436' direct represents '14' with '1796'
1793 -1795 1796 0
-1796 1795 0
-1796 -1793 0
c Var 'aux436' order represents '15' with '1797'
-1795 1797 0
c Var 'aux436' direct represents '15' with '1798'
1795 -1797 1798 0
-1798 1797 0
-1798 -1795 0
c Var 'aux436' direct represents '16' with '-1797'
1768 1770 1772 1774 1776 1778 1780 1782 1784 1786 1788 1790 1792 1794 1796 1798 -1797 0
c Encoding variable: aux437 with domain: int(0..16) (representing constraint (shift(x_00002_00004, -1) + shift(x_00001_00005, -1)))
c Both direct and order encoding.
c Var 'aux437' order represents '0' with '1799'
c Var 'aux437' direct represents '0' with '1799'
c Var 'aux437' order represents '1' with '1800'
-1799 1800 0
c Var 'aux437' direct represents '1' with '1801'
1799 -1800 1801 0
-1801 1800 0
-1801 -1799 0
c Var 'aux437' order represents '2' with '1802'
-1800 1802 0
c Var 'aux437' direct represents '2' with '1803'
1800 -1802 1803 0
-1803 1802 0
-1803 -1800 0
c Var 'aux437' order represents '3' with '1804'
-1802 1804 0
c Var 'aux437' direct represents '3' with '1805'
1802 -1804 1805 0
-1805 1804 0
-1805 -1802 0
c Var 'aux437' order represents '4' with '1806'
-1804 1806 0
c Var 'aux437' direct represents '4' with '1807'
1804 -1806 1807 0
-1807 1806 0
-1807 -1804 0
c Var 'aux437' order represents '5' with '1808'
-1806 1808 0
c Var 'aux437' direct represents '5' with '1809'
1806 -1808 1809 0
-1809 1808 0
-1809 -1806 0
c Var 'aux437' order represents '6' with '1810'
-1808 1810 0
c Var 'aux437' direct represents '6' with '1811'
1808 -1810 1811 0
-1811 1810 0
-1811 -1808 0
c Var 'aux437' order represents '7' with '1812'
-1810 1812 0
c Var 'aux437' direct represents '7' with '1813'
1810 -1812 1813 0
-1813 1812 0
-1813 -1810 0
c Var 'aux437' order represents '8' with '1814'
-1812 1814 0
c Var 'aux437' direct represents '8' with '1815'
1812 -1814 1815 0
-1815 1814 0
-1815 -1812 0
c Var 'aux437' order represents '9' with '1816'
-1814 1816 0
c Var 'aux437' direct represents '9' with '1817'
1814 -1816 1817 0
-1817 1816 0
-1817 -1814 0
c Var 'aux437' order represents '10' with '1818'
-1816 1818 0
c Var 'aux437' direct represents '10' with '1819'
1816 -1818 1819 0
-1819 1818 0
-1819 -1816 0
c Var 'aux437' order represents '11' with '1820'
-1818 1820 0
c Var 'aux437' direct represents '11' with '1821'
1818 -1820 1821 0
-1821 1820 0
-1821 -1818 0
c Var 'aux437' order represents '12' with '1822'
-1820 1822 0
c Var 'aux437' direct represents '12' with '1823'
1820 -1822 1823 0
-1823 1822 0
-1823 -1820 0
c Var 'aux437' order represents '13' with '1824'
-1822 1824 0
c Var 'aux437' direct represents '13' with '1825'
1822 -1824 1825 0
-1825 1824 0
-1825 -1822 0
c Var 'aux437' order represents '14' with '1826'
-1824 1826 0
c Var 'aux437' direct represents '14' with '1827'
1824 -1826 1827 0
-1827 1826 0
-1827 -1824 0
c Var 'aux437' order represents '15' with '1828'
-1826 1828 0
c Var 'aux437' direct represents '15' with '1829'
1826 -1828 1829 0
-1829 1828 0
-1829 -1826 0
c Var 'aux437' direct represents '16' with '-1828'
1799 1801 1803 1805 1807 1809 1811 1813 1815 1817 1819 1821 1823 1825 1827 1829 -1828 0
c Encoding variable: aux438 with domain: int(0..16) (representing constraint (shift(x_00002_00005, -1) + shift(x_00004_00005, -1)))
c Both direct and order encoding.
c Var 'aux438' order represents '0' with '1830'
c Var 'aux438' direct represents '0' with '1830'
c Var 'aux438' order represents '1' with '1831'
-1830 1831 0
c Var 'aux438' direct represents '1' with '1832'
1830 -1831 1832 0
-1832 1831 0
-1832 -1830 0
c Var 'aux438' order represents '2' with '1833'
-1831 1833 0
c Var 'aux438' direct represents '2' with '1834'
1831 -1833 1834 0
-1834 1833 0
-1834 -1831 0
c Var 'aux438' order represents '3' with '1835'
-1833 1835 0
c Var 'aux438' direct represents '3' with '1836'
1833 -1835 1836 0
-1836 1835 0
-1836 -1833 0
c Var 'aux438' order represents '4' with '1837'
-1835 1837 0
c Var 'aux438' direct represents '4' with '1838'
1835 -1837 1838 0
-1838 1837 0
-1838 -1835 0
c Var 'aux438' order represents '5' with '1839'
-1837 1839 0
c Var 'aux438' direct represents '5' with '1840'
1837 -1839 1840 0
-1840 1839 0
-1840 -1837 0
c Var 'aux438' order represents '6' with '1841'
-1839 1841 0
c Var 'aux438' direct represents '6' with '1842'
1839 -1841 1842 0
-1842 1841 0
-1842 -1839 0
c Var 'aux438' order represents '7' with '1843'
-1841 1843 0
c Var 'aux438' direct represents '7' with '1844'
1841 -1843 1844 0
-1844 1843 0
-1844 -1841 0
c Var 'aux438' order represents '8' with '1845'
-1843 1845 0
c Var 'aux438' direct represents '8' with '1846'
1843 -1845 1846 0
-1846 1845 0
-1846 -1843 0
c Var 'aux438' order represents '9' with '1847'
-1845 1847 0
c Var 'aux438' direct represents '9' with '1848'
1845 -1847 1848 0
-1848 1847 0
-1848 -1845 0
c Var 'aux438' order represents '10' with '1849'
-1847 1849 0
c Var 'aux438' direct represents '10' with '1850'
1847 -1849 1850 0
-1850 1849 0
-1850 -1847 0
c Var 'aux438' order represents '11' with '1851'
-1849 1851 0
c Var 'aux438' direct represents '11' with '1852'
1849 -1851 1852 0
-1852 1851 0
-1852 -1849 0
c Var 'aux438' order represents '12' with '1853'
-1851 1853 0
c Var 'aux438' direct represents '12' with '1854'
1851 -1853 1854 0
-1854 1853 0
-1854 -1851 0
c Var 'aux438' order represents '13' with '1855'
-1853 1855 0
c Var 'aux438' direct represents '13' with '1856'
1853 -1855 1856 0
-1856 1855 0
-1856 -1853 0
c Var 'aux438' order represents '14' with '1857'
-1855 1857 0
c Var 'aux438' direct represents '14' with '1858'
1855 -1857 1858 0
-1858 1857 0
-1858 -1855 0
c Var 'aux438' order represents '15' with '1859'
-1857 1859 0
c Var 'aux438' direct represents '15' with '1860'
1857 -1859 1860 0
-1860 1859 0
-1860 -1857 0
c Var 'aux438' direct represents '16' with '-1859'
1830 1832 1834 1836 1838 1840 1842 1844 1846 1848 1850 1852 1854 1856 1858 1860 -1859 0
c Encoding variable: aux439 with domain: int(0..16) (representing constraint (shift(x_00003_00006, -1) + shift(x_00005_00006, -1)))
c Both direct and order encoding.
c Var 'aux439' order represents '0' with '1861'
c Var 'aux439' direct represents '0' with '1861'
c Var 'aux439' order represents '1' with '1862'
-1861 1862 0
c Var 'aux439' direct represents '1' with '1863'
1861 -1862 1863 0
-1863 1862 0
-1863 -1861 0
c Var 'aux439' order represents '2' with '1864'
-1862 1864 0
c Var 'aux439' direct represents '2' with '1865'
1862 -1864 1865 0
-1865 1864 0
-1865 -1862 0
c Var 'aux439' order represents '3' with '1866'
-1864 1866 0
c Var 'aux439' direct represents '3' with '1867'
1864 -1866 1867 0
-1867 1866 0
-1867 -1864 0
c Var 'aux439' order represents '4' with '1868'
-1866 1868 0
c Var 'aux439' direct represents '4' with '1869'
1866 -1868 1869 0
-1869 1868 0
-1869 -1866 0
c Var 'aux439' order represents '5' with '1870'
-1868 1870 0
c Var 'aux439' direct represents '5' with '1871'
1868 -1870 1871 0
-1871 1870 0
-1871 -1868 0
c Var 'aux439' order represents '6' with '1872'
-1870 1872 0
c Var 'aux439' direct represents '6' with '1873'
1870 -1872 1873 0
-1873 1872 0
-1873 -1870 0
c Var 'aux439' order represents '7' with '1874'
-1872 1874 0
c Var 'aux439' direct represents '7' with '1875'
1872 -1874 1875 0
-1875 1874 0
-1875 -1872 0
c Var 'aux439' order represents '8' with '1876'
-1874 1876 0
c Var 'aux439' direct represents '8' with '1877'
1874 -1876 1877 0
-1877 1876 0
-1877 -1874 0
c Var 'aux439' order represents '9' with '1878'
-1876 1878 0
c Var 'aux439' direct represents '9' with '1879'
1876 -1878 1879 0
-1879 1878 0
-1879 -1876 0
c Var 'aux439' order represents '10' with '1880'
-1878 1880 0
c Var 'aux439' direct represents '10' with '1881'
1878 -1880 1881 0
-1881 1880 0
-1881 -1878 0
c Var 'aux439' order represents '11' with '1882'
-1880 1882 0
c Var 'aux439' direct represents '11' with '1883'
1880 -1882 1883 0
-1883 1882 0
-1883 -1880 0
c Var 'aux439' order represents '12' with '1884'
-1882 1884 0
c Var 'aux439' direct represents '12' with '1885'
1882 -1884 1885 0
-1885 1884 0
-1885 -1882 0
c Var 'aux439' order represents '13' with '1886'
-1884 1886 0
c Var 'aux439' direct represents '13' with '1887'
1884 -1886 1887 0
-1887 1886 0
-1887 -1884 0
c Var 'aux439' order represents '14' with '1888'
-1886 1888 0
c Var 'aux439' direct represents '14' with '1889'
1886 -1888 1889 0
-1889 1888 0
-1889 -1886 0
c Var 'aux439' order represents '15' with '1890'
-1888 1890 0
c Var 'aux439' direct represents '15' with '1891'
1888 -1890 1891 0
-1891 1890 0
-1891 -1888 0
c Var 'aux439' direct represents '16' with '-1890'
1861 1863 1865 1867 1869 1871 1873 1875 1877 1879 1881 1883 1885 1887 1889 1891 -1890 0
c Encoding variable: aux440 with domain: int(0..16) (representing constraint (shift(x_00004_00004, -1) + shift(x_00006_00005, -1)))
c Both direct and order encoding.
c Var 'aux440' order represents '0' with '1892'
c Var 'aux440' direct represents '0' with '1892'
c Var 'aux440' order represents '1' with '1893'
-1892 1893 0
c Var 'aux440' direct represents '1' with '1894'
1892 -1893 1894 0
-1894 1893 0
-1894 -1892 0
c Var 'aux440' order represents '2' with '1895'
-1893 1895 0
c Var 'aux440' direct represents '2' with '1896'
1893 -1895 1896 0
-1896 1895 0
-1896 -1893 0
c Var 'aux440' order represents '3' with '1897'
-1895 1897 0
c Var 'aux440' direct represents '3' with '1898'
1895 -1897 1898 0
-1898 1897 0
-1898 -1895 0
c Var 'aux440' order represents '4' with '1899'
-1897 1899 0
c Var 'aux440' direct represents '4' with '1900'
1897 -1899 1900 0
-1900 1899 0
-1900 -1897 0
c Var 'aux440' order represents '5' with '1901'
-1899 1901 0
c Var 'aux440' direct represents '5' with '1902'
1899 -1901 1902 0
-1902 1901 0
-1902 -1899 0
c Var 'aux440' order represents '6' with '1903'
-1901 1903 0
c Var 'aux440' direct represents '6' with '1904'
1901 -1903 1904 0
-1904 1903 0
-1904 -1901 0
c Var 'aux440' order represents '7' with '1905'
-1903 1905 0
c Var 'aux440' direct represents '7' with '1906'
1903 -1905 1906 0
-1906 1905 0
-1906 -1903 0
c Var 'aux440' order represents '8' with '1907'
-1905 1907 0
c Var 'aux440' direct represents '8' with '1908'
1905 -1907 1908 0
-1908 1907 0
-1908 -1905 0
c Var 'aux440' order represents '9' with '1909'
-1907 1909 0
c Var 'aux440' direct represents '9' with '1910'
1907 -1909 1910 0
-1910 1909 0
-1910 -1907 0
c Var 'aux440' order represents '10' with '1911'
-1909 1911 0
c Var 'aux440' direct represents '10' with '1912'
1909 -1911 1912 0
-1912 1911 0
-1912 -1909 0
c Var 'aux440' order represents '11' with '1913'
-1911 1913 0
c Var 'aux440' direct represents '11' with '1914'
1911 -1913 1914 0
-1914 1913 0
-1914 -1911 0
c Var 'aux440' order represents '12' with '1915'
-1913 1915 0
c Var 'aux440' direct represents '12' with '1916'
1913 -1915 1916 0
-1916 1915 0
-1916 -1913 0
c Var 'aux440' order represents '13' with '1917'
-1915 1917 0
c Var 'aux440' direct represents '13' with '1918'
1915 -1917 1918 0
-1918 1917 0
-1918 -1915 0
c Var 'aux440' order represents '14' with '1919'
-1917 1919 0
c Var 'aux440' direct represents '14' with '1920'
1917 -1919 1920 0
-1920 1919 0
-1920 -1917 0
c Var 'aux440' order represents '15' with '1921'
-1919 1921 0
c Var 'aux440' direct represents '15' with '1922'
1919 -1921 1922 0
-1922 1921 0
-1922 -1919 0
c Var 'aux440' direct represents '16' with '-1921'
1892 1894 1896 1898 1900 1902 1904 1906 1908 1910 1912 1914 1916 1918 1920 1922 -1921 0
c Encoding variable: aux441 with domain: int(0..16) (representing constraint (shift(x_00007_00009, -1) + shift(x_00009_00009, -1)))
c Both direct and order encoding.
c Var 'aux441' order represents '0' with '1923'
c Var 'aux441' direct represents '0' with '1923'
c Var 'aux441' order represents '1' with '1924'
-1923 1924 0
c Var 'aux441' direct represents '1' with '1925'
1923 -1924 1925 0
-1925 1924 0
-1925 -1923 0
c Var 'aux441' order represents '2' with '1926'
-1924 1926 0
c Var 'aux441' direct represents '2' with '1927'
1924 -1926 1927 0
-1927 1926 0
-1927 -1924 0
c Var 'aux441' order represents '3' with '1928'
-1926 1928 0
c Var 'aux441' direct represents '3' with '1929'
1926 -1928 1929 0
-1929 1928 0
-1929 -1926 0
c Var 'aux441' order represents '4' with '1930'
-1928 1930 0
c Var 'aux441' direct represents '4' with '1931'
1928 -1930 1931 0
-1931 1930 0
-1931 -1928 0
c Var 'aux441' order represents '5' with '1932'
-1930 1932 0
c Var 'aux441' direct represents '5' with '1933'
1930 -1932 1933 0
-1933 1932 0
-1933 -1930 0
c Var 'aux441' order represents '6' with '1934'
-1932 1934 0
c Var 'aux441' direct represents '6' with '1935'
1932 -1934 1935 0
-1935 1934 0
-1935 -1932 0
c Var 'aux441' order represents '7' with '1936'
-1934 1936 0
c Var 'aux441' direct represents '7' with '1937'
1934 -1936 1937 0
-1937 1936 0
-1937 -1934 0
c Var 'aux441' order represents '8' with '1938'
-1936 1938 0
c Var 'aux441' direct represents '8' with '1939'
1936 -1938 1939 0
-1939 1938 0
-1939 -1936 0
c Var 'aux441' order represents '9' with '1940'
-1938 1940 0
c Var 'aux441' direct represents '9' with '1941'
1938 -1940 1941 0
-1941 1940 0
-1941 -1938 0
c Var 'aux441' order represents '10' with '1942'
-1940 1942 0
c Var 'aux441' direct represents '10' with '1943'
1940 -1942 1943 0
-1943 1942 0
-1943 -1940 0
c Var 'aux441' order represents '11' with '1944'
-1942 1944 0
c Var 'aux441' direct represents '11' with '1945'
1942 -1944 1945 0
-1945 1944 0
-1945 -1942 0
c Var 'aux441' order represents '12' with '1946'
-1944 1946 0
c Var 'aux441' direct represents '12' with '1947'
1944 -1946 1947 0
-1947 1946 0
-1947 -1944 0
c Var 'aux441' order represents '13' with '1948'
-1946 1948 0
c Var 'aux441' direct represents '13' with '1949'
1946 -1948 1949 0
-1949 1948 0
-1949 -1946 0
c Var 'aux441' order represents '14' with '1950'
-1948 1950 0
c Var 'aux441' direct represents '14' with '1951'
1948 -1950 1951 0
-1951 1950 0
-1951 -1948 0
c Var 'aux441' order represents '15' with '1952'
-1950 1952 0
c Var 'aux441' direct represents '15' with '1953'
1950 -1952 1953 0
-1953 1952 0
-1953 -1950 0
c Var 'aux441' direct represents '16' with '-1952'
1923 1925 1927 1929 1931 1933 1935 1937 1939 1941 1943 1945 1947 1949 1951 1953 -1952 0
c Encoding variable: aux442 with domain: int(0..2) (representing constraint ((x_00003_00001=1) + (x_00005_00001=1)))
c Both direct and order encoding.
c Var 'aux442' order represents '0' with '1954'
c Var 'aux442' direct represents '0' with '1954'
c Var 'aux442' order represents '1' with '1955'
-1954 1955 0
c Var 'aux442' direct represents '1' with '1956'
1954 -1955 1956 0
-1956 1955 0
-1956 -1954 0
c Var 'aux442' direct represents '2' with '-1955'
1954 1956 -1955 0
c Encoding variable: aux443 with domain: int(0..2) (representing constraint ((x_00007_00001=1) + (x_00008_00001=1)))
c Both direct and order encoding.
c Var 'aux443' order represents '0' with '1957'
c Var 'aux443' direct represents '0' with '1957'
c Var 'aux443' order represents '1' with '1958'
-1957 1958 0
c Var 'aux443' direct represents '1' with '1959'
1957 -1958 1959 0
-1959 1958 0
-1959 -1957 0
c Var 'aux443' direct represents '2' with '-1958'
1957 1959 -1958 0
c Encoding variable: aux444 with domain: int(0..2) (representing constraint ((x_00002_00001=1) + (x_00006_00001=1)))
c Both direct and order encoding.
c Var 'aux444' order represents '0' with '1960'
c Var 'aux444' direct represents '0' with '1960'
c Var 'aux444' order represents '1' with '1961'
-1960 1961 0
c Var 'aux444' direct represents '1' with '1962'
1960 -1961 1962 0
-1962 1961 0
-1962 -1960 0
c Var 'aux444' direct represents '2' with '-1961'
1960 1962 -1961 0
c Encoding variable: aux445 with domain: int(0..2) (representing constraint ((x_00009_00001=1) + (x_00004_00001=1)))
c Both direct and order encoding.
c Var 'aux445' order represents '0' with '1963'
c Var 'aux445' direct represents '0' with '1963'
c Var 'aux445' order represents '1' with '1964'
-1963 1964 0
c Var 'aux445' direct represents '1' with '1965'
1963 -1964 1965 0
-1965 1964 0
-1965 -1963 0
c Var 'aux445' direct represents '2' with '-1964'
1963 1965 -1964 0
c Encoding variable: aux446 with domain: int(0..3) (representing constraint ((x_00001_00001=1) + aux445))
c Both direct and order encoding.
c Var 'aux446' order represents '0' with '1966'
c Var 'aux446' direct represents '0' with '1966'
c Var 'aux446' order represents '1' with '1967'
-1966 1967 0
c Var 'aux446' direct represents '1' with '1968'
1966 -1967 1968 0
-1968 1967 0
-1968 -1966 0
c Var 'aux446' order represents '2' with '1969'
-1967 1969 0
c Var 'aux446' direct represents '2' with '1970'
1967 -1969 1970 0
-1970 1969 0
-1970 -1967 0
c Var 'aux446' direct represents '3' with '-1969'
1966 1968 1970 -1969 0
c Encoding variable: aux447 with domain: int(0..4) (representing constraint (aux442 + aux444))
c Both direct and order encoding.
c Var 'aux447' order represents '0' with '1971'
c Var 'aux447' direct represents '0' with '1971'
c Var 'aux447' order represents '1' with '1972'
-1971 1972 0
c Var 'aux447' direct represents '1' with '1973'
1971 -1972 1973 0
-1973 1972 0
-1973 -1971 0
c Var 'aux447' order represents '2' with '1974'
-1972 1974 0
c Var 'aux447' direct represents '2' with '1975'
1972 -1974 1975 0
-1975 1974 0
-1975 -1972 0
c Var 'aux447' order represents '3' with '1976'
-1974 1976 0
c Var 'aux447' direct represents '3' with '1977'
1974 -1976 1977 0
-1977 1976 0
-1977 -1974 0
c Var 'aux447' direct represents '4' with '-1976'
1971 1973 1975 1977 -1976 0
c Encoding variable: aux448 with domain: int(0..2) (representing constraint ((x_00003_00001=2) + (x_00005_00001=2)))
c Both direct and order encoding.
c Var 'aux448' order represents '0' with '1978'
c Var 'aux448' direct represents '0' with '1978'
c Var 'aux448' order represents '1' with '1979'
-1978 1979 0
c Var 'aux448' direct represents '1' with '1980'
1978 -1979 1980 0
-1980 1979 0
-1980 -1978 0
c Var 'aux448' direct represents '2' with '-1979'
1978 1980 -1979 0
c Encoding variable: aux449 with domain: int(0..2) (representing constraint ((x_00007_00001=2) + (x_00008_00001=2)))
c Both direct and order encoding.
c Var 'aux449' order represents '0' with '1981'
c Var 'aux449' direct represents '0' with '1981'
c Var 'aux449' order represents '1' with '1982'
-1981 1982 0
c Var 'aux449' direct represents '1' with '1983'
1981 -1982 1983 0
-1983 1982 0
-1983 -1981 0
c Var 'aux449' direct represents '2' with '-1982'
1981 1983 -1982 0
c Encoding variable: aux450 with domain: int(0..2) (representing constraint ((x_00002_00001=2) + (x_00006_00001=2)))
c Both direct and order encoding.
c Var 'aux450' order represents '0' with '1984'
c Var 'aux450' direct represents '0' with '1984'
c Var 'aux450' order represents '1' with '1985'
-1984 1985 0
c Var 'aux450' direct represents '1' with '1986'
1984 -1985 1986 0
-1986 1985 0
-1986 -1984 0
c Var 'aux450' direct represents '2' with '-1985'
1984 1986 -1985 0
c Encoding variable: aux451 with domain: int(0..2) (representing constraint ((x_00009_00001=2) + (x_00004_00001=2)))
c Both direct and order encoding.
c Var 'aux451' order represents '0' with '1987'
c Var 'aux451' direct represents '0' with '1987'
c Var 'aux451' order represents '1' with '1988'
-1987 1988 0
c Var 'aux451' direct represents '1' with '1989'
1987 -1988 1989 0
-1989 1988 0
-1989 -1987 0
c Var 'aux451' direct represents '2' with '-1988'
1987 1989 -1988 0
c Encoding variable: aux452 with domain: int(0..3) (representing constraint ((x_00001_00001=2) + aux451))
c Both direct and order encoding.
c Var 'aux452' order represents '0' with '1990'
c Var 'aux452' direct represents '0' with '1990'
c Var 'aux452' order represents '1' with '1991'
-1990 1991 0
c Var 'aux452' direct represents '1' with '1992'
1990 -1991 1992 0
-1992 1991 0
-1992 -1990 0
c Var 'aux452' order represents '2' with '1993'
-1991 1993 0
c Var 'aux452' direct represents '2' with '1994'
1991 -1993 1994 0
-1994 1993 0
-1994 -1991 0
c Var 'aux452' direct represents '3' with '-1993'
1990 1992 1994 -1993 0
c Encoding variable: aux453 with domain: int(0..4) (representing constraint (aux448 + aux450))
c Both direct and order encoding.
c Var 'aux453' order represents '0' with '1995'
c Var 'aux453' direct represents '0' with '1995'
c Var 'aux453' order represents '1' with '1996'
-1995 1996 0
c Var 'aux453' direct represents '1' with '1997'
1995 -1996 1997 0
-1997 1996 0
-1997 -1995 0
c Var 'aux453' order represents '2' with '1998'
-1996 1998 0
c Var 'aux453' direct represents '2' with '1999'
1996 -1998 1999 0
-1999 1998 0
-1999 -1996 0
c Var 'aux453' order represents '3' with '2000'
-1998 2000 0
c Var 'aux453' direct represents '3' with '2001'
1998 -2000 2001 0
-2001 2000 0
-2001 -1998 0
c Var 'aux453' direct represents '4' with '-2000'
1995 1997 1999 2001 -2000 0
c Encoding variable: aux454 with domain: int(0..2) (representing constraint ((x_00003_00001=3) + (x_00005_00001=3)))
c Both direct and order encoding.
c Var 'aux454' order represents '0' with '2002'
c Var 'aux454' direct represents '0' with '2002'
c Var 'aux454' order represents '1' with '2003'
-2002 2003 0
c Var 'aux454' direct represents '1' with '2004'
2002 -2003 2004 0
-2004 2003 0
-2004 -2002 0
c Var 'aux454' direct represents '2' with '-2003'
2002 2004 -2003 0
c Encoding variable: aux455 with domain: int(0..2) (representing constraint ((x_00007_00001=3) + (x_00008_00001=3)))
c Both direct and order encoding.
c Var 'aux455' order represents '0' with '2005'
c Var 'aux455' direct represents '0' with '2005'
c Var 'aux455' order represents '1' with '2006'
-2005 2006 0
c Var 'aux455' direct represents '1' with '2007'
2005 -2006 2007 0
-2007 2006 0
-2007 -2005 0
c Var 'aux455' direct represents '2' with '-2006'
2005 2007 -2006 0
c Encoding variable: aux456 with domain: int(0..2) (representing constraint ((x_00002_00001=3) + (x_00006_00001=3)))
c Both direct and order encoding.
c Var 'aux456' order represents '0' with '2008'
c Var 'aux456' direct represents '0' with '2008'
c Var 'aux456' order represents '1' with '2009'
-2008 2009 0
c Var 'aux456' direct represents '1' with '2010'
2008 -2009 2010 0
-2010 2009 0
-2010 -2008 0
c Var 'aux456' direct represents '2' with '-2009'
2008 2010 -2009 0
c Encoding variable: aux457 with domain: int(0..2) (representing constraint ((x_00009_00001=3) + (x_00004_00001=3)))
c Both direct and order encoding.
c Var 'aux457' order represents '0' with '2011'
c Var 'aux457' direct represents '0' with '2011'
c Var 'aux457' order represents '1' with '2012'
-2011 2012 0
c Var 'aux457' direct represents '1' with '2013'
2011 -2012 2013 0
-2013 2012 0
-2013 -2011 0
c Var 'aux457' direct represents '2' with '-2012'
2011 2013 -2012 0
c Encoding variable: aux458 with domain: int(0..3) (representing constraint ((x_00001_00001=3) + aux457))
c Both direct and order encoding.
c Var 'aux458' order represents '0' with '2014'
c Var 'aux458' direct represents '0' with '2014'
c Var 'aux458' order represents '1' with '2015'
-2014 2015 0
c Var 'aux458' direct represents '1' with '2016'
2014 -2015 2016 0
-2016 2015 0
-2016 -2014 0
c Var 'aux458' order represents '2' with '2017'
-2015 2017 0
c Var 'aux458' direct represents '2' with '2018'
2015 -2017 2018 0
-2018 2017 0
-2018 -2015 0
c Var 'aux458' direct represents '3' with '-2017'
2014 2016 2018 -2017 0
c Encoding variable: aux459 with domain: int(0..4) (representing constraint (aux454 + aux456))
c Both direct and order encoding.
c Var 'aux459' order represents '0' with '2019'
c Var 'aux459' direct represents '0' with '2019'
c Var 'aux459' order represents '1' with '2020'
-2019 2020 0
c Var 'aux459' direct represents '1' with '2021'
2019 -2020 2021 0
-2021 2020 0
-2021 -2019 0
c Var 'aux459' order represents '2' with '2022'
-2020 2022 0
c Var 'aux459' direct represents '2' with '2023'
2020 -2022 2023 0
-2023 2022 0
-2023 -2020 0
c Var 'aux459' order represents '3' with '2024'
-2022 2024 0
c Var 'aux459' direct represents '3' with '2025'
2022 -2024 2025 0
-2025 2024 0
-2025 -2022 0
c Var 'aux459' direct represents '4' with '-2024'
2019 2021 2023 2025 -2024 0
c Encoding variable: aux460 with domain: int(0..2) (representing constraint ((x_00003_00001=4) + (x_00005_00001=4)))
c Both direct and order encoding.
c Var 'aux460' order represents '0' with '2026'
c Var 'aux460' direct represents '0' with '2026'
c Var 'aux460' order represents '1' with '2027'
-2026 2027 0
c Var 'aux460' direct represents '1' with '2028'
2026 -2027 2028 0
-2028 2027 0
-2028 -2026 0
c Var 'aux460' direct represents '2' with '-2027'
2026 2028 -2027 0
c Encoding variable: aux461 with domain: int(0..2) (representing constraint ((x_00007_00001=4) + (x_00008_00001=4)))
c Both direct and order encoding.
c Var 'aux461' order represents '0' with '2029'
c Var 'aux461' direct represents '0' with '2029'
c Var 'aux461' order represents '1' with '2030'
-2029 2030 0
c Var 'aux461' direct represents '1' with '2031'
2029 -2030 2031 0
-2031 2030 0
-2031 -2029 0
c Var 'aux461' direct represents '2' with '-2030'
2029 2031 -2030 0
c Encoding variable: aux462 with domain: int(0..2) (representing constraint ((x_00002_00001=4) + (x_00006_00001=4)))
c Both direct and order encoding.
c Var 'aux462' order represents '0' with '2032'
c Var 'aux462' direct represents '0' with '2032'
c Var 'aux462' order represents '1' with '2033'
-2032 2033 0
c Var 'aux462' direct represents '1' with '2034'
2032 -2033 2034 0
-2034 2033 0
-2034 -2032 0
c Var 'aux462' direct represents '2' with '-2033'
2032 2034 -2033 0
c Encoding variable: aux463 with domain: int(0..2) (representing constraint ((x_00009_00001=4) + (x_00004_00001=4)))
c Both direct and order encoding.
c Var 'aux463' order represents '0' with '2035'
c Var 'aux463' direct represents '0' with '2035'
c Var 'aux463' order represents '1' with '2036'
-2035 2036 0
c Var 'aux463' direct represents '1' with '2037'
2035 -2036 2037 0
-2037 2036 0
-2037 -2035 0
c Var 'aux463' direct represents '2' with '-2036'
2035 2037 -2036 0
c Encoding variable: aux464 with domain: int(0..3) (representing constraint ((x_00001_00001=4) + aux463))
c Both direct and order encoding.
c Var 'aux464' order represents '0' with '2038'
c Var 'aux464' direct represents '0' with '2038'
c Var 'aux464' order represents '1' with '2039'
-2038 2039 0
c Var 'aux464' direct represents '1' with '2040'
2038 -2039 2040 0
-2040 2039 0
-2040 -2038 0
c Var 'aux464' order represents '2' with '2041'
-2039 2041 0
c Var 'aux464' direct represents '2' with '2042'
2039 -2041 2042 0
-2042 2041 0
-2042 -2039 0
c Var 'aux464' direct represents '3' with '-2041'
2038 2040 2042 -2041 0
c Encoding variable: aux465 with domain: int(0..4) (representing constraint (aux460 + aux462))
c Both direct and order encoding.
c Var 'aux465' order represents '0' with '2043'
c Var 'aux465' direct represents '0' with '2043'
c Var 'aux465' order represents '1' with '2044'
-2043 2044 0
c Var 'aux465' direct represents '1' with '2045'
2043 -2044 2045 0
-2045 2044 0
-2045 -2043 0
c Var 'aux465' order represents '2' with '2046'
-2044 2046 0
c Var 'aux465' direct represents '2' with '2047'
2044 -2046 2047 0
-2047 2046 0
-2047 -2044 0
c Var 'aux465' order represents '3' with '2048'
-2046 2048 0
c Var 'aux465' direct represents '3' with '2049'
2046 -2048 2049 0
-2049 2048 0
-2049 -2046 0
c Var 'aux465' direct represents '4' with '-2048'
2043 2045 2047 2049 -2048 0
c Encoding variable: aux466 with domain: int(0..2) (representing constraint ((x_00003_00001=5) + (x_00005_00001=5)))
c Both direct and order encoding.
c Var 'aux466' order represents '0' with '2050'
c Var 'aux466' direct represents '0' with '2050'
c Var 'aux466' order represents '1' with '2051'
-2050 2051 0
c Var 'aux466' direct represents '1' with '2052'
2050 -2051 2052 0
-2052 2051 0
-2052 -2050 0
c Var 'aux466' direct represents '2' with '-2051'
2050 2052 -2051 0
c Encoding variable: aux467 with domain: int(0..2) (representing constraint ((x_00007_00001=5) + (x_00008_00001=5)))
c Both direct and order encoding.
c Var 'aux467' order represents '0' with '2053'
c Var 'aux467' direct represents '0' with '2053'
c Var 'aux467' order represents '1' with '2054'
-2053 2054 0
c Var 'aux467' direct represents '1' with '2055'
2053 -2054 2055 0
-2055 2054 0
-2055 -2053 0
c Var 'aux467' direct represents '2' with '-2054'
2053 2055 -2054 0
c Encoding variable: aux468 with domain: int(0..2) (representing constraint ((x_00002_00001=5) + (x_00006_00001=5)))
c Both direct and order encoding.
c Var 'aux468' order represents '0' with '2056'
c Var 'aux468' direct represents '0' with '2056'
c Var 'aux468' order represents '1' with '2057'
-2056 2057 0
c Var 'aux468' direct represents '1' with '2058'
2056 -2057 2058 0
-2058 2057 0
-2058 -2056 0
c Var 'aux468' direct represents '2' with '-2057'
2056 2058 -2057 0
c Encoding variable: aux469 with domain: int(0..2) (representing constraint ((x_00009_00001=5) + (x_00004_00001=5)))
c Both direct and order encoding.
c Var 'aux469' order represents '0' with '2059'
c Var 'aux469' direct represents '0' with '2059'
c Var 'aux469' order represents '1' with '2060'
-2059 2060 0
c Var 'aux469' direct represents '1' with '2061'
2059 -2060 2061 0
-2061 2060 0
-2061 -2059 0
c Var 'aux469' direct represents '2' with '-2060'
2059 2061 -2060 0
c Encoding variable: aux470 with domain: int(0..3) (representing constraint ((x_00001_00001=5) + aux469))
c Both direct and order encoding.
c Var 'aux470' order represents '0' with '2062'
c Var 'aux470' direct represents '0' with '2062'
c Var 'aux470' order represents '1' with '2063'
-2062 2063 0
c Var 'aux470' direct represents '1' with '2064'
2062 -2063 2064 0
-2064 2063 0
-2064 -2062 0
c Var 'aux470' order represents '2' with '2065'
-2063 2065 0
c Var 'aux470' direct represents '2' with '2066'
2063 -2065 2066 0
-2066 2065 0
-2066 -2063 0
c Var 'aux470' direct represents '3' with '-2065'
2062 2064 2066 -2065 0
c Encoding variable: aux471 with domain: int(0..4) (representing constraint (aux466 + aux468))
c Both direct and order encoding.
c Var 'aux471' order represents '0' with '2067'
c Var 'aux471' direct represents '0' with '2067'
c Var 'aux471' order represents '1' with '2068'
-2067 2068 0
c Var 'aux471' direct represents '1' with '2069'
2067 -2068 2069 0
-2069 2068 0
-2069 -2067 0
c Var 'aux471' order represents '2' with '2070'
-2068 2070 0
c Var 'aux471' direct represents '2' with '2071'
2068 -2070 2071 0
-2071 2070 0
-2071 -2068 0
c Var 'aux471' order represents '3' with '2072'
-2070 2072 0
c Var 'aux471' direct represents '3' with '2073'
2070 -2072 2073 0
-2073 2072 0
-2073 -2070 0
c Var 'aux471' direct represents '4' with '-2072'
2067 2069 2071 2073 -2072 0
c Encoding variable: aux472 with domain: int(0..2) (representing constraint ((x_00003_00001=6) + (x_00005_00001=6)))
c Both direct and order encoding.
c Var 'aux472' order represents '0' with '2074'
c Var 'aux472' direct represents '0' with '2074'
c Var 'aux472' order represents '1' with '2075'
-2074 2075 0
c Var 'aux472' direct represents '1' with '2076'
2074 -2075 2076 0
-2076 2075 0
-2076 -2074 0
c Var 'aux472' direct represents '2' with '-2075'
2074 2076 -2075 0
c Encoding variable: aux473 with domain: int(0..2) (representing constraint ((x_00007_00001=6) + (x_00008_00001=6)))
c Both direct and order encoding.
c Var 'aux473' order represents '0' with '2077'
c Var 'aux473' direct represents '0' with '2077'
c Var 'aux473' order represents '1' with '2078'
-2077 2078 0
c Var 'aux473' direct represents '1' with '2079'
2077 -2078 2079 0
-2079 2078 0
-2079 -2077 0
c Var 'aux473' direct represents '2' with '-2078'
2077 2079 -2078 0
c Encoding variable: aux474 with domain: int(0..2) (representing constraint ((x_00002_00001=6) + (x_00006_00001=6)))
c Both direct and order encoding.
c Var 'aux474' order represents '0' with '2080'
c Var 'aux474' direct represents '0' with '2080'
c Var 'aux474' order represents '1' with '2081'
-2080 2081 0
c Var 'aux474' direct represents '1' with '2082'
2080 -2081 2082 0
-2082 2081 0
-2082 -2080 0
c Var 'aux474' direct represents '2' with '-2081'
2080 2082 -2081 0
c Encoding variable: aux475 with domain: int(0..2) (representing constraint ((x_00009_00001=6) + (x_00004_00001=6)))
c Both direct and order encoding.
c Var 'aux475' order represents '0' with '2083'
c Var 'aux475' direct represents '0' with '2083'
c Var 'aux475' order represents '1' with '2084'
-2083 2084 0
c Var 'aux475' direct represents '1' with '2085'
2083 -2084 2085 0
-2085 2084 0
-2085 -2083 0
c Var 'aux475' direct represents '2' with '-2084'
2083 2085 -2084 0
c Encoding variable: aux476 with domain: int(0..3) (representing constraint ((x_00001_00001=6) + aux475))
c Both direct and order encoding.
c Var 'aux476' order represents '0' with '2086'
c Var 'aux476' direct represents '0' with '2086'
c Var 'aux476' order represents '1' with '2087'
-2086 2087 0
c Var 'aux476' direct represents '1' with '2088'
2086 -2087 2088 0
-2088 2087 0
-2088 -2086 0
c Var 'aux476' order represents '2' with '2089'
-2087 2089 0
c Var 'aux476' direct represents '2' with '2090'
2087 -2089 2090 0
-2090 2089 0
-2090 -2087 0
c Var 'aux476' direct represents '3' with '-2089'
2086 2088 2090 -2089 0
c Encoding variable: aux477 with domain: int(0..4) (representing constraint (aux472 + aux474))
c Both direct and order encoding.
c Var 'aux477' order represents '0' with '2091'
c Var 'aux477' direct represents '0' with '2091'
c Var 'aux477' order represents '1' with '2092'
-2091 2092 0
c Var 'aux477' direct represents '1' with '2093'
2091 -2092 2093 0
-2093 2092 0
-2093 -2091 0
c Var 'aux477' order represents '2' with '2094'
-2092 2094 0
c Var 'aux477' direct represents '2' with '2095'
2092 -2094 2095 0
-2095 2094 0
-2095 -2092 0
c Var 'aux477' order represents '3' with '2096'
-2094 2096 0
c Var 'aux477' direct represents '3' with '2097'
2094 -2096 2097 0
-2097 2096 0
-2097 -2094 0
c Var 'aux477' direct represents '4' with '-2096'
2091 2093 2095 2097 -2096 0
c Encoding variable: aux478 with domain: int(0..2) (representing constraint ((x_00003_00001=7) + (x_00005_00001=7)))
c Both direct and order encoding.
c Var 'aux478' order represents '0' with '2098'
c Var 'aux478' direct represents '0' with '2098'
c Var 'aux478' order represents '1' with '2099'
-2098 2099 0
c Var 'aux478' direct represents '1' with '2100'
2098 -2099 2100 0
-2100 2099 0
-2100 -2098 0
c Var 'aux478' direct represents '2' with '-2099'
2098 2100 -2099 0
c Encoding variable: aux479 with domain: int(0..2) (representing constraint ((x_00007_00001=7) + (x_00008_00001=7)))
c Both direct and order encoding.
c Var 'aux479' order represents '0' with '2101'
c Var 'aux479' direct represents '0' with '2101'
c Var 'aux479' order represents '1' with '2102'
-2101 2102 0
c Var 'aux479' direct represents '1' with '2103'
2101 -2102 2103 0
-2103 2102 0
-2103 -2101 0
c Var 'aux479' direct represents '2' with '-2102'
2101 2103 -2102 0
c Encoding variable: aux480 with domain: int(0..2) (representing constraint ((x_00002_00001=7) + (x_00006_00001=7)))
c Both direct and order encoding.
c Var 'aux480' order represents '0' with '2104'
c Var 'aux480' direct represents '0' with '2104'
c Var 'aux480' order represents '1' with '2105'
-2104 2105 0
c Var 'aux480' direct represents '1' with '2106'
2104 -2105 2106 0
-2106 2105 0
-2106 -2104 0
c Var 'aux480' direct represents '2' with '-2105'
2104 2106 -2105 0
c Encoding variable: aux481 with domain: int(0..2) (representing constraint ((x_00009_00001=7) + (x_00004_00001=7)))
c Both direct and order encoding.
c Var 'aux481' order represents '0' with '2107'
c Var 'aux481' direct represents '0' with '2107'
c Var 'aux481' order represents '1' with '2108'
-2107 2108 0
c Var 'aux481' direct represents '1' with '2109'
2107 -2108 2109 0
-2109 2108 0
-2109 -2107 0
c Var 'aux481' direct represents '2' with '-2108'
2107 2109 -2108 0
c Encoding variable: aux482 with domain: int(0..3) (representing constraint ((x_00001_00001=7) + aux481))
c Both direct and order encoding.
c Var 'aux482' order represents '0' with '2110'
c Var 'aux482' direct represents '0' with '2110'
c Var 'aux482' order represents '1' with '2111'
-2110 2111 0
c Var 'aux482' direct represents '1' with '2112'
2110 -2111 2112 0
-2112 2111 0
-2112 -2110 0
c Var 'aux482' order represents '2' with '2113'
-2111 2113 0
c Var 'aux482' direct represents '2' with '2114'
2111 -2113 2114 0
-2114 2113 0
-2114 -2111 0
c Var 'aux482' direct represents '3' with '-2113'
2110 2112 2114 -2113 0
c Encoding variable: aux483 with domain: int(0..4) (representing constraint (aux478 + aux480))
c Both direct and order encoding.
c Var 'aux483' order represents '0' with '2115'
c Var 'aux483' direct represents '0' with '2115'
c Var 'aux483' order represents '1' with '2116'
-2115 2116 0
c Var 'aux483' direct represents '1' with '2117'
2115 -2116 2117 0
-2117 2116 0
-2117 -2115 0
c Var 'aux483' order represents '2' with '2118'
-2116 2118 0
c Var 'aux483' direct represents '2' with '2119'
2116 -2118 2119 0
-2119 2118 0
-2119 -2116 0
c Var 'aux483' order represents '3' with '2120'
-2118 2120 0
c Var 'aux483' direct represents '3' with '2121'
2118 -2120 2121 0
-2121 2120 0
-2121 -2118 0
c Var 'aux483' direct represents '4' with '-2120'
2115 2117 2119 2121 -2120 0
c Encoding variable: aux484 with domain: int(0..2) (representing constraint ((x_00003_00001=8) + (x_00005_00001=8)))
c Both direct and order encoding.
c Var 'aux484' order represents '0' with '2122'
c Var 'aux484' direct represents '0' with '2122'
c Var 'aux484' order represents '1' with '2123'
-2122 2123 0
c Var 'aux484' direct represents '1' with '2124'
2122 -2123 2124 0
-2124 2123 0
-2124 -2122 0
c Var 'aux484' direct represents '2' with '-2123'
2122 2124 -2123 0
c Encoding variable: aux485 with domain: int(0..2) (representing constraint ((x_00007_00001=8) + (x_00008_00001=8)))
c Both direct and order encoding.
c Var 'aux485' order represents '0' with '2125'
c Var 'aux485' direct represents '0' with '2125'
c Var 'aux485' order represents '1' with '2126'
-2125 2126 0
c Var 'aux485' direct represents '1' with '2127'
2125 -2126 2127 0
-2127 2126 0
-2127 -2125 0
c Var 'aux485' direct represents '2' with '-2126'
2125 2127 -2126 0
c Encoding variable: aux486 with domain: int(0..2) (representing constraint ((x_00002_00001=8) + (x_00006_00001=8)))
c Both direct and order encoding.
c Var 'aux486' order represents '0' with '2128'
c Var 'aux486' direct represents '0' with '2128'
c Var 'aux486' order represents '1' with '2129'
-2128 2129 0
c Var 'aux486' direct represents '1' with '2130'
2128 -2129 2130 0
-2130 2129 0
-2130 -2128 0
c Var 'aux486' direct represents '2' with '-2129'
2128 2130 -2129 0
c Encoding variable: aux487 with domain: int(0..2) (representing constraint ((x_00009_00001=8) + (x_00004_00001=8)))
c Both direct and order encoding.
c Var 'aux487' order represents '0' with '2131'
c Var 'aux487' direct represents '0' with '2131'
c Var 'aux487' order represents '1' with '2132'
-2131 2132 0
c Var 'aux487' direct represents '1' with '2133'
2131 -2132 2133 0
-2133 2132 0
-2133 -2131 0
c Var 'aux487' direct represents '2' with '-2132'
2131 2133 -2132 0
c Encoding variable: aux488 with domain: int(0..3) (representing constraint ((x_00001_00001=8) + aux487))
c Both direct and order encoding.
c Var 'aux488' order represents '0' with '2134'
c Var 'aux488' direct represents '0' with '2134'
c Var 'aux488' order represents '1' with '2135'
-2134 2135 0
c Var 'aux488' direct represents '1' with '2136'
2134 -2135 2136 0
-2136 2135 0
-2136 -2134 0
c Var 'aux488' order represents '2' with '2137'
-2135 2137 0
c Var 'aux488' direct represents '2' with '2138'
2135 -2137 2138 0
-2138 2137 0
-2138 -2135 0
c Var 'aux488' direct represents '3' with '-2137'
2134 2136 2138 -2137 0
c Encoding variable: aux489 with domain: int(0..4) (representing constraint (aux484 + aux486))
c Both direct and order encoding.
c Var 'aux489' order represents '0' with '2139'
c Var 'aux489' direct represents '0' with '2139'
c Var 'aux489' order represents '1' with '2140'
-2139 2140 0
c Var 'aux489' direct represents '1' with '2141'
2139 -2140 2141 0
-2141 2140 0
-2141 -2139 0
c Var 'aux489' order represents '2' with '2142'
-2140 2142 0
c Var 'aux489' direct represents '2' with '2143'
2140 -2142 2143 0
-2143 2142 0
-2143 -2140 0
c Var 'aux489' order represents '3' with '2144'
-2142 2144 0
c Var 'aux489' direct represents '3' with '2145'
2142 -2144 2145 0
-2145 2144 0
-2145 -2142 0
c Var 'aux489' direct represents '4' with '-2144'
2139 2141 2143 2145 -2144 0
c Encoding variable: aux490 with domain: int(0..2) (representing constraint ((x_00003_00001=9) + (x_00005_00001=9)))
c Both direct and order encoding.
c Var 'aux490' order represents '0' with '2146'
c Var 'aux490' direct represents '0' with '2146'
c Var 'aux490' order represents '1' with '2147'
-2146 2147 0
c Var 'aux490' direct represents '1' with '2148'
2146 -2147 2148 0
-2148 2147 0
-2148 -2146 0
c Var 'aux490' direct represents '2' with '-2147'
2146 2148 -2147 0
c Encoding variable: aux491 with domain: int(0..2) (representing constraint ((x_00007_00001=9) + (x_00008_00001=9)))
c Both direct and order encoding.
c Var 'aux491' order represents '0' with '2149'
c Var 'aux491' direct represents '0' with '2149'
c Var 'aux491' order represents '1' with '2150'
-2149 2150 0
c Var 'aux491' direct represents '1' with '2151'
2149 -2150 2151 0
-2151 2150 0
-2151 -2149 0
c Var 'aux491' direct represents '2' with '-2150'
2149 2151 -2150 0
c Encoding variable: aux492 with domain: int(0..2) (representing constraint ((x_00002_00001=9) + (x_00006_00001=9)))
c Both direct and order encoding.
c Var 'aux492' order represents '0' with '2152'
c Var 'aux492' direct represents '0' with '2152'
c Var 'aux492' order represents '1' with '2153'
-2152 2153 0
c Var 'aux492' direct represents '1' with '2154'
2152 -2153 2154 0
-2154 2153 0
-2154 -2152 0
c Var 'aux492' direct represents '2' with '-2153'
2152 2154 -2153 0
c Encoding variable: aux493 with domain: int(0..2) (representing constraint ((x_00009_00001=9) + (x_00004_00001=9)))
c Both direct and order encoding.
c Var 'aux493' order represents '0' with '2155'
c Var 'aux493' direct represents '0' with '2155'
c Var 'aux493' order represents '1' with '2156'
-2155 2156 0
c Var 'aux493' direct represents '1' with '2157'
2155 -2156 2157 0
-2157 2156 0
-2157 -2155 0
c Var 'aux493' direct represents '2' with '-2156'
2155 2157 -2156 0
c Encoding variable: aux494 with domain: int(0..3) (representing constraint ((x_00001_00001=9) + aux493))
c Both direct and order encoding.
c Var 'aux494' order represents '0' with '2158'
c Var 'aux494' direct represents '0' with '2158'
c Var 'aux494' order represents '1' with '2159'
-2158 2159 0
c Var 'aux494' direct represents '1' with '2160'
2158 -2159 2160 0
-2160 2159 0
-2160 -2158 0
c Var 'aux494' order represents '2' with '2161'
-2159 2161 0
c Var 'aux494' direct represents '2' with '2162'
2159 -2161 2162 0
-2162 2161 0
-2162 -2159 0
c Var 'aux494' direct represents '3' with '-2161'
2158 2160 2162 -2161 0
c Encoding variable: aux495 with domain: int(0..4) (representing constraint (aux490 + aux492))
c Both direct and order encoding.
c Var 'aux495' order represents '0' with '2163'
c Var 'aux495' direct represents '0' with '2163'
c Var 'aux495' order represents '1' with '2164'
-2163 2164 0
c Var 'aux495' direct represents '1' with '2165'
2163 -2164 2165 0
-2165 2164 0
-2165 -2163 0
c Var 'aux495' order represents '2' with '2166'
-2164 2166 0
c Var 'aux495' direct represents '2' with '2167'
2164 -2166 2167 0
-2167 2166 0
-2167 -2164 0
c Var 'aux495' order represents '3' with '2168'
-2166 2168 0
c Var 'aux495' direct represents '3' with '2169'
2166 -2168 2169 0
-2169 2168 0
-2169 -2166 0
c Var 'aux495' direct represents '4' with '-2168'
2163 2165 2167 2169 -2168 0
c Encoding variable: aux496 with domain: int(0..2) (representing constraint ((x_00003_00002=1) + (x_00005_00002=1)))
c Both direct and order encoding.
c Var 'aux496' order represents '0' with '2170'
c Var 'aux496' direct represents '0' with '2170'
c Var 'aux496' order represents '1' with '2171'
-2170 2171 0
c Var 'aux496' direct represents '1' with '2172'
2170 -2171 2172 0
-2172 2171 0
-2172 -2170 0
c Var 'aux496' direct represents '2' with '-2171'
2170 2172 -2171 0
c Encoding variable: aux497 with domain: int(0..2) (representing constraint ((x_00007_00002=1) + (x_00008_00002=1)))
c Both direct and order encoding.
c Var 'aux497' order represents '0' with '2173'
c Var 'aux497' direct represents '0' with '2173'
c Var 'aux497' order represents '1' with '2174'
-2173 2174 0
c Var 'aux497' direct represents '1' with '2175'
2173 -2174 2175 0
-2175 2174 0
-2175 -2173 0
c Var 'aux497' direct represents '2' with '-2174'
2173 2175 -2174 0
c Encoding variable: aux498 with domain: int(0..2) (representing constraint ((x_00002_00002=1) + (x_00006_00002=1)))
c Both direct and order encoding.
c Var 'aux498' order represents '0' with '2176'
c Var 'aux498' direct represents '0' with '2176'
c Var 'aux498' order represents '1' with '2177'
-2176 2177 0
c Var 'aux498' direct represents '1' with '2178'
2176 -2177 2178 0
-2178 2177 0
-2178 -2176 0
c Var 'aux498' direct represents '2' with '-2177'
2176 2178 -2177 0
c Encoding variable: aux499 with domain: int(0..2) (representing constraint ((x_00009_00002=1) + (x_00004_00002=1)))
c Both direct and order encoding.
c Var 'aux499' order represents '0' with '2179'
c Var 'aux499' direct represents '0' with '2179'
c Var 'aux499' order represents '1' with '2180'
-2179 2180 0
c Var 'aux499' direct represents '1' with '2181'
2179 -2180 2181 0
-2181 2180 0
-2181 -2179 0
c Var 'aux499' direct represents '2' with '-2180'
2179 2181 -2180 0
c Encoding variable: aux500 with domain: int(0..3) (representing constraint ((x_00001_00002=1) + aux499))
c Both direct and order encoding.
c Var 'aux500' order represents '0' with '2182'
c Var 'aux500' direct represents '0' with '2182'
c Var 'aux500' order represents '1' with '2183'
-2182 2183 0
c Var 'aux500' direct represents '1' with '2184'
2182 -2183 2184 0
-2184 2183 0
-2184 -2182 0
c Var 'aux500' order represents '2' with '2185'
-2183 2185 0
c Var 'aux500' direct represents '2' with '2186'
2183 -2185 2186 0
-2186 2185 0
-2186 -2183 0
c Var 'aux500' direct represents '3' with '-2185'
2182 2184 2186 -2185 0
c Encoding variable: aux501 with domain: int(0..4) (representing constraint (aux496 + aux498))
c Both direct and order encoding.
c Var 'aux501' order represents '0' with '2187'
c Var 'aux501' direct represents '0' with '2187'
c Var 'aux501' order represents '1' with '2188'
-2187 2188 0
c Var 'aux501' direct represents '1' with '2189'
2187 -2188 2189 0
-2189 2188 0
-2189 -2187 0
c Var 'aux501' order represents '2' with '2190'
-2188 2190 0
c Var 'aux501' direct represents '2' with '2191'
2188 -2190 2191 0
-2191 2190 0
-2191 -2188 0
c Var 'aux501' order represents '3' with '2192'
-2190 2192 0
c Var 'aux501' direct represents '3' with '2193'
2190 -2192 2193 0
-2193 2192 0
-2193 -2190 0
c Var 'aux501' direct represents '4' with '-2192'
2187 2189 2191 2193 -2192 0
c Encoding variable: aux502 with domain: int(0..2) (representing constraint ((x_00003_00002=2) + (x_00005_00002=2)))
c Both direct and order encoding.
c Var 'aux502' order represents '0' with '2194'
c Var 'aux502' direct represents '0' with '2194'
c Var 'aux502' order represents '1' with '2195'
-2194 2195 0
c Var 'aux502' direct represents '1' with '2196'
2194 -2195 2196 0
-2196 2195 0
-2196 -2194 0
c Var 'aux502' direct represents '2' with '-2195'
2194 2196 -2195 0
c Encoding variable: aux503 with domain: int(0..2) (representing constraint ((x_00007_00002=2) + (x_00008_00002=2)))
c Both direct and order encoding.
c Var 'aux503' order represents '0' with '2197'
c Var 'aux503' direct represents '0' with '2197'
c Var 'aux503' order represents '1' with '2198'
-2197 2198 0
c Var 'aux503' direct represents '1' with '2199'
2197 -2198 2199 0
-2199 2198 0
-2199 -2197 0
c Var 'aux503' direct represents '2' with '-2198'
2197 2199 -2198 0
c Encoding variable: aux504 with domain: int(0..2) (representing constraint ((x_00002_00002=2) + (x_00006_00002=2)))
c Both direct and order encoding.
c Var 'aux504' order represents '0' with '2200'
c Var 'aux504' direct represents '0' with '2200'
c Var 'aux504' order represents '1' with '2201'
-2200 2201 0
c Var 'aux504' direct represents '1' with '2202'
2200 -2201 2202 0
-2202 2201 0
-2202 -2200 0
c Var 'aux504' direct represents '2' with '-2201'
2200 2202 -2201 0
c Encoding variable: aux505 with domain: int(0..2) (representing constraint ((x_00009_00002=2) + (x_00004_00002=2)))
c Both direct and order encoding.
c Var 'aux505' order represents '0' with '2203'
c Var 'aux505' direct represents '0' with '2203'
c Var 'aux505' order represents '1' with '2204'
-2203 2204 0
c Var 'aux505' direct represents '1' with '2205'
2203 -2204 2205 0
-2205 2204 0
-2205 -2203 0
c Var 'aux505' direct represents '2' with '-2204'
2203 2205 -2204 0
c Encoding variable: aux506 with domain: int(0..3) (representing constraint ((x_00001_00002=2) + aux505))
c Both direct and order encoding.
c Var 'aux506' order represents '0' with '2206'
c Var 'aux506' direct represents '0' with '2206'
c Var 'aux506' order represents '1' with '2207'
-2206 2207 0
c Var 'aux506' direct represents '1' with '2208'
2206 -2207 2208 0
-2208 2207 0
-2208 -2206 0
c Var 'aux506' order represents '2' with '2209'
-2207 2209 0
c Var 'aux506' direct represents '2' with '2210'
2207 -2209 2210 0
-2210 2209 0
-2210 -2207 0
c Var 'aux506' direct represents '3' with '-2209'
2206 2208 2210 -2209 0
c Encoding variable: aux507 with domain: int(0..4) (representing constraint (aux502 + aux504))
c Both direct and order encoding.
c Var 'aux507' order represents '0' with '2211'
c Var 'aux507' direct represents '0' with '2211'
c Var 'aux507' order represents '1' with '2212'
-2211 2212 0
c Var 'aux507' direct represents '1' with '2213'
2211 -2212 2213 0
-2213 2212 0
-2213 -2211 0
c Var 'aux507' order represents '2' with '2214'
-2212 2214 0
c Var 'aux507' direct represents '2' with '2215'
2212 -2214 2215 0
-2215 2214 0
-2215 -2212 0
c Var 'aux507' order represents '3' with '2216'
-2214 2216 0
c Var 'aux507' direct represents '3' with '2217'
2214 -2216 2217 0
-2217 2216 0
-2217 -2214 0
c Var 'aux507' direct represents '4' with '-2216'
2211 2213 2215 2217 -2216 0
c Encoding variable: aux508 with domain: int(0..2) (representing constraint ((x_00003_00002=3) + (x_00005_00002=3)))
c Both direct and order encoding.
c Var 'aux508' order represents '0' with '2218'
c Var 'aux508' direct represents '0' with '2218'
c Var 'aux508' order represents '1' with '2219'
-2218 2219 0
c Var 'aux508' direct represents '1' with '2220'
2218 -2219 2220 0
-2220 2219 0
-2220 -2218 0
c Var 'aux508' direct represents '2' with '-2219'
2218 2220 -2219 0
c Encoding variable: aux509 with domain: int(0..2) (representing constraint ((x_00007_00002=3) + (x_00008_00002=3)))
c Both direct and order encoding.
c Var 'aux509' order represents '0' with '2221'
c Var 'aux509' direct represents '0' with '2221'
c Var 'aux509' order represents '1' with '2222'
-2221 2222 0
c Var 'aux509' direct represents '1' with '2223'
2221 -2222 2223 0
-2223 2222 0
-2223 -2221 0
c Var 'aux509' direct represents '2' with '-2222'
2221 2223 -2222 0
c Encoding variable: aux510 with domain: int(0..2) (representing constraint ((x_00002_00002=3) + (x_00006_00002=3)))
c Both direct and order encoding.
c Var 'aux510' order represents '0' with '2224'
c Var 'aux510' direct represents '0' with '2224'
c Var 'aux510' order represents '1' with '2225'
-2224 2225 0
c Var 'aux510' direct represents '1' with '2226'
2224 -2225 2226 0
-2226 2225 0
-2226 -2224 0
c Var 'aux510' direct represents '2' with '-2225'
2224 2226 -2225 0
c Encoding variable: aux511 with domain: int(0..2) (representing constraint ((x_00009_00002=3) + (x_00004_00002=3)))
c Both direct and order encoding.
c Var 'aux511' order represents '0' with '2227'
c Var 'aux511' direct represents '0' with '2227'
c Var 'aux511' order represents '1' with '2228'
-2227 2228 0
c Var 'aux511' direct represents '1' with '2229'
2227 -2228 2229 0
-2229 2228 0
-2229 -2227 0
c Var 'aux511' direct represents '2' with '-2228'
2227 2229 -2228 0
c Encoding variable: aux512 with domain: int(0..3) (representing constraint ((x_00001_00002=3) + aux511))
c Both direct and order encoding.
c Var 'aux512' order represents '0' with '2230'
c Var 'aux512' direct represents '0' with '2230'
c Var 'aux512' order represents '1' with '2231'
-2230 2231 0
c Var 'aux512' direct represents '1' with '2232'
2230 -2231 2232 0
-2232 2231 0
-2232 -2230 0
c Var 'aux512' order represents '2' with '2233'
-2231 2233 0
c Var 'aux512' direct represents '2' with '2234'
2231 -2233 2234 0
-2234 2233 0
-2234 -2231 0
c Var 'aux512' direct represents '3' with '-2233'
2230 2232 2234 -2233 0
c Encoding variable: aux513 with domain: int(0..4) (representing constraint (aux508 + aux510))
c Both direct and order encoding.
c Var 'aux513' order represents '0' with '2235'
c Var 'aux513' direct represents '0' with '2235'
c Var 'aux513' order represents '1' with '2236'
-2235 2236 0
c Var 'aux513' direct represents '1' with '2237'
2235 -2236 2237 0
-2237 2236 0
-2237 -2235 0
c Var 'aux513' order represents '2' with '2238'
-2236 2238 0
c Var 'aux513' direct represents '2' with '2239'
2236 -2238 2239 0
-2239 2238 0
-2239 -2236 0
c Var 'aux513' order represents '3' with '2240'
-2238 2240 0
c Var 'aux513' direct represents '3' with '2241'
2238 -2240 2241 0
-2241 2240 0
-2241 -2238 0
c Var 'aux513' direct represents '4' with '-2240'
2235 2237 2239 2241 -2240 0
c Encoding variable: aux514 with domain: int(0..2) (representing constraint ((x_00003_00002=4) + (x_00005_00002=4)))
c Both direct and order encoding.
c Var 'aux514' order represents '0' with '2242'
c Var 'aux514' direct represents '0' with '2242'
c Var 'aux514' order represents '1' with '2243'
-2242 2243 0
c Var 'aux514' direct represents '1' with '2244'
2242 -2243 2244 0
-2244 2243 0
-2244 -2242 0
c Var 'aux514' direct represents '2' with '-2243'
2242 2244 -2243 0
c Encoding variable: aux515 with domain: int(0..2) (representing constraint ((x_00007_00002=4) + (x_00008_00002=4)))
c Both direct and order encoding.
c Var 'aux515' order represents '0' with '2245'
c Var 'aux515' direct represents '0' with '2245'
c Var 'aux515' order represents '1' with '2246'
-2245 2246 0
c Var 'aux515' direct represents '1' with '2247'
2245 -2246 2247 0
-2247 2246 0
-2247 -2245 0
c Var 'aux515' direct represents '2' with '-2246'
2245 2247 -2246 0
c Encoding variable: aux516 with domain: int(0..2) (representing constraint ((x_00002_00002=4) + (x_00006_00002=4)))
c Both direct and order encoding.
c Var 'aux516' order represents '0' with '2248'
c Var 'aux516' direct represents '0' with '2248'
c Var 'aux516' order represents '1' with '2249'
-2248 2249 0
c Var 'aux516' direct represents '1' with '2250'
2248 -2249 2250 0
-2250 2249 0
-2250 -2248 0
c Var 'aux516' direct represents '2' with '-2249'
2248 2250 -2249 0
c Encoding variable: aux517 with domain: int(0..2) (representing constraint ((x_00009_00002=4) + (x_00004_00002=4)))
c Both direct and order encoding.
c Var 'aux517' order represents '0' with '2251'
c Var 'aux517' direct represents '0' with '2251'
c Var 'aux517' order represents '1' with '2252'
-2251 2252 0
c Var 'aux517' direct represents '1' with '2253'
2251 -2252 2253 0
-2253 2252 0
-2253 -2251 0
c Var 'aux517' direct represents '2' with '-2252'
2251 2253 -2252 0
c Encoding variable: aux518 with domain: int(0..3) (representing constraint ((x_00001_00002=4) + aux517))
c Both direct and order encoding.
c Var 'aux518' order represents '0' with '2254'
c Var 'aux518' direct represents '0' with '2254'
c Var 'aux518' order represents '1' with '2255'
-2254 2255 0
c Var 'aux518' direct represents '1' with '2256'
2254 -2255 2256 0
-2256 2255 0
-2256 -2254 0
c Var 'aux518' order represents '2' with '2257'
-2255 2257 0
c Var 'aux518' direct represents '2' with '2258'
2255 -2257 2258 0
-2258 2257 0
-2258 -2255 0
c Var 'aux518' direct represents '3' with '-2257'
2254 2256 2258 -2257 0
c Encoding variable: aux519 with domain: int(0..4) (representing constraint (aux514 + aux516))
c Both direct and order encoding.
c Var 'aux519' order represents '0' with '2259'
c Var 'aux519' direct represents '0' with '2259'
c Var 'aux519' order represents '1' with '2260'
-2259 2260 0
c Var 'aux519' direct represents '1' with '2261'
2259 -2260 2261 0
-2261 2260 0
-2261 -2259 0
c Var 'aux519' order represents '2' with '2262'
-2260 2262 0
c Var 'aux519' direct represents '2' with '2263'
2260 -2262 2263 0
-2263 2262 0
-2263 -2260 0
c Var 'aux519' order represents '3' with '2264'
-2262 2264 0
c Var 'aux519' direct represents '3' with '2265'
2262 -2264 2265 0
-2265 2264 0
-2265 -2262 0
c Var 'aux519' direct represents '4' with '-2264'
2259 2261 2263 2265 -2264 0
c Encoding variable: aux520 with domain: int(0..2) (representing constraint ((x_00003_00002=5) + (x_00005_00002=5)))
c Both direct and order encoding.
c Var 'aux520' order represents '0' with '2266'
c Var 'aux520' direct represents '0' with '2266'
c Var 'aux520' order represents '1' with '2267'
-2266 2267 0
c Var 'aux520' direct represents '1' with '2268'
2266 -2267 2268 0
-2268 2267 0
-2268 -2266 0
c Var 'aux520' direct represents '2' with '-2267'
2266 2268 -2267 0
c Encoding variable: aux521 with domain: int(0..2) (representing constraint ((x_00007_00002=5) + (x_00008_00002=5)))
c Both direct and order encoding.
c Var 'aux521' order represents '0' with '2269'
c Var 'aux521' direct represents '0' with '2269'
c Var 'aux521' order represents '1' with '2270'
-2269 2270 0
c Var 'aux521' direct represents '1' with '2271'
2269 -2270 2271 0
-2271 2270 0
-2271 -2269 0
c Var 'aux521' direct represents '2' with '-2270'
2269 2271 -2270 0
c Encoding variable: aux522 with domain: int(0..2) (representing constraint ((x_00002_00002=5) + (x_00006_00002=5)))
c Both direct and order encoding.
c Var 'aux522' order represents '0' with '2272'
c Var 'aux522' direct represents '0' with '2272'
c Var 'aux522' order represents '1' with '2273'
-2272 2273 0
c Var 'aux522' direct represents '1' with '2274'
2272 -2273 2274 0
-2274 2273 0
-2274 -2272 0
c Var 'aux522' direct represents '2' with '-2273'
2272 2274 -2273 0
c Encoding variable: aux523 with domain: int(0..2) (representing constraint ((x_00009_00002=5) + (x_00004_00002=5)))
c Both direct and order encoding.
c Var 'aux523' order represents '0' with '2275'
c Var 'aux523' direct represents '0' with '2275'
c Var 'aux523' order represents '1' with '2276'
-2275 2276 0
c Var 'aux523' direct represents '1' with '2277'
2275 -2276 2277 0
-2277 2276 0
-2277 -2275 0
c Var 'aux523' direct represents '2' with '-2276'
2275 2277 -2276 0
c Encoding variable: aux524 with domain: int(0..3) (representing constraint ((x_00001_00002=5) + aux523))
c Both direct and order encoding.
c Var 'aux524' order represents '0' with '2278'
c Var 'aux524' direct represents '0' with '2278'
c Var 'aux524' order represents '1' with '2279'
-2278 2279 0
c Var 'aux524' direct represents '1' with '2280'
2278 -2279 2280 0
-2280 2279 0
-2280 -2278 0
c Var 'aux524' order represents '2' with '2281'
-2279 2281 0
c Var 'aux524' direct represents '2' with '2282'
2279 -2281 2282 0
-2282 2281 0
-2282 -2279 0
c Var 'aux524' direct represents '3' with '-2281'
2278 2280 2282 -2281 0
c Encoding variable: aux525 with domain: int(0..4) (representing constraint (aux520 + aux522))
c Both direct and order encoding.
c Var 'aux525' order represents '0' with '2283'
c Var 'aux525' direct represents '0' with '2283'
c Var 'aux525' order represents '1' with '2284'
-2283 2284 0
c Var 'aux525' direct represents '1' with '2285'
2283 -2284 2285 0
-2285 2284 0
-2285 -2283 0
c Var 'aux525' order represents '2' with '2286'
-2284 2286 0
c Var 'aux525' direct represents '2' with '2287'
2284 -2286 2287 0
-2287 2286 0
-2287 -2284 0
c Var 'aux525' order represents '3' with '2288'
-2286 2288 0
c Var 'aux525' direct represents '3' with '2289'
2286 -2288 2289 0
-2289 2288 0
-2289 -2286 0
c Var 'aux525' direct represents '4' with '-2288'
2283 2285 2287 2289 -2288 0
c Encoding variable: aux526 with domain: int(0..2) (representing constraint ((x_00003_00002=6) + (x_00005_00002=6)))
c Both direct and order encoding.
c Var 'aux526' order represents '0' with '2290'
c Var 'aux526' direct represents '0' with '2290'
c Var 'aux526' order represents '1' with '2291'
-2290 2291 0
c Var 'aux526' direct represents '1' with '2292'
2290 -2291 2292 0
-2292 2291 0
-2292 -2290 0
c Var 'aux526' direct represents '2' with '-2291'
2290 2292 -2291 0
c Encoding variable: aux527 with domain: int(0..2) (representing constraint ((x_00007_00002=6) + (x_00008_00002=6)))
c Both direct and order encoding.
c Var 'aux527' order represents '0' with '2293'
c Var 'aux527' direct represents '0' with '2293'
c Var 'aux527' order represents '1' with '2294'
-2293 2294 0
c Var 'aux527' direct represents '1' with '2295'
2293 -2294 2295 0
-2295 2294 0
-2295 -2293 0
c Var 'aux527' direct represents '2' with '-2294'
2293 2295 -2294 0
c Encoding variable: aux528 with domain: int(0..2) (representing constraint ((x_00002_00002=6) + (x_00006_00002=6)))
c Both direct and order encoding.
c Var 'aux528' order represents '0' with '2296'
c Var 'aux528' direct represents '0' with '2296'
c Var 'aux528' order represents '1' with '2297'
-2296 2297 0
c Var 'aux528' direct represents '1' with '2298'
2296 -2297 2298 0
-2298 2297 0
-2298 -2296 0
c Var 'aux528' direct represents '2' with '-2297'
2296 2298 -2297 0
c Encoding variable: aux529 with domain: int(0..2) (representing constraint ((x_00009_00002=6) + (x_00004_00002=6)))
c Both direct and order encoding.
c Var 'aux529' order represents '0' with '2299'
c Var 'aux529' direct represents '0' with '2299'
c Var 'aux529' order represents '1' with '2300'
-2299 2300 0
c Var 'aux529' direct represents '1' with '2301'
2299 -2300 2301 0
-2301 2300 0
-2301 -2299 0
c Var 'aux529' direct represents '2' with '-2300'
2299 2301 -2300 0
c Encoding variable: aux530 with domain: int(0..3) (representing constraint ((x_00001_00002=6) + aux529))
c Both direct and order encoding.
c Var 'aux530' order represents '0' with '2302'
c Var 'aux530' direct represents '0' with '2302'
c Var 'aux530' order represents '1' with '2303'
-2302 2303 0
c Var 'aux530' direct represents '1' with '2304'
2302 -2303 2304 0
-2304 2303 0
-2304 -2302 0
c Var 'aux530' order represents '2' with '2305'
-2303 2305 0
c Var 'aux530' direct represents '2' with '2306'
2303 -2305 2306 0
-2306 2305 0
-2306 -2303 0
c Var 'aux530' direct represents '3' with '-2305'
2302 2304 2306 -2305 0
c Encoding variable: aux531 with domain: int(0..4) (representing constraint (aux526 + aux528))
c Both direct and order encoding.
c Var 'aux531' order represents '0' with '2307'
c Var 'aux531' direct represents '0' with '2307'
c Var 'aux531' order represents '1' with '2308'
-2307 2308 0
c Var 'aux531' direct represents '1' with '2309'
2307 -2308 2309 0
-2309 2308 0
-2309 -2307 0
c Var 'aux531' order represents '2' with '2310'
-2308 2310 0
c Var 'aux531' direct represents '2' with '2311'
2308 -2310 2311 0
-2311 2310 0
-2311 -2308 0
c Var 'aux531' order represents '3' with '2312'
-2310 2312 0
c Var 'aux531' direct represents '3' with '2313'
2310 -2312 2313 0
-2313 2312 0
-2313 -2310 0
c Var 'aux531' direct represents '4' with '-2312'
2307 2309 2311 2313 -2312 0
c Encoding variable: aux532 with domain: int(0..2) (representing constraint ((x_00003_00002=7) + (x_00005_00002=7)))
c Both direct and order encoding.
c Var 'aux532' order represents '0' with '2314'
c Var 'aux532' direct represents '0' with '2314'
c Var 'aux532' order represents '1' with '2315'
-2314 2315 0
c Var 'aux532' direct represents '1' with '2316'
2314 -2315 2316 0
-2316 2315 0
-2316 -2314 0
c Var 'aux532' direct represents '2' with '-2315'
2314 2316 -2315 0
c Encoding variable: aux533 with domain: int(0..2) (representing constraint ((x_00007_00002=7) + (x_00008_00002=7)))
c Both direct and order encoding.
c Var 'aux533' order represents '0' with '2317'
c Var 'aux533' direct represents '0' with '2317'
c Var 'aux533' order represents '1' with '2318'
-2317 2318 0
c Var 'aux533' direct represents '1' with '2319'
2317 -2318 2319 0
-2319 2318 0
-2319 -2317 0
c Var 'aux533' direct represents '2' with '-2318'
2317 2319 -2318 0
c Encoding variable: aux534 with domain: int(0..2) (representing constraint ((x_00002_00002=7) + (x_00006_00002=7)))
c Both direct and order encoding.
c Var 'aux534' order represents '0' with '2320'
c Var 'aux534' direct represents '0' with '2320'
c Var 'aux534' order represents '1' with '2321'
-2320 2321 0
c Var 'aux534' direct represents '1' with '2322'
2320 -2321 2322 0
-2322 2321 0
-2322 -2320 0
c Var 'aux534' direct represents '2' with '-2321'
2320 2322 -2321 0
c Encoding variable: aux535 with domain: int(0..2) (representing constraint ((x_00009_00002=7) + (x_00004_00002=7)))
c Both direct and order encoding.
c Var 'aux535' order represents '0' with '2323'
c Var 'aux535' direct represents '0' with '2323'
c Var 'aux535' order represents '1' with '2324'
-2323 2324 0
c Var 'aux535' direct represents '1' with '2325'
2323 -2324 2325 0
-2325 2324 0
-2325 -2323 0
c Var 'aux535' direct represents '2' with '-2324'
2323 2325 -2324 0
c Encoding variable: aux536 with domain: int(0..3) (representing constraint ((x_00001_00002=7) + aux535))
c Both direct and order encoding.
c Var 'aux536' order represents '0' with '2326'
c Var 'aux536' direct represents '0' with '2326'
c Var 'aux536' order represents '1' with '2327'
-2326 2327 0
c Var 'aux536' direct represents '1' with '2328'
2326 -2327 2328 0
-2328 2327 0
-2328 -2326 0
c Var 'aux536' order represents '2' with '2329'
-2327 2329 0
c Var 'aux536' direct represents '2' with '2330'
2327 -2329 2330 0
-2330 2329 0
-2330 -2327 0
c Var 'aux536' direct represents '3' with '-2329'
2326 2328 2330 -2329 0
c Encoding variable: aux537 with domain: int(0..4) (representing constraint (aux532 + aux534))
c Both direct and order encoding.
c Var 'aux537' order represents '0' with '2331'
c Var 'aux537' direct represents '0' with '2331'
c Var 'aux537' order represents '1' with '2332'
-2331 2332 0
c Var 'aux537' direct represents '1' with '2333'
2331 -2332 2333 0
-2333 2332 0
-2333 -2331 0
c Var 'aux537' order represents '2' with '2334'
-2332 2334 0
c Var 'aux537' direct represents '2' with '2335'
2332 -2334 2335 0
-2335 2334 0
-2335 -2332 0
c Var 'aux537' order represents '3' with '2336'
-2334 2336 0
c Var 'aux537' direct represents '3' with '2337'
2334 -2336 2337 0
-2337 2336 0
-2337 -2334 0
c Var 'aux537' direct represents '4' with '-2336'
2331 2333 2335 2337 -2336 0
c Encoding variable: aux538 with domain: int(0..2) (representing constraint ((x_00003_00002=8) + (x_00005_00002=8)))
c Both direct and order encoding.
c Var 'aux538' order represents '0' with '2338'
c Var 'aux538' direct represents '0' with '2338'
c Var 'aux538' order represents '1' with '2339'
-2338 2339 0
c Var 'aux538' direct represents '1' with '2340'
2338 -2339 2340 0
-2340 2339 0
-2340 -2338 0
c Var 'aux538' direct represents '2' with '-2339'
2338 2340 -2339 0
c Encoding variable: aux539 with domain: int(0..2) (representing constraint ((x_00007_00002=8) + (x_00008_00002=8)))
c Both direct and order encoding.
c Var 'aux539' order represents '0' with '2341'
c Var 'aux539' direct represents '0' with '2341'
c Var 'aux539' order represents '1' with '2342'
-2341 2342 0
c Var 'aux539' direct represents '1' with '2343'
2341 -2342 2343 0
-2343 2342 0
-2343 -2341 0
c Var 'aux539' direct represents '2' with '-2342'
2341 2343 -2342 0
c Encoding variable: aux540 with domain: int(0..2) (representing constraint ((x_00002_00002=8) + (x_00006_00002=8)))
c Both direct and order encoding.
c Var 'aux540' order represents '0' with '2344'
c Var 'aux540' direct represents '0' with '2344'
c Var 'aux540' order represents '1' with '2345'
-2344 2345 0
c Var 'aux540' direct represents '1' with '2346'
2344 -2345 2346 0
-2346 2345 0
-2346 -2344 0
c Var 'aux540' direct represents '2' with '-2345'
2344 2346 -2345 0
c Encoding variable: aux541 with domain: int(0..2) (representing constraint ((x_00009_00002=8) + (x_00004_00002=8)))
c Both direct and order encoding.
c Var 'aux541' order represents '0' with '2347'
c Var 'aux541' direct represents '0' with '2347'
c Var 'aux541' order represents '1' with '2348'
-2347 2348 0
c Var 'aux541' direct represents '1' with '2349'
2347 -2348 2349 0
-2349 2348 0
-2349 -2347 0
c Var 'aux541' direct represents '2' with '-2348'
2347 2349 -2348 0
c Encoding variable: aux542 with domain: int(0..3) (representing constraint ((x_00001_00002=8) + aux541))
c Both direct and order encoding.
c Var 'aux542' order represents '0' with '2350'
c Var 'aux542' direct represents '0' with '2350'
c Var 'aux542' order represents '1' with '2351'
-2350 2351 0
c Var 'aux542' direct represents '1' with '2352'
2350 -2351 2352 0
-2352 2351 0
-2352 -2350 0
c Var 'aux542' order represents '2' with '2353'
-2351 2353 0
c Var 'aux542' direct represents '2' with '2354'
2351 -2353 2354 0
-2354 2353 0
-2354 -2351 0
c Var 'aux542' direct represents '3' with '-2353'
2350 2352 2354 -2353 0
c Encoding variable: aux543 with domain: int(0..4) (representing constraint (aux538 + aux540))
c Both direct and order encoding.
c Var 'aux543' order represents '0' with '2355'
c Var 'aux543' direct represents '0' with '2355'
c Var 'aux543' order represents '1' with '2356'
-2355 2356 0
c Var 'aux543' direct represents '1' with '2357'
2355 -2356 2357 0
-2357 2356 0
-2357 -2355 0
c Var 'aux543' order represents '2' with '2358'
-2356 2358 0
c Var 'aux543' direct represents '2' with '2359'
2356 -2358 2359 0
-2359 2358 0
-2359 -2356 0
c Var 'aux543' order represents '3' with '2360'
-2358 2360 0
c Var 'aux543' direct represents '3' with '2361'
2358 -2360 2361 0
-2361 2360 0
-2361 -2358 0
c Var 'aux543' direct represents '4' with '-2360'
2355 2357 2359 2361 -2360 0
c Encoding variable: aux544 with domain: int(0..2) (representing constraint ((x_00003_00002=9) + (x_00005_00002=9)))
c Both direct and order encoding.
c Var 'aux544' order represents '0' with '2362'
c Var 'aux544' direct represents '0' with '2362'
c Var 'aux544' order represents '1' with '2363'
-2362 2363 0
c Var 'aux544' direct represents '1' with '2364'
2362 -2363 2364 0
-2364 2363 0
-2364 -2362 0
c Var 'aux544' direct represents '2' with '-2363'
2362 2364 -2363 0
c Encoding variable: aux545 with domain: int(0..2) (representing constraint ((x_00007_00002=9) + (x_00008_00002=9)))
c Both direct and order encoding.
c Var 'aux545' order represents '0' with '2365'
c Var 'aux545' direct represents '0' with '2365'
c Var 'aux545' order represents '1' with '2366'
-2365 2366 0
c Var 'aux545' direct represents '1' with '2367'
2365 -2366 2367 0
-2367 2366 0
-2367 -2365 0
c Var 'aux545' direct represents '2' with '-2366'
2365 2367 -2366 0
c Encoding variable: aux546 with domain: int(0..2) (representing constraint ((x_00002_00002=9) + (x_00006_00002=9)))
c Both direct and order encoding.
c Var 'aux546' order represents '0' with '2368'
c Var 'aux546' direct represents '0' with '2368'
c Var 'aux546' order represents '1' with '2369'
-2368 2369 0
c Var 'aux546' direct represents '1' with '2370'
2368 -2369 2370 0
-2370 2369 0
-2370 -2368 0
c Var 'aux546' direct represents '2' with '-2369'
2368 2370 -2369 0
c Encoding variable: aux547 with domain: int(0..2) (representing constraint ((x_00009_00002=9) + (x_00004_00002=9)))
c Both direct and order encoding.
c Var 'aux547' order represents '0' with '2371'
c Var 'aux547' direct represents '0' with '2371'
c Var 'aux547' order represents '1' with '2372'
-2371 2372 0
c Var 'aux547' direct represents '1' with '2373'
2371 -2372 2373 0
-2373 2372 0
-2373 -2371 0
c Var 'aux547' direct represents '2' with '-2372'
2371 2373 -2372 0
c Encoding variable: aux548 with domain: int(0..3) (representing constraint ((x_00001_00002=9) + aux547))
c Both direct and order encoding.
c Var 'aux548' order represents '0' with '2374'
c Var 'aux548' direct represents '0' with '2374'
c Var 'aux548' order represents '1' with '2375'
-2374 2375 0
c Var 'aux548' direct represents '1' with '2376'
2374 -2375 2376 0
-2376 2375 0
-2376 -2374 0
c Var 'aux548' order represents '2' with '2377'
-2375 2377 0
c Var 'aux548' direct represents '2' with '2378'
2375 -2377 2378 0
-2378 2377 0
-2378 -2375 0
c Var 'aux548' direct represents '3' with '-2377'
2374 2376 2378 -2377 0
c Encoding variable: aux549 with domain: int(0..4) (representing constraint (aux544 + aux546))
c Both direct and order encoding.
c Var 'aux549' order represents '0' with '2379'
c Var 'aux549' direct represents '0' with '2379'
c Var 'aux549' order represents '1' with '2380'
-2379 2380 0
c Var 'aux549' direct represents '1' with '2381'
2379 -2380 2381 0
-2381 2380 0
-2381 -2379 0
c Var 'aux549' order represents '2' with '2382'
-2380 2382 0
c Var 'aux549' direct represents '2' with '2383'
2380 -2382 2383 0
-2383 2382 0
-2383 -2380 0
c Var 'aux549' order represents '3' with '2384'
-2382 2384 0
c Var 'aux549' direct represents '3' with '2385'
2382 -2384 2385 0
-2385 2384 0
-2385 -2382 0
c Var 'aux549' direct represents '4' with '-2384'
2379 2381 2383 2385 -2384 0
c Encoding variable: aux550 with domain: int(0..2) (representing constraint ((x_00003_00003=1) + (x_00005_00003=1)))
c Both direct and order encoding.
c Var 'aux550' order represents '0' with '2386'
c Var 'aux550' direct represents '0' with '2386'
c Var 'aux550' order represents '1' with '2387'
-2386 2387 0
c Var 'aux550' direct represents '1' with '2388'
2386 -2387 2388 0
-2388 2387 0
-2388 -2386 0
c Var 'aux550' direct represents '2' with '-2387'
2386 2388 -2387 0
c Encoding variable: aux551 with domain: int(0..2) (representing constraint ((x_00007_00003=1) + (x_00008_00003=1)))
c Both direct and order encoding.
c Var 'aux551' order represents '0' with '2389'
c Var 'aux551' direct represents '0' with '2389'
c Var 'aux551' order represents '1' with '2390'
-2389 2390 0
c Var 'aux551' direct represents '1' with '2391'
2389 -2390 2391 0
-2391 2390 0
-2391 -2389 0
c Var 'aux551' direct represents '2' with '-2390'
2389 2391 -2390 0
c Encoding variable: aux552 with domain: int(0..2) (representing constraint ((x_00002_00003=1) + (x_00006_00003=1)))
c Both direct and order encoding.
c Var 'aux552' order represents '0' with '2392'
c Var 'aux552' direct represents '0' with '2392'
c Var 'aux552' order represents '1' with '2393'
-2392 2393 0
c Var 'aux552' direct represents '1' with '2394'
2392 -2393 2394 0
-2394 2393 0
-2394 -2392 0
c Var 'aux552' direct represents '2' with '-2393'
2392 2394 -2393 0
c Encoding variable: aux553 with domain: int(0..2) (representing constraint ((x_00009_00003=1) + (x_00004_00003=1)))
c Both direct and order encoding.
c Var 'aux553' order represents '0' with '2395'
c Var 'aux553' direct represents '0' with '2395'
c Var 'aux553' order represents '1' with '2396'
-2395 2396 0
c Var 'aux553' direct represents '1' with '2397'
2395 -2396 2397 0
-2397 2396 0
-2397 -2395 0
c Var 'aux553' direct represents '2' with '-2396'
2395 2397 -2396 0
c Encoding variable: aux554 with domain: int(0..3) (representing constraint ((x_00001_00003=1) + aux553))
c Both direct and order encoding.
c Var 'aux554' order represents '0' with '2398'
c Var 'aux554' direct represents '0' with '2398'
c Var 'aux554' order represents '1' with '2399'
-2398 2399 0
c Var 'aux554' direct represents '1' with '2400'
2398 -2399 2400 0
-2400 2399 0
-2400 -2398 0
c Var 'aux554' order represents '2' with '2401'
-2399 2401 0
c Var 'aux554' direct represents '2' with '2402'
2399 -2401 2402 0
-2402 2401 0
-2402 -2399 0
c Var 'aux554' direct represents '3' with '-2401'
2398 2400 2402 -2401 0
c Encoding variable: aux555 with domain: int(0..4) (representing constraint (aux550 + aux552))
c Both direct and order encoding.
c Var 'aux555' order represents '0' with '2403'
c Var 'aux555' direct represents '0' with '2403'
c Var 'aux555' order represents '1' with '2404'
-2403 2404 0
c Var 'aux555' direct represents '1' with '2405'
2403 -2404 2405 0
-2405 2404 0
-2405 -2403 0
c Var 'aux555' order represents '2' with '2406'
-2404 2406 0
c Var 'aux555' direct represents '2' with '2407'
2404 -2406 2407 0
-2407 2406 0
-2407 -2404 0
c Var 'aux555' order represents '3' with '2408'
-2406 2408 0
c Var 'aux555' direct represents '3' with '2409'
2406 -2408 2409 0
-2409 2408 0
-2409 -2406 0
c Var 'aux555' direct represents '4' with '-2408'
2403 2405 2407 2409 -2408 0
c Encoding variable: aux556 with domain: int(0..2) (representing constraint ((x_00003_00003=2) + (x_00005_00003=2)))
c Both direct and order encoding.
c Var 'aux556' order represents '0' with '2410'
c Var 'aux556' direct represents '0' with '2410'
c Var 'aux556' order represents '1' with '2411'
-2410 2411 0
c Var 'aux556' direct represents '1' with '2412'
2410 -2411 2412 0
-2412 2411 0
-2412 -2410 0
c Var 'aux556' direct represents '2' with '-2411'
2410 2412 -2411 0
c Encoding variable: aux557 with domain: int(0..2) (representing constraint ((x_00007_00003=2) + (x_00008_00003=2)))
c Both direct and order encoding.
c Var 'aux557' order represents '0' with '2413'
c Var 'aux557' direct represents '0' with '2413'
c Var 'aux557' order represents '1' with '2414'
-2413 2414 0
c Var 'aux557' direct represents '1' with '2415'
2413 -2414 2415 0
-2415 2414 0
-2415 -2413 0
c Var 'aux557' direct represents '2' with '-2414'
2413 2415 -2414 0
c Encoding variable: aux558 with domain: int(0..2) (representing constraint ((x_00002_00003=2) + (x_00006_00003=2)))
c Both direct and order encoding.
c Var 'aux558' order represents '0' with '2416'
c Var 'aux558' direct represents '0' with '2416'
c Var 'aux558' order represents '1' with '2417'
-2416 2417 0
c Var 'aux558' direct represents '1' with '2418'
2416 -2417 2418 0
-2418 2417 0
-2418 -2416 0
c Var 'aux558' direct represents '2' with '-2417'
2416 2418 -2417 0
c Encoding variable: aux559 with domain: int(0..2) (representing constraint ((x_00009_00003=2) + (x_00004_00003=2)))
c Both direct and order encoding.
c Var 'aux559' order represents '0' with '2419'
c Var 'aux559' direct represents '0' with '2419'
c Var 'aux559' order represents '1' with '2420'
-2419 2420 0
c Var 'aux559' direct represents '1' with '2421'
2419 -2420 2421 0
-2421 2420 0
-2421 -2419 0
c Var 'aux559' direct represents '2' with '-2420'
2419 2421 -2420 0
c Encoding variable: aux560 with domain: int(0..3) (representing constraint ((x_00001_00003=2) + aux559))
c Both direct and order encoding.
c Var 'aux560' order represents '0' with '2422'
c Var 'aux560' direct represents '0' with '2422'
c Var 'aux560' order represents '1' with '2423'
-2422 2423 0
c Var 'aux560' direct represents '1' with '2424'
2422 -2423 2424 0
-2424 2423 0
-2424 -2422 0
c Var 'aux560' order represents '2' with '2425'
-2423 2425 0
c Var 'aux560' direct represents '2' with '2426'
2423 -2425 2426 0
-2426 2425 0
-2426 -2423 0
c Var 'aux560' direct represents '3' with '-2425'
2422 2424 2426 -2425 0
c Encoding variable: aux561 with domain: int(0..4) (representing constraint (aux556 + aux558))
c Both direct and order encoding.
c Var 'aux561' order represents '0' with '2427'
c Var 'aux561' direct represents '0' with '2427'
c Var 'aux561' order represents '1' with '2428'
-2427 2428 0
c Var 'aux561' direct represents '1' with '2429'
2427 -2428 2429 0
-2429 2428 0
-2429 -2427 0
c Var 'aux561' order represents '2' with '2430'
-2428 2430 0
c Var 'aux561' direct represents '2' with '2431'
2428 -2430 2431 0
-2431 2430 0
-2431 -2428 0
c Var 'aux561' order represents '3' with '2432'
-2430 2432 0
c Var 'aux561' direct represents '3' with '2433'
2430 -2432 2433 0
-2433 2432 0
-2433 -2430 0
c Var 'aux561' direct represents '4' with '-2432'
2427 2429 2431 2433 -2432 0
c Encoding variable: aux562 with domain: int(0..2) (representing constraint ((x_00003_00003=3) + (x_00005_00003=3)))
c Both direct and order encoding.
c Var 'aux562' order represents '0' with '2434'
c Var 'aux562' direct represents '0' with '2434'
c Var 'aux562' order represents '1' with '2435'
-2434 2435 0
c Var 'aux562' direct represents '1' with '2436'
2434 -2435 2436 0
-2436 2435 0
-2436 -2434 0
c Var 'aux562' direct represents '2' with '-2435'
2434 2436 -2435 0
c Encoding variable: aux563 with domain: int(0..2) (representing constraint ((x_00007_00003=3) + (x_00008_00003=3)))
c Both direct and order encoding.
c Var 'aux563' order represents '0' with '2437'
c Var 'aux563' direct represents '0' with '2437'
c Var 'aux563' order represents '1' with '2438'
-2437 2438 0
c Var 'aux563' direct represents '1' with '2439'
2437 -2438 2439 0
-2439 2438 0
-2439 -2437 0
c Var 'aux563' direct represents '2' with '-2438'
2437 2439 -2438 0
c Encoding variable: aux564 with domain: int(0..2) (representing constraint ((x_00002_00003=3) + (x_00006_00003=3)))
c Both direct and order encoding.
c Var 'aux564' order represents '0' with '2440'
c Var 'aux564' direct represents '0' with '2440'
c Var 'aux564' order represents '1' with '2441'
-2440 2441 0
c Var 'aux564' direct represents '1' with '2442'
2440 -2441 2442 0
-2442 2441 0
-2442 -2440 0
c Var 'aux564' direct represents '2' with '-2441'
2440 2442 -2441 0
c Encoding variable: aux565 with domain: int(0..2) (representing constraint ((x_00009_00003=3) + (x_00004_00003=3)))
c Both direct and order encoding.
c Var 'aux565' order represents '0' with '2443'
c Var 'aux565' direct represents '0' with '2443'
c Var 'aux565' order represents '1' with '2444'
-2443 2444 0
c Var 'aux565' direct represents '1' with '2445'
2443 -2444 2445 0
-2445 2444 0
-2445 -2443 0
c Var 'aux565' direct represents '2' with '-2444'
2443 2445 -2444 0
c Encoding variable: aux566 with domain: int(0..3) (representing constraint ((x_00001_00003=3) + aux565))
c Both direct and order encoding.
c Var 'aux566' order represents '0' with '2446'
c Var 'aux566' direct represents '0' with '2446'
c Var 'aux566' order represents '1' with '2447'
-2446 2447 0
c Var 'aux566' direct represents '1' with '2448'
2446 -2447 2448 0
-2448 2447 0
-2448 -2446 0
c Var 'aux566' order represents '2' with '2449'
-2447 2449 0
c Var 'aux566' direct represents '2' with '2450'
2447 -2449 2450 0
-2450 2449 0
-2450 -2447 0
c Var 'aux566' direct represents '3' with '-2449'
2446 2448 2450 -2449 0
c Encoding variable: aux567 with domain: int(0..4) (representing constraint (aux562 + aux564))
c Both direct and order encoding.
c Var 'aux567' order represents '0' with '2451'
c Var 'aux567' direct represents '0' with '2451'
c Var 'aux567' order represents '1' with '2452'
-2451 2452 0
c Var 'aux567' direct represents '1' with '2453'
2451 -2452 2453 0
-2453 2452 0
-2453 -2451 0
c Var 'aux567' order represents '2' with '2454'
-2452 2454 0
c Var 'aux567' direct represents '2' with '2455'
2452 -2454 2455 0
-2455 2454 0
-2455 -2452 0
c Var 'aux567' order represents '3' with '2456'
-2454 2456 0
c Var 'aux567' direct represents '3' with '2457'
2454 -2456 2457 0
-2457 2456 0
-2457 -2454 0
c Var 'aux567' direct represents '4' with '-2456'
2451 2453 2455 2457 -2456 0
c Encoding variable: aux568 with domain: int(0..2) (representing constraint ((x_00003_00003=4) + (x_00005_00003=4)))
c Both direct and order encoding.
c Var 'aux568' order represents '0' with '2458'
c Var 'aux568' direct represents '0' with '2458'
c Var 'aux568' order represents '1' with '2459'
-2458 2459 0
c Var 'aux568' direct represents '1' with '2460'
2458 -2459 2460 0
-2460 2459 0
-2460 -2458 0
c Var 'aux568' direct represents '2' with '-2459'
2458 2460 -2459 0
c Encoding variable: aux569 with domain: int(0..2) (representing constraint ((x_00007_00003=4) + (x_00008_00003=4)))
c Both direct and order encoding.
c Var 'aux569' order represents '0' with '2461'
c Var 'aux569' direct represents '0' with '2461'
c Var 'aux569' order represents '1' with '2462'
-2461 2462 0
c Var 'aux569' direct represents '1' with '2463'
2461 -2462 2463 0
-2463 2462 0
-2463 -2461 0
c Var 'aux569' direct represents '2' with '-2462'
2461 2463 -2462 0
c Encoding variable: aux570 with domain: int(0..2) (representing constraint ((x_00002_00003=4) + (x_00006_00003=4)))
c Both direct and order encoding.
c Var 'aux570' order represents '0' with '2464'
c Var 'aux570' direct represents '0' with '2464'
c Var 'aux570' order represents '1' with '2465'
-2464 2465 0
c Var 'aux570' direct represents '1' with '2466'
2464 -2465 2466 0
-2466 2465 0
-2466 -2464 0
c Var 'aux570' direct represents '2' with '-2465'
2464 2466 -2465 0
c Encoding variable: aux571 with domain: int(0..2) (representing constraint ((x_00009_00003=4) + (x_00004_00003=4)))
c Both direct and order encoding.
c Var 'aux571' order represents '0' with '2467'
c Var 'aux571' direct represents '0' with '2467'
c Var 'aux571' order represents '1' with '2468'
-2467 2468 0
c Var 'aux571' direct represents '1' with '2469'
2467 -2468 2469 0
-2469 2468 0
-2469 -2467 0
c Var 'aux571' direct represents '2' with '-2468'
2467 2469 -2468 0
c Encoding variable: aux572 with domain: int(0..3) (representing constraint ((x_00001_00003=4) + aux571))
c Both direct and order encoding.
c Var 'aux572' order represents '0' with '2470'
c Var 'aux572' direct represents '0' with '2470'
c Var 'aux572' order represents '1' with '2471'
-2470 2471 0
c Var 'aux572' direct represents '1' with '2472'
2470 -2471 2472 0
-2472 2471 0
-2472 -2470 0
c Var 'aux572' order represents '2' with '2473'
-2471 2473 0
c Var 'aux572' direct represents '2' with '2474'
2471 -2473 2474 0
-2474 2473 0
-2474 -2471 0
c Var 'aux572' direct represents '3' with '-2473'
2470 2472 2474 -2473 0
c Encoding variable: aux573 with domain: int(0..4) (representing constraint (aux568 + aux570))
c Both direct and order encoding.
c Var 'aux573' order represents '0' with '2475'
c Var 'aux573' direct represents '0' with '2475'
c Var 'aux573' order represents '1' with '2476'
-2475 2476 0
c Var 'aux573' direct represents '1' with '2477'
2475 -2476 2477 0
-2477 2476 0
-2477 -2475 0
c Var 'aux573' order represents '2' with '2478'
-2476 2478 0
c Var 'aux573' direct represents '2' with '2479'
2476 -2478 2479 0
-2479 2478 0
-2479 -2476 0
c Var 'aux573' order represents '3' with '2480'
-2478 2480 0
c Var 'aux573' direct represents '3' with '2481'
2478 -2480 2481 0
-2481 2480 0
-2481 -2478 0
c Var 'aux573' direct represents '4' with '-2480'
2475 2477 2479 2481 -2480 0
c Encoding variable: aux574 with domain: int(0..2) (representing constraint ((x_00003_00003=5) + (x_00005_00003=5)))
c Both direct and order encoding.
c Var 'aux574' order represents '0' with '2482'
c Var 'aux574' direct represents '0' with '2482'
c Var 'aux574' order represents '1' with '2483'
-2482 2483 0
c Var 'aux574' direct represents '1' with '2484'
2482 -2483 2484 0
-2484 2483 0
-2484 -2482 0
c Var 'aux574' direct represents '2' with '-2483'
2482 2484 -2483 0
c Encoding variable: aux575 with domain: int(0..2) (representing constraint ((x_00007_00003=5) + (x_00008_00003=5)))
c Both direct and order encoding.
c Var 'aux575' order represents '0' with '2485'
c Var 'aux575' direct represents '0' with '2485'
c Var 'aux575' order represents '1' with '2486'
-2485 2486 0
c Var 'aux575' direct represents '1' with '2487'
2485 -2486 2487 0
-2487 2486 0
-2487 -2485 0
c Var 'aux575' direct represents '2' with '-2486'
2485 2487 -2486 0
c Encoding variable: aux576 with domain: int(0..2) (representing constraint ((x_00002_00003=5) + (x_00006_00003=5)))
c Both direct and order encoding.
c Var 'aux576' order represents '0' with '2488'
c Var 'aux576' direct represents '0' with '2488'
c Var 'aux576' order represents '1' with '2489'
-2488 2489 0
c Var 'aux576' direct represents '1' with '2490'
2488 -2489 2490 0
-2490 2489 0
-2490 -2488 0
c Var 'aux576' direct represents '2' with '-2489'
2488 2490 -2489 0
c Encoding variable: aux577 with domain: int(0..2) (representing constraint ((x_00009_00003=5) + (x_00004_00003=5)))
c Both direct and order encoding.
c Var 'aux577' order represents '0' with '2491'
c Var 'aux577' direct represents '0' with '2491'
c Var 'aux577' order represents '1' with '2492'
-2491 2492 0
c Var 'aux577' direct represents '1' with '2493'
2491 -2492 2493 0
-2493 2492 0
-2493 -2491 0
c Var 'aux577' direct represents '2' with '-2492'
2491 2493 -2492 0
c Encoding variable: aux578 with domain: int(0..3) (representing constraint ((x_00001_00003=5) + aux577))
c Both direct and order encoding.
c Var 'aux578' order represents '0' with '2494'
c Var 'aux578' direct represents '0' with '2494'
c Var 'aux578' order represents '1' with '2495'
-2494 2495 0
c Var 'aux578' direct represents '1' with '2496'
2494 -2495 2496 0
-2496 2495 0
-2496 -2494 0
c Var 'aux578' order represents '2' with '2497'
-2495 2497 0
c Var 'aux578' direct represents '2' with '2498'
2495 -2497 2498 0
-2498 2497 0
-2498 -2495 0
c Var 'aux578' direct represents '3' with '-2497'
2494 2496 2498 -2497 0
c Encoding variable: aux579 with domain: int(0..4) (representing constraint (aux574 + aux576))
c Both direct and order encoding.
c Var 'aux579' order represents '0' with '2499'
c Var 'aux579' direct represents '0' with '2499'
c Var 'aux579' order represents '1' with '2500'
-2499 2500 0
c Var 'aux579' direct represents '1' with '2501'
2499 -2500 2501 0
-2501 2500 0
-2501 -2499 0
c Var 'aux579' order represents '2' with '2502'
-2500 2502 0
c Var 'aux579' direct represents '2' with '2503'
2500 -2502 2503 0
-2503 2502 0
-2503 -2500 0
c Var 'aux579' order represents '3' with '2504'
-2502 2504 0
c Var 'aux579' direct represents '3' with '2505'
2502 -2504 2505 0
-2505 2504 0
-2505 -2502 0
c Var 'aux579' direct represents '4' with '-2504'
2499 2501 2503 2505 -2504 0
c Encoding variable: aux580 with domain: int(0..2) (representing constraint ((x_00003_00003=6) + (x_00005_00003=6)))
c Both direct and order encoding.
c Var 'aux580' order represents '0' with '2506'
c Var 'aux580' direct represents '0' with '2506'
c Var 'aux580' order represents '1' with '2507'
-2506 2507 0
c Var 'aux580' direct represents '1' with '2508'
2506 -2507 2508 0
-2508 2507 0
-2508 -2506 0
c Var 'aux580' direct represents '2' with '-2507'
2506 2508 -2507 0
c Encoding variable: aux581 with domain: int(0..2) (representing constraint ((x_00007_00003=6) + (x_00008_00003=6)))
c Both direct and order encoding.
c Var 'aux581' order represents '0' with '2509'
c Var 'aux581' direct represents '0' with '2509'
c Var 'aux581' order represents '1' with '2510'
-2509 2510 0
c Var 'aux581' direct represents '1' with '2511'
2509 -2510 2511 0
-2511 2510 0
-2511 -2509 0
c Var 'aux581' direct represents '2' with '-2510'
2509 2511 -2510 0
c Encoding variable: aux582 with domain: int(0..2) (representing constraint ((x_00002_00003=6) + (x_00006_00003=6)))
c Both direct and order encoding.
c Var 'aux582' order represents '0' with '2512'
c Var 'aux582' direct represents '0' with '2512'
c Var 'aux582' order represents '1' with '2513'
-2512 2513 0
c Var 'aux582' direct represents '1' with '2514'
2512 -2513 2514 0
-2514 2513 0
-2514 -2512 0
c Var 'aux582' direct represents '2' with '-2513'
2512 2514 -2513 0
c Encoding variable: aux583 with domain: int(0..2) (representing constraint ((x_00009_00003=6) + (x_00004_00003=6)))
c Both direct and order encoding.
c Var 'aux583' order represents '0' with '2515'
c Var 'aux583' direct represents '0' with '2515'
c Var 'aux583' order represents '1' with '2516'
-2515 2516 0
c Var 'aux583' direct represents '1' with '2517'
2515 -2516 2517 0
-2517 2516 0
-2517 -2515 0
c Var 'aux583' direct represents '2' with '-2516'
2515 2517 -2516 0
c Encoding variable: aux584 with domain: int(0..3) (representing constraint ((x_00001_00003=6) + aux583))
c Both direct and order encoding.
c Var 'aux584' order represents '0' with '2518'
c Var 'aux584' direct represents '0' with '2518'
c Var 'aux584' order represents '1' with '2519'
-2518 2519 0
c Var 'aux584' direct represents '1' with '2520'
2518 -2519 2520 0
-2520 2519 0
-2520 -2518 0
c Var 'aux584' order represents '2' with '2521'
-2519 2521 0
c Var 'aux584' direct represents '2' with '2522'
2519 -2521 2522 0
-2522 2521 0
-2522 -2519 0
c Var 'aux584' direct represents '3' with '-2521'
2518 2520 2522 -2521 0
c Encoding variable: aux585 with domain: int(0..4) (representing constraint (aux580 + aux582))
c Both direct and order encoding.
c Var 'aux585' order represents '0' with '2523'
c Var 'aux585' direct represents '0' with '2523'
c Var 'aux585' order represents '1' with '2524'
-2523 2524 0
c Var 'aux585' direct represents '1' with '2525'
2523 -2524 2525 0
-2525 2524 0
-2525 -2523 0
c Var 'aux585' order represents '2' with '2526'
-2524 2526 0
c Var 'aux585' direct represents '2' with '2527'
2524 -2526 2527 0
-2527 2526 0
-2527 -2524 0
c Var 'aux585' order represents '3' with '2528'
-2526 2528 0
c Var 'aux585' direct represents '3' with '2529'
2526 -2528 2529 0
-2529 2528 0
-2529 -2526 0
c Var 'aux585' direct represents '4' with '-2528'
2523 2525 2527 2529 -2528 0
c Encoding variable: aux586 with domain: int(0..2) (representing constraint ((x_00003_00003=7) + (x_00005_00003=7)))
c Both direct and order encoding.
c Var 'aux586' order represents '0' with '2530'
c Var 'aux586' direct represents '0' with '2530'
c Var 'aux586' order represents '1' with '2531'
-2530 2531 0
c Var 'aux586' direct represents '1' with '2532'
2530 -2531 2532 0
-2532 2531 0
-2532 -2530 0
c Var 'aux586' direct represents '2' with '-2531'
2530 2532 -2531 0
c Encoding variable: aux587 with domain: int(0..2) (representing constraint ((x_00007_00003=7) + (x_00008_00003=7)))
c Both direct and order encoding.
c Var 'aux587' order represents '0' with '2533'
c Var 'aux587' direct represents '0' with '2533'
c Var 'aux587' order represents '1' with '2534'
-2533 2534 0
c Var 'aux587' direct represents '1' with '2535'
2533 -2534 2535 0
-2535 2534 0
-2535 -2533 0
c Var 'aux587' direct represents '2' with '-2534'
2533 2535 -2534 0
c Encoding variable: aux588 with domain: int(0..2) (representing constraint ((x_00002_00003=7) + (x_00006_00003=7)))
c Both direct and order encoding.
c Var 'aux588' order represents '0' with '2536'
c Var 'aux588' direct represents '0' with '2536'
c Var 'aux588' order represents '1' with '2537'
-2536 2537 0
c Var 'aux588' direct represents '1' with '2538'
2536 -2537 2538 0
-2538 2537 0
-2538 -2536 0
c Var 'aux588' direct represents '2' with '-2537'
2536 2538 -2537 0
c Encoding variable: aux589 with domain: int(0..2) (representing constraint ((x_00009_00003=7) + (x_00004_00003=7)))
c Both direct and order encoding.
c Var 'aux589' order represents '0' with '2539'
c Var 'aux589' direct represents '0' with '2539'
c Var 'aux589' order represents '1' with '2540'
-2539 2540 0
c Var 'aux589' direct represents '1' with '2541'
2539 -2540 2541 0
-2541 2540 0
-2541 -2539 0
c Var 'aux589' direct represents '2' with '-2540'
2539 2541 -2540 0
c Encoding variable: aux590 with domain: int(0..3) (representing constraint ((x_00001_00003=7) + aux589))
c Both direct and order encoding.
c Var 'aux590' order represents '0' with '2542'
c Var 'aux590' direct represents '0' with '2542'
c Var 'aux590' order represents '1' with '2543'
-2542 2543 0
c Var 'aux590' direct represents '1' with '2544'
2542 -2543 2544 0
-2544 2543 0
-2544 -2542 0
c Var 'aux590' order represents '2' with '2545'
-2543 2545 0
c Var 'aux590' direct represents '2' with '2546'
2543 -2545 2546 0
-2546 2545 0
-2546 -2543 0
c Var 'aux590' direct represents '3' with '-2545'
2542 2544 2546 -2545 0
c Encoding variable: aux591 with domain: int(0..4) (representing constraint (aux586 + aux588))
c Both direct and order encoding.
c Var 'aux591' order represents '0' with '2547'
c Var 'aux591' direct represents '0' with '2547'
c Var 'aux591' order represents '1' with '2548'
-2547 2548 0
c Var 'aux591' direct represents '1' with '2549'
2547 -2548 2549 0
-2549 2548 0
-2549 -2547 0
c Var 'aux591' order represents '2' with '2550'
-2548 2550 0
c Var 'aux591' direct represents '2' with '2551'
2548 -2550 2551 0
-2551 2550 0
-2551 -2548 0
c Var 'aux591' order represents '3' with '2552'
-2550 2552 0
c Var 'aux591' direct represents '3' with '2553'
2550 -2552 2553 0
-2553 2552 0
-2553 -2550 0
c Var 'aux591' direct represents '4' with '-2552'
2547 2549 2551 2553 -2552 0
c Encoding variable: aux592 with domain: int(0..2) (representing constraint ((x_00003_00003=8) + (x_00005_00003=8)))
c Both direct and order encoding.
c Var 'aux592' order represents '0' with '2554'
c Var 'aux592' direct represents '0' with '2554'
c Var 'aux592' order represents '1' with '2555'
-2554 2555 0
c Var 'aux592' direct represents '1' with '2556'
2554 -2555 2556 0
-2556 2555 0
-2556 -2554 0
c Var 'aux592' direct represents '2' with '-2555'
2554 2556 -2555 0
c Encoding variable: aux593 with domain: int(0..2) (representing constraint ((x_00007_00003=8) + (x_00008_00003=8)))
c Both direct and order encoding.
c Var 'aux593' order represents '0' with '2557'
c Var 'aux593' direct represents '0' with '2557'
c Var 'aux593' order represents '1' with '2558'
-2557 2558 0
c Var 'aux593' direct represents '1' with '2559'
2557 -2558 2559 0
-2559 2558 0
-2559 -2557 0
c Var 'aux593' direct represents '2' with '-2558'
2557 2559 -2558 0
c Encoding variable: aux594 with domain: int(0..2) (representing constraint ((x_00002_00003=8) + (x_00006_00003=8)))
c Both direct and order encoding.
c Var 'aux594' order represents '0' with '2560'
c Var 'aux594' direct represents '0' with '2560'
c Var 'aux594' order represents '1' with '2561'
-2560 2561 0
c Var 'aux594' direct represents '1' with '2562'
2560 -2561 2562 0
-2562 2561 0
-2562 -2560 0
c Var 'aux594' direct represents '2' with '-2561'
2560 2562 -2561 0
c Encoding variable: aux595 with domain: int(0..2) (representing constraint ((x_00009_00003=8) + (x_00004_00003=8)))
c Both direct and order encoding.
c Var 'aux595' order represents '0' with '2563'
c Var 'aux595' direct represents '0' with '2563'
c Var 'aux595' order represents '1' with '2564'
-2563 2564 0
c Var 'aux595' direct represents '1' with '2565'
2563 -2564 2565 0
-2565 2564 0
-2565 -2563 0
c Var 'aux595' direct represents '2' with '-2564'
2563 2565 -2564 0
c Encoding variable: aux596 with domain: int(0..3) (representing constraint ((x_00001_00003=8) + aux595))
c Both direct and order encoding.
c Var 'aux596' order represents '0' with '2566'
c Var 'aux596' direct represents '0' with '2566'
c Var 'aux596' order represents '1' with '2567'
-2566 2567 0
c Var 'aux596' direct represents '1' with '2568'
2566 -2567 2568 0
-2568 2567 0
-2568 -2566 0
c Var 'aux596' order represents '2' with '2569'
-2567 2569 0
c Var 'aux596' direct represents '2' with '2570'
2567 -2569 2570 0
-2570 2569 0
-2570 -2567 0
c Var 'aux596' direct represents '3' with '-2569'
2566 2568 2570 -2569 0
c Encoding variable: aux597 with domain: int(0..4) (representing constraint (aux592 + aux594))
c Both direct and order encoding.
c Var 'aux597' order represents '0' with '2571'
c Var 'aux597' direct represents '0' with '2571'
c Var 'aux597' order represents '1' with '2572'
-2571 2572 0
c Var 'aux597' direct represents '1' with '2573'
2571 -2572 2573 0
-2573 2572 0
-2573 -2571 0
c Var 'aux597' order represents '2' with '2574'
-2572 2574 0
c Var 'aux597' direct represents '2' with '2575'
2572 -2574 2575 0
-2575 2574 0
-2575 -2572 0
c Var 'aux597' order represents '3' with '2576'
-2574 2576 0
c Var 'aux597' direct represents '3' with '2577'
2574 -2576 2577 0
-2577 2576 0
-2577 -2574 0
c Var 'aux597' direct represents '4' with '-2576'
2571 2573 2575 2577 -2576 0
c Encoding variable: aux598 with domain: int(0..2) (representing constraint ((x_00003_00003=9) + (x_00005_00003=9)))
c Both direct and order encoding.
c Var 'aux598' order represents '0' with '2578'
c Var 'aux598' direct represents '0' with '2578'
c Var 'aux598' order represents '1' with '2579'
-2578 2579 0
c Var 'aux598' direct represents '1' with '2580'
2578 -2579 2580 0
-2580 2579 0
-2580 -2578 0
c Var 'aux598' direct represents '2' with '-2579'
2578 2580 -2579 0
c Encoding variable: aux599 with domain: int(0..2) (representing constraint ((x_00007_00003=9) + (x_00008_00003=9)))
c Both direct and order encoding.
c Var 'aux599' order represents '0' with '2581'
c Var 'aux599' direct represents '0' with '2581'
c Var 'aux599' order represents '1' with '2582'
-2581 2582 0
c Var 'aux599' direct represents '1' with '2583'
2581 -2582 2583 0
-2583 2582 0
-2583 -2581 0
c Var 'aux599' direct represents '2' with '-2582'
2581 2583 -2582 0
c Encoding variable: aux600 with domain: int(0..2) (representing constraint ((x_00002_00003=9) + (x_00006_00003=9)))
c Both direct and order encoding.
c Var 'aux600' order represents '0' with '2584'
c Var 'aux600' direct represents '0' with '2584'
c Var 'aux600' order represents '1' with '2585'
-2584 2585 0
c Var 'aux600' direct represents '1' with '2586'
2584 -2585 2586 0
-2586 2585 0
-2586 -2584 0
c Var 'aux600' direct represents '2' with '-2585'
2584 2586 -2585 0
c Encoding variable: aux601 with domain: int(0..2) (representing constraint ((x_00009_00003=9) + (x_00004_00003=9)))
c Both direct and order encoding.
c Var 'aux601' order represents '0' with '2587'
c Var 'aux601' direct represents '0' with '2587'
c Var 'aux601' order represents '1' with '2588'
-2587 2588 0
c Var 'aux601' direct represents '1' with '2589'
2587 -2588 2589 0
-2589 2588 0
-2589 -2587 0
c Var 'aux601' direct represents '2' with '-2588'
2587 2589 -2588 0
c Encoding variable: aux602 with domain: int(0..3) (representing constraint ((x_00001_00003=9) + aux601))
c Both direct and order encoding.
c Var 'aux602' order represents '0' with '2590'
c Var 'aux602' direct represents '0' with '2590'
c Var 'aux602' order represents '1' with '2591'
-2590 2591 0
c Var 'aux602' direct represents '1' with '2592'
2590 -2591 2592 0
-2592 2591 0
-2592 -2590 0
c Var 'aux602' order represents '2' with '2593'
-2591 2593 0
c Var 'aux602' direct represents '2' with '2594'
2591 -2593 2594 0
-2594 2593 0
-2594 -2591 0
c Var 'aux602' direct represents '3' with '-2593'
2590 2592 2594 -2593 0
c Encoding variable: aux603 with domain: int(0..4) (representing constraint (aux598 + aux600))
c Both direct and order encoding.
c Var 'aux603' order represents '0' with '2595'
c Var 'aux603' direct represents '0' with '2595'
c Var 'aux603' order represents '1' with '2596'
-2595 2596 0
c Var 'aux603' direct represents '1' with '2597'
2595 -2596 2597 0
-2597 2596 0
-2597 -2595 0
c Var 'aux603' order represents '2' with '2598'
-2596 2598 0
c Var 'aux603' direct represents '2' with '2599'
2596 -2598 2599 0
-2599 2598 0
-2599 -2596 0
c Var 'aux603' order represents '3' with '2600'
-2598 2600 0
c Var 'aux603' direct represents '3' with '2601'
2598 -2600 2601 0
-2601 2600 0
-2601 -2598 0
c Var 'aux603' direct represents '4' with '-2600'
2595 2597 2599 2601 -2600 0
c Encoding variable: aux604 with domain: int(0..2) (representing constraint ((x_00003_00004=1) + (x_00005_00004=1)))
c Both direct and order encoding.
c Var 'aux604' order represents '0' with '2602'
c Var 'aux604' direct represents '0' with '2602'
c Var 'aux604' order represents '1' with '2603'
-2602 2603 0
c Var 'aux604' direct represents '1' with '2604'
2602 -2603 2604 0
-2604 2603 0
-2604 -2602 0
c Var 'aux604' direct represents '2' with '-2603'
2602 2604 -2603 0
c Encoding variable: aux605 with domain: int(0..2) (representing constraint ((x_00007_00004=1) + (x_00008_00004=1)))
c Both direct and order encoding.
c Var 'aux605' order represents '0' with '2605'
c Var 'aux605' direct represents '0' with '2605'
c Var 'aux605' order represents '1' with '2606'
-2605 2606 0
c Var 'aux605' direct represents '1' with '2607'
2605 -2606 2607 0
-2607 2606 0
-2607 -2605 0
c Var 'aux605' direct represents '2' with '-2606'
2605 2607 -2606 0
c Encoding variable: aux606 with domain: int(0..2) (representing constraint ((x_00002_00004=1) + (x_00006_00004=1)))
c Both direct and order encoding.
c Var 'aux606' order represents '0' with '2608'
c Var 'aux606' direct represents '0' with '2608'
c Var 'aux606' order represents '1' with '2609'
-2608 2609 0
c Var 'aux606' direct represents '1' with '2610'
2608 -2609 2610 0
-2610 2609 0
-2610 -2608 0
c Var 'aux606' direct represents '2' with '-2609'
2608 2610 -2609 0
c Encoding variable: aux607 with domain: int(0..2) (representing constraint ((x_00009_00004=1) + (x_00004_00004=1)))
c Both direct and order encoding.
c Var 'aux607' order represents '0' with '2611'
c Var 'aux607' direct represents '0' with '2611'
c Var 'aux607' order represents '1' with '2612'
-2611 2612 0
c Var 'aux607' direct represents '1' with '2613'
2611 -2612 2613 0
-2613 2612 0
-2613 -2611 0
c Var 'aux607' direct represents '2' with '-2612'
2611 2613 -2612 0
c Encoding variable: aux608 with domain: int(0..3) (representing constraint ((x_00001_00004=1) + aux607))
c Both direct and order encoding.
c Var 'aux608' order represents '0' with '2614'
c Var 'aux608' direct represents '0' with '2614'
c Var 'aux608' order represents '1' with '2615'
-2614 2615 0
c Var 'aux608' direct represents '1' with '2616'
2614 -2615 2616 0
-2616 2615 0
-2616 -2614 0
c Var 'aux608' order represents '2' with '2617'
-2615 2617 0
c Var 'aux608' direct represents '2' with '2618'
2615 -2617 2618 0
-2618 2617 0
-2618 -2615 0
c Var 'aux608' direct represents '3' with '-2617'
2614 2616 2618 -2617 0
c Encoding variable: aux609 with domain: int(0..4) (representing constraint (aux604 + aux606))
c Both direct and order encoding.
c Var 'aux609' order represents '0' with '2619'
c Var 'aux609' direct represents '0' with '2619'
c Var 'aux609' order represents '1' with '2620'
-2619 2620 0
c Var 'aux609' direct represents '1' with '2621'
2619 -2620 2621 0
-2621 2620 0
-2621 -2619 0
c Var 'aux609' order represents '2' with '2622'
-2620 2622 0
c Var 'aux609' direct represents '2' with '2623'
2620 -2622 2623 0
-2623 2622 0
-2623 -2620 0
c Var 'aux609' order represents '3' with '2624'
-2622 2624 0
c Var 'aux609' direct represents '3' with '2625'
2622 -2624 2625 0
-2625 2624 0
-2625 -2622 0
c Var 'aux609' direct represents '4' with '-2624'
2619 2621 2623 2625 -2624 0
c Encoding variable: aux610 with domain: int(0..2) (representing constraint ((x_00003_00004=2) + (x_00005_00004=2)))
c Both direct and order encoding.
c Var 'aux610' order represents '0' with '2626'
c Var 'aux610' direct represents '0' with '2626'
c Var 'aux610' order represents '1' with '2627'
-2626 2627 0
c Var 'aux610' direct represents '1' with '2628'
2626 -2627 2628 0
-2628 2627 0
-2628 -2626 0
c Var 'aux610' direct represents '2' with '-2627'
2626 2628 -2627 0
c Encoding variable: aux611 with domain: int(0..2) (representing constraint ((x_00007_00004=2) + (x_00008_00004=2)))
c Both direct and order encoding.
c Var 'aux611' order represents '0' with '2629'
c Var 'aux611' direct represents '0' with '2629'
c Var 'aux611' order represents '1' with '2630'
-2629 2630 0
c Var 'aux611' direct represents '1' with '2631'
2629 -2630 2631 0
-2631 2630 0
-2631 -2629 0
c Var 'aux611' direct represents '2' with '-2630'
2629 2631 -2630 0
c Encoding variable: aux612 with domain: int(0..2) (representing constraint ((x_00002_00004=2) + (x_00006_00004=2)))
c Both direct and order encoding.
c Var 'aux612' order represents '0' with '2632'
c Var 'aux612' direct represents '0' with '2632'
c Var 'aux612' order represents '1' with '2633'
-2632 2633 0
c Var 'aux612' direct represents '1' with '2634'
2632 -2633 2634 0
-2634 2633 0
-2634 -2632 0
c Var 'aux612' direct represents '2' with '-2633'
2632 2634 -2633 0
c Encoding variable: aux613 with domain: int(0..2) (representing constraint ((x_00009_00004=2) + (x_00004_00004=2)))
c Both direct and order encoding.
c Var 'aux613' order represents '0' with '2635'
c Var 'aux613' direct represents '0' with '2635'
c Var 'aux613' order represents '1' with '2636'
-2635 2636 0
c Var 'aux613' direct represents '1' with '2637'
2635 -2636 2637 0
-2637 2636 0
-2637 -2635 0
c Var 'aux613' direct represents '2' with '-2636'
2635 2637 -2636 0
c Encoding variable: aux614 with domain: int(0..3) (representing constraint ((x_00001_00004=2) + aux613))
c Both direct and order encoding.
c Var 'aux614' order represents '0' with '2638'
c Var 'aux614' direct represents '0' with '2638'
c Var 'aux614' order represents '1' with '2639'
-2638 2639 0
c Var 'aux614' direct represents '1' with '2640'
2638 -2639 2640 0
-2640 2639 0
-2640 -2638 0
c Var 'aux614' order represents '2' with '2641'
-2639 2641 0
c Var 'aux614' direct represents '2' with '2642'
2639 -2641 2642 0
-2642 2641 0
-2642 -2639 0
c Var 'aux614' direct represents '3' with '-2641'
2638 2640 2642 -2641 0
c Encoding variable: aux615 with domain: int(0..4) (representing constraint (aux610 + aux612))
c Both direct and order encoding.
c Var 'aux615' order represents '0' with '2643'
c Var 'aux615' direct represents '0' with '2643'
c Var 'aux615' order represents '1' with '2644'
-2643 2644 0
c Var 'aux615' direct represents '1' with '2645'
2643 -2644 2645 0
-2645 2644 0
-2645 -2643 0
c Var 'aux615' order represents '2' with '2646'
-2644 2646 0
c Var 'aux615' direct represents '2' with '2647'
2644 -2646 2647 0
-2647 2646 0
-2647 -2644 0
c Var 'aux615' order represents '3' with '2648'
-2646 2648 0
c Var 'aux615' direct represents '3' with '2649'
2646 -2648 2649 0
-2649 2648 0
-2649 -2646 0
c Var 'aux615' direct represents '4' with '-2648'
2643 2645 2647 2649 -2648 0
c Encoding variable: aux616 with domain: int(0..2) (representing constraint ((x_00003_00004=3) + (x_00005_00004=3)))
c Both direct and order encoding.
c Var 'aux616' order represents '0' with '2650'
c Var 'aux616' direct represents '0' with '2650'
c Var 'aux616' order represents '1' with '2651'
-2650 2651 0
c Var 'aux616' direct represents '1' with '2652'
2650 -2651 2652 0
-2652 2651 0
-2652 -2650 0
c Var 'aux616' direct represents '2' with '-2651'
2650 2652 -2651 0
c Encoding variable: aux617 with domain: int(0..2) (representing constraint ((x_00007_00004=3) + (x_00008_00004=3)))
c Both direct and order encoding.
c Var 'aux617' order represents '0' with '2653'
c Var 'aux617' direct represents '0' with '2653'
c Var 'aux617' order represents '1' with '2654'
-2653 2654 0
c Var 'aux617' direct represents '1' with '2655'
2653 -2654 2655 0
-2655 2654 0
-2655 -2653 0
c Var 'aux617' direct represents '2' with '-2654'
2653 2655 -2654 0
c Encoding variable: aux618 with domain: int(0..2) (representing constraint ((x_00002_00004=3) + (x_00006_00004=3)))
c Both direct and order encoding.
c Var 'aux618' order represents '0' with '2656'
c Var 'aux618' direct represents '0' with '2656'
c Var 'aux618' order represents '1' with '2657'
-2656 2657 0
c Var 'aux618' direct represents '1' with '2658'
2656 -2657 2658 0
-2658 2657 0
-2658 -2656 0
c Var 'aux618' direct represents '2' with '-2657'
2656 2658 -2657 0
c Encoding variable: aux619 with domain: int(0..2) (representing constraint ((x_00009_00004=3) + (x_00004_00004=3)))
c Both direct and order encoding.
c Var 'aux619' order represents '0' with '2659'
c Var 'aux619' direct represents '0' with '2659'
c Var 'aux619' order represents '1' with '2660'
-2659 2660 0
c Var 'aux619' direct represents '1' with '2661'
2659 -2660 2661 0
-2661 2660 0
-2661 -2659 0
c Var 'aux619' direct represents '2' with '-2660'
2659 2661 -2660 0
c Encoding variable: aux620 with domain: int(0..3) (representing constraint ((x_00001_00004=3) + aux619))
c Both direct and order encoding.
c Var 'aux620' order represents '0' with '2662'
c Var 'aux620' direct represents '0' with '2662'
c Var 'aux620' order represents '1' with '2663'
-2662 2663 0
c Var 'aux620' direct represents '1' with '2664'
2662 -2663 2664 0
-2664 2663 0
-2664 -2662 0
c Var 'aux620' order represents '2' with '2665'
-2663 2665 0
c Var 'aux620' direct represents '2' with '2666'
2663 -2665 2666 0
-2666 2665 0
-2666 -2663 0
c Var 'aux620' direct represents '3' with '-2665'
2662 2664 2666 -2665 0
c Encoding variable: aux621 with domain: int(0..4) (representing constraint (aux616 + aux618))
c Both direct and order encoding.
c Var 'aux621' order represents '0' with '2667'
c Var 'aux621' direct represents '0' with '2667'
c Var 'aux621' order represents '1' with '2668'
-2667 2668 0
c Var 'aux621' direct represents '1' with '2669'
2667 -2668 2669 0
-2669 2668 0
-2669 -2667 0
c Var 'aux621' order represents '2' with '2670'
-2668 2670 0
c Var 'aux621' direct represents '2' with '2671'
2668 -2670 2671 0
-2671 2670 0
-2671 -2668 0
c Var 'aux621' order represents '3' with '2672'
-2670 2672 0
c Var 'aux621' direct represents '3' with '2673'
2670 -2672 2673 0
-2673 2672 0
-2673 -2670 0
c Var 'aux621' direct represents '4' with '-2672'
2667 2669 2671 2673 -2672 0
c Encoding variable: aux622 with domain: int(0..2) (representing constraint ((x_00003_00004=4) + (x_00005_00004=4)))
c Both direct and order encoding.
c Var 'aux622' order represents '0' with '2674'
c Var 'aux622' direct represents '0' with '2674'
c Var 'aux622' order represents '1' with '2675'
-2674 2675 0
c Var 'aux622' direct represents '1' with '2676'
2674 -2675 2676 0
-2676 2675 0
-2676 -2674 0
c Var 'aux622' direct represents '2' with '-2675'
2674 2676 -2675 0
c Encoding variable: aux623 with domain: int(0..2) (representing constraint ((x_00007_00004=4) + (x_00008_00004=4)))
c Both direct and order encoding.
c Var 'aux623' order represents '0' with '2677'
c Var 'aux623' direct represents '0' with '2677'
c Var 'aux623' order represents '1' with '2678'
-2677 2678 0
c Var 'aux623' direct represents '1' with '2679'
2677 -2678 2679 0
-2679 2678 0
-2679 -2677 0
c Var 'aux623' direct represents '2' with '-2678'
2677 2679 -2678 0
c Encoding variable: aux624 with domain: int(0..2) (representing constraint ((x_00002_00004=4) + (x_00006_00004=4)))
c Both direct and order encoding.
c Var 'aux624' order represents '0' with '2680'
c Var 'aux624' direct represents '0' with '2680'
c Var 'aux624' order represents '1' with '2681'
-2680 2681 0
c Var 'aux624' direct represents '1' with '2682'
2680 -2681 2682 0
-2682 2681 0
-2682 -2680 0
c Var 'aux624' direct represents '2' with '-2681'
2680 2682 -2681 0
c Encoding variable: aux625 with domain: int(0..2) (representing constraint ((x_00009_00004=4) + (x_00004_00004=4)))
c Both direct and order encoding.
c Var 'aux625' order represents '0' with '2683'
c Var 'aux625' direct represents '0' with '2683'
c Var 'aux625' order represents '1' with '2684'
-2683 2684 0
c Var 'aux625' direct represents '1' with '2685'
2683 -2684 2685 0
-2685 2684 0
-2685 -2683 0
c Var 'aux625' direct represents '2' with '-2684'
2683 2685 -2684 0
c Encoding variable: aux626 with domain: int(0..3) (representing constraint ((x_00001_00004=4) + aux625))
c Both direct and order encoding.
c Var 'aux626' order represents '0' with '2686'
c Var 'aux626' direct represents '0' with '2686'
c Var 'aux626' order represents '1' with '2687'
-2686 2687 0
c Var 'aux626' direct represents '1' with '2688'
2686 -2687 2688 0
-2688 2687 0
-2688 -2686 0
c Var 'aux626' order represents '2' with '2689'
-2687 2689 0
c Var 'aux626' direct represents '2' with '2690'
2687 -2689 2690 0
-2690 2689 0
-2690 -2687 0
c Var 'aux626' direct represents '3' with '-2689'
2686 2688 2690 -2689 0
c Encoding variable: aux627 with domain: int(0..4) (representing constraint (aux622 + aux624))
c Both direct and order encoding.
c Var 'aux627' order represents '0' with '2691'
c Var 'aux627' direct represents '0' with '2691'
c Var 'aux627' order represents '1' with '2692'
-2691 2692 0
c Var 'aux627' direct represents '1' with '2693'
2691 -2692 2693 0
-2693 2692 0
-2693 -2691 0
c Var 'aux627' order represents '2' with '2694'
-2692 2694 0
c Var 'aux627' direct represents '2' with '2695'
2692 -2694 2695 0
-2695 2694 0
-2695 -2692 0
c Var 'aux627' order represents '3' with '2696'
-2694 2696 0
c Var 'aux627' direct represents '3' with '2697'
2694 -2696 2697 0
-2697 2696 0
-2697 -2694 0
c Var 'aux627' direct represents '4' with '-2696'
2691 2693 2695 2697 -2696 0
c Encoding variable: aux628 with domain: int(0..2) (representing constraint ((x_00003_00004=5) + (x_00005_00004=5)))
c Both direct and order encoding.
c Var 'aux628' order represents '0' with '2698'
c Var 'aux628' direct represents '0' with '2698'
c Var 'aux628' order represents '1' with '2699'
-2698 2699 0
c Var 'aux628' direct represents '1' with '2700'
2698 -2699 2700 0
-2700 2699 0
-2700 -2698 0
c Var 'aux628' direct represents '2' with '-2699'
2698 2700 -2699 0
c Encoding variable: aux629 with domain: int(0..2) (representing constraint ((x_00007_00004=5) + (x_00008_00004=5)))
c Both direct and order encoding.
c Var 'aux629' order represents '0' with '2701'
c Var 'aux629' direct represents '0' with '2701'
c Var 'aux629' order represents '1' with '2702'
-2701 2702 0
c Var 'aux629' direct represents '1' with '2703'
2701 -2702 2703 0
-2703 2702 0
-2703 -2701 0
c Var 'aux629' direct represents '2' with '-2702'
2701 2703 -2702 0
c Encoding variable: aux630 with domain: int(0..2) (representing constraint ((x_00002_00004=5) + (x_00006_00004=5)))
c Both direct and order encoding.
c Var 'aux630' order represents '0' with '2704'
c Var 'aux630' direct represents '0' with '2704'
c Var 'aux630' order represents '1' with '2705'
-2704 2705 0
c Var 'aux630' direct represents '1' with '2706'
2704 -2705 2706 0
-2706 2705 0
-2706 -2704 0
c Var 'aux630' direct represents '2' with '-2705'
2704 2706 -2705 0
c Encoding variable: aux631 with domain: int(0..2) (representing constraint ((x_00009_00004=5) + (x_00004_00004=5)))
c Both direct and order encoding.
c Var 'aux631' order represents '0' with '2707'
c Var 'aux631' direct represents '0' with '2707'
c Var 'aux631' order represents '1' with '2708'
-2707 2708 0
c Var 'aux631' direct represents '1' with '2709'
2707 -2708 2709 0
-2709 2708 0
-2709 -2707 0
c Var 'aux631' direct represents '2' with '-2708'
2707 2709 -2708 0
c Encoding variable: aux632 with domain: int(0..3) (representing constraint ((x_00001_00004=5) + aux631))
c Both direct and order encoding.
c Var 'aux632' order represents '0' with '2710'
c Var 'aux632' direct represents '0' with '2710'
c Var 'aux632' order represents '1' with '2711'
-2710 2711 0
c Var 'aux632' direct represents '1' with '2712'
2710 -2711 2712 0
-2712 2711 0
-2712 -2710 0
c Var 'aux632' order represents '2' with '2713'
-2711 2713 0
c Var 'aux632' direct represents '2' with '2714'
2711 -2713 2714 0
-2714 2713 0
-2714 -2711 0
c Var 'aux632' direct represents '3' with '-2713'
2710 2712 2714 -2713 0
c Encoding variable: aux633 with domain: int(0..4) (representing constraint (aux628 + aux630))
c Both direct and order encoding.
c Var 'aux633' order represents '0' with '2715'
c Var 'aux633' direct represents '0' with '2715'
c Var 'aux633' order represents '1' with '2716'
-2715 2716 0
c Var 'aux633' direct represents '1' with '2717'
2715 -2716 2717 0
-2717 2716 0
-2717 -2715 0
c Var 'aux633' order represents '2' with '2718'
-2716 2718 0
c Var 'aux633' direct represents '2' with '2719'
2716 -2718 2719 0
-2719 2718 0
-2719 -2716 0
c Var 'aux633' order represents '3' with '2720'
-2718 2720 0
c Var 'aux633' direct represents '3' with '2721'
2718 -2720 2721 0
-2721 2720 0
-2721 -2718 0
c Var 'aux633' direct represents '4' with '-2720'
2715 2717 2719 2721 -2720 0
c Encoding variable: aux634 with domain: int(0..2) (representing constraint ((x_00003_00004=6) + (x_00005_00004=6)))
c Both direct and order encoding.
c Var 'aux634' order represents '0' with '2722'
c Var 'aux634' direct represents '0' with '2722'
c Var 'aux634' order represents '1' with '2723'
-2722 2723 0
c Var 'aux634' direct represents '1' with '2724'
2722 -2723 2724 0
-2724 2723 0
-2724 -2722 0
c Var 'aux634' direct represents '2' with '-2723'
2722 2724 -2723 0
c Encoding variable: aux635 with domain: int(0..2) (representing constraint ((x_00007_00004=6) + (x_00008_00004=6)))
c Both direct and order encoding.
c Var 'aux635' order represents '0' with '2725'
c Var 'aux635' direct represents '0' with '2725'
c Var 'aux635' order represents '1' with '2726'
-2725 2726 0
c Var 'aux635' direct represents '1' with '2727'
2725 -2726 2727 0
-2727 2726 0
-2727 -2725 0
c Var 'aux635' direct represents '2' with '-2726'
2725 2727 -2726 0
c Encoding variable: aux636 with domain: int(0..2) (representing constraint ((x_00002_00004=6) + (x_00006_00004=6)))
c Both direct and order encoding.
c Var 'aux636' order represents '0' with '2728'
c Var 'aux636' direct represents '0' with '2728'
c Var 'aux636' order represents '1' with '2729'
-2728 2729 0
c Var 'aux636' direct represents '1' with '2730'
2728 -2729 2730 0
-2730 2729 0
-2730 -2728 0
c Var 'aux636' direct represents '2' with '-2729'
2728 2730 -2729 0
c Encoding variable: aux637 with domain: int(0..2) (representing constraint ((x_00009_00004=6) + (x_00004_00004=6)))
c Both direct and order encoding.
c Var 'aux637' order represents '0' with '2731'
c Var 'aux637' direct represents '0' with '2731'
c Var 'aux637' order represents '1' with '2732'
-2731 2732 0
c Var 'aux637' direct represents '1' with '2733'
2731 -2732 2733 0
-2733 2732 0
-2733 -2731 0
c Var 'aux637' direct represents '2' with '-2732'
2731 2733 -2732 0
c Encoding variable: aux638 with domain: int(0..3) (representing constraint ((x_00001_00004=6) + aux637))
c Both direct and order encoding.
c Var 'aux638' order represents '0' with '2734'
c Var 'aux638' direct represents '0' with '2734'
c Var 'aux638' order represents '1' with '2735'
-2734 2735 0
c Var 'aux638' direct represents '1' with '2736'
2734 -2735 2736 0
-2736 2735 0
-2736 -2734 0
c Var 'aux638' order represents '2' with '2737'
-2735 2737 0
c Var 'aux638' direct represents '2' with '2738'
2735 -2737 2738 0
-2738 2737 0
-2738 -2735 0
c Var 'aux638' direct represents '3' with '-2737'
2734 2736 2738 -2737 0
c Encoding variable: aux639 with domain: int(0..4) (representing constraint (aux634 + aux636))
c Both direct and order encoding.
c Var 'aux639' order represents '0' with '2739'
c Var 'aux639' direct represents '0' with '2739'
c Var 'aux639' order represents '1' with '2740'
-2739 2740 0
c Var 'aux639' direct represents '1' with '2741'
2739 -2740 2741 0
-2741 2740 0
-2741 -2739 0
c Var 'aux639' order represents '2' with '2742'
-2740 2742 0
c Var 'aux639' direct represents '2' with '2743'
2740 -2742 2743 0
-2743 2742 0
-2743 -2740 0
c Var 'aux639' order represents '3' with '2744'
-2742 2744 0
c Var 'aux639' direct represents '3' with '2745'
2742 -2744 2745 0
-2745 2744 0
-2745 -2742 0
c Var 'aux639' direct represents '4' with '-2744'
2739 2741 2743 2745 -2744 0
c Encoding variable: aux640 with domain: int(0..2) (representing constraint ((x_00003_00004=7) + (x_00005_00004=7)))
c Both direct and order encoding.
c Var 'aux640' order represents '0' with '2746'
c Var 'aux640' direct represents '0' with '2746'
c Var 'aux640' order represents '1' with '2747'
-2746 2747 0
c Var 'aux640' direct represents '1' with '2748'
2746 -2747 2748 0
-2748 2747 0
-2748 -2746 0
c Var 'aux640' direct represents '2' with '-2747'
2746 2748 -2747 0
c Encoding variable: aux641 with domain: int(0..2) (representing constraint ((x_00007_00004=7) + (x_00008_00004=7)))
c Both direct and order encoding.
c Var 'aux641' order represents '0' with '2749'
c Var 'aux641' direct represents '0' with '2749'
c Var 'aux641' order represents '1' with '2750'
-2749 2750 0
c Var 'aux641' direct represents '1' with '2751'
2749 -2750 2751 0
-2751 2750 0
-2751 -2749 0
c Var 'aux641' direct represents '2' with '-2750'
2749 2751 -2750 0
c Encoding variable: aux642 with domain: int(0..2) (representing constraint ((x_00002_00004=7) + (x_00006_00004=7)))
c Both direct and order encoding.
c Var 'aux642' order represents '0' with '2752'
c Var 'aux642' direct represents '0' with '2752'
c Var 'aux642' order represents '1' with '2753'
-2752 2753 0
c Var 'aux642' direct represents '1' with '2754'
2752 -2753 2754 0
-2754 2753 0
-2754 -2752 0
c Var 'aux642' direct represents '2' with '-2753'
2752 2754 -2753 0
c Encoding variable: aux643 with domain: int(0..2) (representing constraint ((x_00009_00004=7) + (x_00004_00004=7)))
c Both direct and order encoding.
c Var 'aux643' order represents '0' with '2755'
c Var 'aux643' direct represents '0' with '2755'
c Var 'aux643' order represents '1' with '2756'
-2755 2756 0
c Var 'aux643' direct represents '1' with '2757'
2755 -2756 2757 0
-2757 2756 0
-2757 -2755 0
c Var 'aux643' direct represents '2' with '-2756'
2755 2757 -2756 0
c Encoding variable: aux644 with domain: int(0..3) (representing constraint ((x_00001_00004=7) + aux643))
c Both direct and order encoding.
c Var 'aux644' order represents '0' with '2758'
c Var 'aux644' direct represents '0' with '2758'
c Var 'aux644' order represents '1' with '2759'
-2758 2759 0
c Var 'aux644' direct represents '1' with '2760'
2758 -2759 2760 0
-2760 2759 0
-2760 -2758 0
c Var 'aux644' order represents '2' with '2761'
-2759 2761 0
c Var 'aux644' direct represents '2' with '2762'
2759 -2761 2762 0
-2762 2761 0
-2762 -2759 0
c Var 'aux644' direct represents '3' with '-2761'
2758 2760 2762 -2761 0
c Encoding variable: aux645 with domain: int(0..4) (representing constraint (aux640 + aux642))
c Both direct and order encoding.
c Var 'aux645' order represents '0' with '2763'
c Var 'aux645' direct represents '0' with '2763'
c Var 'aux645' order represents '1' with '2764'
-2763 2764 0
c Var 'aux645' direct represents '1' with '2765'
2763 -2764 2765 0
-2765 2764 0
-2765 -2763 0
c Var 'aux645' order represents '2' with '2766'
-2764 2766 0
c Var 'aux645' direct represents '2' with '2767'
2764 -2766 2767 0
-2767 2766 0
-2767 -2764 0
c Var 'aux645' order represents '3' with '2768'
-2766 2768 0
c Var 'aux645' direct represents '3' with '2769'
2766 -2768 2769 0
-2769 2768 0
-2769 -2766 0
c Var 'aux645' direct represents '4' with '-2768'
2763 2765 2767 2769 -2768 0
c Encoding variable: aux646 with domain: int(0..2) (representing constraint ((x_00003_00004=8) + (x_00005_00004=8)))
c Both direct and order encoding.
c Var 'aux646' order represents '0' with '2770'
c Var 'aux646' direct represents '0' with '2770'
c Var 'aux646' order represents '1' with '2771'
-2770 2771 0
c Var 'aux646' direct represents '1' with '2772'
2770 -2771 2772 0
-2772 2771 0
-2772 -2770 0
c Var 'aux646' direct represents '2' with '-2771'
2770 2772 -2771 0
c Encoding variable: aux647 with domain: int(0..2) (representing constraint ((x_00007_00004=8) + (x_00008_00004=8)))
c Both direct and order encoding.
c Var 'aux647' order represents '0' with '2773'
c Var 'aux647' direct represents '0' with '2773'
c Var 'aux647' order represents '1' with '2774'
-2773 2774 0
c Var 'aux647' direct represents '1' with '2775'
2773 -2774 2775 0
-2775 2774 0
-2775 -2773 0
c Var 'aux647' direct represents '2' with '-2774'
2773 2775 -2774 0
c Encoding variable: aux648 with domain: int(0..2) (representing constraint ((x_00002_00004=8) + (x_00006_00004=8)))
c Both direct and order encoding.
c Var 'aux648' order represents '0' with '2776'
c Var 'aux648' direct represents '0' with '2776'
c Var 'aux648' order represents '1' with '2777'
-2776 2777 0
c Var 'aux648' direct represents '1' with '2778'
2776 -2777 2778 0
-2778 2777 0
-2778 -2776 0
c Var 'aux648' direct represents '2' with '-2777'
2776 2778 -2777 0
c Encoding variable: aux649 with domain: int(0..2) (representing constraint ((x_00009_00004=8) + (x_00004_00004=8)))
c Both direct and order encoding.
c Var 'aux649' order represents '0' with '2779'
c Var 'aux649' direct represents '0' with '2779'
c Var 'aux649' order represents '1' with '2780'
-2779 2780 0
c Var 'aux649' direct represents '1' with '2781'
2779 -2780 2781 0
-2781 2780 0
-2781 -2779 0
c Var 'aux649' direct represents '2' with '-2780'
2779 2781 -2780 0
c Encoding variable: aux650 with domain: int(0..3) (representing constraint ((x_00001_00004=8) + aux649))
c Both direct and order encoding.
c Var 'aux650' order represents '0' with '2782'
c Var 'aux650' direct represents '0' with '2782'
c Var 'aux650' order represents '1' with '2783'
-2782 2783 0
c Var 'aux650' direct represents '1' with '2784'
2782 -2783 2784 0
-2784 2783 0
-2784 -2782 0
c Var 'aux650' order represents '2' with '2785'
-2783 2785 0
c Var 'aux650' direct represents '2' with '2786'
2783 -2785 2786 0
-2786 2785 0
-2786 -2783 0
c Var 'aux650' direct represents '3' with '-2785'
2782 2784 2786 -2785 0
c Encoding variable: aux651 with domain: int(0..4) (representing constraint (aux646 + aux648))
c Both direct and order encoding.
c Var 'aux651' order represents '0' with '2787'
c Var 'aux651' direct represents '0' with '2787'
c Var 'aux651' order represents '1' with '2788'
-2787 2788 0
c Var 'aux651' direct represents '1' with '2789'
2787 -2788 2789 0
-2789 2788 0
-2789 -2787 0
c Var 'aux651' order represents '2' with '2790'
-2788 2790 0
c Var 'aux651' direct represents '2' with '2791'
2788 -2790 2791 0
-2791 2790 0
-2791 -2788 0
c Var 'aux651' order represents '3' with '2792'
-2790 2792 0
c Var 'aux651' direct represents '3' with '2793'
2790 -2792 2793 0
-2793 2792 0
-2793 -2790 0
c Var 'aux651' direct represents '4' with '-2792'
2787 2789 2791 2793 -2792 0
c Encoding variable: aux652 with domain: int(0..2) (representing constraint ((x_00003_00004=9) + (x_00005_00004=9)))
c Both direct and order encoding.
c Var 'aux652' order represents '0' with '2794'
c Var 'aux652' direct represents '0' with '2794'
c Var 'aux652' order represents '1' with '2795'
-2794 2795 0
c Var 'aux652' direct represents '1' with '2796'
2794 -2795 2796 0
-2796 2795 0
-2796 -2794 0
c Var 'aux652' direct represents '2' with '-2795'
2794 2796 -2795 0
c Encoding variable: aux653 with domain: int(0..2) (representing constraint ((x_00007_00004=9) + (x_00008_00004=9)))
c Both direct and order encoding.
c Var 'aux653' order represents '0' with '2797'
c Var 'aux653' direct represents '0' with '2797'
c Var 'aux653' order represents '1' with '2798'
-2797 2798 0
c Var 'aux653' direct represents '1' with '2799'
2797 -2798 2799 0
-2799 2798 0
-2799 -2797 0
c Var 'aux653' direct represents '2' with '-2798'
2797 2799 -2798 0
c Encoding variable: aux654 with domain: int(0..2) (representing constraint ((x_00002_00004=9) + (x_00006_00004=9)))
c Both direct and order encoding.
c Var 'aux654' order represents '0' with '2800'
c Var 'aux654' direct represents '0' with '2800'
c Var 'aux654' order represents '1' with '2801'
-2800 2801 0
c Var 'aux654' direct represents '1' with '2802'
2800 -2801 2802 0
-2802 2801 0
-2802 -2800 0
c Var 'aux654' direct represents '2' with '-2801'
2800 2802 -2801 0
c Encoding variable: aux655 with domain: int(0..2) (representing constraint ((x_00009_00004=9) + (x_00004_00004=9)))
c Both direct and order encoding.
c Var 'aux655' order represents '0' with '2803'
c Var 'aux655' direct represents '0' with '2803'
c Var 'aux655' order represents '1' with '2804'
-2803 2804 0
c Var 'aux655' direct represents '1' with '2805'
2803 -2804 2805 0
-2805 2804 0
-2805 -2803 0
c Var 'aux655' direct represents '2' with '-2804'
2803 2805 -2804 0
c Encoding variable: aux656 with domain: int(0..3) (representing constraint ((x_00001_00004=9) + aux655))
c Both direct and order encoding.
c Var 'aux656' order represents '0' with '2806'
c Var 'aux656' direct represents '0' with '2806'
c Var 'aux656' order represents '1' with '2807'
-2806 2807 0
c Var 'aux656' direct represents '1' with '2808'
2806 -2807 2808 0
-2808 2807 0
-2808 -2806 0
c Var 'aux656' order represents '2' with '2809'
-2807 2809 0
c Var 'aux656' direct represents '2' with '2810'
2807 -2809 2810 0
-2810 2809 0
-2810 -2807 0
c Var 'aux656' direct represents '3' with '-2809'
2806 2808 2810 -2809 0
c Encoding variable: aux657 with domain: int(0..4) (representing constraint (aux652 + aux654))
c Both direct and order encoding.
c Var 'aux657' order represents '0' with '2811'
c Var 'aux657' direct represents '0' with '2811'
c Var 'aux657' order represents '1' with '2812'
-2811 2812 0
c Var 'aux657' direct represents '1' with '2813'
2811 -2812 2813 0
-2813 2812 0
-2813 -2811 0
c Var 'aux657' order represents '2' with '2814'
-2812 2814 0
c Var 'aux657' direct represents '2' with '2815'
2812 -2814 2815 0
-2815 2814 0
-2815 -2812 0
c Var 'aux657' order represents '3' with '2816'
-2814 2816 0
c Var 'aux657' direct represents '3' with '2817'
2814 -2816 2817 0
-2817 2816 0
-2817 -2814 0
c Var 'aux657' direct represents '4' with '-2816'
2811 2813 2815 2817 -2816 0
c Encoding variable: aux658 with domain: int(0..2) (representing constraint ((x_00003_00005=1) + (x_00005_00005=1)))
c Both direct and order encoding.
c Var 'aux658' order represents '0' with '2818'
c Var 'aux658' direct represents '0' with '2818'
c Var 'aux658' order represents '1' with '2819'
-2818 2819 0
c Var 'aux658' direct represents '1' with '2820'
2818 -2819 2820 0
-2820 2819 0
-2820 -2818 0
c Var 'aux658' direct represents '2' with '-2819'
2818 2820 -2819 0
c Encoding variable: aux659 with domain: int(0..2) (representing constraint ((x_00007_00005=1) + (x_00008_00005=1)))
c Both direct and order encoding.
c Var 'aux659' order represents '0' with '2821'
c Var 'aux659' direct represents '0' with '2821'
c Var 'aux659' order represents '1' with '2822'
-2821 2822 0
c Var 'aux659' direct represents '1' with '2823'
2821 -2822 2823 0
-2823 2822 0
-2823 -2821 0
c Var 'aux659' direct represents '2' with '-2822'
2821 2823 -2822 0
c Encoding variable: aux660 with domain: int(0..2) (representing constraint ((x_00002_00005=1) + (x_00006_00005=1)))
c Both direct and order encoding.
c Var 'aux660' order represents '0' with '2824'
c Var 'aux660' direct represents '0' with '2824'
c Var 'aux660' order represents '1' with '2825'
-2824 2825 0
c Var 'aux660' direct represents '1' with '2826'
2824 -2825 2826 0
-2826 2825 0
-2826 -2824 0
c Var 'aux660' direct represents '2' with '-2825'
2824 2826 -2825 0
c Encoding variable: aux661 with domain: int(0..2) (representing constraint ((x_00009_00005=1) + (x_00004_00005=1)))
c Both direct and order encoding.
c Var 'aux661' order represents '0' with '2827'
c Var 'aux661' direct represents '0' with '2827'
c Var 'aux661' order represents '1' with '2828'
-2827 2828 0
c Var 'aux661' direct represents '1' with '2829'
2827 -2828 2829 0
-2829 2828 0
-2829 -2827 0
c Var 'aux661' direct represents '2' with '-2828'
2827 2829 -2828 0
c Encoding variable: aux662 with domain: int(0..3) (representing constraint ((x_00001_00005=1) + aux661))
c Both direct and order encoding.
c Var 'aux662' order represents '0' with '2830'
c Var 'aux662' direct represents '0' with '2830'
c Var 'aux662' order represents '1' with '2831'
-2830 2831 0
c Var 'aux662' direct represents '1' with '2832'
2830 -2831 2832 0
-2832 2831 0
-2832 -2830 0
c Var 'aux662' order represents '2' with '2833'
-2831 2833 0
c Var 'aux662' direct represents '2' with '2834'
2831 -2833 2834 0
-2834 2833 0
-2834 -2831 0
c Var 'aux662' direct represents '3' with '-2833'
2830 2832 2834 -2833 0
c Encoding variable: aux663 with domain: int(0..4) (representing constraint (aux658 + aux660))
c Both direct and order encoding.
c Var 'aux663' order represents '0' with '2835'
c Var 'aux663' direct represents '0' with '2835'
c Var 'aux663' order represents '1' with '2836'
-2835 2836 0
c Var 'aux663' direct represents '1' with '2837'
2835 -2836 2837 0
-2837 2836 0
-2837 -2835 0
c Var 'aux663' order represents '2' with '2838'
-2836 2838 0
c Var 'aux663' direct represents '2' with '2839'
2836 -2838 2839 0
-2839 2838 0
-2839 -2836 0
c Var 'aux663' order represents '3' with '2840'
-2838 2840 0
c Var 'aux663' direct represents '3' with '2841'
2838 -2840 2841 0
-2841 2840 0
-2841 -2838 0
c Var 'aux663' direct represents '4' with '-2840'
2835 2837 2839 2841 -2840 0
c Encoding variable: aux664 with domain: int(0..2) (representing constraint ((x_00003_00005=2) + (x_00005_00005=2)))
c Both direct and order encoding.
c Var 'aux664' order represents '0' with '2842'
c Var 'aux664' direct represents '0' with '2842'
c Var 'aux664' order represents '1' with '2843'
-2842 2843 0
c Var 'aux664' direct represents '1' with '2844'
2842 -2843 2844 0
-2844 2843 0
-2844 -2842 0
c Var 'aux664' direct represents '2' with '-2843'
2842 2844 -2843 0
c Encoding variable: aux665 with domain: int(0..2) (representing constraint ((x_00007_00005=2) + (x_00008_00005=2)))
c Both direct and order encoding.
c Var 'aux665' order represents '0' with '2845'
c Var 'aux665' direct represents '0' with '2845'
c Var 'aux665' order represents '1' with '2846'
-2845 2846 0
c Var 'aux665' direct represents '1' with '2847'
2845 -2846 2847 0
-2847 2846 0
-2847 -2845 0
c Var 'aux665' direct represents '2' with '-2846'
2845 2847 -2846 0
c Encoding variable: aux666 with domain: int(0..2) (representing constraint ((x_00002_00005=2) + (x_00006_00005=2)))
c Both direct and order encoding.
c Var 'aux666' order represents '0' with '2848'
c Var 'aux666' direct represents '0' with '2848'
c Var 'aux666' order represents '1' with '2849'
-2848 2849 0
c Var 'aux666' direct represents '1' with '2850'
2848 -2849 2850 0
-2850 2849 0
-2850 -2848 0
c Var 'aux666' direct represents '2' with '-2849'
2848 2850 -2849 0
c Encoding variable: aux667 with domain: int(0..2) (representing constraint ((x_00009_00005=2) + (x_00004_00005=2)))
c Both direct and order encoding.
c Var 'aux667' order represents '0' with '2851'
c Var 'aux667' direct represents '0' with '2851'
c Var 'aux667' order represents '1' with '2852'
-2851 2852 0
c Var 'aux667' direct represents '1' with '2853'
2851 -2852 2853 0
-2853 2852 0
-2853 -2851 0
c Var 'aux667' direct represents '2' with '-2852'
2851 2853 -2852 0
c Encoding variable: aux668 with domain: int(0..3) (representing constraint ((x_00001_00005=2) + aux667))
c Both direct and order encoding.
c Var 'aux668' order represents '0' with '2854'
c Var 'aux668' direct represents '0' with '2854'
c Var 'aux668' order represents '1' with '2855'
-2854 2855 0
c Var 'aux668' direct represents '1' with '2856'
2854 -2855 2856 0
-2856 2855 0
-2856 -2854 0
c Var 'aux668' order represents '2' with '2857'
-2855 2857 0
c Var 'aux668' direct represents '2' with '2858'
2855 -2857 2858 0
-2858 2857 0
-2858 -2855 0
c Var 'aux668' direct represents '3' with '-2857'
2854 2856 2858 -2857 0
c Encoding variable: aux669 with domain: int(0..4) (representing constraint (aux664 + aux666))
c Both direct and order encoding.
c Var 'aux669' order represents '0' with '2859'
c Var 'aux669' direct represents '0' with '2859'
c Var 'aux669' order represents '1' with '2860'
-2859 2860 0
c Var 'aux669' direct represents '1' with '2861'
2859 -2860 2861 0
-2861 2860 0
-2861 -2859 0
c Var 'aux669' order represents '2' with '2862'
-2860 2862 0
c Var 'aux669' direct represents '2' with '2863'
2860 -2862 2863 0
-2863 2862 0
-2863 -2860 0
c Var 'aux669' order represents '3' with '2864'
-2862 2864 0
c Var 'aux669' direct represents '3' with '2865'
2862 -2864 2865 0
-2865 2864 0
-2865 -2862 0
c Var 'aux669' direct represents '4' with '-2864'
2859 2861 2863 2865 -2864 0
c Encoding variable: aux670 with domain: int(0..2) (representing constraint ((x_00003_00005=3) + (x_00005_00005=3)))
c Both direct and order encoding.
c Var 'aux670' order represents '0' with '2866'
c Var 'aux670' direct represents '0' with '2866'
c Var 'aux670' order represents '1' with '2867'
-2866 2867 0
c Var 'aux670' direct represents '1' with '2868'
2866 -2867 2868 0
-2868 2867 0
-2868 -2866 0
c Var 'aux670' direct represents '2' with '-2867'
2866 2868 -2867 0
c Encoding variable: aux671 with domain: int(0..2) (representing constraint ((x_00007_00005=3) + (x_00008_00005=3)))
c Both direct and order encoding.
c Var 'aux671' order represents '0' with '2869'
c Var 'aux671' direct represents '0' with '2869'
c Var 'aux671' order represents '1' with '2870'
-2869 2870 0
c Var 'aux671' direct represents '1' with '2871'
2869 -2870 2871 0
-2871 2870 0
-2871 -2869 0
c Var 'aux671' direct represents '2' with '-2870'
2869 2871 -2870 0
c Encoding variable: aux672 with domain: int(0..2) (representing constraint ((x_00002_00005=3) + (x_00006_00005=3)))
c Both direct and order encoding.
c Var 'aux672' order represents '0' with '2872'
c Var 'aux672' direct represents '0' with '2872'
c Var 'aux672' order represents '1' with '2873'
-2872 2873 0
c Var 'aux672' direct represents '1' with '2874'
2872 -2873 2874 0
-2874 2873 0
-2874 -2872 0
c Var 'aux672' direct represents '2' with '-2873'
2872 2874 -2873 0
c Encoding variable: aux673 with domain: int(0..2) (representing constraint ((x_00009_00005=3) + (x_00004_00005=3)))
c Both direct and order encoding.
c Var 'aux673' order represents '0' with '2875'
c Var 'aux673' direct represents '0' with '2875'
c Var 'aux673' order represents '1' with '2876'
-2875 2876 0
c Var 'aux673' direct represents '1' with '2877'
2875 -2876 2877 0
-2877 2876 0
-2877 -2875 0
c Var 'aux673' direct represents '2' with '-2876'
2875 2877 -2876 0
c Encoding variable: aux674 with domain: int(0..3) (representing constraint ((x_00001_00005=3) + aux673))
c Both direct and order encoding.
c Var 'aux674' order represents '0' with '2878'
c Var 'aux674' direct represents '0' with '2878'
c Var 'aux674' order represents '1' with '2879'
-2878 2879 0
c Var 'aux674' direct represents '1' with '2880'
2878 -2879 2880 0
-2880 2879 0
-2880 -2878 0
c Var 'aux674' order represents '2' with '2881'
-2879 2881 0
c Var 'aux674' direct represents '2' with '2882'
2879 -2881 2882 0
-2882 2881 0
-2882 -2879 0
c Var 'aux674' direct represents '3' with '-2881'
2878 2880 2882 -2881 0
c Encoding variable: aux675 with domain: int(0..4) (representing constraint (aux670 + aux672))
c Both direct and order encoding.
c Var 'aux675' order represents '0' with '2883'
c Var 'aux675' direct represents '0' with '2883'
c Var 'aux675' order represents '1' with '2884'
-2883 2884 0
c Var 'aux675' direct represents '1' with '2885'
2883 -2884 2885 0
-2885 2884 0
-2885 -2883 0
c Var 'aux675' order represents '2' with '2886'
-2884 2886 0
c Var 'aux675' direct represents '2' with '2887'
2884 -2886 2887 0
-2887 2886 0
-2887 -2884 0
c Var 'aux675' order represents '3' with '2888'
-2886 2888 0
c Var 'aux675' direct represents '3' with '2889'
2886 -2888 2889 0
-2889 2888 0
-2889 -2886 0
c Var 'aux675' direct represents '4' with '-2888'
2883 2885 2887 2889 -2888 0
c Encoding variable: aux676 with domain: int(0..2) (representing constraint ((x_00003_00005=4) + (x_00005_00005=4)))
c Both direct and order encoding.
c Var 'aux676' order represents '0' with '2890'
c Var 'aux676' direct represents '0' with '2890'
c Var 'aux676' order represents '1' with '2891'
-2890 2891 0
c Var 'aux676' direct represents '1' with '2892'
2890 -2891 2892 0
-2892 2891 0
-2892 -2890 0
c Var 'aux676' direct represents '2' with '-2891'
2890 2892 -2891 0
c Encoding variable: aux677 with domain: int(0..2) (representing constraint ((x_00007_00005=4) + (x_00008_00005=4)))
c Both direct and order encoding.
c Var 'aux677' order represents '0' with '2893'
c Var 'aux677' direct represents '0' with '2893'
c Var 'aux677' order represents '1' with '2894'
-2893 2894 0
c Var 'aux677' direct represents '1' with '2895'
2893 -2894 2895 0
-2895 2894 0
-2895 -2893 0
c Var 'aux677' direct represents '2' with '-2894'
2893 2895 -2894 0
c Encoding variable: aux678 with domain: int(0..2) (representing constraint ((x_00002_00005=4) + (x_00006_00005=4)))
c Both direct and order encoding.
c Var 'aux678' order represents '0' with '2896'
c Var 'aux678' direct represents '0' with '2896'
c Var 'aux678' order represents '1' with '2897'
-2896 2897 0
c Var 'aux678' direct represents '1' with '2898'
2896 -2897 2898 0
-2898 2897 0
-2898 -2896 0
c Var 'aux678' direct represents '2' with '-2897'
2896 2898 -2897 0
c Encoding variable: aux679 with domain: int(0..2) (representing constraint ((x_00009_00005=4) + (x_00004_00005=4)))
c Both direct and order encoding.
c Var 'aux679' order represents '0' with '2899'
c Var 'aux679' direct represents '0' with '2899'
c Var 'aux679' order represents '1' with '2900'
-2899 2900 0
c Var 'aux679' direct represents '1' with '2901'
2899 -2900 2901 0
-2901 2900 0
-2901 -2899 0
c Var 'aux679' direct represents '2' with '-2900'
2899 2901 -2900 0
c Encoding variable: aux680 with domain: int(0..3) (representing constraint ((x_00001_00005=4) + aux679))
c Both direct and order encoding.
c Var 'aux680' order represents '0' with '2902'
c Var 'aux680' direct represents '0' with '2902'
c Var 'aux680' order represents '1' with '2903'
-2902 2903 0
c Var 'aux680' direct represents '1' with '2904'
2902 -2903 2904 0
-2904 2903 0
-2904 -2902 0
c Var 'aux680' order represents '2' with '2905'
-2903 2905 0
c Var 'aux680' direct represents '2' with '2906'
2903 -2905 2906 0
-2906 2905 0
-2906 -2903 0
c Var 'aux680' direct represents '3' with '-2905'
2902 2904 2906 -2905 0
c Encoding variable: aux681 with domain: int(0..4) (representing constraint (aux676 + aux678))
c Both direct and order encoding.
c Var 'aux681' order represents '0' with '2907'
c Var 'aux681' direct represents '0' with '2907'
c Var 'aux681' order represents '1' with '2908'
-2907 2908 0
c Var 'aux681' direct represents '1' with '2909'
2907 -2908 2909 0
-2909 2908 0
-2909 -2907 0
c Var 'aux681' order represents '2' with '2910'
-2908 2910 0
c Var 'aux681' direct represents '2' with '2911'
2908 -2910 2911 0
-2911 2910 0
-2911 -2908 0
c Var 'aux681' order represents '3' with '2912'
-2910 2912 0
c Var 'aux681' direct represents '3' with '2913'
2910 -2912 2913 0
-2913 2912 0
-2913 -2910 0
c Var 'aux681' direct represents '4' with '-2912'
2907 2909 2911 2913 -2912 0
c Encoding variable: aux682 with domain: int(0..2) (representing constraint ((x_00003_00005=5) + (x_00005_00005=5)))
c Both direct and order encoding.
c Var 'aux682' order represents '0' with '2914'
c Var 'aux682' direct represents '0' with '2914'
c Var 'aux682' order represents '1' with '2915'
-2914 2915 0
c Var 'aux682' direct represents '1' with '2916'
2914 -2915 2916 0
-2916 2915 0
-2916 -2914 0
c Var 'aux682' direct represents '2' with '-2915'
2914 2916 -2915 0
c Encoding variable: aux683 with domain: int(0..2) (representing constraint ((x_00007_00005=5) + (x_00008_00005=5)))
c Both direct and order encoding.
c Var 'aux683' order represents '0' with '2917'
c Var 'aux683' direct represents '0' with '2917'
c Var 'aux683' order represents '1' with '2918'
-2917 2918 0
c Var 'aux683' direct represents '1' with '2919'
2917 -2918 2919 0
-2919 2918 0
-2919 -2917 0
c Var 'aux683' direct represents '2' with '-2918'
2917 2919 -2918 0
c Encoding variable: aux684 with domain: int(0..2) (representing constraint ((x_00002_00005=5) + (x_00006_00005=5)))
c Both direct and order encoding.
c Var 'aux684' order represents '0' with '2920'
c Var 'aux684' direct represents '0' with '2920'
c Var 'aux684' order represents '1' with '2921'
-2920 2921 0
c Var 'aux684' direct represents '1' with '2922'
2920 -2921 2922 0
-2922 2921 0
-2922 -2920 0
c Var 'aux684' direct represents '2' with '-2921'
2920 2922 -2921 0
c Encoding variable: aux685 with domain: int(0..2) (representing constraint ((x_00009_00005=5) + (x_00004_00005=5)))
c Both direct and order encoding.
c Var 'aux685' order represents '0' with '2923'
c Var 'aux685' direct represents '0' with '2923'
c Var 'aux685' order represents '1' with '2924'
-2923 2924 0
c Var 'aux685' direct represents '1' with '2925'
2923 -2924 2925 0
-2925 2924 0
-2925 -2923 0
c Var 'aux685' direct represents '2' with '-2924'
2923 2925 -2924 0
c Encoding variable: aux686 with domain: int(0..3) (representing constraint ((x_00001_00005=5) + aux685))
c Both direct and order encoding.
c Var 'aux686' order represents '0' with '2926'
c Var 'aux686' direct represents '0' with '2926'
c Var 'aux686' order represents '1' with '2927'
-2926 2927 0
c Var 'aux686' direct represents '1' with '2928'
2926 -2927 2928 0
-2928 2927 0
-2928 -2926 0
c Var 'aux686' order represents '2' with '2929'
-2927 2929 0
c Var 'aux686' direct represents '2' with '2930'
2927 -2929 2930 0
-2930 2929 0
-2930 -2927 0
c Var 'aux686' direct represents '3' with '-2929'
2926 2928 2930 -2929 0
c Encoding variable: aux687 with domain: int(0..4) (representing constraint (aux682 + aux684))
c Both direct and order encoding.
c Var 'aux687' order represents '0' with '2931'
c Var 'aux687' direct represents '0' with '2931'
c Var 'aux687' order represents '1' with '2932'
-2931 2932 0
c Var 'aux687' direct represents '1' with '2933'
2931 -2932 2933 0
-2933 2932 0
-2933 -2931 0
c Var 'aux687' order represents '2' with '2934'
-2932 2934 0
c Var 'aux687' direct represents '2' with '2935'
2932 -2934 2935 0
-2935 2934 0
-2935 -2932 0
c Var 'aux687' order represents '3' with '2936'
-2934 2936 0
c Var 'aux687' direct represents '3' with '2937'
2934 -2936 2937 0
-2937 2936 0
-2937 -2934 0
c Var 'aux687' direct represents '4' with '-2936'
2931 2933 2935 2937 -2936 0
c Encoding variable: aux688 with domain: int(0..2) (representing constraint ((x_00003_00005=6) + (x_00005_00005=6)))
c Both direct and order encoding.
c Var 'aux688' order represents '0' with '2938'
c Var 'aux688' direct represents '0' with '2938'
c Var 'aux688' order represents '1' with '2939'
-2938 2939 0
c Var 'aux688' direct represents '1' with '2940'
2938 -2939 2940 0
-2940 2939 0
-2940 -2938 0
c Var 'aux688' direct represents '2' with '-2939'
2938 2940 -2939 0
c Encoding variable: aux689 with domain: int(0..2) (representing constraint ((x_00007_00005=6) + (x_00008_00005=6)))
c Both direct and order encoding.
c Var 'aux689' order represents '0' with '2941'
c Var 'aux689' direct represents '0' with '2941'
c Var 'aux689' order represents '1' with '2942'
-2941 2942 0
c Var 'aux689' direct represents '1' with '2943'
2941 -2942 2943 0
-2943 2942 0
-2943 -2941 0
c Var 'aux689' direct represents '2' with '-2942'
2941 2943 -2942 0
c Encoding variable: aux690 with domain: int(0..2) (representing constraint ((x_00002_00005=6) + (x_00006_00005=6)))
c Both direct and order encoding.
c Var 'aux690' order represents '0' with '2944'
c Var 'aux690' direct represents '0' with '2944'
c Var 'aux690' order represents '1' with '2945'
-2944 2945 0
c Var 'aux690' direct represents '1' with '2946'
2944 -2945 2946 0
-2946 2945 0
-2946 -2944 0
c Var 'aux690' direct represents '2' with '-2945'
2944 2946 -2945 0
c Encoding variable: aux691 with domain: int(0..2) (representing constraint ((x_00009_00005=6) + (x_00004_00005=6)))
c Both direct and order encoding.
c Var 'aux691' order represents '0' with '2947'
c Var 'aux691' direct represents '0' with '2947'
c Var 'aux691' order represents '1' with '2948'
-2947 2948 0
c Var 'aux691' direct represents '1' with '2949'
2947 -2948 2949 0
-2949 2948 0
-2949 -2947 0
c Var 'aux691' direct represents '2' with '-2948'
2947 2949 -2948 0
c Encoding variable: aux692 with domain: int(0..3) (representing constraint ((x_00001_00005=6) + aux691))
c Both direct and order encoding.
c Var 'aux692' order represents '0' with '2950'
c Var 'aux692' direct represents '0' with '2950'
c Var 'aux692' order represents '1' with '2951'
-2950 2951 0
c Var 'aux692' direct represents '1' with '2952'
2950 -2951 2952 0
-2952 2951 0
-2952 -2950 0
c Var 'aux692' order represents '2' with '2953'
-2951 2953 0
c Var 'aux692' direct represents '2' with '2954'
2951 -2953 2954 0
-2954 2953 0
-2954 -2951 0
c Var 'aux692' direct represents '3' with '-2953'
2950 2952 2954 -2953 0
c Encoding variable: aux693 with domain: int(0..4) (representing constraint (aux688 + aux690))
c Both direct and order encoding.
c Var 'aux693' order represents '0' with '2955'
c Var 'aux693' direct represents '0' with '2955'
c Var 'aux693' order represents '1' with '2956'
-2955 2956 0
c Var 'aux693' direct represents '1' with '2957'
2955 -2956 2957 0
-2957 2956 0
-2957 -2955 0
c Var 'aux693' order represents '2' with '2958'
-2956 2958 0
c Var 'aux693' direct represents '2' with '2959'
2956 -2958 2959 0
-2959 2958 0
-2959 -2956 0
c Var 'aux693' order represents '3' with '2960'
-2958 2960 0
c Var 'aux693' direct represents '3' with '2961'
2958 -2960 2961 0
-2961 2960 0
-2961 -2958 0
c Var 'aux693' direct represents '4' with '-2960'
2955 2957 2959 2961 -2960 0
c Encoding variable: aux694 with domain: int(0..2) (representing constraint ((x_00003_00005=7) + (x_00005_00005=7)))
c Both direct and order encoding.
c Var 'aux694' order represents '0' with '2962'
c Var 'aux694' direct represents '0' with '2962'
c Var 'aux694' order represents '1' with '2963'
-2962 2963 0
c Var 'aux694' direct represents '1' with '2964'
2962 -2963 2964 0
-2964 2963 0
-2964 -2962 0
c Var 'aux694' direct represents '2' with '-2963'
2962 2964 -2963 0
c Encoding variable: aux695 with domain: int(0..2) (representing constraint ((x_00007_00005=7) + (x_00008_00005=7)))
c Both direct and order encoding.
c Var 'aux695' order represents '0' with '2965'
c Var 'aux695' direct represents '0' with '2965'
c Var 'aux695' order represents '1' with '2966'
-2965 2966 0
c Var 'aux695' direct represents '1' with '2967'
2965 -2966 2967 0
-2967 2966 0
-2967 -2965 0
c Var 'aux695' direct represents '2' with '-2966'
2965 2967 -2966 0
c Encoding variable: aux696 with domain: int(0..2) (representing constraint ((x_00002_00005=7) + (x_00006_00005=7)))
c Both direct and order encoding.
c Var 'aux696' order represents '0' with '2968'
c Var 'aux696' direct represents '0' with '2968'
c Var 'aux696' order represents '1' with '2969'
-2968 2969 0
c Var 'aux696' direct represents '1' with '2970'
2968 -2969 2970 0
-2970 2969 0
-2970 -2968 0
c Var 'aux696' direct represents '2' with '-2969'
2968 2970 -2969 0
c Encoding variable: aux697 with domain: int(0..2) (representing constraint ((x_00009_00005=7) + (x_00004_00005=7)))
c Both direct and order encoding.
c Var 'aux697' order represents '0' with '2971'
c Var 'aux697' direct represents '0' with '2971'
c Var 'aux697' order represents '1' with '2972'
-2971 2972 0
c Var 'aux697' direct represents '1' with '2973'
2971 -2972 2973 0
-2973 2972 0
-2973 -2971 0
c Var 'aux697' direct represents '2' with '-2972'
2971 2973 -2972 0
c Encoding variable: aux698 with domain: int(0..3) (representing constraint ((x_00001_00005=7) + aux697))
c Both direct and order encoding.
c Var 'aux698' order represents '0' with '2974'
c Var 'aux698' direct represents '0' with '2974'
c Var 'aux698' order represents '1' with '2975'
-2974 2975 0
c Var 'aux698' direct represents '1' with '2976'
2974 -2975 2976 0
-2976 2975 0
-2976 -2974 0
c Var 'aux698' order represents '2' with '2977'
-2975 2977 0
c Var 'aux698' direct represents '2' with '2978'
2975 -2977 2978 0
-2978 2977 0
-2978 -2975 0
c Var 'aux698' direct represents '3' with '-2977'
2974 2976 2978 -2977 0
c Encoding variable: aux699 with domain: int(0..4) (representing constraint (aux694 + aux696))
c Both direct and order encoding.
c Var 'aux699' order represents '0' with '2979'
c Var 'aux699' direct represents '0' with '2979'
c Var 'aux699' order represents '1' with '2980'
-2979 2980 0
c Var 'aux699' direct represents '1' with '2981'
2979 -2980 2981 0
-2981 2980 0
-2981 -2979 0
c Var 'aux699' order represents '2' with '2982'
-2980 2982 0
c Var 'aux699' direct represents '2' with '2983'
2980 -2982 2983 0
-2983 2982 0
-2983 -2980 0
c Var 'aux699' order represents '3' with '2984'
-2982 2984 0
c Var 'aux699' direct represents '3' with '2985'
2982 -2984 2985 0
-2985 2984 0
-2985 -2982 0
c Var 'aux699' direct represents '4' with '-2984'
2979 2981 2983 2985 -2984 0
c Encoding variable: aux700 with domain: int(0..2) (representing constraint ((x_00003_00005=8) + (x_00005_00005=8)))
c Both direct and order encoding.
c Var 'aux700' order represents '0' with '2986'
c Var 'aux700' direct represents '0' with '2986'
c Var 'aux700' order represents '1' with '2987'
-2986 2987 0
c Var 'aux700' direct represents '1' with '2988'
2986 -2987 2988 0
-2988 2987 0
-2988 -2986 0
c Var 'aux700' direct represents '2' with '-2987'
2986 2988 -2987 0
c Encoding variable: aux701 with domain: int(0..2) (representing constraint ((x_00007_00005=8) + (x_00008_00005=8)))
c Both direct and order encoding.
c Var 'aux701' order represents '0' with '2989'
c Var 'aux701' direct represents '0' with '2989'
c Var 'aux701' order represents '1' with '2990'
-2989 2990 0
c Var 'aux701' direct represents '1' with '2991'
2989 -2990 2991 0
-2991 2990 0
-2991 -2989 0
c Var 'aux701' direct represents '2' with '-2990'
2989 2991 -2990 0
c Encoding variable: aux702 with domain: int(0..2) (representing constraint ((x_00002_00005=8) + (x_00006_00005=8)))
c Both direct and order encoding.
c Var 'aux702' order represents '0' with '2992'
c Var 'aux702' direct represents '0' with '2992'
c Var 'aux702' order represents '1' with '2993'
-2992 2993 0
c Var 'aux702' direct represents '1' with '2994'
2992 -2993 2994 0
-2994 2993 0
-2994 -2992 0
c Var 'aux702' direct represents '2' with '-2993'
2992 2994 -2993 0
c Encoding variable: aux703 with domain: int(0..2) (representing constraint ((x_00009_00005=8) + (x_00004_00005=8)))
c Both direct and order encoding.
c Var 'aux703' order represents '0' with '2995'
c Var 'aux703' direct represents '0' with '2995'
c Var 'aux703' order represents '1' with '2996'
-2995 2996 0
c Var 'aux703' direct represents '1' with '2997'
2995 -2996 2997 0
-2997 2996 0
-2997 -2995 0
c Var 'aux703' direct represents '2' with '-2996'
2995 2997 -2996 0
c Encoding variable: aux704 with domain: int(0..3) (representing constraint ((x_00001_00005=8) + aux703))
c Both direct and order encoding.
c Var 'aux704' order represents '0' with '2998'
c Var 'aux704' direct represents '0' with '2998'
c Var 'aux704' order represents '1' with '2999'
-2998 2999 0
c Var 'aux704' direct represents '1' with '3000'
2998 -2999 3000 0
-3000 2999 0
-3000 -2998 0
c Var 'aux704' order represents '2' with '3001'
-2999 3001 0
c Var 'aux704' direct represents '2' with '3002'
2999 -3001 3002 0
-3002 3001 0
-3002 -2999 0
c Var 'aux704' direct represents '3' with '-3001'
2998 3000 3002 -3001 0
c Encoding variable: aux705 with domain: int(0..4) (representing constraint (aux700 + aux702))
c Both direct and order encoding.
c Var 'aux705' order represents '0' with '3003'
c Var 'aux705' direct represents '0' with '3003'
c Var 'aux705' order represents '1' with '3004'
-3003 3004 0
c Var 'aux705' direct represents '1' with '3005'
3003 -3004 3005 0
-3005 3004 0
-3005 -3003 0
c Var 'aux705' order represents '2' with '3006'
-3004 3006 0
c Var 'aux705' direct represents '2' with '3007'
3004 -3006 3007 0
-3007 3006 0
-3007 -3004 0
c Var 'aux705' order represents '3' with '3008'
-3006 3008 0
c Var 'aux705' direct represents '3' with '3009'
3006 -3008 3009 0
-3009 3008 0
-3009 -3006 0
c Var 'aux705' direct represents '4' with '-3008'
3003 3005 3007 3009 -3008 0
c Encoding variable: aux706 with domain: int(0..2) (representing constraint ((x_00003_00005=9) + (x_00005_00005=9)))
c Both direct and order encoding.
c Var 'aux706' order represents '0' with '3010'
c Var 'aux706' direct represents '0' with '3010'
c Var 'aux706' order represents '1' with '3011'
-3010 3011 0
c Var 'aux706' direct represents '1' with '3012'
3010 -3011 3012 0
-3012 3011 0
-3012 -3010 0
c Var 'aux706' direct represents '2' with '-3011'
3010 3012 -3011 0
c Encoding variable: aux707 with domain: int(0..2) (representing constraint ((x_00007_00005=9) + (x_00008_00005=9)))
c Both direct and order encoding.
c Var 'aux707' order represents '0' with '3013'
c Var 'aux707' direct represents '0' with '3013'
c Var 'aux707' order represents '1' with '3014'
-3013 3014 0
c Var 'aux707' direct represents '1' with '3015'
3013 -3014 3015 0
-3015 3014 0
-3015 -3013 0
c Var 'aux707' direct represents '2' with '-3014'
3013 3015 -3014 0
c Encoding variable: aux708 with domain: int(0..2) (representing constraint ((x_00002_00005=9) + (x_00006_00005=9)))
c Both direct and order encoding.
c Var 'aux708' order represents '0' with '3016'
c Var 'aux708' direct represents '0' with '3016'
c Var 'aux708' order represents '1' with '3017'
-3016 3017 0
c Var 'aux708' direct represents '1' with '3018'
3016 -3017 3018 0
-3018 3017 0
-3018 -3016 0
c Var 'aux708' direct represents '2' with '-3017'
3016 3018 -3017 0
c Encoding variable: aux709 with domain: int(0..2) (representing constraint ((x_00009_00005=9) + (x_00004_00005=9)))
c Both direct and order encoding.
c Var 'aux709' order represents '0' with '3019'
c Var 'aux709' direct represents '0' with '3019'
c Var 'aux709' order represents '1' with '3020'
-3019 3020 0
c Var 'aux709' direct represents '1' with '3021'
3019 -3020 3021 0
-3021 3020 0
-3021 -3019 0
c Var 'aux709' direct represents '2' with '-3020'
3019 3021 -3020 0
c Encoding variable: aux710 with domain: int(0..3) (representing constraint ((x_00001_00005=9) + aux709))
c Both direct and order encoding.
c Var 'aux710' order represents '0' with '3022'
c Var 'aux710' direct represents '0' with '3022'
c Var 'aux710' order represents '1' with '3023'
-3022 3023 0
c Var 'aux710' direct represents '1' with '3024'
3022 -3023 3024 0
-3024 3023 0
-3024 -3022 0
c Var 'aux710' order represents '2' with '3025'
-3023 3025 0
c Var 'aux710' direct represents '2' with '3026'
3023 -3025 3026 0
-3026 3025 0
-3026 -3023 0
c Var 'aux710' direct represents '3' with '-3025'
3022 3024 3026 -3025 0
c Encoding variable: aux711 with domain: int(0..4) (representing constraint (aux706 + aux708))
c Both direct and order encoding.
c Var 'aux711' order represents '0' with '3027'
c Var 'aux711' direct represents '0' with '3027'
c Var 'aux711' order represents '1' with '3028'
-3027 3028 0
c Var 'aux711' direct represents '1' with '3029'
3027 -3028 3029 0
-3029 3028 0
-3029 -3027 0
c Var 'aux711' order represents '2' with '3030'
-3028 3030 0
c Var 'aux711' direct represents '2' with '3031'
3028 -3030 3031 0
-3031 3030 0
-3031 -3028 0
c Var 'aux711' order represents '3' with '3032'
-3030 3032 0
c Var 'aux711' direct represents '3' with '3033'
3030 -3032 3033 0
-3033 3032 0
-3033 -3030 0
c Var 'aux711' direct represents '4' with '-3032'
3027 3029 3031 3033 -3032 0
c Encoding variable: aux712 with domain: int(0..2) (representing constraint ((x_00003_00006=1) + (x_00005_00006=1)))
c Both direct and order encoding.
c Var 'aux712' order represents '0' with '3034'
c Var 'aux712' direct represents '0' with '3034'
c Var 'aux712' order represents '1' with '3035'
-3034 3035 0
c Var 'aux712' direct represents '1' with '3036'
3034 -3035 3036 0
-3036 3035 0
-3036 -3034 0
c Var 'aux712' direct represents '2' with '-3035'
3034 3036 -3035 0
c Encoding variable: aux713 with domain: int(0..2) (representing constraint ((x_00007_00006=1) + (x_00008_00006=1)))
c Both direct and order encoding.
c Var 'aux713' order represents '0' with '3037'
c Var 'aux713' direct represents '0' with '3037'
c Var 'aux713' order represents '1' with '3038'
-3037 3038 0
c Var 'aux713' direct represents '1' with '3039'
3037 -3038 3039 0
-3039 3038 0
-3039 -3037 0
c Var 'aux713' direct represents '2' with '-3038'
3037 3039 -3038 0
c Encoding variable: aux714 with domain: int(0..2) (representing constraint ((x_00002_00006=1) + (x_00006_00006=1)))
c Both direct and order encoding.
c Var 'aux714' order represents '0' with '3040'
c Var 'aux714' direct represents '0' with '3040'
c Var 'aux714' order represents '1' with '3041'
-3040 3041 0
c Var 'aux714' direct represents '1' with '3042'
3040 -3041 3042 0
-3042 3041 0
-3042 -3040 0
c Var 'aux714' direct represents '2' with '-3041'
3040 3042 -3041 0
c Encoding variable: aux715 with domain: int(0..2) (representing constraint ((x_00009_00006=1) + (x_00004_00006=1)))
c Both direct and order encoding.
c Var 'aux715' order represents '0' with '3043'
c Var 'aux715' direct represents '0' with '3043'
c Var 'aux715' order represents '1' with '3044'
-3043 3044 0
c Var 'aux715' direct represents '1' with '3045'
3043 -3044 3045 0
-3045 3044 0
-3045 -3043 0
c Var 'aux715' direct represents '2' with '-3044'
3043 3045 -3044 0
c Encoding variable: aux716 with domain: int(0..3) (representing constraint ((x_00001_00006=1) + aux715))
c Both direct and order encoding.
c Var 'aux716' order represents '0' with '3046'
c Var 'aux716' direct represents '0' with '3046'
c Var 'aux716' order represents '1' with '3047'
-3046 3047 0
c Var 'aux716' direct represents '1' with '3048'
3046 -3047 3048 0
-3048 3047 0
-3048 -3046 0
c Var 'aux716' order represents '2' with '3049'
-3047 3049 0
c Var 'aux716' direct represents '2' with '3050'
3047 -3049 3050 0
-3050 3049 0
-3050 -3047 0
c Var 'aux716' direct represents '3' with '-3049'
3046 3048 3050 -3049 0
c Encoding variable: aux717 with domain: int(0..4) (representing constraint (aux712 + aux714))
c Both direct and order encoding.
c Var 'aux717' order represents '0' with '3051'
c Var 'aux717' direct represents '0' with '3051'
c Var 'aux717' order represents '1' with '3052'
-3051 3052 0
c Var 'aux717' direct represents '1' with '3053'
3051 -3052 3053 0
-3053 3052 0
-3053 -3051 0
c Var 'aux717' order represents '2' with '3054'
-3052 3054 0
c Var 'aux717' direct represents '2' with '3055'
3052 -3054 3055 0
-3055 3054 0
-3055 -3052 0
c Var 'aux717' order represents '3' with '3056'
-3054 3056 0
c Var 'aux717' direct represents '3' with '3057'
3054 -3056 3057 0
-3057 3056 0
-3057 -3054 0
c Var 'aux717' direct represents '4' with '-3056'
3051 3053 3055 3057 -3056 0
c Encoding variable: aux718 with domain: int(0..2) (representing constraint ((x_00003_00006=2) + (x_00005_00006=2)))
c Both direct and order encoding.
c Var 'aux718' order represents '0' with '3058'
c Var 'aux718' direct represents '0' with '3058'
c Var 'aux718' order represents '1' with '3059'
-3058 3059 0
c Var 'aux718' direct represents '1' with '3060'
3058 -3059 3060 0
-3060 3059 0
-3060 -3058 0
c Var 'aux718' direct represents '2' with '-3059'
3058 3060 -3059 0
c Encoding variable: aux719 with domain: int(0..2) (representing constraint ((x_00007_00006=2) + (x_00008_00006=2)))
c Both direct and order encoding.
c Var 'aux719' order represents '0' with '3061'
c Var 'aux719' direct represents '0' with '3061'
c Var 'aux719' order represents '1' with '3062'
-3061 3062 0
c Var 'aux719' direct represents '1' with '3063'
3061 -3062 3063 0
-3063 3062 0
-3063 -3061 0
c Var 'aux719' direct represents '2' with '-3062'
3061 3063 -3062 0
c Encoding variable: aux720 with domain: int(0..2) (representing constraint ((x_00002_00006=2) + (x_00006_00006=2)))
c Both direct and order encoding.
c Var 'aux720' order represents '0' with '3064'
c Var 'aux720' direct represents '0' with '3064'
c Var 'aux720' order represents '1' with '3065'
-3064 3065 0
c Var 'aux720' direct represents '1' with '3066'
3064 -3065 3066 0
-3066 3065 0
-3066 -3064 0
c Var 'aux720' direct represents '2' with '-3065'
3064 3066 -3065 0
c Encoding variable: aux721 with domain: int(0..2) (representing constraint ((x_00009_00006=2) + (x_00004_00006=2)))
c Both direct and order encoding.
c Var 'aux721' order represents '0' with '3067'
c Var 'aux721' direct represents '0' with '3067'
c Var 'aux721' order represents '1' with '3068'
-3067 3068 0
c Var 'aux721' direct represents '1' with '3069'
3067 -3068 3069 0
-3069 3068 0
-3069 -3067 0
c Var 'aux721' direct represents '2' with '-3068'
3067 3069 -3068 0
c Encoding variable: aux722 with domain: int(0..3) (representing constraint ((x_00001_00006=2) + aux721))
c Both direct and order encoding.
c Var 'aux722' order represents '0' with '3070'
c Var 'aux722' direct represents '0' with '3070'
c Var 'aux722' order represents '1' with '3071'
-3070 3071 0
c Var 'aux722' direct represents '1' with '3072'
3070 -3071 3072 0
-3072 3071 0
-3072 -3070 0
c Var 'aux722' order represents '2' with '3073'
-3071 3073 0
c Var 'aux722' direct represents '2' with '3074'
3071 -3073 3074 0
-3074 3073 0
-3074 -3071 0
c Var 'aux722' direct represents '3' with '-3073'
3070 3072 3074 -3073 0
c Encoding variable: aux723 with domain: int(0..4) (representing constraint (aux718 + aux720))
c Both direct and order encoding.
c Var 'aux723' order represents '0' with '3075'
c Var 'aux723' direct represents '0' with '3075'
c Var 'aux723' order represents '1' with '3076'
-3075 3076 0
c Var 'aux723' direct represents '1' with '3077'
3075 -3076 3077 0
-3077 3076 0
-3077 -3075 0
c Var 'aux723' order represents '2' with '3078'
-3076 3078 0
c Var 'aux723' direct represents '2' with '3079'
3076 -3078 3079 0
-3079 3078 0
-3079 -3076 0
c Var 'aux723' order represents '3' with '3080'
-3078 3080 0
c Var 'aux723' direct represents '3' with '3081'
3078 -3080 3081 0
-3081 3080 0
-3081 -3078 0
c Var 'aux723' direct represents '4' with '-3080'
3075 3077 3079 3081 -3080 0
c Encoding variable: aux724 with domain: int(0..2) (representing constraint ((x_00003_00006=3) + (x_00005_00006=3)))
c Both direct and order encoding.
c Var 'aux724' order represents '0' with '3082'
c Var 'aux724' direct represents '0' with '3082'
c Var 'aux724' order represents '1' with '3083'
-3082 3083 0
c Var 'aux724' direct represents '1' with '3084'
3082 -3083 3084 0
-3084 3083 0
-3084 -3082 0
c Var 'aux724' direct represents '2' with '-3083'
3082 3084 -3083 0
c Encoding variable: aux725 with domain: int(0..2) (representing constraint ((x_00007_00006=3) + (x_00008_00006=3)))
c Both direct and order encoding.
c Var 'aux725' order represents '0' with '3085'
c Var 'aux725' direct represents '0' with '3085'
c Var 'aux725' order represents '1' with '3086'
-3085 3086 0
c Var 'aux725' direct represents '1' with '3087'
3085 -3086 3087 0
-3087 3086 0
-3087 -3085 0
c Var 'aux725' direct represents '2' with '-3086'
3085 3087 -3086 0
c Encoding variable: aux726 with domain: int(0..2) (representing constraint ((x_00002_00006=3) + (x_00006_00006=3)))
c Both direct and order encoding.
c Var 'aux726' order represents '0' with '3088'
c Var 'aux726' direct represents '0' with '3088'
c Var 'aux726' order represents '1' with '3089'
-3088 3089 0
c Var 'aux726' direct represents '1' with '3090'
3088 -3089 3090 0
-3090 3089 0
-3090 -3088 0
c Var 'aux726' direct represents '2' with '-3089'
3088 3090 -3089 0
c Encoding variable: aux727 with domain: int(0..2) (representing constraint ((x_00009_00006=3) + (x_00004_00006=3)))
c Both direct and order encoding.
c Var 'aux727' order represents '0' with '3091'
c Var 'aux727' direct represents '0' with '3091'
c Var 'aux727' order represents '1' with '3092'
-3091 3092 0
c Var 'aux727' direct represents '1' with '3093'
3091 -3092 3093 0
-3093 3092 0
-3093 -3091 0
c Var 'aux727' direct represents '2' with '-3092'
3091 3093 -3092 0
c Encoding variable: aux728 with domain: int(0..3) (representing constraint ((x_00001_00006=3) + aux727))
c Both direct and order encoding.
c Var 'aux728' order represents '0' with '3094'
c Var 'aux728' direct represents '0' with '3094'
c Var 'aux728' order represents '1' with '3095'
-3094 3095 0
c Var 'aux728' direct represents '1' with '3096'
3094 -3095 3096 0
-3096 3095 0
-3096 -3094 0
c Var 'aux728' order represents '2' with '3097'
-3095 3097 0
c Var 'aux728' direct represents '2' with '3098'
3095 -3097 3098 0
-3098 3097 0
-3098 -3095 0
c Var 'aux728' direct represents '3' with '-3097'
3094 3096 3098 -3097 0
c Encoding variable: aux729 with domain: int(0..4) (representing constraint (aux724 + aux726))
c Both direct and order encoding.
c Var 'aux729' order represents '0' with '3099'
c Var 'aux729' direct represents '0' with '3099'
c Var 'aux729' order represents '1' with '3100'
-3099 3100 0
c Var 'aux729' direct represents '1' with '3101'
3099 -3100 3101 0
-3101 3100 0
-3101 -3099 0
c Var 'aux729' order represents '2' with '3102'
-3100 3102 0
c Var 'aux729' direct represents '2' with '3103'
3100 -3102 3103 0
-3103 3102 0
-3103 -3100 0
c Var 'aux729' order represents '3' with '3104'
-3102 3104 0
c Var 'aux729' direct represents '3' with '3105'
3102 -3104 3105 0
-3105 3104 0
-3105 -3102 0
c Var 'aux729' direct represents '4' with '-3104'
3099 3101 3103 3105 -3104 0
c Encoding variable: aux730 with domain: int(0..2) (representing constraint ((x_00003_00006=4) + (x_00005_00006=4)))
c Both direct and order encoding.
c Var 'aux730' order represents '0' with '3106'
c Var 'aux730' direct represents '0' with '3106'
c Var 'aux730' order represents '1' with '3107'
-3106 3107 0
c Var 'aux730' direct represents '1' with '3108'
3106 -3107 3108 0
-3108 3107 0
-3108 -3106 0
c Var 'aux730' direct represents '2' with '-3107'
3106 3108 -3107 0
c Encoding variable: aux731 with domain: int(0..2) (representing constraint ((x_00007_00006=4) + (x_00008_00006=4)))
c Both direct and order encoding.
c Var 'aux731' order represents '0' with '3109'
c Var 'aux731' direct represents '0' with '3109'
c Var 'aux731' order represents '1' with '3110'
-3109 3110 0
c Var 'aux731' direct represents '1' with '3111'
3109 -3110 3111 0
-3111 3110 0
-3111 -3109 0
c Var 'aux731' direct represents '2' with '-3110'
3109 3111 -3110 0
c Encoding variable: aux732 with domain: int(0..2) (representing constraint ((x_00002_00006=4) + (x_00006_00006=4)))
c Both direct and order encoding.
c Var 'aux732' order represents '0' with '3112'
c Var 'aux732' direct represents '0' with '3112'
c Var 'aux732' order represents '1' with '3113'
-3112 3113 0
c Var 'aux732' direct represents '1' with '3114'
3112 -3113 3114 0
-3114 3113 0
-3114 -3112 0
c Var 'aux732' direct represents '2' with '-3113'
3112 3114 -3113 0
c Encoding variable: aux733 with domain: int(0..2) (representing constraint ((x_00009_00006=4) + (x_00004_00006=4)))
c Both direct and order encoding.
c Var 'aux733' order represents '0' with '3115'
c Var 'aux733' direct represents '0' with '3115'
c Var 'aux733' order represents '1' with '3116'
-3115 3116 0
c Var 'aux733' direct represents '1' with '3117'
3115 -3116 3117 0
-3117 3116 0
-3117 -3115 0
c Var 'aux733' direct represents '2' with '-3116'
3115 3117 -3116 0
c Encoding variable: aux734 with domain: int(0..3) (representing constraint ((x_00001_00006=4) + aux733))
c Both direct and order encoding.
c Var 'aux734' order represents '0' with '3118'
c Var 'aux734' direct represents '0' with '3118'
c Var 'aux734' order represents '1' with '3119'
-3118 3119 0
c Var 'aux734' direct represents '1' with '3120'
3118 -3119 3120 0
-3120 3119 0
-3120 -3118 0
c Var 'aux734' order represents '2' with '3121'
-3119 3121 0
c Var 'aux734' direct represents '2' with '3122'
3119 -3121 3122 0
-3122 3121 0
-3122 -3119 0
c Var 'aux734' direct represents '3' with '-3121'
3118 3120 3122 -3121 0
c Encoding variable: aux735 with domain: int(0..4) (representing constraint (aux730 + aux732))
c Both direct and order encoding.
c Var 'aux735' order represents '0' with '3123'
c Var 'aux735' direct represents '0' with '3123'
c Var 'aux735' order represents '1' with '3124'
-3123 3124 0
c Var 'aux735' direct represents '1' with '3125'
3123 -3124 3125 0
-3125 3124 0
-3125 -3123 0
c Var 'aux735' order represents '2' with '3126'
-3124 3126 0
c Var 'aux735' direct represents '2' with '3127'
3124 -3126 3127 0
-3127 3126 0
-3127 -3124 0
c Var 'aux735' order represents '3' with '3128'
-3126 3128 0
c Var 'aux735' direct represents '3' with '3129'
3126 -3128 3129 0
-3129 3128 0
-3129 -3126 0
c Var 'aux735' direct represents '4' with '-3128'
3123 3125 3127 3129 -3128 0
c Encoding variable: aux736 with domain: int(0..2) (representing constraint ((x_00003_00006=5) + (x_00005_00006=5)))
c Both direct and order encoding.
c Var 'aux736' order represents '0' with '3130'
c Var 'aux736' direct represents '0' with '3130'
c Var 'aux736' order represents '1' with '3131'
-3130 3131 0
c Var 'aux736' direct represents '1' with '3132'
3130 -3131 3132 0
-3132 3131 0
-3132 -3130 0
c Var 'aux736' direct represents '2' with '-3131'
3130 3132 -3131 0
c Encoding variable: aux737 with domain: int(0..2) (representing constraint ((x_00007_00006=5) + (x_00008_00006=5)))
c Both direct and order encoding.
c Var 'aux737' order represents '0' with '3133'
c Var 'aux737' direct represents '0' with '3133'
c Var 'aux737' order represents '1' with '3134'
-3133 3134 0
c Var 'aux737' direct represents '1' with '3135'
3133 -3134 3135 0
-3135 3134 0
-3135 -3133 0
c Var 'aux737' direct represents '2' with '-3134'
3133 3135 -3134 0
c Encoding variable: aux738 with domain: int(0..2) (representing constraint ((x_00002_00006=5) + (x_00006_00006=5)))
c Both direct and order encoding.
c Var 'aux738' order represents '0' with '3136'
c Var 'aux738' direct represents '0' with '3136'
c Var 'aux738' order represents '1' with '3137'
-3136 3137 0
c Var 'aux738' direct represents '1' with '3138'
3136 -3137 3138 0
-3138 3137 0
-3138 -3136 0
c Var 'aux738' direct represents '2' with '-3137'
3136 3138 -3137 0
c Encoding variable: aux739 with domain: int(0..2) (representing constraint ((x_00009_00006=5) + (x_00004_00006=5)))
c Both direct and order encoding.
c Var 'aux739' order represents '0' with '3139'
c Var 'aux739' direct represents '0' with '3139'
c Var 'aux739' order represents '1' with '3140'
-3139 3140 0
c Var 'aux739' direct represents '1' with '3141'
3139 -3140 3141 0
-3141 3140 0
-3141 -3139 0
c Var 'aux739' direct represents '2' with '-3140'
3139 3141 -3140 0
c Encoding variable: aux740 with domain: int(0..3) (representing constraint ((x_00001_00006=5) + aux739))
c Both direct and order encoding.
c Var 'aux740' order represents '0' with '3142'
c Var 'aux740' direct represents '0' with '3142'
c Var 'aux740' order represents '1' with '3143'
-3142 3143 0
c Var 'aux740' direct represents '1' with '3144'
3142 -3143 3144 0
-3144 3143 0
-3144 -3142 0
c Var 'aux740' order represents '2' with '3145'
-3143 3145 0
c Var 'aux740' direct represents '2' with '3146'
3143 -3145 3146 0
-3146 3145 0
-3146 -3143 0
c Var 'aux740' direct represents '3' with '-3145'
3142 3144 3146 -3145 0
c Encoding variable: aux741 with domain: int(0..4) (representing constraint (aux736 + aux738))
c Both direct and order encoding.
c Var 'aux741' order represents '0' with '3147'
c Var 'aux741' direct represents '0' with '3147'
c Var 'aux741' order represents '1' with '3148'
-3147 3148 0
c Var 'aux741' direct represents '1' with '3149'
3147 -3148 3149 0
-3149 3148 0
-3149 -3147 0
c Var 'aux741' order represents '2' with '3150'
-3148 3150 0
c Var 'aux741' direct represents '2' with '3151'
3148 -3150 3151 0
-3151 3150 0
-3151 -3148 0
c Var 'aux741' order represents '3' with '3152'
-3150 3152 0
c Var 'aux741' direct represents '3' with '3153'
3150 -3152 3153 0
-3153 3152 0
-3153 -3150 0
c Var 'aux741' direct represents '4' with '-3152'
3147 3149 3151 3153 -3152 0
c Encoding variable: aux742 with domain: int(0..2) (representing constraint ((x_00003_00006=6) + (x_00005_00006=6)))
c Both direct and order encoding.
c Var 'aux742' order represents '0' with '3154'
c Var 'aux742' direct represents '0' with '3154'
c Var 'aux742' order represents '1' with '3155'
-3154 3155 0
c Var 'aux742' direct represents '1' with '3156'
3154 -3155 3156 0
-3156 3155 0
-3156 -3154 0
c Var 'aux742' direct represents '2' with '-3155'
3154 3156 -3155 0
c Encoding variable: aux743 with domain: int(0..2) (representing constraint ((x_00007_00006=6) + (x_00008_00006=6)))
c Both direct and order encoding.
c Var 'aux743' order represents '0' with '3157'
c Var 'aux743' direct represents '0' with '3157'
c Var 'aux743' order represents '1' with '3158'
-3157 3158 0
c Var 'aux743' direct represents '1' with '3159'
3157 -3158 3159 0
-3159 3158 0
-3159 -3157 0
c Var 'aux743' direct represents '2' with '-3158'
3157 3159 -3158 0
c Encoding variable: aux744 with domain: int(0..2) (representing constraint ((x_00002_00006=6) + (x_00006_00006=6)))
c Both direct and order encoding.
c Var 'aux744' order represents '0' with '3160'
c Var 'aux744' direct represents '0' with '3160'
c Var 'aux744' order represents '1' with '3161'
-3160 3161 0
c Var 'aux744' direct represents '1' with '3162'
3160 -3161 3162 0
-3162 3161 0
-3162 -3160 0
c Var 'aux744' direct represents '2' with '-3161'
3160 3162 -3161 0
c Encoding variable: aux745 with domain: int(0..2) (representing constraint ((x_00009_00006=6) + (x_00004_00006=6)))
c Both direct and order encoding.
c Var 'aux745' order represents '0' with '3163'
c Var 'aux745' direct represents '0' with '3163'
c Var 'aux745' order represents '1' with '3164'
-3163 3164 0
c Var 'aux745' direct represents '1' with '3165'
3163 -3164 3165 0
-3165 3164 0
-3165 -3163 0
c Var 'aux745' direct represents '2' with '-3164'
3163 3165 -3164 0
c Encoding variable: aux746 with domain: int(0..3) (representing constraint ((x_00001_00006=6) + aux745))
c Both direct and order encoding.
c Var 'aux746' order represents '0' with '3166'
c Var 'aux746' direct represents '0' with '3166'
c Var 'aux746' order represents '1' with '3167'
-3166 3167 0
c Var 'aux746' direct represents '1' with '3168'
3166 -3167 3168 0
-3168 3167 0
-3168 -3166 0
c Var 'aux746' order represents '2' with '3169'
-3167 3169 0
c Var 'aux746' direct represents '2' with '3170'
3167 -3169 3170 0
-3170 3169 0
-3170 -3167 0
c Var 'aux746' direct represents '3' with '-3169'
3166 3168 3170 -3169 0
c Encoding variable: aux747 with domain: int(0..4) (representing constraint (aux742 + aux744))
c Both direct and order encoding.
c Var 'aux747' order represents '0' with '3171'
c Var 'aux747' direct represents '0' with '3171'
c Var 'aux747' order represents '1' with '3172'
-3171 3172 0
c Var 'aux747' direct represents '1' with '3173'
3171 -3172 3173 0
-3173 3172 0
-3173 -3171 0
c Var 'aux747' order represents '2' with '3174'
-3172 3174 0
c Var 'aux747' direct represents '2' with '3175'
3172 -3174 3175 0
-3175 3174 0
-3175 -3172 0
c Var 'aux747' order represents '3' with '3176'
-3174 3176 0
c Var 'aux747' direct represents '3' with '3177'
3174 -3176 3177 0
-3177 3176 0
-3177 -3174 0
c Var 'aux747' direct represents '4' with '-3176'
3171 3173 3175 3177 -3176 0
c Encoding variable: aux748 with domain: int(0..2) (representing constraint ((x_00003_00006=7) + (x_00005_00006=7)))
c Both direct and order encoding.
c Var 'aux748' order represents '0' with '3178'
c Var 'aux748' direct represents '0' with '3178'
c Var 'aux748' order represents '1' with '3179'
-3178 3179 0
c Var 'aux748' direct represents '1' with '3180'
3178 -3179 3180 0
-3180 3179 0
-3180 -3178 0
c Var 'aux748' direct represents '2' with '-3179'
3178 3180 -3179 0
c Encoding variable: aux749 with domain: int(0..2) (representing constraint ((x_00007_00006=7) + (x_00008_00006=7)))
c Both direct and order encoding.
c Var 'aux749' order represents '0' with '3181'
c Var 'aux749' direct represents '0' with '3181'
c Var 'aux749' order represents '1' with '3182'
-3181 3182 0
c Var 'aux749' direct represents '1' with '3183'
3181 -3182 3183 0
-3183 3182 0
-3183 -3181 0
c Var 'aux749' direct represents '2' with '-3182'
3181 3183 -3182 0
c Encoding variable: aux750 with domain: int(0..2) (representing constraint ((x_00002_00006=7) + (x_00006_00006=7)))
c Both direct and order encoding.
c Var 'aux750' order represents '0' with '3184'
c Var 'aux750' direct represents '0' with '3184'
c Var 'aux750' order represents '1' with '3185'
-3184 3185 0
c Var 'aux750' direct represents '1' with '3186'
3184 -3185 3186 0
-3186 3185 0
-3186 -3184 0
c Var 'aux750' direct represents '2' with '-3185'
3184 3186 -3185 0
c Encoding variable: aux751 with domain: int(0..2) (representing constraint ((x_00009_00006=7) + (x_00004_00006=7)))
c Both direct and order encoding.
c Var 'aux751' order represents '0' with '3187'
c Var 'aux751' direct represents '0' with '3187'
c Var 'aux751' order represents '1' with '3188'
-3187 3188 0
c Var 'aux751' direct represents '1' with '3189'
3187 -3188 3189 0
-3189 3188 0
-3189 -3187 0
c Var 'aux751' direct represents '2' with '-3188'
3187 3189 -3188 0
c Encoding variable: aux752 with domain: int(0..3) (representing constraint ((x_00001_00006=7) + aux751))
c Both direct and order encoding.
c Var 'aux752' order represents '0' with '3190'
c Var 'aux752' direct represents '0' with '3190'
c Var 'aux752' order represents '1' with '3191'
-3190 3191 0
c Var 'aux752' direct represents '1' with '3192'
3190 -3191 3192 0
-3192 3191 0
-3192 -3190 0
c Var 'aux752' order represents '2' with '3193'
-3191 3193 0
c Var 'aux752' direct represents '2' with '3194'
3191 -3193 3194 0
-3194 3193 0
-3194 -3191 0
c Var 'aux752' direct represents '3' with '-3193'
3190 3192 3194 -3193 0
c Encoding variable: aux753 with domain: int(0..4) (representing constraint (aux748 + aux750))
c Both direct and order encoding.
c Var 'aux753' order represents '0' with '3195'
c Var 'aux753' direct represents '0' with '3195'
c Var 'aux753' order represents '1' with '3196'
-3195 3196 0
c Var 'aux753' direct represents '1' with '3197'
3195 -3196 3197 0
-3197 3196 0
-3197 -3195 0
c Var 'aux753' order represents '2' with '3198'
-3196 3198 0
c Var 'aux753' direct represents '2' with '3199'
3196 -3198 3199 0
-3199 3198 0
-3199 -3196 0
c Var 'aux753' order represents '3' with '3200'
-3198 3200 0
c Var 'aux753' direct represents '3' with '3201'
3198 -3200 3201 0
-3201 3200 0
-3201 -3198 0
c Var 'aux753' direct represents '4' with '-3200'
3195 3197 3199 3201 -3200 0
c Encoding variable: aux754 with domain: int(0..2) (representing constraint ((x_00003_00006=8) + (x_00005_00006=8)))
c Both direct and order encoding.
c Var 'aux754' order represents '0' with '3202'
c Var 'aux754' direct represents '0' with '3202'
c Var 'aux754' order represents '1' with '3203'
-3202 3203 0
c Var 'aux754' direct represents '1' with '3204'
3202 -3203 3204 0
-3204 3203 0
-3204 -3202 0
c Var 'aux754' direct represents '2' with '-3203'
3202 3204 -3203 0
c Encoding variable: aux755 with domain: int(0..2) (representing constraint ((x_00007_00006=8) + (x_00008_00006=8)))
c Both direct and order encoding.
c Var 'aux755' order represents '0' with '3205'
c Var 'aux755' direct represents '0' with '3205'
c Var 'aux755' order represents '1' with '3206'
-3205 3206 0
c Var 'aux755' direct represents '1' with '3207'
3205 -3206 3207 0
-3207 3206 0
-3207 -3205 0
c Var 'aux755' direct represents '2' with '-3206'
3205 3207 -3206 0
c Encoding variable: aux756 with domain: int(0..2) (representing constraint ((x_00002_00006=8) + (x_00006_00006=8)))
c Both direct and order encoding.
c Var 'aux756' order represents '0' with '3208'
c Var 'aux756' direct represents '0' with '3208'
c Var 'aux756' order represents '1' with '3209'
-3208 3209 0
c Var 'aux756' direct represents '1' with '3210'
3208 -3209 3210 0
-3210 3209 0
-3210 -3208 0
c Var 'aux756' direct represents '2' with '-3209'
3208 3210 -3209 0
c Encoding variable: aux757 with domain: int(0..2) (representing constraint ((x_00009_00006=8) + (x_00004_00006=8)))
c Both direct and order encoding.
c Var 'aux757' order represents '0' with '3211'
c Var 'aux757' direct represents '0' with '3211'
c Var 'aux757' order represents '1' with '3212'
-3211 3212 0
c Var 'aux757' direct represents '1' with '3213'
3211 -3212 3213 0
-3213 3212 0
-3213 -3211 0
c Var 'aux757' direct represents '2' with '-3212'
3211 3213 -3212 0
c Encoding variable: aux758 with domain: int(0..3) (representing constraint ((x_00001_00006=8) + aux757))
c Both direct and order encoding.
c Var 'aux758' order represents '0' with '3214'
c Var 'aux758' direct represents '0' with '3214'
c Var 'aux758' order represents '1' with '3215'
-3214 3215 0
c Var 'aux758' direct represents '1' with '3216'
3214 -3215 3216 0
-3216 3215 0
-3216 -3214 0
c Var 'aux758' order represents '2' with '3217'
-3215 3217 0
c Var 'aux758' direct represents '2' with '3218'
3215 -3217 3218 0
-3218 3217 0
-3218 -3215 0
c Var 'aux758' direct represents '3' with '-3217'
3214 3216 3218 -3217 0
c Encoding variable: aux759 with domain: int(0..4) (representing constraint (aux754 + aux756))
c Both direct and order encoding.
c Var 'aux759' order represents '0' with '3219'
c Var 'aux759' direct represents '0' with '3219'
c Var 'aux759' order represents '1' with '3220'
-3219 3220 0
c Var 'aux759' direct represents '1' with '3221'
3219 -3220 3221 0
-3221 3220 0
-3221 -3219 0
c Var 'aux759' order represents '2' with '3222'
-3220 3222 0
c Var 'aux759' direct represents '2' with '3223'
3220 -3222 3223 0
-3223 3222 0
-3223 -3220 0
c Var 'aux759' order represents '3' with '3224'
-3222 3224 0
c Var 'aux759' direct represents '3' with '3225'
3222 -3224 3225 0
-3225 3224 0
-3225 -3222 0
c Var 'aux759' direct represents '4' with '-3224'
3219 3221 3223 3225 -3224 0
c Encoding variable: aux760 with domain: int(0..2) (representing constraint ((x_00003_00006=9) + (x_00005_00006=9)))
c Both direct and order encoding.
c Var 'aux760' order represents '0' with '3226'
c Var 'aux760' direct represents '0' with '3226'
c Var 'aux760' order represents '1' with '3227'
-3226 3227 0
c Var 'aux760' direct represents '1' with '3228'
3226 -3227 3228 0
-3228 3227 0
-3228 -3226 0
c Var 'aux760' direct represents '2' with '-3227'
3226 3228 -3227 0
c Encoding variable: aux761 with domain: int(0..2) (representing constraint ((x_00007_00006=9) + (x_00008_00006=9)))
c Both direct and order encoding.
c Var 'aux761' order represents '0' with '3229'
c Var 'aux761' direct represents '0' with '3229'
c Var 'aux761' order represents '1' with '3230'
-3229 3230 0
c Var 'aux761' direct represents '1' with '3231'
3229 -3230 3231 0
-3231 3230 0
-3231 -3229 0
c Var 'aux761' direct represents '2' with '-3230'
3229 3231 -3230 0
c Encoding variable: aux762 with domain: int(0..2) (representing constraint ((x_00002_00006=9) + (x_00006_00006=9)))
c Both direct and order encoding.
c Var 'aux762' order represents '0' with '3232'
c Var 'aux762' direct represents '0' with '3232'
c Var 'aux762' order represents '1' with '3233'
-3232 3233 0
c Var 'aux762' direct represents '1' with '3234'
3232 -3233 3234 0
-3234 3233 0
-3234 -3232 0
c Var 'aux762' direct represents '2' with '-3233'
3232 3234 -3233 0
c Encoding variable: aux763 with domain: int(0..2) (representing constraint ((x_00009_00006=9) + (x_00004_00006=9)))
c Both direct and order encoding.
c Var 'aux763' order represents '0' with '3235'
c Var 'aux763' direct represents '0' with '3235'
c Var 'aux763' order represents '1' with '3236'
-3235 3236 0
c Var 'aux763' direct represents '1' with '3237'
3235 -3236 3237 0
-3237 3236 0
-3237 -3235 0
c Var 'aux763' direct represents '2' with '-3236'
3235 3237 -3236 0
c Encoding variable: aux764 with domain: int(0..3) (representing constraint ((x_00001_00006=9) + aux763))
c Both direct and order encoding.
c Var 'aux764' order represents '0' with '3238'
c Var 'aux764' direct represents '0' with '3238'
c Var 'aux764' order represents '1' with '3239'
-3238 3239 0
c Var 'aux764' direct represents '1' with '3240'
3238 -3239 3240 0
-3240 3239 0
-3240 -3238 0
c Var 'aux764' order represents '2' with '3241'
-3239 3241 0
c Var 'aux764' direct represents '2' with '3242'
3239 -3241 3242 0
-3242 3241 0
-3242 -3239 0
c Var 'aux764' direct represents '3' with '-3241'
3238 3240 3242 -3241 0
c Encoding variable: aux765 with domain: int(0..4) (representing constraint (aux760 + aux762))
c Both direct and order encoding.
c Var 'aux765' order represents '0' with '3243'
c Var 'aux765' direct represents '0' with '3243'
c Var 'aux765' order represents '1' with '3244'
-3243 3244 0
c Var 'aux765' direct represents '1' with '3245'
3243 -3244 3245 0
-3245 3244 0
-3245 -3243 0
c Var 'aux765' order represents '2' with '3246'
-3244 3246 0
c Var 'aux765' direct represents '2' with '3247'
3244 -3246 3247 0
-3247 3246 0
-3247 -3244 0
c Var 'aux765' order represents '3' with '3248'
-3246 3248 0
c Var 'aux765' direct represents '3' with '3249'
3246 -3248 3249 0
-3249 3248 0
-3249 -3246 0
c Var 'aux765' direct represents '4' with '-3248'
3243 3245 3247 3249 -3248 0
c Encoding variable: aux766 with domain: int(0..2) (representing constraint ((x_00003_00007=1) + (x_00005_00007=1)))
c Both direct and order encoding.
c Var 'aux766' order represents '0' with '3250'
c Var 'aux766' direct represents '0' with '3250'
c Var 'aux766' order represents '1' with '3251'
-3250 3251 0
c Var 'aux766' direct represents '1' with '3252'
3250 -3251 3252 0
-3252 3251 0
-3252 -3250 0
c Var 'aux766' direct represents '2' with '-3251'
3250 3252 -3251 0
c Encoding variable: aux767 with domain: int(0..2) (representing constraint ((x_00007_00007=1) + (x_00008_00007=1)))
c Both direct and order encoding.
c Var 'aux767' order represents '0' with '3253'
c Var 'aux767' direct represents '0' with '3253'
c Var 'aux767' order represents '1' with '3254'
-3253 3254 0
c Var 'aux767' direct represents '1' with '3255'
3253 -3254 3255 0
-3255 3254 0
-3255 -3253 0
c Var 'aux767' direct represents '2' with '-3254'
3253 3255 -3254 0
c Encoding variable: aux768 with domain: int(0..2) (representing constraint ((x_00002_00007=1) + (x_00006_00007=1)))
c Both direct and order encoding.
c Var 'aux768' order represents '0' with '3256'
c Var 'aux768' direct represents '0' with '3256'
c Var 'aux768' order represents '1' with '3257'
-3256 3257 0
c Var 'aux768' direct represents '1' with '3258'
3256 -3257 3258 0
-3258 3257 0
-3258 -3256 0
c Var 'aux768' direct represents '2' with '-3257'
3256 3258 -3257 0
c Encoding variable: aux769 with domain: int(0..2) (representing constraint ((x_00009_00007=1) + (x_00004_00007=1)))
c Both direct and order encoding.
c Var 'aux769' order represents '0' with '3259'
c Var 'aux769' direct represents '0' with '3259'
c Var 'aux769' order represents '1' with '3260'
-3259 3260 0
c Var 'aux769' direct represents '1' with '3261'
3259 -3260 3261 0
-3261 3260 0
-3261 -3259 0
c Var 'aux769' direct represents '2' with '-3260'
3259 3261 -3260 0
c Encoding variable: aux770 with domain: int(0..3) (representing constraint ((x_00001_00007=1) + aux769))
c Both direct and order encoding.
c Var 'aux770' order represents '0' with '3262'
c Var 'aux770' direct represents '0' with '3262'
c Var 'aux770' order represents '1' with '3263'
-3262 3263 0
c Var 'aux770' direct represents '1' with '3264'
3262 -3263 3264 0
-3264 3263 0
-3264 -3262 0
c Var 'aux770' order represents '2' with '3265'
-3263 3265 0
c Var 'aux770' direct represents '2' with '3266'
3263 -3265 3266 0
-3266 3265 0
-3266 -3263 0
c Var 'aux770' direct represents '3' with '-3265'
3262 3264 3266 -3265 0
c Encoding variable: aux771 with domain: int(0..4) (representing constraint (aux766 + aux768))
c Both direct and order encoding.
c Var 'aux771' order represents '0' with '3267'
c Var 'aux771' direct represents '0' with '3267'
c Var 'aux771' order represents '1' with '3268'
-3267 3268 0
c Var 'aux771' direct represents '1' with '3269'
3267 -3268 3269 0
-3269 3268 0
-3269 -3267 0
c Var 'aux771' order represents '2' with '3270'
-3268 3270 0
c Var 'aux771' direct represents '2' with '3271'
3268 -3270 3271 0
-3271 3270 0
-3271 -3268 0
c Var 'aux771' order represents '3' with '3272'
-3270 3272 0
c Var 'aux771' direct represents '3' with '3273'
3270 -3272 3273 0
-3273 3272 0
-3273 -3270 0
c Var 'aux771' direct represents '4' with '-3272'
3267 3269 3271 3273 -3272 0
c Encoding variable: aux772 with domain: int(0..2) (representing constraint ((x_00003_00007=2) + (x_00005_00007=2)))
c Both direct and order encoding.
c Var 'aux772' order represents '0' with '3274'
c Var 'aux772' direct represents '0' with '3274'
c Var 'aux772' order represents '1' with '3275'
-3274 3275 0
c Var 'aux772' direct represents '1' with '3276'
3274 -3275 3276 0
-3276 3275 0
-3276 -3274 0
c Var 'aux772' direct represents '2' with '-3275'
3274 3276 -3275 0
c Encoding variable: aux773 with domain: int(0..2) (representing constraint ((x_00007_00007=2) + (x_00008_00007=2)))
c Both direct and order encoding.
c Var 'aux773' order represents '0' with '3277'
c Var 'aux773' direct represents '0' with '3277'
c Var 'aux773' order represents '1' with '3278'
-3277 3278 0
c Var 'aux773' direct represents '1' with '3279'
3277 -3278 3279 0
-3279 3278 0
-3279 -3277 0
c Var 'aux773' direct represents '2' with '-3278'
3277 3279 -3278 0
c Encoding variable: aux774 with domain: int(0..2) (representing constraint ((x_00002_00007=2) + (x_00006_00007=2)))
c Both direct and order encoding.
c Var 'aux774' order represents '0' with '3280'
c Var 'aux774' direct represents '0' with '3280'
c Var 'aux774' order represents '1' with '3281'
-3280 3281 0
c Var 'aux774' direct represents '1' with '3282'
3280 -3281 3282 0
-3282 3281 0
-3282 -3280 0
c Var 'aux774' direct represents '2' with '-3281'
3280 3282 -3281 0
c Encoding variable: aux775 with domain: int(0..2) (representing constraint ((x_00009_00007=2) + (x_00004_00007=2)))
c Both direct and order encoding.
c Var 'aux775' order represents '0' with '3283'
c Var 'aux775' direct represents '0' with '3283'
c Var 'aux775' order represents '1' with '3284'
-3283 3284 0
c Var 'aux775' direct represents '1' with '3285'
3283 -3284 3285 0
-3285 3284 0
-3285 -3283 0
c Var 'aux775' direct represents '2' with '-3284'
3283 3285 -3284 0
c Encoding variable: aux776 with domain: int(0..3) (representing constraint ((x_00001_00007=2) + aux775))
c Both direct and order encoding.
c Var 'aux776' order represents '0' with '3286'
c Var 'aux776' direct represents '0' with '3286'
c Var 'aux776' order represents '1' with '3287'
-3286 3287 0
c Var 'aux776' direct represents '1' with '3288'
3286 -3287 3288 0
-3288 3287 0
-3288 -3286 0
c Var 'aux776' order represents '2' with '3289'
-3287 3289 0
c Var 'aux776' direct represents '2' with '3290'
3287 -3289 3290 0
-3290 3289 0
-3290 -3287 0
c Var 'aux776' direct represents '3' with '-3289'
3286 3288 3290 -3289 0
c Encoding variable: aux777 with domain: int(0..4) (representing constraint (aux772 + aux774))
c Both direct and order encoding.
c Var 'aux777' order represents '0' with '3291'
c Var 'aux777' direct represents '0' with '3291'
c Var 'aux777' order represents '1' with '3292'
-3291 3292 0
c Var 'aux777' direct represents '1' with '3293'
3291 -3292 3293 0
-3293 3292 0
-3293 -3291 0
c Var 'aux777' order represents '2' with '3294'
-3292 3294 0
c Var 'aux777' direct represents '2' with '3295'
3292 -3294 3295 0
-3295 3294 0
-3295 -3292 0
c Var 'aux777' order represents '3' with '3296'
-3294 3296 0
c Var 'aux777' direct represents '3' with '3297'
3294 -3296 3297 0
-3297 3296 0
-3297 -3294 0
c Var 'aux777' direct represents '4' with '-3296'
3291 3293 3295 3297 -3296 0
c Encoding variable: aux778 with domain: int(0..2) (representing constraint ((x_00003_00007=3) + (x_00005_00007=3)))
c Both direct and order encoding.
c Var 'aux778' order represents '0' with '3298'
c Var 'aux778' direct represents '0' with '3298'
c Var 'aux778' order represents '1' with '3299'
-3298 3299 0
c Var 'aux778' direct represents '1' with '3300'
3298 -3299 3300 0
-3300 3299 0
-3300 -3298 0
c Var 'aux778' direct represents '2' with '-3299'
3298 3300 -3299 0
c Encoding variable: aux779 with domain: int(0..2) (representing constraint ((x_00007_00007=3) + (x_00008_00007=3)))
c Both direct and order encoding.
c Var 'aux779' order represents '0' with '3301'
c Var 'aux779' direct represents '0' with '3301'
c Var 'aux779' order represents '1' with '3302'
-3301 3302 0
c Var 'aux779' direct represents '1' with '3303'
3301 -3302 3303 0
-3303 3302 0
-3303 -3301 0
c Var 'aux779' direct represents '2' with '-3302'
3301 3303 -3302 0
c Encoding variable: aux780 with domain: int(0..2) (representing constraint ((x_00002_00007=3) + (x_00006_00007=3)))
c Both direct and order encoding.
c Var 'aux780' order represents '0' with '3304'
c Var 'aux780' direct represents '0' with '3304'
c Var 'aux780' order represents '1' with '3305'
-3304 3305 0
c Var 'aux780' direct represents '1' with '3306'
3304 -3305 3306 0
-3306 3305 0
-3306 -3304 0
c Var 'aux780' direct represents '2' with '-3305'
3304 3306 -3305 0
c Encoding variable: aux781 with domain: int(0..2) (representing constraint ((x_00009_00007=3) + (x_00004_00007=3)))
c Both direct and order encoding.
c Var 'aux781' order represents '0' with '3307'
c Var 'aux781' direct represents '0' with '3307'
c Var 'aux781' order represents '1' with '3308'
-3307 3308 0
c Var 'aux781' direct represents '1' with '3309'
3307 -3308 3309 0
-3309 3308 0
-3309 -3307 0
c Var 'aux781' direct represents '2' with '-3308'
3307 3309 -3308 0
c Encoding variable: aux782 with domain: int(0..3) (representing constraint ((x_00001_00007=3) + aux781))
c Both direct and order encoding.
c Var 'aux782' order represents '0' with '3310'
c Var 'aux782' direct represents '0' with '3310'
c Var 'aux782' order represents '1' with '3311'
-3310 3311 0
c Var 'aux782' direct represents '1' with '3312'
3310 -3311 3312 0
-3312 3311 0
-3312 -3310 0
c Var 'aux782' order represents '2' with '3313'
-3311 3313 0
c Var 'aux782' direct represents '2' with '3314'
3311 -3313 3314 0
-3314 3313 0
-3314 -3311 0
c Var 'aux782' direct represents '3' with '-3313'
3310 3312 3314 -3313 0
c Encoding variable: aux783 with domain: int(0..4) (representing constraint (aux778 + aux780))
c Both direct and order encoding.
c Var 'aux783' order represents '0' with '3315'
c Var 'aux783' direct represents '0' with '3315'
c Var 'aux783' order represents '1' with '3316'
-3315 3316 0
c Var 'aux783' direct represents '1' with '3317'
3315 -3316 3317 0
-3317 3316 0
-3317 -3315 0
c Var 'aux783' order represents '2' with '3318'
-3316 3318 0
c Var 'aux783' direct represents '2' with '3319'
3316 -3318 3319 0
-3319 3318 0
-3319 -3316 0
c Var 'aux783' order represents '3' with '3320'
-3318 3320 0
c Var 'aux783' direct represents '3' with '3321'
3318 -3320 3321 0
-3321 3320 0
-3321 -3318 0
c Var 'aux783' direct represents '4' with '-3320'
3315 3317 3319 3321 -3320 0
c Encoding variable: aux784 with domain: int(0..2) (representing constraint ((x_00003_00007=4) + (x_00005_00007=4)))
c Both direct and order encoding.
c Var 'aux784' order represents '0' with '3322'
c Var 'aux784' direct represents '0' with '3322'
c Var 'aux784' order represents '1' with '3323'
-3322 3323 0
c Var 'aux784' direct represents '1' with '3324'
3322 -3323 3324 0
-3324 3323 0
-3324 -3322 0
c Var 'aux784' direct represents '2' with '-3323'
3322 3324 -3323 0
c Encoding variable: aux785 with domain: int(0..2) (representing constraint ((x_00007_00007=4) + (x_00008_00007=4)))
c Both direct and order encoding.
c Var 'aux785' order represents '0' with '3325'
c Var 'aux785' direct represents '0' with '3325'
c Var 'aux785' order represents '1' with '3326'
-3325 3326 0
c Var 'aux785' direct represents '1' with '3327'
3325 -3326 3327 0
-3327 3326 0
-3327 -3325 0
c Var 'aux785' direct represents '2' with '-3326'
3325 3327 -3326 0
c Encoding variable: aux786 with domain: int(0..2) (representing constraint ((x_00002_00007=4) + (x_00006_00007=4)))
c Both direct and order encoding.
c Var 'aux786' order represents '0' with '3328'
c Var 'aux786' direct represents '0' with '3328'
c Var 'aux786' order represents '1' with '3329'
-3328 3329 0
c Var 'aux786' direct represents '1' with '3330'
3328 -3329 3330 0
-3330 3329 0
-3330 -3328 0
c Var 'aux786' direct represents '2' with '-3329'
3328 3330 -3329 0
c Encoding variable: aux787 with domain: int(0..2) (representing constraint ((x_00009_00007=4) + (x_00004_00007=4)))
c Both direct and order encoding.
c Var 'aux787' order represents '0' with '3331'
c Var 'aux787' direct represents '0' with '3331'
c Var 'aux787' order represents '1' with '3332'
-3331 3332 0
c Var 'aux787' direct represents '1' with '3333'
3331 -3332 3333 0
-3333 3332 0
-3333 -3331 0
c Var 'aux787' direct represents '2' with '-3332'
3331 3333 -3332 0
c Encoding variable: aux788 with domain: int(0..3) (representing constraint ((x_00001_00007=4) + aux787))
c Both direct and order encoding.
c Var 'aux788' order represents '0' with '3334'
c Var 'aux788' direct represents '0' with '3334'
c Var 'aux788' order represents '1' with '3335'
-3334 3335 0
c Var 'aux788' direct represents '1' with '3336'
3334 -3335 3336 0
-3336 3335 0
-3336 -3334 0
c Var 'aux788' order represents '2' with '3337'
-3335 3337 0
c Var 'aux788' direct represents '2' with '3338'
3335 -3337 3338 0
-3338 3337 0
-3338 -3335 0
c Var 'aux788' direct represents '3' with '-3337'
3334 3336 3338 -3337 0
c Encoding variable: aux789 with domain: int(0..4) (representing constraint (aux784 + aux786))
c Both direct and order encoding.
c Var 'aux789' order represents '0' with '3339'
c Var 'aux789' direct represents '0' with '3339'
c Var 'aux789' order represents '1' with '3340'
-3339 3340 0
c Var 'aux789' direct represents '1' with '3341'
3339 -3340 3341 0
-3341 3340 0
-3341 -3339 0
c Var 'aux789' order represents '2' with '3342'
-3340 3342 0
c Var 'aux789' direct represents '2' with '3343'
3340 -3342 3343 0
-3343 3342 0
-3343 -3340 0
c Var 'aux789' order represents '3' with '3344'
-3342 3344 0
c Var 'aux789' direct represents '3' with '3345'
3342 -3344 3345 0
-3345 3344 0
-3345 -3342 0
c Var 'aux789' direct represents '4' with '-3344'
3339 3341 3343 3345 -3344 0
c Encoding variable: aux790 with domain: int(0..2) (representing constraint ((x_00003_00007=5) + (x_00005_00007=5)))
c Both direct and order encoding.
c Var 'aux790' order represents '0' with '3346'
c Var 'aux790' direct represents '0' with '3346'
c Var 'aux790' order represents '1' with '3347'
-3346 3347 0
c Var 'aux790' direct represents '1' with '3348'
3346 -3347 3348 0
-3348 3347 0
-3348 -3346 0
c Var 'aux790' direct represents '2' with '-3347'
3346 3348 -3347 0
c Encoding variable: aux791 with domain: int(0..2) (representing constraint ((x_00007_00007=5) + (x_00008_00007=5)))
c Both direct and order encoding.
c Var 'aux791' order represents '0' with '3349'
c Var 'aux791' direct represents '0' with '3349'
c Var 'aux791' order represents '1' with '3350'
-3349 3350 0
c Var 'aux791' direct represents '1' with '3351'
3349 -3350 3351 0
-3351 3350 0
-3351 -3349 0
c Var 'aux791' direct represents '2' with '-3350'
3349 3351 -3350 0
c Encoding variable: aux792 with domain: int(0..2) (representing constraint ((x_00002_00007=5) + (x_00006_00007=5)))
c Both direct and order encoding.
c Var 'aux792' order represents '0' with '3352'
c Var 'aux792' direct represents '0' with '3352'
c Var 'aux792' order represents '1' with '3353'
-3352 3353 0
c Var 'aux792' direct represents '1' with '3354'
3352 -3353 3354 0
-3354 3353 0
-3354 -3352 0
c Var 'aux792' direct represents '2' with '-3353'
3352 3354 -3353 0
c Encoding variable: aux793 with domain: int(0..2) (representing constraint ((x_00009_00007=5) + (x_00004_00007=5)))
c Both direct and order encoding.
c Var 'aux793' order represents '0' with '3355'
c Var 'aux793' direct represents '0' with '3355'
c Var 'aux793' order represents '1' with '3356'
-3355 3356 0
c Var 'aux793' direct represents '1' with '3357'
3355 -3356 3357 0
-3357 3356 0
-3357 -3355 0
c Var 'aux793' direct represents '2' with '-3356'
3355 3357 -3356 0
c Encoding variable: aux794 with domain: int(0..3) (representing constraint ((x_00001_00007=5) + aux793))
c Both direct and order encoding.
c Var 'aux794' order represents '0' with '3358'
c Var 'aux794' direct represents '0' with '3358'
c Var 'aux794' order represents '1' with '3359'
-3358 3359 0
c Var 'aux794' direct represents '1' with '3360'
3358 -3359 3360 0
-3360 3359 0
-3360 -3358 0
c Var 'aux794' order represents '2' with '3361'
-3359 3361 0
c Var 'aux794' direct represents '2' with '3362'
3359 -3361 3362 0
-3362 3361 0
-3362 -3359 0
c Var 'aux794' direct represents '3' with '-3361'
3358 3360 3362 -3361 0
c Encoding variable: aux795 with domain: int(0..4) (representing constraint (aux790 + aux792))
c Both direct and order encoding.
c Var 'aux795' order represents '0' with '3363'
c Var 'aux795' direct represents '0' with '3363'
c Var 'aux795' order represents '1' with '3364'
-3363 3364 0
c Var 'aux795' direct represents '1' with '3365'
3363 -3364 3365 0
-3365 3364 0
-3365 -3363 0
c Var 'aux795' order represents '2' with '3366'
-3364 3366 0
c Var 'aux795' direct represents '2' with '3367'
3364 -3366 3367 0
-3367 3366 0
-3367 -3364 0
c Var 'aux795' order represents '3' with '3368'
-3366 3368 0
c Var 'aux795' direct represents '3' with '3369'
3366 -3368 3369 0
-3369 3368 0
-3369 -3366 0
c Var 'aux795' direct represents '4' with '-3368'
3363 3365 3367 3369 -3368 0
c Encoding variable: aux796 with domain: int(0..2) (representing constraint ((x_00003_00007=6) + (x_00005_00007=6)))
c Both direct and order encoding.
c Var 'aux796' order represents '0' with '3370'
c Var 'aux796' direct represents '0' with '3370'
c Var 'aux796' order represents '1' with '3371'
-3370 3371 0
c Var 'aux796' direct represents '1' with '3372'
3370 -3371 3372 0
-3372 3371 0
-3372 -3370 0
c Var 'aux796' direct represents '2' with '-3371'
3370 3372 -3371 0
c Encoding variable: aux797 with domain: int(0..2) (representing constraint ((x_00007_00007=6) + (x_00008_00007=6)))
c Both direct and order encoding.
c Var 'aux797' order represents '0' with '3373'
c Var 'aux797' direct represents '0' with '3373'
c Var 'aux797' order represents '1' with '3374'
-3373 3374 0
c Var 'aux797' direct represents '1' with '3375'
3373 -3374 3375 0
-3375 3374 0
-3375 -3373 0
c Var 'aux797' direct represents '2' with '-3374'
3373 3375 -3374 0
c Encoding variable: aux798 with domain: int(0..2) (representing constraint ((x_00002_00007=6) + (x_00006_00007=6)))
c Both direct and order encoding.
c Var 'aux798' order represents '0' with '3376'
c Var 'aux798' direct represents '0' with '3376'
c Var 'aux798' order represents '1' with '3377'
-3376 3377 0
c Var 'aux798' direct represents '1' with '3378'
3376 -3377 3378 0
-3378 3377 0
-3378 -3376 0
c Var 'aux798' direct represents '2' with '-3377'
3376 3378 -3377 0
c Encoding variable: aux799 with domain: int(0..2) (representing constraint ((x_00009_00007=6) + (x_00004_00007=6)))
c Both direct and order encoding.
c Var 'aux799' order represents '0' with '3379'
c Var 'aux799' direct represents '0' with '3379'
c Var 'aux799' order represents '1' with '3380'
-3379 3380 0
c Var 'aux799' direct represents '1' with '3381'
3379 -3380 3381 0
-3381 3380 0
-3381 -3379 0
c Var 'aux799' direct represents '2' with '-3380'
3379 3381 -3380 0
c Encoding variable: aux800 with domain: int(0..3) (representing constraint ((x_00001_00007=6) + aux799))
c Both direct and order encoding.
c Var 'aux800' order represents '0' with '3382'
c Var 'aux800' direct represents '0' with '3382'
c Var 'aux800' order represents '1' with '3383'
-3382 3383 0
c Var 'aux800' direct represents '1' with '3384'
3382 -3383 3384 0
-3384 3383 0
-3384 -3382 0
c Var 'aux800' order represents '2' with '3385'
-3383 3385 0
c Var 'aux800' direct represents '2' with '3386'
3383 -3385 3386 0
-3386 3385 0
-3386 -3383 0
c Var 'aux800' direct represents '3' with '-3385'
3382 3384 3386 -3385 0
c Encoding variable: aux801 with domain: int(0..4) (representing constraint (aux796 + aux798))
c Both direct and order encoding.
c Var 'aux801' order represents '0' with '3387'
c Var 'aux801' direct represents '0' with '3387'
c Var 'aux801' order represents '1' with '3388'
-3387 3388 0
c Var 'aux801' direct represents '1' with '3389'
3387 -3388 3389 0
-3389 3388 0
-3389 -3387 0
c Var 'aux801' order represents '2' with '3390'
-3388 3390 0
c Var 'aux801' direct represents '2' with '3391'
3388 -3390 3391 0
-3391 3390 0
-3391 -3388 0
c Var 'aux801' order represents '3' with '3392'
-3390 3392 0
c Var 'aux801' direct represents '3' with '3393'
3390 -3392 3393 0
-3393 3392 0
-3393 -3390 0
c Var 'aux801' direct represents '4' with '-3392'
3387 3389 3391 3393 -3392 0
c Encoding variable: aux802 with domain: int(0..2) (representing constraint ((x_00003_00007=7) + (x_00005_00007=7)))
c Both direct and order encoding.
c Var 'aux802' order represents '0' with '3394'
c Var 'aux802' direct represents '0' with '3394'
c Var 'aux802' order represents '1' with '3395'
-3394 3395 0
c Var 'aux802' direct represents '1' with '3396'
3394 -3395 3396 0
-3396 3395 0
-3396 -3394 0
c Var 'aux802' direct represents '2' with '-3395'
3394 3396 -3395 0
c Encoding variable: aux803 with domain: int(0..2) (representing constraint ((x_00007_00007=7) + (x_00008_00007=7)))
c Both direct and order encoding.
c Var 'aux803' order represents '0' with '3397'
c Var 'aux803' direct represents '0' with '3397'
c Var 'aux803' order represents '1' with '3398'
-3397 3398 0
c Var 'aux803' direct represents '1' with '3399'
3397 -3398 3399 0
-3399 3398 0
-3399 -3397 0
c Var 'aux803' direct represents '2' with '-3398'
3397 3399 -3398 0
c Encoding variable: aux804 with domain: int(0..2) (representing constraint ((x_00002_00007=7) + (x_00006_00007=7)))
c Both direct and order encoding.
c Var 'aux804' order represents '0' with '3400'
c Var 'aux804' direct represents '0' with '3400'
c Var 'aux804' order represents '1' with '3401'
-3400 3401 0
c Var 'aux804' direct represents '1' with '3402'
3400 -3401 3402 0
-3402 3401 0
-3402 -3400 0
c Var 'aux804' direct represents '2' with '-3401'
3400 3402 -3401 0
c Encoding variable: aux805 with domain: int(0..2) (representing constraint ((x_00009_00007=7) + (x_00004_00007=7)))
c Both direct and order encoding.
c Var 'aux805' order represents '0' with '3403'
c Var 'aux805' direct represents '0' with '3403'
c Var 'aux805' order represents '1' with '3404'
-3403 3404 0
c Var 'aux805' direct represents '1' with '3405'
3403 -3404 3405 0
-3405 3404 0
-3405 -3403 0
c Var 'aux805' direct represents '2' with '-3404'
3403 3405 -3404 0
c Encoding variable: aux806 with domain: int(0..3) (representing constraint ((x_00001_00007=7) + aux805))
c Both direct and order encoding.
c Var 'aux806' order represents '0' with '3406'
c Var 'aux806' direct represents '0' with '3406'
c Var 'aux806' order represents '1' with '3407'
-3406 3407 0
c Var 'aux806' direct represents '1' with '3408'
3406 -3407 3408 0
-3408 3407 0
-3408 -3406 0
c Var 'aux806' order represents '2' with '3409'
-3407 3409 0
c Var 'aux806' direct represents '2' with '3410'
3407 -3409 3410 0
-3410 3409 0
-3410 -3407 0
c Var 'aux806' direct represents '3' with '-3409'
3406 3408 3410 -3409 0
c Encoding variable: aux807 with domain: int(0..4) (representing constraint (aux802 + aux804))
c Both direct and order encoding.
c Var 'aux807' order represents '0' with '3411'
c Var 'aux807' direct represents '0' with '3411'
c Var 'aux807' order represents '1' with '3412'
-3411 3412 0
c Var 'aux807' direct represents '1' with '3413'
3411 -3412 3413 0
-3413 3412 0
-3413 -3411 0
c Var 'aux807' order represents '2' with '3414'
-3412 3414 0
c Var 'aux807' direct represents '2' with '3415'
3412 -3414 3415 0
-3415 3414 0
-3415 -3412 0
c Var 'aux807' order represents '3' with '3416'
-3414 3416 0
c Var 'aux807' direct represents '3' with '3417'
3414 -3416 3417 0
-3417 3416 0
-3417 -3414 0
c Var 'aux807' direct represents '4' with '-3416'
3411 3413 3415 3417 -3416 0
c Encoding variable: aux808 with domain: int(0..2) (representing constraint ((x_00003_00007=8) + (x_00005_00007=8)))
c Both direct and order encoding.
c Var 'aux808' order represents '0' with '3418'
c Var 'aux808' direct represents '0' with '3418'
c Var 'aux808' order represents '1' with '3419'
-3418 3419 0
c Var 'aux808' direct represents '1' with '3420'
3418 -3419 3420 0
-3420 3419 0
-3420 -3418 0
c Var 'aux808' direct represents '2' with '-3419'
3418 3420 -3419 0
c Encoding variable: aux809 with domain: int(0..2) (representing constraint ((x_00007_00007=8) + (x_00008_00007=8)))
c Both direct and order encoding.
c Var 'aux809' order represents '0' with '3421'
c Var 'aux809' direct represents '0' with '3421'
c Var 'aux809' order represents '1' with '3422'
-3421 3422 0
c Var 'aux809' direct represents '1' with '3423'
3421 -3422 3423 0
-3423 3422 0
-3423 -3421 0
c Var 'aux809' direct represents '2' with '-3422'
3421 3423 -3422 0
c Encoding variable: aux810 with domain: int(0..2) (representing constraint ((x_00002_00007=8) + (x_00006_00007=8)))
c Both direct and order encoding.
c Var 'aux810' order represents '0' with '3424'
c Var 'aux810' direct represents '0' with '3424'
c Var 'aux810' order represents '1' with '3425'
-3424 3425 0
c Var 'aux810' direct represents '1' with '3426'
3424 -3425 3426 0
-3426 3425 0
-3426 -3424 0
c Var 'aux810' direct represents '2' with '-3425'
3424 3426 -3425 0
c Encoding variable: aux811 with domain: int(0..2) (representing constraint ((x_00009_00007=8) + (x_00004_00007=8)))
c Both direct and order encoding.
c Var 'aux811' order represents '0' with '3427'
c Var 'aux811' direct represents '0' with '3427'
c Var 'aux811' order represents '1' with '3428'
-3427 3428 0
c Var 'aux811' direct represents '1' with '3429'
3427 -3428 3429 0
-3429 3428 0
-3429 -3427 0
c Var 'aux811' direct represents '2' with '-3428'
3427 3429 -3428 0
c Encoding variable: aux812 with domain: int(0..3) (representing constraint ((x_00001_00007=8) + aux811))
c Both direct and order encoding.
c Var 'aux812' order represents '0' with '3430'
c Var 'aux812' direct represents '0' with '3430'
c Var 'aux812' order represents '1' with '3431'
-3430 3431 0
c Var 'aux812' direct represents '1' with '3432'
3430 -3431 3432 0
-3432 3431 0
-3432 -3430 0
c Var 'aux812' order represents '2' with '3433'
-3431 3433 0
c Var 'aux812' direct represents '2' with '3434'
3431 -3433 3434 0
-3434 3433 0
-3434 -3431 0
c Var 'aux812' direct represents '3' with '-3433'
3430 3432 3434 -3433 0
c Encoding variable: aux813 with domain: int(0..4) (representing constraint (aux808 + aux810))
c Both direct and order encoding.
c Var 'aux813' order represents '0' with '3435'
c Var 'aux813' direct represents '0' with '3435'
c Var 'aux813' order represents '1' with '3436'
-3435 3436 0
c Var 'aux813' direct represents '1' with '3437'
3435 -3436 3437 0
-3437 3436 0
-3437 -3435 0
c Var 'aux813' order represents '2' with '3438'
-3436 3438 0
c Var 'aux813' direct represents '2' with '3439'
3436 -3438 3439 0
-3439 3438 0
-3439 -3436 0
c Var 'aux813' order represents '3' with '3440'
-3438 3440 0
c Var 'aux813' direct represents '3' with '3441'
3438 -3440 3441 0
-3441 3440 0
-3441 -3438 0
c Var 'aux813' direct represents '4' with '-3440'
3435 3437 3439 3441 -3440 0
c Encoding variable: aux814 with domain: int(0..2) (representing constraint ((x_00003_00007=9) + (x_00005_00007=9)))
c Both direct and order encoding.
c Var 'aux814' order represents '0' with '3442'
c Var 'aux814' direct represents '0' with '3442'
c Var 'aux814' order represents '1' with '3443'
-3442 3443 0
c Var 'aux814' direct represents '1' with '3444'
3442 -3443 3444 0
-3444 3443 0
-3444 -3442 0
c Var 'aux814' direct represents '2' with '-3443'
3442 3444 -3443 0
c Encoding variable: aux815 with domain: int(0..2) (representing constraint ((x_00007_00007=9) + (x_00008_00007=9)))
c Both direct and order encoding.
c Var 'aux815' order represents '0' with '3445'
c Var 'aux815' direct represents '0' with '3445'
c Var 'aux815' order represents '1' with '3446'
-3445 3446 0
c Var 'aux815' direct represents '1' with '3447'
3445 -3446 3447 0
-3447 3446 0
-3447 -3445 0
c Var 'aux815' direct represents '2' with '-3446'
3445 3447 -3446 0
c Encoding variable: aux816 with domain: int(0..2) (representing constraint ((x_00002_00007=9) + (x_00006_00007=9)))
c Both direct and order encoding.
c Var 'aux816' order represents '0' with '3448'
c Var 'aux816' direct represents '0' with '3448'
c Var 'aux816' order represents '1' with '3449'
-3448 3449 0
c Var 'aux816' direct represents '1' with '3450'
3448 -3449 3450 0
-3450 3449 0
-3450 -3448 0
c Var 'aux816' direct represents '2' with '-3449'
3448 3450 -3449 0
c Encoding variable: aux817 with domain: int(0..2) (representing constraint ((x_00009_00007=9) + (x_00004_00007=9)))
c Both direct and order encoding.
c Var 'aux817' order represents '0' with '3451'
c Var 'aux817' direct represents '0' with '3451'
c Var 'aux817' order represents '1' with '3452'
-3451 3452 0
c Var 'aux817' direct represents '1' with '3453'
3451 -3452 3453 0
-3453 3452 0
-3453 -3451 0
c Var 'aux817' direct represents '2' with '-3452'
3451 3453 -3452 0
c Encoding variable: aux818 with domain: int(0..3) (representing constraint ((x_00001_00007=9) + aux817))
c Both direct and order encoding.
c Var 'aux818' order represents '0' with '3454'
c Var 'aux818' direct represents '0' with '3454'
c Var 'aux818' order represents '1' with '3455'
-3454 3455 0
c Var 'aux818' direct represents '1' with '3456'
3454 -3455 3456 0
-3456 3455 0
-3456 -3454 0
c Var 'aux818' order represents '2' with '3457'
-3455 3457 0
c Var 'aux818' direct represents '2' with '3458'
3455 -3457 3458 0
-3458 3457 0
-3458 -3455 0
c Var 'aux818' direct represents '3' with '-3457'
3454 3456 3458 -3457 0
c Encoding variable: aux819 with domain: int(0..4) (representing constraint (aux814 + aux816))
c Both direct and order encoding.
c Var 'aux819' order represents '0' with '3459'
c Var 'aux819' direct represents '0' with '3459'
c Var 'aux819' order represents '1' with '3460'
-3459 3460 0
c Var 'aux819' direct represents '1' with '3461'
3459 -3460 3461 0
-3461 3460 0
-3461 -3459 0
c Var 'aux819' order represents '2' with '3462'
-3460 3462 0
c Var 'aux819' direct represents '2' with '3463'
3460 -3462 3463 0
-3463 3462 0
-3463 -3460 0
c Var 'aux819' order represents '3' with '3464'
-3462 3464 0
c Var 'aux819' direct represents '3' with '3465'
3462 -3464 3465 0
-3465 3464 0
-3465 -3462 0
c Var 'aux819' direct represents '4' with '-3464'
3459 3461 3463 3465 -3464 0
c Encoding variable: aux820 with domain: int(0..2) (representing constraint ((x_00003_00008=1) + (x_00005_00008=1)))
c Both direct and order encoding.
c Var 'aux820' order represents '0' with '3466'
c Var 'aux820' direct represents '0' with '3466'
c Var 'aux820' order represents '1' with '3467'
-3466 3467 0
c Var 'aux820' direct represents '1' with '3468'
3466 -3467 3468 0
-3468 3467 0
-3468 -3466 0
c Var 'aux820' direct represents '2' with '-3467'
3466 3468 -3467 0
c Encoding variable: aux821 with domain: int(0..2) (representing constraint ((x_00007_00008=1) + (x_00008_00008=1)))
c Both direct and order encoding.
c Var 'aux821' order represents '0' with '3469'
c Var 'aux821' direct represents '0' with '3469'
c Var 'aux821' order represents '1' with '3470'
-3469 3470 0
c Var 'aux821' direct represents '1' with '3471'
3469 -3470 3471 0
-3471 3470 0
-3471 -3469 0
c Var 'aux821' direct represents '2' with '-3470'
3469 3471 -3470 0
c Encoding variable: aux822 with domain: int(0..2) (representing constraint ((x_00002_00008=1) + (x_00006_00008=1)))
c Both direct and order encoding.
c Var 'aux822' order represents '0' with '3472'
c Var 'aux822' direct represents '0' with '3472'
c Var 'aux822' order represents '1' with '3473'
-3472 3473 0
c Var 'aux822' direct represents '1' with '3474'
3472 -3473 3474 0
-3474 3473 0
-3474 -3472 0
c Var 'aux822' direct represents '2' with '-3473'
3472 3474 -3473 0
c Encoding variable: aux823 with domain: int(0..2) (representing constraint ((x_00009_00008=1) + (x_00004_00008=1)))
c Both direct and order encoding.
c Var 'aux823' order represents '0' with '3475'
c Var 'aux823' direct represents '0' with '3475'
c Var 'aux823' order represents '1' with '3476'
-3475 3476 0
c Var 'aux823' direct represents '1' with '3477'
3475 -3476 3477 0
-3477 3476 0
-3477 -3475 0
c Var 'aux823' direct represents '2' with '-3476'
3475 3477 -3476 0
c Encoding variable: aux824 with domain: int(0..3) (representing constraint ((x_00001_00008=1) + aux823))
c Both direct and order encoding.
c Var 'aux824' order represents '0' with '3478'
c Var 'aux824' direct represents '0' with '3478'
c Var 'aux824' order represents '1' with '3479'
-3478 3479 0
c Var 'aux824' direct represents '1' with '3480'
3478 -3479 3480 0
-3480 3479 0
-3480 -3478 0
c Var 'aux824' order represents '2' with '3481'
-3479 3481 0
c Var 'aux824' direct represents '2' with '3482'
3479 -3481 3482 0
-3482 3481 0
-3482 -3479 0
c Var 'aux824' direct represents '3' with '-3481'
3478 3480 3482 -3481 0
c Encoding variable: aux825 with domain: int(0..4) (representing constraint (aux820 + aux822))
c Both direct and order encoding.
c Var 'aux825' order represents '0' with '3483'
c Var 'aux825' direct represents '0' with '3483'
c Var 'aux825' order represents '1' with '3484'
-3483 3484 0
c Var 'aux825' direct represents '1' with '3485'
3483 -3484 3485 0
-3485 3484 0
-3485 -3483 0
c Var 'aux825' order represents '2' with '3486'
-3484 3486 0
c Var 'aux825' direct represents '2' with '3487'
3484 -3486 3487 0
-3487 3486 0
-3487 -3484 0
c Var 'aux825' order represents '3' with '3488'
-3486 3488 0
c Var 'aux825' direct represents '3' with '3489'
3486 -3488 3489 0
-3489 3488 0
-3489 -3486 0
c Var 'aux825' direct represents '4' with '-3488'
3483 3485 3487 3489 -3488 0
c Encoding variable: aux826 with domain: int(0..2) (representing constraint ((x_00003_00008=2) + (x_00005_00008=2)))
c Both direct and order encoding.
c Var 'aux826' order represents '0' with '3490'
c Var 'aux826' direct represents '0' with '3490'
c Var 'aux826' order represents '1' with '3491'
-3490 3491 0
c Var 'aux826' direct represents '1' with '3492'
3490 -3491 3492 0
-3492 3491 0
-3492 -3490 0
c Var 'aux826' direct represents '2' with '-3491'
3490 3492 -3491 0
c Encoding variable: aux827 with domain: int(0..2) (representing constraint ((x_00007_00008=2) + (x_00008_00008=2)))
c Both direct and order encoding.
c Var 'aux827' order represents '0' with '3493'
c Var 'aux827' direct represents '0' with '3493'
c Var 'aux827' order represents '1' with '3494'
-3493 3494 0
c Var 'aux827' direct represents '1' with '3495'
3493 -3494 3495 0
-3495 3494 0
-3495 -3493 0
c Var 'aux827' direct represents '2' with '-3494'
3493 3495 -3494 0
c Encoding variable: aux828 with domain: int(0..2) (representing constraint ((x_00002_00008=2) + (x_00006_00008=2)))
c Both direct and order encoding.
c Var 'aux828' order represents '0' with '3496'
c Var 'aux828' direct represents '0' with '3496'
c Var 'aux828' order represents '1' with '3497'
-3496 3497 0
c Var 'aux828' direct represents '1' with '3498'
3496 -3497 3498 0
-3498 3497 0
-3498 -3496 0
c Var 'aux828' direct represents '2' with '-3497'
3496 3498 -3497 0
c Encoding variable: aux829 with domain: int(0..2) (representing constraint ((x_00009_00008=2) + (x_00004_00008=2)))
c Both direct and order encoding.
c Var 'aux829' order represents '0' with '3499'
c Var 'aux829' direct represents '0' with '3499'
c Var 'aux829' order represents '1' with '3500'
-3499 3500 0
c Var 'aux829' direct represents '1' with '3501'
3499 -3500 3501 0
-3501 3500 0
-3501 -3499 0
c Var 'aux829' direct represents '2' with '-3500'
3499 3501 -3500 0
c Encoding variable: aux830 with domain: int(0..3) (representing constraint ((x_00001_00008=2) + aux829))
c Both direct and order encoding.
c Var 'aux830' order represents '0' with '3502'
c Var 'aux830' direct represents '0' with '3502'
c Var 'aux830' order represents '1' with '3503'
-3502 3503 0
c Var 'aux830' direct represents '1' with '3504'
3502 -3503 3504 0
-3504 3503 0
-3504 -3502 0
c Var 'aux830' order represents '2' with '3505'
-3503 3505 0
c Var 'aux830' direct represents '2' with '3506'
3503 -3505 3506 0
-3506 3505 0
-3506 -3503 0
c Var 'aux830' direct represents '3' with '-3505'
3502 3504 3506 -3505 0
c Encoding variable: aux831 with domain: int(0..4) (representing constraint (aux826 + aux828))
c Both direct and order encoding.
c Var 'aux831' order represents '0' with '3507'
c Var 'aux831' direct represents '0' with '3507'
c Var 'aux831' order represents '1' with '3508'
-3507 3508 0
c Var 'aux831' direct represents '1' with '3509'
3507 -3508 3509 0
-3509 3508 0
-3509 -3507 0
c Var 'aux831' order represents '2' with '3510'
-3508 3510 0
c Var 'aux831' direct represents '2' with '3511'
3508 -3510 3511 0
-3511 3510 0
-3511 -3508 0
c Var 'aux831' order represents '3' with '3512'
-3510 3512 0
c Var 'aux831' direct represents '3' with '3513'
3510 -3512 3513 0
-3513 3512 0
-3513 -3510 0
c Var 'aux831' direct represents '4' with '-3512'
3507 3509 3511 3513 -3512 0
c Encoding variable: aux832 with domain: int(0..2) (representing constraint ((x_00003_00008=3) + (x_00005_00008=3)))
c Both direct and order encoding.
c Var 'aux832' order represents '0' with '3514'
c Var 'aux832' direct represents '0' with '3514'
c Var 'aux832' order represents '1' with '3515'
-3514 3515 0
c Var 'aux832' direct represents '1' with '3516'
3514 -3515 3516 0
-3516 3515 0
-3516 -3514 0
c Var 'aux832' direct represents '2' with '-3515'
3514 3516 -3515 0
c Encoding variable: aux833 with domain: int(0..2) (representing constraint ((x_00007_00008=3) + (x_00008_00008=3)))
c Both direct and order encoding.
c Var 'aux833' order represents '0' with '3517'
c Var 'aux833' direct represents '0' with '3517'
c Var 'aux833' order represents '1' with '3518'
-3517 3518 0
c Var 'aux833' direct represents '1' with '3519'
3517 -3518 3519 0
-3519 3518 0
-3519 -3517 0
c Var 'aux833' direct represents '2' with '-3518'
3517 3519 -3518 0
c Encoding variable: aux834 with domain: int(0..2) (representing constraint ((x_00002_00008=3) + (x_00006_00008=3)))
c Both direct and order encoding.
c Var 'aux834' order represents '0' with '3520'
c Var 'aux834' direct represents '0' with '3520'
c Var 'aux834' order represents '1' with '3521'
-3520 3521 0
c Var 'aux834' direct represents '1' with '3522'
3520 -3521 3522 0
-3522 3521 0
-3522 -3520 0
c Var 'aux834' direct represents '2' with '-3521'
3520 3522 -3521 0
c Encoding variable: aux835 with domain: int(0..2) (representing constraint ((x_00009_00008=3) + (x_00004_00008=3)))
c Both direct and order encoding.
c Var 'aux835' order represents '0' with '3523'
c Var 'aux835' direct represents '0' with '3523'
c Var 'aux835' order represents '1' with '3524'
-3523 3524 0
c Var 'aux835' direct represents '1' with '3525'
3523 -3524 3525 0
-3525 3524 0
-3525 -3523 0
c Var 'aux835' direct represents '2' with '-3524'
3523 3525 -3524 0
c Encoding variable: aux836 with domain: int(0..3) (representing constraint ((x_00001_00008=3) + aux835))
c Both direct and order encoding.
c Var 'aux836' order represents '0' with '3526'
c Var 'aux836' direct represents '0' with '3526'
c Var 'aux836' order represents '1' with '3527'
-3526 3527 0
c Var 'aux836' direct represents '1' with '3528'
3526 -3527 3528 0
-3528 3527 0
-3528 -3526 0
c Var 'aux836' order represents '2' with '3529'
-3527 3529 0
c Var 'aux836' direct represents '2' with '3530'
3527 -3529 3530 0
-3530 3529 0
-3530 -3527 0
c Var 'aux836' direct represents '3' with '-3529'
3526 3528 3530 -3529 0
c Encoding variable: aux837 with domain: int(0..4) (representing constraint (aux832 + aux834))
c Both direct and order encoding.
c Var 'aux837' order represents '0' with '3531'
c Var 'aux837' direct represents '0' with '3531'
c Var 'aux837' order represents '1' with '3532'
-3531 3532 0
c Var 'aux837' direct represents '1' with '3533'
3531 -3532 3533 0
-3533 3532 0
-3533 -3531 0
c Var 'aux837' order represents '2' with '3534'
-3532 3534 0
c Var 'aux837' direct represents '2' with '3535'
3532 -3534 3535 0
-3535 3534 0
-3535 -3532 0
c Var 'aux837' order represents '3' with '3536'
-3534 3536 0
c Var 'aux837' direct represents '3' with '3537'
3534 -3536 3537 0
-3537 3536 0
-3537 -3534 0
c Var 'aux837' direct represents '4' with '-3536'
3531 3533 3535 3537 -3536 0
c Encoding variable: aux838 with domain: int(0..2) (representing constraint ((x_00003_00008=4) + (x_00005_00008=4)))
c Both direct and order encoding.
c Var 'aux838' order represents '0' with '3538'
c Var 'aux838' direct represents '0' with '3538'
c Var 'aux838' order represents '1' with '3539'
-3538 3539 0
c Var 'aux838' direct represents '1' with '3540'
3538 -3539 3540 0
-3540 3539 0
-3540 -3538 0
c Var 'aux838' direct represents '2' with '-3539'
3538 3540 -3539 0
c Encoding variable: aux839 with domain: int(0..2) (representing constraint ((x_00007_00008=4) + (x_00008_00008=4)))
c Both direct and order encoding.
c Var 'aux839' order represents '0' with '3541'
c Var 'aux839' direct represents '0' with '3541'
c Var 'aux839' order represents '1' with '3542'
-3541 3542 0
c Var 'aux839' direct represents '1' with '3543'
3541 -3542 3543 0
-3543 3542 0
-3543 -3541 0
c Var 'aux839' direct represents '2' with '-3542'
3541 3543 -3542 0
c Encoding variable: aux840 with domain: int(0..2) (representing constraint ((x_00002_00008=4) + (x_00006_00008=4)))
c Both direct and order encoding.
c Var 'aux840' order represents '0' with '3544'
c Var 'aux840' direct represents '0' with '3544'
c Var 'aux840' order represents '1' with '3545'
-3544 3545 0
c Var 'aux840' direct represents '1' with '3546'
3544 -3545 3546 0
-3546 3545 0
-3546 -3544 0
c Var 'aux840' direct represents '2' with '-3545'
3544 3546 -3545 0
c Encoding variable: aux841 with domain: int(0..2) (representing constraint ((x_00009_00008=4) + (x_00004_00008=4)))
c Both direct and order encoding.
c Var 'aux841' order represents '0' with '3547'
c Var 'aux841' direct represents '0' with '3547'
c Var 'aux841' order represents '1' with '3548'
-3547 3548 0
c Var 'aux841' direct represents '1' with '3549'
3547 -3548 3549 0
-3549 3548 0
-3549 -3547 0
c Var 'aux841' direct represents '2' with '-3548'
3547 3549 -3548 0
c Encoding variable: aux842 with domain: int(0..3) (representing constraint ((x_00001_00008=4) + aux841))
c Both direct and order encoding.
c Var 'aux842' order represents '0' with '3550'
c Var 'aux842' direct represents '0' with '3550'
c Var 'aux842' order represents '1' with '3551'
-3550 3551 0
c Var 'aux842' direct represents '1' with '3552'
3550 -3551 3552 0
-3552 3551 0
-3552 -3550 0
c Var 'aux842' order represents '2' with '3553'
-3551 3553 0
c Var 'aux842' direct represents '2' with '3554'
3551 -3553 3554 0
-3554 3553 0
-3554 -3551 0
c Var 'aux842' direct represents '3' with '-3553'
3550 3552 3554 -3553 0
c Encoding variable: aux843 with domain: int(0..4) (representing constraint (aux838 + aux840))
c Both direct and order encoding.
c Var 'aux843' order represents '0' with '3555'
c Var 'aux843' direct represents '0' with '3555'
c Var 'aux843' order represents '1' with '3556'
-3555 3556 0
c Var 'aux843' direct represents '1' with '3557'
3555 -3556 3557 0
-3557 3556 0
-3557 -3555 0
c Var 'aux843' order represents '2' with '3558'
-3556 3558 0
c Var 'aux843' direct represents '2' with '3559'
3556 -3558 3559 0
-3559 3558 0
-3559 -3556 0
c Var 'aux843' order represents '3' with '3560'
-3558 3560 0
c Var 'aux843' direct represents '3' with '3561'
3558 -3560 3561 0
-3561 3560 0
-3561 -3558 0
c Var 'aux843' direct represents '4' with '-3560'
3555 3557 3559 3561 -3560 0
c Encoding variable: aux844 with domain: int(0..2) (representing constraint ((x_00003_00008=5) + (x_00005_00008=5)))
c Both direct and order encoding.
c Var 'aux844' order represents '0' with '3562'
c Var 'aux844' direct represents '0' with '3562'
c Var 'aux844' order represents '1' with '3563'
-3562 3563 0
c Var 'aux844' direct represents '1' with '3564'
3562 -3563 3564 0
-3564 3563 0
-3564 -3562 0
c Var 'aux844' direct represents '2' with '-3563'
3562 3564 -3563 0
c Encoding variable: aux845 with domain: int(0..2) (representing constraint ((x_00007_00008=5) + (x_00008_00008=5)))
c Both direct and order encoding.
c Var 'aux845' order represents '0' with '3565'
c Var 'aux845' direct represents '0' with '3565'
c Var 'aux845' order represents '1' with '3566'
-3565 3566 0
c Var 'aux845' direct represents '1' with '3567'
3565 -3566 3567 0
-3567 3566 0
-3567 -3565 0
c Var 'aux845' direct represents '2' with '-3566'
3565 3567 -3566 0
c Encoding variable: aux846 with domain: int(0..2) (representing constraint ((x_00002_00008=5) + (x_00006_00008=5)))
c Both direct and order encoding.
c Var 'aux846' order represents '0' with '3568'
c Var 'aux846' direct represents '0' with '3568'
c Var 'aux846' order represents '1' with '3569'
-3568 3569 0
c Var 'aux846' direct represents '1' with '3570'
3568 -3569 3570 0
-3570 3569 0
-3570 -3568 0
c Var 'aux846' direct represents '2' with '-3569'
3568 3570 -3569 0
c Encoding variable: aux847 with domain: int(0..2) (representing constraint ((x_00009_00008=5) + (x_00004_00008=5)))
c Both direct and order encoding.
c Var 'aux847' order represents '0' with '3571'
c Var 'aux847' direct represents '0' with '3571'
c Var 'aux847' order represents '1' with '3572'
-3571 3572 0
c Var 'aux847' direct represents '1' with '3573'
3571 -3572 3573 0
-3573 3572 0
-3573 -3571 0
c Var 'aux847' direct represents '2' with '-3572'
3571 3573 -3572 0
c Encoding variable: aux848 with domain: int(0..3) (representing constraint ((x_00001_00008=5) + aux847))
c Both direct and order encoding.
c Var 'aux848' order represents '0' with '3574'
c Var 'aux848' direct represents '0' with '3574'
c Var 'aux848' order represents '1' with '3575'
-3574 3575 0
c Var 'aux848' direct represents '1' with '3576'
3574 -3575 3576 0
-3576 3575 0
-3576 -3574 0
c Var 'aux848' order represents '2' with '3577'
-3575 3577 0
c Var 'aux848' direct represents '2' with '3578'
3575 -3577 3578 0
-3578 3577 0
-3578 -3575 0
c Var 'aux848' direct represents '3' with '-3577'
3574 3576 3578 -3577 0
c Encoding variable: aux849 with domain: int(0..4) (representing constraint (aux844 + aux846))
c Both direct and order encoding.
c Var 'aux849' order represents '0' with '3579'
c Var 'aux849' direct represents '0' with '3579'
c Var 'aux849' order represents '1' with '3580'
-3579 3580 0
c Var 'aux849' direct represents '1' with '3581'
3579 -3580 3581 0
-3581 3580 0
-3581 -3579 0
c Var 'aux849' order represents '2' with '3582'
-3580 3582 0
c Var 'aux849' direct represents '2' with '3583'
3580 -3582 3583 0
-3583 3582 0
-3583 -3580 0
c Var 'aux849' order represents '3' with '3584'
-3582 3584 0
c Var 'aux849' direct represents '3' with '3585'
3582 -3584 3585 0
-3585 3584 0
-3585 -3582 0
c Var 'aux849' direct represents '4' with '-3584'
3579 3581 3583 3585 -3584 0
c Encoding variable: aux850 with domain: int(0..2) (representing constraint ((x_00003_00008=6) + (x_00005_00008=6)))
c Both direct and order encoding.
c Var 'aux850' order represents '0' with '3586'
c Var 'aux850' direct represents '0' with '3586'
c Var 'aux850' order represents '1' with '3587'
-3586 3587 0
c Var 'aux850' direct represents '1' with '3588'
3586 -3587 3588 0
-3588 3587 0
-3588 -3586 0
c Var 'aux850' direct represents '2' with '-3587'
3586 3588 -3587 0
c Encoding variable: aux851 with domain: int(0..2) (representing constraint ((x_00007_00008=6) + (x_00008_00008=6)))
c Both direct and order encoding.
c Var 'aux851' order represents '0' with '3589'
c Var 'aux851' direct represents '0' with '3589'
c Var 'aux851' order represents '1' with '3590'
-3589 3590 0
c Var 'aux851' direct represents '1' with '3591'
3589 -3590 3591 0
-3591 3590 0
-3591 -3589 0
c Var 'aux851' direct represents '2' with '-3590'
3589 3591 -3590 0
c Encoding variable: aux852 with domain: int(0..2) (representing constraint ((x_00002_00008=6) + (x_00006_00008=6)))
c Both direct and order encoding.
c Var 'aux852' order represents '0' with '3592'
c Var 'aux852' direct represents '0' with '3592'
c Var 'aux852' order represents '1' with '3593'
-3592 3593 0
c Var 'aux852' direct represents '1' with '3594'
3592 -3593 3594 0
-3594 3593 0
-3594 -3592 0
c Var 'aux852' direct represents '2' with '-3593'
3592 3594 -3593 0
c Encoding variable: aux853 with domain: int(0..2) (representing constraint ((x_00009_00008=6) + (x_00004_00008=6)))
c Both direct and order encoding.
c Var 'aux853' order represents '0' with '3595'
c Var 'aux853' direct represents '0' with '3595'
c Var 'aux853' order represents '1' with '3596'
-3595 3596 0
c Var 'aux853' direct represents '1' with '3597'
3595 -3596 3597 0
-3597 3596 0
-3597 -3595 0
c Var 'aux853' direct represents '2' with '-3596'
3595 3597 -3596 0
c Encoding variable: aux854 with domain: int(0..3) (representing constraint ((x_00001_00008=6) + aux853))
c Both direct and order encoding.
c Var 'aux854' order represents '0' with '3598'
c Var 'aux854' direct represents '0' with '3598'
c Var 'aux854' order represents '1' with '3599'
-3598 3599 0
c Var 'aux854' direct represents '1' with '3600'
3598 -3599 3600 0
-3600 3599 0
-3600 -3598 0
c Var 'aux854' order represents '2' with '3601'
-3599 3601 0
c Var 'aux854' direct represents '2' with '3602'
3599 -3601 3602 0
-3602 3601 0
-3602 -3599 0
c Var 'aux854' direct represents '3' with '-3601'
3598 3600 3602 -3601 0
c Encoding variable: aux855 with domain: int(0..4) (representing constraint (aux850 + aux852))
c Both direct and order encoding.
c Var 'aux855' order represents '0' with '3603'
c Var 'aux855' direct represents '0' with '3603'
c Var 'aux855' order represents '1' with '3604'
-3603 3604 0
c Var 'aux855' direct represents '1' with '3605'
3603 -3604 3605 0
-3605 3604 0
-3605 -3603 0
c Var 'aux855' order represents '2' with '3606'
-3604 3606 0
c Var 'aux855' direct represents '2' with '3607'
3604 -3606 3607 0
-3607 3606 0
-3607 -3604 0
c Var 'aux855' order represents '3' with '3608'
-3606 3608 0
c Var 'aux855' direct represents '3' with '3609'
3606 -3608 3609 0
-3609 3608 0
-3609 -3606 0
c Var 'aux855' direct represents '4' with '-3608'
3603 3605 3607 3609 -3608 0
c Encoding variable: aux856 with domain: int(0..2) (representing constraint ((x_00003_00008=7) + (x_00005_00008=7)))
c Both direct and order encoding.
c Var 'aux856' order represents '0' with '3610'
c Var 'aux856' direct represents '0' with '3610'
c Var 'aux856' order represents '1' with '3611'
-3610 3611 0
c Var 'aux856' direct represents '1' with '3612'
3610 -3611 3612 0
-3612 3611 0
-3612 -3610 0
c Var 'aux856' direct represents '2' with '-3611'
3610 3612 -3611 0
c Encoding variable: aux857 with domain: int(0..2) (representing constraint ((x_00007_00008=7) + (x_00008_00008=7)))
c Both direct and order encoding.
c Var 'aux857' order represents '0' with '3613'
c Var 'aux857' direct represents '0' with '3613'
c Var 'aux857' order represents '1' with '3614'
-3613 3614 0
c Var 'aux857' direct represents '1' with '3615'
3613 -3614 3615 0
-3615 3614 0
-3615 -3613 0
c Var 'aux857' direct represents '2' with '-3614'
3613 3615 -3614 0
c Encoding variable: aux858 with domain: int(0..2) (representing constraint ((x_00002_00008=7) + (x_00006_00008=7)))
c Both direct and order encoding.
c Var 'aux858' order represents '0' with '3616'
c Var 'aux858' direct represents '0' with '3616'
c Var 'aux858' order represents '1' with '3617'
-3616 3617 0
c Var 'aux858' direct represents '1' with '3618'
3616 -3617 3618 0
-3618 3617 0
-3618 -3616 0
c Var 'aux858' direct represents '2' with '-3617'
3616 3618 -3617 0
c Encoding variable: aux859 with domain: int(0..2) (representing constraint ((x_00009_00008=7) + (x_00004_00008=7)))
c Both direct and order encoding.
c Var 'aux859' order represents '0' with '3619'
c Var 'aux859' direct represents '0' with '3619'
c Var 'aux859' order represents '1' with '3620'
-3619 3620 0
c Var 'aux859' direct represents '1' with '3621'
3619 -3620 3621 0
-3621 3620 0
-3621 -3619 0
c Var 'aux859' direct represents '2' with '-3620'
3619 3621 -3620 0
c Encoding variable: aux860 with domain: int(0..3) (representing constraint ((x_00001_00008=7) + aux859))
c Both direct and order encoding.
c Var 'aux860' order represents '0' with '3622'
c Var 'aux860' direct represents '0' with '3622'
c Var 'aux860' order represents '1' with '3623'
-3622 3623 0
c Var 'aux860' direct represents '1' with '3624'
3622 -3623 3624 0
-3624 3623 0
-3624 -3622 0
c Var 'aux860' order represents '2' with '3625'
-3623 3625 0
c Var 'aux860' direct represents '2' with '3626'
3623 -3625 3626 0
-3626 3625 0
-3626 -3623 0
c Var 'aux860' direct represents '3' with '-3625'
3622 3624 3626 -3625 0
c Encoding variable: aux861 with domain: int(0..4) (representing constraint (aux856 + aux858))
c Both direct and order encoding.
c Var 'aux861' order represents '0' with '3627'
c Var 'aux861' direct represents '0' with '3627'
c Var 'aux861' order represents '1' with '3628'
-3627 3628 0
c Var 'aux861' direct represents '1' with '3629'
3627 -3628 3629 0
-3629 3628 0
-3629 -3627 0
c Var 'aux861' order represents '2' with '3630'
-3628 3630 0
c Var 'aux861' direct represents '2' with '3631'
3628 -3630 3631 0
-3631 3630 0
-3631 -3628 0
c Var 'aux861' order represents '3' with '3632'
-3630 3632 0
c Var 'aux861' direct represents '3' with '3633'
3630 -3632 3633 0
-3633 3632 0
-3633 -3630 0
c Var 'aux861' direct represents '4' with '-3632'
3627 3629 3631 3633 -3632 0
c Encoding variable: aux862 with domain: int(0..2) (representing constraint ((x_00003_00008=8) + (x_00005_00008=8)))
c Both direct and order encoding.
c Var 'aux862' order represents '0' with '3634'
c Var 'aux862' direct represents '0' with '3634'
c Var 'aux862' order represents '1' with '3635'
-3634 3635 0
c Var 'aux862' direct represents '1' with '3636'
3634 -3635 3636 0
-3636 3635 0
-3636 -3634 0
c Var 'aux862' direct represents '2' with '-3635'
3634 3636 -3635 0
c Encoding variable: aux863 with domain: int(0..2) (representing constraint ((x_00007_00008=8) + (x_00008_00008=8)))
c Both direct and order encoding.
c Var 'aux863' order represents '0' with '3637'
c Var 'aux863' direct represents '0' with '3637'
c Var 'aux863' order represents '1' with '3638'
-3637 3638 0
c Var 'aux863' direct represents '1' with '3639'
3637 -3638 3639 0
-3639 3638 0
-3639 -3637 0
c Var 'aux863' direct represents '2' with '-3638'
3637 3639 -3638 0
c Encoding variable: aux864 with domain: int(0..2) (representing constraint ((x_00002_00008=8) + (x_00006_00008=8)))
c Both direct and order encoding.
c Var 'aux864' order represents '0' with '3640'
c Var 'aux864' direct represents '0' with '3640'
c Var 'aux864' order represents '1' with '3641'
-3640 3641 0
c Var 'aux864' direct represents '1' with '3642'
3640 -3641 3642 0
-3642 3641 0
-3642 -3640 0
c Var 'aux864' direct represents '2' with '-3641'
3640 3642 -3641 0
c Encoding variable: aux865 with domain: int(0..2) (representing constraint ((x_00009_00008=8) + (x_00004_00008=8)))
c Both direct and order encoding.
c Var 'aux865' order represents '0' with '3643'
c Var 'aux865' direct represents '0' with '3643'
c Var 'aux865' order represents '1' with '3644'
-3643 3644 0
c Var 'aux865' direct represents '1' with '3645'
3643 -3644 3645 0
-3645 3644 0
-3645 -3643 0
c Var 'aux865' direct represents '2' with '-3644'
3643 3645 -3644 0
c Encoding variable: aux866 with domain: int(0..3) (representing constraint ((x_00001_00008=8) + aux865))
c Both direct and order encoding.
c Var 'aux866' order represents '0' with '3646'
c Var 'aux866' direct represents '0' with '3646'
c Var 'aux866' order represents '1' with '3647'
-3646 3647 0
c Var 'aux866' direct represents '1' with '3648'
3646 -3647 3648 0
-3648 3647 0
-3648 -3646 0
c Var 'aux866' order represents '2' with '3649'
-3647 3649 0
c Var 'aux866' direct represents '2' with '3650'
3647 -3649 3650 0
-3650 3649 0
-3650 -3647 0
c Var 'aux866' direct represents '3' with '-3649'
3646 3648 3650 -3649 0
c Encoding variable: aux867 with domain: int(0..4) (representing constraint (aux862 + aux864))
c Both direct and order encoding.
c Var 'aux867' order represents '0' with '3651'
c Var 'aux867' direct represents '0' with '3651'
c Var 'aux867' order represents '1' with '3652'
-3651 3652 0
c Var 'aux867' direct represents '1' with '3653'
3651 -3652 3653 0
-3653 3652 0
-3653 -3651 0
c Var 'aux867' order represents '2' with '3654'
-3652 3654 0
c Var 'aux867' direct represents '2' with '3655'
3652 -3654 3655 0
-3655 3654 0
-3655 -3652 0
c Var 'aux867' order represents '3' with '3656'
-3654 3656 0
c Var 'aux867' direct represents '3' with '3657'
3654 -3656 3657 0
-3657 3656 0
-3657 -3654 0
c Var 'aux867' direct represents '4' with '-3656'
3651 3653 3655 3657 -3656 0
c Encoding variable: aux868 with domain: int(0..2) (representing constraint ((x_00003_00008=9) + (x_00005_00008=9)))
c Both direct and order encoding.
c Var 'aux868' order represents '0' with '3658'
c Var 'aux868' direct represents '0' with '3658'
c Var 'aux868' order represents '1' with '3659'
-3658 3659 0
c Var 'aux868' direct represents '1' with '3660'
3658 -3659 3660 0
-3660 3659 0
-3660 -3658 0
c Var 'aux868' direct represents '2' with '-3659'
3658 3660 -3659 0
c Encoding variable: aux869 with domain: int(0..2) (representing constraint ((x_00007_00008=9) + (x_00008_00008=9)))
c Both direct and order encoding.
c Var 'aux869' order represents '0' with '3661'
c Var 'aux869' direct represents '0' with '3661'
c Var 'aux869' order represents '1' with '3662'
-3661 3662 0
c Var 'aux869' direct represents '1' with '3663'
3661 -3662 3663 0
-3663 3662 0
-3663 -3661 0
c Var 'aux869' direct represents '2' with '-3662'
3661 3663 -3662 0
c Encoding variable: aux870 with domain: int(0..2) (representing constraint ((x_00002_00008=9) + (x_00006_00008=9)))
c Both direct and order encoding.
c Var 'aux870' order represents '0' with '3664'
c Var 'aux870' direct represents '0' with '3664'
c Var 'aux870' order represents '1' with '3665'
-3664 3665 0
c Var 'aux870' direct represents '1' with '3666'
3664 -3665 3666 0
-3666 3665 0
-3666 -3664 0
c Var 'aux870' direct represents '2' with '-3665'
3664 3666 -3665 0
c Encoding variable: aux871 with domain: int(0..2) (representing constraint ((x_00009_00008=9) + (x_00004_00008=9)))
c Both direct and order encoding.
c Var 'aux871' order represents '0' with '3667'
c Var 'aux871' direct represents '0' with '3667'
c Var 'aux871' order represents '1' with '3668'
-3667 3668 0
c Var 'aux871' direct represents '1' with '3669'
3667 -3668 3669 0
-3669 3668 0
-3669 -3667 0
c Var 'aux871' direct represents '2' with '-3668'
3667 3669 -3668 0
c Encoding variable: aux872 with domain: int(0..3) (representing constraint ((x_00001_00008=9) + aux871))
c Both direct and order encoding.
c Var 'aux872' order represents '0' with '3670'
c Var 'aux872' direct represents '0' with '3670'
c Var 'aux872' order represents '1' with '3671'
-3670 3671 0
c Var 'aux872' direct represents '1' with '3672'
3670 -3671 3672 0
-3672 3671 0
-3672 -3670 0
c Var 'aux872' order represents '2' with '3673'
-3671 3673 0
c Var 'aux872' direct represents '2' with '3674'
3671 -3673 3674 0
-3674 3673 0
-3674 -3671 0
c Var 'aux872' direct represents '3' with '-3673'
3670 3672 3674 -3673 0
c Encoding variable: aux873 with domain: int(0..4) (representing constraint (aux868 + aux870))
c Both direct and order encoding.
c Var 'aux873' order represents '0' with '3675'
c Var 'aux873' direct represents '0' with '3675'
c Var 'aux873' order represents '1' with '3676'
-3675 3676 0
c Var 'aux873' direct represents '1' with '3677'
3675 -3676 3677 0
-3677 3676 0
-3677 -3675 0
c Var 'aux873' order represents '2' with '3678'
-3676 3678 0
c Var 'aux873' direct represents '2' with '3679'
3676 -3678 3679 0
-3679 3678 0
-3679 -3676 0
c Var 'aux873' order represents '3' with '3680'
-3678 3680 0
c Var 'aux873' direct represents '3' with '3681'
3678 -3680 3681 0
-3681 3680 0
-3681 -3678 0
c Var 'aux873' direct represents '4' with '-3680'
3675 3677 3679 3681 -3680 0
c Encoding variable: aux874 with domain: int(0..2) (representing constraint ((x_00003_00009=1) + (x_00005_00009=1)))
c Both direct and order encoding.
c Var 'aux874' order represents '0' with '3682'
c Var 'aux874' direct represents '0' with '3682'
c Var 'aux874' order represents '1' with '3683'
-3682 3683 0
c Var 'aux874' direct represents '1' with '3684'
3682 -3683 3684 0
-3684 3683 0
-3684 -3682 0
c Var 'aux874' direct represents '2' with '-3683'
3682 3684 -3683 0
c Encoding variable: aux875 with domain: int(0..2) (representing constraint ((x_00007_00009=1) + (x_00008_00009=1)))
c Both direct and order encoding.
c Var 'aux875' order represents '0' with '3685'
c Var 'aux875' direct represents '0' with '3685'
c Var 'aux875' order represents '1' with '3686'
-3685 3686 0
c Var 'aux875' direct represents '1' with '3687'
3685 -3686 3687 0
-3687 3686 0
-3687 -3685 0
c Var 'aux875' direct represents '2' with '-3686'
3685 3687 -3686 0
c Encoding variable: aux876 with domain: int(0..2) (representing constraint ((x_00002_00009=1) + (x_00006_00009=1)))
c Both direct and order encoding.
c Var 'aux876' order represents '0' with '3688'
c Var 'aux876' direct represents '0' with '3688'
c Var 'aux876' order represents '1' with '3689'
-3688 3689 0
c Var 'aux876' direct represents '1' with '3690'
3688 -3689 3690 0
-3690 3689 0
-3690 -3688 0
c Var 'aux876' direct represents '2' with '-3689'
3688 3690 -3689 0
c Encoding variable: aux877 with domain: int(0..2) (representing constraint ((x_00009_00009=1) + (x_00004_00009=1)))
c Both direct and order encoding.
c Var 'aux877' order represents '0' with '3691'
c Var 'aux877' direct represents '0' with '3691'
c Var 'aux877' order represents '1' with '3692'
-3691 3692 0
c Var 'aux877' direct represents '1' with '3693'
3691 -3692 3693 0
-3693 3692 0
-3693 -3691 0
c Var 'aux877' direct represents '2' with '-3692'
3691 3693 -3692 0
c Encoding variable: aux878 with domain: int(0..3) (representing constraint ((x_00001_00009=1) + aux877))
c Both direct and order encoding.
c Var 'aux878' order represents '0' with '3694'
c Var 'aux878' direct represents '0' with '3694'
c Var 'aux878' order represents '1' with '3695'
-3694 3695 0
c Var 'aux878' direct represents '1' with '3696'
3694 -3695 3696 0
-3696 3695 0
-3696 -3694 0
c Var 'aux878' order represents '2' with '3697'
-3695 3697 0
c Var 'aux878' direct represents '2' with '3698'
3695 -3697 3698 0
-3698 3697 0
-3698 -3695 0
c Var 'aux878' direct represents '3' with '-3697'
3694 3696 3698 -3697 0
c Encoding variable: aux879 with domain: int(0..4) (representing constraint (aux874 + aux876))
c Both direct and order encoding.
c Var 'aux879' order represents '0' with '3699'
c Var 'aux879' direct represents '0' with '3699'
c Var 'aux879' order represents '1' with '3700'
-3699 3700 0
c Var 'aux879' direct represents '1' with '3701'
3699 -3700 3701 0
-3701 3700 0
-3701 -3699 0
c Var 'aux879' order represents '2' with '3702'
-3700 3702 0
c Var 'aux879' direct represents '2' with '3703'
3700 -3702 3703 0
-3703 3702 0
-3703 -3700 0
c Var 'aux879' order represents '3' with '3704'
-3702 3704 0
c Var 'aux879' direct represents '3' with '3705'
3702 -3704 3705 0
-3705 3704 0
-3705 -3702 0
c Var 'aux879' direct represents '4' with '-3704'
3699 3701 3703 3705 -3704 0
c Encoding variable: aux880 with domain: int(0..2) (representing constraint ((x_00003_00009=2) + (x_00005_00009=2)))
c Both direct and order encoding.
c Var 'aux880' order represents '0' with '3706'
c Var 'aux880' direct represents '0' with '3706'
c Var 'aux880' order represents '1' with '3707'
-3706 3707 0
c Var 'aux880' direct represents '1' with '3708'
3706 -3707 3708 0
-3708 3707 0
-3708 -3706 0
c Var 'aux880' direct represents '2' with '-3707'
3706 3708 -3707 0
c Encoding variable: aux881 with domain: int(0..2) (representing constraint ((x_00007_00009=2) + (x_00008_00009=2)))
c Both direct and order encoding.
c Var 'aux881' order represents '0' with '3709'
c Var 'aux881' direct represents '0' with '3709'
c Var 'aux881' order represents '1' with '3710'
-3709 3710 0
c Var 'aux881' direct represents '1' with '3711'
3709 -3710 3711 0
-3711 3710 0
-3711 -3709 0
c Var 'aux881' direct represents '2' with '-3710'
3709 3711 -3710 0
c Encoding variable: aux882 with domain: int(0..2) (representing constraint ((x_00002_00009=2) + (x_00006_00009=2)))
c Both direct and order encoding.
c Var 'aux882' order represents '0' with '3712'
c Var 'aux882' direct represents '0' with '3712'
c Var 'aux882' order represents '1' with '3713'
-3712 3713 0
c Var 'aux882' direct represents '1' with '3714'
3712 -3713 3714 0
-3714 3713 0
-3714 -3712 0
c Var 'aux882' direct represents '2' with '-3713'
3712 3714 -3713 0
c Encoding variable: aux883 with domain: int(0..2) (representing constraint ((x_00009_00009=2) + (x_00004_00009=2)))
c Both direct and order encoding.
c Var 'aux883' order represents '0' with '3715'
c Var 'aux883' direct represents '0' with '3715'
c Var 'aux883' order represents '1' with '3716'
-3715 3716 0
c Var 'aux883' direct represents '1' with '3717'
3715 -3716 3717 0
-3717 3716 0
-3717 -3715 0
c Var 'aux883' direct represents '2' with '-3716'
3715 3717 -3716 0
c Encoding variable: aux884 with domain: int(0..3) (representing constraint ((x_00001_00009=2) + aux883))
c Both direct and order encoding.
c Var 'aux884' order represents '0' with '3718'
c Var 'aux884' direct represents '0' with '3718'
c Var 'aux884' order represents '1' with '3719'
-3718 3719 0
c Var 'aux884' direct represents '1' with '3720'
3718 -3719 3720 0
-3720 3719 0
-3720 -3718 0
c Var 'aux884' order represents '2' with '3721'
-3719 3721 0
c Var 'aux884' direct represents '2' with '3722'
3719 -3721 3722 0
-3722 3721 0
-3722 -3719 0
c Var 'aux884' direct represents '3' with '-3721'
3718 3720 3722 -3721 0
c Encoding variable: aux885 with domain: int(0..4) (representing constraint (aux880 + aux882))
c Both direct and order encoding.
c Var 'aux885' order represents '0' with '3723'
c Var 'aux885' direct represents '0' with '3723'
c Var 'aux885' order represents '1' with '3724'
-3723 3724 0
c Var 'aux885' direct represents '1' with '3725'
3723 -3724 3725 0
-3725 3724 0
-3725 -3723 0
c Var 'aux885' order represents '2' with '3726'
-3724 3726 0
c Var 'aux885' direct represents '2' with '3727'
3724 -3726 3727 0
-3727 3726 0
-3727 -3724 0
c Var 'aux885' order represents '3' with '3728'
-3726 3728 0
c Var 'aux885' direct represents '3' with '3729'
3726 -3728 3729 0
-3729 3728 0
-3729 -3726 0
c Var 'aux885' direct represents '4' with '-3728'
3723 3725 3727 3729 -3728 0
c Encoding variable: aux886 with domain: int(0..2) (representing constraint ((x_00003_00009=3) + (x_00005_00009=3)))
c Both direct and order encoding.
c Var 'aux886' order represents '0' with '3730'
c Var 'aux886' direct represents '0' with '3730'
c Var 'aux886' order represents '1' with '3731'
-3730 3731 0
c Var 'aux886' direct represents '1' with '3732'
3730 -3731 3732 0
-3732 3731 0
-3732 -3730 0
c Var 'aux886' direct represents '2' with '-3731'
3730 3732 -3731 0
c Encoding variable: aux887 with domain: int(0..2) (representing constraint ((x_00007_00009=3) + (x_00008_00009=3)))
c Both direct and order encoding.
c Var 'aux887' order represents '0' with '3733'
c Var 'aux887' direct represents '0' with '3733'
c Var 'aux887' order represents '1' with '3734'
-3733 3734 0
c Var 'aux887' direct represents '1' with '3735'
3733 -3734 3735 0
-3735 3734 0
-3735 -3733 0
c Var 'aux887' direct represents '2' with '-3734'
3733 3735 -3734 0
c Encoding variable: aux888 with domain: int(0..2) (representing constraint ((x_00002_00009=3) + (x_00006_00009=3)))
c Both direct and order encoding.
c Var 'aux888' order represents '0' with '3736'
c Var 'aux888' direct represents '0' with '3736'
c Var 'aux888' order represents '1' with '3737'
-3736 3737 0
c Var 'aux888' direct represents '1' with '3738'
3736 -3737 3738 0
-3738 3737 0
-3738 -3736 0
c Var 'aux888' direct represents '2' with '-3737'
3736 3738 -3737 0
c Encoding variable: aux889 with domain: int(0..2) (representing constraint ((x_00009_00009=3) + (x_00004_00009=3)))
c Both direct and order encoding.
c Var 'aux889' order represents '0' with '3739'
c Var 'aux889' direct represents '0' with '3739'
c Var 'aux889' order represents '1' with '3740'
-3739 3740 0
c Var 'aux889' direct represents '1' with '3741'
3739 -3740 3741 0
-3741 3740 0
-3741 -3739 0
c Var 'aux889' direct represents '2' with '-3740'
3739 3741 -3740 0
c Encoding variable: aux890 with domain: int(0..3) (representing constraint ((x_00001_00009=3) + aux889))
c Both direct and order encoding.
c Var 'aux890' order represents '0' with '3742'
c Var 'aux890' direct represents '0' with '3742'
c Var 'aux890' order represents '1' with '3743'
-3742 3743 0
c Var 'aux890' direct represents '1' with '3744'
3742 -3743 3744 0
-3744 3743 0
-3744 -3742 0
c Var 'aux890' order represents '2' with '3745'
-3743 3745 0
c Var 'aux890' direct represents '2' with '3746'
3743 -3745 3746 0
-3746 3745 0
-3746 -3743 0
c Var 'aux890' direct represents '3' with '-3745'
3742 3744 3746 -3745 0
c Encoding variable: aux891 with domain: int(0..4) (representing constraint (aux886 + aux888))
c Both direct and order encoding.
c Var 'aux891' order represents '0' with '3747'
c Var 'aux891' direct represents '0' with '3747'
c Var 'aux891' order represents '1' with '3748'
-3747 3748 0
c Var 'aux891' direct represents '1' with '3749'
3747 -3748 3749 0
-3749 3748 0
-3749 -3747 0
c Var 'aux891' order represents '2' with '3750'
-3748 3750 0
c Var 'aux891' direct represents '2' with '3751'
3748 -3750 3751 0
-3751 3750 0
-3751 -3748 0
c Var 'aux891' order represents '3' with '3752'
-3750 3752 0
c Var 'aux891' direct represents '3' with '3753'
3750 -3752 3753 0
-3753 3752 0
-3753 -3750 0
c Var 'aux891' direct represents '4' with '-3752'
3747 3749 3751 3753 -3752 0
c Encoding variable: aux892 with domain: int(0..2) (representing constraint ((x_00003_00009=4) + (x_00005_00009=4)))
c Both direct and order encoding.
c Var 'aux892' order represents '0' with '3754'
c Var 'aux892' direct represents '0' with '3754'
c Var 'aux892' order represents '1' with '3755'
-3754 3755 0
c Var 'aux892' direct represents '1' with '3756'
3754 -3755 3756 0
-3756 3755 0
-3756 -3754 0
c Var 'aux892' direct represents '2' with '-3755'
3754 3756 -3755 0
c Encoding variable: aux893 with domain: int(0..2) (representing constraint ((x_00007_00009=4) + (x_00008_00009=4)))
c Both direct and order encoding.
c Var 'aux893' order represents '0' with '3757'
c Var 'aux893' direct represents '0' with '3757'
c Var 'aux893' order represents '1' with '3758'
-3757 3758 0
c Var 'aux893' direct represents '1' with '3759'
3757 -3758 3759 0
-3759 3758 0
-3759 -3757 0
c Var 'aux893' direct represents '2' with '-3758'
3757 3759 -3758 0
c Encoding variable: aux894 with domain: int(0..2) (representing constraint ((x_00002_00009=4) + (x_00006_00009=4)))
c Both direct and order encoding.
c Var 'aux894' order represents '0' with '3760'
c Var 'aux894' direct represents '0' with '3760'
c Var 'aux894' order represents '1' with '3761'
-3760 3761 0
c Var 'aux894' direct represents '1' with '3762'
3760 -3761 3762 0
-3762 3761 0
-3762 -3760 0
c Var 'aux894' direct represents '2' with '-3761'
3760 3762 -3761 0
c Encoding variable: aux895 with domain: int(0..2) (representing constraint ((x_00009_00009=4) + (x_00004_00009=4)))
c Both direct and order encoding.
c Var 'aux895' order represents '0' with '3763'
c Var 'aux895' direct represents '0' with '3763'
c Var 'aux895' order represents '1' with '3764'
-3763 3764 0
c Var 'aux895' direct represents '1' with '3765'
3763 -3764 3765 0
-3765 3764 0
-3765 -3763 0
c Var 'aux895' direct represents '2' with '-3764'
3763 3765 -3764 0
c Encoding variable: aux896 with domain: int(0..3) (representing constraint ((x_00001_00009=4) + aux895))
c Both direct and order encoding.
c Var 'aux896' order represents '0' with '3766'
c Var 'aux896' direct represents '0' with '3766'
c Var 'aux896' order represents '1' with '3767'
-3766 3767 0
c Var 'aux896' direct represents '1' with '3768'
3766 -3767 3768 0
-3768 3767 0
-3768 -3766 0
c Var 'aux896' order represents '2' with '3769'
-3767 3769 0
c Var 'aux896' direct represents '2' with '3770'
3767 -3769 3770 0
-3770 3769 0
-3770 -3767 0
c Var 'aux896' direct represents '3' with '-3769'
3766 3768 3770 -3769 0
c Encoding variable: aux897 with domain: int(0..4) (representing constraint (aux892 + aux894))
c Both direct and order encoding.
c Var 'aux897' order represents '0' with '3771'
c Var 'aux897' direct represents '0' with '3771'
c Var 'aux897' order represents '1' with '3772'
-3771 3772 0
c Var 'aux897' direct represents '1' with '3773'
3771 -3772 3773 0
-3773 3772 0
-3773 -3771 0
c Var 'aux897' order represents '2' with '3774'
-3772 3774 0
c Var 'aux897' direct represents '2' with '3775'
3772 -3774 3775 0
-3775 3774 0
-3775 -3772 0
c Var 'aux897' order represents '3' with '3776'
-3774 3776 0
c Var 'aux897' direct represents '3' with '3777'
3774 -3776 3777 0
-3777 3776 0
-3777 -3774 0
c Var 'aux897' direct represents '4' with '-3776'
3771 3773 3775 3777 -3776 0
c Encoding variable: aux898 with domain: int(0..2) (representing constraint ((x_00003_00009=5) + (x_00005_00009=5)))
c Both direct and order encoding.
c Var 'aux898' order represents '0' with '3778'
c Var 'aux898' direct represents '0' with '3778'
c Var 'aux898' order represents '1' with '3779'
-3778 3779 0
c Var 'aux898' direct represents '1' with '3780'
3778 -3779 3780 0
-3780 3779 0
-3780 -3778 0
c Var 'aux898' direct represents '2' with '-3779'
3778 3780 -3779 0
c Encoding variable: aux899 with domain: int(0..2) (representing constraint ((x_00007_00009=5) + (x_00008_00009=5)))
c Both direct and order encoding.
c Var 'aux899' order represents '0' with '3781'
c Var 'aux899' direct represents '0' with '3781'
c Var 'aux899' order represents '1' with '3782'
-3781 3782 0
c Var 'aux899' direct represents '1' with '3783'
3781 -3782 3783 0
-3783 3782 0
-3783 -3781 0
c Var 'aux899' direct represents '2' with '-3782'
3781 3783 -3782 0
c Encoding variable: aux900 with domain: int(0..2) (representing constraint ((x_00002_00009=5) + (x_00006_00009=5)))
c Both direct and order encoding.
c Var 'aux900' order represents '0' with '3784'
c Var 'aux900' direct represents '0' with '3784'
c Var 'aux900' order represents '1' with '3785'
-3784 3785 0
c Var 'aux900' direct represents '1' with '3786'
3784 -3785 3786 0
-3786 3785 0
-3786 -3784 0
c Var 'aux900' direct represents '2' with '-3785'
3784 3786 -3785 0
c Encoding variable: aux901 with domain: int(0..2) (representing constraint ((x_00009_00009=5) + (x_00004_00009=5)))
c Both direct and order encoding.
c Var 'aux901' order represents '0' with '3787'
c Var 'aux901' direct represents '0' with '3787'
c Var 'aux901' order represents '1' with '3788'
-3787 3788 0
c Var 'aux901' direct represents '1' with '3789'
3787 -3788 3789 0
-3789 3788 0
-3789 -3787 0
c Var 'aux901' direct represents '2' with '-3788'
3787 3789 -3788 0
c Encoding variable: aux902 with domain: int(0..3) (representing constraint ((x_00001_00009=5) + aux901))
c Both direct and order encoding.
c Var 'aux902' order represents '0' with '3790'
c Var 'aux902' direct represents '0' with '3790'
c Var 'aux902' order represents '1' with '3791'
-3790 3791 0
c Var 'aux902' direct represents '1' with '3792'
3790 -3791 3792 0
-3792 3791 0
-3792 -3790 0
c Var 'aux902' order represents '2' with '3793'
-3791 3793 0
c Var 'aux902' direct represents '2' with '3794'
3791 -3793 3794 0
-3794 3793 0
-3794 -3791 0
c Var 'aux902' direct represents '3' with '-3793'
3790 3792 3794 -3793 0
c Encoding variable: aux903 with domain: int(0..4) (representing constraint (aux898 + aux900))
c Both direct and order encoding.
c Var 'aux903' order represents '0' with '3795'
c Var 'aux903' direct represents '0' with '3795'
c Var 'aux903' order represents '1' with '3796'
-3795 3796 0
c Var 'aux903' direct represents '1' with '3797'
3795 -3796 3797 0
-3797 3796 0
-3797 -3795 0
c Var 'aux903' order represents '2' with '3798'
-3796 3798 0
c Var 'aux903' direct represents '2' with '3799'
3796 -3798 3799 0
-3799 3798 0
-3799 -3796 0
c Var 'aux903' order represents '3' with '3800'
-3798 3800 0
c Var 'aux903' direct represents '3' with '3801'
3798 -3800 3801 0
-3801 3800 0
-3801 -3798 0
c Var 'aux903' direct represents '4' with '-3800'
3795 3797 3799 3801 -3800 0
c Encoding variable: aux904 with domain: int(0..2) (representing constraint ((x_00003_00009=6) + (x_00005_00009=6)))
c Both direct and order encoding.
c Var 'aux904' order represents '0' with '3802'
c Var 'aux904' direct represents '0' with '3802'
c Var 'aux904' order represents '1' with '3803'
-3802 3803 0
c Var 'aux904' direct represents '1' with '3804'
3802 -3803 3804 0
-3804 3803 0
-3804 -3802 0
c Var 'aux904' direct represents '2' with '-3803'
3802 3804 -3803 0
c Encoding variable: aux905 with domain: int(0..2) (representing constraint ((x_00007_00009=6) + (x_00008_00009=6)))
c Both direct and order encoding.
c Var 'aux905' order represents '0' with '3805'
c Var 'aux905' direct represents '0' with '3805'
c Var 'aux905' order represents '1' with '3806'
-3805 3806 0
c Var 'aux905' direct represents '1' with '3807'
3805 -3806 3807 0
-3807 3806 0
-3807 -3805 0
c Var 'aux905' direct represents '2' with '-3806'
3805 3807 -3806 0
c Encoding variable: aux906 with domain: int(0..2) (representing constraint ((x_00002_00009=6) + (x_00006_00009=6)))
c Both direct and order encoding.
c Var 'aux906' order represents '0' with '3808'
c Var 'aux906' direct represents '0' with '3808'
c Var 'aux906' order represents '1' with '3809'
-3808 3809 0
c Var 'aux906' direct represents '1' with '3810'
3808 -3809 3810 0
-3810 3809 0
-3810 -3808 0
c Var 'aux906' direct represents '2' with '-3809'
3808 3810 -3809 0
c Encoding variable: aux907 with domain: int(0..2) (representing constraint ((x_00009_00009=6) + (x_00004_00009=6)))
c Both direct and order encoding.
c Var 'aux907' order represents '0' with '3811'
c Var 'aux907' direct represents '0' with '3811'
c Var 'aux907' order represents '1' with '3812'
-3811 3812 0
c Var 'aux907' direct represents '1' with '3813'
3811 -3812 3813 0
-3813 3812 0
-3813 -3811 0
c Var 'aux907' direct represents '2' with '-3812'
3811 3813 -3812 0
c Encoding variable: aux908 with domain: int(0..3) (representing constraint ((x_00001_00009=6) + aux907))
c Both direct and order encoding.
c Var 'aux908' order represents '0' with '3814'
c Var 'aux908' direct represents '0' with '3814'
c Var 'aux908' order represents '1' with '3815'
-3814 3815 0
c Var 'aux908' direct represents '1' with '3816'
3814 -3815 3816 0
-3816 3815 0
-3816 -3814 0
c Var 'aux908' order represents '2' with '3817'
-3815 3817 0
c Var 'aux908' direct represents '2' with '3818'
3815 -3817 3818 0
-3818 3817 0
-3818 -3815 0
c Var 'aux908' direct represents '3' with '-3817'
3814 3816 3818 -3817 0
c Encoding variable: aux909 with domain: int(0..4) (representing constraint (aux904 + aux906))
c Both direct and order encoding.
c Var 'aux909' order represents '0' with '3819'
c Var 'aux909' direct represents '0' with '3819'
c Var 'aux909' order represents '1' with '3820'
-3819 3820 0
c Var 'aux909' direct represents '1' with '3821'
3819 -3820 3821 0
-3821 3820 0
-3821 -3819 0
c Var 'aux909' order represents '2' with '3822'
-3820 3822 0
c Var 'aux909' direct represents '2' with '3823'
3820 -3822 3823 0
-3823 3822 0
-3823 -3820 0
c Var 'aux909' order represents '3' with '3824'
-3822 3824 0
c Var 'aux909' direct represents '3' with '3825'
3822 -3824 3825 0
-3825 3824 0
-3825 -3822 0
c Var 'aux909' direct represents '4' with '-3824'
3819 3821 3823 3825 -3824 0
c Encoding variable: aux910 with domain: int(0..2) (representing constraint ((x_00003_00009=7) + (x_00005_00009=7)))
c Both direct and order encoding.
c Var 'aux910' order represents '0' with '3826'
c Var 'aux910' direct represents '0' with '3826'
c Var 'aux910' order represents '1' with '3827'
-3826 3827 0
c Var 'aux910' direct represents '1' with '3828'
3826 -3827 3828 0
-3828 3827 0
-3828 -3826 0
c Var 'aux910' direct represents '2' with '-3827'
3826 3828 -3827 0
c Encoding variable: aux911 with domain: int(0..2) (representing constraint ((x_00007_00009=7) + (x_00008_00009=7)))
c Both direct and order encoding.
c Var 'aux911' order represents '0' with '3829'
c Var 'aux911' direct represents '0' with '3829'
c Var 'aux911' order represents '1' with '3830'
-3829 3830 0
c Var 'aux911' direct represents '1' with '3831'
3829 -3830 3831 0
-3831 3830 0
-3831 -3829 0
c Var 'aux911' direct represents '2' with '-3830'
3829 3831 -3830 0
c Encoding variable: aux912 with domain: int(0..2) (representing constraint ((x_00002_00009=7) + (x_00006_00009=7)))
c Both direct and order encoding.
c Var 'aux912' order represents '0' with '3832'
c Var 'aux912' direct represents '0' with '3832'
c Var 'aux912' order represents '1' with '3833'
-3832 3833 0
c Var 'aux912' direct represents '1' with '3834'
3832 -3833 3834 0
-3834 3833 0
-3834 -3832 0
c Var 'aux912' direct represents '2' with '-3833'
3832 3834 -3833 0
c Encoding variable: aux913 with domain: int(0..2) (representing constraint ((x_00009_00009=7) + (x_00004_00009=7)))
c Both direct and order encoding.
c Var 'aux913' order represents '0' with '3835'
c Var 'aux913' direct represents '0' with '3835'
c Var 'aux913' order represents '1' with '3836'
-3835 3836 0
c Var 'aux913' direct represents '1' with '3837'
3835 -3836 3837 0
-3837 3836 0
-3837 -3835 0
c Var 'aux913' direct represents '2' with '-3836'
3835 3837 -3836 0
c Encoding variable: aux914 with domain: int(0..3) (representing constraint ((x_00001_00009=7) + aux913))
c Both direct and order encoding.
c Var 'aux914' order represents '0' with '3838'
c Var 'aux914' direct represents '0' with '3838'
c Var 'aux914' order represents '1' with '3839'
-3838 3839 0
c Var 'aux914' direct represents '1' with '3840'
3838 -3839 3840 0
-3840 3839 0
-3840 -3838 0
c Var 'aux914' order represents '2' with '3841'
-3839 3841 0
c Var 'aux914' direct represents '2' with '3842'
3839 -3841 3842 0
-3842 3841 0
-3842 -3839 0
c Var 'aux914' direct represents '3' with '-3841'
3838 3840 3842 -3841 0
c Encoding variable: aux915 with domain: int(0..4) (representing constraint (aux910 + aux912))
c Both direct and order encoding.
c Var 'aux915' order represents '0' with '3843'
c Var 'aux915' direct represents '0' with '3843'
c Var 'aux915' order represents '1' with '3844'
-3843 3844 0
c Var 'aux915' direct represents '1' with '3845'
3843 -3844 3845 0
-3845 3844 0
-3845 -3843 0
c Var 'aux915' order represents '2' with '3846'
-3844 3846 0
c Var 'aux915' direct represents '2' with '3847'
3844 -3846 3847 0
-3847 3846 0
-3847 -3844 0
c Var 'aux915' order represents '3' with '3848'
-3846 3848 0
c Var 'aux915' direct represents '3' with '3849'
3846 -3848 3849 0
-3849 3848 0
-3849 -3846 0
c Var 'aux915' direct represents '4' with '-3848'
3843 3845 3847 3849 -3848 0
c Encoding variable: aux916 with domain: int(0..2) (representing constraint ((x_00003_00009=8) + (x_00005_00009=8)))
c Both direct and order encoding.
c Var 'aux916' order represents '0' with '3850'
c Var 'aux916' direct represents '0' with '3850'
c Var 'aux916' order represents '1' with '3851'
-3850 3851 0
c Var 'aux916' direct represents '1' with '3852'
3850 -3851 3852 0
-3852 3851 0
-3852 -3850 0
c Var 'aux916' direct represents '2' with '-3851'
3850 3852 -3851 0
c Encoding variable: aux917 with domain: int(0..2) (representing constraint ((x_00007_00009=8) + (x_00008_00009=8)))
c Both direct and order encoding.
c Var 'aux917' order represents '0' with '3853'
c Var 'aux917' direct represents '0' with '3853'
c Var 'aux917' order represents '1' with '3854'
-3853 3854 0
c Var 'aux917' direct represents '1' with '3855'
3853 -3854 3855 0
-3855 3854 0
-3855 -3853 0
c Var 'aux917' direct represents '2' with '-3854'
3853 3855 -3854 0
c Encoding variable: aux918 with domain: int(0..2) (representing constraint ((x_00002_00009=8) + (x_00006_00009=8)))
c Both direct and order encoding.
c Var 'aux918' order represents '0' with '3856'
c Var 'aux918' direct represents '0' with '3856'
c Var 'aux918' order represents '1' with '3857'
-3856 3857 0
c Var 'aux918' direct represents '1' with '3858'
3856 -3857 3858 0
-3858 3857 0
-3858 -3856 0
c Var 'aux918' direct represents '2' with '-3857'
3856 3858 -3857 0
c Encoding variable: aux919 with domain: int(0..2) (representing constraint ((x_00009_00009=8) + (x_00004_00009=8)))
c Both direct and order encoding.
c Var 'aux919' order represents '0' with '3859'
c Var 'aux919' direct represents '0' with '3859'
c Var 'aux919' order represents '1' with '3860'
-3859 3860 0
c Var 'aux919' direct represents '1' with '3861'
3859 -3860 3861 0
-3861 3860 0
-3861 -3859 0
c Var 'aux919' direct represents '2' with '-3860'
3859 3861 -3860 0
c Encoding variable: aux920 with domain: int(0..3) (representing constraint ((x_00001_00009=8) + aux919))
c Both direct and order encoding.
c Var 'aux920' order represents '0' with '3862'
c Var 'aux920' direct represents '0' with '3862'
c Var 'aux920' order represents '1' with '3863'
-3862 3863 0
c Var 'aux920' direct represents '1' with '3864'
3862 -3863 3864 0
-3864 3863 0
-3864 -3862 0
c Var 'aux920' order represents '2' with '3865'
-3863 3865 0
c Var 'aux920' direct represents '2' with '3866'
3863 -3865 3866 0
-3866 3865 0
-3866 -3863 0
c Var 'aux920' direct represents '3' with '-3865'
3862 3864 3866 -3865 0
c Encoding variable: aux921 with domain: int(0..4) (representing constraint (aux916 + aux918))
c Both direct and order encoding.
c Var 'aux921' order represents '0' with '3867'
c Var 'aux921' direct represents '0' with '3867'
c Var 'aux921' order represents '1' with '3868'
-3867 3868 0
c Var 'aux921' direct represents '1' with '3869'
3867 -3868 3869 0
-3869 3868 0
-3869 -3867 0
c Var 'aux921' order represents '2' with '3870'
-3868 3870 0
c Var 'aux921' direct represents '2' with '3871'
3868 -3870 3871 0
-3871 3870 0
-3871 -3868 0
c Var 'aux921' order represents '3' with '3872'
-3870 3872 0
c Var 'aux921' direct represents '3' with '3873'
3870 -3872 3873 0
-3873 3872 0
-3873 -3870 0
c Var 'aux921' direct represents '4' with '-3872'
3867 3869 3871 3873 -3872 0
c Encoding variable: aux922 with domain: int(0..2) (representing constraint ((x_00003_00009=9) + (x_00005_00009=9)))
c Both direct and order encoding.
c Var 'aux922' order represents '0' with '3874'
c Var 'aux922' direct represents '0' with '3874'
c Var 'aux922' order represents '1' with '3875'
-3874 3875 0
c Var 'aux922' direct represents '1' with '3876'
3874 -3875 3876 0
-3876 3875 0
-3876 -3874 0
c Var 'aux922' direct represents '2' with '-3875'
3874 3876 -3875 0
c Encoding variable: aux923 with domain: int(0..2) (representing constraint ((x_00007_00009=9) + (x_00008_00009=9)))
c Both direct and order encoding.
c Var 'aux923' order represents '0' with '3877'
c Var 'aux923' direct represents '0' with '3877'
c Var 'aux923' order represents '1' with '3878'
-3877 3878 0
c Var 'aux923' direct represents '1' with '3879'
3877 -3878 3879 0
-3879 3878 0
-3879 -3877 0
c Var 'aux923' direct represents '2' with '-3878'
3877 3879 -3878 0
c Encoding variable: aux924 with domain: int(0..2) (representing constraint ((x_00002_00009=9) + (x_00006_00009=9)))
c Both direct and order encoding.
c Var 'aux924' order represents '0' with '3880'
c Var 'aux924' direct represents '0' with '3880'
c Var 'aux924' order represents '1' with '3881'
-3880 3881 0
c Var 'aux924' direct represents '1' with '3882'
3880 -3881 3882 0
-3882 3881 0
-3882 -3880 0
c Var 'aux924' direct represents '2' with '-3881'
3880 3882 -3881 0
c Encoding variable: aux925 with domain: int(0..2) (representing constraint ((x_00009_00009=9) + (x_00004_00009=9)))
c Both direct and order encoding.
c Var 'aux925' order represents '0' with '3883'
c Var 'aux925' direct represents '0' with '3883'
c Var 'aux925' order represents '1' with '3884'
-3883 3884 0
c Var 'aux925' direct represents '1' with '3885'
3883 -3884 3885 0
-3885 3884 0
-3885 -3883 0
c Var 'aux925' direct represents '2' with '-3884'
3883 3885 -3884 0
c Encoding variable: aux926 with domain: int(0..3) (representing constraint ((x_00001_00009=9) + aux925))
c Both direct and order encoding.
c Var 'aux926' order represents '0' with '3886'
c Var 'aux926' direct represents '0' with '3886'
c Var 'aux926' order represents '1' with '3887'
-3886 3887 0
c Var 'aux926' direct represents '1' with '3888'
3886 -3887 3888 0
-3888 3887 0
-3888 -3886 0
c Var 'aux926' order represents '2' with '3889'
-3887 3889 0
c Var 'aux926' direct represents '2' with '3890'
3887 -3889 3890 0
-3890 3889 0
-3890 -3887 0
c Var 'aux926' direct represents '3' with '-3889'
3886 3888 3890 -3889 0
c Encoding variable: aux927 with domain: int(0..4) (representing constraint (aux922 + aux924))
c Both direct and order encoding.
c Var 'aux927' order represents '0' with '3891'
c Var 'aux927' direct represents '0' with '3891'
c Var 'aux927' order represents '1' with '3892'
-3891 3892 0
c Var 'aux927' direct represents '1' with '3893'
3891 -3892 3893 0
-3893 3892 0
-3893 -3891 0
c Var 'aux927' order represents '2' with '3894'
-3892 3894 0
c Var 'aux927' direct represents '2' with '3895'
3892 -3894 3895 0
-3895 3894 0
-3895 -3892 0
c Var 'aux927' order represents '3' with '3896'
-3894 3896 0
c Var 'aux927' direct represents '3' with '3897'
3894 -3896 3897 0
-3897 3896 0
-3897 -3894 0
c Var 'aux927' direct represents '4' with '-3896'
3891 3893 3895 3897 -3896 0
c Encoding variable: aux928 with domain: int(0..2) (representing constraint ((x_00001_00001=1) + (x_00001_00009=1)))
c Both direct and order encoding.
c Var 'aux928' order represents '0' with '3898'
c Var 'aux928' direct represents '0' with '3898'
c Var 'aux928' order represents '1' with '3899'
-3898 3899 0
c Var 'aux928' direct represents '1' with '3900'
3898 -3899 3900 0
-3900 3899 0
-3900 -3898 0
c Var 'aux928' direct represents '2' with '-3899'
3898 3900 -3899 0
c Encoding variable: aux929 with domain: int(0..2) (representing constraint ((x_00001_00008=1) + (x_00001_00002=1)))
c Both direct and order encoding.
c Var 'aux929' order represents '0' with '3901'
c Var 'aux929' direct represents '0' with '3901'
c Var 'aux929' order represents '1' with '3902'
-3901 3902 0
c Var 'aux929' direct represents '1' with '3903'
3901 -3902 3903 0
-3903 3902 0
-3903 -3901 0
c Var 'aux929' direct represents '2' with '-3902'
3901 3903 -3902 0
c Encoding variable: aux930 with domain: int(0..2) (representing constraint ((x_00001_00007=1) + (x_00001_00004=1)))
c Both direct and order encoding.
c Var 'aux930' order represents '0' with '3904'
c Var 'aux930' direct represents '0' with '3904'
c Var 'aux930' order represents '1' with '3905'
-3904 3905 0
c Var 'aux930' direct represents '1' with '3906'
3904 -3905 3906 0
-3906 3905 0
-3906 -3904 0
c Var 'aux930' direct represents '2' with '-3905'
3904 3906 -3905 0
c Encoding variable: aux931 with domain: int(0..2) (representing constraint ((x_00001_00006=1) + (x_00001_00005=1)))
c Both direct and order encoding.
c Var 'aux931' order represents '0' with '3907'
c Var 'aux931' direct represents '0' with '3907'
c Var 'aux931' order represents '1' with '3908'
-3907 3908 0
c Var 'aux931' direct represents '1' with '3909'
3907 -3908 3909 0
-3909 3908 0
-3909 -3907 0
c Var 'aux931' direct represents '2' with '-3908'
3907 3909 -3908 0
c Encoding variable: aux932 with domain: int(0..3) (representing constraint ((x_00001_00003=1) + aux931))
c Both direct and order encoding.
c Var 'aux932' order represents '0' with '3910'
c Var 'aux932' direct represents '0' with '3910'
c Var 'aux932' order represents '1' with '3911'
-3910 3911 0
c Var 'aux932' direct represents '1' with '3912'
3910 -3911 3912 0
-3912 3911 0
-3912 -3910 0
c Var 'aux932' order represents '2' with '3913'
-3911 3913 0
c Var 'aux932' direct represents '2' with '3914'
3911 -3913 3914 0
-3914 3913 0
-3914 -3911 0
c Var 'aux932' direct represents '3' with '-3913'
3910 3912 3914 -3913 0
c Encoding variable: aux933 with domain: int(0..4) (representing constraint (aux928 + aux930))
c Both direct and order encoding.
c Var 'aux933' order represents '0' with '3915'
c Var 'aux933' direct represents '0' with '3915'
c Var 'aux933' order represents '1' with '3916'
-3915 3916 0
c Var 'aux933' direct represents '1' with '3917'
3915 -3916 3917 0
-3917 3916 0
-3917 -3915 0
c Var 'aux933' order represents '2' with '3918'
-3916 3918 0
c Var 'aux933' direct represents '2' with '3919'
3916 -3918 3919 0
-3919 3918 0
-3919 -3916 0
c Var 'aux933' order represents '3' with '3920'
-3918 3920 0
c Var 'aux933' direct represents '3' with '3921'
3918 -3920 3921 0
-3921 3920 0
-3921 -3918 0
c Var 'aux933' direct represents '4' with '-3920'
3915 3917 3919 3921 -3920 0
c Encoding variable: aux934 with domain: int(0..2) (representing constraint ((x_00001_00001=2) + (x_00001_00009=2)))
c Both direct and order encoding.
c Var 'aux934' order represents '0' with '3922'
c Var 'aux934' direct represents '0' with '3922'
c Var 'aux934' order represents '1' with '3923'
-3922 3923 0
c Var 'aux934' direct represents '1' with '3924'
3922 -3923 3924 0
-3924 3923 0
-3924 -3922 0
c Var 'aux934' direct represents '2' with '-3923'
3922 3924 -3923 0
c Encoding variable: aux935 with domain: int(0..2) (representing constraint ((x_00001_00008=2) + (x_00001_00002=2)))
c Both direct and order encoding.
c Var 'aux935' order represents '0' with '3925'
c Var 'aux935' direct represents '0' with '3925'
c Var 'aux935' order represents '1' with '3926'
-3925 3926 0
c Var 'aux935' direct represents '1' with '3927'
3925 -3926 3927 0
-3927 3926 0
-3927 -3925 0
c Var 'aux935' direct represents '2' with '-3926'
3925 3927 -3926 0
c Encoding variable: aux936 with domain: int(0..2) (representing constraint ((x_00001_00007=2) + (x_00001_00004=2)))
c Both direct and order encoding.
c Var 'aux936' order represents '0' with '3928'
c Var 'aux936' direct represents '0' with '3928'
c Var 'aux936' order represents '1' with '3929'
-3928 3929 0
c Var 'aux936' direct represents '1' with '3930'
3928 -3929 3930 0
-3930 3929 0
-3930 -3928 0
c Var 'aux936' direct represents '2' with '-3929'
3928 3930 -3929 0
c Encoding variable: aux937 with domain: int(0..2) (representing constraint ((x_00001_00006=2) + (x_00001_00005=2)))
c Both direct and order encoding.
c Var 'aux937' order represents '0' with '3931'
c Var 'aux937' direct represents '0' with '3931'
c Var 'aux937' order represents '1' with '3932'
-3931 3932 0
c Var 'aux937' direct represents '1' with '3933'
3931 -3932 3933 0
-3933 3932 0
-3933 -3931 0
c Var 'aux937' direct represents '2' with '-3932'
3931 3933 -3932 0
c Encoding variable: aux938 with domain: int(0..3) (representing constraint ((x_00001_00003=2) + aux937))
c Both direct and order encoding.
c Var 'aux938' order represents '0' with '3934'
c Var 'aux938' direct represents '0' with '3934'
c Var 'aux938' order represents '1' with '3935'
-3934 3935 0
c Var 'aux938' direct represents '1' with '3936'
3934 -3935 3936 0
-3936 3935 0
-3936 -3934 0
c Var 'aux938' order represents '2' with '3937'
-3935 3937 0
c Var 'aux938' direct represents '2' with '3938'
3935 -3937 3938 0
-3938 3937 0
-3938 -3935 0
c Var 'aux938' direct represents '3' with '-3937'
3934 3936 3938 -3937 0
c Encoding variable: aux939 with domain: int(0..4) (representing constraint (aux934 + aux936))
c Both direct and order encoding.
c Var 'aux939' order represents '0' with '3939'
c Var 'aux939' direct represents '0' with '3939'
c Var 'aux939' order represents '1' with '3940'
-3939 3940 0
c Var 'aux939' direct represents '1' with '3941'
3939 -3940 3941 0
-3941 3940 0
-3941 -3939 0
c Var 'aux939' order represents '2' with '3942'
-3940 3942 0
c Var 'aux939' direct represents '2' with '3943'
3940 -3942 3943 0
-3943 3942 0
-3943 -3940 0
c Var 'aux939' order represents '3' with '3944'
-3942 3944 0
c Var 'aux939' direct represents '3' with '3945'
3942 -3944 3945 0
-3945 3944 0
-3945 -3942 0
c Var 'aux939' direct represents '4' with '-3944'
3939 3941 3943 3945 -3944 0
c Encoding variable: aux940 with domain: int(0..2) (representing constraint ((x_00001_00001=3) + (x_00001_00009=3)))
c Both direct and order encoding.
c Var 'aux940' order represents '0' with '3946'
c Var 'aux940' direct represents '0' with '3946'
c Var 'aux940' order represents '1' with '3947'
-3946 3947 0
c Var 'aux940' direct represents '1' with '3948'
3946 -3947 3948 0
-3948 3947 0
-3948 -3946 0
c Var 'aux940' direct represents '2' with '-3947'
3946 3948 -3947 0
c Encoding variable: aux941 with domain: int(0..2) (representing constraint ((x_00001_00008=3) + (x_00001_00002=3)))
c Both direct and order encoding.
c Var 'aux941' order represents '0' with '3949'
c Var 'aux941' direct represents '0' with '3949'
c Var 'aux941' order represents '1' with '3950'
-3949 3950 0
c Var 'aux941' direct represents '1' with '3951'
3949 -3950 3951 0
-3951 3950 0
-3951 -3949 0
c Var 'aux941' direct represents '2' with '-3950'
3949 3951 -3950 0
c Encoding variable: aux942 with domain: int(0..2) (representing constraint ((x_00001_00007=3) + (x_00001_00004=3)))
c Both direct and order encoding.
c Var 'aux942' order represents '0' with '3952'
c Var 'aux942' direct represents '0' with '3952'
c Var 'aux942' order represents '1' with '3953'
-3952 3953 0
c Var 'aux942' direct represents '1' with '3954'
3952 -3953 3954 0
-3954 3953 0
-3954 -3952 0
c Var 'aux942' direct represents '2' with '-3953'
3952 3954 -3953 0
c Encoding variable: aux943 with domain: int(0..2) (representing constraint ((x_00001_00006=3) + (x_00001_00005=3)))
c Both direct and order encoding.
c Var 'aux943' order represents '0' with '3955'
c Var 'aux943' direct represents '0' with '3955'
c Var 'aux943' order represents '1' with '3956'
-3955 3956 0
c Var 'aux943' direct represents '1' with '3957'
3955 -3956 3957 0
-3957 3956 0
-3957 -3955 0
c Var 'aux943' direct represents '2' with '-3956'
3955 3957 -3956 0
c Encoding variable: aux944 with domain: int(0..3) (representing constraint ((x_00001_00003=3) + aux943))
c Both direct and order encoding.
c Var 'aux944' order represents '0' with '3958'
c Var 'aux944' direct represents '0' with '3958'
c Var 'aux944' order represents '1' with '3959'
-3958 3959 0
c Var 'aux944' direct represents '1' with '3960'
3958 -3959 3960 0
-3960 3959 0
-3960 -3958 0
c Var 'aux944' order represents '2' with '3961'
-3959 3961 0
c Var 'aux944' direct represents '2' with '3962'
3959 -3961 3962 0
-3962 3961 0
-3962 -3959 0
c Var 'aux944' direct represents '3' with '-3961'
3958 3960 3962 -3961 0
c Encoding variable: aux945 with domain: int(0..4) (representing constraint (aux940 + aux942))
c Both direct and order encoding.
c Var 'aux945' order represents '0' with '3963'
c Var 'aux945' direct represents '0' with '3963'
c Var 'aux945' order represents '1' with '3964'
-3963 3964 0
c Var 'aux945' direct represents '1' with '3965'
3963 -3964 3965 0
-3965 3964 0
-3965 -3963 0
c Var 'aux945' order represents '2' with '3966'
-3964 3966 0
c Var 'aux945' direct represents '2' with '3967'
3964 -3966 3967 0
-3967 3966 0
-3967 -3964 0
c Var 'aux945' order represents '3' with '3968'
-3966 3968 0
c Var 'aux945' direct represents '3' with '3969'
3966 -3968 3969 0
-3969 3968 0
-3969 -3966 0
c Var 'aux945' direct represents '4' with '-3968'
3963 3965 3967 3969 -3968 0
c Encoding variable: aux946 with domain: int(0..2) (representing constraint ((x_00001_00001=4) + (x_00001_00009=4)))
c Both direct and order encoding.
c Var 'aux946' order represents '0' with '3970'
c Var 'aux946' direct represents '0' with '3970'
c Var 'aux946' order represents '1' with '3971'
-3970 3971 0
c Var 'aux946' direct represents '1' with '3972'
3970 -3971 3972 0
-3972 3971 0
-3972 -3970 0
c Var 'aux946' direct represents '2' with '-3971'
3970 3972 -3971 0
c Encoding variable: aux947 with domain: int(0..2) (representing constraint ((x_00001_00008=4) + (x_00001_00002=4)))
c Both direct and order encoding.
c Var 'aux947' order represents '0' with '3973'
c Var 'aux947' direct represents '0' with '3973'
c Var 'aux947' order represents '1' with '3974'
-3973 3974 0
c Var 'aux947' direct represents '1' with '3975'
3973 -3974 3975 0
-3975 3974 0
-3975 -3973 0
c Var 'aux947' direct represents '2' with '-3974'
3973 3975 -3974 0
c Encoding variable: aux948 with domain: int(0..2) (representing constraint ((x_00001_00007=4) + (x_00001_00004=4)))
c Both direct and order encoding.
c Var 'aux948' order represents '0' with '3976'
c Var 'aux948' direct represents '0' with '3976'
c Var 'aux948' order represents '1' with '3977'
-3976 3977 0
c Var 'aux948' direct represents '1' with '3978'
3976 -3977 3978 0
-3978 3977 0
-3978 -3976 0
c Var 'aux948' direct represents '2' with '-3977'
3976 3978 -3977 0
c Encoding variable: aux949 with domain: int(0..2) (representing constraint ((x_00001_00006=4) + (x_00001_00005=4)))
c Both direct and order encoding.
c Var 'aux949' order represents '0' with '3979'
c Var 'aux949' direct represents '0' with '3979'
c Var 'aux949' order represents '1' with '3980'
-3979 3980 0
c Var 'aux949' direct represents '1' with '3981'
3979 -3980 3981 0
-3981 3980 0
-3981 -3979 0
c Var 'aux949' direct represents '2' with '-3980'
3979 3981 -3980 0
c Encoding variable: aux950 with domain: int(0..3) (representing constraint ((x_00001_00003=4) + aux949))
c Both direct and order encoding.
c Var 'aux950' order represents '0' with '3982'
c Var 'aux950' direct represents '0' with '3982'
c Var 'aux950' order represents '1' with '3983'
-3982 3983 0
c Var 'aux950' direct represents '1' with '3984'
3982 -3983 3984 0
-3984 3983 0
-3984 -3982 0
c Var 'aux950' order represents '2' with '3985'
-3983 3985 0
c Var 'aux950' direct represents '2' with '3986'
3983 -3985 3986 0
-3986 3985 0
-3986 -3983 0
c Var 'aux950' direct represents '3' with '-3985'
3982 3984 3986 -3985 0
c Encoding variable: aux951 with domain: int(0..4) (representing constraint (aux946 + aux948))
c Both direct and order encoding.
c Var 'aux951' order represents '0' with '3987'
c Var 'aux951' direct represents '0' with '3987'
c Var 'aux951' order represents '1' with '3988'
-3987 3988 0
c Var 'aux951' direct represents '1' with '3989'
3987 -3988 3989 0
-3989 3988 0
-3989 -3987 0
c Var 'aux951' order represents '2' with '3990'
-3988 3990 0
c Var 'aux951' direct represents '2' with '3991'
3988 -3990 3991 0
-3991 3990 0
-3991 -3988 0
c Var 'aux951' order represents '3' with '3992'
-3990 3992 0
c Var 'aux951' direct represents '3' with '3993'
3990 -3992 3993 0
-3993 3992 0
-3993 -3990 0
c Var 'aux951' direct represents '4' with '-3992'
3987 3989 3991 3993 -3992 0
c Encoding variable: aux952 with domain: int(0..2) (representing constraint ((x_00001_00001=5) + (x_00001_00009=5)))
c Both direct and order encoding.
c Var 'aux952' order represents '0' with '3994'
c Var 'aux952' direct represents '0' with '3994'
c Var 'aux952' order represents '1' with '3995'
-3994 3995 0
c Var 'aux952' direct represents '1' with '3996'
3994 -3995 3996 0
-3996 3995 0
-3996 -3994 0
c Var 'aux952' direct represents '2' with '-3995'
3994 3996 -3995 0
c Encoding variable: aux953 with domain: int(0..2) (representing constraint ((x_00001_00008=5) + (x_00001_00002=5)))
c Both direct and order encoding.
c Var 'aux953' order represents '0' with '3997'
c Var 'aux953' direct represents '0' with '3997'
c Var 'aux953' order represents '1' with '3998'
-3997 3998 0
c Var 'aux953' direct represents '1' with '3999'
3997 -3998 3999 0
-3999 3998 0
-3999 -3997 0
c Var 'aux953' direct represents '2' with '-3998'
3997 3999 -3998 0
c Encoding variable: aux954 with domain: int(0..2) (representing constraint ((x_00001_00007=5) + (x_00001_00004=5)))
c Both direct and order encoding.
c Var 'aux954' order represents '0' with '4000'
c Var 'aux954' direct represents '0' with '4000'
c Var 'aux954' order represents '1' with '4001'
-4000 4001 0
c Var 'aux954' direct represents '1' with '4002'
4000 -4001 4002 0
-4002 4001 0
-4002 -4000 0
c Var 'aux954' direct represents '2' with '-4001'
4000 4002 -4001 0
c Encoding variable: aux955 with domain: int(0..2) (representing constraint ((x_00001_00006=5) + (x_00001_00005=5)))
c Both direct and order encoding.
c Var 'aux955' order represents '0' with '4003'
c Var 'aux955' direct represents '0' with '4003'
c Var 'aux955' order represents '1' with '4004'
-4003 4004 0
c Var 'aux955' direct represents '1' with '4005'
4003 -4004 4005 0
-4005 4004 0
-4005 -4003 0
c Var 'aux955' direct represents '2' with '-4004'
4003 4005 -4004 0
c Encoding variable: aux956 with domain: int(0..3) (representing constraint ((x_00001_00003=5) + aux955))
c Both direct and order encoding.
c Var 'aux956' order represents '0' with '4006'
c Var 'aux956' direct represents '0' with '4006'
c Var 'aux956' order represents '1' with '4007'
-4006 4007 0
c Var 'aux956' direct represents '1' with '4008'
4006 -4007 4008 0
-4008 4007 0
-4008 -4006 0
c Var 'aux956' order represents '2' with '4009'
-4007 4009 0
c Var 'aux956' direct represents '2' with '4010'
4007 -4009 4010 0
-4010 4009 0
-4010 -4007 0
c Var 'aux956' direct represents '3' with '-4009'
4006 4008 4010 -4009 0
c Encoding variable: aux957 with domain: int(0..4) (representing constraint (aux952 + aux954))
c Both direct and order encoding.
c Var 'aux957' order represents '0' with '4011'
c Var 'aux957' direct represents '0' with '4011'
c Var 'aux957' order represents '1' with '4012'
-4011 4012 0
c Var 'aux957' direct represents '1' with '4013'
4011 -4012 4013 0
-4013 4012 0
-4013 -4011 0
c Var 'aux957' order represents '2' with '4014'
-4012 4014 0
c Var 'aux957' direct represents '2' with '4015'
4012 -4014 4015 0
-4015 4014 0
-4015 -4012 0
c Var 'aux957' order represents '3' with '4016'
-4014 4016 0
c Var 'aux957' direct represents '3' with '4017'
4014 -4016 4017 0
-4017 4016 0
-4017 -4014 0
c Var 'aux957' direct represents '4' with '-4016'
4011 4013 4015 4017 -4016 0
c Encoding variable: aux958 with domain: int(0..2) (representing constraint ((x_00001_00001=6) + (x_00001_00009=6)))
c Both direct and order encoding.
c Var 'aux958' order represents '0' with '4018'
c Var 'aux958' direct represents '0' with '4018'
c Var 'aux958' order represents '1' with '4019'
-4018 4019 0
c Var 'aux958' direct represents '1' with '4020'
4018 -4019 4020 0
-4020 4019 0
-4020 -4018 0
c Var 'aux958' direct represents '2' with '-4019'
4018 4020 -4019 0
c Encoding variable: aux959 with domain: int(0..2) (representing constraint ((x_00001_00008=6) + (x_00001_00002=6)))
c Both direct and order encoding.
c Var 'aux959' order represents '0' with '4021'
c Var 'aux959' direct represents '0' with '4021'
c Var 'aux959' order represents '1' with '4022'
-4021 4022 0
c Var 'aux959' direct represents '1' with '4023'
4021 -4022 4023 0
-4023 4022 0
-4023 -4021 0
c Var 'aux959' direct represents '2' with '-4022'
4021 4023 -4022 0
c Encoding variable: aux960 with domain: int(0..2) (representing constraint ((x_00001_00007=6) + (x_00001_00004=6)))
c Both direct and order encoding.
c Var 'aux960' order represents '0' with '4024'
c Var 'aux960' direct represents '0' with '4024'
c Var 'aux960' order represents '1' with '4025'
-4024 4025 0
c Var 'aux960' direct represents '1' with '4026'
4024 -4025 4026 0
-4026 4025 0
-4026 -4024 0
c Var 'aux960' direct represents '2' with '-4025'
4024 4026 -4025 0
c Encoding variable: aux961 with domain: int(0..2) (representing constraint ((x_00001_00006=6) + (x_00001_00005=6)))
c Both direct and order encoding.
c Var 'aux961' order represents '0' with '4027'
c Var 'aux961' direct represents '0' with '4027'
c Var 'aux961' order represents '1' with '4028'
-4027 4028 0
c Var 'aux961' direct represents '1' with '4029'
4027 -4028 4029 0
-4029 4028 0
-4029 -4027 0
c Var 'aux961' direct represents '2' with '-4028'
4027 4029 -4028 0
c Encoding variable: aux962 with domain: int(0..3) (representing constraint ((x_00001_00003=6) + aux961))
c Both direct and order encoding.
c Var 'aux962' order represents '0' with '4030'
c Var 'aux962' direct represents '0' with '4030'
c Var 'aux962' order represents '1' with '4031'
-4030 4031 0
c Var 'aux962' direct represents '1' with '4032'
4030 -4031 4032 0
-4032 4031 0
-4032 -4030 0
c Var 'aux962' order represents '2' with '4033'
-4031 4033 0
c Var 'aux962' direct represents '2' with '4034'
4031 -4033 4034 0
-4034 4033 0
-4034 -4031 0
c Var 'aux962' direct represents '3' with '-4033'
4030 4032 4034 -4033 0
c Encoding variable: aux963 with domain: int(0..4) (representing constraint (aux958 + aux960))
c Both direct and order encoding.
c Var 'aux963' order represents '0' with '4035'
c Var 'aux963' direct represents '0' with '4035'
c Var 'aux963' order represents '1' with '4036'
-4035 4036 0
c Var 'aux963' direct represents '1' with '4037'
4035 -4036 4037 0
-4037 4036 0
-4037 -4035 0
c Var 'aux963' order represents '2' with '4038'
-4036 4038 0
c Var 'aux963' direct represents '2' with '4039'
4036 -4038 4039 0
-4039 4038 0
-4039 -4036 0
c Var 'aux963' order represents '3' with '4040'
-4038 4040 0
c Var 'aux963' direct represents '3' with '4041'
4038 -4040 4041 0
-4041 4040 0
-4041 -4038 0
c Var 'aux963' direct represents '4' with '-4040'
4035 4037 4039 4041 -4040 0
c Encoding variable: aux964 with domain: int(0..2) (representing constraint ((x_00001_00001=7) + (x_00001_00009=7)))
c Both direct and order encoding.
c Var 'aux964' order represents '0' with '4042'
c Var 'aux964' direct represents '0' with '4042'
c Var 'aux964' order represents '1' with '4043'
-4042 4043 0
c Var 'aux964' direct represents '1' with '4044'
4042 -4043 4044 0
-4044 4043 0
-4044 -4042 0
c Var 'aux964' direct represents '2' with '-4043'
4042 4044 -4043 0
c Encoding variable: aux965 with domain: int(0..2) (representing constraint ((x_00001_00008=7) + (x_00001_00002=7)))
c Both direct and order encoding.
c Var 'aux965' order represents '0' with '4045'
c Var 'aux965' direct represents '0' with '4045'
c Var 'aux965' order represents '1' with '4046'
-4045 4046 0
c Var 'aux965' direct represents '1' with '4047'
4045 -4046 4047 0
-4047 4046 0
-4047 -4045 0
c Var 'aux965' direct represents '2' with '-4046'
4045 4047 -4046 0
c Encoding variable: aux966 with domain: int(0..2) (representing constraint ((x_00001_00007=7) + (x_00001_00004=7)))
c Both direct and order encoding.
c Var 'aux966' order represents '0' with '4048'
c Var 'aux966' direct represents '0' with '4048'
c Var 'aux966' order represents '1' with '4049'
-4048 4049 0
c Var 'aux966' direct represents '1' with '4050'
4048 -4049 4050 0
-4050 4049 0
-4050 -4048 0
c Var 'aux966' direct represents '2' with '-4049'
4048 4050 -4049 0
c Encoding variable: aux967 with domain: int(0..2) (representing constraint ((x_00001_00006=7) + (x_00001_00005=7)))
c Both direct and order encoding.
c Var 'aux967' order represents '0' with '4051'
c Var 'aux967' direct represents '0' with '4051'
c Var 'aux967' order represents '1' with '4052'
-4051 4052 0
c Var 'aux967' direct represents '1' with '4053'
4051 -4052 4053 0
-4053 4052 0
-4053 -4051 0
c Var 'aux967' direct represents '2' with '-4052'
4051 4053 -4052 0
c Encoding variable: aux968 with domain: int(0..3) (representing constraint ((x_00001_00003=7) + aux967))
c Both direct and order encoding.
c Var 'aux968' order represents '0' with '4054'
c Var 'aux968' direct represents '0' with '4054'
c Var 'aux968' order represents '1' with '4055'
-4054 4055 0
c Var 'aux968' direct represents '1' with '4056'
4054 -4055 4056 0
-4056 4055 0
-4056 -4054 0
c Var 'aux968' order represents '2' with '4057'
-4055 4057 0
c Var 'aux968' direct represents '2' with '4058'
4055 -4057 4058 0
-4058 4057 0
-4058 -4055 0
c Var 'aux968' direct represents '3' with '-4057'
4054 4056 4058 -4057 0
c Encoding variable: aux969 with domain: int(0..4) (representing constraint (aux964 + aux966))
c Both direct and order encoding.
c Var 'aux969' order represents '0' with '4059'
c Var 'aux969' direct represents '0' with '4059'
c Var 'aux969' order represents '1' with '4060'
-4059 4060 0
c Var 'aux969' direct represents '1' with '4061'
4059 -4060 4061 0
-4061 4060 0
-4061 -4059 0
c Var 'aux969' order represents '2' with '4062'
-4060 4062 0
c Var 'aux969' direct represents '2' with '4063'
4060 -4062 4063 0
-4063 4062 0
-4063 -4060 0
c Var 'aux969' order represents '3' with '4064'
-4062 4064 0
c Var 'aux969' direct represents '3' with '4065'
4062 -4064 4065 0
-4065 4064 0
-4065 -4062 0
c Var 'aux969' direct represents '4' with '-4064'
4059 4061 4063 4065 -4064 0
c Encoding variable: aux970 with domain: int(0..2) (representing constraint ((x_00001_00001=8) + (x_00001_00009=8)))
c Both direct and order encoding.
c Var 'aux970' order represents '0' with '4066'
c Var 'aux970' direct represents '0' with '4066'
c Var 'aux970' order represents '1' with '4067'
-4066 4067 0
c Var 'aux970' direct represents '1' with '4068'
4066 -4067 4068 0
-4068 4067 0
-4068 -4066 0
c Var 'aux970' direct represents '2' with '-4067'
4066 4068 -4067 0
c Encoding variable: aux971 with domain: int(0..2) (representing constraint ((x_00001_00008=8) + (x_00001_00002=8)))
c Both direct and order encoding.
c Var 'aux971' order represents '0' with '4069'
c Var 'aux971' direct represents '0' with '4069'
c Var 'aux971' order represents '1' with '4070'
-4069 4070 0
c Var 'aux971' direct represents '1' with '4071'
4069 -4070 4071 0
-4071 4070 0
-4071 -4069 0
c Var 'aux971' direct represents '2' with '-4070'
4069 4071 -4070 0
c Encoding variable: aux972 with domain: int(0..2) (representing constraint ((x_00001_00007=8) + (x_00001_00004=8)))
c Both direct and order encoding.
c Var 'aux972' order represents '0' with '4072'
c Var 'aux972' direct represents '0' with '4072'
c Var 'aux972' order represents '1' with '4073'
-4072 4073 0
c Var 'aux972' direct represents '1' with '4074'
4072 -4073 4074 0
-4074 4073 0
-4074 -4072 0
c Var 'aux972' direct represents '2' with '-4073'
4072 4074 -4073 0
c Encoding variable: aux973 with domain: int(0..2) (representing constraint ((x_00001_00006=8) + (x_00001_00005=8)))
c Both direct and order encoding.
c Var 'aux973' order represents '0' with '4075'
c Var 'aux973' direct represents '0' with '4075'
c Var 'aux973' order represents '1' with '4076'
-4075 4076 0
c Var 'aux973' direct represents '1' with '4077'
4075 -4076 4077 0
-4077 4076 0
-4077 -4075 0
c Var 'aux973' direct represents '2' with '-4076'
4075 4077 -4076 0
c Encoding variable: aux974 with domain: int(0..3) (representing constraint ((x_00001_00003=8) + aux973))
c Both direct and order encoding.
c Var 'aux974' order represents '0' with '4078'
c Var 'aux974' direct represents '0' with '4078'
c Var 'aux974' order represents '1' with '4079'
-4078 4079 0
c Var 'aux974' direct represents '1' with '4080'
4078 -4079 4080 0
-4080 4079 0
-4080 -4078 0
c Var 'aux974' order represents '2' with '4081'
-4079 4081 0
c Var 'aux974' direct represents '2' with '4082'
4079 -4081 4082 0
-4082 4081 0
-4082 -4079 0
c Var 'aux974' direct represents '3' with '-4081'
4078 4080 4082 -4081 0
c Encoding variable: aux975 with domain: int(0..4) (representing constraint (aux970 + aux972))
c Both direct and order encoding.
c Var 'aux975' order represents '0' with '4083'
c Var 'aux975' direct represents '0' with '4083'
c Var 'aux975' order represents '1' with '4084'
-4083 4084 0
c Var 'aux975' direct represents '1' with '4085'
4083 -4084 4085 0
-4085 4084 0
-4085 -4083 0
c Var 'aux975' order represents '2' with '4086'
-4084 4086 0
c Var 'aux975' direct represents '2' with '4087'
4084 -4086 4087 0
-4087 4086 0
-4087 -4084 0
c Var 'aux975' order represents '3' with '4088'
-4086 4088 0
c Var 'aux975' direct represents '3' with '4089'
4086 -4088 4089 0
-4089 4088 0
-4089 -4086 0
c Var 'aux975' direct represents '4' with '-4088'
4083 4085 4087 4089 -4088 0
c Encoding variable: aux976 with domain: int(0..2) (representing constraint ((x_00001_00001=9) + (x_00001_00009=9)))
c Both direct and order encoding.
c Var 'aux976' order represents '0' with '4090'
c Var 'aux976' direct represents '0' with '4090'
c Var 'aux976' order represents '1' with '4091'
-4090 4091 0
c Var 'aux976' direct represents '1' with '4092'
4090 -4091 4092 0
-4092 4091 0
-4092 -4090 0
c Var 'aux976' direct represents '2' with '-4091'
4090 4092 -4091 0
c Encoding variable: aux977 with domain: int(0..2) (representing constraint ((x_00001_00008=9) + (x_00001_00002=9)))
c Both direct and order encoding.
c Var 'aux977' order represents '0' with '4093'
c Var 'aux977' direct represents '0' with '4093'
c Var 'aux977' order represents '1' with '4094'
-4093 4094 0
c Var 'aux977' direct represents '1' with '4095'
4093 -4094 4095 0
-4095 4094 0
-4095 -4093 0
c Var 'aux977' direct represents '2' with '-4094'
4093 4095 -4094 0
c Encoding variable: aux978 with domain: int(0..2) (representing constraint ((x_00001_00007=9) + (x_00001_00004=9)))
c Both direct and order encoding.
c Var 'aux978' order represents '0' with '4096'
c Var 'aux978' direct represents '0' with '4096'
c Var 'aux978' order represents '1' with '4097'
-4096 4097 0
c Var 'aux978' direct represents '1' with '4098'
4096 -4097 4098 0
-4098 4097 0
-4098 -4096 0
c Var 'aux978' direct represents '2' with '-4097'
4096 4098 -4097 0
c Encoding variable: aux979 with domain: int(0..2) (representing constraint ((x_00001_00006=9) + (x_00001_00005=9)))
c Both direct and order encoding.
c Var 'aux979' order represents '0' with '4099'
c Var 'aux979' direct represents '0' with '4099'
c Var 'aux979' order represents '1' with '4100'
-4099 4100 0
c Var 'aux979' direct represents '1' with '4101'
4099 -4100 4101 0
-4101 4100 0
-4101 -4099 0
c Var 'aux979' direct represents '2' with '-4100'
4099 4101 -4100 0
c Encoding variable: aux980 with domain: int(0..3) (representing constraint ((x_00001_00003=9) + aux979))
c Both direct and order encoding.
c Var 'aux980' order represents '0' with '4102'
c Var 'aux980' direct represents '0' with '4102'
c Var 'aux980' order represents '1' with '4103'
-4102 4103 0
c Var 'aux980' direct represents '1' with '4104'
4102 -4103 4104 0
-4104 4103 0
-4104 -4102 0
c Var 'aux980' order represents '2' with '4105'
-4103 4105 0
c Var 'aux980' direct represents '2' with '4106'
4103 -4105 4106 0
-4106 4105 0
-4106 -4103 0
c Var 'aux980' direct represents '3' with '-4105'
4102 4104 4106 -4105 0
c Encoding variable: aux981 with domain: int(0..4) (representing constraint (aux976 + aux978))
c Both direct and order encoding.
c Var 'aux981' order represents '0' with '4107'
c Var 'aux981' direct represents '0' with '4107'
c Var 'aux981' order represents '1' with '4108'
-4107 4108 0
c Var 'aux981' direct represents '1' with '4109'
4107 -4108 4109 0
-4109 4108 0
-4109 -4107 0
c Var 'aux981' order represents '2' with '4110'
-4108 4110 0
c Var 'aux981' direct represents '2' with '4111'
4108 -4110 4111 0
-4111 4110 0
-4111 -4108 0
c Var 'aux981' order represents '3' with '4112'
-4110 4112 0
c Var 'aux981' direct represents '3' with '4113'
4110 -4112 4113 0
-4113 4112 0
-4113 -4110 0
c Var 'aux981' direct represents '4' with '-4112'
4107 4109 4111 4113 -4112 0
c Encoding variable: aux982 with domain: int(0..2) (representing constraint ((x_00002_00001=1) + (x_00002_00009=1)))
c Both direct and order encoding.
c Var 'aux982' order represents '0' with '4114'
c Var 'aux982' direct represents '0' with '4114'
c Var 'aux982' order represents '1' with '4115'
-4114 4115 0
c Var 'aux982' direct represents '1' with '4116'
4114 -4115 4116 0
-4116 4115 0
-4116 -4114 0
c Var 'aux982' direct represents '2' with '-4115'
4114 4116 -4115 0
c Encoding variable: aux983 with domain: int(0..2) (representing constraint ((x_00002_00008=1) + (x_00002_00002=1)))
c Both direct and order encoding.
c Var 'aux983' order represents '0' with '4117'
c Var 'aux983' direct represents '0' with '4117'
c Var 'aux983' order represents '1' with '4118'
-4117 4118 0
c Var 'aux983' direct represents '1' with '4119'
4117 -4118 4119 0
-4119 4118 0
-4119 -4117 0
c Var 'aux983' direct represents '2' with '-4118'
4117 4119 -4118 0
c Encoding variable: aux984 with domain: int(0..2) (representing constraint ((x_00002_00007=1) + (x_00002_00004=1)))
c Both direct and order encoding.
c Var 'aux984' order represents '0' with '4120'
c Var 'aux984' direct represents '0' with '4120'
c Var 'aux984' order represents '1' with '4121'
-4120 4121 0
c Var 'aux984' direct represents '1' with '4122'
4120 -4121 4122 0
-4122 4121 0
-4122 -4120 0
c Var 'aux984' direct represents '2' with '-4121'
4120 4122 -4121 0
c Encoding variable: aux985 with domain: int(0..2) (representing constraint ((x_00002_00006=1) + (x_00002_00005=1)))
c Both direct and order encoding.
c Var 'aux985' order represents '0' with '4123'
c Var 'aux985' direct represents '0' with '4123'
c Var 'aux985' order represents '1' with '4124'
-4123 4124 0
c Var 'aux985' direct represents '1' with '4125'
4123 -4124 4125 0
-4125 4124 0
-4125 -4123 0
c Var 'aux985' direct represents '2' with '-4124'
4123 4125 -4124 0
c Encoding variable: aux986 with domain: int(0..3) (representing constraint ((x_00002_00003=1) + aux985))
c Both direct and order encoding.
c Var 'aux986' order represents '0' with '4126'
c Var 'aux986' direct represents '0' with '4126'
c Var 'aux986' order represents '1' with '4127'
-4126 4127 0
c Var 'aux986' direct represents '1' with '4128'
4126 -4127 4128 0
-4128 4127 0
-4128 -4126 0
c Var 'aux986' order represents '2' with '4129'
-4127 4129 0
c Var 'aux986' direct represents '2' with '4130'
4127 -4129 4130 0
-4130 4129 0
-4130 -4127 0
c Var 'aux986' direct represents '3' with '-4129'
4126 4128 4130 -4129 0
c Encoding variable: aux987 with domain: int(0..4) (representing constraint (aux982 + aux984))
c Both direct and order encoding.
c Var 'aux987' order represents '0' with '4131'
c Var 'aux987' direct represents '0' with '4131'
c Var 'aux987' order represents '1' with '4132'
-4131 4132 0
c Var 'aux987' direct represents '1' with '4133'
4131 -4132 4133 0
-4133 4132 0
-4133 -4131 0
c Var 'aux987' order represents '2' with '4134'
-4132 4134 0
c Var 'aux987' direct represents '2' with '4135'
4132 -4134 4135 0
-4135 4134 0
-4135 -4132 0
c Var 'aux987' order represents '3' with '4136'
-4134 4136 0
c Var 'aux987' direct represents '3' with '4137'
4134 -4136 4137 0
-4137 4136 0
-4137 -4134 0
c Var 'aux987' direct represents '4' with '-4136'
4131 4133 4135 4137 -4136 0
c Encoding variable: aux988 with domain: int(0..2) (representing constraint ((x_00002_00001=2) + (x_00002_00009=2)))
c Both direct and order encoding.
c Var 'aux988' order represents '0' with '4138'
c Var 'aux988' direct represents '0' with '4138'
c Var 'aux988' order represents '1' with '4139'
-4138 4139 0
c Var 'aux988' direct represents '1' with '4140'
4138 -4139 4140 0
-4140 4139 0
-4140 -4138 0
c Var 'aux988' direct represents '2' with '-4139'
4138 4140 -4139 0
c Encoding variable: aux989 with domain: int(0..2) (representing constraint ((x_00002_00008=2) + (x_00002_00002=2)))
c Both direct and order encoding.
c Var 'aux989' order represents '0' with '4141'
c Var 'aux989' direct represents '0' with '4141'
c Var 'aux989' order represents '1' with '4142'
-4141 4142 0
c Var 'aux989' direct represents '1' with '4143'
4141 -4142 4143 0
-4143 4142 0
-4143 -4141 0
c Var 'aux989' direct represents '2' with '-4142'
4141 4143 -4142 0
c Encoding variable: aux990 with domain: int(0..2) (representing constraint ((x_00002_00007=2) + (x_00002_00004=2)))
c Both direct and order encoding.
c Var 'aux990' order represents '0' with '4144'
c Var 'aux990' direct represents '0' with '4144'
c Var 'aux990' order represents '1' with '4145'
-4144 4145 0
c Var 'aux990' direct represents '1' with '4146'
4144 -4145 4146 0
-4146 4145 0
-4146 -4144 0
c Var 'aux990' direct represents '2' with '-4145'
4144 4146 -4145 0
c Encoding variable: aux991 with domain: int(0..2) (representing constraint ((x_00002_00006=2) + (x_00002_00005=2)))
c Both direct and order encoding.
c Var 'aux991' order represents '0' with '4147'
c Var 'aux991' direct represents '0' with '4147'
c Var 'aux991' order represents '1' with '4148'
-4147 4148 0
c Var 'aux991' direct represents '1' with '4149'
4147 -4148 4149 0
-4149 4148 0
-4149 -4147 0
c Var 'aux991' direct represents '2' with '-4148'
4147 4149 -4148 0
c Encoding variable: aux992 with domain: int(0..3) (representing constraint ((x_00002_00003=2) + aux991))
c Both direct and order encoding.
c Var 'aux992' order represents '0' with '4150'
c Var 'aux992' direct represents '0' with '4150'
c Var 'aux992' order represents '1' with '4151'
-4150 4151 0
c Var 'aux992' direct represents '1' with '4152'
4150 -4151 4152 0
-4152 4151 0
-4152 -4150 0
c Var 'aux992' order represents '2' with '4153'
-4151 4153 0
c Var 'aux992' direct represents '2' with '4154'
4151 -4153 4154 0
-4154 4153 0
-4154 -4151 0
c Var 'aux992' direct represents '3' with '-4153'
4150 4152 4154 -4153 0
c Encoding variable: aux993 with domain: int(0..4) (representing constraint (aux988 + aux990))
c Both direct and order encoding.
c Var 'aux993' order represents '0' with '4155'
c Var 'aux993' direct represents '0' with '4155'
c Var 'aux993' order represents '1' with '4156'
-4155 4156 0
c Var 'aux993' direct represents '1' with '4157'
4155 -4156 4157 0
-4157 4156 0
-4157 -4155 0
c Var 'aux993' order represents '2' with '4158'
-4156 4158 0
c Var 'aux993' direct represents '2' with '4159'
4156 -4158 4159 0
-4159 4158 0
-4159 -4156 0
c Var 'aux993' order represents '3' with '4160'
-4158 4160 0
c Var 'aux993' direct represents '3' with '4161'
4158 -4160 4161 0
-4161 4160 0
-4161 -4158 0
c Var 'aux993' direct represents '4' with '-4160'
4155 4157 4159 4161 -4160 0
c Encoding variable: aux994 with domain: int(0..2) (representing constraint ((x_00002_00001=3) + (x_00002_00009=3)))
c Both direct and order encoding.
c Var 'aux994' order represents '0' with '4162'
c Var 'aux994' direct represents '0' with '4162'
c Var 'aux994' order represents '1' with '4163'
-4162 4163 0
c Var 'aux994' direct represents '1' with '4164'
4162 -4163 4164 0
-4164 4163 0
-4164 -4162 0
c Var 'aux994' direct represents '2' with '-4163'
4162 4164 -4163 0
c Encoding variable: aux995 with domain: int(0..2) (representing constraint ((x_00002_00008=3) + (x_00002_00002=3)))
c Both direct and order encoding.
c Var 'aux995' order represents '0' with '4165'
c Var 'aux995' direct represents '0' with '4165'
c Var 'aux995' order represents '1' with '4166'
-4165 4166 0
c Var 'aux995' direct represents '1' with '4167'
4165 -4166 4167 0
-4167 4166 0
-4167 -4165 0
c Var 'aux995' direct represents '2' with '-4166'
4165 4167 -4166 0
c Encoding variable: aux996 with domain: int(0..2) (representing constraint ((x_00002_00007=3) + (x_00002_00004=3)))
c Both direct and order encoding.
c Var 'aux996' order represents '0' with '4168'
c Var 'aux996' direct represents '0' with '4168'
c Var 'aux996' order represents '1' with '4169'
-4168 4169 0
c Var 'aux996' direct represents '1' with '4170'
4168 -4169 4170 0
-4170 4169 0
-4170 -4168 0
c Var 'aux996' direct represents '2' with '-4169'
4168 4170 -4169 0
c Encoding variable: aux997 with domain: int(0..2) (representing constraint ((x_00002_00006=3) + (x_00002_00005=3)))
c Both direct and order encoding.
c Var 'aux997' order represents '0' with '4171'
c Var 'aux997' direct represents '0' with '4171'
c Var 'aux997' order represents '1' with '4172'
-4171 4172 0
c Var 'aux997' direct represents '1' with '4173'
4171 -4172 4173 0
-4173 4172 0
-4173 -4171 0
c Var 'aux997' direct represents '2' with '-4172'
4171 4173 -4172 0
c Encoding variable: aux998 with domain: int(0..3) (representing constraint ((x_00002_00003=3) + aux997))
c Both direct and order encoding.
c Var 'aux998' order represents '0' with '4174'
c Var 'aux998' direct represents '0' with '4174'
c Var 'aux998' order represents '1' with '4175'
-4174 4175 0
c Var 'aux998' direct represents '1' with '4176'
4174 -4175 4176 0
-4176 4175 0
-4176 -4174 0
c Var 'aux998' order represents '2' with '4177'
-4175 4177 0
c Var 'aux998' direct represents '2' with '4178'
4175 -4177 4178 0
-4178 4177 0
-4178 -4175 0
c Var 'aux998' direct represents '3' with '-4177'
4174 4176 4178 -4177 0
c Encoding variable: aux999 with domain: int(0..4) (representing constraint (aux994 + aux996))
c Both direct and order encoding.
c Var 'aux999' order represents '0' with '4179'
c Var 'aux999' direct represents '0' with '4179'
c Var 'aux999' order represents '1' with '4180'
-4179 4180 0
c Var 'aux999' direct represents '1' with '4181'
4179 -4180 4181 0
-4181 4180 0
-4181 -4179 0
c Var 'aux999' order represents '2' with '4182'
-4180 4182 0
c Var 'aux999' direct represents '2' with '4183'
4180 -4182 4183 0
-4183 4182 0
-4183 -4180 0
c Var 'aux999' order represents '3' with '4184'
-4182 4184 0
c Var 'aux999' direct represents '3' with '4185'
4182 -4184 4185 0
-4185 4184 0
-4185 -4182 0
c Var 'aux999' direct represents '4' with '-4184'
4179 4181 4183 4185 -4184 0
c Encoding variable: aux1000 with domain: int(0..2) (representing constraint ((x_00002_00001=4) + (x_00002_00009=4)))
c Both direct and order encoding.
c Var 'aux1000' order represents '0' with '4186'
c Var 'aux1000' direct represents '0' with '4186'
c Var 'aux1000' order represents '1' with '4187'
-4186 4187 0
c Var 'aux1000' direct represents '1' with '4188'
4186 -4187 4188 0
-4188 4187 0
-4188 -4186 0
c Var 'aux1000' direct represents '2' with '-4187'
4186 4188 -4187 0
c Encoding variable: aux1001 with domain: int(0..2) (representing constraint ((x_00002_00008=4) + (x_00002_00002=4)))
c Both direct and order encoding.
c Var 'aux1001' order represents '0' with '4189'
c Var 'aux1001' direct represents '0' with '4189'
c Var 'aux1001' order represents '1' with '4190'
-4189 4190 0
c Var 'aux1001' direct represents '1' with '4191'
4189 -4190 4191 0
-4191 4190 0
-4191 -4189 0
c Var 'aux1001' direct represents '2' with '-4190'
4189 4191 -4190 0
c Encoding variable: aux1002 with domain: int(0..2) (representing constraint ((x_00002_00007=4) + (x_00002_00004=4)))
c Both direct and order encoding.
c Var 'aux1002' order represents '0' with '4192'
c Var 'aux1002' direct represents '0' with '4192'
c Var 'aux1002' order represents '1' with '4193'
-4192 4193 0
c Var 'aux1002' direct represents '1' with '4194'
4192 -4193 4194 0
-4194 4193 0
-4194 -4192 0
c Var 'aux1002' direct represents '2' with '-4193'
4192 4194 -4193 0
c Encoding variable: aux1003 with domain: int(0..2) (representing constraint ((x_00002_00006=4) + (x_00002_00005=4)))
c Both direct and order encoding.
c Var 'aux1003' order represents '0' with '4195'
c Var 'aux1003' direct represents '0' with '4195'
c Var 'aux1003' order represents '1' with '4196'
-4195 4196 0
c Var 'aux1003' direct represents '1' with '4197'
4195 -4196 4197 0
-4197 4196 0
-4197 -4195 0
c Var 'aux1003' direct represents '2' with '-4196'
4195 4197 -4196 0
c Encoding variable: aux1004 with domain: int(0..3) (representing constraint ((x_00002_00003=4) + aux1003))
c Both direct and order encoding.
c Var 'aux1004' order represents '0' with '4198'
c Var 'aux1004' direct represents '0' with '4198'
c Var 'aux1004' order represents '1' with '4199'
-4198 4199 0
c Var 'aux1004' direct represents '1' with '4200'
4198 -4199 4200 0
-4200 4199 0
-4200 -4198 0
c Var 'aux1004' order represents '2' with '4201'
-4199 4201 0
c Var 'aux1004' direct represents '2' with '4202'
4199 -4201 4202 0
-4202 4201 0
-4202 -4199 0
c Var 'aux1004' direct represents '3' with '-4201'
4198 4200 4202 -4201 0
c Encoding variable: aux1005 with domain: int(0..4) (representing constraint (aux1000 + aux1002))
c Both direct and order encoding.
c Var 'aux1005' order represents '0' with '4203'
c Var 'aux1005' direct represents '0' with '4203'
c Var 'aux1005' order represents '1' with '4204'
-4203 4204 0
c Var 'aux1005' direct represents '1' with '4205'
4203 -4204 4205 0
-4205 4204 0
-4205 -4203 0
c Var 'aux1005' order represents '2' with '4206'
-4204 4206 0
c Var 'aux1005' direct represents '2' with '4207'
4204 -4206 4207 0
-4207 4206 0
-4207 -4204 0
c Var 'aux1005' order represents '3' with '4208'
-4206 4208 0
c Var 'aux1005' direct represents '3' with '4209'
4206 -4208 4209 0
-4209 4208 0
-4209 -4206 0
c Var 'aux1005' direct represents '4' with '-4208'
4203 4205 4207 4209 -4208 0
c Encoding variable: aux1006 with domain: int(0..2) (representing constraint ((x_00002_00001=5) + (x_00002_00009=5)))
c Both direct and order encoding.
c Var 'aux1006' order represents '0' with '4210'
c Var 'aux1006' direct represents '0' with '4210'
c Var 'aux1006' order represents '1' with '4211'
-4210 4211 0
c Var 'aux1006' direct represents '1' with '4212'
4210 -4211 4212 0
-4212 4211 0
-4212 -4210 0
c Var 'aux1006' direct represents '2' with '-4211'
4210 4212 -4211 0
c Encoding variable: aux1007 with domain: int(0..2) (representing constraint ((x_00002_00008=5) + (x_00002_00002=5)))
c Both direct and order encoding.
c Var 'aux1007' order represents '0' with '4213'
c Var 'aux1007' direct represents '0' with '4213'
c Var 'aux1007' order represents '1' with '4214'
-4213 4214 0
c Var 'aux1007' direct represents '1' with '4215'
4213 -4214 4215 0
-4215 4214 0
-4215 -4213 0
c Var 'aux1007' direct represents '2' with '-4214'
4213 4215 -4214 0
c Encoding variable: aux1008 with domain: int(0..2) (representing constraint ((x_00002_00007=5) + (x_00002_00004=5)))
c Both direct and order encoding.
c Var 'aux1008' order represents '0' with '4216'
c Var 'aux1008' direct represents '0' with '4216'
c Var 'aux1008' order represents '1' with '4217'
-4216 4217 0
c Var 'aux1008' direct represents '1' with '4218'
4216 -4217 4218 0
-4218 4217 0
-4218 -4216 0
c Var 'aux1008' direct represents '2' with '-4217'
4216 4218 -4217 0
c Encoding variable: aux1009 with domain: int(0..2) (representing constraint ((x_00002_00006=5) + (x_00002_00005=5)))
c Both direct and order encoding.
c Var 'aux1009' order represents '0' with '4219'
c Var 'aux1009' direct represents '0' with '4219'
c Var 'aux1009' order represents '1' with '4220'
-4219 4220 0
c Var 'aux1009' direct represents '1' with '4221'
4219 -4220 4221 0
-4221 4220 0
-4221 -4219 0
c Var 'aux1009' direct represents '2' with '-4220'
4219 4221 -4220 0
c Encoding variable: aux1010 with domain: int(0..3) (representing constraint ((x_00002_00003=5) + aux1009))
c Both direct and order encoding.
c Var 'aux1010' order represents '0' with '4222'
c Var 'aux1010' direct represents '0' with '4222'
c Var 'aux1010' order represents '1' with '4223'
-4222 4223 0
c Var 'aux1010' direct represents '1' with '4224'
4222 -4223 4224 0
-4224 4223 0
-4224 -4222 0
c Var 'aux1010' order represents '2' with '4225'
-4223 4225 0
c Var 'aux1010' direct represents '2' with '4226'
4223 -4225 4226 0
-4226 4225 0
-4226 -4223 0
c Var 'aux1010' direct represents '3' with '-4225'
4222 4224 4226 -4225 0
c Encoding variable: aux1011 with domain: int(0..4) (representing constraint (aux1006 + aux1008))
c Both direct and order encoding.
c Var 'aux1011' order represents '0' with '4227'
c Var 'aux1011' direct represents '0' with '4227'
c Var 'aux1011' order represents '1' with '4228'
-4227 4228 0
c Var 'aux1011' direct represents '1' with '4229'
4227 -4228 4229 0
-4229 4228 0
-4229 -4227 0
c Var 'aux1011' order represents '2' with '4230'
-4228 4230 0
c Var 'aux1011' direct represents '2' with '4231'
4228 -4230 4231 0
-4231 4230 0
-4231 -4228 0
c Var 'aux1011' order represents '3' with '4232'
-4230 4232 0
c Var 'aux1011' direct represents '3' with '4233'
4230 -4232 4233 0
-4233 4232 0
-4233 -4230 0
c Var 'aux1011' direct represents '4' with '-4232'
4227 4229 4231 4233 -4232 0
c Encoding variable: aux1012 with domain: int(0..2) (representing constraint ((x_00002_00001=6) + (x_00002_00009=6)))
c Both direct and order encoding.
c Var 'aux1012' order represents '0' with '4234'
c Var 'aux1012' direct represents '0' with '4234'
c Var 'aux1012' order represents '1' with '4235'
-4234 4235 0
c Var 'aux1012' direct represents '1' with '4236'
4234 -4235 4236 0
-4236 4235 0
-4236 -4234 0
c Var 'aux1012' direct represents '2' with '-4235'
4234 4236 -4235 0
c Encoding variable: aux1013 with domain: int(0..2) (representing constraint ((x_00002_00008=6) + (x_00002_00002=6)))
c Both direct and order encoding.
c Var 'aux1013' order represents '0' with '4237'
c Var 'aux1013' direct represents '0' with '4237'
c Var 'aux1013' order represents '1' with '4238'
-4237 4238 0
c Var 'aux1013' direct represents '1' with '4239'
4237 -4238 4239 0
-4239 4238 0
-4239 -4237 0
c Var 'aux1013' direct represents '2' with '-4238'
4237 4239 -4238 0
c Encoding variable: aux1014 with domain: int(0..2) (representing constraint ((x_00002_00007=6) + (x_00002_00004=6)))
c Both direct and order encoding.
c Var 'aux1014' order represents '0' with '4240'
c Var 'aux1014' direct represents '0' with '4240'
c Var 'aux1014' order represents '1' with '4241'
-4240 4241 0
c Var 'aux1014' direct represents '1' with '4242'
4240 -4241 4242 0
-4242 4241 0
-4242 -4240 0
c Var 'aux1014' direct represents '2' with '-4241'
4240 4242 -4241 0
c Encoding variable: aux1015 with domain: int(0..2) (representing constraint ((x_00002_00006=6) + (x_00002_00005=6)))
c Both direct and order encoding.
c Var 'aux1015' order represents '0' with '4243'
c Var 'aux1015' direct represents '0' with '4243'
c Var 'aux1015' order represents '1' with '4244'
-4243 4244 0
c Var 'aux1015' direct represents '1' with '4245'
4243 -4244 4245 0
-4245 4244 0
-4245 -4243 0
c Var 'aux1015' direct represents '2' with '-4244'
4243 4245 -4244 0
c Encoding variable: aux1016 with domain: int(0..3) (representing constraint ((x_00002_00003=6) + aux1015))
c Both direct and order encoding.
c Var 'aux1016' order represents '0' with '4246'
c Var 'aux1016' direct represents '0' with '4246'
c Var 'aux1016' order represents '1' with '4247'
-4246 4247 0
c Var 'aux1016' direct represents '1' with '4248'
4246 -4247 4248 0
-4248 4247 0
-4248 -4246 0
c Var 'aux1016' order represents '2' with '4249'
-4247 4249 0
c Var 'aux1016' direct represents '2' with '4250'
4247 -4249 4250 0
-4250 4249 0
-4250 -4247 0
c Var 'aux1016' direct represents '3' with '-4249'
4246 4248 4250 -4249 0
c Encoding variable: aux1017 with domain: int(0..4) (representing constraint (aux1012 + aux1014))
c Both direct and order encoding.
c Var 'aux1017' order represents '0' with '4251'
c Var 'aux1017' direct represents '0' with '4251'
c Var 'aux1017' order represents '1' with '4252'
-4251 4252 0
c Var 'aux1017' direct represents '1' with '4253'
4251 -4252 4253 0
-4253 4252 0
-4253 -4251 0
c Var 'aux1017' order represents '2' with '4254'
-4252 4254 0
c Var 'aux1017' direct represents '2' with '4255'
4252 -4254 4255 0
-4255 4254 0
-4255 -4252 0
c Var 'aux1017' order represents '3' with '4256'
-4254 4256 0
c Var 'aux1017' direct represents '3' with '4257'
4254 -4256 4257 0
-4257 4256 0
-4257 -4254 0
c Var 'aux1017' direct represents '4' with '-4256'
4251 4253 4255 4257 -4256 0
c Encoding variable: aux1018 with domain: int(0..2) (representing constraint ((x_00002_00001=7) + (x_00002_00009=7)))
c Both direct and order encoding.
c Var 'aux1018' order represents '0' with '4258'
c Var 'aux1018' direct represents '0' with '4258'
c Var 'aux1018' order represents '1' with '4259'
-4258 4259 0
c Var 'aux1018' direct represents '1' with '4260'
4258 -4259 4260 0
-4260 4259 0
-4260 -4258 0
c Var 'aux1018' direct represents '2' with '-4259'
4258 4260 -4259 0
c Encoding variable: aux1019 with domain: int(0..2) (representing constraint ((x_00002_00008=7) + (x_00002_00002=7)))
c Both direct and order encoding.
c Var 'aux1019' order represents '0' with '4261'
c Var 'aux1019' direct represents '0' with '4261'
c Var 'aux1019' order represents '1' with '4262'
-4261 4262 0
c Var 'aux1019' direct represents '1' with '4263'
4261 -4262 4263 0
-4263 4262 0
-4263 -4261 0
c Var 'aux1019' direct represents '2' with '-4262'
4261 4263 -4262 0
c Encoding variable: aux1020 with domain: int(0..2) (representing constraint ((x_00002_00007=7) + (x_00002_00004=7)))
c Both direct and order encoding.
c Var 'aux1020' order represents '0' with '4264'
c Var 'aux1020' direct represents '0' with '4264'
c Var 'aux1020' order represents '1' with '4265'
-4264 4265 0
c Var 'aux1020' direct represents '1' with '4266'
4264 -4265 4266 0
-4266 4265 0
-4266 -4264 0
c Var 'aux1020' direct represents '2' with '-4265'
4264 4266 -4265 0
c Encoding variable: aux1021 with domain: int(0..2) (representing constraint ((x_00002_00006=7) + (x_00002_00005=7)))
c Both direct and order encoding.
c Var 'aux1021' order represents '0' with '4267'
c Var 'aux1021' direct represents '0' with '4267'
c Var 'aux1021' order represents '1' with '4268'
-4267 4268 0
c Var 'aux1021' direct represents '1' with '4269'
4267 -4268 4269 0
-4269 4268 0
-4269 -4267 0
c Var 'aux1021' direct represents '2' with '-4268'
4267 4269 -4268 0
c Encoding variable: aux1022 with domain: int(0..3) (representing constraint ((x_00002_00003=7) + aux1021))
c Both direct and order encoding.
c Var 'aux1022' order represents '0' with '4270'
c Var 'aux1022' direct represents '0' with '4270'
c Var 'aux1022' order represents '1' with '4271'
-4270 4271 0
c Var 'aux1022' direct represents '1' with '4272'
4270 -4271 4272 0
-4272 4271 0
-4272 -4270 0
c Var 'aux1022' order represents '2' with '4273'
-4271 4273 0
c Var 'aux1022' direct represents '2' with '4274'
4271 -4273 4274 0
-4274 4273 0
-4274 -4271 0
c Var 'aux1022' direct represents '3' with '-4273'
4270 4272 4274 -4273 0
c Encoding variable: aux1023 with domain: int(0..4) (representing constraint (aux1018 + aux1020))
c Both direct and order encoding.
c Var 'aux1023' order represents '0' with '4275'
c Var 'aux1023' direct represents '0' with '4275'
c Var 'aux1023' order represents '1' with '4276'
-4275 4276 0
c Var 'aux1023' direct represents '1' with '4277'
4275 -4276 4277 0
-4277 4276 0
-4277 -4275 0
c Var 'aux1023' order represents '2' with '4278'
-4276 4278 0
c Var 'aux1023' direct represents '2' with '4279'
4276 -4278 4279 0
-4279 4278 0
-4279 -4276 0
c Var 'aux1023' order represents '3' with '4280'
-4278 4280 0
c Var 'aux1023' direct represents '3' with '4281'
4278 -4280 4281 0
-4281 4280 0
-4281 -4278 0
c Var 'aux1023' direct represents '4' with '-4280'
4275 4277 4279 4281 -4280 0
c Encoding variable: aux1024 with domain: int(0..2) (representing constraint ((x_00002_00001=8) + (x_00002_00009=8)))
c Both direct and order encoding.
c Var 'aux1024' order represents '0' with '4282'
c Var 'aux1024' direct represents '0' with '4282'
c Var 'aux1024' order represents '1' with '4283'
-4282 4283 0
c Var 'aux1024' direct represents '1' with '4284'
4282 -4283 4284 0
-4284 4283 0
-4284 -4282 0
c Var 'aux1024' direct represents '2' with '-4283'
4282 4284 -4283 0
c Encoding variable: aux1025 with domain: int(0..2) (representing constraint ((x_00002_00008=8) + (x_00002_00002=8)))
c Both direct and order encoding.
c Var 'aux1025' order represents '0' with '4285'
c Var 'aux1025' direct represents '0' with '4285'
c Var 'aux1025' order represents '1' with '4286'
-4285 4286 0
c Var 'aux1025' direct represents '1' with '4287'
4285 -4286 4287 0
-4287 4286 0
-4287 -4285 0
c Var 'aux1025' direct represents '2' with '-4286'
4285 4287 -4286 0
c Encoding variable: aux1026 with domain: int(0..2) (representing constraint ((x_00002_00007=8) + (x_00002_00004=8)))
c Both direct and order encoding.
c Var 'aux1026' order represents '0' with '4288'
c Var 'aux1026' direct represents '0' with '4288'
c Var 'aux1026' order represents '1' with '4289'
-4288 4289 0
c Var 'aux1026' direct represents '1' with '4290'
4288 -4289 4290 0
-4290 4289 0
-4290 -4288 0
c Var 'aux1026' direct represents '2' with '-4289'
4288 4290 -4289 0
c Encoding variable: aux1027 with domain: int(0..2) (representing constraint ((x_00002_00006=8) + (x_00002_00005=8)))
c Both direct and order encoding.
c Var 'aux1027' order represents '0' with '4291'
c Var 'aux1027' direct represents '0' with '4291'
c Var 'aux1027' order represents '1' with '4292'
-4291 4292 0
c Var 'aux1027' direct represents '1' with '4293'
4291 -4292 4293 0
-4293 4292 0
-4293 -4291 0
c Var 'aux1027' direct represents '2' with '-4292'
4291 4293 -4292 0
c Encoding variable: aux1028 with domain: int(0..3) (representing constraint ((x_00002_00003=8) + aux1027))
c Both direct and order encoding.
c Var 'aux1028' order represents '0' with '4294'
c Var 'aux1028' direct represents '0' with '4294'
c Var 'aux1028' order represents '1' with '4295'
-4294 4295 0
c Var 'aux1028' direct represents '1' with '4296'
4294 -4295 4296 0
-4296 4295 0
-4296 -4294 0
c Var 'aux1028' order represents '2' with '4297'
-4295 4297 0
c Var 'aux1028' direct represents '2' with '4298'
4295 -4297 4298 0
-4298 4297 0
-4298 -4295 0
c Var 'aux1028' direct represents '3' with '-4297'
4294 4296 4298 -4297 0
c Encoding variable: aux1029 with domain: int(0..4) (representing constraint (aux1024 + aux1026))
c Both direct and order encoding.
c Var 'aux1029' order represents '0' with '4299'
c Var 'aux1029' direct represents '0' with '4299'
c Var 'aux1029' order represents '1' with '4300'
-4299 4300 0
c Var 'aux1029' direct represents '1' with '4301'
4299 -4300 4301 0
-4301 4300 0
-4301 -4299 0
c Var 'aux1029' order represents '2' with '4302'
-4300 4302 0
c Var 'aux1029' direct represents '2' with '4303'
4300 -4302 4303 0
-4303 4302 0
-4303 -4300 0
c Var 'aux1029' order represents '3' with '4304'
-4302 4304 0
c Var 'aux1029' direct represents '3' with '4305'
4302 -4304 4305 0
-4305 4304 0
-4305 -4302 0
c Var 'aux1029' direct represents '4' with '-4304'
4299 4301 4303 4305 -4304 0
c Encoding variable: aux1030 with domain: int(0..2) (representing constraint ((x_00002_00001=9) + (x_00002_00009=9)))
c Both direct and order encoding.
c Var 'aux1030' order represents '0' with '4306'
c Var 'aux1030' direct represents '0' with '4306'
c Var 'aux1030' order represents '1' with '4307'
-4306 4307 0
c Var 'aux1030' direct represents '1' with '4308'
4306 -4307 4308 0
-4308 4307 0
-4308 -4306 0
c Var 'aux1030' direct represents '2' with '-4307'
4306 4308 -4307 0
c Encoding variable: aux1031 with domain: int(0..2) (representing constraint ((x_00002_00008=9) + (x_00002_00002=9)))
c Both direct and order encoding.
c Var 'aux1031' order represents '0' with '4309'
c Var 'aux1031' direct represents '0' with '4309'
c Var 'aux1031' order represents '1' with '4310'
-4309 4310 0
c Var 'aux1031' direct represents '1' with '4311'
4309 -4310 4311 0
-4311 4310 0
-4311 -4309 0
c Var 'aux1031' direct represents '2' with '-4310'
4309 4311 -4310 0
c Encoding variable: aux1032 with domain: int(0..2) (representing constraint ((x_00002_00007=9) + (x_00002_00004=9)))
c Both direct and order encoding.
c Var 'aux1032' order represents '0' with '4312'
c Var 'aux1032' direct represents '0' with '4312'
c Var 'aux1032' order represents '1' with '4313'
-4312 4313 0
c Var 'aux1032' direct represents '1' with '4314'
4312 -4313 4314 0
-4314 4313 0
-4314 -4312 0
c Var 'aux1032' direct represents '2' with '-4313'
4312 4314 -4313 0
c Encoding variable: aux1033 with domain: int(0..2) (representing constraint ((x_00002_00006=9) + (x_00002_00005=9)))
c Both direct and order encoding.
c Var 'aux1033' order represents '0' with '4315'
c Var 'aux1033' direct represents '0' with '4315'
c Var 'aux1033' order represents '1' with '4316'
-4315 4316 0
c Var 'aux1033' direct represents '1' with '4317'
4315 -4316 4317 0
-4317 4316 0
-4317 -4315 0
c Var 'aux1033' direct represents '2' with '-4316'
4315 4317 -4316 0
c Encoding variable: aux1034 with domain: int(0..3) (representing constraint ((x_00002_00003=9) + aux1033))
c Both direct and order encoding.
c Var 'aux1034' order represents '0' with '4318'
c Var 'aux1034' direct represents '0' with '4318'
c Var 'aux1034' order represents '1' with '4319'
-4318 4319 0
c Var 'aux1034' direct represents '1' with '4320'
4318 -4319 4320 0
-4320 4319 0
-4320 -4318 0
c Var 'aux1034' order represents '2' with '4321'
-4319 4321 0
c Var 'aux1034' direct represents '2' with '4322'
4319 -4321 4322 0
-4322 4321 0
-4322 -4319 0
c Var 'aux1034' direct represents '3' with '-4321'
4318 4320 4322 -4321 0
c Encoding variable: aux1035 with domain: int(0..4) (representing constraint (aux1030 + aux1032))
c Both direct and order encoding.
c Var 'aux1035' order represents '0' with '4323'
c Var 'aux1035' direct represents '0' with '4323'
c Var 'aux1035' order represents '1' with '4324'
-4323 4324 0
c Var 'aux1035' direct represents '1' with '4325'
4323 -4324 4325 0
-4325 4324 0
-4325 -4323 0
c Var 'aux1035' order represents '2' with '4326'
-4324 4326 0
c Var 'aux1035' direct represents '2' with '4327'
4324 -4326 4327 0
-4327 4326 0
-4327 -4324 0
c Var 'aux1035' order represents '3' with '4328'
-4326 4328 0
c Var 'aux1035' direct represents '3' with '4329'
4326 -4328 4329 0
-4329 4328 0
-4329 -4326 0
c Var 'aux1035' direct represents '4' with '-4328'
4323 4325 4327 4329 -4328 0
c Encoding variable: aux1036 with domain: int(0..2) (representing constraint ((x_00003_00001=1) + (x_00003_00009=1)))
c Both direct and order encoding.
c Var 'aux1036' order represents '0' with '4330'
c Var 'aux1036' direct represents '0' with '4330'
c Var 'aux1036' order represents '1' with '4331'
-4330 4331 0
c Var 'aux1036' direct represents '1' with '4332'
4330 -4331 4332 0
-4332 4331 0
-4332 -4330 0
c Var 'aux1036' direct represents '2' with '-4331'
4330 4332 -4331 0
c Encoding variable: aux1037 with domain: int(0..2) (representing constraint ((x_00003_00008=1) + (x_00003_00002=1)))
c Both direct and order encoding.
c Var 'aux1037' order represents '0' with '4333'
c Var 'aux1037' direct represents '0' with '4333'
c Var 'aux1037' order represents '1' with '4334'
-4333 4334 0
c Var 'aux1037' direct represents '1' with '4335'
4333 -4334 4335 0
-4335 4334 0
-4335 -4333 0
c Var 'aux1037' direct represents '2' with '-4334'
4333 4335 -4334 0
c Encoding variable: aux1038 with domain: int(0..2) (representing constraint ((x_00003_00007=1) + (x_00003_00004=1)))
c Both direct and order encoding.
c Var 'aux1038' order represents '0' with '4336'
c Var 'aux1038' direct represents '0' with '4336'
c Var 'aux1038' order represents '1' with '4337'
-4336 4337 0
c Var 'aux1038' direct represents '1' with '4338'
4336 -4337 4338 0
-4338 4337 0
-4338 -4336 0
c Var 'aux1038' direct represents '2' with '-4337'
4336 4338 -4337 0
c Encoding variable: aux1039 with domain: int(0..2) (representing constraint ((x_00003_00006=1) + (x_00003_00005=1)))
c Both direct and order encoding.
c Var 'aux1039' order represents '0' with '4339'
c Var 'aux1039' direct represents '0' with '4339'
c Var 'aux1039' order represents '1' with '4340'
-4339 4340 0
c Var 'aux1039' direct represents '1' with '4341'
4339 -4340 4341 0
-4341 4340 0
-4341 -4339 0
c Var 'aux1039' direct represents '2' with '-4340'
4339 4341 -4340 0
c Encoding variable: aux1040 with domain: int(0..3) (representing constraint ((x_00003_00003=1) + aux1039))
c Both direct and order encoding.
c Var 'aux1040' order represents '0' with '4342'
c Var 'aux1040' direct represents '0' with '4342'
c Var 'aux1040' order represents '1' with '4343'
-4342 4343 0
c Var 'aux1040' direct represents '1' with '4344'
4342 -4343 4344 0
-4344 4343 0
-4344 -4342 0
c Var 'aux1040' order represents '2' with '4345'
-4343 4345 0
c Var 'aux1040' direct represents '2' with '4346'
4343 -4345 4346 0
-4346 4345 0
-4346 -4343 0
c Var 'aux1040' direct represents '3' with '-4345'
4342 4344 4346 -4345 0
c Encoding variable: aux1041 with domain: int(0..4) (representing constraint (aux1036 + aux1038))
c Both direct and order encoding.
c Var 'aux1041' order represents '0' with '4347'
c Var 'aux1041' direct represents '0' with '4347'
c Var 'aux1041' order represents '1' with '4348'
-4347 4348 0
c Var 'aux1041' direct represents '1' with '4349'
4347 -4348 4349 0
-4349 4348 0
-4349 -4347 0
c Var 'aux1041' order represents '2' with '4350'
-4348 4350 0
c Var 'aux1041' direct represents '2' with '4351'
4348 -4350 4351 0
-4351 4350 0
-4351 -4348 0
c Var 'aux1041' order represents '3' with '4352'
-4350 4352 0
c Var 'aux1041' direct represents '3' with '4353'
4350 -4352 4353 0
-4353 4352 0
-4353 -4350 0
c Var 'aux1041' direct represents '4' with '-4352'
4347 4349 4351 4353 -4352 0
c Encoding variable: aux1042 with domain: int(0..2) (representing constraint ((x_00003_00001=2) + (x_00003_00009=2)))
c Both direct and order encoding.
c Var 'aux1042' order represents '0' with '4354'
c Var 'aux1042' direct represents '0' with '4354'
c Var 'aux1042' order represents '1' with '4355'
-4354 4355 0
c Var 'aux1042' direct represents '1' with '4356'
4354 -4355 4356 0
-4356 4355 0
-4356 -4354 0
c Var 'aux1042' direct represents '2' with '-4355'
4354 4356 -4355 0
c Encoding variable: aux1043 with domain: int(0..2) (representing constraint ((x_00003_00008=2) + (x_00003_00002=2)))
c Both direct and order encoding.
c Var 'aux1043' order represents '0' with '4357'
c Var 'aux1043' direct represents '0' with '4357'
c Var 'aux1043' order represents '1' with '4358'
-4357 4358 0
c Var 'aux1043' direct represents '1' with '4359'
4357 -4358 4359 0
-4359 4358 0
-4359 -4357 0
c Var 'aux1043' direct represents '2' with '-4358'
4357 4359 -4358 0
c Encoding variable: aux1044 with domain: int(0..2) (representing constraint ((x_00003_00007=2) + (x_00003_00004=2)))
c Both direct and order encoding.
c Var 'aux1044' order represents '0' with '4360'
c Var 'aux1044' direct represents '0' with '4360'
c Var 'aux1044' order represents '1' with '4361'
-4360 4361 0
c Var 'aux1044' direct represents '1' with '4362'
4360 -4361 4362 0
-4362 4361 0
-4362 -4360 0
c Var 'aux1044' direct represents '2' with '-4361'
4360 4362 -4361 0
c Encoding variable: aux1045 with domain: int(0..2) (representing constraint ((x_00003_00006=2) + (x_00003_00005=2)))
c Both direct and order encoding.
c Var 'aux1045' order represents '0' with '4363'
c Var 'aux1045' direct represents '0' with '4363'
c Var 'aux1045' order represents '1' with '4364'
-4363 4364 0
c Var 'aux1045' direct represents '1' with '4365'
4363 -4364 4365 0
-4365 4364 0
-4365 -4363 0
c Var 'aux1045' direct represents '2' with '-4364'
4363 4365 -4364 0
c Encoding variable: aux1046 with domain: int(0..3) (representing constraint ((x_00003_00003=2) + aux1045))
c Both direct and order encoding.
c Var 'aux1046' order represents '0' with '4366'
c Var 'aux1046' direct represents '0' with '4366'
c Var 'aux1046' order represents '1' with '4367'
-4366 4367 0
c Var 'aux1046' direct represents '1' with '4368'
4366 -4367 4368 0
-4368 4367 0
-4368 -4366 0
c Var 'aux1046' order represents '2' with '4369'
-4367 4369 0
c Var 'aux1046' direct represents '2' with '4370'
4367 -4369 4370 0
-4370 4369 0
-4370 -4367 0
c Var 'aux1046' direct represents '3' with '-4369'
4366 4368 4370 -4369 0
c Encoding variable: aux1047 with domain: int(0..4) (representing constraint (aux1042 + aux1044))
c Both direct and order encoding.
c Var 'aux1047' order represents '0' with '4371'
c Var 'aux1047' direct represents '0' with '4371'
c Var 'aux1047' order represents '1' with '4372'
-4371 4372 0
c Var 'aux1047' direct represents '1' with '4373'
4371 -4372 4373 0
-4373 4372 0
-4373 -4371 0
c Var 'aux1047' order represents '2' with '4374'
-4372 4374 0
c Var 'aux1047' direct represents '2' with '4375'
4372 -4374 4375 0
-4375 4374 0
-4375 -4372 0
c Var 'aux1047' order represents '3' with '4376'
-4374 4376 0
c Var 'aux1047' direct represents '3' with '4377'
4374 -4376 4377 0
-4377 4376 0
-4377 -4374 0
c Var 'aux1047' direct represents '4' with '-4376'
4371 4373 4375 4377 -4376 0
c Encoding variable: aux1048 with domain: int(0..2) (representing constraint ((x_00003_00001=3) + (x_00003_00009=3)))
c Both direct and order encoding.
c Var 'aux1048' order represents '0' with '4378'
c Var 'aux1048' direct represents '0' with '4378'
c Var 'aux1048' order represents '1' with '4379'
-4378 4379 0
c Var 'aux1048' direct represents '1' with '4380'
4378 -4379 4380 0
-4380 4379 0
-4380 -4378 0
c Var 'aux1048' direct represents '2' with '-4379'
4378 4380 -4379 0
c Encoding variable: aux1049 with domain: int(0..2) (representing constraint ((x_00003_00008=3) + (x_00003_00002=3)))
c Both direct and order encoding.
c Var 'aux1049' order represents '0' with '4381'
c Var 'aux1049' direct represents '0' with '4381'
c Var 'aux1049' order represents '1' with '4382'
-4381 4382 0
c Var 'aux1049' direct represents '1' with '4383'
4381 -4382 4383 0
-4383 4382 0
-4383 -4381 0
c Var 'aux1049' direct represents '2' with '-4382'
4381 4383 -4382 0
c Encoding variable: aux1050 with domain: int(0..2) (representing constraint ((x_00003_00007=3) + (x_00003_00004=3)))
c Both direct and order encoding.
c Var 'aux1050' order represents '0' with '4384'
c Var 'aux1050' direct represents '0' with '4384'
c Var 'aux1050' order represents '1' with '4385'
-4384 4385 0
c Var 'aux1050' direct represents '1' with '4386'
4384 -4385 4386 0
-4386 4385 0
-4386 -4384 0
c Var 'aux1050' direct represents '2' with '-4385'
4384 4386 -4385 0
c Encoding variable: aux1051 with domain: int(0..2) (representing constraint ((x_00003_00006=3) + (x_00003_00005=3)))
c Both direct and order encoding.
c Var 'aux1051' order represents '0' with '4387'
c Var 'aux1051' direct represents '0' with '4387'
c Var 'aux1051' order represents '1' with '4388'
-4387 4388 0
c Var 'aux1051' direct represents '1' with '4389'
4387 -4388 4389 0
-4389 4388 0
-4389 -4387 0
c Var 'aux1051' direct represents '2' with '-4388'
4387 4389 -4388 0
c Encoding variable: aux1052 with domain: int(0..3) (representing constraint ((x_00003_00003=3) + aux1051))
c Both direct and order encoding.
c Var 'aux1052' order represents '0' with '4390'
c Var 'aux1052' direct represents '0' with '4390'
c Var 'aux1052' order represents '1' with '4391'
-4390 4391 0
c Var 'aux1052' direct represents '1' with '4392'
4390 -4391 4392 0
-4392 4391 0
-4392 -4390 0
c Var 'aux1052' order represents '2' with '4393'
-4391 4393 0
c Var 'aux1052' direct represents '2' with '4394'
4391 -4393 4394 0
-4394 4393 0
-4394 -4391 0
c Var 'aux1052' direct represents '3' with '-4393'
4390 4392 4394 -4393 0
c Encoding variable: aux1053 with domain: int(0..4) (representing constraint (aux1048 + aux1050))
c Both direct and order encoding.
c Var 'aux1053' order represents '0' with '4395'
c Var 'aux1053' direct represents '0' with '4395'
c Var 'aux1053' order represents '1' with '4396'
-4395 4396 0
c Var 'aux1053' direct represents '1' with '4397'
4395 -4396 4397 0
-4397 4396 0
-4397 -4395 0
c Var 'aux1053' order represents '2' with '4398'
-4396 4398 0
c Var 'aux1053' direct represents '2' with '4399'
4396 -4398 4399 0
-4399 4398 0
-4399 -4396 0
c Var 'aux1053' order represents '3' with '4400'
-4398 4400 0
c Var 'aux1053' direct represents '3' with '4401'
4398 -4400 4401 0
-4401 4400 0
-4401 -4398 0
c Var 'aux1053' direct represents '4' with '-4400'
4395 4397 4399 4401 -4400 0
c Encoding variable: aux1054 with domain: int(0..2) (representing constraint ((x_00003_00001=4) + (x_00003_00009=4)))
c Both direct and order encoding.
c Var 'aux1054' order represents '0' with '4402'
c Var 'aux1054' direct represents '0' with '4402'
c Var 'aux1054' order represents '1' with '4403'
-4402 4403 0
c Var 'aux1054' direct represents '1' with '4404'
4402 -4403 4404 0
-4404 4403 0
-4404 -4402 0
c Var 'aux1054' direct represents '2' with '-4403'
4402 4404 -4403 0
c Encoding variable: aux1055 with domain: int(0..2) (representing constraint ((x_00003_00008=4) + (x_00003_00002=4)))
c Both direct and order encoding.
c Var 'aux1055' order represents '0' with '4405'
c Var 'aux1055' direct represents '0' with '4405'
c Var 'aux1055' order represents '1' with '4406'
-4405 4406 0
c Var 'aux1055' direct represents '1' with '4407'
4405 -4406 4407 0
-4407 4406 0
-4407 -4405 0
c Var 'aux1055' direct represents '2' with '-4406'
4405 4407 -4406 0
c Encoding variable: aux1056 with domain: int(0..2) (representing constraint ((x_00003_00007=4) + (x_00003_00004=4)))
c Both direct and order encoding.
c Var 'aux1056' order represents '0' with '4408'
c Var 'aux1056' direct represents '0' with '4408'
c Var 'aux1056' order represents '1' with '4409'
-4408 4409 0
c Var 'aux1056' direct represents '1' with '4410'
4408 -4409 4410 0
-4410 4409 0
-4410 -4408 0
c Var 'aux1056' direct represents '2' with '-4409'
4408 4410 -4409 0
c Encoding variable: aux1057 with domain: int(0..2) (representing constraint ((x_00003_00006=4) + (x_00003_00005=4)))
c Both direct and order encoding.
c Var 'aux1057' order represents '0' with '4411'
c Var 'aux1057' direct represents '0' with '4411'
c Var 'aux1057' order represents '1' with '4412'
-4411 4412 0
c Var 'aux1057' direct represents '1' with '4413'
4411 -4412 4413 0
-4413 4412 0
-4413 -4411 0
c Var 'aux1057' direct represents '2' with '-4412'
4411 4413 -4412 0
c Encoding variable: aux1058 with domain: int(0..3) (representing constraint ((x_00003_00003=4) + aux1057))
c Both direct and order encoding.
c Var 'aux1058' order represents '0' with '4414'
c Var 'aux1058' direct represents '0' with '4414'
c Var 'aux1058' order represents '1' with '4415'
-4414 4415 0
c Var 'aux1058' direct represents '1' with '4416'
4414 -4415 4416 0
-4416 4415 0
-4416 -4414 0
c Var 'aux1058' order represents '2' with '4417'
-4415 4417 0
c Var 'aux1058' direct represents '2' with '4418'
4415 -4417 4418 0
-4418 4417 0
-4418 -4415 0
c Var 'aux1058' direct represents '3' with '-4417'
4414 4416 4418 -4417 0
c Encoding variable: aux1059 with domain: int(0..4) (representing constraint (aux1054 + aux1056))
c Both direct and order encoding.
c Var 'aux1059' order represents '0' with '4419'
c Var 'aux1059' direct represents '0' with '4419'
c Var 'aux1059' order represents '1' with '4420'
-4419 4420 0
c Var 'aux1059' direct represents '1' with '4421'
4419 -4420 4421 0
-4421 4420 0
-4421 -4419 0
c Var 'aux1059' order represents '2' with '4422'
-4420 4422 0
c Var 'aux1059' direct represents '2' with '4423'
4420 -4422 4423 0
-4423 4422 0
-4423 -4420 0
c Var 'aux1059' order represents '3' with '4424'
-4422 4424 0
c Var 'aux1059' direct represents '3' with '4425'
4422 -4424 4425 0
-4425 4424 0
-4425 -4422 0
c Var 'aux1059' direct represents '4' with '-4424'
4419 4421 4423 4425 -4424 0
c Encoding variable: aux1060 with domain: int(0..2) (representing constraint ((x_00003_00001=5) + (x_00003_00009=5)))
c Both direct and order encoding.
c Var 'aux1060' order represents '0' with '4426'
c Var 'aux1060' direct represents '0' with '4426'
c Var 'aux1060' order represents '1' with '4427'
-4426 4427 0
c Var 'aux1060' direct represents '1' with '4428'
4426 -4427 4428 0
-4428 4427 0
-4428 -4426 0
c Var 'aux1060' direct represents '2' with '-4427'
4426 4428 -4427 0
c Encoding variable: aux1061 with domain: int(0..2) (representing constraint ((x_00003_00008=5) + (x_00003_00002=5)))
c Both direct and order encoding.
c Var 'aux1061' order represents '0' with '4429'
c Var 'aux1061' direct represents '0' with '4429'
c Var 'aux1061' order represents '1' with '4430'
-4429 4430 0
c Var 'aux1061' direct represents '1' with '4431'
4429 -4430 4431 0
-4431 4430 0
-4431 -4429 0
c Var 'aux1061' direct represents '2' with '-4430'
4429 4431 -4430 0
c Encoding variable: aux1062 with domain: int(0..2) (representing constraint ((x_00003_00007=5) + (x_00003_00004=5)))
c Both direct and order encoding.
c Var 'aux1062' order represents '0' with '4432'
c Var 'aux1062' direct represents '0' with '4432'
c Var 'aux1062' order represents '1' with '4433'
-4432 4433 0
c Var 'aux1062' direct represents '1' with '4434'
4432 -4433 4434 0
-4434 4433 0
-4434 -4432 0
c Var 'aux1062' direct represents '2' with '-4433'
4432 4434 -4433 0
c Encoding variable: aux1063 with domain: int(0..2) (representing constraint ((x_00003_00006=5) + (x_00003_00005=5)))
c Both direct and order encoding.
c Var 'aux1063' order represents '0' with '4435'
c Var 'aux1063' direct represents '0' with '4435'
c Var 'aux1063' order represents '1' with '4436'
-4435 4436 0
c Var 'aux1063' direct represents '1' with '4437'
4435 -4436 4437 0
-4437 4436 0
-4437 -4435 0
c Var 'aux1063' direct represents '2' with '-4436'
4435 4437 -4436 0
c Encoding variable: aux1064 with domain: int(0..3) (representing constraint ((x_00003_00003=5) + aux1063))
c Both direct and order encoding.
c Var 'aux1064' order represents '0' with '4438'
c Var 'aux1064' direct represents '0' with '4438'
c Var 'aux1064' order represents '1' with '4439'
-4438 4439 0
c Var 'aux1064' direct represents '1' with '4440'
4438 -4439 4440 0
-4440 4439 0
-4440 -4438 0
c Var 'aux1064' order represents '2' with '4441'
-4439 4441 0
c Var 'aux1064' direct represents '2' with '4442'
4439 -4441 4442 0
-4442 4441 0
-4442 -4439 0
c Var 'aux1064' direct represents '3' with '-4441'
4438 4440 4442 -4441 0
c Encoding variable: aux1065 with domain: int(0..4) (representing constraint (aux1060 + aux1062))
c Both direct and order encoding.
c Var 'aux1065' order represents '0' with '4443'
c Var 'aux1065' direct represents '0' with '4443'
c Var 'aux1065' order represents '1' with '4444'
-4443 4444 0
c Var 'aux1065' direct represents '1' with '4445'
4443 -4444 4445 0
-4445 4444 0
-4445 -4443 0
c Var 'aux1065' order represents '2' with '4446'
-4444 4446 0
c Var 'aux1065' direct represents '2' with '4447'
4444 -4446 4447 0
-4447 4446 0
-4447 -4444 0
c Var 'aux1065' order represents '3' with '4448'
-4446 4448 0
c Var 'aux1065' direct represents '3' with '4449'
4446 -4448 4449 0
-4449 4448 0
-4449 -4446 0
c Var 'aux1065' direct represents '4' with '-4448'
4443 4445 4447 4449 -4448 0
c Encoding variable: aux1066 with domain: int(0..2) (representing constraint ((x_00003_00001=6) + (x_00003_00009=6)))
c Both direct and order encoding.
c Var 'aux1066' order represents '0' with '4450'
c Var 'aux1066' direct represents '0' with '4450'
c Var 'aux1066' order represents '1' with '4451'
-4450 4451 0
c Var 'aux1066' direct represents '1' with '4452'
4450 -4451 4452 0
-4452 4451 0
-4452 -4450 0
c Var 'aux1066' direct represents '2' with '-4451'
4450 4452 -4451 0
c Encoding variable: aux1067 with domain: int(0..2) (representing constraint ((x_00003_00008=6) + (x_00003_00002=6)))
c Both direct and order encoding.
c Var 'aux1067' order represents '0' with '4453'
c Var 'aux1067' direct represents '0' with '4453'
c Var 'aux1067' order represents '1' with '4454'
-4453 4454 0
c Var 'aux1067' direct represents '1' with '4455'
4453 -4454 4455 0
-4455 4454 0
-4455 -4453 0
c Var 'aux1067' direct represents '2' with '-4454'
4453 4455 -4454 0
c Encoding variable: aux1068 with domain: int(0..2) (representing constraint ((x_00003_00007=6) + (x_00003_00004=6)))
c Both direct and order encoding.
c Var 'aux1068' order represents '0' with '4456'
c Var 'aux1068' direct represents '0' with '4456'
c Var 'aux1068' order represents '1' with '4457'
-4456 4457 0
c Var 'aux1068' direct represents '1' with '4458'
4456 -4457 4458 0
-4458 4457 0
-4458 -4456 0
c Var 'aux1068' direct represents '2' with '-4457'
4456 4458 -4457 0
c Encoding variable: aux1069 with domain: int(0..2) (representing constraint ((x_00003_00006=6) + (x_00003_00005=6)))
c Both direct and order encoding.
c Var 'aux1069' order represents '0' with '4459'
c Var 'aux1069' direct represents '0' with '4459'
c Var 'aux1069' order represents '1' with '4460'
-4459 4460 0
c Var 'aux1069' direct represents '1' with '4461'
4459 -4460 4461 0
-4461 4460 0
-4461 -4459 0
c Var 'aux1069' direct represents '2' with '-4460'
4459 4461 -4460 0
c Encoding variable: aux1070 with domain: int(0..3) (representing constraint ((x_00003_00003=6) + aux1069))
c Both direct and order encoding.
c Var 'aux1070' order represents '0' with '4462'
c Var 'aux1070' direct represents '0' with '4462'
c Var 'aux1070' order represents '1' with '4463'
-4462 4463 0
c Var 'aux1070' direct represents '1' with '4464'
4462 -4463 4464 0
-4464 4463 0
-4464 -4462 0
c Var 'aux1070' order represents '2' with '4465'
-4463 4465 0
c Var 'aux1070' direct represents '2' with '4466'
4463 -4465 4466 0
-4466 4465 0
-4466 -4463 0
c Var 'aux1070' direct represents '3' with '-4465'
4462 4464 4466 -4465 0
c Encoding variable: aux1071 with domain: int(0..4) (representing constraint (aux1066 + aux1068))
c Both direct and order encoding.
c Var 'aux1071' order represents '0' with '4467'
c Var 'aux1071' direct represents '0' with '4467'
c Var 'aux1071' order represents '1' with '4468'
-4467 4468 0
c Var 'aux1071' direct represents '1' with '4469'
4467 -4468 4469 0
-4469 4468 0
-4469 -4467 0
c Var 'aux1071' order represents '2' with '4470'
-4468 4470 0
c Var 'aux1071' direct represents '2' with '4471'
4468 -4470 4471 0
-4471 4470 0
-4471 -4468 0
c Var 'aux1071' order represents '3' with '4472'
-4470 4472 0
c Var 'aux1071' direct represents '3' with '4473'
4470 -4472 4473 0
-4473 4472 0
-4473 -4470 0
c Var 'aux1071' direct represents '4' with '-4472'
4467 4469 4471 4473 -4472 0
c Encoding variable: aux1072 with domain: int(0..2) (representing constraint ((x_00003_00001=7) + (x_00003_00009=7)))
c Both direct and order encoding.
c Var 'aux1072' order represents '0' with '4474'
c Var 'aux1072' direct represents '0' with '4474'
c Var 'aux1072' order represents '1' with '4475'
-4474 4475 0
c Var 'aux1072' direct represents '1' with '4476'
4474 -4475 4476 0
-4476 4475 0
-4476 -4474 0
c Var 'aux1072' direct represents '2' with '-4475'
4474 4476 -4475 0
c Encoding variable: aux1073 with domain: int(0..2) (representing constraint ((x_00003_00008=7) + (x_00003_00002=7)))
c Both direct and order encoding.
c Var 'aux1073' order represents '0' with '4477'
c Var 'aux1073' direct represents '0' with '4477'
c Var 'aux1073' order represents '1' with '4478'
-4477 4478 0
c Var 'aux1073' direct represents '1' with '4479'
4477 -4478 4479 0
-4479 4478 0
-4479 -4477 0
c Var 'aux1073' direct represents '2' with '-4478'
4477 4479 -4478 0
c Encoding variable: aux1074 with domain: int(0..2) (representing constraint ((x_00003_00007=7) + (x_00003_00004=7)))
c Both direct and order encoding.
c Var 'aux1074' order represents '0' with '4480'
c Var 'aux1074' direct represents '0' with '4480'
c Var 'aux1074' order represents '1' with '4481'
-4480 4481 0
c Var 'aux1074' direct represents '1' with '4482'
4480 -4481 4482 0
-4482 4481 0
-4482 -4480 0
c Var 'aux1074' direct represents '2' with '-4481'
4480 4482 -4481 0
c Encoding variable: aux1075 with domain: int(0..2) (representing constraint ((x_00003_00006=7) + (x_00003_00005=7)))
c Both direct and order encoding.
c Var 'aux1075' order represents '0' with '4483'
c Var 'aux1075' direct represents '0' with '4483'
c Var 'aux1075' order represents '1' with '4484'
-4483 4484 0
c Var 'aux1075' direct represents '1' with '4485'
4483 -4484 4485 0
-4485 4484 0
-4485 -4483 0
c Var 'aux1075' direct represents '2' with '-4484'
4483 4485 -4484 0
c Encoding variable: aux1076 with domain: int(0..3) (representing constraint ((x_00003_00003=7) + aux1075))
c Both direct and order encoding.
c Var 'aux1076' order represents '0' with '4486'
c Var 'aux1076' direct represents '0' with '4486'
c Var 'aux1076' order represents '1' with '4487'
-4486 4487 0
c Var 'aux1076' direct represents '1' with '4488'
4486 -4487 4488 0
-4488 4487 0
-4488 -4486 0
c Var 'aux1076' order represents '2' with '4489'
-4487 4489 0
c Var 'aux1076' direct represents '2' with '4490'
4487 -4489 4490 0
-4490 4489 0
-4490 -4487 0
c Var 'aux1076' direct represents '3' with '-4489'
4486 4488 4490 -4489 0
c Encoding variable: aux1077 with domain: int(0..4) (representing constraint (aux1072 + aux1074))
c Both direct and order encoding.
c Var 'aux1077' order represents '0' with '4491'
c Var 'aux1077' direct represents '0' with '4491'
c Var 'aux1077' order represents '1' with '4492'
-4491 4492 0
c Var 'aux1077' direct represents '1' with '4493'
4491 -4492 4493 0
-4493 4492 0
-4493 -4491 0
c Var 'aux1077' order represents '2' with '4494'
-4492 4494 0
c Var 'aux1077' direct represents '2' with '4495'
4492 -4494 4495 0
-4495 4494 0
-4495 -4492 0
c Var 'aux1077' order represents '3' with '4496'
-4494 4496 0
c Var 'aux1077' direct represents '3' with '4497'
4494 -4496 4497 0
-4497 4496 0
-4497 -4494 0
c Var 'aux1077' direct represents '4' with '-4496'
4491 4493 4495 4497 -4496 0
c Encoding variable: aux1078 with domain: int(0..2) (representing constraint ((x_00003_00001=8) + (x_00003_00009=8)))
c Both direct and order encoding.
c Var 'aux1078' order represents '0' with '4498'
c Var 'aux1078' direct represents '0' with '4498'
c Var 'aux1078' order represents '1' with '4499'
-4498 4499 0
c Var 'aux1078' direct represents '1' with '4500'
4498 -4499 4500 0
-4500 4499 0
-4500 -4498 0
c Var 'aux1078' direct represents '2' with '-4499'
4498 4500 -4499 0
c Encoding variable: aux1079 with domain: int(0..2) (representing constraint ((x_00003_00008=8) + (x_00003_00002=8)))
c Both direct and order encoding.
c Var 'aux1079' order represents '0' with '4501'
c Var 'aux1079' direct represents '0' with '4501'
c Var 'aux1079' order represents '1' with '4502'
-4501 4502 0
c Var 'aux1079' direct represents '1' with '4503'
4501 -4502 4503 0
-4503 4502 0
-4503 -4501 0
c Var 'aux1079' direct represents '2' with '-4502'
4501 4503 -4502 0
c Encoding variable: aux1080 with domain: int(0..2) (representing constraint ((x_00003_00007=8) + (x_00003_00004=8)))
c Both direct and order encoding.
c Var 'aux1080' order represents '0' with '4504'
c Var 'aux1080' direct represents '0' with '4504'
c Var 'aux1080' order represents '1' with '4505'
-4504 4505 0
c Var 'aux1080' direct represents '1' with '4506'
4504 -4505 4506 0
-4506 4505 0
-4506 -4504 0
c Var 'aux1080' direct represents '2' with '-4505'
4504 4506 -4505 0
c Encoding variable: aux1081 with domain: int(0..2) (representing constraint ((x_00003_00006=8) + (x_00003_00005=8)))
c Both direct and order encoding.
c Var 'aux1081' order represents '0' with '4507'
c Var 'aux1081' direct represents '0' with '4507'
c Var 'aux1081' order represents '1' with '4508'
-4507 4508 0
c Var 'aux1081' direct represents '1' with '4509'
4507 -4508 4509 0
-4509 4508 0
-4509 -4507 0
c Var 'aux1081' direct represents '2' with '-4508'
4507 4509 -4508 0
c Encoding variable: aux1082 with domain: int(0..3) (representing constraint ((x_00003_00003=8) + aux1081))
c Both direct and order encoding.
c Var 'aux1082' order represents '0' with '4510'
c Var 'aux1082' direct represents '0' with '4510'
c Var 'aux1082' order represents '1' with '4511'
-4510 4511 0
c Var 'aux1082' direct represents '1' with '4512'
4510 -4511 4512 0
-4512 4511 0
-4512 -4510 0
c Var 'aux1082' order represents '2' with '4513'
-4511 4513 0
c Var 'aux1082' direct represents '2' with '4514'
4511 -4513 4514 0
-4514 4513 0
-4514 -4511 0
c Var 'aux1082' direct represents '3' with '-4513'
4510 4512 4514 -4513 0
c Encoding variable: aux1083 with domain: int(0..4) (representing constraint (aux1078 + aux1080))
c Both direct and order encoding.
c Var 'aux1083' order represents '0' with '4515'
c Var 'aux1083' direct represents '0' with '4515'
c Var 'aux1083' order represents '1' with '4516'
-4515 4516 0
c Var 'aux1083' direct represents '1' with '4517'
4515 -4516 4517 0
-4517 4516 0
-4517 -4515 0
c Var 'aux1083' order represents '2' with '4518'
-4516 4518 0
c Var 'aux1083' direct represents '2' with '4519'
4516 -4518 4519 0
-4519 4518 0
-4519 -4516 0
c Var 'aux1083' order represents '3' with '4520'
-4518 4520 0
c Var 'aux1083' direct represents '3' with '4521'
4518 -4520 4521 0
-4521 4520 0
-4521 -4518 0
c Var 'aux1083' direct represents '4' with '-4520'
4515 4517 4519 4521 -4520 0
c Encoding variable: aux1084 with domain: int(0..2) (representing constraint ((x_00003_00001=9) + (x_00003_00009=9)))
c Both direct and order encoding.
c Var 'aux1084' order represents '0' with '4522'
c Var 'aux1084' direct represents '0' with '4522'
c Var 'aux1084' order represents '1' with '4523'
-4522 4523 0
c Var 'aux1084' direct represents '1' with '4524'
4522 -4523 4524 0
-4524 4523 0
-4524 -4522 0
c Var 'aux1084' direct represents '2' with '-4523'
4522 4524 -4523 0
c Encoding variable: aux1085 with domain: int(0..2) (representing constraint ((x_00003_00008=9) + (x_00003_00002=9)))
c Both direct and order encoding.
c Var 'aux1085' order represents '0' with '4525'
c Var 'aux1085' direct represents '0' with '4525'
c Var 'aux1085' order represents '1' with '4526'
-4525 4526 0
c Var 'aux1085' direct represents '1' with '4527'
4525 -4526 4527 0
-4527 4526 0
-4527 -4525 0
c Var 'aux1085' direct represents '2' with '-4526'
4525 4527 -4526 0
c Encoding variable: aux1086 with domain: int(0..2) (representing constraint ((x_00003_00007=9) + (x_00003_00004=9)))
c Both direct and order encoding.
c Var 'aux1086' order represents '0' with '4528'
c Var 'aux1086' direct represents '0' with '4528'
c Var 'aux1086' order represents '1' with '4529'
-4528 4529 0
c Var 'aux1086' direct represents '1' with '4530'
4528 -4529 4530 0
-4530 4529 0
-4530 -4528 0
c Var 'aux1086' direct represents '2' with '-4529'
4528 4530 -4529 0
c Encoding variable: aux1087 with domain: int(0..2) (representing constraint ((x_00003_00006=9) + (x_00003_00005=9)))
c Both direct and order encoding.
c Var 'aux1087' order represents '0' with '4531'
c Var 'aux1087' direct represents '0' with '4531'
c Var 'aux1087' order represents '1' with '4532'
-4531 4532 0
c Var 'aux1087' direct represents '1' with '4533'
4531 -4532 4533 0
-4533 4532 0
-4533 -4531 0
c Var 'aux1087' direct represents '2' with '-4532'
4531 4533 -4532 0
c Encoding variable: aux1088 with domain: int(0..3) (representing constraint ((x_00003_00003=9) + aux1087))
c Both direct and order encoding.
c Var 'aux1088' order represents '0' with '4534'
c Var 'aux1088' direct represents '0' with '4534'
c Var 'aux1088' order represents '1' with '4535'
-4534 4535 0
c Var 'aux1088' direct represents '1' with '4536'
4534 -4535 4536 0
-4536 4535 0
-4536 -4534 0
c Var 'aux1088' order represents '2' with '4537'
-4535 4537 0
c Var 'aux1088' direct represents '2' with '4538'
4535 -4537 4538 0
-4538 4537 0
-4538 -4535 0
c Var 'aux1088' direct represents '3' with '-4537'
4534 4536 4538 -4537 0
c Encoding variable: aux1089 with domain: int(0..4) (representing constraint (aux1084 + aux1086))
c Both direct and order encoding.
c Var 'aux1089' order represents '0' with '4539'
c Var 'aux1089' direct represents '0' with '4539'
c Var 'aux1089' order represents '1' with '4540'
-4539 4540 0
c Var 'aux1089' direct represents '1' with '4541'
4539 -4540 4541 0
-4541 4540 0
-4541 -4539 0
c Var 'aux1089' order represents '2' with '4542'
-4540 4542 0
c Var 'aux1089' direct represents '2' with '4543'
4540 -4542 4543 0
-4543 4542 0
-4543 -4540 0
c Var 'aux1089' order represents '3' with '4544'
-4542 4544 0
c Var 'aux1089' direct represents '3' with '4545'
4542 -4544 4545 0
-4545 4544 0
-4545 -4542 0
c Var 'aux1089' direct represents '4' with '-4544'
4539 4541 4543 4545 -4544 0
c Encoding variable: aux1090 with domain: int(0..2) (representing constraint ((x_00004_00001=1) + (x_00004_00009=1)))
c Both direct and order encoding.
c Var 'aux1090' order represents '0' with '4546'
c Var 'aux1090' direct represents '0' with '4546'
c Var 'aux1090' order represents '1' with '4547'
-4546 4547 0
c Var 'aux1090' direct represents '1' with '4548'
4546 -4547 4548 0
-4548 4547 0
-4548 -4546 0
c Var 'aux1090' direct represents '2' with '-4547'
4546 4548 -4547 0
c Encoding variable: aux1091 with domain: int(0..2) (representing constraint ((x_00004_00008=1) + (x_00004_00002=1)))
c Both direct and order encoding.
c Var 'aux1091' order represents '0' with '4549'
c Var 'aux1091' direct represents '0' with '4549'
c Var 'aux1091' order represents '1' with '4550'
-4549 4550 0
c Var 'aux1091' direct represents '1' with '4551'
4549 -4550 4551 0
-4551 4550 0
-4551 -4549 0
c Var 'aux1091' direct represents '2' with '-4550'
4549 4551 -4550 0
c Encoding variable: aux1092 with domain: int(0..2) (representing constraint ((x_00004_00007=1) + (x_00004_00004=1)))
c Both direct and order encoding.
c Var 'aux1092' order represents '0' with '4552'
c Var 'aux1092' direct represents '0' with '4552'
c Var 'aux1092' order represents '1' with '4553'
-4552 4553 0
c Var 'aux1092' direct represents '1' with '4554'
4552 -4553 4554 0
-4554 4553 0
-4554 -4552 0
c Var 'aux1092' direct represents '2' with '-4553'
4552 4554 -4553 0
c Encoding variable: aux1093 with domain: int(0..2) (representing constraint ((x_00004_00006=1) + (x_00004_00005=1)))
c Both direct and order encoding.
c Var 'aux1093' order represents '0' with '4555'
c Var 'aux1093' direct represents '0' with '4555'
c Var 'aux1093' order represents '1' with '4556'
-4555 4556 0
c Var 'aux1093' direct represents '1' with '4557'
4555 -4556 4557 0
-4557 4556 0
-4557 -4555 0
c Var 'aux1093' direct represents '2' with '-4556'
4555 4557 -4556 0
c Encoding variable: aux1094 with domain: int(0..3) (representing constraint ((x_00004_00003=1) + aux1093))
c Both direct and order encoding.
c Var 'aux1094' order represents '0' with '4558'
c Var 'aux1094' direct represents '0' with '4558'
c Var 'aux1094' order represents '1' with '4559'
-4558 4559 0
c Var 'aux1094' direct represents '1' with '4560'
4558 -4559 4560 0
-4560 4559 0
-4560 -4558 0
c Var 'aux1094' order represents '2' with '4561'
-4559 4561 0
c Var 'aux1094' direct represents '2' with '4562'
4559 -4561 4562 0
-4562 4561 0
-4562 -4559 0
c Var 'aux1094' direct represents '3' with '-4561'
4558 4560 4562 -4561 0
c Encoding variable: aux1095 with domain: int(0..4) (representing constraint (aux1090 + aux1092))
c Both direct and order encoding.
c Var 'aux1095' order represents '0' with '4563'
c Var 'aux1095' direct represents '0' with '4563'
c Var 'aux1095' order represents '1' with '4564'
-4563 4564 0
c Var 'aux1095' direct represents '1' with '4565'
4563 -4564 4565 0
-4565 4564 0
-4565 -4563 0
c Var 'aux1095' order represents '2' with '4566'
-4564 4566 0
c Var 'aux1095' direct represents '2' with '4567'
4564 -4566 4567 0
-4567 4566 0
-4567 -4564 0
c Var 'aux1095' order represents '3' with '4568'
-4566 4568 0
c Var 'aux1095' direct represents '3' with '4569'
4566 -4568 4569 0
-4569 4568 0
-4569 -4566 0
c Var 'aux1095' direct represents '4' with '-4568'
4563 4565 4567 4569 -4568 0
c Encoding variable: aux1096 with domain: int(0..2) (representing constraint ((x_00004_00001=2) + (x_00004_00009=2)))
c Both direct and order encoding.
c Var 'aux1096' order represents '0' with '4570'
c Var 'aux1096' direct represents '0' with '4570'
c Var 'aux1096' order represents '1' with '4571'
-4570 4571 0
c Var 'aux1096' direct represents '1' with '4572'
4570 -4571 4572 0
-4572 4571 0
-4572 -4570 0
c Var 'aux1096' direct represents '2' with '-4571'
4570 4572 -4571 0
c Encoding variable: aux1097 with domain: int(0..2) (representing constraint ((x_00004_00008=2) + (x_00004_00002=2)))
c Both direct and order encoding.
c Var 'aux1097' order represents '0' with '4573'
c Var 'aux1097' direct represents '0' with '4573'
c Var 'aux1097' order represents '1' with '4574'
-4573 4574 0
c Var 'aux1097' direct represents '1' with '4575'
4573 -4574 4575 0
-4575 4574 0
-4575 -4573 0
c Var 'aux1097' direct represents '2' with '-4574'
4573 4575 -4574 0
c Encoding variable: aux1098 with domain: int(0..2) (representing constraint ((x_00004_00007=2) + (x_00004_00004=2)))
c Both direct and order encoding.
c Var 'aux1098' order represents '0' with '4576'
c Var 'aux1098' direct represents '0' with '4576'
c Var 'aux1098' order represents '1' with '4577'
-4576 4577 0
c Var 'aux1098' direct represents '1' with '4578'
4576 -4577 4578 0
-4578 4577 0
-4578 -4576 0
c Var 'aux1098' direct represents '2' with '-4577'
4576 4578 -4577 0
c Encoding variable: aux1099 with domain: int(0..2) (representing constraint ((x_00004_00006=2) + (x_00004_00005=2)))
c Both direct and order encoding.
c Var 'aux1099' order represents '0' with '4579'
c Var 'aux1099' direct represents '0' with '4579'
c Var 'aux1099' order represents '1' with '4580'
-4579 4580 0
c Var 'aux1099' direct represents '1' with '4581'
4579 -4580 4581 0
-4581 4580 0
-4581 -4579 0
c Var 'aux1099' direct represents '2' with '-4580'
4579 4581 -4580 0
c Encoding variable: aux1100 with domain: int(0..3) (representing constraint ((x_00004_00003=2) + aux1099))
c Both direct and order encoding.
c Var 'aux1100' order represents '0' with '4582'
c Var 'aux1100' direct represents '0' with '4582'
c Var 'aux1100' order represents '1' with '4583'
-4582 4583 0
c Var 'aux1100' direct represents '1' with '4584'
4582 -4583 4584 0
-4584 4583 0
-4584 -4582 0
c Var 'aux1100' order represents '2' with '4585'
-4583 4585 0
c Var 'aux1100' direct represents '2' with '4586'
4583 -4585 4586 0
-4586 4585 0
-4586 -4583 0
c Var 'aux1100' direct represents '3' with '-4585'
4582 4584 4586 -4585 0
c Encoding variable: aux1101 with domain: int(0..4) (representing constraint (aux1096 + aux1098))
c Both direct and order encoding.
c Var 'aux1101' order represents '0' with '4587'
c Var 'aux1101' direct represents '0' with '4587'
c Var 'aux1101' order represents '1' with '4588'
-4587 4588 0
c Var 'aux1101' direct represents '1' with '4589'
4587 -4588 4589 0
-4589 4588 0
-4589 -4587 0
c Var 'aux1101' order represents '2' with '4590'
-4588 4590 0
c Var 'aux1101' direct represents '2' with '4591'
4588 -4590 4591 0
-4591 4590 0
-4591 -4588 0
c Var 'aux1101' order represents '3' with '4592'
-4590 4592 0
c Var 'aux1101' direct represents '3' with '4593'
4590 -4592 4593 0
-4593 4592 0
-4593 -4590 0
c Var 'aux1101' direct represents '4' with '-4592'
4587 4589 4591 4593 -4592 0
c Encoding variable: aux1102 with domain: int(0..2) (representing constraint ((x_00004_00001=3) + (x_00004_00009=3)))
c Both direct and order encoding.
c Var 'aux1102' order represents '0' with '4594'
c Var 'aux1102' direct represents '0' with '4594'
c Var 'aux1102' order represents '1' with '4595'
-4594 4595 0
c Var 'aux1102' direct represents '1' with '4596'
4594 -4595 4596 0
-4596 4595 0
-4596 -4594 0
c Var 'aux1102' direct represents '2' with '-4595'
4594 4596 -4595 0
c Encoding variable: aux1103 with domain: int(0..2) (representing constraint ((x_00004_00008=3) + (x_00004_00002=3)))
c Both direct and order encoding.
c Var 'aux1103' order represents '0' with '4597'
c Var 'aux1103' direct represents '0' with '4597'
c Var 'aux1103' order represents '1' with '4598'
-4597 4598 0
c Var 'aux1103' direct represents '1' with '4599'
4597 -4598 4599 0
-4599 4598 0
-4599 -4597 0
c Var 'aux1103' direct represents '2' with '-4598'
4597 4599 -4598 0
c Encoding variable: aux1104 with domain: int(0..2) (representing constraint ((x_00004_00007=3) + (x_00004_00004=3)))
c Both direct and order encoding.
c Var 'aux1104' order represents '0' with '4600'
c Var 'aux1104' direct represents '0' with '4600'
c Var 'aux1104' order represents '1' with '4601'
-4600 4601 0
c Var 'aux1104' direct represents '1' with '4602'
4600 -4601 4602 0
-4602 4601 0
-4602 -4600 0
c Var 'aux1104' direct represents '2' with '-4601'
4600 4602 -4601 0
c Encoding variable: aux1105 with domain: int(0..2) (representing constraint ((x_00004_00006=3) + (x_00004_00005=3)))
c Both direct and order encoding.
c Var 'aux1105' order represents '0' with '4603'
c Var 'aux1105' direct represents '0' with '4603'
c Var 'aux1105' order represents '1' with '4604'
-4603 4604 0
c Var 'aux1105' direct represents '1' with '4605'
4603 -4604 4605 0
-4605 4604 0
-4605 -4603 0
c Var 'aux1105' direct represents '2' with '-4604'
4603 4605 -4604 0
c Encoding variable: aux1106 with domain: int(0..3) (representing constraint ((x_00004_00003=3) + aux1105))
c Both direct and order encoding.
c Var 'aux1106' order represents '0' with '4606'
c Var 'aux1106' direct represents '0' with '4606'
c Var 'aux1106' order represents '1' with '4607'
-4606 4607 0
c Var 'aux1106' direct represents '1' with '4608'
4606 -4607 4608 0
-4608 4607 0
-4608 -4606 0
c Var 'aux1106' order represents '2' with '4609'
-4607 4609 0
c Var 'aux1106' direct represents '2' with '4610'
4607 -4609 4610 0
-4610 4609 0
-4610 -4607 0
c Var 'aux1106' direct represents '3' with '-4609'
4606 4608 4610 -4609 0
c Encoding variable: aux1107 with domain: int(0..4) (representing constraint (aux1102 + aux1104))
c Both direct and order encoding.
c Var 'aux1107' order represents '0' with '4611'
c Var 'aux1107' direct represents '0' with '4611'
c Var 'aux1107' order represents '1' with '4612'
-4611 4612 0
c Var 'aux1107' direct represents '1' with '4613'
4611 -4612 4613 0
-4613 4612 0
-4613 -4611 0
c Var 'aux1107' order represents '2' with '4614'
-4612 4614 0
c Var 'aux1107' direct represents '2' with '4615'
4612 -4614 4615 0
-4615 4614 0
-4615 -4612 0
c Var 'aux1107' order represents '3' with '4616'
-4614 4616 0
c Var 'aux1107' direct represents '3' with '4617'
4614 -4616 4617 0
-4617 4616 0
-4617 -4614 0
c Var 'aux1107' direct represents '4' with '-4616'
4611 4613 4615 4617 -4616 0
c Encoding variable: aux1108 with domain: int(0..2) (representing constraint ((x_00004_00001=4) + (x_00004_00009=4)))
c Both direct and order encoding.
c Var 'aux1108' order represents '0' with '4618'
c Var 'aux1108' direct represents '0' with '4618'
c Var 'aux1108' order represents '1' with '4619'
-4618 4619 0
c Var 'aux1108' direct represents '1' with '4620'
4618 -4619 4620 0
-4620 4619 0
-4620 -4618 0
c Var 'aux1108' direct represents '2' with '-4619'
4618 4620 -4619 0
c Encoding variable: aux1109 with domain: int(0..2) (representing constraint ((x_00004_00008=4) + (x_00004_00002=4)))
c Both direct and order encoding.
c Var 'aux1109' order represents '0' with '4621'
c Var 'aux1109' direct represents '0' with '4621'
c Var 'aux1109' order represents '1' with '4622'
-4621 4622 0
c Var 'aux1109' direct represents '1' with '4623'
4621 -4622 4623 0
-4623 4622 0
-4623 -4621 0
c Var 'aux1109' direct represents '2' with '-4622'
4621 4623 -4622 0
c Encoding variable: aux1110 with domain: int(0..2) (representing constraint ((x_00004_00007=4) + (x_00004_00004=4)))
c Both direct and order encoding.
c Var 'aux1110' order represents '0' with '4624'
c Var 'aux1110' direct represents '0' with '4624'
c Var 'aux1110' order represents '1' with '4625'
-4624 4625 0
c Var 'aux1110' direct represents '1' with '4626'
4624 -4625 4626 0
-4626 4625 0
-4626 -4624 0
c Var 'aux1110' direct represents '2' with '-4625'
4624 4626 -4625 0
c Encoding variable: aux1111 with domain: int(0..2) (representing constraint ((x_00004_00006=4) + (x_00004_00005=4)))
c Both direct and order encoding.
c Var 'aux1111' order represents '0' with '4627'
c Var 'aux1111' direct represents '0' with '4627'
c Var 'aux1111' order represents '1' with '4628'
-4627 4628 0
c Var 'aux1111' direct represents '1' with '4629'
4627 -4628 4629 0
-4629 4628 0
-4629 -4627 0
c Var 'aux1111' direct represents '2' with '-4628'
4627 4629 -4628 0
c Encoding variable: aux1112 with domain: int(0..3) (representing constraint ((x_00004_00003=4) + aux1111))
c Both direct and order encoding.
c Var 'aux1112' order represents '0' with '4630'
c Var 'aux1112' direct represents '0' with '4630'
c Var 'aux1112' order represents '1' with '4631'
-4630 4631 0
c Var 'aux1112' direct represents '1' with '4632'
4630 -4631 4632 0
-4632 4631 0
-4632 -4630 0
c Var 'aux1112' order represents '2' with '4633'
-4631 4633 0
c Var 'aux1112' direct represents '2' with '4634'
4631 -4633 4634 0
-4634 4633 0
-4634 -4631 0
c Var 'aux1112' direct represents '3' with '-4633'
4630 4632 4634 -4633 0
c Encoding variable: aux1113 with domain: int(0..4) (representing constraint (aux1108 + aux1110))
c Both direct and order encoding.
c Var 'aux1113' order represents '0' with '4635'
c Var 'aux1113' direct represents '0' with '4635'
c Var 'aux1113' order represents '1' with '4636'
-4635 4636 0
c Var 'aux1113' direct represents '1' with '4637'
4635 -4636 4637 0
-4637 4636 0
-4637 -4635 0
c Var 'aux1113' order represents '2' with '4638'
-4636 4638 0
c Var 'aux1113' direct represents '2' with '4639'
4636 -4638 4639 0
-4639 4638 0
-4639 -4636 0
c Var 'aux1113' order represents '3' with '4640'
-4638 4640 0
c Var 'aux1113' direct represents '3' with '4641'
4638 -4640 4641 0
-4641 4640 0
-4641 -4638 0
c Var 'aux1113' direct represents '4' with '-4640'
4635 4637 4639 4641 -4640 0
c Encoding variable: aux1114 with domain: int(0..2) (representing constraint ((x_00004_00001=5) + (x_00004_00009=5)))
c Both direct and order encoding.
c Var 'aux1114' order represents '0' with '4642'
c Var 'aux1114' direct represents '0' with '4642'
c Var 'aux1114' order represents '1' with '4643'
-4642 4643 0
c Var 'aux1114' direct represents '1' with '4644'
4642 -4643 4644 0
-4644 4643 0
-4644 -4642 0
c Var 'aux1114' direct represents '2' with '-4643'
4642 4644 -4643 0
c Encoding variable: aux1115 with domain: int(0..2) (representing constraint ((x_00004_00008=5) + (x_00004_00002=5)))
c Both direct and order encoding.
c Var 'aux1115' order represents '0' with '4645'
c Var 'aux1115' direct represents '0' with '4645'
c Var 'aux1115' order represents '1' with '4646'
-4645 4646 0
c Var 'aux1115' direct represents '1' with '4647'
4645 -4646 4647 0
-4647 4646 0
-4647 -4645 0
c Var 'aux1115' direct represents '2' with '-4646'
4645 4647 -4646 0
c Encoding variable: aux1116 with domain: int(0..2) (representing constraint ((x_00004_00007=5) + (x_00004_00004=5)))
c Both direct and order encoding.
c Var 'aux1116' order represents '0' with '4648'
c Var 'aux1116' direct represents '0' with '4648'
c Var 'aux1116' order represents '1' with '4649'
-4648 4649 0
c Var 'aux1116' direct represents '1' with '4650'
4648 -4649 4650 0
-4650 4649 0
-4650 -4648 0
c Var 'aux1116' direct represents '2' with '-4649'
4648 4650 -4649 0
c Encoding variable: aux1117 with domain: int(0..2) (representing constraint ((x_00004_00006=5) + (x_00004_00005=5)))
c Both direct and order encoding.
c Var 'aux1117' order represents '0' with '4651'
c Var 'aux1117' direct represents '0' with '4651'
c Var 'aux1117' order represents '1' with '4652'
-4651 4652 0
c Var 'aux1117' direct represents '1' with '4653'
4651 -4652 4653 0
-4653 4652 0
-4653 -4651 0
c Var 'aux1117' direct represents '2' with '-4652'
4651 4653 -4652 0
c Encoding variable: aux1118 with domain: int(0..3) (representing constraint ((x_00004_00003=5) + aux1117))
c Both direct and order encoding.
c Var 'aux1118' order represents '0' with '4654'
c Var 'aux1118' direct represents '0' with '4654'
c Var 'aux1118' order represents '1' with '4655'
-4654 4655 0
c Var 'aux1118' direct represents '1' with '4656'
4654 -4655 4656 0
-4656 4655 0
-4656 -4654 0
c Var 'aux1118' order represents '2' with '4657'
-4655 4657 0
c Var 'aux1118' direct represents '2' with '4658'
4655 -4657 4658 0
-4658 4657 0
-4658 -4655 0
c Var 'aux1118' direct represents '3' with '-4657'
4654 4656 4658 -4657 0
c Encoding variable: aux1119 with domain: int(0..4) (representing constraint (aux1114 + aux1116))
c Both direct and order encoding.
c Var 'aux1119' order represents '0' with '4659'
c Var 'aux1119' direct represents '0' with '4659'
c Var 'aux1119' order represents '1' with '4660'
-4659 4660 0
c Var 'aux1119' direct represents '1' with '4661'
4659 -4660 4661 0
-4661 4660 0
-4661 -4659 0
c Var 'aux1119' order represents '2' with '4662'
-4660 4662 0
c Var 'aux1119' direct represents '2' with '4663'
4660 -4662 4663 0
-4663 4662 0
-4663 -4660 0
c Var 'aux1119' order represents '3' with '4664'
-4662 4664 0
c Var 'aux1119' direct represents '3' with '4665'
4662 -4664 4665 0
-4665 4664 0
-4665 -4662 0
c Var 'aux1119' direct represents '4' with '-4664'
4659 4661 4663 4665 -4664 0
c Encoding variable: aux1120 with domain: int(0..2) (representing constraint ((x_00004_00001=6) + (x_00004_00009=6)))
c Both direct and order encoding.
c Var 'aux1120' order represents '0' with '4666'
c Var 'aux1120' direct represents '0' with '4666'
c Var 'aux1120' order represents '1' with '4667'
-4666 4667 0
c Var 'aux1120' direct represents '1' with '4668'
4666 -4667 4668 0
-4668 4667 0
-4668 -4666 0
c Var 'aux1120' direct represents '2' with '-4667'
4666 4668 -4667 0
c Encoding variable: aux1121 with domain: int(0..2) (representing constraint ((x_00004_00008=6) + (x_00004_00002=6)))
c Both direct and order encoding.
c Var 'aux1121' order represents '0' with '4669'
c Var 'aux1121' direct represents '0' with '4669'
c Var 'aux1121' order represents '1' with '4670'
-4669 4670 0
c Var 'aux1121' direct represents '1' with '4671'
4669 -4670 4671 0
-4671 4670 0
-4671 -4669 0
c Var 'aux1121' direct represents '2' with '-4670'
4669 4671 -4670 0
c Encoding variable: aux1122 with domain: int(0..2) (representing constraint ((x_00004_00007=6) + (x_00004_00004=6)))
c Both direct and order encoding.
c Var 'aux1122' order represents '0' with '4672'
c Var 'aux1122' direct represents '0' with '4672'
c Var 'aux1122' order represents '1' with '4673'
-4672 4673 0
c Var 'aux1122' direct represents '1' with '4674'
4672 -4673 4674 0
-4674 4673 0
-4674 -4672 0
c Var 'aux1122' direct represents '2' with '-4673'
4672 4674 -4673 0
c Encoding variable: aux1123 with domain: int(0..2) (representing constraint ((x_00004_00006=6) + (x_00004_00005=6)))
c Both direct and order encoding.
c Var 'aux1123' order represents '0' with '4675'
c Var 'aux1123' direct represents '0' with '4675'
c Var 'aux1123' order represents '1' with '4676'
-4675 4676 0
c Var 'aux1123' direct represents '1' with '4677'
4675 -4676 4677 0
-4677 4676 0
-4677 -4675 0
c Var 'aux1123' direct represents '2' with '-4676'
4675 4677 -4676 0
c Encoding variable: aux1124 with domain: int(0..3) (representing constraint ((x_00004_00003=6) + aux1123))
c Both direct and order encoding.
c Var 'aux1124' order represents '0' with '4678'
c Var 'aux1124' direct represents '0' with '4678'
c Var 'aux1124' order represents '1' with '4679'
-4678 4679 0
c Var 'aux1124' direct represents '1' with '4680'
4678 -4679 4680 0
-4680 4679 0
-4680 -4678 0
c Var 'aux1124' order represents '2' with '4681'
-4679 4681 0
c Var 'aux1124' direct represents '2' with '4682'
4679 -4681 4682 0
-4682 4681 0
-4682 -4679 0
c Var 'aux1124' direct represents '3' with '-4681'
4678 4680 4682 -4681 0
c Encoding variable: aux1125 with domain: int(0..4) (representing constraint (aux1120 + aux1122))
c Both direct and order encoding.
c Var 'aux1125' order represents '0' with '4683'
c Var 'aux1125' direct represents '0' with '4683'
c Var 'aux1125' order represents '1' with '4684'
-4683 4684 0
c Var 'aux1125' direct represents '1' with '4685'
4683 -4684 4685 0
-4685 4684 0
-4685 -4683 0
c Var 'aux1125' order represents '2' with '4686'
-4684 4686 0
c Var 'aux1125' direct represents '2' with '4687'
4684 -4686 4687 0
-4687 4686 0
-4687 -4684 0
c Var 'aux1125' order represents '3' with '4688'
-4686 4688 0
c Var 'aux1125' direct represents '3' with '4689'
4686 -4688 4689 0
-4689 4688 0
-4689 -4686 0
c Var 'aux1125' direct represents '4' with '-4688'
4683 4685 4687 4689 -4688 0
c Encoding variable: aux1126 with domain: int(0..2) (representing constraint ((x_00004_00001=7) + (x_00004_00009=7)))
c Both direct and order encoding.
c Var 'aux1126' order represents '0' with '4690'
c Var 'aux1126' direct represents '0' with '4690'
c Var 'aux1126' order represents '1' with '4691'
-4690 4691 0
c Var 'aux1126' direct represents '1' with '4692'
4690 -4691 4692 0
-4692 4691 0
-4692 -4690 0
c Var 'aux1126' direct represents '2' with '-4691'
4690 4692 -4691 0
c Encoding variable: aux1127 with domain: int(0..2) (representing constraint ((x_00004_00008=7) + (x_00004_00002=7)))
c Both direct and order encoding.
c Var 'aux1127' order represents '0' with '4693'
c Var 'aux1127' direct represents '0' with '4693'
c Var 'aux1127' order represents '1' with '4694'
-4693 4694 0
c Var 'aux1127' direct represents '1' with '4695'
4693 -4694 4695 0
-4695 4694 0
-4695 -4693 0
c Var 'aux1127' direct represents '2' with '-4694'
4693 4695 -4694 0
c Encoding variable: aux1128 with domain: int(0..2) (representing constraint ((x_00004_00007=7) + (x_00004_00004=7)))
c Both direct and order encoding.
c Var 'aux1128' order represents '0' with '4696'
c Var 'aux1128' direct represents '0' with '4696'
c Var 'aux1128' order represents '1' with '4697'
-4696 4697 0
c Var 'aux1128' direct represents '1' with '4698'
4696 -4697 4698 0
-4698 4697 0
-4698 -4696 0
c Var 'aux1128' direct represents '2' with '-4697'
4696 4698 -4697 0
c Encoding variable: aux1129 with domain: int(0..2) (representing constraint ((x_00004_00006=7) + (x_00004_00005=7)))
c Both direct and order encoding.
c Var 'aux1129' order represents '0' with '4699'
c Var 'aux1129' direct represents '0' with '4699'
c Var 'aux1129' order represents '1' with '4700'
-4699 4700 0
c Var 'aux1129' direct represents '1' with '4701'
4699 -4700 4701 0
-4701 4700 0
-4701 -4699 0
c Var 'aux1129' direct represents '2' with '-4700'
4699 4701 -4700 0
c Encoding variable: aux1130 with domain: int(0..3) (representing constraint ((x_00004_00003=7) + aux1129))
c Both direct and order encoding.
c Var 'aux1130' order represents '0' with '4702'
c Var 'aux1130' direct represents '0' with '4702'
c Var 'aux1130' order represents '1' with '4703'
-4702 4703 0
c Var 'aux1130' direct represents '1' with '4704'
4702 -4703 4704 0
-4704 4703 0
-4704 -4702 0
c Var 'aux1130' order represents '2' with '4705'
-4703 4705 0
c Var 'aux1130' direct represents '2' with '4706'
4703 -4705 4706 0
-4706 4705 0
-4706 -4703 0
c Var 'aux1130' direct represents '3' with '-4705'
4702 4704 4706 -4705 0
c Encoding variable: aux1131 with domain: int(0..4) (representing constraint (aux1126 + aux1128))
c Both direct and order encoding.
c Var 'aux1131' order represents '0' with '4707'
c Var 'aux1131' direct represents '0' with '4707'
c Var 'aux1131' order represents '1' with '4708'
-4707 4708 0
c Var 'aux1131' direct represents '1' with '4709'
4707 -4708 4709 0
-4709 4708 0
-4709 -4707 0
c Var 'aux1131' order represents '2' with '4710'
-4708 4710 0
c Var 'aux1131' direct represents '2' with '4711'
4708 -4710 4711 0
-4711 4710 0
-4711 -4708 0
c Var 'aux1131' order represents '3' with '4712'
-4710 4712 0
c Var 'aux1131' direct represents '3' with '4713'
4710 -4712 4713 0
-4713 4712 0
-4713 -4710 0
c Var 'aux1131' direct represents '4' with '-4712'
4707 4709 4711 4713 -4712 0
c Encoding variable: aux1132 with domain: int(0..2) (representing constraint ((x_00004_00001=8) + (x_00004_00009=8)))
c Both direct and order encoding.
c Var 'aux1132' order represents '0' with '4714'
c Var 'aux1132' direct represents '0' with '4714'
c Var 'aux1132' order represents '1' with '4715'
-4714 4715 0
c Var 'aux1132' direct represents '1' with '4716'
4714 -4715 4716 0
-4716 4715 0
-4716 -4714 0
c Var 'aux1132' direct represents '2' with '-4715'
4714 4716 -4715 0
c Encoding variable: aux1133 with domain: int(0..2) (representing constraint ((x_00004_00008=8) + (x_00004_00002=8)))
c Both direct and order encoding.
c Var 'aux1133' order represents '0' with '4717'
c Var 'aux1133' direct represents '0' with '4717'
c Var 'aux1133' order represents '1' with '4718'
-4717 4718 0
c Var 'aux1133' direct represents '1' with '4719'
4717 -4718 4719 0
-4719 4718 0
-4719 -4717 0
c Var 'aux1133' direct represents '2' with '-4718'
4717 4719 -4718 0
c Encoding variable: aux1134 with domain: int(0..2) (representing constraint ((x_00004_00007=8) + (x_00004_00004=8)))
c Both direct and order encoding.
c Var 'aux1134' order represents '0' with '4720'
c Var 'aux1134' direct represents '0' with '4720'
c Var 'aux1134' order represents '1' with '4721'
-4720 4721 0
c Var 'aux1134' direct represents '1' with '4722'
4720 -4721 4722 0
-4722 4721 0
-4722 -4720 0
c Var 'aux1134' direct represents '2' with '-4721'
4720 4722 -4721 0
c Encoding variable: aux1135 with domain: int(0..2) (representing constraint ((x_00004_00006=8) + (x_00004_00005=8)))
c Both direct and order encoding.
c Var 'aux1135' order represents '0' with '4723'
c Var 'aux1135' direct represents '0' with '4723'
c Var 'aux1135' order represents '1' with '4724'
-4723 4724 0
c Var 'aux1135' direct represents '1' with '4725'
4723 -4724 4725 0
-4725 4724 0
-4725 -4723 0
c Var 'aux1135' direct represents '2' with '-4724'
4723 4725 -4724 0
c Encoding variable: aux1136 with domain: int(0..3) (representing constraint ((x_00004_00003=8) + aux1135))
c Both direct and order encoding.
c Var 'aux1136' order represents '0' with '4726'
c Var 'aux1136' direct represents '0' with '4726'
c Var 'aux1136' order represents '1' with '4727'
-4726 4727 0
c Var 'aux1136' direct represents '1' with '4728'
4726 -4727 4728 0
-4728 4727 0
-4728 -4726 0
c Var 'aux1136' order represents '2' with '4729'
-4727 4729 0
c Var 'aux1136' direct represents '2' with '4730'
4727 -4729 4730 0
-4730 4729 0
-4730 -4727 0
c Var 'aux1136' direct represents '3' with '-4729'
4726 4728 4730 -4729 0
c Encoding variable: aux1137 with domain: int(0..4) (representing constraint (aux1132 + aux1134))
c Both direct and order encoding.
c Var 'aux1137' order represents '0' with '4731'
c Var 'aux1137' direct represents '0' with '4731'
c Var 'aux1137' order represents '1' with '4732'
-4731 4732 0
c Var 'aux1137' direct represents '1' with '4733'
4731 -4732 4733 0
-4733 4732 0
-4733 -4731 0
c Var 'aux1137' order represents '2' with '4734'
-4732 4734 0
c Var 'aux1137' direct represents '2' with '4735'
4732 -4734 4735 0
-4735 4734 0
-4735 -4732 0
c Var 'aux1137' order represents '3' with '4736'
-4734 4736 0
c Var 'aux1137' direct represents '3' with '4737'
4734 -4736 4737 0
-4737 4736 0
-4737 -4734 0
c Var 'aux1137' direct represents '4' with '-4736'
4731 4733 4735 4737 -4736 0
c Encoding variable: aux1138 with domain: int(0..2) (representing constraint ((x_00004_00001=9) + (x_00004_00009=9)))
c Both direct and order encoding.
c Var 'aux1138' order represents '0' with '4738'
c Var 'aux1138' direct represents '0' with '4738'
c Var 'aux1138' order represents '1' with '4739'
-4738 4739 0
c Var 'aux1138' direct represents '1' with '4740'
4738 -4739 4740 0
-4740 4739 0
-4740 -4738 0
c Var 'aux1138' direct represents '2' with '-4739'
4738 4740 -4739 0
c Encoding variable: aux1139 with domain: int(0..2) (representing constraint ((x_00004_00008=9) + (x_00004_00002=9)))
c Both direct and order encoding.
c Var 'aux1139' order represents '0' with '4741'
c Var 'aux1139' direct represents '0' with '4741'
c Var 'aux1139' order represents '1' with '4742'
-4741 4742 0
c Var 'aux1139' direct represents '1' with '4743'
4741 -4742 4743 0
-4743 4742 0
-4743 -4741 0
c Var 'aux1139' direct represents '2' with '-4742'
4741 4743 -4742 0
c Encoding variable: aux1140 with domain: int(0..2) (representing constraint ((x_00004_00007=9) + (x_00004_00004=9)))
c Both direct and order encoding.
c Var 'aux1140' order represents '0' with '4744'
c Var 'aux1140' direct represents '0' with '4744'
c Var 'aux1140' order represents '1' with '4745'
-4744 4745 0
c Var 'aux1140' direct represents '1' with '4746'
4744 -4745 4746 0
-4746 4745 0
-4746 -4744 0
c Var 'aux1140' direct represents '2' with '-4745'
4744 4746 -4745 0
c Encoding variable: aux1141 with domain: int(0..2) (representing constraint ((x_00004_00006=9) + (x_00004_00005=9)))
c Both direct and order encoding.
c Var 'aux1141' order represents '0' with '4747'
c Var 'aux1141' direct represents '0' with '4747'
c Var 'aux1141' order represents '1' with '4748'
-4747 4748 0
c Var 'aux1141' direct represents '1' with '4749'
4747 -4748 4749 0
-4749 4748 0
-4749 -4747 0
c Var 'aux1141' direct represents '2' with '-4748'
4747 4749 -4748 0
c Encoding variable: aux1142 with domain: int(0..3) (representing constraint ((x_00004_00003=9) + aux1141))
c Both direct and order encoding.
c Var 'aux1142' order represents '0' with '4750'
c Var 'aux1142' direct represents '0' with '4750'
c Var 'aux1142' order represents '1' with '4751'
-4750 4751 0
c Var 'aux1142' direct represents '1' with '4752'
4750 -4751 4752 0
-4752 4751 0
-4752 -4750 0
c Var 'aux1142' order represents '2' with '4753'
-4751 4753 0
c Var 'aux1142' direct represents '2' with '4754'
4751 -4753 4754 0
-4754 4753 0
-4754 -4751 0
c Var 'aux1142' direct represents '3' with '-4753'
4750 4752 4754 -4753 0
c Encoding variable: aux1143 with domain: int(0..4) (representing constraint (aux1138 + aux1140))
c Both direct and order encoding.
c Var 'aux1143' order represents '0' with '4755'
c Var 'aux1143' direct represents '0' with '4755'
c Var 'aux1143' order represents '1' with '4756'
-4755 4756 0
c Var 'aux1143' direct represents '1' with '4757'
4755 -4756 4757 0
-4757 4756 0
-4757 -4755 0
c Var 'aux1143' order represents '2' with '4758'
-4756 4758 0
c Var 'aux1143' direct represents '2' with '4759'
4756 -4758 4759 0
-4759 4758 0
-4759 -4756 0
c Var 'aux1143' order represents '3' with '4760'
-4758 4760 0
c Var 'aux1143' direct represents '3' with '4761'
4758 -4760 4761 0
-4761 4760 0
-4761 -4758 0
c Var 'aux1143' direct represents '4' with '-4760'
4755 4757 4759 4761 -4760 0
c Encoding variable: aux1144 with domain: int(0..2) (representing constraint ((x_00005_00001=1) + (x_00005_00009=1)))
c Both direct and order encoding.
c Var 'aux1144' order represents '0' with '4762'
c Var 'aux1144' direct represents '0' with '4762'
c Var 'aux1144' order represents '1' with '4763'
-4762 4763 0
c Var 'aux1144' direct represents '1' with '4764'
4762 -4763 4764 0
-4764 4763 0
-4764 -4762 0
c Var 'aux1144' direct represents '2' with '-4763'
4762 4764 -4763 0
c Encoding variable: aux1145 with domain: int(0..2) (representing constraint ((x_00005_00008=1) + (x_00005_00002=1)))
c Both direct and order encoding.
c Var 'aux1145' order represents '0' with '4765'
c Var 'aux1145' direct represents '0' with '4765'
c Var 'aux1145' order represents '1' with '4766'
-4765 4766 0
c Var 'aux1145' direct represents '1' with '4767'
4765 -4766 4767 0
-4767 4766 0
-4767 -4765 0
c Var 'aux1145' direct represents '2' with '-4766'
4765 4767 -4766 0
c Encoding variable: aux1146 with domain: int(0..2) (representing constraint ((x_00005_00007=1) + (x_00005_00004=1)))
c Both direct and order encoding.
c Var 'aux1146' order represents '0' with '4768'
c Var 'aux1146' direct represents '0' with '4768'
c Var 'aux1146' order represents '1' with '4769'
-4768 4769 0
c Var 'aux1146' direct represents '1' with '4770'
4768 -4769 4770 0
-4770 4769 0
-4770 -4768 0
c Var 'aux1146' direct represents '2' with '-4769'
4768 4770 -4769 0
c Encoding variable: aux1147 with domain: int(0..2) (representing constraint ((x_00005_00006=1) + (x_00005_00005=1)))
c Both direct and order encoding.
c Var 'aux1147' order represents '0' with '4771'
c Var 'aux1147' direct represents '0' with '4771'
c Var 'aux1147' order represents '1' with '4772'
-4771 4772 0
c Var 'aux1147' direct represents '1' with '4773'
4771 -4772 4773 0
-4773 4772 0
-4773 -4771 0
c Var 'aux1147' direct represents '2' with '-4772'
4771 4773 -4772 0
c Encoding variable: aux1148 with domain: int(0..3) (representing constraint ((x_00005_00003=1) + aux1147))
c Both direct and order encoding.
c Var 'aux1148' order represents '0' with '4774'
c Var 'aux1148' direct represents '0' with '4774'
c Var 'aux1148' order represents '1' with '4775'
-4774 4775 0
c Var 'aux1148' direct represents '1' with '4776'
4774 -4775 4776 0
-4776 4775 0
-4776 -4774 0
c Var 'aux1148' order represents '2' with '4777'
-4775 4777 0
c Var 'aux1148' direct represents '2' with '4778'
4775 -4777 4778 0
-4778 4777 0
-4778 -4775 0
c Var 'aux1148' direct represents '3' with '-4777'
4774 4776 4778 -4777 0
c Encoding variable: aux1149 with domain: int(0..4) (representing constraint (aux1144 + aux1146))
c Both direct and order encoding.
c Var 'aux1149' order represents '0' with '4779'
c Var 'aux1149' direct represents '0' with '4779'
c Var 'aux1149' order represents '1' with '4780'
-4779 4780 0
c Var 'aux1149' direct represents '1' with '4781'
4779 -4780 4781 0
-4781 4780 0
-4781 -4779 0
c Var 'aux1149' order represents '2' with '4782'
-4780 4782 0
c Var 'aux1149' direct represents '2' with '4783'
4780 -4782 4783 0
-4783 4782 0
-4783 -4780 0
c Var 'aux1149' order represents '3' with '4784'
-4782 4784 0
c Var 'aux1149' direct represents '3' with '4785'
4782 -4784 4785 0
-4785 4784 0
-4785 -4782 0
c Var 'aux1149' direct represents '4' with '-4784'
4779 4781 4783 4785 -4784 0
c Encoding variable: aux1150 with domain: int(0..2) (representing constraint ((x_00005_00001=2) + (x_00005_00009=2)))
c Both direct and order encoding.
c Var 'aux1150' order represents '0' with '4786'
c Var 'aux1150' direct represents '0' with '4786'
c Var 'aux1150' order represents '1' with '4787'
-4786 4787 0
c Var 'aux1150' direct represents '1' with '4788'
4786 -4787 4788 0
-4788 4787 0
-4788 -4786 0
c Var 'aux1150' direct represents '2' with '-4787'
4786 4788 -4787 0
c Encoding variable: aux1151 with domain: int(0..2) (representing constraint ((x_00005_00008=2) + (x_00005_00002=2)))
c Both direct and order encoding.
c Var 'aux1151' order represents '0' with '4789'
c Var 'aux1151' direct represents '0' with '4789'
c Var 'aux1151' order represents '1' with '4790'
-4789 4790 0
c Var 'aux1151' direct represents '1' with '4791'
4789 -4790 4791 0
-4791 4790 0
-4791 -4789 0
c Var 'aux1151' direct represents '2' with '-4790'
4789 4791 -4790 0
c Encoding variable: aux1152 with domain: int(0..2) (representing constraint ((x_00005_00007=2) + (x_00005_00004=2)))
c Both direct and order encoding.
c Var 'aux1152' order represents '0' with '4792'
c Var 'aux1152' direct represents '0' with '4792'
c Var 'aux1152' order represents '1' with '4793'
-4792 4793 0
c Var 'aux1152' direct represents '1' with '4794'
4792 -4793 4794 0
-4794 4793 0
-4794 -4792 0
c Var 'aux1152' direct represents '2' with '-4793'
4792 4794 -4793 0
c Encoding variable: aux1153 with domain: int(0..2) (representing constraint ((x_00005_00006=2) + (x_00005_00005=2)))
c Both direct and order encoding.
c Var 'aux1153' order represents '0' with '4795'
c Var 'aux1153' direct represents '0' with '4795'
c Var 'aux1153' order represents '1' with '4796'
-4795 4796 0
c Var 'aux1153' direct represents '1' with '4797'
4795 -4796 4797 0
-4797 4796 0
-4797 -4795 0
c Var 'aux1153' direct represents '2' with '-4796'
4795 4797 -4796 0
c Encoding variable: aux1154 with domain: int(0..3) (representing constraint ((x_00005_00003=2) + aux1153))
c Both direct and order encoding.
c Var 'aux1154' order represents '0' with '4798'
c Var 'aux1154' direct represents '0' with '4798'
c Var 'aux1154' order represents '1' with '4799'
-4798 4799 0
c Var 'aux1154' direct represents '1' with '4800'
4798 -4799 4800 0
-4800 4799 0
-4800 -4798 0
c Var 'aux1154' order represents '2' with '4801'
-4799 4801 0
c Var 'aux1154' direct represents '2' with '4802'
4799 -4801 4802 0
-4802 4801 0
-4802 -4799 0
c Var 'aux1154' direct represents '3' with '-4801'
4798 4800 4802 -4801 0
c Encoding variable: aux1155 with domain: int(0..4) (representing constraint (aux1150 + aux1152))
c Both direct and order encoding.
c Var 'aux1155' order represents '0' with '4803'
c Var 'aux1155' direct represents '0' with '4803'
c Var 'aux1155' order represents '1' with '4804'
-4803 4804 0
c Var 'aux1155' direct represents '1' with '4805'
4803 -4804 4805 0
-4805 4804 0
-4805 -4803 0
c Var 'aux1155' order represents '2' with '4806'
-4804 4806 0
c Var 'aux1155' direct represents '2' with '4807'
4804 -4806 4807 0
-4807 4806 0
-4807 -4804 0
c Var 'aux1155' order represents '3' with '4808'
-4806 4808 0
c Var 'aux1155' direct represents '3' with '4809'
4806 -4808 4809 0
-4809 4808 0
-4809 -4806 0
c Var 'aux1155' direct represents '4' with '-4808'
4803 4805 4807 4809 -4808 0
c Encoding variable: aux1156 with domain: int(0..2) (representing constraint ((x_00005_00001=3) + (x_00005_00009=3)))
c Both direct and order encoding.
c Var 'aux1156' order represents '0' with '4810'
c Var 'aux1156' direct represents '0' with '4810'
c Var 'aux1156' order represents '1' with '4811'
-4810 4811 0
c Var 'aux1156' direct represents '1' with '4812'
4810 -4811 4812 0
-4812 4811 0
-4812 -4810 0
c Var 'aux1156' direct represents '2' with '-4811'
4810 4812 -4811 0
c Encoding variable: aux1157 with domain: int(0..2) (representing constraint ((x_00005_00008=3) + (x_00005_00002=3)))
c Both direct and order encoding.
c Var 'aux1157' order represents '0' with '4813'
c Var 'aux1157' direct represents '0' with '4813'
c Var 'aux1157' order represents '1' with '4814'
-4813 4814 0
c Var 'aux1157' direct represents '1' with '4815'
4813 -4814 4815 0
-4815 4814 0
-4815 -4813 0
c Var 'aux1157' direct represents '2' with '-4814'
4813 4815 -4814 0
c Encoding variable: aux1158 with domain: int(0..2) (representing constraint ((x_00005_00007=3) + (x_00005_00004=3)))
c Both direct and order encoding.
c Var 'aux1158' order represents '0' with '4816'
c Var 'aux1158' direct represents '0' with '4816'
c Var 'aux1158' order represents '1' with '4817'
-4816 4817 0
c Var 'aux1158' direct represents '1' with '4818'
4816 -4817 4818 0
-4818 4817 0
-4818 -4816 0
c Var 'aux1158' direct represents '2' with '-4817'
4816 4818 -4817 0
c Encoding variable: aux1159 with domain: int(0..2) (representing constraint ((x_00005_00006=3) + (x_00005_00005=3)))
c Both direct and order encoding.
c Var 'aux1159' order represents '0' with '4819'
c Var 'aux1159' direct represents '0' with '4819'
c Var 'aux1159' order represents '1' with '4820'
-4819 4820 0
c Var 'aux1159' direct represents '1' with '4821'
4819 -4820 4821 0
-4821 4820 0
-4821 -4819 0
c Var 'aux1159' direct represents '2' with '-4820'
4819 4821 -4820 0
c Encoding variable: aux1160 with domain: int(0..3) (representing constraint ((x_00005_00003=3) + aux1159))
c Both direct and order encoding.
c Var 'aux1160' order represents '0' with '4822'
c Var 'aux1160' direct represents '0' with '4822'
c Var 'aux1160' order represents '1' with '4823'
-4822 4823 0
c Var 'aux1160' direct represents '1' with '4824'
4822 -4823 4824 0
-4824 4823 0
-4824 -4822 0
c Var 'aux1160' order represents '2' with '4825'
-4823 4825 0
c Var 'aux1160' direct represents '2' with '4826'
4823 -4825 4826 0
-4826 4825 0
-4826 -4823 0
c Var 'aux1160' direct represents '3' with '-4825'
4822 4824 4826 -4825 0
c Encoding variable: aux1161 with domain: int(0..4) (representing constraint (aux1156 + aux1158))
c Both direct and order encoding.
c Var 'aux1161' order represents '0' with '4827'
c Var 'aux1161' direct represents '0' with '4827'
c Var 'aux1161' order represents '1' with '4828'
-4827 4828 0
c Var 'aux1161' direct represents '1' with '4829'
4827 -4828 4829 0
-4829 4828 0
-4829 -4827 0
c Var 'aux1161' order represents '2' with '4830'
-4828 4830 0
c Var 'aux1161' direct represents '2' with '4831'
4828 -4830 4831 0
-4831 4830 0
-4831 -4828 0
c Var 'aux1161' order represents '3' with '4832'
-4830 4832 0
c Var 'aux1161' direct represents '3' with '4833'
4830 -4832 4833 0
-4833 4832 0
-4833 -4830 0
c Var 'aux1161' direct represents '4' with '-4832'
4827 4829 4831 4833 -4832 0
c Encoding variable: aux1162 with domain: int(0..2) (representing constraint ((x_00005_00001=4) + (x_00005_00009=4)))
c Both direct and order encoding.
c Var 'aux1162' order represents '0' with '4834'
c Var 'aux1162' direct represents '0' with '4834'
c Var 'aux1162' order represents '1' with '4835'
-4834 4835 0
c Var 'aux1162' direct represents '1' with '4836'
4834 -4835 4836 0
-4836 4835 0
-4836 -4834 0
c Var 'aux1162' direct represents '2' with '-4835'
4834 4836 -4835 0
c Encoding variable: aux1163 with domain: int(0..2) (representing constraint ((x_00005_00008=4) + (x_00005_00002=4)))
c Both direct and order encoding.
c Var 'aux1163' order represents '0' with '4837'
c Var 'aux1163' direct represents '0' with '4837'
c Var 'aux1163' order represents '1' with '4838'
-4837 4838 0
c Var 'aux1163' direct represents '1' with '4839'
4837 -4838 4839 0
-4839 4838 0
-4839 -4837 0
c Var 'aux1163' direct represents '2' with '-4838'
4837 4839 -4838 0
c Encoding variable: aux1164 with domain: int(0..2) (representing constraint ((x_00005_00007=4) + (x_00005_00004=4)))
c Both direct and order encoding.
c Var 'aux1164' order represents '0' with '4840'
c Var 'aux1164' direct represents '0' with '4840'
c Var 'aux1164' order represents '1' with '4841'
-4840 4841 0
c Var 'aux1164' direct represents '1' with '4842'
4840 -4841 4842 0
-4842 4841 0
-4842 -4840 0
c Var 'aux1164' direct represents '2' with '-4841'
4840 4842 -4841 0
c Encoding variable: aux1165 with domain: int(0..2) (representing constraint ((x_00005_00006=4) + (x_00005_00005=4)))
c Both direct and order encoding.
c Var 'aux1165' order represents '0' with '4843'
c Var 'aux1165' direct represents '0' with '4843'
c Var 'aux1165' order represents '1' with '4844'
-4843 4844 0
c Var 'aux1165' direct represents '1' with '4845'
4843 -4844 4845 0
-4845 4844 0
-4845 -4843 0
c Var 'aux1165' direct represents '2' with '-4844'
4843 4845 -4844 0
c Encoding variable: aux1166 with domain: int(0..3) (representing constraint ((x_00005_00003=4) + aux1165))
c Both direct and order encoding.
c Var 'aux1166' order represents '0' with '4846'
c Var 'aux1166' direct represents '0' with '4846'
c Var 'aux1166' order represents '1' with '4847'
-4846 4847 0
c Var 'aux1166' direct represents '1' with '4848'
4846 -4847 4848 0
-4848 4847 0
-4848 -4846 0
c Var 'aux1166' order represents '2' with '4849'
-4847 4849 0
c Var 'aux1166' direct represents '2' with '4850'
4847 -4849 4850 0
-4850 4849 0
-4850 -4847 0
c Var 'aux1166' direct represents '3' with '-4849'
4846 4848 4850 -4849 0
c Encoding variable: aux1167 with domain: int(0..4) (representing constraint (aux1162 + aux1164))
c Both direct and order encoding.
c Var 'aux1167' order represents '0' with '4851'
c Var 'aux1167' direct represents '0' with '4851'
c Var 'aux1167' order represents '1' with '4852'
-4851 4852 0
c Var 'aux1167' direct represents '1' with '4853'
4851 -4852 4853 0
-4853 4852 0
-4853 -4851 0
c Var 'aux1167' order represents '2' with '4854'
-4852 4854 0
c Var 'aux1167' direct represents '2' with '4855'
4852 -4854 4855 0
-4855 4854 0
-4855 -4852 0
c Var 'aux1167' order represents '3' with '4856'
-4854 4856 0
c Var 'aux1167' direct represents '3' with '4857'
4854 -4856 4857 0
-4857 4856 0
-4857 -4854 0
c Var 'aux1167' direct represents '4' with '-4856'
4851 4853 4855 4857 -4856 0
c Encoding variable: aux1168 with domain: int(0..2) (representing constraint ((x_00005_00001=5) + (x_00005_00009=5)))
c Both direct and order encoding.
c Var 'aux1168' order represents '0' with '4858'
c Var 'aux1168' direct represents '0' with '4858'
c Var 'aux1168' order represents '1' with '4859'
-4858 4859 0
c Var 'aux1168' direct represents '1' with '4860'
4858 -4859 4860 0
-4860 4859 0
-4860 -4858 0
c Var 'aux1168' direct represents '2' with '-4859'
4858 4860 -4859 0
c Encoding variable: aux1169 with domain: int(0..2) (representing constraint ((x_00005_00008=5) + (x_00005_00002=5)))
c Both direct and order encoding.
c Var 'aux1169' order represents '0' with '4861'
c Var 'aux1169' direct represents '0' with '4861'
c Var 'aux1169' order represents '1' with '4862'
-4861 4862 0
c Var 'aux1169' direct represents '1' with '4863'
4861 -4862 4863 0
-4863 4862 0
-4863 -4861 0
c Var 'aux1169' direct represents '2' with '-4862'
4861 4863 -4862 0
c Encoding variable: aux1170 with domain: int(0..2) (representing constraint ((x_00005_00007=5) + (x_00005_00004=5)))
c Both direct and order encoding.
c Var 'aux1170' order represents '0' with '4864'
c Var 'aux1170' direct represents '0' with '4864'
c Var 'aux1170' order represents '1' with '4865'
-4864 4865 0
c Var 'aux1170' direct represents '1' with '4866'
4864 -4865 4866 0
-4866 4865 0
-4866 -4864 0
c Var 'aux1170' direct represents '2' with '-4865'
4864 4866 -4865 0
c Encoding variable: aux1171 with domain: int(0..2) (representing constraint ((x_00005_00006=5) + (x_00005_00005=5)))
c Both direct and order encoding.
c Var 'aux1171' order represents '0' with '4867'
c Var 'aux1171' direct represents '0' with '4867'
c Var 'aux1171' order represents '1' with '4868'
-4867 4868 0
c Var 'aux1171' direct represents '1' with '4869'
4867 -4868 4869 0
-4869 4868 0
-4869 -4867 0
c Var 'aux1171' direct represents '2' with '-4868'
4867 4869 -4868 0
c Encoding variable: aux1172 with domain: int(0..3) (representing constraint ((x_00005_00003=5) + aux1171))
c Both direct and order encoding.
c Var 'aux1172' order represents '0' with '4870'
c Var 'aux1172' direct represents '0' with '4870'
c Var 'aux1172' order represents '1' with '4871'
-4870 4871 0
c Var 'aux1172' direct represents '1' with '4872'
4870 -4871 4872 0
-4872 4871 0
-4872 -4870 0
c Var 'aux1172' order represents '2' with '4873'
-4871 4873 0
c Var 'aux1172' direct represents '2' with '4874'
4871 -4873 4874 0
-4874 4873 0
-4874 -4871 0
c Var 'aux1172' direct represents '3' with '-4873'
4870 4872 4874 -4873 0
c Encoding variable: aux1173 with domain: int(0..4) (representing constraint (aux1168 + aux1170))
c Both direct and order encoding.
c Var 'aux1173' order represents '0' with '4875'
c Var 'aux1173' direct represents '0' with '4875'
c Var 'aux1173' order represents '1' with '4876'
-4875 4876 0
c Var 'aux1173' direct represents '1' with '4877'
4875 -4876 4877 0
-4877 4876 0
-4877 -4875 0
c Var 'aux1173' order represents '2' with '4878'
-4876 4878 0
c Var 'aux1173' direct represents '2' with '4879'
4876 -4878 4879 0
-4879 4878 0
-4879 -4876 0
c Var 'aux1173' order represents '3' with '4880'
-4878 4880 0
c Var 'aux1173' direct represents '3' with '4881'
4878 -4880 4881 0
-4881 4880 0
-4881 -4878 0
c Var 'aux1173' direct represents '4' with '-4880'
4875 4877 4879 4881 -4880 0
c Encoding variable: aux1174 with domain: int(0..2) (representing constraint ((x_00005_00001=6) + (x_00005_00009=6)))
c Both direct and order encoding.
c Var 'aux1174' order represents '0' with '4882'
c Var 'aux1174' direct represents '0' with '4882'
c Var 'aux1174' order represents '1' with '4883'
-4882 4883 0
c Var 'aux1174' direct represents '1' with '4884'
4882 -4883 4884 0
-4884 4883 0
-4884 -4882 0
c Var 'aux1174' direct represents '2' with '-4883'
4882 4884 -4883 0
c Encoding variable: aux1175 with domain: int(0..2) (representing constraint ((x_00005_00008=6) + (x_00005_00002=6)))
c Both direct and order encoding.
c Var 'aux1175' order represents '0' with '4885'
c Var 'aux1175' direct represents '0' with '4885'
c Var 'aux1175' order represents '1' with '4886'
-4885 4886 0
c Var 'aux1175' direct represents '1' with '4887'
4885 -4886 4887 0
-4887 4886 0
-4887 -4885 0
c Var 'aux1175' direct represents '2' with '-4886'
4885 4887 -4886 0
c Encoding variable: aux1176 with domain: int(0..2) (representing constraint ((x_00005_00007=6) + (x_00005_00004=6)))
c Both direct and order encoding.
c Var 'aux1176' order represents '0' with '4888'
c Var 'aux1176' direct represents '0' with '4888'
c Var 'aux1176' order represents '1' with '4889'
-4888 4889 0
c Var 'aux1176' direct represents '1' with '4890'
4888 -4889 4890 0
-4890 4889 0
-4890 -4888 0
c Var 'aux1176' direct represents '2' with '-4889'
4888 4890 -4889 0
c Encoding variable: aux1177 with domain: int(0..2) (representing constraint ((x_00005_00006=6) + (x_00005_00005=6)))
c Both direct and order encoding.
c Var 'aux1177' order represents '0' with '4891'
c Var 'aux1177' direct represents '0' with '4891'
c Var 'aux1177' order represents '1' with '4892'
-4891 4892 0
c Var 'aux1177' direct represents '1' with '4893'
4891 -4892 4893 0
-4893 4892 0
-4893 -4891 0
c Var 'aux1177' direct represents '2' with '-4892'
4891 4893 -4892 0
c Encoding variable: aux1178 with domain: int(0..3) (representing constraint ((x_00005_00003=6) + aux1177))
c Both direct and order encoding.
c Var 'aux1178' order represents '0' with '4894'
c Var 'aux1178' direct represents '0' with '4894'
c Var 'aux1178' order represents '1' with '4895'
-4894 4895 0
c Var 'aux1178' direct represents '1' with '4896'
4894 -4895 4896 0
-4896 4895 0
-4896 -4894 0
c Var 'aux1178' order represents '2' with '4897'
-4895 4897 0
c Var 'aux1178' direct represents '2' with '4898'
4895 -4897 4898 0
-4898 4897 0
-4898 -4895 0
c Var 'aux1178' direct represents '3' with '-4897'
4894 4896 4898 -4897 0
c Encoding variable: aux1179 with domain: int(0..4) (representing constraint (aux1174 + aux1176))
c Both direct and order encoding.
c Var 'aux1179' order represents '0' with '4899'
c Var 'aux1179' direct represents '0' with '4899'
c Var 'aux1179' order represents '1' with '4900'
-4899 4900 0
c Var 'aux1179' direct represents '1' with '4901'
4899 -4900 4901 0
-4901 4900 0
-4901 -4899 0
c Var 'aux1179' order represents '2' with '4902'
-4900 4902 0
c Var 'aux1179' direct represents '2' with '4903'
4900 -4902 4903 0
-4903 4902 0
-4903 -4900 0
c Var 'aux1179' order represents '3' with '4904'
-4902 4904 0
c Var 'aux1179' direct represents '3' with '4905'
4902 -4904 4905 0
-4905 4904 0
-4905 -4902 0
c Var 'aux1179' direct represents '4' with '-4904'
4899 4901 4903 4905 -4904 0
c Encoding variable: aux1180 with domain: int(0..2) (representing constraint ((x_00005_00001=7) + (x_00005_00009=7)))
c Both direct and order encoding.
c Var 'aux1180' order represents '0' with '4906'
c Var 'aux1180' direct represents '0' with '4906'
c Var 'aux1180' order represents '1' with '4907'
-4906 4907 0
c Var 'aux1180' direct represents '1' with '4908'
4906 -4907 4908 0
-4908 4907 0
-4908 -4906 0
c Var 'aux1180' direct represents '2' with '-4907'
4906 4908 -4907 0
c Encoding variable: aux1181 with domain: int(0..2) (representing constraint ((x_00005_00008=7) + (x_00005_00002=7)))
c Both direct and order encoding.
c Var 'aux1181' order represents '0' with '4909'
c Var 'aux1181' direct represents '0' with '4909'
c Var 'aux1181' order represents '1' with '4910'
-4909 4910 0
c Var 'aux1181' direct represents '1' with '4911'
4909 -4910 4911 0
-4911 4910 0
-4911 -4909 0
c Var 'aux1181' direct represents '2' with '-4910'
4909 4911 -4910 0
c Encoding variable: aux1182 with domain: int(0..2) (representing constraint ((x_00005_00007=7) + (x_00005_00004=7)))
c Both direct and order encoding.
c Var 'aux1182' order represents '0' with '4912'
c Var 'aux1182' direct represents '0' with '4912'
c Var 'aux1182' order represents '1' with '4913'
-4912 4913 0
c Var 'aux1182' direct represents '1' with '4914'
4912 -4913 4914 0
-4914 4913 0
-4914 -4912 0
c Var 'aux1182' direct represents '2' with '-4913'
4912 4914 -4913 0
c Encoding variable: aux1183 with domain: int(0..2) (representing constraint ((x_00005_00006=7) + (x_00005_00005=7)))
c Both direct and order encoding.
c Var 'aux1183' order represents '0' with '4915'
c Var 'aux1183' direct represents '0' with '4915'
c Var 'aux1183' order represents '1' with '4916'
-4915 4916 0
c Var 'aux1183' direct represents '1' with '4917'
4915 -4916 4917 0
-4917 4916 0
-4917 -4915 0
c Var 'aux1183' direct represents '2' with '-4916'
4915 4917 -4916 0
c Encoding variable: aux1184 with domain: int(0..3) (representing constraint ((x_00005_00003=7) + aux1183))
c Both direct and order encoding.
c Var 'aux1184' order represents '0' with '4918'
c Var 'aux1184' direct represents '0' with '4918'
c Var 'aux1184' order represents '1' with '4919'
-4918 4919 0
c Var 'aux1184' direct represents '1' with '4920'
4918 -4919 4920 0
-4920 4919 0
-4920 -4918 0
c Var 'aux1184' order represents '2' with '4921'
-4919 4921 0
c Var 'aux1184' direct represents '2' with '4922'
4919 -4921 4922 0
-4922 4921 0
-4922 -4919 0
c Var 'aux1184' direct represents '3' with '-4921'
4918 4920 4922 -4921 0
c Encoding variable: aux1185 with domain: int(0..4) (representing constraint (aux1180 + aux1182))
c Both direct and order encoding.
c Var 'aux1185' order represents '0' with '4923'
c Var 'aux1185' direct represents '0' with '4923'
c Var 'aux1185' order represents '1' with '4924'
-4923 4924 0
c Var 'aux1185' direct represents '1' with '4925'
4923 -4924 4925 0
-4925 4924 0
-4925 -4923 0
c Var 'aux1185' order represents '2' with '4926'
-4924 4926 0
c Var 'aux1185' direct represents '2' with '4927'
4924 -4926 4927 0
-4927 4926 0
-4927 -4924 0
c Var 'aux1185' order represents '3' with '4928'
-4926 4928 0
c Var 'aux1185' direct represents '3' with '4929'
4926 -4928 4929 0
-4929 4928 0
-4929 -4926 0
c Var 'aux1185' direct represents '4' with '-4928'
4923 4925 4927 4929 -4928 0
c Encoding variable: aux1186 with domain: int(0..2) (representing constraint ((x_00005_00001=8) + (x_00005_00009=8)))
c Both direct and order encoding.
c Var 'aux1186' order represents '0' with '4930'
c Var 'aux1186' direct represents '0' with '4930'
c Var 'aux1186' order represents '1' with '4931'
-4930 4931 0
c Var 'aux1186' direct represents '1' with '4932'
4930 -4931 4932 0
-4932 4931 0
-4932 -4930 0
c Var 'aux1186' direct represents '2' with '-4931'
4930 4932 -4931 0
c Encoding variable: aux1187 with domain: int(0..2) (representing constraint ((x_00005_00008=8) + (x_00005_00002=8)))
c Both direct and order encoding.
c Var 'aux1187' order represents '0' with '4933'
c Var 'aux1187' direct represents '0' with '4933'
c Var 'aux1187' order represents '1' with '4934'
-4933 4934 0
c Var 'aux1187' direct represents '1' with '4935'
4933 -4934 4935 0
-4935 4934 0
-4935 -4933 0
c Var 'aux1187' direct represents '2' with '-4934'
4933 4935 -4934 0
c Encoding variable: aux1188 with domain: int(0..2) (representing constraint ((x_00005_00007=8) + (x_00005_00004=8)))
c Both direct and order encoding.
c Var 'aux1188' order represents '0' with '4936'
c Var 'aux1188' direct represents '0' with '4936'
c Var 'aux1188' order represents '1' with '4937'
-4936 4937 0
c Var 'aux1188' direct represents '1' with '4938'
4936 -4937 4938 0
-4938 4937 0
-4938 -4936 0
c Var 'aux1188' direct represents '2' with '-4937'
4936 4938 -4937 0
c Encoding variable: aux1189 with domain: int(0..2) (representing constraint ((x_00005_00006=8) + (x_00005_00005=8)))
c Both direct and order encoding.
c Var 'aux1189' order represents '0' with '4939'
c Var 'aux1189' direct represents '0' with '4939'
c Var 'aux1189' order represents '1' with '4940'
-4939 4940 0
c Var 'aux1189' direct represents '1' with '4941'
4939 -4940 4941 0
-4941 4940 0
-4941 -4939 0
c Var 'aux1189' direct represents '2' with '-4940'
4939 4941 -4940 0
c Encoding variable: aux1190 with domain: int(0..3) (representing constraint ((x_00005_00003=8) + aux1189))
c Both direct and order encoding.
c Var 'aux1190' order represents '0' with '4942'
c Var 'aux1190' direct represents '0' with '4942'
c Var 'aux1190' order represents '1' with '4943'
-4942 4943 0
c Var 'aux1190' direct represents '1' with '4944'
4942 -4943 4944 0
-4944 4943 0
-4944 -4942 0
c Var 'aux1190' order represents '2' with '4945'
-4943 4945 0
c Var 'aux1190' direct represents '2' with '4946'
4943 -4945 4946 0
-4946 4945 0
-4946 -4943 0
c Var 'aux1190' direct represents '3' with '-4945'
4942 4944 4946 -4945 0
c Encoding variable: aux1191 with domain: int(0..4) (representing constraint (aux1186 + aux1188))
c Both direct and order encoding.
c Var 'aux1191' order represents '0' with '4947'
c Var 'aux1191' direct represents '0' with '4947'
c Var 'aux1191' order represents '1' with '4948'
-4947 4948 0
c Var 'aux1191' direct represents '1' with '4949'
4947 -4948 4949 0
-4949 4948 0
-4949 -4947 0
c Var 'aux1191' order represents '2' with '4950'
-4948 4950 0
c Var 'aux1191' direct represents '2' with '4951'
4948 -4950 4951 0
-4951 4950 0
-4951 -4948 0
c Var 'aux1191' order represents '3' with '4952'
-4950 4952 0
c Var 'aux1191' direct represents '3' with '4953'
4950 -4952 4953 0
-4953 4952 0
-4953 -4950 0
c Var 'aux1191' direct represents '4' with '-4952'
4947 4949 4951 4953 -4952 0
c Encoding variable: aux1192 with domain: int(0..2) (representing constraint ((x_00005_00001=9) + (x_00005_00009=9)))
c Both direct and order encoding.
c Var 'aux1192' order represents '0' with '4954'
c Var 'aux1192' direct represents '0' with '4954'
c Var 'aux1192' order represents '1' with '4955'
-4954 4955 0
c Var 'aux1192' direct represents '1' with '4956'
4954 -4955 4956 0
-4956 4955 0
-4956 -4954 0
c Var 'aux1192' direct represents '2' with '-4955'
4954 4956 -4955 0
c Encoding variable: aux1193 with domain: int(0..2) (representing constraint ((x_00005_00008=9) + (x_00005_00002=9)))
c Both direct and order encoding.
c Var 'aux1193' order represents '0' with '4957'
c Var 'aux1193' direct represents '0' with '4957'
c Var 'aux1193' order represents '1' with '4958'
-4957 4958 0
c Var 'aux1193' direct represents '1' with '4959'
4957 -4958 4959 0
-4959 4958 0
-4959 -4957 0
c Var 'aux1193' direct represents '2' with '-4958'
4957 4959 -4958 0
c Encoding variable: aux1194 with domain: int(0..2) (representing constraint ((x_00005_00007=9) + (x_00005_00004=9)))
c Both direct and order encoding.
c Var 'aux1194' order represents '0' with '4960'
c Var 'aux1194' direct represents '0' with '4960'
c Var 'aux1194' order represents '1' with '4961'
-4960 4961 0
c Var 'aux1194' direct represents '1' with '4962'
4960 -4961 4962 0
-4962 4961 0
-4962 -4960 0
c Var 'aux1194' direct represents '2' with '-4961'
4960 4962 -4961 0
c Encoding variable: aux1195 with domain: int(0..2) (representing constraint ((x_00005_00006=9) + (x_00005_00005=9)))
c Both direct and order encoding.
c Var 'aux1195' order represents '0' with '4963'
c Var 'aux1195' direct represents '0' with '4963'
c Var 'aux1195' order represents '1' with '4964'
-4963 4964 0
c Var 'aux1195' direct represents '1' with '4965'
4963 -4964 4965 0
-4965 4964 0
-4965 -4963 0
c Var 'aux1195' direct represents '2' with '-4964'
4963 4965 -4964 0
c Encoding variable: aux1196 with domain: int(0..3) (representing constraint ((x_00005_00003=9) + aux1195))
c Both direct and order encoding.
c Var 'aux1196' order represents '0' with '4966'
c Var 'aux1196' direct represents '0' with '4966'
c Var 'aux1196' order represents '1' with '4967'
-4966 4967 0
c Var 'aux1196' direct represents '1' with '4968'
4966 -4967 4968 0
-4968 4967 0
-4968 -4966 0
c Var 'aux1196' order represents '2' with '4969'
-4967 4969 0
c Var 'aux1196' direct represents '2' with '4970'
4967 -4969 4970 0
-4970 4969 0
-4970 -4967 0
c Var 'aux1196' direct represents '3' with '-4969'
4966 4968 4970 -4969 0
c Encoding variable: aux1197 with domain: int(0..4) (representing constraint (aux1192 + aux1194))
c Both direct and order encoding.
c Var 'aux1197' order represents '0' with '4971'
c Var 'aux1197' direct represents '0' with '4971'
c Var 'aux1197' order represents '1' with '4972'
-4971 4972 0
c Var 'aux1197' direct represents '1' with '4973'
4971 -4972 4973 0
-4973 4972 0
-4973 -4971 0
c Var 'aux1197' order represents '2' with '4974'
-4972 4974 0
c Var 'aux1197' direct represents '2' with '4975'
4972 -4974 4975 0
-4975 4974 0
-4975 -4972 0
c Var 'aux1197' order represents '3' with '4976'
-4974 4976 0
c Var 'aux1197' direct represents '3' with '4977'
4974 -4976 4977 0
-4977 4976 0
-4977 -4974 0
c Var 'aux1197' direct represents '4' with '-4976'
4971 4973 4975 4977 -4976 0
c Encoding variable: aux1198 with domain: int(0..2) (representing constraint ((x_00006_00001=1) + (x_00006_00009=1)))
c Both direct and order encoding.
c Var 'aux1198' order represents '0' with '4978'
c Var 'aux1198' direct represents '0' with '4978'
c Var 'aux1198' order represents '1' with '4979'
-4978 4979 0
c Var 'aux1198' direct represents '1' with '4980'
4978 -4979 4980 0
-4980 4979 0
-4980 -4978 0
c Var 'aux1198' direct represents '2' with '-4979'
4978 4980 -4979 0
c Encoding variable: aux1199 with domain: int(0..2) (representing constraint ((x_00006_00008=1) + (x_00006_00002=1)))
c Both direct and order encoding.
c Var 'aux1199' order represents '0' with '4981'
c Var 'aux1199' direct represents '0' with '4981'
c Var 'aux1199' order represents '1' with '4982'
-4981 4982 0
c Var 'aux1199' direct represents '1' with '4983'
4981 -4982 4983 0
-4983 4982 0
-4983 -4981 0
c Var 'aux1199' direct represents '2' with '-4982'
4981 4983 -4982 0
c Encoding variable: aux1200 with domain: int(0..2) (representing constraint ((x_00006_00007=1) + (x_00006_00004=1)))
c Both direct and order encoding.
c Var 'aux1200' order represents '0' with '4984'
c Var 'aux1200' direct represents '0' with '4984'
c Var 'aux1200' order represents '1' with '4985'
-4984 4985 0
c Var 'aux1200' direct represents '1' with '4986'
4984 -4985 4986 0
-4986 4985 0
-4986 -4984 0
c Var 'aux1200' direct represents '2' with '-4985'
4984 4986 -4985 0
c Encoding variable: aux1201 with domain: int(0..2) (representing constraint ((x_00006_00006=1) + (x_00006_00005=1)))
c Both direct and order encoding.
c Var 'aux1201' order represents '0' with '4987'
c Var 'aux1201' direct represents '0' with '4987'
c Var 'aux1201' order represents '1' with '4988'
-4987 4988 0
c Var 'aux1201' direct represents '1' with '4989'
4987 -4988 4989 0
-4989 4988 0
-4989 -4987 0
c Var 'aux1201' direct represents '2' with '-4988'
4987 4989 -4988 0
c Encoding variable: aux1202 with domain: int(0..3) (representing constraint ((x_00006_00003=1) + aux1201))
c Both direct and order encoding.
c Var 'aux1202' order represents '0' with '4990'
c Var 'aux1202' direct represents '0' with '4990'
c Var 'aux1202' order represents '1' with '4991'
-4990 4991 0
c Var 'aux1202' direct represents '1' with '4992'
4990 -4991 4992 0
-4992 4991 0
-4992 -4990 0
c Var 'aux1202' order represents '2' with '4993'
-4991 4993 0
c Var 'aux1202' direct represents '2' with '4994'
4991 -4993 4994 0
-4994 4993 0
-4994 -4991 0
c Var 'aux1202' direct represents '3' with '-4993'
4990 4992 4994 -4993 0
c Encoding variable: aux1203 with domain: int(0..4) (representing constraint (aux1198 + aux1200))
c Both direct and order encoding.
c Var 'aux1203' order represents '0' with '4995'
c Var 'aux1203' direct represents '0' with '4995'
c Var 'aux1203' order represents '1' with '4996'
-4995 4996 0
c Var 'aux1203' direct represents '1' with '4997'
4995 -4996 4997 0
-4997 4996 0
-4997 -4995 0
c Var 'aux1203' order represents '2' with '4998'
-4996 4998 0
c Var 'aux1203' direct represents '2' with '4999'
4996 -4998 4999 0
-4999 4998 0
-4999 -4996 0
c Var 'aux1203' order represents '3' with '5000'
-4998 5000 0
c Var 'aux1203' direct represents '3' with '5001'
4998 -5000 5001 0
-5001 5000 0
-5001 -4998 0
c Var 'aux1203' direct represents '4' with '-5000'
4995 4997 4999 5001 -5000 0
c Encoding variable: aux1204 with domain: int(0..2) (representing constraint ((x_00006_00001=2) + (x_00006_00009=2)))
c Both direct and order encoding.
c Var 'aux1204' order represents '0' with '5002'
c Var 'aux1204' direct represents '0' with '5002'
c Var 'aux1204' order represents '1' with '5003'
-5002 5003 0
c Var 'aux1204' direct represents '1' with '5004'
5002 -5003 5004 0
-5004 5003 0
-5004 -5002 0
c Var 'aux1204' direct represents '2' with '-5003'
5002 5004 -5003 0
c Encoding variable: aux1205 with domain: int(0..2) (representing constraint ((x_00006_00008=2) + (x_00006_00002=2)))
c Both direct and order encoding.
c Var 'aux1205' order represents '0' with '5005'
c Var 'aux1205' direct represents '0' with '5005'
c Var 'aux1205' order represents '1' with '5006'
-5005 5006 0
c Var 'aux1205' direct represents '1' with '5007'
5005 -5006 5007 0
-5007 5006 0
-5007 -5005 0
c Var 'aux1205' direct represents '2' with '-5006'
5005 5007 -5006 0
c Encoding variable: aux1206 with domain: int(0..2) (representing constraint ((x_00006_00007=2) + (x_00006_00004=2)))
c Both direct and order encoding.
c Var 'aux1206' order represents '0' with '5008'
c Var 'aux1206' direct represents '0' with '5008'
c Var 'aux1206' order represents '1' with '5009'
-5008 5009 0
c Var 'aux1206' direct represents '1' with '5010'
5008 -5009 5010 0
-5010 5009 0
-5010 -5008 0
c Var 'aux1206' direct represents '2' with '-5009'
5008 5010 -5009 0
c Encoding variable: aux1207 with domain: int(0..2) (representing constraint ((x_00006_00006=2) + (x_00006_00005=2)))
c Both direct and order encoding.
c Var 'aux1207' order represents '0' with '5011'
c Var 'aux1207' direct represents '0' with '5011'
c Var 'aux1207' order represents '1' with '5012'
-5011 5012 0
c Var 'aux1207' direct represents '1' with '5013'
5011 -5012 5013 0
-5013 5012 0
-5013 -5011 0
c Var 'aux1207' direct represents '2' with '-5012'
5011 5013 -5012 0
c Encoding variable: aux1208 with domain: int(0..3) (representing constraint ((x_00006_00003=2) + aux1207))
c Both direct and order encoding.
c Var 'aux1208' order represents '0' with '5014'
c Var 'aux1208' direct represents '0' with '5014'
c Var 'aux1208' order represents '1' with '5015'
-5014 5015 0
c Var 'aux1208' direct represents '1' with '5016'
5014 -5015 5016 0
-5016 5015 0
-5016 -5014 0
c Var 'aux1208' order represents '2' with '5017'
-5015 5017 0
c Var 'aux1208' direct represents '2' with '5018'
5015 -5017 5018 0
-5018 5017 0
-5018 -5015 0
c Var 'aux1208' direct represents '3' with '-5017'
5014 5016 5018 -5017 0
c Encoding variable: aux1209 with domain: int(0..4) (representing constraint (aux1204 + aux1206))
c Both direct and order encoding.
c Var 'aux1209' order represents '0' with '5019'
c Var 'aux1209' direct represents '0' with '5019'
c Var 'aux1209' order represents '1' with '5020'
-5019 5020 0
c Var 'aux1209' direct represents '1' with '5021'
5019 -5020 5021 0
-5021 5020 0
-5021 -5019 0
c Var 'aux1209' order represents '2' with '5022'
-5020 5022 0
c Var 'aux1209' direct represents '2' with '5023'
5020 -5022 5023 0
-5023 5022 0
-5023 -5020 0
c Var 'aux1209' order represents '3' with '5024'
-5022 5024 0
c Var 'aux1209' direct represents '3' with '5025'
5022 -5024 5025 0
-5025 5024 0
-5025 -5022 0
c Var 'aux1209' direct represents '4' with '-5024'
5019 5021 5023 5025 -5024 0
c Encoding variable: aux1210 with domain: int(0..2) (representing constraint ((x_00006_00001=3) + (x_00006_00009=3)))
c Both direct and order encoding.
c Var 'aux1210' order represents '0' with '5026'
c Var 'aux1210' direct represents '0' with '5026'
c Var 'aux1210' order represents '1' with '5027'
-5026 5027 0
c Var 'aux1210' direct represents '1' with '5028'
5026 -5027 5028 0
-5028 5027 0
-5028 -5026 0
c Var 'aux1210' direct represents '2' with '-5027'
5026 5028 -5027 0
c Encoding variable: aux1211 with domain: int(0..2) (representing constraint ((x_00006_00008=3) + (x_00006_00002=3)))
c Both direct and order encoding.
c Var 'aux1211' order represents '0' with '5029'
c Var 'aux1211' direct represents '0' with '5029'
c Var 'aux1211' order represents '1' with '5030'
-5029 5030 0
c Var 'aux1211' direct represents '1' with '5031'
5029 -5030 5031 0
-5031 5030 0
-5031 -5029 0
c Var 'aux1211' direct represents '2' with '-5030'
5029 5031 -5030 0
c Encoding variable: aux1212 with domain: int(0..2) (representing constraint ((x_00006_00007=3) + (x_00006_00004=3)))
c Both direct and order encoding.
c Var 'aux1212' order represents '0' with '5032'
c Var 'aux1212' direct represents '0' with '5032'
c Var 'aux1212' order represents '1' with '5033'
-5032 5033 0
c Var 'aux1212' direct represents '1' with '5034'
5032 -5033 5034 0
-5034 5033 0
-5034 -5032 0
c Var 'aux1212' direct represents '2' with '-5033'
5032 5034 -5033 0
c Encoding variable: aux1213 with domain: int(0..2) (representing constraint ((x_00006_00006=3) + (x_00006_00005=3)))
c Both direct and order encoding.
c Var 'aux1213' order represents '0' with '5035'
c Var 'aux1213' direct represents '0' with '5035'
c Var 'aux1213' order represents '1' with '5036'
-5035 5036 0
c Var 'aux1213' direct represents '1' with '5037'
5035 -5036 5037 0
-5037 5036 0
-5037 -5035 0
c Var 'aux1213' direct represents '2' with '-5036'
5035 5037 -5036 0
c Encoding variable: aux1214 with domain: int(0..3) (representing constraint ((x_00006_00003=3) + aux1213))
c Both direct and order encoding.
c Var 'aux1214' order represents '0' with '5038'
c Var 'aux1214' direct represents '0' with '5038'
c Var 'aux1214' order represents '1' with '5039'
-5038 5039 0
c Var 'aux1214' direct represents '1' with '5040'
5038 -5039 5040 0
-5040 5039 0
-5040 -5038 0
c Var 'aux1214' order represents '2' with '5041'
-5039 5041 0
c Var 'aux1214' direct represents '2' with '5042'
5039 -5041 5042 0
-5042 5041 0
-5042 -5039 0
c Var 'aux1214' direct represents '3' with '-5041'
5038 5040 5042 -5041 0
c Encoding variable: aux1215 with domain: int(0..4) (representing constraint (aux1210 + aux1212))
c Both direct and order encoding.
c Var 'aux1215' order represents '0' with '5043'
c Var 'aux1215' direct represents '0' with '5043'
c Var 'aux1215' order represents '1' with '5044'
-5043 5044 0
c Var 'aux1215' direct represents '1' with '5045'
5043 -5044 5045 0
-5045 5044 0
-5045 -5043 0
c Var 'aux1215' order represents '2' with '5046'
-5044 5046 0
c Var 'aux1215' direct represents '2' with '5047'
5044 -5046 5047 0
-5047 5046 0
-5047 -5044 0
c Var 'aux1215' order represents '3' with '5048'
-5046 5048 0
c Var 'aux1215' direct represents '3' with '5049'
5046 -5048 5049 0
-5049 5048 0
-5049 -5046 0
c Var 'aux1215' direct represents '4' with '-5048'
5043 5045 5047 5049 -5048 0
c Encoding variable: aux1216 with domain: int(0..2) (representing constraint ((x_00006_00001=4) + (x_00006_00009=4)))
c Both direct and order encoding.
c Var 'aux1216' order represents '0' with '5050'
c Var 'aux1216' direct represents '0' with '5050'
c Var 'aux1216' order represents '1' with '5051'
-5050 5051 0
c Var 'aux1216' direct represents '1' with '5052'
5050 -5051 5052 0
-5052 5051 0
-5052 -5050 0
c Var 'aux1216' direct represents '2' with '-5051'
5050 5052 -5051 0
c Encoding variable: aux1217 with domain: int(0..2) (representing constraint ((x_00006_00008=4) + (x_00006_00002=4)))
c Both direct and order encoding.
c Var 'aux1217' order represents '0' with '5053'
c Var 'aux1217' direct represents '0' with '5053'
c Var 'aux1217' order represents '1' with '5054'
-5053 5054 0
c Var 'aux1217' direct represents '1' with '5055'
5053 -5054 5055 0
-5055 5054 0
-5055 -5053 0
c Var 'aux1217' direct represents '2' with '-5054'
5053 5055 -5054 0
c Encoding variable: aux1218 with domain: int(0..2) (representing constraint ((x_00006_00007=4) + (x_00006_00004=4)))
c Both direct and order encoding.
c Var 'aux1218' order represents '0' with '5056'
c Var 'aux1218' direct represents '0' with '5056'
c Var 'aux1218' order represents '1' with '5057'
-5056 5057 0
c Var 'aux1218' direct represents '1' with '5058'
5056 -5057 5058 0
-5058 5057 0
-5058 -5056 0
c Var 'aux1218' direct represents '2' with '-5057'
5056 5058 -5057 0
c Encoding variable: aux1219 with domain: int(0..2) (representing constraint ((x_00006_00006=4) + (x_00006_00005=4)))
c Both direct and order encoding.
c Var 'aux1219' order represents '0' with '5059'
c Var 'aux1219' direct represents '0' with '5059'
c Var 'aux1219' order represents '1' with '5060'
-5059 5060 0
c Var 'aux1219' direct represents '1' with '5061'
5059 -5060 5061 0
-5061 5060 0
-5061 -5059 0
c Var 'aux1219' direct represents '2' with '-5060'
5059 5061 -5060 0
c Encoding variable: aux1220 with domain: int(0..3) (representing constraint ((x_00006_00003=4) + aux1219))
c Both direct and order encoding.
c Var 'aux1220' order represents '0' with '5062'
c Var 'aux1220' direct represents '0' with '5062'
c Var 'aux1220' order represents '1' with '5063'
-5062 5063 0
c Var 'aux1220' direct represents '1' with '5064'
5062 -5063 5064 0
-5064 5063 0
-5064 -5062 0
c Var 'aux1220' order represents '2' with '5065'
-5063 5065 0
c Var 'aux1220' direct represents '2' with '5066'
5063 -5065 5066 0
-5066 5065 0
-5066 -5063 0
c Var 'aux1220' direct represents '3' with '-5065'
5062 5064 5066 -5065 0
c Encoding variable: aux1221 with domain: int(0..4) (representing constraint (aux1216 + aux1218))
c Both direct and order encoding.
c Var 'aux1221' order represents '0' with '5067'
c Var 'aux1221' direct represents '0' with '5067'
c Var 'aux1221' order represents '1' with '5068'
-5067 5068 0
c Var 'aux1221' direct represents '1' with '5069'
5067 -5068 5069 0
-5069 5068 0
-5069 -5067 0
c Var 'aux1221' order represents '2' with '5070'
-5068 5070 0
c Var 'aux1221' direct represents '2' with '5071'
5068 -5070 5071 0
-5071 5070 0
-5071 -5068 0
c Var 'aux1221' order represents '3' with '5072'
-5070 5072 0
c Var 'aux1221' direct represents '3' with '5073'
5070 -5072 5073 0
-5073 5072 0
-5073 -5070 0
c Var 'aux1221' direct represents '4' with '-5072'
5067 5069 5071 5073 -5072 0
c Encoding variable: aux1222 with domain: int(0..2) (representing constraint ((x_00006_00001=5) + (x_00006_00009=5)))
c Both direct and order encoding.
c Var 'aux1222' order represents '0' with '5074'
c Var 'aux1222' direct represents '0' with '5074'
c Var 'aux1222' order represents '1' with '5075'
-5074 5075 0
c Var 'aux1222' direct represents '1' with '5076'
5074 -5075 5076 0
-5076 5075 0
-5076 -5074 0
c Var 'aux1222' direct represents '2' with '-5075'
5074 5076 -5075 0
c Encoding variable: aux1223 with domain: int(0..2) (representing constraint ((x_00006_00008=5) + (x_00006_00002=5)))
c Both direct and order encoding.
c Var 'aux1223' order represents '0' with '5077'
c Var 'aux1223' direct represents '0' with '5077'
c Var 'aux1223' order represents '1' with '5078'
-5077 5078 0
c Var 'aux1223' direct represents '1' with '5079'
5077 -5078 5079 0
-5079 5078 0
-5079 -5077 0
c Var 'aux1223' direct represents '2' with '-5078'
5077 5079 -5078 0
c Encoding variable: aux1224 with domain: int(0..2) (representing constraint ((x_00006_00007=5) + (x_00006_00004=5)))
c Both direct and order encoding.
c Var 'aux1224' order represents '0' with '5080'
c Var 'aux1224' direct represents '0' with '5080'
c Var 'aux1224' order represents '1' with '5081'
-5080 5081 0
c Var 'aux1224' direct represents '1' with '5082'
5080 -5081 5082 0
-5082 5081 0
-5082 -5080 0
c Var 'aux1224' direct represents '2' with '-5081'
5080 5082 -5081 0
c Encoding variable: aux1225 with domain: int(0..2) (representing constraint ((x_00006_00006=5) + (x_00006_00005=5)))
c Both direct and order encoding.
c Var 'aux1225' order represents '0' with '5083'
c Var 'aux1225' direct represents '0' with '5083'
c Var 'aux1225' order represents '1' with '5084'
-5083 5084 0
c Var 'aux1225' direct represents '1' with '5085'
5083 -5084 5085 0
-5085 5084 0
-5085 -5083 0
c Var 'aux1225' direct represents '2' with '-5084'
5083 5085 -5084 0
c Encoding variable: aux1226 with domain: int(0..3) (representing constraint ((x_00006_00003=5) + aux1225))
c Both direct and order encoding.
c Var 'aux1226' order represents '0' with '5086'
c Var 'aux1226' direct represents '0' with '5086'
c Var 'aux1226' order represents '1' with '5087'
-5086 5087 0
c Var 'aux1226' direct represents '1' with '5088'
5086 -5087 5088 0
-5088 5087 0
-5088 -5086 0
c Var 'aux1226' order represents '2' with '5089'
-5087 5089 0
c Var 'aux1226' direct represents '2' with '5090'
5087 -5089 5090 0
-5090 5089 0
-5090 -5087 0
c Var 'aux1226' direct represents '3' with '-5089'
5086 5088 5090 -5089 0
c Encoding variable: aux1227 with domain: int(0..4) (representing constraint (aux1222 + aux1224))
c Both direct and order encoding.
c Var 'aux1227' order represents '0' with '5091'
c Var 'aux1227' direct represents '0' with '5091'
c Var 'aux1227' order represents '1' with '5092'
-5091 5092 0
c Var 'aux1227' direct represents '1' with '5093'
5091 -5092 5093 0
-5093 5092 0
-5093 -5091 0
c Var 'aux1227' order represents '2' with '5094'
-5092 5094 0
c Var 'aux1227' direct represents '2' with '5095'
5092 -5094 5095 0
-5095 5094 0
-5095 -5092 0
c Var 'aux1227' order represents '3' with '5096'
-5094 5096 0
c Var 'aux1227' direct represents '3' with '5097'
5094 -5096 5097 0
-5097 5096 0
-5097 -5094 0
c Var 'aux1227' direct represents '4' with '-5096'
5091 5093 5095 5097 -5096 0
c Encoding variable: aux1228 with domain: int(0..2) (representing constraint ((x_00006_00001=6) + (x_00006_00009=6)))
c Both direct and order encoding.
c Var 'aux1228' order represents '0' with '5098'
c Var 'aux1228' direct represents '0' with '5098'
c Var 'aux1228' order represents '1' with '5099'
-5098 5099 0
c Var 'aux1228' direct represents '1' with '5100'
5098 -5099 5100 0
-5100 5099 0
-5100 -5098 0
c Var 'aux1228' direct represents '2' with '-5099'
5098 5100 -5099 0
c Encoding variable: aux1229 with domain: int(0..2) (representing constraint ((x_00006_00008=6) + (x_00006_00002=6)))
c Both direct and order encoding.
c Var 'aux1229' order represents '0' with '5101'
c Var 'aux1229' direct represents '0' with '5101'
c Var 'aux1229' order represents '1' with '5102'
-5101 5102 0
c Var 'aux1229' direct represents '1' with '5103'
5101 -5102 5103 0
-5103 5102 0
-5103 -5101 0
c Var 'aux1229' direct represents '2' with '-5102'
5101 5103 -5102 0
c Encoding variable: aux1230 with domain: int(0..2) (representing constraint ((x_00006_00007=6) + (x_00006_00004=6)))
c Both direct and order encoding.
c Var 'aux1230' order represents '0' with '5104'
c Var 'aux1230' direct represents '0' with '5104'
c Var 'aux1230' order represents '1' with '5105'
-5104 5105 0
c Var 'aux1230' direct represents '1' with '5106'
5104 -5105 5106 0
-5106 5105 0
-5106 -5104 0
c Var 'aux1230' direct represents '2' with '-5105'
5104 5106 -5105 0
c Encoding variable: aux1231 with domain: int(0..2) (representing constraint ((x_00006_00006=6) + (x_00006_00005=6)))
c Both direct and order encoding.
c Var 'aux1231' order represents '0' with '5107'
c Var 'aux1231' direct represents '0' with '5107'
c Var 'aux1231' order represents '1' with '5108'
-5107 5108 0
c Var 'aux1231' direct represents '1' with '5109'
5107 -5108 5109 0
-5109 5108 0
-5109 -5107 0
c Var 'aux1231' direct represents '2' with '-5108'
5107 5109 -5108 0
c Encoding variable: aux1232 with domain: int(0..3) (representing constraint ((x_00006_00003=6) + aux1231))
c Both direct and order encoding.
c Var 'aux1232' order represents '0' with '5110'
c Var 'aux1232' direct represents '0' with '5110'
c Var 'aux1232' order represents '1' with '5111'
-5110 5111 0
c Var 'aux1232' direct represents '1' with '5112'
5110 -5111 5112 0
-5112 5111 0
-5112 -5110 0
c Var 'aux1232' order represents '2' with '5113'
-5111 5113 0
c Var 'aux1232' direct represents '2' with '5114'
5111 -5113 5114 0
-5114 5113 0
-5114 -5111 0
c Var 'aux1232' direct represents '3' with '-5113'
5110 5112 5114 -5113 0
c Encoding variable: aux1233 with domain: int(0..4) (representing constraint (aux1228 + aux1230))
c Both direct and order encoding.
c Var 'aux1233' order represents '0' with '5115'
c Var 'aux1233' direct represents '0' with '5115'
c Var 'aux1233' order represents '1' with '5116'
-5115 5116 0
c Var 'aux1233' direct represents '1' with '5117'
5115 -5116 5117 0
-5117 5116 0
-5117 -5115 0
c Var 'aux1233' order represents '2' with '5118'
-5116 5118 0
c Var 'aux1233' direct represents '2' with '5119'
5116 -5118 5119 0
-5119 5118 0
-5119 -5116 0
c Var 'aux1233' order represents '3' with '5120'
-5118 5120 0
c Var 'aux1233' direct represents '3' with '5121'
5118 -5120 5121 0
-5121 5120 0
-5121 -5118 0
c Var 'aux1233' direct represents '4' with '-5120'
5115 5117 5119 5121 -5120 0
c Encoding variable: aux1234 with domain: int(0..2) (representing constraint ((x_00006_00001=7) + (x_00006_00009=7)))
c Both direct and order encoding.
c Var 'aux1234' order represents '0' with '5122'
c Var 'aux1234' direct represents '0' with '5122'
c Var 'aux1234' order represents '1' with '5123'
-5122 5123 0
c Var 'aux1234' direct represents '1' with '5124'
5122 -5123 5124 0
-5124 5123 0
-5124 -5122 0
c Var 'aux1234' direct represents '2' with '-5123'
5122 5124 -5123 0
c Encoding variable: aux1235 with domain: int(0..2) (representing constraint ((x_00006_00008=7) + (x_00006_00002=7)))
c Both direct and order encoding.
c Var 'aux1235' order represents '0' with '5125'
c Var 'aux1235' direct represents '0' with '5125'
c Var 'aux1235' order represents '1' with '5126'
-5125 5126 0
c Var 'aux1235' direct represents '1' with '5127'
5125 -5126 5127 0
-5127 5126 0
-5127 -5125 0
c Var 'aux1235' direct represents '2' with '-5126'
5125 5127 -5126 0
c Encoding variable: aux1236 with domain: int(0..2) (representing constraint ((x_00006_00007=7) + (x_00006_00004=7)))
c Both direct and order encoding.
c Var 'aux1236' order represents '0' with '5128'
c Var 'aux1236' direct represents '0' with '5128'
c Var 'aux1236' order represents '1' with '5129'
-5128 5129 0
c Var 'aux1236' direct represents '1' with '5130'
5128 -5129 5130 0
-5130 5129 0
-5130 -5128 0
c Var 'aux1236' direct represents '2' with '-5129'
5128 5130 -5129 0
c Encoding variable: aux1237 with domain: int(0..2) (representing constraint ((x_00006_00006=7) + (x_00006_00005=7)))
c Both direct and order encoding.
c Var 'aux1237' order represents '0' with '5131'
c Var 'aux1237' direct represents '0' with '5131'
c Var 'aux1237' order represents '1' with '5132'
-5131 5132 0
c Var 'aux1237' direct represents '1' with '5133'
5131 -5132 5133 0
-5133 5132 0
-5133 -5131 0
c Var 'aux1237' direct represents '2' with '-5132'
5131 5133 -5132 0
c Encoding variable: aux1238 with domain: int(0..3) (representing constraint ((x_00006_00003=7) + aux1237))
c Both direct and order encoding.
c Var 'aux1238' order represents '0' with '5134'
c Var 'aux1238' direct represents '0' with '5134'
c Var 'aux1238' order represents '1' with '5135'
-5134 5135 0
c Var 'aux1238' direct represents '1' with '5136'
5134 -5135 5136 0
-5136 5135 0
-5136 -5134 0
c Var 'aux1238' order represents '2' with '5137'
-5135 5137 0
c Var 'aux1238' direct represents '2' with '5138'
5135 -5137 5138 0
-5138 5137 0
-5138 -5135 0
c Var 'aux1238' direct represents '3' with '-5137'
5134 5136 5138 -5137 0
c Encoding variable: aux1239 with domain: int(0..4) (representing constraint (aux1234 + aux1236))
c Both direct and order encoding.
c Var 'aux1239' order represents '0' with '5139'
c Var 'aux1239' direct represents '0' with '5139'
c Var 'aux1239' order represents '1' with '5140'
-5139 5140 0
c Var 'aux1239' direct represents '1' with '5141'
5139 -5140 5141 0
-5141 5140 0
-5141 -5139 0
c Var 'aux1239' order represents '2' with '5142'
-5140 5142 0
c Var 'aux1239' direct represents '2' with '5143'
5140 -5142 5143 0
-5143 5142 0
-5143 -5140 0
c Var 'aux1239' order represents '3' with '5144'
-5142 5144 0
c Var 'aux1239' direct represents '3' with '5145'
5142 -5144 5145 0
-5145 5144 0
-5145 -5142 0
c Var 'aux1239' direct represents '4' with '-5144'
5139 5141 5143 5145 -5144 0
c Encoding variable: aux1240 with domain: int(0..2) (representing constraint ((x_00006_00001=8) + (x_00006_00009=8)))
c Both direct and order encoding.
c Var 'aux1240' order represents '0' with '5146'
c Var 'aux1240' direct represents '0' with '5146'
c Var 'aux1240' order represents '1' with '5147'
-5146 5147 0
c Var 'aux1240' direct represents '1' with '5148'
5146 -5147 5148 0
-5148 5147 0
-5148 -5146 0
c Var 'aux1240' direct represents '2' with '-5147'
5146 5148 -5147 0
c Encoding variable: aux1241 with domain: int(0..2) (representing constraint ((x_00006_00008=8) + (x_00006_00002=8)))
c Both direct and order encoding.
c Var 'aux1241' order represents '0' with '5149'
c Var 'aux1241' direct represents '0' with '5149'
c Var 'aux1241' order represents '1' with '5150'
-5149 5150 0
c Var 'aux1241' direct represents '1' with '5151'
5149 -5150 5151 0
-5151 5150 0
-5151 -5149 0
c Var 'aux1241' direct represents '2' with '-5150'
5149 5151 -5150 0
c Encoding variable: aux1242 with domain: int(0..2) (representing constraint ((x_00006_00007=8) + (x_00006_00004=8)))
c Both direct and order encoding.
c Var 'aux1242' order represents '0' with '5152'
c Var 'aux1242' direct represents '0' with '5152'
c Var 'aux1242' order represents '1' with '5153'
-5152 5153 0
c Var 'aux1242' direct represents '1' with '5154'
5152 -5153 5154 0
-5154 5153 0
-5154 -5152 0
c Var 'aux1242' direct represents '2' with '-5153'
5152 5154 -5153 0
c Encoding variable: aux1243 with domain: int(0..2) (representing constraint ((x_00006_00006=8) + (x_00006_00005=8)))
c Both direct and order encoding.
c Var 'aux1243' order represents '0' with '5155'
c Var 'aux1243' direct represents '0' with '5155'
c Var 'aux1243' order represents '1' with '5156'
-5155 5156 0
c Var 'aux1243' direct represents '1' with '5157'
5155 -5156 5157 0
-5157 5156 0
-5157 -5155 0
c Var 'aux1243' direct represents '2' with '-5156'
5155 5157 -5156 0
c Encoding variable: aux1244 with domain: int(0..3) (representing constraint ((x_00006_00003=8) + aux1243))
c Both direct and order encoding.
c Var 'aux1244' order represents '0' with '5158'
c Var 'aux1244' direct represents '0' with '5158'
c Var 'aux1244' order represents '1' with '5159'
-5158 5159 0
c Var 'aux1244' direct represents '1' with '5160'
5158 -5159 5160 0
-5160 5159 0
-5160 -5158 0
c Var 'aux1244' order represents '2' with '5161'
-5159 5161 0
c Var 'aux1244' direct represents '2' with '5162'
5159 -5161 5162 0
-5162 5161 0
-5162 -5159 0
c Var 'aux1244' direct represents '3' with '-5161'
5158 5160 5162 -5161 0
c Encoding variable: aux1245 with domain: int(0..4) (representing constraint (aux1240 + aux1242))
c Both direct and order encoding.
c Var 'aux1245' order represents '0' with '5163'
c Var 'aux1245' direct represents '0' with '5163'
c Var 'aux1245' order represents '1' with '5164'
-5163 5164 0
c Var 'aux1245' direct represents '1' with '5165'
5163 -5164 5165 0
-5165 5164 0
-5165 -5163 0
c Var 'aux1245' order represents '2' with '5166'
-5164 5166 0
c Var 'aux1245' direct represents '2' with '5167'
5164 -5166 5167 0
-5167 5166 0
-5167 -5164 0
c Var 'aux1245' order represents '3' with '5168'
-5166 5168 0
c Var 'aux1245' direct represents '3' with '5169'
5166 -5168 5169 0
-5169 5168 0
-5169 -5166 0
c Var 'aux1245' direct represents '4' with '-5168'
5163 5165 5167 5169 -5168 0
c Encoding variable: aux1246 with domain: int(0..2) (representing constraint ((x_00006_00001=9) + (x_00006_00009=9)))
c Both direct and order encoding.
c Var 'aux1246' order represents '0' with '5170'
c Var 'aux1246' direct represents '0' with '5170'
c Var 'aux1246' order represents '1' with '5171'
-5170 5171 0
c Var 'aux1246' direct represents '1' with '5172'
5170 -5171 5172 0
-5172 5171 0
-5172 -5170 0
c Var 'aux1246' direct represents '2' with '-5171'
5170 5172 -5171 0
c Encoding variable: aux1247 with domain: int(0..2) (representing constraint ((x_00006_00008=9) + (x_00006_00002=9)))
c Both direct and order encoding.
c Var 'aux1247' order represents '0' with '5173'
c Var 'aux1247' direct represents '0' with '5173'
c Var 'aux1247' order represents '1' with '5174'
-5173 5174 0
c Var 'aux1247' direct represents '1' with '5175'
5173 -5174 5175 0
-5175 5174 0
-5175 -5173 0
c Var 'aux1247' direct represents '2' with '-5174'
5173 5175 -5174 0
c Encoding variable: aux1248 with domain: int(0..2) (representing constraint ((x_00006_00007=9) + (x_00006_00004=9)))
c Both direct and order encoding.
c Var 'aux1248' order represents '0' with '5176'
c Var 'aux1248' direct represents '0' with '5176'
c Var 'aux1248' order represents '1' with '5177'
-5176 5177 0
c Var 'aux1248' direct represents '1' with '5178'
5176 -5177 5178 0
-5178 5177 0
-5178 -5176 0
c Var 'aux1248' direct represents '2' with '-5177'
5176 5178 -5177 0
c Encoding variable: aux1249 with domain: int(0..2) (representing constraint ((x_00006_00006=9) + (x_00006_00005=9)))
c Both direct and order encoding.
c Var 'aux1249' order represents '0' with '5179'
c Var 'aux1249' direct represents '0' with '5179'
c Var 'aux1249' order represents '1' with '5180'
-5179 5180 0
c Var 'aux1249' direct represents '1' with '5181'
5179 -5180 5181 0
-5181 5180 0
-5181 -5179 0
c Var 'aux1249' direct represents '2' with '-5180'
5179 5181 -5180 0
c Encoding variable: aux1250 with domain: int(0..3) (representing constraint ((x_00006_00003=9) + aux1249))
c Both direct and order encoding.
c Var 'aux1250' order represents '0' with '5182'
c Var 'aux1250' direct represents '0' with '5182'
c Var 'aux1250' order represents '1' with '5183'
-5182 5183 0
c Var 'aux1250' direct represents '1' with '5184'
5182 -5183 5184 0
-5184 5183 0
-5184 -5182 0
c Var 'aux1250' order represents '2' with '5185'
-5183 5185 0
c Var 'aux1250' direct represents '2' with '5186'
5183 -5185 5186 0
-5186 5185 0
-5186 -5183 0
c Var 'aux1250' direct represents '3' with '-5185'
5182 5184 5186 -5185 0
c Encoding variable: aux1251 with domain: int(0..4) (representing constraint (aux1246 + aux1248))
c Both direct and order encoding.
c Var 'aux1251' order represents '0' with '5187'
c Var 'aux1251' direct represents '0' with '5187'
c Var 'aux1251' order represents '1' with '5188'
-5187 5188 0
c Var 'aux1251' direct represents '1' with '5189'
5187 -5188 5189 0
-5189 5188 0
-5189 -5187 0
c Var 'aux1251' order represents '2' with '5190'
-5188 5190 0
c Var 'aux1251' direct represents '2' with '5191'
5188 -5190 5191 0
-5191 5190 0
-5191 -5188 0
c Var 'aux1251' order represents '3' with '5192'
-5190 5192 0
c Var 'aux1251' direct represents '3' with '5193'
5190 -5192 5193 0
-5193 5192 0
-5193 -5190 0
c Var 'aux1251' direct represents '4' with '-5192'
5187 5189 5191 5193 -5192 0
c Encoding variable: aux1252 with domain: int(0..2) (representing constraint ((x_00007_00001=1) + (x_00007_00009=1)))
c Both direct and order encoding.
c Var 'aux1252' order represents '0' with '5194'
c Var 'aux1252' direct represents '0' with '5194'
c Var 'aux1252' order represents '1' with '5195'
-5194 5195 0
c Var 'aux1252' direct represents '1' with '5196'
5194 -5195 5196 0
-5196 5195 0
-5196 -5194 0
c Var 'aux1252' direct represents '2' with '-5195'
5194 5196 -5195 0
c Encoding variable: aux1253 with domain: int(0..2) (representing constraint ((x_00007_00008=1) + (x_00007_00002=1)))
c Both direct and order encoding.
c Var 'aux1253' order represents '0' with '5197'
c Var 'aux1253' direct represents '0' with '5197'
c Var 'aux1253' order represents '1' with '5198'
-5197 5198 0
c Var 'aux1253' direct represents '1' with '5199'
5197 -5198 5199 0
-5199 5198 0
-5199 -5197 0
c Var 'aux1253' direct represents '2' with '-5198'
5197 5199 -5198 0
c Encoding variable: aux1254 with domain: int(0..2) (representing constraint ((x_00007_00007=1) + (x_00007_00004=1)))
c Both direct and order encoding.
c Var 'aux1254' order represents '0' with '5200'
c Var 'aux1254' direct represents '0' with '5200'
c Var 'aux1254' order represents '1' with '5201'
-5200 5201 0
c Var 'aux1254' direct represents '1' with '5202'
5200 -5201 5202 0
-5202 5201 0
-5202 -5200 0
c Var 'aux1254' direct represents '2' with '-5201'
5200 5202 -5201 0
c Encoding variable: aux1255 with domain: int(0..2) (representing constraint ((x_00007_00006=1) + (x_00007_00005=1)))
c Both direct and order encoding.
c Var 'aux1255' order represents '0' with '5203'
c Var 'aux1255' direct represents '0' with '5203'
c Var 'aux1255' order represents '1' with '5204'
-5203 5204 0
c Var 'aux1255' direct represents '1' with '5205'
5203 -5204 5205 0
-5205 5204 0
-5205 -5203 0
c Var 'aux1255' direct represents '2' with '-5204'
5203 5205 -5204 0
c Encoding variable: aux1256 with domain: int(0..3) (representing constraint ((x_00007_00003=1) + aux1255))
c Both direct and order encoding.
c Var 'aux1256' order represents '0' with '5206'
c Var 'aux1256' direct represents '0' with '5206'
c Var 'aux1256' order represents '1' with '5207'
-5206 5207 0
c Var 'aux1256' direct represents '1' with '5208'
5206 -5207 5208 0
-5208 5207 0
-5208 -5206 0
c Var 'aux1256' order represents '2' with '5209'
-5207 5209 0
c Var 'aux1256' direct represents '2' with '5210'
5207 -5209 5210 0
-5210 5209 0
-5210 -5207 0
c Var 'aux1256' direct represents '3' with '-5209'
5206 5208 5210 -5209 0
c Encoding variable: aux1257 with domain: int(0..4) (representing constraint (aux1252 + aux1254))
c Both direct and order encoding.
c Var 'aux1257' order represents '0' with '5211'
c Var 'aux1257' direct represents '0' with '5211'
c Var 'aux1257' order represents '1' with '5212'
-5211 5212 0
c Var 'aux1257' direct represents '1' with '5213'
5211 -5212 5213 0
-5213 5212 0
-5213 -5211 0
c Var 'aux1257' order represents '2' with '5214'
-5212 5214 0
c Var 'aux1257' direct represents '2' with '5215'
5212 -5214 5215 0
-5215 5214 0
-5215 -5212 0
c Var 'aux1257' order represents '3' with '5216'
-5214 5216 0
c Var 'aux1257' direct represents '3' with '5217'
5214 -5216 5217 0
-5217 5216 0
-5217 -5214 0
c Var 'aux1257' direct represents '4' with '-5216'
5211 5213 5215 5217 -5216 0
c Encoding variable: aux1258 with domain: int(0..2) (representing constraint ((x_00007_00001=2) + (x_00007_00009=2)))
c Both direct and order encoding.
c Var 'aux1258' order represents '0' with '5218'
c Var 'aux1258' direct represents '0' with '5218'
c Var 'aux1258' order represents '1' with '5219'
-5218 5219 0
c Var 'aux1258' direct represents '1' with '5220'
5218 -5219 5220 0
-5220 5219 0
-5220 -5218 0
c Var 'aux1258' direct represents '2' with '-5219'
5218 5220 -5219 0
c Encoding variable: aux1259 with domain: int(0..2) (representing constraint ((x_00007_00008=2) + (x_00007_00002=2)))
c Both direct and order encoding.
c Var 'aux1259' order represents '0' with '5221'
c Var 'aux1259' direct represents '0' with '5221'
c Var 'aux1259' order represents '1' with '5222'
-5221 5222 0
c Var 'aux1259' direct represents '1' with '5223'
5221 -5222 5223 0
-5223 5222 0
-5223 -5221 0
c Var 'aux1259' direct represents '2' with '-5222'
5221 5223 -5222 0
c Encoding variable: aux1260 with domain: int(0..2) (representing constraint ((x_00007_00007=2) + (x_00007_00004=2)))
c Both direct and order encoding.
c Var 'aux1260' order represents '0' with '5224'
c Var 'aux1260' direct represents '0' with '5224'
c Var 'aux1260' order represents '1' with '5225'
-5224 5225 0
c Var 'aux1260' direct represents '1' with '5226'
5224 -5225 5226 0
-5226 5225 0
-5226 -5224 0
c Var 'aux1260' direct represents '2' with '-5225'
5224 5226 -5225 0
c Encoding variable: aux1261 with domain: int(0..2) (representing constraint ((x_00007_00006=2) + (x_00007_00005=2)))
c Both direct and order encoding.
c Var 'aux1261' order represents '0' with '5227'
c Var 'aux1261' direct represents '0' with '5227'
c Var 'aux1261' order represents '1' with '5228'
-5227 5228 0
c Var 'aux1261' direct represents '1' with '5229'
5227 -5228 5229 0
-5229 5228 0
-5229 -5227 0
c Var 'aux1261' direct represents '2' with '-5228'
5227 5229 -5228 0
c Encoding variable: aux1262 with domain: int(0..3) (representing constraint ((x_00007_00003=2) + aux1261))
c Both direct and order encoding.
c Var 'aux1262' order represents '0' with '5230'
c Var 'aux1262' direct represents '0' with '5230'
c Var 'aux1262' order represents '1' with '5231'
-5230 5231 0
c Var 'aux1262' direct represents '1' with '5232'
5230 -5231 5232 0
-5232 5231 0
-5232 -5230 0
c Var 'aux1262' order represents '2' with '5233'
-5231 5233 0
c Var 'aux1262' direct represents '2' with '5234'
5231 -5233 5234 0
-5234 5233 0
-5234 -5231 0
c Var 'aux1262' direct represents '3' with '-5233'
5230 5232 5234 -5233 0
c Encoding variable: aux1263 with domain: int(0..4) (representing constraint (aux1258 + aux1260))
c Both direct and order encoding.
c Var 'aux1263' order represents '0' with '5235'
c Var 'aux1263' direct represents '0' with '5235'
c Var 'aux1263' order represents '1' with '5236'
-5235 5236 0
c Var 'aux1263' direct represents '1' with '5237'
5235 -5236 5237 0
-5237 5236 0
-5237 -5235 0
c Var 'aux1263' order represents '2' with '5238'
-5236 5238 0
c Var 'aux1263' direct represents '2' with '5239'
5236 -5238 5239 0
-5239 5238 0
-5239 -5236 0
c Var 'aux1263' order represents '3' with '5240'
-5238 5240 0
c Var 'aux1263' direct represents '3' with '5241'
5238 -5240 5241 0
-5241 5240 0
-5241 -5238 0
c Var 'aux1263' direct represents '4' with '-5240'
5235 5237 5239 5241 -5240 0
c Encoding variable: aux1264 with domain: int(0..2) (representing constraint ((x_00007_00001=3) + (x_00007_00009=3)))
c Both direct and order encoding.
c Var 'aux1264' order represents '0' with '5242'
c Var 'aux1264' direct represents '0' with '5242'
c Var 'aux1264' order represents '1' with '5243'
-5242 5243 0
c Var 'aux1264' direct represents '1' with '5244'
5242 -5243 5244 0
-5244 5243 0
-5244 -5242 0
c Var 'aux1264' direct represents '2' with '-5243'
5242 5244 -5243 0
c Encoding variable: aux1265 with domain: int(0..2) (representing constraint ((x_00007_00008=3) + (x_00007_00002=3)))
c Both direct and order encoding.
c Var 'aux1265' order represents '0' with '5245'
c Var 'aux1265' direct represents '0' with '5245'
c Var 'aux1265' order represents '1' with '5246'
-5245 5246 0
c Var 'aux1265' direct represents '1' with '5247'
5245 -5246 5247 0
-5247 5246 0
-5247 -5245 0
c Var 'aux1265' direct represents '2' with '-5246'
5245 5247 -5246 0
c Encoding variable: aux1266 with domain: int(0..2) (representing constraint ((x_00007_00007=3) + (x_00007_00004=3)))
c Both direct and order encoding.
c Var 'aux1266' order represents '0' with '5248'
c Var 'aux1266' direct represents '0' with '5248'
c Var 'aux1266' order represents '1' with '5249'
-5248 5249 0
c Var 'aux1266' direct represents '1' with '5250'
5248 -5249 5250 0
-5250 5249 0
-5250 -5248 0
c Var 'aux1266' direct represents '2' with '-5249'
5248 5250 -5249 0
c Encoding variable: aux1267 with domain: int(0..2) (representing constraint ((x_00007_00006=3) + (x_00007_00005=3)))
c Both direct and order encoding.
c Var 'aux1267' order represents '0' with '5251'
c Var 'aux1267' direct represents '0' with '5251'
c Var 'aux1267' order represents '1' with '5252'
-5251 5252 0
c Var 'aux1267' direct represents '1' with '5253'
5251 -5252 5253 0
-5253 5252 0
-5253 -5251 0
c Var 'aux1267' direct represents '2' with '-5252'
5251 5253 -5252 0
c Encoding variable: aux1268 with domain: int(0..3) (representing constraint ((x_00007_00003=3) + aux1267))
c Both direct and order encoding.
c Var 'aux1268' order represents '0' with '5254'
c Var 'aux1268' direct represents '0' with '5254'
c Var 'aux1268' order represents '1' with '5255'
-5254 5255 0
c Var 'aux1268' direct represents '1' with '5256'
5254 -5255 5256 0
-5256 5255 0
-5256 -5254 0
c Var 'aux1268' order represents '2' with '5257'
-5255 5257 0
c Var 'aux1268' direct represents '2' with '5258'
5255 -5257 5258 0
-5258 5257 0
-5258 -5255 0
c Var 'aux1268' direct represents '3' with '-5257'
5254 5256 5258 -5257 0
c Encoding variable: aux1269 with domain: int(0..4) (representing constraint (aux1264 + aux1266))
c Both direct and order encoding.
c Var 'aux1269' order represents '0' with '5259'
c Var 'aux1269' direct represents '0' with '5259'
c Var 'aux1269' order represents '1' with '5260'
-5259 5260 0
c Var 'aux1269' direct represents '1' with '5261'
5259 -5260 5261 0
-5261 5260 0
-5261 -5259 0
c Var 'aux1269' order represents '2' with '5262'
-5260 5262 0
c Var 'aux1269' direct represents '2' with '5263'
5260 -5262 5263 0
-5263 5262 0
-5263 -5260 0
c Var 'aux1269' order represents '3' with '5264'
-5262 5264 0
c Var 'aux1269' direct represents '3' with '5265'
5262 -5264 5265 0
-5265 5264 0
-5265 -5262 0
c Var 'aux1269' direct represents '4' with '-5264'
5259 5261 5263 5265 -5264 0
c Encoding variable: aux1270 with domain: int(0..2) (representing constraint ((x_00007_00001=4) + (x_00007_00009=4)))
c Both direct and order encoding.
c Var 'aux1270' order represents '0' with '5266'
c Var 'aux1270' direct represents '0' with '5266'
c Var 'aux1270' order represents '1' with '5267'
-5266 5267 0
c Var 'aux1270' direct represents '1' with '5268'
5266 -5267 5268 0
-5268 5267 0
-5268 -5266 0
c Var 'aux1270' direct represents '2' with '-5267'
5266 5268 -5267 0
c Encoding variable: aux1271 with domain: int(0..2) (representing constraint ((x_00007_00008=4) + (x_00007_00002=4)))
c Both direct and order encoding.
c Var 'aux1271' order represents '0' with '5269'
c Var 'aux1271' direct represents '0' with '5269'
c Var 'aux1271' order represents '1' with '5270'
-5269 5270 0
c Var 'aux1271' direct represents '1' with '5271'
5269 -5270 5271 0
-5271 5270 0
-5271 -5269 0
c Var 'aux1271' direct represents '2' with '-5270'
5269 5271 -5270 0
c Encoding variable: aux1272 with domain: int(0..2) (representing constraint ((x_00007_00007=4) + (x_00007_00004=4)))
c Both direct and order encoding.
c Var 'aux1272' order represents '0' with '5272'
c Var 'aux1272' direct represents '0' with '5272'
c Var 'aux1272' order represents '1' with '5273'
-5272 5273 0
c Var 'aux1272' direct represents '1' with '5274'
5272 -5273 5274 0
-5274 5273 0
-5274 -5272 0
c Var 'aux1272' direct represents '2' with '-5273'
5272 5274 -5273 0
c Encoding variable: aux1273 with domain: int(0..2) (representing constraint ((x_00007_00006=4) + (x_00007_00005=4)))
c Both direct and order encoding.
c Var 'aux1273' order represents '0' with '5275'
c Var 'aux1273' direct represents '0' with '5275'
c Var 'aux1273' order represents '1' with '5276'
-5275 5276 0
c Var 'aux1273' direct represents '1' with '5277'
5275 -5276 5277 0
-5277 5276 0
-5277 -5275 0
c Var 'aux1273' direct represents '2' with '-5276'
5275 5277 -5276 0
c Encoding variable: aux1274 with domain: int(0..3) (representing constraint ((x_00007_00003=4) + aux1273))
c Both direct and order encoding.
c Var 'aux1274' order represents '0' with '5278'
c Var 'aux1274' direct represents '0' with '5278'
c Var 'aux1274' order represents '1' with '5279'
-5278 5279 0
c Var 'aux1274' direct represents '1' with '5280'
5278 -5279 5280 0
-5280 5279 0
-5280 -5278 0
c Var 'aux1274' order represents '2' with '5281'
-5279 5281 0
c Var 'aux1274' direct represents '2' with '5282'
5279 -5281 5282 0
-5282 5281 0
-5282 -5279 0
c Var 'aux1274' direct represents '3' with '-5281'
5278 5280 5282 -5281 0
c Encoding variable: aux1275 with domain: int(0..4) (representing constraint (aux1270 + aux1272))
c Both direct and order encoding.
c Var 'aux1275' order represents '0' with '5283'
c Var 'aux1275' direct represents '0' with '5283'
c Var 'aux1275' order represents '1' with '5284'
-5283 5284 0
c Var 'aux1275' direct represents '1' with '5285'
5283 -5284 5285 0
-5285 5284 0
-5285 -5283 0
c Var 'aux1275' order represents '2' with '5286'
-5284 5286 0
c Var 'aux1275' direct represents '2' with '5287'
5284 -5286 5287 0
-5287 5286 0
-5287 -5284 0
c Var 'aux1275' order represents '3' with '5288'
-5286 5288 0
c Var 'aux1275' direct represents '3' with '5289'
5286 -5288 5289 0
-5289 5288 0
-5289 -5286 0
c Var 'aux1275' direct represents '4' with '-5288'
5283 5285 5287 5289 -5288 0
c Encoding variable: aux1276 with domain: int(0..2) (representing constraint ((x_00007_00001=5) + (x_00007_00009=5)))
c Both direct and order encoding.
c Var 'aux1276' order represents '0' with '5290'
c Var 'aux1276' direct represents '0' with '5290'
c Var 'aux1276' order represents '1' with '5291'
-5290 5291 0
c Var 'aux1276' direct represents '1' with '5292'
5290 -5291 5292 0
-5292 5291 0
-5292 -5290 0
c Var 'aux1276' direct represents '2' with '-5291'
5290 5292 -5291 0
c Encoding variable: aux1277 with domain: int(0..2) (representing constraint ((x_00007_00008=5) + (x_00007_00002=5)))
c Both direct and order encoding.
c Var 'aux1277' order represents '0' with '5293'
c Var 'aux1277' direct represents '0' with '5293'
c Var 'aux1277' order represents '1' with '5294'
-5293 5294 0
c Var 'aux1277' direct represents '1' with '5295'
5293 -5294 5295 0
-5295 5294 0
-5295 -5293 0
c Var 'aux1277' direct represents '2' with '-5294'
5293 5295 -5294 0
c Encoding variable: aux1278 with domain: int(0..2) (representing constraint ((x_00007_00007=5) + (x_00007_00004=5)))
c Both direct and order encoding.
c Var 'aux1278' order represents '0' with '5296'
c Var 'aux1278' direct represents '0' with '5296'
c Var 'aux1278' order represents '1' with '5297'
-5296 5297 0
c Var 'aux1278' direct represents '1' with '5298'
5296 -5297 5298 0
-5298 5297 0
-5298 -5296 0
c Var 'aux1278' direct represents '2' with '-5297'
5296 5298 -5297 0
c Encoding variable: aux1279 with domain: int(0..2) (representing constraint ((x_00007_00006=5) + (x_00007_00005=5)))
c Both direct and order encoding.
c Var 'aux1279' order represents '0' with '5299'
c Var 'aux1279' direct represents '0' with '5299'
c Var 'aux1279' order represents '1' with '5300'
-5299 5300 0
c Var 'aux1279' direct represents '1' with '5301'
5299 -5300 5301 0
-5301 5300 0
-5301 -5299 0
c Var 'aux1279' direct represents '2' with '-5300'
5299 5301 -5300 0
c Encoding variable: aux1280 with domain: int(0..3) (representing constraint ((x_00007_00003=5) + aux1279))
c Both direct and order encoding.
c Var 'aux1280' order represents '0' with '5302'
c Var 'aux1280' direct represents '0' with '5302'
c Var 'aux1280' order represents '1' with '5303'
-5302 5303 0
c Var 'aux1280' direct represents '1' with '5304'
5302 -5303 5304 0
-5304 5303 0
-5304 -5302 0
c Var 'aux1280' order represents '2' with '5305'
-5303 5305 0
c Var 'aux1280' direct represents '2' with '5306'
5303 -5305 5306 0
-5306 5305 0
-5306 -5303 0
c Var 'aux1280' direct represents '3' with '-5305'
5302 5304 5306 -5305 0
c Encoding variable: aux1281 with domain: int(0..4) (representing constraint (aux1276 + aux1278))
c Both direct and order encoding.
c Var 'aux1281' order represents '0' with '5307'
c Var 'aux1281' direct represents '0' with '5307'
c Var 'aux1281' order represents '1' with '5308'
-5307 5308 0
c Var 'aux1281' direct represents '1' with '5309'
5307 -5308 5309 0
-5309 5308 0
-5309 -5307 0
c Var 'aux1281' order represents '2' with '5310'
-5308 5310 0
c Var 'aux1281' direct represents '2' with '5311'
5308 -5310 5311 0
-5311 5310 0
-5311 -5308 0
c Var 'aux1281' order represents '3' with '5312'
-5310 5312 0
c Var 'aux1281' direct represents '3' with '5313'
5310 -5312 5313 0
-5313 5312 0
-5313 -5310 0
c Var 'aux1281' direct represents '4' with '-5312'
5307 5309 5311 5313 -5312 0
c Encoding variable: aux1282 with domain: int(0..2) (representing constraint ((x_00007_00001=6) + (x_00007_00009=6)))
c Both direct and order encoding.
c Var 'aux1282' order represents '0' with '5314'
c Var 'aux1282' direct represents '0' with '5314'
c Var 'aux1282' order represents '1' with '5315'
-5314 5315 0
c Var 'aux1282' direct represents '1' with '5316'
5314 -5315 5316 0
-5316 5315 0
-5316 -5314 0
c Var 'aux1282' direct represents '2' with '-5315'
5314 5316 -5315 0
c Encoding variable: aux1283 with domain: int(0..2) (representing constraint ((x_00007_00008=6) + (x_00007_00002=6)))
c Both direct and order encoding.
c Var 'aux1283' order represents '0' with '5317'
c Var 'aux1283' direct represents '0' with '5317'
c Var 'aux1283' order represents '1' with '5318'
-5317 5318 0
c Var 'aux1283' direct represents '1' with '5319'
5317 -5318 5319 0
-5319 5318 0
-5319 -5317 0
c Var 'aux1283' direct represents '2' with '-5318'
5317 5319 -5318 0
c Encoding variable: aux1284 with domain: int(0..2) (representing constraint ((x_00007_00007=6) + (x_00007_00004=6)))
c Both direct and order encoding.
c Var 'aux1284' order represents '0' with '5320'
c Var 'aux1284' direct represents '0' with '5320'
c Var 'aux1284' order represents '1' with '5321'
-5320 5321 0
c Var 'aux1284' direct represents '1' with '5322'
5320 -5321 5322 0
-5322 5321 0
-5322 -5320 0
c Var 'aux1284' direct represents '2' with '-5321'
5320 5322 -5321 0
c Encoding variable: aux1285 with domain: int(0..2) (representing constraint ((x_00007_00006=6) + (x_00007_00005=6)))
c Both direct and order encoding.
c Var 'aux1285' order represents '0' with '5323'
c Var 'aux1285' direct represents '0' with '5323'
c Var 'aux1285' order represents '1' with '5324'
-5323 5324 0
c Var 'aux1285' direct represents '1' with '5325'
5323 -5324 5325 0
-5325 5324 0
-5325 -5323 0
c Var 'aux1285' direct represents '2' with '-5324'
5323 5325 -5324 0
c Encoding variable: aux1286 with domain: int(0..3) (representing constraint ((x_00007_00003=6) + aux1285))
c Both direct and order encoding.
c Var 'aux1286' order represents '0' with '5326'
c Var 'aux1286' direct represents '0' with '5326'
c Var 'aux1286' order represents '1' with '5327'
-5326 5327 0
c Var 'aux1286' direct represents '1' with '5328'
5326 -5327 5328 0
-5328 5327 0
-5328 -5326 0
c Var 'aux1286' order represents '2' with '5329'
-5327 5329 0
c Var 'aux1286' direct represents '2' with '5330'
5327 -5329 5330 0
-5330 5329 0
-5330 -5327 0
c Var 'aux1286' direct represents '3' with '-5329'
5326 5328 5330 -5329 0
c Encoding variable: aux1287 with domain: int(0..4) (representing constraint (aux1282 + aux1284))
c Both direct and order encoding.
c Var 'aux1287' order represents '0' with '5331'
c Var 'aux1287' direct represents '0' with '5331'
c Var 'aux1287' order represents '1' with '5332'
-5331 5332 0
c Var 'aux1287' direct represents '1' with '5333'
5331 -5332 5333 0
-5333 5332 0
-5333 -5331 0
c Var 'aux1287' order represents '2' with '5334'
-5332 5334 0
c Var 'aux1287' direct represents '2' with '5335'
5332 -5334 5335 0
-5335 5334 0
-5335 -5332 0
c Var 'aux1287' order represents '3' with '5336'
-5334 5336 0
c Var 'aux1287' direct represents '3' with '5337'
5334 -5336 5337 0
-5337 5336 0
-5337 -5334 0
c Var 'aux1287' direct represents '4' with '-5336'
5331 5333 5335 5337 -5336 0
c Encoding variable: aux1288 with domain: int(0..2) (representing constraint ((x_00007_00001=7) + (x_00007_00009=7)))
c Both direct and order encoding.
c Var 'aux1288' order represents '0' with '5338'
c Var 'aux1288' direct represents '0' with '5338'
c Var 'aux1288' order represents '1' with '5339'
-5338 5339 0
c Var 'aux1288' direct represents '1' with '5340'
5338 -5339 5340 0
-5340 5339 0
-5340 -5338 0
c Var 'aux1288' direct represents '2' with '-5339'
5338 5340 -5339 0
c Encoding variable: aux1289 with domain: int(0..2) (representing constraint ((x_00007_00008=7) + (x_00007_00002=7)))
c Both direct and order encoding.
c Var 'aux1289' order represents '0' with '5341'
c Var 'aux1289' direct represents '0' with '5341'
c Var 'aux1289' order represents '1' with '5342'
-5341 5342 0
c Var 'aux1289' direct represents '1' with '5343'
5341 -5342 5343 0
-5343 5342 0
-5343 -5341 0
c Var 'aux1289' direct represents '2' with '-5342'
5341 5343 -5342 0
c Encoding variable: aux1290 with domain: int(0..2) (representing constraint ((x_00007_00007=7) + (x_00007_00004=7)))
c Both direct and order encoding.
c Var 'aux1290' order represents '0' with '5344'
c Var 'aux1290' direct represents '0' with '5344'
c Var 'aux1290' order represents '1' with '5345'
-5344 5345 0
c Var 'aux1290' direct represents '1' with '5346'
5344 -5345 5346 0
-5346 5345 0
-5346 -5344 0
c Var 'aux1290' direct represents '2' with '-5345'
5344 5346 -5345 0
c Encoding variable: aux1291 with domain: int(0..2) (representing constraint ((x_00007_00006=7) + (x_00007_00005=7)))
c Both direct and order encoding.
c Var 'aux1291' order represents '0' with '5347'
c Var 'aux1291' direct represents '0' with '5347'
c Var 'aux1291' order represents '1' with '5348'
-5347 5348 0
c Var 'aux1291' direct represents '1' with '5349'
5347 -5348 5349 0
-5349 5348 0
-5349 -5347 0
c Var 'aux1291' direct represents '2' with '-5348'
5347 5349 -5348 0
c Encoding variable: aux1292 with domain: int(0..3) (representing constraint ((x_00007_00003=7) + aux1291))
c Both direct and order encoding.
c Var 'aux1292' order represents '0' with '5350'
c Var 'aux1292' direct represents '0' with '5350'
c Var 'aux1292' order represents '1' with '5351'
-5350 5351 0
c Var 'aux1292' direct represents '1' with '5352'
5350 -5351 5352 0
-5352 5351 0
-5352 -5350 0
c Var 'aux1292' order represents '2' with '5353'
-5351 5353 0
c Var 'aux1292' direct represents '2' with '5354'
5351 -5353 5354 0
-5354 5353 0
-5354 -5351 0
c Var 'aux1292' direct represents '3' with '-5353'
5350 5352 5354 -5353 0
c Encoding variable: aux1293 with domain: int(0..4) (representing constraint (aux1288 + aux1290))
c Both direct and order encoding.
c Var 'aux1293' order represents '0' with '5355'
c Var 'aux1293' direct represents '0' with '5355'
c Var 'aux1293' order represents '1' with '5356'
-5355 5356 0
c Var 'aux1293' direct represents '1' with '5357'
5355 -5356 5357 0
-5357 5356 0
-5357 -5355 0
c Var 'aux1293' order represents '2' with '5358'
-5356 5358 0
c Var 'aux1293' direct represents '2' with '5359'
5356 -5358 5359 0
-5359 5358 0
-5359 -5356 0
c Var 'aux1293' order represents '3' with '5360'
-5358 5360 0
c Var 'aux1293' direct represents '3' with '5361'
5358 -5360 5361 0
-5361 5360 0
-5361 -5358 0
c Var 'aux1293' direct represents '4' with '-5360'
5355 5357 5359 5361 -5360 0
c Encoding variable: aux1294 with domain: int(0..2) (representing constraint ((x_00007_00001=8) + (x_00007_00009=8)))
c Both direct and order encoding.
c Var 'aux1294' order represents '0' with '5362'
c Var 'aux1294' direct represents '0' with '5362'
c Var 'aux1294' order represents '1' with '5363'
-5362 5363 0
c Var 'aux1294' direct represents '1' with '5364'
5362 -5363 5364 0
-5364 5363 0
-5364 -5362 0
c Var 'aux1294' direct represents '2' with '-5363'
5362 5364 -5363 0
c Encoding variable: aux1295 with domain: int(0..2) (representing constraint ((x_00007_00008=8) + (x_00007_00002=8)))
c Both direct and order encoding.
c Var 'aux1295' order represents '0' with '5365'
c Var 'aux1295' direct represents '0' with '5365'
c Var 'aux1295' order represents '1' with '5366'
-5365 5366 0
c Var 'aux1295' direct represents '1' with '5367'
5365 -5366 5367 0
-5367 5366 0
-5367 -5365 0
c Var 'aux1295' direct represents '2' with '-5366'
5365 5367 -5366 0
c Encoding variable: aux1296 with domain: int(0..2) (representing constraint ((x_00007_00007=8) + (x_00007_00004=8)))
c Both direct and order encoding.
c Var 'aux1296' order represents '0' with '5368'
c Var 'aux1296' direct represents '0' with '5368'
c Var 'aux1296' order represents '1' with '5369'
-5368 5369 0
c Var 'aux1296' direct represents '1' with '5370'
5368 -5369 5370 0
-5370 5369 0
-5370 -5368 0
c Var 'aux1296' direct represents '2' with '-5369'
5368 5370 -5369 0
c Encoding variable: aux1297 with domain: int(0..2) (representing constraint ((x_00007_00006=8) + (x_00007_00005=8)))
c Both direct and order encoding.
c Var 'aux1297' order represents '0' with '5371'
c Var 'aux1297' direct represents '0' with '5371'
c Var 'aux1297' order represents '1' with '5372'
-5371 5372 0
c Var 'aux1297' direct represents '1' with '5373'
5371 -5372 5373 0
-5373 5372 0
-5373 -5371 0
c Var 'aux1297' direct represents '2' with '-5372'
5371 5373 -5372 0
c Encoding variable: aux1298 with domain: int(0..3) (representing constraint ((x_00007_00003=8) + aux1297))
c Both direct and order encoding.
c Var 'aux1298' order represents '0' with '5374'
c Var 'aux1298' direct represents '0' with '5374'
c Var 'aux1298' order represents '1' with '5375'
-5374 5375 0
c Var 'aux1298' direct represents '1' with '5376'
5374 -5375 5376 0
-5376 5375 0
-5376 -5374 0
c Var 'aux1298' order represents '2' with '5377'
-5375 5377 0
c Var 'aux1298' direct represents '2' with '5378'
5375 -5377 5378 0
-5378 5377 0
-5378 -5375 0
c Var 'aux1298' direct represents '3' with '-5377'
5374 5376 5378 -5377 0
c Encoding variable: aux1299 with domain: int(0..4) (representing constraint (aux1294 + aux1296))
c Both direct and order encoding.
c Var 'aux1299' order represents '0' with '5379'
c Var 'aux1299' direct represents '0' with '5379'
c Var 'aux1299' order represents '1' with '5380'
-5379 5380 0
c Var 'aux1299' direct represents '1' with '5381'
5379 -5380 5381 0
-5381 5380 0
-5381 -5379 0
c Var 'aux1299' order represents '2' with '5382'
-5380 5382 0
c Var 'aux1299' direct represents '2' with '5383'
5380 -5382 5383 0
-5383 5382 0
-5383 -5380 0
c Var 'aux1299' order represents '3' with '5384'
-5382 5384 0
c Var 'aux1299' direct represents '3' with '5385'
5382 -5384 5385 0
-5385 5384 0
-5385 -5382 0
c Var 'aux1299' direct represents '4' with '-5384'
5379 5381 5383 5385 -5384 0
c Encoding variable: aux1300 with domain: int(0..2) (representing constraint ((x_00007_00001=9) + (x_00007_00009=9)))
c Both direct and order encoding.
c Var 'aux1300' order represents '0' with '5386'
c Var 'aux1300' direct represents '0' with '5386'
c Var 'aux1300' order represents '1' with '5387'
-5386 5387 0
c Var 'aux1300' direct represents '1' with '5388'
5386 -5387 5388 0
-5388 5387 0
-5388 -5386 0
c Var 'aux1300' direct represents '2' with '-5387'
5386 5388 -5387 0
c Encoding variable: aux1301 with domain: int(0..2) (representing constraint ((x_00007_00008=9) + (x_00007_00002=9)))
c Both direct and order encoding.
c Var 'aux1301' order represents '0' with '5389'
c Var 'aux1301' direct represents '0' with '5389'
c Var 'aux1301' order represents '1' with '5390'
-5389 5390 0
c Var 'aux1301' direct represents '1' with '5391'
5389 -5390 5391 0
-5391 5390 0
-5391 -5389 0
c Var 'aux1301' direct represents '2' with '-5390'
5389 5391 -5390 0
c Encoding variable: aux1302 with domain: int(0..2) (representing constraint ((x_00007_00007=9) + (x_00007_00004=9)))
c Both direct and order encoding.
c Var 'aux1302' order represents '0' with '5392'
c Var 'aux1302' direct represents '0' with '5392'
c Var 'aux1302' order represents '1' with '5393'
-5392 5393 0
c Var 'aux1302' direct represents '1' with '5394'
5392 -5393 5394 0
-5394 5393 0
-5394 -5392 0
c Var 'aux1302' direct represents '2' with '-5393'
5392 5394 -5393 0
c Encoding variable: aux1303 with domain: int(0..2) (representing constraint ((x_00007_00006=9) + (x_00007_00005=9)))
c Both direct and order encoding.
c Var 'aux1303' order represents '0' with '5395'
c Var 'aux1303' direct represents '0' with '5395'
c Var 'aux1303' order represents '1' with '5396'
-5395 5396 0
c Var 'aux1303' direct represents '1' with '5397'
5395 -5396 5397 0
-5397 5396 0
-5397 -5395 0
c Var 'aux1303' direct represents '2' with '-5396'
5395 5397 -5396 0
c Encoding variable: aux1304 with domain: int(0..3) (representing constraint ((x_00007_00003=9) + aux1303))
c Both direct and order encoding.
c Var 'aux1304' order represents '0' with '5398'
c Var 'aux1304' direct represents '0' with '5398'
c Var 'aux1304' order represents '1' with '5399'
-5398 5399 0
c Var 'aux1304' direct represents '1' with '5400'
5398 -5399 5400 0
-5400 5399 0
-5400 -5398 0
c Var 'aux1304' order represents '2' with '5401'
-5399 5401 0
c Var 'aux1304' direct represents '2' with '5402'
5399 -5401 5402 0
-5402 5401 0
-5402 -5399 0
c Var 'aux1304' direct represents '3' with '-5401'
5398 5400 5402 -5401 0
c Encoding variable: aux1305 with domain: int(0..4) (representing constraint (aux1300 + aux1302))
c Both direct and order encoding.
c Var 'aux1305' order represents '0' with '5403'
c Var 'aux1305' direct represents '0' with '5403'
c Var 'aux1305' order represents '1' with '5404'
-5403 5404 0
c Var 'aux1305' direct represents '1' with '5405'
5403 -5404 5405 0
-5405 5404 0
-5405 -5403 0
c Var 'aux1305' order represents '2' with '5406'
-5404 5406 0
c Var 'aux1305' direct represents '2' with '5407'
5404 -5406 5407 0
-5407 5406 0
-5407 -5404 0
c Var 'aux1305' order represents '3' with '5408'
-5406 5408 0
c Var 'aux1305' direct represents '3' with '5409'
5406 -5408 5409 0
-5409 5408 0
-5409 -5406 0
c Var 'aux1305' direct represents '4' with '-5408'
5403 5405 5407 5409 -5408 0
c Encoding variable: aux1306 with domain: int(0..2) (representing constraint ((x_00008_00001=1) + (x_00008_00009=1)))
c Both direct and order encoding.
c Var 'aux1306' order represents '0' with '5410'
c Var 'aux1306' direct represents '0' with '5410'
c Var 'aux1306' order represents '1' with '5411'
-5410 5411 0
c Var 'aux1306' direct represents '1' with '5412'
5410 -5411 5412 0
-5412 5411 0
-5412 -5410 0
c Var 'aux1306' direct represents '2' with '-5411'
5410 5412 -5411 0
c Encoding variable: aux1307 with domain: int(0..2) (representing constraint ((x_00008_00008=1) + (x_00008_00002=1)))
c Both direct and order encoding.
c Var 'aux1307' order represents '0' with '5413'
c Var 'aux1307' direct represents '0' with '5413'
c Var 'aux1307' order represents '1' with '5414'
-5413 5414 0
c Var 'aux1307' direct represents '1' with '5415'
5413 -5414 5415 0
-5415 5414 0
-5415 -5413 0
c Var 'aux1307' direct represents '2' with '-5414'
5413 5415 -5414 0
c Encoding variable: aux1308 with domain: int(0..2) (representing constraint ((x_00008_00007=1) + (x_00008_00004=1)))
c Both direct and order encoding.
c Var 'aux1308' order represents '0' with '5416'
c Var 'aux1308' direct represents '0' with '5416'
c Var 'aux1308' order represents '1' with '5417'
-5416 5417 0
c Var 'aux1308' direct represents '1' with '5418'
5416 -5417 5418 0
-5418 5417 0
-5418 -5416 0
c Var 'aux1308' direct represents '2' with '-5417'
5416 5418 -5417 0
c Encoding variable: aux1309 with domain: int(0..2) (representing constraint ((x_00008_00006=1) + (x_00008_00005=1)))
c Both direct and order encoding.
c Var 'aux1309' order represents '0' with '5419'
c Var 'aux1309' direct represents '0' with '5419'
c Var 'aux1309' order represents '1' with '5420'
-5419 5420 0
c Var 'aux1309' direct represents '1' with '5421'
5419 -5420 5421 0
-5421 5420 0
-5421 -5419 0
c Var 'aux1309' direct represents '2' with '-5420'
5419 5421 -5420 0
c Encoding variable: aux1310 with domain: int(0..3) (representing constraint ((x_00008_00003=1) + aux1309))
c Both direct and order encoding.
c Var 'aux1310' order represents '0' with '5422'
c Var 'aux1310' direct represents '0' with '5422'
c Var 'aux1310' order represents '1' with '5423'
-5422 5423 0
c Var 'aux1310' direct represents '1' with '5424'
5422 -5423 5424 0
-5424 5423 0
-5424 -5422 0
c Var 'aux1310' order represents '2' with '5425'
-5423 5425 0
c Var 'aux1310' direct represents '2' with '5426'
5423 -5425 5426 0
-5426 5425 0
-5426 -5423 0
c Var 'aux1310' direct represents '3' with '-5425'
5422 5424 5426 -5425 0
c Encoding variable: aux1311 with domain: int(0..4) (representing constraint (aux1306 + aux1308))
c Both direct and order encoding.
c Var 'aux1311' order represents '0' with '5427'
c Var 'aux1311' direct represents '0' with '5427'
c Var 'aux1311' order represents '1' with '5428'
-5427 5428 0
c Var 'aux1311' direct represents '1' with '5429'
5427 -5428 5429 0
-5429 5428 0
-5429 -5427 0
c Var 'aux1311' order represents '2' with '5430'
-5428 5430 0
c Var 'aux1311' direct represents '2' with '5431'
5428 -5430 5431 0
-5431 5430 0
-5431 -5428 0
c Var 'aux1311' order represents '3' with '5432'
-5430 5432 0
c Var 'aux1311' direct represents '3' with '5433'
5430 -5432 5433 0
-5433 5432 0
-5433 -5430 0
c Var 'aux1311' direct represents '4' with '-5432'
5427 5429 5431 5433 -5432 0
c Encoding variable: aux1312 with domain: int(0..2) (representing constraint ((x_00008_00001=2) + (x_00008_00009=2)))
c Both direct and order encoding.
c Var 'aux1312' order represents '0' with '5434'
c Var 'aux1312' direct represents '0' with '5434'
c Var 'aux1312' order represents '1' with '5435'
-5434 5435 0
c Var 'aux1312' direct represents '1' with '5436'
5434 -5435 5436 0
-5436 5435 0
-5436 -5434 0
c Var 'aux1312' direct represents '2' with '-5435'
5434 5436 -5435 0
c Encoding variable: aux1313 with domain: int(0..2) (representing constraint ((x_00008_00008=2) + (x_00008_00002=2)))
c Both direct and order encoding.
c Var 'aux1313' order represents '0' with '5437'
c Var 'aux1313' direct represents '0' with '5437'
c Var 'aux1313' order represents '1' with '5438'
-5437 5438 0
c Var 'aux1313' direct represents '1' with '5439'
5437 -5438 5439 0
-5439 5438 0
-5439 -5437 0
c Var 'aux1313' direct represents '2' with '-5438'
5437 5439 -5438 0
c Encoding variable: aux1314 with domain: int(0..2) (representing constraint ((x_00008_00007=2) + (x_00008_00004=2)))
c Both direct and order encoding.
c Var 'aux1314' order represents '0' with '5440'
c Var 'aux1314' direct represents '0' with '5440'
c Var 'aux1314' order represents '1' with '5441'
-5440 5441 0
c Var 'aux1314' direct represents '1' with '5442'
5440 -5441 5442 0
-5442 5441 0
-5442 -5440 0
c Var 'aux1314' direct represents '2' with '-5441'
5440 5442 -5441 0
c Encoding variable: aux1315 with domain: int(0..2) (representing constraint ((x_00008_00006=2) + (x_00008_00005=2)))
c Both direct and order encoding.
c Var 'aux1315' order represents '0' with '5443'
c Var 'aux1315' direct represents '0' with '5443'
c Var 'aux1315' order represents '1' with '5444'
-5443 5444 0
c Var 'aux1315' direct represents '1' with '5445'
5443 -5444 5445 0
-5445 5444 0
-5445 -5443 0
c Var 'aux1315' direct represents '2' with '-5444'
5443 5445 -5444 0
c Encoding variable: aux1316 with domain: int(0..3) (representing constraint ((x_00008_00003=2) + aux1315))
c Both direct and order encoding.
c Var 'aux1316' order represents '0' with '5446'
c Var 'aux1316' direct represents '0' with '5446'
c Var 'aux1316' order represents '1' with '5447'
-5446 5447 0
c Var 'aux1316' direct represents '1' with '5448'
5446 -5447 5448 0
-5448 5447 0
-5448 -5446 0
c Var 'aux1316' order represents '2' with '5449'
-5447 5449 0
c Var 'aux1316' direct represents '2' with '5450'
5447 -5449 5450 0
-5450 5449 0
-5450 -5447 0
c Var 'aux1316' direct represents '3' with '-5449'
5446 5448 5450 -5449 0
c Encoding variable: aux1317 with domain: int(0..4) (representing constraint (aux1312 + aux1314))
c Both direct and order encoding.
c Var 'aux1317' order represents '0' with '5451'
c Var 'aux1317' direct represents '0' with '5451'
c Var 'aux1317' order represents '1' with '5452'
-5451 5452 0
c Var 'aux1317' direct represents '1' with '5453'
5451 -5452 5453 0
-5453 5452 0
-5453 -5451 0
c Var 'aux1317' order represents '2' with '5454'
-5452 5454 0
c Var 'aux1317' direct represents '2' with '5455'
5452 -5454 5455 0
-5455 5454 0
-5455 -5452 0
c Var 'aux1317' order represents '3' with '5456'
-5454 5456 0
c Var 'aux1317' direct represents '3' with '5457'
5454 -5456 5457 0
-5457 5456 0
-5457 -5454 0
c Var 'aux1317' direct represents '4' with '-5456'
5451 5453 5455 5457 -5456 0
c Encoding variable: aux1318 with domain: int(0..2) (representing constraint ((x_00008_00001=3) + (x_00008_00009=3)))
c Both direct and order encoding.
c Var 'aux1318' order represents '0' with '5458'
c Var 'aux1318' direct represents '0' with '5458'
c Var 'aux1318' order represents '1' with '5459'
-5458 5459 0
c Var 'aux1318' direct represents '1' with '5460'
5458 -5459 5460 0
-5460 5459 0
-5460 -5458 0
c Var 'aux1318' direct represents '2' with '-5459'
5458 5460 -5459 0
c Encoding variable: aux1319 with domain: int(0..2) (representing constraint ((x_00008_00008=3) + (x_00008_00002=3)))
c Both direct and order encoding.
c Var 'aux1319' order represents '0' with '5461'
c Var 'aux1319' direct represents '0' with '5461'
c Var 'aux1319' order represents '1' with '5462'
-5461 5462 0
c Var 'aux1319' direct represents '1' with '5463'
5461 -5462 5463 0
-5463 5462 0
-5463 -5461 0
c Var 'aux1319' direct represents '2' with '-5462'
5461 5463 -5462 0
c Encoding variable: aux1320 with domain: int(0..2) (representing constraint ((x_00008_00007=3) + (x_00008_00004=3)))
c Both direct and order encoding.
c Var 'aux1320' order represents '0' with '5464'
c Var 'aux1320' direct represents '0' with '5464'
c Var 'aux1320' order represents '1' with '5465'
-5464 5465 0
c Var 'aux1320' direct represents '1' with '5466'
5464 -5465 5466 0
-5466 5465 0
-5466 -5464 0
c Var 'aux1320' direct represents '2' with '-5465'
5464 5466 -5465 0
c Encoding variable: aux1321 with domain: int(0..2) (representing constraint ((x_00008_00006=3) + (x_00008_00005=3)))
c Both direct and order encoding.
c Var 'aux1321' order represents '0' with '5467'
c Var 'aux1321' direct represents '0' with '5467'
c Var 'aux1321' order represents '1' with '5468'
-5467 5468 0
c Var 'aux1321' direct represents '1' with '5469'
5467 -5468 5469 0
-5469 5468 0
-5469 -5467 0
c Var 'aux1321' direct represents '2' with '-5468'
5467 5469 -5468 0
c Encoding variable: aux1322 with domain: int(0..3) (representing constraint ((x_00008_00003=3) + aux1321))
c Both direct and order encoding.
c Var 'aux1322' order represents '0' with '5470'
c Var 'aux1322' direct represents '0' with '5470'
c Var 'aux1322' order represents '1' with '5471'
-5470 5471 0
c Var 'aux1322' direct represents '1' with '5472'
5470 -5471 5472 0
-5472 5471 0
-5472 -5470 0
c Var 'aux1322' order represents '2' with '5473'
-5471 5473 0
c Var 'aux1322' direct represents '2' with '5474'
5471 -5473 5474 0
-5474 5473 0
-5474 -5471 0
c Var 'aux1322' direct represents '3' with '-5473'
5470 5472 5474 -5473 0
c Encoding variable: aux1323 with domain: int(0..4) (representing constraint (aux1318 + aux1320))
c Both direct and order encoding.
c Var 'aux1323' order represents '0' with '5475'
c Var 'aux1323' direct represents '0' with '5475'
c Var 'aux1323' order represents '1' with '5476'
-5475 5476 0
c Var 'aux1323' direct represents '1' with '5477'
5475 -5476 5477 0
-5477 5476 0
-5477 -5475 0
c Var 'aux1323' order represents '2' with '5478'
-5476 5478 0
c Var 'aux1323' direct represents '2' with '5479'
5476 -5478 5479 0
-5479 5478 0
-5479 -5476 0
c Var 'aux1323' order represents '3' with '5480'
-5478 5480 0
c Var 'aux1323' direct represents '3' with '5481'
5478 -5480 5481 0
-5481 5480 0
-5481 -5478 0
c Var 'aux1323' direct represents '4' with '-5480'
5475 5477 5479 5481 -5480 0
c Encoding variable: aux1324 with domain: int(0..2) (representing constraint ((x_00008_00001=4) + (x_00008_00009=4)))
c Both direct and order encoding.
c Var 'aux1324' order represents '0' with '5482'
c Var 'aux1324' direct represents '0' with '5482'
c Var 'aux1324' order represents '1' with '5483'
-5482 5483 0
c Var 'aux1324' direct represents '1' with '5484'
5482 -5483 5484 0
-5484 5483 0
-5484 -5482 0
c Var 'aux1324' direct represents '2' with '-5483'
5482 5484 -5483 0
c Encoding variable: aux1325 with domain: int(0..2) (representing constraint ((x_00008_00008=4) + (x_00008_00002=4)))
c Both direct and order encoding.
c Var 'aux1325' order represents '0' with '5485'
c Var 'aux1325' direct represents '0' with '5485'
c Var 'aux1325' order represents '1' with '5486'
-5485 5486 0
c Var 'aux1325' direct represents '1' with '5487'
5485 -5486 5487 0
-5487 5486 0
-5487 -5485 0
c Var 'aux1325' direct represents '2' with '-5486'
5485 5487 -5486 0
c Encoding variable: aux1326 with domain: int(0..2) (representing constraint ((x_00008_00007=4) + (x_00008_00004=4)))
c Both direct and order encoding.
c Var 'aux1326' order represents '0' with '5488'
c Var 'aux1326' direct represents '0' with '5488'
c Var 'aux1326' order represents '1' with '5489'
-5488 5489 0
c Var 'aux1326' direct represents '1' with '5490'
5488 -5489 5490 0
-5490 5489 0
-5490 -5488 0
c Var 'aux1326' direct represents '2' with '-5489'
5488 5490 -5489 0
c Encoding variable: aux1327 with domain: int(0..2) (representing constraint ((x_00008_00006=4) + (x_00008_00005=4)))
c Both direct and order encoding.
c Var 'aux1327' order represents '0' with '5491'
c Var 'aux1327' direct represents '0' with '5491'
c Var 'aux1327' order represents '1' with '5492'
-5491 5492 0
c Var 'aux1327' direct represents '1' with '5493'
5491 -5492 5493 0
-5493 5492 0
-5493 -5491 0
c Var 'aux1327' direct represents '2' with '-5492'
5491 5493 -5492 0
c Encoding variable: aux1328 with domain: int(0..3) (representing constraint ((x_00008_00003=4) + aux1327))
c Both direct and order encoding.
c Var 'aux1328' order represents '0' with '5494'
c Var 'aux1328' direct represents '0' with '5494'
c Var 'aux1328' order represents '1' with '5495'
-5494 5495 0
c Var 'aux1328' direct represents '1' with '5496'
5494 -5495 5496 0
-5496 5495 0
-5496 -5494 0
c Var 'aux1328' order represents '2' with '5497'
-5495 5497 0
c Var 'aux1328' direct represents '2' with '5498'
5495 -5497 5498 0
-5498 5497 0
-5498 -5495 0
c Var 'aux1328' direct represents '3' with '-5497'
5494 5496 5498 -5497 0
c Encoding variable: aux1329 with domain: int(0..4) (representing constraint (aux1324 + aux1326))
c Both direct and order encoding.
c Var 'aux1329' order represents '0' with '5499'
c Var 'aux1329' direct represents '0' with '5499'
c Var 'aux1329' order represents '1' with '5500'
-5499 5500 0
c Var 'aux1329' direct represents '1' with '5501'
5499 -5500 5501 0
-5501 5500 0
-5501 -5499 0
c Var 'aux1329' order represents '2' with '5502'
-5500 5502 0
c Var 'aux1329' direct represents '2' with '5503'
5500 -5502 5503 0
-5503 5502 0
-5503 -5500 0
c Var 'aux1329' order represents '3' with '5504'
-5502 5504 0
c Var 'aux1329' direct represents '3' with '5505'
5502 -5504 5505 0
-5505 5504 0
-5505 -5502 0
c Var 'aux1329' direct represents '4' with '-5504'
5499 5501 5503 5505 -5504 0
c Encoding variable: aux1330 with domain: int(0..2) (representing constraint ((x_00008_00001=5) + (x_00008_00009=5)))
c Both direct and order encoding.
c Var 'aux1330' order represents '0' with '5506'
c Var 'aux1330' direct represents '0' with '5506'
c Var 'aux1330' order represents '1' with '5507'
-5506 5507 0
c Var 'aux1330' direct represents '1' with '5508'
5506 -5507 5508 0
-5508 5507 0
-5508 -5506 0
c Var 'aux1330' direct represents '2' with '-5507'
5506 5508 -5507 0
c Encoding variable: aux1331 with domain: int(0..2) (representing constraint ((x_00008_00008=5) + (x_00008_00002=5)))
c Both direct and order encoding.
c Var 'aux1331' order represents '0' with '5509'
c Var 'aux1331' direct represents '0' with '5509'
c Var 'aux1331' order represents '1' with '5510'
-5509 5510 0
c Var 'aux1331' direct represents '1' with '5511'
5509 -5510 5511 0
-5511 5510 0
-5511 -5509 0
c Var 'aux1331' direct represents '2' with '-5510'
5509 5511 -5510 0
c Encoding variable: aux1332 with domain: int(0..2) (representing constraint ((x_00008_00007=5) + (x_00008_00004=5)))
c Both direct and order encoding.
c Var 'aux1332' order represents '0' with '5512'
c Var 'aux1332' direct represents '0' with '5512'
c Var 'aux1332' order represents '1' with '5513'
-5512 5513 0
c Var 'aux1332' direct represents '1' with '5514'
5512 -5513 5514 0
-5514 5513 0
-5514 -5512 0
c Var 'aux1332' direct represents '2' with '-5513'
5512 5514 -5513 0
c Encoding variable: aux1333 with domain: int(0..2) (representing constraint ((x_00008_00006=5) + (x_00008_00005=5)))
c Both direct and order encoding.
c Var 'aux1333' order represents '0' with '5515'
c Var 'aux1333' direct represents '0' with '5515'
c Var 'aux1333' order represents '1' with '5516'
-5515 5516 0
c Var 'aux1333' direct represents '1' with '5517'
5515 -5516 5517 0
-5517 5516 0
-5517 -5515 0
c Var 'aux1333' direct represents '2' with '-5516'
5515 5517 -5516 0
c Encoding variable: aux1334 with domain: int(0..3) (representing constraint ((x_00008_00003=5) + aux1333))
c Both direct and order encoding.
c Var 'aux1334' order represents '0' with '5518'
c Var 'aux1334' direct represents '0' with '5518'
c Var 'aux1334' order represents '1' with '5519'
-5518 5519 0
c Var 'aux1334' direct represents '1' with '5520'
5518 -5519 5520 0
-5520 5519 0
-5520 -5518 0
c Var 'aux1334' order represents '2' with '5521'
-5519 5521 0
c Var 'aux1334' direct represents '2' with '5522'
5519 -5521 5522 0
-5522 5521 0
-5522 -5519 0
c Var 'aux1334' direct represents '3' with '-5521'
5518 5520 5522 -5521 0
c Encoding variable: aux1335 with domain: int(0..4) (representing constraint (aux1330 + aux1332))
c Both direct and order encoding.
c Var 'aux1335' order represents '0' with '5523'
c Var 'aux1335' direct represents '0' with '5523'
c Var 'aux1335' order represents '1' with '5524'
-5523 5524 0
c Var 'aux1335' direct represents '1' with '5525'
5523 -5524 5525 0
-5525 5524 0
-5525 -5523 0
c Var 'aux1335' order represents '2' with '5526'
-5524 5526 0
c Var 'aux1335' direct represents '2' with '5527'
5524 -5526 5527 0
-5527 5526 0
-5527 -5524 0
c Var 'aux1335' order represents '3' with '5528'
-5526 5528 0
c Var 'aux1335' direct represents '3' with '5529'
5526 -5528 5529 0
-5529 5528 0
-5529 -5526 0
c Var 'aux1335' direct represents '4' with '-5528'
5523 5525 5527 5529 -5528 0
c Encoding variable: aux1336 with domain: int(0..2) (representing constraint ((x_00008_00001=6) + (x_00008_00009=6)))
c Both direct and order encoding.
c Var 'aux1336' order represents '0' with '5530'
c Var 'aux1336' direct represents '0' with '5530'
c Var 'aux1336' order represents '1' with '5531'
-5530 5531 0
c Var 'aux1336' direct represents '1' with '5532'
5530 -5531 5532 0
-5532 5531 0
-5532 -5530 0
c Var 'aux1336' direct represents '2' with '-5531'
5530 5532 -5531 0
c Encoding variable: aux1337 with domain: int(0..2) (representing constraint ((x_00008_00008=6) + (x_00008_00002=6)))
c Both direct and order encoding.
c Var 'aux1337' order represents '0' with '5533'
c Var 'aux1337' direct represents '0' with '5533'
c Var 'aux1337' order represents '1' with '5534'
-5533 5534 0
c Var 'aux1337' direct represents '1' with '5535'
5533 -5534 5535 0
-5535 5534 0
-5535 -5533 0
c Var 'aux1337' direct represents '2' with '-5534'
5533 5535 -5534 0
c Encoding variable: aux1338 with domain: int(0..2) (representing constraint ((x_00008_00007=6) + (x_00008_00004=6)))
c Both direct and order encoding.
c Var 'aux1338' order represents '0' with '5536'
c Var 'aux1338' direct represents '0' with '5536'
c Var 'aux1338' order represents '1' with '5537'
-5536 5537 0
c Var 'aux1338' direct represents '1' with '5538'
5536 -5537 5538 0
-5538 5537 0
-5538 -5536 0
c Var 'aux1338' direct represents '2' with '-5537'
5536 5538 -5537 0
c Encoding variable: aux1339 with domain: int(0..2) (representing constraint ((x_00008_00006=6) + (x_00008_00005=6)))
c Both direct and order encoding.
c Var 'aux1339' order represents '0' with '5539'
c Var 'aux1339' direct represents '0' with '5539'
c Var 'aux1339' order represents '1' with '5540'
-5539 5540 0
c Var 'aux1339' direct represents '1' with '5541'
5539 -5540 5541 0
-5541 5540 0
-5541 -5539 0
c Var 'aux1339' direct represents '2' with '-5540'
5539 5541 -5540 0
c Encoding variable: aux1340 with domain: int(0..3) (representing constraint ((x_00008_00003=6) + aux1339))
c Both direct and order encoding.
c Var 'aux1340' order represents '0' with '5542'
c Var 'aux1340' direct represents '0' with '5542'
c Var 'aux1340' order represents '1' with '5543'
-5542 5543 0
c Var 'aux1340' direct represents '1' with '5544'
5542 -5543 5544 0
-5544 5543 0
-5544 -5542 0
c Var 'aux1340' order represents '2' with '5545'
-5543 5545 0
c Var 'aux1340' direct represents '2' with '5546'
5543 -5545 5546 0
-5546 5545 0
-5546 -5543 0
c Var 'aux1340' direct represents '3' with '-5545'
5542 5544 5546 -5545 0
c Encoding variable: aux1341 with domain: int(0..4) (representing constraint (aux1336 + aux1338))
c Both direct and order encoding.
c Var 'aux1341' order represents '0' with '5547'
c Var 'aux1341' direct represents '0' with '5547'
c Var 'aux1341' order represents '1' with '5548'
-5547 5548 0
c Var 'aux1341' direct represents '1' with '5549'
5547 -5548 5549 0
-5549 5548 0
-5549 -5547 0
c Var 'aux1341' order represents '2' with '5550'
-5548 5550 0
c Var 'aux1341' direct represents '2' with '5551'
5548 -5550 5551 0
-5551 5550 0
-5551 -5548 0
c Var 'aux1341' order represents '3' with '5552'
-5550 5552 0
c Var 'aux1341' direct represents '3' with '5553'
5550 -5552 5553 0
-5553 5552 0
-5553 -5550 0
c Var 'aux1341' direct represents '4' with '-5552'
5547 5549 5551 5553 -5552 0
c Encoding variable: aux1342 with domain: int(0..2) (representing constraint ((x_00008_00001=7) + (x_00008_00009=7)))
c Both direct and order encoding.
c Var 'aux1342' order represents '0' with '5554'
c Var 'aux1342' direct represents '0' with '5554'
c Var 'aux1342' order represents '1' with '5555'
-5554 5555 0
c Var 'aux1342' direct represents '1' with '5556'
5554 -5555 5556 0
-5556 5555 0
-5556 -5554 0
c Var 'aux1342' direct represents '2' with '-5555'
5554 5556 -5555 0
c Encoding variable: aux1343 with domain: int(0..2) (representing constraint ((x_00008_00008=7) + (x_00008_00002=7)))
c Both direct and order encoding.
c Var 'aux1343' order represents '0' with '5557'
c Var 'aux1343' direct represents '0' with '5557'
c Var 'aux1343' order represents '1' with '5558'
-5557 5558 0
c Var 'aux1343' direct represents '1' with '5559'
5557 -5558 5559 0
-5559 5558 0
-5559 -5557 0
c Var 'aux1343' direct represents '2' with '-5558'
5557 5559 -5558 0
c Encoding variable: aux1344 with domain: int(0..2) (representing constraint ((x_00008_00007=7) + (x_00008_00004=7)))
c Both direct and order encoding.
c Var 'aux1344' order represents '0' with '5560'
c Var 'aux1344' direct represents '0' with '5560'
c Var 'aux1344' order represents '1' with '5561'
-5560 5561 0
c Var 'aux1344' direct represents '1' with '5562'
5560 -5561 5562 0
-5562 5561 0
-5562 -5560 0
c Var 'aux1344' direct represents '2' with '-5561'
5560 5562 -5561 0
c Encoding variable: aux1345 with domain: int(0..2) (representing constraint ((x_00008_00006=7) + (x_00008_00005=7)))
c Both direct and order encoding.
c Var 'aux1345' order represents '0' with '5563'
c Var 'aux1345' direct represents '0' with '5563'
c Var 'aux1345' order represents '1' with '5564'
-5563 5564 0
c Var 'aux1345' direct represents '1' with '5565'
5563 -5564 5565 0
-5565 5564 0
-5565 -5563 0
c Var 'aux1345' direct represents '2' with '-5564'
5563 5565 -5564 0
c Encoding variable: aux1346 with domain: int(0..3) (representing constraint ((x_00008_00003=7) + aux1345))
c Both direct and order encoding.
c Var 'aux1346' order represents '0' with '5566'
c Var 'aux1346' direct represents '0' with '5566'
c Var 'aux1346' order represents '1' with '5567'
-5566 5567 0
c Var 'aux1346' direct represents '1' with '5568'
5566 -5567 5568 0
-5568 5567 0
-5568 -5566 0
c Var 'aux1346' order represents '2' with '5569'
-5567 5569 0
c Var 'aux1346' direct represents '2' with '5570'
5567 -5569 5570 0
-5570 5569 0
-5570 -5567 0
c Var 'aux1346' direct represents '3' with '-5569'
5566 5568 5570 -5569 0
c Encoding variable: aux1347 with domain: int(0..4) (representing constraint (aux1342 + aux1344))
c Both direct and order encoding.
c Var 'aux1347' order represents '0' with '5571'
c Var 'aux1347' direct represents '0' with '5571'
c Var 'aux1347' order represents '1' with '5572'
-5571 5572 0
c Var 'aux1347' direct represents '1' with '5573'
5571 -5572 5573 0
-5573 5572 0
-5573 -5571 0
c Var 'aux1347' order represents '2' with '5574'
-5572 5574 0
c Var 'aux1347' direct represents '2' with '5575'
5572 -5574 5575 0
-5575 5574 0
-5575 -5572 0
c Var 'aux1347' order represents '3' with '5576'
-5574 5576 0
c Var 'aux1347' direct represents '3' with '5577'
5574 -5576 5577 0
-5577 5576 0
-5577 -5574 0
c Var 'aux1347' direct represents '4' with '-5576'
5571 5573 5575 5577 -5576 0
c Encoding variable: aux1348 with domain: int(0..2) (representing constraint ((x_00008_00001=8) + (x_00008_00009=8)))
c Both direct and order encoding.
c Var 'aux1348' order represents '0' with '5578'
c Var 'aux1348' direct represents '0' with '5578'
c Var 'aux1348' order represents '1' with '5579'
-5578 5579 0
c Var 'aux1348' direct represents '1' with '5580'
5578 -5579 5580 0
-5580 5579 0
-5580 -5578 0
c Var 'aux1348' direct represents '2' with '-5579'
5578 5580 -5579 0
c Encoding variable: aux1349 with domain: int(0..2) (representing constraint ((x_00008_00008=8) + (x_00008_00002=8)))
c Both direct and order encoding.
c Var 'aux1349' order represents '0' with '5581'
c Var 'aux1349' direct represents '0' with '5581'
c Var 'aux1349' order represents '1' with '5582'
-5581 5582 0
c Var 'aux1349' direct represents '1' with '5583'
5581 -5582 5583 0
-5583 5582 0
-5583 -5581 0
c Var 'aux1349' direct represents '2' with '-5582'
5581 5583 -5582 0
c Encoding variable: aux1350 with domain: int(0..2) (representing constraint ((x_00008_00007=8) + (x_00008_00004=8)))
c Both direct and order encoding.
c Var 'aux1350' order represents '0' with '5584'
c Var 'aux1350' direct represents '0' with '5584'
c Var 'aux1350' order represents '1' with '5585'
-5584 5585 0
c Var 'aux1350' direct represents '1' with '5586'
5584 -5585 5586 0
-5586 5585 0
-5586 -5584 0
c Var 'aux1350' direct represents '2' with '-5585'
5584 5586 -5585 0
c Encoding variable: aux1351 with domain: int(0..2) (representing constraint ((x_00008_00006=8) + (x_00008_00005=8)))
c Both direct and order encoding.
c Var 'aux1351' order represents '0' with '5587'
c Var 'aux1351' direct represents '0' with '5587'
c Var 'aux1351' order represents '1' with '5588'
-5587 5588 0
c Var 'aux1351' direct represents '1' with '5589'
5587 -5588 5589 0
-5589 5588 0
-5589 -5587 0
c Var 'aux1351' direct represents '2' with '-5588'
5587 5589 -5588 0
c Encoding variable: aux1352 with domain: int(0..3) (representing constraint ((x_00008_00003=8) + aux1351))
c Both direct and order encoding.
c Var 'aux1352' order represents '0' with '5590'
c Var 'aux1352' direct represents '0' with '5590'
c Var 'aux1352' order represents '1' with '5591'
-5590 5591 0
c Var 'aux1352' direct represents '1' with '5592'
5590 -5591 5592 0
-5592 5591 0
-5592 -5590 0
c Var 'aux1352' order represents '2' with '5593'
-5591 5593 0
c Var 'aux1352' direct represents '2' with '5594'
5591 -5593 5594 0
-5594 5593 0
-5594 -5591 0
c Var 'aux1352' direct represents '3' with '-5593'
5590 5592 5594 -5593 0
c Encoding variable: aux1353 with domain: int(0..4) (representing constraint (aux1348 + aux1350))
c Both direct and order encoding.
c Var 'aux1353' order represents '0' with '5595'
c Var 'aux1353' direct represents '0' with '5595'
c Var 'aux1353' order represents '1' with '5596'
-5595 5596 0
c Var 'aux1353' direct represents '1' with '5597'
5595 -5596 5597 0
-5597 5596 0
-5597 -5595 0
c Var 'aux1353' order represents '2' with '5598'
-5596 5598 0
c Var 'aux1353' direct represents '2' with '5599'
5596 -5598 5599 0
-5599 5598 0
-5599 -5596 0
c Var 'aux1353' order represents '3' with '5600'
-5598 5600 0
c Var 'aux1353' direct represents '3' with '5601'
5598 -5600 5601 0
-5601 5600 0
-5601 -5598 0
c Var 'aux1353' direct represents '4' with '-5600'
5595 5597 5599 5601 -5600 0
c Encoding variable: aux1354 with domain: int(0..2) (representing constraint ((x_00008_00001=9) + (x_00008_00009=9)))
c Both direct and order encoding.
c Var 'aux1354' order represents '0' with '5602'
c Var 'aux1354' direct represents '0' with '5602'
c Var 'aux1354' order represents '1' with '5603'
-5602 5603 0
c Var 'aux1354' direct represents '1' with '5604'
5602 -5603 5604 0
-5604 5603 0
-5604 -5602 0
c Var 'aux1354' direct represents '2' with '-5603'
5602 5604 -5603 0
c Encoding variable: aux1355 with domain: int(0..2) (representing constraint ((x_00008_00008=9) + (x_00008_00002=9)))
c Both direct and order encoding.
c Var 'aux1355' order represents '0' with '5605'
c Var 'aux1355' direct represents '0' with '5605'
c Var 'aux1355' order represents '1' with '5606'
-5605 5606 0
c Var 'aux1355' direct represents '1' with '5607'
5605 -5606 5607 0
-5607 5606 0
-5607 -5605 0
c Var 'aux1355' direct represents '2' with '-5606'
5605 5607 -5606 0
c Encoding variable: aux1356 with domain: int(0..2) (representing constraint ((x_00008_00007=9) + (x_00008_00004=9)))
c Both direct and order encoding.
c Var 'aux1356' order represents '0' with '5608'
c Var 'aux1356' direct represents '0' with '5608'
c Var 'aux1356' order represents '1' with '5609'
-5608 5609 0
c Var 'aux1356' direct represents '1' with '5610'
5608 -5609 5610 0
-5610 5609 0
-5610 -5608 0
c Var 'aux1356' direct represents '2' with '-5609'
5608 5610 -5609 0
c Encoding variable: aux1357 with domain: int(0..2) (representing constraint ((x_00008_00006=9) + (x_00008_00005=9)))
c Both direct and order encoding.
c Var 'aux1357' order represents '0' with '5611'
c Var 'aux1357' direct represents '0' with '5611'
c Var 'aux1357' order represents '1' with '5612'
-5611 5612 0
c Var 'aux1357' direct represents '1' with '5613'
5611 -5612 5613 0
-5613 5612 0
-5613 -5611 0
c Var 'aux1357' direct represents '2' with '-5612'
5611 5613 -5612 0
c Encoding variable: aux1358 with domain: int(0..3) (representing constraint ((x_00008_00003=9) + aux1357))
c Both direct and order encoding.
c Var 'aux1358' order represents '0' with '5614'
c Var 'aux1358' direct represents '0' with '5614'
c Var 'aux1358' order represents '1' with '5615'
-5614 5615 0
c Var 'aux1358' direct represents '1' with '5616'
5614 -5615 5616 0
-5616 5615 0
-5616 -5614 0
c Var 'aux1358' order represents '2' with '5617'
-5615 5617 0
c Var 'aux1358' direct represents '2' with '5618'
5615 -5617 5618 0
-5618 5617 0
-5618 -5615 0
c Var 'aux1358' direct represents '3' with '-5617'
5614 5616 5618 -5617 0
c Encoding variable: aux1359 with domain: int(0..4) (representing constraint (aux1354 + aux1356))
c Both direct and order encoding.
c Var 'aux1359' order represents '0' with '5619'
c Var 'aux1359' direct represents '0' with '5619'
c Var 'aux1359' order represents '1' with '5620'
-5619 5620 0
c Var 'aux1359' direct represents '1' with '5621'
5619 -5620 5621 0
-5621 5620 0
-5621 -5619 0
c Var 'aux1359' order represents '2' with '5622'
-5620 5622 0
c Var 'aux1359' direct represents '2' with '5623'
5620 -5622 5623 0
-5623 5622 0
-5623 -5620 0
c Var 'aux1359' order represents '3' with '5624'
-5622 5624 0
c Var 'aux1359' direct represents '3' with '5625'
5622 -5624 5625 0
-5625 5624 0
-5625 -5622 0
c Var 'aux1359' direct represents '4' with '-5624'
5619 5621 5623 5625 -5624 0
c Encoding variable: aux1360 with domain: int(0..2) (representing constraint ((x_00009_00001=1) + (x_00009_00009=1)))
c Both direct and order encoding.
c Var 'aux1360' order represents '0' with '5626'
c Var 'aux1360' direct represents '0' with '5626'
c Var 'aux1360' order represents '1' with '5627'
-5626 5627 0
c Var 'aux1360' direct represents '1' with '5628'
5626 -5627 5628 0
-5628 5627 0
-5628 -5626 0
c Var 'aux1360' direct represents '2' with '-5627'
5626 5628 -5627 0
c Encoding variable: aux1361 with domain: int(0..2) (representing constraint ((x_00009_00008=1) + (x_00009_00002=1)))
c Both direct and order encoding.
c Var 'aux1361' order represents '0' with '5629'
c Var 'aux1361' direct represents '0' with '5629'
c Var 'aux1361' order represents '1' with '5630'
-5629 5630 0
c Var 'aux1361' direct represents '1' with '5631'
5629 -5630 5631 0
-5631 5630 0
-5631 -5629 0
c Var 'aux1361' direct represents '2' with '-5630'
5629 5631 -5630 0
c Encoding variable: aux1362 with domain: int(0..2) (representing constraint ((x_00009_00007=1) + (x_00009_00004=1)))
c Both direct and order encoding.
c Var 'aux1362' order represents '0' with '5632'
c Var 'aux1362' direct represents '0' with '5632'
c Var 'aux1362' order represents '1' with '5633'
-5632 5633 0
c Var 'aux1362' direct represents '1' with '5634'
5632 -5633 5634 0
-5634 5633 0
-5634 -5632 0
c Var 'aux1362' direct represents '2' with '-5633'
5632 5634 -5633 0
c Encoding variable: aux1363 with domain: int(0..2) (representing constraint ((x_00009_00006=1) + (x_00009_00005=1)))
c Both direct and order encoding.
c Var 'aux1363' order represents '0' with '5635'
c Var 'aux1363' direct represents '0' with '5635'
c Var 'aux1363' order represents '1' with '5636'
-5635 5636 0
c Var 'aux1363' direct represents '1' with '5637'
5635 -5636 5637 0
-5637 5636 0
-5637 -5635 0
c Var 'aux1363' direct represents '2' with '-5636'
5635 5637 -5636 0
c Encoding variable: aux1364 with domain: int(0..3) (representing constraint ((x_00009_00003=1) + aux1363))
c Both direct and order encoding.
c Var 'aux1364' order represents '0' with '5638'
c Var 'aux1364' direct represents '0' with '5638'
c Var 'aux1364' order represents '1' with '5639'
-5638 5639 0
c Var 'aux1364' direct represents '1' with '5640'
5638 -5639 5640 0
-5640 5639 0
-5640 -5638 0
c Var 'aux1364' order represents '2' with '5641'
-5639 5641 0
c Var 'aux1364' direct represents '2' with '5642'
5639 -5641 5642 0
-5642 5641 0
-5642 -5639 0
c Var 'aux1364' direct represents '3' with '-5641'
5638 5640 5642 -5641 0
c Encoding variable: aux1365 with domain: int(0..4) (representing constraint (aux1360 + aux1362))
c Both direct and order encoding.
c Var 'aux1365' order represents '0' with '5643'
c Var 'aux1365' direct represents '0' with '5643'
c Var 'aux1365' order represents '1' with '5644'
-5643 5644 0
c Var 'aux1365' direct represents '1' with '5645'
5643 -5644 5645 0
-5645 5644 0
-5645 -5643 0
c Var 'aux1365' order represents '2' with '5646'
-5644 5646 0
c Var 'aux1365' direct represents '2' with '5647'
5644 -5646 5647 0
-5647 5646 0
-5647 -5644 0
c Var 'aux1365' order represents '3' with '5648'
-5646 5648 0
c Var 'aux1365' direct represents '3' with '5649'
5646 -5648 5649 0
-5649 5648 0
-5649 -5646 0
c Var 'aux1365' direct represents '4' with '-5648'
5643 5645 5647 5649 -5648 0
c Encoding variable: aux1366 with domain: int(0..2) (representing constraint ((x_00009_00001=2) + (x_00009_00009=2)))
c Both direct and order encoding.
c Var 'aux1366' order represents '0' with '5650'
c Var 'aux1366' direct represents '0' with '5650'
c Var 'aux1366' order represents '1' with '5651'
-5650 5651 0
c Var 'aux1366' direct represents '1' with '5652'
5650 -5651 5652 0
-5652 5651 0
-5652 -5650 0
c Var 'aux1366' direct represents '2' with '-5651'
5650 5652 -5651 0
c Encoding variable: aux1367 with domain: int(0..2) (representing constraint ((x_00009_00008=2) + (x_00009_00002=2)))
c Both direct and order encoding.
c Var 'aux1367' order represents '0' with '5653'
c Var 'aux1367' direct represents '0' with '5653'
c Var 'aux1367' order represents '1' with '5654'
-5653 5654 0
c Var 'aux1367' direct represents '1' with '5655'
5653 -5654 5655 0
-5655 5654 0
-5655 -5653 0
c Var 'aux1367' direct represents '2' with '-5654'
5653 5655 -5654 0
c Encoding variable: aux1368 with domain: int(0..2) (representing constraint ((x_00009_00007=2) + (x_00009_00004=2)))
c Both direct and order encoding.
c Var 'aux1368' order represents '0' with '5656'
c Var 'aux1368' direct represents '0' with '5656'
c Var 'aux1368' order represents '1' with '5657'
-5656 5657 0
c Var 'aux1368' direct represents '1' with '5658'
5656 -5657 5658 0
-5658 5657 0
-5658 -5656 0
c Var 'aux1368' direct represents '2' with '-5657'
5656 5658 -5657 0
c Encoding variable: aux1369 with domain: int(0..2) (representing constraint ((x_00009_00006=2) + (x_00009_00005=2)))
c Both direct and order encoding.
c Var 'aux1369' order represents '0' with '5659'
c Var 'aux1369' direct represents '0' with '5659'
c Var 'aux1369' order represents '1' with '5660'
-5659 5660 0
c Var 'aux1369' direct represents '1' with '5661'
5659 -5660 5661 0
-5661 5660 0
-5661 -5659 0
c Var 'aux1369' direct represents '2' with '-5660'
5659 5661 -5660 0
c Encoding variable: aux1370 with domain: int(0..3) (representing constraint ((x_00009_00003=2) + aux1369))
c Both direct and order encoding.
c Var 'aux1370' order represents '0' with '5662'
c Var 'aux1370' direct represents '0' with '5662'
c Var 'aux1370' order represents '1' with '5663'
-5662 5663 0
c Var 'aux1370' direct represents '1' with '5664'
5662 -5663 5664 0
-5664 5663 0
-5664 -5662 0
c Var 'aux1370' order represents '2' with '5665'
-5663 5665 0
c Var 'aux1370' direct represents '2' with '5666'
5663 -5665 5666 0
-5666 5665 0
-5666 -5663 0
c Var 'aux1370' direct represents '3' with '-5665'
5662 5664 5666 -5665 0
c Encoding variable: aux1371 with domain: int(0..4) (representing constraint (aux1366 + aux1368))
c Both direct and order encoding.
c Var 'aux1371' order represents '0' with '5667'
c Var 'aux1371' direct represents '0' with '5667'
c Var 'aux1371' order represents '1' with '5668'
-5667 5668 0
c Var 'aux1371' direct represents '1' with '5669'
5667 -5668 5669 0
-5669 5668 0
-5669 -5667 0
c Var 'aux1371' order represents '2' with '5670'
-5668 5670 0
c Var 'aux1371' direct represents '2' with '5671'
5668 -5670 5671 0
-5671 5670 0
-5671 -5668 0
c Var 'aux1371' order represents '3' with '5672'
-5670 5672 0
c Var 'aux1371' direct represents '3' with '5673'
5670 -5672 5673 0
-5673 5672 0
-5673 -5670 0
c Var 'aux1371' direct represents '4' with '-5672'
5667 5669 5671 5673 -5672 0
c Encoding variable: aux1372 with domain: int(0..2) (representing constraint ((x_00009_00001=3) + (x_00009_00009=3)))
c Both direct and order encoding.
c Var 'aux1372' order represents '0' with '5674'
c Var 'aux1372' direct represents '0' with '5674'
c Var 'aux1372' order represents '1' with '5675'
-5674 5675 0
c Var 'aux1372' direct represents '1' with '5676'
5674 -5675 5676 0
-5676 5675 0
-5676 -5674 0
c Var 'aux1372' direct represents '2' with '-5675'
5674 5676 -5675 0
c Encoding variable: aux1373 with domain: int(0..2) (representing constraint ((x_00009_00008=3) + (x_00009_00002=3)))
c Both direct and order encoding.
c Var 'aux1373' order represents '0' with '5677'
c Var 'aux1373' direct represents '0' with '5677'
c Var 'aux1373' order represents '1' with '5678'
-5677 5678 0
c Var 'aux1373' direct represents '1' with '5679'
5677 -5678 5679 0
-5679 5678 0
-5679 -5677 0
c Var 'aux1373' direct represents '2' with '-5678'
5677 5679 -5678 0
c Encoding variable: aux1374 with domain: int(0..2) (representing constraint ((x_00009_00007=3) + (x_00009_00004=3)))
c Both direct and order encoding.
c Var 'aux1374' order represents '0' with '5680'
c Var 'aux1374' direct represents '0' with '5680'
c Var 'aux1374' order represents '1' with '5681'
-5680 5681 0
c Var 'aux1374' direct represents '1' with '5682'
5680 -5681 5682 0
-5682 5681 0
-5682 -5680 0
c Var 'aux1374' direct represents '2' with '-5681'
5680 5682 -5681 0
c Encoding variable: aux1375 with domain: int(0..2) (representing constraint ((x_00009_00006=3) + (x_00009_00005=3)))
c Both direct and order encoding.
c Var 'aux1375' order represents '0' with '5683'
c Var 'aux1375' direct represents '0' with '5683'
c Var 'aux1375' order represents '1' with '5684'
-5683 5684 0
c Var 'aux1375' direct represents '1' with '5685'
5683 -5684 5685 0
-5685 5684 0
-5685 -5683 0
c Var 'aux1375' direct represents '2' with '-5684'
5683 5685 -5684 0
c Encoding variable: aux1376 with domain: int(0..3) (representing constraint ((x_00009_00003=3) + aux1375))
c Both direct and order encoding.
c Var 'aux1376' order represents '0' with '5686'
c Var 'aux1376' direct represents '0' with '5686'
c Var 'aux1376' order represents '1' with '5687'
-5686 5687 0
c Var 'aux1376' direct represents '1' with '5688'
5686 -5687 5688 0
-5688 5687 0
-5688 -5686 0
c Var 'aux1376' order represents '2' with '5689'
-5687 5689 0
c Var 'aux1376' direct represents '2' with '5690'
5687 -5689 5690 0
-5690 5689 0
-5690 -5687 0
c Var 'aux1376' direct represents '3' with '-5689'
5686 5688 5690 -5689 0
c Encoding variable: aux1377 with domain: int(0..4) (representing constraint (aux1372 + aux1374))
c Both direct and order encoding.
c Var 'aux1377' order represents '0' with '5691'
c Var 'aux1377' direct represents '0' with '5691'
c Var 'aux1377' order represents '1' with '5692'
-5691 5692 0
c Var 'aux1377' direct represents '1' with '5693'
5691 -5692 5693 0
-5693 5692 0
-5693 -5691 0
c Var 'aux1377' order represents '2' with '5694'
-5692 5694 0
c Var 'aux1377' direct represents '2' with '5695'
5692 -5694 5695 0
-5695 5694 0
-5695 -5692 0
c Var 'aux1377' order represents '3' with '5696'
-5694 5696 0
c Var 'aux1377' direct represents '3' with '5697'
5694 -5696 5697 0
-5697 5696 0
-5697 -5694 0
c Var 'aux1377' direct represents '4' with '-5696'
5691 5693 5695 5697 -5696 0
c Encoding variable: aux1378 with domain: int(0..2) (representing constraint ((x_00009_00001=4) + (x_00009_00009=4)))
c Both direct and order encoding.
c Var 'aux1378' order represents '0' with '5698'
c Var 'aux1378' direct represents '0' with '5698'
c Var 'aux1378' order represents '1' with '5699'
-5698 5699 0
c Var 'aux1378' direct represents '1' with '5700'
5698 -5699 5700 0
-5700 5699 0
-5700 -5698 0
c Var 'aux1378' direct represents '2' with '-5699'
5698 5700 -5699 0
c Encoding variable: aux1379 with domain: int(0..2) (representing constraint ((x_00009_00008=4) + (x_00009_00002=4)))
c Both direct and order encoding.
c Var 'aux1379' order represents '0' with '5701'
c Var 'aux1379' direct represents '0' with '5701'
c Var 'aux1379' order represents '1' with '5702'
-5701 5702 0
c Var 'aux1379' direct represents '1' with '5703'
5701 -5702 5703 0
-5703 5702 0
-5703 -5701 0
c Var 'aux1379' direct represents '2' with '-5702'
5701 5703 -5702 0
c Encoding variable: aux1380 with domain: int(0..2) (representing constraint ((x_00009_00007=4) + (x_00009_00004=4)))
c Both direct and order encoding.
c Var 'aux1380' order represents '0' with '5704'
c Var 'aux1380' direct represents '0' with '5704'
c Var 'aux1380' order represents '1' with '5705'
-5704 5705 0
c Var 'aux1380' direct represents '1' with '5706'
5704 -5705 5706 0
-5706 5705 0
-5706 -5704 0
c Var 'aux1380' direct represents '2' with '-5705'
5704 5706 -5705 0
c Encoding variable: aux1381 with domain: int(0..2) (representing constraint ((x_00009_00006=4) + (x_00009_00005=4)))
c Both direct and order encoding.
c Var 'aux1381' order represents '0' with '5707'
c Var 'aux1381' direct represents '0' with '5707'
c Var 'aux1381' order represents '1' with '5708'
-5707 5708 0
c Var 'aux1381' direct represents '1' with '5709'
5707 -5708 5709 0
-5709 5708 0
-5709 -5707 0
c Var 'aux1381' direct represents '2' with '-5708'
5707 5709 -5708 0
c Encoding variable: aux1382 with domain: int(0..3) (representing constraint ((x_00009_00003=4) + aux1381))
c Both direct and order encoding.
c Var 'aux1382' order represents '0' with '5710'
c Var 'aux1382' direct represents '0' with '5710'
c Var 'aux1382' order represents '1' with '5711'
-5710 5711 0
c Var 'aux1382' direct represents '1' with '5712'
5710 -5711 5712 0
-5712 5711 0
-5712 -5710 0
c Var 'aux1382' order represents '2' with '5713'
-5711 5713 0
c Var 'aux1382' direct represents '2' with '5714'
5711 -5713 5714 0
-5714 5713 0
-5714 -5711 0
c Var 'aux1382' direct represents '3' with '-5713'
5710 5712 5714 -5713 0
c Encoding variable: aux1383 with domain: int(0..4) (representing constraint (aux1378 + aux1380))
c Both direct and order encoding.
c Var 'aux1383' order represents '0' with '5715'
c Var 'aux1383' direct represents '0' with '5715'
c Var 'aux1383' order represents '1' with '5716'
-5715 5716 0
c Var 'aux1383' direct represents '1' with '5717'
5715 -5716 5717 0
-5717 5716 0
-5717 -5715 0
c Var 'aux1383' order represents '2' with '5718'
-5716 5718 0
c Var 'aux1383' direct represents '2' with '5719'
5716 -5718 5719 0
-5719 5718 0
-5719 -5716 0
c Var 'aux1383' order represents '3' with '5720'
-5718 5720 0
c Var 'aux1383' direct represents '3' with '5721'
5718 -5720 5721 0
-5721 5720 0
-5721 -5718 0
c Var 'aux1383' direct represents '4' with '-5720'
5715 5717 5719 5721 -5720 0
c Encoding variable: aux1384 with domain: int(0..2) (representing constraint ((x_00009_00001=5) + (x_00009_00009=5)))
c Both direct and order encoding.
c Var 'aux1384' order represents '0' with '5722'
c Var 'aux1384' direct represents '0' with '5722'
c Var 'aux1384' order represents '1' with '5723'
-5722 5723 0
c Var 'aux1384' direct represents '1' with '5724'
5722 -5723 5724 0
-5724 5723 0
-5724 -5722 0
c Var 'aux1384' direct represents '2' with '-5723'
5722 5724 -5723 0
c Encoding variable: aux1385 with domain: int(0..2) (representing constraint ((x_00009_00008=5) + (x_00009_00002=5)))
c Both direct and order encoding.
c Var 'aux1385' order represents '0' with '5725'
c Var 'aux1385' direct represents '0' with '5725'
c Var 'aux1385' order represents '1' with '5726'
-5725 5726 0
c Var 'aux1385' direct represents '1' with '5727'
5725 -5726 5727 0
-5727 5726 0
-5727 -5725 0
c Var 'aux1385' direct represents '2' with '-5726'
5725 5727 -5726 0
c Encoding variable: aux1386 with domain: int(0..2) (representing constraint ((x_00009_00007=5) + (x_00009_00004=5)))
c Both direct and order encoding.
c Var 'aux1386' order represents '0' with '5728'
c Var 'aux1386' direct represents '0' with '5728'
c Var 'aux1386' order represents '1' with '5729'
-5728 5729 0
c Var 'aux1386' direct represents '1' with '5730'
5728 -5729 5730 0
-5730 5729 0
-5730 -5728 0
c Var 'aux1386' direct represents '2' with '-5729'
5728 5730 -5729 0
c Encoding variable: aux1387 with domain: int(0..2) (representing constraint ((x_00009_00006=5) + (x_00009_00005=5)))
c Both direct and order encoding.
c Var 'aux1387' order represents '0' with '5731'
c Var 'aux1387' direct represents '0' with '5731'
c Var 'aux1387' order represents '1' with '5732'
-5731 5732 0
c Var 'aux1387' direct represents '1' with '5733'
5731 -5732 5733 0
-5733 5732 0
-5733 -5731 0
c Var 'aux1387' direct represents '2' with '-5732'
5731 5733 -5732 0
c Encoding variable: aux1388 with domain: int(0..3) (representing constraint ((x_00009_00003=5) + aux1387))
c Both direct and order encoding.
c Var 'aux1388' order represents '0' with '5734'
c Var 'aux1388' direct represents '0' with '5734'
c Var 'aux1388' order represents '1' with '5735'
-5734 5735 0
c Var 'aux1388' direct represents '1' with '5736'
5734 -5735 5736 0
-5736 5735 0
-5736 -5734 0
c Var 'aux1388' order represents '2' with '5737'
-5735 5737 0
c Var 'aux1388' direct represents '2' with '5738'
5735 -5737 5738 0
-5738 5737 0
-5738 -5735 0
c Var 'aux1388' direct represents '3' with '-5737'
5734 5736 5738 -5737 0
c Encoding variable: aux1389 with domain: int(0..4) (representing constraint (aux1384 + aux1386))
c Both direct and order encoding.
c Var 'aux1389' order represents '0' with '5739'
c Var 'aux1389' direct represents '0' with '5739'
c Var 'aux1389' order represents '1' with '5740'
-5739 5740 0
c Var 'aux1389' direct represents '1' with '5741'
5739 -5740 5741 0
-5741 5740 0
-5741 -5739 0
c Var 'aux1389' order represents '2' with '5742'
-5740 5742 0
c Var 'aux1389' direct represents '2' with '5743'
5740 -5742 5743 0
-5743 5742 0
-5743 -5740 0
c Var 'aux1389' order represents '3' with '5744'
-5742 5744 0
c Var 'aux1389' direct represents '3' with '5745'
5742 -5744 5745 0
-5745 5744 0
-5745 -5742 0
c Var 'aux1389' direct represents '4' with '-5744'
5739 5741 5743 5745 -5744 0
c Encoding variable: aux1390 with domain: int(0..2) (representing constraint ((x_00009_00001=6) + (x_00009_00009=6)))
c Both direct and order encoding.
c Var 'aux1390' order represents '0' with '5746'
c Var 'aux1390' direct represents '0' with '5746'
c Var 'aux1390' order represents '1' with '5747'
-5746 5747 0
c Var 'aux1390' direct represents '1' with '5748'
5746 -5747 5748 0
-5748 5747 0
-5748 -5746 0
c Var 'aux1390' direct represents '2' with '-5747'
5746 5748 -5747 0
c Encoding variable: aux1391 with domain: int(0..2) (representing constraint ((x_00009_00008=6) + (x_00009_00002=6)))
c Both direct and order encoding.
c Var 'aux1391' order represents '0' with '5749'
c Var 'aux1391' direct represents '0' with '5749'
c Var 'aux1391' order represents '1' with '5750'
-5749 5750 0
c Var 'aux1391' direct represents '1' with '5751'
5749 -5750 5751 0
-5751 5750 0
-5751 -5749 0
c Var 'aux1391' direct represents '2' with '-5750'
5749 5751 -5750 0
c Encoding variable: aux1392 with domain: int(0..2) (representing constraint ((x_00009_00007=6) + (x_00009_00004=6)))
c Both direct and order encoding.
c Var 'aux1392' order represents '0' with '5752'
c Var 'aux1392' direct represents '0' with '5752'
c Var 'aux1392' order represents '1' with '5753'
-5752 5753 0
c Var 'aux1392' direct represents '1' with '5754'
5752 -5753 5754 0
-5754 5753 0
-5754 -5752 0
c Var 'aux1392' direct represents '2' with '-5753'
5752 5754 -5753 0
c Encoding variable: aux1393 with domain: int(0..2) (representing constraint ((x_00009_00006=6) + (x_00009_00005=6)))
c Both direct and order encoding.
c Var 'aux1393' order represents '0' with '5755'
c Var 'aux1393' direct represents '0' with '5755'
c Var 'aux1393' order represents '1' with '5756'
-5755 5756 0
c Var 'aux1393' direct represents '1' with '5757'
5755 -5756 5757 0
-5757 5756 0
-5757 -5755 0
c Var 'aux1393' direct represents '2' with '-5756'
5755 5757 -5756 0
c Encoding variable: aux1394 with domain: int(0..3) (representing constraint ((x_00009_00003=6) + aux1393))
c Both direct and order encoding.
c Var 'aux1394' order represents '0' with '5758'
c Var 'aux1394' direct represents '0' with '5758'
c Var 'aux1394' order represents '1' with '5759'
-5758 5759 0
c Var 'aux1394' direct represents '1' with '5760'
5758 -5759 5760 0
-5760 5759 0
-5760 -5758 0
c Var 'aux1394' order represents '2' with '5761'
-5759 5761 0
c Var 'aux1394' direct represents '2' with '5762'
5759 -5761 5762 0
-5762 5761 0
-5762 -5759 0
c Var 'aux1394' direct represents '3' with '-5761'
5758 5760 5762 -5761 0
c Encoding variable: aux1395 with domain: int(0..4) (representing constraint (aux1390 + aux1392))
c Both direct and order encoding.
c Var 'aux1395' order represents '0' with '5763'
c Var 'aux1395' direct represents '0' with '5763'
c Var 'aux1395' order represents '1' with '5764'
-5763 5764 0
c Var 'aux1395' direct represents '1' with '5765'
5763 -5764 5765 0
-5765 5764 0
-5765 -5763 0
c Var 'aux1395' order represents '2' with '5766'
-5764 5766 0
c Var 'aux1395' direct represents '2' with '5767'
5764 -5766 5767 0
-5767 5766 0
-5767 -5764 0
c Var 'aux1395' order represents '3' with '5768'
-5766 5768 0
c Var 'aux1395' direct represents '3' with '5769'
5766 -5768 5769 0
-5769 5768 0
-5769 -5766 0
c Var 'aux1395' direct represents '4' with '-5768'
5763 5765 5767 5769 -5768 0
c Encoding variable: aux1396 with domain: int(0..2) (representing constraint ((x_00009_00001=7) + (x_00009_00009=7)))
c Both direct and order encoding.
c Var 'aux1396' order represents '0' with '5770'
c Var 'aux1396' direct represents '0' with '5770'
c Var 'aux1396' order represents '1' with '5771'
-5770 5771 0
c Var 'aux1396' direct represents '1' with '5772'
5770 -5771 5772 0
-5772 5771 0
-5772 -5770 0
c Var 'aux1396' direct represents '2' with '-5771'
5770 5772 -5771 0
c Encoding variable: aux1397 with domain: int(0..2) (representing constraint ((x_00009_00008=7) + (x_00009_00002=7)))
c Both direct and order encoding.
c Var 'aux1397' order represents '0' with '5773'
c Var 'aux1397' direct represents '0' with '5773'
c Var 'aux1397' order represents '1' with '5774'
-5773 5774 0
c Var 'aux1397' direct represents '1' with '5775'
5773 -5774 5775 0
-5775 5774 0
-5775 -5773 0
c Var 'aux1397' direct represents '2' with '-5774'
5773 5775 -5774 0
c Encoding variable: aux1398 with domain: int(0..2) (representing constraint ((x_00009_00007=7) + (x_00009_00004=7)))
c Both direct and order encoding.
c Var 'aux1398' order represents '0' with '5776'
c Var 'aux1398' direct represents '0' with '5776'
c Var 'aux1398' order represents '1' with '5777'
-5776 5777 0
c Var 'aux1398' direct represents '1' with '5778'
5776 -5777 5778 0
-5778 5777 0
-5778 -5776 0
c Var 'aux1398' direct represents '2' with '-5777'
5776 5778 -5777 0
c Encoding variable: aux1399 with domain: int(0..2) (representing constraint ((x_00009_00006=7) + (x_00009_00005=7)))
c Both direct and order encoding.
c Var 'aux1399' order represents '0' with '5779'
c Var 'aux1399' direct represents '0' with '5779'
c Var 'aux1399' order represents '1' with '5780'
-5779 5780 0
c Var 'aux1399' direct represents '1' with '5781'
5779 -5780 5781 0
-5781 5780 0
-5781 -5779 0
c Var 'aux1399' direct represents '2' with '-5780'
5779 5781 -5780 0
c Encoding variable: aux1400 with domain: int(0..3) (representing constraint ((x_00009_00003=7) + aux1399))
c Both direct and order encoding.
c Var 'aux1400' order represents '0' with '5782'
c Var 'aux1400' direct represents '0' with '5782'
c Var 'aux1400' order represents '1' with '5783'
-5782 5783 0
c Var 'aux1400' direct represents '1' with '5784'
5782 -5783 5784 0
-5784 5783 0
-5784 -5782 0
c Var 'aux1400' order represents '2' with '5785'
-5783 5785 0
c Var 'aux1400' direct represents '2' with '5786'
5783 -5785 5786 0
-5786 5785 0
-5786 -5783 0
c Var 'aux1400' direct represents '3' with '-5785'
5782 5784 5786 -5785 0
c Encoding variable: aux1401 with domain: int(0..4) (representing constraint (aux1396 + aux1398))
c Both direct and order encoding.
c Var 'aux1401' order represents '0' with '5787'
c Var 'aux1401' direct represents '0' with '5787'
c Var 'aux1401' order represents '1' with '5788'
-5787 5788 0
c Var 'aux1401' direct represents '1' with '5789'
5787 -5788 5789 0
-5789 5788 0
-5789 -5787 0
c Var 'aux1401' order represents '2' with '5790'
-5788 5790 0
c Var 'aux1401' direct represents '2' with '5791'
5788 -5790 5791 0
-5791 5790 0
-5791 -5788 0
c Var 'aux1401' order represents '3' with '5792'
-5790 5792 0
c Var 'aux1401' direct represents '3' with '5793'
5790 -5792 5793 0
-5793 5792 0
-5793 -5790 0
c Var 'aux1401' direct represents '4' with '-5792'
5787 5789 5791 5793 -5792 0
c Encoding variable: aux1402 with domain: int(0..2) (representing constraint ((x_00009_00001=8) + (x_00009_00009=8)))
c Both direct and order encoding.
c Var 'aux1402' order represents '0' with '5794'
c Var 'aux1402' direct represents '0' with '5794'
c Var 'aux1402' order represents '1' with '5795'
-5794 5795 0
c Var 'aux1402' direct represents '1' with '5796'
5794 -5795 5796 0
-5796 5795 0
-5796 -5794 0
c Var 'aux1402' direct represents '2' with '-5795'
5794 5796 -5795 0
c Encoding variable: aux1403 with domain: int(0..2) (representing constraint ((x_00009_00008=8) + (x_00009_00002=8)))
c Both direct and order encoding.
c Var 'aux1403' order represents '0' with '5797'
c Var 'aux1403' direct represents '0' with '5797'
c Var 'aux1403' order represents '1' with '5798'
-5797 5798 0
c Var 'aux1403' direct represents '1' with '5799'
5797 -5798 5799 0
-5799 5798 0
-5799 -5797 0
c Var 'aux1403' direct represents '2' with '-5798'
5797 5799 -5798 0
c Encoding variable: aux1404 with domain: int(0..2) (representing constraint ((x_00009_00007=8) + (x_00009_00004=8)))
c Both direct and order encoding.
c Var 'aux1404' order represents '0' with '5800'
c Var 'aux1404' direct represents '0' with '5800'
c Var 'aux1404' order represents '1' with '5801'
-5800 5801 0
c Var 'aux1404' direct represents '1' with '5802'
5800 -5801 5802 0
-5802 5801 0
-5802 -5800 0
c Var 'aux1404' direct represents '2' with '-5801'
5800 5802 -5801 0
c Encoding variable: aux1405 with domain: int(0..2) (representing constraint ((x_00009_00006=8) + (x_00009_00005=8)))
c Both direct and order encoding.
c Var 'aux1405' order represents '0' with '5803'
c Var 'aux1405' direct represents '0' with '5803'
c Var 'aux1405' order represents '1' with '5804'
-5803 5804 0
c Var 'aux1405' direct represents '1' with '5805'
5803 -5804 5805 0
-5805 5804 0
-5805 -5803 0
c Var 'aux1405' direct represents '2' with '-5804'
5803 5805 -5804 0
c Encoding variable: aux1406 with domain: int(0..3) (representing constraint ((x_00009_00003=8) + aux1405))
c Both direct and order encoding.
c Var 'aux1406' order represents '0' with '5806'
c Var 'aux1406' direct represents '0' with '5806'
c Var 'aux1406' order represents '1' with '5807'
-5806 5807 0
c Var 'aux1406' direct represents '1' with '5808'
5806 -5807 5808 0
-5808 5807 0
-5808 -5806 0
c Var 'aux1406' order represents '2' with '5809'
-5807 5809 0
c Var 'aux1406' direct represents '2' with '5810'
5807 -5809 5810 0
-5810 5809 0
-5810 -5807 0
c Var 'aux1406' direct represents '3' with '-5809'
5806 5808 5810 -5809 0
c Encoding variable: aux1407 with domain: int(0..4) (representing constraint (aux1402 + aux1404))
c Both direct and order encoding.
c Var 'aux1407' order represents '0' with '5811'
c Var 'aux1407' direct represents '0' with '5811'
c Var 'aux1407' order represents '1' with '5812'
-5811 5812 0
c Var 'aux1407' direct represents '1' with '5813'
5811 -5812 5813 0
-5813 5812 0
-5813 -5811 0
c Var 'aux1407' order represents '2' with '5814'
-5812 5814 0
c Var 'aux1407' direct represents '2' with '5815'
5812 -5814 5815 0
-5815 5814 0
-5815 -5812 0
c Var 'aux1407' order represents '3' with '5816'
-5814 5816 0
c Var 'aux1407' direct represents '3' with '5817'
5814 -5816 5817 0
-5817 5816 0
-5817 -5814 0
c Var 'aux1407' direct represents '4' with '-5816'
5811 5813 5815 5817 -5816 0
c Encoding variable: aux1408 with domain: int(0..2) (representing constraint ((x_00009_00001=9) + (x_00009_00009=9)))
c Both direct and order encoding.
c Var 'aux1408' order represents '0' with '5818'
c Var 'aux1408' direct represents '0' with '5818'
c Var 'aux1408' order represents '1' with '5819'
-5818 5819 0
c Var 'aux1408' direct represents '1' with '5820'
5818 -5819 5820 0
-5820 5819 0
-5820 -5818 0
c Var 'aux1408' direct represents '2' with '-5819'
5818 5820 -5819 0
c Encoding variable: aux1409 with domain: int(0..2) (representing constraint ((x_00009_00008=9) + (x_00009_00002=9)))
c Both direct and order encoding.
c Var 'aux1409' order represents '0' with '5821'
c Var 'aux1409' direct represents '0' with '5821'
c Var 'aux1409' order represents '1' with '5822'
-5821 5822 0
c Var 'aux1409' direct represents '1' with '5823'
5821 -5822 5823 0
-5823 5822 0
-5823 -5821 0
c Var 'aux1409' direct represents '2' with '-5822'
5821 5823 -5822 0
c Encoding variable: aux1410 with domain: int(0..2) (representing constraint ((x_00009_00007=9) + (x_00009_00004=9)))
c Both direct and order encoding.
c Var 'aux1410' order represents '0' with '5824'
c Var 'aux1410' direct represents '0' with '5824'
c Var 'aux1410' order represents '1' with '5825'
-5824 5825 0
c Var 'aux1410' direct represents '1' with '5826'
5824 -5825 5826 0
-5826 5825 0
-5826 -5824 0
c Var 'aux1410' direct represents '2' with '-5825'
5824 5826 -5825 0
c Encoding variable: aux1411 with domain: int(0..2) (representing constraint ((x_00009_00006=9) + (x_00009_00005=9)))
c Both direct and order encoding.
c Var 'aux1411' order represents '0' with '5827'
c Var 'aux1411' direct represents '0' with '5827'
c Var 'aux1411' order represents '1' with '5828'
-5827 5828 0
c Var 'aux1411' direct represents '1' with '5829'
5827 -5828 5829 0
-5829 5828 0
-5829 -5827 0
c Var 'aux1411' direct represents '2' with '-5828'
5827 5829 -5828 0
c Encoding variable: aux1412 with domain: int(0..3) (representing constraint ((x_00009_00003=9) + aux1411))
c Both direct and order encoding.
c Var 'aux1412' order represents '0' with '5830'
c Var 'aux1412' direct represents '0' with '5830'
c Var 'aux1412' order represents '1' with '5831'
-5830 5831 0
c Var 'aux1412' direct represents '1' with '5832'
5830 -5831 5832 0
-5832 5831 0
-5832 -5830 0
c Var 'aux1412' order represents '2' with '5833'
-5831 5833 0
c Var 'aux1412' direct represents '2' with '5834'
5831 -5833 5834 0
-5834 5833 0
-5834 -5831 0
c Var 'aux1412' direct represents '3' with '-5833'
5830 5832 5834 -5833 0
c Encoding variable: aux1413 with domain: int(0..4) (representing constraint (aux1408 + aux1410))
c Both direct and order encoding.
c Var 'aux1413' order represents '0' with '5835'
c Var 'aux1413' direct represents '0' with '5835'
c Var 'aux1413' order represents '1' with '5836'
-5835 5836 0
c Var 'aux1413' direct represents '1' with '5837'
5835 -5836 5837 0
-5837 5836 0
-5837 -5835 0
c Var 'aux1413' order represents '2' with '5838'
-5836 5838 0
c Var 'aux1413' direct represents '2' with '5839'
5836 -5838 5839 0
-5839 5838 0
-5839 -5836 0
c Var 'aux1413' order represents '3' with '5840'
-5838 5840 0
c Var 'aux1413' direct represents '3' with '5841'
5838 -5840 5841 0
-5841 5840 0
-5841 -5838 0
c Var 'aux1413' direct represents '4' with '-5840'
5835 5837 5839 5841 -5840 0
c Encoding variable: aux1414 with domain: int(0..2) (representing constraint ((x_00003_00001=1) + (x_00002_00003=1)))
c Both direct and order encoding.
c Var 'aux1414' order represents '0' with '5842'
c Var 'aux1414' direct represents '0' with '5842'
c Var 'aux1414' order represents '1' with '5843'
-5842 5843 0
c Var 'aux1414' direct represents '1' with '5844'
5842 -5843 5844 0
-5844 5843 0
-5844 -5842 0
c Var 'aux1414' direct represents '2' with '-5843'
5842 5844 -5843 0
c Encoding variable: aux1415 with domain: int(0..2) (representing constraint ((x_00002_00002=1) + (x_00003_00002=1)))
c Both direct and order encoding.
c Var 'aux1415' order represents '0' with '5845'
c Var 'aux1415' direct represents '0' with '5845'
c Var 'aux1415' order represents '1' with '5846'
-5845 5846 0
c Var 'aux1415' direct represents '1' with '5847'
5845 -5846 5847 0
-5847 5846 0
-5847 -5845 0
c Var 'aux1415' direct represents '2' with '-5846'
5845 5847 -5846 0
c Encoding variable: aux1416 with domain: int(0..2) (representing constraint ((x_00002_00001=1) + (x_00001_00001=1)))
c Both direct and order encoding.
c Var 'aux1416' order represents '0' with '5848'
c Var 'aux1416' direct represents '0' with '5848'
c Var 'aux1416' order represents '1' with '5849'
-5848 5849 0
c Var 'aux1416' direct represents '1' with '5850'
5848 -5849 5850 0
-5850 5849 0
-5850 -5848 0
c Var 'aux1416' direct represents '2' with '-5849'
5848 5850 -5849 0
c Encoding variable: aux1417 with domain: int(0..2) (representing constraint ((x_00001_00003=1) + (x_00001_00002=1)))
c Both direct and order encoding.
c Var 'aux1417' order represents '0' with '5851'
c Var 'aux1417' direct represents '0' with '5851'
c Var 'aux1417' order represents '1' with '5852'
-5851 5852 0
c Var 'aux1417' direct represents '1' with '5853'
5851 -5852 5853 0
-5853 5852 0
-5853 -5851 0
c Var 'aux1417' direct represents '2' with '-5852'
5851 5853 -5852 0
c Encoding variable: aux1418 with domain: int(0..3) (representing constraint ((x_00003_00003=1) + aux1417))
c Both direct and order encoding.
c Var 'aux1418' order represents '0' with '5854'
c Var 'aux1418' direct represents '0' with '5854'
c Var 'aux1418' order represents '1' with '5855'
-5854 5855 0
c Var 'aux1418' direct represents '1' with '5856'
5854 -5855 5856 0
-5856 5855 0
-5856 -5854 0
c Var 'aux1418' order represents '2' with '5857'
-5855 5857 0
c Var 'aux1418' direct represents '2' with '5858'
5855 -5857 5858 0
-5858 5857 0
-5858 -5855 0
c Var 'aux1418' direct represents '3' with '-5857'
5854 5856 5858 -5857 0
c Encoding variable: aux1419 with domain: int(0..4) (representing constraint (aux1414 + aux1416))
c Both direct and order encoding.
c Var 'aux1419' order represents '0' with '5859'
c Var 'aux1419' direct represents '0' with '5859'
c Var 'aux1419' order represents '1' with '5860'
-5859 5860 0
c Var 'aux1419' direct represents '1' with '5861'
5859 -5860 5861 0
-5861 5860 0
-5861 -5859 0
c Var 'aux1419' order represents '2' with '5862'
-5860 5862 0
c Var 'aux1419' direct represents '2' with '5863'
5860 -5862 5863 0
-5863 5862 0
-5863 -5860 0
c Var 'aux1419' order represents '3' with '5864'
-5862 5864 0
c Var 'aux1419' direct represents '3' with '5865'
5862 -5864 5865 0
-5865 5864 0
-5865 -5862 0
c Var 'aux1419' direct represents '4' with '-5864'
5859 5861 5863 5865 -5864 0
c Encoding variable: aux1420 with domain: int(0..2) (representing constraint ((x_00003_00001=2) + (x_00002_00003=2)))
c Both direct and order encoding.
c Var 'aux1420' order represents '0' with '5866'
c Var 'aux1420' direct represents '0' with '5866'
c Var 'aux1420' order represents '1' with '5867'
-5866 5867 0
c Var 'aux1420' direct represents '1' with '5868'
5866 -5867 5868 0
-5868 5867 0
-5868 -5866 0
c Var 'aux1420' direct represents '2' with '-5867'
5866 5868 -5867 0
c Encoding variable: aux1421 with domain: int(0..2) (representing constraint ((x_00002_00002=2) + (x_00003_00002=2)))
c Both direct and order encoding.
c Var 'aux1421' order represents '0' with '5869'
c Var 'aux1421' direct represents '0' with '5869'
c Var 'aux1421' order represents '1' with '5870'
-5869 5870 0
c Var 'aux1421' direct represents '1' with '5871'
5869 -5870 5871 0
-5871 5870 0
-5871 -5869 0
c Var 'aux1421' direct represents '2' with '-5870'
5869 5871 -5870 0
c Encoding variable: aux1422 with domain: int(0..2) (representing constraint ((x_00002_00001=2) + (x_00001_00001=2)))
c Both direct and order encoding.
c Var 'aux1422' order represents '0' with '5872'
c Var 'aux1422' direct represents '0' with '5872'
c Var 'aux1422' order represents '1' with '5873'
-5872 5873 0
c Var 'aux1422' direct represents '1' with '5874'
5872 -5873 5874 0
-5874 5873 0
-5874 -5872 0
c Var 'aux1422' direct represents '2' with '-5873'
5872 5874 -5873 0
c Encoding variable: aux1423 with domain: int(0..2) (representing constraint ((x_00001_00003=2) + (x_00001_00002=2)))
c Both direct and order encoding.
c Var 'aux1423' order represents '0' with '5875'
c Var 'aux1423' direct represents '0' with '5875'
c Var 'aux1423' order represents '1' with '5876'
-5875 5876 0
c Var 'aux1423' direct represents '1' with '5877'
5875 -5876 5877 0
-5877 5876 0
-5877 -5875 0
c Var 'aux1423' direct represents '2' with '-5876'
5875 5877 -5876 0
c Encoding variable: aux1424 with domain: int(0..3) (representing constraint ((x_00003_00003=2) + aux1423))
c Both direct and order encoding.
c Var 'aux1424' order represents '0' with '5878'
c Var 'aux1424' direct represents '0' with '5878'
c Var 'aux1424' order represents '1' with '5879'
-5878 5879 0
c Var 'aux1424' direct represents '1' with '5880'
5878 -5879 5880 0
-5880 5879 0
-5880 -5878 0
c Var 'aux1424' order represents '2' with '5881'
-5879 5881 0
c Var 'aux1424' direct represents '2' with '5882'
5879 -5881 5882 0
-5882 5881 0
-5882 -5879 0
c Var 'aux1424' direct represents '3' with '-5881'
5878 5880 5882 -5881 0
c Encoding variable: aux1425 with domain: int(0..4) (representing constraint (aux1420 + aux1422))
c Both direct and order encoding.
c Var 'aux1425' order represents '0' with '5883'
c Var 'aux1425' direct represents '0' with '5883'
c Var 'aux1425' order represents '1' with '5884'
-5883 5884 0
c Var 'aux1425' direct represents '1' with '5885'
5883 -5884 5885 0
-5885 5884 0
-5885 -5883 0
c Var 'aux1425' order represents '2' with '5886'
-5884 5886 0
c Var 'aux1425' direct represents '2' with '5887'
5884 -5886 5887 0
-5887 5886 0
-5887 -5884 0
c Var 'aux1425' order represents '3' with '5888'
-5886 5888 0
c Var 'aux1425' direct represents '3' with '5889'
5886 -5888 5889 0
-5889 5888 0
-5889 -5886 0
c Var 'aux1425' direct represents '4' with '-5888'
5883 5885 5887 5889 -5888 0
c Encoding variable: aux1426 with domain: int(0..2) (representing constraint ((x_00003_00001=3) + (x_00002_00003=3)))
c Both direct and order encoding.
c Var 'aux1426' order represents '0' with '5890'
c Var 'aux1426' direct represents '0' with '5890'
c Var 'aux1426' order represents '1' with '5891'
-5890 5891 0
c Var 'aux1426' direct represents '1' with '5892'
5890 -5891 5892 0
-5892 5891 0
-5892 -5890 0
c Var 'aux1426' direct represents '2' with '-5891'
5890 5892 -5891 0
c Encoding variable: aux1427 with domain: int(0..2) (representing constraint ((x_00002_00002=3) + (x_00003_00002=3)))
c Both direct and order encoding.
c Var 'aux1427' order represents '0' with '5893'
c Var 'aux1427' direct represents '0' with '5893'
c Var 'aux1427' order represents '1' with '5894'
-5893 5894 0
c Var 'aux1427' direct represents '1' with '5895'
5893 -5894 5895 0
-5895 5894 0
-5895 -5893 0
c Var 'aux1427' direct represents '2' with '-5894'
5893 5895 -5894 0
c Encoding variable: aux1428 with domain: int(0..2) (representing constraint ((x_00002_00001=3) + (x_00001_00001=3)))
c Both direct and order encoding.
c Var 'aux1428' order represents '0' with '5896'
c Var 'aux1428' direct represents '0' with '5896'
c Var 'aux1428' order represents '1' with '5897'
-5896 5897 0
c Var 'aux1428' direct represents '1' with '5898'
5896 -5897 5898 0
-5898 5897 0
-5898 -5896 0
c Var 'aux1428' direct represents '2' with '-5897'
5896 5898 -5897 0
c Encoding variable: aux1429 with domain: int(0..2) (representing constraint ((x_00001_00003=3) + (x_00001_00002=3)))
c Both direct and order encoding.
c Var 'aux1429' order represents '0' with '5899'
c Var 'aux1429' direct represents '0' with '5899'
c Var 'aux1429' order represents '1' with '5900'
-5899 5900 0
c Var 'aux1429' direct represents '1' with '5901'
5899 -5900 5901 0
-5901 5900 0
-5901 -5899 0
c Var 'aux1429' direct represents '2' with '-5900'
5899 5901 -5900 0
c Encoding variable: aux1430 with domain: int(0..3) (representing constraint ((x_00003_00003=3) + aux1429))
c Both direct and order encoding.
c Var 'aux1430' order represents '0' with '5902'
c Var 'aux1430' direct represents '0' with '5902'
c Var 'aux1430' order represents '1' with '5903'
-5902 5903 0
c Var 'aux1430' direct represents '1' with '5904'
5902 -5903 5904 0
-5904 5903 0
-5904 -5902 0
c Var 'aux1430' order represents '2' with '5905'
-5903 5905 0
c Var 'aux1430' direct represents '2' with '5906'
5903 -5905 5906 0
-5906 5905 0
-5906 -5903 0
c Var 'aux1430' direct represents '3' with '-5905'
5902 5904 5906 -5905 0
c Encoding variable: aux1431 with domain: int(0..4) (representing constraint (aux1426 + aux1428))
c Both direct and order encoding.
c Var 'aux1431' order represents '0' with '5907'
c Var 'aux1431' direct represents '0' with '5907'
c Var 'aux1431' order represents '1' with '5908'
-5907 5908 0
c Var 'aux1431' direct represents '1' with '5909'
5907 -5908 5909 0
-5909 5908 0
-5909 -5907 0
c Var 'aux1431' order represents '2' with '5910'
-5908 5910 0
c Var 'aux1431' direct represents '2' with '5911'
5908 -5910 5911 0
-5911 5910 0
-5911 -5908 0
c Var 'aux1431' order represents '3' with '5912'
-5910 5912 0
c Var 'aux1431' direct represents '3' with '5913'
5910 -5912 5913 0
-5913 5912 0
-5913 -5910 0
c Var 'aux1431' direct represents '4' with '-5912'
5907 5909 5911 5913 -5912 0
c Encoding variable: aux1432 with domain: int(0..2) (representing constraint ((x_00003_00001=4) + (x_00002_00003=4)))
c Both direct and order encoding.
c Var 'aux1432' order represents '0' with '5914'
c Var 'aux1432' direct represents '0' with '5914'
c Var 'aux1432' order represents '1' with '5915'
-5914 5915 0
c Var 'aux1432' direct represents '1' with '5916'
5914 -5915 5916 0
-5916 5915 0
-5916 -5914 0
c Var 'aux1432' direct represents '2' with '-5915'
5914 5916 -5915 0
c Encoding variable: aux1433 with domain: int(0..2) (representing constraint ((x_00002_00002=4) + (x_00003_00002=4)))
c Both direct and order encoding.
c Var 'aux1433' order represents '0' with '5917'
c Var 'aux1433' direct represents '0' with '5917'
c Var 'aux1433' order represents '1' with '5918'
-5917 5918 0
c Var 'aux1433' direct represents '1' with '5919'
5917 -5918 5919 0
-5919 5918 0
-5919 -5917 0
c Var 'aux1433' direct represents '2' with '-5918'
5917 5919 -5918 0
c Encoding variable: aux1434 with domain: int(0..2) (representing constraint ((x_00002_00001=4) + (x_00001_00001=4)))
c Both direct and order encoding.
c Var 'aux1434' order represents '0' with '5920'
c Var 'aux1434' direct represents '0' with '5920'
c Var 'aux1434' order represents '1' with '5921'
-5920 5921 0
c Var 'aux1434' direct represents '1' with '5922'
5920 -5921 5922 0
-5922 5921 0
-5922 -5920 0
c Var 'aux1434' direct represents '2' with '-5921'
5920 5922 -5921 0
c Encoding variable: aux1435 with domain: int(0..2) (representing constraint ((x_00001_00003=4) + (x_00001_00002=4)))
c Both direct and order encoding.
c Var 'aux1435' order represents '0' with '5923'
c Var 'aux1435' direct represents '0' with '5923'
c Var 'aux1435' order represents '1' with '5924'
-5923 5924 0
c Var 'aux1435' direct represents '1' with '5925'
5923 -5924 5925 0
-5925 5924 0
-5925 -5923 0
c Var 'aux1435' direct represents '2' with '-5924'
5923 5925 -5924 0
c Encoding variable: aux1436 with domain: int(0..3) (representing constraint ((x_00003_00003=4) + aux1435))
c Both direct and order encoding.
c Var 'aux1436' order represents '0' with '5926'
c Var 'aux1436' direct represents '0' with '5926'
c Var 'aux1436' order represents '1' with '5927'
-5926 5927 0
c Var 'aux1436' direct represents '1' with '5928'
5926 -5927 5928 0
-5928 5927 0
-5928 -5926 0
c Var 'aux1436' order represents '2' with '5929'
-5927 5929 0
c Var 'aux1436' direct represents '2' with '5930'
5927 -5929 5930 0
-5930 5929 0
-5930 -5927 0
c Var 'aux1436' direct represents '3' with '-5929'
5926 5928 5930 -5929 0
c Encoding variable: aux1437 with domain: int(0..4) (representing constraint (aux1432 + aux1434))
c Both direct and order encoding.
c Var 'aux1437' order represents '0' with '5931'
c Var 'aux1437' direct represents '0' with '5931'
c Var 'aux1437' order represents '1' with '5932'
-5931 5932 0
c Var 'aux1437' direct represents '1' with '5933'
5931 -5932 5933 0
-5933 5932 0
-5933 -5931 0
c Var 'aux1437' order represents '2' with '5934'
-5932 5934 0
c Var 'aux1437' direct represents '2' with '5935'
5932 -5934 5935 0
-5935 5934 0
-5935 -5932 0
c Var 'aux1437' order represents '3' with '5936'
-5934 5936 0
c Var 'aux1437' direct represents '3' with '5937'
5934 -5936 5937 0
-5937 5936 0
-5937 -5934 0
c Var 'aux1437' direct represents '4' with '-5936'
5931 5933 5935 5937 -5936 0
c Encoding variable: aux1438 with domain: int(0..2) (representing constraint ((x_00003_00001=5) + (x_00002_00003=5)))
c Both direct and order encoding.
c Var 'aux1438' order represents '0' with '5938'
c Var 'aux1438' direct represents '0' with '5938'
c Var 'aux1438' order represents '1' with '5939'
-5938 5939 0
c Var 'aux1438' direct represents '1' with '5940'
5938 -5939 5940 0
-5940 5939 0
-5940 -5938 0
c Var 'aux1438' direct represents '2' with '-5939'
5938 5940 -5939 0
c Encoding variable: aux1439 with domain: int(0..2) (representing constraint ((x_00002_00002=5) + (x_00003_00002=5)))
c Both direct and order encoding.
c Var 'aux1439' order represents '0' with '5941'
c Var 'aux1439' direct represents '0' with '5941'
c Var 'aux1439' order represents '1' with '5942'
-5941 5942 0
c Var 'aux1439' direct represents '1' with '5943'
5941 -5942 5943 0
-5943 5942 0
-5943 -5941 0
c Var 'aux1439' direct represents '2' with '-5942'
5941 5943 -5942 0
c Encoding variable: aux1440 with domain: int(0..2) (representing constraint ((x_00002_00001=5) + (x_00001_00001=5)))
c Both direct and order encoding.
c Var 'aux1440' order represents '0' with '5944'
c Var 'aux1440' direct represents '0' with '5944'
c Var 'aux1440' order represents '1' with '5945'
-5944 5945 0
c Var 'aux1440' direct represents '1' with '5946'
5944 -5945 5946 0
-5946 5945 0
-5946 -5944 0
c Var 'aux1440' direct represents '2' with '-5945'
5944 5946 -5945 0
c Encoding variable: aux1441 with domain: int(0..2) (representing constraint ((x_00001_00003=5) + (x_00001_00002=5)))
c Both direct and order encoding.
c Var 'aux1441' order represents '0' with '5947'
c Var 'aux1441' direct represents '0' with '5947'
c Var 'aux1441' order represents '1' with '5948'
-5947 5948 0
c Var 'aux1441' direct represents '1' with '5949'
5947 -5948 5949 0
-5949 5948 0
-5949 -5947 0
c Var 'aux1441' direct represents '2' with '-5948'
5947 5949 -5948 0
c Encoding variable: aux1442 with domain: int(0..3) (representing constraint ((x_00003_00003=5) + aux1441))
c Both direct and order encoding.
c Var 'aux1442' order represents '0' with '5950'
c Var 'aux1442' direct represents '0' with '5950'
c Var 'aux1442' order represents '1' with '5951'
-5950 5951 0
c Var 'aux1442' direct represents '1' with '5952'
5950 -5951 5952 0
-5952 5951 0
-5952 -5950 0
c Var 'aux1442' order represents '2' with '5953'
-5951 5953 0
c Var 'aux1442' direct represents '2' with '5954'
5951 -5953 5954 0
-5954 5953 0
-5954 -5951 0
c Var 'aux1442' direct represents '3' with '-5953'
5950 5952 5954 -5953 0
c Encoding variable: aux1443 with domain: int(0..4) (representing constraint (aux1438 + aux1440))
c Both direct and order encoding.
c Var 'aux1443' order represents '0' with '5955'
c Var 'aux1443' direct represents '0' with '5955'
c Var 'aux1443' order represents '1' with '5956'
-5955 5956 0
c Var 'aux1443' direct represents '1' with '5957'
5955 -5956 5957 0
-5957 5956 0
-5957 -5955 0
c Var 'aux1443' order represents '2' with '5958'
-5956 5958 0
c Var 'aux1443' direct represents '2' with '5959'
5956 -5958 5959 0
-5959 5958 0
-5959 -5956 0
c Var 'aux1443' order represents '3' with '5960'
-5958 5960 0
c Var 'aux1443' direct represents '3' with '5961'
5958 -5960 5961 0
-5961 5960 0
-5961 -5958 0
c Var 'aux1443' direct represents '4' with '-5960'
5955 5957 5959 5961 -5960 0
c Encoding variable: aux1444 with domain: int(0..2) (representing constraint ((x_00003_00001=6) + (x_00002_00003=6)))
c Both direct and order encoding.
c Var 'aux1444' order represents '0' with '5962'
c Var 'aux1444' direct represents '0' with '5962'
c Var 'aux1444' order represents '1' with '5963'
-5962 5963 0
c Var 'aux1444' direct represents '1' with '5964'
5962 -5963 5964 0
-5964 5963 0
-5964 -5962 0
c Var 'aux1444' direct represents '2' with '-5963'
5962 5964 -5963 0
c Encoding variable: aux1445 with domain: int(0..2) (representing constraint ((x_00002_00002=6) + (x_00003_00002=6)))
c Both direct and order encoding.
c Var 'aux1445' order represents '0' with '5965'
c Var 'aux1445' direct represents '0' with '5965'
c Var 'aux1445' order represents '1' with '5966'
-5965 5966 0
c Var 'aux1445' direct represents '1' with '5967'
5965 -5966 5967 0
-5967 5966 0
-5967 -5965 0
c Var 'aux1445' direct represents '2' with '-5966'
5965 5967 -5966 0
c Encoding variable: aux1446 with domain: int(0..2) (representing constraint ((x_00002_00001=6) + (x_00001_00001=6)))
c Both direct and order encoding.
c Var 'aux1446' order represents '0' with '5968'
c Var 'aux1446' direct represents '0' with '5968'
c Var 'aux1446' order represents '1' with '5969'
-5968 5969 0
c Var 'aux1446' direct represents '1' with '5970'
5968 -5969 5970 0
-5970 5969 0
-5970 -5968 0
c Var 'aux1446' direct represents '2' with '-5969'
5968 5970 -5969 0
c Encoding variable: aux1447 with domain: int(0..2) (representing constraint ((x_00001_00003=6) + (x_00001_00002=6)))
c Both direct and order encoding.
c Var 'aux1447' order represents '0' with '5971'
c Var 'aux1447' direct represents '0' with '5971'
c Var 'aux1447' order represents '1' with '5972'
-5971 5972 0
c Var 'aux1447' direct represents '1' with '5973'
5971 -5972 5973 0
-5973 5972 0
-5973 -5971 0
c Var 'aux1447' direct represents '2' with '-5972'
5971 5973 -5972 0
c Encoding variable: aux1448 with domain: int(0..3) (representing constraint ((x_00003_00003=6) + aux1447))
c Both direct and order encoding.
c Var 'aux1448' order represents '0' with '5974'
c Var 'aux1448' direct represents '0' with '5974'
c Var 'aux1448' order represents '1' with '5975'
-5974 5975 0
c Var 'aux1448' direct represents '1' with '5976'
5974 -5975 5976 0
-5976 5975 0
-5976 -5974 0
c Var 'aux1448' order represents '2' with '5977'
-5975 5977 0
c Var 'aux1448' direct represents '2' with '5978'
5975 -5977 5978 0
-5978 5977 0
-5978 -5975 0
c Var 'aux1448' direct represents '3' with '-5977'
5974 5976 5978 -5977 0
c Encoding variable: aux1449 with domain: int(0..4) (representing constraint (aux1444 + aux1446))
c Both direct and order encoding.
c Var 'aux1449' order represents '0' with '5979'
c Var 'aux1449' direct represents '0' with '5979'
c Var 'aux1449' order represents '1' with '5980'
-5979 5980 0
c Var 'aux1449' direct represents '1' with '5981'
5979 -5980 5981 0
-5981 5980 0
-5981 -5979 0
c Var 'aux1449' order represents '2' with '5982'
-5980 5982 0
c Var 'aux1449' direct represents '2' with '5983'
5980 -5982 5983 0
-5983 5982 0
-5983 -5980 0
c Var 'aux1449' order represents '3' with '5984'
-5982 5984 0
c Var 'aux1449' direct represents '3' with '5985'
5982 -5984 5985 0
-5985 5984 0
-5985 -5982 0
c Var 'aux1449' direct represents '4' with '-5984'
5979 5981 5983 5985 -5984 0
c Encoding variable: aux1450 with domain: int(0..2) (representing constraint ((x_00003_00001=7) + (x_00002_00003=7)))
c Both direct and order encoding.
c Var 'aux1450' order represents '0' with '5986'
c Var 'aux1450' direct represents '0' with '5986'
c Var 'aux1450' order represents '1' with '5987'
-5986 5987 0
c Var 'aux1450' direct represents '1' with '5988'
5986 -5987 5988 0
-5988 5987 0
-5988 -5986 0
c Var 'aux1450' direct represents '2' with '-5987'
5986 5988 -5987 0
c Encoding variable: aux1451 with domain: int(0..2) (representing constraint ((x_00002_00002=7) + (x_00003_00002=7)))
c Both direct and order encoding.
c Var 'aux1451' order represents '0' with '5989'
c Var 'aux1451' direct represents '0' with '5989'
c Var 'aux1451' order represents '1' with '5990'
-5989 5990 0
c Var 'aux1451' direct represents '1' with '5991'
5989 -5990 5991 0
-5991 5990 0
-5991 -5989 0
c Var 'aux1451' direct represents '2' with '-5990'
5989 5991 -5990 0
c Encoding variable: aux1452 with domain: int(0..2) (representing constraint ((x_00002_00001=7) + (x_00001_00001=7)))
c Both direct and order encoding.
c Var 'aux1452' order represents '0' with '5992'
c Var 'aux1452' direct represents '0' with '5992'
c Var 'aux1452' order represents '1' with '5993'
-5992 5993 0
c Var 'aux1452' direct represents '1' with '5994'
5992 -5993 5994 0
-5994 5993 0
-5994 -5992 0
c Var 'aux1452' direct represents '2' with '-5993'
5992 5994 -5993 0
c Encoding variable: aux1453 with domain: int(0..2) (representing constraint ((x_00001_00003=7) + (x_00001_00002=7)))
c Both direct and order encoding.
c Var 'aux1453' order represents '0' with '5995'
c Var 'aux1453' direct represents '0' with '5995'
c Var 'aux1453' order represents '1' with '5996'
-5995 5996 0
c Var 'aux1453' direct represents '1' with '5997'
5995 -5996 5997 0
-5997 5996 0
-5997 -5995 0
c Var 'aux1453' direct represents '2' with '-5996'
5995 5997 -5996 0
c Encoding variable: aux1454 with domain: int(0..3) (representing constraint ((x_00003_00003=7) + aux1453))
c Both direct and order encoding.
c Var 'aux1454' order represents '0' with '5998'
c Var 'aux1454' direct represents '0' with '5998'
c Var 'aux1454' order represents '1' with '5999'
-5998 5999 0
c Var 'aux1454' direct represents '1' with '6000'
5998 -5999 6000 0
-6000 5999 0
-6000 -5998 0
c Var 'aux1454' order represents '2' with '6001'
-5999 6001 0
c Var 'aux1454' direct represents '2' with '6002'
5999 -6001 6002 0
-6002 6001 0
-6002 -5999 0
c Var 'aux1454' direct represents '3' with '-6001'
5998 6000 6002 -6001 0
c Encoding variable: aux1455 with domain: int(0..4) (representing constraint (aux1450 + aux1452))
c Both direct and order encoding.
c Var 'aux1455' order represents '0' with '6003'
c Var 'aux1455' direct represents '0' with '6003'
c Var 'aux1455' order represents '1' with '6004'
-6003 6004 0
c Var 'aux1455' direct represents '1' with '6005'
6003 -6004 6005 0
-6005 6004 0
-6005 -6003 0
c Var 'aux1455' order represents '2' with '6006'
-6004 6006 0
c Var 'aux1455' direct represents '2' with '6007'
6004 -6006 6007 0
-6007 6006 0
-6007 -6004 0
c Var 'aux1455' order represents '3' with '6008'
-6006 6008 0
c Var 'aux1455' direct represents '3' with '6009'
6006 -6008 6009 0
-6009 6008 0
-6009 -6006 0
c Var 'aux1455' direct represents '4' with '-6008'
6003 6005 6007 6009 -6008 0
c Encoding variable: aux1456 with domain: int(0..2) (representing constraint ((x_00003_00001=8) + (x_00002_00003=8)))
c Both direct and order encoding.
c Var 'aux1456' order represents '0' with '6010'
c Var 'aux1456' direct represents '0' with '6010'
c Var 'aux1456' order represents '1' with '6011'
-6010 6011 0
c Var 'aux1456' direct represents '1' with '6012'
6010 -6011 6012 0
-6012 6011 0
-6012 -6010 0
c Var 'aux1456' direct represents '2' with '-6011'
6010 6012 -6011 0
c Encoding variable: aux1457 with domain: int(0..2) (representing constraint ((x_00002_00002=8) + (x_00003_00002=8)))
c Both direct and order encoding.
c Var 'aux1457' order represents '0' with '6013'
c Var 'aux1457' direct represents '0' with '6013'
c Var 'aux1457' order represents '1' with '6014'
-6013 6014 0
c Var 'aux1457' direct represents '1' with '6015'
6013 -6014 6015 0
-6015 6014 0
-6015 -6013 0
c Var 'aux1457' direct represents '2' with '-6014'
6013 6015 -6014 0
c Encoding variable: aux1458 with domain: int(0..2) (representing constraint ((x_00002_00001=8) + (x_00001_00001=8)))
c Both direct and order encoding.
c Var 'aux1458' order represents '0' with '6016'
c Var 'aux1458' direct represents '0' with '6016'
c Var 'aux1458' order represents '1' with '6017'
-6016 6017 0
c Var 'aux1458' direct represents '1' with '6018'
6016 -6017 6018 0
-6018 6017 0
-6018 -6016 0
c Var 'aux1458' direct represents '2' with '-6017'
6016 6018 -6017 0
c Encoding variable: aux1459 with domain: int(0..2) (representing constraint ((x_00001_00003=8) + (x_00001_00002=8)))
c Both direct and order encoding.
c Var 'aux1459' order represents '0' with '6019'
c Var 'aux1459' direct represents '0' with '6019'
c Var 'aux1459' order represents '1' with '6020'
-6019 6020 0
c Var 'aux1459' direct represents '1' with '6021'
6019 -6020 6021 0
-6021 6020 0
-6021 -6019 0
c Var 'aux1459' direct represents '2' with '-6020'
6019 6021 -6020 0
c Encoding variable: aux1460 with domain: int(0..3) (representing constraint ((x_00003_00003=8) + aux1459))
c Both direct and order encoding.
c Var 'aux1460' order represents '0' with '6022'
c Var 'aux1460' direct represents '0' with '6022'
c Var 'aux1460' order represents '1' with '6023'
-6022 6023 0
c Var 'aux1460' direct represents '1' with '6024'
6022 -6023 6024 0
-6024 6023 0
-6024 -6022 0
c Var 'aux1460' order represents '2' with '6025'
-6023 6025 0
c Var 'aux1460' direct represents '2' with '6026'
6023 -6025 6026 0
-6026 6025 0
-6026 -6023 0
c Var 'aux1460' direct represents '3' with '-6025'
6022 6024 6026 -6025 0
c Encoding variable: aux1461 with domain: int(0..4) (representing constraint (aux1456 + aux1458))
c Both direct and order encoding.
c Var 'aux1461' order represents '0' with '6027'
c Var 'aux1461' direct represents '0' with '6027'
c Var 'aux1461' order represents '1' with '6028'
-6027 6028 0
c Var 'aux1461' direct represents '1' with '6029'
6027 -6028 6029 0
-6029 6028 0
-6029 -6027 0
c Var 'aux1461' order represents '2' with '6030'
-6028 6030 0
c Var 'aux1461' direct represents '2' with '6031'
6028 -6030 6031 0
-6031 6030 0
-6031 -6028 0
c Var 'aux1461' order represents '3' with '6032'
-6030 6032 0
c Var 'aux1461' direct represents '3' with '6033'
6030 -6032 6033 0
-6033 6032 0
-6033 -6030 0
c Var 'aux1461' direct represents '4' with '-6032'
6027 6029 6031 6033 -6032 0
c Encoding variable: aux1462 with domain: int(0..2) (representing constraint ((x_00003_00001=9) + (x_00002_00003=9)))
c Both direct and order encoding.
c Var 'aux1462' order represents '0' with '6034'
c Var 'aux1462' direct represents '0' with '6034'
c Var 'aux1462' order represents '1' with '6035'
-6034 6035 0
c Var 'aux1462' direct represents '1' with '6036'
6034 -6035 6036 0
-6036 6035 0
-6036 -6034 0
c Var 'aux1462' direct represents '2' with '-6035'
6034 6036 -6035 0
c Encoding variable: aux1463 with domain: int(0..2) (representing constraint ((x_00002_00002=9) + (x_00003_00002=9)))
c Both direct and order encoding.
c Var 'aux1463' order represents '0' with '6037'
c Var 'aux1463' direct represents '0' with '6037'
c Var 'aux1463' order represents '1' with '6038'
-6037 6038 0
c Var 'aux1463' direct represents '1' with '6039'
6037 -6038 6039 0
-6039 6038 0
-6039 -6037 0
c Var 'aux1463' direct represents '2' with '-6038'
6037 6039 -6038 0
c Encoding variable: aux1464 with domain: int(0..2) (representing constraint ((x_00002_00001=9) + (x_00001_00001=9)))
c Both direct and order encoding.
c Var 'aux1464' order represents '0' with '6040'
c Var 'aux1464' direct represents '0' with '6040'
c Var 'aux1464' order represents '1' with '6041'
-6040 6041 0
c Var 'aux1464' direct represents '1' with '6042'
6040 -6041 6042 0
-6042 6041 0
-6042 -6040 0
c Var 'aux1464' direct represents '2' with '-6041'
6040 6042 -6041 0
c Encoding variable: aux1465 with domain: int(0..2) (representing constraint ((x_00001_00003=9) + (x_00001_00002=9)))
c Both direct and order encoding.
c Var 'aux1465' order represents '0' with '6043'
c Var 'aux1465' direct represents '0' with '6043'
c Var 'aux1465' order represents '1' with '6044'
-6043 6044 0
c Var 'aux1465' direct represents '1' with '6045'
6043 -6044 6045 0
-6045 6044 0
-6045 -6043 0
c Var 'aux1465' direct represents '2' with '-6044'
6043 6045 -6044 0
c Encoding variable: aux1466 with domain: int(0..3) (representing constraint ((x_00003_00003=9) + aux1465))
c Both direct and order encoding.
c Var 'aux1466' order represents '0' with '6046'
c Var 'aux1466' direct represents '0' with '6046'
c Var 'aux1466' order represents '1' with '6047'
-6046 6047 0
c Var 'aux1466' direct represents '1' with '6048'
6046 -6047 6048 0
-6048 6047 0
-6048 -6046 0
c Var 'aux1466' order represents '2' with '6049'
-6047 6049 0
c Var 'aux1466' direct represents '2' with '6050'
6047 -6049 6050 0
-6050 6049 0
-6050 -6047 0
c Var 'aux1466' direct represents '3' with '-6049'
6046 6048 6050 -6049 0
c Encoding variable: aux1467 with domain: int(0..4) (representing constraint (aux1462 + aux1464))
c Both direct and order encoding.
c Var 'aux1467' order represents '0' with '6051'
c Var 'aux1467' direct represents '0' with '6051'
c Var 'aux1467' order represents '1' with '6052'
-6051 6052 0
c Var 'aux1467' direct represents '1' with '6053'
6051 -6052 6053 0
-6053 6052 0
-6053 -6051 0
c Var 'aux1467' order represents '2' with '6054'
-6052 6054 0
c Var 'aux1467' direct represents '2' with '6055'
6052 -6054 6055 0
-6055 6054 0
-6055 -6052 0
c Var 'aux1467' order represents '3' with '6056'
-6054 6056 0
c Var 'aux1467' direct represents '3' with '6057'
6054 -6056 6057 0
-6057 6056 0
-6057 -6054 0
c Var 'aux1467' direct represents '4' with '-6056'
6051 6053 6055 6057 -6056 0
c Encoding variable: aux1468 with domain: int(0..2) (representing constraint ((x_00003_00004=1) + (x_00002_00006=1)))
c Both direct and order encoding.
c Var 'aux1468' order represents '0' with '6058'
c Var 'aux1468' direct represents '0' with '6058'
c Var 'aux1468' order represents '1' with '6059'
-6058 6059 0
c Var 'aux1468' direct represents '1' with '6060'
6058 -6059 6060 0
-6060 6059 0
-6060 -6058 0
c Var 'aux1468' direct represents '2' with '-6059'
6058 6060 -6059 0
c Encoding variable: aux1469 with domain: int(0..2) (representing constraint ((x_00002_00005=1) + (x_00003_00005=1)))
c Both direct and order encoding.
c Var 'aux1469' order represents '0' with '6061'
c Var 'aux1469' direct represents '0' with '6061'
c Var 'aux1469' order represents '1' with '6062'
-6061 6062 0
c Var 'aux1469' direct represents '1' with '6063'
6061 -6062 6063 0
-6063 6062 0
-6063 -6061 0
c Var 'aux1469' direct represents '2' with '-6062'
6061 6063 -6062 0
c Encoding variable: aux1470 with domain: int(0..2) (representing constraint ((x_00002_00004=1) + (x_00001_00004=1)))
c Both direct and order encoding.
c Var 'aux1470' order represents '0' with '6064'
c Var 'aux1470' direct represents '0' with '6064'
c Var 'aux1470' order represents '1' with '6065'
-6064 6065 0
c Var 'aux1470' direct represents '1' with '6066'
6064 -6065 6066 0
-6066 6065 0
-6066 -6064 0
c Var 'aux1470' direct represents '2' with '-6065'
6064 6066 -6065 0
c Encoding variable: aux1471 with domain: int(0..2) (representing constraint ((x_00001_00006=1) + (x_00001_00005=1)))
c Both direct and order encoding.
c Var 'aux1471' order represents '0' with '6067'
c Var 'aux1471' direct represents '0' with '6067'
c Var 'aux1471' order represents '1' with '6068'
-6067 6068 0
c Var 'aux1471' direct represents '1' with '6069'
6067 -6068 6069 0
-6069 6068 0
-6069 -6067 0
c Var 'aux1471' direct represents '2' with '-6068'
6067 6069 -6068 0
c Encoding variable: aux1472 with domain: int(0..3) (representing constraint ((x_00003_00006=1) + aux1471))
c Both direct and order encoding.
c Var 'aux1472' order represents '0' with '6070'
c Var 'aux1472' direct represents '0' with '6070'
c Var 'aux1472' order represents '1' with '6071'
-6070 6071 0
c Var 'aux1472' direct represents '1' with '6072'
6070 -6071 6072 0
-6072 6071 0
-6072 -6070 0
c Var 'aux1472' order represents '2' with '6073'
-6071 6073 0
c Var 'aux1472' direct represents '2' with '6074'
6071 -6073 6074 0
-6074 6073 0
-6074 -6071 0
c Var 'aux1472' direct represents '3' with '-6073'
6070 6072 6074 -6073 0
c Encoding variable: aux1473 with domain: int(0..4) (representing constraint (aux1468 + aux1470))
c Both direct and order encoding.
c Var 'aux1473' order represents '0' with '6075'
c Var 'aux1473' direct represents '0' with '6075'
c Var 'aux1473' order represents '1' with '6076'
-6075 6076 0
c Var 'aux1473' direct represents '1' with '6077'
6075 -6076 6077 0
-6077 6076 0
-6077 -6075 0
c Var 'aux1473' order represents '2' with '6078'
-6076 6078 0
c Var 'aux1473' direct represents '2' with '6079'
6076 -6078 6079 0
-6079 6078 0
-6079 -6076 0
c Var 'aux1473' order represents '3' with '6080'
-6078 6080 0
c Var 'aux1473' direct represents '3' with '6081'
6078 -6080 6081 0
-6081 6080 0
-6081 -6078 0
c Var 'aux1473' direct represents '4' with '-6080'
6075 6077 6079 6081 -6080 0
c Encoding variable: aux1474 with domain: int(0..2) (representing constraint ((x_00003_00004=2) + (x_00002_00006=2)))
c Both direct and order encoding.
c Var 'aux1474' order represents '0' with '6082'
c Var 'aux1474' direct represents '0' with '6082'
c Var 'aux1474' order represents '1' with '6083'
-6082 6083 0
c Var 'aux1474' direct represents '1' with '6084'
6082 -6083 6084 0
-6084 6083 0
-6084 -6082 0
c Var 'aux1474' direct represents '2' with '-6083'
6082 6084 -6083 0
c Encoding variable: aux1475 with domain: int(0..2) (representing constraint ((x_00002_00005=2) + (x_00003_00005=2)))
c Both direct and order encoding.
c Var 'aux1475' order represents '0' with '6085'
c Var 'aux1475' direct represents '0' with '6085'
c Var 'aux1475' order represents '1' with '6086'
-6085 6086 0
c Var 'aux1475' direct represents '1' with '6087'
6085 -6086 6087 0
-6087 6086 0
-6087 -6085 0
c Var 'aux1475' direct represents '2' with '-6086'
6085 6087 -6086 0
c Encoding variable: aux1476 with domain: int(0..2) (representing constraint ((x_00002_00004=2) + (x_00001_00004=2)))
c Both direct and order encoding.
c Var 'aux1476' order represents '0' with '6088'
c Var 'aux1476' direct represents '0' with '6088'
c Var 'aux1476' order represents '1' with '6089'
-6088 6089 0
c Var 'aux1476' direct represents '1' with '6090'
6088 -6089 6090 0
-6090 6089 0
-6090 -6088 0
c Var 'aux1476' direct represents '2' with '-6089'
6088 6090 -6089 0
c Encoding variable: aux1477 with domain: int(0..2) (representing constraint ((x_00001_00006=2) + (x_00001_00005=2)))
c Both direct and order encoding.
c Var 'aux1477' order represents '0' with '6091'
c Var 'aux1477' direct represents '0' with '6091'
c Var 'aux1477' order represents '1' with '6092'
-6091 6092 0
c Var 'aux1477' direct represents '1' with '6093'
6091 -6092 6093 0
-6093 6092 0
-6093 -6091 0
c Var 'aux1477' direct represents '2' with '-6092'
6091 6093 -6092 0
c Encoding variable: aux1478 with domain: int(0..3) (representing constraint ((x_00003_00006=2) + aux1477))
c Both direct and order encoding.
c Var 'aux1478' order represents '0' with '6094'
c Var 'aux1478' direct represents '0' with '6094'
c Var 'aux1478' order represents '1' with '6095'
-6094 6095 0
c Var 'aux1478' direct represents '1' with '6096'
6094 -6095 6096 0
-6096 6095 0
-6096 -6094 0
c Var 'aux1478' order represents '2' with '6097'
-6095 6097 0
c Var 'aux1478' direct represents '2' with '6098'
6095 -6097 6098 0
-6098 6097 0
-6098 -6095 0
c Var 'aux1478' direct represents '3' with '-6097'
6094 6096 6098 -6097 0
c Encoding variable: aux1479 with domain: int(0..4) (representing constraint (aux1474 + aux1476))
c Both direct and order encoding.
c Var 'aux1479' order represents '0' with '6099'
c Var 'aux1479' direct represents '0' with '6099'
c Var 'aux1479' order represents '1' with '6100'
-6099 6100 0
c Var 'aux1479' direct represents '1' with '6101'
6099 -6100 6101 0
-6101 6100 0
-6101 -6099 0
c Var 'aux1479' order represents '2' with '6102'
-6100 6102 0
c Var 'aux1479' direct represents '2' with '6103'
6100 -6102 6103 0
-6103 6102 0
-6103 -6100 0
c Var 'aux1479' order represents '3' with '6104'
-6102 6104 0
c Var 'aux1479' direct represents '3' with '6105'
6102 -6104 6105 0
-6105 6104 0
-6105 -6102 0
c Var 'aux1479' direct represents '4' with '-6104'
6099 6101 6103 6105 -6104 0
c Encoding variable: aux1480 with domain: int(0..2) (representing constraint ((x_00003_00004=3) + (x_00002_00006=3)))
c Both direct and order encoding.
c Var 'aux1480' order represents '0' with '6106'
c Var 'aux1480' direct represents '0' with '6106'
c Var 'aux1480' order represents '1' with '6107'
-6106 6107 0
c Var 'aux1480' direct represents '1' with '6108'
6106 -6107 6108 0
-6108 6107 0
-6108 -6106 0
c Var 'aux1480' direct represents '2' with '-6107'
6106 6108 -6107 0
c Encoding variable: aux1481 with domain: int(0..2) (representing constraint ((x_00002_00005=3) + (x_00003_00005=3)))
c Both direct and order encoding.
c Var 'aux1481' order represents '0' with '6109'
c Var 'aux1481' direct represents '0' with '6109'
c Var 'aux1481' order represents '1' with '6110'
-6109 6110 0
c Var 'aux1481' direct represents '1' with '6111'
6109 -6110 6111 0
-6111 6110 0
-6111 -6109 0
c Var 'aux1481' direct represents '2' with '-6110'
6109 6111 -6110 0
c Encoding variable: aux1482 with domain: int(0..2) (representing constraint ((x_00002_00004=3) + (x_00001_00004=3)))
c Both direct and order encoding.
c Var 'aux1482' order represents '0' with '6112'
c Var 'aux1482' direct represents '0' with '6112'
c Var 'aux1482' order represents '1' with '6113'
-6112 6113 0
c Var 'aux1482' direct represents '1' with '6114'
6112 -6113 6114 0
-6114 6113 0
-6114 -6112 0
c Var 'aux1482' direct represents '2' with '-6113'
6112 6114 -6113 0
c Encoding variable: aux1483 with domain: int(0..2) (representing constraint ((x_00001_00006=3) + (x_00001_00005=3)))
c Both direct and order encoding.
c Var 'aux1483' order represents '0' with '6115'
c Var 'aux1483' direct represents '0' with '6115'
c Var 'aux1483' order represents '1' with '6116'
-6115 6116 0
c Var 'aux1483' direct represents '1' with '6117'
6115 -6116 6117 0
-6117 6116 0
-6117 -6115 0
c Var 'aux1483' direct represents '2' with '-6116'
6115 6117 -6116 0
c Encoding variable: aux1484 with domain: int(0..3) (representing constraint ((x_00003_00006=3) + aux1483))
c Both direct and order encoding.
c Var 'aux1484' order represents '0' with '6118'
c Var 'aux1484' direct represents '0' with '6118'
c Var 'aux1484' order represents '1' with '6119'
-6118 6119 0
c Var 'aux1484' direct represents '1' with '6120'
6118 -6119 6120 0
-6120 6119 0
-6120 -6118 0
c Var 'aux1484' order represents '2' with '6121'
-6119 6121 0
c Var 'aux1484' direct represents '2' with '6122'
6119 -6121 6122 0
-6122 6121 0
-6122 -6119 0
c Var 'aux1484' direct represents '3' with '-6121'
6118 6120 6122 -6121 0
c Encoding variable: aux1485 with domain: int(0..4) (representing constraint (aux1480 + aux1482))
c Both direct and order encoding.
c Var 'aux1485' order represents '0' with '6123'
c Var 'aux1485' direct represents '0' with '6123'
c Var 'aux1485' order represents '1' with '6124'
-6123 6124 0
c Var 'aux1485' direct represents '1' with '6125'
6123 -6124 6125 0
-6125 6124 0
-6125 -6123 0
c Var 'aux1485' order represents '2' with '6126'
-6124 6126 0
c Var 'aux1485' direct represents '2' with '6127'
6124 -6126 6127 0
-6127 6126 0
-6127 -6124 0
c Var 'aux1485' order represents '3' with '6128'
-6126 6128 0
c Var 'aux1485' direct represents '3' with '6129'
6126 -6128 6129 0
-6129 6128 0
-6129 -6126 0
c Var 'aux1485' direct represents '4' with '-6128'
6123 6125 6127 6129 -6128 0
c Encoding variable: aux1486 with domain: int(0..2) (representing constraint ((x_00003_00004=4) + (x_00002_00006=4)))
c Both direct and order encoding.
c Var 'aux1486' order represents '0' with '6130'
c Var 'aux1486' direct represents '0' with '6130'
c Var 'aux1486' order represents '1' with '6131'
-6130 6131 0
c Var 'aux1486' direct represents '1' with '6132'
6130 -6131 6132 0
-6132 6131 0
-6132 -6130 0
c Var 'aux1486' direct represents '2' with '-6131'
6130 6132 -6131 0
c Encoding variable: aux1487 with domain: int(0..2) (representing constraint ((x_00002_00005=4) + (x_00003_00005=4)))
c Both direct and order encoding.
c Var 'aux1487' order represents '0' with '6133'
c Var 'aux1487' direct represents '0' with '6133'
c Var 'aux1487' order represents '1' with '6134'
-6133 6134 0
c Var 'aux1487' direct represents '1' with '6135'
6133 -6134 6135 0
-6135 6134 0
-6135 -6133 0
c Var 'aux1487' direct represents '2' with '-6134'
6133 6135 -6134 0
c Encoding variable: aux1488 with domain: int(0..2) (representing constraint ((x_00002_00004=4) + (x_00001_00004=4)))
c Both direct and order encoding.
c Var 'aux1488' order represents '0' with '6136'
c Var 'aux1488' direct represents '0' with '6136'
c Var 'aux1488' order represents '1' with '6137'
-6136 6137 0
c Var 'aux1488' direct represents '1' with '6138'
6136 -6137 6138 0
-6138 6137 0
-6138 -6136 0
c Var 'aux1488' direct represents '2' with '-6137'
6136 6138 -6137 0
c Encoding variable: aux1489 with domain: int(0..2) (representing constraint ((x_00001_00006=4) + (x_00001_00005=4)))
c Both direct and order encoding.
c Var 'aux1489' order represents '0' with '6139'
c Var 'aux1489' direct represents '0' with '6139'
c Var 'aux1489' order represents '1' with '6140'
-6139 6140 0
c Var 'aux1489' direct represents '1' with '6141'
6139 -6140 6141 0
-6141 6140 0
-6141 -6139 0
c Var 'aux1489' direct represents '2' with '-6140'
6139 6141 -6140 0
c Encoding variable: aux1490 with domain: int(0..3) (representing constraint ((x_00003_00006=4) + aux1489))
c Both direct and order encoding.
c Var 'aux1490' order represents '0' with '6142'
c Var 'aux1490' direct represents '0' with '6142'
c Var 'aux1490' order represents '1' with '6143'
-6142 6143 0
c Var 'aux1490' direct represents '1' with '6144'
6142 -6143 6144 0
-6144 6143 0
-6144 -6142 0
c Var 'aux1490' order represents '2' with '6145'
-6143 6145 0
c Var 'aux1490' direct represents '2' with '6146'
6143 -6145 6146 0
-6146 6145 0
-6146 -6143 0
c Var 'aux1490' direct represents '3' with '-6145'
6142 6144 6146 -6145 0
c Encoding variable: aux1491 with domain: int(0..4) (representing constraint (aux1486 + aux1488))
c Both direct and order encoding.
c Var 'aux1491' order represents '0' with '6147'
c Var 'aux1491' direct represents '0' with '6147'
c Var 'aux1491' order represents '1' with '6148'
-6147 6148 0
c Var 'aux1491' direct represents '1' with '6149'
6147 -6148 6149 0
-6149 6148 0
-6149 -6147 0
c Var 'aux1491' order represents '2' with '6150'
-6148 6150 0
c Var 'aux1491' direct represents '2' with '6151'
6148 -6150 6151 0
-6151 6150 0
-6151 -6148 0
c Var 'aux1491' order represents '3' with '6152'
-6150 6152 0
c Var 'aux1491' direct represents '3' with '6153'
6150 -6152 6153 0
-6153 6152 0
-6153 -6150 0
c Var 'aux1491' direct represents '4' with '-6152'
6147 6149 6151 6153 -6152 0
c Encoding variable: aux1492 with domain: int(0..2) (representing constraint ((x_00003_00004=5) + (x_00002_00006=5)))
c Both direct and order encoding.
c Var 'aux1492' order represents '0' with '6154'
c Var 'aux1492' direct represents '0' with '6154'
c Var 'aux1492' order represents '1' with '6155'
-6154 6155 0
c Var 'aux1492' direct represents '1' with '6156'
6154 -6155 6156 0
-6156 6155 0
-6156 -6154 0
c Var 'aux1492' direct represents '2' with '-6155'
6154 6156 -6155 0
c Encoding variable: aux1493 with domain: int(0..2) (representing constraint ((x_00002_00005=5) + (x_00003_00005=5)))
c Both direct and order encoding.
c Var 'aux1493' order represents '0' with '6157'
c Var 'aux1493' direct represents '0' with '6157'
c Var 'aux1493' order represents '1' with '6158'
-6157 6158 0
c Var 'aux1493' direct represents '1' with '6159'
6157 -6158 6159 0
-6159 6158 0
-6159 -6157 0
c Var 'aux1493' direct represents '2' with '-6158'
6157 6159 -6158 0
c Encoding variable: aux1494 with domain: int(0..2) (representing constraint ((x_00002_00004=5) + (x_00001_00004=5)))
c Both direct and order encoding.
c Var 'aux1494' order represents '0' with '6160'
c Var 'aux1494' direct represents '0' with '6160'
c Var 'aux1494' order represents '1' with '6161'
-6160 6161 0
c Var 'aux1494' direct represents '1' with '6162'
6160 -6161 6162 0
-6162 6161 0
-6162 -6160 0
c Var 'aux1494' direct represents '2' with '-6161'
6160 6162 -6161 0
c Encoding variable: aux1495 with domain: int(0..2) (representing constraint ((x_00001_00006=5) + (x_00001_00005=5)))
c Both direct and order encoding.
c Var 'aux1495' order represents '0' with '6163'
c Var 'aux1495' direct represents '0' with '6163'
c Var 'aux1495' order represents '1' with '6164'
-6163 6164 0
c Var 'aux1495' direct represents '1' with '6165'
6163 -6164 6165 0
-6165 6164 0
-6165 -6163 0
c Var 'aux1495' direct represents '2' with '-6164'
6163 6165 -6164 0
c Encoding variable: aux1496 with domain: int(0..3) (representing constraint ((x_00003_00006=5) + aux1495))
c Both direct and order encoding.
c Var 'aux1496' order represents '0' with '6166'
c Var 'aux1496' direct represents '0' with '6166'
c Var 'aux1496' order represents '1' with '6167'
-6166 6167 0
c Var 'aux1496' direct represents '1' with '6168'
6166 -6167 6168 0
-6168 6167 0
-6168 -6166 0
c Var 'aux1496' order represents '2' with '6169'
-6167 6169 0
c Var 'aux1496' direct represents '2' with '6170'
6167 -6169 6170 0
-6170 6169 0
-6170 -6167 0
c Var 'aux1496' direct represents '3' with '-6169'
6166 6168 6170 -6169 0
c Encoding variable: aux1497 with domain: int(0..4) (representing constraint (aux1492 + aux1494))
c Both direct and order encoding.
c Var 'aux1497' order represents '0' with '6171'
c Var 'aux1497' direct represents '0' with '6171'
c Var 'aux1497' order represents '1' with '6172'
-6171 6172 0
c Var 'aux1497' direct represents '1' with '6173'
6171 -6172 6173 0
-6173 6172 0
-6173 -6171 0
c Var 'aux1497' order represents '2' with '6174'
-6172 6174 0
c Var 'aux1497' direct represents '2' with '6175'
6172 -6174 6175 0
-6175 6174 0
-6175 -6172 0
c Var 'aux1497' order represents '3' with '6176'
-6174 6176 0
c Var 'aux1497' direct represents '3' with '6177'
6174 -6176 6177 0
-6177 6176 0
-6177 -6174 0
c Var 'aux1497' direct represents '4' with '-6176'
6171 6173 6175 6177 -6176 0
c Encoding variable: aux1498 with domain: int(0..2) (representing constraint ((x_00003_00004=6) + (x_00002_00006=6)))
c Both direct and order encoding.
c Var 'aux1498' order represents '0' with '6178'
c Var 'aux1498' direct represents '0' with '6178'
c Var 'aux1498' order represents '1' with '6179'
-6178 6179 0
c Var 'aux1498' direct represents '1' with '6180'
6178 -6179 6180 0
-6180 6179 0
-6180 -6178 0
c Var 'aux1498' direct represents '2' with '-6179'
6178 6180 -6179 0
c Encoding variable: aux1499 with domain: int(0..2) (representing constraint ((x_00002_00005=6) + (x_00003_00005=6)))
c Both direct and order encoding.
c Var 'aux1499' order represents '0' with '6181'
c Var 'aux1499' direct represents '0' with '6181'
c Var 'aux1499' order represents '1' with '6182'
-6181 6182 0
c Var 'aux1499' direct represents '1' with '6183'
6181 -6182 6183 0
-6183 6182 0
-6183 -6181 0
c Var 'aux1499' direct represents '2' with '-6182'
6181 6183 -6182 0
c Encoding variable: aux1500 with domain: int(0..2) (representing constraint ((x_00002_00004=6) + (x_00001_00004=6)))
c Both direct and order encoding.
c Var 'aux1500' order represents '0' with '6184'
c Var 'aux1500' direct represents '0' with '6184'
c Var 'aux1500' order represents '1' with '6185'
-6184 6185 0
c Var 'aux1500' direct represents '1' with '6186'
6184 -6185 6186 0
-6186 6185 0
-6186 -6184 0
c Var 'aux1500' direct represents '2' with '-6185'
6184 6186 -6185 0
c Encoding variable: aux1501 with domain: int(0..2) (representing constraint ((x_00001_00006=6) + (x_00001_00005=6)))
c Both direct and order encoding.
c Var 'aux1501' order represents '0' with '6187'
c Var 'aux1501' direct represents '0' with '6187'
c Var 'aux1501' order represents '1' with '6188'
-6187 6188 0
c Var 'aux1501' direct represents '1' with '6189'
6187 -6188 6189 0
-6189 6188 0
-6189 -6187 0
c Var 'aux1501' direct represents '2' with '-6188'
6187 6189 -6188 0
c Encoding variable: aux1502 with domain: int(0..3) (representing constraint ((x_00003_00006=6) + aux1501))
c Both direct and order encoding.
c Var 'aux1502' order represents '0' with '6190'
c Var 'aux1502' direct represents '0' with '6190'
c Var 'aux1502' order represents '1' with '6191'
-6190 6191 0
c Var 'aux1502' direct represents '1' with '6192'
6190 -6191 6192 0
-6192 6191 0
-6192 -6190 0
c Var 'aux1502' order represents '2' with '6193'
-6191 6193 0
c Var 'aux1502' direct represents '2' with '6194'
6191 -6193 6194 0
-6194 6193 0
-6194 -6191 0
c Var 'aux1502' direct represents '3' with '-6193'
6190 6192 6194 -6193 0
c Encoding variable: aux1503 with domain: int(0..4) (representing constraint (aux1498 + aux1500))
c Both direct and order encoding.
c Var 'aux1503' order represents '0' with '6195'
c Var 'aux1503' direct represents '0' with '6195'
c Var 'aux1503' order represents '1' with '6196'
-6195 6196 0
c Var 'aux1503' direct represents '1' with '6197'
6195 -6196 6197 0
-6197 6196 0
-6197 -6195 0
c Var 'aux1503' order represents '2' with '6198'
-6196 6198 0
c Var 'aux1503' direct represents '2' with '6199'
6196 -6198 6199 0
-6199 6198 0
-6199 -6196 0
c Var 'aux1503' order represents '3' with '6200'
-6198 6200 0
c Var 'aux1503' direct represents '3' with '6201'
6198 -6200 6201 0
-6201 6200 0
-6201 -6198 0
c Var 'aux1503' direct represents '4' with '-6200'
6195 6197 6199 6201 -6200 0
c Encoding variable: aux1504 with domain: int(0..2) (representing constraint ((x_00003_00004=7) + (x_00002_00006=7)))
c Both direct and order encoding.
c Var 'aux1504' order represents '0' with '6202'
c Var 'aux1504' direct represents '0' with '6202'
c Var 'aux1504' order represents '1' with '6203'
-6202 6203 0
c Var 'aux1504' direct represents '1' with '6204'
6202 -6203 6204 0
-6204 6203 0
-6204 -6202 0
c Var 'aux1504' direct represents '2' with '-6203'
6202 6204 -6203 0
c Encoding variable: aux1505 with domain: int(0..2) (representing constraint ((x_00002_00005=7) + (x_00003_00005=7)))
c Both direct and order encoding.
c Var 'aux1505' order represents '0' with '6205'
c Var 'aux1505' direct represents '0' with '6205'
c Var 'aux1505' order represents '1' with '6206'
-6205 6206 0
c Var 'aux1505' direct represents '1' with '6207'
6205 -6206 6207 0
-6207 6206 0
-6207 -6205 0
c Var 'aux1505' direct represents '2' with '-6206'
6205 6207 -6206 0
c Encoding variable: aux1506 with domain: int(0..2) (representing constraint ((x_00002_00004=7) + (x_00001_00004=7)))
c Both direct and order encoding.
c Var 'aux1506' order represents '0' with '6208'
c Var 'aux1506' direct represents '0' with '6208'
c Var 'aux1506' order represents '1' with '6209'
-6208 6209 0
c Var 'aux1506' direct represents '1' with '6210'
6208 -6209 6210 0
-6210 6209 0
-6210 -6208 0
c Var 'aux1506' direct represents '2' with '-6209'
6208 6210 -6209 0
c Encoding variable: aux1507 with domain: int(0..2) (representing constraint ((x_00001_00006=7) + (x_00001_00005=7)))
c Both direct and order encoding.
c Var 'aux1507' order represents '0' with '6211'
c Var 'aux1507' direct represents '0' with '6211'
c Var 'aux1507' order represents '1' with '6212'
-6211 6212 0
c Var 'aux1507' direct represents '1' with '6213'
6211 -6212 6213 0
-6213 6212 0
-6213 -6211 0
c Var 'aux1507' direct represents '2' with '-6212'
6211 6213 -6212 0
c Encoding variable: aux1508 with domain: int(0..3) (representing constraint ((x_00003_00006=7) + aux1507))
c Both direct and order encoding.
c Var 'aux1508' order represents '0' with '6214'
c Var 'aux1508' direct represents '0' with '6214'
c Var 'aux1508' order represents '1' with '6215'
-6214 6215 0
c Var 'aux1508' direct represents '1' with '6216'
6214 -6215 6216 0
-6216 6215 0
-6216 -6214 0
c Var 'aux1508' order represents '2' with '6217'
-6215 6217 0
c Var 'aux1508' direct represents '2' with '6218'
6215 -6217 6218 0
-6218 6217 0
-6218 -6215 0
c Var 'aux1508' direct represents '3' with '-6217'
6214 6216 6218 -6217 0
c Encoding variable: aux1509 with domain: int(0..4) (representing constraint (aux1504 + aux1506))
c Both direct and order encoding.
c Var 'aux1509' order represents '0' with '6219'
c Var 'aux1509' direct represents '0' with '6219'
c Var 'aux1509' order represents '1' with '6220'
-6219 6220 0
c Var 'aux1509' direct represents '1' with '6221'
6219 -6220 6221 0
-6221 6220 0
-6221 -6219 0
c Var 'aux1509' order represents '2' with '6222'
-6220 6222 0
c Var 'aux1509' direct represents '2' with '6223'
6220 -6222 6223 0
-6223 6222 0
-6223 -6220 0
c Var 'aux1509' order represents '3' with '6224'
-6222 6224 0
c Var 'aux1509' direct represents '3' with '6225'
6222 -6224 6225 0
-6225 6224 0
-6225 -6222 0
c Var 'aux1509' direct represents '4' with '-6224'
6219 6221 6223 6225 -6224 0
c Encoding variable: aux1510 with domain: int(0..2) (representing constraint ((x_00003_00004=8) + (x_00002_00006=8)))
c Both direct and order encoding.
c Var 'aux1510' order represents '0' with '6226'
c Var 'aux1510' direct represents '0' with '6226'
c Var 'aux1510' order represents '1' with '6227'
-6226 6227 0
c Var 'aux1510' direct represents '1' with '6228'
6226 -6227 6228 0
-6228 6227 0
-6228 -6226 0
c Var 'aux1510' direct represents '2' with '-6227'
6226 6228 -6227 0
c Encoding variable: aux1511 with domain: int(0..2) (representing constraint ((x_00002_00005=8) + (x_00003_00005=8)))
c Both direct and order encoding.
c Var 'aux1511' order represents '0' with '6229'
c Var 'aux1511' direct represents '0' with '6229'
c Var 'aux1511' order represents '1' with '6230'
-6229 6230 0
c Var 'aux1511' direct represents '1' with '6231'
6229 -6230 6231 0
-6231 6230 0
-6231 -6229 0
c Var 'aux1511' direct represents '2' with '-6230'
6229 6231 -6230 0
c Encoding variable: aux1512 with domain: int(0..2) (representing constraint ((x_00002_00004=8) + (x_00001_00004=8)))
c Both direct and order encoding.
c Var 'aux1512' order represents '0' with '6232'
c Var 'aux1512' direct represents '0' with '6232'
c Var 'aux1512' order represents '1' with '6233'
-6232 6233 0
c Var 'aux1512' direct represents '1' with '6234'
6232 -6233 6234 0
-6234 6233 0
-6234 -6232 0
c Var 'aux1512' direct represents '2' with '-6233'
6232 6234 -6233 0
c Encoding variable: aux1513 with domain: int(0..2) (representing constraint ((x_00001_00006=8) + (x_00001_00005=8)))
c Both direct and order encoding.
c Var 'aux1513' order represents '0' with '6235'
c Var 'aux1513' direct represents '0' with '6235'
c Var 'aux1513' order represents '1' with '6236'
-6235 6236 0
c Var 'aux1513' direct represents '1' with '6237'
6235 -6236 6237 0
-6237 6236 0
-6237 -6235 0
c Var 'aux1513' direct represents '2' with '-6236'
6235 6237 -6236 0
c Encoding variable: aux1514 with domain: int(0..3) (representing constraint ((x_00003_00006=8) + aux1513))
c Both direct and order encoding.
c Var 'aux1514' order represents '0' with '6238'
c Var 'aux1514' direct represents '0' with '6238'
c Var 'aux1514' order represents '1' with '6239'
-6238 6239 0
c Var 'aux1514' direct represents '1' with '6240'
6238 -6239 6240 0
-6240 6239 0
-6240 -6238 0
c Var 'aux1514' order represents '2' with '6241'
-6239 6241 0
c Var 'aux1514' direct represents '2' with '6242'
6239 -6241 6242 0
-6242 6241 0
-6242 -6239 0
c Var 'aux1514' direct represents '3' with '-6241'
6238 6240 6242 -6241 0
c Encoding variable: aux1515 with domain: int(0..4) (representing constraint (aux1510 + aux1512))
c Both direct and order encoding.
c Var 'aux1515' order represents '0' with '6243'
c Var 'aux1515' direct represents '0' with '6243'
c Var 'aux1515' order represents '1' with '6244'
-6243 6244 0
c Var 'aux1515' direct represents '1' with '6245'
6243 -6244 6245 0
-6245 6244 0
-6245 -6243 0
c Var 'aux1515' order represents '2' with '6246'
-6244 6246 0
c Var 'aux1515' direct represents '2' with '6247'
6244 -6246 6247 0
-6247 6246 0
-6247 -6244 0
c Var 'aux1515' order represents '3' with '6248'
-6246 6248 0
c Var 'aux1515' direct represents '3' with '6249'
6246 -6248 6249 0
-6249 6248 0
-6249 -6246 0
c Var 'aux1515' direct represents '4' with '-6248'
6243 6245 6247 6249 -6248 0
c Encoding variable: aux1516 with domain: int(0..2) (representing constraint ((x_00003_00004=9) + (x_00002_00006=9)))
c Both direct and order encoding.
c Var 'aux1516' order represents '0' with '6250'
c Var 'aux1516' direct represents '0' with '6250'
c Var 'aux1516' order represents '1' with '6251'
-6250 6251 0
c Var 'aux1516' direct represents '1' with '6252'
6250 -6251 6252 0
-6252 6251 0
-6252 -6250 0
c Var 'aux1516' direct represents '2' with '-6251'
6250 6252 -6251 0
c Encoding variable: aux1517 with domain: int(0..2) (representing constraint ((x_00002_00005=9) + (x_00003_00005=9)))
c Both direct and order encoding.
c Var 'aux1517' order represents '0' with '6253'
c Var 'aux1517' direct represents '0' with '6253'
c Var 'aux1517' order represents '1' with '6254'
-6253 6254 0
c Var 'aux1517' direct represents '1' with '6255'
6253 -6254 6255 0
-6255 6254 0
-6255 -6253 0
c Var 'aux1517' direct represents '2' with '-6254'
6253 6255 -6254 0
c Encoding variable: aux1518 with domain: int(0..2) (representing constraint ((x_00002_00004=9) + (x_00001_00004=9)))
c Both direct and order encoding.
c Var 'aux1518' order represents '0' with '6256'
c Var 'aux1518' direct represents '0' with '6256'
c Var 'aux1518' order represents '1' with '6257'
-6256 6257 0
c Var 'aux1518' direct represents '1' with '6258'
6256 -6257 6258 0
-6258 6257 0
-6258 -6256 0
c Var 'aux1518' direct represents '2' with '-6257'
6256 6258 -6257 0
c Encoding variable: aux1519 with domain: int(0..2) (representing constraint ((x_00001_00006=9) + (x_00001_00005=9)))
c Both direct and order encoding.
c Var 'aux1519' order represents '0' with '6259'
c Var 'aux1519' direct represents '0' with '6259'
c Var 'aux1519' order represents '1' with '6260'
-6259 6260 0
c Var 'aux1519' direct represents '1' with '6261'
6259 -6260 6261 0
-6261 6260 0
-6261 -6259 0
c Var 'aux1519' direct represents '2' with '-6260'
6259 6261 -6260 0
c Encoding variable: aux1520 with domain: int(0..3) (representing constraint ((x_00003_00006=9) + aux1519))
c Both direct and order encoding.
c Var 'aux1520' order represents '0' with '6262'
c Var 'aux1520' direct represents '0' with '6262'
c Var 'aux1520' order represents '1' with '6263'
-6262 6263 0
c Var 'aux1520' direct represents '1' with '6264'
6262 -6263 6264 0
-6264 6263 0
-6264 -6262 0
c Var 'aux1520' order represents '2' with '6265'
-6263 6265 0
c Var 'aux1520' direct represents '2' with '6266'
6263 -6265 6266 0
-6266 6265 0
-6266 -6263 0
c Var 'aux1520' direct represents '3' with '-6265'
6262 6264 6266 -6265 0
c Encoding variable: aux1521 with domain: int(0..4) (representing constraint (aux1516 + aux1518))
c Both direct and order encoding.
c Var 'aux1521' order represents '0' with '6267'
c Var 'aux1521' direct represents '0' with '6267'
c Var 'aux1521' order represents '1' with '6268'
-6267 6268 0
c Var 'aux1521' direct represents '1' with '6269'
6267 -6268 6269 0
-6269 6268 0
-6269 -6267 0
c Var 'aux1521' order represents '2' with '6270'
-6268 6270 0
c Var 'aux1521' direct represents '2' with '6271'
6268 -6270 6271 0
-6271 6270 0
-6271 -6268 0
c Var 'aux1521' order represents '3' with '6272'
-6270 6272 0
c Var 'aux1521' direct represents '3' with '6273'
6270 -6272 6273 0
-6273 6272 0
-6273 -6270 0
c Var 'aux1521' direct represents '4' with '-6272'
6267 6269 6271 6273 -6272 0
c Encoding variable: aux1522 with domain: int(0..2) (representing constraint ((x_00003_00007=1) + (x_00002_00009=1)))
c Both direct and order encoding.
c Var 'aux1522' order represents '0' with '6274'
c Var 'aux1522' direct represents '0' with '6274'
c Var 'aux1522' order represents '1' with '6275'
-6274 6275 0
c Var 'aux1522' direct represents '1' with '6276'
6274 -6275 6276 0
-6276 6275 0
-6276 -6274 0
c Var 'aux1522' direct represents '2' with '-6275'
6274 6276 -6275 0
c Encoding variable: aux1523 with domain: int(0..2) (representing constraint ((x_00002_00008=1) + (x_00003_00008=1)))
c Both direct and order encoding.
c Var 'aux1523' order represents '0' with '6277'
c Var 'aux1523' direct represents '0' with '6277'
c Var 'aux1523' order represents '1' with '6278'
-6277 6278 0
c Var 'aux1523' direct represents '1' with '6279'
6277 -6278 6279 0
-6279 6278 0
-6279 -6277 0
c Var 'aux1523' direct represents '2' with '-6278'
6277 6279 -6278 0
c Encoding variable: aux1524 with domain: int(0..2) (representing constraint ((x_00002_00007=1) + (x_00001_00007=1)))
c Both direct and order encoding.
c Var 'aux1524' order represents '0' with '6280'
c Var 'aux1524' direct represents '0' with '6280'
c Var 'aux1524' order represents '1' with '6281'
-6280 6281 0
c Var 'aux1524' direct represents '1' with '6282'
6280 -6281 6282 0
-6282 6281 0
-6282 -6280 0
c Var 'aux1524' direct represents '2' with '-6281'
6280 6282 -6281 0
c Encoding variable: aux1525 with domain: int(0..2) (representing constraint ((x_00001_00009=1) + (x_00001_00008=1)))
c Both direct and order encoding.
c Var 'aux1525' order represents '0' with '6283'
c Var 'aux1525' direct represents '0' with '6283'
c Var 'aux1525' order represents '1' with '6284'
-6283 6284 0
c Var 'aux1525' direct represents '1' with '6285'
6283 -6284 6285 0
-6285 6284 0
-6285 -6283 0
c Var 'aux1525' direct represents '2' with '-6284'
6283 6285 -6284 0
c Encoding variable: aux1526 with domain: int(0..3) (representing constraint ((x_00003_00009=1) + aux1525))
c Both direct and order encoding.
c Var 'aux1526' order represents '0' with '6286'
c Var 'aux1526' direct represents '0' with '6286'
c Var 'aux1526' order represents '1' with '6287'
-6286 6287 0
c Var 'aux1526' direct represents '1' with '6288'
6286 -6287 6288 0
-6288 6287 0
-6288 -6286 0
c Var 'aux1526' order represents '2' with '6289'
-6287 6289 0
c Var 'aux1526' direct represents '2' with '6290'
6287 -6289 6290 0
-6290 6289 0
-6290 -6287 0
c Var 'aux1526' direct represents '3' with '-6289'
6286 6288 6290 -6289 0
c Encoding variable: aux1527 with domain: int(0..4) (representing constraint (aux1522 + aux1524))
c Both direct and order encoding.
c Var 'aux1527' order represents '0' with '6291'
c Var 'aux1527' direct represents '0' with '6291'
c Var 'aux1527' order represents '1' with '6292'
-6291 6292 0
c Var 'aux1527' direct represents '1' with '6293'
6291 -6292 6293 0
-6293 6292 0
-6293 -6291 0
c Var 'aux1527' order represents '2' with '6294'
-6292 6294 0
c Var 'aux1527' direct represents '2' with '6295'
6292 -6294 6295 0
-6295 6294 0
-6295 -6292 0
c Var 'aux1527' order represents '3' with '6296'
-6294 6296 0
c Var 'aux1527' direct represents '3' with '6297'
6294 -6296 6297 0
-6297 6296 0
-6297 -6294 0
c Var 'aux1527' direct represents '4' with '-6296'
6291 6293 6295 6297 -6296 0
c Encoding variable: aux1528 with domain: int(0..2) (representing constraint ((x_00003_00007=2) + (x_00002_00009=2)))
c Both direct and order encoding.
c Var 'aux1528' order represents '0' with '6298'
c Var 'aux1528' direct represents '0' with '6298'
c Var 'aux1528' order represents '1' with '6299'
-6298 6299 0
c Var 'aux1528' direct represents '1' with '6300'
6298 -6299 6300 0
-6300 6299 0
-6300 -6298 0
c Var 'aux1528' direct represents '2' with '-6299'
6298 6300 -6299 0
c Encoding variable: aux1529 with domain: int(0..2) (representing constraint ((x_00002_00008=2) + (x_00003_00008=2)))
c Both direct and order encoding.
c Var 'aux1529' order represents '0' with '6301'
c Var 'aux1529' direct represents '0' with '6301'
c Var 'aux1529' order represents '1' with '6302'
-6301 6302 0
c Var 'aux1529' direct represents '1' with '6303'
6301 -6302 6303 0
-6303 6302 0
-6303 -6301 0
c Var 'aux1529' direct represents '2' with '-6302'
6301 6303 -6302 0
c Encoding variable: aux1530 with domain: int(0..2) (representing constraint ((x_00002_00007=2) + (x_00001_00007=2)))
c Both direct and order encoding.
c Var 'aux1530' order represents '0' with '6304'
c Var 'aux1530' direct represents '0' with '6304'
c Var 'aux1530' order represents '1' with '6305'
-6304 6305 0
c Var 'aux1530' direct represents '1' with '6306'
6304 -6305 6306 0
-6306 6305 0
-6306 -6304 0
c Var 'aux1530' direct represents '2' with '-6305'
6304 6306 -6305 0
c Encoding variable: aux1531 with domain: int(0..2) (representing constraint ((x_00001_00009=2) + (x_00001_00008=2)))
c Both direct and order encoding.
c Var 'aux1531' order represents '0' with '6307'
c Var 'aux1531' direct represents '0' with '6307'
c Var 'aux1531' order represents '1' with '6308'
-6307 6308 0
c Var 'aux1531' direct represents '1' with '6309'
6307 -6308 6309 0
-6309 6308 0
-6309 -6307 0
c Var 'aux1531' direct represents '2' with '-6308'
6307 6309 -6308 0
c Encoding variable: aux1532 with domain: int(0..3) (representing constraint ((x_00003_00009=2) + aux1531))
c Both direct and order encoding.
c Var 'aux1532' order represents '0' with '6310'
c Var 'aux1532' direct represents '0' with '6310'
c Var 'aux1532' order represents '1' with '6311'
-6310 6311 0
c Var 'aux1532' direct represents '1' with '6312'
6310 -6311 6312 0
-6312 6311 0
-6312 -6310 0
c Var 'aux1532' order represents '2' with '6313'
-6311 6313 0
c Var 'aux1532' direct represents '2' with '6314'
6311 -6313 6314 0
-6314 6313 0
-6314 -6311 0
c Var 'aux1532' direct represents '3' with '-6313'
6310 6312 6314 -6313 0
c Encoding variable: aux1533 with domain: int(0..4) (representing constraint (aux1528 + aux1530))
c Both direct and order encoding.
c Var 'aux1533' order represents '0' with '6315'
c Var 'aux1533' direct represents '0' with '6315'
c Var 'aux1533' order represents '1' with '6316'
-6315 6316 0
c Var 'aux1533' direct represents '1' with '6317'
6315 -6316 6317 0
-6317 6316 0
-6317 -6315 0
c Var 'aux1533' order represents '2' with '6318'
-6316 6318 0
c Var 'aux1533' direct represents '2' with '6319'
6316 -6318 6319 0
-6319 6318 0
-6319 -6316 0
c Var 'aux1533' order represents '3' with '6320'
-6318 6320 0
c Var 'aux1533' direct represents '3' with '6321'
6318 -6320 6321 0
-6321 6320 0
-6321 -6318 0
c Var 'aux1533' direct represents '4' with '-6320'
6315 6317 6319 6321 -6320 0
c Encoding variable: aux1534 with domain: int(0..2) (representing constraint ((x_00003_00007=3) + (x_00002_00009=3)))
c Both direct and order encoding.
c Var 'aux1534' order represents '0' with '6322'
c Var 'aux1534' direct represents '0' with '6322'
c Var 'aux1534' order represents '1' with '6323'
-6322 6323 0
c Var 'aux1534' direct represents '1' with '6324'
6322 -6323 6324 0
-6324 6323 0
-6324 -6322 0
c Var 'aux1534' direct represents '2' with '-6323'
6322 6324 -6323 0
c Encoding variable: aux1535 with domain: int(0..2) (representing constraint ((x_00002_00008=3) + (x_00003_00008=3)))
c Both direct and order encoding.
c Var 'aux1535' order represents '0' with '6325'
c Var 'aux1535' direct represents '0' with '6325'
c Var 'aux1535' order represents '1' with '6326'
-6325 6326 0
c Var 'aux1535' direct represents '1' with '6327'
6325 -6326 6327 0
-6327 6326 0
-6327 -6325 0
c Var 'aux1535' direct represents '2' with '-6326'
6325 6327 -6326 0
c Encoding variable: aux1536 with domain: int(0..2) (representing constraint ((x_00002_00007=3) + (x_00001_00007=3)))
c Both direct and order encoding.
c Var 'aux1536' order represents '0' with '6328'
c Var 'aux1536' direct represents '0' with '6328'
c Var 'aux1536' order represents '1' with '6329'
-6328 6329 0
c Var 'aux1536' direct represents '1' with '6330'
6328 -6329 6330 0
-6330 6329 0
-6330 -6328 0
c Var 'aux1536' direct represents '2' with '-6329'
6328 6330 -6329 0
c Encoding variable: aux1537 with domain: int(0..2) (representing constraint ((x_00001_00009=3) + (x_00001_00008=3)))
c Both direct and order encoding.
c Var 'aux1537' order represents '0' with '6331'
c Var 'aux1537' direct represents '0' with '6331'
c Var 'aux1537' order represents '1' with '6332'
-6331 6332 0
c Var 'aux1537' direct represents '1' with '6333'
6331 -6332 6333 0
-6333 6332 0
-6333 -6331 0
c Var 'aux1537' direct represents '2' with '-6332'
6331 6333 -6332 0
c Encoding variable: aux1538 with domain: int(0..3) (representing constraint ((x_00003_00009=3) + aux1537))
c Both direct and order encoding.
c Var 'aux1538' order represents '0' with '6334'
c Var 'aux1538' direct represents '0' with '6334'
c Var 'aux1538' order represents '1' with '6335'
-6334 6335 0
c Var 'aux1538' direct represents '1' with '6336'
6334 -6335 6336 0
-6336 6335 0
-6336 -6334 0
c Var 'aux1538' order represents '2' with '6337'
-6335 6337 0
c Var 'aux1538' direct represents '2' with '6338'
6335 -6337 6338 0
-6338 6337 0
-6338 -6335 0
c Var 'aux1538' direct represents '3' with '-6337'
6334 6336 6338 -6337 0
c Encoding variable: aux1539 with domain: int(0..4) (representing constraint (aux1534 + aux1536))
c Both direct and order encoding.
c Var 'aux1539' order represents '0' with '6339'
c Var 'aux1539' direct represents '0' with '6339'
c Var 'aux1539' order represents '1' with '6340'
-6339 6340 0
c Var 'aux1539' direct represents '1' with '6341'
6339 -6340 6341 0
-6341 6340 0
-6341 -6339 0
c Var 'aux1539' order represents '2' with '6342'
-6340 6342 0
c Var 'aux1539' direct represents '2' with '6343'
6340 -6342 6343 0
-6343 6342 0
-6343 -6340 0
c Var 'aux1539' order represents '3' with '6344'
-6342 6344 0
c Var 'aux1539' direct represents '3' with '6345'
6342 -6344 6345 0
-6345 6344 0
-6345 -6342 0
c Var 'aux1539' direct represents '4' with '-6344'
6339 6341 6343 6345 -6344 0
c Encoding variable: aux1540 with domain: int(0..2) (representing constraint ((x_00003_00007=4) + (x_00002_00009=4)))
c Both direct and order encoding.
c Var 'aux1540' order represents '0' with '6346'
c Var 'aux1540' direct represents '0' with '6346'
c Var 'aux1540' order represents '1' with '6347'
-6346 6347 0
c Var 'aux1540' direct represents '1' with '6348'
6346 -6347 6348 0
-6348 6347 0
-6348 -6346 0
c Var 'aux1540' direct represents '2' with '-6347'
6346 6348 -6347 0
c Encoding variable: aux1541 with domain: int(0..2) (representing constraint ((x_00002_00008=4) + (x_00003_00008=4)))
c Both direct and order encoding.
c Var 'aux1541' order represents '0' with '6349'
c Var 'aux1541' direct represents '0' with '6349'
c Var 'aux1541' order represents '1' with '6350'
-6349 6350 0
c Var 'aux1541' direct represents '1' with '6351'
6349 -6350 6351 0
-6351 6350 0
-6351 -6349 0
c Var 'aux1541' direct represents '2' with '-6350'
6349 6351 -6350 0
c Encoding variable: aux1542 with domain: int(0..2) (representing constraint ((x_00002_00007=4) + (x_00001_00007=4)))
c Both direct and order encoding.
c Var 'aux1542' order represents '0' with '6352'
c Var 'aux1542' direct represents '0' with '6352'
c Var 'aux1542' order represents '1' with '6353'
-6352 6353 0
c Var 'aux1542' direct represents '1' with '6354'
6352 -6353 6354 0
-6354 6353 0
-6354 -6352 0
c Var 'aux1542' direct represents '2' with '-6353'
6352 6354 -6353 0
c Encoding variable: aux1543 with domain: int(0..2) (representing constraint ((x_00001_00009=4) + (x_00001_00008=4)))
c Both direct and order encoding.
c Var 'aux1543' order represents '0' with '6355'
c Var 'aux1543' direct represents '0' with '6355'
c Var 'aux1543' order represents '1' with '6356'
-6355 6356 0
c Var 'aux1543' direct represents '1' with '6357'
6355 -6356 6357 0
-6357 6356 0
-6357 -6355 0
c Var 'aux1543' direct represents '2' with '-6356'
6355 6357 -6356 0
c Encoding variable: aux1544 with domain: int(0..3) (representing constraint ((x_00003_00009=4) + aux1543))
c Both direct and order encoding.
c Var 'aux1544' order represents '0' with '6358'
c Var 'aux1544' direct represents '0' with '6358'
c Var 'aux1544' order represents '1' with '6359'
-6358 6359 0
c Var 'aux1544' direct represents '1' with '6360'
6358 -6359 6360 0
-6360 6359 0
-6360 -6358 0
c Var 'aux1544' order represents '2' with '6361'
-6359 6361 0
c Var 'aux1544' direct represents '2' with '6362'
6359 -6361 6362 0
-6362 6361 0
-6362 -6359 0
c Var 'aux1544' direct represents '3' with '-6361'
6358 6360 6362 -6361 0
c Encoding variable: aux1545 with domain: int(0..4) (representing constraint (aux1540 + aux1542))
c Both direct and order encoding.
c Var 'aux1545' order represents '0' with '6363'
c Var 'aux1545' direct represents '0' with '6363'
c Var 'aux1545' order represents '1' with '6364'
-6363 6364 0
c Var 'aux1545' direct represents '1' with '6365'
6363 -6364 6365 0
-6365 6364 0
-6365 -6363 0
c Var 'aux1545' order represents '2' with '6366'
-6364 6366 0
c Var 'aux1545' direct represents '2' with '6367'
6364 -6366 6367 0
-6367 6366 0
-6367 -6364 0
c Var 'aux1545' order represents '3' with '6368'
-6366 6368 0
c Var 'aux1545' direct represents '3' with '6369'
6366 -6368 6369 0
-6369 6368 0
-6369 -6366 0
c Var 'aux1545' direct represents '4' with '-6368'
6363 6365 6367 6369 -6368 0
c Encoding variable: aux1546 with domain: int(0..2) (representing constraint ((x_00003_00007=5) + (x_00002_00009=5)))
c Both direct and order encoding.
c Var 'aux1546' order represents '0' with '6370'
c Var 'aux1546' direct represents '0' with '6370'
c Var 'aux1546' order represents '1' with '6371'
-6370 6371 0
c Var 'aux1546' direct represents '1' with '6372'
6370 -6371 6372 0
-6372 6371 0
-6372 -6370 0
c Var 'aux1546' direct represents '2' with '-6371'
6370 6372 -6371 0
c Encoding variable: aux1547 with domain: int(0..2) (representing constraint ((x_00002_00008=5) + (x_00003_00008=5)))
c Both direct and order encoding.
c Var 'aux1547' order represents '0' with '6373'
c Var 'aux1547' direct represents '0' with '6373'
c Var 'aux1547' order represents '1' with '6374'
-6373 6374 0
c Var 'aux1547' direct represents '1' with '6375'
6373 -6374 6375 0
-6375 6374 0
-6375 -6373 0
c Var 'aux1547' direct represents '2' with '-6374'
6373 6375 -6374 0
c Encoding variable: aux1548 with domain: int(0..2) (representing constraint ((x_00002_00007=5) + (x_00001_00007=5)))
c Both direct and order encoding.
c Var 'aux1548' order represents '0' with '6376'
c Var 'aux1548' direct represents '0' with '6376'
c Var 'aux1548' order represents '1' with '6377'
-6376 6377 0
c Var 'aux1548' direct represents '1' with '6378'
6376 -6377 6378 0
-6378 6377 0
-6378 -6376 0
c Var 'aux1548' direct represents '2' with '-6377'
6376 6378 -6377 0
c Encoding variable: aux1549 with domain: int(0..2) (representing constraint ((x_00001_00009=5) + (x_00001_00008=5)))
c Both direct and order encoding.
c Var 'aux1549' order represents '0' with '6379'
c Var 'aux1549' direct represents '0' with '6379'
c Var 'aux1549' order represents '1' with '6380'
-6379 6380 0
c Var 'aux1549' direct represents '1' with '6381'
6379 -6380 6381 0
-6381 6380 0
-6381 -6379 0
c Var 'aux1549' direct represents '2' with '-6380'
6379 6381 -6380 0
c Encoding variable: aux1550 with domain: int(0..3) (representing constraint ((x_00003_00009=5) + aux1549))
c Both direct and order encoding.
c Var 'aux1550' order represents '0' with '6382'
c Var 'aux1550' direct represents '0' with '6382'
c Var 'aux1550' order represents '1' with '6383'
-6382 6383 0
c Var 'aux1550' direct represents '1' with '6384'
6382 -6383 6384 0
-6384 6383 0
-6384 -6382 0
c Var 'aux1550' order represents '2' with '6385'
-6383 6385 0
c Var 'aux1550' direct represents '2' with '6386'
6383 -6385 6386 0
-6386 6385 0
-6386 -6383 0
c Var 'aux1550' direct represents '3' with '-6385'
6382 6384 6386 -6385 0
c Encoding variable: aux1551 with domain: int(0..4) (representing constraint (aux1546 + aux1548))
c Both direct and order encoding.
c Var 'aux1551' order represents '0' with '6387'
c Var 'aux1551' direct represents '0' with '6387'
c Var 'aux1551' order represents '1' with '6388'
-6387 6388 0
c Var 'aux1551' direct represents '1' with '6389'
6387 -6388 6389 0
-6389 6388 0
-6389 -6387 0
c Var 'aux1551' order represents '2' with '6390'
-6388 6390 0
c Var 'aux1551' direct represents '2' with '6391'
6388 -6390 6391 0
-6391 6390 0
-6391 -6388 0
c Var 'aux1551' order represents '3' with '6392'
-6390 6392 0
c Var 'aux1551' direct represents '3' with '6393'
6390 -6392 6393 0
-6393 6392 0
-6393 -6390 0
c Var 'aux1551' direct represents '4' with '-6392'
6387 6389 6391 6393 -6392 0
c Encoding variable: aux1552 with domain: int(0..2) (representing constraint ((x_00003_00007=6) + (x_00002_00009=6)))
c Both direct and order encoding.
c Var 'aux1552' order represents '0' with '6394'
c Var 'aux1552' direct represents '0' with '6394'
c Var 'aux1552' order represents '1' with '6395'
-6394 6395 0
c Var 'aux1552' direct represents '1' with '6396'
6394 -6395 6396 0
-6396 6395 0
-6396 -6394 0
c Var 'aux1552' direct represents '2' with '-6395'
6394 6396 -6395 0
c Encoding variable: aux1553 with domain: int(0..2) (representing constraint ((x_00002_00008=6) + (x_00003_00008=6)))
c Both direct and order encoding.
c Var 'aux1553' order represents '0' with '6397'
c Var 'aux1553' direct represents '0' with '6397'
c Var 'aux1553' order represents '1' with '6398'
-6397 6398 0
c Var 'aux1553' direct represents '1' with '6399'
6397 -6398 6399 0
-6399 6398 0
-6399 -6397 0
c Var 'aux1553' direct represents '2' with '-6398'
6397 6399 -6398 0
c Encoding variable: aux1554 with domain: int(0..2) (representing constraint ((x_00002_00007=6) + (x_00001_00007=6)))
c Both direct and order encoding.
c Var 'aux1554' order represents '0' with '6400'
c Var 'aux1554' direct represents '0' with '6400'
c Var 'aux1554' order represents '1' with '6401'
-6400 6401 0
c Var 'aux1554' direct represents '1' with '6402'
6400 -6401 6402 0
-6402 6401 0
-6402 -6400 0
c Var 'aux1554' direct represents '2' with '-6401'
6400 6402 -6401 0
c Encoding variable: aux1555 with domain: int(0..2) (representing constraint ((x_00001_00009=6) + (x_00001_00008=6)))
c Both direct and order encoding.
c Var 'aux1555' order represents '0' with '6403'
c Var 'aux1555' direct represents '0' with '6403'
c Var 'aux1555' order represents '1' with '6404'
-6403 6404 0
c Var 'aux1555' direct represents '1' with '6405'
6403 -6404 6405 0
-6405 6404 0
-6405 -6403 0
c Var 'aux1555' direct represents '2' with '-6404'
6403 6405 -6404 0
c Encoding variable: aux1556 with domain: int(0..3) (representing constraint ((x_00003_00009=6) + aux1555))
c Both direct and order encoding.
c Var 'aux1556' order represents '0' with '6406'
c Var 'aux1556' direct represents '0' with '6406'
c Var 'aux1556' order represents '1' with '6407'
-6406 6407 0
c Var 'aux1556' direct represents '1' with '6408'
6406 -6407 6408 0
-6408 6407 0
-6408 -6406 0
c Var 'aux1556' order represents '2' with '6409'
-6407 6409 0
c Var 'aux1556' direct represents '2' with '6410'
6407 -6409 6410 0
-6410 6409 0
-6410 -6407 0
c Var 'aux1556' direct represents '3' with '-6409'
6406 6408 6410 -6409 0
c Encoding variable: aux1557 with domain: int(0..4) (representing constraint (aux1552 + aux1554))
c Both direct and order encoding.
c Var 'aux1557' order represents '0' with '6411'
c Var 'aux1557' direct represents '0' with '6411'
c Var 'aux1557' order represents '1' with '6412'
-6411 6412 0
c Var 'aux1557' direct represents '1' with '6413'
6411 -6412 6413 0
-6413 6412 0
-6413 -6411 0
c Var 'aux1557' order represents '2' with '6414'
-6412 6414 0
c Var 'aux1557' direct represents '2' with '6415'
6412 -6414 6415 0
-6415 6414 0
-6415 -6412 0
c Var 'aux1557' order represents '3' with '6416'
-6414 6416 0
c Var 'aux1557' direct represents '3' with '6417'
6414 -6416 6417 0
-6417 6416 0
-6417 -6414 0
c Var 'aux1557' direct represents '4' with '-6416'
6411 6413 6415 6417 -6416 0
c Encoding variable: aux1558 with domain: int(0..2) (representing constraint ((x_00003_00007=7) + (x_00002_00009=7)))
c Both direct and order encoding.
c Var 'aux1558' order represents '0' with '6418'
c Var 'aux1558' direct represents '0' with '6418'
c Var 'aux1558' order represents '1' with '6419'
-6418 6419 0
c Var 'aux1558' direct represents '1' with '6420'
6418 -6419 6420 0
-6420 6419 0
-6420 -6418 0
c Var 'aux1558' direct represents '2' with '-6419'
6418 6420 -6419 0
c Encoding variable: aux1559 with domain: int(0..2) (representing constraint ((x_00002_00008=7) + (x_00003_00008=7)))
c Both direct and order encoding.
c Var 'aux1559' order represents '0' with '6421'
c Var 'aux1559' direct represents '0' with '6421'
c Var 'aux1559' order represents '1' with '6422'
-6421 6422 0
c Var 'aux1559' direct represents '1' with '6423'
6421 -6422 6423 0
-6423 6422 0
-6423 -6421 0
c Var 'aux1559' direct represents '2' with '-6422'
6421 6423 -6422 0
c Encoding variable: aux1560 with domain: int(0..2) (representing constraint ((x_00002_00007=7) + (x_00001_00007=7)))
c Both direct and order encoding.
c Var 'aux1560' order represents '0' with '6424'
c Var 'aux1560' direct represents '0' with '6424'
c Var 'aux1560' order represents '1' with '6425'
-6424 6425 0
c Var 'aux1560' direct represents '1' with '6426'
6424 -6425 6426 0
-6426 6425 0
-6426 -6424 0
c Var 'aux1560' direct represents '2' with '-6425'
6424 6426 -6425 0
c Encoding variable: aux1561 with domain: int(0..2) (representing constraint ((x_00001_00009=7) + (x_00001_00008=7)))
c Both direct and order encoding.
c Var 'aux1561' order represents '0' with '6427'
c Var 'aux1561' direct represents '0' with '6427'
c Var 'aux1561' order represents '1' with '6428'
-6427 6428 0
c Var 'aux1561' direct represents '1' with '6429'
6427 -6428 6429 0
-6429 6428 0
-6429 -6427 0
c Var 'aux1561' direct represents '2' with '-6428'
6427 6429 -6428 0
c Encoding variable: aux1562 with domain: int(0..3) (representing constraint ((x_00003_00009=7) + aux1561))
c Both direct and order encoding.
c Var 'aux1562' order represents '0' with '6430'
c Var 'aux1562' direct represents '0' with '6430'
c Var 'aux1562' order represents '1' with '6431'
-6430 6431 0
c Var 'aux1562' direct represents '1' with '6432'
6430 -6431 6432 0
-6432 6431 0
-6432 -6430 0
c Var 'aux1562' order represents '2' with '6433'
-6431 6433 0
c Var 'aux1562' direct represents '2' with '6434'
6431 -6433 6434 0
-6434 6433 0
-6434 -6431 0
c Var 'aux1562' direct represents '3' with '-6433'
6430 6432 6434 -6433 0
c Encoding variable: aux1563 with domain: int(0..4) (representing constraint (aux1558 + aux1560))
c Both direct and order encoding.
c Var 'aux1563' order represents '0' with '6435'
c Var 'aux1563' direct represents '0' with '6435'
c Var 'aux1563' order represents '1' with '6436'
-6435 6436 0
c Var 'aux1563' direct represents '1' with '6437'
6435 -6436 6437 0
-6437 6436 0
-6437 -6435 0
c Var 'aux1563' order represents '2' with '6438'
-6436 6438 0
c Var 'aux1563' direct represents '2' with '6439'
6436 -6438 6439 0
-6439 6438 0
-6439 -6436 0
c Var 'aux1563' order represents '3' with '6440'
-6438 6440 0
c Var 'aux1563' direct represents '3' with '6441'
6438 -6440 6441 0
-6441 6440 0
-6441 -6438 0
c Var 'aux1563' direct represents '4' with '-6440'
6435 6437 6439 6441 -6440 0
c Encoding variable: aux1564 with domain: int(0..2) (representing constraint ((x_00003_00007=8) + (x_00002_00009=8)))
c Both direct and order encoding.
c Var 'aux1564' order represents '0' with '6442'
c Var 'aux1564' direct represents '0' with '6442'
c Var 'aux1564' order represents '1' with '6443'
-6442 6443 0
c Var 'aux1564' direct represents '1' with '6444'
6442 -6443 6444 0
-6444 6443 0
-6444 -6442 0
c Var 'aux1564' direct represents '2' with '-6443'
6442 6444 -6443 0
c Encoding variable: aux1565 with domain: int(0..2) (representing constraint ((x_00002_00008=8) + (x_00003_00008=8)))
c Both direct and order encoding.
c Var 'aux1565' order represents '0' with '6445'
c Var 'aux1565' direct represents '0' with '6445'
c Var 'aux1565' order represents '1' with '6446'
-6445 6446 0
c Var 'aux1565' direct represents '1' with '6447'
6445 -6446 6447 0
-6447 6446 0
-6447 -6445 0
c Var 'aux1565' direct represents '2' with '-6446'
6445 6447 -6446 0
c Encoding variable: aux1566 with domain: int(0..2) (representing constraint ((x_00002_00007=8) + (x_00001_00007=8)))
c Both direct and order encoding.
c Var 'aux1566' order represents '0' with '6448'
c Var 'aux1566' direct represents '0' with '6448'
c Var 'aux1566' order represents '1' with '6449'
-6448 6449 0
c Var 'aux1566' direct represents '1' with '6450'
6448 -6449 6450 0
-6450 6449 0
-6450 -6448 0
c Var 'aux1566' direct represents '2' with '-6449'
6448 6450 -6449 0
c Encoding variable: aux1567 with domain: int(0..2) (representing constraint ((x_00001_00009=8) + (x_00001_00008=8)))
c Both direct and order encoding.
c Var 'aux1567' order represents '0' with '6451'
c Var 'aux1567' direct represents '0' with '6451'
c Var 'aux1567' order represents '1' with '6452'
-6451 6452 0
c Var 'aux1567' direct represents '1' with '6453'
6451 -6452 6453 0
-6453 6452 0
-6453 -6451 0
c Var 'aux1567' direct represents '2' with '-6452'
6451 6453 -6452 0
c Encoding variable: aux1568 with domain: int(0..3) (representing constraint ((x_00003_00009=8) + aux1567))
c Both direct and order encoding.
c Var 'aux1568' order represents '0' with '6454'
c Var 'aux1568' direct represents '0' with '6454'
c Var 'aux1568' order represents '1' with '6455'
-6454 6455 0
c Var 'aux1568' direct represents '1' with '6456'
6454 -6455 6456 0
-6456 6455 0
-6456 -6454 0
c Var 'aux1568' order represents '2' with '6457'
-6455 6457 0
c Var 'aux1568' direct represents '2' with '6458'
6455 -6457 6458 0
-6458 6457 0
-6458 -6455 0
c Var 'aux1568' direct represents '3' with '-6457'
6454 6456 6458 -6457 0
c Encoding variable: aux1569 with domain: int(0..4) (representing constraint (aux1564 + aux1566))
c Both direct and order encoding.
c Var 'aux1569' order represents '0' with '6459'
c Var 'aux1569' direct represents '0' with '6459'
c Var 'aux1569' order represents '1' with '6460'
-6459 6460 0
c Var 'aux1569' direct represents '1' with '6461'
6459 -6460 6461 0
-6461 6460 0
-6461 -6459 0
c Var 'aux1569' order represents '2' with '6462'
-6460 6462 0
c Var 'aux1569' direct represents '2' with '6463'
6460 -6462 6463 0
-6463 6462 0
-6463 -6460 0
c Var 'aux1569' order represents '3' with '6464'
-6462 6464 0
c Var 'aux1569' direct represents '3' with '6465'
6462 -6464 6465 0
-6465 6464 0
-6465 -6462 0
c Var 'aux1569' direct represents '4' with '-6464'
6459 6461 6463 6465 -6464 0
c Encoding variable: aux1570 with domain: int(0..2) (representing constraint ((x_00003_00007=9) + (x_00002_00009=9)))
c Both direct and order encoding.
c Var 'aux1570' order represents '0' with '6466'
c Var 'aux1570' direct represents '0' with '6466'
c Var 'aux1570' order represents '1' with '6467'
-6466 6467 0
c Var 'aux1570' direct represents '1' with '6468'
6466 -6467 6468 0
-6468 6467 0
-6468 -6466 0
c Var 'aux1570' direct represents '2' with '-6467'
6466 6468 -6467 0
c Encoding variable: aux1571 with domain: int(0..2) (representing constraint ((x_00002_00008=9) + (x_00003_00008=9)))
c Both direct and order encoding.
c Var 'aux1571' order represents '0' with '6469'
c Var 'aux1571' direct represents '0' with '6469'
c Var 'aux1571' order represents '1' with '6470'
-6469 6470 0
c Var 'aux1571' direct represents '1' with '6471'
6469 -6470 6471 0
-6471 6470 0
-6471 -6469 0
c Var 'aux1571' direct represents '2' with '-6470'
6469 6471 -6470 0
c Encoding variable: aux1572 with domain: int(0..2) (representing constraint ((x_00002_00007=9) + (x_00001_00007=9)))
c Both direct and order encoding.
c Var 'aux1572' order represents '0' with '6472'
c Var 'aux1572' direct represents '0' with '6472'
c Var 'aux1572' order represents '1' with '6473'
-6472 6473 0
c Var 'aux1572' direct represents '1' with '6474'
6472 -6473 6474 0
-6474 6473 0
-6474 -6472 0
c Var 'aux1572' direct represents '2' with '-6473'
6472 6474 -6473 0
c Encoding variable: aux1573 with domain: int(0..2) (representing constraint ((x_00001_00009=9) + (x_00001_00008=9)))
c Both direct and order encoding.
c Var 'aux1573' order represents '0' with '6475'
c Var 'aux1573' direct represents '0' with '6475'
c Var 'aux1573' order represents '1' with '6476'
-6475 6476 0
c Var 'aux1573' direct represents '1' with '6477'
6475 -6476 6477 0
-6477 6476 0
-6477 -6475 0
c Var 'aux1573' direct represents '2' with '-6476'
6475 6477 -6476 0
c Encoding variable: aux1574 with domain: int(0..3) (representing constraint ((x_00003_00009=9) + aux1573))
c Both direct and order encoding.
c Var 'aux1574' order represents '0' with '6478'
c Var 'aux1574' direct represents '0' with '6478'
c Var 'aux1574' order represents '1' with '6479'
-6478 6479 0
c Var 'aux1574' direct represents '1' with '6480'
6478 -6479 6480 0
-6480 6479 0
-6480 -6478 0
c Var 'aux1574' order represents '2' with '6481'
-6479 6481 0
c Var 'aux1574' direct represents '2' with '6482'
6479 -6481 6482 0
-6482 6481 0
-6482 -6479 0
c Var 'aux1574' direct represents '3' with '-6481'
6478 6480 6482 -6481 0
c Encoding variable: aux1575 with domain: int(0..4) (representing constraint (aux1570 + aux1572))
c Both direct and order encoding.
c Var 'aux1575' order represents '0' with '6483'
c Var 'aux1575' direct represents '0' with '6483'
c Var 'aux1575' order represents '1' with '6484'
-6483 6484 0
c Var 'aux1575' direct represents '1' with '6485'
6483 -6484 6485 0
-6485 6484 0
-6485 -6483 0
c Var 'aux1575' order represents '2' with '6486'
-6484 6486 0
c Var 'aux1575' direct represents '2' with '6487'
6484 -6486 6487 0
-6487 6486 0
-6487 -6484 0
c Var 'aux1575' order represents '3' with '6488'
-6486 6488 0
c Var 'aux1575' direct represents '3' with '6489'
6486 -6488 6489 0
-6489 6488 0
-6489 -6486 0
c Var 'aux1575' direct represents '4' with '-6488'
6483 6485 6487 6489 -6488 0
c Encoding variable: aux1576 with domain: int(0..2) (representing constraint ((x_00006_00001=1) + (x_00005_00003=1)))
c Both direct and order encoding.
c Var 'aux1576' order represents '0' with '6490'
c Var 'aux1576' direct represents '0' with '6490'
c Var 'aux1576' order represents '1' with '6491'
-6490 6491 0
c Var 'aux1576' direct represents '1' with '6492'
6490 -6491 6492 0
-6492 6491 0
-6492 -6490 0
c Var 'aux1576' direct represents '2' with '-6491'
6490 6492 -6491 0
c Encoding variable: aux1577 with domain: int(0..2) (representing constraint ((x_00005_00002=1) + (x_00006_00002=1)))
c Both direct and order encoding.
c Var 'aux1577' order represents '0' with '6493'
c Var 'aux1577' direct represents '0' with '6493'
c Var 'aux1577' order represents '1' with '6494'
-6493 6494 0
c Var 'aux1577' direct represents '1' with '6495'
6493 -6494 6495 0
-6495 6494 0
-6495 -6493 0
c Var 'aux1577' direct represents '2' with '-6494'
6493 6495 -6494 0
c Encoding variable: aux1578 with domain: int(0..2) (representing constraint ((x_00005_00001=1) + (x_00004_00001=1)))
c Both direct and order encoding.
c Var 'aux1578' order represents '0' with '6496'
c Var 'aux1578' direct represents '0' with '6496'
c Var 'aux1578' order represents '1' with '6497'
-6496 6497 0
c Var 'aux1578' direct represents '1' with '6498'
6496 -6497 6498 0
-6498 6497 0
-6498 -6496 0
c Var 'aux1578' direct represents '2' with '-6497'
6496 6498 -6497 0
c Encoding variable: aux1579 with domain: int(0..2) (representing constraint ((x_00004_00003=1) + (x_00004_00002=1)))
c Both direct and order encoding.
c Var 'aux1579' order represents '0' with '6499'
c Var 'aux1579' direct represents '0' with '6499'
c Var 'aux1579' order represents '1' with '6500'
-6499 6500 0
c Var 'aux1579' direct represents '1' with '6501'
6499 -6500 6501 0
-6501 6500 0
-6501 -6499 0
c Var 'aux1579' direct represents '2' with '-6500'
6499 6501 -6500 0
c Encoding variable: aux1580 with domain: int(0..3) (representing constraint ((x_00006_00003=1) + aux1579))
c Both direct and order encoding.
c Var 'aux1580' order represents '0' with '6502'
c Var 'aux1580' direct represents '0' with '6502'
c Var 'aux1580' order represents '1' with '6503'
-6502 6503 0
c Var 'aux1580' direct represents '1' with '6504'
6502 -6503 6504 0
-6504 6503 0
-6504 -6502 0
c Var 'aux1580' order represents '2' with '6505'
-6503 6505 0
c Var 'aux1580' direct represents '2' with '6506'
6503 -6505 6506 0
-6506 6505 0
-6506 -6503 0
c Var 'aux1580' direct represents '3' with '-6505'
6502 6504 6506 -6505 0
c Encoding variable: aux1581 with domain: int(0..4) (representing constraint (aux1576 + aux1578))
c Both direct and order encoding.
c Var 'aux1581' order represents '0' with '6507'
c Var 'aux1581' direct represents '0' with '6507'
c Var 'aux1581' order represents '1' with '6508'
-6507 6508 0
c Var 'aux1581' direct represents '1' with '6509'
6507 -6508 6509 0
-6509 6508 0
-6509 -6507 0
c Var 'aux1581' order represents '2' with '6510'
-6508 6510 0
c Var 'aux1581' direct represents '2' with '6511'
6508 -6510 6511 0
-6511 6510 0
-6511 -6508 0
c Var 'aux1581' order represents '3' with '6512'
-6510 6512 0
c Var 'aux1581' direct represents '3' with '6513'
6510 -6512 6513 0
-6513 6512 0
-6513 -6510 0
c Var 'aux1581' direct represents '4' with '-6512'
6507 6509 6511 6513 -6512 0
c Encoding variable: aux1582 with domain: int(0..2) (representing constraint ((x_00006_00001=2) + (x_00005_00003=2)))
c Both direct and order encoding.
c Var 'aux1582' order represents '0' with '6514'
c Var 'aux1582' direct represents '0' with '6514'
c Var 'aux1582' order represents '1' with '6515'
-6514 6515 0
c Var 'aux1582' direct represents '1' with '6516'
6514 -6515 6516 0
-6516 6515 0
-6516 -6514 0
c Var 'aux1582' direct represents '2' with '-6515'
6514 6516 -6515 0
c Encoding variable: aux1583 with domain: int(0..2) (representing constraint ((x_00005_00002=2) + (x_00006_00002=2)))
c Both direct and order encoding.
c Var 'aux1583' order represents '0' with '6517'
c Var 'aux1583' direct represents '0' with '6517'
c Var 'aux1583' order represents '1' with '6518'
-6517 6518 0
c Var 'aux1583' direct represents '1' with '6519'
6517 -6518 6519 0
-6519 6518 0
-6519 -6517 0
c Var 'aux1583' direct represents '2' with '-6518'
6517 6519 -6518 0
c Encoding variable: aux1584 with domain: int(0..2) (representing constraint ((x_00005_00001=2) + (x_00004_00001=2)))
c Both direct and order encoding.
c Var 'aux1584' order represents '0' with '6520'
c Var 'aux1584' direct represents '0' with '6520'
c Var 'aux1584' order represents '1' with '6521'
-6520 6521 0
c Var 'aux1584' direct represents '1' with '6522'
6520 -6521 6522 0
-6522 6521 0
-6522 -6520 0
c Var 'aux1584' direct represents '2' with '-6521'
6520 6522 -6521 0
c Encoding variable: aux1585 with domain: int(0..2) (representing constraint ((x_00004_00003=2) + (x_00004_00002=2)))
c Both direct and order encoding.
c Var 'aux1585' order represents '0' with '6523'
c Var 'aux1585' direct represents '0' with '6523'
c Var 'aux1585' order represents '1' with '6524'
-6523 6524 0
c Var 'aux1585' direct represents '1' with '6525'
6523 -6524 6525 0
-6525 6524 0
-6525 -6523 0
c Var 'aux1585' direct represents '2' with '-6524'
6523 6525 -6524 0
c Encoding variable: aux1586 with domain: int(0..3) (representing constraint ((x_00006_00003=2) + aux1585))
c Both direct and order encoding.
c Var 'aux1586' order represents '0' with '6526'
c Var 'aux1586' direct represents '0' with '6526'
c Var 'aux1586' order represents '1' with '6527'
-6526 6527 0
c Var 'aux1586' direct represents '1' with '6528'
6526 -6527 6528 0
-6528 6527 0
-6528 -6526 0
c Var 'aux1586' order represents '2' with '6529'
-6527 6529 0
c Var 'aux1586' direct represents '2' with '6530'
6527 -6529 6530 0
-6530 6529 0
-6530 -6527 0
c Var 'aux1586' direct represents '3' with '-6529'
6526 6528 6530 -6529 0
c Encoding variable: aux1587 with domain: int(0..4) (representing constraint (aux1582 + aux1584))
c Both direct and order encoding.
c Var 'aux1587' order represents '0' with '6531'
c Var 'aux1587' direct represents '0' with '6531'
c Var 'aux1587' order represents '1' with '6532'
-6531 6532 0
c Var 'aux1587' direct represents '1' with '6533'
6531 -6532 6533 0
-6533 6532 0
-6533 -6531 0
c Var 'aux1587' order represents '2' with '6534'
-6532 6534 0
c Var 'aux1587' direct represents '2' with '6535'
6532 -6534 6535 0
-6535 6534 0
-6535 -6532 0
c Var 'aux1587' order represents '3' with '6536'
-6534 6536 0
c Var 'aux1587' direct represents '3' with '6537'
6534 -6536 6537 0
-6537 6536 0
-6537 -6534 0
c Var 'aux1587' direct represents '4' with '-6536'
6531 6533 6535 6537 -6536 0
c Encoding variable: aux1588 with domain: int(0..2) (representing constraint ((x_00006_00001=3) + (x_00005_00003=3)))
c Both direct and order encoding.
c Var 'aux1588' order represents '0' with '6538'
c Var 'aux1588' direct represents '0' with '6538'
c Var 'aux1588' order represents '1' with '6539'
-6538 6539 0
c Var 'aux1588' direct represents '1' with '6540'
6538 -6539 6540 0
-6540 6539 0
-6540 -6538 0
c Var 'aux1588' direct represents '2' with '-6539'
6538 6540 -6539 0
c Encoding variable: aux1589 with domain: int(0..2) (representing constraint ((x_00005_00002=3) + (x_00006_00002=3)))
c Both direct and order encoding.
c Var 'aux1589' order represents '0' with '6541'
c Var 'aux1589' direct represents '0' with '6541'
c Var 'aux1589' order represents '1' with '6542'
-6541 6542 0
c Var 'aux1589' direct represents '1' with '6543'
6541 -6542 6543 0
-6543 6542 0
-6543 -6541 0
c Var 'aux1589' direct represents '2' with '-6542'
6541 6543 -6542 0
c Encoding variable: aux1590 with domain: int(0..2) (representing constraint ((x_00005_00001=3) + (x_00004_00001=3)))
c Both direct and order encoding.
c Var 'aux1590' order represents '0' with '6544'
c Var 'aux1590' direct represents '0' with '6544'
c Var 'aux1590' order represents '1' with '6545'
-6544 6545 0
c Var 'aux1590' direct represents '1' with '6546'
6544 -6545 6546 0
-6546 6545 0
-6546 -6544 0
c Var 'aux1590' direct represents '2' with '-6545'
6544 6546 -6545 0
c Encoding variable: aux1591 with domain: int(0..2) (representing constraint ((x_00004_00003=3) + (x_00004_00002=3)))
c Both direct and order encoding.
c Var 'aux1591' order represents '0' with '6547'
c Var 'aux1591' direct represents '0' with '6547'
c Var 'aux1591' order represents '1' with '6548'
-6547 6548 0
c Var 'aux1591' direct represents '1' with '6549'
6547 -6548 6549 0
-6549 6548 0
-6549 -6547 0
c Var 'aux1591' direct represents '2' with '-6548'
6547 6549 -6548 0
c Encoding variable: aux1592 with domain: int(0..3) (representing constraint ((x_00006_00003=3) + aux1591))
c Both direct and order encoding.
c Var 'aux1592' order represents '0' with '6550'
c Var 'aux1592' direct represents '0' with '6550'
c Var 'aux1592' order represents '1' with '6551'
-6550 6551 0
c Var 'aux1592' direct represents '1' with '6552'
6550 -6551 6552 0
-6552 6551 0
-6552 -6550 0
c Var 'aux1592' order represents '2' with '6553'
-6551 6553 0
c Var 'aux1592' direct represents '2' with '6554'
6551 -6553 6554 0
-6554 6553 0
-6554 -6551 0
c Var 'aux1592' direct represents '3' with '-6553'
6550 6552 6554 -6553 0
c Encoding variable: aux1593 with domain: int(0..4) (representing constraint (aux1588 + aux1590))
c Both direct and order encoding.
c Var 'aux1593' order represents '0' with '6555'
c Var 'aux1593' direct represents '0' with '6555'
c Var 'aux1593' order represents '1' with '6556'
-6555 6556 0
c Var 'aux1593' direct represents '1' with '6557'
6555 -6556 6557 0
-6557 6556 0
-6557 -6555 0
c Var 'aux1593' order represents '2' with '6558'
-6556 6558 0
c Var 'aux1593' direct represents '2' with '6559'
6556 -6558 6559 0
-6559 6558 0
-6559 -6556 0
c Var 'aux1593' order represents '3' with '6560'
-6558 6560 0
c Var 'aux1593' direct represents '3' with '6561'
6558 -6560 6561 0
-6561 6560 0
-6561 -6558 0
c Var 'aux1593' direct represents '4' with '-6560'
6555 6557 6559 6561 -6560 0
c Encoding variable: aux1594 with domain: int(0..2) (representing constraint ((x_00006_00001=4) + (x_00005_00003=4)))
c Both direct and order encoding.
c Var 'aux1594' order represents '0' with '6562'
c Var 'aux1594' direct represents '0' with '6562'
c Var 'aux1594' order represents '1' with '6563'
-6562 6563 0
c Var 'aux1594' direct represents '1' with '6564'
6562 -6563 6564 0
-6564 6563 0
-6564 -6562 0
c Var 'aux1594' direct represents '2' with '-6563'
6562 6564 -6563 0
c Encoding variable: aux1595 with domain: int(0..2) (representing constraint ((x_00005_00002=4) + (x_00006_00002=4)))
c Both direct and order encoding.
c Var 'aux1595' order represents '0' with '6565'
c Var 'aux1595' direct represents '0' with '6565'
c Var 'aux1595' order represents '1' with '6566'
-6565 6566 0
c Var 'aux1595' direct represents '1' with '6567'
6565 -6566 6567 0
-6567 6566 0
-6567 -6565 0
c Var 'aux1595' direct represents '2' with '-6566'
6565 6567 -6566 0
c Encoding variable: aux1596 with domain: int(0..2) (representing constraint ((x_00005_00001=4) + (x_00004_00001=4)))
c Both direct and order encoding.
c Var 'aux1596' order represents '0' with '6568'
c Var 'aux1596' direct represents '0' with '6568'
c Var 'aux1596' order represents '1' with '6569'
-6568 6569 0
c Var 'aux1596' direct represents '1' with '6570'
6568 -6569 6570 0
-6570 6569 0
-6570 -6568 0
c Var 'aux1596' direct represents '2' with '-6569'
6568 6570 -6569 0
c Encoding variable: aux1597 with domain: int(0..2) (representing constraint ((x_00004_00003=4) + (x_00004_00002=4)))
c Both direct and order encoding.
c Var 'aux1597' order represents '0' with '6571'
c Var 'aux1597' direct represents '0' with '6571'
c Var 'aux1597' order represents '1' with '6572'
-6571 6572 0
c Var 'aux1597' direct represents '1' with '6573'
6571 -6572 6573 0
-6573 6572 0
-6573 -6571 0
c Var 'aux1597' direct represents '2' with '-6572'
6571 6573 -6572 0
c Encoding variable: aux1598 with domain: int(0..3) (representing constraint ((x_00006_00003=4) + aux1597))
c Both direct and order encoding.
c Var 'aux1598' order represents '0' with '6574'
c Var 'aux1598' direct represents '0' with '6574'
c Var 'aux1598' order represents '1' with '6575'
-6574 6575 0
c Var 'aux1598' direct represents '1' with '6576'
6574 -6575 6576 0
-6576 6575 0
-6576 -6574 0
c Var 'aux1598' order represents '2' with '6577'
-6575 6577 0
c Var 'aux1598' direct represents '2' with '6578'
6575 -6577 6578 0
-6578 6577 0
-6578 -6575 0
c Var 'aux1598' direct represents '3' with '-6577'
6574 6576 6578 -6577 0
c Encoding variable: aux1599 with domain: int(0..4) (representing constraint (aux1594 + aux1596))
c Both direct and order encoding.
c Var 'aux1599' order represents '0' with '6579'
c Var 'aux1599' direct represents '0' with '6579'
c Var 'aux1599' order represents '1' with '6580'
-6579 6580 0
c Var 'aux1599' direct represents '1' with '6581'
6579 -6580 6581 0
-6581 6580 0
-6581 -6579 0
c Var 'aux1599' order represents '2' with '6582'
-6580 6582 0
c Var 'aux1599' direct represents '2' with '6583'
6580 -6582 6583 0
-6583 6582 0
-6583 -6580 0
c Var 'aux1599' order represents '3' with '6584'
-6582 6584 0
c Var 'aux1599' direct represents '3' with '6585'
6582 -6584 6585 0
-6585 6584 0
-6585 -6582 0
c Var 'aux1599' direct represents '4' with '-6584'
6579 6581 6583 6585 -6584 0
c Encoding variable: aux1600 with domain: int(0..2) (representing constraint ((x_00006_00001=5) + (x_00005_00003=5)))
c Both direct and order encoding.
c Var 'aux1600' order represents '0' with '6586'
c Var 'aux1600' direct represents '0' with '6586'
c Var 'aux1600' order represents '1' with '6587'
-6586 6587 0
c Var 'aux1600' direct represents '1' with '6588'
6586 -6587 6588 0
-6588 6587 0
-6588 -6586 0
c Var 'aux1600' direct represents '2' with '-6587'
6586 6588 -6587 0
c Encoding variable: aux1601 with domain: int(0..2) (representing constraint ((x_00005_00002=5) + (x_00006_00002=5)))
c Both direct and order encoding.
c Var 'aux1601' order represents '0' with '6589'
c Var 'aux1601' direct represents '0' with '6589'
c Var 'aux1601' order represents '1' with '6590'
-6589 6590 0
c Var 'aux1601' direct represents '1' with '6591'
6589 -6590 6591 0
-6591 6590 0
-6591 -6589 0
c Var 'aux1601' direct represents '2' with '-6590'
6589 6591 -6590 0
c Encoding variable: aux1602 with domain: int(0..2) (representing constraint ((x_00005_00001=5) + (x_00004_00001=5)))
c Both direct and order encoding.
c Var 'aux1602' order represents '0' with '6592'
c Var 'aux1602' direct represents '0' with '6592'
c Var 'aux1602' order represents '1' with '6593'
-6592 6593 0
c Var 'aux1602' direct represents '1' with '6594'
6592 -6593 6594 0
-6594 6593 0
-6594 -6592 0
c Var 'aux1602' direct represents '2' with '-6593'
6592 6594 -6593 0
c Encoding variable: aux1603 with domain: int(0..2) (representing constraint ((x_00004_00003=5) + (x_00004_00002=5)))
c Both direct and order encoding.
c Var 'aux1603' order represents '0' with '6595'
c Var 'aux1603' direct represents '0' with '6595'
c Var 'aux1603' order represents '1' with '6596'
-6595 6596 0
c Var 'aux1603' direct represents '1' with '6597'
6595 -6596 6597 0
-6597 6596 0
-6597 -6595 0
c Var 'aux1603' direct represents '2' with '-6596'
6595 6597 -6596 0
c Encoding variable: aux1604 with domain: int(0..3) (representing constraint ((x_00006_00003=5) + aux1603))
c Both direct and order encoding.
c Var 'aux1604' order represents '0' with '6598'
c Var 'aux1604' direct represents '0' with '6598'
c Var 'aux1604' order represents '1' with '6599'
-6598 6599 0
c Var 'aux1604' direct represents '1' with '6600'
6598 -6599 6600 0
-6600 6599 0
-6600 -6598 0
c Var 'aux1604' order represents '2' with '6601'
-6599 6601 0
c Var 'aux1604' direct represents '2' with '6602'
6599 -6601 6602 0
-6602 6601 0
-6602 -6599 0
c Var 'aux1604' direct represents '3' with '-6601'
6598 6600 6602 -6601 0
c Encoding variable: aux1605 with domain: int(0..4) (representing constraint (aux1600 + aux1602))
c Both direct and order encoding.
c Var 'aux1605' order represents '0' with '6603'
c Var 'aux1605' direct represents '0' with '6603'
c Var 'aux1605' order represents '1' with '6604'
-6603 6604 0
c Var 'aux1605' direct represents '1' with '6605'
6603 -6604 6605 0
-6605 6604 0
-6605 -6603 0
c Var 'aux1605' order represents '2' with '6606'
-6604 6606 0
c Var 'aux1605' direct represents '2' with '6607'
6604 -6606 6607 0
-6607 6606 0
-6607 -6604 0
c Var 'aux1605' order represents '3' with '6608'
-6606 6608 0
c Var 'aux1605' direct represents '3' with '6609'
6606 -6608 6609 0
-6609 6608 0
-6609 -6606 0
c Var 'aux1605' direct represents '4' with '-6608'
6603 6605 6607 6609 -6608 0
c Encoding variable: aux1606 with domain: int(0..2) (representing constraint ((x_00006_00001=6) + (x_00005_00003=6)))
c Both direct and order encoding.
c Var 'aux1606' order represents '0' with '6610'
c Var 'aux1606' direct represents '0' with '6610'
c Var 'aux1606' order represents '1' with '6611'
-6610 6611 0
c Var 'aux1606' direct represents '1' with '6612'
6610 -6611 6612 0
-6612 6611 0
-6612 -6610 0
c Var 'aux1606' direct represents '2' with '-6611'
6610 6612 -6611 0
c Encoding variable: aux1607 with domain: int(0..2) (representing constraint ((x_00005_00002=6) + (x_00006_00002=6)))
c Both direct and order encoding.
c Var 'aux1607' order represents '0' with '6613'
c Var 'aux1607' direct represents '0' with '6613'
c Var 'aux1607' order represents '1' with '6614'
-6613 6614 0
c Var 'aux1607' direct represents '1' with '6615'
6613 -6614 6615 0
-6615 6614 0
-6615 -6613 0
c Var 'aux1607' direct represents '2' with '-6614'
6613 6615 -6614 0
c Encoding variable: aux1608 with domain: int(0..2) (representing constraint ((x_00005_00001=6) + (x_00004_00001=6)))
c Both direct and order encoding.
c Var 'aux1608' order represents '0' with '6616'
c Var 'aux1608' direct represents '0' with '6616'
c Var 'aux1608' order represents '1' with '6617'
-6616 6617 0
c Var 'aux1608' direct represents '1' with '6618'
6616 -6617 6618 0
-6618 6617 0
-6618 -6616 0
c Var 'aux1608' direct represents '2' with '-6617'
6616 6618 -6617 0
c Encoding variable: aux1609 with domain: int(0..2) (representing constraint ((x_00004_00003=6) + (x_00004_00002=6)))
c Both direct and order encoding.
c Var 'aux1609' order represents '0' with '6619'
c Var 'aux1609' direct represents '0' with '6619'
c Var 'aux1609' order represents '1' with '6620'
-6619 6620 0
c Var 'aux1609' direct represents '1' with '6621'
6619 -6620 6621 0
-6621 6620 0
-6621 -6619 0
c Var 'aux1609' direct represents '2' with '-6620'
6619 6621 -6620 0
c Encoding variable: aux1610 with domain: int(0..3) (representing constraint ((x_00006_00003=6) + aux1609))
c Both direct and order encoding.
c Var 'aux1610' order represents '0' with '6622'
c Var 'aux1610' direct represents '0' with '6622'
c Var 'aux1610' order represents '1' with '6623'
-6622 6623 0
c Var 'aux1610' direct represents '1' with '6624'
6622 -6623 6624 0
-6624 6623 0
-6624 -6622 0
c Var 'aux1610' order represents '2' with '6625'
-6623 6625 0
c Var 'aux1610' direct represents '2' with '6626'
6623 -6625 6626 0
-6626 6625 0
-6626 -6623 0
c Var 'aux1610' direct represents '3' with '-6625'
6622 6624 6626 -6625 0
c Encoding variable: aux1611 with domain: int(0..4) (representing constraint (aux1606 + aux1608))
c Both direct and order encoding.
c Var 'aux1611' order represents '0' with '6627'
c Var 'aux1611' direct represents '0' with '6627'
c Var 'aux1611' order represents '1' with '6628'
-6627 6628 0
c Var 'aux1611' direct represents '1' with '6629'
6627 -6628 6629 0
-6629 6628 0
-6629 -6627 0
c Var 'aux1611' order represents '2' with '6630'
-6628 6630 0
c Var 'aux1611' direct represents '2' with '6631'
6628 -6630 6631 0
-6631 6630 0
-6631 -6628 0
c Var 'aux1611' order represents '3' with '6632'
-6630 6632 0
c Var 'aux1611' direct represents '3' with '6633'
6630 -6632 6633 0
-6633 6632 0
-6633 -6630 0
c Var 'aux1611' direct represents '4' with '-6632'
6627 6629 6631 6633 -6632 0
c Encoding variable: aux1612 with domain: int(0..2) (representing constraint ((x_00006_00001=7) + (x_00005_00003=7)))
c Both direct and order encoding.
c Var 'aux1612' order represents '0' with '6634'
c Var 'aux1612' direct represents '0' with '6634'
c Var 'aux1612' order represents '1' with '6635'
-6634 6635 0
c Var 'aux1612' direct represents '1' with '6636'
6634 -6635 6636 0
-6636 6635 0
-6636 -6634 0
c Var 'aux1612' direct represents '2' with '-6635'
6634 6636 -6635 0
c Encoding variable: aux1613 with domain: int(0..2) (representing constraint ((x_00005_00002=7) + (x_00006_00002=7)))
c Both direct and order encoding.
c Var 'aux1613' order represents '0' with '6637'
c Var 'aux1613' direct represents '0' with '6637'
c Var 'aux1613' order represents '1' with '6638'
-6637 6638 0
c Var 'aux1613' direct represents '1' with '6639'
6637 -6638 6639 0
-6639 6638 0
-6639 -6637 0
c Var 'aux1613' direct represents '2' with '-6638'
6637 6639 -6638 0
c Encoding variable: aux1614 with domain: int(0..2) (representing constraint ((x_00005_00001=7) + (x_00004_00001=7)))
c Both direct and order encoding.
c Var 'aux1614' order represents '0' with '6640'
c Var 'aux1614' direct represents '0' with '6640'
c Var 'aux1614' order represents '1' with '6641'
-6640 6641 0
c Var 'aux1614' direct represents '1' with '6642'
6640 -6641 6642 0
-6642 6641 0
-6642 -6640 0
c Var 'aux1614' direct represents '2' with '-6641'
6640 6642 -6641 0
c Encoding variable: aux1615 with domain: int(0..2) (representing constraint ((x_00004_00003=7) + (x_00004_00002=7)))
c Both direct and order encoding.
c Var 'aux1615' order represents '0' with '6643'
c Var 'aux1615' direct represents '0' with '6643'
c Var 'aux1615' order represents '1' with '6644'
-6643 6644 0
c Var 'aux1615' direct represents '1' with '6645'
6643 -6644 6645 0
-6645 6644 0
-6645 -6643 0
c Var 'aux1615' direct represents '2' with '-6644'
6643 6645 -6644 0
c Encoding variable: aux1616 with domain: int(0..3) (representing constraint ((x_00006_00003=7) + aux1615))
c Both direct and order encoding.
c Var 'aux1616' order represents '0' with '6646'
c Var 'aux1616' direct represents '0' with '6646'
c Var 'aux1616' order represents '1' with '6647'
-6646 6647 0
c Var 'aux1616' direct represents '1' with '6648'
6646 -6647 6648 0
-6648 6647 0
-6648 -6646 0
c Var 'aux1616' order represents '2' with '6649'
-6647 6649 0
c Var 'aux1616' direct represents '2' with '6650'
6647 -6649 6650 0
-6650 6649 0
-6650 -6647 0
c Var 'aux1616' direct represents '3' with '-6649'
6646 6648 6650 -6649 0
c Encoding variable: aux1617 with domain: int(0..4) (representing constraint (aux1612 + aux1614))
c Both direct and order encoding.
c Var 'aux1617' order represents '0' with '6651'
c Var 'aux1617' direct represents '0' with '6651'
c Var 'aux1617' order represents '1' with '6652'
-6651 6652 0
c Var 'aux1617' direct represents '1' with '6653'
6651 -6652 6653 0
-6653 6652 0
-6653 -6651 0
c Var 'aux1617' order represents '2' with '6654'
-6652 6654 0
c Var 'aux1617' direct represents '2' with '6655'
6652 -6654 6655 0
-6655 6654 0
-6655 -6652 0
c Var 'aux1617' order represents '3' with '6656'
-6654 6656 0
c Var 'aux1617' direct represents '3' with '6657'
6654 -6656 6657 0
-6657 6656 0
-6657 -6654 0
c Var 'aux1617' direct represents '4' with '-6656'
6651 6653 6655 6657 -6656 0
c Encoding variable: aux1618 with domain: int(0..2) (representing constraint ((x_00006_00001=8) + (x_00005_00003=8)))
c Both direct and order encoding.
c Var 'aux1618' order represents '0' with '6658'
c Var 'aux1618' direct represents '0' with '6658'
c Var 'aux1618' order represents '1' with '6659'
-6658 6659 0
c Var 'aux1618' direct represents '1' with '6660'
6658 -6659 6660 0
-6660 6659 0
-6660 -6658 0
c Var 'aux1618' direct represents '2' with '-6659'
6658 6660 -6659 0
c Encoding variable: aux1619 with domain: int(0..2) (representing constraint ((x_00005_00002=8) + (x_00006_00002=8)))
c Both direct and order encoding.
c Var 'aux1619' order represents '0' with '6661'
c Var 'aux1619' direct represents '0' with '6661'
c Var 'aux1619' order represents '1' with '6662'
-6661 6662 0
c Var 'aux1619' direct represents '1' with '6663'
6661 -6662 6663 0
-6663 6662 0
-6663 -6661 0
c Var 'aux1619' direct represents '2' with '-6662'
6661 6663 -6662 0
c Encoding variable: aux1620 with domain: int(0..2) (representing constraint ((x_00005_00001=8) + (x_00004_00001=8)))
c Both direct and order encoding.
c Var 'aux1620' order represents '0' with '6664'
c Var 'aux1620' direct represents '0' with '6664'
c Var 'aux1620' order represents '1' with '6665'
-6664 6665 0
c Var 'aux1620' direct represents '1' with '6666'
6664 -6665 6666 0
-6666 6665 0
-6666 -6664 0
c Var 'aux1620' direct represents '2' with '-6665'
6664 6666 -6665 0
c Encoding variable: aux1621 with domain: int(0..2) (representing constraint ((x_00004_00003=8) + (x_00004_00002=8)))
c Both direct and order encoding.
c Var 'aux1621' order represents '0' with '6667'
c Var 'aux1621' direct represents '0' with '6667'
c Var 'aux1621' order represents '1' with '6668'
-6667 6668 0
c Var 'aux1621' direct represents '1' with '6669'
6667 -6668 6669 0
-6669 6668 0
-6669 -6667 0
c Var 'aux1621' direct represents '2' with '-6668'
6667 6669 -6668 0
c Encoding variable: aux1622 with domain: int(0..3) (representing constraint ((x_00006_00003=8) + aux1621))
c Both direct and order encoding.
c Var 'aux1622' order represents '0' with '6670'
c Var 'aux1622' direct represents '0' with '6670'
c Var 'aux1622' order represents '1' with '6671'
-6670 6671 0
c Var 'aux1622' direct represents '1' with '6672'
6670 -6671 6672 0
-6672 6671 0
-6672 -6670 0
c Var 'aux1622' order represents '2' with '6673'
-6671 6673 0
c Var 'aux1622' direct represents '2' with '6674'
6671 -6673 6674 0
-6674 6673 0
-6674 -6671 0
c Var 'aux1622' direct represents '3' with '-6673'
6670 6672 6674 -6673 0
c Encoding variable: aux1623 with domain: int(0..4) (representing constraint (aux1618 + aux1620))
c Both direct and order encoding.
c Var 'aux1623' order represents '0' with '6675'
c Var 'aux1623' direct represents '0' with '6675'
c Var 'aux1623' order represents '1' with '6676'
-6675 6676 0
c Var 'aux1623' direct represents '1' with '6677'
6675 -6676 6677 0
-6677 6676 0
-6677 -6675 0
c Var 'aux1623' order represents '2' with '6678'
-6676 6678 0
c Var 'aux1623' direct represents '2' with '6679'
6676 -6678 6679 0
-6679 6678 0
-6679 -6676 0
c Var 'aux1623' order represents '3' with '6680'
-6678 6680 0
c Var 'aux1623' direct represents '3' with '6681'
6678 -6680 6681 0
-6681 6680 0
-6681 -6678 0
c Var 'aux1623' direct represents '4' with '-6680'
6675 6677 6679 6681 -6680 0
c Encoding variable: aux1624 with domain: int(0..2) (representing constraint ((x_00006_00001=9) + (x_00005_00003=9)))
c Both direct and order encoding.
c Var 'aux1624' order represents '0' with '6682'
c Var 'aux1624' direct represents '0' with '6682'
c Var 'aux1624' order represents '1' with '6683'
-6682 6683 0
c Var 'aux1624' direct represents '1' with '6684'
6682 -6683 6684 0
-6684 6683 0
-6684 -6682 0
c Var 'aux1624' direct represents '2' with '-6683'
6682 6684 -6683 0
c Encoding variable: aux1625 with domain: int(0..2) (representing constraint ((x_00005_00002=9) + (x_00006_00002=9)))
c Both direct and order encoding.
c Var 'aux1625' order represents '0' with '6685'
c Var 'aux1625' direct represents '0' with '6685'
c Var 'aux1625' order represents '1' with '6686'
-6685 6686 0
c Var 'aux1625' direct represents '1' with '6687'
6685 -6686 6687 0
-6687 6686 0
-6687 -6685 0
c Var 'aux1625' direct represents '2' with '-6686'
6685 6687 -6686 0
c Encoding variable: aux1626 with domain: int(0..2) (representing constraint ((x_00005_00001=9) + (x_00004_00001=9)))
c Both direct and order encoding.
c Var 'aux1626' order represents '0' with '6688'
c Var 'aux1626' direct represents '0' with '6688'
c Var 'aux1626' order represents '1' with '6689'
-6688 6689 0
c Var 'aux1626' direct represents '1' with '6690'
6688 -6689 6690 0
-6690 6689 0
-6690 -6688 0
c Var 'aux1626' direct represents '2' with '-6689'
6688 6690 -6689 0
c Encoding variable: aux1627 with domain: int(0..2) (representing constraint ((x_00004_00003=9) + (x_00004_00002=9)))
c Both direct and order encoding.
c Var 'aux1627' order represents '0' with '6691'
c Var 'aux1627' direct represents '0' with '6691'
c Var 'aux1627' order represents '1' with '6692'
-6691 6692 0
c Var 'aux1627' direct represents '1' with '6693'
6691 -6692 6693 0
-6693 6692 0
-6693 -6691 0
c Var 'aux1627' direct represents '2' with '-6692'
6691 6693 -6692 0
c Encoding variable: aux1628 with domain: int(0..3) (representing constraint ((x_00006_00003=9) + aux1627))
c Both direct and order encoding.
c Var 'aux1628' order represents '0' with '6694'
c Var 'aux1628' direct represents '0' with '6694'
c Var 'aux1628' order represents '1' with '6695'
-6694 6695 0
c Var 'aux1628' direct represents '1' with '6696'
6694 -6695 6696 0
-6696 6695 0
-6696 -6694 0
c Var 'aux1628' order represents '2' with '6697'
-6695 6697 0
c Var 'aux1628' direct represents '2' with '6698'
6695 -6697 6698 0
-6698 6697 0
-6698 -6695 0
c Var 'aux1628' direct represents '3' with '-6697'
6694 6696 6698 -6697 0
c Encoding variable: aux1629 with domain: int(0..4) (representing constraint (aux1624 + aux1626))
c Both direct and order encoding.
c Var 'aux1629' order represents '0' with '6699'
c Var 'aux1629' direct represents '0' with '6699'
c Var 'aux1629' order represents '1' with '6700'
-6699 6700 0
c Var 'aux1629' direct represents '1' with '6701'
6699 -6700 6701 0
-6701 6700 0
-6701 -6699 0
c Var 'aux1629' order represents '2' with '6702'
-6700 6702 0
c Var 'aux1629' direct represents '2' with '6703'
6700 -6702 6703 0
-6703 6702 0
-6703 -6700 0
c Var 'aux1629' order represents '3' with '6704'
-6702 6704 0
c Var 'aux1629' direct represents '3' with '6705'
6702 -6704 6705 0
-6705 6704 0
-6705 -6702 0
c Var 'aux1629' direct represents '4' with '-6704'
6699 6701 6703 6705 -6704 0
c Encoding variable: aux1630 with domain: int(0..2) (representing constraint ((x_00006_00004=1) + (x_00005_00006=1)))
c Both direct and order encoding.
c Var 'aux1630' order represents '0' with '6706'
c Var 'aux1630' direct represents '0' with '6706'
c Var 'aux1630' order represents '1' with '6707'
-6706 6707 0
c Var 'aux1630' direct represents '1' with '6708'
6706 -6707 6708 0
-6708 6707 0
-6708 -6706 0
c Var 'aux1630' direct represents '2' with '-6707'
6706 6708 -6707 0
c Encoding variable: aux1631 with domain: int(0..2) (representing constraint ((x_00005_00005=1) + (x_00006_00005=1)))
c Both direct and order encoding.
c Var 'aux1631' order represents '0' with '6709'
c Var 'aux1631' direct represents '0' with '6709'
c Var 'aux1631' order represents '1' with '6710'
-6709 6710 0
c Var 'aux1631' direct represents '1' with '6711'
6709 -6710 6711 0
-6711 6710 0
-6711 -6709 0
c Var 'aux1631' direct represents '2' with '-6710'
6709 6711 -6710 0
c Encoding variable: aux1632 with domain: int(0..2) (representing constraint ((x_00005_00004=1) + (x_00004_00004=1)))
c Both direct and order encoding.
c Var 'aux1632' order represents '0' with '6712'
c Var 'aux1632' direct represents '0' with '6712'
c Var 'aux1632' order represents '1' with '6713'
-6712 6713 0
c Var 'aux1632' direct represents '1' with '6714'
6712 -6713 6714 0
-6714 6713 0
-6714 -6712 0
c Var 'aux1632' direct represents '2' with '-6713'
6712 6714 -6713 0
c Encoding variable: aux1633 with domain: int(0..2) (representing constraint ((x_00004_00006=1) + (x_00004_00005=1)))
c Both direct and order encoding.
c Var 'aux1633' order represents '0' with '6715'
c Var 'aux1633' direct represents '0' with '6715'
c Var 'aux1633' order represents '1' with '6716'
-6715 6716 0
c Var 'aux1633' direct represents '1' with '6717'
6715 -6716 6717 0
-6717 6716 0
-6717 -6715 0
c Var 'aux1633' direct represents '2' with '-6716'
6715 6717 -6716 0
c Encoding variable: aux1634 with domain: int(0..3) (representing constraint ((x_00006_00006=1) + aux1633))
c Both direct and order encoding.
c Var 'aux1634' order represents '0' with '6718'
c Var 'aux1634' direct represents '0' with '6718'
c Var 'aux1634' order represents '1' with '6719'
-6718 6719 0
c Var 'aux1634' direct represents '1' with '6720'
6718 -6719 6720 0
-6720 6719 0
-6720 -6718 0
c Var 'aux1634' order represents '2' with '6721'
-6719 6721 0
c Var 'aux1634' direct represents '2' with '6722'
6719 -6721 6722 0
-6722 6721 0
-6722 -6719 0
c Var 'aux1634' direct represents '3' with '-6721'
6718 6720 6722 -6721 0
c Encoding variable: aux1635 with domain: int(0..4) (representing constraint (aux1630 + aux1632))
c Both direct and order encoding.
c Var 'aux1635' order represents '0' with '6723'
c Var 'aux1635' direct represents '0' with '6723'
c Var 'aux1635' order represents '1' with '6724'
-6723 6724 0
c Var 'aux1635' direct represents '1' with '6725'
6723 -6724 6725 0
-6725 6724 0
-6725 -6723 0
c Var 'aux1635' order represents '2' with '6726'
-6724 6726 0
c Var 'aux1635' direct represents '2' with '6727'
6724 -6726 6727 0
-6727 6726 0
-6727 -6724 0
c Var 'aux1635' order represents '3' with '6728'
-6726 6728 0
c Var 'aux1635' direct represents '3' with '6729'
6726 -6728 6729 0
-6729 6728 0
-6729 -6726 0
c Var 'aux1635' direct represents '4' with '-6728'
6723 6725 6727 6729 -6728 0
c Encoding variable: aux1636 with domain: int(0..2) (representing constraint ((x_00006_00004=2) + (x_00005_00006=2)))
c Both direct and order encoding.
c Var 'aux1636' order represents '0' with '6730'
c Var 'aux1636' direct represents '0' with '6730'
c Var 'aux1636' order represents '1' with '6731'
-6730 6731 0
c Var 'aux1636' direct represents '1' with '6732'
6730 -6731 6732 0
-6732 6731 0
-6732 -6730 0
c Var 'aux1636' direct represents '2' with '-6731'
6730 6732 -6731 0
c Encoding variable: aux1637 with domain: int(0..2) (representing constraint ((x_00005_00005=2) + (x_00006_00005=2)))
c Both direct and order encoding.
c Var 'aux1637' order represents '0' with '6733'
c Var 'aux1637' direct represents '0' with '6733'
c Var 'aux1637' order represents '1' with '6734'
-6733 6734 0
c Var 'aux1637' direct represents '1' with '6735'
6733 -6734 6735 0
-6735 6734 0
-6735 -6733 0
c Var 'aux1637' direct represents '2' with '-6734'
6733 6735 -6734 0
c Encoding variable: aux1638 with domain: int(0..2) (representing constraint ((x_00005_00004=2) + (x_00004_00004=2)))
c Both direct and order encoding.
c Var 'aux1638' order represents '0' with '6736'
c Var 'aux1638' direct represents '0' with '6736'
c Var 'aux1638' order represents '1' with '6737'
-6736 6737 0
c Var 'aux1638' direct represents '1' with '6738'
6736 -6737 6738 0
-6738 6737 0
-6738 -6736 0
c Var 'aux1638' direct represents '2' with '-6737'
6736 6738 -6737 0
c Encoding variable: aux1639 with domain: int(0..2) (representing constraint ((x_00004_00006=2) + (x_00004_00005=2)))
c Both direct and order encoding.
c Var 'aux1639' order represents '0' with '6739'
c Var 'aux1639' direct represents '0' with '6739'
c Var 'aux1639' order represents '1' with '6740'
-6739 6740 0
c Var 'aux1639' direct represents '1' with '6741'
6739 -6740 6741 0
-6741 6740 0
-6741 -6739 0
c Var 'aux1639' direct represents '2' with '-6740'
6739 6741 -6740 0
c Encoding variable: aux1640 with domain: int(0..3) (representing constraint ((x_00006_00006=2) + aux1639))
c Both direct and order encoding.
c Var 'aux1640' order represents '0' with '6742'
c Var 'aux1640' direct represents '0' with '6742'
c Var 'aux1640' order represents '1' with '6743'
-6742 6743 0
c Var 'aux1640' direct represents '1' with '6744'
6742 -6743 6744 0
-6744 6743 0
-6744 -6742 0
c Var 'aux1640' order represents '2' with '6745'
-6743 6745 0
c Var 'aux1640' direct represents '2' with '6746'
6743 -6745 6746 0
-6746 6745 0
-6746 -6743 0
c Var 'aux1640' direct represents '3' with '-6745'
6742 6744 6746 -6745 0
c Encoding variable: aux1641 with domain: int(0..4) (representing constraint (aux1636 + aux1638))
c Both direct and order encoding.
c Var 'aux1641' order represents '0' with '6747'
c Var 'aux1641' direct represents '0' with '6747'
c Var 'aux1641' order represents '1' with '6748'
-6747 6748 0
c Var 'aux1641' direct represents '1' with '6749'
6747 -6748 6749 0
-6749 6748 0
-6749 -6747 0
c Var 'aux1641' order represents '2' with '6750'
-6748 6750 0
c Var 'aux1641' direct represents '2' with '6751'
6748 -6750 6751 0
-6751 6750 0
-6751 -6748 0
c Var 'aux1641' order represents '3' with '6752'
-6750 6752 0
c Var 'aux1641' direct represents '3' with '6753'
6750 -6752 6753 0
-6753 6752 0
-6753 -6750 0
c Var 'aux1641' direct represents '4' with '-6752'
6747 6749 6751 6753 -6752 0
c Encoding variable: aux1642 with domain: int(0..2) (representing constraint ((x_00006_00004=3) + (x_00005_00006=3)))
c Both direct and order encoding.
c Var 'aux1642' order represents '0' with '6754'
c Var 'aux1642' direct represents '0' with '6754'
c Var 'aux1642' order represents '1' with '6755'
-6754 6755 0
c Var 'aux1642' direct represents '1' with '6756'
6754 -6755 6756 0
-6756 6755 0
-6756 -6754 0
c Var 'aux1642' direct represents '2' with '-6755'
6754 6756 -6755 0
c Encoding variable: aux1643 with domain: int(0..2) (representing constraint ((x_00005_00005=3) + (x_00006_00005=3)))
c Both direct and order encoding.
c Var 'aux1643' order represents '0' with '6757'
c Var 'aux1643' direct represents '0' with '6757'
c Var 'aux1643' order represents '1' with '6758'
-6757 6758 0
c Var 'aux1643' direct represents '1' with '6759'
6757 -6758 6759 0
-6759 6758 0
-6759 -6757 0
c Var 'aux1643' direct represents '2' with '-6758'
6757 6759 -6758 0
c Encoding variable: aux1644 with domain: int(0..2) (representing constraint ((x_00005_00004=3) + (x_00004_00004=3)))
c Both direct and order encoding.
c Var 'aux1644' order represents '0' with '6760'
c Var 'aux1644' direct represents '0' with '6760'
c Var 'aux1644' order represents '1' with '6761'
-6760 6761 0
c Var 'aux1644' direct represents '1' with '6762'
6760 -6761 6762 0
-6762 6761 0
-6762 -6760 0
c Var 'aux1644' direct represents '2' with '-6761'
6760 6762 -6761 0
c Encoding variable: aux1645 with domain: int(0..2) (representing constraint ((x_00004_00006=3) + (x_00004_00005=3)))
c Both direct and order encoding.
c Var 'aux1645' order represents '0' with '6763'
c Var 'aux1645' direct represents '0' with '6763'
c Var 'aux1645' order represents '1' with '6764'
-6763 6764 0
c Var 'aux1645' direct represents '1' with '6765'
6763 -6764 6765 0
-6765 6764 0
-6765 -6763 0
c Var 'aux1645' direct represents '2' with '-6764'
6763 6765 -6764 0
c Encoding variable: aux1646 with domain: int(0..3) (representing constraint ((x_00006_00006=3) + aux1645))
c Both direct and order encoding.
c Var 'aux1646' order represents '0' with '6766'
c Var 'aux1646' direct represents '0' with '6766'
c Var 'aux1646' order represents '1' with '6767'
-6766 6767 0
c Var 'aux1646' direct represents '1' with '6768'
6766 -6767 6768 0
-6768 6767 0
-6768 -6766 0
c Var 'aux1646' order represents '2' with '6769'
-6767 6769 0
c Var 'aux1646' direct represents '2' with '6770'
6767 -6769 6770 0
-6770 6769 0
-6770 -6767 0
c Var 'aux1646' direct represents '3' with '-6769'
6766 6768 6770 -6769 0
c Encoding variable: aux1647 with domain: int(0..4) (representing constraint (aux1642 + aux1644))
c Both direct and order encoding.
c Var 'aux1647' order represents '0' with '6771'
c Var 'aux1647' direct represents '0' with '6771'
c Var 'aux1647' order represents '1' with '6772'
-6771 6772 0
c Var 'aux1647' direct represents '1' with '6773'
6771 -6772 6773 0
-6773 6772 0
-6773 -6771 0
c Var 'aux1647' order represents '2' with '6774'
-6772 6774 0
c Var 'aux1647' direct represents '2' with '6775'
6772 -6774 6775 0
-6775 6774 0
-6775 -6772 0
c Var 'aux1647' order represents '3' with '6776'
-6774 6776 0
c Var 'aux1647' direct represents '3' with '6777'
6774 -6776 6777 0
-6777 6776 0
-6777 -6774 0
c Var 'aux1647' direct represents '4' with '-6776'
6771 6773 6775 6777 -6776 0
c Encoding variable: aux1648 with domain: int(0..2) (representing constraint ((x_00006_00004=4) + (x_00005_00006=4)))
c Both direct and order encoding.
c Var 'aux1648' order represents '0' with '6778'
c Var 'aux1648' direct represents '0' with '6778'
c Var 'aux1648' order represents '1' with '6779'
-6778 6779 0
c Var 'aux1648' direct represents '1' with '6780'
6778 -6779 6780 0
-6780 6779 0
-6780 -6778 0
c Var 'aux1648' direct represents '2' with '-6779'
6778 6780 -6779 0
c Encoding variable: aux1649 with domain: int(0..2) (representing constraint ((x_00005_00005=4) + (x_00006_00005=4)))
c Both direct and order encoding.
c Var 'aux1649' order represents '0' with '6781'
c Var 'aux1649' direct represents '0' with '6781'
c Var 'aux1649' order represents '1' with '6782'
-6781 6782 0
c Var 'aux1649' direct represents '1' with '6783'
6781 -6782 6783 0
-6783 6782 0
-6783 -6781 0
c Var 'aux1649' direct represents '2' with '-6782'
6781 6783 -6782 0
c Encoding variable: aux1650 with domain: int(0..2) (representing constraint ((x_00005_00004=4) + (x_00004_00004=4)))
c Both direct and order encoding.
c Var 'aux1650' order represents '0' with '6784'
c Var 'aux1650' direct represents '0' with '6784'
c Var 'aux1650' order represents '1' with '6785'
-6784 6785 0
c Var 'aux1650' direct represents '1' with '6786'
6784 -6785 6786 0
-6786 6785 0
-6786 -6784 0
c Var 'aux1650' direct represents '2' with '-6785'
6784 6786 -6785 0
c Encoding variable: aux1651 with domain: int(0..2) (representing constraint ((x_00004_00006=4) + (x_00004_00005=4)))
c Both direct and order encoding.
c Var 'aux1651' order represents '0' with '6787'
c Var 'aux1651' direct represents '0' with '6787'
c Var 'aux1651' order represents '1' with '6788'
-6787 6788 0
c Var 'aux1651' direct represents '1' with '6789'
6787 -6788 6789 0
-6789 6788 0
-6789 -6787 0
c Var 'aux1651' direct represents '2' with '-6788'
6787 6789 -6788 0
c Encoding variable: aux1652 with domain: int(0..3) (representing constraint ((x_00006_00006=4) + aux1651))
c Both direct and order encoding.
c Var 'aux1652' order represents '0' with '6790'
c Var 'aux1652' direct represents '0' with '6790'
c Var 'aux1652' order represents '1' with '6791'
-6790 6791 0
c Var 'aux1652' direct represents '1' with '6792'
6790 -6791 6792 0
-6792 6791 0
-6792 -6790 0
c Var 'aux1652' order represents '2' with '6793'
-6791 6793 0
c Var 'aux1652' direct represents '2' with '6794'
6791 -6793 6794 0
-6794 6793 0
-6794 -6791 0
c Var 'aux1652' direct represents '3' with '-6793'
6790 6792 6794 -6793 0
c Encoding variable: aux1653 with domain: int(0..4) (representing constraint (aux1648 + aux1650))
c Both direct and order encoding.
c Var 'aux1653' order represents '0' with '6795'
c Var 'aux1653' direct represents '0' with '6795'
c Var 'aux1653' order represents '1' with '6796'
-6795 6796 0
c Var 'aux1653' direct represents '1' with '6797'
6795 -6796 6797 0
-6797 6796 0
-6797 -6795 0
c Var 'aux1653' order represents '2' with '6798'
-6796 6798 0
c Var 'aux1653' direct represents '2' with '6799'
6796 -6798 6799 0
-6799 6798 0
-6799 -6796 0
c Var 'aux1653' order represents '3' with '6800'
-6798 6800 0
c Var 'aux1653' direct represents '3' with '6801'
6798 -6800 6801 0
-6801 6800 0
-6801 -6798 0
c Var 'aux1653' direct represents '4' with '-6800'
6795 6797 6799 6801 -6800 0
c Encoding variable: aux1654 with domain: int(0..2) (representing constraint ((x_00006_00004=5) + (x_00005_00006=5)))
c Both direct and order encoding.
c Var 'aux1654' order represents '0' with '6802'
c Var 'aux1654' direct represents '0' with '6802'
c Var 'aux1654' order represents '1' with '6803'
-6802 6803 0
c Var 'aux1654' direct represents '1' with '6804'
6802 -6803 6804 0
-6804 6803 0
-6804 -6802 0
c Var 'aux1654' direct represents '2' with '-6803'
6802 6804 -6803 0
c Encoding variable: aux1655 with domain: int(0..2) (representing constraint ((x_00005_00005=5) + (x_00006_00005=5)))
c Both direct and order encoding.
c Var 'aux1655' order represents '0' with '6805'
c Var 'aux1655' direct represents '0' with '6805'
c Var 'aux1655' order represents '1' with '6806'
-6805 6806 0
c Var 'aux1655' direct represents '1' with '6807'
6805 -6806 6807 0
-6807 6806 0
-6807 -6805 0
c Var 'aux1655' direct represents '2' with '-6806'
6805 6807 -6806 0
c Encoding variable: aux1656 with domain: int(0..2) (representing constraint ((x_00005_00004=5) + (x_00004_00004=5)))
c Both direct and order encoding.
c Var 'aux1656' order represents '0' with '6808'
c Var 'aux1656' direct represents '0' with '6808'
c Var 'aux1656' order represents '1' with '6809'
-6808 6809 0
c Var 'aux1656' direct represents '1' with '6810'
6808 -6809 6810 0
-6810 6809 0
-6810 -6808 0
c Var 'aux1656' direct represents '2' with '-6809'
6808 6810 -6809 0
c Encoding variable: aux1657 with domain: int(0..2) (representing constraint ((x_00004_00006=5) + (x_00004_00005=5)))
c Both direct and order encoding.
c Var 'aux1657' order represents '0' with '6811'
c Var 'aux1657' direct represents '0' with '6811'
c Var 'aux1657' order represents '1' with '6812'
-6811 6812 0
c Var 'aux1657' direct represents '1' with '6813'
6811 -6812 6813 0
-6813 6812 0
-6813 -6811 0
c Var 'aux1657' direct represents '2' with '-6812'
6811 6813 -6812 0
c Encoding variable: aux1658 with domain: int(0..3) (representing constraint ((x_00006_00006=5) + aux1657))
c Both direct and order encoding.
c Var 'aux1658' order represents '0' with '6814'
c Var 'aux1658' direct represents '0' with '6814'
c Var 'aux1658' order represents '1' with '6815'
-6814 6815 0
c Var 'aux1658' direct represents '1' with '6816'
6814 -6815 6816 0
-6816 6815 0
-6816 -6814 0
c Var 'aux1658' order represents '2' with '6817'
-6815 6817 0
c Var 'aux1658' direct represents '2' with '6818'
6815 -6817 6818 0
-6818 6817 0
-6818 -6815 0
c Var 'aux1658' direct represents '3' with '-6817'
6814 6816 6818 -6817 0
c Encoding variable: aux1659 with domain: int(0..4) (representing constraint (aux1654 + aux1656))
c Both direct and order encoding.
c Var 'aux1659' order represents '0' with '6819'
c Var 'aux1659' direct represents '0' with '6819'
c Var 'aux1659' order represents '1' with '6820'
-6819 6820 0
c Var 'aux1659' direct represents '1' with '6821'
6819 -6820 6821 0
-6821 6820 0
-6821 -6819 0
c Var 'aux1659' order represents '2' with '6822'
-6820 6822 0
c Var 'aux1659' direct represents '2' with '6823'
6820 -6822 6823 0
-6823 6822 0
-6823 -6820 0
c Var 'aux1659' order represents '3' with '6824'
-6822 6824 0
c Var 'aux1659' direct represents '3' with '6825'
6822 -6824 6825 0
-6825 6824 0
-6825 -6822 0
c Var 'aux1659' direct represents '4' with '-6824'
6819 6821 6823 6825 -6824 0
c Encoding variable: aux1660 with domain: int(0..2) (representing constraint ((x_00006_00004=6) + (x_00005_00006=6)))
c Both direct and order encoding.
c Var 'aux1660' order represents '0' with '6826'
c Var 'aux1660' direct represents '0' with '6826'
c Var 'aux1660' order represents '1' with '6827'
-6826 6827 0
c Var 'aux1660' direct represents '1' with '6828'
6826 -6827 6828 0
-6828 6827 0
-6828 -6826 0
c Var 'aux1660' direct represents '2' with '-6827'
6826 6828 -6827 0
c Encoding variable: aux1661 with domain: int(0..2) (representing constraint ((x_00005_00005=6) + (x_00006_00005=6)))
c Both direct and order encoding.
c Var 'aux1661' order represents '0' with '6829'
c Var 'aux1661' direct represents '0' with '6829'
c Var 'aux1661' order represents '1' with '6830'
-6829 6830 0
c Var 'aux1661' direct represents '1' with '6831'
6829 -6830 6831 0
-6831 6830 0
-6831 -6829 0
c Var 'aux1661' direct represents '2' with '-6830'
6829 6831 -6830 0
c Encoding variable: aux1662 with domain: int(0..2) (representing constraint ((x_00005_00004=6) + (x_00004_00004=6)))
c Both direct and order encoding.
c Var 'aux1662' order represents '0' with '6832'
c Var 'aux1662' direct represents '0' with '6832'
c Var 'aux1662' order represents '1' with '6833'
-6832 6833 0
c Var 'aux1662' direct represents '1' with '6834'
6832 -6833 6834 0
-6834 6833 0
-6834 -6832 0
c Var 'aux1662' direct represents '2' with '-6833'
6832 6834 -6833 0
c Encoding variable: aux1663 with domain: int(0..2) (representing constraint ((x_00004_00006=6) + (x_00004_00005=6)))
c Both direct and order encoding.
c Var 'aux1663' order represents '0' with '6835'
c Var 'aux1663' direct represents '0' with '6835'
c Var 'aux1663' order represents '1' with '6836'
-6835 6836 0
c Var 'aux1663' direct represents '1' with '6837'
6835 -6836 6837 0
-6837 6836 0
-6837 -6835 0
c Var 'aux1663' direct represents '2' with '-6836'
6835 6837 -6836 0
c Encoding variable: aux1664 with domain: int(0..3) (representing constraint ((x_00006_00006=6) + aux1663))
c Both direct and order encoding.
c Var 'aux1664' order represents '0' with '6838'
c Var 'aux1664' direct represents '0' with '6838'
c Var 'aux1664' order represents '1' with '6839'
-6838 6839 0
c Var 'aux1664' direct represents '1' with '6840'
6838 -6839 6840 0
-6840 6839 0
-6840 -6838 0
c Var 'aux1664' order represents '2' with '6841'
-6839 6841 0
c Var 'aux1664' direct represents '2' with '6842'
6839 -6841 6842 0
-6842 6841 0
-6842 -6839 0
c Var 'aux1664' direct represents '3' with '-6841'
6838 6840 6842 -6841 0
c Encoding variable: aux1665 with domain: int(0..4) (representing constraint (aux1660 + aux1662))
c Both direct and order encoding.
c Var 'aux1665' order represents '0' with '6843'
c Var 'aux1665' direct represents '0' with '6843'
c Var 'aux1665' order represents '1' with '6844'
-6843 6844 0
c Var 'aux1665' direct represents '1' with '6845'
6843 -6844 6845 0
-6845 6844 0
-6845 -6843 0
c Var 'aux1665' order represents '2' with '6846'
-6844 6846 0
c Var 'aux1665' direct represents '2' with '6847'
6844 -6846 6847 0
-6847 6846 0
-6847 -6844 0
c Var 'aux1665' order represents '3' with '6848'
-6846 6848 0
c Var 'aux1665' direct represents '3' with '6849'
6846 -6848 6849 0
-6849 6848 0
-6849 -6846 0
c Var 'aux1665' direct represents '4' with '-6848'
6843 6845 6847 6849 -6848 0
c Encoding variable: aux1666 with domain: int(0..2) (representing constraint ((x_00006_00004=7) + (x_00005_00006=7)))
c Both direct and order encoding.
c Var 'aux1666' order represents '0' with '6850'
c Var 'aux1666' direct represents '0' with '6850'
c Var 'aux1666' order represents '1' with '6851'
-6850 6851 0
c Var 'aux1666' direct represents '1' with '6852'
6850 -6851 6852 0
-6852 6851 0
-6852 -6850 0
c Var 'aux1666' direct represents '2' with '-6851'
6850 6852 -6851 0
c Encoding variable: aux1667 with domain: int(0..2) (representing constraint ((x_00005_00005=7) + (x_00006_00005=7)))
c Both direct and order encoding.
c Var 'aux1667' order represents '0' with '6853'
c Var 'aux1667' direct represents '0' with '6853'
c Var 'aux1667' order represents '1' with '6854'
-6853 6854 0
c Var 'aux1667' direct represents '1' with '6855'
6853 -6854 6855 0
-6855 6854 0
-6855 -6853 0
c Var 'aux1667' direct represents '2' with '-6854'
6853 6855 -6854 0
c Encoding variable: aux1668 with domain: int(0..2) (representing constraint ((x_00005_00004=7) + (x_00004_00004=7)))
c Both direct and order encoding.
c Var 'aux1668' order represents '0' with '6856'
c Var 'aux1668' direct represents '0' with '6856'
c Var 'aux1668' order represents '1' with '6857'
-6856 6857 0
c Var 'aux1668' direct represents '1' with '6858'
6856 -6857 6858 0
-6858 6857 0
-6858 -6856 0
c Var 'aux1668' direct represents '2' with '-6857'
6856 6858 -6857 0
c Encoding variable: aux1669 with domain: int(0..2) (representing constraint ((x_00004_00006=7) + (x_00004_00005=7)))
c Both direct and order encoding.
c Var 'aux1669' order represents '0' with '6859'
c Var 'aux1669' direct represents '0' with '6859'
c Var 'aux1669' order represents '1' with '6860'
-6859 6860 0
c Var 'aux1669' direct represents '1' with '6861'
6859 -6860 6861 0
-6861 6860 0
-6861 -6859 0
c Var 'aux1669' direct represents '2' with '-6860'
6859 6861 -6860 0
c Encoding variable: aux1670 with domain: int(0..3) (representing constraint ((x_00006_00006=7) + aux1669))
c Both direct and order encoding.
c Var 'aux1670' order represents '0' with '6862'
c Var 'aux1670' direct represents '0' with '6862'
c Var 'aux1670' order represents '1' with '6863'
-6862 6863 0
c Var 'aux1670' direct represents '1' with '6864'
6862 -6863 6864 0
-6864 6863 0
-6864 -6862 0
c Var 'aux1670' order represents '2' with '6865'
-6863 6865 0
c Var 'aux1670' direct represents '2' with '6866'
6863 -6865 6866 0
-6866 6865 0
-6866 -6863 0
c Var 'aux1670' direct represents '3' with '-6865'
6862 6864 6866 -6865 0
c Encoding variable: aux1671 with domain: int(0..4) (representing constraint (aux1666 + aux1668))
c Both direct and order encoding.
c Var 'aux1671' order represents '0' with '6867'
c Var 'aux1671' direct represents '0' with '6867'
c Var 'aux1671' order represents '1' with '6868'
-6867 6868 0
c Var 'aux1671' direct represents '1' with '6869'
6867 -6868 6869 0
-6869 6868 0
-6869 -6867 0
c Var 'aux1671' order represents '2' with '6870'
-6868 6870 0
c Var 'aux1671' direct represents '2' with '6871'
6868 -6870 6871 0
-6871 6870 0
-6871 -6868 0
c Var 'aux1671' order represents '3' with '6872'
-6870 6872 0
c Var 'aux1671' direct represents '3' with '6873'
6870 -6872 6873 0
-6873 6872 0
-6873 -6870 0
c Var 'aux1671' direct represents '4' with '-6872'
6867 6869 6871 6873 -6872 0
c Encoding variable: aux1672 with domain: int(0..2) (representing constraint ((x_00006_00004=8) + (x_00005_00006=8)))
c Both direct and order encoding.
c Var 'aux1672' order represents '0' with '6874'
c Var 'aux1672' direct represents '0' with '6874'
c Var 'aux1672' order represents '1' with '6875'
-6874 6875 0
c Var 'aux1672' direct represents '1' with '6876'
6874 -6875 6876 0
-6876 6875 0
-6876 -6874 0
c Var 'aux1672' direct represents '2' with '-6875'
6874 6876 -6875 0
c Encoding variable: aux1673 with domain: int(0..2) (representing constraint ((x_00005_00005=8) + (x_00006_00005=8)))
c Both direct and order encoding.
c Var 'aux1673' order represents '0' with '6877'
c Var 'aux1673' direct represents '0' with '6877'
c Var 'aux1673' order represents '1' with '6878'
-6877 6878 0
c Var 'aux1673' direct represents '1' with '6879'
6877 -6878 6879 0
-6879 6878 0
-6879 -6877 0
c Var 'aux1673' direct represents '2' with '-6878'
6877 6879 -6878 0
c Encoding variable: aux1674 with domain: int(0..2) (representing constraint ((x_00005_00004=8) + (x_00004_00004=8)))
c Both direct and order encoding.
c Var 'aux1674' order represents '0' with '6880'
c Var 'aux1674' direct represents '0' with '6880'
c Var 'aux1674' order represents '1' with '6881'
-6880 6881 0
c Var 'aux1674' direct represents '1' with '6882'
6880 -6881 6882 0
-6882 6881 0
-6882 -6880 0
c Var 'aux1674' direct represents '2' with '-6881'
6880 6882 -6881 0
c Encoding variable: aux1675 with domain: int(0..2) (representing constraint ((x_00004_00006=8) + (x_00004_00005=8)))
c Both direct and order encoding.
c Var 'aux1675' order represents '0' with '6883'
c Var 'aux1675' direct represents '0' with '6883'
c Var 'aux1675' order represents '1' with '6884'
-6883 6884 0
c Var 'aux1675' direct represents '1' with '6885'
6883 -6884 6885 0
-6885 6884 0
-6885 -6883 0
c Var 'aux1675' direct represents '2' with '-6884'
6883 6885 -6884 0
c Encoding variable: aux1676 with domain: int(0..3) (representing constraint ((x_00006_00006=8) + aux1675))
c Both direct and order encoding.
c Var 'aux1676' order represents '0' with '6886'
c Var 'aux1676' direct represents '0' with '6886'
c Var 'aux1676' order represents '1' with '6887'
-6886 6887 0
c Var 'aux1676' direct represents '1' with '6888'
6886 -6887 6888 0
-6888 6887 0
-6888 -6886 0
c Var 'aux1676' order represents '2' with '6889'
-6887 6889 0
c Var 'aux1676' direct represents '2' with '6890'
6887 -6889 6890 0
-6890 6889 0
-6890 -6887 0
c Var 'aux1676' direct represents '3' with '-6889'
6886 6888 6890 -6889 0
c Encoding variable: aux1677 with domain: int(0..4) (representing constraint (aux1672 + aux1674))
c Both direct and order encoding.
c Var 'aux1677' order represents '0' with '6891'
c Var 'aux1677' direct represents '0' with '6891'
c Var 'aux1677' order represents '1' with '6892'
-6891 6892 0
c Var 'aux1677' direct represents '1' with '6893'
6891 -6892 6893 0
-6893 6892 0
-6893 -6891 0
c Var 'aux1677' order represents '2' with '6894'
-6892 6894 0
c Var 'aux1677' direct represents '2' with '6895'
6892 -6894 6895 0
-6895 6894 0
-6895 -6892 0
c Var 'aux1677' order represents '3' with '6896'
-6894 6896 0
c Var 'aux1677' direct represents '3' with '6897'
6894 -6896 6897 0
-6897 6896 0
-6897 -6894 0
c Var 'aux1677' direct represents '4' with '-6896'
6891 6893 6895 6897 -6896 0
c Encoding variable: aux1678 with domain: int(0..2) (representing constraint ((x_00006_00004=9) + (x_00005_00006=9)))
c Both direct and order encoding.
c Var 'aux1678' order represents '0' with '6898'
c Var 'aux1678' direct represents '0' with '6898'
c Var 'aux1678' order represents '1' with '6899'
-6898 6899 0
c Var 'aux1678' direct represents '1' with '6900'
6898 -6899 6900 0
-6900 6899 0
-6900 -6898 0
c Var 'aux1678' direct represents '2' with '-6899'
6898 6900 -6899 0
c Encoding variable: aux1679 with domain: int(0..2) (representing constraint ((x_00005_00005=9) + (x_00006_00005=9)))
c Both direct and order encoding.
c Var 'aux1679' order represents '0' with '6901'
c Var 'aux1679' direct represents '0' with '6901'
c Var 'aux1679' order represents '1' with '6902'
-6901 6902 0
c Var 'aux1679' direct represents '1' with '6903'
6901 -6902 6903 0
-6903 6902 0
-6903 -6901 0
c Var 'aux1679' direct represents '2' with '-6902'
6901 6903 -6902 0
c Encoding variable: aux1680 with domain: int(0..2) (representing constraint ((x_00005_00004=9) + (x_00004_00004=9)))
c Both direct and order encoding.
c Var 'aux1680' order represents '0' with '6904'
c Var 'aux1680' direct represents '0' with '6904'
c Var 'aux1680' order represents '1' with '6905'
-6904 6905 0
c Var 'aux1680' direct represents '1' with '6906'
6904 -6905 6906 0
-6906 6905 0
-6906 -6904 0
c Var 'aux1680' direct represents '2' with '-6905'
6904 6906 -6905 0
c Encoding variable: aux1681 with domain: int(0..2) (representing constraint ((x_00004_00006=9) + (x_00004_00005=9)))
c Both direct and order encoding.
c Var 'aux1681' order represents '0' with '6907'
c Var 'aux1681' direct represents '0' with '6907'
c Var 'aux1681' order represents '1' with '6908'
-6907 6908 0
c Var 'aux1681' direct represents '1' with '6909'
6907 -6908 6909 0
-6909 6908 0
-6909 -6907 0
c Var 'aux1681' direct represents '2' with '-6908'
6907 6909 -6908 0
c Encoding variable: aux1682 with domain: int(0..3) (representing constraint ((x_00006_00006=9) + aux1681))
c Both direct and order encoding.
c Var 'aux1682' order represents '0' with '6910'
c Var 'aux1682' direct represents '0' with '6910'
c Var 'aux1682' order represents '1' with '6911'
-6910 6911 0
c Var 'aux1682' direct represents '1' with '6912'
6910 -6911 6912 0
-6912 6911 0
-6912 -6910 0
c Var 'aux1682' order represents '2' with '6913'
-6911 6913 0
c Var 'aux1682' direct represents '2' with '6914'
6911 -6913 6914 0
-6914 6913 0
-6914 -6911 0
c Var 'aux1682' direct represents '3' with '-6913'
6910 6912 6914 -6913 0
c Encoding variable: aux1683 with domain: int(0..4) (representing constraint (aux1678 + aux1680))
c Both direct and order encoding.
c Var 'aux1683' order represents '0' with '6915'
c Var 'aux1683' direct represents '0' with '6915'
c Var 'aux1683' order represents '1' with '6916'
-6915 6916 0
c Var 'aux1683' direct represents '1' with '6917'
6915 -6916 6917 0
-6917 6916 0
-6917 -6915 0
c Var 'aux1683' order represents '2' with '6918'
-6916 6918 0
c Var 'aux1683' direct represents '2' with '6919'
6916 -6918 6919 0
-6919 6918 0
-6919 -6916 0
c Var 'aux1683' order represents '3' with '6920'
-6918 6920 0
c Var 'aux1683' direct represents '3' with '6921'
6918 -6920 6921 0
-6921 6920 0
-6921 -6918 0
c Var 'aux1683' direct represents '4' with '-6920'
6915 6917 6919 6921 -6920 0
c Encoding variable: aux1684 with domain: int(0..2) (representing constraint ((x_00006_00007=1) + (x_00005_00009=1)))
c Both direct and order encoding.
c Var 'aux1684' order represents '0' with '6922'
c Var 'aux1684' direct represents '0' with '6922'
c Var 'aux1684' order represents '1' with '6923'
-6922 6923 0
c Var 'aux1684' direct represents '1' with '6924'
6922 -6923 6924 0
-6924 6923 0
-6924 -6922 0
c Var 'aux1684' direct represents '2' with '-6923'
6922 6924 -6923 0
c Encoding variable: aux1685 with domain: int(0..2) (representing constraint ((x_00005_00008=1) + (x_00006_00008=1)))
c Both direct and order encoding.
c Var 'aux1685' order represents '0' with '6925'
c Var 'aux1685' direct represents '0' with '6925'
c Var 'aux1685' order represents '1' with '6926'
-6925 6926 0
c Var 'aux1685' direct represents '1' with '6927'
6925 -6926 6927 0
-6927 6926 0
-6927 -6925 0
c Var 'aux1685' direct represents '2' with '-6926'
6925 6927 -6926 0
c Encoding variable: aux1686 with domain: int(0..2) (representing constraint ((x_00005_00007=1) + (x_00004_00007=1)))
c Both direct and order encoding.
c Var 'aux1686' order represents '0' with '6928'
c Var 'aux1686' direct represents '0' with '6928'
c Var 'aux1686' order represents '1' with '6929'
-6928 6929 0
c Var 'aux1686' direct represents '1' with '6930'
6928 -6929 6930 0
-6930 6929 0
-6930 -6928 0
c Var 'aux1686' direct represents '2' with '-6929'
6928 6930 -6929 0
c Encoding variable: aux1687 with domain: int(0..2) (representing constraint ((x_00004_00009=1) + (x_00004_00008=1)))
c Both direct and order encoding.
c Var 'aux1687' order represents '0' with '6931'
c Var 'aux1687' direct represents '0' with '6931'
c Var 'aux1687' order represents '1' with '6932'
-6931 6932 0
c Var 'aux1687' direct represents '1' with '6933'
6931 -6932 6933 0
-6933 6932 0
-6933 -6931 0
c Var 'aux1687' direct represents '2' with '-6932'
6931 6933 -6932 0
c Encoding variable: aux1688 with domain: int(0..3) (representing constraint ((x_00006_00009=1) + aux1687))
c Both direct and order encoding.
c Var 'aux1688' order represents '0' with '6934'
c Var 'aux1688' direct represents '0' with '6934'
c Var 'aux1688' order represents '1' with '6935'
-6934 6935 0
c Var 'aux1688' direct represents '1' with '6936'
6934 -6935 6936 0
-6936 6935 0
-6936 -6934 0
c Var 'aux1688' order represents '2' with '6937'
-6935 6937 0
c Var 'aux1688' direct represents '2' with '6938'
6935 -6937 6938 0
-6938 6937 0
-6938 -6935 0
c Var 'aux1688' direct represents '3' with '-6937'
6934 6936 6938 -6937 0
c Encoding variable: aux1689 with domain: int(0..4) (representing constraint (aux1684 + aux1686))
c Both direct and order encoding.
c Var 'aux1689' order represents '0' with '6939'
c Var 'aux1689' direct represents '0' with '6939'
c Var 'aux1689' order represents '1' with '6940'
-6939 6940 0
c Var 'aux1689' direct represents '1' with '6941'
6939 -6940 6941 0
-6941 6940 0
-6941 -6939 0
c Var 'aux1689' order represents '2' with '6942'
-6940 6942 0
c Var 'aux1689' direct represents '2' with '6943'
6940 -6942 6943 0
-6943 6942 0
-6943 -6940 0
c Var 'aux1689' order represents '3' with '6944'
-6942 6944 0
c Var 'aux1689' direct represents '3' with '6945'
6942 -6944 6945 0
-6945 6944 0
-6945 -6942 0
c Var 'aux1689' direct represents '4' with '-6944'
6939 6941 6943 6945 -6944 0
c Encoding variable: aux1690 with domain: int(0..2) (representing constraint ((x_00006_00007=2) + (x_00005_00009=2)))
c Both direct and order encoding.
c Var 'aux1690' order represents '0' with '6946'
c Var 'aux1690' direct represents '0' with '6946'
c Var 'aux1690' order represents '1' with '6947'
-6946 6947 0
c Var 'aux1690' direct represents '1' with '6948'
6946 -6947 6948 0
-6948 6947 0
-6948 -6946 0
c Var 'aux1690' direct represents '2' with '-6947'
6946 6948 -6947 0
c Encoding variable: aux1691 with domain: int(0..2) (representing constraint ((x_00005_00008=2) + (x_00006_00008=2)))
c Both direct and order encoding.
c Var 'aux1691' order represents '0' with '6949'
c Var 'aux1691' direct represents '0' with '6949'
c Var 'aux1691' order represents '1' with '6950'
-6949 6950 0
c Var 'aux1691' direct represents '1' with '6951'
6949 -6950 6951 0
-6951 6950 0
-6951 -6949 0
c Var 'aux1691' direct represents '2' with '-6950'
6949 6951 -6950 0
c Encoding variable: aux1692 with domain: int(0..2) (representing constraint ((x_00005_00007=2) + (x_00004_00007=2)))
c Both direct and order encoding.
c Var 'aux1692' order represents '0' with '6952'
c Var 'aux1692' direct represents '0' with '6952'
c Var 'aux1692' order represents '1' with '6953'
-6952 6953 0
c Var 'aux1692' direct represents '1' with '6954'
6952 -6953 6954 0
-6954 6953 0
-6954 -6952 0
c Var 'aux1692' direct represents '2' with '-6953'
6952 6954 -6953 0
c Encoding variable: aux1693 with domain: int(0..2) (representing constraint ((x_00004_00009=2) + (x_00004_00008=2)))
c Both direct and order encoding.
c Var 'aux1693' order represents '0' with '6955'
c Var 'aux1693' direct represents '0' with '6955'
c Var 'aux1693' order represents '1' with '6956'
-6955 6956 0
c Var 'aux1693' direct represents '1' with '6957'
6955 -6956 6957 0
-6957 6956 0
-6957 -6955 0
c Var 'aux1693' direct represents '2' with '-6956'
6955 6957 -6956 0
c Encoding variable: aux1694 with domain: int(0..3) (representing constraint ((x_00006_00009=2) + aux1693))
c Both direct and order encoding.
c Var 'aux1694' order represents '0' with '6958'
c Var 'aux1694' direct represents '0' with '6958'
c Var 'aux1694' order represents '1' with '6959'
-6958 6959 0
c Var 'aux1694' direct represents '1' with '6960'
6958 -6959 6960 0
-6960 6959 0
-6960 -6958 0
c Var 'aux1694' order represents '2' with '6961'
-6959 6961 0
c Var 'aux1694' direct represents '2' with '6962'
6959 -6961 6962 0
-6962 6961 0
-6962 -6959 0
c Var 'aux1694' direct represents '3' with '-6961'
6958 6960 6962 -6961 0
c Encoding variable: aux1695 with domain: int(0..4) (representing constraint (aux1690 + aux1692))
c Both direct and order encoding.
c Var 'aux1695' order represents '0' with '6963'
c Var 'aux1695' direct represents '0' with '6963'
c Var 'aux1695' order represents '1' with '6964'
-6963 6964 0
c Var 'aux1695' direct represents '1' with '6965'
6963 -6964 6965 0
-6965 6964 0
-6965 -6963 0
c Var 'aux1695' order represents '2' with '6966'
-6964 6966 0
c Var 'aux1695' direct represents '2' with '6967'
6964 -6966 6967 0
-6967 6966 0
-6967 -6964 0
c Var 'aux1695' order represents '3' with '6968'
-6966 6968 0
c Var 'aux1695' direct represents '3' with '6969'
6966 -6968 6969 0
-6969 6968 0
-6969 -6966 0
c Var 'aux1695' direct represents '4' with '-6968'
6963 6965 6967 6969 -6968 0
c Encoding variable: aux1696 with domain: int(0..2) (representing constraint ((x_00006_00007=3) + (x_00005_00009=3)))
c Both direct and order encoding.
c Var 'aux1696' order represents '0' with '6970'
c Var 'aux1696' direct represents '0' with '6970'
c Var 'aux1696' order represents '1' with '6971'
-6970 6971 0
c Var 'aux1696' direct represents '1' with '6972'
6970 -6971 6972 0
-6972 6971 0
-6972 -6970 0
c Var 'aux1696' direct represents '2' with '-6971'
6970 6972 -6971 0
c Encoding variable: aux1697 with domain: int(0..2) (representing constraint ((x_00005_00008=3) + (x_00006_00008=3)))
c Both direct and order encoding.
c Var 'aux1697' order represents '0' with '6973'
c Var 'aux1697' direct represents '0' with '6973'
c Var 'aux1697' order represents '1' with '6974'
-6973 6974 0
c Var 'aux1697' direct represents '1' with '6975'
6973 -6974 6975 0
-6975 6974 0
-6975 -6973 0
c Var 'aux1697' direct represents '2' with '-6974'
6973 6975 -6974 0
c Encoding variable: aux1698 with domain: int(0..2) (representing constraint ((x_00005_00007=3) + (x_00004_00007=3)))
c Both direct and order encoding.
c Var 'aux1698' order represents '0' with '6976'
c Var 'aux1698' direct represents '0' with '6976'
c Var 'aux1698' order represents '1' with '6977'
-6976 6977 0
c Var 'aux1698' direct represents '1' with '6978'
6976 -6977 6978 0
-6978 6977 0
-6978 -6976 0
c Var 'aux1698' direct represents '2' with '-6977'
6976 6978 -6977 0
c Encoding variable: aux1699 with domain: int(0..2) (representing constraint ((x_00004_00009=3) + (x_00004_00008=3)))
c Both direct and order encoding.
c Var 'aux1699' order represents '0' with '6979'
c Var 'aux1699' direct represents '0' with '6979'
c Var 'aux1699' order represents '1' with '6980'
-6979 6980 0
c Var 'aux1699' direct represents '1' with '6981'
6979 -6980 6981 0
-6981 6980 0
-6981 -6979 0
c Var 'aux1699' direct represents '2' with '-6980'
6979 6981 -6980 0
c Encoding variable: aux1700 with domain: int(0..3) (representing constraint ((x_00006_00009=3) + aux1699))
c Both direct and order encoding.
c Var 'aux1700' order represents '0' with '6982'
c Var 'aux1700' direct represents '0' with '6982'
c Var 'aux1700' order represents '1' with '6983'
-6982 6983 0
c Var 'aux1700' direct represents '1' with '6984'
6982 -6983 6984 0
-6984 6983 0
-6984 -6982 0
c Var 'aux1700' order represents '2' with '6985'
-6983 6985 0
c Var 'aux1700' direct represents '2' with '6986'
6983 -6985 6986 0
-6986 6985 0
-6986 -6983 0
c Var 'aux1700' direct represents '3' with '-6985'
6982 6984 6986 -6985 0
c Encoding variable: aux1701 with domain: int(0..4) (representing constraint (aux1696 + aux1698))
c Both direct and order encoding.
c Var 'aux1701' order represents '0' with '6987'
c Var 'aux1701' direct represents '0' with '6987'
c Var 'aux1701' order represents '1' with '6988'
-6987 6988 0
c Var 'aux1701' direct represents '1' with '6989'
6987 -6988 6989 0
-6989 6988 0
-6989 -6987 0
c Var 'aux1701' order represents '2' with '6990'
-6988 6990 0
c Var 'aux1701' direct represents '2' with '6991'
6988 -6990 6991 0
-6991 6990 0
-6991 -6988 0
c Var 'aux1701' order represents '3' with '6992'
-6990 6992 0
c Var 'aux1701' direct represents '3' with '6993'
6990 -6992 6993 0
-6993 6992 0
-6993 -6990 0
c Var 'aux1701' direct represents '4' with '-6992'
6987 6989 6991 6993 -6992 0
c Encoding variable: aux1702 with domain: int(0..2) (representing constraint ((x_00006_00007=4) + (x_00005_00009=4)))
c Both direct and order encoding.
c Var 'aux1702' order represents '0' with '6994'
c Var 'aux1702' direct represents '0' with '6994'
c Var 'aux1702' order represents '1' with '6995'
-6994 6995 0
c Var 'aux1702' direct represents '1' with '6996'
6994 -6995 6996 0
-6996 6995 0
-6996 -6994 0
c Var 'aux1702' direct represents '2' with '-6995'
6994 6996 -6995 0
c Encoding variable: aux1703 with domain: int(0..2) (representing constraint ((x_00005_00008=4) + (x_00006_00008=4)))
c Both direct and order encoding.
c Var 'aux1703' order represents '0' with '6997'
c Var 'aux1703' direct represents '0' with '6997'
c Var 'aux1703' order represents '1' with '6998'
-6997 6998 0
c Var 'aux1703' direct represents '1' with '6999'
6997 -6998 6999 0
-6999 6998 0
-6999 -6997 0
c Var 'aux1703' direct represents '2' with '-6998'
6997 6999 -6998 0
c Encoding variable: aux1704 with domain: int(0..2) (representing constraint ((x_00005_00007=4) + (x_00004_00007=4)))
c Both direct and order encoding.
c Var 'aux1704' order represents '0' with '7000'
c Var 'aux1704' direct represents '0' with '7000'
c Var 'aux1704' order represents '1' with '7001'
-7000 7001 0
c Var 'aux1704' direct represents '1' with '7002'
7000 -7001 7002 0
-7002 7001 0
-7002 -7000 0
c Var 'aux1704' direct represents '2' with '-7001'
7000 7002 -7001 0
c Encoding variable: aux1705 with domain: int(0..2) (representing constraint ((x_00004_00009=4) + (x_00004_00008=4)))
c Both direct and order encoding.
c Var 'aux1705' order represents '0' with '7003'
c Var 'aux1705' direct represents '0' with '7003'
c Var 'aux1705' order represents '1' with '7004'
-7003 7004 0
c Var 'aux1705' direct represents '1' with '7005'
7003 -7004 7005 0
-7005 7004 0
-7005 -7003 0
c Var 'aux1705' direct represents '2' with '-7004'
7003 7005 -7004 0
c Encoding variable: aux1706 with domain: int(0..3) (representing constraint ((x_00006_00009=4) + aux1705))
c Both direct and order encoding.
c Var 'aux1706' order represents '0' with '7006'
c Var 'aux1706' direct represents '0' with '7006'
c Var 'aux1706' order represents '1' with '7007'
-7006 7007 0
c Var 'aux1706' direct represents '1' with '7008'
7006 -7007 7008 0
-7008 7007 0
-7008 -7006 0
c Var 'aux1706' order represents '2' with '7009'
-7007 7009 0
c Var 'aux1706' direct represents '2' with '7010'
7007 -7009 7010 0
-7010 7009 0
-7010 -7007 0
c Var 'aux1706' direct represents '3' with '-7009'
7006 7008 7010 -7009 0
c Encoding variable: aux1707 with domain: int(0..4) (representing constraint (aux1702 + aux1704))
c Both direct and order encoding.
c Var 'aux1707' order represents '0' with '7011'
c Var 'aux1707' direct represents '0' with '7011'
c Var 'aux1707' order represents '1' with '7012'
-7011 7012 0
c Var 'aux1707' direct represents '1' with '7013'
7011 -7012 7013 0
-7013 7012 0
-7013 -7011 0
c Var 'aux1707' order represents '2' with '7014'
-7012 7014 0
c Var 'aux1707' direct represents '2' with '7015'
7012 -7014 7015 0
-7015 7014 0
-7015 -7012 0
c Var 'aux1707' order represents '3' with '7016'
-7014 7016 0
c Var 'aux1707' direct represents '3' with '7017'
7014 -7016 7017 0
-7017 7016 0
-7017 -7014 0
c Var 'aux1707' direct represents '4' with '-7016'
7011 7013 7015 7017 -7016 0
c Encoding variable: aux1708 with domain: int(0..2) (representing constraint ((x_00006_00007=5) + (x_00005_00009=5)))
c Both direct and order encoding.
c Var 'aux1708' order represents '0' with '7018'
c Var 'aux1708' direct represents '0' with '7018'
c Var 'aux1708' order represents '1' with '7019'
-7018 7019 0
c Var 'aux1708' direct represents '1' with '7020'
7018 -7019 7020 0
-7020 7019 0
-7020 -7018 0
c Var 'aux1708' direct represents '2' with '-7019'
7018 7020 -7019 0
c Encoding variable: aux1709 with domain: int(0..2) (representing constraint ((x_00005_00008=5) + (x_00006_00008=5)))
c Both direct and order encoding.
c Var 'aux1709' order represents '0' with '7021'
c Var 'aux1709' direct represents '0' with '7021'
c Var 'aux1709' order represents '1' with '7022'
-7021 7022 0
c Var 'aux1709' direct represents '1' with '7023'
7021 -7022 7023 0
-7023 7022 0
-7023 -7021 0
c Var 'aux1709' direct represents '2' with '-7022'
7021 7023 -7022 0
c Encoding variable: aux1710 with domain: int(0..2) (representing constraint ((x_00005_00007=5) + (x_00004_00007=5)))
c Both direct and order encoding.
c Var 'aux1710' order represents '0' with '7024'
c Var 'aux1710' direct represents '0' with '7024'
c Var 'aux1710' order represents '1' with '7025'
-7024 7025 0
c Var 'aux1710' direct represents '1' with '7026'
7024 -7025 7026 0
-7026 7025 0
-7026 -7024 0
c Var 'aux1710' direct represents '2' with '-7025'
7024 7026 -7025 0
c Encoding variable: aux1711 with domain: int(0..2) (representing constraint ((x_00004_00009=5) + (x_00004_00008=5)))
c Both direct and order encoding.
c Var 'aux1711' order represents '0' with '7027'
c Var 'aux1711' direct represents '0' with '7027'
c Var 'aux1711' order represents '1' with '7028'
-7027 7028 0
c Var 'aux1711' direct represents '1' with '7029'
7027 -7028 7029 0
-7029 7028 0
-7029 -7027 0
c Var 'aux1711' direct represents '2' with '-7028'
7027 7029 -7028 0
c Encoding variable: aux1712 with domain: int(0..3) (representing constraint ((x_00006_00009=5) + aux1711))
c Both direct and order encoding.
c Var 'aux1712' order represents '0' with '7030'
c Var 'aux1712' direct represents '0' with '7030'
c Var 'aux1712' order represents '1' with '7031'
-7030 7031 0
c Var 'aux1712' direct represents '1' with '7032'
7030 -7031 7032 0
-7032 7031 0
-7032 -7030 0
c Var 'aux1712' order represents '2' with '7033'
-7031 7033 0
c Var 'aux1712' direct represents '2' with '7034'
7031 -7033 7034 0
-7034 7033 0
-7034 -7031 0
c Var 'aux1712' direct represents '3' with '-7033'
7030 7032 7034 -7033 0
c Encoding variable: aux1713 with domain: int(0..4) (representing constraint (aux1708 + aux1710))
c Both direct and order encoding.
c Var 'aux1713' order represents '0' with '7035'
c Var 'aux1713' direct represents '0' with '7035'
c Var 'aux1713' order represents '1' with '7036'
-7035 7036 0
c Var 'aux1713' direct represents '1' with '7037'
7035 -7036 7037 0
-7037 7036 0
-7037 -7035 0
c Var 'aux1713' order represents '2' with '7038'
-7036 7038 0
c Var 'aux1713' direct represents '2' with '7039'
7036 -7038 7039 0
-7039 7038 0
-7039 -7036 0
c Var 'aux1713' order represents '3' with '7040'
-7038 7040 0
c Var 'aux1713' direct represents '3' with '7041'
7038 -7040 7041 0
-7041 7040 0
-7041 -7038 0
c Var 'aux1713' direct represents '4' with '-7040'
7035 7037 7039 7041 -7040 0
c Encoding variable: aux1714 with domain: int(0..2) (representing constraint ((x_00006_00007=6) + (x_00005_00009=6)))
c Both direct and order encoding.
c Var 'aux1714' order represents '0' with '7042'
c Var 'aux1714' direct represents '0' with '7042'
c Var 'aux1714' order represents '1' with '7043'
-7042 7043 0
c Var 'aux1714' direct represents '1' with '7044'
7042 -7043 7044 0
-7044 7043 0
-7044 -7042 0
c Var 'aux1714' direct represents '2' with '-7043'
7042 7044 -7043 0
c Encoding variable: aux1715 with domain: int(0..2) (representing constraint ((x_00005_00008=6) + (x_00006_00008=6)))
c Both direct and order encoding.
c Var 'aux1715' order represents '0' with '7045'
c Var 'aux1715' direct represents '0' with '7045'
c Var 'aux1715' order represents '1' with '7046'
-7045 7046 0
c Var 'aux1715' direct represents '1' with '7047'
7045 -7046 7047 0
-7047 7046 0
-7047 -7045 0
c Var 'aux1715' direct represents '2' with '-7046'
7045 7047 -7046 0
c Encoding variable: aux1716 with domain: int(0..2) (representing constraint ((x_00005_00007=6) + (x_00004_00007=6)))
c Both direct and order encoding.
c Var 'aux1716' order represents '0' with '7048'
c Var 'aux1716' direct represents '0' with '7048'
c Var 'aux1716' order represents '1' with '7049'
-7048 7049 0
c Var 'aux1716' direct represents '1' with '7050'
7048 -7049 7050 0
-7050 7049 0
-7050 -7048 0
c Var 'aux1716' direct represents '2' with '-7049'
7048 7050 -7049 0
c Encoding variable: aux1717 with domain: int(0..2) (representing constraint ((x_00004_00009=6) + (x_00004_00008=6)))
c Both direct and order encoding.
c Var 'aux1717' order represents '0' with '7051'
c Var 'aux1717' direct represents '0' with '7051'
c Var 'aux1717' order represents '1' with '7052'
-7051 7052 0
c Var 'aux1717' direct represents '1' with '7053'
7051 -7052 7053 0
-7053 7052 0
-7053 -7051 0
c Var 'aux1717' direct represents '2' with '-7052'
7051 7053 -7052 0
c Encoding variable: aux1718 with domain: int(0..3) (representing constraint ((x_00006_00009=6) + aux1717))
c Both direct and order encoding.
c Var 'aux1718' order represents '0' with '7054'
c Var 'aux1718' direct represents '0' with '7054'
c Var 'aux1718' order represents '1' with '7055'
-7054 7055 0
c Var 'aux1718' direct represents '1' with '7056'
7054 -7055 7056 0
-7056 7055 0
-7056 -7054 0
c Var 'aux1718' order represents '2' with '7057'
-7055 7057 0
c Var 'aux1718' direct represents '2' with '7058'
7055 -7057 7058 0
-7058 7057 0
-7058 -7055 0
c Var 'aux1718' direct represents '3' with '-7057'
7054 7056 7058 -7057 0
c Encoding variable: aux1719 with domain: int(0..4) (representing constraint (aux1714 + aux1716))
c Both direct and order encoding.
c Var 'aux1719' order represents '0' with '7059'
c Var 'aux1719' direct represents '0' with '7059'
c Var 'aux1719' order represents '1' with '7060'
-7059 7060 0
c Var 'aux1719' direct represents '1' with '7061'
7059 -7060 7061 0
-7061 7060 0
-7061 -7059 0
c Var 'aux1719' order represents '2' with '7062'
-7060 7062 0
c Var 'aux1719' direct represents '2' with '7063'
7060 -7062 7063 0
-7063 7062 0
-7063 -7060 0
c Var 'aux1719' order represents '3' with '7064'
-7062 7064 0
c Var 'aux1719' direct represents '3' with '7065'
7062 -7064 7065 0
-7065 7064 0
-7065 -7062 0
c Var 'aux1719' direct represents '4' with '-7064'
7059 7061 7063 7065 -7064 0
c Encoding variable: aux1720 with domain: int(0..2) (representing constraint ((x_00006_00007=7) + (x_00005_00009=7)))
c Both direct and order encoding.
c Var 'aux1720' order represents '0' with '7066'
c Var 'aux1720' direct represents '0' with '7066'
c Var 'aux1720' order represents '1' with '7067'
-7066 7067 0
c Var 'aux1720' direct represents '1' with '7068'
7066 -7067 7068 0
-7068 7067 0
-7068 -7066 0
c Var 'aux1720' direct represents '2' with '-7067'
7066 7068 -7067 0
c Encoding variable: aux1721 with domain: int(0..2) (representing constraint ((x_00005_00008=7) + (x_00006_00008=7)))
c Both direct and order encoding.
c Var 'aux1721' order represents '0' with '7069'
c Var 'aux1721' direct represents '0' with '7069'
c Var 'aux1721' order represents '1' with '7070'
-7069 7070 0
c Var 'aux1721' direct represents '1' with '7071'
7069 -7070 7071 0
-7071 7070 0
-7071 -7069 0
c Var 'aux1721' direct represents '2' with '-7070'
7069 7071 -7070 0
c Encoding variable: aux1722 with domain: int(0..2) (representing constraint ((x_00005_00007=7) + (x_00004_00007=7)))
c Both direct and order encoding.
c Var 'aux1722' order represents '0' with '7072'
c Var 'aux1722' direct represents '0' with '7072'
c Var 'aux1722' order represents '1' with '7073'
-7072 7073 0
c Var 'aux1722' direct represents '1' with '7074'
7072 -7073 7074 0
-7074 7073 0
-7074 -7072 0
c Var 'aux1722' direct represents '2' with '-7073'
7072 7074 -7073 0
c Encoding variable: aux1723 with domain: int(0..2) (representing constraint ((x_00004_00009=7) + (x_00004_00008=7)))
c Both direct and order encoding.
c Var 'aux1723' order represents '0' with '7075'
c Var 'aux1723' direct represents '0' with '7075'
c Var 'aux1723' order represents '1' with '7076'
-7075 7076 0
c Var 'aux1723' direct represents '1' with '7077'
7075 -7076 7077 0
-7077 7076 0
-7077 -7075 0
c Var 'aux1723' direct represents '2' with '-7076'
7075 7077 -7076 0
c Encoding variable: aux1724 with domain: int(0..3) (representing constraint ((x_00006_00009=7) + aux1723))
c Both direct and order encoding.
c Var 'aux1724' order represents '0' with '7078'
c Var 'aux1724' direct represents '0' with '7078'
c Var 'aux1724' order represents '1' with '7079'
-7078 7079 0
c Var 'aux1724' direct represents '1' with '7080'
7078 -7079 7080 0
-7080 7079 0
-7080 -7078 0
c Var 'aux1724' order represents '2' with '7081'
-7079 7081 0
c Var 'aux1724' direct represents '2' with '7082'
7079 -7081 7082 0
-7082 7081 0
-7082 -7079 0
c Var 'aux1724' direct represents '3' with '-7081'
7078 7080 7082 -7081 0
c Encoding variable: aux1725 with domain: int(0..4) (representing constraint (aux1720 + aux1722))
c Both direct and order encoding.
c Var 'aux1725' order represents '0' with '7083'
c Var 'aux1725' direct represents '0' with '7083'
c Var 'aux1725' order represents '1' with '7084'
-7083 7084 0
c Var 'aux1725' direct represents '1' with '7085'
7083 -7084 7085 0
-7085 7084 0
-7085 -7083 0
c Var 'aux1725' order represents '2' with '7086'
-7084 7086 0
c Var 'aux1725' direct represents '2' with '7087'
7084 -7086 7087 0
-7087 7086 0
-7087 -7084 0
c Var 'aux1725' order represents '3' with '7088'
-7086 7088 0
c Var 'aux1725' direct represents '3' with '7089'
7086 -7088 7089 0
-7089 7088 0
-7089 -7086 0
c Var 'aux1725' direct represents '4' with '-7088'
7083 7085 7087 7089 -7088 0
c Encoding variable: aux1726 with domain: int(0..2) (representing constraint ((x_00006_00007=8) + (x_00005_00009=8)))
c Both direct and order encoding.
c Var 'aux1726' order represents '0' with '7090'
c Var 'aux1726' direct represents '0' with '7090'
c Var 'aux1726' order represents '1' with '7091'
-7090 7091 0
c Var 'aux1726' direct represents '1' with '7092'
7090 -7091 7092 0
-7092 7091 0
-7092 -7090 0
c Var 'aux1726' direct represents '2' with '-7091'
7090 7092 -7091 0
c Encoding variable: aux1727 with domain: int(0..2) (representing constraint ((x_00005_00008=8) + (x_00006_00008=8)))
c Both direct and order encoding.
c Var 'aux1727' order represents '0' with '7093'
c Var 'aux1727' direct represents '0' with '7093'
c Var 'aux1727' order represents '1' with '7094'
-7093 7094 0
c Var 'aux1727' direct represents '1' with '7095'
7093 -7094 7095 0
-7095 7094 0
-7095 -7093 0
c Var 'aux1727' direct represents '2' with '-7094'
7093 7095 -7094 0
c Encoding variable: aux1728 with domain: int(0..2) (representing constraint ((x_00005_00007=8) + (x_00004_00007=8)))
c Both direct and order encoding.
c Var 'aux1728' order represents '0' with '7096'
c Var 'aux1728' direct represents '0' with '7096'
c Var 'aux1728' order represents '1' with '7097'
-7096 7097 0
c Var 'aux1728' direct represents '1' with '7098'
7096 -7097 7098 0
-7098 7097 0
-7098 -7096 0
c Var 'aux1728' direct represents '2' with '-7097'
7096 7098 -7097 0
c Encoding variable: aux1729 with domain: int(0..2) (representing constraint ((x_00004_00009=8) + (x_00004_00008=8)))
c Both direct and order encoding.
c Var 'aux1729' order represents '0' with '7099'
c Var 'aux1729' direct represents '0' with '7099'
c Var 'aux1729' order represents '1' with '7100'
-7099 7100 0
c Var 'aux1729' direct represents '1' with '7101'
7099 -7100 7101 0
-7101 7100 0
-7101 -7099 0
c Var 'aux1729' direct represents '2' with '-7100'
7099 7101 -7100 0
c Encoding variable: aux1730 with domain: int(0..3) (representing constraint ((x_00006_00009=8) + aux1729))
c Both direct and order encoding.
c Var 'aux1730' order represents '0' with '7102'
c Var 'aux1730' direct represents '0' with '7102'
c Var 'aux1730' order represents '1' with '7103'
-7102 7103 0
c Var 'aux1730' direct represents '1' with '7104'
7102 -7103 7104 0
-7104 7103 0
-7104 -7102 0
c Var 'aux1730' order represents '2' with '7105'
-7103 7105 0
c Var 'aux1730' direct represents '2' with '7106'
7103 -7105 7106 0
-7106 7105 0
-7106 -7103 0
c Var 'aux1730' direct represents '3' with '-7105'
7102 7104 7106 -7105 0
c Encoding variable: aux1731 with domain: int(0..4) (representing constraint (aux1726 + aux1728))
c Both direct and order encoding.
c Var 'aux1731' order represents '0' with '7107'
c Var 'aux1731' direct represents '0' with '7107'
c Var 'aux1731' order represents '1' with '7108'
-7107 7108 0
c Var 'aux1731' direct represents '1' with '7109'
7107 -7108 7109 0
-7109 7108 0
-7109 -7107 0
c Var 'aux1731' order represents '2' with '7110'
-7108 7110 0
c Var 'aux1731' direct represents '2' with '7111'
7108 -7110 7111 0
-7111 7110 0
-7111 -7108 0
c Var 'aux1731' order represents '3' with '7112'
-7110 7112 0
c Var 'aux1731' direct represents '3' with '7113'
7110 -7112 7113 0
-7113 7112 0
-7113 -7110 0
c Var 'aux1731' direct represents '4' with '-7112'
7107 7109 7111 7113 -7112 0
c Encoding variable: aux1732 with domain: int(0..2) (representing constraint ((x_00006_00007=9) + (x_00005_00009=9)))
c Both direct and order encoding.
c Var 'aux1732' order represents '0' with '7114'
c Var 'aux1732' direct represents '0' with '7114'
c Var 'aux1732' order represents '1' with '7115'
-7114 7115 0
c Var 'aux1732' direct represents '1' with '7116'
7114 -7115 7116 0
-7116 7115 0
-7116 -7114 0
c Var 'aux1732' direct represents '2' with '-7115'
7114 7116 -7115 0
c Encoding variable: aux1733 with domain: int(0..2) (representing constraint ((x_00005_00008=9) + (x_00006_00008=9)))
c Both direct and order encoding.
c Var 'aux1733' order represents '0' with '7117'
c Var 'aux1733' direct represents '0' with '7117'
c Var 'aux1733' order represents '1' with '7118'
-7117 7118 0
c Var 'aux1733' direct represents '1' with '7119'
7117 -7118 7119 0
-7119 7118 0
-7119 -7117 0
c Var 'aux1733' direct represents '2' with '-7118'
7117 7119 -7118 0
c Encoding variable: aux1734 with domain: int(0..2) (representing constraint ((x_00005_00007=9) + (x_00004_00007=9)))
c Both direct and order encoding.
c Var 'aux1734' order represents '0' with '7120'
c Var 'aux1734' direct represents '0' with '7120'
c Var 'aux1734' order represents '1' with '7121'
-7120 7121 0
c Var 'aux1734' direct represents '1' with '7122'
7120 -7121 7122 0
-7122 7121 0
-7122 -7120 0
c Var 'aux1734' direct represents '2' with '-7121'
7120 7122 -7121 0
c Encoding variable: aux1735 with domain: int(0..2) (representing constraint ((x_00004_00009=9) + (x_00004_00008=9)))
c Both direct and order encoding.
c Var 'aux1735' order represents '0' with '7123'
c Var 'aux1735' direct represents '0' with '7123'
c Var 'aux1735' order represents '1' with '7124'
-7123 7124 0
c Var 'aux1735' direct represents '1' with '7125'
7123 -7124 7125 0
-7125 7124 0
-7125 -7123 0
c Var 'aux1735' direct represents '2' with '-7124'
7123 7125 -7124 0
c Encoding variable: aux1736 with domain: int(0..3) (representing constraint ((x_00006_00009=9) + aux1735))
c Both direct and order encoding.
c Var 'aux1736' order represents '0' with '7126'
c Var 'aux1736' direct represents '0' with '7126'
c Var 'aux1736' order represents '1' with '7127'
-7126 7127 0
c Var 'aux1736' direct represents '1' with '7128'
7126 -7127 7128 0
-7128 7127 0
-7128 -7126 0
c Var 'aux1736' order represents '2' with '7129'
-7127 7129 0
c Var 'aux1736' direct represents '2' with '7130'
7127 -7129 7130 0
-7130 7129 0
-7130 -7127 0
c Var 'aux1736' direct represents '3' with '-7129'
7126 7128 7130 -7129 0
c Encoding variable: aux1737 with domain: int(0..4) (representing constraint (aux1732 + aux1734))
c Both direct and order encoding.
c Var 'aux1737' order represents '0' with '7131'
c Var 'aux1737' direct represents '0' with '7131'
c Var 'aux1737' order represents '1' with '7132'
-7131 7132 0
c Var 'aux1737' direct represents '1' with '7133'
7131 -7132 7133 0
-7133 7132 0
-7133 -7131 0
c Var 'aux1737' order represents '2' with '7134'
-7132 7134 0
c Var 'aux1737' direct represents '2' with '7135'
7132 -7134 7135 0
-7135 7134 0
-7135 -7132 0
c Var 'aux1737' order represents '3' with '7136'
-7134 7136 0
c Var 'aux1737' direct represents '3' with '7137'
7134 -7136 7137 0
-7137 7136 0
-7137 -7134 0
c Var 'aux1737' direct represents '4' with '-7136'
7131 7133 7135 7137 -7136 0
c Encoding variable: aux1738 with domain: int(0..2) (representing constraint ((x_00008_00001=1) + (x_00007_00003=1)))
c Both direct and order encoding.
c Var 'aux1738' order represents '0' with '7138'
c Var 'aux1738' direct represents '0' with '7138'
c Var 'aux1738' order represents '1' with '7139'
-7138 7139 0
c Var 'aux1738' direct represents '1' with '7140'
7138 -7139 7140 0
-7140 7139 0
-7140 -7138 0
c Var 'aux1738' direct represents '2' with '-7139'
7138 7140 -7139 0
c Encoding variable: aux1739 with domain: int(0..2) (representing constraint ((x_00007_00002=1) + (x_00008_00002=1)))
c Both direct and order encoding.
c Var 'aux1739' order represents '0' with '7141'
c Var 'aux1739' direct represents '0' with '7141'
c Var 'aux1739' order represents '1' with '7142'
-7141 7142 0
c Var 'aux1739' direct represents '1' with '7143'
7141 -7142 7143 0
-7143 7142 0
-7143 -7141 0
c Var 'aux1739' direct represents '2' with '-7142'
7141 7143 -7142 0
c Encoding variable: aux1740 with domain: int(0..2) (representing constraint ((x_00007_00001=1) + (x_00009_00001=1)))
c Both direct and order encoding.
c Var 'aux1740' order represents '0' with '7144'
c Var 'aux1740' direct represents '0' with '7144'
c Var 'aux1740' order represents '1' with '7145'
-7144 7145 0
c Var 'aux1740' direct represents '1' with '7146'
7144 -7145 7146 0
-7146 7145 0
-7146 -7144 0
c Var 'aux1740' direct represents '2' with '-7145'
7144 7146 -7145 0
c Encoding variable: aux1741 with domain: int(0..2) (representing constraint ((x_00009_00003=1) + (x_00009_00002=1)))
c Both direct and order encoding.
c Var 'aux1741' order represents '0' with '7147'
c Var 'aux1741' direct represents '0' with '7147'
c Var 'aux1741' order represents '1' with '7148'
-7147 7148 0
c Var 'aux1741' direct represents '1' with '7149'
7147 -7148 7149 0
-7149 7148 0
-7149 -7147 0
c Var 'aux1741' direct represents '2' with '-7148'
7147 7149 -7148 0
c Encoding variable: aux1742 with domain: int(0..3) (representing constraint ((x_00008_00003=1) + aux1741))
c Both direct and order encoding.
c Var 'aux1742' order represents '0' with '7150'
c Var 'aux1742' direct represents '0' with '7150'
c Var 'aux1742' order represents '1' with '7151'
-7150 7151 0
c Var 'aux1742' direct represents '1' with '7152'
7150 -7151 7152 0
-7152 7151 0
-7152 -7150 0
c Var 'aux1742' order represents '2' with '7153'
-7151 7153 0
c Var 'aux1742' direct represents '2' with '7154'
7151 -7153 7154 0
-7154 7153 0
-7154 -7151 0
c Var 'aux1742' direct represents '3' with '-7153'
7150 7152 7154 -7153 0
c Encoding variable: aux1743 with domain: int(0..4) (representing constraint (aux1738 + aux1740))
c Both direct and order encoding.
c Var 'aux1743' order represents '0' with '7155'
c Var 'aux1743' direct represents '0' with '7155'
c Var 'aux1743' order represents '1' with '7156'
-7155 7156 0
c Var 'aux1743' direct represents '1' with '7157'
7155 -7156 7157 0
-7157 7156 0
-7157 -7155 0
c Var 'aux1743' order represents '2' with '7158'
-7156 7158 0
c Var 'aux1743' direct represents '2' with '7159'
7156 -7158 7159 0
-7159 7158 0
-7159 -7156 0
c Var 'aux1743' order represents '3' with '7160'
-7158 7160 0
c Var 'aux1743' direct represents '3' with '7161'
7158 -7160 7161 0
-7161 7160 0
-7161 -7158 0
c Var 'aux1743' direct represents '4' with '-7160'
7155 7157 7159 7161 -7160 0
c Encoding variable: aux1744 with domain: int(0..2) (representing constraint ((x_00008_00001=2) + (x_00007_00003=2)))
c Both direct and order encoding.
c Var 'aux1744' order represents '0' with '7162'
c Var 'aux1744' direct represents '0' with '7162'
c Var 'aux1744' order represents '1' with '7163'
-7162 7163 0
c Var 'aux1744' direct represents '1' with '7164'
7162 -7163 7164 0
-7164 7163 0
-7164 -7162 0
c Var 'aux1744' direct represents '2' with '-7163'
7162 7164 -7163 0
c Encoding variable: aux1745 with domain: int(0..2) (representing constraint ((x_00007_00002=2) + (x_00008_00002=2)))
c Both direct and order encoding.
c Var 'aux1745' order represents '0' with '7165'
c Var 'aux1745' direct represents '0' with '7165'
c Var 'aux1745' order represents '1' with '7166'
-7165 7166 0
c Var 'aux1745' direct represents '1' with '7167'
7165 -7166 7167 0
-7167 7166 0
-7167 -7165 0
c Var 'aux1745' direct represents '2' with '-7166'
7165 7167 -7166 0
c Encoding variable: aux1746 with domain: int(0..2) (representing constraint ((x_00007_00001=2) + (x_00009_00001=2)))
c Both direct and order encoding.
c Var 'aux1746' order represents '0' with '7168'
c Var 'aux1746' direct represents '0' with '7168'
c Var 'aux1746' order represents '1' with '7169'
-7168 7169 0
c Var 'aux1746' direct represents '1' with '7170'
7168 -7169 7170 0
-7170 7169 0
-7170 -7168 0
c Var 'aux1746' direct represents '2' with '-7169'
7168 7170 -7169 0
c Encoding variable: aux1747 with domain: int(0..2) (representing constraint ((x_00009_00003=2) + (x_00009_00002=2)))
c Both direct and order encoding.
c Var 'aux1747' order represents '0' with '7171'
c Var 'aux1747' direct represents '0' with '7171'
c Var 'aux1747' order represents '1' with '7172'
-7171 7172 0
c Var 'aux1747' direct represents '1' with '7173'
7171 -7172 7173 0
-7173 7172 0
-7173 -7171 0
c Var 'aux1747' direct represents '2' with '-7172'
7171 7173 -7172 0
c Encoding variable: aux1748 with domain: int(0..3) (representing constraint ((x_00008_00003=2) + aux1747))
c Both direct and order encoding.
c Var 'aux1748' order represents '0' with '7174'
c Var 'aux1748' direct represents '0' with '7174'
c Var 'aux1748' order represents '1' with '7175'
-7174 7175 0
c Var 'aux1748' direct represents '1' with '7176'
7174 -7175 7176 0
-7176 7175 0
-7176 -7174 0
c Var 'aux1748' order represents '2' with '7177'
-7175 7177 0
c Var 'aux1748' direct represents '2' with '7178'
7175 -7177 7178 0
-7178 7177 0
-7178 -7175 0
c Var 'aux1748' direct represents '3' with '-7177'
7174 7176 7178 -7177 0
c Encoding variable: aux1749 with domain: int(0..4) (representing constraint (aux1744 + aux1746))
c Both direct and order encoding.
c Var 'aux1749' order represents '0' with '7179'
c Var 'aux1749' direct represents '0' with '7179'
c Var 'aux1749' order represents '1' with '7180'
-7179 7180 0
c Var 'aux1749' direct represents '1' with '7181'
7179 -7180 7181 0
-7181 7180 0
-7181 -7179 0
c Var 'aux1749' order represents '2' with '7182'
-7180 7182 0
c Var 'aux1749' direct represents '2' with '7183'
7180 -7182 7183 0
-7183 7182 0
-7183 -7180 0
c Var 'aux1749' order represents '3' with '7184'
-7182 7184 0
c Var 'aux1749' direct represents '3' with '7185'
7182 -7184 7185 0
-7185 7184 0
-7185 -7182 0
c Var 'aux1749' direct represents '4' with '-7184'
7179 7181 7183 7185 -7184 0
c Encoding variable: aux1750 with domain: int(0..2) (representing constraint ((x_00008_00001=3) + (x_00007_00003=3)))
c Both direct and order encoding.
c Var 'aux1750' order represents '0' with '7186'
c Var 'aux1750' direct represents '0' with '7186'
c Var 'aux1750' order represents '1' with '7187'
-7186 7187 0
c Var 'aux1750' direct represents '1' with '7188'
7186 -7187 7188 0
-7188 7187 0
-7188 -7186 0
c Var 'aux1750' direct represents '2' with '-7187'
7186 7188 -7187 0
c Encoding variable: aux1751 with domain: int(0..2) (representing constraint ((x_00007_00002=3) + (x_00008_00002=3)))
c Both direct and order encoding.
c Var 'aux1751' order represents '0' with '7189'
c Var 'aux1751' direct represents '0' with '7189'
c Var 'aux1751' order represents '1' with '7190'
-7189 7190 0
c Var 'aux1751' direct represents '1' with '7191'
7189 -7190 7191 0
-7191 7190 0
-7191 -7189 0
c Var 'aux1751' direct represents '2' with '-7190'
7189 7191 -7190 0
c Encoding variable: aux1752 with domain: int(0..2) (representing constraint ((x_00007_00001=3) + (x_00009_00001=3)))
c Both direct and order encoding.
c Var 'aux1752' order represents '0' with '7192'
c Var 'aux1752' direct represents '0' with '7192'
c Var 'aux1752' order represents '1' with '7193'
-7192 7193 0
c Var 'aux1752' direct represents '1' with '7194'
7192 -7193 7194 0
-7194 7193 0
-7194 -7192 0
c Var 'aux1752' direct represents '2' with '-7193'
7192 7194 -7193 0
c Encoding variable: aux1753 with domain: int(0..2) (representing constraint ((x_00009_00003=3) + (x_00009_00002=3)))
c Both direct and order encoding.
c Var 'aux1753' order represents '0' with '7195'
c Var 'aux1753' direct represents '0' with '7195'
c Var 'aux1753' order represents '1' with '7196'
-7195 7196 0
c Var 'aux1753' direct represents '1' with '7197'
7195 -7196 7197 0
-7197 7196 0
-7197 -7195 0
c Var 'aux1753' direct represents '2' with '-7196'
7195 7197 -7196 0
c Encoding variable: aux1754 with domain: int(0..3) (representing constraint ((x_00008_00003=3) + aux1753))
c Both direct and order encoding.
c Var 'aux1754' order represents '0' with '7198'
c Var 'aux1754' direct represents '0' with '7198'
c Var 'aux1754' order represents '1' with '7199'
-7198 7199 0
c Var 'aux1754' direct represents '1' with '7200'
7198 -7199 7200 0
-7200 7199 0
-7200 -7198 0
c Var 'aux1754' order represents '2' with '7201'
-7199 7201 0
c Var 'aux1754' direct represents '2' with '7202'
7199 -7201 7202 0
-7202 7201 0
-7202 -7199 0
c Var 'aux1754' direct represents '3' with '-7201'
7198 7200 7202 -7201 0
c Encoding variable: aux1755 with domain: int(0..4) (representing constraint (aux1750 + aux1752))
c Both direct and order encoding.
c Var 'aux1755' order represents '0' with '7203'
c Var 'aux1755' direct represents '0' with '7203'
c Var 'aux1755' order represents '1' with '7204'
-7203 7204 0
c Var 'aux1755' direct represents '1' with '7205'
7203 -7204 7205 0
-7205 7204 0
-7205 -7203 0
c Var 'aux1755' order represents '2' with '7206'
-7204 7206 0
c Var 'aux1755' direct represents '2' with '7207'
7204 -7206 7207 0
-7207 7206 0
-7207 -7204 0
c Var 'aux1755' order represents '3' with '7208'
-7206 7208 0
c Var 'aux1755' direct represents '3' with '7209'
7206 -7208 7209 0
-7209 7208 0
-7209 -7206 0
c Var 'aux1755' direct represents '4' with '-7208'
7203 7205 7207 7209 -7208 0
c Encoding variable: aux1756 with domain: int(0..2) (representing constraint ((x_00008_00001=4) + (x_00007_00003=4)))
c Both direct and order encoding.
c Var 'aux1756' order represents '0' with '7210'
c Var 'aux1756' direct represents '0' with '7210'
c Var 'aux1756' order represents '1' with '7211'
-7210 7211 0
c Var 'aux1756' direct represents '1' with '7212'
7210 -7211 7212 0
-7212 7211 0
-7212 -7210 0
c Var 'aux1756' direct represents '2' with '-7211'
7210 7212 -7211 0
c Encoding variable: aux1757 with domain: int(0..2) (representing constraint ((x_00007_00002=4) + (x_00008_00002=4)))
c Both direct and order encoding.
c Var 'aux1757' order represents '0' with '7213'
c Var 'aux1757' direct represents '0' with '7213'
c Var 'aux1757' order represents '1' with '7214'
-7213 7214 0
c Var 'aux1757' direct represents '1' with '7215'
7213 -7214 7215 0
-7215 7214 0
-7215 -7213 0
c Var 'aux1757' direct represents '2' with '-7214'
7213 7215 -7214 0
c Encoding variable: aux1758 with domain: int(0..2) (representing constraint ((x_00007_00001=4) + (x_00009_00001=4)))
c Both direct and order encoding.
c Var 'aux1758' order represents '0' with '7216'
c Var 'aux1758' direct represents '0' with '7216'
c Var 'aux1758' order represents '1' with '7217'
-7216 7217 0
c Var 'aux1758' direct represents '1' with '7218'
7216 -7217 7218 0
-7218 7217 0
-7218 -7216 0
c Var 'aux1758' direct represents '2' with '-7217'
7216 7218 -7217 0
c Encoding variable: aux1759 with domain: int(0..2) (representing constraint ((x_00009_00003=4) + (x_00009_00002=4)))
c Both direct and order encoding.
c Var 'aux1759' order represents '0' with '7219'
c Var 'aux1759' direct represents '0' with '7219'
c Var 'aux1759' order represents '1' with '7220'
-7219 7220 0
c Var 'aux1759' direct represents '1' with '7221'
7219 -7220 7221 0
-7221 7220 0
-7221 -7219 0
c Var 'aux1759' direct represents '2' with '-7220'
7219 7221 -7220 0
c Encoding variable: aux1760 with domain: int(0..3) (representing constraint ((x_00008_00003=4) + aux1759))
c Both direct and order encoding.
c Var 'aux1760' order represents '0' with '7222'
c Var 'aux1760' direct represents '0' with '7222'
c Var 'aux1760' order represents '1' with '7223'
-7222 7223 0
c Var 'aux1760' direct represents '1' with '7224'
7222 -7223 7224 0
-7224 7223 0
-7224 -7222 0
c Var 'aux1760' order represents '2' with '7225'
-7223 7225 0
c Var 'aux1760' direct represents '2' with '7226'
7223 -7225 7226 0
-7226 7225 0
-7226 -7223 0
c Var 'aux1760' direct represents '3' with '-7225'
7222 7224 7226 -7225 0
c Encoding variable: aux1761 with domain: int(0..4) (representing constraint (aux1756 + aux1758))
c Both direct and order encoding.
c Var 'aux1761' order represents '0' with '7227'
c Var 'aux1761' direct represents '0' with '7227'
c Var 'aux1761' order represents '1' with '7228'
-7227 7228 0
c Var 'aux1761' direct represents '1' with '7229'
7227 -7228 7229 0
-7229 7228 0
-7229 -7227 0
c Var 'aux1761' order represents '2' with '7230'
-7228 7230 0
c Var 'aux1761' direct represents '2' with '7231'
7228 -7230 7231 0
-7231 7230 0
-7231 -7228 0
c Var 'aux1761' order represents '3' with '7232'
-7230 7232 0
c Var 'aux1761' direct represents '3' with '7233'
7230 -7232 7233 0
-7233 7232 0
-7233 -7230 0
c Var 'aux1761' direct represents '4' with '-7232'
7227 7229 7231 7233 -7232 0
c Encoding variable: aux1762 with domain: int(0..2) (representing constraint ((x_00008_00001=5) + (x_00007_00003=5)))
c Both direct and order encoding.
c Var 'aux1762' order represents '0' with '7234'
c Var 'aux1762' direct represents '0' with '7234'
c Var 'aux1762' order represents '1' with '7235'
-7234 7235 0
c Var 'aux1762' direct represents '1' with '7236'
7234 -7235 7236 0
-7236 7235 0
-7236 -7234 0
c Var 'aux1762' direct represents '2' with '-7235'
7234 7236 -7235 0
c Encoding variable: aux1763 with domain: int(0..2) (representing constraint ((x_00007_00002=5) + (x_00008_00002=5)))
c Both direct and order encoding.
c Var 'aux1763' order represents '0' with '7237'
c Var 'aux1763' direct represents '0' with '7237'
c Var 'aux1763' order represents '1' with '7238'
-7237 7238 0
c Var 'aux1763' direct represents '1' with '7239'
7237 -7238 7239 0
-7239 7238 0
-7239 -7237 0
c Var 'aux1763' direct represents '2' with '-7238'
7237 7239 -7238 0
c Encoding variable: aux1764 with domain: int(0..2) (representing constraint ((x_00007_00001=5) + (x_00009_00001=5)))
c Both direct and order encoding.
c Var 'aux1764' order represents '0' with '7240'
c Var 'aux1764' direct represents '0' with '7240'
c Var 'aux1764' order represents '1' with '7241'
-7240 7241 0
c Var 'aux1764' direct represents '1' with '7242'
7240 -7241 7242 0
-7242 7241 0
-7242 -7240 0
c Var 'aux1764' direct represents '2' with '-7241'
7240 7242 -7241 0
c Encoding variable: aux1765 with domain: int(0..2) (representing constraint ((x_00009_00003=5) + (x_00009_00002=5)))
c Both direct and order encoding.
c Var 'aux1765' order represents '0' with '7243'
c Var 'aux1765' direct represents '0' with '7243'
c Var 'aux1765' order represents '1' with '7244'
-7243 7244 0
c Var 'aux1765' direct represents '1' with '7245'
7243 -7244 7245 0
-7245 7244 0
-7245 -7243 0
c Var 'aux1765' direct represents '2' with '-7244'
7243 7245 -7244 0
c Encoding variable: aux1766 with domain: int(0..3) (representing constraint ((x_00008_00003=5) + aux1765))
c Both direct and order encoding.
c Var 'aux1766' order represents '0' with '7246'
c Var 'aux1766' direct represents '0' with '7246'
c Var 'aux1766' order represents '1' with '7247'
-7246 7247 0
c Var 'aux1766' direct represents '1' with '7248'
7246 -7247 7248 0
-7248 7247 0
-7248 -7246 0
c Var 'aux1766' order represents '2' with '7249'
-7247 7249 0
c Var 'aux1766' direct represents '2' with '7250'
7247 -7249 7250 0
-7250 7249 0
-7250 -7247 0
c Var 'aux1766' direct represents '3' with '-7249'
7246 7248 7250 -7249 0
c Encoding variable: aux1767 with domain: int(0..4) (representing constraint (aux1762 + aux1764))
c Both direct and order encoding.
c Var 'aux1767' order represents '0' with '7251'
c Var 'aux1767' direct represents '0' with '7251'
c Var 'aux1767' order represents '1' with '7252'
-7251 7252 0
c Var 'aux1767' direct represents '1' with '7253'
7251 -7252 7253 0
-7253 7252 0
-7253 -7251 0
c Var 'aux1767' order represents '2' with '7254'
-7252 7254 0
c Var 'aux1767' direct represents '2' with '7255'
7252 -7254 7255 0
-7255 7254 0
-7255 -7252 0
c Var 'aux1767' order represents '3' with '7256'
-7254 7256 0
c Var 'aux1767' direct represents '3' with '7257'
7254 -7256 7257 0
-7257 7256 0
-7257 -7254 0
c Var 'aux1767' direct represents '4' with '-7256'
7251 7253 7255 7257 -7256 0
c Encoding variable: aux1768 with domain: int(0..2) (representing constraint ((x_00008_00001=6) + (x_00007_00003=6)))
c Both direct and order encoding.
c Var 'aux1768' order represents '0' with '7258'
c Var 'aux1768' direct represents '0' with '7258'
c Var 'aux1768' order represents '1' with '7259'
-7258 7259 0
c Var 'aux1768' direct represents '1' with '7260'
7258 -7259 7260 0
-7260 7259 0
-7260 -7258 0
c Var 'aux1768' direct represents '2' with '-7259'
7258 7260 -7259 0
c Encoding variable: aux1769 with domain: int(0..2) (representing constraint ((x_00007_00002=6) + (x_00008_00002=6)))
c Both direct and order encoding.
c Var 'aux1769' order represents '0' with '7261'
c Var 'aux1769' direct represents '0' with '7261'
c Var 'aux1769' order represents '1' with '7262'
-7261 7262 0
c Var 'aux1769' direct represents '1' with '7263'
7261 -7262 7263 0
-7263 7262 0
-7263 -7261 0
c Var 'aux1769' direct represents '2' with '-7262'
7261 7263 -7262 0
c Encoding variable: aux1770 with domain: int(0..2) (representing constraint ((x_00007_00001=6) + (x_00009_00001=6)))
c Both direct and order encoding.
c Var 'aux1770' order represents '0' with '7264'
c Var 'aux1770' direct represents '0' with '7264'
c Var 'aux1770' order represents '1' with '7265'
-7264 7265 0
c Var 'aux1770' direct represents '1' with '7266'
7264 -7265 7266 0
-7266 7265 0
-7266 -7264 0
c Var 'aux1770' direct represents '2' with '-7265'
7264 7266 -7265 0
c Encoding variable: aux1771 with domain: int(0..2) (representing constraint ((x_00009_00003=6) + (x_00009_00002=6)))
c Both direct and order encoding.
c Var 'aux1771' order represents '0' with '7267'
c Var 'aux1771' direct represents '0' with '7267'
c Var 'aux1771' order represents '1' with '7268'
-7267 7268 0
c Var 'aux1771' direct represents '1' with '7269'
7267 -7268 7269 0
-7269 7268 0
-7269 -7267 0
c Var 'aux1771' direct represents '2' with '-7268'
7267 7269 -7268 0
c Encoding variable: aux1772 with domain: int(0..3) (representing constraint ((x_00008_00003=6) + aux1771))
c Both direct and order encoding.
c Var 'aux1772' order represents '0' with '7270'
c Var 'aux1772' direct represents '0' with '7270'
c Var 'aux1772' order represents '1' with '7271'
-7270 7271 0
c Var 'aux1772' direct represents '1' with '7272'
7270 -7271 7272 0
-7272 7271 0
-7272 -7270 0
c Var 'aux1772' order represents '2' with '7273'
-7271 7273 0
c Var 'aux1772' direct represents '2' with '7274'
7271 -7273 7274 0
-7274 7273 0
-7274 -7271 0
c Var 'aux1772' direct represents '3' with '-7273'
7270 7272 7274 -7273 0
c Encoding variable: aux1773 with domain: int(0..4) (representing constraint (aux1768 + aux1770))
c Both direct and order encoding.
c Var 'aux1773' order represents '0' with '7275'
c Var 'aux1773' direct represents '0' with '7275'
c Var 'aux1773' order represents '1' with '7276'
-7275 7276 0
c Var 'aux1773' direct represents '1' with '7277'
7275 -7276 7277 0
-7277 7276 0
-7277 -7275 0
c Var 'aux1773' order represents '2' with '7278'
-7276 7278 0
c Var 'aux1773' direct represents '2' with '7279'
7276 -7278 7279 0
-7279 7278 0
-7279 -7276 0
c Var 'aux1773' order represents '3' with '7280'
-7278 7280 0
c Var 'aux1773' direct represents '3' with '7281'
7278 -7280 7281 0
-7281 7280 0
-7281 -7278 0
c Var 'aux1773' direct represents '4' with '-7280'
7275 7277 7279 7281 -7280 0
c Encoding variable: aux1774 with domain: int(0..2) (representing constraint ((x_00008_00001=7) + (x_00007_00003=7)))
c Both direct and order encoding.
c Var 'aux1774' order represents '0' with '7282'
c Var 'aux1774' direct represents '0' with '7282'
c Var 'aux1774' order represents '1' with '7283'
-7282 7283 0
c Var 'aux1774' direct represents '1' with '7284'
7282 -7283 7284 0
-7284 7283 0
-7284 -7282 0
c Var 'aux1774' direct represents '2' with '-7283'
7282 7284 -7283 0
c Encoding variable: aux1775 with domain: int(0..2) (representing constraint ((x_00007_00002=7) + (x_00008_00002=7)))
c Both direct and order encoding.
c Var 'aux1775' order represents '0' with '7285'
c Var 'aux1775' direct represents '0' with '7285'
c Var 'aux1775' order represents '1' with '7286'
-7285 7286 0
c Var 'aux1775' direct represents '1' with '7287'
7285 -7286 7287 0
-7287 7286 0
-7287 -7285 0
c Var 'aux1775' direct represents '2' with '-7286'
7285 7287 -7286 0
c Encoding variable: aux1776 with domain: int(0..2) (representing constraint ((x_00007_00001=7) + (x_00009_00001=7)))
c Both direct and order encoding.
c Var 'aux1776' order represents '0' with '7288'
c Var 'aux1776' direct represents '0' with '7288'
c Var 'aux1776' order represents '1' with '7289'
-7288 7289 0
c Var 'aux1776' direct represents '1' with '7290'
7288 -7289 7290 0
-7290 7289 0
-7290 -7288 0
c Var 'aux1776' direct represents '2' with '-7289'
7288 7290 -7289 0
c Encoding variable: aux1777 with domain: int(0..2) (representing constraint ((x_00009_00003=7) + (x_00009_00002=7)))
c Both direct and order encoding.
c Var 'aux1777' order represents '0' with '7291'
c Var 'aux1777' direct represents '0' with '7291'
c Var 'aux1777' order represents '1' with '7292'
-7291 7292 0
c Var 'aux1777' direct represents '1' with '7293'
7291 -7292 7293 0
-7293 7292 0
-7293 -7291 0
c Var 'aux1777' direct represents '2' with '-7292'
7291 7293 -7292 0
c Encoding variable: aux1778 with domain: int(0..3) (representing constraint ((x_00008_00003=7) + aux1777))
c Both direct and order encoding.
c Var 'aux1778' order represents '0' with '7294'
c Var 'aux1778' direct represents '0' with '7294'
c Var 'aux1778' order represents '1' with '7295'
-7294 7295 0
c Var 'aux1778' direct represents '1' with '7296'
7294 -7295 7296 0
-7296 7295 0
-7296 -7294 0
c Var 'aux1778' order represents '2' with '7297'
-7295 7297 0
c Var 'aux1778' direct represents '2' with '7298'
7295 -7297 7298 0
-7298 7297 0
-7298 -7295 0
c Var 'aux1778' direct represents '3' with '-7297'
7294 7296 7298 -7297 0
c Encoding variable: aux1779 with domain: int(0..4) (representing constraint (aux1774 + aux1776))
c Both direct and order encoding.
c Var 'aux1779' order represents '0' with '7299'
c Var 'aux1779' direct represents '0' with '7299'
c Var 'aux1779' order represents '1' with '7300'
-7299 7300 0
c Var 'aux1779' direct represents '1' with '7301'
7299 -7300 7301 0
-7301 7300 0
-7301 -7299 0
c Var 'aux1779' order represents '2' with '7302'
-7300 7302 0
c Var 'aux1779' direct represents '2' with '7303'
7300 -7302 7303 0
-7303 7302 0
-7303 -7300 0
c Var 'aux1779' order represents '3' with '7304'
-7302 7304 0
c Var 'aux1779' direct represents '3' with '7305'
7302 -7304 7305 0
-7305 7304 0
-7305 -7302 0
c Var 'aux1779' direct represents '4' with '-7304'
7299 7301 7303 7305 -7304 0
c Encoding variable: aux1780 with domain: int(0..2) (representing constraint ((x_00008_00001=8) + (x_00007_00003=8)))
c Both direct and order encoding.
c Var 'aux1780' order represents '0' with '7306'
c Var 'aux1780' direct represents '0' with '7306'
c Var 'aux1780' order represents '1' with '7307'
-7306 7307 0
c Var 'aux1780' direct represents '1' with '7308'
7306 -7307 7308 0
-7308 7307 0
-7308 -7306 0
c Var 'aux1780' direct represents '2' with '-7307'
7306 7308 -7307 0
c Encoding variable: aux1781 with domain: int(0..2) (representing constraint ((x_00007_00002=8) + (x_00008_00002=8)))
c Both direct and order encoding.
c Var 'aux1781' order represents '0' with '7309'
c Var 'aux1781' direct represents '0' with '7309'
c Var 'aux1781' order represents '1' with '7310'
-7309 7310 0
c Var 'aux1781' direct represents '1' with '7311'
7309 -7310 7311 0
-7311 7310 0
-7311 -7309 0
c Var 'aux1781' direct represents '2' with '-7310'
7309 7311 -7310 0
c Encoding variable: aux1782 with domain: int(0..2) (representing constraint ((x_00007_00001=8) + (x_00009_00001=8)))
c Both direct and order encoding.
c Var 'aux1782' order represents '0' with '7312'
c Var 'aux1782' direct represents '0' with '7312'
c Var 'aux1782' order represents '1' with '7313'
-7312 7313 0
c Var 'aux1782' direct represents '1' with '7314'
7312 -7313 7314 0
-7314 7313 0
-7314 -7312 0
c Var 'aux1782' direct represents '2' with '-7313'
7312 7314 -7313 0
c Encoding variable: aux1783 with domain: int(0..2) (representing constraint ((x_00009_00003=8) + (x_00009_00002=8)))
c Both direct and order encoding.
c Var 'aux1783' order represents '0' with '7315'
c Var 'aux1783' direct represents '0' with '7315'
c Var 'aux1783' order represents '1' with '7316'
-7315 7316 0
c Var 'aux1783' direct represents '1' with '7317'
7315 -7316 7317 0
-7317 7316 0
-7317 -7315 0
c Var 'aux1783' direct represents '2' with '-7316'
7315 7317 -7316 0
c Encoding variable: aux1784 with domain: int(0..3) (representing constraint ((x_00008_00003=8) + aux1783))
c Both direct and order encoding.
c Var 'aux1784' order represents '0' with '7318'
c Var 'aux1784' direct represents '0' with '7318'
c Var 'aux1784' order represents '1' with '7319'
-7318 7319 0
c Var 'aux1784' direct represents '1' with '7320'
7318 -7319 7320 0
-7320 7319 0
-7320 -7318 0
c Var 'aux1784' order represents '2' with '7321'
-7319 7321 0
c Var 'aux1784' direct represents '2' with '7322'
7319 -7321 7322 0
-7322 7321 0
-7322 -7319 0
c Var 'aux1784' direct represents '3' with '-7321'
7318 7320 7322 -7321 0
c Encoding variable: aux1785 with domain: int(0..4) (representing constraint (aux1780 + aux1782))
c Both direct and order encoding.
c Var 'aux1785' order represents '0' with '7323'
c Var 'aux1785' direct represents '0' with '7323'
c Var 'aux1785' order represents '1' with '7324'
-7323 7324 0
c Var 'aux1785' direct represents '1' with '7325'
7323 -7324 7325 0
-7325 7324 0
-7325 -7323 0
c Var 'aux1785' order represents '2' with '7326'
-7324 7326 0
c Var 'aux1785' direct represents '2' with '7327'
7324 -7326 7327 0
-7327 7326 0
-7327 -7324 0
c Var 'aux1785' order represents '3' with '7328'
-7326 7328 0
c Var 'aux1785' direct represents '3' with '7329'
7326 -7328 7329 0
-7329 7328 0
-7329 -7326 0
c Var 'aux1785' direct represents '4' with '-7328'
7323 7325 7327 7329 -7328 0
c Encoding variable: aux1786 with domain: int(0..2) (representing constraint ((x_00008_00001=9) + (x_00007_00003=9)))
c Both direct and order encoding.
c Var 'aux1786' order represents '0' with '7330'
c Var 'aux1786' direct represents '0' with '7330'
c Var 'aux1786' order represents '1' with '7331'
-7330 7331 0
c Var 'aux1786' direct represents '1' with '7332'
7330 -7331 7332 0
-7332 7331 0
-7332 -7330 0
c Var 'aux1786' direct represents '2' with '-7331'
7330 7332 -7331 0
c Encoding variable: aux1787 with domain: int(0..2) (representing constraint ((x_00007_00002=9) + (x_00008_00002=9)))
c Both direct and order encoding.
c Var 'aux1787' order represents '0' with '7333'
c Var 'aux1787' direct represents '0' with '7333'
c Var 'aux1787' order represents '1' with '7334'
-7333 7334 0
c Var 'aux1787' direct represents '1' with '7335'
7333 -7334 7335 0
-7335 7334 0
-7335 -7333 0
c Var 'aux1787' direct represents '2' with '-7334'
7333 7335 -7334 0
c Encoding variable: aux1788 with domain: int(0..2) (representing constraint ((x_00007_00001=9) + (x_00009_00001=9)))
c Both direct and order encoding.
c Var 'aux1788' order represents '0' with '7336'
c Var 'aux1788' direct represents '0' with '7336'
c Var 'aux1788' order represents '1' with '7337'
-7336 7337 0
c Var 'aux1788' direct represents '1' with '7338'
7336 -7337 7338 0
-7338 7337 0
-7338 -7336 0
c Var 'aux1788' direct represents '2' with '-7337'
7336 7338 -7337 0
c Encoding variable: aux1789 with domain: int(0..2) (representing constraint ((x_00009_00003=9) + (x_00009_00002=9)))
c Both direct and order encoding.
c Var 'aux1789' order represents '0' with '7339'
c Var 'aux1789' direct represents '0' with '7339'
c Var 'aux1789' order represents '1' with '7340'
-7339 7340 0
c Var 'aux1789' direct represents '1' with '7341'
7339 -7340 7341 0
-7341 7340 0
-7341 -7339 0
c Var 'aux1789' direct represents '2' with '-7340'
7339 7341 -7340 0
c Encoding variable: aux1790 with domain: int(0..3) (representing constraint ((x_00008_00003=9) + aux1789))
c Both direct and order encoding.
c Var 'aux1790' order represents '0' with '7342'
c Var 'aux1790' direct represents '0' with '7342'
c Var 'aux1790' order represents '1' with '7343'
-7342 7343 0
c Var 'aux1790' direct represents '1' with '7344'
7342 -7343 7344 0
-7344 7343 0
-7344 -7342 0
c Var 'aux1790' order represents '2' with '7345'
-7343 7345 0
c Var 'aux1790' direct represents '2' with '7346'
7343 -7345 7346 0
-7346 7345 0
-7346 -7343 0
c Var 'aux1790' direct represents '3' with '-7345'
7342 7344 7346 -7345 0
c Encoding variable: aux1791 with domain: int(0..4) (representing constraint (aux1786 + aux1788))
c Both direct and order encoding.
c Var 'aux1791' order represents '0' with '7347'
c Var 'aux1791' direct represents '0' with '7347'
c Var 'aux1791' order represents '1' with '7348'
-7347 7348 0
c Var 'aux1791' direct represents '1' with '7349'
7347 -7348 7349 0
-7349 7348 0
-7349 -7347 0
c Var 'aux1791' order represents '2' with '7350'
-7348 7350 0
c Var 'aux1791' direct represents '2' with '7351'
7348 -7350 7351 0
-7351 7350 0
-7351 -7348 0
c Var 'aux1791' order represents '3' with '7352'
-7350 7352 0
c Var 'aux1791' direct represents '3' with '7353'
7350 -7352 7353 0
-7353 7352 0
-7353 -7350 0
c Var 'aux1791' direct represents '4' with '-7352'
7347 7349 7351 7353 -7352 0
c Encoding variable: aux1792 with domain: int(0..2) (representing constraint ((x_00008_00004=1) + (x_00007_00006=1)))
c Both direct and order encoding.
c Var 'aux1792' order represents '0' with '7354'
c Var 'aux1792' direct represents '0' with '7354'
c Var 'aux1792' order represents '1' with '7355'
-7354 7355 0
c Var 'aux1792' direct represents '1' with '7356'
7354 -7355 7356 0
-7356 7355 0
-7356 -7354 0
c Var 'aux1792' direct represents '2' with '-7355'
7354 7356 -7355 0
c Encoding variable: aux1793 with domain: int(0..2) (representing constraint ((x_00007_00005=1) + (x_00008_00005=1)))
c Both direct and order encoding.
c Var 'aux1793' order represents '0' with '7357'
c Var 'aux1793' direct represents '0' with '7357'
c Var 'aux1793' order represents '1' with '7358'
-7357 7358 0
c Var 'aux1793' direct represents '1' with '7359'
7357 -7358 7359 0
-7359 7358 0
-7359 -7357 0
c Var 'aux1793' direct represents '2' with '-7358'
7357 7359 -7358 0
c Encoding variable: aux1794 with domain: int(0..2) (representing constraint ((x_00007_00004=1) + (x_00009_00004=1)))
c Both direct and order encoding.
c Var 'aux1794' order represents '0' with '7360'
c Var 'aux1794' direct represents '0' with '7360'
c Var 'aux1794' order represents '1' with '7361'
-7360 7361 0
c Var 'aux1794' direct represents '1' with '7362'
7360 -7361 7362 0
-7362 7361 0
-7362 -7360 0
c Var 'aux1794' direct represents '2' with '-7361'
7360 7362 -7361 0
c Encoding variable: aux1795 with domain: int(0..2) (representing constraint ((x_00009_00006=1) + (x_00009_00005=1)))
c Both direct and order encoding.
c Var 'aux1795' order represents '0' with '7363'
c Var 'aux1795' direct represents '0' with '7363'
c Var 'aux1795' order represents '1' with '7364'
-7363 7364 0
c Var 'aux1795' direct represents '1' with '7365'
7363 -7364 7365 0
-7365 7364 0
-7365 -7363 0
c Var 'aux1795' direct represents '2' with '-7364'
7363 7365 -7364 0
c Encoding variable: aux1796 with domain: int(0..3) (representing constraint ((x_00008_00006=1) + aux1795))
c Both direct and order encoding.
c Var 'aux1796' order represents '0' with '7366'
c Var 'aux1796' direct represents '0' with '7366'
c Var 'aux1796' order represents '1' with '7367'
-7366 7367 0
c Var 'aux1796' direct represents '1' with '7368'
7366 -7367 7368 0
-7368 7367 0
-7368 -7366 0
c Var 'aux1796' order represents '2' with '7369'
-7367 7369 0
c Var 'aux1796' direct represents '2' with '7370'
7367 -7369 7370 0
-7370 7369 0
-7370 -7367 0
c Var 'aux1796' direct represents '3' with '-7369'
7366 7368 7370 -7369 0
c Encoding variable: aux1797 with domain: int(0..4) (representing constraint (aux1792 + aux1794))
c Both direct and order encoding.
c Var 'aux1797' order represents '0' with '7371'
c Var 'aux1797' direct represents '0' with '7371'
c Var 'aux1797' order represents '1' with '7372'
-7371 7372 0
c Var 'aux1797' direct represents '1' with '7373'
7371 -7372 7373 0
-7373 7372 0
-7373 -7371 0
c Var 'aux1797' order represents '2' with '7374'
-7372 7374 0
c Var 'aux1797' direct represents '2' with '7375'
7372 -7374 7375 0
-7375 7374 0
-7375 -7372 0
c Var 'aux1797' order represents '3' with '7376'
-7374 7376 0
c Var 'aux1797' direct represents '3' with '7377'
7374 -7376 7377 0
-7377 7376 0
-7377 -7374 0
c Var 'aux1797' direct represents '4' with '-7376'
7371 7373 7375 7377 -7376 0
c Encoding variable: aux1798 with domain: int(0..2) (representing constraint ((x_00008_00004=2) + (x_00007_00006=2)))
c Both direct and order encoding.
c Var 'aux1798' order represents '0' with '7378'
c Var 'aux1798' direct represents '0' with '7378'
c Var 'aux1798' order represents '1' with '7379'
-7378 7379 0
c Var 'aux1798' direct represents '1' with '7380'
7378 -7379 7380 0
-7380 7379 0
-7380 -7378 0
c Var 'aux1798' direct represents '2' with '-7379'
7378 7380 -7379 0
c Encoding variable: aux1799 with domain: int(0..2) (representing constraint ((x_00007_00005=2) + (x_00008_00005=2)))
c Both direct and order encoding.
c Var 'aux1799' order represents '0' with '7381'
c Var 'aux1799' direct represents '0' with '7381'
c Var 'aux1799' order represents '1' with '7382'
-7381 7382 0
c Var 'aux1799' direct represents '1' with '7383'
7381 -7382 7383 0
-7383 7382 0
-7383 -7381 0
c Var 'aux1799' direct represents '2' with '-7382'
7381 7383 -7382 0
c Encoding variable: aux1800 with domain: int(0..2) (representing constraint ((x_00007_00004=2) + (x_00009_00004=2)))
c Both direct and order encoding.
c Var 'aux1800' order represents '0' with '7384'
c Var 'aux1800' direct represents '0' with '7384'
c Var 'aux1800' order represents '1' with '7385'
-7384 7385 0
c Var 'aux1800' direct represents '1' with '7386'
7384 -7385 7386 0
-7386 7385 0
-7386 -7384 0
c Var 'aux1800' direct represents '2' with '-7385'
7384 7386 -7385 0
c Encoding variable: aux1801 with domain: int(0..2) (representing constraint ((x_00009_00006=2) + (x_00009_00005=2)))
c Both direct and order encoding.
c Var 'aux1801' order represents '0' with '7387'
c Var 'aux1801' direct represents '0' with '7387'
c Var 'aux1801' order represents '1' with '7388'
-7387 7388 0
c Var 'aux1801' direct represents '1' with '7389'
7387 -7388 7389 0
-7389 7388 0
-7389 -7387 0
c Var 'aux1801' direct represents '2' with '-7388'
7387 7389 -7388 0
c Encoding variable: aux1802 with domain: int(0..3) (representing constraint ((x_00008_00006=2) + aux1801))
c Both direct and order encoding.
c Var 'aux1802' order represents '0' with '7390'
c Var 'aux1802' direct represents '0' with '7390'
c Var 'aux1802' order represents '1' with '7391'
-7390 7391 0
c Var 'aux1802' direct represents '1' with '7392'
7390 -7391 7392 0
-7392 7391 0
-7392 -7390 0
c Var 'aux1802' order represents '2' with '7393'
-7391 7393 0
c Var 'aux1802' direct represents '2' with '7394'
7391 -7393 7394 0
-7394 7393 0
-7394 -7391 0
c Var 'aux1802' direct represents '3' with '-7393'
7390 7392 7394 -7393 0
c Encoding variable: aux1803 with domain: int(0..4) (representing constraint (aux1798 + aux1800))
c Both direct and order encoding.
c Var 'aux1803' order represents '0' with '7395'
c Var 'aux1803' direct represents '0' with '7395'
c Var 'aux1803' order represents '1' with '7396'
-7395 7396 0
c Var 'aux1803' direct represents '1' with '7397'
7395 -7396 7397 0
-7397 7396 0
-7397 -7395 0
c Var 'aux1803' order represents '2' with '7398'
-7396 7398 0
c Var 'aux1803' direct represents '2' with '7399'
7396 -7398 7399 0
-7399 7398 0
-7399 -7396 0
c Var 'aux1803' order represents '3' with '7400'
-7398 7400 0
c Var 'aux1803' direct represents '3' with '7401'
7398 -7400 7401 0
-7401 7400 0
-7401 -7398 0
c Var 'aux1803' direct represents '4' with '-7400'
7395 7397 7399 7401 -7400 0
c Encoding variable: aux1804 with domain: int(0..2) (representing constraint ((x_00008_00004=3) + (x_00007_00006=3)))
c Both direct and order encoding.
c Var 'aux1804' order represents '0' with '7402'
c Var 'aux1804' direct represents '0' with '7402'
c Var 'aux1804' order represents '1' with '7403'
-7402 7403 0
c Var 'aux1804' direct represents '1' with '7404'
7402 -7403 7404 0
-7404 7403 0
-7404 -7402 0
c Var 'aux1804' direct represents '2' with '-7403'
7402 7404 -7403 0
c Encoding variable: aux1805 with domain: int(0..2) (representing constraint ((x_00007_00005=3) + (x_00008_00005=3)))
c Both direct and order encoding.
c Var 'aux1805' order represents '0' with '7405'
c Var 'aux1805' direct represents '0' with '7405'
c Var 'aux1805' order represents '1' with '7406'
-7405 7406 0
c Var 'aux1805' direct represents '1' with '7407'
7405 -7406 7407 0
-7407 7406 0
-7407 -7405 0
c Var 'aux1805' direct represents '2' with '-7406'
7405 7407 -7406 0
c Encoding variable: aux1806 with domain: int(0..2) (representing constraint ((x_00007_00004=3) + (x_00009_00004=3)))
c Both direct and order encoding.
c Var 'aux1806' order represents '0' with '7408'
c Var 'aux1806' direct represents '0' with '7408'
c Var 'aux1806' order represents '1' with '7409'
-7408 7409 0
c Var 'aux1806' direct represents '1' with '7410'
7408 -7409 7410 0
-7410 7409 0
-7410 -7408 0
c Var 'aux1806' direct represents '2' with '-7409'
7408 7410 -7409 0
c Encoding variable: aux1807 with domain: int(0..2) (representing constraint ((x_00009_00006=3) + (x_00009_00005=3)))
c Both direct and order encoding.
c Var 'aux1807' order represents '0' with '7411'
c Var 'aux1807' direct represents '0' with '7411'
c Var 'aux1807' order represents '1' with '7412'
-7411 7412 0
c Var 'aux1807' direct represents '1' with '7413'
7411 -7412 7413 0
-7413 7412 0
-7413 -7411 0
c Var 'aux1807' direct represents '2' with '-7412'
7411 7413 -7412 0
c Encoding variable: aux1808 with domain: int(0..3) (representing constraint ((x_00008_00006=3) + aux1807))
c Both direct and order encoding.
c Var 'aux1808' order represents '0' with '7414'
c Var 'aux1808' direct represents '0' with '7414'
c Var 'aux1808' order represents '1' with '7415'
-7414 7415 0
c Var 'aux1808' direct represents '1' with '7416'
7414 -7415 7416 0
-7416 7415 0
-7416 -7414 0
c Var 'aux1808' order represents '2' with '7417'
-7415 7417 0
c Var 'aux1808' direct represents '2' with '7418'
7415 -7417 7418 0
-7418 7417 0
-7418 -7415 0
c Var 'aux1808' direct represents '3' with '-7417'
7414 7416 7418 -7417 0
c Encoding variable: aux1809 with domain: int(0..4) (representing constraint (aux1804 + aux1806))
c Both direct and order encoding.
c Var 'aux1809' order represents '0' with '7419'
c Var 'aux1809' direct represents '0' with '7419'
c Var 'aux1809' order represents '1' with '7420'
-7419 7420 0
c Var 'aux1809' direct represents '1' with '7421'
7419 -7420 7421 0
-7421 7420 0
-7421 -7419 0
c Var 'aux1809' order represents '2' with '7422'
-7420 7422 0
c Var 'aux1809' direct represents '2' with '7423'
7420 -7422 7423 0
-7423 7422 0
-7423 -7420 0
c Var 'aux1809' order represents '3' with '7424'
-7422 7424 0
c Var 'aux1809' direct represents '3' with '7425'
7422 -7424 7425 0
-7425 7424 0
-7425 -7422 0
c Var 'aux1809' direct represents '4' with '-7424'
7419 7421 7423 7425 -7424 0
c Encoding variable: aux1810 with domain: int(0..2) (representing constraint ((x_00008_00004=4) + (x_00007_00006=4)))
c Both direct and order encoding.
c Var 'aux1810' order represents '0' with '7426'
c Var 'aux1810' direct represents '0' with '7426'
c Var 'aux1810' order represents '1' with '7427'
-7426 7427 0
c Var 'aux1810' direct represents '1' with '7428'
7426 -7427 7428 0
-7428 7427 0
-7428 -7426 0
c Var 'aux1810' direct represents '2' with '-7427'
7426 7428 -7427 0
c Encoding variable: aux1811 with domain: int(0..2) (representing constraint ((x_00007_00005=4) + (x_00008_00005=4)))
c Both direct and order encoding.
c Var 'aux1811' order represents '0' with '7429'
c Var 'aux1811' direct represents '0' with '7429'
c Var 'aux1811' order represents '1' with '7430'
-7429 7430 0
c Var 'aux1811' direct represents '1' with '7431'
7429 -7430 7431 0
-7431 7430 0
-7431 -7429 0
c Var 'aux1811' direct represents '2' with '-7430'
7429 7431 -7430 0
c Encoding variable: aux1812 with domain: int(0..2) (representing constraint ((x_00007_00004=4) + (x_00009_00004=4)))
c Both direct and order encoding.
c Var 'aux1812' order represents '0' with '7432'
c Var 'aux1812' direct represents '0' with '7432'
c Var 'aux1812' order represents '1' with '7433'
-7432 7433 0
c Var 'aux1812' direct represents '1' with '7434'
7432 -7433 7434 0
-7434 7433 0
-7434 -7432 0
c Var 'aux1812' direct represents '2' with '-7433'
7432 7434 -7433 0
c Encoding variable: aux1813 with domain: int(0..2) (representing constraint ((x_00009_00006=4) + (x_00009_00005=4)))
c Both direct and order encoding.
c Var 'aux1813' order represents '0' with '7435'
c Var 'aux1813' direct represents '0' with '7435'
c Var 'aux1813' order represents '1' with '7436'
-7435 7436 0
c Var 'aux1813' direct represents '1' with '7437'
7435 -7436 7437 0
-7437 7436 0
-7437 -7435 0
c Var 'aux1813' direct represents '2' with '-7436'
7435 7437 -7436 0
c Encoding variable: aux1814 with domain: int(0..3) (representing constraint ((x_00008_00006=4) + aux1813))
c Both direct and order encoding.
c Var 'aux1814' order represents '0' with '7438'
c Var 'aux1814' direct represents '0' with '7438'
c Var 'aux1814' order represents '1' with '7439'
-7438 7439 0
c Var 'aux1814' direct represents '1' with '7440'
7438 -7439 7440 0
-7440 7439 0
-7440 -7438 0
c Var 'aux1814' order represents '2' with '7441'
-7439 7441 0
c Var 'aux1814' direct represents '2' with '7442'
7439 -7441 7442 0
-7442 7441 0
-7442 -7439 0
c Var 'aux1814' direct represents '3' with '-7441'
7438 7440 7442 -7441 0
c Encoding variable: aux1815 with domain: int(0..4) (representing constraint (aux1810 + aux1812))
c Both direct and order encoding.
c Var 'aux1815' order represents '0' with '7443'
c Var 'aux1815' direct represents '0' with '7443'
c Var 'aux1815' order represents '1' with '7444'
-7443 7444 0
c Var 'aux1815' direct represents '1' with '7445'
7443 -7444 7445 0
-7445 7444 0
-7445 -7443 0
c Var 'aux1815' order represents '2' with '7446'
-7444 7446 0
c Var 'aux1815' direct represents '2' with '7447'
7444 -7446 7447 0
-7447 7446 0
-7447 -7444 0
c Var 'aux1815' order represents '3' with '7448'
-7446 7448 0
c Var 'aux1815' direct represents '3' with '7449'
7446 -7448 7449 0
-7449 7448 0
-7449 -7446 0
c Var 'aux1815' direct represents '4' with '-7448'
7443 7445 7447 7449 -7448 0
c Encoding variable: aux1816 with domain: int(0..2) (representing constraint ((x_00008_00004=5) + (x_00007_00006=5)))
c Both direct and order encoding.
c Var 'aux1816' order represents '0' with '7450'
c Var 'aux1816' direct represents '0' with '7450'
c Var 'aux1816' order represents '1' with '7451'
-7450 7451 0
c Var 'aux1816' direct represents '1' with '7452'
7450 -7451 7452 0
-7452 7451 0
-7452 -7450 0
c Var 'aux1816' direct represents '2' with '-7451'
7450 7452 -7451 0
c Encoding variable: aux1817 with domain: int(0..2) (representing constraint ((x_00007_00005=5) + (x_00008_00005=5)))
c Both direct and order encoding.
c Var 'aux1817' order represents '0' with '7453'
c Var 'aux1817' direct represents '0' with '7453'
c Var 'aux1817' order represents '1' with '7454'
-7453 7454 0
c Var 'aux1817' direct represents '1' with '7455'
7453 -7454 7455 0
-7455 7454 0
-7455 -7453 0
c Var 'aux1817' direct represents '2' with '-7454'
7453 7455 -7454 0
c Encoding variable: aux1818 with domain: int(0..2) (representing constraint ((x_00007_00004=5) + (x_00009_00004=5)))
c Both direct and order encoding.
c Var 'aux1818' order represents '0' with '7456'
c Var 'aux1818' direct represents '0' with '7456'
c Var 'aux1818' order represents '1' with '7457'
-7456 7457 0
c Var 'aux1818' direct represents '1' with '7458'
7456 -7457 7458 0
-7458 7457 0
-7458 -7456 0
c Var 'aux1818' direct represents '2' with '-7457'
7456 7458 -7457 0
c Encoding variable: aux1819 with domain: int(0..2) (representing constraint ((x_00009_00006=5) + (x_00009_00005=5)))
c Both direct and order encoding.
c Var 'aux1819' order represents '0' with '7459'
c Var 'aux1819' direct represents '0' with '7459'
c Var 'aux1819' order represents '1' with '7460'
-7459 7460 0
c Var 'aux1819' direct represents '1' with '7461'
7459 -7460 7461 0
-7461 7460 0
-7461 -7459 0
c Var 'aux1819' direct represents '2' with '-7460'
7459 7461 -7460 0
c Encoding variable: aux1820 with domain: int(0..3) (representing constraint ((x_00008_00006=5) + aux1819))
c Both direct and order encoding.
c Var 'aux1820' order represents '0' with '7462'
c Var 'aux1820' direct represents '0' with '7462'
c Var 'aux1820' order represents '1' with '7463'
-7462 7463 0
c Var 'aux1820' direct represents '1' with '7464'
7462 -7463 7464 0
-7464 7463 0
-7464 -7462 0
c Var 'aux1820' order represents '2' with '7465'
-7463 7465 0
c Var 'aux1820' direct represents '2' with '7466'
7463 -7465 7466 0
-7466 7465 0
-7466 -7463 0
c Var 'aux1820' direct represents '3' with '-7465'
7462 7464 7466 -7465 0
c Encoding variable: aux1821 with domain: int(0..4) (representing constraint (aux1816 + aux1818))
c Both direct and order encoding.
c Var 'aux1821' order represents '0' with '7467'
c Var 'aux1821' direct represents '0' with '7467'
c Var 'aux1821' order represents '1' with '7468'
-7467 7468 0
c Var 'aux1821' direct represents '1' with '7469'
7467 -7468 7469 0
-7469 7468 0
-7469 -7467 0
c Var 'aux1821' order represents '2' with '7470'
-7468 7470 0
c Var 'aux1821' direct represents '2' with '7471'
7468 -7470 7471 0
-7471 7470 0
-7471 -7468 0
c Var 'aux1821' order represents '3' with '7472'
-7470 7472 0
c Var 'aux1821' direct represents '3' with '7473'
7470 -7472 7473 0
-7473 7472 0
-7473 -7470 0
c Var 'aux1821' direct represents '4' with '-7472'
7467 7469 7471 7473 -7472 0
c Encoding variable: aux1822 with domain: int(0..2) (representing constraint ((x_00008_00004=6) + (x_00007_00006=6)))
c Both direct and order encoding.
c Var 'aux1822' order represents '0' with '7474'
c Var 'aux1822' direct represents '0' with '7474'
c Var 'aux1822' order represents '1' with '7475'
-7474 7475 0
c Var 'aux1822' direct represents '1' with '7476'
7474 -7475 7476 0
-7476 7475 0
-7476 -7474 0
c Var 'aux1822' direct represents '2' with '-7475'
7474 7476 -7475 0
c Encoding variable: aux1823 with domain: int(0..2) (representing constraint ((x_00007_00005=6) + (x_00008_00005=6)))
c Both direct and order encoding.
c Var 'aux1823' order represents '0' with '7477'
c Var 'aux1823' direct represents '0' with '7477'
c Var 'aux1823' order represents '1' with '7478'
-7477 7478 0
c Var 'aux1823' direct represents '1' with '7479'
7477 -7478 7479 0
-7479 7478 0
-7479 -7477 0
c Var 'aux1823' direct represents '2' with '-7478'
7477 7479 -7478 0
c Encoding variable: aux1824 with domain: int(0..2) (representing constraint ((x_00007_00004=6) + (x_00009_00004=6)))
c Both direct and order encoding.
c Var 'aux1824' order represents '0' with '7480'
c Var 'aux1824' direct represents '0' with '7480'
c Var 'aux1824' order represents '1' with '7481'
-7480 7481 0
c Var 'aux1824' direct represents '1' with '7482'
7480 -7481 7482 0
-7482 7481 0
-7482 -7480 0
c Var 'aux1824' direct represents '2' with '-7481'
7480 7482 -7481 0
c Encoding variable: aux1825 with domain: int(0..2) (representing constraint ((x_00009_00006=6) + (x_00009_00005=6)))
c Both direct and order encoding.
c Var 'aux1825' order represents '0' with '7483'
c Var 'aux1825' direct represents '0' with '7483'
c Var 'aux1825' order represents '1' with '7484'
-7483 7484 0
c Var 'aux1825' direct represents '1' with '7485'
7483 -7484 7485 0
-7485 7484 0
-7485 -7483 0
c Var 'aux1825' direct represents '2' with '-7484'
7483 7485 -7484 0
c Encoding variable: aux1826 with domain: int(0..3) (representing constraint ((x_00008_00006=6) + aux1825))
c Both direct and order encoding.
c Var 'aux1826' order represents '0' with '7486'
c Var 'aux1826' direct represents '0' with '7486'
c Var 'aux1826' order represents '1' with '7487'
-7486 7487 0
c Var 'aux1826' direct represents '1' with '7488'
7486 -7487 7488 0
-7488 7487 0
-7488 -7486 0
c Var 'aux1826' order represents '2' with '7489'
-7487 7489 0
c Var 'aux1826' direct represents '2' with '7490'
7487 -7489 7490 0
-7490 7489 0
-7490 -7487 0
c Var 'aux1826' direct represents '3' with '-7489'
7486 7488 7490 -7489 0
c Encoding variable: aux1827 with domain: int(0..4) (representing constraint (aux1822 + aux1824))
c Both direct and order encoding.
c Var 'aux1827' order represents '0' with '7491'
c Var 'aux1827' direct represents '0' with '7491'
c Var 'aux1827' order represents '1' with '7492'
-7491 7492 0
c Var 'aux1827' direct represents '1' with '7493'
7491 -7492 7493 0
-7493 7492 0
-7493 -7491 0
c Var 'aux1827' order represents '2' with '7494'
-7492 7494 0
c Var 'aux1827' direct represents '2' with '7495'
7492 -7494 7495 0
-7495 7494 0
-7495 -7492 0
c Var 'aux1827' order represents '3' with '7496'
-7494 7496 0
c Var 'aux1827' direct represents '3' with '7497'
7494 -7496 7497 0
-7497 7496 0
-7497 -7494 0
c Var 'aux1827' direct represents '4' with '-7496'
7491 7493 7495 7497 -7496 0
c Encoding variable: aux1828 with domain: int(0..2) (representing constraint ((x_00008_00004=7) + (x_00007_00006=7)))
c Both direct and order encoding.
c Var 'aux1828' order represents '0' with '7498'
c Var 'aux1828' direct represents '0' with '7498'
c Var 'aux1828' order represents '1' with '7499'
-7498 7499 0
c Var 'aux1828' direct represents '1' with '7500'
7498 -7499 7500 0
-7500 7499 0
-7500 -7498 0
c Var 'aux1828' direct represents '2' with '-7499'
7498 7500 -7499 0
c Encoding variable: aux1829 with domain: int(0..2) (representing constraint ((x_00007_00005=7) + (x_00008_00005=7)))
c Both direct and order encoding.
c Var 'aux1829' order represents '0' with '7501'
c Var 'aux1829' direct represents '0' with '7501'
c Var 'aux1829' order represents '1' with '7502'
-7501 7502 0
c Var 'aux1829' direct represents '1' with '7503'
7501 -7502 7503 0
-7503 7502 0
-7503 -7501 0
c Var 'aux1829' direct represents '2' with '-7502'
7501 7503 -7502 0
c Encoding variable: aux1830 with domain: int(0..2) (representing constraint ((x_00007_00004=7) + (x_00009_00004=7)))
c Both direct and order encoding.
c Var 'aux1830' order represents '0' with '7504'
c Var 'aux1830' direct represents '0' with '7504'
c Var 'aux1830' order represents '1' with '7505'
-7504 7505 0
c Var 'aux1830' direct represents '1' with '7506'
7504 -7505 7506 0
-7506 7505 0
-7506 -7504 0
c Var 'aux1830' direct represents '2' with '-7505'
7504 7506 -7505 0
c Encoding variable: aux1831 with domain: int(0..2) (representing constraint ((x_00009_00006=7) + (x_00009_00005=7)))
c Both direct and order encoding.
c Var 'aux1831' order represents '0' with '7507'
c Var 'aux1831' direct represents '0' with '7507'
c Var 'aux1831' order represents '1' with '7508'
-7507 7508 0
c Var 'aux1831' direct represents '1' with '7509'
7507 -7508 7509 0
-7509 7508 0
-7509 -7507 0
c Var 'aux1831' direct represents '2' with '-7508'
7507 7509 -7508 0
c Encoding variable: aux1832 with domain: int(0..3) (representing constraint ((x_00008_00006=7) + aux1831))
c Both direct and order encoding.
c Var 'aux1832' order represents '0' with '7510'
c Var 'aux1832' direct represents '0' with '7510'
c Var 'aux1832' order represents '1' with '7511'
-7510 7511 0
c Var 'aux1832' direct represents '1' with '7512'
7510 -7511 7512 0
-7512 7511 0
-7512 -7510 0
c Var 'aux1832' order represents '2' with '7513'
-7511 7513 0
c Var 'aux1832' direct represents '2' with '7514'
7511 -7513 7514 0
-7514 7513 0
-7514 -7511 0
c Var 'aux1832' direct represents '3' with '-7513'
7510 7512 7514 -7513 0
c Encoding variable: aux1833 with domain: int(0..4) (representing constraint (aux1828 + aux1830))
c Both direct and order encoding.
c Var 'aux1833' order represents '0' with '7515'
c Var 'aux1833' direct represents '0' with '7515'
c Var 'aux1833' order represents '1' with '7516'
-7515 7516 0
c Var 'aux1833' direct represents '1' with '7517'
7515 -7516 7517 0
-7517 7516 0
-7517 -7515 0
c Var 'aux1833' order represents '2' with '7518'
-7516 7518 0
c Var 'aux1833' direct represents '2' with '7519'
7516 -7518 7519 0
-7519 7518 0
-7519 -7516 0
c Var 'aux1833' order represents '3' with '7520'
-7518 7520 0
c Var 'aux1833' direct represents '3' with '7521'
7518 -7520 7521 0
-7521 7520 0
-7521 -7518 0
c Var 'aux1833' direct represents '4' with '-7520'
7515 7517 7519 7521 -7520 0
c Encoding variable: aux1834 with domain: int(0..2) (representing constraint ((x_00008_00004=8) + (x_00007_00006=8)))
c Both direct and order encoding.
c Var 'aux1834' order represents '0' with '7522'
c Var 'aux1834' direct represents '0' with '7522'
c Var 'aux1834' order represents '1' with '7523'
-7522 7523 0
c Var 'aux1834' direct represents '1' with '7524'
7522 -7523 7524 0
-7524 7523 0
-7524 -7522 0
c Var 'aux1834' direct represents '2' with '-7523'
7522 7524 -7523 0
c Encoding variable: aux1835 with domain: int(0..2) (representing constraint ((x_00007_00005=8) + (x_00008_00005=8)))
c Both direct and order encoding.
c Var 'aux1835' order represents '0' with '7525'
c Var 'aux1835' direct represents '0' with '7525'
c Var 'aux1835' order represents '1' with '7526'
-7525 7526 0
c Var 'aux1835' direct represents '1' with '7527'
7525 -7526 7527 0
-7527 7526 0
-7527 -7525 0
c Var 'aux1835' direct represents '2' with '-7526'
7525 7527 -7526 0
c Encoding variable: aux1836 with domain: int(0..2) (representing constraint ((x_00007_00004=8) + (x_00009_00004=8)))
c Both direct and order encoding.
c Var 'aux1836' order represents '0' with '7528'
c Var 'aux1836' direct represents '0' with '7528'
c Var 'aux1836' order represents '1' with '7529'
-7528 7529 0
c Var 'aux1836' direct represents '1' with '7530'
7528 -7529 7530 0
-7530 7529 0
-7530 -7528 0
c Var 'aux1836' direct represents '2' with '-7529'
7528 7530 -7529 0
c Encoding variable: aux1837 with domain: int(0..2) (representing constraint ((x_00009_00006=8) + (x_00009_00005=8)))
c Both direct and order encoding.
c Var 'aux1837' order represents '0' with '7531'
c Var 'aux1837' direct represents '0' with '7531'
c Var 'aux1837' order represents '1' with '7532'
-7531 7532 0
c Var 'aux1837' direct represents '1' with '7533'
7531 -7532 7533 0
-7533 7532 0
-7533 -7531 0
c Var 'aux1837' direct represents '2' with '-7532'
7531 7533 -7532 0
c Encoding variable: aux1838 with domain: int(0..3) (representing constraint ((x_00008_00006=8) + aux1837))
c Both direct and order encoding.
c Var 'aux1838' order represents '0' with '7534'
c Var 'aux1838' direct represents '0' with '7534'
c Var 'aux1838' order represents '1' with '7535'
-7534 7535 0
c Var 'aux1838' direct represents '1' with '7536'
7534 -7535 7536 0
-7536 7535 0
-7536 -7534 0
c Var 'aux1838' order represents '2' with '7537'
-7535 7537 0
c Var 'aux1838' direct represents '2' with '7538'
7535 -7537 7538 0
-7538 7537 0
-7538 -7535 0
c Var 'aux1838' direct represents '3' with '-7537'
7534 7536 7538 -7537 0
c Encoding variable: aux1839 with domain: int(0..4) (representing constraint (aux1834 + aux1836))
c Both direct and order encoding.
c Var 'aux1839' order represents '0' with '7539'
c Var 'aux1839' direct represents '0' with '7539'
c Var 'aux1839' order represents '1' with '7540'
-7539 7540 0
c Var 'aux1839' direct represents '1' with '7541'
7539 -7540 7541 0
-7541 7540 0
-7541 -7539 0
c Var 'aux1839' order represents '2' with '7542'
-7540 7542 0
c Var 'aux1839' direct represents '2' with '7543'
7540 -7542 7543 0
-7543 7542 0
-7543 -7540 0
c Var 'aux1839' order represents '3' with '7544'
-7542 7544 0
c Var 'aux1839' direct represents '3' with '7545'
7542 -7544 7545 0
-7545 7544 0
-7545 -7542 0
c Var 'aux1839' direct represents '4' with '-7544'
7539 7541 7543 7545 -7544 0
c Encoding variable: aux1840 with domain: int(0..2) (representing constraint ((x_00008_00004=9) + (x_00007_00006=9)))
c Both direct and order encoding.
c Var 'aux1840' order represents '0' with '7546'
c Var 'aux1840' direct represents '0' with '7546'
c Var 'aux1840' order represents '1' with '7547'
-7546 7547 0
c Var 'aux1840' direct represents '1' with '7548'
7546 -7547 7548 0
-7548 7547 0
-7548 -7546 0
c Var 'aux1840' direct represents '2' with '-7547'
7546 7548 -7547 0
c Encoding variable: aux1841 with domain: int(0..2) (representing constraint ((x_00007_00005=9) + (x_00008_00005=9)))
c Both direct and order encoding.
c Var 'aux1841' order represents '0' with '7549'
c Var 'aux1841' direct represents '0' with '7549'
c Var 'aux1841' order represents '1' with '7550'
-7549 7550 0
c Var 'aux1841' direct represents '1' with '7551'
7549 -7550 7551 0
-7551 7550 0
-7551 -7549 0
c Var 'aux1841' direct represents '2' with '-7550'
7549 7551 -7550 0
c Encoding variable: aux1842 with domain: int(0..2) (representing constraint ((x_00007_00004=9) + (x_00009_00004=9)))
c Both direct and order encoding.
c Var 'aux1842' order represents '0' with '7552'
c Var 'aux1842' direct represents '0' with '7552'
c Var 'aux1842' order represents '1' with '7553'
-7552 7553 0
c Var 'aux1842' direct represents '1' with '7554'
7552 -7553 7554 0
-7554 7553 0
-7554 -7552 0
c Var 'aux1842' direct represents '2' with '-7553'
7552 7554 -7553 0
c Encoding variable: aux1843 with domain: int(0..2) (representing constraint ((x_00009_00006=9) + (x_00009_00005=9)))
c Both direct and order encoding.
c Var 'aux1843' order represents '0' with '7555'
c Var 'aux1843' direct represents '0' with '7555'
c Var 'aux1843' order represents '1' with '7556'
-7555 7556 0
c Var 'aux1843' direct represents '1' with '7557'
7555 -7556 7557 0
-7557 7556 0
-7557 -7555 0
c Var 'aux1843' direct represents '2' with '-7556'
7555 7557 -7556 0
c Encoding variable: aux1844 with domain: int(0..3) (representing constraint ((x_00008_00006=9) + aux1843))
c Both direct and order encoding.
c Var 'aux1844' order represents '0' with '7558'
c Var 'aux1844' direct represents '0' with '7558'
c Var 'aux1844' order represents '1' with '7559'
-7558 7559 0
c Var 'aux1844' direct represents '1' with '7560'
7558 -7559 7560 0
-7560 7559 0
-7560 -7558 0
c Var 'aux1844' order represents '2' with '7561'
-7559 7561 0
c Var 'aux1844' direct represents '2' with '7562'
7559 -7561 7562 0
-7562 7561 0
-7562 -7559 0
c Var 'aux1844' direct represents '3' with '-7561'
7558 7560 7562 -7561 0
c Encoding variable: aux1845 with domain: int(0..4) (representing constraint (aux1840 + aux1842))
c Both direct and order encoding.
c Var 'aux1845' order represents '0' with '7563'
c Var 'aux1845' direct represents '0' with '7563'
c Var 'aux1845' order represents '1' with '7564'
-7563 7564 0
c Var 'aux1845' direct represents '1' with '7565'
7563 -7564 7565 0
-7565 7564 0
-7565 -7563 0
c Var 'aux1845' order represents '2' with '7566'
-7564 7566 0
c Var 'aux1845' direct represents '2' with '7567'
7564 -7566 7567 0
-7567 7566 0
-7567 -7564 0
c Var 'aux1845' order represents '3' with '7568'
-7566 7568 0
c Var 'aux1845' direct represents '3' with '7569'
7566 -7568 7569 0
-7569 7568 0
-7569 -7566 0
c Var 'aux1845' direct represents '4' with '-7568'
7563 7565 7567 7569 -7568 0
c Encoding variable: aux1846 with domain: int(0..2) (representing constraint ((x_00008_00007=1) + (x_00007_00009=1)))
c Both direct and order encoding.
c Var 'aux1846' order represents '0' with '7570'
c Var 'aux1846' direct represents '0' with '7570'
c Var 'aux1846' order represents '1' with '7571'
-7570 7571 0
c Var 'aux1846' direct represents '1' with '7572'
7570 -7571 7572 0
-7572 7571 0
-7572 -7570 0
c Var 'aux1846' direct represents '2' with '-7571'
7570 7572 -7571 0
c Encoding variable: aux1847 with domain: int(0..2) (representing constraint ((x_00007_00008=1) + (x_00008_00008=1)))
c Both direct and order encoding.
c Var 'aux1847' order represents '0' with '7573'
c Var 'aux1847' direct represents '0' with '7573'
c Var 'aux1847' order represents '1' with '7574'
-7573 7574 0
c Var 'aux1847' direct represents '1' with '7575'
7573 -7574 7575 0
-7575 7574 0
-7575 -7573 0
c Var 'aux1847' direct represents '2' with '-7574'
7573 7575 -7574 0
c Encoding variable: aux1848 with domain: int(0..2) (representing constraint ((x_00007_00007=1) + (x_00009_00007=1)))
c Both direct and order encoding.
c Var 'aux1848' order represents '0' with '7576'
c Var 'aux1848' direct represents '0' with '7576'
c Var 'aux1848' order represents '1' with '7577'
-7576 7577 0
c Var 'aux1848' direct represents '1' with '7578'
7576 -7577 7578 0
-7578 7577 0
-7578 -7576 0
c Var 'aux1848' direct represents '2' with '-7577'
7576 7578 -7577 0
c Encoding variable: aux1849 with domain: int(0..2) (representing constraint ((x_00009_00009=1) + (x_00009_00008=1)))
c Both direct and order encoding.
c Var 'aux1849' order represents '0' with '7579'
c Var 'aux1849' direct represents '0' with '7579'
c Var 'aux1849' order represents '1' with '7580'
-7579 7580 0
c Var 'aux1849' direct represents '1' with '7581'
7579 -7580 7581 0
-7581 7580 0
-7581 -7579 0
c Var 'aux1849' direct represents '2' with '-7580'
7579 7581 -7580 0
c Encoding variable: aux1850 with domain: int(0..3) (representing constraint ((x_00008_00009=1) + aux1849))
c Both direct and order encoding.
c Var 'aux1850' order represents '0' with '7582'
c Var 'aux1850' direct represents '0' with '7582'
c Var 'aux1850' order represents '1' with '7583'
-7582 7583 0
c Var 'aux1850' direct represents '1' with '7584'
7582 -7583 7584 0
-7584 7583 0
-7584 -7582 0
c Var 'aux1850' order represents '2' with '7585'
-7583 7585 0
c Var 'aux1850' direct represents '2' with '7586'
7583 -7585 7586 0
-7586 7585 0
-7586 -7583 0
c Var 'aux1850' direct represents '3' with '-7585'
7582 7584 7586 -7585 0
c Encoding variable: aux1851 with domain: int(0..4) (representing constraint (aux1846 + aux1848))
c Both direct and order encoding.
c Var 'aux1851' order represents '0' with '7587'
c Var 'aux1851' direct represents '0' with '7587'
c Var 'aux1851' order represents '1' with '7588'
-7587 7588 0
c Var 'aux1851' direct represents '1' with '7589'
7587 -7588 7589 0
-7589 7588 0
-7589 -7587 0
c Var 'aux1851' order represents '2' with '7590'
-7588 7590 0
c Var 'aux1851' direct represents '2' with '7591'
7588 -7590 7591 0
-7591 7590 0
-7591 -7588 0
c Var 'aux1851' order represents '3' with '7592'
-7590 7592 0
c Var 'aux1851' direct represents '3' with '7593'
7590 -7592 7593 0
-7593 7592 0
-7593 -7590 0
c Var 'aux1851' direct represents '4' with '-7592'
7587 7589 7591 7593 -7592 0
c Encoding variable: aux1852 with domain: int(0..2) (representing constraint ((x_00008_00007=2) + (x_00007_00009=2)))
c Both direct and order encoding.
c Var 'aux1852' order represents '0' with '7594'
c Var 'aux1852' direct represents '0' with '7594'
c Var 'aux1852' order represents '1' with '7595'
-7594 7595 0
c Var 'aux1852' direct represents '1' with '7596'
7594 -7595 7596 0
-7596 7595 0
-7596 -7594 0
c Var 'aux1852' direct represents '2' with '-7595'
7594 7596 -7595 0
c Encoding variable: aux1853 with domain: int(0..2) (representing constraint ((x_00007_00008=2) + (x_00008_00008=2)))
c Both direct and order encoding.
c Var 'aux1853' order represents '0' with '7597'
c Var 'aux1853' direct represents '0' with '7597'
c Var 'aux1853' order represents '1' with '7598'
-7597 7598 0
c Var 'aux1853' direct represents '1' with '7599'
7597 -7598 7599 0
-7599 7598 0
-7599 -7597 0
c Var 'aux1853' direct represents '2' with '-7598'
7597 7599 -7598 0
c Encoding variable: aux1854 with domain: int(0..2) (representing constraint ((x_00007_00007=2) + (x_00009_00007=2)))
c Both direct and order encoding.
c Var 'aux1854' order represents '0' with '7600'
c Var 'aux1854' direct represents '0' with '7600'
c Var 'aux1854' order represents '1' with '7601'
-7600 7601 0
c Var 'aux1854' direct represents '1' with '7602'
7600 -7601 7602 0
-7602 7601 0
-7602 -7600 0
c Var 'aux1854' direct represents '2' with '-7601'
7600 7602 -7601 0
c Encoding variable: aux1855 with domain: int(0..2) (representing constraint ((x_00009_00009=2) + (x_00009_00008=2)))
c Both direct and order encoding.
c Var 'aux1855' order represents '0' with '7603'
c Var 'aux1855' direct represents '0' with '7603'
c Var 'aux1855' order represents '1' with '7604'
-7603 7604 0
c Var 'aux1855' direct represents '1' with '7605'
7603 -7604 7605 0
-7605 7604 0
-7605 -7603 0
c Var 'aux1855' direct represents '2' with '-7604'
7603 7605 -7604 0
c Encoding variable: aux1856 with domain: int(0..3) (representing constraint ((x_00008_00009=2) + aux1855))
c Both direct and order encoding.
c Var 'aux1856' order represents '0' with '7606'
c Var 'aux1856' direct represents '0' with '7606'
c Var 'aux1856' order represents '1' with '7607'
-7606 7607 0
c Var 'aux1856' direct represents '1' with '7608'
7606 -7607 7608 0
-7608 7607 0
-7608 -7606 0
c Var 'aux1856' order represents '2' with '7609'
-7607 7609 0
c Var 'aux1856' direct represents '2' with '7610'
7607 -7609 7610 0
-7610 7609 0
-7610 -7607 0
c Var 'aux1856' direct represents '3' with '-7609'
7606 7608 7610 -7609 0
c Encoding variable: aux1857 with domain: int(0..4) (representing constraint (aux1852 + aux1854))
c Both direct and order encoding.
c Var 'aux1857' order represents '0' with '7611'
c Var 'aux1857' direct represents '0' with '7611'
c Var 'aux1857' order represents '1' with '7612'
-7611 7612 0
c Var 'aux1857' direct represents '1' with '7613'
7611 -7612 7613 0
-7613 7612 0
-7613 -7611 0
c Var 'aux1857' order represents '2' with '7614'
-7612 7614 0
c Var 'aux1857' direct represents '2' with '7615'
7612 -7614 7615 0
-7615 7614 0
-7615 -7612 0
c Var 'aux1857' order represents '3' with '7616'
-7614 7616 0
c Var 'aux1857' direct represents '3' with '7617'
7614 -7616 7617 0
-7617 7616 0
-7617 -7614 0
c Var 'aux1857' direct represents '4' with '-7616'
7611 7613 7615 7617 -7616 0
c Encoding variable: aux1858 with domain: int(0..2) (representing constraint ((x_00008_00007=3) + (x_00007_00009=3)))
c Both direct and order encoding.
c Var 'aux1858' order represents '0' with '7618'
c Var 'aux1858' direct represents '0' with '7618'
c Var 'aux1858' order represents '1' with '7619'
-7618 7619 0
c Var 'aux1858' direct represents '1' with '7620'
7618 -7619 7620 0
-7620 7619 0
-7620 -7618 0
c Var 'aux1858' direct represents '2' with '-7619'
7618 7620 -7619 0
c Encoding variable: aux1859 with domain: int(0..2) (representing constraint ((x_00007_00008=3) + (x_00008_00008=3)))
c Both direct and order encoding.
c Var 'aux1859' order represents '0' with '7621'
c Var 'aux1859' direct represents '0' with '7621'
c Var 'aux1859' order represents '1' with '7622'
-7621 7622 0
c Var 'aux1859' direct represents '1' with '7623'
7621 -7622 7623 0
-7623 7622 0
-7623 -7621 0
c Var 'aux1859' direct represents '2' with '-7622'
7621 7623 -7622 0
c Encoding variable: aux1860 with domain: int(0..2) (representing constraint ((x_00007_00007=3) + (x_00009_00007=3)))
c Both direct and order encoding.
c Var 'aux1860' order represents '0' with '7624'
c Var 'aux1860' direct represents '0' with '7624'
c Var 'aux1860' order represents '1' with '7625'
-7624 7625 0
c Var 'aux1860' direct represents '1' with '7626'
7624 -7625 7626 0
-7626 7625 0
-7626 -7624 0
c Var 'aux1860' direct represents '2' with '-7625'
7624 7626 -7625 0
c Encoding variable: aux1861 with domain: int(0..2) (representing constraint ((x_00009_00009=3) + (x_00009_00008=3)))
c Both direct and order encoding.
c Var 'aux1861' order represents '0' with '7627'
c Var 'aux1861' direct represents '0' with '7627'
c Var 'aux1861' order represents '1' with '7628'
-7627 7628 0
c Var 'aux1861' direct represents '1' with '7629'
7627 -7628 7629 0
-7629 7628 0
-7629 -7627 0
c Var 'aux1861' direct represents '2' with '-7628'
7627 7629 -7628 0
c Encoding variable: aux1862 with domain: int(0..3) (representing constraint ((x_00008_00009=3) + aux1861))
c Both direct and order encoding.
c Var 'aux1862' order represents '0' with '7630'
c Var 'aux1862' direct represents '0' with '7630'
c Var 'aux1862' order represents '1' with '7631'
-7630 7631 0
c Var 'aux1862' direct represents '1' with '7632'
7630 -7631 7632 0
-7632 7631 0
-7632 -7630 0
c Var 'aux1862' order represents '2' with '7633'
-7631 7633 0
c Var 'aux1862' direct represents '2' with '7634'
7631 -7633 7634 0
-7634 7633 0
-7634 -7631 0
c Var 'aux1862' direct represents '3' with '-7633'
7630 7632 7634 -7633 0
c Encoding variable: aux1863 with domain: int(0..4) (representing constraint (aux1858 + aux1860))
c Both direct and order encoding.
c Var 'aux1863' order represents '0' with '7635'
c Var 'aux1863' direct represents '0' with '7635'
c Var 'aux1863' order represents '1' with '7636'
-7635 7636 0
c Var 'aux1863' direct represents '1' with '7637'
7635 -7636 7637 0
-7637 7636 0
-7637 -7635 0
c Var 'aux1863' order represents '2' with '7638'
-7636 7638 0
c Var 'aux1863' direct represents '2' with '7639'
7636 -7638 7639 0
-7639 7638 0
-7639 -7636 0
c Var 'aux1863' order represents '3' with '7640'
-7638 7640 0
c Var 'aux1863' direct represents '3' with '7641'
7638 -7640 7641 0
-7641 7640 0
-7641 -7638 0
c Var 'aux1863' direct represents '4' with '-7640'
7635 7637 7639 7641 -7640 0
c Encoding variable: aux1864 with domain: int(0..2) (representing constraint ((x_00008_00007=4) + (x_00007_00009=4)))
c Both direct and order encoding.
c Var 'aux1864' order represents '0' with '7642'
c Var 'aux1864' direct represents '0' with '7642'
c Var 'aux1864' order represents '1' with '7643'
-7642 7643 0
c Var 'aux1864' direct represents '1' with '7644'
7642 -7643 7644 0
-7644 7643 0
-7644 -7642 0
c Var 'aux1864' direct represents '2' with '-7643'
7642 7644 -7643 0
c Encoding variable: aux1865 with domain: int(0..2) (representing constraint ((x_00007_00008=4) + (x_00008_00008=4)))
c Both direct and order encoding.
c Var 'aux1865' order represents '0' with '7645'
c Var 'aux1865' direct represents '0' with '7645'
c Var 'aux1865' order represents '1' with '7646'
-7645 7646 0
c Var 'aux1865' direct represents '1' with '7647'
7645 -7646 7647 0
-7647 7646 0
-7647 -7645 0
c Var 'aux1865' direct represents '2' with '-7646'
7645 7647 -7646 0
c Encoding variable: aux1866 with domain: int(0..2) (representing constraint ((x_00007_00007=4) + (x_00009_00007=4)))
c Both direct and order encoding.
c Var 'aux1866' order represents '0' with '7648'
c Var 'aux1866' direct represents '0' with '7648'
c Var 'aux1866' order represents '1' with '7649'
-7648 7649 0
c Var 'aux1866' direct represents '1' with '7650'
7648 -7649 7650 0
-7650 7649 0
-7650 -7648 0
c Var 'aux1866' direct represents '2' with '-7649'
7648 7650 -7649 0
c Encoding variable: aux1867 with domain: int(0..2) (representing constraint ((x_00009_00009=4) + (x_00009_00008=4)))
c Both direct and order encoding.
c Var 'aux1867' order represents '0' with '7651'
c Var 'aux1867' direct represents '0' with '7651'
c Var 'aux1867' order represents '1' with '7652'
-7651 7652 0
c Var 'aux1867' direct represents '1' with '7653'
7651 -7652 7653 0
-7653 7652 0
-7653 -7651 0
c Var 'aux1867' direct represents '2' with '-7652'
7651 7653 -7652 0
c Encoding variable: aux1868 with domain: int(0..3) (representing constraint ((x_00008_00009=4) + aux1867))
c Both direct and order encoding.
c Var 'aux1868' order represents '0' with '7654'
c Var 'aux1868' direct represents '0' with '7654'
c Var 'aux1868' order represents '1' with '7655'
-7654 7655 0
c Var 'aux1868' direct represents '1' with '7656'
7654 -7655 7656 0
-7656 7655 0
-7656 -7654 0
c Var 'aux1868' order represents '2' with '7657'
-7655 7657 0
c Var 'aux1868' direct represents '2' with '7658'
7655 -7657 7658 0
-7658 7657 0
-7658 -7655 0
c Var 'aux1868' direct represents '3' with '-7657'
7654 7656 7658 -7657 0
c Encoding variable: aux1869 with domain: int(0..4) (representing constraint (aux1864 + aux1866))
c Both direct and order encoding.
c Var 'aux1869' order represents '0' with '7659'
c Var 'aux1869' direct represents '0' with '7659'
c Var 'aux1869' order represents '1' with '7660'
-7659 7660 0
c Var 'aux1869' direct represents '1' with '7661'
7659 -7660 7661 0
-7661 7660 0
-7661 -7659 0
c Var 'aux1869' order represents '2' with '7662'
-7660 7662 0
c Var 'aux1869' direct represents '2' with '7663'
7660 -7662 7663 0
-7663 7662 0
-7663 -7660 0
c Var 'aux1869' order represents '3' with '7664'
-7662 7664 0
c Var 'aux1869' direct represents '3' with '7665'
7662 -7664 7665 0
-7665 7664 0
-7665 -7662 0
c Var 'aux1869' direct represents '4' with '-7664'
7659 7661 7663 7665 -7664 0
c Encoding variable: aux1870 with domain: int(0..2) (representing constraint ((x_00008_00007=5) + (x_00007_00009=5)))
c Both direct and order encoding.
c Var 'aux1870' order represents '0' with '7666'
c Var 'aux1870' direct represents '0' with '7666'
c Var 'aux1870' order represents '1' with '7667'
-7666 7667 0
c Var 'aux1870' direct represents '1' with '7668'
7666 -7667 7668 0
-7668 7667 0
-7668 -7666 0
c Var 'aux1870' direct represents '2' with '-7667'
7666 7668 -7667 0
c Encoding variable: aux1871 with domain: int(0..2) (representing constraint ((x_00007_00008=5) + (x_00008_00008=5)))
c Both direct and order encoding.
c Var 'aux1871' order represents '0' with '7669'
c Var 'aux1871' direct represents '0' with '7669'
c Var 'aux1871' order represents '1' with '7670'
-7669 7670 0
c Var 'aux1871' direct represents '1' with '7671'
7669 -7670 7671 0
-7671 7670 0
-7671 -7669 0
c Var 'aux1871' direct represents '2' with '-7670'
7669 7671 -7670 0
c Encoding variable: aux1872 with domain: int(0..2) (representing constraint ((x_00007_00007=5) + (x_00009_00007=5)))
c Both direct and order encoding.
c Var 'aux1872' order represents '0' with '7672'
c Var 'aux1872' direct represents '0' with '7672'
c Var 'aux1872' order represents '1' with '7673'
-7672 7673 0
c Var 'aux1872' direct represents '1' with '7674'
7672 -7673 7674 0
-7674 7673 0
-7674 -7672 0
c Var 'aux1872' direct represents '2' with '-7673'
7672 7674 -7673 0
c Encoding variable: aux1873 with domain: int(0..2) (representing constraint ((x_00009_00009=5) + (x_00009_00008=5)))
c Both direct and order encoding.
c Var 'aux1873' order represents '0' with '7675'
c Var 'aux1873' direct represents '0' with '7675'
c Var 'aux1873' order represents '1' with '7676'
-7675 7676 0
c Var 'aux1873' direct represents '1' with '7677'
7675 -7676 7677 0
-7677 7676 0
-7677 -7675 0
c Var 'aux1873' direct represents '2' with '-7676'
7675 7677 -7676 0
c Encoding variable: aux1874 with domain: int(0..3) (representing constraint ((x_00008_00009=5) + aux1873))
c Both direct and order encoding.
c Var 'aux1874' order represents '0' with '7678'
c Var 'aux1874' direct represents '0' with '7678'
c Var 'aux1874' order represents '1' with '7679'
-7678 7679 0
c Var 'aux1874' direct represents '1' with '7680'
7678 -7679 7680 0
-7680 7679 0
-7680 -7678 0
c Var 'aux1874' order represents '2' with '7681'
-7679 7681 0
c Var 'aux1874' direct represents '2' with '7682'
7679 -7681 7682 0
-7682 7681 0
-7682 -7679 0
c Var 'aux1874' direct represents '3' with '-7681'
7678 7680 7682 -7681 0
c Encoding variable: aux1875 with domain: int(0..4) (representing constraint (aux1870 + aux1872))
c Both direct and order encoding.
c Var 'aux1875' order represents '0' with '7683'
c Var 'aux1875' direct represents '0' with '7683'
c Var 'aux1875' order represents '1' with '7684'
-7683 7684 0
c Var 'aux1875' direct represents '1' with '7685'
7683 -7684 7685 0
-7685 7684 0
-7685 -7683 0
c Var 'aux1875' order represents '2' with '7686'
-7684 7686 0
c Var 'aux1875' direct represents '2' with '7687'
7684 -7686 7687 0
-7687 7686 0
-7687 -7684 0
c Var 'aux1875' order represents '3' with '7688'
-7686 7688 0
c Var 'aux1875' direct represents '3' with '7689'
7686 -7688 7689 0
-7689 7688 0
-7689 -7686 0
c Var 'aux1875' direct represents '4' with '-7688'
7683 7685 7687 7689 -7688 0
c Encoding variable: aux1876 with domain: int(0..2) (representing constraint ((x_00008_00007=6) + (x_00007_00009=6)))
c Both direct and order encoding.
c Var 'aux1876' order represents '0' with '7690'
c Var 'aux1876' direct represents '0' with '7690'
c Var 'aux1876' order represents '1' with '7691'
-7690 7691 0
c Var 'aux1876' direct represents '1' with '7692'
7690 -7691 7692 0
-7692 7691 0
-7692 -7690 0
c Var 'aux1876' direct represents '2' with '-7691'
7690 7692 -7691 0
c Encoding variable: aux1877 with domain: int(0..2) (representing constraint ((x_00007_00008=6) + (x_00008_00008=6)))
c Both direct and order encoding.
c Var 'aux1877' order represents '0' with '7693'
c Var 'aux1877' direct represents '0' with '7693'
c Var 'aux1877' order represents '1' with '7694'
-7693 7694 0
c Var 'aux1877' direct represents '1' with '7695'
7693 -7694 7695 0
-7695 7694 0
-7695 -7693 0
c Var 'aux1877' direct represents '2' with '-7694'
7693 7695 -7694 0
c Encoding variable: aux1878 with domain: int(0..2) (representing constraint ((x_00007_00007=6) + (x_00009_00007=6)))
c Both direct and order encoding.
c Var 'aux1878' order represents '0' with '7696'
c Var 'aux1878' direct represents '0' with '7696'
c Var 'aux1878' order represents '1' with '7697'
-7696 7697 0
c Var 'aux1878' direct represents '1' with '7698'
7696 -7697 7698 0
-7698 7697 0
-7698 -7696 0
c Var 'aux1878' direct represents '2' with '-7697'
7696 7698 -7697 0
c Encoding variable: aux1879 with domain: int(0..2) (representing constraint ((x_00009_00009=6) + (x_00009_00008=6)))
c Both direct and order encoding.
c Var 'aux1879' order represents '0' with '7699'
c Var 'aux1879' direct represents '0' with '7699'
c Var 'aux1879' order represents '1' with '7700'
-7699 7700 0
c Var 'aux1879' direct represents '1' with '7701'
7699 -7700 7701 0
-7701 7700 0
-7701 -7699 0
c Var 'aux1879' direct represents '2' with '-7700'
7699 7701 -7700 0
c Encoding variable: aux1880 with domain: int(0..3) (representing constraint ((x_00008_00009=6) + aux1879))
c Both direct and order encoding.
c Var 'aux1880' order represents '0' with '7702'
c Var 'aux1880' direct represents '0' with '7702'
c Var 'aux1880' order represents '1' with '7703'
-7702 7703 0
c Var 'aux1880' direct represents '1' with '7704'
7702 -7703 7704 0
-7704 7703 0
-7704 -7702 0
c Var 'aux1880' order represents '2' with '7705'
-7703 7705 0
c Var 'aux1880' direct represents '2' with '7706'
7703 -7705 7706 0
-7706 7705 0
-7706 -7703 0
c Var 'aux1880' direct represents '3' with '-7705'
7702 7704 7706 -7705 0
c Encoding variable: aux1881 with domain: int(0..4) (representing constraint (aux1876 + aux1878))
c Both direct and order encoding.
c Var 'aux1881' order represents '0' with '7707'
c Var 'aux1881' direct represents '0' with '7707'
c Var 'aux1881' order represents '1' with '7708'
-7707 7708 0
c Var 'aux1881' direct represents '1' with '7709'
7707 -7708 7709 0
-7709 7708 0
-7709 -7707 0
c Var 'aux1881' order represents '2' with '7710'
-7708 7710 0
c Var 'aux1881' direct represents '2' with '7711'
7708 -7710 7711 0
-7711 7710 0
-7711 -7708 0
c Var 'aux1881' order represents '3' with '7712'
-7710 7712 0
c Var 'aux1881' direct represents '3' with '7713'
7710 -7712 7713 0
-7713 7712 0
-7713 -7710 0
c Var 'aux1881' direct represents '4' with '-7712'
7707 7709 7711 7713 -7712 0
c Encoding variable: aux1882 with domain: int(0..2) (representing constraint ((x_00008_00007=7) + (x_00007_00009=7)))
c Both direct and order encoding.
c Var 'aux1882' order represents '0' with '7714'
c Var 'aux1882' direct represents '0' with '7714'
c Var 'aux1882' order represents '1' with '7715'
-7714 7715 0
c Var 'aux1882' direct represents '1' with '7716'
7714 -7715 7716 0
-7716 7715 0
-7716 -7714 0
c Var 'aux1882' direct represents '2' with '-7715'
7714 7716 -7715 0
c Encoding variable: aux1883 with domain: int(0..2) (representing constraint ((x_00007_00008=7) + (x_00008_00008=7)))
c Both direct and order encoding.
c Var 'aux1883' order represents '0' with '7717'
c Var 'aux1883' direct represents '0' with '7717'
c Var 'aux1883' order represents '1' with '7718'
-7717 7718 0
c Var 'aux1883' direct represents '1' with '7719'
7717 -7718 7719 0
-7719 7718 0
-7719 -7717 0
c Var 'aux1883' direct represents '2' with '-7718'
7717 7719 -7718 0
c Encoding variable: aux1884 with domain: int(0..2) (representing constraint ((x_00007_00007=7) + (x_00009_00007=7)))
c Both direct and order encoding.
c Var 'aux1884' order represents '0' with '7720'
c Var 'aux1884' direct represents '0' with '7720'
c Var 'aux1884' order represents '1' with '7721'
-7720 7721 0
c Var 'aux1884' direct represents '1' with '7722'
7720 -7721 7722 0
-7722 7721 0
-7722 -7720 0
c Var 'aux1884' direct represents '2' with '-7721'
7720 7722 -7721 0
c Encoding variable: aux1885 with domain: int(0..2) (representing constraint ((x_00009_00009=7) + (x_00009_00008=7)))
c Both direct and order encoding.
c Var 'aux1885' order represents '0' with '7723'
c Var 'aux1885' direct represents '0' with '7723'
c Var 'aux1885' order represents '1' with '7724'
-7723 7724 0
c Var 'aux1885' direct represents '1' with '7725'
7723 -7724 7725 0
-7725 7724 0
-7725 -7723 0
c Var 'aux1885' direct represents '2' with '-7724'
7723 7725 -7724 0
c Encoding variable: aux1886 with domain: int(0..3) (representing constraint ((x_00008_00009=7) + aux1885))
c Both direct and order encoding.
c Var 'aux1886' order represents '0' with '7726'
c Var 'aux1886' direct represents '0' with '7726'
c Var 'aux1886' order represents '1' with '7727'
-7726 7727 0
c Var 'aux1886' direct represents '1' with '7728'
7726 -7727 7728 0
-7728 7727 0
-7728 -7726 0
c Var 'aux1886' order represents '2' with '7729'
-7727 7729 0
c Var 'aux1886' direct represents '2' with '7730'
7727 -7729 7730 0
-7730 7729 0
-7730 -7727 0
c Var 'aux1886' direct represents '3' with '-7729'
7726 7728 7730 -7729 0
c Encoding variable: aux1887 with domain: int(0..4) (representing constraint (aux1882 + aux1884))
c Both direct and order encoding.
c Var 'aux1887' order represents '0' with '7731'
c Var 'aux1887' direct represents '0' with '7731'
c Var 'aux1887' order represents '1' with '7732'
-7731 7732 0
c Var 'aux1887' direct represents '1' with '7733'
7731 -7732 7733 0
-7733 7732 0
-7733 -7731 0
c Var 'aux1887' order represents '2' with '7734'
-7732 7734 0
c Var 'aux1887' direct represents '2' with '7735'
7732 -7734 7735 0
-7735 7734 0
-7735 -7732 0
c Var 'aux1887' order represents '3' with '7736'
-7734 7736 0
c Var 'aux1887' direct represents '3' with '7737'
7734 -7736 7737 0
-7737 7736 0
-7737 -7734 0
c Var 'aux1887' direct represents '4' with '-7736'
7731 7733 7735 7737 -7736 0
c Encoding variable: aux1888 with domain: int(0..2) (representing constraint ((x_00008_00007=8) + (x_00007_00009=8)))
c Both direct and order encoding.
c Var 'aux1888' order represents '0' with '7738'
c Var 'aux1888' direct represents '0' with '7738'
c Var 'aux1888' order represents '1' with '7739'
-7738 7739 0
c Var 'aux1888' direct represents '1' with '7740'
7738 -7739 7740 0
-7740 7739 0
-7740 -7738 0
c Var 'aux1888' direct represents '2' with '-7739'
7738 7740 -7739 0
c Encoding variable: aux1889 with domain: int(0..2) (representing constraint ((x_00007_00008=8) + (x_00008_00008=8)))
c Both direct and order encoding.
c Var 'aux1889' order represents '0' with '7741'
c Var 'aux1889' direct represents '0' with '7741'
c Var 'aux1889' order represents '1' with '7742'
-7741 7742 0
c Var 'aux1889' direct represents '1' with '7743'
7741 -7742 7743 0
-7743 7742 0
-7743 -7741 0
c Var 'aux1889' direct represents '2' with '-7742'
7741 7743 -7742 0
c Encoding variable: aux1890 with domain: int(0..2) (representing constraint ((x_00007_00007=8) + (x_00009_00007=8)))
c Both direct and order encoding.
c Var 'aux1890' order represents '0' with '7744'
c Var 'aux1890' direct represents '0' with '7744'
c Var 'aux1890' order represents '1' with '7745'
-7744 7745 0
c Var 'aux1890' direct represents '1' with '7746'
7744 -7745 7746 0
-7746 7745 0
-7746 -7744 0
c Var 'aux1890' direct represents '2' with '-7745'
7744 7746 -7745 0
c Encoding variable: aux1891 with domain: int(0..2) (representing constraint ((x_00009_00009=8) + (x_00009_00008=8)))
c Both direct and order encoding.
c Var 'aux1891' order represents '0' with '7747'
c Var 'aux1891' direct represents '0' with '7747'
c Var 'aux1891' order represents '1' with '7748'
-7747 7748 0
c Var 'aux1891' direct represents '1' with '7749'
7747 -7748 7749 0
-7749 7748 0
-7749 -7747 0
c Var 'aux1891' direct represents '2' with '-7748'
7747 7749 -7748 0
c Encoding variable: aux1892 with domain: int(0..3) (representing constraint ((x_00008_00009=8) + aux1891))
c Both direct and order encoding.
c Var 'aux1892' order represents '0' with '7750'
c Var 'aux1892' direct represents '0' with '7750'
c Var 'aux1892' order represents '1' with '7751'
-7750 7751 0
c Var 'aux1892' direct represents '1' with '7752'
7750 -7751 7752 0
-7752 7751 0
-7752 -7750 0
c Var 'aux1892' order represents '2' with '7753'
-7751 7753 0
c Var 'aux1892' direct represents '2' with '7754'
7751 -7753 7754 0
-7754 7753 0
-7754 -7751 0
c Var 'aux1892' direct represents '3' with '-7753'
7750 7752 7754 -7753 0
c Encoding variable: aux1893 with domain: int(0..4) (representing constraint (aux1888 + aux1890))
c Both direct and order encoding.
c Var 'aux1893' order represents '0' with '7755'
c Var 'aux1893' direct represents '0' with '7755'
c Var 'aux1893' order represents '1' with '7756'
-7755 7756 0
c Var 'aux1893' direct represents '1' with '7757'
7755 -7756 7757 0
-7757 7756 0
-7757 -7755 0
c Var 'aux1893' order represents '2' with '7758'
-7756 7758 0
c Var 'aux1893' direct represents '2' with '7759'
7756 -7758 7759 0
-7759 7758 0
-7759 -7756 0
c Var 'aux1893' order represents '3' with '7760'
-7758 7760 0
c Var 'aux1893' direct represents '3' with '7761'
7758 -7760 7761 0
-7761 7760 0
-7761 -7758 0
c Var 'aux1893' direct represents '4' with '-7760'
7755 7757 7759 7761 -7760 0
c Encoding variable: aux1894 with domain: int(0..2) (representing constraint ((x_00008_00007=9) + (x_00007_00009=9)))
c Both direct and order encoding.
c Var 'aux1894' order represents '0' with '7762'
c Var 'aux1894' direct represents '0' with '7762'
c Var 'aux1894' order represents '1' with '7763'
-7762 7763 0
c Var 'aux1894' direct represents '1' with '7764'
7762 -7763 7764 0
-7764 7763 0
-7764 -7762 0
c Var 'aux1894' direct represents '2' with '-7763'
7762 7764 -7763 0
c Encoding variable: aux1895 with domain: int(0..2) (representing constraint ((x_00007_00008=9) + (x_00008_00008=9)))
c Both direct and order encoding.
c Var 'aux1895' order represents '0' with '7765'
c Var 'aux1895' direct represents '0' with '7765'
c Var 'aux1895' order represents '1' with '7766'
-7765 7766 0
c Var 'aux1895' direct represents '1' with '7767'
7765 -7766 7767 0
-7767 7766 0
-7767 -7765 0
c Var 'aux1895' direct represents '2' with '-7766'
7765 7767 -7766 0
c Encoding variable: aux1896 with domain: int(0..2) (representing constraint ((x_00007_00007=9) + (x_00009_00007=9)))
c Both direct and order encoding.
c Var 'aux1896' order represents '0' with '7768'
c Var 'aux1896' direct represents '0' with '7768'
c Var 'aux1896' order represents '1' with '7769'
-7768 7769 0
c Var 'aux1896' direct represents '1' with '7770'
7768 -7769 7770 0
-7770 7769 0
-7770 -7768 0
c Var 'aux1896' direct represents '2' with '-7769'
7768 7770 -7769 0
c Encoding variable: aux1897 with domain: int(0..2) (representing constraint ((x_00009_00009=9) + (x_00009_00008=9)))
c Both direct and order encoding.
c Var 'aux1897' order represents '0' with '7771'
c Var 'aux1897' direct represents '0' with '7771'
c Var 'aux1897' order represents '1' with '7772'
-7771 7772 0
c Var 'aux1897' direct represents '1' with '7773'
7771 -7772 7773 0
-7773 7772 0
-7773 -7771 0
c Var 'aux1897' direct represents '2' with '-7772'
7771 7773 -7772 0
c Encoding variable: aux1898 with domain: int(0..3) (representing constraint ((x_00008_00009=9) + aux1897))
c Both direct and order encoding.
c Var 'aux1898' order represents '0' with '7774'
c Var 'aux1898' direct represents '0' with '7774'
c Var 'aux1898' order represents '1' with '7775'
-7774 7775 0
c Var 'aux1898' direct represents '1' with '7776'
7774 -7775 7776 0
-7776 7775 0
-7776 -7774 0
c Var 'aux1898' order represents '2' with '7777'
-7775 7777 0
c Var 'aux1898' direct represents '2' with '7778'
7775 -7777 7778 0
-7778 7777 0
-7778 -7775 0
c Var 'aux1898' direct represents '3' with '-7777'
7774 7776 7778 -7777 0
c Encoding variable: aux1899 with domain: int(0..4) (representing constraint (aux1894 + aux1896))
c Both direct and order encoding.
c Var 'aux1899' order represents '0' with '7779'
c Var 'aux1899' direct represents '0' with '7779'
c Var 'aux1899' order represents '1' with '7780'
-7779 7780 0
c Var 'aux1899' direct represents '1' with '7781'
7779 -7780 7781 0
-7781 7780 0
-7781 -7779 0
c Var 'aux1899' order represents '2' with '7782'
-7780 7782 0
c Var 'aux1899' direct represents '2' with '7783'
7780 -7782 7783 0
-7783 7782 0
-7783 -7780 0
c Var 'aux1899' order represents '3' with '7784'
-7782 7784 0
c Var 'aux1899' direct represents '3' with '7785'
7782 -7784 7785 0
-7785 7784 0
-7785 -7782 0
c Var 'aux1899' direct represents '4' with '-7784'
7779 7781 7783 7785 -7784 0
c Encoding variable: aux1900 with domain: int(0..2) (representing constraint ((x_00001_00001=1) + (x_00002_00003=1)))
c Both direct and order encoding.
c Var 'aux1900' order represents '0' with '7786'
c Var 'aux1900' direct represents '0' with '7786'
c Var 'aux1900' order represents '1' with '7787'
-7786 7787 0
c Var 'aux1900' direct represents '1' with '7788'
7786 -7787 7788 0
-7788 7787 0
-7788 -7786 0
c Var 'aux1900' direct represents '2' with '-7787'
7786 7788 -7787 0
c Encoding variable: aux1901 with domain: int(0..2) (representing constraint ((x_00002_00002=1) + (x_00001_00002=1)))
c Both direct and order encoding.
c Var 'aux1901' order represents '0' with '7789'
c Var 'aux1901' direct represents '0' with '7789'
c Var 'aux1901' order represents '1' with '7790'
-7789 7790 0
c Var 'aux1901' direct represents '1' with '7791'
7789 -7790 7791 0
-7791 7790 0
-7791 -7789 0
c Var 'aux1901' direct represents '2' with '-7790'
7789 7791 -7790 0
c Encoding variable: aux1902 with domain: int(0..2) (representing constraint ((x_00001_00001=2) + (x_00002_00003=2)))
c Both direct and order encoding.
c Var 'aux1902' order represents '0' with '7792'
c Var 'aux1902' direct represents '0' with '7792'
c Var 'aux1902' order represents '1' with '7793'
-7792 7793 0
c Var 'aux1902' direct represents '1' with '7794'
7792 -7793 7794 0
-7794 7793 0
-7794 -7792 0
c Var 'aux1902' direct represents '2' with '-7793'
7792 7794 -7793 0
c Encoding variable: aux1903 with domain: int(0..2) (representing constraint ((x_00002_00002=2) + (x_00001_00002=2)))
c Both direct and order encoding.
c Var 'aux1903' order represents '0' with '7795'
c Var 'aux1903' direct represents '0' with '7795'
c Var 'aux1903' order represents '1' with '7796'
-7795 7796 0
c Var 'aux1903' direct represents '1' with '7797'
7795 -7796 7797 0
-7797 7796 0
-7797 -7795 0
c Var 'aux1903' direct represents '2' with '-7796'
7795 7797 -7796 0
c Encoding variable: aux1904 with domain: int(0..2) (representing constraint ((x_00001_00001=3) + (x_00002_00003=3)))
c Both direct and order encoding.
c Var 'aux1904' order represents '0' with '7798'
c Var 'aux1904' direct represents '0' with '7798'
c Var 'aux1904' order represents '1' with '7799'
-7798 7799 0
c Var 'aux1904' direct represents '1' with '7800'
7798 -7799 7800 0
-7800 7799 0
-7800 -7798 0
c Var 'aux1904' direct represents '2' with '-7799'
7798 7800 -7799 0
c Encoding variable: aux1905 with domain: int(0..2) (representing constraint ((x_00002_00002=3) + (x_00001_00002=3)))
c Both direct and order encoding.
c Var 'aux1905' order represents '0' with '7801'
c Var 'aux1905' direct represents '0' with '7801'
c Var 'aux1905' order represents '1' with '7802'
-7801 7802 0
c Var 'aux1905' direct represents '1' with '7803'
7801 -7802 7803 0
-7803 7802 0
-7803 -7801 0
c Var 'aux1905' direct represents '2' with '-7802'
7801 7803 -7802 0
c Encoding variable: aux1906 with domain: int(0..2) (representing constraint ((x_00001_00001=4) + (x_00002_00003=4)))
c Both direct and order encoding.
c Var 'aux1906' order represents '0' with '7804'
c Var 'aux1906' direct represents '0' with '7804'
c Var 'aux1906' order represents '1' with '7805'
-7804 7805 0
c Var 'aux1906' direct represents '1' with '7806'
7804 -7805 7806 0
-7806 7805 0
-7806 -7804 0
c Var 'aux1906' direct represents '2' with '-7805'
7804 7806 -7805 0
c Encoding variable: aux1907 with domain: int(0..2) (representing constraint ((x_00002_00002=4) + (x_00001_00002=4)))
c Both direct and order encoding.
c Var 'aux1907' order represents '0' with '7807'
c Var 'aux1907' direct represents '0' with '7807'
c Var 'aux1907' order represents '1' with '7808'
-7807 7808 0
c Var 'aux1907' direct represents '1' with '7809'
7807 -7808 7809 0
-7809 7808 0
-7809 -7807 0
c Var 'aux1907' direct represents '2' with '-7808'
7807 7809 -7808 0
c Encoding variable: aux1908 with domain: int(0..2) (representing constraint ((x_00001_00001=5) + (x_00002_00003=5)))
c Both direct and order encoding.
c Var 'aux1908' order represents '0' with '7810'
c Var 'aux1908' direct represents '0' with '7810'
c Var 'aux1908' order represents '1' with '7811'
-7810 7811 0
c Var 'aux1908' direct represents '1' with '7812'
7810 -7811 7812 0
-7812 7811 0
-7812 -7810 0
c Var 'aux1908' direct represents '2' with '-7811'
7810 7812 -7811 0
c Encoding variable: aux1909 with domain: int(0..2) (representing constraint ((x_00002_00002=5) + (x_00001_00002=5)))
c Both direct and order encoding.
c Var 'aux1909' order represents '0' with '7813'
c Var 'aux1909' direct represents '0' with '7813'
c Var 'aux1909' order represents '1' with '7814'
-7813 7814 0
c Var 'aux1909' direct represents '1' with '7815'
7813 -7814 7815 0
-7815 7814 0
-7815 -7813 0
c Var 'aux1909' direct represents '2' with '-7814'
7813 7815 -7814 0
c Encoding variable: aux1910 with domain: int(0..2) (representing constraint ((x_00001_00001=6) + (x_00002_00003=6)))
c Both direct and order encoding.
c Var 'aux1910' order represents '0' with '7816'
c Var 'aux1910' direct represents '0' with '7816'
c Var 'aux1910' order represents '1' with '7817'
-7816 7817 0
c Var 'aux1910' direct represents '1' with '7818'
7816 -7817 7818 0
-7818 7817 0
-7818 -7816 0
c Var 'aux1910' direct represents '2' with '-7817'
7816 7818 -7817 0
c Encoding variable: aux1911 with domain: int(0..2) (representing constraint ((x_00002_00002=6) + (x_00001_00002=6)))
c Both direct and order encoding.
c Var 'aux1911' order represents '0' with '7819'
c Var 'aux1911' direct represents '0' with '7819'
c Var 'aux1911' order represents '1' with '7820'
-7819 7820 0
c Var 'aux1911' direct represents '1' with '7821'
7819 -7820 7821 0
-7821 7820 0
-7821 -7819 0
c Var 'aux1911' direct represents '2' with '-7820'
7819 7821 -7820 0
c Encoding variable: aux1912 with domain: int(0..2) (representing constraint ((x_00001_00001=7) + (x_00002_00003=7)))
c Both direct and order encoding.
c Var 'aux1912' order represents '0' with '7822'
c Var 'aux1912' direct represents '0' with '7822'
c Var 'aux1912' order represents '1' with '7823'
-7822 7823 0
c Var 'aux1912' direct represents '1' with '7824'
7822 -7823 7824 0
-7824 7823 0
-7824 -7822 0
c Var 'aux1912' direct represents '2' with '-7823'
7822 7824 -7823 0
c Encoding variable: aux1913 with domain: int(0..2) (representing constraint ((x_00002_00002=7) + (x_00001_00002=7)))
c Both direct and order encoding.
c Var 'aux1913' order represents '0' with '7825'
c Var 'aux1913' direct represents '0' with '7825'
c Var 'aux1913' order represents '1' with '7826'
-7825 7826 0
c Var 'aux1913' direct represents '1' with '7827'
7825 -7826 7827 0
-7827 7826 0
-7827 -7825 0
c Var 'aux1913' direct represents '2' with '-7826'
7825 7827 -7826 0
c Encoding variable: aux1914 with domain: int(0..2) (representing constraint ((x_00001_00001=8) + (x_00002_00003=8)))
c Both direct and order encoding.
c Var 'aux1914' order represents '0' with '7828'
c Var 'aux1914' direct represents '0' with '7828'
c Var 'aux1914' order represents '1' with '7829'
-7828 7829 0
c Var 'aux1914' direct represents '1' with '7830'
7828 -7829 7830 0
-7830 7829 0
-7830 -7828 0
c Var 'aux1914' direct represents '2' with '-7829'
7828 7830 -7829 0
c Encoding variable: aux1915 with domain: int(0..2) (representing constraint ((x_00002_00002=8) + (x_00001_00002=8)))
c Both direct and order encoding.
c Var 'aux1915' order represents '0' with '7831'
c Var 'aux1915' direct represents '0' with '7831'
c Var 'aux1915' order represents '1' with '7832'
-7831 7832 0
c Var 'aux1915' direct represents '1' with '7833'
7831 -7832 7833 0
-7833 7832 0
-7833 -7831 0
c Var 'aux1915' direct represents '2' with '-7832'
7831 7833 -7832 0
c Encoding variable: aux1916 with domain: int(0..2) (representing constraint ((x_00001_00001=9) + (x_00002_00003=9)))
c Both direct and order encoding.
c Var 'aux1916' order represents '0' with '7834'
c Var 'aux1916' direct represents '0' with '7834'
c Var 'aux1916' order represents '1' with '7835'
-7834 7835 0
c Var 'aux1916' direct represents '1' with '7836'
7834 -7835 7836 0
-7836 7835 0
-7836 -7834 0
c Var 'aux1916' direct represents '2' with '-7835'
7834 7836 -7835 0
c Encoding variable: aux1917 with domain: int(0..2) (representing constraint ((x_00002_00002=9) + (x_00001_00002=9)))
c Both direct and order encoding.
c Var 'aux1917' order represents '0' with '7837'
c Var 'aux1917' direct represents '0' with '7837'
c Var 'aux1917' order represents '1' with '7838'
-7837 7838 0
c Var 'aux1917' direct represents '1' with '7839'
7837 -7838 7839 0
-7839 7838 0
-7839 -7837 0
c Var 'aux1917' direct represents '2' with '-7838'
7837 7839 -7838 0
c Encoding variable: aux1918 with domain: int(0..2) (representing constraint ((x_00001_00003=1) + (x_00002_00004=1)))
c Both direct and order encoding.
c Var 'aux1918' order represents '0' with '7840'
c Var 'aux1918' direct represents '0' with '7840'
c Var 'aux1918' order represents '1' with '7841'
-7840 7841 0
c Var 'aux1918' direct represents '1' with '7842'
7840 -7841 7842 0
-7842 7841 0
-7842 -7840 0
c Var 'aux1918' direct represents '2' with '-7841'
7840 7842 -7841 0
c Encoding variable: aux1919 with domain: int(0..2) (representing constraint ((x_00001_00003=2) + (x_00002_00004=2)))
c Both direct and order encoding.
c Var 'aux1919' order represents '0' with '7843'
c Var 'aux1919' direct represents '0' with '7843'
c Var 'aux1919' order represents '1' with '7844'
-7843 7844 0
c Var 'aux1919' direct represents '1' with '7845'
7843 -7844 7845 0
-7845 7844 0
-7845 -7843 0
c Var 'aux1919' direct represents '2' with '-7844'
7843 7845 -7844 0
c Encoding variable: aux1920 with domain: int(0..2) (representing constraint ((x_00001_00003=3) + (x_00002_00004=3)))
c Both direct and order encoding.
c Var 'aux1920' order represents '0' with '7846'
c Var 'aux1920' direct represents '0' with '7846'
c Var 'aux1920' order represents '1' with '7847'
-7846 7847 0
c Var 'aux1920' direct represents '1' with '7848'
7846 -7847 7848 0
-7848 7847 0
-7848 -7846 0
c Var 'aux1920' direct represents '2' with '-7847'
7846 7848 -7847 0
c Encoding variable: aux1921 with domain: int(0..2) (representing constraint ((x_00001_00003=4) + (x_00002_00004=4)))
c Both direct and order encoding.
c Var 'aux1921' order represents '0' with '7849'
c Var 'aux1921' direct represents '0' with '7849'
c Var 'aux1921' order represents '1' with '7850'
-7849 7850 0
c Var 'aux1921' direct represents '1' with '7851'
7849 -7850 7851 0
-7851 7850 0
-7851 -7849 0
c Var 'aux1921' direct represents '2' with '-7850'
7849 7851 -7850 0
c Encoding variable: aux1922 with domain: int(0..2) (representing constraint ((x_00001_00003=5) + (x_00002_00004=5)))
c Both direct and order encoding.
c Var 'aux1922' order represents '0' with '7852'
c Var 'aux1922' direct represents '0' with '7852'
c Var 'aux1922' order represents '1' with '7853'
-7852 7853 0
c Var 'aux1922' direct represents '1' with '7854'
7852 -7853 7854 0
-7854 7853 0
-7854 -7852 0
c Var 'aux1922' direct represents '2' with '-7853'
7852 7854 -7853 0
c Encoding variable: aux1923 with domain: int(0..2) (representing constraint ((x_00001_00003=6) + (x_00002_00004=6)))
c Both direct and order encoding.
c Var 'aux1923' order represents '0' with '7855'
c Var 'aux1923' direct represents '0' with '7855'
c Var 'aux1923' order represents '1' with '7856'
-7855 7856 0
c Var 'aux1923' direct represents '1' with '7857'
7855 -7856 7857 0
-7857 7856 0
-7857 -7855 0
c Var 'aux1923' direct represents '2' with '-7856'
7855 7857 -7856 0
c Encoding variable: aux1924 with domain: int(0..2) (representing constraint ((x_00001_00003=7) + (x_00002_00004=7)))
c Both direct and order encoding.
c Var 'aux1924' order represents '0' with '7858'
c Var 'aux1924' direct represents '0' with '7858'
c Var 'aux1924' order represents '1' with '7859'
-7858 7859 0
c Var 'aux1924' direct represents '1' with '7860'
7858 -7859 7860 0
-7860 7859 0
-7860 -7858 0
c Var 'aux1924' direct represents '2' with '-7859'
7858 7860 -7859 0
c Encoding variable: aux1925 with domain: int(0..2) (representing constraint ((x_00001_00003=8) + (x_00002_00004=8)))
c Both direct and order encoding.
c Var 'aux1925' order represents '0' with '7861'
c Var 'aux1925' direct represents '0' with '7861'
c Var 'aux1925' order represents '1' with '7862'
-7861 7862 0
c Var 'aux1925' direct represents '1' with '7863'
7861 -7862 7863 0
-7863 7862 0
-7863 -7861 0
c Var 'aux1925' direct represents '2' with '-7862'
7861 7863 -7862 0
c Encoding variable: aux1926 with domain: int(0..2) (representing constraint ((x_00001_00003=9) + (x_00002_00004=9)))
c Both direct and order encoding.
c Var 'aux1926' order represents '0' with '7864'
c Var 'aux1926' direct represents '0' with '7864'
c Var 'aux1926' order represents '1' with '7865'
-7864 7865 0
c Var 'aux1926' direct represents '1' with '7866'
7864 -7865 7866 0
-7866 7865 0
-7866 -7864 0
c Var 'aux1926' direct represents '2' with '-7865'
7864 7866 -7865 0
c Encoding variable: aux1927 with domain: int(0..2) (representing constraint ((x_00003_00004=1) + (x_00002_00005=1)))
c Both direct and order encoding.
c Var 'aux1927' order represents '0' with '7867'
c Var 'aux1927' direct represents '0' with '7867'
c Var 'aux1927' order represents '1' with '7868'
-7867 7868 0
c Var 'aux1927' direct represents '1' with '7869'
7867 -7868 7869 0
-7869 7868 0
-7869 -7867 0
c Var 'aux1927' direct represents '2' with '-7868'
7867 7869 -7868 0
c Encoding variable: aux1928 with domain: int(0..2) (representing constraint ((x_00003_00004=2) + (x_00002_00005=2)))
c Both direct and order encoding.
c Var 'aux1928' order represents '0' with '7870'
c Var 'aux1928' direct represents '0' with '7870'
c Var 'aux1928' order represents '1' with '7871'
-7870 7871 0
c Var 'aux1928' direct represents '1' with '7872'
7870 -7871 7872 0
-7872 7871 0
-7872 -7870 0
c Var 'aux1928' direct represents '2' with '-7871'
7870 7872 -7871 0
c Encoding variable: aux1929 with domain: int(0..2) (representing constraint ((x_00003_00004=3) + (x_00002_00005=3)))
c Both direct and order encoding.
c Var 'aux1929' order represents '0' with '7873'
c Var 'aux1929' direct represents '0' with '7873'
c Var 'aux1929' order represents '1' with '7874'
-7873 7874 0
c Var 'aux1929' direct represents '1' with '7875'
7873 -7874 7875 0
-7875 7874 0
-7875 -7873 0
c Var 'aux1929' direct represents '2' with '-7874'
7873 7875 -7874 0
c Encoding variable: aux1930 with domain: int(0..2) (representing constraint ((x_00003_00004=4) + (x_00002_00005=4)))
c Both direct and order encoding.
c Var 'aux1930' order represents '0' with '7876'
c Var 'aux1930' direct represents '0' with '7876'
c Var 'aux1930' order represents '1' with '7877'
-7876 7877 0
c Var 'aux1930' direct represents '1' with '7878'
7876 -7877 7878 0
-7878 7877 0
-7878 -7876 0
c Var 'aux1930' direct represents '2' with '-7877'
7876 7878 -7877 0
c Encoding variable: aux1931 with domain: int(0..2) (representing constraint ((x_00003_00004=5) + (x_00002_00005=5)))
c Both direct and order encoding.
c Var 'aux1931' order represents '0' with '7879'
c Var 'aux1931' direct represents '0' with '7879'
c Var 'aux1931' order represents '1' with '7880'
-7879 7880 0
c Var 'aux1931' direct represents '1' with '7881'
7879 -7880 7881 0
-7881 7880 0
-7881 -7879 0
c Var 'aux1931' direct represents '2' with '-7880'
7879 7881 -7880 0
c Encoding variable: aux1932 with domain: int(0..2) (representing constraint ((x_00003_00004=6) + (x_00002_00005=6)))
c Both direct and order encoding.
c Var 'aux1932' order represents '0' with '7882'
c Var 'aux1932' direct represents '0' with '7882'
c Var 'aux1932' order represents '1' with '7883'
-7882 7883 0
c Var 'aux1932' direct represents '1' with '7884'
7882 -7883 7884 0
-7884 7883 0
-7884 -7882 0
c Var 'aux1932' direct represents '2' with '-7883'
7882 7884 -7883 0
c Encoding variable: aux1933 with domain: int(0..2) (representing constraint ((x_00003_00004=7) + (x_00002_00005=7)))
c Both direct and order encoding.
c Var 'aux1933' order represents '0' with '7885'
c Var 'aux1933' direct represents '0' with '7885'
c Var 'aux1933' order represents '1' with '7886'
-7885 7886 0
c Var 'aux1933' direct represents '1' with '7887'
7885 -7886 7887 0
-7887 7886 0
-7887 -7885 0
c Var 'aux1933' direct represents '2' with '-7886'
7885 7887 -7886 0
c Encoding variable: aux1934 with domain: int(0..2) (representing constraint ((x_00003_00004=8) + (x_00002_00005=8)))
c Both direct and order encoding.
c Var 'aux1934' order represents '0' with '7888'
c Var 'aux1934' direct represents '0' with '7888'
c Var 'aux1934' order represents '1' with '7889'
-7888 7889 0
c Var 'aux1934' direct represents '1' with '7890'
7888 -7889 7890 0
-7890 7889 0
-7890 -7888 0
c Var 'aux1934' direct represents '2' with '-7889'
7888 7890 -7889 0
c Encoding variable: aux1935 with domain: int(0..2) (representing constraint ((x_00003_00004=9) + (x_00002_00005=9)))
c Both direct and order encoding.
c Var 'aux1935' order represents '0' with '7891'
c Var 'aux1935' direct represents '0' with '7891'
c Var 'aux1935' order represents '1' with '7892'
-7891 7892 0
c Var 'aux1935' direct represents '1' with '7893'
7891 -7892 7893 0
-7893 7892 0
-7893 -7891 0
c Var 'aux1935' direct represents '2' with '-7892'
7891 7893 -7892 0
c Encoding variable: aux1936 with domain: int(0..2) (representing constraint ((x_00003_00006=1) + (x_00005_00006=1)))
c Both direct and order encoding.
c Var 'aux1936' order represents '0' with '7894'
c Var 'aux1936' direct represents '0' with '7894'
c Var 'aux1936' order represents '1' with '7895'
-7894 7895 0
c Var 'aux1936' direct represents '1' with '7896'
7894 -7895 7896 0
-7896 7895 0
-7896 -7894 0
c Var 'aux1936' direct represents '2' with '-7895'
7894 7896 -7895 0
c Encoding variable: aux1937 with domain: int(0..2) (representing constraint ((x_00003_00006=2) + (x_00005_00006=2)))
c Both direct and order encoding.
c Var 'aux1937' order represents '0' with '7897'
c Var 'aux1937' direct represents '0' with '7897'
c Var 'aux1937' order represents '1' with '7898'
-7897 7898 0
c Var 'aux1937' direct represents '1' with '7899'
7897 -7898 7899 0
-7899 7898 0
-7899 -7897 0
c Var 'aux1937' direct represents '2' with '-7898'
7897 7899 -7898 0
c Encoding variable: aux1938 with domain: int(0..2) (representing constraint ((x_00003_00006=3) + (x_00005_00006=3)))
c Both direct and order encoding.
c Var 'aux1938' order represents '0' with '7900'
c Var 'aux1938' direct represents '0' with '7900'
c Var 'aux1938' order represents '1' with '7901'
-7900 7901 0
c Var 'aux1938' direct represents '1' with '7902'
7900 -7901 7902 0
-7902 7901 0
-7902 -7900 0
c Var 'aux1938' direct represents '2' with '-7901'
7900 7902 -7901 0
c Encoding variable: aux1939 with domain: int(0..2) (representing constraint ((x_00003_00006=4) + (x_00005_00006=4)))
c Both direct and order encoding.
c Var 'aux1939' order represents '0' with '7903'
c Var 'aux1939' direct represents '0' with '7903'
c Var 'aux1939' order represents '1' with '7904'
-7903 7904 0
c Var 'aux1939' direct represents '1' with '7905'
7903 -7904 7905 0
-7905 7904 0
-7905 -7903 0
c Var 'aux1939' direct represents '2' with '-7904'
7903 7905 -7904 0
c Encoding variable: aux1940 with domain: int(0..2) (representing constraint ((x_00003_00006=5) + (x_00005_00006=5)))
c Both direct and order encoding.
c Var 'aux1940' order represents '0' with '7906'
c Var 'aux1940' direct represents '0' with '7906'
c Var 'aux1940' order represents '1' with '7907'
-7906 7907 0
c Var 'aux1940' direct represents '1' with '7908'
7906 -7907 7908 0
-7908 7907 0
-7908 -7906 0
c Var 'aux1940' direct represents '2' with '-7907'
7906 7908 -7907 0
c Encoding variable: aux1941 with domain: int(0..2) (representing constraint ((x_00003_00006=6) + (x_00005_00006=6)))
c Both direct and order encoding.
c Var 'aux1941' order represents '0' with '7909'
c Var 'aux1941' direct represents '0' with '7909'
c Var 'aux1941' order represents '1' with '7910'
-7909 7910 0
c Var 'aux1941' direct represents '1' with '7911'
7909 -7910 7911 0
-7911 7910 0
-7911 -7909 0
c Var 'aux1941' direct represents '2' with '-7910'
7909 7911 -7910 0
c Encoding variable: aux1942 with domain: int(0..2) (representing constraint ((x_00003_00006=7) + (x_00005_00006=7)))
c Both direct and order encoding.
c Var 'aux1942' order represents '0' with '7912'
c Var 'aux1942' direct represents '0' with '7912'
c Var 'aux1942' order represents '1' with '7913'
-7912 7913 0
c Var 'aux1942' direct represents '1' with '7914'
7912 -7913 7914 0
-7914 7913 0
-7914 -7912 0
c Var 'aux1942' direct represents '2' with '-7913'
7912 7914 -7913 0
c Encoding variable: aux1943 with domain: int(0..2) (representing constraint ((x_00003_00006=8) + (x_00005_00006=8)))
c Both direct and order encoding.
c Var 'aux1943' order represents '0' with '7915'
c Var 'aux1943' direct represents '0' with '7915'
c Var 'aux1943' order represents '1' with '7916'
-7915 7916 0
c Var 'aux1943' direct represents '1' with '7917'
7915 -7916 7917 0
-7917 7916 0
-7917 -7915 0
c Var 'aux1943' direct represents '2' with '-7916'
7915 7917 -7916 0
c Encoding variable: aux1944 with domain: int(0..2) (representing constraint ((x_00003_00006=9) + (x_00005_00006=9)))
c Both direct and order encoding.
c Var 'aux1944' order represents '0' with '7918'
c Var 'aux1944' direct represents '0' with '7918'
c Var 'aux1944' order represents '1' with '7919'
-7918 7919 0
c Var 'aux1944' direct represents '1' with '7920'
7918 -7919 7920 0
-7920 7919 0
-7920 -7918 0
c Var 'aux1944' direct represents '2' with '-7919'
7918 7920 -7919 0
c Encoding variable: aux1945 with domain: int(0..2) (representing constraint ((x_00006_00004=1) + (x_00005_00004=1)))
c Both direct and order encoding.
c Var 'aux1945' order represents '0' with '7921'
c Var 'aux1945' direct represents '0' with '7921'
c Var 'aux1945' order represents '1' with '7922'
-7921 7922 0
c Var 'aux1945' direct represents '1' with '7923'
7921 -7922 7923 0
-7923 7922 0
-7923 -7921 0
c Var 'aux1945' direct represents '2' with '-7922'
7921 7923 -7922 0
c Encoding variable: aux1946 with domain: int(0..2) (representing constraint ((x_00006_00004=2) + (x_00005_00004=2)))
c Both direct and order encoding.
c Var 'aux1946' order represents '0' with '7924'
c Var 'aux1946' direct represents '0' with '7924'
c Var 'aux1946' order represents '1' with '7925'
-7924 7925 0
c Var 'aux1946' direct represents '1' with '7926'
7924 -7925 7926 0
-7926 7925 0
-7926 -7924 0
c Var 'aux1946' direct represents '2' with '-7925'
7924 7926 -7925 0
c Encoding variable: aux1947 with domain: int(0..2) (representing constraint ((x_00006_00004=3) + (x_00005_00004=3)))
c Both direct and order encoding.
c Var 'aux1947' order represents '0' with '7927'
c Var 'aux1947' direct represents '0' with '7927'
c Var 'aux1947' order represents '1' with '7928'
-7927 7928 0
c Var 'aux1947' direct represents '1' with '7929'
7927 -7928 7929 0
-7929 7928 0
-7929 -7927 0
c Var 'aux1947' direct represents '2' with '-7928'
7927 7929 -7928 0
c Encoding variable: aux1948 with domain: int(0..2) (representing constraint ((x_00006_00004=4) + (x_00005_00004=4)))
c Both direct and order encoding.
c Var 'aux1948' order represents '0' with '7930'
c Var 'aux1948' direct represents '0' with '7930'
c Var 'aux1948' order represents '1' with '7931'
-7930 7931 0
c Var 'aux1948' direct represents '1' with '7932'
7930 -7931 7932 0
-7932 7931 0
-7932 -7930 0
c Var 'aux1948' direct represents '2' with '-7931'
7930 7932 -7931 0
c Encoding variable: aux1949 with domain: int(0..2) (representing constraint ((x_00006_00004=5) + (x_00005_00004=5)))
c Both direct and order encoding.
c Var 'aux1949' order represents '0' with '7933'
c Var 'aux1949' direct represents '0' with '7933'
c Var 'aux1949' order represents '1' with '7934'
-7933 7934 0
c Var 'aux1949' direct represents '1' with '7935'
7933 -7934 7935 0
-7935 7934 0
-7935 -7933 0
c Var 'aux1949' direct represents '2' with '-7934'
7933 7935 -7934 0
c Encoding variable: aux1950 with domain: int(0..2) (representing constraint ((x_00006_00004=6) + (x_00005_00004=6)))
c Both direct and order encoding.
c Var 'aux1950' order represents '0' with '7936'
c Var 'aux1950' direct represents '0' with '7936'
c Var 'aux1950' order represents '1' with '7937'
-7936 7937 0
c Var 'aux1950' direct represents '1' with '7938'
7936 -7937 7938 0
-7938 7937 0
-7938 -7936 0
c Var 'aux1950' direct represents '2' with '-7937'
7936 7938 -7937 0
c Encoding variable: aux1951 with domain: int(0..2) (representing constraint ((x_00006_00004=7) + (x_00005_00004=7)))
c Both direct and order encoding.
c Var 'aux1951' order represents '0' with '7939'
c Var 'aux1951' direct represents '0' with '7939'
c Var 'aux1951' order represents '1' with '7940'
-7939 7940 0
c Var 'aux1951' direct represents '1' with '7941'
7939 -7940 7941 0
-7941 7940 0
-7941 -7939 0
c Var 'aux1951' direct represents '2' with '-7940'
7939 7941 -7940 0
c Encoding variable: aux1952 with domain: int(0..2) (representing constraint ((x_00006_00004=8) + (x_00005_00004=8)))
c Both direct and order encoding.
c Var 'aux1952' order represents '0' with '7942'
c Var 'aux1952' direct represents '0' with '7942'
c Var 'aux1952' order represents '1' with '7943'
-7942 7943 0
c Var 'aux1952' direct represents '1' with '7944'
7942 -7943 7944 0
-7944 7943 0
-7944 -7942 0
c Var 'aux1952' direct represents '2' with '-7943'
7942 7944 -7943 0
c Encoding variable: aux1953 with domain: int(0..2) (representing constraint ((x_00006_00004=9) + (x_00005_00004=9)))
c Both direct and order encoding.
c Var 'aux1953' order represents '0' with '7945'
c Var 'aux1953' direct represents '0' with '7945'
c Var 'aux1953' order represents '1' with '7946'
-7945 7946 0
c Var 'aux1953' direct represents '1' with '7947'
7945 -7946 7947 0
-7947 7946 0
-7947 -7945 0
c Var 'aux1953' direct represents '2' with '-7946'
7945 7947 -7946 0
c Encoding variable: aux1954 with domain: int(0..2) (representing constraint ((x_00008_00009=1) + (x_00007_00009=1)))
c Both direct and order encoding.
c Var 'aux1954' order represents '0' with '7948'
c Var 'aux1954' direct represents '0' with '7948'
c Var 'aux1954' order represents '1' with '7949'
-7948 7949 0
c Var 'aux1954' direct represents '1' with '7950'
7948 -7949 7950 0
-7950 7949 0
-7950 -7948 0
c Var 'aux1954' direct represents '2' with '-7949'
7948 7950 -7949 0
c Encoding variable: aux1955 with domain: int(0..2) (representing constraint ((x_00008_00009=2) + (x_00007_00009=2)))
c Both direct and order encoding.
c Var 'aux1955' order represents '0' with '7951'
c Var 'aux1955' direct represents '0' with '7951'
c Var 'aux1955' order represents '1' with '7952'
-7951 7952 0
c Var 'aux1955' direct represents '1' with '7953'
7951 -7952 7953 0
-7953 7952 0
-7953 -7951 0
c Var 'aux1955' direct represents '2' with '-7952'
7951 7953 -7952 0
c Encoding variable: aux1956 with domain: int(0..2) (representing constraint ((x_00008_00009=3) + (x_00007_00009=3)))
c Both direct and order encoding.
c Var 'aux1956' order represents '0' with '7954'
c Var 'aux1956' direct represents '0' with '7954'
c Var 'aux1956' order represents '1' with '7955'
-7954 7955 0
c Var 'aux1956' direct represents '1' with '7956'
7954 -7955 7956 0
-7956 7955 0
-7956 -7954 0
c Var 'aux1956' direct represents '2' with '-7955'
7954 7956 -7955 0
c Encoding variable: aux1957 with domain: int(0..2) (representing constraint ((x_00008_00009=4) + (x_00007_00009=4)))
c Both direct and order encoding.
c Var 'aux1957' order represents '0' with '7957'
c Var 'aux1957' direct represents '0' with '7957'
c Var 'aux1957' order represents '1' with '7958'
-7957 7958 0
c Var 'aux1957' direct represents '1' with '7959'
7957 -7958 7959 0
-7959 7958 0
-7959 -7957 0
c Var 'aux1957' direct represents '2' with '-7958'
7957 7959 -7958 0
c Encoding variable: aux1958 with domain: int(0..2) (representing constraint ((x_00008_00009=5) + (x_00007_00009=5)))
c Both direct and order encoding.
c Var 'aux1958' order represents '0' with '7960'
c Var 'aux1958' direct represents '0' with '7960'
c Var 'aux1958' order represents '1' with '7961'
-7960 7961 0
c Var 'aux1958' direct represents '1' with '7962'
7960 -7961 7962 0
-7962 7961 0
-7962 -7960 0
c Var 'aux1958' direct represents '2' with '-7961'
7960 7962 -7961 0
c Encoding variable: aux1959 with domain: int(0..2) (representing constraint ((x_00008_00009=6) + (x_00007_00009=6)))
c Both direct and order encoding.
c Var 'aux1959' order represents '0' with '7963'
c Var 'aux1959' direct represents '0' with '7963'
c Var 'aux1959' order represents '1' with '7964'
-7963 7964 0
c Var 'aux1959' direct represents '1' with '7965'
7963 -7964 7965 0
-7965 7964 0
-7965 -7963 0
c Var 'aux1959' direct represents '2' with '-7964'
7963 7965 -7964 0
c Encoding variable: aux1960 with domain: int(0..2) (representing constraint ((x_00008_00009=7) + (x_00007_00009=7)))
c Both direct and order encoding.
c Var 'aux1960' order represents '0' with '7966'
c Var 'aux1960' direct represents '0' with '7966'
c Var 'aux1960' order represents '1' with '7967'
-7966 7967 0
c Var 'aux1960' direct represents '1' with '7968'
7966 -7967 7968 0
-7968 7967 0
-7968 -7966 0
c Var 'aux1960' direct represents '2' with '-7967'
7966 7968 -7967 0
c Encoding variable: aux1961 with domain: int(0..2) (representing constraint ((x_00008_00009=8) + (x_00007_00009=8)))
c Both direct and order encoding.
c Var 'aux1961' order represents '0' with '7969'
c Var 'aux1961' direct represents '0' with '7969'
c Var 'aux1961' order represents '1' with '7970'
-7969 7970 0
c Var 'aux1961' direct represents '1' with '7971'
7969 -7970 7971 0
-7971 7970 0
-7971 -7969 0
c Var 'aux1961' direct represents '2' with '-7970'
7969 7971 -7970 0
c Encoding variable: aux1962 with domain: int(0..2) (representing constraint ((x_00008_00009=9) + (x_00007_00009=9)))
c Both direct and order encoding.
c Var 'aux1962' order represents '0' with '7972'
c Var 'aux1962' direct represents '0' with '7972'
c Var 'aux1962' order represents '1' with '7973'
-7972 7973 0
c Var 'aux1962' direct represents '1' with '7974'
7972 -7973 7974 0
-7974 7973 0
-7974 -7972 0
c Var 'aux1962' direct represents '2' with '-7973'
7972 7974 -7973 0
c Encoding variable: aux1963 with domain: bool (representing constraint ((aux435 + aux436 + shift(x_00002_00003, -1))<=26))
c Var 'aux1963' direct represents '0' with '-7975'
c Var 'aux1963' direct represents '1' with '7975'
c Var 'aux1963' order represents '1' with '1'
c Var 'aux1963' order represents '0' with '-7975'
c Encoding variable: aux1964 with domain: bool (representing constraint (26<=(aux435 + aux436 + shift(x_00002_00003, -1))))
c Var 'aux1964' direct represents '0' with '-7976'
c Var 'aux1964' direct represents '1' with '7976'
c Var 'aux1964' order represents '1' with '1'
c Var 'aux1964' order represents '0' with '-7976'
c Encoding variable: aux1965 with domain: bool (representing constraint ((aux437 + shift(x_00001_00003, -1) + shift(x_00001_00004, -1))<=10))
c Var 'aux1965' direct represents '0' with '-7977'
c Var 'aux1965' direct represents '1' with '7977'
c Var 'aux1965' order represents '1' with '1'
c Var 'aux1965' order represents '0' with '-7977'
c Encoding variable: aux1966 with domain: bool (representing constraint (10<=(aux437 + shift(x_00001_00003, -1) + shift(x_00001_00004, -1))))
c Var 'aux1966' direct represents '0' with '-7978'
c Var 'aux1966' direct represents '1' with '7978'
c Var 'aux1966' order represents '1' with '1'
c Var 'aux1966' order represents '0' with '-7978'
c Encoding variable: aux1967 with domain: bool (representing constraint ((x_00001_00006 + x_00001_00007 + x_00001_00008)<=11))
c Var 'aux1967' direct represents '0' with '-7979'
c Var 'aux1967' direct represents '1' with '7979'
c Var 'aux1967' order represents '1' with '1'
c Var 'aux1967' order represents '0' with '-7979'
c Encoding variable: aux1968 with domain: bool (representing constraint (11<=(x_00001_00006 + x_00001_00007 + x_00001_00008)))
c Var 'aux1968' direct represents '0' with '-7980'
c Var 'aux1968' direct represents '1' with '7980'
c Var 'aux1968' order represents '1' with '1'
c Var 'aux1968' order represents '0' with '-7980'
c Encoding variable: aux1969 with domain: bool (representing constraint ((x_00002_00009 + x_00001_00009)<=11))
c Var 'aux1969' direct represents '0' with '-7981'
c Var 'aux1969' direct represents '1' with '7981'
c Var 'aux1969' order represents '1' with '1'
c Var 'aux1969' order represents '0' with '-7981'
c Encoding variable: aux1970 with domain: bool (representing constraint (11<=(x_00002_00009 + x_00001_00009)))
c Var 'aux1970' direct represents '0' with '-7982'
c Var 'aux1970' direct represents '1' with '7982'
c Var 'aux1970' order represents '1' with '1'
c Var 'aux1970' order represents '0' with '-7982'
c Encoding variable: aux1971 with domain: bool (representing constraint ((aux438 + shift(x_00003_00004, -1) + shift(x_00003_00005, -1))<=20))
c Var 'aux1971' direct represents '0' with '-7983'
c Var 'aux1971' direct represents '1' with '7983'
c Var 'aux1971' order represents '1' with '1'
c Var 'aux1971' order represents '0' with '-7983'
c Encoding variable: aux1972 with domain: bool (representing constraint (20<=(aux438 + shift(x_00003_00004, -1) + shift(x_00003_00005, -1))))
c Var 'aux1972' direct represents '0' with '-7984'
c Var 'aux1972' direct represents '1' with '7984'
c Var 'aux1972' order represents '1' with '1'
c Var 'aux1972' order represents '0' with '-7984'
c Encoding variable: aux1973 with domain: bool (representing constraint ((x_00002_00006 + x_00002_00007 + x_00002_00008)<=17))
c Var 'aux1973' direct represents '0' with '-7985'
c Var 'aux1973' direct represents '1' with '7985'
c Var 'aux1973' order represents '1' with '1'
c Var 'aux1973' order represents '0' with '-7985'
c Encoding variable: aux1974 with domain: bool (representing constraint (17<=(x_00002_00006 + x_00002_00007 + x_00002_00008)))
c Var 'aux1974' direct represents '0' with '-7986'
c Var 'aux1974' direct represents '1' with '7986'
c Var 'aux1974' order represents '1' with '1'
c Var 'aux1974' order represents '0' with '-7986'
c Encoding variable: aux1975 with domain: bool (representing constraint ((x_00003_00001 + x_00003_00002 + x_00003_00003)<=13))
c Var 'aux1975' direct represents '0' with '-7987'
c Var 'aux1975' direct represents '1' with '7987'
c Var 'aux1975' order represents '1' with '1'
c Var 'aux1975' order represents '0' with '-7987'
c Encoding variable: aux1976 with domain: bool (representing constraint (13<=(x_00003_00001 + x_00003_00002 + x_00003_00003)))
c Var 'aux1976' direct represents '0' with '-7988'
c Var 'aux1976' direct represents '1' with '7988'
c Var 'aux1976' order represents '1' with '1'
c Var 'aux1976' order represents '0' with '-7988'
c Encoding variable: aux1977 with domain: bool (representing constraint ((aux439 + shift(x_00005_00005, -1) + shift(x_00004_00006, -1))<=11))
c Var 'aux1977' direct represents '0' with '-7989'
c Var 'aux1977' direct represents '1' with '7989'
c Var 'aux1977' order represents '1' with '1'
c Var 'aux1977' order represents '0' with '-7989'
c Encoding variable: aux1978 with domain: bool (representing constraint (11<=(aux439 + shift(x_00005_00005, -1) + shift(x_00004_00006, -1))))
c Var 'aux1978' direct represents '0' with '-7990'
c Var 'aux1978' direct represents '1' with '7990'
c Var 'aux1978' order represents '1' with '1'
c Var 'aux1978' order represents '0' with '-7990'
c Encoding variable: aux1979 with domain: bool (representing constraint ((x_00003_00007 + x_00003_00008 + x_00004_00008)<=11))
c Var 'aux1979' direct represents '0' with '-7991'
c Var 'aux1979' direct represents '1' with '7991'
c Var 'aux1979' order represents '1' with '1'
c Var 'aux1979' order represents '0' with '-7991'
c Encoding variable: aux1980 with domain: bool (representing constraint (11<=(x_00003_00007 + x_00003_00008 + x_00004_00008)))
c Var 'aux1980' direct represents '0' with '-7992'
c Var 'aux1980' direct represents '1' with '7992'
c Var 'aux1980' order represents '1' with '1'
c Var 'aux1980' order represents '0' with '-7992'
c Encoding variable: aux1981 with domain: bool (representing constraint ((x_00004_00001 + x_00004_00002 + x_00005_00001)<=15))
c Var 'aux1981' direct represents '0' with '-7993'
c Var 'aux1981' direct represents '1' with '7993'
c Var 'aux1981' order represents '1' with '1'
c Var 'aux1981' order represents '0' with '-7993'
c Encoding variable: aux1982 with domain: bool (representing constraint (15<=(x_00004_00001 + x_00004_00002 + x_00005_00001)))
c Var 'aux1982' direct represents '0' with '-7994'
c Var 'aux1982' direct represents '1' with '7994'
c Var 'aux1982' order represents '1' with '1'
c Var 'aux1982' order represents '0' with '-7994'
c Encoding variable: aux1983 with domain: bool (representing constraint ((x_00004_00003 + x_00005_00002 + x_00005_00003)<=18))
c Var 'aux1983' direct represents '0' with '-7995'
c Var 'aux1983' direct represents '1' with '7995'
c Var 'aux1983' order represents '1' with '1'
c Var 'aux1983' order represents '0' with '-7995'
c Encoding variable: aux1984 with domain: bool (representing constraint (18<=(x_00004_00003 + x_00005_00002 + x_00005_00003)))
c Var 'aux1984' direct represents '0' with '-7996'
c Var 'aux1984' direct represents '1' with '7996'
c Var 'aux1984' order represents '1' with '1'
c Var 'aux1984' order represents '0' with '-7996'
c Encoding variable: aux1985 with domain: bool (representing constraint ((aux440 + shift(x_00005_00004, -1) + shift(x_00006_00004, -1))<=16))
c Var 'aux1985' direct represents '0' with '-7997'
c Var 'aux1985' direct represents '1' with '7997'
c Var 'aux1985' order represents '1' with '1'
c Var 'aux1985' order represents '0' with '-7997'
c Encoding variable: aux1986 with domain: bool (representing constraint (16<=(aux440 + shift(x_00005_00004, -1) + shift(x_00006_00004, -1))))
c Var 'aux1986' direct represents '0' with '-7998'
c Var 'aux1986' direct represents '1' with '7998'
c Var 'aux1986' order represents '1' with '1'
c Var 'aux1986' order represents '0' with '-7998'
c Encoding variable: aux1987 with domain: bool (representing constraint ((x_00004_00007 + x_00005_00007 + x_00005_00008)<=23))
c Var 'aux1987' direct represents '0' with '-7999'
c Var 'aux1987' direct represents '1' with '7999'
c Var 'aux1987' order represents '1' with '1'
c Var 'aux1987' order represents '0' with '-7999'
c Encoding variable: aux1988 with domain: bool (representing constraint (23<=(x_00004_00007 + x_00005_00007 + x_00005_00008)))
c Var 'aux1988' direct represents '0' with '-8000'
c Var 'aux1988' direct represents '1' with '8000'
c Var 'aux1988' order represents '1' with '1'
c Var 'aux1988' order represents '0' with '-8000'
c Encoding variable: aux1989 with domain: bool (representing constraint ((x_00004_00009 + x_00005_00009)<=10))
c Var 'aux1989' direct represents '0' with '-8001'
c Var 'aux1989' direct represents '1' with '8001'
c Var 'aux1989' order represents '1' with '1'
c Var 'aux1989' order represents '0' with '-8001'
c Encoding variable: aux1990 with domain: bool (representing constraint (10<=(x_00004_00009 + x_00005_00009)))
c Var 'aux1990' direct represents '0' with '-8002'
c Var 'aux1990' direct represents '1' with '8002'
c Var 'aux1990' order represents '1' with '1'
c Var 'aux1990' order represents '0' with '-8002'
c Encoding variable: aux1991 with domain: bool (representing constraint ((x_00007_00001 + x_00006_00001)<=7))
c Var 'aux1991' direct represents '0' with '-8003'
c Var 'aux1991' direct represents '1' with '8003'
c Var 'aux1991' order represents '1' with '1'
c Var 'aux1991' order represents '0' with '-8003'
c Encoding variable: aux1992 with domain: bool (representing constraint (7<=(x_00007_00001 + x_00006_00001)))
c Var 'aux1992' direct represents '0' with '-8004'
c Var 'aux1992' direct represents '1' with '8004'
c Var 'aux1992' order represents '1' with '1'
c Var 'aux1992' order represents '0' with '-8004'
c Encoding variable: aux1993 with domain: bool (representing constraint ((x_00007_00002 + x_00006_00002)<=8))
c Var 'aux1993' direct represents '0' with '-8005'
c Var 'aux1993' direct represents '1' with '8005'
c Var 'aux1993' order represents '1' with '1'
c Var 'aux1993' order represents '0' with '-8005'
c Encoding variable: aux1994 with domain: bool (representing constraint (8<=(x_00007_00002 + x_00006_00002)))
c Var 'aux1994' direct represents '0' with '-8006'
c Var 'aux1994' direct represents '1' with '8006'
c Var 'aux1994' order represents '1' with '1'
c Var 'aux1994' order represents '0' with '-8006'
c Encoding variable: aux1995 with domain: bool (representing constraint ((x_00007_00003 + x_00008_00003 + x_00006_00003)<=18))
c Var 'aux1995' direct represents '0' with '-8007'
c Var 'aux1995' direct represents '1' with '8007'
c Var 'aux1995' order represents '1' with '1'
c Var 'aux1995' order represents '0' with '-8007'
c Encoding variable: aux1996 with domain: bool (representing constraint (18<=(x_00007_00003 + x_00008_00003 + x_00006_00003)))
c Var 'aux1996' direct represents '0' with '-8008'
c Var 'aux1996' direct represents '1' with '8008'
c Var 'aux1996' order represents '1' with '1'
c Var 'aux1996' order represents '0' with '-8008'
c Encoding variable: aux1997 with domain: bool (representing constraint ((x_00007_00006 + x_00006_00006)<=15))
c Var 'aux1997' direct represents '0' with '-8009'
c Var 'aux1997' direct represents '1' with '8009'
c Var 'aux1997' order represents '1' with '1'
c Var 'aux1997' order represents '0' with '-8009'
c Encoding variable: aux1998 with domain: bool (representing constraint (15<=(x_00007_00006 + x_00006_00006)))
c Var 'aux1998' direct represents '0' with '-8010'
c Var 'aux1998' direct represents '1' with '8010'
c Var 'aux1998' order represents '1' with '1'
c Var 'aux1998' order represents '0' with '-8010'
c Encoding variable: aux1999 with domain: bool (representing constraint ((x_00006_00007 + x_00006_00008 + x_00006_00009)<=11))
c Var 'aux1999' direct represents '0' with '-8011'
c Var 'aux1999' direct represents '1' with '8011'
c Var 'aux1999' order represents '1' with '1'
c Var 'aux1999' order represents '0' with '-8011'
c Encoding variable: aux2000 with domain: bool (representing constraint (11<=(x_00006_00007 + x_00006_00008 + x_00006_00009)))
c Var 'aux2000' direct represents '0' with '-8012'
c Var 'aux2000' direct represents '1' with '8012'
c Var 'aux2000' order represents '1' with '1'
c Var 'aux2000' order represents '0' with '-8012'
c Encoding variable: aux2001 with domain: bool (representing constraint ((x_00007_00004 + x_00007_00005)<=5))
c Var 'aux2001' direct represents '0' with '-8013'
c Var 'aux2001' direct represents '1' with '8013'
c Var 'aux2001' order represents '1' with '1'
c Var 'aux2001' order represents '0' with '-8013'
c Encoding variable: aux2002 with domain: bool (representing constraint (5<=(x_00007_00004 + x_00007_00005)))
c Var 'aux2002' direct represents '0' with '-8014'
c Var 'aux2002' direct represents '1' with '8014'
c Var 'aux2002' order represents '1' with '1'
c Var 'aux2002' order represents '0' with '-8014'
c Encoding variable: aux2003 with domain: bool (representing constraint ((x_00007_00007 + x_00007_00008)<=15))
c Var 'aux2003' direct represents '0' with '-8015'
c Var 'aux2003' direct represents '1' with '8015'
c Var 'aux2003' order represents '1' with '1'
c Var 'aux2003' order represents '0' with '-8015'
c Encoding variable: aux2004 with domain: bool (representing constraint (15<=(x_00007_00007 + x_00007_00008)))
c Var 'aux2004' direct represents '0' with '-8016'
c Var 'aux2004' direct represents '1' with '8016'
c Var 'aux2004' order represents '1' with '1'
c Var 'aux2004' order represents '0' with '-8016'
c Encoding variable: aux2005 with domain: bool (representing constraint ((aux441 + shift(x_00008_00009, -1) + shift(x_00009_00008, -1))<=12))
c Var 'aux2005' direct represents '0' with '-8017'
c Var 'aux2005' direct represents '1' with '8017'
c Var 'aux2005' order represents '1' with '1'
c Var 'aux2005' order represents '0' with '-8017'
c Encoding variable: aux2006 with domain: bool (representing constraint (12<=(aux441 + shift(x_00008_00009, -1) + shift(x_00009_00008, -1))))
c Var 'aux2006' direct represents '0' with '-8018'
c Var 'aux2006' direct represents '1' with '8018'
c Var 'aux2006' order represents '1' with '1'
c Var 'aux2006' order represents '0' with '-8018'
c Encoding variable: aux2007 with domain: bool (representing constraint ((x_00008_00001 + x_00008_00002)<=5))
c Var 'aux2007' direct represents '0' with '-8019'
c Var 'aux2007' direct represents '1' with '8019'
c Var 'aux2007' order represents '1' with '1'
c Var 'aux2007' order represents '0' with '-8019'
c Encoding variable: aux2008 with domain: bool (representing constraint (5<=(x_00008_00001 + x_00008_00002)))
c Var 'aux2008' direct represents '0' with '-8020'
c Var 'aux2008' direct represents '1' with '8020'
c Var 'aux2008' order represents '1' with '1'
c Var 'aux2008' order represents '0' with '-8020'
c Encoding variable: aux2009 with domain: bool (representing constraint ((x_00008_00004 + x_00008_00005 + x_00009_00005)<=14))
c Var 'aux2009' direct represents '0' with '-8021'
c Var 'aux2009' direct represents '1' with '8021'
c Var 'aux2009' order represents '1' with '1'
c Var 'aux2009' order represents '0' with '-8021'
c Encoding variable: aux2010 with domain: bool (representing constraint (14<=(x_00008_00004 + x_00008_00005 + x_00009_00005)))
c Var 'aux2010' direct represents '0' with '-8022'
c Var 'aux2010' direct represents '1' with '8022'
c Var 'aux2010' order represents '1' with '1'
c Var 'aux2010' order represents '0' with '-8022'
c Encoding variable: aux2011 with domain: bool (representing constraint ((x_00008_00006 + x_00009_00006)<=11))
c Var 'aux2011' direct represents '0' with '-8023'
c Var 'aux2011' direct represents '1' with '8023'
c Var 'aux2011' order represents '1' with '1'
c Var 'aux2011' order represents '0' with '-8023'
c Encoding variable: aux2012 with domain: bool (representing constraint (11<=(x_00008_00006 + x_00009_00006)))
c Var 'aux2012' direct represents '0' with '-8024'
c Var 'aux2012' direct represents '1' with '8024'
c Var 'aux2012' order represents '1' with '1'
c Var 'aux2012' order represents '0' with '-8024'
c Encoding variable: aux2013 with domain: bool (representing constraint ((x_00008_00007 + x_00008_00008 + x_00009_00007)<=14))
c Var 'aux2013' direct represents '0' with '-8025'
c Var 'aux2013' direct represents '1' with '8025'
c Var 'aux2013' order represents '1' with '1'
c Var 'aux2013' order represents '0' with '-8025'
c Encoding variable: aux2014 with domain: bool (representing constraint (14<=(x_00008_00007 + x_00008_00008 + x_00009_00007)))
c Var 'aux2014' direct represents '0' with '-8026'
c Var 'aux2014' direct represents '1' with '8026'
c Var 'aux2014' order represents '1' with '1'
c Var 'aux2014' order represents '0' with '-8026'
c Encoding variable: aux2015 with domain: bool (representing constraint ((x_00009_00001 + x_00009_00002)<=17))
c Var 'aux2015' direct represents '0' with '-8027'
c Var 'aux2015' direct represents '1' with '8027'
c Var 'aux2015' order represents '1' with '1'
c Var 'aux2015' order represents '0' with '-8027'
c Encoding variable: aux2016 with domain: bool (representing constraint (17<=(x_00009_00001 + x_00009_00002)))
c Var 'aux2016' direct represents '0' with '-8028'
c Var 'aux2016' direct represents '1' with '8028'
c Var 'aux2016' order represents '1' with '1'
c Var 'aux2016' order represents '0' with '-8028'
c Encoding variable: aux2017 with domain: bool (representing constraint ((x_00009_00003 + x_00009_00004)<=8))
c Var 'aux2017' direct represents '0' with '-8029'
c Var 'aux2017' direct represents '1' with '8029'
c Var 'aux2017' order represents '1' with '1'
c Var 'aux2017' order represents '0' with '-8029'
c Encoding variable: aux2018 with domain: bool (representing constraint (8<=(x_00009_00003 + x_00009_00004)))
c Var 'aux2018' direct represents '0' with '-8030'
c Var 'aux2018' direct represents '1' with '8030'
c Var 'aux2018' order represents '1' with '1'
c Var 'aux2018' order represents '0' with '-8030'
c Encoding variable: aux2019 with domain: bool (representing constraint ((aux443 + aux446 + aux447)<=1))
c Var 'aux2019' direct represents '0' with '-8031'
c Var 'aux2019' direct represents '1' with '8031'
c Var 'aux2019' order represents '1' with '1'
c Var 'aux2019' order represents '0' with '-8031'
c Encoding variable: aux2020 with domain: bool (representing constraint (1<=(aux443 + aux446 + aux447)))
c Var 'aux2020' direct represents '0' with '-8032'
c Var 'aux2020' direct represents '1' with '8032'
c Var 'aux2020' order represents '1' with '1'
c Var 'aux2020' order represents '0' with '-8032'
c Encoding variable: aux2021 with domain: bool (representing constraint ((aux449 + aux452 + aux453)<=1))
c Var 'aux2021' direct represents '0' with '-8033'
c Var 'aux2021' direct represents '1' with '8033'
c Var 'aux2021' order represents '1' with '1'
c Var 'aux2021' order represents '0' with '-8033'
c Encoding variable: aux2022 with domain: bool (representing constraint (1<=(aux449 + aux452 + aux453)))
c Var 'aux2022' direct represents '0' with '-8034'
c Var 'aux2022' direct represents '1' with '8034'
c Var 'aux2022' order represents '1' with '1'
c Var 'aux2022' order represents '0' with '-8034'
c Encoding variable: aux2023 with domain: bool (representing constraint ((aux455 + aux458 + aux459)<=1))
c Var 'aux2023' direct represents '0' with '-8035'
c Var 'aux2023' direct represents '1' with '8035'
c Var 'aux2023' order represents '1' with '1'
c Var 'aux2023' order represents '0' with '-8035'
c Encoding variable: aux2024 with domain: bool (representing constraint (1<=(aux455 + aux458 + aux459)))
c Var 'aux2024' direct represents '0' with '-8036'
c Var 'aux2024' direct represents '1' with '8036'
c Var 'aux2024' order represents '1' with '1'
c Var 'aux2024' order represents '0' with '-8036'
c Encoding variable: aux2025 with domain: bool (representing constraint ((aux461 + aux464 + aux465)<=1))
c Var 'aux2025' direct represents '0' with '-8037'
c Var 'aux2025' direct represents '1' with '8037'
c Var 'aux2025' order represents '1' with '1'
c Var 'aux2025' order represents '0' with '-8037'
c Encoding variable: aux2026 with domain: bool (representing constraint (1<=(aux461 + aux464 + aux465)))
c Var 'aux2026' direct represents '0' with '-8038'
c Var 'aux2026' direct represents '1' with '8038'
c Var 'aux2026' order represents '1' with '1'
c Var 'aux2026' order represents '0' with '-8038'
c Encoding variable: aux2027 with domain: bool (representing constraint ((aux467 + aux470 + aux471)<=1))
c Var 'aux2027' direct represents '0' with '-8039'
c Var 'aux2027' direct represents '1' with '8039'
c Var 'aux2027' order represents '1' with '1'
c Var 'aux2027' order represents '0' with '-8039'
c Encoding variable: aux2028 with domain: bool (representing constraint (1<=(aux467 + aux470 + aux471)))
c Var 'aux2028' direct represents '0' with '-8040'
c Var 'aux2028' direct represents '1' with '8040'
c Var 'aux2028' order represents '1' with '1'
c Var 'aux2028' order represents '0' with '-8040'
c Encoding variable: aux2029 with domain: bool (representing constraint ((aux473 + aux476 + aux477)<=1))
c Var 'aux2029' direct represents '0' with '-8041'
c Var 'aux2029' direct represents '1' with '8041'
c Var 'aux2029' order represents '1' with '1'
c Var 'aux2029' order represents '0' with '-8041'
c Encoding variable: aux2030 with domain: bool (representing constraint (1<=(aux473 + aux476 + aux477)))
c Var 'aux2030' direct represents '0' with '-8042'
c Var 'aux2030' direct represents '1' with '8042'
c Var 'aux2030' order represents '1' with '1'
c Var 'aux2030' order represents '0' with '-8042'
c Encoding variable: aux2031 with domain: bool (representing constraint ((aux479 + aux482 + aux483)<=1))
c Var 'aux2031' direct represents '0' with '-8043'
c Var 'aux2031' direct represents '1' with '8043'
c Var 'aux2031' order represents '1' with '1'
c Var 'aux2031' order represents '0' with '-8043'
c Encoding variable: aux2032 with domain: bool (representing constraint (1<=(aux479 + aux482 + aux483)))
c Var 'aux2032' direct represents '0' with '-8044'
c Var 'aux2032' direct represents '1' with '8044'
c Var 'aux2032' order represents '1' with '1'
c Var 'aux2032' order represents '0' with '-8044'
c Encoding variable: aux2033 with domain: bool (representing constraint ((aux485 + aux488 + aux489)<=1))
c Var 'aux2033' direct represents '0' with '-8045'
c Var 'aux2033' direct represents '1' with '8045'
c Var 'aux2033' order represents '1' with '1'
c Var 'aux2033' order represents '0' with '-8045'
c Encoding variable: aux2034 with domain: bool (representing constraint (1<=(aux485 + aux488 + aux489)))
c Var 'aux2034' direct represents '0' with '-8046'
c Var 'aux2034' direct represents '1' with '8046'
c Var 'aux2034' order represents '1' with '1'
c Var 'aux2034' order represents '0' with '-8046'
c Encoding variable: aux2035 with domain: bool (representing constraint ((aux491 + aux494 + aux495)<=1))
c Var 'aux2035' direct represents '0' with '-8047'
c Var 'aux2035' direct represents '1' with '8047'
c Var 'aux2035' order represents '1' with '1'
c Var 'aux2035' order represents '0' with '-8047'
c Encoding variable: aux2036 with domain: bool (representing constraint (1<=(aux491 + aux494 + aux495)))
c Var 'aux2036' direct represents '0' with '-8048'
c Var 'aux2036' direct represents '1' with '8048'
c Var 'aux2036' order represents '1' with '1'
c Var 'aux2036' order represents '0' with '-8048'
c Encoding variable: aux2037 with domain: bool (representing constraint ((aux497 + aux500 + aux501)<=1))
c Var 'aux2037' direct represents '0' with '-8049'
c Var 'aux2037' direct represents '1' with '8049'
c Var 'aux2037' order represents '1' with '1'
c Var 'aux2037' order represents '0' with '-8049'
c Encoding variable: aux2038 with domain: bool (representing constraint (1<=(aux497 + aux500 + aux501)))
c Var 'aux2038' direct represents '0' with '-8050'
c Var 'aux2038' direct represents '1' with '8050'
c Var 'aux2038' order represents '1' with '1'
c Var 'aux2038' order represents '0' with '-8050'
c Encoding variable: aux2039 with domain: bool (representing constraint ((aux503 + aux506 + aux507)<=1))
c Var 'aux2039' direct represents '0' with '-8051'
c Var 'aux2039' direct represents '1' with '8051'
c Var 'aux2039' order represents '1' with '1'
c Var 'aux2039' order represents '0' with '-8051'
c Encoding variable: aux2040 with domain: bool (representing constraint (1<=(aux503 + aux506 + aux507)))
c Var 'aux2040' direct represents '0' with '-8052'
c Var 'aux2040' direct represents '1' with '8052'
c Var 'aux2040' order represents '1' with '1'
c Var 'aux2040' order represents '0' with '-8052'
c Encoding variable: aux2041 with domain: bool (representing constraint ((aux509 + aux512 + aux513)<=1))
c Var 'aux2041' direct represents '0' with '-8053'
c Var 'aux2041' direct represents '1' with '8053'
c Var 'aux2041' order represents '1' with '1'
c Var 'aux2041' order represents '0' with '-8053'
c Encoding variable: aux2042 with domain: bool (representing constraint (1<=(aux509 + aux512 + aux513)))
c Var 'aux2042' direct represents '0' with '-8054'
c Var 'aux2042' direct represents '1' with '8054'
c Var 'aux2042' order represents '1' with '1'
c Var 'aux2042' order represents '0' with '-8054'
c Encoding variable: aux2043 with domain: bool (representing constraint ((aux515 + aux518 + aux519)<=1))
c Var 'aux2043' direct represents '0' with '-8055'
c Var 'aux2043' direct represents '1' with '8055'
c Var 'aux2043' order represents '1' with '1'
c Var 'aux2043' order represents '0' with '-8055'
c Encoding variable: aux2044 with domain: bool (representing constraint (1<=(aux515 + aux518 + aux519)))
c Var 'aux2044' direct represents '0' with '-8056'
c Var 'aux2044' direct represents '1' with '8056'
c Var 'aux2044' order represents '1' with '1'
c Var 'aux2044' order represents '0' with '-8056'
c Encoding variable: aux2045 with domain: bool (representing constraint ((aux521 + aux524 + aux525)<=1))
c Var 'aux2045' direct represents '0' with '-8057'
c Var 'aux2045' direct represents '1' with '8057'
c Var 'aux2045' order represents '1' with '1'
c Var 'aux2045' order represents '0' with '-8057'
c Encoding variable: aux2046 with domain: bool (representing constraint (1<=(aux521 + aux524 + aux525)))
c Var 'aux2046' direct represents '0' with '-8058'
c Var 'aux2046' direct represents '1' with '8058'
c Var 'aux2046' order represents '1' with '1'
c Var 'aux2046' order represents '0' with '-8058'
c Encoding variable: aux2047 with domain: bool (representing constraint ((aux527 + aux530 + aux531)<=1))
c Var 'aux2047' direct represents '0' with '-8059'
c Var 'aux2047' direct represents '1' with '8059'
c Var 'aux2047' order represents '1' with '1'
c Var 'aux2047' order represents '0' with '-8059'
c Encoding variable: aux2048 with domain: bool (representing constraint (1<=(aux527 + aux530 + aux531)))
c Var 'aux2048' direct represents '0' with '-8060'
c Var 'aux2048' direct represents '1' with '8060'
c Var 'aux2048' order represents '1' with '1'
c Var 'aux2048' order represents '0' with '-8060'
c Encoding variable: aux2049 with domain: bool (representing constraint ((aux533 + aux536 + aux537)<=1))
c Var 'aux2049' direct represents '0' with '-8061'
c Var 'aux2049' direct represents '1' with '8061'
c Var 'aux2049' order represents '1' with '1'
c Var 'aux2049' order represents '0' with '-8061'
c Encoding variable: aux2050 with domain: bool (representing constraint (1<=(aux533 + aux536 + aux537)))
c Var 'aux2050' direct represents '0' with '-8062'
c Var 'aux2050' direct represents '1' with '8062'
c Var 'aux2050' order represents '1' with '1'
c Var 'aux2050' order represents '0' with '-8062'
c Encoding variable: aux2051 with domain: bool (representing constraint ((aux539 + aux542 + aux543)<=1))
c Var 'aux2051' direct represents '0' with '-8063'
c Var 'aux2051' direct represents '1' with '8063'
c Var 'aux2051' order represents '1' with '1'
c Var 'aux2051' order represents '0' with '-8063'
c Encoding variable: aux2052 with domain: bool (representing constraint (1<=(aux539 + aux542 + aux543)))
c Var 'aux2052' direct represents '0' with '-8064'
c Var 'aux2052' direct represents '1' with '8064'
c Var 'aux2052' order represents '1' with '1'
c Var 'aux2052' order represents '0' with '-8064'
c Encoding variable: aux2053 with domain: bool (representing constraint ((aux545 + aux548 + aux549)<=1))
c Var 'aux2053' direct represents '0' with '-8065'
c Var 'aux2053' direct represents '1' with '8065'
c Var 'aux2053' order represents '1' with '1'
c Var 'aux2053' order represents '0' with '-8065'
c Encoding variable: aux2054 with domain: bool (representing constraint (1<=(aux545 + aux548 + aux549)))
c Var 'aux2054' direct represents '0' with '-8066'
c Var 'aux2054' direct represents '1' with '8066'
c Var 'aux2054' order represents '1' with '1'
c Var 'aux2054' order represents '0' with '-8066'
c Encoding variable: aux2055 with domain: bool (representing constraint ((aux551 + aux554 + aux555)<=1))
c Var 'aux2055' direct represents '0' with '-8067'
c Var 'aux2055' direct represents '1' with '8067'
c Var 'aux2055' order represents '1' with '1'
c Var 'aux2055' order represents '0' with '-8067'
c Encoding variable: aux2056 with domain: bool (representing constraint (1<=(aux551 + aux554 + aux555)))
c Var 'aux2056' direct represents '0' with '-8068'
c Var 'aux2056' direct represents '1' with '8068'
c Var 'aux2056' order represents '1' with '1'
c Var 'aux2056' order represents '0' with '-8068'
c Encoding variable: aux2057 with domain: bool (representing constraint ((aux557 + aux560 + aux561)<=1))
c Var 'aux2057' direct represents '0' with '-8069'
c Var 'aux2057' direct represents '1' with '8069'
c Var 'aux2057' order represents '1' with '1'
c Var 'aux2057' order represents '0' with '-8069'
c Encoding variable: aux2058 with domain: bool (representing constraint (1<=(aux557 + aux560 + aux561)))
c Var 'aux2058' direct represents '0' with '-8070'
c Var 'aux2058' direct represents '1' with '8070'
c Var 'aux2058' order represents '1' with '1'
c Var 'aux2058' order represents '0' with '-8070'
c Encoding variable: aux2059 with domain: bool (representing constraint ((aux563 + aux566 + aux567)<=1))
c Var 'aux2059' direct represents '0' with '-8071'
c Var 'aux2059' direct represents '1' with '8071'
c Var 'aux2059' order represents '1' with '1'
c Var 'aux2059' order represents '0' with '-8071'
c Encoding variable: aux2060 with domain: bool (representing constraint (1<=(aux563 + aux566 + aux567)))
c Var 'aux2060' direct represents '0' with '-8072'
c Var 'aux2060' direct represents '1' with '8072'
c Var 'aux2060' order represents '1' with '1'
c Var 'aux2060' order represents '0' with '-8072'
c Encoding variable: aux2061 with domain: bool (representing constraint ((aux569 + aux572 + aux573)<=1))
c Var 'aux2061' direct represents '0' with '-8073'
c Var 'aux2061' direct represents '1' with '8073'
c Var 'aux2061' order represents '1' with '1'
c Var 'aux2061' order represents '0' with '-8073'
c Encoding variable: aux2062 with domain: bool (representing constraint (1<=(aux569 + aux572 + aux573)))
c Var 'aux2062' direct represents '0' with '-8074'
c Var 'aux2062' direct represents '1' with '8074'
c Var 'aux2062' order represents '1' with '1'
c Var 'aux2062' order represents '0' with '-8074'
c Encoding variable: aux2063 with domain: bool (representing constraint ((aux575 + aux578 + aux579)<=1))
c Var 'aux2063' direct represents '0' with '-8075'
c Var 'aux2063' direct represents '1' with '8075'
c Var 'aux2063' order represents '1' with '1'
c Var 'aux2063' order represents '0' with '-8075'
c Encoding variable: aux2064 with domain: bool (representing constraint (1<=(aux575 + aux578 + aux579)))
c Var 'aux2064' direct represents '0' with '-8076'
c Var 'aux2064' direct represents '1' with '8076'
c Var 'aux2064' order represents '1' with '1'
c Var 'aux2064' order represents '0' with '-8076'
c Encoding variable: aux2065 with domain: bool (representing constraint ((aux581 + aux584 + aux585)<=1))
c Var 'aux2065' direct represents '0' with '-8077'
c Var 'aux2065' direct represents '1' with '8077'
c Var 'aux2065' order represents '1' with '1'
c Var 'aux2065' order represents '0' with '-8077'
c Encoding variable: aux2066 with domain: bool (representing constraint (1<=(aux581 + aux584 + aux585)))
c Var 'aux2066' direct represents '0' with '-8078'
c Var 'aux2066' direct represents '1' with '8078'
c Var 'aux2066' order represents '1' with '1'
c Var 'aux2066' order represents '0' with '-8078'
c Encoding variable: aux2067 with domain: bool (representing constraint ((aux587 + aux590 + aux591)<=1))
c Var 'aux2067' direct represents '0' with '-8079'
c Var 'aux2067' direct represents '1' with '8079'
c Var 'aux2067' order represents '1' with '1'
c Var 'aux2067' order represents '0' with '-8079'
c Encoding variable: aux2068 with domain: bool (representing constraint (1<=(aux587 + aux590 + aux591)))
c Var 'aux2068' direct represents '0' with '-8080'
c Var 'aux2068' direct represents '1' with '8080'
c Var 'aux2068' order represents '1' with '1'
c Var 'aux2068' order represents '0' with '-8080'
c Encoding variable: aux2069 with domain: bool (representing constraint ((aux593 + aux596 + aux597)<=1))
c Var 'aux2069' direct represents '0' with '-8081'
c Var 'aux2069' direct represents '1' with '8081'
c Var 'aux2069' order represents '1' with '1'
c Var 'aux2069' order represents '0' with '-8081'
c Encoding variable: aux2070 with domain: bool (representing constraint (1<=(aux593 + aux596 + aux597)))
c Var 'aux2070' direct represents '0' with '-8082'
c Var 'aux2070' direct represents '1' with '8082'
c Var 'aux2070' order represents '1' with '1'
c Var 'aux2070' order represents '0' with '-8082'
c Encoding variable: aux2071 with domain: bool (representing constraint ((aux599 + aux602 + aux603)<=1))
c Var 'aux2071' direct represents '0' with '-8083'
c Var 'aux2071' direct represents '1' with '8083'
c Var 'aux2071' order represents '1' with '1'
c Var 'aux2071' order represents '0' with '-8083'
c Encoding variable: aux2072 with domain: bool (representing constraint (1<=(aux599 + aux602 + aux603)))
c Var 'aux2072' direct represents '0' with '-8084'
c Var 'aux2072' direct represents '1' with '8084'
c Var 'aux2072' order represents '1' with '1'
c Var 'aux2072' order represents '0' with '-8084'
c Encoding variable: aux2073 with domain: bool (representing constraint ((aux605 + aux608 + aux609)<=1))
c Var 'aux2073' direct represents '0' with '-8085'
c Var 'aux2073' direct represents '1' with '8085'
c Var 'aux2073' order represents '1' with '1'
c Var 'aux2073' order represents '0' with '-8085'
c Encoding variable: aux2074 with domain: bool (representing constraint (1<=(aux605 + aux608 + aux609)))
c Var 'aux2074' direct represents '0' with '-8086'
c Var 'aux2074' direct represents '1' with '8086'
c Var 'aux2074' order represents '1' with '1'
c Var 'aux2074' order represents '0' with '-8086'
c Encoding variable: aux2075 with domain: bool (representing constraint ((aux611 + aux614 + aux615)<=1))
c Var 'aux2075' direct represents '0' with '-8087'
c Var 'aux2075' direct represents '1' with '8087'
c Var 'aux2075' order represents '1' with '1'
c Var 'aux2075' order represents '0' with '-8087'
c Encoding variable: aux2076 with domain: bool (representing constraint (1<=(aux611 + aux614 + aux615)))
c Var 'aux2076' direct represents '0' with '-8088'
c Var 'aux2076' direct represents '1' with '8088'
c Var 'aux2076' order represents '1' with '1'
c Var 'aux2076' order represents '0' with '-8088'
c Encoding variable: aux2077 with domain: bool (representing constraint ((aux617 + aux620 + aux621)<=1))
c Var 'aux2077' direct represents '0' with '-8089'
c Var 'aux2077' direct represents '1' with '8089'
c Var 'aux2077' order represents '1' with '1'
c Var 'aux2077' order represents '0' with '-8089'
c Encoding variable: aux2078 with domain: bool (representing constraint (1<=(aux617 + aux620 + aux621)))
c Var 'aux2078' direct represents '0' with '-8090'
c Var 'aux2078' direct represents '1' with '8090'
c Var 'aux2078' order represents '1' with '1'
c Var 'aux2078' order represents '0' with '-8090'
c Encoding variable: aux2079 with domain: bool (representing constraint ((aux623 + aux626 + aux627)<=1))
c Var 'aux2079' direct represents '0' with '-8091'
c Var 'aux2079' direct represents '1' with '8091'
c Var 'aux2079' order represents '1' with '1'
c Var 'aux2079' order represents '0' with '-8091'
c Encoding variable: aux2080 with domain: bool (representing constraint (1<=(aux623 + aux626 + aux627)))
c Var 'aux2080' direct represents '0' with '-8092'
c Var 'aux2080' direct represents '1' with '8092'
c Var 'aux2080' order represents '1' with '1'
c Var 'aux2080' order represents '0' with '-8092'
c Encoding variable: aux2081 with domain: bool (representing constraint ((aux629 + aux632 + aux633)<=1))
c Var 'aux2081' direct represents '0' with '-8093'
c Var 'aux2081' direct represents '1' with '8093'
c Var 'aux2081' order represents '1' with '1'
c Var 'aux2081' order represents '0' with '-8093'
c Encoding variable: aux2082 with domain: bool (representing constraint (1<=(aux629 + aux632 + aux633)))
c Var 'aux2082' direct represents '0' with '-8094'
c Var 'aux2082' direct represents '1' with '8094'
c Var 'aux2082' order represents '1' with '1'
c Var 'aux2082' order represents '0' with '-8094'
c Encoding variable: aux2083 with domain: bool (representing constraint ((aux635 + aux638 + aux639)<=1))
c Var 'aux2083' direct represents '0' with '-8095'
c Var 'aux2083' direct represents '1' with '8095'
c Var 'aux2083' order represents '1' with '1'
c Var 'aux2083' order represents '0' with '-8095'
c Encoding variable: aux2084 with domain: bool (representing constraint (1<=(aux635 + aux638 + aux639)))
c Var 'aux2084' direct represents '0' with '-8096'
c Var 'aux2084' direct represents '1' with '8096'
c Var 'aux2084' order represents '1' with '1'
c Var 'aux2084' order represents '0' with '-8096'
c Encoding variable: aux2085 with domain: bool (representing constraint ((aux641 + aux644 + aux645)<=1))
c Var 'aux2085' direct represents '0' with '-8097'
c Var 'aux2085' direct represents '1' with '8097'
c Var 'aux2085' order represents '1' with '1'
c Var 'aux2085' order represents '0' with '-8097'
c Encoding variable: aux2086 with domain: bool (representing constraint (1<=(aux641 + aux644 + aux645)))
c Var 'aux2086' direct represents '0' with '-8098'
c Var 'aux2086' direct represents '1' with '8098'
c Var 'aux2086' order represents '1' with '1'
c Var 'aux2086' order represents '0' with '-8098'
c Encoding variable: aux2087 with domain: bool (representing constraint ((aux647 + aux650 + aux651)<=1))
c Var 'aux2087' direct represents '0' with '-8099'
c Var 'aux2087' direct represents '1' with '8099'
c Var 'aux2087' order represents '1' with '1'
c Var 'aux2087' order represents '0' with '-8099'
c Encoding variable: aux2088 with domain: bool (representing constraint (1<=(aux647 + aux650 + aux651)))
c Var 'aux2088' direct represents '0' with '-8100'
c Var 'aux2088' direct represents '1' with '8100'
c Var 'aux2088' order represents '1' with '1'
c Var 'aux2088' order represents '0' with '-8100'
c Encoding variable: aux2089 with domain: bool (representing constraint ((aux653 + aux656 + aux657)<=1))
c Var 'aux2089' direct represents '0' with '-8101'
c Var 'aux2089' direct represents '1' with '8101'
c Var 'aux2089' order represents '1' with '1'
c Var 'aux2089' order represents '0' with '-8101'
c Encoding variable: aux2090 with domain: bool (representing constraint (1<=(aux653 + aux656 + aux657)))
c Var 'aux2090' direct represents '0' with '-8102'
c Var 'aux2090' direct represents '1' with '8102'
c Var 'aux2090' order represents '1' with '1'
c Var 'aux2090' order represents '0' with '-8102'
c Encoding variable: aux2091 with domain: bool (representing constraint ((aux659 + aux662 + aux663)<=1))
c Var 'aux2091' direct represents '0' with '-8103'
c Var 'aux2091' direct represents '1' with '8103'
c Var 'aux2091' order represents '1' with '1'
c Var 'aux2091' order represents '0' with '-8103'
c Encoding variable: aux2092 with domain: bool (representing constraint (1<=(aux659 + aux662 + aux663)))
c Var 'aux2092' direct represents '0' with '-8104'
c Var 'aux2092' direct represents '1' with '8104'
c Var 'aux2092' order represents '1' with '1'
c Var 'aux2092' order represents '0' with '-8104'
c Encoding variable: aux2093 with domain: bool (representing constraint ((aux665 + aux668 + aux669)<=1))
c Var 'aux2093' direct represents '0' with '-8105'
c Var 'aux2093' direct represents '1' with '8105'
c Var 'aux2093' order represents '1' with '1'
c Var 'aux2093' order represents '0' with '-8105'
c Encoding variable: aux2094 with domain: bool (representing constraint (1<=(aux665 + aux668 + aux669)))
c Var 'aux2094' direct represents '0' with '-8106'
c Var 'aux2094' direct represents '1' with '8106'
c Var 'aux2094' order represents '1' with '1'
c Var 'aux2094' order represents '0' with '-8106'
c Encoding variable: aux2095 with domain: bool (representing constraint ((aux671 + aux674 + aux675)<=1))
c Var 'aux2095' direct represents '0' with '-8107'
c Var 'aux2095' direct represents '1' with '8107'
c Var 'aux2095' order represents '1' with '1'
c Var 'aux2095' order represents '0' with '-8107'
c Encoding variable: aux2096 with domain: bool (representing constraint (1<=(aux671 + aux674 + aux675)))
c Var 'aux2096' direct represents '0' with '-8108'
c Var 'aux2096' direct represents '1' with '8108'
c Var 'aux2096' order represents '1' with '1'
c Var 'aux2096' order represents '0' with '-8108'
c Encoding variable: aux2097 with domain: bool (representing constraint ((aux677 + aux680 + aux681)<=1))
c Var 'aux2097' direct represents '0' with '-8109'
c Var 'aux2097' direct represents '1' with '8109'
c Var 'aux2097' order represents '1' with '1'
c Var 'aux2097' order represents '0' with '-8109'
c Encoding variable: aux2098 with domain: bool (representing constraint (1<=(aux677 + aux680 + aux681)))
c Var 'aux2098' direct represents '0' with '-8110'
c Var 'aux2098' direct represents '1' with '8110'
c Var 'aux2098' order represents '1' with '1'
c Var 'aux2098' order represents '0' with '-8110'
c Encoding variable: aux2099 with domain: bool (representing constraint ((aux683 + aux686 + aux687)<=1))
c Var 'aux2099' direct represents '0' with '-8111'
c Var 'aux2099' direct represents '1' with '8111'
c Var 'aux2099' order represents '1' with '1'
c Var 'aux2099' order represents '0' with '-8111'
c Encoding variable: aux2100 with domain: bool (representing constraint (1<=(aux683 + aux686 + aux687)))
c Var 'aux2100' direct represents '0' with '-8112'
c Var 'aux2100' direct represents '1' with '8112'
c Var 'aux2100' order represents '1' with '1'
c Var 'aux2100' order represents '0' with '-8112'
c Encoding variable: aux2101 with domain: bool (representing constraint ((aux689 + aux692 + aux693)<=1))
c Var 'aux2101' direct represents '0' with '-8113'
c Var 'aux2101' direct represents '1' with '8113'
c Var 'aux2101' order represents '1' with '1'
c Var 'aux2101' order represents '0' with '-8113'
c Encoding variable: aux2102 with domain: bool (representing constraint (1<=(aux689 + aux692 + aux693)))
c Var 'aux2102' direct represents '0' with '-8114'
c Var 'aux2102' direct represents '1' with '8114'
c Var 'aux2102' order represents '1' with '1'
c Var 'aux2102' order represents '0' with '-8114'
c Encoding variable: aux2103 with domain: bool (representing constraint ((aux695 + aux698 + aux699)<=1))
c Var 'aux2103' direct represents '0' with '-8115'
c Var 'aux2103' direct represents '1' with '8115'
c Var 'aux2103' order represents '1' with '1'
c Var 'aux2103' order represents '0' with '-8115'
c Encoding variable: aux2104 with domain: bool (representing constraint (1<=(aux695 + aux698 + aux699)))
c Var 'aux2104' direct represents '0' with '-8116'
c Var 'aux2104' direct represents '1' with '8116'
c Var 'aux2104' order represents '1' with '1'
c Var 'aux2104' order represents '0' with '-8116'
c Encoding variable: aux2105 with domain: bool (representing constraint ((aux701 + aux704 + aux705)<=1))
c Var 'aux2105' direct represents '0' with '-8117'
c Var 'aux2105' direct represents '1' with '8117'
c Var 'aux2105' order represents '1' with '1'
c Var 'aux2105' order represents '0' with '-8117'
c Encoding variable: aux2106 with domain: bool (representing constraint (1<=(aux701 + aux704 + aux705)))
c Var 'aux2106' direct represents '0' with '-8118'
c Var 'aux2106' direct represents '1' with '8118'
c Var 'aux2106' order represents '1' with '1'
c Var 'aux2106' order represents '0' with '-8118'
c Encoding variable: aux2107 with domain: bool (representing constraint ((aux707 + aux710 + aux711)<=1))
c Var 'aux2107' direct represents '0' with '-8119'
c Var 'aux2107' direct represents '1' with '8119'
c Var 'aux2107' order represents '1' with '1'
c Var 'aux2107' order represents '0' with '-8119'
c Encoding variable: aux2108 with domain: bool (representing constraint (1<=(aux707 + aux710 + aux711)))
c Var 'aux2108' direct represents '0' with '-8120'
c Var 'aux2108' direct represents '1' with '8120'
c Var 'aux2108' order represents '1' with '1'
c Var 'aux2108' order represents '0' with '-8120'
c Encoding variable: aux2109 with domain: bool (representing constraint ((aux713 + aux716 + aux717)<=1))
c Var 'aux2109' direct represents '0' with '-8121'
c Var 'aux2109' direct represents '1' with '8121'
c Var 'aux2109' order represents '1' with '1'
c Var 'aux2109' order represents '0' with '-8121'
c Encoding variable: aux2110 with domain: bool (representing constraint (1<=(aux713 + aux716 + aux717)))
c Var 'aux2110' direct represents '0' with '-8122'
c Var 'aux2110' direct represents '1' with '8122'
c Var 'aux2110' order represents '1' with '1'
c Var 'aux2110' order represents '0' with '-8122'
c Encoding variable: aux2111 with domain: bool (representing constraint ((aux719 + aux722 + aux723)<=1))
c Var 'aux2111' direct represents '0' with '-8123'
c Var 'aux2111' direct represents '1' with '8123'
c Var 'aux2111' order represents '1' with '1'
c Var 'aux2111' order represents '0' with '-8123'
c Encoding variable: aux2112 with domain: bool (representing constraint (1<=(aux719 + aux722 + aux723)))
c Var 'aux2112' direct represents '0' with '-8124'
c Var 'aux2112' direct represents '1' with '8124'
c Var 'aux2112' order represents '1' with '1'
c Var 'aux2112' order represents '0' with '-8124'
c Encoding variable: aux2113 with domain: bool (representing constraint ((aux725 + aux728 + aux729)<=1))
c Var 'aux2113' direct represents '0' with '-8125'
c Var 'aux2113' direct represents '1' with '8125'
c Var 'aux2113' order represents '1' with '1'
c Var 'aux2113' order represents '0' with '-8125'
c Encoding variable: aux2114 with domain: bool (representing constraint (1<=(aux725 + aux728 + aux729)))
c Var 'aux2114' direct represents '0' with '-8126'
c Var 'aux2114' direct represents '1' with '8126'
c Var 'aux2114' order represents '1' with '1'
c Var 'aux2114' order represents '0' with '-8126'
c Encoding variable: aux2115 with domain: bool (representing constraint ((aux731 + aux734 + aux735)<=1))
c Var 'aux2115' direct represents '0' with '-8127'
c Var 'aux2115' direct represents '1' with '8127'
c Var 'aux2115' order represents '1' with '1'
c Var 'aux2115' order represents '0' with '-8127'
c Encoding variable: aux2116 with domain: bool (representing constraint (1<=(aux731 + aux734 + aux735)))
c Var 'aux2116' direct represents '0' with '-8128'
c Var 'aux2116' direct represents '1' with '8128'
c Var 'aux2116' order represents '1' with '1'
c Var 'aux2116' order represents '0' with '-8128'
c Encoding variable: aux2117 with domain: bool (representing constraint ((aux737 + aux740 + aux741)<=1))
c Var 'aux2117' direct represents '0' with '-8129'
c Var 'aux2117' direct represents '1' with '8129'
c Var 'aux2117' order represents '1' with '1'
c Var 'aux2117' order represents '0' with '-8129'
c Encoding variable: aux2118 with domain: bool (representing constraint (1<=(aux737 + aux740 + aux741)))
c Var 'aux2118' direct represents '0' with '-8130'
c Var 'aux2118' direct represents '1' with '8130'
c Var 'aux2118' order represents '1' with '1'
c Var 'aux2118' order represents '0' with '-8130'
c Encoding variable: aux2119 with domain: bool (representing constraint ((aux743 + aux746 + aux747)<=1))
c Var 'aux2119' direct represents '0' with '-8131'
c Var 'aux2119' direct represents '1' with '8131'
c Var 'aux2119' order represents '1' with '1'
c Var 'aux2119' order represents '0' with '-8131'
c Encoding variable: aux2120 with domain: bool (representing constraint (1<=(aux743 + aux746 + aux747)))
c Var 'aux2120' direct represents '0' with '-8132'
c Var 'aux2120' direct represents '1' with '8132'
c Var 'aux2120' order represents '1' with '1'
c Var 'aux2120' order represents '0' with '-8132'
c Encoding variable: aux2121 with domain: bool (representing constraint ((aux749 + aux752 + aux753)<=1))
c Var 'aux2121' direct represents '0' with '-8133'
c Var 'aux2121' direct represents '1' with '8133'
c Var 'aux2121' order represents '1' with '1'
c Var 'aux2121' order represents '0' with '-8133'
c Encoding variable: aux2122 with domain: bool (representing constraint (1<=(aux749 + aux752 + aux753)))
c Var 'aux2122' direct represents '0' with '-8134'
c Var 'aux2122' direct represents '1' with '8134'
c Var 'aux2122' order represents '1' with '1'
c Var 'aux2122' order represents '0' with '-8134'
c Encoding variable: aux2123 with domain: bool (representing constraint ((aux755 + aux758 + aux759)<=1))
c Var 'aux2123' direct represents '0' with '-8135'
c Var 'aux2123' direct represents '1' with '8135'
c Var 'aux2123' order represents '1' with '1'
c Var 'aux2123' order represents '0' with '-8135'
c Encoding variable: aux2124 with domain: bool (representing constraint (1<=(aux755 + aux758 + aux759)))
c Var 'aux2124' direct represents '0' with '-8136'
c Var 'aux2124' direct represents '1' with '8136'
c Var 'aux2124' order represents '1' with '1'
c Var 'aux2124' order represents '0' with '-8136'
c Encoding variable: aux2125 with domain: bool (representing constraint ((aux761 + aux764 + aux765)<=1))
c Var 'aux2125' direct represents '0' with '-8137'
c Var 'aux2125' direct represents '1' with '8137'
c Var 'aux2125' order represents '1' with '1'
c Var 'aux2125' order represents '0' with '-8137'
c Encoding variable: aux2126 with domain: bool (representing constraint (1<=(aux761 + aux764 + aux765)))
c Var 'aux2126' direct represents '0' with '-8138'
c Var 'aux2126' direct represents '1' with '8138'
c Var 'aux2126' order represents '1' with '1'
c Var 'aux2126' order represents '0' with '-8138'
c Encoding variable: aux2127 with domain: bool (representing constraint ((aux767 + aux770 + aux771)<=1))
c Var 'aux2127' direct represents '0' with '-8139'
c Var 'aux2127' direct represents '1' with '8139'
c Var 'aux2127' order represents '1' with '1'
c Var 'aux2127' order represents '0' with '-8139'
c Encoding variable: aux2128 with domain: bool (representing constraint (1<=(aux767 + aux770 + aux771)))
c Var 'aux2128' direct represents '0' with '-8140'
c Var 'aux2128' direct represents '1' with '8140'
c Var 'aux2128' order represents '1' with '1'
c Var 'aux2128' order represents '0' with '-8140'
c Encoding variable: aux2129 with domain: bool (representing constraint ((aux773 + aux776 + aux777)<=1))
c Var 'aux2129' direct represents '0' with '-8141'
c Var 'aux2129' direct represents '1' with '8141'
c Var 'aux2129' order represents '1' with '1'
c Var 'aux2129' order represents '0' with '-8141'
c Encoding variable: aux2130 with domain: bool (representing constraint (1<=(aux773 + aux776 + aux777)))
c Var 'aux2130' direct represents '0' with '-8142'
c Var 'aux2130' direct represents '1' with '8142'
c Var 'aux2130' order represents '1' with '1'
c Var 'aux2130' order represents '0' with '-8142'
c Encoding variable: aux2131 with domain: bool (representing constraint ((aux779 + aux782 + aux783)<=1))
c Var 'aux2131' direct represents '0' with '-8143'
c Var 'aux2131' direct represents '1' with '8143'
c Var 'aux2131' order represents '1' with '1'
c Var 'aux2131' order represents '0' with '-8143'
c Encoding variable: aux2132 with domain: bool (representing constraint (1<=(aux779 + aux782 + aux783)))
c Var 'aux2132' direct represents '0' with '-8144'
c Var 'aux2132' direct represents '1' with '8144'
c Var 'aux2132' order represents '1' with '1'
c Var 'aux2132' order represents '0' with '-8144'
c Encoding variable: aux2133 with domain: bool (representing constraint ((aux785 + aux788 + aux789)<=1))
c Var 'aux2133' direct represents '0' with '-8145'
c Var 'aux2133' direct represents '1' with '8145'
c Var 'aux2133' order represents '1' with '1'
c Var 'aux2133' order represents '0' with '-8145'
c Encoding variable: aux2134 with domain: bool (representing constraint (1<=(aux785 + aux788 + aux789)))
c Var 'aux2134' direct represents '0' with '-8146'
c Var 'aux2134' direct represents '1' with '8146'
c Var 'aux2134' order represents '1' with '1'
c Var 'aux2134' order represents '0' with '-8146'
c Encoding variable: aux2135 with domain: bool (representing constraint ((aux791 + aux794 + aux795)<=1))
c Var 'aux2135' direct represents '0' with '-8147'
c Var 'aux2135' direct represents '1' with '8147'
c Var 'aux2135' order represents '1' with '1'
c Var 'aux2135' order represents '0' with '-8147'
c Encoding variable: aux2136 with domain: bool (representing constraint (1<=(aux791 + aux794 + aux795)))
c Var 'aux2136' direct represents '0' with '-8148'
c Var 'aux2136' direct represents '1' with '8148'
c Var 'aux2136' order represents '1' with '1'
c Var 'aux2136' order represents '0' with '-8148'
c Encoding variable: aux2137 with domain: bool (representing constraint ((aux797 + aux800 + aux801)<=1))
c Var 'aux2137' direct represents '0' with '-8149'
c Var 'aux2137' direct represents '1' with '8149'
c Var 'aux2137' order represents '1' with '1'
c Var 'aux2137' order represents '0' with '-8149'
c Encoding variable: aux2138 with domain: bool (representing constraint (1<=(aux797 + aux800 + aux801)))
c Var 'aux2138' direct represents '0' with '-8150'
c Var 'aux2138' direct represents '1' with '8150'
c Var 'aux2138' order represents '1' with '1'
c Var 'aux2138' order represents '0' with '-8150'
c Encoding variable: aux2139 with domain: bool (representing constraint ((aux803 + aux806 + aux807)<=1))
c Var 'aux2139' direct represents '0' with '-8151'
c Var 'aux2139' direct represents '1' with '8151'
c Var 'aux2139' order represents '1' with '1'
c Var 'aux2139' order represents '0' with '-8151'
c Encoding variable: aux2140 with domain: bool (representing constraint (1<=(aux803 + aux806 + aux807)))
c Var 'aux2140' direct represents '0' with '-8152'
c Var 'aux2140' direct represents '1' with '8152'
c Var 'aux2140' order represents '1' with '1'
c Var 'aux2140' order represents '0' with '-8152'
c Encoding variable: aux2141 with domain: bool (representing constraint ((aux809 + aux812 + aux813)<=1))
c Var 'aux2141' direct represents '0' with '-8153'
c Var 'aux2141' direct represents '1' with '8153'
c Var 'aux2141' order represents '1' with '1'
c Var 'aux2141' order represents '0' with '-8153'
c Encoding variable: aux2142 with domain: bool (representing constraint (1<=(aux809 + aux812 + aux813)))
c Var 'aux2142' direct represents '0' with '-8154'
c Var 'aux2142' direct represents '1' with '8154'
c Var 'aux2142' order represents '1' with '1'
c Var 'aux2142' order represents '0' with '-8154'
c Encoding variable: aux2143 with domain: bool (representing constraint ((aux815 + aux818 + aux819)<=1))
c Var 'aux2143' direct represents '0' with '-8155'
c Var 'aux2143' direct represents '1' with '8155'
c Var 'aux2143' order represents '1' with '1'
c Var 'aux2143' order represents '0' with '-8155'
c Encoding variable: aux2144 with domain: bool (representing constraint (1<=(aux815 + aux818 + aux819)))
c Var 'aux2144' direct represents '0' with '-8156'
c Var 'aux2144' direct represents '1' with '8156'
c Var 'aux2144' order represents '1' with '1'
c Var 'aux2144' order represents '0' with '-8156'
c Encoding variable: aux2145 with domain: bool (representing constraint ((aux821 + aux824 + aux825)<=1))
c Var 'aux2145' direct represents '0' with '-8157'
c Var 'aux2145' direct represents '1' with '8157'
c Var 'aux2145' order represents '1' with '1'
c Var 'aux2145' order represents '0' with '-8157'
c Encoding variable: aux2146 with domain: bool (representing constraint (1<=(aux821 + aux824 + aux825)))
c Var 'aux2146' direct represents '0' with '-8158'
c Var 'aux2146' direct represents '1' with '8158'
c Var 'aux2146' order represents '1' with '1'
c Var 'aux2146' order represents '0' with '-8158'
c Encoding variable: aux2147 with domain: bool (representing constraint ((aux827 + aux830 + aux831)<=1))
c Var 'aux2147' direct represents '0' with '-8159'
c Var 'aux2147' direct represents '1' with '8159'
c Var 'aux2147' order represents '1' with '1'
c Var 'aux2147' order represents '0' with '-8159'
c Encoding variable: aux2148 with domain: bool (representing constraint (1<=(aux827 + aux830 + aux831)))
c Var 'aux2148' direct represents '0' with '-8160'
c Var 'aux2148' direct represents '1' with '8160'
c Var 'aux2148' order represents '1' with '1'
c Var 'aux2148' order represents '0' with '-8160'
c Encoding variable: aux2149 with domain: bool (representing constraint ((aux833 + aux836 + aux837)<=1))
c Var 'aux2149' direct represents '0' with '-8161'
c Var 'aux2149' direct represents '1' with '8161'
c Var 'aux2149' order represents '1' with '1'
c Var 'aux2149' order represents '0' with '-8161'
c Encoding variable: aux2150 with domain: bool (representing constraint (1<=(aux833 + aux836 + aux837)))
c Var 'aux2150' direct represents '0' with '-8162'
c Var 'aux2150' direct represents '1' with '8162'
c Var 'aux2150' order represents '1' with '1'
c Var 'aux2150' order represents '0' with '-8162'
c Encoding variable: aux2151 with domain: bool (representing constraint ((aux839 + aux842 + aux843)<=1))
c Var 'aux2151' direct represents '0' with '-8163'
c Var 'aux2151' direct represents '1' with '8163'
c Var 'aux2151' order represents '1' with '1'
c Var 'aux2151' order represents '0' with '-8163'
c Encoding variable: aux2152 with domain: bool (representing constraint (1<=(aux839 + aux842 + aux843)))
c Var 'aux2152' direct represents '0' with '-8164'
c Var 'aux2152' direct represents '1' with '8164'
c Var 'aux2152' order represents '1' with '1'
c Var 'aux2152' order represents '0' with '-8164'
c Encoding variable: aux2153 with domain: bool (representing constraint ((aux845 + aux848 + aux849)<=1))
c Var 'aux2153' direct represents '0' with '-8165'
c Var 'aux2153' direct represents '1' with '8165'
c Var 'aux2153' order represents '1' with '1'
c Var 'aux2153' order represents '0' with '-8165'
c Encoding variable: aux2154 with domain: bool (representing constraint (1<=(aux845 + aux848 + aux849)))
c Var 'aux2154' direct represents '0' with '-8166'
c Var 'aux2154' direct represents '1' with '8166'
c Var 'aux2154' order represents '1' with '1'
c Var 'aux2154' order represents '0' with '-8166'
c Encoding variable: aux2155 with domain: bool (representing constraint ((aux851 + aux854 + aux855)<=1))
c Var 'aux2155' direct represents '0' with '-8167'
c Var 'aux2155' direct represents '1' with '8167'
c Var 'aux2155' order represents '1' with '1'
c Var 'aux2155' order represents '0' with '-8167'
c Encoding variable: aux2156 with domain: bool (representing constraint (1<=(aux851 + aux854 + aux855)))
c Var 'aux2156' direct represents '0' with '-8168'
c Var 'aux2156' direct represents '1' with '8168'
c Var 'aux2156' order represents '1' with '1'
c Var 'aux2156' order represents '0' with '-8168'
c Encoding variable: aux2157 with domain: bool (representing constraint ((aux857 + aux860 + aux861)<=1))
c Var 'aux2157' direct represents '0' with '-8169'
c Var 'aux2157' direct represents '1' with '8169'
c Var 'aux2157' order represents '1' with '1'
c Var 'aux2157' order represents '0' with '-8169'
c Encoding variable: aux2158 with domain: bool (representing constraint (1<=(aux857 + aux860 + aux861)))
c Var 'aux2158' direct represents '0' with '-8170'
c Var 'aux2158' direct represents '1' with '8170'
c Var 'aux2158' order represents '1' with '1'
c Var 'aux2158' order represents '0' with '-8170'
c Encoding variable: aux2159 with domain: bool (representing constraint ((aux863 + aux866 + aux867)<=1))
c Var 'aux2159' direct represents '0' with '-8171'
c Var 'aux2159' direct represents '1' with '8171'
c Var 'aux2159' order represents '1' with '1'
c Var 'aux2159' order represents '0' with '-8171'
c Encoding variable: aux2160 with domain: bool (representing constraint (1<=(aux863 + aux866 + aux867)))
c Var 'aux2160' direct represents '0' with '-8172'
c Var 'aux2160' direct represents '1' with '8172'
c Var 'aux2160' order represents '1' with '1'
c Var 'aux2160' order represents '0' with '-8172'
c Encoding variable: aux2161 with domain: bool (representing constraint ((aux869 + aux872 + aux873)<=1))
c Var 'aux2161' direct represents '0' with '-8173'
c Var 'aux2161' direct represents '1' with '8173'
c Var 'aux2161' order represents '1' with '1'
c Var 'aux2161' order represents '0' with '-8173'
c Encoding variable: aux2162 with domain: bool (representing constraint (1<=(aux869 + aux872 + aux873)))
c Var 'aux2162' direct represents '0' with '-8174'
c Var 'aux2162' direct represents '1' with '8174'
c Var 'aux2162' order represents '1' with '1'
c Var 'aux2162' order represents '0' with '-8174'
c Encoding variable: aux2163 with domain: bool (representing constraint ((aux875 + aux878 + aux879)<=1))
c Var 'aux2163' direct represents '0' with '-8175'
c Var 'aux2163' direct represents '1' with '8175'
c Var 'aux2163' order represents '1' with '1'
c Var 'aux2163' order represents '0' with '-8175'
c Encoding variable: aux2164 with domain: bool (representing constraint (1<=(aux875 + aux878 + aux879)))
c Var 'aux2164' direct represents '0' with '-8176'
c Var 'aux2164' direct represents '1' with '8176'
c Var 'aux2164' order represents '1' with '1'
c Var 'aux2164' order represents '0' with '-8176'
c Encoding variable: aux2165 with domain: bool (representing constraint ((aux881 + aux884 + aux885)<=1))
c Var 'aux2165' direct represents '0' with '-8177'
c Var 'aux2165' direct represents '1' with '8177'
c Var 'aux2165' order represents '1' with '1'
c Var 'aux2165' order represents '0' with '-8177'
c Encoding variable: aux2166 with domain: bool (representing constraint (1<=(aux881 + aux884 + aux885)))
c Var 'aux2166' direct represents '0' with '-8178'
c Var 'aux2166' direct represents '1' with '8178'
c Var 'aux2166' order represents '1' with '1'
c Var 'aux2166' order represents '0' with '-8178'
c Encoding variable: aux2167 with domain: bool (representing constraint ((aux887 + aux890 + aux891)<=1))
c Var 'aux2167' direct represents '0' with '-8179'
c Var 'aux2167' direct represents '1' with '8179'
c Var 'aux2167' order represents '1' with '1'
c Var 'aux2167' order represents '0' with '-8179'
c Encoding variable: aux2168 with domain: bool (representing constraint (1<=(aux887 + aux890 + aux891)))
c Var 'aux2168' direct represents '0' with '-8180'
c Var 'aux2168' direct represents '1' with '8180'
c Var 'aux2168' order represents '1' with '1'
c Var 'aux2168' order represents '0' with '-8180'
c Encoding variable: aux2169 with domain: bool (representing constraint ((aux893 + aux896 + aux897)<=1))
c Var 'aux2169' direct represents '0' with '-8181'
c Var 'aux2169' direct represents '1' with '8181'
c Var 'aux2169' order represents '1' with '1'
c Var 'aux2169' order represents '0' with '-8181'
c Encoding variable: aux2170 with domain: bool (representing constraint (1<=(aux893 + aux896 + aux897)))
c Var 'aux2170' direct represents '0' with '-8182'
c Var 'aux2170' direct represents '1' with '8182'
c Var 'aux2170' order represents '1' with '1'
c Var 'aux2170' order represents '0' with '-8182'
c Encoding variable: aux2171 with domain: bool (representing constraint ((aux899 + aux902 + aux903)<=1))
c Var 'aux2171' direct represents '0' with '-8183'
c Var 'aux2171' direct represents '1' with '8183'
c Var 'aux2171' order represents '1' with '1'
c Var 'aux2171' order represents '0' with '-8183'
c Encoding variable: aux2172 with domain: bool (representing constraint (1<=(aux899 + aux902 + aux903)))
c Var 'aux2172' direct represents '0' with '-8184'
c Var 'aux2172' direct represents '1' with '8184'
c Var 'aux2172' order represents '1' with '1'
c Var 'aux2172' order represents '0' with '-8184'
c Encoding variable: aux2173 with domain: bool (representing constraint ((aux905 + aux908 + aux909)<=1))
c Var 'aux2173' direct represents '0' with '-8185'
c Var 'aux2173' direct represents '1' with '8185'
c Var 'aux2173' order represents '1' with '1'
c Var 'aux2173' order represents '0' with '-8185'
c Encoding variable: aux2174 with domain: bool (representing constraint (1<=(aux905 + aux908 + aux909)))
c Var 'aux2174' direct represents '0' with '-8186'
c Var 'aux2174' direct represents '1' with '8186'
c Var 'aux2174' order represents '1' with '1'
c Var 'aux2174' order represents '0' with '-8186'
c Encoding variable: aux2175 with domain: bool (representing constraint ((aux911 + aux914 + aux915)<=1))
c Var 'aux2175' direct represents '0' with '-8187'
c Var 'aux2175' direct represents '1' with '8187'
c Var 'aux2175' order represents '1' with '1'
c Var 'aux2175' order represents '0' with '-8187'
c Encoding variable: aux2176 with domain: bool (representing constraint (1<=(aux911 + aux914 + aux915)))
c Var 'aux2176' direct represents '0' with '-8188'
c Var 'aux2176' direct represents '1' with '8188'
c Var 'aux2176' order represents '1' with '1'
c Var 'aux2176' order represents '0' with '-8188'
c Encoding variable: aux2177 with domain: bool (representing constraint ((aux917 + aux920 + aux921)<=1))
c Var 'aux2177' direct represents '0' with '-8189'
c Var 'aux2177' direct represents '1' with '8189'
c Var 'aux2177' order represents '1' with '1'
c Var 'aux2177' order represents '0' with '-8189'
c Encoding variable: aux2178 with domain: bool (representing constraint (1<=(aux917 + aux920 + aux921)))
c Var 'aux2178' direct represents '0' with '-8190'
c Var 'aux2178' direct represents '1' with '8190'
c Var 'aux2178' order represents '1' with '1'
c Var 'aux2178' order represents '0' with '-8190'
c Encoding variable: aux2179 with domain: bool (representing constraint ((aux923 + aux926 + aux927)<=1))
c Var 'aux2179' direct represents '0' with '-8191'
c Var 'aux2179' direct represents '1' with '8191'
c Var 'aux2179' order represents '1' with '1'
c Var 'aux2179' order represents '0' with '-8191'
c Encoding variable: aux2180 with domain: bool (representing constraint (1<=(aux923 + aux926 + aux927)))
c Var 'aux2180' direct represents '0' with '-8192'
c Var 'aux2180' direct represents '1' with '8192'
c Var 'aux2180' order represents '1' with '1'
c Var 'aux2180' order represents '0' with '-8192'
c Encoding variable: aux2181 with domain: bool (representing constraint ((aux929 + aux932 + aux933)<=1))
c Var 'aux2181' direct represents '0' with '-8193'
c Var 'aux2181' direct represents '1' with '8193'
c Var 'aux2181' order represents '1' with '1'
c Var 'aux2181' order represents '0' with '-8193'
c Encoding variable: aux2182 with domain: bool (representing constraint (1<=(aux929 + aux932 + aux933)))
c Var 'aux2182' direct represents '0' with '-8194'
c Var 'aux2182' direct represents '1' with '8194'
c Var 'aux2182' order represents '1' with '1'
c Var 'aux2182' order represents '0' with '-8194'
c Encoding variable: aux2183 with domain: bool (representing constraint ((aux935 + aux938 + aux939)<=1))
c Var 'aux2183' direct represents '0' with '-8195'
c Var 'aux2183' direct represents '1' with '8195'
c Var 'aux2183' order represents '1' with '1'
c Var 'aux2183' order represents '0' with '-8195'
c Encoding variable: aux2184 with domain: bool (representing constraint (1<=(aux935 + aux938 + aux939)))
c Var 'aux2184' direct represents '0' with '-8196'
c Var 'aux2184' direct represents '1' with '8196'
c Var 'aux2184' order represents '1' with '1'
c Var 'aux2184' order represents '0' with '-8196'
c Encoding variable: aux2185 with domain: bool (representing constraint ((aux941 + aux944 + aux945)<=1))
c Var 'aux2185' direct represents '0' with '-8197'
c Var 'aux2185' direct represents '1' with '8197'
c Var 'aux2185' order represents '1' with '1'
c Var 'aux2185' order represents '0' with '-8197'
c Encoding variable: aux2186 with domain: bool (representing constraint (1<=(aux941 + aux944 + aux945)))
c Var 'aux2186' direct represents '0' with '-8198'
c Var 'aux2186' direct represents '1' with '8198'
c Var 'aux2186' order represents '1' with '1'
c Var 'aux2186' order represents '0' with '-8198'
c Encoding variable: aux2187 with domain: bool (representing constraint ((aux947 + aux950 + aux951)<=1))
c Var 'aux2187' direct represents '0' with '-8199'
c Var 'aux2187' direct represents '1' with '8199'
c Var 'aux2187' order represents '1' with '1'
c Var 'aux2187' order represents '0' with '-8199'
c Encoding variable: aux2188 with domain: bool (representing constraint (1<=(aux947 + aux950 + aux951)))
c Var 'aux2188' direct represents '0' with '-8200'
c Var 'aux2188' direct represents '1' with '8200'
c Var 'aux2188' order represents '1' with '1'
c Var 'aux2188' order represents '0' with '-8200'
c Encoding variable: aux2189 with domain: bool (representing constraint ((aux953 + aux956 + aux957)<=1))
c Var 'aux2189' direct represents '0' with '-8201'
c Var 'aux2189' direct represents '1' with '8201'
c Var 'aux2189' order represents '1' with '1'
c Var 'aux2189' order represents '0' with '-8201'
c Encoding variable: aux2190 with domain: bool (representing constraint (1<=(aux953 + aux956 + aux957)))
c Var 'aux2190' direct represents '0' with '-8202'
c Var 'aux2190' direct represents '1' with '8202'
c Var 'aux2190' order represents '1' with '1'
c Var 'aux2190' order represents '0' with '-8202'
c Encoding variable: aux2191 with domain: bool (representing constraint ((aux959 + aux962 + aux963)<=1))
c Var 'aux2191' direct represents '0' with '-8203'
c Var 'aux2191' direct represents '1' with '8203'
c Var 'aux2191' order represents '1' with '1'
c Var 'aux2191' order represents '0' with '-8203'
c Encoding variable: aux2192 with domain: bool (representing constraint (1<=(aux959 + aux962 + aux963)))
c Var 'aux2192' direct represents '0' with '-8204'
c Var 'aux2192' direct represents '1' with '8204'
c Var 'aux2192' order represents '1' with '1'
c Var 'aux2192' order represents '0' with '-8204'
c Encoding variable: aux2193 with domain: bool (representing constraint ((aux965 + aux968 + aux969)<=1))
c Var 'aux2193' direct represents '0' with '-8205'
c Var 'aux2193' direct represents '1' with '8205'
c Var 'aux2193' order represents '1' with '1'
c Var 'aux2193' order represents '0' with '-8205'
c Encoding variable: aux2194 with domain: bool (representing constraint (1<=(aux965 + aux968 + aux969)))
c Var 'aux2194' direct represents '0' with '-8206'
c Var 'aux2194' direct represents '1' with '8206'
c Var 'aux2194' order represents '1' with '1'
c Var 'aux2194' order represents '0' with '-8206'
c Encoding variable: aux2195 with domain: bool (representing constraint ((aux971 + aux974 + aux975)<=1))
c Var 'aux2195' direct represents '0' with '-8207'
c Var 'aux2195' direct represents '1' with '8207'
c Var 'aux2195' order represents '1' with '1'
c Var 'aux2195' order represents '0' with '-8207'
c Encoding variable: aux2196 with domain: bool (representing constraint (1<=(aux971 + aux974 + aux975)))
c Var 'aux2196' direct represents '0' with '-8208'
c Var 'aux2196' direct represents '1' with '8208'
c Var 'aux2196' order represents '1' with '1'
c Var 'aux2196' order represents '0' with '-8208'
c Encoding variable: aux2197 with domain: bool (representing constraint ((aux977 + aux980 + aux981)<=1))
c Var 'aux2197' direct represents '0' with '-8209'
c Var 'aux2197' direct represents '1' with '8209'
c Var 'aux2197' order represents '1' with '1'
c Var 'aux2197' order represents '0' with '-8209'
c Encoding variable: aux2198 with domain: bool (representing constraint (1<=(aux977 + aux980 + aux981)))
c Var 'aux2198' direct represents '0' with '-8210'
c Var 'aux2198' direct represents '1' with '8210'
c Var 'aux2198' order represents '1' with '1'
c Var 'aux2198' order represents '0' with '-8210'
c Encoding variable: aux2199 with domain: bool (representing constraint ((aux983 + aux986 + aux987)<=1))
c Var 'aux2199' direct represents '0' with '-8211'
c Var 'aux2199' direct represents '1' with '8211'
c Var 'aux2199' order represents '1' with '1'
c Var 'aux2199' order represents '0' with '-8211'
c Encoding variable: aux2200 with domain: bool (representing constraint (1<=(aux983 + aux986 + aux987)))
c Var 'aux2200' direct represents '0' with '-8212'
c Var 'aux2200' direct represents '1' with '8212'
c Var 'aux2200' order represents '1' with '1'
c Var 'aux2200' order represents '0' with '-8212'
c Encoding variable: aux2201 with domain: bool (representing constraint ((aux989 + aux992 + aux993)<=1))
c Var 'aux2201' direct represents '0' with '-8213'
c Var 'aux2201' direct represents '1' with '8213'
c Var 'aux2201' order represents '1' with '1'
c Var 'aux2201' order represents '0' with '-8213'
c Encoding variable: aux2202 with domain: bool (representing constraint (1<=(aux989 + aux992 + aux993)))
c Var 'aux2202' direct represents '0' with '-8214'
c Var 'aux2202' direct represents '1' with '8214'
c Var 'aux2202' order represents '1' with '1'
c Var 'aux2202' order represents '0' with '-8214'
c Encoding variable: aux2203 with domain: bool (representing constraint ((aux995 + aux998 + aux999)<=1))
c Var 'aux2203' direct represents '0' with '-8215'
c Var 'aux2203' direct represents '1' with '8215'
c Var 'aux2203' order represents '1' with '1'
c Var 'aux2203' order represents '0' with '-8215'
c Encoding variable: aux2204 with domain: bool (representing constraint (1<=(aux995 + aux998 + aux999)))
c Var 'aux2204' direct represents '0' with '-8216'
c Var 'aux2204' direct represents '1' with '8216'
c Var 'aux2204' order represents '1' with '1'
c Var 'aux2204' order represents '0' with '-8216'
c Encoding variable: aux2205 with domain: bool (representing constraint ((aux1001 + aux1004 + aux1005)<=1))
c Var 'aux2205' direct represents '0' with '-8217'
c Var 'aux2205' direct represents '1' with '8217'
c Var 'aux2205' order represents '1' with '1'
c Var 'aux2205' order represents '0' with '-8217'
c Encoding variable: aux2206 with domain: bool (representing constraint (1<=(aux1001 + aux1004 + aux1005)))
c Var 'aux2206' direct represents '0' with '-8218'
c Var 'aux2206' direct represents '1' with '8218'
c Var 'aux2206' order represents '1' with '1'
c Var 'aux2206' order represents '0' with '-8218'
c Encoding variable: aux2207 with domain: bool (representing constraint ((aux1007 + aux1010 + aux1011)<=1))
c Var 'aux2207' direct represents '0' with '-8219'
c Var 'aux2207' direct represents '1' with '8219'
c Var 'aux2207' order represents '1' with '1'
c Var 'aux2207' order represents '0' with '-8219'
c Encoding variable: aux2208 with domain: bool (representing constraint (1<=(aux1007 + aux1010 + aux1011)))
c Var 'aux2208' direct represents '0' with '-8220'
c Var 'aux2208' direct represents '1' with '8220'
c Var 'aux2208' order represents '1' with '1'
c Var 'aux2208' order represents '0' with '-8220'
c Encoding variable: aux2209 with domain: bool (representing constraint ((aux1013 + aux1016 + aux1017)<=1))
c Var 'aux2209' direct represents '0' with '-8221'
c Var 'aux2209' direct represents '1' with '8221'
c Var 'aux2209' order represents '1' with '1'
c Var 'aux2209' order represents '0' with '-8221'
c Encoding variable: aux2210 with domain: bool (representing constraint (1<=(aux1013 + aux1016 + aux1017)))
c Var 'aux2210' direct represents '0' with '-8222'
c Var 'aux2210' direct represents '1' with '8222'
c Var 'aux2210' order represents '1' with '1'
c Var 'aux2210' order represents '0' with '-8222'
c Encoding variable: aux2211 with domain: bool (representing constraint ((aux1019 + aux1022 + aux1023)<=1))
c Var 'aux2211' direct represents '0' with '-8223'
c Var 'aux2211' direct represents '1' with '8223'
c Var 'aux2211' order represents '1' with '1'
c Var 'aux2211' order represents '0' with '-8223'
c Encoding variable: aux2212 with domain: bool (representing constraint (1<=(aux1019 + aux1022 + aux1023)))
c Var 'aux2212' direct represents '0' with '-8224'
c Var 'aux2212' direct represents '1' with '8224'
c Var 'aux2212' order represents '1' with '1'
c Var 'aux2212' order represents '0' with '-8224'
c Encoding variable: aux2213 with domain: bool (representing constraint ((aux1025 + aux1028 + aux1029)<=1))
c Var 'aux2213' direct represents '0' with '-8225'
c Var 'aux2213' direct represents '1' with '8225'
c Var 'aux2213' order represents '1' with '1'
c Var 'aux2213' order represents '0' with '-8225'
c Encoding variable: aux2214 with domain: bool (representing constraint (1<=(aux1025 + aux1028 + aux1029)))
c Var 'aux2214' direct represents '0' with '-8226'
c Var 'aux2214' direct represents '1' with '8226'
c Var 'aux2214' order represents '1' with '1'
c Var 'aux2214' order represents '0' with '-8226'
c Encoding variable: aux2215 with domain: bool (representing constraint ((aux1031 + aux1034 + aux1035)<=1))
c Var 'aux2215' direct represents '0' with '-8227'
c Var 'aux2215' direct represents '1' with '8227'
c Var 'aux2215' order represents '1' with '1'
c Var 'aux2215' order represents '0' with '-8227'
c Encoding variable: aux2216 with domain: bool (representing constraint (1<=(aux1031 + aux1034 + aux1035)))
c Var 'aux2216' direct represents '0' with '-8228'
c Var 'aux2216' direct represents '1' with '8228'
c Var 'aux2216' order represents '1' with '1'
c Var 'aux2216' order represents '0' with '-8228'
c Encoding variable: aux2217 with domain: bool (representing constraint ((aux1037 + aux1040 + aux1041)<=1))
c Var 'aux2217' direct represents '0' with '-8229'
c Var 'aux2217' direct represents '1' with '8229'
c Var 'aux2217' order represents '1' with '1'
c Var 'aux2217' order represents '0' with '-8229'
c Encoding variable: aux2218 with domain: bool (representing constraint (1<=(aux1037 + aux1040 + aux1041)))
c Var 'aux2218' direct represents '0' with '-8230'
c Var 'aux2218' direct represents '1' with '8230'
c Var 'aux2218' order represents '1' with '1'
c Var 'aux2218' order represents '0' with '-8230'
c Encoding variable: aux2219 with domain: bool (representing constraint ((aux1043 + aux1046 + aux1047)<=1))
c Var 'aux2219' direct represents '0' with '-8231'
c Var 'aux2219' direct represents '1' with '8231'
c Var 'aux2219' order represents '1' with '1'
c Var 'aux2219' order represents '0' with '-8231'
c Encoding variable: aux2220 with domain: bool (representing constraint (1<=(aux1043 + aux1046 + aux1047)))
c Var 'aux2220' direct represents '0' with '-8232'
c Var 'aux2220' direct represents '1' with '8232'
c Var 'aux2220' order represents '1' with '1'
c Var 'aux2220' order represents '0' with '-8232'
c Encoding variable: aux2221 with domain: bool (representing constraint ((aux1049 + aux1052 + aux1053)<=1))
c Var 'aux2221' direct represents '0' with '-8233'
c Var 'aux2221' direct represents '1' with '8233'
c Var 'aux2221' order represents '1' with '1'
c Var 'aux2221' order represents '0' with '-8233'
c Encoding variable: aux2222 with domain: bool (representing constraint (1<=(aux1049 + aux1052 + aux1053)))
c Var 'aux2222' direct represents '0' with '-8234'
c Var 'aux2222' direct represents '1' with '8234'
c Var 'aux2222' order represents '1' with '1'
c Var 'aux2222' order represents '0' with '-8234'
c Encoding variable: aux2223 with domain: bool (representing constraint ((aux1055 + aux1058 + aux1059)<=1))
c Var 'aux2223' direct represents '0' with '-8235'
c Var 'aux2223' direct represents '1' with '8235'
c Var 'aux2223' order represents '1' with '1'
c Var 'aux2223' order represents '0' with '-8235'
c Encoding variable: aux2224 with domain: bool (representing constraint (1<=(aux1055 + aux1058 + aux1059)))
c Var 'aux2224' direct represents '0' with '-8236'
c Var 'aux2224' direct represents '1' with '8236'
c Var 'aux2224' order represents '1' with '1'
c Var 'aux2224' order represents '0' with '-8236'
c Encoding variable: aux2225 with domain: bool (representing constraint ((aux1061 + aux1064 + aux1065)<=1))
c Var 'aux2225' direct represents '0' with '-8237'
c Var 'aux2225' direct represents '1' with '8237'
c Var 'aux2225' order represents '1' with '1'
c Var 'aux2225' order represents '0' with '-8237'
c Encoding variable: aux2226 with domain: bool (representing constraint (1<=(aux1061 + aux1064 + aux1065)))
c Var 'aux2226' direct represents '0' with '-8238'
c Var 'aux2226' direct represents '1' with '8238'
c Var 'aux2226' order represents '1' with '1'
c Var 'aux2226' order represents '0' with '-8238'
c Encoding variable: aux2227 with domain: bool (representing constraint ((aux1067 + aux1070 + aux1071)<=1))
c Var 'aux2227' direct represents '0' with '-8239'
c Var 'aux2227' direct represents '1' with '8239'
c Var 'aux2227' order represents '1' with '1'
c Var 'aux2227' order represents '0' with '-8239'
c Encoding variable: aux2228 with domain: bool (representing constraint (1<=(aux1067 + aux1070 + aux1071)))
c Var 'aux2228' direct represents '0' with '-8240'
c Var 'aux2228' direct represents '1' with '8240'
c Var 'aux2228' order represents '1' with '1'
c Var 'aux2228' order represents '0' with '-8240'
c Encoding variable: aux2229 with domain: bool (representing constraint ((aux1073 + aux1076 + aux1077)<=1))
c Var 'aux2229' direct represents '0' with '-8241'
c Var 'aux2229' direct represents '1' with '8241'
c Var 'aux2229' order represents '1' with '1'
c Var 'aux2229' order represents '0' with '-8241'
c Encoding variable: aux2230 with domain: bool (representing constraint (1<=(aux1073 + aux1076 + aux1077)))
c Var 'aux2230' direct represents '0' with '-8242'
c Var 'aux2230' direct represents '1' with '8242'
c Var 'aux2230' order represents '1' with '1'
c Var 'aux2230' order represents '0' with '-8242'
c Encoding variable: aux2231 with domain: bool (representing constraint ((aux1079 + aux1082 + aux1083)<=1))
c Var 'aux2231' direct represents '0' with '-8243'
c Var 'aux2231' direct represents '1' with '8243'
c Var 'aux2231' order represents '1' with '1'
c Var 'aux2231' order represents '0' with '-8243'
c Encoding variable: aux2232 with domain: bool (representing constraint (1<=(aux1079 + aux1082 + aux1083)))
c Var 'aux2232' direct represents '0' with '-8244'
c Var 'aux2232' direct represents '1' with '8244'
c Var 'aux2232' order represents '1' with '1'
c Var 'aux2232' order represents '0' with '-8244'
c Encoding variable: aux2233 with domain: bool (representing constraint ((aux1085 + aux1088 + aux1089)<=1))
c Var 'aux2233' direct represents '0' with '-8245'
c Var 'aux2233' direct represents '1' with '8245'
c Var 'aux2233' order represents '1' with '1'
c Var 'aux2233' order represents '0' with '-8245'
c Encoding variable: aux2234 with domain: bool (representing constraint (1<=(aux1085 + aux1088 + aux1089)))
c Var 'aux2234' direct represents '0' with '-8246'
c Var 'aux2234' direct represents '1' with '8246'
c Var 'aux2234' order represents '1' with '1'
c Var 'aux2234' order represents '0' with '-8246'
c Encoding variable: aux2235 with domain: bool (representing constraint ((aux1091 + aux1094 + aux1095)<=1))
c Var 'aux2235' direct represents '0' with '-8247'
c Var 'aux2235' direct represents '1' with '8247'
c Var 'aux2235' order represents '1' with '1'
c Var 'aux2235' order represents '0' with '-8247'
c Encoding variable: aux2236 with domain: bool (representing constraint (1<=(aux1091 + aux1094 + aux1095)))
c Var 'aux2236' direct represents '0' with '-8248'
c Var 'aux2236' direct represents '1' with '8248'
c Var 'aux2236' order represents '1' with '1'
c Var 'aux2236' order represents '0' with '-8248'
c Encoding variable: aux2237 with domain: bool (representing constraint ((aux1097 + aux1100 + aux1101)<=1))
c Var 'aux2237' direct represents '0' with '-8249'
c Var 'aux2237' direct represents '1' with '8249'
c Var 'aux2237' order represents '1' with '1'
c Var 'aux2237' order represents '0' with '-8249'
c Encoding variable: aux2238 with domain: bool (representing constraint (1<=(aux1097 + aux1100 + aux1101)))
c Var 'aux2238' direct represents '0' with '-8250'
c Var 'aux2238' direct represents '1' with '8250'
c Var 'aux2238' order represents '1' with '1'
c Var 'aux2238' order represents '0' with '-8250'
c Encoding variable: aux2239 with domain: bool (representing constraint ((aux1103 + aux1106 + aux1107)<=1))
c Var 'aux2239' direct represents '0' with '-8251'
c Var 'aux2239' direct represents '1' with '8251'
c Var 'aux2239' order represents '1' with '1'
c Var 'aux2239' order represents '0' with '-8251'
c Encoding variable: aux2240 with domain: bool (representing constraint (1<=(aux1103 + aux1106 + aux1107)))
c Var 'aux2240' direct represents '0' with '-8252'
c Var 'aux2240' direct represents '1' with '8252'
c Var 'aux2240' order represents '1' with '1'
c Var 'aux2240' order represents '0' with '-8252'
c Encoding variable: aux2241 with domain: bool (representing constraint ((aux1109 + aux1112 + aux1113)<=1))
c Var 'aux2241' direct represents '0' with '-8253'
c Var 'aux2241' direct represents '1' with '8253'
c Var 'aux2241' order represents '1' with '1'
c Var 'aux2241' order represents '0' with '-8253'
c Encoding variable: aux2242 with domain: bool (representing constraint (1<=(aux1109 + aux1112 + aux1113)))
c Var 'aux2242' direct represents '0' with '-8254'
c Var 'aux2242' direct represents '1' with '8254'
c Var 'aux2242' order represents '1' with '1'
c Var 'aux2242' order represents '0' with '-8254'
c Encoding variable: aux2243 with domain: bool (representing constraint ((aux1115 + aux1118 + aux1119)<=1))
c Var 'aux2243' direct represents '0' with '-8255'
c Var 'aux2243' direct represents '1' with '8255'
c Var 'aux2243' order represents '1' with '1'
c Var 'aux2243' order represents '0' with '-8255'
c Encoding variable: aux2244 with domain: bool (representing constraint (1<=(aux1115 + aux1118 + aux1119)))
c Var 'aux2244' direct represents '0' with '-8256'
c Var 'aux2244' direct represents '1' with '8256'
c Var 'aux2244' order represents '1' with '1'
c Var 'aux2244' order represents '0' with '-8256'
c Encoding variable: aux2245 with domain: bool (representing constraint ((aux1121 + aux1124 + aux1125)<=1))
c Var 'aux2245' direct represents '0' with '-8257'
c Var 'aux2245' direct represents '1' with '8257'
c Var 'aux2245' order represents '1' with '1'
c Var 'aux2245' order represents '0' with '-8257'
c Encoding variable: aux2246 with domain: bool (representing constraint (1<=(aux1121 + aux1124 + aux1125)))
c Var 'aux2246' direct represents '0' with '-8258'
c Var 'aux2246' direct represents '1' with '8258'
c Var 'aux2246' order represents '1' with '1'
c Var 'aux2246' order represents '0' with '-8258'
c Encoding variable: aux2247 with domain: bool (representing constraint ((aux1127 + aux1130 + aux1131)<=1))
c Var 'aux2247' direct represents '0' with '-8259'
c Var 'aux2247' direct represents '1' with '8259'
c Var 'aux2247' order represents '1' with '1'
c Var 'aux2247' order represents '0' with '-8259'
c Encoding variable: aux2248 with domain: bool (representing constraint (1<=(aux1127 + aux1130 + aux1131)))
c Var 'aux2248' direct represents '0' with '-8260'
c Var 'aux2248' direct represents '1' with '8260'
c Var 'aux2248' order represents '1' with '1'
c Var 'aux2248' order represents '0' with '-8260'
c Encoding variable: aux2249 with domain: bool (representing constraint ((aux1133 + aux1136 + aux1137)<=1))
c Var 'aux2249' direct represents '0' with '-8261'
c Var 'aux2249' direct represents '1' with '8261'
c Var 'aux2249' order represents '1' with '1'
c Var 'aux2249' order represents '0' with '-8261'
c Encoding variable: aux2250 with domain: bool (representing constraint (1<=(aux1133 + aux1136 + aux1137)))
c Var 'aux2250' direct represents '0' with '-8262'
c Var 'aux2250' direct represents '1' with '8262'
c Var 'aux2250' order represents '1' with '1'
c Var 'aux2250' order represents '0' with '-8262'
c Encoding variable: aux2251 with domain: bool (representing constraint ((aux1139 + aux1142 + aux1143)<=1))
c Var 'aux2251' direct represents '0' with '-8263'
c Var 'aux2251' direct represents '1' with '8263'
c Var 'aux2251' order represents '1' with '1'
c Var 'aux2251' order represents '0' with '-8263'
c Encoding variable: aux2252 with domain: bool (representing constraint (1<=(aux1139 + aux1142 + aux1143)))
c Var 'aux2252' direct represents '0' with '-8264'
c Var 'aux2252' direct represents '1' with '8264'
c Var 'aux2252' order represents '1' with '1'
c Var 'aux2252' order represents '0' with '-8264'
c Encoding variable: aux2253 with domain: bool (representing constraint ((aux1145 + aux1148 + aux1149)<=1))
c Var 'aux2253' direct represents '0' with '-8265'
c Var 'aux2253' direct represents '1' with '8265'
c Var 'aux2253' order represents '1' with '1'
c Var 'aux2253' order represents '0' with '-8265'
c Encoding variable: aux2254 with domain: bool (representing constraint (1<=(aux1145 + aux1148 + aux1149)))
c Var 'aux2254' direct represents '0' with '-8266'
c Var 'aux2254' direct represents '1' with '8266'
c Var 'aux2254' order represents '1' with '1'
c Var 'aux2254' order represents '0' with '-8266'
c Encoding variable: aux2255 with domain: bool (representing constraint ((aux1151 + aux1154 + aux1155)<=1))
c Var 'aux2255' direct represents '0' with '-8267'
c Var 'aux2255' direct represents '1' with '8267'
c Var 'aux2255' order represents '1' with '1'
c Var 'aux2255' order represents '0' with '-8267'
c Encoding variable: aux2256 with domain: bool (representing constraint (1<=(aux1151 + aux1154 + aux1155)))
c Var 'aux2256' direct represents '0' with '-8268'
c Var 'aux2256' direct represents '1' with '8268'
c Var 'aux2256' order represents '1' with '1'
c Var 'aux2256' order represents '0' with '-8268'
c Encoding variable: aux2257 with domain: bool (representing constraint ((aux1157 + aux1160 + aux1161)<=1))
c Var 'aux2257' direct represents '0' with '-8269'
c Var 'aux2257' direct represents '1' with '8269'
c Var 'aux2257' order represents '1' with '1'
c Var 'aux2257' order represents '0' with '-8269'
c Encoding variable: aux2258 with domain: bool (representing constraint (1<=(aux1157 + aux1160 + aux1161)))
c Var 'aux2258' direct represents '0' with '-8270'
c Var 'aux2258' direct represents '1' with '8270'
c Var 'aux2258' order represents '1' with '1'
c Var 'aux2258' order represents '0' with '-8270'
c Encoding variable: aux2259 with domain: bool (representing constraint ((aux1163 + aux1166 + aux1167)<=1))
c Var 'aux2259' direct represents '0' with '-8271'
c Var 'aux2259' direct represents '1' with '8271'
c Var 'aux2259' order represents '1' with '1'
c Var 'aux2259' order represents '0' with '-8271'
c Encoding variable: aux2260 with domain: bool (representing constraint (1<=(aux1163 + aux1166 + aux1167)))
c Var 'aux2260' direct represents '0' with '-8272'
c Var 'aux2260' direct represents '1' with '8272'
c Var 'aux2260' order represents '1' with '1'
c Var 'aux2260' order represents '0' with '-8272'
c Encoding variable: aux2261 with domain: bool (representing constraint ((aux1169 + aux1172 + aux1173)<=1))
c Var 'aux2261' direct represents '0' with '-8273'
c Var 'aux2261' direct represents '1' with '8273'
c Var 'aux2261' order represents '1' with '1'
c Var 'aux2261' order represents '0' with '-8273'
c Encoding variable: aux2262 with domain: bool (representing constraint (1<=(aux1169 + aux1172 + aux1173)))
c Var 'aux2262' direct represents '0' with '-8274'
c Var 'aux2262' direct represents '1' with '8274'
c Var 'aux2262' order represents '1' with '1'
c Var 'aux2262' order represents '0' with '-8274'
c Encoding variable: aux2263 with domain: bool (representing constraint ((aux1175 + aux1178 + aux1179)<=1))
c Var 'aux2263' direct represents '0' with '-8275'
c Var 'aux2263' direct represents '1' with '8275'
c Var 'aux2263' order represents '1' with '1'
c Var 'aux2263' order represents '0' with '-8275'
c Encoding variable: aux2264 with domain: bool (representing constraint (1<=(aux1175 + aux1178 + aux1179)))
c Var 'aux2264' direct represents '0' with '-8276'
c Var 'aux2264' direct represents '1' with '8276'
c Var 'aux2264' order represents '1' with '1'
c Var 'aux2264' order represents '0' with '-8276'
c Encoding variable: aux2265 with domain: bool (representing constraint ((aux1181 + aux1184 + aux1185)<=1))
c Var 'aux2265' direct represents '0' with '-8277'
c Var 'aux2265' direct represents '1' with '8277'
c Var 'aux2265' order represents '1' with '1'
c Var 'aux2265' order represents '0' with '-8277'
c Encoding variable: aux2266 with domain: bool (representing constraint (1<=(aux1181 + aux1184 + aux1185)))
c Var 'aux2266' direct represents '0' with '-8278'
c Var 'aux2266' direct represents '1' with '8278'
c Var 'aux2266' order represents '1' with '1'
c Var 'aux2266' order represents '0' with '-8278'
c Encoding variable: aux2267 with domain: bool (representing constraint ((aux1187 + aux1190 + aux1191)<=1))
c Var 'aux2267' direct represents '0' with '-8279'
c Var 'aux2267' direct represents '1' with '8279'
c Var 'aux2267' order represents '1' with '1'
c Var 'aux2267' order represents '0' with '-8279'
c Encoding variable: aux2268 with domain: bool (representing constraint (1<=(aux1187 + aux1190 + aux1191)))
c Var 'aux2268' direct represents '0' with '-8280'
c Var 'aux2268' direct represents '1' with '8280'
c Var 'aux2268' order represents '1' with '1'
c Var 'aux2268' order represents '0' with '-8280'
c Encoding variable: aux2269 with domain: bool (representing constraint ((aux1193 + aux1196 + aux1197)<=1))
c Var 'aux2269' direct represents '0' with '-8281'
c Var 'aux2269' direct represents '1' with '8281'
c Var 'aux2269' order represents '1' with '1'
c Var 'aux2269' order represents '0' with '-8281'
c Encoding variable: aux2270 with domain: bool (representing constraint (1<=(aux1193 + aux1196 + aux1197)))
c Var 'aux2270' direct represents '0' with '-8282'
c Var 'aux2270' direct represents '1' with '8282'
c Var 'aux2270' order represents '1' with '1'
c Var 'aux2270' order represents '0' with '-8282'
c Encoding variable: aux2271 with domain: bool (representing constraint ((aux1199 + aux1202 + aux1203)<=1))
c Var 'aux2271' direct represents '0' with '-8283'
c Var 'aux2271' direct represents '1' with '8283'
c Var 'aux2271' order represents '1' with '1'
c Var 'aux2271' order represents '0' with '-8283'
c Encoding variable: aux2272 with domain: bool (representing constraint (1<=(aux1199 + aux1202 + aux1203)))
c Var 'aux2272' direct represents '0' with '-8284'
c Var 'aux2272' direct represents '1' with '8284'
c Var 'aux2272' order represents '1' with '1'
c Var 'aux2272' order represents '0' with '-8284'
c Encoding variable: aux2273 with domain: bool (representing constraint ((aux1205 + aux1208 + aux1209)<=1))
c Var 'aux2273' direct represents '0' with '-8285'
c Var 'aux2273' direct represents '1' with '8285'
c Var 'aux2273' order represents '1' with '1'
c Var 'aux2273' order represents '0' with '-8285'
c Encoding variable: aux2274 with domain: bool (representing constraint (1<=(aux1205 + aux1208 + aux1209)))
c Var 'aux2274' direct represents '0' with '-8286'
c Var 'aux2274' direct represents '1' with '8286'
c Var 'aux2274' order represents '1' with '1'
c Var 'aux2274' order represents '0' with '-8286'
c Encoding variable: aux2275 with domain: bool (representing constraint ((aux1211 + aux1214 + aux1215)<=1))
c Var 'aux2275' direct represents '0' with '-8287'
c Var 'aux2275' direct represents '1' with '8287'
c Var 'aux2275' order represents '1' with '1'
c Var 'aux2275' order represents '0' with '-8287'
c Encoding variable: aux2276 with domain: bool (representing constraint (1<=(aux1211 + aux1214 + aux1215)))
c Var 'aux2276' direct represents '0' with '-8288'
c Var 'aux2276' direct represents '1' with '8288'
c Var 'aux2276' order represents '1' with '1'
c Var 'aux2276' order represents '0' with '-8288'
c Encoding variable: aux2277 with domain: bool (representing constraint ((aux1217 + aux1220 + aux1221)<=1))
c Var 'aux2277' direct represents '0' with '-8289'
c Var 'aux2277' direct represents '1' with '8289'
c Var 'aux2277' order represents '1' with '1'
c Var 'aux2277' order represents '0' with '-8289'
c Encoding variable: aux2278 with domain: bool (representing constraint (1<=(aux1217 + aux1220 + aux1221)))
c Var 'aux2278' direct represents '0' with '-8290'
c Var 'aux2278' direct represents '1' with '8290'
c Var 'aux2278' order represents '1' with '1'
c Var 'aux2278' order represents '0' with '-8290'
c Encoding variable: aux2279 with domain: bool (representing constraint ((aux1223 + aux1226 + aux1227)<=1))
c Var 'aux2279' direct represents '0' with '-8291'
c Var 'aux2279' direct represents '1' with '8291'
c Var 'aux2279' order represents '1' with '1'
c Var 'aux2279' order represents '0' with '-8291'
c Encoding variable: aux2280 with domain: bool (representing constraint (1<=(aux1223 + aux1226 + aux1227)))
c Var 'aux2280' direct represents '0' with '-8292'
c Var 'aux2280' direct represents '1' with '8292'
c Var 'aux2280' order represents '1' with '1'
c Var 'aux2280' order represents '0' with '-8292'
c Encoding variable: aux2281 with domain: bool (representing constraint ((aux1229 + aux1232 + aux1233)<=1))
c Var 'aux2281' direct represents '0' with '-8293'
c Var 'aux2281' direct represents '1' with '8293'
c Var 'aux2281' order represents '1' with '1'
c Var 'aux2281' order represents '0' with '-8293'
c Encoding variable: aux2282 with domain: bool (representing constraint (1<=(aux1229 + aux1232 + aux1233)))
c Var 'aux2282' direct represents '0' with '-8294'
c Var 'aux2282' direct represents '1' with '8294'
c Var 'aux2282' order represents '1' with '1'
c Var 'aux2282' order represents '0' with '-8294'
c Encoding variable: aux2283 with domain: bool (representing constraint ((aux1235 + aux1238 + aux1239)<=1))
c Var 'aux2283' direct represents '0' with '-8295'
c Var 'aux2283' direct represents '1' with '8295'
c Var 'aux2283' order represents '1' with '1'
c Var 'aux2283' order represents '0' with '-8295'
c Encoding variable: aux2284 with domain: bool (representing constraint (1<=(aux1235 + aux1238 + aux1239)))
c Var 'aux2284' direct represents '0' with '-8296'
c Var 'aux2284' direct represents '1' with '8296'
c Var 'aux2284' order represents '1' with '1'
c Var 'aux2284' order represents '0' with '-8296'
c Encoding variable: aux2285 with domain: bool (representing constraint ((aux1241 + aux1244 + aux1245)<=1))
c Var 'aux2285' direct represents '0' with '-8297'
c Var 'aux2285' direct represents '1' with '8297'
c Var 'aux2285' order represents '1' with '1'
c Var 'aux2285' order represents '0' with '-8297'
c Encoding variable: aux2286 with domain: bool (representing constraint (1<=(aux1241 + aux1244 + aux1245)))
c Var 'aux2286' direct represents '0' with '-8298'
c Var 'aux2286' direct represents '1' with '8298'
c Var 'aux2286' order represents '1' with '1'
c Var 'aux2286' order represents '0' with '-8298'
c Encoding variable: aux2287 with domain: bool (representing constraint ((aux1247 + aux1250 + aux1251)<=1))
c Var 'aux2287' direct represents '0' with '-8299'
c Var 'aux2287' direct represents '1' with '8299'
c Var 'aux2287' order represents '1' with '1'
c Var 'aux2287' order represents '0' with '-8299'
c Encoding variable: aux2288 with domain: bool (representing constraint (1<=(aux1247 + aux1250 + aux1251)))
c Var 'aux2288' direct represents '0' with '-8300'
c Var 'aux2288' direct represents '1' with '8300'
c Var 'aux2288' order represents '1' with '1'
c Var 'aux2288' order represents '0' with '-8300'
c Encoding variable: aux2289 with domain: bool (representing constraint ((aux1253 + aux1256 + aux1257)<=1))
c Var 'aux2289' direct represents '0' with '-8301'
c Var 'aux2289' direct represents '1' with '8301'
c Var 'aux2289' order represents '1' with '1'
c Var 'aux2289' order represents '0' with '-8301'
c Encoding variable: aux2290 with domain: bool (representing constraint (1<=(aux1253 + aux1256 + aux1257)))
c Var 'aux2290' direct represents '0' with '-8302'
c Var 'aux2290' direct represents '1' with '8302'
c Var 'aux2290' order represents '1' with '1'
c Var 'aux2290' order represents '0' with '-8302'
c Encoding variable: aux2291 with domain: bool (representing constraint ((aux1259 + aux1262 + aux1263)<=1))
c Var 'aux2291' direct represents '0' with '-8303'
c Var 'aux2291' direct represents '1' with '8303'
c Var 'aux2291' order represents '1' with '1'
c Var 'aux2291' order represents '0' with '-8303'
c Encoding variable: aux2292 with domain: bool (representing constraint (1<=(aux1259 + aux1262 + aux1263)))
c Var 'aux2292' direct represents '0' with '-8304'
c Var 'aux2292' direct represents '1' with '8304'
c Var 'aux2292' order represents '1' with '1'
c Var 'aux2292' order represents '0' with '-8304'
c Encoding variable: aux2293 with domain: bool (representing constraint ((aux1265 + aux1268 + aux1269)<=1))
c Var 'aux2293' direct represents '0' with '-8305'
c Var 'aux2293' direct represents '1' with '8305'
c Var 'aux2293' order represents '1' with '1'
c Var 'aux2293' order represents '0' with '-8305'
c Encoding variable: aux2294 with domain: bool (representing constraint (1<=(aux1265 + aux1268 + aux1269)))
c Var 'aux2294' direct represents '0' with '-8306'
c Var 'aux2294' direct represents '1' with '8306'
c Var 'aux2294' order represents '1' with '1'
c Var 'aux2294' order represents '0' with '-8306'
c Encoding variable: aux2295 with domain: bool (representing constraint ((aux1271 + aux1274 + aux1275)<=1))
c Var 'aux2295' direct represents '0' with '-8307'
c Var 'aux2295' direct represents '1' with '8307'
c Var 'aux2295' order represents '1' with '1'
c Var 'aux2295' order represents '0' with '-8307'
c Encoding variable: aux2296 with domain: bool (representing constraint (1<=(aux1271 + aux1274 + aux1275)))
c Var 'aux2296' direct represents '0' with '-8308'
c Var 'aux2296' direct represents '1' with '8308'
c Var 'aux2296' order represents '1' with '1'
c Var 'aux2296' order represents '0' with '-8308'
c Encoding variable: aux2297 with domain: bool (representing constraint ((aux1277 + aux1280 + aux1281)<=1))
c Var 'aux2297' direct represents '0' with '-8309'
c Var 'aux2297' direct represents '1' with '8309'
c Var 'aux2297' order represents '1' with '1'
c Var 'aux2297' order represents '0' with '-8309'
c Encoding variable: aux2298 with domain: bool (representing constraint (1<=(aux1277 + aux1280 + aux1281)))
c Var 'aux2298' direct represents '0' with '-8310'
c Var 'aux2298' direct represents '1' with '8310'
c Var 'aux2298' order represents '1' with '1'
c Var 'aux2298' order represents '0' with '-8310'
c Encoding variable: aux2299 with domain: bool (representing constraint ((aux1283 + aux1286 + aux1287)<=1))
c Var 'aux2299' direct represents '0' with '-8311'
c Var 'aux2299' direct represents '1' with '8311'
c Var 'aux2299' order represents '1' with '1'
c Var 'aux2299' order represents '0' with '-8311'
c Encoding variable: aux2300 with domain: bool (representing constraint (1<=(aux1283 + aux1286 + aux1287)))
c Var 'aux2300' direct represents '0' with '-8312'
c Var 'aux2300' direct represents '1' with '8312'
c Var 'aux2300' order represents '1' with '1'
c Var 'aux2300' order represents '0' with '-8312'
c Encoding variable: aux2301 with domain: bool (representing constraint ((aux1289 + aux1292 + aux1293)<=1))
c Var 'aux2301' direct represents '0' with '-8313'
c Var 'aux2301' direct represents '1' with '8313'
c Var 'aux2301' order represents '1' with '1'
c Var 'aux2301' order represents '0' with '-8313'
c Encoding variable: aux2302 with domain: bool (representing constraint (1<=(aux1289 + aux1292 + aux1293)))
c Var 'aux2302' direct represents '0' with '-8314'
c Var 'aux2302' direct represents '1' with '8314'
c Var 'aux2302' order represents '1' with '1'
c Var 'aux2302' order represents '0' with '-8314'
c Encoding variable: aux2303 with domain: bool (representing constraint ((aux1295 + aux1298 + aux1299)<=1))
c Var 'aux2303' direct represents '0' with '-8315'
c Var 'aux2303' direct represents '1' with '8315'
c Var 'aux2303' order represents '1' with '1'
c Var 'aux2303' order represents '0' with '-8315'
c Encoding variable: aux2304 with domain: bool (representing constraint (1<=(aux1295 + aux1298 + aux1299)))
c Var 'aux2304' direct represents '0' with '-8316'
c Var 'aux2304' direct represents '1' with '8316'
c Var 'aux2304' order represents '1' with '1'
c Var 'aux2304' order represents '0' with '-8316'
c Encoding variable: aux2305 with domain: bool (representing constraint ((aux1301 + aux1304 + aux1305)<=1))
c Var 'aux2305' direct represents '0' with '-8317'
c Var 'aux2305' direct represents '1' with '8317'
c Var 'aux2305' order represents '1' with '1'
c Var 'aux2305' order represents '0' with '-8317'
c Encoding variable: aux2306 with domain: bool (representing constraint (1<=(aux1301 + aux1304 + aux1305)))
c Var 'aux2306' direct represents '0' with '-8318'
c Var 'aux2306' direct represents '1' with '8318'
c Var 'aux2306' order represents '1' with '1'
c Var 'aux2306' order represents '0' with '-8318'
c Encoding variable: aux2307 with domain: bool (representing constraint ((aux1307 + aux1310 + aux1311)<=1))
c Var 'aux2307' direct represents '0' with '-8319'
c Var 'aux2307' direct represents '1' with '8319'
c Var 'aux2307' order represents '1' with '1'
c Var 'aux2307' order represents '0' with '-8319'
c Encoding variable: aux2308 with domain: bool (representing constraint (1<=(aux1307 + aux1310 + aux1311)))
c Var 'aux2308' direct represents '0' with '-8320'
c Var 'aux2308' direct represents '1' with '8320'
c Var 'aux2308' order represents '1' with '1'
c Var 'aux2308' order represents '0' with '-8320'
c Encoding variable: aux2309 with domain: bool (representing constraint ((aux1313 + aux1316 + aux1317)<=1))
c Var 'aux2309' direct represents '0' with '-8321'
c Var 'aux2309' direct represents '1' with '8321'
c Var 'aux2309' order represents '1' with '1'
c Var 'aux2309' order represents '0' with '-8321'
c Encoding variable: aux2310 with domain: bool (representing constraint (1<=(aux1313 + aux1316 + aux1317)))
c Var 'aux2310' direct represents '0' with '-8322'
c Var 'aux2310' direct represents '1' with '8322'
c Var 'aux2310' order represents '1' with '1'
c Var 'aux2310' order represents '0' with '-8322'
c Encoding variable: aux2311 with domain: bool (representing constraint ((aux1319 + aux1322 + aux1323)<=1))
c Var 'aux2311' direct represents '0' with '-8323'
c Var 'aux2311' direct represents '1' with '8323'
c Var 'aux2311' order represents '1' with '1'
c Var 'aux2311' order represents '0' with '-8323'
c Encoding variable: aux2312 with domain: bool (representing constraint (1<=(aux1319 + aux1322 + aux1323)))
c Var 'aux2312' direct represents '0' with '-8324'
c Var 'aux2312' direct represents '1' with '8324'
c Var 'aux2312' order represents '1' with '1'
c Var 'aux2312' order represents '0' with '-8324'
c Encoding variable: aux2313 with domain: bool (representing constraint ((aux1325 + aux1328 + aux1329)<=1))
c Var 'aux2313' direct represents '0' with '-8325'
c Var 'aux2313' direct represents '1' with '8325'
c Var 'aux2313' order represents '1' with '1'
c Var 'aux2313' order represents '0' with '-8325'
c Encoding variable: aux2314 with domain: bool (representing constraint (1<=(aux1325 + aux1328 + aux1329)))
c Var 'aux2314' direct represents '0' with '-8326'
c Var 'aux2314' direct represents '1' with '8326'
c Var 'aux2314' order represents '1' with '1'
c Var 'aux2314' order represents '0' with '-8326'
c Encoding variable: aux2315 with domain: bool (representing constraint ((aux1331 + aux1334 + aux1335)<=1))
c Var 'aux2315' direct represents '0' with '-8327'
c Var 'aux2315' direct represents '1' with '8327'
c Var 'aux2315' order represents '1' with '1'
c Var 'aux2315' order represents '0' with '-8327'
c Encoding variable: aux2316 with domain: bool (representing constraint (1<=(aux1331 + aux1334 + aux1335)))
c Var 'aux2316' direct represents '0' with '-8328'
c Var 'aux2316' direct represents '1' with '8328'
c Var 'aux2316' order represents '1' with '1'
c Var 'aux2316' order represents '0' with '-8328'
c Encoding variable: aux2317 with domain: bool (representing constraint ((aux1337 + aux1340 + aux1341)<=1))
c Var 'aux2317' direct represents '0' with '-8329'
c Var 'aux2317' direct represents '1' with '8329'
c Var 'aux2317' order represents '1' with '1'
c Var 'aux2317' order represents '0' with '-8329'
c Encoding variable: aux2318 with domain: bool (representing constraint (1<=(aux1337 + aux1340 + aux1341)))
c Var 'aux2318' direct represents '0' with '-8330'
c Var 'aux2318' direct represents '1' with '8330'
c Var 'aux2318' order represents '1' with '1'
c Var 'aux2318' order represents '0' with '-8330'
c Encoding variable: aux2319 with domain: bool (representing constraint ((aux1343 + aux1346 + aux1347)<=1))
c Var 'aux2319' direct represents '0' with '-8331'
c Var 'aux2319' direct represents '1' with '8331'
c Var 'aux2319' order represents '1' with '1'
c Var 'aux2319' order represents '0' with '-8331'
c Encoding variable: aux2320 with domain: bool (representing constraint (1<=(aux1343 + aux1346 + aux1347)))
c Var 'aux2320' direct represents '0' with '-8332'
c Var 'aux2320' direct represents '1' with '8332'
c Var 'aux2320' order represents '1' with '1'
c Var 'aux2320' order represents '0' with '-8332'
c Encoding variable: aux2321 with domain: bool (representing constraint ((aux1349 + aux1352 + aux1353)<=1))
c Var 'aux2321' direct represents '0' with '-8333'
c Var 'aux2321' direct represents '1' with '8333'
c Var 'aux2321' order represents '1' with '1'
c Var 'aux2321' order represents '0' with '-8333'
c Encoding variable: aux2322 with domain: bool (representing constraint (1<=(aux1349 + aux1352 + aux1353)))
c Var 'aux2322' direct represents '0' with '-8334'
c Var 'aux2322' direct represents '1' with '8334'
c Var 'aux2322' order represents '1' with '1'
c Var 'aux2322' order represents '0' with '-8334'
c Encoding variable: aux2323 with domain: bool (representing constraint ((aux1355 + aux1358 + aux1359)<=1))
c Var 'aux2323' direct represents '0' with '-8335'
c Var 'aux2323' direct represents '1' with '8335'
c Var 'aux2323' order represents '1' with '1'
c Var 'aux2323' order represents '0' with '-8335'
c Encoding variable: aux2324 with domain: bool (representing constraint (1<=(aux1355 + aux1358 + aux1359)))
c Var 'aux2324' direct represents '0' with '-8336'
c Var 'aux2324' direct represents '1' with '8336'
c Var 'aux2324' order represents '1' with '1'
c Var 'aux2324' order represents '0' with '-8336'
c Encoding variable: aux2325 with domain: bool (representing constraint ((aux1361 + aux1364 + aux1365)<=1))
c Var 'aux2325' direct represents '0' with '-8337'
c Var 'aux2325' direct represents '1' with '8337'
c Var 'aux2325' order represents '1' with '1'
c Var 'aux2325' order represents '0' with '-8337'
c Encoding variable: aux2326 with domain: bool (representing constraint (1<=(aux1361 + aux1364 + aux1365)))
c Var 'aux2326' direct represents '0' with '-8338'
c Var 'aux2326' direct represents '1' with '8338'
c Var 'aux2326' order represents '1' with '1'
c Var 'aux2326' order represents '0' with '-8338'
c Encoding variable: aux2327 with domain: bool (representing constraint ((aux1367 + aux1370 + aux1371)<=1))
c Var 'aux2327' direct represents '0' with '-8339'
c Var 'aux2327' direct represents '1' with '8339'
c Var 'aux2327' order represents '1' with '1'
c Var 'aux2327' order represents '0' with '-8339'
c Encoding variable: aux2328 with domain: bool (representing constraint (1<=(aux1367 + aux1370 + aux1371)))
c Var 'aux2328' direct represents '0' with '-8340'
c Var 'aux2328' direct represents '1' with '8340'
c Var 'aux2328' order represents '1' with '1'
c Var 'aux2328' order represents '0' with '-8340'
c Encoding variable: aux2329 with domain: bool (representing constraint ((aux1373 + aux1376 + aux1377)<=1))
c Var 'aux2329' direct represents '0' with '-8341'
c Var 'aux2329' direct represents '1' with '8341'
c Var 'aux2329' order represents '1' with '1'
c Var 'aux2329' order represents '0' with '-8341'
c Encoding variable: aux2330 with domain: bool (representing constraint (1<=(aux1373 + aux1376 + aux1377)))
c Var 'aux2330' direct represents '0' with '-8342'
c Var 'aux2330' direct represents '1' with '8342'
c Var 'aux2330' order represents '1' with '1'
c Var 'aux2330' order represents '0' with '-8342'
c Encoding variable: aux2331 with domain: bool (representing constraint ((aux1379 + aux1382 + aux1383)<=1))
c Var 'aux2331' direct represents '0' with '-8343'
c Var 'aux2331' direct represents '1' with '8343'
c Var 'aux2331' order represents '1' with '1'
c Var 'aux2331' order represents '0' with '-8343'
c Encoding variable: aux2332 with domain: bool (representing constraint (1<=(aux1379 + aux1382 + aux1383)))
c Var 'aux2332' direct represents '0' with '-8344'
c Var 'aux2332' direct represents '1' with '8344'
c Var 'aux2332' order represents '1' with '1'
c Var 'aux2332' order represents '0' with '-8344'
c Encoding variable: aux2333 with domain: bool (representing constraint ((aux1385 + aux1388 + aux1389)<=1))
c Var 'aux2333' direct represents '0' with '-8345'
c Var 'aux2333' direct represents '1' with '8345'
c Var 'aux2333' order represents '1' with '1'
c Var 'aux2333' order represents '0' with '-8345'
c Encoding variable: aux2334 with domain: bool (representing constraint (1<=(aux1385 + aux1388 + aux1389)))
c Var 'aux2334' direct represents '0' with '-8346'
c Var 'aux2334' direct represents '1' with '8346'
c Var 'aux2334' order represents '1' with '1'
c Var 'aux2334' order represents '0' with '-8346'
c Encoding variable: aux2335 with domain: bool (representing constraint ((aux1391 + aux1394 + aux1395)<=1))
c Var 'aux2335' direct represents '0' with '-8347'
c Var 'aux2335' direct represents '1' with '8347'
c Var 'aux2335' order represents '1' with '1'
c Var 'aux2335' order represents '0' with '-8347'
c Encoding variable: aux2336 with domain: bool (representing constraint (1<=(aux1391 + aux1394 + aux1395)))
c Var 'aux2336' direct represents '0' with '-8348'
c Var 'aux2336' direct represents '1' with '8348'
c Var 'aux2336' order represents '1' with '1'
c Var 'aux2336' order represents '0' with '-8348'
c Encoding variable: aux2337 with domain: bool (representing constraint ((aux1397 + aux1400 + aux1401)<=1))
c Var 'aux2337' direct represents '0' with '-8349'
c Var 'aux2337' direct represents '1' with '8349'
c Var 'aux2337' order represents '1' with '1'
c Var 'aux2337' order represents '0' with '-8349'
c Encoding variable: aux2338 with domain: bool (representing constraint (1<=(aux1397 + aux1400 + aux1401)))
c Var 'aux2338' direct represents '0' with '-8350'
c Var 'aux2338' direct represents '1' with '8350'
c Var 'aux2338' order represents '1' with '1'
c Var 'aux2338' order represents '0' with '-8350'
c Encoding variable: aux2339 with domain: bool (representing constraint ((aux1403 + aux1406 + aux1407)<=1))
c Var 'aux2339' direct represents '0' with '-8351'
c Var 'aux2339' direct represents '1' with '8351'
c Var 'aux2339' order represents '1' with '1'
c Var 'aux2339' order represents '0' with '-8351'
c Encoding variable: aux2340 with domain: bool (representing constraint (1<=(aux1403 + aux1406 + aux1407)))
c Var 'aux2340' direct represents '0' with '-8352'
c Var 'aux2340' direct represents '1' with '8352'
c Var 'aux2340' order represents '1' with '1'
c Var 'aux2340' order represents '0' with '-8352'
c Encoding variable: aux2341 with domain: bool (representing constraint ((aux1409 + aux1412 + aux1413)<=1))
c Var 'aux2341' direct represents '0' with '-8353'
c Var 'aux2341' direct represents '1' with '8353'
c Var 'aux2341' order represents '1' with '1'
c Var 'aux2341' order represents '0' with '-8353'
c Encoding variable: aux2342 with domain: bool (representing constraint (1<=(aux1409 + aux1412 + aux1413)))
c Var 'aux2342' direct represents '0' with '-8354'
c Var 'aux2342' direct represents '1' with '8354'
c Var 'aux2342' order represents '1' with '1'
c Var 'aux2342' order represents '0' with '-8354'
c Encoding variable: aux2343 with domain: bool (representing constraint ((aux1415 + aux1418 + aux1419)<=1))
c Var 'aux2343' direct represents '0' with '-8355'
c Var 'aux2343' direct represents '1' with '8355'
c Var 'aux2343' order represents '1' with '1'
c Var 'aux2343' order represents '0' with '-8355'
c Encoding variable: aux2344 with domain: bool (representing constraint (1<=(aux1415 + aux1418 + aux1419)))
c Var 'aux2344' direct represents '0' with '-8356'
c Var 'aux2344' direct represents '1' with '8356'
c Var 'aux2344' order represents '1' with '1'
c Var 'aux2344' order represents '0' with '-8356'
c Encoding variable: aux2345 with domain: bool (representing constraint ((aux1421 + aux1424 + aux1425)<=1))
c Var 'aux2345' direct represents '0' with '-8357'
c Var 'aux2345' direct represents '1' with '8357'
c Var 'aux2345' order represents '1' with '1'
c Var 'aux2345' order represents '0' with '-8357'
c Encoding variable: aux2346 with domain: bool (representing constraint (1<=(aux1421 + aux1424 + aux1425)))
c Var 'aux2346' direct represents '0' with '-8358'
c Var 'aux2346' direct represents '1' with '8358'
c Var 'aux2346' order represents '1' with '1'
c Var 'aux2346' order represents '0' with '-8358'
c Encoding variable: aux2347 with domain: bool (representing constraint ((aux1427 + aux1430 + aux1431)<=1))
c Var 'aux2347' direct represents '0' with '-8359'
c Var 'aux2347' direct represents '1' with '8359'
c Var 'aux2347' order represents '1' with '1'
c Var 'aux2347' order represents '0' with '-8359'
c Encoding variable: aux2348 with domain: bool (representing constraint (1<=(aux1427 + aux1430 + aux1431)))
c Var 'aux2348' direct represents '0' with '-8360'
c Var 'aux2348' direct represents '1' with '8360'
c Var 'aux2348' order represents '1' with '1'
c Var 'aux2348' order represents '0' with '-8360'
c Encoding variable: aux2349 with domain: bool (representing constraint ((aux1433 + aux1436 + aux1437)<=1))
c Var 'aux2349' direct represents '0' with '-8361'
c Var 'aux2349' direct represents '1' with '8361'
c Var 'aux2349' order represents '1' with '1'
c Var 'aux2349' order represents '0' with '-8361'
c Encoding variable: aux2350 with domain: bool (representing constraint (1<=(aux1433 + aux1436 + aux1437)))
c Var 'aux2350' direct represents '0' with '-8362'
c Var 'aux2350' direct represents '1' with '8362'
c Var 'aux2350' order represents '1' with '1'
c Var 'aux2350' order represents '0' with '-8362'
c Encoding variable: aux2351 with domain: bool (representing constraint ((aux1439 + aux1442 + aux1443)<=1))
c Var 'aux2351' direct represents '0' with '-8363'
c Var 'aux2351' direct represents '1' with '8363'
c Var 'aux2351' order represents '1' with '1'
c Var 'aux2351' order represents '0' with '-8363'
c Encoding variable: aux2352 with domain: bool (representing constraint (1<=(aux1439 + aux1442 + aux1443)))
c Var 'aux2352' direct represents '0' with '-8364'
c Var 'aux2352' direct represents '1' with '8364'
c Var 'aux2352' order represents '1' with '1'
c Var 'aux2352' order represents '0' with '-8364'
c Encoding variable: aux2353 with domain: bool (representing constraint ((aux1445 + aux1448 + aux1449)<=1))
c Var 'aux2353' direct represents '0' with '-8365'
c Var 'aux2353' direct represents '1' with '8365'
c Var 'aux2353' order represents '1' with '1'
c Var 'aux2353' order represents '0' with '-8365'
c Encoding variable: aux2354 with domain: bool (representing constraint (1<=(aux1445 + aux1448 + aux1449)))
c Var 'aux2354' direct represents '0' with '-8366'
c Var 'aux2354' direct represents '1' with '8366'
c Var 'aux2354' order represents '1' with '1'
c Var 'aux2354' order represents '0' with '-8366'
c Encoding variable: aux2355 with domain: bool (representing constraint ((aux1451 + aux1454 + aux1455)<=1))
c Var 'aux2355' direct represents '0' with '-8367'
c Var 'aux2355' direct represents '1' with '8367'
c Var 'aux2355' order represents '1' with '1'
c Var 'aux2355' order represents '0' with '-8367'
c Encoding variable: aux2356 with domain: bool (representing constraint (1<=(aux1451 + aux1454 + aux1455)))
c Var 'aux2356' direct represents '0' with '-8368'
c Var 'aux2356' direct represents '1' with '8368'
c Var 'aux2356' order represents '1' with '1'
c Var 'aux2356' order represents '0' with '-8368'
c Encoding variable: aux2357 with domain: bool (representing constraint ((aux1457 + aux1460 + aux1461)<=1))
c Var 'aux2357' direct represents '0' with '-8369'
c Var 'aux2357' direct represents '1' with '8369'
c Var 'aux2357' order represents '1' with '1'
c Var 'aux2357' order represents '0' with '-8369'
c Encoding variable: aux2358 with domain: bool (representing constraint (1<=(aux1457 + aux1460 + aux1461)))
c Var 'aux2358' direct represents '0' with '-8370'
c Var 'aux2358' direct represents '1' with '8370'
c Var 'aux2358' order represents '1' with '1'
c Var 'aux2358' order represents '0' with '-8370'
c Encoding variable: aux2359 with domain: bool (representing constraint ((aux1463 + aux1466 + aux1467)<=1))
c Var 'aux2359' direct represents '0' with '-8371'
c Var 'aux2359' direct represents '1' with '8371'
c Var 'aux2359' order represents '1' with '1'
c Var 'aux2359' order represents '0' with '-8371'
c Encoding variable: aux2360 with domain: bool (representing constraint (1<=(aux1463 + aux1466 + aux1467)))
c Var 'aux2360' direct represents '0' with '-8372'
c Var 'aux2360' direct represents '1' with '8372'
c Var 'aux2360' order represents '1' with '1'
c Var 'aux2360' order represents '0' with '-8372'
c Encoding variable: aux2361 with domain: bool (representing constraint ((aux1469 + aux1472 + aux1473)<=1))
c Var 'aux2361' direct represents '0' with '-8373'
c Var 'aux2361' direct represents '1' with '8373'
c Var 'aux2361' order represents '1' with '1'
c Var 'aux2361' order represents '0' with '-8373'
c Encoding variable: aux2362 with domain: bool (representing constraint (1<=(aux1469 + aux1472 + aux1473)))
c Var 'aux2362' direct represents '0' with '-8374'
c Var 'aux2362' direct represents '1' with '8374'
c Var 'aux2362' order represents '1' with '1'
c Var 'aux2362' order represents '0' with '-8374'
c Encoding variable: aux2363 with domain: bool (representing constraint ((aux1475 + aux1478 + aux1479)<=1))
c Var 'aux2363' direct represents '0' with '-8375'
c Var 'aux2363' direct represents '1' with '8375'
c Var 'aux2363' order represents '1' with '1'
c Var 'aux2363' order represents '0' with '-8375'
c Encoding variable: aux2364 with domain: bool (representing constraint (1<=(aux1475 + aux1478 + aux1479)))
c Var 'aux2364' direct represents '0' with '-8376'
c Var 'aux2364' direct represents '1' with '8376'
c Var 'aux2364' order represents '1' with '1'
c Var 'aux2364' order represents '0' with '-8376'
c Encoding variable: aux2365 with domain: bool (representing constraint ((aux1481 + aux1484 + aux1485)<=1))
c Var 'aux2365' direct represents '0' with '-8377'
c Var 'aux2365' direct represents '1' with '8377'
c Var 'aux2365' order represents '1' with '1'
c Var 'aux2365' order represents '0' with '-8377'
c Encoding variable: aux2366 with domain: bool (representing constraint (1<=(aux1481 + aux1484 + aux1485)))
c Var 'aux2366' direct represents '0' with '-8378'
c Var 'aux2366' direct represents '1' with '8378'
c Var 'aux2366' order represents '1' with '1'
c Var 'aux2366' order represents '0' with '-8378'
c Encoding variable: aux2367 with domain: bool (representing constraint ((aux1487 + aux1490 + aux1491)<=1))
c Var 'aux2367' direct represents '0' with '-8379'
c Var 'aux2367' direct represents '1' with '8379'
c Var 'aux2367' order represents '1' with '1'
c Var 'aux2367' order represents '0' with '-8379'
c Encoding variable: aux2368 with domain: bool (representing constraint (1<=(aux1487 + aux1490 + aux1491)))
c Var 'aux2368' direct represents '0' with '-8380'
c Var 'aux2368' direct represents '1' with '8380'
c Var 'aux2368' order represents '1' with '1'
c Var 'aux2368' order represents '0' with '-8380'
c Encoding variable: aux2369 with domain: bool (representing constraint ((aux1493 + aux1496 + aux1497)<=1))
c Var 'aux2369' direct represents '0' with '-8381'
c Var 'aux2369' direct represents '1' with '8381'
c Var 'aux2369' order represents '1' with '1'
c Var 'aux2369' order represents '0' with '-8381'
c Encoding variable: aux2370 with domain: bool (representing constraint (1<=(aux1493 + aux1496 + aux1497)))
c Var 'aux2370' direct represents '0' with '-8382'
c Var 'aux2370' direct represents '1' with '8382'
c Var 'aux2370' order represents '1' with '1'
c Var 'aux2370' order represents '0' with '-8382'
c Encoding variable: aux2371 with domain: bool (representing constraint ((aux1499 + aux1502 + aux1503)<=1))
c Var 'aux2371' direct represents '0' with '-8383'
c Var 'aux2371' direct represents '1' with '8383'
c Var 'aux2371' order represents '1' with '1'
c Var 'aux2371' order represents '0' with '-8383'
c Encoding variable: aux2372 with domain: bool (representing constraint (1<=(aux1499 + aux1502 + aux1503)))
c Var 'aux2372' direct represents '0' with '-8384'
c Var 'aux2372' direct represents '1' with '8384'
c Var 'aux2372' order represents '1' with '1'
c Var 'aux2372' order represents '0' with '-8384'
c Encoding variable: aux2373 with domain: bool (representing constraint ((aux1505 + aux1508 + aux1509)<=1))
c Var 'aux2373' direct represents '0' with '-8385'
c Var 'aux2373' direct represents '1' with '8385'
c Var 'aux2373' order represents '1' with '1'
c Var 'aux2373' order represents '0' with '-8385'
c Encoding variable: aux2374 with domain: bool (representing constraint (1<=(aux1505 + aux1508 + aux1509)))
c Var 'aux2374' direct represents '0' with '-8386'
c Var 'aux2374' direct represents '1' with '8386'
c Var 'aux2374' order represents '1' with '1'
c Var 'aux2374' order represents '0' with '-8386'
c Encoding variable: aux2375 with domain: bool (representing constraint ((aux1511 + aux1514 + aux1515)<=1))
c Var 'aux2375' direct represents '0' with '-8387'
c Var 'aux2375' direct represents '1' with '8387'
c Var 'aux2375' order represents '1' with '1'
c Var 'aux2375' order represents '0' with '-8387'
c Encoding variable: aux2376 with domain: bool (representing constraint (1<=(aux1511 + aux1514 + aux1515)))
c Var 'aux2376' direct represents '0' with '-8388'
c Var 'aux2376' direct represents '1' with '8388'
c Var 'aux2376' order represents '1' with '1'
c Var 'aux2376' order represents '0' with '-8388'
c Encoding variable: aux2377 with domain: bool (representing constraint ((aux1517 + aux1520 + aux1521)<=1))
c Var 'aux2377' direct represents '0' with '-8389'
c Var 'aux2377' direct represents '1' with '8389'
c Var 'aux2377' order represents '1' with '1'
c Var 'aux2377' order represents '0' with '-8389'
c Encoding variable: aux2378 with domain: bool (representing constraint (1<=(aux1517 + aux1520 + aux1521)))
c Var 'aux2378' direct represents '0' with '-8390'
c Var 'aux2378' direct represents '1' with '8390'
c Var 'aux2378' order represents '1' with '1'
c Var 'aux2378' order represents '0' with '-8390'
c Encoding variable: aux2379 with domain: bool (representing constraint ((aux1523 + aux1526 + aux1527)<=1))
c Var 'aux2379' direct represents '0' with '-8391'
c Var 'aux2379' direct represents '1' with '8391'
c Var 'aux2379' order represents '1' with '1'
c Var 'aux2379' order represents '0' with '-8391'
c Encoding variable: aux2380 with domain: bool (representing constraint (1<=(aux1523 + aux1526 + aux1527)))
c Var 'aux2380' direct represents '0' with '-8392'
c Var 'aux2380' direct represents '1' with '8392'
c Var 'aux2380' order represents '1' with '1'
c Var 'aux2380' order represents '0' with '-8392'
c Encoding variable: aux2381 with domain: bool (representing constraint ((aux1529 + aux1532 + aux1533)<=1))
c Var 'aux2381' direct represents '0' with '-8393'
c Var 'aux2381' direct represents '1' with '8393'
c Var 'aux2381' order represents '1' with '1'
c Var 'aux2381' order represents '0' with '-8393'
c Encoding variable: aux2382 with domain: bool (representing constraint (1<=(aux1529 + aux1532 + aux1533)))
c Var 'aux2382' direct represents '0' with '-8394'
c Var 'aux2382' direct represents '1' with '8394'
c Var 'aux2382' order represents '1' with '1'
c Var 'aux2382' order represents '0' with '-8394'
c Encoding variable: aux2383 with domain: bool (representing constraint ((aux1535 + aux1538 + aux1539)<=1))
c Var 'aux2383' direct represents '0' with '-8395'
c Var 'aux2383' direct represents '1' with '8395'
c Var 'aux2383' order represents '1' with '1'
c Var 'aux2383' order represents '0' with '-8395'
c Encoding variable: aux2384 with domain: bool (representing constraint (1<=(aux1535 + aux1538 + aux1539)))
c Var 'aux2384' direct represents '0' with '-8396'
c Var 'aux2384' direct represents '1' with '8396'
c Var 'aux2384' order represents '1' with '1'
c Var 'aux2384' order represents '0' with '-8396'
c Encoding variable: aux2385 with domain: bool (representing constraint ((aux1541 + aux1544 + aux1545)<=1))
c Var 'aux2385' direct represents '0' with '-8397'
c Var 'aux2385' direct represents '1' with '8397'
c Var 'aux2385' order represents '1' with '1'
c Var 'aux2385' order represents '0' with '-8397'
c Encoding variable: aux2386 with domain: bool (representing constraint (1<=(aux1541 + aux1544 + aux1545)))
c Var 'aux2386' direct represents '0' with '-8398'
c Var 'aux2386' direct represents '1' with '8398'
c Var 'aux2386' order represents '1' with '1'
c Var 'aux2386' order represents '0' with '-8398'
c Encoding variable: aux2387 with domain: bool (representing constraint ((aux1547 + aux1550 + aux1551)<=1))
c Var 'aux2387' direct represents '0' with '-8399'
c Var 'aux2387' direct represents '1' with '8399'
c Var 'aux2387' order represents '1' with '1'
c Var 'aux2387' order represents '0' with '-8399'
c Encoding variable: aux2388 with domain: bool (representing constraint (1<=(aux1547 + aux1550 + aux1551)))
c Var 'aux2388' direct represents '0' with '-8400'
c Var 'aux2388' direct represents '1' with '8400'
c Var 'aux2388' order represents '1' with '1'
c Var 'aux2388' order represents '0' with '-8400'
c Encoding variable: aux2389 with domain: bool (representing constraint ((aux1553 + aux1556 + aux1557)<=1))
c Var 'aux2389' direct represents '0' with '-8401'
c Var 'aux2389' direct represents '1' with '8401'
c Var 'aux2389' order represents '1' with '1'
c Var 'aux2389' order represents '0' with '-8401'
c Encoding variable: aux2390 with domain: bool (representing constraint (1<=(aux1553 + aux1556 + aux1557)))
c Var 'aux2390' direct represents '0' with '-8402'
c Var 'aux2390' direct represents '1' with '8402'
c Var 'aux2390' order represents '1' with '1'
c Var 'aux2390' order represents '0' with '-8402'
c Encoding variable: aux2391 with domain: bool (representing constraint ((aux1559 + aux1562 + aux1563)<=1))
c Var 'aux2391' direct represents '0' with '-8403'
c Var 'aux2391' direct represents '1' with '8403'
c Var 'aux2391' order represents '1' with '1'
c Var 'aux2391' order represents '0' with '-8403'
c Encoding variable: aux2392 with domain: bool (representing constraint (1<=(aux1559 + aux1562 + aux1563)))
c Var 'aux2392' direct represents '0' with '-8404'
c Var 'aux2392' direct represents '1' with '8404'
c Var 'aux2392' order represents '1' with '1'
c Var 'aux2392' order represents '0' with '-8404'
c Encoding variable: aux2393 with domain: bool (representing constraint ((aux1565 + aux1568 + aux1569)<=1))
c Var 'aux2393' direct represents '0' with '-8405'
c Var 'aux2393' direct represents '1' with '8405'
c Var 'aux2393' order represents '1' with '1'
c Var 'aux2393' order represents '0' with '-8405'
c Encoding variable: aux2394 with domain: bool (representing constraint (1<=(aux1565 + aux1568 + aux1569)))
c Var 'aux2394' direct represents '0' with '-8406'
c Var 'aux2394' direct represents '1' with '8406'
c Var 'aux2394' order represents '1' with '1'
c Var 'aux2394' order represents '0' with '-8406'
c Encoding variable: aux2395 with domain: bool (representing constraint ((aux1571 + aux1574 + aux1575)<=1))
c Var 'aux2395' direct represents '0' with '-8407'
c Var 'aux2395' direct represents '1' with '8407'
c Var 'aux2395' order represents '1' with '1'
c Var 'aux2395' order represents '0' with '-8407'
c Encoding variable: aux2396 with domain: bool (representing constraint (1<=(aux1571 + aux1574 + aux1575)))
c Var 'aux2396' direct represents '0' with '-8408'
c Var 'aux2396' direct represents '1' with '8408'
c Var 'aux2396' order represents '1' with '1'
c Var 'aux2396' order represents '0' with '-8408'
c Encoding variable: aux2397 with domain: bool (representing constraint ((aux1577 + aux1580 + aux1581)<=1))
c Var 'aux2397' direct represents '0' with '-8409'
c Var 'aux2397' direct represents '1' with '8409'
c Var 'aux2397' order represents '1' with '1'
c Var 'aux2397' order represents '0' with '-8409'
c Encoding variable: aux2398 with domain: bool (representing constraint (1<=(aux1577 + aux1580 + aux1581)))
c Var 'aux2398' direct represents '0' with '-8410'
c Var 'aux2398' direct represents '1' with '8410'
c Var 'aux2398' order represents '1' with '1'
c Var 'aux2398' order represents '0' with '-8410'
c Encoding variable: aux2399 with domain: bool (representing constraint ((aux1583 + aux1586 + aux1587)<=1))
c Var 'aux2399' direct represents '0' with '-8411'
c Var 'aux2399' direct represents '1' with '8411'
c Var 'aux2399' order represents '1' with '1'
c Var 'aux2399' order represents '0' with '-8411'
c Encoding variable: aux2400 with domain: bool (representing constraint (1<=(aux1583 + aux1586 + aux1587)))
c Var 'aux2400' direct represents '0' with '-8412'
c Var 'aux2400' direct represents '1' with '8412'
c Var 'aux2400' order represents '1' with '1'
c Var 'aux2400' order represents '0' with '-8412'
c Encoding variable: aux2401 with domain: bool (representing constraint ((aux1589 + aux1592 + aux1593)<=1))
c Var 'aux2401' direct represents '0' with '-8413'
c Var 'aux2401' direct represents '1' with '8413'
c Var 'aux2401' order represents '1' with '1'
c Var 'aux2401' order represents '0' with '-8413'
c Encoding variable: aux2402 with domain: bool (representing constraint (1<=(aux1589 + aux1592 + aux1593)))
c Var 'aux2402' direct represents '0' with '-8414'
c Var 'aux2402' direct represents '1' with '8414'
c Var 'aux2402' order represents '1' with '1'
c Var 'aux2402' order represents '0' with '-8414'
c Encoding variable: aux2403 with domain: bool (representing constraint ((aux1595 + aux1598 + aux1599)<=1))
c Var 'aux2403' direct represents '0' with '-8415'
c Var 'aux2403' direct represents '1' with '8415'
c Var 'aux2403' order represents '1' with '1'
c Var 'aux2403' order represents '0' with '-8415'
c Encoding variable: aux2404 with domain: bool (representing constraint (1<=(aux1595 + aux1598 + aux1599)))
c Var 'aux2404' direct represents '0' with '-8416'
c Var 'aux2404' direct represents '1' with '8416'
c Var 'aux2404' order represents '1' with '1'
c Var 'aux2404' order represents '0' with '-8416'
c Encoding variable: aux2405 with domain: bool (representing constraint ((aux1601 + aux1604 + aux1605)<=1))
c Var 'aux2405' direct represents '0' with '-8417'
c Var 'aux2405' direct represents '1' with '8417'
c Var 'aux2405' order represents '1' with '1'
c Var 'aux2405' order represents '0' with '-8417'
c Encoding variable: aux2406 with domain: bool (representing constraint (1<=(aux1601 + aux1604 + aux1605)))
c Var 'aux2406' direct represents '0' with '-8418'
c Var 'aux2406' direct represents '1' with '8418'
c Var 'aux2406' order represents '1' with '1'
c Var 'aux2406' order represents '0' with '-8418'
c Encoding variable: aux2407 with domain: bool (representing constraint ((aux1607 + aux1610 + aux1611)<=1))
c Var 'aux2407' direct represents '0' with '-8419'
c Var 'aux2407' direct represents '1' with '8419'
c Var 'aux2407' order represents '1' with '1'
c Var 'aux2407' order represents '0' with '-8419'
c Encoding variable: aux2408 with domain: bool (representing constraint (1<=(aux1607 + aux1610 + aux1611)))
c Var 'aux2408' direct represents '0' with '-8420'
c Var 'aux2408' direct represents '1' with '8420'
c Var 'aux2408' order represents '1' with '1'
c Var 'aux2408' order represents '0' with '-8420'
c Encoding variable: aux2409 with domain: bool (representing constraint ((aux1613 + aux1616 + aux1617)<=1))
c Var 'aux2409' direct represents '0' with '-8421'
c Var 'aux2409' direct represents '1' with '8421'
c Var 'aux2409' order represents '1' with '1'
c Var 'aux2409' order represents '0' with '-8421'
c Encoding variable: aux2410 with domain: bool (representing constraint (1<=(aux1613 + aux1616 + aux1617)))
c Var 'aux2410' direct represents '0' with '-8422'
c Var 'aux2410' direct represents '1' with '8422'
c Var 'aux2410' order represents '1' with '1'
c Var 'aux2410' order represents '0' with '-8422'
c Encoding variable: aux2411 with domain: bool (representing constraint ((aux1619 + aux1622 + aux1623)<=1))
c Var 'aux2411' direct represents '0' with '-8423'
c Var 'aux2411' direct represents '1' with '8423'
c Var 'aux2411' order represents '1' with '1'
c Var 'aux2411' order represents '0' with '-8423'
c Encoding variable: aux2412 with domain: bool (representing constraint (1<=(aux1619 + aux1622 + aux1623)))
c Var 'aux2412' direct represents '0' with '-8424'
c Var 'aux2412' direct represents '1' with '8424'
c Var 'aux2412' order represents '1' with '1'
c Var 'aux2412' order represents '0' with '-8424'
c Encoding variable: aux2413 with domain: bool (representing constraint ((aux1625 + aux1628 + aux1629)<=1))
c Var 'aux2413' direct represents '0' with '-8425'
c Var 'aux2413' direct represents '1' with '8425'
c Var 'aux2413' order represents '1' with '1'
c Var 'aux2413' order represents '0' with '-8425'
c Encoding variable: aux2414 with domain: bool (representing constraint (1<=(aux1625 + aux1628 + aux1629)))
c Var 'aux2414' direct represents '0' with '-8426'
c Var 'aux2414' direct represents '1' with '8426'
c Var 'aux2414' order represents '1' with '1'
c Var 'aux2414' order represents '0' with '-8426'
c Encoding variable: aux2415 with domain: bool (representing constraint ((aux1631 + aux1634 + aux1635)<=1))
c Var 'aux2415' direct represents '0' with '-8427'
c Var 'aux2415' direct represents '1' with '8427'
c Var 'aux2415' order represents '1' with '1'
c Var 'aux2415' order represents '0' with '-8427'
c Encoding variable: aux2416 with domain: bool (representing constraint (1<=(aux1631 + aux1634 + aux1635)))
c Var 'aux2416' direct represents '0' with '-8428'
c Var 'aux2416' direct represents '1' with '8428'
c Var 'aux2416' order represents '1' with '1'
c Var 'aux2416' order represents '0' with '-8428'
c Encoding variable: aux2417 with domain: bool (representing constraint ((aux1637 + aux1640 + aux1641)<=1))
c Var 'aux2417' direct represents '0' with '-8429'
c Var 'aux2417' direct represents '1' with '8429'
c Var 'aux2417' order represents '1' with '1'
c Var 'aux2417' order represents '0' with '-8429'
c Encoding variable: aux2418 with domain: bool (representing constraint (1<=(aux1637 + aux1640 + aux1641)))
c Var 'aux2418' direct represents '0' with '-8430'
c Var 'aux2418' direct represents '1' with '8430'
c Var 'aux2418' order represents '1' with '1'
c Var 'aux2418' order represents '0' with '-8430'
c Encoding variable: aux2419 with domain: bool (representing constraint ((aux1643 + aux1646 + aux1647)<=1))
c Var 'aux2419' direct represents '0' with '-8431'
c Var 'aux2419' direct represents '1' with '8431'
c Var 'aux2419' order represents '1' with '1'
c Var 'aux2419' order represents '0' with '-8431'
c Encoding variable: aux2420 with domain: bool (representing constraint (1<=(aux1643 + aux1646 + aux1647)))
c Var 'aux2420' direct represents '0' with '-8432'
c Var 'aux2420' direct represents '1' with '8432'
c Var 'aux2420' order represents '1' with '1'
c Var 'aux2420' order represents '0' with '-8432'
c Encoding variable: aux2421 with domain: bool (representing constraint ((aux1649 + aux1652 + aux1653)<=1))
c Var 'aux2421' direct represents '0' with '-8433'
c Var 'aux2421' direct represents '1' with '8433'
c Var 'aux2421' order represents '1' with '1'
c Var 'aux2421' order represents '0' with '-8433'
c Encoding variable: aux2422 with domain: bool (representing constraint (1<=(aux1649 + aux1652 + aux1653)))
c Var 'aux2422' direct represents '0' with '-8434'
c Var 'aux2422' direct represents '1' with '8434'
c Var 'aux2422' order represents '1' with '1'
c Var 'aux2422' order represents '0' with '-8434'
c Encoding variable: aux2423 with domain: bool (representing constraint ((aux1655 + aux1658 + aux1659)<=1))
c Var 'aux2423' direct represents '0' with '-8435'
c Var 'aux2423' direct represents '1' with '8435'
c Var 'aux2423' order represents '1' with '1'
c Var 'aux2423' order represents '0' with '-8435'
c Encoding variable: aux2424 with domain: bool (representing constraint (1<=(aux1655 + aux1658 + aux1659)))
c Var 'aux2424' direct represents '0' with '-8436'
c Var 'aux2424' direct represents '1' with '8436'
c Var 'aux2424' order represents '1' with '1'
c Var 'aux2424' order represents '0' with '-8436'
c Encoding variable: aux2425 with domain: bool (representing constraint ((aux1661 + aux1664 + aux1665)<=1))
c Var 'aux2425' direct represents '0' with '-8437'
c Var 'aux2425' direct represents '1' with '8437'
c Var 'aux2425' order represents '1' with '1'
c Var 'aux2425' order represents '0' with '-8437'
c Encoding variable: aux2426 with domain: bool (representing constraint (1<=(aux1661 + aux1664 + aux1665)))
c Var 'aux2426' direct represents '0' with '-8438'
c Var 'aux2426' direct represents '1' with '8438'
c Var 'aux2426' order represents '1' with '1'
c Var 'aux2426' order represents '0' with '-8438'
c Encoding variable: aux2427 with domain: bool (representing constraint ((aux1667 + aux1670 + aux1671)<=1))
c Var 'aux2427' direct represents '0' with '-8439'
c Var 'aux2427' direct represents '1' with '8439'
c Var 'aux2427' order represents '1' with '1'
c Var 'aux2427' order represents '0' with '-8439'
c Encoding variable: aux2428 with domain: bool (representing constraint (1<=(aux1667 + aux1670 + aux1671)))
c Var 'aux2428' direct represents '0' with '-8440'
c Var 'aux2428' direct represents '1' with '8440'
c Var 'aux2428' order represents '1' with '1'
c Var 'aux2428' order represents '0' with '-8440'
c Encoding variable: aux2429 with domain: bool (representing constraint ((aux1673 + aux1676 + aux1677)<=1))
c Var 'aux2429' direct represents '0' with '-8441'
c Var 'aux2429' direct represents '1' with '8441'
c Var 'aux2429' order represents '1' with '1'
c Var 'aux2429' order represents '0' with '-8441'
c Encoding variable: aux2430 with domain: bool (representing constraint (1<=(aux1673 + aux1676 + aux1677)))
c Var 'aux2430' direct represents '0' with '-8442'
c Var 'aux2430' direct represents '1' with '8442'
c Var 'aux2430' order represents '1' with '1'
c Var 'aux2430' order represents '0' with '-8442'
c Encoding variable: aux2431 with domain: bool (representing constraint ((aux1679 + aux1682 + aux1683)<=1))
c Var 'aux2431' direct represents '0' with '-8443'
c Var 'aux2431' direct represents '1' with '8443'
c Var 'aux2431' order represents '1' with '1'
c Var 'aux2431' order represents '0' with '-8443'
c Encoding variable: aux2432 with domain: bool (representing constraint (1<=(aux1679 + aux1682 + aux1683)))
c Var 'aux2432' direct represents '0' with '-8444'
c Var 'aux2432' direct represents '1' with '8444'
c Var 'aux2432' order represents '1' with '1'
c Var 'aux2432' order represents '0' with '-8444'
c Encoding variable: aux2433 with domain: bool (representing constraint ((aux1685 + aux1688 + aux1689)<=1))
c Var 'aux2433' direct represents '0' with '-8445'
c Var 'aux2433' direct represents '1' with '8445'
c Var 'aux2433' order represents '1' with '1'
c Var 'aux2433' order represents '0' with '-8445'
c Encoding variable: aux2434 with domain: bool (representing constraint (1<=(aux1685 + aux1688 + aux1689)))
c Var 'aux2434' direct represents '0' with '-8446'
c Var 'aux2434' direct represents '1' with '8446'
c Var 'aux2434' order represents '1' with '1'
c Var 'aux2434' order represents '0' with '-8446'
c Encoding variable: aux2435 with domain: bool (representing constraint ((aux1691 + aux1694 + aux1695)<=1))
c Var 'aux2435' direct represents '0' with '-8447'
c Var 'aux2435' direct represents '1' with '8447'
c Var 'aux2435' order represents '1' with '1'
c Var 'aux2435' order represents '0' with '-8447'
c Encoding variable: aux2436 with domain: bool (representing constraint (1<=(aux1691 + aux1694 + aux1695)))
c Var 'aux2436' direct represents '0' with '-8448'
c Var 'aux2436' direct represents '1' with '8448'
c Var 'aux2436' order represents '1' with '1'
c Var 'aux2436' order represents '0' with '-8448'
c Encoding variable: aux2437 with domain: bool (representing constraint ((aux1697 + aux1700 + aux1701)<=1))
c Var 'aux2437' direct represents '0' with '-8449'
c Var 'aux2437' direct represents '1' with '8449'
c Var 'aux2437' order represents '1' with '1'
c Var 'aux2437' order represents '0' with '-8449'
c Encoding variable: aux2438 with domain: bool (representing constraint (1<=(aux1697 + aux1700 + aux1701)))
c Var 'aux2438' direct represents '0' with '-8450'
c Var 'aux2438' direct represents '1' with '8450'
c Var 'aux2438' order represents '1' with '1'
c Var 'aux2438' order represents '0' with '-8450'
c Encoding variable: aux2439 with domain: bool (representing constraint ((aux1703 + aux1706 + aux1707)<=1))
c Var 'aux2439' direct represents '0' with '-8451'
c Var 'aux2439' direct represents '1' with '8451'
c Var 'aux2439' order represents '1' with '1'
c Var 'aux2439' order represents '0' with '-8451'
c Encoding variable: aux2440 with domain: bool (representing constraint (1<=(aux1703 + aux1706 + aux1707)))
c Var 'aux2440' direct represents '0' with '-8452'
c Var 'aux2440' direct represents '1' with '8452'
c Var 'aux2440' order represents '1' with '1'
c Var 'aux2440' order represents '0' with '-8452'
c Encoding variable: aux2441 with domain: bool (representing constraint ((aux1709 + aux1712 + aux1713)<=1))
c Var 'aux2441' direct represents '0' with '-8453'
c Var 'aux2441' direct represents '1' with '8453'
c Var 'aux2441' order represents '1' with '1'
c Var 'aux2441' order represents '0' with '-8453'
c Encoding variable: aux2442 with domain: bool (representing constraint (1<=(aux1709 + aux1712 + aux1713)))
c Var 'aux2442' direct represents '0' with '-8454'
c Var 'aux2442' direct represents '1' with '8454'
c Var 'aux2442' order represents '1' with '1'
c Var 'aux2442' order represents '0' with '-8454'
c Encoding variable: aux2443 with domain: bool (representing constraint ((aux1715 + aux1718 + aux1719)<=1))
c Var 'aux2443' direct represents '0' with '-8455'
c Var 'aux2443' direct represents '1' with '8455'
c Var 'aux2443' order represents '1' with '1'
c Var 'aux2443' order represents '0' with '-8455'
c Encoding variable: aux2444 with domain: bool (representing constraint (1<=(aux1715 + aux1718 + aux1719)))
c Var 'aux2444' direct represents '0' with '-8456'
c Var 'aux2444' direct represents '1' with '8456'
c Var 'aux2444' order represents '1' with '1'
c Var 'aux2444' order represents '0' with '-8456'
c Encoding variable: aux2445 with domain: bool (representing constraint ((aux1721 + aux1724 + aux1725)<=1))
c Var 'aux2445' direct represents '0' with '-8457'
c Var 'aux2445' direct represents '1' with '8457'
c Var 'aux2445' order represents '1' with '1'
c Var 'aux2445' order represents '0' with '-8457'
c Encoding variable: aux2446 with domain: bool (representing constraint (1<=(aux1721 + aux1724 + aux1725)))
c Var 'aux2446' direct represents '0' with '-8458'
c Var 'aux2446' direct represents '1' with '8458'
c Var 'aux2446' order represents '1' with '1'
c Var 'aux2446' order represents '0' with '-8458'
c Encoding variable: aux2447 with domain: bool (representing constraint ((aux1727 + aux1730 + aux1731)<=1))
c Var 'aux2447' direct represents '0' with '-8459'
c Var 'aux2447' direct represents '1' with '8459'
c Var 'aux2447' order represents '1' with '1'
c Var 'aux2447' order represents '0' with '-8459'
c Encoding variable: aux2448 with domain: bool (representing constraint (1<=(aux1727 + aux1730 + aux1731)))
c Var 'aux2448' direct represents '0' with '-8460'
c Var 'aux2448' direct represents '1' with '8460'
c Var 'aux2448' order represents '1' with '1'
c Var 'aux2448' order represents '0' with '-8460'
c Encoding variable: aux2449 with domain: bool (representing constraint ((aux1733 + aux1736 + aux1737)<=1))
c Var 'aux2449' direct represents '0' with '-8461'
c Var 'aux2449' direct represents '1' with '8461'
c Var 'aux2449' order represents '1' with '1'
c Var 'aux2449' order represents '0' with '-8461'
c Encoding variable: aux2450 with domain: bool (representing constraint (1<=(aux1733 + aux1736 + aux1737)))
c Var 'aux2450' direct represents '0' with '-8462'
c Var 'aux2450' direct represents '1' with '8462'
c Var 'aux2450' order represents '1' with '1'
c Var 'aux2450' order represents '0' with '-8462'
c Encoding variable: aux2451 with domain: bool (representing constraint ((aux1739 + aux1742 + aux1743)<=1))
c Var 'aux2451' direct represents '0' with '-8463'
c Var 'aux2451' direct represents '1' with '8463'
c Var 'aux2451' order represents '1' with '1'
c Var 'aux2451' order represents '0' with '-8463'
c Encoding variable: aux2452 with domain: bool (representing constraint (1<=(aux1739 + aux1742 + aux1743)))
c Var 'aux2452' direct represents '0' with '-8464'
c Var 'aux2452' direct represents '1' with '8464'
c Var 'aux2452' order represents '1' with '1'
c Var 'aux2452' order represents '0' with '-8464'
c Encoding variable: aux2453 with domain: bool (representing constraint ((aux1745 + aux1748 + aux1749)<=1))
c Var 'aux2453' direct represents '0' with '-8465'
c Var 'aux2453' direct represents '1' with '8465'
c Var 'aux2453' order represents '1' with '1'
c Var 'aux2453' order represents '0' with '-8465'
c Encoding variable: aux2454 with domain: bool (representing constraint (1<=(aux1745 + aux1748 + aux1749)))
c Var 'aux2454' direct represents '0' with '-8466'
c Var 'aux2454' direct represents '1' with '8466'
c Var 'aux2454' order represents '1' with '1'
c Var 'aux2454' order represents '0' with '-8466'
c Encoding variable: aux2455 with domain: bool (representing constraint ((aux1751 + aux1754 + aux1755)<=1))
c Var 'aux2455' direct represents '0' with '-8467'
c Var 'aux2455' direct represents '1' with '8467'
c Var 'aux2455' order represents '1' with '1'
c Var 'aux2455' order represents '0' with '-8467'
c Encoding variable: aux2456 with domain: bool (representing constraint (1<=(aux1751 + aux1754 + aux1755)))
c Var 'aux2456' direct represents '0' with '-8468'
c Var 'aux2456' direct represents '1' with '8468'
c Var 'aux2456' order represents '1' with '1'
c Var 'aux2456' order represents '0' with '-8468'
c Encoding variable: aux2457 with domain: bool (representing constraint ((aux1757 + aux1760 + aux1761)<=1))
c Var 'aux2457' direct represents '0' with '-8469'
c Var 'aux2457' direct represents '1' with '8469'
c Var 'aux2457' order represents '1' with '1'
c Var 'aux2457' order represents '0' with '-8469'
c Encoding variable: aux2458 with domain: bool (representing constraint (1<=(aux1757 + aux1760 + aux1761)))
c Var 'aux2458' direct represents '0' with '-8470'
c Var 'aux2458' direct represents '1' with '8470'
c Var 'aux2458' order represents '1' with '1'
c Var 'aux2458' order represents '0' with '-8470'
c Encoding variable: aux2459 with domain: bool (representing constraint ((aux1763 + aux1766 + aux1767)<=1))
c Var 'aux2459' direct represents '0' with '-8471'
c Var 'aux2459' direct represents '1' with '8471'
c Var 'aux2459' order represents '1' with '1'
c Var 'aux2459' order represents '0' with '-8471'
c Encoding variable: aux2460 with domain: bool (representing constraint (1<=(aux1763 + aux1766 + aux1767)))
c Var 'aux2460' direct represents '0' with '-8472'
c Var 'aux2460' direct represents '1' with '8472'
c Var 'aux2460' order represents '1' with '1'
c Var 'aux2460' order represents '0' with '-8472'
c Encoding variable: aux2461 with domain: bool (representing constraint ((aux1769 + aux1772 + aux1773)<=1))
c Var 'aux2461' direct represents '0' with '-8473'
c Var 'aux2461' direct represents '1' with '8473'
c Var 'aux2461' order represents '1' with '1'
c Var 'aux2461' order represents '0' with '-8473'
c Encoding variable: aux2462 with domain: bool (representing constraint (1<=(aux1769 + aux1772 + aux1773)))
c Var 'aux2462' direct represents '0' with '-8474'
c Var 'aux2462' direct represents '1' with '8474'
c Var 'aux2462' order represents '1' with '1'
c Var 'aux2462' order represents '0' with '-8474'
c Encoding variable: aux2463 with domain: bool (representing constraint ((aux1775 + aux1778 + aux1779)<=1))
c Var 'aux2463' direct represents '0' with '-8475'
c Var 'aux2463' direct represents '1' with '8475'
c Var 'aux2463' order represents '1' with '1'
c Var 'aux2463' order represents '0' with '-8475'
c Encoding variable: aux2464 with domain: bool (representing constraint (1<=(aux1775 + aux1778 + aux1779)))
c Var 'aux2464' direct represents '0' with '-8476'
c Var 'aux2464' direct represents '1' with '8476'
c Var 'aux2464' order represents '1' with '1'
c Var 'aux2464' order represents '0' with '-8476'
c Encoding variable: aux2465 with domain: bool (representing constraint ((aux1781 + aux1784 + aux1785)<=1))
c Var 'aux2465' direct represents '0' with '-8477'
c Var 'aux2465' direct represents '1' with '8477'
c Var 'aux2465' order represents '1' with '1'
c Var 'aux2465' order represents '0' with '-8477'
c Encoding variable: aux2466 with domain: bool (representing constraint (1<=(aux1781 + aux1784 + aux1785)))
c Var 'aux2466' direct represents '0' with '-8478'
c Var 'aux2466' direct represents '1' with '8478'
c Var 'aux2466' order represents '1' with '1'
c Var 'aux2466' order represents '0' with '-8478'
c Encoding variable: aux2467 with domain: bool (representing constraint ((aux1787 + aux1790 + aux1791)<=1))
c Var 'aux2467' direct represents '0' with '-8479'
c Var 'aux2467' direct represents '1' with '8479'
c Var 'aux2467' order represents '1' with '1'
c Var 'aux2467' order represents '0' with '-8479'
c Encoding variable: aux2468 with domain: bool (representing constraint (1<=(aux1787 + aux1790 + aux1791)))
c Var 'aux2468' direct represents '0' with '-8480'
c Var 'aux2468' direct represents '1' with '8480'
c Var 'aux2468' order represents '1' with '1'
c Var 'aux2468' order represents '0' with '-8480'
c Encoding variable: aux2469 with domain: bool (representing constraint ((aux1793 + aux1796 + aux1797)<=1))
c Var 'aux2469' direct represents '0' with '-8481'
c Var 'aux2469' direct represents '1' with '8481'
c Var 'aux2469' order represents '1' with '1'
c Var 'aux2469' order represents '0' with '-8481'
c Encoding variable: aux2470 with domain: bool (representing constraint (1<=(aux1793 + aux1796 + aux1797)))
c Var 'aux2470' direct represents '0' with '-8482'
c Var 'aux2470' direct represents '1' with '8482'
c Var 'aux2470' order represents '1' with '1'
c Var 'aux2470' order represents '0' with '-8482'
c Encoding variable: aux2471 with domain: bool (representing constraint ((aux1799 + aux1802 + aux1803)<=1))
c Var 'aux2471' direct represents '0' with '-8483'
c Var 'aux2471' direct represents '1' with '8483'
c Var 'aux2471' order represents '1' with '1'
c Var 'aux2471' order represents '0' with '-8483'
c Encoding variable: aux2472 with domain: bool (representing constraint (1<=(aux1799 + aux1802 + aux1803)))
c Var 'aux2472' direct represents '0' with '-8484'
c Var 'aux2472' direct represents '1' with '8484'
c Var 'aux2472' order represents '1' with '1'
c Var 'aux2472' order represents '0' with '-8484'
c Encoding variable: aux2473 with domain: bool (representing constraint ((aux1805 + aux1808 + aux1809)<=1))
c Var 'aux2473' direct represents '0' with '-8485'
c Var 'aux2473' direct represents '1' with '8485'
c Var 'aux2473' order represents '1' with '1'
c Var 'aux2473' order represents '0' with '-8485'
c Encoding variable: aux2474 with domain: bool (representing constraint (1<=(aux1805 + aux1808 + aux1809)))
c Var 'aux2474' direct represents '0' with '-8486'
c Var 'aux2474' direct represents '1' with '8486'
c Var 'aux2474' order represents '1' with '1'
c Var 'aux2474' order represents '0' with '-8486'
c Encoding variable: aux2475 with domain: bool (representing constraint ((aux1811 + aux1814 + aux1815)<=1))
c Var 'aux2475' direct represents '0' with '-8487'
c Var 'aux2475' direct represents '1' with '8487'
c Var 'aux2475' order represents '1' with '1'
c Var 'aux2475' order represents '0' with '-8487'
c Encoding variable: aux2476 with domain: bool (representing constraint (1<=(aux1811 + aux1814 + aux1815)))
c Var 'aux2476' direct represents '0' with '-8488'
c Var 'aux2476' direct represents '1' with '8488'
c Var 'aux2476' order represents '1' with '1'
c Var 'aux2476' order represents '0' with '-8488'
c Encoding variable: aux2477 with domain: bool (representing constraint ((aux1817 + aux1820 + aux1821)<=1))
c Var 'aux2477' direct represents '0' with '-8489'
c Var 'aux2477' direct represents '1' with '8489'
c Var 'aux2477' order represents '1' with '1'
c Var 'aux2477' order represents '0' with '-8489'
c Encoding variable: aux2478 with domain: bool (representing constraint (1<=(aux1817 + aux1820 + aux1821)))
c Var 'aux2478' direct represents '0' with '-8490'
c Var 'aux2478' direct represents '1' with '8490'
c Var 'aux2478' order represents '1' with '1'
c Var 'aux2478' order represents '0' with '-8490'
c Encoding variable: aux2479 with domain: bool (representing constraint ((aux1823 + aux1826 + aux1827)<=1))
c Var 'aux2479' direct represents '0' with '-8491'
c Var 'aux2479' direct represents '1' with '8491'
c Var 'aux2479' order represents '1' with '1'
c Var 'aux2479' order represents '0' with '-8491'
c Encoding variable: aux2480 with domain: bool (representing constraint (1<=(aux1823 + aux1826 + aux1827)))
c Var 'aux2480' direct represents '0' with '-8492'
c Var 'aux2480' direct represents '1' with '8492'
c Var 'aux2480' order represents '1' with '1'
c Var 'aux2480' order represents '0' with '-8492'
c Encoding variable: aux2481 with domain: bool (representing constraint ((aux1829 + aux1832 + aux1833)<=1))
c Var 'aux2481' direct represents '0' with '-8493'
c Var 'aux2481' direct represents '1' with '8493'
c Var 'aux2481' order represents '1' with '1'
c Var 'aux2481' order represents '0' with '-8493'
c Encoding variable: aux2482 with domain: bool (representing constraint (1<=(aux1829 + aux1832 + aux1833)))
c Var 'aux2482' direct represents '0' with '-8494'
c Var 'aux2482' direct represents '1' with '8494'
c Var 'aux2482' order represents '1' with '1'
c Var 'aux2482' order represents '0' with '-8494'
c Encoding variable: aux2483 with domain: bool (representing constraint ((aux1835 + aux1838 + aux1839)<=1))
c Var 'aux2483' direct represents '0' with '-8495'
c Var 'aux2483' direct represents '1' with '8495'
c Var 'aux2483' order represents '1' with '1'
c Var 'aux2483' order represents '0' with '-8495'
c Encoding variable: aux2484 with domain: bool (representing constraint (1<=(aux1835 + aux1838 + aux1839)))
c Var 'aux2484' direct represents '0' with '-8496'
c Var 'aux2484' direct represents '1' with '8496'
c Var 'aux2484' order represents '1' with '1'
c Var 'aux2484' order represents '0' with '-8496'
c Encoding variable: aux2485 with domain: bool (representing constraint ((aux1841 + aux1844 + aux1845)<=1))
c Var 'aux2485' direct represents '0' with '-8497'
c Var 'aux2485' direct represents '1' with '8497'
c Var 'aux2485' order represents '1' with '1'
c Var 'aux2485' order represents '0' with '-8497'
c Encoding variable: aux2486 with domain: bool (representing constraint (1<=(aux1841 + aux1844 + aux1845)))
c Var 'aux2486' direct represents '0' with '-8498'
c Var 'aux2486' direct represents '1' with '8498'
c Var 'aux2486' order represents '1' with '1'
c Var 'aux2486' order represents '0' with '-8498'
c Encoding variable: aux2487 with domain: bool (representing constraint ((aux1847 + aux1850 + aux1851)<=1))
c Var 'aux2487' direct represents '0' with '-8499'
c Var 'aux2487' direct represents '1' with '8499'
c Var 'aux2487' order represents '1' with '1'
c Var 'aux2487' order represents '0' with '-8499'
c Encoding variable: aux2488 with domain: bool (representing constraint (1<=(aux1847 + aux1850 + aux1851)))
c Var 'aux2488' direct represents '0' with '-8500'
c Var 'aux2488' direct represents '1' with '8500'
c Var 'aux2488' order represents '1' with '1'
c Var 'aux2488' order represents '0' with '-8500'
c Encoding variable: aux2489 with domain: bool (representing constraint ((aux1853 + aux1856 + aux1857)<=1))
c Var 'aux2489' direct represents '0' with '-8501'
c Var 'aux2489' direct represents '1' with '8501'
c Var 'aux2489' order represents '1' with '1'
c Var 'aux2489' order represents '0' with '-8501'
c Encoding variable: aux2490 with domain: bool (representing constraint (1<=(aux1853 + aux1856 + aux1857)))
c Var 'aux2490' direct represents '0' with '-8502'
c Var 'aux2490' direct represents '1' with '8502'
c Var 'aux2490' order represents '1' with '1'
c Var 'aux2490' order represents '0' with '-8502'
c Encoding variable: aux2491 with domain: bool (representing constraint ((aux1859 + aux1862 + aux1863)<=1))
c Var 'aux2491' direct represents '0' with '-8503'
c Var 'aux2491' direct represents '1' with '8503'
c Var 'aux2491' order represents '1' with '1'
c Var 'aux2491' order represents '0' with '-8503'
c Encoding variable: aux2492 with domain: bool (representing constraint (1<=(aux1859 + aux1862 + aux1863)))
c Var 'aux2492' direct represents '0' with '-8504'
c Var 'aux2492' direct represents '1' with '8504'
c Var 'aux2492' order represents '1' with '1'
c Var 'aux2492' order represents '0' with '-8504'
c Encoding variable: aux2493 with domain: bool (representing constraint ((aux1865 + aux1868 + aux1869)<=1))
c Var 'aux2493' direct represents '0' with '-8505'
c Var 'aux2493' direct represents '1' with '8505'
c Var 'aux2493' order represents '1' with '1'
c Var 'aux2493' order represents '0' with '-8505'
c Encoding variable: aux2494 with domain: bool (representing constraint (1<=(aux1865 + aux1868 + aux1869)))
c Var 'aux2494' direct represents '0' with '-8506'
c Var 'aux2494' direct represents '1' with '8506'
c Var 'aux2494' order represents '1' with '1'
c Var 'aux2494' order represents '0' with '-8506'
c Encoding variable: aux2495 with domain: bool (representing constraint ((aux1871 + aux1874 + aux1875)<=1))
c Var 'aux2495' direct represents '0' with '-8507'
c Var 'aux2495' direct represents '1' with '8507'
c Var 'aux2495' order represents '1' with '1'
c Var 'aux2495' order represents '0' with '-8507'
c Encoding variable: aux2496 with domain: bool (representing constraint (1<=(aux1871 + aux1874 + aux1875)))
c Var 'aux2496' direct represents '0' with '-8508'
c Var 'aux2496' direct represents '1' with '8508'
c Var 'aux2496' order represents '1' with '1'
c Var 'aux2496' order represents '0' with '-8508'
c Encoding variable: aux2497 with domain: bool (representing constraint ((aux1877 + aux1880 + aux1881)<=1))
c Var 'aux2497' direct represents '0' with '-8509'
c Var 'aux2497' direct represents '1' with '8509'
c Var 'aux2497' order represents '1' with '1'
c Var 'aux2497' order represents '0' with '-8509'
c Encoding variable: aux2498 with domain: bool (representing constraint (1<=(aux1877 + aux1880 + aux1881)))
c Var 'aux2498' direct represents '0' with '-8510'
c Var 'aux2498' direct represents '1' with '8510'
c Var 'aux2498' order represents '1' with '1'
c Var 'aux2498' order represents '0' with '-8510'
c Encoding variable: aux2499 with domain: bool (representing constraint ((aux1883 + aux1886 + aux1887)<=1))
c Var 'aux2499' direct represents '0' with '-8511'
c Var 'aux2499' direct represents '1' with '8511'
c Var 'aux2499' order represents '1' with '1'
c Var 'aux2499' order represents '0' with '-8511'
c Encoding variable: aux2500 with domain: bool (representing constraint (1<=(aux1883 + aux1886 + aux1887)))
c Var 'aux2500' direct represents '0' with '-8512'
c Var 'aux2500' direct represents '1' with '8512'
c Var 'aux2500' order represents '1' with '1'
c Var 'aux2500' order represents '0' with '-8512'
c Encoding variable: aux2501 with domain: bool (representing constraint ((aux1889 + aux1892 + aux1893)<=1))
c Var 'aux2501' direct represents '0' with '-8513'
c Var 'aux2501' direct represents '1' with '8513'
c Var 'aux2501' order represents '1' with '1'
c Var 'aux2501' order represents '0' with '-8513'
c Encoding variable: aux2502 with domain: bool (representing constraint (1<=(aux1889 + aux1892 + aux1893)))
c Var 'aux2502' direct represents '0' with '-8514'
c Var 'aux2502' direct represents '1' with '8514'
c Var 'aux2502' order represents '1' with '1'
c Var 'aux2502' order represents '0' with '-8514'
c Encoding variable: aux2503 with domain: bool (representing constraint ((aux1895 + aux1898 + aux1899)<=1))
c Var 'aux2503' direct represents '0' with '-8515'
c Var 'aux2503' direct represents '1' with '8515'
c Var 'aux2503' order represents '1' with '1'
c Var 'aux2503' order represents '0' with '-8515'
c Encoding variable: aux2504 with domain: bool (representing constraint (1<=(aux1895 + aux1898 + aux1899)))
c Var 'aux2504' direct represents '0' with '-8516'
c Var 'aux2504' direct represents '1' with '8516'
c Var 'aux2504' order represents '1' with '1'
c Var 'aux2504' order represents '0' with '-8516'
c (((aux435 + aux436 + shift(x_00002_00003, -1))<=26)=tv=SATLiteral(7975))
-7975 1756 1797 0
-7975 1758 1795 0
-7975 1760 1793 0
-7975 1762 1791 0
-7975 1764 1789 0
-7975 1766 1787 0
-7975 167 1754 1797 0
-7975 167 1756 1795 0
-7975 167 1758 1793 0
-7975 167 1760 1791 0
-7975 167 1762 1789 0
-7975 167 1764 1787 0
-7975 167 1766 1785 0
-7975 168 1752 1797 0
-7975 168 1754 1795 0
-7975 168 1756 1793 0
-7975 168 1758 1791 0
-7975 168 1760 1789 0
-7975 168 1762 1787 0
-7975 168 1764 1785 0
-7975 168 1766 1783 0
-7975 170 1750 1797 0
-7975 170 1752 1795 0
-7975 170 1754 1793 0
-7975 170 1756 1791 0
-7975 170 1758 1789 0
-7975 170 1760 1787 0
-7975 170 1762 1785 0
-7975 170 1764 1783 0
-7975 170 1766 1781 0
-7975 172 1748 1797 0
-7975 172 1750 1795 0
-7975 172 1752 1793 0
-7975 172 1754 1791 0
-7975 172 1756 1789 0
-7975 172 1758 1787 0
-7975 172 1760 1785 0
-7975 172 1762 1783 0
-7975 172 1764 1781 0
-7975 172 1766 1779 0
-7975 174 1746 1797 0
-7975 174 1748 1795 0
-7975 174 1750 1793 0
-7975 174 1752 1791 0
-7975 174 1754 1789 0
-7975 174 1756 1787 0
-7975 174 1758 1785 0
-7975 174 1760 1783 0
-7975 174 1762 1781 0
-7975 174 1764 1779 0
-7975 174 1766 1777 0
-7975 176 1744 1797 0
-7975 176 1746 1795 0
-7975 176 1748 1793 0
-7975 176 1750 1791 0
-7975 176 1752 1789 0
-7975 176 1754 1787 0
-7975 176 1756 1785 0
-7975 176 1758 1783 0
-7975 176 1760 1781 0
-7975 176 1762 1779 0
-7975 176 1764 1777 0
-7975 176 1766 1775 0
-7975 178 1742 1797 0
-7975 178 1744 1795 0
-7975 178 1746 1793 0
-7975 178 1748 1791 0
-7975 178 1750 1789 0
-7975 178 1752 1787 0
-7975 178 1754 1785 0
-7975 178 1756 1783 0
-7975 178 1758 1781 0
-7975 178 1760 1779 0
-7975 178 1762 1777 0
-7975 178 1764 1775 0
-7975 178 1766 1773 0
-7975 180 1740 1797 0
-7975 180 1742 1795 0
-7975 180 1744 1793 0
-7975 180 1746 1791 0
-7975 180 1748 1789 0
-7975 180 1750 1787 0
-7975 180 1752 1785 0
-7975 180 1754 1783 0
-7975 180 1756 1781 0
-7975 180 1758 1779 0
-7975 180 1760 1777 0
-7975 180 1762 1775 0
-7975 180 1764 1773 0
-7975 180 1766 1771 0
7975 -1771 0
7975 -1766 -1773 0
7975 -1764 -1775 0
7975 -1762 -1777 0
7975 -1760 -1779 0
7975 -1758 -1781 0
7975 -1756 -1783 0
7975 -1754 -1785 0
7975 -1752 -1787 0
7975 -1750 -1789 0
7975 -1748 -1791 0
7975 -1746 -1793 0
7975 -1744 -1795 0
7975 -1742 -1797 0
7975 -1740 0
7975 -1738 0
7975 -1737 0
7975 -180 -1773 0
7975 -180 -1766 -1775 0
7975 -180 -1764 -1777 0
7975 -180 -1762 -1779 0
7975 -180 -1760 -1781 0
7975 -180 -1758 -1783 0
7975 -180 -1756 -1785 0
7975 -180 -1754 -1787 0
7975 -180 -1752 -1789 0
7975 -180 -1750 -1791 0
7975 -180 -1748 -1793 0
7975 -180 -1746 -1795 0
7975 -180 -1744 -1797 0
7975 -180 -1742 0
7975 -180 -1740 0
7975 -180 -1738 0
7975 -180 -1737 0
7975 -178 -1775 0
7975 -178 -1766 -1777 0
7975 -178 -1764 -1779 0
7975 -178 -1762 -1781 0
7975 -178 -1760 -1783 0
7975 -178 -1758 -1785 0
7975 -178 -1756 -1787 0
7975 -178 -1754 -1789 0
7975 -178 -1752 -1791 0
7975 -178 -1750 -1793 0
7975 -178 -1748 -1795 0
7975 -178 -1746 -1797 0
7975 -178 -1744 0
7975 -178 -1742 0
7975 -178 -1740 0
7975 -178 -1738 0
7975 -178 -1737 0
7975 -176 -1777 0
7975 -176 -1766 -1779 0
7975 -176 -1764 -1781 0
7975 -176 -1762 -1783 0
7975 -176 -1760 -1785 0
7975 -176 -1758 -1787 0
7975 -176 -1756 -1789 0
7975 -176 -1754 -1791 0
7975 -176 -1752 -1793 0
7975 -176 -1750 -1795 0
7975 -176 -1748 -1797 0
7975 -176 -1746 0
7975 -176 -1744 0
7975 -176 -1742 0
7975 -176 -1740 0
7975 -176 -1738 0
7975 -176 -1737 0
7975 -174 -1779 0
7975 -174 -1766 -1781 0
7975 -174 -1764 -1783 0
7975 -174 -1762 -1785 0
7975 -174 -1760 -1787 0
7975 -174 -1758 -1789 0
7975 -174 -1756 -1791 0
7975 -174 -1754 -1793 0
7975 -174 -1752 -1795 0
7975 -174 -1750 -1797 0
7975 -174 -1748 0
7975 -174 -1746 0
7975 -174 -1744 0
7975 -174 -1742 0
7975 -174 -1740 0
7975 -174 -1738 0
7975 -174 -1737 0
7975 -172 -1781 0
7975 -172 -1766 -1783 0
7975 -172 -1764 -1785 0
7975 -172 -1762 -1787 0
7975 -172 -1760 -1789 0
7975 -172 -1758 -1791 0
7975 -172 -1756 -1793 0
7975 -172 -1754 -1795 0
7975 -172 -1752 -1797 0
7975 -172 -1750 0
7975 -172 -1748 0
7975 -172 -1746 0
7975 -172 -1744 0
7975 -172 -1742 0
7975 -172 -1740 0
7975 -172 -1738 0
7975 -172 -1737 0
7975 -170 -1783 0
7975 -170 -1766 -1785 0
7975 -170 -1764 -1787 0
7975 -170 -1762 -1789 0
7975 -170 -1760 -1791 0
7975 -170 -1758 -1793 0
7975 -170 -1756 -1795 0
7975 -170 -1754 -1797 0
7975 -170 -1752 0
7975 -170 -1750 0
7975 -170 -1748 0
7975 -170 -1746 0
7975 -170 -1744 0
7975 -170 -1742 0
7975 -170 -1740 0
7975 -170 -1738 0
7975 -170 -1737 0
7975 -168 -1785 0
7975 -168 -1766 -1787 0
7975 -168 -1764 -1789 0
7975 -168 -1762 -1791 0
7975 -168 -1760 -1793 0
7975 -168 -1758 -1795 0
7975 -168 -1756 -1797 0
7975 -168 -1754 0
7975 -168 -1752 0
7975 -168 -1750 0
7975 -168 -1748 0
7975 -168 -1746 0
7975 -168 -1744 0
7975 -168 -1742 0
7975 -168 -1740 0
7975 -168 -1738 0
7975 -168 -1737 0
7975 -167 -1787 0
7975 -167 -1766 -1789 0
7975 -167 -1764 -1791 0
7975 -167 -1762 -1793 0
7975 -167 -1760 -1795 0
7975 -167 -1758 -1797 0
7975 -167 -1756 0
7975 -167 -1754 0
7975 -167 -1752 0
7975 -167 -1750 0
7975 -167 -1748 0
7975 -167 -1746 0
7975 -167 -1744 0
7975 -167 -1742 0
7975 -167 -1740 0
7975 -167 -1738 0
7975 -167 -1737 0
c ((26<=(aux435 + aux436 + shift(x_00002_00003, -1)))=tv=SATLiteral(7976))
-7976 -1769 0
-7976 -1766 -1771 0
-7976 -1764 -1773 0
-7976 -1762 -1775 0
-7976 -1760 -1777 0
-7976 -1758 -1779 0
-7976 -1756 -1781 0
-7976 -1754 -1783 0
-7976 -1752 -1785 0
-7976 -1750 -1787 0
-7976 -1748 -1789 0
-7976 -1746 -1791 0
-7976 -1744 -1793 0
-7976 -1742 -1795 0
-7976 -1740 -1797 0
-7976 -1738 0
-7976 -1737 0
-7976 -180 -1771 0
-7976 -180 -1766 -1773 0
-7976 -180 -1764 -1775 0
-7976 -180 -1762 -1777 0
-7976 -180 -1760 -1779 0
-7976 -180 -1758 -1781 0
-7976 -180 -1756 -1783 0
-7976 -180 -1754 -1785 0
-7976 -180 -1752 -1787 0
-7976 -180 -1750 -1789 0
-7976 -180 -1748 -1791 0
-7976 -180 -1746 -1793 0
-7976 -180 -1744 -1795 0
-7976 -180 -1742 -1797 0
-7976 -180 -1740 0
-7976 -180 -1738 0
-7976 -180 -1737 0
-7976 -178 -1773 0
-7976 -178 -1766 -1775 0
-7976 -178 -1764 -1777 0
-7976 -178 -1762 -1779 0
-7976 -178 -1760 -1781 0
-7976 -178 -1758 -1783 0
-7976 -178 -1756 -1785 0
-7976 -178 -1754 -1787 0
-7976 -178 -1752 -1789 0
-7976 -178 -1750 -1791 0
-7976 -178 -1748 -1793 0
-7976 -178 -1746 -1795 0
-7976 -178 -1744 -1797 0
-7976 -178 -1742 0
-7976 -178 -1740 0
-7976 -178 -1738 0
-7976 -178 -1737 0
-7976 -176 -1775 0
-7976 -176 -1766 -1777 0
-7976 -176 -1764 -1779 0
-7976 -176 -1762 -1781 0
-7976 -176 -1760 -1783 0
-7976 -176 -1758 -1785 0
-7976 -176 -1756 -1787 0
-7976 -176 -1754 -1789 0
-7976 -176 -1752 -1791 0
-7976 -176 -1750 -1793 0
-7976 -176 -1748 -1795 0
-7976 -176 -1746 -1797 0
-7976 -176 -1744 0
-7976 -176 -1742 0
-7976 -176 -1740 0
-7976 -176 -1738 0
-7976 -176 -1737 0
-7976 -174 -1777 0
-7976 -174 -1766 -1779 0
-7976 -174 -1764 -1781 0
-7976 -174 -1762 -1783 0
-7976 -174 -1760 -1785 0
-7976 -174 -1758 -1787 0
-7976 -174 -1756 -1789 0
-7976 -174 -1754 -1791 0
-7976 -174 -1752 -1793 0
-7976 -174 -1750 -1795 0
-7976 -174 -1748 -1797 0
-7976 -174 -1746 0
-7976 -174 -1744 0
-7976 -174 -1742 0
-7976 -174 -1740 0
-7976 -174 -1738 0
-7976 -174 -1737 0
-7976 -172 -1779 0
-7976 -172 -1766 -1781 0
-7976 -172 -1764 -1783 0
-7976 -172 -1762 -1785 0
-7976 -172 -1760 -1787 0
-7976 -172 -1758 -1789 0
-7976 -172 -1756 -1791 0
-7976 -172 -1754 -1793 0
-7976 -172 -1752 -1795 0
-7976 -172 -1750 -1797 0
-7976 -172 -1748 0
-7976 -172 -1746 0
-7976 -172 -1744 0
-7976 -172 -1742 0
-7976 -172 -1740 0
-7976 -172 -1738 0
-7976 -172 -1737 0
-7976 -170 -1781 0
-7976 -170 -1766 -1783 0
-7976 -170 -1764 -1785 0
-7976 -170 -1762 -1787 0
-7976 -170 -1760 -1789 0
-7976 -170 -1758 -1791 0
-7976 -170 -1756 -1793 0
-7976 -170 -1754 -1795 0
-7976 -170 -1752 -1797 0
-7976 -170 -1750 0
-7976 -170 -1748 0
-7976 -170 -1746 0
-7976 -170 -1744 0
-7976 -170 -1742 0
-7976 -170 -1740 0
-7976 -170 -1738 0
-7976 -170 -1737 0
-7976 -168 -1783 0
-7976 -168 -1766 -1785 0
-7976 -168 -1764 -1787 0
-7976 -168 -1762 -1789 0
-7976 -168 -1760 -1791 0
-7976 -168 -1758 -1793 0
-7976 -168 -1756 -1795 0
-7976 -168 -1754 -1797 0
-7976 -168 -1752 0
-7976 -168 -1750 0
-7976 -168 -1748 0
-7976 -168 -1746 0
-7976 -168 -1744 0
-7976 -168 -1742 0
-7976 -168 -1740 0
-7976 -168 -1738 0
-7976 -168 -1737 0
-7976 -167 -1785 0
-7976 -167 -1766 -1787 0
-7976 -167 -1764 -1789 0
-7976 -167 -1762 -1791 0
-7976 -167 -1760 -1793 0
-7976 -167 -1758 -1795 0
-7976 -167 -1756 -1797 0
-7976 -167 -1754 0
-7976 -167 -1752 0
-7976 -167 -1750 0
-7976 -167 -1748 0
-7976 -167 -1746 0
-7976 -167 -1744 0
-7976 -167 -1742 0
-7976 -167 -1740 0
-7976 -167 -1738 0
-7976 -167 -1737 0
7976 1754 1797 0
7976 1756 1795 0
7976 1758 1793 0
7976 1760 1791 0
7976 1762 1789 0
7976 1764 1787 0
7976 1766 1785 0
7976 167 1752 1797 0
7976 167 1754 1795 0
7976 167 1756 1793 0
7976 167 1758 1791 0
7976 167 1760 1789 0
7976 167 1762 1787 0
7976 167 1764 1785 0
7976 167 1766 1783 0
7976 168 1750 1797 0
7976 168 1752 1795 0
7976 168 1754 1793 0
7976 168 1756 1791 0
7976 168 1758 1789 0
7976 168 1760 1787 0
7976 168 1762 1785 0
7976 168 1764 1783 0
7976 168 1766 1781 0
7976 170 1748 1797 0
7976 170 1750 1795 0
7976 170 1752 1793 0
7976 170 1754 1791 0
7976 170 1756 1789 0
7976 170 1758 1787 0
7976 170 1760 1785 0
7976 170 1762 1783 0
7976 170 1764 1781 0
7976 170 1766 1779 0
7976 172 1746 1797 0
7976 172 1748 1795 0
7976 172 1750 1793 0
7976 172 1752 1791 0
7976 172 1754 1789 0
7976 172 1756 1787 0
7976 172 1758 1785 0
7976 172 1760 1783 0
7976 172 1762 1781 0
7976 172 1764 1779 0
7976 172 1766 1777 0
7976 174 1744 1797 0
7976 174 1746 1795 0
7976 174 1748 1793 0
7976 174 1750 1791 0
7976 174 1752 1789 0
7976 174 1754 1787 0
7976 174 1756 1785 0
7976 174 1758 1783 0
7976 174 1760 1781 0
7976 174 1762 1779 0
7976 174 1764 1777 0
7976 174 1766 1775 0
7976 176 1742 1797 0
7976 176 1744 1795 0
7976 176 1746 1793 0
7976 176 1748 1791 0
7976 176 1750 1789 0
7976 176 1752 1787 0
7976 176 1754 1785 0
7976 176 1756 1783 0
7976 176 1758 1781 0
7976 176 1760 1779 0
7976 176 1762 1777 0
7976 176 1764 1775 0
7976 176 1766 1773 0
7976 178 1740 1797 0
7976 178 1742 1795 0
7976 178 1744 1793 0
7976 178 1746 1791 0
7976 178 1748 1789 0
7976 178 1750 1787 0
7976 178 1752 1785 0
7976 178 1754 1783 0
7976 178 1756 1781 0
7976 178 1758 1779 0
7976 178 1760 1777 0
7976 178 1762 1775 0
7976 178 1764 1773 0
7976 178 1766 1771 0
7976 180 1738 1797 0
7976 180 1740 1795 0
7976 180 1742 1793 0
7976 180 1744 1791 0
7976 180 1746 1789 0
7976 180 1748 1787 0
7976 180 1750 1785 0
7976 180 1752 1783 0
7976 180 1754 1781 0
7976 180 1756 1779 0
7976 180 1758 1777 0
7976 180 1760 1775 0
7976 180 1762 1773 0
7976 180 1764 1771 0
7976 180 1766 1769 0
c (((aux437 + shift(x_00001_00003, -1) + shift(x_00001_00004, -1))<=10)=tv=SATLiteral(7977))
-7977 1818 0
-7977 47 1816 0
-7977 48 1814 0
-7977 50 1812 0
-7977 52 1810 0
-7977 54 1808 0
-7977 56 1806 0
-7977 58 1804 0
-7977 60 1802 0
-7977 32 1816 0
-7977 32 47 1814 0
-7977 32 48 1812 0
-7977 32 50 1810 0
-7977 32 52 1808 0
-7977 32 54 1806 0
-7977 32 56 1804 0
-7977 32 58 1802 0
-7977 32 60 1800 0
-7977 33 1814 0
-7977 33 47 1812 0
-7977 33 48 1810 0
-7977 33 50 1808 0
-7977 33 52 1806 0
-7977 33 54 1804 0
-7977 33 56 1802 0
-7977 33 58 1800 0
-7977 33 60 1799 0
-7977 35 1812 0
-7977 35 47 1810 0
-7977 35 48 1808 0
-7977 35 50 1806 0
-7977 35 52 1804 0
-7977 35 54 1802 0
-7977 35 56 1800 0
-7977 35 58 1799 0
-7977 35 60 0
-7977 37 1810 0
-7977 37 47 1808 0
-7977 37 48 1806 0
-7977 37 50 1804 0
-7977 37 52 1802 0
-7977 37 54 1800 0
-7977 37 56 1799 0
-7977 37 58 0
-7977 37 60 0
-7977 39 1808 0
-7977 39 47 1806 0
-7977 39 48 1804 0
-7977 39 50 1802 0
-7977 39 52 1800 0
-7977 39 54 1799 0
-7977 39 56 0
-7977 39 58 0
-7977 39 60 0
-7977 41 1806 0
-7977 41 47 1804 0
-7977 41 48 1802 0
-7977 41 50 1800 0
-7977 41 52 1799 0
-7977 41 54 0
-7977 41 56 0
-7977 41 58 0
-7977 41 60 0
-7977 43 1804 0
-7977 43 47 1802 0
-7977 43 48 1800 0
-7977 43 50 1799 0
-7977 43 52 0
-7977 43 54 0
-7977 43 56 0
-7977 43 58 0
-7977 43 60 0
-7977 45 1802 0
-7977 45 47 1800 0
-7977 45 48 1799 0
-7977 45 50 0
-7977 45 52 0
-7977 45 54 0
-7977 45 56 0
-7977 45 58 0
-7977 45 60 0
7977 -50 -1799 0
7977 -48 -1800 0
7977 -47 -1802 0
7977 -45 -52 -1799 0
7977 -45 -50 -1800 0
7977 -45 -48 -1802 0
7977 -45 -47 -1804 0
7977 -43 -54 -1799 0
7977 -43 -52 -1800 0
7977 -43 -50 -1802 0
7977 -43 -48 -1804 0
7977 -43 -47 -1806 0
7977 -41 -56 -1799 0
7977 -41 -54 -1800 0
7977 -41 -52 -1802 0
7977 -41 -50 -1804 0
7977 -41 -48 -1806 0
7977 -41 -47 -1808 0
7977 -39 -58 -1799 0
7977 -39 -56 -1800 0
7977 -39 -54 -1802 0
7977 -39 -52 -1804 0
7977 -39 -50 -1806 0
7977 -39 -48 -1808 0
7977 -39 -47 -1810 0
7977 -37 -60 -1799 0
7977 -37 -58 -1800 0
7977 -37 -56 -1802 0
7977 -37 -54 -1804 0
7977 -37 -52 -1806 0
7977 -37 -50 -1808 0
7977 -37 -48 -1810 0
7977 -37 -47 -1812 0
7977 -35 -1799 0
7977 -35 -60 -1800 0
7977 -35 -58 -1802 0
7977 -35 -56 -1804 0
7977 -35 -54 -1806 0
7977 -35 -52 -1808 0
7977 -35 -50 -1810 0
7977 -35 -48 -1812 0
7977 -35 -47 -1814 0
7977 -33 -1800 0
7977 -33 -60 -1802 0
7977 -33 -58 -1804 0
7977 -33 -56 -1806 0
7977 -33 -54 -1808 0
7977 -33 -52 -1810 0
7977 -33 -50 -1812 0
7977 -33 -48 -1814 0
7977 -33 -47 -1816 0
7977 -32 -1802 0
7977 -32 -60 -1804 0
7977 -32 -58 -1806 0
7977 -32 -56 -1808 0
7977 -32 -54 -1810 0
7977 -32 -52 -1812 0
7977 -32 -50 -1814 0
7977 -32 -48 -1816 0
7977 -32 -47 -1818 0
c ((10<=(aux437 + shift(x_00001_00003, -1) + shift(x_00001_00004, -1)))=tv=SATLiteral(7978))
-7978 -48 -1799 0
-7978 -47 -1800 0
-7978 -45 -50 -1799 0
-7978 -45 -48 -1800 0
-7978 -45 -47 -1802 0
-7978 -43 -52 -1799 0
-7978 -43 -50 -1800 0
-7978 -43 -48 -1802 0
-7978 -43 -47 -1804 0
-7978 -41 -54 -1799 0
-7978 -41 -52 -1800 0
-7978 -41 -50 -1802 0
-7978 -41 -48 -1804 0
-7978 -41 -47 -1806 0
-7978 -39 -56 -1799 0
-7978 -39 -54 -1800 0
-7978 -39 -52 -1802 0
-7978 -39 -50 -1804 0
-7978 -39 -48 -1806 0
-7978 -39 -47 -1808 0
-7978 -37 -58 -1799 0
-7978 -37 -56 -1800 0
-7978 -37 -54 -1802 0
-7978 -37 -52 -1804 0
-7978 -37 -50 -1806 0
-7978 -37 -48 -1808 0
-7978 -37 -47 -1810 0
-7978 -35 -60 -1799 0
-7978 -35 -58 -1800 0
-7978 -35 -56 -1802 0
-7978 -35 -54 -1804 0
-7978 -35 -52 -1806 0
-7978 -35 -50 -1808 0
-7978 -35 -48 -1810 0
-7978 -35 -47 -1812 0
-7978 -33 -1799 0
-7978 -33 -60 -1800 0
-7978 -33 -58 -1802 0
-7978 -33 -56 -1804 0
-7978 -33 -54 -1806 0
-7978 -33 -52 -1808 0
-7978 -33 -50 -1810 0
-7978 -33 -48 -1812 0
-7978 -33 -47 -1814 0
-7978 -32 -1800 0
-7978 -32 -60 -1802 0
-7978 -32 -58 -1804 0
-7978 -32 -56 -1806 0
-7978 -32 -54 -1808 0
-7978 -32 -52 -1810 0
-7978 -32 -50 -1812 0
-7978 -32 -48 -1814 0
-7978 -32 -47 -1816 0
7978 1816 0
7978 47 1814 0
7978 48 1812 0
7978 50 1810 0
7978 52 1808 0
7978 54 1806 0
7978 56 1804 0
7978 58 1802 0
7978 60 1800 0
7978 32 1814 0
7978 32 47 1812 0
7978 32 48 1810 0
7978 32 50 1808 0
7978 32 52 1806 0
7978 32 54 1804 0
7978 32 56 1802 0
7978 32 58 1800 0
7978 32 60 1799 0
7978 33 1812 0
7978 33 47 1810 0
7978 33 48 1808 0
7978 33 50 1806 0
7978 33 52 1804 0
7978 33 54 1802 0
7978 33 56 1800 0
7978 33 58 1799 0
7978 33 60 0
7978 35 1810 0
7978 35 47 1808 0
7978 35 48 1806 0
7978 35 50 1804 0
7978 35 52 1802 0
7978 35 54 1800 0
7978 35 56 1799 0
7978 35 58 0
7978 35 60 0
7978 37 1808 0
7978 37 47 1806 0
7978 37 48 1804 0
7978 37 50 1802 0
7978 37 52 1800 0
7978 37 54 1799 0
7978 37 56 0
7978 37 58 0
7978 37 60 0
7978 39 1806 0
7978 39 47 1804 0
7978 39 48 1802 0
7978 39 50 1800 0
7978 39 52 1799 0
7978 39 54 0
7978 39 56 0
7978 39 58 0
7978 39 60 0
7978 41 1804 0
7978 41 47 1802 0
7978 41 48 1800 0
7978 41 50 1799 0
7978 41 52 0
7978 41 54 0
7978 41 56 0
7978 41 58 0
7978 41 60 0
7978 43 1802 0
7978 43 47 1800 0
7978 43 48 1799 0
7978 43 50 0
7978 43 52 0
7978 43 54 0
7978 43 56 0
7978 43 58 0
7978 43 60 0
7978 45 1800 0
7978 45 47 1799 0
7978 45 48 0
7978 45 50 0
7978 45 52 0
7978 45 54 0
7978 45 56 0
7978 45 58 0
7978 45 60 0
c (((x_00001_00006 + x_00001_00007 + x_00001_00008)<=11)=tv=SATLiteral(7979))
-7979 92 120 0
-7979 93 118 0
-7979 95 116 0
-7979 97 114 0
-7979 99 112 0
-7979 101 110 0
-7979 103 108 0
-7979 105 107 0
-7979 77 120 0
-7979 77 92 118 0
-7979 77 93 116 0
-7979 77 95 114 0
-7979 77 97 112 0
-7979 77 99 110 0
-7979 77 101 108 0
-7979 77 103 107 0
-7979 77 105 0
-7979 78 118 0
-7979 78 92 116 0
-7979 78 93 114 0
-7979 78 95 112 0
-7979 78 97 110 0
-7979 78 99 108 0
-7979 78 101 107 0
-7979 78 103 0
-7979 78 105 0
-7979 80 116 0
-7979 80 92 114 0
-7979 80 93 112 0
-7979 80 95 110 0
-7979 80 97 108 0
-7979 80 99 107 0
-7979 80 101 0
-7979 80 103 0
-7979 80 105 0
-7979 82 114 0
-7979 82 92 112 0
-7979 82 93 110 0
-7979 82 95 108 0
-7979 82 97 107 0
-7979 82 99 0
-7979 82 101 0
-7979 82 103 0
-7979 82 105 0
-7979 84 112 0
-7979 84 92 110 0
-7979 84 93 108 0
-7979 84 95 107 0
-7979 84 97 0
-7979 84 99 0
-7979 84 101 0
-7979 84 103 0
-7979 84 105 0
-7979 86 110 0
-7979 86 92 108 0
-7979 86 93 107 0
-7979 86 95 0
-7979 86 97 0
-7979 86 99 0
-7979 86 101 0
-7979 86 103 0
-7979 86 105 0
-7979 88 108 0
-7979 88 92 107 0
-7979 88 93 0
-7979 88 95 0
-7979 88 97 0
-7979 88 99 0
-7979 88 101 0
-7979 88 103 0
-7979 88 105 0
-7979 90 107 0
-7979 90 92 0
-7979 90 93 0
-7979 90 95 0
-7979 90 97 0
-7979 90 99 0
-7979 90 101 0
-7979 90 103 0
-7979 90 105 0
7979 -92 -107 0
7979 -90 -93 -107 0
7979 -90 -92 -108 0
7979 -88 -95 -107 0
7979 -88 -93 -108 0
7979 -88 -92 -110 0
7979 -86 -97 -107 0
7979 -86 -95 -108 0
7979 -86 -93 -110 0
7979 -86 -92 -112 0
7979 -84 -99 -107 0
7979 -84 -97 -108 0
7979 -84 -95 -110 0
7979 -84 -93 -112 0
7979 -84 -92 -114 0
7979 -82 -101 -107 0
7979 -82 -99 -108 0
7979 -82 -97 -110 0
7979 -82 -95 -112 0
7979 -82 -93 -114 0
7979 -82 -92 -116 0
7979 -80 -103 -107 0
7979 -80 -101 -108 0
7979 -80 -99 -110 0
7979 -80 -97 -112 0
7979 -80 -95 -114 0
7979 -80 -93 -116 0
7979 -80 -92 -118 0
7979 -78 -105 -107 0
7979 -78 -103 -108 0
7979 -78 -101 -110 0
7979 -78 -99 -112 0
7979 -78 -97 -114 0
7979 -78 -95 -116 0
7979 -78 -93 -118 0
7979 -78 -92 -120 0
7979 -77 -107 0
7979 -77 -105 -108 0
7979 -77 -103 -110 0
7979 -77 -101 -112 0
7979 -77 -99 -114 0
7979 -77 -97 -116 0
7979 -77 -95 -118 0
7979 -77 -93 -120 0
7979 -77 -92 0
c ((11<=(x_00001_00006 + x_00001_00007 + x_00001_00008))=tv=SATLiteral(7980))
-7980 -90 -92 -107 0
-7980 -88 -93 -107 0
-7980 -88 -92 -108 0
-7980 -86 -95 -107 0
-7980 -86 -93 -108 0
-7980 -86 -92 -110 0
-7980 -84 -97 -107 0
-7980 -84 -95 -108 0
-7980 -84 -93 -110 0
-7980 -84 -92 -112 0
-7980 -82 -99 -107 0
-7980 -82 -97 -108 0
-7980 -82 -95 -110 0
-7980 -82 -93 -112 0
-7980 -82 -92 -114 0
-7980 -80 -101 -107 0
-7980 -80 -99 -108 0
-7980 -80 -97 -110 0
-7980 -80 -95 -112 0
-7980 -80 -93 -114 0
-7980 -80 -92 -116 0
-7980 -78 -103 -107 0
-7980 -78 -101 -108 0
-7980 -78 -99 -110 0
-7980 -78 -97 -112 0
-7980 -78 -95 -114 0
-7980 -78 -93 -116 0
-7980 -78 -92 -118 0
-7980 -77 -105 -107 0
-7980 -77 -103 -108 0
-7980 -77 -101 -110 0
-7980 -77 -99 -112 0
-7980 -77 -97 -114 0
-7980 -77 -95 -116 0
-7980 -77 -93 -118 0
-7980 -77 -92 -120 0
7980 120 0
7980 92 118 0
7980 93 116 0
7980 95 114 0
7980 97 112 0
7980 99 110 0
7980 101 108 0
7980 103 107 0
7980 105 0
7980 77 118 0
7980 77 92 116 0
7980 77 93 114 0
7980 77 95 112 0
7980 77 97 110 0
7980 77 99 108 0
7980 77 101 107 0
7980 77 103 0
7980 77 105 0
7980 78 116 0
7980 78 92 114 0
7980 78 93 112 0
7980 78 95 110 0
7980 78 97 108 0
7980 78 99 107 0
7980 78 101 0
7980 78 103 0
7980 78 105 0
7980 80 114 0
7980 80 92 112 0
7980 80 93 110 0
7980 80 95 108 0
7980 80 97 107 0
7980 80 99 0
7980 80 101 0
7980 80 103 0
7980 80 105 0
7980 82 112 0
7980 82 92 110 0
7980 82 93 108 0
7980 82 95 107 0
7980 82 97 0
7980 82 99 0
7980 82 101 0
7980 82 103 0
7980 82 105 0
7980 84 110 0
7980 84 92 108 0
7980 84 93 107 0
7980 84 95 0
7980 84 97 0
7980 84 99 0
7980 84 101 0
7980 84 103 0
7980 84 105 0
7980 86 108 0
7980 86 92 107 0
7980 86 93 0
7980 86 95 0
7980 86 97 0
7980 86 99 0
7980 86 101 0
7980 86 103 0
7980 86 105 0
7980 88 107 0
7980 88 92 0
7980 88 93 0
7980 88 95 0
7980 88 97 0
7980 88 99 0
7980 88 101 0
7980 88 103 0
7980 88 105 0
7980 90 0
7980 90 92 0
7980 90 93 0
7980 90 95 0
7980 90 97 0
7980 90 99 0
7980 90 101 0
7980 90 103 0
7980 90 105 0
c (((x_00002_00009 + x_00001_00009)<=11)=tv=SATLiteral(7981))
-7981 258 135 0
-7981 260 133 0
-7981 262 131 0
-7981 264 129 0
-7981 266 127 0
-7981 268 125 0
-7981 270 123 0
7981 -123 0
7981 -270 -125 0
7981 -268 -127 0
7981 -266 -129 0
7981 -264 -131 0
7981 -262 -133 0
7981 -260 -135 0
7981 -258 0
7981 -257 0
c ((11<=(x_00002_00009 + x_00001_00009))=tv=SATLiteral(7982))
-7982 -122 0
-7982 -270 -123 0
-7982 -268 -125 0
-7982 -266 -127 0
-7982 -264 -129 0
-7982 -262 -131 0
-7982 -260 -133 0
-7982 -258 -135 0
-7982 -257 0
7982 257 135 0
7982 258 133 0
7982 260 131 0
7982 262 129 0
7982 264 127 0
7982 266 125 0
7982 268 123 0
7982 270 122 0
c (((aux438 + shift(x_00003_00004, -1) + shift(x_00003_00005, -1))<=20)=tv=SATLiteral(7983))
-7983 339 1859 0
-7983 341 1857 0
-7983 343 1855 0
-7983 345 1853 0
-7983 317 337 1859 0
-7983 317 339 1857 0
-7983 317 341 1855 0
-7983 317 343 1853 0
-7983 317 345 1851 0
-7983 318 335 1859 0
-7983 318 337 1857 0
-7983 318 339 1855 0
-7983 318 341 1853 0
-7983 318 343 1851 0
-7983 318 345 1849 0
-7983 320 333 1859 0
-7983 320 335 1857 0
-7983 320 337 1855 0
-7983 320 339 1853 0
-7983 320 341 1851 0
-7983 320 343 1849 0
-7983 320 345 1847 0
-7983 322 332 1859 0
-7983 322 333 1857 0
-7983 322 335 1855 0
-7983 322 337 1853 0
-7983 322 339 1851 0
-7983 322 341 1849 0
-7983 322 343 1847 0
-7983 322 345 1845 0
-7983 324 1859 0
-7983 324 332 1857 0
-7983 324 333 1855 0
-7983 324 335 1853 0
-7983 324 337 1851 0
-7983 324 339 1849 0
-7983 324 341 1847 0
-7983 324 343 1845 0
-7983 324 345 1843 0
-7983 326 1857 0
-7983 326 332 1855 0
-7983 326 333 1853 0
-7983 326 335 1851 0
-7983 326 337 1849 0
-7983 326 339 1847 0
-7983 326 341 1845 0
-7983 326 343 1843 0
-7983 326 345 1841 0
-7983 328 1855 0
-7983 328 332 1853 0
-7983 328 333 1851 0
-7983 328 335 1849 0
-7983 328 337 1847 0
-7983 328 339 1845 0
-7983 328 341 1843 0
-7983 328 343 1841 0
-7983 328 345 1839 0
-7983 330 1853 0
-7983 330 332 1851 0
-7983 330 333 1849 0
-7983 330 335 1847 0
-7983 330 337 1845 0
-7983 330 339 1843 0
-7983 330 341 1841 0
-7983 330 343 1839 0
-7983 330 345 1837 0
7983 -1837 0
7983 -345 -1839 0
7983 -343 -1841 0
7983 -341 -1843 0
7983 -339 -1845 0
7983 -337 -1847 0
7983 -335 -1849 0
7983 -333 -1851 0
7983 -332 -1853 0
7983 -330 -1839 0
7983 -330 -345 -1841 0
7983 -330 -343 -1843 0
7983 -330 -341 -1845 0
7983 -330 -339 -1847 0
7983 -330 -337 -1849 0
7983 -330 -335 -1851 0
7983 -330 -333 -1853 0
7983 -330 -332 -1855 0
7983 -328 -1841 0
7983 -328 -345 -1843 0
7983 -328 -343 -1845 0
7983 -328 -341 -1847 0
7983 -328 -339 -1849 0
7983 -328 -337 -1851 0
7983 -328 -335 -1853 0
7983 -328 -333 -1855 0
7983 -328 -332 -1857 0
7983 -326 -1843 0
7983 -326 -345 -1845 0
7983 -326 -343 -1847 0
7983 -326 -341 -1849 0
7983 -326 -339 -1851 0
7983 -326 -337 -1853 0
7983 -326 -335 -1855 0
7983 -326 -333 -1857 0
7983 -326 -332 -1859 0
7983 -324 -1845 0
7983 -324 -345 -1847 0
7983 -324 -343 -1849 0
7983 -324 -341 -1851 0
7983 -324 -339 -1853 0
7983 -324 -337 -1855 0
7983 -324 -335 -1857 0
7983 -324 -333 -1859 0
7983 -324 -332 0
7983 -322 -1847 0
7983 -322 -345 -1849 0
7983 -322 -343 -1851 0
7983 -322 -341 -1853 0
7983 -322 -339 -1855 0
7983 -322 -337 -1857 0
7983 -322 -335 -1859 0
7983 -322 -333 0
7983 -322 -332 0
7983 -320 -1849 0
7983 -320 -345 -1851 0
7983 -320 -343 -1853 0
7983 -320 -341 -1855 0
7983 -320 -339 -1857 0
7983 -320 -337 -1859 0
7983 -320 -335 0
7983 -320 -333 0
7983 -320 -332 0
7983 -318 -1851 0
7983 -318 -345 -1853 0
7983 -318 -343 -1855 0
7983 -318 -341 -1857 0
7983 -318 -339 -1859 0
7983 -318 -337 0
7983 -318 -335 0
7983 -318 -333 0
7983 -318 -332 0
7983 -317 -1853 0
7983 -317 -345 -1855 0
7983 -317 -343 -1857 0
7983 -317 -341 -1859 0
7983 -317 -339 0
7983 -317 -337 0
7983 -317 -335 0
7983 -317 -333 0
7983 -317 -332 0
c ((20<=(aux438 + shift(x_00003_00004, -1) + shift(x_00003_00005, -1)))=tv=SATLiteral(7984))
-7984 -1835 0
-7984 -345 -1837 0
-7984 -343 -1839 0
-7984 -341 -1841 0
-7984 -339 -1843 0
-7984 -337 -1845 0
-7984 -335 -1847 0
-7984 -333 -1849 0
-7984 -332 -1851 0
-7984 -330 -1837 0
-7984 -330 -345 -1839 0
-7984 -330 -343 -1841 0
-7984 -330 -341 -1843 0
-7984 -330 -339 -1845 0
-7984 -330 -337 -1847 0
-7984 -330 -335 -1849 0
-7984 -330 -333 -1851 0
-7984 -330 -332 -1853 0
-7984 -328 -1839 0
-7984 -328 -345 -1841 0
-7984 -328 -343 -1843 0
-7984 -328 -341 -1845 0
-7984 -328 -339 -1847 0
-7984 -328 -337 -1849 0
-7984 -328 -335 -1851 0
-7984 -328 -333 -1853 0
-7984 -328 -332 -1855 0
-7984 -326 -1841 0
-7984 -326 -345 -1843 0
-7984 -326 -343 -1845 0
-7984 -326 -341 -1847 0
-7984 -326 -339 -1849 0
-7984 -326 -337 -1851 0
-7984 -326 -335 -1853 0
-7984 -326 -333 -1855 0
-7984 -326 -332 -1857 0
-7984 -324 -1843 0
-7984 -324 -345 -1845 0
-7984 -324 -343 -1847 0
-7984 -324 -341 -1849 0
-7984 -324 -339 -1851 0
-7984 -324 -337 -1853 0
-7984 -324 -335 -1855 0
-7984 -324 -333 -1857 0
-7984 -324 -332 -1859 0
-7984 -322 -1845 0
-7984 -322 -345 -1847 0
-7984 -322 -343 -1849 0
-7984 -322 -341 -1851 0
-7984 -322 -339 -1853 0
-7984 -322 -337 -1855 0
-7984 -322 -335 -1857 0
-7984 -322 -333 -1859 0
-7984 -322 -332 0
-7984 -320 -1847 0
-7984 -320 -345 -1849 0
-7984 -320 -343 -1851 0
-7984 -320 -341 -1853 0
-7984 -320 -339 -1855 0
-7984 -320 -337 -1857 0
-7984 -320 -335 -1859 0
-7984 -320 -333 0
-7984 -320 -332 0
-7984 -318 -1849 0
-7984 -318 -345 -1851 0
-7984 -318 -343 -1853 0
-7984 -318 -341 -1855 0
-7984 -318 -339 -1857 0
-7984 -318 -337 -1859 0
-7984 -318 -335 0
-7984 -318 -333 0
-7984 -318 -332 0
-7984 -317 -1851 0
-7984 -317 -345 -1853 0
-7984 -317 -343 -1855 0
-7984 -317 -341 -1857 0
-7984 -317 -339 -1859 0
-7984 -317 -337 0
-7984 -317 -335 0
-7984 -317 -333 0
-7984 -317 -332 0
7984 337 1859 0
7984 339 1857 0
7984 341 1855 0
7984 343 1853 0
7984 345 1851 0
7984 317 335 1859 0
7984 317 337 1857 0
7984 317 339 1855 0
7984 317 341 1853 0
7984 317 343 1851 0
7984 317 345 1849 0
7984 318 333 1859 0
7984 318 335 1857 0
7984 318 337 1855 0
7984 318 339 1853 0
7984 318 341 1851 0
7984 318 343 1849 0
7984 318 345 1847 0
7984 320 332 1859 0
7984 320 333 1857 0
7984 320 335 1855 0
7984 320 337 1853 0
7984 320 339 1851 0
7984 320 341 1849 0
7984 320 343 1847 0
7984 320 345 1845 0
7984 322 1859 0
7984 322 332 1857 0
7984 322 333 1855 0
7984 322 335 1853 0
7984 322 337 1851 0
7984 322 339 1849 0
7984 322 341 1847 0
7984 322 343 1845 0
7984 322 345 1843 0
7984 324 1857 0
7984 324 332 1855 0
7984 324 333 1853 0
7984 324 335 1851 0
7984 324 337 1849 0
7984 324 339 1847 0
7984 324 341 1845 0
7984 324 343 1843 0
7984 324 345 1841 0
7984 326 1855 0
7984 326 332 1853 0
7984 326 333 1851 0
7984 326 335 1849 0
7984 326 337 1847 0
7984 326 339 1845 0
7984 326 341 1843 0
7984 326 343 1841 0
7984 326 345 1839 0
7984 328 1853 0
7984 328 332 1851 0
7984 328 333 1849 0
7984 328 335 1847 0
7984 328 337 1845 0
7984 328 339 1843 0
7984 328 341 1841 0
7984 328 343 1839 0
7984 328 345 1837 0
7984 330 1851 0
7984 330 332 1849 0
7984 330 333 1847 0
7984 330 335 1845 0
7984 330 337 1843 0
7984 330 339 1841 0
7984 330 341 1839 0
7984 330 343 1837 0
7984 330 345 1835 0
c (((x_00002_00006 + x_00002_00007 + x_00002_00008)<=17)=tv=SATLiteral(7985))
-7985 238 255 0
-7985 240 253 0
-7985 212 236 255 0
-7985 212 238 253 0
-7985 212 240 251 0
-7985 213 234 255 0
-7985 213 236 253 0
-7985 213 238 251 0
-7985 213 240 249 0
-7985 215 232 255 0
-7985 215 234 253 0
-7985 215 236 251 0
-7985 215 238 249 0
-7985 215 240 247 0
-7985 217 230 255 0
-7985 217 232 253 0
-7985 217 234 251 0
-7985 217 236 249 0
-7985 217 238 247 0
-7985 217 240 245 0
-7985 219 228 255 0
-7985 219 230 253 0
-7985 219 232 251 0
-7985 219 234 249 0
-7985 219 236 247 0
-7985 219 238 245 0
-7985 219 240 243 0
-7985 221 227 255 0
-7985 221 228 253 0
-7985 221 230 251 0
-7985 221 232 249 0
-7985 221 234 247 0
-7985 221 236 245 0
-7985 221 238 243 0
-7985 221 240 242 0
-7985 223 255 0
-7985 223 227 253 0
-7985 223 228 251 0
-7985 223 230 249 0
-7985 223 232 247 0
-7985 223 234 245 0
-7985 223 236 243 0
-7985 223 238 242 0
-7985 223 240 0
-7985 225 253 0
-7985 225 227 251 0
-7985 225 228 249 0
-7985 225 230 247 0
-7985 225 232 245 0
-7985 225 234 243 0
-7985 225 236 242 0
-7985 225 238 0
-7985 225 240 0
7985 -238 -242 0
7985 -236 -243 0
7985 -234 -245 0
7985 -232 -247 0
7985 -230 -249 0
7985 -228 -251 0
7985 -227 -253 0
7985 -225 -240 -242 0
7985 -225 -238 -243 0
7985 -225 -236 -245 0
7985 -225 -234 -247 0
7985 -225 -232 -249 0
7985 -225 -230 -251 0
7985 -225 -228 -253 0
7985 -225 -227 -255 0
7985 -223 -242 0
7985 -223 -240 -243 0
7985 -223 -238 -245 0
7985 -223 -236 -247 0
7985 -223 -234 -249 0
7985 -223 -232 -251 0
7985 -223 -230 -253 0
7985 -223 -228 -255 0
7985 -223 -227 0
7985 -221 -243 0
7985 -221 -240 -245 0
7985 -221 -238 -247 0
7985 -221 -236 -249 0
7985 -221 -234 -251 0
7985 -221 -232 -253 0
7985 -221 -230 -255 0
7985 -221 -228 0
7985 -221 -227 0
7985 -219 -245 0
7985 -219 -240 -247 0
7985 -219 -238 -249 0
7985 -219 -236 -251 0
7985 -219 -234 -253 0
7985 -219 -232 -255 0
7985 -219 -230 0
7985 -219 -228 0
7985 -219 -227 0
7985 -217 -247 0
7985 -217 -240 -249 0
7985 -217 -238 -251 0
7985 -217 -236 -253 0
7985 -217 -234 -255 0
7985 -217 -232 0
7985 -217 -230 0
7985 -217 -228 0
7985 -217 -227 0
7985 -215 -249 0
7985 -215 -240 -251 0
7985 -215 -238 -253 0
7985 -215 -236 -255 0
7985 -215 -234 0
7985 -215 -232 0
7985 -215 -230 0
7985 -215 -228 0
7985 -215 -227 0
7985 -213 -251 0
7985 -213 -240 -253 0
7985 -213 -238 -255 0
7985 -213 -236 0
7985 -213 -234 0
7985 -213 -232 0
7985 -213 -230 0
7985 -213 -228 0
7985 -213 -227 0
7985 -212 -253 0
7985 -212 -240 -255 0
7985 -212 -238 0
7985 -212 -236 0
7985 -212 -234 0
7985 -212 -232 0
7985 -212 -230 0
7985 -212 -228 0
7985 -212 -227 0
c ((17<=(x_00002_00006 + x_00002_00007 + x_00002_00008))=tv=SATLiteral(7986))
-7986 -236 -242 0
-7986 -234 -243 0
-7986 -232 -245 0
-7986 -230 -247 0
-7986 -228 -249 0
-7986 -227 -251 0
-7986 -225 -238 -242 0
-7986 -225 -236 -243 0
-7986 -225 -234 -245 0
-7986 -225 -232 -247 0
-7986 -225 -230 -249 0
-7986 -225 -228 -251 0
-7986 -225 -227 -253 0
-7986 -223 -240 -242 0
-7986 -223 -238 -243 0
-7986 -223 -236 -245 0
-7986 -223 -234 -247 0
-7986 -223 -232 -249 0
-7986 -223 -230 -251 0
-7986 -223 -228 -253 0
-7986 -223 -227 -255 0
-7986 -221 -242 0
-7986 -221 -240 -243 0
-7986 -221 -238 -245 0
-7986 -221 -236 -247 0
-7986 -221 -234 -249 0
-7986 -221 -232 -251 0
-7986 -221 -230 -253 0
-7986 -221 -228 -255 0
-7986 -221 -227 0
-7986 -219 -243 0
-7986 -219 -240 -245 0
-7986 -219 -238 -247 0
-7986 -219 -236 -249 0
-7986 -219 -234 -251 0
-7986 -219 -232 -253 0
-7986 -219 -230 -255 0
-7986 -219 -228 0
-7986 -219 -227 0
-7986 -217 -245 0
-7986 -217 -240 -247 0
-7986 -217 -238 -249 0
-7986 -217 -236 -251 0
-7986 -217 -234 -253 0
-7986 -217 -232 -255 0
-7986 -217 -230 0
-7986 -217 -228 0
-7986 -217 -227 0
-7986 -215 -247 0
-7986 -215 -240 -249 0
-7986 -215 -238 -251 0
-7986 -215 -236 -253 0
-7986 -215 -234 -255 0
-7986 -215 -232 0
-7986 -215 -230 0
-7986 -215 -228 0
-7986 -215 -227 0
-7986 -213 -249 0
-7986 -213 -240 -251 0
-7986 -213 -238 -253 0
-7986 -213 -236 -255 0
-7986 -213 -234 0
-7986 -213 -232 0
-7986 -213 -230 0
-7986 -213 -228 0
-7986 -213 -227 0
-7986 -212 -251 0
-7986 -212 -240 -253 0
-7986 -212 -238 -255 0
-7986 -212 -236 0
-7986 -212 -234 0
-7986 -212 -232 0
-7986 -212 -230 0
-7986 -212 -228 0
-7986 -212 -227 0
7986 236 255 0
7986 238 253 0
7986 240 251 0
7986 212 234 255 0
7986 212 236 253 0
7986 212 238 251 0
7986 212 240 249 0
7986 213 232 255 0
7986 213 234 253 0
7986 213 236 251 0
7986 213 238 249 0
7986 213 240 247 0
7986 215 230 255 0
7986 215 232 253 0
7986 215 234 251 0
7986 215 236 249 0
7986 215 238 247 0
7986 215 240 245 0
7986 217 228 255 0
7986 217 230 253 0
7986 217 232 251 0
7986 217 234 249 0
7986 217 236 247 0
7986 217 238 245 0
7986 217 240 243 0
7986 219 227 255 0
7986 219 228 253 0
7986 219 230 251 0
7986 219 232 249 0
7986 219 234 247 0
7986 219 236 245 0
7986 219 238 243 0
7986 219 240 242 0
7986 221 255 0
7986 221 227 253 0
7986 221 228 251 0
7986 221 230 249 0
7986 221 232 247 0
7986 221 234 245 0
7986 221 236 243 0
7986 221 238 242 0
7986 221 240 0
7986 223 253 0
7986 223 227 251 0
7986 223 228 249 0
7986 223 230 247 0
7986 223 232 245 0
7986 223 234 243 0
7986 223 236 242 0
7986 223 238 0
7986 223 240 0
7986 225 251 0
7986 225 227 249 0
7986 225 228 247 0
7986 225 230 245 0
7986 225 232 243 0
7986 225 234 242 0
7986 225 236 0
7986 225 238 0
7986 225 240 0
c (((x_00003_00001 + x_00003_00002 + x_00003_00003)<=13)=tv=SATLiteral(7987))
-7987 290 315 0
-7987 292 313 0
-7987 294 311 0
-7987 296 309 0
-7987 298 307 0
-7987 300 305 0
-7987 272 288 315 0
-7987 272 290 313 0
-7987 272 292 311 0
-7987 272 294 309 0
-7987 272 296 307 0
-7987 272 298 305 0
-7987 272 300 303 0
-7987 273 287 315 0
-7987 273 288 313 0
-7987 273 290 311 0
-7987 273 292 309 0
-7987 273 294 307 0
-7987 273 296 305 0
-7987 273 298 303 0
-7987 273 300 302 0
-7987 275 315 0
-7987 275 287 313 0
-7987 275 288 311 0
-7987 275 290 309 0
-7987 275 292 307 0
-7987 275 294 305 0
-7987 275 296 303 0
-7987 275 298 302 0
-7987 275 300 0
-7987 277 313 0
-7987 277 287 311 0
-7987 277 288 309 0
-7987 277 290 307 0
-7987 277 292 305 0
-7987 277 294 303 0
-7987 277 296 302 0
-7987 277 298 0
-7987 277 300 0
-7987 279 311 0
-7987 279 287 309 0
-7987 279 288 307 0
-7987 279 290 305 0
-7987 279 292 303 0
-7987 279 294 302 0
-7987 279 296 0
-7987 279 298 0
-7987 279 300 0
-7987 281 309 0
-7987 281 287 307 0
-7987 281 288 305 0
-7987 281 290 303 0
-7987 281 292 302 0
-7987 281 294 0
-7987 281 296 0
-7987 281 298 0
-7987 281 300 0
-7987 283 307 0
-7987 283 287 305 0
-7987 283 288 303 0
-7987 283 290 302 0
-7987 283 292 0
-7987 283 294 0
-7987 283 296 0
-7987 283 298 0
-7987 283 300 0
-7987 285 305 0
-7987 285 287 303 0
-7987 285 288 302 0
-7987 285 290 0
-7987 285 292 0
-7987 285 294 0
-7987 285 296 0
-7987 285 298 0
-7987 285 300 0
7987 -290 -302 0
7987 -288 -303 0
7987 -287 -305 0
7987 -285 -292 -302 0
7987 -285 -290 -303 0
7987 -285 -288 -305 0
7987 -285 -287 -307 0
7987 -283 -294 -302 0
7987 -283 -292 -303 0
7987 -283 -290 -305 0
7987 -283 -288 -307 0
7987 -283 -287 -309 0
7987 -281 -296 -302 0
7987 -281 -294 -303 0
7987 -281 -292 -305 0
7987 -281 -290 -307 0
7987 -281 -288 -309 0
7987 -281 -287 -311 0
7987 -279 -298 -302 0
7987 -279 -296 -303 0
7987 -279 -294 -305 0
7987 -279 -292 -307 0
7987 -279 -290 -309 0
7987 -279 -288 -311 0
7987 -279 -287 -313 0
7987 -277 -300 -302 0
7987 -277 -298 -303 0
7987 -277 -296 -305 0
7987 -277 -294 -307 0
7987 -277 -292 -309 0
7987 -277 -290 -311 0
7987 -277 -288 -313 0
7987 -277 -287 -315 0
7987 -275 -302 0
7987 -275 -300 -303 0
7987 -275 -298 -305 0
7987 -275 -296 -307 0
7987 -275 -294 -309 0
7987 -275 -292 -311 0
7987 -275 -290 -313 0
7987 -275 -288 -315 0
7987 -275 -287 0
7987 -273 -303 0
7987 -273 -300 -305 0
7987 -273 -298 -307 0
7987 -273 -296 -309 0
7987 -273 -294 -311 0
7987 -273 -292 -313 0
7987 -273 -290 -315 0
7987 -273 -288 0
7987 -273 -287 0
7987 -272 -305 0
7987 -272 -300 -307 0
7987 -272 -298 -309 0
7987 -272 -296 -311 0
7987 -272 -294 -313 0
7987 -272 -292 -315 0
7987 -272 -290 0
7987 -272 -288 0
7987 -272 -287 0
c ((13<=(x_00003_00001 + x_00003_00002 + x_00003_00003))=tv=SATLiteral(7988))
-7988 -288 -302 0
-7988 -287 -303 0
-7988 -285 -290 -302 0
-7988 -285 -288 -303 0
-7988 -285 -287 -305 0
-7988 -283 -292 -302 0
-7988 -283 -290 -303 0
-7988 -283 -288 -305 0
-7988 -283 -287 -307 0
-7988 -281 -294 -302 0
-7988 -281 -292 -303 0
-7988 -281 -290 -305 0
-7988 -281 -288 -307 0
-7988 -281 -287 -309 0
-7988 -279 -296 -302 0
-7988 -279 -294 -303 0
-7988 -279 -292 -305 0
-7988 -279 -290 -307 0
-7988 -279 -288 -309 0
-7988 -279 -287 -311 0
-7988 -277 -298 -302 0
-7988 -277 -296 -303 0
-7988 -277 -294 -305 0
-7988 -277 -292 -307 0
-7988 -277 -290 -309 0
-7988 -277 -288 -311 0
-7988 -277 -287 -313 0
-7988 -275 -300 -302 0
-7988 -275 -298 -303 0
-7988 -275 -296 -305 0
-7988 -275 -294 -307 0
-7988 -275 -292 -309 0
-7988 -275 -290 -311 0
-7988 -275 -288 -313 0
-7988 -275 -287 -315 0
-7988 -273 -302 0
-7988 -273 -300 -303 0
-7988 -273 -298 -305 0
-7988 -273 -296 -307 0
-7988 -273 -294 -309 0
-7988 -273 -292 -311 0
-7988 -273 -290 -313 0
-7988 -273 -288 -315 0
-7988 -273 -287 0
-7988 -272 -303 0
-7988 -272 -300 -305 0
-7988 -272 -298 -307 0
-7988 -272 -296 -309 0
-7988 -272 -294 -311 0
-7988 -272 -292 -313 0
-7988 -272 -290 -315 0
-7988 -272 -288 0
-7988 -272 -287 0
7988 288 315 0
7988 290 313 0
7988 292 311 0
7988 294 309 0
7988 296 307 0
7988 298 305 0
7988 300 303 0
7988 272 287 315 0
7988 272 288 313 0
7988 272 290 311 0
7988 272 292 309 0
7988 272 294 307 0
7988 272 296 305 0
7988 272 298 303 0
7988 272 300 302 0
7988 273 315 0
7988 273 287 313 0
7988 273 288 311 0
7988 273 290 309 0
7988 273 292 307 0
7988 273 294 305 0
7988 273 296 303 0
7988 273 298 302 0
7988 273 300 0
7988 275 313 0
7988 275 287 311 0
7988 275 288 309 0
7988 275 290 307 0
7988 275 292 305 0
7988 275 294 303 0
7988 275 296 302 0
7988 275 298 0
7988 275 300 0
7988 277 311 0
7988 277 287 309 0
7988 277 288 307 0
7988 277 290 305 0
7988 277 292 303 0
7988 277 294 302 0
7988 277 296 0
7988 277 298 0
7988 277 300 0
7988 279 309 0
7988 279 287 307 0
7988 279 288 305 0
7988 279 290 303 0
7988 279 292 302 0
7988 279 294 0
7988 279 296 0
7988 279 298 0
7988 279 300 0
7988 281 307 0
7988 281 287 305 0
7988 281 288 303 0
7988 281 290 302 0
7988 281 292 0
7988 281 294 0
7988 281 296 0
7988 281 298 0
7988 281 300 0
7988 283 305 0
7988 283 287 303 0
7988 283 288 302 0
7988 283 290 0
7988 283 292 0
7988 283 294 0
7988 283 296 0
7988 283 298 0
7988 283 300 0
7988 285 303 0
7988 285 287 302 0
7988 285 288 0
7988 285 290 0
7988 285 292 0
7988 285 294 0
7988 285 296 0
7988 285 298 0
7988 285 300 0
c (((aux439 + shift(x_00005_00005, -1) + shift(x_00004_00006, -1))<=11)=tv=SATLiteral(7989))
-7989 1882 0
-7989 482 1880 0
-7989 483 1878 0
-7989 485 1876 0
-7989 487 1874 0
-7989 489 1872 0
-7989 491 1870 0
-7989 493 1868 0
-7989 495 1866 0
-7989 602 1880 0
-7989 602 482 1878 0
-7989 602 483 1876 0
-7989 602 485 1874 0
-7989 602 487 1872 0
-7989 602 489 1870 0
-7989 602 491 1868 0
-7989 602 493 1866 0
-7989 602 495 1864 0
-7989 603 1878 0
-7989 603 482 1876 0
-7989 603 483 1874 0
-7989 603 485 1872 0
-7989 603 487 1870 0
-7989 603 489 1868 0
-7989 603 491 1866 0
-7989 603 493 1864 0
-7989 603 495 1862 0
-7989 605 1876 0
-7989 605 482 1874 0
-7989 605 483 1872 0
-7989 605 485 1870 0
-7989 605 487 1868 0
-7989 605 489 1866 0
-7989 605 491 1864 0
-7989 605 493 1862 0
-7989 605 495 1861 0
-7989 607 1874 0
-7989 607 482 1872 0
-7989 607 483 1870 0
-7989 607 485 1868 0
-7989 607 487 1866 0
-7989 607 489 1864 0
-7989 607 491 1862 0
-7989 607 493 1861 0
-7989 607 495 0
-7989 609 1872 0
-7989 609 482 1870 0
-7989 609 483 1868 0
-7989 609 485 1866 0
-7989 609 487 1864 0
-7989 609 489 1862 0
-7989 609 491 1861 0
-7989 609 493 0
-7989 609 495 0
-7989 611 1870 0
-7989 611 482 1868 0
-7989 611 483 1866 0
-7989 611 485 1864 0
-7989 611 487 1862 0
-7989 611 489 1861 0
-7989 611 491 0
-7989 611 493 0
-7989 611 495 0
-7989 613 1868 0
-7989 613 482 1866 0
-7989 613 483 1864 0
-7989 613 485 1862 0
-7989 613 487 1861 0
-7989 613 489 0
-7989 613 491 0
-7989 613 493 0
-7989 613 495 0
-7989 615 1866 0
-7989 615 482 1864 0
-7989 615 483 1862 0
-7989 615 485 1861 0
-7989 615 487 0
-7989 615 489 0
-7989 615 491 0
-7989 615 493 0
-7989 615 495 0
7989 -487 -1861 0
7989 -485 -1862 0
7989 -483 -1864 0
7989 -482 -1866 0
7989 -615 -489 -1861 0
7989 -615 -487 -1862 0
7989 -615 -485 -1864 0
7989 -615 -483 -1866 0
7989 -615 -482 -1868 0
7989 -613 -491 -1861 0
7989 -613 -489 -1862 0
7989 -613 -487 -1864 0
7989 -613 -485 -1866 0
7989 -613 -483 -1868 0
7989 -613 -482 -1870 0
7989 -611 -493 -1861 0
7989 -611 -491 -1862 0
7989 -611 -489 -1864 0
7989 -611 -487 -1866 0
7989 -611 -485 -1868 0
7989 -611 -483 -1870 0
7989 -611 -482 -1872 0
7989 -609 -495 -1861 0
7989 -609 -493 -1862 0
7989 -609 -491 -1864 0
7989 -609 -489 -1866 0
7989 -609 -487 -1868 0
7989 -609 -485 -1870 0
7989 -609 -483 -1872 0
7989 -609 -482 -1874 0
7989 -607 -1861 0
7989 -607 -495 -1862 0
7989 -607 -493 -1864 0
7989 -607 -491 -1866 0
7989 -607 -489 -1868 0
7989 -607 -487 -1870 0
7989 -607 -485 -1872 0
7989 -607 -483 -1874 0
7989 -607 -482 -1876 0
7989 -605 -1862 0
7989 -605 -495 -1864 0
7989 -605 -493 -1866 0
7989 -605 -491 -1868 0
7989 -605 -489 -1870 0
7989 -605 -487 -1872 0
7989 -605 -485 -1874 0
7989 -605 -483 -1876 0
7989 -605 -482 -1878 0
7989 -603 -1864 0
7989 -603 -495 -1866 0
7989 -603 -493 -1868 0
7989 -603 -491 -1870 0
7989 -603 -489 -1872 0
7989 -603 -487 -1874 0
7989 -603 -485 -1876 0
7989 -603 -483 -1878 0
7989 -603 -482 -1880 0
7989 -602 -1866 0
7989 -602 -495 -1868 0
7989 -602 -493 -1870 0
7989 -602 -491 -1872 0
7989 -602 -489 -1874 0
7989 -602 -487 -1876 0
7989 -602 -485 -1878 0
7989 -602 -483 -1880 0
7989 -602 -482 -1882 0
c ((11<=(aux439 + shift(x_00005_00005, -1) + shift(x_00004_00006, -1)))=tv=SATLiteral(7990))
-7990 -485 -1861 0
-7990 -483 -1862 0
-7990 -482 -1864 0
-7990 -615 -487 -1861 0
-7990 -615 -485 -1862 0
-7990 -615 -483 -1864 0
-7990 -615 -482 -1866 0
-7990 -613 -489 -1861 0
-7990 -613 -487 -1862 0
-7990 -613 -485 -1864 0
-7990 -613 -483 -1866 0
-7990 -613 -482 -1868 0
-7990 -611 -491 -1861 0
-7990 -611 -489 -1862 0
-7990 -611 -487 -1864 0
-7990 -611 -485 -1866 0
-7990 -611 -483 -1868 0
-7990 -611 -482 -1870 0
-7990 -609 -493 -1861 0
-7990 -609 -491 -1862 0
-7990 -609 -489 -1864 0
-7990 -609 -487 -1866 0
-7990 -609 -485 -1868 0
-7990 -609 -483 -1870 0
-7990 -609 -482 -1872 0
-7990 -607 -495 -1861 0
-7990 -607 -493 -1862 0
-7990 -607 -491 -1864 0
-7990 -607 -489 -1866 0
-7990 -607 -487 -1868 0
-7990 -607 -485 -1870 0
-7990 -607 -483 -1872 0
-7990 -607 -482 -1874 0
-7990 -605 -1861 0
-7990 -605 -495 -1862 0
-7990 -605 -493 -1864 0
-7990 -605 -491 -1866 0
-7990 -605 -489 -1868 0
-7990 -605 -487 -1870 0
-7990 -605 -485 -1872 0
-7990 -605 -483 -1874 0
-7990 -605 -482 -1876 0
-7990 -603 -1862 0
-7990 -603 -495 -1864 0
-7990 -603 -493 -1866 0
-7990 -603 -491 -1868 0
-7990 -603 -489 -1870 0
-7990 -603 -487 -1872 0
-7990 -603 -485 -1874 0
-7990 -603 -483 -1876 0
-7990 -603 -482 -1878 0
-7990 -602 -1864 0
-7990 -602 -495 -1866 0
-7990 -602 -493 -1868 0
-7990 -602 -491 -1870 0
-7990 -602 -489 -1872 0
-7990 -602 -487 -1874 0
-7990 -602 -485 -1876 0
-7990 -602 -483 -1878 0
-7990 -602 -482 -1880 0
7990 1880 0
7990 482 1878 0
7990 483 1876 0
7990 485 1874 0
7990 487 1872 0
7990 489 1870 0
7990 491 1868 0
7990 493 1866 0
7990 495 1864 0
7990 602 1878 0
7990 602 482 1876 0
7990 602 483 1874 0
7990 602 485 1872 0
7990 602 487 1870 0
7990 602 489 1868 0
7990 602 491 1866 0
7990 602 493 1864 0
7990 602 495 1862 0
7990 603 1876 0
7990 603 482 1874 0
7990 603 483 1872 0
7990 603 485 1870 0
7990 603 487 1868 0
7990 603 489 1866 0
7990 603 491 1864 0
7990 603 493 1862 0
7990 603 495 1861 0
7990 605 1874 0
7990 605 482 1872 0
7990 605 483 1870 0
7990 605 485 1868 0
7990 605 487 1866 0
7990 605 489 1864 0
7990 605 491 1862 0
7990 605 493 1861 0
7990 605 495 0
7990 607 1872 0
7990 607 482 1870 0
7990 607 483 1868 0
7990 607 485 1866 0
7990 607 487 1864 0
7990 607 489 1862 0
7990 607 491 1861 0
7990 607 493 0
7990 607 495 0
7990 609 1870 0
7990 609 482 1868 0
7990 609 483 1866 0
7990 609 485 1864 0
7990 609 487 1862 0
7990 609 489 1861 0
7990 609 491 0
7990 609 493 0
7990 609 495 0
7990 611 1868 0
7990 611 482 1866 0
7990 611 483 1864 0
7990 611 485 1862 0
7990 611 487 1861 0
7990 611 489 0
7990 611 491 0
7990 611 493 0
7990 611 495 0
7990 613 1866 0
7990 613 482 1864 0
7990 613 483 1862 0
7990 613 485 1861 0
7990 613 487 0
7990 613 489 0
7990 613 491 0
7990 613 493 0
7990 613 495 0
7990 615 1864 0
7990 615 482 1862 0
7990 615 483 1861 0
7990 615 485 0
7990 615 487 0
7990 615 489 0
7990 615 491 0
7990 615 493 0
7990 615 495 0
c (((x_00003_00007 + x_00003_00008 + x_00004_00008)<=11)=tv=SATLiteral(7991))
-7991 377 525 0
-7991 378 523 0
-7991 380 521 0
-7991 382 519 0
-7991 384 517 0
-7991 386 515 0
-7991 388 513 0
-7991 390 512 0
-7991 362 525 0
-7991 362 377 523 0
-7991 362 378 521 0
-7991 362 380 519 0
-7991 362 382 517 0
-7991 362 384 515 0
-7991 362 386 513 0
-7991 362 388 512 0
-7991 362 390 0
-7991 363 523 0
-7991 363 377 521 0
-7991 363 378 519 0
-7991 363 380 517 0
-7991 363 382 515 0
-7991 363 384 513 0
-7991 363 386 512 0
-7991 363 388 0
-7991 363 390 0
-7991 365 521 0
-7991 365 377 519 0
-7991 365 378 517 0
-7991 365 380 515 0
-7991 365 382 513 0
-7991 365 384 512 0
-7991 365 386 0
-7991 365 388 0
-7991 365 390 0
-7991 367 519 0
-7991 367 377 517 0
-7991 367 378 515 0
-7991 367 380 513 0
-7991 367 382 512 0
-7991 367 384 0
-7991 367 386 0
-7991 367 388 0
-7991 367 390 0
-7991 369 517 0
-7991 369 377 515 0
-7991 369 378 513 0
-7991 369 380 512 0
-7991 369 382 0
-7991 369 384 0
-7991 369 386 0
-7991 369 388 0
-7991 369 390 0
-7991 371 515 0
-7991 371 377 513 0
-7991 371 378 512 0
-7991 371 380 0
-7991 371 382 0
-7991 371 384 0
-7991 371 386 0
-7991 371 388 0
-7991 371 390 0
-7991 373 513 0
-7991 373 377 512 0
-7991 373 378 0
-7991 373 380 0
-7991 373 382 0
-7991 373 384 0
-7991 373 386 0
-7991 373 388 0
-7991 373 390 0
-7991 375 512 0
-7991 375 377 0
-7991 375 378 0
-7991 375 380 0
-7991 375 382 0
-7991 375 384 0
-7991 375 386 0
-7991 375 388 0
-7991 375 390 0
7991 -377 -512 0
7991 -375 -378 -512 0
7991 -375 -377 -513 0
7991 -373 -380 -512 0
7991 -373 -378 -513 0
7991 -373 -377 -515 0
7991 -371 -382 -512 0
7991 -371 -380 -513 0
7991 -371 -378 -515 0
7991 -371 -377 -517 0
7991 -369 -384 -512 0
7991 -369 -382 -513 0
7991 -369 -380 -515 0
7991 -369 -378 -517 0
7991 -369 -377 -519 0
7991 -367 -386 -512 0
7991 -367 -384 -513 0
7991 -367 -382 -515 0
7991 -367 -380 -517 0
7991 -367 -378 -519 0
7991 -367 -377 -521 0
7991 -365 -388 -512 0
7991 -365 -386 -513 0
7991 -365 -384 -515 0
7991 -365 -382 -517 0
7991 -365 -380 -519 0
7991 -365 -378 -521 0
7991 -365 -377 -523 0
7991 -363 -390 -512 0
7991 -363 -388 -513 0
7991 -363 -386 -515 0
7991 -363 -384 -517 0
7991 -363 -382 -519 0
7991 -363 -380 -521 0
7991 -363 -378 -523 0
7991 -363 -377 -525 0
7991 -362 -512 0
7991 -362 -390 -513 0
7991 -362 -388 -515 0
7991 -362 -386 -517 0
7991 -362 -384 -519 0
7991 -362 -382 -521 0
7991 -362 -380 -523 0
7991 -362 -378 -525 0
7991 -362 -377 0
c ((11<=(x_00003_00007 + x_00003_00008 + x_00004_00008))=tv=SATLiteral(7992))
-7992 -375 -377 -512 0
-7992 -373 -378 -512 0
-7992 -373 -377 -513 0
-7992 -371 -380 -512 0
-7992 -371 -378 -513 0
-7992 -371 -377 -515 0
-7992 -369 -382 -512 0
-7992 -369 -380 -513 0
-7992 -369 -378 -515 0
-7992 -369 -377 -517 0
-7992 -367 -384 -512 0
-7992 -367 -382 -513 0
-7992 -367 -380 -515 0
-7992 -367 -378 -517 0
-7992 -367 -377 -519 0
-7992 -365 -386 -512 0
-7992 -365 -384 -513 0
-7992 -365 -382 -515 0
-7992 -365 -380 -517 0
-7992 -365 -378 -519 0
-7992 -365 -377 -521 0
-7992 -363 -388 -512 0
-7992 -363 -386 -513 0
-7992 -363 -384 -515 0
-7992 -363 -382 -517 0
-7992 -363 -380 -519 0
-7992 -363 -378 -521 0
-7992 -363 -377 -523 0
-7992 -362 -390 -512 0
-7992 -362 -388 -513 0
-7992 -362 -386 -515 0
-7992 -362 -384 -517 0
-7992 -362 -382 -519 0
-7992 -362 -380 -521 0
-7992 -362 -378 -523 0
-7992 -362 -377 -525 0
7992 525 0
7992 377 523 0
7992 378 521 0
7992 380 519 0
7992 382 517 0
7992 384 515 0
7992 386 513 0
7992 388 512 0
7992 390 0
7992 362 523 0
7992 362 377 521 0
7992 362 378 519 0
7992 362 380 517 0
7992 362 382 515 0
7992 362 384 513 0
7992 362 386 512 0
7992 362 388 0
7992 362 390 0
7992 363 521 0
7992 363 377 519 0
7992 363 378 517 0
7992 363 380 515 0
7992 363 382 513 0
7992 363 384 512 0
7992 363 386 0
7992 363 388 0
7992 363 390 0
7992 365 519 0
7992 365 377 517 0
7992 365 378 515 0
7992 365 380 513 0
7992 365 382 512 0
7992 365 384 0
7992 365 386 0
7992 365 388 0
7992 365 390 0
7992 367 517 0
7992 367 377 515 0
7992 367 378 513 0
7992 367 380 512 0
7992 367 382 0
7992 367 384 0
7992 367 386 0
7992 367 388 0
7992 367 390 0
7992 369 515 0
7992 369 377 513 0
7992 369 378 512 0
7992 369 380 0
7992 369 382 0
7992 369 384 0
7992 369 386 0
7992 369 388 0
7992 369 390 0
7992 371 513 0
7992 371 377 512 0
7992 371 378 0
7992 371 380 0
7992 371 382 0
7992 371 384 0
7992 371 386 0
7992 371 388 0
7992 371 390 0
7992 373 512 0
7992 373 377 0
7992 373 378 0
7992 373 380 0
7992 373 382 0
7992 373 384 0
7992 373 386 0
7992 373 388 0
7992 373 390 0
7992 375 0
7992 375 377 0
7992 375 378 0
7992 375 380 0
7992 375 382 0
7992 375 384 0
7992 375 386 0
7992 375 388 0
7992 375 390 0
c (((x_00004_00001 + x_00004_00002 + x_00005_00001)<=15)=tv=SATLiteral(7993))
-7993 429 555 0
-7993 431 553 0
-7993 433 551 0
-7993 435 549 0
-7993 407 427 555 0
-7993 407 429 553 0
-7993 407 431 551 0
-7993 407 433 549 0
-7993 407 435 547 0
-7993 408 425 555 0
-7993 408 427 553 0
-7993 408 429 551 0
-7993 408 431 549 0
-7993 408 433 547 0
-7993 408 435 545 0
-7993 410 423 555 0
-7993 410 425 553 0
-7993 410 427 551 0
-7993 410 429 549 0
-7993 410 431 547 0
-7993 410 433 545 0
-7993 410 435 543 0
-7993 412 422 555 0
-7993 412 423 553 0
-7993 412 425 551 0
-7993 412 427 549 0
-7993 412 429 547 0
-7993 412 431 545 0
-7993 412 433 543 0
-7993 412 435 542 0
-7993 414 555 0
-7993 414 422 553 0
-7993 414 423 551 0
-7993 414 425 549 0
-7993 414 427 547 0
-7993 414 429 545 0
-7993 414 431 543 0
-7993 414 433 542 0
-7993 414 435 0
-7993 416 553 0
-7993 416 422 551 0
-7993 416 423 549 0
-7993 416 425 547 0
-7993 416 427 545 0
-7993 416 429 543 0
-7993 416 431 542 0
-7993 416 433 0
-7993 416 435 0
-7993 418 551 0
-7993 418 422 549 0
-7993 418 423 547 0
-7993 418 425 545 0
-7993 418 427 543 0
-7993 418 429 542 0
-7993 418 431 0
-7993 418 433 0
-7993 418 435 0
-7993 420 549 0
-7993 420 422 547 0
-7993 420 423 545 0
-7993 420 425 543 0
-7993 420 427 542 0
-7993 420 429 0
-7993 420 431 0
-7993 420 433 0
-7993 420 435 0
7993 -429 -542 0
7993 -427 -543 0
7993 -425 -545 0
7993 -423 -547 0
7993 -422 -549 0
7993 -420 -431 -542 0
7993 -420 -429 -543 0
7993 -420 -427 -545 0
7993 -420 -425 -547 0
7993 -420 -423 -549 0
7993 -420 -422 -551 0
7993 -418 -433 -542 0
7993 -418 -431 -543 0
7993 -418 -429 -545 0
7993 -418 -427 -547 0
7993 -418 -425 -549 0
7993 -418 -423 -551 0
7993 -418 -422 -553 0
7993 -416 -435 -542 0
7993 -416 -433 -543 0
7993 -416 -431 -545 0
7993 -416 -429 -547 0
7993 -416 -427 -549 0
7993 -416 -425 -551 0
7993 -416 -423 -553 0
7993 -416 -422 -555 0
7993 -414 -542 0
7993 -414 -435 -543 0
7993 -414 -433 -545 0
7993 -414 -431 -547 0
7993 -414 -429 -549 0
7993 -414 -427 -551 0
7993 -414 -425 -553 0
7993 -414 -423 -555 0
7993 -414 -422 0
7993 -412 -543 0
7993 -412 -435 -545 0
7993 -412 -433 -547 0
7993 -412 -431 -549 0
7993 -412 -429 -551 0
7993 -412 -427 -553 0
7993 -412 -425 -555 0
7993 -412 -423 0
7993 -412 -422 0
7993 -410 -545 0
7993 -410 -435 -547 0
7993 -410 -433 -549 0
7993 -410 -431 -551 0
7993 -410 -429 -553 0
7993 -410 -427 -555 0
7993 -410 -425 0
7993 -410 -423 0
7993 -410 -422 0
7993 -408 -547 0
7993 -408 -435 -549 0
7993 -408 -433 -551 0
7993 -408 -431 -553 0
7993 -408 -429 -555 0
7993 -408 -427 0
7993 -408 -425 0
7993 -408 -423 0
7993 -408 -422 0
7993 -407 -549 0
7993 -407 -435 -551 0
7993 -407 -433 -553 0
7993 -407 -431 -555 0
7993 -407 -429 0
7993 -407 -427 0
7993 -407 -425 0
7993 -407 -423 0
7993 -407 -422 0
c ((15<=(x_00004_00001 + x_00004_00002 + x_00005_00001))=tv=SATLiteral(7994))
-7994 -427 -542 0
-7994 -425 -543 0
-7994 -423 -545 0
-7994 -422 -547 0
-7994 -420 -429 -542 0
-7994 -420 -427 -543 0
-7994 -420 -425 -545 0
-7994 -420 -423 -547 0
-7994 -420 -422 -549 0
-7994 -418 -431 -542 0
-7994 -418 -429 -543 0
-7994 -418 -427 -545 0
-7994 -418 -425 -547 0
-7994 -418 -423 -549 0
-7994 -418 -422 -551 0
-7994 -416 -433 -542 0
-7994 -416 -431 -543 0
-7994 -416 -429 -545 0
-7994 -416 -427 -547 0
-7994 -416 -425 -549 0
-7994 -416 -423 -551 0
-7994 -416 -422 -553 0
-7994 -414 -435 -542 0
-7994 -414 -433 -543 0
-7994 -414 -431 -545 0
-7994 -414 -429 -547 0
-7994 -414 -427 -549 0
-7994 -414 -425 -551 0
-7994 -414 -423 -553 0
-7994 -414 -422 -555 0
-7994 -412 -542 0
-7994 -412 -435 -543 0
-7994 -412 -433 -545 0
-7994 -412 -431 -547 0
-7994 -412 -429 -549 0
-7994 -412 -427 -551 0
-7994 -412 -425 -553 0
-7994 -412 -423 -555 0
-7994 -412 -422 0
-7994 -410 -543 0
-7994 -410 -435 -545 0
-7994 -410 -433 -547 0
-7994 -410 -431 -549 0
-7994 -410 -429 -551 0
-7994 -410 -427 -553 0
-7994 -410 -425 -555 0
-7994 -410 -423 0
-7994 -410 -422 0
-7994 -408 -545 0
-7994 -408 -435 -547 0
-7994 -408 -433 -549 0
-7994 -408 -431 -551 0
-7994 -408 -429 -553 0
-7994 -408 -427 -555 0
-7994 -408 -425 0
-7994 -408 -423 0
-7994 -408 -422 0
-7994 -407 -547 0
-7994 -407 -435 -549 0
-7994 -407 -433 -551 0
-7994 -407 -431 -553 0
-7994 -407 -429 -555 0
-7994 -407 -427 0
-7994 -407 -425 0
-7994 -407 -423 0
-7994 -407 -422 0
7994 427 555 0
7994 429 553 0
7994 431 551 0
7994 433 549 0
7994 435 547 0
7994 407 425 555 0
7994 407 427 553 0
7994 407 429 551 0
7994 407 431 549 0
7994 407 433 547 0
7994 407 435 545 0
7994 408 423 555 0
7994 408 425 553 0
7994 408 427 551 0
7994 408 429 549 0
7994 408 431 547 0
7994 408 433 545 0
7994 408 435 543 0
7994 410 422 555 0
7994 410 423 553 0
7994 410 425 551 0
7994 410 427 549 0
7994 410 429 547 0
7994 410 431 545 0
7994 410 433 543 0
7994 410 435 542 0
7994 412 555 0
7994 412 422 553 0
7994 412 423 551 0
7994 412 425 549 0
7994 412 427 547 0
7994 412 429 545 0
7994 412 431 543 0
7994 412 433 542 0
7994 412 435 0
7994 414 553 0
7994 414 422 551 0
7994 414 423 549 0
7994 414 425 547 0
7994 414 427 545 0
7994 414 429 543 0
7994 414 431 542 0
7994 414 433 0
7994 414 435 0
7994 416 551 0
7994 416 422 549 0
7994 416 423 547 0
7994 416 425 545 0
7994 416 427 543 0
7994 416 429 542 0
7994 416 431 0
7994 416 433 0
7994 416 435 0
7994 418 549 0
7994 418 422 547 0
7994 418 423 545 0
7994 418 425 543 0
7994 418 427 542 0
7994 418 429 0
7994 418 431 0
7994 418 433 0
7994 418 435 0
7994 420 547 0
7994 420 422 545 0
7994 420 423 543 0
7994 420 425 542 0
7994 420 427 0
7994 420 429 0
7994 420 431 0
7994 420 433 0
7994 420 435 0
c (((x_00004_00003 + x_00005_00002 + x_00005_00003)<=18)=tv=SATLiteral(7995))
-7995 570 585 0
-7995 437 568 585 0
-7995 437 570 583 0
-7995 438 566 585 0
-7995 438 568 583 0
-7995 438 570 581 0
-7995 440 564 585 0
-7995 440 566 583 0
-7995 440 568 581 0
-7995 440 570 579 0
-7995 442 562 585 0
-7995 442 564 583 0
-7995 442 566 581 0
-7995 442 568 579 0
-7995 442 570 577 0
-7995 444 560 585 0
-7995 444 562 583 0
-7995 444 564 581 0
-7995 444 566 579 0
-7995 444 568 577 0
-7995 444 570 575 0
-7995 446 558 585 0
-7995 446 560 583 0
-7995 446 562 581 0
-7995 446 564 579 0
-7995 446 566 577 0
-7995 446 568 575 0
-7995 446 570 573 0
-7995 448 557 585 0
-7995 448 558 583 0
-7995 448 560 581 0
-7995 448 562 579 0
-7995 448 564 577 0
-7995 448 566 575 0
-7995 448 568 573 0
-7995 448 570 572 0
-7995 450 585 0
-7995 450 557 583 0
-7995 450 558 581 0
-7995 450 560 579 0
-7995 450 562 577 0
-7995 450 564 575 0
-7995 450 566 573 0
-7995 450 568 572 0
-7995 450 570 0
7995 -570 -572 0
7995 -568 -573 0
7995 -566 -575 0
7995 -564 -577 0
7995 -562 -579 0
7995 -560 -581 0
7995 -558 -583 0
7995 -557 -585 0
7995 -450 -572 0
7995 -450 -570 -573 0
7995 -450 -568 -575 0
7995 -450 -566 -577 0
7995 -450 -564 -579 0
7995 -450 -562 -581 0
7995 -450 -560 -583 0
7995 -450 -558 -585 0
7995 -450 -557 0
7995 -448 -573 0
7995 -448 -570 -575 0
7995 -448 -568 -577 0
7995 -448 -566 -579 0
7995 -448 -564 -581 0
7995 -448 -562 -583 0
7995 -448 -560 -585 0
7995 -448 -558 0
7995 -448 -557 0
7995 -446 -575 0
7995 -446 -570 -577 0
7995 -446 -568 -579 0
7995 -446 -566 -581 0
7995 -446 -564 -583 0
7995 -446 -562 -585 0
7995 -446 -560 0
7995 -446 -558 0
7995 -446 -557 0
7995 -444 -577 0
7995 -444 -570 -579 0
7995 -444 -568 -581 0
7995 -444 -566 -583 0
7995 -444 -564 -585 0
7995 -444 -562 0
7995 -444 -560 0
7995 -444 -558 0
7995 -444 -557 0
7995 -442 -579 0
7995 -442 -570 -581 0
7995 -442 -568 -583 0
7995 -442 -566 -585 0
7995 -442 -564 0
7995 -442 -562 0
7995 -442 -560 0
7995 -442 -558 0
7995 -442 -557 0
7995 -440 -581 0
7995 -440 -570 -583 0
7995 -440 -568 -585 0
7995 -440 -566 0
7995 -440 -564 0
7995 -440 -562 0
7995 -440 -560 0
7995 -440 -558 0
7995 -440 -557 0
7995 -438 -583 0
7995 -438 -570 -585 0
7995 -438 -568 0
7995 -438 -566 0
7995 -438 -564 0
7995 -438 -562 0
7995 -438 -560 0
7995 -438 -558 0
7995 -438 -557 0
7995 -437 -585 0
7995 -437 -570 0
7995 -437 -568 0
7995 -437 -566 0
7995 -437 -564 0
7995 -437 -562 0
7995 -437 -560 0
7995 -437 -558 0
7995 -437 -557 0
c ((18<=(x_00004_00003 + x_00005_00002 + x_00005_00003))=tv=SATLiteral(7996))
-7996 -568 -572 0
-7996 -566 -573 0
-7996 -564 -575 0
-7996 -562 -577 0
-7996 -560 -579 0
-7996 -558 -581 0
-7996 -557 -583 0
-7996 -450 -570 -572 0
-7996 -450 -568 -573 0
-7996 -450 -566 -575 0
-7996 -450 -564 -577 0
-7996 -450 -562 -579 0
-7996 -450 -560 -581 0
-7996 -450 -558 -583 0
-7996 -450 -557 -585 0
-7996 -448 -572 0
-7996 -448 -570 -573 0
-7996 -448 -568 -575 0
-7996 -448 -566 -577 0
-7996 -448 -564 -579 0
-7996 -448 -562 -581 0
-7996 -448 -560 -583 0
-7996 -448 -558 -585 0
-7996 -448 -557 0
-7996 -446 -573 0
-7996 -446 -570 -575 0
-7996 -446 -568 -577 0
-7996 -446 -566 -579 0
-7996 -446 -564 -581 0
-7996 -446 -562 -583 0
-7996 -446 -560 -585 0
-7996 -446 -558 0
-7996 -446 -557 0
-7996 -444 -575 0
-7996 -444 -570 -577 0
-7996 -444 -568 -579 0
-7996 -444 -566 -581 0
-7996 -444 -564 -583 0
-7996 -444 -562 -585 0
-7996 -444 -560 0
-7996 -444 -558 0
-7996 -444 -557 0
-7996 -442 -577 0
-7996 -442 -570 -579 0
-7996 -442 -568 -581 0
-7996 -442 -566 -583 0
-7996 -442 -564 -585 0
-7996 -442 -562 0
-7996 -442 -560 0
-7996 -442 -558 0
-7996 -442 -557 0
-7996 -440 -579 0
-7996 -440 -570 -581 0
-7996 -440 -568 -583 0
-7996 -440 -566 -585 0
-7996 -440 -564 0
-7996 -440 -562 0
-7996 -440 -560 0
-7996 -440 -558 0
-7996 -440 -557 0
-7996 -438 -581 0
-7996 -438 -570 -583 0
-7996 -438 -568 -585 0
-7996 -438 -566 0
-7996 -438 -564 0
-7996 -438 -562 0
-7996 -438 -560 0
-7996 -438 -558 0
-7996 -438 -557 0
-7996 -437 -583 0
-7996 -437 -570 -585 0
-7996 -437 -568 0
-7996 -437 -566 0
-7996 -437 -564 0
-7996 -437 -562 0
-7996 -437 -560 0
-7996 -437 -558 0
-7996 -437 -557 0
7996 568 585 0
7996 570 583 0
7996 437 566 585 0
7996 437 568 583 0
7996 437 570 581 0
7996 438 564 585 0
7996 438 566 583 0
7996 438 568 581 0
7996 438 570 579 0
7996 440 562 585 0
7996 440 564 583 0
7996 440 566 581 0
7996 440 568 579 0
7996 440 570 577 0
7996 442 560 585 0
7996 442 562 583 0
7996 442 564 581 0
7996 442 566 579 0
7996 442 568 577 0
7996 442 570 575 0
7996 444 558 585 0
7996 444 560 583 0
7996 444 562 581 0
7996 444 564 579 0
7996 444 566 577 0
7996 444 568 575 0
7996 444 570 573 0
7996 446 557 585 0
7996 446 558 583 0
7996 446 560 581 0
7996 446 562 579 0
7996 446 564 577 0
7996 446 566 575 0
7996 446 568 573 0
7996 446 570 572 0
7996 448 585 0
7996 448 557 583 0
7996 448 558 581 0
7996 448 560 579 0
7996 448 562 577 0
7996 448 564 575 0
7996 448 566 573 0
7996 448 568 572 0
7996 448 570 0
7996 450 583 0
7996 450 557 581 0
7996 450 558 579 0
7996 450 560 577 0
7996 450 562 575 0
7996 450 564 573 0
7996 450 566 572 0
7996 450 568 0
7996 450 570 0
c (((aux440 + shift(x_00005_00004, -1) + shift(x_00006_00004, -1))<=16)=tv=SATLiteral(7997))
-7997 722 1921 0
-7997 723 1919 0
-7997 725 1917 0
-7997 727 1915 0
-7997 729 1913 0
-7997 731 1911 0
-7997 733 1909 0
-7997 735 1907 0
-7997 587 1921 0
-7997 587 722 1919 0
-7997 587 723 1917 0
-7997 587 725 1915 0
-7997 587 727 1913 0
-7997 587 729 1911 0
-7997 587 731 1909 0
-7997 587 733 1907 0
-7997 587 735 1905 0
-7997 588 1919 0
-7997 588 722 1917 0
-7997 588 723 1915 0
-7997 588 725 1913 0
-7997 588 727 1911 0
-7997 588 729 1909 0
-7997 588 731 1907 0
-7997 588 733 1905 0
-7997 588 735 1903 0
-7997 590 1917 0
-7997 590 722 1915 0
-7997 590 723 1913 0
-7997 590 725 1911 0
-7997 590 727 1909 0
-7997 590 729 1907 0
-7997 590 731 1905 0
-7997 590 733 1903 0
-7997 590 735 1901 0
-7997 592 1915 0
-7997 592 722 1913 0
-7997 592 723 1911 0
-7997 592 725 1909 0
-7997 592 727 1907 0
-7997 592 729 1905 0
-7997 592 731 1903 0
-7997 592 733 1901 0
-7997 592 735 1899 0
-7997 594 1913 0
-7997 594 722 1911 0
-7997 594 723 1909 0
-7997 594 725 1907 0
-7997 594 727 1905 0
-7997 594 729 1903 0
-7997 594 731 1901 0
-7997 594 733 1899 0
-7997 594 735 1897 0
-7997 596 1911 0
-7997 596 722 1909 0
-7997 596 723 1907 0
-7997 596 725 1905 0
-7997 596 727 1903 0
-7997 596 729 1901 0
-7997 596 731 1899 0
-7997 596 733 1897 0
-7997 596 735 1895 0
-7997 598 1909 0
-7997 598 722 1907 0
-7997 598 723 1905 0
-7997 598 725 1903 0
-7997 598 727 1901 0
-7997 598 729 1899 0
-7997 598 731 1897 0
-7997 598 733 1895 0
-7997 598 735 1893 0
-7997 600 1907 0
-7997 600 722 1905 0
-7997 600 723 1903 0
-7997 600 725 1901 0
-7997 600 727 1899 0
-7997 600 729 1897 0
-7997 600 731 1895 0
-7997 600 733 1893 0
-7997 600 735 1892 0
7997 -1892 0
7997 -735 -1893 0
7997 -733 -1895 0
7997 -731 -1897 0
7997 -729 -1899 0
7997 -727 -1901 0
7997 -725 -1903 0
7997 -723 -1905 0
7997 -722 -1907 0
7997 -600 -1893 0
7997 -600 -735 -1895 0
7997 -600 -733 -1897 0
7997 -600 -731 -1899 0
7997 -600 -729 -1901 0
7997 -600 -727 -1903 0
7997 -600 -725 -1905 0
7997 -600 -723 -1907 0
7997 -600 -722 -1909 0
7997 -598 -1895 0
7997 -598 -735 -1897 0
7997 -598 -733 -1899 0
7997 -598 -731 -1901 0
7997 -598 -729 -1903 0
7997 -598 -727 -1905 0
7997 -598 -725 -1907 0
7997 -598 -723 -1909 0
7997 -598 -722 -1911 0
7997 -596 -1897 0
7997 -596 -735 -1899 0
7997 -596 -733 -1901 0
7997 -596 -731 -1903 0
7997 -596 -729 -1905 0
7997 -596 -727 -1907 0
7997 -596 -725 -1909 0
7997 -596 -723 -1911 0
7997 -596 -722 -1913 0
7997 -594 -1899 0
7997 -594 -735 -1901 0
7997 -594 -733 -1903 0
7997 -594 -731 -1905 0
7997 -594 -729 -1907 0
7997 -594 -727 -1909 0
7997 -594 -725 -1911 0
7997 -594 -723 -1913 0
7997 -594 -722 -1915 0
7997 -592 -1901 0
7997 -592 -735 -1903 0
7997 -592 -733 -1905 0
7997 -592 -731 -1907 0
7997 -592 -729 -1909 0
7997 -592 -727 -1911 0
7997 -592 -725 -1913 0
7997 -592 -723 -1915 0
7997 -592 -722 -1917 0
7997 -590 -1903 0
7997 -590 -735 -1905 0
7997 -590 -733 -1907 0
7997 -590 -731 -1909 0
7997 -590 -729 -1911 0
7997 -590 -727 -1913 0
7997 -590 -725 -1915 0
7997 -590 -723 -1917 0
7997 -590 -722 -1919 0
7997 -588 -1905 0
7997 -588 -735 -1907 0
7997 -588 -733 -1909 0
7997 -588 -731 -1911 0
7997 -588 -729 -1913 0
7997 -588 -727 -1915 0
7997 -588 -725 -1917 0
7997 -588 -723 -1919 0
7997 -588 -722 -1921 0
7997 -587 -1907 0
7997 -587 -735 -1909 0
7997 -587 -733 -1911 0
7997 -587 -731 -1913 0
7997 -587 -729 -1915 0
7997 -587 -727 -1917 0
7997 -587 -725 -1919 0
7997 -587 -723 -1921 0
7997 -587 -722 0
c ((16<=(aux440 + shift(x_00005_00004, -1) + shift(x_00006_00004, -1)))=tv=SATLiteral(7998))
-7998 -735 -1892 0
-7998 -733 -1893 0
-7998 -731 -1895 0
-7998 -729 -1897 0
-7998 -727 -1899 0
-7998 -725 -1901 0
-7998 -723 -1903 0
-7998 -722 -1905 0
-7998 -600 -1892 0
-7998 -600 -735 -1893 0
-7998 -600 -733 -1895 0
-7998 -600 -731 -1897 0
-7998 -600 -729 -1899 0
-7998 -600 -727 -1901 0
-7998 -600 -725 -1903 0
-7998 -600 -723 -1905 0
-7998 -600 -722 -1907 0
-7998 -598 -1893 0
-7998 -598 -735 -1895 0
-7998 -598 -733 -1897 0
-7998 -598 -731 -1899 0
-7998 -598 -729 -1901 0
-7998 -598 -727 -1903 0
-7998 -598 -725 -1905 0
-7998 -598 -723 -1907 0
-7998 -598 -722 -1909 0
-7998 -596 -1895 0
-7998 -596 -735 -1897 0
-7998 -596 -733 -1899 0
-7998 -596 -731 -1901 0
-7998 -596 -729 -1903 0
-7998 -596 -727 -1905 0
-7998 -596 -725 -1907 0
-7998 -596 -723 -1909 0
-7998 -596 -722 -1911 0
-7998 -594 -1897 0
-7998 -594 -735 -1899 0
-7998 -594 -733 -1901 0
-7998 -594 -731 -1903 0
-7998 -594 -729 -1905 0
-7998 -594 -727 -1907 0
-7998 -594 -725 -1909 0
-7998 -594 -723 -1911 0
-7998 -594 -722 -1913 0
-7998 -592 -1899 0
-7998 -592 -735 -1901 0
-7998 -592 -733 -1903 0
-7998 -592 -731 -1905 0
-7998 -592 -729 -1907 0
-7998 -592 -727 -1909 0
-7998 -592 -725 -1911 0
-7998 -592 -723 -1913 0
-7998 -592 -722 -1915 0
-7998 -590 -1901 0
-7998 -590 -735 -1903 0
-7998 -590 -733 -1905 0
-7998 -590 -731 -1907 0
-7998 -590 -729 -1909 0
-7998 -590 -727 -1911 0
-7998 -590 -725 -1913 0
-7998 -590 -723 -1915 0
-7998 -590 -722 -1917 0
-7998 -588 -1903 0
-7998 -588 -735 -1905 0
-7998 -588 -733 -1907 0
-7998 -588 -731 -1909 0
-7998 -588 -729 -1911 0
-7998 -588 -727 -1913 0
-7998 -588 -725 -1915 0
-7998 -588 -723 -1917 0
-7998 -588 -722 -1919 0
-7998 -587 -1905 0
-7998 -587 -735 -1907 0
-7998 -587 -733 -1909 0
-7998 -587 -731 -1911 0
-7998 -587 -729 -1913 0
-7998 -587 -727 -1915 0
-7998 -587 -725 -1917 0
-7998 -587 -723 -1919 0
-7998 -587 -722 -1921 0
7998 1921 0
7998 722 1919 0
7998 723 1917 0
7998 725 1915 0
7998 727 1913 0
7998 729 1911 0
7998 731 1909 0
7998 733 1907 0
7998 735 1905 0
7998 587 1919 0
7998 587 722 1917 0
7998 587 723 1915 0
7998 587 725 1913 0
7998 587 727 1911 0
7998 587 729 1909 0
7998 587 731 1907 0
7998 587 733 1905 0
7998 587 735 1903 0
7998 588 1917 0
7998 588 722 1915 0
7998 588 723 1913 0
7998 588 725 1911 0
7998 588 727 1909 0
7998 588 729 1907 0
7998 588 731 1905 0
7998 588 733 1903 0
7998 588 735 1901 0
7998 590 1915 0
7998 590 722 1913 0
7998 590 723 1911 0
7998 590 725 1909 0
7998 590 727 1907 0
7998 590 729 1905 0
7998 590 731 1903 0
7998 590 733 1901 0
7998 590 735 1899 0
7998 592 1913 0
7998 592 722 1911 0
7998 592 723 1909 0
7998 592 725 1907 0
7998 592 727 1905 0
7998 592 729 1903 0
7998 592 731 1901 0
7998 592 733 1899 0
7998 592 735 1897 0
7998 594 1911 0
7998 594 722 1909 0
7998 594 723 1907 0
7998 594 725 1905 0
7998 594 727 1903 0
7998 594 729 1901 0
7998 594 731 1899 0
7998 594 733 1897 0
7998 594 735 1895 0
7998 596 1909 0
7998 596 722 1907 0
7998 596 723 1905 0
7998 596 725 1903 0
7998 596 727 1901 0
7998 596 729 1899 0
7998 596 731 1897 0
7998 596 733 1895 0
7998 596 735 1893 0
7998 598 1907 0
7998 598 722 1905 0
7998 598 723 1903 0
7998 598 725 1901 0
7998 598 727 1899 0
7998 598 729 1897 0
7998 598 731 1895 0
7998 598 733 1893 0
7998 598 735 1892 0
7998 600 1905 0
7998 600 722 1903 0
7998 600 723 1901 0
7998 600 725 1899 0
7998 600 727 1897 0
7998 600 729 1895 0
7998 600 731 1893 0
7998 600 733 1892 0
7998 600 735 0
c (((x_00004_00007 + x_00005_00007 + x_00005_00008)<=23)=tv=SATLiteral(7999))
-7999 504 645 660 0
-7999 506 643 660 0
-7999 506 645 658 0
-7999 508 641 660 0
-7999 508 643 658 0
-7999 508 645 656 0
-7999 510 639 660 0
-7999 510 641 658 0
-7999 510 643 656 0
-7999 510 645 654 0
7999 -654 0
7999 -645 -656 0
7999 -643 -658 0
7999 -641 -660 0
7999 -639 0
7999 -637 0
7999 -635 0
7999 -633 0
7999 -632 0
7999 -510 -656 0
7999 -510 -645 -658 0
7999 -510 -643 -660 0
7999 -510 -641 0
7999 -510 -639 0
7999 -510 -637 0
7999 -510 -635 0
7999 -510 -633 0
7999 -510 -632 0
7999 -508 -658 0
7999 -508 -645 -660 0
7999 -508 -643 0
7999 -508 -641 0
7999 -508 -639 0
7999 -508 -637 0
7999 -508 -635 0
7999 -508 -633 0
7999 -508 -632 0
7999 -506 -660 0
7999 -506 -645 0
7999 -506 -643 0
7999 -506 -641 0
7999 -506 -639 0
7999 -506 -637 0
7999 -506 -635 0
7999 -506 -633 0
7999 -506 -632 0
7999 -504 0
7999 -504 -645 0
7999 -504 -643 0
7999 -504 -641 0
7999 -504 -639 0
7999 -504 -637 0
7999 -504 -635 0
7999 -504 -633 0
7999 -504 -632 0
7999 -502 0
7999 -502 -645 0
7999 -502 -643 0
7999 -502 -641 0
7999 -502 -639 0
7999 -502 -637 0
7999 -502 -635 0
7999 -502 -633 0
7999 -502 -632 0
7999 -500 0
7999 -500 -645 0
7999 -500 -643 0
7999 -500 -641 0
7999 -500 -639 0
7999 -500 -637 0
7999 -500 -635 0
7999 -500 -633 0
7999 -500 -632 0
7999 -498 0
7999 -498 -645 0
7999 -498 -643 0
7999 -498 -641 0
7999 -498 -639 0
7999 -498 -637 0
7999 -498 -635 0
7999 -498 -633 0
7999 -498 -632 0
7999 -497 0
7999 -497 -645 0
7999 -497 -643 0
7999 -497 -641 0
7999 -497 -639 0
7999 -497 -637 0
7999 -497 -635 0
7999 -497 -633 0
7999 -497 -632 0
c ((23<=(x_00004_00007 + x_00005_00007 + x_00005_00008))=tv=SATLiteral(8000))
-8000 -652 0
-8000 -645 -654 0
-8000 -643 -656 0
-8000 -641 -658 0
-8000 -639 -660 0
-8000 -637 0
-8000 -635 0
-8000 -633 0
-8000 -632 0
-8000 -510 -654 0
-8000 -510 -645 -656 0
-8000 -510 -643 -658 0
-8000 -510 -641 -660 0
-8000 -510 -639 0
-8000 -510 -637 0
-8000 -510 -635 0
-8000 -510 -633 0
-8000 -510 -632 0
-8000 -508 -656 0
-8000 -508 -645 -658 0
-8000 -508 -643 -660 0
-8000 -508 -641 0
-8000 -508 -639 0
-8000 -508 -637 0
-8000 -508 -635 0
-8000 -508 -633 0
-8000 -508 -632 0
-8000 -506 -658 0
-8000 -506 -645 -660 0
-8000 -506 -643 0
-8000 -506 -641 0
-8000 -506 -639 0
-8000 -506 -637 0
-8000 -506 -635 0
-8000 -506 -633 0
-8000 -506 -632 0
-8000 -504 -660 0
-8000 -504 -645 0
-8000 -504 -643 0
-8000 -504 -641 0
-8000 -504 -639 0
-8000 -504 -637 0
-8000 -504 -635 0
-8000 -504 -633 0
-8000 -504 -632 0
-8000 -502 0
-8000 -502 -645 0
-8000 -502 -643 0
-8000 -502 -641 0
-8000 -502 -639 0
-8000 -502 -637 0
-8000 -502 -635 0
-8000 -502 -633 0
-8000 -502 -632 0
-8000 -500 0
-8000 -500 -645 0
-8000 -500 -643 0
-8000 -500 -641 0
-8000 -500 -639 0
-8000 -500 -637 0
-8000 -500 -635 0
-8000 -500 -633 0
-8000 -500 -632 0
-8000 -498 0
-8000 -498 -645 0
-8000 -498 -643 0
-8000 -498 -641 0
-8000 -498 -639 0
-8000 -498 -637 0
-8000 -498 -635 0
-8000 -498 -633 0
-8000 -498 -632 0
-8000 -497 0
-8000 -497 -645 0
-8000 -497 -643 0
-8000 -497 -641 0
-8000 -497 -639 0
-8000 -497 -637 0
-8000 -497 -635 0
-8000 -497 -633 0
-8000 -497 -632 0
8000 502 645 660 0
8000 504 643 660 0
8000 504 645 658 0
8000 506 641 660 0
8000 506 643 658 0
8000 506 645 656 0
8000 508 639 660 0
8000 508 641 658 0
8000 508 643 656 0
8000 508 645 654 0
8000 510 637 660 0
8000 510 639 658 0
8000 510 641 656 0
8000 510 643 654 0
8000 510 645 652 0
c (((x_00004_00009 + x_00005_00009)<=10)=tv=SATLiteral(8001))
-8001 527 675 0
-8001 528 673 0
-8001 530 671 0
-8001 532 669 0
-8001 534 667 0
-8001 536 665 0
-8001 538 663 0
-8001 540 662 0
8001 -662 0
8001 -540 -663 0
8001 -538 -665 0
8001 -536 -667 0
8001 -534 -669 0
8001 -532 -671 0
8001 -530 -673 0
8001 -528 -675 0
8001 -527 0
c ((10<=(x_00004_00009 + x_00005_00009))=tv=SATLiteral(8002))
-8002 -540 -662 0
-8002 -538 -663 0
-8002 -536 -665 0
-8002 -534 -667 0
-8002 -532 -669 0
-8002 -530 -671 0
-8002 -528 -673 0
-8002 -527 -675 0
8002 675 0
8002 527 673 0
8002 528 671 0
8002 530 669 0
8002 532 667 0
8002 534 665 0
8002 536 663 0
8002 538 662 0
8002 540 0
c (((x_00007_00001 + x_00006_00001)<=7)=tv=SATLiteral(8003))
-8003 686 0
-8003 812 684 0
-8003 813 682 0
-8003 815 680 0
-8003 817 678 0
-8003 819 677 0
-8003 821 0
-8003 823 0
-8003 825 0
8003 -821 -677 0
8003 -819 -678 0
8003 -817 -680 0
8003 -815 -682 0
8003 -813 -684 0
8003 -812 -686 0
c ((7<=(x_00007_00001 + x_00006_00001))=tv=SATLiteral(8004))
-8004 -819 -677 0
-8004 -817 -678 0
-8004 -815 -680 0
-8004 -813 -682 0
-8004 -812 -684 0
8004 684 0
8004 812 682 0
8004 813 680 0
8004 815 678 0
8004 817 677 0
8004 819 0
8004 821 0
8004 823 0
8004 825 0
c (((x_00007_00002 + x_00006_00002)<=8)=tv=SATLiteral(8005))
-8005 703 0
-8005 827 701 0
-8005 828 699 0
-8005 830 697 0
-8005 832 695 0
-8005 834 693 0
-8005 836 692 0
-8005 838 0
-8005 840 0
8005 -838 -692 0
8005 -836 -693 0
8005 -834 -695 0
8005 -832 -697 0
8005 -830 -699 0
8005 -828 -701 0
8005 -827 -703 0
c ((8<=(x_00007_00002 + x_00006_00002))=tv=SATLiteral(8006))
-8006 -836 -692 0
-8006 -834 -693 0
-8006 -832 -695 0
-8006 -830 -697 0
-8006 -828 -699 0
-8006 -827 -701 0
8006 701 0
8006 827 699 0
8006 828 697 0
8006 830 695 0
8006 832 693 0
8006 834 692 0
8006 836 0
8006 838 0
8006 840 0
c (((x_00007_00003 + x_00008_00003 + x_00006_00003)<=18)=tv=SATLiteral(8007))
-8007 990 720 0
-8007 842 988 720 0
-8007 842 990 718 0
-8007 843 986 720 0
-8007 843 988 718 0
-8007 843 990 716 0
-8007 845 984 720 0
-8007 845 986 718 0
-8007 845 988 716 0
-8007 845 990 714 0
-8007 847 982 720 0
-8007 847 984 718 0
-8007 847 986 716 0
-8007 847 988 714 0
-8007 847 990 712 0
-8007 849 980 720 0
-8007 849 982 718 0
-8007 849 984 716 0
-8007 849 986 714 0
-8007 849 988 712 0
-8007 849 990 710 0
-8007 851 978 720 0
-8007 851 980 718 0
-8007 851 982 716 0
-8007 851 984 714 0
-8007 851 986 712 0
-8007 851 988 710 0
-8007 851 990 708 0
-8007 853 977 720 0
-8007 853 978 718 0
-8007 853 980 716 0
-8007 853 982 714 0
-8007 853 984 712 0
-8007 853 986 710 0
-8007 853 988 708 0
-8007 853 990 707 0
-8007 855 720 0
-8007 855 977 718 0
-8007 855 978 716 0
-8007 855 980 714 0
-8007 855 982 712 0
-8007 855 984 710 0
-8007 855 986 708 0
-8007 855 988 707 0
-8007 855 990 0
8007 -990 -707 0
8007 -988 -708 0
8007 -986 -710 0
8007 -984 -712 0
8007 -982 -714 0
8007 -980 -716 0
8007 -978 -718 0
8007 -977 -720 0
8007 -855 -707 0
8007 -855 -990 -708 0
8007 -855 -988 -710 0
8007 -855 -986 -712 0
8007 -855 -984 -714 0
8007 -855 -982 -716 0
8007 -855 -980 -718 0
8007 -855 -978 -720 0
8007 -855 -977 0
8007 -853 -708 0
8007 -853 -990 -710 0
8007 -853 -988 -712 0
8007 -853 -986 -714 0
8007 -853 -984 -716 0
8007 -853 -982 -718 0
8007 -853 -980 -720 0
8007 -853 -978 0
8007 -853 -977 0
8007 -851 -710 0
8007 -851 -990 -712 0
8007 -851 -988 -714 0
8007 -851 -986 -716 0
8007 -851 -984 -718 0
8007 -851 -982 -720 0
8007 -851 -980 0
8007 -851 -978 0
8007 -851 -977 0
8007 -849 -712 0
8007 -849 -990 -714 0
8007 -849 -988 -716 0
8007 -849 -986 -718 0
8007 -849 -984 -720 0
8007 -849 -982 0
8007 -849 -980 0
8007 -849 -978 0
8007 -849 -977 0
8007 -847 -714 0
8007 -847 -990 -716 0
8007 -847 -988 -718 0
8007 -847 -986 -720 0
8007 -847 -984 0
8007 -847 -982 0
8007 -847 -980 0
8007 -847 -978 0
8007 -847 -977 0
8007 -845 -716 0
8007 -845 -990 -718 0
8007 -845 -988 -720 0
8007 -845 -986 0
8007 -845 -984 0
8007 -845 -982 0
8007 -845 -980 0
8007 -845 -978 0
8007 -845 -977 0
8007 -843 -718 0
8007 -843 -990 -720 0
8007 -843 -988 0
8007 -843 -986 0
8007 -843 -984 0
8007 -843 -982 0
8007 -843 -980 0
8007 -843 -978 0
8007 -843 -977 0
8007 -842 -720 0
8007 -842 -990 0
8007 -842 -988 0
8007 -842 -986 0
8007 -842 -984 0
8007 -842 -982 0
8007 -842 -980 0
8007 -842 -978 0
8007 -842 -977 0
c ((18<=(x_00007_00003 + x_00008_00003 + x_00006_00003))=tv=SATLiteral(8008))
-8008 -988 -707 0
-8008 -986 -708 0
-8008 -984 -710 0
-8008 -982 -712 0
-8008 -980 -714 0
-8008 -978 -716 0
-8008 -977 -718 0
-8008 -855 -990 -707 0
-8008 -855 -988 -708 0
-8008 -855 -986 -710 0
-8008 -855 -984 -712 0
-8008 -855 -982 -714 0
-8008 -855 -980 -716 0
-8008 -855 -978 -718 0
-8008 -855 -977 -720 0
-8008 -853 -707 0
-8008 -853 -990 -708 0
-8008 -853 -988 -710 0
-8008 -853 -986 -712 0
-8008 -853 -984 -714 0
-8008 -853 -982 -716 0
-8008 -853 -980 -718 0
-8008 -853 -978 -720 0
-8008 -853 -977 0
-8008 -851 -708 0
-8008 -851 -990 -710 0
-8008 -851 -988 -712 0
-8008 -851 -986 -714 0
-8008 -851 -984 -716 0
-8008 -851 -982 -718 0
-8008 -851 -980 -720 0
-8008 -851 -978 0
-8008 -851 -977 0
-8008 -849 -710 0
-8008 -849 -990 -712 0
-8008 -849 -988 -714 0
-8008 -849 -986 -716 0
-8008 -849 -984 -718 0
-8008 -849 -982 -720 0
-8008 -849 -980 0
-8008 -849 -978 0
-8008 -849 -977 0
-8008 -847 -712 0
-8008 -847 -990 -714 0
-8008 -847 -988 -716 0
-8008 -847 -986 -718 0
-8008 -847 -984 -720 0
-8008 -847 -982 0
-8008 -847 -980 0
-8008 -847 -978 0
-8008 -847 -977 0
-8008 -845 -714 0
-8008 -845 -990 -716 0
-8008 -845 -988 -718 0
-8008 -845 -986 -720 0
-8008 -845 -984 0
-8008 -845 -982 0
-8008 -845 -980 0
-8008 -845 -978 0
-8008 -845 -977 0
-8008 -843 -716 0
-8008 -843 -990 -718 0
-8008 -843 -988 -720 0
-8008 -843 -986 0
-8008 -843 -984 0
-8008 -843 -982 0
-8008 -843 -980 0
-8008 -843 -978 0
-8008 -843 -977 0
-8008 -842 -718 0
-8008 -842 -990 -720 0
-8008 -842 -988 0
-8008 -842 -986 0
-8008 -842 -984 0
-8008 -842 -982 0
-8008 -842 -980 0
-8008 -842 -978 0
-8008 -842 -977 0
8008 988 720 0
8008 990 718 0
8008 842 986 720 0
8008 842 988 718 0
8008 842 990 716 0
8008 843 984 720 0
8008 843 986 718 0
8008 843 988 716 0
8008 843 990 714 0
8008 845 982 720 0
8008 845 984 718 0
8008 845 986 716 0
8008 845 988 714 0
8008 845 990 712 0
8008 847 980 720 0
8008 847 982 718 0
8008 847 984 716 0
8008 847 986 714 0
8008 847 988 712 0
8008 847 990 710 0
8008 849 978 720 0
8008 849 980 718 0
8008 849 982 716 0
8008 849 984 714 0
8008 849 986 712 0
8008 849 988 710 0
8008 849 990 708 0
8008 851 977 720 0
8008 851 978 718 0
8008 851 980 716 0
8008 851 982 714 0
8008 851 984 712 0
8008 851 986 710 0
8008 851 988 708 0
8008 851 990 707 0
8008 853 720 0
8008 853 977 718 0
8008 853 978 716 0
8008 853 980 714 0
8008 853 982 712 0
8008 853 984 710 0
8008 853 986 708 0
8008 853 988 707 0
8008 853 990 0
8008 855 718 0
8008 855 977 716 0
8008 855 978 714 0
8008 855 980 712 0
8008 855 982 710 0
8008 855 984 708 0
8008 855 986 707 0
8008 855 988 0
8008 855 990 0
c (((x_00007_00006 + x_00006_00006)<=15)=tv=SATLiteral(8009))
-8009 896 765 0
-8009 898 763 0
-8009 900 761 0
8009 -761 0
8009 -900 -763 0
8009 -898 -765 0
8009 -896 0
8009 -894 0
8009 -892 0
8009 -890 0
8009 -888 0
8009 -887 0
c ((15<=(x_00007_00006 + x_00006_00006))=tv=SATLiteral(8010))
-8010 -759 0
-8010 -900 -761 0
-8010 -898 -763 0
-8010 -896 -765 0
-8010 -894 0
-8010 -892 0
-8010 -890 0
-8010 -888 0
-8010 -887 0
8010 894 765 0
8010 896 763 0
8010 898 761 0
8010 900 759 0
c (((x_00006_00007 + x_00006_00008 + x_00006_00009)<=11)=tv=SATLiteral(8011))
-8011 782 810 0
-8011 783 808 0
-8011 785 806 0
-8011 787 804 0
-8011 789 802 0
-8011 791 800 0
-8011 793 798 0
-8011 795 797 0
-8011 767 810 0
-8011 767 782 808 0
-8011 767 783 806 0
-8011 767 785 804 0
-8011 767 787 802 0
-8011 767 789 800 0
-8011 767 791 798 0
-8011 767 793 797 0
-8011 767 795 0
-8011 768 808 0
-8011 768 782 806 0
-8011 768 783 804 0
-8011 768 785 802 0
-8011 768 787 800 0
-8011 768 789 798 0
-8011 768 791 797 0
-8011 768 793 0
-8011 768 795 0
-8011 770 806 0
-8011 770 782 804 0
-8011 770 783 802 0
-8011 770 785 800 0
-8011 770 787 798 0
-8011 770 789 797 0
-8011 770 791 0
-8011 770 793 0
-8011 770 795 0
-8011 772 804 0
-8011 772 782 802 0
-8011 772 783 800 0
-8011 772 785 798 0
-8011 772 787 797 0
-8011 772 789 0
-8011 772 791 0
-8011 772 793 0
-8011 772 795 0
-8011 774 802 0
-8011 774 782 800 0
-8011 774 783 798 0
-8011 774 785 797 0
-8011 774 787 0
-8011 774 789 0
-8011 774 791 0
-8011 774 793 0
-8011 774 795 0
-8011 776 800 0
-8011 776 782 798 0
-8011 776 783 797 0
-8011 776 785 0
-8011 776 787 0
-8011 776 789 0
-8011 776 791 0
-8011 776 793 0
-8011 776 795 0
-8011 778 798 0
-8011 778 782 797 0
-8011 778 783 0
-8011 778 785 0
-8011 778 787 0
-8011 778 789 0
-8011 778 791 0
-8011 778 793 0
-8011 778 795 0
-8011 780 797 0
-8011 780 782 0
-8011 780 783 0
-8011 780 785 0
-8011 780 787 0
-8011 780 789 0
-8011 780 791 0
-8011 780 793 0
-8011 780 795 0
8011 -782 -797 0
8011 -780 -783 -797 0
8011 -780 -782 -798 0
8011 -778 -785 -797 0
8011 -778 -783 -798 0
8011 -778 -782 -800 0
8011 -776 -787 -797 0
8011 -776 -785 -798 0
8011 -776 -783 -800 0
8011 -776 -782 -802 0
8011 -774 -789 -797 0
8011 -774 -787 -798 0
8011 -774 -785 -800 0
8011 -774 -783 -802 0
8011 -774 -782 -804 0
8011 -772 -791 -797 0
8011 -772 -789 -798 0
8011 -772 -787 -800 0
8011 -772 -785 -802 0
8011 -772 -783 -804 0
8011 -772 -782 -806 0
8011 -770 -793 -797 0
8011 -770 -791 -798 0
8011 -770 -789 -800 0
8011 -770 -787 -802 0
8011 -770 -785 -804 0
8011 -770 -783 -806 0
8011 -770 -782 -808 0
8011 -768 -795 -797 0
8011 -768 -793 -798 0
8011 -768 -791 -800 0
8011 -768 -789 -802 0
8011 -768 -787 -804 0
8011 -768 -785 -806 0
8011 -768 -783 -808 0
8011 -768 -782 -810 0
8011 -767 -797 0
8011 -767 -795 -798 0
8011 -767 -793 -800 0
8011 -767 -791 -802 0
8011 -767 -789 -804 0
8011 -767 -787 -806 0
8011 -767 -785 -808 0
8011 -767 -783 -810 0
8011 -767 -782 0
c ((11<=(x_00006_00007 + x_00006_00008 + x_00006_00009))=tv=SATLiteral(8012))
-8012 -780 -782 -797 0
-8012 -778 -783 -797 0
-8012 -778 -782 -798 0
-8012 -776 -785 -797 0
-8012 -776 -783 -798 0
-8012 -776 -782 -800 0
-8012 -774 -787 -797 0
-8012 -774 -785 -798 0
-8012 -774 -783 -800 0
-8012 -774 -782 -802 0
-8012 -772 -789 -797 0
-8012 -772 -787 -798 0
-8012 -772 -785 -800 0
-8012 -772 -783 -802 0
-8012 -772 -782 -804 0
-8012 -770 -791 -797 0
-8012 -770 -789 -798 0
-8012 -770 -787 -800 0
-8012 -770 -785 -802 0
-8012 -770 -783 -804 0
-8012 -770 -782 -806 0
-8012 -768 -793 -797 0
-8012 -768 -791 -798 0
-8012 -768 -789 -800 0
-8012 -768 -787 -802 0
-8012 -768 -785 -804 0
-8012 -768 -783 -806 0
-8012 -768 -782 -808 0
-8012 -767 -795 -797 0
-8012 -767 -793 -798 0
-8012 -767 -791 -800 0
-8012 -767 -789 -802 0
-8012 -767 -787 -804 0
-8012 -767 -785 -806 0
-8012 -767 -783 -808 0
-8012 -767 -782 -810 0
8012 810 0
8012 782 808 0
8012 783 806 0
8012 785 804 0
8012 787 802 0
8012 789 800 0
8012 791 798 0
8012 793 797 0
8012 795 0
8012 767 808 0
8012 767 782 806 0
8012 767 783 804 0
8012 767 785 802 0
8012 767 787 800 0
8012 767 789 798 0
8012 767 791 797 0
8012 767 793 0
8012 767 795 0
8012 768 806 0
8012 768 782 804 0
8012 768 783 802 0
8012 768 785 800 0
8012 768 787 798 0
8012 768 789 797 0
8012 768 791 0
8012 768 793 0
8012 768 795 0
8012 770 804 0
8012 770 782 802 0
8012 770 783 800 0
8012 770 785 798 0
8012 770 787 797 0
8012 770 789 0
8012 770 791 0
8012 770 793 0
8012 770 795 0
8012 772 802 0
8012 772 782 800 0
8012 772 783 798 0
8012 772 785 797 0
8012 772 787 0
8012 772 789 0
8012 772 791 0
8012 772 793 0
8012 772 795 0
8012 774 800 0
8012 774 782 798 0
8012 774 783 797 0
8012 774 785 0
8012 774 787 0
8012 774 789 0
8012 774 791 0
8012 774 793 0
8012 774 795 0
8012 776 798 0
8012 776 782 797 0
8012 776 783 0
8012 776 785 0
8012 776 787 0
8012 776 789 0
8012 776 791 0
8012 776 793 0
8012 776 795 0
8012 778 797 0
8012 778 782 0
8012 778 783 0
8012 778 785 0
8012 778 787 0
8012 778 789 0
8012 778 791 0
8012 778 793 0
8012 778 795 0
8012 780 0
8012 780 782 0
8012 780 783 0
8012 780 785 0
8012 780 787 0
8012 780 789 0
8012 780 791 0
8012 780 793 0
8012 780 795 0
c (((x_00007_00004 + x_00007_00005)<=5)=tv=SATLiteral(8013))
-8013 877 0
-8013 857 875 0
-8013 858 873 0
-8013 860 872 0
-8013 862 0
-8013 864 0
-8013 866 0
-8013 868 0
-8013 870 0
8013 -862 -872 0
8013 -860 -873 0
8013 -858 -875 0
8013 -857 -877 0
c ((5<=(x_00007_00004 + x_00007_00005))=tv=SATLiteral(8014))
-8014 -860 -872 0
-8014 -858 -873 0
-8014 -857 -875 0
8014 875 0
8014 857 873 0
8014 858 872 0
8014 860 0
8014 862 0
8014 864 0
8014 866 0
8014 868 0
8014 870 0
c (((x_00007_00007 + x_00007_00008)<=15)=tv=SATLiteral(8015))
-8015 911 930 0
-8015 913 928 0
-8015 915 926 0
8015 -926 0
8015 -915 -928 0
8015 -913 -930 0
8015 -911 0
8015 -909 0
8015 -907 0
8015 -905 0
8015 -903 0
8015 -902 0
c ((15<=(x_00007_00007 + x_00007_00008))=tv=SATLiteral(8016))
-8016 -924 0
-8016 -915 -926 0
-8016 -913 -928 0
-8016 -911 -930 0
-8016 -909 0
-8016 -907 0
-8016 -905 0
-8016 -903 0
-8016 -902 0
8016 909 930 0
8016 911 928 0
8016 913 926 0
8016 915 924 0
c (((aux441 + shift(x_00008_00009, -1) + shift(x_00009_00008, -1))<=12)=tv=SATLiteral(8017))
-8017 1946 0
-8017 1187 1944 0
-8017 1188 1942 0
-8017 1190 1940 0
-8017 1192 1938 0
-8017 1194 1936 0
-8017 1196 1934 0
-8017 1198 1932 0
-8017 1200 1930 0
-8017 1067 1944 0
-8017 1067 1187 1942 0
-8017 1067 1188 1940 0
-8017 1067 1190 1938 0
-8017 1067 1192 1936 0
-8017 1067 1194 1934 0
-8017 1067 1196 1932 0
-8017 1067 1198 1930 0
-8017 1067 1200 1928 0
-8017 1068 1942 0
-8017 1068 1187 1940 0
-8017 1068 1188 1938 0
-8017 1068 1190 1936 0
-8017 1068 1192 1934 0
-8017 1068 1194 1932 0
-8017 1068 1196 1930 0
-8017 1068 1198 1928 0
-8017 1068 1200 1926 0
-8017 1070 1940 0
-8017 1070 1187 1938 0
-8017 1070 1188 1936 0
-8017 1070 1190 1934 0
-8017 1070 1192 1932 0
-8017 1070 1194 1930 0
-8017 1070 1196 1928 0
-8017 1070 1198 1926 0
-8017 1070 1200 1924 0
-8017 1072 1938 0
-8017 1072 1187 1936 0
-8017 1072 1188 1934 0
-8017 1072 1190 1932 0
-8017 1072 1192 1930 0
-8017 1072 1194 1928 0
-8017 1072 1196 1926 0
-8017 1072 1198 1924 0
-8017 1072 1200 1923 0
-8017 1074 1936 0
-8017 1074 1187 1934 0
-8017 1074 1188 1932 0
-8017 1074 1190 1930 0
-8017 1074 1192 1928 0
-8017 1074 1194 1926 0
-8017 1074 1196 1924 0
-8017 1074 1198 1923 0
-8017 1074 1200 0
-8017 1076 1934 0
-8017 1076 1187 1932 0
-8017 1076 1188 1930 0
-8017 1076 1190 1928 0
-8017 1076 1192 1926 0
-8017 1076 1194 1924 0
-8017 1076 1196 1923 0
-8017 1076 1198 0
-8017 1076 1200 0
-8017 1078 1932 0
-8017 1078 1187 1930 0
-8017 1078 1188 1928 0
-8017 1078 1190 1926 0
-8017 1078 1192 1924 0
-8017 1078 1194 1923 0
-8017 1078 1196 0
-8017 1078 1198 0
-8017 1078 1200 0
-8017 1080 1930 0
-8017 1080 1187 1928 0
-8017 1080 1188 1926 0
-8017 1080 1190 1924 0
-8017 1080 1192 1923 0
-8017 1080 1194 0
-8017 1080 1196 0
-8017 1080 1198 0
-8017 1080 1200 0
8017 -1194 -1923 0
8017 -1192 -1924 0
8017 -1190 -1926 0
8017 -1188 -1928 0
8017 -1187 -1930 0
8017 -1080 -1196 -1923 0
8017 -1080 -1194 -1924 0
8017 -1080 -1192 -1926 0
8017 -1080 -1190 -1928 0
8017 -1080 -1188 -1930 0
8017 -1080 -1187 -1932 0
8017 -1078 -1198 -1923 0
8017 -1078 -1196 -1924 0
8017 -1078 -1194 -1926 0
8017 -1078 -1192 -1928 0
8017 -1078 -1190 -1930 0
8017 -1078 -1188 -1932 0
8017 -1078 -1187 -1934 0
8017 -1076 -1200 -1923 0
8017 -1076 -1198 -1924 0
8017 -1076 -1196 -1926 0
8017 -1076 -1194 -1928 0
8017 -1076 -1192 -1930 0
8017 -1076 -1190 -1932 0
8017 -1076 -1188 -1934 0
8017 -1076 -1187 -1936 0
8017 -1074 -1923 0
8017 -1074 -1200 -1924 0
8017 -1074 -1198 -1926 0
8017 -1074 -1196 -1928 0
8017 -1074 -1194 -1930 0
8017 -1074 -1192 -1932 0
8017 -1074 -1190 -1934 0
8017 -1074 -1188 -1936 0
8017 -1074 -1187 -1938 0
8017 -1072 -1924 0
8017 -1072 -1200 -1926 0
8017 -1072 -1198 -1928 0
8017 -1072 -1196 -1930 0
8017 -1072 -1194 -1932 0
8017 -1072 -1192 -1934 0
8017 -1072 -1190 -1936 0
8017 -1072 -1188 -1938 0
8017 -1072 -1187 -1940 0
8017 -1070 -1926 0
8017 -1070 -1200 -1928 0
8017 -1070 -1198 -1930 0
8017 -1070 -1196 -1932 0
8017 -1070 -1194 -1934 0
8017 -1070 -1192 -1936 0
8017 -1070 -1190 -1938 0
8017 -1070 -1188 -1940 0
8017 -1070 -1187 -1942 0
8017 -1068 -1928 0
8017 -1068 -1200 -1930 0
8017 -1068 -1198 -1932 0
8017 -1068 -1196 -1934 0
8017 -1068 -1194 -1936 0
8017 -1068 -1192 -1938 0
8017 -1068 -1190 -1940 0
8017 -1068 -1188 -1942 0
8017 -1068 -1187 -1944 0
8017 -1067 -1930 0
8017 -1067 -1200 -1932 0
8017 -1067 -1198 -1934 0
8017 -1067 -1196 -1936 0
8017 -1067 -1194 -1938 0
8017 -1067 -1192 -1940 0
8017 -1067 -1190 -1942 0
8017 -1067 -1188 -1944 0
8017 -1067 -1187 -1946 0
c ((12<=(aux441 + shift(x_00008_00009, -1) + shift(x_00009_00008, -1)))=tv=SATLiteral(8018))
-8018 -1192 -1923 0
-8018 -1190 -1924 0
-8018 -1188 -1926 0
-8018 -1187 -1928 0
-8018 -1080 -1194 -1923 0
-8018 -1080 -1192 -1924 0
-8018 -1080 -1190 -1926 0
-8018 -1080 -1188 -1928 0
-8018 -1080 -1187 -1930 0
-8018 -1078 -1196 -1923 0
-8018 -1078 -1194 -1924 0
-8018 -1078 -1192 -1926 0
-8018 -1078 -1190 -1928 0
-8018 -1078 -1188 -1930 0
-8018 -1078 -1187 -1932 0
-8018 -1076 -1198 -1923 0
-8018 -1076 -1196 -1924 0
-8018 -1076 -1194 -1926 0
-8018 -1076 -1192 -1928 0
-8018 -1076 -1190 -1930 0
-8018 -1076 -1188 -1932 0
-8018 -1076 -1187 -1934 0
-8018 -1074 -1200 -1923 0
-8018 -1074 -1198 -1924 0
-8018 -1074 -1196 -1926 0
-8018 -1074 -1194 -1928 0
-8018 -1074 -1192 -1930 0
-8018 -1074 -1190 -1932 0
-8018 -1074 -1188 -1934 0
-8018 -1074 -1187 -1936 0
-8018 -1072 -1923 0
-8018 -1072 -1200 -1924 0
-8018 -1072 -1198 -1926 0
-8018 -1072 -1196 -1928 0
-8018 -1072 -1194 -1930 0
-8018 -1072 -1192 -1932 0
-8018 -1072 -1190 -1934 0
-8018 -1072 -1188 -1936 0
-8018 -1072 -1187 -1938 0
-8018 -1070 -1924 0
-8018 -1070 -1200 -1926 0
-8018 -1070 -1198 -1928 0
-8018 -1070 -1196 -1930 0
-8018 -1070 -1194 -1932 0
-8018 -1070 -1192 -1934 0
-8018 -1070 -1190 -1936 0
-8018 -1070 -1188 -1938 0
-8018 -1070 -1187 -1940 0
-8018 -1068 -1926 0
-8018 -1068 -1200 -1928 0
-8018 -1068 -1198 -1930 0
-8018 -1068 -1196 -1932 0
-8018 -1068 -1194 -1934 0
-8018 -1068 -1192 -1936 0
-8018 -1068 -1190 -1938 0
-8018 -1068 -1188 -1940 0
-8018 -1068 -1187 -1942 0
-8018 -1067 -1928 0
-8018 -1067 -1200 -1930 0
-8018 -1067 -1198 -1932 0
-8018 -1067 -1196 -1934 0
-8018 -1067 -1194 -1936 0
-8018 -1067 -1192 -1938 0
-8018 -1067 -1190 -1940 0
-8018 -1067 -1188 -1942 0
-8018 -1067 -1187 -1944 0
8018 1944 0
8018 1187 1942 0
8018 1188 1940 0
8018 1190 1938 0
8018 1192 1936 0
8018 1194 1934 0
8018 1196 1932 0
8018 1198 1930 0
8018 1200 1928 0
8018 1067 1942 0
8018 1067 1187 1940 0
8018 1067 1188 1938 0
8018 1067 1190 1936 0
8018 1067 1192 1934 0
8018 1067 1194 1932 0
8018 1067 1196 1930 0
8018 1067 1198 1928 0
8018 1067 1200 1926 0
8018 1068 1940 0
8018 1068 1187 1938 0
8018 1068 1188 1936 0
8018 1068 1190 1934 0
8018 1068 1192 1932 0
8018 1068 1194 1930 0
8018 1068 1196 1928 0
8018 1068 1198 1926 0
8018 1068 1200 1924 0
8018 1070 1938 0
8018 1070 1187 1936 0
8018 1070 1188 1934 0
8018 1070 1190 1932 0
8018 1070 1192 1930 0
8018 1070 1194 1928 0
8018 1070 1196 1926 0
8018 1070 1198 1924 0
8018 1070 1200 1923 0
8018 1072 1936 0
8018 1072 1187 1934 0
8018 1072 1188 1932 0
8018 1072 1190 1930 0
8018 1072 1192 1928 0
8018 1072 1194 1926 0
8018 1072 1196 1924 0
8018 1072 1198 1923 0
8018 1072 1200 0
8018 1074 1934 0
8018 1074 1187 1932 0
8018 1074 1188 1930 0
8018 1074 1190 1928 0
8018 1074 1192 1926 0
8018 1074 1194 1924 0
8018 1074 1196 1923 0
8018 1074 1198 0
8018 1074 1200 0
8018 1076 1932 0
8018 1076 1187 1930 0
8018 1076 1188 1928 0
8018 1076 1190 1926 0
8018 1076 1192 1924 0
8018 1076 1194 1923 0
8018 1076 1196 0
8018 1076 1198 0
8018 1076 1200 0
8018 1078 1930 0
8018 1078 1187 1928 0
8018 1078 1188 1926 0
8018 1078 1190 1924 0
8018 1078 1192 1923 0
8018 1078 1194 0
8018 1078 1196 0
8018 1078 1198 0
8018 1078 1200 0
8018 1080 1928 0
8018 1080 1187 1926 0
8018 1080 1188 1924 0
8018 1080 1190 1923 0
8018 1080 1192 0
8018 1080 1194 0
8018 1080 1196 0
8018 1080 1198 0
8018 1080 1200 0
c (((x_00008_00001 + x_00008_00002)<=5)=tv=SATLiteral(8019))
-8019 967 0
-8019 947 965 0
-8019 948 963 0
-8019 950 962 0
-8019 952 0
-8019 954 0
-8019 956 0
-8019 958 0
-8019 960 0
8019 -952 -962 0
8019 -950 -963 0
8019 -948 -965 0
8019 -947 -967 0
c ((5<=(x_00008_00001 + x_00008_00002))=tv=SATLiteral(8020))
-8020 -950 -962 0
-8020 -948 -963 0
-8020 -947 -965 0
8020 965 0
8020 947 963 0
8020 948 962 0
8020 950 0
8020 952 0
8020 954 0
8020 956 0
8020 958 0
8020 960 0
c (((x_00008_00004 + x_00008_00005 + x_00009_00005)<=14)=tv=SATLiteral(8021))
-8021 1012 1155 0
-8021 1014 1153 0
-8021 1016 1151 0
-8021 1018 1149 0
-8021 1020 1147 0
-8021 992 1010 1155 0
-8021 992 1012 1153 0
-8021 992 1014 1151 0
-8021 992 1016 1149 0
-8021 992 1018 1147 0
-8021 992 1020 1145 0
-8021 993 1008 1155 0
-8021 993 1010 1153 0
-8021 993 1012 1151 0
-8021 993 1014 1149 0
-8021 993 1016 1147 0
-8021 993 1018 1145 0
-8021 993 1020 1143 0
-8021 995 1007 1155 0
-8021 995 1008 1153 0
-8021 995 1010 1151 0
-8021 995 1012 1149 0
-8021 995 1014 1147 0
-8021 995 1016 1145 0
-8021 995 1018 1143 0
-8021 995 1020 1142 0
-8021 997 1155 0
-8021 997 1007 1153 0
-8021 997 1008 1151 0
-8021 997 1010 1149 0
-8021 997 1012 1147 0
-8021 997 1014 1145 0
-8021 997 1016 1143 0
-8021 997 1018 1142 0
-8021 997 1020 0
-8021 999 1153 0
-8021 999 1007 1151 0
-8021 999 1008 1149 0
-8021 999 1010 1147 0
-8021 999 1012 1145 0
-8021 999 1014 1143 0
-8021 999 1016 1142 0
-8021 999 1018 0
-8021 999 1020 0
-8021 1001 1151 0
-8021 1001 1007 1149 0
-8021 1001 1008 1147 0
-8021 1001 1010 1145 0
-8021 1001 1012 1143 0
-8021 1001 1014 1142 0
-8021 1001 1016 0
-8021 1001 1018 0
-8021 1001 1020 0
-8021 1003 1149 0
-8021 1003 1007 1147 0
-8021 1003 1008 1145 0
-8021 1003 1010 1143 0
-8021 1003 1012 1142 0
-8021 1003 1014 0
-8021 1003 1016 0
-8021 1003 1018 0
-8021 1003 1020 0
-8021 1005 1147 0
-8021 1005 1007 1145 0
-8021 1005 1008 1143 0
-8021 1005 1010 1142 0
-8021 1005 1012 0
-8021 1005 1014 0
-8021 1005 1016 0
-8021 1005 1018 0
-8021 1005 1020 0
8021 -1012 -1142 0
8021 -1010 -1143 0
8021 -1008 -1145 0
8021 -1007 -1147 0
8021 -1005 -1014 -1142 0
8021 -1005 -1012 -1143 0
8021 -1005 -1010 -1145 0
8021 -1005 -1008 -1147 0
8021 -1005 -1007 -1149 0
8021 -1003 -1016 -1142 0
8021 -1003 -1014 -1143 0
8021 -1003 -1012 -1145 0
8021 -1003 -1010 -1147 0
8021 -1003 -1008 -1149 0
8021 -1003 -1007 -1151 0
8021 -1001 -1018 -1142 0
8021 -1001 -1016 -1143 0
8021 -1001 -1014 -1145 0
8021 -1001 -1012 -1147 0
8021 -1001 -1010 -1149 0
8021 -1001 -1008 -1151 0
8021 -1001 -1007 -1153 0
8021 -999 -1020 -1142 0
8021 -999 -1018 -1143 0
8021 -999 -1016 -1145 0
8021 -999 -1014 -1147 0
8021 -999 -1012 -1149 0
8021 -999 -1010 -1151 0
8021 -999 -1008 -1153 0
8021 -999 -1007 -1155 0
8021 -997 -1142 0
8021 -997 -1020 -1143 0
8021 -997 -1018 -1145 0
8021 -997 -1016 -1147 0
8021 -997 -1014 -1149 0
8021 -997 -1012 -1151 0
8021 -997 -1010 -1153 0
8021 -997 -1008 -1155 0
8021 -997 -1007 0
8021 -995 -1143 0
8021 -995 -1020 -1145 0
8021 -995 -1018 -1147 0
8021 -995 -1016 -1149 0
8021 -995 -1014 -1151 0
8021 -995 -1012 -1153 0
8021 -995 -1010 -1155 0
8021 -995 -1008 0
8021 -995 -1007 0
8021 -993 -1145 0
8021 -993 -1020 -1147 0
8021 -993 -1018 -1149 0
8021 -993 -1016 -1151 0
8021 -993 -1014 -1153 0
8021 -993 -1012 -1155 0
8021 -993 -1010 0
8021 -993 -1008 0
8021 -993 -1007 0
8021 -992 -1147 0
8021 -992 -1020 -1149 0
8021 -992 -1018 -1151 0
8021 -992 -1016 -1153 0
8021 -992 -1014 -1155 0
8021 -992 -1012 0
8021 -992 -1010 0
8021 -992 -1008 0
8021 -992 -1007 0
c ((14<=(x_00008_00004 + x_00008_00005 + x_00009_00005))=tv=SATLiteral(8022))
-8022 -1010 -1142 0
-8022 -1008 -1143 0
-8022 -1007 -1145 0
-8022 -1005 -1012 -1142 0
-8022 -1005 -1010 -1143 0
-8022 -1005 -1008 -1145 0
-8022 -1005 -1007 -1147 0
-8022 -1003 -1014 -1142 0
-8022 -1003 -1012 -1143 0
-8022 -1003 -1010 -1145 0
-8022 -1003 -1008 -1147 0
-8022 -1003 -1007 -1149 0
-8022 -1001 -1016 -1142 0
-8022 -1001 -1014 -1143 0
-8022 -1001 -1012 -1145 0
-8022 -1001 -1010 -1147 0
-8022 -1001 -1008 -1149 0
-8022 -1001 -1007 -1151 0
-8022 -999 -1018 -1142 0
-8022 -999 -1016 -1143 0
-8022 -999 -1014 -1145 0
-8022 -999 -1012 -1147 0
-8022 -999 -1010 -1149 0
-8022 -999 -1008 -1151 0
-8022 -999 -1007 -1153 0
-8022 -997 -1020 -1142 0
-8022 -997 -1018 -1143 0
-8022 -997 -1016 -1145 0
-8022 -997 -1014 -1147 0
-8022 -997 -1012 -1149 0
-8022 -997 -1010 -1151 0
-8022 -997 -1008 -1153 0
-8022 -997 -1007 -1155 0
-8022 -995 -1142 0
-8022 -995 -1020 -1143 0
-8022 -995 -1018 -1145 0
-8022 -995 -1016 -1147 0
-8022 -995 -1014 -1149 0
-8022 -995 -1012 -1151 0
-8022 -995 -1010 -1153 0
-8022 -995 -1008 -1155 0
-8022 -995 -1007 0
-8022 -993 -1143 0
-8022 -993 -1020 -1145 0
-8022 -993 -1018 -1147 0
-8022 -993 -1016 -1149 0
-8022 -993 -1014 -1151 0
-8022 -993 -1012 -1153 0
-8022 -993 -1010 -1155 0
-8022 -993 -1008 0
-8022 -993 -1007 0
-8022 -992 -1145 0
-8022 -992 -1020 -1147 0
-8022 -992 -1018 -1149 0
-8022 -992 -1016 -1151 0
-8022 -992 -1014 -1153 0
-8022 -992 -1012 -1155 0
-8022 -992 -1010 0
-8022 -992 -1008 0
-8022 -992 -1007 0
8022 1010 1155 0
8022 1012 1153 0
8022 1014 1151 0
8022 1016 1149 0
8022 1018 1147 0
8022 1020 1145 0
8022 992 1008 1155 0
8022 992 1010 1153 0
8022 992 1012 1151 0
8022 992 1014 1149 0
8022 992 1016 1147 0
8022 992 1018 1145 0
8022 992 1020 1143 0
8022 993 1007 1155 0
8022 993 1008 1153 0
8022 993 1010 1151 0
8022 993 1012 1149 0
8022 993 1014 1147 0
8022 993 1016 1145 0
8022 993 1018 1143 0
8022 993 1020 1142 0
8022 995 1155 0
8022 995 1007 1153 0
8022 995 1008 1151 0
8022 995 1010 1149 0
8022 995 1012 1147 0
8022 995 1014 1145 0
8022 995 1016 1143 0
8022 995 1018 1142 0
8022 995 1020 0
8022 997 1153 0
8022 997 1007 1151 0
8022 997 1008 1149 0
8022 997 1010 1147 0
8022 997 1012 1145 0
8022 997 1014 1143 0
8022 997 1016 1142 0
8022 997 1018 0
8022 997 1020 0
8022 999 1151 0
8022 999 1007 1149 0
8022 999 1008 1147 0
8022 999 1010 1145 0
8022 999 1012 1143 0
8022 999 1014 1142 0
8022 999 1016 0
8022 999 1018 0
8022 999 1020 0
8022 1001 1149 0
8022 1001 1007 1147 0
8022 1001 1008 1145 0
8022 1001 1010 1143 0
8022 1001 1012 1142 0
8022 1001 1014 0
8022 1001 1016 0
8022 1001 1018 0
8022 1001 1020 0
8022 1003 1147 0
8022 1003 1007 1145 0
8022 1003 1008 1143 0
8022 1003 1010 1142 0
8022 1003 1012 0
8022 1003 1014 0
8022 1003 1016 0
8022 1003 1018 0
8022 1003 1020 0
8022 1005 1145 0
8022 1005 1007 1143 0
8022 1005 1008 1142 0
8022 1005 1010 0
8022 1005 1012 0
8022 1005 1014 0
8022 1005 1016 0
8022 1005 1018 0
8022 1005 1020 0
c (((x_00008_00006 + x_00009_00006)<=11)=tv=SATLiteral(8023))
-8023 1023 1170 0
-8023 1025 1168 0
-8023 1027 1166 0
-8023 1029 1164 0
-8023 1031 1162 0
-8023 1033 1160 0
-8023 1035 1158 0
8023 -1158 0
8023 -1035 -1160 0
8023 -1033 -1162 0
8023 -1031 -1164 0
8023 -1029 -1166 0
8023 -1027 -1168 0
8023 -1025 -1170 0
8023 -1023 0
8023 -1022 0
c ((11<=(x_00008_00006 + x_00009_00006))=tv=SATLiteral(8024))
-8024 -1157 0
-8024 -1035 -1158 0
-8024 -1033 -1160 0
-8024 -1031 -1162 0
-8024 -1029 -1164 0
-8024 -1027 -1166 0
-8024 -1025 -1168 0
-8024 -1023 -1170 0
-8024 -1022 0
8024 1022 1170 0
8024 1023 1168 0
8024 1025 1166 0
8024 1027 1164 0
8024 1029 1162 0
8024 1031 1160 0
8024 1033 1158 0
8024 1035 1157 0
c (((x_00008_00007 + x_00008_00008 + x_00009_00007)<=14)=tv=SATLiteral(8025))
-8025 1057 1185 0
-8025 1059 1183 0
-8025 1061 1181 0
-8025 1063 1179 0
-8025 1065 1177 0
-8025 1037 1055 1185 0
-8025 1037 1057 1183 0
-8025 1037 1059 1181 0
-8025 1037 1061 1179 0
-8025 1037 1063 1177 0
-8025 1037 1065 1175 0
-8025 1038 1053 1185 0
-8025 1038 1055 1183 0
-8025 1038 1057 1181 0
-8025 1038 1059 1179 0
-8025 1038 1061 1177 0
-8025 1038 1063 1175 0
-8025 1038 1065 1173 0
-8025 1040 1052 1185 0
-8025 1040 1053 1183 0
-8025 1040 1055 1181 0
-8025 1040 1057 1179 0
-8025 1040 1059 1177 0
-8025 1040 1061 1175 0
-8025 1040 1063 1173 0
-8025 1040 1065 1172 0
-8025 1042 1185 0
-8025 1042 1052 1183 0
-8025 1042 1053 1181 0
-8025 1042 1055 1179 0
-8025 1042 1057 1177 0
-8025 1042 1059 1175 0
-8025 1042 1061 1173 0
-8025 1042 1063 1172 0
-8025 1042 1065 0
-8025 1044 1183 0
-8025 1044 1052 1181 0
-8025 1044 1053 1179 0
-8025 1044 1055 1177 0
-8025 1044 1057 1175 0
-8025 1044 1059 1173 0
-8025 1044 1061 1172 0
-8025 1044 1063 0
-8025 1044 1065 0
-8025 1046 1181 0
-8025 1046 1052 1179 0
-8025 1046 1053 1177 0
-8025 1046 1055 1175 0
-8025 1046 1057 1173 0
-8025 1046 1059 1172 0
-8025 1046 1061 0
-8025 1046 1063 0
-8025 1046 1065 0
-8025 1048 1179 0
-8025 1048 1052 1177 0
-8025 1048 1053 1175 0
-8025 1048 1055 1173 0
-8025 1048 1057 1172 0
-8025 1048 1059 0
-8025 1048 1061 0
-8025 1048 1063 0
-8025 1048 1065 0
-8025 1050 1177 0
-8025 1050 1052 1175 0
-8025 1050 1053 1173 0
-8025 1050 1055 1172 0
-8025 1050 1057 0
-8025 1050 1059 0
-8025 1050 1061 0
-8025 1050 1063 0
-8025 1050 1065 0
8025 -1057 -1172 0
8025 -1055 -1173 0
8025 -1053 -1175 0
8025 -1052 -1177 0
8025 -1050 -1059 -1172 0
8025 -1050 -1057 -1173 0
8025 -1050 -1055 -1175 0
8025 -1050 -1053 -1177 0
8025 -1050 -1052 -1179 0
8025 -1048 -1061 -1172 0
8025 -1048 -1059 -1173 0
8025 -1048 -1057 -1175 0
8025 -1048 -1055 -1177 0
8025 -1048 -1053 -1179 0
8025 -1048 -1052 -1181 0
8025 -1046 -1063 -1172 0
8025 -1046 -1061 -1173 0
8025 -1046 -1059 -1175 0
8025 -1046 -1057 -1177 0
8025 -1046 -1055 -1179 0
8025 -1046 -1053 -1181 0
8025 -1046 -1052 -1183 0
8025 -1044 -1065 -1172 0
8025 -1044 -1063 -1173 0
8025 -1044 -1061 -1175 0
8025 -1044 -1059 -1177 0
8025 -1044 -1057 -1179 0
8025 -1044 -1055 -1181 0
8025 -1044 -1053 -1183 0
8025 -1044 -1052 -1185 0
8025 -1042 -1172 0
8025 -1042 -1065 -1173 0
8025 -1042 -1063 -1175 0
8025 -1042 -1061 -1177 0
8025 -1042 -1059 -1179 0
8025 -1042 -1057 -1181 0
8025 -1042 -1055 -1183 0
8025 -1042 -1053 -1185 0
8025 -1042 -1052 0
8025 -1040 -1173 0
8025 -1040 -1065 -1175 0
8025 -1040 -1063 -1177 0
8025 -1040 -1061 -1179 0
8025 -1040 -1059 -1181 0
8025 -1040 -1057 -1183 0
8025 -1040 -1055 -1185 0
8025 -1040 -1053 0
8025 -1040 -1052 0
8025 -1038 -1175 0
8025 -1038 -1065 -1177 0
8025 -1038 -1063 -1179 0
8025 -1038 -1061 -1181 0
8025 -1038 -1059 -1183 0
8025 -1038 -1057 -1185 0
8025 -1038 -1055 0
8025 -1038 -1053 0
8025 -1038 -1052 0
8025 -1037 -1177 0
8025 -1037 -1065 -1179 0
8025 -1037 -1063 -1181 0
8025 -1037 -1061 -1183 0
8025 -1037 -1059 -1185 0
8025 -1037 -1057 0
8025 -1037 -1055 0
8025 -1037 -1053 0
8025 -1037 -1052 0
c ((14<=(x_00008_00007 + x_00008_00008 + x_00009_00007))=tv=SATLiteral(8026))
-8026 -1055 -1172 0
-8026 -1053 -1173 0
-8026 -1052 -1175 0
-8026 -1050 -1057 -1172 0
-8026 -1050 -1055 -1173 0
-8026 -1050 -1053 -1175 0
-8026 -1050 -1052 -1177 0
-8026 -1048 -1059 -1172 0
-8026 -1048 -1057 -1173 0
-8026 -1048 -1055 -1175 0
-8026 -1048 -1053 -1177 0
-8026 -1048 -1052 -1179 0
-8026 -1046 -1061 -1172 0
-8026 -1046 -1059 -1173 0
-8026 -1046 -1057 -1175 0
-8026 -1046 -1055 -1177 0
-8026 -1046 -1053 -1179 0
-8026 -1046 -1052 -1181 0
-8026 -1044 -1063 -1172 0
-8026 -1044 -1061 -1173 0
-8026 -1044 -1059 -1175 0
-8026 -1044 -1057 -1177 0
-8026 -1044 -1055 -1179 0
-8026 -1044 -1053 -1181 0
-8026 -1044 -1052 -1183 0
-8026 -1042 -1065 -1172 0
-8026 -1042 -1063 -1173 0
-8026 -1042 -1061 -1175 0
-8026 -1042 -1059 -1177 0
-8026 -1042 -1057 -1179 0
-8026 -1042 -1055 -1181 0
-8026 -1042 -1053 -1183 0
-8026 -1042 -1052 -1185 0
-8026 -1040 -1172 0
-8026 -1040 -1065 -1173 0
-8026 -1040 -1063 -1175 0
-8026 -1040 -1061 -1177 0
-8026 -1040 -1059 -1179 0
-8026 -1040 -1057 -1181 0
-8026 -1040 -1055 -1183 0
-8026 -1040 -1053 -1185 0
-8026 -1040 -1052 0
-8026 -1038 -1173 0
-8026 -1038 -1065 -1175 0
-8026 -1038 -1063 -1177 0
-8026 -1038 -1061 -1179 0
-8026 -1038 -1059 -1181 0
-8026 -1038 -1057 -1183 0
-8026 -1038 -1055 -1185 0
-8026 -1038 -1053 0
-8026 -1038 -1052 0
-8026 -1037 -1175 0
-8026 -1037 -1065 -1177 0
-8026 -1037 -1063 -1179 0
-8026 -1037 -1061 -1181 0
-8026 -1037 -1059 -1183 0
-8026 -1037 -1057 -1185 0
-8026 -1037 -1055 0
-8026 -1037 -1053 0
-8026 -1037 -1052 0
8026 1055 1185 0
8026 1057 1183 0
8026 1059 1181 0
8026 1061 1179 0
8026 1063 1177 0
8026 1065 1175 0
8026 1037 1053 1185 0
8026 1037 1055 1183 0
8026 1037 1057 1181 0
8026 1037 1059 1179 0
8026 1037 1061 1177 0
8026 1037 1063 1175 0
8026 1037 1065 1173 0
8026 1038 1052 1185 0
8026 1038 1053 1183 0
8026 1038 1055 1181 0
8026 1038 1057 1179 0
8026 1038 1059 1177 0
8026 1038 1061 1175 0
8026 1038 1063 1173 0
8026 1038 1065 1172 0
8026 1040 1185 0
8026 1040 1052 1183 0
8026 1040 1053 1181 0
8026 1040 1055 1179 0
8026 1040 1057 1177 0
8026 1040 1059 1175 0
8026 1040 1061 1173 0
8026 1040 1063 1172 0
8026 1040 1065 0
8026 1042 1183 0
8026 1042 1052 1181 0
8026 1042 1053 1179 0
8026 1042 1055 1177 0
8026 1042 1057 1175 0
8026 1042 1059 1173 0
8026 1042 1061 1172 0
8026 1042 1063 0
8026 1042 1065 0
8026 1044 1181 0
8026 1044 1052 1179 0
8026 1044 1053 1177 0
8026 1044 1055 1175 0
8026 1044 1057 1173 0
8026 1044 1059 1172 0
8026 1044 1061 0
8026 1044 1063 0
8026 1044 1065 0
8026 1046 1179 0
8026 1046 1052 1177 0
8026 1046 1053 1175 0
8026 1046 1055 1173 0
8026 1046 1057 1172 0
8026 1046 1059 0
8026 1046 1061 0
8026 1046 1063 0
8026 1046 1065 0
8026 1048 1177 0
8026 1048 1052 1175 0
8026 1048 1053 1173 0
8026 1048 1055 1172 0
8026 1048 1057 0
8026 1048 1059 0
8026 1048 1061 0
8026 1048 1063 0
8026 1048 1065 0
8026 1050 1175 0
8026 1050 1052 1173 0
8026 1050 1053 1172 0
8026 1050 1055 0
8026 1050 1057 0
8026 1050 1059 0
8026 1050 1061 0
8026 1050 1063 0
8026 1050 1065 0
c (((x_00009_00001 + x_00009_00002)<=17)=tv=SATLiteral(8027))
-8027 1095 1110 0
8027 -1110 0
8027 -1095 0
8027 -1093 0
8027 -1091 0
8027 -1089 0
8027 -1087 0
8027 -1085 0
8027 -1083 0
8027 -1082 0
c ((17<=(x_00009_00001 + x_00009_00002))=tv=SATLiteral(8028))
-8028 -1108 0
-8028 -1095 -1110 0
-8028 -1093 0
-8028 -1091 0
-8028 -1089 0
-8028 -1087 0
-8028 -1085 0
-8028 -1083 0
-8028 -1082 0
8028 1093 1110 0
8028 1095 1108 0
c (((x_00009_00003 + x_00009_00004)<=8)=tv=SATLiteral(8029))
-8029 1138 0
-8029 1112 1136 0
-8029 1113 1134 0
-8029 1115 1132 0
-8029 1117 1130 0
-8029 1119 1128 0
-8029 1121 1127 0
-8029 1123 0
-8029 1125 0
8029 -1123 -1127 0
8029 -1121 -1128 0
8029 -1119 -1130 0
8029 -1117 -1132 0
8029 -1115 -1134 0
8029 -1113 -1136 0
8029 -1112 -1138 0
c ((8<=(x_00009_00003 + x_00009_00004))=tv=SATLiteral(8030))
-8030 -1121 -1127 0
-8030 -1119 -1128 0
-8030 -1117 -1130 0
-8030 -1115 -1132 0
-8030 -1113 -1134 0
-8030 -1112 -1136 0
8030 1136 0
8030 1112 1134 0
8030 1113 1132 0
8030 1115 1130 0
8030 1117 1128 0
8030 1119 1127 0
8030 1121 0
8030 1123 0
8030 1125 0
c (((aux443 + aux446 + aux447)<=1)=tv=SATLiteral(8031))
-8031 1972 0
-8031 1966 1971 0
-8031 1967 0
-8031 1969 0
-8031 1957 1971 0
-8031 1957 1966 0
-8031 1957 1967 0
-8031 1957 1969 0
-8031 1958 0
-8031 1958 1966 0
-8031 1958 1967 0
-8031 1958 1969 0
8031 -1958 -1966 -1971 0
8031 -1957 -1967 -1971 0
8031 -1957 -1966 -1972 0
c ((1<=(aux443 + aux446 + aux447))=tv=SATLiteral(8032))
-8032 -1957 -1966 -1971 0
8032 1971 0
8032 1966 0
8032 1967 0
8032 1969 0
8032 1957 0
8032 1957 1966 0
8032 1957 1967 0
8032 1957 1969 0
8032 1958 0
8032 1958 1966 0
8032 1958 1967 0
8032 1958 1969 0
c (((aux449 + aux452 + aux453)<=1)=tv=SATLiteral(8033))
-8033 1996 0
-8033 1990 1995 0
-8033 1991 0
-8033 1993 0
-8033 1981 1995 0
-8033 1981 1990 0
-8033 1981 1991 0
-8033 1981 1993 0
-8033 1982 0
-8033 1982 1990 0
-8033 1982 1991 0
-8033 1982 1993 0
8033 -1982 -1990 -1995 0
8033 -1981 -1991 -1995 0
8033 -1981 -1990 -1996 0
c ((1<=(aux449 + aux452 + aux453))=tv=SATLiteral(8034))
-8034 -1981 -1990 -1995 0
8034 1995 0
8034 1990 0
8034 1991 0
8034 1993 0
8034 1981 0
8034 1981 1990 0
8034 1981 1991 0
8034 1981 1993 0
8034 1982 0
8034 1982 1990 0
8034 1982 1991 0
8034 1982 1993 0
c (((aux455 + aux458 + aux459)<=1)=tv=SATLiteral(8035))
-8035 2020 0
-8035 2014 2019 0
-8035 2015 0
-8035 2017 0
-8035 2005 2019 0
-8035 2005 2014 0
-8035 2005 2015 0
-8035 2005 2017 0
-8035 2006 0
-8035 2006 2014 0
-8035 2006 2015 0
-8035 2006 2017 0
8035 -2006 -2014 -2019 0
8035 -2005 -2015 -2019 0
8035 -2005 -2014 -2020 0
c ((1<=(aux455 + aux458 + aux459))=tv=SATLiteral(8036))
-8036 -2005 -2014 -2019 0
8036 2019 0
8036 2014 0
8036 2015 0
8036 2017 0
8036 2005 0
8036 2005 2014 0
8036 2005 2015 0
8036 2005 2017 0
8036 2006 0
8036 2006 2014 0
8036 2006 2015 0
8036 2006 2017 0
c (((aux461 + aux464 + aux465)<=1)=tv=SATLiteral(8037))
-8037 2044 0
-8037 2038 2043 0
-8037 2039 0
-8037 2041 0
-8037 2029 2043 0
-8037 2029 2038 0
-8037 2029 2039 0
-8037 2029 2041 0
-8037 2030 0
-8037 2030 2038 0
-8037 2030 2039 0
-8037 2030 2041 0
8037 -2030 -2038 -2043 0
8037 -2029 -2039 -2043 0
8037 -2029 -2038 -2044 0
c ((1<=(aux461 + aux464 + aux465))=tv=SATLiteral(8038))
-8038 -2029 -2038 -2043 0
8038 2043 0
8038 2038 0
8038 2039 0
8038 2041 0
8038 2029 0
8038 2029 2038 0
8038 2029 2039 0
8038 2029 2041 0
8038 2030 0
8038 2030 2038 0
8038 2030 2039 0
8038 2030 2041 0
c (((aux467 + aux470 + aux471)<=1)=tv=SATLiteral(8039))
-8039 2068 0
-8039 2062 2067 0
-8039 2063 0
-8039 2065 0
-8039 2053 2067 0
-8039 2053 2062 0
-8039 2053 2063 0
-8039 2053 2065 0
-8039 2054 0
-8039 2054 2062 0
-8039 2054 2063 0
-8039 2054 2065 0
8039 -2054 -2062 -2067 0
8039 -2053 -2063 -2067 0
8039 -2053 -2062 -2068 0
c ((1<=(aux467 + aux470 + aux471))=tv=SATLiteral(8040))
-8040 -2053 -2062 -2067 0
8040 2067 0
8040 2062 0
8040 2063 0
8040 2065 0
8040 2053 0
8040 2053 2062 0
8040 2053 2063 0
8040 2053 2065 0
8040 2054 0
8040 2054 2062 0
8040 2054 2063 0
8040 2054 2065 0
c (((aux473 + aux476 + aux477)<=1)=tv=SATLiteral(8041))
-8041 2092 0
-8041 2086 2091 0
-8041 2087 0
-8041 2089 0
-8041 2077 2091 0
-8041 2077 2086 0
-8041 2077 2087 0
-8041 2077 2089 0
-8041 2078 0
-8041 2078 2086 0
-8041 2078 2087 0
-8041 2078 2089 0
8041 -2078 -2086 -2091 0
8041 -2077 -2087 -2091 0
8041 -2077 -2086 -2092 0
c ((1<=(aux473 + aux476 + aux477))=tv=SATLiteral(8042))
-8042 -2077 -2086 -2091 0
8042 2091 0
8042 2086 0
8042 2087 0
8042 2089 0
8042 2077 0
8042 2077 2086 0
8042 2077 2087 0
8042 2077 2089 0
8042 2078 0
8042 2078 2086 0
8042 2078 2087 0
8042 2078 2089 0
c (((aux479 + aux482 + aux483)<=1)=tv=SATLiteral(8043))
-8043 2116 0
-8043 2110 2115 0
-8043 2111 0
-8043 2113 0
-8043 2101 2115 0
-8043 2101 2110 0
-8043 2101 2111 0
-8043 2101 2113 0
-8043 2102 0
-8043 2102 2110 0
-8043 2102 2111 0
-8043 2102 2113 0
8043 -2102 -2110 -2115 0
8043 -2101 -2111 -2115 0
8043 -2101 -2110 -2116 0
c ((1<=(aux479 + aux482 + aux483))=tv=SATLiteral(8044))
-8044 -2101 -2110 -2115 0
8044 2115 0
8044 2110 0
8044 2111 0
8044 2113 0
8044 2101 0
8044 2101 2110 0
8044 2101 2111 0
8044 2101 2113 0
8044 2102 0
8044 2102 2110 0
8044 2102 2111 0
8044 2102 2113 0
c (((aux485 + aux488 + aux489)<=1)=tv=SATLiteral(8045))
-8045 2140 0
-8045 2134 2139 0
-8045 2135 0
-8045 2137 0
-8045 2125 2139 0
-8045 2125 2134 0
-8045 2125 2135 0
-8045 2125 2137 0
-8045 2126 0
-8045 2126 2134 0
-8045 2126 2135 0
-8045 2126 2137 0
8045 -2126 -2134 -2139 0
8045 -2125 -2135 -2139 0
8045 -2125 -2134 -2140 0
c ((1<=(aux485 + aux488 + aux489))=tv=SATLiteral(8046))
-8046 -2125 -2134 -2139 0
8046 2139 0
8046 2134 0
8046 2135 0
8046 2137 0
8046 2125 0
8046 2125 2134 0
8046 2125 2135 0
8046 2125 2137 0
8046 2126 0
8046 2126 2134 0
8046 2126 2135 0
8046 2126 2137 0
c (((aux491 + aux494 + aux495)<=1)=tv=SATLiteral(8047))
-8047 2164 0
-8047 2158 2163 0
-8047 2159 0
-8047 2161 0
-8047 2149 2163 0
-8047 2149 2158 0
-8047 2149 2159 0
-8047 2149 2161 0
-8047 2150 0
-8047 2150 2158 0
-8047 2150 2159 0
-8047 2150 2161 0
8047 -2150 -2158 -2163 0
8047 -2149 -2159 -2163 0
8047 -2149 -2158 -2164 0
c ((1<=(aux491 + aux494 + aux495))=tv=SATLiteral(8048))
-8048 -2149 -2158 -2163 0
8048 2163 0
8048 2158 0
8048 2159 0
8048 2161 0
8048 2149 0
8048 2149 2158 0
8048 2149 2159 0
8048 2149 2161 0
8048 2150 0
8048 2150 2158 0
8048 2150 2159 0
8048 2150 2161 0
c (((aux497 + aux500 + aux501)<=1)=tv=SATLiteral(8049))
-8049 2188 0
-8049 2182 2187 0
-8049 2183 0
-8049 2185 0
-8049 2173 2187 0
-8049 2173 2182 0
-8049 2173 2183 0
-8049 2173 2185 0
-8049 2174 0
-8049 2174 2182 0
-8049 2174 2183 0
-8049 2174 2185 0
8049 -2174 -2182 -2187 0
8049 -2173 -2183 -2187 0
8049 -2173 -2182 -2188 0
c ((1<=(aux497 + aux500 + aux501))=tv=SATLiteral(8050))
-8050 -2173 -2182 -2187 0
8050 2187 0
8050 2182 0
8050 2183 0
8050 2185 0
8050 2173 0
8050 2173 2182 0
8050 2173 2183 0
8050 2173 2185 0
8050 2174 0
8050 2174 2182 0
8050 2174 2183 0
8050 2174 2185 0
c (((aux503 + aux506 + aux507)<=1)=tv=SATLiteral(8051))
-8051 2212 0
-8051 2206 2211 0
-8051 2207 0
-8051 2209 0
-8051 2197 2211 0
-8051 2197 2206 0
-8051 2197 2207 0
-8051 2197 2209 0
-8051 2198 0
-8051 2198 2206 0
-8051 2198 2207 0
-8051 2198 2209 0
8051 -2198 -2206 -2211 0
8051 -2197 -2207 -2211 0
8051 -2197 -2206 -2212 0
c ((1<=(aux503 + aux506 + aux507))=tv=SATLiteral(8052))
-8052 -2197 -2206 -2211 0
8052 2211 0
8052 2206 0
8052 2207 0
8052 2209 0
8052 2197 0
8052 2197 2206 0
8052 2197 2207 0
8052 2197 2209 0
8052 2198 0
8052 2198 2206 0
8052 2198 2207 0
8052 2198 2209 0
c (((aux509 + aux512 + aux513)<=1)=tv=SATLiteral(8053))
-8053 2236 0
-8053 2230 2235 0
-8053 2231 0
-8053 2233 0
-8053 2221 2235 0
-8053 2221 2230 0
-8053 2221 2231 0
-8053 2221 2233 0
-8053 2222 0
-8053 2222 2230 0
-8053 2222 2231 0
-8053 2222 2233 0
8053 -2222 -2230 -2235 0
8053 -2221 -2231 -2235 0
8053 -2221 -2230 -2236 0
c ((1<=(aux509 + aux512 + aux513))=tv=SATLiteral(8054))
-8054 -2221 -2230 -2235 0
8054 2235 0
8054 2230 0
8054 2231 0
8054 2233 0
8054 2221 0
8054 2221 2230 0
8054 2221 2231 0
8054 2221 2233 0
8054 2222 0
8054 2222 2230 0
8054 2222 2231 0
8054 2222 2233 0
c (((aux515 + aux518 + aux519)<=1)=tv=SATLiteral(8055))
-8055 2260 0
-8055 2254 2259 0
-8055 2255 0
-8055 2257 0
-8055 2245 2259 0
-8055 2245 2254 0
-8055 2245 2255 0
-8055 2245 2257 0
-8055 2246 0
-8055 2246 2254 0
-8055 2246 2255 0
-8055 2246 2257 0
8055 -2246 -2254 -2259 0
8055 -2245 -2255 -2259 0
8055 -2245 -2254 -2260 0
c ((1<=(aux515 + aux518 + aux519))=tv=SATLiteral(8056))
-8056 -2245 -2254 -2259 0
8056 2259 0
8056 2254 0
8056 2255 0
8056 2257 0
8056 2245 0
8056 2245 2254 0
8056 2245 2255 0
8056 2245 2257 0
8056 2246 0
8056 2246 2254 0
8056 2246 2255 0
8056 2246 2257 0
c (((aux521 + aux524 + aux525)<=1)=tv=SATLiteral(8057))
-8057 2284 0
-8057 2278 2283 0
-8057 2279 0
-8057 2281 0
-8057 2269 2283 0
-8057 2269 2278 0
-8057 2269 2279 0
-8057 2269 2281 0
-8057 2270 0
-8057 2270 2278 0
-8057 2270 2279 0
-8057 2270 2281 0
8057 -2270 -2278 -2283 0
8057 -2269 -2279 -2283 0
8057 -2269 -2278 -2284 0
c ((1<=(aux521 + aux524 + aux525))=tv=SATLiteral(8058))
-8058 -2269 -2278 -2283 0
8058 2283 0
8058 2278 0
8058 2279 0
8058 2281 0
8058 2269 0
8058 2269 2278 0
8058 2269 2279 0
8058 2269 2281 0
8058 2270 0
8058 2270 2278 0
8058 2270 2279 0
8058 2270 2281 0
c (((aux527 + aux530 + aux531)<=1)=tv=SATLiteral(8059))
-8059 2308 0
-8059 2302 2307 0
-8059 2303 0
-8059 2305 0
-8059 2293 2307 0
-8059 2293 2302 0
-8059 2293 2303 0
-8059 2293 2305 0
-8059 2294 0
-8059 2294 2302 0
-8059 2294 2303 0
-8059 2294 2305 0
8059 -2294 -2302 -2307 0
8059 -2293 -2303 -2307 0
8059 -2293 -2302 -2308 0
c ((1<=(aux527 + aux530 + aux531))=tv=SATLiteral(8060))
-8060 -2293 -2302 -2307 0
8060 2307 0
8060 2302 0
8060 2303 0
8060 2305 0
8060 2293 0
8060 2293 2302 0
8060 2293 2303 0
8060 2293 2305 0
8060 2294 0
8060 2294 2302 0
8060 2294 2303 0
8060 2294 2305 0
c (((aux533 + aux536 + aux537)<=1)=tv=SATLiteral(8061))
-8061 2332 0
-8061 2326 2331 0
-8061 2327 0
-8061 2329 0
-8061 2317 2331 0
-8061 2317 2326 0
-8061 2317 2327 0
-8061 2317 2329 0
-8061 2318 0
-8061 2318 2326 0
-8061 2318 2327 0
-8061 2318 2329 0
8061 -2318 -2326 -2331 0
8061 -2317 -2327 -2331 0
8061 -2317 -2326 -2332 0
c ((1<=(aux533 + aux536 + aux537))=tv=SATLiteral(8062))
-8062 -2317 -2326 -2331 0
8062 2331 0
8062 2326 0
8062 2327 0
8062 2329 0
8062 2317 0
8062 2317 2326 0
8062 2317 2327 0
8062 2317 2329 0
8062 2318 0
8062 2318 2326 0
8062 2318 2327 0
8062 2318 2329 0
c (((aux539 + aux542 + aux543)<=1)=tv=SATLiteral(8063))
-8063 2356 0
-8063 2350 2355 0
-8063 2351 0
-8063 2353 0
-8063 2341 2355 0
-8063 2341 2350 0
-8063 2341 2351 0
-8063 2341 2353 0
-8063 2342 0
-8063 2342 2350 0
-8063 2342 2351 0
-8063 2342 2353 0
8063 -2342 -2350 -2355 0
8063 -2341 -2351 -2355 0
8063 -2341 -2350 -2356 0
c ((1<=(aux539 + aux542 + aux543))=tv=SATLiteral(8064))
-8064 -2341 -2350 -2355 0
8064 2355 0
8064 2350 0
8064 2351 0
8064 2353 0
8064 2341 0
8064 2341 2350 0
8064 2341 2351 0
8064 2341 2353 0
8064 2342 0
8064 2342 2350 0
8064 2342 2351 0
8064 2342 2353 0
c (((aux545 + aux548 + aux549)<=1)=tv=SATLiteral(8065))
-8065 2380 0
-8065 2374 2379 0
-8065 2375 0
-8065 2377 0
-8065 2365 2379 0
-8065 2365 2374 0
-8065 2365 2375 0
-8065 2365 2377 0
-8065 2366 0
-8065 2366 2374 0
-8065 2366 2375 0
-8065 2366 2377 0
8065 -2366 -2374 -2379 0
8065 -2365 -2375 -2379 0
8065 -2365 -2374 -2380 0
c ((1<=(aux545 + aux548 + aux549))=tv=SATLiteral(8066))
-8066 -2365 -2374 -2379 0
8066 2379 0
8066 2374 0
8066 2375 0
8066 2377 0
8066 2365 0
8066 2365 2374 0
8066 2365 2375 0
8066 2365 2377 0
8066 2366 0
8066 2366 2374 0
8066 2366 2375 0
8066 2366 2377 0
c (((aux551 + aux554 + aux555)<=1)=tv=SATLiteral(8067))
-8067 2404 0
-8067 2398 2403 0
-8067 2399 0
-8067 2401 0
-8067 2389 2403 0
-8067 2389 2398 0
-8067 2389 2399 0
-8067 2389 2401 0
-8067 2390 0
-8067 2390 2398 0
-8067 2390 2399 0
-8067 2390 2401 0
8067 -2390 -2398 -2403 0
8067 -2389 -2399 -2403 0
8067 -2389 -2398 -2404 0
c ((1<=(aux551 + aux554 + aux555))=tv=SATLiteral(8068))
-8068 -2389 -2398 -2403 0
8068 2403 0
8068 2398 0
8068 2399 0
8068 2401 0
8068 2389 0
8068 2389 2398 0
8068 2389 2399 0
8068 2389 2401 0
8068 2390 0
8068 2390 2398 0
8068 2390 2399 0
8068 2390 2401 0
c (((aux557 + aux560 + aux561)<=1)=tv=SATLiteral(8069))
-8069 2428 0
-8069 2422 2427 0
-8069 2423 0
-8069 2425 0
-8069 2413 2427 0
-8069 2413 2422 0
-8069 2413 2423 0
-8069 2413 2425 0
-8069 2414 0
-8069 2414 2422 0
-8069 2414 2423 0
-8069 2414 2425 0
8069 -2414 -2422 -2427 0
8069 -2413 -2423 -2427 0
8069 -2413 -2422 -2428 0
c ((1<=(aux557 + aux560 + aux561))=tv=SATLiteral(8070))
-8070 -2413 -2422 -2427 0
8070 2427 0
8070 2422 0
8070 2423 0
8070 2425 0
8070 2413 0
8070 2413 2422 0
8070 2413 2423 0
8070 2413 2425 0
8070 2414 0
8070 2414 2422 0
8070 2414 2423 0
8070 2414 2425 0
c (((aux563 + aux566 + aux567)<=1)=tv=SATLiteral(8071))
-8071 2452 0
-8071 2446 2451 0
-8071 2447 0
-8071 2449 0
-8071 2437 2451 0
-8071 2437 2446 0
-8071 2437 2447 0
-8071 2437 2449 0
-8071 2438 0
-8071 2438 2446 0
-8071 2438 2447 0
-8071 2438 2449 0
8071 -2438 -2446 -2451 0
8071 -2437 -2447 -2451 0
8071 -2437 -2446 -2452 0
c ((1<=(aux563 + aux566 + aux567))=tv=SATLiteral(8072))
-8072 -2437 -2446 -2451 0
8072 2451 0
8072 2446 0
8072 2447 0
8072 2449 0
8072 2437 0
8072 2437 2446 0
8072 2437 2447 0
8072 2437 2449 0
8072 2438 0
8072 2438 2446 0
8072 2438 2447 0
8072 2438 2449 0
c (((aux569 + aux572 + aux573)<=1)=tv=SATLiteral(8073))
-8073 2476 0
-8073 2470 2475 0
-8073 2471 0
-8073 2473 0
-8073 2461 2475 0
-8073 2461 2470 0
-8073 2461 2471 0
-8073 2461 2473 0
-8073 2462 0
-8073 2462 2470 0
-8073 2462 2471 0
-8073 2462 2473 0
8073 -2462 -2470 -2475 0
8073 -2461 -2471 -2475 0
8073 -2461 -2470 -2476 0
c ((1<=(aux569 + aux572 + aux573))=tv=SATLiteral(8074))
-8074 -2461 -2470 -2475 0
8074 2475 0
8074 2470 0
8074 2471 0
8074 2473 0
8074 2461 0
8074 2461 2470 0
8074 2461 2471 0
8074 2461 2473 0
8074 2462 0
8074 2462 2470 0
8074 2462 2471 0
8074 2462 2473 0
c (((aux575 + aux578 + aux579)<=1)=tv=SATLiteral(8075))
-8075 2500 0
-8075 2494 2499 0
-8075 2495 0
-8075 2497 0
-8075 2485 2499 0
-8075 2485 2494 0
-8075 2485 2495 0
-8075 2485 2497 0
-8075 2486 0
-8075 2486 2494 0
-8075 2486 2495 0
-8075 2486 2497 0
8075 -2486 -2494 -2499 0
8075 -2485 -2495 -2499 0
8075 -2485 -2494 -2500 0
c ((1<=(aux575 + aux578 + aux579))=tv=SATLiteral(8076))
-8076 -2485 -2494 -2499 0
8076 2499 0
8076 2494 0
8076 2495 0
8076 2497 0
8076 2485 0
8076 2485 2494 0
8076 2485 2495 0
8076 2485 2497 0
8076 2486 0
8076 2486 2494 0
8076 2486 2495 0
8076 2486 2497 0
c (((aux581 + aux584 + aux585)<=1)=tv=SATLiteral(8077))
-8077 2524 0
-8077 2518 2523 0
-8077 2519 0
-8077 2521 0
-8077 2509 2523 0
-8077 2509 2518 0
-8077 2509 2519 0
-8077 2509 2521 0
-8077 2510 0
-8077 2510 2518 0
-8077 2510 2519 0
-8077 2510 2521 0
8077 -2510 -2518 -2523 0
8077 -2509 -2519 -2523 0
8077 -2509 -2518 -2524 0
c ((1<=(aux581 + aux584 + aux585))=tv=SATLiteral(8078))
-8078 -2509 -2518 -2523 0
8078 2523 0
8078 2518 0
8078 2519 0
8078 2521 0
8078 2509 0
8078 2509 2518 0
8078 2509 2519 0
8078 2509 2521 0
8078 2510 0
8078 2510 2518 0
8078 2510 2519 0
8078 2510 2521 0
c (((aux587 + aux590 + aux591)<=1)=tv=SATLiteral(8079))
-8079 2548 0
-8079 2542 2547 0
-8079 2543 0
-8079 2545 0
-8079 2533 2547 0
-8079 2533 2542 0
-8079 2533 2543 0
-8079 2533 2545 0
-8079 2534 0
-8079 2534 2542 0
-8079 2534 2543 0
-8079 2534 2545 0
8079 -2534 -2542 -2547 0
8079 -2533 -2543 -2547 0
8079 -2533 -2542 -2548 0
c ((1<=(aux587 + aux590 + aux591))=tv=SATLiteral(8080))
-8080 -2533 -2542 -2547 0
8080 2547 0
8080 2542 0
8080 2543 0
8080 2545 0
8080 2533 0
8080 2533 2542 0
8080 2533 2543 0
8080 2533 2545 0
8080 2534 0
8080 2534 2542 0
8080 2534 2543 0
8080 2534 2545 0
c (((aux593 + aux596 + aux597)<=1)=tv=SATLiteral(8081))
-8081 2572 0
-8081 2566 2571 0
-8081 2567 0
-8081 2569 0
-8081 2557 2571 0
-8081 2557 2566 0
-8081 2557 2567 0
-8081 2557 2569 0
-8081 2558 0
-8081 2558 2566 0
-8081 2558 2567 0
-8081 2558 2569 0
8081 -2558 -2566 -2571 0
8081 -2557 -2567 -2571 0
8081 -2557 -2566 -2572 0
c ((1<=(aux593 + aux596 + aux597))=tv=SATLiteral(8082))
-8082 -2557 -2566 -2571 0
8082 2571 0
8082 2566 0
8082 2567 0
8082 2569 0
8082 2557 0
8082 2557 2566 0
8082 2557 2567 0
8082 2557 2569 0
8082 2558 0
8082 2558 2566 0
8082 2558 2567 0
8082 2558 2569 0
c (((aux599 + aux602 + aux603)<=1)=tv=SATLiteral(8083))
-8083 2596 0
-8083 2590 2595 0
-8083 2591 0
-8083 2593 0
-8083 2581 2595 0
-8083 2581 2590 0
-8083 2581 2591 0
-8083 2581 2593 0
-8083 2582 0
-8083 2582 2590 0
-8083 2582 2591 0
-8083 2582 2593 0
8083 -2582 -2590 -2595 0
8083 -2581 -2591 -2595 0
8083 -2581 -2590 -2596 0
c ((1<=(aux599 + aux602 + aux603))=tv=SATLiteral(8084))
-8084 -2581 -2590 -2595 0
8084 2595 0
8084 2590 0
8084 2591 0
8084 2593 0
8084 2581 0
8084 2581 2590 0
8084 2581 2591 0
8084 2581 2593 0
8084 2582 0
8084 2582 2590 0
8084 2582 2591 0
8084 2582 2593 0
c (((aux605 + aux608 + aux609)<=1)=tv=SATLiteral(8085))
-8085 2620 0
-8085 2614 2619 0
-8085 2615 0
-8085 2617 0
-8085 2605 2619 0
-8085 2605 2614 0
-8085 2605 2615 0
-8085 2605 2617 0
-8085 2606 0
-8085 2606 2614 0
-8085 2606 2615 0
-8085 2606 2617 0
8085 -2606 -2614 -2619 0
8085 -2605 -2615 -2619 0
8085 -2605 -2614 -2620 0
c ((1<=(aux605 + aux608 + aux609))=tv=SATLiteral(8086))
-8086 -2605 -2614 -2619 0
8086 2619 0
8086 2614 0
8086 2615 0
8086 2617 0
8086 2605 0
8086 2605 2614 0
8086 2605 2615 0
8086 2605 2617 0
8086 2606 0
8086 2606 2614 0
8086 2606 2615 0
8086 2606 2617 0
c (((aux611 + aux614 + aux615)<=1)=tv=SATLiteral(8087))
-8087 2644 0
-8087 2638 2643 0
-8087 2639 0
-8087 2641 0
-8087 2629 2643 0
-8087 2629 2638 0
-8087 2629 2639 0
-8087 2629 2641 0
-8087 2630 0
-8087 2630 2638 0
-8087 2630 2639 0
-8087 2630 2641 0
8087 -2630 -2638 -2643 0
8087 -2629 -2639 -2643 0
8087 -2629 -2638 -2644 0
c ((1<=(aux611 + aux614 + aux615))=tv=SATLiteral(8088))
-8088 -2629 -2638 -2643 0
8088 2643 0
8088 2638 0
8088 2639 0
8088 2641 0
8088 2629 0
8088 2629 2638 0
8088 2629 2639 0
8088 2629 2641 0
8088 2630 0
8088 2630 2638 0
8088 2630 2639 0
8088 2630 2641 0
c (((aux617 + aux620 + aux621)<=1)=tv=SATLiteral(8089))
-8089 2668 0
-8089 2662 2667 0
-8089 2663 0
-8089 2665 0
-8089 2653 2667 0
-8089 2653 2662 0
-8089 2653 2663 0
-8089 2653 2665 0
-8089 2654 0
-8089 2654 2662 0
-8089 2654 2663 0
-8089 2654 2665 0
8089 -2654 -2662 -2667 0
8089 -2653 -2663 -2667 0
8089 -2653 -2662 -2668 0
c ((1<=(aux617 + aux620 + aux621))=tv=SATLiteral(8090))
-8090 -2653 -2662 -2667 0
8090 2667 0
8090 2662 0
8090 2663 0
8090 2665 0
8090 2653 0
8090 2653 2662 0
8090 2653 2663 0
8090 2653 2665 0
8090 2654 0
8090 2654 2662 0
8090 2654 2663 0
8090 2654 2665 0
c (((aux623 + aux626 + aux627)<=1)=tv=SATLiteral(8091))
-8091 2692 0
-8091 2686 2691 0
-8091 2687 0
-8091 2689 0
-8091 2677 2691 0
-8091 2677 2686 0
-8091 2677 2687 0
-8091 2677 2689 0
-8091 2678 0
-8091 2678 2686 0
-8091 2678 2687 0
-8091 2678 2689 0
8091 -2678 -2686 -2691 0
8091 -2677 -2687 -2691 0
8091 -2677 -2686 -2692 0
c ((1<=(aux623 + aux626 + aux627))=tv=SATLiteral(8092))
-8092 -2677 -2686 -2691 0
8092 2691 0
8092 2686 0
8092 2687 0
8092 2689 0
8092 2677 0
8092 2677 2686 0
8092 2677 2687 0
8092 2677 2689 0
8092 2678 0
8092 2678 2686 0
8092 2678 2687 0
8092 2678 2689 0
c (((aux629 + aux632 + aux633)<=1)=tv=SATLiteral(8093))
-8093 2716 0
-8093 2710 2715 0
-8093 2711 0
-8093 2713 0
-8093 2701 2715 0
-8093 2701 2710 0
-8093 2701 2711 0
-8093 2701 2713 0
-8093 2702 0
-8093 2702 2710 0
-8093 2702 2711 0
-8093 2702 2713 0
8093 -2702 -2710 -2715 0
8093 -2701 -2711 -2715 0
8093 -2701 -2710 -2716 0
c ((1<=(aux629 + aux632 + aux633))=tv=SATLiteral(8094))
-8094 -2701 -2710 -2715 0
8094 2715 0
8094 2710 0
8094 2711 0
8094 2713 0
8094 2701 0
8094 2701 2710 0
8094 2701 2711 0
8094 2701 2713 0
8094 2702 0
8094 2702 2710 0
8094 2702 2711 0
8094 2702 2713 0
c (((aux635 + aux638 + aux639)<=1)=tv=SATLiteral(8095))
-8095 2740 0
-8095 2734 2739 0
-8095 2735 0
-8095 2737 0
-8095 2725 2739 0
-8095 2725 2734 0
-8095 2725 2735 0
-8095 2725 2737 0
-8095 2726 0
-8095 2726 2734 0
-8095 2726 2735 0
-8095 2726 2737 0
8095 -2726 -2734 -2739 0
8095 -2725 -2735 -2739 0
8095 -2725 -2734 -2740 0
c ((1<=(aux635 + aux638 + aux639))=tv=SATLiteral(8096))
-8096 -2725 -2734 -2739 0
8096 2739 0
8096 2734 0
8096 2735 0
8096 2737 0
8096 2725 0
8096 2725 2734 0
8096 2725 2735 0
8096 2725 2737 0
8096 2726 0
8096 2726 2734 0
8096 2726 2735 0
8096 2726 2737 0
c (((aux641 + aux644 + aux645)<=1)=tv=SATLiteral(8097))
-8097 2764 0
-8097 2758 2763 0
-8097 2759 0
-8097 2761 0
-8097 2749 2763 0
-8097 2749 2758 0
-8097 2749 2759 0
-8097 2749 2761 0
-8097 2750 0
-8097 2750 2758 0
-8097 2750 2759 0
-8097 2750 2761 0
8097 -2750 -2758 -2763 0
8097 -2749 -2759 -2763 0
8097 -2749 -2758 -2764 0
c ((1<=(aux641 + aux644 + aux645))=tv=SATLiteral(8098))
-8098 -2749 -2758 -2763 0
8098 2763 0
8098 2758 0
8098 2759 0
8098 2761 0
8098 2749 0
8098 2749 2758 0
8098 2749 2759 0
8098 2749 2761 0
8098 2750 0
8098 2750 2758 0
8098 2750 2759 0
8098 2750 2761 0
c (((aux647 + aux650 + aux651)<=1)=tv=SATLiteral(8099))
-8099 2788 0
-8099 2782 2787 0
-8099 2783 0
-8099 2785 0
-8099 2773 2787 0
-8099 2773 2782 0
-8099 2773 2783 0
-8099 2773 2785 0
-8099 2774 0
-8099 2774 2782 0
-8099 2774 2783 0
-8099 2774 2785 0
8099 -2774 -2782 -2787 0
8099 -2773 -2783 -2787 0
8099 -2773 -2782 -2788 0
c ((1<=(aux647 + aux650 + aux651))=tv=SATLiteral(8100))
-8100 -2773 -2782 -2787 0
8100 2787 0
8100 2782 0
8100 2783 0
8100 2785 0
8100 2773 0
8100 2773 2782 0
8100 2773 2783 0
8100 2773 2785 0
8100 2774 0
8100 2774 2782 0
8100 2774 2783 0
8100 2774 2785 0
c (((aux653 + aux656 + aux657)<=1)=tv=SATLiteral(8101))
-8101 2812 0
-8101 2806 2811 0
-8101 2807 0
-8101 2809 0
-8101 2797 2811 0
-8101 2797 2806 0
-8101 2797 2807 0
-8101 2797 2809 0
-8101 2798 0
-8101 2798 2806 0
-8101 2798 2807 0
-8101 2798 2809 0
8101 -2798 -2806 -2811 0
8101 -2797 -2807 -2811 0
8101 -2797 -2806 -2812 0
c ((1<=(aux653 + aux656 + aux657))=tv=SATLiteral(8102))
-8102 -2797 -2806 -2811 0
8102 2811 0
8102 2806 0
8102 2807 0
8102 2809 0
8102 2797 0
8102 2797 2806 0
8102 2797 2807 0
8102 2797 2809 0
8102 2798 0
8102 2798 2806 0
8102 2798 2807 0
8102 2798 2809 0
c (((aux659 + aux662 + aux663)<=1)=tv=SATLiteral(8103))
-8103 2836 0
-8103 2830 2835 0
-8103 2831 0
-8103 2833 0
-8103 2821 2835 0
-8103 2821 2830 0
-8103 2821 2831 0
-8103 2821 2833 0
-8103 2822 0
-8103 2822 2830 0
-8103 2822 2831 0
-8103 2822 2833 0
8103 -2822 -2830 -2835 0
8103 -2821 -2831 -2835 0
8103 -2821 -2830 -2836 0
c ((1<=(aux659 + aux662 + aux663))=tv=SATLiteral(8104))
-8104 -2821 -2830 -2835 0
8104 2835 0
8104 2830 0
8104 2831 0
8104 2833 0
8104 2821 0
8104 2821 2830 0
8104 2821 2831 0
8104 2821 2833 0
8104 2822 0
8104 2822 2830 0
8104 2822 2831 0
8104 2822 2833 0
c (((aux665 + aux668 + aux669)<=1)=tv=SATLiteral(8105))
-8105 2860 0
-8105 2854 2859 0
-8105 2855 0
-8105 2857 0
-8105 2845 2859 0
-8105 2845 2854 0
-8105 2845 2855 0
-8105 2845 2857 0
-8105 2846 0
-8105 2846 2854 0
-8105 2846 2855 0
-8105 2846 2857 0
8105 -2846 -2854 -2859 0
8105 -2845 -2855 -2859 0
8105 -2845 -2854 -2860 0
c ((1<=(aux665 + aux668 + aux669))=tv=SATLiteral(8106))
-8106 -2845 -2854 -2859 0
8106 2859 0
8106 2854 0
8106 2855 0
8106 2857 0
8106 2845 0
8106 2845 2854 0
8106 2845 2855 0
8106 2845 2857 0
8106 2846 0
8106 2846 2854 0
8106 2846 2855 0
8106 2846 2857 0
c (((aux671 + aux674 + aux675)<=1)=tv=SATLiteral(8107))
-8107 2884 0
-8107 2878 2883 0
-8107 2879 0
-8107 2881 0
-8107 2869 2883 0
-8107 2869 2878 0
-8107 2869 2879 0
-8107 2869 2881 0
-8107 2870 0
-8107 2870 2878 0
-8107 2870 2879 0
-8107 2870 2881 0
8107 -2870 -2878 -2883 0
8107 -2869 -2879 -2883 0
8107 -2869 -2878 -2884 0
c ((1<=(aux671 + aux674 + aux675))=tv=SATLiteral(8108))
-8108 -2869 -2878 -2883 0
8108 2883 0
8108 2878 0
8108 2879 0
8108 2881 0
8108 2869 0
8108 2869 2878 0
8108 2869 2879 0
8108 2869 2881 0
8108 2870 0
8108 2870 2878 0
8108 2870 2879 0
8108 2870 2881 0
c (((aux677 + aux680 + aux681)<=1)=tv=SATLiteral(8109))
-8109 2908 0
-8109 2902 2907 0
-8109 2903 0
-8109 2905 0
-8109 2893 2907 0
-8109 2893 2902 0
-8109 2893 2903 0
-8109 2893 2905 0
-8109 2894 0
-8109 2894 2902 0
-8109 2894 2903 0
-8109 2894 2905 0
8109 -2894 -2902 -2907 0
8109 -2893 -2903 -2907 0
8109 -2893 -2902 -2908 0
c ((1<=(aux677 + aux680 + aux681))=tv=SATLiteral(8110))
-8110 -2893 -2902 -2907 0
8110 2907 0
8110 2902 0
8110 2903 0
8110 2905 0
8110 2893 0
8110 2893 2902 0
8110 2893 2903 0
8110 2893 2905 0
8110 2894 0
8110 2894 2902 0
8110 2894 2903 0
8110 2894 2905 0
c (((aux683 + aux686 + aux687)<=1)=tv=SATLiteral(8111))
-8111 2932 0
-8111 2926 2931 0
-8111 2927 0
-8111 2929 0
-8111 2917 2931 0
-8111 2917 2926 0
-8111 2917 2927 0
-8111 2917 2929 0
-8111 2918 0
-8111 2918 2926 0
-8111 2918 2927 0
-8111 2918 2929 0
8111 -2918 -2926 -2931 0
8111 -2917 -2927 -2931 0
8111 -2917 -2926 -2932 0
c ((1<=(aux683 + aux686 + aux687))=tv=SATLiteral(8112))
-8112 -2917 -2926 -2931 0
8112 2931 0
8112 2926 0
8112 2927 0
8112 2929 0
8112 2917 0
8112 2917 2926 0
8112 2917 2927 0
8112 2917 2929 0
8112 2918 0
8112 2918 2926 0
8112 2918 2927 0
8112 2918 2929 0
c (((aux689 + aux692 + aux693)<=1)=tv=SATLiteral(8113))
-8113 2956 0
-8113 2950 2955 0
-8113 2951 0
-8113 2953 0
-8113 2941 2955 0
-8113 2941 2950 0
-8113 2941 2951 0
-8113 2941 2953 0
-8113 2942 0
-8113 2942 2950 0
-8113 2942 2951 0
-8113 2942 2953 0
8113 -2942 -2950 -2955 0
8113 -2941 -2951 -2955 0
8113 -2941 -2950 -2956 0
c ((1<=(aux689 + aux692 + aux693))=tv=SATLiteral(8114))
-8114 -2941 -2950 -2955 0
8114 2955 0
8114 2950 0
8114 2951 0
8114 2953 0
8114 2941 0
8114 2941 2950 0
8114 2941 2951 0
8114 2941 2953 0
8114 2942 0
8114 2942 2950 0
8114 2942 2951 0
8114 2942 2953 0
c (((aux695 + aux698 + aux699)<=1)=tv=SATLiteral(8115))
-8115 2980 0
-8115 2974 2979 0
-8115 2975 0
-8115 2977 0
-8115 2965 2979 0
-8115 2965 2974 0
-8115 2965 2975 0
-8115 2965 2977 0
-8115 2966 0
-8115 2966 2974 0
-8115 2966 2975 0
-8115 2966 2977 0
8115 -2966 -2974 -2979 0
8115 -2965 -2975 -2979 0
8115 -2965 -2974 -2980 0
c ((1<=(aux695 + aux698 + aux699))=tv=SATLiteral(8116))
-8116 -2965 -2974 -2979 0
8116 2979 0
8116 2974 0
8116 2975 0
8116 2977 0
8116 2965 0
8116 2965 2974 0
8116 2965 2975 0
8116 2965 2977 0
8116 2966 0
8116 2966 2974 0
8116 2966 2975 0
8116 2966 2977 0
c (((aux701 + aux704 + aux705)<=1)=tv=SATLiteral(8117))
-8117 3004 0
-8117 2998 3003 0
-8117 2999 0
-8117 3001 0
-8117 2989 3003 0
-8117 2989 2998 0
-8117 2989 2999 0
-8117 2989 3001 0
-8117 2990 0
-8117 2990 2998 0
-8117 2990 2999 0
-8117 2990 3001 0
8117 -2990 -2998 -3003 0
8117 -2989 -2999 -3003 0
8117 -2989 -2998 -3004 0
c ((1<=(aux701 + aux704 + aux705))=tv=SATLiteral(8118))
-8118 -2989 -2998 -3003 0
8118 3003 0
8118 2998 0
8118 2999 0
8118 3001 0
8118 2989 0
8118 2989 2998 0
8118 2989 2999 0
8118 2989 3001 0
8118 2990 0
8118 2990 2998 0
8118 2990 2999 0
8118 2990 3001 0
c (((aux707 + aux710 + aux711)<=1)=tv=SATLiteral(8119))
-8119 3028 0
-8119 3022 3027 0
-8119 3023 0
-8119 3025 0
-8119 3013 3027 0
-8119 3013 3022 0
-8119 3013 3023 0
-8119 3013 3025 0
-8119 3014 0
-8119 3014 3022 0
-8119 3014 3023 0
-8119 3014 3025 0
8119 -3014 -3022 -3027 0
8119 -3013 -3023 -3027 0
8119 -3013 -3022 -3028 0
c ((1<=(aux707 + aux710 + aux711))=tv=SATLiteral(8120))
-8120 -3013 -3022 -3027 0
8120 3027 0
8120 3022 0
8120 3023 0
8120 3025 0
8120 3013 0
8120 3013 3022 0
8120 3013 3023 0
8120 3013 3025 0
8120 3014 0
8120 3014 3022 0
8120 3014 3023 0
8120 3014 3025 0
c (((aux713 + aux716 + aux717)<=1)=tv=SATLiteral(8121))
-8121 3052 0
-8121 3046 3051 0
-8121 3047 0
-8121 3049 0
-8121 3037 3051 0
-8121 3037 3046 0
-8121 3037 3047 0
-8121 3037 3049 0
-8121 3038 0
-8121 3038 3046 0
-8121 3038 3047 0
-8121 3038 3049 0
8121 -3038 -3046 -3051 0
8121 -3037 -3047 -3051 0
8121 -3037 -3046 -3052 0
c ((1<=(aux713 + aux716 + aux717))=tv=SATLiteral(8122))
-8122 -3037 -3046 -3051 0
8122 3051 0
8122 3046 0
8122 3047 0
8122 3049 0
8122 3037 0
8122 3037 3046 0
8122 3037 3047 0
8122 3037 3049 0
8122 3038 0
8122 3038 3046 0
8122 3038 3047 0
8122 3038 3049 0
c (((aux719 + aux722 + aux723)<=1)=tv=SATLiteral(8123))
-8123 3076 0
-8123 3070 3075 0
-8123 3071 0
-8123 3073 0
-8123 3061 3075 0
-8123 3061 3070 0
-8123 3061 3071 0
-8123 3061 3073 0
-8123 3062 0
-8123 3062 3070 0
-8123 3062 3071 0
-8123 3062 3073 0
8123 -3062 -3070 -3075 0
8123 -3061 -3071 -3075 0
8123 -3061 -3070 -3076 0
c ((1<=(aux719 + aux722 + aux723))=tv=SATLiteral(8124))
-8124 -3061 -3070 -3075 0
8124 3075 0
8124 3070 0
8124 3071 0
8124 3073 0
8124 3061 0
8124 3061 3070 0
8124 3061 3071 0
8124 3061 3073 0
8124 3062 0
8124 3062 3070 0
8124 3062 3071 0
8124 3062 3073 0
c (((aux725 + aux728 + aux729)<=1)=tv=SATLiteral(8125))
-8125 3100 0
-8125 3094 3099 0
-8125 3095 0
-8125 3097 0
-8125 3085 3099 0
-8125 3085 3094 0
-8125 3085 3095 0
-8125 3085 3097 0
-8125 3086 0
-8125 3086 3094 0
-8125 3086 3095 0
-8125 3086 3097 0
8125 -3086 -3094 -3099 0
8125 -3085 -3095 -3099 0
8125 -3085 -3094 -3100 0
c ((1<=(aux725 + aux728 + aux729))=tv=SATLiteral(8126))
-8126 -3085 -3094 -3099 0
8126 3099 0
8126 3094 0
8126 3095 0
8126 3097 0
8126 3085 0
8126 3085 3094 0
8126 3085 3095 0
8126 3085 3097 0
8126 3086 0
8126 3086 3094 0
8126 3086 3095 0
8126 3086 3097 0
c (((aux731 + aux734 + aux735)<=1)=tv=SATLiteral(8127))
-8127 3124 0
-8127 3118 3123 0
-8127 3119 0
-8127 3121 0
-8127 3109 3123 0
-8127 3109 3118 0
-8127 3109 3119 0
-8127 3109 3121 0
-8127 3110 0
-8127 3110 3118 0
-8127 3110 3119 0
-8127 3110 3121 0
8127 -3110 -3118 -3123 0
8127 -3109 -3119 -3123 0
8127 -3109 -3118 -3124 0
c ((1<=(aux731 + aux734 + aux735))=tv=SATLiteral(8128))
-8128 -3109 -3118 -3123 0
8128 3123 0
8128 3118 0
8128 3119 0
8128 3121 0
8128 3109 0
8128 3109 3118 0
8128 3109 3119 0
8128 3109 3121 0
8128 3110 0
8128 3110 3118 0
8128 3110 3119 0
8128 3110 3121 0
c (((aux737 + aux740 + aux741)<=1)=tv=SATLiteral(8129))
-8129 3148 0
-8129 3142 3147 0
-8129 3143 0
-8129 3145 0
-8129 3133 3147 0
-8129 3133 3142 0
-8129 3133 3143 0
-8129 3133 3145 0
-8129 3134 0
-8129 3134 3142 0
-8129 3134 3143 0
-8129 3134 3145 0
8129 -3134 -3142 -3147 0
8129 -3133 -3143 -3147 0
8129 -3133 -3142 -3148 0
c ((1<=(aux737 + aux740 + aux741))=tv=SATLiteral(8130))
-8130 -3133 -3142 -3147 0
8130 3147 0
8130 3142 0
8130 3143 0
8130 3145 0
8130 3133 0
8130 3133 3142 0
8130 3133 3143 0
8130 3133 3145 0
8130 3134 0
8130 3134 3142 0
8130 3134 3143 0
8130 3134 3145 0
c (((aux743 + aux746 + aux747)<=1)=tv=SATLiteral(8131))
-8131 3172 0
-8131 3166 3171 0
-8131 3167 0
-8131 3169 0
-8131 3157 3171 0
-8131 3157 3166 0
-8131 3157 3167 0
-8131 3157 3169 0
-8131 3158 0
-8131 3158 3166 0
-8131 3158 3167 0
-8131 3158 3169 0
8131 -3158 -3166 -3171 0
8131 -3157 -3167 -3171 0
8131 -3157 -3166 -3172 0
c ((1<=(aux743 + aux746 + aux747))=tv=SATLiteral(8132))
-8132 -3157 -3166 -3171 0
8132 3171 0
8132 3166 0
8132 3167 0
8132 3169 0
8132 3157 0
8132 3157 3166 0
8132 3157 3167 0
8132 3157 3169 0
8132 3158 0
8132 3158 3166 0
8132 3158 3167 0
8132 3158 3169 0
c (((aux749 + aux752 + aux753)<=1)=tv=SATLiteral(8133))
-8133 3196 0
-8133 3190 3195 0
-8133 3191 0
-8133 3193 0
-8133 3181 3195 0
-8133 3181 3190 0
-8133 3181 3191 0
-8133 3181 3193 0
-8133 3182 0
-8133 3182 3190 0
-8133 3182 3191 0
-8133 3182 3193 0
8133 -3182 -3190 -3195 0
8133 -3181 -3191 -3195 0
8133 -3181 -3190 -3196 0
c ((1<=(aux749 + aux752 + aux753))=tv=SATLiteral(8134))
-8134 -3181 -3190 -3195 0
8134 3195 0
8134 3190 0
8134 3191 0
8134 3193 0
8134 3181 0
8134 3181 3190 0
8134 3181 3191 0
8134 3181 3193 0
8134 3182 0
8134 3182 3190 0
8134 3182 3191 0
8134 3182 3193 0
c (((aux755 + aux758 + aux759)<=1)=tv=SATLiteral(8135))
-8135 3220 0
-8135 3214 3219 0
-8135 3215 0
-8135 3217 0
-8135 3205 3219 0
-8135 3205 3214 0
-8135 3205 3215 0
-8135 3205 3217 0
-8135 3206 0
-8135 3206 3214 0
-8135 3206 3215 0
-8135 3206 3217 0
8135 -3206 -3214 -3219 0
8135 -3205 -3215 -3219 0
8135 -3205 -3214 -3220 0
c ((1<=(aux755 + aux758 + aux759))=tv=SATLiteral(8136))
-8136 -3205 -3214 -3219 0
8136 3219 0
8136 3214 0
8136 3215 0
8136 3217 0
8136 3205 0
8136 3205 3214 0
8136 3205 3215 0
8136 3205 3217 0
8136 3206 0
8136 3206 3214 0
8136 3206 3215 0
8136 3206 3217 0
c (((aux761 + aux764 + aux765)<=1)=tv=SATLiteral(8137))
-8137 3244 0
-8137 3238 3243 0
-8137 3239 0
-8137 3241 0
-8137 3229 3243 0
-8137 3229 3238 0
-8137 3229 3239 0
-8137 3229 3241 0
-8137 3230 0
-8137 3230 3238 0
-8137 3230 3239 0
-8137 3230 3241 0
8137 -3230 -3238 -3243 0
8137 -3229 -3239 -3243 0
8137 -3229 -3238 -3244 0
c ((1<=(aux761 + aux764 + aux765))=tv=SATLiteral(8138))
-8138 -3229 -3238 -3243 0
8138 3243 0
8138 3238 0
8138 3239 0
8138 3241 0
8138 3229 0
8138 3229 3238 0
8138 3229 3239 0
8138 3229 3241 0
8138 3230 0
8138 3230 3238 0
8138 3230 3239 0
8138 3230 3241 0
c (((aux767 + aux770 + aux771)<=1)=tv=SATLiteral(8139))
-8139 3268 0
-8139 3262 3267 0
-8139 3263 0
-8139 3265 0
-8139 3253 3267 0
-8139 3253 3262 0
-8139 3253 3263 0
-8139 3253 3265 0
-8139 3254 0
-8139 3254 3262 0
-8139 3254 3263 0
-8139 3254 3265 0
8139 -3254 -3262 -3267 0
8139 -3253 -3263 -3267 0
8139 -3253 -3262 -3268 0
c ((1<=(aux767 + aux770 + aux771))=tv=SATLiteral(8140))
-8140 -3253 -3262 -3267 0
8140 3267 0
8140 3262 0
8140 3263 0
8140 3265 0
8140 3253 0
8140 3253 3262 0
8140 3253 3263 0
8140 3253 3265 0
8140 3254 0
8140 3254 3262 0
8140 3254 3263 0
8140 3254 3265 0
c (((aux773 + aux776 + aux777)<=1)=tv=SATLiteral(8141))
-8141 3292 0
-8141 3286 3291 0
-8141 3287 0
-8141 3289 0
-8141 3277 3291 0
-8141 3277 3286 0
-8141 3277 3287 0
-8141 3277 3289 0
-8141 3278 0
-8141 3278 3286 0
-8141 3278 3287 0
-8141 3278 3289 0
8141 -3278 -3286 -3291 0
8141 -3277 -3287 -3291 0
8141 -3277 -3286 -3292 0
c ((1<=(aux773 + aux776 + aux777))=tv=SATLiteral(8142))
-8142 -3277 -3286 -3291 0
8142 3291 0
8142 3286 0
8142 3287 0
8142 3289 0
8142 3277 0
8142 3277 3286 0
8142 3277 3287 0
8142 3277 3289 0
8142 3278 0
8142 3278 3286 0
8142 3278 3287 0
8142 3278 3289 0
c (((aux779 + aux782 + aux783)<=1)=tv=SATLiteral(8143))
-8143 3316 0
-8143 3310 3315 0
-8143 3311 0
-8143 3313 0
-8143 3301 3315 0
-8143 3301 3310 0
-8143 3301 3311 0
-8143 3301 3313 0
-8143 3302 0
-8143 3302 3310 0
-8143 3302 3311 0
-8143 3302 3313 0
8143 -3302 -3310 -3315 0
8143 -3301 -3311 -3315 0
8143 -3301 -3310 -3316 0
c ((1<=(aux779 + aux782 + aux783))=tv=SATLiteral(8144))
-8144 -3301 -3310 -3315 0
8144 3315 0
8144 3310 0
8144 3311 0
8144 3313 0
8144 3301 0
8144 3301 3310 0
8144 3301 3311 0
8144 3301 3313 0
8144 3302 0
8144 3302 3310 0
8144 3302 3311 0
8144 3302 3313 0
c (((aux785 + aux788 + aux789)<=1)=tv=SATLiteral(8145))
-8145 3340 0
-8145 3334 3339 0
-8145 3335 0
-8145 3337 0
-8145 3325 3339 0
-8145 3325 3334 0
-8145 3325 3335 0
-8145 3325 3337 0
-8145 3326 0
-8145 3326 3334 0
-8145 3326 3335 0
-8145 3326 3337 0
8145 -3326 -3334 -3339 0
8145 -3325 -3335 -3339 0
8145 -3325 -3334 -3340 0
c ((1<=(aux785 + aux788 + aux789))=tv=SATLiteral(8146))
-8146 -3325 -3334 -3339 0
8146 3339 0
8146 3334 0
8146 3335 0
8146 3337 0
8146 3325 0
8146 3325 3334 0
8146 3325 3335 0
8146 3325 3337 0
8146 3326 0
8146 3326 3334 0
8146 3326 3335 0
8146 3326 3337 0
c (((aux791 + aux794 + aux795)<=1)=tv=SATLiteral(8147))
-8147 3364 0
-8147 3358 3363 0
-8147 3359 0
-8147 3361 0
-8147 3349 3363 0
-8147 3349 3358 0
-8147 3349 3359 0
-8147 3349 3361 0
-8147 3350 0
-8147 3350 3358 0
-8147 3350 3359 0
-8147 3350 3361 0
8147 -3350 -3358 -3363 0
8147 -3349 -3359 -3363 0
8147 -3349 -3358 -3364 0
c ((1<=(aux791 + aux794 + aux795))=tv=SATLiteral(8148))
-8148 -3349 -3358 -3363 0
8148 3363 0
8148 3358 0
8148 3359 0
8148 3361 0
8148 3349 0
8148 3349 3358 0
8148 3349 3359 0
8148 3349 3361 0
8148 3350 0
8148 3350 3358 0
8148 3350 3359 0
8148 3350 3361 0
c (((aux797 + aux800 + aux801)<=1)=tv=SATLiteral(8149))
-8149 3388 0
-8149 3382 3387 0
-8149 3383 0
-8149 3385 0
-8149 3373 3387 0
-8149 3373 3382 0
-8149 3373 3383 0
-8149 3373 3385 0
-8149 3374 0
-8149 3374 3382 0
-8149 3374 3383 0
-8149 3374 3385 0
8149 -3374 -3382 -3387 0
8149 -3373 -3383 -3387 0
8149 -3373 -3382 -3388 0
c ((1<=(aux797 + aux800 + aux801))=tv=SATLiteral(8150))
-8150 -3373 -3382 -3387 0
8150 3387 0
8150 3382 0
8150 3383 0
8150 3385 0
8150 3373 0
8150 3373 3382 0
8150 3373 3383 0
8150 3373 3385 0
8150 3374 0
8150 3374 3382 0
8150 3374 3383 0
8150 3374 3385 0
c (((aux803 + aux806 + aux807)<=1)=tv=SATLiteral(8151))
-8151 3412 0
-8151 3406 3411 0
-8151 3407 0
-8151 3409 0
-8151 3397 3411 0
-8151 3397 3406 0
-8151 3397 3407 0
-8151 3397 3409 0
-8151 3398 0
-8151 3398 3406 0
-8151 3398 3407 0
-8151 3398 3409 0
8151 -3398 -3406 -3411 0
8151 -3397 -3407 -3411 0
8151 -3397 -3406 -3412 0
c ((1<=(aux803 + aux806 + aux807))=tv=SATLiteral(8152))
-8152 -3397 -3406 -3411 0
8152 3411 0
8152 3406 0
8152 3407 0
8152 3409 0
8152 3397 0
8152 3397 3406 0
8152 3397 3407 0
8152 3397 3409 0
8152 3398 0
8152 3398 3406 0
8152 3398 3407 0
8152 3398 3409 0
c (((aux809 + aux812 + aux813)<=1)=tv=SATLiteral(8153))
-8153 3436 0
-8153 3430 3435 0
-8153 3431 0
-8153 3433 0
-8153 3421 3435 0
-8153 3421 3430 0
-8153 3421 3431 0
-8153 3421 3433 0
-8153 3422 0
-8153 3422 3430 0
-8153 3422 3431 0
-8153 3422 3433 0
8153 -3422 -3430 -3435 0
8153 -3421 -3431 -3435 0
8153 -3421 -3430 -3436 0
c ((1<=(aux809 + aux812 + aux813))=tv=SATLiteral(8154))
-8154 -3421 -3430 -3435 0
8154 3435 0
8154 3430 0
8154 3431 0
8154 3433 0
8154 3421 0
8154 3421 3430 0
8154 3421 3431 0
8154 3421 3433 0
8154 3422 0
8154 3422 3430 0
8154 3422 3431 0
8154 3422 3433 0
c (((aux815 + aux818 + aux819)<=1)=tv=SATLiteral(8155))
-8155 3460 0
-8155 3454 3459 0
-8155 3455 0
-8155 3457 0
-8155 3445 3459 0
-8155 3445 3454 0
-8155 3445 3455 0
-8155 3445 3457 0
-8155 3446 0
-8155 3446 3454 0
-8155 3446 3455 0
-8155 3446 3457 0
8155 -3446 -3454 -3459 0
8155 -3445 -3455 -3459 0
8155 -3445 -3454 -3460 0
c ((1<=(aux815 + aux818 + aux819))=tv=SATLiteral(8156))
-8156 -3445 -3454 -3459 0
8156 3459 0
8156 3454 0
8156 3455 0
8156 3457 0
8156 3445 0
8156 3445 3454 0
8156 3445 3455 0
8156 3445 3457 0
8156 3446 0
8156 3446 3454 0
8156 3446 3455 0
8156 3446 3457 0
c (((aux821 + aux824 + aux825)<=1)=tv=SATLiteral(8157))
-8157 3484 0
-8157 3478 3483 0
-8157 3479 0
-8157 3481 0
-8157 3469 3483 0
-8157 3469 3478 0
-8157 3469 3479 0
-8157 3469 3481 0
-8157 3470 0
-8157 3470 3478 0
-8157 3470 3479 0
-8157 3470 3481 0
8157 -3470 -3478 -3483 0
8157 -3469 -3479 -3483 0
8157 -3469 -3478 -3484 0
c ((1<=(aux821 + aux824 + aux825))=tv=SATLiteral(8158))
-8158 -3469 -3478 -3483 0
8158 3483 0
8158 3478 0
8158 3479 0
8158 3481 0
8158 3469 0
8158 3469 3478 0
8158 3469 3479 0
8158 3469 3481 0
8158 3470 0
8158 3470 3478 0
8158 3470 3479 0
8158 3470 3481 0
c (((aux827 + aux830 + aux831)<=1)=tv=SATLiteral(8159))
-8159 3508 0
-8159 3502 3507 0
-8159 3503 0
-8159 3505 0
-8159 3493 3507 0
-8159 3493 3502 0
-8159 3493 3503 0
-8159 3493 3505 0
-8159 3494 0
-8159 3494 3502 0
-8159 3494 3503 0
-8159 3494 3505 0
8159 -3494 -3502 -3507 0
8159 -3493 -3503 -3507 0
8159 -3493 -3502 -3508 0
c ((1<=(aux827 + aux830 + aux831))=tv=SATLiteral(8160))
-8160 -3493 -3502 -3507 0
8160 3507 0
8160 3502 0
8160 3503 0
8160 3505 0
8160 3493 0
8160 3493 3502 0
8160 3493 3503 0
8160 3493 3505 0
8160 3494 0
8160 3494 3502 0
8160 3494 3503 0
8160 3494 3505 0
c (((aux833 + aux836 + aux837)<=1)=tv=SATLiteral(8161))
-8161 3532 0
-8161 3526 3531 0
-8161 3527 0
-8161 3529 0
-8161 3517 3531 0
-8161 3517 3526 0
-8161 3517 3527 0
-8161 3517 3529 0
-8161 3518 0
-8161 3518 3526 0
-8161 3518 3527 0
-8161 3518 3529 0
8161 -3518 -3526 -3531 0
8161 -3517 -3527 -3531 0
8161 -3517 -3526 -3532 0
c ((1<=(aux833 + aux836 + aux837))=tv=SATLiteral(8162))
-8162 -3517 -3526 -3531 0
8162 3531 0
8162 3526 0
8162 3527 0
8162 3529 0
8162 3517 0
8162 3517 3526 0
8162 3517 3527 0
8162 3517 3529 0
8162 3518 0
8162 3518 3526 0
8162 3518 3527 0
8162 3518 3529 0
c (((aux839 + aux842 + aux843)<=1)=tv=SATLiteral(8163))
-8163 3556 0
-8163 3550 3555 0
-8163 3551 0
-8163 3553 0
-8163 3541 3555 0
-8163 3541 3550 0
-8163 3541 3551 0
-8163 3541 3553 0
-8163 3542 0
-8163 3542 3550 0
-8163 3542 3551 0
-8163 3542 3553 0
8163 -3542 -3550 -3555 0
8163 -3541 -3551 -3555 0
8163 -3541 -3550 -3556 0
c ((1<=(aux839 + aux842 + aux843))=tv=SATLiteral(8164))
-8164 -3541 -3550 -3555 0
8164 3555 0
8164 3550 0
8164 3551 0
8164 3553 0
8164 3541 0
8164 3541 3550 0
8164 3541 3551 0
8164 3541 3553 0
8164 3542 0
8164 3542 3550 0
8164 3542 3551 0
8164 3542 3553 0
c (((aux845 + aux848 + aux849)<=1)=tv=SATLiteral(8165))
-8165 3580 0
-8165 3574 3579 0
-8165 3575 0
-8165 3577 0
-8165 3565 3579 0
-8165 3565 3574 0
-8165 3565 3575 0
-8165 3565 3577 0
-8165 3566 0
-8165 3566 3574 0
-8165 3566 3575 0
-8165 3566 3577 0
8165 -3566 -3574 -3579 0
8165 -3565 -3575 -3579 0
8165 -3565 -3574 -3580 0
c ((1<=(aux845 + aux848 + aux849))=tv=SATLiteral(8166))
-8166 -3565 -3574 -3579 0
8166 3579 0
8166 3574 0
8166 3575 0
8166 3577 0
8166 3565 0
8166 3565 3574 0
8166 3565 3575 0
8166 3565 3577 0
8166 3566 0
8166 3566 3574 0
8166 3566 3575 0
8166 3566 3577 0
c (((aux851 + aux854 + aux855)<=1)=tv=SATLiteral(8167))
-8167 3604 0
-8167 3598 3603 0
-8167 3599 0
-8167 3601 0
-8167 3589 3603 0
-8167 3589 3598 0
-8167 3589 3599 0
-8167 3589 3601 0
-8167 3590 0
-8167 3590 3598 0
-8167 3590 3599 0
-8167 3590 3601 0
8167 -3590 -3598 -3603 0
8167 -3589 -3599 -3603 0
8167 -3589 -3598 -3604 0
c ((1<=(aux851 + aux854 + aux855))=tv=SATLiteral(8168))
-8168 -3589 -3598 -3603 0
8168 3603 0
8168 3598 0
8168 3599 0
8168 3601 0
8168 3589 0
8168 3589 3598 0
8168 3589 3599 0
8168 3589 3601 0
8168 3590 0
8168 3590 3598 0
8168 3590 3599 0
8168 3590 3601 0
c (((aux857 + aux860 + aux861)<=1)=tv=SATLiteral(8169))
-8169 3628 0
-8169 3622 3627 0
-8169 3623 0
-8169 3625 0
-8169 3613 3627 0
-8169 3613 3622 0
-8169 3613 3623 0
-8169 3613 3625 0
-8169 3614 0
-8169 3614 3622 0
-8169 3614 3623 0
-8169 3614 3625 0
8169 -3614 -3622 -3627 0
8169 -3613 -3623 -3627 0
8169 -3613 -3622 -3628 0
c ((1<=(aux857 + aux860 + aux861))=tv=SATLiteral(8170))
-8170 -3613 -3622 -3627 0
8170 3627 0
8170 3622 0
8170 3623 0
8170 3625 0
8170 3613 0
8170 3613 3622 0
8170 3613 3623 0
8170 3613 3625 0
8170 3614 0
8170 3614 3622 0
8170 3614 3623 0
8170 3614 3625 0
c (((aux863 + aux866 + aux867)<=1)=tv=SATLiteral(8171))
-8171 3652 0
-8171 3646 3651 0
-8171 3647 0
-8171 3649 0
-8171 3637 3651 0
-8171 3637 3646 0
-8171 3637 3647 0
-8171 3637 3649 0
-8171 3638 0
-8171 3638 3646 0
-8171 3638 3647 0
-8171 3638 3649 0
8171 -3638 -3646 -3651 0
8171 -3637 -3647 -3651 0
8171 -3637 -3646 -3652 0
c ((1<=(aux863 + aux866 + aux867))=tv=SATLiteral(8172))
-8172 -3637 -3646 -3651 0
8172 3651 0
8172 3646 0
8172 3647 0
8172 3649 0
8172 3637 0
8172 3637 3646 0
8172 3637 3647 0
8172 3637 3649 0
8172 3638 0
8172 3638 3646 0
8172 3638 3647 0
8172 3638 3649 0
c (((aux869 + aux872 + aux873)<=1)=tv=SATLiteral(8173))
-8173 3676 0
-8173 3670 3675 0
-8173 3671 0
-8173 3673 0
-8173 3661 3675 0
-8173 3661 3670 0
-8173 3661 3671 0
-8173 3661 3673 0
-8173 3662 0
-8173 3662 3670 0
-8173 3662 3671 0
-8173 3662 3673 0
8173 -3662 -3670 -3675 0
8173 -3661 -3671 -3675 0
8173 -3661 -3670 -3676 0
c ((1<=(aux869 + aux872 + aux873))=tv=SATLiteral(8174))
-8174 -3661 -3670 -3675 0
8174 3675 0
8174 3670 0
8174 3671 0
8174 3673 0
8174 3661 0
8174 3661 3670 0
8174 3661 3671 0
8174 3661 3673 0
8174 3662 0
8174 3662 3670 0
8174 3662 3671 0
8174 3662 3673 0
c (((aux875 + aux878 + aux879)<=1)=tv=SATLiteral(8175))
-8175 3700 0
-8175 3694 3699 0
-8175 3695 0
-8175 3697 0
-8175 3685 3699 0
-8175 3685 3694 0
-8175 3685 3695 0
-8175 3685 3697 0
-8175 3686 0
-8175 3686 3694 0
-8175 3686 3695 0
-8175 3686 3697 0
8175 -3686 -3694 -3699 0
8175 -3685 -3695 -3699 0
8175 -3685 -3694 -3700 0
c ((1<=(aux875 + aux878 + aux879))=tv=SATLiteral(8176))
-8176 -3685 -3694 -3699 0
8176 3699 0
8176 3694 0
8176 3695 0
8176 3697 0
8176 3685 0
8176 3685 3694 0
8176 3685 3695 0
8176 3685 3697 0
8176 3686 0
8176 3686 3694 0
8176 3686 3695 0
8176 3686 3697 0
c (((aux881 + aux884 + aux885)<=1)=tv=SATLiteral(8177))
-8177 3724 0
-8177 3718 3723 0
-8177 3719 0
-8177 3721 0
-8177 3709 3723 0
-8177 3709 3718 0
-8177 3709 3719 0
-8177 3709 3721 0
-8177 3710 0
-8177 3710 3718 0
-8177 3710 3719 0
-8177 3710 3721 0
8177 -3710 -3718 -3723 0
8177 -3709 -3719 -3723 0
8177 -3709 -3718 -3724 0
c ((1<=(aux881 + aux884 + aux885))=tv=SATLiteral(8178))
-8178 -3709 -3718 -3723 0
8178 3723 0
8178 3718 0
8178 3719 0
8178 3721 0
8178 3709 0
8178 3709 3718 0
8178 3709 3719 0
8178 3709 3721 0
8178 3710 0
8178 3710 3718 0
8178 3710 3719 0
8178 3710 3721 0
c (((aux887 + aux890 + aux891)<=1)=tv=SATLiteral(8179))
-8179 3748 0
-8179 3742 3747 0
-8179 3743 0
-8179 3745 0
-8179 3733 3747 0
-8179 3733 3742 0
-8179 3733 3743 0
-8179 3733 3745 0
-8179 3734 0
-8179 3734 3742 0
-8179 3734 3743 0
-8179 3734 3745 0
8179 -3734 -3742 -3747 0
8179 -3733 -3743 -3747 0
8179 -3733 -3742 -3748 0
c ((1<=(aux887 + aux890 + aux891))=tv=SATLiteral(8180))
-8180 -3733 -3742 -3747 0
8180 3747 0
8180 3742 0
8180 3743 0
8180 3745 0
8180 3733 0
8180 3733 3742 0
8180 3733 3743 0
8180 3733 3745 0
8180 3734 0
8180 3734 3742 0
8180 3734 3743 0
8180 3734 3745 0
c (((aux893 + aux896 + aux897)<=1)=tv=SATLiteral(8181))
-8181 3772 0
-8181 3766 3771 0
-8181 3767 0
-8181 3769 0
-8181 3757 3771 0
-8181 3757 3766 0
-8181 3757 3767 0
-8181 3757 3769 0
-8181 3758 0
-8181 3758 3766 0
-8181 3758 3767 0
-8181 3758 3769 0
8181 -3758 -3766 -3771 0
8181 -3757 -3767 -3771 0
8181 -3757 -3766 -3772 0
c ((1<=(aux893 + aux896 + aux897))=tv=SATLiteral(8182))
-8182 -3757 -3766 -3771 0
8182 3771 0
8182 3766 0
8182 3767 0
8182 3769 0
8182 3757 0
8182 3757 3766 0
8182 3757 3767 0
8182 3757 3769 0
8182 3758 0
8182 3758 3766 0
8182 3758 3767 0
8182 3758 3769 0
c (((aux899 + aux902 + aux903)<=1)=tv=SATLiteral(8183))
-8183 3796 0
-8183 3790 3795 0
-8183 3791 0
-8183 3793 0
-8183 3781 3795 0
-8183 3781 3790 0
-8183 3781 3791 0
-8183 3781 3793 0
-8183 3782 0
-8183 3782 3790 0
-8183 3782 3791 0
-8183 3782 3793 0
8183 -3782 -3790 -3795 0
8183 -3781 -3791 -3795 0
8183 -3781 -3790 -3796 0
c ((1<=(aux899 + aux902 + aux903))=tv=SATLiteral(8184))
-8184 -3781 -3790 -3795 0
8184 3795 0
8184 3790 0
8184 3791 0
8184 3793 0
8184 3781 0
8184 3781 3790 0
8184 3781 3791 0
8184 3781 3793 0
8184 3782 0
8184 3782 3790 0
8184 3782 3791 0
8184 3782 3793 0
c (((aux905 + aux908 + aux909)<=1)=tv=SATLiteral(8185))
-8185 3820 0
-8185 3814 3819 0
-8185 3815 0
-8185 3817 0
-8185 3805 3819 0
-8185 3805 3814 0
-8185 3805 3815 0
-8185 3805 3817 0
-8185 3806 0
-8185 3806 3814 0
-8185 3806 3815 0
-8185 3806 3817 0
8185 -3806 -3814 -3819 0
8185 -3805 -3815 -3819 0
8185 -3805 -3814 -3820 0
c ((1<=(aux905 + aux908 + aux909))=tv=SATLiteral(8186))
-8186 -3805 -3814 -3819 0
8186 3819 0
8186 3814 0
8186 3815 0
8186 3817 0
8186 3805 0
8186 3805 3814 0
8186 3805 3815 0
8186 3805 3817 0
8186 3806 0
8186 3806 3814 0
8186 3806 3815 0
8186 3806 3817 0
c (((aux911 + aux914 + aux915)<=1)=tv=SATLiteral(8187))
-8187 3844 0
-8187 3838 3843 0
-8187 3839 0
-8187 3841 0
-8187 3829 3843 0
-8187 3829 3838 0
-8187 3829 3839 0
-8187 3829 3841 0
-8187 3830 0
-8187 3830 3838 0
-8187 3830 3839 0
-8187 3830 3841 0
8187 -3830 -3838 -3843 0
8187 -3829 -3839 -3843 0
8187 -3829 -3838 -3844 0
c ((1<=(aux911 + aux914 + aux915))=tv=SATLiteral(8188))
-8188 -3829 -3838 -3843 0
8188 3843 0
8188 3838 0
8188 3839 0
8188 3841 0
8188 3829 0
8188 3829 3838 0
8188 3829 3839 0
8188 3829 3841 0
8188 3830 0
8188 3830 3838 0
8188 3830 3839 0
8188 3830 3841 0
c (((aux917 + aux920 + aux921)<=1)=tv=SATLiteral(8189))
-8189 3868 0
-8189 3862 3867 0
-8189 3863 0
-8189 3865 0
-8189 3853 3867 0
-8189 3853 3862 0
-8189 3853 3863 0
-8189 3853 3865 0
-8189 3854 0
-8189 3854 3862 0
-8189 3854 3863 0
-8189 3854 3865 0
8189 -3854 -3862 -3867 0
8189 -3853 -3863 -3867 0
8189 -3853 -3862 -3868 0
c ((1<=(aux917 + aux920 + aux921))=tv=SATLiteral(8190))
-8190 -3853 -3862 -3867 0
8190 3867 0
8190 3862 0
8190 3863 0
8190 3865 0
8190 3853 0
8190 3853 3862 0
8190 3853 3863 0
8190 3853 3865 0
8190 3854 0
8190 3854 3862 0
8190 3854 3863 0
8190 3854 3865 0
c (((aux923 + aux926 + aux927)<=1)=tv=SATLiteral(8191))
-8191 3892 0
-8191 3886 3891 0
-8191 3887 0
-8191 3889 0
-8191 3877 3891 0
-8191 3877 3886 0
-8191 3877 3887 0
-8191 3877 3889 0
-8191 3878 0
-8191 3878 3886 0
-8191 3878 3887 0
-8191 3878 3889 0
8191 -3878 -3886 -3891 0
8191 -3877 -3887 -3891 0
8191 -3877 -3886 -3892 0
c ((1<=(aux923 + aux926 + aux927))=tv=SATLiteral(8192))
-8192 -3877 -3886 -3891 0
8192 3891 0
8192 3886 0
8192 3887 0
8192 3889 0
8192 3877 0
8192 3877 3886 0
8192 3877 3887 0
8192 3877 3889 0
8192 3878 0
8192 3878 3886 0
8192 3878 3887 0
8192 3878 3889 0
c (((aux929 + aux932 + aux933)<=1)=tv=SATLiteral(8193))
-8193 3916 0
-8193 3910 3915 0
-8193 3911 0
-8193 3913 0
-8193 3901 3915 0
-8193 3901 3910 0
-8193 3901 3911 0
-8193 3901 3913 0
-8193 3902 0
-8193 3902 3910 0
-8193 3902 3911 0
-8193 3902 3913 0
8193 -3902 -3910 -3915 0
8193 -3901 -3911 -3915 0
8193 -3901 -3910 -3916 0
c ((1<=(aux929 + aux932 + aux933))=tv=SATLiteral(8194))
-8194 -3901 -3910 -3915 0
8194 3915 0
8194 3910 0
8194 3911 0
8194 3913 0
8194 3901 0
8194 3901 3910 0
8194 3901 3911 0
8194 3901 3913 0
8194 3902 0
8194 3902 3910 0
8194 3902 3911 0
8194 3902 3913 0
c (((aux935 + aux938 + aux939)<=1)=tv=SATLiteral(8195))
-8195 3940 0
-8195 3934 3939 0
-8195 3935 0
-8195 3937 0
-8195 3925 3939 0
-8195 3925 3934 0
-8195 3925 3935 0
-8195 3925 3937 0
-8195 3926 0
-8195 3926 3934 0
-8195 3926 3935 0
-8195 3926 3937 0
8195 -3926 -3934 -3939 0
8195 -3925 -3935 -3939 0
8195 -3925 -3934 -3940 0
c ((1<=(aux935 + aux938 + aux939))=tv=SATLiteral(8196))
-8196 -3925 -3934 -3939 0
8196 3939 0
8196 3934 0
8196 3935 0
8196 3937 0
8196 3925 0
8196 3925 3934 0
8196 3925 3935 0
8196 3925 3937 0
8196 3926 0
8196 3926 3934 0
8196 3926 3935 0
8196 3926 3937 0
c (((aux941 + aux944 + aux945)<=1)=tv=SATLiteral(8197))
-8197 3964 0
-8197 3958 3963 0
-8197 3959 0
-8197 3961 0
-8197 3949 3963 0
-8197 3949 3958 0
-8197 3949 3959 0
-8197 3949 3961 0
-8197 3950 0
-8197 3950 3958 0
-8197 3950 3959 0
-8197 3950 3961 0
8197 -3950 -3958 -3963 0
8197 -3949 -3959 -3963 0
8197 -3949 -3958 -3964 0
c ((1<=(aux941 + aux944 + aux945))=tv=SATLiteral(8198))
-8198 -3949 -3958 -3963 0
8198 3963 0
8198 3958 0
8198 3959 0
8198 3961 0
8198 3949 0
8198 3949 3958 0
8198 3949 3959 0
8198 3949 3961 0
8198 3950 0
8198 3950 3958 0
8198 3950 3959 0
8198 3950 3961 0
c (((aux947 + aux950 + aux951)<=1)=tv=SATLiteral(8199))
-8199 3988 0
-8199 3982 3987 0
-8199 3983 0
-8199 3985 0
-8199 3973 3987 0
-8199 3973 3982 0
-8199 3973 3983 0
-8199 3973 3985 0
-8199 3974 0
-8199 3974 3982 0
-8199 3974 3983 0
-8199 3974 3985 0
8199 -3974 -3982 -3987 0
8199 -3973 -3983 -3987 0
8199 -3973 -3982 -3988 0
c ((1<=(aux947 + aux950 + aux951))=tv=SATLiteral(8200))
-8200 -3973 -3982 -3987 0
8200 3987 0
8200 3982 0
8200 3983 0
8200 3985 0
8200 3973 0
8200 3973 3982 0
8200 3973 3983 0
8200 3973 3985 0
8200 3974 0
8200 3974 3982 0
8200 3974 3983 0
8200 3974 3985 0
c (((aux953 + aux956 + aux957)<=1)=tv=SATLiteral(8201))
-8201 4012 0
-8201 4006 4011 0
-8201 4007 0
-8201 4009 0
-8201 3997 4011 0
-8201 3997 4006 0
-8201 3997 4007 0
-8201 3997 4009 0
-8201 3998 0
-8201 3998 4006 0
-8201 3998 4007 0
-8201 3998 4009 0
8201 -3998 -4006 -4011 0
8201 -3997 -4007 -4011 0
8201 -3997 -4006 -4012 0
c ((1<=(aux953 + aux956 + aux957))=tv=SATLiteral(8202))
-8202 -3997 -4006 -4011 0
8202 4011 0
8202 4006 0
8202 4007 0
8202 4009 0
8202 3997 0
8202 3997 4006 0
8202 3997 4007 0
8202 3997 4009 0
8202 3998 0
8202 3998 4006 0
8202 3998 4007 0
8202 3998 4009 0
c (((aux959 + aux962 + aux963)<=1)=tv=SATLiteral(8203))
-8203 4036 0
-8203 4030 4035 0
-8203 4031 0
-8203 4033 0
-8203 4021 4035 0
-8203 4021 4030 0
-8203 4021 4031 0
-8203 4021 4033 0
-8203 4022 0
-8203 4022 4030 0
-8203 4022 4031 0
-8203 4022 4033 0
8203 -4022 -4030 -4035 0
8203 -4021 -4031 -4035 0
8203 -4021 -4030 -4036 0
c ((1<=(aux959 + aux962 + aux963))=tv=SATLiteral(8204))
-8204 -4021 -4030 -4035 0
8204 4035 0
8204 4030 0
8204 4031 0
8204 4033 0
8204 4021 0
8204 4021 4030 0
8204 4021 4031 0
8204 4021 4033 0
8204 4022 0
8204 4022 4030 0
8204 4022 4031 0
8204 4022 4033 0
c (((aux965 + aux968 + aux969)<=1)=tv=SATLiteral(8205))
-8205 4060 0
-8205 4054 4059 0
-8205 4055 0
-8205 4057 0
-8205 4045 4059 0
-8205 4045 4054 0
-8205 4045 4055 0
-8205 4045 4057 0
-8205 4046 0
-8205 4046 4054 0
-8205 4046 4055 0
-8205 4046 4057 0
8205 -4046 -4054 -4059 0
8205 -4045 -4055 -4059 0
8205 -4045 -4054 -4060 0
c ((1<=(aux965 + aux968 + aux969))=tv=SATLiteral(8206))
-8206 -4045 -4054 -4059 0
8206 4059 0
8206 4054 0
8206 4055 0
8206 4057 0
8206 4045 0
8206 4045 4054 0
8206 4045 4055 0
8206 4045 4057 0
8206 4046 0
8206 4046 4054 0
8206 4046 4055 0
8206 4046 4057 0
c (((aux971 + aux974 + aux975)<=1)=tv=SATLiteral(8207))
-8207 4084 0
-8207 4078 4083 0
-8207 4079 0
-8207 4081 0
-8207 4069 4083 0
-8207 4069 4078 0
-8207 4069 4079 0
-8207 4069 4081 0
-8207 4070 0
-8207 4070 4078 0
-8207 4070 4079 0
-8207 4070 4081 0
8207 -4070 -4078 -4083 0
8207 -4069 -4079 -4083 0
8207 -4069 -4078 -4084 0
c ((1<=(aux971 + aux974 + aux975))=tv=SATLiteral(8208))
-8208 -4069 -4078 -4083 0
8208 4083 0
8208 4078 0
8208 4079 0
8208 4081 0
8208 4069 0
8208 4069 4078 0
8208 4069 4079 0
8208 4069 4081 0
8208 4070 0
8208 4070 4078 0
8208 4070 4079 0
8208 4070 4081 0
c (((aux977 + aux980 + aux981)<=1)=tv=SATLiteral(8209))
-8209 4108 0
-8209 4102 4107 0
-8209 4103 0
-8209 4105 0
-8209 4093 4107 0
-8209 4093 4102 0
-8209 4093 4103 0
-8209 4093 4105 0
-8209 4094 0
-8209 4094 4102 0
-8209 4094 4103 0
-8209 4094 4105 0
8209 -4094 -4102 -4107 0
8209 -4093 -4103 -4107 0
8209 -4093 -4102 -4108 0
c ((1<=(aux977 + aux980 + aux981))=tv=SATLiteral(8210))
-8210 -4093 -4102 -4107 0
8210 4107 0
8210 4102 0
8210 4103 0
8210 4105 0
8210 4093 0
8210 4093 4102 0
8210 4093 4103 0
8210 4093 4105 0
8210 4094 0
8210 4094 4102 0
8210 4094 4103 0
8210 4094 4105 0
c (((aux983 + aux986 + aux987)<=1)=tv=SATLiteral(8211))
-8211 4132 0
-8211 4126 4131 0
-8211 4127 0
-8211 4129 0
-8211 4117 4131 0
-8211 4117 4126 0
-8211 4117 4127 0
-8211 4117 4129 0
-8211 4118 0
-8211 4118 4126 0
-8211 4118 4127 0
-8211 4118 4129 0
8211 -4118 -4126 -4131 0
8211 -4117 -4127 -4131 0
8211 -4117 -4126 -4132 0
c ((1<=(aux983 + aux986 + aux987))=tv=SATLiteral(8212))
-8212 -4117 -4126 -4131 0
8212 4131 0
8212 4126 0
8212 4127 0
8212 4129 0
8212 4117 0
8212 4117 4126 0
8212 4117 4127 0
8212 4117 4129 0
8212 4118 0
8212 4118 4126 0
8212 4118 4127 0
8212 4118 4129 0
c (((aux989 + aux992 + aux993)<=1)=tv=SATLiteral(8213))
-8213 4156 0
-8213 4150 4155 0
-8213 4151 0
-8213 4153 0
-8213 4141 4155 0
-8213 4141 4150 0
-8213 4141 4151 0
-8213 4141 4153 0
-8213 4142 0
-8213 4142 4150 0
-8213 4142 4151 0
-8213 4142 4153 0
8213 -4142 -4150 -4155 0
8213 -4141 -4151 -4155 0
8213 -4141 -4150 -4156 0
c ((1<=(aux989 + aux992 + aux993))=tv=SATLiteral(8214))
-8214 -4141 -4150 -4155 0
8214 4155 0
8214 4150 0
8214 4151 0
8214 4153 0
8214 4141 0
8214 4141 4150 0
8214 4141 4151 0
8214 4141 4153 0
8214 4142 0
8214 4142 4150 0
8214 4142 4151 0
8214 4142 4153 0
c (((aux995 + aux998 + aux999)<=1)=tv=SATLiteral(8215))
-8215 4180 0
-8215 4174 4179 0
-8215 4175 0
-8215 4177 0
-8215 4165 4179 0
-8215 4165 4174 0
-8215 4165 4175 0
-8215 4165 4177 0
-8215 4166 0
-8215 4166 4174 0
-8215 4166 4175 0
-8215 4166 4177 0
8215 -4166 -4174 -4179 0
8215 -4165 -4175 -4179 0
8215 -4165 -4174 -4180 0
c ((1<=(aux995 + aux998 + aux999))=tv=SATLiteral(8216))
-8216 -4165 -4174 -4179 0
8216 4179 0
8216 4174 0
8216 4175 0
8216 4177 0
8216 4165 0
8216 4165 4174 0
8216 4165 4175 0
8216 4165 4177 0
8216 4166 0
8216 4166 4174 0
8216 4166 4175 0
8216 4166 4177 0
c (((aux1001 + aux1004 + aux1005)<=1)=tv=SATLiteral(8217))
-8217 4204 0
-8217 4198 4203 0
-8217 4199 0
-8217 4201 0
-8217 4189 4203 0
-8217 4189 4198 0
-8217 4189 4199 0
-8217 4189 4201 0
-8217 4190 0
-8217 4190 4198 0
-8217 4190 4199 0
-8217 4190 4201 0
8217 -4190 -4198 -4203 0
8217 -4189 -4199 -4203 0
8217 -4189 -4198 -4204 0
c ((1<=(aux1001 + aux1004 + aux1005))=tv=SATLiteral(8218))
-8218 -4189 -4198 -4203 0
8218 4203 0
8218 4198 0
8218 4199 0
8218 4201 0
8218 4189 0
8218 4189 4198 0
8218 4189 4199 0
8218 4189 4201 0
8218 4190 0
8218 4190 4198 0
8218 4190 4199 0
8218 4190 4201 0
c (((aux1007 + aux1010 + aux1011)<=1)=tv=SATLiteral(8219))
-8219 4228 0
-8219 4222 4227 0
-8219 4223 0
-8219 4225 0
-8219 4213 4227 0
-8219 4213 4222 0
-8219 4213 4223 0
-8219 4213 4225 0
-8219 4214 0
-8219 4214 4222 0
-8219 4214 4223 0
-8219 4214 4225 0
8219 -4214 -4222 -4227 0
8219 -4213 -4223 -4227 0
8219 -4213 -4222 -4228 0
c ((1<=(aux1007 + aux1010 + aux1011))=tv=SATLiteral(8220))
-8220 -4213 -4222 -4227 0
8220 4227 0
8220 4222 0
8220 4223 0
8220 4225 0
8220 4213 0
8220 4213 4222 0
8220 4213 4223 0
8220 4213 4225 0
8220 4214 0
8220 4214 4222 0
8220 4214 4223 0
8220 4214 4225 0
c (((aux1013 + aux1016 + aux1017)<=1)=tv=SATLiteral(8221))
-8221 4252 0
-8221 4246 4251 0
-8221 4247 0
-8221 4249 0
-8221 4237 4251 0
-8221 4237 4246 0
-8221 4237 4247 0
-8221 4237 4249 0
-8221 4238 0
-8221 4238 4246 0
-8221 4238 4247 0
-8221 4238 4249 0
8221 -4238 -4246 -4251 0
8221 -4237 -4247 -4251 0
8221 -4237 -4246 -4252 0
c ((1<=(aux1013 + aux1016 + aux1017))=tv=SATLiteral(8222))
-8222 -4237 -4246 -4251 0
8222 4251 0
8222 4246 0
8222 4247 0
8222 4249 0
8222 4237 0
8222 4237 4246 0
8222 4237 4247 0
8222 4237 4249 0
8222 4238 0
8222 4238 4246 0
8222 4238 4247 0
8222 4238 4249 0
c (((aux1019 + aux1022 + aux1023)<=1)=tv=SATLiteral(8223))
-8223 4276 0
-8223 4270 4275 0
-8223 4271 0
-8223 4273 0
-8223 4261 4275 0
-8223 4261 4270 0
-8223 4261 4271 0
-8223 4261 4273 0
-8223 4262 0
-8223 4262 4270 0
-8223 4262 4271 0
-8223 4262 4273 0
8223 -4262 -4270 -4275 0
8223 -4261 -4271 -4275 0
8223 -4261 -4270 -4276 0
c ((1<=(aux1019 + aux1022 + aux1023))=tv=SATLiteral(8224))
-8224 -4261 -4270 -4275 0
8224 4275 0
8224 4270 0
8224 4271 0
8224 4273 0
8224 4261 0
8224 4261 4270 0
8224 4261 4271 0
8224 4261 4273 0
8224 4262 0
8224 4262 4270 0
8224 4262 4271 0
8224 4262 4273 0
c (((aux1025 + aux1028 + aux1029)<=1)=tv=SATLiteral(8225))
-8225 4300 0
-8225 4294 4299 0
-8225 4295 0
-8225 4297 0
-8225 4285 4299 0
-8225 4285 4294 0
-8225 4285 4295 0
-8225 4285 4297 0
-8225 4286 0
-8225 4286 4294 0
-8225 4286 4295 0
-8225 4286 4297 0
8225 -4286 -4294 -4299 0
8225 -4285 -4295 -4299 0
8225 -4285 -4294 -4300 0
c ((1<=(aux1025 + aux1028 + aux1029))=tv=SATLiteral(8226))
-8226 -4285 -4294 -4299 0
8226 4299 0
8226 4294 0
8226 4295 0
8226 4297 0
8226 4285 0
8226 4285 4294 0
8226 4285 4295 0
8226 4285 4297 0
8226 4286 0
8226 4286 4294 0
8226 4286 4295 0
8226 4286 4297 0
c (((aux1031 + aux1034 + aux1035)<=1)=tv=SATLiteral(8227))
-8227 4324 0
-8227 4318 4323 0
-8227 4319 0
-8227 4321 0
-8227 4309 4323 0
-8227 4309 4318 0
-8227 4309 4319 0
-8227 4309 4321 0
-8227 4310 0
-8227 4310 4318 0
-8227 4310 4319 0
-8227 4310 4321 0
8227 -4310 -4318 -4323 0
8227 -4309 -4319 -4323 0
8227 -4309 -4318 -4324 0
c ((1<=(aux1031 + aux1034 + aux1035))=tv=SATLiteral(8228))
-8228 -4309 -4318 -4323 0
8228 4323 0
8228 4318 0
8228 4319 0
8228 4321 0
8228 4309 0
8228 4309 4318 0
8228 4309 4319 0
8228 4309 4321 0
8228 4310 0
8228 4310 4318 0
8228 4310 4319 0
8228 4310 4321 0
c (((aux1037 + aux1040 + aux1041)<=1)=tv=SATLiteral(8229))
-8229 4348 0
-8229 4342 4347 0
-8229 4343 0
-8229 4345 0
-8229 4333 4347 0
-8229 4333 4342 0
-8229 4333 4343 0
-8229 4333 4345 0
-8229 4334 0
-8229 4334 4342 0
-8229 4334 4343 0
-8229 4334 4345 0
8229 -4334 -4342 -4347 0
8229 -4333 -4343 -4347 0
8229 -4333 -4342 -4348 0
c ((1<=(aux1037 + aux1040 + aux1041))=tv=SATLiteral(8230))
-8230 -4333 -4342 -4347 0
8230 4347 0
8230 4342 0
8230 4343 0
8230 4345 0
8230 4333 0
8230 4333 4342 0
8230 4333 4343 0
8230 4333 4345 0
8230 4334 0
8230 4334 4342 0
8230 4334 4343 0
8230 4334 4345 0
c (((aux1043 + aux1046 + aux1047)<=1)=tv=SATLiteral(8231))
-8231 4372 0
-8231 4366 4371 0
-8231 4367 0
-8231 4369 0
-8231 4357 4371 0
-8231 4357 4366 0
-8231 4357 4367 0
-8231 4357 4369 0
-8231 4358 0
-8231 4358 4366 0
-8231 4358 4367 0
-8231 4358 4369 0
8231 -4358 -4366 -4371 0
8231 -4357 -4367 -4371 0
8231 -4357 -4366 -4372 0
c ((1<=(aux1043 + aux1046 + aux1047))=tv=SATLiteral(8232))
-8232 -4357 -4366 -4371 0
8232 4371 0
8232 4366 0
8232 4367 0
8232 4369 0
8232 4357 0
8232 4357 4366 0
8232 4357 4367 0
8232 4357 4369 0
8232 4358 0
8232 4358 4366 0
8232 4358 4367 0
8232 4358 4369 0
c (((aux1049 + aux1052 + aux1053)<=1)=tv=SATLiteral(8233))
-8233 4396 0
-8233 4390 4395 0
-8233 4391 0
-8233 4393 0
-8233 4381 4395 0
-8233 4381 4390 0
-8233 4381 4391 0
-8233 4381 4393 0
-8233 4382 0
-8233 4382 4390 0
-8233 4382 4391 0
-8233 4382 4393 0
8233 -4382 -4390 -4395 0
8233 -4381 -4391 -4395 0
8233 -4381 -4390 -4396 0
c ((1<=(aux1049 + aux1052 + aux1053))=tv=SATLiteral(8234))
-8234 -4381 -4390 -4395 0
8234 4395 0
8234 4390 0
8234 4391 0
8234 4393 0
8234 4381 0
8234 4381 4390 0
8234 4381 4391 0
8234 4381 4393 0
8234 4382 0
8234 4382 4390 0
8234 4382 4391 0
8234 4382 4393 0
c (((aux1055 + aux1058 + aux1059)<=1)=tv=SATLiteral(8235))
-8235 4420 0
-8235 4414 4419 0
-8235 4415 0
-8235 4417 0
-8235 4405 4419 0
-8235 4405 4414 0
-8235 4405 4415 0
-8235 4405 4417 0
-8235 4406 0
-8235 4406 4414 0
-8235 4406 4415 0
-8235 4406 4417 0
8235 -4406 -4414 -4419 0
8235 -4405 -4415 -4419 0
8235 -4405 -4414 -4420 0
c ((1<=(aux1055 + aux1058 + aux1059))=tv=SATLiteral(8236))
-8236 -4405 -4414 -4419 0
8236 4419 0
8236 4414 0
8236 4415 0
8236 4417 0
8236 4405 0
8236 4405 4414 0
8236 4405 4415 0
8236 4405 4417 0
8236 4406 0
8236 4406 4414 0
8236 4406 4415 0
8236 4406 4417 0
c (((aux1061 + aux1064 + aux1065)<=1)=tv=SATLiteral(8237))
-8237 4444 0
-8237 4438 4443 0
-8237 4439 0
-8237 4441 0
-8237 4429 4443 0
-8237 4429 4438 0
-8237 4429 4439 0
-8237 4429 4441 0
-8237 4430 0
-8237 4430 4438 0
-8237 4430 4439 0
-8237 4430 4441 0
8237 -4430 -4438 -4443 0
8237 -4429 -4439 -4443 0
8237 -4429 -4438 -4444 0
c ((1<=(aux1061 + aux1064 + aux1065))=tv=SATLiteral(8238))
-8238 -4429 -4438 -4443 0
8238 4443 0
8238 4438 0
8238 4439 0
8238 4441 0
8238 4429 0
8238 4429 4438 0
8238 4429 4439 0
8238 4429 4441 0
8238 4430 0
8238 4430 4438 0
8238 4430 4439 0
8238 4430 4441 0
c (((aux1067 + aux1070 + aux1071)<=1)=tv=SATLiteral(8239))
-8239 4468 0
-8239 4462 4467 0
-8239 4463 0
-8239 4465 0
-8239 4453 4467 0
-8239 4453 4462 0
-8239 4453 4463 0
-8239 4453 4465 0
-8239 4454 0
-8239 4454 4462 0
-8239 4454 4463 0
-8239 4454 4465 0
8239 -4454 -4462 -4467 0
8239 -4453 -4463 -4467 0
8239 -4453 -4462 -4468 0
c ((1<=(aux1067 + aux1070 + aux1071))=tv=SATLiteral(8240))
-8240 -4453 -4462 -4467 0
8240 4467 0
8240 4462 0
8240 4463 0
8240 4465 0
8240 4453 0
8240 4453 4462 0
8240 4453 4463 0
8240 4453 4465 0
8240 4454 0
8240 4454 4462 0
8240 4454 4463 0
8240 4454 4465 0
c (((aux1073 + aux1076 + aux1077)<=1)=tv=SATLiteral(8241))
-8241 4492 0
-8241 4486 4491 0
-8241 4487 0
-8241 4489 0
-8241 4477 4491 0
-8241 4477 4486 0
-8241 4477 4487 0
-8241 4477 4489 0
-8241 4478 0
-8241 4478 4486 0
-8241 4478 4487 0
-8241 4478 4489 0
8241 -4478 -4486 -4491 0
8241 -4477 -4487 -4491 0
8241 -4477 -4486 -4492 0
c ((1<=(aux1073 + aux1076 + aux1077))=tv=SATLiteral(8242))
-8242 -4477 -4486 -4491 0
8242 4491 0
8242 4486 0
8242 4487 0
8242 4489 0
8242 4477 0
8242 4477 4486 0
8242 4477 4487 0
8242 4477 4489 0
8242 4478 0
8242 4478 4486 0
8242 4478 4487 0
8242 4478 4489 0
c (((aux1079 + aux1082 + aux1083)<=1)=tv=SATLiteral(8243))
-8243 4516 0
-8243 4510 4515 0
-8243 4511 0
-8243 4513 0
-8243 4501 4515 0
-8243 4501 4510 0
-8243 4501 4511 0
-8243 4501 4513 0
-8243 4502 0
-8243 4502 4510 0
-8243 4502 4511 0
-8243 4502 4513 0
8243 -4502 -4510 -4515 0
8243 -4501 -4511 -4515 0
8243 -4501 -4510 -4516 0
c ((1<=(aux1079 + aux1082 + aux1083))=tv=SATLiteral(8244))
-8244 -4501 -4510 -4515 0
8244 4515 0
8244 4510 0
8244 4511 0
8244 4513 0
8244 4501 0
8244 4501 4510 0
8244 4501 4511 0
8244 4501 4513 0
8244 4502 0
8244 4502 4510 0
8244 4502 4511 0
8244 4502 4513 0
c (((aux1085 + aux1088 + aux1089)<=1)=tv=SATLiteral(8245))
-8245 4540 0
-8245 4534 4539 0
-8245 4535 0
-8245 4537 0
-8245 4525 4539 0
-8245 4525 4534 0
-8245 4525 4535 0
-8245 4525 4537 0
-8245 4526 0
-8245 4526 4534 0
-8245 4526 4535 0
-8245 4526 4537 0
8245 -4526 -4534 -4539 0
8245 -4525 -4535 -4539 0
8245 -4525 -4534 -4540 0
c ((1<=(aux1085 + aux1088 + aux1089))=tv=SATLiteral(8246))
-8246 -4525 -4534 -4539 0
8246 4539 0
8246 4534 0
8246 4535 0
8246 4537 0
8246 4525 0
8246 4525 4534 0
8246 4525 4535 0
8246 4525 4537 0
8246 4526 0
8246 4526 4534 0
8246 4526 4535 0
8246 4526 4537 0
c (((aux1091 + aux1094 + aux1095)<=1)=tv=SATLiteral(8247))
-8247 4564 0
-8247 4558 4563 0
-8247 4559 0
-8247 4561 0
-8247 4549 4563 0
-8247 4549 4558 0
-8247 4549 4559 0
-8247 4549 4561 0
-8247 4550 0
-8247 4550 4558 0
-8247 4550 4559 0
-8247 4550 4561 0
8247 -4550 -4558 -4563 0
8247 -4549 -4559 -4563 0
8247 -4549 -4558 -4564 0
c ((1<=(aux1091 + aux1094 + aux1095))=tv=SATLiteral(8248))
-8248 -4549 -4558 -4563 0
8248 4563 0
8248 4558 0
8248 4559 0
8248 4561 0
8248 4549 0
8248 4549 4558 0
8248 4549 4559 0
8248 4549 4561 0
8248 4550 0
8248 4550 4558 0
8248 4550 4559 0
8248 4550 4561 0
c (((aux1097 + aux1100 + aux1101)<=1)=tv=SATLiteral(8249))
-8249 4588 0
-8249 4582 4587 0
-8249 4583 0
-8249 4585 0
-8249 4573 4587 0
-8249 4573 4582 0
-8249 4573 4583 0
-8249 4573 4585 0
-8249 4574 0
-8249 4574 4582 0
-8249 4574 4583 0
-8249 4574 4585 0
8249 -4574 -4582 -4587 0
8249 -4573 -4583 -4587 0
8249 -4573 -4582 -4588 0
c ((1<=(aux1097 + aux1100 + aux1101))=tv=SATLiteral(8250))
-8250 -4573 -4582 -4587 0
8250 4587 0
8250 4582 0
8250 4583 0
8250 4585 0
8250 4573 0
8250 4573 4582 0
8250 4573 4583 0
8250 4573 4585 0
8250 4574 0
8250 4574 4582 0
8250 4574 4583 0
8250 4574 4585 0
c (((aux1103 + aux1106 + aux1107)<=1)=tv=SATLiteral(8251))
-8251 4612 0
-8251 4606 4611 0
-8251 4607 0
-8251 4609 0
-8251 4597 4611 0
-8251 4597 4606 0
-8251 4597 4607 0
-8251 4597 4609 0
-8251 4598 0
-8251 4598 4606 0
-8251 4598 4607 0
-8251 4598 4609 0
8251 -4598 -4606 -4611 0
8251 -4597 -4607 -4611 0
8251 -4597 -4606 -4612 0
c ((1<=(aux1103 + aux1106 + aux1107))=tv=SATLiteral(8252))
-8252 -4597 -4606 -4611 0
8252 4611 0
8252 4606 0
8252 4607 0
8252 4609 0
8252 4597 0
8252 4597 4606 0
8252 4597 4607 0
8252 4597 4609 0
8252 4598 0
8252 4598 4606 0
8252 4598 4607 0
8252 4598 4609 0
c (((aux1109 + aux1112 + aux1113)<=1)=tv=SATLiteral(8253))
-8253 4636 0
-8253 4630 4635 0
-8253 4631 0
-8253 4633 0
-8253 4621 4635 0
-8253 4621 4630 0
-8253 4621 4631 0
-8253 4621 4633 0
-8253 4622 0
-8253 4622 4630 0
-8253 4622 4631 0
-8253 4622 4633 0
8253 -4622 -4630 -4635 0
8253 -4621 -4631 -4635 0
8253 -4621 -4630 -4636 0
c ((1<=(aux1109 + aux1112 + aux1113))=tv=SATLiteral(8254))
-8254 -4621 -4630 -4635 0
8254 4635 0
8254 4630 0
8254 4631 0
8254 4633 0
8254 4621 0
8254 4621 4630 0
8254 4621 4631 0
8254 4621 4633 0
8254 4622 0
8254 4622 4630 0
8254 4622 4631 0
8254 4622 4633 0
c (((aux1115 + aux1118 + aux1119)<=1)=tv=SATLiteral(8255))
-8255 4660 0
-8255 4654 4659 0
-8255 4655 0
-8255 4657 0
-8255 4645 4659 0
-8255 4645 4654 0
-8255 4645 4655 0
-8255 4645 4657 0
-8255 4646 0
-8255 4646 4654 0
-8255 4646 4655 0
-8255 4646 4657 0
8255 -4646 -4654 -4659 0
8255 -4645 -4655 -4659 0
8255 -4645 -4654 -4660 0
c ((1<=(aux1115 + aux1118 + aux1119))=tv=SATLiteral(8256))
-8256 -4645 -4654 -4659 0
8256 4659 0
8256 4654 0
8256 4655 0
8256 4657 0
8256 4645 0
8256 4645 4654 0
8256 4645 4655 0
8256 4645 4657 0
8256 4646 0
8256 4646 4654 0
8256 4646 4655 0
8256 4646 4657 0
c (((aux1121 + aux1124 + aux1125)<=1)=tv=SATLiteral(8257))
-8257 4684 0
-8257 4678 4683 0
-8257 4679 0
-8257 4681 0
-8257 4669 4683 0
-8257 4669 4678 0
-8257 4669 4679 0
-8257 4669 4681 0
-8257 4670 0
-8257 4670 4678 0
-8257 4670 4679 0
-8257 4670 4681 0
8257 -4670 -4678 -4683 0
8257 -4669 -4679 -4683 0
8257 -4669 -4678 -4684 0
c ((1<=(aux1121 + aux1124 + aux1125))=tv=SATLiteral(8258))
-8258 -4669 -4678 -4683 0
8258 4683 0
8258 4678 0
8258 4679 0
8258 4681 0
8258 4669 0
8258 4669 4678 0
8258 4669 4679 0
8258 4669 4681 0
8258 4670 0
8258 4670 4678 0
8258 4670 4679 0
8258 4670 4681 0
c (((aux1127 + aux1130 + aux1131)<=1)=tv=SATLiteral(8259))
-8259 4708 0
-8259 4702 4707 0
-8259 4703 0
-8259 4705 0
-8259 4693 4707 0
-8259 4693 4702 0
-8259 4693 4703 0
-8259 4693 4705 0
-8259 4694 0
-8259 4694 4702 0
-8259 4694 4703 0
-8259 4694 4705 0
8259 -4694 -4702 -4707 0
8259 -4693 -4703 -4707 0
8259 -4693 -4702 -4708 0
c ((1<=(aux1127 + aux1130 + aux1131))=tv=SATLiteral(8260))
-8260 -4693 -4702 -4707 0
8260 4707 0
8260 4702 0
8260 4703 0
8260 4705 0
8260 4693 0
8260 4693 4702 0
8260 4693 4703 0
8260 4693 4705 0
8260 4694 0
8260 4694 4702 0
8260 4694 4703 0
8260 4694 4705 0
c (((aux1133 + aux1136 + aux1137)<=1)=tv=SATLiteral(8261))
-8261 4732 0
-8261 4726 4731 0
-8261 4727 0
-8261 4729 0
-8261 4717 4731 0
-8261 4717 4726 0
-8261 4717 4727 0
-8261 4717 4729 0
-8261 4718 0
-8261 4718 4726 0
-8261 4718 4727 0
-8261 4718 4729 0
8261 -4718 -4726 -4731 0
8261 -4717 -4727 -4731 0
8261 -4717 -4726 -4732 0
c ((1<=(aux1133 + aux1136 + aux1137))=tv=SATLiteral(8262))
-8262 -4717 -4726 -4731 0
8262 4731 0
8262 4726 0
8262 4727 0
8262 4729 0
8262 4717 0
8262 4717 4726 0
8262 4717 4727 0
8262 4717 4729 0
8262 4718 0
8262 4718 4726 0
8262 4718 4727 0
8262 4718 4729 0
c (((aux1139 + aux1142 + aux1143)<=1)=tv=SATLiteral(8263))
-8263 4756 0
-8263 4750 4755 0
-8263 4751 0
-8263 4753 0
-8263 4741 4755 0
-8263 4741 4750 0
-8263 4741 4751 0
-8263 4741 4753 0
-8263 4742 0
-8263 4742 4750 0
-8263 4742 4751 0
-8263 4742 4753 0
8263 -4742 -4750 -4755 0
8263 -4741 -4751 -4755 0
8263 -4741 -4750 -4756 0
c ((1<=(aux1139 + aux1142 + aux1143))=tv=SATLiteral(8264))
-8264 -4741 -4750 -4755 0
8264 4755 0
8264 4750 0
8264 4751 0
8264 4753 0
8264 4741 0
8264 4741 4750 0
8264 4741 4751 0
8264 4741 4753 0
8264 4742 0
8264 4742 4750 0
8264 4742 4751 0
8264 4742 4753 0
c (((aux1145 + aux1148 + aux1149)<=1)=tv=SATLiteral(8265))
-8265 4780 0
-8265 4774 4779 0
-8265 4775 0
-8265 4777 0
-8265 4765 4779 0
-8265 4765 4774 0
-8265 4765 4775 0
-8265 4765 4777 0
-8265 4766 0
-8265 4766 4774 0
-8265 4766 4775 0
-8265 4766 4777 0
8265 -4766 -4774 -4779 0
8265 -4765 -4775 -4779 0
8265 -4765 -4774 -4780 0
c ((1<=(aux1145 + aux1148 + aux1149))=tv=SATLiteral(8266))
-8266 -4765 -4774 -4779 0
8266 4779 0
8266 4774 0
8266 4775 0
8266 4777 0
8266 4765 0
8266 4765 4774 0
8266 4765 4775 0
8266 4765 4777 0
8266 4766 0
8266 4766 4774 0
8266 4766 4775 0
8266 4766 4777 0
c (((aux1151 + aux1154 + aux1155)<=1)=tv=SATLiteral(8267))
-8267 4804 0
-8267 4798 4803 0
-8267 4799 0
-8267 4801 0
-8267 4789 4803 0
-8267 4789 4798 0
-8267 4789 4799 0
-8267 4789 4801 0
-8267 4790 0
-8267 4790 4798 0
-8267 4790 4799 0
-8267 4790 4801 0
8267 -4790 -4798 -4803 0
8267 -4789 -4799 -4803 0
8267 -4789 -4798 -4804 0
c ((1<=(aux1151 + aux1154 + aux1155))=tv=SATLiteral(8268))
-8268 -4789 -4798 -4803 0
8268 4803 0
8268 4798 0
8268 4799 0
8268 4801 0
8268 4789 0
8268 4789 4798 0
8268 4789 4799 0
8268 4789 4801 0
8268 4790 0
8268 4790 4798 0
8268 4790 4799 0
8268 4790 4801 0
c (((aux1157 + aux1160 + aux1161)<=1)=tv=SATLiteral(8269))
-8269 4828 0
-8269 4822 4827 0
-8269 4823 0
-8269 4825 0
-8269 4813 4827 0
-8269 4813 4822 0
-8269 4813 4823 0
-8269 4813 4825 0
-8269 4814 0
-8269 4814 4822 0
-8269 4814 4823 0
-8269 4814 4825 0
8269 -4814 -4822 -4827 0
8269 -4813 -4823 -4827 0
8269 -4813 -4822 -4828 0
c ((1<=(aux1157 + aux1160 + aux1161))=tv=SATLiteral(8270))
-8270 -4813 -4822 -4827 0
8270 4827 0
8270 4822 0
8270 4823 0
8270 4825 0
8270 4813 0
8270 4813 4822 0
8270 4813 4823 0
8270 4813 4825 0
8270 4814 0
8270 4814 4822 0
8270 4814 4823 0
8270 4814 4825 0
c (((aux1163 + aux1166 + aux1167)<=1)=tv=SATLiteral(8271))
-8271 4852 0
-8271 4846 4851 0
-8271 4847 0
-8271 4849 0
-8271 4837 4851 0
-8271 4837 4846 0
-8271 4837 4847 0
-8271 4837 4849 0
-8271 4838 0
-8271 4838 4846 0
-8271 4838 4847 0
-8271 4838 4849 0
8271 -4838 -4846 -4851 0
8271 -4837 -4847 -4851 0
8271 -4837 -4846 -4852 0
c ((1<=(aux1163 + aux1166 + aux1167))=tv=SATLiteral(8272))
-8272 -4837 -4846 -4851 0
8272 4851 0
8272 4846 0
8272 4847 0
8272 4849 0
8272 4837 0
8272 4837 4846 0
8272 4837 4847 0
8272 4837 4849 0
8272 4838 0
8272 4838 4846 0
8272 4838 4847 0
8272 4838 4849 0
c (((aux1169 + aux1172 + aux1173)<=1)=tv=SATLiteral(8273))
-8273 4876 0
-8273 4870 4875 0
-8273 4871 0
-8273 4873 0
-8273 4861 4875 0
-8273 4861 4870 0
-8273 4861 4871 0
-8273 4861 4873 0
-8273 4862 0
-8273 4862 4870 0
-8273 4862 4871 0
-8273 4862 4873 0
8273 -4862 -4870 -4875 0
8273 -4861 -4871 -4875 0
8273 -4861 -4870 -4876 0
c ((1<=(aux1169 + aux1172 + aux1173))=tv=SATLiteral(8274))
-8274 -4861 -4870 -4875 0
8274 4875 0
8274 4870 0
8274 4871 0
8274 4873 0
8274 4861 0
8274 4861 4870 0
8274 4861 4871 0
8274 4861 4873 0
8274 4862 0
8274 4862 4870 0
8274 4862 4871 0
8274 4862 4873 0
c (((aux1175 + aux1178 + aux1179)<=1)=tv=SATLiteral(8275))
-8275 4900 0
-8275 4894 4899 0
-8275 4895 0
-8275 4897 0
-8275 4885 4899 0
-8275 4885 4894 0
-8275 4885 4895 0
-8275 4885 4897 0
-8275 4886 0
-8275 4886 4894 0
-8275 4886 4895 0
-8275 4886 4897 0
8275 -4886 -4894 -4899 0
8275 -4885 -4895 -4899 0
8275 -4885 -4894 -4900 0
c ((1<=(aux1175 + aux1178 + aux1179))=tv=SATLiteral(8276))
-8276 -4885 -4894 -4899 0
8276 4899 0
8276 4894 0
8276 4895 0
8276 4897 0
8276 4885 0
8276 4885 4894 0
8276 4885 4895 0
8276 4885 4897 0
8276 4886 0
8276 4886 4894 0
8276 4886 4895 0
8276 4886 4897 0
c (((aux1181 + aux1184 + aux1185)<=1)=tv=SATLiteral(8277))
-8277 4924 0
-8277 4918 4923 0
-8277 4919 0
-8277 4921 0
-8277 4909 4923 0
-8277 4909 4918 0
-8277 4909 4919 0
-8277 4909 4921 0
-8277 4910 0
-8277 4910 4918 0
-8277 4910 4919 0
-8277 4910 4921 0
8277 -4910 -4918 -4923 0
8277 -4909 -4919 -4923 0
8277 -4909 -4918 -4924 0
c ((1<=(aux1181 + aux1184 + aux1185))=tv=SATLiteral(8278))
-8278 -4909 -4918 -4923 0
8278 4923 0
8278 4918 0
8278 4919 0
8278 4921 0
8278 4909 0
8278 4909 4918 0
8278 4909 4919 0
8278 4909 4921 0
8278 4910 0
8278 4910 4918 0
8278 4910 4919 0
8278 4910 4921 0
c (((aux1187 + aux1190 + aux1191)<=1)=tv=SATLiteral(8279))
-8279 4948 0
-8279 4942 4947 0
-8279 4943 0
-8279 4945 0
-8279 4933 4947 0
-8279 4933 4942 0
-8279 4933 4943 0
-8279 4933 4945 0
-8279 4934 0
-8279 4934 4942 0
-8279 4934 4943 0
-8279 4934 4945 0
8279 -4934 -4942 -4947 0
8279 -4933 -4943 -4947 0
8279 -4933 -4942 -4948 0
c ((1<=(aux1187 + aux1190 + aux1191))=tv=SATLiteral(8280))
-8280 -4933 -4942 -4947 0
8280 4947 0
8280 4942 0
8280 4943 0
8280 4945 0
8280 4933 0
8280 4933 4942 0
8280 4933 4943 0
8280 4933 4945 0
8280 4934 0
8280 4934 4942 0
8280 4934 4943 0
8280 4934 4945 0
c (((aux1193 + aux1196 + aux1197)<=1)=tv=SATLiteral(8281))
-8281 4972 0
-8281 4966 4971 0
-8281 4967 0
-8281 4969 0
-8281 4957 4971 0
-8281 4957 4966 0
-8281 4957 4967 0
-8281 4957 4969 0
-8281 4958 0
-8281 4958 4966 0
-8281 4958 4967 0
-8281 4958 4969 0
8281 -4958 -4966 -4971 0
8281 -4957 -4967 -4971 0
8281 -4957 -4966 -4972 0
c ((1<=(aux1193 + aux1196 + aux1197))=tv=SATLiteral(8282))
-8282 -4957 -4966 -4971 0
8282 4971 0
8282 4966 0
8282 4967 0
8282 4969 0
8282 4957 0
8282 4957 4966 0
8282 4957 4967 0
8282 4957 4969 0
8282 4958 0
8282 4958 4966 0
8282 4958 4967 0
8282 4958 4969 0
c (((aux1199 + aux1202 + aux1203)<=1)=tv=SATLiteral(8283))
-8283 4996 0
-8283 4990 4995 0
-8283 4991 0
-8283 4993 0
-8283 4981 4995 0
-8283 4981 4990 0
-8283 4981 4991 0
-8283 4981 4993 0
-8283 4982 0
-8283 4982 4990 0
-8283 4982 4991 0
-8283 4982 4993 0
8283 -4982 -4990 -4995 0
8283 -4981 -4991 -4995 0
8283 -4981 -4990 -4996 0
c ((1<=(aux1199 + aux1202 + aux1203))=tv=SATLiteral(8284))
-8284 -4981 -4990 -4995 0
8284 4995 0
8284 4990 0
8284 4991 0
8284 4993 0
8284 4981 0
8284 4981 4990 0
8284 4981 4991 0
8284 4981 4993 0
8284 4982 0
8284 4982 4990 0
8284 4982 4991 0
8284 4982 4993 0
c (((aux1205 + aux1208 + aux1209)<=1)=tv=SATLiteral(8285))
-8285 5020 0
-8285 5014 5019 0
-8285 5015 0
-8285 5017 0
-8285 5005 5019 0
-8285 5005 5014 0
-8285 5005 5015 0
-8285 5005 5017 0
-8285 5006 0
-8285 5006 5014 0
-8285 5006 5015 0
-8285 5006 5017 0
8285 -5006 -5014 -5019 0
8285 -5005 -5015 -5019 0
8285 -5005 -5014 -5020 0
c ((1<=(aux1205 + aux1208 + aux1209))=tv=SATLiteral(8286))
-8286 -5005 -5014 -5019 0
8286 5019 0
8286 5014 0
8286 5015 0
8286 5017 0
8286 5005 0
8286 5005 5014 0
8286 5005 5015 0
8286 5005 5017 0
8286 5006 0
8286 5006 5014 0
8286 5006 5015 0
8286 5006 5017 0
c (((aux1211 + aux1214 + aux1215)<=1)=tv=SATLiteral(8287))
-8287 5044 0
-8287 5038 5043 0
-8287 5039 0
-8287 5041 0
-8287 5029 5043 0
-8287 5029 5038 0
-8287 5029 5039 0
-8287 5029 5041 0
-8287 5030 0
-8287 5030 5038 0
-8287 5030 5039 0
-8287 5030 5041 0
8287 -5030 -5038 -5043 0
8287 -5029 -5039 -5043 0
8287 -5029 -5038 -5044 0
c ((1<=(aux1211 + aux1214 + aux1215))=tv=SATLiteral(8288))
-8288 -5029 -5038 -5043 0
8288 5043 0
8288 5038 0
8288 5039 0
8288 5041 0
8288 5029 0
8288 5029 5038 0
8288 5029 5039 0
8288 5029 5041 0
8288 5030 0
8288 5030 5038 0
8288 5030 5039 0
8288 5030 5041 0
c (((aux1217 + aux1220 + aux1221)<=1)=tv=SATLiteral(8289))
-8289 5068 0
-8289 5062 5067 0
-8289 5063 0
-8289 5065 0
-8289 5053 5067 0
-8289 5053 5062 0
-8289 5053 5063 0
-8289 5053 5065 0
-8289 5054 0
-8289 5054 5062 0
-8289 5054 5063 0
-8289 5054 5065 0
8289 -5054 -5062 -5067 0
8289 -5053 -5063 -5067 0
8289 -5053 -5062 -5068 0
c ((1<=(aux1217 + aux1220 + aux1221))=tv=SATLiteral(8290))
-8290 -5053 -5062 -5067 0
8290 5067 0
8290 5062 0
8290 5063 0
8290 5065 0
8290 5053 0
8290 5053 5062 0
8290 5053 5063 0
8290 5053 5065 0
8290 5054 0
8290 5054 5062 0
8290 5054 5063 0
8290 5054 5065 0
c (((aux1223 + aux1226 + aux1227)<=1)=tv=SATLiteral(8291))
-8291 5092 0
-8291 5086 5091 0
-8291 5087 0
-8291 5089 0
-8291 5077 5091 0
-8291 5077 5086 0
-8291 5077 5087 0
-8291 5077 5089 0
-8291 5078 0
-8291 5078 5086 0
-8291 5078 5087 0
-8291 5078 5089 0
8291 -5078 -5086 -5091 0
8291 -5077 -5087 -5091 0
8291 -5077 -5086 -5092 0
c ((1<=(aux1223 + aux1226 + aux1227))=tv=SATLiteral(8292))
-8292 -5077 -5086 -5091 0
8292 5091 0
8292 5086 0
8292 5087 0
8292 5089 0
8292 5077 0
8292 5077 5086 0
8292 5077 5087 0
8292 5077 5089 0
8292 5078 0
8292 5078 5086 0
8292 5078 5087 0
8292 5078 5089 0
c (((aux1229 + aux1232 + aux1233)<=1)=tv=SATLiteral(8293))
-8293 5116 0
-8293 5110 5115 0
-8293 5111 0
-8293 5113 0
-8293 5101 5115 0
-8293 5101 5110 0
-8293 5101 5111 0
-8293 5101 5113 0
-8293 5102 0
-8293 5102 5110 0
-8293 5102 5111 0
-8293 5102 5113 0
8293 -5102 -5110 -5115 0
8293 -5101 -5111 -5115 0
8293 -5101 -5110 -5116 0
c ((1<=(aux1229 + aux1232 + aux1233))=tv=SATLiteral(8294))
-8294 -5101 -5110 -5115 0
8294 5115 0
8294 5110 0
8294 5111 0
8294 5113 0
8294 5101 0
8294 5101 5110 0
8294 5101 5111 0
8294 5101 5113 0
8294 5102 0
8294 5102 5110 0
8294 5102 5111 0
8294 5102 5113 0
c (((aux1235 + aux1238 + aux1239)<=1)=tv=SATLiteral(8295))
-8295 5140 0
-8295 5134 5139 0
-8295 5135 0
-8295 5137 0
-8295 5125 5139 0
-8295 5125 5134 0
-8295 5125 5135 0
-8295 5125 5137 0
-8295 5126 0
-8295 5126 5134 0
-8295 5126 5135 0
-8295 5126 5137 0
8295 -5126 -5134 -5139 0
8295 -5125 -5135 -5139 0
8295 -5125 -5134 -5140 0
c ((1<=(aux1235 + aux1238 + aux1239))=tv=SATLiteral(8296))
-8296 -5125 -5134 -5139 0
8296 5139 0
8296 5134 0
8296 5135 0
8296 5137 0
8296 5125 0
8296 5125 5134 0
8296 5125 5135 0
8296 5125 5137 0
8296 5126 0
8296 5126 5134 0
8296 5126 5135 0
8296 5126 5137 0
c (((aux1241 + aux1244 + aux1245)<=1)=tv=SATLiteral(8297))
-8297 5164 0
-8297 5158 5163 0
-8297 5159 0
-8297 5161 0
-8297 5149 5163 0
-8297 5149 5158 0
-8297 5149 5159 0
-8297 5149 5161 0
-8297 5150 0
-8297 5150 5158 0
-8297 5150 5159 0
-8297 5150 5161 0
8297 -5150 -5158 -5163 0
8297 -5149 -5159 -5163 0
8297 -5149 -5158 -5164 0
c ((1<=(aux1241 + aux1244 + aux1245))=tv=SATLiteral(8298))
-8298 -5149 -5158 -5163 0
8298 5163 0
8298 5158 0
8298 5159 0
8298 5161 0
8298 5149 0
8298 5149 5158 0
8298 5149 5159 0
8298 5149 5161 0
8298 5150 0
8298 5150 5158 0
8298 5150 5159 0
8298 5150 5161 0
c (((aux1247 + aux1250 + aux1251)<=1)=tv=SATLiteral(8299))
-8299 5188 0
-8299 5182 5187 0
-8299 5183 0
-8299 5185 0
-8299 5173 5187 0
-8299 5173 5182 0
-8299 5173 5183 0
-8299 5173 5185 0
-8299 5174 0
-8299 5174 5182 0
-8299 5174 5183 0
-8299 5174 5185 0
8299 -5174 -5182 -5187 0
8299 -5173 -5183 -5187 0
8299 -5173 -5182 -5188 0
c ((1<=(aux1247 + aux1250 + aux1251))=tv=SATLiteral(8300))
-8300 -5173 -5182 -5187 0
8300 5187 0
8300 5182 0
8300 5183 0
8300 5185 0
8300 5173 0
8300 5173 5182 0
8300 5173 5183 0
8300 5173 5185 0
8300 5174 0
8300 5174 5182 0
8300 5174 5183 0
8300 5174 5185 0
c (((aux1253 + aux1256 + aux1257)<=1)=tv=SATLiteral(8301))
-8301 5212 0
-8301 5206 5211 0
-8301 5207 0
-8301 5209 0
-8301 5197 5211 0
-8301 5197 5206 0
-8301 5197 5207 0
-8301 5197 5209 0
-8301 5198 0
-8301 5198 5206 0
-8301 5198 5207 0
-8301 5198 5209 0
8301 -5198 -5206 -5211 0
8301 -5197 -5207 -5211 0
8301 -5197 -5206 -5212 0
c ((1<=(aux1253 + aux1256 + aux1257))=tv=SATLiteral(8302))
-8302 -5197 -5206 -5211 0
8302 5211 0
8302 5206 0
8302 5207 0
8302 5209 0
8302 5197 0
8302 5197 5206 0
8302 5197 5207 0
8302 5197 5209 0
8302 5198 0
8302 5198 5206 0
8302 5198 5207 0
8302 5198 5209 0
c (((aux1259 + aux1262 + aux1263)<=1)=tv=SATLiteral(8303))
-8303 5236 0
-8303 5230 5235 0
-8303 5231 0
-8303 5233 0
-8303 5221 5235 0
-8303 5221 5230 0
-8303 5221 5231 0
-8303 5221 5233 0
-8303 5222 0
-8303 5222 5230 0
-8303 5222 5231 0
-8303 5222 5233 0
8303 -5222 -5230 -5235 0
8303 -5221 -5231 -5235 0
8303 -5221 -5230 -5236 0
c ((1<=(aux1259 + aux1262 + aux1263))=tv=SATLiteral(8304))
-8304 -5221 -5230 -5235 0
8304 5235 0
8304 5230 0
8304 5231 0
8304 5233 0
8304 5221 0
8304 5221 5230 0
8304 5221 5231 0
8304 5221 5233 0
8304 5222 0
8304 5222 5230 0
8304 5222 5231 0
8304 5222 5233 0
c (((aux1265 + aux1268 + aux1269)<=1)=tv=SATLiteral(8305))
-8305 5260 0
-8305 5254 5259 0
-8305 5255 0
-8305 5257 0
-8305 5245 5259 0
-8305 5245 5254 0
-8305 5245 5255 0
-8305 5245 5257 0
-8305 5246 0
-8305 5246 5254 0
-8305 5246 5255 0
-8305 5246 5257 0
8305 -5246 -5254 -5259 0
8305 -5245 -5255 -5259 0
8305 -5245 -5254 -5260 0
c ((1<=(aux1265 + aux1268 + aux1269))=tv=SATLiteral(8306))
-8306 -5245 -5254 -5259 0
8306 5259 0
8306 5254 0
8306 5255 0
8306 5257 0
8306 5245 0
8306 5245 5254 0
8306 5245 5255 0
8306 5245 5257 0
8306 5246 0
8306 5246 5254 0
8306 5246 5255 0
8306 5246 5257 0
c (((aux1271 + aux1274 + aux1275)<=1)=tv=SATLiteral(8307))
-8307 5284 0
-8307 5278 5283 0
-8307 5279 0
-8307 5281 0
-8307 5269 5283 0
-8307 5269 5278 0
-8307 5269 5279 0
-8307 5269 5281 0
-8307 5270 0
-8307 5270 5278 0
-8307 5270 5279 0
-8307 5270 5281 0
8307 -5270 -5278 -5283 0
8307 -5269 -5279 -5283 0
8307 -5269 -5278 -5284 0
c ((1<=(aux1271 + aux1274 + aux1275))=tv=SATLiteral(8308))
-8308 -5269 -5278 -5283 0
8308 5283 0
8308 5278 0
8308 5279 0
8308 5281 0
8308 5269 0
8308 5269 5278 0
8308 5269 5279 0
8308 5269 5281 0
8308 5270 0
8308 5270 5278 0
8308 5270 5279 0
8308 5270 5281 0
c (((aux1277 + aux1280 + aux1281)<=1)=tv=SATLiteral(8309))
-8309 5308 0
-8309 5302 5307 0
-8309 5303 0
-8309 5305 0
-8309 5293 5307 0
-8309 5293 5302 0
-8309 5293 5303 0
-8309 5293 5305 0
-8309 5294 0
-8309 5294 5302 0
-8309 5294 5303 0
-8309 5294 5305 0
8309 -5294 -5302 -5307 0
8309 -5293 -5303 -5307 0
8309 -5293 -5302 -5308 0
c ((1<=(aux1277 + aux1280 + aux1281))=tv=SATLiteral(8310))
-8310 -5293 -5302 -5307 0
8310 5307 0
8310 5302 0
8310 5303 0
8310 5305 0
8310 5293 0
8310 5293 5302 0
8310 5293 5303 0
8310 5293 5305 0
8310 5294 0
8310 5294 5302 0
8310 5294 5303 0
8310 5294 5305 0
c (((aux1283 + aux1286 + aux1287)<=1)=tv=SATLiteral(8311))
-8311 5332 0
-8311 5326 5331 0
-8311 5327 0
-8311 5329 0
-8311 5317 5331 0
-8311 5317 5326 0
-8311 5317 5327 0
-8311 5317 5329 0
-8311 5318 0
-8311 5318 5326 0
-8311 5318 5327 0
-8311 5318 5329 0
8311 -5318 -5326 -5331 0
8311 -5317 -5327 -5331 0
8311 -5317 -5326 -5332 0
c ((1<=(aux1283 + aux1286 + aux1287))=tv=SATLiteral(8312))
-8312 -5317 -5326 -5331 0
8312 5331 0
8312 5326 0
8312 5327 0
8312 5329 0
8312 5317 0
8312 5317 5326 0
8312 5317 5327 0
8312 5317 5329 0
8312 5318 0
8312 5318 5326 0
8312 5318 5327 0
8312 5318 5329 0
c (((aux1289 + aux1292 + aux1293)<=1)=tv=SATLiteral(8313))
-8313 5356 0
-8313 5350 5355 0
-8313 5351 0
-8313 5353 0
-8313 5341 5355 0
-8313 5341 5350 0
-8313 5341 5351 0
-8313 5341 5353 0
-8313 5342 0
-8313 5342 5350 0
-8313 5342 5351 0
-8313 5342 5353 0
8313 -5342 -5350 -5355 0
8313 -5341 -5351 -5355 0
8313 -5341 -5350 -5356 0
c ((1<=(aux1289 + aux1292 + aux1293))=tv=SATLiteral(8314))
-8314 -5341 -5350 -5355 0
8314 5355 0
8314 5350 0
8314 5351 0
8314 5353 0
8314 5341 0
8314 5341 5350 0
8314 5341 5351 0
8314 5341 5353 0
8314 5342 0
8314 5342 5350 0
8314 5342 5351 0
8314 5342 5353 0
c (((aux1295 + aux1298 + aux1299)<=1)=tv=SATLiteral(8315))
-8315 5380 0
-8315 5374 5379 0
-8315 5375 0
-8315 5377 0
-8315 5365 5379 0
-8315 5365 5374 0
-8315 5365 5375 0
-8315 5365 5377 0
-8315 5366 0
-8315 5366 5374 0
-8315 5366 5375 0
-8315 5366 5377 0
8315 -5366 -5374 -5379 0
8315 -5365 -5375 -5379 0
8315 -5365 -5374 -5380 0
c ((1<=(aux1295 + aux1298 + aux1299))=tv=SATLiteral(8316))
-8316 -5365 -5374 -5379 0
8316 5379 0
8316 5374 0
8316 5375 0
8316 5377 0
8316 5365 0
8316 5365 5374 0
8316 5365 5375 0
8316 5365 5377 0
8316 5366 0
8316 5366 5374 0
8316 5366 5375 0
8316 5366 5377 0
c (((aux1301 + aux1304 + aux1305)<=1)=tv=SATLiteral(8317))
-8317 5404 0
-8317 5398 5403 0
-8317 5399 0
-8317 5401 0
-8317 5389 5403 0
-8317 5389 5398 0
-8317 5389 5399 0
-8317 5389 5401 0
-8317 5390 0
-8317 5390 5398 0
-8317 5390 5399 0
-8317 5390 5401 0
8317 -5390 -5398 -5403 0
8317 -5389 -5399 -5403 0
8317 -5389 -5398 -5404 0
c ((1<=(aux1301 + aux1304 + aux1305))=tv=SATLiteral(8318))
-8318 -5389 -5398 -5403 0
8318 5403 0
8318 5398 0
8318 5399 0
8318 5401 0
8318 5389 0
8318 5389 5398 0
8318 5389 5399 0
8318 5389 5401 0
8318 5390 0
8318 5390 5398 0
8318 5390 5399 0
8318 5390 5401 0
c (((aux1307 + aux1310 + aux1311)<=1)=tv=SATLiteral(8319))
-8319 5428 0
-8319 5422 5427 0
-8319 5423 0
-8319 5425 0
-8319 5413 5427 0
-8319 5413 5422 0
-8319 5413 5423 0
-8319 5413 5425 0
-8319 5414 0
-8319 5414 5422 0
-8319 5414 5423 0
-8319 5414 5425 0
8319 -5414 -5422 -5427 0
8319 -5413 -5423 -5427 0
8319 -5413 -5422 -5428 0
c ((1<=(aux1307 + aux1310 + aux1311))=tv=SATLiteral(8320))
-8320 -5413 -5422 -5427 0
8320 5427 0
8320 5422 0
8320 5423 0
8320 5425 0
8320 5413 0
8320 5413 5422 0
8320 5413 5423 0
8320 5413 5425 0
8320 5414 0
8320 5414 5422 0
8320 5414 5423 0
8320 5414 5425 0
c (((aux1313 + aux1316 + aux1317)<=1)=tv=SATLiteral(8321))
-8321 5452 0
-8321 5446 5451 0
-8321 5447 0
-8321 5449 0
-8321 5437 5451 0
-8321 5437 5446 0
-8321 5437 5447 0
-8321 5437 5449 0
-8321 5438 0
-8321 5438 5446 0
-8321 5438 5447 0
-8321 5438 5449 0
8321 -5438 -5446 -5451 0
8321 -5437 -5447 -5451 0
8321 -5437 -5446 -5452 0
c ((1<=(aux1313 + aux1316 + aux1317))=tv=SATLiteral(8322))
-8322 -5437 -5446 -5451 0
8322 5451 0
8322 5446 0
8322 5447 0
8322 5449 0
8322 5437 0
8322 5437 5446 0
8322 5437 5447 0
8322 5437 5449 0
8322 5438 0
8322 5438 5446 0
8322 5438 5447 0
8322 5438 5449 0
c (((aux1319 + aux1322 + aux1323)<=1)=tv=SATLiteral(8323))
-8323 5476 0
-8323 5470 5475 0
-8323 5471 0
-8323 5473 0
-8323 5461 5475 0
-8323 5461 5470 0
-8323 5461 5471 0
-8323 5461 5473 0
-8323 5462 0
-8323 5462 5470 0
-8323 5462 5471 0
-8323 5462 5473 0
8323 -5462 -5470 -5475 0
8323 -5461 -5471 -5475 0
8323 -5461 -5470 -5476 0
c ((1<=(aux1319 + aux1322 + aux1323))=tv=SATLiteral(8324))
-8324 -5461 -5470 -5475 0
8324 5475 0
8324 5470 0
8324 5471 0
8324 5473 0
8324 5461 0
8324 5461 5470 0
8324 5461 5471 0
8324 5461 5473 0
8324 5462 0
8324 5462 5470 0
8324 5462 5471 0
8324 5462 5473 0
c (((aux1325 + aux1328 + aux1329)<=1)=tv=SATLiteral(8325))
-8325 5500 0
-8325 5494 5499 0
-8325 5495 0
-8325 5497 0
-8325 5485 5499 0
-8325 5485 5494 0
-8325 5485 5495 0
-8325 5485 5497 0
-8325 5486 0
-8325 5486 5494 0
-8325 5486 5495 0
-8325 5486 5497 0
8325 -5486 -5494 -5499 0
8325 -5485 -5495 -5499 0
8325 -5485 -5494 -5500 0
c ((1<=(aux1325 + aux1328 + aux1329))=tv=SATLiteral(8326))
-8326 -5485 -5494 -5499 0
8326 5499 0
8326 5494 0
8326 5495 0
8326 5497 0
8326 5485 0
8326 5485 5494 0
8326 5485 5495 0
8326 5485 5497 0
8326 5486 0
8326 5486 5494 0
8326 5486 5495 0
8326 5486 5497 0
c (((aux1331 + aux1334 + aux1335)<=1)=tv=SATLiteral(8327))
-8327 5524 0
-8327 5518 5523 0
-8327 5519 0
-8327 5521 0
-8327 5509 5523 0
-8327 5509 5518 0
-8327 5509 5519 0
-8327 5509 5521 0
-8327 5510 0
-8327 5510 5518 0
-8327 5510 5519 0
-8327 5510 5521 0
8327 -5510 -5518 -5523 0
8327 -5509 -5519 -5523 0
8327 -5509 -5518 -5524 0
c ((1<=(aux1331 + aux1334 + aux1335))=tv=SATLiteral(8328))
-8328 -5509 -5518 -5523 0
8328 5523 0
8328 5518 0
8328 5519 0
8328 5521 0
8328 5509 0
8328 5509 5518 0
8328 5509 5519 0
8328 5509 5521 0
8328 5510 0
8328 5510 5518 0
8328 5510 5519 0
8328 5510 5521 0
c (((aux1337 + aux1340 + aux1341)<=1)=tv=SATLiteral(8329))
-8329 5548 0
-8329 5542 5547 0
-8329 5543 0
-8329 5545 0
-8329 5533 5547 0
-8329 5533 5542 0
-8329 5533 5543 0
-8329 5533 5545 0
-8329 5534 0
-8329 5534 5542 0
-8329 5534 5543 0
-8329 5534 5545 0
8329 -5534 -5542 -5547 0
8329 -5533 -5543 -5547 0
8329 -5533 -5542 -5548 0
c ((1<=(aux1337 + aux1340 + aux1341))=tv=SATLiteral(8330))
-8330 -5533 -5542 -5547 0
8330 5547 0
8330 5542 0
8330 5543 0
8330 5545 0
8330 5533 0
8330 5533 5542 0
8330 5533 5543 0
8330 5533 5545 0
8330 5534 0
8330 5534 5542 0
8330 5534 5543 0
8330 5534 5545 0
c (((aux1343 + aux1346 + aux1347)<=1)=tv=SATLiteral(8331))
-8331 5572 0
-8331 5566 5571 0
-8331 5567 0
-8331 5569 0
-8331 5557 5571 0
-8331 5557 5566 0
-8331 5557 5567 0
-8331 5557 5569 0
-8331 5558 0
-8331 5558 5566 0
-8331 5558 5567 0
-8331 5558 5569 0
8331 -5558 -5566 -5571 0
8331 -5557 -5567 -5571 0
8331 -5557 -5566 -5572 0
c ((1<=(aux1343 + aux1346 + aux1347))=tv=SATLiteral(8332))
-8332 -5557 -5566 -5571 0
8332 5571 0
8332 5566 0
8332 5567 0
8332 5569 0
8332 5557 0
8332 5557 5566 0
8332 5557 5567 0
8332 5557 5569 0
8332 5558 0
8332 5558 5566 0
8332 5558 5567 0
8332 5558 5569 0
c (((aux1349 + aux1352 + aux1353)<=1)=tv=SATLiteral(8333))
-8333 5596 0
-8333 5590 5595 0
-8333 5591 0
-8333 5593 0
-8333 5581 5595 0
-8333 5581 5590 0
-8333 5581 5591 0
-8333 5581 5593 0
-8333 5582 0
-8333 5582 5590 0
-8333 5582 5591 0
-8333 5582 5593 0
8333 -5582 -5590 -5595 0
8333 -5581 -5591 -5595 0
8333 -5581 -5590 -5596 0
c ((1<=(aux1349 + aux1352 + aux1353))=tv=SATLiteral(8334))
-8334 -5581 -5590 -5595 0
8334 5595 0
8334 5590 0
8334 5591 0
8334 5593 0
8334 5581 0
8334 5581 5590 0
8334 5581 5591 0
8334 5581 5593 0
8334 5582 0
8334 5582 5590 0
8334 5582 5591 0
8334 5582 5593 0
c (((aux1355 + aux1358 + aux1359)<=1)=tv=SATLiteral(8335))
-8335 5620 0
-8335 5614 5619 0
-8335 5615 0
-8335 5617 0
-8335 5605 5619 0
-8335 5605 5614 0
-8335 5605 5615 0
-8335 5605 5617 0
-8335 5606 0
-8335 5606 5614 0
-8335 5606 5615 0
-8335 5606 5617 0
8335 -5606 -5614 -5619 0
8335 -5605 -5615 -5619 0
8335 -5605 -5614 -5620 0
c ((1<=(aux1355 + aux1358 + aux1359))=tv=SATLiteral(8336))
-8336 -5605 -5614 -5619 0
8336 5619 0
8336 5614 0
8336 5615 0
8336 5617 0
8336 5605 0
8336 5605 5614 0
8336 5605 5615 0
8336 5605 5617 0
8336 5606 0
8336 5606 5614 0
8336 5606 5615 0
8336 5606 5617 0
c (((aux1361 + aux1364 + aux1365)<=1)=tv=SATLiteral(8337))
-8337 5644 0
-8337 5638 5643 0
-8337 5639 0
-8337 5641 0
-8337 5629 5643 0
-8337 5629 5638 0
-8337 5629 5639 0
-8337 5629 5641 0
-8337 5630 0
-8337 5630 5638 0
-8337 5630 5639 0
-8337 5630 5641 0
8337 -5630 -5638 -5643 0
8337 -5629 -5639 -5643 0
8337 -5629 -5638 -5644 0
c ((1<=(aux1361 + aux1364 + aux1365))=tv=SATLiteral(8338))
-8338 -5629 -5638 -5643 0
8338 5643 0
8338 5638 0
8338 5639 0
8338 5641 0
8338 5629 0
8338 5629 5638 0
8338 5629 5639 0
8338 5629 5641 0
8338 5630 0
8338 5630 5638 0
8338 5630 5639 0
8338 5630 5641 0
c (((aux1367 + aux1370 + aux1371)<=1)=tv=SATLiteral(8339))
-8339 5668 0
-8339 5662 5667 0
-8339 5663 0
-8339 5665 0
-8339 5653 5667 0
-8339 5653 5662 0
-8339 5653 5663 0
-8339 5653 5665 0
-8339 5654 0
-8339 5654 5662 0
-8339 5654 5663 0
-8339 5654 5665 0
8339 -5654 -5662 -5667 0
8339 -5653 -5663 -5667 0
8339 -5653 -5662 -5668 0
c ((1<=(aux1367 + aux1370 + aux1371))=tv=SATLiteral(8340))
-8340 -5653 -5662 -5667 0
8340 5667 0
8340 5662 0
8340 5663 0
8340 5665 0
8340 5653 0
8340 5653 5662 0
8340 5653 5663 0
8340 5653 5665 0
8340 5654 0
8340 5654 5662 0
8340 5654 5663 0
8340 5654 5665 0
c (((aux1373 + aux1376 + aux1377)<=1)=tv=SATLiteral(8341))
-8341 5692 0
-8341 5686 5691 0
-8341 5687 0
-8341 5689 0
-8341 5677 5691 0
-8341 5677 5686 0
-8341 5677 5687 0
-8341 5677 5689 0
-8341 5678 0
-8341 5678 5686 0
-8341 5678 5687 0
-8341 5678 5689 0
8341 -5678 -5686 -5691 0
8341 -5677 -5687 -5691 0
8341 -5677 -5686 -5692 0
c ((1<=(aux1373 + aux1376 + aux1377))=tv=SATLiteral(8342))
-8342 -5677 -5686 -5691 0
8342 5691 0
8342 5686 0
8342 5687 0
8342 5689 0
8342 5677 0
8342 5677 5686 0
8342 5677 5687 0
8342 5677 5689 0
8342 5678 0
8342 5678 5686 0
8342 5678 5687 0
8342 5678 5689 0
c (((aux1379 + aux1382 + aux1383)<=1)=tv=SATLiteral(8343))
-8343 5716 0
-8343 5710 5715 0
-8343 5711 0
-8343 5713 0
-8343 5701 5715 0
-8343 5701 5710 0
-8343 5701 5711 0
-8343 5701 5713 0
-8343 5702 0
-8343 5702 5710 0
-8343 5702 5711 0
-8343 5702 5713 0
8343 -5702 -5710 -5715 0
8343 -5701 -5711 -5715 0
8343 -5701 -5710 -5716 0
c ((1<=(aux1379 + aux1382 + aux1383))=tv=SATLiteral(8344))
-8344 -5701 -5710 -5715 0
8344 5715 0
8344 5710 0
8344 5711 0
8344 5713 0
8344 5701 0
8344 5701 5710 0
8344 5701 5711 0
8344 5701 5713 0
8344 5702 0
8344 5702 5710 0
8344 5702 5711 0
8344 5702 5713 0
c (((aux1385 + aux1388 + aux1389)<=1)=tv=SATLiteral(8345))
-8345 5740 0
-8345 5734 5739 0
-8345 5735 0
-8345 5737 0
-8345 5725 5739 0
-8345 5725 5734 0
-8345 5725 5735 0
-8345 5725 5737 0
-8345 5726 0
-8345 5726 5734 0
-8345 5726 5735 0
-8345 5726 5737 0
8345 -5726 -5734 -5739 0
8345 -5725 -5735 -5739 0
8345 -5725 -5734 -5740 0
c ((1<=(aux1385 + aux1388 + aux1389))=tv=SATLiteral(8346))
-8346 -5725 -5734 -5739 0
8346 5739 0
8346 5734 0
8346 5735 0
8346 5737 0
8346 5725 0
8346 5725 5734 0
8346 5725 5735 0
8346 5725 5737 0
8346 5726 0
8346 5726 5734 0
8346 5726 5735 0
8346 5726 5737 0
c (((aux1391 + aux1394 + aux1395)<=1)=tv=SATLiteral(8347))
-8347 5764 0
-8347 5758 5763 0
-8347 5759 0
-8347 5761 0
-8347 5749 5763 0
-8347 5749 5758 0
-8347 5749 5759 0
-8347 5749 5761 0
-8347 5750 0
-8347 5750 5758 0
-8347 5750 5759 0
-8347 5750 5761 0
8347 -5750 -5758 -5763 0
8347 -5749 -5759 -5763 0
8347 -5749 -5758 -5764 0
c ((1<=(aux1391 + aux1394 + aux1395))=tv=SATLiteral(8348))
-8348 -5749 -5758 -5763 0
8348 5763 0
8348 5758 0
8348 5759 0
8348 5761 0
8348 5749 0
8348 5749 5758 0
8348 5749 5759 0
8348 5749 5761 0
8348 5750 0
8348 5750 5758 0
8348 5750 5759 0
8348 5750 5761 0
c (((aux1397 + aux1400 + aux1401)<=1)=tv=SATLiteral(8349))
-8349 5788 0
-8349 5782 5787 0
-8349 5783 0
-8349 5785 0
-8349 5773 5787 0
-8349 5773 5782 0
-8349 5773 5783 0
-8349 5773 5785 0
-8349 5774 0
-8349 5774 5782 0
-8349 5774 5783 0
-8349 5774 5785 0
8349 -5774 -5782 -5787 0
8349 -5773 -5783 -5787 0
8349 -5773 -5782 -5788 0
c ((1<=(aux1397 + aux1400 + aux1401))=tv=SATLiteral(8350))
-8350 -5773 -5782 -5787 0
8350 5787 0
8350 5782 0
8350 5783 0
8350 5785 0
8350 5773 0
8350 5773 5782 0
8350 5773 5783 0
8350 5773 5785 0
8350 5774 0
8350 5774 5782 0
8350 5774 5783 0
8350 5774 5785 0
c (((aux1403 + aux1406 + aux1407)<=1)=tv=SATLiteral(8351))
-8351 5812 0
-8351 5806 5811 0
-8351 5807 0
-8351 5809 0
-8351 5797 5811 0
-8351 5797 5806 0
-8351 5797 5807 0
-8351 5797 5809 0
-8351 5798 0
-8351 5798 5806 0
-8351 5798 5807 0
-8351 5798 5809 0
8351 -5798 -5806 -5811 0
8351 -5797 -5807 -5811 0
8351 -5797 -5806 -5812 0
c ((1<=(aux1403 + aux1406 + aux1407))=tv=SATLiteral(8352))
-8352 -5797 -5806 -5811 0
8352 5811 0
8352 5806 0
8352 5807 0
8352 5809 0
8352 5797 0
8352 5797 5806 0
8352 5797 5807 0
8352 5797 5809 0
8352 5798 0
8352 5798 5806 0
8352 5798 5807 0
8352 5798 5809 0
c (((aux1409 + aux1412 + aux1413)<=1)=tv=SATLiteral(8353))
-8353 5836 0
-8353 5830 5835 0
-8353 5831 0
-8353 5833 0
-8353 5821 5835 0
-8353 5821 5830 0
-8353 5821 5831 0
-8353 5821 5833 0
-8353 5822 0
-8353 5822 5830 0
-8353 5822 5831 0
-8353 5822 5833 0
8353 -5822 -5830 -5835 0
8353 -5821 -5831 -5835 0
8353 -5821 -5830 -5836 0
c ((1<=(aux1409 + aux1412 + aux1413))=tv=SATLiteral(8354))
-8354 -5821 -5830 -5835 0
8354 5835 0
8354 5830 0
8354 5831 0
8354 5833 0
8354 5821 0
8354 5821 5830 0
8354 5821 5831 0
8354 5821 5833 0
8354 5822 0
8354 5822 5830 0
8354 5822 5831 0
8354 5822 5833 0
c (((aux1415 + aux1418 + aux1419)<=1)=tv=SATLiteral(8355))
-8355 5860 0
-8355 5854 5859 0
-8355 5855 0
-8355 5857 0
-8355 5845 5859 0
-8355 5845 5854 0
-8355 5845 5855 0
-8355 5845 5857 0
-8355 5846 0
-8355 5846 5854 0
-8355 5846 5855 0
-8355 5846 5857 0
8355 -5846 -5854 -5859 0
8355 -5845 -5855 -5859 0
8355 -5845 -5854 -5860 0
c ((1<=(aux1415 + aux1418 + aux1419))=tv=SATLiteral(8356))
-8356 -5845 -5854 -5859 0
8356 5859 0
8356 5854 0
8356 5855 0
8356 5857 0
8356 5845 0
8356 5845 5854 0
8356 5845 5855 0
8356 5845 5857 0
8356 5846 0
8356 5846 5854 0
8356 5846 5855 0
8356 5846 5857 0
c (((aux1421 + aux1424 + aux1425)<=1)=tv=SATLiteral(8357))
-8357 5884 0
-8357 5878 5883 0
-8357 5879 0
-8357 5881 0
-8357 5869 5883 0
-8357 5869 5878 0
-8357 5869 5879 0
-8357 5869 5881 0
-8357 5870 0
-8357 5870 5878 0
-8357 5870 5879 0
-8357 5870 5881 0
8357 -5870 -5878 -5883 0
8357 -5869 -5879 -5883 0
8357 -5869 -5878 -5884 0
c ((1<=(aux1421 + aux1424 + aux1425))=tv=SATLiteral(8358))
-8358 -5869 -5878 -5883 0
8358 5883 0
8358 5878 0
8358 5879 0
8358 5881 0
8358 5869 0
8358 5869 5878 0
8358 5869 5879 0
8358 5869 5881 0
8358 5870 0
8358 5870 5878 0
8358 5870 5879 0
8358 5870 5881 0
c (((aux1427 + aux1430 + aux1431)<=1)=tv=SATLiteral(8359))
-8359 5908 0
-8359 5902 5907 0
-8359 5903 0
-8359 5905 0
-8359 5893 5907 0
-8359 5893 5902 0
-8359 5893 5903 0
-8359 5893 5905 0
-8359 5894 0
-8359 5894 5902 0
-8359 5894 5903 0
-8359 5894 5905 0
8359 -5894 -5902 -5907 0
8359 -5893 -5903 -5907 0
8359 -5893 -5902 -5908 0
c ((1<=(aux1427 + aux1430 + aux1431))=tv=SATLiteral(8360))
-8360 -5893 -5902 -5907 0
8360 5907 0
8360 5902 0
8360 5903 0
8360 5905 0
8360 5893 0
8360 5893 5902 0
8360 5893 5903 0
8360 5893 5905 0
8360 5894 0
8360 5894 5902 0
8360 5894 5903 0
8360 5894 5905 0
c (((aux1433 + aux1436 + aux1437)<=1)=tv=SATLiteral(8361))
-8361 5932 0
-8361 5926 5931 0
-8361 5927 0
-8361 5929 0
-8361 5917 5931 0
-8361 5917 5926 0
-8361 5917 5927 0
-8361 5917 5929 0
-8361 5918 0
-8361 5918 5926 0
-8361 5918 5927 0
-8361 5918 5929 0
8361 -5918 -5926 -5931 0
8361 -5917 -5927 -5931 0
8361 -5917 -5926 -5932 0
c ((1<=(aux1433 + aux1436 + aux1437))=tv=SATLiteral(8362))
-8362 -5917 -5926 -5931 0
8362 5931 0
8362 5926 0
8362 5927 0
8362 5929 0
8362 5917 0
8362 5917 5926 0
8362 5917 5927 0
8362 5917 5929 0
8362 5918 0
8362 5918 5926 0
8362 5918 5927 0
8362 5918 5929 0
c (((aux1439 + aux1442 + aux1443)<=1)=tv=SATLiteral(8363))
-8363 5956 0
-8363 5950 5955 0
-8363 5951 0
-8363 5953 0
-8363 5941 5955 0
-8363 5941 5950 0
-8363 5941 5951 0
-8363 5941 5953 0
-8363 5942 0
-8363 5942 5950 0
-8363 5942 5951 0
-8363 5942 5953 0
8363 -5942 -5950 -5955 0
8363 -5941 -5951 -5955 0
8363 -5941 -5950 -5956 0
c ((1<=(aux1439 + aux1442 + aux1443))=tv=SATLiteral(8364))
-8364 -5941 -5950 -5955 0
8364 5955 0
8364 5950 0
8364 5951 0
8364 5953 0
8364 5941 0
8364 5941 5950 0
8364 5941 5951 0
8364 5941 5953 0
8364 5942 0
8364 5942 5950 0
8364 5942 5951 0
8364 5942 5953 0
c (((aux1445 + aux1448 + aux1449)<=1)=tv=SATLiteral(8365))
-8365 5980 0
-8365 5974 5979 0
-8365 5975 0
-8365 5977 0
-8365 5965 5979 0
-8365 5965 5974 0
-8365 5965 5975 0
-8365 5965 5977 0
-8365 5966 0
-8365 5966 5974 0
-8365 5966 5975 0
-8365 5966 5977 0
8365 -5966 -5974 -5979 0
8365 -5965 -5975 -5979 0
8365 -5965 -5974 -5980 0
c ((1<=(aux1445 + aux1448 + aux1449))=tv=SATLiteral(8366))
-8366 -5965 -5974 -5979 0
8366 5979 0
8366 5974 0
8366 5975 0
8366 5977 0
8366 5965 0
8366 5965 5974 0
8366 5965 5975 0
8366 5965 5977 0
8366 5966 0
8366 5966 5974 0
8366 5966 5975 0
8366 5966 5977 0
c (((aux1451 + aux1454 + aux1455)<=1)=tv=SATLiteral(8367))
-8367 6004 0
-8367 5998 6003 0
-8367 5999 0
-8367 6001 0
-8367 5989 6003 0
-8367 5989 5998 0
-8367 5989 5999 0
-8367 5989 6001 0
-8367 5990 0
-8367 5990 5998 0
-8367 5990 5999 0
-8367 5990 6001 0
8367 -5990 -5998 -6003 0
8367 -5989 -5999 -6003 0
8367 -5989 -5998 -6004 0
c ((1<=(aux1451 + aux1454 + aux1455))=tv=SATLiteral(8368))
-8368 -5989 -5998 -6003 0
8368 6003 0
8368 5998 0
8368 5999 0
8368 6001 0
8368 5989 0
8368 5989 5998 0
8368 5989 5999 0
8368 5989 6001 0
8368 5990 0
8368 5990 5998 0
8368 5990 5999 0
8368 5990 6001 0
c (((aux1457 + aux1460 + aux1461)<=1)=tv=SATLiteral(8369))
-8369 6028 0
-8369 6022 6027 0
-8369 6023 0
-8369 6025 0
-8369 6013 6027 0
-8369 6013 6022 0
-8369 6013 6023 0
-8369 6013 6025 0
-8369 6014 0
-8369 6014 6022 0
-8369 6014 6023 0
-8369 6014 6025 0
8369 -6014 -6022 -6027 0
8369 -6013 -6023 -6027 0
8369 -6013 -6022 -6028 0
c ((1<=(aux1457 + aux1460 + aux1461))=tv=SATLiteral(8370))
-8370 -6013 -6022 -6027 0
8370 6027 0
8370 6022 0
8370 6023 0
8370 6025 0
8370 6013 0
8370 6013 6022 0
8370 6013 6023 0
8370 6013 6025 0
8370 6014 0
8370 6014 6022 0
8370 6014 6023 0
8370 6014 6025 0
c (((aux1463 + aux1466 + aux1467)<=1)=tv=SATLiteral(8371))
-8371 6052 0
-8371 6046 6051 0
-8371 6047 0
-8371 6049 0
-8371 6037 6051 0
-8371 6037 6046 0
-8371 6037 6047 0
-8371 6037 6049 0
-8371 6038 0
-8371 6038 6046 0
-8371 6038 6047 0
-8371 6038 6049 0
8371 -6038 -6046 -6051 0
8371 -6037 -6047 -6051 0
8371 -6037 -6046 -6052 0
c ((1<=(aux1463 + aux1466 + aux1467))=tv=SATLiteral(8372))
-8372 -6037 -6046 -6051 0
8372 6051 0
8372 6046 0
8372 6047 0
8372 6049 0
8372 6037 0
8372 6037 6046 0
8372 6037 6047 0
8372 6037 6049 0
8372 6038 0
8372 6038 6046 0
8372 6038 6047 0
8372 6038 6049 0
c (((aux1469 + aux1472 + aux1473)<=1)=tv=SATLiteral(8373))
-8373 6076 0
-8373 6070 6075 0
-8373 6071 0
-8373 6073 0
-8373 6061 6075 0
-8373 6061 6070 0
-8373 6061 6071 0
-8373 6061 6073 0
-8373 6062 0
-8373 6062 6070 0
-8373 6062 6071 0
-8373 6062 6073 0
8373 -6062 -6070 -6075 0
8373 -6061 -6071 -6075 0
8373 -6061 -6070 -6076 0
c ((1<=(aux1469 + aux1472 + aux1473))=tv=SATLiteral(8374))
-8374 -6061 -6070 -6075 0
8374 6075 0
8374 6070 0
8374 6071 0
8374 6073 0
8374 6061 0
8374 6061 6070 0
8374 6061 6071 0
8374 6061 6073 0
8374 6062 0
8374 6062 6070 0
8374 6062 6071 0
8374 6062 6073 0
c (((aux1475 + aux1478 + aux1479)<=1)=tv=SATLiteral(8375))
-8375 6100 0
-8375 6094 6099 0
-8375 6095 0
-8375 6097 0
-8375 6085 6099 0
-8375 6085 6094 0
-8375 6085 6095 0
-8375 6085 6097 0
-8375 6086 0
-8375 6086 6094 0
-8375 6086 6095 0
-8375 6086 6097 0
8375 -6086 -6094 -6099 0
8375 -6085 -6095 -6099 0
8375 -6085 -6094 -6100 0
c ((1<=(aux1475 + aux1478 + aux1479))=tv=SATLiteral(8376))
-8376 -6085 -6094 -6099 0
8376 6099 0
8376 6094 0
8376 6095 0
8376 6097 0
8376 6085 0
8376 6085 6094 0
8376 6085 6095 0
8376 6085 6097 0
8376 6086 0
8376 6086 6094 0
8376 6086 6095 0
8376 6086 6097 0
c (((aux1481 + aux1484 + aux1485)<=1)=tv=SATLiteral(8377))
-8377 6124 0
-8377 6118 6123 0
-8377 6119 0
-8377 6121 0
-8377 6109 6123 0
-8377 6109 6118 0
-8377 6109 6119 0
-8377 6109 6121 0
-8377 6110 0
-8377 6110 6118 0
-8377 6110 6119 0
-8377 6110 6121 0
8377 -6110 -6118 -6123 0
8377 -6109 -6119 -6123 0
8377 -6109 -6118 -6124 0
c ((1<=(aux1481 + aux1484 + aux1485))=tv=SATLiteral(8378))
-8378 -6109 -6118 -6123 0
8378 6123 0
8378 6118 0
8378 6119 0
8378 6121 0
8378 6109 0
8378 6109 6118 0
8378 6109 6119 0
8378 6109 6121 0
8378 6110 0
8378 6110 6118 0
8378 6110 6119 0
8378 6110 6121 0
c (((aux1487 + aux1490 + aux1491)<=1)=tv=SATLiteral(8379))
-8379 6148 0
-8379 6142 6147 0
-8379 6143 0
-8379 6145 0
-8379 6133 6147 0
-8379 6133 6142 0
-8379 6133 6143 0
-8379 6133 6145 0
-8379 6134 0
-8379 6134 6142 0
-8379 6134 6143 0
-8379 6134 6145 0
8379 -6134 -6142 -6147 0
8379 -6133 -6143 -6147 0
8379 -6133 -6142 -6148 0
c ((1<=(aux1487 + aux1490 + aux1491))=tv=SATLiteral(8380))
-8380 -6133 -6142 -6147 0
8380 6147 0
8380 6142 0
8380 6143 0
8380 6145 0
8380 6133 0
8380 6133 6142 0
8380 6133 6143 0
8380 6133 6145 0
8380 6134 0
8380 6134 6142 0
8380 6134 6143 0
8380 6134 6145 0
c (((aux1493 + aux1496 + aux1497)<=1)=tv=SATLiteral(8381))
-8381 6172 0
-8381 6166 6171 0
-8381 6167 0
-8381 6169 0
-8381 6157 6171 0
-8381 6157 6166 0
-8381 6157 6167 0
-8381 6157 6169 0
-8381 6158 0
-8381 6158 6166 0
-8381 6158 6167 0
-8381 6158 6169 0
8381 -6158 -6166 -6171 0
8381 -6157 -6167 -6171 0
8381 -6157 -6166 -6172 0
c ((1<=(aux1493 + aux1496 + aux1497))=tv=SATLiteral(8382))
-8382 -6157 -6166 -6171 0
8382 6171 0
8382 6166 0
8382 6167 0
8382 6169 0
8382 6157 0
8382 6157 6166 0
8382 6157 6167 0
8382 6157 6169 0
8382 6158 0
8382 6158 6166 0
8382 6158 6167 0
8382 6158 6169 0
c (((aux1499 + aux1502 + aux1503)<=1)=tv=SATLiteral(8383))
-8383 6196 0
-8383 6190 6195 0
-8383 6191 0
-8383 6193 0
-8383 6181 6195 0
-8383 6181 6190 0
-8383 6181 6191 0
-8383 6181 6193 0
-8383 6182 0
-8383 6182 6190 0
-8383 6182 6191 0
-8383 6182 6193 0
8383 -6182 -6190 -6195 0
8383 -6181 -6191 -6195 0
8383 -6181 -6190 -6196 0
c ((1<=(aux1499 + aux1502 + aux1503))=tv=SATLiteral(8384))
-8384 -6181 -6190 -6195 0
8384 6195 0
8384 6190 0
8384 6191 0
8384 6193 0
8384 6181 0
8384 6181 6190 0
8384 6181 6191 0
8384 6181 6193 0
8384 6182 0
8384 6182 6190 0
8384 6182 6191 0
8384 6182 6193 0
c (((aux1505 + aux1508 + aux1509)<=1)=tv=SATLiteral(8385))
-8385 6220 0
-8385 6214 6219 0
-8385 6215 0
-8385 6217 0
-8385 6205 6219 0
-8385 6205 6214 0
-8385 6205 6215 0
-8385 6205 6217 0
-8385 6206 0
-8385 6206 6214 0
-8385 6206 6215 0
-8385 6206 6217 0
8385 -6206 -6214 -6219 0
8385 -6205 -6215 -6219 0
8385 -6205 -6214 -6220 0
c ((1<=(aux1505 + aux1508 + aux1509))=tv=SATLiteral(8386))
-8386 -6205 -6214 -6219 0
8386 6219 0
8386 6214 0
8386 6215 0
8386 6217 0
8386 6205 0
8386 6205 6214 0
8386 6205 6215 0
8386 6205 6217 0
8386 6206 0
8386 6206 6214 0
8386 6206 6215 0
8386 6206 6217 0
c (((aux1511 + aux1514 + aux1515)<=1)=tv=SATLiteral(8387))
-8387 6244 0
-8387 6238 6243 0
-8387 6239 0
-8387 6241 0
-8387 6229 6243 0
-8387 6229 6238 0
-8387 6229 6239 0
-8387 6229 6241 0
-8387 6230 0
-8387 6230 6238 0
-8387 6230 6239 0
-8387 6230 6241 0
8387 -6230 -6238 -6243 0
8387 -6229 -6239 -6243 0
8387 -6229 -6238 -6244 0
c ((1<=(aux1511 + aux1514 + aux1515))=tv=SATLiteral(8388))
-8388 -6229 -6238 -6243 0
8388 6243 0
8388 6238 0
8388 6239 0
8388 6241 0
8388 6229 0
8388 6229 6238 0
8388 6229 6239 0
8388 6229 6241 0
8388 6230 0
8388 6230 6238 0
8388 6230 6239 0
8388 6230 6241 0
c (((aux1517 + aux1520 + aux1521)<=1)=tv=SATLiteral(8389))
-8389 6268 0
-8389 6262 6267 0
-8389 6263 0
-8389 6265 0
-8389 6253 6267 0
-8389 6253 6262 0
-8389 6253 6263 0
-8389 6253 6265 0
-8389 6254 0
-8389 6254 6262 0
-8389 6254 6263 0
-8389 6254 6265 0
8389 -6254 -6262 -6267 0
8389 -6253 -6263 -6267 0
8389 -6253 -6262 -6268 0
c ((1<=(aux1517 + aux1520 + aux1521))=tv=SATLiteral(8390))
-8390 -6253 -6262 -6267 0
8390 6267 0
8390 6262 0
8390 6263 0
8390 6265 0
8390 6253 0
8390 6253 6262 0
8390 6253 6263 0
8390 6253 6265 0
8390 6254 0
8390 6254 6262 0
8390 6254 6263 0
8390 6254 6265 0
c (((aux1523 + aux1526 + aux1527)<=1)=tv=SATLiteral(8391))
-8391 6292 0
-8391 6286 6291 0
-8391 6287 0
-8391 6289 0
-8391 6277 6291 0
-8391 6277 6286 0
-8391 6277 6287 0
-8391 6277 6289 0
-8391 6278 0
-8391 6278 6286 0
-8391 6278 6287 0
-8391 6278 6289 0
8391 -6278 -6286 -6291 0
8391 -6277 -6287 -6291 0
8391 -6277 -6286 -6292 0
c ((1<=(aux1523 + aux1526 + aux1527))=tv=SATLiteral(8392))
-8392 -6277 -6286 -6291 0
8392 6291 0
8392 6286 0
8392 6287 0
8392 6289 0
8392 6277 0
8392 6277 6286 0
8392 6277 6287 0
8392 6277 6289 0
8392 6278 0
8392 6278 6286 0
8392 6278 6287 0
8392 6278 6289 0
c (((aux1529 + aux1532 + aux1533)<=1)=tv=SATLiteral(8393))
-8393 6316 0
-8393 6310 6315 0
-8393 6311 0
-8393 6313 0
-8393 6301 6315 0
-8393 6301 6310 0
-8393 6301 6311 0
-8393 6301 6313 0
-8393 6302 0
-8393 6302 6310 0
-8393 6302 6311 0
-8393 6302 6313 0
8393 -6302 -6310 -6315 0
8393 -6301 -6311 -6315 0
8393 -6301 -6310 -6316 0
c ((1<=(aux1529 + aux1532 + aux1533))=tv=SATLiteral(8394))
-8394 -6301 -6310 -6315 0
8394 6315 0
8394 6310 0
8394 6311 0
8394 6313 0
8394 6301 0
8394 6301 6310 0
8394 6301 6311 0
8394 6301 6313 0
8394 6302 0
8394 6302 6310 0
8394 6302 6311 0
8394 6302 6313 0
c (((aux1535 + aux1538 + aux1539)<=1)=tv=SATLiteral(8395))
-8395 6340 0
-8395 6334 6339 0
-8395 6335 0
-8395 6337 0
-8395 6325 6339 0
-8395 6325 6334 0
-8395 6325 6335 0
-8395 6325 6337 0
-8395 6326 0
-8395 6326 6334 0
-8395 6326 6335 0
-8395 6326 6337 0
8395 -6326 -6334 -6339 0
8395 -6325 -6335 -6339 0
8395 -6325 -6334 -6340 0
c ((1<=(aux1535 + aux1538 + aux1539))=tv=SATLiteral(8396))
-8396 -6325 -6334 -6339 0
8396 6339 0
8396 6334 0
8396 6335 0
8396 6337 0
8396 6325 0
8396 6325 6334 0
8396 6325 6335 0
8396 6325 6337 0
8396 6326 0
8396 6326 6334 0
8396 6326 6335 0
8396 6326 6337 0
c (((aux1541 + aux1544 + aux1545)<=1)=tv=SATLiteral(8397))
-8397 6364 0
-8397 6358 6363 0
-8397 6359 0
-8397 6361 0
-8397 6349 6363 0
-8397 6349 6358 0
-8397 6349 6359 0
-8397 6349 6361 0
-8397 6350 0
-8397 6350 6358 0
-8397 6350 6359 0
-8397 6350 6361 0
8397 -6350 -6358 -6363 0
8397 -6349 -6359 -6363 0
8397 -6349 -6358 -6364 0
c ((1<=(aux1541 + aux1544 + aux1545))=tv=SATLiteral(8398))
-8398 -6349 -6358 -6363 0
8398 6363 0
8398 6358 0
8398 6359 0
8398 6361 0
8398 6349 0
8398 6349 6358 0
8398 6349 6359 0
8398 6349 6361 0
8398 6350 0
8398 6350 6358 0
8398 6350 6359 0
8398 6350 6361 0
c (((aux1547 + aux1550 + aux1551)<=1)=tv=SATLiteral(8399))
-8399 6388 0
-8399 6382 6387 0
-8399 6383 0
-8399 6385 0
-8399 6373 6387 0
-8399 6373 6382 0
-8399 6373 6383 0
-8399 6373 6385 0
-8399 6374 0
-8399 6374 6382 0
-8399 6374 6383 0
-8399 6374 6385 0
8399 -6374 -6382 -6387 0
8399 -6373 -6383 -6387 0
8399 -6373 -6382 -6388 0
c ((1<=(aux1547 + aux1550 + aux1551))=tv=SATLiteral(8400))
-8400 -6373 -6382 -6387 0
8400 6387 0
8400 6382 0
8400 6383 0
8400 6385 0
8400 6373 0
8400 6373 6382 0
8400 6373 6383 0
8400 6373 6385 0
8400 6374 0
8400 6374 6382 0
8400 6374 6383 0
8400 6374 6385 0
c (((aux1553 + aux1556 + aux1557)<=1)=tv=SATLiteral(8401))
-8401 6412 0
-8401 6406 6411 0
-8401 6407 0
-8401 6409 0
-8401 6397 6411 0
-8401 6397 6406 0
-8401 6397 6407 0
-8401 6397 6409 0
-8401 6398 0
-8401 6398 6406 0
-8401 6398 6407 0
-8401 6398 6409 0
8401 -6398 -6406 -6411 0
8401 -6397 -6407 -6411 0
8401 -6397 -6406 -6412 0
c ((1<=(aux1553 + aux1556 + aux1557))=tv=SATLiteral(8402))
-8402 -6397 -6406 -6411 0
8402 6411 0
8402 6406 0
8402 6407 0
8402 6409 0
8402 6397 0
8402 6397 6406 0
8402 6397 6407 0
8402 6397 6409 0
8402 6398 0
8402 6398 6406 0
8402 6398 6407 0
8402 6398 6409 0
c (((aux1559 + aux1562 + aux1563)<=1)=tv=SATLiteral(8403))
-8403 6436 0
-8403 6430 6435 0
-8403 6431 0
-8403 6433 0
-8403 6421 6435 0
-8403 6421 6430 0
-8403 6421 6431 0
-8403 6421 6433 0
-8403 6422 0
-8403 6422 6430 0
-8403 6422 6431 0
-8403 6422 6433 0
8403 -6422 -6430 -6435 0
8403 -6421 -6431 -6435 0
8403 -6421 -6430 -6436 0
c ((1<=(aux1559 + aux1562 + aux1563))=tv=SATLiteral(8404))
-8404 -6421 -6430 -6435 0
8404 6435 0
8404 6430 0
8404 6431 0
8404 6433 0
8404 6421 0
8404 6421 6430 0
8404 6421 6431 0
8404 6421 6433 0
8404 6422 0
8404 6422 6430 0
8404 6422 6431 0
8404 6422 6433 0
c (((aux1565 + aux1568 + aux1569)<=1)=tv=SATLiteral(8405))
-8405 6460 0
-8405 6454 6459 0
-8405 6455 0
-8405 6457 0
-8405 6445 6459 0
-8405 6445 6454 0
-8405 6445 6455 0
-8405 6445 6457 0
-8405 6446 0
-8405 6446 6454 0
-8405 6446 6455 0
-8405 6446 6457 0
8405 -6446 -6454 -6459 0
8405 -6445 -6455 -6459 0
8405 -6445 -6454 -6460 0
c ((1<=(aux1565 + aux1568 + aux1569))=tv=SATLiteral(8406))
-8406 -6445 -6454 -6459 0
8406 6459 0
8406 6454 0
8406 6455 0
8406 6457 0
8406 6445 0
8406 6445 6454 0
8406 6445 6455 0
8406 6445 6457 0
8406 6446 0
8406 6446 6454 0
8406 6446 6455 0
8406 6446 6457 0
c (((aux1571 + aux1574 + aux1575)<=1)=tv=SATLiteral(8407))
-8407 6484 0
-8407 6478 6483 0
-8407 6479 0
-8407 6481 0
-8407 6469 6483 0
-8407 6469 6478 0
-8407 6469 6479 0
-8407 6469 6481 0
-8407 6470 0
-8407 6470 6478 0
-8407 6470 6479 0
-8407 6470 6481 0
8407 -6470 -6478 -6483 0
8407 -6469 -6479 -6483 0
8407 -6469 -6478 -6484 0
c ((1<=(aux1571 + aux1574 + aux1575))=tv=SATLiteral(8408))
-8408 -6469 -6478 -6483 0
8408 6483 0
8408 6478 0
8408 6479 0
8408 6481 0
8408 6469 0
8408 6469 6478 0
8408 6469 6479 0
8408 6469 6481 0
8408 6470 0
8408 6470 6478 0
8408 6470 6479 0
8408 6470 6481 0
c (((aux1577 + aux1580 + aux1581)<=1)=tv=SATLiteral(8409))
-8409 6508 0
-8409 6502 6507 0
-8409 6503 0
-8409 6505 0
-8409 6493 6507 0
-8409 6493 6502 0
-8409 6493 6503 0
-8409 6493 6505 0
-8409 6494 0
-8409 6494 6502 0
-8409 6494 6503 0
-8409 6494 6505 0
8409 -6494 -6502 -6507 0
8409 -6493 -6503 -6507 0
8409 -6493 -6502 -6508 0
c ((1<=(aux1577 + aux1580 + aux1581))=tv=SATLiteral(8410))
-8410 -6493 -6502 -6507 0
8410 6507 0
8410 6502 0
8410 6503 0
8410 6505 0
8410 6493 0
8410 6493 6502 0
8410 6493 6503 0
8410 6493 6505 0
8410 6494 0
8410 6494 6502 0
8410 6494 6503 0
8410 6494 6505 0
c (((aux1583 + aux1586 + aux1587)<=1)=tv=SATLiteral(8411))
-8411 6532 0
-8411 6526 6531 0
-8411 6527 0
-8411 6529 0
-8411 6517 6531 0
-8411 6517 6526 0
-8411 6517 6527 0
-8411 6517 6529 0
-8411 6518 0
-8411 6518 6526 0
-8411 6518 6527 0
-8411 6518 6529 0
8411 -6518 -6526 -6531 0
8411 -6517 -6527 -6531 0
8411 -6517 -6526 -6532 0
c ((1<=(aux1583 + aux1586 + aux1587))=tv=SATLiteral(8412))
-8412 -6517 -6526 -6531 0
8412 6531 0
8412 6526 0
8412 6527 0
8412 6529 0
8412 6517 0
8412 6517 6526 0
8412 6517 6527 0
8412 6517 6529 0
8412 6518 0
8412 6518 6526 0
8412 6518 6527 0
8412 6518 6529 0
c (((aux1589 + aux1592 + aux1593)<=1)=tv=SATLiteral(8413))
-8413 6556 0
-8413 6550 6555 0
-8413 6551 0
-8413 6553 0
-8413 6541 6555 0
-8413 6541 6550 0
-8413 6541 6551 0
-8413 6541 6553 0
-8413 6542 0
-8413 6542 6550 0
-8413 6542 6551 0
-8413 6542 6553 0
8413 -6542 -6550 -6555 0
8413 -6541 -6551 -6555 0
8413 -6541 -6550 -6556 0
c ((1<=(aux1589 + aux1592 + aux1593))=tv=SATLiteral(8414))
-8414 -6541 -6550 -6555 0
8414 6555 0
8414 6550 0
8414 6551 0
8414 6553 0
8414 6541 0
8414 6541 6550 0
8414 6541 6551 0
8414 6541 6553 0
8414 6542 0
8414 6542 6550 0
8414 6542 6551 0
8414 6542 6553 0
c (((aux1595 + aux1598 + aux1599)<=1)=tv=SATLiteral(8415))
-8415 6580 0
-8415 6574 6579 0
-8415 6575 0
-8415 6577 0
-8415 6565 6579 0
-8415 6565 6574 0
-8415 6565 6575 0
-8415 6565 6577 0
-8415 6566 0
-8415 6566 6574 0
-8415 6566 6575 0
-8415 6566 6577 0
8415 -6566 -6574 -6579 0
8415 -6565 -6575 -6579 0
8415 -6565 -6574 -6580 0
c ((1<=(aux1595 + aux1598 + aux1599))=tv=SATLiteral(8416))
-8416 -6565 -6574 -6579 0
8416 6579 0
8416 6574 0
8416 6575 0
8416 6577 0
8416 6565 0
8416 6565 6574 0
8416 6565 6575 0
8416 6565 6577 0
8416 6566 0
8416 6566 6574 0
8416 6566 6575 0
8416 6566 6577 0
c (((aux1601 + aux1604 + aux1605)<=1)=tv=SATLiteral(8417))
-8417 6604 0
-8417 6598 6603 0
-8417 6599 0
-8417 6601 0
-8417 6589 6603 0
-8417 6589 6598 0
-8417 6589 6599 0
-8417 6589 6601 0
-8417 6590 0
-8417 6590 6598 0
-8417 6590 6599 0
-8417 6590 6601 0
8417 -6590 -6598 -6603 0
8417 -6589 -6599 -6603 0
8417 -6589 -6598 -6604 0
c ((1<=(aux1601 + aux1604 + aux1605))=tv=SATLiteral(8418))
-8418 -6589 -6598 -6603 0
8418 6603 0
8418 6598 0
8418 6599 0
8418 6601 0
8418 6589 0
8418 6589 6598 0
8418 6589 6599 0
8418 6589 6601 0
8418 6590 0
8418 6590 6598 0
8418 6590 6599 0
8418 6590 6601 0
c (((aux1607 + aux1610 + aux1611)<=1)=tv=SATLiteral(8419))
-8419 6628 0
-8419 6622 6627 0
-8419 6623 0
-8419 6625 0
-8419 6613 6627 0
-8419 6613 6622 0
-8419 6613 6623 0
-8419 6613 6625 0
-8419 6614 0
-8419 6614 6622 0
-8419 6614 6623 0
-8419 6614 6625 0
8419 -6614 -6622 -6627 0
8419 -6613 -6623 -6627 0
8419 -6613 -6622 -6628 0
c ((1<=(aux1607 + aux1610 + aux1611))=tv=SATLiteral(8420))
-8420 -6613 -6622 -6627 0
8420 6627 0
8420 6622 0
8420 6623 0
8420 6625 0
8420 6613 0
8420 6613 6622 0
8420 6613 6623 0
8420 6613 6625 0
8420 6614 0
8420 6614 6622 0
8420 6614 6623 0
8420 6614 6625 0
c (((aux1613 + aux1616 + aux1617)<=1)=tv=SATLiteral(8421))
-8421 6652 0
-8421 6646 6651 0
-8421 6647 0
-8421 6649 0
-8421 6637 6651 0
-8421 6637 6646 0
-8421 6637 6647 0
-8421 6637 6649 0
-8421 6638 0
-8421 6638 6646 0
-8421 6638 6647 0
-8421 6638 6649 0
8421 -6638 -6646 -6651 0
8421 -6637 -6647 -6651 0
8421 -6637 -6646 -6652 0
c ((1<=(aux1613 + aux1616 + aux1617))=tv=SATLiteral(8422))
-8422 -6637 -6646 -6651 0
8422 6651 0
8422 6646 0
8422 6647 0
8422 6649 0
8422 6637 0
8422 6637 6646 0
8422 6637 6647 0
8422 6637 6649 0
8422 6638 0
8422 6638 6646 0
8422 6638 6647 0
8422 6638 6649 0
c (((aux1619 + aux1622 + aux1623)<=1)=tv=SATLiteral(8423))
-8423 6676 0
-8423 6670 6675 0
-8423 6671 0
-8423 6673 0
-8423 6661 6675 0
-8423 6661 6670 0
-8423 6661 6671 0
-8423 6661 6673 0
-8423 6662 0
-8423 6662 6670 0
-8423 6662 6671 0
-8423 6662 6673 0
8423 -6662 -6670 -6675 0
8423 -6661 -6671 -6675 0
8423 -6661 -6670 -6676 0
c ((1<=(aux1619 + aux1622 + aux1623))=tv=SATLiteral(8424))
-8424 -6661 -6670 -6675 0
8424 6675 0
8424 6670 0
8424 6671 0
8424 6673 0
8424 6661 0
8424 6661 6670 0
8424 6661 6671 0
8424 6661 6673 0
8424 6662 0
8424 6662 6670 0
8424 6662 6671 0
8424 6662 6673 0
c (((aux1625 + aux1628 + aux1629)<=1)=tv=SATLiteral(8425))
-8425 6700 0
-8425 6694 6699 0
-8425 6695 0
-8425 6697 0
-8425 6685 6699 0
-8425 6685 6694 0
-8425 6685 6695 0
-8425 6685 6697 0
-8425 6686 0
-8425 6686 6694 0
-8425 6686 6695 0
-8425 6686 6697 0
8425 -6686 -6694 -6699 0
8425 -6685 -6695 -6699 0
8425 -6685 -6694 -6700 0
c ((1<=(aux1625 + aux1628 + aux1629))=tv=SATLiteral(8426))
-8426 -6685 -6694 -6699 0
8426 6699 0
8426 6694 0
8426 6695 0
8426 6697 0
8426 6685 0
8426 6685 6694 0
8426 6685 6695 0
8426 6685 6697 0
8426 6686 0
8426 6686 6694 0
8426 6686 6695 0
8426 6686 6697 0
c (((aux1631 + aux1634 + aux1635)<=1)=tv=SATLiteral(8427))
-8427 6724 0
-8427 6718 6723 0
-8427 6719 0
-8427 6721 0
-8427 6709 6723 0
-8427 6709 6718 0
-8427 6709 6719 0
-8427 6709 6721 0
-8427 6710 0
-8427 6710 6718 0
-8427 6710 6719 0
-8427 6710 6721 0
8427 -6710 -6718 -6723 0
8427 -6709 -6719 -6723 0
8427 -6709 -6718 -6724 0
c ((1<=(aux1631 + aux1634 + aux1635))=tv=SATLiteral(8428))
-8428 -6709 -6718 -6723 0
8428 6723 0
8428 6718 0
8428 6719 0
8428 6721 0
8428 6709 0
8428 6709 6718 0
8428 6709 6719 0
8428 6709 6721 0
8428 6710 0
8428 6710 6718 0
8428 6710 6719 0
8428 6710 6721 0
c (((aux1637 + aux1640 + aux1641)<=1)=tv=SATLiteral(8429))
-8429 6748 0
-8429 6742 6747 0
-8429 6743 0
-8429 6745 0
-8429 6733 6747 0
-8429 6733 6742 0
-8429 6733 6743 0
-8429 6733 6745 0
-8429 6734 0
-8429 6734 6742 0
-8429 6734 6743 0
-8429 6734 6745 0
8429 -6734 -6742 -6747 0
8429 -6733 -6743 -6747 0
8429 -6733 -6742 -6748 0
c ((1<=(aux1637 + aux1640 + aux1641))=tv=SATLiteral(8430))
-8430 -6733 -6742 -6747 0
8430 6747 0
8430 6742 0
8430 6743 0
8430 6745 0
8430 6733 0
8430 6733 6742 0
8430 6733 6743 0
8430 6733 6745 0
8430 6734 0
8430 6734 6742 0
8430 6734 6743 0
8430 6734 6745 0
c (((aux1643 + aux1646 + aux1647)<=1)=tv=SATLiteral(8431))
-8431 6772 0
-8431 6766 6771 0
-8431 6767 0
-8431 6769 0
-8431 6757 6771 0
-8431 6757 6766 0
-8431 6757 6767 0
-8431 6757 6769 0
-8431 6758 0
-8431 6758 6766 0
-8431 6758 6767 0
-8431 6758 6769 0
8431 -6758 -6766 -6771 0
8431 -6757 -6767 -6771 0
8431 -6757 -6766 -6772 0
c ((1<=(aux1643 + aux1646 + aux1647))=tv=SATLiteral(8432))
-8432 -6757 -6766 -6771 0
8432 6771 0
8432 6766 0
8432 6767 0
8432 6769 0
8432 6757 0
8432 6757 6766 0
8432 6757 6767 0
8432 6757 6769 0
8432 6758 0
8432 6758 6766 0
8432 6758 6767 0
8432 6758 6769 0
c (((aux1649 + aux1652 + aux1653)<=1)=tv=SATLiteral(8433))
-8433 6796 0
-8433 6790 6795 0
-8433 6791 0
-8433 6793 0
-8433 6781 6795 0
-8433 6781 6790 0
-8433 6781 6791 0
-8433 6781 6793 0
-8433 6782 0
-8433 6782 6790 0
-8433 6782 6791 0
-8433 6782 6793 0
8433 -6782 -6790 -6795 0
8433 -6781 -6791 -6795 0
8433 -6781 -6790 -6796 0
c ((1<=(aux1649 + aux1652 + aux1653))=tv=SATLiteral(8434))
-8434 -6781 -6790 -6795 0
8434 6795 0
8434 6790 0
8434 6791 0
8434 6793 0
8434 6781 0
8434 6781 6790 0
8434 6781 6791 0
8434 6781 6793 0
8434 6782 0
8434 6782 6790 0
8434 6782 6791 0
8434 6782 6793 0
c (((aux1655 + aux1658 + aux1659)<=1)=tv=SATLiteral(8435))
-8435 6820 0
-8435 6814 6819 0
-8435 6815 0
-8435 6817 0
-8435 6805 6819 0
-8435 6805 6814 0
-8435 6805 6815 0
-8435 6805 6817 0
-8435 6806 0
-8435 6806 6814 0
-8435 6806 6815 0
-8435 6806 6817 0
8435 -6806 -6814 -6819 0
8435 -6805 -6815 -6819 0
8435 -6805 -6814 -6820 0
c ((1<=(aux1655 + aux1658 + aux1659))=tv=SATLiteral(8436))
-8436 -6805 -6814 -6819 0
8436 6819 0
8436 6814 0
8436 6815 0
8436 6817 0
8436 6805 0
8436 6805 6814 0
8436 6805 6815 0
8436 6805 6817 0
8436 6806 0
8436 6806 6814 0
8436 6806 6815 0
8436 6806 6817 0
c (((aux1661 + aux1664 + aux1665)<=1)=tv=SATLiteral(8437))
-8437 6844 0
-8437 6838 6843 0
-8437 6839 0
-8437 6841 0
-8437 6829 6843 0
-8437 6829 6838 0
-8437 6829 6839 0
-8437 6829 6841 0
-8437 6830 0
-8437 6830 6838 0
-8437 6830 6839 0
-8437 6830 6841 0
8437 -6830 -6838 -6843 0
8437 -6829 -6839 -6843 0
8437 -6829 -6838 -6844 0
c ((1<=(aux1661 + aux1664 + aux1665))=tv=SATLiteral(8438))
-8438 -6829 -6838 -6843 0
8438 6843 0
8438 6838 0
8438 6839 0
8438 6841 0
8438 6829 0
8438 6829 6838 0
8438 6829 6839 0
8438 6829 6841 0
8438 6830 0
8438 6830 6838 0
8438 6830 6839 0
8438 6830 6841 0
c (((aux1667 + aux1670 + aux1671)<=1)=tv=SATLiteral(8439))
-8439 6868 0
-8439 6862 6867 0
-8439 6863 0
-8439 6865 0
-8439 6853 6867 0
-8439 6853 6862 0
-8439 6853 6863 0
-8439 6853 6865 0
-8439 6854 0
-8439 6854 6862 0
-8439 6854 6863 0
-8439 6854 6865 0
8439 -6854 -6862 -6867 0
8439 -6853 -6863 -6867 0
8439 -6853 -6862 -6868 0
c ((1<=(aux1667 + aux1670 + aux1671))=tv=SATLiteral(8440))
-8440 -6853 -6862 -6867 0
8440 6867 0
8440 6862 0
8440 6863 0
8440 6865 0
8440 6853 0
8440 6853 6862 0
8440 6853 6863 0
8440 6853 6865 0
8440 6854 0
8440 6854 6862 0
8440 6854 6863 0
8440 6854 6865 0
c (((aux1673 + aux1676 + aux1677)<=1)=tv=SATLiteral(8441))
-8441 6892 0
-8441 6886 6891 0
-8441 6887 0
-8441 6889 0
-8441 6877 6891 0
-8441 6877 6886 0
-8441 6877 6887 0
-8441 6877 6889 0
-8441 6878 0
-8441 6878 6886 0
-8441 6878 6887 0
-8441 6878 6889 0
8441 -6878 -6886 -6891 0
8441 -6877 -6887 -6891 0
8441 -6877 -6886 -6892 0
c ((1<=(aux1673 + aux1676 + aux1677))=tv=SATLiteral(8442))
-8442 -6877 -6886 -6891 0
8442 6891 0
8442 6886 0
8442 6887 0
8442 6889 0
8442 6877 0
8442 6877 6886 0
8442 6877 6887 0
8442 6877 6889 0
8442 6878 0
8442 6878 6886 0
8442 6878 6887 0
8442 6878 6889 0
c (((aux1679 + aux1682 + aux1683)<=1)=tv=SATLiteral(8443))
-8443 6916 0
-8443 6910 6915 0
-8443 6911 0
-8443 6913 0
-8443 6901 6915 0
-8443 6901 6910 0
-8443 6901 6911 0
-8443 6901 6913 0
-8443 6902 0
-8443 6902 6910 0
-8443 6902 6911 0
-8443 6902 6913 0
8443 -6902 -6910 -6915 0
8443 -6901 -6911 -6915 0
8443 -6901 -6910 -6916 0
c ((1<=(aux1679 + aux1682 + aux1683))=tv=SATLiteral(8444))
-8444 -6901 -6910 -6915 0
8444 6915 0
8444 6910 0
8444 6911 0
8444 6913 0
8444 6901 0
8444 6901 6910 0
8444 6901 6911 0
8444 6901 6913 0
8444 6902 0
8444 6902 6910 0
8444 6902 6911 0
8444 6902 6913 0
c (((aux1685 + aux1688 + aux1689)<=1)=tv=SATLiteral(8445))
-8445 6940 0
-8445 6934 6939 0
-8445 6935 0
-8445 6937 0
-8445 6925 6939 0
-8445 6925 6934 0
-8445 6925 6935 0
-8445 6925 6937 0
-8445 6926 0
-8445 6926 6934 0
-8445 6926 6935 0
-8445 6926 6937 0
8445 -6926 -6934 -6939 0
8445 -6925 -6935 -6939 0
8445 -6925 -6934 -6940 0
c ((1<=(aux1685 + aux1688 + aux1689))=tv=SATLiteral(8446))
-8446 -6925 -6934 -6939 0
8446 6939 0
8446 6934 0
8446 6935 0
8446 6937 0
8446 6925 0
8446 6925 6934 0
8446 6925 6935 0
8446 6925 6937 0
8446 6926 0
8446 6926 6934 0
8446 6926 6935 0
8446 6926 6937 0
c (((aux1691 + aux1694 + aux1695)<=1)=tv=SATLiteral(8447))
-8447 6964 0
-8447 6958 6963 0
-8447 6959 0
-8447 6961 0
-8447 6949 6963 0
-8447 6949 6958 0
-8447 6949 6959 0
-8447 6949 6961 0
-8447 6950 0
-8447 6950 6958 0
-8447 6950 6959 0
-8447 6950 6961 0
8447 -6950 -6958 -6963 0
8447 -6949 -6959 -6963 0
8447 -6949 -6958 -6964 0
c ((1<=(aux1691 + aux1694 + aux1695))=tv=SATLiteral(8448))
-8448 -6949 -6958 -6963 0
8448 6963 0
8448 6958 0
8448 6959 0
8448 6961 0
8448 6949 0
8448 6949 6958 0
8448 6949 6959 0
8448 6949 6961 0
8448 6950 0
8448 6950 6958 0
8448 6950 6959 0
8448 6950 6961 0
c (((aux1697 + aux1700 + aux1701)<=1)=tv=SATLiteral(8449))
-8449 6988 0
-8449 6982 6987 0
-8449 6983 0
-8449 6985 0
-8449 6973 6987 0
-8449 6973 6982 0
-8449 6973 6983 0
-8449 6973 6985 0
-8449 6974 0
-8449 6974 6982 0
-8449 6974 6983 0
-8449 6974 6985 0
8449 -6974 -6982 -6987 0
8449 -6973 -6983 -6987 0
8449 -6973 -6982 -6988 0
c ((1<=(aux1697 + aux1700 + aux1701))=tv=SATLiteral(8450))
-8450 -6973 -6982 -6987 0
8450 6987 0
8450 6982 0
8450 6983 0
8450 6985 0
8450 6973 0
8450 6973 6982 0
8450 6973 6983 0
8450 6973 6985 0
8450 6974 0
8450 6974 6982 0
8450 6974 6983 0
8450 6974 6985 0
c (((aux1703 + aux1706 + aux1707)<=1)=tv=SATLiteral(8451))
-8451 7012 0
-8451 7006 7011 0
-8451 7007 0
-8451 7009 0
-8451 6997 7011 0
-8451 6997 7006 0
-8451 6997 7007 0
-8451 6997 7009 0
-8451 6998 0
-8451 6998 7006 0
-8451 6998 7007 0
-8451 6998 7009 0
8451 -6998 -7006 -7011 0
8451 -6997 -7007 -7011 0
8451 -6997 -7006 -7012 0
c ((1<=(aux1703 + aux1706 + aux1707))=tv=SATLiteral(8452))
-8452 -6997 -7006 -7011 0
8452 7011 0
8452 7006 0
8452 7007 0
8452 7009 0
8452 6997 0
8452 6997 7006 0
8452 6997 7007 0
8452 6997 7009 0
8452 6998 0
8452 6998 7006 0
8452 6998 7007 0
8452 6998 7009 0
c (((aux1709 + aux1712 + aux1713)<=1)=tv=SATLiteral(8453))
-8453 7036 0
-8453 7030 7035 0
-8453 7031 0
-8453 7033 0
-8453 7021 7035 0
-8453 7021 7030 0
-8453 7021 7031 0
-8453 7021 7033 0
-8453 7022 0
-8453 7022 7030 0
-8453 7022 7031 0
-8453 7022 7033 0
8453 -7022 -7030 -7035 0
8453 -7021 -7031 -7035 0
8453 -7021 -7030 -7036 0
c ((1<=(aux1709 + aux1712 + aux1713))=tv=SATLiteral(8454))
-8454 -7021 -7030 -7035 0
8454 7035 0
8454 7030 0
8454 7031 0
8454 7033 0
8454 7021 0
8454 7021 7030 0
8454 7021 7031 0
8454 7021 7033 0
8454 7022 0
8454 7022 7030 0
8454 7022 7031 0
8454 7022 7033 0
c (((aux1715 + aux1718 + aux1719)<=1)=tv=SATLiteral(8455))
-8455 7060 0
-8455 7054 7059 0
-8455 7055 0
-8455 7057 0
-8455 7045 7059 0
-8455 7045 7054 0
-8455 7045 7055 0
-8455 7045 7057 0
-8455 7046 0
-8455 7046 7054 0
-8455 7046 7055 0
-8455 7046 7057 0
8455 -7046 -7054 -7059 0
8455 -7045 -7055 -7059 0
8455 -7045 -7054 -7060 0
c ((1<=(aux1715 + aux1718 + aux1719))=tv=SATLiteral(8456))
-8456 -7045 -7054 -7059 0
8456 7059 0
8456 7054 0
8456 7055 0
8456 7057 0
8456 7045 0
8456 7045 7054 0
8456 7045 7055 0
8456 7045 7057 0
8456 7046 0
8456 7046 7054 0
8456 7046 7055 0
8456 7046 7057 0
c (((aux1721 + aux1724 + aux1725)<=1)=tv=SATLiteral(8457))
-8457 7084 0
-8457 7078 7083 0
-8457 7079 0
-8457 7081 0
-8457 7069 7083 0
-8457 7069 7078 0
-8457 7069 7079 0
-8457 7069 7081 0
-8457 7070 0
-8457 7070 7078 0
-8457 7070 7079 0
-8457 7070 7081 0
8457 -7070 -7078 -7083 0
8457 -7069 -7079 -7083 0
8457 -7069 -7078 -7084 0
c ((1<=(aux1721 + aux1724 + aux1725))=tv=SATLiteral(8458))
-8458 -7069 -7078 -7083 0
8458 7083 0
8458 7078 0
8458 7079 0
8458 7081 0
8458 7069 0
8458 7069 7078 0
8458 7069 7079 0
8458 7069 7081 0
8458 7070 0
8458 7070 7078 0
8458 7070 7079 0
8458 7070 7081 0
c (((aux1727 + aux1730 + aux1731)<=1)=tv=SATLiteral(8459))
-8459 7108 0
-8459 7102 7107 0
-8459 7103 0
-8459 7105 0
-8459 7093 7107 0
-8459 7093 7102 0
-8459 7093 7103 0
-8459 7093 7105 0
-8459 7094 0
-8459 7094 7102 0
-8459 7094 7103 0
-8459 7094 7105 0
8459 -7094 -7102 -7107 0
8459 -7093 -7103 -7107 0
8459 -7093 -7102 -7108 0
c ((1<=(aux1727 + aux1730 + aux1731))=tv=SATLiteral(8460))
-8460 -7093 -7102 -7107 0
8460 7107 0
8460 7102 0
8460 7103 0
8460 7105 0
8460 7093 0
8460 7093 7102 0
8460 7093 7103 0
8460 7093 7105 0
8460 7094 0
8460 7094 7102 0
8460 7094 7103 0
8460 7094 7105 0
c (((aux1733 + aux1736 + aux1737)<=1)=tv=SATLiteral(8461))
-8461 7132 0
-8461 7126 7131 0
-8461 7127 0
-8461 7129 0
-8461 7117 7131 0
-8461 7117 7126 0
-8461 7117 7127 0
-8461 7117 7129 0
-8461 7118 0
-8461 7118 7126 0
-8461 7118 7127 0
-8461 7118 7129 0
8461 -7118 -7126 -7131 0
8461 -7117 -7127 -7131 0
8461 -7117 -7126 -7132 0
c ((1<=(aux1733 + aux1736 + aux1737))=tv=SATLiteral(8462))
-8462 -7117 -7126 -7131 0
8462 7131 0
8462 7126 0
8462 7127 0
8462 7129 0
8462 7117 0
8462 7117 7126 0
8462 7117 7127 0
8462 7117 7129 0
8462 7118 0
8462 7118 7126 0
8462 7118 7127 0
8462 7118 7129 0
c (((aux1739 + aux1742 + aux1743)<=1)=tv=SATLiteral(8463))
-8463 7156 0
-8463 7150 7155 0
-8463 7151 0
-8463 7153 0
-8463 7141 7155 0
-8463 7141 7150 0
-8463 7141 7151 0
-8463 7141 7153 0
-8463 7142 0
-8463 7142 7150 0
-8463 7142 7151 0
-8463 7142 7153 0
8463 -7142 -7150 -7155 0
8463 -7141 -7151 -7155 0
8463 -7141 -7150 -7156 0
c ((1<=(aux1739 + aux1742 + aux1743))=tv=SATLiteral(8464))
-8464 -7141 -7150 -7155 0
8464 7155 0
8464 7150 0
8464 7151 0
8464 7153 0
8464 7141 0
8464 7141 7150 0
8464 7141 7151 0
8464 7141 7153 0
8464 7142 0
8464 7142 7150 0
8464 7142 7151 0
8464 7142 7153 0
c (((aux1745 + aux1748 + aux1749)<=1)=tv=SATLiteral(8465))
-8465 7180 0
-8465 7174 7179 0
-8465 7175 0
-8465 7177 0
-8465 7165 7179 0
-8465 7165 7174 0
-8465 7165 7175 0
-8465 7165 7177 0
-8465 7166 0
-8465 7166 7174 0
-8465 7166 7175 0
-8465 7166 7177 0
8465 -7166 -7174 -7179 0
8465 -7165 -7175 -7179 0
8465 -7165 -7174 -7180 0
c ((1<=(aux1745 + aux1748 + aux1749))=tv=SATLiteral(8466))
-8466 -7165 -7174 -7179 0
8466 7179 0
8466 7174 0
8466 7175 0
8466 7177 0
8466 7165 0
8466 7165 7174 0
8466 7165 7175 0
8466 7165 7177 0
8466 7166 0
8466 7166 7174 0
8466 7166 7175 0
8466 7166 7177 0
c (((aux1751 + aux1754 + aux1755)<=1)=tv=SATLiteral(8467))
-8467 7204 0
-8467 7198 7203 0
-8467 7199 0
-8467 7201 0
-8467 7189 7203 0
-8467 7189 7198 0
-8467 7189 7199 0
-8467 7189 7201 0
-8467 7190 0
-8467 7190 7198 0
-8467 7190 7199 0
-8467 7190 7201 0
8467 -7190 -7198 -7203 0
8467 -7189 -7199 -7203 0
8467 -7189 -7198 -7204 0
c ((1<=(aux1751 + aux1754 + aux1755))=tv=SATLiteral(8468))
-8468 -7189 -7198 -7203 0
8468 7203 0
8468 7198 0
8468 7199 0
8468 7201 0
8468 7189 0
8468 7189 7198 0
8468 7189 7199 0
8468 7189 7201 0
8468 7190 0
8468 7190 7198 0
8468 7190 7199 0
8468 7190 7201 0
c (((aux1757 + aux1760 + aux1761)<=1)=tv=SATLiteral(8469))
-8469 7228 0
-8469 7222 7227 0
-8469 7223 0
-8469 7225 0
-8469 7213 7227 0
-8469 7213 7222 0
-8469 7213 7223 0
-8469 7213 7225 0
-8469 7214 0
-8469 7214 7222 0
-8469 7214 7223 0
-8469 7214 7225 0
8469 -7214 -7222 -7227 0
8469 -7213 -7223 -7227 0
8469 -7213 -7222 -7228 0
c ((1<=(aux1757 + aux1760 + aux1761))=tv=SATLiteral(8470))
-8470 -7213 -7222 -7227 0
8470 7227 0
8470 7222 0
8470 7223 0
8470 7225 0
8470 7213 0
8470 7213 7222 0
8470 7213 7223 0
8470 7213 7225 0
8470 7214 0
8470 7214 7222 0
8470 7214 7223 0
8470 7214 7225 0
c (((aux1763 + aux1766 + aux1767)<=1)=tv=SATLiteral(8471))
-8471 7252 0
-8471 7246 7251 0
-8471 7247 0
-8471 7249 0
-8471 7237 7251 0
-8471 7237 7246 0
-8471 7237 7247 0
-8471 7237 7249 0
-8471 7238 0
-8471 7238 7246 0
-8471 7238 7247 0
-8471 7238 7249 0
8471 -7238 -7246 -7251 0
8471 -7237 -7247 -7251 0
8471 -7237 -7246 -7252 0
c ((1<=(aux1763 + aux1766 + aux1767))=tv=SATLiteral(8472))
-8472 -7237 -7246 -7251 0
8472 7251 0
8472 7246 0
8472 7247 0
8472 7249 0
8472 7237 0
8472 7237 7246 0
8472 7237 7247 0
8472 7237 7249 0
8472 7238 0
8472 7238 7246 0
8472 7238 7247 0
8472 7238 7249 0
c (((aux1769 + aux1772 + aux1773)<=1)=tv=SATLiteral(8473))
-8473 7276 0
-8473 7270 7275 0
-8473 7271 0
-8473 7273 0
-8473 7261 7275 0
-8473 7261 7270 0
-8473 7261 7271 0
-8473 7261 7273 0
-8473 7262 0
-8473 7262 7270 0
-8473 7262 7271 0
-8473 7262 7273 0
8473 -7262 -7270 -7275 0
8473 -7261 -7271 -7275 0
8473 -7261 -7270 -7276 0
c ((1<=(aux1769 + aux1772 + aux1773))=tv=SATLiteral(8474))
-8474 -7261 -7270 -7275 0
8474 7275 0
8474 7270 0
8474 7271 0
8474 7273 0
8474 7261 0
8474 7261 7270 0
8474 7261 7271 0
8474 7261 7273 0
8474 7262 0
8474 7262 7270 0
8474 7262 7271 0
8474 7262 7273 0
c (((aux1775 + aux1778 + aux1779)<=1)=tv=SATLiteral(8475))
-8475 7300 0
-8475 7294 7299 0
-8475 7295 0
-8475 7297 0
-8475 7285 7299 0
-8475 7285 7294 0
-8475 7285 7295 0
-8475 7285 7297 0
-8475 7286 0
-8475 7286 7294 0
-8475 7286 7295 0
-8475 7286 7297 0
8475 -7286 -7294 -7299 0
8475 -7285 -7295 -7299 0
8475 -7285 -7294 -7300 0
c ((1<=(aux1775 + aux1778 + aux1779))=tv=SATLiteral(8476))
-8476 -7285 -7294 -7299 0
8476 7299 0
8476 7294 0
8476 7295 0
8476 7297 0
8476 7285 0
8476 7285 7294 0
8476 7285 7295 0
8476 7285 7297 0
8476 7286 0
8476 7286 7294 0
8476 7286 7295 0
8476 7286 7297 0
c (((aux1781 + aux1784 + aux1785)<=1)=tv=SATLiteral(8477))
-8477 7324 0
-8477 7318 7323 0
-8477 7319 0
-8477 7321 0
-8477 7309 7323 0
-8477 7309 7318 0
-8477 7309 7319 0
-8477 7309 7321 0
-8477 7310 0
-8477 7310 7318 0
-8477 7310 7319 0
-8477 7310 7321 0
8477 -7310 -7318 -7323 0
8477 -7309 -7319 -7323 0
8477 -7309 -7318 -7324 0
c ((1<=(aux1781 + aux1784 + aux1785))=tv=SATLiteral(8478))
-8478 -7309 -7318 -7323 0
8478 7323 0
8478 7318 0
8478 7319 0
8478 7321 0
8478 7309 0
8478 7309 7318 0
8478 7309 7319 0
8478 7309 7321 0
8478 7310 0
8478 7310 7318 0
8478 7310 7319 0
8478 7310 7321 0
c (((aux1787 + aux1790 + aux1791)<=1)=tv=SATLiteral(8479))
-8479 7348 0
-8479 7342 7347 0
-8479 7343 0
-8479 7345 0
-8479 7333 7347 0
-8479 7333 7342 0
-8479 7333 7343 0
-8479 7333 7345 0
-8479 7334 0
-8479 7334 7342 0
-8479 7334 7343 0
-8479 7334 7345 0
8479 -7334 -7342 -7347 0
8479 -7333 -7343 -7347 0
8479 -7333 -7342 -7348 0
c ((1<=(aux1787 + aux1790 + aux1791))=tv=SATLiteral(8480))
-8480 -7333 -7342 -7347 0
8480 7347 0
8480 7342 0
8480 7343 0
8480 7345 0
8480 7333 0
8480 7333 7342 0
8480 7333 7343 0
8480 7333 7345 0
8480 7334 0
8480 7334 7342 0
8480 7334 7343 0
8480 7334 7345 0
c (((aux1793 + aux1796 + aux1797)<=1)=tv=SATLiteral(8481))
-8481 7372 0
-8481 7366 7371 0
-8481 7367 0
-8481 7369 0
-8481 7357 7371 0
-8481 7357 7366 0
-8481 7357 7367 0
-8481 7357 7369 0
-8481 7358 0
-8481 7358 7366 0
-8481 7358 7367 0
-8481 7358 7369 0
8481 -7358 -7366 -7371 0
8481 -7357 -7367 -7371 0
8481 -7357 -7366 -7372 0
c ((1<=(aux1793 + aux1796 + aux1797))=tv=SATLiteral(8482))
-8482 -7357 -7366 -7371 0
8482 7371 0
8482 7366 0
8482 7367 0
8482 7369 0
8482 7357 0
8482 7357 7366 0
8482 7357 7367 0
8482 7357 7369 0
8482 7358 0
8482 7358 7366 0
8482 7358 7367 0
8482 7358 7369 0
c (((aux1799 + aux1802 + aux1803)<=1)=tv=SATLiteral(8483))
-8483 7396 0
-8483 7390 7395 0
-8483 7391 0
-8483 7393 0
-8483 7381 7395 0
-8483 7381 7390 0
-8483 7381 7391 0
-8483 7381 7393 0
-8483 7382 0
-8483 7382 7390 0
-8483 7382 7391 0
-8483 7382 7393 0
8483 -7382 -7390 -7395 0
8483 -7381 -7391 -7395 0
8483 -7381 -7390 -7396 0
c ((1<=(aux1799 + aux1802 + aux1803))=tv=SATLiteral(8484))
-8484 -7381 -7390 -7395 0
8484 7395 0
8484 7390 0
8484 7391 0
8484 7393 0
8484 7381 0
8484 7381 7390 0
8484 7381 7391 0
8484 7381 7393 0
8484 7382 0
8484 7382 7390 0
8484 7382 7391 0
8484 7382 7393 0
c (((aux1805 + aux1808 + aux1809)<=1)=tv=SATLiteral(8485))
-8485 7420 0
-8485 7414 7419 0
-8485 7415 0
-8485 7417 0
-8485 7405 7419 0
-8485 7405 7414 0
-8485 7405 7415 0
-8485 7405 7417 0
-8485 7406 0
-8485 7406 7414 0
-8485 7406 7415 0
-8485 7406 7417 0
8485 -7406 -7414 -7419 0
8485 -7405 -7415 -7419 0
8485 -7405 -7414 -7420 0
c ((1<=(aux1805 + aux1808 + aux1809))=tv=SATLiteral(8486))
-8486 -7405 -7414 -7419 0
8486 7419 0
8486 7414 0
8486 7415 0
8486 7417 0
8486 7405 0
8486 7405 7414 0
8486 7405 7415 0
8486 7405 7417 0
8486 7406 0
8486 7406 7414 0
8486 7406 7415 0
8486 7406 7417 0
c (((aux1811 + aux1814 + aux1815)<=1)=tv=SATLiteral(8487))
-8487 7444 0
-8487 7438 7443 0
-8487 7439 0
-8487 7441 0
-8487 7429 7443 0
-8487 7429 7438 0
-8487 7429 7439 0
-8487 7429 7441 0
-8487 7430 0
-8487 7430 7438 0
-8487 7430 7439 0
-8487 7430 7441 0
8487 -7430 -7438 -7443 0
8487 -7429 -7439 -7443 0
8487 -7429 -7438 -7444 0
c ((1<=(aux1811 + aux1814 + aux1815))=tv=SATLiteral(8488))
-8488 -7429 -7438 -7443 0
8488 7443 0
8488 7438 0
8488 7439 0
8488 7441 0
8488 7429 0
8488 7429 7438 0
8488 7429 7439 0
8488 7429 7441 0
8488 7430 0
8488 7430 7438 0
8488 7430 7439 0
8488 7430 7441 0
c (((aux1817 + aux1820 + aux1821)<=1)=tv=SATLiteral(8489))
-8489 7468 0
-8489 7462 7467 0
-8489 7463 0
-8489 7465 0
-8489 7453 7467 0
-8489 7453 7462 0
-8489 7453 7463 0
-8489 7453 7465 0
-8489 7454 0
-8489 7454 7462 0
-8489 7454 7463 0
-8489 7454 7465 0
8489 -7454 -7462 -7467 0
8489 -7453 -7463 -7467 0
8489 -7453 -7462 -7468 0
c ((1<=(aux1817 + aux1820 + aux1821))=tv=SATLiteral(8490))
-8490 -7453 -7462 -7467 0
8490 7467 0
8490 7462 0
8490 7463 0
8490 7465 0
8490 7453 0
8490 7453 7462 0
8490 7453 7463 0
8490 7453 7465 0
8490 7454 0
8490 7454 7462 0
8490 7454 7463 0
8490 7454 7465 0
c (((aux1823 + aux1826 + aux1827)<=1)=tv=SATLiteral(8491))
-8491 7492 0
-8491 7486 7491 0
-8491 7487 0
-8491 7489 0
-8491 7477 7491 0
-8491 7477 7486 0
-8491 7477 7487 0
-8491 7477 7489 0
-8491 7478 0
-8491 7478 7486 0
-8491 7478 7487 0
-8491 7478 7489 0
8491 -7478 -7486 -7491 0
8491 -7477 -7487 -7491 0
8491 -7477 -7486 -7492 0
c ((1<=(aux1823 + aux1826 + aux1827))=tv=SATLiteral(8492))
-8492 -7477 -7486 -7491 0
8492 7491 0
8492 7486 0
8492 7487 0
8492 7489 0
8492 7477 0
8492 7477 7486 0
8492 7477 7487 0
8492 7477 7489 0
8492 7478 0
8492 7478 7486 0
8492 7478 7487 0
8492 7478 7489 0
c (((aux1829 + aux1832 + aux1833)<=1)=tv=SATLiteral(8493))
-8493 7516 0
-8493 7510 7515 0
-8493 7511 0
-8493 7513 0
-8493 7501 7515 0
-8493 7501 7510 0
-8493 7501 7511 0
-8493 7501 7513 0
-8493 7502 0
-8493 7502 7510 0
-8493 7502 7511 0
-8493 7502 7513 0
8493 -7502 -7510 -7515 0
8493 -7501 -7511 -7515 0
8493 -7501 -7510 -7516 0
c ((1<=(aux1829 + aux1832 + aux1833))=tv=SATLiteral(8494))
-8494 -7501 -7510 -7515 0
8494 7515 0
8494 7510 0
8494 7511 0
8494 7513 0
8494 7501 0
8494 7501 7510 0
8494 7501 7511 0
8494 7501 7513 0
8494 7502 0
8494 7502 7510 0
8494 7502 7511 0
8494 7502 7513 0
c (((aux1835 + aux1838 + aux1839)<=1)=tv=SATLiteral(8495))
-8495 7540 0
-8495 7534 7539 0
-8495 7535 0
-8495 7537 0
-8495 7525 7539 0
-8495 7525 7534 0
-8495 7525 7535 0
-8495 7525 7537 0
-8495 7526 0
-8495 7526 7534 0
-8495 7526 7535 0
-8495 7526 7537 0
8495 -7526 -7534 -7539 0
8495 -7525 -7535 -7539 0
8495 -7525 -7534 -7540 0
c ((1<=(aux1835 + aux1838 + aux1839))=tv=SATLiteral(8496))
-8496 -7525 -7534 -7539 0
8496 7539 0
8496 7534 0
8496 7535 0
8496 7537 0
8496 7525 0
8496 7525 7534 0
8496 7525 7535 0
8496 7525 7537 0
8496 7526 0
8496 7526 7534 0
8496 7526 7535 0
8496 7526 7537 0
c (((aux1841 + aux1844 + aux1845)<=1)=tv=SATLiteral(8497))
-8497 7564 0
-8497 7558 7563 0
-8497 7559 0
-8497 7561 0
-8497 7549 7563 0
-8497 7549 7558 0
-8497 7549 7559 0
-8497 7549 7561 0
-8497 7550 0
-8497 7550 7558 0
-8497 7550 7559 0
-8497 7550 7561 0
8497 -7550 -7558 -7563 0
8497 -7549 -7559 -7563 0
8497 -7549 -7558 -7564 0
c ((1<=(aux1841 + aux1844 + aux1845))=tv=SATLiteral(8498))
-8498 -7549 -7558 -7563 0
8498 7563 0
8498 7558 0
8498 7559 0
8498 7561 0
8498 7549 0
8498 7549 7558 0
8498 7549 7559 0
8498 7549 7561 0
8498 7550 0
8498 7550 7558 0
8498 7550 7559 0
8498 7550 7561 0
c (((aux1847 + aux1850 + aux1851)<=1)=tv=SATLiteral(8499))
-8499 7588 0
-8499 7582 7587 0
-8499 7583 0
-8499 7585 0
-8499 7573 7587 0
-8499 7573 7582 0
-8499 7573 7583 0
-8499 7573 7585 0
-8499 7574 0
-8499 7574 7582 0
-8499 7574 7583 0
-8499 7574 7585 0
8499 -7574 -7582 -7587 0
8499 -7573 -7583 -7587 0
8499 -7573 -7582 -7588 0
c ((1<=(aux1847 + aux1850 + aux1851))=tv=SATLiteral(8500))
-8500 -7573 -7582 -7587 0
8500 7587 0
8500 7582 0
8500 7583 0
8500 7585 0
8500 7573 0
8500 7573 7582 0
8500 7573 7583 0
8500 7573 7585 0
8500 7574 0
8500 7574 7582 0
8500 7574 7583 0
8500 7574 7585 0
c (((aux1853 + aux1856 + aux1857)<=1)=tv=SATLiteral(8501))
-8501 7612 0
-8501 7606 7611 0
-8501 7607 0
-8501 7609 0
-8501 7597 7611 0
-8501 7597 7606 0
-8501 7597 7607 0
-8501 7597 7609 0
-8501 7598 0
-8501 7598 7606 0
-8501 7598 7607 0
-8501 7598 7609 0
8501 -7598 -7606 -7611 0
8501 -7597 -7607 -7611 0
8501 -7597 -7606 -7612 0
c ((1<=(aux1853 + aux1856 + aux1857))=tv=SATLiteral(8502))
-8502 -7597 -7606 -7611 0
8502 7611 0
8502 7606 0
8502 7607 0
8502 7609 0
8502 7597 0
8502 7597 7606 0
8502 7597 7607 0
8502 7597 7609 0
8502 7598 0
8502 7598 7606 0
8502 7598 7607 0
8502 7598 7609 0
c (((aux1859 + aux1862 + aux1863)<=1)=tv=SATLiteral(8503))
-8503 7636 0
-8503 7630 7635 0
-8503 7631 0
-8503 7633 0
-8503 7621 7635 0
-8503 7621 7630 0
-8503 7621 7631 0
-8503 7621 7633 0
-8503 7622 0
-8503 7622 7630 0
-8503 7622 7631 0
-8503 7622 7633 0
8503 -7622 -7630 -7635 0
8503 -7621 -7631 -7635 0
8503 -7621 -7630 -7636 0
c ((1<=(aux1859 + aux1862 + aux1863))=tv=SATLiteral(8504))
-8504 -7621 -7630 -7635 0
8504 7635 0
8504 7630 0
8504 7631 0
8504 7633 0
8504 7621 0
8504 7621 7630 0
8504 7621 7631 0
8504 7621 7633 0
8504 7622 0
8504 7622 7630 0
8504 7622 7631 0
8504 7622 7633 0
c (((aux1865 + aux1868 + aux1869)<=1)=tv=SATLiteral(8505))
-8505 7660 0
-8505 7654 7659 0
-8505 7655 0
-8505 7657 0
-8505 7645 7659 0
-8505 7645 7654 0
-8505 7645 7655 0
-8505 7645 7657 0
-8505 7646 0
-8505 7646 7654 0
-8505 7646 7655 0
-8505 7646 7657 0
8505 -7646 -7654 -7659 0
8505 -7645 -7655 -7659 0
8505 -7645 -7654 -7660 0
c ((1<=(aux1865 + aux1868 + aux1869))=tv=SATLiteral(8506))
-8506 -7645 -7654 -7659 0
8506 7659 0
8506 7654 0
8506 7655 0
8506 7657 0
8506 7645 0
8506 7645 7654 0
8506 7645 7655 0
8506 7645 7657 0
8506 7646 0
8506 7646 7654 0
8506 7646 7655 0
8506 7646 7657 0
c (((aux1871 + aux1874 + aux1875)<=1)=tv=SATLiteral(8507))
-8507 7684 0
-8507 7678 7683 0
-8507 7679 0
-8507 7681 0
-8507 7669 7683 0
-8507 7669 7678 0
-8507 7669 7679 0
-8507 7669 7681 0
-8507 7670 0
-8507 7670 7678 0
-8507 7670 7679 0
-8507 7670 7681 0
8507 -7670 -7678 -7683 0
8507 -7669 -7679 -7683 0
8507 -7669 -7678 -7684 0
c ((1<=(aux1871 + aux1874 + aux1875))=tv=SATLiteral(8508))
-8508 -7669 -7678 -7683 0
8508 7683 0
8508 7678 0
8508 7679 0
8508 7681 0
8508 7669 0
8508 7669 7678 0
8508 7669 7679 0
8508 7669 7681 0
8508 7670 0
8508 7670 7678 0
8508 7670 7679 0
8508 7670 7681 0
c (((aux1877 + aux1880 + aux1881)<=1)=tv=SATLiteral(8509))
-8509 7708 0
-8509 7702 7707 0
-8509 7703 0
-8509 7705 0
-8509 7693 7707 0
-8509 7693 7702 0
-8509 7693 7703 0
-8509 7693 7705 0
-8509 7694 0
-8509 7694 7702 0
-8509 7694 7703 0
-8509 7694 7705 0
8509 -7694 -7702 -7707 0
8509 -7693 -7703 -7707 0
8509 -7693 -7702 -7708 0
c ((1<=(aux1877 + aux1880 + aux1881))=tv=SATLiteral(8510))
-8510 -7693 -7702 -7707 0
8510 7707 0
8510 7702 0
8510 7703 0
8510 7705 0
8510 7693 0
8510 7693 7702 0
8510 7693 7703 0
8510 7693 7705 0
8510 7694 0
8510 7694 7702 0
8510 7694 7703 0
8510 7694 7705 0
c (((aux1883 + aux1886 + aux1887)<=1)=tv=SATLiteral(8511))
-8511 7732 0
-8511 7726 7731 0
-8511 7727 0
-8511 7729 0
-8511 7717 7731 0
-8511 7717 7726 0
-8511 7717 7727 0
-8511 7717 7729 0
-8511 7718 0
-8511 7718 7726 0
-8511 7718 7727 0
-8511 7718 7729 0
8511 -7718 -7726 -7731 0
8511 -7717 -7727 -7731 0
8511 -7717 -7726 -7732 0
c ((1<=(aux1883 + aux1886 + aux1887))=tv=SATLiteral(8512))
-8512 -7717 -7726 -7731 0
8512 7731 0
8512 7726 0
8512 7727 0
8512 7729 0
8512 7717 0
8512 7717 7726 0
8512 7717 7727 0
8512 7717 7729 0
8512 7718 0
8512 7718 7726 0
8512 7718 7727 0
8512 7718 7729 0
c (((aux1889 + aux1892 + aux1893)<=1)=tv=SATLiteral(8513))
-8513 7756 0
-8513 7750 7755 0
-8513 7751 0
-8513 7753 0
-8513 7741 7755 0
-8513 7741 7750 0
-8513 7741 7751 0
-8513 7741 7753 0
-8513 7742 0
-8513 7742 7750 0
-8513 7742 7751 0
-8513 7742 7753 0
8513 -7742 -7750 -7755 0
8513 -7741 -7751 -7755 0
8513 -7741 -7750 -7756 0
c ((1<=(aux1889 + aux1892 + aux1893))=tv=SATLiteral(8514))
-8514 -7741 -7750 -7755 0
8514 7755 0
8514 7750 0
8514 7751 0
8514 7753 0
8514 7741 0
8514 7741 7750 0
8514 7741 7751 0
8514 7741 7753 0
8514 7742 0
8514 7742 7750 0
8514 7742 7751 0
8514 7742 7753 0
c (((aux1895 + aux1898 + aux1899)<=1)=tv=SATLiteral(8515))
-8515 7780 0
-8515 7774 7779 0
-8515 7775 0
-8515 7777 0
-8515 7765 7779 0
-8515 7765 7774 0
-8515 7765 7775 0
-8515 7765 7777 0
-8515 7766 0
-8515 7766 7774 0
-8515 7766 7775 0
-8515 7766 7777 0
8515 -7766 -7774 -7779 0
8515 -7765 -7775 -7779 0
8515 -7765 -7774 -7780 0
c ((1<=(aux1895 + aux1898 + aux1899))=tv=SATLiteral(8516))
-8516 -7765 -7774 -7779 0
8516 7779 0
8516 7774 0
8516 7775 0
8516 7777 0
8516 7765 0
8516 7765 7774 0
8516 7765 7775 0
8516 7765 7777 0
8516 7766 0
8516 7766 7774 0
8516 7766 7775 0
8516 7766 7777 0
c ((SATLiteral(7975) /\ SATLiteral(7976))=tv=SATLiteral(1302))
1302 -7975 -7976 0
7975 -1302 0
7976 -1302 0
c ((SATLiteral(7977) /\ SATLiteral(7978))=tv=SATLiteral(1303))
1303 -7977 -7978 0
7977 -1303 0
7978 -1303 0
c ((SATLiteral(7979) /\ SATLiteral(7980))=tv=SATLiteral(1304))
1304 -7979 -7980 0
7979 -1304 0
7980 -1304 0
c ((SATLiteral(7981) /\ SATLiteral(7982))=tv=SATLiteral(1305))
1305 -7981 -7982 0
7981 -1305 0
7982 -1305 0
c ((SATLiteral(7983) /\ SATLiteral(7984))=tv=SATLiteral(1306))
1306 -7983 -7984 0
7983 -1306 0
7984 -1306 0
c ((SATLiteral(7985) /\ SATLiteral(7986))=tv=SATLiteral(1307))
1307 -7985 -7986 0
7985 -1307 0
7986 -1307 0
c ((SATLiteral(7987) /\ SATLiteral(7988))=tv=SATLiteral(1308))
1308 -7987 -7988 0
7987 -1308 0
7988 -1308 0
c ((SATLiteral(7989) /\ SATLiteral(7990))=tv=SATLiteral(1309))
1309 -7989 -7990 0
7989 -1309 0
7990 -1309 0
c ((SATLiteral(7991) /\ SATLiteral(7992))=tv=SATLiteral(1310))
1310 -7991 -7992 0
7991 -1310 0
7992 -1310 0
c ((SATLiteral(7993) /\ SATLiteral(7994))=tv=SATLiteral(1311))
1311 -7993 -7994 0
7993 -1311 0
7994 -1311 0
c ((SATLiteral(7995) /\ SATLiteral(7996))=tv=SATLiteral(1312))
1312 -7995 -7996 0
7995 -1312 0
7996 -1312 0
c ((SATLiteral(7997) /\ SATLiteral(7998))=tv=SATLiteral(1313))
1313 -7997 -7998 0
7997 -1313 0
7998 -1313 0
c ((SATLiteral(7999) /\ SATLiteral(8000))=tv=SATLiteral(1314))
1314 -7999 -8000 0
7999 -1314 0
8000 -1314 0
c ((SATLiteral(8001) /\ SATLiteral(8002))=tv=SATLiteral(1315))
1315 -8001 -8002 0
8001 -1315 0
8002 -1315 0
c ((SATLiteral(8003) /\ SATLiteral(8004))=tv=SATLiteral(1316))
1316 -8003 -8004 0
8003 -1316 0
8004 -1316 0
c ((SATLiteral(8005) /\ SATLiteral(8006))=tv=SATLiteral(1317))
1317 -8005 -8006 0
8005 -1317 0
8006 -1317 0
c ((SATLiteral(8007) /\ SATLiteral(8008))=tv=SATLiteral(1318))
1318 -8007 -8008 0
8007 -1318 0
8008 -1318 0
c ((SATLiteral(8009) /\ SATLiteral(8010))=tv=SATLiteral(1319))
1319 -8009 -8010 0
8009 -1319 0
8010 -1319 0
c ((SATLiteral(8011) /\ SATLiteral(8012))=tv=SATLiteral(1320))
1320 -8011 -8012 0
8011 -1320 0
8012 -1320 0
c ((SATLiteral(8013) /\ SATLiteral(8014))=tv=SATLiteral(1321))
1321 -8013 -8014 0
8013 -1321 0
8014 -1321 0
c ((SATLiteral(8015) /\ SATLiteral(8016))=tv=SATLiteral(1322))
1322 -8015 -8016 0
8015 -1322 0
8016 -1322 0
c ((SATLiteral(8017) /\ SATLiteral(8018))=tv=SATLiteral(1323))
1323 -8017 -8018 0
8017 -1323 0
8018 -1323 0
c ((SATLiteral(8019) /\ SATLiteral(8020))=tv=SATLiteral(1324))
1324 -8019 -8020 0
8019 -1324 0
8020 -1324 0
c ((SATLiteral(8021) /\ SATLiteral(8022))=tv=SATLiteral(1325))
1325 -8021 -8022 0
8021 -1325 0
8022 -1325 0
c ((SATLiteral(8023) /\ SATLiteral(8024))=tv=SATLiteral(1326))
1326 -8023 -8024 0
8023 -1326 0
8024 -1326 0
c ((SATLiteral(8025) /\ SATLiteral(8026))=tv=SATLiteral(1327))
1327 -8025 -8026 0
8025 -1327 0
8026 -1327 0
c ((SATLiteral(8027) /\ SATLiteral(8028))=tv=SATLiteral(1328))
1328 -8027 -8028 0
8027 -1328 0
8028 -1328 0
c ((SATLiteral(8029) /\ SATLiteral(8030))=tv=SATLiteral(1329))
1329 -8029 -8030 0
8029 -1329 0
8030 -1329 0
c ((x_00002_00009 != x_00001_00009)=tv=SATLiteral(1330))
-257 122 1330 0
-259 124 1330 0
-261 126 1330 0
-263 128 1330 0
-265 130 1330 0
-267 132 1330 0
-269 134 1330 0
-271 136 1330 0
270 -135 1330 0
-122 257 1330 0
-124 259 1330 0
-126 261 1330 0
-128 263 1330 0
-130 265 1330 0
-132 267 1330 0
-134 269 1330 0
-136 271 1330 0
135 -270 1330 0
-257 -122 -1330 0
-259 -124 -1330 0
-261 -126 -1330 0
-263 -128 -1330 0
-265 -130 -1330 0
-267 -132 -1330 0
-269 -134 -1330 0
-271 -136 -1330 0
270 135 -1330 0
c ((x_00004_00009 != x_00005_00009)=tv=SATLiteral(1331))
-527 662 1331 0
-529 664 1331 0
-531 666 1331 0
-533 668 1331 0
-535 670 1331 0
-537 672 1331 0
-539 674 1331 0
-541 676 1331 0
540 -675 1331 0
-662 527 1331 0
-664 529 1331 0
-666 531 1331 0
-668 533 1331 0
-670 535 1331 0
-672 537 1331 0
-674 539 1331 0
-676 541 1331 0
675 -540 1331 0
-527 -662 -1331 0
-529 -664 -1331 0
-531 -666 -1331 0
-533 -668 -1331 0
-535 -670 -1331 0
-537 -672 -1331 0
-539 -674 -1331 0
-541 -676 -1331 0
540 675 -1331 0
c ((x_00007_00001 != x_00006_00001)=tv=SATLiteral(1332))
-812 677 1332 0
-814 679 1332 0
-816 681 1332 0
-818 683 1332 0
-820 685 1332 0
-822 687 1332 0
-824 689 1332 0
-826 691 1332 0
825 -690 1332 0
-677 812 1332 0
-679 814 1332 0
-681 816 1332 0
-683 818 1332 0
-685 820 1332 0
-687 822 1332 0
-689 824 1332 0
-691 826 1332 0
690 -825 1332 0
-812 -677 -1332 0
-814 -679 -1332 0
-816 -681 -1332 0
-818 -683 -1332 0
-820 -685 -1332 0
-822 -687 -1332 0
-824 -689 -1332 0
-826 -691 -1332 0
825 690 -1332 0
c ((x_00007_00002 != x_00006_00002)=tv=SATLiteral(1333))
-827 692 1333 0
-829 694 1333 0
-831 696 1333 0
-833 698 1333 0
-835 700 1333 0
-837 702 1333 0
-839 704 1333 0
-841 706 1333 0
840 -705 1333 0
-692 827 1333 0
-694 829 1333 0
-696 831 1333 0
-698 833 1333 0
-700 835 1333 0
-702 837 1333 0
-704 839 1333 0
-706 841 1333 0
705 -840 1333 0
-827 -692 -1333 0
-829 -694 -1333 0
-831 -696 -1333 0
-833 -698 -1333 0
-835 -700 -1333 0
-837 -702 -1333 0
-839 -704 -1333 0
-841 -706 -1333 0
840 705 -1333 0
c ((x_00007_00006 != x_00006_00006)=tv=SATLiteral(1334))
-887 752 1334 0
-889 754 1334 0
-891 756 1334 0
-893 758 1334 0
-895 760 1334 0
-897 762 1334 0
-899 764 1334 0
-901 766 1334 0
900 -765 1334 0
-752 887 1334 0
-754 889 1334 0
-756 891 1334 0
-758 893 1334 0
-760 895 1334 0
-762 897 1334 0
-764 899 1334 0
-766 901 1334 0
765 -900 1334 0
-887 -752 -1334 0
-889 -754 -1334 0
-891 -756 -1334 0
-893 -758 -1334 0
-895 -760 -1334 0
-897 -762 -1334 0
-899 -764 -1334 0
-901 -766 -1334 0
900 765 -1334 0
c ((x_00007_00004 != x_00007_00005)=tv=SATLiteral(1335))
-857 872 1335 0
-859 874 1335 0
-861 876 1335 0
-863 878 1335 0
-865 880 1335 0
-867 882 1335 0
-869 884 1335 0
-871 886 1335 0
870 -885 1335 0
-872 857 1335 0
-874 859 1335 0
-876 861 1335 0
-878 863 1335 0
-880 865 1335 0
-882 867 1335 0
-884 869 1335 0
-886 871 1335 0
885 -870 1335 0
-857 -872 -1335 0
-859 -874 -1335 0
-861 -876 -1335 0
-863 -878 -1335 0
-865 -880 -1335 0
-867 -882 -1335 0
-869 -884 -1335 0
-871 -886 -1335 0
870 885 -1335 0
c ((x_00007_00007 != x_00007_00008)=tv=SATLiteral(1336))
-902 917 1336 0
-904 919 1336 0
-906 921 1336 0
-908 923 1336 0
-910 925 1336 0
-912 927 1336 0
-914 929 1336 0
-916 931 1336 0
915 -930 1336 0
-917 902 1336 0
-919 904 1336 0
-921 906 1336 0
-923 908 1336 0
-925 910 1336 0
-927 912 1336 0
-929 914 1336 0
-931 916 1336 0
930 -915 1336 0
-902 -917 -1336 0
-904 -919 -1336 0
-906 -921 -1336 0
-908 -923 -1336 0
-910 -925 -1336 0
-912 -927 -1336 0
-914 -929 -1336 0
-916 -931 -1336 0
915 930 -1336 0
c ((x_00008_00001 != x_00008_00002)=tv=SATLiteral(1337))
-947 962 1337 0
-949 964 1337 0
-951 966 1337 0
-953 968 1337 0
-955 970 1337 0
-957 972 1337 0
-959 974 1337 0
-961 976 1337 0
960 -975 1337 0
-962 947 1337 0
-964 949 1337 0
-966 951 1337 0
-968 953 1337 0
-970 955 1337 0
-972 957 1337 0
-974 959 1337 0
-976 961 1337 0
975 -960 1337 0
-947 -962 -1337 0
-949 -964 -1337 0
-951 -966 -1337 0
-953 -968 -1337 0
-955 -970 -1337 0
-957 -972 -1337 0
-959 -974 -1337 0
-961 -976 -1337 0
960 975 -1337 0
c ((x_00008_00006 != x_00009_00006)=tv=SATLiteral(1338))
-1022 1157 1338 0
-1024 1159 1338 0
-1026 1161 1338 0
-1028 1163 1338 0
-1030 1165 1338 0
-1032 1167 1338 0
-1034 1169 1338 0
-1036 1171 1338 0
1035 -1170 1338 0
-1157 1022 1338 0
-1159 1024 1338 0
-1161 1026 1338 0
-1163 1028 1338 0
-1165 1030 1338 0
-1167 1032 1338 0
-1169 1034 1338 0
-1171 1036 1338 0
1170 -1035 1338 0
-1022 -1157 -1338 0
-1024 -1159 -1338 0
-1026 -1161 -1338 0
-1028 -1163 -1338 0
-1030 -1165 -1338 0
-1032 -1167 -1338 0
-1034 -1169 -1338 0
-1036 -1171 -1338 0
1035 1170 -1338 0
c ((x_00009_00001 != x_00009_00002)=tv=SATLiteral(1339))
-1082 1097 1339 0
-1084 1099 1339 0
-1086 1101 1339 0
-1088 1103 1339 0
-1090 1105 1339 0
-1092 1107 1339 0
-1094 1109 1339 0
-1096 1111 1339 0
1095 -1110 1339 0
-1097 1082 1339 0
-1099 1084 1339 0
-1101 1086 1339 0
-1103 1088 1339 0
-1105 1090 1339 0
-1107 1092 1339 0
-1109 1094 1339 0
-1111 1096 1339 0
1110 -1095 1339 0
-1082 -1097 -1339 0
-1084 -1099 -1339 0
-1086 -1101 -1339 0
-1088 -1103 -1339 0
-1090 -1105 -1339 0
-1092 -1107 -1339 0
-1094 -1109 -1339 0
-1096 -1111 -1339 0
1095 1110 -1339 0
c ((x_00009_00003 != x_00009_00004)=tv=SATLiteral(1340))
-1112 1127 1340 0
-1114 1129 1340 0
-1116 1131 1340 0
-1118 1133 1340 0
-1120 1135 1340 0
-1122 1137 1340 0
-1124 1139 1340 0
-1126 1141 1340 0
1125 -1140 1340 0
-1127 1112 1340 0
-1129 1114 1340 0
-1131 1116 1340 0
-1133 1118 1340 0
-1135 1120 1340 0
-1137 1122 1340 0
-1139 1124 1340 0
-1141 1126 1340 0
1140 -1125 1340 0
-1112 -1127 -1340 0
-1114 -1129 -1340 0
-1116 -1131 -1340 0
-1118 -1133 -1340 0
-1120 -1135 -1340 0
-1122 -1137 -1340 0
-1124 -1139 -1340 0
-1126 -1141 -1340 0
1125 1140 -1340 0
c ((SATLiteral(8031) /\ SATLiteral(8032))=tv=SATLiteral(1341))
1341 -8031 -8032 0
8031 -1341 0
8032 -1341 0
c ((SATLiteral(8033) /\ SATLiteral(8034))=tv=SATLiteral(1342))
1342 -8033 -8034 0
8033 -1342 0
8034 -1342 0
c ((SATLiteral(8035) /\ SATLiteral(8036))=tv=SATLiteral(1343))
1343 -8035 -8036 0
8035 -1343 0
8036 -1343 0
c ((SATLiteral(8037) /\ SATLiteral(8038))=tv=SATLiteral(1344))
1344 -8037 -8038 0
8037 -1344 0
8038 -1344 0
c ((SATLiteral(8039) /\ SATLiteral(8040))=tv=SATLiteral(1345))
1345 -8039 -8040 0
8039 -1345 0
8040 -1345 0
c ((SATLiteral(8041) /\ SATLiteral(8042))=tv=SATLiteral(1346))
1346 -8041 -8042 0
8041 -1346 0
8042 -1346 0
c ((SATLiteral(8043) /\ SATLiteral(8044))=tv=SATLiteral(1347))
1347 -8043 -8044 0
8043 -1347 0
8044 -1347 0
c ((SATLiteral(8045) /\ SATLiteral(8046))=tv=SATLiteral(1348))
1348 -8045 -8046 0
8045 -1348 0
8046 -1348 0
c ((SATLiteral(8047) /\ SATLiteral(8048))=tv=SATLiteral(1349))
1349 -8047 -8048 0
8047 -1349 0
8048 -1349 0
c ((SATLiteral(8049) /\ SATLiteral(8050))=tv=SATLiteral(1350))
1350 -8049 -8050 0
8049 -1350 0
8050 -1350 0
c ((SATLiteral(8051) /\ SATLiteral(8052))=tv=SATLiteral(1351))
1351 -8051 -8052 0
8051 -1351 0
8052 -1351 0
c ((SATLiteral(8053) /\ SATLiteral(8054))=tv=SATLiteral(1352))
1352 -8053 -8054 0
8053 -1352 0
8054 -1352 0
c ((SATLiteral(8055) /\ SATLiteral(8056))=tv=SATLiteral(1353))
1353 -8055 -8056 0
8055 -1353 0
8056 -1353 0
c ((SATLiteral(8057) /\ SATLiteral(8058))=tv=SATLiteral(1354))
1354 -8057 -8058 0
8057 -1354 0
8058 -1354 0
c ((SATLiteral(8059) /\ SATLiteral(8060))=tv=SATLiteral(1355))
1355 -8059 -8060 0
8059 -1355 0
8060 -1355 0
c ((SATLiteral(8061) /\ SATLiteral(8062))=tv=SATLiteral(1356))
1356 -8061 -8062 0
8061 -1356 0
8062 -1356 0
c ((SATLiteral(8063) /\ SATLiteral(8064))=tv=SATLiteral(1357))
1357 -8063 -8064 0
8063 -1357 0
8064 -1357 0
c ((SATLiteral(8065) /\ SATLiteral(8066))=tv=SATLiteral(1358))
1358 -8065 -8066 0
8065 -1358 0
8066 -1358 0
c ((SATLiteral(8067) /\ SATLiteral(8068))=tv=SATLiteral(1359))
1359 -8067 -8068 0
8067 -1359 0
8068 -1359 0
c ((SATLiteral(8069) /\ SATLiteral(8070))=tv=SATLiteral(1360))
1360 -8069 -8070 0
8069 -1360 0
8070 -1360 0
c ((SATLiteral(8071) /\ SATLiteral(8072))=tv=SATLiteral(1361))
1361 -8071 -8072 0
8071 -1361 0
8072 -1361 0
c ((SATLiteral(8073) /\ SATLiteral(8074))=tv=SATLiteral(1362))
1362 -8073 -8074 0
8073 -1362 0
8074 -1362 0
c ((SATLiteral(8075) /\ SATLiteral(8076))=tv=SATLiteral(1363))
1363 -8075 -8076 0
8075 -1363 0
8076 -1363 0
c ((SATLiteral(8077) /\ SATLiteral(8078))=tv=SATLiteral(1364))
1364 -8077 -8078 0
8077 -1364 0
8078 -1364 0
c ((SATLiteral(8079) /\ SATLiteral(8080))=tv=SATLiteral(1365))
1365 -8079 -8080 0
8079 -1365 0
8080 -1365 0
c ((SATLiteral(8081) /\ SATLiteral(8082))=tv=SATLiteral(1366))
1366 -8081 -8082 0
8081 -1366 0
8082 -1366 0
c ((SATLiteral(8083) /\ SATLiteral(8084))=tv=SATLiteral(1367))
1367 -8083 -8084 0
8083 -1367 0
8084 -1367 0
c ((SATLiteral(8085) /\ SATLiteral(8086))=tv=SATLiteral(1368))
1368 -8085 -8086 0
8085 -1368 0
8086 -1368 0
c ((SATLiteral(8087) /\ SATLiteral(8088))=tv=SATLiteral(1369))
1369 -8087 -8088 0
8087 -1369 0
8088 -1369 0
c ((SATLiteral(8089) /\ SATLiteral(8090))=tv=SATLiteral(1370))
1370 -8089 -8090 0
8089 -1370 0
8090 -1370 0
c ((SATLiteral(8091) /\ SATLiteral(8092))=tv=SATLiteral(1371))
1371 -8091 -8092 0
8091 -1371 0
8092 -1371 0
c ((SATLiteral(8093) /\ SATLiteral(8094))=tv=SATLiteral(1372))
1372 -8093 -8094 0
8093 -1372 0
8094 -1372 0
c ((SATLiteral(8095) /\ SATLiteral(8096))=tv=SATLiteral(1373))
1373 -8095 -8096 0
8095 -1373 0
8096 -1373 0
c ((SATLiteral(8097) /\ SATLiteral(8098))=tv=SATLiteral(1374))
1374 -8097 -8098 0
8097 -1374 0
8098 -1374 0
c ((SATLiteral(8099) /\ SATLiteral(8100))=tv=SATLiteral(1375))
1375 -8099 -8100 0
8099 -1375 0
8100 -1375 0
c ((SATLiteral(8101) /\ SATLiteral(8102))=tv=SATLiteral(1376))
1376 -8101 -8102 0
8101 -1376 0
8102 -1376 0
c ((SATLiteral(8103) /\ SATLiteral(8104))=tv=SATLiteral(1377))
1377 -8103 -8104 0
8103 -1377 0
8104 -1377 0
c ((SATLiteral(8105) /\ SATLiteral(8106))=tv=SATLiteral(1378))
1378 -8105 -8106 0
8105 -1378 0
8106 -1378 0
c ((SATLiteral(8107) /\ SATLiteral(8108))=tv=SATLiteral(1379))
1379 -8107 -8108 0
8107 -1379 0
8108 -1379 0
c ((SATLiteral(8109) /\ SATLiteral(8110))=tv=SATLiteral(1380))
1380 -8109 -8110 0
8109 -1380 0
8110 -1380 0
c ((SATLiteral(8111) /\ SATLiteral(8112))=tv=SATLiteral(1381))
1381 -8111 -8112 0
8111 -1381 0
8112 -1381 0
c ((SATLiteral(8113) /\ SATLiteral(8114))=tv=SATLiteral(1382))
1382 -8113 -8114 0
8113 -1382 0
8114 -1382 0
c ((SATLiteral(8115) /\ SATLiteral(8116))=tv=SATLiteral(1383))
1383 -8115 -8116 0
8115 -1383 0
8116 -1383 0
c ((SATLiteral(8117) /\ SATLiteral(8118))=tv=SATLiteral(1384))
1384 -8117 -8118 0
8117 -1384 0
8118 -1384 0
c ((SATLiteral(8119) /\ SATLiteral(8120))=tv=SATLiteral(1385))
1385 -8119 -8120 0
8119 -1385 0
8120 -1385 0
c ((SATLiteral(8121) /\ SATLiteral(8122))=tv=SATLiteral(1386))
1386 -8121 -8122 0
8121 -1386 0
8122 -1386 0
c ((SATLiteral(8123) /\ SATLiteral(8124))=tv=SATLiteral(1387))
1387 -8123 -8124 0
8123 -1387 0
8124 -1387 0
c ((SATLiteral(8125) /\ SATLiteral(8126))=tv=SATLiteral(1388))
1388 -8125 -8126 0
8125 -1388 0
8126 -1388 0
c ((SATLiteral(8127) /\ SATLiteral(8128))=tv=SATLiteral(1389))
1389 -8127 -8128 0
8127 -1389 0
8128 -1389 0
c ((SATLiteral(8129) /\ SATLiteral(8130))=tv=SATLiteral(1390))
1390 -8129 -8130 0
8129 -1390 0
8130 -1390 0
c ((SATLiteral(8131) /\ SATLiteral(8132))=tv=SATLiteral(1391))
1391 -8131 -8132 0
8131 -1391 0
8132 -1391 0
c ((SATLiteral(8133) /\ SATLiteral(8134))=tv=SATLiteral(1392))
1392 -8133 -8134 0
8133 -1392 0
8134 -1392 0
c ((SATLiteral(8135) /\ SATLiteral(8136))=tv=SATLiteral(1393))
1393 -8135 -8136 0
8135 -1393 0
8136 -1393 0
c ((SATLiteral(8137) /\ SATLiteral(8138))=tv=SATLiteral(1394))
1394 -8137 -8138 0
8137 -1394 0
8138 -1394 0
c ((SATLiteral(8139) /\ SATLiteral(8140))=tv=SATLiteral(1395))
1395 -8139 -8140 0
8139 -1395 0
8140 -1395 0
c ((SATLiteral(8141) /\ SATLiteral(8142))=tv=SATLiteral(1396))
1396 -8141 -8142 0
8141 -1396 0
8142 -1396 0
c ((SATLiteral(8143) /\ SATLiteral(8144))=tv=SATLiteral(1397))
1397 -8143 -8144 0
8143 -1397 0
8144 -1397 0
c ((SATLiteral(8145) /\ SATLiteral(8146))=tv=SATLiteral(1398))
1398 -8145 -8146 0
8145 -1398 0
8146 -1398 0
c ((SATLiteral(8147) /\ SATLiteral(8148))=tv=SATLiteral(1399))
1399 -8147 -8148 0
8147 -1399 0
8148 -1399 0
c ((SATLiteral(8149) /\ SATLiteral(8150))=tv=SATLiteral(1400))
1400 -8149 -8150 0
8149 -1400 0
8150 -1400 0
c ((SATLiteral(8151) /\ SATLiteral(8152))=tv=SATLiteral(1401))
1401 -8151 -8152 0
8151 -1401 0
8152 -1401 0
c ((SATLiteral(8153) /\ SATLiteral(8154))=tv=SATLiteral(1402))
1402 -8153 -8154 0
8153 -1402 0
8154 -1402 0
c ((SATLiteral(8155) /\ SATLiteral(8156))=tv=SATLiteral(1403))
1403 -8155 -8156 0
8155 -1403 0
8156 -1403 0
c ((SATLiteral(8157) /\ SATLiteral(8158))=tv=SATLiteral(1404))
1404 -8157 -8158 0
8157 -1404 0
8158 -1404 0
c ((SATLiteral(8159) /\ SATLiteral(8160))=tv=SATLiteral(1405))
1405 -8159 -8160 0
8159 -1405 0
8160 -1405 0
c ((SATLiteral(8161) /\ SATLiteral(8162))=tv=SATLiteral(1406))
1406 -8161 -8162 0
8161 -1406 0
8162 -1406 0
c ((SATLiteral(8163) /\ SATLiteral(8164))=tv=SATLiteral(1407))
1407 -8163 -8164 0
8163 -1407 0
8164 -1407 0
c ((SATLiteral(8165) /\ SATLiteral(8166))=tv=SATLiteral(1408))
1408 -8165 -8166 0
8165 -1408 0
8166 -1408 0
c ((SATLiteral(8167) /\ SATLiteral(8168))=tv=SATLiteral(1409))
1409 -8167 -8168 0
8167 -1409 0
8168 -1409 0
c ((SATLiteral(8169) /\ SATLiteral(8170))=tv=SATLiteral(1410))
1410 -8169 -8170 0
8169 -1410 0
8170 -1410 0
c ((SATLiteral(8171) /\ SATLiteral(8172))=tv=SATLiteral(1411))
1411 -8171 -8172 0
8171 -1411 0
8172 -1411 0
c ((SATLiteral(8173) /\ SATLiteral(8174))=tv=SATLiteral(1412))
1412 -8173 -8174 0
8173 -1412 0
8174 -1412 0
c ((SATLiteral(8175) /\ SATLiteral(8176))=tv=SATLiteral(1413))
1413 -8175 -8176 0
8175 -1413 0
8176 -1413 0
c ((SATLiteral(8177) /\ SATLiteral(8178))=tv=SATLiteral(1414))
1414 -8177 -8178 0
8177 -1414 0
8178 -1414 0
c ((SATLiteral(8179) /\ SATLiteral(8180))=tv=SATLiteral(1415))
1415 -8179 -8180 0
8179 -1415 0
8180 -1415 0
c ((SATLiteral(8181) /\ SATLiteral(8182))=tv=SATLiteral(1416))
1416 -8181 -8182 0
8181 -1416 0
8182 -1416 0
c ((SATLiteral(8183) /\ SATLiteral(8184))=tv=SATLiteral(1417))
1417 -8183 -8184 0
8183 -1417 0
8184 -1417 0
c ((SATLiteral(8185) /\ SATLiteral(8186))=tv=SATLiteral(1418))
1418 -8185 -8186 0
8185 -1418 0
8186 -1418 0
c ((SATLiteral(8187) /\ SATLiteral(8188))=tv=SATLiteral(1419))
1419 -8187 -8188 0
8187 -1419 0
8188 -1419 0
c ((SATLiteral(8189) /\ SATLiteral(8190))=tv=SATLiteral(1420))
1420 -8189 -8190 0
8189 -1420 0
8190 -1420 0
c ((SATLiteral(8191) /\ SATLiteral(8192))=tv=SATLiteral(1421))
1421 -8191 -8192 0
8191 -1421 0
8192 -1421 0
c ((SATLiteral(8193) /\ SATLiteral(8194))=tv=SATLiteral(1422))
1422 -8193 -8194 0
8193 -1422 0
8194 -1422 0
c ((SATLiteral(8195) /\ SATLiteral(8196))=tv=SATLiteral(1423))
1423 -8195 -8196 0
8195 -1423 0
8196 -1423 0
c ((SATLiteral(8197) /\ SATLiteral(8198))=tv=SATLiteral(1424))
1424 -8197 -8198 0
8197 -1424 0
8198 -1424 0
c ((SATLiteral(8199) /\ SATLiteral(8200))=tv=SATLiteral(1425))
1425 -8199 -8200 0
8199 -1425 0
8200 -1425 0
c ((SATLiteral(8201) /\ SATLiteral(8202))=tv=SATLiteral(1426))
1426 -8201 -8202 0
8201 -1426 0
8202 -1426 0
c ((SATLiteral(8203) /\ SATLiteral(8204))=tv=SATLiteral(1427))
1427 -8203 -8204 0
8203 -1427 0
8204 -1427 0
c ((SATLiteral(8205) /\ SATLiteral(8206))=tv=SATLiteral(1428))
1428 -8205 -8206 0
8205 -1428 0
8206 -1428 0
c ((SATLiteral(8207) /\ SATLiteral(8208))=tv=SATLiteral(1429))
1429 -8207 -8208 0
8207 -1429 0
8208 -1429 0
c ((SATLiteral(8209) /\ SATLiteral(8210))=tv=SATLiteral(1430))
1430 -8209 -8210 0
8209 -1430 0
8210 -1430 0
c ((SATLiteral(8211) /\ SATLiteral(8212))=tv=SATLiteral(1431))
1431 -8211 -8212 0
8211 -1431 0
8212 -1431 0
c ((SATLiteral(8213) /\ SATLiteral(8214))=tv=SATLiteral(1432))
1432 -8213 -8214 0
8213 -1432 0
8214 -1432 0
c ((SATLiteral(8215) /\ SATLiteral(8216))=tv=SATLiteral(1433))
1433 -8215 -8216 0
8215 -1433 0
8216 -1433 0
c ((SATLiteral(8217) /\ SATLiteral(8218))=tv=SATLiteral(1434))
1434 -8217 -8218 0
8217 -1434 0
8218 -1434 0
c ((SATLiteral(8219) /\ SATLiteral(8220))=tv=SATLiteral(1435))
1435 -8219 -8220 0
8219 -1435 0
8220 -1435 0
c ((SATLiteral(8221) /\ SATLiteral(8222))=tv=SATLiteral(1436))
1436 -8221 -8222 0
8221 -1436 0
8222 -1436 0
c ((SATLiteral(8223) /\ SATLiteral(8224))=tv=SATLiteral(1437))
1437 -8223 -8224 0
8223 -1437 0
8224 -1437 0
c ((SATLiteral(8225) /\ SATLiteral(8226))=tv=SATLiteral(1438))
1438 -8225 -8226 0
8225 -1438 0
8226 -1438 0
c ((SATLiteral(8227) /\ SATLiteral(8228))=tv=SATLiteral(1439))
1439 -8227 -8228 0
8227 -1439 0
8228 -1439 0
c ((SATLiteral(8229) /\ SATLiteral(8230))=tv=SATLiteral(1440))
1440 -8229 -8230 0
8229 -1440 0
8230 -1440 0
c ((SATLiteral(8231) /\ SATLiteral(8232))=tv=SATLiteral(1441))
1441 -8231 -8232 0
8231 -1441 0
8232 -1441 0
c ((SATLiteral(8233) /\ SATLiteral(8234))=tv=SATLiteral(1442))
1442 -8233 -8234 0
8233 -1442 0
8234 -1442 0
c ((SATLiteral(8235) /\ SATLiteral(8236))=tv=SATLiteral(1443))
1443 -8235 -8236 0
8235 -1443 0
8236 -1443 0
c ((SATLiteral(8237) /\ SATLiteral(8238))=tv=SATLiteral(1444))
1444 -8237 -8238 0
8237 -1444 0
8238 -1444 0
c ((SATLiteral(8239) /\ SATLiteral(8240))=tv=SATLiteral(1445))
1445 -8239 -8240 0
8239 -1445 0
8240 -1445 0
c ((SATLiteral(8241) /\ SATLiteral(8242))=tv=SATLiteral(1446))
1446 -8241 -8242 0
8241 -1446 0
8242 -1446 0
c ((SATLiteral(8243) /\ SATLiteral(8244))=tv=SATLiteral(1447))
1447 -8243 -8244 0
8243 -1447 0
8244 -1447 0
c ((SATLiteral(8245) /\ SATLiteral(8246))=tv=SATLiteral(1448))
1448 -8245 -8246 0
8245 -1448 0
8246 -1448 0
c ((SATLiteral(8247) /\ SATLiteral(8248))=tv=SATLiteral(1449))
1449 -8247 -8248 0
8247 -1449 0
8248 -1449 0
c ((SATLiteral(8249) /\ SATLiteral(8250))=tv=SATLiteral(1450))
1450 -8249 -8250 0
8249 -1450 0
8250 -1450 0
c ((SATLiteral(8251) /\ SATLiteral(8252))=tv=SATLiteral(1451))
1451 -8251 -8252 0
8251 -1451 0
8252 -1451 0
c ((SATLiteral(8253) /\ SATLiteral(8254))=tv=SATLiteral(1452))
1452 -8253 -8254 0
8253 -1452 0
8254 -1452 0
c ((SATLiteral(8255) /\ SATLiteral(8256))=tv=SATLiteral(1453))
1453 -8255 -8256 0
8255 -1453 0
8256 -1453 0
c ((SATLiteral(8257) /\ SATLiteral(8258))=tv=SATLiteral(1454))
1454 -8257 -8258 0
8257 -1454 0
8258 -1454 0
c ((SATLiteral(8259) /\ SATLiteral(8260))=tv=SATLiteral(1455))
1455 -8259 -8260 0
8259 -1455 0
8260 -1455 0
c ((SATLiteral(8261) /\ SATLiteral(8262))=tv=SATLiteral(1456))
1456 -8261 -8262 0
8261 -1456 0
8262 -1456 0
c ((SATLiteral(8263) /\ SATLiteral(8264))=tv=SATLiteral(1457))
1457 -8263 -8264 0
8263 -1457 0
8264 -1457 0
c ((SATLiteral(8265) /\ SATLiteral(8266))=tv=SATLiteral(1458))
1458 -8265 -8266 0
8265 -1458 0
8266 -1458 0
c ((SATLiteral(8267) /\ SATLiteral(8268))=tv=SATLiteral(1459))
1459 -8267 -8268 0
8267 -1459 0
8268 -1459 0
c ((SATLiteral(8269) /\ SATLiteral(8270))=tv=SATLiteral(1460))
1460 -8269 -8270 0
8269 -1460 0
8270 -1460 0
c ((SATLiteral(8271) /\ SATLiteral(8272))=tv=SATLiteral(1461))
1461 -8271 -8272 0
8271 -1461 0
8272 -1461 0
c ((SATLiteral(8273) /\ SATLiteral(8274))=tv=SATLiteral(1462))
1462 -8273 -8274 0
8273 -1462 0
8274 -1462 0
c ((SATLiteral(8275) /\ SATLiteral(8276))=tv=SATLiteral(1463))
1463 -8275 -8276 0
8275 -1463 0
8276 -1463 0
c ((SATLiteral(8277) /\ SATLiteral(8278))=tv=SATLiteral(1464))
1464 -8277 -8278 0
8277 -1464 0
8278 -1464 0
c ((SATLiteral(8279) /\ SATLiteral(8280))=tv=SATLiteral(1465))
1465 -8279 -8280 0
8279 -1465 0
8280 -1465 0
c ((SATLiteral(8281) /\ SATLiteral(8282))=tv=SATLiteral(1466))
1466 -8281 -8282 0
8281 -1466 0
8282 -1466 0
c ((SATLiteral(8283) /\ SATLiteral(8284))=tv=SATLiteral(1467))
1467 -8283 -8284 0
8283 -1467 0
8284 -1467 0
c ((SATLiteral(8285) /\ SATLiteral(8286))=tv=SATLiteral(1468))
1468 -8285 -8286 0
8285 -1468 0
8286 -1468 0
c ((SATLiteral(8287) /\ SATLiteral(8288))=tv=SATLiteral(1469))
1469 -8287 -8288 0
8287 -1469 0
8288 -1469 0
c ((SATLiteral(8289) /\ SATLiteral(8290))=tv=SATLiteral(1470))
1470 -8289 -8290 0
8289 -1470 0
8290 -1470 0
c ((SATLiteral(8291) /\ SATLiteral(8292))=tv=SATLiteral(1471))
1471 -8291 -8292 0
8291 -1471 0
8292 -1471 0
c ((SATLiteral(8293) /\ SATLiteral(8294))=tv=SATLiteral(1472))
1472 -8293 -8294 0
8293 -1472 0
8294 -1472 0
c ((SATLiteral(8295) /\ SATLiteral(8296))=tv=SATLiteral(1473))
1473 -8295 -8296 0
8295 -1473 0
8296 -1473 0
c ((SATLiteral(8297) /\ SATLiteral(8298))=tv=SATLiteral(1474))
1474 -8297 -8298 0
8297 -1474 0
8298 -1474 0
c ((SATLiteral(8299) /\ SATLiteral(8300))=tv=SATLiteral(1475))
1475 -8299 -8300 0
8299 -1475 0
8300 -1475 0
c ((SATLiteral(8301) /\ SATLiteral(8302))=tv=SATLiteral(1476))
1476 -8301 -8302 0
8301 -1476 0
8302 -1476 0
c ((SATLiteral(8303) /\ SATLiteral(8304))=tv=SATLiteral(1477))
1477 -8303 -8304 0
8303 -1477 0
8304 -1477 0
c ((SATLiteral(8305) /\ SATLiteral(8306))=tv=SATLiteral(1478))
1478 -8305 -8306 0
8305 -1478 0
8306 -1478 0
c ((SATLiteral(8307) /\ SATLiteral(8308))=tv=SATLiteral(1479))
1479 -8307 -8308 0
8307 -1479 0
8308 -1479 0
c ((SATLiteral(8309) /\ SATLiteral(8310))=tv=SATLiteral(1480))
1480 -8309 -8310 0
8309 -1480 0
8310 -1480 0
c ((SATLiteral(8311) /\ SATLiteral(8312))=tv=SATLiteral(1481))
1481 -8311 -8312 0
8311 -1481 0
8312 -1481 0
c ((SATLiteral(8313) /\ SATLiteral(8314))=tv=SATLiteral(1482))
1482 -8313 -8314 0
8313 -1482 0
8314 -1482 0
c ((SATLiteral(8315) /\ SATLiteral(8316))=tv=SATLiteral(1483))
1483 -8315 -8316 0
8315 -1483 0
8316 -1483 0
c ((SATLiteral(8317) /\ SATLiteral(8318))=tv=SATLiteral(1484))
1484 -8317 -8318 0
8317 -1484 0
8318 -1484 0
c ((SATLiteral(8319) /\ SATLiteral(8320))=tv=SATLiteral(1485))
1485 -8319 -8320 0
8319 -1485 0
8320 -1485 0
c ((SATLiteral(8321) /\ SATLiteral(8322))=tv=SATLiteral(1486))
1486 -8321 -8322 0
8321 -1486 0
8322 -1486 0
c ((SATLiteral(8323) /\ SATLiteral(8324))=tv=SATLiteral(1487))
1487 -8323 -8324 0
8323 -1487 0
8324 -1487 0
c ((SATLiteral(8325) /\ SATLiteral(8326))=tv=SATLiteral(1488))
1488 -8325 -8326 0
8325 -1488 0
8326 -1488 0
c ((SATLiteral(8327) /\ SATLiteral(8328))=tv=SATLiteral(1489))
1489 -8327 -8328 0
8327 -1489 0
8328 -1489 0
c ((SATLiteral(8329) /\ SATLiteral(8330))=tv=SATLiteral(1490))
1490 -8329 -8330 0
8329 -1490 0
8330 -1490 0
c ((SATLiteral(8331) /\ SATLiteral(8332))=tv=SATLiteral(1491))
1491 -8331 -8332 0
8331 -1491 0
8332 -1491 0
c ((SATLiteral(8333) /\ SATLiteral(8334))=tv=SATLiteral(1492))
1492 -8333 -8334 0
8333 -1492 0
8334 -1492 0
c ((SATLiteral(8335) /\ SATLiteral(8336))=tv=SATLiteral(1493))
1493 -8335 -8336 0
8335 -1493 0
8336 -1493 0
c ((SATLiteral(8337) /\ SATLiteral(8338))=tv=SATLiteral(1494))
1494 -8337 -8338 0
8337 -1494 0
8338 -1494 0
c ((SATLiteral(8339) /\ SATLiteral(8340))=tv=SATLiteral(1495))
1495 -8339 -8340 0
8339 -1495 0
8340 -1495 0
c ((SATLiteral(8341) /\ SATLiteral(8342))=tv=SATLiteral(1496))
1496 -8341 -8342 0
8341 -1496 0
8342 -1496 0
c ((SATLiteral(8343) /\ SATLiteral(8344))=tv=SATLiteral(1497))
1497 -8343 -8344 0
8343 -1497 0
8344 -1497 0
c ((SATLiteral(8345) /\ SATLiteral(8346))=tv=SATLiteral(1498))
1498 -8345 -8346 0
8345 -1498 0
8346 -1498 0
c ((SATLiteral(8347) /\ SATLiteral(8348))=tv=SATLiteral(1499))
1499 -8347 -8348 0
8347 -1499 0
8348 -1499 0
c ((SATLiteral(8349) /\ SATLiteral(8350))=tv=SATLiteral(1500))
1500 -8349 -8350 0
8349 -1500 0
8350 -1500 0
c ((SATLiteral(8351) /\ SATLiteral(8352))=tv=SATLiteral(1501))
1501 -8351 -8352 0
8351 -1501 0
8352 -1501 0
c ((SATLiteral(8353) /\ SATLiteral(8354))=tv=SATLiteral(1502))
1502 -8353 -8354 0
8353 -1502 0
8354 -1502 0
c ((SATLiteral(8355) /\ SATLiteral(8356))=tv=SATLiteral(1503))
1503 -8355 -8356 0
8355 -1503 0
8356 -1503 0
c ((SATLiteral(8357) /\ SATLiteral(8358))=tv=SATLiteral(1504))
1504 -8357 -8358 0
8357 -1504 0
8358 -1504 0
c ((SATLiteral(8359) /\ SATLiteral(8360))=tv=SATLiteral(1505))
1505 -8359 -8360 0
8359 -1505 0
8360 -1505 0
c ((SATLiteral(8361) /\ SATLiteral(8362))=tv=SATLiteral(1506))
1506 -8361 -8362 0
8361 -1506 0
8362 -1506 0
c ((SATLiteral(8363) /\ SATLiteral(8364))=tv=SATLiteral(1507))
1507 -8363 -8364 0
8363 -1507 0
8364 -1507 0
c ((SATLiteral(8365) /\ SATLiteral(8366))=tv=SATLiteral(1508))
1508 -8365 -8366 0
8365 -1508 0
8366 -1508 0
c ((SATLiteral(8367) /\ SATLiteral(8368))=tv=SATLiteral(1509))
1509 -8367 -8368 0
8367 -1509 0
8368 -1509 0
c ((SATLiteral(8369) /\ SATLiteral(8370))=tv=SATLiteral(1510))
1510 -8369 -8370 0
8369 -1510 0
8370 -1510 0
c ((SATLiteral(8371) /\ SATLiteral(8372))=tv=SATLiteral(1511))
1511 -8371 -8372 0
8371 -1511 0
8372 -1511 0
c ((SATLiteral(8373) /\ SATLiteral(8374))=tv=SATLiteral(1512))
1512 -8373 -8374 0
8373 -1512 0
8374 -1512 0
c ((SATLiteral(8375) /\ SATLiteral(8376))=tv=SATLiteral(1513))
1513 -8375 -8376 0
8375 -1513 0
8376 -1513 0
c ((SATLiteral(8377) /\ SATLiteral(8378))=tv=SATLiteral(1514))
1514 -8377 -8378 0
8377 -1514 0
8378 -1514 0
c ((SATLiteral(8379) /\ SATLiteral(8380))=tv=SATLiteral(1515))
1515 -8379 -8380 0
8379 -1515 0
8380 -1515 0
c ((SATLiteral(8381) /\ SATLiteral(8382))=tv=SATLiteral(1516))
1516 -8381 -8382 0
8381 -1516 0
8382 -1516 0
c ((SATLiteral(8383) /\ SATLiteral(8384))=tv=SATLiteral(1517))
1517 -8383 -8384 0
8383 -1517 0
8384 -1517 0
c ((SATLiteral(8385) /\ SATLiteral(8386))=tv=SATLiteral(1518))
1518 -8385 -8386 0
8385 -1518 0
8386 -1518 0
c ((SATLiteral(8387) /\ SATLiteral(8388))=tv=SATLiteral(1519))
1519 -8387 -8388 0
8387 -1519 0
8388 -1519 0
c ((SATLiteral(8389) /\ SATLiteral(8390))=tv=SATLiteral(1520))
1520 -8389 -8390 0
8389 -1520 0
8390 -1520 0
c ((SATLiteral(8391) /\ SATLiteral(8392))=tv=SATLiteral(1521))
1521 -8391 -8392 0
8391 -1521 0
8392 -1521 0
c ((SATLiteral(8393) /\ SATLiteral(8394))=tv=SATLiteral(1522))
1522 -8393 -8394 0
8393 -1522 0
8394 -1522 0
c ((SATLiteral(8395) /\ SATLiteral(8396))=tv=SATLiteral(1523))
1523 -8395 -8396 0
8395 -1523 0
8396 -1523 0
c ((SATLiteral(8397) /\ SATLiteral(8398))=tv=SATLiteral(1524))
1524 -8397 -8398 0
8397 -1524 0
8398 -1524 0
c ((SATLiteral(8399) /\ SATLiteral(8400))=tv=SATLiteral(1525))
1525 -8399 -8400 0
8399 -1525 0
8400 -1525 0
c ((SATLiteral(8401) /\ SATLiteral(8402))=tv=SATLiteral(1526))
1526 -8401 -8402 0
8401 -1526 0
8402 -1526 0
c ((SATLiteral(8403) /\ SATLiteral(8404))=tv=SATLiteral(1527))
1527 -8403 -8404 0
8403 -1527 0
8404 -1527 0
c ((SATLiteral(8405) /\ SATLiteral(8406))=tv=SATLiteral(1528))
1528 -8405 -8406 0
8405 -1528 0
8406 -1528 0
c ((SATLiteral(8407) /\ SATLiteral(8408))=tv=SATLiteral(1529))
1529 -8407 -8408 0
8407 -1529 0
8408 -1529 0
c ((SATLiteral(8409) /\ SATLiteral(8410))=tv=SATLiteral(1530))
1530 -8409 -8410 0
8409 -1530 0
8410 -1530 0
c ((SATLiteral(8411) /\ SATLiteral(8412))=tv=SATLiteral(1531))
1531 -8411 -8412 0
8411 -1531 0
8412 -1531 0
c ((SATLiteral(8413) /\ SATLiteral(8414))=tv=SATLiteral(1532))
1532 -8413 -8414 0
8413 -1532 0
8414 -1532 0
c ((SATLiteral(8415) /\ SATLiteral(8416))=tv=SATLiteral(1533))
1533 -8415 -8416 0
8415 -1533 0
8416 -1533 0
c ((SATLiteral(8417) /\ SATLiteral(8418))=tv=SATLiteral(1534))
1534 -8417 -8418 0
8417 -1534 0
8418 -1534 0
c ((SATLiteral(8419) /\ SATLiteral(8420))=tv=SATLiteral(1535))
1535 -8419 -8420 0
8419 -1535 0
8420 -1535 0
c ((SATLiteral(8421) /\ SATLiteral(8422))=tv=SATLiteral(1536))
1536 -8421 -8422 0
8421 -1536 0
8422 -1536 0
c ((SATLiteral(8423) /\ SATLiteral(8424))=tv=SATLiteral(1537))
1537 -8423 -8424 0
8423 -1537 0
8424 -1537 0
c ((SATLiteral(8425) /\ SATLiteral(8426))=tv=SATLiteral(1538))
1538 -8425 -8426 0
8425 -1538 0
8426 -1538 0
c ((SATLiteral(8427) /\ SATLiteral(8428))=tv=SATLiteral(1539))
1539 -8427 -8428 0
8427 -1539 0
8428 -1539 0
c ((SATLiteral(8429) /\ SATLiteral(8430))=tv=SATLiteral(1540))
1540 -8429 -8430 0
8429 -1540 0
8430 -1540 0
c ((SATLiteral(8431) /\ SATLiteral(8432))=tv=SATLiteral(1541))
1541 -8431 -8432 0
8431 -1541 0
8432 -1541 0
c ((SATLiteral(8433) /\ SATLiteral(8434))=tv=SATLiteral(1542))
1542 -8433 -8434 0
8433 -1542 0
8434 -1542 0
c ((SATLiteral(8435) /\ SATLiteral(8436))=tv=SATLiteral(1543))
1543 -8435 -8436 0
8435 -1543 0
8436 -1543 0
c ((SATLiteral(8437) /\ SATLiteral(8438))=tv=SATLiteral(1544))
1544 -8437 -8438 0
8437 -1544 0
8438 -1544 0
c ((SATLiteral(8439) /\ SATLiteral(8440))=tv=SATLiteral(1545))
1545 -8439 -8440 0
8439 -1545 0
8440 -1545 0
c ((SATLiteral(8441) /\ SATLiteral(8442))=tv=SATLiteral(1546))
1546 -8441 -8442 0
8441 -1546 0
8442 -1546 0
c ((SATLiteral(8443) /\ SATLiteral(8444))=tv=SATLiteral(1547))
1547 -8443 -8444 0
8443 -1547 0
8444 -1547 0
c ((SATLiteral(8445) /\ SATLiteral(8446))=tv=SATLiteral(1548))
1548 -8445 -8446 0
8445 -1548 0
8446 -1548 0
c ((SATLiteral(8447) /\ SATLiteral(8448))=tv=SATLiteral(1549))
1549 -8447 -8448 0
8447 -1549 0
8448 -1549 0
c ((SATLiteral(8449) /\ SATLiteral(8450))=tv=SATLiteral(1550))
1550 -8449 -8450 0
8449 -1550 0
8450 -1550 0
c ((SATLiteral(8451) /\ SATLiteral(8452))=tv=SATLiteral(1551))
1551 -8451 -8452 0
8451 -1551 0
8452 -1551 0
c ((SATLiteral(8453) /\ SATLiteral(8454))=tv=SATLiteral(1552))
1552 -8453 -8454 0
8453 -1552 0
8454 -1552 0
c ((SATLiteral(8455) /\ SATLiteral(8456))=tv=SATLiteral(1553))
1553 -8455 -8456 0
8455 -1553 0
8456 -1553 0
c ((SATLiteral(8457) /\ SATLiteral(8458))=tv=SATLiteral(1554))
1554 -8457 -8458 0
8457 -1554 0
8458 -1554 0
c ((SATLiteral(8459) /\ SATLiteral(8460))=tv=SATLiteral(1555))
1555 -8459 -8460 0
8459 -1555 0
8460 -1555 0
c ((SATLiteral(8461) /\ SATLiteral(8462))=tv=SATLiteral(1556))
1556 -8461 -8462 0
8461 -1556 0
8462 -1556 0
c ((SATLiteral(8463) /\ SATLiteral(8464))=tv=SATLiteral(1557))
1557 -8463 -8464 0
8463 -1557 0
8464 -1557 0
c ((SATLiteral(8465) /\ SATLiteral(8466))=tv=SATLiteral(1558))
1558 -8465 -8466 0
8465 -1558 0
8466 -1558 0
c ((SATLiteral(8467) /\ SATLiteral(8468))=tv=SATLiteral(1559))
1559 -8467 -8468 0
8467 -1559 0
8468 -1559 0
c ((SATLiteral(8469) /\ SATLiteral(8470))=tv=SATLiteral(1560))
1560 -8469 -8470 0
8469 -1560 0
8470 -1560 0
c ((SATLiteral(8471) /\ SATLiteral(8472))=tv=SATLiteral(1561))
1561 -8471 -8472 0
8471 -1561 0
8472 -1561 0
c ((SATLiteral(8473) /\ SATLiteral(8474))=tv=SATLiteral(1562))
1562 -8473 -8474 0
8473 -1562 0
8474 -1562 0
c ((SATLiteral(8475) /\ SATLiteral(8476))=tv=SATLiteral(1563))
1563 -8475 -8476 0
8475 -1563 0
8476 -1563 0
c ((SATLiteral(8477) /\ SATLiteral(8478))=tv=SATLiteral(1564))
1564 -8477 -8478 0
8477 -1564 0
8478 -1564 0
c ((SATLiteral(8479) /\ SATLiteral(8480))=tv=SATLiteral(1565))
1565 -8479 -8480 0
8479 -1565 0
8480 -1565 0
c ((SATLiteral(8481) /\ SATLiteral(8482))=tv=SATLiteral(1566))
1566 -8481 -8482 0
8481 -1566 0
8482 -1566 0
c ((SATLiteral(8483) /\ SATLiteral(8484))=tv=SATLiteral(1567))
1567 -8483 -8484 0
8483 -1567 0
8484 -1567 0
c ((SATLiteral(8485) /\ SATLiteral(8486))=tv=SATLiteral(1568))
1568 -8485 -8486 0
8485 -1568 0
8486 -1568 0
c ((SATLiteral(8487) /\ SATLiteral(8488))=tv=SATLiteral(1569))
1569 -8487 -8488 0
8487 -1569 0
8488 -1569 0
c ((SATLiteral(8489) /\ SATLiteral(8490))=tv=SATLiteral(1570))
1570 -8489 -8490 0
8489 -1570 0
8490 -1570 0
c ((SATLiteral(8491) /\ SATLiteral(8492))=tv=SATLiteral(1571))
1571 -8491 -8492 0
8491 -1571 0
8492 -1571 0
c ((SATLiteral(8493) /\ SATLiteral(8494))=tv=SATLiteral(1572))
1572 -8493 -8494 0
8493 -1572 0
8494 -1572 0
c ((SATLiteral(8495) /\ SATLiteral(8496))=tv=SATLiteral(1573))
1573 -8495 -8496 0
8495 -1573 0
8496 -1573 0
c ((SATLiteral(8497) /\ SATLiteral(8498))=tv=SATLiteral(1574))
1574 -8497 -8498 0
8497 -1574 0
8498 -1574 0
c ((SATLiteral(8499) /\ SATLiteral(8500))=tv=SATLiteral(1575))
1575 -8499 -8500 0
8499 -1575 0
8500 -1575 0
c ((SATLiteral(8501) /\ SATLiteral(8502))=tv=SATLiteral(1576))
1576 -8501 -8502 0
8501 -1576 0
8502 -1576 0
c ((SATLiteral(8503) /\ SATLiteral(8504))=tv=SATLiteral(1577))
1577 -8503 -8504 0
8503 -1577 0
8504 -1577 0
c ((SATLiteral(8505) /\ SATLiteral(8506))=tv=SATLiteral(1578))
1578 -8505 -8506 0
8505 -1578 0
8506 -1578 0
c ((SATLiteral(8507) /\ SATLiteral(8508))=tv=SATLiteral(1579))
1579 -8507 -8508 0
8507 -1579 0
8508 -1579 0
c ((SATLiteral(8509) /\ SATLiteral(8510))=tv=SATLiteral(1580))
1580 -8509 -8510 0
8509 -1580 0
8510 -1580 0
c ((SATLiteral(8511) /\ SATLiteral(8512))=tv=SATLiteral(1581))
1581 -8511 -8512 0
8511 -1581 0
8512 -1581 0
c ((SATLiteral(8513) /\ SATLiteral(8514))=tv=SATLiteral(1582))
1582 -8513 -8514 0
8513 -1582 0
8514 -1582 0
c ((SATLiteral(8515) /\ SATLiteral(8516))=tv=SATLiteral(1583))
1583 -8515 -8516 0
8515 -1583 0
8516 -1583 0
c (((aux1900 + aux1901 + SATLiteral(137))<=1)=tv=SATLiteral(1584))
-1584 7790 0
-1584 7786 7789 0
-1584 7787 0
-1584 -137 7789 0
-1584 -137 7786 0
-1584 -137 7787 0
1584 -7786 -7789 0
1584 137 -7787 -7789 0
1584 137 -7786 -7790 0
c (((aux1902 + aux1903 + SATLiteral(139))<=1)=tv=SATLiteral(1585))
-1585 7796 0
-1585 7792 7795 0
-1585 7793 0
-1585 -139 7795 0
-1585 -139 7792 0
-1585 -139 7793 0
1585 -7792 -7795 0
1585 139 -7793 -7795 0
1585 139 -7792 -7796 0
c (((aux1904 + aux1905 + SATLiteral(141))<=1)=tv=SATLiteral(1586))
-1586 7802 0
-1586 7798 7801 0
-1586 7799 0
-1586 -141 7801 0
-1586 -141 7798 0
-1586 -141 7799 0
1586 -7798 -7801 0
1586 141 -7799 -7801 0
1586 141 -7798 -7802 0
c (((aux1906 + aux1907 + SATLiteral(143))<=1)=tv=SATLiteral(1587))
-1587 7808 0
-1587 7804 7807 0
-1587 7805 0
-1587 -143 7807 0
-1587 -143 7804 0
-1587 -143 7805 0
1587 -7804 -7807 0
1587 143 -7805 -7807 0
1587 143 -7804 -7808 0
c (((aux1908 + aux1909 + SATLiteral(145))<=1)=tv=SATLiteral(1588))
-1588 7814 0
-1588 7810 7813 0
-1588 7811 0
-1588 -145 7813 0
-1588 -145 7810 0
-1588 -145 7811 0
1588 -7810 -7813 0
1588 145 -7811 -7813 0
1588 145 -7810 -7814 0
c (((aux1910 + aux1911 + SATLiteral(147))<=1)=tv=SATLiteral(1589))
-1589 7820 0
-1589 7816 7819 0
-1589 7817 0
-1589 -147 7819 0
-1589 -147 7816 0
-1589 -147 7817 0
1589 -7816 -7819 0
1589 147 -7817 -7819 0
1589 147 -7816 -7820 0
c (((aux1912 + aux1913 + SATLiteral(149))<=1)=tv=SATLiteral(1590))
-1590 7826 0
-1590 7822 7825 0
-1590 7823 0
-1590 -149 7825 0
-1590 -149 7822 0
-1590 -149 7823 0
1590 -7822 -7825 0
1590 149 -7823 -7825 0
1590 149 -7822 -7826 0
c (((aux1914 + aux1915 + SATLiteral(151))<=1)=tv=SATLiteral(1591))
-1591 7832 0
-1591 7828 7831 0
-1591 7829 0
-1591 -151 7831 0
-1591 -151 7828 0
-1591 -151 7829 0
1591 -7828 -7831 0
1591 151 -7829 -7831 0
1591 151 -7828 -7832 0
c (((aux1916 + aux1917 + SATLiteral(-150))<=1)=tv=SATLiteral(1592))
-1592 7838 0
-1592 7834 7837 0
-1592 7835 0
-1592 150 7837 0
-1592 150 7834 0
-1592 150 7835 0
1592 -7834 -7837 0
1592 -150 -7835 -7837 0
1592 -150 -7834 -7838 0
c (((SATLiteral(47) + SATLiteral(62) + aux1918)<=1)=tv=SATLiteral(1593))
-1593 7841 0
-1593 -62 7840 0
-1593 -47 7840 0
-1593 -47 -62 0
1593 62 -7840 0
1593 47 -7840 0
1593 47 62 -7841 0
c (((SATLiteral(49) + SATLiteral(64) + aux1919)<=1)=tv=SATLiteral(1594))
-1594 7844 0
-1594 -64 7843 0
-1594 -49 7843 0
-1594 -49 -64 0
1594 64 -7843 0
1594 49 -7843 0
1594 49 64 -7844 0
c (((SATLiteral(51) + SATLiteral(66) + aux1920)<=1)=tv=SATLiteral(1595))
-1595 7847 0
-1595 -66 7846 0
-1595 -51 7846 0
-1595 -51 -66 0
1595 66 -7846 0
1595 51 -7846 0
1595 51 66 -7847 0
c (((SATLiteral(53) + SATLiteral(68) + aux1921)<=1)=tv=SATLiteral(1596))
-1596 7850 0
-1596 -68 7849 0
-1596 -53 7849 0
-1596 -53 -68 0
1596 68 -7849 0
1596 53 -7849 0
1596 53 68 -7850 0
c (((SATLiteral(55) + SATLiteral(70) + aux1922)<=1)=tv=SATLiteral(1597))
-1597 7853 0
-1597 -70 7852 0
-1597 -55 7852 0
-1597 -55 -70 0
1597 70 -7852 0
1597 55 -7852 0
1597 55 70 -7853 0
c (((SATLiteral(57) + SATLiteral(72) + aux1923)<=1)=tv=SATLiteral(1598))
-1598 7856 0
-1598 -72 7855 0
-1598 -57 7855 0
-1598 -57 -72 0
1598 72 -7855 0
1598 57 -7855 0
1598 57 72 -7856 0
c (((SATLiteral(59) + SATLiteral(74) + aux1924)<=1)=tv=SATLiteral(1599))
-1599 7859 0
-1599 -74 7858 0
-1599 -59 7858 0
-1599 -59 -74 0
1599 74 -7858 0
1599 59 -7858 0
1599 59 74 -7859 0
c (((SATLiteral(61) + SATLiteral(76) + aux1925)<=1)=tv=SATLiteral(1600))
-1600 7862 0
-1600 -76 7861 0
-1600 -61 7861 0
-1600 -61 -76 0
1600 76 -7861 0
1600 61 -7861 0
1600 61 76 -7862 0
c (((SATLiteral(-60) + SATLiteral(-75) + aux1926)<=1)=tv=SATLiteral(1601))
-1601 7865 0
-1601 75 7864 0
-1601 60 7864 0
-1601 60 75 0
1601 -75 -7864 0
1601 -60 -7864 0
1601 -60 -75 -7865 0
c (((SATLiteral(77) + SATLiteral(92) + SATLiteral(107))<=1)=tv=SATLiteral(1602))
-1602 -92 -107 0
-1602 -77 -107 0
-1602 -77 -92 0
1602 92 107 0
1602 77 107 0
1602 77 92 0
c (((SATLiteral(79) + SATLiteral(94) + SATLiteral(109))<=1)=tv=SATLiteral(1603))
-1603 -94 -109 0
-1603 -79 -109 0
-1603 -79 -94 0
1603 94 109 0
1603 79 109 0
1603 79 94 0
c (((SATLiteral(81) + SATLiteral(96) + SATLiteral(111))<=1)=tv=SATLiteral(1604))
-1604 -96 -111 0
-1604 -81 -111 0
-1604 -81 -96 0
1604 96 111 0
1604 81 111 0
1604 81 96 0
c (((SATLiteral(83) + SATLiteral(98) + SATLiteral(113))<=1)=tv=SATLiteral(1605))
-1605 -98 -113 0
-1605 -83 -113 0
-1605 -83 -98 0
1605 98 113 0
1605 83 113 0
1605 83 98 0
c (((SATLiteral(85) + SATLiteral(100) + SATLiteral(115))<=1)=tv=SATLiteral(1606))
-1606 -100 -115 0
-1606 -85 -115 0
-1606 -85 -100 0
1606 100 115 0
1606 85 115 0
1606 85 100 0
c (((SATLiteral(87) + SATLiteral(102) + SATLiteral(117))<=1)=tv=SATLiteral(1607))
-1607 -102 -117 0
-1607 -87 -117 0
-1607 -87 -102 0
1607 102 117 0
1607 87 117 0
1607 87 102 0
c (((SATLiteral(89) + SATLiteral(104) + SATLiteral(119))<=1)=tv=SATLiteral(1608))
-1608 -104 -119 0
-1608 -89 -119 0
-1608 -89 -104 0
1608 104 119 0
1608 89 119 0
1608 89 104 0
c (((SATLiteral(91) + SATLiteral(106) + SATLiteral(121))<=1)=tv=SATLiteral(1609))
-1609 -106 -121 0
-1609 -91 -121 0
-1609 -91 -106 0
1609 106 121 0
1609 91 121 0
1609 91 106 0
c (((SATLiteral(-90) + SATLiteral(-105) + SATLiteral(-120))<=1)=tv=SATLiteral(1610))
-1610 105 120 0
-1610 90 120 0
-1610 90 105 0
1610 -105 -120 0
1610 -90 -120 0
1610 -90 -105 0
c (((SATLiteral(332) + aux1927 + SATLiteral(467))<=1)=tv=SATLiteral(1611))
-1611 7868 0
-1611 -467 7867 0
-1611 -332 7867 0
-1611 -332 -467 0
1611 467 -7867 0
1611 332 -7867 0
1611 332 467 -7868 0
c (((SATLiteral(334) + aux1928 + SATLiteral(469))<=1)=tv=SATLiteral(1612))
-1612 7871 0
-1612 -469 7870 0
-1612 -334 7870 0
-1612 -334 -469 0
1612 469 -7870 0
1612 334 -7870 0
1612 334 469 -7871 0
c (((SATLiteral(336) + aux1929 + SATLiteral(471))<=1)=tv=SATLiteral(1613))
-1613 7874 0
-1613 -471 7873 0
-1613 -336 7873 0
-1613 -336 -471 0
1613 471 -7873 0
1613 336 -7873 0
1613 336 471 -7874 0
c (((SATLiteral(338) + aux1930 + SATLiteral(473))<=1)=tv=SATLiteral(1614))
-1614 7877 0
-1614 -473 7876 0
-1614 -338 7876 0
-1614 -338 -473 0
1614 473 -7876 0
1614 338 -7876 0
1614 338 473 -7877 0
c (((SATLiteral(340) + aux1931 + SATLiteral(475))<=1)=tv=SATLiteral(1615))
-1615 7880 0
-1615 -475 7879 0
-1615 -340 7879 0
-1615 -340 -475 0
1615 475 -7879 0
1615 340 -7879 0
1615 340 475 -7880 0
c (((SATLiteral(342) + aux1932 + SATLiteral(477))<=1)=tv=SATLiteral(1616))
-1616 7883 0
-1616 -477 7882 0
-1616 -342 7882 0
-1616 -342 -477 0
1616 477 -7882 0
1616 342 -7882 0
1616 342 477 -7883 0
c (((SATLiteral(344) + aux1933 + SATLiteral(479))<=1)=tv=SATLiteral(1617))
-1617 7886 0
-1617 -479 7885 0
-1617 -344 7885 0
-1617 -344 -479 0
1617 479 -7885 0
1617 344 -7885 0
1617 344 479 -7886 0
c (((SATLiteral(346) + aux1934 + SATLiteral(481))<=1)=tv=SATLiteral(1618))
-1618 7889 0
-1618 -481 7888 0
-1618 -346 7888 0
-1618 -346 -481 0
1618 481 -7888 0
1618 346 -7888 0
1618 346 481 -7889 0
c (((SATLiteral(-345) + aux1935 + SATLiteral(-480))<=1)=tv=SATLiteral(1619))
-1619 7892 0
-1619 480 7891 0
-1619 345 7891 0
-1619 345 480 0
1619 -480 -7891 0
1619 -345 -7891 0
1619 -345 -480 -7892 0
c (((SATLiteral(212) + SATLiteral(227) + SATLiteral(242))<=1)=tv=SATLiteral(1620))
-1620 -227 -242 0
-1620 -212 -242 0
-1620 -212 -227 0
1620 227 242 0
1620 212 242 0
1620 212 227 0
c (((SATLiteral(214) + SATLiteral(229) + SATLiteral(244))<=1)=tv=SATLiteral(1621))
-1621 -229 -244 0
-1621 -214 -244 0
-1621 -214 -229 0
1621 229 244 0
1621 214 244 0
1621 214 229 0
c (((SATLiteral(216) + SATLiteral(231) + SATLiteral(246))<=1)=tv=SATLiteral(1622))
-1622 -231 -246 0
-1622 -216 -246 0
-1622 -216 -231 0
1622 231 246 0
1622 216 246 0
1622 216 231 0
c (((SATLiteral(218) + SATLiteral(233) + SATLiteral(248))<=1)=tv=SATLiteral(1623))
-1623 -233 -248 0
-1623 -218 -248 0
-1623 -218 -233 0
1623 233 248 0
1623 218 248 0
1623 218 233 0
c (((SATLiteral(220) + SATLiteral(235) + SATLiteral(250))<=1)=tv=SATLiteral(1624))
-1624 -235 -250 0
-1624 -220 -250 0
-1624 -220 -235 0
1624 235 250 0
1624 220 250 0
1624 220 235 0
c (((SATLiteral(222) + SATLiteral(237) + SATLiteral(252))<=1)=tv=SATLiteral(1625))
-1625 -237 -252 0
-1625 -222 -252 0
-1625 -222 -237 0
1625 237 252 0
1625 222 252 0
1625 222 237 0
c (((SATLiteral(224) + SATLiteral(239) + SATLiteral(254))<=1)=tv=SATLiteral(1626))
-1626 -239 -254 0
-1626 -224 -254 0
-1626 -224 -239 0
1626 239 254 0
1626 224 254 0
1626 224 239 0
c (((SATLiteral(226) + SATLiteral(241) + SATLiteral(256))<=1)=tv=SATLiteral(1627))
-1627 -241 -256 0
-1627 -226 -256 0
-1627 -226 -241 0
1627 241 256 0
1627 226 256 0
1627 226 241 0
c (((SATLiteral(-225) + SATLiteral(-240) + SATLiteral(-255))<=1)=tv=SATLiteral(1628))
-1628 240 255 0
-1628 225 255 0
-1628 225 240 0
1628 -240 -255 0
1628 -225 -255 0
1628 -225 -240 0
c (((SATLiteral(272) + SATLiteral(287) + SATLiteral(302))<=1)=tv=SATLiteral(1629))
-1629 -287 -302 0
-1629 -272 -302 0
-1629 -272 -287 0
1629 287 302 0
1629 272 302 0
1629 272 287 0
c (((SATLiteral(274) + SATLiteral(289) + SATLiteral(304))<=1)=tv=SATLiteral(1630))
-1630 -289 -304 0
-1630 -274 -304 0
-1630 -274 -289 0
1630 289 304 0
1630 274 304 0
1630 274 289 0
c (((SATLiteral(276) + SATLiteral(291) + SATLiteral(306))<=1)=tv=SATLiteral(1631))
-1631 -291 -306 0
-1631 -276 -306 0
-1631 -276 -291 0
1631 291 306 0
1631 276 306 0
1631 276 291 0
c (((SATLiteral(278) + SATLiteral(293) + SATLiteral(308))<=1)=tv=SATLiteral(1632))
-1632 -293 -308 0
-1632 -278 -308 0
-1632 -278 -293 0
1632 293 308 0
1632 278 308 0
1632 278 293 0
c (((SATLiteral(280) + SATLiteral(295) + SATLiteral(310))<=1)=tv=SATLiteral(1633))
-1633 -295 -310 0
-1633 -280 -310 0
-1633 -280 -295 0
1633 295 310 0
1633 280 310 0
1633 280 295 0
c (((SATLiteral(282) + SATLiteral(297) + SATLiteral(312))<=1)=tv=SATLiteral(1634))
-1634 -297 -312 0
-1634 -282 -312 0
-1634 -282 -297 0
1634 297 312 0
1634 282 312 0
1634 282 297 0
c (((SATLiteral(284) + SATLiteral(299) + SATLiteral(314))<=1)=tv=SATLiteral(1635))
-1635 -299 -314 0
-1635 -284 -314 0
-1635 -284 -299 0
1635 299 314 0
1635 284 314 0
1635 284 299 0
c (((SATLiteral(286) + SATLiteral(301) + SATLiteral(316))<=1)=tv=SATLiteral(1636))
-1636 -301 -316 0
-1636 -286 -316 0
-1636 -286 -301 0
1636 301 316 0
1636 286 316 0
1636 286 301 0
c (((SATLiteral(-285) + SATLiteral(-300) + SATLiteral(-315))<=1)=tv=SATLiteral(1637))
-1637 300 315 0
-1637 285 315 0
-1637 285 300 0
1637 -300 -315 0
1637 -285 -315 0
1637 -285 -300 0
c (((aux1936 + SATLiteral(482) + SATLiteral(602))<=1)=tv=SATLiteral(1638))
-1638 7895 0
-1638 -602 7894 0
-1638 -482 7894 0
-1638 -482 -602 0
1638 602 -7894 0
1638 482 -7894 0
1638 482 602 -7895 0
c (((aux1937 + SATLiteral(484) + SATLiteral(604))<=1)=tv=SATLiteral(1639))
-1639 7898 0
-1639 -604 7897 0
-1639 -484 7897 0
-1639 -484 -604 0
1639 604 -7897 0
1639 484 -7897 0
1639 484 604 -7898 0
c (((aux1938 + SATLiteral(486) + SATLiteral(606))<=1)=tv=SATLiteral(1640))
-1640 7901 0
-1640 -606 7900 0
-1640 -486 7900 0
-1640 -486 -606 0
1640 606 -7900 0
1640 486 -7900 0
1640 486 606 -7901 0
c (((aux1939 + SATLiteral(488) + SATLiteral(608))<=1)=tv=SATLiteral(1641))
-1641 7904 0
-1641 -608 7903 0
-1641 -488 7903 0
-1641 -488 -608 0
1641 608 -7903 0
1641 488 -7903 0
1641 488 608 -7904 0
c (((aux1940 + SATLiteral(490) + SATLiteral(610))<=1)=tv=SATLiteral(1642))
-1642 7907 0
-1642 -610 7906 0
-1642 -490 7906 0
-1642 -490 -610 0
1642 610 -7906 0
1642 490 -7906 0
1642 490 610 -7907 0
c (((aux1941 + SATLiteral(492) + SATLiteral(612))<=1)=tv=SATLiteral(1643))
-1643 7910 0
-1643 -612 7909 0
-1643 -492 7909 0
-1643 -492 -612 0
1643 612 -7909 0
1643 492 -7909 0
1643 492 612 -7910 0
c (((aux1942 + SATLiteral(494) + SATLiteral(614))<=1)=tv=SATLiteral(1644))
-1644 7913 0
-1644 -614 7912 0
-1644 -494 7912 0
-1644 -494 -614 0
1644 614 -7912 0
1644 494 -7912 0
1644 494 614 -7913 0
c (((aux1943 + SATLiteral(496) + SATLiteral(616))<=1)=tv=SATLiteral(1645))
-1645 7916 0
-1645 -616 7915 0
-1645 -496 7915 0
-1645 -496 -616 0
1645 616 -7915 0
1645 496 -7915 0
1645 496 616 -7916 0
c (((aux1944 + SATLiteral(-495) + SATLiteral(-615))<=1)=tv=SATLiteral(1646))
-1646 7919 0
-1646 615 7918 0
-1646 495 7918 0
-1646 495 615 0
1646 -615 -7918 0
1646 -495 -7918 0
1646 -495 -615 -7919 0
c (((SATLiteral(362) + SATLiteral(377) + SATLiteral(512))<=1)=tv=SATLiteral(1647))
-1647 -377 -512 0
-1647 -362 -512 0
-1647 -362 -377 0
1647 377 512 0
1647 362 512 0
1647 362 377 0
c (((SATLiteral(364) + SATLiteral(379) + SATLiteral(514))<=1)=tv=SATLiteral(1648))
-1648 -379 -514 0
-1648 -364 -514 0
-1648 -364 -379 0
1648 379 514 0
1648 364 514 0
1648 364 379 0
c (((SATLiteral(366) + SATLiteral(381) + SATLiteral(516))<=1)=tv=SATLiteral(1649))
-1649 -381 -516 0
-1649 -366 -516 0
-1649 -366 -381 0
1649 381 516 0
1649 366 516 0
1649 366 381 0
c (((SATLiteral(368) + SATLiteral(383) + SATLiteral(518))<=1)=tv=SATLiteral(1650))
-1650 -383 -518 0
-1650 -368 -518 0
-1650 -368 -383 0
1650 383 518 0
1650 368 518 0
1650 368 383 0
c (((SATLiteral(370) + SATLiteral(385) + SATLiteral(520))<=1)=tv=SATLiteral(1651))
-1651 -385 -520 0
-1651 -370 -520 0
-1651 -370 -385 0
1651 385 520 0
1651 370 520 0
1651 370 385 0
c (((SATLiteral(372) + SATLiteral(387) + SATLiteral(522))<=1)=tv=SATLiteral(1652))
-1652 -387 -522 0
-1652 -372 -522 0
-1652 -372 -387 0
1652 387 522 0
1652 372 522 0
1652 372 387 0
c (((SATLiteral(374) + SATLiteral(389) + SATLiteral(524))<=1)=tv=SATLiteral(1653))
-1653 -389 -524 0
-1653 -374 -524 0
-1653 -374 -389 0
1653 389 524 0
1653 374 524 0
1653 374 389 0
c (((SATLiteral(376) + SATLiteral(391) + SATLiteral(526))<=1)=tv=SATLiteral(1654))
-1654 -391 -526 0
-1654 -376 -526 0
-1654 -376 -391 0
1654 391 526 0
1654 376 526 0
1654 376 391 0
c (((SATLiteral(-375) + SATLiteral(-390) + SATLiteral(-525))<=1)=tv=SATLiteral(1655))
-1655 390 525 0
-1655 375 525 0
-1655 375 390 0
1655 -390 -525 0
1655 -375 -525 0
1655 -375 -390 0
c (((SATLiteral(407) + SATLiteral(422) + SATLiteral(542))<=1)=tv=SATLiteral(1656))
-1656 -422 -542 0
-1656 -407 -542 0
-1656 -407 -422 0
1656 422 542 0
1656 407 542 0
1656 407 422 0
c (((SATLiteral(409) + SATLiteral(424) + SATLiteral(544))<=1)=tv=SATLiteral(1657))
-1657 -424 -544 0
-1657 -409 -544 0
-1657 -409 -424 0
1657 424 544 0
1657 409 544 0
1657 409 424 0
c (((SATLiteral(411) + SATLiteral(426) + SATLiteral(546))<=1)=tv=SATLiteral(1658))
-1658 -426 -546 0
-1658 -411 -546 0
-1658 -411 -426 0
1658 426 546 0
1658 411 546 0
1658 411 426 0
c (((SATLiteral(413) + SATLiteral(428) + SATLiteral(548))<=1)=tv=SATLiteral(1659))
-1659 -428 -548 0
-1659 -413 -548 0
-1659 -413 -428 0
1659 428 548 0
1659 413 548 0
1659 413 428 0
c (((SATLiteral(415) + SATLiteral(430) + SATLiteral(550))<=1)=tv=SATLiteral(1660))
-1660 -430 -550 0
-1660 -415 -550 0
-1660 -415 -430 0
1660 430 550 0
1660 415 550 0
1660 415 430 0
c (((SATLiteral(417) + SATLiteral(432) + SATLiteral(552))<=1)=tv=SATLiteral(1661))
-1661 -432 -552 0
-1661 -417 -552 0
-1661 -417 -432 0
1661 432 552 0
1661 417 552 0
1661 417 432 0
c (((SATLiteral(419) + SATLiteral(434) + SATLiteral(554))<=1)=tv=SATLiteral(1662))
-1662 -434 -554 0
-1662 -419 -554 0
-1662 -419 -434 0
1662 434 554 0
1662 419 554 0
1662 419 434 0
c (((SATLiteral(421) + SATLiteral(436) + SATLiteral(556))<=1)=tv=SATLiteral(1663))
-1663 -436 -556 0
-1663 -421 -556 0
-1663 -421 -436 0
1663 436 556 0
1663 421 556 0
1663 421 436 0
c (((SATLiteral(-420) + SATLiteral(-435) + SATLiteral(-555))<=1)=tv=SATLiteral(1664))
-1664 435 555 0
-1664 420 555 0
-1664 420 435 0
1664 -435 -555 0
1664 -420 -555 0
1664 -420 -435 0
c (((SATLiteral(437) + SATLiteral(557) + SATLiteral(572))<=1)=tv=SATLiteral(1665))
-1665 -557 -572 0
-1665 -437 -572 0
-1665 -437 -557 0
1665 557 572 0
1665 437 572 0
1665 437 557 0
c (((SATLiteral(439) + SATLiteral(559) + SATLiteral(574))<=1)=tv=SATLiteral(1666))
-1666 -559 -574 0
-1666 -439 -574 0
-1666 -439 -559 0
1666 559 574 0
1666 439 574 0
1666 439 559 0
c (((SATLiteral(441) + SATLiteral(561) + SATLiteral(576))<=1)=tv=SATLiteral(1667))
-1667 -561 -576 0
-1667 -441 -576 0
-1667 -441 -561 0
1667 561 576 0
1667 441 576 0
1667 441 561 0
c (((SATLiteral(443) + SATLiteral(563) + SATLiteral(578))<=1)=tv=SATLiteral(1668))
-1668 -563 -578 0
-1668 -443 -578 0
-1668 -443 -563 0
1668 563 578 0
1668 443 578 0
1668 443 563 0
c (((SATLiteral(445) + SATLiteral(565) + SATLiteral(580))<=1)=tv=SATLiteral(1669))
-1669 -565 -580 0
-1669 -445 -580 0
-1669 -445 -565 0
1669 565 580 0
1669 445 580 0
1669 445 565 0
c (((SATLiteral(447) + SATLiteral(567) + SATLiteral(582))<=1)=tv=SATLiteral(1670))
-1670 -567 -582 0
-1670 -447 -582 0
-1670 -447 -567 0
1670 567 582 0
1670 447 582 0
1670 447 567 0
c (((SATLiteral(449) + SATLiteral(569) + SATLiteral(584))<=1)=tv=SATLiteral(1671))
-1671 -569 -584 0
-1671 -449 -584 0
-1671 -449 -569 0
1671 569 584 0
1671 449 584 0
1671 449 569 0
c (((SATLiteral(451) + SATLiteral(571) + SATLiteral(586))<=1)=tv=SATLiteral(1672))
-1672 -571 -586 0
-1672 -451 -586 0
-1672 -451 -571 0
1672 571 586 0
1672 451 586 0
1672 451 571 0
c (((SATLiteral(-450) + SATLiteral(-570) + SATLiteral(-585))<=1)=tv=SATLiteral(1673))
-1673 570 585 0
-1673 450 585 0
-1673 450 570 0
1673 -570 -585 0
1673 -450 -585 0
1673 -450 -570 0
c (((SATLiteral(737) + aux1945 + SATLiteral(452))<=1)=tv=SATLiteral(1674))
-1674 7922 0
-1674 -452 7921 0
-1674 -737 7921 0
-1674 -737 -452 0
1674 452 -7921 0
1674 737 -7921 0
1674 737 452 -7922 0
c (((SATLiteral(739) + aux1946 + SATLiteral(454))<=1)=tv=SATLiteral(1675))
-1675 7925 0
-1675 -454 7924 0
-1675 -739 7924 0
-1675 -739 -454 0
1675 454 -7924 0
1675 739 -7924 0
1675 739 454 -7925 0
c (((SATLiteral(741) + aux1947 + SATLiteral(456))<=1)=tv=SATLiteral(1676))
-1676 7928 0
-1676 -456 7927 0
-1676 -741 7927 0
-1676 -741 -456 0
1676 456 -7927 0
1676 741 -7927 0
1676 741 456 -7928 0
c (((SATLiteral(743) + aux1948 + SATLiteral(458))<=1)=tv=SATLiteral(1677))
-1677 7931 0
-1677 -458 7930 0
-1677 -743 7930 0
-1677 -743 -458 0
1677 458 -7930 0
1677 743 -7930 0
1677 743 458 -7931 0
c (((SATLiteral(745) + aux1949 + SATLiteral(460))<=1)=tv=SATLiteral(1678))
-1678 7934 0
-1678 -460 7933 0
-1678 -745 7933 0
-1678 -745 -460 0
1678 460 -7933 0
1678 745 -7933 0
1678 745 460 -7934 0
c (((SATLiteral(747) + aux1950 + SATLiteral(462))<=1)=tv=SATLiteral(1679))
-1679 7937 0
-1679 -462 7936 0
-1679 -747 7936 0
-1679 -747 -462 0
1679 462 -7936 0
1679 747 -7936 0
1679 747 462 -7937 0
c (((SATLiteral(749) + aux1951 + SATLiteral(464))<=1)=tv=SATLiteral(1680))
-1680 7940 0
-1680 -464 7939 0
-1680 -749 7939 0
-1680 -749 -464 0
1680 464 -7939 0
1680 749 -7939 0
1680 749 464 -7940 0
c (((SATLiteral(751) + aux1952 + SATLiteral(466))<=1)=tv=SATLiteral(1681))
-1681 7943 0
-1681 -466 7942 0
-1681 -751 7942 0
-1681 -751 -466 0
1681 466 -7942 0
1681 751 -7942 0
1681 751 466 -7943 0
c (((SATLiteral(-750) + aux1953 + SATLiteral(-465))<=1)=tv=SATLiteral(1682))
-1682 7946 0
-1682 465 7945 0
-1682 750 7945 0
-1682 750 465 0
1682 -465 -7945 0
1682 -750 -7945 0
1682 -750 -465 -7946 0
c (((SATLiteral(497) + SATLiteral(632) + SATLiteral(647))<=1)=tv=SATLiteral(1683))
-1683 -632 -647 0
-1683 -497 -647 0
-1683 -497 -632 0
1683 632 647 0
1683 497 647 0
1683 497 632 0
c (((SATLiteral(499) + SATLiteral(634) + SATLiteral(649))<=1)=tv=SATLiteral(1684))
-1684 -634 -649 0
-1684 -499 -649 0
-1684 -499 -634 0
1684 634 649 0
1684 499 649 0
1684 499 634 0
c (((SATLiteral(501) + SATLiteral(636) + SATLiteral(651))<=1)=tv=SATLiteral(1685))
-1685 -636 -651 0
-1685 -501 -651 0
-1685 -501 -636 0
1685 636 651 0
1685 501 651 0
1685 501 636 0
c (((SATLiteral(503) + SATLiteral(638) + SATLiteral(653))<=1)=tv=SATLiteral(1686))
-1686 -638 -653 0
-1686 -503 -653 0
-1686 -503 -638 0
1686 638 653 0
1686 503 653 0
1686 503 638 0
c (((SATLiteral(505) + SATLiteral(640) + SATLiteral(655))<=1)=tv=SATLiteral(1687))
-1687 -640 -655 0
-1687 -505 -655 0
-1687 -505 -640 0
1687 640 655 0
1687 505 655 0
1687 505 640 0
c (((SATLiteral(507) + SATLiteral(642) + SATLiteral(657))<=1)=tv=SATLiteral(1688))
-1688 -642 -657 0
-1688 -507 -657 0
-1688 -507 -642 0
1688 642 657 0
1688 507 657 0
1688 507 642 0
c (((SATLiteral(509) + SATLiteral(644) + SATLiteral(659))<=1)=tv=SATLiteral(1689))
-1689 -644 -659 0
-1689 -509 -659 0
-1689 -509 -644 0
1689 644 659 0
1689 509 659 0
1689 509 644 0
c (((SATLiteral(511) + SATLiteral(646) + SATLiteral(661))<=1)=tv=SATLiteral(1690))
-1690 -646 -661 0
-1690 -511 -661 0
-1690 -511 -646 0
1690 646 661 0
1690 511 661 0
1690 511 646 0
c (((SATLiteral(-510) + SATLiteral(-645) + SATLiteral(-660))<=1)=tv=SATLiteral(1691))
-1691 645 660 0
-1691 510 660 0
-1691 510 645 0
1691 -645 -660 0
1691 -510 -660 0
1691 -510 -645 0
c (((SATLiteral(977) + SATLiteral(707) + SATLiteral(842))<=1)=tv=SATLiteral(1692))
-1692 -707 -842 0
-1692 -977 -842 0
-1692 -977 -707 0
1692 707 842 0
1692 977 842 0
1692 977 707 0
c (((SATLiteral(979) + SATLiteral(709) + SATLiteral(844))<=1)=tv=SATLiteral(1693))
-1693 -709 -844 0
-1693 -979 -844 0
-1693 -979 -709 0
1693 709 844 0
1693 979 844 0
1693 979 709 0
c (((SATLiteral(981) + SATLiteral(711) + SATLiteral(846))<=1)=tv=SATLiteral(1694))
-1694 -711 -846 0
-1694 -981 -846 0
-1694 -981 -711 0
1694 711 846 0
1694 981 846 0
1694 981 711 0
c (((SATLiteral(983) + SATLiteral(713) + SATLiteral(848))<=1)=tv=SATLiteral(1695))
-1695 -713 -848 0
-1695 -983 -848 0
-1695 -983 -713 0
1695 713 848 0
1695 983 848 0
1695 983 713 0
c (((SATLiteral(985) + SATLiteral(715) + SATLiteral(850))<=1)=tv=SATLiteral(1696))
-1696 -715 -850 0
-1696 -985 -850 0
-1696 -985 -715 0
1696 715 850 0
1696 985 850 0
1696 985 715 0
c (((SATLiteral(987) + SATLiteral(717) + SATLiteral(852))<=1)=tv=SATLiteral(1697))
-1697 -717 -852 0
-1697 -987 -852 0
-1697 -987 -717 0
1697 717 852 0
1697 987 852 0
1697 987 717 0
c (((SATLiteral(989) + SATLiteral(719) + SATLiteral(854))<=1)=tv=SATLiteral(1698))
-1698 -719 -854 0
-1698 -989 -854 0
-1698 -989 -719 0
1698 719 854 0
1698 989 854 0
1698 989 719 0
c (((SATLiteral(991) + SATLiteral(721) + SATLiteral(856))<=1)=tv=SATLiteral(1699))
-1699 -721 -856 0
-1699 -991 -856 0
-1699 -991 -721 0
1699 721 856 0
1699 991 856 0
1699 991 721 0
c (((SATLiteral(-990) + SATLiteral(-720) + SATLiteral(-855))<=1)=tv=SATLiteral(1700))
-1700 720 855 0
-1700 990 855 0
-1700 990 720 0
1700 -720 -855 0
1700 -990 -855 0
1700 -990 -720 0
c (((SATLiteral(767) + SATLiteral(782) + SATLiteral(797))<=1)=tv=SATLiteral(1701))
-1701 -782 -797 0
-1701 -767 -797 0
-1701 -767 -782 0
1701 782 797 0
1701 767 797 0
1701 767 782 0
c (((SATLiteral(769) + SATLiteral(784) + SATLiteral(799))<=1)=tv=SATLiteral(1702))
-1702 -784 -799 0
-1702 -769 -799 0
-1702 -769 -784 0
1702 784 799 0
1702 769 799 0
1702 769 784 0
c (((SATLiteral(771) + SATLiteral(786) + SATLiteral(801))<=1)=tv=SATLiteral(1703))
-1703 -786 -801 0
-1703 -771 -801 0
-1703 -771 -786 0
1703 786 801 0
1703 771 801 0
1703 771 786 0
c (((SATLiteral(773) + SATLiteral(788) + SATLiteral(803))<=1)=tv=SATLiteral(1704))
-1704 -788 -803 0
-1704 -773 -803 0
-1704 -773 -788 0
1704 788 803 0
1704 773 803 0
1704 773 788 0
c (((SATLiteral(775) + SATLiteral(790) + SATLiteral(805))<=1)=tv=SATLiteral(1705))
-1705 -790 -805 0
-1705 -775 -805 0
-1705 -775 -790 0
1705 790 805 0
1705 775 805 0
1705 775 790 0
c (((SATLiteral(777) + SATLiteral(792) + SATLiteral(807))<=1)=tv=SATLiteral(1706))
-1706 -792 -807 0
-1706 -777 -807 0
-1706 -777 -792 0
1706 792 807 0
1706 777 807 0
1706 777 792 0
c (((SATLiteral(779) + SATLiteral(794) + SATLiteral(809))<=1)=tv=SATLiteral(1707))
-1707 -794 -809 0
-1707 -779 -809 0
-1707 -779 -794 0
1707 794 809 0
1707 779 809 0
1707 779 794 0
c (((SATLiteral(781) + SATLiteral(796) + SATLiteral(811))<=1)=tv=SATLiteral(1708))
-1708 -796 -811 0
-1708 -781 -811 0
-1708 -781 -796 0
1708 796 811 0
1708 781 811 0
1708 781 796 0
c (((SATLiteral(-780) + SATLiteral(-795) + SATLiteral(-810))<=1)=tv=SATLiteral(1709))
-1709 795 810 0
-1709 780 810 0
-1709 780 795 0
1709 -795 -810 0
1709 -780 -810 0
1709 -780 -795 0
c (((aux1954 + SATLiteral(1187) + SATLiteral(1202))<=1)=tv=SATLiteral(1710))
-1710 7949 0
-1710 -1202 7948 0
-1710 -1187 7948 0
-1710 -1187 -1202 0
1710 1202 -7948 0
1710 1187 -7948 0
1710 1187 1202 -7949 0
c (((aux1955 + SATLiteral(1189) + SATLiteral(1204))<=1)=tv=SATLiteral(1711))
-1711 7952 0
-1711 -1204 7951 0
-1711 -1189 7951 0
-1711 -1189 -1204 0
1711 1204 -7951 0
1711 1189 -7951 0
1711 1189 1204 -7952 0
c (((aux1956 + SATLiteral(1191) + SATLiteral(1206))<=1)=tv=SATLiteral(1712))
-1712 7955 0
-1712 -1206 7954 0
-1712 -1191 7954 0
-1712 -1191 -1206 0
1712 1206 -7954 0
1712 1191 -7954 0
1712 1191 1206 -7955 0
c (((aux1957 + SATLiteral(1193) + SATLiteral(1208))<=1)=tv=SATLiteral(1713))
-1713 7958 0
-1713 -1208 7957 0
-1713 -1193 7957 0
-1713 -1193 -1208 0
1713 1208 -7957 0
1713 1193 -7957 0
1713 1193 1208 -7958 0
c (((aux1958 + SATLiteral(1195) + SATLiteral(1210))<=1)=tv=SATLiteral(1714))
-1714 7961 0
-1714 -1210 7960 0
-1714 -1195 7960 0
-1714 -1195 -1210 0
1714 1210 -7960 0
1714 1195 -7960 0
1714 1195 1210 -7961 0
c (((aux1959 + SATLiteral(1197) + SATLiteral(1212))<=1)=tv=SATLiteral(1715))
-1715 7964 0
-1715 -1212 7963 0
-1715 -1197 7963 0
-1715 -1197 -1212 0
1715 1212 -7963 0
1715 1197 -7963 0
1715 1197 1212 -7964 0
c (((aux1960 + SATLiteral(1199) + SATLiteral(1214))<=1)=tv=SATLiteral(1716))
-1716 7967 0
-1716 -1214 7966 0
-1716 -1199 7966 0
-1716 -1199 -1214 0
1716 1214 -7966 0
1716 1199 -7966 0
1716 1199 1214 -7967 0
c (((aux1961 + SATLiteral(1201) + SATLiteral(1216))<=1)=tv=SATLiteral(1717))
-1717 7970 0
-1717 -1216 7969 0
-1717 -1201 7969 0
-1717 -1201 -1216 0
1717 1216 -7969 0
1717 1201 -7969 0
1717 1201 1216 -7970 0
c (((aux1962 + SATLiteral(-1200) + SATLiteral(-1215))<=1)=tv=SATLiteral(1718))
-1718 7973 0
-1718 1215 7972 0
-1718 1200 7972 0
-1718 1200 1215 0
1718 -1215 -7972 0
1718 -1200 -7972 0
1718 -1200 -1215 -7973 0
c (((SATLiteral(992) + SATLiteral(1007) + SATLiteral(1142))<=1)=tv=SATLiteral(1719))
-1719 -1007 -1142 0
-1719 -992 -1142 0
-1719 -992 -1007 0
1719 1007 1142 0
1719 992 1142 0
1719 992 1007 0
c (((SATLiteral(994) + SATLiteral(1009) + SATLiteral(1144))<=1)=tv=SATLiteral(1720))
-1720 -1009 -1144 0
-1720 -994 -1144 0
-1720 -994 -1009 0
1720 1009 1144 0
1720 994 1144 0
1720 994 1009 0
c (((SATLiteral(996) + SATLiteral(1011) + SATLiteral(1146))<=1)=tv=SATLiteral(1721))
-1721 -1011 -1146 0
-1721 -996 -1146 0
-1721 -996 -1011 0
1721 1011 1146 0
1721 996 1146 0
1721 996 1011 0
c (((SATLiteral(998) + SATLiteral(1013) + SATLiteral(1148))<=1)=tv=SATLiteral(1722))
-1722 -1013 -1148 0
-1722 -998 -1148 0
-1722 -998 -1013 0
1722 1013 1148 0
1722 998 1148 0
1722 998 1013 0
c (((SATLiteral(1000) + SATLiteral(1015) + SATLiteral(1150))<=1)=tv=SATLiteral(1723))
-1723 -1015 -1150 0
-1723 -1000 -1150 0
-1723 -1000 -1015 0
1723 1015 1150 0
1723 1000 1150 0
1723 1000 1015 0
c (((SATLiteral(1002) + SATLiteral(1017) + SATLiteral(1152))<=1)=tv=SATLiteral(1724))
-1724 -1017 -1152 0
-1724 -1002 -1152 0
-1724 -1002 -1017 0
1724 1017 1152 0
1724 1002 1152 0
1724 1002 1017 0
c (((SATLiteral(1004) + SATLiteral(1019) + SATLiteral(1154))<=1)=tv=SATLiteral(1725))
-1725 -1019 -1154 0
-1725 -1004 -1154 0
-1725 -1004 -1019 0
1725 1019 1154 0
1725 1004 1154 0
1725 1004 1019 0
c (((SATLiteral(1006) + SATLiteral(1021) + SATLiteral(1156))<=1)=tv=SATLiteral(1726))
-1726 -1021 -1156 0
-1726 -1006 -1156 0
-1726 -1006 -1021 0
1726 1021 1156 0
1726 1006 1156 0
1726 1006 1021 0
c (((SATLiteral(-1005) + SATLiteral(-1020) + SATLiteral(-1155))<=1)=tv=SATLiteral(1727))
-1727 1020 1155 0
-1727 1005 1155 0
-1727 1005 1020 0
1727 -1020 -1155 0
1727 -1005 -1155 0
1727 -1005 -1020 0
c (((SATLiteral(1037) + SATLiteral(1052) + SATLiteral(1172))<=1)=tv=SATLiteral(1728))
-1728 -1052 -1172 0
-1728 -1037 -1172 0
-1728 -1037 -1052 0
1728 1052 1172 0
1728 1037 1172 0
1728 1037 1052 0
c (((SATLiteral(1039) + SATLiteral(1054) + SATLiteral(1174))<=1)=tv=SATLiteral(1729))
-1729 -1054 -1174 0
-1729 -1039 -1174 0
-1729 -1039 -1054 0
1729 1054 1174 0
1729 1039 1174 0
1729 1039 1054 0
c (((SATLiteral(1041) + SATLiteral(1056) + SATLiteral(1176))<=1)=tv=SATLiteral(1730))
-1730 -1056 -1176 0
-1730 -1041 -1176 0
-1730 -1041 -1056 0
1730 1056 1176 0
1730 1041 1176 0
1730 1041 1056 0
c (((SATLiteral(1043) + SATLiteral(1058) + SATLiteral(1178))<=1)=tv=SATLiteral(1731))
-1731 -1058 -1178 0
-1731 -1043 -1178 0
-1731 -1043 -1058 0
1731 1058 1178 0
1731 1043 1178 0
1731 1043 1058 0
c (((SATLiteral(1045) + SATLiteral(1060) + SATLiteral(1180))<=1)=tv=SATLiteral(1732))
-1732 -1060 -1180 0
-1732 -1045 -1180 0
-1732 -1045 -1060 0
1732 1060 1180 0
1732 1045 1180 0
1732 1045 1060 0
c (((SATLiteral(1047) + SATLiteral(1062) + SATLiteral(1182))<=1)=tv=SATLiteral(1733))
-1733 -1062 -1182 0
-1733 -1047 -1182 0
-1733 -1047 -1062 0
1733 1062 1182 0
1733 1047 1182 0
1733 1047 1062 0
c (((SATLiteral(1049) + SATLiteral(1064) + SATLiteral(1184))<=1)=tv=SATLiteral(1734))
-1734 -1064 -1184 0
-1734 -1049 -1184 0
-1734 -1049 -1064 0
1734 1064 1184 0
1734 1049 1184 0
1734 1049 1064 0
c (((SATLiteral(1051) + SATLiteral(1066) + SATLiteral(1186))<=1)=tv=SATLiteral(1735))
-1735 -1066 -1186 0
-1735 -1051 -1186 0
-1735 -1051 -1066 0
1735 1066 1186 0
1735 1051 1186 0
1735 1051 1066 0
c (((SATLiteral(-1050) + SATLiteral(-1065) + SATLiteral(-1185))<=1)=tv=SATLiteral(1736))
-1736 1065 1185 0
-1736 1050 1185 0
-1736 1050 1065 0
1736 -1065 -1185 0
1736 -1050 -1185 0
1736 -1050 -1065 0
c (SATLiteral(1273) -> SATLiteral(1302))
-1273 1302 0
c (SATLiteral(1274) -> SATLiteral(1303))
-1274 1303 0
c (SATLiteral(1275) -> SATLiteral(1304))
-1275 1304 0
c (SATLiteral(1276) -> SATLiteral(1305))
-1276 1305 0
c (SATLiteral(1277) -> SATLiteral(1306))
-1277 1306 0
c (SATLiteral(1278) -> SATLiteral(1307))
-1278 1307 0
c (SATLiteral(1279) -> SATLiteral(1308))
-1279 1308 0
c (SATLiteral(1280) -> SATLiteral(1309))
-1280 1309 0
c (SATLiteral(1281) -> SATLiteral(1310))
-1281 1310 0
c (SATLiteral(1282) -> SATLiteral(399))
-1282 399 0
c (SATLiteral(1283) -> SATLiteral(1311))
-1283 1311 0
c (SATLiteral(1284) -> SATLiteral(1312))
-1284 1312 0
c (SATLiteral(1285) -> SATLiteral(1313))
-1285 1313 0
c (SATLiteral(1286) -> SATLiteral(1314))
-1286 1314 0
c (SATLiteral(1287) -> SATLiteral(1315))
-1287 1315 0
c (SATLiteral(1288) -> SATLiteral(1316))
-1288 1316 0
c (SATLiteral(1289) -> SATLiteral(1317))
-1289 1317 0
c (SATLiteral(1290) -> SATLiteral(1318))
-1290 1318 0
c (SATLiteral(1291) -> SATLiteral(1319))
-1291 1319 0
c (SATLiteral(1292) -> SATLiteral(1320))
-1292 1320 0
c (SATLiteral(1293) -> SATLiteral(1321))
-1293 1321 0
c (SATLiteral(1294) -> SATLiteral(1322))
-1294 1322 0
c (SATLiteral(1295) -> SATLiteral(1323))
-1295 1323 0
c (SATLiteral(1296) -> SATLiteral(1324))
-1296 1324 0
c (SATLiteral(1297) -> SATLiteral(1325))
-1297 1325 0
c (SATLiteral(1298) -> SATLiteral(1326))
-1298 1326 0
c (SATLiteral(1299) -> SATLiteral(1327))
-1299 1327 0
c (SATLiteral(1300) -> SATLiteral(1328))
-1300 1328 0
c (SATLiteral(1301) -> SATLiteral(1329))
-1301 1329 0
c (SATLiteral(1247) -> SATLiteral(1330))
-1247 1330 0
c (SATLiteral(1258) -> SATLiteral(1331))
-1258 1331 0
c (SATLiteral(1259) -> SATLiteral(1332))
-1259 1332 0
c (SATLiteral(1260) -> SATLiteral(1333))
-1260 1333 0
c (SATLiteral(1262) -> SATLiteral(1334))
-1262 1334 0
c (SATLiteral(1264) -> SATLiteral(1335))
-1264 1335 0
c (SATLiteral(1265) -> SATLiteral(1336))
-1265 1336 0
c (SATLiteral(1267) -> SATLiteral(1337))
-1267 1337 0
c (SATLiteral(1269) -> SATLiteral(1338))
-1269 1338 0
c (SATLiteral(1271) -> SATLiteral(1339))
-1271 1339 0
c (SATLiteral(1272) -> SATLiteral(1340))
-1272 1340 0
c (SATLiteral(1217) -> SATLiteral(1341))
-1217 1341 0
c (SATLiteral(1217) -> SATLiteral(1342))
-1217 1342 0
c (SATLiteral(1217) -> SATLiteral(1343))
-1217 1343 0
c (SATLiteral(1217) -> SATLiteral(1344))
-1217 1344 0
c (SATLiteral(1217) -> SATLiteral(1345))
-1217 1345 0
c (SATLiteral(1217) -> SATLiteral(1346))
-1217 1346 0
c (SATLiteral(1217) -> SATLiteral(1347))
-1217 1347 0
c (SATLiteral(1217) -> SATLiteral(1348))
-1217 1348 0
c (SATLiteral(1217) -> SATLiteral(1349))
-1217 1349 0
c (SATLiteral(1218) -> SATLiteral(1350))
-1218 1350 0
c (SATLiteral(1218) -> SATLiteral(1351))
-1218 1351 0
c (SATLiteral(1218) -> SATLiteral(1352))
-1218 1352 0
c (SATLiteral(1218) -> SATLiteral(1353))
-1218 1353 0
c (SATLiteral(1218) -> SATLiteral(1354))
-1218 1354 0
c (SATLiteral(1218) -> SATLiteral(1355))
-1218 1355 0
c (SATLiteral(1218) -> SATLiteral(1356))
-1218 1356 0
c (SATLiteral(1218) -> SATLiteral(1357))
-1218 1357 0
c (SATLiteral(1218) -> SATLiteral(1358))
-1218 1358 0
c (SATLiteral(1219) -> SATLiteral(1359))
-1219 1359 0
c (SATLiteral(1219) -> SATLiteral(1360))
-1219 1360 0
c (SATLiteral(1219) -> SATLiteral(1361))
-1219 1361 0
c (SATLiteral(1219) -> SATLiteral(1362))
-1219 1362 0
c (SATLiteral(1219) -> SATLiteral(1363))
-1219 1363 0
c (SATLiteral(1219) -> SATLiteral(1364))
-1219 1364 0
c (SATLiteral(1219) -> SATLiteral(1365))
-1219 1365 0
c (SATLiteral(1219) -> SATLiteral(1366))
-1219 1366 0
c (SATLiteral(1219) -> SATLiteral(1367))
-1219 1367 0
c (SATLiteral(1220) -> SATLiteral(1368))
-1220 1368 0
c (SATLiteral(1220) -> SATLiteral(1369))
-1220 1369 0
c (SATLiteral(1220) -> SATLiteral(1370))
-1220 1370 0
c (SATLiteral(1220) -> SATLiteral(1371))
-1220 1371 0
c (SATLiteral(1220) -> SATLiteral(1372))
-1220 1372 0
c (SATLiteral(1220) -> SATLiteral(1373))
-1220 1373 0
c (SATLiteral(1220) -> SATLiteral(1374))
-1220 1374 0
c (SATLiteral(1220) -> SATLiteral(1375))
-1220 1375 0
c (SATLiteral(1220) -> SATLiteral(1376))
-1220 1376 0
c (SATLiteral(1221) -> SATLiteral(1377))
-1221 1377 0
c (SATLiteral(1221) -> SATLiteral(1378))
-1221 1378 0
c (SATLiteral(1221) -> SATLiteral(1379))
-1221 1379 0
c (SATLiteral(1221) -> SATLiteral(1380))
-1221 1380 0
c (SATLiteral(1221) -> SATLiteral(1381))
-1221 1381 0
c (SATLiteral(1221) -> SATLiteral(1382))
-1221 1382 0
c (SATLiteral(1221) -> SATLiteral(1383))
-1221 1383 0
c (SATLiteral(1221) -> SATLiteral(1384))
-1221 1384 0
c (SATLiteral(1221) -> SATLiteral(1385))
-1221 1385 0
c (SATLiteral(1222) -> SATLiteral(1386))
-1222 1386 0
c (SATLiteral(1222) -> SATLiteral(1387))
-1222 1387 0
c (SATLiteral(1222) -> SATLiteral(1388))
-1222 1388 0
c (SATLiteral(1222) -> SATLiteral(1389))
-1222 1389 0
c (SATLiteral(1222) -> SATLiteral(1390))
-1222 1390 0
c (SATLiteral(1222) -> SATLiteral(1391))
-1222 1391 0
c (SATLiteral(1222) -> SATLiteral(1392))
-1222 1392 0
c (SATLiteral(1222) -> SATLiteral(1393))
-1222 1393 0
c (SATLiteral(1222) -> SATLiteral(1394))
-1222 1394 0
c (SATLiteral(1223) -> SATLiteral(1395))
-1223 1395 0
c (SATLiteral(1223) -> SATLiteral(1396))
-1223 1396 0
c (SATLiteral(1223) -> SATLiteral(1397))
-1223 1397 0
c (SATLiteral(1223) -> SATLiteral(1398))
-1223 1398 0
c (SATLiteral(1223) -> SATLiteral(1399))
-1223 1399 0
c (SATLiteral(1223) -> SATLiteral(1400))
-1223 1400 0
c (SATLiteral(1223) -> SATLiteral(1401))
-1223 1401 0
c (SATLiteral(1223) -> SATLiteral(1402))
-1223 1402 0
c (SATLiteral(1223) -> SATLiteral(1403))
-1223 1403 0
c (SATLiteral(1224) -> SATLiteral(1404))
-1224 1404 0
c (SATLiteral(1224) -> SATLiteral(1405))
-1224 1405 0
c (SATLiteral(1224) -> SATLiteral(1406))
-1224 1406 0
c (SATLiteral(1224) -> SATLiteral(1407))
-1224 1407 0
c (SATLiteral(1224) -> SATLiteral(1408))
-1224 1408 0
c (SATLiteral(1224) -> SATLiteral(1409))
-1224 1409 0
c (SATLiteral(1224) -> SATLiteral(1410))
-1224 1410 0
c (SATLiteral(1224) -> SATLiteral(1411))
-1224 1411 0
c (SATLiteral(1224) -> SATLiteral(1412))
-1224 1412 0
c (SATLiteral(1225) -> SATLiteral(1413))
-1225 1413 0
c (SATLiteral(1225) -> SATLiteral(1414))
-1225 1414 0
c (SATLiteral(1225) -> SATLiteral(1415))
-1225 1415 0
c (SATLiteral(1225) -> SATLiteral(1416))
-1225 1416 0
c (SATLiteral(1225) -> SATLiteral(1417))
-1225 1417 0
c (SATLiteral(1225) -> SATLiteral(1418))
-1225 1418 0
c (SATLiteral(1225) -> SATLiteral(1419))
-1225 1419 0
c (SATLiteral(1225) -> SATLiteral(1420))
-1225 1420 0
c (SATLiteral(1225) -> SATLiteral(1421))
-1225 1421 0
c (SATLiteral(1226) -> SATLiteral(1422))
-1226 1422 0
c (SATLiteral(1226) -> SATLiteral(1423))
-1226 1423 0
c (SATLiteral(1226) -> SATLiteral(1424))
-1226 1424 0
c (SATLiteral(1226) -> SATLiteral(1425))
-1226 1425 0
c (SATLiteral(1226) -> SATLiteral(1426))
-1226 1426 0
c (SATLiteral(1226) -> SATLiteral(1427))
-1226 1427 0
c (SATLiteral(1226) -> SATLiteral(1428))
-1226 1428 0
c (SATLiteral(1226) -> SATLiteral(1429))
-1226 1429 0
c (SATLiteral(1226) -> SATLiteral(1430))
-1226 1430 0
c (SATLiteral(1227) -> SATLiteral(1431))
-1227 1431 0
c (SATLiteral(1227) -> SATLiteral(1432))
-1227 1432 0
c (SATLiteral(1227) -> SATLiteral(1433))
-1227 1433 0
c (SATLiteral(1227) -> SATLiteral(1434))
-1227 1434 0
c (SATLiteral(1227) -> SATLiteral(1435))
-1227 1435 0
c (SATLiteral(1227) -> SATLiteral(1436))
-1227 1436 0
c (SATLiteral(1227) -> SATLiteral(1437))
-1227 1437 0
c (SATLiteral(1227) -> SATLiteral(1438))
-1227 1438 0
c (SATLiteral(1227) -> SATLiteral(1439))
-1227 1439 0
c (SATLiteral(1228) -> SATLiteral(1440))
-1228 1440 0
c (SATLiteral(1228) -> SATLiteral(1441))
-1228 1441 0
c (SATLiteral(1228) -> SATLiteral(1442))
-1228 1442 0
c (SATLiteral(1228) -> SATLiteral(1443))
-1228 1443 0
c (SATLiteral(1228) -> SATLiteral(1444))
-1228 1444 0
c (SATLiteral(1228) -> SATLiteral(1445))
-1228 1445 0
c (SATLiteral(1228) -> SATLiteral(1446))
-1228 1446 0
c (SATLiteral(1228) -> SATLiteral(1447))
-1228 1447 0
c (SATLiteral(1228) -> SATLiteral(1448))
-1228 1448 0
c (SATLiteral(1229) -> SATLiteral(1449))
-1229 1449 0
c (SATLiteral(1229) -> SATLiteral(1450))
-1229 1450 0
c (SATLiteral(1229) -> SATLiteral(1451))
-1229 1451 0
c (SATLiteral(1229) -> SATLiteral(1452))
-1229 1452 0
c (SATLiteral(1229) -> SATLiteral(1453))
-1229 1453 0
c (SATLiteral(1229) -> SATLiteral(1454))
-1229 1454 0
c (SATLiteral(1229) -> SATLiteral(1455))
-1229 1455 0
c (SATLiteral(1229) -> SATLiteral(1456))
-1229 1456 0
c (SATLiteral(1229) -> SATLiteral(1457))
-1229 1457 0
c (SATLiteral(1230) -> SATLiteral(1458))
-1230 1458 0
c (SATLiteral(1230) -> SATLiteral(1459))
-1230 1459 0
c (SATLiteral(1230) -> SATLiteral(1460))
-1230 1460 0
c (SATLiteral(1230) -> SATLiteral(1461))
-1230 1461 0
c (SATLiteral(1230) -> SATLiteral(1462))
-1230 1462 0
c (SATLiteral(1230) -> SATLiteral(1463))
-1230 1463 0
c (SATLiteral(1230) -> SATLiteral(1464))
-1230 1464 0
c (SATLiteral(1230) -> SATLiteral(1465))
-1230 1465 0
c (SATLiteral(1230) -> SATLiteral(1466))
-1230 1466 0
c (SATLiteral(1231) -> SATLiteral(1467))
-1231 1467 0
c (SATLiteral(1231) -> SATLiteral(1468))
-1231 1468 0
c (SATLiteral(1231) -> SATLiteral(1469))
-1231 1469 0
c (SATLiteral(1231) -> SATLiteral(1470))
-1231 1470 0
c (SATLiteral(1231) -> SATLiteral(1471))
-1231 1471 0
c (SATLiteral(1231) -> SATLiteral(1472))
-1231 1472 0
c (SATLiteral(1231) -> SATLiteral(1473))
-1231 1473 0
c (SATLiteral(1231) -> SATLiteral(1474))
-1231 1474 0
c (SATLiteral(1231) -> SATLiteral(1475))
-1231 1475 0
c (SATLiteral(1232) -> SATLiteral(1476))
-1232 1476 0
c (SATLiteral(1232) -> SATLiteral(1477))
-1232 1477 0
c (SATLiteral(1232) -> SATLiteral(1478))
-1232 1478 0
c (SATLiteral(1232) -> SATLiteral(1479))
-1232 1479 0
c (SATLiteral(1232) -> SATLiteral(1480))
-1232 1480 0
c (SATLiteral(1232) -> SATLiteral(1481))
-1232 1481 0
c (SATLiteral(1232) -> SATLiteral(1482))
-1232 1482 0
c (SATLiteral(1232) -> SATLiteral(1483))
-1232 1483 0
c (SATLiteral(1232) -> SATLiteral(1484))
-1232 1484 0
c (SATLiteral(1233) -> SATLiteral(1485))
-1233 1485 0
c (SATLiteral(1233) -> SATLiteral(1486))
-1233 1486 0
c (SATLiteral(1233) -> SATLiteral(1487))
-1233 1487 0
c (SATLiteral(1233) -> SATLiteral(1488))
-1233 1488 0
c (SATLiteral(1233) -> SATLiteral(1489))
-1233 1489 0
c (SATLiteral(1233) -> SATLiteral(1490))
-1233 1490 0
c (SATLiteral(1233) -> SATLiteral(1491))
-1233 1491 0
c (SATLiteral(1233) -> SATLiteral(1492))
-1233 1492 0
c (SATLiteral(1233) -> SATLiteral(1493))
-1233 1493 0
c (SATLiteral(1234) -> SATLiteral(1494))
-1234 1494 0
c (SATLiteral(1234) -> SATLiteral(1495))
-1234 1495 0
c (SATLiteral(1234) -> SATLiteral(1496))
-1234 1496 0
c (SATLiteral(1234) -> SATLiteral(1497))
-1234 1497 0
c (SATLiteral(1234) -> SATLiteral(1498))
-1234 1498 0
c (SATLiteral(1234) -> SATLiteral(1499))
-1234 1499 0
c (SATLiteral(1234) -> SATLiteral(1500))
-1234 1500 0
c (SATLiteral(1234) -> SATLiteral(1501))
-1234 1501 0
c (SATLiteral(1234) -> SATLiteral(1502))
-1234 1502 0
c (SATLiteral(1235) -> SATLiteral(1503))
-1235 1503 0
c (SATLiteral(1235) -> SATLiteral(1504))
-1235 1504 0
c (SATLiteral(1235) -> SATLiteral(1505))
-1235 1505 0
c (SATLiteral(1235) -> SATLiteral(1506))
-1235 1506 0
c (SATLiteral(1235) -> SATLiteral(1507))
-1235 1507 0
c (SATLiteral(1235) -> SATLiteral(1508))
-1235 1508 0
c (SATLiteral(1235) -> SATLiteral(1509))
-1235 1509 0
c (SATLiteral(1235) -> SATLiteral(1510))
-1235 1510 0
c (SATLiteral(1235) -> SATLiteral(1511))
-1235 1511 0
c (SATLiteral(1236) -> SATLiteral(1512))
-1236 1512 0
c (SATLiteral(1236) -> SATLiteral(1513))
-1236 1513 0
c (SATLiteral(1236) -> SATLiteral(1514))
-1236 1514 0
c (SATLiteral(1236) -> SATLiteral(1515))
-1236 1515 0
c (SATLiteral(1236) -> SATLiteral(1516))
-1236 1516 0
c (SATLiteral(1236) -> SATLiteral(1517))
-1236 1517 0
c (SATLiteral(1236) -> SATLiteral(1518))
-1236 1518 0
c (SATLiteral(1236) -> SATLiteral(1519))
-1236 1519 0
c (SATLiteral(1236) -> SATLiteral(1520))
-1236 1520 0
c (SATLiteral(1237) -> SATLiteral(1521))
-1237 1521 0
c (SATLiteral(1237) -> SATLiteral(1522))
-1237 1522 0
c (SATLiteral(1237) -> SATLiteral(1523))
-1237 1523 0
c (SATLiteral(1237) -> SATLiteral(1524))
-1237 1524 0
c (SATLiteral(1237) -> SATLiteral(1525))
-1237 1525 0
c (SATLiteral(1237) -> SATLiteral(1526))
-1237 1526 0
c (SATLiteral(1237) -> SATLiteral(1527))
-1237 1527 0
c (SATLiteral(1237) -> SATLiteral(1528))
-1237 1528 0
c (SATLiteral(1237) -> SATLiteral(1529))
-1237 1529 0
c (SATLiteral(1238) -> SATLiteral(1530))
-1238 1530 0
c (SATLiteral(1238) -> SATLiteral(1531))
-1238 1531 0
c (SATLiteral(1238) -> SATLiteral(1532))
-1238 1532 0
c (SATLiteral(1238) -> SATLiteral(1533))
-1238 1533 0
c (SATLiteral(1238) -> SATLiteral(1534))
-1238 1534 0
c (SATLiteral(1238) -> SATLiteral(1535))
-1238 1535 0
c (SATLiteral(1238) -> SATLiteral(1536))
-1238 1536 0
c (SATLiteral(1238) -> SATLiteral(1537))
-1238 1537 0
c (SATLiteral(1238) -> SATLiteral(1538))
-1238 1538 0
c (SATLiteral(1239) -> SATLiteral(1539))
-1239 1539 0
c (SATLiteral(1239) -> SATLiteral(1540))
-1239 1540 0
c (SATLiteral(1239) -> SATLiteral(1541))
-1239 1541 0
c (SATLiteral(1239) -> SATLiteral(1542))
-1239 1542 0
c (SATLiteral(1239) -> SATLiteral(1543))
-1239 1543 0
c (SATLiteral(1239) -> SATLiteral(1544))
-1239 1544 0
c (SATLiteral(1239) -> SATLiteral(1545))
-1239 1545 0
c (SATLiteral(1239) -> SATLiteral(1546))
-1239 1546 0
c (SATLiteral(1239) -> SATLiteral(1547))
-1239 1547 0
c (SATLiteral(1240) -> SATLiteral(1548))
-1240 1548 0
c (SATLiteral(1240) -> SATLiteral(1549))
-1240 1549 0
c (SATLiteral(1240) -> SATLiteral(1550))
-1240 1550 0
c (SATLiteral(1240) -> SATLiteral(1551))
-1240 1551 0
c (SATLiteral(1240) -> SATLiteral(1552))
-1240 1552 0
c (SATLiteral(1240) -> SATLiteral(1553))
-1240 1553 0
c (SATLiteral(1240) -> SATLiteral(1554))
-1240 1554 0
c (SATLiteral(1240) -> SATLiteral(1555))
-1240 1555 0
c (SATLiteral(1240) -> SATLiteral(1556))
-1240 1556 0
c (SATLiteral(1241) -> SATLiteral(1557))
-1241 1557 0
c (SATLiteral(1241) -> SATLiteral(1558))
-1241 1558 0
c (SATLiteral(1241) -> SATLiteral(1559))
-1241 1559 0
c (SATLiteral(1241) -> SATLiteral(1560))
-1241 1560 0
c (SATLiteral(1241) -> SATLiteral(1561))
-1241 1561 0
c (SATLiteral(1241) -> SATLiteral(1562))
-1241 1562 0
c (SATLiteral(1241) -> SATLiteral(1563))
-1241 1563 0
c (SATLiteral(1241) -> SATLiteral(1564))
-1241 1564 0
c (SATLiteral(1241) -> SATLiteral(1565))
-1241 1565 0
c (SATLiteral(1242) -> SATLiteral(1566))
-1242 1566 0
c (SATLiteral(1242) -> SATLiteral(1567))
-1242 1567 0
c (SATLiteral(1242) -> SATLiteral(1568))
-1242 1568 0
c (SATLiteral(1242) -> SATLiteral(1569))
-1242 1569 0
c (SATLiteral(1242) -> SATLiteral(1570))
-1242 1570 0
c (SATLiteral(1242) -> SATLiteral(1571))
-1242 1571 0
c (SATLiteral(1242) -> SATLiteral(1572))
-1242 1572 0
c (SATLiteral(1242) -> SATLiteral(1573))
-1242 1573 0
c (SATLiteral(1242) -> SATLiteral(1574))
-1242 1574 0
c (SATLiteral(1243) -> SATLiteral(1575))
-1243 1575 0
c (SATLiteral(1243) -> SATLiteral(1576))
-1243 1576 0
c (SATLiteral(1243) -> SATLiteral(1577))
-1243 1577 0
c (SATLiteral(1243) -> SATLiteral(1578))
-1243 1578 0
c (SATLiteral(1243) -> SATLiteral(1579))
-1243 1579 0
c (SATLiteral(1243) -> SATLiteral(1580))
-1243 1580 0
c (SATLiteral(1243) -> SATLiteral(1581))
-1243 1581 0
c (SATLiteral(1243) -> SATLiteral(1582))
-1243 1582 0
c (SATLiteral(1243) -> SATLiteral(1583))
-1243 1583 0
c (SATLiteral(1244) -> SATLiteral(1584))
-1244 1584 0
c (SATLiteral(1244) -> SATLiteral(1585))
-1244 1585 0
c (SATLiteral(1244) -> SATLiteral(1586))
-1244 1586 0
c (SATLiteral(1244) -> SATLiteral(1587))
-1244 1587 0
c (SATLiteral(1244) -> SATLiteral(1588))
-1244 1588 0
c (SATLiteral(1244) -> SATLiteral(1589))
-1244 1589 0
c (SATLiteral(1244) -> SATLiteral(1590))
-1244 1590 0
c (SATLiteral(1244) -> SATLiteral(1591))
-1244 1591 0
c (SATLiteral(1244) -> SATLiteral(1592))
-1244 1592 0
c (SATLiteral(1245) -> SATLiteral(1593))
-1245 1593 0
c (SATLiteral(1245) -> SATLiteral(1594))
-1245 1594 0
c (SATLiteral(1245) -> SATLiteral(1595))
-1245 1595 0
c (SATLiteral(1245) -> SATLiteral(1596))
-1245 1596 0
c (SATLiteral(1245) -> SATLiteral(1597))
-1245 1597 0
c (SATLiteral(1245) -> SATLiteral(1598))
-1245 1598 0
c (SATLiteral(1245) -> SATLiteral(1599))
-1245 1599 0
c (SATLiteral(1245) -> SATLiteral(1600))
-1245 1600 0
c (SATLiteral(1245) -> SATLiteral(1601))
-1245 1601 0
c (SATLiteral(1246) -> SATLiteral(1602))
-1246 1602 0
c (SATLiteral(1246) -> SATLiteral(1603))
-1246 1603 0
c (SATLiteral(1246) -> SATLiteral(1604))
-1246 1604 0
c (SATLiteral(1246) -> SATLiteral(1605))
-1246 1605 0
c (SATLiteral(1246) -> SATLiteral(1606))
-1246 1606 0
c (SATLiteral(1246) -> SATLiteral(1607))
-1246 1607 0
c (SATLiteral(1246) -> SATLiteral(1608))
-1246 1608 0
c (SATLiteral(1246) -> SATLiteral(1609))
-1246 1609 0
c (SATLiteral(1246) -> SATLiteral(1610))
-1246 1610 0
c (SATLiteral(1248) -> SATLiteral(1611))
-1248 1611 0
c (SATLiteral(1248) -> SATLiteral(1612))
-1248 1612 0
c (SATLiteral(1248) -> SATLiteral(1613))
-1248 1613 0
c (SATLiteral(1248) -> SATLiteral(1614))
-1248 1614 0
c (SATLiteral(1248) -> SATLiteral(1615))
-1248 1615 0
c (SATLiteral(1248) -> SATLiteral(1616))
-1248 1616 0
c (SATLiteral(1248) -> SATLiteral(1617))
-1248 1617 0
c (SATLiteral(1248) -> SATLiteral(1618))
-1248 1618 0
c (SATLiteral(1248) -> SATLiteral(1619))
-1248 1619 0
c (SATLiteral(1249) -> SATLiteral(1620))
-1249 1620 0
c (SATLiteral(1249) -> SATLiteral(1621))
-1249 1621 0
c (SATLiteral(1249) -> SATLiteral(1622))
-1249 1622 0
c (SATLiteral(1249) -> SATLiteral(1623))
-1249 1623 0
c (SATLiteral(1249) -> SATLiteral(1624))
-1249 1624 0
c (SATLiteral(1249) -> SATLiteral(1625))
-1249 1625 0
c (SATLiteral(1249) -> SATLiteral(1626))
-1249 1626 0
c (SATLiteral(1249) -> SATLiteral(1627))
-1249 1627 0
c (SATLiteral(1249) -> SATLiteral(1628))
-1249 1628 0
c (SATLiteral(1250) -> SATLiteral(1629))
-1250 1629 0
c (SATLiteral(1250) -> SATLiteral(1630))
-1250 1630 0
c (SATLiteral(1250) -> SATLiteral(1631))
-1250 1631 0
c (SATLiteral(1250) -> SATLiteral(1632))
-1250 1632 0
c (SATLiteral(1250) -> SATLiteral(1633))
-1250 1633 0
c (SATLiteral(1250) -> SATLiteral(1634))
-1250 1634 0
c (SATLiteral(1250) -> SATLiteral(1635))
-1250 1635 0
c (SATLiteral(1250) -> SATLiteral(1636))
-1250 1636 0
c (SATLiteral(1250) -> SATLiteral(1637))
-1250 1637 0
c (SATLiteral(1251) -> SATLiteral(1638))
-1251 1638 0
c (SATLiteral(1251) -> SATLiteral(1639))
-1251 1639 0
c (SATLiteral(1251) -> SATLiteral(1640))
-1251 1640 0
c (SATLiteral(1251) -> SATLiteral(1641))
-1251 1641 0
c (SATLiteral(1251) -> SATLiteral(1642))
-1251 1642 0
c (SATLiteral(1251) -> SATLiteral(1643))
-1251 1643 0
c (SATLiteral(1251) -> SATLiteral(1644))
-1251 1644 0
c (SATLiteral(1251) -> SATLiteral(1645))
-1251 1645 0
c (SATLiteral(1251) -> SATLiteral(1646))
-1251 1646 0
c (SATLiteral(1252) -> SATLiteral(1647))
-1252 1647 0
c (SATLiteral(1252) -> SATLiteral(1648))
-1252 1648 0
c (SATLiteral(1252) -> SATLiteral(1649))
-1252 1649 0
c (SATLiteral(1252) -> SATLiteral(1650))
-1252 1650 0
c (SATLiteral(1252) -> SATLiteral(1651))
-1252 1651 0
c (SATLiteral(1252) -> SATLiteral(1652))
-1252 1652 0
c (SATLiteral(1252) -> SATLiteral(1653))
-1252 1653 0
c (SATLiteral(1252) -> SATLiteral(1654))
-1252 1654 0
c (SATLiteral(1252) -> SATLiteral(1655))
-1252 1655 0
c (SATLiteral(1254) -> SATLiteral(1656))
-1254 1656 0
c (SATLiteral(1254) -> SATLiteral(1657))
-1254 1657 0
c (SATLiteral(1254) -> SATLiteral(1658))
-1254 1658 0
c (SATLiteral(1254) -> SATLiteral(1659))
-1254 1659 0
c (SATLiteral(1254) -> SATLiteral(1660))
-1254 1660 0
c (SATLiteral(1254) -> SATLiteral(1661))
-1254 1661 0
c (SATLiteral(1254) -> SATLiteral(1662))
-1254 1662 0
c (SATLiteral(1254) -> SATLiteral(1663))
-1254 1663 0
c (SATLiteral(1254) -> SATLiteral(1664))
-1254 1664 0
c (SATLiteral(1255) -> SATLiteral(1665))
-1255 1665 0
c (SATLiteral(1255) -> SATLiteral(1666))
-1255 1666 0
c (SATLiteral(1255) -> SATLiteral(1667))
-1255 1667 0
c (SATLiteral(1255) -> SATLiteral(1668))
-1255 1668 0
c (SATLiteral(1255) -> SATLiteral(1669))
-1255 1669 0
c (SATLiteral(1255) -> SATLiteral(1670))
-1255 1670 0
c (SATLiteral(1255) -> SATLiteral(1671))
-1255 1671 0
c (SATLiteral(1255) -> SATLiteral(1672))
-1255 1672 0
c (SATLiteral(1255) -> SATLiteral(1673))
-1255 1673 0
c (SATLiteral(1256) -> SATLiteral(1674))
-1256 1674 0
c (SATLiteral(1256) -> SATLiteral(1675))
-1256 1675 0
c (SATLiteral(1256) -> SATLiteral(1676))
-1256 1676 0
c (SATLiteral(1256) -> SATLiteral(1677))
-1256 1677 0
c (SATLiteral(1256) -> SATLiteral(1678))
-1256 1678 0
c (SATLiteral(1256) -> SATLiteral(1679))
-1256 1679 0
c (SATLiteral(1256) -> SATLiteral(1680))
-1256 1680 0
c (SATLiteral(1256) -> SATLiteral(1681))
-1256 1681 0
c (SATLiteral(1256) -> SATLiteral(1682))
-1256 1682 0
c (SATLiteral(1257) -> SATLiteral(1683))
-1257 1683 0
c (SATLiteral(1257) -> SATLiteral(1684))
-1257 1684 0
c (SATLiteral(1257) -> SATLiteral(1685))
-1257 1685 0
c (SATLiteral(1257) -> SATLiteral(1686))
-1257 1686 0
c (SATLiteral(1257) -> SATLiteral(1687))
-1257 1687 0
c (SATLiteral(1257) -> SATLiteral(1688))
-1257 1688 0
c (SATLiteral(1257) -> SATLiteral(1689))
-1257 1689 0
c (SATLiteral(1257) -> SATLiteral(1690))
-1257 1690 0
c (SATLiteral(1257) -> SATLiteral(1691))
-1257 1691 0
c (SATLiteral(1261) -> SATLiteral(1692))
-1261 1692 0
c (SATLiteral(1261) -> SATLiteral(1693))
-1261 1693 0
c (SATLiteral(1261) -> SATLiteral(1694))
-1261 1694 0
c (SATLiteral(1261) -> SATLiteral(1695))
-1261 1695 0
c (SATLiteral(1261) -> SATLiteral(1696))
-1261 1696 0
c (SATLiteral(1261) -> SATLiteral(1697))
-1261 1697 0
c (SATLiteral(1261) -> SATLiteral(1698))
-1261 1698 0
c (SATLiteral(1261) -> SATLiteral(1699))
-1261 1699 0
c (SATLiteral(1261) -> SATLiteral(1700))
-1261 1700 0
c (SATLiteral(1263) -> SATLiteral(1701))
-1263 1701 0
c (SATLiteral(1263) -> SATLiteral(1702))
-1263 1702 0
c (SATLiteral(1263) -> SATLiteral(1703))
-1263 1703 0
c (SATLiteral(1263) -> SATLiteral(1704))
-1263 1704 0
c (SATLiteral(1263) -> SATLiteral(1705))
-1263 1705 0
c (SATLiteral(1263) -> SATLiteral(1706))
-1263 1706 0
c (SATLiteral(1263) -> SATLiteral(1707))
-1263 1707 0
c (SATLiteral(1263) -> SATLiteral(1708))
-1263 1708 0
c (SATLiteral(1263) -> SATLiteral(1709))
-1263 1709 0
c (SATLiteral(1266) -> SATLiteral(1710))
-1266 1710 0
c (SATLiteral(1266) -> SATLiteral(1711))
-1266 1711 0
c (SATLiteral(1266) -> SATLiteral(1712))
-1266 1712 0
c (SATLiteral(1266) -> SATLiteral(1713))
-1266 1713 0
c (SATLiteral(1266) -> SATLiteral(1714))
-1266 1714 0
c (SATLiteral(1266) -> SATLiteral(1715))
-1266 1715 0
c (SATLiteral(1266) -> SATLiteral(1716))
-1266 1716 0
c (SATLiteral(1266) -> SATLiteral(1717))
-1266 1717 0
c (SATLiteral(1266) -> SATLiteral(1718))
-1266 1718 0
c (SATLiteral(1268) -> SATLiteral(1719))
-1268 1719 0
c (SATLiteral(1268) -> SATLiteral(1720))
-1268 1720 0
c (SATLiteral(1268) -> SATLiteral(1721))
-1268 1721 0
c (SATLiteral(1268) -> SATLiteral(1722))
-1268 1722 0
c (SATLiteral(1268) -> SATLiteral(1723))
-1268 1723 0
c (SATLiteral(1268) -> SATLiteral(1724))
-1268 1724 0
c (SATLiteral(1268) -> SATLiteral(1725))
-1268 1725 0
c (SATLiteral(1268) -> SATLiteral(1726))
-1268 1726 0
c (SATLiteral(1268) -> SATLiteral(1727))
-1268 1727 0
c (SATLiteral(1270) -> SATLiteral(1728))
-1270 1728 0
c (SATLiteral(1270) -> SATLiteral(1729))
-1270 1729 0
c (SATLiteral(1270) -> SATLiteral(1730))
-1270 1730 0
c (SATLiteral(1270) -> SATLiteral(1731))
-1270 1731 0
c (SATLiteral(1270) -> SATLiteral(1732))
-1270 1732 0
c (SATLiteral(1270) -> SATLiteral(1733))
-1270 1733 0
c (SATLiteral(1270) -> SATLiteral(1734))
-1270 1734 0
c (SATLiteral(1270) -> SATLiteral(1735))
-1270 1735 0
c (SATLiteral(1270) -> SATLiteral(1736))
-1270 1736 0
c (( - aux437 + shift(x_00001_00005, -1) + shift(x_00002_00004, -1))<=0)
182 -1799 0
183 -1800 0
185 -1802 0
187 -1804 0
189 -1806 0
191 -1808 0
193 -1810 0
195 -1812 0
62 -1799 0
62 182 -1800 0
62 183 -1802 0
62 185 -1804 0
62 187 -1806 0
62 189 -1808 0
62 191 -1810 0
62 193 -1812 0
62 195 -1814 0
63 -1800 0
63 182 -1802 0
63 183 -1804 0
63 185 -1806 0
63 187 -1808 0
63 189 -1810 0
63 191 -1812 0
63 193 -1814 0
63 195 -1816 0
65 -1802 0
65 182 -1804 0
65 183 -1806 0
65 185 -1808 0
65 187 -1810 0
65 189 -1812 0
65 191 -1814 0
65 193 -1816 0
65 195 -1818 0
67 -1804 0
67 182 -1806 0
67 183 -1808 0
67 185 -1810 0
67 187 -1812 0
67 189 -1814 0
67 191 -1816 0
67 193 -1818 0
67 195 -1820 0
69 -1806 0
69 182 -1808 0
69 183 -1810 0
69 185 -1812 0
69 187 -1814 0
69 189 -1816 0
69 191 -1818 0
69 193 -1820 0
69 195 -1822 0
71 -1808 0
71 182 -1810 0
71 183 -1812 0
71 185 -1814 0
71 187 -1816 0
71 189 -1818 0
71 191 -1820 0
71 193 -1822 0
71 195 -1824 0
73 -1810 0
73 182 -1812 0
73 183 -1814 0
73 185 -1816 0
73 187 -1818 0
73 189 -1820 0
73 191 -1822 0
73 193 -1824 0
73 195 -1826 0
75 -1812 0
75 182 -1814 0
75 183 -1816 0
75 185 -1818 0
75 187 -1820 0
75 189 -1822 0
75 191 -1824 0
75 193 -1826 0
75 195 -1828 0
c (0<=( - aux437 + shift(x_00001_00005, -1) + shift(x_00002_00004, -1)))
-195 1828 0
-193 1826 0
-191 1824 0
-189 1822 0
-187 1820 0
-185 1818 0
-183 1816 0
-182 1814 0
-75 1828 0
-75 -195 1826 0
-75 -193 1824 0
-75 -191 1822 0
-75 -189 1820 0
-75 -187 1818 0
-75 -185 1816 0
-75 -183 1814 0
-75 -182 1812 0
-73 1826 0
-73 -195 1824 0
-73 -193 1822 0
-73 -191 1820 0
-73 -189 1818 0
-73 -187 1816 0
-73 -185 1814 0
-73 -183 1812 0
-73 -182 1810 0
-71 1824 0
-71 -195 1822 0
-71 -193 1820 0
-71 -191 1818 0
-71 -189 1816 0
-71 -187 1814 0
-71 -185 1812 0
-71 -183 1810 0
-71 -182 1808 0
-69 1822 0
-69 -195 1820 0
-69 -193 1818 0
-69 -191 1816 0
-69 -189 1814 0
-69 -187 1812 0
-69 -185 1810 0
-69 -183 1808 0
-69 -182 1806 0
-67 1820 0
-67 -195 1818 0
-67 -193 1816 0
-67 -191 1814 0
-67 -189 1812 0
-67 -187 1810 0
-67 -185 1808 0
-67 -183 1806 0
-67 -182 1804 0
-65 1818 0
-65 -195 1816 0
-65 -193 1814 0
-65 -191 1812 0
-65 -189 1810 0
-65 -187 1808 0
-65 -185 1806 0
-65 -183 1804 0
-65 -182 1802 0
-63 1816 0
-63 -195 1814 0
-63 -193 1812 0
-63 -191 1810 0
-63 -189 1808 0
-63 -187 1806 0
-63 -185 1804 0
-63 -183 1802 0
-63 -182 1800 0
-62 1814 0
-62 -195 1812 0
-62 -193 1810 0
-62 -191 1808 0
-62 -189 1806 0
-62 -187 1804 0
-62 -185 1802 0
-62 -183 1800 0
-62 -182 1799 0
c (( - aux438 + shift(x_00004_00005, -1) + shift(x_00002_00005, -1))<=0)
197 -1830 0
198 -1831 0
200 -1833 0
202 -1835 0
204 -1837 0
206 -1839 0
208 -1841 0
210 -1843 0
467 -1830 0
467 197 -1831 0
467 198 -1833 0
467 200 -1835 0
467 202 -1837 0
467 204 -1839 0
467 206 -1841 0
467 208 -1843 0
467 210 -1845 0
468 -1831 0
468 197 -1833 0
468 198 -1835 0
468 200 -1837 0
468 202 -1839 0
468 204 -1841 0
468 206 -1843 0
468 208 -1845 0
468 210 -1847 0
470 -1833 0
470 197 -1835 0
470 198 -1837 0
470 200 -1839 0
470 202 -1841 0
470 204 -1843 0
470 206 -1845 0
470 208 -1847 0
470 210 -1849 0
472 -1835 0
472 197 -1837 0
472 198 -1839 0
472 200 -1841 0
472 202 -1843 0
472 204 -1845 0
472 206 -1847 0
472 208 -1849 0
472 210 -1851 0
474 -1837 0
474 197 -1839 0
474 198 -1841 0
474 200 -1843 0
474 202 -1845 0
474 204 -1847 0
474 206 -1849 0
474 208 -1851 0
474 210 -1853 0
476 -1839 0
476 197 -1841 0
476 198 -1843 0
476 200 -1845 0
476 202 -1847 0
476 204 -1849 0
476 206 -1851 0
476 208 -1853 0
476 210 -1855 0
478 -1841 0
478 197 -1843 0
478 198 -1845 0
478 200 -1847 0
478 202 -1849 0
478 204 -1851 0
478 206 -1853 0
478 208 -1855 0
478 210 -1857 0
480 -1843 0
480 197 -1845 0
480 198 -1847 0
480 200 -1849 0
480 202 -1851 0
480 204 -1853 0
480 206 -1855 0
480 208 -1857 0
480 210 -1859 0
c (0<=( - aux438 + shift(x_00004_00005, -1) + shift(x_00002_00005, -1)))
-210 1859 0
-208 1857 0
-206 1855 0
-204 1853 0
-202 1851 0
-200 1849 0
-198 1847 0
-197 1845 0
-480 1859 0
-480 -210 1857 0
-480 -208 1855 0
-480 -206 1853 0
-480 -204 1851 0
-480 -202 1849 0
-480 -200 1847 0
-480 -198 1845 0
-480 -197 1843 0
-478 1857 0
-478 -210 1855 0
-478 -208 1853 0
-478 -206 1851 0
-478 -204 1849 0
-478 -202 1847 0
-478 -200 1845 0
-478 -198 1843 0
-478 -197 1841 0
-476 1855 0
-476 -210 1853 0
-476 -208 1851 0
-476 -206 1849 0
-476 -204 1847 0
-476 -202 1845 0
-476 -200 1843 0
-476 -198 1841 0
-476 -197 1839 0
-474 1853 0
-474 -210 1851 0
-474 -208 1849 0
-474 -206 1847 0
-474 -204 1845 0
-474 -202 1843 0
-474 -200 1841 0
-474 -198 1839 0
-474 -197 1837 0
-472 1851 0
-472 -210 1849 0
-472 -208 1847 0
-472 -206 1845 0
-472 -204 1843 0
-472 -202 1841 0
-472 -200 1839 0
-472 -198 1837 0
-472 -197 1835 0
-470 1849 0
-470 -210 1847 0
-470 -208 1845 0
-470 -206 1843 0
-470 -204 1841 0
-470 -202 1839 0
-470 -200 1837 0
-470 -198 1835 0
-470 -197 1833 0
-468 1847 0
-468 -210 1845 0
-468 -208 1843 0
-468 -206 1841 0
-468 -204 1839 0
-468 -202 1837 0
-468 -200 1835 0
-468 -198 1833 0
-468 -197 1831 0
-467 1845 0
-467 -210 1843 0
-467 -208 1841 0
-467 -206 1839 0
-467 -204 1837 0
-467 -202 1835 0
-467 -200 1833 0
-467 -198 1831 0
-467 -197 1830 0
c (( - aux439 + shift(x_00005_00006, -1) + shift(x_00003_00006, -1))<=0)
347 -1861 0
348 -1862 0
350 -1864 0
352 -1866 0
354 -1868 0
356 -1870 0
358 -1872 0
360 -1874 0
617 -1861 0
617 347 -1862 0
617 348 -1864 0
617 350 -1866 0
617 352 -1868 0
617 354 -1870 0
617 356 -1872 0
617 358 -1874 0
617 360 -1876 0
618 -1862 0
618 347 -1864 0
618 348 -1866 0
618 350 -1868 0
618 352 -1870 0
618 354 -1872 0
618 356 -1874 0
618 358 -1876 0
618 360 -1878 0
620 -1864 0
620 347 -1866 0
620 348 -1868 0
620 350 -1870 0
620 352 -1872 0
620 354 -1874 0
620 356 -1876 0
620 358 -1878 0
620 360 -1880 0
622 -1866 0
622 347 -1868 0
622 348 -1870 0
622 350 -1872 0
622 352 -1874 0
622 354 -1876 0
622 356 -1878 0
622 358 -1880 0
622 360 -1882 0
624 -1868 0
624 347 -1870 0
624 348 -1872 0
624 350 -1874 0
624 352 -1876 0
624 354 -1878 0
624 356 -1880 0
624 358 -1882 0
624 360 -1884 0
626 -1870 0
626 347 -1872 0
626 348 -1874 0
626 350 -1876 0
626 352 -1878 0
626 354 -1880 0
626 356 -1882 0
626 358 -1884 0
626 360 -1886 0
628 -1872 0
628 347 -1874 0
628 348 -1876 0
628 350 -1878 0
628 352 -1880 0
628 354 -1882 0
628 356 -1884 0
628 358 -1886 0
628 360 -1888 0
630 -1874 0
630 347 -1876 0
630 348 -1878 0
630 350 -1880 0
630 352 -1882 0
630 354 -1884 0
630 356 -1886 0
630 358 -1888 0
630 360 -1890 0
c (0<=( - aux439 + shift(x_00005_00006, -1) + shift(x_00003_00006, -1)))
-360 1890 0
-358 1888 0
-356 1886 0
-354 1884 0
-352 1882 0
-350 1880 0
-348 1878 0
-347 1876 0
-630 1890 0
-630 -360 1888 0
-630 -358 1886 0
-630 -356 1884 0
-630 -354 1882 0
-630 -352 1880 0
-630 -350 1878 0
-630 -348 1876 0
-630 -347 1874 0
-628 1888 0
-628 -360 1886 0
-628 -358 1884 0
-628 -356 1882 0
-628 -354 1880 0
-628 -352 1878 0
-628 -350 1876 0
-628 -348 1874 0
-628 -347 1872 0
-626 1886 0
-626 -360 1884 0
-626 -358 1882 0
-626 -356 1880 0
-626 -354 1878 0
-626 -352 1876 0
-626 -350 1874 0
-626 -348 1872 0
-626 -347 1870 0
-624 1884 0
-624 -360 1882 0
-624 -358 1880 0
-624 -356 1878 0
-624 -354 1876 0
-624 -352 1874 0
-624 -350 1872 0
-624 -348 1870 0
-624 -347 1868 0
-622 1882 0
-622 -360 1880 0
-622 -358 1878 0
-622 -356 1876 0
-622 -354 1874 0
-622 -352 1872 0
-622 -350 1870 0
-622 -348 1868 0
-622 -347 1866 0
-620 1880 0
-620 -360 1878 0
-620 -358 1876 0
-620 -356 1874 0
-620 -354 1872 0
-620 -352 1870 0
-620 -350 1868 0
-620 -348 1866 0
-620 -347 1864 0
-618 1878 0
-618 -360 1876 0
-618 -358 1874 0
-618 -356 1872 0
-618 -354 1870 0
-618 -352 1868 0
-618 -350 1866 0
-618 -348 1864 0
-618 -347 1862 0
-617 1876 0
-617 -360 1874 0
-617 -358 1872 0
-617 -356 1870 0
-617 -354 1868 0
-617 -352 1866 0
-617 -350 1864 0
-617 -348 1862 0
-617 -347 1861 0
c (( - aux440 + shift(x_00006_00005, -1) + shift(x_00004_00004, -1))<=0)
452 -1892 0
453 -1893 0
455 -1895 0
457 -1897 0
459 -1899 0
461 -1901 0
463 -1903 0
465 -1905 0
737 -1892 0
737 452 -1893 0
737 453 -1895 0
737 455 -1897 0
737 457 -1899 0
737 459 -1901 0
737 461 -1903 0
737 463 -1905 0
737 465 -1907 0
738 -1893 0
738 452 -1895 0
738 453 -1897 0
738 455 -1899 0
738 457 -1901 0
738 459 -1903 0
738 461 -1905 0
738 463 -1907 0
738 465 -1909 0
740 -1895 0
740 452 -1897 0
740 453 -1899 0
740 455 -1901 0
740 457 -1903 0
740 459 -1905 0
740 461 -1907 0
740 463 -1909 0
740 465 -1911 0
742 -1897 0
742 452 -1899 0
742 453 -1901 0
742 455 -1903 0
742 457 -1905 0
742 459 -1907 0
742 461 -1909 0
742 463 -1911 0
742 465 -1913 0
744 -1899 0
744 452 -1901 0
744 453 -1903 0
744 455 -1905 0
744 457 -1907 0
744 459 -1909 0
744 461 -1911 0
744 463 -1913 0
744 465 -1915 0
746 -1901 0
746 452 -1903 0
746 453 -1905 0
746 455 -1907 0
746 457 -1909 0
746 459 -1911 0
746 461 -1913 0
746 463 -1915 0
746 465 -1917 0
748 -1903 0
748 452 -1905 0
748 453 -1907 0
748 455 -1909 0
748 457 -1911 0
748 459 -1913 0
748 461 -1915 0
748 463 -1917 0
748 465 -1919 0
750 -1905 0
750 452 -1907 0
750 453 -1909 0
750 455 -1911 0
750 457 -1913 0
750 459 -1915 0
750 461 -1917 0
750 463 -1919 0
750 465 -1921 0
c (0<=( - aux440 + shift(x_00006_00005, -1) + shift(x_00004_00004, -1)))
-465 1921 0
-463 1919 0
-461 1917 0
-459 1915 0
-457 1913 0
-455 1911 0
-453 1909 0
-452 1907 0
-750 1921 0
-750 -465 1919 0
-750 -463 1917 0
-750 -461 1915 0
-750 -459 1913 0
-750 -457 1911 0
-750 -455 1909 0
-750 -453 1907 0
-750 -452 1905 0
-748 1919 0
-748 -465 1917 0
-748 -463 1915 0
-748 -461 1913 0
-748 -459 1911 0
-748 -457 1909 0
-748 -455 1907 0
-748 -453 1905 0
-748 -452 1903 0
-746 1917 0
-746 -465 1915 0
-746 -463 1913 0
-746 -461 1911 0
-746 -459 1909 0
-746 -457 1907 0
-746 -455 1905 0
-746 -453 1903 0
-746 -452 1901 0
-744 1915 0
-744 -465 1913 0
-744 -463 1911 0
-744 -461 1909 0
-744 -459 1907 0
-744 -457 1905 0
-744 -455 1903 0
-744 -453 1901 0
-744 -452 1899 0
-742 1913 0
-742 -465 1911 0
-742 -463 1909 0
-742 -461 1907 0
-742 -459 1905 0
-742 -457 1903 0
-742 -455 1901 0
-742 -453 1899 0
-742 -452 1897 0
-740 1911 0
-740 -465 1909 0
-740 -463 1907 0
-740 -461 1905 0
-740 -459 1903 0
-740 -457 1901 0
-740 -455 1899 0
-740 -453 1897 0
-740 -452 1895 0
-738 1909 0
-738 -465 1907 0
-738 -463 1905 0
-738 -461 1903 0
-738 -459 1901 0
-738 -457 1899 0
-738 -455 1897 0
-738 -453 1895 0
-738 -452 1893 0
-737 1907 0
-737 -465 1905 0
-737 -463 1903 0
-737 -461 1901 0
-737 -459 1899 0
-737 -457 1897 0
-737 -455 1895 0
-737 -453 1893 0
-737 -452 1892 0
c ((shift(x_00007_00009, -1) - aux441 + shift(x_00009_00009, -1))<=0)
1202 -1923 0
1203 -1924 0
1205 -1926 0
1207 -1928 0
1209 -1930 0
1211 -1932 0
1213 -1934 0
1215 -1936 0
932 -1923 0
932 1202 -1924 0
932 1203 -1926 0
932 1205 -1928 0
932 1207 -1930 0
932 1209 -1932 0
932 1211 -1934 0
932 1213 -1936 0
932 1215 -1938 0
933 -1924 0
933 1202 -1926 0
933 1203 -1928 0
933 1205 -1930 0
933 1207 -1932 0
933 1209 -1934 0
933 1211 -1936 0
933 1213 -1938 0
933 1215 -1940 0
935 -1926 0
935 1202 -1928 0
935 1203 -1930 0
935 1205 -1932 0
935 1207 -1934 0
935 1209 -1936 0
935 1211 -1938 0
935 1213 -1940 0
935 1215 -1942 0
937 -1928 0
937 1202 -1930 0
937 1203 -1932 0
937 1205 -1934 0
937 1207 -1936 0
937 1209 -1938 0
937 1211 -1940 0
937 1213 -1942 0
937 1215 -1944 0
939 -1930 0
939 1202 -1932 0
939 1203 -1934 0
939 1205 -1936 0
939 1207 -1938 0
939 1209 -1940 0
939 1211 -1942 0
939 1213 -1944 0
939 1215 -1946 0
941 -1932 0
941 1202 -1934 0
941 1203 -1936 0
941 1205 -1938 0
941 1207 -1940 0
941 1209 -1942 0
941 1211 -1944 0
941 1213 -1946 0
941 1215 -1948 0
943 -1934 0
943 1202 -1936 0
943 1203 -1938 0
943 1205 -1940 0
943 1207 -1942 0
943 1209 -1944 0
943 1211 -1946 0
943 1213 -1948 0
943 1215 -1950 0
945 -1936 0
945 1202 -1938 0
945 1203 -1940 0
945 1205 -1942 0
945 1207 -1944 0
945 1209 -1946 0
945 1211 -1948 0
945 1213 -1950 0
945 1215 -1952 0
c (0<=(shift(x_00007_00009, -1) - aux441 + shift(x_00009_00009, -1)))
-1215 1952 0
-1213 1950 0
-1211 1948 0
-1209 1946 0
-1207 1944 0
-1205 1942 0
-1203 1940 0
-1202 1938 0
-945 1952 0
-945 -1215 1950 0
-945 -1213 1948 0
-945 -1211 1946 0
-945 -1209 1944 0
-945 -1207 1942 0
-945 -1205 1940 0
-945 -1203 1938 0
-945 -1202 1936 0
-943 1950 0
-943 -1215 1948 0
-943 -1213 1946 0
-943 -1211 1944 0
-943 -1209 1942 0
-943 -1207 1940 0
-943 -1205 1938 0
-943 -1203 1936 0
-943 -1202 1934 0
-941 1948 0
-941 -1215 1946 0
-941 -1213 1944 0
-941 -1211 1942 0
-941 -1209 1940 0
-941 -1207 1938 0
-941 -1205 1936 0
-941 -1203 1934 0
-941 -1202 1932 0
-939 1946 0
-939 -1215 1944 0
-939 -1213 1942 0
-939 -1211 1940 0
-939 -1209 1938 0
-939 -1207 1936 0
-939 -1205 1934 0
-939 -1203 1932 0
-939 -1202 1930 0
-937 1944 0
-937 -1215 1942 0
-937 -1213 1940 0
-937 -1211 1938 0
-937 -1209 1936 0
-937 -1207 1934 0
-937 -1205 1932 0
-937 -1203 1930 0
-937 -1202 1928 0
-935 1942 0
-935 -1215 1940 0
-935 -1213 1938 0
-935 -1211 1936 0
-935 -1209 1934 0
-935 -1207 1932 0
-935 -1205 1930 0
-935 -1203 1928 0
-935 -1202 1926 0
-933 1940 0
-933 -1215 1938 0
-933 -1213 1936 0
-933 -1211 1934 0
-933 -1209 1932 0
-933 -1207 1930 0
-933 -1205 1928 0
-933 -1203 1926 0
-933 -1202 1924 0
-932 1938 0
-932 -1215 1936 0
-932 -1213 1934 0
-932 -1211 1932 0
-932 -1209 1930 0
-932 -1207 1928 0
-932 -1205 1926 0
-932 -1203 1924 0
-932 -1202 1923 0
c ((SATLiteral(32) - aux1918 + SATLiteral(182))<=0)
-182 -7840 0
-32 -7840 0
-32 -182 -7841 0
c (0<=(SATLiteral(32) - aux1918 + SATLiteral(182)))
182 7841 0
32 7841 0
32 182 7840 0
c ((SATLiteral(34) - aux1919 + SATLiteral(184))<=0)
-184 -7843 0
-34 -7843 0
-34 -184 -7844 0
c (0<=(SATLiteral(34) - aux1919 + SATLiteral(184)))
184 7844 0
34 7844 0
34 184 7843 0
c ((SATLiteral(36) - aux1920 + SATLiteral(186))<=0)
-186 -7846 0
-36 -7846 0
-36 -186 -7847 0
c (0<=(SATLiteral(36) - aux1920 + SATLiteral(186)))
186 7847 0
36 7847 0
36 186 7846 0
c ((SATLiteral(38) - aux1921 + SATLiteral(188))<=0)
-188 -7849 0
-38 -7849 0
-38 -188 -7850 0
c (0<=(SATLiteral(38) - aux1921 + SATLiteral(188)))
188 7850 0
38 7850 0
38 188 7849 0
c ((SATLiteral(40) - aux1922 + SATLiteral(190))<=0)
-190 -7852 0
-40 -7852 0
-40 -190 -7853 0
c (0<=(SATLiteral(40) - aux1922 + SATLiteral(190)))
190 7853 0
40 7853 0
40 190 7852 0
c ((SATLiteral(42) - aux1923 + SATLiteral(192))<=0)
-192 -7855 0
-42 -7855 0
-42 -192 -7856 0
c (0<=(SATLiteral(42) - aux1923 + SATLiteral(192)))
192 7856 0
42 7856 0
42 192 7855 0
c ((SATLiteral(44) - aux1924 + SATLiteral(194))<=0)
-194 -7858 0
-44 -7858 0
-44 -194 -7859 0
c (0<=(SATLiteral(44) - aux1924 + SATLiteral(194)))
194 7859 0
44 7859 0
44 194 7858 0
c ((SATLiteral(46) - aux1925 + SATLiteral(196))<=0)
-196 -7861 0
-46 -7861 0
-46 -196 -7862 0
c (0<=(SATLiteral(46) - aux1925 + SATLiteral(196)))
196 7862 0
46 7862 0
46 196 7861 0
c ((SATLiteral(-45) - aux1926 + SATLiteral(-195))<=0)
195 -7864 0
45 -7864 0
45 195 -7865 0
c (0<=(SATLiteral(-45) - aux1926 + SATLiteral(-195)))
-195 7865 0
-45 7865 0
-45 -195 7864 0
c ((SATLiteral(317) - aux1927 + SATLiteral(197))<=0)
-197 -7867 0
-317 -7867 0
-317 -197 -7868 0
c (0<=(SATLiteral(317) - aux1927 + SATLiteral(197)))
197 7868 0
317 7868 0
317 197 7867 0
c ((SATLiteral(319) - aux1928 + SATLiteral(199))<=0)
-199 -7870 0
-319 -7870 0
-319 -199 -7871 0
c (0<=(SATLiteral(319) - aux1928 + SATLiteral(199)))
199 7871 0
319 7871 0
319 199 7870 0
c ((SATLiteral(321) - aux1929 + SATLiteral(201))<=0)
-201 -7873 0
-321 -7873 0
-321 -201 -7874 0
c (0<=(SATLiteral(321) - aux1929 + SATLiteral(201)))
201 7874 0
321 7874 0
321 201 7873 0
c ((SATLiteral(323) - aux1930 + SATLiteral(203))<=0)
-203 -7876 0
-323 -7876 0
-323 -203 -7877 0
c (0<=(SATLiteral(323) - aux1930 + SATLiteral(203)))
203 7877 0
323 7877 0
323 203 7876 0
c ((SATLiteral(325) - aux1931 + SATLiteral(205))<=0)
-205 -7879 0
-325 -7879 0
-325 -205 -7880 0
c (0<=(SATLiteral(325) - aux1931 + SATLiteral(205)))
205 7880 0
325 7880 0
325 205 7879 0
c ((SATLiteral(327) - aux1932 + SATLiteral(207))<=0)
-207 -7882 0
-327 -7882 0
-327 -207 -7883 0
c (0<=(SATLiteral(327) - aux1932 + SATLiteral(207)))
207 7883 0
327 7883 0
327 207 7882 0
c ((SATLiteral(329) - aux1933 + SATLiteral(209))<=0)
-209 -7885 0
-329 -7885 0
-329 -209 -7886 0
c (0<=(SATLiteral(329) - aux1933 + SATLiteral(209)))
209 7886 0
329 7886 0
329 209 7885 0
c ((SATLiteral(331) - aux1934 + SATLiteral(211))<=0)
-211 -7888 0
-331 -7888 0
-331 -211 -7889 0
c (0<=(SATLiteral(331) - aux1934 + SATLiteral(211)))
211 7889 0
331 7889 0
331 211 7888 0
c ((SATLiteral(-330) - aux1935 + SATLiteral(-210))<=0)
210 -7891 0
330 -7891 0
330 210 -7892 0
c (0<=(SATLiteral(-330) - aux1935 + SATLiteral(-210)))
-210 7892 0
-330 7892 0
-330 -210 7891 0
c ((SATLiteral(347) - aux1936 + SATLiteral(617))<=0)
-617 -7894 0
-347 -7894 0
-347 -617 -7895 0
c (0<=(SATLiteral(347) - aux1936 + SATLiteral(617)))
617 7895 0
347 7895 0
347 617 7894 0
c ((SATLiteral(349) - aux1937 + SATLiteral(619))<=0)
-619 -7897 0
-349 -7897 0
-349 -619 -7898 0
c (0<=(SATLiteral(349) - aux1937 + SATLiteral(619)))
619 7898 0
349 7898 0
349 619 7897 0
c ((SATLiteral(351) - aux1938 + SATLiteral(621))<=0)
-621 -7900 0
-351 -7900 0
-351 -621 -7901 0
c (0<=(SATLiteral(351) - aux1938 + SATLiteral(621)))
621 7901 0
351 7901 0
351 621 7900 0
c ((SATLiteral(353) - aux1939 + SATLiteral(623))<=0)
-623 -7903 0
-353 -7903 0
-353 -623 -7904 0
c (0<=(SATLiteral(353) - aux1939 + SATLiteral(623)))
623 7904 0
353 7904 0
353 623 7903 0
c ((SATLiteral(355) - aux1940 + SATLiteral(625))<=0)
-625 -7906 0
-355 -7906 0
-355 -625 -7907 0
c (0<=(SATLiteral(355) - aux1940 + SATLiteral(625)))
625 7907 0
355 7907 0
355 625 7906 0
c ((SATLiteral(357) - aux1941 + SATLiteral(627))<=0)
-627 -7909 0
-357 -7909 0
-357 -627 -7910 0
c (0<=(SATLiteral(357) - aux1941 + SATLiteral(627)))
627 7910 0
357 7910 0
357 627 7909 0
c ((SATLiteral(359) - aux1942 + SATLiteral(629))<=0)
-629 -7912 0
-359 -7912 0
-359 -629 -7913 0
c (0<=(SATLiteral(359) - aux1942 + SATLiteral(629)))
629 7913 0
359 7913 0
359 629 7912 0
c ((SATLiteral(361) - aux1943 + SATLiteral(631))<=0)
-631 -7915 0
-361 -7915 0
-361 -631 -7916 0
c (0<=(SATLiteral(361) - aux1943 + SATLiteral(631)))
631 7916 0
361 7916 0
361 631 7915 0
c ((SATLiteral(-360) - aux1944 + SATLiteral(-630))<=0)
630 -7918 0
360 -7918 0
360 630 -7919 0
c (0<=(SATLiteral(-360) - aux1944 + SATLiteral(-630)))
-630 7919 0
-360 7919 0
-360 -630 7918 0
c ((SATLiteral(722) - aux1945 + SATLiteral(587))<=0)
-587 -7921 0
-722 -7921 0
-722 -587 -7922 0
c (0<=(SATLiteral(722) - aux1945 + SATLiteral(587)))
587 7922 0
722 7922 0
722 587 7921 0
c ((SATLiteral(724) - aux1946 + SATLiteral(589))<=0)
-589 -7924 0
-724 -7924 0
-724 -589 -7925 0
c (0<=(SATLiteral(724) - aux1946 + SATLiteral(589)))
589 7925 0
724 7925 0
724 589 7924 0
c ((SATLiteral(726) - aux1947 + SATLiteral(591))<=0)
-591 -7927 0
-726 -7927 0
-726 -591 -7928 0
c (0<=(SATLiteral(726) - aux1947 + SATLiteral(591)))
591 7928 0
726 7928 0
726 591 7927 0
c ((SATLiteral(728) - aux1948 + SATLiteral(593))<=0)
-593 -7930 0
-728 -7930 0
-728 -593 -7931 0
c (0<=(SATLiteral(728) - aux1948 + SATLiteral(593)))
593 7931 0
728 7931 0
728 593 7930 0
c ((SATLiteral(730) - aux1949 + SATLiteral(595))<=0)
-595 -7933 0
-730 -7933 0
-730 -595 -7934 0
c (0<=(SATLiteral(730) - aux1949 + SATLiteral(595)))
595 7934 0
730 7934 0
730 595 7933 0
c ((SATLiteral(732) - aux1950 + SATLiteral(597))<=0)
-597 -7936 0
-732 -7936 0
-732 -597 -7937 0
c (0<=(SATLiteral(732) - aux1950 + SATLiteral(597)))
597 7937 0
732 7937 0
732 597 7936 0
c ((SATLiteral(734) - aux1951 + SATLiteral(599))<=0)
-599 -7939 0
-734 -7939 0
-734 -599 -7940 0
c (0<=(SATLiteral(734) - aux1951 + SATLiteral(599)))
599 7940 0
734 7940 0
734 599 7939 0
c ((SATLiteral(736) - aux1952 + SATLiteral(601))<=0)
-601 -7942 0
-736 -7942 0
-736 -601 -7943 0
c (0<=(SATLiteral(736) - aux1952 + SATLiteral(601)))
601 7943 0
736 7943 0
736 601 7942 0
c ((SATLiteral(-735) - aux1953 + SATLiteral(-600))<=0)
600 -7945 0
735 -7945 0
735 600 -7946 0
c (0<=(SATLiteral(-735) - aux1953 + SATLiteral(-600)))
-600 7946 0
-735 7946 0
-735 -600 7945 0
c ((SATLiteral(1067) - aux1954 + SATLiteral(932))<=0)
-932 -7948 0
-1067 -7948 0
-1067 -932 -7949 0
c (0<=(SATLiteral(1067) - aux1954 + SATLiteral(932)))
932 7949 0
1067 7949 0
1067 932 7948 0
c ((SATLiteral(1069) - aux1955 + SATLiteral(934))<=0)
-934 -7951 0
-1069 -7951 0
-1069 -934 -7952 0
c (0<=(SATLiteral(1069) - aux1955 + SATLiteral(934)))
934 7952 0
1069 7952 0
1069 934 7951 0
c ((SATLiteral(1071) - aux1956 + SATLiteral(936))<=0)
-936 -7954 0
-1071 -7954 0
-1071 -936 -7955 0
c (0<=(SATLiteral(1071) - aux1956 + SATLiteral(936)))
936 7955 0
1071 7955 0
1071 936 7954 0
c ((SATLiteral(1073) - aux1957 + SATLiteral(938))<=0)
-938 -7957 0
-1073 -7957 0
-1073 -938 -7958 0
c (0<=(SATLiteral(1073) - aux1957 + SATLiteral(938)))
938 7958 0
1073 7958 0
1073 938 7957 0
c ((SATLiteral(1075) - aux1958 + SATLiteral(940))<=0)
-940 -7960 0
-1075 -7960 0
-1075 -940 -7961 0
c (0<=(SATLiteral(1075) - aux1958 + SATLiteral(940)))
940 7961 0
1075 7961 0
1075 940 7960 0
c ((SATLiteral(1077) - aux1959 + SATLiteral(942))<=0)
-942 -7963 0
-1077 -7963 0
-1077 -942 -7964 0
c (0<=(SATLiteral(1077) - aux1959 + SATLiteral(942)))
942 7964 0
1077 7964 0
1077 942 7963 0
c ((SATLiteral(1079) - aux1960 + SATLiteral(944))<=0)
-944 -7966 0
-1079 -7966 0
-1079 -944 -7967 0
c (0<=(SATLiteral(1079) - aux1960 + SATLiteral(944)))
944 7967 0
1079 7967 0
1079 944 7966 0
c ((SATLiteral(1081) - aux1961 + SATLiteral(946))<=0)
-946 -7969 0
-1081 -7969 0
-1081 -946 -7970 0
c (0<=(SATLiteral(1081) - aux1961 + SATLiteral(946)))
946 7970 0
1081 7970 0
1081 946 7969 0
c ((SATLiteral(-1080) - aux1962 + SATLiteral(-945))<=0)
945 -7972 0
1080 -7972 0
1080 945 -7973 0
c (0<=(SATLiteral(-1080) - aux1962 + SATLiteral(-945)))
-945 7973 0
-1080 7973 0
-1080 -945 7972 0
c (( - aux435 + shift(x_00001_00002, -1) + shift(x_00002_00001, -1))<=0)
137 -1737 0
138 -1738 0
140 -1740 0
142 -1742 0
144 -1744 0
146 -1746 0
148 -1748 0
150 -1750 0
17 -1737 0
17 137 -1738 0
17 138 -1740 0
17 140 -1742 0
17 142 -1744 0
17 144 -1746 0
17 146 -1748 0
17 148 -1750 0
17 150 -1752 0
18 -1738 0
18 137 -1740 0
18 138 -1742 0
18 140 -1744 0
18 142 -1746 0
18 144 -1748 0
18 146 -1750 0
18 148 -1752 0
18 150 -1754 0
20 -1740 0
20 137 -1742 0
20 138 -1744 0
20 140 -1746 0
20 142 -1748 0
20 144 -1750 0
20 146 -1752 0
20 148 -1754 0
20 150 -1756 0
22 -1742 0
22 137 -1744 0
22 138 -1746 0
22 140 -1748 0
22 142 -1750 0
22 144 -1752 0
22 146 -1754 0
22 148 -1756 0
22 150 -1758 0
24 -1744 0
24 137 -1746 0
24 138 -1748 0
24 140 -1750 0
24 142 -1752 0
24 144 -1754 0
24 146 -1756 0
24 148 -1758 0
24 150 -1760 0
26 -1746 0
26 137 -1748 0
26 138 -1750 0
26 140 -1752 0
26 142 -1754 0
26 144 -1756 0
26 146 -1758 0
26 148 -1760 0
26 150 -1762 0
28 -1748 0
28 137 -1750 0
28 138 -1752 0
28 140 -1754 0
28 142 -1756 0
28 144 -1758 0
28 146 -1760 0
28 148 -1762 0
28 150 -1764 0
30 -1750 0
30 137 -1752 0
30 138 -1754 0
30 140 -1756 0
30 142 -1758 0
30 144 -1760 0
30 146 -1762 0
30 148 -1764 0
30 150 -1766 0
c (0<=( - aux435 + shift(x_00001_00002, -1) + shift(x_00002_00001, -1)))
-150 1766 0
-148 1764 0
-146 1762 0
-144 1760 0
-142 1758 0
-140 1756 0
-138 1754 0
-137 1752 0
-30 1766 0
-30 -150 1764 0
-30 -148 1762 0
-30 -146 1760 0
-30 -144 1758 0
-30 -142 1756 0
-30 -140 1754 0
-30 -138 1752 0
-30 -137 1750 0
-28 1764 0
-28 -150 1762 0
-28 -148 1760 0
-28 -146 1758 0
-28 -144 1756 0
-28 -142 1754 0
-28 -140 1752 0
-28 -138 1750 0
-28 -137 1748 0
-26 1762 0
-26 -150 1760 0
-26 -148 1758 0
-26 -146 1756 0
-26 -144 1754 0
-26 -142 1752 0
-26 -140 1750 0
-26 -138 1748 0
-26 -137 1746 0
-24 1760 0
-24 -150 1758 0
-24 -148 1756 0
-24 -146 1754 0
-24 -144 1752 0
-24 -142 1750 0
-24 -140 1748 0
-24 -138 1746 0
-24 -137 1744 0
-22 1758 0
-22 -150 1756 0
-22 -148 1754 0
-22 -146 1752 0
-22 -144 1750 0
-22 -142 1748 0
-22 -140 1746 0
-22 -138 1744 0
-22 -137 1742 0
-20 1756 0
-20 -150 1754 0
-20 -148 1752 0
-20 -146 1750 0
-20 -144 1748 0
-20 -142 1746 0
-20 -140 1744 0
-20 -138 1742 0
-20 -137 1740 0
-18 1754 0
-18 -150 1752 0
-18 -148 1750 0
-18 -146 1748 0
-18 -144 1746 0
-18 -142 1744 0
-18 -140 1742 0
-18 -138 1740 0
-18 -137 1738 0
-17 1752 0
-17 -150 1750 0
-17 -148 1748 0
-17 -146 1746 0
-17 -144 1744 0
-17 -142 1742 0
-17 -140 1740 0
-17 -138 1738 0
-17 -137 1737 0
c (( - aux436 + shift(x_00001_00001, -1) + shift(x_00002_00002, -1))<=0)
152 -1768 0
153 -1769 0
155 -1771 0
157 -1773 0
159 -1775 0
161 -1777 0
163 -1779 0
165 -1781 0
2 -1768 0
2 152 -1769 0
2 153 -1771 0
2 155 -1773 0
2 157 -1775 0
2 159 -1777 0
2 161 -1779 0
2 163 -1781 0
2 165 -1783 0
3 -1769 0
3 152 -1771 0
3 153 -1773 0
3 155 -1775 0
3 157 -1777 0
3 159 -1779 0
3 161 -1781 0
3 163 -1783 0
3 165 -1785 0
5 -1771 0
5 152 -1773 0
5 153 -1775 0
5 155 -1777 0
5 157 -1779 0
5 159 -1781 0
5 161 -1783 0
5 163 -1785 0
5 165 -1787 0
7 -1773 0
7 152 -1775 0
7 153 -1777 0
7 155 -1779 0
7 157 -1781 0
7 159 -1783 0
7 161 -1785 0
7 163 -1787 0
7 165 -1789 0
9 -1775 0
9 152 -1777 0
9 153 -1779 0
9 155 -1781 0
9 157 -1783 0
9 159 -1785 0
9 161 -1787 0
9 163 -1789 0
9 165 -1791 0
11 -1777 0
11 152 -1779 0
11 153 -1781 0
11 155 -1783 0
11 157 -1785 0
11 159 -1787 0
11 161 -1789 0
11 163 -1791 0
11 165 -1793 0
13 -1779 0
13 152 -1781 0
13 153 -1783 0
13 155 -1785 0
13 157 -1787 0
13 159 -1789 0
13 161 -1791 0
13 163 -1793 0
13 165 -1795 0
15 -1781 0
15 152 -1783 0
15 153 -1785 0
15 155 -1787 0
15 157 -1789 0
15 159 -1791 0
15 161 -1793 0
15 163 -1795 0
15 165 -1797 0
c (0<=( - aux436 + shift(x_00001_00001, -1) + shift(x_00002_00002, -1)))
-165 1797 0
-163 1795 0
-161 1793 0
-159 1791 0
-157 1789 0
-155 1787 0
-153 1785 0
-152 1783 0
-15 1797 0
-15 -165 1795 0
-15 -163 1793 0
-15 -161 1791 0
-15 -159 1789 0
-15 -157 1787 0
-15 -155 1785 0
-15 -153 1783 0
-15 -152 1781 0
-13 1795 0
-13 -165 1793 0
-13 -163 1791 0
-13 -161 1789 0
-13 -159 1787 0
-13 -157 1785 0
-13 -155 1783 0
-13 -153 1781 0
-13 -152 1779 0
-11 1793 0
-11 -165 1791 0
-11 -163 1789 0
-11 -161 1787 0
-11 -159 1785 0
-11 -157 1783 0
-11 -155 1781 0
-11 -153 1779 0
-11 -152 1777 0
-9 1791 0
-9 -165 1789 0
-9 -163 1787 0
-9 -161 1785 0
-9 -159 1783 0
-9 -157 1781 0
-9 -155 1779 0
-9 -153 1777 0
-9 -152 1775 0
-7 1789 0
-7 -165 1787 0
-7 -163 1785 0
-7 -161 1783 0
-7 -159 1781 0
-7 -157 1779 0
-7 -155 1777 0
-7 -153 1775 0
-7 -152 1773 0
-5 1787 0
-5 -165 1785 0
-5 -163 1783 0
-5 -161 1781 0
-5 -159 1779 0
-5 -157 1777 0
-5 -155 1775 0
-5 -153 1773 0
-5 -152 1771 0
-3 1785 0
-3 -165 1783 0
-3 -163 1781 0
-3 -161 1779 0
-3 -159 1777 0
-3 -157 1775 0
-3 -155 1773 0
-3 -153 1771 0
-3 -152 1769 0
-2 1783 0
-2 -165 1781 0
-2 -163 1779 0
-2 -161 1777 0
-2 -159 1775 0
-2 -157 1773 0
-2 -155 1771 0
-2 -153 1769 0
-2 -152 1768 0
c ((SATLiteral(272) - aux442 + SATLiteral(542))<=0)
-542 -1954 0
-272 -1954 0
-272 -542 -1955 0
c (0<=(SATLiteral(272) - aux442 + SATLiteral(542)))
542 1955 0
272 1955 0
272 542 1954 0
c ((SATLiteral(947) - aux443 + SATLiteral(812))<=0)
-812 -1957 0
-947 -1957 0
-947 -812 -1958 0
c (0<=(SATLiteral(947) - aux443 + SATLiteral(812)))
812 1958 0
947 1958 0
947 812 1957 0
c (( - aux444 + SATLiteral(677) + SATLiteral(137))<=0)
-137 -1960 0
-677 -1960 0
-677 -137 -1961 0
c (0<=( - aux444 + SATLiteral(677) + SATLiteral(137)))
137 1961 0
677 1961 0
677 137 1960 0
c (( - aux445 + SATLiteral(407) + SATLiteral(1082))<=0)
-1082 -1963 0
-407 -1963 0
-407 -1082 -1964 0
c (0<=( - aux445 + SATLiteral(407) + SATLiteral(1082)))
1082 1964 0
407 1964 0
407 1082 1963 0
c ((aux445 - aux446 + SATLiteral(2))<=0)
1963 -1966 0
1964 -1967 0
-2 -1966 0
-2 1963 -1967 0
-2 1964 -1969 0
c (0<=(aux445 - aux446 + SATLiteral(2)))
-1964 1969 0
-1963 1967 0
2 1969 0
2 -1964 1967 0
2 -1963 1966 0
c ((aux442 + aux444 - aux447)<=0)
1960 -1971 0
1961 -1972 0
1954 -1971 0
1954 1960 -1972 0
1954 1961 -1974 0
1955 -1972 0
1955 1960 -1974 0
1955 1961 -1976 0
c (0<=(aux442 + aux444 - aux447))
-1961 1976 0
-1960 1974 0
-1955 1976 0
-1955 -1961 1974 0
-1955 -1960 1972 0
-1954 1974 0
-1954 -1961 1972 0
-1954 -1960 1971 0
c ((SATLiteral(274) - aux448 + SATLiteral(544))<=0)
-544 -1978 0
-274 -1978 0
-274 -544 -1979 0
c (0<=(SATLiteral(274) - aux448 + SATLiteral(544)))
544 1979 0
274 1979 0
274 544 1978 0
c ((SATLiteral(949) - aux449 + SATLiteral(814))<=0)
-814 -1981 0
-949 -1981 0
-949 -814 -1982 0
c (0<=(SATLiteral(949) - aux449 + SATLiteral(814)))
814 1982 0
949 1982 0
949 814 1981 0
c (( - aux450 + SATLiteral(679) + SATLiteral(139))<=0)
-139 -1984 0
-679 -1984 0
-679 -139 -1985 0
c (0<=( - aux450 + SATLiteral(679) + SATLiteral(139)))
139 1985 0
679 1985 0
679 139 1984 0
c (( - aux451 + SATLiteral(409) + SATLiteral(1084))<=0)
-1084 -1987 0
-409 -1987 0
-409 -1084 -1988 0
c (0<=( - aux451 + SATLiteral(409) + SATLiteral(1084)))
1084 1988 0
409 1988 0
409 1084 1987 0
c ((aux451 - aux452 + SATLiteral(4))<=0)
1987 -1990 0
1988 -1991 0
-4 -1990 0
-4 1987 -1991 0
-4 1988 -1993 0
c (0<=(aux451 - aux452 + SATLiteral(4)))
-1988 1993 0
-1987 1991 0
4 1993 0
4 -1988 1991 0
4 -1987 1990 0
c ((aux448 + aux450 - aux453)<=0)
1984 -1995 0
1985 -1996 0
1978 -1995 0
1978 1984 -1996 0
1978 1985 -1998 0
1979 -1996 0
1979 1984 -1998 0
1979 1985 -2000 0
c (0<=(aux448 + aux450 - aux453))
-1985 2000 0
-1984 1998 0
-1979 2000 0
-1979 -1985 1998 0
-1979 -1984 1996 0
-1978 1998 0
-1978 -1985 1996 0
-1978 -1984 1995 0
c ((SATLiteral(276) - aux454 + SATLiteral(546))<=0)
-546 -2002 0
-276 -2002 0
-276 -546 -2003 0
c (0<=(SATLiteral(276) - aux454 + SATLiteral(546)))
546 2003 0
276 2003 0
276 546 2002 0
c ((SATLiteral(951) - aux455 + SATLiteral(816))<=0)
-816 -2005 0
-951 -2005 0
-951 -816 -2006 0
c (0<=(SATLiteral(951) - aux455 + SATLiteral(816)))
816 2006 0
951 2006 0
951 816 2005 0
c (( - aux456 + SATLiteral(681) + SATLiteral(141))<=0)
-141 -2008 0
-681 -2008 0
-681 -141 -2009 0
c (0<=( - aux456 + SATLiteral(681) + SATLiteral(141)))
141 2009 0
681 2009 0
681 141 2008 0
c (( - aux457 + SATLiteral(411) + SATLiteral(1086))<=0)
-1086 -2011 0
-411 -2011 0
-411 -1086 -2012 0
c (0<=( - aux457 + SATLiteral(411) + SATLiteral(1086)))
1086 2012 0
411 2012 0
411 1086 2011 0
c ((aux457 - aux458 + SATLiteral(6))<=0)
2011 -2014 0
2012 -2015 0
-6 -2014 0
-6 2011 -2015 0
-6 2012 -2017 0
c (0<=(aux457 - aux458 + SATLiteral(6)))
-2012 2017 0
-2011 2015 0
6 2017 0
6 -2012 2015 0
6 -2011 2014 0
c ((aux454 + aux456 - aux459)<=0)
2008 -2019 0
2009 -2020 0
2002 -2019 0
2002 2008 -2020 0
2002 2009 -2022 0
2003 -2020 0
2003 2008 -2022 0
2003 2009 -2024 0
c (0<=(aux454 + aux456 - aux459))
-2009 2024 0
-2008 2022 0
-2003 2024 0
-2003 -2009 2022 0
-2003 -2008 2020 0
-2002 2022 0
-2002 -2009 2020 0
-2002 -2008 2019 0
c ((SATLiteral(278) - aux460 + SATLiteral(548))<=0)
-548 -2026 0
-278 -2026 0
-278 -548 -2027 0
c (0<=(SATLiteral(278) - aux460 + SATLiteral(548)))
548 2027 0
278 2027 0
278 548 2026 0
c ((SATLiteral(953) - aux461 + SATLiteral(818))<=0)
-818 -2029 0
-953 -2029 0
-953 -818 -2030 0
c (0<=(SATLiteral(953) - aux461 + SATLiteral(818)))
818 2030 0
953 2030 0
953 818 2029 0
c (( - aux462 + SATLiteral(683) + SATLiteral(143))<=0)
-143 -2032 0
-683 -2032 0
-683 -143 -2033 0
c (0<=( - aux462 + SATLiteral(683) + SATLiteral(143)))
143 2033 0
683 2033 0
683 143 2032 0
c (( - aux463 + SATLiteral(413) + SATLiteral(1088))<=0)
-1088 -2035 0
-413 -2035 0
-413 -1088 -2036 0
c (0<=( - aux463 + SATLiteral(413) + SATLiteral(1088)))
1088 2036 0
413 2036 0
413 1088 2035 0
c ((aux463 - aux464 + SATLiteral(8))<=0)
2035 -2038 0
2036 -2039 0
-8 -2038 0
-8 2035 -2039 0
-8 2036 -2041 0
c (0<=(aux463 - aux464 + SATLiteral(8)))
-2036 2041 0
-2035 2039 0
8 2041 0
8 -2036 2039 0
8 -2035 2038 0
c ((aux460 + aux462 - aux465)<=0)
2032 -2043 0
2033 -2044 0
2026 -2043 0
2026 2032 -2044 0
2026 2033 -2046 0
2027 -2044 0
2027 2032 -2046 0
2027 2033 -2048 0
c (0<=(aux460 + aux462 - aux465))
-2033 2048 0
-2032 2046 0
-2027 2048 0
-2027 -2033 2046 0
-2027 -2032 2044 0
-2026 2046 0
-2026 -2033 2044 0
-2026 -2032 2043 0
c ((SATLiteral(280) - aux466 + SATLiteral(550))<=0)
-550 -2050 0
-280 -2050 0
-280 -550 -2051 0
c (0<=(SATLiteral(280) - aux466 + SATLiteral(550)))
550 2051 0
280 2051 0
280 550 2050 0
c ((SATLiteral(955) - aux467 + SATLiteral(820))<=0)
-820 -2053 0
-955 -2053 0
-955 -820 -2054 0
c (0<=(SATLiteral(955) - aux467 + SATLiteral(820)))
820 2054 0
955 2054 0
955 820 2053 0
c (( - aux468 + SATLiteral(685) + SATLiteral(145))<=0)
-145 -2056 0
-685 -2056 0
-685 -145 -2057 0
c (0<=( - aux468 + SATLiteral(685) + SATLiteral(145)))
145 2057 0
685 2057 0
685 145 2056 0
c (( - aux469 + SATLiteral(415) + SATLiteral(1090))<=0)
-1090 -2059 0
-415 -2059 0
-415 -1090 -2060 0
c (0<=( - aux469 + SATLiteral(415) + SATLiteral(1090)))
1090 2060 0
415 2060 0
415 1090 2059 0
c ((aux469 - aux470 + SATLiteral(10))<=0)
2059 -2062 0
2060 -2063 0
-10 -2062 0
-10 2059 -2063 0
-10 2060 -2065 0
c (0<=(aux469 - aux470 + SATLiteral(10)))
-2060 2065 0
-2059 2063 0
10 2065 0
10 -2060 2063 0
10 -2059 2062 0
c ((aux466 + aux468 - aux471)<=0)
2056 -2067 0
2057 -2068 0
2050 -2067 0
2050 2056 -2068 0
2050 2057 -2070 0
2051 -2068 0
2051 2056 -2070 0
2051 2057 -2072 0
c (0<=(aux466 + aux468 - aux471))
-2057 2072 0
-2056 2070 0
-2051 2072 0
-2051 -2057 2070 0
-2051 -2056 2068 0
-2050 2070 0
-2050 -2057 2068 0
-2050 -2056 2067 0
c ((SATLiteral(282) - aux472 + SATLiteral(552))<=0)
-552 -2074 0
-282 -2074 0
-282 -552 -2075 0
c (0<=(SATLiteral(282) - aux472 + SATLiteral(552)))
552 2075 0
282 2075 0
282 552 2074 0
c ((SATLiteral(957) - aux473 + SATLiteral(822))<=0)
-822 -2077 0
-957 -2077 0
-957 -822 -2078 0
c (0<=(SATLiteral(957) - aux473 + SATLiteral(822)))
822 2078 0
957 2078 0
957 822 2077 0
c (( - aux474 + SATLiteral(687) + SATLiteral(147))<=0)
-147 -2080 0
-687 -2080 0
-687 -147 -2081 0
c (0<=( - aux474 + SATLiteral(687) + SATLiteral(147)))
147 2081 0
687 2081 0
687 147 2080 0
c (( - aux475 + SATLiteral(417) + SATLiteral(1092))<=0)
-1092 -2083 0
-417 -2083 0
-417 -1092 -2084 0
c (0<=( - aux475 + SATLiteral(417) + SATLiteral(1092)))
1092 2084 0
417 2084 0
417 1092 2083 0
c ((aux475 - aux476 + SATLiteral(12))<=0)
2083 -2086 0
2084 -2087 0
-12 -2086 0
-12 2083 -2087 0
-12 2084 -2089 0
c (0<=(aux475 - aux476 + SATLiteral(12)))
-2084 2089 0
-2083 2087 0
12 2089 0
12 -2084 2087 0
12 -2083 2086 0
c ((aux472 + aux474 - aux477)<=0)
2080 -2091 0
2081 -2092 0
2074 -2091 0
2074 2080 -2092 0
2074 2081 -2094 0
2075 -2092 0
2075 2080 -2094 0
2075 2081 -2096 0
c (0<=(aux472 + aux474 - aux477))
-2081 2096 0
-2080 2094 0
-2075 2096 0
-2075 -2081 2094 0
-2075 -2080 2092 0
-2074 2094 0
-2074 -2081 2092 0
-2074 -2080 2091 0
c ((SATLiteral(284) - aux478 + SATLiteral(554))<=0)
-554 -2098 0
-284 -2098 0
-284 -554 -2099 0
c (0<=(SATLiteral(284) - aux478 + SATLiteral(554)))
554 2099 0
284 2099 0
284 554 2098 0
c ((SATLiteral(959) - aux479 + SATLiteral(824))<=0)
-824 -2101 0
-959 -2101 0
-959 -824 -2102 0
c (0<=(SATLiteral(959) - aux479 + SATLiteral(824)))
824 2102 0
959 2102 0
959 824 2101 0
c (( - aux480 + SATLiteral(689) + SATLiteral(149))<=0)
-149 -2104 0
-689 -2104 0
-689 -149 -2105 0
c (0<=( - aux480 + SATLiteral(689) + SATLiteral(149)))
149 2105 0
689 2105 0
689 149 2104 0
c (( - aux481 + SATLiteral(419) + SATLiteral(1094))<=0)
-1094 -2107 0
-419 -2107 0
-419 -1094 -2108 0
c (0<=( - aux481 + SATLiteral(419) + SATLiteral(1094)))
1094 2108 0
419 2108 0
419 1094 2107 0
c ((aux481 - aux482 + SATLiteral(14))<=0)
2107 -2110 0
2108 -2111 0
-14 -2110 0
-14 2107 -2111 0
-14 2108 -2113 0
c (0<=(aux481 - aux482 + SATLiteral(14)))
-2108 2113 0
-2107 2111 0
14 2113 0
14 -2108 2111 0
14 -2107 2110 0
c ((aux478 + aux480 - aux483)<=0)
2104 -2115 0
2105 -2116 0
2098 -2115 0
2098 2104 -2116 0
2098 2105 -2118 0
2099 -2116 0
2099 2104 -2118 0
2099 2105 -2120 0
c (0<=(aux478 + aux480 - aux483))
-2105 2120 0
-2104 2118 0
-2099 2120 0
-2099 -2105 2118 0
-2099 -2104 2116 0
-2098 2118 0
-2098 -2105 2116 0
-2098 -2104 2115 0
c ((SATLiteral(286) - aux484 + SATLiteral(556))<=0)
-556 -2122 0
-286 -2122 0
-286 -556 -2123 0
c (0<=(SATLiteral(286) - aux484 + SATLiteral(556)))
556 2123 0
286 2123 0
286 556 2122 0
c ((SATLiteral(961) - aux485 + SATLiteral(826))<=0)
-826 -2125 0
-961 -2125 0
-961 -826 -2126 0
c (0<=(SATLiteral(961) - aux485 + SATLiteral(826)))
826 2126 0
961 2126 0
961 826 2125 0
c (( - aux486 + SATLiteral(691) + SATLiteral(151))<=0)
-151 -2128 0
-691 -2128 0
-691 -151 -2129 0
c (0<=( - aux486 + SATLiteral(691) + SATLiteral(151)))
151 2129 0
691 2129 0
691 151 2128 0
c (( - aux487 + SATLiteral(421) + SATLiteral(1096))<=0)
-1096 -2131 0
-421 -2131 0
-421 -1096 -2132 0
c (0<=( - aux487 + SATLiteral(421) + SATLiteral(1096)))
1096 2132 0
421 2132 0
421 1096 2131 0
c ((aux487 - aux488 + SATLiteral(16))<=0)
2131 -2134 0
2132 -2135 0
-16 -2134 0
-16 2131 -2135 0
-16 2132 -2137 0
c (0<=(aux487 - aux488 + SATLiteral(16)))
-2132 2137 0
-2131 2135 0
16 2137 0
16 -2132 2135 0
16 -2131 2134 0
c ((aux484 + aux486 - aux489)<=0)
2128 -2139 0
2129 -2140 0
2122 -2139 0
2122 2128 -2140 0
2122 2129 -2142 0
2123 -2140 0
2123 2128 -2142 0
2123 2129 -2144 0
c (0<=(aux484 + aux486 - aux489))
-2129 2144 0
-2128 2142 0
-2123 2144 0
-2123 -2129 2142 0
-2123 -2128 2140 0
-2122 2142 0
-2122 -2129 2140 0
-2122 -2128 2139 0
c ((SATLiteral(-285) - aux490 + SATLiteral(-555))<=0)
555 -2146 0
285 -2146 0
285 555 -2147 0
c (0<=(SATLiteral(-285) - aux490 + SATLiteral(-555)))
-555 2147 0
-285 2147 0
-285 -555 2146 0
c ((SATLiteral(-960) - aux491 + SATLiteral(-825))<=0)
825 -2149 0
960 -2149 0
960 825 -2150 0
c (0<=(SATLiteral(-960) - aux491 + SATLiteral(-825)))
-825 2150 0
-960 2150 0
-960 -825 2149 0
c (( - aux492 + SATLiteral(-690) + SATLiteral(-150))<=0)
150 -2152 0
690 -2152 0
690 150 -2153 0
c (0<=( - aux492 + SATLiteral(-690) + SATLiteral(-150)))
-150 2153 0
-690 2153 0
-690 -150 2152 0
c (( - aux493 + SATLiteral(-420) + SATLiteral(-1095))<=0)
1095 -2155 0
420 -2155 0
420 1095 -2156 0
c (0<=( - aux493 + SATLiteral(-420) + SATLiteral(-1095)))
-1095 2156 0
-420 2156 0
-420 -1095 2155 0
c ((aux493 - aux494 + SATLiteral(-15))<=0)
2155 -2158 0
2156 -2159 0
15 -2158 0
15 2155 -2159 0
15 2156 -2161 0
c (0<=(aux493 - aux494 + SATLiteral(-15)))
-2156 2161 0
-2155 2159 0
-15 2161 0
-15 -2156 2159 0
-15 -2155 2158 0
c ((aux490 + aux492 - aux495)<=0)
2152 -2163 0
2153 -2164 0
2146 -2163 0
2146 2152 -2164 0
2146 2153 -2166 0
2147 -2164 0
2147 2152 -2166 0
2147 2153 -2168 0
c (0<=(aux490 + aux492 - aux495))
-2153 2168 0
-2152 2166 0
-2147 2168 0
-2147 -2153 2166 0
-2147 -2152 2164 0
-2146 2166 0
-2146 -2153 2164 0
-2146 -2152 2163 0
c ((SATLiteral(287) - aux496 + SATLiteral(557))<=0)
-557 -2170 0
-287 -2170 0
-287 -557 -2171 0
c (0<=(SATLiteral(287) - aux496 + SATLiteral(557)))
557 2171 0
287 2171 0
287 557 2170 0
c ((SATLiteral(962) - aux497 + SATLiteral(827))<=0)
-827 -2173 0
-962 -2173 0
-962 -827 -2174 0
c (0<=(SATLiteral(962) - aux497 + SATLiteral(827)))
827 2174 0
962 2174 0
962 827 2173 0
c (( - aux498 + SATLiteral(692) + SATLiteral(152))<=0)
-152 -2176 0
-692 -2176 0
-692 -152 -2177 0
c (0<=( - aux498 + SATLiteral(692) + SATLiteral(152)))
152 2177 0
692 2177 0
692 152 2176 0
c (( - aux499 + SATLiteral(422) + SATLiteral(1097))<=0)
-1097 -2179 0
-422 -2179 0
-422 -1097 -2180 0
c (0<=( - aux499 + SATLiteral(422) + SATLiteral(1097)))
1097 2180 0
422 2180 0
422 1097 2179 0
c ((aux499 - aux500 + SATLiteral(17))<=0)
2179 -2182 0
2180 -2183 0
-17 -2182 0
-17 2179 -2183 0
-17 2180 -2185 0
c (0<=(aux499 - aux500 + SATLiteral(17)))
-2180 2185 0
-2179 2183 0
17 2185 0
17 -2180 2183 0
17 -2179 2182 0
c ((aux496 + aux498 - aux501)<=0)
2176 -2187 0
2177 -2188 0
2170 -2187 0
2170 2176 -2188 0
2170 2177 -2190 0
2171 -2188 0
2171 2176 -2190 0
2171 2177 -2192 0
c (0<=(aux496 + aux498 - aux501))
-2177 2192 0
-2176 2190 0
-2171 2192 0
-2171 -2177 2190 0
-2171 -2176 2188 0
-2170 2190 0
-2170 -2177 2188 0
-2170 -2176 2187 0
c ((SATLiteral(289) - aux502 + SATLiteral(559))<=0)
-559 -2194 0
-289 -2194 0
-289 -559 -2195 0
c (0<=(SATLiteral(289) - aux502 + SATLiteral(559)))
559 2195 0
289 2195 0
289 559 2194 0
c ((SATLiteral(964) - aux503 + SATLiteral(829))<=0)
-829 -2197 0
-964 -2197 0
-964 -829 -2198 0
c (0<=(SATLiteral(964) - aux503 + SATLiteral(829)))
829 2198 0
964 2198 0
964 829 2197 0
c (( - aux504 + SATLiteral(694) + SATLiteral(154))<=0)
-154 -2200 0
-694 -2200 0
-694 -154 -2201 0
c (0<=( - aux504 + SATLiteral(694) + SATLiteral(154)))
154 2201 0
694 2201 0
694 154 2200 0
c (( - aux505 + SATLiteral(424) + SATLiteral(1099))<=0)
-1099 -2203 0
-424 -2203 0
-424 -1099 -2204 0
c (0<=( - aux505 + SATLiteral(424) + SATLiteral(1099)))
1099 2204 0
424 2204 0
424 1099 2203 0
c ((aux505 - aux506 + SATLiteral(19))<=0)
2203 -2206 0
2204 -2207 0
-19 -2206 0
-19 2203 -2207 0
-19 2204 -2209 0
c (0<=(aux505 - aux506 + SATLiteral(19)))
-2204 2209 0
-2203 2207 0
19 2209 0
19 -2204 2207 0
19 -2203 2206 0
c ((aux502 + aux504 - aux507)<=0)
2200 -2211 0
2201 -2212 0
2194 -2211 0
2194 2200 -2212 0
2194 2201 -2214 0
2195 -2212 0
2195 2200 -2214 0
2195 2201 -2216 0
c (0<=(aux502 + aux504 - aux507))
-2201 2216 0
-2200 2214 0
-2195 2216 0
-2195 -2201 2214 0
-2195 -2200 2212 0
-2194 2214 0
-2194 -2201 2212 0
-2194 -2200 2211 0
c ((SATLiteral(291) - aux508 + SATLiteral(561))<=0)
-561 -2218 0
-291 -2218 0
-291 -561 -2219 0
c (0<=(SATLiteral(291) - aux508 + SATLiteral(561)))
561 2219 0
291 2219 0
291 561 2218 0
c ((SATLiteral(966) - aux509 + SATLiteral(831))<=0)
-831 -2221 0
-966 -2221 0
-966 -831 -2222 0
c (0<=(SATLiteral(966) - aux509 + SATLiteral(831)))
831 2222 0
966 2222 0
966 831 2221 0
c (( - aux510 + SATLiteral(696) + SATLiteral(156))<=0)
-156 -2224 0
-696 -2224 0
-696 -156 -2225 0
c (0<=( - aux510 + SATLiteral(696) + SATLiteral(156)))
156 2225 0
696 2225 0
696 156 2224 0
c (( - aux511 + SATLiteral(426) + SATLiteral(1101))<=0)
-1101 -2227 0
-426 -2227 0
-426 -1101 -2228 0
c (0<=( - aux511 + SATLiteral(426) + SATLiteral(1101)))
1101 2228 0
426 2228 0
426 1101 2227 0
c ((aux511 - aux512 + SATLiteral(21))<=0)
2227 -2230 0
2228 -2231 0
-21 -2230 0
-21 2227 -2231 0
-21 2228 -2233 0
c (0<=(aux511 - aux512 + SATLiteral(21)))
-2228 2233 0
-2227 2231 0
21 2233 0
21 -2228 2231 0
21 -2227 2230 0
c ((aux508 + aux510 - aux513)<=0)
2224 -2235 0
2225 -2236 0
2218 -2235 0
2218 2224 -2236 0
2218 2225 -2238 0
2219 -2236 0
2219 2224 -2238 0
2219 2225 -2240 0
c (0<=(aux508 + aux510 - aux513))
-2225 2240 0
-2224 2238 0
-2219 2240 0
-2219 -2225 2238 0
-2219 -2224 2236 0
-2218 2238 0
-2218 -2225 2236 0
-2218 -2224 2235 0
c ((SATLiteral(293) - aux514 + SATLiteral(563))<=0)
-563 -2242 0
-293 -2242 0
-293 -563 -2243 0
c (0<=(SATLiteral(293) - aux514 + SATLiteral(563)))
563 2243 0
293 2243 0
293 563 2242 0
c ((SATLiteral(968) - aux515 + SATLiteral(833))<=0)
-833 -2245 0
-968 -2245 0
-968 -833 -2246 0
c (0<=(SATLiteral(968) - aux515 + SATLiteral(833)))
833 2246 0
968 2246 0
968 833 2245 0
c (( - aux516 + SATLiteral(698) + SATLiteral(158))<=0)
-158 -2248 0
-698 -2248 0
-698 -158 -2249 0
c (0<=( - aux516 + SATLiteral(698) + SATLiteral(158)))
158 2249 0
698 2249 0
698 158 2248 0
c (( - aux517 + SATLiteral(428) + SATLiteral(1103))<=0)
-1103 -2251 0
-428 -2251 0
-428 -1103 -2252 0
c (0<=( - aux517 + SATLiteral(428) + SATLiteral(1103)))
1103 2252 0
428 2252 0
428 1103 2251 0
c ((aux517 - aux518 + SATLiteral(23))<=0)
2251 -2254 0
2252 -2255 0
-23 -2254 0
-23 2251 -2255 0
-23 2252 -2257 0
c (0<=(aux517 - aux518 + SATLiteral(23)))
-2252 2257 0
-2251 2255 0
23 2257 0
23 -2252 2255 0
23 -2251 2254 0
c ((aux514 + aux516 - aux519)<=0)
2248 -2259 0
2249 -2260 0
2242 -2259 0
2242 2248 -2260 0
2242 2249 -2262 0
2243 -2260 0
2243 2248 -2262 0
2243 2249 -2264 0
c (0<=(aux514 + aux516 - aux519))
-2249 2264 0
-2248 2262 0
-2243 2264 0
-2243 -2249 2262 0
-2243 -2248 2260 0
-2242 2262 0
-2242 -2249 2260 0
-2242 -2248 2259 0
c ((SATLiteral(295) - aux520 + SATLiteral(565))<=0)
-565 -2266 0
-295 -2266 0
-295 -565 -2267 0
c (0<=(SATLiteral(295) - aux520 + SATLiteral(565)))
565 2267 0
295 2267 0
295 565 2266 0
c ((SATLiteral(970) - aux521 + SATLiteral(835))<=0)
-835 -2269 0
-970 -2269 0
-970 -835 -2270 0
c (0<=(SATLiteral(970) - aux521 + SATLiteral(835)))
835 2270 0
970 2270 0
970 835 2269 0
c (( - aux522 + SATLiteral(700) + SATLiteral(160))<=0)
-160 -2272 0
-700 -2272 0
-700 -160 -2273 0
c (0<=( - aux522 + SATLiteral(700) + SATLiteral(160)))
160 2273 0
700 2273 0
700 160 2272 0
c (( - aux523 + SATLiteral(430) + SATLiteral(1105))<=0)
-1105 -2275 0
-430 -2275 0
-430 -1105 -2276 0
c (0<=( - aux523 + SATLiteral(430) + SATLiteral(1105)))
1105 2276 0
430 2276 0
430 1105 2275 0
c ((aux523 - aux524 + SATLiteral(25))<=0)
2275 -2278 0
2276 -2279 0
-25 -2278 0
-25 2275 -2279 0
-25 2276 -2281 0
c (0<=(aux523 - aux524 + SATLiteral(25)))
-2276 2281 0
-2275 2279 0
25 2281 0
25 -2276 2279 0
25 -2275 2278 0
c ((aux520 + aux522 - aux525)<=0)
2272 -2283 0
2273 -2284 0
2266 -2283 0
2266 2272 -2284 0
2266 2273 -2286 0
2267 -2284 0
2267 2272 -2286 0
2267 2273 -2288 0
c (0<=(aux520 + aux522 - aux525))
-2273 2288 0
-2272 2286 0
-2267 2288 0
-2267 -2273 2286 0
-2267 -2272 2284 0
-2266 2286 0
-2266 -2273 2284 0
-2266 -2272 2283 0
c ((SATLiteral(297) - aux526 + SATLiteral(567))<=0)
-567 -2290 0
-297 -2290 0
-297 -567 -2291 0
c (0<=(SATLiteral(297) - aux526 + SATLiteral(567)))
567 2291 0
297 2291 0
297 567 2290 0
c ((SATLiteral(972) - aux527 + SATLiteral(837))<=0)
-837 -2293 0
-972 -2293 0
-972 -837 -2294 0
c (0<=(SATLiteral(972) - aux527 + SATLiteral(837)))
837 2294 0
972 2294 0
972 837 2293 0
c (( - aux528 + SATLiteral(702) + SATLiteral(162))<=0)
-162 -2296 0
-702 -2296 0
-702 -162 -2297 0
c (0<=( - aux528 + SATLiteral(702) + SATLiteral(162)))
162 2297 0
702 2297 0
702 162 2296 0
c (( - aux529 + SATLiteral(432) + SATLiteral(1107))<=0)
-1107 -2299 0
-432 -2299 0
-432 -1107 -2300 0
c (0<=( - aux529 + SATLiteral(432) + SATLiteral(1107)))
1107 2300 0
432 2300 0
432 1107 2299 0
c ((aux529 - aux530 + SATLiteral(27))<=0)
2299 -2302 0
2300 -2303 0
-27 -2302 0
-27 2299 -2303 0
-27 2300 -2305 0
c (0<=(aux529 - aux530 + SATLiteral(27)))
-2300 2305 0
-2299 2303 0
27 2305 0
27 -2300 2303 0
27 -2299 2302 0
c ((aux526 + aux528 - aux531)<=0)
2296 -2307 0
2297 -2308 0
2290 -2307 0
2290 2296 -2308 0
2290 2297 -2310 0
2291 -2308 0
2291 2296 -2310 0
2291 2297 -2312 0
c (0<=(aux526 + aux528 - aux531))
-2297 2312 0
-2296 2310 0
-2291 2312 0
-2291 -2297 2310 0
-2291 -2296 2308 0
-2290 2310 0
-2290 -2297 2308 0
-2290 -2296 2307 0
c ((SATLiteral(299) - aux532 + SATLiteral(569))<=0)
-569 -2314 0
-299 -2314 0
-299 -569 -2315 0
c (0<=(SATLiteral(299) - aux532 + SATLiteral(569)))
569 2315 0
299 2315 0
299 569 2314 0
c ((SATLiteral(974) - aux533 + SATLiteral(839))<=0)
-839 -2317 0
-974 -2317 0
-974 -839 -2318 0
c (0<=(SATLiteral(974) - aux533 + SATLiteral(839)))
839 2318 0
974 2318 0
974 839 2317 0
c (( - aux534 + SATLiteral(704) + SATLiteral(164))<=0)
-164 -2320 0
-704 -2320 0
-704 -164 -2321 0
c (0<=( - aux534 + SATLiteral(704) + SATLiteral(164)))
164 2321 0
704 2321 0
704 164 2320 0
c (( - aux535 + SATLiteral(434) + SATLiteral(1109))<=0)
-1109 -2323 0
-434 -2323 0
-434 -1109 -2324 0
c (0<=( - aux535 + SATLiteral(434) + SATLiteral(1109)))
1109 2324 0
434 2324 0
434 1109 2323 0
c ((aux535 - aux536 + SATLiteral(29))<=0)
2323 -2326 0
2324 -2327 0
-29 -2326 0
-29 2323 -2327 0
-29 2324 -2329 0
c (0<=(aux535 - aux536 + SATLiteral(29)))
-2324 2329 0
-2323 2327 0
29 2329 0
29 -2324 2327 0
29 -2323 2326 0
c ((aux532 + aux534 - aux537)<=0)
2320 -2331 0
2321 -2332 0
2314 -2331 0
2314 2320 -2332 0
2314 2321 -2334 0
2315 -2332 0
2315 2320 -2334 0
2315 2321 -2336 0
c (0<=(aux532 + aux534 - aux537))
-2321 2336 0
-2320 2334 0
-2315 2336 0
-2315 -2321 2334 0
-2315 -2320 2332 0
-2314 2334 0
-2314 -2321 2332 0
-2314 -2320 2331 0
c ((SATLiteral(301) - aux538 + SATLiteral(571))<=0)
-571 -2338 0
-301 -2338 0
-301 -571 -2339 0
c (0<=(SATLiteral(301) - aux538 + SATLiteral(571)))
571 2339 0
301 2339 0
301 571 2338 0
c ((SATLiteral(976) - aux539 + SATLiteral(841))<=0)
-841 -2341 0
-976 -2341 0
-976 -841 -2342 0
c (0<=(SATLiteral(976) - aux539 + SATLiteral(841)))
841 2342 0
976 2342 0
976 841 2341 0
c (( - aux540 + SATLiteral(706) + SATLiteral(166))<=0)
-166 -2344 0
-706 -2344 0
-706 -166 -2345 0
c (0<=( - aux540 + SATLiteral(706) + SATLiteral(166)))
166 2345 0
706 2345 0
706 166 2344 0
c (( - aux541 + SATLiteral(436) + SATLiteral(1111))<=0)
-1111 -2347 0
-436 -2347 0
-436 -1111 -2348 0
c (0<=( - aux541 + SATLiteral(436) + SATLiteral(1111)))
1111 2348 0
436 2348 0
436 1111 2347 0
c ((aux541 - aux542 + SATLiteral(31))<=0)
2347 -2350 0
2348 -2351 0
-31 -2350 0
-31 2347 -2351 0
-31 2348 -2353 0
c (0<=(aux541 - aux542 + SATLiteral(31)))
-2348 2353 0
-2347 2351 0
31 2353 0
31 -2348 2351 0
31 -2347 2350 0
c ((aux538 + aux540 - aux543)<=0)
2344 -2355 0
2345 -2356 0
2338 -2355 0
2338 2344 -2356 0
2338 2345 -2358 0
2339 -2356 0
2339 2344 -2358 0
2339 2345 -2360 0
c (0<=(aux538 + aux540 - aux543))
-2345 2360 0
-2344 2358 0
-2339 2360 0
-2339 -2345 2358 0
-2339 -2344 2356 0
-2338 2358 0
-2338 -2345 2356 0
-2338 -2344 2355 0
c ((SATLiteral(-300) - aux544 + SATLiteral(-570))<=0)
570 -2362 0
300 -2362 0
300 570 -2363 0
c (0<=(SATLiteral(-300) - aux544 + SATLiteral(-570)))
-570 2363 0
-300 2363 0
-300 -570 2362 0
c ((SATLiteral(-975) - aux545 + SATLiteral(-840))<=0)
840 -2365 0
975 -2365 0
975 840 -2366 0
c (0<=(SATLiteral(-975) - aux545 + SATLiteral(-840)))
-840 2366 0
-975 2366 0
-975 -840 2365 0
c (( - aux546 + SATLiteral(-705) + SATLiteral(-165))<=0)
165 -2368 0
705 -2368 0
705 165 -2369 0
c (0<=( - aux546 + SATLiteral(-705) + SATLiteral(-165)))
-165 2369 0
-705 2369 0
-705 -165 2368 0
c (( - aux547 + SATLiteral(-435) + SATLiteral(-1110))<=0)
1110 -2371 0
435 -2371 0
435 1110 -2372 0
c (0<=( - aux547 + SATLiteral(-435) + SATLiteral(-1110)))
-1110 2372 0
-435 2372 0
-435 -1110 2371 0
c ((aux547 - aux548 + SATLiteral(-30))<=0)
2371 -2374 0
2372 -2375 0
30 -2374 0
30 2371 -2375 0
30 2372 -2377 0
c (0<=(aux547 - aux548 + SATLiteral(-30)))
-2372 2377 0
-2371 2375 0
-30 2377 0
-30 -2372 2375 0
-30 -2371 2374 0
c ((aux544 + aux546 - aux549)<=0)
2368 -2379 0
2369 -2380 0
2362 -2379 0
2362 2368 -2380 0
2362 2369 -2382 0
2363 -2380 0
2363 2368 -2382 0
2363 2369 -2384 0
c (0<=(aux544 + aux546 - aux549))
-2369 2384 0
-2368 2382 0
-2363 2384 0
-2363 -2369 2382 0
-2363 -2368 2380 0
-2362 2382 0
-2362 -2369 2380 0
-2362 -2368 2379 0
c ((SATLiteral(302) - aux550 + SATLiteral(572))<=0)
-572 -2386 0
-302 -2386 0
-302 -572 -2387 0
c (0<=(SATLiteral(302) - aux550 + SATLiteral(572)))
572 2387 0
302 2387 0
302 572 2386 0
c ((SATLiteral(977) - aux551 + SATLiteral(842))<=0)
-842 -2389 0
-977 -2389 0
-977 -842 -2390 0
c (0<=(SATLiteral(977) - aux551 + SATLiteral(842)))
842 2390 0
977 2390 0
977 842 2389 0
c (( - aux552 + SATLiteral(707) + SATLiteral(167))<=0)
-167 -2392 0
-707 -2392 0
-707 -167 -2393 0
c (0<=( - aux552 + SATLiteral(707) + SATLiteral(167)))
167 2393 0
707 2393 0
707 167 2392 0
c (( - aux553 + SATLiteral(437) + SATLiteral(1112))<=0)
-1112 -2395 0
-437 -2395 0
-437 -1112 -2396 0
c (0<=( - aux553 + SATLiteral(437) + SATLiteral(1112)))
1112 2396 0
437 2396 0
437 1112 2395 0
c ((aux553 - aux554 + SATLiteral(32))<=0)
2395 -2398 0
2396 -2399 0
-32 -2398 0
-32 2395 -2399 0
-32 2396 -2401 0
c (0<=(aux553 - aux554 + SATLiteral(32)))
-2396 2401 0
-2395 2399 0
32 2401 0
32 -2396 2399 0
32 -2395 2398 0
c ((aux550 + aux552 - aux555)<=0)
2392 -2403 0
2393 -2404 0
2386 -2403 0
2386 2392 -2404 0
2386 2393 -2406 0
2387 -2404 0
2387 2392 -2406 0
2387 2393 -2408 0
c (0<=(aux550 + aux552 - aux555))
-2393 2408 0
-2392 2406 0
-2387 2408 0
-2387 -2393 2406 0
-2387 -2392 2404 0
-2386 2406 0
-2386 -2393 2404 0
-2386 -2392 2403 0
c ((SATLiteral(304) - aux556 + SATLiteral(574))<=0)
-574 -2410 0
-304 -2410 0
-304 -574 -2411 0
c (0<=(SATLiteral(304) - aux556 + SATLiteral(574)))
574 2411 0
304 2411 0
304 574 2410 0
c ((SATLiteral(979) - aux557 + SATLiteral(844))<=0)
-844 -2413 0
-979 -2413 0
-979 -844 -2414 0
c (0<=(SATLiteral(979) - aux557 + SATLiteral(844)))
844 2414 0
979 2414 0
979 844 2413 0
c (( - aux558 + SATLiteral(709) + SATLiteral(169))<=0)
-169 -2416 0
-709 -2416 0
-709 -169 -2417 0
c (0<=( - aux558 + SATLiteral(709) + SATLiteral(169)))
169 2417 0
709 2417 0
709 169 2416 0
c (( - aux559 + SATLiteral(439) + SATLiteral(1114))<=0)
-1114 -2419 0
-439 -2419 0
-439 -1114 -2420 0
c (0<=( - aux559 + SATLiteral(439) + SATLiteral(1114)))
1114 2420 0
439 2420 0
439 1114 2419 0
c ((aux559 - aux560 + SATLiteral(34))<=0)
2419 -2422 0
2420 -2423 0
-34 -2422 0
-34 2419 -2423 0
-34 2420 -2425 0
c (0<=(aux559 - aux560 + SATLiteral(34)))
-2420 2425 0
-2419 2423 0
34 2425 0
34 -2420 2423 0
34 -2419 2422 0
c ((aux556 + aux558 - aux561)<=0)
2416 -2427 0
2417 -2428 0
2410 -2427 0
2410 2416 -2428 0
2410 2417 -2430 0
2411 -2428 0
2411 2416 -2430 0
2411 2417 -2432 0
c (0<=(aux556 + aux558 - aux561))
-2417 2432 0
-2416 2430 0
-2411 2432 0
-2411 -2417 2430 0
-2411 -2416 2428 0
-2410 2430 0
-2410 -2417 2428 0
-2410 -2416 2427 0
c ((SATLiteral(306) - aux562 + SATLiteral(576))<=0)
-576 -2434 0
-306 -2434 0
-306 -576 -2435 0
c (0<=(SATLiteral(306) - aux562 + SATLiteral(576)))
576 2435 0
306 2435 0
306 576 2434 0
c ((SATLiteral(981) - aux563 + SATLiteral(846))<=0)
-846 -2437 0
-981 -2437 0
-981 -846 -2438 0
c (0<=(SATLiteral(981) - aux563 + SATLiteral(846)))
846 2438 0
981 2438 0
981 846 2437 0
c (( - aux564 + SATLiteral(711) + SATLiteral(171))<=0)
-171 -2440 0
-711 -2440 0
-711 -171 -2441 0
c (0<=( - aux564 + SATLiteral(711) + SATLiteral(171)))
171 2441 0
711 2441 0
711 171 2440 0
c (( - aux565 + SATLiteral(441) + SATLiteral(1116))<=0)
-1116 -2443 0
-441 -2443 0
-441 -1116 -2444 0
c (0<=( - aux565 + SATLiteral(441) + SATLiteral(1116)))
1116 2444 0
441 2444 0
441 1116 2443 0
c ((aux565 - aux566 + SATLiteral(36))<=0)
2443 -2446 0
2444 -2447 0
-36 -2446 0
-36 2443 -2447 0
-36 2444 -2449 0
c (0<=(aux565 - aux566 + SATLiteral(36)))
-2444 2449 0
-2443 2447 0
36 2449 0
36 -2444 2447 0
36 -2443 2446 0
c ((aux562 + aux564 - aux567)<=0)
2440 -2451 0
2441 -2452 0
2434 -2451 0
2434 2440 -2452 0
2434 2441 -2454 0
2435 -2452 0
2435 2440 -2454 0
2435 2441 -2456 0
c (0<=(aux562 + aux564 - aux567))
-2441 2456 0
-2440 2454 0
-2435 2456 0
-2435 -2441 2454 0
-2435 -2440 2452 0
-2434 2454 0
-2434 -2441 2452 0
-2434 -2440 2451 0
c ((SATLiteral(308) - aux568 + SATLiteral(578))<=0)
-578 -2458 0
-308 -2458 0
-308 -578 -2459 0
c (0<=(SATLiteral(308) - aux568 + SATLiteral(578)))
578 2459 0
308 2459 0
308 578 2458 0
c ((SATLiteral(983) - aux569 + SATLiteral(848))<=0)
-848 -2461 0
-983 -2461 0
-983 -848 -2462 0
c (0<=(SATLiteral(983) - aux569 + SATLiteral(848)))
848 2462 0
983 2462 0
983 848 2461 0
c (( - aux570 + SATLiteral(713) + SATLiteral(173))<=0)
-173 -2464 0
-713 -2464 0
-713 -173 -2465 0
c (0<=( - aux570 + SATLiteral(713) + SATLiteral(173)))
173 2465 0
713 2465 0
713 173 2464 0
c (( - aux571 + SATLiteral(443) + SATLiteral(1118))<=0)
-1118 -2467 0
-443 -2467 0
-443 -1118 -2468 0
c (0<=( - aux571 + SATLiteral(443) + SATLiteral(1118)))
1118 2468 0
443 2468 0
443 1118 2467 0
c ((aux571 - aux572 + SATLiteral(38))<=0)
2467 -2470 0
2468 -2471 0
-38 -2470 0
-38 2467 -2471 0
-38 2468 -2473 0
c (0<=(aux571 - aux572 + SATLiteral(38)))
-2468 2473 0
-2467 2471 0
38 2473 0
38 -2468 2471 0
38 -2467 2470 0
c ((aux568 + aux570 - aux573)<=0)
2464 -2475 0
2465 -2476 0
2458 -2475 0
2458 2464 -2476 0
2458 2465 -2478 0
2459 -2476 0
2459 2464 -2478 0
2459 2465 -2480 0
c (0<=(aux568 + aux570 - aux573))
-2465 2480 0
-2464 2478 0
-2459 2480 0
-2459 -2465 2478 0
-2459 -2464 2476 0
-2458 2478 0
-2458 -2465 2476 0
-2458 -2464 2475 0
c ((SATLiteral(310) - aux574 + SATLiteral(580))<=0)
-580 -2482 0
-310 -2482 0
-310 -580 -2483 0
c (0<=(SATLiteral(310) - aux574 + SATLiteral(580)))
580 2483 0
310 2483 0
310 580 2482 0
c ((SATLiteral(985) - aux575 + SATLiteral(850))<=0)
-850 -2485 0
-985 -2485 0
-985 -850 -2486 0
c (0<=(SATLiteral(985) - aux575 + SATLiteral(850)))
850 2486 0
985 2486 0
985 850 2485 0
c (( - aux576 + SATLiteral(715) + SATLiteral(175))<=0)
-175 -2488 0
-715 -2488 0
-715 -175 -2489 0
c (0<=( - aux576 + SATLiteral(715) + SATLiteral(175)))
175 2489 0
715 2489 0
715 175 2488 0
c (( - aux577 + SATLiteral(445) + SATLiteral(1120))<=0)
-1120 -2491 0
-445 -2491 0
-445 -1120 -2492 0
c (0<=( - aux577 + SATLiteral(445) + SATLiteral(1120)))
1120 2492 0
445 2492 0
445 1120 2491 0
c ((aux577 - aux578 + SATLiteral(40))<=0)
2491 -2494 0
2492 -2495 0
-40 -2494 0
-40 2491 -2495 0
-40 2492 -2497 0
c (0<=(aux577 - aux578 + SATLiteral(40)))
-2492 2497 0
-2491 2495 0
40 2497 0
40 -2492 2495 0
40 -2491 2494 0
c ((aux574 + aux576 - aux579)<=0)
2488 -2499 0
2489 -2500 0
2482 -2499 0
2482 2488 -2500 0
2482 2489 -2502 0
2483 -2500 0
2483 2488 -2502 0
2483 2489 -2504 0
c (0<=(aux574 + aux576 - aux579))
-2489 2504 0
-2488 2502 0
-2483 2504 0
-2483 -2489 2502 0
-2483 -2488 2500 0
-2482 2502 0
-2482 -2489 2500 0
-2482 -2488 2499 0
c ((SATLiteral(312) - aux580 + SATLiteral(582))<=0)
-582 -2506 0
-312 -2506 0
-312 -582 -2507 0
c (0<=(SATLiteral(312) - aux580 + SATLiteral(582)))
582 2507 0
312 2507 0
312 582 2506 0
c ((SATLiteral(987) - aux581 + SATLiteral(852))<=0)
-852 -2509 0
-987 -2509 0
-987 -852 -2510 0
c (0<=(SATLiteral(987) - aux581 + SATLiteral(852)))
852 2510 0
987 2510 0
987 852 2509 0
c (( - aux582 + SATLiteral(717) + SATLiteral(177))<=0)
-177 -2512 0
-717 -2512 0
-717 -177 -2513 0
c (0<=( - aux582 + SATLiteral(717) + SATLiteral(177)))
177 2513 0
717 2513 0
717 177 2512 0
c (( - aux583 + SATLiteral(447) + SATLiteral(1122))<=0)
-1122 -2515 0
-447 -2515 0
-447 -1122 -2516 0
c (0<=( - aux583 + SATLiteral(447) + SATLiteral(1122)))
1122 2516 0
447 2516 0
447 1122 2515 0
c ((aux583 - aux584 + SATLiteral(42))<=0)
2515 -2518 0
2516 -2519 0
-42 -2518 0
-42 2515 -2519 0
-42 2516 -2521 0
c (0<=(aux583 - aux584 + SATLiteral(42)))
-2516 2521 0
-2515 2519 0
42 2521 0
42 -2516 2519 0
42 -2515 2518 0
c ((aux580 + aux582 - aux585)<=0)
2512 -2523 0
2513 -2524 0
2506 -2523 0
2506 2512 -2524 0
2506 2513 -2526 0
2507 -2524 0
2507 2512 -2526 0
2507 2513 -2528 0
c (0<=(aux580 + aux582 - aux585))
-2513 2528 0
-2512 2526 0
-2507 2528 0
-2507 -2513 2526 0
-2507 -2512 2524 0
-2506 2526 0
-2506 -2513 2524 0
-2506 -2512 2523 0
c ((SATLiteral(314) - aux586 + SATLiteral(584))<=0)
-584 -2530 0
-314 -2530 0
-314 -584 -2531 0
c (0<=(SATLiteral(314) - aux586 + SATLiteral(584)))
584 2531 0
314 2531 0
314 584 2530 0
c ((SATLiteral(989) - aux587 + SATLiteral(854))<=0)
-854 -2533 0
-989 -2533 0
-989 -854 -2534 0
c (0<=(SATLiteral(989) - aux587 + SATLiteral(854)))
854 2534 0
989 2534 0
989 854 2533 0
c (( - aux588 + SATLiteral(719) + SATLiteral(179))<=0)
-179 -2536 0
-719 -2536 0
-719 -179 -2537 0
c (0<=( - aux588 + SATLiteral(719) + SATLiteral(179)))
179 2537 0
719 2537 0
719 179 2536 0
c (( - aux589 + SATLiteral(449) + SATLiteral(1124))<=0)
-1124 -2539 0
-449 -2539 0
-449 -1124 -2540 0
c (0<=( - aux589 + SATLiteral(449) + SATLiteral(1124)))
1124 2540 0
449 2540 0
449 1124 2539 0
c ((aux589 - aux590 + SATLiteral(44))<=0)
2539 -2542 0
2540 -2543 0
-44 -2542 0
-44 2539 -2543 0
-44 2540 -2545 0
c (0<=(aux589 - aux590 + SATLiteral(44)))
-2540 2545 0
-2539 2543 0
44 2545 0
44 -2540 2543 0
44 -2539 2542 0
c ((aux586 + aux588 - aux591)<=0)
2536 -2547 0
2537 -2548 0
2530 -2547 0
2530 2536 -2548 0
2530 2537 -2550 0
2531 -2548 0
2531 2536 -2550 0
2531 2537 -2552 0
c (0<=(aux586 + aux588 - aux591))
-2537 2552 0
-2536 2550 0
-2531 2552 0
-2531 -2537 2550 0
-2531 -2536 2548 0
-2530 2550 0
-2530 -2537 2548 0
-2530 -2536 2547 0
c ((SATLiteral(316) - aux592 + SATLiteral(586))<=0)
-586 -2554 0
-316 -2554 0
-316 -586 -2555 0
c (0<=(SATLiteral(316) - aux592 + SATLiteral(586)))
586 2555 0
316 2555 0
316 586 2554 0
c ((SATLiteral(991) - aux593 + SATLiteral(856))<=0)
-856 -2557 0
-991 -2557 0
-991 -856 -2558 0
c (0<=(SATLiteral(991) - aux593 + SATLiteral(856)))
856 2558 0
991 2558 0
991 856 2557 0
c (( - aux594 + SATLiteral(721) + SATLiteral(181))<=0)
-181 -2560 0
-721 -2560 0
-721 -181 -2561 0
c (0<=( - aux594 + SATLiteral(721) + SATLiteral(181)))
181 2561 0
721 2561 0
721 181 2560 0
c (( - aux595 + SATLiteral(451) + SATLiteral(1126))<=0)
-1126 -2563 0
-451 -2563 0
-451 -1126 -2564 0
c (0<=( - aux595 + SATLiteral(451) + SATLiteral(1126)))
1126 2564 0
451 2564 0
451 1126 2563 0
c ((aux595 - aux596 + SATLiteral(46))<=0)
2563 -2566 0
2564 -2567 0
-46 -2566 0
-46 2563 -2567 0
-46 2564 -2569 0
c (0<=(aux595 - aux596 + SATLiteral(46)))
-2564 2569 0
-2563 2567 0
46 2569 0
46 -2564 2567 0
46 -2563 2566 0
c ((aux592 + aux594 - aux597)<=0)
2560 -2571 0
2561 -2572 0
2554 -2571 0
2554 2560 -2572 0
2554 2561 -2574 0
2555 -2572 0
2555 2560 -2574 0
2555 2561 -2576 0
c (0<=(aux592 + aux594 - aux597))
-2561 2576 0
-2560 2574 0
-2555 2576 0
-2555 -2561 2574 0
-2555 -2560 2572 0
-2554 2574 0
-2554 -2561 2572 0
-2554 -2560 2571 0
c ((SATLiteral(-315) - aux598 + SATLiteral(-585))<=0)
585 -2578 0
315 -2578 0
315 585 -2579 0
c (0<=(SATLiteral(-315) - aux598 + SATLiteral(-585)))
-585 2579 0
-315 2579 0
-315 -585 2578 0
c ((SATLiteral(-990) - aux599 + SATLiteral(-855))<=0)
855 -2581 0
990 -2581 0
990 855 -2582 0
c (0<=(SATLiteral(-990) - aux599 + SATLiteral(-855)))
-855 2582 0
-990 2582 0
-990 -855 2581 0
c (( - aux600 + SATLiteral(-720) + SATLiteral(-180))<=0)
180 -2584 0
720 -2584 0
720 180 -2585 0
c (0<=( - aux600 + SATLiteral(-720) + SATLiteral(-180)))
-180 2585 0
-720 2585 0
-720 -180 2584 0
c (( - aux601 + SATLiteral(-450) + SATLiteral(-1125))<=0)
1125 -2587 0
450 -2587 0
450 1125 -2588 0
c (0<=( - aux601 + SATLiteral(-450) + SATLiteral(-1125)))
-1125 2588 0
-450 2588 0
-450 -1125 2587 0
c ((aux601 - aux602 + SATLiteral(-45))<=0)
2587 -2590 0
2588 -2591 0
45 -2590 0
45 2587 -2591 0
45 2588 -2593 0
c (0<=(aux601 - aux602 + SATLiteral(-45)))
-2588 2593 0
-2587 2591 0
-45 2593 0
-45 -2588 2591 0
-45 -2587 2590 0
c ((aux598 + aux600 - aux603)<=0)
2584 -2595 0
2585 -2596 0
2578 -2595 0
2578 2584 -2596 0
2578 2585 -2598 0
2579 -2596 0
2579 2584 -2598 0
2579 2585 -2600 0
c (0<=(aux598 + aux600 - aux603))
-2585 2600 0
-2584 2598 0
-2579 2600 0
-2579 -2585 2598 0
-2579 -2584 2596 0
-2578 2598 0
-2578 -2585 2596 0
-2578 -2584 2595 0
c ((SATLiteral(317) - aux604 + SATLiteral(587))<=0)
-587 -2602 0
-317 -2602 0
-317 -587 -2603 0
c (0<=(SATLiteral(317) - aux604 + SATLiteral(587)))
587 2603 0
317 2603 0
317 587 2602 0
c ((SATLiteral(992) - aux605 + SATLiteral(857))<=0)
-857 -2605 0
-992 -2605 0
-992 -857 -2606 0
c (0<=(SATLiteral(992) - aux605 + SATLiteral(857)))
857 2606 0
992 2606 0
992 857 2605 0
c (( - aux606 + SATLiteral(722) + SATLiteral(182))<=0)
-182 -2608 0
-722 -2608 0
-722 -182 -2609 0
c (0<=( - aux606 + SATLiteral(722) + SATLiteral(182)))
182 2609 0
722 2609 0
722 182 2608 0
c (( - aux607 + SATLiteral(452) + SATLiteral(1127))<=0)
-1127 -2611 0
-452 -2611 0
-452 -1127 -2612 0
c (0<=( - aux607 + SATLiteral(452) + SATLiteral(1127)))
1127 2612 0
452 2612 0
452 1127 2611 0
c ((aux607 - aux608 + SATLiteral(47))<=0)
2611 -2614 0
2612 -2615 0
-47 -2614 0
-47 2611 -2615 0
-47 2612 -2617 0
c (0<=(aux607 - aux608 + SATLiteral(47)))
-2612 2617 0
-2611 2615 0
47 2617 0
47 -2612 2615 0
47 -2611 2614 0
c ((aux604 + aux606 - aux609)<=0)
2608 -2619 0
2609 -2620 0
2602 -2619 0
2602 2608 -2620 0
2602 2609 -2622 0
2603 -2620 0
2603 2608 -2622 0
2603 2609 -2624 0
c (0<=(aux604 + aux606 - aux609))
-2609 2624 0
-2608 2622 0
-2603 2624 0
-2603 -2609 2622 0
-2603 -2608 2620 0
-2602 2622 0
-2602 -2609 2620 0
-2602 -2608 2619 0
c ((SATLiteral(319) - aux610 + SATLiteral(589))<=0)
-589 -2626 0
-319 -2626 0
-319 -589 -2627 0
c (0<=(SATLiteral(319) - aux610 + SATLiteral(589)))
589 2627 0
319 2627 0
319 589 2626 0
c ((SATLiteral(994) - aux611 + SATLiteral(859))<=0)
-859 -2629 0
-994 -2629 0
-994 -859 -2630 0
c (0<=(SATLiteral(994) - aux611 + SATLiteral(859)))
859 2630 0
994 2630 0
994 859 2629 0
c (( - aux612 + SATLiteral(724) + SATLiteral(184))<=0)
-184 -2632 0
-724 -2632 0
-724 -184 -2633 0
c (0<=( - aux612 + SATLiteral(724) + SATLiteral(184)))
184 2633 0
724 2633 0
724 184 2632 0
c (( - aux613 + SATLiteral(454) + SATLiteral(1129))<=0)
-1129 -2635 0
-454 -2635 0
-454 -1129 -2636 0
c (0<=( - aux613 + SATLiteral(454) + SATLiteral(1129)))
1129 2636 0
454 2636 0
454 1129 2635 0
c ((aux613 - aux614 + SATLiteral(49))<=0)
2635 -2638 0
2636 -2639 0
-49 -2638 0
-49 2635 -2639 0
-49 2636 -2641 0
c (0<=(aux613 - aux614 + SATLiteral(49)))
-2636 2641 0
-2635 2639 0
49 2641 0
49 -2636 2639 0
49 -2635 2638 0
c ((aux610 + aux612 - aux615)<=0)
2632 -2643 0
2633 -2644 0
2626 -2643 0
2626 2632 -2644 0
2626 2633 -2646 0
2627 -2644 0
2627 2632 -2646 0
2627 2633 -2648 0
c (0<=(aux610 + aux612 - aux615))
-2633 2648 0
-2632 2646 0
-2627 2648 0
-2627 -2633 2646 0
-2627 -2632 2644 0
-2626 2646 0
-2626 -2633 2644 0
-2626 -2632 2643 0
c ((SATLiteral(321) - aux616 + SATLiteral(591))<=0)
-591 -2650 0
-321 -2650 0
-321 -591 -2651 0
c (0<=(SATLiteral(321) - aux616 + SATLiteral(591)))
591 2651 0
321 2651 0
321 591 2650 0
c ((SATLiteral(996) - aux617 + SATLiteral(861))<=0)
-861 -2653 0
-996 -2653 0
-996 -861 -2654 0
c (0<=(SATLiteral(996) - aux617 + SATLiteral(861)))
861 2654 0
996 2654 0
996 861 2653 0
c (( - aux618 + SATLiteral(726) + SATLiteral(186))<=0)
-186 -2656 0
-726 -2656 0
-726 -186 -2657 0
c (0<=( - aux618 + SATLiteral(726) + SATLiteral(186)))
186 2657 0
726 2657 0
726 186 2656 0
c (( - aux619 + SATLiteral(456) + SATLiteral(1131))<=0)
-1131 -2659 0
-456 -2659 0
-456 -1131 -2660 0
c (0<=( - aux619 + SATLiteral(456) + SATLiteral(1131)))
1131 2660 0
456 2660 0
456 1131 2659 0
c ((aux619 - aux620 + SATLiteral(51))<=0)
2659 -2662 0
2660 -2663 0
-51 -2662 0
-51 2659 -2663 0
-51 2660 -2665 0
c (0<=(aux619 - aux620 + SATLiteral(51)))
-2660 2665 0
-2659 2663 0
51 2665 0
51 -2660 2663 0
51 -2659 2662 0
c ((aux616 + aux618 - aux621)<=0)
2656 -2667 0
2657 -2668 0
2650 -2667 0
2650 2656 -2668 0
2650 2657 -2670 0
2651 -2668 0
2651 2656 -2670 0
2651 2657 -2672 0
c (0<=(aux616 + aux618 - aux621))
-2657 2672 0
-2656 2670 0
-2651 2672 0
-2651 -2657 2670 0
-2651 -2656 2668 0
-2650 2670 0
-2650 -2657 2668 0
-2650 -2656 2667 0
c ((SATLiteral(323) - aux622 + SATLiteral(593))<=0)
-593 -2674 0
-323 -2674 0
-323 -593 -2675 0
c (0<=(SATLiteral(323) - aux622 + SATLiteral(593)))
593 2675 0
323 2675 0
323 593 2674 0
c ((SATLiteral(998) - aux623 + SATLiteral(863))<=0)
-863 -2677 0
-998 -2677 0
-998 -863 -2678 0
c (0<=(SATLiteral(998) - aux623 + SATLiteral(863)))
863 2678 0
998 2678 0
998 863 2677 0
c (( - aux624 + SATLiteral(728) + SATLiteral(188))<=0)
-188 -2680 0
-728 -2680 0
-728 -188 -2681 0
c (0<=( - aux624 + SATLiteral(728) + SATLiteral(188)))
188 2681 0
728 2681 0
728 188 2680 0
c (( - aux625 + SATLiteral(458) + SATLiteral(1133))<=0)
-1133 -2683 0
-458 -2683 0
-458 -1133 -2684 0
c (0<=( - aux625 + SATLiteral(458) + SATLiteral(1133)))
1133 2684 0
458 2684 0
458 1133 2683 0
c ((aux625 - aux626 + SATLiteral(53))<=0)
2683 -2686 0
2684 -2687 0
-53 -2686 0
-53 2683 -2687 0
-53 2684 -2689 0
c (0<=(aux625 - aux626 + SATLiteral(53)))
-2684 2689 0
-2683 2687 0
53 2689 0
53 -2684 2687 0
53 -2683 2686 0
c ((aux622 + aux624 - aux627)<=0)
2680 -2691 0
2681 -2692 0
2674 -2691 0
2674 2680 -2692 0
2674 2681 -2694 0
2675 -2692 0
2675 2680 -2694 0
2675 2681 -2696 0
c (0<=(aux622 + aux624 - aux627))
-2681 2696 0
-2680 2694 0
-2675 2696 0
-2675 -2681 2694 0
-2675 -2680 2692 0
-2674 2694 0
-2674 -2681 2692 0
-2674 -2680 2691 0
c ((SATLiteral(325) - aux628 + SATLiteral(595))<=0)
-595 -2698 0
-325 -2698 0
-325 -595 -2699 0
c (0<=(SATLiteral(325) - aux628 + SATLiteral(595)))
595 2699 0
325 2699 0
325 595 2698 0
c ((SATLiteral(1000) - aux629 + SATLiteral(865))<=0)
-865 -2701 0
-1000 -2701 0
-1000 -865 -2702 0
c (0<=(SATLiteral(1000) - aux629 + SATLiteral(865)))
865 2702 0
1000 2702 0
1000 865 2701 0
c (( - aux630 + SATLiteral(730) + SATLiteral(190))<=0)
-190 -2704 0
-730 -2704 0
-730 -190 -2705 0
c (0<=( - aux630 + SATLiteral(730) + SATLiteral(190)))
190 2705 0
730 2705 0
730 190 2704 0
c (( - aux631 + SATLiteral(460) + SATLiteral(1135))<=0)
-1135 -2707 0
-460 -2707 0
-460 -1135 -2708 0
c (0<=( - aux631 + SATLiteral(460) + SATLiteral(1135)))
1135 2708 0
460 2708 0
460 1135 2707 0
c ((aux631 - aux632 + SATLiteral(55))<=0)
2707 -2710 0
2708 -2711 0
-55 -2710 0
-55 2707 -2711 0
-55 2708 -2713 0
c (0<=(aux631 - aux632 + SATLiteral(55)))
-2708 2713 0
-2707 2711 0
55 2713 0
55 -2708 2711 0
55 -2707 2710 0
c ((aux628 + aux630 - aux633)<=0)
2704 -2715 0
2705 -2716 0
2698 -2715 0
2698 2704 -2716 0
2698 2705 -2718 0
2699 -2716 0
2699 2704 -2718 0
2699 2705 -2720 0
c (0<=(aux628 + aux630 - aux633))
-2705 2720 0
-2704 2718 0
-2699 2720 0
-2699 -2705 2718 0
-2699 -2704 2716 0
-2698 2718 0
-2698 -2705 2716 0
-2698 -2704 2715 0
c ((SATLiteral(327) - aux634 + SATLiteral(597))<=0)
-597 -2722 0
-327 -2722 0
-327 -597 -2723 0
c (0<=(SATLiteral(327) - aux634 + SATLiteral(597)))
597 2723 0
327 2723 0
327 597 2722 0
c ((SATLiteral(1002) - aux635 + SATLiteral(867))<=0)
-867 -2725 0
-1002 -2725 0
-1002 -867 -2726 0
c (0<=(SATLiteral(1002) - aux635 + SATLiteral(867)))
867 2726 0
1002 2726 0
1002 867 2725 0
c (( - aux636 + SATLiteral(732) + SATLiteral(192))<=0)
-192 -2728 0
-732 -2728 0
-732 -192 -2729 0
c (0<=( - aux636 + SATLiteral(732) + SATLiteral(192)))
192 2729 0
732 2729 0
732 192 2728 0
c (( - aux637 + SATLiteral(462) + SATLiteral(1137))<=0)
-1137 -2731 0
-462 -2731 0
-462 -1137 -2732 0
c (0<=( - aux637 + SATLiteral(462) + SATLiteral(1137)))
1137 2732 0
462 2732 0
462 1137 2731 0
c ((aux637 - aux638 + SATLiteral(57))<=0)
2731 -2734 0
2732 -2735 0
-57 -2734 0
-57 2731 -2735 0
-57 2732 -2737 0
c (0<=(aux637 - aux638 + SATLiteral(57)))
-2732 2737 0
-2731 2735 0
57 2737 0
57 -2732 2735 0
57 -2731 2734 0
c ((aux634 + aux636 - aux639)<=0)
2728 -2739 0
2729 -2740 0
2722 -2739 0
2722 2728 -2740 0
2722 2729 -2742 0
2723 -2740 0
2723 2728 -2742 0
2723 2729 -2744 0
c (0<=(aux634 + aux636 - aux639))
-2729 2744 0
-2728 2742 0
-2723 2744 0
-2723 -2729 2742 0
-2723 -2728 2740 0
-2722 2742 0
-2722 -2729 2740 0
-2722 -2728 2739 0
c ((SATLiteral(329) - aux640 + SATLiteral(599))<=0)
-599 -2746 0
-329 -2746 0
-329 -599 -2747 0
c (0<=(SATLiteral(329) - aux640 + SATLiteral(599)))
599 2747 0
329 2747 0
329 599 2746 0
c ((SATLiteral(1004) - aux641 + SATLiteral(869))<=0)
-869 -2749 0
-1004 -2749 0
-1004 -869 -2750 0
c (0<=(SATLiteral(1004) - aux641 + SATLiteral(869)))
869 2750 0
1004 2750 0
1004 869 2749 0
c (( - aux642 + SATLiteral(734) + SATLiteral(194))<=0)
-194 -2752 0
-734 -2752 0
-734 -194 -2753 0
c (0<=( - aux642 + SATLiteral(734) + SATLiteral(194)))
194 2753 0
734 2753 0
734 194 2752 0
c (( - aux643 + SATLiteral(464) + SATLiteral(1139))<=0)
-1139 -2755 0
-464 -2755 0
-464 -1139 -2756 0
c (0<=( - aux643 + SATLiteral(464) + SATLiteral(1139)))
1139 2756 0
464 2756 0
464 1139 2755 0
c ((aux643 - aux644 + SATLiteral(59))<=0)
2755 -2758 0
2756 -2759 0
-59 -2758 0
-59 2755 -2759 0
-59 2756 -2761 0
c (0<=(aux643 - aux644 + SATLiteral(59)))
-2756 2761 0
-2755 2759 0
59 2761 0
59 -2756 2759 0
59 -2755 2758 0
c ((aux640 + aux642 - aux645)<=0)
2752 -2763 0
2753 -2764 0
2746 -2763 0
2746 2752 -2764 0
2746 2753 -2766 0
2747 -2764 0
2747 2752 -2766 0
2747 2753 -2768 0
c (0<=(aux640 + aux642 - aux645))
-2753 2768 0
-2752 2766 0
-2747 2768 0
-2747 -2753 2766 0
-2747 -2752 2764 0
-2746 2766 0
-2746 -2753 2764 0
-2746 -2752 2763 0
c ((SATLiteral(331) - aux646 + SATLiteral(601))<=0)
-601 -2770 0
-331 -2770 0
-331 -601 -2771 0
c (0<=(SATLiteral(331) - aux646 + SATLiteral(601)))
601 2771 0
331 2771 0
331 601 2770 0
c ((SATLiteral(1006) - aux647 + SATLiteral(871))<=0)
-871 -2773 0
-1006 -2773 0
-1006 -871 -2774 0
c (0<=(SATLiteral(1006) - aux647 + SATLiteral(871)))
871 2774 0
1006 2774 0
1006 871 2773 0
c (( - aux648 + SATLiteral(736) + SATLiteral(196))<=0)
-196 -2776 0
-736 -2776 0
-736 -196 -2777 0
c (0<=( - aux648 + SATLiteral(736) + SATLiteral(196)))
196 2777 0
736 2777 0
736 196 2776 0
c (( - aux649 + SATLiteral(466) + SATLiteral(1141))<=0)
-1141 -2779 0
-466 -2779 0
-466 -1141 -2780 0
c (0<=( - aux649 + SATLiteral(466) + SATLiteral(1141)))
1141 2780 0
466 2780 0
466 1141 2779 0
c ((aux649 - aux650 + SATLiteral(61))<=0)
2779 -2782 0
2780 -2783 0
-61 -2782 0
-61 2779 -2783 0
-61 2780 -2785 0
c (0<=(aux649 - aux650 + SATLiteral(61)))
-2780 2785 0
-2779 2783 0
61 2785 0
61 -2780 2783 0
61 -2779 2782 0
c ((aux646 + aux648 - aux651)<=0)
2776 -2787 0
2777 -2788 0
2770 -2787 0
2770 2776 -2788 0
2770 2777 -2790 0
2771 -2788 0
2771 2776 -2790 0
2771 2777 -2792 0
c (0<=(aux646 + aux648 - aux651))
-2777 2792 0
-2776 2790 0
-2771 2792 0
-2771 -2777 2790 0
-2771 -2776 2788 0
-2770 2790 0
-2770 -2777 2788 0
-2770 -2776 2787 0
c ((SATLiteral(-330) - aux652 + SATLiteral(-600))<=0)
600 -2794 0
330 -2794 0
330 600 -2795 0
c (0<=(SATLiteral(-330) - aux652 + SATLiteral(-600)))
-600 2795 0
-330 2795 0
-330 -600 2794 0
c ((SATLiteral(-1005) - aux653 + SATLiteral(-870))<=0)
870 -2797 0
1005 -2797 0
1005 870 -2798 0
c (0<=(SATLiteral(-1005) - aux653 + SATLiteral(-870)))
-870 2798 0
-1005 2798 0
-1005 -870 2797 0
c (( - aux654 + SATLiteral(-735) + SATLiteral(-195))<=0)
195 -2800 0
735 -2800 0
735 195 -2801 0
c (0<=( - aux654 + SATLiteral(-735) + SATLiteral(-195)))
-195 2801 0
-735 2801 0
-735 -195 2800 0
c (( - aux655 + SATLiteral(-465) + SATLiteral(-1140))<=0)
1140 -2803 0
465 -2803 0
465 1140 -2804 0
c (0<=( - aux655 + SATLiteral(-465) + SATLiteral(-1140)))
-1140 2804 0
-465 2804 0
-465 -1140 2803 0
c ((aux655 - aux656 + SATLiteral(-60))<=0)
2803 -2806 0
2804 -2807 0
60 -2806 0
60 2803 -2807 0
60 2804 -2809 0
c (0<=(aux655 - aux656 + SATLiteral(-60)))
-2804 2809 0
-2803 2807 0
-60 2809 0
-60 -2804 2807 0
-60 -2803 2806 0
c ((aux652 + aux654 - aux657)<=0)
2800 -2811 0
2801 -2812 0
2794 -2811 0
2794 2800 -2812 0
2794 2801 -2814 0
2795 -2812 0
2795 2800 -2814 0
2795 2801 -2816 0
c (0<=(aux652 + aux654 - aux657))
-2801 2816 0
-2800 2814 0
-2795 2816 0
-2795 -2801 2814 0
-2795 -2800 2812 0
-2794 2814 0
-2794 -2801 2812 0
-2794 -2800 2811 0
c ((SATLiteral(332) - aux658 + SATLiteral(602))<=0)
-602 -2818 0
-332 -2818 0
-332 -602 -2819 0
c (0<=(SATLiteral(332) - aux658 + SATLiteral(602)))
602 2819 0
332 2819 0
332 602 2818 0
c ((SATLiteral(1007) - aux659 + SATLiteral(872))<=0)
-872 -2821 0
-1007 -2821 0
-1007 -872 -2822 0
c (0<=(SATLiteral(1007) - aux659 + SATLiteral(872)))
872 2822 0
1007 2822 0
1007 872 2821 0
c (( - aux660 + SATLiteral(737) + SATLiteral(197))<=0)
-197 -2824 0
-737 -2824 0
-737 -197 -2825 0
c (0<=( - aux660 + SATLiteral(737) + SATLiteral(197)))
197 2825 0
737 2825 0
737 197 2824 0
c (( - aux661 + SATLiteral(467) + SATLiteral(1142))<=0)
-1142 -2827 0
-467 -2827 0
-467 -1142 -2828 0
c (0<=( - aux661 + SATLiteral(467) + SATLiteral(1142)))
1142 2828 0
467 2828 0
467 1142 2827 0
c ((aux661 - aux662 + SATLiteral(62))<=0)
2827 -2830 0
2828 -2831 0
-62 -2830 0
-62 2827 -2831 0
-62 2828 -2833 0
c (0<=(aux661 - aux662 + SATLiteral(62)))
-2828 2833 0
-2827 2831 0
62 2833 0
62 -2828 2831 0
62 -2827 2830 0
c ((aux658 + aux660 - aux663)<=0)
2824 -2835 0
2825 -2836 0
2818 -2835 0
2818 2824 -2836 0
2818 2825 -2838 0
2819 -2836 0
2819 2824 -2838 0
2819 2825 -2840 0
c (0<=(aux658 + aux660 - aux663))
-2825 2840 0
-2824 2838 0
-2819 2840 0
-2819 -2825 2838 0
-2819 -2824 2836 0
-2818 2838 0
-2818 -2825 2836 0
-2818 -2824 2835 0
c ((SATLiteral(334) - aux664 + SATLiteral(604))<=0)
-604 -2842 0
-334 -2842 0
-334 -604 -2843 0
c (0<=(SATLiteral(334) - aux664 + SATLiteral(604)))
604 2843 0
334 2843 0
334 604 2842 0
c ((SATLiteral(1009) - aux665 + SATLiteral(874))<=0)
-874 -2845 0
-1009 -2845 0
-1009 -874 -2846 0
c (0<=(SATLiteral(1009) - aux665 + SATLiteral(874)))
874 2846 0
1009 2846 0
1009 874 2845 0
c (( - aux666 + SATLiteral(739) + SATLiteral(199))<=0)
-199 -2848 0
-739 -2848 0
-739 -199 -2849 0
c (0<=( - aux666 + SATLiteral(739) + SATLiteral(199)))
199 2849 0
739 2849 0
739 199 2848 0
c (( - aux667 + SATLiteral(469) + SATLiteral(1144))<=0)
-1144 -2851 0
-469 -2851 0
-469 -1144 -2852 0
c (0<=( - aux667 + SATLiteral(469) + SATLiteral(1144)))
1144 2852 0
469 2852 0
469 1144 2851 0
c ((aux667 - aux668 + SATLiteral(64))<=0)
2851 -2854 0
2852 -2855 0
-64 -2854 0
-64 2851 -2855 0
-64 2852 -2857 0
c (0<=(aux667 - aux668 + SATLiteral(64)))
-2852 2857 0
-2851 2855 0
64 2857 0
64 -2852 2855 0
64 -2851 2854 0
c ((aux664 + aux666 - aux669)<=0)
2848 -2859 0
2849 -2860 0
2842 -2859 0
2842 2848 -2860 0
2842 2849 -2862 0
2843 -2860 0
2843 2848 -2862 0
2843 2849 -2864 0
c (0<=(aux664 + aux666 - aux669))
-2849 2864 0
-2848 2862 0
-2843 2864 0
-2843 -2849 2862 0
-2843 -2848 2860 0
-2842 2862 0
-2842 -2849 2860 0
-2842 -2848 2859 0
c ((SATLiteral(336) - aux670 + SATLiteral(606))<=0)
-606 -2866 0
-336 -2866 0
-336 -606 -2867 0
c (0<=(SATLiteral(336) - aux670 + SATLiteral(606)))
606 2867 0
336 2867 0
336 606 2866 0
c ((SATLiteral(1011) - aux671 + SATLiteral(876))<=0)
-876 -2869 0
-1011 -2869 0
-1011 -876 -2870 0
c (0<=(SATLiteral(1011) - aux671 + SATLiteral(876)))
876 2870 0
1011 2870 0
1011 876 2869 0
c (( - aux672 + SATLiteral(741) + SATLiteral(201))<=0)
-201 -2872 0
-741 -2872 0
-741 -201 -2873 0
c (0<=( - aux672 + SATLiteral(741) + SATLiteral(201)))
201 2873 0
741 2873 0
741 201 2872 0
c (( - aux673 + SATLiteral(471) + SATLiteral(1146))<=0)
-1146 -2875 0
-471 -2875 0
-471 -1146 -2876 0
c (0<=( - aux673 + SATLiteral(471) + SATLiteral(1146)))
1146 2876 0
471 2876 0
471 1146 2875 0
c ((aux673 - aux674 + SATLiteral(66))<=0)
2875 -2878 0
2876 -2879 0
-66 -2878 0
-66 2875 -2879 0
-66 2876 -2881 0
c (0<=(aux673 - aux674 + SATLiteral(66)))
-2876 2881 0
-2875 2879 0
66 2881 0
66 -2876 2879 0
66 -2875 2878 0
c ((aux670 + aux672 - aux675)<=0)
2872 -2883 0
2873 -2884 0
2866 -2883 0
2866 2872 -2884 0
2866 2873 -2886 0
2867 -2884 0
2867 2872 -2886 0
2867 2873 -2888 0
c (0<=(aux670 + aux672 - aux675))
-2873 2888 0
-2872 2886 0
-2867 2888 0
-2867 -2873 2886 0
-2867 -2872 2884 0
-2866 2886 0
-2866 -2873 2884 0
-2866 -2872 2883 0
c ((SATLiteral(338) - aux676 + SATLiteral(608))<=0)
-608 -2890 0
-338 -2890 0
-338 -608 -2891 0
c (0<=(SATLiteral(338) - aux676 + SATLiteral(608)))
608 2891 0
338 2891 0
338 608 2890 0
c ((SATLiteral(1013) - aux677 + SATLiteral(878))<=0)
-878 -2893 0
-1013 -2893 0
-1013 -878 -2894 0
c (0<=(SATLiteral(1013) - aux677 + SATLiteral(878)))
878 2894 0
1013 2894 0
1013 878 2893 0
c (( - aux678 + SATLiteral(743) + SATLiteral(203))<=0)
-203 -2896 0
-743 -2896 0
-743 -203 -2897 0
c (0<=( - aux678 + SATLiteral(743) + SATLiteral(203)))
203 2897 0
743 2897 0
743 203 2896 0
c (( - aux679 + SATLiteral(473) + SATLiteral(1148))<=0)
-1148 -2899 0
-473 -2899 0
-473 -1148 -2900 0
c (0<=( - aux679 + SATLiteral(473) + SATLiteral(1148)))
1148 2900 0
473 2900 0
473 1148 2899 0
c ((aux679 - aux680 + SATLiteral(68))<=0)
2899 -2902 0
2900 -2903 0
-68 -2902 0
-68 2899 -2903 0
-68 2900 -2905 0
c (0<=(aux679 - aux680 + SATLiteral(68)))
-2900 2905 0
-2899 2903 0
68 2905 0
68 -2900 2903 0
68 -2899 2902 0
c ((aux676 + aux678 - aux681)<=0)
2896 -2907 0
2897 -2908 0
2890 -2907 0
2890 2896 -2908 0
2890 2897 -2910 0
2891 -2908 0
2891 2896 -2910 0
2891 2897 -2912 0
c (0<=(aux676 + aux678 - aux681))
-2897 2912 0
-2896 2910 0
-2891 2912 0
-2891 -2897 2910 0
-2891 -2896 2908 0
-2890 2910 0
-2890 -2897 2908 0
-2890 -2896 2907 0
c ((SATLiteral(340) - aux682 + SATLiteral(610))<=0)
-610 -2914 0
-340 -2914 0
-340 -610 -2915 0
c (0<=(SATLiteral(340) - aux682 + SATLiteral(610)))
610 2915 0
340 2915 0
340 610 2914 0
c ((SATLiteral(1015) - aux683 + SATLiteral(880))<=0)
-880 -2917 0
-1015 -2917 0
-1015 -880 -2918 0
c (0<=(SATLiteral(1015) - aux683 + SATLiteral(880)))
880 2918 0
1015 2918 0
1015 880 2917 0
c (( - aux684 + SATLiteral(745) + SATLiteral(205))<=0)
-205 -2920 0
-745 -2920 0
-745 -205 -2921 0
c (0<=( - aux684 + SATLiteral(745) + SATLiteral(205)))
205 2921 0
745 2921 0
745 205 2920 0
c (( - aux685 + SATLiteral(475) + SATLiteral(1150))<=0)
-1150 -2923 0
-475 -2923 0
-475 -1150 -2924 0
c (0<=( - aux685 + SATLiteral(475) + SATLiteral(1150)))
1150 2924 0
475 2924 0
475 1150 2923 0
c ((aux685 - aux686 + SATLiteral(70))<=0)
2923 -2926 0
2924 -2927 0
-70 -2926 0
-70 2923 -2927 0
-70 2924 -2929 0
c (0<=(aux685 - aux686 + SATLiteral(70)))
-2924 2929 0
-2923 2927 0
70 2929 0
70 -2924 2927 0
70 -2923 2926 0
c ((aux682 + aux684 - aux687)<=0)
2920 -2931 0
2921 -2932 0
2914 -2931 0
2914 2920 -2932 0
2914 2921 -2934 0
2915 -2932 0
2915 2920 -2934 0
2915 2921 -2936 0
c (0<=(aux682 + aux684 - aux687))
-2921 2936 0
-2920 2934 0
-2915 2936 0
-2915 -2921 2934 0
-2915 -2920 2932 0
-2914 2934 0
-2914 -2921 2932 0
-2914 -2920 2931 0
c ((SATLiteral(342) - aux688 + SATLiteral(612))<=0)
-612 -2938 0
-342 -2938 0
-342 -612 -2939 0
c (0<=(SATLiteral(342) - aux688 + SATLiteral(612)))
612 2939 0
342 2939 0
342 612 2938 0
c ((SATLiteral(1017) - aux689 + SATLiteral(882))<=0)
-882 -2941 0
-1017 -2941 0
-1017 -882 -2942 0
c (0<=(SATLiteral(1017) - aux689 + SATLiteral(882)))
882 2942 0
1017 2942 0
1017 882 2941 0
c (( - aux690 + SATLiteral(747) + SATLiteral(207))<=0)
-207 -2944 0
-747 -2944 0
-747 -207 -2945 0
c (0<=( - aux690 + SATLiteral(747) + SATLiteral(207)))
207 2945 0
747 2945 0
747 207 2944 0
c (( - aux691 + SATLiteral(477) + SATLiteral(1152))<=0)
-1152 -2947 0
-477 -2947 0
-477 -1152 -2948 0
c (0<=( - aux691 + SATLiteral(477) + SATLiteral(1152)))
1152 2948 0
477 2948 0
477 1152 2947 0
c ((aux691 - aux692 + SATLiteral(72))<=0)
2947 -2950 0
2948 -2951 0
-72 -2950 0
-72 2947 -2951 0
-72 2948 -2953 0
c (0<=(aux691 - aux692 + SATLiteral(72)))
-2948 2953 0
-2947 2951 0
72 2953 0
72 -2948 2951 0
72 -2947 2950 0
c ((aux688 + aux690 - aux693)<=0)
2944 -2955 0
2945 -2956 0
2938 -2955 0
2938 2944 -2956 0
2938 2945 -2958 0
2939 -2956 0
2939 2944 -2958 0
2939 2945 -2960 0
c (0<=(aux688 + aux690 - aux693))
-2945 2960 0
-2944 2958 0
-2939 2960 0
-2939 -2945 2958 0
-2939 -2944 2956 0
-2938 2958 0
-2938 -2945 2956 0
-2938 -2944 2955 0
c ((SATLiteral(344) - aux694 + SATLiteral(614))<=0)
-614 -2962 0
-344 -2962 0
-344 -614 -2963 0
c (0<=(SATLiteral(344) - aux694 + SATLiteral(614)))
614 2963 0
344 2963 0
344 614 2962 0
c ((SATLiteral(1019) - aux695 + SATLiteral(884))<=0)
-884 -2965 0
-1019 -2965 0
-1019 -884 -2966 0
c (0<=(SATLiteral(1019) - aux695 + SATLiteral(884)))
884 2966 0
1019 2966 0
1019 884 2965 0
c (( - aux696 + SATLiteral(749) + SATLiteral(209))<=0)
-209 -2968 0
-749 -2968 0
-749 -209 -2969 0
c (0<=( - aux696 + SATLiteral(749) + SATLiteral(209)))
209 2969 0
749 2969 0
749 209 2968 0
c (( - aux697 + SATLiteral(479) + SATLiteral(1154))<=0)
-1154 -2971 0
-479 -2971 0
-479 -1154 -2972 0
c (0<=( - aux697 + SATLiteral(479) + SATLiteral(1154)))
1154 2972 0
479 2972 0
479 1154 2971 0
c ((aux697 - aux698 + SATLiteral(74))<=0)
2971 -2974 0
2972 -2975 0
-74 -2974 0
-74 2971 -2975 0
-74 2972 -2977 0
c (0<=(aux697 - aux698 + SATLiteral(74)))
-2972 2977 0
-2971 2975 0
74 2977 0
74 -2972 2975 0
74 -2971 2974 0
c ((aux694 + aux696 - aux699)<=0)
2968 -2979 0
2969 -2980 0
2962 -2979 0
2962 2968 -2980 0
2962 2969 -2982 0
2963 -2980 0
2963 2968 -2982 0
2963 2969 -2984 0
c (0<=(aux694 + aux696 - aux699))
-2969 2984 0
-2968 2982 0
-2963 2984 0
-2963 -2969 2982 0
-2963 -2968 2980 0
-2962 2982 0
-2962 -2969 2980 0
-2962 -2968 2979 0
c ((SATLiteral(346) - aux700 + SATLiteral(616))<=0)
-616 -2986 0
-346 -2986 0
-346 -616 -2987 0
c (0<=(SATLiteral(346) - aux700 + SATLiteral(616)))
616 2987 0
346 2987 0
346 616 2986 0
c ((SATLiteral(1021) - aux701 + SATLiteral(886))<=0)
-886 -2989 0
-1021 -2989 0
-1021 -886 -2990 0
c (0<=(SATLiteral(1021) - aux701 + SATLiteral(886)))
886 2990 0
1021 2990 0
1021 886 2989 0
c (( - aux702 + SATLiteral(751) + SATLiteral(211))<=0)
-211 -2992 0
-751 -2992 0
-751 -211 -2993 0
c (0<=( - aux702 + SATLiteral(751) + SATLiteral(211)))
211 2993 0
751 2993 0
751 211 2992 0
c (( - aux703 + SATLiteral(481) + SATLiteral(1156))<=0)
-1156 -2995 0
-481 -2995 0
-481 -1156 -2996 0
c (0<=( - aux703 + SATLiteral(481) + SATLiteral(1156)))
1156 2996 0
481 2996 0
481 1156 2995 0
c ((aux703 - aux704 + SATLiteral(76))<=0)
2995 -2998 0
2996 -2999 0
-76 -2998 0
-76 2995 -2999 0
-76 2996 -3001 0
c (0<=(aux703 - aux704 + SATLiteral(76)))
-2996 3001 0
-2995 2999 0
76 3001 0
76 -2996 2999 0
76 -2995 2998 0
c ((aux700 + aux702 - aux705)<=0)
2992 -3003 0
2993 -3004 0
2986 -3003 0
2986 2992 -3004 0
2986 2993 -3006 0
2987 -3004 0
2987 2992 -3006 0
2987 2993 -3008 0
c (0<=(aux700 + aux702 - aux705))
-2993 3008 0
-2992 3006 0
-2987 3008 0
-2987 -2993 3006 0
-2987 -2992 3004 0
-2986 3006 0
-2986 -2993 3004 0
-2986 -2992 3003 0
c ((SATLiteral(-345) - aux706 + SATLiteral(-615))<=0)
615 -3010 0
345 -3010 0
345 615 -3011 0
c (0<=(SATLiteral(-345) - aux706 + SATLiteral(-615)))
-615 3011 0
-345 3011 0
-345 -615 3010 0
c ((SATLiteral(-1020) - aux707 + SATLiteral(-885))<=0)
885 -3013 0
1020 -3013 0
1020 885 -3014 0
c (0<=(SATLiteral(-1020) - aux707 + SATLiteral(-885)))
-885 3014 0
-1020 3014 0
-1020 -885 3013 0
c (( - aux708 + SATLiteral(-750) + SATLiteral(-210))<=0)
210 -3016 0
750 -3016 0
750 210 -3017 0
c (0<=( - aux708 + SATLiteral(-750) + SATLiteral(-210)))
-210 3017 0
-750 3017 0
-750 -210 3016 0
c (( - aux709 + SATLiteral(-480) + SATLiteral(-1155))<=0)
1155 -3019 0
480 -3019 0
480 1155 -3020 0
c (0<=( - aux709 + SATLiteral(-480) + SATLiteral(-1155)))
-1155 3020 0
-480 3020 0
-480 -1155 3019 0
c ((aux709 - aux710 + SATLiteral(-75))<=0)
3019 -3022 0
3020 -3023 0
75 -3022 0
75 3019 -3023 0
75 3020 -3025 0
c (0<=(aux709 - aux710 + SATLiteral(-75)))
-3020 3025 0
-3019 3023 0
-75 3025 0
-75 -3020 3023 0
-75 -3019 3022 0
c ((aux706 + aux708 - aux711)<=0)
3016 -3027 0
3017 -3028 0
3010 -3027 0
3010 3016 -3028 0
3010 3017 -3030 0
3011 -3028 0
3011 3016 -3030 0
3011 3017 -3032 0
c (0<=(aux706 + aux708 - aux711))
-3017 3032 0
-3016 3030 0
-3011 3032 0
-3011 -3017 3030 0
-3011 -3016 3028 0
-3010 3030 0
-3010 -3017 3028 0
-3010 -3016 3027 0
c ((SATLiteral(347) - aux712 + SATLiteral(617))<=0)
-617 -3034 0
-347 -3034 0
-347 -617 -3035 0
c (0<=(SATLiteral(347) - aux712 + SATLiteral(617)))
617 3035 0
347 3035 0
347 617 3034 0
c ((SATLiteral(1022) - aux713 + SATLiteral(887))<=0)
-887 -3037 0
-1022 -3037 0
-1022 -887 -3038 0
c (0<=(SATLiteral(1022) - aux713 + SATLiteral(887)))
887 3038 0
1022 3038 0
1022 887 3037 0
c (( - aux714 + SATLiteral(752) + SATLiteral(212))<=0)
-212 -3040 0
-752 -3040 0
-752 -212 -3041 0
c (0<=( - aux714 + SATLiteral(752) + SATLiteral(212)))
212 3041 0
752 3041 0
752 212 3040 0
c (( - aux715 + SATLiteral(482) + SATLiteral(1157))<=0)
-1157 -3043 0
-482 -3043 0
-482 -1157 -3044 0
c (0<=( - aux715 + SATLiteral(482) + SATLiteral(1157)))
1157 3044 0
482 3044 0
482 1157 3043 0
c ((aux715 - aux716 + SATLiteral(77))<=0)
3043 -3046 0
3044 -3047 0
-77 -3046 0
-77 3043 -3047 0
-77 3044 -3049 0
c (0<=(aux715 - aux716 + SATLiteral(77)))
-3044 3049 0
-3043 3047 0
77 3049 0
77 -3044 3047 0
77 -3043 3046 0
c ((aux712 + aux714 - aux717)<=0)
3040 -3051 0
3041 -3052 0
3034 -3051 0
3034 3040 -3052 0
3034 3041 -3054 0
3035 -3052 0
3035 3040 -3054 0
3035 3041 -3056 0
c (0<=(aux712 + aux714 - aux717))
-3041 3056 0
-3040 3054 0
-3035 3056 0
-3035 -3041 3054 0
-3035 -3040 3052 0
-3034 3054 0
-3034 -3041 3052 0
-3034 -3040 3051 0
c ((SATLiteral(349) - aux718 + SATLiteral(619))<=0)
-619 -3058 0
-349 -3058 0
-349 -619 -3059 0
c (0<=(SATLiteral(349) - aux718 + SATLiteral(619)))
619 3059 0
349 3059 0
349 619 3058 0
c ((SATLiteral(1024) - aux719 + SATLiteral(889))<=0)
-889 -3061 0
-1024 -3061 0
-1024 -889 -3062 0
c (0<=(SATLiteral(1024) - aux719 + SATLiteral(889)))
889 3062 0
1024 3062 0
1024 889 3061 0
c (( - aux720 + SATLiteral(754) + SATLiteral(214))<=0)
-214 -3064 0
-754 -3064 0
-754 -214 -3065 0
c (0<=( - aux720 + SATLiteral(754) + SATLiteral(214)))
214 3065 0
754 3065 0
754 214 3064 0
c (( - aux721 + SATLiteral(484) + SATLiteral(1159))<=0)
-1159 -3067 0
-484 -3067 0
-484 -1159 -3068 0
c (0<=( - aux721 + SATLiteral(484) + SATLiteral(1159)))
1159 3068 0
484 3068 0
484 1159 3067 0
c ((aux721 - aux722 + SATLiteral(79))<=0)
3067 -3070 0
3068 -3071 0
-79 -3070 0
-79 3067 -3071 0
-79 3068 -3073 0
c (0<=(aux721 - aux722 + SATLiteral(79)))
-3068 3073 0
-3067 3071 0
79 3073 0
79 -3068 3071 0
79 -3067 3070 0
c ((aux718 + aux720 - aux723)<=0)
3064 -3075 0
3065 -3076 0
3058 -3075 0
3058 3064 -3076 0
3058 3065 -3078 0
3059 -3076 0
3059 3064 -3078 0
3059 3065 -3080 0
c (0<=(aux718 + aux720 - aux723))
-3065 3080 0
-3064 3078 0
-3059 3080 0
-3059 -3065 3078 0
-3059 -3064 3076 0
-3058 3078 0
-3058 -3065 3076 0
-3058 -3064 3075 0
c ((SATLiteral(351) - aux724 + SATLiteral(621))<=0)
-621 -3082 0
-351 -3082 0
-351 -621 -3083 0
c (0<=(SATLiteral(351) - aux724 + SATLiteral(621)))
621 3083 0
351 3083 0
351 621 3082 0
c ((SATLiteral(1026) - aux725 + SATLiteral(891))<=0)
-891 -3085 0
-1026 -3085 0
-1026 -891 -3086 0
c (0<=(SATLiteral(1026) - aux725 + SATLiteral(891)))
891 3086 0
1026 3086 0
1026 891 3085 0
c (( - aux726 + SATLiteral(756) + SATLiteral(216))<=0)
-216 -3088 0
-756 -3088 0
-756 -216 -3089 0
c (0<=( - aux726 + SATLiteral(756) + SATLiteral(216)))
216 3089 0
756 3089 0
756 216 3088 0
c (( - aux727 + SATLiteral(486) + SATLiteral(1161))<=0)
-1161 -3091 0
-486 -3091 0
-486 -1161 -3092 0
c (0<=( - aux727 + SATLiteral(486) + SATLiteral(1161)))
1161 3092 0
486 3092 0
486 1161 3091 0
c ((aux727 - aux728 + SATLiteral(81))<=0)
3091 -3094 0
3092 -3095 0
-81 -3094 0
-81 3091 -3095 0
-81 3092 -3097 0
c (0<=(aux727 - aux728 + SATLiteral(81)))
-3092 3097 0
-3091 3095 0
81 3097 0
81 -3092 3095 0
81 -3091 3094 0
c ((aux724 + aux726 - aux729)<=0)
3088 -3099 0
3089 -3100 0
3082 -3099 0
3082 3088 -3100 0
3082 3089 -3102 0
3083 -3100 0
3083 3088 -3102 0
3083 3089 -3104 0
c (0<=(aux724 + aux726 - aux729))
-3089 3104 0
-3088 3102 0
-3083 3104 0
-3083 -3089 3102 0
-3083 -3088 3100 0
-3082 3102 0
-3082 -3089 3100 0
-3082 -3088 3099 0
c ((SATLiteral(353) - aux730 + SATLiteral(623))<=0)
-623 -3106 0
-353 -3106 0
-353 -623 -3107 0
c (0<=(SATLiteral(353) - aux730 + SATLiteral(623)))
623 3107 0
353 3107 0
353 623 3106 0
c ((SATLiteral(1028) - aux731 + SATLiteral(893))<=0)
-893 -3109 0
-1028 -3109 0
-1028 -893 -3110 0
c (0<=(SATLiteral(1028) - aux731 + SATLiteral(893)))
893 3110 0
1028 3110 0
1028 893 3109 0
c (( - aux732 + SATLiteral(758) + SATLiteral(218))<=0)
-218 -3112 0
-758 -3112 0
-758 -218 -3113 0
c (0<=( - aux732 + SATLiteral(758) + SATLiteral(218)))
218 3113 0
758 3113 0
758 218 3112 0
c (( - aux733 + SATLiteral(488) + SATLiteral(1163))<=0)
-1163 -3115 0
-488 -3115 0
-488 -1163 -3116 0
c (0<=( - aux733 + SATLiteral(488) + SATLiteral(1163)))
1163 3116 0
488 3116 0
488 1163 3115 0
c ((aux733 - aux734 + SATLiteral(83))<=0)
3115 -3118 0
3116 -3119 0
-83 -3118 0
-83 3115 -3119 0
-83 3116 -3121 0
c (0<=(aux733 - aux734 + SATLiteral(83)))
-3116 3121 0
-3115 3119 0
83 3121 0
83 -3116 3119 0
83 -3115 3118 0
c ((aux730 + aux732 - aux735)<=0)
3112 -3123 0
3113 -3124 0
3106 -3123 0
3106 3112 -3124 0
3106 3113 -3126 0
3107 -3124 0
3107 3112 -3126 0
3107 3113 -3128 0
c (0<=(aux730 + aux732 - aux735))
-3113 3128 0
-3112 3126 0
-3107 3128 0
-3107 -3113 3126 0
-3107 -3112 3124 0
-3106 3126 0
-3106 -3113 3124 0
-3106 -3112 3123 0
c ((SATLiteral(355) - aux736 + SATLiteral(625))<=0)
-625 -3130 0
-355 -3130 0
-355 -625 -3131 0
c (0<=(SATLiteral(355) - aux736 + SATLiteral(625)))
625 3131 0
355 3131 0
355 625 3130 0
c ((SATLiteral(1030) - aux737 + SATLiteral(895))<=0)
-895 -3133 0
-1030 -3133 0
-1030 -895 -3134 0
c (0<=(SATLiteral(1030) - aux737 + SATLiteral(895)))
895 3134 0
1030 3134 0
1030 895 3133 0
c (( - aux738 + SATLiteral(760) + SATLiteral(220))<=0)
-220 -3136 0
-760 -3136 0
-760 -220 -3137 0
c (0<=( - aux738 + SATLiteral(760) + SATLiteral(220)))
220 3137 0
760 3137 0
760 220 3136 0
c (( - aux739 + SATLiteral(490) + SATLiteral(1165))<=0)
-1165 -3139 0
-490 -3139 0
-490 -1165 -3140 0
c (0<=( - aux739 + SATLiteral(490) + SATLiteral(1165)))
1165 3140 0
490 3140 0
490 1165 3139 0
c ((aux739 - aux740 + SATLiteral(85))<=0)
3139 -3142 0
3140 -3143 0
-85 -3142 0
-85 3139 -3143 0
-85 3140 -3145 0
c (0<=(aux739 - aux740 + SATLiteral(85)))
-3140 3145 0
-3139 3143 0
85 3145 0
85 -3140 3143 0
85 -3139 3142 0
c ((aux736 + aux738 - aux741)<=0)
3136 -3147 0
3137 -3148 0
3130 -3147 0
3130 3136 -3148 0
3130 3137 -3150 0
3131 -3148 0
3131 3136 -3150 0
3131 3137 -3152 0
c (0<=(aux736 + aux738 - aux741))
-3137 3152 0
-3136 3150 0
-3131 3152 0
-3131 -3137 3150 0
-3131 -3136 3148 0
-3130 3150 0
-3130 -3137 3148 0
-3130 -3136 3147 0
c ((SATLiteral(357) - aux742 + SATLiteral(627))<=0)
-627 -3154 0
-357 -3154 0
-357 -627 -3155 0
c (0<=(SATLiteral(357) - aux742 + SATLiteral(627)))
627 3155 0
357 3155 0
357 627 3154 0
c ((SATLiteral(1032) - aux743 + SATLiteral(897))<=0)
-897 -3157 0
-1032 -3157 0
-1032 -897 -3158 0
c (0<=(SATLiteral(1032) - aux743 + SATLiteral(897)))
897 3158 0
1032 3158 0
1032 897 3157 0
c (( - aux744 + SATLiteral(762) + SATLiteral(222))<=0)
-222 -3160 0
-762 -3160 0
-762 -222 -3161 0
c (0<=( - aux744 + SATLiteral(762) + SATLiteral(222)))
222 3161 0
762 3161 0
762 222 3160 0
c (( - aux745 + SATLiteral(492) + SATLiteral(1167))<=0)
-1167 -3163 0
-492 -3163 0
-492 -1167 -3164 0
c (0<=( - aux745 + SATLiteral(492) + SATLiteral(1167)))
1167 3164 0
492 3164 0
492 1167 3163 0
c ((aux745 - aux746 + SATLiteral(87))<=0)
3163 -3166 0
3164 -3167 0
-87 -3166 0
-87 3163 -3167 0
-87 3164 -3169 0
c (0<=(aux745 - aux746 + SATLiteral(87)))
-3164 3169 0
-3163 3167 0
87 3169 0
87 -3164 3167 0
87 -3163 3166 0
c ((aux742 + aux744 - aux747)<=0)
3160 -3171 0
3161 -3172 0
3154 -3171 0
3154 3160 -3172 0
3154 3161 -3174 0
3155 -3172 0
3155 3160 -3174 0
3155 3161 -3176 0
c (0<=(aux742 + aux744 - aux747))
-3161 3176 0
-3160 3174 0
-3155 3176 0
-3155 -3161 3174 0
-3155 -3160 3172 0
-3154 3174 0
-3154 -3161 3172 0
-3154 -3160 3171 0
c ((SATLiteral(359) - aux748 + SATLiteral(629))<=0)
-629 -3178 0
-359 -3178 0
-359 -629 -3179 0
c (0<=(SATLiteral(359) - aux748 + SATLiteral(629)))
629 3179 0
359 3179 0
359 629 3178 0
c ((SATLiteral(1034) - aux749 + SATLiteral(899))<=0)
-899 -3181 0
-1034 -3181 0
-1034 -899 -3182 0
c (0<=(SATLiteral(1034) - aux749 + SATLiteral(899)))
899 3182 0
1034 3182 0
1034 899 3181 0
c (( - aux750 + SATLiteral(764) + SATLiteral(224))<=0)
-224 -3184 0
-764 -3184 0
-764 -224 -3185 0
c (0<=( - aux750 + SATLiteral(764) + SATLiteral(224)))
224 3185 0
764 3185 0
764 224 3184 0
c (( - aux751 + SATLiteral(494) + SATLiteral(1169))<=0)
-1169 -3187 0
-494 -3187 0
-494 -1169 -3188 0
c (0<=( - aux751 + SATLiteral(494) + SATLiteral(1169)))
1169 3188 0
494 3188 0
494 1169 3187 0
c ((aux751 - aux752 + SATLiteral(89))<=0)
3187 -3190 0
3188 -3191 0
-89 -3190 0
-89 3187 -3191 0
-89 3188 -3193 0
c (0<=(aux751 - aux752 + SATLiteral(89)))
-3188 3193 0
-3187 3191 0
89 3193 0
89 -3188 3191 0
89 -3187 3190 0
c ((aux748 + aux750 - aux753)<=0)
3184 -3195 0
3185 -3196 0
3178 -3195 0
3178 3184 -3196 0
3178 3185 -3198 0
3179 -3196 0
3179 3184 -3198 0
3179 3185 -3200 0
c (0<=(aux748 + aux750 - aux753))
-3185 3200 0
-3184 3198 0
-3179 3200 0
-3179 -3185 3198 0
-3179 -3184 3196 0
-3178 3198 0
-3178 -3185 3196 0
-3178 -3184 3195 0
c ((SATLiteral(361) - aux754 + SATLiteral(631))<=0)
-631 -3202 0
-361 -3202 0
-361 -631 -3203 0
c (0<=(SATLiteral(361) - aux754 + SATLiteral(631)))
631 3203 0
361 3203 0
361 631 3202 0
c ((SATLiteral(1036) - aux755 + SATLiteral(901))<=0)
-901 -3205 0
-1036 -3205 0
-1036 -901 -3206 0
c (0<=(SATLiteral(1036) - aux755 + SATLiteral(901)))
901 3206 0
1036 3206 0
1036 901 3205 0
c (( - aux756 + SATLiteral(766) + SATLiteral(226))<=0)
-226 -3208 0
-766 -3208 0
-766 -226 -3209 0
c (0<=( - aux756 + SATLiteral(766) + SATLiteral(226)))
226 3209 0
766 3209 0
766 226 3208 0
c (( - aux757 + SATLiteral(496) + SATLiteral(1171))<=0)
-1171 -3211 0
-496 -3211 0
-496 -1171 -3212 0
c (0<=( - aux757 + SATLiteral(496) + SATLiteral(1171)))
1171 3212 0
496 3212 0
496 1171 3211 0
c ((aux757 - aux758 + SATLiteral(91))<=0)
3211 -3214 0
3212 -3215 0
-91 -3214 0
-91 3211 -3215 0
-91 3212 -3217 0
c (0<=(aux757 - aux758 + SATLiteral(91)))
-3212 3217 0
-3211 3215 0
91 3217 0
91 -3212 3215 0
91 -3211 3214 0
c ((aux754 + aux756 - aux759)<=0)
3208 -3219 0
3209 -3220 0
3202 -3219 0
3202 3208 -3220 0
3202 3209 -3222 0
3203 -3220 0
3203 3208 -3222 0
3203 3209 -3224 0
c (0<=(aux754 + aux756 - aux759))
-3209 3224 0
-3208 3222 0
-3203 3224 0
-3203 -3209 3222 0
-3203 -3208 3220 0
-3202 3222 0
-3202 -3209 3220 0
-3202 -3208 3219 0
c ((SATLiteral(-360) - aux760 + SATLiteral(-630))<=0)
630 -3226 0
360 -3226 0
360 630 -3227 0
c (0<=(SATLiteral(-360) - aux760 + SATLiteral(-630)))
-630 3227 0
-360 3227 0
-360 -630 3226 0
c ((SATLiteral(-1035) - aux761 + SATLiteral(-900))<=0)
900 -3229 0
1035 -3229 0
1035 900 -3230 0
c (0<=(SATLiteral(-1035) - aux761 + SATLiteral(-900)))
-900 3230 0
-1035 3230 0
-1035 -900 3229 0
c (( - aux762 + SATLiteral(-765) + SATLiteral(-225))<=0)
225 -3232 0
765 -3232 0
765 225 -3233 0
c (0<=( - aux762 + SATLiteral(-765) + SATLiteral(-225)))
-225 3233 0
-765 3233 0
-765 -225 3232 0
c (( - aux763 + SATLiteral(-495) + SATLiteral(-1170))<=0)
1170 -3235 0
495 -3235 0
495 1170 -3236 0
c (0<=( - aux763 + SATLiteral(-495) + SATLiteral(-1170)))
-1170 3236 0
-495 3236 0
-495 -1170 3235 0
c ((aux763 - aux764 + SATLiteral(-90))<=0)
3235 -3238 0
3236 -3239 0
90 -3238 0
90 3235 -3239 0
90 3236 -3241 0
c (0<=(aux763 - aux764 + SATLiteral(-90)))
-3236 3241 0
-3235 3239 0
-90 3241 0
-90 -3236 3239 0
-90 -3235 3238 0
c ((aux760 + aux762 - aux765)<=0)
3232 -3243 0
3233 -3244 0
3226 -3243 0
3226 3232 -3244 0
3226 3233 -3246 0
3227 -3244 0
3227 3232 -3246 0
3227 3233 -3248 0
c (0<=(aux760 + aux762 - aux765))
-3233 3248 0
-3232 3246 0
-3227 3248 0
-3227 -3233 3246 0
-3227 -3232 3244 0
-3226 3246 0
-3226 -3233 3244 0
-3226 -3232 3243 0
c ((SATLiteral(362) - aux766 + SATLiteral(632))<=0)
-632 -3250 0
-362 -3250 0
-362 -632 -3251 0
c (0<=(SATLiteral(362) - aux766 + SATLiteral(632)))
632 3251 0
362 3251 0
362 632 3250 0
c ((SATLiteral(1037) - aux767 + SATLiteral(902))<=0)
-902 -3253 0
-1037 -3253 0
-1037 -902 -3254 0
c (0<=(SATLiteral(1037) - aux767 + SATLiteral(902)))
902 3254 0
1037 3254 0
1037 902 3253 0
c (( - aux768 + SATLiteral(767) + SATLiteral(227))<=0)
-227 -3256 0
-767 -3256 0
-767 -227 -3257 0
c (0<=( - aux768 + SATLiteral(767) + SATLiteral(227)))
227 3257 0
767 3257 0
767 227 3256 0
c (( - aux769 + SATLiteral(497) + SATLiteral(1172))<=0)
-1172 -3259 0
-497 -3259 0
-497 -1172 -3260 0
c (0<=( - aux769 + SATLiteral(497) + SATLiteral(1172)))
1172 3260 0
497 3260 0
497 1172 3259 0
c ((aux769 - aux770 + SATLiteral(92))<=0)
3259 -3262 0
3260 -3263 0
-92 -3262 0
-92 3259 -3263 0
-92 3260 -3265 0
c (0<=(aux769 - aux770 + SATLiteral(92)))
-3260 3265 0
-3259 3263 0
92 3265 0
92 -3260 3263 0
92 -3259 3262 0
c ((aux766 + aux768 - aux771)<=0)
3256 -3267 0
3257 -3268 0
3250 -3267 0
3250 3256 -3268 0
3250 3257 -3270 0
3251 -3268 0
3251 3256 -3270 0
3251 3257 -3272 0
c (0<=(aux766 + aux768 - aux771))
-3257 3272 0
-3256 3270 0
-3251 3272 0
-3251 -3257 3270 0
-3251 -3256 3268 0
-3250 3270 0
-3250 -3257 3268 0
-3250 -3256 3267 0
c ((SATLiteral(364) - aux772 + SATLiteral(634))<=0)
-634 -3274 0
-364 -3274 0
-364 -634 -3275 0
c (0<=(SATLiteral(364) - aux772 + SATLiteral(634)))
634 3275 0
364 3275 0
364 634 3274 0
c ((SATLiteral(1039) - aux773 + SATLiteral(904))<=0)
-904 -3277 0
-1039 -3277 0
-1039 -904 -3278 0
c (0<=(SATLiteral(1039) - aux773 + SATLiteral(904)))
904 3278 0
1039 3278 0
1039 904 3277 0
c (( - aux774 + SATLiteral(769) + SATLiteral(229))<=0)
-229 -3280 0
-769 -3280 0
-769 -229 -3281 0
c (0<=( - aux774 + SATLiteral(769) + SATLiteral(229)))
229 3281 0
769 3281 0
769 229 3280 0
c (( - aux775 + SATLiteral(499) + SATLiteral(1174))<=0)
-1174 -3283 0
-499 -3283 0
-499 -1174 -3284 0
c (0<=( - aux775 + SATLiteral(499) + SATLiteral(1174)))
1174 3284 0
499 3284 0
499 1174 3283 0
c ((aux775 - aux776 + SATLiteral(94))<=0)
3283 -3286 0
3284 -3287 0
-94 -3286 0
-94 3283 -3287 0
-94 3284 -3289 0
c (0<=(aux775 - aux776 + SATLiteral(94)))
-3284 3289 0
-3283 3287 0
94 3289 0
94 -3284 3287 0
94 -3283 3286 0
c ((aux772 + aux774 - aux777)<=0)
3280 -3291 0
3281 -3292 0
3274 -3291 0
3274 3280 -3292 0
3274 3281 -3294 0
3275 -3292 0
3275 3280 -3294 0
3275 3281 -3296 0
c (0<=(aux772 + aux774 - aux777))
-3281 3296 0
-3280 3294 0
-3275 3296 0
-3275 -3281 3294 0
-3275 -3280 3292 0
-3274 3294 0
-3274 -3281 3292 0
-3274 -3280 3291 0
c ((SATLiteral(366) - aux778 + SATLiteral(636))<=0)
-636 -3298 0
-366 -3298 0
-366 -636 -3299 0
c (0<=(SATLiteral(366) - aux778 + SATLiteral(636)))
636 3299 0
366 3299 0
366 636 3298 0
c ((SATLiteral(1041) - aux779 + SATLiteral(906))<=0)
-906 -3301 0
-1041 -3301 0
-1041 -906 -3302 0
c (0<=(SATLiteral(1041) - aux779 + SATLiteral(906)))
906 3302 0
1041 3302 0
1041 906 3301 0
c (( - aux780 + SATLiteral(771) + SATLiteral(231))<=0)
-231 -3304 0
-771 -3304 0
-771 -231 -3305 0
c (0<=( - aux780 + SATLiteral(771) + SATLiteral(231)))
231 3305 0
771 3305 0
771 231 3304 0
c (( - aux781 + SATLiteral(501) + SATLiteral(1176))<=0)
-1176 -3307 0
-501 -3307 0
-501 -1176 -3308 0
c (0<=( - aux781 + SATLiteral(501) + SATLiteral(1176)))
1176 3308 0
501 3308 0
501 1176 3307 0
c ((aux781 - aux782 + SATLiteral(96))<=0)
3307 -3310 0
3308 -3311 0
-96 -3310 0
-96 3307 -3311 0
-96 3308 -3313 0
c (0<=(aux781 - aux782 + SATLiteral(96)))
-3308 3313 0
-3307 3311 0
96 3313 0
96 -3308 3311 0
96 -3307 3310 0
c ((aux778 + aux780 - aux783)<=0)
3304 -3315 0
3305 -3316 0
3298 -3315 0
3298 3304 -3316 0
3298 3305 -3318 0
3299 -3316 0
3299 3304 -3318 0
3299 3305 -3320 0
c (0<=(aux778 + aux780 - aux783))
-3305 3320 0
-3304 3318 0
-3299 3320 0
-3299 -3305 3318 0
-3299 -3304 3316 0
-3298 3318 0
-3298 -3305 3316 0
-3298 -3304 3315 0
c ((SATLiteral(368) - aux784 + SATLiteral(638))<=0)
-638 -3322 0
-368 -3322 0
-368 -638 -3323 0
c (0<=(SATLiteral(368) - aux784 + SATLiteral(638)))
638 3323 0
368 3323 0
368 638 3322 0
c ((SATLiteral(1043) - aux785 + SATLiteral(908))<=0)
-908 -3325 0
-1043 -3325 0
-1043 -908 -3326 0
c (0<=(SATLiteral(1043) - aux785 + SATLiteral(908)))
908 3326 0
1043 3326 0
1043 908 3325 0
c (( - aux786 + SATLiteral(773) + SATLiteral(233))<=0)
-233 -3328 0
-773 -3328 0
-773 -233 -3329 0
c (0<=( - aux786 + SATLiteral(773) + SATLiteral(233)))
233 3329 0
773 3329 0
773 233 3328 0
c (( - aux787 + SATLiteral(503) + SATLiteral(1178))<=0)
-1178 -3331 0
-503 -3331 0
-503 -1178 -3332 0
c (0<=( - aux787 + SATLiteral(503) + SATLiteral(1178)))
1178 3332 0
503 3332 0
503 1178 3331 0
c ((aux787 - aux788 + SATLiteral(98))<=0)
3331 -3334 0
3332 -3335 0
-98 -3334 0
-98 3331 -3335 0
-98 3332 -3337 0
c (0<=(aux787 - aux788 + SATLiteral(98)))
-3332 3337 0
-3331 3335 0
98 3337 0
98 -3332 3335 0
98 -3331 3334 0
c ((aux784 + aux786 - aux789)<=0)
3328 -3339 0
3329 -3340 0
3322 -3339 0
3322 3328 -3340 0
3322 3329 -3342 0
3323 -3340 0
3323 3328 -3342 0
3323 3329 -3344 0
c (0<=(aux784 + aux786 - aux789))
-3329 3344 0
-3328 3342 0
-3323 3344 0
-3323 -3329 3342 0
-3323 -3328 3340 0
-3322 3342 0
-3322 -3329 3340 0
-3322 -3328 3339 0
c ((SATLiteral(370) - aux790 + SATLiteral(640))<=0)
-640 -3346 0
-370 -3346 0
-370 -640 -3347 0
c (0<=(SATLiteral(370) - aux790 + SATLiteral(640)))
640 3347 0
370 3347 0
370 640 3346 0
c ((SATLiteral(1045) - aux791 + SATLiteral(910))<=0)
-910 -3349 0
-1045 -3349 0
-1045 -910 -3350 0
c (0<=(SATLiteral(1045) - aux791 + SATLiteral(910)))
910 3350 0
1045 3350 0
1045 910 3349 0
c (( - aux792 + SATLiteral(775) + SATLiteral(235))<=0)
-235 -3352 0
-775 -3352 0
-775 -235 -3353 0
c (0<=( - aux792 + SATLiteral(775) + SATLiteral(235)))
235 3353 0
775 3353 0
775 235 3352 0
c (( - aux793 + SATLiteral(505) + SATLiteral(1180))<=0)
-1180 -3355 0
-505 -3355 0
-505 -1180 -3356 0
c (0<=( - aux793 + SATLiteral(505) + SATLiteral(1180)))
1180 3356 0
505 3356 0
505 1180 3355 0
c ((aux793 - aux794 + SATLiteral(100))<=0)
3355 -3358 0
3356 -3359 0
-100 -3358 0
-100 3355 -3359 0
-100 3356 -3361 0
c (0<=(aux793 - aux794 + SATLiteral(100)))
-3356 3361 0
-3355 3359 0
100 3361 0
100 -3356 3359 0
100 -3355 3358 0
c ((aux790 + aux792 - aux795)<=0)
3352 -3363 0
3353 -3364 0
3346 -3363 0
3346 3352 -3364 0
3346 3353 -3366 0
3347 -3364 0
3347 3352 -3366 0
3347 3353 -3368 0
c (0<=(aux790 + aux792 - aux795))
-3353 3368 0
-3352 3366 0
-3347 3368 0
-3347 -3353 3366 0
-3347 -3352 3364 0
-3346 3366 0
-3346 -3353 3364 0
-3346 -3352 3363 0
c ((SATLiteral(372) - aux796 + SATLiteral(642))<=0)
-642 -3370 0
-372 -3370 0
-372 -642 -3371 0
c (0<=(SATLiteral(372) - aux796 + SATLiteral(642)))
642 3371 0
372 3371 0
372 642 3370 0
c ((SATLiteral(1047) - aux797 + SATLiteral(912))<=0)
-912 -3373 0
-1047 -3373 0
-1047 -912 -3374 0
c (0<=(SATLiteral(1047) - aux797 + SATLiteral(912)))
912 3374 0
1047 3374 0
1047 912 3373 0
c (( - aux798 + SATLiteral(777) + SATLiteral(237))<=0)
-237 -3376 0
-777 -3376 0
-777 -237 -3377 0
c (0<=( - aux798 + SATLiteral(777) + SATLiteral(237)))
237 3377 0
777 3377 0
777 237 3376 0
c (( - aux799 + SATLiteral(507) + SATLiteral(1182))<=0)
-1182 -3379 0
-507 -3379 0
-507 -1182 -3380 0
c (0<=( - aux799 + SATLiteral(507) + SATLiteral(1182)))
1182 3380 0
507 3380 0
507 1182 3379 0
c ((aux799 - aux800 + SATLiteral(102))<=0)
3379 -3382 0
3380 -3383 0
-102 -3382 0
-102 3379 -3383 0
-102 3380 -3385 0
c (0<=(aux799 - aux800 + SATLiteral(102)))
-3380 3385 0
-3379 3383 0
102 3385 0
102 -3380 3383 0
102 -3379 3382 0
c ((aux796 + aux798 - aux801)<=0)
3376 -3387 0
3377 -3388 0
3370 -3387 0
3370 3376 -3388 0
3370 3377 -3390 0
3371 -3388 0
3371 3376 -3390 0
3371 3377 -3392 0
c (0<=(aux796 + aux798 - aux801))
-3377 3392 0
-3376 3390 0
-3371 3392 0
-3371 -3377 3390 0
-3371 -3376 3388 0
-3370 3390 0
-3370 -3377 3388 0
-3370 -3376 3387 0
c ((SATLiteral(374) - aux802 + SATLiteral(644))<=0)
-644 -3394 0
-374 -3394 0
-374 -644 -3395 0
c (0<=(SATLiteral(374) - aux802 + SATLiteral(644)))
644 3395 0
374 3395 0
374 644 3394 0
c ((SATLiteral(1049) - aux803 + SATLiteral(914))<=0)
-914 -3397 0
-1049 -3397 0
-1049 -914 -3398 0
c (0<=(SATLiteral(1049) - aux803 + SATLiteral(914)))
914 3398 0
1049 3398 0
1049 914 3397 0
c (( - aux804 + SATLiteral(779) + SATLiteral(239))<=0)
-239 -3400 0
-779 -3400 0
-779 -239 -3401 0
c (0<=( - aux804 + SATLiteral(779) + SATLiteral(239)))
239 3401 0
779 3401 0
779 239 3400 0
c (( - aux805 + SATLiteral(509) + SATLiteral(1184))<=0)
-1184 -3403 0
-509 -3403 0
-509 -1184 -3404 0
c (0<=( - aux805 + SATLiteral(509) + SATLiteral(1184)))
1184 3404 0
509 3404 0
509 1184 3403 0
c ((aux805 - aux806 + SATLiteral(104))<=0)
3403 -3406 0
3404 -3407 0
-104 -3406 0
-104 3403 -3407 0
-104 3404 -3409 0
c (0<=(aux805 - aux806 + SATLiteral(104)))
-3404 3409 0
-3403 3407 0
104 3409 0
104 -3404 3407 0
104 -3403 3406 0
c ((aux802 + aux804 - aux807)<=0)
3400 -3411 0
3401 -3412 0
3394 -3411 0
3394 3400 -3412 0
3394 3401 -3414 0
3395 -3412 0
3395 3400 -3414 0
3395 3401 -3416 0
c (0<=(aux802 + aux804 - aux807))
-3401 3416 0
-3400 3414 0
-3395 3416 0
-3395 -3401 3414 0
-3395 -3400 3412 0
-3394 3414 0
-3394 -3401 3412 0
-3394 -3400 3411 0
c ((SATLiteral(376) - aux808 + SATLiteral(646))<=0)
-646 -3418 0
-376 -3418 0
-376 -646 -3419 0
c (0<=(SATLiteral(376) - aux808 + SATLiteral(646)))
646 3419 0
376 3419 0
376 646 3418 0
c ((SATLiteral(1051) - aux809 + SATLiteral(916))<=0)
-916 -3421 0
-1051 -3421 0
-1051 -916 -3422 0
c (0<=(SATLiteral(1051) - aux809 + SATLiteral(916)))
916 3422 0
1051 3422 0
1051 916 3421 0
c (( - aux810 + SATLiteral(781) + SATLiteral(241))<=0)
-241 -3424 0
-781 -3424 0
-781 -241 -3425 0
c (0<=( - aux810 + SATLiteral(781) + SATLiteral(241)))
241 3425 0
781 3425 0
781 241 3424 0
c (( - aux811 + SATLiteral(511) + SATLiteral(1186))<=0)
-1186 -3427 0
-511 -3427 0
-511 -1186 -3428 0
c (0<=( - aux811 + SATLiteral(511) + SATLiteral(1186)))
1186 3428 0
511 3428 0
511 1186 3427 0
c ((aux811 - aux812 + SATLiteral(106))<=0)
3427 -3430 0
3428 -3431 0
-106 -3430 0
-106 3427 -3431 0
-106 3428 -3433 0
c (0<=(aux811 - aux812 + SATLiteral(106)))
-3428 3433 0
-3427 3431 0
106 3433 0
106 -3428 3431 0
106 -3427 3430 0
c ((aux808 + aux810 - aux813)<=0)
3424 -3435 0
3425 -3436 0
3418 -3435 0
3418 3424 -3436 0
3418 3425 -3438 0
3419 -3436 0
3419 3424 -3438 0
3419 3425 -3440 0
c (0<=(aux808 + aux810 - aux813))
-3425 3440 0
-3424 3438 0
-3419 3440 0
-3419 -3425 3438 0
-3419 -3424 3436 0
-3418 3438 0
-3418 -3425 3436 0
-3418 -3424 3435 0
c ((SATLiteral(-375) - aux814 + SATLiteral(-645))<=0)
645 -3442 0
375 -3442 0
375 645 -3443 0
c (0<=(SATLiteral(-375) - aux814 + SATLiteral(-645)))
-645 3443 0
-375 3443 0
-375 -645 3442 0
c ((SATLiteral(-1050) - aux815 + SATLiteral(-915))<=0)
915 -3445 0
1050 -3445 0
1050 915 -3446 0
c (0<=(SATLiteral(-1050) - aux815 + SATLiteral(-915)))
-915 3446 0
-1050 3446 0
-1050 -915 3445 0
c (( - aux816 + SATLiteral(-780) + SATLiteral(-240))<=0)
240 -3448 0
780 -3448 0
780 240 -3449 0
c (0<=( - aux816 + SATLiteral(-780) + SATLiteral(-240)))
-240 3449 0
-780 3449 0
-780 -240 3448 0
c (( - aux817 + SATLiteral(-510) + SATLiteral(-1185))<=0)
1185 -3451 0
510 -3451 0
510 1185 -3452 0
c (0<=( - aux817 + SATLiteral(-510) + SATLiteral(-1185)))
-1185 3452 0
-510 3452 0
-510 -1185 3451 0
c ((aux817 - aux818 + SATLiteral(-105))<=0)
3451 -3454 0
3452 -3455 0
105 -3454 0
105 3451 -3455 0
105 3452 -3457 0
c (0<=(aux817 - aux818 + SATLiteral(-105)))
-3452 3457 0
-3451 3455 0
-105 3457 0
-105 -3452 3455 0
-105 -3451 3454 0
c ((aux814 + aux816 - aux819)<=0)
3448 -3459 0
3449 -3460 0
3442 -3459 0
3442 3448 -3460 0
3442 3449 -3462 0
3443 -3460 0
3443 3448 -3462 0
3443 3449 -3464 0
c (0<=(aux814 + aux816 - aux819))
-3449 3464 0
-3448 3462 0
-3443 3464 0
-3443 -3449 3462 0
-3443 -3448 3460 0
-3442 3462 0
-3442 -3449 3460 0
-3442 -3448 3459 0
c ((SATLiteral(377) - aux820 + SATLiteral(647))<=0)
-647 -3466 0
-377 -3466 0
-377 -647 -3467 0
c (0<=(SATLiteral(377) - aux820 + SATLiteral(647)))
647 3467 0
377 3467 0
377 647 3466 0
c ((SATLiteral(1052) - aux821 + SATLiteral(917))<=0)
-917 -3469 0
-1052 -3469 0
-1052 -917 -3470 0
c (0<=(SATLiteral(1052) - aux821 + SATLiteral(917)))
917 3470 0
1052 3470 0
1052 917 3469 0
c (( - aux822 + SATLiteral(782) + SATLiteral(242))<=0)
-242 -3472 0
-782 -3472 0
-782 -242 -3473 0
c (0<=( - aux822 + SATLiteral(782) + SATLiteral(242)))
242 3473 0
782 3473 0
782 242 3472 0
c (( - aux823 + SATLiteral(512) + SATLiteral(1187))<=0)
-1187 -3475 0
-512 -3475 0
-512 -1187 -3476 0
c (0<=( - aux823 + SATLiteral(512) + SATLiteral(1187)))
1187 3476 0
512 3476 0
512 1187 3475 0
c ((aux823 - aux824 + SATLiteral(107))<=0)
3475 -3478 0
3476 -3479 0
-107 -3478 0
-107 3475 -3479 0
-107 3476 -3481 0
c (0<=(aux823 - aux824 + SATLiteral(107)))
-3476 3481 0
-3475 3479 0
107 3481 0
107 -3476 3479 0
107 -3475 3478 0
c ((aux820 + aux822 - aux825)<=0)
3472 -3483 0
3473 -3484 0
3466 -3483 0
3466 3472 -3484 0
3466 3473 -3486 0
3467 -3484 0
3467 3472 -3486 0
3467 3473 -3488 0
c (0<=(aux820 + aux822 - aux825))
-3473 3488 0
-3472 3486 0
-3467 3488 0
-3467 -3473 3486 0
-3467 -3472 3484 0
-3466 3486 0
-3466 -3473 3484 0
-3466 -3472 3483 0
c ((SATLiteral(379) - aux826 + SATLiteral(649))<=0)
-649 -3490 0
-379 -3490 0
-379 -649 -3491 0
c (0<=(SATLiteral(379) - aux826 + SATLiteral(649)))
649 3491 0
379 3491 0
379 649 3490 0
c ((SATLiteral(1054) - aux827 + SATLiteral(919))<=0)
-919 -3493 0
-1054 -3493 0
-1054 -919 -3494 0
c (0<=(SATLiteral(1054) - aux827 + SATLiteral(919)))
919 3494 0
1054 3494 0
1054 919 3493 0
c (( - aux828 + SATLiteral(784) + SATLiteral(244))<=0)
-244 -3496 0
-784 -3496 0
-784 -244 -3497 0
c (0<=( - aux828 + SATLiteral(784) + SATLiteral(244)))
244 3497 0
784 3497 0
784 244 3496 0
c (( - aux829 + SATLiteral(514) + SATLiteral(1189))<=0)
-1189 -3499 0
-514 -3499 0
-514 -1189 -3500 0
c (0<=( - aux829 + SATLiteral(514) + SATLiteral(1189)))
1189 3500 0
514 3500 0
514 1189 3499 0
c ((aux829 - aux830 + SATLiteral(109))<=0)
3499 -3502 0
3500 -3503 0
-109 -3502 0
-109 3499 -3503 0
-109 3500 -3505 0
c (0<=(aux829 - aux830 + SATLiteral(109)))
-3500 3505 0
-3499 3503 0
109 3505 0
109 -3500 3503 0
109 -3499 3502 0
c ((aux826 + aux828 - aux831)<=0)
3496 -3507 0
3497 -3508 0
3490 -3507 0
3490 3496 -3508 0
3490 3497 -3510 0
3491 -3508 0
3491 3496 -3510 0
3491 3497 -3512 0
c (0<=(aux826 + aux828 - aux831))
-3497 3512 0
-3496 3510 0
-3491 3512 0
-3491 -3497 3510 0
-3491 -3496 3508 0
-3490 3510 0
-3490 -3497 3508 0
-3490 -3496 3507 0
c ((SATLiteral(381) - aux832 + SATLiteral(651))<=0)
-651 -3514 0
-381 -3514 0
-381 -651 -3515 0
c (0<=(SATLiteral(381) - aux832 + SATLiteral(651)))
651 3515 0
381 3515 0
381 651 3514 0
c ((SATLiteral(1056) - aux833 + SATLiteral(921))<=0)
-921 -3517 0
-1056 -3517 0
-1056 -921 -3518 0
c (0<=(SATLiteral(1056) - aux833 + SATLiteral(921)))
921 3518 0
1056 3518 0
1056 921 3517 0
c (( - aux834 + SATLiteral(786) + SATLiteral(246))<=0)
-246 -3520 0
-786 -3520 0
-786 -246 -3521 0
c (0<=( - aux834 + SATLiteral(786) + SATLiteral(246)))
246 3521 0
786 3521 0
786 246 3520 0
c (( - aux835 + SATLiteral(516) + SATLiteral(1191))<=0)
-1191 -3523 0
-516 -3523 0
-516 -1191 -3524 0
c (0<=( - aux835 + SATLiteral(516) + SATLiteral(1191)))
1191 3524 0
516 3524 0
516 1191 3523 0
c ((aux835 - aux836 + SATLiteral(111))<=0)
3523 -3526 0
3524 -3527 0
-111 -3526 0
-111 3523 -3527 0
-111 3524 -3529 0
c (0<=(aux835 - aux836 + SATLiteral(111)))
-3524 3529 0
-3523 3527 0
111 3529 0
111 -3524 3527 0
111 -3523 3526 0
c ((aux832 + aux834 - aux837)<=0)
3520 -3531 0
3521 -3532 0
3514 -3531 0
3514 3520 -3532 0
3514 3521 -3534 0
3515 -3532 0
3515 3520 -3534 0
3515 3521 -3536 0
c (0<=(aux832 + aux834 - aux837))
-3521 3536 0
-3520 3534 0
-3515 3536 0
-3515 -3521 3534 0
-3515 -3520 3532 0
-3514 3534 0
-3514 -3521 3532 0
-3514 -3520 3531 0
c ((SATLiteral(383) - aux838 + SATLiteral(653))<=0)
-653 -3538 0
-383 -3538 0
-383 -653 -3539 0
c (0<=(SATLiteral(383) - aux838 + SATLiteral(653)))
653 3539 0
383 3539 0
383 653 3538 0
c ((SATLiteral(1058) - aux839 + SATLiteral(923))<=0)
-923 -3541 0
-1058 -3541 0
-1058 -923 -3542 0
c (0<=(SATLiteral(1058) - aux839 + SATLiteral(923)))
923 3542 0
1058 3542 0
1058 923 3541 0
c (( - aux840 + SATLiteral(788) + SATLiteral(248))<=0)
-248 -3544 0
-788 -3544 0
-788 -248 -3545 0
c (0<=( - aux840 + SATLiteral(788) + SATLiteral(248)))
248 3545 0
788 3545 0
788 248 3544 0
c (( - aux841 + SATLiteral(518) + SATLiteral(1193))<=0)
-1193 -3547 0
-518 -3547 0
-518 -1193 -3548 0
c (0<=( - aux841 + SATLiteral(518) + SATLiteral(1193)))
1193 3548 0
518 3548 0
518 1193 3547 0
c ((aux841 - aux842 + SATLiteral(113))<=0)
3547 -3550 0
3548 -3551 0
-113 -3550 0
-113 3547 -3551 0
-113 3548 -3553 0
c (0<=(aux841 - aux842 + SATLiteral(113)))
-3548 3553 0
-3547 3551 0
113 3553 0
113 -3548 3551 0
113 -3547 3550 0
c ((aux838 + aux840 - aux843)<=0)
3544 -3555 0
3545 -3556 0
3538 -3555 0
3538 3544 -3556 0
3538 3545 -3558 0
3539 -3556 0
3539 3544 -3558 0
3539 3545 -3560 0
c (0<=(aux838 + aux840 - aux843))
-3545 3560 0
-3544 3558 0
-3539 3560 0
-3539 -3545 3558 0
-3539 -3544 3556 0
-3538 3558 0
-3538 -3545 3556 0
-3538 -3544 3555 0
c ((SATLiteral(385) - aux844 + SATLiteral(655))<=0)
-655 -3562 0
-385 -3562 0
-385 -655 -3563 0
c (0<=(SATLiteral(385) - aux844 + SATLiteral(655)))
655 3563 0
385 3563 0
385 655 3562 0
c ((SATLiteral(1060) - aux845 + SATLiteral(925))<=0)
-925 -3565 0
-1060 -3565 0
-1060 -925 -3566 0
c (0<=(SATLiteral(1060) - aux845 + SATLiteral(925)))
925 3566 0
1060 3566 0
1060 925 3565 0
c (( - aux846 + SATLiteral(790) + SATLiteral(250))<=0)
-250 -3568 0
-790 -3568 0
-790 -250 -3569 0
c (0<=( - aux846 + SATLiteral(790) + SATLiteral(250)))
250 3569 0
790 3569 0
790 250 3568 0
c (( - aux847 + SATLiteral(520) + SATLiteral(1195))<=0)
-1195 -3571 0
-520 -3571 0
-520 -1195 -3572 0
c (0<=( - aux847 + SATLiteral(520) + SATLiteral(1195)))
1195 3572 0
520 3572 0
520 1195 3571 0
c ((aux847 - aux848 + SATLiteral(115))<=0)
3571 -3574 0
3572 -3575 0
-115 -3574 0
-115 3571 -3575 0
-115 3572 -3577 0
c (0<=(aux847 - aux848 + SATLiteral(115)))
-3572 3577 0
-3571 3575 0
115 3577 0
115 -3572 3575 0
115 -3571 3574 0
c ((aux844 + aux846 - aux849)<=0)
3568 -3579 0
3569 -3580 0
3562 -3579 0
3562 3568 -3580 0
3562 3569 -3582 0
3563 -3580 0
3563 3568 -3582 0
3563 3569 -3584 0
c (0<=(aux844 + aux846 - aux849))
-3569 3584 0
-3568 3582 0
-3563 3584 0
-3563 -3569 3582 0
-3563 -3568 3580 0
-3562 3582 0
-3562 -3569 3580 0
-3562 -3568 3579 0
c ((SATLiteral(387) - aux850 + SATLiteral(657))<=0)
-657 -3586 0
-387 -3586 0
-387 -657 -3587 0
c (0<=(SATLiteral(387) - aux850 + SATLiteral(657)))
657 3587 0
387 3587 0
387 657 3586 0
c ((SATLiteral(1062) - aux851 + SATLiteral(927))<=0)
-927 -3589 0
-1062 -3589 0
-1062 -927 -3590 0
c (0<=(SATLiteral(1062) - aux851 + SATLiteral(927)))
927 3590 0
1062 3590 0
1062 927 3589 0
c (( - aux852 + SATLiteral(792) + SATLiteral(252))<=0)
-252 -3592 0
-792 -3592 0
-792 -252 -3593 0
c (0<=( - aux852 + SATLiteral(792) + SATLiteral(252)))
252 3593 0
792 3593 0
792 252 3592 0
c (( - aux853 + SATLiteral(522) + SATLiteral(1197))<=0)
-1197 -3595 0
-522 -3595 0
-522 -1197 -3596 0
c (0<=( - aux853 + SATLiteral(522) + SATLiteral(1197)))
1197 3596 0
522 3596 0
522 1197 3595 0
c ((aux853 - aux854 + SATLiteral(117))<=0)
3595 -3598 0
3596 -3599 0
-117 -3598 0
-117 3595 -3599 0
-117 3596 -3601 0
c (0<=(aux853 - aux854 + SATLiteral(117)))
-3596 3601 0
-3595 3599 0
117 3601 0
117 -3596 3599 0
117 -3595 3598 0
c ((aux850 + aux852 - aux855)<=0)
3592 -3603 0
3593 -3604 0
3586 -3603 0
3586 3592 -3604 0
3586 3593 -3606 0
3587 -3604 0
3587 3592 -3606 0
3587 3593 -3608 0
c (0<=(aux850 + aux852 - aux855))
-3593 3608 0
-3592 3606 0
-3587 3608 0
-3587 -3593 3606 0
-3587 -3592 3604 0
-3586 3606 0
-3586 -3593 3604 0
-3586 -3592 3603 0
c ((SATLiteral(389) - aux856 + SATLiteral(659))<=0)
-659 -3610 0
-389 -3610 0
-389 -659 -3611 0
c (0<=(SATLiteral(389) - aux856 + SATLiteral(659)))
659 3611 0
389 3611 0
389 659 3610 0
c ((SATLiteral(1064) - aux857 + SATLiteral(929))<=0)
-929 -3613 0
-1064 -3613 0
-1064 -929 -3614 0
c (0<=(SATLiteral(1064) - aux857 + SATLiteral(929)))
929 3614 0
1064 3614 0
1064 929 3613 0
c (( - aux858 + SATLiteral(794) + SATLiteral(254))<=0)
-254 -3616 0
-794 -3616 0
-794 -254 -3617 0
c (0<=( - aux858 + SATLiteral(794) + SATLiteral(254)))
254 3617 0
794 3617 0
794 254 3616 0
c (( - aux859 + SATLiteral(524) + SATLiteral(1199))<=0)
-1199 -3619 0
-524 -3619 0
-524 -1199 -3620 0
c (0<=( - aux859 + SATLiteral(524) + SATLiteral(1199)))
1199 3620 0
524 3620 0
524 1199 3619 0
c ((aux859 - aux860 + SATLiteral(119))<=0)
3619 -3622 0
3620 -3623 0
-119 -3622 0
-119 3619 -3623 0
-119 3620 -3625 0
c (0<=(aux859 - aux860 + SATLiteral(119)))
-3620 3625 0
-3619 3623 0
119 3625 0
119 -3620 3623 0
119 -3619 3622 0
c ((aux856 + aux858 - aux861)<=0)
3616 -3627 0
3617 -3628 0
3610 -3627 0
3610 3616 -3628 0
3610 3617 -3630 0
3611 -3628 0
3611 3616 -3630 0
3611 3617 -3632 0
c (0<=(aux856 + aux858 - aux861))
-3617 3632 0
-3616 3630 0
-3611 3632 0
-3611 -3617 3630 0
-3611 -3616 3628 0
-3610 3630 0
-3610 -3617 3628 0
-3610 -3616 3627 0
c ((SATLiteral(391) - aux862 + SATLiteral(661))<=0)
-661 -3634 0
-391 -3634 0
-391 -661 -3635 0
c (0<=(SATLiteral(391) - aux862 + SATLiteral(661)))
661 3635 0
391 3635 0
391 661 3634 0
c ((SATLiteral(1066) - aux863 + SATLiteral(931))<=0)
-931 -3637 0
-1066 -3637 0
-1066 -931 -3638 0
c (0<=(SATLiteral(1066) - aux863 + SATLiteral(931)))
931 3638 0
1066 3638 0
1066 931 3637 0
c (( - aux864 + SATLiteral(796) + SATLiteral(256))<=0)
-256 -3640 0
-796 -3640 0
-796 -256 -3641 0
c (0<=( - aux864 + SATLiteral(796) + SATLiteral(256)))
256 3641 0
796 3641 0
796 256 3640 0
c (( - aux865 + SATLiteral(526) + SATLiteral(1201))<=0)
-1201 -3643 0
-526 -3643 0
-526 -1201 -3644 0
c (0<=( - aux865 + SATLiteral(526) + SATLiteral(1201)))
1201 3644 0
526 3644 0
526 1201 3643 0
c ((aux865 - aux866 + SATLiteral(121))<=0)
3643 -3646 0
3644 -3647 0
-121 -3646 0
-121 3643 -3647 0
-121 3644 -3649 0
c (0<=(aux865 - aux866 + SATLiteral(121)))
-3644 3649 0
-3643 3647 0
121 3649 0
121 -3644 3647 0
121 -3643 3646 0
c ((aux862 + aux864 - aux867)<=0)
3640 -3651 0
3641 -3652 0
3634 -3651 0
3634 3640 -3652 0
3634 3641 -3654 0
3635 -3652 0
3635 3640 -3654 0
3635 3641 -3656 0
c (0<=(aux862 + aux864 - aux867))
-3641 3656 0
-3640 3654 0
-3635 3656 0
-3635 -3641 3654 0
-3635 -3640 3652 0
-3634 3654 0
-3634 -3641 3652 0
-3634 -3640 3651 0
c ((SATLiteral(-390) - aux868 + SATLiteral(-660))<=0)
660 -3658 0
390 -3658 0
390 660 -3659 0
c (0<=(SATLiteral(-390) - aux868 + SATLiteral(-660)))
-660 3659 0
-390 3659 0
-390 -660 3658 0
c ((SATLiteral(-1065) - aux869 + SATLiteral(-930))<=0)
930 -3661 0
1065 -3661 0
1065 930 -3662 0
c (0<=(SATLiteral(-1065) - aux869 + SATLiteral(-930)))
-930 3662 0
-1065 3662 0
-1065 -930 3661 0
c (( - aux870 + SATLiteral(-795) + SATLiteral(-255))<=0)
255 -3664 0
795 -3664 0
795 255 -3665 0
c (0<=( - aux870 + SATLiteral(-795) + SATLiteral(-255)))
-255 3665 0
-795 3665 0
-795 -255 3664 0
c (( - aux871 + SATLiteral(-525) + SATLiteral(-1200))<=0)
1200 -3667 0
525 -3667 0
525 1200 -3668 0
c (0<=( - aux871 + SATLiteral(-525) + SATLiteral(-1200)))
-1200 3668 0
-525 3668 0
-525 -1200 3667 0
c ((aux871 - aux872 + SATLiteral(-120))<=0)
3667 -3670 0
3668 -3671 0
120 -3670 0
120 3667 -3671 0
120 3668 -3673 0
c (0<=(aux871 - aux872 + SATLiteral(-120)))
-3668 3673 0
-3667 3671 0
-120 3673 0
-120 -3668 3671 0
-120 -3667 3670 0
c ((aux868 + aux870 - aux873)<=0)
3664 -3675 0
3665 -3676 0
3658 -3675 0
3658 3664 -3676 0
3658 3665 -3678 0
3659 -3676 0
3659 3664 -3678 0
3659 3665 -3680 0
c (0<=(aux868 + aux870 - aux873))
-3665 3680 0
-3664 3678 0
-3659 3680 0
-3659 -3665 3678 0
-3659 -3664 3676 0
-3658 3678 0
-3658 -3665 3676 0
-3658 -3664 3675 0
c ((SATLiteral(392) - aux874 + SATLiteral(662))<=0)
-662 -3682 0
-392 -3682 0
-392 -662 -3683 0
c (0<=(SATLiteral(392) - aux874 + SATLiteral(662)))
662 3683 0
392 3683 0
392 662 3682 0
c ((SATLiteral(1067) - aux875 + SATLiteral(932))<=0)
-932 -3685 0
-1067 -3685 0
-1067 -932 -3686 0
c (0<=(SATLiteral(1067) - aux875 + SATLiteral(932)))
932 3686 0
1067 3686 0
1067 932 3685 0
c (( - aux876 + SATLiteral(797) + SATLiteral(257))<=0)
-257 -3688 0
-797 -3688 0
-797 -257 -3689 0
c (0<=( - aux876 + SATLiteral(797) + SATLiteral(257)))
257 3689 0
797 3689 0
797 257 3688 0
c (( - aux877 + SATLiteral(527) + SATLiteral(1202))<=0)
-1202 -3691 0
-527 -3691 0
-527 -1202 -3692 0
c (0<=( - aux877 + SATLiteral(527) + SATLiteral(1202)))
1202 3692 0
527 3692 0
527 1202 3691 0
c ((aux877 - aux878 + SATLiteral(122))<=0)
3691 -3694 0
3692 -3695 0
-122 -3694 0
-122 3691 -3695 0
-122 3692 -3697 0
c (0<=(aux877 - aux878 + SATLiteral(122)))
-3692 3697 0
-3691 3695 0
122 3697 0
122 -3692 3695 0
122 -3691 3694 0
c ((aux874 + aux876 - aux879)<=0)
3688 -3699 0
3689 -3700 0
3682 -3699 0
3682 3688 -3700 0
3682 3689 -3702 0
3683 -3700 0
3683 3688 -3702 0
3683 3689 -3704 0
c (0<=(aux874 + aux876 - aux879))
-3689 3704 0
-3688 3702 0
-3683 3704 0
-3683 -3689 3702 0
-3683 -3688 3700 0
-3682 3702 0
-3682 -3689 3700 0
-3682 -3688 3699 0
c ((SATLiteral(393) - aux880 + SATLiteral(664))<=0)
-664 -3706 0
-393 -3706 0
-393 -664 -3707 0
c (0<=(SATLiteral(393) - aux880 + SATLiteral(664)))
664 3707 0
393 3707 0
393 664 3706 0
c ((SATLiteral(1069) - aux881 + SATLiteral(934))<=0)
-934 -3709 0
-1069 -3709 0
-1069 -934 -3710 0
c (0<=(SATLiteral(1069) - aux881 + SATLiteral(934)))
934 3710 0
1069 3710 0
1069 934 3709 0
c (( - aux882 + SATLiteral(799) + SATLiteral(259))<=0)
-259 -3712 0
-799 -3712 0
-799 -259 -3713 0
c (0<=( - aux882 + SATLiteral(799) + SATLiteral(259)))
259 3713 0
799 3713 0
799 259 3712 0
c (( - aux883 + SATLiteral(529) + SATLiteral(1204))<=0)
-1204 -3715 0
-529 -3715 0
-529 -1204 -3716 0
c (0<=( - aux883 + SATLiteral(529) + SATLiteral(1204)))
1204 3716 0
529 3716 0
529 1204 3715 0
c ((aux883 - aux884 + SATLiteral(124))<=0)
3715 -3718 0
3716 -3719 0
-124 -3718 0
-124 3715 -3719 0
-124 3716 -3721 0
c (0<=(aux883 - aux884 + SATLiteral(124)))
-3716 3721 0
-3715 3719 0
124 3721 0
124 -3716 3719 0
124 -3715 3718 0
c ((aux880 + aux882 - aux885)<=0)
3712 -3723 0
3713 -3724 0
3706 -3723 0
3706 3712 -3724 0
3706 3713 -3726 0
3707 -3724 0
3707 3712 -3726 0
3707 3713 -3728 0
c (0<=(aux880 + aux882 - aux885))
-3713 3728 0
-3712 3726 0
-3707 3728 0
-3707 -3713 3726 0
-3707 -3712 3724 0
-3706 3726 0
-3706 -3713 3724 0
-3706 -3712 3723 0
c ((SATLiteral(394) - aux886 + SATLiteral(666))<=0)
-666 -3730 0
-394 -3730 0
-394 -666 -3731 0
c (0<=(SATLiteral(394) - aux886 + SATLiteral(666)))
666 3731 0
394 3731 0
394 666 3730 0
c ((SATLiteral(1071) - aux887 + SATLiteral(936))<=0)
-936 -3733 0
-1071 -3733 0
-1071 -936 -3734 0
c (0<=(SATLiteral(1071) - aux887 + SATLiteral(936)))
936 3734 0
1071 3734 0
1071 936 3733 0
c (( - aux888 + SATLiteral(801) + SATLiteral(261))<=0)
-261 -3736 0
-801 -3736 0
-801 -261 -3737 0
c (0<=( - aux888 + SATLiteral(801) + SATLiteral(261)))
261 3737 0
801 3737 0
801 261 3736 0
c (( - aux889 + SATLiteral(531) + SATLiteral(1206))<=0)
-1206 -3739 0
-531 -3739 0
-531 -1206 -3740 0
c (0<=( - aux889 + SATLiteral(531) + SATLiteral(1206)))
1206 3740 0
531 3740 0
531 1206 3739 0
c ((aux889 - aux890 + SATLiteral(126))<=0)
3739 -3742 0
3740 -3743 0
-126 -3742 0
-126 3739 -3743 0
-126 3740 -3745 0
c (0<=(aux889 - aux890 + SATLiteral(126)))
-3740 3745 0
-3739 3743 0
126 3745 0
126 -3740 3743 0
126 -3739 3742 0
c ((aux886 + aux888 - aux891)<=0)
3736 -3747 0
3737 -3748 0
3730 -3747 0
3730 3736 -3748 0
3730 3737 -3750 0
3731 -3748 0
3731 3736 -3750 0
3731 3737 -3752 0
c (0<=(aux886 + aux888 - aux891))
-3737 3752 0
-3736 3750 0
-3731 3752 0
-3731 -3737 3750 0
-3731 -3736 3748 0
-3730 3750 0
-3730 -3737 3748 0
-3730 -3736 3747 0
c ((SATLiteral(395) - aux892 + SATLiteral(668))<=0)
-668 -3754 0
-395 -3754 0
-395 -668 -3755 0
c (0<=(SATLiteral(395) - aux892 + SATLiteral(668)))
668 3755 0
395 3755 0
395 668 3754 0
c ((SATLiteral(1073) - aux893 + SATLiteral(938))<=0)
-938 -3757 0
-1073 -3757 0
-1073 -938 -3758 0
c (0<=(SATLiteral(1073) - aux893 + SATLiteral(938)))
938 3758 0
1073 3758 0
1073 938 3757 0
c (( - aux894 + SATLiteral(803) + SATLiteral(263))<=0)
-263 -3760 0
-803 -3760 0
-803 -263 -3761 0
c (0<=( - aux894 + SATLiteral(803) + SATLiteral(263)))
263 3761 0
803 3761 0
803 263 3760 0
c (( - aux895 + SATLiteral(533) + SATLiteral(1208))<=0)
-1208 -3763 0
-533 -3763 0
-533 -1208 -3764 0
c (0<=( - aux895 + SATLiteral(533) + SATLiteral(1208)))
1208 3764 0
533 3764 0
533 1208 3763 0
c ((aux895 - aux896 + SATLiteral(128))<=0)
3763 -3766 0
3764 -3767 0
-128 -3766 0
-128 3763 -3767 0
-128 3764 -3769 0
c (0<=(aux895 - aux896 + SATLiteral(128)))
-3764 3769 0
-3763 3767 0
128 3769 0
128 -3764 3767 0
128 -3763 3766 0
c ((aux892 + aux894 - aux897)<=0)
3760 -3771 0
3761 -3772 0
3754 -3771 0
3754 3760 -3772 0
3754 3761 -3774 0
3755 -3772 0
3755 3760 -3774 0
3755 3761 -3776 0
c (0<=(aux892 + aux894 - aux897))
-3761 3776 0
-3760 3774 0
-3755 3776 0
-3755 -3761 3774 0
-3755 -3760 3772 0
-3754 3774 0
-3754 -3761 3772 0
-3754 -3760 3771 0
c ((SATLiteral(396) - aux898 + SATLiteral(670))<=0)
-670 -3778 0
-396 -3778 0
-396 -670 -3779 0
c (0<=(SATLiteral(396) - aux898 + SATLiteral(670)))
670 3779 0
396 3779 0
396 670 3778 0
c ((SATLiteral(1075) - aux899 + SATLiteral(940))<=0)
-940 -3781 0
-1075 -3781 0
-1075 -940 -3782 0
c (0<=(SATLiteral(1075) - aux899 + SATLiteral(940)))
940 3782 0
1075 3782 0
1075 940 3781 0
c (( - aux900 + SATLiteral(805) + SATLiteral(265))<=0)
-265 -3784 0
-805 -3784 0
-805 -265 -3785 0
c (0<=( - aux900 + SATLiteral(805) + SATLiteral(265)))
265 3785 0
805 3785 0
805 265 3784 0
c (( - aux901 + SATLiteral(535) + SATLiteral(1210))<=0)
-1210 -3787 0
-535 -3787 0
-535 -1210 -3788 0
c (0<=( - aux901 + SATLiteral(535) + SATLiteral(1210)))
1210 3788 0
535 3788 0
535 1210 3787 0
c ((aux901 - aux902 + SATLiteral(130))<=0)
3787 -3790 0
3788 -3791 0
-130 -3790 0
-130 3787 -3791 0
-130 3788 -3793 0
c (0<=(aux901 - aux902 + SATLiteral(130)))
-3788 3793 0
-3787 3791 0
130 3793 0
130 -3788 3791 0
130 -3787 3790 0
c ((aux898 + aux900 - aux903)<=0)
3784 -3795 0
3785 -3796 0
3778 -3795 0
3778 3784 -3796 0
3778 3785 -3798 0
3779 -3796 0
3779 3784 -3798 0
3779 3785 -3800 0
c (0<=(aux898 + aux900 - aux903))
-3785 3800 0
-3784 3798 0
-3779 3800 0
-3779 -3785 3798 0
-3779 -3784 3796 0
-3778 3798 0
-3778 -3785 3796 0
-3778 -3784 3795 0
c ((SATLiteral(397) - aux904 + SATLiteral(672))<=0)
-672 -3802 0
-397 -3802 0
-397 -672 -3803 0
c (0<=(SATLiteral(397) - aux904 + SATLiteral(672)))
672 3803 0
397 3803 0
397 672 3802 0
c ((SATLiteral(1077) - aux905 + SATLiteral(942))<=0)
-942 -3805 0
-1077 -3805 0
-1077 -942 -3806 0
c (0<=(SATLiteral(1077) - aux905 + SATLiteral(942)))
942 3806 0
1077 3806 0
1077 942 3805 0
c (( - aux906 + SATLiteral(807) + SATLiteral(267))<=0)
-267 -3808 0
-807 -3808 0
-807 -267 -3809 0
c (0<=( - aux906 + SATLiteral(807) + SATLiteral(267)))
267 3809 0
807 3809 0
807 267 3808 0
c (( - aux907 + SATLiteral(537) + SATLiteral(1212))<=0)
-1212 -3811 0
-537 -3811 0
-537 -1212 -3812 0
c (0<=( - aux907 + SATLiteral(537) + SATLiteral(1212)))
1212 3812 0
537 3812 0
537 1212 3811 0
c ((aux907 - aux908 + SATLiteral(132))<=0)
3811 -3814 0
3812 -3815 0
-132 -3814 0
-132 3811 -3815 0
-132 3812 -3817 0
c (0<=(aux907 - aux908 + SATLiteral(132)))
-3812 3817 0
-3811 3815 0
132 3817 0
132 -3812 3815 0
132 -3811 3814 0
c ((aux904 + aux906 - aux909)<=0)
3808 -3819 0
3809 -3820 0
3802 -3819 0
3802 3808 -3820 0
3802 3809 -3822 0
3803 -3820 0
3803 3808 -3822 0
3803 3809 -3824 0
c (0<=(aux904 + aux906 - aux909))
-3809 3824 0
-3808 3822 0
-3803 3824 0
-3803 -3809 3822 0
-3803 -3808 3820 0
-3802 3822 0
-3802 -3809 3820 0
-3802 -3808 3819 0
c ((SATLiteral(398) - aux910 + SATLiteral(674))<=0)
-674 -3826 0
-398 -3826 0
-398 -674 -3827 0
c (0<=(SATLiteral(398) - aux910 + SATLiteral(674)))
674 3827 0
398 3827 0
398 674 3826 0
c ((SATLiteral(1079) - aux911 + SATLiteral(944))<=0)
-944 -3829 0
-1079 -3829 0
-1079 -944 -3830 0
c (0<=(SATLiteral(1079) - aux911 + SATLiteral(944)))
944 3830 0
1079 3830 0
1079 944 3829 0
c (( - aux912 + SATLiteral(809) + SATLiteral(269))<=0)
-269 -3832 0
-809 -3832 0
-809 -269 -3833 0
c (0<=( - aux912 + SATLiteral(809) + SATLiteral(269)))
269 3833 0
809 3833 0
809 269 3832 0
c (( - aux913 + SATLiteral(539) + SATLiteral(1214))<=0)
-1214 -3835 0
-539 -3835 0
-539 -1214 -3836 0
c (0<=( - aux913 + SATLiteral(539) + SATLiteral(1214)))
1214 3836 0
539 3836 0
539 1214 3835 0
c ((aux913 - aux914 + SATLiteral(134))<=0)
3835 -3838 0
3836 -3839 0
-134 -3838 0
-134 3835 -3839 0
-134 3836 -3841 0
c (0<=(aux913 - aux914 + SATLiteral(134)))
-3836 3841 0
-3835 3839 0
134 3841 0
134 -3836 3839 0
134 -3835 3838 0
c ((aux910 + aux912 - aux915)<=0)
3832 -3843 0
3833 -3844 0
3826 -3843 0
3826 3832 -3844 0
3826 3833 -3846 0
3827 -3844 0
3827 3832 -3846 0
3827 3833 -3848 0
c (0<=(aux910 + aux912 - aux915))
-3833 3848 0
-3832 3846 0
-3827 3848 0
-3827 -3833 3846 0
-3827 -3832 3844 0
-3826 3846 0
-3826 -3833 3844 0
-3826 -3832 3843 0
c ((SATLiteral(399) - aux916 + SATLiteral(676))<=0)
-676 -3850 0
-399 -3850 0
-399 -676 -3851 0
c (0<=(SATLiteral(399) - aux916 + SATLiteral(676)))
676 3851 0
399 3851 0
399 676 3850 0
c ((SATLiteral(1081) - aux917 + SATLiteral(946))<=0)
-946 -3853 0
-1081 -3853 0
-1081 -946 -3854 0
c (0<=(SATLiteral(1081) - aux917 + SATLiteral(946)))
946 3854 0
1081 3854 0
1081 946 3853 0
c (( - aux918 + SATLiteral(811) + SATLiteral(271))<=0)
-271 -3856 0
-811 -3856 0
-811 -271 -3857 0
c (0<=( - aux918 + SATLiteral(811) + SATLiteral(271)))
271 3857 0
811 3857 0
811 271 3856 0
c (( - aux919 + SATLiteral(541) + SATLiteral(1216))<=0)
-1216 -3859 0
-541 -3859 0
-541 -1216 -3860 0
c (0<=( - aux919 + SATLiteral(541) + SATLiteral(1216)))
1216 3860 0
541 3860 0
541 1216 3859 0
c ((aux919 - aux920 + SATLiteral(136))<=0)
3859 -3862 0
3860 -3863 0
-136 -3862 0
-136 3859 -3863 0
-136 3860 -3865 0
c (0<=(aux919 - aux920 + SATLiteral(136)))
-3860 3865 0
-3859 3863 0
136 3865 0
136 -3860 3863 0
136 -3859 3862 0
c ((aux916 + aux918 - aux921)<=0)
3856 -3867 0
3857 -3868 0
3850 -3867 0
3850 3856 -3868 0
3850 3857 -3870 0
3851 -3868 0
3851 3856 -3870 0
3851 3857 -3872 0
c (0<=(aux916 + aux918 - aux921))
-3857 3872 0
-3856 3870 0
-3851 3872 0
-3851 -3857 3870 0
-3851 -3856 3868 0
-3850 3870 0
-3850 -3857 3868 0
-3850 -3856 3867 0
c ((SATLiteral(400) - aux922 + SATLiteral(-675))<=0)
675 -3874 0
-400 -3874 0
-400 675 -3875 0
c (0<=(SATLiteral(400) - aux922 + SATLiteral(-675)))
-675 3875 0
400 3875 0
400 -675 3874 0
c ((SATLiteral(-1080) - aux923 + SATLiteral(-945))<=0)
945 -3877 0
1080 -3877 0
1080 945 -3878 0
c (0<=(SATLiteral(-1080) - aux923 + SATLiteral(-945)))
-945 3878 0
-1080 3878 0
-1080 -945 3877 0
c (( - aux924 + SATLiteral(-810) + SATLiteral(-270))<=0)
270 -3880 0
810 -3880 0
810 270 -3881 0
c (0<=( - aux924 + SATLiteral(-810) + SATLiteral(-270)))
-270 3881 0
-810 3881 0
-810 -270 3880 0
c (( - aux925 + SATLiteral(-540) + SATLiteral(-1215))<=0)
1215 -3883 0
540 -3883 0
540 1215 -3884 0
c (0<=( - aux925 + SATLiteral(-540) + SATLiteral(-1215)))
-1215 3884 0
-540 3884 0
-540 -1215 3883 0
c ((aux925 - aux926 + SATLiteral(-135))<=0)
3883 -3886 0
3884 -3887 0
135 -3886 0
135 3883 -3887 0
135 3884 -3889 0
c (0<=(aux925 - aux926 + SATLiteral(-135)))
-3884 3889 0
-3883 3887 0
-135 3889 0
-135 -3884 3887 0
-135 -3883 3886 0
c ((aux922 + aux924 - aux927)<=0)
3880 -3891 0
3881 -3892 0
3874 -3891 0
3874 3880 -3892 0
3874 3881 -3894 0
3875 -3892 0
3875 3880 -3894 0
3875 3881 -3896 0
c (0<=(aux922 + aux924 - aux927))
-3881 3896 0
-3880 3894 0
-3875 3896 0
-3875 -3881 3894 0
-3875 -3880 3892 0
-3874 3894 0
-3874 -3881 3892 0
-3874 -3880 3891 0
c (( - aux928 + SATLiteral(2) + SATLiteral(122))<=0)
-122 -3898 0
-2 -3898 0
-2 -122 -3899 0
c (0<=( - aux928 + SATLiteral(2) + SATLiteral(122)))
122 3899 0
2 3899 0
2 122 3898 0
c (( - aux929 + SATLiteral(17) + SATLiteral(107))<=0)
-107 -3901 0
-17 -3901 0
-17 -107 -3902 0
c (0<=( - aux929 + SATLiteral(17) + SATLiteral(107)))
107 3902 0
17 3902 0
17 107 3901 0
c (( - aux930 + SATLiteral(47) + SATLiteral(92))<=0)
-92 -3904 0
-47 -3904 0
-47 -92 -3905 0
c (0<=( - aux930 + SATLiteral(47) + SATLiteral(92)))
92 3905 0
47 3905 0
47 92 3904 0
c (( - aux931 + SATLiteral(62) + SATLiteral(77))<=0)
-77 -3907 0
-62 -3907 0
-62 -77 -3908 0
c (0<=( - aux931 + SATLiteral(62) + SATLiteral(77)))
77 3908 0
62 3908 0
62 77 3907 0
c ((aux931 - aux932 + SATLiteral(32))<=0)
3907 -3910 0
3908 -3911 0
-32 -3910 0
-32 3907 -3911 0
-32 3908 -3913 0
c (0<=(aux931 - aux932 + SATLiteral(32)))
-3908 3913 0
-3907 3911 0
32 3913 0
32 -3908 3911 0
32 -3907 3910 0
c ((aux928 + aux930 - aux933)<=0)
3904 -3915 0
3905 -3916 0
3898 -3915 0
3898 3904 -3916 0
3898 3905 -3918 0
3899 -3916 0
3899 3904 -3918 0
3899 3905 -3920 0
c (0<=(aux928 + aux930 - aux933))
-3905 3920 0
-3904 3918 0
-3899 3920 0
-3899 -3905 3918 0
-3899 -3904 3916 0
-3898 3918 0
-3898 -3905 3916 0
-3898 -3904 3915 0
c (( - aux934 + SATLiteral(4) + SATLiteral(124))<=0)
-124 -3922 0
-4 -3922 0
-4 -124 -3923 0
c (0<=( - aux934 + SATLiteral(4) + SATLiteral(124)))
124 3923 0
4 3923 0
4 124 3922 0
c (( - aux935 + SATLiteral(19) + SATLiteral(109))<=0)
-109 -3925 0
-19 -3925 0
-19 -109 -3926 0
c (0<=( - aux935 + SATLiteral(19) + SATLiteral(109)))
109 3926 0
19 3926 0
19 109 3925 0
c (( - aux936 + SATLiteral(49) + SATLiteral(94))<=0)
-94 -3928 0
-49 -3928 0
-49 -94 -3929 0
c (0<=( - aux936 + SATLiteral(49) + SATLiteral(94)))
94 3929 0
49 3929 0
49 94 3928 0
c (( - aux937 + SATLiteral(64) + SATLiteral(79))<=0)
-79 -3931 0
-64 -3931 0
-64 -79 -3932 0
c (0<=( - aux937 + SATLiteral(64) + SATLiteral(79)))
79 3932 0
64 3932 0
64 79 3931 0
c ((aux937 - aux938 + SATLiteral(34))<=0)
3931 -3934 0
3932 -3935 0
-34 -3934 0
-34 3931 -3935 0
-34 3932 -3937 0
c (0<=(aux937 - aux938 + SATLiteral(34)))
-3932 3937 0
-3931 3935 0
34 3937 0
34 -3932 3935 0
34 -3931 3934 0
c ((aux934 + aux936 - aux939)<=0)
3928 -3939 0
3929 -3940 0
3922 -3939 0
3922 3928 -3940 0
3922 3929 -3942 0
3923 -3940 0
3923 3928 -3942 0
3923 3929 -3944 0
c (0<=(aux934 + aux936 - aux939))
-3929 3944 0
-3928 3942 0
-3923 3944 0
-3923 -3929 3942 0
-3923 -3928 3940 0
-3922 3942 0
-3922 -3929 3940 0
-3922 -3928 3939 0
c (( - aux940 + SATLiteral(6) + SATLiteral(126))<=0)
-126 -3946 0
-6 -3946 0
-6 -126 -3947 0
c (0<=( - aux940 + SATLiteral(6) + SATLiteral(126)))
126 3947 0
6 3947 0
6 126 3946 0
c (( - aux941 + SATLiteral(21) + SATLiteral(111))<=0)
-111 -3949 0
-21 -3949 0
-21 -111 -3950 0
c (0<=( - aux941 + SATLiteral(21) + SATLiteral(111)))
111 3950 0
21 3950 0
21 111 3949 0
c (( - aux942 + SATLiteral(51) + SATLiteral(96))<=0)
-96 -3952 0
-51 -3952 0
-51 -96 -3953 0
c (0<=( - aux942 + SATLiteral(51) + SATLiteral(96)))
96 3953 0
51 3953 0
51 96 3952 0
c (( - aux943 + SATLiteral(66) + SATLiteral(81))<=0)
-81 -3955 0
-66 -3955 0
-66 -81 -3956 0
c (0<=( - aux943 + SATLiteral(66) + SATLiteral(81)))
81 3956 0
66 3956 0
66 81 3955 0
c ((aux943 - aux944 + SATLiteral(36))<=0)
3955 -3958 0
3956 -3959 0
-36 -3958 0
-36 3955 -3959 0
-36 3956 -3961 0
c (0<=(aux943 - aux944 + SATLiteral(36)))
-3956 3961 0
-3955 3959 0
36 3961 0
36 -3956 3959 0
36 -3955 3958 0
c ((aux940 + aux942 - aux945)<=0)
3952 -3963 0
3953 -3964 0
3946 -3963 0
3946 3952 -3964 0
3946 3953 -3966 0
3947 -3964 0
3947 3952 -3966 0
3947 3953 -3968 0
c (0<=(aux940 + aux942 - aux945))
-3953 3968 0
-3952 3966 0
-3947 3968 0
-3947 -3953 3966 0
-3947 -3952 3964 0
-3946 3966 0
-3946 -3953 3964 0
-3946 -3952 3963 0
c (( - aux946 + SATLiteral(8) + SATLiteral(128))<=0)
-128 -3970 0
-8 -3970 0
-8 -128 -3971 0
c (0<=( - aux946 + SATLiteral(8) + SATLiteral(128)))
128 3971 0
8 3971 0
8 128 3970 0
c (( - aux947 + SATLiteral(23) + SATLiteral(113))<=0)
-113 -3973 0
-23 -3973 0
-23 -113 -3974 0
c (0<=( - aux947 + SATLiteral(23) + SATLiteral(113)))
113 3974 0
23 3974 0
23 113 3973 0
c (( - aux948 + SATLiteral(53) + SATLiteral(98))<=0)
-98 -3976 0
-53 -3976 0
-53 -98 -3977 0
c (0<=( - aux948 + SATLiteral(53) + SATLiteral(98)))
98 3977 0
53 3977 0
53 98 3976 0
c (( - aux949 + SATLiteral(68) + SATLiteral(83))<=0)
-83 -3979 0
-68 -3979 0
-68 -83 -3980 0
c (0<=( - aux949 + SATLiteral(68) + SATLiteral(83)))
83 3980 0
68 3980 0
68 83 3979 0
c ((aux949 - aux950 + SATLiteral(38))<=0)
3979 -3982 0
3980 -3983 0
-38 -3982 0
-38 3979 -3983 0
-38 3980 -3985 0
c (0<=(aux949 - aux950 + SATLiteral(38)))
-3980 3985 0
-3979 3983 0
38 3985 0
38 -3980 3983 0
38 -3979 3982 0
c ((aux946 + aux948 - aux951)<=0)
3976 -3987 0
3977 -3988 0
3970 -3987 0
3970 3976 -3988 0
3970 3977 -3990 0
3971 -3988 0
3971 3976 -3990 0
3971 3977 -3992 0
c (0<=(aux946 + aux948 - aux951))
-3977 3992 0
-3976 3990 0
-3971 3992 0
-3971 -3977 3990 0
-3971 -3976 3988 0
-3970 3990 0
-3970 -3977 3988 0
-3970 -3976 3987 0
c (( - aux952 + SATLiteral(10) + SATLiteral(130))<=0)
-130 -3994 0
-10 -3994 0
-10 -130 -3995 0
c (0<=( - aux952 + SATLiteral(10) + SATLiteral(130)))
130 3995 0
10 3995 0
10 130 3994 0
c (( - aux953 + SATLiteral(25) + SATLiteral(115))<=0)
-115 -3997 0
-25 -3997 0
-25 -115 -3998 0
c (0<=( - aux953 + SATLiteral(25) + SATLiteral(115)))
115 3998 0
25 3998 0
25 115 3997 0
c (( - aux954 + SATLiteral(55) + SATLiteral(100))<=0)
-100 -4000 0
-55 -4000 0
-55 -100 -4001 0
c (0<=( - aux954 + SATLiteral(55) + SATLiteral(100)))
100 4001 0
55 4001 0
55 100 4000 0
c (( - aux955 + SATLiteral(70) + SATLiteral(85))<=0)
-85 -4003 0
-70 -4003 0
-70 -85 -4004 0
c (0<=( - aux955 + SATLiteral(70) + SATLiteral(85)))
85 4004 0
70 4004 0
70 85 4003 0
c ((aux955 - aux956 + SATLiteral(40))<=0)
4003 -4006 0
4004 -4007 0
-40 -4006 0
-40 4003 -4007 0
-40 4004 -4009 0
c (0<=(aux955 - aux956 + SATLiteral(40)))
-4004 4009 0
-4003 4007 0
40 4009 0
40 -4004 4007 0
40 -4003 4006 0
c ((aux952 + aux954 - aux957)<=0)
4000 -4011 0
4001 -4012 0
3994 -4011 0
3994 4000 -4012 0
3994 4001 -4014 0
3995 -4012 0
3995 4000 -4014 0
3995 4001 -4016 0
c (0<=(aux952 + aux954 - aux957))
-4001 4016 0
-4000 4014 0
-3995 4016 0
-3995 -4001 4014 0
-3995 -4000 4012 0
-3994 4014 0
-3994 -4001 4012 0
-3994 -4000 4011 0
c (( - aux958 + SATLiteral(12) + SATLiteral(132))<=0)
-132 -4018 0
-12 -4018 0
-12 -132 -4019 0
c (0<=( - aux958 + SATLiteral(12) + SATLiteral(132)))
132 4019 0
12 4019 0
12 132 4018 0
c (( - aux959 + SATLiteral(27) + SATLiteral(117))<=0)
-117 -4021 0
-27 -4021 0
-27 -117 -4022 0
c (0<=( - aux959 + SATLiteral(27) + SATLiteral(117)))
117 4022 0
27 4022 0
27 117 4021 0
c (( - aux960 + SATLiteral(57) + SATLiteral(102))<=0)
-102 -4024 0
-57 -4024 0
-57 -102 -4025 0
c (0<=( - aux960 + SATLiteral(57) + SATLiteral(102)))
102 4025 0
57 4025 0
57 102 4024 0
c (( - aux961 + SATLiteral(72) + SATLiteral(87))<=0)
-87 -4027 0
-72 -4027 0
-72 -87 -4028 0
c (0<=( - aux961 + SATLiteral(72) + SATLiteral(87)))
87 4028 0
72 4028 0
72 87 4027 0
c ((aux961 - aux962 + SATLiteral(42))<=0)
4027 -4030 0
4028 -4031 0
-42 -4030 0
-42 4027 -4031 0
-42 4028 -4033 0
c (0<=(aux961 - aux962 + SATLiteral(42)))
-4028 4033 0
-4027 4031 0
42 4033 0
42 -4028 4031 0
42 -4027 4030 0
c ((aux958 + aux960 - aux963)<=0)
4024 -4035 0
4025 -4036 0
4018 -4035 0
4018 4024 -4036 0
4018 4025 -4038 0
4019 -4036 0
4019 4024 -4038 0
4019 4025 -4040 0
c (0<=(aux958 + aux960 - aux963))
-4025 4040 0
-4024 4038 0
-4019 4040 0
-4019 -4025 4038 0
-4019 -4024 4036 0
-4018 4038 0
-4018 -4025 4036 0
-4018 -4024 4035 0
c (( - aux964 + SATLiteral(14) + SATLiteral(134))<=0)
-134 -4042 0
-14 -4042 0
-14 -134 -4043 0
c (0<=( - aux964 + SATLiteral(14) + SATLiteral(134)))
134 4043 0
14 4043 0
14 134 4042 0
c (( - aux965 + SATLiteral(29) + SATLiteral(119))<=0)
-119 -4045 0
-29 -4045 0
-29 -119 -4046 0
c (0<=( - aux965 + SATLiteral(29) + SATLiteral(119)))
119 4046 0
29 4046 0
29 119 4045 0
c (( - aux966 + SATLiteral(59) + SATLiteral(104))<=0)
-104 -4048 0
-59 -4048 0
-59 -104 -4049 0
c (0<=( - aux966 + SATLiteral(59) + SATLiteral(104)))
104 4049 0
59 4049 0
59 104 4048 0
c (( - aux967 + SATLiteral(74) + SATLiteral(89))<=0)
-89 -4051 0
-74 -4051 0
-74 -89 -4052 0
c (0<=( - aux967 + SATLiteral(74) + SATLiteral(89)))
89 4052 0
74 4052 0
74 89 4051 0
c ((aux967 - aux968 + SATLiteral(44))<=0)
4051 -4054 0
4052 -4055 0
-44 -4054 0
-44 4051 -4055 0
-44 4052 -4057 0
c (0<=(aux967 - aux968 + SATLiteral(44)))
-4052 4057 0
-4051 4055 0
44 4057 0
44 -4052 4055 0
44 -4051 4054 0
c ((aux964 + aux966 - aux969)<=0)
4048 -4059 0
4049 -4060 0
4042 -4059 0
4042 4048 -4060 0
4042 4049 -4062 0
4043 -4060 0
4043 4048 -4062 0
4043 4049 -4064 0
c (0<=(aux964 + aux966 - aux969))
-4049 4064 0
-4048 4062 0
-4043 4064 0
-4043 -4049 4062 0
-4043 -4048 4060 0
-4042 4062 0
-4042 -4049 4060 0
-4042 -4048 4059 0
c (( - aux970 + SATLiteral(16) + SATLiteral(136))<=0)
-136 -4066 0
-16 -4066 0
-16 -136 -4067 0
c (0<=( - aux970 + SATLiteral(16) + SATLiteral(136)))
136 4067 0
16 4067 0
16 136 4066 0
c (( - aux971 + SATLiteral(31) + SATLiteral(121))<=0)
-121 -4069 0
-31 -4069 0
-31 -121 -4070 0
c (0<=( - aux971 + SATLiteral(31) + SATLiteral(121)))
121 4070 0
31 4070 0
31 121 4069 0
c (( - aux972 + SATLiteral(61) + SATLiteral(106))<=0)
-106 -4072 0
-61 -4072 0
-61 -106 -4073 0
c (0<=( - aux972 + SATLiteral(61) + SATLiteral(106)))
106 4073 0
61 4073 0
61 106 4072 0
c (( - aux973 + SATLiteral(76) + SATLiteral(91))<=0)
-91 -4075 0
-76 -4075 0
-76 -91 -4076 0
c (0<=( - aux973 + SATLiteral(76) + SATLiteral(91)))
91 4076 0
76 4076 0
76 91 4075 0
c ((aux973 - aux974 + SATLiteral(46))<=0)
4075 -4078 0
4076 -4079 0
-46 -4078 0
-46 4075 -4079 0
-46 4076 -4081 0
c (0<=(aux973 - aux974 + SATLiteral(46)))
-4076 4081 0
-4075 4079 0
46 4081 0
46 -4076 4079 0
46 -4075 4078 0
c ((aux970 + aux972 - aux975)<=0)
4072 -4083 0
4073 -4084 0
4066 -4083 0
4066 4072 -4084 0
4066 4073 -4086 0
4067 -4084 0
4067 4072 -4086 0
4067 4073 -4088 0
c (0<=(aux970 + aux972 - aux975))
-4073 4088 0
-4072 4086 0
-4067 4088 0
-4067 -4073 4086 0
-4067 -4072 4084 0
-4066 4086 0
-4066 -4073 4084 0
-4066 -4072 4083 0
c (( - aux976 + SATLiteral(-15) + SATLiteral(-135))<=0)
135 -4090 0
15 -4090 0
15 135 -4091 0
c (0<=( - aux976 + SATLiteral(-15) + SATLiteral(-135)))
-135 4091 0
-15 4091 0
-15 -135 4090 0
c (( - aux977 + SATLiteral(-30) + SATLiteral(-120))<=0)
120 -4093 0
30 -4093 0
30 120 -4094 0
c (0<=( - aux977 + SATLiteral(-30) + SATLiteral(-120)))
-120 4094 0
-30 4094 0
-30 -120 4093 0
c (( - aux978 + SATLiteral(-60) + SATLiteral(-105))<=0)
105 -4096 0
60 -4096 0
60 105 -4097 0
c (0<=( - aux978 + SATLiteral(-60) + SATLiteral(-105)))
-105 4097 0
-60 4097 0
-60 -105 4096 0
c (( - aux979 + SATLiteral(-75) + SATLiteral(-90))<=0)
90 -4099 0
75 -4099 0
75 90 -4100 0
c (0<=( - aux979 + SATLiteral(-75) + SATLiteral(-90)))
-90 4100 0
-75 4100 0
-75 -90 4099 0
c ((aux979 - aux980 + SATLiteral(-45))<=0)
4099 -4102 0
4100 -4103 0
45 -4102 0
45 4099 -4103 0
45 4100 -4105 0
c (0<=(aux979 - aux980 + SATLiteral(-45)))
-4100 4105 0
-4099 4103 0
-45 4105 0
-45 -4100 4103 0
-45 -4099 4102 0
c ((aux976 + aux978 - aux981)<=0)
4096 -4107 0
4097 -4108 0
4090 -4107 0
4090 4096 -4108 0
4090 4097 -4110 0
4091 -4108 0
4091 4096 -4110 0
4091 4097 -4112 0
c (0<=(aux976 + aux978 - aux981))
-4097 4112 0
-4096 4110 0
-4091 4112 0
-4091 -4097 4110 0
-4091 -4096 4108 0
-4090 4110 0
-4090 -4097 4108 0
-4090 -4096 4107 0
c (( - aux982 + SATLiteral(137) + SATLiteral(257))<=0)
-257 -4114 0
-137 -4114 0
-137 -257 -4115 0
c (0<=( - aux982 + SATLiteral(137) + SATLiteral(257)))
257 4115 0
137 4115 0
137 257 4114 0
c (( - aux983 + SATLiteral(152) + SATLiteral(242))<=0)
-242 -4117 0
-152 -4117 0
-152 -242 -4118 0
c (0<=( - aux983 + SATLiteral(152) + SATLiteral(242)))
242 4118 0
152 4118 0
152 242 4117 0
c (( - aux984 + SATLiteral(182) + SATLiteral(227))<=0)
-227 -4120 0
-182 -4120 0
-182 -227 -4121 0
c (0<=( - aux984 + SATLiteral(182) + SATLiteral(227)))
227 4121 0
182 4121 0
182 227 4120 0
c (( - aux985 + SATLiteral(197) + SATLiteral(212))<=0)
-212 -4123 0
-197 -4123 0
-197 -212 -4124 0
c (0<=( - aux985 + SATLiteral(197) + SATLiteral(212)))
212 4124 0
197 4124 0
197 212 4123 0
c ((aux985 - aux986 + SATLiteral(167))<=0)
4123 -4126 0
4124 -4127 0
-167 -4126 0
-167 4123 -4127 0
-167 4124 -4129 0
c (0<=(aux985 - aux986 + SATLiteral(167)))
-4124 4129 0
-4123 4127 0
167 4129 0
167 -4124 4127 0
167 -4123 4126 0
c ((aux982 + aux984 - aux987)<=0)
4120 -4131 0
4121 -4132 0
4114 -4131 0
4114 4120 -4132 0
4114 4121 -4134 0
4115 -4132 0
4115 4120 -4134 0
4115 4121 -4136 0
c (0<=(aux982 + aux984 - aux987))
-4121 4136 0
-4120 4134 0
-4115 4136 0
-4115 -4121 4134 0
-4115 -4120 4132 0
-4114 4134 0
-4114 -4121 4132 0
-4114 -4120 4131 0
c (( - aux988 + SATLiteral(139) + SATLiteral(259))<=0)
-259 -4138 0
-139 -4138 0
-139 -259 -4139 0
c (0<=( - aux988 + SATLiteral(139) + SATLiteral(259)))
259 4139 0
139 4139 0
139 259 4138 0
c (( - aux989 + SATLiteral(154) + SATLiteral(244))<=0)
-244 -4141 0
-154 -4141 0
-154 -244 -4142 0
c (0<=( - aux989 + SATLiteral(154) + SATLiteral(244)))
244 4142 0
154 4142 0
154 244 4141 0
c (( - aux990 + SATLiteral(184) + SATLiteral(229))<=0)
-229 -4144 0
-184 -4144 0
-184 -229 -4145 0
c (0<=( - aux990 + SATLiteral(184) + SATLiteral(229)))
229 4145 0
184 4145 0
184 229 4144 0
c (( - aux991 + SATLiteral(199) + SATLiteral(214))<=0)
-214 -4147 0
-199 -4147 0
-199 -214 -4148 0
c (0<=( - aux991 + SATLiteral(199) + SATLiteral(214)))
214 4148 0
199 4148 0
199 214 4147 0
c ((aux991 - aux992 + SATLiteral(169))<=0)
4147 -4150 0
4148 -4151 0
-169 -4150 0
-169 4147 -4151 0
-169 4148 -4153 0
c (0<=(aux991 - aux992 + SATLiteral(169)))
-4148 4153 0
-4147 4151 0
169 4153 0
169 -4148 4151 0
169 -4147 4150 0
c ((aux988 + aux990 - aux993)<=0)
4144 -4155 0
4145 -4156 0
4138 -4155 0
4138 4144 -4156 0
4138 4145 -4158 0
4139 -4156 0
4139 4144 -4158 0
4139 4145 -4160 0
c (0<=(aux988 + aux990 - aux993))
-4145 4160 0
-4144 4158 0
-4139 4160 0
-4139 -4145 4158 0
-4139 -4144 4156 0
-4138 4158 0
-4138 -4145 4156 0
-4138 -4144 4155 0
c (( - aux994 + SATLiteral(141) + SATLiteral(261))<=0)
-261 -4162 0
-141 -4162 0
-141 -261 -4163 0
c (0<=( - aux994 + SATLiteral(141) + SATLiteral(261)))
261 4163 0
141 4163 0
141 261 4162 0
c (( - aux995 + SATLiteral(156) + SATLiteral(246))<=0)
-246 -4165 0
-156 -4165 0
-156 -246 -4166 0
c (0<=( - aux995 + SATLiteral(156) + SATLiteral(246)))
246 4166 0
156 4166 0
156 246 4165 0
c (( - aux996 + SATLiteral(186) + SATLiteral(231))<=0)
-231 -4168 0
-186 -4168 0
-186 -231 -4169 0
c (0<=( - aux996 + SATLiteral(186) + SATLiteral(231)))
231 4169 0
186 4169 0
186 231 4168 0
c (( - aux997 + SATLiteral(201) + SATLiteral(216))<=0)
-216 -4171 0
-201 -4171 0
-201 -216 -4172 0
c (0<=( - aux997 + SATLiteral(201) + SATLiteral(216)))
216 4172 0
201 4172 0
201 216 4171 0
c ((aux997 - aux998 + SATLiteral(171))<=0)
4171 -4174 0
4172 -4175 0
-171 -4174 0
-171 4171 -4175 0
-171 4172 -4177 0
c (0<=(aux997 - aux998 + SATLiteral(171)))
-4172 4177 0
-4171 4175 0
171 4177 0
171 -4172 4175 0
171 -4171 4174 0
c ((aux994 + aux996 - aux999)<=0)
4168 -4179 0
4169 -4180 0
4162 -4179 0
4162 4168 -4180 0
4162 4169 -4182 0
4163 -4180 0
4163 4168 -4182 0
4163 4169 -4184 0
c (0<=(aux994 + aux996 - aux999))
-4169 4184 0
-4168 4182 0
-4163 4184 0
-4163 -4169 4182 0
-4163 -4168 4180 0
-4162 4182 0
-4162 -4169 4180 0
-4162 -4168 4179 0
c (( - aux1000 + SATLiteral(143) + SATLiteral(263))<=0)
-263 -4186 0
-143 -4186 0
-143 -263 -4187 0
c (0<=( - aux1000 + SATLiteral(143) + SATLiteral(263)))
263 4187 0
143 4187 0
143 263 4186 0
c (( - aux1001 + SATLiteral(158) + SATLiteral(248))<=0)
-248 -4189 0
-158 -4189 0
-158 -248 -4190 0
c (0<=( - aux1001 + SATLiteral(158) + SATLiteral(248)))
248 4190 0
158 4190 0
158 248 4189 0
c (( - aux1002 + SATLiteral(188) + SATLiteral(233))<=0)
-233 -4192 0
-188 -4192 0
-188 -233 -4193 0
c (0<=( - aux1002 + SATLiteral(188) + SATLiteral(233)))
233 4193 0
188 4193 0
188 233 4192 0
c (( - aux1003 + SATLiteral(203) + SATLiteral(218))<=0)
-218 -4195 0
-203 -4195 0
-203 -218 -4196 0
c (0<=( - aux1003 + SATLiteral(203) + SATLiteral(218)))
218 4196 0
203 4196 0
203 218 4195 0
c ((aux1003 - aux1004 + SATLiteral(173))<=0)
4195 -4198 0
4196 -4199 0
-173 -4198 0
-173 4195 -4199 0
-173 4196 -4201 0
c (0<=(aux1003 - aux1004 + SATLiteral(173)))
-4196 4201 0
-4195 4199 0
173 4201 0
173 -4196 4199 0
173 -4195 4198 0
c ((aux1000 + aux1002 - aux1005)<=0)
4192 -4203 0
4193 -4204 0
4186 -4203 0
4186 4192 -4204 0
4186 4193 -4206 0
4187 -4204 0
4187 4192 -4206 0
4187 4193 -4208 0
c (0<=(aux1000 + aux1002 - aux1005))
-4193 4208 0
-4192 4206 0
-4187 4208 0
-4187 -4193 4206 0
-4187 -4192 4204 0
-4186 4206 0
-4186 -4193 4204 0
-4186 -4192 4203 0
c (( - aux1006 + SATLiteral(145) + SATLiteral(265))<=0)
-265 -4210 0
-145 -4210 0
-145 -265 -4211 0
c (0<=( - aux1006 + SATLiteral(145) + SATLiteral(265)))
265 4211 0
145 4211 0
145 265 4210 0
c (( - aux1007 + SATLiteral(160) + SATLiteral(250))<=0)
-250 -4213 0
-160 -4213 0
-160 -250 -4214 0
c (0<=( - aux1007 + SATLiteral(160) + SATLiteral(250)))
250 4214 0
160 4214 0
160 250 4213 0
c (( - aux1008 + SATLiteral(190) + SATLiteral(235))<=0)
-235 -4216 0
-190 -4216 0
-190 -235 -4217 0
c (0<=( - aux1008 + SATLiteral(190) + SATLiteral(235)))
235 4217 0
190 4217 0
190 235 4216 0
c (( - aux1009 + SATLiteral(205) + SATLiteral(220))<=0)
-220 -4219 0
-205 -4219 0
-205 -220 -4220 0
c (0<=( - aux1009 + SATLiteral(205) + SATLiteral(220)))
220 4220 0
205 4220 0
205 220 4219 0
c ((aux1009 - aux1010 + SATLiteral(175))<=0)
4219 -4222 0
4220 -4223 0
-175 -4222 0
-175 4219 -4223 0
-175 4220 -4225 0
c (0<=(aux1009 - aux1010 + SATLiteral(175)))
-4220 4225 0
-4219 4223 0
175 4225 0
175 -4220 4223 0
175 -4219 4222 0
c ((aux1006 + aux1008 - aux1011)<=0)
4216 -4227 0
4217 -4228 0
4210 -4227 0
4210 4216 -4228 0
4210 4217 -4230 0
4211 -4228 0
4211 4216 -4230 0
4211 4217 -4232 0
c (0<=(aux1006 + aux1008 - aux1011))
-4217 4232 0
-4216 4230 0
-4211 4232 0
-4211 -4217 4230 0
-4211 -4216 4228 0
-4210 4230 0
-4210 -4217 4228 0
-4210 -4216 4227 0
c (( - aux1012 + SATLiteral(147) + SATLiteral(267))<=0)
-267 -4234 0
-147 -4234 0
-147 -267 -4235 0
c (0<=( - aux1012 + SATLiteral(147) + SATLiteral(267)))
267 4235 0
147 4235 0
147 267 4234 0
c (( - aux1013 + SATLiteral(162) + SATLiteral(252))<=0)
-252 -4237 0
-162 -4237 0
-162 -252 -4238 0
c (0<=( - aux1013 + SATLiteral(162) + SATLiteral(252)))
252 4238 0
162 4238 0
162 252 4237 0
c (( - aux1014 + SATLiteral(192) + SATLiteral(237))<=0)
-237 -4240 0
-192 -4240 0
-192 -237 -4241 0
c (0<=( - aux1014 + SATLiteral(192) + SATLiteral(237)))
237 4241 0
192 4241 0
192 237 4240 0
c (( - aux1015 + SATLiteral(207) + SATLiteral(222))<=0)
-222 -4243 0
-207 -4243 0
-207 -222 -4244 0
c (0<=( - aux1015 + SATLiteral(207) + SATLiteral(222)))
222 4244 0
207 4244 0
207 222 4243 0
c ((aux1015 - aux1016 + SATLiteral(177))<=0)
4243 -4246 0
4244 -4247 0
-177 -4246 0
-177 4243 -4247 0
-177 4244 -4249 0
c (0<=(aux1015 - aux1016 + SATLiteral(177)))
-4244 4249 0
-4243 4247 0
177 4249 0
177 -4244 4247 0
177 -4243 4246 0
c ((aux1012 + aux1014 - aux1017)<=0)
4240 -4251 0
4241 -4252 0
4234 -4251 0
4234 4240 -4252 0
4234 4241 -4254 0
4235 -4252 0
4235 4240 -4254 0
4235 4241 -4256 0
c (0<=(aux1012 + aux1014 - aux1017))
-4241 4256 0
-4240 4254 0
-4235 4256 0
-4235 -4241 4254 0
-4235 -4240 4252 0
-4234 4254 0
-4234 -4241 4252 0
-4234 -4240 4251 0
c (( - aux1018 + SATLiteral(149) + SATLiteral(269))<=0)
-269 -4258 0
-149 -4258 0
-149 -269 -4259 0
c (0<=( - aux1018 + SATLiteral(149) + SATLiteral(269)))
269 4259 0
149 4259 0
149 269 4258 0
c (( - aux1019 + SATLiteral(164) + SATLiteral(254))<=0)
-254 -4261 0
-164 -4261 0
-164 -254 -4262 0
c (0<=( - aux1019 + SATLiteral(164) + SATLiteral(254)))
254 4262 0
164 4262 0
164 254 4261 0
c (( - aux1020 + SATLiteral(194) + SATLiteral(239))<=0)
-239 -4264 0
-194 -4264 0
-194 -239 -4265 0
c (0<=( - aux1020 + SATLiteral(194) + SATLiteral(239)))
239 4265 0
194 4265 0
194 239 4264 0
c (( - aux1021 + SATLiteral(209) + SATLiteral(224))<=0)
-224 -4267 0
-209 -4267 0
-209 -224 -4268 0
c (0<=( - aux1021 + SATLiteral(209) + SATLiteral(224)))
224 4268 0
209 4268 0
209 224 4267 0
c ((aux1021 - aux1022 + SATLiteral(179))<=0)
4267 -4270 0
4268 -4271 0
-179 -4270 0
-179 4267 -4271 0
-179 4268 -4273 0
c (0<=(aux1021 - aux1022 + SATLiteral(179)))
-4268 4273 0
-4267 4271 0
179 4273 0
179 -4268 4271 0
179 -4267 4270 0
c ((aux1018 + aux1020 - aux1023)<=0)
4264 -4275 0
4265 -4276 0
4258 -4275 0
4258 4264 -4276 0
4258 4265 -4278 0
4259 -4276 0
4259 4264 -4278 0
4259 4265 -4280 0
c (0<=(aux1018 + aux1020 - aux1023))
-4265 4280 0
-4264 4278 0
-4259 4280 0
-4259 -4265 4278 0
-4259 -4264 4276 0
-4258 4278 0
-4258 -4265 4276 0
-4258 -4264 4275 0
c (( - aux1024 + SATLiteral(151) + SATLiteral(271))<=0)
-271 -4282 0
-151 -4282 0
-151 -271 -4283 0
c (0<=( - aux1024 + SATLiteral(151) + SATLiteral(271)))
271 4283 0
151 4283 0
151 271 4282 0
c (( - aux1025 + SATLiteral(166) + SATLiteral(256))<=0)
-256 -4285 0
-166 -4285 0
-166 -256 -4286 0
c (0<=( - aux1025 + SATLiteral(166) + SATLiteral(256)))
256 4286 0
166 4286 0
166 256 4285 0
c (( - aux1026 + SATLiteral(196) + SATLiteral(241))<=0)
-241 -4288 0
-196 -4288 0
-196 -241 -4289 0
c (0<=( - aux1026 + SATLiteral(196) + SATLiteral(241)))
241 4289 0
196 4289 0
196 241 4288 0
c (( - aux1027 + SATLiteral(211) + SATLiteral(226))<=0)
-226 -4291 0
-211 -4291 0
-211 -226 -4292 0
c (0<=( - aux1027 + SATLiteral(211) + SATLiteral(226)))
226 4292 0
211 4292 0
211 226 4291 0
c ((aux1027 - aux1028 + SATLiteral(181))<=0)
4291 -4294 0
4292 -4295 0
-181 -4294 0
-181 4291 -4295 0
-181 4292 -4297 0
c (0<=(aux1027 - aux1028 + SATLiteral(181)))
-4292 4297 0
-4291 4295 0
181 4297 0
181 -4292 4295 0
181 -4291 4294 0
c ((aux1024 + aux1026 - aux1029)<=0)
4288 -4299 0
4289 -4300 0
4282 -4299 0
4282 4288 -4300 0
4282 4289 -4302 0
4283 -4300 0
4283 4288 -4302 0
4283 4289 -4304 0
c (0<=(aux1024 + aux1026 - aux1029))
-4289 4304 0
-4288 4302 0
-4283 4304 0
-4283 -4289 4302 0
-4283 -4288 4300 0
-4282 4302 0
-4282 -4289 4300 0
-4282 -4288 4299 0
c (( - aux1030 + SATLiteral(-150) + SATLiteral(-270))<=0)
270 -4306 0
150 -4306 0
150 270 -4307 0
c (0<=( - aux1030 + SATLiteral(-150) + SATLiteral(-270)))
-270 4307 0
-150 4307 0
-150 -270 4306 0
c (( - aux1031 + SATLiteral(-165) + SATLiteral(-255))<=0)
255 -4309 0
165 -4309 0
165 255 -4310 0
c (0<=( - aux1031 + SATLiteral(-165) + SATLiteral(-255)))
-255 4310 0
-165 4310 0
-165 -255 4309 0
c (( - aux1032 + SATLiteral(-195) + SATLiteral(-240))<=0)
240 -4312 0
195 -4312 0
195 240 -4313 0
c (0<=( - aux1032 + SATLiteral(-195) + SATLiteral(-240)))
-240 4313 0
-195 4313 0
-195 -240 4312 0
c (( - aux1033 + SATLiteral(-210) + SATLiteral(-225))<=0)
225 -4315 0
210 -4315 0
210 225 -4316 0
c (0<=( - aux1033 + SATLiteral(-210) + SATLiteral(-225)))
-225 4316 0
-210 4316 0
-210 -225 4315 0
c ((aux1033 - aux1034 + SATLiteral(-180))<=0)
4315 -4318 0
4316 -4319 0
180 -4318 0
180 4315 -4319 0
180 4316 -4321 0
c (0<=(aux1033 - aux1034 + SATLiteral(-180)))
-4316 4321 0
-4315 4319 0
-180 4321 0
-180 -4316 4319 0
-180 -4315 4318 0
c ((aux1030 + aux1032 - aux1035)<=0)
4312 -4323 0
4313 -4324 0
4306 -4323 0
4306 4312 -4324 0
4306 4313 -4326 0
4307 -4324 0
4307 4312 -4326 0
4307 4313 -4328 0
c (0<=(aux1030 + aux1032 - aux1035))
-4313 4328 0
-4312 4326 0
-4307 4328 0
-4307 -4313 4326 0
-4307 -4312 4324 0
-4306 4326 0
-4306 -4313 4324 0
-4306 -4312 4323 0
c ((SATLiteral(272) + SATLiteral(392) - aux1036)<=0)
-392 -4330 0
-272 -4330 0
-272 -392 -4331 0
c (0<=(SATLiteral(272) + SATLiteral(392) - aux1036))
392 4331 0
272 4331 0
272 392 4330 0
c ((SATLiteral(287) + SATLiteral(377) - aux1037)<=0)
-377 -4333 0
-287 -4333 0
-287 -377 -4334 0
c (0<=(SATLiteral(287) + SATLiteral(377) - aux1037))
377 4334 0
287 4334 0
287 377 4333 0
c ((SATLiteral(317) + SATLiteral(362) - aux1038)<=0)
-362 -4336 0
-317 -4336 0
-317 -362 -4337 0
c (0<=(SATLiteral(317) + SATLiteral(362) - aux1038))
362 4337 0
317 4337 0
317 362 4336 0
c ((SATLiteral(332) + SATLiteral(347) - aux1039)<=0)
-347 -4339 0
-332 -4339 0
-332 -347 -4340 0
c (0<=(SATLiteral(332) + SATLiteral(347) - aux1039))
347 4340 0
332 4340 0
332 347 4339 0
c ((SATLiteral(302) + aux1039 - aux1040)<=0)
4339 -4342 0
4340 -4343 0
-302 -4342 0
-302 4339 -4343 0
-302 4340 -4345 0
c (0<=(SATLiteral(302) + aux1039 - aux1040))
-4340 4345 0
-4339 4343 0
302 4345 0
302 -4340 4343 0
302 -4339 4342 0
c ((aux1036 + aux1038 - aux1041)<=0)
4336 -4347 0
4337 -4348 0
4330 -4347 0
4330 4336 -4348 0
4330 4337 -4350 0
4331 -4348 0
4331 4336 -4350 0
4331 4337 -4352 0
c (0<=(aux1036 + aux1038 - aux1041))
-4337 4352 0
-4336 4350 0
-4331 4352 0
-4331 -4337 4350 0
-4331 -4336 4348 0
-4330 4350 0
-4330 -4337 4348 0
-4330 -4336 4347 0
c ((SATLiteral(274) + SATLiteral(393) - aux1042)<=0)
-393 -4354 0
-274 -4354 0
-274 -393 -4355 0
c (0<=(SATLiteral(274) + SATLiteral(393) - aux1042))
393 4355 0
274 4355 0
274 393 4354 0
c ((SATLiteral(289) + SATLiteral(379) - aux1043)<=0)
-379 -4357 0
-289 -4357 0
-289 -379 -4358 0
c (0<=(SATLiteral(289) + SATLiteral(379) - aux1043))
379 4358 0
289 4358 0
289 379 4357 0
c ((SATLiteral(319) + SATLiteral(364) - aux1044)<=0)
-364 -4360 0
-319 -4360 0
-319 -364 -4361 0
c (0<=(SATLiteral(319) + SATLiteral(364) - aux1044))
364 4361 0
319 4361 0
319 364 4360 0
c ((SATLiteral(334) + SATLiteral(349) - aux1045)<=0)
-349 -4363 0
-334 -4363 0
-334 -349 -4364 0
c (0<=(SATLiteral(334) + SATLiteral(349) - aux1045))
349 4364 0
334 4364 0
334 349 4363 0
c ((SATLiteral(304) + aux1045 - aux1046)<=0)
4363 -4366 0
4364 -4367 0
-304 -4366 0
-304 4363 -4367 0
-304 4364 -4369 0
c (0<=(SATLiteral(304) + aux1045 - aux1046))
-4364 4369 0
-4363 4367 0
304 4369 0
304 -4364 4367 0
304 -4363 4366 0
c ((aux1042 + aux1044 - aux1047)<=0)
4360 -4371 0
4361 -4372 0
4354 -4371 0
4354 4360 -4372 0
4354 4361 -4374 0
4355 -4372 0
4355 4360 -4374 0
4355 4361 -4376 0
c (0<=(aux1042 + aux1044 - aux1047))
-4361 4376 0
-4360 4374 0
-4355 4376 0
-4355 -4361 4374 0
-4355 -4360 4372 0
-4354 4374 0
-4354 -4361 4372 0
-4354 -4360 4371 0
c ((SATLiteral(276) + SATLiteral(394) - aux1048)<=0)
-394 -4378 0
-276 -4378 0
-276 -394 -4379 0
c (0<=(SATLiteral(276) + SATLiteral(394) - aux1048))
394 4379 0
276 4379 0
276 394 4378 0
c ((SATLiteral(291) + SATLiteral(381) - aux1049)<=0)
-381 -4381 0
-291 -4381 0
-291 -381 -4382 0
c (0<=(SATLiteral(291) + SATLiteral(381) - aux1049))
381 4382 0
291 4382 0
291 381 4381 0
c ((SATLiteral(321) + SATLiteral(366) - aux1050)<=0)
-366 -4384 0
-321 -4384 0
-321 -366 -4385 0
c (0<=(SATLiteral(321) + SATLiteral(366) - aux1050))
366 4385 0
321 4385 0
321 366 4384 0
c ((SATLiteral(336) + SATLiteral(351) - aux1051)<=0)
-351 -4387 0
-336 -4387 0
-336 -351 -4388 0
c (0<=(SATLiteral(336) + SATLiteral(351) - aux1051))
351 4388 0
336 4388 0
336 351 4387 0
c ((SATLiteral(306) + aux1051 - aux1052)<=0)
4387 -4390 0
4388 -4391 0
-306 -4390 0
-306 4387 -4391 0
-306 4388 -4393 0
c (0<=(SATLiteral(306) + aux1051 - aux1052))
-4388 4393 0
-4387 4391 0
306 4393 0
306 -4388 4391 0
306 -4387 4390 0
c ((aux1048 + aux1050 - aux1053)<=0)
4384 -4395 0
4385 -4396 0
4378 -4395 0
4378 4384 -4396 0
4378 4385 -4398 0
4379 -4396 0
4379 4384 -4398 0
4379 4385 -4400 0
c (0<=(aux1048 + aux1050 - aux1053))
-4385 4400 0
-4384 4398 0
-4379 4400 0
-4379 -4385 4398 0
-4379 -4384 4396 0
-4378 4398 0
-4378 -4385 4396 0
-4378 -4384 4395 0
c ((SATLiteral(278) + SATLiteral(395) - aux1054)<=0)
-395 -4402 0
-278 -4402 0
-278 -395 -4403 0
c (0<=(SATLiteral(278) + SATLiteral(395) - aux1054))
395 4403 0
278 4403 0
278 395 4402 0
c ((SATLiteral(293) + SATLiteral(383) - aux1055)<=0)
-383 -4405 0
-293 -4405 0
-293 -383 -4406 0
c (0<=(SATLiteral(293) + SATLiteral(383) - aux1055))
383 4406 0
293 4406 0
293 383 4405 0
c ((SATLiteral(323) + SATLiteral(368) - aux1056)<=0)
-368 -4408 0
-323 -4408 0
-323 -368 -4409 0
c (0<=(SATLiteral(323) + SATLiteral(368) - aux1056))
368 4409 0
323 4409 0
323 368 4408 0
c ((SATLiteral(338) + SATLiteral(353) - aux1057)<=0)
-353 -4411 0
-338 -4411 0
-338 -353 -4412 0
c (0<=(SATLiteral(338) + SATLiteral(353) - aux1057))
353 4412 0
338 4412 0
338 353 4411 0
c ((SATLiteral(308) + aux1057 - aux1058)<=0)
4411 -4414 0
4412 -4415 0
-308 -4414 0
-308 4411 -4415 0
-308 4412 -4417 0
c (0<=(SATLiteral(308) + aux1057 - aux1058))
-4412 4417 0
-4411 4415 0
308 4417 0
308 -4412 4415 0
308 -4411 4414 0
c ((aux1054 + aux1056 - aux1059)<=0)
4408 -4419 0
4409 -4420 0
4402 -4419 0
4402 4408 -4420 0
4402 4409 -4422 0
4403 -4420 0
4403 4408 -4422 0
4403 4409 -4424 0
c (0<=(aux1054 + aux1056 - aux1059))
-4409 4424 0
-4408 4422 0
-4403 4424 0
-4403 -4409 4422 0
-4403 -4408 4420 0
-4402 4422 0
-4402 -4409 4420 0
-4402 -4408 4419 0
c ((SATLiteral(280) + SATLiteral(396) - aux1060)<=0)
-396 -4426 0
-280 -4426 0
-280 -396 -4427 0
c (0<=(SATLiteral(280) + SATLiteral(396) - aux1060))
396 4427 0
280 4427 0
280 396 4426 0
c ((SATLiteral(295) + SATLiteral(385) - aux1061)<=0)
-385 -4429 0
-295 -4429 0
-295 -385 -4430 0
c (0<=(SATLiteral(295) + SATLiteral(385) - aux1061))
385 4430 0
295 4430 0
295 385 4429 0
c ((SATLiteral(325) + SATLiteral(370) - aux1062)<=0)
-370 -4432 0
-325 -4432 0
-325 -370 -4433 0
c (0<=(SATLiteral(325) + SATLiteral(370) - aux1062))
370 4433 0
325 4433 0
325 370 4432 0
c ((SATLiteral(340) + SATLiteral(355) - aux1063)<=0)
-355 -4435 0
-340 -4435 0
-340 -355 -4436 0
c (0<=(SATLiteral(340) + SATLiteral(355) - aux1063))
355 4436 0
340 4436 0
340 355 4435 0
c ((SATLiteral(310) + aux1063 - aux1064)<=0)
4435 -4438 0
4436 -4439 0
-310 -4438 0
-310 4435 -4439 0
-310 4436 -4441 0
c (0<=(SATLiteral(310) + aux1063 - aux1064))
-4436 4441 0
-4435 4439 0
310 4441 0
310 -4436 4439 0
310 -4435 4438 0
c ((aux1060 + aux1062 - aux1065)<=0)
4432 -4443 0
4433 -4444 0
4426 -4443 0
4426 4432 -4444 0
4426 4433 -4446 0
4427 -4444 0
4427 4432 -4446 0
4427 4433 -4448 0
c (0<=(aux1060 + aux1062 - aux1065))
-4433 4448 0
-4432 4446 0
-4427 4448 0
-4427 -4433 4446 0
-4427 -4432 4444 0
-4426 4446 0
-4426 -4433 4444 0
-4426 -4432 4443 0
c ((SATLiteral(282) + SATLiteral(397) - aux1066)<=0)
-397 -4450 0
-282 -4450 0
-282 -397 -4451 0
c (0<=(SATLiteral(282) + SATLiteral(397) - aux1066))
397 4451 0
282 4451 0
282 397 4450 0
c ((SATLiteral(297) + SATLiteral(387) - aux1067)<=0)
-387 -4453 0
-297 -4453 0
-297 -387 -4454 0
c (0<=(SATLiteral(297) + SATLiteral(387) - aux1067))
387 4454 0
297 4454 0
297 387 4453 0
c ((SATLiteral(327) + SATLiteral(372) - aux1068)<=0)
-372 -4456 0
-327 -4456 0
-327 -372 -4457 0
c (0<=(SATLiteral(327) + SATLiteral(372) - aux1068))
372 4457 0
327 4457 0
327 372 4456 0
c ((SATLiteral(342) + SATLiteral(357) - aux1069)<=0)
-357 -4459 0
-342 -4459 0
-342 -357 -4460 0
c (0<=(SATLiteral(342) + SATLiteral(357) - aux1069))
357 4460 0
342 4460 0
342 357 4459 0
c ((SATLiteral(312) + aux1069 - aux1070)<=0)
4459 -4462 0
4460 -4463 0
-312 -4462 0
-312 4459 -4463 0
-312 4460 -4465 0
c (0<=(SATLiteral(312) + aux1069 - aux1070))
-4460 4465 0
-4459 4463 0
312 4465 0
312 -4460 4463 0
312 -4459 4462 0
c ((aux1066 + aux1068 - aux1071)<=0)
4456 -4467 0
4457 -4468 0
4450 -4467 0
4450 4456 -4468 0
4450 4457 -4470 0
4451 -4468 0
4451 4456 -4470 0
4451 4457 -4472 0
c (0<=(aux1066 + aux1068 - aux1071))
-4457 4472 0
-4456 4470 0
-4451 4472 0
-4451 -4457 4470 0
-4451 -4456 4468 0
-4450 4470 0
-4450 -4457 4468 0
-4450 -4456 4467 0
c ((SATLiteral(284) + SATLiteral(398) - aux1072)<=0)
-398 -4474 0
-284 -4474 0
-284 -398 -4475 0
c (0<=(SATLiteral(284) + SATLiteral(398) - aux1072))
398 4475 0
284 4475 0
284 398 4474 0
c ((SATLiteral(299) + SATLiteral(389) - aux1073)<=0)
-389 -4477 0
-299 -4477 0
-299 -389 -4478 0
c (0<=(SATLiteral(299) + SATLiteral(389) - aux1073))
389 4478 0
299 4478 0
299 389 4477 0
c ((SATLiteral(329) + SATLiteral(374) - aux1074)<=0)
-374 -4480 0
-329 -4480 0
-329 -374 -4481 0
c (0<=(SATLiteral(329) + SATLiteral(374) - aux1074))
374 4481 0
329 4481 0
329 374 4480 0
c ((SATLiteral(344) + SATLiteral(359) - aux1075)<=0)
-359 -4483 0
-344 -4483 0
-344 -359 -4484 0
c (0<=(SATLiteral(344) + SATLiteral(359) - aux1075))
359 4484 0
344 4484 0
344 359 4483 0
c ((SATLiteral(314) + aux1075 - aux1076)<=0)
4483 -4486 0
4484 -4487 0
-314 -4486 0
-314 4483 -4487 0
-314 4484 -4489 0
c (0<=(SATLiteral(314) + aux1075 - aux1076))
-4484 4489 0
-4483 4487 0
314 4489 0
314 -4484 4487 0
314 -4483 4486 0
c ((aux1072 + aux1074 - aux1077)<=0)
4480 -4491 0
4481 -4492 0
4474 -4491 0
4474 4480 -4492 0
4474 4481 -4494 0
4475 -4492 0
4475 4480 -4494 0
4475 4481 -4496 0
c (0<=(aux1072 + aux1074 - aux1077))
-4481 4496 0
-4480 4494 0
-4475 4496 0
-4475 -4481 4494 0
-4475 -4480 4492 0
-4474 4494 0
-4474 -4481 4492 0
-4474 -4480 4491 0
c ((SATLiteral(286) + SATLiteral(399) - aux1078)<=0)
-399 -4498 0
-286 -4498 0
-286 -399 -4499 0
c (0<=(SATLiteral(286) + SATLiteral(399) - aux1078))
399 4499 0
286 4499 0
286 399 4498 0
c ((SATLiteral(301) + SATLiteral(391) - aux1079)<=0)
-391 -4501 0
-301 -4501 0
-301 -391 -4502 0
c (0<=(SATLiteral(301) + SATLiteral(391) - aux1079))
391 4502 0
301 4502 0
301 391 4501 0
c ((SATLiteral(331) + SATLiteral(376) - aux1080)<=0)
-376 -4504 0
-331 -4504 0
-331 -376 -4505 0
c (0<=(SATLiteral(331) + SATLiteral(376) - aux1080))
376 4505 0
331 4505 0
331 376 4504 0
c ((SATLiteral(346) + SATLiteral(361) - aux1081)<=0)
-361 -4507 0
-346 -4507 0
-346 -361 -4508 0
c (0<=(SATLiteral(346) + SATLiteral(361) - aux1081))
361 4508 0
346 4508 0
346 361 4507 0
c ((SATLiteral(316) + aux1081 - aux1082)<=0)
4507 -4510 0
4508 -4511 0
-316 -4510 0
-316 4507 -4511 0
-316 4508 -4513 0
c (0<=(SATLiteral(316) + aux1081 - aux1082))
-4508 4513 0
-4507 4511 0
316 4513 0
316 -4508 4511 0
316 -4507 4510 0
c ((aux1078 + aux1080 - aux1083)<=0)
4504 -4515 0
4505 -4516 0
4498 -4515 0
4498 4504 -4516 0
4498 4505 -4518 0
4499 -4516 0
4499 4504 -4518 0
4499 4505 -4520 0
c (0<=(aux1078 + aux1080 - aux1083))
-4505 4520 0
-4504 4518 0
-4499 4520 0
-4499 -4505 4518 0
-4499 -4504 4516 0
-4498 4518 0
-4498 -4505 4516 0
-4498 -4504 4515 0
c ((SATLiteral(-285) + SATLiteral(400) - aux1084)<=0)
-400 -4522 0
285 -4522 0
285 -400 -4523 0
c (0<=(SATLiteral(-285) + SATLiteral(400) - aux1084))
400 4523 0
-285 4523 0
-285 400 4522 0
c ((SATLiteral(-300) + SATLiteral(-390) - aux1085)<=0)
390 -4525 0
300 -4525 0
300 390 -4526 0
c (0<=(SATLiteral(-300) + SATLiteral(-390) - aux1085))
-390 4526 0
-300 4526 0
-300 -390 4525 0
c ((SATLiteral(-330) + SATLiteral(-375) - aux1086)<=0)
375 -4528 0
330 -4528 0
330 375 -4529 0
c (0<=(SATLiteral(-330) + SATLiteral(-375) - aux1086))
-375 4529 0
-330 4529 0
-330 -375 4528 0
c ((SATLiteral(-345) + SATLiteral(-360) - aux1087)<=0)
360 -4531 0
345 -4531 0
345 360 -4532 0
c (0<=(SATLiteral(-345) + SATLiteral(-360) - aux1087))
-360 4532 0
-345 4532 0
-345 -360 4531 0
c ((SATLiteral(-315) + aux1087 - aux1088)<=0)
4531 -4534 0
4532 -4535 0
315 -4534 0
315 4531 -4535 0
315 4532 -4537 0
c (0<=(SATLiteral(-315) + aux1087 - aux1088))
-4532 4537 0
-4531 4535 0
-315 4537 0
-315 -4532 4535 0
-315 -4531 4534 0
c ((aux1084 + aux1086 - aux1089)<=0)
4528 -4539 0
4529 -4540 0
4522 -4539 0
4522 4528 -4540 0
4522 4529 -4542 0
4523 -4540 0
4523 4528 -4542 0
4523 4529 -4544 0
c (0<=(aux1084 + aux1086 - aux1089))
-4529 4544 0
-4528 4542 0
-4523 4544 0
-4523 -4529 4542 0
-4523 -4528 4540 0
-4522 4542 0
-4522 -4529 4540 0
-4522 -4528 4539 0
c (( - aux1090 + SATLiteral(407) + SATLiteral(527))<=0)
-527 -4546 0
-407 -4546 0
-407 -527 -4547 0
c (0<=( - aux1090 + SATLiteral(407) + SATLiteral(527)))
527 4547 0
407 4547 0
407 527 4546 0
c (( - aux1091 + SATLiteral(422) + SATLiteral(512))<=0)
-512 -4549 0
-422 -4549 0
-422 -512 -4550 0
c (0<=( - aux1091 + SATLiteral(422) + SATLiteral(512)))
512 4550 0
422 4550 0
422 512 4549 0
c (( - aux1092 + SATLiteral(452) + SATLiteral(497))<=0)
-497 -4552 0
-452 -4552 0
-452 -497 -4553 0
c (0<=( - aux1092 + SATLiteral(452) + SATLiteral(497)))
497 4553 0
452 4553 0
452 497 4552 0
c (( - aux1093 + SATLiteral(467) + SATLiteral(482))<=0)
-482 -4555 0
-467 -4555 0
-467 -482 -4556 0
c (0<=( - aux1093 + SATLiteral(467) + SATLiteral(482)))
482 4556 0
467 4556 0
467 482 4555 0
c ((aux1093 - aux1094 + SATLiteral(437))<=0)
4555 -4558 0
4556 -4559 0
-437 -4558 0
-437 4555 -4559 0
-437 4556 -4561 0
c (0<=(aux1093 - aux1094 + SATLiteral(437)))
-4556 4561 0
-4555 4559 0
437 4561 0
437 -4556 4559 0
437 -4555 4558 0
c ((aux1090 + aux1092 - aux1095)<=0)
4552 -4563 0
4553 -4564 0
4546 -4563 0
4546 4552 -4564 0
4546 4553 -4566 0
4547 -4564 0
4547 4552 -4566 0
4547 4553 -4568 0
c (0<=(aux1090 + aux1092 - aux1095))
-4553 4568 0
-4552 4566 0
-4547 4568 0
-4547 -4553 4566 0
-4547 -4552 4564 0
-4546 4566 0
-4546 -4553 4564 0
-4546 -4552 4563 0
c (( - aux1096 + SATLiteral(409) + SATLiteral(529))<=0)
-529 -4570 0
-409 -4570 0
-409 -529 -4571 0
c (0<=( - aux1096 + SATLiteral(409) + SATLiteral(529)))
529 4571 0
409 4571 0
409 529 4570 0
c (( - aux1097 + SATLiteral(424) + SATLiteral(514))<=0)
-514 -4573 0
-424 -4573 0
-424 -514 -4574 0
c (0<=( - aux1097 + SATLiteral(424) + SATLiteral(514)))
514 4574 0
424 4574 0
424 514 4573 0
c (( - aux1098 + SATLiteral(454) + SATLiteral(499))<=0)
-499 -4576 0
-454 -4576 0
-454 -499 -4577 0
c (0<=( - aux1098 + SATLiteral(454) + SATLiteral(499)))
499 4577 0
454 4577 0
454 499 4576 0
c (( - aux1099 + SATLiteral(469) + SATLiteral(484))<=0)
-484 -4579 0
-469 -4579 0
-469 -484 -4580 0
c (0<=( - aux1099 + SATLiteral(469) + SATLiteral(484)))
484 4580 0
469 4580 0
469 484 4579 0
c ((aux1099 - aux1100 + SATLiteral(439))<=0)
4579 -4582 0
4580 -4583 0
-439 -4582 0
-439 4579 -4583 0
-439 4580 -4585 0
c (0<=(aux1099 - aux1100 + SATLiteral(439)))
-4580 4585 0
-4579 4583 0
439 4585 0
439 -4580 4583 0
439 -4579 4582 0
c ((aux1096 + aux1098 - aux1101)<=0)
4576 -4587 0
4577 -4588 0
4570 -4587 0
4570 4576 -4588 0
4570 4577 -4590 0
4571 -4588 0
4571 4576 -4590 0
4571 4577 -4592 0
c (0<=(aux1096 + aux1098 - aux1101))
-4577 4592 0
-4576 4590 0
-4571 4592 0
-4571 -4577 4590 0
-4571 -4576 4588 0
-4570 4590 0
-4570 -4577 4588 0
-4570 -4576 4587 0
c (( - aux1102 + SATLiteral(411) + SATLiteral(531))<=0)
-531 -4594 0
-411 -4594 0
-411 -531 -4595 0
c (0<=( - aux1102 + SATLiteral(411) + SATLiteral(531)))
531 4595 0
411 4595 0
411 531 4594 0
c (( - aux1103 + SATLiteral(426) + SATLiteral(516))<=0)
-516 -4597 0
-426 -4597 0
-426 -516 -4598 0
c (0<=( - aux1103 + SATLiteral(426) + SATLiteral(516)))
516 4598 0
426 4598 0
426 516 4597 0
c (( - aux1104 + SATLiteral(456) + SATLiteral(501))<=0)
-501 -4600 0
-456 -4600 0
-456 -501 -4601 0
c (0<=( - aux1104 + SATLiteral(456) + SATLiteral(501)))
501 4601 0
456 4601 0
456 501 4600 0
c (( - aux1105 + SATLiteral(471) + SATLiteral(486))<=0)
-486 -4603 0
-471 -4603 0
-471 -486 -4604 0
c (0<=( - aux1105 + SATLiteral(471) + SATLiteral(486)))
486 4604 0
471 4604 0
471 486 4603 0
c ((aux1105 - aux1106 + SATLiteral(441))<=0)
4603 -4606 0
4604 -4607 0
-441 -4606 0
-441 4603 -4607 0
-441 4604 -4609 0
c (0<=(aux1105 - aux1106 + SATLiteral(441)))
-4604 4609 0
-4603 4607 0
441 4609 0
441 -4604 4607 0
441 -4603 4606 0
c ((aux1102 + aux1104 - aux1107)<=0)
4600 -4611 0
4601 -4612 0
4594 -4611 0
4594 4600 -4612 0
4594 4601 -4614 0
4595 -4612 0
4595 4600 -4614 0
4595 4601 -4616 0
c (0<=(aux1102 + aux1104 - aux1107))
-4601 4616 0
-4600 4614 0
-4595 4616 0
-4595 -4601 4614 0
-4595 -4600 4612 0
-4594 4614 0
-4594 -4601 4612 0
-4594 -4600 4611 0
c (( - aux1108 + SATLiteral(413) + SATLiteral(533))<=0)
-533 -4618 0
-413 -4618 0
-413 -533 -4619 0
c (0<=( - aux1108 + SATLiteral(413) + SATLiteral(533)))
533 4619 0
413 4619 0
413 533 4618 0
c (( - aux1109 + SATLiteral(428) + SATLiteral(518))<=0)
-518 -4621 0
-428 -4621 0
-428 -518 -4622 0
c (0<=( - aux1109 + SATLiteral(428) + SATLiteral(518)))
518 4622 0
428 4622 0
428 518 4621 0
c (( - aux1110 + SATLiteral(458) + SATLiteral(503))<=0)
-503 -4624 0
-458 -4624 0
-458 -503 -4625 0
c (0<=( - aux1110 + SATLiteral(458) + SATLiteral(503)))
503 4625 0
458 4625 0
458 503 4624 0
c (( - aux1111 + SATLiteral(473) + SATLiteral(488))<=0)
-488 -4627 0
-473 -4627 0
-473 -488 -4628 0
c (0<=( - aux1111 + SATLiteral(473) + SATLiteral(488)))
488 4628 0
473 4628 0
473 488 4627 0
c ((aux1111 - aux1112 + SATLiteral(443))<=0)
4627 -4630 0
4628 -4631 0
-443 -4630 0
-443 4627 -4631 0
-443 4628 -4633 0
c (0<=(aux1111 - aux1112 + SATLiteral(443)))
-4628 4633 0
-4627 4631 0
443 4633 0
443 -4628 4631 0
443 -4627 4630 0
c ((aux1108 + aux1110 - aux1113)<=0)
4624 -4635 0
4625 -4636 0
4618 -4635 0
4618 4624 -4636 0
4618 4625 -4638 0
4619 -4636 0
4619 4624 -4638 0
4619 4625 -4640 0
c (0<=(aux1108 + aux1110 - aux1113))
-4625 4640 0
-4624 4638 0
-4619 4640 0
-4619 -4625 4638 0
-4619 -4624 4636 0
-4618 4638 0
-4618 -4625 4636 0
-4618 -4624 4635 0
c (( - aux1114 + SATLiteral(415) + SATLiteral(535))<=0)
-535 -4642 0
-415 -4642 0
-415 -535 -4643 0
c (0<=( - aux1114 + SATLiteral(415) + SATLiteral(535)))
535 4643 0
415 4643 0
415 535 4642 0
c (( - aux1115 + SATLiteral(430) + SATLiteral(520))<=0)
-520 -4645 0
-430 -4645 0
-430 -520 -4646 0
c (0<=( - aux1115 + SATLiteral(430) + SATLiteral(520)))
520 4646 0
430 4646 0
430 520 4645 0
c (( - aux1116 + SATLiteral(460) + SATLiteral(505))<=0)
-505 -4648 0
-460 -4648 0
-460 -505 -4649 0
c (0<=( - aux1116 + SATLiteral(460) + SATLiteral(505)))
505 4649 0
460 4649 0
460 505 4648 0
c (( - aux1117 + SATLiteral(475) + SATLiteral(490))<=0)
-490 -4651 0
-475 -4651 0
-475 -490 -4652 0
c (0<=( - aux1117 + SATLiteral(475) + SATLiteral(490)))
490 4652 0
475 4652 0
475 490 4651 0
c ((aux1117 - aux1118 + SATLiteral(445))<=0)
4651 -4654 0
4652 -4655 0
-445 -4654 0
-445 4651 -4655 0
-445 4652 -4657 0
c (0<=(aux1117 - aux1118 + SATLiteral(445)))
-4652 4657 0
-4651 4655 0
445 4657 0
445 -4652 4655 0
445 -4651 4654 0
c ((aux1114 + aux1116 - aux1119)<=0)
4648 -4659 0
4649 -4660 0
4642 -4659 0
4642 4648 -4660 0
4642 4649 -4662 0
4643 -4660 0
4643 4648 -4662 0
4643 4649 -4664 0
c (0<=(aux1114 + aux1116 - aux1119))
-4649 4664 0
-4648 4662 0
-4643 4664 0
-4643 -4649 4662 0
-4643 -4648 4660 0
-4642 4662 0
-4642 -4649 4660 0
-4642 -4648 4659 0
c (( - aux1120 + SATLiteral(417) + SATLiteral(537))<=0)
-537 -4666 0
-417 -4666 0
-417 -537 -4667 0
c (0<=( - aux1120 + SATLiteral(417) + SATLiteral(537)))
537 4667 0
417 4667 0
417 537 4666 0
c (( - aux1121 + SATLiteral(432) + SATLiteral(522))<=0)
-522 -4669 0
-432 -4669 0
-432 -522 -4670 0
c (0<=( - aux1121 + SATLiteral(432) + SATLiteral(522)))
522 4670 0
432 4670 0
432 522 4669 0
c (( - aux1122 + SATLiteral(462) + SATLiteral(507))<=0)
-507 -4672 0
-462 -4672 0
-462 -507 -4673 0
c (0<=( - aux1122 + SATLiteral(462) + SATLiteral(507)))
507 4673 0
462 4673 0
462 507 4672 0
c (( - aux1123 + SATLiteral(477) + SATLiteral(492))<=0)
-492 -4675 0
-477 -4675 0
-477 -492 -4676 0
c (0<=( - aux1123 + SATLiteral(477) + SATLiteral(492)))
492 4676 0
477 4676 0
477 492 4675 0
c ((aux1123 - aux1124 + SATLiteral(447))<=0)
4675 -4678 0
4676 -4679 0
-447 -4678 0
-447 4675 -4679 0
-447 4676 -4681 0
c (0<=(aux1123 - aux1124 + SATLiteral(447)))
-4676 4681 0
-4675 4679 0
447 4681 0
447 -4676 4679 0
447 -4675 4678 0
c ((aux1120 + aux1122 - aux1125)<=0)
4672 -4683 0
4673 -4684 0
4666 -4683 0
4666 4672 -4684 0
4666 4673 -4686 0
4667 -4684 0
4667 4672 -4686 0
4667 4673 -4688 0
c (0<=(aux1120 + aux1122 - aux1125))
-4673 4688 0
-4672 4686 0
-4667 4688 0
-4667 -4673 4686 0
-4667 -4672 4684 0
-4666 4686 0
-4666 -4673 4684 0
-4666 -4672 4683 0
c (( - aux1126 + SATLiteral(419) + SATLiteral(539))<=0)
-539 -4690 0
-419 -4690 0
-419 -539 -4691 0
c (0<=( - aux1126 + SATLiteral(419) + SATLiteral(539)))
539 4691 0
419 4691 0
419 539 4690 0
c (( - aux1127 + SATLiteral(434) + SATLiteral(524))<=0)
-524 -4693 0
-434 -4693 0
-434 -524 -4694 0
c (0<=( - aux1127 + SATLiteral(434) + SATLiteral(524)))
524 4694 0
434 4694 0
434 524 4693 0
c (( - aux1128 + SATLiteral(464) + SATLiteral(509))<=0)
-509 -4696 0
-464 -4696 0
-464 -509 -4697 0
c (0<=( - aux1128 + SATLiteral(464) + SATLiteral(509)))
509 4697 0
464 4697 0
464 509 4696 0
c (( - aux1129 + SATLiteral(479) + SATLiteral(494))<=0)
-494 -4699 0
-479 -4699 0
-479 -494 -4700 0
c (0<=( - aux1129 + SATLiteral(479) + SATLiteral(494)))
494 4700 0
479 4700 0
479 494 4699 0
c ((aux1129 - aux1130 + SATLiteral(449))<=0)
4699 -4702 0
4700 -4703 0
-449 -4702 0
-449 4699 -4703 0
-449 4700 -4705 0
c (0<=(aux1129 - aux1130 + SATLiteral(449)))
-4700 4705 0
-4699 4703 0
449 4705 0
449 -4700 4703 0
449 -4699 4702 0
c ((aux1126 + aux1128 - aux1131)<=0)
4696 -4707 0
4697 -4708 0
4690 -4707 0
4690 4696 -4708 0
4690 4697 -4710 0
4691 -4708 0
4691 4696 -4710 0
4691 4697 -4712 0
c (0<=(aux1126 + aux1128 - aux1131))
-4697 4712 0
-4696 4710 0
-4691 4712 0
-4691 -4697 4710 0
-4691 -4696 4708 0
-4690 4710 0
-4690 -4697 4708 0
-4690 -4696 4707 0
c (( - aux1132 + SATLiteral(421) + SATLiteral(541))<=0)
-541 -4714 0
-421 -4714 0
-421 -541 -4715 0
c (0<=( - aux1132 + SATLiteral(421) + SATLiteral(541)))
541 4715 0
421 4715 0
421 541 4714 0
c (( - aux1133 + SATLiteral(436) + SATLiteral(526))<=0)
-526 -4717 0
-436 -4717 0
-436 -526 -4718 0
c (0<=( - aux1133 + SATLiteral(436) + SATLiteral(526)))
526 4718 0
436 4718 0
436 526 4717 0
c (( - aux1134 + SATLiteral(466) + SATLiteral(511))<=0)
-511 -4720 0
-466 -4720 0
-466 -511 -4721 0
c (0<=( - aux1134 + SATLiteral(466) + SATLiteral(511)))
511 4721 0
466 4721 0
466 511 4720 0
c (( - aux1135 + SATLiteral(481) + SATLiteral(496))<=0)
-496 -4723 0
-481 -4723 0
-481 -496 -4724 0
c (0<=( - aux1135 + SATLiteral(481) + SATLiteral(496)))
496 4724 0
481 4724 0
481 496 4723 0
c ((aux1135 - aux1136 + SATLiteral(451))<=0)
4723 -4726 0
4724 -4727 0
-451 -4726 0
-451 4723 -4727 0
-451 4724 -4729 0
c (0<=(aux1135 - aux1136 + SATLiteral(451)))
-4724 4729 0
-4723 4727 0
451 4729 0
451 -4724 4727 0
451 -4723 4726 0
c ((aux1132 + aux1134 - aux1137)<=0)
4720 -4731 0
4721 -4732 0
4714 -4731 0
4714 4720 -4732 0
4714 4721 -4734 0
4715 -4732 0
4715 4720 -4734 0
4715 4721 -4736 0
c (0<=(aux1132 + aux1134 - aux1137))
-4721 4736 0
-4720 4734 0
-4715 4736 0
-4715 -4721 4734 0
-4715 -4720 4732 0
-4714 4734 0
-4714 -4721 4732 0
-4714 -4720 4731 0
c (( - aux1138 + SATLiteral(-420) + SATLiteral(-540))<=0)
540 -4738 0
420 -4738 0
420 540 -4739 0
c (0<=( - aux1138 + SATLiteral(-420) + SATLiteral(-540)))
-540 4739 0
-420 4739 0
-420 -540 4738 0
c (( - aux1139 + SATLiteral(-435) + SATLiteral(-525))<=0)
525 -4741 0
435 -4741 0
435 525 -4742 0
c (0<=( - aux1139 + SATLiteral(-435) + SATLiteral(-525)))
-525 4742 0
-435 4742 0
-435 -525 4741 0
c (( - aux1140 + SATLiteral(-465) + SATLiteral(-510))<=0)
510 -4744 0
465 -4744 0
465 510 -4745 0
c (0<=( - aux1140 + SATLiteral(-465) + SATLiteral(-510)))
-510 4745 0
-465 4745 0
-465 -510 4744 0
c (( - aux1141 + SATLiteral(-480) + SATLiteral(-495))<=0)
495 -4747 0
480 -4747 0
480 495 -4748 0
c (0<=( - aux1141 + SATLiteral(-480) + SATLiteral(-495)))
-495 4748 0
-480 4748 0
-480 -495 4747 0
c ((aux1141 - aux1142 + SATLiteral(-450))<=0)
4747 -4750 0
4748 -4751 0
450 -4750 0
450 4747 -4751 0
450 4748 -4753 0
c (0<=(aux1141 - aux1142 + SATLiteral(-450)))
-4748 4753 0
-4747 4751 0
-450 4753 0
-450 -4748 4751 0
-450 -4747 4750 0
c ((aux1138 + aux1140 - aux1143)<=0)
4744 -4755 0
4745 -4756 0
4738 -4755 0
4738 4744 -4756 0
4738 4745 -4758 0
4739 -4756 0
4739 4744 -4758 0
4739 4745 -4760 0
c (0<=(aux1138 + aux1140 - aux1143))
-4745 4760 0
-4744 4758 0
-4739 4760 0
-4739 -4745 4758 0
-4739 -4744 4756 0
-4738 4758 0
-4738 -4745 4756 0
-4738 -4744 4755 0
c (( - aux1144 + SATLiteral(542) + SATLiteral(662))<=0)
-662 -4762 0
-542 -4762 0
-542 -662 -4763 0
c (0<=( - aux1144 + SATLiteral(542) + SATLiteral(662)))
662 4763 0
542 4763 0
542 662 4762 0
c (( - aux1145 + SATLiteral(557) + SATLiteral(647))<=0)
-647 -4765 0
-557 -4765 0
-557 -647 -4766 0
c (0<=( - aux1145 + SATLiteral(557) + SATLiteral(647)))
647 4766 0
557 4766 0
557 647 4765 0
c (( - aux1146 + SATLiteral(587) + SATLiteral(632))<=0)
-632 -4768 0
-587 -4768 0
-587 -632 -4769 0
c (0<=( - aux1146 + SATLiteral(587) + SATLiteral(632)))
632 4769 0
587 4769 0
587 632 4768 0
c (( - aux1147 + SATLiteral(602) + SATLiteral(617))<=0)
-617 -4771 0
-602 -4771 0
-602 -617 -4772 0
c (0<=( - aux1147 + SATLiteral(602) + SATLiteral(617)))
617 4772 0
602 4772 0
602 617 4771 0
c ((aux1147 - aux1148 + SATLiteral(572))<=0)
4771 -4774 0
4772 -4775 0
-572 -4774 0
-572 4771 -4775 0
-572 4772 -4777 0
c (0<=(aux1147 - aux1148 + SATLiteral(572)))
-4772 4777 0
-4771 4775 0
572 4777 0
572 -4772 4775 0
572 -4771 4774 0
c ((aux1144 + aux1146 - aux1149)<=0)
4768 -4779 0
4769 -4780 0
4762 -4779 0
4762 4768 -4780 0
4762 4769 -4782 0
4763 -4780 0
4763 4768 -4782 0
4763 4769 -4784 0
c (0<=(aux1144 + aux1146 - aux1149))
-4769 4784 0
-4768 4782 0
-4763 4784 0
-4763 -4769 4782 0
-4763 -4768 4780 0
-4762 4782 0
-4762 -4769 4780 0
-4762 -4768 4779 0
c (( - aux1150 + SATLiteral(544) + SATLiteral(664))<=0)
-664 -4786 0
-544 -4786 0
-544 -664 -4787 0
c (0<=( - aux1150 + SATLiteral(544) + SATLiteral(664)))
664 4787 0
544 4787 0
544 664 4786 0
c (( - aux1151 + SATLiteral(559) + SATLiteral(649))<=0)
-649 -4789 0
-559 -4789 0
-559 -649 -4790 0
c (0<=( - aux1151 + SATLiteral(559) + SATLiteral(649)))
649 4790 0
559 4790 0
559 649 4789 0
c (( - aux1152 + SATLiteral(589) + SATLiteral(634))<=0)
-634 -4792 0
-589 -4792 0
-589 -634 -4793 0
c (0<=( - aux1152 + SATLiteral(589) + SATLiteral(634)))
634 4793 0
589 4793 0
589 634 4792 0
c (( - aux1153 + SATLiteral(604) + SATLiteral(619))<=0)
-619 -4795 0
-604 -4795 0
-604 -619 -4796 0
c (0<=( - aux1153 + SATLiteral(604) + SATLiteral(619)))
619 4796 0
604 4796 0
604 619 4795 0
c ((aux1153 - aux1154 + SATLiteral(574))<=0)
4795 -4798 0
4796 -4799 0
-574 -4798 0
-574 4795 -4799 0
-574 4796 -4801 0
c (0<=(aux1153 - aux1154 + SATLiteral(574)))
-4796 4801 0
-4795 4799 0
574 4801 0
574 -4796 4799 0
574 -4795 4798 0
c ((aux1150 + aux1152 - aux1155)<=0)
4792 -4803 0
4793 -4804 0
4786 -4803 0
4786 4792 -4804 0
4786 4793 -4806 0
4787 -4804 0
4787 4792 -4806 0
4787 4793 -4808 0
c (0<=(aux1150 + aux1152 - aux1155))
-4793 4808 0
-4792 4806 0
-4787 4808 0
-4787 -4793 4806 0
-4787 -4792 4804 0
-4786 4806 0
-4786 -4793 4804 0
-4786 -4792 4803 0
c (( - aux1156 + SATLiteral(546) + SATLiteral(666))<=0)
-666 -4810 0
-546 -4810 0
-546 -666 -4811 0
c (0<=( - aux1156 + SATLiteral(546) + SATLiteral(666)))
666 4811 0
546 4811 0
546 666 4810 0
c (( - aux1157 + SATLiteral(561) + SATLiteral(651))<=0)
-651 -4813 0
-561 -4813 0
-561 -651 -4814 0
c (0<=( - aux1157 + SATLiteral(561) + SATLiteral(651)))
651 4814 0
561 4814 0
561 651 4813 0
c (( - aux1158 + SATLiteral(591) + SATLiteral(636))<=0)
-636 -4816 0
-591 -4816 0
-591 -636 -4817 0
c (0<=( - aux1158 + SATLiteral(591) + SATLiteral(636)))
636 4817 0
591 4817 0
591 636 4816 0
c (( - aux1159 + SATLiteral(606) + SATLiteral(621))<=0)
-621 -4819 0
-606 -4819 0
-606 -621 -4820 0
c (0<=( - aux1159 + SATLiteral(606) + SATLiteral(621)))
621 4820 0
606 4820 0
606 621 4819 0
c ((aux1159 - aux1160 + SATLiteral(576))<=0)
4819 -4822 0
4820 -4823 0
-576 -4822 0
-576 4819 -4823 0
-576 4820 -4825 0
c (0<=(aux1159 - aux1160 + SATLiteral(576)))
-4820 4825 0
-4819 4823 0
576 4825 0
576 -4820 4823 0
576 -4819 4822 0
c ((aux1156 + aux1158 - aux1161)<=0)
4816 -4827 0
4817 -4828 0
4810 -4827 0
4810 4816 -4828 0
4810 4817 -4830 0
4811 -4828 0
4811 4816 -4830 0
4811 4817 -4832 0
c (0<=(aux1156 + aux1158 - aux1161))
-4817 4832 0
-4816 4830 0
-4811 4832 0
-4811 -4817 4830 0
-4811 -4816 4828 0
-4810 4830 0
-4810 -4817 4828 0
-4810 -4816 4827 0
c (( - aux1162 + SATLiteral(548) + SATLiteral(668))<=0)
-668 -4834 0
-548 -4834 0
-548 -668 -4835 0
c (0<=( - aux1162 + SATLiteral(548) + SATLiteral(668)))
668 4835 0
548 4835 0
548 668 4834 0
c (( - aux1163 + SATLiteral(563) + SATLiteral(653))<=0)
-653 -4837 0
-563 -4837 0
-563 -653 -4838 0
c (0<=( - aux1163 + SATLiteral(563) + SATLiteral(653)))
653 4838 0
563 4838 0
563 653 4837 0
c (( - aux1164 + SATLiteral(593) + SATLiteral(638))<=0)
-638 -4840 0
-593 -4840 0
-593 -638 -4841 0
c (0<=( - aux1164 + SATLiteral(593) + SATLiteral(638)))
638 4841 0
593 4841 0
593 638 4840 0
c (( - aux1165 + SATLiteral(608) + SATLiteral(623))<=0)
-623 -4843 0
-608 -4843 0
-608 -623 -4844 0
c (0<=( - aux1165 + SATLiteral(608) + SATLiteral(623)))
623 4844 0
608 4844 0
608 623 4843 0
c ((aux1165 - aux1166 + SATLiteral(578))<=0)
4843 -4846 0
4844 -4847 0
-578 -4846 0
-578 4843 -4847 0
-578 4844 -4849 0
c (0<=(aux1165 - aux1166 + SATLiteral(578)))
-4844 4849 0
-4843 4847 0
578 4849 0
578 -4844 4847 0
578 -4843 4846 0
c ((aux1162 + aux1164 - aux1167)<=0)
4840 -4851 0
4841 -4852 0
4834 -4851 0
4834 4840 -4852 0
4834 4841 -4854 0
4835 -4852 0
4835 4840 -4854 0
4835 4841 -4856 0
c (0<=(aux1162 + aux1164 - aux1167))
-4841 4856 0
-4840 4854 0
-4835 4856 0
-4835 -4841 4854 0
-4835 -4840 4852 0
-4834 4854 0
-4834 -4841 4852 0
-4834 -4840 4851 0
c (( - aux1168 + SATLiteral(550) + SATLiteral(670))<=0)
-670 -4858 0
-550 -4858 0
-550 -670 -4859 0
c (0<=( - aux1168 + SATLiteral(550) + SATLiteral(670)))
670 4859 0
550 4859 0
550 670 4858 0
c (( - aux1169 + SATLiteral(565) + SATLiteral(655))<=0)
-655 -4861 0
-565 -4861 0
-565 -655 -4862 0
c (0<=( - aux1169 + SATLiteral(565) + SATLiteral(655)))
655 4862 0
565 4862 0
565 655 4861 0
c (( - aux1170 + SATLiteral(595) + SATLiteral(640))<=0)
-640 -4864 0
-595 -4864 0
-595 -640 -4865 0
c (0<=( - aux1170 + SATLiteral(595) + SATLiteral(640)))
640 4865 0
595 4865 0
595 640 4864 0
c (( - aux1171 + SATLiteral(610) + SATLiteral(625))<=0)
-625 -4867 0
-610 -4867 0
-610 -625 -4868 0
c (0<=( - aux1171 + SATLiteral(610) + SATLiteral(625)))
625 4868 0
610 4868 0
610 625 4867 0
c ((aux1171 - aux1172 + SATLiteral(580))<=0)
4867 -4870 0
4868 -4871 0
-580 -4870 0
-580 4867 -4871 0
-580 4868 -4873 0
c (0<=(aux1171 - aux1172 + SATLiteral(580)))
-4868 4873 0
-4867 4871 0
580 4873 0
580 -4868 4871 0
580 -4867 4870 0
c ((aux1168 + aux1170 - aux1173)<=0)
4864 -4875 0
4865 -4876 0
4858 -4875 0
4858 4864 -4876 0
4858 4865 -4878 0
4859 -4876 0
4859 4864 -4878 0
4859 4865 -4880 0
c (0<=(aux1168 + aux1170 - aux1173))
-4865 4880 0
-4864 4878 0
-4859 4880 0
-4859 -4865 4878 0
-4859 -4864 4876 0
-4858 4878 0
-4858 -4865 4876 0
-4858 -4864 4875 0
c (( - aux1174 + SATLiteral(552) + SATLiteral(672))<=0)
-672 -4882 0
-552 -4882 0
-552 -672 -4883 0
c (0<=( - aux1174 + SATLiteral(552) + SATLiteral(672)))
672 4883 0
552 4883 0
552 672 4882 0
c (( - aux1175 + SATLiteral(567) + SATLiteral(657))<=0)
-657 -4885 0
-567 -4885 0
-567 -657 -4886 0
c (0<=( - aux1175 + SATLiteral(567) + SATLiteral(657)))
657 4886 0
567 4886 0
567 657 4885 0
c (( - aux1176 + SATLiteral(597) + SATLiteral(642))<=0)
-642 -4888 0
-597 -4888 0
-597 -642 -4889 0
c (0<=( - aux1176 + SATLiteral(597) + SATLiteral(642)))
642 4889 0
597 4889 0
597 642 4888 0
c (( - aux1177 + SATLiteral(612) + SATLiteral(627))<=0)
-627 -4891 0
-612 -4891 0
-612 -627 -4892 0
c (0<=( - aux1177 + SATLiteral(612) + SATLiteral(627)))
627 4892 0
612 4892 0
612 627 4891 0
c ((aux1177 - aux1178 + SATLiteral(582))<=0)
4891 -4894 0
4892 -4895 0
-582 -4894 0
-582 4891 -4895 0
-582 4892 -4897 0
c (0<=(aux1177 - aux1178 + SATLiteral(582)))
-4892 4897 0
-4891 4895 0
582 4897 0
582 -4892 4895 0
582 -4891 4894 0
c ((aux1174 + aux1176 - aux1179)<=0)
4888 -4899 0
4889 -4900 0
4882 -4899 0
4882 4888 -4900 0
4882 4889 -4902 0
4883 -4900 0
4883 4888 -4902 0
4883 4889 -4904 0
c (0<=(aux1174 + aux1176 - aux1179))
-4889 4904 0
-4888 4902 0
-4883 4904 0
-4883 -4889 4902 0
-4883 -4888 4900 0
-4882 4902 0
-4882 -4889 4900 0
-4882 -4888 4899 0
c (( - aux1180 + SATLiteral(554) + SATLiteral(674))<=0)
-674 -4906 0
-554 -4906 0
-554 -674 -4907 0
c (0<=( - aux1180 + SATLiteral(554) + SATLiteral(674)))
674 4907 0
554 4907 0
554 674 4906 0
c (( - aux1181 + SATLiteral(569) + SATLiteral(659))<=0)
-659 -4909 0
-569 -4909 0
-569 -659 -4910 0
c (0<=( - aux1181 + SATLiteral(569) + SATLiteral(659)))
659 4910 0
569 4910 0
569 659 4909 0
c (( - aux1182 + SATLiteral(599) + SATLiteral(644))<=0)
-644 -4912 0
-599 -4912 0
-599 -644 -4913 0
c (0<=( - aux1182 + SATLiteral(599) + SATLiteral(644)))
644 4913 0
599 4913 0
599 644 4912 0
c (( - aux1183 + SATLiteral(614) + SATLiteral(629))<=0)
-629 -4915 0
-614 -4915 0
-614 -629 -4916 0
c (0<=( - aux1183 + SATLiteral(614) + SATLiteral(629)))
629 4916 0
614 4916 0
614 629 4915 0
c ((aux1183 - aux1184 + SATLiteral(584))<=0)
4915 -4918 0
4916 -4919 0
-584 -4918 0
-584 4915 -4919 0
-584 4916 -4921 0
c (0<=(aux1183 - aux1184 + SATLiteral(584)))
-4916 4921 0
-4915 4919 0
584 4921 0
584 -4916 4919 0
584 -4915 4918 0
c ((aux1180 + aux1182 - aux1185)<=0)
4912 -4923 0
4913 -4924 0
4906 -4923 0
4906 4912 -4924 0
4906 4913 -4926 0
4907 -4924 0
4907 4912 -4926 0
4907 4913 -4928 0
c (0<=(aux1180 + aux1182 - aux1185))
-4913 4928 0
-4912 4926 0
-4907 4928 0
-4907 -4913 4926 0
-4907 -4912 4924 0
-4906 4926 0
-4906 -4913 4924 0
-4906 -4912 4923 0
c (( - aux1186 + SATLiteral(556) + SATLiteral(676))<=0)
-676 -4930 0
-556 -4930 0
-556 -676 -4931 0
c (0<=( - aux1186 + SATLiteral(556) + SATLiteral(676)))
676 4931 0
556 4931 0
556 676 4930 0
c (( - aux1187 + SATLiteral(571) + SATLiteral(661))<=0)
-661 -4933 0
-571 -4933 0
-571 -661 -4934 0
c (0<=( - aux1187 + SATLiteral(571) + SATLiteral(661)))
661 4934 0
571 4934 0
571 661 4933 0
c (( - aux1188 + SATLiteral(601) + SATLiteral(646))<=0)
-646 -4936 0
-601 -4936 0
-601 -646 -4937 0
c (0<=( - aux1188 + SATLiteral(601) + SATLiteral(646)))
646 4937 0
601 4937 0
601 646 4936 0
c (( - aux1189 + SATLiteral(616) + SATLiteral(631))<=0)
-631 -4939 0
-616 -4939 0
-616 -631 -4940 0
c (0<=( - aux1189 + SATLiteral(616) + SATLiteral(631)))
631 4940 0
616 4940 0
616 631 4939 0
c ((aux1189 - aux1190 + SATLiteral(586))<=0)
4939 -4942 0
4940 -4943 0
-586 -4942 0
-586 4939 -4943 0
-586 4940 -4945 0
c (0<=(aux1189 - aux1190 + SATLiteral(586)))
-4940 4945 0
-4939 4943 0
586 4945 0
586 -4940 4943 0
586 -4939 4942 0
c ((aux1186 + aux1188 - aux1191)<=0)
4936 -4947 0
4937 -4948 0
4930 -4947 0
4930 4936 -4948 0
4930 4937 -4950 0
4931 -4948 0
4931 4936 -4950 0
4931 4937 -4952 0
c (0<=(aux1186 + aux1188 - aux1191))
-4937 4952 0
-4936 4950 0
-4931 4952 0
-4931 -4937 4950 0
-4931 -4936 4948 0
-4930 4950 0
-4930 -4937 4948 0
-4930 -4936 4947 0
c (( - aux1192 + SATLiteral(-555) + SATLiteral(-675))<=0)
675 -4954 0
555 -4954 0
555 675 -4955 0
c (0<=( - aux1192 + SATLiteral(-555) + SATLiteral(-675)))
-675 4955 0
-555 4955 0
-555 -675 4954 0
c (( - aux1193 + SATLiteral(-570) + SATLiteral(-660))<=0)
660 -4957 0
570 -4957 0
570 660 -4958 0
c (0<=( - aux1193 + SATLiteral(-570) + SATLiteral(-660)))
-660 4958 0
-570 4958 0
-570 -660 4957 0
c (( - aux1194 + SATLiteral(-600) + SATLiteral(-645))<=0)
645 -4960 0
600 -4960 0
600 645 -4961 0
c (0<=( - aux1194 + SATLiteral(-600) + SATLiteral(-645)))
-645 4961 0
-600 4961 0
-600 -645 4960 0
c (( - aux1195 + SATLiteral(-615) + SATLiteral(-630))<=0)
630 -4963 0
615 -4963 0
615 630 -4964 0
c (0<=( - aux1195 + SATLiteral(-615) + SATLiteral(-630)))
-630 4964 0
-615 4964 0
-615 -630 4963 0
c ((aux1195 - aux1196 + SATLiteral(-585))<=0)
4963 -4966 0
4964 -4967 0
585 -4966 0
585 4963 -4967 0
585 4964 -4969 0
c (0<=(aux1195 - aux1196 + SATLiteral(-585)))
-4964 4969 0
-4963 4967 0
-585 4969 0
-585 -4964 4967 0
-585 -4963 4966 0
c ((aux1192 + aux1194 - aux1197)<=0)
4960 -4971 0
4961 -4972 0
4954 -4971 0
4954 4960 -4972 0
4954 4961 -4974 0
4955 -4972 0
4955 4960 -4974 0
4955 4961 -4976 0
c (0<=(aux1192 + aux1194 - aux1197))
-4961 4976 0
-4960 4974 0
-4955 4976 0
-4955 -4961 4974 0
-4955 -4960 4972 0
-4954 4974 0
-4954 -4961 4972 0
-4954 -4960 4971 0
c ((SATLiteral(677) + SATLiteral(797) - aux1198)<=0)
-797 -4978 0
-677 -4978 0
-677 -797 -4979 0
c (0<=(SATLiteral(677) + SATLiteral(797) - aux1198))
797 4979 0
677 4979 0
677 797 4978 0
c ((SATLiteral(692) + SATLiteral(782) - aux1199)<=0)
-782 -4981 0
-692 -4981 0
-692 -782 -4982 0
c (0<=(SATLiteral(692) + SATLiteral(782) - aux1199))
782 4982 0
692 4982 0
692 782 4981 0
c ((SATLiteral(722) + SATLiteral(767) - aux1200)<=0)
-767 -4984 0
-722 -4984 0
-722 -767 -4985 0
c (0<=(SATLiteral(722) + SATLiteral(767) - aux1200))
767 4985 0
722 4985 0
722 767 4984 0
c ((SATLiteral(737) + SATLiteral(752) - aux1201)<=0)
-752 -4987 0
-737 -4987 0
-737 -752 -4988 0
c (0<=(SATLiteral(737) + SATLiteral(752) - aux1201))
752 4988 0
737 4988 0
737 752 4987 0
c ((SATLiteral(707) + aux1201 - aux1202)<=0)
4987 -4990 0
4988 -4991 0
-707 -4990 0
-707 4987 -4991 0
-707 4988 -4993 0
c (0<=(SATLiteral(707) + aux1201 - aux1202))
-4988 4993 0
-4987 4991 0
707 4993 0
707 -4988 4991 0
707 -4987 4990 0
c ((aux1198 + aux1200 - aux1203)<=0)
4984 -4995 0
4985 -4996 0
4978 -4995 0
4978 4984 -4996 0
4978 4985 -4998 0
4979 -4996 0
4979 4984 -4998 0
4979 4985 -5000 0
c (0<=(aux1198 + aux1200 - aux1203))
-4985 5000 0
-4984 4998 0
-4979 5000 0
-4979 -4985 4998 0
-4979 -4984 4996 0
-4978 4998 0
-4978 -4985 4996 0
-4978 -4984 4995 0
c ((SATLiteral(679) + SATLiteral(799) - aux1204)<=0)
-799 -5002 0
-679 -5002 0
-679 -799 -5003 0
c (0<=(SATLiteral(679) + SATLiteral(799) - aux1204))
799 5003 0
679 5003 0
679 799 5002 0
c ((SATLiteral(694) + SATLiteral(784) - aux1205)<=0)
-784 -5005 0
-694 -5005 0
-694 -784 -5006 0
c (0<=(SATLiteral(694) + SATLiteral(784) - aux1205))
784 5006 0
694 5006 0
694 784 5005 0
c ((SATLiteral(724) + SATLiteral(769) - aux1206)<=0)
-769 -5008 0
-724 -5008 0
-724 -769 -5009 0
c (0<=(SATLiteral(724) + SATLiteral(769) - aux1206))
769 5009 0
724 5009 0
724 769 5008 0
c ((SATLiteral(739) + SATLiteral(754) - aux1207)<=0)
-754 -5011 0
-739 -5011 0
-739 -754 -5012 0
c (0<=(SATLiteral(739) + SATLiteral(754) - aux1207))
754 5012 0
739 5012 0
739 754 5011 0
c ((SATLiteral(709) + aux1207 - aux1208)<=0)
5011 -5014 0
5012 -5015 0
-709 -5014 0
-709 5011 -5015 0
-709 5012 -5017 0
c (0<=(SATLiteral(709) + aux1207 - aux1208))
-5012 5017 0
-5011 5015 0
709 5017 0
709 -5012 5015 0
709 -5011 5014 0
c ((aux1204 + aux1206 - aux1209)<=0)
5008 -5019 0
5009 -5020 0
5002 -5019 0
5002 5008 -5020 0
5002 5009 -5022 0
5003 -5020 0
5003 5008 -5022 0
5003 5009 -5024 0
c (0<=(aux1204 + aux1206 - aux1209))
-5009 5024 0
-5008 5022 0
-5003 5024 0
-5003 -5009 5022 0
-5003 -5008 5020 0
-5002 5022 0
-5002 -5009 5020 0
-5002 -5008 5019 0
c ((SATLiteral(681) + SATLiteral(801) - aux1210)<=0)
-801 -5026 0
-681 -5026 0
-681 -801 -5027 0
c (0<=(SATLiteral(681) + SATLiteral(801) - aux1210))
801 5027 0
681 5027 0
681 801 5026 0
c ((SATLiteral(696) + SATLiteral(786) - aux1211)<=0)
-786 -5029 0
-696 -5029 0
-696 -786 -5030 0
c (0<=(SATLiteral(696) + SATLiteral(786) - aux1211))
786 5030 0
696 5030 0
696 786 5029 0
c ((SATLiteral(726) + SATLiteral(771) - aux1212)<=0)
-771 -5032 0
-726 -5032 0
-726 -771 -5033 0
c (0<=(SATLiteral(726) + SATLiteral(771) - aux1212))
771 5033 0
726 5033 0
726 771 5032 0
c ((SATLiteral(741) + SATLiteral(756) - aux1213)<=0)
-756 -5035 0
-741 -5035 0
-741 -756 -5036 0
c (0<=(SATLiteral(741) + SATLiteral(756) - aux1213))
756 5036 0
741 5036 0
741 756 5035 0
c ((SATLiteral(711) + aux1213 - aux1214)<=0)
5035 -5038 0
5036 -5039 0
-711 -5038 0
-711 5035 -5039 0
-711 5036 -5041 0
c (0<=(SATLiteral(711) + aux1213 - aux1214))
-5036 5041 0
-5035 5039 0
711 5041 0
711 -5036 5039 0
711 -5035 5038 0
c ((aux1210 + aux1212 - aux1215)<=0)
5032 -5043 0
5033 -5044 0
5026 -5043 0
5026 5032 -5044 0
5026 5033 -5046 0
5027 -5044 0
5027 5032 -5046 0
5027 5033 -5048 0
c (0<=(aux1210 + aux1212 - aux1215))
-5033 5048 0
-5032 5046 0
-5027 5048 0
-5027 -5033 5046 0
-5027 -5032 5044 0
-5026 5046 0
-5026 -5033 5044 0
-5026 -5032 5043 0
c ((SATLiteral(683) + SATLiteral(803) - aux1216)<=0)
-803 -5050 0
-683 -5050 0
-683 -803 -5051 0
c (0<=(SATLiteral(683) + SATLiteral(803) - aux1216))
803 5051 0
683 5051 0
683 803 5050 0
c ((SATLiteral(698) + SATLiteral(788) - aux1217)<=0)
-788 -5053 0
-698 -5053 0
-698 -788 -5054 0
c (0<=(SATLiteral(698) + SATLiteral(788) - aux1217))
788 5054 0
698 5054 0
698 788 5053 0
c ((SATLiteral(728) + SATLiteral(773) - aux1218)<=0)
-773 -5056 0
-728 -5056 0
-728 -773 -5057 0
c (0<=(SATLiteral(728) + SATLiteral(773) - aux1218))
773 5057 0
728 5057 0
728 773 5056 0
c ((SATLiteral(743) + SATLiteral(758) - aux1219)<=0)
-758 -5059 0
-743 -5059 0
-743 -758 -5060 0
c (0<=(SATLiteral(743) + SATLiteral(758) - aux1219))
758 5060 0
743 5060 0
743 758 5059 0
c ((SATLiteral(713) + aux1219 - aux1220)<=0)
5059 -5062 0
5060 -5063 0
-713 -5062 0
-713 5059 -5063 0
-713 5060 -5065 0
c (0<=(SATLiteral(713) + aux1219 - aux1220))
-5060 5065 0
-5059 5063 0
713 5065 0
713 -5060 5063 0
713 -5059 5062 0
c ((aux1216 + aux1218 - aux1221)<=0)
5056 -5067 0
5057 -5068 0
5050 -5067 0
5050 5056 -5068 0
5050 5057 -5070 0
5051 -5068 0
5051 5056 -5070 0
5051 5057 -5072 0
c (0<=(aux1216 + aux1218 - aux1221))
-5057 5072 0
-5056 5070 0
-5051 5072 0
-5051 -5057 5070 0
-5051 -5056 5068 0
-5050 5070 0
-5050 -5057 5068 0
-5050 -5056 5067 0
c ((SATLiteral(685) + SATLiteral(805) - aux1222)<=0)
-805 -5074 0
-685 -5074 0
-685 -805 -5075 0
c (0<=(SATLiteral(685) + SATLiteral(805) - aux1222))
805 5075 0
685 5075 0
685 805 5074 0
c ((SATLiteral(700) + SATLiteral(790) - aux1223)<=0)
-790 -5077 0
-700 -5077 0
-700 -790 -5078 0
c (0<=(SATLiteral(700) + SATLiteral(790) - aux1223))
790 5078 0
700 5078 0
700 790 5077 0
c ((SATLiteral(730) + SATLiteral(775) - aux1224)<=0)
-775 -5080 0
-730 -5080 0
-730 -775 -5081 0
c (0<=(SATLiteral(730) + SATLiteral(775) - aux1224))
775 5081 0
730 5081 0
730 775 5080 0
c ((SATLiteral(745) + SATLiteral(760) - aux1225)<=0)
-760 -5083 0
-745 -5083 0
-745 -760 -5084 0
c (0<=(SATLiteral(745) + SATLiteral(760) - aux1225))
760 5084 0
745 5084 0
745 760 5083 0
c ((SATLiteral(715) + aux1225 - aux1226)<=0)
5083 -5086 0
5084 -5087 0
-715 -5086 0
-715 5083 -5087 0
-715 5084 -5089 0
c (0<=(SATLiteral(715) + aux1225 - aux1226))
-5084 5089 0
-5083 5087 0
715 5089 0
715 -5084 5087 0
715 -5083 5086 0
c ((aux1222 + aux1224 - aux1227)<=0)
5080 -5091 0
5081 -5092 0
5074 -5091 0
5074 5080 -5092 0
5074 5081 -5094 0
5075 -5092 0
5075 5080 -5094 0
5075 5081 -5096 0
c (0<=(aux1222 + aux1224 - aux1227))
-5081 5096 0
-5080 5094 0
-5075 5096 0
-5075 -5081 5094 0
-5075 -5080 5092 0
-5074 5094 0
-5074 -5081 5092 0
-5074 -5080 5091 0
c ((SATLiteral(687) + SATLiteral(807) - aux1228)<=0)
-807 -5098 0
-687 -5098 0
-687 -807 -5099 0
c (0<=(SATLiteral(687) + SATLiteral(807) - aux1228))
807 5099 0
687 5099 0
687 807 5098 0
c ((SATLiteral(702) + SATLiteral(792) - aux1229)<=0)
-792 -5101 0
-702 -5101 0
-702 -792 -5102 0
c (0<=(SATLiteral(702) + SATLiteral(792) - aux1229))
792 5102 0
702 5102 0
702 792 5101 0
c ((SATLiteral(732) + SATLiteral(777) - aux1230)<=0)
-777 -5104 0
-732 -5104 0
-732 -777 -5105 0
c (0<=(SATLiteral(732) + SATLiteral(777) - aux1230))
777 5105 0
732 5105 0
732 777 5104 0
c ((SATLiteral(747) + SATLiteral(762) - aux1231)<=0)
-762 -5107 0
-747 -5107 0
-747 -762 -5108 0
c (0<=(SATLiteral(747) + SATLiteral(762) - aux1231))
762 5108 0
747 5108 0
747 762 5107 0
c ((SATLiteral(717) + aux1231 - aux1232)<=0)
5107 -5110 0
5108 -5111 0
-717 -5110 0
-717 5107 -5111 0
-717 5108 -5113 0
c (0<=(SATLiteral(717) + aux1231 - aux1232))
-5108 5113 0
-5107 5111 0
717 5113 0
717 -5108 5111 0
717 -5107 5110 0
c ((aux1228 + aux1230 - aux1233)<=0)
5104 -5115 0
5105 -5116 0
5098 -5115 0
5098 5104 -5116 0
5098 5105 -5118 0
5099 -5116 0
5099 5104 -5118 0
5099 5105 -5120 0
c (0<=(aux1228 + aux1230 - aux1233))
-5105 5120 0
-5104 5118 0
-5099 5120 0
-5099 -5105 5118 0
-5099 -5104 5116 0
-5098 5118 0
-5098 -5105 5116 0
-5098 -5104 5115 0
c ((SATLiteral(689) + SATLiteral(809) - aux1234)<=0)
-809 -5122 0
-689 -5122 0
-689 -809 -5123 0
c (0<=(SATLiteral(689) + SATLiteral(809) - aux1234))
809 5123 0
689 5123 0
689 809 5122 0
c ((SATLiteral(704) + SATLiteral(794) - aux1235)<=0)
-794 -5125 0
-704 -5125 0
-704 -794 -5126 0
c (0<=(SATLiteral(704) + SATLiteral(794) - aux1235))
794 5126 0
704 5126 0
704 794 5125 0
c ((SATLiteral(734) + SATLiteral(779) - aux1236)<=0)
-779 -5128 0
-734 -5128 0
-734 -779 -5129 0
c (0<=(SATLiteral(734) + SATLiteral(779) - aux1236))
779 5129 0
734 5129 0
734 779 5128 0
c ((SATLiteral(749) + SATLiteral(764) - aux1237)<=0)
-764 -5131 0
-749 -5131 0
-749 -764 -5132 0
c (0<=(SATLiteral(749) + SATLiteral(764) - aux1237))
764 5132 0
749 5132 0
749 764 5131 0
c ((SATLiteral(719) + aux1237 - aux1238)<=0)
5131 -5134 0
5132 -5135 0
-719 -5134 0
-719 5131 -5135 0
-719 5132 -5137 0
c (0<=(SATLiteral(719) + aux1237 - aux1238))
-5132 5137 0
-5131 5135 0
719 5137 0
719 -5132 5135 0
719 -5131 5134 0
c ((aux1234 + aux1236 - aux1239)<=0)
5128 -5139 0
5129 -5140 0
5122 -5139 0
5122 5128 -5140 0
5122 5129 -5142 0
5123 -5140 0
5123 5128 -5142 0
5123 5129 -5144 0
c (0<=(aux1234 + aux1236 - aux1239))
-5129 5144 0
-5128 5142 0
-5123 5144 0
-5123 -5129 5142 0
-5123 -5128 5140 0
-5122 5142 0
-5122 -5129 5140 0
-5122 -5128 5139 0
c ((SATLiteral(691) + SATLiteral(811) - aux1240)<=0)
-811 -5146 0
-691 -5146 0
-691 -811 -5147 0
c (0<=(SATLiteral(691) + SATLiteral(811) - aux1240))
811 5147 0
691 5147 0
691 811 5146 0
c ((SATLiteral(706) + SATLiteral(796) - aux1241)<=0)
-796 -5149 0
-706 -5149 0
-706 -796 -5150 0
c (0<=(SATLiteral(706) + SATLiteral(796) - aux1241))
796 5150 0
706 5150 0
706 796 5149 0
c ((SATLiteral(736) + SATLiteral(781) - aux1242)<=0)
-781 -5152 0
-736 -5152 0
-736 -781 -5153 0
c (0<=(SATLiteral(736) + SATLiteral(781) - aux1242))
781 5153 0
736 5153 0
736 781 5152 0
c ((SATLiteral(751) + SATLiteral(766) - aux1243)<=0)
-766 -5155 0
-751 -5155 0
-751 -766 -5156 0
c (0<=(SATLiteral(751) + SATLiteral(766) - aux1243))
766 5156 0
751 5156 0
751 766 5155 0
c ((SATLiteral(721) + aux1243 - aux1244)<=0)
5155 -5158 0
5156 -5159 0
-721 -5158 0
-721 5155 -5159 0
-721 5156 -5161 0
c (0<=(SATLiteral(721) + aux1243 - aux1244))
-5156 5161 0
-5155 5159 0
721 5161 0
721 -5156 5159 0
721 -5155 5158 0
c ((aux1240 + aux1242 - aux1245)<=0)
5152 -5163 0
5153 -5164 0
5146 -5163 0
5146 5152 -5164 0
5146 5153 -5166 0
5147 -5164 0
5147 5152 -5166 0
5147 5153 -5168 0
c (0<=(aux1240 + aux1242 - aux1245))
-5153 5168 0
-5152 5166 0
-5147 5168 0
-5147 -5153 5166 0
-5147 -5152 5164 0
-5146 5166 0
-5146 -5153 5164 0
-5146 -5152 5163 0
c ((SATLiteral(-690) + SATLiteral(-810) - aux1246)<=0)
810 -5170 0
690 -5170 0
690 810 -5171 0
c (0<=(SATLiteral(-690) + SATLiteral(-810) - aux1246))
-810 5171 0
-690 5171 0
-690 -810 5170 0
c ((SATLiteral(-705) + SATLiteral(-795) - aux1247)<=0)
795 -5173 0
705 -5173 0
705 795 -5174 0
c (0<=(SATLiteral(-705) + SATLiteral(-795) - aux1247))
-795 5174 0
-705 5174 0
-705 -795 5173 0
c ((SATLiteral(-735) + SATLiteral(-780) - aux1248)<=0)
780 -5176 0
735 -5176 0
735 780 -5177 0
c (0<=(SATLiteral(-735) + SATLiteral(-780) - aux1248))
-780 5177 0
-735 5177 0
-735 -780 5176 0
c ((SATLiteral(-750) + SATLiteral(-765) - aux1249)<=0)
765 -5179 0
750 -5179 0
750 765 -5180 0
c (0<=(SATLiteral(-750) + SATLiteral(-765) - aux1249))
-765 5180 0
-750 5180 0
-750 -765 5179 0
c ((SATLiteral(-720) + aux1249 - aux1250)<=0)
5179 -5182 0
5180 -5183 0
720 -5182 0
720 5179 -5183 0
720 5180 -5185 0
c (0<=(SATLiteral(-720) + aux1249 - aux1250))
-5180 5185 0
-5179 5183 0
-720 5185 0
-720 -5180 5183 0
-720 -5179 5182 0
c ((aux1246 + aux1248 - aux1251)<=0)
5176 -5187 0
5177 -5188 0
5170 -5187 0
5170 5176 -5188 0
5170 5177 -5190 0
5171 -5188 0
5171 5176 -5190 0
5171 5177 -5192 0
c (0<=(aux1246 + aux1248 - aux1251))
-5177 5192 0
-5176 5190 0
-5171 5192 0
-5171 -5177 5190 0
-5171 -5176 5188 0
-5170 5190 0
-5170 -5177 5188 0
-5170 -5176 5187 0
c (( - aux1252 + SATLiteral(812) + SATLiteral(932))<=0)
-932 -5194 0
-812 -5194 0
-812 -932 -5195 0
c (0<=( - aux1252 + SATLiteral(812) + SATLiteral(932)))
932 5195 0
812 5195 0
812 932 5194 0
c (( - aux1253 + SATLiteral(827) + SATLiteral(917))<=0)
-917 -5197 0
-827 -5197 0
-827 -917 -5198 0
c (0<=( - aux1253 + SATLiteral(827) + SATLiteral(917)))
917 5198 0
827 5198 0
827 917 5197 0
c (( - aux1254 + SATLiteral(857) + SATLiteral(902))<=0)
-902 -5200 0
-857 -5200 0
-857 -902 -5201 0
c (0<=( - aux1254 + SATLiteral(857) + SATLiteral(902)))
902 5201 0
857 5201 0
857 902 5200 0
c (( - aux1255 + SATLiteral(872) + SATLiteral(887))<=0)
-887 -5203 0
-872 -5203 0
-872 -887 -5204 0
c (0<=( - aux1255 + SATLiteral(872) + SATLiteral(887)))
887 5204 0
872 5204 0
872 887 5203 0
c ((aux1255 - aux1256 + SATLiteral(842))<=0)
5203 -5206 0
5204 -5207 0
-842 -5206 0
-842 5203 -5207 0
-842 5204 -5209 0
c (0<=(aux1255 - aux1256 + SATLiteral(842)))
-5204 5209 0
-5203 5207 0
842 5209 0
842 -5204 5207 0
842 -5203 5206 0
c ((aux1252 + aux1254 - aux1257)<=0)
5200 -5211 0
5201 -5212 0
5194 -5211 0
5194 5200 -5212 0
5194 5201 -5214 0
5195 -5212 0
5195 5200 -5214 0
5195 5201 -5216 0
c (0<=(aux1252 + aux1254 - aux1257))
-5201 5216 0
-5200 5214 0
-5195 5216 0
-5195 -5201 5214 0
-5195 -5200 5212 0
-5194 5214 0
-5194 -5201 5212 0
-5194 -5200 5211 0
c (( - aux1258 + SATLiteral(814) + SATLiteral(934))<=0)
-934 -5218 0
-814 -5218 0
-814 -934 -5219 0
c (0<=( - aux1258 + SATLiteral(814) + SATLiteral(934)))
934 5219 0
814 5219 0
814 934 5218 0
c (( - aux1259 + SATLiteral(829) + SATLiteral(919))<=0)
-919 -5221 0
-829 -5221 0
-829 -919 -5222 0
c (0<=( - aux1259 + SATLiteral(829) + SATLiteral(919)))
919 5222 0
829 5222 0
829 919 5221 0
c (( - aux1260 + SATLiteral(859) + SATLiteral(904))<=0)
-904 -5224 0
-859 -5224 0
-859 -904 -5225 0
c (0<=( - aux1260 + SATLiteral(859) + SATLiteral(904)))
904 5225 0
859 5225 0
859 904 5224 0
c (( - aux1261 + SATLiteral(874) + SATLiteral(889))<=0)
-889 -5227 0
-874 -5227 0
-874 -889 -5228 0
c (0<=( - aux1261 + SATLiteral(874) + SATLiteral(889)))
889 5228 0
874 5228 0
874 889 5227 0
c ((aux1261 - aux1262 + SATLiteral(844))<=0)
5227 -5230 0
5228 -5231 0
-844 -5230 0
-844 5227 -5231 0
-844 5228 -5233 0
c (0<=(aux1261 - aux1262 + SATLiteral(844)))
-5228 5233 0
-5227 5231 0
844 5233 0
844 -5228 5231 0
844 -5227 5230 0
c ((aux1258 + aux1260 - aux1263)<=0)
5224 -5235 0
5225 -5236 0
5218 -5235 0
5218 5224 -5236 0
5218 5225 -5238 0
5219 -5236 0
5219 5224 -5238 0
5219 5225 -5240 0
c (0<=(aux1258 + aux1260 - aux1263))
-5225 5240 0
-5224 5238 0
-5219 5240 0
-5219 -5225 5238 0
-5219 -5224 5236 0
-5218 5238 0
-5218 -5225 5236 0
-5218 -5224 5235 0
c (( - aux1264 + SATLiteral(816) + SATLiteral(936))<=0)
-936 -5242 0
-816 -5242 0
-816 -936 -5243 0
c (0<=( - aux1264 + SATLiteral(816) + SATLiteral(936)))
936 5243 0
816 5243 0
816 936 5242 0
c (( - aux1265 + SATLiteral(831) + SATLiteral(921))<=0)
-921 -5245 0
-831 -5245 0
-831 -921 -5246 0
c (0<=( - aux1265 + SATLiteral(831) + SATLiteral(921)))
921 5246 0
831 5246 0
831 921 5245 0
c (( - aux1266 + SATLiteral(861) + SATLiteral(906))<=0)
-906 -5248 0
-861 -5248 0
-861 -906 -5249 0
c (0<=( - aux1266 + SATLiteral(861) + SATLiteral(906)))
906 5249 0
861 5249 0
861 906 5248 0
c (( - aux1267 + SATLiteral(876) + SATLiteral(891))<=0)
-891 -5251 0
-876 -5251 0
-876 -891 -5252 0
c (0<=( - aux1267 + SATLiteral(876) + SATLiteral(891)))
891 5252 0
876 5252 0
876 891 5251 0
c ((aux1267 - aux1268 + SATLiteral(846))<=0)
5251 -5254 0
5252 -5255 0
-846 -5254 0
-846 5251 -5255 0
-846 5252 -5257 0
c (0<=(aux1267 - aux1268 + SATLiteral(846)))
-5252 5257 0
-5251 5255 0
846 5257 0
846 -5252 5255 0
846 -5251 5254 0
c ((aux1264 + aux1266 - aux1269)<=0)
5248 -5259 0
5249 -5260 0
5242 -5259 0
5242 5248 -5260 0
5242 5249 -5262 0
5243 -5260 0
5243 5248 -5262 0
5243 5249 -5264 0
c (0<=(aux1264 + aux1266 - aux1269))
-5249 5264 0
-5248 5262 0
-5243 5264 0
-5243 -5249 5262 0
-5243 -5248 5260 0
-5242 5262 0
-5242 -5249 5260 0
-5242 -5248 5259 0
c (( - aux1270 + SATLiteral(818) + SATLiteral(938))<=0)
-938 -5266 0
-818 -5266 0
-818 -938 -5267 0
c (0<=( - aux1270 + SATLiteral(818) + SATLiteral(938)))
938 5267 0
818 5267 0
818 938 5266 0
c (( - aux1271 + SATLiteral(833) + SATLiteral(923))<=0)
-923 -5269 0
-833 -5269 0
-833 -923 -5270 0
c (0<=( - aux1271 + SATLiteral(833) + SATLiteral(923)))
923 5270 0
833 5270 0
833 923 5269 0
c (( - aux1272 + SATLiteral(863) + SATLiteral(908))<=0)
-908 -5272 0
-863 -5272 0
-863 -908 -5273 0
c (0<=( - aux1272 + SATLiteral(863) + SATLiteral(908)))
908 5273 0
863 5273 0
863 908 5272 0
c (( - aux1273 + SATLiteral(878) + SATLiteral(893))<=0)
-893 -5275 0
-878 -5275 0
-878 -893 -5276 0
c (0<=( - aux1273 + SATLiteral(878) + SATLiteral(893)))
893 5276 0
878 5276 0
878 893 5275 0
c ((aux1273 - aux1274 + SATLiteral(848))<=0)
5275 -5278 0
5276 -5279 0
-848 -5278 0
-848 5275 -5279 0
-848 5276 -5281 0
c (0<=(aux1273 - aux1274 + SATLiteral(848)))
-5276 5281 0
-5275 5279 0
848 5281 0
848 -5276 5279 0
848 -5275 5278 0
c ((aux1270 + aux1272 - aux1275)<=0)
5272 -5283 0
5273 -5284 0
5266 -5283 0
5266 5272 -5284 0
5266 5273 -5286 0
5267 -5284 0
5267 5272 -5286 0
5267 5273 -5288 0
c (0<=(aux1270 + aux1272 - aux1275))
-5273 5288 0
-5272 5286 0
-5267 5288 0
-5267 -5273 5286 0
-5267 -5272 5284 0
-5266 5286 0
-5266 -5273 5284 0
-5266 -5272 5283 0
c (( - aux1276 + SATLiteral(820) + SATLiteral(940))<=0)
-940 -5290 0
-820 -5290 0
-820 -940 -5291 0
c (0<=( - aux1276 + SATLiteral(820) + SATLiteral(940)))
940 5291 0
820 5291 0
820 940 5290 0
c (( - aux1277 + SATLiteral(835) + SATLiteral(925))<=0)
-925 -5293 0
-835 -5293 0
-835 -925 -5294 0
c (0<=( - aux1277 + SATLiteral(835) + SATLiteral(925)))
925 5294 0
835 5294 0
835 925 5293 0
c (( - aux1278 + SATLiteral(865) + SATLiteral(910))<=0)
-910 -5296 0
-865 -5296 0
-865 -910 -5297 0
c (0<=( - aux1278 + SATLiteral(865) + SATLiteral(910)))
910 5297 0
865 5297 0
865 910 5296 0
c (( - aux1279 + SATLiteral(880) + SATLiteral(895))<=0)
-895 -5299 0
-880 -5299 0
-880 -895 -5300 0
c (0<=( - aux1279 + SATLiteral(880) + SATLiteral(895)))
895 5300 0
880 5300 0
880 895 5299 0
c ((aux1279 - aux1280 + SATLiteral(850))<=0)
5299 -5302 0
5300 -5303 0
-850 -5302 0
-850 5299 -5303 0
-850 5300 -5305 0
c (0<=(aux1279 - aux1280 + SATLiteral(850)))
-5300 5305 0
-5299 5303 0
850 5305 0
850 -5300 5303 0
850 -5299 5302 0
c ((aux1276 + aux1278 - aux1281)<=0)
5296 -5307 0
5297 -5308 0
5290 -5307 0
5290 5296 -5308 0
5290 5297 -5310 0
5291 -5308 0
5291 5296 -5310 0
5291 5297 -5312 0
c (0<=(aux1276 + aux1278 - aux1281))
-5297 5312 0
-5296 5310 0
-5291 5312 0
-5291 -5297 5310 0
-5291 -5296 5308 0
-5290 5310 0
-5290 -5297 5308 0
-5290 -5296 5307 0
c (( - aux1282 + SATLiteral(822) + SATLiteral(942))<=0)
-942 -5314 0
-822 -5314 0
-822 -942 -5315 0
c (0<=( - aux1282 + SATLiteral(822) + SATLiteral(942)))
942 5315 0
822 5315 0
822 942 5314 0
c (( - aux1283 + SATLiteral(837) + SATLiteral(927))<=0)
-927 -5317 0
-837 -5317 0
-837 -927 -5318 0
c (0<=( - aux1283 + SATLiteral(837) + SATLiteral(927)))
927 5318 0
837 5318 0
837 927 5317 0
c (( - aux1284 + SATLiteral(867) + SATLiteral(912))<=0)
-912 -5320 0
-867 -5320 0
-867 -912 -5321 0
c (0<=( - aux1284 + SATLiteral(867) + SATLiteral(912)))
912 5321 0
867 5321 0
867 912 5320 0
c (( - aux1285 + SATLiteral(882) + SATLiteral(897))<=0)
-897 -5323 0
-882 -5323 0
-882 -897 -5324 0
c (0<=( - aux1285 + SATLiteral(882) + SATLiteral(897)))
897 5324 0
882 5324 0
882 897 5323 0
c ((aux1285 - aux1286 + SATLiteral(852))<=0)
5323 -5326 0
5324 -5327 0
-852 -5326 0
-852 5323 -5327 0
-852 5324 -5329 0
c (0<=(aux1285 - aux1286 + SATLiteral(852)))
-5324 5329 0
-5323 5327 0
852 5329 0
852 -5324 5327 0
852 -5323 5326 0
c ((aux1282 + aux1284 - aux1287)<=0)
5320 -5331 0
5321 -5332 0
5314 -5331 0
5314 5320 -5332 0
5314 5321 -5334 0
5315 -5332 0
5315 5320 -5334 0
5315 5321 -5336 0
c (0<=(aux1282 + aux1284 - aux1287))
-5321 5336 0
-5320 5334 0
-5315 5336 0
-5315 -5321 5334 0
-5315 -5320 5332 0
-5314 5334 0
-5314 -5321 5332 0
-5314 -5320 5331 0
c (( - aux1288 + SATLiteral(824) + SATLiteral(944))<=0)
-944 -5338 0
-824 -5338 0
-824 -944 -5339 0
c (0<=( - aux1288 + SATLiteral(824) + SATLiteral(944)))
944 5339 0
824 5339 0
824 944 5338 0
c (( - aux1289 + SATLiteral(839) + SATLiteral(929))<=0)
-929 -5341 0
-839 -5341 0
-839 -929 -5342 0
c (0<=( - aux1289 + SATLiteral(839) + SATLiteral(929)))
929 5342 0
839 5342 0
839 929 5341 0
c (( - aux1290 + SATLiteral(869) + SATLiteral(914))<=0)
-914 -5344 0
-869 -5344 0
-869 -914 -5345 0
c (0<=( - aux1290 + SATLiteral(869) + SATLiteral(914)))
914 5345 0
869 5345 0
869 914 5344 0
c (( - aux1291 + SATLiteral(884) + SATLiteral(899))<=0)
-899 -5347 0
-884 -5347 0
-884 -899 -5348 0
c (0<=( - aux1291 + SATLiteral(884) + SATLiteral(899)))
899 5348 0
884 5348 0
884 899 5347 0
c ((aux1291 - aux1292 + SATLiteral(854))<=0)
5347 -5350 0
5348 -5351 0
-854 -5350 0
-854 5347 -5351 0
-854 5348 -5353 0
c (0<=(aux1291 - aux1292 + SATLiteral(854)))
-5348 5353 0
-5347 5351 0
854 5353 0
854 -5348 5351 0
854 -5347 5350 0
c ((aux1288 + aux1290 - aux1293)<=0)
5344 -5355 0
5345 -5356 0
5338 -5355 0
5338 5344 -5356 0
5338 5345 -5358 0
5339 -5356 0
5339 5344 -5358 0
5339 5345 -5360 0
c (0<=(aux1288 + aux1290 - aux1293))
-5345 5360 0
-5344 5358 0
-5339 5360 0
-5339 -5345 5358 0
-5339 -5344 5356 0
-5338 5358 0
-5338 -5345 5356 0
-5338 -5344 5355 0
c (( - aux1294 + SATLiteral(826) + SATLiteral(946))<=0)
-946 -5362 0
-826 -5362 0
-826 -946 -5363 0
c (0<=( - aux1294 + SATLiteral(826) + SATLiteral(946)))
946 5363 0
826 5363 0
826 946 5362 0
c (( - aux1295 + SATLiteral(841) + SATLiteral(931))<=0)
-931 -5365 0
-841 -5365 0
-841 -931 -5366 0
c (0<=( - aux1295 + SATLiteral(841) + SATLiteral(931)))
931 5366 0
841 5366 0
841 931 5365 0
c (( - aux1296 + SATLiteral(871) + SATLiteral(916))<=0)
-916 -5368 0
-871 -5368 0
-871 -916 -5369 0
c (0<=( - aux1296 + SATLiteral(871) + SATLiteral(916)))
916 5369 0
871 5369 0
871 916 5368 0
c (( - aux1297 + SATLiteral(886) + SATLiteral(901))<=0)
-901 -5371 0
-886 -5371 0
-886 -901 -5372 0
c (0<=( - aux1297 + SATLiteral(886) + SATLiteral(901)))
901 5372 0
886 5372 0
886 901 5371 0
c ((aux1297 - aux1298 + SATLiteral(856))<=0)
5371 -5374 0
5372 -5375 0
-856 -5374 0
-856 5371 -5375 0
-856 5372 -5377 0
c (0<=(aux1297 - aux1298 + SATLiteral(856)))
-5372 5377 0
-5371 5375 0
856 5377 0
856 -5372 5375 0
856 -5371 5374 0
c ((aux1294 + aux1296 - aux1299)<=0)
5368 -5379 0
5369 -5380 0
5362 -5379 0
5362 5368 -5380 0
5362 5369 -5382 0
5363 -5380 0
5363 5368 -5382 0
5363 5369 -5384 0
c (0<=(aux1294 + aux1296 - aux1299))
-5369 5384 0
-5368 5382 0
-5363 5384 0
-5363 -5369 5382 0
-5363 -5368 5380 0
-5362 5382 0
-5362 -5369 5380 0
-5362 -5368 5379 0
c (( - aux1300 + SATLiteral(-825) + SATLiteral(-945))<=0)
945 -5386 0
825 -5386 0
825 945 -5387 0
c (0<=( - aux1300 + SATLiteral(-825) + SATLiteral(-945)))
-945 5387 0
-825 5387 0
-825 -945 5386 0
c (( - aux1301 + SATLiteral(-840) + SATLiteral(-930))<=0)
930 -5389 0
840 -5389 0
840 930 -5390 0
c (0<=( - aux1301 + SATLiteral(-840) + SATLiteral(-930)))
-930 5390 0
-840 5390 0
-840 -930 5389 0
c (( - aux1302 + SATLiteral(-870) + SATLiteral(-915))<=0)
915 -5392 0
870 -5392 0
870 915 -5393 0
c (0<=( - aux1302 + SATLiteral(-870) + SATLiteral(-915)))
-915 5393 0
-870 5393 0
-870 -915 5392 0
c (( - aux1303 + SATLiteral(-885) + SATLiteral(-900))<=0)
900 -5395 0
885 -5395 0
885 900 -5396 0
c (0<=( - aux1303 + SATLiteral(-885) + SATLiteral(-900)))
-900 5396 0
-885 5396 0
-885 -900 5395 0
c ((aux1303 - aux1304 + SATLiteral(-855))<=0)
5395 -5398 0
5396 -5399 0
855 -5398 0
855 5395 -5399 0
855 5396 -5401 0
c (0<=(aux1303 - aux1304 + SATLiteral(-855)))
-5396 5401 0
-5395 5399 0
-855 5401 0
-855 -5396 5399 0
-855 -5395 5398 0
c ((aux1300 + aux1302 - aux1305)<=0)
5392 -5403 0
5393 -5404 0
5386 -5403 0
5386 5392 -5404 0
5386 5393 -5406 0
5387 -5404 0
5387 5392 -5406 0
5387 5393 -5408 0
c (0<=(aux1300 + aux1302 - aux1305))
-5393 5408 0
-5392 5406 0
-5387 5408 0
-5387 -5393 5406 0
-5387 -5392 5404 0
-5386 5406 0
-5386 -5393 5404 0
-5386 -5392 5403 0
c ((SATLiteral(947) + SATLiteral(1067) - aux1306)<=0)
-1067 -5410 0
-947 -5410 0
-947 -1067 -5411 0
c (0<=(SATLiteral(947) + SATLiteral(1067) - aux1306))
1067 5411 0
947 5411 0
947 1067 5410 0
c ((SATLiteral(962) + SATLiteral(1052) - aux1307)<=0)
-1052 -5413 0
-962 -5413 0
-962 -1052 -5414 0
c (0<=(SATLiteral(962) + SATLiteral(1052) - aux1307))
1052 5414 0
962 5414 0
962 1052 5413 0
c ((SATLiteral(992) + SATLiteral(1037) - aux1308)<=0)
-1037 -5416 0
-992 -5416 0
-992 -1037 -5417 0
c (0<=(SATLiteral(992) + SATLiteral(1037) - aux1308))
1037 5417 0
992 5417 0
992 1037 5416 0
c ((SATLiteral(1007) + SATLiteral(1022) - aux1309)<=0)
-1022 -5419 0
-1007 -5419 0
-1007 -1022 -5420 0
c (0<=(SATLiteral(1007) + SATLiteral(1022) - aux1309))
1022 5420 0
1007 5420 0
1007 1022 5419 0
c ((SATLiteral(977) + aux1309 - aux1310)<=0)
5419 -5422 0
5420 -5423 0
-977 -5422 0
-977 5419 -5423 0
-977 5420 -5425 0
c (0<=(SATLiteral(977) + aux1309 - aux1310))
-5420 5425 0
-5419 5423 0
977 5425 0
977 -5420 5423 0
977 -5419 5422 0
c ((aux1306 + aux1308 - aux1311)<=0)
5416 -5427 0
5417 -5428 0
5410 -5427 0
5410 5416 -5428 0
5410 5417 -5430 0
5411 -5428 0
5411 5416 -5430 0
5411 5417 -5432 0
c (0<=(aux1306 + aux1308 - aux1311))
-5417 5432 0
-5416 5430 0
-5411 5432 0
-5411 -5417 5430 0
-5411 -5416 5428 0
-5410 5430 0
-5410 -5417 5428 0
-5410 -5416 5427 0
c ((SATLiteral(949) + SATLiteral(1069) - aux1312)<=0)
-1069 -5434 0
-949 -5434 0
-949 -1069 -5435 0
c (0<=(SATLiteral(949) + SATLiteral(1069) - aux1312))
1069 5435 0
949 5435 0
949 1069 5434 0
c ((SATLiteral(964) + SATLiteral(1054) - aux1313)<=0)
-1054 -5437 0
-964 -5437 0
-964 -1054 -5438 0
c (0<=(SATLiteral(964) + SATLiteral(1054) - aux1313))
1054 5438 0
964 5438 0
964 1054 5437 0
c ((SATLiteral(994) + SATLiteral(1039) - aux1314)<=0)
-1039 -5440 0
-994 -5440 0
-994 -1039 -5441 0
c (0<=(SATLiteral(994) + SATLiteral(1039) - aux1314))
1039 5441 0
994 5441 0
994 1039 5440 0
c ((SATLiteral(1009) + SATLiteral(1024) - aux1315)<=0)
-1024 -5443 0
-1009 -5443 0
-1009 -1024 -5444 0
c (0<=(SATLiteral(1009) + SATLiteral(1024) - aux1315))
1024 5444 0
1009 5444 0
1009 1024 5443 0
c ((SATLiteral(979) + aux1315 - aux1316)<=0)
5443 -5446 0
5444 -5447 0
-979 -5446 0
-979 5443 -5447 0
-979 5444 -5449 0
c (0<=(SATLiteral(979) + aux1315 - aux1316))
-5444 5449 0
-5443 5447 0
979 5449 0
979 -5444 5447 0
979 -5443 5446 0
c ((aux1312 + aux1314 - aux1317)<=0)
5440 -5451 0
5441 -5452 0
5434 -5451 0
5434 5440 -5452 0
5434 5441 -5454 0
5435 -5452 0
5435 5440 -5454 0
5435 5441 -5456 0
c (0<=(aux1312 + aux1314 - aux1317))
-5441 5456 0
-5440 5454 0
-5435 5456 0
-5435 -5441 5454 0
-5435 -5440 5452 0
-5434 5454 0
-5434 -5441 5452 0
-5434 -5440 5451 0
c ((SATLiteral(951) + SATLiteral(1071) - aux1318)<=0)
-1071 -5458 0
-951 -5458 0
-951 -1071 -5459 0
c (0<=(SATLiteral(951) + SATLiteral(1071) - aux1318))
1071 5459 0
951 5459 0
951 1071 5458 0
c ((SATLiteral(966) + SATLiteral(1056) - aux1319)<=0)
-1056 -5461 0
-966 -5461 0
-966 -1056 -5462 0
c (0<=(SATLiteral(966) + SATLiteral(1056) - aux1319))
1056 5462 0
966 5462 0
966 1056 5461 0
c ((SATLiteral(996) + SATLiteral(1041) - aux1320)<=0)
-1041 -5464 0
-996 -5464 0
-996 -1041 -5465 0
c (0<=(SATLiteral(996) + SATLiteral(1041) - aux1320))
1041 5465 0
996 5465 0
996 1041 5464 0
c ((SATLiteral(1011) + SATLiteral(1026) - aux1321)<=0)
-1026 -5467 0
-1011 -5467 0
-1011 -1026 -5468 0
c (0<=(SATLiteral(1011) + SATLiteral(1026) - aux1321))
1026 5468 0
1011 5468 0
1011 1026 5467 0
c ((SATLiteral(981) + aux1321 - aux1322)<=0)
5467 -5470 0
5468 -5471 0
-981 -5470 0
-981 5467 -5471 0
-981 5468 -5473 0
c (0<=(SATLiteral(981) + aux1321 - aux1322))
-5468 5473 0
-5467 5471 0
981 5473 0
981 -5468 5471 0
981 -5467 5470 0
c ((aux1318 + aux1320 - aux1323)<=0)
5464 -5475 0
5465 -5476 0
5458 -5475 0
5458 5464 -5476 0
5458 5465 -5478 0
5459 -5476 0
5459 5464 -5478 0
5459 5465 -5480 0
c (0<=(aux1318 + aux1320 - aux1323))
-5465 5480 0
-5464 5478 0
-5459 5480 0
-5459 -5465 5478 0
-5459 -5464 5476 0
-5458 5478 0
-5458 -5465 5476 0
-5458 -5464 5475 0
c ((SATLiteral(953) + SATLiteral(1073) - aux1324)<=0)
-1073 -5482 0
-953 -5482 0
-953 -1073 -5483 0
c (0<=(SATLiteral(953) + SATLiteral(1073) - aux1324))
1073 5483 0
953 5483 0
953 1073 5482 0
c ((SATLiteral(968) + SATLiteral(1058) - aux1325)<=0)
-1058 -5485 0
-968 -5485 0
-968 -1058 -5486 0
c (0<=(SATLiteral(968) + SATLiteral(1058) - aux1325))
1058 5486 0
968 5486 0
968 1058 5485 0
c ((SATLiteral(998) + SATLiteral(1043) - aux1326)<=0)
-1043 -5488 0
-998 -5488 0
-998 -1043 -5489 0
c (0<=(SATLiteral(998) + SATLiteral(1043) - aux1326))
1043 5489 0
998 5489 0
998 1043 5488 0
c ((SATLiteral(1013) + SATLiteral(1028) - aux1327)<=0)
-1028 -5491 0
-1013 -5491 0
-1013 -1028 -5492 0
c (0<=(SATLiteral(1013) + SATLiteral(1028) - aux1327))
1028 5492 0
1013 5492 0
1013 1028 5491 0
c ((SATLiteral(983) + aux1327 - aux1328)<=0)
5491 -5494 0
5492 -5495 0
-983 -5494 0
-983 5491 -5495 0
-983 5492 -5497 0
c (0<=(SATLiteral(983) + aux1327 - aux1328))
-5492 5497 0
-5491 5495 0
983 5497 0
983 -5492 5495 0
983 -5491 5494 0
c ((aux1324 + aux1326 - aux1329)<=0)
5488 -5499 0
5489 -5500 0
5482 -5499 0
5482 5488 -5500 0
5482 5489 -5502 0
5483 -5500 0
5483 5488 -5502 0
5483 5489 -5504 0
c (0<=(aux1324 + aux1326 - aux1329))
-5489 5504 0
-5488 5502 0
-5483 5504 0
-5483 -5489 5502 0
-5483 -5488 5500 0
-5482 5502 0
-5482 -5489 5500 0
-5482 -5488 5499 0
c ((SATLiteral(955) + SATLiteral(1075) - aux1330)<=0)
-1075 -5506 0
-955 -5506 0
-955 -1075 -5507 0
c (0<=(SATLiteral(955) + SATLiteral(1075) - aux1330))
1075 5507 0
955 5507 0
955 1075 5506 0
c ((SATLiteral(970) + SATLiteral(1060) - aux1331)<=0)
-1060 -5509 0
-970 -5509 0
-970 -1060 -5510 0
c (0<=(SATLiteral(970) + SATLiteral(1060) - aux1331))
1060 5510 0
970 5510 0
970 1060 5509 0
c ((SATLiteral(1000) + SATLiteral(1045) - aux1332)<=0)
-1045 -5512 0
-1000 -5512 0
-1000 -1045 -5513 0
c (0<=(SATLiteral(1000) + SATLiteral(1045) - aux1332))
1045 5513 0
1000 5513 0
1000 1045 5512 0
c ((SATLiteral(1015) + SATLiteral(1030) - aux1333)<=0)
-1030 -5515 0
-1015 -5515 0
-1015 -1030 -5516 0
c (0<=(SATLiteral(1015) + SATLiteral(1030) - aux1333))
1030 5516 0
1015 5516 0
1015 1030 5515 0
c ((SATLiteral(985) + aux1333 - aux1334)<=0)
5515 -5518 0
5516 -5519 0
-985 -5518 0
-985 5515 -5519 0
-985 5516 -5521 0
c (0<=(SATLiteral(985) + aux1333 - aux1334))
-5516 5521 0
-5515 5519 0
985 5521 0
985 -5516 5519 0
985 -5515 5518 0
c ((aux1330 + aux1332 - aux1335)<=0)
5512 -5523 0
5513 -5524 0
5506 -5523 0
5506 5512 -5524 0
5506 5513 -5526 0
5507 -5524 0
5507 5512 -5526 0
5507 5513 -5528 0
c (0<=(aux1330 + aux1332 - aux1335))
-5513 5528 0
-5512 5526 0
-5507 5528 0
-5507 -5513 5526 0
-5507 -5512 5524 0
-5506 5526 0
-5506 -5513 5524 0
-5506 -5512 5523 0
c ((SATLiteral(957) + SATLiteral(1077) - aux1336)<=0)
-1077 -5530 0
-957 -5530 0
-957 -1077 -5531 0
c (0<=(SATLiteral(957) + SATLiteral(1077) - aux1336))
1077 5531 0
957 5531 0
957 1077 5530 0
c ((SATLiteral(972) + SATLiteral(1062) - aux1337)<=0)
-1062 -5533 0
-972 -5533 0
-972 -1062 -5534 0
c (0<=(SATLiteral(972) + SATLiteral(1062) - aux1337))
1062 5534 0
972 5534 0
972 1062 5533 0
c ((SATLiteral(1002) + SATLiteral(1047) - aux1338)<=0)
-1047 -5536 0
-1002 -5536 0
-1002 -1047 -5537 0
c (0<=(SATLiteral(1002) + SATLiteral(1047) - aux1338))
1047 5537 0
1002 5537 0
1002 1047 5536 0
c ((SATLiteral(1017) + SATLiteral(1032) - aux1339)<=0)
-1032 -5539 0
-1017 -5539 0
-1017 -1032 -5540 0
c (0<=(SATLiteral(1017) + SATLiteral(1032) - aux1339))
1032 5540 0
1017 5540 0
1017 1032 5539 0
c ((SATLiteral(987) + aux1339 - aux1340)<=0)
5539 -5542 0
5540 -5543 0
-987 -5542 0
-987 5539 -5543 0
-987 5540 -5545 0
c (0<=(SATLiteral(987) + aux1339 - aux1340))
-5540 5545 0
-5539 5543 0
987 5545 0
987 -5540 5543 0
987 -5539 5542 0
c ((aux1336 + aux1338 - aux1341)<=0)
5536 -5547 0
5537 -5548 0
5530 -5547 0
5530 5536 -5548 0
5530 5537 -5550 0
5531 -5548 0
5531 5536 -5550 0
5531 5537 -5552 0
c (0<=(aux1336 + aux1338 - aux1341))
-5537 5552 0
-5536 5550 0
-5531 5552 0
-5531 -5537 5550 0
-5531 -5536 5548 0
-5530 5550 0
-5530 -5537 5548 0
-5530 -5536 5547 0
c ((SATLiteral(959) + SATLiteral(1079) - aux1342)<=0)
-1079 -5554 0
-959 -5554 0
-959 -1079 -5555 0
c (0<=(SATLiteral(959) + SATLiteral(1079) - aux1342))
1079 5555 0
959 5555 0
959 1079 5554 0
c ((SATLiteral(974) + SATLiteral(1064) - aux1343)<=0)
-1064 -5557 0
-974 -5557 0
-974 -1064 -5558 0
c (0<=(SATLiteral(974) + SATLiteral(1064) - aux1343))
1064 5558 0
974 5558 0
974 1064 5557 0
c ((SATLiteral(1004) + SATLiteral(1049) - aux1344)<=0)
-1049 -5560 0
-1004 -5560 0
-1004 -1049 -5561 0
c (0<=(SATLiteral(1004) + SATLiteral(1049) - aux1344))
1049 5561 0
1004 5561 0
1004 1049 5560 0
c ((SATLiteral(1019) + SATLiteral(1034) - aux1345)<=0)
-1034 -5563 0
-1019 -5563 0
-1019 -1034 -5564 0
c (0<=(SATLiteral(1019) + SATLiteral(1034) - aux1345))
1034 5564 0
1019 5564 0
1019 1034 5563 0
c ((SATLiteral(989) + aux1345 - aux1346)<=0)
5563 -5566 0
5564 -5567 0
-989 -5566 0
-989 5563 -5567 0
-989 5564 -5569 0
c (0<=(SATLiteral(989) + aux1345 - aux1346))
-5564 5569 0
-5563 5567 0
989 5569 0
989 -5564 5567 0
989 -5563 5566 0
c ((aux1342 + aux1344 - aux1347)<=0)
5560 -5571 0
5561 -5572 0
5554 -5571 0
5554 5560 -5572 0
5554 5561 -5574 0
5555 -5572 0
5555 5560 -5574 0
5555 5561 -5576 0
c (0<=(aux1342 + aux1344 - aux1347))
-5561 5576 0
-5560 5574 0
-5555 5576 0
-5555 -5561 5574 0
-5555 -5560 5572 0
-5554 5574 0
-5554 -5561 5572 0
-5554 -5560 5571 0
c ((SATLiteral(961) + SATLiteral(1081) - aux1348)<=0)
-1081 -5578 0
-961 -5578 0
-961 -1081 -5579 0
c (0<=(SATLiteral(961) + SATLiteral(1081) - aux1348))
1081 5579 0
961 5579 0
961 1081 5578 0
c ((SATLiteral(976) + SATLiteral(1066) - aux1349)<=0)
-1066 -5581 0
-976 -5581 0
-976 -1066 -5582 0
c (0<=(SATLiteral(976) + SATLiteral(1066) - aux1349))
1066 5582 0
976 5582 0
976 1066 5581 0
c ((SATLiteral(1006) + SATLiteral(1051) - aux1350)<=0)
-1051 -5584 0
-1006 -5584 0
-1006 -1051 -5585 0
c (0<=(SATLiteral(1006) + SATLiteral(1051) - aux1350))
1051 5585 0
1006 5585 0
1006 1051 5584 0
c ((SATLiteral(1021) + SATLiteral(1036) - aux1351)<=0)
-1036 -5587 0
-1021 -5587 0
-1021 -1036 -5588 0
c (0<=(SATLiteral(1021) + SATLiteral(1036) - aux1351))
1036 5588 0
1021 5588 0
1021 1036 5587 0
c ((SATLiteral(991) + aux1351 - aux1352)<=0)
5587 -5590 0
5588 -5591 0
-991 -5590 0
-991 5587 -5591 0
-991 5588 -5593 0
c (0<=(SATLiteral(991) + aux1351 - aux1352))
-5588 5593 0
-5587 5591 0
991 5593 0
991 -5588 5591 0
991 -5587 5590 0
c ((aux1348 + aux1350 - aux1353)<=0)
5584 -5595 0
5585 -5596 0
5578 -5595 0
5578 5584 -5596 0
5578 5585 -5598 0
5579 -5596 0
5579 5584 -5598 0
5579 5585 -5600 0
c (0<=(aux1348 + aux1350 - aux1353))
-5585 5600 0
-5584 5598 0
-5579 5600 0
-5579 -5585 5598 0
-5579 -5584 5596 0
-5578 5598 0
-5578 -5585 5596 0
-5578 -5584 5595 0
c ((SATLiteral(-960) + SATLiteral(-1080) - aux1354)<=0)
1080 -5602 0
960 -5602 0
960 1080 -5603 0
c (0<=(SATLiteral(-960) + SATLiteral(-1080) - aux1354))
-1080 5603 0
-960 5603 0
-960 -1080 5602 0
c ((SATLiteral(-975) + SATLiteral(-1065) - aux1355)<=0)
1065 -5605 0
975 -5605 0
975 1065 -5606 0
c (0<=(SATLiteral(-975) + SATLiteral(-1065) - aux1355))
-1065 5606 0
-975 5606 0
-975 -1065 5605 0
c ((SATLiteral(-1005) + SATLiteral(-1050) - aux1356)<=0)
1050 -5608 0
1005 -5608 0
1005 1050 -5609 0
c (0<=(SATLiteral(-1005) + SATLiteral(-1050) - aux1356))
-1050 5609 0
-1005 5609 0
-1005 -1050 5608 0
c ((SATLiteral(-1020) + SATLiteral(-1035) - aux1357)<=0)
1035 -5611 0
1020 -5611 0
1020 1035 -5612 0
c (0<=(SATLiteral(-1020) + SATLiteral(-1035) - aux1357))
-1035 5612 0
-1020 5612 0
-1020 -1035 5611 0
c ((SATLiteral(-990) + aux1357 - aux1358)<=0)
5611 -5614 0
5612 -5615 0
990 -5614 0
990 5611 -5615 0
990 5612 -5617 0
c (0<=(SATLiteral(-990) + aux1357 - aux1358))
-5612 5617 0
-5611 5615 0
-990 5617 0
-990 -5612 5615 0
-990 -5611 5614 0
c ((aux1354 + aux1356 - aux1359)<=0)
5608 -5619 0
5609 -5620 0
5602 -5619 0
5602 5608 -5620 0
5602 5609 -5622 0
5603 -5620 0
5603 5608 -5622 0
5603 5609 -5624 0
c (0<=(aux1354 + aux1356 - aux1359))
-5609 5624 0
-5608 5622 0
-5603 5624 0
-5603 -5609 5622 0
-5603 -5608 5620 0
-5602 5622 0
-5602 -5609 5620 0
-5602 -5608 5619 0
c (( - aux1360 + SATLiteral(1082) + SATLiteral(1202))<=0)
-1202 -5626 0
-1082 -5626 0
-1082 -1202 -5627 0
c (0<=( - aux1360 + SATLiteral(1082) + SATLiteral(1202)))
1202 5627 0
1082 5627 0
1082 1202 5626 0
c (( - aux1361 + SATLiteral(1097) + SATLiteral(1187))<=0)
-1187 -5629 0
-1097 -5629 0
-1097 -1187 -5630 0
c (0<=( - aux1361 + SATLiteral(1097) + SATLiteral(1187)))
1187 5630 0
1097 5630 0
1097 1187 5629 0
c (( - aux1362 + SATLiteral(1127) + SATLiteral(1172))<=0)
-1172 -5632 0
-1127 -5632 0
-1127 -1172 -5633 0
c (0<=( - aux1362 + SATLiteral(1127) + SATLiteral(1172)))
1172 5633 0
1127 5633 0
1127 1172 5632 0
c (( - aux1363 + SATLiteral(1142) + SATLiteral(1157))<=0)
-1157 -5635 0
-1142 -5635 0
-1142 -1157 -5636 0
c (0<=( - aux1363 + SATLiteral(1142) + SATLiteral(1157)))
1157 5636 0
1142 5636 0
1142 1157 5635 0
c ((aux1363 - aux1364 + SATLiteral(1112))<=0)
5635 -5638 0
5636 -5639 0
-1112 -5638 0
-1112 5635 -5639 0
-1112 5636 -5641 0
c (0<=(aux1363 - aux1364 + SATLiteral(1112)))
-5636 5641 0
-5635 5639 0
1112 5641 0
1112 -5636 5639 0
1112 -5635 5638 0
c ((aux1360 + aux1362 - aux1365)<=0)
5632 -5643 0
5633 -5644 0
5626 -5643 0
5626 5632 -5644 0
5626 5633 -5646 0
5627 -5644 0
5627 5632 -5646 0
5627 5633 -5648 0
c (0<=(aux1360 + aux1362 - aux1365))
-5633 5648 0
-5632 5646 0
-5627 5648 0
-5627 -5633 5646 0
-5627 -5632 5644 0
-5626 5646 0
-5626 -5633 5644 0
-5626 -5632 5643 0
c (( - aux1366 + SATLiteral(1084) + SATLiteral(1204))<=0)
-1204 -5650 0
-1084 -5650 0
-1084 -1204 -5651 0
c (0<=( - aux1366 + SATLiteral(1084) + SATLiteral(1204)))
1204 5651 0
1084 5651 0
1084 1204 5650 0
c (( - aux1367 + SATLiteral(1099) + SATLiteral(1189))<=0)
-1189 -5653 0
-1099 -5653 0
-1099 -1189 -5654 0
c (0<=( - aux1367 + SATLiteral(1099) + SATLiteral(1189)))
1189 5654 0
1099 5654 0
1099 1189 5653 0
c (( - aux1368 + SATLiteral(1129) + SATLiteral(1174))<=0)
-1174 -5656 0
-1129 -5656 0
-1129 -1174 -5657 0
c (0<=( - aux1368 + SATLiteral(1129) + SATLiteral(1174)))
1174 5657 0
1129 5657 0
1129 1174 5656 0
c (( - aux1369 + SATLiteral(1144) + SATLiteral(1159))<=0)
-1159 -5659 0
-1144 -5659 0
-1144 -1159 -5660 0
c (0<=( - aux1369 + SATLiteral(1144) + SATLiteral(1159)))
1159 5660 0
1144 5660 0
1144 1159 5659 0
c ((aux1369 - aux1370 + SATLiteral(1114))<=0)
5659 -5662 0
5660 -5663 0
-1114 -5662 0
-1114 5659 -5663 0
-1114 5660 -5665 0
c (0<=(aux1369 - aux1370 + SATLiteral(1114)))
-5660 5665 0
-5659 5663 0
1114 5665 0
1114 -5660 5663 0
1114 -5659 5662 0
c ((aux1366 + aux1368 - aux1371)<=0)
5656 -5667 0
5657 -5668 0
5650 -5667 0
5650 5656 -5668 0
5650 5657 -5670 0
5651 -5668 0
5651 5656 -5670 0
5651 5657 -5672 0
c (0<=(aux1366 + aux1368 - aux1371))
-5657 5672 0
-5656 5670 0
-5651 5672 0
-5651 -5657 5670 0
-5651 -5656 5668 0
-5650 5670 0
-5650 -5657 5668 0
-5650 -5656 5667 0
c (( - aux1372 + SATLiteral(1086) + SATLiteral(1206))<=0)
-1206 -5674 0
-1086 -5674 0
-1086 -1206 -5675 0
c (0<=( - aux1372 + SATLiteral(1086) + SATLiteral(1206)))
1206 5675 0
1086 5675 0
1086 1206 5674 0
c (( - aux1373 + SATLiteral(1101) + SATLiteral(1191))<=0)
-1191 -5677 0
-1101 -5677 0
-1101 -1191 -5678 0
c (0<=( - aux1373 + SATLiteral(1101) + SATLiteral(1191)))
1191 5678 0
1101 5678 0
1101 1191 5677 0
c (( - aux1374 + SATLiteral(1131) + SATLiteral(1176))<=0)
-1176 -5680 0
-1131 -5680 0
-1131 -1176 -5681 0
c (0<=( - aux1374 + SATLiteral(1131) + SATLiteral(1176)))
1176 5681 0
1131 5681 0
1131 1176 5680 0
c (( - aux1375 + SATLiteral(1146) + SATLiteral(1161))<=0)
-1161 -5683 0
-1146 -5683 0
-1146 -1161 -5684 0
c (0<=( - aux1375 + SATLiteral(1146) + SATLiteral(1161)))
1161 5684 0
1146 5684 0
1146 1161 5683 0
c ((aux1375 - aux1376 + SATLiteral(1116))<=0)
5683 -5686 0
5684 -5687 0
-1116 -5686 0
-1116 5683 -5687 0
-1116 5684 -5689 0
c (0<=(aux1375 - aux1376 + SATLiteral(1116)))
-5684 5689 0
-5683 5687 0
1116 5689 0
1116 -5684 5687 0
1116 -5683 5686 0
c ((aux1372 + aux1374 - aux1377)<=0)
5680 -5691 0
5681 -5692 0
5674 -5691 0
5674 5680 -5692 0
5674 5681 -5694 0
5675 -5692 0
5675 5680 -5694 0
5675 5681 -5696 0
c (0<=(aux1372 + aux1374 - aux1377))
-5681 5696 0
-5680 5694 0
-5675 5696 0
-5675 -5681 5694 0
-5675 -5680 5692 0
-5674 5694 0
-5674 -5681 5692 0
-5674 -5680 5691 0
c (( - aux1378 + SATLiteral(1088) + SATLiteral(1208))<=0)
-1208 -5698 0
-1088 -5698 0
-1088 -1208 -5699 0
c (0<=( - aux1378 + SATLiteral(1088) + SATLiteral(1208)))
1208 5699 0
1088 5699 0
1088 1208 5698 0
c (( - aux1379 + SATLiteral(1103) + SATLiteral(1193))<=0)
-1193 -5701 0
-1103 -5701 0
-1103 -1193 -5702 0
c (0<=( - aux1379 + SATLiteral(1103) + SATLiteral(1193)))
1193 5702 0
1103 5702 0
1103 1193 5701 0
c (( - aux1380 + SATLiteral(1133) + SATLiteral(1178))<=0)
-1178 -5704 0
-1133 -5704 0
-1133 -1178 -5705 0
c (0<=( - aux1380 + SATLiteral(1133) + SATLiteral(1178)))
1178 5705 0
1133 5705 0
1133 1178 5704 0
c (( - aux1381 + SATLiteral(1148) + SATLiteral(1163))<=0)
-1163 -5707 0
-1148 -5707 0
-1148 -1163 -5708 0
c (0<=( - aux1381 + SATLiteral(1148) + SATLiteral(1163)))
1163 5708 0
1148 5708 0
1148 1163 5707 0
c ((aux1381 - aux1382 + SATLiteral(1118))<=0)
5707 -5710 0
5708 -5711 0
-1118 -5710 0
-1118 5707 -5711 0
-1118 5708 -5713 0
c (0<=(aux1381 - aux1382 + SATLiteral(1118)))
-5708 5713 0
-5707 5711 0
1118 5713 0
1118 -5708 5711 0
1118 -5707 5710 0
c ((aux1378 + aux1380 - aux1383)<=0)
5704 -5715 0
5705 -5716 0
5698 -5715 0
5698 5704 -5716 0
5698 5705 -5718 0
5699 -5716 0
5699 5704 -5718 0
5699 5705 -5720 0
c (0<=(aux1378 + aux1380 - aux1383))
-5705 5720 0
-5704 5718 0
-5699 5720 0
-5699 -5705 5718 0
-5699 -5704 5716 0
-5698 5718 0
-5698 -5705 5716 0
-5698 -5704 5715 0
c (( - aux1384 + SATLiteral(1090) + SATLiteral(1210))<=0)
-1210 -5722 0
-1090 -5722 0
-1090 -1210 -5723 0
c (0<=( - aux1384 + SATLiteral(1090) + SATLiteral(1210)))
1210 5723 0
1090 5723 0
1090 1210 5722 0
c (( - aux1385 + SATLiteral(1105) + SATLiteral(1195))<=0)
-1195 -5725 0
-1105 -5725 0
-1105 -1195 -5726 0
c (0<=( - aux1385 + SATLiteral(1105) + SATLiteral(1195)))
1195 5726 0
1105 5726 0
1105 1195 5725 0
c (( - aux1386 + SATLiteral(1135) + SATLiteral(1180))<=0)
-1180 -5728 0
-1135 -5728 0
-1135 -1180 -5729 0
c (0<=( - aux1386 + SATLiteral(1135) + SATLiteral(1180)))
1180 5729 0
1135 5729 0
1135 1180 5728 0
c (( - aux1387 + SATLiteral(1150) + SATLiteral(1165))<=0)
-1165 -5731 0
-1150 -5731 0
-1150 -1165 -5732 0
c (0<=( - aux1387 + SATLiteral(1150) + SATLiteral(1165)))
1165 5732 0
1150 5732 0
1150 1165 5731 0
c ((aux1387 - aux1388 + SATLiteral(1120))<=0)
5731 -5734 0
5732 -5735 0
-1120 -5734 0
-1120 5731 -5735 0
-1120 5732 -5737 0
c (0<=(aux1387 - aux1388 + SATLiteral(1120)))
-5732 5737 0
-5731 5735 0
1120 5737 0
1120 -5732 5735 0
1120 -5731 5734 0
c ((aux1384 + aux1386 - aux1389)<=0)
5728 -5739 0
5729 -5740 0
5722 -5739 0
5722 5728 -5740 0
5722 5729 -5742 0
5723 -5740 0
5723 5728 -5742 0
5723 5729 -5744 0
c (0<=(aux1384 + aux1386 - aux1389))
-5729 5744 0
-5728 5742 0
-5723 5744 0
-5723 -5729 5742 0
-5723 -5728 5740 0
-5722 5742 0
-5722 -5729 5740 0
-5722 -5728 5739 0
c (( - aux1390 + SATLiteral(1092) + SATLiteral(1212))<=0)
-1212 -5746 0
-1092 -5746 0
-1092 -1212 -5747 0
c (0<=( - aux1390 + SATLiteral(1092) + SATLiteral(1212)))
1212 5747 0
1092 5747 0
1092 1212 5746 0
c (( - aux1391 + SATLiteral(1107) + SATLiteral(1197))<=0)
-1197 -5749 0
-1107 -5749 0
-1107 -1197 -5750 0
c (0<=( - aux1391 + SATLiteral(1107) + SATLiteral(1197)))
1197 5750 0
1107 5750 0
1107 1197 5749 0
c (( - aux1392 + SATLiteral(1137) + SATLiteral(1182))<=0)
-1182 -5752 0
-1137 -5752 0
-1137 -1182 -5753 0
c (0<=( - aux1392 + SATLiteral(1137) + SATLiteral(1182)))
1182 5753 0
1137 5753 0
1137 1182 5752 0
c (( - aux1393 + SATLiteral(1152) + SATLiteral(1167))<=0)
-1167 -5755 0
-1152 -5755 0
-1152 -1167 -5756 0
c (0<=( - aux1393 + SATLiteral(1152) + SATLiteral(1167)))
1167 5756 0
1152 5756 0
1152 1167 5755 0
c ((aux1393 - aux1394 + SATLiteral(1122))<=0)
5755 -5758 0
5756 -5759 0
-1122 -5758 0
-1122 5755 -5759 0
-1122 5756 -5761 0
c (0<=(aux1393 - aux1394 + SATLiteral(1122)))
-5756 5761 0
-5755 5759 0
1122 5761 0
1122 -5756 5759 0
1122 -5755 5758 0
c ((aux1390 + aux1392 - aux1395)<=0)
5752 -5763 0
5753 -5764 0
5746 -5763 0
5746 5752 -5764 0
5746 5753 -5766 0
5747 -5764 0
5747 5752 -5766 0
5747 5753 -5768 0
c (0<=(aux1390 + aux1392 - aux1395))
-5753 5768 0
-5752 5766 0
-5747 5768 0
-5747 -5753 5766 0
-5747 -5752 5764 0
-5746 5766 0
-5746 -5753 5764 0
-5746 -5752 5763 0
c (( - aux1396 + SATLiteral(1094) + SATLiteral(1214))<=0)
-1214 -5770 0
-1094 -5770 0
-1094 -1214 -5771 0
c (0<=( - aux1396 + SATLiteral(1094) + SATLiteral(1214)))
1214 5771 0
1094 5771 0
1094 1214 5770 0
c (( - aux1397 + SATLiteral(1109) + SATLiteral(1199))<=0)
-1199 -5773 0
-1109 -5773 0
-1109 -1199 -5774 0
c (0<=( - aux1397 + SATLiteral(1109) + SATLiteral(1199)))
1199 5774 0
1109 5774 0
1109 1199 5773 0
c (( - aux1398 + SATLiteral(1139) + SATLiteral(1184))<=0)
-1184 -5776 0
-1139 -5776 0
-1139 -1184 -5777 0
c (0<=( - aux1398 + SATLiteral(1139) + SATLiteral(1184)))
1184 5777 0
1139 5777 0
1139 1184 5776 0
c (( - aux1399 + SATLiteral(1154) + SATLiteral(1169))<=0)
-1169 -5779 0
-1154 -5779 0
-1154 -1169 -5780 0
c (0<=( - aux1399 + SATLiteral(1154) + SATLiteral(1169)))
1169 5780 0
1154 5780 0
1154 1169 5779 0
c ((aux1399 - aux1400 + SATLiteral(1124))<=0)
5779 -5782 0
5780 -5783 0
-1124 -5782 0
-1124 5779 -5783 0
-1124 5780 -5785 0
c (0<=(aux1399 - aux1400 + SATLiteral(1124)))
-5780 5785 0
-5779 5783 0
1124 5785 0
1124 -5780 5783 0
1124 -5779 5782 0
c ((aux1396 + aux1398 - aux1401)<=0)
5776 -5787 0
5777 -5788 0
5770 -5787 0
5770 5776 -5788 0
5770 5777 -5790 0
5771 -5788 0
5771 5776 -5790 0
5771 5777 -5792 0
c (0<=(aux1396 + aux1398 - aux1401))
-5777 5792 0
-5776 5790 0
-5771 5792 0
-5771 -5777 5790 0
-5771 -5776 5788 0
-5770 5790 0
-5770 -5777 5788 0
-5770 -5776 5787 0
c (( - aux1402 + SATLiteral(1096) + SATLiteral(1216))<=0)
-1216 -5794 0
-1096 -5794 0
-1096 -1216 -5795 0
c (0<=( - aux1402 + SATLiteral(1096) + SATLiteral(1216)))
1216 5795 0
1096 5795 0
1096 1216 5794 0
c (( - aux1403 + SATLiteral(1111) + SATLiteral(1201))<=0)
-1201 -5797 0
-1111 -5797 0
-1111 -1201 -5798 0
c (0<=( - aux1403 + SATLiteral(1111) + SATLiteral(1201)))
1201 5798 0
1111 5798 0
1111 1201 5797 0
c (( - aux1404 + SATLiteral(1141) + SATLiteral(1186))<=0)
-1186 -5800 0
-1141 -5800 0
-1141 -1186 -5801 0
c (0<=( - aux1404 + SATLiteral(1141) + SATLiteral(1186)))
1186 5801 0
1141 5801 0
1141 1186 5800 0
c (( - aux1405 + SATLiteral(1156) + SATLiteral(1171))<=0)
-1171 -5803 0
-1156 -5803 0
-1156 -1171 -5804 0
c (0<=( - aux1405 + SATLiteral(1156) + SATLiteral(1171)))
1171 5804 0
1156 5804 0
1156 1171 5803 0
c ((aux1405 - aux1406 + SATLiteral(1126))<=0)
5803 -5806 0
5804 -5807 0
-1126 -5806 0
-1126 5803 -5807 0
-1126 5804 -5809 0
c (0<=(aux1405 - aux1406 + SATLiteral(1126)))
-5804 5809 0
-5803 5807 0
1126 5809 0
1126 -5804 5807 0
1126 -5803 5806 0
c ((aux1402 + aux1404 - aux1407)<=0)
5800 -5811 0
5801 -5812 0
5794 -5811 0
5794 5800 -5812 0
5794 5801 -5814 0
5795 -5812 0
5795 5800 -5814 0
5795 5801 -5816 0
c (0<=(aux1402 + aux1404 - aux1407))
-5801 5816 0
-5800 5814 0
-5795 5816 0
-5795 -5801 5814 0
-5795 -5800 5812 0
-5794 5814 0
-5794 -5801 5812 0
-5794 -5800 5811 0
c (( - aux1408 + SATLiteral(-1095) + SATLiteral(-1215))<=0)
1215 -5818 0
1095 -5818 0
1095 1215 -5819 0
c (0<=( - aux1408 + SATLiteral(-1095) + SATLiteral(-1215)))
-1215 5819 0
-1095 5819 0
-1095 -1215 5818 0
c (( - aux1409 + SATLiteral(-1110) + SATLiteral(-1200))<=0)
1200 -5821 0
1110 -5821 0
1110 1200 -5822 0
c (0<=( - aux1409 + SATLiteral(-1110) + SATLiteral(-1200)))
-1200 5822 0
-1110 5822 0
-1110 -1200 5821 0
c (( - aux1410 + SATLiteral(-1140) + SATLiteral(-1185))<=0)
1185 -5824 0
1140 -5824 0
1140 1185 -5825 0
c (0<=( - aux1410 + SATLiteral(-1140) + SATLiteral(-1185)))
-1185 5825 0
-1140 5825 0
-1140 -1185 5824 0
c (( - aux1411 + SATLiteral(-1155) + SATLiteral(-1170))<=0)
1170 -5827 0
1155 -5827 0
1155 1170 -5828 0
c (0<=( - aux1411 + SATLiteral(-1155) + SATLiteral(-1170)))
-1170 5828 0
-1155 5828 0
-1155 -1170 5827 0
c ((aux1411 - aux1412 + SATLiteral(-1125))<=0)
5827 -5830 0
5828 -5831 0
1125 -5830 0
1125 5827 -5831 0
1125 5828 -5833 0
c (0<=(aux1411 - aux1412 + SATLiteral(-1125)))
-5828 5833 0
-5827 5831 0
-1125 5833 0
-1125 -5828 5831 0
-1125 -5827 5830 0
c ((aux1408 + aux1410 - aux1413)<=0)
5824 -5835 0
5825 -5836 0
5818 -5835 0
5818 5824 -5836 0
5818 5825 -5838 0
5819 -5836 0
5819 5824 -5838 0
5819 5825 -5840 0
c (0<=(aux1408 + aux1410 - aux1413))
-5825 5840 0
-5824 5838 0
-5819 5840 0
-5819 -5825 5838 0
-5819 -5824 5836 0
-5818 5838 0
-5818 -5825 5836 0
-5818 -5824 5835 0
c ((SATLiteral(272) - aux1414 + SATLiteral(167))<=0)
-167 -5842 0
-272 -5842 0
-272 -167 -5843 0
c (0<=(SATLiteral(272) - aux1414 + SATLiteral(167)))
167 5843 0
272 5843 0
272 167 5842 0
c ((SATLiteral(287) - aux1415 + SATLiteral(152))<=0)
-152 -5845 0
-287 -5845 0
-287 -152 -5846 0
c (0<=(SATLiteral(287) - aux1415 + SATLiteral(152)))
152 5846 0
287 5846 0
287 152 5845 0
c ((SATLiteral(2) - aux1416 + SATLiteral(137))<=0)
-137 -5848 0
-2 -5848 0
-2 -137 -5849 0
c (0<=(SATLiteral(2) - aux1416 + SATLiteral(137)))
137 5849 0
2 5849 0
2 137 5848 0
c ((SATLiteral(17) + SATLiteral(32) - aux1417)<=0)
-32 -5851 0
-17 -5851 0
-17 -32 -5852 0
c (0<=(SATLiteral(17) + SATLiteral(32) - aux1417))
32 5852 0
17 5852 0
17 32 5851 0
c ((SATLiteral(302) + aux1417 - aux1418)<=0)
5851 -5854 0
5852 -5855 0
-302 -5854 0
-302 5851 -5855 0
-302 5852 -5857 0
c (0<=(SATLiteral(302) + aux1417 - aux1418))
-5852 5857 0
-5851 5855 0
302 5857 0
302 -5852 5855 0
302 -5851 5854 0
c ((aux1414 + aux1416 - aux1419)<=0)
5848 -5859 0
5849 -5860 0
5842 -5859 0
5842 5848 -5860 0
5842 5849 -5862 0
5843 -5860 0
5843 5848 -5862 0
5843 5849 -5864 0
c (0<=(aux1414 + aux1416 - aux1419))
-5849 5864 0
-5848 5862 0
-5843 5864 0
-5843 -5849 5862 0
-5843 -5848 5860 0
-5842 5862 0
-5842 -5849 5860 0
-5842 -5848 5859 0
c ((SATLiteral(274) - aux1420 + SATLiteral(169))<=0)
-169 -5866 0
-274 -5866 0
-274 -169 -5867 0
c (0<=(SATLiteral(274) - aux1420 + SATLiteral(169)))
169 5867 0
274 5867 0
274 169 5866 0
c ((SATLiteral(289) - aux1421 + SATLiteral(154))<=0)
-154 -5869 0
-289 -5869 0
-289 -154 -5870 0
c (0<=(SATLiteral(289) - aux1421 + SATLiteral(154)))
154 5870 0
289 5870 0
289 154 5869 0
c ((SATLiteral(4) - aux1422 + SATLiteral(139))<=0)
-139 -5872 0
-4 -5872 0
-4 -139 -5873 0
c (0<=(SATLiteral(4) - aux1422 + SATLiteral(139)))
139 5873 0
4 5873 0
4 139 5872 0
c ((SATLiteral(19) + SATLiteral(34) - aux1423)<=0)
-34 -5875 0
-19 -5875 0
-19 -34 -5876 0
c (0<=(SATLiteral(19) + SATLiteral(34) - aux1423))
34 5876 0
19 5876 0
19 34 5875 0
c ((SATLiteral(304) + aux1423 - aux1424)<=0)
5875 -5878 0
5876 -5879 0
-304 -5878 0
-304 5875 -5879 0
-304 5876 -5881 0
c (0<=(SATLiteral(304) + aux1423 - aux1424))
-5876 5881 0
-5875 5879 0
304 5881 0
304 -5876 5879 0
304 -5875 5878 0
c ((aux1420 + aux1422 - aux1425)<=0)
5872 -5883 0
5873 -5884 0
5866 -5883 0
5866 5872 -5884 0
5866 5873 -5886 0
5867 -5884 0
5867 5872 -5886 0
5867 5873 -5888 0
c (0<=(aux1420 + aux1422 - aux1425))
-5873 5888 0
-5872 5886 0
-5867 5888 0
-5867 -5873 5886 0
-5867 -5872 5884 0
-5866 5886 0
-5866 -5873 5884 0
-5866 -5872 5883 0
c ((SATLiteral(276) - aux1426 + SATLiteral(171))<=0)
-171 -5890 0
-276 -5890 0
-276 -171 -5891 0
c (0<=(SATLiteral(276) - aux1426 + SATLiteral(171)))
171 5891 0
276 5891 0
276 171 5890 0
c ((SATLiteral(291) - aux1427 + SATLiteral(156))<=0)
-156 -5893 0
-291 -5893 0
-291 -156 -5894 0
c (0<=(SATLiteral(291) - aux1427 + SATLiteral(156)))
156 5894 0
291 5894 0
291 156 5893 0
c ((SATLiteral(6) - aux1428 + SATLiteral(141))<=0)
-141 -5896 0
-6 -5896 0
-6 -141 -5897 0
c (0<=(SATLiteral(6) - aux1428 + SATLiteral(141)))
141 5897 0
6 5897 0
6 141 5896 0
c ((SATLiteral(21) + SATLiteral(36) - aux1429)<=0)
-36 -5899 0
-21 -5899 0
-21 -36 -5900 0
c (0<=(SATLiteral(21) + SATLiteral(36) - aux1429))
36 5900 0
21 5900 0
21 36 5899 0
c ((SATLiteral(306) + aux1429 - aux1430)<=0)
5899 -5902 0
5900 -5903 0
-306 -5902 0
-306 5899 -5903 0
-306 5900 -5905 0
c (0<=(SATLiteral(306) + aux1429 - aux1430))
-5900 5905 0
-5899 5903 0
306 5905 0
306 -5900 5903 0
306 -5899 5902 0
c ((aux1426 + aux1428 - aux1431)<=0)
5896 -5907 0
5897 -5908 0
5890 -5907 0
5890 5896 -5908 0
5890 5897 -5910 0
5891 -5908 0
5891 5896 -5910 0
5891 5897 -5912 0
c (0<=(aux1426 + aux1428 - aux1431))
-5897 5912 0
-5896 5910 0
-5891 5912 0
-5891 -5897 5910 0
-5891 -5896 5908 0
-5890 5910 0
-5890 -5897 5908 0
-5890 -5896 5907 0
c ((SATLiteral(278) - aux1432 + SATLiteral(173))<=0)
-173 -5914 0
-278 -5914 0
-278 -173 -5915 0
c (0<=(SATLiteral(278) - aux1432 + SATLiteral(173)))
173 5915 0
278 5915 0
278 173 5914 0
c ((SATLiteral(293) - aux1433 + SATLiteral(158))<=0)
-158 -5917 0
-293 -5917 0
-293 -158 -5918 0
c (0<=(SATLiteral(293) - aux1433 + SATLiteral(158)))
158 5918 0
293 5918 0
293 158 5917 0
c ((SATLiteral(8) - aux1434 + SATLiteral(143))<=0)
-143 -5920 0
-8 -5920 0
-8 -143 -5921 0
c (0<=(SATLiteral(8) - aux1434 + SATLiteral(143)))
143 5921 0
8 5921 0
8 143 5920 0
c ((SATLiteral(23) + SATLiteral(38) - aux1435)<=0)
-38 -5923 0
-23 -5923 0
-23 -38 -5924 0
c (0<=(SATLiteral(23) + SATLiteral(38) - aux1435))
38 5924 0
23 5924 0
23 38 5923 0
c ((SATLiteral(308) + aux1435 - aux1436)<=0)
5923 -5926 0
5924 -5927 0
-308 -5926 0
-308 5923 -5927 0
-308 5924 -5929 0
c (0<=(SATLiteral(308) + aux1435 - aux1436))
-5924 5929 0
-5923 5927 0
308 5929 0
308 -5924 5927 0
308 -5923 5926 0
c ((aux1432 + aux1434 - aux1437)<=0)
5920 -5931 0
5921 -5932 0
5914 -5931 0
5914 5920 -5932 0
5914 5921 -5934 0
5915 -5932 0
5915 5920 -5934 0
5915 5921 -5936 0
c (0<=(aux1432 + aux1434 - aux1437))
-5921 5936 0
-5920 5934 0
-5915 5936 0
-5915 -5921 5934 0
-5915 -5920 5932 0
-5914 5934 0
-5914 -5921 5932 0
-5914 -5920 5931 0
c ((SATLiteral(280) - aux1438 + SATLiteral(175))<=0)
-175 -5938 0
-280 -5938 0
-280 -175 -5939 0
c (0<=(SATLiteral(280) - aux1438 + SATLiteral(175)))
175 5939 0
280 5939 0
280 175 5938 0
c ((SATLiteral(295) - aux1439 + SATLiteral(160))<=0)
-160 -5941 0
-295 -5941 0
-295 -160 -5942 0
c (0<=(SATLiteral(295) - aux1439 + SATLiteral(160)))
160 5942 0
295 5942 0
295 160 5941 0
c ((SATLiteral(10) - aux1440 + SATLiteral(145))<=0)
-145 -5944 0
-10 -5944 0
-10 -145 -5945 0
c (0<=(SATLiteral(10) - aux1440 + SATLiteral(145)))
145 5945 0
10 5945 0
10 145 5944 0
c ((SATLiteral(25) + SATLiteral(40) - aux1441)<=0)
-40 -5947 0
-25 -5947 0
-25 -40 -5948 0
c (0<=(SATLiteral(25) + SATLiteral(40) - aux1441))
40 5948 0
25 5948 0
25 40 5947 0
c ((SATLiteral(310) + aux1441 - aux1442)<=0)
5947 -5950 0
5948 -5951 0
-310 -5950 0
-310 5947 -5951 0
-310 5948 -5953 0
c (0<=(SATLiteral(310) + aux1441 - aux1442))
-5948 5953 0
-5947 5951 0
310 5953 0
310 -5948 5951 0
310 -5947 5950 0
c ((aux1438 + aux1440 - aux1443)<=0)
5944 -5955 0
5945 -5956 0
5938 -5955 0
5938 5944 -5956 0
5938 5945 -5958 0
5939 -5956 0
5939 5944 -5958 0
5939 5945 -5960 0
c (0<=(aux1438 + aux1440 - aux1443))
-5945 5960 0
-5944 5958 0
-5939 5960 0
-5939 -5945 5958 0
-5939 -5944 5956 0
-5938 5958 0
-5938 -5945 5956 0
-5938 -5944 5955 0
c ((SATLiteral(282) - aux1444 + SATLiteral(177))<=0)
-177 -5962 0
-282 -5962 0
-282 -177 -5963 0
c (0<=(SATLiteral(282) - aux1444 + SATLiteral(177)))
177 5963 0
282 5963 0
282 177 5962 0
c ((SATLiteral(297) - aux1445 + SATLiteral(162))<=0)
-162 -5965 0
-297 -5965 0
-297 -162 -5966 0
c (0<=(SATLiteral(297) - aux1445 + SATLiteral(162)))
162 5966 0
297 5966 0
297 162 5965 0
c ((SATLiteral(12) - aux1446 + SATLiteral(147))<=0)
-147 -5968 0
-12 -5968 0
-12 -147 -5969 0
c (0<=(SATLiteral(12) - aux1446 + SATLiteral(147)))
147 5969 0
12 5969 0
12 147 5968 0
c ((SATLiteral(27) + SATLiteral(42) - aux1447)<=0)
-42 -5971 0
-27 -5971 0
-27 -42 -5972 0
c (0<=(SATLiteral(27) + SATLiteral(42) - aux1447))
42 5972 0
27 5972 0
27 42 5971 0
c ((SATLiteral(312) + aux1447 - aux1448)<=0)
5971 -5974 0
5972 -5975 0
-312 -5974 0
-312 5971 -5975 0
-312 5972 -5977 0
c (0<=(SATLiteral(312) + aux1447 - aux1448))
-5972 5977 0
-5971 5975 0
312 5977 0
312 -5972 5975 0
312 -5971 5974 0
c ((aux1444 + aux1446 - aux1449)<=0)
5968 -5979 0
5969 -5980 0
5962 -5979 0
5962 5968 -5980 0
5962 5969 -5982 0
5963 -5980 0
5963 5968 -5982 0
5963 5969 -5984 0
c (0<=(aux1444 + aux1446 - aux1449))
-5969 5984 0
-5968 5982 0
-5963 5984 0
-5963 -5969 5982 0
-5963 -5968 5980 0
-5962 5982 0
-5962 -5969 5980 0
-5962 -5968 5979 0
c ((SATLiteral(284) - aux1450 + SATLiteral(179))<=0)
-179 -5986 0
-284 -5986 0
-284 -179 -5987 0
c (0<=(SATLiteral(284) - aux1450 + SATLiteral(179)))
179 5987 0
284 5987 0
284 179 5986 0
c ((SATLiteral(299) - aux1451 + SATLiteral(164))<=0)
-164 -5989 0
-299 -5989 0
-299 -164 -5990 0
c (0<=(SATLiteral(299) - aux1451 + SATLiteral(164)))
164 5990 0
299 5990 0
299 164 5989 0
c ((SATLiteral(14) - aux1452 + SATLiteral(149))<=0)
-149 -5992 0
-14 -5992 0
-14 -149 -5993 0
c (0<=(SATLiteral(14) - aux1452 + SATLiteral(149)))
149 5993 0
14 5993 0
14 149 5992 0
c ((SATLiteral(29) + SATLiteral(44) - aux1453)<=0)
-44 -5995 0
-29 -5995 0
-29 -44 -5996 0
c (0<=(SATLiteral(29) + SATLiteral(44) - aux1453))
44 5996 0
29 5996 0
29 44 5995 0
c ((SATLiteral(314) + aux1453 - aux1454)<=0)
5995 -5998 0
5996 -5999 0
-314 -5998 0
-314 5995 -5999 0
-314 5996 -6001 0
c (0<=(SATLiteral(314) + aux1453 - aux1454))
-5996 6001 0
-5995 5999 0
314 6001 0
314 -5996 5999 0
314 -5995 5998 0
c ((aux1450 + aux1452 - aux1455)<=0)
5992 -6003 0
5993 -6004 0
5986 -6003 0
5986 5992 -6004 0
5986 5993 -6006 0
5987 -6004 0
5987 5992 -6006 0
5987 5993 -6008 0
c (0<=(aux1450 + aux1452 - aux1455))
-5993 6008 0
-5992 6006 0
-5987 6008 0
-5987 -5993 6006 0
-5987 -5992 6004 0
-5986 6006 0
-5986 -5993 6004 0
-5986 -5992 6003 0
c ((SATLiteral(286) - aux1456 + SATLiteral(181))<=0)
-181 -6010 0
-286 -6010 0
-286 -181 -6011 0
c (0<=(SATLiteral(286) - aux1456 + SATLiteral(181)))
181 6011 0
286 6011 0
286 181 6010 0
c ((SATLiteral(301) - aux1457 + SATLiteral(166))<=0)
-166 -6013 0
-301 -6013 0
-301 -166 -6014 0
c (0<=(SATLiteral(301) - aux1457 + SATLiteral(166)))
166 6014 0
301 6014 0
301 166 6013 0
c ((SATLiteral(16) - aux1458 + SATLiteral(151))<=0)
-151 -6016 0
-16 -6016 0
-16 -151 -6017 0
c (0<=(SATLiteral(16) - aux1458 + SATLiteral(151)))
151 6017 0
16 6017 0
16 151 6016 0
c ((SATLiteral(31) + SATLiteral(46) - aux1459)<=0)
-46 -6019 0
-31 -6019 0
-31 -46 -6020 0
c (0<=(SATLiteral(31) + SATLiteral(46) - aux1459))
46 6020 0
31 6020 0
31 46 6019 0
c ((SATLiteral(316) + aux1459 - aux1460)<=0)
6019 -6022 0
6020 -6023 0
-316 -6022 0
-316 6019 -6023 0
-316 6020 -6025 0
c (0<=(SATLiteral(316) + aux1459 - aux1460))
-6020 6025 0
-6019 6023 0
316 6025 0
316 -6020 6023 0
316 -6019 6022 0
c ((aux1456 + aux1458 - aux1461)<=0)
6016 -6027 0
6017 -6028 0
6010 -6027 0
6010 6016 -6028 0
6010 6017 -6030 0
6011 -6028 0
6011 6016 -6030 0
6011 6017 -6032 0
c (0<=(aux1456 + aux1458 - aux1461))
-6017 6032 0
-6016 6030 0
-6011 6032 0
-6011 -6017 6030 0
-6011 -6016 6028 0
-6010 6030 0
-6010 -6017 6028 0
-6010 -6016 6027 0
c ((SATLiteral(-285) - aux1462 + SATLiteral(-180))<=0)
180 -6034 0
285 -6034 0
285 180 -6035 0
c (0<=(SATLiteral(-285) - aux1462 + SATLiteral(-180)))
-180 6035 0
-285 6035 0
-285 -180 6034 0
c ((SATLiteral(-300) - aux1463 + SATLiteral(-165))<=0)
165 -6037 0
300 -6037 0
300 165 -6038 0
c (0<=(SATLiteral(-300) - aux1463 + SATLiteral(-165)))
-165 6038 0
-300 6038 0
-300 -165 6037 0
c ((SATLiteral(-15) - aux1464 + SATLiteral(-150))<=0)
150 -6040 0
15 -6040 0
15 150 -6041 0
c (0<=(SATLiteral(-15) - aux1464 + SATLiteral(-150)))
-150 6041 0
-15 6041 0
-15 -150 6040 0
c ((SATLiteral(-30) + SATLiteral(-45) - aux1465)<=0)
45 -6043 0
30 -6043 0
30 45 -6044 0
c (0<=(SATLiteral(-30) + SATLiteral(-45) - aux1465))
-45 6044 0
-30 6044 0
-30 -45 6043 0
c ((SATLiteral(-315) + aux1465 - aux1466)<=0)
6043 -6046 0
6044 -6047 0
315 -6046 0
315 6043 -6047 0
315 6044 -6049 0
c (0<=(SATLiteral(-315) + aux1465 - aux1466))
-6044 6049 0
-6043 6047 0
-315 6049 0
-315 -6044 6047 0
-315 -6043 6046 0
c ((aux1462 + aux1464 - aux1467)<=0)
6040 -6051 0
6041 -6052 0
6034 -6051 0
6034 6040 -6052 0
6034 6041 -6054 0
6035 -6052 0
6035 6040 -6054 0
6035 6041 -6056 0
c (0<=(aux1462 + aux1464 - aux1467))
-6041 6056 0
-6040 6054 0
-6035 6056 0
-6035 -6041 6054 0
-6035 -6040 6052 0
-6034 6054 0
-6034 -6041 6052 0
-6034 -6040 6051 0
c ((SATLiteral(317) - aux1468 + SATLiteral(212))<=0)
-212 -6058 0
-317 -6058 0
-317 -212 -6059 0
c (0<=(SATLiteral(317) - aux1468 + SATLiteral(212)))
212 6059 0
317 6059 0
317 212 6058 0
c ((SATLiteral(332) - aux1469 + SATLiteral(197))<=0)
-197 -6061 0
-332 -6061 0
-332 -197 -6062 0
c (0<=(SATLiteral(332) - aux1469 + SATLiteral(197)))
197 6062 0
332 6062 0
332 197 6061 0
c ((SATLiteral(47) - aux1470 + SATLiteral(182))<=0)
-182 -6064 0
-47 -6064 0
-47 -182 -6065 0
c (0<=(SATLiteral(47) - aux1470 + SATLiteral(182)))
182 6065 0
47 6065 0
47 182 6064 0
c ((SATLiteral(62) + SATLiteral(77) - aux1471)<=0)
-77 -6067 0
-62 -6067 0
-62 -77 -6068 0
c (0<=(SATLiteral(62) + SATLiteral(77) - aux1471))
77 6068 0
62 6068 0
62 77 6067 0
c ((SATLiteral(347) + aux1471 - aux1472)<=0)
6067 -6070 0
6068 -6071 0
-347 -6070 0
-347 6067 -6071 0
-347 6068 -6073 0
c (0<=(SATLiteral(347) + aux1471 - aux1472))
-6068 6073 0
-6067 6071 0
347 6073 0
347 -6068 6071 0
347 -6067 6070 0
c ((aux1468 + aux1470 - aux1473)<=0)
6064 -6075 0
6065 -6076 0
6058 -6075 0
6058 6064 -6076 0
6058 6065 -6078 0
6059 -6076 0
6059 6064 -6078 0
6059 6065 -6080 0
c (0<=(aux1468 + aux1470 - aux1473))
-6065 6080 0
-6064 6078 0
-6059 6080 0
-6059 -6065 6078 0
-6059 -6064 6076 0
-6058 6078 0
-6058 -6065 6076 0
-6058 -6064 6075 0
c ((SATLiteral(319) - aux1474 + SATLiteral(214))<=0)
-214 -6082 0
-319 -6082 0
-319 -214 -6083 0
c (0<=(SATLiteral(319) - aux1474 + SATLiteral(214)))
214 6083 0
319 6083 0
319 214 6082 0
c ((SATLiteral(334) - aux1475 + SATLiteral(199))<=0)
-199 -6085 0
-334 -6085 0
-334 -199 -6086 0
c (0<=(SATLiteral(334) - aux1475 + SATLiteral(199)))
199 6086 0
334 6086 0
334 199 6085 0
c ((SATLiteral(49) - aux1476 + SATLiteral(184))<=0)
-184 -6088 0
-49 -6088 0
-49 -184 -6089 0
c (0<=(SATLiteral(49) - aux1476 + SATLiteral(184)))
184 6089 0
49 6089 0
49 184 6088 0
c ((SATLiteral(64) + SATLiteral(79) - aux1477)<=0)
-79 -6091 0
-64 -6091 0
-64 -79 -6092 0
c (0<=(SATLiteral(64) + SATLiteral(79) - aux1477))
79 6092 0
64 6092 0
64 79 6091 0
c ((SATLiteral(349) + aux1477 - aux1478)<=0)
6091 -6094 0
6092 -6095 0
-349 -6094 0
-349 6091 -6095 0
-349 6092 -6097 0
c (0<=(SATLiteral(349) + aux1477 - aux1478))
-6092 6097 0
-6091 6095 0
349 6097 0
349 -6092 6095 0
349 -6091 6094 0
c ((aux1474 + aux1476 - aux1479)<=0)
6088 -6099 0
6089 -6100 0
6082 -6099 0
6082 6088 -6100 0
6082 6089 -6102 0
6083 -6100 0
6083 6088 -6102 0
6083 6089 -6104 0
c (0<=(aux1474 + aux1476 - aux1479))
-6089 6104 0
-6088 6102 0
-6083 6104 0
-6083 -6089 6102 0
-6083 -6088 6100 0
-6082 6102 0
-6082 -6089 6100 0
-6082 -6088 6099 0
c ((SATLiteral(321) - aux1480 + SATLiteral(216))<=0)
-216 -6106 0
-321 -6106 0
-321 -216 -6107 0
c (0<=(SATLiteral(321) - aux1480 + SATLiteral(216)))
216 6107 0
321 6107 0
321 216 6106 0
c ((SATLiteral(336) - aux1481 + SATLiteral(201))<=0)
-201 -6109 0
-336 -6109 0
-336 -201 -6110 0
c (0<=(SATLiteral(336) - aux1481 + SATLiteral(201)))
201 6110 0
336 6110 0
336 201 6109 0
c ((SATLiteral(51) - aux1482 + SATLiteral(186))<=0)
-186 -6112 0
-51 -6112 0
-51 -186 -6113 0
c (0<=(SATLiteral(51) - aux1482 + SATLiteral(186)))
186 6113 0
51 6113 0
51 186 6112 0
c ((SATLiteral(66) + SATLiteral(81) - aux1483)<=0)
-81 -6115 0
-66 -6115 0
-66 -81 -6116 0
c (0<=(SATLiteral(66) + SATLiteral(81) - aux1483))
81 6116 0
66 6116 0
66 81 6115 0
c ((SATLiteral(351) + aux1483 - aux1484)<=0)
6115 -6118 0
6116 -6119 0
-351 -6118 0
-351 6115 -6119 0
-351 6116 -6121 0
c (0<=(SATLiteral(351) + aux1483 - aux1484))
-6116 6121 0
-6115 6119 0
351 6121 0
351 -6116 6119 0
351 -6115 6118 0
c ((aux1480 + aux1482 - aux1485)<=0)
6112 -6123 0
6113 -6124 0
6106 -6123 0
6106 6112 -6124 0
6106 6113 -6126 0
6107 -6124 0
6107 6112 -6126 0
6107 6113 -6128 0
c (0<=(aux1480 + aux1482 - aux1485))
-6113 6128 0
-6112 6126 0
-6107 6128 0
-6107 -6113 6126 0
-6107 -6112 6124 0
-6106 6126 0
-6106 -6113 6124 0
-6106 -6112 6123 0
c ((SATLiteral(323) - aux1486 + SATLiteral(218))<=0)
-218 -6130 0
-323 -6130 0
-323 -218 -6131 0
c (0<=(SATLiteral(323) - aux1486 + SATLiteral(218)))
218 6131 0
323 6131 0
323 218 6130 0
c ((SATLiteral(338) - aux1487 + SATLiteral(203))<=0)
-203 -6133 0
-338 -6133 0
-338 -203 -6134 0
c (0<=(SATLiteral(338) - aux1487 + SATLiteral(203)))
203 6134 0
338 6134 0
338 203 6133 0
c ((SATLiteral(53) - aux1488 + SATLiteral(188))<=0)
-188 -6136 0
-53 -6136 0
-53 -188 -6137 0
c (0<=(SATLiteral(53) - aux1488 + SATLiteral(188)))
188 6137 0
53 6137 0
53 188 6136 0
c ((SATLiteral(68) + SATLiteral(83) - aux1489)<=0)
-83 -6139 0
-68 -6139 0
-68 -83 -6140 0
c (0<=(SATLiteral(68) + SATLiteral(83) - aux1489))
83 6140 0
68 6140 0
68 83 6139 0
c ((SATLiteral(353) + aux1489 - aux1490)<=0)
6139 -6142 0
6140 -6143 0
-353 -6142 0
-353 6139 -6143 0
-353 6140 -6145 0
c (0<=(SATLiteral(353) + aux1489 - aux1490))
-6140 6145 0
-6139 6143 0
353 6145 0
353 -6140 6143 0
353 -6139 6142 0
c ((aux1486 + aux1488 - aux1491)<=0)
6136 -6147 0
6137 -6148 0
6130 -6147 0
6130 6136 -6148 0
6130 6137 -6150 0
6131 -6148 0
6131 6136 -6150 0
6131 6137 -6152 0
c (0<=(aux1486 + aux1488 - aux1491))
-6137 6152 0
-6136 6150 0
-6131 6152 0
-6131 -6137 6150 0
-6131 -6136 6148 0
-6130 6150 0
-6130 -6137 6148 0
-6130 -6136 6147 0
c ((SATLiteral(325) - aux1492 + SATLiteral(220))<=0)
-220 -6154 0
-325 -6154 0
-325 -220 -6155 0
c (0<=(SATLiteral(325) - aux1492 + SATLiteral(220)))
220 6155 0
325 6155 0
325 220 6154 0
c ((SATLiteral(340) - aux1493 + SATLiteral(205))<=0)
-205 -6157 0
-340 -6157 0
-340 -205 -6158 0
c (0<=(SATLiteral(340) - aux1493 + SATLiteral(205)))
205 6158 0
340 6158 0
340 205 6157 0
c ((SATLiteral(55) - aux1494 + SATLiteral(190))<=0)
-190 -6160 0
-55 -6160 0
-55 -190 -6161 0
c (0<=(SATLiteral(55) - aux1494 + SATLiteral(190)))
190 6161 0
55 6161 0
55 190 6160 0
c ((SATLiteral(70) + SATLiteral(85) - aux1495)<=0)
-85 -6163 0
-70 -6163 0
-70 -85 -6164 0
c (0<=(SATLiteral(70) + SATLiteral(85) - aux1495))
85 6164 0
70 6164 0
70 85 6163 0
c ((SATLiteral(355) + aux1495 - aux1496)<=0)
6163 -6166 0
6164 -6167 0
-355 -6166 0
-355 6163 -6167 0
-355 6164 -6169 0
c (0<=(SATLiteral(355) + aux1495 - aux1496))
-6164 6169 0
-6163 6167 0
355 6169 0
355 -6164 6167 0
355 -6163 6166 0
c ((aux1492 + aux1494 - aux1497)<=0)
6160 -6171 0
6161 -6172 0
6154 -6171 0
6154 6160 -6172 0
6154 6161 -6174 0
6155 -6172 0
6155 6160 -6174 0
6155 6161 -6176 0
c (0<=(aux1492 + aux1494 - aux1497))
-6161 6176 0
-6160 6174 0
-6155 6176 0
-6155 -6161 6174 0
-6155 -6160 6172 0
-6154 6174 0
-6154 -6161 6172 0
-6154 -6160 6171 0
c ((SATLiteral(327) - aux1498 + SATLiteral(222))<=0)
-222 -6178 0
-327 -6178 0
-327 -222 -6179 0
c (0<=(SATLiteral(327) - aux1498 + SATLiteral(222)))
222 6179 0
327 6179 0
327 222 6178 0
c ((SATLiteral(342) - aux1499 + SATLiteral(207))<=0)
-207 -6181 0
-342 -6181 0
-342 -207 -6182 0
c (0<=(SATLiteral(342) - aux1499 + SATLiteral(207)))
207 6182 0
342 6182 0
342 207 6181 0
c ((SATLiteral(57) - aux1500 + SATLiteral(192))<=0)
-192 -6184 0
-57 -6184 0
-57 -192 -6185 0
c (0<=(SATLiteral(57) - aux1500 + SATLiteral(192)))
192 6185 0
57 6185 0
57 192 6184 0
c ((SATLiteral(72) + SATLiteral(87) - aux1501)<=0)
-87 -6187 0
-72 -6187 0
-72 -87 -6188 0
c (0<=(SATLiteral(72) + SATLiteral(87) - aux1501))
87 6188 0
72 6188 0
72 87 6187 0
c ((SATLiteral(357) + aux1501 - aux1502)<=0)
6187 -6190 0
6188 -6191 0
-357 -6190 0
-357 6187 -6191 0
-357 6188 -6193 0
c (0<=(SATLiteral(357) + aux1501 - aux1502))
-6188 6193 0
-6187 6191 0
357 6193 0
357 -6188 6191 0
357 -6187 6190 0
c ((aux1498 + aux1500 - aux1503)<=0)
6184 -6195 0
6185 -6196 0
6178 -6195 0
6178 6184 -6196 0
6178 6185 -6198 0
6179 -6196 0
6179 6184 -6198 0
6179 6185 -6200 0
c (0<=(aux1498 + aux1500 - aux1503))
-6185 6200 0
-6184 6198 0
-6179 6200 0
-6179 -6185 6198 0
-6179 -6184 6196 0
-6178 6198 0
-6178 -6185 6196 0
-6178 -6184 6195 0
c ((SATLiteral(329) - aux1504 + SATLiteral(224))<=0)
-224 -6202 0
-329 -6202 0
-329 -224 -6203 0
c (0<=(SATLiteral(329) - aux1504 + SATLiteral(224)))
224 6203 0
329 6203 0
329 224 6202 0
c ((SATLiteral(344) - aux1505 + SATLiteral(209))<=0)
-209 -6205 0
-344 -6205 0
-344 -209 -6206 0
c (0<=(SATLiteral(344) - aux1505 + SATLiteral(209)))
209 6206 0
344 6206 0
344 209 6205 0
c ((SATLiteral(59) - aux1506 + SATLiteral(194))<=0)
-194 -6208 0
-59 -6208 0
-59 -194 -6209 0
c (0<=(SATLiteral(59) - aux1506 + SATLiteral(194)))
194 6209 0
59 6209 0
59 194 6208 0
c ((SATLiteral(74) + SATLiteral(89) - aux1507)<=0)
-89 -6211 0
-74 -6211 0
-74 -89 -6212 0
c (0<=(SATLiteral(74) + SATLiteral(89) - aux1507))
89 6212 0
74 6212 0
74 89 6211 0
c ((SATLiteral(359) + aux1507 - aux1508)<=0)
6211 -6214 0
6212 -6215 0
-359 -6214 0
-359 6211 -6215 0
-359 6212 -6217 0
c (0<=(SATLiteral(359) + aux1507 - aux1508))
-6212 6217 0
-6211 6215 0
359 6217 0
359 -6212 6215 0
359 -6211 6214 0
c ((aux1504 + aux1506 - aux1509)<=0)
6208 -6219 0
6209 -6220 0
6202 -6219 0
6202 6208 -6220 0
6202 6209 -6222 0
6203 -6220 0
6203 6208 -6222 0
6203 6209 -6224 0
c (0<=(aux1504 + aux1506 - aux1509))
-6209 6224 0
-6208 6222 0
-6203 6224 0
-6203 -6209 6222 0
-6203 -6208 6220 0
-6202 6222 0
-6202 -6209 6220 0
-6202 -6208 6219 0
c ((SATLiteral(331) - aux1510 + SATLiteral(226))<=0)
-226 -6226 0
-331 -6226 0
-331 -226 -6227 0
c (0<=(SATLiteral(331) - aux1510 + SATLiteral(226)))
226 6227 0
331 6227 0
331 226 6226 0
c ((SATLiteral(346) - aux1511 + SATLiteral(211))<=0)
-211 -6229 0
-346 -6229 0
-346 -211 -6230 0
c (0<=(SATLiteral(346) - aux1511 + SATLiteral(211)))
211 6230 0
346 6230 0
346 211 6229 0
c ((SATLiteral(61) - aux1512 + SATLiteral(196))<=0)
-196 -6232 0
-61 -6232 0
-61 -196 -6233 0
c (0<=(SATLiteral(61) - aux1512 + SATLiteral(196)))
196 6233 0
61 6233 0
61 196 6232 0
c ((SATLiteral(76) + SATLiteral(91) - aux1513)<=0)
-91 -6235 0
-76 -6235 0
-76 -91 -6236 0
c (0<=(SATLiteral(76) + SATLiteral(91) - aux1513))
91 6236 0
76 6236 0
76 91 6235 0
c ((SATLiteral(361) + aux1513 - aux1514)<=0)
6235 -6238 0
6236 -6239 0
-361 -6238 0
-361 6235 -6239 0
-361 6236 -6241 0
c (0<=(SATLiteral(361) + aux1513 - aux1514))
-6236 6241 0
-6235 6239 0
361 6241 0
361 -6236 6239 0
361 -6235 6238 0
c ((aux1510 + aux1512 - aux1515)<=0)
6232 -6243 0
6233 -6244 0
6226 -6243 0
6226 6232 -6244 0
6226 6233 -6246 0
6227 -6244 0
6227 6232 -6246 0
6227 6233 -6248 0
c (0<=(aux1510 + aux1512 - aux1515))
-6233 6248 0
-6232 6246 0
-6227 6248 0
-6227 -6233 6246 0
-6227 -6232 6244 0
-6226 6246 0
-6226 -6233 6244 0
-6226 -6232 6243 0
c ((SATLiteral(-330) - aux1516 + SATLiteral(-225))<=0)
225 -6250 0
330 -6250 0
330 225 -6251 0
c (0<=(SATLiteral(-330) - aux1516 + SATLiteral(-225)))
-225 6251 0
-330 6251 0
-330 -225 6250 0
c ((SATLiteral(-345) - aux1517 + SATLiteral(-210))<=0)
210 -6253 0
345 -6253 0
345 210 -6254 0
c (0<=(SATLiteral(-345) - aux1517 + SATLiteral(-210)))
-210 6254 0
-345 6254 0
-345 -210 6253 0
c ((SATLiteral(-60) - aux1518 + SATLiteral(-195))<=0)
195 -6256 0
60 -6256 0
60 195 -6257 0
c (0<=(SATLiteral(-60) - aux1518 + SATLiteral(-195)))
-195 6257 0
-60 6257 0
-60 -195 6256 0
c ((SATLiteral(-75) + SATLiteral(-90) - aux1519)<=0)
90 -6259 0
75 -6259 0
75 90 -6260 0
c (0<=(SATLiteral(-75) + SATLiteral(-90) - aux1519))
-90 6260 0
-75 6260 0
-75 -90 6259 0
c ((SATLiteral(-360) + aux1519 - aux1520)<=0)
6259 -6262 0
6260 -6263 0
360 -6262 0
360 6259 -6263 0
360 6260 -6265 0
c (0<=(SATLiteral(-360) + aux1519 - aux1520))
-6260 6265 0
-6259 6263 0
-360 6265 0
-360 -6260 6263 0
-360 -6259 6262 0
c ((aux1516 + aux1518 - aux1521)<=0)
6256 -6267 0
6257 -6268 0
6250 -6267 0
6250 6256 -6268 0
6250 6257 -6270 0
6251 -6268 0
6251 6256 -6270 0
6251 6257 -6272 0
c (0<=(aux1516 + aux1518 - aux1521))
-6257 6272 0
-6256 6270 0
-6251 6272 0
-6251 -6257 6270 0
-6251 -6256 6268 0
-6250 6270 0
-6250 -6257 6268 0
-6250 -6256 6267 0
c ((SATLiteral(362) - aux1522 + SATLiteral(257))<=0)
-257 -6274 0
-362 -6274 0
-362 -257 -6275 0
c (0<=(SATLiteral(362) - aux1522 + SATLiteral(257)))
257 6275 0
362 6275 0
362 257 6274 0
c ((SATLiteral(377) - aux1523 + SATLiteral(242))<=0)
-242 -6277 0
-377 -6277 0
-377 -242 -6278 0
c (0<=(SATLiteral(377) - aux1523 + SATLiteral(242)))
242 6278 0
377 6278 0
377 242 6277 0
c ((SATLiteral(92) - aux1524 + SATLiteral(227))<=0)
-227 -6280 0
-92 -6280 0
-92 -227 -6281 0
c (0<=(SATLiteral(92) - aux1524 + SATLiteral(227)))
227 6281 0
92 6281 0
92 227 6280 0
c ((SATLiteral(107) + SATLiteral(122) - aux1525)<=0)
-122 -6283 0
-107 -6283 0
-107 -122 -6284 0
c (0<=(SATLiteral(107) + SATLiteral(122) - aux1525))
122 6284 0
107 6284 0
107 122 6283 0
c ((SATLiteral(392) + aux1525 - aux1526)<=0)
6283 -6286 0
6284 -6287 0
-392 -6286 0
-392 6283 -6287 0
-392 6284 -6289 0
c (0<=(SATLiteral(392) + aux1525 - aux1526))
-6284 6289 0
-6283 6287 0
392 6289 0
392 -6284 6287 0
392 -6283 6286 0
c ((aux1522 + aux1524 - aux1527)<=0)
6280 -6291 0
6281 -6292 0
6274 -6291 0
6274 6280 -6292 0
6274 6281 -6294 0
6275 -6292 0
6275 6280 -6294 0
6275 6281 -6296 0
c (0<=(aux1522 + aux1524 - aux1527))
-6281 6296 0
-6280 6294 0
-6275 6296 0
-6275 -6281 6294 0
-6275 -6280 6292 0
-6274 6294 0
-6274 -6281 6292 0
-6274 -6280 6291 0
c ((SATLiteral(364) - aux1528 + SATLiteral(259))<=0)
-259 -6298 0
-364 -6298 0
-364 -259 -6299 0
c (0<=(SATLiteral(364) - aux1528 + SATLiteral(259)))
259 6299 0
364 6299 0
364 259 6298 0
c ((SATLiteral(379) - aux1529 + SATLiteral(244))<=0)
-244 -6301 0
-379 -6301 0
-379 -244 -6302 0
c (0<=(SATLiteral(379) - aux1529 + SATLiteral(244)))
244 6302 0
379 6302 0
379 244 6301 0
c ((SATLiteral(94) - aux1530 + SATLiteral(229))<=0)
-229 -6304 0
-94 -6304 0
-94 -229 -6305 0
c (0<=(SATLiteral(94) - aux1530 + SATLiteral(229)))
229 6305 0
94 6305 0
94 229 6304 0
c ((SATLiteral(109) + SATLiteral(124) - aux1531)<=0)
-124 -6307 0
-109 -6307 0
-109 -124 -6308 0
c (0<=(SATLiteral(109) + SATLiteral(124) - aux1531))
124 6308 0
109 6308 0
109 124 6307 0
c ((SATLiteral(393) + aux1531 - aux1532)<=0)
6307 -6310 0
6308 -6311 0
-393 -6310 0
-393 6307 -6311 0
-393 6308 -6313 0
c (0<=(SATLiteral(393) + aux1531 - aux1532))
-6308 6313 0
-6307 6311 0
393 6313 0
393 -6308 6311 0
393 -6307 6310 0
c ((aux1528 + aux1530 - aux1533)<=0)
6304 -6315 0
6305 -6316 0
6298 -6315 0
6298 6304 -6316 0
6298 6305 -6318 0
6299 -6316 0
6299 6304 -6318 0
6299 6305 -6320 0
c (0<=(aux1528 + aux1530 - aux1533))
-6305 6320 0
-6304 6318 0
-6299 6320 0
-6299 -6305 6318 0
-6299 -6304 6316 0
-6298 6318 0
-6298 -6305 6316 0
-6298 -6304 6315 0
c ((SATLiteral(366) - aux1534 + SATLiteral(261))<=0)
-261 -6322 0
-366 -6322 0
-366 -261 -6323 0
c (0<=(SATLiteral(366) - aux1534 + SATLiteral(261)))
261 6323 0
366 6323 0
366 261 6322 0
c ((SATLiteral(381) - aux1535 + SATLiteral(246))<=0)
-246 -6325 0
-381 -6325 0
-381 -246 -6326 0
c (0<=(SATLiteral(381) - aux1535 + SATLiteral(246)))
246 6326 0
381 6326 0
381 246 6325 0
c ((SATLiteral(96) - aux1536 + SATLiteral(231))<=0)
-231 -6328 0
-96 -6328 0
-96 -231 -6329 0
c (0<=(SATLiteral(96) - aux1536 + SATLiteral(231)))
231 6329 0
96 6329 0
96 231 6328 0
c ((SATLiteral(111) + SATLiteral(126) - aux1537)<=0)
-126 -6331 0
-111 -6331 0
-111 -126 -6332 0
c (0<=(SATLiteral(111) + SATLiteral(126) - aux1537))
126 6332 0
111 6332 0
111 126 6331 0
c ((SATLiteral(394) + aux1537 - aux1538)<=0)
6331 -6334 0
6332 -6335 0
-394 -6334 0
-394 6331 -6335 0
-394 6332 -6337 0
c (0<=(SATLiteral(394) + aux1537 - aux1538))
-6332 6337 0
-6331 6335 0
394 6337 0
394 -6332 6335 0
394 -6331 6334 0
c ((aux1534 + aux1536 - aux1539)<=0)
6328 -6339 0
6329 -6340 0
6322 -6339 0
6322 6328 -6340 0
6322 6329 -6342 0
6323 -6340 0
6323 6328 -6342 0
6323 6329 -6344 0
c (0<=(aux1534 + aux1536 - aux1539))
-6329 6344 0
-6328 6342 0
-6323 6344 0
-6323 -6329 6342 0
-6323 -6328 6340 0
-6322 6342 0
-6322 -6329 6340 0
-6322 -6328 6339 0
c ((SATLiteral(368) - aux1540 + SATLiteral(263))<=0)
-263 -6346 0
-368 -6346 0
-368 -263 -6347 0
c (0<=(SATLiteral(368) - aux1540 + SATLiteral(263)))
263 6347 0
368 6347 0
368 263 6346 0
c ((SATLiteral(383) - aux1541 + SATLiteral(248))<=0)
-248 -6349 0
-383 -6349 0
-383 -248 -6350 0
c (0<=(SATLiteral(383) - aux1541 + SATLiteral(248)))
248 6350 0
383 6350 0
383 248 6349 0
c ((SATLiteral(98) - aux1542 + SATLiteral(233))<=0)
-233 -6352 0
-98 -6352 0
-98 -233 -6353 0
c (0<=(SATLiteral(98) - aux1542 + SATLiteral(233)))
233 6353 0
98 6353 0
98 233 6352 0
c ((SATLiteral(113) + SATLiteral(128) - aux1543)<=0)
-128 -6355 0
-113 -6355 0
-113 -128 -6356 0
c (0<=(SATLiteral(113) + SATLiteral(128) - aux1543))
128 6356 0
113 6356 0
113 128 6355 0
c ((SATLiteral(395) + aux1543 - aux1544)<=0)
6355 -6358 0
6356 -6359 0
-395 -6358 0
-395 6355 -6359 0
-395 6356 -6361 0
c (0<=(SATLiteral(395) + aux1543 - aux1544))
-6356 6361 0
-6355 6359 0
395 6361 0
395 -6356 6359 0
395 -6355 6358 0
c ((aux1540 + aux1542 - aux1545)<=0)
6352 -6363 0
6353 -6364 0
6346 -6363 0
6346 6352 -6364 0
6346 6353 -6366 0
6347 -6364 0
6347 6352 -6366 0
6347 6353 -6368 0
c (0<=(aux1540 + aux1542 - aux1545))
-6353 6368 0
-6352 6366 0
-6347 6368 0
-6347 -6353 6366 0
-6347 -6352 6364 0
-6346 6366 0
-6346 -6353 6364 0
-6346 -6352 6363 0
c ((SATLiteral(370) - aux1546 + SATLiteral(265))<=0)
-265 -6370 0
-370 -6370 0
-370 -265 -6371 0
c (0<=(SATLiteral(370) - aux1546 + SATLiteral(265)))
265 6371 0
370 6371 0
370 265 6370 0
c ((SATLiteral(385) - aux1547 + SATLiteral(250))<=0)
-250 -6373 0
-385 -6373 0
-385 -250 -6374 0
c (0<=(SATLiteral(385) - aux1547 + SATLiteral(250)))
250 6374 0
385 6374 0
385 250 6373 0
c ((SATLiteral(100) - aux1548 + SATLiteral(235))<=0)
-235 -6376 0
-100 -6376 0
-100 -235 -6377 0
c (0<=(SATLiteral(100) - aux1548 + SATLiteral(235)))
235 6377 0
100 6377 0
100 235 6376 0
c ((SATLiteral(115) + SATLiteral(130) - aux1549)<=0)
-130 -6379 0
-115 -6379 0
-115 -130 -6380 0
c (0<=(SATLiteral(115) + SATLiteral(130) - aux1549))
130 6380 0
115 6380 0
115 130 6379 0
c ((SATLiteral(396) + aux1549 - aux1550)<=0)
6379 -6382 0
6380 -6383 0
-396 -6382 0
-396 6379 -6383 0
-396 6380 -6385 0
c (0<=(SATLiteral(396) + aux1549 - aux1550))
-6380 6385 0
-6379 6383 0
396 6385 0
396 -6380 6383 0
396 -6379 6382 0
c ((aux1546 + aux1548 - aux1551)<=0)
6376 -6387 0
6377 -6388 0
6370 -6387 0
6370 6376 -6388 0
6370 6377 -6390 0
6371 -6388 0
6371 6376 -6390 0
6371 6377 -6392 0
c (0<=(aux1546 + aux1548 - aux1551))
-6377 6392 0
-6376 6390 0
-6371 6392 0
-6371 -6377 6390 0
-6371 -6376 6388 0
-6370 6390 0
-6370 -6377 6388 0
-6370 -6376 6387 0
c ((SATLiteral(372) - aux1552 + SATLiteral(267))<=0)
-267 -6394 0
-372 -6394 0
-372 -267 -6395 0
c (0<=(SATLiteral(372) - aux1552 + SATLiteral(267)))
267 6395 0
372 6395 0
372 267 6394 0
c ((SATLiteral(387) - aux1553 + SATLiteral(252))<=0)
-252 -6397 0
-387 -6397 0
-387 -252 -6398 0
c (0<=(SATLiteral(387) - aux1553 + SATLiteral(252)))
252 6398 0
387 6398 0
387 252 6397 0
c ((SATLiteral(102) - aux1554 + SATLiteral(237))<=0)
-237 -6400 0
-102 -6400 0
-102 -237 -6401 0
c (0<=(SATLiteral(102) - aux1554 + SATLiteral(237)))
237 6401 0
102 6401 0
102 237 6400 0
c ((SATLiteral(117) + SATLiteral(132) - aux1555)<=0)
-132 -6403 0
-117 -6403 0
-117 -132 -6404 0
c (0<=(SATLiteral(117) + SATLiteral(132) - aux1555))
132 6404 0
117 6404 0
117 132 6403 0
c ((SATLiteral(397) + aux1555 - aux1556)<=0)
6403 -6406 0
6404 -6407 0
-397 -6406 0
-397 6403 -6407 0
-397 6404 -6409 0
c (0<=(SATLiteral(397) + aux1555 - aux1556))
-6404 6409 0
-6403 6407 0
397 6409 0
397 -6404 6407 0
397 -6403 6406 0
c ((aux1552 + aux1554 - aux1557)<=0)
6400 -6411 0
6401 -6412 0
6394 -6411 0
6394 6400 -6412 0
6394 6401 -6414 0
6395 -6412 0
6395 6400 -6414 0
6395 6401 -6416 0
c (0<=(aux1552 + aux1554 - aux1557))
-6401 6416 0
-6400 6414 0
-6395 6416 0
-6395 -6401 6414 0
-6395 -6400 6412 0
-6394 6414 0
-6394 -6401 6412 0
-6394 -6400 6411 0
c ((SATLiteral(374) - aux1558 + SATLiteral(269))<=0)
-269 -6418 0
-374 -6418 0
-374 -269 -6419 0
c (0<=(SATLiteral(374) - aux1558 + SATLiteral(269)))
269 6419 0
374 6419 0
374 269 6418 0
c ((SATLiteral(389) - aux1559 + SATLiteral(254))<=0)
-254 -6421 0
-389 -6421 0
-389 -254 -6422 0
c (0<=(SATLiteral(389) - aux1559 + SATLiteral(254)))
254 6422 0
389 6422 0
389 254 6421 0
c ((SATLiteral(104) - aux1560 + SATLiteral(239))<=0)
-239 -6424 0
-104 -6424 0
-104 -239 -6425 0
c (0<=(SATLiteral(104) - aux1560 + SATLiteral(239)))
239 6425 0
104 6425 0
104 239 6424 0
c ((SATLiteral(119) + SATLiteral(134) - aux1561)<=0)
-134 -6427 0
-119 -6427 0
-119 -134 -6428 0
c (0<=(SATLiteral(119) + SATLiteral(134) - aux1561))
134 6428 0
119 6428 0
119 134 6427 0
c ((SATLiteral(398) + aux1561 - aux1562)<=0)
6427 -6430 0
6428 -6431 0
-398 -6430 0
-398 6427 -6431 0
-398 6428 -6433 0
c (0<=(SATLiteral(398) + aux1561 - aux1562))
-6428 6433 0
-6427 6431 0
398 6433 0
398 -6428 6431 0
398 -6427 6430 0
c ((aux1558 + aux1560 - aux1563)<=0)
6424 -6435 0
6425 -6436 0
6418 -6435 0
6418 6424 -6436 0
6418 6425 -6438 0
6419 -6436 0
6419 6424 -6438 0
6419 6425 -6440 0
c (0<=(aux1558 + aux1560 - aux1563))
-6425 6440 0
-6424 6438 0
-6419 6440 0
-6419 -6425 6438 0
-6419 -6424 6436 0
-6418 6438 0
-6418 -6425 6436 0
-6418 -6424 6435 0
c ((SATLiteral(376) - aux1564 + SATLiteral(271))<=0)
-271 -6442 0
-376 -6442 0
-376 -271 -6443 0
c (0<=(SATLiteral(376) - aux1564 + SATLiteral(271)))
271 6443 0
376 6443 0
376 271 6442 0
c ((SATLiteral(391) - aux1565 + SATLiteral(256))<=0)
-256 -6445 0
-391 -6445 0
-391 -256 -6446 0
c (0<=(SATLiteral(391) - aux1565 + SATLiteral(256)))
256 6446 0
391 6446 0
391 256 6445 0
c ((SATLiteral(106) - aux1566 + SATLiteral(241))<=0)
-241 -6448 0
-106 -6448 0
-106 -241 -6449 0
c (0<=(SATLiteral(106) - aux1566 + SATLiteral(241)))
241 6449 0
106 6449 0
106 241 6448 0
c ((SATLiteral(121) + SATLiteral(136) - aux1567)<=0)
-136 -6451 0
-121 -6451 0
-121 -136 -6452 0
c (0<=(SATLiteral(121) + SATLiteral(136) - aux1567))
136 6452 0
121 6452 0
121 136 6451 0
c ((SATLiteral(399) + aux1567 - aux1568)<=0)
6451 -6454 0
6452 -6455 0
-399 -6454 0
-399 6451 -6455 0
-399 6452 -6457 0
c (0<=(SATLiteral(399) + aux1567 - aux1568))
-6452 6457 0
-6451 6455 0
399 6457 0
399 -6452 6455 0
399 -6451 6454 0
c ((aux1564 + aux1566 - aux1569)<=0)
6448 -6459 0
6449 -6460 0
6442 -6459 0
6442 6448 -6460 0
6442 6449 -6462 0
6443 -6460 0
6443 6448 -6462 0
6443 6449 -6464 0
c (0<=(aux1564 + aux1566 - aux1569))
-6449 6464 0
-6448 6462 0
-6443 6464 0
-6443 -6449 6462 0
-6443 -6448 6460 0
-6442 6462 0
-6442 -6449 6460 0
-6442 -6448 6459 0
c ((SATLiteral(-375) - aux1570 + SATLiteral(-270))<=0)
270 -6466 0
375 -6466 0
375 270 -6467 0
c (0<=(SATLiteral(-375) - aux1570 + SATLiteral(-270)))
-270 6467 0
-375 6467 0
-375 -270 6466 0
c ((SATLiteral(-390) - aux1571 + SATLiteral(-255))<=0)
255 -6469 0
390 -6469 0
390 255 -6470 0
c (0<=(SATLiteral(-390) - aux1571 + SATLiteral(-255)))
-255 6470 0
-390 6470 0
-390 -255 6469 0
c ((SATLiteral(-105) - aux1572 + SATLiteral(-240))<=0)
240 -6472 0
105 -6472 0
105 240 -6473 0
c (0<=(SATLiteral(-105) - aux1572 + SATLiteral(-240)))
-240 6473 0
-105 6473 0
-105 -240 6472 0
c ((SATLiteral(-120) + SATLiteral(-135) - aux1573)<=0)
135 -6475 0
120 -6475 0
120 135 -6476 0
c (0<=(SATLiteral(-120) + SATLiteral(-135) - aux1573))
-135 6476 0
-120 6476 0
-120 -135 6475 0
c ((SATLiteral(400) + aux1573 - aux1574)<=0)
6475 -6478 0
6476 -6479 0
-400 -6478 0
-400 6475 -6479 0
-400 6476 -6481 0
c (0<=(SATLiteral(400) + aux1573 - aux1574))
-6476 6481 0
-6475 6479 0
400 6481 0
400 -6476 6479 0
400 -6475 6478 0
c ((aux1570 + aux1572 - aux1575)<=0)
6472 -6483 0
6473 -6484 0
6466 -6483 0
6466 6472 -6484 0
6466 6473 -6486 0
6467 -6484 0
6467 6472 -6486 0
6467 6473 -6488 0
c (0<=(aux1570 + aux1572 - aux1575))
-6473 6488 0
-6472 6486 0
-6467 6488 0
-6467 -6473 6486 0
-6467 -6472 6484 0
-6466 6486 0
-6466 -6473 6484 0
-6466 -6472 6483 0
c ((SATLiteral(677) - aux1576 + SATLiteral(572))<=0)
-572 -6490 0
-677 -6490 0
-677 -572 -6491 0
c (0<=(SATLiteral(677) - aux1576 + SATLiteral(572)))
572 6491 0
677 6491 0
677 572 6490 0
c ((SATLiteral(692) - aux1577 + SATLiteral(557))<=0)
-557 -6493 0
-692 -6493 0
-692 -557 -6494 0
c (0<=(SATLiteral(692) - aux1577 + SATLiteral(557)))
557 6494 0
692 6494 0
692 557 6493 0
c (( - aux1578 + SATLiteral(407) + SATLiteral(542))<=0)
-542 -6496 0
-407 -6496 0
-407 -542 -6497 0
c (0<=( - aux1578 + SATLiteral(407) + SATLiteral(542)))
542 6497 0
407 6497 0
407 542 6496 0
c (( - aux1579 + SATLiteral(422) + SATLiteral(437))<=0)
-437 -6499 0
-422 -6499 0
-422 -437 -6500 0
c (0<=( - aux1579 + SATLiteral(422) + SATLiteral(437)))
437 6500 0
422 6500 0
422 437 6499 0
c ((SATLiteral(707) + aux1579 - aux1580)<=0)
6499 -6502 0
6500 -6503 0
-707 -6502 0
-707 6499 -6503 0
-707 6500 -6505 0
c (0<=(SATLiteral(707) + aux1579 - aux1580))
-6500 6505 0
-6499 6503 0
707 6505 0
707 -6500 6503 0
707 -6499 6502 0
c ((aux1576 + aux1578 - aux1581)<=0)
6496 -6507 0
6497 -6508 0
6490 -6507 0
6490 6496 -6508 0
6490 6497 -6510 0
6491 -6508 0
6491 6496 -6510 0
6491 6497 -6512 0
c (0<=(aux1576 + aux1578 - aux1581))
-6497 6512 0
-6496 6510 0
-6491 6512 0
-6491 -6497 6510 0
-6491 -6496 6508 0
-6490 6510 0
-6490 -6497 6508 0
-6490 -6496 6507 0
c ((SATLiteral(679) - aux1582 + SATLiteral(574))<=0)
-574 -6514 0
-679 -6514 0
-679 -574 -6515 0
c (0<=(SATLiteral(679) - aux1582 + SATLiteral(574)))
574 6515 0
679 6515 0
679 574 6514 0
c ((SATLiteral(694) - aux1583 + SATLiteral(559))<=0)
-559 -6517 0
-694 -6517 0
-694 -559 -6518 0
c (0<=(SATLiteral(694) - aux1583 + SATLiteral(559)))
559 6518 0
694 6518 0
694 559 6517 0
c (( - aux1584 + SATLiteral(409) + SATLiteral(544))<=0)
-544 -6520 0
-409 -6520 0
-409 -544 -6521 0
c (0<=( - aux1584 + SATLiteral(409) + SATLiteral(544)))
544 6521 0
409 6521 0
409 544 6520 0
c (( - aux1585 + SATLiteral(424) + SATLiteral(439))<=0)
-439 -6523 0
-424 -6523 0
-424 -439 -6524 0
c (0<=( - aux1585 + SATLiteral(424) + SATLiteral(439)))
439 6524 0
424 6524 0
424 439 6523 0
c ((SATLiteral(709) + aux1585 - aux1586)<=0)
6523 -6526 0
6524 -6527 0
-709 -6526 0
-709 6523 -6527 0
-709 6524 -6529 0
c (0<=(SATLiteral(709) + aux1585 - aux1586))
-6524 6529 0
-6523 6527 0
709 6529 0
709 -6524 6527 0
709 -6523 6526 0
c ((aux1582 + aux1584 - aux1587)<=0)
6520 -6531 0
6521 -6532 0
6514 -6531 0
6514 6520 -6532 0
6514 6521 -6534 0
6515 -6532 0
6515 6520 -6534 0
6515 6521 -6536 0
c (0<=(aux1582 + aux1584 - aux1587))
-6521 6536 0
-6520 6534 0
-6515 6536 0
-6515 -6521 6534 0
-6515 -6520 6532 0
-6514 6534 0
-6514 -6521 6532 0
-6514 -6520 6531 0
c ((SATLiteral(681) - aux1588 + SATLiteral(576))<=0)
-576 -6538 0
-681 -6538 0
-681 -576 -6539 0
c (0<=(SATLiteral(681) - aux1588 + SATLiteral(576)))
576 6539 0
681 6539 0
681 576 6538 0
c ((SATLiteral(696) - aux1589 + SATLiteral(561))<=0)
-561 -6541 0
-696 -6541 0
-696 -561 -6542 0
c (0<=(SATLiteral(696) - aux1589 + SATLiteral(561)))
561 6542 0
696 6542 0
696 561 6541 0
c (( - aux1590 + SATLiteral(411) + SATLiteral(546))<=0)
-546 -6544 0
-411 -6544 0
-411 -546 -6545 0
c (0<=( - aux1590 + SATLiteral(411) + SATLiteral(546)))
546 6545 0
411 6545 0
411 546 6544 0
c (( - aux1591 + SATLiteral(426) + SATLiteral(441))<=0)
-441 -6547 0
-426 -6547 0
-426 -441 -6548 0
c (0<=( - aux1591 + SATLiteral(426) + SATLiteral(441)))
441 6548 0
426 6548 0
426 441 6547 0
c ((SATLiteral(711) + aux1591 - aux1592)<=0)
6547 -6550 0
6548 -6551 0
-711 -6550 0
-711 6547 -6551 0
-711 6548 -6553 0
c (0<=(SATLiteral(711) + aux1591 - aux1592))
-6548 6553 0
-6547 6551 0
711 6553 0
711 -6548 6551 0
711 -6547 6550 0
c ((aux1588 + aux1590 - aux1593)<=0)
6544 -6555 0
6545 -6556 0
6538 -6555 0
6538 6544 -6556 0
6538 6545 -6558 0
6539 -6556 0
6539 6544 -6558 0
6539 6545 -6560 0
c (0<=(aux1588 + aux1590 - aux1593))
-6545 6560 0
-6544 6558 0
-6539 6560 0
-6539 -6545 6558 0
-6539 -6544 6556 0
-6538 6558 0
-6538 -6545 6556 0
-6538 -6544 6555 0
c ((SATLiteral(683) - aux1594 + SATLiteral(578))<=0)
-578 -6562 0
-683 -6562 0
-683 -578 -6563 0
c (0<=(SATLiteral(683) - aux1594 + SATLiteral(578)))
578 6563 0
683 6563 0
683 578 6562 0
c ((SATLiteral(698) - aux1595 + SATLiteral(563))<=0)
-563 -6565 0
-698 -6565 0
-698 -563 -6566 0
c (0<=(SATLiteral(698) - aux1595 + SATLiteral(563)))
563 6566 0
698 6566 0
698 563 6565 0
c (( - aux1596 + SATLiteral(413) + SATLiteral(548))<=0)
-548 -6568 0
-413 -6568 0
-413 -548 -6569 0
c (0<=( - aux1596 + SATLiteral(413) + SATLiteral(548)))
548 6569 0
413 6569 0
413 548 6568 0
c (( - aux1597 + SATLiteral(428) + SATLiteral(443))<=0)
-443 -6571 0
-428 -6571 0
-428 -443 -6572 0
c (0<=( - aux1597 + SATLiteral(428) + SATLiteral(443)))
443 6572 0
428 6572 0
428 443 6571 0
c ((SATLiteral(713) + aux1597 - aux1598)<=0)
6571 -6574 0
6572 -6575 0
-713 -6574 0
-713 6571 -6575 0
-713 6572 -6577 0
c (0<=(SATLiteral(713) + aux1597 - aux1598))
-6572 6577 0
-6571 6575 0
713 6577 0
713 -6572 6575 0
713 -6571 6574 0
c ((aux1594 + aux1596 - aux1599)<=0)
6568 -6579 0
6569 -6580 0
6562 -6579 0
6562 6568 -6580 0
6562 6569 -6582 0
6563 -6580 0
6563 6568 -6582 0
6563 6569 -6584 0
c (0<=(aux1594 + aux1596 - aux1599))
-6569 6584 0
-6568 6582 0
-6563 6584 0
-6563 -6569 6582 0
-6563 -6568 6580 0
-6562 6582 0
-6562 -6569 6580 0
-6562 -6568 6579 0
c ((SATLiteral(685) - aux1600 + SATLiteral(580))<=0)
-580 -6586 0
-685 -6586 0
-685 -580 -6587 0
c (0<=(SATLiteral(685) - aux1600 + SATLiteral(580)))
580 6587 0
685 6587 0
685 580 6586 0
c ((SATLiteral(700) - aux1601 + SATLiteral(565))<=0)
-565 -6589 0
-700 -6589 0
-700 -565 -6590 0
c (0<=(SATLiteral(700) - aux1601 + SATLiteral(565)))
565 6590 0
700 6590 0
700 565 6589 0
c (( - aux1602 + SATLiteral(415) + SATLiteral(550))<=0)
-550 -6592 0
-415 -6592 0
-415 -550 -6593 0
c (0<=( - aux1602 + SATLiteral(415) + SATLiteral(550)))
550 6593 0
415 6593 0
415 550 6592 0
c (( - aux1603 + SATLiteral(430) + SATLiteral(445))<=0)
-445 -6595 0
-430 -6595 0
-430 -445 -6596 0
c (0<=( - aux1603 + SATLiteral(430) + SATLiteral(445)))
445 6596 0
430 6596 0
430 445 6595 0
c ((SATLiteral(715) + aux1603 - aux1604)<=0)
6595 -6598 0
6596 -6599 0
-715 -6598 0
-715 6595 -6599 0
-715 6596 -6601 0
c (0<=(SATLiteral(715) + aux1603 - aux1604))
-6596 6601 0
-6595 6599 0
715 6601 0
715 -6596 6599 0
715 -6595 6598 0
c ((aux1600 + aux1602 - aux1605)<=0)
6592 -6603 0
6593 -6604 0
6586 -6603 0
6586 6592 -6604 0
6586 6593 -6606 0
6587 -6604 0
6587 6592 -6606 0
6587 6593 -6608 0
c (0<=(aux1600 + aux1602 - aux1605))
-6593 6608 0
-6592 6606 0
-6587 6608 0
-6587 -6593 6606 0
-6587 -6592 6604 0
-6586 6606 0
-6586 -6593 6604 0
-6586 -6592 6603 0
c ((SATLiteral(687) - aux1606 + SATLiteral(582))<=0)
-582 -6610 0
-687 -6610 0
-687 -582 -6611 0
c (0<=(SATLiteral(687) - aux1606 + SATLiteral(582)))
582 6611 0
687 6611 0
687 582 6610 0
c ((SATLiteral(702) - aux1607 + SATLiteral(567))<=0)
-567 -6613 0
-702 -6613 0
-702 -567 -6614 0
c (0<=(SATLiteral(702) - aux1607 + SATLiteral(567)))
567 6614 0
702 6614 0
702 567 6613 0
c (( - aux1608 + SATLiteral(417) + SATLiteral(552))<=0)
-552 -6616 0
-417 -6616 0
-417 -552 -6617 0
c (0<=( - aux1608 + SATLiteral(417) + SATLiteral(552)))
552 6617 0
417 6617 0
417 552 6616 0
c (( - aux1609 + SATLiteral(432) + SATLiteral(447))<=0)
-447 -6619 0
-432 -6619 0
-432 -447 -6620 0
c (0<=( - aux1609 + SATLiteral(432) + SATLiteral(447)))
447 6620 0
432 6620 0
432 447 6619 0
c ((SATLiteral(717) + aux1609 - aux1610)<=0)
6619 -6622 0
6620 -6623 0
-717 -6622 0
-717 6619 -6623 0
-717 6620 -6625 0
c (0<=(SATLiteral(717) + aux1609 - aux1610))
-6620 6625 0
-6619 6623 0
717 6625 0
717 -6620 6623 0
717 -6619 6622 0
c ((aux1606 + aux1608 - aux1611)<=0)
6616 -6627 0
6617 -6628 0
6610 -6627 0
6610 6616 -6628 0
6610 6617 -6630 0
6611 -6628 0
6611 6616 -6630 0
6611 6617 -6632 0
c (0<=(aux1606 + aux1608 - aux1611))
-6617 6632 0
-6616 6630 0
-6611 6632 0
-6611 -6617 6630 0
-6611 -6616 6628 0
-6610 6630 0
-6610 -6617 6628 0
-6610 -6616 6627 0
c ((SATLiteral(689) - aux1612 + SATLiteral(584))<=0)
-584 -6634 0
-689 -6634 0
-689 -584 -6635 0
c (0<=(SATLiteral(689) - aux1612 + SATLiteral(584)))
584 6635 0
689 6635 0
689 584 6634 0
c ((SATLiteral(704) - aux1613 + SATLiteral(569))<=0)
-569 -6637 0
-704 -6637 0
-704 -569 -6638 0
c (0<=(SATLiteral(704) - aux1613 + SATLiteral(569)))
569 6638 0
704 6638 0
704 569 6637 0
c (( - aux1614 + SATLiteral(419) + SATLiteral(554))<=0)
-554 -6640 0
-419 -6640 0
-419 -554 -6641 0
c (0<=( - aux1614 + SATLiteral(419) + SATLiteral(554)))
554 6641 0
419 6641 0
419 554 6640 0
c (( - aux1615 + SATLiteral(434) + SATLiteral(449))<=0)
-449 -6643 0
-434 -6643 0
-434 -449 -6644 0
c (0<=( - aux1615 + SATLiteral(434) + SATLiteral(449)))
449 6644 0
434 6644 0
434 449 6643 0
c ((SATLiteral(719) + aux1615 - aux1616)<=0)
6643 -6646 0
6644 -6647 0
-719 -6646 0
-719 6643 -6647 0
-719 6644 -6649 0
c (0<=(SATLiteral(719) + aux1615 - aux1616))
-6644 6649 0
-6643 6647 0
719 6649 0
719 -6644 6647 0
719 -6643 6646 0
c ((aux1612 + aux1614 - aux1617)<=0)
6640 -6651 0
6641 -6652 0
6634 -6651 0
6634 6640 -6652 0
6634 6641 -6654 0
6635 -6652 0
6635 6640 -6654 0
6635 6641 -6656 0
c (0<=(aux1612 + aux1614 - aux1617))
-6641 6656 0
-6640 6654 0
-6635 6656 0
-6635 -6641 6654 0
-6635 -6640 6652 0
-6634 6654 0
-6634 -6641 6652 0
-6634 -6640 6651 0
c ((SATLiteral(691) - aux1618 + SATLiteral(586))<=0)
-586 -6658 0
-691 -6658 0
-691 -586 -6659 0
c (0<=(SATLiteral(691) - aux1618 + SATLiteral(586)))
586 6659 0
691 6659 0
691 586 6658 0
c ((SATLiteral(706) - aux1619 + SATLiteral(571))<=0)
-571 -6661 0
-706 -6661 0
-706 -571 -6662 0
c (0<=(SATLiteral(706) - aux1619 + SATLiteral(571)))
571 6662 0
706 6662 0
706 571 6661 0
c (( - aux1620 + SATLiteral(421) + SATLiteral(556))<=0)
-556 -6664 0
-421 -6664 0
-421 -556 -6665 0
c (0<=( - aux1620 + SATLiteral(421) + SATLiteral(556)))
556 6665 0
421 6665 0
421 556 6664 0
c (( - aux1621 + SATLiteral(436) + SATLiteral(451))<=0)
-451 -6667 0
-436 -6667 0
-436 -451 -6668 0
c (0<=( - aux1621 + SATLiteral(436) + SATLiteral(451)))
451 6668 0
436 6668 0
436 451 6667 0
c ((SATLiteral(721) + aux1621 - aux1622)<=0)
6667 -6670 0
6668 -6671 0
-721 -6670 0
-721 6667 -6671 0
-721 6668 -6673 0
c (0<=(SATLiteral(721) + aux1621 - aux1622))
-6668 6673 0
-6667 6671 0
721 6673 0
721 -6668 6671 0
721 -6667 6670 0
c ((aux1618 + aux1620 - aux1623)<=0)
6664 -6675 0
6665 -6676 0
6658 -6675 0
6658 6664 -6676 0
6658 6665 -6678 0
6659 -6676 0
6659 6664 -6678 0
6659 6665 -6680 0
c (0<=(aux1618 + aux1620 - aux1623))
-6665 6680 0
-6664 6678 0
-6659 6680 0
-6659 -6665 6678 0
-6659 -6664 6676 0
-6658 6678 0
-6658 -6665 6676 0
-6658 -6664 6675 0
c ((SATLiteral(-690) - aux1624 + SATLiteral(-585))<=0)
585 -6682 0
690 -6682 0
690 585 -6683 0
c (0<=(SATLiteral(-690) - aux1624 + SATLiteral(-585)))
-585 6683 0
-690 6683 0
-690 -585 6682 0
c ((SATLiteral(-705) - aux1625 + SATLiteral(-570))<=0)
570 -6685 0
705 -6685 0
705 570 -6686 0
c (0<=(SATLiteral(-705) - aux1625 + SATLiteral(-570)))
-570 6686 0
-705 6686 0
-705 -570 6685 0
c (( - aux1626 + SATLiteral(-420) + SATLiteral(-555))<=0)
555 -6688 0
420 -6688 0
420 555 -6689 0
c (0<=( - aux1626 + SATLiteral(-420) + SATLiteral(-555)))
-555 6689 0
-420 6689 0
-420 -555 6688 0
c (( - aux1627 + SATLiteral(-435) + SATLiteral(-450))<=0)
450 -6691 0
435 -6691 0
435 450 -6692 0
c (0<=( - aux1627 + SATLiteral(-435) + SATLiteral(-450)))
-450 6692 0
-435 6692 0
-435 -450 6691 0
c ((SATLiteral(-720) + aux1627 - aux1628)<=0)
6691 -6694 0
6692 -6695 0
720 -6694 0
720 6691 -6695 0
720 6692 -6697 0
c (0<=(SATLiteral(-720) + aux1627 - aux1628))
-6692 6697 0
-6691 6695 0
-720 6697 0
-720 -6692 6695 0
-720 -6691 6694 0
c ((aux1624 + aux1626 - aux1629)<=0)
6688 -6699 0
6689 -6700 0
6682 -6699 0
6682 6688 -6700 0
6682 6689 -6702 0
6683 -6700 0
6683 6688 -6702 0
6683 6689 -6704 0
c (0<=(aux1624 + aux1626 - aux1629))
-6689 6704 0
-6688 6702 0
-6683 6704 0
-6683 -6689 6702 0
-6683 -6688 6700 0
-6682 6702 0
-6682 -6689 6700 0
-6682 -6688 6699 0
c ((SATLiteral(722) - aux1630 + SATLiteral(617))<=0)
-617 -6706 0
-722 -6706 0
-722 -617 -6707 0
c (0<=(SATLiteral(722) - aux1630 + SATLiteral(617)))
617 6707 0
722 6707 0
722 617 6706 0
c ((SATLiteral(737) - aux1631 + SATLiteral(602))<=0)
-602 -6709 0
-737 -6709 0
-737 -602 -6710 0
c (0<=(SATLiteral(737) - aux1631 + SATLiteral(602)))
602 6710 0
737 6710 0
737 602 6709 0
c (( - aux1632 + SATLiteral(452) + SATLiteral(587))<=0)
-587 -6712 0
-452 -6712 0
-452 -587 -6713 0
c (0<=( - aux1632 + SATLiteral(452) + SATLiteral(587)))
587 6713 0
452 6713 0
452 587 6712 0
c (( - aux1633 + SATLiteral(467) + SATLiteral(482))<=0)
-482 -6715 0
-467 -6715 0
-467 -482 -6716 0
c (0<=( - aux1633 + SATLiteral(467) + SATLiteral(482)))
482 6716 0
467 6716 0
467 482 6715 0
c ((SATLiteral(752) + aux1633 - aux1634)<=0)
6715 -6718 0
6716 -6719 0
-752 -6718 0
-752 6715 -6719 0
-752 6716 -6721 0
c (0<=(SATLiteral(752) + aux1633 - aux1634))
-6716 6721 0
-6715 6719 0
752 6721 0
752 -6716 6719 0
752 -6715 6718 0
c ((aux1630 + aux1632 - aux1635)<=0)
6712 -6723 0
6713 -6724 0
6706 -6723 0
6706 6712 -6724 0
6706 6713 -6726 0
6707 -6724 0
6707 6712 -6726 0
6707 6713 -6728 0
c (0<=(aux1630 + aux1632 - aux1635))
-6713 6728 0
-6712 6726 0
-6707 6728 0
-6707 -6713 6726 0
-6707 -6712 6724 0
-6706 6726 0
-6706 -6713 6724 0
-6706 -6712 6723 0
c ((SATLiteral(724) - aux1636 + SATLiteral(619))<=0)
-619 -6730 0
-724 -6730 0
-724 -619 -6731 0
c (0<=(SATLiteral(724) - aux1636 + SATLiteral(619)))
619 6731 0
724 6731 0
724 619 6730 0
c ((SATLiteral(739) - aux1637 + SATLiteral(604))<=0)
-604 -6733 0
-739 -6733 0
-739 -604 -6734 0
c (0<=(SATLiteral(739) - aux1637 + SATLiteral(604)))
604 6734 0
739 6734 0
739 604 6733 0
c (( - aux1638 + SATLiteral(454) + SATLiteral(589))<=0)
-589 -6736 0
-454 -6736 0
-454 -589 -6737 0
c (0<=( - aux1638 + SATLiteral(454) + SATLiteral(589)))
589 6737 0
454 6737 0
454 589 6736 0
c (( - aux1639 + SATLiteral(469) + SATLiteral(484))<=0)
-484 -6739 0
-469 -6739 0
-469 -484 -6740 0
c (0<=( - aux1639 + SATLiteral(469) + SATLiteral(484)))
484 6740 0
469 6740 0
469 484 6739 0
c ((SATLiteral(754) + aux1639 - aux1640)<=0)
6739 -6742 0
6740 -6743 0
-754 -6742 0
-754 6739 -6743 0
-754 6740 -6745 0
c (0<=(SATLiteral(754) + aux1639 - aux1640))
-6740 6745 0
-6739 6743 0
754 6745 0
754 -6740 6743 0
754 -6739 6742 0
c ((aux1636 + aux1638 - aux1641)<=0)
6736 -6747 0
6737 -6748 0
6730 -6747 0
6730 6736 -6748 0
6730 6737 -6750 0
6731 -6748 0
6731 6736 -6750 0
6731 6737 -6752 0
c (0<=(aux1636 + aux1638 - aux1641))
-6737 6752 0
-6736 6750 0
-6731 6752 0
-6731 -6737 6750 0
-6731 -6736 6748 0
-6730 6750 0
-6730 -6737 6748 0
-6730 -6736 6747 0
c ((SATLiteral(726) - aux1642 + SATLiteral(621))<=0)
-621 -6754 0
-726 -6754 0
-726 -621 -6755 0
c (0<=(SATLiteral(726) - aux1642 + SATLiteral(621)))
621 6755 0
726 6755 0
726 621 6754 0
c ((SATLiteral(741) - aux1643 + SATLiteral(606))<=0)
-606 -6757 0
-741 -6757 0
-741 -606 -6758 0
c (0<=(SATLiteral(741) - aux1643 + SATLiteral(606)))
606 6758 0
741 6758 0
741 606 6757 0
c (( - aux1644 + SATLiteral(456) + SATLiteral(591))<=0)
-591 -6760 0
-456 -6760 0
-456 -591 -6761 0
c (0<=( - aux1644 + SATLiteral(456) + SATLiteral(591)))
591 6761 0
456 6761 0
456 591 6760 0
c (( - aux1645 + SATLiteral(471) + SATLiteral(486))<=0)
-486 -6763 0
-471 -6763 0
-471 -486 -6764 0
c (0<=( - aux1645 + SATLiteral(471) + SATLiteral(486)))
486 6764 0
471 6764 0
471 486 6763 0
c ((SATLiteral(756) + aux1645 - aux1646)<=0)
6763 -6766 0
6764 -6767 0
-756 -6766 0
-756 6763 -6767 0
-756 6764 -6769 0
c (0<=(SATLiteral(756) + aux1645 - aux1646))
-6764 6769 0
-6763 6767 0
756 6769 0
756 -6764 6767 0
756 -6763 6766 0
c ((aux1642 + aux1644 - aux1647)<=0)
6760 -6771 0
6761 -6772 0
6754 -6771 0
6754 6760 -6772 0
6754 6761 -6774 0
6755 -6772 0
6755 6760 -6774 0
6755 6761 -6776 0
c (0<=(aux1642 + aux1644 - aux1647))
-6761 6776 0
-6760 6774 0
-6755 6776 0
-6755 -6761 6774 0
-6755 -6760 6772 0
-6754 6774 0
-6754 -6761 6772 0
-6754 -6760 6771 0
c ((SATLiteral(728) - aux1648 + SATLiteral(623))<=0)
-623 -6778 0
-728 -6778 0
-728 -623 -6779 0
c (0<=(SATLiteral(728) - aux1648 + SATLiteral(623)))
623 6779 0
728 6779 0
728 623 6778 0
c ((SATLiteral(743) - aux1649 + SATLiteral(608))<=0)
-608 -6781 0
-743 -6781 0
-743 -608 -6782 0
c (0<=(SATLiteral(743) - aux1649 + SATLiteral(608)))
608 6782 0
743 6782 0
743 608 6781 0
c (( - aux1650 + SATLiteral(458) + SATLiteral(593))<=0)
-593 -6784 0
-458 -6784 0
-458 -593 -6785 0
c (0<=( - aux1650 + SATLiteral(458) + SATLiteral(593)))
593 6785 0
458 6785 0
458 593 6784 0
c (( - aux1651 + SATLiteral(473) + SATLiteral(488))<=0)
-488 -6787 0
-473 -6787 0
-473 -488 -6788 0
c (0<=( - aux1651 + SATLiteral(473) + SATLiteral(488)))
488 6788 0
473 6788 0
473 488 6787 0
c ((SATLiteral(758) + aux1651 - aux1652)<=0)
6787 -6790 0
6788 -6791 0
-758 -6790 0
-758 6787 -6791 0
-758 6788 -6793 0
c (0<=(SATLiteral(758) + aux1651 - aux1652))
-6788 6793 0
-6787 6791 0
758 6793 0
758 -6788 6791 0
758 -6787 6790 0
c ((aux1648 + aux1650 - aux1653)<=0)
6784 -6795 0
6785 -6796 0
6778 -6795 0
6778 6784 -6796 0
6778 6785 -6798 0
6779 -6796 0
6779 6784 -6798 0
6779 6785 -6800 0
c (0<=(aux1648 + aux1650 - aux1653))
-6785 6800 0
-6784 6798 0
-6779 6800 0
-6779 -6785 6798 0
-6779 -6784 6796 0
-6778 6798 0
-6778 -6785 6796 0
-6778 -6784 6795 0
c ((SATLiteral(730) - aux1654 + SATLiteral(625))<=0)
-625 -6802 0
-730 -6802 0
-730 -625 -6803 0
c (0<=(SATLiteral(730) - aux1654 + SATLiteral(625)))
625 6803 0
730 6803 0
730 625 6802 0
c ((SATLiteral(745) - aux1655 + SATLiteral(610))<=0)
-610 -6805 0
-745 -6805 0
-745 -610 -6806 0
c (0<=(SATLiteral(745) - aux1655 + SATLiteral(610)))
610 6806 0
745 6806 0
745 610 6805 0
c (( - aux1656 + SATLiteral(460) + SATLiteral(595))<=0)
-595 -6808 0
-460 -6808 0
-460 -595 -6809 0
c (0<=( - aux1656 + SATLiteral(460) + SATLiteral(595)))
595 6809 0
460 6809 0
460 595 6808 0
c (( - aux1657 + SATLiteral(475) + SATLiteral(490))<=0)
-490 -6811 0
-475 -6811 0
-475 -490 -6812 0
c (0<=( - aux1657 + SATLiteral(475) + SATLiteral(490)))
490 6812 0
475 6812 0
475 490 6811 0
c ((SATLiteral(760) + aux1657 - aux1658)<=0)
6811 -6814 0
6812 -6815 0
-760 -6814 0
-760 6811 -6815 0
-760 6812 -6817 0
c (0<=(SATLiteral(760) + aux1657 - aux1658))
-6812 6817 0
-6811 6815 0
760 6817 0
760 -6812 6815 0
760 -6811 6814 0
c ((aux1654 + aux1656 - aux1659)<=0)
6808 -6819 0
6809 -6820 0
6802 -6819 0
6802 6808 -6820 0
6802 6809 -6822 0
6803 -6820 0
6803 6808 -6822 0
6803 6809 -6824 0
c (0<=(aux1654 + aux1656 - aux1659))
-6809 6824 0
-6808 6822 0
-6803 6824 0
-6803 -6809 6822 0
-6803 -6808 6820 0
-6802 6822 0
-6802 -6809 6820 0
-6802 -6808 6819 0
c ((SATLiteral(732) - aux1660 + SATLiteral(627))<=0)
-627 -6826 0
-732 -6826 0
-732 -627 -6827 0
c (0<=(SATLiteral(732) - aux1660 + SATLiteral(627)))
627 6827 0
732 6827 0
732 627 6826 0
c ((SATLiteral(747) - aux1661 + SATLiteral(612))<=0)
-612 -6829 0
-747 -6829 0
-747 -612 -6830 0
c (0<=(SATLiteral(747) - aux1661 + SATLiteral(612)))
612 6830 0
747 6830 0
747 612 6829 0
c (( - aux1662 + SATLiteral(462) + SATLiteral(597))<=0)
-597 -6832 0
-462 -6832 0
-462 -597 -6833 0
c (0<=( - aux1662 + SATLiteral(462) + SATLiteral(597)))
597 6833 0
462 6833 0
462 597 6832 0
c (( - aux1663 + SATLiteral(477) + SATLiteral(492))<=0)
-492 -6835 0
-477 -6835 0
-477 -492 -6836 0
c (0<=( - aux1663 + SATLiteral(477) + SATLiteral(492)))
492 6836 0
477 6836 0
477 492 6835 0
c ((SATLiteral(762) + aux1663 - aux1664)<=0)
6835 -6838 0
6836 -6839 0
-762 -6838 0
-762 6835 -6839 0
-762 6836 -6841 0
c (0<=(SATLiteral(762) + aux1663 - aux1664))
-6836 6841 0
-6835 6839 0
762 6841 0
762 -6836 6839 0
762 -6835 6838 0
c ((aux1660 + aux1662 - aux1665)<=0)
6832 -6843 0
6833 -6844 0
6826 -6843 0
6826 6832 -6844 0
6826 6833 -6846 0
6827 -6844 0
6827 6832 -6846 0
6827 6833 -6848 0
c (0<=(aux1660 + aux1662 - aux1665))
-6833 6848 0
-6832 6846 0
-6827 6848 0
-6827 -6833 6846 0
-6827 -6832 6844 0
-6826 6846 0
-6826 -6833 6844 0
-6826 -6832 6843 0
c ((SATLiteral(734) - aux1666 + SATLiteral(629))<=0)
-629 -6850 0
-734 -6850 0
-734 -629 -6851 0
c (0<=(SATLiteral(734) - aux1666 + SATLiteral(629)))
629 6851 0
734 6851 0
734 629 6850 0
c ((SATLiteral(749) - aux1667 + SATLiteral(614))<=0)
-614 -6853 0
-749 -6853 0
-749 -614 -6854 0
c (0<=(SATLiteral(749) - aux1667 + SATLiteral(614)))
614 6854 0
749 6854 0
749 614 6853 0
c (( - aux1668 + SATLiteral(464) + SATLiteral(599))<=0)
-599 -6856 0
-464 -6856 0
-464 -599 -6857 0
c (0<=( - aux1668 + SATLiteral(464) + SATLiteral(599)))
599 6857 0
464 6857 0
464 599 6856 0
c (( - aux1669 + SATLiteral(479) + SATLiteral(494))<=0)
-494 -6859 0
-479 -6859 0
-479 -494 -6860 0
c (0<=( - aux1669 + SATLiteral(479) + SATLiteral(494)))
494 6860 0
479 6860 0
479 494 6859 0
c ((SATLiteral(764) + aux1669 - aux1670)<=0)
6859 -6862 0
6860 -6863 0
-764 -6862 0
-764 6859 -6863 0
-764 6860 -6865 0
c (0<=(SATLiteral(764) + aux1669 - aux1670))
-6860 6865 0
-6859 6863 0
764 6865 0
764 -6860 6863 0
764 -6859 6862 0
c ((aux1666 + aux1668 - aux1671)<=0)
6856 -6867 0
6857 -6868 0
6850 -6867 0
6850 6856 -6868 0
6850 6857 -6870 0
6851 -6868 0
6851 6856 -6870 0
6851 6857 -6872 0
c (0<=(aux1666 + aux1668 - aux1671))
-6857 6872 0
-6856 6870 0
-6851 6872 0
-6851 -6857 6870 0
-6851 -6856 6868 0
-6850 6870 0
-6850 -6857 6868 0
-6850 -6856 6867 0
c ((SATLiteral(736) - aux1672 + SATLiteral(631))<=0)
-631 -6874 0
-736 -6874 0
-736 -631 -6875 0
c (0<=(SATLiteral(736) - aux1672 + SATLiteral(631)))
631 6875 0
736 6875 0
736 631 6874 0
c ((SATLiteral(751) - aux1673 + SATLiteral(616))<=0)
-616 -6877 0
-751 -6877 0
-751 -616 -6878 0
c (0<=(SATLiteral(751) - aux1673 + SATLiteral(616)))
616 6878 0
751 6878 0
751 616 6877 0
c (( - aux1674 + SATLiteral(466) + SATLiteral(601))<=0)
-601 -6880 0
-466 -6880 0
-466 -601 -6881 0
c (0<=( - aux1674 + SATLiteral(466) + SATLiteral(601)))
601 6881 0
466 6881 0
466 601 6880 0
c (( - aux1675 + SATLiteral(481) + SATLiteral(496))<=0)
-496 -6883 0
-481 -6883 0
-481 -496 -6884 0
c (0<=( - aux1675 + SATLiteral(481) + SATLiteral(496)))
496 6884 0
481 6884 0
481 496 6883 0
c ((SATLiteral(766) + aux1675 - aux1676)<=0)
6883 -6886 0
6884 -6887 0
-766 -6886 0
-766 6883 -6887 0
-766 6884 -6889 0
c (0<=(SATLiteral(766) + aux1675 - aux1676))
-6884 6889 0
-6883 6887 0
766 6889 0
766 -6884 6887 0
766 -6883 6886 0
c ((aux1672 + aux1674 - aux1677)<=0)
6880 -6891 0
6881 -6892 0
6874 -6891 0
6874 6880 -6892 0
6874 6881 -6894 0
6875 -6892 0
6875 6880 -6894 0
6875 6881 -6896 0
c (0<=(aux1672 + aux1674 - aux1677))
-6881 6896 0
-6880 6894 0
-6875 6896 0
-6875 -6881 6894 0
-6875 -6880 6892 0
-6874 6894 0
-6874 -6881 6892 0
-6874 -6880 6891 0
c ((SATLiteral(-735) - aux1678 + SATLiteral(-630))<=0)
630 -6898 0
735 -6898 0
735 630 -6899 0
c (0<=(SATLiteral(-735) - aux1678 + SATLiteral(-630)))
-630 6899 0
-735 6899 0
-735 -630 6898 0
c ((SATLiteral(-750) - aux1679 + SATLiteral(-615))<=0)
615 -6901 0
750 -6901 0
750 615 -6902 0
c (0<=(SATLiteral(-750) - aux1679 + SATLiteral(-615)))
-615 6902 0
-750 6902 0
-750 -615 6901 0
c (( - aux1680 + SATLiteral(-465) + SATLiteral(-600))<=0)
600 -6904 0
465 -6904 0
465 600 -6905 0
c (0<=( - aux1680 + SATLiteral(-465) + SATLiteral(-600)))
-600 6905 0
-465 6905 0
-465 -600 6904 0
c (( - aux1681 + SATLiteral(-480) + SATLiteral(-495))<=0)
495 -6907 0
480 -6907 0
480 495 -6908 0
c (0<=( - aux1681 + SATLiteral(-480) + SATLiteral(-495)))
-495 6908 0
-480 6908 0
-480 -495 6907 0
c ((SATLiteral(-765) + aux1681 - aux1682)<=0)
6907 -6910 0
6908 -6911 0
765 -6910 0
765 6907 -6911 0
765 6908 -6913 0
c (0<=(SATLiteral(-765) + aux1681 - aux1682))
-6908 6913 0
-6907 6911 0
-765 6913 0
-765 -6908 6911 0
-765 -6907 6910 0
c ((aux1678 + aux1680 - aux1683)<=0)
6904 -6915 0
6905 -6916 0
6898 -6915 0
6898 6904 -6916 0
6898 6905 -6918 0
6899 -6916 0
6899 6904 -6918 0
6899 6905 -6920 0
c (0<=(aux1678 + aux1680 - aux1683))
-6905 6920 0
-6904 6918 0
-6899 6920 0
-6899 -6905 6918 0
-6899 -6904 6916 0
-6898 6918 0
-6898 -6905 6916 0
-6898 -6904 6915 0
c ((SATLiteral(767) - aux1684 + SATLiteral(662))<=0)
-662 -6922 0
-767 -6922 0
-767 -662 -6923 0
c (0<=(SATLiteral(767) - aux1684 + SATLiteral(662)))
662 6923 0
767 6923 0
767 662 6922 0
c ((SATLiteral(782) - aux1685 + SATLiteral(647))<=0)
-647 -6925 0
-782 -6925 0
-782 -647 -6926 0
c (0<=(SATLiteral(782) - aux1685 + SATLiteral(647)))
647 6926 0
782 6926 0
782 647 6925 0
c (( - aux1686 + SATLiteral(497) + SATLiteral(632))<=0)
-632 -6928 0
-497 -6928 0
-497 -632 -6929 0
c (0<=( - aux1686 + SATLiteral(497) + SATLiteral(632)))
632 6929 0
497 6929 0
497 632 6928 0
c (( - aux1687 + SATLiteral(512) + SATLiteral(527))<=0)
-527 -6931 0
-512 -6931 0
-512 -527 -6932 0
c (0<=( - aux1687 + SATLiteral(512) + SATLiteral(527)))
527 6932 0
512 6932 0
512 527 6931 0
c ((SATLiteral(797) + aux1687 - aux1688)<=0)
6931 -6934 0
6932 -6935 0
-797 -6934 0
-797 6931 -6935 0
-797 6932 -6937 0
c (0<=(SATLiteral(797) + aux1687 - aux1688))
-6932 6937 0
-6931 6935 0
797 6937 0
797 -6932 6935 0
797 -6931 6934 0
c ((aux1684 + aux1686 - aux1689)<=0)
6928 -6939 0
6929 -6940 0
6922 -6939 0
6922 6928 -6940 0
6922 6929 -6942 0
6923 -6940 0
6923 6928 -6942 0
6923 6929 -6944 0
c (0<=(aux1684 + aux1686 - aux1689))
-6929 6944 0
-6928 6942 0
-6923 6944 0
-6923 -6929 6942 0
-6923 -6928 6940 0
-6922 6942 0
-6922 -6929 6940 0
-6922 -6928 6939 0
c ((SATLiteral(769) - aux1690 + SATLiteral(664))<=0)
-664 -6946 0
-769 -6946 0
-769 -664 -6947 0
c (0<=(SATLiteral(769) - aux1690 + SATLiteral(664)))
664 6947 0
769 6947 0
769 664 6946 0
c ((SATLiteral(784) - aux1691 + SATLiteral(649))<=0)
-649 -6949 0
-784 -6949 0
-784 -649 -6950 0
c (0<=(SATLiteral(784) - aux1691 + SATLiteral(649)))
649 6950 0
784 6950 0
784 649 6949 0
c (( - aux1692 + SATLiteral(499) + SATLiteral(634))<=0)
-634 -6952 0
-499 -6952 0
-499 -634 -6953 0
c (0<=( - aux1692 + SATLiteral(499) + SATLiteral(634)))
634 6953 0
499 6953 0
499 634 6952 0
c (( - aux1693 + SATLiteral(514) + SATLiteral(529))<=0)
-529 -6955 0
-514 -6955 0
-514 -529 -6956 0
c (0<=( - aux1693 + SATLiteral(514) + SATLiteral(529)))
529 6956 0
514 6956 0
514 529 6955 0
c ((SATLiteral(799) + aux1693 - aux1694)<=0)
6955 -6958 0
6956 -6959 0
-799 -6958 0
-799 6955 -6959 0
-799 6956 -6961 0
c (0<=(SATLiteral(799) + aux1693 - aux1694))
-6956 6961 0
-6955 6959 0
799 6961 0
799 -6956 6959 0
799 -6955 6958 0
c ((aux1690 + aux1692 - aux1695)<=0)
6952 -6963 0
6953 -6964 0
6946 -6963 0
6946 6952 -6964 0
6946 6953 -6966 0
6947 -6964 0
6947 6952 -6966 0
6947 6953 -6968 0
c (0<=(aux1690 + aux1692 - aux1695))
-6953 6968 0
-6952 6966 0
-6947 6968 0
-6947 -6953 6966 0
-6947 -6952 6964 0
-6946 6966 0
-6946 -6953 6964 0
-6946 -6952 6963 0
c ((SATLiteral(771) - aux1696 + SATLiteral(666))<=0)
-666 -6970 0
-771 -6970 0
-771 -666 -6971 0
c (0<=(SATLiteral(771) - aux1696 + SATLiteral(666)))
666 6971 0
771 6971 0
771 666 6970 0
c ((SATLiteral(786) - aux1697 + SATLiteral(651))<=0)
-651 -6973 0
-786 -6973 0
-786 -651 -6974 0
c (0<=(SATLiteral(786) - aux1697 + SATLiteral(651)))
651 6974 0
786 6974 0
786 651 6973 0
c (( - aux1698 + SATLiteral(501) + SATLiteral(636))<=0)
-636 -6976 0
-501 -6976 0
-501 -636 -6977 0
c (0<=( - aux1698 + SATLiteral(501) + SATLiteral(636)))
636 6977 0
501 6977 0
501 636 6976 0
c (( - aux1699 + SATLiteral(516) + SATLiteral(531))<=0)
-531 -6979 0
-516 -6979 0
-516 -531 -6980 0
c (0<=( - aux1699 + SATLiteral(516) + SATLiteral(531)))
531 6980 0
516 6980 0
516 531 6979 0
c ((SATLiteral(801) + aux1699 - aux1700)<=0)
6979 -6982 0
6980 -6983 0
-801 -6982 0
-801 6979 -6983 0
-801 6980 -6985 0
c (0<=(SATLiteral(801) + aux1699 - aux1700))
-6980 6985 0
-6979 6983 0
801 6985 0
801 -6980 6983 0
801 -6979 6982 0
c ((aux1696 + aux1698 - aux1701)<=0)
6976 -6987 0
6977 -6988 0
6970 -6987 0
6970 6976 -6988 0
6970 6977 -6990 0
6971 -6988 0
6971 6976 -6990 0
6971 6977 -6992 0
c (0<=(aux1696 + aux1698 - aux1701))
-6977 6992 0
-6976 6990 0
-6971 6992 0
-6971 -6977 6990 0
-6971 -6976 6988 0
-6970 6990 0
-6970 -6977 6988 0
-6970 -6976 6987 0
c ((SATLiteral(773) - aux1702 + SATLiteral(668))<=0)
-668 -6994 0
-773 -6994 0
-773 -668 -6995 0
c (0<=(SATLiteral(773) - aux1702 + SATLiteral(668)))
668 6995 0
773 6995 0
773 668 6994 0
c ((SATLiteral(788) - aux1703 + SATLiteral(653))<=0)
-653 -6997 0
-788 -6997 0
-788 -653 -6998 0
c (0<=(SATLiteral(788) - aux1703 + SATLiteral(653)))
653 6998 0
788 6998 0
788 653 6997 0
c (( - aux1704 + SATLiteral(503) + SATLiteral(638))<=0)
-638 -7000 0
-503 -7000 0
-503 -638 -7001 0
c (0<=( - aux1704 + SATLiteral(503) + SATLiteral(638)))
638 7001 0
503 7001 0
503 638 7000 0
c (( - aux1705 + SATLiteral(518) + SATLiteral(533))<=0)
-533 -7003 0
-518 -7003 0
-518 -533 -7004 0
c (0<=( - aux1705 + SATLiteral(518) + SATLiteral(533)))
533 7004 0
518 7004 0
518 533 7003 0
c ((SATLiteral(803) + aux1705 - aux1706)<=0)
7003 -7006 0
7004 -7007 0
-803 -7006 0
-803 7003 -7007 0
-803 7004 -7009 0
c (0<=(SATLiteral(803) + aux1705 - aux1706))
-7004 7009 0
-7003 7007 0
803 7009 0
803 -7004 7007 0
803 -7003 7006 0
c ((aux1702 + aux1704 - aux1707)<=0)
7000 -7011 0
7001 -7012 0
6994 -7011 0
6994 7000 -7012 0
6994 7001 -7014 0
6995 -7012 0
6995 7000 -7014 0
6995 7001 -7016 0
c (0<=(aux1702 + aux1704 - aux1707))
-7001 7016 0
-7000 7014 0
-6995 7016 0
-6995 -7001 7014 0
-6995 -7000 7012 0
-6994 7014 0
-6994 -7001 7012 0
-6994 -7000 7011 0
c ((SATLiteral(775) - aux1708 + SATLiteral(670))<=0)
-670 -7018 0
-775 -7018 0
-775 -670 -7019 0
c (0<=(SATLiteral(775) - aux1708 + SATLiteral(670)))
670 7019 0
775 7019 0
775 670 7018 0
c ((SATLiteral(790) - aux1709 + SATLiteral(655))<=0)
-655 -7021 0
-790 -7021 0
-790 -655 -7022 0
c (0<=(SATLiteral(790) - aux1709 + SATLiteral(655)))
655 7022 0
790 7022 0
790 655 7021 0
c (( - aux1710 + SATLiteral(505) + SATLiteral(640))<=0)
-640 -7024 0
-505 -7024 0
-505 -640 -7025 0
c (0<=( - aux1710 + SATLiteral(505) + SATLiteral(640)))
640 7025 0
505 7025 0
505 640 7024 0
c (( - aux1711 + SATLiteral(520) + SATLiteral(535))<=0)
-535 -7027 0
-520 -7027 0
-520 -535 -7028 0
c (0<=( - aux1711 + SATLiteral(520) + SATLiteral(535)))
535 7028 0
520 7028 0
520 535 7027 0
c ((SATLiteral(805) + aux1711 - aux1712)<=0)
7027 -7030 0
7028 -7031 0
-805 -7030 0
-805 7027 -7031 0
-805 7028 -7033 0
c (0<=(SATLiteral(805) + aux1711 - aux1712))
-7028 7033 0
-7027 7031 0
805 7033 0
805 -7028 7031 0
805 -7027 7030 0
c ((aux1708 + aux1710 - aux1713)<=0)
7024 -7035 0
7025 -7036 0
7018 -7035 0
7018 7024 -7036 0
7018 7025 -7038 0
7019 -7036 0
7019 7024 -7038 0
7019 7025 -7040 0
c (0<=(aux1708 + aux1710 - aux1713))
-7025 7040 0
-7024 7038 0
-7019 7040 0
-7019 -7025 7038 0
-7019 -7024 7036 0
-7018 7038 0
-7018 -7025 7036 0
-7018 -7024 7035 0
c ((SATLiteral(777) - aux1714 + SATLiteral(672))<=0)
-672 -7042 0
-777 -7042 0
-777 -672 -7043 0
c (0<=(SATLiteral(777) - aux1714 + SATLiteral(672)))
672 7043 0
777 7043 0
777 672 7042 0
c ((SATLiteral(792) - aux1715 + SATLiteral(657))<=0)
-657 -7045 0
-792 -7045 0
-792 -657 -7046 0
c (0<=(SATLiteral(792) - aux1715 + SATLiteral(657)))
657 7046 0
792 7046 0
792 657 7045 0
c (( - aux1716 + SATLiteral(507) + SATLiteral(642))<=0)
-642 -7048 0
-507 -7048 0
-507 -642 -7049 0
c (0<=( - aux1716 + SATLiteral(507) + SATLiteral(642)))
642 7049 0
507 7049 0
507 642 7048 0
c (( - aux1717 + SATLiteral(522) + SATLiteral(537))<=0)
-537 -7051 0
-522 -7051 0
-522 -537 -7052 0
c (0<=( - aux1717 + SATLiteral(522) + SATLiteral(537)))
537 7052 0
522 7052 0
522 537 7051 0
c ((SATLiteral(807) + aux1717 - aux1718)<=0)
7051 -7054 0
7052 -7055 0
-807 -7054 0
-807 7051 -7055 0
-807 7052 -7057 0
c (0<=(SATLiteral(807) + aux1717 - aux1718))
-7052 7057 0
-7051 7055 0
807 7057 0
807 -7052 7055 0
807 -7051 7054 0
c ((aux1714 + aux1716 - aux1719)<=0)
7048 -7059 0
7049 -7060 0
7042 -7059 0
7042 7048 -7060 0
7042 7049 -7062 0
7043 -7060 0
7043 7048 -7062 0
7043 7049 -7064 0
c (0<=(aux1714 + aux1716 - aux1719))
-7049 7064 0
-7048 7062 0
-7043 7064 0
-7043 -7049 7062 0
-7043 -7048 7060 0
-7042 7062 0
-7042 -7049 7060 0
-7042 -7048 7059 0
c ((SATLiteral(779) - aux1720 + SATLiteral(674))<=0)
-674 -7066 0
-779 -7066 0
-779 -674 -7067 0
c (0<=(SATLiteral(779) - aux1720 + SATLiteral(674)))
674 7067 0
779 7067 0
779 674 7066 0
c ((SATLiteral(794) - aux1721 + SATLiteral(659))<=0)
-659 -7069 0
-794 -7069 0
-794 -659 -7070 0
c (0<=(SATLiteral(794) - aux1721 + SATLiteral(659)))
659 7070 0
794 7070 0
794 659 7069 0
c (( - aux1722 + SATLiteral(509) + SATLiteral(644))<=0)
-644 -7072 0
-509 -7072 0
-509 -644 -7073 0
c (0<=( - aux1722 + SATLiteral(509) + SATLiteral(644)))
644 7073 0
509 7073 0
509 644 7072 0
c (( - aux1723 + SATLiteral(524) + SATLiteral(539))<=0)
-539 -7075 0
-524 -7075 0
-524 -539 -7076 0
c (0<=( - aux1723 + SATLiteral(524) + SATLiteral(539)))
539 7076 0
524 7076 0
524 539 7075 0
c ((SATLiteral(809) + aux1723 - aux1724)<=0)
7075 -7078 0
7076 -7079 0
-809 -7078 0
-809 7075 -7079 0
-809 7076 -7081 0
c (0<=(SATLiteral(809) + aux1723 - aux1724))
-7076 7081 0
-7075 7079 0
809 7081 0
809 -7076 7079 0
809 -7075 7078 0
c ((aux1720 + aux1722 - aux1725)<=0)
7072 -7083 0
7073 -7084 0
7066 -7083 0
7066 7072 -7084 0
7066 7073 -7086 0
7067 -7084 0
7067 7072 -7086 0
7067 7073 -7088 0
c (0<=(aux1720 + aux1722 - aux1725))
-7073 7088 0
-7072 7086 0
-7067 7088 0
-7067 -7073 7086 0
-7067 -7072 7084 0
-7066 7086 0
-7066 -7073 7084 0
-7066 -7072 7083 0
c ((SATLiteral(781) - aux1726 + SATLiteral(676))<=0)
-676 -7090 0
-781 -7090 0
-781 -676 -7091 0
c (0<=(SATLiteral(781) - aux1726 + SATLiteral(676)))
676 7091 0
781 7091 0
781 676 7090 0
c ((SATLiteral(796) - aux1727 + SATLiteral(661))<=0)
-661 -7093 0
-796 -7093 0
-796 -661 -7094 0
c (0<=(SATLiteral(796) - aux1727 + SATLiteral(661)))
661 7094 0
796 7094 0
796 661 7093 0
c (( - aux1728 + SATLiteral(511) + SATLiteral(646))<=0)
-646 -7096 0
-511 -7096 0
-511 -646 -7097 0
c (0<=( - aux1728 + SATLiteral(511) + SATLiteral(646)))
646 7097 0
511 7097 0
511 646 7096 0
c (( - aux1729 + SATLiteral(526) + SATLiteral(541))<=0)
-541 -7099 0
-526 -7099 0
-526 -541 -7100 0
c (0<=( - aux1729 + SATLiteral(526) + SATLiteral(541)))
541 7100 0
526 7100 0
526 541 7099 0
c ((SATLiteral(811) + aux1729 - aux1730)<=0)
7099 -7102 0
7100 -7103 0
-811 -7102 0
-811 7099 -7103 0
-811 7100 -7105 0
c (0<=(SATLiteral(811) + aux1729 - aux1730))
-7100 7105 0
-7099 7103 0
811 7105 0
811 -7100 7103 0
811 -7099 7102 0
c ((aux1726 + aux1728 - aux1731)<=0)
7096 -7107 0
7097 -7108 0
7090 -7107 0
7090 7096 -7108 0
7090 7097 -7110 0
7091 -7108 0
7091 7096 -7110 0
7091 7097 -7112 0
c (0<=(aux1726 + aux1728 - aux1731))
-7097 7112 0
-7096 7110 0
-7091 7112 0
-7091 -7097 7110 0
-7091 -7096 7108 0
-7090 7110 0
-7090 -7097 7108 0
-7090 -7096 7107 0
c ((SATLiteral(-780) - aux1732 + SATLiteral(-675))<=0)
675 -7114 0
780 -7114 0
780 675 -7115 0
c (0<=(SATLiteral(-780) - aux1732 + SATLiteral(-675)))
-675 7115 0
-780 7115 0
-780 -675 7114 0
c ((SATLiteral(-795) - aux1733 + SATLiteral(-660))<=0)
660 -7117 0
795 -7117 0
795 660 -7118 0
c (0<=(SATLiteral(-795) - aux1733 + SATLiteral(-660)))
-660 7118 0
-795 7118 0
-795 -660 7117 0
c (( - aux1734 + SATLiteral(-510) + SATLiteral(-645))<=0)
645 -7120 0
510 -7120 0
510 645 -7121 0
c (0<=( - aux1734 + SATLiteral(-510) + SATLiteral(-645)))
-645 7121 0
-510 7121 0
-510 -645 7120 0
c (( - aux1735 + SATLiteral(-525) + SATLiteral(-540))<=0)
540 -7123 0
525 -7123 0
525 540 -7124 0
c (0<=( - aux1735 + SATLiteral(-525) + SATLiteral(-540)))
-540 7124 0
-525 7124 0
-525 -540 7123 0
c ((SATLiteral(-810) + aux1735 - aux1736)<=0)
7123 -7126 0
7124 -7127 0
810 -7126 0
810 7123 -7127 0
810 7124 -7129 0
c (0<=(SATLiteral(-810) + aux1735 - aux1736))
-7124 7129 0
-7123 7127 0
-810 7129 0
-810 -7124 7127 0
-810 -7123 7126 0
c ((aux1732 + aux1734 - aux1737)<=0)
7120 -7131 0
7121 -7132 0
7114 -7131 0
7114 7120 -7132 0
7114 7121 -7134 0
7115 -7132 0
7115 7120 -7134 0
7115 7121 -7136 0
c (0<=(aux1732 + aux1734 - aux1737))
-7121 7136 0
-7120 7134 0
-7115 7136 0
-7115 -7121 7134 0
-7115 -7120 7132 0
-7114 7134 0
-7114 -7121 7132 0
-7114 -7120 7131 0
c ((SATLiteral(947) - aux1738 + SATLiteral(842))<=0)
-842 -7138 0
-947 -7138 0
-947 -842 -7139 0
c (0<=(SATLiteral(947) - aux1738 + SATLiteral(842)))
842 7139 0
947 7139 0
947 842 7138 0
c ((SATLiteral(962) - aux1739 + SATLiteral(827))<=0)
-827 -7141 0
-962 -7141 0
-962 -827 -7142 0
c (0<=(SATLiteral(962) - aux1739 + SATLiteral(827)))
827 7142 0
962 7142 0
962 827 7141 0
c (( - aux1740 + SATLiteral(1082) + SATLiteral(812))<=0)
-812 -7144 0
-1082 -7144 0
-1082 -812 -7145 0
c (0<=( - aux1740 + SATLiteral(1082) + SATLiteral(812)))
812 7145 0
1082 7145 0
1082 812 7144 0
c (( - aux1741 + SATLiteral(1097) + SATLiteral(1112))<=0)
-1112 -7147 0
-1097 -7147 0
-1097 -1112 -7148 0
c (0<=( - aux1741 + SATLiteral(1097) + SATLiteral(1112)))
1112 7148 0
1097 7148 0
1097 1112 7147 0
c ((SATLiteral(977) + aux1741 - aux1742)<=0)
7147 -7150 0
7148 -7151 0
-977 -7150 0
-977 7147 -7151 0
-977 7148 -7153 0
c (0<=(SATLiteral(977) + aux1741 - aux1742))
-7148 7153 0
-7147 7151 0
977 7153 0
977 -7148 7151 0
977 -7147 7150 0
c ((aux1738 + aux1740 - aux1743)<=0)
7144 -7155 0
7145 -7156 0
7138 -7155 0
7138 7144 -7156 0
7138 7145 -7158 0
7139 -7156 0
7139 7144 -7158 0
7139 7145 -7160 0
c (0<=(aux1738 + aux1740 - aux1743))
-7145 7160 0
-7144 7158 0
-7139 7160 0
-7139 -7145 7158 0
-7139 -7144 7156 0
-7138 7158 0
-7138 -7145 7156 0
-7138 -7144 7155 0
c ((SATLiteral(949) - aux1744 + SATLiteral(844))<=0)
-844 -7162 0
-949 -7162 0
-949 -844 -7163 0
c (0<=(SATLiteral(949) - aux1744 + SATLiteral(844)))
844 7163 0
949 7163 0
949 844 7162 0
c ((SATLiteral(964) - aux1745 + SATLiteral(829))<=0)
-829 -7165 0
-964 -7165 0
-964 -829 -7166 0
c (0<=(SATLiteral(964) - aux1745 + SATLiteral(829)))
829 7166 0
964 7166 0
964 829 7165 0
c (( - aux1746 + SATLiteral(1084) + SATLiteral(814))<=0)
-814 -7168 0
-1084 -7168 0
-1084 -814 -7169 0
c (0<=( - aux1746 + SATLiteral(1084) + SATLiteral(814)))
814 7169 0
1084 7169 0
1084 814 7168 0
c (( - aux1747 + SATLiteral(1099) + SATLiteral(1114))<=0)
-1114 -7171 0
-1099 -7171 0
-1099 -1114 -7172 0
c (0<=( - aux1747 + SATLiteral(1099) + SATLiteral(1114)))
1114 7172 0
1099 7172 0
1099 1114 7171 0
c ((SATLiteral(979) + aux1747 - aux1748)<=0)
7171 -7174 0
7172 -7175 0
-979 -7174 0
-979 7171 -7175 0
-979 7172 -7177 0
c (0<=(SATLiteral(979) + aux1747 - aux1748))
-7172 7177 0
-7171 7175 0
979 7177 0
979 -7172 7175 0
979 -7171 7174 0
c ((aux1744 + aux1746 - aux1749)<=0)
7168 -7179 0
7169 -7180 0
7162 -7179 0
7162 7168 -7180 0
7162 7169 -7182 0
7163 -7180 0
7163 7168 -7182 0
7163 7169 -7184 0
c (0<=(aux1744 + aux1746 - aux1749))
-7169 7184 0
-7168 7182 0
-7163 7184 0
-7163 -7169 7182 0
-7163 -7168 7180 0
-7162 7182 0
-7162 -7169 7180 0
-7162 -7168 7179 0
c ((SATLiteral(951) - aux1750 + SATLiteral(846))<=0)
-846 -7186 0
-951 -7186 0
-951 -846 -7187 0
c (0<=(SATLiteral(951) - aux1750 + SATLiteral(846)))
846 7187 0
951 7187 0
951 846 7186 0
c ((SATLiteral(966) - aux1751 + SATLiteral(831))<=0)
-831 -7189 0
-966 -7189 0
-966 -831 -7190 0
c (0<=(SATLiteral(966) - aux1751 + SATLiteral(831)))
831 7190 0
966 7190 0
966 831 7189 0
c (( - aux1752 + SATLiteral(1086) + SATLiteral(816))<=0)
-816 -7192 0
-1086 -7192 0
-1086 -816 -7193 0
c (0<=( - aux1752 + SATLiteral(1086) + SATLiteral(816)))
816 7193 0
1086 7193 0
1086 816 7192 0
c (( - aux1753 + SATLiteral(1101) + SATLiteral(1116))<=0)
-1116 -7195 0
-1101 -7195 0
-1101 -1116 -7196 0
c (0<=( - aux1753 + SATLiteral(1101) + SATLiteral(1116)))
1116 7196 0
1101 7196 0
1101 1116 7195 0
c ((SATLiteral(981) + aux1753 - aux1754)<=0)
7195 -7198 0
7196 -7199 0
-981 -7198 0
-981 7195 -7199 0
-981 7196 -7201 0
c (0<=(SATLiteral(981) + aux1753 - aux1754))
-7196 7201 0
-7195 7199 0
981 7201 0
981 -7196 7199 0
981 -7195 7198 0
c ((aux1750 + aux1752 - aux1755)<=0)
7192 -7203 0
7193 -7204 0
7186 -7203 0
7186 7192 -7204 0
7186 7193 -7206 0
7187 -7204 0
7187 7192 -7206 0
7187 7193 -7208 0
c (0<=(aux1750 + aux1752 - aux1755))
-7193 7208 0
-7192 7206 0
-7187 7208 0
-7187 -7193 7206 0
-7187 -7192 7204 0
-7186 7206 0
-7186 -7193 7204 0
-7186 -7192 7203 0
c ((SATLiteral(953) - aux1756 + SATLiteral(848))<=0)
-848 -7210 0
-953 -7210 0
-953 -848 -7211 0
c (0<=(SATLiteral(953) - aux1756 + SATLiteral(848)))
848 7211 0
953 7211 0
953 848 7210 0
c ((SATLiteral(968) - aux1757 + SATLiteral(833))<=0)
-833 -7213 0
-968 -7213 0
-968 -833 -7214 0
c (0<=(SATLiteral(968) - aux1757 + SATLiteral(833)))
833 7214 0
968 7214 0
968 833 7213 0
c (( - aux1758 + SATLiteral(1088) + SATLiteral(818))<=0)
-818 -7216 0
-1088 -7216 0
-1088 -818 -7217 0
c (0<=( - aux1758 + SATLiteral(1088) + SATLiteral(818)))
818 7217 0
1088 7217 0
1088 818 7216 0
c (( - aux1759 + SATLiteral(1103) + SATLiteral(1118))<=0)
-1118 -7219 0
-1103 -7219 0
-1103 -1118 -7220 0
c (0<=( - aux1759 + SATLiteral(1103) + SATLiteral(1118)))
1118 7220 0
1103 7220 0
1103 1118 7219 0
c ((SATLiteral(983) + aux1759 - aux1760)<=0)
7219 -7222 0
7220 -7223 0
-983 -7222 0
-983 7219 -7223 0
-983 7220 -7225 0
c (0<=(SATLiteral(983) + aux1759 - aux1760))
-7220 7225 0
-7219 7223 0
983 7225 0
983 -7220 7223 0
983 -7219 7222 0
c ((aux1756 + aux1758 - aux1761)<=0)
7216 -7227 0
7217 -7228 0
7210 -7227 0
7210 7216 -7228 0
7210 7217 -7230 0
7211 -7228 0
7211 7216 -7230 0
7211 7217 -7232 0
c (0<=(aux1756 + aux1758 - aux1761))
-7217 7232 0
-7216 7230 0
-7211 7232 0
-7211 -7217 7230 0
-7211 -7216 7228 0
-7210 7230 0
-7210 -7217 7228 0
-7210 -7216 7227 0
c ((SATLiteral(955) - aux1762 + SATLiteral(850))<=0)
-850 -7234 0
-955 -7234 0
-955 -850 -7235 0
c (0<=(SATLiteral(955) - aux1762 + SATLiteral(850)))
850 7235 0
955 7235 0
955 850 7234 0
c ((SATLiteral(970) - aux1763 + SATLiteral(835))<=0)
-835 -7237 0
-970 -7237 0
-970 -835 -7238 0
c (0<=(SATLiteral(970) - aux1763 + SATLiteral(835)))
835 7238 0
970 7238 0
970 835 7237 0
c (( - aux1764 + SATLiteral(1090) + SATLiteral(820))<=0)
-820 -7240 0
-1090 -7240 0
-1090 -820 -7241 0
c (0<=( - aux1764 + SATLiteral(1090) + SATLiteral(820)))
820 7241 0
1090 7241 0
1090 820 7240 0
c (( - aux1765 + SATLiteral(1105) + SATLiteral(1120))<=0)
-1120 -7243 0
-1105 -7243 0
-1105 -1120 -7244 0
c (0<=( - aux1765 + SATLiteral(1105) + SATLiteral(1120)))
1120 7244 0
1105 7244 0
1105 1120 7243 0
c ((SATLiteral(985) + aux1765 - aux1766)<=0)
7243 -7246 0
7244 -7247 0
-985 -7246 0
-985 7243 -7247 0
-985 7244 -7249 0
c (0<=(SATLiteral(985) + aux1765 - aux1766))
-7244 7249 0
-7243 7247 0
985 7249 0
985 -7244 7247 0
985 -7243 7246 0
c ((aux1762 + aux1764 - aux1767)<=0)
7240 -7251 0
7241 -7252 0
7234 -7251 0
7234 7240 -7252 0
7234 7241 -7254 0
7235 -7252 0
7235 7240 -7254 0
7235 7241 -7256 0
c (0<=(aux1762 + aux1764 - aux1767))
-7241 7256 0
-7240 7254 0
-7235 7256 0
-7235 -7241 7254 0
-7235 -7240 7252 0
-7234 7254 0
-7234 -7241 7252 0
-7234 -7240 7251 0
c ((SATLiteral(957) - aux1768 + SATLiteral(852))<=0)
-852 -7258 0
-957 -7258 0
-957 -852 -7259 0
c (0<=(SATLiteral(957) - aux1768 + SATLiteral(852)))
852 7259 0
957 7259 0
957 852 7258 0
c ((SATLiteral(972) - aux1769 + SATLiteral(837))<=0)
-837 -7261 0
-972 -7261 0
-972 -837 -7262 0
c (0<=(SATLiteral(972) - aux1769 + SATLiteral(837)))
837 7262 0
972 7262 0
972 837 7261 0
c (( - aux1770 + SATLiteral(1092) + SATLiteral(822))<=0)
-822 -7264 0
-1092 -7264 0
-1092 -822 -7265 0
c (0<=( - aux1770 + SATLiteral(1092) + SATLiteral(822)))
822 7265 0
1092 7265 0
1092 822 7264 0
c (( - aux1771 + SATLiteral(1107) + SATLiteral(1122))<=0)
-1122 -7267 0
-1107 -7267 0
-1107 -1122 -7268 0
c (0<=( - aux1771 + SATLiteral(1107) + SATLiteral(1122)))
1122 7268 0
1107 7268 0
1107 1122 7267 0
c ((SATLiteral(987) + aux1771 - aux1772)<=0)
7267 -7270 0
7268 -7271 0
-987 -7270 0
-987 7267 -7271 0
-987 7268 -7273 0
c (0<=(SATLiteral(987) + aux1771 - aux1772))
-7268 7273 0
-7267 7271 0
987 7273 0
987 -7268 7271 0
987 -7267 7270 0
c ((aux1768 + aux1770 - aux1773)<=0)
7264 -7275 0
7265 -7276 0
7258 -7275 0
7258 7264 -7276 0
7258 7265 -7278 0
7259 -7276 0
7259 7264 -7278 0
7259 7265 -7280 0
c (0<=(aux1768 + aux1770 - aux1773))
-7265 7280 0
-7264 7278 0
-7259 7280 0
-7259 -7265 7278 0
-7259 -7264 7276 0
-7258 7278 0
-7258 -7265 7276 0
-7258 -7264 7275 0
c ((SATLiteral(959) - aux1774 + SATLiteral(854))<=0)
-854 -7282 0
-959 -7282 0
-959 -854 -7283 0
c (0<=(SATLiteral(959) - aux1774 + SATLiteral(854)))
854 7283 0
959 7283 0
959 854 7282 0
c ((SATLiteral(974) - aux1775 + SATLiteral(839))<=0)
-839 -7285 0
-974 -7285 0
-974 -839 -7286 0
c (0<=(SATLiteral(974) - aux1775 + SATLiteral(839)))
839 7286 0
974 7286 0
974 839 7285 0
c (( - aux1776 + SATLiteral(1094) + SATLiteral(824))<=0)
-824 -7288 0
-1094 -7288 0
-1094 -824 -7289 0
c (0<=( - aux1776 + SATLiteral(1094) + SATLiteral(824)))
824 7289 0
1094 7289 0
1094 824 7288 0
c (( - aux1777 + SATLiteral(1109) + SATLiteral(1124))<=0)
-1124 -7291 0
-1109 -7291 0
-1109 -1124 -7292 0
c (0<=( - aux1777 + SATLiteral(1109) + SATLiteral(1124)))
1124 7292 0
1109 7292 0
1109 1124 7291 0
c ((SATLiteral(989) + aux1777 - aux1778)<=0)
7291 -7294 0
7292 -7295 0
-989 -7294 0
-989 7291 -7295 0
-989 7292 -7297 0
c (0<=(SATLiteral(989) + aux1777 - aux1778))
-7292 7297 0
-7291 7295 0
989 7297 0
989 -7292 7295 0
989 -7291 7294 0
c ((aux1774 + aux1776 - aux1779)<=0)
7288 -7299 0
7289 -7300 0
7282 -7299 0
7282 7288 -7300 0
7282 7289 -7302 0
7283 -7300 0
7283 7288 -7302 0
7283 7289 -7304 0
c (0<=(aux1774 + aux1776 - aux1779))
-7289 7304 0
-7288 7302 0
-7283 7304 0
-7283 -7289 7302 0
-7283 -7288 7300 0
-7282 7302 0
-7282 -7289 7300 0
-7282 -7288 7299 0
c ((SATLiteral(961) - aux1780 + SATLiteral(856))<=0)
-856 -7306 0
-961 -7306 0
-961 -856 -7307 0
c (0<=(SATLiteral(961) - aux1780 + SATLiteral(856)))
856 7307 0
961 7307 0
961 856 7306 0
c ((SATLiteral(976) - aux1781 + SATLiteral(841))<=0)
-841 -7309 0
-976 -7309 0
-976 -841 -7310 0
c (0<=(SATLiteral(976) - aux1781 + SATLiteral(841)))
841 7310 0
976 7310 0
976 841 7309 0
c (( - aux1782 + SATLiteral(1096) + SATLiteral(826))<=0)
-826 -7312 0
-1096 -7312 0
-1096 -826 -7313 0
c (0<=( - aux1782 + SATLiteral(1096) + SATLiteral(826)))
826 7313 0
1096 7313 0
1096 826 7312 0
c (( - aux1783 + SATLiteral(1111) + SATLiteral(1126))<=0)
-1126 -7315 0
-1111 -7315 0
-1111 -1126 -7316 0
c (0<=( - aux1783 + SATLiteral(1111) + SATLiteral(1126)))
1126 7316 0
1111 7316 0
1111 1126 7315 0
c ((SATLiteral(991) + aux1783 - aux1784)<=0)
7315 -7318 0
7316 -7319 0
-991 -7318 0
-991 7315 -7319 0
-991 7316 -7321 0
c (0<=(SATLiteral(991) + aux1783 - aux1784))
-7316 7321 0
-7315 7319 0
991 7321 0
991 -7316 7319 0
991 -7315 7318 0
c ((aux1780 + aux1782 - aux1785)<=0)
7312 -7323 0
7313 -7324 0
7306 -7323 0
7306 7312 -7324 0
7306 7313 -7326 0
7307 -7324 0
7307 7312 -7326 0
7307 7313 -7328 0
c (0<=(aux1780 + aux1782 - aux1785))
-7313 7328 0
-7312 7326 0
-7307 7328 0
-7307 -7313 7326 0
-7307 -7312 7324 0
-7306 7326 0
-7306 -7313 7324 0
-7306 -7312 7323 0
c ((SATLiteral(-960) - aux1786 + SATLiteral(-855))<=0)
855 -7330 0
960 -7330 0
960 855 -7331 0
c (0<=(SATLiteral(-960) - aux1786 + SATLiteral(-855)))
-855 7331 0
-960 7331 0
-960 -855 7330 0
c ((SATLiteral(-975) - aux1787 + SATLiteral(-840))<=0)
840 -7333 0
975 -7333 0
975 840 -7334 0
c (0<=(SATLiteral(-975) - aux1787 + SATLiteral(-840)))
-840 7334 0
-975 7334 0
-975 -840 7333 0
c (( - aux1788 + SATLiteral(-1095) + SATLiteral(-825))<=0)
825 -7336 0
1095 -7336 0
1095 825 -7337 0
c (0<=( - aux1788 + SATLiteral(-1095) + SATLiteral(-825)))
-825 7337 0
-1095 7337 0
-1095 -825 7336 0
c (( - aux1789 + SATLiteral(-1110) + SATLiteral(-1125))<=0)
1125 -7339 0
1110 -7339 0
1110 1125 -7340 0
c (0<=( - aux1789 + SATLiteral(-1110) + SATLiteral(-1125)))
-1125 7340 0
-1110 7340 0
-1110 -1125 7339 0
c ((SATLiteral(-990) + aux1789 - aux1790)<=0)
7339 -7342 0
7340 -7343 0
990 -7342 0
990 7339 -7343 0
990 7340 -7345 0
c (0<=(SATLiteral(-990) + aux1789 - aux1790))
-7340 7345 0
-7339 7343 0
-990 7345 0
-990 -7340 7343 0
-990 -7339 7342 0
c ((aux1786 + aux1788 - aux1791)<=0)
7336 -7347 0
7337 -7348 0
7330 -7347 0
7330 7336 -7348 0
7330 7337 -7350 0
7331 -7348 0
7331 7336 -7350 0
7331 7337 -7352 0
c (0<=(aux1786 + aux1788 - aux1791))
-7337 7352 0
-7336 7350 0
-7331 7352 0
-7331 -7337 7350 0
-7331 -7336 7348 0
-7330 7350 0
-7330 -7337 7348 0
-7330 -7336 7347 0
c ((SATLiteral(992) - aux1792 + SATLiteral(887))<=0)
-887 -7354 0
-992 -7354 0
-992 -887 -7355 0
c (0<=(SATLiteral(992) - aux1792 + SATLiteral(887)))
887 7355 0
992 7355 0
992 887 7354 0
c ((SATLiteral(1007) - aux1793 + SATLiteral(872))<=0)
-872 -7357 0
-1007 -7357 0
-1007 -872 -7358 0
c (0<=(SATLiteral(1007) - aux1793 + SATLiteral(872)))
872 7358 0
1007 7358 0
1007 872 7357 0
c (( - aux1794 + SATLiteral(1127) + SATLiteral(857))<=0)
-857 -7360 0
-1127 -7360 0
-1127 -857 -7361 0
c (0<=( - aux1794 + SATLiteral(1127) + SATLiteral(857)))
857 7361 0
1127 7361 0
1127 857 7360 0
c (( - aux1795 + SATLiteral(1142) + SATLiteral(1157))<=0)
-1157 -7363 0
-1142 -7363 0
-1142 -1157 -7364 0
c (0<=( - aux1795 + SATLiteral(1142) + SATLiteral(1157)))
1157 7364 0
1142 7364 0
1142 1157 7363 0
c ((SATLiteral(1022) + aux1795 - aux1796)<=0)
7363 -7366 0
7364 -7367 0
-1022 -7366 0
-1022 7363 -7367 0
-1022 7364 -7369 0
c (0<=(SATLiteral(1022) + aux1795 - aux1796))
-7364 7369 0
-7363 7367 0
1022 7369 0
1022 -7364 7367 0
1022 -7363 7366 0
c ((aux1792 + aux1794 - aux1797)<=0)
7360 -7371 0
7361 -7372 0
7354 -7371 0
7354 7360 -7372 0
7354 7361 -7374 0
7355 -7372 0
7355 7360 -7374 0
7355 7361 -7376 0
c (0<=(aux1792 + aux1794 - aux1797))
-7361 7376 0
-7360 7374 0
-7355 7376 0
-7355 -7361 7374 0
-7355 -7360 7372 0
-7354 7374 0
-7354 -7361 7372 0
-7354 -7360 7371 0
c ((SATLiteral(994) - aux1798 + SATLiteral(889))<=0)
-889 -7378 0
-994 -7378 0
-994 -889 -7379 0
c (0<=(SATLiteral(994) - aux1798 + SATLiteral(889)))
889 7379 0
994 7379 0
994 889 7378 0
c ((SATLiteral(1009) - aux1799 + SATLiteral(874))<=0)
-874 -7381 0
-1009 -7381 0
-1009 -874 -7382 0
c (0<=(SATLiteral(1009) - aux1799 + SATLiteral(874)))
874 7382 0
1009 7382 0
1009 874 7381 0
c (( - aux1800 + SATLiteral(1129) + SATLiteral(859))<=0)
-859 -7384 0
-1129 -7384 0
-1129 -859 -7385 0
c (0<=( - aux1800 + SATLiteral(1129) + SATLiteral(859)))
859 7385 0
1129 7385 0
1129 859 7384 0
c (( - aux1801 + SATLiteral(1144) + SATLiteral(1159))<=0)
-1159 -7387 0
-1144 -7387 0
-1144 -1159 -7388 0
c (0<=( - aux1801 + SATLiteral(1144) + SATLiteral(1159)))
1159 7388 0
1144 7388 0
1144 1159 7387 0
c ((SATLiteral(1024) + aux1801 - aux1802)<=0)
7387 -7390 0
7388 -7391 0
-1024 -7390 0
-1024 7387 -7391 0
-1024 7388 -7393 0
c (0<=(SATLiteral(1024) + aux1801 - aux1802))
-7388 7393 0
-7387 7391 0
1024 7393 0
1024 -7388 7391 0
1024 -7387 7390 0
c ((aux1798 + aux1800 - aux1803)<=0)
7384 -7395 0
7385 -7396 0
7378 -7395 0
7378 7384 -7396 0
7378 7385 -7398 0
7379 -7396 0
7379 7384 -7398 0
7379 7385 -7400 0
c (0<=(aux1798 + aux1800 - aux1803))
-7385 7400 0
-7384 7398 0
-7379 7400 0
-7379 -7385 7398 0
-7379 -7384 7396 0
-7378 7398 0
-7378 -7385 7396 0
-7378 -7384 7395 0
c ((SATLiteral(996) - aux1804 + SATLiteral(891))<=0)
-891 -7402 0
-996 -7402 0
-996 -891 -7403 0
c (0<=(SATLiteral(996) - aux1804 + SATLiteral(891)))
891 7403 0
996 7403 0
996 891 7402 0
c ((SATLiteral(1011) - aux1805 + SATLiteral(876))<=0)
-876 -7405 0
-1011 -7405 0
-1011 -876 -7406 0
c (0<=(SATLiteral(1011) - aux1805 + SATLiteral(876)))
876 7406 0
1011 7406 0
1011 876 7405 0
c (( - aux1806 + SATLiteral(1131) + SATLiteral(861))<=0)
-861 -7408 0
-1131 -7408 0
-1131 -861 -7409 0
c (0<=( - aux1806 + SATLiteral(1131) + SATLiteral(861)))
861 7409 0
1131 7409 0
1131 861 7408 0
c (( - aux1807 + SATLiteral(1146) + SATLiteral(1161))<=0)
-1161 -7411 0
-1146 -7411 0
-1146 -1161 -7412 0
c (0<=( - aux1807 + SATLiteral(1146) + SATLiteral(1161)))
1161 7412 0
1146 7412 0
1146 1161 7411 0
c ((SATLiteral(1026) + aux1807 - aux1808)<=0)
7411 -7414 0
7412 -7415 0
-1026 -7414 0
-1026 7411 -7415 0
-1026 7412 -7417 0
c (0<=(SATLiteral(1026) + aux1807 - aux1808))
-7412 7417 0
-7411 7415 0
1026 7417 0
1026 -7412 7415 0
1026 -7411 7414 0
c ((aux1804 + aux1806 - aux1809)<=0)
7408 -7419 0
7409 -7420 0
7402 -7419 0
7402 7408 -7420 0
7402 7409 -7422 0
7403 -7420 0
7403 7408 -7422 0
7403 7409 -7424 0
c (0<=(aux1804 + aux1806 - aux1809))
-7409 7424 0
-7408 7422 0
-7403 7424 0
-7403 -7409 7422 0
-7403 -7408 7420 0
-7402 7422 0
-7402 -7409 7420 0
-7402 -7408 7419 0
c ((SATLiteral(998) - aux1810 + SATLiteral(893))<=0)
-893 -7426 0
-998 -7426 0
-998 -893 -7427 0
c (0<=(SATLiteral(998) - aux1810 + SATLiteral(893)))
893 7427 0
998 7427 0
998 893 7426 0
c ((SATLiteral(1013) - aux1811 + SATLiteral(878))<=0)
-878 -7429 0
-1013 -7429 0
-1013 -878 -7430 0
c (0<=(SATLiteral(1013) - aux1811 + SATLiteral(878)))
878 7430 0
1013 7430 0
1013 878 7429 0
c (( - aux1812 + SATLiteral(1133) + SATLiteral(863))<=0)
-863 -7432 0
-1133 -7432 0
-1133 -863 -7433 0
c (0<=( - aux1812 + SATLiteral(1133) + SATLiteral(863)))
863 7433 0
1133 7433 0
1133 863 7432 0
c (( - aux1813 + SATLiteral(1148) + SATLiteral(1163))<=0)
-1163 -7435 0
-1148 -7435 0
-1148 -1163 -7436 0
c (0<=( - aux1813 + SATLiteral(1148) + SATLiteral(1163)))
1163 7436 0
1148 7436 0
1148 1163 7435 0
c ((SATLiteral(1028) + aux1813 - aux1814)<=0)
7435 -7438 0
7436 -7439 0
-1028 -7438 0
-1028 7435 -7439 0
-1028 7436 -7441 0
c (0<=(SATLiteral(1028) + aux1813 - aux1814))
-7436 7441 0
-7435 7439 0
1028 7441 0
1028 -7436 7439 0
1028 -7435 7438 0
c ((aux1810 + aux1812 - aux1815)<=0)
7432 -7443 0
7433 -7444 0
7426 -7443 0
7426 7432 -7444 0
7426 7433 -7446 0
7427 -7444 0
7427 7432 -7446 0
7427 7433 -7448 0
c (0<=(aux1810 + aux1812 - aux1815))
-7433 7448 0
-7432 7446 0
-7427 7448 0
-7427 -7433 7446 0
-7427 -7432 7444 0
-7426 7446 0
-7426 -7433 7444 0
-7426 -7432 7443 0
c ((SATLiteral(1000) - aux1816 + SATLiteral(895))<=0)
-895 -7450 0
-1000 -7450 0
-1000 -895 -7451 0
c (0<=(SATLiteral(1000) - aux1816 + SATLiteral(895)))
895 7451 0
1000 7451 0
1000 895 7450 0
c ((SATLiteral(1015) - aux1817 + SATLiteral(880))<=0)
-880 -7453 0
-1015 -7453 0
-1015 -880 -7454 0
c (0<=(SATLiteral(1015) - aux1817 + SATLiteral(880)))
880 7454 0
1015 7454 0
1015 880 7453 0
c (( - aux1818 + SATLiteral(1135) + SATLiteral(865))<=0)
-865 -7456 0
-1135 -7456 0
-1135 -865 -7457 0
c (0<=( - aux1818 + SATLiteral(1135) + SATLiteral(865)))
865 7457 0
1135 7457 0
1135 865 7456 0
c (( - aux1819 + SATLiteral(1150) + SATLiteral(1165))<=0)
-1165 -7459 0
-1150 -7459 0
-1150 -1165 -7460 0
c (0<=( - aux1819 + SATLiteral(1150) + SATLiteral(1165)))
1165 7460 0
1150 7460 0
1150 1165 7459 0
c ((SATLiteral(1030) + aux1819 - aux1820)<=0)
7459 -7462 0
7460 -7463 0
-1030 -7462 0
-1030 7459 -7463 0
-1030 7460 -7465 0
c (0<=(SATLiteral(1030) + aux1819 - aux1820))
-7460 7465 0
-7459 7463 0
1030 7465 0
1030 -7460 7463 0
1030 -7459 7462 0
c ((aux1816 + aux1818 - aux1821)<=0)
7456 -7467 0
7457 -7468 0
7450 -7467 0
7450 7456 -7468 0
7450 7457 -7470 0
7451 -7468 0
7451 7456 -7470 0
7451 7457 -7472 0
c (0<=(aux1816 + aux1818 - aux1821))
-7457 7472 0
-7456 7470 0
-7451 7472 0
-7451 -7457 7470 0
-7451 -7456 7468 0
-7450 7470 0
-7450 -7457 7468 0
-7450 -7456 7467 0
c ((SATLiteral(1002) - aux1822 + SATLiteral(897))<=0)
-897 -7474 0
-1002 -7474 0
-1002 -897 -7475 0
c (0<=(SATLiteral(1002) - aux1822 + SATLiteral(897)))
897 7475 0
1002 7475 0
1002 897 7474 0
c ((SATLiteral(1017) - aux1823 + SATLiteral(882))<=0)
-882 -7477 0
-1017 -7477 0
-1017 -882 -7478 0
c (0<=(SATLiteral(1017) - aux1823 + SATLiteral(882)))
882 7478 0
1017 7478 0
1017 882 7477 0
c (( - aux1824 + SATLiteral(1137) + SATLiteral(867))<=0)
-867 -7480 0
-1137 -7480 0
-1137 -867 -7481 0
c (0<=( - aux1824 + SATLiteral(1137) + SATLiteral(867)))
867 7481 0
1137 7481 0
1137 867 7480 0
c (( - aux1825 + SATLiteral(1152) + SATLiteral(1167))<=0)
-1167 -7483 0
-1152 -7483 0
-1152 -1167 -7484 0
c (0<=( - aux1825 + SATLiteral(1152) + SATLiteral(1167)))
1167 7484 0
1152 7484 0
1152 1167 7483 0
c ((SATLiteral(1032) + aux1825 - aux1826)<=0)
7483 -7486 0
7484 -7487 0
-1032 -7486 0
-1032 7483 -7487 0
-1032 7484 -7489 0
c (0<=(SATLiteral(1032) + aux1825 - aux1826))
-7484 7489 0
-7483 7487 0
1032 7489 0
1032 -7484 7487 0
1032 -7483 7486 0
c ((aux1822 + aux1824 - aux1827)<=0)
7480 -7491 0
7481 -7492 0
7474 -7491 0
7474 7480 -7492 0
7474 7481 -7494 0
7475 -7492 0
7475 7480 -7494 0
7475 7481 -7496 0
c (0<=(aux1822 + aux1824 - aux1827))
-7481 7496 0
-7480 7494 0
-7475 7496 0
-7475 -7481 7494 0
-7475 -7480 7492 0
-7474 7494 0
-7474 -7481 7492 0
-7474 -7480 7491 0
c ((SATLiteral(1004) - aux1828 + SATLiteral(899))<=0)
-899 -7498 0
-1004 -7498 0
-1004 -899 -7499 0
c (0<=(SATLiteral(1004) - aux1828 + SATLiteral(899)))
899 7499 0
1004 7499 0
1004 899 7498 0
c ((SATLiteral(1019) - aux1829 + SATLiteral(884))<=0)
-884 -7501 0
-1019 -7501 0
-1019 -884 -7502 0
c (0<=(SATLiteral(1019) - aux1829 + SATLiteral(884)))
884 7502 0
1019 7502 0
1019 884 7501 0
c (( - aux1830 + SATLiteral(1139) + SATLiteral(869))<=0)
-869 -7504 0
-1139 -7504 0
-1139 -869 -7505 0
c (0<=( - aux1830 + SATLiteral(1139) + SATLiteral(869)))
869 7505 0
1139 7505 0
1139 869 7504 0
c (( - aux1831 + SATLiteral(1154) + SATLiteral(1169))<=0)
-1169 -7507 0
-1154 -7507 0
-1154 -1169 -7508 0
c (0<=( - aux1831 + SATLiteral(1154) + SATLiteral(1169)))
1169 7508 0
1154 7508 0
1154 1169 7507 0
c ((SATLiteral(1034) + aux1831 - aux1832)<=0)
7507 -7510 0
7508 -7511 0
-1034 -7510 0
-1034 7507 -7511 0
-1034 7508 -7513 0
c (0<=(SATLiteral(1034) + aux1831 - aux1832))
-7508 7513 0
-7507 7511 0
1034 7513 0
1034 -7508 7511 0
1034 -7507 7510 0
c ((aux1828 + aux1830 - aux1833)<=0)
7504 -7515 0
7505 -7516 0
7498 -7515 0
7498 7504 -7516 0
7498 7505 -7518 0
7499 -7516 0
7499 7504 -7518 0
7499 7505 -7520 0
c (0<=(aux1828 + aux1830 - aux1833))
-7505 7520 0
-7504 7518 0
-7499 7520 0
-7499 -7505 7518 0
-7499 -7504 7516 0
-7498 7518 0
-7498 -7505 7516 0
-7498 -7504 7515 0
c ((SATLiteral(1006) - aux1834 + SATLiteral(901))<=0)
-901 -7522 0
-1006 -7522 0
-1006 -901 -7523 0
c (0<=(SATLiteral(1006) - aux1834 + SATLiteral(901)))
901 7523 0
1006 7523 0
1006 901 7522 0
c ((SATLiteral(1021) - aux1835 + SATLiteral(886))<=0)
-886 -7525 0
-1021 -7525 0
-1021 -886 -7526 0
c (0<=(SATLiteral(1021) - aux1835 + SATLiteral(886)))
886 7526 0
1021 7526 0
1021 886 7525 0
c (( - aux1836 + SATLiteral(1141) + SATLiteral(871))<=0)
-871 -7528 0
-1141 -7528 0
-1141 -871 -7529 0
c (0<=( - aux1836 + SATLiteral(1141) + SATLiteral(871)))
871 7529 0
1141 7529 0
1141 871 7528 0
c (( - aux1837 + SATLiteral(1156) + SATLiteral(1171))<=0)
-1171 -7531 0
-1156 -7531 0
-1156 -1171 -7532 0
c (0<=( - aux1837 + SATLiteral(1156) + SATLiteral(1171)))
1171 7532 0
1156 7532 0
1156 1171 7531 0
c ((SATLiteral(1036) + aux1837 - aux1838)<=0)
7531 -7534 0
7532 -7535 0
-1036 -7534 0
-1036 7531 -7535 0
-1036 7532 -7537 0
c (0<=(SATLiteral(1036) + aux1837 - aux1838))
-7532 7537 0
-7531 7535 0
1036 7537 0
1036 -7532 7535 0
1036 -7531 7534 0
c ((aux1834 + aux1836 - aux1839)<=0)
7528 -7539 0
7529 -7540 0
7522 -7539 0
7522 7528 -7540 0
7522 7529 -7542 0
7523 -7540 0
7523 7528 -7542 0
7523 7529 -7544 0
c (0<=(aux1834 + aux1836 - aux1839))
-7529 7544 0
-7528 7542 0
-7523 7544 0
-7523 -7529 7542 0
-7523 -7528 7540 0
-7522 7542 0
-7522 -7529 7540 0
-7522 -7528 7539 0
c ((SATLiteral(-1005) - aux1840 + SATLiteral(-900))<=0)
900 -7546 0
1005 -7546 0
1005 900 -7547 0
c (0<=(SATLiteral(-1005) - aux1840 + SATLiteral(-900)))
-900 7547 0
-1005 7547 0
-1005 -900 7546 0
c ((SATLiteral(-1020) - aux1841 + SATLiteral(-885))<=0)
885 -7549 0
1020 -7549 0
1020 885 -7550 0
c (0<=(SATLiteral(-1020) - aux1841 + SATLiteral(-885)))
-885 7550 0
-1020 7550 0
-1020 -885 7549 0
c (( - aux1842 + SATLiteral(-1140) + SATLiteral(-870))<=0)
870 -7552 0
1140 -7552 0
1140 870 -7553 0
c (0<=( - aux1842 + SATLiteral(-1140) + SATLiteral(-870)))
-870 7553 0
-1140 7553 0
-1140 -870 7552 0
c (( - aux1843 + SATLiteral(-1155) + SATLiteral(-1170))<=0)
1170 -7555 0
1155 -7555 0
1155 1170 -7556 0
c (0<=( - aux1843 + SATLiteral(-1155) + SATLiteral(-1170)))
-1170 7556 0
-1155 7556 0
-1155 -1170 7555 0
c ((SATLiteral(-1035) + aux1843 - aux1844)<=0)
7555 -7558 0
7556 -7559 0
1035 -7558 0
1035 7555 -7559 0
1035 7556 -7561 0
c (0<=(SATLiteral(-1035) + aux1843 - aux1844))
-7556 7561 0
-7555 7559 0
-1035 7561 0
-1035 -7556 7559 0
-1035 -7555 7558 0
c ((aux1840 + aux1842 - aux1845)<=0)
7552 -7563 0
7553 -7564 0
7546 -7563 0
7546 7552 -7564 0
7546 7553 -7566 0
7547 -7564 0
7547 7552 -7566 0
7547 7553 -7568 0
c (0<=(aux1840 + aux1842 - aux1845))
-7553 7568 0
-7552 7566 0
-7547 7568 0
-7547 -7553 7566 0
-7547 -7552 7564 0
-7546 7566 0
-7546 -7553 7564 0
-7546 -7552 7563 0
c ((SATLiteral(1037) - aux1846 + SATLiteral(932))<=0)
-932 -7570 0
-1037 -7570 0
-1037 -932 -7571 0
c (0<=(SATLiteral(1037) - aux1846 + SATLiteral(932)))
932 7571 0
1037 7571 0
1037 932 7570 0
c ((SATLiteral(1052) - aux1847 + SATLiteral(917))<=0)
-917 -7573 0
-1052 -7573 0
-1052 -917 -7574 0
c (0<=(SATLiteral(1052) - aux1847 + SATLiteral(917)))
917 7574 0
1052 7574 0
1052 917 7573 0
c (( - aux1848 + SATLiteral(1172) + SATLiteral(902))<=0)
-902 -7576 0
-1172 -7576 0
-1172 -902 -7577 0
c (0<=( - aux1848 + SATLiteral(1172) + SATLiteral(902)))
902 7577 0
1172 7577 0
1172 902 7576 0
c (( - aux1849 + SATLiteral(1187) + SATLiteral(1202))<=0)
-1202 -7579 0
-1187 -7579 0
-1187 -1202 -7580 0
c (0<=( - aux1849 + SATLiteral(1187) + SATLiteral(1202)))
1202 7580 0
1187 7580 0
1187 1202 7579 0
c ((SATLiteral(1067) + aux1849 - aux1850)<=0)
7579 -7582 0
7580 -7583 0
-1067 -7582 0
-1067 7579 -7583 0
-1067 7580 -7585 0
c (0<=(SATLiteral(1067) + aux1849 - aux1850))
-7580 7585 0
-7579 7583 0
1067 7585 0
1067 -7580 7583 0
1067 -7579 7582 0
c ((aux1846 + aux1848 - aux1851)<=0)
7576 -7587 0
7577 -7588 0
7570 -7587 0
7570 7576 -7588 0
7570 7577 -7590 0
7571 -7588 0
7571 7576 -7590 0
7571 7577 -7592 0
c (0<=(aux1846 + aux1848 - aux1851))
-7577 7592 0
-7576 7590 0
-7571 7592 0
-7571 -7577 7590 0
-7571 -7576 7588 0
-7570 7590 0
-7570 -7577 7588 0
-7570 -7576 7587 0
c ((SATLiteral(1039) - aux1852 + SATLiteral(934))<=0)
-934 -7594 0
-1039 -7594 0
-1039 -934 -7595 0
c (0<=(SATLiteral(1039) - aux1852 + SATLiteral(934)))
934 7595 0
1039 7595 0
1039 934 7594 0
c ((SATLiteral(1054) - aux1853 + SATLiteral(919))<=0)
-919 -7597 0
-1054 -7597 0
-1054 -919 -7598 0
c (0<=(SATLiteral(1054) - aux1853 + SATLiteral(919)))
919 7598 0
1054 7598 0
1054 919 7597 0
c (( - aux1854 + SATLiteral(1174) + SATLiteral(904))<=0)
-904 -7600 0
-1174 -7600 0
-1174 -904 -7601 0
c (0<=( - aux1854 + SATLiteral(1174) + SATLiteral(904)))
904 7601 0
1174 7601 0
1174 904 7600 0
c (( - aux1855 + SATLiteral(1189) + SATLiteral(1204))<=0)
-1204 -7603 0
-1189 -7603 0
-1189 -1204 -7604 0
c (0<=( - aux1855 + SATLiteral(1189) + SATLiteral(1204)))
1204 7604 0
1189 7604 0
1189 1204 7603 0
c ((SATLiteral(1069) + aux1855 - aux1856)<=0)
7603 -7606 0
7604 -7607 0
-1069 -7606 0
-1069 7603 -7607 0
-1069 7604 -7609 0
c (0<=(SATLiteral(1069) + aux1855 - aux1856))
-7604 7609 0
-7603 7607 0
1069 7609 0
1069 -7604 7607 0
1069 -7603 7606 0
c ((aux1852 + aux1854 - aux1857)<=0)
7600 -7611 0
7601 -7612 0
7594 -7611 0
7594 7600 -7612 0
7594 7601 -7614 0
7595 -7612 0
7595 7600 -7614 0
7595 7601 -7616 0
c (0<=(aux1852 + aux1854 - aux1857))
-7601 7616 0
-7600 7614 0
-7595 7616 0
-7595 -7601 7614 0
-7595 -7600 7612 0
-7594 7614 0
-7594 -7601 7612 0
-7594 -7600 7611 0
c ((SATLiteral(1041) - aux1858 + SATLiteral(936))<=0)
-936 -7618 0
-1041 -7618 0
-1041 -936 -7619 0
c (0<=(SATLiteral(1041) - aux1858 + SATLiteral(936)))
936 7619 0
1041 7619 0
1041 936 7618 0
c ((SATLiteral(1056) - aux1859 + SATLiteral(921))<=0)
-921 -7621 0
-1056 -7621 0
-1056 -921 -7622 0
c (0<=(SATLiteral(1056) - aux1859 + SATLiteral(921)))
921 7622 0
1056 7622 0
1056 921 7621 0
c (( - aux1860 + SATLiteral(1176) + SATLiteral(906))<=0)
-906 -7624 0
-1176 -7624 0
-1176 -906 -7625 0
c (0<=( - aux1860 + SATLiteral(1176) + SATLiteral(906)))
906 7625 0
1176 7625 0
1176 906 7624 0
c (( - aux1861 + SATLiteral(1191) + SATLiteral(1206))<=0)
-1206 -7627 0
-1191 -7627 0
-1191 -1206 -7628 0
c (0<=( - aux1861 + SATLiteral(1191) + SATLiteral(1206)))
1206 7628 0
1191 7628 0
1191 1206 7627 0
c ((SATLiteral(1071) + aux1861 - aux1862)<=0)
7627 -7630 0
7628 -7631 0
-1071 -7630 0
-1071 7627 -7631 0
-1071 7628 -7633 0
c (0<=(SATLiteral(1071) + aux1861 - aux1862))
-7628 7633 0
-7627 7631 0
1071 7633 0
1071 -7628 7631 0
1071 -7627 7630 0
c ((aux1858 + aux1860 - aux1863)<=0)
7624 -7635 0
7625 -7636 0
7618 -7635 0
7618 7624 -7636 0
7618 7625 -7638 0
7619 -7636 0
7619 7624 -7638 0
7619 7625 -7640 0
c (0<=(aux1858 + aux1860 - aux1863))
-7625 7640 0
-7624 7638 0
-7619 7640 0
-7619 -7625 7638 0
-7619 -7624 7636 0
-7618 7638 0
-7618 -7625 7636 0
-7618 -7624 7635 0
c ((SATLiteral(1043) - aux1864 + SATLiteral(938))<=0)
-938 -7642 0
-1043 -7642 0
-1043 -938 -7643 0
c (0<=(SATLiteral(1043) - aux1864 + SATLiteral(938)))
938 7643 0
1043 7643 0
1043 938 7642 0
c ((SATLiteral(1058) - aux1865 + SATLiteral(923))<=0)
-923 -7645 0
-1058 -7645 0
-1058 -923 -7646 0
c (0<=(SATLiteral(1058) - aux1865 + SATLiteral(923)))
923 7646 0
1058 7646 0
1058 923 7645 0
c (( - aux1866 + SATLiteral(1178) + SATLiteral(908))<=0)
-908 -7648 0
-1178 -7648 0
-1178 -908 -7649 0
c (0<=( - aux1866 + SATLiteral(1178) + SATLiteral(908)))
908 7649 0
1178 7649 0
1178 908 7648 0
c (( - aux1867 + SATLiteral(1193) + SATLiteral(1208))<=0)
-1208 -7651 0
-1193 -7651 0
-1193 -1208 -7652 0
c (0<=( - aux1867 + SATLiteral(1193) + SATLiteral(1208)))
1208 7652 0
1193 7652 0
1193 1208 7651 0
c ((SATLiteral(1073) + aux1867 - aux1868)<=0)
7651 -7654 0
7652 -7655 0
-1073 -7654 0
-1073 7651 -7655 0
-1073 7652 -7657 0
c (0<=(SATLiteral(1073) + aux1867 - aux1868))
-7652 7657 0
-7651 7655 0
1073 7657 0
1073 -7652 7655 0
1073 -7651 7654 0
c ((aux1864 + aux1866 - aux1869)<=0)
7648 -7659 0
7649 -7660 0
7642 -7659 0
7642 7648 -7660 0
7642 7649 -7662 0
7643 -7660 0
7643 7648 -7662 0
7643 7649 -7664 0
c (0<=(aux1864 + aux1866 - aux1869))
-7649 7664 0
-7648 7662 0
-7643 7664 0
-7643 -7649 7662 0
-7643 -7648 7660 0
-7642 7662 0
-7642 -7649 7660 0
-7642 -7648 7659 0
c ((SATLiteral(1045) - aux1870 + SATLiteral(940))<=0)
-940 -7666 0
-1045 -7666 0
-1045 -940 -7667 0
c (0<=(SATLiteral(1045) - aux1870 + SATLiteral(940)))
940 7667 0
1045 7667 0
1045 940 7666 0
c ((SATLiteral(1060) - aux1871 + SATLiteral(925))<=0)
-925 -7669 0
-1060 -7669 0
-1060 -925 -7670 0
c (0<=(SATLiteral(1060) - aux1871 + SATLiteral(925)))
925 7670 0
1060 7670 0
1060 925 7669 0
c (( - aux1872 + SATLiteral(1180) + SATLiteral(910))<=0)
-910 -7672 0
-1180 -7672 0
-1180 -910 -7673 0
c (0<=( - aux1872 + SATLiteral(1180) + SATLiteral(910)))
910 7673 0
1180 7673 0
1180 910 7672 0
c (( - aux1873 + SATLiteral(1195) + SATLiteral(1210))<=0)
-1210 -7675 0
-1195 -7675 0
-1195 -1210 -7676 0
c (0<=( - aux1873 + SATLiteral(1195) + SATLiteral(1210)))
1210 7676 0
1195 7676 0
1195 1210 7675 0
c ((SATLiteral(1075) + aux1873 - aux1874)<=0)
7675 -7678 0
7676 -7679 0
-1075 -7678 0
-1075 7675 -7679 0
-1075 7676 -7681 0
c (0<=(SATLiteral(1075) + aux1873 - aux1874))
-7676 7681 0
-7675 7679 0
1075 7681 0
1075 -7676 7679 0
1075 -7675 7678 0
c ((aux1870 + aux1872 - aux1875)<=0)
7672 -7683 0
7673 -7684 0
7666 -7683 0
7666 7672 -7684 0
7666 7673 -7686 0
7667 -7684 0
7667 7672 -7686 0
7667 7673 -7688 0
c (0<=(aux1870 + aux1872 - aux1875))
-7673 7688 0
-7672 7686 0
-7667 7688 0
-7667 -7673 7686 0
-7667 -7672 7684 0
-7666 7686 0
-7666 -7673 7684 0
-7666 -7672 7683 0
c ((SATLiteral(1047) - aux1876 + SATLiteral(942))<=0)
-942 -7690 0
-1047 -7690 0
-1047 -942 -7691 0
c (0<=(SATLiteral(1047) - aux1876 + SATLiteral(942)))
942 7691 0
1047 7691 0
1047 942 7690 0
c ((SATLiteral(1062) - aux1877 + SATLiteral(927))<=0)
-927 -7693 0
-1062 -7693 0
-1062 -927 -7694 0
c (0<=(SATLiteral(1062) - aux1877 + SATLiteral(927)))
927 7694 0
1062 7694 0
1062 927 7693 0
c (( - aux1878 + SATLiteral(1182) + SATLiteral(912))<=0)
-912 -7696 0
-1182 -7696 0
-1182 -912 -7697 0
c (0<=( - aux1878 + SATLiteral(1182) + SATLiteral(912)))
912 7697 0
1182 7697 0
1182 912 7696 0
c (( - aux1879 + SATLiteral(1197) + SATLiteral(1212))<=0)
-1212 -7699 0
-1197 -7699 0
-1197 -1212 -7700 0
c (0<=( - aux1879 + SATLiteral(1197) + SATLiteral(1212)))
1212 7700 0
1197 7700 0
1197 1212 7699 0
c ((SATLiteral(1077) + aux1879 - aux1880)<=0)
7699 -7702 0
7700 -7703 0
-1077 -7702 0
-1077 7699 -7703 0
-1077 7700 -7705 0
c (0<=(SATLiteral(1077) + aux1879 - aux1880))
-7700 7705 0
-7699 7703 0
1077 7705 0
1077 -7700 7703 0
1077 -7699 7702 0
c ((aux1876 + aux1878 - aux1881)<=0)
7696 -7707 0
7697 -7708 0
7690 -7707 0
7690 7696 -7708 0
7690 7697 -7710 0
7691 -7708 0
7691 7696 -7710 0
7691 7697 -7712 0
c (0<=(aux1876 + aux1878 - aux1881))
-7697 7712 0
-7696 7710 0
-7691 7712 0
-7691 -7697 7710 0
-7691 -7696 7708 0
-7690 7710 0
-7690 -7697 7708 0
-7690 -7696 7707 0
c ((SATLiteral(1049) - aux1882 + SATLiteral(944))<=0)
-944 -7714 0
-1049 -7714 0
-1049 -944 -7715 0
c (0<=(SATLiteral(1049) - aux1882 + SATLiteral(944)))
944 7715 0
1049 7715 0
1049 944 7714 0
c ((SATLiteral(1064) - aux1883 + SATLiteral(929))<=0)
-929 -7717 0
-1064 -7717 0
-1064 -929 -7718 0
c (0<=(SATLiteral(1064) - aux1883 + SATLiteral(929)))
929 7718 0
1064 7718 0
1064 929 7717 0
c (( - aux1884 + SATLiteral(1184) + SATLiteral(914))<=0)
-914 -7720 0
-1184 -7720 0
-1184 -914 -7721 0
c (0<=( - aux1884 + SATLiteral(1184) + SATLiteral(914)))
914 7721 0
1184 7721 0
1184 914 7720 0
c (( - aux1885 + SATLiteral(1199) + SATLiteral(1214))<=0)
-1214 -7723 0
-1199 -7723 0
-1199 -1214 -7724 0
c (0<=( - aux1885 + SATLiteral(1199) + SATLiteral(1214)))
1214 7724 0
1199 7724 0
1199 1214 7723 0
c ((SATLiteral(1079) + aux1885 - aux1886)<=0)
7723 -7726 0
7724 -7727 0
-1079 -7726 0
-1079 7723 -7727 0
-1079 7724 -7729 0
c (0<=(SATLiteral(1079) + aux1885 - aux1886))
-7724 7729 0
-7723 7727 0
1079 7729 0
1079 -7724 7727 0
1079 -7723 7726 0
c ((aux1882 + aux1884 - aux1887)<=0)
7720 -7731 0
7721 -7732 0
7714 -7731 0
7714 7720 -7732 0
7714 7721 -7734 0
7715 -7732 0
7715 7720 -7734 0
7715 7721 -7736 0
c (0<=(aux1882 + aux1884 - aux1887))
-7721 7736 0
-7720 7734 0
-7715 7736 0
-7715 -7721 7734 0
-7715 -7720 7732 0
-7714 7734 0
-7714 -7721 7732 0
-7714 -7720 7731 0
c ((SATLiteral(1051) - aux1888 + SATLiteral(946))<=0)
-946 -7738 0
-1051 -7738 0
-1051 -946 -7739 0
c (0<=(SATLiteral(1051) - aux1888 + SATLiteral(946)))
946 7739 0
1051 7739 0
1051 946 7738 0
c ((SATLiteral(1066) - aux1889 + SATLiteral(931))<=0)
-931 -7741 0
-1066 -7741 0
-1066 -931 -7742 0
c (0<=(SATLiteral(1066) - aux1889 + SATLiteral(931)))
931 7742 0
1066 7742 0
1066 931 7741 0
c (( - aux1890 + SATLiteral(1186) + SATLiteral(916))<=0)
-916 -7744 0
-1186 -7744 0
-1186 -916 -7745 0
c (0<=( - aux1890 + SATLiteral(1186) + SATLiteral(916)))
916 7745 0
1186 7745 0
1186 916 7744 0
c (( - aux1891 + SATLiteral(1201) + SATLiteral(1216))<=0)
-1216 -7747 0
-1201 -7747 0
-1201 -1216 -7748 0
c (0<=( - aux1891 + SATLiteral(1201) + SATLiteral(1216)))
1216 7748 0
1201 7748 0
1201 1216 7747 0
c ((SATLiteral(1081) + aux1891 - aux1892)<=0)
7747 -7750 0
7748 -7751 0
-1081 -7750 0
-1081 7747 -7751 0
-1081 7748 -7753 0
c (0<=(SATLiteral(1081) + aux1891 - aux1892))
-7748 7753 0
-7747 7751 0
1081 7753 0
1081 -7748 7751 0
1081 -7747 7750 0
c ((aux1888 + aux1890 - aux1893)<=0)
7744 -7755 0
7745 -7756 0
7738 -7755 0
7738 7744 -7756 0
7738 7745 -7758 0
7739 -7756 0
7739 7744 -7758 0
7739 7745 -7760 0
c (0<=(aux1888 + aux1890 - aux1893))
-7745 7760 0
-7744 7758 0
-7739 7760 0
-7739 -7745 7758 0
-7739 -7744 7756 0
-7738 7758 0
-7738 -7745 7756 0
-7738 -7744 7755 0
c ((SATLiteral(-1050) - aux1894 + SATLiteral(-945))<=0)
945 -7762 0
1050 -7762 0
1050 945 -7763 0
c (0<=(SATLiteral(-1050) - aux1894 + SATLiteral(-945)))
-945 7763 0
-1050 7763 0
-1050 -945 7762 0
c ((SATLiteral(-1065) - aux1895 + SATLiteral(-930))<=0)
930 -7765 0
1065 -7765 0
1065 930 -7766 0
c (0<=(SATLiteral(-1065) - aux1895 + SATLiteral(-930)))
-930 7766 0
-1065 7766 0
-1065 -930 7765 0
c (( - aux1896 + SATLiteral(-1185) + SATLiteral(-915))<=0)
915 -7768 0
1185 -7768 0
1185 915 -7769 0
c (0<=( - aux1896 + SATLiteral(-1185) + SATLiteral(-915)))
-915 7769 0
-1185 7769 0
-1185 -915 7768 0
c (( - aux1897 + SATLiteral(-1200) + SATLiteral(-1215))<=0)
1215 -7771 0
1200 -7771 0
1200 1215 -7772 0
c (0<=( - aux1897 + SATLiteral(-1200) + SATLiteral(-1215)))
-1215 7772 0
-1200 7772 0
-1200 -1215 7771 0
c ((SATLiteral(-1080) + aux1897 - aux1898)<=0)
7771 -7774 0
7772 -7775 0
1080 -7774 0
1080 7771 -7775 0
1080 7772 -7777 0
c (0<=(SATLiteral(-1080) + aux1897 - aux1898))
-7772 7777 0
-7771 7775 0
-1080 7777 0
-1080 -7772 7775 0
-1080 -7771 7774 0
c ((aux1894 + aux1896 - aux1899)<=0)
7768 -7779 0
7769 -7780 0
7762 -7779 0
7762 7768 -7780 0
7762 7769 -7782 0
7763 -7780 0
7763 7768 -7782 0
7763 7769 -7784 0
c (0<=(aux1894 + aux1896 - aux1899))
-7769 7784 0
-7768 7782 0
-7763 7784 0
-7763 -7769 7782 0
-7763 -7768 7780 0
-7762 7782 0
-7762 -7769 7780 0
-7762 -7768 7779 0
c ((SATLiteral(2) - aux1900 + SATLiteral(167))<=0)
-167 -7786 0
-2 -7786 0
-2 -167 -7787 0
c (0<=(SATLiteral(2) - aux1900 + SATLiteral(167)))
167 7787 0
2 7787 0
2 167 7786 0
c ((SATLiteral(17) - aux1901 + SATLiteral(152))<=0)
-152 -7789 0
-17 -7789 0
-17 -152 -7790 0
c (0<=(SATLiteral(17) - aux1901 + SATLiteral(152)))
152 7790 0
17 7790 0
17 152 7789 0
c ((SATLiteral(4) - aux1902 + SATLiteral(169))<=0)
-169 -7792 0
-4 -7792 0
-4 -169 -7793 0
c (0<=(SATLiteral(4) - aux1902 + SATLiteral(169)))
169 7793 0
4 7793 0
4 169 7792 0
c ((SATLiteral(19) - aux1903 + SATLiteral(154))<=0)
-154 -7795 0
-19 -7795 0
-19 -154 -7796 0
c (0<=(SATLiteral(19) - aux1903 + SATLiteral(154)))
154 7796 0
19 7796 0
19 154 7795 0
c ((SATLiteral(6) - aux1904 + SATLiteral(171))<=0)
-171 -7798 0
-6 -7798 0
-6 -171 -7799 0
c (0<=(SATLiteral(6) - aux1904 + SATLiteral(171)))
171 7799 0
6 7799 0
6 171 7798 0
c ((SATLiteral(21) - aux1905 + SATLiteral(156))<=0)
-156 -7801 0
-21 -7801 0
-21 -156 -7802 0
c (0<=(SATLiteral(21) - aux1905 + SATLiteral(156)))
156 7802 0
21 7802 0
21 156 7801 0
c ((SATLiteral(8) - aux1906 + SATLiteral(173))<=0)
-173 -7804 0
-8 -7804 0
-8 -173 -7805 0
c (0<=(SATLiteral(8) - aux1906 + SATLiteral(173)))
173 7805 0
8 7805 0
8 173 7804 0
c ((SATLiteral(23) - aux1907 + SATLiteral(158))<=0)
-158 -7807 0
-23 -7807 0
-23 -158 -7808 0
c (0<=(SATLiteral(23) - aux1907 + SATLiteral(158)))
158 7808 0
23 7808 0
23 158 7807 0
c ((SATLiteral(10) - aux1908 + SATLiteral(175))<=0)
-175 -7810 0
-10 -7810 0
-10 -175 -7811 0
c (0<=(SATLiteral(10) - aux1908 + SATLiteral(175)))
175 7811 0
10 7811 0
10 175 7810 0
c ((SATLiteral(25) - aux1909 + SATLiteral(160))<=0)
-160 -7813 0
-25 -7813 0
-25 -160 -7814 0
c (0<=(SATLiteral(25) - aux1909 + SATLiteral(160)))
160 7814 0
25 7814 0
25 160 7813 0
c ((SATLiteral(12) - aux1910 + SATLiteral(177))<=0)
-177 -7816 0
-12 -7816 0
-12 -177 -7817 0
c (0<=(SATLiteral(12) - aux1910 + SATLiteral(177)))
177 7817 0
12 7817 0
12 177 7816 0
c ((SATLiteral(27) - aux1911 + SATLiteral(162))<=0)
-162 -7819 0
-27 -7819 0
-27 -162 -7820 0
c (0<=(SATLiteral(27) - aux1911 + SATLiteral(162)))
162 7820 0
27 7820 0
27 162 7819 0
c ((SATLiteral(14) - aux1912 + SATLiteral(179))<=0)
-179 -7822 0
-14 -7822 0
-14 -179 -7823 0
c (0<=(SATLiteral(14) - aux1912 + SATLiteral(179)))
179 7823 0
14 7823 0
14 179 7822 0
c ((SATLiteral(29) - aux1913 + SATLiteral(164))<=0)
-164 -7825 0
-29 -7825 0
-29 -164 -7826 0
c (0<=(SATLiteral(29) - aux1913 + SATLiteral(164)))
164 7826 0
29 7826 0
29 164 7825 0
c ((SATLiteral(16) - aux1914 + SATLiteral(181))<=0)
-181 -7828 0
-16 -7828 0
-16 -181 -7829 0
c (0<=(SATLiteral(16) - aux1914 + SATLiteral(181)))
181 7829 0
16 7829 0
16 181 7828 0
c ((SATLiteral(31) - aux1915 + SATLiteral(166))<=0)
-166 -7831 0
-31 -7831 0
-31 -166 -7832 0
c (0<=(SATLiteral(31) - aux1915 + SATLiteral(166)))
166 7832 0
31 7832 0
31 166 7831 0
c ((SATLiteral(-15) - aux1916 + SATLiteral(-180))<=0)
180 -7834 0
15 -7834 0
15 180 -7835 0
c (0<=(SATLiteral(-15) - aux1916 + SATLiteral(-180)))
-180 7835 0
-15 7835 0
-15 -180 7834 0
c ((SATLiteral(-30) - aux1917 + SATLiteral(-165))<=0)
165 -7837 0
30 -7837 0
30 165 -7838 0
c (0<=(SATLiteral(-30) - aux1917 + SATLiteral(-165)))
-165 7838 0
-30 7838 0
-30 -165 7837 0
