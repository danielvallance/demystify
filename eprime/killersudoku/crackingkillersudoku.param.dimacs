p cnf 9330 47520                                                                                    

1 0
c Encoding variable: x_00001_00001 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00001_00001' order represents '1' with '2'
c Var 'x_00001_00001' direct represents '1' with '2'
c Var 'x_00001_00001' order represents '2' with '3'
-2 3 0
c Var 'x_00001_00001' direct represents '2' with '4'
2 -3 4 0
-4 3 0
-4 -2 0
c Var 'x_00001_00001' order represents '3' with '5'
-3 5 0
c Var 'x_00001_00001' direct represents '3' with '6'
3 -5 6 0
-6 5 0
-6 -3 0
c Var 'x_00001_00001' order represents '4' with '7'
-5 7 0
c Var 'x_00001_00001' direct represents '4' with '8'
5 -7 8 0
-8 7 0
-8 -5 0
c Var 'x_00001_00001' order represents '5' with '9'
-7 9 0
c Var 'x_00001_00001' direct represents '5' with '10'
7 -9 10 0
-10 9 0
-10 -7 0
c Var 'x_00001_00001' order represents '6' with '11'
-9 11 0
c Var 'x_00001_00001' direct represents '6' with '12'
9 -11 12 0
-12 11 0
-12 -9 0
c Var 'x_00001_00001' order represents '7' with '13'
-11 13 0
c Var 'x_00001_00001' direct represents '7' with '14'
11 -13 14 0
-14 13 0
-14 -11 0
c Var 'x_00001_00001' order represents '8' with '15'
-13 15 0
c Var 'x_00001_00001' direct represents '8' with '16'
13 -15 16 0
-16 15 0
-16 -13 0
c Var 'x_00001_00001' direct represents '9' with '-15'
2 4 6 8 10 12 14 16 -15 0
c Encoding variable: x_00001_00002 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00001_00002' order represents '1' with '17'
c Var 'x_00001_00002' direct represents '1' with '17'
c Var 'x_00001_00002' order represents '2' with '18'
-17 18 0
c Var 'x_00001_00002' direct represents '2' with '19'
17 -18 19 0
-19 18 0
-19 -17 0
c Var 'x_00001_00002' order represents '3' with '20'
-18 20 0
c Var 'x_00001_00002' direct represents '3' with '21'
18 -20 21 0
-21 20 0
-21 -18 0
c Var 'x_00001_00002' order represents '4' with '22'
-20 22 0
c Var 'x_00001_00002' direct represents '4' with '23'
20 -22 23 0
-23 22 0
-23 -20 0
c Var 'x_00001_00002' order represents '5' with '24'
-22 24 0
c Var 'x_00001_00002' direct represents '5' with '25'
22 -24 25 0
-25 24 0
-25 -22 0
c Var 'x_00001_00002' order represents '6' with '26'
-24 26 0
c Var 'x_00001_00002' direct represents '6' with '27'
24 -26 27 0
-27 26 0
-27 -24 0
c Var 'x_00001_00002' order represents '7' with '28'
-26 28 0
c Var 'x_00001_00002' direct represents '7' with '29'
26 -28 29 0
-29 28 0
-29 -26 0
c Var 'x_00001_00002' order represents '8' with '30'
-28 30 0
c Var 'x_00001_00002' direct represents '8' with '31'
28 -30 31 0
-31 30 0
-31 -28 0
c Var 'x_00001_00002' direct represents '9' with '-30'
17 19 21 23 25 27 29 31 -30 0
c Encoding variable: x_00001_00003 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00001_00003' order represents '1' with '32'
c Var 'x_00001_00003' direct represents '1' with '32'
c Var 'x_00001_00003' order represents '2' with '33'
-32 33 0
c Var 'x_00001_00003' direct represents '2' with '34'
32 -33 34 0
-34 33 0
-34 -32 0
c Var 'x_00001_00003' order represents '3' with '35'
-33 35 0
c Var 'x_00001_00003' direct represents '3' with '36'
33 -35 36 0
-36 35 0
-36 -33 0
c Var 'x_00001_00003' order represents '4' with '37'
-35 37 0
c Var 'x_00001_00003' direct represents '4' with '38'
35 -37 38 0
-38 37 0
-38 -35 0
c Var 'x_00001_00003' order represents '5' with '39'
-37 39 0
c Var 'x_00001_00003' direct represents '5' with '40'
37 -39 40 0
-40 39 0
-40 -37 0
c Var 'x_00001_00003' order represents '6' with '41'
-39 41 0
c Var 'x_00001_00003' direct represents '6' with '42'
39 -41 42 0
-42 41 0
-42 -39 0
c Var 'x_00001_00003' order represents '7' with '43'
-41 43 0
c Var 'x_00001_00003' direct represents '7' with '44'
41 -43 44 0
-44 43 0
-44 -41 0
c Var 'x_00001_00003' order represents '8' with '45'
-43 45 0
c Var 'x_00001_00003' direct represents '8' with '46'
43 -45 46 0
-46 45 0
-46 -43 0
c Var 'x_00001_00003' direct represents '9' with '-45'
32 34 36 38 40 42 44 46 -45 0
c Encoding variable: x_00001_00004 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00001_00004' order represents '1' with '47'
c Var 'x_00001_00004' direct represents '1' with '47'
c Var 'x_00001_00004' order represents '2' with '48'
-47 48 0
c Var 'x_00001_00004' direct represents '2' with '49'
47 -48 49 0
-49 48 0
-49 -47 0
c Var 'x_00001_00004' order represents '3' with '50'
-48 50 0
c Var 'x_00001_00004' direct represents '3' with '51'
48 -50 51 0
-51 50 0
-51 -48 0
c Var 'x_00001_00004' order represents '4' with '52'
-50 52 0
c Var 'x_00001_00004' direct represents '4' with '53'
50 -52 53 0
-53 52 0
-53 -50 0
c Var 'x_00001_00004' order represents '5' with '54'
-52 54 0
c Var 'x_00001_00004' direct represents '5' with '55'
52 -54 55 0
-55 54 0
-55 -52 0
c Var 'x_00001_00004' order represents '6' with '56'
-54 56 0
c Var 'x_00001_00004' direct represents '6' with '57'
54 -56 57 0
-57 56 0
-57 -54 0
c Var 'x_00001_00004' order represents '7' with '58'
-56 58 0
c Var 'x_00001_00004' direct represents '7' with '59'
56 -58 59 0
-59 58 0
-59 -56 0
c Var 'x_00001_00004' order represents '8' with '60'
-58 60 0
c Var 'x_00001_00004' direct represents '8' with '61'
58 -60 61 0
-61 60 0
-61 -58 0
c Var 'x_00001_00004' direct represents '9' with '-60'
47 49 51 53 55 57 59 61 -60 0
c Encoding variable: x_00001_00005 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00001_00005' order represents '1' with '62'
c Var 'x_00001_00005' direct represents '1' with '62'
c Var 'x_00001_00005' order represents '2' with '63'
-62 63 0
c Var 'x_00001_00005' direct represents '2' with '64'
62 -63 64 0
-64 63 0
-64 -62 0
c Var 'x_00001_00005' order represents '3' with '65'
-63 65 0
c Var 'x_00001_00005' direct represents '3' with '66'
63 -65 66 0
-66 65 0
-66 -63 0
c Var 'x_00001_00005' order represents '4' with '67'
-65 67 0
c Var 'x_00001_00005' direct represents '4' with '68'
65 -67 68 0
-68 67 0
-68 -65 0
c Var 'x_00001_00005' order represents '5' with '69'
-67 69 0
c Var 'x_00001_00005' direct represents '5' with '70'
67 -69 70 0
-70 69 0
-70 -67 0
c Var 'x_00001_00005' order represents '6' with '71'
-69 71 0
c Var 'x_00001_00005' direct represents '6' with '72'
69 -71 72 0
-72 71 0
-72 -69 0
c Var 'x_00001_00005' order represents '7' with '73'
-71 73 0
c Var 'x_00001_00005' direct represents '7' with '74'
71 -73 74 0
-74 73 0
-74 -71 0
c Var 'x_00001_00005' order represents '8' with '75'
-73 75 0
c Var 'x_00001_00005' direct represents '8' with '76'
73 -75 76 0
-76 75 0
-76 -73 0
c Var 'x_00001_00005' direct represents '9' with '-75'
62 64 66 68 70 72 74 76 -75 0
c Encoding variable: x_00001_00006 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00001_00006' order represents '1' with '77'
c Var 'x_00001_00006' direct represents '1' with '77'
c Var 'x_00001_00006' order represents '2' with '78'
-77 78 0
c Var 'x_00001_00006' direct represents '2' with '79'
77 -78 79 0
-79 78 0
-79 -77 0
c Var 'x_00001_00006' order represents '3' with '80'
-78 80 0
c Var 'x_00001_00006' direct represents '3' with '81'
78 -80 81 0
-81 80 0
-81 -78 0
c Var 'x_00001_00006' order represents '4' with '82'
-80 82 0
c Var 'x_00001_00006' direct represents '4' with '83'
80 -82 83 0
-83 82 0
-83 -80 0
c Var 'x_00001_00006' order represents '5' with '84'
-82 84 0
c Var 'x_00001_00006' direct represents '5' with '85'
82 -84 85 0
-85 84 0
-85 -82 0
c Var 'x_00001_00006' order represents '6' with '86'
-84 86 0
c Var 'x_00001_00006' direct represents '6' with '87'
84 -86 87 0
-87 86 0
-87 -84 0
c Var 'x_00001_00006' order represents '7' with '88'
-86 88 0
c Var 'x_00001_00006' direct represents '7' with '89'
86 -88 89 0
-89 88 0
-89 -86 0
c Var 'x_00001_00006' order represents '8' with '90'
-88 90 0
c Var 'x_00001_00006' direct represents '8' with '91'
88 -90 91 0
-91 90 0
-91 -88 0
c Var 'x_00001_00006' direct represents '9' with '-90'
77 79 81 83 85 87 89 91 -90 0
c Encoding variable: x_00001_00007 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00001_00007' order represents '1' with '92'
c Var 'x_00001_00007' direct represents '1' with '92'
c Var 'x_00001_00007' order represents '2' with '93'
-92 93 0
c Var 'x_00001_00007' direct represents '2' with '94'
92 -93 94 0
-94 93 0
-94 -92 0
c Var 'x_00001_00007' order represents '3' with '95'
-93 95 0
c Var 'x_00001_00007' direct represents '3' with '96'
93 -95 96 0
-96 95 0
-96 -93 0
c Var 'x_00001_00007' order represents '4' with '97'
-95 97 0
c Var 'x_00001_00007' direct represents '4' with '98'
95 -97 98 0
-98 97 0
-98 -95 0
c Var 'x_00001_00007' order represents '5' with '99'
-97 99 0
c Var 'x_00001_00007' direct represents '5' with '100'
97 -99 100 0
-100 99 0
-100 -97 0
c Var 'x_00001_00007' order represents '6' with '101'
-99 101 0
c Var 'x_00001_00007' direct represents '6' with '102'
99 -101 102 0
-102 101 0
-102 -99 0
c Var 'x_00001_00007' order represents '7' with '103'
-101 103 0
c Var 'x_00001_00007' direct represents '7' with '104'
101 -103 104 0
-104 103 0
-104 -101 0
c Var 'x_00001_00007' order represents '8' with '105'
-103 105 0
c Var 'x_00001_00007' direct represents '8' with '106'
103 -105 106 0
-106 105 0
-106 -103 0
c Var 'x_00001_00007' direct represents '9' with '-105'
92 94 96 98 100 102 104 106 -105 0
c Encoding variable: x_00001_00008 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00001_00008' order represents '1' with '107'
c Var 'x_00001_00008' direct represents '1' with '107'
c Var 'x_00001_00008' order represents '2' with '108'
-107 108 0
c Var 'x_00001_00008' direct represents '2' with '109'
107 -108 109 0
-109 108 0
-109 -107 0
c Var 'x_00001_00008' order represents '3' with '110'
-108 110 0
c Var 'x_00001_00008' direct represents '3' with '111'
108 -110 111 0
-111 110 0
-111 -108 0
c Var 'x_00001_00008' order represents '4' with '112'
-110 112 0
c Var 'x_00001_00008' direct represents '4' with '113'
110 -112 113 0
-113 112 0
-113 -110 0
c Var 'x_00001_00008' order represents '5' with '114'
-112 114 0
c Var 'x_00001_00008' direct represents '5' with '115'
112 -114 115 0
-115 114 0
-115 -112 0
c Var 'x_00001_00008' order represents '6' with '116'
-114 116 0
c Var 'x_00001_00008' direct represents '6' with '117'
114 -116 117 0
-117 116 0
-117 -114 0
c Var 'x_00001_00008' order represents '7' with '118'
-116 118 0
c Var 'x_00001_00008' direct represents '7' with '119'
116 -118 119 0
-119 118 0
-119 -116 0
c Var 'x_00001_00008' order represents '8' with '120'
-118 120 0
c Var 'x_00001_00008' direct represents '8' with '121'
118 -120 121 0
-121 120 0
-121 -118 0
c Var 'x_00001_00008' direct represents '9' with '-120'
107 109 111 113 115 117 119 121 -120 0
c Encoding variable: x_00001_00009 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00001_00009' order represents '1' with '122'
c Var 'x_00001_00009' direct represents '1' with '122'
c Var 'x_00001_00009' order represents '2' with '123'
-122 123 0
c Var 'x_00001_00009' direct represents '2' with '124'
122 -123 124 0
-124 123 0
-124 -122 0
c Var 'x_00001_00009' order represents '3' with '125'
-123 125 0
c Var 'x_00001_00009' direct represents '3' with '126'
123 -125 126 0
-126 125 0
-126 -123 0
c Var 'x_00001_00009' order represents '4' with '127'
-125 127 0
c Var 'x_00001_00009' direct represents '4' with '128'
125 -127 128 0
-128 127 0
-128 -125 0
c Var 'x_00001_00009' order represents '5' with '129'
-127 129 0
c Var 'x_00001_00009' direct represents '5' with '130'
127 -129 130 0
-130 129 0
-130 -127 0
c Var 'x_00001_00009' order represents '6' with '131'
-129 131 0
c Var 'x_00001_00009' direct represents '6' with '132'
129 -131 132 0
-132 131 0
-132 -129 0
c Var 'x_00001_00009' order represents '7' with '133'
-131 133 0
c Var 'x_00001_00009' direct represents '7' with '134'
131 -133 134 0
-134 133 0
-134 -131 0
c Var 'x_00001_00009' order represents '8' with '135'
-133 135 0
c Var 'x_00001_00009' direct represents '8' with '136'
133 -135 136 0
-136 135 0
-136 -133 0
c Var 'x_00001_00009' direct represents '9' with '-135'
122 124 126 128 130 132 134 136 -135 0
c Encoding variable: x_00002_00001 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00002_00001' order represents '1' with '137'
c Var 'x_00002_00001' direct represents '1' with '137'
c Var 'x_00002_00001' order represents '2' with '138'
-137 138 0
c Var 'x_00002_00001' direct represents '2' with '139'
137 -138 139 0
-139 138 0
-139 -137 0
c Var 'x_00002_00001' order represents '3' with '140'
-138 140 0
c Var 'x_00002_00001' direct represents '3' with '141'
138 -140 141 0
-141 140 0
-141 -138 0
c Var 'x_00002_00001' order represents '4' with '142'
-140 142 0
c Var 'x_00002_00001' direct represents '4' with '143'
140 -142 143 0
-143 142 0
-143 -140 0
c Var 'x_00002_00001' order represents '5' with '144'
-142 144 0
c Var 'x_00002_00001' direct represents '5' with '145'
142 -144 145 0
-145 144 0
-145 -142 0
c Var 'x_00002_00001' order represents '6' with '146'
-144 146 0
c Var 'x_00002_00001' direct represents '6' with '147'
144 -146 147 0
-147 146 0
-147 -144 0
c Var 'x_00002_00001' order represents '7' with '148'
-146 148 0
c Var 'x_00002_00001' direct represents '7' with '149'
146 -148 149 0
-149 148 0
-149 -146 0
c Var 'x_00002_00001' order represents '8' with '150'
-148 150 0
c Var 'x_00002_00001' direct represents '8' with '151'
148 -150 151 0
-151 150 0
-151 -148 0
c Var 'x_00002_00001' direct represents '9' with '-150'
137 139 141 143 145 147 149 151 -150 0
c Encoding variable: x_00002_00002 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00002_00002' order represents '1' with '152'
c Var 'x_00002_00002' direct represents '1' with '152'
c Var 'x_00002_00002' order represents '2' with '153'
-152 153 0
c Var 'x_00002_00002' direct represents '2' with '154'
152 -153 154 0
-154 153 0
-154 -152 0
c Var 'x_00002_00002' order represents '3' with '155'
-153 155 0
c Var 'x_00002_00002' direct represents '3' with '156'
153 -155 156 0
-156 155 0
-156 -153 0
c Var 'x_00002_00002' order represents '4' with '157'
-155 157 0
c Var 'x_00002_00002' direct represents '4' with '158'
155 -157 158 0
-158 157 0
-158 -155 0
c Var 'x_00002_00002' order represents '5' with '159'
-157 159 0
c Var 'x_00002_00002' direct represents '5' with '160'
157 -159 160 0
-160 159 0
-160 -157 0
c Var 'x_00002_00002' order represents '6' with '161'
-159 161 0
c Var 'x_00002_00002' direct represents '6' with '162'
159 -161 162 0
-162 161 0
-162 -159 0
c Var 'x_00002_00002' order represents '7' with '163'
-161 163 0
c Var 'x_00002_00002' direct represents '7' with '164'
161 -163 164 0
-164 163 0
-164 -161 0
c Var 'x_00002_00002' order represents '8' with '165'
-163 165 0
c Var 'x_00002_00002' direct represents '8' with '166'
163 -165 166 0
-166 165 0
-166 -163 0
c Var 'x_00002_00002' direct represents '9' with '-165'
152 154 156 158 160 162 164 166 -165 0
c Encoding variable: x_00002_00003 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00002_00003' order represents '1' with '167'
c Var 'x_00002_00003' direct represents '1' with '167'
c Var 'x_00002_00003' order represents '2' with '168'
-167 168 0
c Var 'x_00002_00003' direct represents '2' with '169'
167 -168 169 0
-169 168 0
-169 -167 0
c Var 'x_00002_00003' order represents '3' with '170'
-168 170 0
c Var 'x_00002_00003' direct represents '3' with '171'
168 -170 171 0
-171 170 0
-171 -168 0
c Var 'x_00002_00003' order represents '4' with '172'
-170 172 0
c Var 'x_00002_00003' direct represents '4' with '173'
170 -172 173 0
-173 172 0
-173 -170 0
c Var 'x_00002_00003' order represents '5' with '174'
-172 174 0
c Var 'x_00002_00003' direct represents '5' with '175'
172 -174 175 0
-175 174 0
-175 -172 0
c Var 'x_00002_00003' order represents '6' with '176'
-174 176 0
c Var 'x_00002_00003' direct represents '6' with '177'
174 -176 177 0
-177 176 0
-177 -174 0
c Var 'x_00002_00003' order represents '7' with '178'
-176 178 0
c Var 'x_00002_00003' direct represents '7' with '179'
176 -178 179 0
-179 178 0
-179 -176 0
c Var 'x_00002_00003' order represents '8' with '180'
-178 180 0
c Var 'x_00002_00003' direct represents '8' with '181'
178 -180 181 0
-181 180 0
-181 -178 0
c Var 'x_00002_00003' direct represents '9' with '-180'
167 169 171 173 175 177 179 181 -180 0
c Encoding variable: x_00002_00004 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00002_00004' order represents '1' with '182'
c Var 'x_00002_00004' direct represents '1' with '182'
c Var 'x_00002_00004' order represents '2' with '183'
-182 183 0
c Var 'x_00002_00004' direct represents '2' with '184'
182 -183 184 0
-184 183 0
-184 -182 0
c Var 'x_00002_00004' order represents '3' with '185'
-183 185 0
c Var 'x_00002_00004' direct represents '3' with '186'
183 -185 186 0
-186 185 0
-186 -183 0
c Var 'x_00002_00004' order represents '4' with '187'
-185 187 0
c Var 'x_00002_00004' direct represents '4' with '188'
185 -187 188 0
-188 187 0
-188 -185 0
c Var 'x_00002_00004' order represents '5' with '189'
-187 189 0
c Var 'x_00002_00004' direct represents '5' with '190'
187 -189 190 0
-190 189 0
-190 -187 0
c Var 'x_00002_00004' order represents '6' with '191'
-189 191 0
c Var 'x_00002_00004' direct represents '6' with '192'
189 -191 192 0
-192 191 0
-192 -189 0
c Var 'x_00002_00004' order represents '7' with '193'
-191 193 0
c Var 'x_00002_00004' direct represents '7' with '194'
191 -193 194 0
-194 193 0
-194 -191 0
c Var 'x_00002_00004' order represents '8' with '195'
-193 195 0
c Var 'x_00002_00004' direct represents '8' with '196'
193 -195 196 0
-196 195 0
-196 -193 0
c Var 'x_00002_00004' direct represents '9' with '-195'
182 184 186 188 190 192 194 196 -195 0
c Encoding variable: x_00002_00005 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00002_00005' order represents '1' with '197'
c Var 'x_00002_00005' direct represents '1' with '197'
c Var 'x_00002_00005' order represents '2' with '198'
-197 198 0
c Var 'x_00002_00005' direct represents '2' with '199'
197 -198 199 0
-199 198 0
-199 -197 0
c Var 'x_00002_00005' order represents '3' with '200'
-198 200 0
c Var 'x_00002_00005' direct represents '3' with '201'
198 -200 201 0
-201 200 0
-201 -198 0
c Var 'x_00002_00005' order represents '4' with '202'
-200 202 0
c Var 'x_00002_00005' direct represents '4' with '203'
200 -202 203 0
-203 202 0
-203 -200 0
c Var 'x_00002_00005' order represents '5' with '204'
-202 204 0
c Var 'x_00002_00005' direct represents '5' with '205'
202 -204 205 0
-205 204 0
-205 -202 0
c Var 'x_00002_00005' order represents '6' with '206'
-204 206 0
c Var 'x_00002_00005' direct represents '6' with '207'
204 -206 207 0
-207 206 0
-207 -204 0
c Var 'x_00002_00005' order represents '7' with '208'
-206 208 0
c Var 'x_00002_00005' direct represents '7' with '209'
206 -208 209 0
-209 208 0
-209 -206 0
c Var 'x_00002_00005' order represents '8' with '210'
-208 210 0
c Var 'x_00002_00005' direct represents '8' with '211'
208 -210 211 0
-211 210 0
-211 -208 0
c Var 'x_00002_00005' direct represents '9' with '-210'
197 199 201 203 205 207 209 211 -210 0
c Encoding variable: x_00002_00006 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00002_00006' order represents '1' with '212'
c Var 'x_00002_00006' direct represents '1' with '212'
c Var 'x_00002_00006' order represents '2' with '213'
-212 213 0
c Var 'x_00002_00006' direct represents '2' with '214'
212 -213 214 0
-214 213 0
-214 -212 0
c Var 'x_00002_00006' order represents '3' with '215'
-213 215 0
c Var 'x_00002_00006' direct represents '3' with '216'
213 -215 216 0
-216 215 0
-216 -213 0
c Var 'x_00002_00006' order represents '4' with '217'
-215 217 0
c Var 'x_00002_00006' direct represents '4' with '218'
215 -217 218 0
-218 217 0
-218 -215 0
c Var 'x_00002_00006' order represents '5' with '219'
-217 219 0
c Var 'x_00002_00006' direct represents '5' with '220'
217 -219 220 0
-220 219 0
-220 -217 0
c Var 'x_00002_00006' order represents '6' with '221'
-219 221 0
c Var 'x_00002_00006' direct represents '6' with '222'
219 -221 222 0
-222 221 0
-222 -219 0
c Var 'x_00002_00006' order represents '7' with '223'
-221 223 0
c Var 'x_00002_00006' direct represents '7' with '224'
221 -223 224 0
-224 223 0
-224 -221 0
c Var 'x_00002_00006' order represents '8' with '225'
-223 225 0
c Var 'x_00002_00006' direct represents '8' with '226'
223 -225 226 0
-226 225 0
-226 -223 0
c Var 'x_00002_00006' direct represents '9' with '-225'
212 214 216 218 220 222 224 226 -225 0
c Encoding variable: x_00002_00007 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00002_00007' order represents '1' with '227'
c Var 'x_00002_00007' direct represents '1' with '227'
c Var 'x_00002_00007' order represents '2' with '228'
-227 228 0
c Var 'x_00002_00007' direct represents '2' with '229'
227 -228 229 0
-229 228 0
-229 -227 0
c Var 'x_00002_00007' order represents '3' with '230'
-228 230 0
c Var 'x_00002_00007' direct represents '3' with '231'
228 -230 231 0
-231 230 0
-231 -228 0
c Var 'x_00002_00007' order represents '4' with '232'
-230 232 0
c Var 'x_00002_00007' direct represents '4' with '233'
230 -232 233 0
-233 232 0
-233 -230 0
c Var 'x_00002_00007' order represents '5' with '234'
-232 234 0
c Var 'x_00002_00007' direct represents '5' with '235'
232 -234 235 0
-235 234 0
-235 -232 0
c Var 'x_00002_00007' order represents '6' with '236'
-234 236 0
c Var 'x_00002_00007' direct represents '6' with '237'
234 -236 237 0
-237 236 0
-237 -234 0
c Var 'x_00002_00007' order represents '7' with '238'
-236 238 0
c Var 'x_00002_00007' direct represents '7' with '239'
236 -238 239 0
-239 238 0
-239 -236 0
c Var 'x_00002_00007' order represents '8' with '240'
-238 240 0
c Var 'x_00002_00007' direct represents '8' with '241'
238 -240 241 0
-241 240 0
-241 -238 0
c Var 'x_00002_00007' direct represents '9' with '-240'
227 229 231 233 235 237 239 241 -240 0
c Encoding variable: x_00002_00008 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00002_00008' order represents '1' with '242'
c Var 'x_00002_00008' direct represents '1' with '242'
c Var 'x_00002_00008' order represents '2' with '243'
-242 243 0
c Var 'x_00002_00008' direct represents '2' with '244'
242 -243 244 0
-244 243 0
-244 -242 0
c Var 'x_00002_00008' order represents '3' with '245'
-243 245 0
c Var 'x_00002_00008' direct represents '3' with '246'
243 -245 246 0
-246 245 0
-246 -243 0
c Var 'x_00002_00008' order represents '4' with '247'
-245 247 0
c Var 'x_00002_00008' direct represents '4' with '248'
245 -247 248 0
-248 247 0
-248 -245 0
c Var 'x_00002_00008' order represents '5' with '249'
-247 249 0
c Var 'x_00002_00008' direct represents '5' with '250'
247 -249 250 0
-250 249 0
-250 -247 0
c Var 'x_00002_00008' order represents '6' with '251'
-249 251 0
c Var 'x_00002_00008' direct represents '6' with '252'
249 -251 252 0
-252 251 0
-252 -249 0
c Var 'x_00002_00008' order represents '7' with '253'
-251 253 0
c Var 'x_00002_00008' direct represents '7' with '254'
251 -253 254 0
-254 253 0
-254 -251 0
c Var 'x_00002_00008' order represents '8' with '255'
-253 255 0
c Var 'x_00002_00008' direct represents '8' with '256'
253 -255 256 0
-256 255 0
-256 -253 0
c Var 'x_00002_00008' direct represents '9' with '-255'
242 244 246 248 250 252 254 256 -255 0
c Encoding variable: x_00002_00009 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00002_00009' order represents '1' with '257'
c Var 'x_00002_00009' direct represents '1' with '257'
c Var 'x_00002_00009' order represents '2' with '258'
-257 258 0
c Var 'x_00002_00009' direct represents '2' with '259'
257 -258 259 0
-259 258 0
-259 -257 0
c Var 'x_00002_00009' order represents '3' with '260'
-258 260 0
c Var 'x_00002_00009' direct represents '3' with '261'
258 -260 261 0
-261 260 0
-261 -258 0
c Var 'x_00002_00009' order represents '4' with '262'
-260 262 0
c Var 'x_00002_00009' direct represents '4' with '263'
260 -262 263 0
-263 262 0
-263 -260 0
c Var 'x_00002_00009' order represents '5' with '264'
-262 264 0
c Var 'x_00002_00009' direct represents '5' with '265'
262 -264 265 0
-265 264 0
-265 -262 0
c Var 'x_00002_00009' order represents '6' with '266'
-264 266 0
c Var 'x_00002_00009' direct represents '6' with '267'
264 -266 267 0
-267 266 0
-267 -264 0
c Var 'x_00002_00009' order represents '7' with '268'
-266 268 0
c Var 'x_00002_00009' direct represents '7' with '269'
266 -268 269 0
-269 268 0
-269 -266 0
c Var 'x_00002_00009' order represents '8' with '270'
-268 270 0
c Var 'x_00002_00009' direct represents '8' with '271'
268 -270 271 0
-271 270 0
-271 -268 0
c Var 'x_00002_00009' direct represents '9' with '-270'
257 259 261 263 265 267 269 271 -270 0
c Encoding variable: x_00003_00001 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00003_00001' order represents '1' with '272'
c Var 'x_00003_00001' direct represents '1' with '272'
c Var 'x_00003_00001' order represents '2' with '273'
-272 273 0
c Var 'x_00003_00001' direct represents '2' with '274'
272 -273 274 0
-274 273 0
-274 -272 0
c Var 'x_00003_00001' order represents '3' with '275'
-273 275 0
c Var 'x_00003_00001' direct represents '3' with '276'
273 -275 276 0
-276 275 0
-276 -273 0
c Var 'x_00003_00001' order represents '4' with '277'
-275 277 0
c Var 'x_00003_00001' direct represents '4' with '278'
275 -277 278 0
-278 277 0
-278 -275 0
c Var 'x_00003_00001' order represents '5' with '279'
-277 279 0
c Var 'x_00003_00001' direct represents '5' with '280'
277 -279 280 0
-280 279 0
-280 -277 0
c Var 'x_00003_00001' order represents '6' with '281'
-279 281 0
c Var 'x_00003_00001' direct represents '6' with '282'
279 -281 282 0
-282 281 0
-282 -279 0
c Var 'x_00003_00001' order represents '7' with '283'
-281 283 0
c Var 'x_00003_00001' direct represents '7' with '284'
281 -283 284 0
-284 283 0
-284 -281 0
c Var 'x_00003_00001' order represents '8' with '285'
-283 285 0
c Var 'x_00003_00001' direct represents '8' with '286'
283 -285 286 0
-286 285 0
-286 -283 0
c Var 'x_00003_00001' direct represents '9' with '-285'
272 274 276 278 280 282 284 286 -285 0
c Encoding variable: x_00003_00002 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00003_00002' order represents '1' with '287'
c Var 'x_00003_00002' direct represents '1' with '287'
c Var 'x_00003_00002' order represents '2' with '288'
-287 288 0
c Var 'x_00003_00002' direct represents '2' with '289'
287 -288 289 0
-289 288 0
-289 -287 0
c Var 'x_00003_00002' order represents '3' with '290'
-288 290 0
c Var 'x_00003_00002' direct represents '3' with '291'
288 -290 291 0
-291 290 0
-291 -288 0
c Var 'x_00003_00002' order represents '4' with '292'
-290 292 0
c Var 'x_00003_00002' direct represents '4' with '293'
290 -292 293 0
-293 292 0
-293 -290 0
c Var 'x_00003_00002' order represents '5' with '294'
-292 294 0
c Var 'x_00003_00002' direct represents '5' with '295'
292 -294 295 0
-295 294 0
-295 -292 0
c Var 'x_00003_00002' order represents '6' with '296'
-294 296 0
c Var 'x_00003_00002' direct represents '6' with '297'
294 -296 297 0
-297 296 0
-297 -294 0
c Var 'x_00003_00002' order represents '7' with '298'
-296 298 0
c Var 'x_00003_00002' direct represents '7' with '299'
296 -298 299 0
-299 298 0
-299 -296 0
c Var 'x_00003_00002' order represents '8' with '300'
-298 300 0
c Var 'x_00003_00002' direct represents '8' with '301'
298 -300 301 0
-301 300 0
-301 -298 0
c Var 'x_00003_00002' direct represents '9' with '-300'
287 289 291 293 295 297 299 301 -300 0
c Encoding variable: x_00003_00003 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00003_00003' order represents '1' with '302'
c Var 'x_00003_00003' direct represents '1' with '302'
c Var 'x_00003_00003' order represents '2' with '303'
-302 303 0
c Var 'x_00003_00003' direct represents '2' with '304'
302 -303 304 0
-304 303 0
-304 -302 0
c Var 'x_00003_00003' order represents '3' with '305'
-303 305 0
c Var 'x_00003_00003' direct represents '3' with '306'
303 -305 306 0
-306 305 0
-306 -303 0
c Var 'x_00003_00003' order represents '4' with '307'
-305 307 0
c Var 'x_00003_00003' direct represents '4' with '308'
305 -307 308 0
-308 307 0
-308 -305 0
c Var 'x_00003_00003' order represents '5' with '309'
-307 309 0
c Var 'x_00003_00003' direct represents '5' with '310'
307 -309 310 0
-310 309 0
-310 -307 0
c Var 'x_00003_00003' order represents '6' with '311'
-309 311 0
c Var 'x_00003_00003' direct represents '6' with '312'
309 -311 312 0
-312 311 0
-312 -309 0
c Var 'x_00003_00003' order represents '7' with '313'
-311 313 0
c Var 'x_00003_00003' direct represents '7' with '314'
311 -313 314 0
-314 313 0
-314 -311 0
c Var 'x_00003_00003' order represents '8' with '315'
-313 315 0
c Var 'x_00003_00003' direct represents '8' with '316'
313 -315 316 0
-316 315 0
-316 -313 0
c Var 'x_00003_00003' direct represents '9' with '-315'
302 304 306 308 310 312 314 316 -315 0
c Encoding variable: x_00003_00004 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00003_00004' order represents '1' with '317'
c Var 'x_00003_00004' direct represents '1' with '317'
c Var 'x_00003_00004' order represents '2' with '318'
-317 318 0
c Var 'x_00003_00004' direct represents '2' with '319'
317 -318 319 0
-319 318 0
-319 -317 0
c Var 'x_00003_00004' order represents '3' with '320'
-318 320 0
c Var 'x_00003_00004' direct represents '3' with '321'
318 -320 321 0
-321 320 0
-321 -318 0
c Var 'x_00003_00004' order represents '4' with '322'
-320 322 0
c Var 'x_00003_00004' direct represents '4' with '323'
320 -322 323 0
-323 322 0
-323 -320 0
c Var 'x_00003_00004' order represents '5' with '324'
-322 324 0
c Var 'x_00003_00004' direct represents '5' with '325'
322 -324 325 0
-325 324 0
-325 -322 0
c Var 'x_00003_00004' order represents '6' with '326'
-324 326 0
c Var 'x_00003_00004' direct represents '6' with '327'
324 -326 327 0
-327 326 0
-327 -324 0
c Var 'x_00003_00004' order represents '7' with '328'
-326 328 0
c Var 'x_00003_00004' direct represents '7' with '329'
326 -328 329 0
-329 328 0
-329 -326 0
c Var 'x_00003_00004' order represents '8' with '330'
-328 330 0
c Var 'x_00003_00004' direct represents '8' with '331'
328 -330 331 0
-331 330 0
-331 -328 0
c Var 'x_00003_00004' direct represents '9' with '-330'
317 319 321 323 325 327 329 331 -330 0
c Encoding variable: x_00003_00005 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00003_00005' order represents '1' with '332'
c Var 'x_00003_00005' direct represents '1' with '332'
c Var 'x_00003_00005' order represents '2' with '333'
-332 333 0
c Var 'x_00003_00005' direct represents '2' with '334'
332 -333 334 0
-334 333 0
-334 -332 0
c Var 'x_00003_00005' order represents '3' with '335'
-333 335 0
c Var 'x_00003_00005' direct represents '3' with '336'
333 -335 336 0
-336 335 0
-336 -333 0
c Var 'x_00003_00005' order represents '4' with '337'
-335 337 0
c Var 'x_00003_00005' direct represents '4' with '338'
335 -337 338 0
-338 337 0
-338 -335 0
c Var 'x_00003_00005' order represents '5' with '339'
-337 339 0
c Var 'x_00003_00005' direct represents '5' with '340'
337 -339 340 0
-340 339 0
-340 -337 0
c Var 'x_00003_00005' order represents '6' with '341'
-339 341 0
c Var 'x_00003_00005' direct represents '6' with '342'
339 -341 342 0
-342 341 0
-342 -339 0
c Var 'x_00003_00005' order represents '7' with '343'
-341 343 0
c Var 'x_00003_00005' direct represents '7' with '344'
341 -343 344 0
-344 343 0
-344 -341 0
c Var 'x_00003_00005' order represents '8' with '345'
-343 345 0
c Var 'x_00003_00005' direct represents '8' with '346'
343 -345 346 0
-346 345 0
-346 -343 0
c Var 'x_00003_00005' direct represents '9' with '-345'
332 334 336 338 340 342 344 346 -345 0
c Encoding variable: x_00003_00006 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00003_00006' order represents '1' with '347'
c Var 'x_00003_00006' direct represents '1' with '347'
c Var 'x_00003_00006' order represents '2' with '348'
-347 348 0
c Var 'x_00003_00006' direct represents '2' with '349'
347 -348 349 0
-349 348 0
-349 -347 0
c Var 'x_00003_00006' order represents '3' with '350'
-348 350 0
c Var 'x_00003_00006' direct represents '3' with '351'
348 -350 351 0
-351 350 0
-351 -348 0
c Var 'x_00003_00006' order represents '4' with '352'
-350 352 0
c Var 'x_00003_00006' direct represents '4' with '353'
350 -352 353 0
-353 352 0
-353 -350 0
c Var 'x_00003_00006' order represents '5' with '354'
-352 354 0
c Var 'x_00003_00006' direct represents '5' with '355'
352 -354 355 0
-355 354 0
-355 -352 0
c Var 'x_00003_00006' order represents '6' with '356'
-354 356 0
c Var 'x_00003_00006' direct represents '6' with '357'
354 -356 357 0
-357 356 0
-357 -354 0
c Var 'x_00003_00006' order represents '7' with '358'
-356 358 0
c Var 'x_00003_00006' direct represents '7' with '359'
356 -358 359 0
-359 358 0
-359 -356 0
c Var 'x_00003_00006' order represents '8' with '360'
-358 360 0
c Var 'x_00003_00006' direct represents '8' with '361'
358 -360 361 0
-361 360 0
-361 -358 0
c Var 'x_00003_00006' direct represents '9' with '-360'
347 349 351 353 355 357 359 361 -360 0
c Encoding variable: x_00003_00007 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00003_00007' order represents '1' with '362'
c Var 'x_00003_00007' direct represents '1' with '362'
c Var 'x_00003_00007' order represents '2' with '363'
-362 363 0
c Var 'x_00003_00007' direct represents '2' with '364'
362 -363 364 0
-364 363 0
-364 -362 0
c Var 'x_00003_00007' order represents '3' with '365'
-363 365 0
c Var 'x_00003_00007' direct represents '3' with '366'
363 -365 366 0
-366 365 0
-366 -363 0
c Var 'x_00003_00007' order represents '4' with '367'
-365 367 0
c Var 'x_00003_00007' direct represents '4' with '368'
365 -367 368 0
-368 367 0
-368 -365 0
c Var 'x_00003_00007' order represents '5' with '369'
-367 369 0
c Var 'x_00003_00007' direct represents '5' with '370'
367 -369 370 0
-370 369 0
-370 -367 0
c Var 'x_00003_00007' order represents '6' with '371'
-369 371 0
c Var 'x_00003_00007' direct represents '6' with '372'
369 -371 372 0
-372 371 0
-372 -369 0
c Var 'x_00003_00007' order represents '7' with '373'
-371 373 0
c Var 'x_00003_00007' direct represents '7' with '374'
371 -373 374 0
-374 373 0
-374 -371 0
c Var 'x_00003_00007' order represents '8' with '375'
-373 375 0
c Var 'x_00003_00007' direct represents '8' with '376'
373 -375 376 0
-376 375 0
-376 -373 0
c Var 'x_00003_00007' direct represents '9' with '-375'
362 364 366 368 370 372 374 376 -375 0
c Encoding variable: x_00003_00008 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00003_00008' order represents '1' with '377'
c Var 'x_00003_00008' direct represents '1' with '377'
c Var 'x_00003_00008' order represents '2' with '378'
-377 378 0
c Var 'x_00003_00008' direct represents '2' with '379'
377 -378 379 0
-379 378 0
-379 -377 0
c Var 'x_00003_00008' order represents '3' with '380'
-378 380 0
c Var 'x_00003_00008' direct represents '3' with '381'
378 -380 381 0
-381 380 0
-381 -378 0
c Var 'x_00003_00008' order represents '4' with '382'
-380 382 0
c Var 'x_00003_00008' direct represents '4' with '383'
380 -382 383 0
-383 382 0
-383 -380 0
c Var 'x_00003_00008' order represents '5' with '384'
-382 384 0
c Var 'x_00003_00008' direct represents '5' with '385'
382 -384 385 0
-385 384 0
-385 -382 0
c Var 'x_00003_00008' order represents '6' with '386'
-384 386 0
c Var 'x_00003_00008' direct represents '6' with '387'
384 -386 387 0
-387 386 0
-387 -384 0
c Var 'x_00003_00008' order represents '7' with '388'
-386 388 0
c Var 'x_00003_00008' direct represents '7' with '389'
386 -388 389 0
-389 388 0
-389 -386 0
c Var 'x_00003_00008' order represents '8' with '390'
-388 390 0
c Var 'x_00003_00008' direct represents '8' with '391'
388 -390 391 0
-391 390 0
-391 -388 0
c Var 'x_00003_00008' direct represents '9' with '-390'
377 379 381 383 385 387 389 391 -390 0
c Encoding variable: x_00003_00009 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00003_00009' order represents '1' with '392'
c Var 'x_00003_00009' direct represents '1' with '392'
c Var 'x_00003_00009' order represents '2' with '393'
-392 393 0
c Var 'x_00003_00009' direct represents '2' with '394'
392 -393 394 0
-394 393 0
-394 -392 0
c Var 'x_00003_00009' order represents '3' with '395'
-393 395 0
c Var 'x_00003_00009' direct represents '3' with '396'
393 -395 396 0
-396 395 0
-396 -393 0
c Var 'x_00003_00009' order represents '4' with '397'
-395 397 0
c Var 'x_00003_00009' direct represents '4' with '398'
395 -397 398 0
-398 397 0
-398 -395 0
c Var 'x_00003_00009' order represents '5' with '399'
-397 399 0
c Var 'x_00003_00009' direct represents '5' with '400'
397 -399 400 0
-400 399 0
-400 -397 0
c Var 'x_00003_00009' order represents '6' with '401'
-399 401 0
c Var 'x_00003_00009' direct represents '6' with '402'
399 -401 402 0
-402 401 0
-402 -399 0
c Var 'x_00003_00009' order represents '7' with '403'
-401 403 0
c Var 'x_00003_00009' direct represents '7' with '404'
401 -403 404 0
-404 403 0
-404 -401 0
c Var 'x_00003_00009' order represents '8' with '405'
-403 405 0
c Var 'x_00003_00009' direct represents '8' with '406'
403 -405 406 0
-406 405 0
-406 -403 0
c Var 'x_00003_00009' direct represents '9' with '-405'
392 394 396 398 400 402 404 406 -405 0
c Encoding variable: x_00004_00001 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00004_00001' order represents '1' with '407'
c Var 'x_00004_00001' direct represents '1' with '407'
c Var 'x_00004_00001' order represents '2' with '408'
-407 408 0
c Var 'x_00004_00001' direct represents '2' with '409'
407 -408 409 0
-409 408 0
-409 -407 0
c Var 'x_00004_00001' order represents '3' with '410'
-408 410 0
c Var 'x_00004_00001' direct represents '3' with '411'
408 -410 411 0
-411 410 0
-411 -408 0
c Var 'x_00004_00001' order represents '4' with '412'
-410 412 0
c Var 'x_00004_00001' direct represents '4' with '413'
410 -412 413 0
-413 412 0
-413 -410 0
c Var 'x_00004_00001' order represents '5' with '414'
-412 414 0
c Var 'x_00004_00001' direct represents '5' with '415'
412 -414 415 0
-415 414 0
-415 -412 0
c Var 'x_00004_00001' order represents '6' with '416'
-414 416 0
c Var 'x_00004_00001' direct represents '6' with '417'
414 -416 417 0
-417 416 0
-417 -414 0
c Var 'x_00004_00001' order represents '7' with '418'
-416 418 0
c Var 'x_00004_00001' direct represents '7' with '419'
416 -418 419 0
-419 418 0
-419 -416 0
c Var 'x_00004_00001' order represents '8' with '420'
-418 420 0
c Var 'x_00004_00001' direct represents '8' with '421'
418 -420 421 0
-421 420 0
-421 -418 0
c Var 'x_00004_00001' direct represents '9' with '-420'
407 409 411 413 415 417 419 421 -420 0
c Encoding variable: x_00004_00002 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00004_00002' order represents '1' with '422'
c Var 'x_00004_00002' direct represents '1' with '422'
c Var 'x_00004_00002' order represents '2' with '423'
-422 423 0
c Var 'x_00004_00002' direct represents '2' with '424'
422 -423 424 0
-424 423 0
-424 -422 0
c Var 'x_00004_00002' order represents '3' with '425'
-423 425 0
c Var 'x_00004_00002' direct represents '3' with '426'
423 -425 426 0
-426 425 0
-426 -423 0
c Var 'x_00004_00002' order represents '4' with '427'
-425 427 0
c Var 'x_00004_00002' direct represents '4' with '428'
425 -427 428 0
-428 427 0
-428 -425 0
c Var 'x_00004_00002' order represents '5' with '429'
-427 429 0
c Var 'x_00004_00002' direct represents '5' with '430'
427 -429 430 0
-430 429 0
-430 -427 0
c Var 'x_00004_00002' order represents '6' with '431'
-429 431 0
c Var 'x_00004_00002' direct represents '6' with '432'
429 -431 432 0
-432 431 0
-432 -429 0
c Var 'x_00004_00002' order represents '7' with '433'
-431 433 0
c Var 'x_00004_00002' direct represents '7' with '434'
431 -433 434 0
-434 433 0
-434 -431 0
c Var 'x_00004_00002' order represents '8' with '435'
-433 435 0
c Var 'x_00004_00002' direct represents '8' with '436'
433 -435 436 0
-436 435 0
-436 -433 0
c Var 'x_00004_00002' direct represents '9' with '-435'
422 424 426 428 430 432 434 436 -435 0
c Encoding variable: x_00004_00003 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00004_00003' order represents '1' with '437'
c Var 'x_00004_00003' direct represents '1' with '437'
c Var 'x_00004_00003' order represents '2' with '438'
-437 438 0
c Var 'x_00004_00003' direct represents '2' with '439'
437 -438 439 0
-439 438 0
-439 -437 0
c Var 'x_00004_00003' order represents '3' with '440'
-438 440 0
c Var 'x_00004_00003' direct represents '3' with '441'
438 -440 441 0
-441 440 0
-441 -438 0
c Var 'x_00004_00003' order represents '4' with '442'
-440 442 0
c Var 'x_00004_00003' direct represents '4' with '443'
440 -442 443 0
-443 442 0
-443 -440 0
c Var 'x_00004_00003' order represents '5' with '444'
-442 444 0
c Var 'x_00004_00003' direct represents '5' with '445'
442 -444 445 0
-445 444 0
-445 -442 0
c Var 'x_00004_00003' order represents '6' with '446'
-444 446 0
c Var 'x_00004_00003' direct represents '6' with '447'
444 -446 447 0
-447 446 0
-447 -444 0
c Var 'x_00004_00003' order represents '7' with '448'
-446 448 0
c Var 'x_00004_00003' direct represents '7' with '449'
446 -448 449 0
-449 448 0
-449 -446 0
c Var 'x_00004_00003' order represents '8' with '450'
-448 450 0
c Var 'x_00004_00003' direct represents '8' with '451'
448 -450 451 0
-451 450 0
-451 -448 0
c Var 'x_00004_00003' direct represents '9' with '-450'
437 439 441 443 445 447 449 451 -450 0
c Encoding variable: x_00004_00004 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00004_00004' order represents '1' with '452'
c Var 'x_00004_00004' direct represents '1' with '452'
c Var 'x_00004_00004' order represents '2' with '453'
-452 453 0
c Var 'x_00004_00004' direct represents '2' with '454'
452 -453 454 0
-454 453 0
-454 -452 0
c Var 'x_00004_00004' order represents '3' with '455'
-453 455 0
c Var 'x_00004_00004' direct represents '3' with '456'
453 -455 456 0
-456 455 0
-456 -453 0
c Var 'x_00004_00004' order represents '4' with '457'
-455 457 0
c Var 'x_00004_00004' direct represents '4' with '458'
455 -457 458 0
-458 457 0
-458 -455 0
c Var 'x_00004_00004' order represents '5' with '459'
-457 459 0
c Var 'x_00004_00004' direct represents '5' with '460'
457 -459 460 0
-460 459 0
-460 -457 0
c Var 'x_00004_00004' order represents '6' with '461'
-459 461 0
c Var 'x_00004_00004' direct represents '6' with '462'
459 -461 462 0
-462 461 0
-462 -459 0
c Var 'x_00004_00004' order represents '7' with '463'
-461 463 0
c Var 'x_00004_00004' direct represents '7' with '464'
461 -463 464 0
-464 463 0
-464 -461 0
c Var 'x_00004_00004' order represents '8' with '465'
-463 465 0
c Var 'x_00004_00004' direct represents '8' with '466'
463 -465 466 0
-466 465 0
-466 -463 0
c Var 'x_00004_00004' direct represents '9' with '-465'
452 454 456 458 460 462 464 466 -465 0
c Encoding variable: x_00004_00005 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00004_00005' order represents '1' with '467'
c Var 'x_00004_00005' direct represents '1' with '467'
c Var 'x_00004_00005' order represents '2' with '468'
-467 468 0
c Var 'x_00004_00005' direct represents '2' with '469'
467 -468 469 0
-469 468 0
-469 -467 0
c Var 'x_00004_00005' order represents '3' with '470'
-468 470 0
c Var 'x_00004_00005' direct represents '3' with '471'
468 -470 471 0
-471 470 0
-471 -468 0
c Var 'x_00004_00005' order represents '4' with '472'
-470 472 0
c Var 'x_00004_00005' direct represents '4' with '473'
470 -472 473 0
-473 472 0
-473 -470 0
c Var 'x_00004_00005' order represents '5' with '474'
-472 474 0
c Var 'x_00004_00005' direct represents '5' with '475'
472 -474 475 0
-475 474 0
-475 -472 0
c Var 'x_00004_00005' order represents '6' with '476'
-474 476 0
c Var 'x_00004_00005' direct represents '6' with '477'
474 -476 477 0
-477 476 0
-477 -474 0
c Var 'x_00004_00005' order represents '7' with '478'
-476 478 0
c Var 'x_00004_00005' direct represents '7' with '479'
476 -478 479 0
-479 478 0
-479 -476 0
c Var 'x_00004_00005' order represents '8' with '480'
-478 480 0
c Var 'x_00004_00005' direct represents '8' with '481'
478 -480 481 0
-481 480 0
-481 -478 0
c Var 'x_00004_00005' direct represents '9' with '-480'
467 469 471 473 475 477 479 481 -480 0
c Encoding variable: x_00004_00006 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00004_00006' order represents '1' with '482'
c Var 'x_00004_00006' direct represents '1' with '482'
c Var 'x_00004_00006' order represents '2' with '483'
-482 483 0
c Var 'x_00004_00006' direct represents '2' with '484'
482 -483 484 0
-484 483 0
-484 -482 0
c Var 'x_00004_00006' order represents '3' with '485'
-483 485 0
c Var 'x_00004_00006' direct represents '3' with '486'
483 -485 486 0
-486 485 0
-486 -483 0
c Var 'x_00004_00006' order represents '4' with '487'
-485 487 0
c Var 'x_00004_00006' direct represents '4' with '488'
485 -487 488 0
-488 487 0
-488 -485 0
c Var 'x_00004_00006' order represents '5' with '489'
-487 489 0
c Var 'x_00004_00006' direct represents '5' with '490'
487 -489 490 0
-490 489 0
-490 -487 0
c Var 'x_00004_00006' order represents '6' with '491'
-489 491 0
c Var 'x_00004_00006' direct represents '6' with '492'
489 -491 492 0
-492 491 0
-492 -489 0
c Var 'x_00004_00006' order represents '7' with '493'
-491 493 0
c Var 'x_00004_00006' direct represents '7' with '494'
491 -493 494 0
-494 493 0
-494 -491 0
c Var 'x_00004_00006' order represents '8' with '495'
-493 495 0
c Var 'x_00004_00006' direct represents '8' with '496'
493 -495 496 0
-496 495 0
-496 -493 0
c Var 'x_00004_00006' direct represents '9' with '-495'
482 484 486 488 490 492 494 496 -495 0
c Encoding variable: x_00004_00007 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00004_00007' order represents '1' with '497'
c Var 'x_00004_00007' direct represents '1' with '497'
c Var 'x_00004_00007' order represents '2' with '498'
-497 498 0
c Var 'x_00004_00007' direct represents '2' with '499'
497 -498 499 0
-499 498 0
-499 -497 0
c Var 'x_00004_00007' order represents '3' with '500'
-498 500 0
c Var 'x_00004_00007' direct represents '3' with '501'
498 -500 501 0
-501 500 0
-501 -498 0
c Var 'x_00004_00007' order represents '4' with '502'
-500 502 0
c Var 'x_00004_00007' direct represents '4' with '503'
500 -502 503 0
-503 502 0
-503 -500 0
c Var 'x_00004_00007' order represents '5' with '504'
-502 504 0
c Var 'x_00004_00007' direct represents '5' with '505'
502 -504 505 0
-505 504 0
-505 -502 0
c Var 'x_00004_00007' order represents '6' with '506'
-504 506 0
c Var 'x_00004_00007' direct represents '6' with '507'
504 -506 507 0
-507 506 0
-507 -504 0
c Var 'x_00004_00007' order represents '7' with '508'
-506 508 0
c Var 'x_00004_00007' direct represents '7' with '509'
506 -508 509 0
-509 508 0
-509 -506 0
c Var 'x_00004_00007' order represents '8' with '510'
-508 510 0
c Var 'x_00004_00007' direct represents '8' with '511'
508 -510 511 0
-511 510 0
-511 -508 0
c Var 'x_00004_00007' direct represents '9' with '-510'
497 499 501 503 505 507 509 511 -510 0
c Encoding variable: x_00004_00008 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00004_00008' order represents '1' with '512'
c Var 'x_00004_00008' direct represents '1' with '512'
c Var 'x_00004_00008' order represents '2' with '513'
-512 513 0
c Var 'x_00004_00008' direct represents '2' with '514'
512 -513 514 0
-514 513 0
-514 -512 0
c Var 'x_00004_00008' order represents '3' with '515'
-513 515 0
c Var 'x_00004_00008' direct represents '3' with '516'
513 -515 516 0
-516 515 0
-516 -513 0
c Var 'x_00004_00008' order represents '4' with '517'
-515 517 0
c Var 'x_00004_00008' direct represents '4' with '518'
515 -517 518 0
-518 517 0
-518 -515 0
c Var 'x_00004_00008' order represents '5' with '519'
-517 519 0
c Var 'x_00004_00008' direct represents '5' with '520'
517 -519 520 0
-520 519 0
-520 -517 0
c Var 'x_00004_00008' order represents '6' with '521'
-519 521 0
c Var 'x_00004_00008' direct represents '6' with '522'
519 -521 522 0
-522 521 0
-522 -519 0
c Var 'x_00004_00008' order represents '7' with '523'
-521 523 0
c Var 'x_00004_00008' direct represents '7' with '524'
521 -523 524 0
-524 523 0
-524 -521 0
c Var 'x_00004_00008' order represents '8' with '525'
-523 525 0
c Var 'x_00004_00008' direct represents '8' with '526'
523 -525 526 0
-526 525 0
-526 -523 0
c Var 'x_00004_00008' direct represents '9' with '-525'
512 514 516 518 520 522 524 526 -525 0
c Encoding variable: x_00004_00009 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00004_00009' order represents '1' with '527'
c Var 'x_00004_00009' direct represents '1' with '527'
c Var 'x_00004_00009' order represents '2' with '528'
-527 528 0
c Var 'x_00004_00009' direct represents '2' with '529'
527 -528 529 0
-529 528 0
-529 -527 0
c Var 'x_00004_00009' order represents '3' with '530'
-528 530 0
c Var 'x_00004_00009' direct represents '3' with '531'
528 -530 531 0
-531 530 0
-531 -528 0
c Var 'x_00004_00009' order represents '4' with '532'
-530 532 0
c Var 'x_00004_00009' direct represents '4' with '533'
530 -532 533 0
-533 532 0
-533 -530 0
c Var 'x_00004_00009' order represents '5' with '534'
-532 534 0
c Var 'x_00004_00009' direct represents '5' with '535'
532 -534 535 0
-535 534 0
-535 -532 0
c Var 'x_00004_00009' order represents '6' with '536'
-534 536 0
c Var 'x_00004_00009' direct represents '6' with '537'
534 -536 537 0
-537 536 0
-537 -534 0
c Var 'x_00004_00009' order represents '7' with '538'
-536 538 0
c Var 'x_00004_00009' direct represents '7' with '539'
536 -538 539 0
-539 538 0
-539 -536 0
c Var 'x_00004_00009' order represents '8' with '540'
-538 540 0
c Var 'x_00004_00009' direct represents '8' with '541'
538 -540 541 0
-541 540 0
-541 -538 0
c Var 'x_00004_00009' direct represents '9' with '-540'
527 529 531 533 535 537 539 541 -540 0
c Encoding variable: x_00005_00001 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00005_00001' order represents '1' with '542'
c Var 'x_00005_00001' direct represents '1' with '542'
c Var 'x_00005_00001' order represents '2' with '543'
-542 543 0
c Var 'x_00005_00001' direct represents '2' with '544'
542 -543 544 0
-544 543 0
-544 -542 0
c Var 'x_00005_00001' order represents '3' with '545'
-543 545 0
c Var 'x_00005_00001' direct represents '3' with '546'
543 -545 546 0
-546 545 0
-546 -543 0
c Var 'x_00005_00001' order represents '4' with '547'
-545 547 0
c Var 'x_00005_00001' direct represents '4' with '548'
545 -547 548 0
-548 547 0
-548 -545 0
c Var 'x_00005_00001' order represents '5' with '549'
-547 549 0
c Var 'x_00005_00001' direct represents '5' with '550'
547 -549 550 0
-550 549 0
-550 -547 0
c Var 'x_00005_00001' order represents '6' with '551'
-549 551 0
c Var 'x_00005_00001' direct represents '6' with '552'
549 -551 552 0
-552 551 0
-552 -549 0
c Var 'x_00005_00001' order represents '7' with '553'
-551 553 0
c Var 'x_00005_00001' direct represents '7' with '554'
551 -553 554 0
-554 553 0
-554 -551 0
c Var 'x_00005_00001' order represents '8' with '555'
-553 555 0
c Var 'x_00005_00001' direct represents '8' with '556'
553 -555 556 0
-556 555 0
-556 -553 0
c Var 'x_00005_00001' direct represents '9' with '-555'
542 544 546 548 550 552 554 556 -555 0
c Encoding variable: x_00005_00002 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00005_00002' order represents '1' with '557'
c Var 'x_00005_00002' direct represents '1' with '557'
c Var 'x_00005_00002' order represents '2' with '558'
-557 558 0
c Var 'x_00005_00002' direct represents '2' with '559'
557 -558 559 0
-559 558 0
-559 -557 0
c Var 'x_00005_00002' order represents '3' with '560'
-558 560 0
c Var 'x_00005_00002' direct represents '3' with '561'
558 -560 561 0
-561 560 0
-561 -558 0
c Var 'x_00005_00002' order represents '4' with '562'
-560 562 0
c Var 'x_00005_00002' direct represents '4' with '563'
560 -562 563 0
-563 562 0
-563 -560 0
c Var 'x_00005_00002' order represents '5' with '564'
-562 564 0
c Var 'x_00005_00002' direct represents '5' with '565'
562 -564 565 0
-565 564 0
-565 -562 0
c Var 'x_00005_00002' order represents '6' with '566'
-564 566 0
c Var 'x_00005_00002' direct represents '6' with '567'
564 -566 567 0
-567 566 0
-567 -564 0
c Var 'x_00005_00002' order represents '7' with '568'
-566 568 0
c Var 'x_00005_00002' direct represents '7' with '569'
566 -568 569 0
-569 568 0
-569 -566 0
c Var 'x_00005_00002' order represents '8' with '570'
-568 570 0
c Var 'x_00005_00002' direct represents '8' with '571'
568 -570 571 0
-571 570 0
-571 -568 0
c Var 'x_00005_00002' direct represents '9' with '-570'
557 559 561 563 565 567 569 571 -570 0
c Encoding variable: x_00005_00003 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00005_00003' order represents '1' with '572'
c Var 'x_00005_00003' direct represents '1' with '572'
c Var 'x_00005_00003' order represents '2' with '573'
-572 573 0
c Var 'x_00005_00003' direct represents '2' with '574'
572 -573 574 0
-574 573 0
-574 -572 0
c Var 'x_00005_00003' order represents '3' with '575'
-573 575 0
c Var 'x_00005_00003' direct represents '3' with '576'
573 -575 576 0
-576 575 0
-576 -573 0
c Var 'x_00005_00003' order represents '4' with '577'
-575 577 0
c Var 'x_00005_00003' direct represents '4' with '578'
575 -577 578 0
-578 577 0
-578 -575 0
c Var 'x_00005_00003' order represents '5' with '579'
-577 579 0
c Var 'x_00005_00003' direct represents '5' with '580'
577 -579 580 0
-580 579 0
-580 -577 0
c Var 'x_00005_00003' order represents '6' with '581'
-579 581 0
c Var 'x_00005_00003' direct represents '6' with '582'
579 -581 582 0
-582 581 0
-582 -579 0
c Var 'x_00005_00003' order represents '7' with '583'
-581 583 0
c Var 'x_00005_00003' direct represents '7' with '584'
581 -583 584 0
-584 583 0
-584 -581 0
c Var 'x_00005_00003' order represents '8' with '585'
-583 585 0
c Var 'x_00005_00003' direct represents '8' with '586'
583 -585 586 0
-586 585 0
-586 -583 0
c Var 'x_00005_00003' direct represents '9' with '-585'
572 574 576 578 580 582 584 586 -585 0
c Encoding variable: x_00005_00004 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00005_00004' order represents '1' with '587'
c Var 'x_00005_00004' direct represents '1' with '587'
c Var 'x_00005_00004' order represents '2' with '588'
-587 588 0
c Var 'x_00005_00004' direct represents '2' with '589'
587 -588 589 0
-589 588 0
-589 -587 0
c Var 'x_00005_00004' order represents '3' with '590'
-588 590 0
c Var 'x_00005_00004' direct represents '3' with '591'
588 -590 591 0
-591 590 0
-591 -588 0
c Var 'x_00005_00004' order represents '4' with '592'
-590 592 0
c Var 'x_00005_00004' direct represents '4' with '593'
590 -592 593 0
-593 592 0
-593 -590 0
c Var 'x_00005_00004' order represents '5' with '594'
-592 594 0
c Var 'x_00005_00004' direct represents '5' with '595'
592 -594 595 0
-595 594 0
-595 -592 0
c Var 'x_00005_00004' order represents '6' with '596'
-594 596 0
c Var 'x_00005_00004' direct represents '6' with '597'
594 -596 597 0
-597 596 0
-597 -594 0
c Var 'x_00005_00004' order represents '7' with '598'
-596 598 0
c Var 'x_00005_00004' direct represents '7' with '599'
596 -598 599 0
-599 598 0
-599 -596 0
c Var 'x_00005_00004' order represents '8' with '600'
-598 600 0
c Var 'x_00005_00004' direct represents '8' with '601'
598 -600 601 0
-601 600 0
-601 -598 0
c Var 'x_00005_00004' direct represents '9' with '-600'
587 589 591 593 595 597 599 601 -600 0
c Encoding variable: x_00005_00005 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00005_00005' order represents '1' with '602'
c Var 'x_00005_00005' direct represents '1' with '602'
c Var 'x_00005_00005' order represents '2' with '603'
-602 603 0
c Var 'x_00005_00005' direct represents '2' with '604'
602 -603 604 0
-604 603 0
-604 -602 0
c Var 'x_00005_00005' order represents '3' with '605'
-603 605 0
c Var 'x_00005_00005' direct represents '3' with '606'
603 -605 606 0
-606 605 0
-606 -603 0
c Var 'x_00005_00005' order represents '4' with '607'
-605 607 0
c Var 'x_00005_00005' direct represents '4' with '608'
605 -607 608 0
-608 607 0
-608 -605 0
c Var 'x_00005_00005' order represents '5' with '609'
-607 609 0
c Var 'x_00005_00005' direct represents '5' with '610'
607 -609 610 0
-610 609 0
-610 -607 0
c Var 'x_00005_00005' order represents '6' with '611'
-609 611 0
c Var 'x_00005_00005' direct represents '6' with '612'
609 -611 612 0
-612 611 0
-612 -609 0
c Var 'x_00005_00005' order represents '7' with '613'
-611 613 0
c Var 'x_00005_00005' direct represents '7' with '614'
611 -613 614 0
-614 613 0
-614 -611 0
c Var 'x_00005_00005' order represents '8' with '615'
-613 615 0
c Var 'x_00005_00005' direct represents '8' with '616'
613 -615 616 0
-616 615 0
-616 -613 0
c Var 'x_00005_00005' direct represents '9' with '-615'
602 604 606 608 610 612 614 616 -615 0
c Encoding variable: x_00005_00006 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00005_00006' order represents '1' with '617'
c Var 'x_00005_00006' direct represents '1' with '617'
c Var 'x_00005_00006' order represents '2' with '618'
-617 618 0
c Var 'x_00005_00006' direct represents '2' with '619'
617 -618 619 0
-619 618 0
-619 -617 0
c Var 'x_00005_00006' order represents '3' with '620'
-618 620 0
c Var 'x_00005_00006' direct represents '3' with '621'
618 -620 621 0
-621 620 0
-621 -618 0
c Var 'x_00005_00006' order represents '4' with '622'
-620 622 0
c Var 'x_00005_00006' direct represents '4' with '623'
620 -622 623 0
-623 622 0
-623 -620 0
c Var 'x_00005_00006' order represents '5' with '624'
-622 624 0
c Var 'x_00005_00006' direct represents '5' with '625'
622 -624 625 0
-625 624 0
-625 -622 0
c Var 'x_00005_00006' order represents '6' with '626'
-624 626 0
c Var 'x_00005_00006' direct represents '6' with '627'
624 -626 627 0
-627 626 0
-627 -624 0
c Var 'x_00005_00006' order represents '7' with '628'
-626 628 0
c Var 'x_00005_00006' direct represents '7' with '629'
626 -628 629 0
-629 628 0
-629 -626 0
c Var 'x_00005_00006' order represents '8' with '630'
-628 630 0
c Var 'x_00005_00006' direct represents '8' with '631'
628 -630 631 0
-631 630 0
-631 -628 0
c Var 'x_00005_00006' direct represents '9' with '-630'
617 619 621 623 625 627 629 631 -630 0
c Encoding variable: x_00005_00007 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00005_00007' order represents '1' with '632'
c Var 'x_00005_00007' direct represents '1' with '632'
c Var 'x_00005_00007' order represents '2' with '633'
-632 633 0
c Var 'x_00005_00007' direct represents '2' with '634'
632 -633 634 0
-634 633 0
-634 -632 0
c Var 'x_00005_00007' order represents '3' with '635'
-633 635 0
c Var 'x_00005_00007' direct represents '3' with '636'
633 -635 636 0
-636 635 0
-636 -633 0
c Var 'x_00005_00007' order represents '4' with '637'
-635 637 0
c Var 'x_00005_00007' direct represents '4' with '638'
635 -637 638 0
-638 637 0
-638 -635 0
c Var 'x_00005_00007' order represents '5' with '639'
-637 639 0
c Var 'x_00005_00007' direct represents '5' with '640'
637 -639 640 0
-640 639 0
-640 -637 0
c Var 'x_00005_00007' order represents '6' with '641'
-639 641 0
c Var 'x_00005_00007' direct represents '6' with '642'
639 -641 642 0
-642 641 0
-642 -639 0
c Var 'x_00005_00007' order represents '7' with '643'
-641 643 0
c Var 'x_00005_00007' direct represents '7' with '644'
641 -643 644 0
-644 643 0
-644 -641 0
c Var 'x_00005_00007' order represents '8' with '645'
-643 645 0
c Var 'x_00005_00007' direct represents '8' with '646'
643 -645 646 0
-646 645 0
-646 -643 0
c Var 'x_00005_00007' direct represents '9' with '-645'
632 634 636 638 640 642 644 646 -645 0
c Encoding variable: x_00005_00008 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00005_00008' order represents '1' with '647'
c Var 'x_00005_00008' direct represents '1' with '647'
c Var 'x_00005_00008' order represents '2' with '648'
-647 648 0
c Var 'x_00005_00008' direct represents '2' with '649'
647 -648 649 0
-649 648 0
-649 -647 0
c Var 'x_00005_00008' order represents '3' with '650'
-648 650 0
c Var 'x_00005_00008' direct represents '3' with '651'
648 -650 651 0
-651 650 0
-651 -648 0
c Var 'x_00005_00008' order represents '4' with '652'
-650 652 0
c Var 'x_00005_00008' direct represents '4' with '653'
650 -652 653 0
-653 652 0
-653 -650 0
c Var 'x_00005_00008' order represents '5' with '654'
-652 654 0
c Var 'x_00005_00008' direct represents '5' with '655'
652 -654 655 0
-655 654 0
-655 -652 0
c Var 'x_00005_00008' order represents '6' with '656'
-654 656 0
c Var 'x_00005_00008' direct represents '6' with '657'
654 -656 657 0
-657 656 0
-657 -654 0
c Var 'x_00005_00008' order represents '7' with '658'
-656 658 0
c Var 'x_00005_00008' direct represents '7' with '659'
656 -658 659 0
-659 658 0
-659 -656 0
c Var 'x_00005_00008' order represents '8' with '660'
-658 660 0
c Var 'x_00005_00008' direct represents '8' with '661'
658 -660 661 0
-661 660 0
-661 -658 0
c Var 'x_00005_00008' direct represents '9' with '-660'
647 649 651 653 655 657 659 661 -660 0
c Encoding variable: x_00005_00009 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00005_00009' order represents '1' with '662'
c Var 'x_00005_00009' direct represents '1' with '662'
c Var 'x_00005_00009' order represents '2' with '663'
-662 663 0
c Var 'x_00005_00009' direct represents '2' with '664'
662 -663 664 0
-664 663 0
-664 -662 0
c Var 'x_00005_00009' order represents '3' with '665'
-663 665 0
c Var 'x_00005_00009' direct represents '3' with '666'
663 -665 666 0
-666 665 0
-666 -663 0
c Var 'x_00005_00009' order represents '4' with '667'
-665 667 0
c Var 'x_00005_00009' direct represents '4' with '668'
665 -667 668 0
-668 667 0
-668 -665 0
c Var 'x_00005_00009' order represents '5' with '669'
-667 669 0
c Var 'x_00005_00009' direct represents '5' with '670'
667 -669 670 0
-670 669 0
-670 -667 0
c Var 'x_00005_00009' order represents '6' with '671'
-669 671 0
c Var 'x_00005_00009' direct represents '6' with '672'
669 -671 672 0
-672 671 0
-672 -669 0
c Var 'x_00005_00009' order represents '7' with '673'
-671 673 0
c Var 'x_00005_00009' direct represents '7' with '674'
671 -673 674 0
-674 673 0
-674 -671 0
c Var 'x_00005_00009' order represents '8' with '675'
-673 675 0
c Var 'x_00005_00009' direct represents '8' with '676'
673 -675 676 0
-676 675 0
-676 -673 0
c Var 'x_00005_00009' direct represents '9' with '-675'
662 664 666 668 670 672 674 676 -675 0
c Encoding variable: x_00006_00001 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00006_00001' order represents '1' with '677'
c Var 'x_00006_00001' direct represents '1' with '677'
c Var 'x_00006_00001' order represents '2' with '678'
-677 678 0
c Var 'x_00006_00001' direct represents '2' with '679'
677 -678 679 0
-679 678 0
-679 -677 0
c Var 'x_00006_00001' order represents '3' with '680'
-678 680 0
c Var 'x_00006_00001' direct represents '3' with '681'
678 -680 681 0
-681 680 0
-681 -678 0
c Var 'x_00006_00001' order represents '4' with '682'
-680 682 0
c Var 'x_00006_00001' direct represents '4' with '683'
680 -682 683 0
-683 682 0
-683 -680 0
c Var 'x_00006_00001' order represents '5' with '684'
-682 684 0
c Var 'x_00006_00001' direct represents '5' with '685'
682 -684 685 0
-685 684 0
-685 -682 0
c Var 'x_00006_00001' order represents '6' with '686'
-684 686 0
c Var 'x_00006_00001' direct represents '6' with '687'
684 -686 687 0
-687 686 0
-687 -684 0
c Var 'x_00006_00001' order represents '7' with '688'
-686 688 0
c Var 'x_00006_00001' direct represents '7' with '689'
686 -688 689 0
-689 688 0
-689 -686 0
c Var 'x_00006_00001' order represents '8' with '690'
-688 690 0
c Var 'x_00006_00001' direct represents '8' with '691'
688 -690 691 0
-691 690 0
-691 -688 0
c Var 'x_00006_00001' direct represents '9' with '-690'
677 679 681 683 685 687 689 691 -690 0
c Encoding variable: x_00006_00002 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00006_00002' order represents '1' with '692'
c Var 'x_00006_00002' direct represents '1' with '692'
c Var 'x_00006_00002' order represents '2' with '693'
-692 693 0
c Var 'x_00006_00002' direct represents '2' with '694'
692 -693 694 0
-694 693 0
-694 -692 0
c Var 'x_00006_00002' order represents '3' with '695'
-693 695 0
c Var 'x_00006_00002' direct represents '3' with '696'
693 -695 696 0
-696 695 0
-696 -693 0
c Var 'x_00006_00002' order represents '4' with '697'
-695 697 0
c Var 'x_00006_00002' direct represents '4' with '698'
695 -697 698 0
-698 697 0
-698 -695 0
c Var 'x_00006_00002' order represents '5' with '699'
-697 699 0
c Var 'x_00006_00002' direct represents '5' with '700'
697 -699 700 0
-700 699 0
-700 -697 0
c Var 'x_00006_00002' order represents '6' with '701'
-699 701 0
c Var 'x_00006_00002' direct represents '6' with '702'
699 -701 702 0
-702 701 0
-702 -699 0
c Var 'x_00006_00002' order represents '7' with '703'
-701 703 0
c Var 'x_00006_00002' direct represents '7' with '704'
701 -703 704 0
-704 703 0
-704 -701 0
c Var 'x_00006_00002' order represents '8' with '705'
-703 705 0
c Var 'x_00006_00002' direct represents '8' with '706'
703 -705 706 0
-706 705 0
-706 -703 0
c Var 'x_00006_00002' direct represents '9' with '-705'
692 694 696 698 700 702 704 706 -705 0
c Encoding variable: x_00006_00003 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00006_00003' order represents '1' with '707'
c Var 'x_00006_00003' direct represents '1' with '707'
c Var 'x_00006_00003' order represents '2' with '708'
-707 708 0
c Var 'x_00006_00003' direct represents '2' with '709'
707 -708 709 0
-709 708 0
-709 -707 0
c Var 'x_00006_00003' order represents '3' with '710'
-708 710 0
c Var 'x_00006_00003' direct represents '3' with '711'
708 -710 711 0
-711 710 0
-711 -708 0
c Var 'x_00006_00003' order represents '4' with '712'
-710 712 0
c Var 'x_00006_00003' direct represents '4' with '713'
710 -712 713 0
-713 712 0
-713 -710 0
c Var 'x_00006_00003' order represents '5' with '714'
-712 714 0
c Var 'x_00006_00003' direct represents '5' with '715'
712 -714 715 0
-715 714 0
-715 -712 0
c Var 'x_00006_00003' order represents '6' with '716'
-714 716 0
c Var 'x_00006_00003' direct represents '6' with '717'
714 -716 717 0
-717 716 0
-717 -714 0
c Var 'x_00006_00003' order represents '7' with '718'
-716 718 0
c Var 'x_00006_00003' direct represents '7' with '719'
716 -718 719 0
-719 718 0
-719 -716 0
c Var 'x_00006_00003' order represents '8' with '720'
-718 720 0
c Var 'x_00006_00003' direct represents '8' with '721'
718 -720 721 0
-721 720 0
-721 -718 0
c Var 'x_00006_00003' direct represents '9' with '-720'
707 709 711 713 715 717 719 721 -720 0
c Encoding variable: x_00006_00004 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00006_00004' order represents '1' with '722'
c Var 'x_00006_00004' direct represents '1' with '722'
c Var 'x_00006_00004' order represents '2' with '723'
-722 723 0
c Var 'x_00006_00004' direct represents '2' with '724'
722 -723 724 0
-724 723 0
-724 -722 0
c Var 'x_00006_00004' order represents '3' with '725'
-723 725 0
c Var 'x_00006_00004' direct represents '3' with '726'
723 -725 726 0
-726 725 0
-726 -723 0
c Var 'x_00006_00004' order represents '4' with '727'
-725 727 0
c Var 'x_00006_00004' direct represents '4' with '728'
725 -727 728 0
-728 727 0
-728 -725 0
c Var 'x_00006_00004' order represents '5' with '729'
-727 729 0
c Var 'x_00006_00004' direct represents '5' with '730'
727 -729 730 0
-730 729 0
-730 -727 0
c Var 'x_00006_00004' order represents '6' with '731'
-729 731 0
c Var 'x_00006_00004' direct represents '6' with '732'
729 -731 732 0
-732 731 0
-732 -729 0
c Var 'x_00006_00004' order represents '7' with '733'
-731 733 0
c Var 'x_00006_00004' direct represents '7' with '734'
731 -733 734 0
-734 733 0
-734 -731 0
c Var 'x_00006_00004' order represents '8' with '735'
-733 735 0
c Var 'x_00006_00004' direct represents '8' with '736'
733 -735 736 0
-736 735 0
-736 -733 0
c Var 'x_00006_00004' direct represents '9' with '-735'
722 724 726 728 730 732 734 736 -735 0
c Encoding variable: x_00006_00005 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00006_00005' order represents '1' with '737'
c Var 'x_00006_00005' direct represents '1' with '737'
c Var 'x_00006_00005' order represents '2' with '738'
-737 738 0
c Var 'x_00006_00005' direct represents '2' with '739'
737 -738 739 0
-739 738 0
-739 -737 0
c Var 'x_00006_00005' order represents '3' with '740'
-738 740 0
c Var 'x_00006_00005' direct represents '3' with '741'
738 -740 741 0
-741 740 0
-741 -738 0
c Var 'x_00006_00005' order represents '4' with '742'
-740 742 0
c Var 'x_00006_00005' direct represents '4' with '743'
740 -742 743 0
-743 742 0
-743 -740 0
c Var 'x_00006_00005' order represents '5' with '744'
-742 744 0
c Var 'x_00006_00005' direct represents '5' with '745'
742 -744 745 0
-745 744 0
-745 -742 0
c Var 'x_00006_00005' order represents '6' with '746'
-744 746 0
c Var 'x_00006_00005' direct represents '6' with '747'
744 -746 747 0
-747 746 0
-747 -744 0
c Var 'x_00006_00005' order represents '7' with '748'
-746 748 0
c Var 'x_00006_00005' direct represents '7' with '749'
746 -748 749 0
-749 748 0
-749 -746 0
c Var 'x_00006_00005' order represents '8' with '750'
-748 750 0
c Var 'x_00006_00005' direct represents '8' with '751'
748 -750 751 0
-751 750 0
-751 -748 0
c Var 'x_00006_00005' direct represents '9' with '-750'
737 739 741 743 745 747 749 751 -750 0
c Encoding variable: x_00006_00006 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00006_00006' order represents '1' with '752'
c Var 'x_00006_00006' direct represents '1' with '752'
c Var 'x_00006_00006' order represents '2' with '753'
-752 753 0
c Var 'x_00006_00006' direct represents '2' with '754'
752 -753 754 0
-754 753 0
-754 -752 0
c Var 'x_00006_00006' order represents '3' with '755'
-753 755 0
c Var 'x_00006_00006' direct represents '3' with '756'
753 -755 756 0
-756 755 0
-756 -753 0
c Var 'x_00006_00006' order represents '4' with '757'
-755 757 0
c Var 'x_00006_00006' direct represents '4' with '758'
755 -757 758 0
-758 757 0
-758 -755 0
c Var 'x_00006_00006' order represents '5' with '759'
-757 759 0
c Var 'x_00006_00006' direct represents '5' with '760'
757 -759 760 0
-760 759 0
-760 -757 0
c Var 'x_00006_00006' order represents '6' with '761'
-759 761 0
c Var 'x_00006_00006' direct represents '6' with '762'
759 -761 762 0
-762 761 0
-762 -759 0
c Var 'x_00006_00006' order represents '7' with '763'
-761 763 0
c Var 'x_00006_00006' direct represents '7' with '764'
761 -763 764 0
-764 763 0
-764 -761 0
c Var 'x_00006_00006' order represents '8' with '765'
-763 765 0
c Var 'x_00006_00006' direct represents '8' with '766'
763 -765 766 0
-766 765 0
-766 -763 0
c Var 'x_00006_00006' direct represents '9' with '-765'
752 754 756 758 760 762 764 766 -765 0
c Encoding variable: x_00006_00007 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00006_00007' order represents '1' with '767'
c Var 'x_00006_00007' direct represents '1' with '767'
c Var 'x_00006_00007' order represents '2' with '768'
-767 768 0
c Var 'x_00006_00007' direct represents '2' with '769'
767 -768 769 0
-769 768 0
-769 -767 0
c Var 'x_00006_00007' order represents '3' with '770'
-768 770 0
c Var 'x_00006_00007' direct represents '3' with '771'
768 -770 771 0
-771 770 0
-771 -768 0
c Var 'x_00006_00007' order represents '4' with '772'
-770 772 0
c Var 'x_00006_00007' direct represents '4' with '773'
770 -772 773 0
-773 772 0
-773 -770 0
c Var 'x_00006_00007' order represents '5' with '774'
-772 774 0
c Var 'x_00006_00007' direct represents '5' with '775'
772 -774 775 0
-775 774 0
-775 -772 0
c Var 'x_00006_00007' order represents '6' with '776'
-774 776 0
c Var 'x_00006_00007' direct represents '6' with '777'
774 -776 777 0
-777 776 0
-777 -774 0
c Var 'x_00006_00007' order represents '7' with '778'
-776 778 0
c Var 'x_00006_00007' direct represents '7' with '779'
776 -778 779 0
-779 778 0
-779 -776 0
c Var 'x_00006_00007' order represents '8' with '780'
-778 780 0
c Var 'x_00006_00007' direct represents '8' with '781'
778 -780 781 0
-781 780 0
-781 -778 0
c Var 'x_00006_00007' direct represents '9' with '-780'
767 769 771 773 775 777 779 781 -780 0
c Encoding variable: x_00006_00008 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00006_00008' order represents '1' with '782'
c Var 'x_00006_00008' direct represents '1' with '782'
c Var 'x_00006_00008' order represents '2' with '783'
-782 783 0
c Var 'x_00006_00008' direct represents '2' with '784'
782 -783 784 0
-784 783 0
-784 -782 0
c Var 'x_00006_00008' order represents '3' with '785'
-783 785 0
c Var 'x_00006_00008' direct represents '3' with '786'
783 -785 786 0
-786 785 0
-786 -783 0
c Var 'x_00006_00008' order represents '4' with '787'
-785 787 0
c Var 'x_00006_00008' direct represents '4' with '788'
785 -787 788 0
-788 787 0
-788 -785 0
c Var 'x_00006_00008' order represents '5' with '789'
-787 789 0
c Var 'x_00006_00008' direct represents '5' with '790'
787 -789 790 0
-790 789 0
-790 -787 0
c Var 'x_00006_00008' order represents '6' with '791'
-789 791 0
c Var 'x_00006_00008' direct represents '6' with '792'
789 -791 792 0
-792 791 0
-792 -789 0
c Var 'x_00006_00008' order represents '7' with '793'
-791 793 0
c Var 'x_00006_00008' direct represents '7' with '794'
791 -793 794 0
-794 793 0
-794 -791 0
c Var 'x_00006_00008' order represents '8' with '795'
-793 795 0
c Var 'x_00006_00008' direct represents '8' with '796'
793 -795 796 0
-796 795 0
-796 -793 0
c Var 'x_00006_00008' direct represents '9' with '-795'
782 784 786 788 790 792 794 796 -795 0
c Encoding variable: x_00006_00009 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00006_00009' order represents '1' with '797'
c Var 'x_00006_00009' direct represents '1' with '797'
c Var 'x_00006_00009' order represents '2' with '798'
-797 798 0
c Var 'x_00006_00009' direct represents '2' with '799'
797 -798 799 0
-799 798 0
-799 -797 0
c Var 'x_00006_00009' order represents '3' with '800'
-798 800 0
c Var 'x_00006_00009' direct represents '3' with '801'
798 -800 801 0
-801 800 0
-801 -798 0
c Var 'x_00006_00009' order represents '4' with '802'
-800 802 0
c Var 'x_00006_00009' direct represents '4' with '803'
800 -802 803 0
-803 802 0
-803 -800 0
c Var 'x_00006_00009' order represents '5' with '804'
-802 804 0
c Var 'x_00006_00009' direct represents '5' with '805'
802 -804 805 0
-805 804 0
-805 -802 0
c Var 'x_00006_00009' order represents '6' with '806'
-804 806 0
c Var 'x_00006_00009' direct represents '6' with '807'
804 -806 807 0
-807 806 0
-807 -804 0
c Var 'x_00006_00009' order represents '7' with '808'
-806 808 0
c Var 'x_00006_00009' direct represents '7' with '809'
806 -808 809 0
-809 808 0
-809 -806 0
c Var 'x_00006_00009' order represents '8' with '810'
-808 810 0
c Var 'x_00006_00009' direct represents '8' with '811'
808 -810 811 0
-811 810 0
-811 -808 0
c Var 'x_00006_00009' direct represents '9' with '-810'
797 799 801 803 805 807 809 811 -810 0
c Encoding variable: x_00007_00001 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00007_00001' order represents '1' with '812'
c Var 'x_00007_00001' direct represents '1' with '812'
c Var 'x_00007_00001' order represents '2' with '813'
-812 813 0
c Var 'x_00007_00001' direct represents '2' with '814'
812 -813 814 0
-814 813 0
-814 -812 0
c Var 'x_00007_00001' order represents '3' with '815'
-813 815 0
c Var 'x_00007_00001' direct represents '3' with '816'
813 -815 816 0
-816 815 0
-816 -813 0
c Var 'x_00007_00001' order represents '4' with '817'
-815 817 0
c Var 'x_00007_00001' direct represents '4' with '818'
815 -817 818 0
-818 817 0
-818 -815 0
c Var 'x_00007_00001' order represents '5' with '819'
-817 819 0
c Var 'x_00007_00001' direct represents '5' with '820'
817 -819 820 0
-820 819 0
-820 -817 0
c Var 'x_00007_00001' order represents '6' with '821'
-819 821 0
c Var 'x_00007_00001' direct represents '6' with '822'
819 -821 822 0
-822 821 0
-822 -819 0
c Var 'x_00007_00001' order represents '7' with '823'
-821 823 0
c Var 'x_00007_00001' direct represents '7' with '824'
821 -823 824 0
-824 823 0
-824 -821 0
c Var 'x_00007_00001' order represents '8' with '825'
-823 825 0
c Var 'x_00007_00001' direct represents '8' with '826'
823 -825 826 0
-826 825 0
-826 -823 0
c Var 'x_00007_00001' direct represents '9' with '-825'
812 814 816 818 820 822 824 826 -825 0
c Encoding variable: x_00007_00002 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00007_00002' order represents '1' with '827'
c Var 'x_00007_00002' direct represents '1' with '827'
c Var 'x_00007_00002' order represents '2' with '828'
-827 828 0
c Var 'x_00007_00002' direct represents '2' with '829'
827 -828 829 0
-829 828 0
-829 -827 0
c Var 'x_00007_00002' order represents '3' with '830'
-828 830 0
c Var 'x_00007_00002' direct represents '3' with '831'
828 -830 831 0
-831 830 0
-831 -828 0
c Var 'x_00007_00002' order represents '4' with '832'
-830 832 0
c Var 'x_00007_00002' direct represents '4' with '833'
830 -832 833 0
-833 832 0
-833 -830 0
c Var 'x_00007_00002' order represents '5' with '834'
-832 834 0
c Var 'x_00007_00002' direct represents '5' with '835'
832 -834 835 0
-835 834 0
-835 -832 0
c Var 'x_00007_00002' order represents '6' with '836'
-834 836 0
c Var 'x_00007_00002' direct represents '6' with '837'
834 -836 837 0
-837 836 0
-837 -834 0
c Var 'x_00007_00002' order represents '7' with '838'
-836 838 0
c Var 'x_00007_00002' direct represents '7' with '839'
836 -838 839 0
-839 838 0
-839 -836 0
c Var 'x_00007_00002' order represents '8' with '840'
-838 840 0
c Var 'x_00007_00002' direct represents '8' with '841'
838 -840 841 0
-841 840 0
-841 -838 0
c Var 'x_00007_00002' direct represents '9' with '-840'
827 829 831 833 835 837 839 841 -840 0
c Encoding variable: x_00007_00003 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00007_00003' order represents '1' with '842'
c Var 'x_00007_00003' direct represents '1' with '842'
c Var 'x_00007_00003' order represents '2' with '843'
-842 843 0
c Var 'x_00007_00003' direct represents '2' with '844'
842 -843 844 0
-844 843 0
-844 -842 0
c Var 'x_00007_00003' order represents '3' with '845'
-843 845 0
c Var 'x_00007_00003' direct represents '3' with '846'
843 -845 846 0
-846 845 0
-846 -843 0
c Var 'x_00007_00003' order represents '4' with '847'
-845 847 0
c Var 'x_00007_00003' direct represents '4' with '848'
845 -847 848 0
-848 847 0
-848 -845 0
c Var 'x_00007_00003' order represents '5' with '849'
-847 849 0
c Var 'x_00007_00003' direct represents '5' with '850'
847 -849 850 0
-850 849 0
-850 -847 0
c Var 'x_00007_00003' order represents '6' with '851'
-849 851 0
c Var 'x_00007_00003' direct represents '6' with '852'
849 -851 852 0
-852 851 0
-852 -849 0
c Var 'x_00007_00003' order represents '7' with '853'
-851 853 0
c Var 'x_00007_00003' direct represents '7' with '854'
851 -853 854 0
-854 853 0
-854 -851 0
c Var 'x_00007_00003' order represents '8' with '855'
-853 855 0
c Var 'x_00007_00003' direct represents '8' with '856'
853 -855 856 0
-856 855 0
-856 -853 0
c Var 'x_00007_00003' direct represents '9' with '-855'
842 844 846 848 850 852 854 856 -855 0
c Encoding variable: x_00007_00004 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00007_00004' order represents '1' with '857'
c Var 'x_00007_00004' direct represents '1' with '857'
c Var 'x_00007_00004' order represents '2' with '858'
-857 858 0
c Var 'x_00007_00004' direct represents '2' with '859'
857 -858 859 0
-859 858 0
-859 -857 0
c Var 'x_00007_00004' order represents '3' with '860'
-858 860 0
c Var 'x_00007_00004' direct represents '3' with '861'
858 -860 861 0
-861 860 0
-861 -858 0
c Var 'x_00007_00004' order represents '4' with '862'
-860 862 0
c Var 'x_00007_00004' direct represents '4' with '863'
860 -862 863 0
-863 862 0
-863 -860 0
c Var 'x_00007_00004' order represents '5' with '864'
-862 864 0
c Var 'x_00007_00004' direct represents '5' with '865'
862 -864 865 0
-865 864 0
-865 -862 0
c Var 'x_00007_00004' order represents '6' with '866'
-864 866 0
c Var 'x_00007_00004' direct represents '6' with '867'
864 -866 867 0
-867 866 0
-867 -864 0
c Var 'x_00007_00004' order represents '7' with '868'
-866 868 0
c Var 'x_00007_00004' direct represents '7' with '869'
866 -868 869 0
-869 868 0
-869 -866 0
c Var 'x_00007_00004' order represents '8' with '870'
-868 870 0
c Var 'x_00007_00004' direct represents '8' with '871'
868 -870 871 0
-871 870 0
-871 -868 0
c Var 'x_00007_00004' direct represents '9' with '-870'
857 859 861 863 865 867 869 871 -870 0
c Encoding variable: x_00007_00005 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00007_00005' order represents '1' with '872'
c Var 'x_00007_00005' direct represents '1' with '872'
c Var 'x_00007_00005' order represents '2' with '873'
-872 873 0
c Var 'x_00007_00005' direct represents '2' with '874'
872 -873 874 0
-874 873 0
-874 -872 0
c Var 'x_00007_00005' order represents '3' with '875'
-873 875 0
c Var 'x_00007_00005' direct represents '3' with '876'
873 -875 876 0
-876 875 0
-876 -873 0
c Var 'x_00007_00005' order represents '4' with '877'
-875 877 0
c Var 'x_00007_00005' direct represents '4' with '878'
875 -877 878 0
-878 877 0
-878 -875 0
c Var 'x_00007_00005' order represents '5' with '879'
-877 879 0
c Var 'x_00007_00005' direct represents '5' with '880'
877 -879 880 0
-880 879 0
-880 -877 0
c Var 'x_00007_00005' order represents '6' with '881'
-879 881 0
c Var 'x_00007_00005' direct represents '6' with '882'
879 -881 882 0
-882 881 0
-882 -879 0
c Var 'x_00007_00005' order represents '7' with '883'
-881 883 0
c Var 'x_00007_00005' direct represents '7' with '884'
881 -883 884 0
-884 883 0
-884 -881 0
c Var 'x_00007_00005' order represents '8' with '885'
-883 885 0
c Var 'x_00007_00005' direct represents '8' with '886'
883 -885 886 0
-886 885 0
-886 -883 0
c Var 'x_00007_00005' direct represents '9' with '-885'
872 874 876 878 880 882 884 886 -885 0
c Encoding variable: x_00007_00006 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00007_00006' order represents '1' with '887'
c Var 'x_00007_00006' direct represents '1' with '887'
c Var 'x_00007_00006' order represents '2' with '888'
-887 888 0
c Var 'x_00007_00006' direct represents '2' with '889'
887 -888 889 0
-889 888 0
-889 -887 0
c Var 'x_00007_00006' order represents '3' with '890'
-888 890 0
c Var 'x_00007_00006' direct represents '3' with '891'
888 -890 891 0
-891 890 0
-891 -888 0
c Var 'x_00007_00006' order represents '4' with '892'
-890 892 0
c Var 'x_00007_00006' direct represents '4' with '893'
890 -892 893 0
-893 892 0
-893 -890 0
c Var 'x_00007_00006' order represents '5' with '894'
-892 894 0
c Var 'x_00007_00006' direct represents '5' with '895'
892 -894 895 0
-895 894 0
-895 -892 0
c Var 'x_00007_00006' order represents '6' with '896'
-894 896 0
c Var 'x_00007_00006' direct represents '6' with '897'
894 -896 897 0
-897 896 0
-897 -894 0
c Var 'x_00007_00006' order represents '7' with '898'
-896 898 0
c Var 'x_00007_00006' direct represents '7' with '899'
896 -898 899 0
-899 898 0
-899 -896 0
c Var 'x_00007_00006' order represents '8' with '900'
-898 900 0
c Var 'x_00007_00006' direct represents '8' with '901'
898 -900 901 0
-901 900 0
-901 -898 0
c Var 'x_00007_00006' direct represents '9' with '-900'
887 889 891 893 895 897 899 901 -900 0
c Encoding variable: x_00007_00007 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00007_00007' order represents '1' with '902'
c Var 'x_00007_00007' direct represents '1' with '902'
c Var 'x_00007_00007' order represents '2' with '903'
-902 903 0
c Var 'x_00007_00007' direct represents '2' with '904'
902 -903 904 0
-904 903 0
-904 -902 0
c Var 'x_00007_00007' order represents '3' with '905'
-903 905 0
c Var 'x_00007_00007' direct represents '3' with '906'
903 -905 906 0
-906 905 0
-906 -903 0
c Var 'x_00007_00007' order represents '4' with '907'
-905 907 0
c Var 'x_00007_00007' direct represents '4' with '908'
905 -907 908 0
-908 907 0
-908 -905 0
c Var 'x_00007_00007' order represents '5' with '909'
-907 909 0
c Var 'x_00007_00007' direct represents '5' with '910'
907 -909 910 0
-910 909 0
-910 -907 0
c Var 'x_00007_00007' order represents '6' with '911'
-909 911 0
c Var 'x_00007_00007' direct represents '6' with '912'
909 -911 912 0
-912 911 0
-912 -909 0
c Var 'x_00007_00007' order represents '7' with '913'
-911 913 0
c Var 'x_00007_00007' direct represents '7' with '914'
911 -913 914 0
-914 913 0
-914 -911 0
c Var 'x_00007_00007' order represents '8' with '915'
-913 915 0
c Var 'x_00007_00007' direct represents '8' with '916'
913 -915 916 0
-916 915 0
-916 -913 0
c Var 'x_00007_00007' direct represents '9' with '-915'
902 904 906 908 910 912 914 916 -915 0
c Encoding variable: x_00007_00008 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00007_00008' order represents '1' with '917'
c Var 'x_00007_00008' direct represents '1' with '917'
c Var 'x_00007_00008' order represents '2' with '918'
-917 918 0
c Var 'x_00007_00008' direct represents '2' with '919'
917 -918 919 0
-919 918 0
-919 -917 0
c Var 'x_00007_00008' order represents '3' with '920'
-918 920 0
c Var 'x_00007_00008' direct represents '3' with '921'
918 -920 921 0
-921 920 0
-921 -918 0
c Var 'x_00007_00008' order represents '4' with '922'
-920 922 0
c Var 'x_00007_00008' direct represents '4' with '923'
920 -922 923 0
-923 922 0
-923 -920 0
c Var 'x_00007_00008' order represents '5' with '924'
-922 924 0
c Var 'x_00007_00008' direct represents '5' with '925'
922 -924 925 0
-925 924 0
-925 -922 0
c Var 'x_00007_00008' order represents '6' with '926'
-924 926 0
c Var 'x_00007_00008' direct represents '6' with '927'
924 -926 927 0
-927 926 0
-927 -924 0
c Var 'x_00007_00008' order represents '7' with '928'
-926 928 0
c Var 'x_00007_00008' direct represents '7' with '929'
926 -928 929 0
-929 928 0
-929 -926 0
c Var 'x_00007_00008' order represents '8' with '930'
-928 930 0
c Var 'x_00007_00008' direct represents '8' with '931'
928 -930 931 0
-931 930 0
-931 -928 0
c Var 'x_00007_00008' direct represents '9' with '-930'
917 919 921 923 925 927 929 931 -930 0
c Encoding variable: x_00007_00009 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00007_00009' order represents '1' with '932'
c Var 'x_00007_00009' direct represents '1' with '932'
c Var 'x_00007_00009' order represents '2' with '933'
-932 933 0
c Var 'x_00007_00009' direct represents '2' with '934'
932 -933 934 0
-934 933 0
-934 -932 0
c Var 'x_00007_00009' order represents '3' with '935'
-933 935 0
c Var 'x_00007_00009' direct represents '3' with '936'
933 -935 936 0
-936 935 0
-936 -933 0
c Var 'x_00007_00009' order represents '4' with '937'
-935 937 0
c Var 'x_00007_00009' direct represents '4' with '938'
935 -937 938 0
-938 937 0
-938 -935 0
c Var 'x_00007_00009' order represents '5' with '939'
-937 939 0
c Var 'x_00007_00009' direct represents '5' with '940'
937 -939 940 0
-940 939 0
-940 -937 0
c Var 'x_00007_00009' order represents '6' with '941'
-939 941 0
c Var 'x_00007_00009' direct represents '6' with '942'
939 -941 942 0
-942 941 0
-942 -939 0
c Var 'x_00007_00009' order represents '7' with '943'
-941 943 0
c Var 'x_00007_00009' direct represents '7' with '944'
941 -943 944 0
-944 943 0
-944 -941 0
c Var 'x_00007_00009' order represents '8' with '945'
-943 945 0
c Var 'x_00007_00009' direct represents '8' with '946'
943 -945 946 0
-946 945 0
-946 -943 0
c Var 'x_00007_00009' direct represents '9' with '-945'
932 934 936 938 940 942 944 946 -945 0
c Encoding variable: x_00008_00001 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00008_00001' order represents '1' with '947'
c Var 'x_00008_00001' direct represents '1' with '947'
c Var 'x_00008_00001' order represents '2' with '948'
-947 948 0
c Var 'x_00008_00001' direct represents '2' with '949'
947 -948 949 0
-949 948 0
-949 -947 0
c Var 'x_00008_00001' order represents '3' with '950'
-948 950 0
c Var 'x_00008_00001' direct represents '3' with '951'
948 -950 951 0
-951 950 0
-951 -948 0
c Var 'x_00008_00001' order represents '4' with '952'
-950 952 0
c Var 'x_00008_00001' direct represents '4' with '953'
950 -952 953 0
-953 952 0
-953 -950 0
c Var 'x_00008_00001' order represents '5' with '954'
-952 954 0
c Var 'x_00008_00001' direct represents '5' with '955'
952 -954 955 0
-955 954 0
-955 -952 0
c Var 'x_00008_00001' order represents '6' with '956'
-954 956 0
c Var 'x_00008_00001' direct represents '6' with '957'
954 -956 957 0
-957 956 0
-957 -954 0
c Var 'x_00008_00001' order represents '7' with '958'
-956 958 0
c Var 'x_00008_00001' direct represents '7' with '959'
956 -958 959 0
-959 958 0
-959 -956 0
c Var 'x_00008_00001' order represents '8' with '960'
-958 960 0
c Var 'x_00008_00001' direct represents '8' with '961'
958 -960 961 0
-961 960 0
-961 -958 0
c Var 'x_00008_00001' direct represents '9' with '-960'
947 949 951 953 955 957 959 961 -960 0
c Encoding variable: x_00008_00002 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00008_00002' order represents '1' with '962'
c Var 'x_00008_00002' direct represents '1' with '962'
c Var 'x_00008_00002' order represents '2' with '963'
-962 963 0
c Var 'x_00008_00002' direct represents '2' with '964'
962 -963 964 0
-964 963 0
-964 -962 0
c Var 'x_00008_00002' order represents '3' with '965'
-963 965 0
c Var 'x_00008_00002' direct represents '3' with '966'
963 -965 966 0
-966 965 0
-966 -963 0
c Var 'x_00008_00002' order represents '4' with '967'
-965 967 0
c Var 'x_00008_00002' direct represents '4' with '968'
965 -967 968 0
-968 967 0
-968 -965 0
c Var 'x_00008_00002' order represents '5' with '969'
-967 969 0
c Var 'x_00008_00002' direct represents '5' with '970'
967 -969 970 0
-970 969 0
-970 -967 0
c Var 'x_00008_00002' order represents '6' with '971'
-969 971 0
c Var 'x_00008_00002' direct represents '6' with '972'
969 -971 972 0
-972 971 0
-972 -969 0
c Var 'x_00008_00002' order represents '7' with '973'
-971 973 0
c Var 'x_00008_00002' direct represents '7' with '974'
971 -973 974 0
-974 973 0
-974 -971 0
c Var 'x_00008_00002' order represents '8' with '975'
-973 975 0
c Var 'x_00008_00002' direct represents '8' with '976'
973 -975 976 0
-976 975 0
-976 -973 0
c Var 'x_00008_00002' direct represents '9' with '-975'
962 964 966 968 970 972 974 976 -975 0
c Encoding variable: x_00008_00003 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00008_00003' order represents '1' with '977'
c Var 'x_00008_00003' direct represents '1' with '977'
c Var 'x_00008_00003' order represents '2' with '978'
-977 978 0
c Var 'x_00008_00003' direct represents '2' with '979'
977 -978 979 0
-979 978 0
-979 -977 0
c Var 'x_00008_00003' order represents '3' with '980'
-978 980 0
c Var 'x_00008_00003' direct represents '3' with '981'
978 -980 981 0
-981 980 0
-981 -978 0
c Var 'x_00008_00003' order represents '4' with '982'
-980 982 0
c Var 'x_00008_00003' direct represents '4' with '983'
980 -982 983 0
-983 982 0
-983 -980 0
c Var 'x_00008_00003' order represents '5' with '984'
-982 984 0
c Var 'x_00008_00003' direct represents '5' with '985'
982 -984 985 0
-985 984 0
-985 -982 0
c Var 'x_00008_00003' order represents '6' with '986'
-984 986 0
c Var 'x_00008_00003' direct represents '6' with '987'
984 -986 987 0
-987 986 0
-987 -984 0
c Var 'x_00008_00003' order represents '7' with '988'
-986 988 0
c Var 'x_00008_00003' direct represents '7' with '989'
986 -988 989 0
-989 988 0
-989 -986 0
c Var 'x_00008_00003' order represents '8' with '990'
-988 990 0
c Var 'x_00008_00003' direct represents '8' with '991'
988 -990 991 0
-991 990 0
-991 -988 0
c Var 'x_00008_00003' direct represents '9' with '-990'
977 979 981 983 985 987 989 991 -990 0
c Encoding variable: x_00008_00004 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00008_00004' order represents '1' with '992'
c Var 'x_00008_00004' direct represents '1' with '992'
c Var 'x_00008_00004' order represents '2' with '993'
-992 993 0
c Var 'x_00008_00004' direct represents '2' with '994'
992 -993 994 0
-994 993 0
-994 -992 0
c Var 'x_00008_00004' order represents '3' with '995'
-993 995 0
c Var 'x_00008_00004' direct represents '3' with '996'
993 -995 996 0
-996 995 0
-996 -993 0
c Var 'x_00008_00004' order represents '4' with '997'
-995 997 0
c Var 'x_00008_00004' direct represents '4' with '998'
995 -997 998 0
-998 997 0
-998 -995 0
c Var 'x_00008_00004' order represents '5' with '999'
-997 999 0
c Var 'x_00008_00004' direct represents '5' with '1000'
997 -999 1000 0
-1000 999 0
-1000 -997 0
c Var 'x_00008_00004' order represents '6' with '1001'
-999 1001 0
c Var 'x_00008_00004' direct represents '6' with '1002'
999 -1001 1002 0
-1002 1001 0
-1002 -999 0
c Var 'x_00008_00004' order represents '7' with '1003'
-1001 1003 0
c Var 'x_00008_00004' direct represents '7' with '1004'
1001 -1003 1004 0
-1004 1003 0
-1004 -1001 0
c Var 'x_00008_00004' order represents '8' with '1005'
-1003 1005 0
c Var 'x_00008_00004' direct represents '8' with '1006'
1003 -1005 1006 0
-1006 1005 0
-1006 -1003 0
c Var 'x_00008_00004' direct represents '9' with '-1005'
992 994 996 998 1000 1002 1004 1006 -1005 0
c Encoding variable: x_00008_00005 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00008_00005' order represents '1' with '1007'
c Var 'x_00008_00005' direct represents '1' with '1007'
c Var 'x_00008_00005' order represents '2' with '1008'
-1007 1008 0
c Var 'x_00008_00005' direct represents '2' with '1009'
1007 -1008 1009 0
-1009 1008 0
-1009 -1007 0
c Var 'x_00008_00005' order represents '3' with '1010'
-1008 1010 0
c Var 'x_00008_00005' direct represents '3' with '1011'
1008 -1010 1011 0
-1011 1010 0
-1011 -1008 0
c Var 'x_00008_00005' order represents '4' with '1012'
-1010 1012 0
c Var 'x_00008_00005' direct represents '4' with '1013'
1010 -1012 1013 0
-1013 1012 0
-1013 -1010 0
c Var 'x_00008_00005' order represents '5' with '1014'
-1012 1014 0
c Var 'x_00008_00005' direct represents '5' with '1015'
1012 -1014 1015 0
-1015 1014 0
-1015 -1012 0
c Var 'x_00008_00005' order represents '6' with '1016'
-1014 1016 0
c Var 'x_00008_00005' direct represents '6' with '1017'
1014 -1016 1017 0
-1017 1016 0
-1017 -1014 0
c Var 'x_00008_00005' order represents '7' with '1018'
-1016 1018 0
c Var 'x_00008_00005' direct represents '7' with '1019'
1016 -1018 1019 0
-1019 1018 0
-1019 -1016 0
c Var 'x_00008_00005' order represents '8' with '1020'
-1018 1020 0
c Var 'x_00008_00005' direct represents '8' with '1021'
1018 -1020 1021 0
-1021 1020 0
-1021 -1018 0
c Var 'x_00008_00005' direct represents '9' with '-1020'
1007 1009 1011 1013 1015 1017 1019 1021 -1020 0
c Encoding variable: x_00008_00006 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00008_00006' order represents '1' with '1022'
c Var 'x_00008_00006' direct represents '1' with '1022'
c Var 'x_00008_00006' order represents '2' with '1023'
-1022 1023 0
c Var 'x_00008_00006' direct represents '2' with '1024'
1022 -1023 1024 0
-1024 1023 0
-1024 -1022 0
c Var 'x_00008_00006' order represents '3' with '1025'
-1023 1025 0
c Var 'x_00008_00006' direct represents '3' with '1026'
1023 -1025 1026 0
-1026 1025 0
-1026 -1023 0
c Var 'x_00008_00006' order represents '4' with '1027'
-1025 1027 0
c Var 'x_00008_00006' direct represents '4' with '1028'
1025 -1027 1028 0
-1028 1027 0
-1028 -1025 0
c Var 'x_00008_00006' order represents '5' with '1029'
-1027 1029 0
c Var 'x_00008_00006' direct represents '5' with '1030'
1027 -1029 1030 0
-1030 1029 0
-1030 -1027 0
c Var 'x_00008_00006' order represents '6' with '1031'
-1029 1031 0
c Var 'x_00008_00006' direct represents '6' with '1032'
1029 -1031 1032 0
-1032 1031 0
-1032 -1029 0
c Var 'x_00008_00006' order represents '7' with '1033'
-1031 1033 0
c Var 'x_00008_00006' direct represents '7' with '1034'
1031 -1033 1034 0
-1034 1033 0
-1034 -1031 0
c Var 'x_00008_00006' order represents '8' with '1035'
-1033 1035 0
c Var 'x_00008_00006' direct represents '8' with '1036'
1033 -1035 1036 0
-1036 1035 0
-1036 -1033 0
c Var 'x_00008_00006' direct represents '9' with '-1035'
1022 1024 1026 1028 1030 1032 1034 1036 -1035 0
c Encoding variable: x_00008_00007 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00008_00007' order represents '1' with '1037'
c Var 'x_00008_00007' direct represents '1' with '1037'
c Var 'x_00008_00007' order represents '2' with '1038'
-1037 1038 0
c Var 'x_00008_00007' direct represents '2' with '1039'
1037 -1038 1039 0
-1039 1038 0
-1039 -1037 0
c Var 'x_00008_00007' order represents '3' with '1040'
-1038 1040 0
c Var 'x_00008_00007' direct represents '3' with '1041'
1038 -1040 1041 0
-1041 1040 0
-1041 -1038 0
c Var 'x_00008_00007' order represents '4' with '1042'
-1040 1042 0
c Var 'x_00008_00007' direct represents '4' with '1043'
1040 -1042 1043 0
-1043 1042 0
-1043 -1040 0
c Var 'x_00008_00007' order represents '5' with '1044'
-1042 1044 0
c Var 'x_00008_00007' direct represents '5' with '1045'
1042 -1044 1045 0
-1045 1044 0
-1045 -1042 0
c Var 'x_00008_00007' order represents '6' with '1046'
-1044 1046 0
c Var 'x_00008_00007' direct represents '6' with '1047'
1044 -1046 1047 0
-1047 1046 0
-1047 -1044 0
c Var 'x_00008_00007' order represents '7' with '1048'
-1046 1048 0
c Var 'x_00008_00007' direct represents '7' with '1049'
1046 -1048 1049 0
-1049 1048 0
-1049 -1046 0
c Var 'x_00008_00007' order represents '8' with '1050'
-1048 1050 0
c Var 'x_00008_00007' direct represents '8' with '1051'
1048 -1050 1051 0
-1051 1050 0
-1051 -1048 0
c Var 'x_00008_00007' direct represents '9' with '-1050'
1037 1039 1041 1043 1045 1047 1049 1051 -1050 0
c Encoding variable: x_00008_00008 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00008_00008' order represents '1' with '1052'
c Var 'x_00008_00008' direct represents '1' with '1052'
c Var 'x_00008_00008' order represents '2' with '1053'
-1052 1053 0
c Var 'x_00008_00008' direct represents '2' with '1054'
1052 -1053 1054 0
-1054 1053 0
-1054 -1052 0
c Var 'x_00008_00008' order represents '3' with '1055'
-1053 1055 0
c Var 'x_00008_00008' direct represents '3' with '1056'
1053 -1055 1056 0
-1056 1055 0
-1056 -1053 0
c Var 'x_00008_00008' order represents '4' with '1057'
-1055 1057 0
c Var 'x_00008_00008' direct represents '4' with '1058'
1055 -1057 1058 0
-1058 1057 0
-1058 -1055 0
c Var 'x_00008_00008' order represents '5' with '1059'
-1057 1059 0
c Var 'x_00008_00008' direct represents '5' with '1060'
1057 -1059 1060 0
-1060 1059 0
-1060 -1057 0
c Var 'x_00008_00008' order represents '6' with '1061'
-1059 1061 0
c Var 'x_00008_00008' direct represents '6' with '1062'
1059 -1061 1062 0
-1062 1061 0
-1062 -1059 0
c Var 'x_00008_00008' order represents '7' with '1063'
-1061 1063 0
c Var 'x_00008_00008' direct represents '7' with '1064'
1061 -1063 1064 0
-1064 1063 0
-1064 -1061 0
c Var 'x_00008_00008' order represents '8' with '1065'
-1063 1065 0
c Var 'x_00008_00008' direct represents '8' with '1066'
1063 -1065 1066 0
-1066 1065 0
-1066 -1063 0
c Var 'x_00008_00008' direct represents '9' with '-1065'
1052 1054 1056 1058 1060 1062 1064 1066 -1065 0
c Encoding variable: x_00008_00009 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00008_00009' order represents '1' with '1067'
c Var 'x_00008_00009' direct represents '1' with '1067'
c Var 'x_00008_00009' order represents '2' with '1068'
-1067 1068 0
c Var 'x_00008_00009' direct represents '2' with '1069'
1067 -1068 1069 0
-1069 1068 0
-1069 -1067 0
c Var 'x_00008_00009' order represents '3' with '1070'
-1068 1070 0
c Var 'x_00008_00009' direct represents '3' with '1071'
1068 -1070 1071 0
-1071 1070 0
-1071 -1068 0
c Var 'x_00008_00009' order represents '4' with '1072'
-1070 1072 0
c Var 'x_00008_00009' direct represents '4' with '1073'
1070 -1072 1073 0
-1073 1072 0
-1073 -1070 0
c Var 'x_00008_00009' order represents '5' with '1074'
-1072 1074 0
c Var 'x_00008_00009' direct represents '5' with '1075'
1072 -1074 1075 0
-1075 1074 0
-1075 -1072 0
c Var 'x_00008_00009' order represents '6' with '1076'
-1074 1076 0
c Var 'x_00008_00009' direct represents '6' with '1077'
1074 -1076 1077 0
-1077 1076 0
-1077 -1074 0
c Var 'x_00008_00009' order represents '7' with '1078'
-1076 1078 0
c Var 'x_00008_00009' direct represents '7' with '1079'
1076 -1078 1079 0
-1079 1078 0
-1079 -1076 0
c Var 'x_00008_00009' order represents '8' with '1080'
-1078 1080 0
c Var 'x_00008_00009' direct represents '8' with '1081'
1078 -1080 1081 0
-1081 1080 0
-1081 -1078 0
c Var 'x_00008_00009' direct represents '9' with '-1080'
1067 1069 1071 1073 1075 1077 1079 1081 -1080 0
c Encoding variable: x_00009_00001 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00009_00001' order represents '1' with '1082'
c Var 'x_00009_00001' direct represents '1' with '1082'
c Var 'x_00009_00001' order represents '2' with '1083'
-1082 1083 0
c Var 'x_00009_00001' direct represents '2' with '1084'
1082 -1083 1084 0
-1084 1083 0
-1084 -1082 0
c Var 'x_00009_00001' order represents '3' with '1085'
-1083 1085 0
c Var 'x_00009_00001' direct represents '3' with '1086'
1083 -1085 1086 0
-1086 1085 0
-1086 -1083 0
c Var 'x_00009_00001' order represents '4' with '1087'
-1085 1087 0
c Var 'x_00009_00001' direct represents '4' with '1088'
1085 -1087 1088 0
-1088 1087 0
-1088 -1085 0
c Var 'x_00009_00001' order represents '5' with '1089'
-1087 1089 0
c Var 'x_00009_00001' direct represents '5' with '1090'
1087 -1089 1090 0
-1090 1089 0
-1090 -1087 0
c Var 'x_00009_00001' order represents '6' with '1091'
-1089 1091 0
c Var 'x_00009_00001' direct represents '6' with '1092'
1089 -1091 1092 0
-1092 1091 0
-1092 -1089 0
c Var 'x_00009_00001' order represents '7' with '1093'
-1091 1093 0
c Var 'x_00009_00001' direct represents '7' with '1094'
1091 -1093 1094 0
-1094 1093 0
-1094 -1091 0
c Var 'x_00009_00001' order represents '8' with '1095'
-1093 1095 0
c Var 'x_00009_00001' direct represents '8' with '1096'
1093 -1095 1096 0
-1096 1095 0
-1096 -1093 0
c Var 'x_00009_00001' direct represents '9' with '-1095'
1082 1084 1086 1088 1090 1092 1094 1096 -1095 0
c Encoding variable: x_00009_00002 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00009_00002' order represents '1' with '1097'
c Var 'x_00009_00002' direct represents '1' with '1097'
c Var 'x_00009_00002' order represents '2' with '1098'
-1097 1098 0
c Var 'x_00009_00002' direct represents '2' with '1099'
1097 -1098 1099 0
-1099 1098 0
-1099 -1097 0
c Var 'x_00009_00002' order represents '3' with '1100'
-1098 1100 0
c Var 'x_00009_00002' direct represents '3' with '1101'
1098 -1100 1101 0
-1101 1100 0
-1101 -1098 0
c Var 'x_00009_00002' order represents '4' with '1102'
-1100 1102 0
c Var 'x_00009_00002' direct represents '4' with '1103'
1100 -1102 1103 0
-1103 1102 0
-1103 -1100 0
c Var 'x_00009_00002' order represents '5' with '1104'
-1102 1104 0
c Var 'x_00009_00002' direct represents '5' with '1105'
1102 -1104 1105 0
-1105 1104 0
-1105 -1102 0
c Var 'x_00009_00002' order represents '6' with '1106'
-1104 1106 0
c Var 'x_00009_00002' direct represents '6' with '1107'
1104 -1106 1107 0
-1107 1106 0
-1107 -1104 0
c Var 'x_00009_00002' order represents '7' with '1108'
-1106 1108 0
c Var 'x_00009_00002' direct represents '7' with '1109'
1106 -1108 1109 0
-1109 1108 0
-1109 -1106 0
c Var 'x_00009_00002' order represents '8' with '1110'
-1108 1110 0
c Var 'x_00009_00002' direct represents '8' with '1111'
1108 -1110 1111 0
-1111 1110 0
-1111 -1108 0
c Var 'x_00009_00002' direct represents '9' with '-1110'
1097 1099 1101 1103 1105 1107 1109 1111 -1110 0
c Encoding variable: x_00009_00003 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00009_00003' order represents '1' with '1112'
c Var 'x_00009_00003' direct represents '1' with '1112'
c Var 'x_00009_00003' order represents '2' with '1113'
-1112 1113 0
c Var 'x_00009_00003' direct represents '2' with '1114'
1112 -1113 1114 0
-1114 1113 0
-1114 -1112 0
c Var 'x_00009_00003' order represents '3' with '1115'
-1113 1115 0
c Var 'x_00009_00003' direct represents '3' with '1116'
1113 -1115 1116 0
-1116 1115 0
-1116 -1113 0
c Var 'x_00009_00003' order represents '4' with '1117'
-1115 1117 0
c Var 'x_00009_00003' direct represents '4' with '1118'
1115 -1117 1118 0
-1118 1117 0
-1118 -1115 0
c Var 'x_00009_00003' order represents '5' with '1119'
-1117 1119 0
c Var 'x_00009_00003' direct represents '5' with '1120'
1117 -1119 1120 0
-1120 1119 0
-1120 -1117 0
c Var 'x_00009_00003' order represents '6' with '1121'
-1119 1121 0
c Var 'x_00009_00003' direct represents '6' with '1122'
1119 -1121 1122 0
-1122 1121 0
-1122 -1119 0
c Var 'x_00009_00003' order represents '7' with '1123'
-1121 1123 0
c Var 'x_00009_00003' direct represents '7' with '1124'
1121 -1123 1124 0
-1124 1123 0
-1124 -1121 0
c Var 'x_00009_00003' order represents '8' with '1125'
-1123 1125 0
c Var 'x_00009_00003' direct represents '8' with '1126'
1123 -1125 1126 0
-1126 1125 0
-1126 -1123 0
c Var 'x_00009_00003' direct represents '9' with '-1125'
1112 1114 1116 1118 1120 1122 1124 1126 -1125 0
c Encoding variable: x_00009_00004 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00009_00004' order represents '1' with '1127'
c Var 'x_00009_00004' direct represents '1' with '1127'
c Var 'x_00009_00004' order represents '2' with '1128'
-1127 1128 0
c Var 'x_00009_00004' direct represents '2' with '1129'
1127 -1128 1129 0
-1129 1128 0
-1129 -1127 0
c Var 'x_00009_00004' order represents '3' with '1130'
-1128 1130 0
c Var 'x_00009_00004' direct represents '3' with '1131'
1128 -1130 1131 0
-1131 1130 0
-1131 -1128 0
c Var 'x_00009_00004' order represents '4' with '1132'
-1130 1132 0
c Var 'x_00009_00004' direct represents '4' with '1133'
1130 -1132 1133 0
-1133 1132 0
-1133 -1130 0
c Var 'x_00009_00004' order represents '5' with '1134'
-1132 1134 0
c Var 'x_00009_00004' direct represents '5' with '1135'
1132 -1134 1135 0
-1135 1134 0
-1135 -1132 0
c Var 'x_00009_00004' order represents '6' with '1136'
-1134 1136 0
c Var 'x_00009_00004' direct represents '6' with '1137'
1134 -1136 1137 0
-1137 1136 0
-1137 -1134 0
c Var 'x_00009_00004' order represents '7' with '1138'
-1136 1138 0
c Var 'x_00009_00004' direct represents '7' with '1139'
1136 -1138 1139 0
-1139 1138 0
-1139 -1136 0
c Var 'x_00009_00004' order represents '8' with '1140'
-1138 1140 0
c Var 'x_00009_00004' direct represents '8' with '1141'
1138 -1140 1141 0
-1141 1140 0
-1141 -1138 0
c Var 'x_00009_00004' direct represents '9' with '-1140'
1127 1129 1131 1133 1135 1137 1139 1141 -1140 0
c Encoding variable: x_00009_00005 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00009_00005' order represents '1' with '1142'
c Var 'x_00009_00005' direct represents '1' with '1142'
c Var 'x_00009_00005' order represents '2' with '1143'
-1142 1143 0
c Var 'x_00009_00005' direct represents '2' with '1144'
1142 -1143 1144 0
-1144 1143 0
-1144 -1142 0
c Var 'x_00009_00005' order represents '3' with '1145'
-1143 1145 0
c Var 'x_00009_00005' direct represents '3' with '1146'
1143 -1145 1146 0
-1146 1145 0
-1146 -1143 0
c Var 'x_00009_00005' order represents '4' with '1147'
-1145 1147 0
c Var 'x_00009_00005' direct represents '4' with '1148'
1145 -1147 1148 0
-1148 1147 0
-1148 -1145 0
c Var 'x_00009_00005' order represents '5' with '1149'
-1147 1149 0
c Var 'x_00009_00005' direct represents '5' with '1150'
1147 -1149 1150 0
-1150 1149 0
-1150 -1147 0
c Var 'x_00009_00005' order represents '6' with '1151'
-1149 1151 0
c Var 'x_00009_00005' direct represents '6' with '1152'
1149 -1151 1152 0
-1152 1151 0
-1152 -1149 0
c Var 'x_00009_00005' order represents '7' with '1153'
-1151 1153 0
c Var 'x_00009_00005' direct represents '7' with '1154'
1151 -1153 1154 0
-1154 1153 0
-1154 -1151 0
c Var 'x_00009_00005' order represents '8' with '1155'
-1153 1155 0
c Var 'x_00009_00005' direct represents '8' with '1156'
1153 -1155 1156 0
-1156 1155 0
-1156 -1153 0
c Var 'x_00009_00005' direct represents '9' with '-1155'
1142 1144 1146 1148 1150 1152 1154 1156 -1155 0
c Encoding variable: x_00009_00006 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00009_00006' order represents '1' with '1157'
c Var 'x_00009_00006' direct represents '1' with '1157'
c Var 'x_00009_00006' order represents '2' with '1158'
-1157 1158 0
c Var 'x_00009_00006' direct represents '2' with '1159'
1157 -1158 1159 0
-1159 1158 0
-1159 -1157 0
c Var 'x_00009_00006' order represents '3' with '1160'
-1158 1160 0
c Var 'x_00009_00006' direct represents '3' with '1161'
1158 -1160 1161 0
-1161 1160 0
-1161 -1158 0
c Var 'x_00009_00006' order represents '4' with '1162'
-1160 1162 0
c Var 'x_00009_00006' direct represents '4' with '1163'
1160 -1162 1163 0
-1163 1162 0
-1163 -1160 0
c Var 'x_00009_00006' order represents '5' with '1164'
-1162 1164 0
c Var 'x_00009_00006' direct represents '5' with '1165'
1162 -1164 1165 0
-1165 1164 0
-1165 -1162 0
c Var 'x_00009_00006' order represents '6' with '1166'
-1164 1166 0
c Var 'x_00009_00006' direct represents '6' with '1167'
1164 -1166 1167 0
-1167 1166 0
-1167 -1164 0
c Var 'x_00009_00006' order represents '7' with '1168'
-1166 1168 0
c Var 'x_00009_00006' direct represents '7' with '1169'
1166 -1168 1169 0
-1169 1168 0
-1169 -1166 0
c Var 'x_00009_00006' order represents '8' with '1170'
-1168 1170 0
c Var 'x_00009_00006' direct represents '8' with '1171'
1168 -1170 1171 0
-1171 1170 0
-1171 -1168 0
c Var 'x_00009_00006' direct represents '9' with '-1170'
1157 1159 1161 1163 1165 1167 1169 1171 -1170 0
c Encoding variable: x_00009_00007 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00009_00007' order represents '1' with '1172'
c Var 'x_00009_00007' direct represents '1' with '1172'
c Var 'x_00009_00007' order represents '2' with '1173'
-1172 1173 0
c Var 'x_00009_00007' direct represents '2' with '1174'
1172 -1173 1174 0
-1174 1173 0
-1174 -1172 0
c Var 'x_00009_00007' order represents '3' with '1175'
-1173 1175 0
c Var 'x_00009_00007' direct represents '3' with '1176'
1173 -1175 1176 0
-1176 1175 0
-1176 -1173 0
c Var 'x_00009_00007' order represents '4' with '1177'
-1175 1177 0
c Var 'x_00009_00007' direct represents '4' with '1178'
1175 -1177 1178 0
-1178 1177 0
-1178 -1175 0
c Var 'x_00009_00007' order represents '5' with '1179'
-1177 1179 0
c Var 'x_00009_00007' direct represents '5' with '1180'
1177 -1179 1180 0
-1180 1179 0
-1180 -1177 0
c Var 'x_00009_00007' order represents '6' with '1181'
-1179 1181 0
c Var 'x_00009_00007' direct represents '6' with '1182'
1179 -1181 1182 0
-1182 1181 0
-1182 -1179 0
c Var 'x_00009_00007' order represents '7' with '1183'
-1181 1183 0
c Var 'x_00009_00007' direct represents '7' with '1184'
1181 -1183 1184 0
-1184 1183 0
-1184 -1181 0
c Var 'x_00009_00007' order represents '8' with '1185'
-1183 1185 0
c Var 'x_00009_00007' direct represents '8' with '1186'
1183 -1185 1186 0
-1186 1185 0
-1186 -1183 0
c Var 'x_00009_00007' direct represents '9' with '-1185'
1172 1174 1176 1178 1180 1182 1184 1186 -1185 0
c Encoding variable: x_00009_00008 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00009_00008' order represents '1' with '1187'
c Var 'x_00009_00008' direct represents '1' with '1187'
c Var 'x_00009_00008' order represents '2' with '1188'
-1187 1188 0
c Var 'x_00009_00008' direct represents '2' with '1189'
1187 -1188 1189 0
-1189 1188 0
-1189 -1187 0
c Var 'x_00009_00008' order represents '3' with '1190'
-1188 1190 0
c Var 'x_00009_00008' direct represents '3' with '1191'
1188 -1190 1191 0
-1191 1190 0
-1191 -1188 0
c Var 'x_00009_00008' order represents '4' with '1192'
-1190 1192 0
c Var 'x_00009_00008' direct represents '4' with '1193'
1190 -1192 1193 0
-1193 1192 0
-1193 -1190 0
c Var 'x_00009_00008' order represents '5' with '1194'
-1192 1194 0
c Var 'x_00009_00008' direct represents '5' with '1195'
1192 -1194 1195 0
-1195 1194 0
-1195 -1192 0
c Var 'x_00009_00008' order represents '6' with '1196'
-1194 1196 0
c Var 'x_00009_00008' direct represents '6' with '1197'
1194 -1196 1197 0
-1197 1196 0
-1197 -1194 0
c Var 'x_00009_00008' order represents '7' with '1198'
-1196 1198 0
c Var 'x_00009_00008' direct represents '7' with '1199'
1196 -1198 1199 0
-1199 1198 0
-1199 -1196 0
c Var 'x_00009_00008' order represents '8' with '1200'
-1198 1200 0
c Var 'x_00009_00008' direct represents '8' with '1201'
1198 -1200 1201 0
-1201 1200 0
-1201 -1198 0
c Var 'x_00009_00008' direct represents '9' with '-1200'
1187 1189 1191 1193 1195 1197 1199 1201 -1200 0
c Encoding variable: x_00009_00009 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00009_00009' order represents '1' with '1202'
c Var 'x_00009_00009' direct represents '1' with '1202'
c Var 'x_00009_00009' order represents '2' with '1203'
-1202 1203 0
c Var 'x_00009_00009' direct represents '2' with '1204'
1202 -1203 1204 0
-1204 1203 0
-1204 -1202 0
c Var 'x_00009_00009' order represents '3' with '1205'
-1203 1205 0
c Var 'x_00009_00009' direct represents '3' with '1206'
1203 -1205 1206 0
-1206 1205 0
-1206 -1203 0
c Var 'x_00009_00009' order represents '4' with '1207'
-1205 1207 0
c Var 'x_00009_00009' direct represents '4' with '1208'
1205 -1207 1208 0
-1208 1207 0
-1208 -1205 0
c Var 'x_00009_00009' order represents '5' with '1209'
-1207 1209 0
c Var 'x_00009_00009' direct represents '5' with '1210'
1207 -1209 1210 0
-1210 1209 0
-1210 -1207 0
c Var 'x_00009_00009' order represents '6' with '1211'
-1209 1211 0
c Var 'x_00009_00009' direct represents '6' with '1212'
1209 -1211 1212 0
-1212 1211 0
-1212 -1209 0
c Var 'x_00009_00009' order represents '7' with '1213'
-1211 1213 0
c Var 'x_00009_00009' direct represents '7' with '1214'
1211 -1213 1214 0
-1214 1213 0
-1214 -1211 0
c Var 'x_00009_00009' order represents '8' with '1215'
-1213 1215 0
c Var 'x_00009_00009' direct represents '8' with '1216'
1213 -1215 1216 0
-1216 1215 0
-1216 -1213 0
c Var 'x_00009_00009' direct represents '9' with '-1215'
1202 1204 1206 1208 1210 1212 1214 1216 -1215 0
c Encoding variable: alldiff_row_00001 with domain: bool (representing constraint )
c Var 'alldiff_row_00001' direct represents '0' with '-1217'
c Var 'alldiff_row_00001' direct represents '1' with '1217'
c Var 'alldiff_row_00001' order represents '1' with '1'
c Var 'alldiff_row_00001' order represents '0' with '-1217'
c Encoding variable: alldiff_row_00002 with domain: bool (representing constraint )
c Var 'alldiff_row_00002' direct represents '0' with '-1218'
c Var 'alldiff_row_00002' direct represents '1' with '1218'
c Var 'alldiff_row_00002' order represents '1' with '1'
c Var 'alldiff_row_00002' order represents '0' with '-1218'
c Encoding variable: alldiff_row_00003 with domain: bool (representing constraint )
c Var 'alldiff_row_00003' direct represents '0' with '-1219'
c Var 'alldiff_row_00003' direct represents '1' with '1219'
c Var 'alldiff_row_00003' order represents '1' with '1'
c Var 'alldiff_row_00003' order represents '0' with '-1219'
c Encoding variable: alldiff_row_00004 with domain: bool (representing constraint )
c Var 'alldiff_row_00004' direct represents '0' with '-1220'
c Var 'alldiff_row_00004' direct represents '1' with '1220'
c Var 'alldiff_row_00004' order represents '1' with '1'
c Var 'alldiff_row_00004' order represents '0' with '-1220'
c Encoding variable: alldiff_row_00005 with domain: bool (representing constraint )
c Var 'alldiff_row_00005' direct represents '0' with '-1221'
c Var 'alldiff_row_00005' direct represents '1' with '1221'
c Var 'alldiff_row_00005' order represents '1' with '1'
c Var 'alldiff_row_00005' order represents '0' with '-1221'
c Encoding variable: alldiff_row_00006 with domain: bool (representing constraint )
c Var 'alldiff_row_00006' direct represents '0' with '-1222'
c Var 'alldiff_row_00006' direct represents '1' with '1222'
c Var 'alldiff_row_00006' order represents '1' with '1'
c Var 'alldiff_row_00006' order represents '0' with '-1222'
c Encoding variable: alldiff_row_00007 with domain: bool (representing constraint )
c Var 'alldiff_row_00007' direct represents '0' with '-1223'
c Var 'alldiff_row_00007' direct represents '1' with '1223'
c Var 'alldiff_row_00007' order represents '1' with '1'
c Var 'alldiff_row_00007' order represents '0' with '-1223'
c Encoding variable: alldiff_row_00008 with domain: bool (representing constraint )
c Var 'alldiff_row_00008' direct represents '0' with '-1224'
c Var 'alldiff_row_00008' direct represents '1' with '1224'
c Var 'alldiff_row_00008' order represents '1' with '1'
c Var 'alldiff_row_00008' order represents '0' with '-1224'
c Encoding variable: alldiff_row_00009 with domain: bool (representing constraint )
c Var 'alldiff_row_00009' direct represents '0' with '-1225'
c Var 'alldiff_row_00009' direct represents '1' with '1225'
c Var 'alldiff_row_00009' order represents '1' with '1'
c Var 'alldiff_row_00009' order represents '0' with '-1225'
c Encoding variable: alldiff_col_00001 with domain: bool (representing constraint )
c Var 'alldiff_col_00001' direct represents '0' with '-1226'
c Var 'alldiff_col_00001' direct represents '1' with '1226'
c Var 'alldiff_col_00001' order represents '1' with '1'
c Var 'alldiff_col_00001' order represents '0' with '-1226'
c Encoding variable: alldiff_col_00002 with domain: bool (representing constraint )
c Var 'alldiff_col_00002' direct represents '0' with '-1227'
c Var 'alldiff_col_00002' direct represents '1' with '1227'
c Var 'alldiff_col_00002' order represents '1' with '1'
c Var 'alldiff_col_00002' order represents '0' with '-1227'
c Encoding variable: alldiff_col_00003 with domain: bool (representing constraint )
c Var 'alldiff_col_00003' direct represents '0' with '-1228'
c Var 'alldiff_col_00003' direct represents '1' with '1228'
c Var 'alldiff_col_00003' order represents '1' with '1'
c Var 'alldiff_col_00003' order represents '0' with '-1228'
c Encoding variable: alldiff_col_00004 with domain: bool (representing constraint )
c Var 'alldiff_col_00004' direct represents '0' with '-1229'
c Var 'alldiff_col_00004' direct represents '1' with '1229'
c Var 'alldiff_col_00004' order represents '1' with '1'
c Var 'alldiff_col_00004' order represents '0' with '-1229'
c Encoding variable: alldiff_col_00005 with domain: bool (representing constraint )
c Var 'alldiff_col_00005' direct represents '0' with '-1230'
c Var 'alldiff_col_00005' direct represents '1' with '1230'
c Var 'alldiff_col_00005' order represents '1' with '1'
c Var 'alldiff_col_00005' order represents '0' with '-1230'
c Encoding variable: alldiff_col_00006 with domain: bool (representing constraint )
c Var 'alldiff_col_00006' direct represents '0' with '-1231'
c Var 'alldiff_col_00006' direct represents '1' with '1231'
c Var 'alldiff_col_00006' order represents '1' with '1'
c Var 'alldiff_col_00006' order represents '0' with '-1231'
c Encoding variable: alldiff_col_00007 with domain: bool (representing constraint )
c Var 'alldiff_col_00007' direct represents '0' with '-1232'
c Var 'alldiff_col_00007' direct represents '1' with '1232'
c Var 'alldiff_col_00007' order represents '1' with '1'
c Var 'alldiff_col_00007' order represents '0' with '-1232'
c Encoding variable: alldiff_col_00008 with domain: bool (representing constraint )
c Var 'alldiff_col_00008' direct represents '0' with '-1233'
c Var 'alldiff_col_00008' direct represents '1' with '1233'
c Var 'alldiff_col_00008' order represents '1' with '1'
c Var 'alldiff_col_00008' order represents '0' with '-1233'
c Encoding variable: alldiff_col_00009 with domain: bool (representing constraint )
c Var 'alldiff_col_00009' direct represents '0' with '-1234'
c Var 'alldiff_col_00009' direct represents '1' with '1234'
c Var 'alldiff_col_00009' order represents '1' with '1'
c Var 'alldiff_col_00009' order represents '0' with '-1234'
c Encoding variable: alldiff_box_00001 with domain: bool (representing constraint )
c Var 'alldiff_box_00001' direct represents '0' with '-1235'
c Var 'alldiff_box_00001' direct represents '1' with '1235'
c Var 'alldiff_box_00001' order represents '1' with '1'
c Var 'alldiff_box_00001' order represents '0' with '-1235'
c Encoding variable: alldiff_box_00002 with domain: bool (representing constraint )
c Var 'alldiff_box_00002' direct represents '0' with '-1236'
c Var 'alldiff_box_00002' direct represents '1' with '1236'
c Var 'alldiff_box_00002' order represents '1' with '1'
c Var 'alldiff_box_00002' order represents '0' with '-1236'
c Encoding variable: alldiff_box_00003 with domain: bool (representing constraint )
c Var 'alldiff_box_00003' direct represents '0' with '-1237'
c Var 'alldiff_box_00003' direct represents '1' with '1237'
c Var 'alldiff_box_00003' order represents '1' with '1'
c Var 'alldiff_box_00003' order represents '0' with '-1237'
c Encoding variable: alldiff_box_00004 with domain: bool (representing constraint )
c Var 'alldiff_box_00004' direct represents '0' with '-1238'
c Var 'alldiff_box_00004' direct represents '1' with '1238'
c Var 'alldiff_box_00004' order represents '1' with '1'
c Var 'alldiff_box_00004' order represents '0' with '-1238'
c Encoding variable: alldiff_box_00005 with domain: bool (representing constraint )
c Var 'alldiff_box_00005' direct represents '0' with '-1239'
c Var 'alldiff_box_00005' direct represents '1' with '1239'
c Var 'alldiff_box_00005' order represents '1' with '1'
c Var 'alldiff_box_00005' order represents '0' with '-1239'
c Encoding variable: alldiff_box_00006 with domain: bool (representing constraint )
c Var 'alldiff_box_00006' direct represents '0' with '-1240'
c Var 'alldiff_box_00006' direct represents '1' with '1240'
c Var 'alldiff_box_00006' order represents '1' with '1'
c Var 'alldiff_box_00006' order represents '0' with '-1240'
c Encoding variable: alldiff_box_00007 with domain: bool (representing constraint )
c Var 'alldiff_box_00007' direct represents '0' with '-1241'
c Var 'alldiff_box_00007' direct represents '1' with '1241'
c Var 'alldiff_box_00007' order represents '1' with '1'
c Var 'alldiff_box_00007' order represents '0' with '-1241'
c Encoding variable: alldiff_box_00008 with domain: bool (representing constraint )
c Var 'alldiff_box_00008' direct represents '0' with '-1242'
c Var 'alldiff_box_00008' direct represents '1' with '1242'
c Var 'alldiff_box_00008' order represents '1' with '1'
c Var 'alldiff_box_00008' order represents '0' with '-1242'
c Encoding variable: alldiff_box_00009 with domain: bool (representing constraint )
c Var 'alldiff_box_00009' direct represents '0' with '-1243'
c Var 'alldiff_box_00009' direct represents '1' with '1243'
c Var 'alldiff_box_00009' order represents '1' with '1'
c Var 'alldiff_box_00009' order represents '0' with '-1243'
c Encoding variable: alldiff_hint_00001 with domain: bool (representing constraint )
c Var 'alldiff_hint_00001' direct represents '0' with '-1244'
c Var 'alldiff_hint_00001' direct represents '1' with '1244'
c Var 'alldiff_hint_00001' order represents '1' with '1'
c Var 'alldiff_hint_00001' order represents '0' with '-1244'
c Encoding variable: alldiff_hint_00002 with domain: bool (representing constraint )
c Var 'alldiff_hint_00002' direct represents '0' with '-1245'
c Var 'alldiff_hint_00002' direct represents '1' with '1245'
c Var 'alldiff_hint_00002' order represents '1' with '1'
c Var 'alldiff_hint_00002' order represents '0' with '-1245'
c Encoding variable: alldiff_hint_00003 with domain: bool (representing constraint )
c Var 'alldiff_hint_00003' direct represents '0' with '-1246'
c Var 'alldiff_hint_00003' direct represents '1' with '1246'
c Var 'alldiff_hint_00003' order represents '1' with '1'
c Var 'alldiff_hint_00003' order represents '0' with '-1246'
c Encoding variable: alldiff_hint_00004 with domain: bool (representing constraint )
c Var 'alldiff_hint_00004' direct represents '0' with '-1247'
c Var 'alldiff_hint_00004' direct represents '1' with '1247'
c Var 'alldiff_hint_00004' order represents '1' with '1'
c Var 'alldiff_hint_00004' order represents '0' with '-1247'
c Encoding variable: alldiff_hint_00005 with domain: bool (representing constraint )
c Var 'alldiff_hint_00005' direct represents '0' with '-1248'
c Var 'alldiff_hint_00005' direct represents '1' with '1248'
c Var 'alldiff_hint_00005' order represents '1' with '1'
c Var 'alldiff_hint_00005' order represents '0' with '-1248'
c Encoding variable: alldiff_hint_00006 with domain: bool (representing constraint )
c Var 'alldiff_hint_00006' direct represents '0' with '-1249'
c Var 'alldiff_hint_00006' direct represents '1' with '1249'
c Var 'alldiff_hint_00006' order represents '1' with '1'
c Var 'alldiff_hint_00006' order represents '0' with '-1249'
c Encoding variable: alldiff_hint_00007 with domain: bool (representing constraint )
c Var 'alldiff_hint_00007' direct represents '0' with '-1250'
c Var 'alldiff_hint_00007' direct represents '1' with '1250'
c Var 'alldiff_hint_00007' order represents '1' with '1'
c Var 'alldiff_hint_00007' order represents '0' with '-1250'
c Encoding variable: alldiff_hint_00008 with domain: bool (representing constraint )
c Var 'alldiff_hint_00008' direct represents '0' with '-1251'
c Var 'alldiff_hint_00008' direct represents '1' with '1251'
c Var 'alldiff_hint_00008' order represents '1' with '1'
c Var 'alldiff_hint_00008' order represents '0' with '-1251'
c Encoding variable: alldiff_hint_00009 with domain: bool (representing constraint )
c Var 'alldiff_hint_00009' direct represents '0' with '-1252'
c Var 'alldiff_hint_00009' direct represents '1' with '1252'
c Var 'alldiff_hint_00009' order represents '1' with '1'
c Var 'alldiff_hint_00009' order represents '0' with '-1252'
c Encoding variable: alldiff_hint_00010 with domain: bool (representing constraint )
c Var 'alldiff_hint_00010' direct represents '0' with '-1253'
c Var 'alldiff_hint_00010' direct represents '1' with '1253'
c Var 'alldiff_hint_00010' order represents '1' with '1'
c Var 'alldiff_hint_00010' order represents '0' with '-1253'
c Encoding variable: alldiff_hint_00011 with domain: bool (representing constraint )
c Var 'alldiff_hint_00011' direct represents '0' with '-1254'
c Var 'alldiff_hint_00011' direct represents '1' with '1254'
c Var 'alldiff_hint_00011' order represents '1' with '1'
c Var 'alldiff_hint_00011' order represents '0' with '-1254'
c Encoding variable: alldiff_hint_00012 with domain: bool (representing constraint )
c Var 'alldiff_hint_00012' direct represents '0' with '-1255'
c Var 'alldiff_hint_00012' direct represents '1' with '1255'
c Var 'alldiff_hint_00012' order represents '1' with '1'
c Var 'alldiff_hint_00012' order represents '0' with '-1255'
c Encoding variable: alldiff_hint_00013 with domain: bool (representing constraint )
c Var 'alldiff_hint_00013' direct represents '0' with '-1256'
c Var 'alldiff_hint_00013' direct represents '1' with '1256'
c Var 'alldiff_hint_00013' order represents '1' with '1'
c Var 'alldiff_hint_00013' order represents '0' with '-1256'
c Encoding variable: alldiff_hint_00014 with domain: bool (representing constraint )
c Var 'alldiff_hint_00014' direct represents '0' with '-1257'
c Var 'alldiff_hint_00014' direct represents '1' with '1257'
c Var 'alldiff_hint_00014' order represents '1' with '1'
c Var 'alldiff_hint_00014' order represents '0' with '-1257'
c Encoding variable: alldiff_hint_00015 with domain: bool (representing constraint )
c Var 'alldiff_hint_00015' direct represents '0' with '-1258'
c Var 'alldiff_hint_00015' direct represents '1' with '1258'
c Var 'alldiff_hint_00015' order represents '1' with '1'
c Var 'alldiff_hint_00015' order represents '0' with '-1258'
c Encoding variable: alldiff_hint_00016 with domain: bool (representing constraint )
c Var 'alldiff_hint_00016' direct represents '0' with '-1259'
c Var 'alldiff_hint_00016' direct represents '1' with '1259'
c Var 'alldiff_hint_00016' order represents '1' with '1'
c Var 'alldiff_hint_00016' order represents '0' with '-1259'
c Encoding variable: alldiff_hint_00017 with domain: bool (representing constraint )
c Var 'alldiff_hint_00017' direct represents '0' with '-1260'
c Var 'alldiff_hint_00017' direct represents '1' with '1260'
c Var 'alldiff_hint_00017' order represents '1' with '1'
c Var 'alldiff_hint_00017' order represents '0' with '-1260'
c Encoding variable: alldiff_hint_00018 with domain: bool (representing constraint )
c Var 'alldiff_hint_00018' direct represents '0' with '-1261'
c Var 'alldiff_hint_00018' direct represents '1' with '1261'
c Var 'alldiff_hint_00018' order represents '1' with '1'
c Var 'alldiff_hint_00018' order represents '0' with '-1261'
c Encoding variable: alldiff_hint_00019 with domain: bool (representing constraint )
c Var 'alldiff_hint_00019' direct represents '0' with '-1262'
c Var 'alldiff_hint_00019' direct represents '1' with '1262'
c Var 'alldiff_hint_00019' order represents '1' with '1'
c Var 'alldiff_hint_00019' order represents '0' with '-1262'
c Encoding variable: alldiff_hint_00020 with domain: bool (representing constraint )
c Var 'alldiff_hint_00020' direct represents '0' with '-1263'
c Var 'alldiff_hint_00020' direct represents '1' with '1263'
c Var 'alldiff_hint_00020' order represents '1' with '1'
c Var 'alldiff_hint_00020' order represents '0' with '-1263'
c Encoding variable: alldiff_hint_00021 with domain: bool (representing constraint )
c Var 'alldiff_hint_00021' direct represents '0' with '-1264'
c Var 'alldiff_hint_00021' direct represents '1' with '1264'
c Var 'alldiff_hint_00021' order represents '1' with '1'
c Var 'alldiff_hint_00021' order represents '0' with '-1264'
c Encoding variable: alldiff_hint_00022 with domain: bool (representing constraint )
c Var 'alldiff_hint_00022' direct represents '0' with '-1265'
c Var 'alldiff_hint_00022' direct represents '1' with '1265'
c Var 'alldiff_hint_00022' order represents '1' with '1'
c Var 'alldiff_hint_00022' order represents '0' with '-1265'
c Encoding variable: alldiff_hint_00023 with domain: bool (representing constraint )
c Var 'alldiff_hint_00023' direct represents '0' with '-1266'
c Var 'alldiff_hint_00023' direct represents '1' with '1266'
c Var 'alldiff_hint_00023' order represents '1' with '1'
c Var 'alldiff_hint_00023' order represents '0' with '-1266'
c Encoding variable: alldiff_hint_00024 with domain: bool (representing constraint )
c Var 'alldiff_hint_00024' direct represents '0' with '-1267'
c Var 'alldiff_hint_00024' direct represents '1' with '1267'
c Var 'alldiff_hint_00024' order represents '1' with '1'
c Var 'alldiff_hint_00024' order represents '0' with '-1267'
c Encoding variable: sum_hint_00001 with domain: bool (representing constraint )
c Var 'sum_hint_00001' direct represents '0' with '-1268'
c Var 'sum_hint_00001' direct represents '1' with '1268'
c Var 'sum_hint_00001' order represents '1' with '1'
c Var 'sum_hint_00001' order represents '0' with '-1268'
c Encoding variable: sum_hint_00002 with domain: bool (representing constraint )
c Var 'sum_hint_00002' direct represents '0' with '-1269'
c Var 'sum_hint_00002' direct represents '1' with '1269'
c Var 'sum_hint_00002' order represents '1' with '1'
c Var 'sum_hint_00002' order represents '0' with '-1269'
c Encoding variable: sum_hint_00003 with domain: bool (representing constraint )
c Var 'sum_hint_00003' direct represents '0' with '-1270'
c Var 'sum_hint_00003' direct represents '1' with '1270'
c Var 'sum_hint_00003' order represents '1' with '1'
c Var 'sum_hint_00003' order represents '0' with '-1270'
c Encoding variable: sum_hint_00004 with domain: bool (representing constraint )
c Var 'sum_hint_00004' direct represents '0' with '-1271'
c Var 'sum_hint_00004' direct represents '1' with '1271'
c Var 'sum_hint_00004' order represents '1' with '1'
c Var 'sum_hint_00004' order represents '0' with '-1271'
c Encoding variable: sum_hint_00005 with domain: bool (representing constraint )
c Var 'sum_hint_00005' direct represents '0' with '-1272'
c Var 'sum_hint_00005' direct represents '1' with '1272'
c Var 'sum_hint_00005' order represents '1' with '1'
c Var 'sum_hint_00005' order represents '0' with '-1272'
c Encoding variable: sum_hint_00006 with domain: bool (representing constraint )
c Var 'sum_hint_00006' direct represents '0' with '-1273'
c Var 'sum_hint_00006' direct represents '1' with '1273'
c Var 'sum_hint_00006' order represents '1' with '1'
c Var 'sum_hint_00006' order represents '0' with '-1273'
c Encoding variable: sum_hint_00007 with domain: bool (representing constraint )
c Var 'sum_hint_00007' direct represents '0' with '-1274'
c Var 'sum_hint_00007' direct represents '1' with '1274'
c Var 'sum_hint_00007' order represents '1' with '1'
c Var 'sum_hint_00007' order represents '0' with '-1274'
c Encoding variable: sum_hint_00008 with domain: bool (representing constraint )
c Var 'sum_hint_00008' direct represents '0' with '-1275'
c Var 'sum_hint_00008' direct represents '1' with '1275'
c Var 'sum_hint_00008' order represents '1' with '1'
c Var 'sum_hint_00008' order represents '0' with '-1275'
c Encoding variable: sum_hint_00009 with domain: bool (representing constraint )
c Var 'sum_hint_00009' direct represents '0' with '-1276'
c Var 'sum_hint_00009' direct represents '1' with '1276'
c Var 'sum_hint_00009' order represents '1' with '1'
c Var 'sum_hint_00009' order represents '0' with '-1276'
c Encoding variable: sum_hint_00010 with domain: bool (representing constraint )
c Var 'sum_hint_00010' direct represents '0' with '-1277'
c Var 'sum_hint_00010' direct represents '1' with '1277'
c Var 'sum_hint_00010' order represents '1' with '1'
c Var 'sum_hint_00010' order represents '0' with '-1277'
c Encoding variable: sum_hint_00011 with domain: bool (representing constraint )
c Var 'sum_hint_00011' direct represents '0' with '-1278'
c Var 'sum_hint_00011' direct represents '1' with '1278'
c Var 'sum_hint_00011' order represents '1' with '1'
c Var 'sum_hint_00011' order represents '0' with '-1278'
c Encoding variable: sum_hint_00012 with domain: bool (representing constraint )
c Var 'sum_hint_00012' direct represents '0' with '-1279'
c Var 'sum_hint_00012' direct represents '1' with '1279'
c Var 'sum_hint_00012' order represents '1' with '1'
c Var 'sum_hint_00012' order represents '0' with '-1279'
c Encoding variable: sum_hint_00013 with domain: bool (representing constraint )
c Var 'sum_hint_00013' direct represents '0' with '-1280'
c Var 'sum_hint_00013' direct represents '1' with '1280'
c Var 'sum_hint_00013' order represents '1' with '1'
c Var 'sum_hint_00013' order represents '0' with '-1280'
c Encoding variable: sum_hint_00014 with domain: bool (representing constraint )
c Var 'sum_hint_00014' direct represents '0' with '-1281'
c Var 'sum_hint_00014' direct represents '1' with '1281'
c Var 'sum_hint_00014' order represents '1' with '1'
c Var 'sum_hint_00014' order represents '0' with '-1281'
c Encoding variable: sum_hint_00015 with domain: bool (representing constraint )
c Var 'sum_hint_00015' direct represents '0' with '-1282'
c Var 'sum_hint_00015' direct represents '1' with '1282'
c Var 'sum_hint_00015' order represents '1' with '1'
c Var 'sum_hint_00015' order represents '0' with '-1282'
c Encoding variable: sum_hint_00016 with domain: bool (representing constraint )
c Var 'sum_hint_00016' direct represents '0' with '-1283'
c Var 'sum_hint_00016' direct represents '1' with '1283'
c Var 'sum_hint_00016' order represents '1' with '1'
c Var 'sum_hint_00016' order represents '0' with '-1283'
c Encoding variable: sum_hint_00017 with domain: bool (representing constraint )
c Var 'sum_hint_00017' direct represents '0' with '-1284'
c Var 'sum_hint_00017' direct represents '1' with '1284'
c Var 'sum_hint_00017' order represents '1' with '1'
c Var 'sum_hint_00017' order represents '0' with '-1284'
c Encoding variable: sum_hint_00018 with domain: bool (representing constraint )
c Var 'sum_hint_00018' direct represents '0' with '-1285'
c Var 'sum_hint_00018' direct represents '1' with '1285'
c Var 'sum_hint_00018' order represents '1' with '1'
c Var 'sum_hint_00018' order represents '0' with '-1285'
c Encoding variable: sum_hint_00019 with domain: bool (representing constraint )
c Var 'sum_hint_00019' direct represents '0' with '-1286'
c Var 'sum_hint_00019' direct represents '1' with '1286'
c Var 'sum_hint_00019' order represents '1' with '1'
c Var 'sum_hint_00019' order represents '0' with '-1286'
c Encoding variable: sum_hint_00020 with domain: bool (representing constraint )
c Var 'sum_hint_00020' direct represents '0' with '-1287'
c Var 'sum_hint_00020' direct represents '1' with '1287'
c Var 'sum_hint_00020' order represents '1' with '1'
c Var 'sum_hint_00020' order represents '0' with '-1287'
c Encoding variable: sum_hint_00021 with domain: bool (representing constraint )
c Var 'sum_hint_00021' direct represents '0' with '-1288'
c Var 'sum_hint_00021' direct represents '1' with '1288'
c Var 'sum_hint_00021' order represents '1' with '1'
c Var 'sum_hint_00021' order represents '0' with '-1288'
c Encoding variable: sum_hint_00022 with domain: bool (representing constraint )
c Var 'sum_hint_00022' direct represents '0' with '-1289'
c Var 'sum_hint_00022' direct represents '1' with '1289'
c Var 'sum_hint_00022' order represents '1' with '1'
c Var 'sum_hint_00022' order represents '0' with '-1289'
c Encoding variable: sum_hint_00023 with domain: bool (representing constraint )
c Var 'sum_hint_00023' direct represents '0' with '-1290'
c Var 'sum_hint_00023' direct represents '1' with '1290'
c Var 'sum_hint_00023' order represents '1' with '1'
c Var 'sum_hint_00023' order represents '0' with '-1290'
c Encoding variable: sum_hint_00024 with domain: bool (representing constraint )
c Var 'sum_hint_00024' direct represents '0' with '-1291'
c Var 'sum_hint_00024' direct represents '1' with '1291'
c Var 'sum_hint_00024' order represents '1' with '1'
c Var 'sum_hint_00024' order represents '0' with '-1291'
c Encoding variable: aux0 with domain: bool (representing constraint ((x_00002_00001 + x_00003_00001 + x_00001_00001 + x_00001_00002)=tv=20))
c Var 'aux0' direct represents '0' with '-1292'
c Var 'aux0' direct represents '1' with '1292'
c Var 'aux0' order represents '1' with '1'
c Var 'aux0' order represents '0' with '-1292'
c Encoding variable: aux1 with domain: bool (representing constraint ((x_00001_00003 + x_00001_00004)=tv=9))
c Var 'aux1' direct represents '0' with '-1293'
c Var 'aux1' direct represents '1' with '1293'
c Var 'aux1' order represents '1' with '1'
c Var 'aux1' order represents '0' with '-1293'
c Encoding variable: aux2 with domain: bool (representing constraint ((x_00001_00005 + x_00001_00006)=tv=13))
c Var 'aux2' direct represents '0' with '-1294'
c Var 'aux2' direct represents '1' with '1294'
c Var 'aux2' order represents '1' with '1'
c Var 'aux2' order represents '0' with '-1294'
c Encoding variable: aux3 with domain: bool (representing constraint ((x_00002_00007 + x_00002_00008 + x_00002_00009 + x_00003_00008 + x_00003_00009 + x_00001_00007 + x_00001_00008 + x_00001_00009)=tv=38))
c Var 'aux3' direct represents '0' with '-1295'
c Var 'aux3' direct represents '1' with '1295'
c Var 'aux3' order represents '1' with '1'
c Var 'aux3' order represents '0' with '-1295'
c Encoding variable: aux4 with domain: bool (representing constraint ((x_00002_00002 + x_00003_00002)=tv=8))
c Var 'aux4' direct represents '0' with '-1296'
c Var 'aux4' direct represents '1' with '1296'
c Var 'aux4' order represents '1' with '1'
c Var 'aux4' order represents '0' with '-1296'
c Encoding variable: aux5 with domain: bool (representing constraint ((x_00002_00003 + x_00002_00004 + x_00003_00003 + x_00003_00004 + x_00004_00004)=tv=30))
c Var 'aux5' direct represents '0' with '-1297'
c Var 'aux5' direct represents '1' with '1297'
c Var 'aux5' order represents '1' with '1'
c Var 'aux5' order represents '0' with '-1297'
c Encoding variable: aux6 with domain: bool (representing constraint ((x_00002_00005 + x_00002_00006)=tv=11))
c Var 'aux6' direct represents '0' with '-1298'
c Var 'aux6' direct represents '1' with '1298'
c Var 'aux6' order represents '1' with '1'
c Var 'aux6' order represents '0' with '-1298'
c Encoding variable: aux7 with domain: bool (representing constraint ((x_00003_00005 + x_00004_00005 + x_00004_00006 + x_00005_00006 + x_00005_00007)=tv=20))
c Var 'aux7' direct represents '0' with '-1299'
c Var 'aux7' direct represents '1' with '1299'
c Var 'aux7' order represents '1' with '1'
c Var 'aux7' order represents '0' with '-1299'
c Encoding variable: aux8 with domain: bool (representing constraint ((x_00003_00006 + x_00003_00007 + x_00004_00007)=tv=11))
c Var 'aux8' direct represents '0' with '-1300'
c Var 'aux8' direct represents '1' with '1300'
c Var 'aux8' order represents '1' with '1'
c Var 'aux8' order represents '0' with '-1300'
c Encoding variable: aux9 with domain: bool (representing constraint ((x_00004_00001 + x_00004_00002 + x_00004_00003 + x_00005_00001)=tv=25))
c Var 'aux9' direct represents '0' with '-1301'
c Var 'aux9' direct represents '1' with '1301'
c Var 'aux9' order represents '1' with '1'
c Var 'aux9' order represents '0' with '-1301'
c Encoding variable: aux10 with domain: bool (representing constraint ((x_00004_00008 + x_00005_00008)=tv=14))
c Var 'aux10' direct represents '0' with '-1302'
c Var 'aux10' direct represents '1' with '1302'
c Var 'aux10' order represents '1' with '1'
c Var 'aux10' order represents '0' with '-1302'
c Encoding variable: aux11 with domain: bool (representing constraint ((x_00004_00009 + x_00005_00009)=tv=11))
c Var 'aux11' direct represents '0' with '-1303'
c Var 'aux11' direct represents '1' with '1303'
c Var 'aux11' order represents '1' with '1'
c Var 'aux11' order represents '0' with '-1303'
c Encoding variable: aux12 with domain: bool (representing constraint ((x_00005_00002 + x_00006_00002)=tv=10))
c Var 'aux12' direct represents '0' with '-1304'
c Var 'aux12' direct represents '1' with '1304'
c Var 'aux12' order represents '1' with '1'
c Var 'aux12' order represents '0' with '-1304'
c Encoding variable: aux13 with domain: bool (representing constraint ((x_00007_00005 + x_00005_00003 + x_00005_00004 + x_00005_00005 + x_00006_00005)=tv=24))
c Var 'aux13' direct represents '0' with '-1305'
c Var 'aux13' direct represents '1' with '1305'
c Var 'aux13' order represents '1' with '1'
c Var 'aux13' order represents '0' with '-1305'
c Encoding variable: aux14 with domain: bool (representing constraint ((x_00007_00001 + x_00006_00001)=tv=6))
c Var 'aux14' direct represents '0' with '-1306'
c Var 'aux14' direct represents '1' with '1306'
c Var 'aux14' order represents '1' with '1'
c Var 'aux14' order represents '0' with '-1306'
c Encoding variable: aux15 with domain: bool (representing constraint ((x_00007_00003 + x_00007_00004 + x_00006_00003 + x_00006_00004)=tv=14))
c Var 'aux15' direct represents '0' with '-1307'
c Var 'aux15' direct represents '1' with '1307'
c Var 'aux15' order represents '1' with '1'
c Var 'aux15' order represents '0' with '-1307'
c Encoding variable: aux16 with domain: bool (representing constraint ((x_00007_00007 + x_00007_00008 + x_00006_00006 + x_00006_00007 + x_00006_00008)=tv=32))
c Var 'aux16' direct represents '0' with '-1308'
c Var 'aux16' direct represents '1' with '1308'
c Var 'aux16' order represents '1' with '1'
c Var 'aux16' order represents '0' with '-1308'
c Encoding variable: aux17 with domain: bool (representing constraint ((x_00007_00009 + x_00006_00009)=tv=10))
c Var 'aux17' direct represents '0' with '-1309'
c Var 'aux17' direct represents '1' with '1309'
c Var 'aux17' order represents '1' with '1'
c Var 'aux17' order represents '0' with '-1309'
c Encoding variable: aux18 with domain: bool (representing constraint ((x_00007_00002 + x_00008_00001 + x_00008_00002 + x_00008_00003 + x_00009_00001 + x_00009_00002)=tv=33))
c Var 'aux18' direct represents '0' with '-1310'
c Var 'aux18' direct represents '1' with '1310'
c Var 'aux18' order represents '1' with '1'
c Var 'aux18' order represents '0' with '-1310'
c Encoding variable: aux19 with domain: bool (representing constraint ((x_00007_00006 + x_00008_00006 + x_00009_00005 + x_00009_00006)=tv=15))
c Var 'aux19' direct represents '0' with '-1311'
c Var 'aux19' direct represents '1' with '1311'
c Var 'aux19' order represents '1' with '1'
c Var 'aux19' order represents '0' with '-1311'
c Encoding variable: aux20 with domain: bool (representing constraint ((x_00008_00004 + x_00008_00005)=tv=9))
c Var 'aux20' direct represents '0' with '-1312'
c Var 'aux20' direct represents '1' with '1312'
c Var 'aux20' order represents '1' with '1'
c Var 'aux20' order represents '0' with '-1312'
c Encoding variable: aux21 with domain: bool (representing constraint ((x_00008_00007 + x_00008_00008)=tv=12))
c Var 'aux21' direct represents '0' with '-1313'
c Var 'aux21' direct represents '1' with '1313'
c Var 'aux21' order represents '1' with '1'
c Var 'aux21' order represents '0' with '-1313'
c Encoding variable: aux22 with domain: bool (representing constraint ((x_00008_00009 + x_00009_00007 + x_00009_00008 + x_00009_00009)=tv=13))
c Var 'aux22' direct represents '0' with '-1314'
c Var 'aux22' direct represents '1' with '1314'
c Var 'aux22' order represents '1' with '1'
c Var 'aux22' order represents '0' with '-1314'
c Encoding variable: aux23 with domain: bool (representing constraint ((x_00009_00003 + x_00009_00004)=tv=17))
c Var 'aux23' direct represents '0' with '-1315'
c Var 'aux23' direct represents '1' with '1315'
c Var 'aux23' order represents '1' with '1'
c Var 'aux23' order represents '0' with '-1315'
c Encoding variable: aux24 with domain: bool (representing constraint (x_00001_00003 != x_00001_00004))
c Var 'aux24' direct represents '0' with '-1316'
c Var 'aux24' direct represents '1' with '1316'
c Var 'aux24' order represents '1' with '1'
c Var 'aux24' order represents '0' with '-1316'
c Encoding variable: aux25 with domain: bool (representing constraint (x_00001_00005 != x_00001_00006))
c Var 'aux25' direct represents '0' with '-1317'
c Var 'aux25' direct represents '1' with '1317'
c Var 'aux25' order represents '1' with '1'
c Var 'aux25' order represents '0' with '-1317'
c Encoding variable: aux26 with domain: bool (representing constraint (x_00002_00002 != x_00003_00002))
c Var 'aux26' direct represents '0' with '-1318'
c Var 'aux26' direct represents '1' with '1318'
c Var 'aux26' order represents '1' with '1'
c Var 'aux26' order represents '0' with '-1318'
c Encoding variable: aux27 with domain: bool (representing constraint (x_00002_00005 != x_00002_00006))
c Var 'aux27' direct represents '0' with '-1319'
c Var 'aux27' direct represents '1' with '1319'
c Var 'aux27' order represents '1' with '1'
c Var 'aux27' order represents '0' with '-1319'
c Encoding variable: aux28 with domain: bool (representing constraint (x_00004_00008 != x_00005_00008))
c Var 'aux28' direct represents '0' with '-1320'
c Var 'aux28' direct represents '1' with '1320'
c Var 'aux28' order represents '1' with '1'
c Var 'aux28' order represents '0' with '-1320'
c Encoding variable: aux29 with domain: bool (representing constraint (x_00004_00009 != x_00005_00009))
c Var 'aux29' direct represents '0' with '-1321'
c Var 'aux29' direct represents '1' with '1321'
c Var 'aux29' order represents '1' with '1'
c Var 'aux29' order represents '0' with '-1321'
c Encoding variable: aux30 with domain: bool (representing constraint (x_00005_00002 != x_00006_00002))
c Var 'aux30' direct represents '0' with '-1322'
c Var 'aux30' direct represents '1' with '1322'
c Var 'aux30' order represents '1' with '1'
c Var 'aux30' order represents '0' with '-1322'
c Encoding variable: aux31 with domain: bool (representing constraint (x_00007_00001 != x_00006_00001))
c Var 'aux31' direct represents '0' with '-1323'
c Var 'aux31' direct represents '1' with '1323'
c Var 'aux31' order represents '1' with '1'
c Var 'aux31' order represents '0' with '-1323'
c Encoding variable: aux32 with domain: bool (representing constraint (x_00007_00009 != x_00006_00009))
c Var 'aux32' direct represents '0' with '-1324'
c Var 'aux32' direct represents '1' with '1324'
c Var 'aux32' order represents '1' with '1'
c Var 'aux32' order represents '0' with '-1324'
c Encoding variable: aux33 with domain: bool (representing constraint (x_00008_00004 != x_00008_00005))
c Var 'aux33' direct represents '0' with '-1325'
c Var 'aux33' direct represents '1' with '1325'
c Var 'aux33' order represents '1' with '1'
c Var 'aux33' order represents '0' with '-1325'
c Encoding variable: aux34 with domain: bool (representing constraint (x_00008_00007 != x_00008_00008))
c Var 'aux34' direct represents '0' with '-1326'
c Var 'aux34' direct represents '1' with '1326'
c Var 'aux34' order represents '1' with '1'
c Var 'aux34' order represents '0' with '-1326'
c Encoding variable: aux35 with domain: bool (representing constraint (x_00009_00003 != x_00009_00004))
c Var 'aux35' direct represents '0' with '-1327'
c Var 'aux35' direct represents '1' with '1327'
c Var 'aux35' order represents '1' with '1'
c Var 'aux35' order represents '0' with '-1327'
c Encoding variable: aux36 with domain: bool (representing constraint (((x_00003_00001=1) + (x_00008_00001=1) + (x_00001_00001=1) + (x_00006_00001=1) + (x_00004_00001=1) + (x_00009_00001=1) + (x_00002_00001=1) + (x_00007_00001=1) + (x_00005_00001=1))=tv=1))
c Var 'aux36' direct represents '0' with '-1328'
c Var 'aux36' direct represents '1' with '1328'
c Var 'aux36' order represents '1' with '1'
c Var 'aux36' order represents '0' with '-1328'
c Encoding variable: aux37 with domain: bool (representing constraint (((x_00003_00001=2) + (x_00008_00001=2) + (x_00001_00001=2) + (x_00006_00001=2) + (x_00004_00001=2) + (x_00009_00001=2) + (x_00002_00001=2) + (x_00007_00001=2) + (x_00005_00001=2))=tv=1))
c Var 'aux37' direct represents '0' with '-1329'
c Var 'aux37' direct represents '1' with '1329'
c Var 'aux37' order represents '1' with '1'
c Var 'aux37' order represents '0' with '-1329'
c Encoding variable: aux38 with domain: bool (representing constraint (((x_00003_00001=3) + (x_00008_00001=3) + (x_00001_00001=3) + (x_00006_00001=3) + (x_00004_00001=3) + (x_00009_00001=3) + (x_00002_00001=3) + (x_00007_00001=3) + (x_00005_00001=3))=tv=1))
c Var 'aux38' direct represents '0' with '-1330'
c Var 'aux38' direct represents '1' with '1330'
c Var 'aux38' order represents '1' with '1'
c Var 'aux38' order represents '0' with '-1330'
c Encoding variable: aux39 with domain: bool (representing constraint (((x_00003_00001=4) + (x_00008_00001=4) + (x_00001_00001=4) + (x_00006_00001=4) + (x_00004_00001=4) + (x_00009_00001=4) + (x_00002_00001=4) + (x_00007_00001=4) + (x_00005_00001=4))=tv=1))
c Var 'aux39' direct represents '0' with '-1331'
c Var 'aux39' direct represents '1' with '1331'
c Var 'aux39' order represents '1' with '1'
c Var 'aux39' order represents '0' with '-1331'
c Encoding variable: aux40 with domain: bool (representing constraint (((x_00003_00001=5) + (x_00008_00001=5) + (x_00001_00001=5) + (x_00006_00001=5) + (x_00004_00001=5) + (x_00009_00001=5) + (x_00002_00001=5) + (x_00007_00001=5) + (x_00005_00001=5))=tv=1))
c Var 'aux40' direct represents '0' with '-1332'
c Var 'aux40' direct represents '1' with '1332'
c Var 'aux40' order represents '1' with '1'
c Var 'aux40' order represents '0' with '-1332'
c Encoding variable: aux41 with domain: bool (representing constraint (((x_00003_00001=6) + (x_00008_00001=6) + (x_00001_00001=6) + (x_00006_00001=6) + (x_00004_00001=6) + (x_00009_00001=6) + (x_00002_00001=6) + (x_00007_00001=6) + (x_00005_00001=6))=tv=1))
c Var 'aux41' direct represents '0' with '-1333'
c Var 'aux41' direct represents '1' with '1333'
c Var 'aux41' order represents '1' with '1'
c Var 'aux41' order represents '0' with '-1333'
c Encoding variable: aux42 with domain: bool (representing constraint (((x_00003_00001=7) + (x_00008_00001=7) + (x_00001_00001=7) + (x_00006_00001=7) + (x_00004_00001=7) + (x_00009_00001=7) + (x_00002_00001=7) + (x_00007_00001=7) + (x_00005_00001=7))=tv=1))
c Var 'aux42' direct represents '0' with '-1334'
c Var 'aux42' direct represents '1' with '1334'
c Var 'aux42' order represents '1' with '1'
c Var 'aux42' order represents '0' with '-1334'
c Encoding variable: aux43 with domain: bool (representing constraint (((x_00003_00001=8) + (x_00008_00001=8) + (x_00001_00001=8) + (x_00006_00001=8) + (x_00004_00001=8) + (x_00009_00001=8) + (x_00002_00001=8) + (x_00007_00001=8) + (x_00005_00001=8))=tv=1))
c Var 'aux43' direct represents '0' with '-1335'
c Var 'aux43' direct represents '1' with '1335'
c Var 'aux43' order represents '1' with '1'
c Var 'aux43' order represents '0' with '-1335'
c Encoding variable: aux44 with domain: bool (representing constraint (((x_00003_00001=9) + (x_00008_00001=9) + (x_00001_00001=9) + (x_00006_00001=9) + (x_00004_00001=9) + (x_00009_00001=9) + (x_00002_00001=9) + (x_00007_00001=9) + (x_00005_00001=9))=tv=1))
c Var 'aux44' direct represents '0' with '-1336'
c Var 'aux44' direct represents '1' with '1336'
c Var 'aux44' order represents '1' with '1'
c Var 'aux44' order represents '0' with '-1336'
c Encoding variable: aux45 with domain: bool (representing constraint (((x_00003_00002=1) + (x_00008_00002=1) + (x_00001_00002=1) + (x_00006_00002=1) + (x_00004_00002=1) + (x_00009_00002=1) + (x_00002_00002=1) + (x_00007_00002=1) + (x_00005_00002=1))=tv=1))
c Var 'aux45' direct represents '0' with '-1337'
c Var 'aux45' direct represents '1' with '1337'
c Var 'aux45' order represents '1' with '1'
c Var 'aux45' order represents '0' with '-1337'
c Encoding variable: aux46 with domain: bool (representing constraint (((x_00003_00002=2) + (x_00008_00002=2) + (x_00001_00002=2) + (x_00006_00002=2) + (x_00004_00002=2) + (x_00009_00002=2) + (x_00002_00002=2) + (x_00007_00002=2) + (x_00005_00002=2))=tv=1))
c Var 'aux46' direct represents '0' with '-1338'
c Var 'aux46' direct represents '1' with '1338'
c Var 'aux46' order represents '1' with '1'
c Var 'aux46' order represents '0' with '-1338'
c Encoding variable: aux47 with domain: bool (representing constraint (((x_00003_00002=3) + (x_00008_00002=3) + (x_00001_00002=3) + (x_00006_00002=3) + (x_00004_00002=3) + (x_00009_00002=3) + (x_00002_00002=3) + (x_00007_00002=3) + (x_00005_00002=3))=tv=1))
c Var 'aux47' direct represents '0' with '-1339'
c Var 'aux47' direct represents '1' with '1339'
c Var 'aux47' order represents '1' with '1'
c Var 'aux47' order represents '0' with '-1339'
c Encoding variable: aux48 with domain: bool (representing constraint (((x_00003_00002=4) + (x_00008_00002=4) + (x_00001_00002=4) + (x_00006_00002=4) + (x_00004_00002=4) + (x_00009_00002=4) + (x_00002_00002=4) + (x_00007_00002=4) + (x_00005_00002=4))=tv=1))
c Var 'aux48' direct represents '0' with '-1340'
c Var 'aux48' direct represents '1' with '1340'
c Var 'aux48' order represents '1' with '1'
c Var 'aux48' order represents '0' with '-1340'
c Encoding variable: aux49 with domain: bool (representing constraint (((x_00003_00002=5) + (x_00008_00002=5) + (x_00001_00002=5) + (x_00006_00002=5) + (x_00004_00002=5) + (x_00009_00002=5) + (x_00002_00002=5) + (x_00007_00002=5) + (x_00005_00002=5))=tv=1))
c Var 'aux49' direct represents '0' with '-1341'
c Var 'aux49' direct represents '1' with '1341'
c Var 'aux49' order represents '1' with '1'
c Var 'aux49' order represents '0' with '-1341'
c Encoding variable: aux50 with domain: bool (representing constraint (((x_00003_00002=6) + (x_00008_00002=6) + (x_00001_00002=6) + (x_00006_00002=6) + (x_00004_00002=6) + (x_00009_00002=6) + (x_00002_00002=6) + (x_00007_00002=6) + (x_00005_00002=6))=tv=1))
c Var 'aux50' direct represents '0' with '-1342'
c Var 'aux50' direct represents '1' with '1342'
c Var 'aux50' order represents '1' with '1'
c Var 'aux50' order represents '0' with '-1342'
c Encoding variable: aux51 with domain: bool (representing constraint (((x_00003_00002=7) + (x_00008_00002=7) + (x_00001_00002=7) + (x_00006_00002=7) + (x_00004_00002=7) + (x_00009_00002=7) + (x_00002_00002=7) + (x_00007_00002=7) + (x_00005_00002=7))=tv=1))
c Var 'aux51' direct represents '0' with '-1343'
c Var 'aux51' direct represents '1' with '1343'
c Var 'aux51' order represents '1' with '1'
c Var 'aux51' order represents '0' with '-1343'
c Encoding variable: aux52 with domain: bool (representing constraint (((x_00003_00002=8) + (x_00008_00002=8) + (x_00001_00002=8) + (x_00006_00002=8) + (x_00004_00002=8) + (x_00009_00002=8) + (x_00002_00002=8) + (x_00007_00002=8) + (x_00005_00002=8))=tv=1))
c Var 'aux52' direct represents '0' with '-1344'
c Var 'aux52' direct represents '1' with '1344'
c Var 'aux52' order represents '1' with '1'
c Var 'aux52' order represents '0' with '-1344'
c Encoding variable: aux53 with domain: bool (representing constraint (((x_00003_00002=9) + (x_00008_00002=9) + (x_00001_00002=9) + (x_00006_00002=9) + (x_00004_00002=9) + (x_00009_00002=9) + (x_00002_00002=9) + (x_00007_00002=9) + (x_00005_00002=9))=tv=1))
c Var 'aux53' direct represents '0' with '-1345'
c Var 'aux53' direct represents '1' with '1345'
c Var 'aux53' order represents '1' with '1'
c Var 'aux53' order represents '0' with '-1345'
c Encoding variable: aux54 with domain: bool (representing constraint (((x_00003_00003=1) + (x_00008_00003=1) + (x_00001_00003=1) + (x_00006_00003=1) + (x_00004_00003=1) + (x_00009_00003=1) + (x_00002_00003=1) + (x_00007_00003=1) + (x_00005_00003=1))=tv=1))
c Var 'aux54' direct represents '0' with '-1346'
c Var 'aux54' direct represents '1' with '1346'
c Var 'aux54' order represents '1' with '1'
c Var 'aux54' order represents '0' with '-1346'
c Encoding variable: aux55 with domain: bool (representing constraint (((x_00003_00003=2) + (x_00008_00003=2) + (x_00001_00003=2) + (x_00006_00003=2) + (x_00004_00003=2) + (x_00009_00003=2) + (x_00002_00003=2) + (x_00007_00003=2) + (x_00005_00003=2))=tv=1))
c Var 'aux55' direct represents '0' with '-1347'
c Var 'aux55' direct represents '1' with '1347'
c Var 'aux55' order represents '1' with '1'
c Var 'aux55' order represents '0' with '-1347'
c Encoding variable: aux56 with domain: bool (representing constraint (((x_00003_00003=3) + (x_00008_00003=3) + (x_00001_00003=3) + (x_00006_00003=3) + (x_00004_00003=3) + (x_00009_00003=3) + (x_00002_00003=3) + (x_00007_00003=3) + (x_00005_00003=3))=tv=1))
c Var 'aux56' direct represents '0' with '-1348'
c Var 'aux56' direct represents '1' with '1348'
c Var 'aux56' order represents '1' with '1'
c Var 'aux56' order represents '0' with '-1348'
c Encoding variable: aux57 with domain: bool (representing constraint (((x_00003_00003=4) + (x_00008_00003=4) + (x_00001_00003=4) + (x_00006_00003=4) + (x_00004_00003=4) + (x_00009_00003=4) + (x_00002_00003=4) + (x_00007_00003=4) + (x_00005_00003=4))=tv=1))
c Var 'aux57' direct represents '0' with '-1349'
c Var 'aux57' direct represents '1' with '1349'
c Var 'aux57' order represents '1' with '1'
c Var 'aux57' order represents '0' with '-1349'
c Encoding variable: aux58 with domain: bool (representing constraint (((x_00003_00003=5) + (x_00008_00003=5) + (x_00001_00003=5) + (x_00006_00003=5) + (x_00004_00003=5) + (x_00009_00003=5) + (x_00002_00003=5) + (x_00007_00003=5) + (x_00005_00003=5))=tv=1))
c Var 'aux58' direct represents '0' with '-1350'
c Var 'aux58' direct represents '1' with '1350'
c Var 'aux58' order represents '1' with '1'
c Var 'aux58' order represents '0' with '-1350'
c Encoding variable: aux59 with domain: bool (representing constraint (((x_00003_00003=6) + (x_00008_00003=6) + (x_00001_00003=6) + (x_00006_00003=6) + (x_00004_00003=6) + (x_00009_00003=6) + (x_00002_00003=6) + (x_00007_00003=6) + (x_00005_00003=6))=tv=1))
c Var 'aux59' direct represents '0' with '-1351'
c Var 'aux59' direct represents '1' with '1351'
c Var 'aux59' order represents '1' with '1'
c Var 'aux59' order represents '0' with '-1351'
c Encoding variable: aux60 with domain: bool (representing constraint (((x_00003_00003=7) + (x_00008_00003=7) + (x_00001_00003=7) + (x_00006_00003=7) + (x_00004_00003=7) + (x_00009_00003=7) + (x_00002_00003=7) + (x_00007_00003=7) + (x_00005_00003=7))=tv=1))
c Var 'aux60' direct represents '0' with '-1352'
c Var 'aux60' direct represents '1' with '1352'
c Var 'aux60' order represents '1' with '1'
c Var 'aux60' order represents '0' with '-1352'
c Encoding variable: aux61 with domain: bool (representing constraint (((x_00003_00003=8) + (x_00008_00003=8) + (x_00001_00003=8) + (x_00006_00003=8) + (x_00004_00003=8) + (x_00009_00003=8) + (x_00002_00003=8) + (x_00007_00003=8) + (x_00005_00003=8))=tv=1))
c Var 'aux61' direct represents '0' with '-1353'
c Var 'aux61' direct represents '1' with '1353'
c Var 'aux61' order represents '1' with '1'
c Var 'aux61' order represents '0' with '-1353'
c Encoding variable: aux62 with domain: bool (representing constraint (((x_00003_00003=9) + (x_00008_00003=9) + (x_00001_00003=9) + (x_00006_00003=9) + (x_00004_00003=9) + (x_00009_00003=9) + (x_00002_00003=9) + (x_00007_00003=9) + (x_00005_00003=9))=tv=1))
c Var 'aux62' direct represents '0' with '-1354'
c Var 'aux62' direct represents '1' with '1354'
c Var 'aux62' order represents '1' with '1'
c Var 'aux62' order represents '0' with '-1354'
c Encoding variable: aux63 with domain: bool (representing constraint (((x_00003_00004=1) + (x_00008_00004=1) + (x_00001_00004=1) + (x_00006_00004=1) + (x_00004_00004=1) + (x_00009_00004=1) + (x_00002_00004=1) + (x_00007_00004=1) + (x_00005_00004=1))=tv=1))
c Var 'aux63' direct represents '0' with '-1355'
c Var 'aux63' direct represents '1' with '1355'
c Var 'aux63' order represents '1' with '1'
c Var 'aux63' order represents '0' with '-1355'
c Encoding variable: aux64 with domain: bool (representing constraint (((x_00003_00004=2) + (x_00008_00004=2) + (x_00001_00004=2) + (x_00006_00004=2) + (x_00004_00004=2) + (x_00009_00004=2) + (x_00002_00004=2) + (x_00007_00004=2) + (x_00005_00004=2))=tv=1))
c Var 'aux64' direct represents '0' with '-1356'
c Var 'aux64' direct represents '1' with '1356'
c Var 'aux64' order represents '1' with '1'
c Var 'aux64' order represents '0' with '-1356'
c Encoding variable: aux65 with domain: bool (representing constraint (((x_00003_00004=3) + (x_00008_00004=3) + (x_00001_00004=3) + (x_00006_00004=3) + (x_00004_00004=3) + (x_00009_00004=3) + (x_00002_00004=3) + (x_00007_00004=3) + (x_00005_00004=3))=tv=1))
c Var 'aux65' direct represents '0' with '-1357'
c Var 'aux65' direct represents '1' with '1357'
c Var 'aux65' order represents '1' with '1'
c Var 'aux65' order represents '0' with '-1357'
c Encoding variable: aux66 with domain: bool (representing constraint (((x_00003_00004=4) + (x_00008_00004=4) + (x_00001_00004=4) + (x_00006_00004=4) + (x_00004_00004=4) + (x_00009_00004=4) + (x_00002_00004=4) + (x_00007_00004=4) + (x_00005_00004=4))=tv=1))
c Var 'aux66' direct represents '0' with '-1358'
c Var 'aux66' direct represents '1' with '1358'
c Var 'aux66' order represents '1' with '1'
c Var 'aux66' order represents '0' with '-1358'
c Encoding variable: aux67 with domain: bool (representing constraint (((x_00003_00004=5) + (x_00008_00004=5) + (x_00001_00004=5) + (x_00006_00004=5) + (x_00004_00004=5) + (x_00009_00004=5) + (x_00002_00004=5) + (x_00007_00004=5) + (x_00005_00004=5))=tv=1))
c Var 'aux67' direct represents '0' with '-1359'
c Var 'aux67' direct represents '1' with '1359'
c Var 'aux67' order represents '1' with '1'
c Var 'aux67' order represents '0' with '-1359'
c Encoding variable: aux68 with domain: bool (representing constraint (((x_00003_00004=6) + (x_00008_00004=6) + (x_00001_00004=6) + (x_00006_00004=6) + (x_00004_00004=6) + (x_00009_00004=6) + (x_00002_00004=6) + (x_00007_00004=6) + (x_00005_00004=6))=tv=1))
c Var 'aux68' direct represents '0' with '-1360'
c Var 'aux68' direct represents '1' with '1360'
c Var 'aux68' order represents '1' with '1'
c Var 'aux68' order represents '0' with '-1360'
c Encoding variable: aux69 with domain: bool (representing constraint (((x_00003_00004=7) + (x_00008_00004=7) + (x_00001_00004=7) + (x_00006_00004=7) + (x_00004_00004=7) + (x_00009_00004=7) + (x_00002_00004=7) + (x_00007_00004=7) + (x_00005_00004=7))=tv=1))
c Var 'aux69' direct represents '0' with '-1361'
c Var 'aux69' direct represents '1' with '1361'
c Var 'aux69' order represents '1' with '1'
c Var 'aux69' order represents '0' with '-1361'
c Encoding variable: aux70 with domain: bool (representing constraint (((x_00003_00004=8) + (x_00008_00004=8) + (x_00001_00004=8) + (x_00006_00004=8) + (x_00004_00004=8) + (x_00009_00004=8) + (x_00002_00004=8) + (x_00007_00004=8) + (x_00005_00004=8))=tv=1))
c Var 'aux70' direct represents '0' with '-1362'
c Var 'aux70' direct represents '1' with '1362'
c Var 'aux70' order represents '1' with '1'
c Var 'aux70' order represents '0' with '-1362'
c Encoding variable: aux71 with domain: bool (representing constraint (((x_00003_00004=9) + (x_00008_00004=9) + (x_00001_00004=9) + (x_00006_00004=9) + (x_00004_00004=9) + (x_00009_00004=9) + (x_00002_00004=9) + (x_00007_00004=9) + (x_00005_00004=9))=tv=1))
c Var 'aux71' direct represents '0' with '-1363'
c Var 'aux71' direct represents '1' with '1363'
c Var 'aux71' order represents '1' with '1'
c Var 'aux71' order represents '0' with '-1363'
c Encoding variable: aux72 with domain: bool (representing constraint (((x_00003_00005=1) + (x_00008_00005=1) + (x_00001_00005=1) + (x_00006_00005=1) + (x_00004_00005=1) + (x_00009_00005=1) + (x_00002_00005=1) + (x_00007_00005=1) + (x_00005_00005=1))=tv=1))
c Var 'aux72' direct represents '0' with '-1364'
c Var 'aux72' direct represents '1' with '1364'
c Var 'aux72' order represents '1' with '1'
c Var 'aux72' order represents '0' with '-1364'
c Encoding variable: aux73 with domain: bool (representing constraint (((x_00003_00005=2) + (x_00008_00005=2) + (x_00001_00005=2) + (x_00006_00005=2) + (x_00004_00005=2) + (x_00009_00005=2) + (x_00002_00005=2) + (x_00007_00005=2) + (x_00005_00005=2))=tv=1))
c Var 'aux73' direct represents '0' with '-1365'
c Var 'aux73' direct represents '1' with '1365'
c Var 'aux73' order represents '1' with '1'
c Var 'aux73' order represents '0' with '-1365'
c Encoding variable: aux74 with domain: bool (representing constraint (((x_00003_00005=3) + (x_00008_00005=3) + (x_00001_00005=3) + (x_00006_00005=3) + (x_00004_00005=3) + (x_00009_00005=3) + (x_00002_00005=3) + (x_00007_00005=3) + (x_00005_00005=3))=tv=1))
c Var 'aux74' direct represents '0' with '-1366'
c Var 'aux74' direct represents '1' with '1366'
c Var 'aux74' order represents '1' with '1'
c Var 'aux74' order represents '0' with '-1366'
c Encoding variable: aux75 with domain: bool (representing constraint (((x_00003_00005=4) + (x_00008_00005=4) + (x_00001_00005=4) + (x_00006_00005=4) + (x_00004_00005=4) + (x_00009_00005=4) + (x_00002_00005=4) + (x_00007_00005=4) + (x_00005_00005=4))=tv=1))
c Var 'aux75' direct represents '0' with '-1367'
c Var 'aux75' direct represents '1' with '1367'
c Var 'aux75' order represents '1' with '1'
c Var 'aux75' order represents '0' with '-1367'
c Encoding variable: aux76 with domain: bool (representing constraint (((x_00003_00005=5) + (x_00008_00005=5) + (x_00001_00005=5) + (x_00006_00005=5) + (x_00004_00005=5) + (x_00009_00005=5) + (x_00002_00005=5) + (x_00007_00005=5) + (x_00005_00005=5))=tv=1))
c Var 'aux76' direct represents '0' with '-1368'
c Var 'aux76' direct represents '1' with '1368'
c Var 'aux76' order represents '1' with '1'
c Var 'aux76' order represents '0' with '-1368'
c Encoding variable: aux77 with domain: bool (representing constraint (((x_00003_00005=6) + (x_00008_00005=6) + (x_00001_00005=6) + (x_00006_00005=6) + (x_00004_00005=6) + (x_00009_00005=6) + (x_00002_00005=6) + (x_00007_00005=6) + (x_00005_00005=6))=tv=1))
c Var 'aux77' direct represents '0' with '-1369'
c Var 'aux77' direct represents '1' with '1369'
c Var 'aux77' order represents '1' with '1'
c Var 'aux77' order represents '0' with '-1369'
c Encoding variable: aux78 with domain: bool (representing constraint (((x_00003_00005=7) + (x_00008_00005=7) + (x_00001_00005=7) + (x_00006_00005=7) + (x_00004_00005=7) + (x_00009_00005=7) + (x_00002_00005=7) + (x_00007_00005=7) + (x_00005_00005=7))=tv=1))
c Var 'aux78' direct represents '0' with '-1370'
c Var 'aux78' direct represents '1' with '1370'
c Var 'aux78' order represents '1' with '1'
c Var 'aux78' order represents '0' with '-1370'
c Encoding variable: aux79 with domain: bool (representing constraint (((x_00003_00005=8) + (x_00008_00005=8) + (x_00001_00005=8) + (x_00006_00005=8) + (x_00004_00005=8) + (x_00009_00005=8) + (x_00002_00005=8) + (x_00007_00005=8) + (x_00005_00005=8))=tv=1))
c Var 'aux79' direct represents '0' with '-1371'
c Var 'aux79' direct represents '1' with '1371'
c Var 'aux79' order represents '1' with '1'
c Var 'aux79' order represents '0' with '-1371'
c Encoding variable: aux80 with domain: bool (representing constraint (((x_00003_00005=9) + (x_00008_00005=9) + (x_00001_00005=9) + (x_00006_00005=9) + (x_00004_00005=9) + (x_00009_00005=9) + (x_00002_00005=9) + (x_00007_00005=9) + (x_00005_00005=9))=tv=1))
c Var 'aux80' direct represents '0' with '-1372'
c Var 'aux80' direct represents '1' with '1372'
c Var 'aux80' order represents '1' with '1'
c Var 'aux80' order represents '0' with '-1372'
c Encoding variable: aux81 with domain: bool (representing constraint (((x_00003_00006=1) + (x_00008_00006=1) + (x_00001_00006=1) + (x_00006_00006=1) + (x_00004_00006=1) + (x_00009_00006=1) + (x_00002_00006=1) + (x_00007_00006=1) + (x_00005_00006=1))=tv=1))
c Var 'aux81' direct represents '0' with '-1373'
c Var 'aux81' direct represents '1' with '1373'
c Var 'aux81' order represents '1' with '1'
c Var 'aux81' order represents '0' with '-1373'
c Encoding variable: aux82 with domain: bool (representing constraint (((x_00003_00006=2) + (x_00008_00006=2) + (x_00001_00006=2) + (x_00006_00006=2) + (x_00004_00006=2) + (x_00009_00006=2) + (x_00002_00006=2) + (x_00007_00006=2) + (x_00005_00006=2))=tv=1))
c Var 'aux82' direct represents '0' with '-1374'
c Var 'aux82' direct represents '1' with '1374'
c Var 'aux82' order represents '1' with '1'
c Var 'aux82' order represents '0' with '-1374'
c Encoding variable: aux83 with domain: bool (representing constraint (((x_00003_00006=3) + (x_00008_00006=3) + (x_00001_00006=3) + (x_00006_00006=3) + (x_00004_00006=3) + (x_00009_00006=3) + (x_00002_00006=3) + (x_00007_00006=3) + (x_00005_00006=3))=tv=1))
c Var 'aux83' direct represents '0' with '-1375'
c Var 'aux83' direct represents '1' with '1375'
c Var 'aux83' order represents '1' with '1'
c Var 'aux83' order represents '0' with '-1375'
c Encoding variable: aux84 with domain: bool (representing constraint (((x_00003_00006=4) + (x_00008_00006=4) + (x_00001_00006=4) + (x_00006_00006=4) + (x_00004_00006=4) + (x_00009_00006=4) + (x_00002_00006=4) + (x_00007_00006=4) + (x_00005_00006=4))=tv=1))
c Var 'aux84' direct represents '0' with '-1376'
c Var 'aux84' direct represents '1' with '1376'
c Var 'aux84' order represents '1' with '1'
c Var 'aux84' order represents '0' with '-1376'
c Encoding variable: aux85 with domain: bool (representing constraint (((x_00003_00006=5) + (x_00008_00006=5) + (x_00001_00006=5) + (x_00006_00006=5) + (x_00004_00006=5) + (x_00009_00006=5) + (x_00002_00006=5) + (x_00007_00006=5) + (x_00005_00006=5))=tv=1))
c Var 'aux85' direct represents '0' with '-1377'
c Var 'aux85' direct represents '1' with '1377'
c Var 'aux85' order represents '1' with '1'
c Var 'aux85' order represents '0' with '-1377'
c Encoding variable: aux86 with domain: bool (representing constraint (((x_00003_00006=6) + (x_00008_00006=6) + (x_00001_00006=6) + (x_00006_00006=6) + (x_00004_00006=6) + (x_00009_00006=6) + (x_00002_00006=6) + (x_00007_00006=6) + (x_00005_00006=6))=tv=1))
c Var 'aux86' direct represents '0' with '-1378'
c Var 'aux86' direct represents '1' with '1378'
c Var 'aux86' order represents '1' with '1'
c Var 'aux86' order represents '0' with '-1378'
c Encoding variable: aux87 with domain: bool (representing constraint (((x_00003_00006=7) + (x_00008_00006=7) + (x_00001_00006=7) + (x_00006_00006=7) + (x_00004_00006=7) + (x_00009_00006=7) + (x_00002_00006=7) + (x_00007_00006=7) + (x_00005_00006=7))=tv=1))
c Var 'aux87' direct represents '0' with '-1379'
c Var 'aux87' direct represents '1' with '1379'
c Var 'aux87' order represents '1' with '1'
c Var 'aux87' order represents '0' with '-1379'
c Encoding variable: aux88 with domain: bool (representing constraint (((x_00003_00006=8) + (x_00008_00006=8) + (x_00001_00006=8) + (x_00006_00006=8) + (x_00004_00006=8) + (x_00009_00006=8) + (x_00002_00006=8) + (x_00007_00006=8) + (x_00005_00006=8))=tv=1))
c Var 'aux88' direct represents '0' with '-1380'
c Var 'aux88' direct represents '1' with '1380'
c Var 'aux88' order represents '1' with '1'
c Var 'aux88' order represents '0' with '-1380'
c Encoding variable: aux89 with domain: bool (representing constraint (((x_00003_00006=9) + (x_00008_00006=9) + (x_00001_00006=9) + (x_00006_00006=9) + (x_00004_00006=9) + (x_00009_00006=9) + (x_00002_00006=9) + (x_00007_00006=9) + (x_00005_00006=9))=tv=1))
c Var 'aux89' direct represents '0' with '-1381'
c Var 'aux89' direct represents '1' with '1381'
c Var 'aux89' order represents '1' with '1'
c Var 'aux89' order represents '0' with '-1381'
c Encoding variable: aux90 with domain: bool (representing constraint (((x_00003_00007=1) + (x_00008_00007=1) + (x_00001_00007=1) + (x_00006_00007=1) + (x_00004_00007=1) + (x_00009_00007=1) + (x_00002_00007=1) + (x_00007_00007=1) + (x_00005_00007=1))=tv=1))
c Var 'aux90' direct represents '0' with '-1382'
c Var 'aux90' direct represents '1' with '1382'
c Var 'aux90' order represents '1' with '1'
c Var 'aux90' order represents '0' with '-1382'
c Encoding variable: aux91 with domain: bool (representing constraint (((x_00003_00007=2) + (x_00008_00007=2) + (x_00001_00007=2) + (x_00006_00007=2) + (x_00004_00007=2) + (x_00009_00007=2) + (x_00002_00007=2) + (x_00007_00007=2) + (x_00005_00007=2))=tv=1))
c Var 'aux91' direct represents '0' with '-1383'
c Var 'aux91' direct represents '1' with '1383'
c Var 'aux91' order represents '1' with '1'
c Var 'aux91' order represents '0' with '-1383'
c Encoding variable: aux92 with domain: bool (representing constraint (((x_00003_00007=3) + (x_00008_00007=3) + (x_00001_00007=3) + (x_00006_00007=3) + (x_00004_00007=3) + (x_00009_00007=3) + (x_00002_00007=3) + (x_00007_00007=3) + (x_00005_00007=3))=tv=1))
c Var 'aux92' direct represents '0' with '-1384'
c Var 'aux92' direct represents '1' with '1384'
c Var 'aux92' order represents '1' with '1'
c Var 'aux92' order represents '0' with '-1384'
c Encoding variable: aux93 with domain: bool (representing constraint (((x_00003_00007=4) + (x_00008_00007=4) + (x_00001_00007=4) + (x_00006_00007=4) + (x_00004_00007=4) + (x_00009_00007=4) + (x_00002_00007=4) + (x_00007_00007=4) + (x_00005_00007=4))=tv=1))
c Var 'aux93' direct represents '0' with '-1385'
c Var 'aux93' direct represents '1' with '1385'
c Var 'aux93' order represents '1' with '1'
c Var 'aux93' order represents '0' with '-1385'
c Encoding variable: aux94 with domain: bool (representing constraint (((x_00003_00007=5) + (x_00008_00007=5) + (x_00001_00007=5) + (x_00006_00007=5) + (x_00004_00007=5) + (x_00009_00007=5) + (x_00002_00007=5) + (x_00007_00007=5) + (x_00005_00007=5))=tv=1))
c Var 'aux94' direct represents '0' with '-1386'
c Var 'aux94' direct represents '1' with '1386'
c Var 'aux94' order represents '1' with '1'
c Var 'aux94' order represents '0' with '-1386'
c Encoding variable: aux95 with domain: bool (representing constraint (((x_00003_00007=6) + (x_00008_00007=6) + (x_00001_00007=6) + (x_00006_00007=6) + (x_00004_00007=6) + (x_00009_00007=6) + (x_00002_00007=6) + (x_00007_00007=6) + (x_00005_00007=6))=tv=1))
c Var 'aux95' direct represents '0' with '-1387'
c Var 'aux95' direct represents '1' with '1387'
c Var 'aux95' order represents '1' with '1'
c Var 'aux95' order represents '0' with '-1387'
c Encoding variable: aux96 with domain: bool (representing constraint (((x_00003_00007=7) + (x_00008_00007=7) + (x_00001_00007=7) + (x_00006_00007=7) + (x_00004_00007=7) + (x_00009_00007=7) + (x_00002_00007=7) + (x_00007_00007=7) + (x_00005_00007=7))=tv=1))
c Var 'aux96' direct represents '0' with '-1388'
c Var 'aux96' direct represents '1' with '1388'
c Var 'aux96' order represents '1' with '1'
c Var 'aux96' order represents '0' with '-1388'
c Encoding variable: aux97 with domain: bool (representing constraint (((x_00003_00007=8) + (x_00008_00007=8) + (x_00001_00007=8) + (x_00006_00007=8) + (x_00004_00007=8) + (x_00009_00007=8) + (x_00002_00007=8) + (x_00007_00007=8) + (x_00005_00007=8))=tv=1))
c Var 'aux97' direct represents '0' with '-1389'
c Var 'aux97' direct represents '1' with '1389'
c Var 'aux97' order represents '1' with '1'
c Var 'aux97' order represents '0' with '-1389'
c Encoding variable: aux98 with domain: bool (representing constraint (((x_00003_00007=9) + (x_00008_00007=9) + (x_00001_00007=9) + (x_00006_00007=9) + (x_00004_00007=9) + (x_00009_00007=9) + (x_00002_00007=9) + (x_00007_00007=9) + (x_00005_00007=9))=tv=1))
c Var 'aux98' direct represents '0' with '-1390'
c Var 'aux98' direct represents '1' with '1390'
c Var 'aux98' order represents '1' with '1'
c Var 'aux98' order represents '0' with '-1390'
c Encoding variable: aux99 with domain: bool (representing constraint (((x_00003_00008=1) + (x_00008_00008=1) + (x_00001_00008=1) + (x_00006_00008=1) + (x_00004_00008=1) + (x_00009_00008=1) + (x_00002_00008=1) + (x_00007_00008=1) + (x_00005_00008=1))=tv=1))
c Var 'aux99' direct represents '0' with '-1391'
c Var 'aux99' direct represents '1' with '1391'
c Var 'aux99' order represents '1' with '1'
c Var 'aux99' order represents '0' with '-1391'
c Encoding variable: aux100 with domain: bool (representing constraint (((x_00003_00008=2) + (x_00008_00008=2) + (x_00001_00008=2) + (x_00006_00008=2) + (x_00004_00008=2) + (x_00009_00008=2) + (x_00002_00008=2) + (x_00007_00008=2) + (x_00005_00008=2))=tv=1))
c Var 'aux100' direct represents '0' with '-1392'
c Var 'aux100' direct represents '1' with '1392'
c Var 'aux100' order represents '1' with '1'
c Var 'aux100' order represents '0' with '-1392'
c Encoding variable: aux101 with domain: bool (representing constraint (((x_00003_00008=3) + (x_00008_00008=3) + (x_00001_00008=3) + (x_00006_00008=3) + (x_00004_00008=3) + (x_00009_00008=3) + (x_00002_00008=3) + (x_00007_00008=3) + (x_00005_00008=3))=tv=1))
c Var 'aux101' direct represents '0' with '-1393'
c Var 'aux101' direct represents '1' with '1393'
c Var 'aux101' order represents '1' with '1'
c Var 'aux101' order represents '0' with '-1393'
c Encoding variable: aux102 with domain: bool (representing constraint (((x_00003_00008=4) + (x_00008_00008=4) + (x_00001_00008=4) + (x_00006_00008=4) + (x_00004_00008=4) + (x_00009_00008=4) + (x_00002_00008=4) + (x_00007_00008=4) + (x_00005_00008=4))=tv=1))
c Var 'aux102' direct represents '0' with '-1394'
c Var 'aux102' direct represents '1' with '1394'
c Var 'aux102' order represents '1' with '1'
c Var 'aux102' order represents '0' with '-1394'
c Encoding variable: aux103 with domain: bool (representing constraint (((x_00003_00008=5) + (x_00008_00008=5) + (x_00001_00008=5) + (x_00006_00008=5) + (x_00004_00008=5) + (x_00009_00008=5) + (x_00002_00008=5) + (x_00007_00008=5) + (x_00005_00008=5))=tv=1))
c Var 'aux103' direct represents '0' with '-1395'
c Var 'aux103' direct represents '1' with '1395'
c Var 'aux103' order represents '1' with '1'
c Var 'aux103' order represents '0' with '-1395'
c Encoding variable: aux104 with domain: bool (representing constraint (((x_00003_00008=6) + (x_00008_00008=6) + (x_00001_00008=6) + (x_00006_00008=6) + (x_00004_00008=6) + (x_00009_00008=6) + (x_00002_00008=6) + (x_00007_00008=6) + (x_00005_00008=6))=tv=1))
c Var 'aux104' direct represents '0' with '-1396'
c Var 'aux104' direct represents '1' with '1396'
c Var 'aux104' order represents '1' with '1'
c Var 'aux104' order represents '0' with '-1396'
c Encoding variable: aux105 with domain: bool (representing constraint (((x_00003_00008=7) + (x_00008_00008=7) + (x_00001_00008=7) + (x_00006_00008=7) + (x_00004_00008=7) + (x_00009_00008=7) + (x_00002_00008=7) + (x_00007_00008=7) + (x_00005_00008=7))=tv=1))
c Var 'aux105' direct represents '0' with '-1397'
c Var 'aux105' direct represents '1' with '1397'
c Var 'aux105' order represents '1' with '1'
c Var 'aux105' order represents '0' with '-1397'
c Encoding variable: aux106 with domain: bool (representing constraint (((x_00003_00008=8) + (x_00008_00008=8) + (x_00001_00008=8) + (x_00006_00008=8) + (x_00004_00008=8) + (x_00009_00008=8) + (x_00002_00008=8) + (x_00007_00008=8) + (x_00005_00008=8))=tv=1))
c Var 'aux106' direct represents '0' with '-1398'
c Var 'aux106' direct represents '1' with '1398'
c Var 'aux106' order represents '1' with '1'
c Var 'aux106' order represents '0' with '-1398'
c Encoding variable: aux107 with domain: bool (representing constraint (((x_00003_00008=9) + (x_00008_00008=9) + (x_00001_00008=9) + (x_00006_00008=9) + (x_00004_00008=9) + (x_00009_00008=9) + (x_00002_00008=9) + (x_00007_00008=9) + (x_00005_00008=9))=tv=1))
c Var 'aux107' direct represents '0' with '-1399'
c Var 'aux107' direct represents '1' with '1399'
c Var 'aux107' order represents '1' with '1'
c Var 'aux107' order represents '0' with '-1399'
c Encoding variable: aux108 with domain: bool (representing constraint (((x_00003_00009=1) + (x_00008_00009=1) + (x_00001_00009=1) + (x_00006_00009=1) + (x_00004_00009=1) + (x_00009_00009=1) + (x_00002_00009=1) + (x_00007_00009=1) + (x_00005_00009=1))=tv=1))
c Var 'aux108' direct represents '0' with '-1400'
c Var 'aux108' direct represents '1' with '1400'
c Var 'aux108' order represents '1' with '1'
c Var 'aux108' order represents '0' with '-1400'
c Encoding variable: aux109 with domain: bool (representing constraint (((x_00003_00009=2) + (x_00008_00009=2) + (x_00001_00009=2) + (x_00006_00009=2) + (x_00004_00009=2) + (x_00009_00009=2) + (x_00002_00009=2) + (x_00007_00009=2) + (x_00005_00009=2))=tv=1))
c Var 'aux109' direct represents '0' with '-1401'
c Var 'aux109' direct represents '1' with '1401'
c Var 'aux109' order represents '1' with '1'
c Var 'aux109' order represents '0' with '-1401'
c Encoding variable: aux110 with domain: bool (representing constraint (((x_00003_00009=3) + (x_00008_00009=3) + (x_00001_00009=3) + (x_00006_00009=3) + (x_00004_00009=3) + (x_00009_00009=3) + (x_00002_00009=3) + (x_00007_00009=3) + (x_00005_00009=3))=tv=1))
c Var 'aux110' direct represents '0' with '-1402'
c Var 'aux110' direct represents '1' with '1402'
c Var 'aux110' order represents '1' with '1'
c Var 'aux110' order represents '0' with '-1402'
c Encoding variable: aux111 with domain: bool (representing constraint (((x_00003_00009=4) + (x_00008_00009=4) + (x_00001_00009=4) + (x_00006_00009=4) + (x_00004_00009=4) + (x_00009_00009=4) + (x_00002_00009=4) + (x_00007_00009=4) + (x_00005_00009=4))=tv=1))
c Var 'aux111' direct represents '0' with '-1403'
c Var 'aux111' direct represents '1' with '1403'
c Var 'aux111' order represents '1' with '1'
c Var 'aux111' order represents '0' with '-1403'
c Encoding variable: aux112 with domain: bool (representing constraint (((x_00003_00009=5) + (x_00008_00009=5) + (x_00001_00009=5) + (x_00006_00009=5) + (x_00004_00009=5) + (x_00009_00009=5) + (x_00002_00009=5) + (x_00007_00009=5) + (x_00005_00009=5))=tv=1))
c Var 'aux112' direct represents '0' with '-1404'
c Var 'aux112' direct represents '1' with '1404'
c Var 'aux112' order represents '1' with '1'
c Var 'aux112' order represents '0' with '-1404'
c Encoding variable: aux113 with domain: bool (representing constraint (((x_00003_00009=6) + (x_00008_00009=6) + (x_00001_00009=6) + (x_00006_00009=6) + (x_00004_00009=6) + (x_00009_00009=6) + (x_00002_00009=6) + (x_00007_00009=6) + (x_00005_00009=6))=tv=1))
c Var 'aux113' direct represents '0' with '-1405'
c Var 'aux113' direct represents '1' with '1405'
c Var 'aux113' order represents '1' with '1'
c Var 'aux113' order represents '0' with '-1405'
c Encoding variable: aux114 with domain: bool (representing constraint (((x_00003_00009=7) + (x_00008_00009=7) + (x_00001_00009=7) + (x_00006_00009=7) + (x_00004_00009=7) + (x_00009_00009=7) + (x_00002_00009=7) + (x_00007_00009=7) + (x_00005_00009=7))=tv=1))
c Var 'aux114' direct represents '0' with '-1406'
c Var 'aux114' direct represents '1' with '1406'
c Var 'aux114' order represents '1' with '1'
c Var 'aux114' order represents '0' with '-1406'
c Encoding variable: aux115 with domain: bool (representing constraint (((x_00003_00009=8) + (x_00008_00009=8) + (x_00001_00009=8) + (x_00006_00009=8) + (x_00004_00009=8) + (x_00009_00009=8) + (x_00002_00009=8) + (x_00007_00009=8) + (x_00005_00009=8))=tv=1))
c Var 'aux115' direct represents '0' with '-1407'
c Var 'aux115' direct represents '1' with '1407'
c Var 'aux115' order represents '1' with '1'
c Var 'aux115' order represents '0' with '-1407'
c Encoding variable: aux116 with domain: bool (representing constraint (((x_00003_00009=9) + (x_00008_00009=9) + (x_00001_00009=9) + (x_00006_00009=9) + (x_00004_00009=9) + (x_00009_00009=9) + (x_00002_00009=9) + (x_00007_00009=9) + (x_00005_00009=9))=tv=1))
c Var 'aux116' direct represents '0' with '-1408'
c Var 'aux116' direct represents '1' with '1408'
c Var 'aux116' order represents '1' with '1'
c Var 'aux116' order represents '0' with '-1408'
c Encoding variable: aux117 with domain: bool (representing constraint (((x_00001_00001=1) + (x_00001_00002=1) + (x_00001_00003=1) + (x_00001_00004=1) + (x_00001_00005=1) + (x_00001_00006=1) + (x_00001_00007=1) + (x_00001_00008=1) + (x_00001_00009=1))=tv=1))
c Var 'aux117' direct represents '0' with '-1409'
c Var 'aux117' direct represents '1' with '1409'
c Var 'aux117' order represents '1' with '1'
c Var 'aux117' order represents '0' with '-1409'
c Encoding variable: aux118 with domain: bool (representing constraint (((x_00001_00001=2) + (x_00001_00002=2) + (x_00001_00003=2) + (x_00001_00004=2) + (x_00001_00005=2) + (x_00001_00006=2) + (x_00001_00007=2) + (x_00001_00008=2) + (x_00001_00009=2))=tv=1))
c Var 'aux118' direct represents '0' with '-1410'
c Var 'aux118' direct represents '1' with '1410'
c Var 'aux118' order represents '1' with '1'
c Var 'aux118' order represents '0' with '-1410'
c Encoding variable: aux119 with domain: bool (representing constraint (((x_00001_00001=3) + (x_00001_00002=3) + (x_00001_00003=3) + (x_00001_00004=3) + (x_00001_00005=3) + (x_00001_00006=3) + (x_00001_00007=3) + (x_00001_00008=3) + (x_00001_00009=3))=tv=1))
c Var 'aux119' direct represents '0' with '-1411'
c Var 'aux119' direct represents '1' with '1411'
c Var 'aux119' order represents '1' with '1'
c Var 'aux119' order represents '0' with '-1411'
c Encoding variable: aux120 with domain: bool (representing constraint (((x_00001_00001=4) + (x_00001_00002=4) + (x_00001_00003=4) + (x_00001_00004=4) + (x_00001_00005=4) + (x_00001_00006=4) + (x_00001_00007=4) + (x_00001_00008=4) + (x_00001_00009=4))=tv=1))
c Var 'aux120' direct represents '0' with '-1412'
c Var 'aux120' direct represents '1' with '1412'
c Var 'aux120' order represents '1' with '1'
c Var 'aux120' order represents '0' with '-1412'
c Encoding variable: aux121 with domain: bool (representing constraint (((x_00001_00001=5) + (x_00001_00002=5) + (x_00001_00003=5) + (x_00001_00004=5) + (x_00001_00005=5) + (x_00001_00006=5) + (x_00001_00007=5) + (x_00001_00008=5) + (x_00001_00009=5))=tv=1))
c Var 'aux121' direct represents '0' with '-1413'
c Var 'aux121' direct represents '1' with '1413'
c Var 'aux121' order represents '1' with '1'
c Var 'aux121' order represents '0' with '-1413'
c Encoding variable: aux122 with domain: bool (representing constraint (((x_00001_00001=6) + (x_00001_00002=6) + (x_00001_00003=6) + (x_00001_00004=6) + (x_00001_00005=6) + (x_00001_00006=6) + (x_00001_00007=6) + (x_00001_00008=6) + (x_00001_00009=6))=tv=1))
c Var 'aux122' direct represents '0' with '-1414'
c Var 'aux122' direct represents '1' with '1414'
c Var 'aux122' order represents '1' with '1'
c Var 'aux122' order represents '0' with '-1414'
c Encoding variable: aux123 with domain: bool (representing constraint (((x_00001_00001=7) + (x_00001_00002=7) + (x_00001_00003=7) + (x_00001_00004=7) + (x_00001_00005=7) + (x_00001_00006=7) + (x_00001_00007=7) + (x_00001_00008=7) + (x_00001_00009=7))=tv=1))
c Var 'aux123' direct represents '0' with '-1415'
c Var 'aux123' direct represents '1' with '1415'
c Var 'aux123' order represents '1' with '1'
c Var 'aux123' order represents '0' with '-1415'
c Encoding variable: aux124 with domain: bool (representing constraint (((x_00001_00001=8) + (x_00001_00002=8) + (x_00001_00003=8) + (x_00001_00004=8) + (x_00001_00005=8) + (x_00001_00006=8) + (x_00001_00007=8) + (x_00001_00008=8) + (x_00001_00009=8))=tv=1))
c Var 'aux124' direct represents '0' with '-1416'
c Var 'aux124' direct represents '1' with '1416'
c Var 'aux124' order represents '1' with '1'
c Var 'aux124' order represents '0' with '-1416'
c Encoding variable: aux125 with domain: bool (representing constraint (((x_00001_00001=9) + (x_00001_00002=9) + (x_00001_00003=9) + (x_00001_00004=9) + (x_00001_00005=9) + (x_00001_00006=9) + (x_00001_00007=9) + (x_00001_00008=9) + (x_00001_00009=9))=tv=1))
c Var 'aux125' direct represents '0' with '-1417'
c Var 'aux125' direct represents '1' with '1417'
c Var 'aux125' order represents '1' with '1'
c Var 'aux125' order represents '0' with '-1417'
c Encoding variable: aux126 with domain: bool (representing constraint (((x_00002_00001=1) + (x_00002_00002=1) + (x_00002_00003=1) + (x_00002_00004=1) + (x_00002_00005=1) + (x_00002_00006=1) + (x_00002_00007=1) + (x_00002_00008=1) + (x_00002_00009=1))=tv=1))
c Var 'aux126' direct represents '0' with '-1418'
c Var 'aux126' direct represents '1' with '1418'
c Var 'aux126' order represents '1' with '1'
c Var 'aux126' order represents '0' with '-1418'
c Encoding variable: aux127 with domain: bool (representing constraint (((x_00002_00001=2) + (x_00002_00002=2) + (x_00002_00003=2) + (x_00002_00004=2) + (x_00002_00005=2) + (x_00002_00006=2) + (x_00002_00007=2) + (x_00002_00008=2) + (x_00002_00009=2))=tv=1))
c Var 'aux127' direct represents '0' with '-1419'
c Var 'aux127' direct represents '1' with '1419'
c Var 'aux127' order represents '1' with '1'
c Var 'aux127' order represents '0' with '-1419'
c Encoding variable: aux128 with domain: bool (representing constraint (((x_00002_00001=3) + (x_00002_00002=3) + (x_00002_00003=3) + (x_00002_00004=3) + (x_00002_00005=3) + (x_00002_00006=3) + (x_00002_00007=3) + (x_00002_00008=3) + (x_00002_00009=3))=tv=1))
c Var 'aux128' direct represents '0' with '-1420'
c Var 'aux128' direct represents '1' with '1420'
c Var 'aux128' order represents '1' with '1'
c Var 'aux128' order represents '0' with '-1420'
c Encoding variable: aux129 with domain: bool (representing constraint (((x_00002_00001=4) + (x_00002_00002=4) + (x_00002_00003=4) + (x_00002_00004=4) + (x_00002_00005=4) + (x_00002_00006=4) + (x_00002_00007=4) + (x_00002_00008=4) + (x_00002_00009=4))=tv=1))
c Var 'aux129' direct represents '0' with '-1421'
c Var 'aux129' direct represents '1' with '1421'
c Var 'aux129' order represents '1' with '1'
c Var 'aux129' order represents '0' with '-1421'
c Encoding variable: aux130 with domain: bool (representing constraint (((x_00002_00001=5) + (x_00002_00002=5) + (x_00002_00003=5) + (x_00002_00004=5) + (x_00002_00005=5) + (x_00002_00006=5) + (x_00002_00007=5) + (x_00002_00008=5) + (x_00002_00009=5))=tv=1))
c Var 'aux130' direct represents '0' with '-1422'
c Var 'aux130' direct represents '1' with '1422'
c Var 'aux130' order represents '1' with '1'
c Var 'aux130' order represents '0' with '-1422'
c Encoding variable: aux131 with domain: bool (representing constraint (((x_00002_00001=6) + (x_00002_00002=6) + (x_00002_00003=6) + (x_00002_00004=6) + (x_00002_00005=6) + (x_00002_00006=6) + (x_00002_00007=6) + (x_00002_00008=6) + (x_00002_00009=6))=tv=1))
c Var 'aux131' direct represents '0' with '-1423'
c Var 'aux131' direct represents '1' with '1423'
c Var 'aux131' order represents '1' with '1'
c Var 'aux131' order represents '0' with '-1423'
c Encoding variable: aux132 with domain: bool (representing constraint (((x_00002_00001=7) + (x_00002_00002=7) + (x_00002_00003=7) + (x_00002_00004=7) + (x_00002_00005=7) + (x_00002_00006=7) + (x_00002_00007=7) + (x_00002_00008=7) + (x_00002_00009=7))=tv=1))
c Var 'aux132' direct represents '0' with '-1424'
c Var 'aux132' direct represents '1' with '1424'
c Var 'aux132' order represents '1' with '1'
c Var 'aux132' order represents '0' with '-1424'
c Encoding variable: aux133 with domain: bool (representing constraint (((x_00002_00001=8) + (x_00002_00002=8) + (x_00002_00003=8) + (x_00002_00004=8) + (x_00002_00005=8) + (x_00002_00006=8) + (x_00002_00007=8) + (x_00002_00008=8) + (x_00002_00009=8))=tv=1))
c Var 'aux133' direct represents '0' with '-1425'
c Var 'aux133' direct represents '1' with '1425'
c Var 'aux133' order represents '1' with '1'
c Var 'aux133' order represents '0' with '-1425'
c Encoding variable: aux134 with domain: bool (representing constraint (((x_00002_00001=9) + (x_00002_00002=9) + (x_00002_00003=9) + (x_00002_00004=9) + (x_00002_00005=9) + (x_00002_00006=9) + (x_00002_00007=9) + (x_00002_00008=9) + (x_00002_00009=9))=tv=1))
c Var 'aux134' direct represents '0' with '-1426'
c Var 'aux134' direct represents '1' with '1426'
c Var 'aux134' order represents '1' with '1'
c Var 'aux134' order represents '0' with '-1426'
c Encoding variable: aux135 with domain: bool (representing constraint (((x_00003_00001=1) + (x_00003_00002=1) + (x_00003_00003=1) + (x_00003_00004=1) + (x_00003_00005=1) + (x_00003_00006=1) + (x_00003_00007=1) + (x_00003_00008=1) + (x_00003_00009=1))=tv=1))
c Var 'aux135' direct represents '0' with '-1427'
c Var 'aux135' direct represents '1' with '1427'
c Var 'aux135' order represents '1' with '1'
c Var 'aux135' order represents '0' with '-1427'
c Encoding variable: aux136 with domain: bool (representing constraint (((x_00003_00001=2) + (x_00003_00002=2) + (x_00003_00003=2) + (x_00003_00004=2) + (x_00003_00005=2) + (x_00003_00006=2) + (x_00003_00007=2) + (x_00003_00008=2) + (x_00003_00009=2))=tv=1))
c Var 'aux136' direct represents '0' with '-1428'
c Var 'aux136' direct represents '1' with '1428'
c Var 'aux136' order represents '1' with '1'
c Var 'aux136' order represents '0' with '-1428'
c Encoding variable: aux137 with domain: bool (representing constraint (((x_00003_00001=3) + (x_00003_00002=3) + (x_00003_00003=3) + (x_00003_00004=3) + (x_00003_00005=3) + (x_00003_00006=3) + (x_00003_00007=3) + (x_00003_00008=3) + (x_00003_00009=3))=tv=1))
c Var 'aux137' direct represents '0' with '-1429'
c Var 'aux137' direct represents '1' with '1429'
c Var 'aux137' order represents '1' with '1'
c Var 'aux137' order represents '0' with '-1429'
c Encoding variable: aux138 with domain: bool (representing constraint (((x_00003_00001=4) + (x_00003_00002=4) + (x_00003_00003=4) + (x_00003_00004=4) + (x_00003_00005=4) + (x_00003_00006=4) + (x_00003_00007=4) + (x_00003_00008=4) + (x_00003_00009=4))=tv=1))
c Var 'aux138' direct represents '0' with '-1430'
c Var 'aux138' direct represents '1' with '1430'
c Var 'aux138' order represents '1' with '1'
c Var 'aux138' order represents '0' with '-1430'
c Encoding variable: aux139 with domain: bool (representing constraint (((x_00003_00001=5) + (x_00003_00002=5) + (x_00003_00003=5) + (x_00003_00004=5) + (x_00003_00005=5) + (x_00003_00006=5) + (x_00003_00007=5) + (x_00003_00008=5) + (x_00003_00009=5))=tv=1))
c Var 'aux139' direct represents '0' with '-1431'
c Var 'aux139' direct represents '1' with '1431'
c Var 'aux139' order represents '1' with '1'
c Var 'aux139' order represents '0' with '-1431'
c Encoding variable: aux140 with domain: bool (representing constraint (((x_00003_00001=6) + (x_00003_00002=6) + (x_00003_00003=6) + (x_00003_00004=6) + (x_00003_00005=6) + (x_00003_00006=6) + (x_00003_00007=6) + (x_00003_00008=6) + (x_00003_00009=6))=tv=1))
c Var 'aux140' direct represents '0' with '-1432'
c Var 'aux140' direct represents '1' with '1432'
c Var 'aux140' order represents '1' with '1'
c Var 'aux140' order represents '0' with '-1432'
c Encoding variable: aux141 with domain: bool (representing constraint (((x_00003_00001=7) + (x_00003_00002=7) + (x_00003_00003=7) + (x_00003_00004=7) + (x_00003_00005=7) + (x_00003_00006=7) + (x_00003_00007=7) + (x_00003_00008=7) + (x_00003_00009=7))=tv=1))
c Var 'aux141' direct represents '0' with '-1433'
c Var 'aux141' direct represents '1' with '1433'
c Var 'aux141' order represents '1' with '1'
c Var 'aux141' order represents '0' with '-1433'
c Encoding variable: aux142 with domain: bool (representing constraint (((x_00003_00001=8) + (x_00003_00002=8) + (x_00003_00003=8) + (x_00003_00004=8) + (x_00003_00005=8) + (x_00003_00006=8) + (x_00003_00007=8) + (x_00003_00008=8) + (x_00003_00009=8))=tv=1))
c Var 'aux142' direct represents '0' with '-1434'
c Var 'aux142' direct represents '1' with '1434'
c Var 'aux142' order represents '1' with '1'
c Var 'aux142' order represents '0' with '-1434'
c Encoding variable: aux143 with domain: bool (representing constraint (((x_00003_00001=9) + (x_00003_00002=9) + (x_00003_00003=9) + (x_00003_00004=9) + (x_00003_00005=9) + (x_00003_00006=9) + (x_00003_00007=9) + (x_00003_00008=9) + (x_00003_00009=9))=tv=1))
c Var 'aux143' direct represents '0' with '-1435'
c Var 'aux143' direct represents '1' with '1435'
c Var 'aux143' order represents '1' with '1'
c Var 'aux143' order represents '0' with '-1435'
c Encoding variable: aux144 with domain: bool (representing constraint (((x_00004_00001=1) + (x_00004_00002=1) + (x_00004_00003=1) + (x_00004_00004=1) + (x_00004_00005=1) + (x_00004_00006=1) + (x_00004_00007=1) + (x_00004_00008=1) + (x_00004_00009=1))=tv=1))
c Var 'aux144' direct represents '0' with '-1436'
c Var 'aux144' direct represents '1' with '1436'
c Var 'aux144' order represents '1' with '1'
c Var 'aux144' order represents '0' with '-1436'
c Encoding variable: aux145 with domain: bool (representing constraint (((x_00004_00001=2) + (x_00004_00002=2) + (x_00004_00003=2) + (x_00004_00004=2) + (x_00004_00005=2) + (x_00004_00006=2) + (x_00004_00007=2) + (x_00004_00008=2) + (x_00004_00009=2))=tv=1))
c Var 'aux145' direct represents '0' with '-1437'
c Var 'aux145' direct represents '1' with '1437'
c Var 'aux145' order represents '1' with '1'
c Var 'aux145' order represents '0' with '-1437'
c Encoding variable: aux146 with domain: bool (representing constraint (((x_00004_00001=3) + (x_00004_00002=3) + (x_00004_00003=3) + (x_00004_00004=3) + (x_00004_00005=3) + (x_00004_00006=3) + (x_00004_00007=3) + (x_00004_00008=3) + (x_00004_00009=3))=tv=1))
c Var 'aux146' direct represents '0' with '-1438'
c Var 'aux146' direct represents '1' with '1438'
c Var 'aux146' order represents '1' with '1'
c Var 'aux146' order represents '0' with '-1438'
c Encoding variable: aux147 with domain: bool (representing constraint (((x_00004_00001=4) + (x_00004_00002=4) + (x_00004_00003=4) + (x_00004_00004=4) + (x_00004_00005=4) + (x_00004_00006=4) + (x_00004_00007=4) + (x_00004_00008=4) + (x_00004_00009=4))=tv=1))
c Var 'aux147' direct represents '0' with '-1439'
c Var 'aux147' direct represents '1' with '1439'
c Var 'aux147' order represents '1' with '1'
c Var 'aux147' order represents '0' with '-1439'
c Encoding variable: aux148 with domain: bool (representing constraint (((x_00004_00001=5) + (x_00004_00002=5) + (x_00004_00003=5) + (x_00004_00004=5) + (x_00004_00005=5) + (x_00004_00006=5) + (x_00004_00007=5) + (x_00004_00008=5) + (x_00004_00009=5))=tv=1))
c Var 'aux148' direct represents '0' with '-1440'
c Var 'aux148' direct represents '1' with '1440'
c Var 'aux148' order represents '1' with '1'
c Var 'aux148' order represents '0' with '-1440'
c Encoding variable: aux149 with domain: bool (representing constraint (((x_00004_00001=6) + (x_00004_00002=6) + (x_00004_00003=6) + (x_00004_00004=6) + (x_00004_00005=6) + (x_00004_00006=6) + (x_00004_00007=6) + (x_00004_00008=6) + (x_00004_00009=6))=tv=1))
c Var 'aux149' direct represents '0' with '-1441'
c Var 'aux149' direct represents '1' with '1441'
c Var 'aux149' order represents '1' with '1'
c Var 'aux149' order represents '0' with '-1441'
c Encoding variable: aux150 with domain: bool (representing constraint (((x_00004_00001=7) + (x_00004_00002=7) + (x_00004_00003=7) + (x_00004_00004=7) + (x_00004_00005=7) + (x_00004_00006=7) + (x_00004_00007=7) + (x_00004_00008=7) + (x_00004_00009=7))=tv=1))
c Var 'aux150' direct represents '0' with '-1442'
c Var 'aux150' direct represents '1' with '1442'
c Var 'aux150' order represents '1' with '1'
c Var 'aux150' order represents '0' with '-1442'
c Encoding variable: aux151 with domain: bool (representing constraint (((x_00004_00001=8) + (x_00004_00002=8) + (x_00004_00003=8) + (x_00004_00004=8) + (x_00004_00005=8) + (x_00004_00006=8) + (x_00004_00007=8) + (x_00004_00008=8) + (x_00004_00009=8))=tv=1))
c Var 'aux151' direct represents '0' with '-1443'
c Var 'aux151' direct represents '1' with '1443'
c Var 'aux151' order represents '1' with '1'
c Var 'aux151' order represents '0' with '-1443'
c Encoding variable: aux152 with domain: bool (representing constraint (((x_00004_00001=9) + (x_00004_00002=9) + (x_00004_00003=9) + (x_00004_00004=9) + (x_00004_00005=9) + (x_00004_00006=9) + (x_00004_00007=9) + (x_00004_00008=9) + (x_00004_00009=9))=tv=1))
c Var 'aux152' direct represents '0' with '-1444'
c Var 'aux152' direct represents '1' with '1444'
c Var 'aux152' order represents '1' with '1'
c Var 'aux152' order represents '0' with '-1444'
c Encoding variable: aux153 with domain: bool (representing constraint (((x_00005_00001=1) + (x_00005_00002=1) + (x_00005_00003=1) + (x_00005_00004=1) + (x_00005_00005=1) + (x_00005_00006=1) + (x_00005_00007=1) + (x_00005_00008=1) + (x_00005_00009=1))=tv=1))
c Var 'aux153' direct represents '0' with '-1445'
c Var 'aux153' direct represents '1' with '1445'
c Var 'aux153' order represents '1' with '1'
c Var 'aux153' order represents '0' with '-1445'
c Encoding variable: aux154 with domain: bool (representing constraint (((x_00005_00001=2) + (x_00005_00002=2) + (x_00005_00003=2) + (x_00005_00004=2) + (x_00005_00005=2) + (x_00005_00006=2) + (x_00005_00007=2) + (x_00005_00008=2) + (x_00005_00009=2))=tv=1))
c Var 'aux154' direct represents '0' with '-1446'
c Var 'aux154' direct represents '1' with '1446'
c Var 'aux154' order represents '1' with '1'
c Var 'aux154' order represents '0' with '-1446'
c Encoding variable: aux155 with domain: bool (representing constraint (((x_00005_00001=3) + (x_00005_00002=3) + (x_00005_00003=3) + (x_00005_00004=3) + (x_00005_00005=3) + (x_00005_00006=3) + (x_00005_00007=3) + (x_00005_00008=3) + (x_00005_00009=3))=tv=1))
c Var 'aux155' direct represents '0' with '-1447'
c Var 'aux155' direct represents '1' with '1447'
c Var 'aux155' order represents '1' with '1'
c Var 'aux155' order represents '0' with '-1447'
c Encoding variable: aux156 with domain: bool (representing constraint (((x_00005_00001=4) + (x_00005_00002=4) + (x_00005_00003=4) + (x_00005_00004=4) + (x_00005_00005=4) + (x_00005_00006=4) + (x_00005_00007=4) + (x_00005_00008=4) + (x_00005_00009=4))=tv=1))
c Var 'aux156' direct represents '0' with '-1448'
c Var 'aux156' direct represents '1' with '1448'
c Var 'aux156' order represents '1' with '1'
c Var 'aux156' order represents '0' with '-1448'
c Encoding variable: aux157 with domain: bool (representing constraint (((x_00005_00001=5) + (x_00005_00002=5) + (x_00005_00003=5) + (x_00005_00004=5) + (x_00005_00005=5) + (x_00005_00006=5) + (x_00005_00007=5) + (x_00005_00008=5) + (x_00005_00009=5))=tv=1))
c Var 'aux157' direct represents '0' with '-1449'
c Var 'aux157' direct represents '1' with '1449'
c Var 'aux157' order represents '1' with '1'
c Var 'aux157' order represents '0' with '-1449'
c Encoding variable: aux158 with domain: bool (representing constraint (((x_00005_00001=6) + (x_00005_00002=6) + (x_00005_00003=6) + (x_00005_00004=6) + (x_00005_00005=6) + (x_00005_00006=6) + (x_00005_00007=6) + (x_00005_00008=6) + (x_00005_00009=6))=tv=1))
c Var 'aux158' direct represents '0' with '-1450'
c Var 'aux158' direct represents '1' with '1450'
c Var 'aux158' order represents '1' with '1'
c Var 'aux158' order represents '0' with '-1450'
c Encoding variable: aux159 with domain: bool (representing constraint (((x_00005_00001=7) + (x_00005_00002=7) + (x_00005_00003=7) + (x_00005_00004=7) + (x_00005_00005=7) + (x_00005_00006=7) + (x_00005_00007=7) + (x_00005_00008=7) + (x_00005_00009=7))=tv=1))
c Var 'aux159' direct represents '0' with '-1451'
c Var 'aux159' direct represents '1' with '1451'
c Var 'aux159' order represents '1' with '1'
c Var 'aux159' order represents '0' with '-1451'
c Encoding variable: aux160 with domain: bool (representing constraint (((x_00005_00001=8) + (x_00005_00002=8) + (x_00005_00003=8) + (x_00005_00004=8) + (x_00005_00005=8) + (x_00005_00006=8) + (x_00005_00007=8) + (x_00005_00008=8) + (x_00005_00009=8))=tv=1))
c Var 'aux160' direct represents '0' with '-1452'
c Var 'aux160' direct represents '1' with '1452'
c Var 'aux160' order represents '1' with '1'
c Var 'aux160' order represents '0' with '-1452'
c Encoding variable: aux161 with domain: bool (representing constraint (((x_00005_00001=9) + (x_00005_00002=9) + (x_00005_00003=9) + (x_00005_00004=9) + (x_00005_00005=9) + (x_00005_00006=9) + (x_00005_00007=9) + (x_00005_00008=9) + (x_00005_00009=9))=tv=1))
c Var 'aux161' direct represents '0' with '-1453'
c Var 'aux161' direct represents '1' with '1453'
c Var 'aux161' order represents '1' with '1'
c Var 'aux161' order represents '0' with '-1453'
c Encoding variable: aux162 with domain: bool (representing constraint (((x_00006_00001=1) + (x_00006_00002=1) + (x_00006_00003=1) + (x_00006_00004=1) + (x_00006_00005=1) + (x_00006_00006=1) + (x_00006_00007=1) + (x_00006_00008=1) + (x_00006_00009=1))=tv=1))
c Var 'aux162' direct represents '0' with '-1454'
c Var 'aux162' direct represents '1' with '1454'
c Var 'aux162' order represents '1' with '1'
c Var 'aux162' order represents '0' with '-1454'
c Encoding variable: aux163 with domain: bool (representing constraint (((x_00006_00001=2) + (x_00006_00002=2) + (x_00006_00003=2) + (x_00006_00004=2) + (x_00006_00005=2) + (x_00006_00006=2) + (x_00006_00007=2) + (x_00006_00008=2) + (x_00006_00009=2))=tv=1))
c Var 'aux163' direct represents '0' with '-1455'
c Var 'aux163' direct represents '1' with '1455'
c Var 'aux163' order represents '1' with '1'
c Var 'aux163' order represents '0' with '-1455'
c Encoding variable: aux164 with domain: bool (representing constraint (((x_00006_00001=3) + (x_00006_00002=3) + (x_00006_00003=3) + (x_00006_00004=3) + (x_00006_00005=3) + (x_00006_00006=3) + (x_00006_00007=3) + (x_00006_00008=3) + (x_00006_00009=3))=tv=1))
c Var 'aux164' direct represents '0' with '-1456'
c Var 'aux164' direct represents '1' with '1456'
c Var 'aux164' order represents '1' with '1'
c Var 'aux164' order represents '0' with '-1456'
c Encoding variable: aux165 with domain: bool (representing constraint (((x_00006_00001=4) + (x_00006_00002=4) + (x_00006_00003=4) + (x_00006_00004=4) + (x_00006_00005=4) + (x_00006_00006=4) + (x_00006_00007=4) + (x_00006_00008=4) + (x_00006_00009=4))=tv=1))
c Var 'aux165' direct represents '0' with '-1457'
c Var 'aux165' direct represents '1' with '1457'
c Var 'aux165' order represents '1' with '1'
c Var 'aux165' order represents '0' with '-1457'
c Encoding variable: aux166 with domain: bool (representing constraint (((x_00006_00001=5) + (x_00006_00002=5) + (x_00006_00003=5) + (x_00006_00004=5) + (x_00006_00005=5) + (x_00006_00006=5) + (x_00006_00007=5) + (x_00006_00008=5) + (x_00006_00009=5))=tv=1))
c Var 'aux166' direct represents '0' with '-1458'
c Var 'aux166' direct represents '1' with '1458'
c Var 'aux166' order represents '1' with '1'
c Var 'aux166' order represents '0' with '-1458'
c Encoding variable: aux167 with domain: bool (representing constraint (((x_00006_00001=6) + (x_00006_00002=6) + (x_00006_00003=6) + (x_00006_00004=6) + (x_00006_00005=6) + (x_00006_00006=6) + (x_00006_00007=6) + (x_00006_00008=6) + (x_00006_00009=6))=tv=1))
c Var 'aux167' direct represents '0' with '-1459'
c Var 'aux167' direct represents '1' with '1459'
c Var 'aux167' order represents '1' with '1'
c Var 'aux167' order represents '0' with '-1459'
c Encoding variable: aux168 with domain: bool (representing constraint (((x_00006_00001=7) + (x_00006_00002=7) + (x_00006_00003=7) + (x_00006_00004=7) + (x_00006_00005=7) + (x_00006_00006=7) + (x_00006_00007=7) + (x_00006_00008=7) + (x_00006_00009=7))=tv=1))
c Var 'aux168' direct represents '0' with '-1460'
c Var 'aux168' direct represents '1' with '1460'
c Var 'aux168' order represents '1' with '1'
c Var 'aux168' order represents '0' with '-1460'
c Encoding variable: aux169 with domain: bool (representing constraint (((x_00006_00001=8) + (x_00006_00002=8) + (x_00006_00003=8) + (x_00006_00004=8) + (x_00006_00005=8) + (x_00006_00006=8) + (x_00006_00007=8) + (x_00006_00008=8) + (x_00006_00009=8))=tv=1))
c Var 'aux169' direct represents '0' with '-1461'
c Var 'aux169' direct represents '1' with '1461'
c Var 'aux169' order represents '1' with '1'
c Var 'aux169' order represents '0' with '-1461'
c Encoding variable: aux170 with domain: bool (representing constraint (((x_00006_00001=9) + (x_00006_00002=9) + (x_00006_00003=9) + (x_00006_00004=9) + (x_00006_00005=9) + (x_00006_00006=9) + (x_00006_00007=9) + (x_00006_00008=9) + (x_00006_00009=9))=tv=1))
c Var 'aux170' direct represents '0' with '-1462'
c Var 'aux170' direct represents '1' with '1462'
c Var 'aux170' order represents '1' with '1'
c Var 'aux170' order represents '0' with '-1462'
c Encoding variable: aux171 with domain: bool (representing constraint (((x_00007_00001=1) + (x_00007_00002=1) + (x_00007_00003=1) + (x_00007_00004=1) + (x_00007_00005=1) + (x_00007_00006=1) + (x_00007_00007=1) + (x_00007_00008=1) + (x_00007_00009=1))=tv=1))
c Var 'aux171' direct represents '0' with '-1463'
c Var 'aux171' direct represents '1' with '1463'
c Var 'aux171' order represents '1' with '1'
c Var 'aux171' order represents '0' with '-1463'
c Encoding variable: aux172 with domain: bool (representing constraint (((x_00007_00001=2) + (x_00007_00002=2) + (x_00007_00003=2) + (x_00007_00004=2) + (x_00007_00005=2) + (x_00007_00006=2) + (x_00007_00007=2) + (x_00007_00008=2) + (x_00007_00009=2))=tv=1))
c Var 'aux172' direct represents '0' with '-1464'
c Var 'aux172' direct represents '1' with '1464'
c Var 'aux172' order represents '1' with '1'
c Var 'aux172' order represents '0' with '-1464'
c Encoding variable: aux173 with domain: bool (representing constraint (((x_00007_00001=3) + (x_00007_00002=3) + (x_00007_00003=3) + (x_00007_00004=3) + (x_00007_00005=3) + (x_00007_00006=3) + (x_00007_00007=3) + (x_00007_00008=3) + (x_00007_00009=3))=tv=1))
c Var 'aux173' direct represents '0' with '-1465'
c Var 'aux173' direct represents '1' with '1465'
c Var 'aux173' order represents '1' with '1'
c Var 'aux173' order represents '0' with '-1465'
c Encoding variable: aux174 with domain: bool (representing constraint (((x_00007_00001=4) + (x_00007_00002=4) + (x_00007_00003=4) + (x_00007_00004=4) + (x_00007_00005=4) + (x_00007_00006=4) + (x_00007_00007=4) + (x_00007_00008=4) + (x_00007_00009=4))=tv=1))
c Var 'aux174' direct represents '0' with '-1466'
c Var 'aux174' direct represents '1' with '1466'
c Var 'aux174' order represents '1' with '1'
c Var 'aux174' order represents '0' with '-1466'
c Encoding variable: aux175 with domain: bool (representing constraint (((x_00007_00001=5) + (x_00007_00002=5) + (x_00007_00003=5) + (x_00007_00004=5) + (x_00007_00005=5) + (x_00007_00006=5) + (x_00007_00007=5) + (x_00007_00008=5) + (x_00007_00009=5))=tv=1))
c Var 'aux175' direct represents '0' with '-1467'
c Var 'aux175' direct represents '1' with '1467'
c Var 'aux175' order represents '1' with '1'
c Var 'aux175' order represents '0' with '-1467'
c Encoding variable: aux176 with domain: bool (representing constraint (((x_00007_00001=6) + (x_00007_00002=6) + (x_00007_00003=6) + (x_00007_00004=6) + (x_00007_00005=6) + (x_00007_00006=6) + (x_00007_00007=6) + (x_00007_00008=6) + (x_00007_00009=6))=tv=1))
c Var 'aux176' direct represents '0' with '-1468'
c Var 'aux176' direct represents '1' with '1468'
c Var 'aux176' order represents '1' with '1'
c Var 'aux176' order represents '0' with '-1468'
c Encoding variable: aux177 with domain: bool (representing constraint (((x_00007_00001=7) + (x_00007_00002=7) + (x_00007_00003=7) + (x_00007_00004=7) + (x_00007_00005=7) + (x_00007_00006=7) + (x_00007_00007=7) + (x_00007_00008=7) + (x_00007_00009=7))=tv=1))
c Var 'aux177' direct represents '0' with '-1469'
c Var 'aux177' direct represents '1' with '1469'
c Var 'aux177' order represents '1' with '1'
c Var 'aux177' order represents '0' with '-1469'
c Encoding variable: aux178 with domain: bool (representing constraint (((x_00007_00001=8) + (x_00007_00002=8) + (x_00007_00003=8) + (x_00007_00004=8) + (x_00007_00005=8) + (x_00007_00006=8) + (x_00007_00007=8) + (x_00007_00008=8) + (x_00007_00009=8))=tv=1))
c Var 'aux178' direct represents '0' with '-1470'
c Var 'aux178' direct represents '1' with '1470'
c Var 'aux178' order represents '1' with '1'
c Var 'aux178' order represents '0' with '-1470'
c Encoding variable: aux179 with domain: bool (representing constraint (((x_00007_00001=9) + (x_00007_00002=9) + (x_00007_00003=9) + (x_00007_00004=9) + (x_00007_00005=9) + (x_00007_00006=9) + (x_00007_00007=9) + (x_00007_00008=9) + (x_00007_00009=9))=tv=1))
c Var 'aux179' direct represents '0' with '-1471'
c Var 'aux179' direct represents '1' with '1471'
c Var 'aux179' order represents '1' with '1'
c Var 'aux179' order represents '0' with '-1471'
c Encoding variable: aux180 with domain: bool (representing constraint (((x_00008_00001=1) + (x_00008_00002=1) + (x_00008_00003=1) + (x_00008_00004=1) + (x_00008_00005=1) + (x_00008_00006=1) + (x_00008_00007=1) + (x_00008_00008=1) + (x_00008_00009=1))=tv=1))
c Var 'aux180' direct represents '0' with '-1472'
c Var 'aux180' direct represents '1' with '1472'
c Var 'aux180' order represents '1' with '1'
c Var 'aux180' order represents '0' with '-1472'
c Encoding variable: aux181 with domain: bool (representing constraint (((x_00008_00001=2) + (x_00008_00002=2) + (x_00008_00003=2) + (x_00008_00004=2) + (x_00008_00005=2) + (x_00008_00006=2) + (x_00008_00007=2) + (x_00008_00008=2) + (x_00008_00009=2))=tv=1))
c Var 'aux181' direct represents '0' with '-1473'
c Var 'aux181' direct represents '1' with '1473'
c Var 'aux181' order represents '1' with '1'
c Var 'aux181' order represents '0' with '-1473'
c Encoding variable: aux182 with domain: bool (representing constraint (((x_00008_00001=3) + (x_00008_00002=3) + (x_00008_00003=3) + (x_00008_00004=3) + (x_00008_00005=3) + (x_00008_00006=3) + (x_00008_00007=3) + (x_00008_00008=3) + (x_00008_00009=3))=tv=1))
c Var 'aux182' direct represents '0' with '-1474'
c Var 'aux182' direct represents '1' with '1474'
c Var 'aux182' order represents '1' with '1'
c Var 'aux182' order represents '0' with '-1474'
c Encoding variable: aux183 with domain: bool (representing constraint (((x_00008_00001=4) + (x_00008_00002=4) + (x_00008_00003=4) + (x_00008_00004=4) + (x_00008_00005=4) + (x_00008_00006=4) + (x_00008_00007=4) + (x_00008_00008=4) + (x_00008_00009=4))=tv=1))
c Var 'aux183' direct represents '0' with '-1475'
c Var 'aux183' direct represents '1' with '1475'
c Var 'aux183' order represents '1' with '1'
c Var 'aux183' order represents '0' with '-1475'
c Encoding variable: aux184 with domain: bool (representing constraint (((x_00008_00001=5) + (x_00008_00002=5) + (x_00008_00003=5) + (x_00008_00004=5) + (x_00008_00005=5) + (x_00008_00006=5) + (x_00008_00007=5) + (x_00008_00008=5) + (x_00008_00009=5))=tv=1))
c Var 'aux184' direct represents '0' with '-1476'
c Var 'aux184' direct represents '1' with '1476'
c Var 'aux184' order represents '1' with '1'
c Var 'aux184' order represents '0' with '-1476'
c Encoding variable: aux185 with domain: bool (representing constraint (((x_00008_00001=6) + (x_00008_00002=6) + (x_00008_00003=6) + (x_00008_00004=6) + (x_00008_00005=6) + (x_00008_00006=6) + (x_00008_00007=6) + (x_00008_00008=6) + (x_00008_00009=6))=tv=1))
c Var 'aux185' direct represents '0' with '-1477'
c Var 'aux185' direct represents '1' with '1477'
c Var 'aux185' order represents '1' with '1'
c Var 'aux185' order represents '0' with '-1477'
c Encoding variable: aux186 with domain: bool (representing constraint (((x_00008_00001=7) + (x_00008_00002=7) + (x_00008_00003=7) + (x_00008_00004=7) + (x_00008_00005=7) + (x_00008_00006=7) + (x_00008_00007=7) + (x_00008_00008=7) + (x_00008_00009=7))=tv=1))
c Var 'aux186' direct represents '0' with '-1478'
c Var 'aux186' direct represents '1' with '1478'
c Var 'aux186' order represents '1' with '1'
c Var 'aux186' order represents '0' with '-1478'
c Encoding variable: aux187 with domain: bool (representing constraint (((x_00008_00001=8) + (x_00008_00002=8) + (x_00008_00003=8) + (x_00008_00004=8) + (x_00008_00005=8) + (x_00008_00006=8) + (x_00008_00007=8) + (x_00008_00008=8) + (x_00008_00009=8))=tv=1))
c Var 'aux187' direct represents '0' with '-1479'
c Var 'aux187' direct represents '1' with '1479'
c Var 'aux187' order represents '1' with '1'
c Var 'aux187' order represents '0' with '-1479'
c Encoding variable: aux188 with domain: bool (representing constraint (((x_00008_00001=9) + (x_00008_00002=9) + (x_00008_00003=9) + (x_00008_00004=9) + (x_00008_00005=9) + (x_00008_00006=9) + (x_00008_00007=9) + (x_00008_00008=9) + (x_00008_00009=9))=tv=1))
c Var 'aux188' direct represents '0' with '-1480'
c Var 'aux188' direct represents '1' with '1480'
c Var 'aux188' order represents '1' with '1'
c Var 'aux188' order represents '0' with '-1480'
c Encoding variable: aux189 with domain: bool (representing constraint (((x_00009_00001=1) + (x_00009_00002=1) + (x_00009_00003=1) + (x_00009_00004=1) + (x_00009_00005=1) + (x_00009_00006=1) + (x_00009_00007=1) + (x_00009_00008=1) + (x_00009_00009=1))=tv=1))
c Var 'aux189' direct represents '0' with '-1481'
c Var 'aux189' direct represents '1' with '1481'
c Var 'aux189' order represents '1' with '1'
c Var 'aux189' order represents '0' with '-1481'
c Encoding variable: aux190 with domain: bool (representing constraint (((x_00009_00001=2) + (x_00009_00002=2) + (x_00009_00003=2) + (x_00009_00004=2) + (x_00009_00005=2) + (x_00009_00006=2) + (x_00009_00007=2) + (x_00009_00008=2) + (x_00009_00009=2))=tv=1))
c Var 'aux190' direct represents '0' with '-1482'
c Var 'aux190' direct represents '1' with '1482'
c Var 'aux190' order represents '1' with '1'
c Var 'aux190' order represents '0' with '-1482'
c Encoding variable: aux191 with domain: bool (representing constraint (((x_00009_00001=3) + (x_00009_00002=3) + (x_00009_00003=3) + (x_00009_00004=3) + (x_00009_00005=3) + (x_00009_00006=3) + (x_00009_00007=3) + (x_00009_00008=3) + (x_00009_00009=3))=tv=1))
c Var 'aux191' direct represents '0' with '-1483'
c Var 'aux191' direct represents '1' with '1483'
c Var 'aux191' order represents '1' with '1'
c Var 'aux191' order represents '0' with '-1483'
c Encoding variable: aux192 with domain: bool (representing constraint (((x_00009_00001=4) + (x_00009_00002=4) + (x_00009_00003=4) + (x_00009_00004=4) + (x_00009_00005=4) + (x_00009_00006=4) + (x_00009_00007=4) + (x_00009_00008=4) + (x_00009_00009=4))=tv=1))
c Var 'aux192' direct represents '0' with '-1484'
c Var 'aux192' direct represents '1' with '1484'
c Var 'aux192' order represents '1' with '1'
c Var 'aux192' order represents '0' with '-1484'
c Encoding variable: aux193 with domain: bool (representing constraint (((x_00009_00001=5) + (x_00009_00002=5) + (x_00009_00003=5) + (x_00009_00004=5) + (x_00009_00005=5) + (x_00009_00006=5) + (x_00009_00007=5) + (x_00009_00008=5) + (x_00009_00009=5))=tv=1))
c Var 'aux193' direct represents '0' with '-1485'
c Var 'aux193' direct represents '1' with '1485'
c Var 'aux193' order represents '1' with '1'
c Var 'aux193' order represents '0' with '-1485'
c Encoding variable: aux194 with domain: bool (representing constraint (((x_00009_00001=6) + (x_00009_00002=6) + (x_00009_00003=6) + (x_00009_00004=6) + (x_00009_00005=6) + (x_00009_00006=6) + (x_00009_00007=6) + (x_00009_00008=6) + (x_00009_00009=6))=tv=1))
c Var 'aux194' direct represents '0' with '-1486'
c Var 'aux194' direct represents '1' with '1486'
c Var 'aux194' order represents '1' with '1'
c Var 'aux194' order represents '0' with '-1486'
c Encoding variable: aux195 with domain: bool (representing constraint (((x_00009_00001=7) + (x_00009_00002=7) + (x_00009_00003=7) + (x_00009_00004=7) + (x_00009_00005=7) + (x_00009_00006=7) + (x_00009_00007=7) + (x_00009_00008=7) + (x_00009_00009=7))=tv=1))
c Var 'aux195' direct represents '0' with '-1487'
c Var 'aux195' direct represents '1' with '1487'
c Var 'aux195' order represents '1' with '1'
c Var 'aux195' order represents '0' with '-1487'
c Encoding variable: aux196 with domain: bool (representing constraint (((x_00009_00001=8) + (x_00009_00002=8) + (x_00009_00003=8) + (x_00009_00004=8) + (x_00009_00005=8) + (x_00009_00006=8) + (x_00009_00007=8) + (x_00009_00008=8) + (x_00009_00009=8))=tv=1))
c Var 'aux196' direct represents '0' with '-1488'
c Var 'aux196' direct represents '1' with '1488'
c Var 'aux196' order represents '1' with '1'
c Var 'aux196' order represents '0' with '-1488'
c Encoding variable: aux197 with domain: bool (representing constraint (((x_00009_00001=9) + (x_00009_00002=9) + (x_00009_00003=9) + (x_00009_00004=9) + (x_00009_00005=9) + (x_00009_00006=9) + (x_00009_00007=9) + (x_00009_00008=9) + (x_00009_00009=9))=tv=1))
c Var 'aux197' direct represents '0' with '-1489'
c Var 'aux197' direct represents '1' with '1489'
c Var 'aux197' order represents '1' with '1'
c Var 'aux197' order represents '0' with '-1489'
c Encoding variable: aux198 with domain: bool (representing constraint (((x_00003_00001=1) + (x_00003_00002=1) + (x_00003_00003=1) + (x_00001_00001=1) + (x_00001_00002=1) + (x_00001_00003=1) + (x_00002_00001=1) + (x_00002_00002=1) + (x_00002_00003=1))=tv=1))
c Var 'aux198' direct represents '0' with '-1490'
c Var 'aux198' direct represents '1' with '1490'
c Var 'aux198' order represents '1' with '1'
c Var 'aux198' order represents '0' with '-1490'
c Encoding variable: aux199 with domain: bool (representing constraint (((x_00003_00001=2) + (x_00003_00002=2) + (x_00003_00003=2) + (x_00001_00001=2) + (x_00001_00002=2) + (x_00001_00003=2) + (x_00002_00001=2) + (x_00002_00002=2) + (x_00002_00003=2))=tv=1))
c Var 'aux199' direct represents '0' with '-1491'
c Var 'aux199' direct represents '1' with '1491'
c Var 'aux199' order represents '1' with '1'
c Var 'aux199' order represents '0' with '-1491'
c Encoding variable: aux200 with domain: bool (representing constraint (((x_00003_00001=3) + (x_00003_00002=3) + (x_00003_00003=3) + (x_00001_00001=3) + (x_00001_00002=3) + (x_00001_00003=3) + (x_00002_00001=3) + (x_00002_00002=3) + (x_00002_00003=3))=tv=1))
c Var 'aux200' direct represents '0' with '-1492'
c Var 'aux200' direct represents '1' with '1492'
c Var 'aux200' order represents '1' with '1'
c Var 'aux200' order represents '0' with '-1492'
c Encoding variable: aux201 with domain: bool (representing constraint (((x_00003_00001=4) + (x_00003_00002=4) + (x_00003_00003=4) + (x_00001_00001=4) + (x_00001_00002=4) + (x_00001_00003=4) + (x_00002_00001=4) + (x_00002_00002=4) + (x_00002_00003=4))=tv=1))
c Var 'aux201' direct represents '0' with '-1493'
c Var 'aux201' direct represents '1' with '1493'
c Var 'aux201' order represents '1' with '1'
c Var 'aux201' order represents '0' with '-1493'
c Encoding variable: aux202 with domain: bool (representing constraint (((x_00003_00001=5) + (x_00003_00002=5) + (x_00003_00003=5) + (x_00001_00001=5) + (x_00001_00002=5) + (x_00001_00003=5) + (x_00002_00001=5) + (x_00002_00002=5) + (x_00002_00003=5))=tv=1))
c Var 'aux202' direct represents '0' with '-1494'
c Var 'aux202' direct represents '1' with '1494'
c Var 'aux202' order represents '1' with '1'
c Var 'aux202' order represents '0' with '-1494'
c Encoding variable: aux203 with domain: bool (representing constraint (((x_00003_00001=6) + (x_00003_00002=6) + (x_00003_00003=6) + (x_00001_00001=6) + (x_00001_00002=6) + (x_00001_00003=6) + (x_00002_00001=6) + (x_00002_00002=6) + (x_00002_00003=6))=tv=1))
c Var 'aux203' direct represents '0' with '-1495'
c Var 'aux203' direct represents '1' with '1495'
c Var 'aux203' order represents '1' with '1'
c Var 'aux203' order represents '0' with '-1495'
c Encoding variable: aux204 with domain: bool (representing constraint (((x_00003_00001=7) + (x_00003_00002=7) + (x_00003_00003=7) + (x_00001_00001=7) + (x_00001_00002=7) + (x_00001_00003=7) + (x_00002_00001=7) + (x_00002_00002=7) + (x_00002_00003=7))=tv=1))
c Var 'aux204' direct represents '0' with '-1496'
c Var 'aux204' direct represents '1' with '1496'
c Var 'aux204' order represents '1' with '1'
c Var 'aux204' order represents '0' with '-1496'
c Encoding variable: aux205 with domain: bool (representing constraint (((x_00003_00001=8) + (x_00003_00002=8) + (x_00003_00003=8) + (x_00001_00001=8) + (x_00001_00002=8) + (x_00001_00003=8) + (x_00002_00001=8) + (x_00002_00002=8) + (x_00002_00003=8))=tv=1))
c Var 'aux205' direct represents '0' with '-1497'
c Var 'aux205' direct represents '1' with '1497'
c Var 'aux205' order represents '1' with '1'
c Var 'aux205' order represents '0' with '-1497'
c Encoding variable: aux206 with domain: bool (representing constraint (((x_00003_00001=9) + (x_00003_00002=9) + (x_00003_00003=9) + (x_00001_00001=9) + (x_00001_00002=9) + (x_00001_00003=9) + (x_00002_00001=9) + (x_00002_00002=9) + (x_00002_00003=9))=tv=1))
c Var 'aux206' direct represents '0' with '-1498'
c Var 'aux206' direct represents '1' with '1498'
c Var 'aux206' order represents '1' with '1'
c Var 'aux206' order represents '0' with '-1498'
c Encoding variable: aux207 with domain: bool (representing constraint (((x_00003_00004=1) + (x_00003_00005=1) + (x_00003_00006=1) + (x_00001_00004=1) + (x_00001_00005=1) + (x_00001_00006=1) + (x_00002_00004=1) + (x_00002_00005=1) + (x_00002_00006=1))=tv=1))
c Var 'aux207' direct represents '0' with '-1499'
c Var 'aux207' direct represents '1' with '1499'
c Var 'aux207' order represents '1' with '1'
c Var 'aux207' order represents '0' with '-1499'
c Encoding variable: aux208 with domain: bool (representing constraint (((x_00003_00004=2) + (x_00003_00005=2) + (x_00003_00006=2) + (x_00001_00004=2) + (x_00001_00005=2) + (x_00001_00006=2) + (x_00002_00004=2) + (x_00002_00005=2) + (x_00002_00006=2))=tv=1))
c Var 'aux208' direct represents '0' with '-1500'
c Var 'aux208' direct represents '1' with '1500'
c Var 'aux208' order represents '1' with '1'
c Var 'aux208' order represents '0' with '-1500'
c Encoding variable: aux209 with domain: bool (representing constraint (((x_00003_00004=3) + (x_00003_00005=3) + (x_00003_00006=3) + (x_00001_00004=3) + (x_00001_00005=3) + (x_00001_00006=3) + (x_00002_00004=3) + (x_00002_00005=3) + (x_00002_00006=3))=tv=1))
c Var 'aux209' direct represents '0' with '-1501'
c Var 'aux209' direct represents '1' with '1501'
c Var 'aux209' order represents '1' with '1'
c Var 'aux209' order represents '0' with '-1501'
c Encoding variable: aux210 with domain: bool (representing constraint (((x_00003_00004=4) + (x_00003_00005=4) + (x_00003_00006=4) + (x_00001_00004=4) + (x_00001_00005=4) + (x_00001_00006=4) + (x_00002_00004=4) + (x_00002_00005=4) + (x_00002_00006=4))=tv=1))
c Var 'aux210' direct represents '0' with '-1502'
c Var 'aux210' direct represents '1' with '1502'
c Var 'aux210' order represents '1' with '1'
c Var 'aux210' order represents '0' with '-1502'
c Encoding variable: aux211 with domain: bool (representing constraint (((x_00003_00004=5) + (x_00003_00005=5) + (x_00003_00006=5) + (x_00001_00004=5) + (x_00001_00005=5) + (x_00001_00006=5) + (x_00002_00004=5) + (x_00002_00005=5) + (x_00002_00006=5))=tv=1))
c Var 'aux211' direct represents '0' with '-1503'
c Var 'aux211' direct represents '1' with '1503'
c Var 'aux211' order represents '1' with '1'
c Var 'aux211' order represents '0' with '-1503'
c Encoding variable: aux212 with domain: bool (representing constraint (((x_00003_00004=6) + (x_00003_00005=6) + (x_00003_00006=6) + (x_00001_00004=6) + (x_00001_00005=6) + (x_00001_00006=6) + (x_00002_00004=6) + (x_00002_00005=6) + (x_00002_00006=6))=tv=1))
c Var 'aux212' direct represents '0' with '-1504'
c Var 'aux212' direct represents '1' with '1504'
c Var 'aux212' order represents '1' with '1'
c Var 'aux212' order represents '0' with '-1504'
c Encoding variable: aux213 with domain: bool (representing constraint (((x_00003_00004=7) + (x_00003_00005=7) + (x_00003_00006=7) + (x_00001_00004=7) + (x_00001_00005=7) + (x_00001_00006=7) + (x_00002_00004=7) + (x_00002_00005=7) + (x_00002_00006=7))=tv=1))
c Var 'aux213' direct represents '0' with '-1505'
c Var 'aux213' direct represents '1' with '1505'
c Var 'aux213' order represents '1' with '1'
c Var 'aux213' order represents '0' with '-1505'
c Encoding variable: aux214 with domain: bool (representing constraint (((x_00003_00004=8) + (x_00003_00005=8) + (x_00003_00006=8) + (x_00001_00004=8) + (x_00001_00005=8) + (x_00001_00006=8) + (x_00002_00004=8) + (x_00002_00005=8) + (x_00002_00006=8))=tv=1))
c Var 'aux214' direct represents '0' with '-1506'
c Var 'aux214' direct represents '1' with '1506'
c Var 'aux214' order represents '1' with '1'
c Var 'aux214' order represents '0' with '-1506'
c Encoding variable: aux215 with domain: bool (representing constraint (((x_00003_00004=9) + (x_00003_00005=9) + (x_00003_00006=9) + (x_00001_00004=9) + (x_00001_00005=9) + (x_00001_00006=9) + (x_00002_00004=9) + (x_00002_00005=9) + (x_00002_00006=9))=tv=1))
c Var 'aux215' direct represents '0' with '-1507'
c Var 'aux215' direct represents '1' with '1507'
c Var 'aux215' order represents '1' with '1'
c Var 'aux215' order represents '0' with '-1507'
c Encoding variable: aux216 with domain: bool (representing constraint (((x_00003_00007=1) + (x_00003_00008=1) + (x_00003_00009=1) + (x_00001_00007=1) + (x_00001_00008=1) + (x_00001_00009=1) + (x_00002_00007=1) + (x_00002_00008=1) + (x_00002_00009=1))=tv=1))
c Var 'aux216' direct represents '0' with '-1508'
c Var 'aux216' direct represents '1' with '1508'
c Var 'aux216' order represents '1' with '1'
c Var 'aux216' order represents '0' with '-1508'
c Encoding variable: aux217 with domain: bool (representing constraint (((x_00003_00007=2) + (x_00003_00008=2) + (x_00003_00009=2) + (x_00001_00007=2) + (x_00001_00008=2) + (x_00001_00009=2) + (x_00002_00007=2) + (x_00002_00008=2) + (x_00002_00009=2))=tv=1))
c Var 'aux217' direct represents '0' with '-1509'
c Var 'aux217' direct represents '1' with '1509'
c Var 'aux217' order represents '1' with '1'
c Var 'aux217' order represents '0' with '-1509'
c Encoding variable: aux218 with domain: bool (representing constraint (((x_00003_00007=3) + (x_00003_00008=3) + (x_00003_00009=3) + (x_00001_00007=3) + (x_00001_00008=3) + (x_00001_00009=3) + (x_00002_00007=3) + (x_00002_00008=3) + (x_00002_00009=3))=tv=1))
c Var 'aux218' direct represents '0' with '-1510'
c Var 'aux218' direct represents '1' with '1510'
c Var 'aux218' order represents '1' with '1'
c Var 'aux218' order represents '0' with '-1510'
c Encoding variable: aux219 with domain: bool (representing constraint (((x_00003_00007=4) + (x_00003_00008=4) + (x_00003_00009=4) + (x_00001_00007=4) + (x_00001_00008=4) + (x_00001_00009=4) + (x_00002_00007=4) + (x_00002_00008=4) + (x_00002_00009=4))=tv=1))
c Var 'aux219' direct represents '0' with '-1511'
c Var 'aux219' direct represents '1' with '1511'
c Var 'aux219' order represents '1' with '1'
c Var 'aux219' order represents '0' with '-1511'
c Encoding variable: aux220 with domain: bool (representing constraint (((x_00003_00007=5) + (x_00003_00008=5) + (x_00003_00009=5) + (x_00001_00007=5) + (x_00001_00008=5) + (x_00001_00009=5) + (x_00002_00007=5) + (x_00002_00008=5) + (x_00002_00009=5))=tv=1))
c Var 'aux220' direct represents '0' with '-1512'
c Var 'aux220' direct represents '1' with '1512'
c Var 'aux220' order represents '1' with '1'
c Var 'aux220' order represents '0' with '-1512'
c Encoding variable: aux221 with domain: bool (representing constraint (((x_00003_00007=6) + (x_00003_00008=6) + (x_00003_00009=6) + (x_00001_00007=6) + (x_00001_00008=6) + (x_00001_00009=6) + (x_00002_00007=6) + (x_00002_00008=6) + (x_00002_00009=6))=tv=1))
c Var 'aux221' direct represents '0' with '-1513'
c Var 'aux221' direct represents '1' with '1513'
c Var 'aux221' order represents '1' with '1'
c Var 'aux221' order represents '0' with '-1513'
c Encoding variable: aux222 with domain: bool (representing constraint (((x_00003_00007=7) + (x_00003_00008=7) + (x_00003_00009=7) + (x_00001_00007=7) + (x_00001_00008=7) + (x_00001_00009=7) + (x_00002_00007=7) + (x_00002_00008=7) + (x_00002_00009=7))=tv=1))
c Var 'aux222' direct represents '0' with '-1514'
c Var 'aux222' direct represents '1' with '1514'
c Var 'aux222' order represents '1' with '1'
c Var 'aux222' order represents '0' with '-1514'
c Encoding variable: aux223 with domain: bool (representing constraint (((x_00003_00007=8) + (x_00003_00008=8) + (x_00003_00009=8) + (x_00001_00007=8) + (x_00001_00008=8) + (x_00001_00009=8) + (x_00002_00007=8) + (x_00002_00008=8) + (x_00002_00009=8))=tv=1))
c Var 'aux223' direct represents '0' with '-1515'
c Var 'aux223' direct represents '1' with '1515'
c Var 'aux223' order represents '1' with '1'
c Var 'aux223' order represents '0' with '-1515'
c Encoding variable: aux224 with domain: bool (representing constraint (((x_00003_00007=9) + (x_00003_00008=9) + (x_00003_00009=9) + (x_00001_00007=9) + (x_00001_00008=9) + (x_00001_00009=9) + (x_00002_00007=9) + (x_00002_00008=9) + (x_00002_00009=9))=tv=1))
c Var 'aux224' direct represents '0' with '-1516'
c Var 'aux224' direct represents '1' with '1516'
c Var 'aux224' order represents '1' with '1'
c Var 'aux224' order represents '0' with '-1516'
c Encoding variable: aux225 with domain: bool (representing constraint (((x_00006_00001=1) + (x_00006_00002=1) + (x_00006_00003=1) + (x_00004_00001=1) + (x_00004_00002=1) + (x_00004_00003=1) + (x_00005_00001=1) + (x_00005_00002=1) + (x_00005_00003=1))=tv=1))
c Var 'aux225' direct represents '0' with '-1517'
c Var 'aux225' direct represents '1' with '1517'
c Var 'aux225' order represents '1' with '1'
c Var 'aux225' order represents '0' with '-1517'
c Encoding variable: aux226 with domain: bool (representing constraint (((x_00006_00001=2) + (x_00006_00002=2) + (x_00006_00003=2) + (x_00004_00001=2) + (x_00004_00002=2) + (x_00004_00003=2) + (x_00005_00001=2) + (x_00005_00002=2) + (x_00005_00003=2))=tv=1))
c Var 'aux226' direct represents '0' with '-1518'
c Var 'aux226' direct represents '1' with '1518'
c Var 'aux226' order represents '1' with '1'
c Var 'aux226' order represents '0' with '-1518'
c Encoding variable: aux227 with domain: bool (representing constraint (((x_00006_00001=3) + (x_00006_00002=3) + (x_00006_00003=3) + (x_00004_00001=3) + (x_00004_00002=3) + (x_00004_00003=3) + (x_00005_00001=3) + (x_00005_00002=3) + (x_00005_00003=3))=tv=1))
c Var 'aux227' direct represents '0' with '-1519'
c Var 'aux227' direct represents '1' with '1519'
c Var 'aux227' order represents '1' with '1'
c Var 'aux227' order represents '0' with '-1519'
c Encoding variable: aux228 with domain: bool (representing constraint (((x_00006_00001=4) + (x_00006_00002=4) + (x_00006_00003=4) + (x_00004_00001=4) + (x_00004_00002=4) + (x_00004_00003=4) + (x_00005_00001=4) + (x_00005_00002=4) + (x_00005_00003=4))=tv=1))
c Var 'aux228' direct represents '0' with '-1520'
c Var 'aux228' direct represents '1' with '1520'
c Var 'aux228' order represents '1' with '1'
c Var 'aux228' order represents '0' with '-1520'
c Encoding variable: aux229 with domain: bool (representing constraint (((x_00006_00001=5) + (x_00006_00002=5) + (x_00006_00003=5) + (x_00004_00001=5) + (x_00004_00002=5) + (x_00004_00003=5) + (x_00005_00001=5) + (x_00005_00002=5) + (x_00005_00003=5))=tv=1))
c Var 'aux229' direct represents '0' with '-1521'
c Var 'aux229' direct represents '1' with '1521'
c Var 'aux229' order represents '1' with '1'
c Var 'aux229' order represents '0' with '-1521'
c Encoding variable: aux230 with domain: bool (representing constraint (((x_00006_00001=6) + (x_00006_00002=6) + (x_00006_00003=6) + (x_00004_00001=6) + (x_00004_00002=6) + (x_00004_00003=6) + (x_00005_00001=6) + (x_00005_00002=6) + (x_00005_00003=6))=tv=1))
c Var 'aux230' direct represents '0' with '-1522'
c Var 'aux230' direct represents '1' with '1522'
c Var 'aux230' order represents '1' with '1'
c Var 'aux230' order represents '0' with '-1522'
c Encoding variable: aux231 with domain: bool (representing constraint (((x_00006_00001=7) + (x_00006_00002=7) + (x_00006_00003=7) + (x_00004_00001=7) + (x_00004_00002=7) + (x_00004_00003=7) + (x_00005_00001=7) + (x_00005_00002=7) + (x_00005_00003=7))=tv=1))
c Var 'aux231' direct represents '0' with '-1523'
c Var 'aux231' direct represents '1' with '1523'
c Var 'aux231' order represents '1' with '1'
c Var 'aux231' order represents '0' with '-1523'
c Encoding variable: aux232 with domain: bool (representing constraint (((x_00006_00001=8) + (x_00006_00002=8) + (x_00006_00003=8) + (x_00004_00001=8) + (x_00004_00002=8) + (x_00004_00003=8) + (x_00005_00001=8) + (x_00005_00002=8) + (x_00005_00003=8))=tv=1))
c Var 'aux232' direct represents '0' with '-1524'
c Var 'aux232' direct represents '1' with '1524'
c Var 'aux232' order represents '1' with '1'
c Var 'aux232' order represents '0' with '-1524'
c Encoding variable: aux233 with domain: bool (representing constraint (((x_00006_00001=9) + (x_00006_00002=9) + (x_00006_00003=9) + (x_00004_00001=9) + (x_00004_00002=9) + (x_00004_00003=9) + (x_00005_00001=9) + (x_00005_00002=9) + (x_00005_00003=9))=tv=1))
c Var 'aux233' direct represents '0' with '-1525'
c Var 'aux233' direct represents '1' with '1525'
c Var 'aux233' order represents '1' with '1'
c Var 'aux233' order represents '0' with '-1525'
c Encoding variable: aux234 with domain: bool (representing constraint (((x_00006_00004=1) + (x_00006_00005=1) + (x_00006_00006=1) + (x_00004_00004=1) + (x_00004_00005=1) + (x_00004_00006=1) + (x_00005_00004=1) + (x_00005_00005=1) + (x_00005_00006=1))=tv=1))
c Var 'aux234' direct represents '0' with '-1526'
c Var 'aux234' direct represents '1' with '1526'
c Var 'aux234' order represents '1' with '1'
c Var 'aux234' order represents '0' with '-1526'
c Encoding variable: aux235 with domain: bool (representing constraint (((x_00006_00004=2) + (x_00006_00005=2) + (x_00006_00006=2) + (x_00004_00004=2) + (x_00004_00005=2) + (x_00004_00006=2) + (x_00005_00004=2) + (x_00005_00005=2) + (x_00005_00006=2))=tv=1))
c Var 'aux235' direct represents '0' with '-1527'
c Var 'aux235' direct represents '1' with '1527'
c Var 'aux235' order represents '1' with '1'
c Var 'aux235' order represents '0' with '-1527'
c Encoding variable: aux236 with domain: bool (representing constraint (((x_00006_00004=3) + (x_00006_00005=3) + (x_00006_00006=3) + (x_00004_00004=3) + (x_00004_00005=3) + (x_00004_00006=3) + (x_00005_00004=3) + (x_00005_00005=3) + (x_00005_00006=3))=tv=1))
c Var 'aux236' direct represents '0' with '-1528'
c Var 'aux236' direct represents '1' with '1528'
c Var 'aux236' order represents '1' with '1'
c Var 'aux236' order represents '0' with '-1528'
c Encoding variable: aux237 with domain: bool (representing constraint (((x_00006_00004=4) + (x_00006_00005=4) + (x_00006_00006=4) + (x_00004_00004=4) + (x_00004_00005=4) + (x_00004_00006=4) + (x_00005_00004=4) + (x_00005_00005=4) + (x_00005_00006=4))=tv=1))
c Var 'aux237' direct represents '0' with '-1529'
c Var 'aux237' direct represents '1' with '1529'
c Var 'aux237' order represents '1' with '1'
c Var 'aux237' order represents '0' with '-1529'
c Encoding variable: aux238 with domain: bool (representing constraint (((x_00006_00004=5) + (x_00006_00005=5) + (x_00006_00006=5) + (x_00004_00004=5) + (x_00004_00005=5) + (x_00004_00006=5) + (x_00005_00004=5) + (x_00005_00005=5) + (x_00005_00006=5))=tv=1))
c Var 'aux238' direct represents '0' with '-1530'
c Var 'aux238' direct represents '1' with '1530'
c Var 'aux238' order represents '1' with '1'
c Var 'aux238' order represents '0' with '-1530'
c Encoding variable: aux239 with domain: bool (representing constraint (((x_00006_00004=6) + (x_00006_00005=6) + (x_00006_00006=6) + (x_00004_00004=6) + (x_00004_00005=6) + (x_00004_00006=6) + (x_00005_00004=6) + (x_00005_00005=6) + (x_00005_00006=6))=tv=1))
c Var 'aux239' direct represents '0' with '-1531'
c Var 'aux239' direct represents '1' with '1531'
c Var 'aux239' order represents '1' with '1'
c Var 'aux239' order represents '0' with '-1531'
c Encoding variable: aux240 with domain: bool (representing constraint (((x_00006_00004=7) + (x_00006_00005=7) + (x_00006_00006=7) + (x_00004_00004=7) + (x_00004_00005=7) + (x_00004_00006=7) + (x_00005_00004=7) + (x_00005_00005=7) + (x_00005_00006=7))=tv=1))
c Var 'aux240' direct represents '0' with '-1532'
c Var 'aux240' direct represents '1' with '1532'
c Var 'aux240' order represents '1' with '1'
c Var 'aux240' order represents '0' with '-1532'
c Encoding variable: aux241 with domain: bool (representing constraint (((x_00006_00004=8) + (x_00006_00005=8) + (x_00006_00006=8) + (x_00004_00004=8) + (x_00004_00005=8) + (x_00004_00006=8) + (x_00005_00004=8) + (x_00005_00005=8) + (x_00005_00006=8))=tv=1))
c Var 'aux241' direct represents '0' with '-1533'
c Var 'aux241' direct represents '1' with '1533'
c Var 'aux241' order represents '1' with '1'
c Var 'aux241' order represents '0' with '-1533'
c Encoding variable: aux242 with domain: bool (representing constraint (((x_00006_00004=9) + (x_00006_00005=9) + (x_00006_00006=9) + (x_00004_00004=9) + (x_00004_00005=9) + (x_00004_00006=9) + (x_00005_00004=9) + (x_00005_00005=9) + (x_00005_00006=9))=tv=1))
c Var 'aux242' direct represents '0' with '-1534'
c Var 'aux242' direct represents '1' with '1534'
c Var 'aux242' order represents '1' with '1'
c Var 'aux242' order represents '0' with '-1534'
c Encoding variable: aux243 with domain: bool (representing constraint (((x_00006_00007=1) + (x_00006_00008=1) + (x_00006_00009=1) + (x_00004_00007=1) + (x_00004_00008=1) + (x_00004_00009=1) + (x_00005_00007=1) + (x_00005_00008=1) + (x_00005_00009=1))=tv=1))
c Var 'aux243' direct represents '0' with '-1535'
c Var 'aux243' direct represents '1' with '1535'
c Var 'aux243' order represents '1' with '1'
c Var 'aux243' order represents '0' with '-1535'
c Encoding variable: aux244 with domain: bool (representing constraint (((x_00006_00007=2) + (x_00006_00008=2) + (x_00006_00009=2) + (x_00004_00007=2) + (x_00004_00008=2) + (x_00004_00009=2) + (x_00005_00007=2) + (x_00005_00008=2) + (x_00005_00009=2))=tv=1))
c Var 'aux244' direct represents '0' with '-1536'
c Var 'aux244' direct represents '1' with '1536'
c Var 'aux244' order represents '1' with '1'
c Var 'aux244' order represents '0' with '-1536'
c Encoding variable: aux245 with domain: bool (representing constraint (((x_00006_00007=3) + (x_00006_00008=3) + (x_00006_00009=3) + (x_00004_00007=3) + (x_00004_00008=3) + (x_00004_00009=3) + (x_00005_00007=3) + (x_00005_00008=3) + (x_00005_00009=3))=tv=1))
c Var 'aux245' direct represents '0' with '-1537'
c Var 'aux245' direct represents '1' with '1537'
c Var 'aux245' order represents '1' with '1'
c Var 'aux245' order represents '0' with '-1537'
c Encoding variable: aux246 with domain: bool (representing constraint (((x_00006_00007=4) + (x_00006_00008=4) + (x_00006_00009=4) + (x_00004_00007=4) + (x_00004_00008=4) + (x_00004_00009=4) + (x_00005_00007=4) + (x_00005_00008=4) + (x_00005_00009=4))=tv=1))
c Var 'aux246' direct represents '0' with '-1538'
c Var 'aux246' direct represents '1' with '1538'
c Var 'aux246' order represents '1' with '1'
c Var 'aux246' order represents '0' with '-1538'
c Encoding variable: aux247 with domain: bool (representing constraint (((x_00006_00007=5) + (x_00006_00008=5) + (x_00006_00009=5) + (x_00004_00007=5) + (x_00004_00008=5) + (x_00004_00009=5) + (x_00005_00007=5) + (x_00005_00008=5) + (x_00005_00009=5))=tv=1))
c Var 'aux247' direct represents '0' with '-1539'
c Var 'aux247' direct represents '1' with '1539'
c Var 'aux247' order represents '1' with '1'
c Var 'aux247' order represents '0' with '-1539'
c Encoding variable: aux248 with domain: bool (representing constraint (((x_00006_00007=6) + (x_00006_00008=6) + (x_00006_00009=6) + (x_00004_00007=6) + (x_00004_00008=6) + (x_00004_00009=6) + (x_00005_00007=6) + (x_00005_00008=6) + (x_00005_00009=6))=tv=1))
c Var 'aux248' direct represents '0' with '-1540'
c Var 'aux248' direct represents '1' with '1540'
c Var 'aux248' order represents '1' with '1'
c Var 'aux248' order represents '0' with '-1540'
c Encoding variable: aux249 with domain: bool (representing constraint (((x_00006_00007=7) + (x_00006_00008=7) + (x_00006_00009=7) + (x_00004_00007=7) + (x_00004_00008=7) + (x_00004_00009=7) + (x_00005_00007=7) + (x_00005_00008=7) + (x_00005_00009=7))=tv=1))
c Var 'aux249' direct represents '0' with '-1541'
c Var 'aux249' direct represents '1' with '1541'
c Var 'aux249' order represents '1' with '1'
c Var 'aux249' order represents '0' with '-1541'
c Encoding variable: aux250 with domain: bool (representing constraint (((x_00006_00007=8) + (x_00006_00008=8) + (x_00006_00009=8) + (x_00004_00007=8) + (x_00004_00008=8) + (x_00004_00009=8) + (x_00005_00007=8) + (x_00005_00008=8) + (x_00005_00009=8))=tv=1))
c Var 'aux250' direct represents '0' with '-1542'
c Var 'aux250' direct represents '1' with '1542'
c Var 'aux250' order represents '1' with '1'
c Var 'aux250' order represents '0' with '-1542'
c Encoding variable: aux251 with domain: bool (representing constraint (((x_00006_00007=9) + (x_00006_00008=9) + (x_00006_00009=9) + (x_00004_00007=9) + (x_00004_00008=9) + (x_00004_00009=9) + (x_00005_00007=9) + (x_00005_00008=9) + (x_00005_00009=9))=tv=1))
c Var 'aux251' direct represents '0' with '-1543'
c Var 'aux251' direct represents '1' with '1543'
c Var 'aux251' order represents '1' with '1'
c Var 'aux251' order represents '0' with '-1543'
c Encoding variable: aux252 with domain: bool (representing constraint (((x_00008_00001=1) + (x_00008_00002=1) + (x_00008_00003=1) + (x_00009_00001=1) + (x_00009_00002=1) + (x_00009_00003=1) + (x_00007_00001=1) + (x_00007_00002=1) + (x_00007_00003=1))=tv=1))
c Var 'aux252' direct represents '0' with '-1544'
c Var 'aux252' direct represents '1' with '1544'
c Var 'aux252' order represents '1' with '1'
c Var 'aux252' order represents '0' with '-1544'
c Encoding variable: aux253 with domain: bool (representing constraint (((x_00008_00001=2) + (x_00008_00002=2) + (x_00008_00003=2) + (x_00009_00001=2) + (x_00009_00002=2) + (x_00009_00003=2) + (x_00007_00001=2) + (x_00007_00002=2) + (x_00007_00003=2))=tv=1))
c Var 'aux253' direct represents '0' with '-1545'
c Var 'aux253' direct represents '1' with '1545'
c Var 'aux253' order represents '1' with '1'
c Var 'aux253' order represents '0' with '-1545'
c Encoding variable: aux254 with domain: bool (representing constraint (((x_00008_00001=3) + (x_00008_00002=3) + (x_00008_00003=3) + (x_00009_00001=3) + (x_00009_00002=3) + (x_00009_00003=3) + (x_00007_00001=3) + (x_00007_00002=3) + (x_00007_00003=3))=tv=1))
c Var 'aux254' direct represents '0' with '-1546'
c Var 'aux254' direct represents '1' with '1546'
c Var 'aux254' order represents '1' with '1'
c Var 'aux254' order represents '0' with '-1546'
c Encoding variable: aux255 with domain: bool (representing constraint (((x_00008_00001=4) + (x_00008_00002=4) + (x_00008_00003=4) + (x_00009_00001=4) + (x_00009_00002=4) + (x_00009_00003=4) + (x_00007_00001=4) + (x_00007_00002=4) + (x_00007_00003=4))=tv=1))
c Var 'aux255' direct represents '0' with '-1547'
c Var 'aux255' direct represents '1' with '1547'
c Var 'aux255' order represents '1' with '1'
c Var 'aux255' order represents '0' with '-1547'
c Encoding variable: aux256 with domain: bool (representing constraint (((x_00008_00001=5) + (x_00008_00002=5) + (x_00008_00003=5) + (x_00009_00001=5) + (x_00009_00002=5) + (x_00009_00003=5) + (x_00007_00001=5) + (x_00007_00002=5) + (x_00007_00003=5))=tv=1))
c Var 'aux256' direct represents '0' with '-1548'
c Var 'aux256' direct represents '1' with '1548'
c Var 'aux256' order represents '1' with '1'
c Var 'aux256' order represents '0' with '-1548'
c Encoding variable: aux257 with domain: bool (representing constraint (((x_00008_00001=6) + (x_00008_00002=6) + (x_00008_00003=6) + (x_00009_00001=6) + (x_00009_00002=6) + (x_00009_00003=6) + (x_00007_00001=6) + (x_00007_00002=6) + (x_00007_00003=6))=tv=1))
c Var 'aux257' direct represents '0' with '-1549'
c Var 'aux257' direct represents '1' with '1549'
c Var 'aux257' order represents '1' with '1'
c Var 'aux257' order represents '0' with '-1549'
c Encoding variable: aux258 with domain: bool (representing constraint (((x_00008_00001=7) + (x_00008_00002=7) + (x_00008_00003=7) + (x_00009_00001=7) + (x_00009_00002=7) + (x_00009_00003=7) + (x_00007_00001=7) + (x_00007_00002=7) + (x_00007_00003=7))=tv=1))
c Var 'aux258' direct represents '0' with '-1550'
c Var 'aux258' direct represents '1' with '1550'
c Var 'aux258' order represents '1' with '1'
c Var 'aux258' order represents '0' with '-1550'
c Encoding variable: aux259 with domain: bool (representing constraint (((x_00008_00001=8) + (x_00008_00002=8) + (x_00008_00003=8) + (x_00009_00001=8) + (x_00009_00002=8) + (x_00009_00003=8) + (x_00007_00001=8) + (x_00007_00002=8) + (x_00007_00003=8))=tv=1))
c Var 'aux259' direct represents '0' with '-1551'
c Var 'aux259' direct represents '1' with '1551'
c Var 'aux259' order represents '1' with '1'
c Var 'aux259' order represents '0' with '-1551'
c Encoding variable: aux260 with domain: bool (representing constraint (((x_00008_00001=9) + (x_00008_00002=9) + (x_00008_00003=9) + (x_00009_00001=9) + (x_00009_00002=9) + (x_00009_00003=9) + (x_00007_00001=9) + (x_00007_00002=9) + (x_00007_00003=9))=tv=1))
c Var 'aux260' direct represents '0' with '-1552'
c Var 'aux260' direct represents '1' with '1552'
c Var 'aux260' order represents '1' with '1'
c Var 'aux260' order represents '0' with '-1552'
c Encoding variable: aux261 with domain: bool (representing constraint (((x_00008_00004=1) + (x_00008_00005=1) + (x_00008_00006=1) + (x_00009_00004=1) + (x_00009_00005=1) + (x_00009_00006=1) + (x_00007_00004=1) + (x_00007_00005=1) + (x_00007_00006=1))=tv=1))
c Var 'aux261' direct represents '0' with '-1553'
c Var 'aux261' direct represents '1' with '1553'
c Var 'aux261' order represents '1' with '1'
c Var 'aux261' order represents '0' with '-1553'
c Encoding variable: aux262 with domain: bool (representing constraint (((x_00008_00004=2) + (x_00008_00005=2) + (x_00008_00006=2) + (x_00009_00004=2) + (x_00009_00005=2) + (x_00009_00006=2) + (x_00007_00004=2) + (x_00007_00005=2) + (x_00007_00006=2))=tv=1))
c Var 'aux262' direct represents '0' with '-1554'
c Var 'aux262' direct represents '1' with '1554'
c Var 'aux262' order represents '1' with '1'
c Var 'aux262' order represents '0' with '-1554'
c Encoding variable: aux263 with domain: bool (representing constraint (((x_00008_00004=3) + (x_00008_00005=3) + (x_00008_00006=3) + (x_00009_00004=3) + (x_00009_00005=3) + (x_00009_00006=3) + (x_00007_00004=3) + (x_00007_00005=3) + (x_00007_00006=3))=tv=1))
c Var 'aux263' direct represents '0' with '-1555'
c Var 'aux263' direct represents '1' with '1555'
c Var 'aux263' order represents '1' with '1'
c Var 'aux263' order represents '0' with '-1555'
c Encoding variable: aux264 with domain: bool (representing constraint (((x_00008_00004=4) + (x_00008_00005=4) + (x_00008_00006=4) + (x_00009_00004=4) + (x_00009_00005=4) + (x_00009_00006=4) + (x_00007_00004=4) + (x_00007_00005=4) + (x_00007_00006=4))=tv=1))
c Var 'aux264' direct represents '0' with '-1556'
c Var 'aux264' direct represents '1' with '1556'
c Var 'aux264' order represents '1' with '1'
c Var 'aux264' order represents '0' with '-1556'
c Encoding variable: aux265 with domain: bool (representing constraint (((x_00008_00004=5) + (x_00008_00005=5) + (x_00008_00006=5) + (x_00009_00004=5) + (x_00009_00005=5) + (x_00009_00006=5) + (x_00007_00004=5) + (x_00007_00005=5) + (x_00007_00006=5))=tv=1))
c Var 'aux265' direct represents '0' with '-1557'
c Var 'aux265' direct represents '1' with '1557'
c Var 'aux265' order represents '1' with '1'
c Var 'aux265' order represents '0' with '-1557'
c Encoding variable: aux266 with domain: bool (representing constraint (((x_00008_00004=6) + (x_00008_00005=6) + (x_00008_00006=6) + (x_00009_00004=6) + (x_00009_00005=6) + (x_00009_00006=6) + (x_00007_00004=6) + (x_00007_00005=6) + (x_00007_00006=6))=tv=1))
c Var 'aux266' direct represents '0' with '-1558'
c Var 'aux266' direct represents '1' with '1558'
c Var 'aux266' order represents '1' with '1'
c Var 'aux266' order represents '0' with '-1558'
c Encoding variable: aux267 with domain: bool (representing constraint (((x_00008_00004=7) + (x_00008_00005=7) + (x_00008_00006=7) + (x_00009_00004=7) + (x_00009_00005=7) + (x_00009_00006=7) + (x_00007_00004=7) + (x_00007_00005=7) + (x_00007_00006=7))=tv=1))
c Var 'aux267' direct represents '0' with '-1559'
c Var 'aux267' direct represents '1' with '1559'
c Var 'aux267' order represents '1' with '1'
c Var 'aux267' order represents '0' with '-1559'
c Encoding variable: aux268 with domain: bool (representing constraint (((x_00008_00004=8) + (x_00008_00005=8) + (x_00008_00006=8) + (x_00009_00004=8) + (x_00009_00005=8) + (x_00009_00006=8) + (x_00007_00004=8) + (x_00007_00005=8) + (x_00007_00006=8))=tv=1))
c Var 'aux268' direct represents '0' with '-1560'
c Var 'aux268' direct represents '1' with '1560'
c Var 'aux268' order represents '1' with '1'
c Var 'aux268' order represents '0' with '-1560'
c Encoding variable: aux269 with domain: bool (representing constraint (((x_00008_00004=9) + (x_00008_00005=9) + (x_00008_00006=9) + (x_00009_00004=9) + (x_00009_00005=9) + (x_00009_00006=9) + (x_00007_00004=9) + (x_00007_00005=9) + (x_00007_00006=9))=tv=1))
c Var 'aux269' direct represents '0' with '-1561'
c Var 'aux269' direct represents '1' with '1561'
c Var 'aux269' order represents '1' with '1'
c Var 'aux269' order represents '0' with '-1561'
c Encoding variable: aux270 with domain: bool (representing constraint (((x_00008_00007=1) + (x_00008_00008=1) + (x_00008_00009=1) + (x_00009_00007=1) + (x_00009_00008=1) + (x_00009_00009=1) + (x_00007_00007=1) + (x_00007_00008=1) + (x_00007_00009=1))=tv=1))
c Var 'aux270' direct represents '0' with '-1562'
c Var 'aux270' direct represents '1' with '1562'
c Var 'aux270' order represents '1' with '1'
c Var 'aux270' order represents '0' with '-1562'
c Encoding variable: aux271 with domain: bool (representing constraint (((x_00008_00007=2) + (x_00008_00008=2) + (x_00008_00009=2) + (x_00009_00007=2) + (x_00009_00008=2) + (x_00009_00009=2) + (x_00007_00007=2) + (x_00007_00008=2) + (x_00007_00009=2))=tv=1))
c Var 'aux271' direct represents '0' with '-1563'
c Var 'aux271' direct represents '1' with '1563'
c Var 'aux271' order represents '1' with '1'
c Var 'aux271' order represents '0' with '-1563'
c Encoding variable: aux272 with domain: bool (representing constraint (((x_00008_00007=3) + (x_00008_00008=3) + (x_00008_00009=3) + (x_00009_00007=3) + (x_00009_00008=3) + (x_00009_00009=3) + (x_00007_00007=3) + (x_00007_00008=3) + (x_00007_00009=3))=tv=1))
c Var 'aux272' direct represents '0' with '-1564'
c Var 'aux272' direct represents '1' with '1564'
c Var 'aux272' order represents '1' with '1'
c Var 'aux272' order represents '0' with '-1564'
c Encoding variable: aux273 with domain: bool (representing constraint (((x_00008_00007=4) + (x_00008_00008=4) + (x_00008_00009=4) + (x_00009_00007=4) + (x_00009_00008=4) + (x_00009_00009=4) + (x_00007_00007=4) + (x_00007_00008=4) + (x_00007_00009=4))=tv=1))
c Var 'aux273' direct represents '0' with '-1565'
c Var 'aux273' direct represents '1' with '1565'
c Var 'aux273' order represents '1' with '1'
c Var 'aux273' order represents '0' with '-1565'
c Encoding variable: aux274 with domain: bool (representing constraint (((x_00008_00007=5) + (x_00008_00008=5) + (x_00008_00009=5) + (x_00009_00007=5) + (x_00009_00008=5) + (x_00009_00009=5) + (x_00007_00007=5) + (x_00007_00008=5) + (x_00007_00009=5))=tv=1))
c Var 'aux274' direct represents '0' with '-1566'
c Var 'aux274' direct represents '1' with '1566'
c Var 'aux274' order represents '1' with '1'
c Var 'aux274' order represents '0' with '-1566'
c Encoding variable: aux275 with domain: bool (representing constraint (((x_00008_00007=6) + (x_00008_00008=6) + (x_00008_00009=6) + (x_00009_00007=6) + (x_00009_00008=6) + (x_00009_00009=6) + (x_00007_00007=6) + (x_00007_00008=6) + (x_00007_00009=6))=tv=1))
c Var 'aux275' direct represents '0' with '-1567'
c Var 'aux275' direct represents '1' with '1567'
c Var 'aux275' order represents '1' with '1'
c Var 'aux275' order represents '0' with '-1567'
c Encoding variable: aux276 with domain: bool (representing constraint (((x_00008_00007=7) + (x_00008_00008=7) + (x_00008_00009=7) + (x_00009_00007=7) + (x_00009_00008=7) + (x_00009_00009=7) + (x_00007_00007=7) + (x_00007_00008=7) + (x_00007_00009=7))=tv=1))
c Var 'aux276' direct represents '0' with '-1568'
c Var 'aux276' direct represents '1' with '1568'
c Var 'aux276' order represents '1' with '1'
c Var 'aux276' order represents '0' with '-1568'
c Encoding variable: aux277 with domain: bool (representing constraint (((x_00008_00007=8) + (x_00008_00008=8) + (x_00008_00009=8) + (x_00009_00007=8) + (x_00009_00008=8) + (x_00009_00009=8) + (x_00007_00007=8) + (x_00007_00008=8) + (x_00007_00009=8))=tv=1))
c Var 'aux277' direct represents '0' with '-1569'
c Var 'aux277' direct represents '1' with '1569'
c Var 'aux277' order represents '1' with '1'
c Var 'aux277' order represents '0' with '-1569'
c Encoding variable: aux278 with domain: bool (representing constraint (((x_00008_00007=9) + (x_00008_00008=9) + (x_00008_00009=9) + (x_00009_00007=9) + (x_00009_00008=9) + (x_00009_00009=9) + (x_00007_00007=9) + (x_00007_00008=9) + (x_00007_00009=9))=tv=1))
c Var 'aux278' direct represents '0' with '-1570'
c Var 'aux278' direct represents '1' with '1570'
c Var 'aux278' order represents '1' with '1'
c Var 'aux278' order represents '0' with '-1570'
c Encoding variable: aux279 with domain: bool (representing constraint (((x_00003_00001=1) + (x_00001_00001=1) + (x_00001_00002=1) + (x_00002_00001=1))<=1))
c Var 'aux279' direct represents '0' with '-1571'
c Var 'aux279' direct represents '1' with '1571'
c Var 'aux279' order represents '1' with '1'
c Var 'aux279' order represents '0' with '-1571'
c Encoding variable: aux280 with domain: bool (representing constraint (((x_00003_00001=2) + (x_00001_00001=2) + (x_00001_00002=2) + (x_00002_00001=2))<=1))
c Var 'aux280' direct represents '0' with '-1572'
c Var 'aux280' direct represents '1' with '1572'
c Var 'aux280' order represents '1' with '1'
c Var 'aux280' order represents '0' with '-1572'
c Encoding variable: aux281 with domain: bool (representing constraint (((x_00003_00001=3) + (x_00001_00001=3) + (x_00001_00002=3) + (x_00002_00001=3))<=1))
c Var 'aux281' direct represents '0' with '-1573'
c Var 'aux281' direct represents '1' with '1573'
c Var 'aux281' order represents '1' with '1'
c Var 'aux281' order represents '0' with '-1573'
c Encoding variable: aux282 with domain: bool (representing constraint (((x_00003_00001=4) + (x_00001_00001=4) + (x_00001_00002=4) + (x_00002_00001=4))<=1))
c Var 'aux282' direct represents '0' with '-1574'
c Var 'aux282' direct represents '1' with '1574'
c Var 'aux282' order represents '1' with '1'
c Var 'aux282' order represents '0' with '-1574'
c Encoding variable: aux283 with domain: bool (representing constraint (((x_00003_00001=5) + (x_00001_00001=5) + (x_00001_00002=5) + (x_00002_00001=5))<=1))
c Var 'aux283' direct represents '0' with '-1575'
c Var 'aux283' direct represents '1' with '1575'
c Var 'aux283' order represents '1' with '1'
c Var 'aux283' order represents '0' with '-1575'
c Encoding variable: aux284 with domain: bool (representing constraint (((x_00003_00001=6) + (x_00001_00001=6) + (x_00001_00002=6) + (x_00002_00001=6))<=1))
c Var 'aux284' direct represents '0' with '-1576'
c Var 'aux284' direct represents '1' with '1576'
c Var 'aux284' order represents '1' with '1'
c Var 'aux284' order represents '0' with '-1576'
c Encoding variable: aux285 with domain: bool (representing constraint (((x_00003_00001=7) + (x_00001_00001=7) + (x_00001_00002=7) + (x_00002_00001=7))<=1))
c Var 'aux285' direct represents '0' with '-1577'
c Var 'aux285' direct represents '1' with '1577'
c Var 'aux285' order represents '1' with '1'
c Var 'aux285' order represents '0' with '-1577'
c Encoding variable: aux286 with domain: bool (representing constraint (((x_00003_00001=8) + (x_00001_00001=8) + (x_00001_00002=8) + (x_00002_00001=8))<=1))
c Var 'aux286' direct represents '0' with '-1578'
c Var 'aux286' direct represents '1' with '1578'
c Var 'aux286' order represents '1' with '1'
c Var 'aux286' order represents '0' with '-1578'
c Encoding variable: aux287 with domain: bool (representing constraint (((x_00003_00001=9) + (x_00001_00001=9) + (x_00001_00002=9) + (x_00002_00001=9))<=1))
c Var 'aux287' direct represents '0' with '-1579'
c Var 'aux287' direct represents '1' with '1579'
c Var 'aux287' order represents '1' with '1'
c Var 'aux287' order represents '0' with '-1579'
c Encoding variable: aux288 with domain: bool (representing constraint (((x_00003_00008=1) + (x_00003_00009=1) + (x_00001_00007=1) + (x_00001_00008=1) + (x_00001_00009=1) + (x_00002_00007=1) + (x_00002_00008=1) + (x_00002_00009=1))<=1))
c Var 'aux288' direct represents '0' with '-1580'
c Var 'aux288' direct represents '1' with '1580'
c Var 'aux288' order represents '1' with '1'
c Var 'aux288' order represents '0' with '-1580'
c Encoding variable: aux289 with domain: bool (representing constraint (((x_00003_00008=2) + (x_00003_00009=2) + (x_00001_00007=2) + (x_00001_00008=2) + (x_00001_00009=2) + (x_00002_00007=2) + (x_00002_00008=2) + (x_00002_00009=2))<=1))
c Var 'aux289' direct represents '0' with '-1581'
c Var 'aux289' direct represents '1' with '1581'
c Var 'aux289' order represents '1' with '1'
c Var 'aux289' order represents '0' with '-1581'
c Encoding variable: aux290 with domain: bool (representing constraint (((x_00003_00008=3) + (x_00003_00009=3) + (x_00001_00007=3) + (x_00001_00008=3) + (x_00001_00009=3) + (x_00002_00007=3) + (x_00002_00008=3) + (x_00002_00009=3))<=1))
c Var 'aux290' direct represents '0' with '-1582'
c Var 'aux290' direct represents '1' with '1582'
c Var 'aux290' order represents '1' with '1'
c Var 'aux290' order represents '0' with '-1582'
c Encoding variable: aux291 with domain: bool (representing constraint (((x_00003_00008=4) + (x_00003_00009=4) + (x_00001_00007=4) + (x_00001_00008=4) + (x_00001_00009=4) + (x_00002_00007=4) + (x_00002_00008=4) + (x_00002_00009=4))<=1))
c Var 'aux291' direct represents '0' with '-1583'
c Var 'aux291' direct represents '1' with '1583'
c Var 'aux291' order represents '1' with '1'
c Var 'aux291' order represents '0' with '-1583'
c Encoding variable: aux292 with domain: bool (representing constraint (((x_00003_00008=5) + (x_00003_00009=5) + (x_00001_00007=5) + (x_00001_00008=5) + (x_00001_00009=5) + (x_00002_00007=5) + (x_00002_00008=5) + (x_00002_00009=5))<=1))
c Var 'aux292' direct represents '0' with '-1584'
c Var 'aux292' direct represents '1' with '1584'
c Var 'aux292' order represents '1' with '1'
c Var 'aux292' order represents '0' with '-1584'
c Encoding variable: aux293 with domain: bool (representing constraint (((x_00003_00008=6) + (x_00003_00009=6) + (x_00001_00007=6) + (x_00001_00008=6) + (x_00001_00009=6) + (x_00002_00007=6) + (x_00002_00008=6) + (x_00002_00009=6))<=1))
c Var 'aux293' direct represents '0' with '-1585'
c Var 'aux293' direct represents '1' with '1585'
c Var 'aux293' order represents '1' with '1'
c Var 'aux293' order represents '0' with '-1585'
c Encoding variable: aux294 with domain: bool (representing constraint (((x_00003_00008=7) + (x_00003_00009=7) + (x_00001_00007=7) + (x_00001_00008=7) + (x_00001_00009=7) + (x_00002_00007=7) + (x_00002_00008=7) + (x_00002_00009=7))<=1))
c Var 'aux294' direct represents '0' with '-1586'
c Var 'aux294' direct represents '1' with '1586'
c Var 'aux294' order represents '1' with '1'
c Var 'aux294' order represents '0' with '-1586'
c Encoding variable: aux295 with domain: bool (representing constraint (((x_00003_00008=8) + (x_00003_00009=8) + (x_00001_00007=8) + (x_00001_00008=8) + (x_00001_00009=8) + (x_00002_00007=8) + (x_00002_00008=8) + (x_00002_00009=8))<=1))
c Var 'aux295' direct represents '0' with '-1587'
c Var 'aux295' direct represents '1' with '1587'
c Var 'aux295' order represents '1' with '1'
c Var 'aux295' order represents '0' with '-1587'
c Encoding variable: aux296 with domain: bool (representing constraint (((x_00003_00008=9) + (x_00003_00009=9) + (x_00001_00007=9) + (x_00001_00008=9) + (x_00001_00009=9) + (x_00002_00007=9) + (x_00002_00008=9) + (x_00002_00009=9))<=1))
c Var 'aux296' direct represents '0' with '-1588'
c Var 'aux296' direct represents '1' with '1588'
c Var 'aux296' order represents '1' with '1'
c Var 'aux296' order represents '0' with '-1588'
c Encoding variable: aux297 with domain: bool (representing constraint (((x_00003_00003=1) + (x_00003_00004=1) + (x_00004_00004=1) + (x_00002_00003=1) + (x_00002_00004=1))<=1))
c Var 'aux297' direct represents '0' with '-1589'
c Var 'aux297' direct represents '1' with '1589'
c Var 'aux297' order represents '1' with '1'
c Var 'aux297' order represents '0' with '-1589'
c Encoding variable: aux298 with domain: bool (representing constraint (((x_00003_00003=2) + (x_00003_00004=2) + (x_00004_00004=2) + (x_00002_00003=2) + (x_00002_00004=2))<=1))
c Var 'aux298' direct represents '0' with '-1590'
c Var 'aux298' direct represents '1' with '1590'
c Var 'aux298' order represents '1' with '1'
c Var 'aux298' order represents '0' with '-1590'
c Encoding variable: aux299 with domain: bool (representing constraint (((x_00003_00003=3) + (x_00003_00004=3) + (x_00004_00004=3) + (x_00002_00003=3) + (x_00002_00004=3))<=1))
c Var 'aux299' direct represents '0' with '-1591'
c Var 'aux299' direct represents '1' with '1591'
c Var 'aux299' order represents '1' with '1'
c Var 'aux299' order represents '0' with '-1591'
c Encoding variable: aux300 with domain: bool (representing constraint (((x_00003_00003=4) + (x_00003_00004=4) + (x_00004_00004=4) + (x_00002_00003=4) + (x_00002_00004=4))<=1))
c Var 'aux300' direct represents '0' with '-1592'
c Var 'aux300' direct represents '1' with '1592'
c Var 'aux300' order represents '1' with '1'
c Var 'aux300' order represents '0' with '-1592'
c Encoding variable: aux301 with domain: bool (representing constraint (((x_00003_00003=5) + (x_00003_00004=5) + (x_00004_00004=5) + (x_00002_00003=5) + (x_00002_00004=5))<=1))
c Var 'aux301' direct represents '0' with '-1593'
c Var 'aux301' direct represents '1' with '1593'
c Var 'aux301' order represents '1' with '1'
c Var 'aux301' order represents '0' with '-1593'
c Encoding variable: aux302 with domain: bool (representing constraint (((x_00003_00003=6) + (x_00003_00004=6) + (x_00004_00004=6) + (x_00002_00003=6) + (x_00002_00004=6))<=1))
c Var 'aux302' direct represents '0' with '-1594'
c Var 'aux302' direct represents '1' with '1594'
c Var 'aux302' order represents '1' with '1'
c Var 'aux302' order represents '0' with '-1594'
c Encoding variable: aux303 with domain: bool (representing constraint (((x_00003_00003=7) + (x_00003_00004=7) + (x_00004_00004=7) + (x_00002_00003=7) + (x_00002_00004=7))<=1))
c Var 'aux303' direct represents '0' with '-1595'
c Var 'aux303' direct represents '1' with '1595'
c Var 'aux303' order represents '1' with '1'
c Var 'aux303' order represents '0' with '-1595'
c Encoding variable: aux304 with domain: bool (representing constraint (((x_00003_00003=8) + (x_00003_00004=8) + (x_00004_00004=8) + (x_00002_00003=8) + (x_00002_00004=8))<=1))
c Var 'aux304' direct represents '0' with '-1596'
c Var 'aux304' direct represents '1' with '1596'
c Var 'aux304' order represents '1' with '1'
c Var 'aux304' order represents '0' with '-1596'
c Encoding variable: aux305 with domain: bool (representing constraint (((x_00003_00003=9) + (x_00003_00004=9) + (x_00004_00004=9) + (x_00002_00003=9) + (x_00002_00004=9))<=1))
c Var 'aux305' direct represents '0' with '-1597'
c Var 'aux305' direct represents '1' with '1597'
c Var 'aux305' order represents '1' with '1'
c Var 'aux305' order represents '0' with '-1597'
c Encoding variable: aux306 with domain: bool (representing constraint (((x_00003_00005=1) + (x_00004_00005=1) + (x_00004_00006=1) + (x_00005_00006=1) + (x_00005_00007=1))<=1))
c Var 'aux306' direct represents '0' with '-1598'
c Var 'aux306' direct represents '1' with '1598'
c Var 'aux306' order represents '1' with '1'
c Var 'aux306' order represents '0' with '-1598'
c Encoding variable: aux307 with domain: bool (representing constraint (((x_00003_00005=2) + (x_00004_00005=2) + (x_00004_00006=2) + (x_00005_00006=2) + (x_00005_00007=2))<=1))
c Var 'aux307' direct represents '0' with '-1599'
c Var 'aux307' direct represents '1' with '1599'
c Var 'aux307' order represents '1' with '1'
c Var 'aux307' order represents '0' with '-1599'
c Encoding variable: aux308 with domain: bool (representing constraint (((x_00003_00005=3) + (x_00004_00005=3) + (x_00004_00006=3) + (x_00005_00006=3) + (x_00005_00007=3))<=1))
c Var 'aux308' direct represents '0' with '-1600'
c Var 'aux308' direct represents '1' with '1600'
c Var 'aux308' order represents '1' with '1'
c Var 'aux308' order represents '0' with '-1600'
c Encoding variable: aux309 with domain: bool (representing constraint (((x_00003_00005=4) + (x_00004_00005=4) + (x_00004_00006=4) + (x_00005_00006=4) + (x_00005_00007=4))<=1))
c Var 'aux309' direct represents '0' with '-1601'
c Var 'aux309' direct represents '1' with '1601'
c Var 'aux309' order represents '1' with '1'
c Var 'aux309' order represents '0' with '-1601'
c Encoding variable: aux310 with domain: bool (representing constraint (((x_00003_00005=5) + (x_00004_00005=5) + (x_00004_00006=5) + (x_00005_00006=5) + (x_00005_00007=5))<=1))
c Var 'aux310' direct represents '0' with '-1602'
c Var 'aux310' direct represents '1' with '1602'
c Var 'aux310' order represents '1' with '1'
c Var 'aux310' order represents '0' with '-1602'
c Encoding variable: aux311 with domain: bool (representing constraint (((x_00003_00005=6) + (x_00004_00005=6) + (x_00004_00006=6) + (x_00005_00006=6) + (x_00005_00007=6))<=1))
c Var 'aux311' direct represents '0' with '-1603'
c Var 'aux311' direct represents '1' with '1603'
c Var 'aux311' order represents '1' with '1'
c Var 'aux311' order represents '0' with '-1603'
c Encoding variable: aux312 with domain: bool (representing constraint (((x_00003_00005=7) + (x_00004_00005=7) + (x_00004_00006=7) + (x_00005_00006=7) + (x_00005_00007=7))<=1))
c Var 'aux312' direct represents '0' with '-1604'
c Var 'aux312' direct represents '1' with '1604'
c Var 'aux312' order represents '1' with '1'
c Var 'aux312' order represents '0' with '-1604'
c Encoding variable: aux313 with domain: bool (representing constraint (((x_00003_00005=8) + (x_00004_00005=8) + (x_00004_00006=8) + (x_00005_00006=8) + (x_00005_00007=8))<=1))
c Var 'aux313' direct represents '0' with '-1605'
c Var 'aux313' direct represents '1' with '1605'
c Var 'aux313' order represents '1' with '1'
c Var 'aux313' order represents '0' with '-1605'
c Encoding variable: aux314 with domain: bool (representing constraint (((x_00003_00005=9) + (x_00004_00005=9) + (x_00004_00006=9) + (x_00005_00006=9) + (x_00005_00007=9))<=1))
c Var 'aux314' direct represents '0' with '-1606'
c Var 'aux314' direct represents '1' with '1606'
c Var 'aux314' order represents '1' with '1'
c Var 'aux314' order represents '0' with '-1606'
c Encoding variable: aux315 with domain: bool (representing constraint (((x_00003_00006=1) + (x_00003_00007=1) + (x_00004_00007=1))<=1))
c Var 'aux315' direct represents '0' with '-1607'
c Var 'aux315' direct represents '1' with '1607'
c Var 'aux315' order represents '1' with '1'
c Var 'aux315' order represents '0' with '-1607'
c Encoding variable: aux316 with domain: bool (representing constraint (((x_00003_00006=2) + (x_00003_00007=2) + (x_00004_00007=2))<=1))
c Var 'aux316' direct represents '0' with '-1608'
c Var 'aux316' direct represents '1' with '1608'
c Var 'aux316' order represents '1' with '1'
c Var 'aux316' order represents '0' with '-1608'
c Encoding variable: aux317 with domain: bool (representing constraint (((x_00003_00006=3) + (x_00003_00007=3) + (x_00004_00007=3))<=1))
c Var 'aux317' direct represents '0' with '-1609'
c Var 'aux317' direct represents '1' with '1609'
c Var 'aux317' order represents '1' with '1'
c Var 'aux317' order represents '0' with '-1609'
c Encoding variable: aux318 with domain: bool (representing constraint (((x_00003_00006=4) + (x_00003_00007=4) + (x_00004_00007=4))<=1))
c Var 'aux318' direct represents '0' with '-1610'
c Var 'aux318' direct represents '1' with '1610'
c Var 'aux318' order represents '1' with '1'
c Var 'aux318' order represents '0' with '-1610'
c Encoding variable: aux319 with domain: bool (representing constraint (((x_00003_00006=5) + (x_00003_00007=5) + (x_00004_00007=5))<=1))
c Var 'aux319' direct represents '0' with '-1611'
c Var 'aux319' direct represents '1' with '1611'
c Var 'aux319' order represents '1' with '1'
c Var 'aux319' order represents '0' with '-1611'
c Encoding variable: aux320 with domain: bool (representing constraint (((x_00003_00006=6) + (x_00003_00007=6) + (x_00004_00007=6))<=1))
c Var 'aux320' direct represents '0' with '-1612'
c Var 'aux320' direct represents '1' with '1612'
c Var 'aux320' order represents '1' with '1'
c Var 'aux320' order represents '0' with '-1612'
c Encoding variable: aux321 with domain: bool (representing constraint (((x_00003_00006=7) + (x_00003_00007=7) + (x_00004_00007=7))<=1))
c Var 'aux321' direct represents '0' with '-1613'
c Var 'aux321' direct represents '1' with '1613'
c Var 'aux321' order represents '1' with '1'
c Var 'aux321' order represents '0' with '-1613'
c Encoding variable: aux322 with domain: bool (representing constraint (((x_00003_00006=8) + (x_00003_00007=8) + (x_00004_00007=8))<=1))
c Var 'aux322' direct represents '0' with '-1614'
c Var 'aux322' direct represents '1' with '1614'
c Var 'aux322' order represents '1' with '1'
c Var 'aux322' order represents '0' with '-1614'
c Encoding variable: aux323 with domain: bool (representing constraint (((x_00003_00006=9) + (x_00003_00007=9) + (x_00004_00007=9))<=1))
c Var 'aux323' direct represents '0' with '-1615'
c Var 'aux323' direct represents '1' with '1615'
c Var 'aux323' order represents '1' with '1'
c Var 'aux323' order represents '0' with '-1615'
c Encoding variable: aux324 with domain: bool (representing constraint (((x_00004_00001=1) + (x_00004_00002=1) + (x_00004_00003=1) + (x_00005_00001=1))<=1))
c Var 'aux324' direct represents '0' with '-1616'
c Var 'aux324' direct represents '1' with '1616'
c Var 'aux324' order represents '1' with '1'
c Var 'aux324' order represents '0' with '-1616'
c Encoding variable: aux325 with domain: bool (representing constraint (((x_00004_00001=2) + (x_00004_00002=2) + (x_00004_00003=2) + (x_00005_00001=2))<=1))
c Var 'aux325' direct represents '0' with '-1617'
c Var 'aux325' direct represents '1' with '1617'
c Var 'aux325' order represents '1' with '1'
c Var 'aux325' order represents '0' with '-1617'
c Encoding variable: aux326 with domain: bool (representing constraint (((x_00004_00001=3) + (x_00004_00002=3) + (x_00004_00003=3) + (x_00005_00001=3))<=1))
c Var 'aux326' direct represents '0' with '-1618'
c Var 'aux326' direct represents '1' with '1618'
c Var 'aux326' order represents '1' with '1'
c Var 'aux326' order represents '0' with '-1618'
c Encoding variable: aux327 with domain: bool (representing constraint (((x_00004_00001=4) + (x_00004_00002=4) + (x_00004_00003=4) + (x_00005_00001=4))<=1))
c Var 'aux327' direct represents '0' with '-1619'
c Var 'aux327' direct represents '1' with '1619'
c Var 'aux327' order represents '1' with '1'
c Var 'aux327' order represents '0' with '-1619'
c Encoding variable: aux328 with domain: bool (representing constraint (((x_00004_00001=5) + (x_00004_00002=5) + (x_00004_00003=5) + (x_00005_00001=5))<=1))
c Var 'aux328' direct represents '0' with '-1620'
c Var 'aux328' direct represents '1' with '1620'
c Var 'aux328' order represents '1' with '1'
c Var 'aux328' order represents '0' with '-1620'
c Encoding variable: aux329 with domain: bool (representing constraint (((x_00004_00001=6) + (x_00004_00002=6) + (x_00004_00003=6) + (x_00005_00001=6))<=1))
c Var 'aux329' direct represents '0' with '-1621'
c Var 'aux329' direct represents '1' with '1621'
c Var 'aux329' order represents '1' with '1'
c Var 'aux329' order represents '0' with '-1621'
c Encoding variable: aux330 with domain: bool (representing constraint (((x_00004_00001=7) + (x_00004_00002=7) + (x_00004_00003=7) + (x_00005_00001=7))<=1))
c Var 'aux330' direct represents '0' with '-1622'
c Var 'aux330' direct represents '1' with '1622'
c Var 'aux330' order represents '1' with '1'
c Var 'aux330' order represents '0' with '-1622'
c Encoding variable: aux331 with domain: bool (representing constraint (((x_00004_00001=8) + (x_00004_00002=8) + (x_00004_00003=8) + (x_00005_00001=8))<=1))
c Var 'aux331' direct represents '0' with '-1623'
c Var 'aux331' direct represents '1' with '1623'
c Var 'aux331' order represents '1' with '1'
c Var 'aux331' order represents '0' with '-1623'
c Encoding variable: aux332 with domain: bool (representing constraint (((x_00004_00001=9) + (x_00004_00002=9) + (x_00004_00003=9) + (x_00005_00001=9))<=1))
c Var 'aux332' direct represents '0' with '-1624'
c Var 'aux332' direct represents '1' with '1624'
c Var 'aux332' order represents '1' with '1'
c Var 'aux332' order represents '0' with '-1624'
c Encoding variable: aux333 with domain: bool (representing constraint (((x_00006_00005=1) + (x_00007_00005=1) + (x_00005_00003=1) + (x_00005_00004=1) + (x_00005_00005=1))<=1))
c Var 'aux333' direct represents '0' with '-1625'
c Var 'aux333' direct represents '1' with '1625'
c Var 'aux333' order represents '1' with '1'
c Var 'aux333' order represents '0' with '-1625'
c Encoding variable: aux334 with domain: bool (representing constraint (((x_00006_00005=2) + (x_00007_00005=2) + (x_00005_00003=2) + (x_00005_00004=2) + (x_00005_00005=2))<=1))
c Var 'aux334' direct represents '0' with '-1626'
c Var 'aux334' direct represents '1' with '1626'
c Var 'aux334' order represents '1' with '1'
c Var 'aux334' order represents '0' with '-1626'
c Encoding variable: aux335 with domain: bool (representing constraint (((x_00006_00005=3) + (x_00007_00005=3) + (x_00005_00003=3) + (x_00005_00004=3) + (x_00005_00005=3))<=1))
c Var 'aux335' direct represents '0' with '-1627'
c Var 'aux335' direct represents '1' with '1627'
c Var 'aux335' order represents '1' with '1'
c Var 'aux335' order represents '0' with '-1627'
c Encoding variable: aux336 with domain: bool (representing constraint (((x_00006_00005=4) + (x_00007_00005=4) + (x_00005_00003=4) + (x_00005_00004=4) + (x_00005_00005=4))<=1))
c Var 'aux336' direct represents '0' with '-1628'
c Var 'aux336' direct represents '1' with '1628'
c Var 'aux336' order represents '1' with '1'
c Var 'aux336' order represents '0' with '-1628'
c Encoding variable: aux337 with domain: bool (representing constraint (((x_00006_00005=5) + (x_00007_00005=5) + (x_00005_00003=5) + (x_00005_00004=5) + (x_00005_00005=5))<=1))
c Var 'aux337' direct represents '0' with '-1629'
c Var 'aux337' direct represents '1' with '1629'
c Var 'aux337' order represents '1' with '1'
c Var 'aux337' order represents '0' with '-1629'
c Encoding variable: aux338 with domain: bool (representing constraint (((x_00006_00005=6) + (x_00007_00005=6) + (x_00005_00003=6) + (x_00005_00004=6) + (x_00005_00005=6))<=1))
c Var 'aux338' direct represents '0' with '-1630'
c Var 'aux338' direct represents '1' with '1630'
c Var 'aux338' order represents '1' with '1'
c Var 'aux338' order represents '0' with '-1630'
c Encoding variable: aux339 with domain: bool (representing constraint (((x_00006_00005=7) + (x_00007_00005=7) + (x_00005_00003=7) + (x_00005_00004=7) + (x_00005_00005=7))<=1))
c Var 'aux339' direct represents '0' with '-1631'
c Var 'aux339' direct represents '1' with '1631'
c Var 'aux339' order represents '1' with '1'
c Var 'aux339' order represents '0' with '-1631'
c Encoding variable: aux340 with domain: bool (representing constraint (((x_00006_00005=8) + (x_00007_00005=8) + (x_00005_00003=8) + (x_00005_00004=8) + (x_00005_00005=8))<=1))
c Var 'aux340' direct represents '0' with '-1632'
c Var 'aux340' direct represents '1' with '1632'
c Var 'aux340' order represents '1' with '1'
c Var 'aux340' order represents '0' with '-1632'
c Encoding variable: aux341 with domain: bool (representing constraint (((x_00006_00005=9) + (x_00007_00005=9) + (x_00005_00003=9) + (x_00005_00004=9) + (x_00005_00005=9))<=1))
c Var 'aux341' direct represents '0' with '-1633'
c Var 'aux341' direct represents '1' with '1633'
c Var 'aux341' order represents '1' with '1'
c Var 'aux341' order represents '0' with '-1633'
c Encoding variable: aux342 with domain: bool (representing constraint (((x_00006_00003=1) + (x_00006_00004=1) + (x_00007_00003=1) + (x_00007_00004=1))<=1))
c Var 'aux342' direct represents '0' with '-1634'
c Var 'aux342' direct represents '1' with '1634'
c Var 'aux342' order represents '1' with '1'
c Var 'aux342' order represents '0' with '-1634'
c Encoding variable: aux343 with domain: bool (representing constraint (((x_00006_00003=2) + (x_00006_00004=2) + (x_00007_00003=2) + (x_00007_00004=2))<=1))
c Var 'aux343' direct represents '0' with '-1635'
c Var 'aux343' direct represents '1' with '1635'
c Var 'aux343' order represents '1' with '1'
c Var 'aux343' order represents '0' with '-1635'
c Encoding variable: aux344 with domain: bool (representing constraint (((x_00006_00003=3) + (x_00006_00004=3) + (x_00007_00003=3) + (x_00007_00004=3))<=1))
c Var 'aux344' direct represents '0' with '-1636'
c Var 'aux344' direct represents '1' with '1636'
c Var 'aux344' order represents '1' with '1'
c Var 'aux344' order represents '0' with '-1636'
c Encoding variable: aux345 with domain: bool (representing constraint (((x_00006_00003=4) + (x_00006_00004=4) + (x_00007_00003=4) + (x_00007_00004=4))<=1))
c Var 'aux345' direct represents '0' with '-1637'
c Var 'aux345' direct represents '1' with '1637'
c Var 'aux345' order represents '1' with '1'
c Var 'aux345' order represents '0' with '-1637'
c Encoding variable: aux346 with domain: bool (representing constraint (((x_00006_00003=5) + (x_00006_00004=5) + (x_00007_00003=5) + (x_00007_00004=5))<=1))
c Var 'aux346' direct represents '0' with '-1638'
c Var 'aux346' direct represents '1' with '1638'
c Var 'aux346' order represents '1' with '1'
c Var 'aux346' order represents '0' with '-1638'
c Encoding variable: aux347 with domain: bool (representing constraint (((x_00006_00003=6) + (x_00006_00004=6) + (x_00007_00003=6) + (x_00007_00004=6))<=1))
c Var 'aux347' direct represents '0' with '-1639'
c Var 'aux347' direct represents '1' with '1639'
c Var 'aux347' order represents '1' with '1'
c Var 'aux347' order represents '0' with '-1639'
c Encoding variable: aux348 with domain: bool (representing constraint (((x_00006_00003=7) + (x_00006_00004=7) + (x_00007_00003=7) + (x_00007_00004=7))<=1))
c Var 'aux348' direct represents '0' with '-1640'
c Var 'aux348' direct represents '1' with '1640'
c Var 'aux348' order represents '1' with '1'
c Var 'aux348' order represents '0' with '-1640'
c Encoding variable: aux349 with domain: bool (representing constraint (((x_00006_00003=8) + (x_00006_00004=8) + (x_00007_00003=8) + (x_00007_00004=8))<=1))
c Var 'aux349' direct represents '0' with '-1641'
c Var 'aux349' direct represents '1' with '1641'
c Var 'aux349' order represents '1' with '1'
c Var 'aux349' order represents '0' with '-1641'
c Encoding variable: aux350 with domain: bool (representing constraint (((x_00006_00003=9) + (x_00006_00004=9) + (x_00007_00003=9) + (x_00007_00004=9))<=1))
c Var 'aux350' direct represents '0' with '-1642'
c Var 'aux350' direct represents '1' with '1642'
c Var 'aux350' order represents '1' with '1'
c Var 'aux350' order represents '0' with '-1642'
c Encoding variable: aux351 with domain: bool (representing constraint (((x_00006_00006=1) + (x_00006_00007=1) + (x_00006_00008=1) + (x_00007_00007=1) + (x_00007_00008=1))<=1))
c Var 'aux351' direct represents '0' with '-1643'
c Var 'aux351' direct represents '1' with '1643'
c Var 'aux351' order represents '1' with '1'
c Var 'aux351' order represents '0' with '-1643'
c Encoding variable: aux352 with domain: bool (representing constraint (((x_00006_00006=2) + (x_00006_00007=2) + (x_00006_00008=2) + (x_00007_00007=2) + (x_00007_00008=2))<=1))
c Var 'aux352' direct represents '0' with '-1644'
c Var 'aux352' direct represents '1' with '1644'
c Var 'aux352' order represents '1' with '1'
c Var 'aux352' order represents '0' with '-1644'
c Encoding variable: aux353 with domain: bool (representing constraint (((x_00006_00006=3) + (x_00006_00007=3) + (x_00006_00008=3) + (x_00007_00007=3) + (x_00007_00008=3))<=1))
c Var 'aux353' direct represents '0' with '-1645'
c Var 'aux353' direct represents '1' with '1645'
c Var 'aux353' order represents '1' with '1'
c Var 'aux353' order represents '0' with '-1645'
c Encoding variable: aux354 with domain: bool (representing constraint (((x_00006_00006=4) + (x_00006_00007=4) + (x_00006_00008=4) + (x_00007_00007=4) + (x_00007_00008=4))<=1))
c Var 'aux354' direct represents '0' with '-1646'
c Var 'aux354' direct represents '1' with '1646'
c Var 'aux354' order represents '1' with '1'
c Var 'aux354' order represents '0' with '-1646'
c Encoding variable: aux355 with domain: bool (representing constraint (((x_00006_00006=5) + (x_00006_00007=5) + (x_00006_00008=5) + (x_00007_00007=5) + (x_00007_00008=5))<=1))
c Var 'aux355' direct represents '0' with '-1647'
c Var 'aux355' direct represents '1' with '1647'
c Var 'aux355' order represents '1' with '1'
c Var 'aux355' order represents '0' with '-1647'
c Encoding variable: aux356 with domain: bool (representing constraint (((x_00006_00006=6) + (x_00006_00007=6) + (x_00006_00008=6) + (x_00007_00007=6) + (x_00007_00008=6))<=1))
c Var 'aux356' direct represents '0' with '-1648'
c Var 'aux356' direct represents '1' with '1648'
c Var 'aux356' order represents '1' with '1'
c Var 'aux356' order represents '0' with '-1648'
c Encoding variable: aux357 with domain: bool (representing constraint (((x_00006_00006=7) + (x_00006_00007=7) + (x_00006_00008=7) + (x_00007_00007=7) + (x_00007_00008=7))<=1))
c Var 'aux357' direct represents '0' with '-1649'
c Var 'aux357' direct represents '1' with '1649'
c Var 'aux357' order represents '1' with '1'
c Var 'aux357' order represents '0' with '-1649'
c Encoding variable: aux358 with domain: bool (representing constraint (((x_00006_00006=8) + (x_00006_00007=8) + (x_00006_00008=8) + (x_00007_00007=8) + (x_00007_00008=8))<=1))
c Var 'aux358' direct represents '0' with '-1650'
c Var 'aux358' direct represents '1' with '1650'
c Var 'aux358' order represents '1' with '1'
c Var 'aux358' order represents '0' with '-1650'
c Encoding variable: aux359 with domain: bool (representing constraint (((x_00006_00006=9) + (x_00006_00007=9) + (x_00006_00008=9) + (x_00007_00007=9) + (x_00007_00008=9))<=1))
c Var 'aux359' direct represents '0' with '-1651'
c Var 'aux359' direct represents '1' with '1651'
c Var 'aux359' order represents '1' with '1'
c Var 'aux359' order represents '0' with '-1651'
c Encoding variable: aux360 with domain: bool (representing constraint (((x_00008_00001=1) + (x_00008_00002=1) + (x_00008_00003=1) + (x_00009_00001=1) + (x_00009_00002=1) + (x_00007_00002=1))<=1))
c Var 'aux360' direct represents '0' with '-1652'
c Var 'aux360' direct represents '1' with '1652'
c Var 'aux360' order represents '1' with '1'
c Var 'aux360' order represents '0' with '-1652'
c Encoding variable: aux361 with domain: bool (representing constraint (((x_00008_00001=2) + (x_00008_00002=2) + (x_00008_00003=2) + (x_00009_00001=2) + (x_00009_00002=2) + (x_00007_00002=2))<=1))
c Var 'aux361' direct represents '0' with '-1653'
c Var 'aux361' direct represents '1' with '1653'
c Var 'aux361' order represents '1' with '1'
c Var 'aux361' order represents '0' with '-1653'
c Encoding variable: aux362 with domain: bool (representing constraint (((x_00008_00001=3) + (x_00008_00002=3) + (x_00008_00003=3) + (x_00009_00001=3) + (x_00009_00002=3) + (x_00007_00002=3))<=1))
c Var 'aux362' direct represents '0' with '-1654'
c Var 'aux362' direct represents '1' with '1654'
c Var 'aux362' order represents '1' with '1'
c Var 'aux362' order represents '0' with '-1654'
c Encoding variable: aux363 with domain: bool (representing constraint (((x_00008_00001=4) + (x_00008_00002=4) + (x_00008_00003=4) + (x_00009_00001=4) + (x_00009_00002=4) + (x_00007_00002=4))<=1))
c Var 'aux363' direct represents '0' with '-1655'
c Var 'aux363' direct represents '1' with '1655'
c Var 'aux363' order represents '1' with '1'
c Var 'aux363' order represents '0' with '-1655'
c Encoding variable: aux364 with domain: bool (representing constraint (((x_00008_00001=5) + (x_00008_00002=5) + (x_00008_00003=5) + (x_00009_00001=5) + (x_00009_00002=5) + (x_00007_00002=5))<=1))
c Var 'aux364' direct represents '0' with '-1656'
c Var 'aux364' direct represents '1' with '1656'
c Var 'aux364' order represents '1' with '1'
c Var 'aux364' order represents '0' with '-1656'
c Encoding variable: aux365 with domain: bool (representing constraint (((x_00008_00001=6) + (x_00008_00002=6) + (x_00008_00003=6) + (x_00009_00001=6) + (x_00009_00002=6) + (x_00007_00002=6))<=1))
c Var 'aux365' direct represents '0' with '-1657'
c Var 'aux365' direct represents '1' with '1657'
c Var 'aux365' order represents '1' with '1'
c Var 'aux365' order represents '0' with '-1657'
c Encoding variable: aux366 with domain: bool (representing constraint (((x_00008_00001=7) + (x_00008_00002=7) + (x_00008_00003=7) + (x_00009_00001=7) + (x_00009_00002=7) + (x_00007_00002=7))<=1))
c Var 'aux366' direct represents '0' with '-1658'
c Var 'aux366' direct represents '1' with '1658'
c Var 'aux366' order represents '1' with '1'
c Var 'aux366' order represents '0' with '-1658'
c Encoding variable: aux367 with domain: bool (representing constraint (((x_00008_00001=8) + (x_00008_00002=8) + (x_00008_00003=8) + (x_00009_00001=8) + (x_00009_00002=8) + (x_00007_00002=8))<=1))
c Var 'aux367' direct represents '0' with '-1659'
c Var 'aux367' direct represents '1' with '1659'
c Var 'aux367' order represents '1' with '1'
c Var 'aux367' order represents '0' with '-1659'
c Encoding variable: aux368 with domain: bool (representing constraint (((x_00008_00001=9) + (x_00008_00002=9) + (x_00008_00003=9) + (x_00009_00001=9) + (x_00009_00002=9) + (x_00007_00002=9))<=1))
c Var 'aux368' direct represents '0' with '-1660'
c Var 'aux368' direct represents '1' with '1660'
c Var 'aux368' order represents '1' with '1'
c Var 'aux368' order represents '0' with '-1660'
c Encoding variable: aux369 with domain: bool (representing constraint (((x_00008_00006=1) + (x_00009_00005=1) + (x_00009_00006=1) + (x_00007_00006=1))<=1))
c Var 'aux369' direct represents '0' with '-1661'
c Var 'aux369' direct represents '1' with '1661'
c Var 'aux369' order represents '1' with '1'
c Var 'aux369' order represents '0' with '-1661'
c Encoding variable: aux370 with domain: bool (representing constraint (((x_00008_00006=2) + (x_00009_00005=2) + (x_00009_00006=2) + (x_00007_00006=2))<=1))
c Var 'aux370' direct represents '0' with '-1662'
c Var 'aux370' direct represents '1' with '1662'
c Var 'aux370' order represents '1' with '1'
c Var 'aux370' order represents '0' with '-1662'
c Encoding variable: aux371 with domain: bool (representing constraint (((x_00008_00006=3) + (x_00009_00005=3) + (x_00009_00006=3) + (x_00007_00006=3))<=1))
c Var 'aux371' direct represents '0' with '-1663'
c Var 'aux371' direct represents '1' with '1663'
c Var 'aux371' order represents '1' with '1'
c Var 'aux371' order represents '0' with '-1663'
c Encoding variable: aux372 with domain: bool (representing constraint (((x_00008_00006=4) + (x_00009_00005=4) + (x_00009_00006=4) + (x_00007_00006=4))<=1))
c Var 'aux372' direct represents '0' with '-1664'
c Var 'aux372' direct represents '1' with '1664'
c Var 'aux372' order represents '1' with '1'
c Var 'aux372' order represents '0' with '-1664'
c Encoding variable: aux373 with domain: bool (representing constraint (((x_00008_00006=5) + (x_00009_00005=5) + (x_00009_00006=5) + (x_00007_00006=5))<=1))
c Var 'aux373' direct represents '0' with '-1665'
c Var 'aux373' direct represents '1' with '1665'
c Var 'aux373' order represents '1' with '1'
c Var 'aux373' order represents '0' with '-1665'
c Encoding variable: aux374 with domain: bool (representing constraint (((x_00008_00006=6) + (x_00009_00005=6) + (x_00009_00006=6) + (x_00007_00006=6))<=1))
c Var 'aux374' direct represents '0' with '-1666'
c Var 'aux374' direct represents '1' with '1666'
c Var 'aux374' order represents '1' with '1'
c Var 'aux374' order represents '0' with '-1666'
c Encoding variable: aux375 with domain: bool (representing constraint (((x_00008_00006=7) + (x_00009_00005=7) + (x_00009_00006=7) + (x_00007_00006=7))<=1))
c Var 'aux375' direct represents '0' with '-1667'
c Var 'aux375' direct represents '1' with '1667'
c Var 'aux375' order represents '1' with '1'
c Var 'aux375' order represents '0' with '-1667'
c Encoding variable: aux376 with domain: bool (representing constraint (((x_00008_00006=8) + (x_00009_00005=8) + (x_00009_00006=8) + (x_00007_00006=8))<=1))
c Var 'aux376' direct represents '0' with '-1668'
c Var 'aux376' direct represents '1' with '1668'
c Var 'aux376' order represents '1' with '1'
c Var 'aux376' order represents '0' with '-1668'
c Encoding variable: aux377 with domain: bool (representing constraint (((x_00008_00006=9) + (x_00009_00005=9) + (x_00009_00006=9) + (x_00007_00006=9))<=1))
c Var 'aux377' direct represents '0' with '-1669'
c Var 'aux377' direct represents '1' with '1669'
c Var 'aux377' order represents '1' with '1'
c Var 'aux377' order represents '0' with '-1669'
c Encoding variable: aux378 with domain: bool (representing constraint (((x_00008_00009=1) + (x_00009_00007=1) + (x_00009_00008=1) + (x_00009_00009=1))<=1))
c Var 'aux378' direct represents '0' with '-1670'
c Var 'aux378' direct represents '1' with '1670'
c Var 'aux378' order represents '1' with '1'
c Var 'aux378' order represents '0' with '-1670'
c Encoding variable: aux379 with domain: bool (representing constraint (((x_00008_00009=2) + (x_00009_00007=2) + (x_00009_00008=2) + (x_00009_00009=2))<=1))
c Var 'aux379' direct represents '0' with '-1671'
c Var 'aux379' direct represents '1' with '1671'
c Var 'aux379' order represents '1' with '1'
c Var 'aux379' order represents '0' with '-1671'
c Encoding variable: aux380 with domain: bool (representing constraint (((x_00008_00009=3) + (x_00009_00007=3) + (x_00009_00008=3) + (x_00009_00009=3))<=1))
c Var 'aux380' direct represents '0' with '-1672'
c Var 'aux380' direct represents '1' with '1672'
c Var 'aux380' order represents '1' with '1'
c Var 'aux380' order represents '0' with '-1672'
c Encoding variable: aux381 with domain: bool (representing constraint (((x_00008_00009=4) + (x_00009_00007=4) + (x_00009_00008=4) + (x_00009_00009=4))<=1))
c Var 'aux381' direct represents '0' with '-1673'
c Var 'aux381' direct represents '1' with '1673'
c Var 'aux381' order represents '1' with '1'
c Var 'aux381' order represents '0' with '-1673'
c Encoding variable: aux382 with domain: bool (representing constraint (((x_00008_00009=5) + (x_00009_00007=5) + (x_00009_00008=5) + (x_00009_00009=5))<=1))
c Var 'aux382' direct represents '0' with '-1674'
c Var 'aux382' direct represents '1' with '1674'
c Var 'aux382' order represents '1' with '1'
c Var 'aux382' order represents '0' with '-1674'
c Encoding variable: aux383 with domain: bool (representing constraint (((x_00008_00009=6) + (x_00009_00007=6) + (x_00009_00008=6) + (x_00009_00009=6))<=1))
c Var 'aux383' direct represents '0' with '-1675'
c Var 'aux383' direct represents '1' with '1675'
c Var 'aux383' order represents '1' with '1'
c Var 'aux383' order represents '0' with '-1675'
c Encoding variable: aux384 with domain: bool (representing constraint (((x_00008_00009=7) + (x_00009_00007=7) + (x_00009_00008=7) + (x_00009_00009=7))<=1))
c Var 'aux384' direct represents '0' with '-1676'
c Var 'aux384' direct represents '1' with '1676'
c Var 'aux384' order represents '1' with '1'
c Var 'aux384' order represents '0' with '-1676'
c Encoding variable: aux385 with domain: bool (representing constraint (((x_00008_00009=8) + (x_00009_00007=8) + (x_00009_00008=8) + (x_00009_00009=8))<=1))
c Var 'aux385' direct represents '0' with '-1677'
c Var 'aux385' direct represents '1' with '1677'
c Var 'aux385' order represents '1' with '1'
c Var 'aux385' order represents '0' with '-1677'
c Encoding variable: aux386 with domain: bool (representing constraint (((x_00008_00009=9) + (x_00009_00007=9) + (x_00009_00008=9) + (x_00009_00009=9))<=1))
c Var 'aux386' direct represents '0' with '-1678'
c Var 'aux386' direct represents '1' with '1678'
c Var 'aux386' order represents '1' with '1'
c Var 'aux386' order represents '0' with '-1678'
c Encoding variable: aux387 with domain: int(0..16) (representing constraint (shift(x_00002_00001, -1) + shift(x_00001_00002, -1)))
c Both direct and order encoding.
c Var 'aux387' order represents '0' with '1679'
c Var 'aux387' direct represents '0' with '1679'
c Var 'aux387' order represents '1' with '1680'
-1679 1680 0
c Var 'aux387' direct represents '1' with '1681'
1679 -1680 1681 0
-1681 1680 0
-1681 -1679 0
c Var 'aux387' order represents '2' with '1682'
-1680 1682 0
c Var 'aux387' direct represents '2' with '1683'
1680 -1682 1683 0
-1683 1682 0
-1683 -1680 0
c Var 'aux387' order represents '3' with '1684'
-1682 1684 0
c Var 'aux387' direct represents '3' with '1685'
1682 -1684 1685 0
-1685 1684 0
-1685 -1682 0
c Var 'aux387' order represents '4' with '1686'
-1684 1686 0
c Var 'aux387' direct represents '4' with '1687'
1684 -1686 1687 0
-1687 1686 0
-1687 -1684 0
c Var 'aux387' order represents '5' with '1688'
-1686 1688 0
c Var 'aux387' direct represents '5' with '1689'
1686 -1688 1689 0
-1689 1688 0
-1689 -1686 0
c Var 'aux387' order represents '6' with '1690'
-1688 1690 0
c Var 'aux387' direct represents '6' with '1691'
1688 -1690 1691 0
-1691 1690 0
-1691 -1688 0
c Var 'aux387' order represents '7' with '1692'
-1690 1692 0
c Var 'aux387' direct represents '7' with '1693'
1690 -1692 1693 0
-1693 1692 0
-1693 -1690 0
c Var 'aux387' order represents '8' with '1694'
-1692 1694 0
c Var 'aux387' direct represents '8' with '1695'
1692 -1694 1695 0
-1695 1694 0
-1695 -1692 0
c Var 'aux387' order represents '9' with '1696'
-1694 1696 0
c Var 'aux387' direct represents '9' with '1697'
1694 -1696 1697 0
-1697 1696 0
-1697 -1694 0
c Var 'aux387' order represents '10' with '1698'
-1696 1698 0
c Var 'aux387' direct represents '10' with '1699'
1696 -1698 1699 0
-1699 1698 0
-1699 -1696 0
c Var 'aux387' order represents '11' with '1700'
-1698 1700 0
c Var 'aux387' direct represents '11' with '1701'
1698 -1700 1701 0
-1701 1700 0
-1701 -1698 0
c Var 'aux387' order represents '12' with '1702'
-1700 1702 0
c Var 'aux387' direct represents '12' with '1703'
1700 -1702 1703 0
-1703 1702 0
-1703 -1700 0
c Var 'aux387' order represents '13' with '1704'
-1702 1704 0
c Var 'aux387' direct represents '13' with '1705'
1702 -1704 1705 0
-1705 1704 0
-1705 -1702 0
c Var 'aux387' order represents '14' with '1706'
-1704 1706 0
c Var 'aux387' direct represents '14' with '1707'
1704 -1706 1707 0
-1707 1706 0
-1707 -1704 0
c Var 'aux387' order represents '15' with '1708'
-1706 1708 0
c Var 'aux387' direct represents '15' with '1709'
1706 -1708 1709 0
-1709 1708 0
-1709 -1706 0
c Var 'aux387' direct represents '16' with '-1708'
1679 1681 1683 1685 1687 1689 1691 1693 1695 1697 1699 1701 1703 1705 1707 1709 -1708 0
c Encoding variable: aux388 with domain: int(0..16) (representing constraint (shift(x_00002_00007, -1) + shift(x_00001_00009, -1)))
c Both direct and order encoding.
c Var 'aux388' order represents '0' with '1710'
c Var 'aux388' direct represents '0' with '1710'
c Var 'aux388' order represents '1' with '1711'
-1710 1711 0
c Var 'aux388' direct represents '1' with '1712'
1710 -1711 1712 0
-1712 1711 0
-1712 -1710 0
c Var 'aux388' order represents '2' with '1713'
-1711 1713 0
c Var 'aux388' direct represents '2' with '1714'
1711 -1713 1714 0
-1714 1713 0
-1714 -1711 0
c Var 'aux388' order represents '3' with '1715'
-1713 1715 0
c Var 'aux388' direct represents '3' with '1716'
1713 -1715 1716 0
-1716 1715 0
-1716 -1713 0
c Var 'aux388' order represents '4' with '1717'
-1715 1717 0
c Var 'aux388' direct represents '4' with '1718'
1715 -1717 1718 0
-1718 1717 0
-1718 -1715 0
c Var 'aux388' order represents '5' with '1719'
-1717 1719 0
c Var 'aux388' direct represents '5' with '1720'
1717 -1719 1720 0
-1720 1719 0
-1720 -1717 0
c Var 'aux388' order represents '6' with '1721'
-1719 1721 0
c Var 'aux388' direct represents '6' with '1722'
1719 -1721 1722 0
-1722 1721 0
-1722 -1719 0
c Var 'aux388' order represents '7' with '1723'
-1721 1723 0
c Var 'aux388' direct represents '7' with '1724'
1721 -1723 1724 0
-1724 1723 0
-1724 -1721 0
c Var 'aux388' order represents '8' with '1725'
-1723 1725 0
c Var 'aux388' direct represents '8' with '1726'
1723 -1725 1726 0
-1726 1725 0
-1726 -1723 0
c Var 'aux388' order represents '9' with '1727'
-1725 1727 0
c Var 'aux388' direct represents '9' with '1728'
1725 -1727 1728 0
-1728 1727 0
-1728 -1725 0
c Var 'aux388' order represents '10' with '1729'
-1727 1729 0
c Var 'aux388' direct represents '10' with '1730'
1727 -1729 1730 0
-1730 1729 0
-1730 -1727 0
c Var 'aux388' order represents '11' with '1731'
-1729 1731 0
c Var 'aux388' direct represents '11' with '1732'
1729 -1731 1732 0
-1732 1731 0
-1732 -1729 0
c Var 'aux388' order represents '12' with '1733'
-1731 1733 0
c Var 'aux388' direct represents '12' with '1734'
1731 -1733 1734 0
-1734 1733 0
-1734 -1731 0
c Var 'aux388' order represents '13' with '1735'
-1733 1735 0
c Var 'aux388' direct represents '13' with '1736'
1733 -1735 1736 0
-1736 1735 0
-1736 -1733 0
c Var 'aux388' order represents '14' with '1737'
-1735 1737 0
c Var 'aux388' direct represents '14' with '1738'
1735 -1737 1738 0
-1738 1737 0
-1738 -1735 0
c Var 'aux388' order represents '15' with '1739'
-1737 1739 0
c Var 'aux388' direct represents '15' with '1740'
1737 -1739 1740 0
-1740 1739 0
-1740 -1737 0
c Var 'aux388' direct represents '16' with '-1739'
1710 1712 1714 1716 1718 1720 1722 1724 1726 1728 1730 1732 1734 1736 1738 1740 -1739 0
c Encoding variable: aux389 with domain: int(0..16) (representing constraint (shift(x_00001_00008, -1) + shift(x_00002_00008, -1)))
c Both direct and order encoding.
c Var 'aux389' order represents '0' with '1741'
c Var 'aux389' direct represents '0' with '1741'
c Var 'aux389' order represents '1' with '1742'
-1741 1742 0
c Var 'aux389' direct represents '1' with '1743'
1741 -1742 1743 0
-1743 1742 0
-1743 -1741 0
c Var 'aux389' order represents '2' with '1744'
-1742 1744 0
c Var 'aux389' direct represents '2' with '1745'
1742 -1744 1745 0
-1745 1744 0
-1745 -1742 0
c Var 'aux389' order represents '3' with '1746'
-1744 1746 0
c Var 'aux389' direct represents '3' with '1747'
1744 -1746 1747 0
-1747 1746 0
-1747 -1744 0
c Var 'aux389' order represents '4' with '1748'
-1746 1748 0
c Var 'aux389' direct represents '4' with '1749'
1746 -1748 1749 0
-1749 1748 0
-1749 -1746 0
c Var 'aux389' order represents '5' with '1750'
-1748 1750 0
c Var 'aux389' direct represents '5' with '1751'
1748 -1750 1751 0
-1751 1750 0
-1751 -1748 0
c Var 'aux389' order represents '6' with '1752'
-1750 1752 0
c Var 'aux389' direct represents '6' with '1753'
1750 -1752 1753 0
-1753 1752 0
-1753 -1750 0
c Var 'aux389' order represents '7' with '1754'
-1752 1754 0
c Var 'aux389' direct represents '7' with '1755'
1752 -1754 1755 0
-1755 1754 0
-1755 -1752 0
c Var 'aux389' order represents '8' with '1756'
-1754 1756 0
c Var 'aux389' direct represents '8' with '1757'
1754 -1756 1757 0
-1757 1756 0
-1757 -1754 0
c Var 'aux389' order represents '9' with '1758'
-1756 1758 0
c Var 'aux389' direct represents '9' with '1759'
1756 -1758 1759 0
-1759 1758 0
-1759 -1756 0
c Var 'aux389' order represents '10' with '1760'
-1758 1760 0
c Var 'aux389' direct represents '10' with '1761'
1758 -1760 1761 0
-1761 1760 0
-1761 -1758 0
c Var 'aux389' order represents '11' with '1762'
-1760 1762 0
c Var 'aux389' direct represents '11' with '1763'
1760 -1762 1763 0
-1763 1762 0
-1763 -1760 0
c Var 'aux389' order represents '12' with '1764'
-1762 1764 0
c Var 'aux389' direct represents '12' with '1765'
1762 -1764 1765 0
-1765 1764 0
-1765 -1762 0
c Var 'aux389' order represents '13' with '1766'
-1764 1766 0
c Var 'aux389' direct represents '13' with '1767'
1764 -1766 1767 0
-1767 1766 0
-1767 -1764 0
c Var 'aux389' order represents '14' with '1768'
-1766 1768 0
c Var 'aux389' direct represents '14' with '1769'
1766 -1768 1769 0
-1769 1768 0
-1769 -1766 0
c Var 'aux389' order represents '15' with '1770'
-1768 1770 0
c Var 'aux389' direct represents '15' with '1771'
1768 -1770 1771 0
-1771 1770 0
-1771 -1768 0
c Var 'aux389' direct represents '16' with '-1770'
1741 1743 1745 1747 1749 1751 1753 1755 1757 1759 1761 1763 1765 1767 1769 1771 -1770 0
c Encoding variable: aux390 with domain: int(0..16) (representing constraint (shift(x_00001_00007, -1) + shift(x_00003_00008, -1)))
c Both direct and order encoding.
c Var 'aux390' order represents '0' with '1772'
c Var 'aux390' direct represents '0' with '1772'
c Var 'aux390' order represents '1' with '1773'
-1772 1773 0
c Var 'aux390' direct represents '1' with '1774'
1772 -1773 1774 0
-1774 1773 0
-1774 -1772 0
c Var 'aux390' order represents '2' with '1775'
-1773 1775 0
c Var 'aux390' direct represents '2' with '1776'
1773 -1775 1776 0
-1776 1775 0
-1776 -1773 0
c Var 'aux390' order represents '3' with '1777'
-1775 1777 0
c Var 'aux390' direct represents '3' with '1778'
1775 -1777 1778 0
-1778 1777 0
-1778 -1775 0
c Var 'aux390' order represents '4' with '1779'
-1777 1779 0
c Var 'aux390' direct represents '4' with '1780'
1777 -1779 1780 0
-1780 1779 0
-1780 -1777 0
c Var 'aux390' order represents '5' with '1781'
-1779 1781 0
c Var 'aux390' direct represents '5' with '1782'
1779 -1781 1782 0
-1782 1781 0
-1782 -1779 0
c Var 'aux390' order represents '6' with '1783'
-1781 1783 0
c Var 'aux390' direct represents '6' with '1784'
1781 -1783 1784 0
-1784 1783 0
-1784 -1781 0
c Var 'aux390' order represents '7' with '1785'
-1783 1785 0
c Var 'aux390' direct represents '7' with '1786'
1783 -1785 1786 0
-1786 1785 0
-1786 -1783 0
c Var 'aux390' order represents '8' with '1787'
-1785 1787 0
c Var 'aux390' direct represents '8' with '1788'
1785 -1787 1788 0
-1788 1787 0
-1788 -1785 0
c Var 'aux390' order represents '9' with '1789'
-1787 1789 0
c Var 'aux390' direct represents '9' with '1790'
1787 -1789 1790 0
-1790 1789 0
-1790 -1787 0
c Var 'aux390' order represents '10' with '1791'
-1789 1791 0
c Var 'aux390' direct represents '10' with '1792'
1789 -1791 1792 0
-1792 1791 0
-1792 -1789 0
c Var 'aux390' order represents '11' with '1793'
-1791 1793 0
c Var 'aux390' direct represents '11' with '1794'
1791 -1793 1794 0
-1794 1793 0
-1794 -1791 0
c Var 'aux390' order represents '12' with '1795'
-1793 1795 0
c Var 'aux390' direct represents '12' with '1796'
1793 -1795 1796 0
-1796 1795 0
-1796 -1793 0
c Var 'aux390' order represents '13' with '1797'
-1795 1797 0
c Var 'aux390' direct represents '13' with '1798'
1795 -1797 1798 0
-1798 1797 0
-1798 -1795 0
c Var 'aux390' order represents '14' with '1799'
-1797 1799 0
c Var 'aux390' direct represents '14' with '1800'
1797 -1799 1800 0
-1800 1799 0
-1800 -1797 0
c Var 'aux390' order represents '15' with '1801'
-1799 1801 0
c Var 'aux390' direct represents '15' with '1802'
1799 -1801 1802 0
-1802 1801 0
-1802 -1799 0
c Var 'aux390' direct represents '16' with '-1801'
1772 1774 1776 1778 1780 1782 1784 1786 1788 1790 1792 1794 1796 1798 1800 1802 -1801 0
c Encoding variable: aux391 with domain: int(0..16) (representing constraint (shift(x_00003_00009, -1) + shift(x_00002_00009, -1)))
c Both direct and order encoding.
c Var 'aux391' order represents '0' with '1803'
c Var 'aux391' direct represents '0' with '1803'
c Var 'aux391' order represents '1' with '1804'
-1803 1804 0
c Var 'aux391' direct represents '1' with '1805'
1803 -1804 1805 0
-1805 1804 0
-1805 -1803 0
c Var 'aux391' order represents '2' with '1806'
-1804 1806 0
c Var 'aux391' direct represents '2' with '1807'
1804 -1806 1807 0
-1807 1806 0
-1807 -1804 0
c Var 'aux391' order represents '3' with '1808'
-1806 1808 0
c Var 'aux391' direct represents '3' with '1809'
1806 -1808 1809 0
-1809 1808 0
-1809 -1806 0
c Var 'aux391' order represents '4' with '1810'
-1808 1810 0
c Var 'aux391' direct represents '4' with '1811'
1808 -1810 1811 0
-1811 1810 0
-1811 -1808 0
c Var 'aux391' order represents '5' with '1812'
-1810 1812 0
c Var 'aux391' direct represents '5' with '1813'
1810 -1812 1813 0
-1813 1812 0
-1813 -1810 0
c Var 'aux391' order represents '6' with '1814'
-1812 1814 0
c Var 'aux391' direct represents '6' with '1815'
1812 -1814 1815 0
-1815 1814 0
-1815 -1812 0
c Var 'aux391' order represents '7' with '1816'
-1814 1816 0
c Var 'aux391' direct represents '7' with '1817'
1814 -1816 1817 0
-1817 1816 0
-1817 -1814 0
c Var 'aux391' order represents '8' with '1818'
-1816 1818 0
c Var 'aux391' direct represents '8' with '1819'
1816 -1818 1819 0
-1819 1818 0
-1819 -1816 0
c Var 'aux391' order represents '9' with '1820'
-1818 1820 0
c Var 'aux391' direct represents '9' with '1821'
1818 -1820 1821 0
-1821 1820 0
-1821 -1818 0
c Var 'aux391' order represents '10' with '1822'
-1820 1822 0
c Var 'aux391' direct represents '10' with '1823'
1820 -1822 1823 0
-1823 1822 0
-1823 -1820 0
c Var 'aux391' order represents '11' with '1824'
-1822 1824 0
c Var 'aux391' direct represents '11' with '1825'
1822 -1824 1825 0
-1825 1824 0
-1825 -1822 0
c Var 'aux391' order represents '12' with '1826'
-1824 1826 0
c Var 'aux391' direct represents '12' with '1827'
1824 -1826 1827 0
-1827 1826 0
-1827 -1824 0
c Var 'aux391' order represents '13' with '1828'
-1826 1828 0
c Var 'aux391' direct represents '13' with '1829'
1826 -1828 1829 0
-1829 1828 0
-1829 -1826 0
c Var 'aux391' order represents '14' with '1830'
-1828 1830 0
c Var 'aux391' direct represents '14' with '1831'
1828 -1830 1831 0
-1831 1830 0
-1831 -1828 0
c Var 'aux391' order represents '15' with '1832'
-1830 1832 0
c Var 'aux391' direct represents '15' with '1833'
1830 -1832 1833 0
-1833 1832 0
-1833 -1830 0
c Var 'aux391' direct represents '16' with '-1832'
1803 1805 1807 1809 1811 1813 1815 1817 1819 1821 1823 1825 1827 1829 1831 1833 -1832 0
c Encoding variable: aux392 with domain: int(0..32) (representing constraint (aux388 + aux391))
c Both direct and order encoding.
c Var 'aux392' order represents '0' with '1834'
c Var 'aux392' direct represents '0' with '1834'
c Var 'aux392' order represents '1' with '1835'
-1834 1835 0
c Var 'aux392' direct represents '1' with '1836'
1834 -1835 1836 0
-1836 1835 0
-1836 -1834 0
c Var 'aux392' order represents '2' with '1837'
-1835 1837 0
c Var 'aux392' direct represents '2' with '1838'
1835 -1837 1838 0
-1838 1837 0
-1838 -1835 0
c Var 'aux392' order represents '3' with '1839'
-1837 1839 0
c Var 'aux392' direct represents '3' with '1840'
1837 -1839 1840 0
-1840 1839 0
-1840 -1837 0
c Var 'aux392' order represents '4' with '1841'
-1839 1841 0
c Var 'aux392' direct represents '4' with '1842'
1839 -1841 1842 0
-1842 1841 0
-1842 -1839 0
c Var 'aux392' order represents '5' with '1843'
-1841 1843 0
c Var 'aux392' direct represents '5' with '1844'
1841 -1843 1844 0
-1844 1843 0
-1844 -1841 0
c Var 'aux392' order represents '6' with '1845'
-1843 1845 0
c Var 'aux392' direct represents '6' with '1846'
1843 -1845 1846 0
-1846 1845 0
-1846 -1843 0
c Var 'aux392' order represents '7' with '1847'
-1845 1847 0
c Var 'aux392' direct represents '7' with '1848'
1845 -1847 1848 0
-1848 1847 0
-1848 -1845 0
c Var 'aux392' order represents '8' with '1849'
-1847 1849 0
c Var 'aux392' direct represents '8' with '1850'
1847 -1849 1850 0
-1850 1849 0
-1850 -1847 0
c Var 'aux392' order represents '9' with '1851'
-1849 1851 0
c Var 'aux392' direct represents '9' with '1852'
1849 -1851 1852 0
-1852 1851 0
-1852 -1849 0
c Var 'aux392' order represents '10' with '1853'
-1851 1853 0
c Var 'aux392' direct represents '10' with '1854'
1851 -1853 1854 0
-1854 1853 0
-1854 -1851 0
c Var 'aux392' order represents '11' with '1855'
-1853 1855 0
c Var 'aux392' direct represents '11' with '1856'
1853 -1855 1856 0
-1856 1855 0
-1856 -1853 0
c Var 'aux392' order represents '12' with '1857'
-1855 1857 0
c Var 'aux392' direct represents '12' with '1858'
1855 -1857 1858 0
-1858 1857 0
-1858 -1855 0
c Var 'aux392' order represents '13' with '1859'
-1857 1859 0
c Var 'aux392' direct represents '13' with '1860'
1857 -1859 1860 0
-1860 1859 0
-1860 -1857 0
c Var 'aux392' order represents '14' with '1861'
-1859 1861 0
c Var 'aux392' direct represents '14' with '1862'
1859 -1861 1862 0
-1862 1861 0
-1862 -1859 0
c Var 'aux392' order represents '15' with '1863'
-1861 1863 0
c Var 'aux392' direct represents '15' with '1864'
1861 -1863 1864 0
-1864 1863 0
-1864 -1861 0
c Var 'aux392' order represents '16' with '1865'
-1863 1865 0
c Var 'aux392' direct represents '16' with '1866'
1863 -1865 1866 0
-1866 1865 0
-1866 -1863 0
c Var 'aux392' order represents '17' with '1867'
-1865 1867 0
c Var 'aux392' direct represents '17' with '1868'
1865 -1867 1868 0
-1868 1867 0
-1868 -1865 0
c Var 'aux392' order represents '18' with '1869'
-1867 1869 0
c Var 'aux392' direct represents '18' with '1870'
1867 -1869 1870 0
-1870 1869 0
-1870 -1867 0
c Var 'aux392' order represents '19' with '1871'
-1869 1871 0
c Var 'aux392' direct represents '19' with '1872'
1869 -1871 1872 0
-1872 1871 0
-1872 -1869 0
c Var 'aux392' order represents '20' with '1873'
-1871 1873 0
c Var 'aux392' direct represents '20' with '1874'
1871 -1873 1874 0
-1874 1873 0
-1874 -1871 0
c Var 'aux392' order represents '21' with '1875'
-1873 1875 0
c Var 'aux392' direct represents '21' with '1876'
1873 -1875 1876 0
-1876 1875 0
-1876 -1873 0
c Var 'aux392' order represents '22' with '1877'
-1875 1877 0
c Var 'aux392' direct represents '22' with '1878'
1875 -1877 1878 0
-1878 1877 0
-1878 -1875 0
c Var 'aux392' order represents '23' with '1879'
-1877 1879 0
c Var 'aux392' direct represents '23' with '1880'
1877 -1879 1880 0
-1880 1879 0
-1880 -1877 0
c Var 'aux392' order represents '24' with '1881'
-1879 1881 0
c Var 'aux392' direct represents '24' with '1882'
1879 -1881 1882 0
-1882 1881 0
-1882 -1879 0
c Var 'aux392' order represents '25' with '1883'
-1881 1883 0
c Var 'aux392' direct represents '25' with '1884'
1881 -1883 1884 0
-1884 1883 0
-1884 -1881 0
c Var 'aux392' order represents '26' with '1885'
-1883 1885 0
c Var 'aux392' direct represents '26' with '1886'
1883 -1885 1886 0
-1886 1885 0
-1886 -1883 0
c Var 'aux392' order represents '27' with '1887'
-1885 1887 0
c Var 'aux392' direct represents '27' with '1888'
1885 -1887 1888 0
-1888 1887 0
-1888 -1885 0
c Var 'aux392' order represents '28' with '1889'
-1887 1889 0
c Var 'aux392' direct represents '28' with '1890'
1887 -1889 1890 0
-1890 1889 0
-1890 -1887 0
c Var 'aux392' order represents '29' with '1891'
-1889 1891 0
c Var 'aux392' direct represents '29' with '1892'
1889 -1891 1892 0
-1892 1891 0
-1892 -1889 0
c Var 'aux392' order represents '30' with '1893'
-1891 1893 0
c Var 'aux392' direct represents '30' with '1894'
1891 -1893 1894 0
-1894 1893 0
-1894 -1891 0
c Var 'aux392' order represents '31' with '1895'
-1893 1895 0
c Var 'aux392' direct represents '31' with '1896'
1893 -1895 1896 0
-1896 1895 0
-1896 -1893 0
c Var 'aux392' direct represents '32' with '-1895'
1834 1836 1838 1840 1842 1844 1846 1848 1850 1852 1854 1856 1858 1860 1862 1864 1866 1868 1870 1872 1874 1876 1878 1880 1882 1884 1886 1888 1890 1892 1894 1896 -1895 0
c Encoding variable: aux393 with domain: int(0..16) (representing constraint (shift(x_00002_00003, -1) + shift(x_00004_00004, -1)))
c Both direct and order encoding.
c Var 'aux393' order represents '0' with '1897'
c Var 'aux393' direct represents '0' with '1897'
c Var 'aux393' order represents '1' with '1898'
-1897 1898 0
c Var 'aux393' direct represents '1' with '1899'
1897 -1898 1899 0
-1899 1898 0
-1899 -1897 0
c Var 'aux393' order represents '2' with '1900'
-1898 1900 0
c Var 'aux393' direct represents '2' with '1901'
1898 -1900 1901 0
-1901 1900 0
-1901 -1898 0
c Var 'aux393' order represents '3' with '1902'
-1900 1902 0
c Var 'aux393' direct represents '3' with '1903'
1900 -1902 1903 0
-1903 1902 0
-1903 -1900 0
c Var 'aux393' order represents '4' with '1904'
-1902 1904 0
c Var 'aux393' direct represents '4' with '1905'
1902 -1904 1905 0
-1905 1904 0
-1905 -1902 0
c Var 'aux393' order represents '5' with '1906'
-1904 1906 0
c Var 'aux393' direct represents '5' with '1907'
1904 -1906 1907 0
-1907 1906 0
-1907 -1904 0
c Var 'aux393' order represents '6' with '1908'
-1906 1908 0
c Var 'aux393' direct represents '6' with '1909'
1906 -1908 1909 0
-1909 1908 0
-1909 -1906 0
c Var 'aux393' order represents '7' with '1910'
-1908 1910 0
c Var 'aux393' direct represents '7' with '1911'
1908 -1910 1911 0
-1911 1910 0
-1911 -1908 0
c Var 'aux393' order represents '8' with '1912'
-1910 1912 0
c Var 'aux393' direct represents '8' with '1913'
1910 -1912 1913 0
-1913 1912 0
-1913 -1910 0
c Var 'aux393' order represents '9' with '1914'
-1912 1914 0
c Var 'aux393' direct represents '9' with '1915'
1912 -1914 1915 0
-1915 1914 0
-1915 -1912 0
c Var 'aux393' order represents '10' with '1916'
-1914 1916 0
c Var 'aux393' direct represents '10' with '1917'
1914 -1916 1917 0
-1917 1916 0
-1917 -1914 0
c Var 'aux393' order represents '11' with '1918'
-1916 1918 0
c Var 'aux393' direct represents '11' with '1919'
1916 -1918 1919 0
-1919 1918 0
-1919 -1916 0
c Var 'aux393' order represents '12' with '1920'
-1918 1920 0
c Var 'aux393' direct represents '12' with '1921'
1918 -1920 1921 0
-1921 1920 0
-1921 -1918 0
c Var 'aux393' order represents '13' with '1922'
-1920 1922 0
c Var 'aux393' direct represents '13' with '1923'
1920 -1922 1923 0
-1923 1922 0
-1923 -1920 0
c Var 'aux393' order represents '14' with '1924'
-1922 1924 0
c Var 'aux393' direct represents '14' with '1925'
1922 -1924 1925 0
-1925 1924 0
-1925 -1922 0
c Var 'aux393' order represents '15' with '1926'
-1924 1926 0
c Var 'aux393' direct represents '15' with '1927'
1924 -1926 1927 0
-1927 1926 0
-1927 -1924 0
c Var 'aux393' direct represents '16' with '-1926'
1897 1899 1901 1903 1905 1907 1909 1911 1913 1915 1917 1919 1921 1923 1925 1927 -1926 0
c Encoding variable: aux394 with domain: int(0..16) (representing constraint (shift(x_00003_00004, -1) + shift(x_00002_00004, -1)))
c Both direct and order encoding.
c Var 'aux394' order represents '0' with '1928'
c Var 'aux394' direct represents '0' with '1928'
c Var 'aux394' order represents '1' with '1929'
-1928 1929 0
c Var 'aux394' direct represents '1' with '1930'
1928 -1929 1930 0
-1930 1929 0
-1930 -1928 0
c Var 'aux394' order represents '2' with '1931'
-1929 1931 0
c Var 'aux394' direct represents '2' with '1932'
1929 -1931 1932 0
-1932 1931 0
-1932 -1929 0
c Var 'aux394' order represents '3' with '1933'
-1931 1933 0
c Var 'aux394' direct represents '3' with '1934'
1931 -1933 1934 0
-1934 1933 0
-1934 -1931 0
c Var 'aux394' order represents '4' with '1935'
-1933 1935 0
c Var 'aux394' direct represents '4' with '1936'
1933 -1935 1936 0
-1936 1935 0
-1936 -1933 0
c Var 'aux394' order represents '5' with '1937'
-1935 1937 0
c Var 'aux394' direct represents '5' with '1938'
1935 -1937 1938 0
-1938 1937 0
-1938 -1935 0
c Var 'aux394' order represents '6' with '1939'
-1937 1939 0
c Var 'aux394' direct represents '6' with '1940'
1937 -1939 1940 0
-1940 1939 0
-1940 -1937 0
c Var 'aux394' order represents '7' with '1941'
-1939 1941 0
c Var 'aux394' direct represents '7' with '1942'
1939 -1941 1942 0
-1942 1941 0
-1942 -1939 0
c Var 'aux394' order represents '8' with '1943'
-1941 1943 0
c Var 'aux394' direct represents '8' with '1944'
1941 -1943 1944 0
-1944 1943 0
-1944 -1941 0
c Var 'aux394' order represents '9' with '1945'
-1943 1945 0
c Var 'aux394' direct represents '9' with '1946'
1943 -1945 1946 0
-1946 1945 0
-1946 -1943 0
c Var 'aux394' order represents '10' with '1947'
-1945 1947 0
c Var 'aux394' direct represents '10' with '1948'
1945 -1947 1948 0
-1948 1947 0
-1948 -1945 0
c Var 'aux394' order represents '11' with '1949'
-1947 1949 0
c Var 'aux394' direct represents '11' with '1950'
1947 -1949 1950 0
-1950 1949 0
-1950 -1947 0
c Var 'aux394' order represents '12' with '1951'
-1949 1951 0
c Var 'aux394' direct represents '12' with '1952'
1949 -1951 1952 0
-1952 1951 0
-1952 -1949 0
c Var 'aux394' order represents '13' with '1953'
-1951 1953 0
c Var 'aux394' direct represents '13' with '1954'
1951 -1953 1954 0
-1954 1953 0
-1954 -1951 0
c Var 'aux394' order represents '14' with '1955'
-1953 1955 0
c Var 'aux394' direct represents '14' with '1956'
1953 -1955 1956 0
-1956 1955 0
-1956 -1953 0
c Var 'aux394' order represents '15' with '1957'
-1955 1957 0
c Var 'aux394' direct represents '15' with '1958'
1955 -1957 1958 0
-1958 1957 0
-1958 -1955 0
c Var 'aux394' direct represents '16' with '-1957'
1928 1930 1932 1934 1936 1938 1940 1942 1944 1946 1948 1950 1952 1954 1956 1958 -1957 0
c Encoding variable: aux395 with domain: int(0..16) (representing constraint (shift(x_00003_00005, -1) + shift(x_00005_00007, -1)))
c Both direct and order encoding.
c Var 'aux395' order represents '0' with '1959'
c Var 'aux395' direct represents '0' with '1959'
c Var 'aux395' order represents '1' with '1960'
-1959 1960 0
c Var 'aux395' direct represents '1' with '1961'
1959 -1960 1961 0
-1961 1960 0
-1961 -1959 0
c Var 'aux395' order represents '2' with '1962'
-1960 1962 0
c Var 'aux395' direct represents '2' with '1963'
1960 -1962 1963 0
-1963 1962 0
-1963 -1960 0
c Var 'aux395' order represents '3' with '1964'
-1962 1964 0
c Var 'aux395' direct represents '3' with '1965'
1962 -1964 1965 0
-1965 1964 0
-1965 -1962 0
c Var 'aux395' order represents '4' with '1966'
-1964 1966 0
c Var 'aux395' direct represents '4' with '1967'
1964 -1966 1967 0
-1967 1966 0
-1967 -1964 0
c Var 'aux395' order represents '5' with '1968'
-1966 1968 0
c Var 'aux395' direct represents '5' with '1969'
1966 -1968 1969 0
-1969 1968 0
-1969 -1966 0
c Var 'aux395' order represents '6' with '1970'
-1968 1970 0
c Var 'aux395' direct represents '6' with '1971'
1968 -1970 1971 0
-1971 1970 0
-1971 -1968 0
c Var 'aux395' order represents '7' with '1972'
-1970 1972 0
c Var 'aux395' direct represents '7' with '1973'
1970 -1972 1973 0
-1973 1972 0
-1973 -1970 0
c Var 'aux395' order represents '8' with '1974'
-1972 1974 0
c Var 'aux395' direct represents '8' with '1975'
1972 -1974 1975 0
-1975 1974 0
-1975 -1972 0
c Var 'aux395' order represents '9' with '1976'
-1974 1976 0
c Var 'aux395' direct represents '9' with '1977'
1974 -1976 1977 0
-1977 1976 0
-1977 -1974 0
c Var 'aux395' order represents '10' with '1978'
-1976 1978 0
c Var 'aux395' direct represents '10' with '1979'
1976 -1978 1979 0
-1979 1978 0
-1979 -1976 0
c Var 'aux395' order represents '11' with '1980'
-1978 1980 0
c Var 'aux395' direct represents '11' with '1981'
1978 -1980 1981 0
-1981 1980 0
-1981 -1978 0
c Var 'aux395' order represents '12' with '1982'
-1980 1982 0
c Var 'aux395' direct represents '12' with '1983'
1980 -1982 1983 0
-1983 1982 0
-1983 -1980 0
c Var 'aux395' order represents '13' with '1984'
-1982 1984 0
c Var 'aux395' direct represents '13' with '1985'
1982 -1984 1985 0
-1985 1984 0
-1985 -1982 0
c Var 'aux395' order represents '14' with '1986'
-1984 1986 0
c Var 'aux395' direct represents '14' with '1987'
1984 -1986 1987 0
-1987 1986 0
-1987 -1984 0
c Var 'aux395' order represents '15' with '1988'
-1986 1988 0
c Var 'aux395' direct represents '15' with '1989'
1986 -1988 1989 0
-1989 1988 0
-1989 -1986 0
c Var 'aux395' direct represents '16' with '-1988'
1959 1961 1963 1965 1967 1969 1971 1973 1975 1977 1979 1981 1983 1985 1987 1989 -1988 0
c Encoding variable: aux396 with domain: int(0..16) (representing constraint (shift(x_00005_00006, -1) + shift(x_00004_00005, -1)))
c Both direct and order encoding.
c Var 'aux396' order represents '0' with '1990'
c Var 'aux396' direct represents '0' with '1990'
c Var 'aux396' order represents '1' with '1991'
-1990 1991 0
c Var 'aux396' direct represents '1' with '1992'
1990 -1991 1992 0
-1992 1991 0
-1992 -1990 0
c Var 'aux396' order represents '2' with '1993'
-1991 1993 0
c Var 'aux396' direct represents '2' with '1994'
1991 -1993 1994 0
-1994 1993 0
-1994 -1991 0
c Var 'aux396' order represents '3' with '1995'
-1993 1995 0
c Var 'aux396' direct represents '3' with '1996'
1993 -1995 1996 0
-1996 1995 0
-1996 -1993 0
c Var 'aux396' order represents '4' with '1997'
-1995 1997 0
c Var 'aux396' direct represents '4' with '1998'
1995 -1997 1998 0
-1998 1997 0
-1998 -1995 0
c Var 'aux396' order represents '5' with '1999'
-1997 1999 0
c Var 'aux396' direct represents '5' with '2000'
1997 -1999 2000 0
-2000 1999 0
-2000 -1997 0
c Var 'aux396' order represents '6' with '2001'
-1999 2001 0
c Var 'aux396' direct represents '6' with '2002'
1999 -2001 2002 0
-2002 2001 0
-2002 -1999 0
c Var 'aux396' order represents '7' with '2003'
-2001 2003 0
c Var 'aux396' direct represents '7' with '2004'
2001 -2003 2004 0
-2004 2003 0
-2004 -2001 0
c Var 'aux396' order represents '8' with '2005'
-2003 2005 0
c Var 'aux396' direct represents '8' with '2006'
2003 -2005 2006 0
-2006 2005 0
-2006 -2003 0
c Var 'aux396' order represents '9' with '2007'
-2005 2007 0
c Var 'aux396' direct represents '9' with '2008'
2005 -2007 2008 0
-2008 2007 0
-2008 -2005 0
c Var 'aux396' order represents '10' with '2009'
-2007 2009 0
c Var 'aux396' direct represents '10' with '2010'
2007 -2009 2010 0
-2010 2009 0
-2010 -2007 0
c Var 'aux396' order represents '11' with '2011'
-2009 2011 0
c Var 'aux396' direct represents '11' with '2012'
2009 -2011 2012 0
-2012 2011 0
-2012 -2009 0
c Var 'aux396' order represents '12' with '2013'
-2011 2013 0
c Var 'aux396' direct represents '12' with '2014'
2011 -2013 2014 0
-2014 2013 0
-2014 -2011 0
c Var 'aux396' order represents '13' with '2015'
-2013 2015 0
c Var 'aux396' direct represents '13' with '2016'
2013 -2015 2016 0
-2016 2015 0
-2016 -2013 0
c Var 'aux396' order represents '14' with '2017'
-2015 2017 0
c Var 'aux396' direct represents '14' with '2018'
2015 -2017 2018 0
-2018 2017 0
-2018 -2015 0
c Var 'aux396' order represents '15' with '2019'
-2017 2019 0
c Var 'aux396' direct represents '15' with '2020'
2017 -2019 2020 0
-2020 2019 0
-2020 -2017 0
c Var 'aux396' direct represents '16' with '-2019'
1990 1992 1994 1996 1998 2000 2002 2004 2006 2008 2010 2012 2014 2016 2018 2020 -2019 0
c Encoding variable: aux397 with domain: int(0..16) (representing constraint (shift(x_00004_00001, -1) + shift(x_00005_00001, -1)))
c Both direct and order encoding.
c Var 'aux397' order represents '0' with '2021'
c Var 'aux397' direct represents '0' with '2021'
c Var 'aux397' order represents '1' with '2022'
-2021 2022 0
c Var 'aux397' direct represents '1' with '2023'
2021 -2022 2023 0
-2023 2022 0
-2023 -2021 0
c Var 'aux397' order represents '2' with '2024'
-2022 2024 0
c Var 'aux397' direct represents '2' with '2025'
2022 -2024 2025 0
-2025 2024 0
-2025 -2022 0
c Var 'aux397' order represents '3' with '2026'
-2024 2026 0
c Var 'aux397' direct represents '3' with '2027'
2024 -2026 2027 0
-2027 2026 0
-2027 -2024 0
c Var 'aux397' order represents '4' with '2028'
-2026 2028 0
c Var 'aux397' direct represents '4' with '2029'
2026 -2028 2029 0
-2029 2028 0
-2029 -2026 0
c Var 'aux397' order represents '5' with '2030'
-2028 2030 0
c Var 'aux397' direct represents '5' with '2031'
2028 -2030 2031 0
-2031 2030 0
-2031 -2028 0
c Var 'aux397' order represents '6' with '2032'
-2030 2032 0
c Var 'aux397' direct represents '6' with '2033'
2030 -2032 2033 0
-2033 2032 0
-2033 -2030 0
c Var 'aux397' order represents '7' with '2034'
-2032 2034 0
c Var 'aux397' direct represents '7' with '2035'
2032 -2034 2035 0
-2035 2034 0
-2035 -2032 0
c Var 'aux397' order represents '8' with '2036'
-2034 2036 0
c Var 'aux397' direct represents '8' with '2037'
2034 -2036 2037 0
-2037 2036 0
-2037 -2034 0
c Var 'aux397' order represents '9' with '2038'
-2036 2038 0
c Var 'aux397' direct represents '9' with '2039'
2036 -2038 2039 0
-2039 2038 0
-2039 -2036 0
c Var 'aux397' order represents '10' with '2040'
-2038 2040 0
c Var 'aux397' direct represents '10' with '2041'
2038 -2040 2041 0
-2041 2040 0
-2041 -2038 0
c Var 'aux397' order represents '11' with '2042'
-2040 2042 0
c Var 'aux397' direct represents '11' with '2043'
2040 -2042 2043 0
-2043 2042 0
-2043 -2040 0
c Var 'aux397' order represents '12' with '2044'
-2042 2044 0
c Var 'aux397' direct represents '12' with '2045'
2042 -2044 2045 0
-2045 2044 0
-2045 -2042 0
c Var 'aux397' order represents '13' with '2046'
-2044 2046 0
c Var 'aux397' direct represents '13' with '2047'
2044 -2046 2047 0
-2047 2046 0
-2047 -2044 0
c Var 'aux397' order represents '14' with '2048'
-2046 2048 0
c Var 'aux397' direct represents '14' with '2049'
2046 -2048 2049 0
-2049 2048 0
-2049 -2046 0
c Var 'aux397' order represents '15' with '2050'
-2048 2050 0
c Var 'aux397' direct represents '15' with '2051'
2048 -2050 2051 0
-2051 2050 0
-2051 -2048 0
c Var 'aux397' direct represents '16' with '-2050'
2021 2023 2025 2027 2029 2031 2033 2035 2037 2039 2041 2043 2045 2047 2049 2051 -2050 0
c Encoding variable: aux398 with domain: int(0..16) (representing constraint (shift(x_00007_00005, -1) + shift(x_00006_00005, -1)))
c Both direct and order encoding.
c Var 'aux398' order represents '0' with '2052'
c Var 'aux398' direct represents '0' with '2052'
c Var 'aux398' order represents '1' with '2053'
-2052 2053 0
c Var 'aux398' direct represents '1' with '2054'
2052 -2053 2054 0
-2054 2053 0
-2054 -2052 0
c Var 'aux398' order represents '2' with '2055'
-2053 2055 0
c Var 'aux398' direct represents '2' with '2056'
2053 -2055 2056 0
-2056 2055 0
-2056 -2053 0
c Var 'aux398' order represents '3' with '2057'
-2055 2057 0
c Var 'aux398' direct represents '3' with '2058'
2055 -2057 2058 0
-2058 2057 0
-2058 -2055 0
c Var 'aux398' order represents '4' with '2059'
-2057 2059 0
c Var 'aux398' direct represents '4' with '2060'
2057 -2059 2060 0
-2060 2059 0
-2060 -2057 0
c Var 'aux398' order represents '5' with '2061'
-2059 2061 0
c Var 'aux398' direct represents '5' with '2062'
2059 -2061 2062 0
-2062 2061 0
-2062 -2059 0
c Var 'aux398' order represents '6' with '2063'
-2061 2063 0
c Var 'aux398' direct represents '6' with '2064'
2061 -2063 2064 0
-2064 2063 0
-2064 -2061 0
c Var 'aux398' order represents '7' with '2065'
-2063 2065 0
c Var 'aux398' direct represents '7' with '2066'
2063 -2065 2066 0
-2066 2065 0
-2066 -2063 0
c Var 'aux398' order represents '8' with '2067'
-2065 2067 0
c Var 'aux398' direct represents '8' with '2068'
2065 -2067 2068 0
-2068 2067 0
-2068 -2065 0
c Var 'aux398' order represents '9' with '2069'
-2067 2069 0
c Var 'aux398' direct represents '9' with '2070'
2067 -2069 2070 0
-2070 2069 0
-2070 -2067 0
c Var 'aux398' order represents '10' with '2071'
-2069 2071 0
c Var 'aux398' direct represents '10' with '2072'
2069 -2071 2072 0
-2072 2071 0
-2072 -2069 0
c Var 'aux398' order represents '11' with '2073'
-2071 2073 0
c Var 'aux398' direct represents '11' with '2074'
2071 -2073 2074 0
-2074 2073 0
-2074 -2071 0
c Var 'aux398' order represents '12' with '2075'
-2073 2075 0
c Var 'aux398' direct represents '12' with '2076'
2073 -2075 2076 0
-2076 2075 0
-2076 -2073 0
c Var 'aux398' order represents '13' with '2077'
-2075 2077 0
c Var 'aux398' direct represents '13' with '2078'
2075 -2077 2078 0
-2078 2077 0
-2078 -2075 0
c Var 'aux398' order represents '14' with '2079'
-2077 2079 0
c Var 'aux398' direct represents '14' with '2080'
2077 -2079 2080 0
-2080 2079 0
-2080 -2077 0
c Var 'aux398' order represents '15' with '2081'
-2079 2081 0
c Var 'aux398' direct represents '15' with '2082'
2079 -2081 2082 0
-2082 2081 0
-2082 -2079 0
c Var 'aux398' direct represents '16' with '-2081'
2052 2054 2056 2058 2060 2062 2064 2066 2068 2070 2072 2074 2076 2078 2080 2082 -2081 0
c Encoding variable: aux399 with domain: int(0..16) (representing constraint (shift(x_00005_00005, -1) + shift(x_00005_00003, -1)))
c Both direct and order encoding.
c Var 'aux399' order represents '0' with '2083'
c Var 'aux399' direct represents '0' with '2083'
c Var 'aux399' order represents '1' with '2084'
-2083 2084 0
c Var 'aux399' direct represents '1' with '2085'
2083 -2084 2085 0
-2085 2084 0
-2085 -2083 0
c Var 'aux399' order represents '2' with '2086'
-2084 2086 0
c Var 'aux399' direct represents '2' with '2087'
2084 -2086 2087 0
-2087 2086 0
-2087 -2084 0
c Var 'aux399' order represents '3' with '2088'
-2086 2088 0
c Var 'aux399' direct represents '3' with '2089'
2086 -2088 2089 0
-2089 2088 0
-2089 -2086 0
c Var 'aux399' order represents '4' with '2090'
-2088 2090 0
c Var 'aux399' direct represents '4' with '2091'
2088 -2090 2091 0
-2091 2090 0
-2091 -2088 0
c Var 'aux399' order represents '5' with '2092'
-2090 2092 0
c Var 'aux399' direct represents '5' with '2093'
2090 -2092 2093 0
-2093 2092 0
-2093 -2090 0
c Var 'aux399' order represents '6' with '2094'
-2092 2094 0
c Var 'aux399' direct represents '6' with '2095'
2092 -2094 2095 0
-2095 2094 0
-2095 -2092 0
c Var 'aux399' order represents '7' with '2096'
-2094 2096 0
c Var 'aux399' direct represents '7' with '2097'
2094 -2096 2097 0
-2097 2096 0
-2097 -2094 0
c Var 'aux399' order represents '8' with '2098'
-2096 2098 0
c Var 'aux399' direct represents '8' with '2099'
2096 -2098 2099 0
-2099 2098 0
-2099 -2096 0
c Var 'aux399' order represents '9' with '2100'
-2098 2100 0
c Var 'aux399' direct represents '9' with '2101'
2098 -2100 2101 0
-2101 2100 0
-2101 -2098 0
c Var 'aux399' order represents '10' with '2102'
-2100 2102 0
c Var 'aux399' direct represents '10' with '2103'
2100 -2102 2103 0
-2103 2102 0
-2103 -2100 0
c Var 'aux399' order represents '11' with '2104'
-2102 2104 0
c Var 'aux399' direct represents '11' with '2105'
2102 -2104 2105 0
-2105 2104 0
-2105 -2102 0
c Var 'aux399' order represents '12' with '2106'
-2104 2106 0
c Var 'aux399' direct represents '12' with '2107'
2104 -2106 2107 0
-2107 2106 0
-2107 -2104 0
c Var 'aux399' order represents '13' with '2108'
-2106 2108 0
c Var 'aux399' direct represents '13' with '2109'
2106 -2108 2109 0
-2109 2108 0
-2109 -2106 0
c Var 'aux399' order represents '14' with '2110'
-2108 2110 0
c Var 'aux399' direct represents '14' with '2111'
2108 -2110 2111 0
-2111 2110 0
-2111 -2108 0
c Var 'aux399' order represents '15' with '2112'
-2110 2112 0
c Var 'aux399' direct represents '15' with '2113'
2110 -2112 2113 0
-2113 2112 0
-2113 -2110 0
c Var 'aux399' direct represents '16' with '-2112'
2083 2085 2087 2089 2091 2093 2095 2097 2099 2101 2103 2105 2107 2109 2111 2113 -2112 0
c Encoding variable: aux400 with domain: int(0..16) (representing constraint (shift(x_00007_00003, -1) + shift(x_00006_00004, -1)))
c Both direct and order encoding.
c Var 'aux400' order represents '0' with '2114'
c Var 'aux400' direct represents '0' with '2114'
c Var 'aux400' order represents '1' with '2115'
-2114 2115 0
c Var 'aux400' direct represents '1' with '2116'
2114 -2115 2116 0
-2116 2115 0
-2116 -2114 0
c Var 'aux400' order represents '2' with '2117'
-2115 2117 0
c Var 'aux400' direct represents '2' with '2118'
2115 -2117 2118 0
-2118 2117 0
-2118 -2115 0
c Var 'aux400' order represents '3' with '2119'
-2117 2119 0
c Var 'aux400' direct represents '3' with '2120'
2117 -2119 2120 0
-2120 2119 0
-2120 -2117 0
c Var 'aux400' order represents '4' with '2121'
-2119 2121 0
c Var 'aux400' direct represents '4' with '2122'
2119 -2121 2122 0
-2122 2121 0
-2122 -2119 0
c Var 'aux400' order represents '5' with '2123'
-2121 2123 0
c Var 'aux400' direct represents '5' with '2124'
2121 -2123 2124 0
-2124 2123 0
-2124 -2121 0
c Var 'aux400' order represents '6' with '2125'
-2123 2125 0
c Var 'aux400' direct represents '6' with '2126'
2123 -2125 2126 0
-2126 2125 0
-2126 -2123 0
c Var 'aux400' order represents '7' with '2127'
-2125 2127 0
c Var 'aux400' direct represents '7' with '2128'
2125 -2127 2128 0
-2128 2127 0
-2128 -2125 0
c Var 'aux400' order represents '8' with '2129'
-2127 2129 0
c Var 'aux400' direct represents '8' with '2130'
2127 -2129 2130 0
-2130 2129 0
-2130 -2127 0
c Var 'aux400' order represents '9' with '2131'
-2129 2131 0
c Var 'aux400' direct represents '9' with '2132'
2129 -2131 2132 0
-2132 2131 0
-2132 -2129 0
c Var 'aux400' order represents '10' with '2133'
-2131 2133 0
c Var 'aux400' direct represents '10' with '2134'
2131 -2133 2134 0
-2134 2133 0
-2134 -2131 0
c Var 'aux400' order represents '11' with '2135'
-2133 2135 0
c Var 'aux400' direct represents '11' with '2136'
2133 -2135 2136 0
-2136 2135 0
-2136 -2133 0
c Var 'aux400' order represents '12' with '2137'
-2135 2137 0
c Var 'aux400' direct represents '12' with '2138'
2135 -2137 2138 0
-2138 2137 0
-2138 -2135 0
c Var 'aux400' order represents '13' with '2139'
-2137 2139 0
c Var 'aux400' direct represents '13' with '2140'
2137 -2139 2140 0
-2140 2139 0
-2140 -2137 0
c Var 'aux400' order represents '14' with '2141'
-2139 2141 0
c Var 'aux400' direct represents '14' with '2142'
2139 -2141 2142 0
-2142 2141 0
-2142 -2139 0
c Var 'aux400' order represents '15' with '2143'
-2141 2143 0
c Var 'aux400' direct represents '15' with '2144'
2141 -2143 2144 0
-2144 2143 0
-2144 -2141 0
c Var 'aux400' direct represents '16' with '-2143'
2114 2116 2118 2120 2122 2124 2126 2128 2130 2132 2134 2136 2138 2140 2142 2144 -2143 0
c Encoding variable: aux401 with domain: int(0..16) (representing constraint (shift(x_00007_00007, -1) + shift(x_00006_00008, -1)))
c Both direct and order encoding.
c Var 'aux401' order represents '0' with '2145'
c Var 'aux401' direct represents '0' with '2145'
c Var 'aux401' order represents '1' with '2146'
-2145 2146 0
c Var 'aux401' direct represents '1' with '2147'
2145 -2146 2147 0
-2147 2146 0
-2147 -2145 0
c Var 'aux401' order represents '2' with '2148'
-2146 2148 0
c Var 'aux401' direct represents '2' with '2149'
2146 -2148 2149 0
-2149 2148 0
-2149 -2146 0
c Var 'aux401' order represents '3' with '2150'
-2148 2150 0
c Var 'aux401' direct represents '3' with '2151'
2148 -2150 2151 0
-2151 2150 0
-2151 -2148 0
c Var 'aux401' order represents '4' with '2152'
-2150 2152 0
c Var 'aux401' direct represents '4' with '2153'
2150 -2152 2153 0
-2153 2152 0
-2153 -2150 0
c Var 'aux401' order represents '5' with '2154'
-2152 2154 0
c Var 'aux401' direct represents '5' with '2155'
2152 -2154 2155 0
-2155 2154 0
-2155 -2152 0
c Var 'aux401' order represents '6' with '2156'
-2154 2156 0
c Var 'aux401' direct represents '6' with '2157'
2154 -2156 2157 0
-2157 2156 0
-2157 -2154 0
c Var 'aux401' order represents '7' with '2158'
-2156 2158 0
c Var 'aux401' direct represents '7' with '2159'
2156 -2158 2159 0
-2159 2158 0
-2159 -2156 0
c Var 'aux401' order represents '8' with '2160'
-2158 2160 0
c Var 'aux401' direct represents '8' with '2161'
2158 -2160 2161 0
-2161 2160 0
-2161 -2158 0
c Var 'aux401' order represents '9' with '2162'
-2160 2162 0
c Var 'aux401' direct represents '9' with '2163'
2160 -2162 2163 0
-2163 2162 0
-2163 -2160 0
c Var 'aux401' order represents '10' with '2164'
-2162 2164 0
c Var 'aux401' direct represents '10' with '2165'
2162 -2164 2165 0
-2165 2164 0
-2165 -2162 0
c Var 'aux401' order represents '11' with '2166'
-2164 2166 0
c Var 'aux401' direct represents '11' with '2167'
2164 -2166 2167 0
-2167 2166 0
-2167 -2164 0
c Var 'aux401' order represents '12' with '2168'
-2166 2168 0
c Var 'aux401' direct represents '12' with '2169'
2166 -2168 2169 0
-2169 2168 0
-2169 -2166 0
c Var 'aux401' order represents '13' with '2170'
-2168 2170 0
c Var 'aux401' direct represents '13' with '2171'
2168 -2170 2171 0
-2171 2170 0
-2171 -2168 0
c Var 'aux401' order represents '14' with '2172'
-2170 2172 0
c Var 'aux401' direct represents '14' with '2173'
2170 -2172 2173 0
-2173 2172 0
-2173 -2170 0
c Var 'aux401' order represents '15' with '2174'
-2172 2174 0
c Var 'aux401' direct represents '15' with '2175'
2172 -2174 2175 0
-2175 2174 0
-2175 -2172 0
c Var 'aux401' direct represents '16' with '-2174'
2145 2147 2149 2151 2153 2155 2157 2159 2161 2163 2165 2167 2169 2171 2173 2175 -2174 0
c Encoding variable: aux402 with domain: int(0..16) (representing constraint (shift(x_00006_00007, -1) + shift(x_00007_00008, -1)))
c Both direct and order encoding.
c Var 'aux402' order represents '0' with '2176'
c Var 'aux402' direct represents '0' with '2176'
c Var 'aux402' order represents '1' with '2177'
-2176 2177 0
c Var 'aux402' direct represents '1' with '2178'
2176 -2177 2178 0
-2178 2177 0
-2178 -2176 0
c Var 'aux402' order represents '2' with '2179'
-2177 2179 0
c Var 'aux402' direct represents '2' with '2180'
2177 -2179 2180 0
-2180 2179 0
-2180 -2177 0
c Var 'aux402' order represents '3' with '2181'
-2179 2181 0
c Var 'aux402' direct represents '3' with '2182'
2179 -2181 2182 0
-2182 2181 0
-2182 -2179 0
c Var 'aux402' order represents '4' with '2183'
-2181 2183 0
c Var 'aux402' direct represents '4' with '2184'
2181 -2183 2184 0
-2184 2183 0
-2184 -2181 0
c Var 'aux402' order represents '5' with '2185'
-2183 2185 0
c Var 'aux402' direct represents '5' with '2186'
2183 -2185 2186 0
-2186 2185 0
-2186 -2183 0
c Var 'aux402' order represents '6' with '2187'
-2185 2187 0
c Var 'aux402' direct represents '6' with '2188'
2185 -2187 2188 0
-2188 2187 0
-2188 -2185 0
c Var 'aux402' order represents '7' with '2189'
-2187 2189 0
c Var 'aux402' direct represents '7' with '2190'
2187 -2189 2190 0
-2190 2189 0
-2190 -2187 0
c Var 'aux402' order represents '8' with '2191'
-2189 2191 0
c Var 'aux402' direct represents '8' with '2192'
2189 -2191 2192 0
-2192 2191 0
-2192 -2189 0
c Var 'aux402' order represents '9' with '2193'
-2191 2193 0
c Var 'aux402' direct represents '9' with '2194'
2191 -2193 2194 0
-2194 2193 0
-2194 -2191 0
c Var 'aux402' order represents '10' with '2195'
-2193 2195 0
c Var 'aux402' direct represents '10' with '2196'
2193 -2195 2196 0
-2196 2195 0
-2196 -2193 0
c Var 'aux402' order represents '11' with '2197'
-2195 2197 0
c Var 'aux402' direct represents '11' with '2198'
2195 -2197 2198 0
-2198 2197 0
-2198 -2195 0
c Var 'aux402' order represents '12' with '2199'
-2197 2199 0
c Var 'aux402' direct represents '12' with '2200'
2197 -2199 2200 0
-2200 2199 0
-2200 -2197 0
c Var 'aux402' order represents '13' with '2201'
-2199 2201 0
c Var 'aux402' direct represents '13' with '2202'
2199 -2201 2202 0
-2202 2201 0
-2202 -2199 0
c Var 'aux402' order represents '14' with '2203'
-2201 2203 0
c Var 'aux402' direct represents '14' with '2204'
2201 -2203 2204 0
-2204 2203 0
-2204 -2201 0
c Var 'aux402' order represents '15' with '2205'
-2203 2205 0
c Var 'aux402' direct represents '15' with '2206'
2203 -2205 2206 0
-2206 2205 0
-2206 -2203 0
c Var 'aux402' direct represents '16' with '-2205'
2176 2178 2180 2182 2184 2186 2188 2190 2192 2194 2196 2198 2200 2202 2204 2206 -2205 0
c Encoding variable: aux403 with domain: int(0..16) (representing constraint (shift(x_00007_00002, -1) + shift(x_00009_00002, -1)))
c Both direct and order encoding.
c Var 'aux403' order represents '0' with '2207'
c Var 'aux403' direct represents '0' with '2207'
c Var 'aux403' order represents '1' with '2208'
-2207 2208 0
c Var 'aux403' direct represents '1' with '2209'
2207 -2208 2209 0
-2209 2208 0
-2209 -2207 0
c Var 'aux403' order represents '2' with '2210'
-2208 2210 0
c Var 'aux403' direct represents '2' with '2211'
2208 -2210 2211 0
-2211 2210 0
-2211 -2208 0
c Var 'aux403' order represents '3' with '2212'
-2210 2212 0
c Var 'aux403' direct represents '3' with '2213'
2210 -2212 2213 0
-2213 2212 0
-2213 -2210 0
c Var 'aux403' order represents '4' with '2214'
-2212 2214 0
c Var 'aux403' direct represents '4' with '2215'
2212 -2214 2215 0
-2215 2214 0
-2215 -2212 0
c Var 'aux403' order represents '5' with '2216'
-2214 2216 0
c Var 'aux403' direct represents '5' with '2217'
2214 -2216 2217 0
-2217 2216 0
-2217 -2214 0
c Var 'aux403' order represents '6' with '2218'
-2216 2218 0
c Var 'aux403' direct represents '6' with '2219'
2216 -2218 2219 0
-2219 2218 0
-2219 -2216 0
c Var 'aux403' order represents '7' with '2220'
-2218 2220 0
c Var 'aux403' direct represents '7' with '2221'
2218 -2220 2221 0
-2221 2220 0
-2221 -2218 0
c Var 'aux403' order represents '8' with '2222'
-2220 2222 0
c Var 'aux403' direct represents '8' with '2223'
2220 -2222 2223 0
-2223 2222 0
-2223 -2220 0
c Var 'aux403' order represents '9' with '2224'
-2222 2224 0
c Var 'aux403' direct represents '9' with '2225'
2222 -2224 2225 0
-2225 2224 0
-2225 -2222 0
c Var 'aux403' order represents '10' with '2226'
-2224 2226 0
c Var 'aux403' direct represents '10' with '2227'
2224 -2226 2227 0
-2227 2226 0
-2227 -2224 0
c Var 'aux403' order represents '11' with '2228'
-2226 2228 0
c Var 'aux403' direct represents '11' with '2229'
2226 -2228 2229 0
-2229 2228 0
-2229 -2226 0
c Var 'aux403' order represents '12' with '2230'
-2228 2230 0
c Var 'aux403' direct represents '12' with '2231'
2228 -2230 2231 0
-2231 2230 0
-2231 -2228 0
c Var 'aux403' order represents '13' with '2232'
-2230 2232 0
c Var 'aux403' direct represents '13' with '2233'
2230 -2232 2233 0
-2233 2232 0
-2233 -2230 0
c Var 'aux403' order represents '14' with '2234'
-2232 2234 0
c Var 'aux403' direct represents '14' with '2235'
2232 -2234 2235 0
-2235 2234 0
-2235 -2232 0
c Var 'aux403' order represents '15' with '2236'
-2234 2236 0
c Var 'aux403' direct represents '15' with '2237'
2234 -2236 2237 0
-2237 2236 0
-2237 -2234 0
c Var 'aux403' direct represents '16' with '-2236'
2207 2209 2211 2213 2215 2217 2219 2221 2223 2225 2227 2229 2231 2233 2235 2237 -2236 0
c Encoding variable: aux404 with domain: int(0..16) (representing constraint (shift(x_00009_00001, -1) + shift(x_00008_00001, -1)))
c Both direct and order encoding.
c Var 'aux404' order represents '0' with '2238'
c Var 'aux404' direct represents '0' with '2238'
c Var 'aux404' order represents '1' with '2239'
-2238 2239 0
c Var 'aux404' direct represents '1' with '2240'
2238 -2239 2240 0
-2240 2239 0
-2240 -2238 0
c Var 'aux404' order represents '2' with '2241'
-2239 2241 0
c Var 'aux404' direct represents '2' with '2242'
2239 -2241 2242 0
-2242 2241 0
-2242 -2239 0
c Var 'aux404' order represents '3' with '2243'
-2241 2243 0
c Var 'aux404' direct represents '3' with '2244'
2241 -2243 2244 0
-2244 2243 0
-2244 -2241 0
c Var 'aux404' order represents '4' with '2245'
-2243 2245 0
c Var 'aux404' direct represents '4' with '2246'
2243 -2245 2246 0
-2246 2245 0
-2246 -2243 0
c Var 'aux404' order represents '5' with '2247'
-2245 2247 0
c Var 'aux404' direct represents '5' with '2248'
2245 -2247 2248 0
-2248 2247 0
-2248 -2245 0
c Var 'aux404' order represents '6' with '2249'
-2247 2249 0
c Var 'aux404' direct represents '6' with '2250'
2247 -2249 2250 0
-2250 2249 0
-2250 -2247 0
c Var 'aux404' order represents '7' with '2251'
-2249 2251 0
c Var 'aux404' direct represents '7' with '2252'
2249 -2251 2252 0
-2252 2251 0
-2252 -2249 0
c Var 'aux404' order represents '8' with '2253'
-2251 2253 0
c Var 'aux404' direct represents '8' with '2254'
2251 -2253 2254 0
-2254 2253 0
-2254 -2251 0
c Var 'aux404' order represents '9' with '2255'
-2253 2255 0
c Var 'aux404' direct represents '9' with '2256'
2253 -2255 2256 0
-2256 2255 0
-2256 -2253 0
c Var 'aux404' order represents '10' with '2257'
-2255 2257 0
c Var 'aux404' direct represents '10' with '2258'
2255 -2257 2258 0
-2258 2257 0
-2258 -2255 0
c Var 'aux404' order represents '11' with '2259'
-2257 2259 0
c Var 'aux404' direct represents '11' with '2260'
2257 -2259 2260 0
-2260 2259 0
-2260 -2257 0
c Var 'aux404' order represents '12' with '2261'
-2259 2261 0
c Var 'aux404' direct represents '12' with '2262'
2259 -2261 2262 0
-2262 2261 0
-2262 -2259 0
c Var 'aux404' order represents '13' with '2263'
-2261 2263 0
c Var 'aux404' direct represents '13' with '2264'
2261 -2263 2264 0
-2264 2263 0
-2264 -2261 0
c Var 'aux404' order represents '14' with '2265'
-2263 2265 0
c Var 'aux404' direct represents '14' with '2266'
2263 -2265 2266 0
-2266 2265 0
-2266 -2263 0
c Var 'aux404' order represents '15' with '2267'
-2265 2267 0
c Var 'aux404' direct represents '15' with '2268'
2265 -2267 2268 0
-2268 2267 0
-2268 -2265 0
c Var 'aux404' direct represents '16' with '-2267'
2238 2240 2242 2244 2246 2248 2250 2252 2254 2256 2258 2260 2262 2264 2266 2268 -2267 0
c Encoding variable: aux405 with domain: int(0..16) (representing constraint (shift(x_00008_00003, -1) + shift(x_00008_00002, -1)))
c Both direct and order encoding.
c Var 'aux405' order represents '0' with '2269'
c Var 'aux405' direct represents '0' with '2269'
c Var 'aux405' order represents '1' with '2270'
-2269 2270 0
c Var 'aux405' direct represents '1' with '2271'
2269 -2270 2271 0
-2271 2270 0
-2271 -2269 0
c Var 'aux405' order represents '2' with '2272'
-2270 2272 0
c Var 'aux405' direct represents '2' with '2273'
2270 -2272 2273 0
-2273 2272 0
-2273 -2270 0
c Var 'aux405' order represents '3' with '2274'
-2272 2274 0
c Var 'aux405' direct represents '3' with '2275'
2272 -2274 2275 0
-2275 2274 0
-2275 -2272 0
c Var 'aux405' order represents '4' with '2276'
-2274 2276 0
c Var 'aux405' direct represents '4' with '2277'
2274 -2276 2277 0
-2277 2276 0
-2277 -2274 0
c Var 'aux405' order represents '5' with '2278'
-2276 2278 0
c Var 'aux405' direct represents '5' with '2279'
2276 -2278 2279 0
-2279 2278 0
-2279 -2276 0
c Var 'aux405' order represents '6' with '2280'
-2278 2280 0
c Var 'aux405' direct represents '6' with '2281'
2278 -2280 2281 0
-2281 2280 0
-2281 -2278 0
c Var 'aux405' order represents '7' with '2282'
-2280 2282 0
c Var 'aux405' direct represents '7' with '2283'
2280 -2282 2283 0
-2283 2282 0
-2283 -2280 0
c Var 'aux405' order represents '8' with '2284'
-2282 2284 0
c Var 'aux405' direct represents '8' with '2285'
2282 -2284 2285 0
-2285 2284 0
-2285 -2282 0
c Var 'aux405' order represents '9' with '2286'
-2284 2286 0
c Var 'aux405' direct represents '9' with '2287'
2284 -2286 2287 0
-2287 2286 0
-2287 -2284 0
c Var 'aux405' order represents '10' with '2288'
-2286 2288 0
c Var 'aux405' direct represents '10' with '2289'
2286 -2288 2289 0
-2289 2288 0
-2289 -2286 0
c Var 'aux405' order represents '11' with '2290'
-2288 2290 0
c Var 'aux405' direct represents '11' with '2291'
2288 -2290 2291 0
-2291 2290 0
-2291 -2288 0
c Var 'aux405' order represents '12' with '2292'
-2290 2292 0
c Var 'aux405' direct represents '12' with '2293'
2290 -2292 2293 0
-2293 2292 0
-2293 -2290 0
c Var 'aux405' order represents '13' with '2294'
-2292 2294 0
c Var 'aux405' direct represents '13' with '2295'
2292 -2294 2295 0
-2295 2294 0
-2295 -2292 0
c Var 'aux405' order represents '14' with '2296'
-2294 2296 0
c Var 'aux405' direct represents '14' with '2297'
2294 -2296 2297 0
-2297 2296 0
-2297 -2294 0
c Var 'aux405' order represents '15' with '2298'
-2296 2298 0
c Var 'aux405' direct represents '15' with '2299'
2296 -2298 2299 0
-2299 2298 0
-2299 -2296 0
c Var 'aux405' direct represents '16' with '-2298'
2269 2271 2273 2275 2277 2279 2281 2283 2285 2287 2289 2291 2293 2295 2297 2299 -2298 0
c Encoding variable: aux406 with domain: int(0..16) (representing constraint (shift(x_00007_00006, -1) + shift(x_00009_00006, -1)))
c Both direct and order encoding.
c Var 'aux406' order represents '0' with '2300'
c Var 'aux406' direct represents '0' with '2300'
c Var 'aux406' order represents '1' with '2301'
-2300 2301 0
c Var 'aux406' direct represents '1' with '2302'
2300 -2301 2302 0
-2302 2301 0
-2302 -2300 0
c Var 'aux406' order represents '2' with '2303'
-2301 2303 0
c Var 'aux406' direct represents '2' with '2304'
2301 -2303 2304 0
-2304 2303 0
-2304 -2301 0
c Var 'aux406' order represents '3' with '2305'
-2303 2305 0
c Var 'aux406' direct represents '3' with '2306'
2303 -2305 2306 0
-2306 2305 0
-2306 -2303 0
c Var 'aux406' order represents '4' with '2307'
-2305 2307 0
c Var 'aux406' direct represents '4' with '2308'
2305 -2307 2308 0
-2308 2307 0
-2308 -2305 0
c Var 'aux406' order represents '5' with '2309'
-2307 2309 0
c Var 'aux406' direct represents '5' with '2310'
2307 -2309 2310 0
-2310 2309 0
-2310 -2307 0
c Var 'aux406' order represents '6' with '2311'
-2309 2311 0
c Var 'aux406' direct represents '6' with '2312'
2309 -2311 2312 0
-2312 2311 0
-2312 -2309 0
c Var 'aux406' order represents '7' with '2313'
-2311 2313 0
c Var 'aux406' direct represents '7' with '2314'
2311 -2313 2314 0
-2314 2313 0
-2314 -2311 0
c Var 'aux406' order represents '8' with '2315'
-2313 2315 0
c Var 'aux406' direct represents '8' with '2316'
2313 -2315 2316 0
-2316 2315 0
-2316 -2313 0
c Var 'aux406' order represents '9' with '2317'
-2315 2317 0
c Var 'aux406' direct represents '9' with '2318'
2315 -2317 2318 0
-2318 2317 0
-2318 -2315 0
c Var 'aux406' order represents '10' with '2319'
-2317 2319 0
c Var 'aux406' direct represents '10' with '2320'
2317 -2319 2320 0
-2320 2319 0
-2320 -2317 0
c Var 'aux406' order represents '11' with '2321'
-2319 2321 0
c Var 'aux406' direct represents '11' with '2322'
2319 -2321 2322 0
-2322 2321 0
-2322 -2319 0
c Var 'aux406' order represents '12' with '2323'
-2321 2323 0
c Var 'aux406' direct represents '12' with '2324'
2321 -2323 2324 0
-2324 2323 0
-2324 -2321 0
c Var 'aux406' order represents '13' with '2325'
-2323 2325 0
c Var 'aux406' direct represents '13' with '2326'
2323 -2325 2326 0
-2326 2325 0
-2326 -2323 0
c Var 'aux406' order represents '14' with '2327'
-2325 2327 0
c Var 'aux406' direct represents '14' with '2328'
2325 -2327 2328 0
-2328 2327 0
-2328 -2325 0
c Var 'aux406' order represents '15' with '2329'
-2327 2329 0
c Var 'aux406' direct represents '15' with '2330'
2327 -2329 2330 0
-2330 2329 0
-2330 -2327 0
c Var 'aux406' direct represents '16' with '-2329'
2300 2302 2304 2306 2308 2310 2312 2314 2316 2318 2320 2322 2324 2326 2328 2330 -2329 0
c Encoding variable: aux407 with domain: int(0..16) (representing constraint (shift(x_00008_00009, -1) + shift(x_00009_00009, -1)))
c Both direct and order encoding.
c Var 'aux407' order represents '0' with '2331'
c Var 'aux407' direct represents '0' with '2331'
c Var 'aux407' order represents '1' with '2332'
-2331 2332 0
c Var 'aux407' direct represents '1' with '2333'
2331 -2332 2333 0
-2333 2332 0
-2333 -2331 0
c Var 'aux407' order represents '2' with '2334'
-2332 2334 0
c Var 'aux407' direct represents '2' with '2335'
2332 -2334 2335 0
-2335 2334 0
-2335 -2332 0
c Var 'aux407' order represents '3' with '2336'
-2334 2336 0
c Var 'aux407' direct represents '3' with '2337'
2334 -2336 2337 0
-2337 2336 0
-2337 -2334 0
c Var 'aux407' order represents '4' with '2338'
-2336 2338 0
c Var 'aux407' direct represents '4' with '2339'
2336 -2338 2339 0
-2339 2338 0
-2339 -2336 0
c Var 'aux407' order represents '5' with '2340'
-2338 2340 0
c Var 'aux407' direct represents '5' with '2341'
2338 -2340 2341 0
-2341 2340 0
-2341 -2338 0
c Var 'aux407' order represents '6' with '2342'
-2340 2342 0
c Var 'aux407' direct represents '6' with '2343'
2340 -2342 2343 0
-2343 2342 0
-2343 -2340 0
c Var 'aux407' order represents '7' with '2344'
-2342 2344 0
c Var 'aux407' direct represents '7' with '2345'
2342 -2344 2345 0
-2345 2344 0
-2345 -2342 0
c Var 'aux407' order represents '8' with '2346'
-2344 2346 0
c Var 'aux407' direct represents '8' with '2347'
2344 -2346 2347 0
-2347 2346 0
-2347 -2344 0
c Var 'aux407' order represents '9' with '2348'
-2346 2348 0
c Var 'aux407' direct represents '9' with '2349'
2346 -2348 2349 0
-2349 2348 0
-2349 -2346 0
c Var 'aux407' order represents '10' with '2350'
-2348 2350 0
c Var 'aux407' direct represents '10' with '2351'
2348 -2350 2351 0
-2351 2350 0
-2351 -2348 0
c Var 'aux407' order represents '11' with '2352'
-2350 2352 0
c Var 'aux407' direct represents '11' with '2353'
2350 -2352 2353 0
-2353 2352 0
-2353 -2350 0
c Var 'aux407' order represents '12' with '2354'
-2352 2354 0
c Var 'aux407' direct represents '12' with '2355'
2352 -2354 2355 0
-2355 2354 0
-2355 -2352 0
c Var 'aux407' order represents '13' with '2356'
-2354 2356 0
c Var 'aux407' direct represents '13' with '2357'
2354 -2356 2357 0
-2357 2356 0
-2357 -2354 0
c Var 'aux407' order represents '14' with '2358'
-2356 2358 0
c Var 'aux407' direct represents '14' with '2359'
2356 -2358 2359 0
-2359 2358 0
-2359 -2356 0
c Var 'aux407' order represents '15' with '2360'
-2358 2360 0
c Var 'aux407' direct represents '15' with '2361'
2358 -2360 2361 0
-2361 2360 0
-2361 -2358 0
c Var 'aux407' direct represents '16' with '-2360'
2331 2333 2335 2337 2339 2341 2343 2345 2347 2349 2351 2353 2355 2357 2359 2361 -2360 0
c Encoding variable: aux408 with domain: int(0..2) (representing constraint ((x_00003_00001=1) + (x_00005_00001=1)))
c Both direct and order encoding.
c Var 'aux408' order represents '0' with '2362'
c Var 'aux408' direct represents '0' with '2362'
c Var 'aux408' order represents '1' with '2363'
-2362 2363 0
c Var 'aux408' direct represents '1' with '2364'
2362 -2363 2364 0
-2364 2363 0
-2364 -2362 0
c Var 'aux408' direct represents '2' with '-2363'
2362 2364 -2363 0
c Encoding variable: aux409 with domain: int(0..2) (representing constraint ((x_00007_00001=1) + (x_00008_00001=1)))
c Both direct and order encoding.
c Var 'aux409' order represents '0' with '2365'
c Var 'aux409' direct represents '0' with '2365'
c Var 'aux409' order represents '1' with '2366'
-2365 2366 0
c Var 'aux409' direct represents '1' with '2367'
2365 -2366 2367 0
-2367 2366 0
-2367 -2365 0
c Var 'aux409' direct represents '2' with '-2366'
2365 2367 -2366 0
c Encoding variable: aux410 with domain: int(0..2) (representing constraint ((x_00002_00001=1) + (x_00006_00001=1)))
c Both direct and order encoding.
c Var 'aux410' order represents '0' with '2368'
c Var 'aux410' direct represents '0' with '2368'
c Var 'aux410' order represents '1' with '2369'
-2368 2369 0
c Var 'aux410' direct represents '1' with '2370'
2368 -2369 2370 0
-2370 2369 0
-2370 -2368 0
c Var 'aux410' direct represents '2' with '-2369'
2368 2370 -2369 0
c Encoding variable: aux411 with domain: int(0..2) (representing constraint ((x_00009_00001=1) + (x_00004_00001=1)))
c Both direct and order encoding.
c Var 'aux411' order represents '0' with '2371'
c Var 'aux411' direct represents '0' with '2371'
c Var 'aux411' order represents '1' with '2372'
-2371 2372 0
c Var 'aux411' direct represents '1' with '2373'
2371 -2372 2373 0
-2373 2372 0
-2373 -2371 0
c Var 'aux411' direct represents '2' with '-2372'
2371 2373 -2372 0
c Encoding variable: aux412 with domain: int(0..3) (representing constraint ((x_00001_00001=1) + aux411))
c Both direct and order encoding.
c Var 'aux412' order represents '0' with '2374'
c Var 'aux412' direct represents '0' with '2374'
c Var 'aux412' order represents '1' with '2375'
-2374 2375 0
c Var 'aux412' direct represents '1' with '2376'
2374 -2375 2376 0
-2376 2375 0
-2376 -2374 0
c Var 'aux412' order represents '2' with '2377'
-2375 2377 0
c Var 'aux412' direct represents '2' with '2378'
2375 -2377 2378 0
-2378 2377 0
-2378 -2375 0
c Var 'aux412' direct represents '3' with '-2377'
2374 2376 2378 -2377 0
c Encoding variable: aux413 with domain: int(0..4) (representing constraint (aux408 + aux410))
c Both direct and order encoding.
c Var 'aux413' order represents '0' with '2379'
c Var 'aux413' direct represents '0' with '2379'
c Var 'aux413' order represents '1' with '2380'
-2379 2380 0
c Var 'aux413' direct represents '1' with '2381'
2379 -2380 2381 0
-2381 2380 0
-2381 -2379 0
c Var 'aux413' order represents '2' with '2382'
-2380 2382 0
c Var 'aux413' direct represents '2' with '2383'
2380 -2382 2383 0
-2383 2382 0
-2383 -2380 0
c Var 'aux413' order represents '3' with '2384'
-2382 2384 0
c Var 'aux413' direct represents '3' with '2385'
2382 -2384 2385 0
-2385 2384 0
-2385 -2382 0
c Var 'aux413' direct represents '4' with '-2384'
2379 2381 2383 2385 -2384 0
c Encoding variable: aux414 with domain: int(0..2) (representing constraint ((x_00003_00001=2) + (x_00005_00001=2)))
c Both direct and order encoding.
c Var 'aux414' order represents '0' with '2386'
c Var 'aux414' direct represents '0' with '2386'
c Var 'aux414' order represents '1' with '2387'
-2386 2387 0
c Var 'aux414' direct represents '1' with '2388'
2386 -2387 2388 0
-2388 2387 0
-2388 -2386 0
c Var 'aux414' direct represents '2' with '-2387'
2386 2388 -2387 0
c Encoding variable: aux415 with domain: int(0..2) (representing constraint ((x_00007_00001=2) + (x_00008_00001=2)))
c Both direct and order encoding.
c Var 'aux415' order represents '0' with '2389'
c Var 'aux415' direct represents '0' with '2389'
c Var 'aux415' order represents '1' with '2390'
-2389 2390 0
c Var 'aux415' direct represents '1' with '2391'
2389 -2390 2391 0
-2391 2390 0
-2391 -2389 0
c Var 'aux415' direct represents '2' with '-2390'
2389 2391 -2390 0
c Encoding variable: aux416 with domain: int(0..2) (representing constraint ((x_00002_00001=2) + (x_00006_00001=2)))
c Both direct and order encoding.
c Var 'aux416' order represents '0' with '2392'
c Var 'aux416' direct represents '0' with '2392'
c Var 'aux416' order represents '1' with '2393'
-2392 2393 0
c Var 'aux416' direct represents '1' with '2394'
2392 -2393 2394 0
-2394 2393 0
-2394 -2392 0
c Var 'aux416' direct represents '2' with '-2393'
2392 2394 -2393 0
c Encoding variable: aux417 with domain: int(0..2) (representing constraint ((x_00009_00001=2) + (x_00004_00001=2)))
c Both direct and order encoding.
c Var 'aux417' order represents '0' with '2395'
c Var 'aux417' direct represents '0' with '2395'
c Var 'aux417' order represents '1' with '2396'
-2395 2396 0
c Var 'aux417' direct represents '1' with '2397'
2395 -2396 2397 0
-2397 2396 0
-2397 -2395 0
c Var 'aux417' direct represents '2' with '-2396'
2395 2397 -2396 0
c Encoding variable: aux418 with domain: int(0..3) (representing constraint ((x_00001_00001=2) + aux417))
c Both direct and order encoding.
c Var 'aux418' order represents '0' with '2398'
c Var 'aux418' direct represents '0' with '2398'
c Var 'aux418' order represents '1' with '2399'
-2398 2399 0
c Var 'aux418' direct represents '1' with '2400'
2398 -2399 2400 0
-2400 2399 0
-2400 -2398 0
c Var 'aux418' order represents '2' with '2401'
-2399 2401 0
c Var 'aux418' direct represents '2' with '2402'
2399 -2401 2402 0
-2402 2401 0
-2402 -2399 0
c Var 'aux418' direct represents '3' with '-2401'
2398 2400 2402 -2401 0
c Encoding variable: aux419 with domain: int(0..4) (representing constraint (aux414 + aux416))
c Both direct and order encoding.
c Var 'aux419' order represents '0' with '2403'
c Var 'aux419' direct represents '0' with '2403'
c Var 'aux419' order represents '1' with '2404'
-2403 2404 0
c Var 'aux419' direct represents '1' with '2405'
2403 -2404 2405 0
-2405 2404 0
-2405 -2403 0
c Var 'aux419' order represents '2' with '2406'
-2404 2406 0
c Var 'aux419' direct represents '2' with '2407'
2404 -2406 2407 0
-2407 2406 0
-2407 -2404 0
c Var 'aux419' order represents '3' with '2408'
-2406 2408 0
c Var 'aux419' direct represents '3' with '2409'
2406 -2408 2409 0
-2409 2408 0
-2409 -2406 0
c Var 'aux419' direct represents '4' with '-2408'
2403 2405 2407 2409 -2408 0
c Encoding variable: aux420 with domain: int(0..2) (representing constraint ((x_00003_00001=3) + (x_00005_00001=3)))
c Both direct and order encoding.
c Var 'aux420' order represents '0' with '2410'
c Var 'aux420' direct represents '0' with '2410'
c Var 'aux420' order represents '1' with '2411'
-2410 2411 0
c Var 'aux420' direct represents '1' with '2412'
2410 -2411 2412 0
-2412 2411 0
-2412 -2410 0
c Var 'aux420' direct represents '2' with '-2411'
2410 2412 -2411 0
c Encoding variable: aux421 with domain: int(0..2) (representing constraint ((x_00007_00001=3) + (x_00008_00001=3)))
c Both direct and order encoding.
c Var 'aux421' order represents '0' with '2413'
c Var 'aux421' direct represents '0' with '2413'
c Var 'aux421' order represents '1' with '2414'
-2413 2414 0
c Var 'aux421' direct represents '1' with '2415'
2413 -2414 2415 0
-2415 2414 0
-2415 -2413 0
c Var 'aux421' direct represents '2' with '-2414'
2413 2415 -2414 0
c Encoding variable: aux422 with domain: int(0..2) (representing constraint ((x_00002_00001=3) + (x_00006_00001=3)))
c Both direct and order encoding.
c Var 'aux422' order represents '0' with '2416'
c Var 'aux422' direct represents '0' with '2416'
c Var 'aux422' order represents '1' with '2417'
-2416 2417 0
c Var 'aux422' direct represents '1' with '2418'
2416 -2417 2418 0
-2418 2417 0
-2418 -2416 0
c Var 'aux422' direct represents '2' with '-2417'
2416 2418 -2417 0
c Encoding variable: aux423 with domain: int(0..2) (representing constraint ((x_00009_00001=3) + (x_00004_00001=3)))
c Both direct and order encoding.
c Var 'aux423' order represents '0' with '2419'
c Var 'aux423' direct represents '0' with '2419'
c Var 'aux423' order represents '1' with '2420'
-2419 2420 0
c Var 'aux423' direct represents '1' with '2421'
2419 -2420 2421 0
-2421 2420 0
-2421 -2419 0
c Var 'aux423' direct represents '2' with '-2420'
2419 2421 -2420 0
c Encoding variable: aux424 with domain: int(0..3) (representing constraint ((x_00001_00001=3) + aux423))
c Both direct and order encoding.
c Var 'aux424' order represents '0' with '2422'
c Var 'aux424' direct represents '0' with '2422'
c Var 'aux424' order represents '1' with '2423'
-2422 2423 0
c Var 'aux424' direct represents '1' with '2424'
2422 -2423 2424 0
-2424 2423 0
-2424 -2422 0
c Var 'aux424' order represents '2' with '2425'
-2423 2425 0
c Var 'aux424' direct represents '2' with '2426'
2423 -2425 2426 0
-2426 2425 0
-2426 -2423 0
c Var 'aux424' direct represents '3' with '-2425'
2422 2424 2426 -2425 0
c Encoding variable: aux425 with domain: int(0..4) (representing constraint (aux420 + aux422))
c Both direct and order encoding.
c Var 'aux425' order represents '0' with '2427'
c Var 'aux425' direct represents '0' with '2427'
c Var 'aux425' order represents '1' with '2428'
-2427 2428 0
c Var 'aux425' direct represents '1' with '2429'
2427 -2428 2429 0
-2429 2428 0
-2429 -2427 0
c Var 'aux425' order represents '2' with '2430'
-2428 2430 0
c Var 'aux425' direct represents '2' with '2431'
2428 -2430 2431 0
-2431 2430 0
-2431 -2428 0
c Var 'aux425' order represents '3' with '2432'
-2430 2432 0
c Var 'aux425' direct represents '3' with '2433'
2430 -2432 2433 0
-2433 2432 0
-2433 -2430 0
c Var 'aux425' direct represents '4' with '-2432'
2427 2429 2431 2433 -2432 0
c Encoding variable: aux426 with domain: int(0..2) (representing constraint ((x_00003_00001=4) + (x_00005_00001=4)))
c Both direct and order encoding.
c Var 'aux426' order represents '0' with '2434'
c Var 'aux426' direct represents '0' with '2434'
c Var 'aux426' order represents '1' with '2435'
-2434 2435 0
c Var 'aux426' direct represents '1' with '2436'
2434 -2435 2436 0
-2436 2435 0
-2436 -2434 0
c Var 'aux426' direct represents '2' with '-2435'
2434 2436 -2435 0
c Encoding variable: aux427 with domain: int(0..2) (representing constraint ((x_00007_00001=4) + (x_00008_00001=4)))
c Both direct and order encoding.
c Var 'aux427' order represents '0' with '2437'
c Var 'aux427' direct represents '0' with '2437'
c Var 'aux427' order represents '1' with '2438'
-2437 2438 0
c Var 'aux427' direct represents '1' with '2439'
2437 -2438 2439 0
-2439 2438 0
-2439 -2437 0
c Var 'aux427' direct represents '2' with '-2438'
2437 2439 -2438 0
c Encoding variable: aux428 with domain: int(0..2) (representing constraint ((x_00002_00001=4) + (x_00006_00001=4)))
c Both direct and order encoding.
c Var 'aux428' order represents '0' with '2440'
c Var 'aux428' direct represents '0' with '2440'
c Var 'aux428' order represents '1' with '2441'
-2440 2441 0
c Var 'aux428' direct represents '1' with '2442'
2440 -2441 2442 0
-2442 2441 0
-2442 -2440 0
c Var 'aux428' direct represents '2' with '-2441'
2440 2442 -2441 0
c Encoding variable: aux429 with domain: int(0..2) (representing constraint ((x_00009_00001=4) + (x_00004_00001=4)))
c Both direct and order encoding.
c Var 'aux429' order represents '0' with '2443'
c Var 'aux429' direct represents '0' with '2443'
c Var 'aux429' order represents '1' with '2444'
-2443 2444 0
c Var 'aux429' direct represents '1' with '2445'
2443 -2444 2445 0
-2445 2444 0
-2445 -2443 0
c Var 'aux429' direct represents '2' with '-2444'
2443 2445 -2444 0
c Encoding variable: aux430 with domain: int(0..3) (representing constraint ((x_00001_00001=4) + aux429))
c Both direct and order encoding.
c Var 'aux430' order represents '0' with '2446'
c Var 'aux430' direct represents '0' with '2446'
c Var 'aux430' order represents '1' with '2447'
-2446 2447 0
c Var 'aux430' direct represents '1' with '2448'
2446 -2447 2448 0
-2448 2447 0
-2448 -2446 0
c Var 'aux430' order represents '2' with '2449'
-2447 2449 0
c Var 'aux430' direct represents '2' with '2450'
2447 -2449 2450 0
-2450 2449 0
-2450 -2447 0
c Var 'aux430' direct represents '3' with '-2449'
2446 2448 2450 -2449 0
c Encoding variable: aux431 with domain: int(0..4) (representing constraint (aux426 + aux428))
c Both direct and order encoding.
c Var 'aux431' order represents '0' with '2451'
c Var 'aux431' direct represents '0' with '2451'
c Var 'aux431' order represents '1' with '2452'
-2451 2452 0
c Var 'aux431' direct represents '1' with '2453'
2451 -2452 2453 0
-2453 2452 0
-2453 -2451 0
c Var 'aux431' order represents '2' with '2454'
-2452 2454 0
c Var 'aux431' direct represents '2' with '2455'
2452 -2454 2455 0
-2455 2454 0
-2455 -2452 0
c Var 'aux431' order represents '3' with '2456'
-2454 2456 0
c Var 'aux431' direct represents '3' with '2457'
2454 -2456 2457 0
-2457 2456 0
-2457 -2454 0
c Var 'aux431' direct represents '4' with '-2456'
2451 2453 2455 2457 -2456 0
c Encoding variable: aux432 with domain: int(0..2) (representing constraint ((x_00003_00001=5) + (x_00005_00001=5)))
c Both direct and order encoding.
c Var 'aux432' order represents '0' with '2458'
c Var 'aux432' direct represents '0' with '2458'
c Var 'aux432' order represents '1' with '2459'
-2458 2459 0
c Var 'aux432' direct represents '1' with '2460'
2458 -2459 2460 0
-2460 2459 0
-2460 -2458 0
c Var 'aux432' direct represents '2' with '-2459'
2458 2460 -2459 0
c Encoding variable: aux433 with domain: int(0..2) (representing constraint ((x_00007_00001=5) + (x_00008_00001=5)))
c Both direct and order encoding.
c Var 'aux433' order represents '0' with '2461'
c Var 'aux433' direct represents '0' with '2461'
c Var 'aux433' order represents '1' with '2462'
-2461 2462 0
c Var 'aux433' direct represents '1' with '2463'
2461 -2462 2463 0
-2463 2462 0
-2463 -2461 0
c Var 'aux433' direct represents '2' with '-2462'
2461 2463 -2462 0
c Encoding variable: aux434 with domain: int(0..2) (representing constraint ((x_00002_00001=5) + (x_00006_00001=5)))
c Both direct and order encoding.
c Var 'aux434' order represents '0' with '2464'
c Var 'aux434' direct represents '0' with '2464'
c Var 'aux434' order represents '1' with '2465'
-2464 2465 0
c Var 'aux434' direct represents '1' with '2466'
2464 -2465 2466 0
-2466 2465 0
-2466 -2464 0
c Var 'aux434' direct represents '2' with '-2465'
2464 2466 -2465 0
c Encoding variable: aux435 with domain: int(0..2) (representing constraint ((x_00009_00001=5) + (x_00004_00001=5)))
c Both direct and order encoding.
c Var 'aux435' order represents '0' with '2467'
c Var 'aux435' direct represents '0' with '2467'
c Var 'aux435' order represents '1' with '2468'
-2467 2468 0
c Var 'aux435' direct represents '1' with '2469'
2467 -2468 2469 0
-2469 2468 0
-2469 -2467 0
c Var 'aux435' direct represents '2' with '-2468'
2467 2469 -2468 0
c Encoding variable: aux436 with domain: int(0..3) (representing constraint ((x_00001_00001=5) + aux435))
c Both direct and order encoding.
c Var 'aux436' order represents '0' with '2470'
c Var 'aux436' direct represents '0' with '2470'
c Var 'aux436' order represents '1' with '2471'
-2470 2471 0
c Var 'aux436' direct represents '1' with '2472'
2470 -2471 2472 0
-2472 2471 0
-2472 -2470 0
c Var 'aux436' order represents '2' with '2473'
-2471 2473 0
c Var 'aux436' direct represents '2' with '2474'
2471 -2473 2474 0
-2474 2473 0
-2474 -2471 0
c Var 'aux436' direct represents '3' with '-2473'
2470 2472 2474 -2473 0
c Encoding variable: aux437 with domain: int(0..4) (representing constraint (aux432 + aux434))
c Both direct and order encoding.
c Var 'aux437' order represents '0' with '2475'
c Var 'aux437' direct represents '0' with '2475'
c Var 'aux437' order represents '1' with '2476'
-2475 2476 0
c Var 'aux437' direct represents '1' with '2477'
2475 -2476 2477 0
-2477 2476 0
-2477 -2475 0
c Var 'aux437' order represents '2' with '2478'
-2476 2478 0
c Var 'aux437' direct represents '2' with '2479'
2476 -2478 2479 0
-2479 2478 0
-2479 -2476 0
c Var 'aux437' order represents '3' with '2480'
-2478 2480 0
c Var 'aux437' direct represents '3' with '2481'
2478 -2480 2481 0
-2481 2480 0
-2481 -2478 0
c Var 'aux437' direct represents '4' with '-2480'
2475 2477 2479 2481 -2480 0
c Encoding variable: aux438 with domain: int(0..2) (representing constraint ((x_00003_00001=6) + (x_00005_00001=6)))
c Both direct and order encoding.
c Var 'aux438' order represents '0' with '2482'
c Var 'aux438' direct represents '0' with '2482'
c Var 'aux438' order represents '1' with '2483'
-2482 2483 0
c Var 'aux438' direct represents '1' with '2484'
2482 -2483 2484 0
-2484 2483 0
-2484 -2482 0
c Var 'aux438' direct represents '2' with '-2483'
2482 2484 -2483 0
c Encoding variable: aux439 with domain: int(0..2) (representing constraint ((x_00007_00001=6) + (x_00008_00001=6)))
c Both direct and order encoding.
c Var 'aux439' order represents '0' with '2485'
c Var 'aux439' direct represents '0' with '2485'
c Var 'aux439' order represents '1' with '2486'
-2485 2486 0
c Var 'aux439' direct represents '1' with '2487'
2485 -2486 2487 0
-2487 2486 0
-2487 -2485 0
c Var 'aux439' direct represents '2' with '-2486'
2485 2487 -2486 0
c Encoding variable: aux440 with domain: int(0..2) (representing constraint ((x_00002_00001=6) + (x_00006_00001=6)))
c Both direct and order encoding.
c Var 'aux440' order represents '0' with '2488'
c Var 'aux440' direct represents '0' with '2488'
c Var 'aux440' order represents '1' with '2489'
-2488 2489 0
c Var 'aux440' direct represents '1' with '2490'
2488 -2489 2490 0
-2490 2489 0
-2490 -2488 0
c Var 'aux440' direct represents '2' with '-2489'
2488 2490 -2489 0
c Encoding variable: aux441 with domain: int(0..2) (representing constraint ((x_00009_00001=6) + (x_00004_00001=6)))
c Both direct and order encoding.
c Var 'aux441' order represents '0' with '2491'
c Var 'aux441' direct represents '0' with '2491'
c Var 'aux441' order represents '1' with '2492'
-2491 2492 0
c Var 'aux441' direct represents '1' with '2493'
2491 -2492 2493 0
-2493 2492 0
-2493 -2491 0
c Var 'aux441' direct represents '2' with '-2492'
2491 2493 -2492 0
c Encoding variable: aux442 with domain: int(0..3) (representing constraint ((x_00001_00001=6) + aux441))
c Both direct and order encoding.
c Var 'aux442' order represents '0' with '2494'
c Var 'aux442' direct represents '0' with '2494'
c Var 'aux442' order represents '1' with '2495'
-2494 2495 0
c Var 'aux442' direct represents '1' with '2496'
2494 -2495 2496 0
-2496 2495 0
-2496 -2494 0
c Var 'aux442' order represents '2' with '2497'
-2495 2497 0
c Var 'aux442' direct represents '2' with '2498'
2495 -2497 2498 0
-2498 2497 0
-2498 -2495 0
c Var 'aux442' direct represents '3' with '-2497'
2494 2496 2498 -2497 0
c Encoding variable: aux443 with domain: int(0..4) (representing constraint (aux438 + aux440))
c Both direct and order encoding.
c Var 'aux443' order represents '0' with '2499'
c Var 'aux443' direct represents '0' with '2499'
c Var 'aux443' order represents '1' with '2500'
-2499 2500 0
c Var 'aux443' direct represents '1' with '2501'
2499 -2500 2501 0
-2501 2500 0
-2501 -2499 0
c Var 'aux443' order represents '2' with '2502'
-2500 2502 0
c Var 'aux443' direct represents '2' with '2503'
2500 -2502 2503 0
-2503 2502 0
-2503 -2500 0
c Var 'aux443' order represents '3' with '2504'
-2502 2504 0
c Var 'aux443' direct represents '3' with '2505'
2502 -2504 2505 0
-2505 2504 0
-2505 -2502 0
c Var 'aux443' direct represents '4' with '-2504'
2499 2501 2503 2505 -2504 0
c Encoding variable: aux444 with domain: int(0..2) (representing constraint ((x_00003_00001=7) + (x_00005_00001=7)))
c Both direct and order encoding.
c Var 'aux444' order represents '0' with '2506'
c Var 'aux444' direct represents '0' with '2506'
c Var 'aux444' order represents '1' with '2507'
-2506 2507 0
c Var 'aux444' direct represents '1' with '2508'
2506 -2507 2508 0
-2508 2507 0
-2508 -2506 0
c Var 'aux444' direct represents '2' with '-2507'
2506 2508 -2507 0
c Encoding variable: aux445 with domain: int(0..2) (representing constraint ((x_00007_00001=7) + (x_00008_00001=7)))
c Both direct and order encoding.
c Var 'aux445' order represents '0' with '2509'
c Var 'aux445' direct represents '0' with '2509'
c Var 'aux445' order represents '1' with '2510'
-2509 2510 0
c Var 'aux445' direct represents '1' with '2511'
2509 -2510 2511 0
-2511 2510 0
-2511 -2509 0
c Var 'aux445' direct represents '2' with '-2510'
2509 2511 -2510 0
c Encoding variable: aux446 with domain: int(0..2) (representing constraint ((x_00002_00001=7) + (x_00006_00001=7)))
c Both direct and order encoding.
c Var 'aux446' order represents '0' with '2512'
c Var 'aux446' direct represents '0' with '2512'
c Var 'aux446' order represents '1' with '2513'
-2512 2513 0
c Var 'aux446' direct represents '1' with '2514'
2512 -2513 2514 0
-2514 2513 0
-2514 -2512 0
c Var 'aux446' direct represents '2' with '-2513'
2512 2514 -2513 0
c Encoding variable: aux447 with domain: int(0..2) (representing constraint ((x_00009_00001=7) + (x_00004_00001=7)))
c Both direct and order encoding.
c Var 'aux447' order represents '0' with '2515'
c Var 'aux447' direct represents '0' with '2515'
c Var 'aux447' order represents '1' with '2516'
-2515 2516 0
c Var 'aux447' direct represents '1' with '2517'
2515 -2516 2517 0
-2517 2516 0
-2517 -2515 0
c Var 'aux447' direct represents '2' with '-2516'
2515 2517 -2516 0
c Encoding variable: aux448 with domain: int(0..3) (representing constraint ((x_00001_00001=7) + aux447))
c Both direct and order encoding.
c Var 'aux448' order represents '0' with '2518'
c Var 'aux448' direct represents '0' with '2518'
c Var 'aux448' order represents '1' with '2519'
-2518 2519 0
c Var 'aux448' direct represents '1' with '2520'
2518 -2519 2520 0
-2520 2519 0
-2520 -2518 0
c Var 'aux448' order represents '2' with '2521'
-2519 2521 0
c Var 'aux448' direct represents '2' with '2522'
2519 -2521 2522 0
-2522 2521 0
-2522 -2519 0
c Var 'aux448' direct represents '3' with '-2521'
2518 2520 2522 -2521 0
c Encoding variable: aux449 with domain: int(0..4) (representing constraint (aux444 + aux446))
c Both direct and order encoding.
c Var 'aux449' order represents '0' with '2523'
c Var 'aux449' direct represents '0' with '2523'
c Var 'aux449' order represents '1' with '2524'
-2523 2524 0
c Var 'aux449' direct represents '1' with '2525'
2523 -2524 2525 0
-2525 2524 0
-2525 -2523 0
c Var 'aux449' order represents '2' with '2526'
-2524 2526 0
c Var 'aux449' direct represents '2' with '2527'
2524 -2526 2527 0
-2527 2526 0
-2527 -2524 0
c Var 'aux449' order represents '3' with '2528'
-2526 2528 0
c Var 'aux449' direct represents '3' with '2529'
2526 -2528 2529 0
-2529 2528 0
-2529 -2526 0
c Var 'aux449' direct represents '4' with '-2528'
2523 2525 2527 2529 -2528 0
c Encoding variable: aux450 with domain: int(0..2) (representing constraint ((x_00003_00001=8) + (x_00005_00001=8)))
c Both direct and order encoding.
c Var 'aux450' order represents '0' with '2530'
c Var 'aux450' direct represents '0' with '2530'
c Var 'aux450' order represents '1' with '2531'
-2530 2531 0
c Var 'aux450' direct represents '1' with '2532'
2530 -2531 2532 0
-2532 2531 0
-2532 -2530 0
c Var 'aux450' direct represents '2' with '-2531'
2530 2532 -2531 0
c Encoding variable: aux451 with domain: int(0..2) (representing constraint ((x_00007_00001=8) + (x_00008_00001=8)))
c Both direct and order encoding.
c Var 'aux451' order represents '0' with '2533'
c Var 'aux451' direct represents '0' with '2533'
c Var 'aux451' order represents '1' with '2534'
-2533 2534 0
c Var 'aux451' direct represents '1' with '2535'
2533 -2534 2535 0
-2535 2534 0
-2535 -2533 0
c Var 'aux451' direct represents '2' with '-2534'
2533 2535 -2534 0
c Encoding variable: aux452 with domain: int(0..2) (representing constraint ((x_00002_00001=8) + (x_00006_00001=8)))
c Both direct and order encoding.
c Var 'aux452' order represents '0' with '2536'
c Var 'aux452' direct represents '0' with '2536'
c Var 'aux452' order represents '1' with '2537'
-2536 2537 0
c Var 'aux452' direct represents '1' with '2538'
2536 -2537 2538 0
-2538 2537 0
-2538 -2536 0
c Var 'aux452' direct represents '2' with '-2537'
2536 2538 -2537 0
c Encoding variable: aux453 with domain: int(0..2) (representing constraint ((x_00009_00001=8) + (x_00004_00001=8)))
c Both direct and order encoding.
c Var 'aux453' order represents '0' with '2539'
c Var 'aux453' direct represents '0' with '2539'
c Var 'aux453' order represents '1' with '2540'
-2539 2540 0
c Var 'aux453' direct represents '1' with '2541'
2539 -2540 2541 0
-2541 2540 0
-2541 -2539 0
c Var 'aux453' direct represents '2' with '-2540'
2539 2541 -2540 0
c Encoding variable: aux454 with domain: int(0..3) (representing constraint ((x_00001_00001=8) + aux453))
c Both direct and order encoding.
c Var 'aux454' order represents '0' with '2542'
c Var 'aux454' direct represents '0' with '2542'
c Var 'aux454' order represents '1' with '2543'
-2542 2543 0
c Var 'aux454' direct represents '1' with '2544'
2542 -2543 2544 0
-2544 2543 0
-2544 -2542 0
c Var 'aux454' order represents '2' with '2545'
-2543 2545 0
c Var 'aux454' direct represents '2' with '2546'
2543 -2545 2546 0
-2546 2545 0
-2546 -2543 0
c Var 'aux454' direct represents '3' with '-2545'
2542 2544 2546 -2545 0
c Encoding variable: aux455 with domain: int(0..4) (representing constraint (aux450 + aux452))
c Both direct and order encoding.
c Var 'aux455' order represents '0' with '2547'
c Var 'aux455' direct represents '0' with '2547'
c Var 'aux455' order represents '1' with '2548'
-2547 2548 0
c Var 'aux455' direct represents '1' with '2549'
2547 -2548 2549 0
-2549 2548 0
-2549 -2547 0
c Var 'aux455' order represents '2' with '2550'
-2548 2550 0
c Var 'aux455' direct represents '2' with '2551'
2548 -2550 2551 0
-2551 2550 0
-2551 -2548 0
c Var 'aux455' order represents '3' with '2552'
-2550 2552 0
c Var 'aux455' direct represents '3' with '2553'
2550 -2552 2553 0
-2553 2552 0
-2553 -2550 0
c Var 'aux455' direct represents '4' with '-2552'
2547 2549 2551 2553 -2552 0
c Encoding variable: aux456 with domain: int(0..2) (representing constraint ((x_00003_00001=9) + (x_00005_00001=9)))
c Both direct and order encoding.
c Var 'aux456' order represents '0' with '2554'
c Var 'aux456' direct represents '0' with '2554'
c Var 'aux456' order represents '1' with '2555'
-2554 2555 0
c Var 'aux456' direct represents '1' with '2556'
2554 -2555 2556 0
-2556 2555 0
-2556 -2554 0
c Var 'aux456' direct represents '2' with '-2555'
2554 2556 -2555 0
c Encoding variable: aux457 with domain: int(0..2) (representing constraint ((x_00007_00001=9) + (x_00008_00001=9)))
c Both direct and order encoding.
c Var 'aux457' order represents '0' with '2557'
c Var 'aux457' direct represents '0' with '2557'
c Var 'aux457' order represents '1' with '2558'
-2557 2558 0
c Var 'aux457' direct represents '1' with '2559'
2557 -2558 2559 0
-2559 2558 0
-2559 -2557 0
c Var 'aux457' direct represents '2' with '-2558'
2557 2559 -2558 0
c Encoding variable: aux458 with domain: int(0..2) (representing constraint ((x_00002_00001=9) + (x_00006_00001=9)))
c Both direct and order encoding.
c Var 'aux458' order represents '0' with '2560'
c Var 'aux458' direct represents '0' with '2560'
c Var 'aux458' order represents '1' with '2561'
-2560 2561 0
c Var 'aux458' direct represents '1' with '2562'
2560 -2561 2562 0
-2562 2561 0
-2562 -2560 0
c Var 'aux458' direct represents '2' with '-2561'
2560 2562 -2561 0
c Encoding variable: aux459 with domain: int(0..2) (representing constraint ((x_00009_00001=9) + (x_00004_00001=9)))
c Both direct and order encoding.
c Var 'aux459' order represents '0' with '2563'
c Var 'aux459' direct represents '0' with '2563'
c Var 'aux459' order represents '1' with '2564'
-2563 2564 0
c Var 'aux459' direct represents '1' with '2565'
2563 -2564 2565 0
-2565 2564 0
-2565 -2563 0
c Var 'aux459' direct represents '2' with '-2564'
2563 2565 -2564 0
c Encoding variable: aux460 with domain: int(0..3) (representing constraint ((x_00001_00001=9) + aux459))
c Both direct and order encoding.
c Var 'aux460' order represents '0' with '2566'
c Var 'aux460' direct represents '0' with '2566'
c Var 'aux460' order represents '1' with '2567'
-2566 2567 0
c Var 'aux460' direct represents '1' with '2568'
2566 -2567 2568 0
-2568 2567 0
-2568 -2566 0
c Var 'aux460' order represents '2' with '2569'
-2567 2569 0
c Var 'aux460' direct represents '2' with '2570'
2567 -2569 2570 0
-2570 2569 0
-2570 -2567 0
c Var 'aux460' direct represents '3' with '-2569'
2566 2568 2570 -2569 0
c Encoding variable: aux461 with domain: int(0..4) (representing constraint (aux456 + aux458))
c Both direct and order encoding.
c Var 'aux461' order represents '0' with '2571'
c Var 'aux461' direct represents '0' with '2571'
c Var 'aux461' order represents '1' with '2572'
-2571 2572 0
c Var 'aux461' direct represents '1' with '2573'
2571 -2572 2573 0
-2573 2572 0
-2573 -2571 0
c Var 'aux461' order represents '2' with '2574'
-2572 2574 0
c Var 'aux461' direct represents '2' with '2575'
2572 -2574 2575 0
-2575 2574 0
-2575 -2572 0
c Var 'aux461' order represents '3' with '2576'
-2574 2576 0
c Var 'aux461' direct represents '3' with '2577'
2574 -2576 2577 0
-2577 2576 0
-2577 -2574 0
c Var 'aux461' direct represents '4' with '-2576'
2571 2573 2575 2577 -2576 0
c Encoding variable: aux462 with domain: int(0..2) (representing constraint ((x_00003_00002=1) + (x_00005_00002=1)))
c Both direct and order encoding.
c Var 'aux462' order represents '0' with '2578'
c Var 'aux462' direct represents '0' with '2578'
c Var 'aux462' order represents '1' with '2579'
-2578 2579 0
c Var 'aux462' direct represents '1' with '2580'
2578 -2579 2580 0
-2580 2579 0
-2580 -2578 0
c Var 'aux462' direct represents '2' with '-2579'
2578 2580 -2579 0
c Encoding variable: aux463 with domain: int(0..2) (representing constraint ((x_00007_00002=1) + (x_00008_00002=1)))
c Both direct and order encoding.
c Var 'aux463' order represents '0' with '2581'
c Var 'aux463' direct represents '0' with '2581'
c Var 'aux463' order represents '1' with '2582'
-2581 2582 0
c Var 'aux463' direct represents '1' with '2583'
2581 -2582 2583 0
-2583 2582 0
-2583 -2581 0
c Var 'aux463' direct represents '2' with '-2582'
2581 2583 -2582 0
c Encoding variable: aux464 with domain: int(0..2) (representing constraint ((x_00002_00002=1) + (x_00006_00002=1)))
c Both direct and order encoding.
c Var 'aux464' order represents '0' with '2584'
c Var 'aux464' direct represents '0' with '2584'
c Var 'aux464' order represents '1' with '2585'
-2584 2585 0
c Var 'aux464' direct represents '1' with '2586'
2584 -2585 2586 0
-2586 2585 0
-2586 -2584 0
c Var 'aux464' direct represents '2' with '-2585'
2584 2586 -2585 0
c Encoding variable: aux465 with domain: int(0..2) (representing constraint ((x_00009_00002=1) + (x_00004_00002=1)))
c Both direct and order encoding.
c Var 'aux465' order represents '0' with '2587'
c Var 'aux465' direct represents '0' with '2587'
c Var 'aux465' order represents '1' with '2588'
-2587 2588 0
c Var 'aux465' direct represents '1' with '2589'
2587 -2588 2589 0
-2589 2588 0
-2589 -2587 0
c Var 'aux465' direct represents '2' with '-2588'
2587 2589 -2588 0
c Encoding variable: aux466 with domain: int(0..3) (representing constraint ((x_00001_00002=1) + aux465))
c Both direct and order encoding.
c Var 'aux466' order represents '0' with '2590'
c Var 'aux466' direct represents '0' with '2590'
c Var 'aux466' order represents '1' with '2591'
-2590 2591 0
c Var 'aux466' direct represents '1' with '2592'
2590 -2591 2592 0
-2592 2591 0
-2592 -2590 0
c Var 'aux466' order represents '2' with '2593'
-2591 2593 0
c Var 'aux466' direct represents '2' with '2594'
2591 -2593 2594 0
-2594 2593 0
-2594 -2591 0
c Var 'aux466' direct represents '3' with '-2593'
2590 2592 2594 -2593 0
c Encoding variable: aux467 with domain: int(0..4) (representing constraint (aux462 + aux464))
c Both direct and order encoding.
c Var 'aux467' order represents '0' with '2595'
c Var 'aux467' direct represents '0' with '2595'
c Var 'aux467' order represents '1' with '2596'
-2595 2596 0
c Var 'aux467' direct represents '1' with '2597'
2595 -2596 2597 0
-2597 2596 0
-2597 -2595 0
c Var 'aux467' order represents '2' with '2598'
-2596 2598 0
c Var 'aux467' direct represents '2' with '2599'
2596 -2598 2599 0
-2599 2598 0
-2599 -2596 0
c Var 'aux467' order represents '3' with '2600'
-2598 2600 0
c Var 'aux467' direct represents '3' with '2601'
2598 -2600 2601 0
-2601 2600 0
-2601 -2598 0
c Var 'aux467' direct represents '4' with '-2600'
2595 2597 2599 2601 -2600 0
c Encoding variable: aux468 with domain: int(0..2) (representing constraint ((x_00003_00002=2) + (x_00005_00002=2)))
c Both direct and order encoding.
c Var 'aux468' order represents '0' with '2602'
c Var 'aux468' direct represents '0' with '2602'
c Var 'aux468' order represents '1' with '2603'
-2602 2603 0
c Var 'aux468' direct represents '1' with '2604'
2602 -2603 2604 0
-2604 2603 0
-2604 -2602 0
c Var 'aux468' direct represents '2' with '-2603'
2602 2604 -2603 0
c Encoding variable: aux469 with domain: int(0..2) (representing constraint ((x_00007_00002=2) + (x_00008_00002=2)))
c Both direct and order encoding.
c Var 'aux469' order represents '0' with '2605'
c Var 'aux469' direct represents '0' with '2605'
c Var 'aux469' order represents '1' with '2606'
-2605 2606 0
c Var 'aux469' direct represents '1' with '2607'
2605 -2606 2607 0
-2607 2606 0
-2607 -2605 0
c Var 'aux469' direct represents '2' with '-2606'
2605 2607 -2606 0
c Encoding variable: aux470 with domain: int(0..2) (representing constraint ((x_00002_00002=2) + (x_00006_00002=2)))
c Both direct and order encoding.
c Var 'aux470' order represents '0' with '2608'
c Var 'aux470' direct represents '0' with '2608'
c Var 'aux470' order represents '1' with '2609'
-2608 2609 0
c Var 'aux470' direct represents '1' with '2610'
2608 -2609 2610 0
-2610 2609 0
-2610 -2608 0
c Var 'aux470' direct represents '2' with '-2609'
2608 2610 -2609 0
c Encoding variable: aux471 with domain: int(0..2) (representing constraint ((x_00009_00002=2) + (x_00004_00002=2)))
c Both direct and order encoding.
c Var 'aux471' order represents '0' with '2611'
c Var 'aux471' direct represents '0' with '2611'
c Var 'aux471' order represents '1' with '2612'
-2611 2612 0
c Var 'aux471' direct represents '1' with '2613'
2611 -2612 2613 0
-2613 2612 0
-2613 -2611 0
c Var 'aux471' direct represents '2' with '-2612'
2611 2613 -2612 0
c Encoding variable: aux472 with domain: int(0..3) (representing constraint ((x_00001_00002=2) + aux471))
c Both direct and order encoding.
c Var 'aux472' order represents '0' with '2614'
c Var 'aux472' direct represents '0' with '2614'
c Var 'aux472' order represents '1' with '2615'
-2614 2615 0
c Var 'aux472' direct represents '1' with '2616'
2614 -2615 2616 0
-2616 2615 0
-2616 -2614 0
c Var 'aux472' order represents '2' with '2617'
-2615 2617 0
c Var 'aux472' direct represents '2' with '2618'
2615 -2617 2618 0
-2618 2617 0
-2618 -2615 0
c Var 'aux472' direct represents '3' with '-2617'
2614 2616 2618 -2617 0
c Encoding variable: aux473 with domain: int(0..4) (representing constraint (aux468 + aux470))
c Both direct and order encoding.
c Var 'aux473' order represents '0' with '2619'
c Var 'aux473' direct represents '0' with '2619'
c Var 'aux473' order represents '1' with '2620'
-2619 2620 0
c Var 'aux473' direct represents '1' with '2621'
2619 -2620 2621 0
-2621 2620 0
-2621 -2619 0
c Var 'aux473' order represents '2' with '2622'
-2620 2622 0
c Var 'aux473' direct represents '2' with '2623'
2620 -2622 2623 0
-2623 2622 0
-2623 -2620 0
c Var 'aux473' order represents '3' with '2624'
-2622 2624 0
c Var 'aux473' direct represents '3' with '2625'
2622 -2624 2625 0
-2625 2624 0
-2625 -2622 0
c Var 'aux473' direct represents '4' with '-2624'
2619 2621 2623 2625 -2624 0
c Encoding variable: aux474 with domain: int(0..2) (representing constraint ((x_00003_00002=3) + (x_00005_00002=3)))
c Both direct and order encoding.
c Var 'aux474' order represents '0' with '2626'
c Var 'aux474' direct represents '0' with '2626'
c Var 'aux474' order represents '1' with '2627'
-2626 2627 0
c Var 'aux474' direct represents '1' with '2628'
2626 -2627 2628 0
-2628 2627 0
-2628 -2626 0
c Var 'aux474' direct represents '2' with '-2627'
2626 2628 -2627 0
c Encoding variable: aux475 with domain: int(0..2) (representing constraint ((x_00007_00002=3) + (x_00008_00002=3)))
c Both direct and order encoding.
c Var 'aux475' order represents '0' with '2629'
c Var 'aux475' direct represents '0' with '2629'
c Var 'aux475' order represents '1' with '2630'
-2629 2630 0
c Var 'aux475' direct represents '1' with '2631'
2629 -2630 2631 0
-2631 2630 0
-2631 -2629 0
c Var 'aux475' direct represents '2' with '-2630'
2629 2631 -2630 0
c Encoding variable: aux476 with domain: int(0..2) (representing constraint ((x_00002_00002=3) + (x_00006_00002=3)))
c Both direct and order encoding.
c Var 'aux476' order represents '0' with '2632'
c Var 'aux476' direct represents '0' with '2632'
c Var 'aux476' order represents '1' with '2633'
-2632 2633 0
c Var 'aux476' direct represents '1' with '2634'
2632 -2633 2634 0
-2634 2633 0
-2634 -2632 0
c Var 'aux476' direct represents '2' with '-2633'
2632 2634 -2633 0
c Encoding variable: aux477 with domain: int(0..2) (representing constraint ((x_00009_00002=3) + (x_00004_00002=3)))
c Both direct and order encoding.
c Var 'aux477' order represents '0' with '2635'
c Var 'aux477' direct represents '0' with '2635'
c Var 'aux477' order represents '1' with '2636'
-2635 2636 0
c Var 'aux477' direct represents '1' with '2637'
2635 -2636 2637 0
-2637 2636 0
-2637 -2635 0
c Var 'aux477' direct represents '2' with '-2636'
2635 2637 -2636 0
c Encoding variable: aux478 with domain: int(0..3) (representing constraint ((x_00001_00002=3) + aux477))
c Both direct and order encoding.
c Var 'aux478' order represents '0' with '2638'
c Var 'aux478' direct represents '0' with '2638'
c Var 'aux478' order represents '1' with '2639'
-2638 2639 0
c Var 'aux478' direct represents '1' with '2640'
2638 -2639 2640 0
-2640 2639 0
-2640 -2638 0
c Var 'aux478' order represents '2' with '2641'
-2639 2641 0
c Var 'aux478' direct represents '2' with '2642'
2639 -2641 2642 0
-2642 2641 0
-2642 -2639 0
c Var 'aux478' direct represents '3' with '-2641'
2638 2640 2642 -2641 0
c Encoding variable: aux479 with domain: int(0..4) (representing constraint (aux474 + aux476))
c Both direct and order encoding.
c Var 'aux479' order represents '0' with '2643'
c Var 'aux479' direct represents '0' with '2643'
c Var 'aux479' order represents '1' with '2644'
-2643 2644 0
c Var 'aux479' direct represents '1' with '2645'
2643 -2644 2645 0
-2645 2644 0
-2645 -2643 0
c Var 'aux479' order represents '2' with '2646'
-2644 2646 0
c Var 'aux479' direct represents '2' with '2647'
2644 -2646 2647 0
-2647 2646 0
-2647 -2644 0
c Var 'aux479' order represents '3' with '2648'
-2646 2648 0
c Var 'aux479' direct represents '3' with '2649'
2646 -2648 2649 0
-2649 2648 0
-2649 -2646 0
c Var 'aux479' direct represents '4' with '-2648'
2643 2645 2647 2649 -2648 0
c Encoding variable: aux480 with domain: int(0..2) (representing constraint ((x_00003_00002=4) + (x_00005_00002=4)))
c Both direct and order encoding.
c Var 'aux480' order represents '0' with '2650'
c Var 'aux480' direct represents '0' with '2650'
c Var 'aux480' order represents '1' with '2651'
-2650 2651 0
c Var 'aux480' direct represents '1' with '2652'
2650 -2651 2652 0
-2652 2651 0
-2652 -2650 0
c Var 'aux480' direct represents '2' with '-2651'
2650 2652 -2651 0
c Encoding variable: aux481 with domain: int(0..2) (representing constraint ((x_00007_00002=4) + (x_00008_00002=4)))
c Both direct and order encoding.
c Var 'aux481' order represents '0' with '2653'
c Var 'aux481' direct represents '0' with '2653'
c Var 'aux481' order represents '1' with '2654'
-2653 2654 0
c Var 'aux481' direct represents '1' with '2655'
2653 -2654 2655 0
-2655 2654 0
-2655 -2653 0
c Var 'aux481' direct represents '2' with '-2654'
2653 2655 -2654 0
c Encoding variable: aux482 with domain: int(0..2) (representing constraint ((x_00002_00002=4) + (x_00006_00002=4)))
c Both direct and order encoding.
c Var 'aux482' order represents '0' with '2656'
c Var 'aux482' direct represents '0' with '2656'
c Var 'aux482' order represents '1' with '2657'
-2656 2657 0
c Var 'aux482' direct represents '1' with '2658'
2656 -2657 2658 0
-2658 2657 0
-2658 -2656 0
c Var 'aux482' direct represents '2' with '-2657'
2656 2658 -2657 0
c Encoding variable: aux483 with domain: int(0..2) (representing constraint ((x_00009_00002=4) + (x_00004_00002=4)))
c Both direct and order encoding.
c Var 'aux483' order represents '0' with '2659'
c Var 'aux483' direct represents '0' with '2659'
c Var 'aux483' order represents '1' with '2660'
-2659 2660 0
c Var 'aux483' direct represents '1' with '2661'
2659 -2660 2661 0
-2661 2660 0
-2661 -2659 0
c Var 'aux483' direct represents '2' with '-2660'
2659 2661 -2660 0
c Encoding variable: aux484 with domain: int(0..3) (representing constraint ((x_00001_00002=4) + aux483))
c Both direct and order encoding.
c Var 'aux484' order represents '0' with '2662'
c Var 'aux484' direct represents '0' with '2662'
c Var 'aux484' order represents '1' with '2663'
-2662 2663 0
c Var 'aux484' direct represents '1' with '2664'
2662 -2663 2664 0
-2664 2663 0
-2664 -2662 0
c Var 'aux484' order represents '2' with '2665'
-2663 2665 0
c Var 'aux484' direct represents '2' with '2666'
2663 -2665 2666 0
-2666 2665 0
-2666 -2663 0
c Var 'aux484' direct represents '3' with '-2665'
2662 2664 2666 -2665 0
c Encoding variable: aux485 with domain: int(0..4) (representing constraint (aux480 + aux482))
c Both direct and order encoding.
c Var 'aux485' order represents '0' with '2667'
c Var 'aux485' direct represents '0' with '2667'
c Var 'aux485' order represents '1' with '2668'
-2667 2668 0
c Var 'aux485' direct represents '1' with '2669'
2667 -2668 2669 0
-2669 2668 0
-2669 -2667 0
c Var 'aux485' order represents '2' with '2670'
-2668 2670 0
c Var 'aux485' direct represents '2' with '2671'
2668 -2670 2671 0
-2671 2670 0
-2671 -2668 0
c Var 'aux485' order represents '3' with '2672'
-2670 2672 0
c Var 'aux485' direct represents '3' with '2673'
2670 -2672 2673 0
-2673 2672 0
-2673 -2670 0
c Var 'aux485' direct represents '4' with '-2672'
2667 2669 2671 2673 -2672 0
c Encoding variable: aux486 with domain: int(0..2) (representing constraint ((x_00003_00002=5) + (x_00005_00002=5)))
c Both direct and order encoding.
c Var 'aux486' order represents '0' with '2674'
c Var 'aux486' direct represents '0' with '2674'
c Var 'aux486' order represents '1' with '2675'
-2674 2675 0
c Var 'aux486' direct represents '1' with '2676'
2674 -2675 2676 0
-2676 2675 0
-2676 -2674 0
c Var 'aux486' direct represents '2' with '-2675'
2674 2676 -2675 0
c Encoding variable: aux487 with domain: int(0..2) (representing constraint ((x_00007_00002=5) + (x_00008_00002=5)))
c Both direct and order encoding.
c Var 'aux487' order represents '0' with '2677'
c Var 'aux487' direct represents '0' with '2677'
c Var 'aux487' order represents '1' with '2678'
-2677 2678 0
c Var 'aux487' direct represents '1' with '2679'
2677 -2678 2679 0
-2679 2678 0
-2679 -2677 0
c Var 'aux487' direct represents '2' with '-2678'
2677 2679 -2678 0
c Encoding variable: aux488 with domain: int(0..2) (representing constraint ((x_00002_00002=5) + (x_00006_00002=5)))
c Both direct and order encoding.
c Var 'aux488' order represents '0' with '2680'
c Var 'aux488' direct represents '0' with '2680'
c Var 'aux488' order represents '1' with '2681'
-2680 2681 0
c Var 'aux488' direct represents '1' with '2682'
2680 -2681 2682 0
-2682 2681 0
-2682 -2680 0
c Var 'aux488' direct represents '2' with '-2681'
2680 2682 -2681 0
c Encoding variable: aux489 with domain: int(0..2) (representing constraint ((x_00009_00002=5) + (x_00004_00002=5)))
c Both direct and order encoding.
c Var 'aux489' order represents '0' with '2683'
c Var 'aux489' direct represents '0' with '2683'
c Var 'aux489' order represents '1' with '2684'
-2683 2684 0
c Var 'aux489' direct represents '1' with '2685'
2683 -2684 2685 0
-2685 2684 0
-2685 -2683 0
c Var 'aux489' direct represents '2' with '-2684'
2683 2685 -2684 0
c Encoding variable: aux490 with domain: int(0..3) (representing constraint ((x_00001_00002=5) + aux489))
c Both direct and order encoding.
c Var 'aux490' order represents '0' with '2686'
c Var 'aux490' direct represents '0' with '2686'
c Var 'aux490' order represents '1' with '2687'
-2686 2687 0
c Var 'aux490' direct represents '1' with '2688'
2686 -2687 2688 0
-2688 2687 0
-2688 -2686 0
c Var 'aux490' order represents '2' with '2689'
-2687 2689 0
c Var 'aux490' direct represents '2' with '2690'
2687 -2689 2690 0
-2690 2689 0
-2690 -2687 0
c Var 'aux490' direct represents '3' with '-2689'
2686 2688 2690 -2689 0
c Encoding variable: aux491 with domain: int(0..4) (representing constraint (aux486 + aux488))
c Both direct and order encoding.
c Var 'aux491' order represents '0' with '2691'
c Var 'aux491' direct represents '0' with '2691'
c Var 'aux491' order represents '1' with '2692'
-2691 2692 0
c Var 'aux491' direct represents '1' with '2693'
2691 -2692 2693 0
-2693 2692 0
-2693 -2691 0
c Var 'aux491' order represents '2' with '2694'
-2692 2694 0
c Var 'aux491' direct represents '2' with '2695'
2692 -2694 2695 0
-2695 2694 0
-2695 -2692 0
c Var 'aux491' order represents '3' with '2696'
-2694 2696 0
c Var 'aux491' direct represents '3' with '2697'
2694 -2696 2697 0
-2697 2696 0
-2697 -2694 0
c Var 'aux491' direct represents '4' with '-2696'
2691 2693 2695 2697 -2696 0
c Encoding variable: aux492 with domain: int(0..2) (representing constraint ((x_00003_00002=6) + (x_00005_00002=6)))
c Both direct and order encoding.
c Var 'aux492' order represents '0' with '2698'
c Var 'aux492' direct represents '0' with '2698'
c Var 'aux492' order represents '1' with '2699'
-2698 2699 0
c Var 'aux492' direct represents '1' with '2700'
2698 -2699 2700 0
-2700 2699 0
-2700 -2698 0
c Var 'aux492' direct represents '2' with '-2699'
2698 2700 -2699 0
c Encoding variable: aux493 with domain: int(0..2) (representing constraint ((x_00007_00002=6) + (x_00008_00002=6)))
c Both direct and order encoding.
c Var 'aux493' order represents '0' with '2701'
c Var 'aux493' direct represents '0' with '2701'
c Var 'aux493' order represents '1' with '2702'
-2701 2702 0
c Var 'aux493' direct represents '1' with '2703'
2701 -2702 2703 0
-2703 2702 0
-2703 -2701 0
c Var 'aux493' direct represents '2' with '-2702'
2701 2703 -2702 0
c Encoding variable: aux494 with domain: int(0..2) (representing constraint ((x_00002_00002=6) + (x_00006_00002=6)))
c Both direct and order encoding.
c Var 'aux494' order represents '0' with '2704'
c Var 'aux494' direct represents '0' with '2704'
c Var 'aux494' order represents '1' with '2705'
-2704 2705 0
c Var 'aux494' direct represents '1' with '2706'
2704 -2705 2706 0
-2706 2705 0
-2706 -2704 0
c Var 'aux494' direct represents '2' with '-2705'
2704 2706 -2705 0
c Encoding variable: aux495 with domain: int(0..2) (representing constraint ((x_00009_00002=6) + (x_00004_00002=6)))
c Both direct and order encoding.
c Var 'aux495' order represents '0' with '2707'
c Var 'aux495' direct represents '0' with '2707'
c Var 'aux495' order represents '1' with '2708'
-2707 2708 0
c Var 'aux495' direct represents '1' with '2709'
2707 -2708 2709 0
-2709 2708 0
-2709 -2707 0
c Var 'aux495' direct represents '2' with '-2708'
2707 2709 -2708 0
c Encoding variable: aux496 with domain: int(0..3) (representing constraint ((x_00001_00002=6) + aux495))
c Both direct and order encoding.
c Var 'aux496' order represents '0' with '2710'
c Var 'aux496' direct represents '0' with '2710'
c Var 'aux496' order represents '1' with '2711'
-2710 2711 0
c Var 'aux496' direct represents '1' with '2712'
2710 -2711 2712 0
-2712 2711 0
-2712 -2710 0
c Var 'aux496' order represents '2' with '2713'
-2711 2713 0
c Var 'aux496' direct represents '2' with '2714'
2711 -2713 2714 0
-2714 2713 0
-2714 -2711 0
c Var 'aux496' direct represents '3' with '-2713'
2710 2712 2714 -2713 0
c Encoding variable: aux497 with domain: int(0..4) (representing constraint (aux492 + aux494))
c Both direct and order encoding.
c Var 'aux497' order represents '0' with '2715'
c Var 'aux497' direct represents '0' with '2715'
c Var 'aux497' order represents '1' with '2716'
-2715 2716 0
c Var 'aux497' direct represents '1' with '2717'
2715 -2716 2717 0
-2717 2716 0
-2717 -2715 0
c Var 'aux497' order represents '2' with '2718'
-2716 2718 0
c Var 'aux497' direct represents '2' with '2719'
2716 -2718 2719 0
-2719 2718 0
-2719 -2716 0
c Var 'aux497' order represents '3' with '2720'
-2718 2720 0
c Var 'aux497' direct represents '3' with '2721'
2718 -2720 2721 0
-2721 2720 0
-2721 -2718 0
c Var 'aux497' direct represents '4' with '-2720'
2715 2717 2719 2721 -2720 0
c Encoding variable: aux498 with domain: int(0..2) (representing constraint ((x_00003_00002=7) + (x_00005_00002=7)))
c Both direct and order encoding.
c Var 'aux498' order represents '0' with '2722'
c Var 'aux498' direct represents '0' with '2722'
c Var 'aux498' order represents '1' with '2723'
-2722 2723 0
c Var 'aux498' direct represents '1' with '2724'
2722 -2723 2724 0
-2724 2723 0
-2724 -2722 0
c Var 'aux498' direct represents '2' with '-2723'
2722 2724 -2723 0
c Encoding variable: aux499 with domain: int(0..2) (representing constraint ((x_00007_00002=7) + (x_00008_00002=7)))
c Both direct and order encoding.
c Var 'aux499' order represents '0' with '2725'
c Var 'aux499' direct represents '0' with '2725'
c Var 'aux499' order represents '1' with '2726'
-2725 2726 0
c Var 'aux499' direct represents '1' with '2727'
2725 -2726 2727 0
-2727 2726 0
-2727 -2725 0
c Var 'aux499' direct represents '2' with '-2726'
2725 2727 -2726 0
c Encoding variable: aux500 with domain: int(0..2) (representing constraint ((x_00002_00002=7) + (x_00006_00002=7)))
c Both direct and order encoding.
c Var 'aux500' order represents '0' with '2728'
c Var 'aux500' direct represents '0' with '2728'
c Var 'aux500' order represents '1' with '2729'
-2728 2729 0
c Var 'aux500' direct represents '1' with '2730'
2728 -2729 2730 0
-2730 2729 0
-2730 -2728 0
c Var 'aux500' direct represents '2' with '-2729'
2728 2730 -2729 0
c Encoding variable: aux501 with domain: int(0..2) (representing constraint ((x_00009_00002=7) + (x_00004_00002=7)))
c Both direct and order encoding.
c Var 'aux501' order represents '0' with '2731'
c Var 'aux501' direct represents '0' with '2731'
c Var 'aux501' order represents '1' with '2732'
-2731 2732 0
c Var 'aux501' direct represents '1' with '2733'
2731 -2732 2733 0
-2733 2732 0
-2733 -2731 0
c Var 'aux501' direct represents '2' with '-2732'
2731 2733 -2732 0
c Encoding variable: aux502 with domain: int(0..3) (representing constraint ((x_00001_00002=7) + aux501))
c Both direct and order encoding.
c Var 'aux502' order represents '0' with '2734'
c Var 'aux502' direct represents '0' with '2734'
c Var 'aux502' order represents '1' with '2735'
-2734 2735 0
c Var 'aux502' direct represents '1' with '2736'
2734 -2735 2736 0
-2736 2735 0
-2736 -2734 0
c Var 'aux502' order represents '2' with '2737'
-2735 2737 0
c Var 'aux502' direct represents '2' with '2738'
2735 -2737 2738 0
-2738 2737 0
-2738 -2735 0
c Var 'aux502' direct represents '3' with '-2737'
2734 2736 2738 -2737 0
c Encoding variable: aux503 with domain: int(0..4) (representing constraint (aux498 + aux500))
c Both direct and order encoding.
c Var 'aux503' order represents '0' with '2739'
c Var 'aux503' direct represents '0' with '2739'
c Var 'aux503' order represents '1' with '2740'
-2739 2740 0
c Var 'aux503' direct represents '1' with '2741'
2739 -2740 2741 0
-2741 2740 0
-2741 -2739 0
c Var 'aux503' order represents '2' with '2742'
-2740 2742 0
c Var 'aux503' direct represents '2' with '2743'
2740 -2742 2743 0
-2743 2742 0
-2743 -2740 0
c Var 'aux503' order represents '3' with '2744'
-2742 2744 0
c Var 'aux503' direct represents '3' with '2745'
2742 -2744 2745 0
-2745 2744 0
-2745 -2742 0
c Var 'aux503' direct represents '4' with '-2744'
2739 2741 2743 2745 -2744 0
c Encoding variable: aux504 with domain: int(0..2) (representing constraint ((x_00003_00002=8) + (x_00005_00002=8)))
c Both direct and order encoding.
c Var 'aux504' order represents '0' with '2746'
c Var 'aux504' direct represents '0' with '2746'
c Var 'aux504' order represents '1' with '2747'
-2746 2747 0
c Var 'aux504' direct represents '1' with '2748'
2746 -2747 2748 0
-2748 2747 0
-2748 -2746 0
c Var 'aux504' direct represents '2' with '-2747'
2746 2748 -2747 0
c Encoding variable: aux505 with domain: int(0..2) (representing constraint ((x_00007_00002=8) + (x_00008_00002=8)))
c Both direct and order encoding.
c Var 'aux505' order represents '0' with '2749'
c Var 'aux505' direct represents '0' with '2749'
c Var 'aux505' order represents '1' with '2750'
-2749 2750 0
c Var 'aux505' direct represents '1' with '2751'
2749 -2750 2751 0
-2751 2750 0
-2751 -2749 0
c Var 'aux505' direct represents '2' with '-2750'
2749 2751 -2750 0
c Encoding variable: aux506 with domain: int(0..2) (representing constraint ((x_00002_00002=8) + (x_00006_00002=8)))
c Both direct and order encoding.
c Var 'aux506' order represents '0' with '2752'
c Var 'aux506' direct represents '0' with '2752'
c Var 'aux506' order represents '1' with '2753'
-2752 2753 0
c Var 'aux506' direct represents '1' with '2754'
2752 -2753 2754 0
-2754 2753 0
-2754 -2752 0
c Var 'aux506' direct represents '2' with '-2753'
2752 2754 -2753 0
c Encoding variable: aux507 with domain: int(0..2) (representing constraint ((x_00009_00002=8) + (x_00004_00002=8)))
c Both direct and order encoding.
c Var 'aux507' order represents '0' with '2755'
c Var 'aux507' direct represents '0' with '2755'
c Var 'aux507' order represents '1' with '2756'
-2755 2756 0
c Var 'aux507' direct represents '1' with '2757'
2755 -2756 2757 0
-2757 2756 0
-2757 -2755 0
c Var 'aux507' direct represents '2' with '-2756'
2755 2757 -2756 0
c Encoding variable: aux508 with domain: int(0..3) (representing constraint ((x_00001_00002=8) + aux507))
c Both direct and order encoding.
c Var 'aux508' order represents '0' with '2758'
c Var 'aux508' direct represents '0' with '2758'
c Var 'aux508' order represents '1' with '2759'
-2758 2759 0
c Var 'aux508' direct represents '1' with '2760'
2758 -2759 2760 0
-2760 2759 0
-2760 -2758 0
c Var 'aux508' order represents '2' with '2761'
-2759 2761 0
c Var 'aux508' direct represents '2' with '2762'
2759 -2761 2762 0
-2762 2761 0
-2762 -2759 0
c Var 'aux508' direct represents '3' with '-2761'
2758 2760 2762 -2761 0
c Encoding variable: aux509 with domain: int(0..4) (representing constraint (aux504 + aux506))
c Both direct and order encoding.
c Var 'aux509' order represents '0' with '2763'
c Var 'aux509' direct represents '0' with '2763'
c Var 'aux509' order represents '1' with '2764'
-2763 2764 0
c Var 'aux509' direct represents '1' with '2765'
2763 -2764 2765 0
-2765 2764 0
-2765 -2763 0
c Var 'aux509' order represents '2' with '2766'
-2764 2766 0
c Var 'aux509' direct represents '2' with '2767'
2764 -2766 2767 0
-2767 2766 0
-2767 -2764 0
c Var 'aux509' order represents '3' with '2768'
-2766 2768 0
c Var 'aux509' direct represents '3' with '2769'
2766 -2768 2769 0
-2769 2768 0
-2769 -2766 0
c Var 'aux509' direct represents '4' with '-2768'
2763 2765 2767 2769 -2768 0
c Encoding variable: aux510 with domain: int(0..2) (representing constraint ((x_00003_00002=9) + (x_00005_00002=9)))
c Both direct and order encoding.
c Var 'aux510' order represents '0' with '2770'
c Var 'aux510' direct represents '0' with '2770'
c Var 'aux510' order represents '1' with '2771'
-2770 2771 0
c Var 'aux510' direct represents '1' with '2772'
2770 -2771 2772 0
-2772 2771 0
-2772 -2770 0
c Var 'aux510' direct represents '2' with '-2771'
2770 2772 -2771 0
c Encoding variable: aux511 with domain: int(0..2) (representing constraint ((x_00007_00002=9) + (x_00008_00002=9)))
c Both direct and order encoding.
c Var 'aux511' order represents '0' with '2773'
c Var 'aux511' direct represents '0' with '2773'
c Var 'aux511' order represents '1' with '2774'
-2773 2774 0
c Var 'aux511' direct represents '1' with '2775'
2773 -2774 2775 0
-2775 2774 0
-2775 -2773 0
c Var 'aux511' direct represents '2' with '-2774'
2773 2775 -2774 0
c Encoding variable: aux512 with domain: int(0..2) (representing constraint ((x_00002_00002=9) + (x_00006_00002=9)))
c Both direct and order encoding.
c Var 'aux512' order represents '0' with '2776'
c Var 'aux512' direct represents '0' with '2776'
c Var 'aux512' order represents '1' with '2777'
-2776 2777 0
c Var 'aux512' direct represents '1' with '2778'
2776 -2777 2778 0
-2778 2777 0
-2778 -2776 0
c Var 'aux512' direct represents '2' with '-2777'
2776 2778 -2777 0
c Encoding variable: aux513 with domain: int(0..2) (representing constraint ((x_00009_00002=9) + (x_00004_00002=9)))
c Both direct and order encoding.
c Var 'aux513' order represents '0' with '2779'
c Var 'aux513' direct represents '0' with '2779'
c Var 'aux513' order represents '1' with '2780'
-2779 2780 0
c Var 'aux513' direct represents '1' with '2781'
2779 -2780 2781 0
-2781 2780 0
-2781 -2779 0
c Var 'aux513' direct represents '2' with '-2780'
2779 2781 -2780 0
c Encoding variable: aux514 with domain: int(0..3) (representing constraint ((x_00001_00002=9) + aux513))
c Both direct and order encoding.
c Var 'aux514' order represents '0' with '2782'
c Var 'aux514' direct represents '0' with '2782'
c Var 'aux514' order represents '1' with '2783'
-2782 2783 0
c Var 'aux514' direct represents '1' with '2784'
2782 -2783 2784 0
-2784 2783 0
-2784 -2782 0
c Var 'aux514' order represents '2' with '2785'
-2783 2785 0
c Var 'aux514' direct represents '2' with '2786'
2783 -2785 2786 0
-2786 2785 0
-2786 -2783 0
c Var 'aux514' direct represents '3' with '-2785'
2782 2784 2786 -2785 0
c Encoding variable: aux515 with domain: int(0..4) (representing constraint (aux510 + aux512))
c Both direct and order encoding.
c Var 'aux515' order represents '0' with '2787'
c Var 'aux515' direct represents '0' with '2787'
c Var 'aux515' order represents '1' with '2788'
-2787 2788 0
c Var 'aux515' direct represents '1' with '2789'
2787 -2788 2789 0
-2789 2788 0
-2789 -2787 0
c Var 'aux515' order represents '2' with '2790'
-2788 2790 0
c Var 'aux515' direct represents '2' with '2791'
2788 -2790 2791 0
-2791 2790 0
-2791 -2788 0
c Var 'aux515' order represents '3' with '2792'
-2790 2792 0
c Var 'aux515' direct represents '3' with '2793'
2790 -2792 2793 0
-2793 2792 0
-2793 -2790 0
c Var 'aux515' direct represents '4' with '-2792'
2787 2789 2791 2793 -2792 0
c Encoding variable: aux516 with domain: int(0..2) (representing constraint ((x_00003_00003=1) + (x_00005_00003=1)))
c Both direct and order encoding.
c Var 'aux516' order represents '0' with '2794'
c Var 'aux516' direct represents '0' with '2794'
c Var 'aux516' order represents '1' with '2795'
-2794 2795 0
c Var 'aux516' direct represents '1' with '2796'
2794 -2795 2796 0
-2796 2795 0
-2796 -2794 0
c Var 'aux516' direct represents '2' with '-2795'
2794 2796 -2795 0
c Encoding variable: aux517 with domain: int(0..2) (representing constraint ((x_00007_00003=1) + (x_00008_00003=1)))
c Both direct and order encoding.
c Var 'aux517' order represents '0' with '2797'
c Var 'aux517' direct represents '0' with '2797'
c Var 'aux517' order represents '1' with '2798'
-2797 2798 0
c Var 'aux517' direct represents '1' with '2799'
2797 -2798 2799 0
-2799 2798 0
-2799 -2797 0
c Var 'aux517' direct represents '2' with '-2798'
2797 2799 -2798 0
c Encoding variable: aux518 with domain: int(0..2) (representing constraint ((x_00002_00003=1) + (x_00006_00003=1)))
c Both direct and order encoding.
c Var 'aux518' order represents '0' with '2800'
c Var 'aux518' direct represents '0' with '2800'
c Var 'aux518' order represents '1' with '2801'
-2800 2801 0
c Var 'aux518' direct represents '1' with '2802'
2800 -2801 2802 0
-2802 2801 0
-2802 -2800 0
c Var 'aux518' direct represents '2' with '-2801'
2800 2802 -2801 0
c Encoding variable: aux519 with domain: int(0..2) (representing constraint ((x_00009_00003=1) + (x_00004_00003=1)))
c Both direct and order encoding.
c Var 'aux519' order represents '0' with '2803'
c Var 'aux519' direct represents '0' with '2803'
c Var 'aux519' order represents '1' with '2804'
-2803 2804 0
c Var 'aux519' direct represents '1' with '2805'
2803 -2804 2805 0
-2805 2804 0
-2805 -2803 0
c Var 'aux519' direct represents '2' with '-2804'
2803 2805 -2804 0
c Encoding variable: aux520 with domain: int(0..3) (representing constraint ((x_00001_00003=1) + aux519))
c Both direct and order encoding.
c Var 'aux520' order represents '0' with '2806'
c Var 'aux520' direct represents '0' with '2806'
c Var 'aux520' order represents '1' with '2807'
-2806 2807 0
c Var 'aux520' direct represents '1' with '2808'
2806 -2807 2808 0
-2808 2807 0
-2808 -2806 0
c Var 'aux520' order represents '2' with '2809'
-2807 2809 0
c Var 'aux520' direct represents '2' with '2810'
2807 -2809 2810 0
-2810 2809 0
-2810 -2807 0
c Var 'aux520' direct represents '3' with '-2809'
2806 2808 2810 -2809 0
c Encoding variable: aux521 with domain: int(0..4) (representing constraint (aux516 + aux518))
c Both direct and order encoding.
c Var 'aux521' order represents '0' with '2811'
c Var 'aux521' direct represents '0' with '2811'
c Var 'aux521' order represents '1' with '2812'
-2811 2812 0
c Var 'aux521' direct represents '1' with '2813'
2811 -2812 2813 0
-2813 2812 0
-2813 -2811 0
c Var 'aux521' order represents '2' with '2814'
-2812 2814 0
c Var 'aux521' direct represents '2' with '2815'
2812 -2814 2815 0
-2815 2814 0
-2815 -2812 0
c Var 'aux521' order represents '3' with '2816'
-2814 2816 0
c Var 'aux521' direct represents '3' with '2817'
2814 -2816 2817 0
-2817 2816 0
-2817 -2814 0
c Var 'aux521' direct represents '4' with '-2816'
2811 2813 2815 2817 -2816 0
c Encoding variable: aux522 with domain: int(0..2) (representing constraint ((x_00003_00003=2) + (x_00005_00003=2)))
c Both direct and order encoding.
c Var 'aux522' order represents '0' with '2818'
c Var 'aux522' direct represents '0' with '2818'
c Var 'aux522' order represents '1' with '2819'
-2818 2819 0
c Var 'aux522' direct represents '1' with '2820'
2818 -2819 2820 0
-2820 2819 0
-2820 -2818 0
c Var 'aux522' direct represents '2' with '-2819'
2818 2820 -2819 0
c Encoding variable: aux523 with domain: int(0..2) (representing constraint ((x_00007_00003=2) + (x_00008_00003=2)))
c Both direct and order encoding.
c Var 'aux523' order represents '0' with '2821'
c Var 'aux523' direct represents '0' with '2821'
c Var 'aux523' order represents '1' with '2822'
-2821 2822 0
c Var 'aux523' direct represents '1' with '2823'
2821 -2822 2823 0
-2823 2822 0
-2823 -2821 0
c Var 'aux523' direct represents '2' with '-2822'
2821 2823 -2822 0
c Encoding variable: aux524 with domain: int(0..2) (representing constraint ((x_00002_00003=2) + (x_00006_00003=2)))
c Both direct and order encoding.
c Var 'aux524' order represents '0' with '2824'
c Var 'aux524' direct represents '0' with '2824'
c Var 'aux524' order represents '1' with '2825'
-2824 2825 0
c Var 'aux524' direct represents '1' with '2826'
2824 -2825 2826 0
-2826 2825 0
-2826 -2824 0
c Var 'aux524' direct represents '2' with '-2825'
2824 2826 -2825 0
c Encoding variable: aux525 with domain: int(0..2) (representing constraint ((x_00009_00003=2) + (x_00004_00003=2)))
c Both direct and order encoding.
c Var 'aux525' order represents '0' with '2827'
c Var 'aux525' direct represents '0' with '2827'
c Var 'aux525' order represents '1' with '2828'
-2827 2828 0
c Var 'aux525' direct represents '1' with '2829'
2827 -2828 2829 0
-2829 2828 0
-2829 -2827 0
c Var 'aux525' direct represents '2' with '-2828'
2827 2829 -2828 0
c Encoding variable: aux526 with domain: int(0..3) (representing constraint ((x_00001_00003=2) + aux525))
c Both direct and order encoding.
c Var 'aux526' order represents '0' with '2830'
c Var 'aux526' direct represents '0' with '2830'
c Var 'aux526' order represents '1' with '2831'
-2830 2831 0
c Var 'aux526' direct represents '1' with '2832'
2830 -2831 2832 0
-2832 2831 0
-2832 -2830 0
c Var 'aux526' order represents '2' with '2833'
-2831 2833 0
c Var 'aux526' direct represents '2' with '2834'
2831 -2833 2834 0
-2834 2833 0
-2834 -2831 0
c Var 'aux526' direct represents '3' with '-2833'
2830 2832 2834 -2833 0
c Encoding variable: aux527 with domain: int(0..4) (representing constraint (aux522 + aux524))
c Both direct and order encoding.
c Var 'aux527' order represents '0' with '2835'
c Var 'aux527' direct represents '0' with '2835'
c Var 'aux527' order represents '1' with '2836'
-2835 2836 0
c Var 'aux527' direct represents '1' with '2837'
2835 -2836 2837 0
-2837 2836 0
-2837 -2835 0
c Var 'aux527' order represents '2' with '2838'
-2836 2838 0
c Var 'aux527' direct represents '2' with '2839'
2836 -2838 2839 0
-2839 2838 0
-2839 -2836 0
c Var 'aux527' order represents '3' with '2840'
-2838 2840 0
c Var 'aux527' direct represents '3' with '2841'
2838 -2840 2841 0
-2841 2840 0
-2841 -2838 0
c Var 'aux527' direct represents '4' with '-2840'
2835 2837 2839 2841 -2840 0
c Encoding variable: aux528 with domain: int(0..2) (representing constraint ((x_00003_00003=3) + (x_00005_00003=3)))
c Both direct and order encoding.
c Var 'aux528' order represents '0' with '2842'
c Var 'aux528' direct represents '0' with '2842'
c Var 'aux528' order represents '1' with '2843'
-2842 2843 0
c Var 'aux528' direct represents '1' with '2844'
2842 -2843 2844 0
-2844 2843 0
-2844 -2842 0
c Var 'aux528' direct represents '2' with '-2843'
2842 2844 -2843 0
c Encoding variable: aux529 with domain: int(0..2) (representing constraint ((x_00007_00003=3) + (x_00008_00003=3)))
c Both direct and order encoding.
c Var 'aux529' order represents '0' with '2845'
c Var 'aux529' direct represents '0' with '2845'
c Var 'aux529' order represents '1' with '2846'
-2845 2846 0
c Var 'aux529' direct represents '1' with '2847'
2845 -2846 2847 0
-2847 2846 0
-2847 -2845 0
c Var 'aux529' direct represents '2' with '-2846'
2845 2847 -2846 0
c Encoding variable: aux530 with domain: int(0..2) (representing constraint ((x_00002_00003=3) + (x_00006_00003=3)))
c Both direct and order encoding.
c Var 'aux530' order represents '0' with '2848'
c Var 'aux530' direct represents '0' with '2848'
c Var 'aux530' order represents '1' with '2849'
-2848 2849 0
c Var 'aux530' direct represents '1' with '2850'
2848 -2849 2850 0
-2850 2849 0
-2850 -2848 0
c Var 'aux530' direct represents '2' with '-2849'
2848 2850 -2849 0
c Encoding variable: aux531 with domain: int(0..2) (representing constraint ((x_00009_00003=3) + (x_00004_00003=3)))
c Both direct and order encoding.
c Var 'aux531' order represents '0' with '2851'
c Var 'aux531' direct represents '0' with '2851'
c Var 'aux531' order represents '1' with '2852'
-2851 2852 0
c Var 'aux531' direct represents '1' with '2853'
2851 -2852 2853 0
-2853 2852 0
-2853 -2851 0
c Var 'aux531' direct represents '2' with '-2852'
2851 2853 -2852 0
c Encoding variable: aux532 with domain: int(0..3) (representing constraint ((x_00001_00003=3) + aux531))
c Both direct and order encoding.
c Var 'aux532' order represents '0' with '2854'
c Var 'aux532' direct represents '0' with '2854'
c Var 'aux532' order represents '1' with '2855'
-2854 2855 0
c Var 'aux532' direct represents '1' with '2856'
2854 -2855 2856 0
-2856 2855 0
-2856 -2854 0
c Var 'aux532' order represents '2' with '2857'
-2855 2857 0
c Var 'aux532' direct represents '2' with '2858'
2855 -2857 2858 0
-2858 2857 0
-2858 -2855 0
c Var 'aux532' direct represents '3' with '-2857'
2854 2856 2858 -2857 0
c Encoding variable: aux533 with domain: int(0..4) (representing constraint (aux528 + aux530))
c Both direct and order encoding.
c Var 'aux533' order represents '0' with '2859'
c Var 'aux533' direct represents '0' with '2859'
c Var 'aux533' order represents '1' with '2860'
-2859 2860 0
c Var 'aux533' direct represents '1' with '2861'
2859 -2860 2861 0
-2861 2860 0
-2861 -2859 0
c Var 'aux533' order represents '2' with '2862'
-2860 2862 0
c Var 'aux533' direct represents '2' with '2863'
2860 -2862 2863 0
-2863 2862 0
-2863 -2860 0
c Var 'aux533' order represents '3' with '2864'
-2862 2864 0
c Var 'aux533' direct represents '3' with '2865'
2862 -2864 2865 0
-2865 2864 0
-2865 -2862 0
c Var 'aux533' direct represents '4' with '-2864'
2859 2861 2863 2865 -2864 0
c Encoding variable: aux534 with domain: int(0..2) (representing constraint ((x_00003_00003=4) + (x_00005_00003=4)))
c Both direct and order encoding.
c Var 'aux534' order represents '0' with '2866'
c Var 'aux534' direct represents '0' with '2866'
c Var 'aux534' order represents '1' with '2867'
-2866 2867 0
c Var 'aux534' direct represents '1' with '2868'
2866 -2867 2868 0
-2868 2867 0
-2868 -2866 0
c Var 'aux534' direct represents '2' with '-2867'
2866 2868 -2867 0
c Encoding variable: aux535 with domain: int(0..2) (representing constraint ((x_00007_00003=4) + (x_00008_00003=4)))
c Both direct and order encoding.
c Var 'aux535' order represents '0' with '2869'
c Var 'aux535' direct represents '0' with '2869'
c Var 'aux535' order represents '1' with '2870'
-2869 2870 0
c Var 'aux535' direct represents '1' with '2871'
2869 -2870 2871 0
-2871 2870 0
-2871 -2869 0
c Var 'aux535' direct represents '2' with '-2870'
2869 2871 -2870 0
c Encoding variable: aux536 with domain: int(0..2) (representing constraint ((x_00002_00003=4) + (x_00006_00003=4)))
c Both direct and order encoding.
c Var 'aux536' order represents '0' with '2872'
c Var 'aux536' direct represents '0' with '2872'
c Var 'aux536' order represents '1' with '2873'
-2872 2873 0
c Var 'aux536' direct represents '1' with '2874'
2872 -2873 2874 0
-2874 2873 0
-2874 -2872 0
c Var 'aux536' direct represents '2' with '-2873'
2872 2874 -2873 0
c Encoding variable: aux537 with domain: int(0..2) (representing constraint ((x_00009_00003=4) + (x_00004_00003=4)))
c Both direct and order encoding.
c Var 'aux537' order represents '0' with '2875'
c Var 'aux537' direct represents '0' with '2875'
c Var 'aux537' order represents '1' with '2876'
-2875 2876 0
c Var 'aux537' direct represents '1' with '2877'
2875 -2876 2877 0
-2877 2876 0
-2877 -2875 0
c Var 'aux537' direct represents '2' with '-2876'
2875 2877 -2876 0
c Encoding variable: aux538 with domain: int(0..3) (representing constraint ((x_00001_00003=4) + aux537))
c Both direct and order encoding.
c Var 'aux538' order represents '0' with '2878'
c Var 'aux538' direct represents '0' with '2878'
c Var 'aux538' order represents '1' with '2879'
-2878 2879 0
c Var 'aux538' direct represents '1' with '2880'
2878 -2879 2880 0
-2880 2879 0
-2880 -2878 0
c Var 'aux538' order represents '2' with '2881'
-2879 2881 0
c Var 'aux538' direct represents '2' with '2882'
2879 -2881 2882 0
-2882 2881 0
-2882 -2879 0
c Var 'aux538' direct represents '3' with '-2881'
2878 2880 2882 -2881 0
c Encoding variable: aux539 with domain: int(0..4) (representing constraint (aux534 + aux536))
c Both direct and order encoding.
c Var 'aux539' order represents '0' with '2883'
c Var 'aux539' direct represents '0' with '2883'
c Var 'aux539' order represents '1' with '2884'
-2883 2884 0
c Var 'aux539' direct represents '1' with '2885'
2883 -2884 2885 0
-2885 2884 0
-2885 -2883 0
c Var 'aux539' order represents '2' with '2886'
-2884 2886 0
c Var 'aux539' direct represents '2' with '2887'
2884 -2886 2887 0
-2887 2886 0
-2887 -2884 0
c Var 'aux539' order represents '3' with '2888'
-2886 2888 0
c Var 'aux539' direct represents '3' with '2889'
2886 -2888 2889 0
-2889 2888 0
-2889 -2886 0
c Var 'aux539' direct represents '4' with '-2888'
2883 2885 2887 2889 -2888 0
c Encoding variable: aux540 with domain: int(0..2) (representing constraint ((x_00003_00003=5) + (x_00005_00003=5)))
c Both direct and order encoding.
c Var 'aux540' order represents '0' with '2890'
c Var 'aux540' direct represents '0' with '2890'
c Var 'aux540' order represents '1' with '2891'
-2890 2891 0
c Var 'aux540' direct represents '1' with '2892'
2890 -2891 2892 0
-2892 2891 0
-2892 -2890 0
c Var 'aux540' direct represents '2' with '-2891'
2890 2892 -2891 0
c Encoding variable: aux541 with domain: int(0..2) (representing constraint ((x_00007_00003=5) + (x_00008_00003=5)))
c Both direct and order encoding.
c Var 'aux541' order represents '0' with '2893'
c Var 'aux541' direct represents '0' with '2893'
c Var 'aux541' order represents '1' with '2894'
-2893 2894 0
c Var 'aux541' direct represents '1' with '2895'
2893 -2894 2895 0
-2895 2894 0
-2895 -2893 0
c Var 'aux541' direct represents '2' with '-2894'
2893 2895 -2894 0
c Encoding variable: aux542 with domain: int(0..2) (representing constraint ((x_00002_00003=5) + (x_00006_00003=5)))
c Both direct and order encoding.
c Var 'aux542' order represents '0' with '2896'
c Var 'aux542' direct represents '0' with '2896'
c Var 'aux542' order represents '1' with '2897'
-2896 2897 0
c Var 'aux542' direct represents '1' with '2898'
2896 -2897 2898 0
-2898 2897 0
-2898 -2896 0
c Var 'aux542' direct represents '2' with '-2897'
2896 2898 -2897 0
c Encoding variable: aux543 with domain: int(0..2) (representing constraint ((x_00009_00003=5) + (x_00004_00003=5)))
c Both direct and order encoding.
c Var 'aux543' order represents '0' with '2899'
c Var 'aux543' direct represents '0' with '2899'
c Var 'aux543' order represents '1' with '2900'
-2899 2900 0
c Var 'aux543' direct represents '1' with '2901'
2899 -2900 2901 0
-2901 2900 0
-2901 -2899 0
c Var 'aux543' direct represents '2' with '-2900'
2899 2901 -2900 0
c Encoding variable: aux544 with domain: int(0..3) (representing constraint ((x_00001_00003=5) + aux543))
c Both direct and order encoding.
c Var 'aux544' order represents '0' with '2902'
c Var 'aux544' direct represents '0' with '2902'
c Var 'aux544' order represents '1' with '2903'
-2902 2903 0
c Var 'aux544' direct represents '1' with '2904'
2902 -2903 2904 0
-2904 2903 0
-2904 -2902 0
c Var 'aux544' order represents '2' with '2905'
-2903 2905 0
c Var 'aux544' direct represents '2' with '2906'
2903 -2905 2906 0
-2906 2905 0
-2906 -2903 0
c Var 'aux544' direct represents '3' with '-2905'
2902 2904 2906 -2905 0
c Encoding variable: aux545 with domain: int(0..4) (representing constraint (aux540 + aux542))
c Both direct and order encoding.
c Var 'aux545' order represents '0' with '2907'
c Var 'aux545' direct represents '0' with '2907'
c Var 'aux545' order represents '1' with '2908'
-2907 2908 0
c Var 'aux545' direct represents '1' with '2909'
2907 -2908 2909 0
-2909 2908 0
-2909 -2907 0
c Var 'aux545' order represents '2' with '2910'
-2908 2910 0
c Var 'aux545' direct represents '2' with '2911'
2908 -2910 2911 0
-2911 2910 0
-2911 -2908 0
c Var 'aux545' order represents '3' with '2912'
-2910 2912 0
c Var 'aux545' direct represents '3' with '2913'
2910 -2912 2913 0
-2913 2912 0
-2913 -2910 0
c Var 'aux545' direct represents '4' with '-2912'
2907 2909 2911 2913 -2912 0
c Encoding variable: aux546 with domain: int(0..2) (representing constraint ((x_00003_00003=6) + (x_00005_00003=6)))
c Both direct and order encoding.
c Var 'aux546' order represents '0' with '2914'
c Var 'aux546' direct represents '0' with '2914'
c Var 'aux546' order represents '1' with '2915'
-2914 2915 0
c Var 'aux546' direct represents '1' with '2916'
2914 -2915 2916 0
-2916 2915 0
-2916 -2914 0
c Var 'aux546' direct represents '2' with '-2915'
2914 2916 -2915 0
c Encoding variable: aux547 with domain: int(0..2) (representing constraint ((x_00007_00003=6) + (x_00008_00003=6)))
c Both direct and order encoding.
c Var 'aux547' order represents '0' with '2917'
c Var 'aux547' direct represents '0' with '2917'
c Var 'aux547' order represents '1' with '2918'
-2917 2918 0
c Var 'aux547' direct represents '1' with '2919'
2917 -2918 2919 0
-2919 2918 0
-2919 -2917 0
c Var 'aux547' direct represents '2' with '-2918'
2917 2919 -2918 0
c Encoding variable: aux548 with domain: int(0..2) (representing constraint ((x_00002_00003=6) + (x_00006_00003=6)))
c Both direct and order encoding.
c Var 'aux548' order represents '0' with '2920'
c Var 'aux548' direct represents '0' with '2920'
c Var 'aux548' order represents '1' with '2921'
-2920 2921 0
c Var 'aux548' direct represents '1' with '2922'
2920 -2921 2922 0
-2922 2921 0
-2922 -2920 0
c Var 'aux548' direct represents '2' with '-2921'
2920 2922 -2921 0
c Encoding variable: aux549 with domain: int(0..2) (representing constraint ((x_00009_00003=6) + (x_00004_00003=6)))
c Both direct and order encoding.
c Var 'aux549' order represents '0' with '2923'
c Var 'aux549' direct represents '0' with '2923'
c Var 'aux549' order represents '1' with '2924'
-2923 2924 0
c Var 'aux549' direct represents '1' with '2925'
2923 -2924 2925 0
-2925 2924 0
-2925 -2923 0
c Var 'aux549' direct represents '2' with '-2924'
2923 2925 -2924 0
c Encoding variable: aux550 with domain: int(0..3) (representing constraint ((x_00001_00003=6) + aux549))
c Both direct and order encoding.
c Var 'aux550' order represents '0' with '2926'
c Var 'aux550' direct represents '0' with '2926'
c Var 'aux550' order represents '1' with '2927'
-2926 2927 0
c Var 'aux550' direct represents '1' with '2928'
2926 -2927 2928 0
-2928 2927 0
-2928 -2926 0
c Var 'aux550' order represents '2' with '2929'
-2927 2929 0
c Var 'aux550' direct represents '2' with '2930'
2927 -2929 2930 0
-2930 2929 0
-2930 -2927 0
c Var 'aux550' direct represents '3' with '-2929'
2926 2928 2930 -2929 0
c Encoding variable: aux551 with domain: int(0..4) (representing constraint (aux546 + aux548))
c Both direct and order encoding.
c Var 'aux551' order represents '0' with '2931'
c Var 'aux551' direct represents '0' with '2931'
c Var 'aux551' order represents '1' with '2932'
-2931 2932 0
c Var 'aux551' direct represents '1' with '2933'
2931 -2932 2933 0
-2933 2932 0
-2933 -2931 0
c Var 'aux551' order represents '2' with '2934'
-2932 2934 0
c Var 'aux551' direct represents '2' with '2935'
2932 -2934 2935 0
-2935 2934 0
-2935 -2932 0
c Var 'aux551' order represents '3' with '2936'
-2934 2936 0
c Var 'aux551' direct represents '3' with '2937'
2934 -2936 2937 0
-2937 2936 0
-2937 -2934 0
c Var 'aux551' direct represents '4' with '-2936'
2931 2933 2935 2937 -2936 0
c Encoding variable: aux552 with domain: int(0..2) (representing constraint ((x_00003_00003=7) + (x_00005_00003=7)))
c Both direct and order encoding.
c Var 'aux552' order represents '0' with '2938'
c Var 'aux552' direct represents '0' with '2938'
c Var 'aux552' order represents '1' with '2939'
-2938 2939 0
c Var 'aux552' direct represents '1' with '2940'
2938 -2939 2940 0
-2940 2939 0
-2940 -2938 0
c Var 'aux552' direct represents '2' with '-2939'
2938 2940 -2939 0
c Encoding variable: aux553 with domain: int(0..2) (representing constraint ((x_00007_00003=7) + (x_00008_00003=7)))
c Both direct and order encoding.
c Var 'aux553' order represents '0' with '2941'
c Var 'aux553' direct represents '0' with '2941'
c Var 'aux553' order represents '1' with '2942'
-2941 2942 0
c Var 'aux553' direct represents '1' with '2943'
2941 -2942 2943 0
-2943 2942 0
-2943 -2941 0
c Var 'aux553' direct represents '2' with '-2942'
2941 2943 -2942 0
c Encoding variable: aux554 with domain: int(0..2) (representing constraint ((x_00002_00003=7) + (x_00006_00003=7)))
c Both direct and order encoding.
c Var 'aux554' order represents '0' with '2944'
c Var 'aux554' direct represents '0' with '2944'
c Var 'aux554' order represents '1' with '2945'
-2944 2945 0
c Var 'aux554' direct represents '1' with '2946'
2944 -2945 2946 0
-2946 2945 0
-2946 -2944 0
c Var 'aux554' direct represents '2' with '-2945'
2944 2946 -2945 0
c Encoding variable: aux555 with domain: int(0..2) (representing constraint ((x_00009_00003=7) + (x_00004_00003=7)))
c Both direct and order encoding.
c Var 'aux555' order represents '0' with '2947'
c Var 'aux555' direct represents '0' with '2947'
c Var 'aux555' order represents '1' with '2948'
-2947 2948 0
c Var 'aux555' direct represents '1' with '2949'
2947 -2948 2949 0
-2949 2948 0
-2949 -2947 0
c Var 'aux555' direct represents '2' with '-2948'
2947 2949 -2948 0
c Encoding variable: aux556 with domain: int(0..3) (representing constraint ((x_00001_00003=7) + aux555))
c Both direct and order encoding.
c Var 'aux556' order represents '0' with '2950'
c Var 'aux556' direct represents '0' with '2950'
c Var 'aux556' order represents '1' with '2951'
-2950 2951 0
c Var 'aux556' direct represents '1' with '2952'
2950 -2951 2952 0
-2952 2951 0
-2952 -2950 0
c Var 'aux556' order represents '2' with '2953'
-2951 2953 0
c Var 'aux556' direct represents '2' with '2954'
2951 -2953 2954 0
-2954 2953 0
-2954 -2951 0
c Var 'aux556' direct represents '3' with '-2953'
2950 2952 2954 -2953 0
c Encoding variable: aux557 with domain: int(0..4) (representing constraint (aux552 + aux554))
c Both direct and order encoding.
c Var 'aux557' order represents '0' with '2955'
c Var 'aux557' direct represents '0' with '2955'
c Var 'aux557' order represents '1' with '2956'
-2955 2956 0
c Var 'aux557' direct represents '1' with '2957'
2955 -2956 2957 0
-2957 2956 0
-2957 -2955 0
c Var 'aux557' order represents '2' with '2958'
-2956 2958 0
c Var 'aux557' direct represents '2' with '2959'
2956 -2958 2959 0
-2959 2958 0
-2959 -2956 0
c Var 'aux557' order represents '3' with '2960'
-2958 2960 0
c Var 'aux557' direct represents '3' with '2961'
2958 -2960 2961 0
-2961 2960 0
-2961 -2958 0
c Var 'aux557' direct represents '4' with '-2960'
2955 2957 2959 2961 -2960 0
c Encoding variable: aux558 with domain: int(0..2) (representing constraint ((x_00003_00003=8) + (x_00005_00003=8)))
c Both direct and order encoding.
c Var 'aux558' order represents '0' with '2962'
c Var 'aux558' direct represents '0' with '2962'
c Var 'aux558' order represents '1' with '2963'
-2962 2963 0
c Var 'aux558' direct represents '1' with '2964'
2962 -2963 2964 0
-2964 2963 0
-2964 -2962 0
c Var 'aux558' direct represents '2' with '-2963'
2962 2964 -2963 0
c Encoding variable: aux559 with domain: int(0..2) (representing constraint ((x_00007_00003=8) + (x_00008_00003=8)))
c Both direct and order encoding.
c Var 'aux559' order represents '0' with '2965'
c Var 'aux559' direct represents '0' with '2965'
c Var 'aux559' order represents '1' with '2966'
-2965 2966 0
c Var 'aux559' direct represents '1' with '2967'
2965 -2966 2967 0
-2967 2966 0
-2967 -2965 0
c Var 'aux559' direct represents '2' with '-2966'
2965 2967 -2966 0
c Encoding variable: aux560 with domain: int(0..2) (representing constraint ((x_00002_00003=8) + (x_00006_00003=8)))
c Both direct and order encoding.
c Var 'aux560' order represents '0' with '2968'
c Var 'aux560' direct represents '0' with '2968'
c Var 'aux560' order represents '1' with '2969'
-2968 2969 0
c Var 'aux560' direct represents '1' with '2970'
2968 -2969 2970 0
-2970 2969 0
-2970 -2968 0
c Var 'aux560' direct represents '2' with '-2969'
2968 2970 -2969 0
c Encoding variable: aux561 with domain: int(0..2) (representing constraint ((x_00009_00003=8) + (x_00004_00003=8)))
c Both direct and order encoding.
c Var 'aux561' order represents '0' with '2971'
c Var 'aux561' direct represents '0' with '2971'
c Var 'aux561' order represents '1' with '2972'
-2971 2972 0
c Var 'aux561' direct represents '1' with '2973'
2971 -2972 2973 0
-2973 2972 0
-2973 -2971 0
c Var 'aux561' direct represents '2' with '-2972'
2971 2973 -2972 0
c Encoding variable: aux562 with domain: int(0..3) (representing constraint ((x_00001_00003=8) + aux561))
c Both direct and order encoding.
c Var 'aux562' order represents '0' with '2974'
c Var 'aux562' direct represents '0' with '2974'
c Var 'aux562' order represents '1' with '2975'
-2974 2975 0
c Var 'aux562' direct represents '1' with '2976'
2974 -2975 2976 0
-2976 2975 0
-2976 -2974 0
c Var 'aux562' order represents '2' with '2977'
-2975 2977 0
c Var 'aux562' direct represents '2' with '2978'
2975 -2977 2978 0
-2978 2977 0
-2978 -2975 0
c Var 'aux562' direct represents '3' with '-2977'
2974 2976 2978 -2977 0
c Encoding variable: aux563 with domain: int(0..4) (representing constraint (aux558 + aux560))
c Both direct and order encoding.
c Var 'aux563' order represents '0' with '2979'
c Var 'aux563' direct represents '0' with '2979'
c Var 'aux563' order represents '1' with '2980'
-2979 2980 0
c Var 'aux563' direct represents '1' with '2981'
2979 -2980 2981 0
-2981 2980 0
-2981 -2979 0
c Var 'aux563' order represents '2' with '2982'
-2980 2982 0
c Var 'aux563' direct represents '2' with '2983'
2980 -2982 2983 0
-2983 2982 0
-2983 -2980 0
c Var 'aux563' order represents '3' with '2984'
-2982 2984 0
c Var 'aux563' direct represents '3' with '2985'
2982 -2984 2985 0
-2985 2984 0
-2985 -2982 0
c Var 'aux563' direct represents '4' with '-2984'
2979 2981 2983 2985 -2984 0
c Encoding variable: aux564 with domain: int(0..2) (representing constraint ((x_00003_00003=9) + (x_00005_00003=9)))
c Both direct and order encoding.
c Var 'aux564' order represents '0' with '2986'
c Var 'aux564' direct represents '0' with '2986'
c Var 'aux564' order represents '1' with '2987'
-2986 2987 0
c Var 'aux564' direct represents '1' with '2988'
2986 -2987 2988 0
-2988 2987 0
-2988 -2986 0
c Var 'aux564' direct represents '2' with '-2987'
2986 2988 -2987 0
c Encoding variable: aux565 with domain: int(0..2) (representing constraint ((x_00007_00003=9) + (x_00008_00003=9)))
c Both direct and order encoding.
c Var 'aux565' order represents '0' with '2989'
c Var 'aux565' direct represents '0' with '2989'
c Var 'aux565' order represents '1' with '2990'
-2989 2990 0
c Var 'aux565' direct represents '1' with '2991'
2989 -2990 2991 0
-2991 2990 0
-2991 -2989 0
c Var 'aux565' direct represents '2' with '-2990'
2989 2991 -2990 0
c Encoding variable: aux566 with domain: int(0..2) (representing constraint ((x_00002_00003=9) + (x_00006_00003=9)))
c Both direct and order encoding.
c Var 'aux566' order represents '0' with '2992'
c Var 'aux566' direct represents '0' with '2992'
c Var 'aux566' order represents '1' with '2993'
-2992 2993 0
c Var 'aux566' direct represents '1' with '2994'
2992 -2993 2994 0
-2994 2993 0
-2994 -2992 0
c Var 'aux566' direct represents '2' with '-2993'
2992 2994 -2993 0
c Encoding variable: aux567 with domain: int(0..2) (representing constraint ((x_00009_00003=9) + (x_00004_00003=9)))
c Both direct and order encoding.
c Var 'aux567' order represents '0' with '2995'
c Var 'aux567' direct represents '0' with '2995'
c Var 'aux567' order represents '1' with '2996'
-2995 2996 0
c Var 'aux567' direct represents '1' with '2997'
2995 -2996 2997 0
-2997 2996 0
-2997 -2995 0
c Var 'aux567' direct represents '2' with '-2996'
2995 2997 -2996 0
c Encoding variable: aux568 with domain: int(0..3) (representing constraint ((x_00001_00003=9) + aux567))
c Both direct and order encoding.
c Var 'aux568' order represents '0' with '2998'
c Var 'aux568' direct represents '0' with '2998'
c Var 'aux568' order represents '1' with '2999'
-2998 2999 0
c Var 'aux568' direct represents '1' with '3000'
2998 -2999 3000 0
-3000 2999 0
-3000 -2998 0
c Var 'aux568' order represents '2' with '3001'
-2999 3001 0
c Var 'aux568' direct represents '2' with '3002'
2999 -3001 3002 0
-3002 3001 0
-3002 -2999 0
c Var 'aux568' direct represents '3' with '-3001'
2998 3000 3002 -3001 0
c Encoding variable: aux569 with domain: int(0..4) (representing constraint (aux564 + aux566))
c Both direct and order encoding.
c Var 'aux569' order represents '0' with '3003'
c Var 'aux569' direct represents '0' with '3003'
c Var 'aux569' order represents '1' with '3004'
-3003 3004 0
c Var 'aux569' direct represents '1' with '3005'
3003 -3004 3005 0
-3005 3004 0
-3005 -3003 0
c Var 'aux569' order represents '2' with '3006'
-3004 3006 0
c Var 'aux569' direct represents '2' with '3007'
3004 -3006 3007 0
-3007 3006 0
-3007 -3004 0
c Var 'aux569' order represents '3' with '3008'
-3006 3008 0
c Var 'aux569' direct represents '3' with '3009'
3006 -3008 3009 0
-3009 3008 0
-3009 -3006 0
c Var 'aux569' direct represents '4' with '-3008'
3003 3005 3007 3009 -3008 0
c Encoding variable: aux570 with domain: int(0..2) (representing constraint ((x_00003_00004=1) + (x_00005_00004=1)))
c Both direct and order encoding.
c Var 'aux570' order represents '0' with '3010'
c Var 'aux570' direct represents '0' with '3010'
c Var 'aux570' order represents '1' with '3011'
-3010 3011 0
c Var 'aux570' direct represents '1' with '3012'
3010 -3011 3012 0
-3012 3011 0
-3012 -3010 0
c Var 'aux570' direct represents '2' with '-3011'
3010 3012 -3011 0
c Encoding variable: aux571 with domain: int(0..2) (representing constraint ((x_00007_00004=1) + (x_00008_00004=1)))
c Both direct and order encoding.
c Var 'aux571' order represents '0' with '3013'
c Var 'aux571' direct represents '0' with '3013'
c Var 'aux571' order represents '1' with '3014'
-3013 3014 0
c Var 'aux571' direct represents '1' with '3015'
3013 -3014 3015 0
-3015 3014 0
-3015 -3013 0
c Var 'aux571' direct represents '2' with '-3014'
3013 3015 -3014 0
c Encoding variable: aux572 with domain: int(0..2) (representing constraint ((x_00002_00004=1) + (x_00006_00004=1)))
c Both direct and order encoding.
c Var 'aux572' order represents '0' with '3016'
c Var 'aux572' direct represents '0' with '3016'
c Var 'aux572' order represents '1' with '3017'
-3016 3017 0
c Var 'aux572' direct represents '1' with '3018'
3016 -3017 3018 0
-3018 3017 0
-3018 -3016 0
c Var 'aux572' direct represents '2' with '-3017'
3016 3018 -3017 0
c Encoding variable: aux573 with domain: int(0..2) (representing constraint ((x_00009_00004=1) + (x_00004_00004=1)))
c Both direct and order encoding.
c Var 'aux573' order represents '0' with '3019'
c Var 'aux573' direct represents '0' with '3019'
c Var 'aux573' order represents '1' with '3020'
-3019 3020 0
c Var 'aux573' direct represents '1' with '3021'
3019 -3020 3021 0
-3021 3020 0
-3021 -3019 0
c Var 'aux573' direct represents '2' with '-3020'
3019 3021 -3020 0
c Encoding variable: aux574 with domain: int(0..3) (representing constraint ((x_00001_00004=1) + aux573))
c Both direct and order encoding.
c Var 'aux574' order represents '0' with '3022'
c Var 'aux574' direct represents '0' with '3022'
c Var 'aux574' order represents '1' with '3023'
-3022 3023 0
c Var 'aux574' direct represents '1' with '3024'
3022 -3023 3024 0
-3024 3023 0
-3024 -3022 0
c Var 'aux574' order represents '2' with '3025'
-3023 3025 0
c Var 'aux574' direct represents '2' with '3026'
3023 -3025 3026 0
-3026 3025 0
-3026 -3023 0
c Var 'aux574' direct represents '3' with '-3025'
3022 3024 3026 -3025 0
c Encoding variable: aux575 with domain: int(0..4) (representing constraint (aux570 + aux572))
c Both direct and order encoding.
c Var 'aux575' order represents '0' with '3027'
c Var 'aux575' direct represents '0' with '3027'
c Var 'aux575' order represents '1' with '3028'
-3027 3028 0
c Var 'aux575' direct represents '1' with '3029'
3027 -3028 3029 0
-3029 3028 0
-3029 -3027 0
c Var 'aux575' order represents '2' with '3030'
-3028 3030 0
c Var 'aux575' direct represents '2' with '3031'
3028 -3030 3031 0
-3031 3030 0
-3031 -3028 0
c Var 'aux575' order represents '3' with '3032'
-3030 3032 0
c Var 'aux575' direct represents '3' with '3033'
3030 -3032 3033 0
-3033 3032 0
-3033 -3030 0
c Var 'aux575' direct represents '4' with '-3032'
3027 3029 3031 3033 -3032 0
c Encoding variable: aux576 with domain: int(0..2) (representing constraint ((x_00003_00004=2) + (x_00005_00004=2)))
c Both direct and order encoding.
c Var 'aux576' order represents '0' with '3034'
c Var 'aux576' direct represents '0' with '3034'
c Var 'aux576' order represents '1' with '3035'
-3034 3035 0
c Var 'aux576' direct represents '1' with '3036'
3034 -3035 3036 0
-3036 3035 0
-3036 -3034 0
c Var 'aux576' direct represents '2' with '-3035'
3034 3036 -3035 0
c Encoding variable: aux577 with domain: int(0..2) (representing constraint ((x_00007_00004=2) + (x_00008_00004=2)))
c Both direct and order encoding.
c Var 'aux577' order represents '0' with '3037'
c Var 'aux577' direct represents '0' with '3037'
c Var 'aux577' order represents '1' with '3038'
-3037 3038 0
c Var 'aux577' direct represents '1' with '3039'
3037 -3038 3039 0
-3039 3038 0
-3039 -3037 0
c Var 'aux577' direct represents '2' with '-3038'
3037 3039 -3038 0
c Encoding variable: aux578 with domain: int(0..2) (representing constraint ((x_00002_00004=2) + (x_00006_00004=2)))
c Both direct and order encoding.
c Var 'aux578' order represents '0' with '3040'
c Var 'aux578' direct represents '0' with '3040'
c Var 'aux578' order represents '1' with '3041'
-3040 3041 0
c Var 'aux578' direct represents '1' with '3042'
3040 -3041 3042 0
-3042 3041 0
-3042 -3040 0
c Var 'aux578' direct represents '2' with '-3041'
3040 3042 -3041 0
c Encoding variable: aux579 with domain: int(0..2) (representing constraint ((x_00009_00004=2) + (x_00004_00004=2)))
c Both direct and order encoding.
c Var 'aux579' order represents '0' with '3043'
c Var 'aux579' direct represents '0' with '3043'
c Var 'aux579' order represents '1' with '3044'
-3043 3044 0
c Var 'aux579' direct represents '1' with '3045'
3043 -3044 3045 0
-3045 3044 0
-3045 -3043 0
c Var 'aux579' direct represents '2' with '-3044'
3043 3045 -3044 0
c Encoding variable: aux580 with domain: int(0..3) (representing constraint ((x_00001_00004=2) + aux579))
c Both direct and order encoding.
c Var 'aux580' order represents '0' with '3046'
c Var 'aux580' direct represents '0' with '3046'
c Var 'aux580' order represents '1' with '3047'
-3046 3047 0
c Var 'aux580' direct represents '1' with '3048'
3046 -3047 3048 0
-3048 3047 0
-3048 -3046 0
c Var 'aux580' order represents '2' with '3049'
-3047 3049 0
c Var 'aux580' direct represents '2' with '3050'
3047 -3049 3050 0
-3050 3049 0
-3050 -3047 0
c Var 'aux580' direct represents '3' with '-3049'
3046 3048 3050 -3049 0
c Encoding variable: aux581 with domain: int(0..4) (representing constraint (aux576 + aux578))
c Both direct and order encoding.
c Var 'aux581' order represents '0' with '3051'
c Var 'aux581' direct represents '0' with '3051'
c Var 'aux581' order represents '1' with '3052'
-3051 3052 0
c Var 'aux581' direct represents '1' with '3053'
3051 -3052 3053 0
-3053 3052 0
-3053 -3051 0
c Var 'aux581' order represents '2' with '3054'
-3052 3054 0
c Var 'aux581' direct represents '2' with '3055'
3052 -3054 3055 0
-3055 3054 0
-3055 -3052 0
c Var 'aux581' order represents '3' with '3056'
-3054 3056 0
c Var 'aux581' direct represents '3' with '3057'
3054 -3056 3057 0
-3057 3056 0
-3057 -3054 0
c Var 'aux581' direct represents '4' with '-3056'
3051 3053 3055 3057 -3056 0
c Encoding variable: aux582 with domain: int(0..2) (representing constraint ((x_00003_00004=3) + (x_00005_00004=3)))
c Both direct and order encoding.
c Var 'aux582' order represents '0' with '3058'
c Var 'aux582' direct represents '0' with '3058'
c Var 'aux582' order represents '1' with '3059'
-3058 3059 0
c Var 'aux582' direct represents '1' with '3060'
3058 -3059 3060 0
-3060 3059 0
-3060 -3058 0
c Var 'aux582' direct represents '2' with '-3059'
3058 3060 -3059 0
c Encoding variable: aux583 with domain: int(0..2) (representing constraint ((x_00007_00004=3) + (x_00008_00004=3)))
c Both direct and order encoding.
c Var 'aux583' order represents '0' with '3061'
c Var 'aux583' direct represents '0' with '3061'
c Var 'aux583' order represents '1' with '3062'
-3061 3062 0
c Var 'aux583' direct represents '1' with '3063'
3061 -3062 3063 0
-3063 3062 0
-3063 -3061 0
c Var 'aux583' direct represents '2' with '-3062'
3061 3063 -3062 0
c Encoding variable: aux584 with domain: int(0..2) (representing constraint ((x_00002_00004=3) + (x_00006_00004=3)))
c Both direct and order encoding.
c Var 'aux584' order represents '0' with '3064'
c Var 'aux584' direct represents '0' with '3064'
c Var 'aux584' order represents '1' with '3065'
-3064 3065 0
c Var 'aux584' direct represents '1' with '3066'
3064 -3065 3066 0
-3066 3065 0
-3066 -3064 0
c Var 'aux584' direct represents '2' with '-3065'
3064 3066 -3065 0
c Encoding variable: aux585 with domain: int(0..2) (representing constraint ((x_00009_00004=3) + (x_00004_00004=3)))
c Both direct and order encoding.
c Var 'aux585' order represents '0' with '3067'
c Var 'aux585' direct represents '0' with '3067'
c Var 'aux585' order represents '1' with '3068'
-3067 3068 0
c Var 'aux585' direct represents '1' with '3069'
3067 -3068 3069 0
-3069 3068 0
-3069 -3067 0
c Var 'aux585' direct represents '2' with '-3068'
3067 3069 -3068 0
c Encoding variable: aux586 with domain: int(0..3) (representing constraint ((x_00001_00004=3) + aux585))
c Both direct and order encoding.
c Var 'aux586' order represents '0' with '3070'
c Var 'aux586' direct represents '0' with '3070'
c Var 'aux586' order represents '1' with '3071'
-3070 3071 0
c Var 'aux586' direct represents '1' with '3072'
3070 -3071 3072 0
-3072 3071 0
-3072 -3070 0
c Var 'aux586' order represents '2' with '3073'
-3071 3073 0
c Var 'aux586' direct represents '2' with '3074'
3071 -3073 3074 0
-3074 3073 0
-3074 -3071 0
c Var 'aux586' direct represents '3' with '-3073'
3070 3072 3074 -3073 0
c Encoding variable: aux587 with domain: int(0..4) (representing constraint (aux582 + aux584))
c Both direct and order encoding.
c Var 'aux587' order represents '0' with '3075'
c Var 'aux587' direct represents '0' with '3075'
c Var 'aux587' order represents '1' with '3076'
-3075 3076 0
c Var 'aux587' direct represents '1' with '3077'
3075 -3076 3077 0
-3077 3076 0
-3077 -3075 0
c Var 'aux587' order represents '2' with '3078'
-3076 3078 0
c Var 'aux587' direct represents '2' with '3079'
3076 -3078 3079 0
-3079 3078 0
-3079 -3076 0
c Var 'aux587' order represents '3' with '3080'
-3078 3080 0
c Var 'aux587' direct represents '3' with '3081'
3078 -3080 3081 0
-3081 3080 0
-3081 -3078 0
c Var 'aux587' direct represents '4' with '-3080'
3075 3077 3079 3081 -3080 0
c Encoding variable: aux588 with domain: int(0..2) (representing constraint ((x_00003_00004=4) + (x_00005_00004=4)))
c Both direct and order encoding.
c Var 'aux588' order represents '0' with '3082'
c Var 'aux588' direct represents '0' with '3082'
c Var 'aux588' order represents '1' with '3083'
-3082 3083 0
c Var 'aux588' direct represents '1' with '3084'
3082 -3083 3084 0
-3084 3083 0
-3084 -3082 0
c Var 'aux588' direct represents '2' with '-3083'
3082 3084 -3083 0
c Encoding variable: aux589 with domain: int(0..2) (representing constraint ((x_00007_00004=4) + (x_00008_00004=4)))
c Both direct and order encoding.
c Var 'aux589' order represents '0' with '3085'
c Var 'aux589' direct represents '0' with '3085'
c Var 'aux589' order represents '1' with '3086'
-3085 3086 0
c Var 'aux589' direct represents '1' with '3087'
3085 -3086 3087 0
-3087 3086 0
-3087 -3085 0
c Var 'aux589' direct represents '2' with '-3086'
3085 3087 -3086 0
c Encoding variable: aux590 with domain: int(0..2) (representing constraint ((x_00002_00004=4) + (x_00006_00004=4)))
c Both direct and order encoding.
c Var 'aux590' order represents '0' with '3088'
c Var 'aux590' direct represents '0' with '3088'
c Var 'aux590' order represents '1' with '3089'
-3088 3089 0
c Var 'aux590' direct represents '1' with '3090'
3088 -3089 3090 0
-3090 3089 0
-3090 -3088 0
c Var 'aux590' direct represents '2' with '-3089'
3088 3090 -3089 0
c Encoding variable: aux591 with domain: int(0..2) (representing constraint ((x_00009_00004=4) + (x_00004_00004=4)))
c Both direct and order encoding.
c Var 'aux591' order represents '0' with '3091'
c Var 'aux591' direct represents '0' with '3091'
c Var 'aux591' order represents '1' with '3092'
-3091 3092 0
c Var 'aux591' direct represents '1' with '3093'
3091 -3092 3093 0
-3093 3092 0
-3093 -3091 0
c Var 'aux591' direct represents '2' with '-3092'
3091 3093 -3092 0
c Encoding variable: aux592 with domain: int(0..3) (representing constraint ((x_00001_00004=4) + aux591))
c Both direct and order encoding.
c Var 'aux592' order represents '0' with '3094'
c Var 'aux592' direct represents '0' with '3094'
c Var 'aux592' order represents '1' with '3095'
-3094 3095 0
c Var 'aux592' direct represents '1' with '3096'
3094 -3095 3096 0
-3096 3095 0
-3096 -3094 0
c Var 'aux592' order represents '2' with '3097'
-3095 3097 0
c Var 'aux592' direct represents '2' with '3098'
3095 -3097 3098 0
-3098 3097 0
-3098 -3095 0
c Var 'aux592' direct represents '3' with '-3097'
3094 3096 3098 -3097 0
c Encoding variable: aux593 with domain: int(0..4) (representing constraint (aux588 + aux590))
c Both direct and order encoding.
c Var 'aux593' order represents '0' with '3099'
c Var 'aux593' direct represents '0' with '3099'
c Var 'aux593' order represents '1' with '3100'
-3099 3100 0
c Var 'aux593' direct represents '1' with '3101'
3099 -3100 3101 0
-3101 3100 0
-3101 -3099 0
c Var 'aux593' order represents '2' with '3102'
-3100 3102 0
c Var 'aux593' direct represents '2' with '3103'
3100 -3102 3103 0
-3103 3102 0
-3103 -3100 0
c Var 'aux593' order represents '3' with '3104'
-3102 3104 0
c Var 'aux593' direct represents '3' with '3105'
3102 -3104 3105 0
-3105 3104 0
-3105 -3102 0
c Var 'aux593' direct represents '4' with '-3104'
3099 3101 3103 3105 -3104 0
c Encoding variable: aux594 with domain: int(0..2) (representing constraint ((x_00003_00004=5) + (x_00005_00004=5)))
c Both direct and order encoding.
c Var 'aux594' order represents '0' with '3106'
c Var 'aux594' direct represents '0' with '3106'
c Var 'aux594' order represents '1' with '3107'
-3106 3107 0
c Var 'aux594' direct represents '1' with '3108'
3106 -3107 3108 0
-3108 3107 0
-3108 -3106 0
c Var 'aux594' direct represents '2' with '-3107'
3106 3108 -3107 0
c Encoding variable: aux595 with domain: int(0..2) (representing constraint ((x_00007_00004=5) + (x_00008_00004=5)))
c Both direct and order encoding.
c Var 'aux595' order represents '0' with '3109'
c Var 'aux595' direct represents '0' with '3109'
c Var 'aux595' order represents '1' with '3110'
-3109 3110 0
c Var 'aux595' direct represents '1' with '3111'
3109 -3110 3111 0
-3111 3110 0
-3111 -3109 0
c Var 'aux595' direct represents '2' with '-3110'
3109 3111 -3110 0
c Encoding variable: aux596 with domain: int(0..2) (representing constraint ((x_00002_00004=5) + (x_00006_00004=5)))
c Both direct and order encoding.
c Var 'aux596' order represents '0' with '3112'
c Var 'aux596' direct represents '0' with '3112'
c Var 'aux596' order represents '1' with '3113'
-3112 3113 0
c Var 'aux596' direct represents '1' with '3114'
3112 -3113 3114 0
-3114 3113 0
-3114 -3112 0
c Var 'aux596' direct represents '2' with '-3113'
3112 3114 -3113 0
c Encoding variable: aux597 with domain: int(0..2) (representing constraint ((x_00009_00004=5) + (x_00004_00004=5)))
c Both direct and order encoding.
c Var 'aux597' order represents '0' with '3115'
c Var 'aux597' direct represents '0' with '3115'
c Var 'aux597' order represents '1' with '3116'
-3115 3116 0
c Var 'aux597' direct represents '1' with '3117'
3115 -3116 3117 0
-3117 3116 0
-3117 -3115 0
c Var 'aux597' direct represents '2' with '-3116'
3115 3117 -3116 0
c Encoding variable: aux598 with domain: int(0..3) (representing constraint ((x_00001_00004=5) + aux597))
c Both direct and order encoding.
c Var 'aux598' order represents '0' with '3118'
c Var 'aux598' direct represents '0' with '3118'
c Var 'aux598' order represents '1' with '3119'
-3118 3119 0
c Var 'aux598' direct represents '1' with '3120'
3118 -3119 3120 0
-3120 3119 0
-3120 -3118 0
c Var 'aux598' order represents '2' with '3121'
-3119 3121 0
c Var 'aux598' direct represents '2' with '3122'
3119 -3121 3122 0
-3122 3121 0
-3122 -3119 0
c Var 'aux598' direct represents '3' with '-3121'
3118 3120 3122 -3121 0
c Encoding variable: aux599 with domain: int(0..4) (representing constraint (aux594 + aux596))
c Both direct and order encoding.
c Var 'aux599' order represents '0' with '3123'
c Var 'aux599' direct represents '0' with '3123'
c Var 'aux599' order represents '1' with '3124'
-3123 3124 0
c Var 'aux599' direct represents '1' with '3125'
3123 -3124 3125 0
-3125 3124 0
-3125 -3123 0
c Var 'aux599' order represents '2' with '3126'
-3124 3126 0
c Var 'aux599' direct represents '2' with '3127'
3124 -3126 3127 0
-3127 3126 0
-3127 -3124 0
c Var 'aux599' order represents '3' with '3128'
-3126 3128 0
c Var 'aux599' direct represents '3' with '3129'
3126 -3128 3129 0
-3129 3128 0
-3129 -3126 0
c Var 'aux599' direct represents '4' with '-3128'
3123 3125 3127 3129 -3128 0
c Encoding variable: aux600 with domain: int(0..2) (representing constraint ((x_00003_00004=6) + (x_00005_00004=6)))
c Both direct and order encoding.
c Var 'aux600' order represents '0' with '3130'
c Var 'aux600' direct represents '0' with '3130'
c Var 'aux600' order represents '1' with '3131'
-3130 3131 0
c Var 'aux600' direct represents '1' with '3132'
3130 -3131 3132 0
-3132 3131 0
-3132 -3130 0
c Var 'aux600' direct represents '2' with '-3131'
3130 3132 -3131 0
c Encoding variable: aux601 with domain: int(0..2) (representing constraint ((x_00007_00004=6) + (x_00008_00004=6)))
c Both direct and order encoding.
c Var 'aux601' order represents '0' with '3133'
c Var 'aux601' direct represents '0' with '3133'
c Var 'aux601' order represents '1' with '3134'
-3133 3134 0
c Var 'aux601' direct represents '1' with '3135'
3133 -3134 3135 0
-3135 3134 0
-3135 -3133 0
c Var 'aux601' direct represents '2' with '-3134'
3133 3135 -3134 0
c Encoding variable: aux602 with domain: int(0..2) (representing constraint ((x_00002_00004=6) + (x_00006_00004=6)))
c Both direct and order encoding.
c Var 'aux602' order represents '0' with '3136'
c Var 'aux602' direct represents '0' with '3136'
c Var 'aux602' order represents '1' with '3137'
-3136 3137 0
c Var 'aux602' direct represents '1' with '3138'
3136 -3137 3138 0
-3138 3137 0
-3138 -3136 0
c Var 'aux602' direct represents '2' with '-3137'
3136 3138 -3137 0
c Encoding variable: aux603 with domain: int(0..2) (representing constraint ((x_00009_00004=6) + (x_00004_00004=6)))
c Both direct and order encoding.
c Var 'aux603' order represents '0' with '3139'
c Var 'aux603' direct represents '0' with '3139'
c Var 'aux603' order represents '1' with '3140'
-3139 3140 0
c Var 'aux603' direct represents '1' with '3141'
3139 -3140 3141 0
-3141 3140 0
-3141 -3139 0
c Var 'aux603' direct represents '2' with '-3140'
3139 3141 -3140 0
c Encoding variable: aux604 with domain: int(0..3) (representing constraint ((x_00001_00004=6) + aux603))
c Both direct and order encoding.
c Var 'aux604' order represents '0' with '3142'
c Var 'aux604' direct represents '0' with '3142'
c Var 'aux604' order represents '1' with '3143'
-3142 3143 0
c Var 'aux604' direct represents '1' with '3144'
3142 -3143 3144 0
-3144 3143 0
-3144 -3142 0
c Var 'aux604' order represents '2' with '3145'
-3143 3145 0
c Var 'aux604' direct represents '2' with '3146'
3143 -3145 3146 0
-3146 3145 0
-3146 -3143 0
c Var 'aux604' direct represents '3' with '-3145'
3142 3144 3146 -3145 0
c Encoding variable: aux605 with domain: int(0..4) (representing constraint (aux600 + aux602))
c Both direct and order encoding.
c Var 'aux605' order represents '0' with '3147'
c Var 'aux605' direct represents '0' with '3147'
c Var 'aux605' order represents '1' with '3148'
-3147 3148 0
c Var 'aux605' direct represents '1' with '3149'
3147 -3148 3149 0
-3149 3148 0
-3149 -3147 0
c Var 'aux605' order represents '2' with '3150'
-3148 3150 0
c Var 'aux605' direct represents '2' with '3151'
3148 -3150 3151 0
-3151 3150 0
-3151 -3148 0
c Var 'aux605' order represents '3' with '3152'
-3150 3152 0
c Var 'aux605' direct represents '3' with '3153'
3150 -3152 3153 0
-3153 3152 0
-3153 -3150 0
c Var 'aux605' direct represents '4' with '-3152'
3147 3149 3151 3153 -3152 0
c Encoding variable: aux606 with domain: int(0..2) (representing constraint ((x_00003_00004=7) + (x_00005_00004=7)))
c Both direct and order encoding.
c Var 'aux606' order represents '0' with '3154'
c Var 'aux606' direct represents '0' with '3154'
c Var 'aux606' order represents '1' with '3155'
-3154 3155 0
c Var 'aux606' direct represents '1' with '3156'
3154 -3155 3156 0
-3156 3155 0
-3156 -3154 0
c Var 'aux606' direct represents '2' with '-3155'
3154 3156 -3155 0
c Encoding variable: aux607 with domain: int(0..2) (representing constraint ((x_00007_00004=7) + (x_00008_00004=7)))
c Both direct and order encoding.
c Var 'aux607' order represents '0' with '3157'
c Var 'aux607' direct represents '0' with '3157'
c Var 'aux607' order represents '1' with '3158'
-3157 3158 0
c Var 'aux607' direct represents '1' with '3159'
3157 -3158 3159 0
-3159 3158 0
-3159 -3157 0
c Var 'aux607' direct represents '2' with '-3158'
3157 3159 -3158 0
c Encoding variable: aux608 with domain: int(0..2) (representing constraint ((x_00002_00004=7) + (x_00006_00004=7)))
c Both direct and order encoding.
c Var 'aux608' order represents '0' with '3160'
c Var 'aux608' direct represents '0' with '3160'
c Var 'aux608' order represents '1' with '3161'
-3160 3161 0
c Var 'aux608' direct represents '1' with '3162'
3160 -3161 3162 0
-3162 3161 0
-3162 -3160 0
c Var 'aux608' direct represents '2' with '-3161'
3160 3162 -3161 0
c Encoding variable: aux609 with domain: int(0..2) (representing constraint ((x_00009_00004=7) + (x_00004_00004=7)))
c Both direct and order encoding.
c Var 'aux609' order represents '0' with '3163'
c Var 'aux609' direct represents '0' with '3163'
c Var 'aux609' order represents '1' with '3164'
-3163 3164 0
c Var 'aux609' direct represents '1' with '3165'
3163 -3164 3165 0
-3165 3164 0
-3165 -3163 0
c Var 'aux609' direct represents '2' with '-3164'
3163 3165 -3164 0
c Encoding variable: aux610 with domain: int(0..3) (representing constraint ((x_00001_00004=7) + aux609))
c Both direct and order encoding.
c Var 'aux610' order represents '0' with '3166'
c Var 'aux610' direct represents '0' with '3166'
c Var 'aux610' order represents '1' with '3167'
-3166 3167 0
c Var 'aux610' direct represents '1' with '3168'
3166 -3167 3168 0
-3168 3167 0
-3168 -3166 0
c Var 'aux610' order represents '2' with '3169'
-3167 3169 0
c Var 'aux610' direct represents '2' with '3170'
3167 -3169 3170 0
-3170 3169 0
-3170 -3167 0
c Var 'aux610' direct represents '3' with '-3169'
3166 3168 3170 -3169 0
c Encoding variable: aux611 with domain: int(0..4) (representing constraint (aux606 + aux608))
c Both direct and order encoding.
c Var 'aux611' order represents '0' with '3171'
c Var 'aux611' direct represents '0' with '3171'
c Var 'aux611' order represents '1' with '3172'
-3171 3172 0
c Var 'aux611' direct represents '1' with '3173'
3171 -3172 3173 0
-3173 3172 0
-3173 -3171 0
c Var 'aux611' order represents '2' with '3174'
-3172 3174 0
c Var 'aux611' direct represents '2' with '3175'
3172 -3174 3175 0
-3175 3174 0
-3175 -3172 0
c Var 'aux611' order represents '3' with '3176'
-3174 3176 0
c Var 'aux611' direct represents '3' with '3177'
3174 -3176 3177 0
-3177 3176 0
-3177 -3174 0
c Var 'aux611' direct represents '4' with '-3176'
3171 3173 3175 3177 -3176 0
c Encoding variable: aux612 with domain: int(0..2) (representing constraint ((x_00003_00004=8) + (x_00005_00004=8)))
c Both direct and order encoding.
c Var 'aux612' order represents '0' with '3178'
c Var 'aux612' direct represents '0' with '3178'
c Var 'aux612' order represents '1' with '3179'
-3178 3179 0
c Var 'aux612' direct represents '1' with '3180'
3178 -3179 3180 0
-3180 3179 0
-3180 -3178 0
c Var 'aux612' direct represents '2' with '-3179'
3178 3180 -3179 0
c Encoding variable: aux613 with domain: int(0..2) (representing constraint ((x_00007_00004=8) + (x_00008_00004=8)))
c Both direct and order encoding.
c Var 'aux613' order represents '0' with '3181'
c Var 'aux613' direct represents '0' with '3181'
c Var 'aux613' order represents '1' with '3182'
-3181 3182 0
c Var 'aux613' direct represents '1' with '3183'
3181 -3182 3183 0
-3183 3182 0
-3183 -3181 0
c Var 'aux613' direct represents '2' with '-3182'
3181 3183 -3182 0
c Encoding variable: aux614 with domain: int(0..2) (representing constraint ((x_00002_00004=8) + (x_00006_00004=8)))
c Both direct and order encoding.
c Var 'aux614' order represents '0' with '3184'
c Var 'aux614' direct represents '0' with '3184'
c Var 'aux614' order represents '1' with '3185'
-3184 3185 0
c Var 'aux614' direct represents '1' with '3186'
3184 -3185 3186 0
-3186 3185 0
-3186 -3184 0
c Var 'aux614' direct represents '2' with '-3185'
3184 3186 -3185 0
c Encoding variable: aux615 with domain: int(0..2) (representing constraint ((x_00009_00004=8) + (x_00004_00004=8)))
c Both direct and order encoding.
c Var 'aux615' order represents '0' with '3187'
c Var 'aux615' direct represents '0' with '3187'
c Var 'aux615' order represents '1' with '3188'
-3187 3188 0
c Var 'aux615' direct represents '1' with '3189'
3187 -3188 3189 0
-3189 3188 0
-3189 -3187 0
c Var 'aux615' direct represents '2' with '-3188'
3187 3189 -3188 0
c Encoding variable: aux616 with domain: int(0..3) (representing constraint ((x_00001_00004=8) + aux615))
c Both direct and order encoding.
c Var 'aux616' order represents '0' with '3190'
c Var 'aux616' direct represents '0' with '3190'
c Var 'aux616' order represents '1' with '3191'
-3190 3191 0
c Var 'aux616' direct represents '1' with '3192'
3190 -3191 3192 0
-3192 3191 0
-3192 -3190 0
c Var 'aux616' order represents '2' with '3193'
-3191 3193 0
c Var 'aux616' direct represents '2' with '3194'
3191 -3193 3194 0
-3194 3193 0
-3194 -3191 0
c Var 'aux616' direct represents '3' with '-3193'
3190 3192 3194 -3193 0
c Encoding variable: aux617 with domain: int(0..4) (representing constraint (aux612 + aux614))
c Both direct and order encoding.
c Var 'aux617' order represents '0' with '3195'
c Var 'aux617' direct represents '0' with '3195'
c Var 'aux617' order represents '1' with '3196'
-3195 3196 0
c Var 'aux617' direct represents '1' with '3197'
3195 -3196 3197 0
-3197 3196 0
-3197 -3195 0
c Var 'aux617' order represents '2' with '3198'
-3196 3198 0
c Var 'aux617' direct represents '2' with '3199'
3196 -3198 3199 0
-3199 3198 0
-3199 -3196 0
c Var 'aux617' order represents '3' with '3200'
-3198 3200 0
c Var 'aux617' direct represents '3' with '3201'
3198 -3200 3201 0
-3201 3200 0
-3201 -3198 0
c Var 'aux617' direct represents '4' with '-3200'
3195 3197 3199 3201 -3200 0
c Encoding variable: aux618 with domain: int(0..2) (representing constraint ((x_00003_00004=9) + (x_00005_00004=9)))
c Both direct and order encoding.
c Var 'aux618' order represents '0' with '3202'
c Var 'aux618' direct represents '0' with '3202'
c Var 'aux618' order represents '1' with '3203'
-3202 3203 0
c Var 'aux618' direct represents '1' with '3204'
3202 -3203 3204 0
-3204 3203 0
-3204 -3202 0
c Var 'aux618' direct represents '2' with '-3203'
3202 3204 -3203 0
c Encoding variable: aux619 with domain: int(0..2) (representing constraint ((x_00007_00004=9) + (x_00008_00004=9)))
c Both direct and order encoding.
c Var 'aux619' order represents '0' with '3205'
c Var 'aux619' direct represents '0' with '3205'
c Var 'aux619' order represents '1' with '3206'
-3205 3206 0
c Var 'aux619' direct represents '1' with '3207'
3205 -3206 3207 0
-3207 3206 0
-3207 -3205 0
c Var 'aux619' direct represents '2' with '-3206'
3205 3207 -3206 0
c Encoding variable: aux620 with domain: int(0..2) (representing constraint ((x_00002_00004=9) + (x_00006_00004=9)))
c Both direct and order encoding.
c Var 'aux620' order represents '0' with '3208'
c Var 'aux620' direct represents '0' with '3208'
c Var 'aux620' order represents '1' with '3209'
-3208 3209 0
c Var 'aux620' direct represents '1' with '3210'
3208 -3209 3210 0
-3210 3209 0
-3210 -3208 0
c Var 'aux620' direct represents '2' with '-3209'
3208 3210 -3209 0
c Encoding variable: aux621 with domain: int(0..2) (representing constraint ((x_00009_00004=9) + (x_00004_00004=9)))
c Both direct and order encoding.
c Var 'aux621' order represents '0' with '3211'
c Var 'aux621' direct represents '0' with '3211'
c Var 'aux621' order represents '1' with '3212'
-3211 3212 0
c Var 'aux621' direct represents '1' with '3213'
3211 -3212 3213 0
-3213 3212 0
-3213 -3211 0
c Var 'aux621' direct represents '2' with '-3212'
3211 3213 -3212 0
c Encoding variable: aux622 with domain: int(0..3) (representing constraint ((x_00001_00004=9) + aux621))
c Both direct and order encoding.
c Var 'aux622' order represents '0' with '3214'
c Var 'aux622' direct represents '0' with '3214'
c Var 'aux622' order represents '1' with '3215'
-3214 3215 0
c Var 'aux622' direct represents '1' with '3216'
3214 -3215 3216 0
-3216 3215 0
-3216 -3214 0
c Var 'aux622' order represents '2' with '3217'
-3215 3217 0
c Var 'aux622' direct represents '2' with '3218'
3215 -3217 3218 0
-3218 3217 0
-3218 -3215 0
c Var 'aux622' direct represents '3' with '-3217'
3214 3216 3218 -3217 0
c Encoding variable: aux623 with domain: int(0..4) (representing constraint (aux618 + aux620))
c Both direct and order encoding.
c Var 'aux623' order represents '0' with '3219'
c Var 'aux623' direct represents '0' with '3219'
c Var 'aux623' order represents '1' with '3220'
-3219 3220 0
c Var 'aux623' direct represents '1' with '3221'
3219 -3220 3221 0
-3221 3220 0
-3221 -3219 0
c Var 'aux623' order represents '2' with '3222'
-3220 3222 0
c Var 'aux623' direct represents '2' with '3223'
3220 -3222 3223 0
-3223 3222 0
-3223 -3220 0
c Var 'aux623' order represents '3' with '3224'
-3222 3224 0
c Var 'aux623' direct represents '3' with '3225'
3222 -3224 3225 0
-3225 3224 0
-3225 -3222 0
c Var 'aux623' direct represents '4' with '-3224'
3219 3221 3223 3225 -3224 0
c Encoding variable: aux624 with domain: int(0..2) (representing constraint ((x_00003_00005=1) + (x_00005_00005=1)))
c Both direct and order encoding.
c Var 'aux624' order represents '0' with '3226'
c Var 'aux624' direct represents '0' with '3226'
c Var 'aux624' order represents '1' with '3227'
-3226 3227 0
c Var 'aux624' direct represents '1' with '3228'
3226 -3227 3228 0
-3228 3227 0
-3228 -3226 0
c Var 'aux624' direct represents '2' with '-3227'
3226 3228 -3227 0
c Encoding variable: aux625 with domain: int(0..2) (representing constraint ((x_00007_00005=1) + (x_00008_00005=1)))
c Both direct and order encoding.
c Var 'aux625' order represents '0' with '3229'
c Var 'aux625' direct represents '0' with '3229'
c Var 'aux625' order represents '1' with '3230'
-3229 3230 0
c Var 'aux625' direct represents '1' with '3231'
3229 -3230 3231 0
-3231 3230 0
-3231 -3229 0
c Var 'aux625' direct represents '2' with '-3230'
3229 3231 -3230 0
c Encoding variable: aux626 with domain: int(0..2) (representing constraint ((x_00002_00005=1) + (x_00006_00005=1)))
c Both direct and order encoding.
c Var 'aux626' order represents '0' with '3232'
c Var 'aux626' direct represents '0' with '3232'
c Var 'aux626' order represents '1' with '3233'
-3232 3233 0
c Var 'aux626' direct represents '1' with '3234'
3232 -3233 3234 0
-3234 3233 0
-3234 -3232 0
c Var 'aux626' direct represents '2' with '-3233'
3232 3234 -3233 0
c Encoding variable: aux627 with domain: int(0..2) (representing constraint ((x_00009_00005=1) + (x_00004_00005=1)))
c Both direct and order encoding.
c Var 'aux627' order represents '0' with '3235'
c Var 'aux627' direct represents '0' with '3235'
c Var 'aux627' order represents '1' with '3236'
-3235 3236 0
c Var 'aux627' direct represents '1' with '3237'
3235 -3236 3237 0
-3237 3236 0
-3237 -3235 0
c Var 'aux627' direct represents '2' with '-3236'
3235 3237 -3236 0
c Encoding variable: aux628 with domain: int(0..3) (representing constraint ((x_00001_00005=1) + aux627))
c Both direct and order encoding.
c Var 'aux628' order represents '0' with '3238'
c Var 'aux628' direct represents '0' with '3238'
c Var 'aux628' order represents '1' with '3239'
-3238 3239 0
c Var 'aux628' direct represents '1' with '3240'
3238 -3239 3240 0
-3240 3239 0
-3240 -3238 0
c Var 'aux628' order represents '2' with '3241'
-3239 3241 0
c Var 'aux628' direct represents '2' with '3242'
3239 -3241 3242 0
-3242 3241 0
-3242 -3239 0
c Var 'aux628' direct represents '3' with '-3241'
3238 3240 3242 -3241 0
c Encoding variable: aux629 with domain: int(0..4) (representing constraint (aux624 + aux626))
c Both direct and order encoding.
c Var 'aux629' order represents '0' with '3243'
c Var 'aux629' direct represents '0' with '3243'
c Var 'aux629' order represents '1' with '3244'
-3243 3244 0
c Var 'aux629' direct represents '1' with '3245'
3243 -3244 3245 0
-3245 3244 0
-3245 -3243 0
c Var 'aux629' order represents '2' with '3246'
-3244 3246 0
c Var 'aux629' direct represents '2' with '3247'
3244 -3246 3247 0
-3247 3246 0
-3247 -3244 0
c Var 'aux629' order represents '3' with '3248'
-3246 3248 0
c Var 'aux629' direct represents '3' with '3249'
3246 -3248 3249 0
-3249 3248 0
-3249 -3246 0
c Var 'aux629' direct represents '4' with '-3248'
3243 3245 3247 3249 -3248 0
c Encoding variable: aux630 with domain: int(0..2) (representing constraint ((x_00003_00005=2) + (x_00005_00005=2)))
c Both direct and order encoding.
c Var 'aux630' order represents '0' with '3250'
c Var 'aux630' direct represents '0' with '3250'
c Var 'aux630' order represents '1' with '3251'
-3250 3251 0
c Var 'aux630' direct represents '1' with '3252'
3250 -3251 3252 0
-3252 3251 0
-3252 -3250 0
c Var 'aux630' direct represents '2' with '-3251'
3250 3252 -3251 0
c Encoding variable: aux631 with domain: int(0..2) (representing constraint ((x_00007_00005=2) + (x_00008_00005=2)))
c Both direct and order encoding.
c Var 'aux631' order represents '0' with '3253'
c Var 'aux631' direct represents '0' with '3253'
c Var 'aux631' order represents '1' with '3254'
-3253 3254 0
c Var 'aux631' direct represents '1' with '3255'
3253 -3254 3255 0
-3255 3254 0
-3255 -3253 0
c Var 'aux631' direct represents '2' with '-3254'
3253 3255 -3254 0
c Encoding variable: aux632 with domain: int(0..2) (representing constraint ((x_00002_00005=2) + (x_00006_00005=2)))
c Both direct and order encoding.
c Var 'aux632' order represents '0' with '3256'
c Var 'aux632' direct represents '0' with '3256'
c Var 'aux632' order represents '1' with '3257'
-3256 3257 0
c Var 'aux632' direct represents '1' with '3258'
3256 -3257 3258 0
-3258 3257 0
-3258 -3256 0
c Var 'aux632' direct represents '2' with '-3257'
3256 3258 -3257 0
c Encoding variable: aux633 with domain: int(0..2) (representing constraint ((x_00009_00005=2) + (x_00004_00005=2)))
c Both direct and order encoding.
c Var 'aux633' order represents '0' with '3259'
c Var 'aux633' direct represents '0' with '3259'
c Var 'aux633' order represents '1' with '3260'
-3259 3260 0
c Var 'aux633' direct represents '1' with '3261'
3259 -3260 3261 0
-3261 3260 0
-3261 -3259 0
c Var 'aux633' direct represents '2' with '-3260'
3259 3261 -3260 0
c Encoding variable: aux634 with domain: int(0..3) (representing constraint ((x_00001_00005=2) + aux633))
c Both direct and order encoding.
c Var 'aux634' order represents '0' with '3262'
c Var 'aux634' direct represents '0' with '3262'
c Var 'aux634' order represents '1' with '3263'
-3262 3263 0
c Var 'aux634' direct represents '1' with '3264'
3262 -3263 3264 0
-3264 3263 0
-3264 -3262 0
c Var 'aux634' order represents '2' with '3265'
-3263 3265 0
c Var 'aux634' direct represents '2' with '3266'
3263 -3265 3266 0
-3266 3265 0
-3266 -3263 0
c Var 'aux634' direct represents '3' with '-3265'
3262 3264 3266 -3265 0
c Encoding variable: aux635 with domain: int(0..4) (representing constraint (aux630 + aux632))
c Both direct and order encoding.
c Var 'aux635' order represents '0' with '3267'
c Var 'aux635' direct represents '0' with '3267'
c Var 'aux635' order represents '1' with '3268'
-3267 3268 0
c Var 'aux635' direct represents '1' with '3269'
3267 -3268 3269 0
-3269 3268 0
-3269 -3267 0
c Var 'aux635' order represents '2' with '3270'
-3268 3270 0
c Var 'aux635' direct represents '2' with '3271'
3268 -3270 3271 0
-3271 3270 0
-3271 -3268 0
c Var 'aux635' order represents '3' with '3272'
-3270 3272 0
c Var 'aux635' direct represents '3' with '3273'
3270 -3272 3273 0
-3273 3272 0
-3273 -3270 0
c Var 'aux635' direct represents '4' with '-3272'
3267 3269 3271 3273 -3272 0
c Encoding variable: aux636 with domain: int(0..2) (representing constraint ((x_00003_00005=3) + (x_00005_00005=3)))
c Both direct and order encoding.
c Var 'aux636' order represents '0' with '3274'
c Var 'aux636' direct represents '0' with '3274'
c Var 'aux636' order represents '1' with '3275'
-3274 3275 0
c Var 'aux636' direct represents '1' with '3276'
3274 -3275 3276 0
-3276 3275 0
-3276 -3274 0
c Var 'aux636' direct represents '2' with '-3275'
3274 3276 -3275 0
c Encoding variable: aux637 with domain: int(0..2) (representing constraint ((x_00007_00005=3) + (x_00008_00005=3)))
c Both direct and order encoding.
c Var 'aux637' order represents '0' with '3277'
c Var 'aux637' direct represents '0' with '3277'
c Var 'aux637' order represents '1' with '3278'
-3277 3278 0
c Var 'aux637' direct represents '1' with '3279'
3277 -3278 3279 0
-3279 3278 0
-3279 -3277 0
c Var 'aux637' direct represents '2' with '-3278'
3277 3279 -3278 0
c Encoding variable: aux638 with domain: int(0..2) (representing constraint ((x_00002_00005=3) + (x_00006_00005=3)))
c Both direct and order encoding.
c Var 'aux638' order represents '0' with '3280'
c Var 'aux638' direct represents '0' with '3280'
c Var 'aux638' order represents '1' with '3281'
-3280 3281 0
c Var 'aux638' direct represents '1' with '3282'
3280 -3281 3282 0
-3282 3281 0
-3282 -3280 0
c Var 'aux638' direct represents '2' with '-3281'
3280 3282 -3281 0
c Encoding variable: aux639 with domain: int(0..2) (representing constraint ((x_00009_00005=3) + (x_00004_00005=3)))
c Both direct and order encoding.
c Var 'aux639' order represents '0' with '3283'
c Var 'aux639' direct represents '0' with '3283'
c Var 'aux639' order represents '1' with '3284'
-3283 3284 0
c Var 'aux639' direct represents '1' with '3285'
3283 -3284 3285 0
-3285 3284 0
-3285 -3283 0
c Var 'aux639' direct represents '2' with '-3284'
3283 3285 -3284 0
c Encoding variable: aux640 with domain: int(0..3) (representing constraint ((x_00001_00005=3) + aux639))
c Both direct and order encoding.
c Var 'aux640' order represents '0' with '3286'
c Var 'aux640' direct represents '0' with '3286'
c Var 'aux640' order represents '1' with '3287'
-3286 3287 0
c Var 'aux640' direct represents '1' with '3288'
3286 -3287 3288 0
-3288 3287 0
-3288 -3286 0
c Var 'aux640' order represents '2' with '3289'
-3287 3289 0
c Var 'aux640' direct represents '2' with '3290'
3287 -3289 3290 0
-3290 3289 0
-3290 -3287 0
c Var 'aux640' direct represents '3' with '-3289'
3286 3288 3290 -3289 0
c Encoding variable: aux641 with domain: int(0..4) (representing constraint (aux636 + aux638))
c Both direct and order encoding.
c Var 'aux641' order represents '0' with '3291'
c Var 'aux641' direct represents '0' with '3291'
c Var 'aux641' order represents '1' with '3292'
-3291 3292 0
c Var 'aux641' direct represents '1' with '3293'
3291 -3292 3293 0
-3293 3292 0
-3293 -3291 0
c Var 'aux641' order represents '2' with '3294'
-3292 3294 0
c Var 'aux641' direct represents '2' with '3295'
3292 -3294 3295 0
-3295 3294 0
-3295 -3292 0
c Var 'aux641' order represents '3' with '3296'
-3294 3296 0
c Var 'aux641' direct represents '3' with '3297'
3294 -3296 3297 0
-3297 3296 0
-3297 -3294 0
c Var 'aux641' direct represents '4' with '-3296'
3291 3293 3295 3297 -3296 0
c Encoding variable: aux642 with domain: int(0..2) (representing constraint ((x_00003_00005=4) + (x_00005_00005=4)))
c Both direct and order encoding.
c Var 'aux642' order represents '0' with '3298'
c Var 'aux642' direct represents '0' with '3298'
c Var 'aux642' order represents '1' with '3299'
-3298 3299 0
c Var 'aux642' direct represents '1' with '3300'
3298 -3299 3300 0
-3300 3299 0
-3300 -3298 0
c Var 'aux642' direct represents '2' with '-3299'
3298 3300 -3299 0
c Encoding variable: aux643 with domain: int(0..2) (representing constraint ((x_00007_00005=4) + (x_00008_00005=4)))
c Both direct and order encoding.
c Var 'aux643' order represents '0' with '3301'
c Var 'aux643' direct represents '0' with '3301'
c Var 'aux643' order represents '1' with '3302'
-3301 3302 0
c Var 'aux643' direct represents '1' with '3303'
3301 -3302 3303 0
-3303 3302 0
-3303 -3301 0
c Var 'aux643' direct represents '2' with '-3302'
3301 3303 -3302 0
c Encoding variable: aux644 with domain: int(0..2) (representing constraint ((x_00002_00005=4) + (x_00006_00005=4)))
c Both direct and order encoding.
c Var 'aux644' order represents '0' with '3304'
c Var 'aux644' direct represents '0' with '3304'
c Var 'aux644' order represents '1' with '3305'
-3304 3305 0
c Var 'aux644' direct represents '1' with '3306'
3304 -3305 3306 0
-3306 3305 0
-3306 -3304 0
c Var 'aux644' direct represents '2' with '-3305'
3304 3306 -3305 0
c Encoding variable: aux645 with domain: int(0..2) (representing constraint ((x_00009_00005=4) + (x_00004_00005=4)))
c Both direct and order encoding.
c Var 'aux645' order represents '0' with '3307'
c Var 'aux645' direct represents '0' with '3307'
c Var 'aux645' order represents '1' with '3308'
-3307 3308 0
c Var 'aux645' direct represents '1' with '3309'
3307 -3308 3309 0
-3309 3308 0
-3309 -3307 0
c Var 'aux645' direct represents '2' with '-3308'
3307 3309 -3308 0
c Encoding variable: aux646 with domain: int(0..3) (representing constraint ((x_00001_00005=4) + aux645))
c Both direct and order encoding.
c Var 'aux646' order represents '0' with '3310'
c Var 'aux646' direct represents '0' with '3310'
c Var 'aux646' order represents '1' with '3311'
-3310 3311 0
c Var 'aux646' direct represents '1' with '3312'
3310 -3311 3312 0
-3312 3311 0
-3312 -3310 0
c Var 'aux646' order represents '2' with '3313'
-3311 3313 0
c Var 'aux646' direct represents '2' with '3314'
3311 -3313 3314 0
-3314 3313 0
-3314 -3311 0
c Var 'aux646' direct represents '3' with '-3313'
3310 3312 3314 -3313 0
c Encoding variable: aux647 with domain: int(0..4) (representing constraint (aux642 + aux644))
c Both direct and order encoding.
c Var 'aux647' order represents '0' with '3315'
c Var 'aux647' direct represents '0' with '3315'
c Var 'aux647' order represents '1' with '3316'
-3315 3316 0
c Var 'aux647' direct represents '1' with '3317'
3315 -3316 3317 0
-3317 3316 0
-3317 -3315 0
c Var 'aux647' order represents '2' with '3318'
-3316 3318 0
c Var 'aux647' direct represents '2' with '3319'
3316 -3318 3319 0
-3319 3318 0
-3319 -3316 0
c Var 'aux647' order represents '3' with '3320'
-3318 3320 0
c Var 'aux647' direct represents '3' with '3321'
3318 -3320 3321 0
-3321 3320 0
-3321 -3318 0
c Var 'aux647' direct represents '4' with '-3320'
3315 3317 3319 3321 -3320 0
c Encoding variable: aux648 with domain: int(0..2) (representing constraint ((x_00003_00005=5) + (x_00005_00005=5)))
c Both direct and order encoding.
c Var 'aux648' order represents '0' with '3322'
c Var 'aux648' direct represents '0' with '3322'
c Var 'aux648' order represents '1' with '3323'
-3322 3323 0
c Var 'aux648' direct represents '1' with '3324'
3322 -3323 3324 0
-3324 3323 0
-3324 -3322 0
c Var 'aux648' direct represents '2' with '-3323'
3322 3324 -3323 0
c Encoding variable: aux649 with domain: int(0..2) (representing constraint ((x_00007_00005=5) + (x_00008_00005=5)))
c Both direct and order encoding.
c Var 'aux649' order represents '0' with '3325'
c Var 'aux649' direct represents '0' with '3325'
c Var 'aux649' order represents '1' with '3326'
-3325 3326 0
c Var 'aux649' direct represents '1' with '3327'
3325 -3326 3327 0
-3327 3326 0
-3327 -3325 0
c Var 'aux649' direct represents '2' with '-3326'
3325 3327 -3326 0
c Encoding variable: aux650 with domain: int(0..2) (representing constraint ((x_00002_00005=5) + (x_00006_00005=5)))
c Both direct and order encoding.
c Var 'aux650' order represents '0' with '3328'
c Var 'aux650' direct represents '0' with '3328'
c Var 'aux650' order represents '1' with '3329'
-3328 3329 0
c Var 'aux650' direct represents '1' with '3330'
3328 -3329 3330 0
-3330 3329 0
-3330 -3328 0
c Var 'aux650' direct represents '2' with '-3329'
3328 3330 -3329 0
c Encoding variable: aux651 with domain: int(0..2) (representing constraint ((x_00009_00005=5) + (x_00004_00005=5)))
c Both direct and order encoding.
c Var 'aux651' order represents '0' with '3331'
c Var 'aux651' direct represents '0' with '3331'
c Var 'aux651' order represents '1' with '3332'
-3331 3332 0
c Var 'aux651' direct represents '1' with '3333'
3331 -3332 3333 0
-3333 3332 0
-3333 -3331 0
c Var 'aux651' direct represents '2' with '-3332'
3331 3333 -3332 0
c Encoding variable: aux652 with domain: int(0..3) (representing constraint ((x_00001_00005=5) + aux651))
c Both direct and order encoding.
c Var 'aux652' order represents '0' with '3334'
c Var 'aux652' direct represents '0' with '3334'
c Var 'aux652' order represents '1' with '3335'
-3334 3335 0
c Var 'aux652' direct represents '1' with '3336'
3334 -3335 3336 0
-3336 3335 0
-3336 -3334 0
c Var 'aux652' order represents '2' with '3337'
-3335 3337 0
c Var 'aux652' direct represents '2' with '3338'
3335 -3337 3338 0
-3338 3337 0
-3338 -3335 0
c Var 'aux652' direct represents '3' with '-3337'
3334 3336 3338 -3337 0
c Encoding variable: aux653 with domain: int(0..4) (representing constraint (aux648 + aux650))
c Both direct and order encoding.
c Var 'aux653' order represents '0' with '3339'
c Var 'aux653' direct represents '0' with '3339'
c Var 'aux653' order represents '1' with '3340'
-3339 3340 0
c Var 'aux653' direct represents '1' with '3341'
3339 -3340 3341 0
-3341 3340 0
-3341 -3339 0
c Var 'aux653' order represents '2' with '3342'
-3340 3342 0
c Var 'aux653' direct represents '2' with '3343'
3340 -3342 3343 0
-3343 3342 0
-3343 -3340 0
c Var 'aux653' order represents '3' with '3344'
-3342 3344 0
c Var 'aux653' direct represents '3' with '3345'
3342 -3344 3345 0
-3345 3344 0
-3345 -3342 0
c Var 'aux653' direct represents '4' with '-3344'
3339 3341 3343 3345 -3344 0
c Encoding variable: aux654 with domain: int(0..2) (representing constraint ((x_00003_00005=6) + (x_00005_00005=6)))
c Both direct and order encoding.
c Var 'aux654' order represents '0' with '3346'
c Var 'aux654' direct represents '0' with '3346'
c Var 'aux654' order represents '1' with '3347'
-3346 3347 0
c Var 'aux654' direct represents '1' with '3348'
3346 -3347 3348 0
-3348 3347 0
-3348 -3346 0
c Var 'aux654' direct represents '2' with '-3347'
3346 3348 -3347 0
c Encoding variable: aux655 with domain: int(0..2) (representing constraint ((x_00007_00005=6) + (x_00008_00005=6)))
c Both direct and order encoding.
c Var 'aux655' order represents '0' with '3349'
c Var 'aux655' direct represents '0' with '3349'
c Var 'aux655' order represents '1' with '3350'
-3349 3350 0
c Var 'aux655' direct represents '1' with '3351'
3349 -3350 3351 0
-3351 3350 0
-3351 -3349 0
c Var 'aux655' direct represents '2' with '-3350'
3349 3351 -3350 0
c Encoding variable: aux656 with domain: int(0..2) (representing constraint ((x_00002_00005=6) + (x_00006_00005=6)))
c Both direct and order encoding.
c Var 'aux656' order represents '0' with '3352'
c Var 'aux656' direct represents '0' with '3352'
c Var 'aux656' order represents '1' with '3353'
-3352 3353 0
c Var 'aux656' direct represents '1' with '3354'
3352 -3353 3354 0
-3354 3353 0
-3354 -3352 0
c Var 'aux656' direct represents '2' with '-3353'
3352 3354 -3353 0
c Encoding variable: aux657 with domain: int(0..2) (representing constraint ((x_00009_00005=6) + (x_00004_00005=6)))
c Both direct and order encoding.
c Var 'aux657' order represents '0' with '3355'
c Var 'aux657' direct represents '0' with '3355'
c Var 'aux657' order represents '1' with '3356'
-3355 3356 0
c Var 'aux657' direct represents '1' with '3357'
3355 -3356 3357 0
-3357 3356 0
-3357 -3355 0
c Var 'aux657' direct represents '2' with '-3356'
3355 3357 -3356 0
c Encoding variable: aux658 with domain: int(0..3) (representing constraint ((x_00001_00005=6) + aux657))
c Both direct and order encoding.
c Var 'aux658' order represents '0' with '3358'
c Var 'aux658' direct represents '0' with '3358'
c Var 'aux658' order represents '1' with '3359'
-3358 3359 0
c Var 'aux658' direct represents '1' with '3360'
3358 -3359 3360 0
-3360 3359 0
-3360 -3358 0
c Var 'aux658' order represents '2' with '3361'
-3359 3361 0
c Var 'aux658' direct represents '2' with '3362'
3359 -3361 3362 0
-3362 3361 0
-3362 -3359 0
c Var 'aux658' direct represents '3' with '-3361'
3358 3360 3362 -3361 0
c Encoding variable: aux659 with domain: int(0..4) (representing constraint (aux654 + aux656))
c Both direct and order encoding.
c Var 'aux659' order represents '0' with '3363'
c Var 'aux659' direct represents '0' with '3363'
c Var 'aux659' order represents '1' with '3364'
-3363 3364 0
c Var 'aux659' direct represents '1' with '3365'
3363 -3364 3365 0
-3365 3364 0
-3365 -3363 0
c Var 'aux659' order represents '2' with '3366'
-3364 3366 0
c Var 'aux659' direct represents '2' with '3367'
3364 -3366 3367 0
-3367 3366 0
-3367 -3364 0
c Var 'aux659' order represents '3' with '3368'
-3366 3368 0
c Var 'aux659' direct represents '3' with '3369'
3366 -3368 3369 0
-3369 3368 0
-3369 -3366 0
c Var 'aux659' direct represents '4' with '-3368'
3363 3365 3367 3369 -3368 0
c Encoding variable: aux660 with domain: int(0..2) (representing constraint ((x_00003_00005=7) + (x_00005_00005=7)))
c Both direct and order encoding.
c Var 'aux660' order represents '0' with '3370'
c Var 'aux660' direct represents '0' with '3370'
c Var 'aux660' order represents '1' with '3371'
-3370 3371 0
c Var 'aux660' direct represents '1' with '3372'
3370 -3371 3372 0
-3372 3371 0
-3372 -3370 0
c Var 'aux660' direct represents '2' with '-3371'
3370 3372 -3371 0
c Encoding variable: aux661 with domain: int(0..2) (representing constraint ((x_00007_00005=7) + (x_00008_00005=7)))
c Both direct and order encoding.
c Var 'aux661' order represents '0' with '3373'
c Var 'aux661' direct represents '0' with '3373'
c Var 'aux661' order represents '1' with '3374'
-3373 3374 0
c Var 'aux661' direct represents '1' with '3375'
3373 -3374 3375 0
-3375 3374 0
-3375 -3373 0
c Var 'aux661' direct represents '2' with '-3374'
3373 3375 -3374 0
c Encoding variable: aux662 with domain: int(0..2) (representing constraint ((x_00002_00005=7) + (x_00006_00005=7)))
c Both direct and order encoding.
c Var 'aux662' order represents '0' with '3376'
c Var 'aux662' direct represents '0' with '3376'
c Var 'aux662' order represents '1' with '3377'
-3376 3377 0
c Var 'aux662' direct represents '1' with '3378'
3376 -3377 3378 0
-3378 3377 0
-3378 -3376 0
c Var 'aux662' direct represents '2' with '-3377'
3376 3378 -3377 0
c Encoding variable: aux663 with domain: int(0..2) (representing constraint ((x_00009_00005=7) + (x_00004_00005=7)))
c Both direct and order encoding.
c Var 'aux663' order represents '0' with '3379'
c Var 'aux663' direct represents '0' with '3379'
c Var 'aux663' order represents '1' with '3380'
-3379 3380 0
c Var 'aux663' direct represents '1' with '3381'
3379 -3380 3381 0
-3381 3380 0
-3381 -3379 0
c Var 'aux663' direct represents '2' with '-3380'
3379 3381 -3380 0
c Encoding variable: aux664 with domain: int(0..3) (representing constraint ((x_00001_00005=7) + aux663))
c Both direct and order encoding.
c Var 'aux664' order represents '0' with '3382'
c Var 'aux664' direct represents '0' with '3382'
c Var 'aux664' order represents '1' with '3383'
-3382 3383 0
c Var 'aux664' direct represents '1' with '3384'
3382 -3383 3384 0
-3384 3383 0
-3384 -3382 0
c Var 'aux664' order represents '2' with '3385'
-3383 3385 0
c Var 'aux664' direct represents '2' with '3386'
3383 -3385 3386 0
-3386 3385 0
-3386 -3383 0
c Var 'aux664' direct represents '3' with '-3385'
3382 3384 3386 -3385 0
c Encoding variable: aux665 with domain: int(0..4) (representing constraint (aux660 + aux662))
c Both direct and order encoding.
c Var 'aux665' order represents '0' with '3387'
c Var 'aux665' direct represents '0' with '3387'
c Var 'aux665' order represents '1' with '3388'
-3387 3388 0
c Var 'aux665' direct represents '1' with '3389'
3387 -3388 3389 0
-3389 3388 0
-3389 -3387 0
c Var 'aux665' order represents '2' with '3390'
-3388 3390 0
c Var 'aux665' direct represents '2' with '3391'
3388 -3390 3391 0
-3391 3390 0
-3391 -3388 0
c Var 'aux665' order represents '3' with '3392'
-3390 3392 0
c Var 'aux665' direct represents '3' with '3393'
3390 -3392 3393 0
-3393 3392 0
-3393 -3390 0
c Var 'aux665' direct represents '4' with '-3392'
3387 3389 3391 3393 -3392 0
c Encoding variable: aux666 with domain: int(0..2) (representing constraint ((x_00003_00005=8) + (x_00005_00005=8)))
c Both direct and order encoding.
c Var 'aux666' order represents '0' with '3394'
c Var 'aux666' direct represents '0' with '3394'
c Var 'aux666' order represents '1' with '3395'
-3394 3395 0
c Var 'aux666' direct represents '1' with '3396'
3394 -3395 3396 0
-3396 3395 0
-3396 -3394 0
c Var 'aux666' direct represents '2' with '-3395'
3394 3396 -3395 0
c Encoding variable: aux667 with domain: int(0..2) (representing constraint ((x_00007_00005=8) + (x_00008_00005=8)))
c Both direct and order encoding.
c Var 'aux667' order represents '0' with '3397'
c Var 'aux667' direct represents '0' with '3397'
c Var 'aux667' order represents '1' with '3398'
-3397 3398 0
c Var 'aux667' direct represents '1' with '3399'
3397 -3398 3399 0
-3399 3398 0
-3399 -3397 0
c Var 'aux667' direct represents '2' with '-3398'
3397 3399 -3398 0
c Encoding variable: aux668 with domain: int(0..2) (representing constraint ((x_00002_00005=8) + (x_00006_00005=8)))
c Both direct and order encoding.
c Var 'aux668' order represents '0' with '3400'
c Var 'aux668' direct represents '0' with '3400'
c Var 'aux668' order represents '1' with '3401'
-3400 3401 0
c Var 'aux668' direct represents '1' with '3402'
3400 -3401 3402 0
-3402 3401 0
-3402 -3400 0
c Var 'aux668' direct represents '2' with '-3401'
3400 3402 -3401 0
c Encoding variable: aux669 with domain: int(0..2) (representing constraint ((x_00009_00005=8) + (x_00004_00005=8)))
c Both direct and order encoding.
c Var 'aux669' order represents '0' with '3403'
c Var 'aux669' direct represents '0' with '3403'
c Var 'aux669' order represents '1' with '3404'
-3403 3404 0
c Var 'aux669' direct represents '1' with '3405'
3403 -3404 3405 0
-3405 3404 0
-3405 -3403 0
c Var 'aux669' direct represents '2' with '-3404'
3403 3405 -3404 0
c Encoding variable: aux670 with domain: int(0..3) (representing constraint ((x_00001_00005=8) + aux669))
c Both direct and order encoding.
c Var 'aux670' order represents '0' with '3406'
c Var 'aux670' direct represents '0' with '3406'
c Var 'aux670' order represents '1' with '3407'
-3406 3407 0
c Var 'aux670' direct represents '1' with '3408'
3406 -3407 3408 0
-3408 3407 0
-3408 -3406 0
c Var 'aux670' order represents '2' with '3409'
-3407 3409 0
c Var 'aux670' direct represents '2' with '3410'
3407 -3409 3410 0
-3410 3409 0
-3410 -3407 0
c Var 'aux670' direct represents '3' with '-3409'
3406 3408 3410 -3409 0
c Encoding variable: aux671 with domain: int(0..4) (representing constraint (aux666 + aux668))
c Both direct and order encoding.
c Var 'aux671' order represents '0' with '3411'
c Var 'aux671' direct represents '0' with '3411'
c Var 'aux671' order represents '1' with '3412'
-3411 3412 0
c Var 'aux671' direct represents '1' with '3413'
3411 -3412 3413 0
-3413 3412 0
-3413 -3411 0
c Var 'aux671' order represents '2' with '3414'
-3412 3414 0
c Var 'aux671' direct represents '2' with '3415'
3412 -3414 3415 0
-3415 3414 0
-3415 -3412 0
c Var 'aux671' order represents '3' with '3416'
-3414 3416 0
c Var 'aux671' direct represents '3' with '3417'
3414 -3416 3417 0
-3417 3416 0
-3417 -3414 0
c Var 'aux671' direct represents '4' with '-3416'
3411 3413 3415 3417 -3416 0
c Encoding variable: aux672 with domain: int(0..2) (representing constraint ((x_00003_00005=9) + (x_00005_00005=9)))
c Both direct and order encoding.
c Var 'aux672' order represents '0' with '3418'
c Var 'aux672' direct represents '0' with '3418'
c Var 'aux672' order represents '1' with '3419'
-3418 3419 0
c Var 'aux672' direct represents '1' with '3420'
3418 -3419 3420 0
-3420 3419 0
-3420 -3418 0
c Var 'aux672' direct represents '2' with '-3419'
3418 3420 -3419 0
c Encoding variable: aux673 with domain: int(0..2) (representing constraint ((x_00007_00005=9) + (x_00008_00005=9)))
c Both direct and order encoding.
c Var 'aux673' order represents '0' with '3421'
c Var 'aux673' direct represents '0' with '3421'
c Var 'aux673' order represents '1' with '3422'
-3421 3422 0
c Var 'aux673' direct represents '1' with '3423'
3421 -3422 3423 0
-3423 3422 0
-3423 -3421 0
c Var 'aux673' direct represents '2' with '-3422'
3421 3423 -3422 0
c Encoding variable: aux674 with domain: int(0..2) (representing constraint ((x_00002_00005=9) + (x_00006_00005=9)))
c Both direct and order encoding.
c Var 'aux674' order represents '0' with '3424'
c Var 'aux674' direct represents '0' with '3424'
c Var 'aux674' order represents '1' with '3425'
-3424 3425 0
c Var 'aux674' direct represents '1' with '3426'
3424 -3425 3426 0
-3426 3425 0
-3426 -3424 0
c Var 'aux674' direct represents '2' with '-3425'
3424 3426 -3425 0
c Encoding variable: aux675 with domain: int(0..2) (representing constraint ((x_00009_00005=9) + (x_00004_00005=9)))
c Both direct and order encoding.
c Var 'aux675' order represents '0' with '3427'
c Var 'aux675' direct represents '0' with '3427'
c Var 'aux675' order represents '1' with '3428'
-3427 3428 0
c Var 'aux675' direct represents '1' with '3429'
3427 -3428 3429 0
-3429 3428 0
-3429 -3427 0
c Var 'aux675' direct represents '2' with '-3428'
3427 3429 -3428 0
c Encoding variable: aux676 with domain: int(0..3) (representing constraint ((x_00001_00005=9) + aux675))
c Both direct and order encoding.
c Var 'aux676' order represents '0' with '3430'
c Var 'aux676' direct represents '0' with '3430'
c Var 'aux676' order represents '1' with '3431'
-3430 3431 0
c Var 'aux676' direct represents '1' with '3432'
3430 -3431 3432 0
-3432 3431 0
-3432 -3430 0
c Var 'aux676' order represents '2' with '3433'
-3431 3433 0
c Var 'aux676' direct represents '2' with '3434'
3431 -3433 3434 0
-3434 3433 0
-3434 -3431 0
c Var 'aux676' direct represents '3' with '-3433'
3430 3432 3434 -3433 0
c Encoding variable: aux677 with domain: int(0..4) (representing constraint (aux672 + aux674))
c Both direct and order encoding.
c Var 'aux677' order represents '0' with '3435'
c Var 'aux677' direct represents '0' with '3435'
c Var 'aux677' order represents '1' with '3436'
-3435 3436 0
c Var 'aux677' direct represents '1' with '3437'
3435 -3436 3437 0
-3437 3436 0
-3437 -3435 0
c Var 'aux677' order represents '2' with '3438'
-3436 3438 0
c Var 'aux677' direct represents '2' with '3439'
3436 -3438 3439 0
-3439 3438 0
-3439 -3436 0
c Var 'aux677' order represents '3' with '3440'
-3438 3440 0
c Var 'aux677' direct represents '3' with '3441'
3438 -3440 3441 0
-3441 3440 0
-3441 -3438 0
c Var 'aux677' direct represents '4' with '-3440'
3435 3437 3439 3441 -3440 0
c Encoding variable: aux678 with domain: int(0..2) (representing constraint ((x_00003_00006=1) + (x_00005_00006=1)))
c Both direct and order encoding.
c Var 'aux678' order represents '0' with '3442'
c Var 'aux678' direct represents '0' with '3442'
c Var 'aux678' order represents '1' with '3443'
-3442 3443 0
c Var 'aux678' direct represents '1' with '3444'
3442 -3443 3444 0
-3444 3443 0
-3444 -3442 0
c Var 'aux678' direct represents '2' with '-3443'
3442 3444 -3443 0
c Encoding variable: aux679 with domain: int(0..2) (representing constraint ((x_00007_00006=1) + (x_00008_00006=1)))
c Both direct and order encoding.
c Var 'aux679' order represents '0' with '3445'
c Var 'aux679' direct represents '0' with '3445'
c Var 'aux679' order represents '1' with '3446'
-3445 3446 0
c Var 'aux679' direct represents '1' with '3447'
3445 -3446 3447 0
-3447 3446 0
-3447 -3445 0
c Var 'aux679' direct represents '2' with '-3446'
3445 3447 -3446 0
c Encoding variable: aux680 with domain: int(0..2) (representing constraint ((x_00002_00006=1) + (x_00006_00006=1)))
c Both direct and order encoding.
c Var 'aux680' order represents '0' with '3448'
c Var 'aux680' direct represents '0' with '3448'
c Var 'aux680' order represents '1' with '3449'
-3448 3449 0
c Var 'aux680' direct represents '1' with '3450'
3448 -3449 3450 0
-3450 3449 0
-3450 -3448 0
c Var 'aux680' direct represents '2' with '-3449'
3448 3450 -3449 0
c Encoding variable: aux681 with domain: int(0..2) (representing constraint ((x_00009_00006=1) + (x_00004_00006=1)))
c Both direct and order encoding.
c Var 'aux681' order represents '0' with '3451'
c Var 'aux681' direct represents '0' with '3451'
c Var 'aux681' order represents '1' with '3452'
-3451 3452 0
c Var 'aux681' direct represents '1' with '3453'
3451 -3452 3453 0
-3453 3452 0
-3453 -3451 0
c Var 'aux681' direct represents '2' with '-3452'
3451 3453 -3452 0
c Encoding variable: aux682 with domain: int(0..3) (representing constraint ((x_00001_00006=1) + aux681))
c Both direct and order encoding.
c Var 'aux682' order represents '0' with '3454'
c Var 'aux682' direct represents '0' with '3454'
c Var 'aux682' order represents '1' with '3455'
-3454 3455 0
c Var 'aux682' direct represents '1' with '3456'
3454 -3455 3456 0
-3456 3455 0
-3456 -3454 0
c Var 'aux682' order represents '2' with '3457'
-3455 3457 0
c Var 'aux682' direct represents '2' with '3458'
3455 -3457 3458 0
-3458 3457 0
-3458 -3455 0
c Var 'aux682' direct represents '3' with '-3457'
3454 3456 3458 -3457 0
c Encoding variable: aux683 with domain: int(0..4) (representing constraint (aux678 + aux680))
c Both direct and order encoding.
c Var 'aux683' order represents '0' with '3459'
c Var 'aux683' direct represents '0' with '3459'
c Var 'aux683' order represents '1' with '3460'
-3459 3460 0
c Var 'aux683' direct represents '1' with '3461'
3459 -3460 3461 0
-3461 3460 0
-3461 -3459 0
c Var 'aux683' order represents '2' with '3462'
-3460 3462 0
c Var 'aux683' direct represents '2' with '3463'
3460 -3462 3463 0
-3463 3462 0
-3463 -3460 0
c Var 'aux683' order represents '3' with '3464'
-3462 3464 0
c Var 'aux683' direct represents '3' with '3465'
3462 -3464 3465 0
-3465 3464 0
-3465 -3462 0
c Var 'aux683' direct represents '4' with '-3464'
3459 3461 3463 3465 -3464 0
c Encoding variable: aux684 with domain: int(0..2) (representing constraint ((x_00003_00006=2) + (x_00005_00006=2)))
c Both direct and order encoding.
c Var 'aux684' order represents '0' with '3466'
c Var 'aux684' direct represents '0' with '3466'
c Var 'aux684' order represents '1' with '3467'
-3466 3467 0
c Var 'aux684' direct represents '1' with '3468'
3466 -3467 3468 0
-3468 3467 0
-3468 -3466 0
c Var 'aux684' direct represents '2' with '-3467'
3466 3468 -3467 0
c Encoding variable: aux685 with domain: int(0..2) (representing constraint ((x_00007_00006=2) + (x_00008_00006=2)))
c Both direct and order encoding.
c Var 'aux685' order represents '0' with '3469'
c Var 'aux685' direct represents '0' with '3469'
c Var 'aux685' order represents '1' with '3470'
-3469 3470 0
c Var 'aux685' direct represents '1' with '3471'
3469 -3470 3471 0
-3471 3470 0
-3471 -3469 0
c Var 'aux685' direct represents '2' with '-3470'
3469 3471 -3470 0
c Encoding variable: aux686 with domain: int(0..2) (representing constraint ((x_00002_00006=2) + (x_00006_00006=2)))
c Both direct and order encoding.
c Var 'aux686' order represents '0' with '3472'
c Var 'aux686' direct represents '0' with '3472'
c Var 'aux686' order represents '1' with '3473'
-3472 3473 0
c Var 'aux686' direct represents '1' with '3474'
3472 -3473 3474 0
-3474 3473 0
-3474 -3472 0
c Var 'aux686' direct represents '2' with '-3473'
3472 3474 -3473 0
c Encoding variable: aux687 with domain: int(0..2) (representing constraint ((x_00009_00006=2) + (x_00004_00006=2)))
c Both direct and order encoding.
c Var 'aux687' order represents '0' with '3475'
c Var 'aux687' direct represents '0' with '3475'
c Var 'aux687' order represents '1' with '3476'
-3475 3476 0
c Var 'aux687' direct represents '1' with '3477'
3475 -3476 3477 0
-3477 3476 0
-3477 -3475 0
c Var 'aux687' direct represents '2' with '-3476'
3475 3477 -3476 0
c Encoding variable: aux688 with domain: int(0..3) (representing constraint ((x_00001_00006=2) + aux687))
c Both direct and order encoding.
c Var 'aux688' order represents '0' with '3478'
c Var 'aux688' direct represents '0' with '3478'
c Var 'aux688' order represents '1' with '3479'
-3478 3479 0
c Var 'aux688' direct represents '1' with '3480'
3478 -3479 3480 0
-3480 3479 0
-3480 -3478 0
c Var 'aux688' order represents '2' with '3481'
-3479 3481 0
c Var 'aux688' direct represents '2' with '3482'
3479 -3481 3482 0
-3482 3481 0
-3482 -3479 0
c Var 'aux688' direct represents '3' with '-3481'
3478 3480 3482 -3481 0
c Encoding variable: aux689 with domain: int(0..4) (representing constraint (aux684 + aux686))
c Both direct and order encoding.
c Var 'aux689' order represents '0' with '3483'
c Var 'aux689' direct represents '0' with '3483'
c Var 'aux689' order represents '1' with '3484'
-3483 3484 0
c Var 'aux689' direct represents '1' with '3485'
3483 -3484 3485 0
-3485 3484 0
-3485 -3483 0
c Var 'aux689' order represents '2' with '3486'
-3484 3486 0
c Var 'aux689' direct represents '2' with '3487'
3484 -3486 3487 0
-3487 3486 0
-3487 -3484 0
c Var 'aux689' order represents '3' with '3488'
-3486 3488 0
c Var 'aux689' direct represents '3' with '3489'
3486 -3488 3489 0
-3489 3488 0
-3489 -3486 0
c Var 'aux689' direct represents '4' with '-3488'
3483 3485 3487 3489 -3488 0
c Encoding variable: aux690 with domain: int(0..2) (representing constraint ((x_00003_00006=3) + (x_00005_00006=3)))
c Both direct and order encoding.
c Var 'aux690' order represents '0' with '3490'
c Var 'aux690' direct represents '0' with '3490'
c Var 'aux690' order represents '1' with '3491'
-3490 3491 0
c Var 'aux690' direct represents '1' with '3492'
3490 -3491 3492 0
-3492 3491 0
-3492 -3490 0
c Var 'aux690' direct represents '2' with '-3491'
3490 3492 -3491 0
c Encoding variable: aux691 with domain: int(0..2) (representing constraint ((x_00007_00006=3) + (x_00008_00006=3)))
c Both direct and order encoding.
c Var 'aux691' order represents '0' with '3493'
c Var 'aux691' direct represents '0' with '3493'
c Var 'aux691' order represents '1' with '3494'
-3493 3494 0
c Var 'aux691' direct represents '1' with '3495'
3493 -3494 3495 0
-3495 3494 0
-3495 -3493 0
c Var 'aux691' direct represents '2' with '-3494'
3493 3495 -3494 0
c Encoding variable: aux692 with domain: int(0..2) (representing constraint ((x_00002_00006=3) + (x_00006_00006=3)))
c Both direct and order encoding.
c Var 'aux692' order represents '0' with '3496'
c Var 'aux692' direct represents '0' with '3496'
c Var 'aux692' order represents '1' with '3497'
-3496 3497 0
c Var 'aux692' direct represents '1' with '3498'
3496 -3497 3498 0
-3498 3497 0
-3498 -3496 0
c Var 'aux692' direct represents '2' with '-3497'
3496 3498 -3497 0
c Encoding variable: aux693 with domain: int(0..2) (representing constraint ((x_00009_00006=3) + (x_00004_00006=3)))
c Both direct and order encoding.
c Var 'aux693' order represents '0' with '3499'
c Var 'aux693' direct represents '0' with '3499'
c Var 'aux693' order represents '1' with '3500'
-3499 3500 0
c Var 'aux693' direct represents '1' with '3501'
3499 -3500 3501 0
-3501 3500 0
-3501 -3499 0
c Var 'aux693' direct represents '2' with '-3500'
3499 3501 -3500 0
c Encoding variable: aux694 with domain: int(0..3) (representing constraint ((x_00001_00006=3) + aux693))
c Both direct and order encoding.
c Var 'aux694' order represents '0' with '3502'
c Var 'aux694' direct represents '0' with '3502'
c Var 'aux694' order represents '1' with '3503'
-3502 3503 0
c Var 'aux694' direct represents '1' with '3504'
3502 -3503 3504 0
-3504 3503 0
-3504 -3502 0
c Var 'aux694' order represents '2' with '3505'
-3503 3505 0
c Var 'aux694' direct represents '2' with '3506'
3503 -3505 3506 0
-3506 3505 0
-3506 -3503 0
c Var 'aux694' direct represents '3' with '-3505'
3502 3504 3506 -3505 0
c Encoding variable: aux695 with domain: int(0..4) (representing constraint (aux690 + aux692))
c Both direct and order encoding.
c Var 'aux695' order represents '0' with '3507'
c Var 'aux695' direct represents '0' with '3507'
c Var 'aux695' order represents '1' with '3508'
-3507 3508 0
c Var 'aux695' direct represents '1' with '3509'
3507 -3508 3509 0
-3509 3508 0
-3509 -3507 0
c Var 'aux695' order represents '2' with '3510'
-3508 3510 0
c Var 'aux695' direct represents '2' with '3511'
3508 -3510 3511 0
-3511 3510 0
-3511 -3508 0
c Var 'aux695' order represents '3' with '3512'
-3510 3512 0
c Var 'aux695' direct represents '3' with '3513'
3510 -3512 3513 0
-3513 3512 0
-3513 -3510 0
c Var 'aux695' direct represents '4' with '-3512'
3507 3509 3511 3513 -3512 0
c Encoding variable: aux696 with domain: int(0..2) (representing constraint ((x_00003_00006=4) + (x_00005_00006=4)))
c Both direct and order encoding.
c Var 'aux696' order represents '0' with '3514'
c Var 'aux696' direct represents '0' with '3514'
c Var 'aux696' order represents '1' with '3515'
-3514 3515 0
c Var 'aux696' direct represents '1' with '3516'
3514 -3515 3516 0
-3516 3515 0
-3516 -3514 0
c Var 'aux696' direct represents '2' with '-3515'
3514 3516 -3515 0
c Encoding variable: aux697 with domain: int(0..2) (representing constraint ((x_00007_00006=4) + (x_00008_00006=4)))
c Both direct and order encoding.
c Var 'aux697' order represents '0' with '3517'
c Var 'aux697' direct represents '0' with '3517'
c Var 'aux697' order represents '1' with '3518'
-3517 3518 0
c Var 'aux697' direct represents '1' with '3519'
3517 -3518 3519 0
-3519 3518 0
-3519 -3517 0
c Var 'aux697' direct represents '2' with '-3518'
3517 3519 -3518 0
c Encoding variable: aux698 with domain: int(0..2) (representing constraint ((x_00002_00006=4) + (x_00006_00006=4)))
c Both direct and order encoding.
c Var 'aux698' order represents '0' with '3520'
c Var 'aux698' direct represents '0' with '3520'
c Var 'aux698' order represents '1' with '3521'
-3520 3521 0
c Var 'aux698' direct represents '1' with '3522'
3520 -3521 3522 0
-3522 3521 0
-3522 -3520 0
c Var 'aux698' direct represents '2' with '-3521'
3520 3522 -3521 0
c Encoding variable: aux699 with domain: int(0..2) (representing constraint ((x_00009_00006=4) + (x_00004_00006=4)))
c Both direct and order encoding.
c Var 'aux699' order represents '0' with '3523'
c Var 'aux699' direct represents '0' with '3523'
c Var 'aux699' order represents '1' with '3524'
-3523 3524 0
c Var 'aux699' direct represents '1' with '3525'
3523 -3524 3525 0
-3525 3524 0
-3525 -3523 0
c Var 'aux699' direct represents '2' with '-3524'
3523 3525 -3524 0
c Encoding variable: aux700 with domain: int(0..3) (representing constraint ((x_00001_00006=4) + aux699))
c Both direct and order encoding.
c Var 'aux700' order represents '0' with '3526'
c Var 'aux700' direct represents '0' with '3526'
c Var 'aux700' order represents '1' with '3527'
-3526 3527 0
c Var 'aux700' direct represents '1' with '3528'
3526 -3527 3528 0
-3528 3527 0
-3528 -3526 0
c Var 'aux700' order represents '2' with '3529'
-3527 3529 0
c Var 'aux700' direct represents '2' with '3530'
3527 -3529 3530 0
-3530 3529 0
-3530 -3527 0
c Var 'aux700' direct represents '3' with '-3529'
3526 3528 3530 -3529 0
c Encoding variable: aux701 with domain: int(0..4) (representing constraint (aux696 + aux698))
c Both direct and order encoding.
c Var 'aux701' order represents '0' with '3531'
c Var 'aux701' direct represents '0' with '3531'
c Var 'aux701' order represents '1' with '3532'
-3531 3532 0
c Var 'aux701' direct represents '1' with '3533'
3531 -3532 3533 0
-3533 3532 0
-3533 -3531 0
c Var 'aux701' order represents '2' with '3534'
-3532 3534 0
c Var 'aux701' direct represents '2' with '3535'
3532 -3534 3535 0
-3535 3534 0
-3535 -3532 0
c Var 'aux701' order represents '3' with '3536'
-3534 3536 0
c Var 'aux701' direct represents '3' with '3537'
3534 -3536 3537 0
-3537 3536 0
-3537 -3534 0
c Var 'aux701' direct represents '4' with '-3536'
3531 3533 3535 3537 -3536 0
c Encoding variable: aux702 with domain: int(0..2) (representing constraint ((x_00003_00006=5) + (x_00005_00006=5)))
c Both direct and order encoding.
c Var 'aux702' order represents '0' with '3538'
c Var 'aux702' direct represents '0' with '3538'
c Var 'aux702' order represents '1' with '3539'
-3538 3539 0
c Var 'aux702' direct represents '1' with '3540'
3538 -3539 3540 0
-3540 3539 0
-3540 -3538 0
c Var 'aux702' direct represents '2' with '-3539'
3538 3540 -3539 0
c Encoding variable: aux703 with domain: int(0..2) (representing constraint ((x_00007_00006=5) + (x_00008_00006=5)))
c Both direct and order encoding.
c Var 'aux703' order represents '0' with '3541'
c Var 'aux703' direct represents '0' with '3541'
c Var 'aux703' order represents '1' with '3542'
-3541 3542 0
c Var 'aux703' direct represents '1' with '3543'
3541 -3542 3543 0
-3543 3542 0
-3543 -3541 0
c Var 'aux703' direct represents '2' with '-3542'
3541 3543 -3542 0
c Encoding variable: aux704 with domain: int(0..2) (representing constraint ((x_00002_00006=5) + (x_00006_00006=5)))
c Both direct and order encoding.
c Var 'aux704' order represents '0' with '3544'
c Var 'aux704' direct represents '0' with '3544'
c Var 'aux704' order represents '1' with '3545'
-3544 3545 0
c Var 'aux704' direct represents '1' with '3546'
3544 -3545 3546 0
-3546 3545 0
-3546 -3544 0
c Var 'aux704' direct represents '2' with '-3545'
3544 3546 -3545 0
c Encoding variable: aux705 with domain: int(0..2) (representing constraint ((x_00009_00006=5) + (x_00004_00006=5)))
c Both direct and order encoding.
c Var 'aux705' order represents '0' with '3547'
c Var 'aux705' direct represents '0' with '3547'
c Var 'aux705' order represents '1' with '3548'
-3547 3548 0
c Var 'aux705' direct represents '1' with '3549'
3547 -3548 3549 0
-3549 3548 0
-3549 -3547 0
c Var 'aux705' direct represents '2' with '-3548'
3547 3549 -3548 0
c Encoding variable: aux706 with domain: int(0..3) (representing constraint ((x_00001_00006=5) + aux705))
c Both direct and order encoding.
c Var 'aux706' order represents '0' with '3550'
c Var 'aux706' direct represents '0' with '3550'
c Var 'aux706' order represents '1' with '3551'
-3550 3551 0
c Var 'aux706' direct represents '1' with '3552'
3550 -3551 3552 0
-3552 3551 0
-3552 -3550 0
c Var 'aux706' order represents '2' with '3553'
-3551 3553 0
c Var 'aux706' direct represents '2' with '3554'
3551 -3553 3554 0
-3554 3553 0
-3554 -3551 0
c Var 'aux706' direct represents '3' with '-3553'
3550 3552 3554 -3553 0
c Encoding variable: aux707 with domain: int(0..4) (representing constraint (aux702 + aux704))
c Both direct and order encoding.
c Var 'aux707' order represents '0' with '3555'
c Var 'aux707' direct represents '0' with '3555'
c Var 'aux707' order represents '1' with '3556'
-3555 3556 0
c Var 'aux707' direct represents '1' with '3557'
3555 -3556 3557 0
-3557 3556 0
-3557 -3555 0
c Var 'aux707' order represents '2' with '3558'
-3556 3558 0
c Var 'aux707' direct represents '2' with '3559'
3556 -3558 3559 0
-3559 3558 0
-3559 -3556 0
c Var 'aux707' order represents '3' with '3560'
-3558 3560 0
c Var 'aux707' direct represents '3' with '3561'
3558 -3560 3561 0
-3561 3560 0
-3561 -3558 0
c Var 'aux707' direct represents '4' with '-3560'
3555 3557 3559 3561 -3560 0
c Encoding variable: aux708 with domain: int(0..2) (representing constraint ((x_00003_00006=6) + (x_00005_00006=6)))
c Both direct and order encoding.
c Var 'aux708' order represents '0' with '3562'
c Var 'aux708' direct represents '0' with '3562'
c Var 'aux708' order represents '1' with '3563'
-3562 3563 0
c Var 'aux708' direct represents '1' with '3564'
3562 -3563 3564 0
-3564 3563 0
-3564 -3562 0
c Var 'aux708' direct represents '2' with '-3563'
3562 3564 -3563 0
c Encoding variable: aux709 with domain: int(0..2) (representing constraint ((x_00007_00006=6) + (x_00008_00006=6)))
c Both direct and order encoding.
c Var 'aux709' order represents '0' with '3565'
c Var 'aux709' direct represents '0' with '3565'
c Var 'aux709' order represents '1' with '3566'
-3565 3566 0
c Var 'aux709' direct represents '1' with '3567'
3565 -3566 3567 0
-3567 3566 0
-3567 -3565 0
c Var 'aux709' direct represents '2' with '-3566'
3565 3567 -3566 0
c Encoding variable: aux710 with domain: int(0..2) (representing constraint ((x_00002_00006=6) + (x_00006_00006=6)))
c Both direct and order encoding.
c Var 'aux710' order represents '0' with '3568'
c Var 'aux710' direct represents '0' with '3568'
c Var 'aux710' order represents '1' with '3569'
-3568 3569 0
c Var 'aux710' direct represents '1' with '3570'
3568 -3569 3570 0
-3570 3569 0
-3570 -3568 0
c Var 'aux710' direct represents '2' with '-3569'
3568 3570 -3569 0
c Encoding variable: aux711 with domain: int(0..2) (representing constraint ((x_00009_00006=6) + (x_00004_00006=6)))
c Both direct and order encoding.
c Var 'aux711' order represents '0' with '3571'
c Var 'aux711' direct represents '0' with '3571'
c Var 'aux711' order represents '1' with '3572'
-3571 3572 0
c Var 'aux711' direct represents '1' with '3573'
3571 -3572 3573 0
-3573 3572 0
-3573 -3571 0
c Var 'aux711' direct represents '2' with '-3572'
3571 3573 -3572 0
c Encoding variable: aux712 with domain: int(0..3) (representing constraint ((x_00001_00006=6) + aux711))
c Both direct and order encoding.
c Var 'aux712' order represents '0' with '3574'
c Var 'aux712' direct represents '0' with '3574'
c Var 'aux712' order represents '1' with '3575'
-3574 3575 0
c Var 'aux712' direct represents '1' with '3576'
3574 -3575 3576 0
-3576 3575 0
-3576 -3574 0
c Var 'aux712' order represents '2' with '3577'
-3575 3577 0
c Var 'aux712' direct represents '2' with '3578'
3575 -3577 3578 0
-3578 3577 0
-3578 -3575 0
c Var 'aux712' direct represents '3' with '-3577'
3574 3576 3578 -3577 0
c Encoding variable: aux713 with domain: int(0..4) (representing constraint (aux708 + aux710))
c Both direct and order encoding.
c Var 'aux713' order represents '0' with '3579'
c Var 'aux713' direct represents '0' with '3579'
c Var 'aux713' order represents '1' with '3580'
-3579 3580 0
c Var 'aux713' direct represents '1' with '3581'
3579 -3580 3581 0
-3581 3580 0
-3581 -3579 0
c Var 'aux713' order represents '2' with '3582'
-3580 3582 0
c Var 'aux713' direct represents '2' with '3583'
3580 -3582 3583 0
-3583 3582 0
-3583 -3580 0
c Var 'aux713' order represents '3' with '3584'
-3582 3584 0
c Var 'aux713' direct represents '3' with '3585'
3582 -3584 3585 0
-3585 3584 0
-3585 -3582 0
c Var 'aux713' direct represents '4' with '-3584'
3579 3581 3583 3585 -3584 0
c Encoding variable: aux714 with domain: int(0..2) (representing constraint ((x_00003_00006=7) + (x_00005_00006=7)))
c Both direct and order encoding.
c Var 'aux714' order represents '0' with '3586'
c Var 'aux714' direct represents '0' with '3586'
c Var 'aux714' order represents '1' with '3587'
-3586 3587 0
c Var 'aux714' direct represents '1' with '3588'
3586 -3587 3588 0
-3588 3587 0
-3588 -3586 0
c Var 'aux714' direct represents '2' with '-3587'
3586 3588 -3587 0
c Encoding variable: aux715 with domain: int(0..2) (representing constraint ((x_00007_00006=7) + (x_00008_00006=7)))
c Both direct and order encoding.
c Var 'aux715' order represents '0' with '3589'
c Var 'aux715' direct represents '0' with '3589'
c Var 'aux715' order represents '1' with '3590'
-3589 3590 0
c Var 'aux715' direct represents '1' with '3591'
3589 -3590 3591 0
-3591 3590 0
-3591 -3589 0
c Var 'aux715' direct represents '2' with '-3590'
3589 3591 -3590 0
c Encoding variable: aux716 with domain: int(0..2) (representing constraint ((x_00002_00006=7) + (x_00006_00006=7)))
c Both direct and order encoding.
c Var 'aux716' order represents '0' with '3592'
c Var 'aux716' direct represents '0' with '3592'
c Var 'aux716' order represents '1' with '3593'
-3592 3593 0
c Var 'aux716' direct represents '1' with '3594'
3592 -3593 3594 0
-3594 3593 0
-3594 -3592 0
c Var 'aux716' direct represents '2' with '-3593'
3592 3594 -3593 0
c Encoding variable: aux717 with domain: int(0..2) (representing constraint ((x_00009_00006=7) + (x_00004_00006=7)))
c Both direct and order encoding.
c Var 'aux717' order represents '0' with '3595'
c Var 'aux717' direct represents '0' with '3595'
c Var 'aux717' order represents '1' with '3596'
-3595 3596 0
c Var 'aux717' direct represents '1' with '3597'
3595 -3596 3597 0
-3597 3596 0
-3597 -3595 0
c Var 'aux717' direct represents '2' with '-3596'
3595 3597 -3596 0
c Encoding variable: aux718 with domain: int(0..3) (representing constraint ((x_00001_00006=7) + aux717))
c Both direct and order encoding.
c Var 'aux718' order represents '0' with '3598'
c Var 'aux718' direct represents '0' with '3598'
c Var 'aux718' order represents '1' with '3599'
-3598 3599 0
c Var 'aux718' direct represents '1' with '3600'
3598 -3599 3600 0
-3600 3599 0
-3600 -3598 0
c Var 'aux718' order represents '2' with '3601'
-3599 3601 0
c Var 'aux718' direct represents '2' with '3602'
3599 -3601 3602 0
-3602 3601 0
-3602 -3599 0
c Var 'aux718' direct represents '3' with '-3601'
3598 3600 3602 -3601 0
c Encoding variable: aux719 with domain: int(0..4) (representing constraint (aux714 + aux716))
c Both direct and order encoding.
c Var 'aux719' order represents '0' with '3603'
c Var 'aux719' direct represents '0' with '3603'
c Var 'aux719' order represents '1' with '3604'
-3603 3604 0
c Var 'aux719' direct represents '1' with '3605'
3603 -3604 3605 0
-3605 3604 0
-3605 -3603 0
c Var 'aux719' order represents '2' with '3606'
-3604 3606 0
c Var 'aux719' direct represents '2' with '3607'
3604 -3606 3607 0
-3607 3606 0
-3607 -3604 0
c Var 'aux719' order represents '3' with '3608'
-3606 3608 0
c Var 'aux719' direct represents '3' with '3609'
3606 -3608 3609 0
-3609 3608 0
-3609 -3606 0
c Var 'aux719' direct represents '4' with '-3608'
3603 3605 3607 3609 -3608 0
c Encoding variable: aux720 with domain: int(0..2) (representing constraint ((x_00003_00006=8) + (x_00005_00006=8)))
c Both direct and order encoding.
c Var 'aux720' order represents '0' with '3610'
c Var 'aux720' direct represents '0' with '3610'
c Var 'aux720' order represents '1' with '3611'
-3610 3611 0
c Var 'aux720' direct represents '1' with '3612'
3610 -3611 3612 0
-3612 3611 0
-3612 -3610 0
c Var 'aux720' direct represents '2' with '-3611'
3610 3612 -3611 0
c Encoding variable: aux721 with domain: int(0..2) (representing constraint ((x_00007_00006=8) + (x_00008_00006=8)))
c Both direct and order encoding.
c Var 'aux721' order represents '0' with '3613'
c Var 'aux721' direct represents '0' with '3613'
c Var 'aux721' order represents '1' with '3614'
-3613 3614 0
c Var 'aux721' direct represents '1' with '3615'
3613 -3614 3615 0
-3615 3614 0
-3615 -3613 0
c Var 'aux721' direct represents '2' with '-3614'
3613 3615 -3614 0
c Encoding variable: aux722 with domain: int(0..2) (representing constraint ((x_00002_00006=8) + (x_00006_00006=8)))
c Both direct and order encoding.
c Var 'aux722' order represents '0' with '3616'
c Var 'aux722' direct represents '0' with '3616'
c Var 'aux722' order represents '1' with '3617'
-3616 3617 0
c Var 'aux722' direct represents '1' with '3618'
3616 -3617 3618 0
-3618 3617 0
-3618 -3616 0
c Var 'aux722' direct represents '2' with '-3617'
3616 3618 -3617 0
c Encoding variable: aux723 with domain: int(0..2) (representing constraint ((x_00009_00006=8) + (x_00004_00006=8)))
c Both direct and order encoding.
c Var 'aux723' order represents '0' with '3619'
c Var 'aux723' direct represents '0' with '3619'
c Var 'aux723' order represents '1' with '3620'
-3619 3620 0
c Var 'aux723' direct represents '1' with '3621'
3619 -3620 3621 0
-3621 3620 0
-3621 -3619 0
c Var 'aux723' direct represents '2' with '-3620'
3619 3621 -3620 0
c Encoding variable: aux724 with domain: int(0..3) (representing constraint ((x_00001_00006=8) + aux723))
c Both direct and order encoding.
c Var 'aux724' order represents '0' with '3622'
c Var 'aux724' direct represents '0' with '3622'
c Var 'aux724' order represents '1' with '3623'
-3622 3623 0
c Var 'aux724' direct represents '1' with '3624'
3622 -3623 3624 0
-3624 3623 0
-3624 -3622 0
c Var 'aux724' order represents '2' with '3625'
-3623 3625 0
c Var 'aux724' direct represents '2' with '3626'
3623 -3625 3626 0
-3626 3625 0
-3626 -3623 0
c Var 'aux724' direct represents '3' with '-3625'
3622 3624 3626 -3625 0
c Encoding variable: aux725 with domain: int(0..4) (representing constraint (aux720 + aux722))
c Both direct and order encoding.
c Var 'aux725' order represents '0' with '3627'
c Var 'aux725' direct represents '0' with '3627'
c Var 'aux725' order represents '1' with '3628'
-3627 3628 0
c Var 'aux725' direct represents '1' with '3629'
3627 -3628 3629 0
-3629 3628 0
-3629 -3627 0
c Var 'aux725' order represents '2' with '3630'
-3628 3630 0
c Var 'aux725' direct represents '2' with '3631'
3628 -3630 3631 0
-3631 3630 0
-3631 -3628 0
c Var 'aux725' order represents '3' with '3632'
-3630 3632 0
c Var 'aux725' direct represents '3' with '3633'
3630 -3632 3633 0
-3633 3632 0
-3633 -3630 0
c Var 'aux725' direct represents '4' with '-3632'
3627 3629 3631 3633 -3632 0
c Encoding variable: aux726 with domain: int(0..2) (representing constraint ((x_00003_00006=9) + (x_00005_00006=9)))
c Both direct and order encoding.
c Var 'aux726' order represents '0' with '3634'
c Var 'aux726' direct represents '0' with '3634'
c Var 'aux726' order represents '1' with '3635'
-3634 3635 0
c Var 'aux726' direct represents '1' with '3636'
3634 -3635 3636 0
-3636 3635 0
-3636 -3634 0
c Var 'aux726' direct represents '2' with '-3635'
3634 3636 -3635 0
c Encoding variable: aux727 with domain: int(0..2) (representing constraint ((x_00007_00006=9) + (x_00008_00006=9)))
c Both direct and order encoding.
c Var 'aux727' order represents '0' with '3637'
c Var 'aux727' direct represents '0' with '3637'
c Var 'aux727' order represents '1' with '3638'
-3637 3638 0
c Var 'aux727' direct represents '1' with '3639'
3637 -3638 3639 0
-3639 3638 0
-3639 -3637 0
c Var 'aux727' direct represents '2' with '-3638'
3637 3639 -3638 0
c Encoding variable: aux728 with domain: int(0..2) (representing constraint ((x_00002_00006=9) + (x_00006_00006=9)))
c Both direct and order encoding.
c Var 'aux728' order represents '0' with '3640'
c Var 'aux728' direct represents '0' with '3640'
c Var 'aux728' order represents '1' with '3641'
-3640 3641 0
c Var 'aux728' direct represents '1' with '3642'
3640 -3641 3642 0
-3642 3641 0
-3642 -3640 0
c Var 'aux728' direct represents '2' with '-3641'
3640 3642 -3641 0
c Encoding variable: aux729 with domain: int(0..2) (representing constraint ((x_00009_00006=9) + (x_00004_00006=9)))
c Both direct and order encoding.
c Var 'aux729' order represents '0' with '3643'
c Var 'aux729' direct represents '0' with '3643'
c Var 'aux729' order represents '1' with '3644'
-3643 3644 0
c Var 'aux729' direct represents '1' with '3645'
3643 -3644 3645 0
-3645 3644 0
-3645 -3643 0
c Var 'aux729' direct represents '2' with '-3644'
3643 3645 -3644 0
c Encoding variable: aux730 with domain: int(0..3) (representing constraint ((x_00001_00006=9) + aux729))
c Both direct and order encoding.
c Var 'aux730' order represents '0' with '3646'
c Var 'aux730' direct represents '0' with '3646'
c Var 'aux730' order represents '1' with '3647'
-3646 3647 0
c Var 'aux730' direct represents '1' with '3648'
3646 -3647 3648 0
-3648 3647 0
-3648 -3646 0
c Var 'aux730' order represents '2' with '3649'
-3647 3649 0
c Var 'aux730' direct represents '2' with '3650'
3647 -3649 3650 0
-3650 3649 0
-3650 -3647 0
c Var 'aux730' direct represents '3' with '-3649'
3646 3648 3650 -3649 0
c Encoding variable: aux731 with domain: int(0..4) (representing constraint (aux726 + aux728))
c Both direct and order encoding.
c Var 'aux731' order represents '0' with '3651'
c Var 'aux731' direct represents '0' with '3651'
c Var 'aux731' order represents '1' with '3652'
-3651 3652 0
c Var 'aux731' direct represents '1' with '3653'
3651 -3652 3653 0
-3653 3652 0
-3653 -3651 0
c Var 'aux731' order represents '2' with '3654'
-3652 3654 0
c Var 'aux731' direct represents '2' with '3655'
3652 -3654 3655 0
-3655 3654 0
-3655 -3652 0
c Var 'aux731' order represents '3' with '3656'
-3654 3656 0
c Var 'aux731' direct represents '3' with '3657'
3654 -3656 3657 0
-3657 3656 0
-3657 -3654 0
c Var 'aux731' direct represents '4' with '-3656'
3651 3653 3655 3657 -3656 0
c Encoding variable: aux732 with domain: int(0..2) (representing constraint ((x_00003_00007=1) + (x_00005_00007=1)))
c Both direct and order encoding.
c Var 'aux732' order represents '0' with '3658'
c Var 'aux732' direct represents '0' with '3658'
c Var 'aux732' order represents '1' with '3659'
-3658 3659 0
c Var 'aux732' direct represents '1' with '3660'
3658 -3659 3660 0
-3660 3659 0
-3660 -3658 0
c Var 'aux732' direct represents '2' with '-3659'
3658 3660 -3659 0
c Encoding variable: aux733 with domain: int(0..2) (representing constraint ((x_00007_00007=1) + (x_00008_00007=1)))
c Both direct and order encoding.
c Var 'aux733' order represents '0' with '3661'
c Var 'aux733' direct represents '0' with '3661'
c Var 'aux733' order represents '1' with '3662'
-3661 3662 0
c Var 'aux733' direct represents '1' with '3663'
3661 -3662 3663 0
-3663 3662 0
-3663 -3661 0
c Var 'aux733' direct represents '2' with '-3662'
3661 3663 -3662 0
c Encoding variable: aux734 with domain: int(0..2) (representing constraint ((x_00002_00007=1) + (x_00006_00007=1)))
c Both direct and order encoding.
c Var 'aux734' order represents '0' with '3664'
c Var 'aux734' direct represents '0' with '3664'
c Var 'aux734' order represents '1' with '3665'
-3664 3665 0
c Var 'aux734' direct represents '1' with '3666'
3664 -3665 3666 0
-3666 3665 0
-3666 -3664 0
c Var 'aux734' direct represents '2' with '-3665'
3664 3666 -3665 0
c Encoding variable: aux735 with domain: int(0..2) (representing constraint ((x_00009_00007=1) + (x_00004_00007=1)))
c Both direct and order encoding.
c Var 'aux735' order represents '0' with '3667'
c Var 'aux735' direct represents '0' with '3667'
c Var 'aux735' order represents '1' with '3668'
-3667 3668 0
c Var 'aux735' direct represents '1' with '3669'
3667 -3668 3669 0
-3669 3668 0
-3669 -3667 0
c Var 'aux735' direct represents '2' with '-3668'
3667 3669 -3668 0
c Encoding variable: aux736 with domain: int(0..3) (representing constraint ((x_00001_00007=1) + aux735))
c Both direct and order encoding.
c Var 'aux736' order represents '0' with '3670'
c Var 'aux736' direct represents '0' with '3670'
c Var 'aux736' order represents '1' with '3671'
-3670 3671 0
c Var 'aux736' direct represents '1' with '3672'
3670 -3671 3672 0
-3672 3671 0
-3672 -3670 0
c Var 'aux736' order represents '2' with '3673'
-3671 3673 0
c Var 'aux736' direct represents '2' with '3674'
3671 -3673 3674 0
-3674 3673 0
-3674 -3671 0
c Var 'aux736' direct represents '3' with '-3673'
3670 3672 3674 -3673 0
c Encoding variable: aux737 with domain: int(0..4) (representing constraint (aux732 + aux734))
c Both direct and order encoding.
c Var 'aux737' order represents '0' with '3675'
c Var 'aux737' direct represents '0' with '3675'
c Var 'aux737' order represents '1' with '3676'
-3675 3676 0
c Var 'aux737' direct represents '1' with '3677'
3675 -3676 3677 0
-3677 3676 0
-3677 -3675 0
c Var 'aux737' order represents '2' with '3678'
-3676 3678 0
c Var 'aux737' direct represents '2' with '3679'
3676 -3678 3679 0
-3679 3678 0
-3679 -3676 0
c Var 'aux737' order represents '3' with '3680'
-3678 3680 0
c Var 'aux737' direct represents '3' with '3681'
3678 -3680 3681 0
-3681 3680 0
-3681 -3678 0
c Var 'aux737' direct represents '4' with '-3680'
3675 3677 3679 3681 -3680 0
c Encoding variable: aux738 with domain: int(0..2) (representing constraint ((x_00003_00007=2) + (x_00005_00007=2)))
c Both direct and order encoding.
c Var 'aux738' order represents '0' with '3682'
c Var 'aux738' direct represents '0' with '3682'
c Var 'aux738' order represents '1' with '3683'
-3682 3683 0
c Var 'aux738' direct represents '1' with '3684'
3682 -3683 3684 0
-3684 3683 0
-3684 -3682 0
c Var 'aux738' direct represents '2' with '-3683'
3682 3684 -3683 0
c Encoding variable: aux739 with domain: int(0..2) (representing constraint ((x_00007_00007=2) + (x_00008_00007=2)))
c Both direct and order encoding.
c Var 'aux739' order represents '0' with '3685'
c Var 'aux739' direct represents '0' with '3685'
c Var 'aux739' order represents '1' with '3686'
-3685 3686 0
c Var 'aux739' direct represents '1' with '3687'
3685 -3686 3687 0
-3687 3686 0
-3687 -3685 0
c Var 'aux739' direct represents '2' with '-3686'
3685 3687 -3686 0
c Encoding variable: aux740 with domain: int(0..2) (representing constraint ((x_00002_00007=2) + (x_00006_00007=2)))
c Both direct and order encoding.
c Var 'aux740' order represents '0' with '3688'
c Var 'aux740' direct represents '0' with '3688'
c Var 'aux740' order represents '1' with '3689'
-3688 3689 0
c Var 'aux740' direct represents '1' with '3690'
3688 -3689 3690 0
-3690 3689 0
-3690 -3688 0
c Var 'aux740' direct represents '2' with '-3689'
3688 3690 -3689 0
c Encoding variable: aux741 with domain: int(0..2) (representing constraint ((x_00009_00007=2) + (x_00004_00007=2)))
c Both direct and order encoding.
c Var 'aux741' order represents '0' with '3691'
c Var 'aux741' direct represents '0' with '3691'
c Var 'aux741' order represents '1' with '3692'
-3691 3692 0
c Var 'aux741' direct represents '1' with '3693'
3691 -3692 3693 0
-3693 3692 0
-3693 -3691 0
c Var 'aux741' direct represents '2' with '-3692'
3691 3693 -3692 0
c Encoding variable: aux742 with domain: int(0..3) (representing constraint ((x_00001_00007=2) + aux741))
c Both direct and order encoding.
c Var 'aux742' order represents '0' with '3694'
c Var 'aux742' direct represents '0' with '3694'
c Var 'aux742' order represents '1' with '3695'
-3694 3695 0
c Var 'aux742' direct represents '1' with '3696'
3694 -3695 3696 0
-3696 3695 0
-3696 -3694 0
c Var 'aux742' order represents '2' with '3697'
-3695 3697 0
c Var 'aux742' direct represents '2' with '3698'
3695 -3697 3698 0
-3698 3697 0
-3698 -3695 0
c Var 'aux742' direct represents '3' with '-3697'
3694 3696 3698 -3697 0
c Encoding variable: aux743 with domain: int(0..4) (representing constraint (aux738 + aux740))
c Both direct and order encoding.
c Var 'aux743' order represents '0' with '3699'
c Var 'aux743' direct represents '0' with '3699'
c Var 'aux743' order represents '1' with '3700'
-3699 3700 0
c Var 'aux743' direct represents '1' with '3701'
3699 -3700 3701 0
-3701 3700 0
-3701 -3699 0
c Var 'aux743' order represents '2' with '3702'
-3700 3702 0
c Var 'aux743' direct represents '2' with '3703'
3700 -3702 3703 0
-3703 3702 0
-3703 -3700 0
c Var 'aux743' order represents '3' with '3704'
-3702 3704 0
c Var 'aux743' direct represents '3' with '3705'
3702 -3704 3705 0
-3705 3704 0
-3705 -3702 0
c Var 'aux743' direct represents '4' with '-3704'
3699 3701 3703 3705 -3704 0
c Encoding variable: aux744 with domain: int(0..2) (representing constraint ((x_00003_00007=3) + (x_00005_00007=3)))
c Both direct and order encoding.
c Var 'aux744' order represents '0' with '3706'
c Var 'aux744' direct represents '0' with '3706'
c Var 'aux744' order represents '1' with '3707'
-3706 3707 0
c Var 'aux744' direct represents '1' with '3708'
3706 -3707 3708 0
-3708 3707 0
-3708 -3706 0
c Var 'aux744' direct represents '2' with '-3707'
3706 3708 -3707 0
c Encoding variable: aux745 with domain: int(0..2) (representing constraint ((x_00007_00007=3) + (x_00008_00007=3)))
c Both direct and order encoding.
c Var 'aux745' order represents '0' with '3709'
c Var 'aux745' direct represents '0' with '3709'
c Var 'aux745' order represents '1' with '3710'
-3709 3710 0
c Var 'aux745' direct represents '1' with '3711'
3709 -3710 3711 0
-3711 3710 0
-3711 -3709 0
c Var 'aux745' direct represents '2' with '-3710'
3709 3711 -3710 0
c Encoding variable: aux746 with domain: int(0..2) (representing constraint ((x_00002_00007=3) + (x_00006_00007=3)))
c Both direct and order encoding.
c Var 'aux746' order represents '0' with '3712'
c Var 'aux746' direct represents '0' with '3712'
c Var 'aux746' order represents '1' with '3713'
-3712 3713 0
c Var 'aux746' direct represents '1' with '3714'
3712 -3713 3714 0
-3714 3713 0
-3714 -3712 0
c Var 'aux746' direct represents '2' with '-3713'
3712 3714 -3713 0
c Encoding variable: aux747 with domain: int(0..2) (representing constraint ((x_00009_00007=3) + (x_00004_00007=3)))
c Both direct and order encoding.
c Var 'aux747' order represents '0' with '3715'
c Var 'aux747' direct represents '0' with '3715'
c Var 'aux747' order represents '1' with '3716'
-3715 3716 0
c Var 'aux747' direct represents '1' with '3717'
3715 -3716 3717 0
-3717 3716 0
-3717 -3715 0
c Var 'aux747' direct represents '2' with '-3716'
3715 3717 -3716 0
c Encoding variable: aux748 with domain: int(0..3) (representing constraint ((x_00001_00007=3) + aux747))
c Both direct and order encoding.
c Var 'aux748' order represents '0' with '3718'
c Var 'aux748' direct represents '0' with '3718'
c Var 'aux748' order represents '1' with '3719'
-3718 3719 0
c Var 'aux748' direct represents '1' with '3720'
3718 -3719 3720 0
-3720 3719 0
-3720 -3718 0
c Var 'aux748' order represents '2' with '3721'
-3719 3721 0
c Var 'aux748' direct represents '2' with '3722'
3719 -3721 3722 0
-3722 3721 0
-3722 -3719 0
c Var 'aux748' direct represents '3' with '-3721'
3718 3720 3722 -3721 0
c Encoding variable: aux749 with domain: int(0..4) (representing constraint (aux744 + aux746))
c Both direct and order encoding.
c Var 'aux749' order represents '0' with '3723'
c Var 'aux749' direct represents '0' with '3723'
c Var 'aux749' order represents '1' with '3724'
-3723 3724 0
c Var 'aux749' direct represents '1' with '3725'
3723 -3724 3725 0
-3725 3724 0
-3725 -3723 0
c Var 'aux749' order represents '2' with '3726'
-3724 3726 0
c Var 'aux749' direct represents '2' with '3727'
3724 -3726 3727 0
-3727 3726 0
-3727 -3724 0
c Var 'aux749' order represents '3' with '3728'
-3726 3728 0
c Var 'aux749' direct represents '3' with '3729'
3726 -3728 3729 0
-3729 3728 0
-3729 -3726 0
c Var 'aux749' direct represents '4' with '-3728'
3723 3725 3727 3729 -3728 0
c Encoding variable: aux750 with domain: int(0..2) (representing constraint ((x_00003_00007=4) + (x_00005_00007=4)))
c Both direct and order encoding.
c Var 'aux750' order represents '0' with '3730'
c Var 'aux750' direct represents '0' with '3730'
c Var 'aux750' order represents '1' with '3731'
-3730 3731 0
c Var 'aux750' direct represents '1' with '3732'
3730 -3731 3732 0
-3732 3731 0
-3732 -3730 0
c Var 'aux750' direct represents '2' with '-3731'
3730 3732 -3731 0
c Encoding variable: aux751 with domain: int(0..2) (representing constraint ((x_00007_00007=4) + (x_00008_00007=4)))
c Both direct and order encoding.
c Var 'aux751' order represents '0' with '3733'
c Var 'aux751' direct represents '0' with '3733'
c Var 'aux751' order represents '1' with '3734'
-3733 3734 0
c Var 'aux751' direct represents '1' with '3735'
3733 -3734 3735 0
-3735 3734 0
-3735 -3733 0
c Var 'aux751' direct represents '2' with '-3734'
3733 3735 -3734 0
c Encoding variable: aux752 with domain: int(0..2) (representing constraint ((x_00002_00007=4) + (x_00006_00007=4)))
c Both direct and order encoding.
c Var 'aux752' order represents '0' with '3736'
c Var 'aux752' direct represents '0' with '3736'
c Var 'aux752' order represents '1' with '3737'
-3736 3737 0
c Var 'aux752' direct represents '1' with '3738'
3736 -3737 3738 0
-3738 3737 0
-3738 -3736 0
c Var 'aux752' direct represents '2' with '-3737'
3736 3738 -3737 0
c Encoding variable: aux753 with domain: int(0..2) (representing constraint ((x_00009_00007=4) + (x_00004_00007=4)))
c Both direct and order encoding.
c Var 'aux753' order represents '0' with '3739'
c Var 'aux753' direct represents '0' with '3739'
c Var 'aux753' order represents '1' with '3740'
-3739 3740 0
c Var 'aux753' direct represents '1' with '3741'
3739 -3740 3741 0
-3741 3740 0
-3741 -3739 0
c Var 'aux753' direct represents '2' with '-3740'
3739 3741 -3740 0
c Encoding variable: aux754 with domain: int(0..3) (representing constraint ((x_00001_00007=4) + aux753))
c Both direct and order encoding.
c Var 'aux754' order represents '0' with '3742'
c Var 'aux754' direct represents '0' with '3742'
c Var 'aux754' order represents '1' with '3743'
-3742 3743 0
c Var 'aux754' direct represents '1' with '3744'
3742 -3743 3744 0
-3744 3743 0
-3744 -3742 0
c Var 'aux754' order represents '2' with '3745'
-3743 3745 0
c Var 'aux754' direct represents '2' with '3746'
3743 -3745 3746 0
-3746 3745 0
-3746 -3743 0
c Var 'aux754' direct represents '3' with '-3745'
3742 3744 3746 -3745 0
c Encoding variable: aux755 with domain: int(0..4) (representing constraint (aux750 + aux752))
c Both direct and order encoding.
c Var 'aux755' order represents '0' with '3747'
c Var 'aux755' direct represents '0' with '3747'
c Var 'aux755' order represents '1' with '3748'
-3747 3748 0
c Var 'aux755' direct represents '1' with '3749'
3747 -3748 3749 0
-3749 3748 0
-3749 -3747 0
c Var 'aux755' order represents '2' with '3750'
-3748 3750 0
c Var 'aux755' direct represents '2' with '3751'
3748 -3750 3751 0
-3751 3750 0
-3751 -3748 0
c Var 'aux755' order represents '3' with '3752'
-3750 3752 0
c Var 'aux755' direct represents '3' with '3753'
3750 -3752 3753 0
-3753 3752 0
-3753 -3750 0
c Var 'aux755' direct represents '4' with '-3752'
3747 3749 3751 3753 -3752 0
c Encoding variable: aux756 with domain: int(0..2) (representing constraint ((x_00003_00007=5) + (x_00005_00007=5)))
c Both direct and order encoding.
c Var 'aux756' order represents '0' with '3754'
c Var 'aux756' direct represents '0' with '3754'
c Var 'aux756' order represents '1' with '3755'
-3754 3755 0
c Var 'aux756' direct represents '1' with '3756'
3754 -3755 3756 0
-3756 3755 0
-3756 -3754 0
c Var 'aux756' direct represents '2' with '-3755'
3754 3756 -3755 0
c Encoding variable: aux757 with domain: int(0..2) (representing constraint ((x_00007_00007=5) + (x_00008_00007=5)))
c Both direct and order encoding.
c Var 'aux757' order represents '0' with '3757'
c Var 'aux757' direct represents '0' with '3757'
c Var 'aux757' order represents '1' with '3758'
-3757 3758 0
c Var 'aux757' direct represents '1' with '3759'
3757 -3758 3759 0
-3759 3758 0
-3759 -3757 0
c Var 'aux757' direct represents '2' with '-3758'
3757 3759 -3758 0
c Encoding variable: aux758 with domain: int(0..2) (representing constraint ((x_00002_00007=5) + (x_00006_00007=5)))
c Both direct and order encoding.
c Var 'aux758' order represents '0' with '3760'
c Var 'aux758' direct represents '0' with '3760'
c Var 'aux758' order represents '1' with '3761'
-3760 3761 0
c Var 'aux758' direct represents '1' with '3762'
3760 -3761 3762 0
-3762 3761 0
-3762 -3760 0
c Var 'aux758' direct represents '2' with '-3761'
3760 3762 -3761 0
c Encoding variable: aux759 with domain: int(0..2) (representing constraint ((x_00009_00007=5) + (x_00004_00007=5)))
c Both direct and order encoding.
c Var 'aux759' order represents '0' with '3763'
c Var 'aux759' direct represents '0' with '3763'
c Var 'aux759' order represents '1' with '3764'
-3763 3764 0
c Var 'aux759' direct represents '1' with '3765'
3763 -3764 3765 0
-3765 3764 0
-3765 -3763 0
c Var 'aux759' direct represents '2' with '-3764'
3763 3765 -3764 0
c Encoding variable: aux760 with domain: int(0..3) (representing constraint ((x_00001_00007=5) + aux759))
c Both direct and order encoding.
c Var 'aux760' order represents '0' with '3766'
c Var 'aux760' direct represents '0' with '3766'
c Var 'aux760' order represents '1' with '3767'
-3766 3767 0
c Var 'aux760' direct represents '1' with '3768'
3766 -3767 3768 0
-3768 3767 0
-3768 -3766 0
c Var 'aux760' order represents '2' with '3769'
-3767 3769 0
c Var 'aux760' direct represents '2' with '3770'
3767 -3769 3770 0
-3770 3769 0
-3770 -3767 0
c Var 'aux760' direct represents '3' with '-3769'
3766 3768 3770 -3769 0
c Encoding variable: aux761 with domain: int(0..4) (representing constraint (aux756 + aux758))
c Both direct and order encoding.
c Var 'aux761' order represents '0' with '3771'
c Var 'aux761' direct represents '0' with '3771'
c Var 'aux761' order represents '1' with '3772'
-3771 3772 0
c Var 'aux761' direct represents '1' with '3773'
3771 -3772 3773 0
-3773 3772 0
-3773 -3771 0
c Var 'aux761' order represents '2' with '3774'
-3772 3774 0
c Var 'aux761' direct represents '2' with '3775'
3772 -3774 3775 0
-3775 3774 0
-3775 -3772 0
c Var 'aux761' order represents '3' with '3776'
-3774 3776 0
c Var 'aux761' direct represents '3' with '3777'
3774 -3776 3777 0
-3777 3776 0
-3777 -3774 0
c Var 'aux761' direct represents '4' with '-3776'
3771 3773 3775 3777 -3776 0
c Encoding variable: aux762 with domain: int(0..2) (representing constraint ((x_00003_00007=6) + (x_00005_00007=6)))
c Both direct and order encoding.
c Var 'aux762' order represents '0' with '3778'
c Var 'aux762' direct represents '0' with '3778'
c Var 'aux762' order represents '1' with '3779'
-3778 3779 0
c Var 'aux762' direct represents '1' with '3780'
3778 -3779 3780 0
-3780 3779 0
-3780 -3778 0
c Var 'aux762' direct represents '2' with '-3779'
3778 3780 -3779 0
c Encoding variable: aux763 with domain: int(0..2) (representing constraint ((x_00007_00007=6) + (x_00008_00007=6)))
c Both direct and order encoding.
c Var 'aux763' order represents '0' with '3781'
c Var 'aux763' direct represents '0' with '3781'
c Var 'aux763' order represents '1' with '3782'
-3781 3782 0
c Var 'aux763' direct represents '1' with '3783'
3781 -3782 3783 0
-3783 3782 0
-3783 -3781 0
c Var 'aux763' direct represents '2' with '-3782'
3781 3783 -3782 0
c Encoding variable: aux764 with domain: int(0..2) (representing constraint ((x_00002_00007=6) + (x_00006_00007=6)))
c Both direct and order encoding.
c Var 'aux764' order represents '0' with '3784'
c Var 'aux764' direct represents '0' with '3784'
c Var 'aux764' order represents '1' with '3785'
-3784 3785 0
c Var 'aux764' direct represents '1' with '3786'
3784 -3785 3786 0
-3786 3785 0
-3786 -3784 0
c Var 'aux764' direct represents '2' with '-3785'
3784 3786 -3785 0
c Encoding variable: aux765 with domain: int(0..2) (representing constraint ((x_00009_00007=6) + (x_00004_00007=6)))
c Both direct and order encoding.
c Var 'aux765' order represents '0' with '3787'
c Var 'aux765' direct represents '0' with '3787'
c Var 'aux765' order represents '1' with '3788'
-3787 3788 0
c Var 'aux765' direct represents '1' with '3789'
3787 -3788 3789 0
-3789 3788 0
-3789 -3787 0
c Var 'aux765' direct represents '2' with '-3788'
3787 3789 -3788 0
c Encoding variable: aux766 with domain: int(0..3) (representing constraint ((x_00001_00007=6) + aux765))
c Both direct and order encoding.
c Var 'aux766' order represents '0' with '3790'
c Var 'aux766' direct represents '0' with '3790'
c Var 'aux766' order represents '1' with '3791'
-3790 3791 0
c Var 'aux766' direct represents '1' with '3792'
3790 -3791 3792 0
-3792 3791 0
-3792 -3790 0
c Var 'aux766' order represents '2' with '3793'
-3791 3793 0
c Var 'aux766' direct represents '2' with '3794'
3791 -3793 3794 0
-3794 3793 0
-3794 -3791 0
c Var 'aux766' direct represents '3' with '-3793'
3790 3792 3794 -3793 0
c Encoding variable: aux767 with domain: int(0..4) (representing constraint (aux762 + aux764))
c Both direct and order encoding.
c Var 'aux767' order represents '0' with '3795'
c Var 'aux767' direct represents '0' with '3795'
c Var 'aux767' order represents '1' with '3796'
-3795 3796 0
c Var 'aux767' direct represents '1' with '3797'
3795 -3796 3797 0
-3797 3796 0
-3797 -3795 0
c Var 'aux767' order represents '2' with '3798'
-3796 3798 0
c Var 'aux767' direct represents '2' with '3799'
3796 -3798 3799 0
-3799 3798 0
-3799 -3796 0
c Var 'aux767' order represents '3' with '3800'
-3798 3800 0
c Var 'aux767' direct represents '3' with '3801'
3798 -3800 3801 0
-3801 3800 0
-3801 -3798 0
c Var 'aux767' direct represents '4' with '-3800'
3795 3797 3799 3801 -3800 0
c Encoding variable: aux768 with domain: int(0..2) (representing constraint ((x_00003_00007=7) + (x_00005_00007=7)))
c Both direct and order encoding.
c Var 'aux768' order represents '0' with '3802'
c Var 'aux768' direct represents '0' with '3802'
c Var 'aux768' order represents '1' with '3803'
-3802 3803 0
c Var 'aux768' direct represents '1' with '3804'
3802 -3803 3804 0
-3804 3803 0
-3804 -3802 0
c Var 'aux768' direct represents '2' with '-3803'
3802 3804 -3803 0
c Encoding variable: aux769 with domain: int(0..2) (representing constraint ((x_00007_00007=7) + (x_00008_00007=7)))
c Both direct and order encoding.
c Var 'aux769' order represents '0' with '3805'
c Var 'aux769' direct represents '0' with '3805'
c Var 'aux769' order represents '1' with '3806'
-3805 3806 0
c Var 'aux769' direct represents '1' with '3807'
3805 -3806 3807 0
-3807 3806 0
-3807 -3805 0
c Var 'aux769' direct represents '2' with '-3806'
3805 3807 -3806 0
c Encoding variable: aux770 with domain: int(0..2) (representing constraint ((x_00002_00007=7) + (x_00006_00007=7)))
c Both direct and order encoding.
c Var 'aux770' order represents '0' with '3808'
c Var 'aux770' direct represents '0' with '3808'
c Var 'aux770' order represents '1' with '3809'
-3808 3809 0
c Var 'aux770' direct represents '1' with '3810'
3808 -3809 3810 0
-3810 3809 0
-3810 -3808 0
c Var 'aux770' direct represents '2' with '-3809'
3808 3810 -3809 0
c Encoding variable: aux771 with domain: int(0..2) (representing constraint ((x_00009_00007=7) + (x_00004_00007=7)))
c Both direct and order encoding.
c Var 'aux771' order represents '0' with '3811'
c Var 'aux771' direct represents '0' with '3811'
c Var 'aux771' order represents '1' with '3812'
-3811 3812 0
c Var 'aux771' direct represents '1' with '3813'
3811 -3812 3813 0
-3813 3812 0
-3813 -3811 0
c Var 'aux771' direct represents '2' with '-3812'
3811 3813 -3812 0
c Encoding variable: aux772 with domain: int(0..3) (representing constraint ((x_00001_00007=7) + aux771))
c Both direct and order encoding.
c Var 'aux772' order represents '0' with '3814'
c Var 'aux772' direct represents '0' with '3814'
c Var 'aux772' order represents '1' with '3815'
-3814 3815 0
c Var 'aux772' direct represents '1' with '3816'
3814 -3815 3816 0
-3816 3815 0
-3816 -3814 0
c Var 'aux772' order represents '2' with '3817'
-3815 3817 0
c Var 'aux772' direct represents '2' with '3818'
3815 -3817 3818 0
-3818 3817 0
-3818 -3815 0
c Var 'aux772' direct represents '3' with '-3817'
3814 3816 3818 -3817 0
c Encoding variable: aux773 with domain: int(0..4) (representing constraint (aux768 + aux770))
c Both direct and order encoding.
c Var 'aux773' order represents '0' with '3819'
c Var 'aux773' direct represents '0' with '3819'
c Var 'aux773' order represents '1' with '3820'
-3819 3820 0
c Var 'aux773' direct represents '1' with '3821'
3819 -3820 3821 0
-3821 3820 0
-3821 -3819 0
c Var 'aux773' order represents '2' with '3822'
-3820 3822 0
c Var 'aux773' direct represents '2' with '3823'
3820 -3822 3823 0
-3823 3822 0
-3823 -3820 0
c Var 'aux773' order represents '3' with '3824'
-3822 3824 0
c Var 'aux773' direct represents '3' with '3825'
3822 -3824 3825 0
-3825 3824 0
-3825 -3822 0
c Var 'aux773' direct represents '4' with '-3824'
3819 3821 3823 3825 -3824 0
c Encoding variable: aux774 with domain: int(0..2) (representing constraint ((x_00003_00007=8) + (x_00005_00007=8)))
c Both direct and order encoding.
c Var 'aux774' order represents '0' with '3826'
c Var 'aux774' direct represents '0' with '3826'
c Var 'aux774' order represents '1' with '3827'
-3826 3827 0
c Var 'aux774' direct represents '1' with '3828'
3826 -3827 3828 0
-3828 3827 0
-3828 -3826 0
c Var 'aux774' direct represents '2' with '-3827'
3826 3828 -3827 0
c Encoding variable: aux775 with domain: int(0..2) (representing constraint ((x_00007_00007=8) + (x_00008_00007=8)))
c Both direct and order encoding.
c Var 'aux775' order represents '0' with '3829'
c Var 'aux775' direct represents '0' with '3829'
c Var 'aux775' order represents '1' with '3830'
-3829 3830 0
c Var 'aux775' direct represents '1' with '3831'
3829 -3830 3831 0
-3831 3830 0
-3831 -3829 0
c Var 'aux775' direct represents '2' with '-3830'
3829 3831 -3830 0
c Encoding variable: aux776 with domain: int(0..2) (representing constraint ((x_00002_00007=8) + (x_00006_00007=8)))
c Both direct and order encoding.
c Var 'aux776' order represents '0' with '3832'
c Var 'aux776' direct represents '0' with '3832'
c Var 'aux776' order represents '1' with '3833'
-3832 3833 0
c Var 'aux776' direct represents '1' with '3834'
3832 -3833 3834 0
-3834 3833 0
-3834 -3832 0
c Var 'aux776' direct represents '2' with '-3833'
3832 3834 -3833 0
c Encoding variable: aux777 with domain: int(0..2) (representing constraint ((x_00009_00007=8) + (x_00004_00007=8)))
c Both direct and order encoding.
c Var 'aux777' order represents '0' with '3835'
c Var 'aux777' direct represents '0' with '3835'
c Var 'aux777' order represents '1' with '3836'
-3835 3836 0
c Var 'aux777' direct represents '1' with '3837'
3835 -3836 3837 0
-3837 3836 0
-3837 -3835 0
c Var 'aux777' direct represents '2' with '-3836'
3835 3837 -3836 0
c Encoding variable: aux778 with domain: int(0..3) (representing constraint ((x_00001_00007=8) + aux777))
c Both direct and order encoding.
c Var 'aux778' order represents '0' with '3838'
c Var 'aux778' direct represents '0' with '3838'
c Var 'aux778' order represents '1' with '3839'
-3838 3839 0
c Var 'aux778' direct represents '1' with '3840'
3838 -3839 3840 0
-3840 3839 0
-3840 -3838 0
c Var 'aux778' order represents '2' with '3841'
-3839 3841 0
c Var 'aux778' direct represents '2' with '3842'
3839 -3841 3842 0
-3842 3841 0
-3842 -3839 0
c Var 'aux778' direct represents '3' with '-3841'
3838 3840 3842 -3841 0
c Encoding variable: aux779 with domain: int(0..4) (representing constraint (aux774 + aux776))
c Both direct and order encoding.
c Var 'aux779' order represents '0' with '3843'
c Var 'aux779' direct represents '0' with '3843'
c Var 'aux779' order represents '1' with '3844'
-3843 3844 0
c Var 'aux779' direct represents '1' with '3845'
3843 -3844 3845 0
-3845 3844 0
-3845 -3843 0
c Var 'aux779' order represents '2' with '3846'
-3844 3846 0
c Var 'aux779' direct represents '2' with '3847'
3844 -3846 3847 0
-3847 3846 0
-3847 -3844 0
c Var 'aux779' order represents '3' with '3848'
-3846 3848 0
c Var 'aux779' direct represents '3' with '3849'
3846 -3848 3849 0
-3849 3848 0
-3849 -3846 0
c Var 'aux779' direct represents '4' with '-3848'
3843 3845 3847 3849 -3848 0
c Encoding variable: aux780 with domain: int(0..2) (representing constraint ((x_00003_00007=9) + (x_00005_00007=9)))
c Both direct and order encoding.
c Var 'aux780' order represents '0' with '3850'
c Var 'aux780' direct represents '0' with '3850'
c Var 'aux780' order represents '1' with '3851'
-3850 3851 0
c Var 'aux780' direct represents '1' with '3852'
3850 -3851 3852 0
-3852 3851 0
-3852 -3850 0
c Var 'aux780' direct represents '2' with '-3851'
3850 3852 -3851 0
c Encoding variable: aux781 with domain: int(0..2) (representing constraint ((x_00007_00007=9) + (x_00008_00007=9)))
c Both direct and order encoding.
c Var 'aux781' order represents '0' with '3853'
c Var 'aux781' direct represents '0' with '3853'
c Var 'aux781' order represents '1' with '3854'
-3853 3854 0
c Var 'aux781' direct represents '1' with '3855'
3853 -3854 3855 0
-3855 3854 0
-3855 -3853 0
c Var 'aux781' direct represents '2' with '-3854'
3853 3855 -3854 0
c Encoding variable: aux782 with domain: int(0..2) (representing constraint ((x_00002_00007=9) + (x_00006_00007=9)))
c Both direct and order encoding.
c Var 'aux782' order represents '0' with '3856'
c Var 'aux782' direct represents '0' with '3856'
c Var 'aux782' order represents '1' with '3857'
-3856 3857 0
c Var 'aux782' direct represents '1' with '3858'
3856 -3857 3858 0
-3858 3857 0
-3858 -3856 0
c Var 'aux782' direct represents '2' with '-3857'
3856 3858 -3857 0
c Encoding variable: aux783 with domain: int(0..2) (representing constraint ((x_00009_00007=9) + (x_00004_00007=9)))
c Both direct and order encoding.
c Var 'aux783' order represents '0' with '3859'
c Var 'aux783' direct represents '0' with '3859'
c Var 'aux783' order represents '1' with '3860'
-3859 3860 0
c Var 'aux783' direct represents '1' with '3861'
3859 -3860 3861 0
-3861 3860 0
-3861 -3859 0
c Var 'aux783' direct represents '2' with '-3860'
3859 3861 -3860 0
c Encoding variable: aux784 with domain: int(0..3) (representing constraint ((x_00001_00007=9) + aux783))
c Both direct and order encoding.
c Var 'aux784' order represents '0' with '3862'
c Var 'aux784' direct represents '0' with '3862'
c Var 'aux784' order represents '1' with '3863'
-3862 3863 0
c Var 'aux784' direct represents '1' with '3864'
3862 -3863 3864 0
-3864 3863 0
-3864 -3862 0
c Var 'aux784' order represents '2' with '3865'
-3863 3865 0
c Var 'aux784' direct represents '2' with '3866'
3863 -3865 3866 0
-3866 3865 0
-3866 -3863 0
c Var 'aux784' direct represents '3' with '-3865'
3862 3864 3866 -3865 0
c Encoding variable: aux785 with domain: int(0..4) (representing constraint (aux780 + aux782))
c Both direct and order encoding.
c Var 'aux785' order represents '0' with '3867'
c Var 'aux785' direct represents '0' with '3867'
c Var 'aux785' order represents '1' with '3868'
-3867 3868 0
c Var 'aux785' direct represents '1' with '3869'
3867 -3868 3869 0
-3869 3868 0
-3869 -3867 0
c Var 'aux785' order represents '2' with '3870'
-3868 3870 0
c Var 'aux785' direct represents '2' with '3871'
3868 -3870 3871 0
-3871 3870 0
-3871 -3868 0
c Var 'aux785' order represents '3' with '3872'
-3870 3872 0
c Var 'aux785' direct represents '3' with '3873'
3870 -3872 3873 0
-3873 3872 0
-3873 -3870 0
c Var 'aux785' direct represents '4' with '-3872'
3867 3869 3871 3873 -3872 0
c Encoding variable: aux786 with domain: int(0..2) (representing constraint ((x_00003_00008=1) + (x_00005_00008=1)))
c Both direct and order encoding.
c Var 'aux786' order represents '0' with '3874'
c Var 'aux786' direct represents '0' with '3874'
c Var 'aux786' order represents '1' with '3875'
-3874 3875 0
c Var 'aux786' direct represents '1' with '3876'
3874 -3875 3876 0
-3876 3875 0
-3876 -3874 0
c Var 'aux786' direct represents '2' with '-3875'
3874 3876 -3875 0
c Encoding variable: aux787 with domain: int(0..2) (representing constraint ((x_00007_00008=1) + (x_00008_00008=1)))
c Both direct and order encoding.
c Var 'aux787' order represents '0' with '3877'
c Var 'aux787' direct represents '0' with '3877'
c Var 'aux787' order represents '1' with '3878'
-3877 3878 0
c Var 'aux787' direct represents '1' with '3879'
3877 -3878 3879 0
-3879 3878 0
-3879 -3877 0
c Var 'aux787' direct represents '2' with '-3878'
3877 3879 -3878 0
c Encoding variable: aux788 with domain: int(0..2) (representing constraint ((x_00002_00008=1) + (x_00006_00008=1)))
c Both direct and order encoding.
c Var 'aux788' order represents '0' with '3880'
c Var 'aux788' direct represents '0' with '3880'
c Var 'aux788' order represents '1' with '3881'
-3880 3881 0
c Var 'aux788' direct represents '1' with '3882'
3880 -3881 3882 0
-3882 3881 0
-3882 -3880 0
c Var 'aux788' direct represents '2' with '-3881'
3880 3882 -3881 0
c Encoding variable: aux789 with domain: int(0..2) (representing constraint ((x_00009_00008=1) + (x_00004_00008=1)))
c Both direct and order encoding.
c Var 'aux789' order represents '0' with '3883'
c Var 'aux789' direct represents '0' with '3883'
c Var 'aux789' order represents '1' with '3884'
-3883 3884 0
c Var 'aux789' direct represents '1' with '3885'
3883 -3884 3885 0
-3885 3884 0
-3885 -3883 0
c Var 'aux789' direct represents '2' with '-3884'
3883 3885 -3884 0
c Encoding variable: aux790 with domain: int(0..3) (representing constraint ((x_00001_00008=1) + aux789))
c Both direct and order encoding.
c Var 'aux790' order represents '0' with '3886'
c Var 'aux790' direct represents '0' with '3886'
c Var 'aux790' order represents '1' with '3887'
-3886 3887 0
c Var 'aux790' direct represents '1' with '3888'
3886 -3887 3888 0
-3888 3887 0
-3888 -3886 0
c Var 'aux790' order represents '2' with '3889'
-3887 3889 0
c Var 'aux790' direct represents '2' with '3890'
3887 -3889 3890 0
-3890 3889 0
-3890 -3887 0
c Var 'aux790' direct represents '3' with '-3889'
3886 3888 3890 -3889 0
c Encoding variable: aux791 with domain: int(0..4) (representing constraint (aux786 + aux788))
c Both direct and order encoding.
c Var 'aux791' order represents '0' with '3891'
c Var 'aux791' direct represents '0' with '3891'
c Var 'aux791' order represents '1' with '3892'
-3891 3892 0
c Var 'aux791' direct represents '1' with '3893'
3891 -3892 3893 0
-3893 3892 0
-3893 -3891 0
c Var 'aux791' order represents '2' with '3894'
-3892 3894 0
c Var 'aux791' direct represents '2' with '3895'
3892 -3894 3895 0
-3895 3894 0
-3895 -3892 0
c Var 'aux791' order represents '3' with '3896'
-3894 3896 0
c Var 'aux791' direct represents '3' with '3897'
3894 -3896 3897 0
-3897 3896 0
-3897 -3894 0
c Var 'aux791' direct represents '4' with '-3896'
3891 3893 3895 3897 -3896 0
c Encoding variable: aux792 with domain: int(0..2) (representing constraint ((x_00003_00008=2) + (x_00005_00008=2)))
c Both direct and order encoding.
c Var 'aux792' order represents '0' with '3898'
c Var 'aux792' direct represents '0' with '3898'
c Var 'aux792' order represents '1' with '3899'
-3898 3899 0
c Var 'aux792' direct represents '1' with '3900'
3898 -3899 3900 0
-3900 3899 0
-3900 -3898 0
c Var 'aux792' direct represents '2' with '-3899'
3898 3900 -3899 0
c Encoding variable: aux793 with domain: int(0..2) (representing constraint ((x_00007_00008=2) + (x_00008_00008=2)))
c Both direct and order encoding.
c Var 'aux793' order represents '0' with '3901'
c Var 'aux793' direct represents '0' with '3901'
c Var 'aux793' order represents '1' with '3902'
-3901 3902 0
c Var 'aux793' direct represents '1' with '3903'
3901 -3902 3903 0
-3903 3902 0
-3903 -3901 0
c Var 'aux793' direct represents '2' with '-3902'
3901 3903 -3902 0
c Encoding variable: aux794 with domain: int(0..2) (representing constraint ((x_00002_00008=2) + (x_00006_00008=2)))
c Both direct and order encoding.
c Var 'aux794' order represents '0' with '3904'
c Var 'aux794' direct represents '0' with '3904'
c Var 'aux794' order represents '1' with '3905'
-3904 3905 0
c Var 'aux794' direct represents '1' with '3906'
3904 -3905 3906 0
-3906 3905 0
-3906 -3904 0
c Var 'aux794' direct represents '2' with '-3905'
3904 3906 -3905 0
c Encoding variable: aux795 with domain: int(0..2) (representing constraint ((x_00009_00008=2) + (x_00004_00008=2)))
c Both direct and order encoding.
c Var 'aux795' order represents '0' with '3907'
c Var 'aux795' direct represents '0' with '3907'
c Var 'aux795' order represents '1' with '3908'
-3907 3908 0
c Var 'aux795' direct represents '1' with '3909'
3907 -3908 3909 0
-3909 3908 0
-3909 -3907 0
c Var 'aux795' direct represents '2' with '-3908'
3907 3909 -3908 0
c Encoding variable: aux796 with domain: int(0..3) (representing constraint ((x_00001_00008=2) + aux795))
c Both direct and order encoding.
c Var 'aux796' order represents '0' with '3910'
c Var 'aux796' direct represents '0' with '3910'
c Var 'aux796' order represents '1' with '3911'
-3910 3911 0
c Var 'aux796' direct represents '1' with '3912'
3910 -3911 3912 0
-3912 3911 0
-3912 -3910 0
c Var 'aux796' order represents '2' with '3913'
-3911 3913 0
c Var 'aux796' direct represents '2' with '3914'
3911 -3913 3914 0
-3914 3913 0
-3914 -3911 0
c Var 'aux796' direct represents '3' with '-3913'
3910 3912 3914 -3913 0
c Encoding variable: aux797 with domain: int(0..4) (representing constraint (aux792 + aux794))
c Both direct and order encoding.
c Var 'aux797' order represents '0' with '3915'
c Var 'aux797' direct represents '0' with '3915'
c Var 'aux797' order represents '1' with '3916'
-3915 3916 0
c Var 'aux797' direct represents '1' with '3917'
3915 -3916 3917 0
-3917 3916 0
-3917 -3915 0
c Var 'aux797' order represents '2' with '3918'
-3916 3918 0
c Var 'aux797' direct represents '2' with '3919'
3916 -3918 3919 0
-3919 3918 0
-3919 -3916 0
c Var 'aux797' order represents '3' with '3920'
-3918 3920 0
c Var 'aux797' direct represents '3' with '3921'
3918 -3920 3921 0
-3921 3920 0
-3921 -3918 0
c Var 'aux797' direct represents '4' with '-3920'
3915 3917 3919 3921 -3920 0
c Encoding variable: aux798 with domain: int(0..2) (representing constraint ((x_00003_00008=3) + (x_00005_00008=3)))
c Both direct and order encoding.
c Var 'aux798' order represents '0' with '3922'
c Var 'aux798' direct represents '0' with '3922'
c Var 'aux798' order represents '1' with '3923'
-3922 3923 0
c Var 'aux798' direct represents '1' with '3924'
3922 -3923 3924 0
-3924 3923 0
-3924 -3922 0
c Var 'aux798' direct represents '2' with '-3923'
3922 3924 -3923 0
c Encoding variable: aux799 with domain: int(0..2) (representing constraint ((x_00007_00008=3) + (x_00008_00008=3)))
c Both direct and order encoding.
c Var 'aux799' order represents '0' with '3925'
c Var 'aux799' direct represents '0' with '3925'
c Var 'aux799' order represents '1' with '3926'
-3925 3926 0
c Var 'aux799' direct represents '1' with '3927'
3925 -3926 3927 0
-3927 3926 0
-3927 -3925 0
c Var 'aux799' direct represents '2' with '-3926'
3925 3927 -3926 0
c Encoding variable: aux800 with domain: int(0..2) (representing constraint ((x_00002_00008=3) + (x_00006_00008=3)))
c Both direct and order encoding.
c Var 'aux800' order represents '0' with '3928'
c Var 'aux800' direct represents '0' with '3928'
c Var 'aux800' order represents '1' with '3929'
-3928 3929 0
c Var 'aux800' direct represents '1' with '3930'
3928 -3929 3930 0
-3930 3929 0
-3930 -3928 0
c Var 'aux800' direct represents '2' with '-3929'
3928 3930 -3929 0
c Encoding variable: aux801 with domain: int(0..2) (representing constraint ((x_00009_00008=3) + (x_00004_00008=3)))
c Both direct and order encoding.
c Var 'aux801' order represents '0' with '3931'
c Var 'aux801' direct represents '0' with '3931'
c Var 'aux801' order represents '1' with '3932'
-3931 3932 0
c Var 'aux801' direct represents '1' with '3933'
3931 -3932 3933 0
-3933 3932 0
-3933 -3931 0
c Var 'aux801' direct represents '2' with '-3932'
3931 3933 -3932 0
c Encoding variable: aux802 with domain: int(0..3) (representing constraint ((x_00001_00008=3) + aux801))
c Both direct and order encoding.
c Var 'aux802' order represents '0' with '3934'
c Var 'aux802' direct represents '0' with '3934'
c Var 'aux802' order represents '1' with '3935'
-3934 3935 0
c Var 'aux802' direct represents '1' with '3936'
3934 -3935 3936 0
-3936 3935 0
-3936 -3934 0
c Var 'aux802' order represents '2' with '3937'
-3935 3937 0
c Var 'aux802' direct represents '2' with '3938'
3935 -3937 3938 0
-3938 3937 0
-3938 -3935 0
c Var 'aux802' direct represents '3' with '-3937'
3934 3936 3938 -3937 0
c Encoding variable: aux803 with domain: int(0..4) (representing constraint (aux798 + aux800))
c Both direct and order encoding.
c Var 'aux803' order represents '0' with '3939'
c Var 'aux803' direct represents '0' with '3939'
c Var 'aux803' order represents '1' with '3940'
-3939 3940 0
c Var 'aux803' direct represents '1' with '3941'
3939 -3940 3941 0
-3941 3940 0
-3941 -3939 0
c Var 'aux803' order represents '2' with '3942'
-3940 3942 0
c Var 'aux803' direct represents '2' with '3943'
3940 -3942 3943 0
-3943 3942 0
-3943 -3940 0
c Var 'aux803' order represents '3' with '3944'
-3942 3944 0
c Var 'aux803' direct represents '3' with '3945'
3942 -3944 3945 0
-3945 3944 0
-3945 -3942 0
c Var 'aux803' direct represents '4' with '-3944'
3939 3941 3943 3945 -3944 0
c Encoding variable: aux804 with domain: int(0..2) (representing constraint ((x_00003_00008=4) + (x_00005_00008=4)))
c Both direct and order encoding.
c Var 'aux804' order represents '0' with '3946'
c Var 'aux804' direct represents '0' with '3946'
c Var 'aux804' order represents '1' with '3947'
-3946 3947 0
c Var 'aux804' direct represents '1' with '3948'
3946 -3947 3948 0
-3948 3947 0
-3948 -3946 0
c Var 'aux804' direct represents '2' with '-3947'
3946 3948 -3947 0
c Encoding variable: aux805 with domain: int(0..2) (representing constraint ((x_00007_00008=4) + (x_00008_00008=4)))
c Both direct and order encoding.
c Var 'aux805' order represents '0' with '3949'
c Var 'aux805' direct represents '0' with '3949'
c Var 'aux805' order represents '1' with '3950'
-3949 3950 0
c Var 'aux805' direct represents '1' with '3951'
3949 -3950 3951 0
-3951 3950 0
-3951 -3949 0
c Var 'aux805' direct represents '2' with '-3950'
3949 3951 -3950 0
c Encoding variable: aux806 with domain: int(0..2) (representing constraint ((x_00002_00008=4) + (x_00006_00008=4)))
c Both direct and order encoding.
c Var 'aux806' order represents '0' with '3952'
c Var 'aux806' direct represents '0' with '3952'
c Var 'aux806' order represents '1' with '3953'
-3952 3953 0
c Var 'aux806' direct represents '1' with '3954'
3952 -3953 3954 0
-3954 3953 0
-3954 -3952 0
c Var 'aux806' direct represents '2' with '-3953'
3952 3954 -3953 0
c Encoding variable: aux807 with domain: int(0..2) (representing constraint ((x_00009_00008=4) + (x_00004_00008=4)))
c Both direct and order encoding.
c Var 'aux807' order represents '0' with '3955'
c Var 'aux807' direct represents '0' with '3955'
c Var 'aux807' order represents '1' with '3956'
-3955 3956 0
c Var 'aux807' direct represents '1' with '3957'
3955 -3956 3957 0
-3957 3956 0
-3957 -3955 0
c Var 'aux807' direct represents '2' with '-3956'
3955 3957 -3956 0
c Encoding variable: aux808 with domain: int(0..3) (representing constraint ((x_00001_00008=4) + aux807))
c Both direct and order encoding.
c Var 'aux808' order represents '0' with '3958'
c Var 'aux808' direct represents '0' with '3958'
c Var 'aux808' order represents '1' with '3959'
-3958 3959 0
c Var 'aux808' direct represents '1' with '3960'
3958 -3959 3960 0
-3960 3959 0
-3960 -3958 0
c Var 'aux808' order represents '2' with '3961'
-3959 3961 0
c Var 'aux808' direct represents '2' with '3962'
3959 -3961 3962 0
-3962 3961 0
-3962 -3959 0
c Var 'aux808' direct represents '3' with '-3961'
3958 3960 3962 -3961 0
c Encoding variable: aux809 with domain: int(0..4) (representing constraint (aux804 + aux806))
c Both direct and order encoding.
c Var 'aux809' order represents '0' with '3963'
c Var 'aux809' direct represents '0' with '3963'
c Var 'aux809' order represents '1' with '3964'
-3963 3964 0
c Var 'aux809' direct represents '1' with '3965'
3963 -3964 3965 0
-3965 3964 0
-3965 -3963 0
c Var 'aux809' order represents '2' with '3966'
-3964 3966 0
c Var 'aux809' direct represents '2' with '3967'
3964 -3966 3967 0
-3967 3966 0
-3967 -3964 0
c Var 'aux809' order represents '3' with '3968'
-3966 3968 0
c Var 'aux809' direct represents '3' with '3969'
3966 -3968 3969 0
-3969 3968 0
-3969 -3966 0
c Var 'aux809' direct represents '4' with '-3968'
3963 3965 3967 3969 -3968 0
c Encoding variable: aux810 with domain: int(0..2) (representing constraint ((x_00003_00008=5) + (x_00005_00008=5)))
c Both direct and order encoding.
c Var 'aux810' order represents '0' with '3970'
c Var 'aux810' direct represents '0' with '3970'
c Var 'aux810' order represents '1' with '3971'
-3970 3971 0
c Var 'aux810' direct represents '1' with '3972'
3970 -3971 3972 0
-3972 3971 0
-3972 -3970 0
c Var 'aux810' direct represents '2' with '-3971'
3970 3972 -3971 0
c Encoding variable: aux811 with domain: int(0..2) (representing constraint ((x_00007_00008=5) + (x_00008_00008=5)))
c Both direct and order encoding.
c Var 'aux811' order represents '0' with '3973'
c Var 'aux811' direct represents '0' with '3973'
c Var 'aux811' order represents '1' with '3974'
-3973 3974 0
c Var 'aux811' direct represents '1' with '3975'
3973 -3974 3975 0
-3975 3974 0
-3975 -3973 0
c Var 'aux811' direct represents '2' with '-3974'
3973 3975 -3974 0
c Encoding variable: aux812 with domain: int(0..2) (representing constraint ((x_00002_00008=5) + (x_00006_00008=5)))
c Both direct and order encoding.
c Var 'aux812' order represents '0' with '3976'
c Var 'aux812' direct represents '0' with '3976'
c Var 'aux812' order represents '1' with '3977'
-3976 3977 0
c Var 'aux812' direct represents '1' with '3978'
3976 -3977 3978 0
-3978 3977 0
-3978 -3976 0
c Var 'aux812' direct represents '2' with '-3977'
3976 3978 -3977 0
c Encoding variable: aux813 with domain: int(0..2) (representing constraint ((x_00009_00008=5) + (x_00004_00008=5)))
c Both direct and order encoding.
c Var 'aux813' order represents '0' with '3979'
c Var 'aux813' direct represents '0' with '3979'
c Var 'aux813' order represents '1' with '3980'
-3979 3980 0
c Var 'aux813' direct represents '1' with '3981'
3979 -3980 3981 0
-3981 3980 0
-3981 -3979 0
c Var 'aux813' direct represents '2' with '-3980'
3979 3981 -3980 0
c Encoding variable: aux814 with domain: int(0..3) (representing constraint ((x_00001_00008=5) + aux813))
c Both direct and order encoding.
c Var 'aux814' order represents '0' with '3982'
c Var 'aux814' direct represents '0' with '3982'
c Var 'aux814' order represents '1' with '3983'
-3982 3983 0
c Var 'aux814' direct represents '1' with '3984'
3982 -3983 3984 0
-3984 3983 0
-3984 -3982 0
c Var 'aux814' order represents '2' with '3985'
-3983 3985 0
c Var 'aux814' direct represents '2' with '3986'
3983 -3985 3986 0
-3986 3985 0
-3986 -3983 0
c Var 'aux814' direct represents '3' with '-3985'
3982 3984 3986 -3985 0
c Encoding variable: aux815 with domain: int(0..4) (representing constraint (aux810 + aux812))
c Both direct and order encoding.
c Var 'aux815' order represents '0' with '3987'
c Var 'aux815' direct represents '0' with '3987'
c Var 'aux815' order represents '1' with '3988'
-3987 3988 0
c Var 'aux815' direct represents '1' with '3989'
3987 -3988 3989 0
-3989 3988 0
-3989 -3987 0
c Var 'aux815' order represents '2' with '3990'
-3988 3990 0
c Var 'aux815' direct represents '2' with '3991'
3988 -3990 3991 0
-3991 3990 0
-3991 -3988 0
c Var 'aux815' order represents '3' with '3992'
-3990 3992 0
c Var 'aux815' direct represents '3' with '3993'
3990 -3992 3993 0
-3993 3992 0
-3993 -3990 0
c Var 'aux815' direct represents '4' with '-3992'
3987 3989 3991 3993 -3992 0
c Encoding variable: aux816 with domain: int(0..2) (representing constraint ((x_00003_00008=6) + (x_00005_00008=6)))
c Both direct and order encoding.
c Var 'aux816' order represents '0' with '3994'
c Var 'aux816' direct represents '0' with '3994'
c Var 'aux816' order represents '1' with '3995'
-3994 3995 0
c Var 'aux816' direct represents '1' with '3996'
3994 -3995 3996 0
-3996 3995 0
-3996 -3994 0
c Var 'aux816' direct represents '2' with '-3995'
3994 3996 -3995 0
c Encoding variable: aux817 with domain: int(0..2) (representing constraint ((x_00007_00008=6) + (x_00008_00008=6)))
c Both direct and order encoding.
c Var 'aux817' order represents '0' with '3997'
c Var 'aux817' direct represents '0' with '3997'
c Var 'aux817' order represents '1' with '3998'
-3997 3998 0
c Var 'aux817' direct represents '1' with '3999'
3997 -3998 3999 0
-3999 3998 0
-3999 -3997 0
c Var 'aux817' direct represents '2' with '-3998'
3997 3999 -3998 0
c Encoding variable: aux818 with domain: int(0..2) (representing constraint ((x_00002_00008=6) + (x_00006_00008=6)))
c Both direct and order encoding.
c Var 'aux818' order represents '0' with '4000'
c Var 'aux818' direct represents '0' with '4000'
c Var 'aux818' order represents '1' with '4001'
-4000 4001 0
c Var 'aux818' direct represents '1' with '4002'
4000 -4001 4002 0
-4002 4001 0
-4002 -4000 0
c Var 'aux818' direct represents '2' with '-4001'
4000 4002 -4001 0
c Encoding variable: aux819 with domain: int(0..2) (representing constraint ((x_00009_00008=6) + (x_00004_00008=6)))
c Both direct and order encoding.
c Var 'aux819' order represents '0' with '4003'
c Var 'aux819' direct represents '0' with '4003'
c Var 'aux819' order represents '1' with '4004'
-4003 4004 0
c Var 'aux819' direct represents '1' with '4005'
4003 -4004 4005 0
-4005 4004 0
-4005 -4003 0
c Var 'aux819' direct represents '2' with '-4004'
4003 4005 -4004 0
c Encoding variable: aux820 with domain: int(0..3) (representing constraint ((x_00001_00008=6) + aux819))
c Both direct and order encoding.
c Var 'aux820' order represents '0' with '4006'
c Var 'aux820' direct represents '0' with '4006'
c Var 'aux820' order represents '1' with '4007'
-4006 4007 0
c Var 'aux820' direct represents '1' with '4008'
4006 -4007 4008 0
-4008 4007 0
-4008 -4006 0
c Var 'aux820' order represents '2' with '4009'
-4007 4009 0
c Var 'aux820' direct represents '2' with '4010'
4007 -4009 4010 0
-4010 4009 0
-4010 -4007 0
c Var 'aux820' direct represents '3' with '-4009'
4006 4008 4010 -4009 0
c Encoding variable: aux821 with domain: int(0..4) (representing constraint (aux816 + aux818))
c Both direct and order encoding.
c Var 'aux821' order represents '0' with '4011'
c Var 'aux821' direct represents '0' with '4011'
c Var 'aux821' order represents '1' with '4012'
-4011 4012 0
c Var 'aux821' direct represents '1' with '4013'
4011 -4012 4013 0
-4013 4012 0
-4013 -4011 0
c Var 'aux821' order represents '2' with '4014'
-4012 4014 0
c Var 'aux821' direct represents '2' with '4015'
4012 -4014 4015 0
-4015 4014 0
-4015 -4012 0
c Var 'aux821' order represents '3' with '4016'
-4014 4016 0
c Var 'aux821' direct represents '3' with '4017'
4014 -4016 4017 0
-4017 4016 0
-4017 -4014 0
c Var 'aux821' direct represents '4' with '-4016'
4011 4013 4015 4017 -4016 0
c Encoding variable: aux822 with domain: int(0..2) (representing constraint ((x_00003_00008=7) + (x_00005_00008=7)))
c Both direct and order encoding.
c Var 'aux822' order represents '0' with '4018'
c Var 'aux822' direct represents '0' with '4018'
c Var 'aux822' order represents '1' with '4019'
-4018 4019 0
c Var 'aux822' direct represents '1' with '4020'
4018 -4019 4020 0
-4020 4019 0
-4020 -4018 0
c Var 'aux822' direct represents '2' with '-4019'
4018 4020 -4019 0
c Encoding variable: aux823 with domain: int(0..2) (representing constraint ((x_00007_00008=7) + (x_00008_00008=7)))
c Both direct and order encoding.
c Var 'aux823' order represents '0' with '4021'
c Var 'aux823' direct represents '0' with '4021'
c Var 'aux823' order represents '1' with '4022'
-4021 4022 0
c Var 'aux823' direct represents '1' with '4023'
4021 -4022 4023 0
-4023 4022 0
-4023 -4021 0
c Var 'aux823' direct represents '2' with '-4022'
4021 4023 -4022 0
c Encoding variable: aux824 with domain: int(0..2) (representing constraint ((x_00002_00008=7) + (x_00006_00008=7)))
c Both direct and order encoding.
c Var 'aux824' order represents '0' with '4024'
c Var 'aux824' direct represents '0' with '4024'
c Var 'aux824' order represents '1' with '4025'
-4024 4025 0
c Var 'aux824' direct represents '1' with '4026'
4024 -4025 4026 0
-4026 4025 0
-4026 -4024 0
c Var 'aux824' direct represents '2' with '-4025'
4024 4026 -4025 0
c Encoding variable: aux825 with domain: int(0..2) (representing constraint ((x_00009_00008=7) + (x_00004_00008=7)))
c Both direct and order encoding.
c Var 'aux825' order represents '0' with '4027'
c Var 'aux825' direct represents '0' with '4027'
c Var 'aux825' order represents '1' with '4028'
-4027 4028 0
c Var 'aux825' direct represents '1' with '4029'
4027 -4028 4029 0
-4029 4028 0
-4029 -4027 0
c Var 'aux825' direct represents '2' with '-4028'
4027 4029 -4028 0
c Encoding variable: aux826 with domain: int(0..3) (representing constraint ((x_00001_00008=7) + aux825))
c Both direct and order encoding.
c Var 'aux826' order represents '0' with '4030'
c Var 'aux826' direct represents '0' with '4030'
c Var 'aux826' order represents '1' with '4031'
-4030 4031 0
c Var 'aux826' direct represents '1' with '4032'
4030 -4031 4032 0
-4032 4031 0
-4032 -4030 0
c Var 'aux826' order represents '2' with '4033'
-4031 4033 0
c Var 'aux826' direct represents '2' with '4034'
4031 -4033 4034 0
-4034 4033 0
-4034 -4031 0
c Var 'aux826' direct represents '3' with '-4033'
4030 4032 4034 -4033 0
c Encoding variable: aux827 with domain: int(0..4) (representing constraint (aux822 + aux824))
c Both direct and order encoding.
c Var 'aux827' order represents '0' with '4035'
c Var 'aux827' direct represents '0' with '4035'
c Var 'aux827' order represents '1' with '4036'
-4035 4036 0
c Var 'aux827' direct represents '1' with '4037'
4035 -4036 4037 0
-4037 4036 0
-4037 -4035 0
c Var 'aux827' order represents '2' with '4038'
-4036 4038 0
c Var 'aux827' direct represents '2' with '4039'
4036 -4038 4039 0
-4039 4038 0
-4039 -4036 0
c Var 'aux827' order represents '3' with '4040'
-4038 4040 0
c Var 'aux827' direct represents '3' with '4041'
4038 -4040 4041 0
-4041 4040 0
-4041 -4038 0
c Var 'aux827' direct represents '4' with '-4040'
4035 4037 4039 4041 -4040 0
c Encoding variable: aux828 with domain: int(0..2) (representing constraint ((x_00003_00008=8) + (x_00005_00008=8)))
c Both direct and order encoding.
c Var 'aux828' order represents '0' with '4042'
c Var 'aux828' direct represents '0' with '4042'
c Var 'aux828' order represents '1' with '4043'
-4042 4043 0
c Var 'aux828' direct represents '1' with '4044'
4042 -4043 4044 0
-4044 4043 0
-4044 -4042 0
c Var 'aux828' direct represents '2' with '-4043'
4042 4044 -4043 0
c Encoding variable: aux829 with domain: int(0..2) (representing constraint ((x_00007_00008=8) + (x_00008_00008=8)))
c Both direct and order encoding.
c Var 'aux829' order represents '0' with '4045'
c Var 'aux829' direct represents '0' with '4045'
c Var 'aux829' order represents '1' with '4046'
-4045 4046 0
c Var 'aux829' direct represents '1' with '4047'
4045 -4046 4047 0
-4047 4046 0
-4047 -4045 0
c Var 'aux829' direct represents '2' with '-4046'
4045 4047 -4046 0
c Encoding variable: aux830 with domain: int(0..2) (representing constraint ((x_00002_00008=8) + (x_00006_00008=8)))
c Both direct and order encoding.
c Var 'aux830' order represents '0' with '4048'
c Var 'aux830' direct represents '0' with '4048'
c Var 'aux830' order represents '1' with '4049'
-4048 4049 0
c Var 'aux830' direct represents '1' with '4050'
4048 -4049 4050 0
-4050 4049 0
-4050 -4048 0
c Var 'aux830' direct represents '2' with '-4049'
4048 4050 -4049 0
c Encoding variable: aux831 with domain: int(0..2) (representing constraint ((x_00009_00008=8) + (x_00004_00008=8)))
c Both direct and order encoding.
c Var 'aux831' order represents '0' with '4051'
c Var 'aux831' direct represents '0' with '4051'
c Var 'aux831' order represents '1' with '4052'
-4051 4052 0
c Var 'aux831' direct represents '1' with '4053'
4051 -4052 4053 0
-4053 4052 0
-4053 -4051 0
c Var 'aux831' direct represents '2' with '-4052'
4051 4053 -4052 0
c Encoding variable: aux832 with domain: int(0..3) (representing constraint ((x_00001_00008=8) + aux831))
c Both direct and order encoding.
c Var 'aux832' order represents '0' with '4054'
c Var 'aux832' direct represents '0' with '4054'
c Var 'aux832' order represents '1' with '4055'
-4054 4055 0
c Var 'aux832' direct represents '1' with '4056'
4054 -4055 4056 0
-4056 4055 0
-4056 -4054 0
c Var 'aux832' order represents '2' with '4057'
-4055 4057 0
c Var 'aux832' direct represents '2' with '4058'
4055 -4057 4058 0
-4058 4057 0
-4058 -4055 0
c Var 'aux832' direct represents '3' with '-4057'
4054 4056 4058 -4057 0
c Encoding variable: aux833 with domain: int(0..4) (representing constraint (aux828 + aux830))
c Both direct and order encoding.
c Var 'aux833' order represents '0' with '4059'
c Var 'aux833' direct represents '0' with '4059'
c Var 'aux833' order represents '1' with '4060'
-4059 4060 0
c Var 'aux833' direct represents '1' with '4061'
4059 -4060 4061 0
-4061 4060 0
-4061 -4059 0
c Var 'aux833' order represents '2' with '4062'
-4060 4062 0
c Var 'aux833' direct represents '2' with '4063'
4060 -4062 4063 0
-4063 4062 0
-4063 -4060 0
c Var 'aux833' order represents '3' with '4064'
-4062 4064 0
c Var 'aux833' direct represents '3' with '4065'
4062 -4064 4065 0
-4065 4064 0
-4065 -4062 0
c Var 'aux833' direct represents '4' with '-4064'
4059 4061 4063 4065 -4064 0
c Encoding variable: aux834 with domain: int(0..2) (representing constraint ((x_00003_00008=9) + (x_00005_00008=9)))
c Both direct and order encoding.
c Var 'aux834' order represents '0' with '4066'
c Var 'aux834' direct represents '0' with '4066'
c Var 'aux834' order represents '1' with '4067'
-4066 4067 0
c Var 'aux834' direct represents '1' with '4068'
4066 -4067 4068 0
-4068 4067 0
-4068 -4066 0
c Var 'aux834' direct represents '2' with '-4067'
4066 4068 -4067 0
c Encoding variable: aux835 with domain: int(0..2) (representing constraint ((x_00007_00008=9) + (x_00008_00008=9)))
c Both direct and order encoding.
c Var 'aux835' order represents '0' with '4069'
c Var 'aux835' direct represents '0' with '4069'
c Var 'aux835' order represents '1' with '4070'
-4069 4070 0
c Var 'aux835' direct represents '1' with '4071'
4069 -4070 4071 0
-4071 4070 0
-4071 -4069 0
c Var 'aux835' direct represents '2' with '-4070'
4069 4071 -4070 0
c Encoding variable: aux836 with domain: int(0..2) (representing constraint ((x_00002_00008=9) + (x_00006_00008=9)))
c Both direct and order encoding.
c Var 'aux836' order represents '0' with '4072'
c Var 'aux836' direct represents '0' with '4072'
c Var 'aux836' order represents '1' with '4073'
-4072 4073 0
c Var 'aux836' direct represents '1' with '4074'
4072 -4073 4074 0
-4074 4073 0
-4074 -4072 0
c Var 'aux836' direct represents '2' with '-4073'
4072 4074 -4073 0
c Encoding variable: aux837 with domain: int(0..2) (representing constraint ((x_00009_00008=9) + (x_00004_00008=9)))
c Both direct and order encoding.
c Var 'aux837' order represents '0' with '4075'
c Var 'aux837' direct represents '0' with '4075'
c Var 'aux837' order represents '1' with '4076'
-4075 4076 0
c Var 'aux837' direct represents '1' with '4077'
4075 -4076 4077 0
-4077 4076 0
-4077 -4075 0
c Var 'aux837' direct represents '2' with '-4076'
4075 4077 -4076 0
c Encoding variable: aux838 with domain: int(0..3) (representing constraint ((x_00001_00008=9) + aux837))
c Both direct and order encoding.
c Var 'aux838' order represents '0' with '4078'
c Var 'aux838' direct represents '0' with '4078'
c Var 'aux838' order represents '1' with '4079'
-4078 4079 0
c Var 'aux838' direct represents '1' with '4080'
4078 -4079 4080 0
-4080 4079 0
-4080 -4078 0
c Var 'aux838' order represents '2' with '4081'
-4079 4081 0
c Var 'aux838' direct represents '2' with '4082'
4079 -4081 4082 0
-4082 4081 0
-4082 -4079 0
c Var 'aux838' direct represents '3' with '-4081'
4078 4080 4082 -4081 0
c Encoding variable: aux839 with domain: int(0..4) (representing constraint (aux834 + aux836))
c Both direct and order encoding.
c Var 'aux839' order represents '0' with '4083'
c Var 'aux839' direct represents '0' with '4083'
c Var 'aux839' order represents '1' with '4084'
-4083 4084 0
c Var 'aux839' direct represents '1' with '4085'
4083 -4084 4085 0
-4085 4084 0
-4085 -4083 0
c Var 'aux839' order represents '2' with '4086'
-4084 4086 0
c Var 'aux839' direct represents '2' with '4087'
4084 -4086 4087 0
-4087 4086 0
-4087 -4084 0
c Var 'aux839' order represents '3' with '4088'
-4086 4088 0
c Var 'aux839' direct represents '3' with '4089'
4086 -4088 4089 0
-4089 4088 0
-4089 -4086 0
c Var 'aux839' direct represents '4' with '-4088'
4083 4085 4087 4089 -4088 0
c Encoding variable: aux840 with domain: int(0..2) (representing constraint ((x_00003_00009=1) + (x_00005_00009=1)))
c Both direct and order encoding.
c Var 'aux840' order represents '0' with '4090'
c Var 'aux840' direct represents '0' with '4090'
c Var 'aux840' order represents '1' with '4091'
-4090 4091 0
c Var 'aux840' direct represents '1' with '4092'
4090 -4091 4092 0
-4092 4091 0
-4092 -4090 0
c Var 'aux840' direct represents '2' with '-4091'
4090 4092 -4091 0
c Encoding variable: aux841 with domain: int(0..2) (representing constraint ((x_00007_00009=1) + (x_00008_00009=1)))
c Both direct and order encoding.
c Var 'aux841' order represents '0' with '4093'
c Var 'aux841' direct represents '0' with '4093'
c Var 'aux841' order represents '1' with '4094'
-4093 4094 0
c Var 'aux841' direct represents '1' with '4095'
4093 -4094 4095 0
-4095 4094 0
-4095 -4093 0
c Var 'aux841' direct represents '2' with '-4094'
4093 4095 -4094 0
c Encoding variable: aux842 with domain: int(0..2) (representing constraint ((x_00002_00009=1) + (x_00006_00009=1)))
c Both direct and order encoding.
c Var 'aux842' order represents '0' with '4096'
c Var 'aux842' direct represents '0' with '4096'
c Var 'aux842' order represents '1' with '4097'
-4096 4097 0
c Var 'aux842' direct represents '1' with '4098'
4096 -4097 4098 0
-4098 4097 0
-4098 -4096 0
c Var 'aux842' direct represents '2' with '-4097'
4096 4098 -4097 0
c Encoding variable: aux843 with domain: int(0..2) (representing constraint ((x_00009_00009=1) + (x_00004_00009=1)))
c Both direct and order encoding.
c Var 'aux843' order represents '0' with '4099'
c Var 'aux843' direct represents '0' with '4099'
c Var 'aux843' order represents '1' with '4100'
-4099 4100 0
c Var 'aux843' direct represents '1' with '4101'
4099 -4100 4101 0
-4101 4100 0
-4101 -4099 0
c Var 'aux843' direct represents '2' with '-4100'
4099 4101 -4100 0
c Encoding variable: aux844 with domain: int(0..3) (representing constraint ((x_00001_00009=1) + aux843))
c Both direct and order encoding.
c Var 'aux844' order represents '0' with '4102'
c Var 'aux844' direct represents '0' with '4102'
c Var 'aux844' order represents '1' with '4103'
-4102 4103 0
c Var 'aux844' direct represents '1' with '4104'
4102 -4103 4104 0
-4104 4103 0
-4104 -4102 0
c Var 'aux844' order represents '2' with '4105'
-4103 4105 0
c Var 'aux844' direct represents '2' with '4106'
4103 -4105 4106 0
-4106 4105 0
-4106 -4103 0
c Var 'aux844' direct represents '3' with '-4105'
4102 4104 4106 -4105 0
c Encoding variable: aux845 with domain: int(0..4) (representing constraint (aux840 + aux842))
c Both direct and order encoding.
c Var 'aux845' order represents '0' with '4107'
c Var 'aux845' direct represents '0' with '4107'
c Var 'aux845' order represents '1' with '4108'
-4107 4108 0
c Var 'aux845' direct represents '1' with '4109'
4107 -4108 4109 0
-4109 4108 0
-4109 -4107 0
c Var 'aux845' order represents '2' with '4110'
-4108 4110 0
c Var 'aux845' direct represents '2' with '4111'
4108 -4110 4111 0
-4111 4110 0
-4111 -4108 0
c Var 'aux845' order represents '3' with '4112'
-4110 4112 0
c Var 'aux845' direct represents '3' with '4113'
4110 -4112 4113 0
-4113 4112 0
-4113 -4110 0
c Var 'aux845' direct represents '4' with '-4112'
4107 4109 4111 4113 -4112 0
c Encoding variable: aux846 with domain: int(0..2) (representing constraint ((x_00003_00009=2) + (x_00005_00009=2)))
c Both direct and order encoding.
c Var 'aux846' order represents '0' with '4114'
c Var 'aux846' direct represents '0' with '4114'
c Var 'aux846' order represents '1' with '4115'
-4114 4115 0
c Var 'aux846' direct represents '1' with '4116'
4114 -4115 4116 0
-4116 4115 0
-4116 -4114 0
c Var 'aux846' direct represents '2' with '-4115'
4114 4116 -4115 0
c Encoding variable: aux847 with domain: int(0..2) (representing constraint ((x_00007_00009=2) + (x_00008_00009=2)))
c Both direct and order encoding.
c Var 'aux847' order represents '0' with '4117'
c Var 'aux847' direct represents '0' with '4117'
c Var 'aux847' order represents '1' with '4118'
-4117 4118 0
c Var 'aux847' direct represents '1' with '4119'
4117 -4118 4119 0
-4119 4118 0
-4119 -4117 0
c Var 'aux847' direct represents '2' with '-4118'
4117 4119 -4118 0
c Encoding variable: aux848 with domain: int(0..2) (representing constraint ((x_00002_00009=2) + (x_00006_00009=2)))
c Both direct and order encoding.
c Var 'aux848' order represents '0' with '4120'
c Var 'aux848' direct represents '0' with '4120'
c Var 'aux848' order represents '1' with '4121'
-4120 4121 0
c Var 'aux848' direct represents '1' with '4122'
4120 -4121 4122 0
-4122 4121 0
-4122 -4120 0
c Var 'aux848' direct represents '2' with '-4121'
4120 4122 -4121 0
c Encoding variable: aux849 with domain: int(0..2) (representing constraint ((x_00009_00009=2) + (x_00004_00009=2)))
c Both direct and order encoding.
c Var 'aux849' order represents '0' with '4123'
c Var 'aux849' direct represents '0' with '4123'
c Var 'aux849' order represents '1' with '4124'
-4123 4124 0
c Var 'aux849' direct represents '1' with '4125'
4123 -4124 4125 0
-4125 4124 0
-4125 -4123 0
c Var 'aux849' direct represents '2' with '-4124'
4123 4125 -4124 0
c Encoding variable: aux850 with domain: int(0..3) (representing constraint ((x_00001_00009=2) + aux849))
c Both direct and order encoding.
c Var 'aux850' order represents '0' with '4126'
c Var 'aux850' direct represents '0' with '4126'
c Var 'aux850' order represents '1' with '4127'
-4126 4127 0
c Var 'aux850' direct represents '1' with '4128'
4126 -4127 4128 0
-4128 4127 0
-4128 -4126 0
c Var 'aux850' order represents '2' with '4129'
-4127 4129 0
c Var 'aux850' direct represents '2' with '4130'
4127 -4129 4130 0
-4130 4129 0
-4130 -4127 0
c Var 'aux850' direct represents '3' with '-4129'
4126 4128 4130 -4129 0
c Encoding variable: aux851 with domain: int(0..4) (representing constraint (aux846 + aux848))
c Both direct and order encoding.
c Var 'aux851' order represents '0' with '4131'
c Var 'aux851' direct represents '0' with '4131'
c Var 'aux851' order represents '1' with '4132'
-4131 4132 0
c Var 'aux851' direct represents '1' with '4133'
4131 -4132 4133 0
-4133 4132 0
-4133 -4131 0
c Var 'aux851' order represents '2' with '4134'
-4132 4134 0
c Var 'aux851' direct represents '2' with '4135'
4132 -4134 4135 0
-4135 4134 0
-4135 -4132 0
c Var 'aux851' order represents '3' with '4136'
-4134 4136 0
c Var 'aux851' direct represents '3' with '4137'
4134 -4136 4137 0
-4137 4136 0
-4137 -4134 0
c Var 'aux851' direct represents '4' with '-4136'
4131 4133 4135 4137 -4136 0
c Encoding variable: aux852 with domain: int(0..2) (representing constraint ((x_00003_00009=3) + (x_00005_00009=3)))
c Both direct and order encoding.
c Var 'aux852' order represents '0' with '4138'
c Var 'aux852' direct represents '0' with '4138'
c Var 'aux852' order represents '1' with '4139'
-4138 4139 0
c Var 'aux852' direct represents '1' with '4140'
4138 -4139 4140 0
-4140 4139 0
-4140 -4138 0
c Var 'aux852' direct represents '2' with '-4139'
4138 4140 -4139 0
c Encoding variable: aux853 with domain: int(0..2) (representing constraint ((x_00007_00009=3) + (x_00008_00009=3)))
c Both direct and order encoding.
c Var 'aux853' order represents '0' with '4141'
c Var 'aux853' direct represents '0' with '4141'
c Var 'aux853' order represents '1' with '4142'
-4141 4142 0
c Var 'aux853' direct represents '1' with '4143'
4141 -4142 4143 0
-4143 4142 0
-4143 -4141 0
c Var 'aux853' direct represents '2' with '-4142'
4141 4143 -4142 0
c Encoding variable: aux854 with domain: int(0..2) (representing constraint ((x_00002_00009=3) + (x_00006_00009=3)))
c Both direct and order encoding.
c Var 'aux854' order represents '0' with '4144'
c Var 'aux854' direct represents '0' with '4144'
c Var 'aux854' order represents '1' with '4145'
-4144 4145 0
c Var 'aux854' direct represents '1' with '4146'
4144 -4145 4146 0
-4146 4145 0
-4146 -4144 0
c Var 'aux854' direct represents '2' with '-4145'
4144 4146 -4145 0
c Encoding variable: aux855 with domain: int(0..2) (representing constraint ((x_00009_00009=3) + (x_00004_00009=3)))
c Both direct and order encoding.
c Var 'aux855' order represents '0' with '4147'
c Var 'aux855' direct represents '0' with '4147'
c Var 'aux855' order represents '1' with '4148'
-4147 4148 0
c Var 'aux855' direct represents '1' with '4149'
4147 -4148 4149 0
-4149 4148 0
-4149 -4147 0
c Var 'aux855' direct represents '2' with '-4148'
4147 4149 -4148 0
c Encoding variable: aux856 with domain: int(0..3) (representing constraint ((x_00001_00009=3) + aux855))
c Both direct and order encoding.
c Var 'aux856' order represents '0' with '4150'
c Var 'aux856' direct represents '0' with '4150'
c Var 'aux856' order represents '1' with '4151'
-4150 4151 0
c Var 'aux856' direct represents '1' with '4152'
4150 -4151 4152 0
-4152 4151 0
-4152 -4150 0
c Var 'aux856' order represents '2' with '4153'
-4151 4153 0
c Var 'aux856' direct represents '2' with '4154'
4151 -4153 4154 0
-4154 4153 0
-4154 -4151 0
c Var 'aux856' direct represents '3' with '-4153'
4150 4152 4154 -4153 0
c Encoding variable: aux857 with domain: int(0..4) (representing constraint (aux852 + aux854))
c Both direct and order encoding.
c Var 'aux857' order represents '0' with '4155'
c Var 'aux857' direct represents '0' with '4155'
c Var 'aux857' order represents '1' with '4156'
-4155 4156 0
c Var 'aux857' direct represents '1' with '4157'
4155 -4156 4157 0
-4157 4156 0
-4157 -4155 0
c Var 'aux857' order represents '2' with '4158'
-4156 4158 0
c Var 'aux857' direct represents '2' with '4159'
4156 -4158 4159 0
-4159 4158 0
-4159 -4156 0
c Var 'aux857' order represents '3' with '4160'
-4158 4160 0
c Var 'aux857' direct represents '3' with '4161'
4158 -4160 4161 0
-4161 4160 0
-4161 -4158 0
c Var 'aux857' direct represents '4' with '-4160'
4155 4157 4159 4161 -4160 0
c Encoding variable: aux858 with domain: int(0..2) (representing constraint ((x_00003_00009=4) + (x_00005_00009=4)))
c Both direct and order encoding.
c Var 'aux858' order represents '0' with '4162'
c Var 'aux858' direct represents '0' with '4162'
c Var 'aux858' order represents '1' with '4163'
-4162 4163 0
c Var 'aux858' direct represents '1' with '4164'
4162 -4163 4164 0
-4164 4163 0
-4164 -4162 0
c Var 'aux858' direct represents '2' with '-4163'
4162 4164 -4163 0
c Encoding variable: aux859 with domain: int(0..2) (representing constraint ((x_00007_00009=4) + (x_00008_00009=4)))
c Both direct and order encoding.
c Var 'aux859' order represents '0' with '4165'
c Var 'aux859' direct represents '0' with '4165'
c Var 'aux859' order represents '1' with '4166'
-4165 4166 0
c Var 'aux859' direct represents '1' with '4167'
4165 -4166 4167 0
-4167 4166 0
-4167 -4165 0
c Var 'aux859' direct represents '2' with '-4166'
4165 4167 -4166 0
c Encoding variable: aux860 with domain: int(0..2) (representing constraint ((x_00002_00009=4) + (x_00006_00009=4)))
c Both direct and order encoding.
c Var 'aux860' order represents '0' with '4168'
c Var 'aux860' direct represents '0' with '4168'
c Var 'aux860' order represents '1' with '4169'
-4168 4169 0
c Var 'aux860' direct represents '1' with '4170'
4168 -4169 4170 0
-4170 4169 0
-4170 -4168 0
c Var 'aux860' direct represents '2' with '-4169'
4168 4170 -4169 0
c Encoding variable: aux861 with domain: int(0..2) (representing constraint ((x_00009_00009=4) + (x_00004_00009=4)))
c Both direct and order encoding.
c Var 'aux861' order represents '0' with '4171'
c Var 'aux861' direct represents '0' with '4171'
c Var 'aux861' order represents '1' with '4172'
-4171 4172 0
c Var 'aux861' direct represents '1' with '4173'
4171 -4172 4173 0
-4173 4172 0
-4173 -4171 0
c Var 'aux861' direct represents '2' with '-4172'
4171 4173 -4172 0
c Encoding variable: aux862 with domain: int(0..3) (representing constraint ((x_00001_00009=4) + aux861))
c Both direct and order encoding.
c Var 'aux862' order represents '0' with '4174'
c Var 'aux862' direct represents '0' with '4174'
c Var 'aux862' order represents '1' with '4175'
-4174 4175 0
c Var 'aux862' direct represents '1' with '4176'
4174 -4175 4176 0
-4176 4175 0
-4176 -4174 0
c Var 'aux862' order represents '2' with '4177'
-4175 4177 0
c Var 'aux862' direct represents '2' with '4178'
4175 -4177 4178 0
-4178 4177 0
-4178 -4175 0
c Var 'aux862' direct represents '3' with '-4177'
4174 4176 4178 -4177 0
c Encoding variable: aux863 with domain: int(0..4) (representing constraint (aux858 + aux860))
c Both direct and order encoding.
c Var 'aux863' order represents '0' with '4179'
c Var 'aux863' direct represents '0' with '4179'
c Var 'aux863' order represents '1' with '4180'
-4179 4180 0
c Var 'aux863' direct represents '1' with '4181'
4179 -4180 4181 0
-4181 4180 0
-4181 -4179 0
c Var 'aux863' order represents '2' with '4182'
-4180 4182 0
c Var 'aux863' direct represents '2' with '4183'
4180 -4182 4183 0
-4183 4182 0
-4183 -4180 0
c Var 'aux863' order represents '3' with '4184'
-4182 4184 0
c Var 'aux863' direct represents '3' with '4185'
4182 -4184 4185 0
-4185 4184 0
-4185 -4182 0
c Var 'aux863' direct represents '4' with '-4184'
4179 4181 4183 4185 -4184 0
c Encoding variable: aux864 with domain: int(0..2) (representing constraint ((x_00003_00009=5) + (x_00005_00009=5)))
c Both direct and order encoding.
c Var 'aux864' order represents '0' with '4186'
c Var 'aux864' direct represents '0' with '4186'
c Var 'aux864' order represents '1' with '4187'
-4186 4187 0
c Var 'aux864' direct represents '1' with '4188'
4186 -4187 4188 0
-4188 4187 0
-4188 -4186 0
c Var 'aux864' direct represents '2' with '-4187'
4186 4188 -4187 0
c Encoding variable: aux865 with domain: int(0..2) (representing constraint ((x_00007_00009=5) + (x_00008_00009=5)))
c Both direct and order encoding.
c Var 'aux865' order represents '0' with '4189'
c Var 'aux865' direct represents '0' with '4189'
c Var 'aux865' order represents '1' with '4190'
-4189 4190 0
c Var 'aux865' direct represents '1' with '4191'
4189 -4190 4191 0
-4191 4190 0
-4191 -4189 0
c Var 'aux865' direct represents '2' with '-4190'
4189 4191 -4190 0
c Encoding variable: aux866 with domain: int(0..2) (representing constraint ((x_00002_00009=5) + (x_00006_00009=5)))
c Both direct and order encoding.
c Var 'aux866' order represents '0' with '4192'
c Var 'aux866' direct represents '0' with '4192'
c Var 'aux866' order represents '1' with '4193'
-4192 4193 0
c Var 'aux866' direct represents '1' with '4194'
4192 -4193 4194 0
-4194 4193 0
-4194 -4192 0
c Var 'aux866' direct represents '2' with '-4193'
4192 4194 -4193 0
c Encoding variable: aux867 with domain: int(0..2) (representing constraint ((x_00009_00009=5) + (x_00004_00009=5)))
c Both direct and order encoding.
c Var 'aux867' order represents '0' with '4195'
c Var 'aux867' direct represents '0' with '4195'
c Var 'aux867' order represents '1' with '4196'
-4195 4196 0
c Var 'aux867' direct represents '1' with '4197'
4195 -4196 4197 0
-4197 4196 0
-4197 -4195 0
c Var 'aux867' direct represents '2' with '-4196'
4195 4197 -4196 0
c Encoding variable: aux868 with domain: int(0..3) (representing constraint ((x_00001_00009=5) + aux867))
c Both direct and order encoding.
c Var 'aux868' order represents '0' with '4198'
c Var 'aux868' direct represents '0' with '4198'
c Var 'aux868' order represents '1' with '4199'
-4198 4199 0
c Var 'aux868' direct represents '1' with '4200'
4198 -4199 4200 0
-4200 4199 0
-4200 -4198 0
c Var 'aux868' order represents '2' with '4201'
-4199 4201 0
c Var 'aux868' direct represents '2' with '4202'
4199 -4201 4202 0
-4202 4201 0
-4202 -4199 0
c Var 'aux868' direct represents '3' with '-4201'
4198 4200 4202 -4201 0
c Encoding variable: aux869 with domain: int(0..4) (representing constraint (aux864 + aux866))
c Both direct and order encoding.
c Var 'aux869' order represents '0' with '4203'
c Var 'aux869' direct represents '0' with '4203'
c Var 'aux869' order represents '1' with '4204'
-4203 4204 0
c Var 'aux869' direct represents '1' with '4205'
4203 -4204 4205 0
-4205 4204 0
-4205 -4203 0
c Var 'aux869' order represents '2' with '4206'
-4204 4206 0
c Var 'aux869' direct represents '2' with '4207'
4204 -4206 4207 0
-4207 4206 0
-4207 -4204 0
c Var 'aux869' order represents '3' with '4208'
-4206 4208 0
c Var 'aux869' direct represents '3' with '4209'
4206 -4208 4209 0
-4209 4208 0
-4209 -4206 0
c Var 'aux869' direct represents '4' with '-4208'
4203 4205 4207 4209 -4208 0
c Encoding variable: aux870 with domain: int(0..2) (representing constraint ((x_00003_00009=6) + (x_00005_00009=6)))
c Both direct and order encoding.
c Var 'aux870' order represents '0' with '4210'
c Var 'aux870' direct represents '0' with '4210'
c Var 'aux870' order represents '1' with '4211'
-4210 4211 0
c Var 'aux870' direct represents '1' with '4212'
4210 -4211 4212 0
-4212 4211 0
-4212 -4210 0
c Var 'aux870' direct represents '2' with '-4211'
4210 4212 -4211 0
c Encoding variable: aux871 with domain: int(0..2) (representing constraint ((x_00007_00009=6) + (x_00008_00009=6)))
c Both direct and order encoding.
c Var 'aux871' order represents '0' with '4213'
c Var 'aux871' direct represents '0' with '4213'
c Var 'aux871' order represents '1' with '4214'
-4213 4214 0
c Var 'aux871' direct represents '1' with '4215'
4213 -4214 4215 0
-4215 4214 0
-4215 -4213 0
c Var 'aux871' direct represents '2' with '-4214'
4213 4215 -4214 0
c Encoding variable: aux872 with domain: int(0..2) (representing constraint ((x_00002_00009=6) + (x_00006_00009=6)))
c Both direct and order encoding.
c Var 'aux872' order represents '0' with '4216'
c Var 'aux872' direct represents '0' with '4216'
c Var 'aux872' order represents '1' with '4217'
-4216 4217 0
c Var 'aux872' direct represents '1' with '4218'
4216 -4217 4218 0
-4218 4217 0
-4218 -4216 0
c Var 'aux872' direct represents '2' with '-4217'
4216 4218 -4217 0
c Encoding variable: aux873 with domain: int(0..2) (representing constraint ((x_00009_00009=6) + (x_00004_00009=6)))
c Both direct and order encoding.
c Var 'aux873' order represents '0' with '4219'
c Var 'aux873' direct represents '0' with '4219'
c Var 'aux873' order represents '1' with '4220'
-4219 4220 0
c Var 'aux873' direct represents '1' with '4221'
4219 -4220 4221 0
-4221 4220 0
-4221 -4219 0
c Var 'aux873' direct represents '2' with '-4220'
4219 4221 -4220 0
c Encoding variable: aux874 with domain: int(0..3) (representing constraint ((x_00001_00009=6) + aux873))
c Both direct and order encoding.
c Var 'aux874' order represents '0' with '4222'
c Var 'aux874' direct represents '0' with '4222'
c Var 'aux874' order represents '1' with '4223'
-4222 4223 0
c Var 'aux874' direct represents '1' with '4224'
4222 -4223 4224 0
-4224 4223 0
-4224 -4222 0
c Var 'aux874' order represents '2' with '4225'
-4223 4225 0
c Var 'aux874' direct represents '2' with '4226'
4223 -4225 4226 0
-4226 4225 0
-4226 -4223 0
c Var 'aux874' direct represents '3' with '-4225'
4222 4224 4226 -4225 0
c Encoding variable: aux875 with domain: int(0..4) (representing constraint (aux870 + aux872))
c Both direct and order encoding.
c Var 'aux875' order represents '0' with '4227'
c Var 'aux875' direct represents '0' with '4227'
c Var 'aux875' order represents '1' with '4228'
-4227 4228 0
c Var 'aux875' direct represents '1' with '4229'
4227 -4228 4229 0
-4229 4228 0
-4229 -4227 0
c Var 'aux875' order represents '2' with '4230'
-4228 4230 0
c Var 'aux875' direct represents '2' with '4231'
4228 -4230 4231 0
-4231 4230 0
-4231 -4228 0
c Var 'aux875' order represents '3' with '4232'
-4230 4232 0
c Var 'aux875' direct represents '3' with '4233'
4230 -4232 4233 0
-4233 4232 0
-4233 -4230 0
c Var 'aux875' direct represents '4' with '-4232'
4227 4229 4231 4233 -4232 0
c Encoding variable: aux876 with domain: int(0..2) (representing constraint ((x_00003_00009=7) + (x_00005_00009=7)))
c Both direct and order encoding.
c Var 'aux876' order represents '0' with '4234'
c Var 'aux876' direct represents '0' with '4234'
c Var 'aux876' order represents '1' with '4235'
-4234 4235 0
c Var 'aux876' direct represents '1' with '4236'
4234 -4235 4236 0
-4236 4235 0
-4236 -4234 0
c Var 'aux876' direct represents '2' with '-4235'
4234 4236 -4235 0
c Encoding variable: aux877 with domain: int(0..2) (representing constraint ((x_00007_00009=7) + (x_00008_00009=7)))
c Both direct and order encoding.
c Var 'aux877' order represents '0' with '4237'
c Var 'aux877' direct represents '0' with '4237'
c Var 'aux877' order represents '1' with '4238'
-4237 4238 0
c Var 'aux877' direct represents '1' with '4239'
4237 -4238 4239 0
-4239 4238 0
-4239 -4237 0
c Var 'aux877' direct represents '2' with '-4238'
4237 4239 -4238 0
c Encoding variable: aux878 with domain: int(0..2) (representing constraint ((x_00002_00009=7) + (x_00006_00009=7)))
c Both direct and order encoding.
c Var 'aux878' order represents '0' with '4240'
c Var 'aux878' direct represents '0' with '4240'
c Var 'aux878' order represents '1' with '4241'
-4240 4241 0
c Var 'aux878' direct represents '1' with '4242'
4240 -4241 4242 0
-4242 4241 0
-4242 -4240 0
c Var 'aux878' direct represents '2' with '-4241'
4240 4242 -4241 0
c Encoding variable: aux879 with domain: int(0..2) (representing constraint ((x_00009_00009=7) + (x_00004_00009=7)))
c Both direct and order encoding.
c Var 'aux879' order represents '0' with '4243'
c Var 'aux879' direct represents '0' with '4243'
c Var 'aux879' order represents '1' with '4244'
-4243 4244 0
c Var 'aux879' direct represents '1' with '4245'
4243 -4244 4245 0
-4245 4244 0
-4245 -4243 0
c Var 'aux879' direct represents '2' with '-4244'
4243 4245 -4244 0
c Encoding variable: aux880 with domain: int(0..3) (representing constraint ((x_00001_00009=7) + aux879))
c Both direct and order encoding.
c Var 'aux880' order represents '0' with '4246'
c Var 'aux880' direct represents '0' with '4246'
c Var 'aux880' order represents '1' with '4247'
-4246 4247 0
c Var 'aux880' direct represents '1' with '4248'
4246 -4247 4248 0
-4248 4247 0
-4248 -4246 0
c Var 'aux880' order represents '2' with '4249'
-4247 4249 0
c Var 'aux880' direct represents '2' with '4250'
4247 -4249 4250 0
-4250 4249 0
-4250 -4247 0
c Var 'aux880' direct represents '3' with '-4249'
4246 4248 4250 -4249 0
c Encoding variable: aux881 with domain: int(0..4) (representing constraint (aux876 + aux878))
c Both direct and order encoding.
c Var 'aux881' order represents '0' with '4251'
c Var 'aux881' direct represents '0' with '4251'
c Var 'aux881' order represents '1' with '4252'
-4251 4252 0
c Var 'aux881' direct represents '1' with '4253'
4251 -4252 4253 0
-4253 4252 0
-4253 -4251 0
c Var 'aux881' order represents '2' with '4254'
-4252 4254 0
c Var 'aux881' direct represents '2' with '4255'
4252 -4254 4255 0
-4255 4254 0
-4255 -4252 0
c Var 'aux881' order represents '3' with '4256'
-4254 4256 0
c Var 'aux881' direct represents '3' with '4257'
4254 -4256 4257 0
-4257 4256 0
-4257 -4254 0
c Var 'aux881' direct represents '4' with '-4256'
4251 4253 4255 4257 -4256 0
c Encoding variable: aux882 with domain: int(0..2) (representing constraint ((x_00003_00009=8) + (x_00005_00009=8)))
c Both direct and order encoding.
c Var 'aux882' order represents '0' with '4258'
c Var 'aux882' direct represents '0' with '4258'
c Var 'aux882' order represents '1' with '4259'
-4258 4259 0
c Var 'aux882' direct represents '1' with '4260'
4258 -4259 4260 0
-4260 4259 0
-4260 -4258 0
c Var 'aux882' direct represents '2' with '-4259'
4258 4260 -4259 0
c Encoding variable: aux883 with domain: int(0..2) (representing constraint ((x_00007_00009=8) + (x_00008_00009=8)))
c Both direct and order encoding.
c Var 'aux883' order represents '0' with '4261'
c Var 'aux883' direct represents '0' with '4261'
c Var 'aux883' order represents '1' with '4262'
-4261 4262 0
c Var 'aux883' direct represents '1' with '4263'
4261 -4262 4263 0
-4263 4262 0
-4263 -4261 0
c Var 'aux883' direct represents '2' with '-4262'
4261 4263 -4262 0
c Encoding variable: aux884 with domain: int(0..2) (representing constraint ((x_00002_00009=8) + (x_00006_00009=8)))
c Both direct and order encoding.
c Var 'aux884' order represents '0' with '4264'
c Var 'aux884' direct represents '0' with '4264'
c Var 'aux884' order represents '1' with '4265'
-4264 4265 0
c Var 'aux884' direct represents '1' with '4266'
4264 -4265 4266 0
-4266 4265 0
-4266 -4264 0
c Var 'aux884' direct represents '2' with '-4265'
4264 4266 -4265 0
c Encoding variable: aux885 with domain: int(0..2) (representing constraint ((x_00009_00009=8) + (x_00004_00009=8)))
c Both direct and order encoding.
c Var 'aux885' order represents '0' with '4267'
c Var 'aux885' direct represents '0' with '4267'
c Var 'aux885' order represents '1' with '4268'
-4267 4268 0
c Var 'aux885' direct represents '1' with '4269'
4267 -4268 4269 0
-4269 4268 0
-4269 -4267 0
c Var 'aux885' direct represents '2' with '-4268'
4267 4269 -4268 0
c Encoding variable: aux886 with domain: int(0..3) (representing constraint ((x_00001_00009=8) + aux885))
c Both direct and order encoding.
c Var 'aux886' order represents '0' with '4270'
c Var 'aux886' direct represents '0' with '4270'
c Var 'aux886' order represents '1' with '4271'
-4270 4271 0
c Var 'aux886' direct represents '1' with '4272'
4270 -4271 4272 0
-4272 4271 0
-4272 -4270 0
c Var 'aux886' order represents '2' with '4273'
-4271 4273 0
c Var 'aux886' direct represents '2' with '4274'
4271 -4273 4274 0
-4274 4273 0
-4274 -4271 0
c Var 'aux886' direct represents '3' with '-4273'
4270 4272 4274 -4273 0
c Encoding variable: aux887 with domain: int(0..4) (representing constraint (aux882 + aux884))
c Both direct and order encoding.
c Var 'aux887' order represents '0' with '4275'
c Var 'aux887' direct represents '0' with '4275'
c Var 'aux887' order represents '1' with '4276'
-4275 4276 0
c Var 'aux887' direct represents '1' with '4277'
4275 -4276 4277 0
-4277 4276 0
-4277 -4275 0
c Var 'aux887' order represents '2' with '4278'
-4276 4278 0
c Var 'aux887' direct represents '2' with '4279'
4276 -4278 4279 0
-4279 4278 0
-4279 -4276 0
c Var 'aux887' order represents '3' with '4280'
-4278 4280 0
c Var 'aux887' direct represents '3' with '4281'
4278 -4280 4281 0
-4281 4280 0
-4281 -4278 0
c Var 'aux887' direct represents '4' with '-4280'
4275 4277 4279 4281 -4280 0
c Encoding variable: aux888 with domain: int(0..2) (representing constraint ((x_00003_00009=9) + (x_00005_00009=9)))
c Both direct and order encoding.
c Var 'aux888' order represents '0' with '4282'
c Var 'aux888' direct represents '0' with '4282'
c Var 'aux888' order represents '1' with '4283'
-4282 4283 0
c Var 'aux888' direct represents '1' with '4284'
4282 -4283 4284 0
-4284 4283 0
-4284 -4282 0
c Var 'aux888' direct represents '2' with '-4283'
4282 4284 -4283 0
c Encoding variable: aux889 with domain: int(0..2) (representing constraint ((x_00007_00009=9) + (x_00008_00009=9)))
c Both direct and order encoding.
c Var 'aux889' order represents '0' with '4285'
c Var 'aux889' direct represents '0' with '4285'
c Var 'aux889' order represents '1' with '4286'
-4285 4286 0
c Var 'aux889' direct represents '1' with '4287'
4285 -4286 4287 0
-4287 4286 0
-4287 -4285 0
c Var 'aux889' direct represents '2' with '-4286'
4285 4287 -4286 0
c Encoding variable: aux890 with domain: int(0..2) (representing constraint ((x_00002_00009=9) + (x_00006_00009=9)))
c Both direct and order encoding.
c Var 'aux890' order represents '0' with '4288'
c Var 'aux890' direct represents '0' with '4288'
c Var 'aux890' order represents '1' with '4289'
-4288 4289 0
c Var 'aux890' direct represents '1' with '4290'
4288 -4289 4290 0
-4290 4289 0
-4290 -4288 0
c Var 'aux890' direct represents '2' with '-4289'
4288 4290 -4289 0
c Encoding variable: aux891 with domain: int(0..2) (representing constraint ((x_00009_00009=9) + (x_00004_00009=9)))
c Both direct and order encoding.
c Var 'aux891' order represents '0' with '4291'
c Var 'aux891' direct represents '0' with '4291'
c Var 'aux891' order represents '1' with '4292'
-4291 4292 0
c Var 'aux891' direct represents '1' with '4293'
4291 -4292 4293 0
-4293 4292 0
-4293 -4291 0
c Var 'aux891' direct represents '2' with '-4292'
4291 4293 -4292 0
c Encoding variable: aux892 with domain: int(0..3) (representing constraint ((x_00001_00009=9) + aux891))
c Both direct and order encoding.
c Var 'aux892' order represents '0' with '4294'
c Var 'aux892' direct represents '0' with '4294'
c Var 'aux892' order represents '1' with '4295'
-4294 4295 0
c Var 'aux892' direct represents '1' with '4296'
4294 -4295 4296 0
-4296 4295 0
-4296 -4294 0
c Var 'aux892' order represents '2' with '4297'
-4295 4297 0
c Var 'aux892' direct represents '2' with '4298'
4295 -4297 4298 0
-4298 4297 0
-4298 -4295 0
c Var 'aux892' direct represents '3' with '-4297'
4294 4296 4298 -4297 0
c Encoding variable: aux893 with domain: int(0..4) (representing constraint (aux888 + aux890))
c Both direct and order encoding.
c Var 'aux893' order represents '0' with '4299'
c Var 'aux893' direct represents '0' with '4299'
c Var 'aux893' order represents '1' with '4300'
-4299 4300 0
c Var 'aux893' direct represents '1' with '4301'
4299 -4300 4301 0
-4301 4300 0
-4301 -4299 0
c Var 'aux893' order represents '2' with '4302'
-4300 4302 0
c Var 'aux893' direct represents '2' with '4303'
4300 -4302 4303 0
-4303 4302 0
-4303 -4300 0
c Var 'aux893' order represents '3' with '4304'
-4302 4304 0
c Var 'aux893' direct represents '3' with '4305'
4302 -4304 4305 0
-4305 4304 0
-4305 -4302 0
c Var 'aux893' direct represents '4' with '-4304'
4299 4301 4303 4305 -4304 0
c Encoding variable: aux894 with domain: int(0..2) (representing constraint ((x_00001_00001=1) + (x_00001_00009=1)))
c Both direct and order encoding.
c Var 'aux894' order represents '0' with '4306'
c Var 'aux894' direct represents '0' with '4306'
c Var 'aux894' order represents '1' with '4307'
-4306 4307 0
c Var 'aux894' direct represents '1' with '4308'
4306 -4307 4308 0
-4308 4307 0
-4308 -4306 0
c Var 'aux894' direct represents '2' with '-4307'
4306 4308 -4307 0
c Encoding variable: aux895 with domain: int(0..2) (representing constraint ((x_00001_00008=1) + (x_00001_00002=1)))
c Both direct and order encoding.
c Var 'aux895' order represents '0' with '4309'
c Var 'aux895' direct represents '0' with '4309'
c Var 'aux895' order represents '1' with '4310'
-4309 4310 0
c Var 'aux895' direct represents '1' with '4311'
4309 -4310 4311 0
-4311 4310 0
-4311 -4309 0
c Var 'aux895' direct represents '2' with '-4310'
4309 4311 -4310 0
c Encoding variable: aux896 with domain: int(0..2) (representing constraint ((x_00001_00007=1) + (x_00001_00004=1)))
c Both direct and order encoding.
c Var 'aux896' order represents '0' with '4312'
c Var 'aux896' direct represents '0' with '4312'
c Var 'aux896' order represents '1' with '4313'
-4312 4313 0
c Var 'aux896' direct represents '1' with '4314'
4312 -4313 4314 0
-4314 4313 0
-4314 -4312 0
c Var 'aux896' direct represents '2' with '-4313'
4312 4314 -4313 0
c Encoding variable: aux897 with domain: int(0..2) (representing constraint ((x_00001_00006=1) + (x_00001_00005=1)))
c Both direct and order encoding.
c Var 'aux897' order represents '0' with '4315'
c Var 'aux897' direct represents '0' with '4315'
c Var 'aux897' order represents '1' with '4316'
-4315 4316 0
c Var 'aux897' direct represents '1' with '4317'
4315 -4316 4317 0
-4317 4316 0
-4317 -4315 0
c Var 'aux897' direct represents '2' with '-4316'
4315 4317 -4316 0
c Encoding variable: aux898 with domain: int(0..3) (representing constraint ((x_00001_00003=1) + aux897))
c Both direct and order encoding.
c Var 'aux898' order represents '0' with '4318'
c Var 'aux898' direct represents '0' with '4318'
c Var 'aux898' order represents '1' with '4319'
-4318 4319 0
c Var 'aux898' direct represents '1' with '4320'
4318 -4319 4320 0
-4320 4319 0
-4320 -4318 0
c Var 'aux898' order represents '2' with '4321'
-4319 4321 0
c Var 'aux898' direct represents '2' with '4322'
4319 -4321 4322 0
-4322 4321 0
-4322 -4319 0
c Var 'aux898' direct represents '3' with '-4321'
4318 4320 4322 -4321 0
c Encoding variable: aux899 with domain: int(0..4) (representing constraint (aux894 + aux896))
c Both direct and order encoding.
c Var 'aux899' order represents '0' with '4323'
c Var 'aux899' direct represents '0' with '4323'
c Var 'aux899' order represents '1' with '4324'
-4323 4324 0
c Var 'aux899' direct represents '1' with '4325'
4323 -4324 4325 0
-4325 4324 0
-4325 -4323 0
c Var 'aux899' order represents '2' with '4326'
-4324 4326 0
c Var 'aux899' direct represents '2' with '4327'
4324 -4326 4327 0
-4327 4326 0
-4327 -4324 0
c Var 'aux899' order represents '3' with '4328'
-4326 4328 0
c Var 'aux899' direct represents '3' with '4329'
4326 -4328 4329 0
-4329 4328 0
-4329 -4326 0
c Var 'aux899' direct represents '4' with '-4328'
4323 4325 4327 4329 -4328 0
c Encoding variable: aux900 with domain: int(0..2) (representing constraint ((x_00001_00001=2) + (x_00001_00009=2)))
c Both direct and order encoding.
c Var 'aux900' order represents '0' with '4330'
c Var 'aux900' direct represents '0' with '4330'
c Var 'aux900' order represents '1' with '4331'
-4330 4331 0
c Var 'aux900' direct represents '1' with '4332'
4330 -4331 4332 0
-4332 4331 0
-4332 -4330 0
c Var 'aux900' direct represents '2' with '-4331'
4330 4332 -4331 0
c Encoding variable: aux901 with domain: int(0..2) (representing constraint ((x_00001_00008=2) + (x_00001_00002=2)))
c Both direct and order encoding.
c Var 'aux901' order represents '0' with '4333'
c Var 'aux901' direct represents '0' with '4333'
c Var 'aux901' order represents '1' with '4334'
-4333 4334 0
c Var 'aux901' direct represents '1' with '4335'
4333 -4334 4335 0
-4335 4334 0
-4335 -4333 0
c Var 'aux901' direct represents '2' with '-4334'
4333 4335 -4334 0
c Encoding variable: aux902 with domain: int(0..2) (representing constraint ((x_00001_00007=2) + (x_00001_00004=2)))
c Both direct and order encoding.
c Var 'aux902' order represents '0' with '4336'
c Var 'aux902' direct represents '0' with '4336'
c Var 'aux902' order represents '1' with '4337'
-4336 4337 0
c Var 'aux902' direct represents '1' with '4338'
4336 -4337 4338 0
-4338 4337 0
-4338 -4336 0
c Var 'aux902' direct represents '2' with '-4337'
4336 4338 -4337 0
c Encoding variable: aux903 with domain: int(0..2) (representing constraint ((x_00001_00006=2) + (x_00001_00005=2)))
c Both direct and order encoding.
c Var 'aux903' order represents '0' with '4339'
c Var 'aux903' direct represents '0' with '4339'
c Var 'aux903' order represents '1' with '4340'
-4339 4340 0
c Var 'aux903' direct represents '1' with '4341'
4339 -4340 4341 0
-4341 4340 0
-4341 -4339 0
c Var 'aux903' direct represents '2' with '-4340'
4339 4341 -4340 0
c Encoding variable: aux904 with domain: int(0..3) (representing constraint ((x_00001_00003=2) + aux903))
c Both direct and order encoding.
c Var 'aux904' order represents '0' with '4342'
c Var 'aux904' direct represents '0' with '4342'
c Var 'aux904' order represents '1' with '4343'
-4342 4343 0
c Var 'aux904' direct represents '1' with '4344'
4342 -4343 4344 0
-4344 4343 0
-4344 -4342 0
c Var 'aux904' order represents '2' with '4345'
-4343 4345 0
c Var 'aux904' direct represents '2' with '4346'
4343 -4345 4346 0
-4346 4345 0
-4346 -4343 0
c Var 'aux904' direct represents '3' with '-4345'
4342 4344 4346 -4345 0
c Encoding variable: aux905 with domain: int(0..4) (representing constraint (aux900 + aux902))
c Both direct and order encoding.
c Var 'aux905' order represents '0' with '4347'
c Var 'aux905' direct represents '0' with '4347'
c Var 'aux905' order represents '1' with '4348'
-4347 4348 0
c Var 'aux905' direct represents '1' with '4349'
4347 -4348 4349 0
-4349 4348 0
-4349 -4347 0
c Var 'aux905' order represents '2' with '4350'
-4348 4350 0
c Var 'aux905' direct represents '2' with '4351'
4348 -4350 4351 0
-4351 4350 0
-4351 -4348 0
c Var 'aux905' order represents '3' with '4352'
-4350 4352 0
c Var 'aux905' direct represents '3' with '4353'
4350 -4352 4353 0
-4353 4352 0
-4353 -4350 0
c Var 'aux905' direct represents '4' with '-4352'
4347 4349 4351 4353 -4352 0
c Encoding variable: aux906 with domain: int(0..2) (representing constraint ((x_00001_00001=3) + (x_00001_00009=3)))
c Both direct and order encoding.
c Var 'aux906' order represents '0' with '4354'
c Var 'aux906' direct represents '0' with '4354'
c Var 'aux906' order represents '1' with '4355'
-4354 4355 0
c Var 'aux906' direct represents '1' with '4356'
4354 -4355 4356 0
-4356 4355 0
-4356 -4354 0
c Var 'aux906' direct represents '2' with '-4355'
4354 4356 -4355 0
c Encoding variable: aux907 with domain: int(0..2) (representing constraint ((x_00001_00008=3) + (x_00001_00002=3)))
c Both direct and order encoding.
c Var 'aux907' order represents '0' with '4357'
c Var 'aux907' direct represents '0' with '4357'
c Var 'aux907' order represents '1' with '4358'
-4357 4358 0
c Var 'aux907' direct represents '1' with '4359'
4357 -4358 4359 0
-4359 4358 0
-4359 -4357 0
c Var 'aux907' direct represents '2' with '-4358'
4357 4359 -4358 0
c Encoding variable: aux908 with domain: int(0..2) (representing constraint ((x_00001_00007=3) + (x_00001_00004=3)))
c Both direct and order encoding.
c Var 'aux908' order represents '0' with '4360'
c Var 'aux908' direct represents '0' with '4360'
c Var 'aux908' order represents '1' with '4361'
-4360 4361 0
c Var 'aux908' direct represents '1' with '4362'
4360 -4361 4362 0
-4362 4361 0
-4362 -4360 0
c Var 'aux908' direct represents '2' with '-4361'
4360 4362 -4361 0
c Encoding variable: aux909 with domain: int(0..2) (representing constraint ((x_00001_00006=3) + (x_00001_00005=3)))
c Both direct and order encoding.
c Var 'aux909' order represents '0' with '4363'
c Var 'aux909' direct represents '0' with '4363'
c Var 'aux909' order represents '1' with '4364'
-4363 4364 0
c Var 'aux909' direct represents '1' with '4365'
4363 -4364 4365 0
-4365 4364 0
-4365 -4363 0
c Var 'aux909' direct represents '2' with '-4364'
4363 4365 -4364 0
c Encoding variable: aux910 with domain: int(0..3) (representing constraint ((x_00001_00003=3) + aux909))
c Both direct and order encoding.
c Var 'aux910' order represents '0' with '4366'
c Var 'aux910' direct represents '0' with '4366'
c Var 'aux910' order represents '1' with '4367'
-4366 4367 0
c Var 'aux910' direct represents '1' with '4368'
4366 -4367 4368 0
-4368 4367 0
-4368 -4366 0
c Var 'aux910' order represents '2' with '4369'
-4367 4369 0
c Var 'aux910' direct represents '2' with '4370'
4367 -4369 4370 0
-4370 4369 0
-4370 -4367 0
c Var 'aux910' direct represents '3' with '-4369'
4366 4368 4370 -4369 0
c Encoding variable: aux911 with domain: int(0..4) (representing constraint (aux906 + aux908))
c Both direct and order encoding.
c Var 'aux911' order represents '0' with '4371'
c Var 'aux911' direct represents '0' with '4371'
c Var 'aux911' order represents '1' with '4372'
-4371 4372 0
c Var 'aux911' direct represents '1' with '4373'
4371 -4372 4373 0
-4373 4372 0
-4373 -4371 0
c Var 'aux911' order represents '2' with '4374'
-4372 4374 0
c Var 'aux911' direct represents '2' with '4375'
4372 -4374 4375 0
-4375 4374 0
-4375 -4372 0
c Var 'aux911' order represents '3' with '4376'
-4374 4376 0
c Var 'aux911' direct represents '3' with '4377'
4374 -4376 4377 0
-4377 4376 0
-4377 -4374 0
c Var 'aux911' direct represents '4' with '-4376'
4371 4373 4375 4377 -4376 0
c Encoding variable: aux912 with domain: int(0..2) (representing constraint ((x_00001_00001=4) + (x_00001_00009=4)))
c Both direct and order encoding.
c Var 'aux912' order represents '0' with '4378'
c Var 'aux912' direct represents '0' with '4378'
c Var 'aux912' order represents '1' with '4379'
-4378 4379 0
c Var 'aux912' direct represents '1' with '4380'
4378 -4379 4380 0
-4380 4379 0
-4380 -4378 0
c Var 'aux912' direct represents '2' with '-4379'
4378 4380 -4379 0
c Encoding variable: aux913 with domain: int(0..2) (representing constraint ((x_00001_00008=4) + (x_00001_00002=4)))
c Both direct and order encoding.
c Var 'aux913' order represents '0' with '4381'
c Var 'aux913' direct represents '0' with '4381'
c Var 'aux913' order represents '1' with '4382'
-4381 4382 0
c Var 'aux913' direct represents '1' with '4383'
4381 -4382 4383 0
-4383 4382 0
-4383 -4381 0
c Var 'aux913' direct represents '2' with '-4382'
4381 4383 -4382 0
c Encoding variable: aux914 with domain: int(0..2) (representing constraint ((x_00001_00007=4) + (x_00001_00004=4)))
c Both direct and order encoding.
c Var 'aux914' order represents '0' with '4384'
c Var 'aux914' direct represents '0' with '4384'
c Var 'aux914' order represents '1' with '4385'
-4384 4385 0
c Var 'aux914' direct represents '1' with '4386'
4384 -4385 4386 0
-4386 4385 0
-4386 -4384 0
c Var 'aux914' direct represents '2' with '-4385'
4384 4386 -4385 0
c Encoding variable: aux915 with domain: int(0..2) (representing constraint ((x_00001_00006=4) + (x_00001_00005=4)))
c Both direct and order encoding.
c Var 'aux915' order represents '0' with '4387'
c Var 'aux915' direct represents '0' with '4387'
c Var 'aux915' order represents '1' with '4388'
-4387 4388 0
c Var 'aux915' direct represents '1' with '4389'
4387 -4388 4389 0
-4389 4388 0
-4389 -4387 0
c Var 'aux915' direct represents '2' with '-4388'
4387 4389 -4388 0
c Encoding variable: aux916 with domain: int(0..3) (representing constraint ((x_00001_00003=4) + aux915))
c Both direct and order encoding.
c Var 'aux916' order represents '0' with '4390'
c Var 'aux916' direct represents '0' with '4390'
c Var 'aux916' order represents '1' with '4391'
-4390 4391 0
c Var 'aux916' direct represents '1' with '4392'
4390 -4391 4392 0
-4392 4391 0
-4392 -4390 0
c Var 'aux916' order represents '2' with '4393'
-4391 4393 0
c Var 'aux916' direct represents '2' with '4394'
4391 -4393 4394 0
-4394 4393 0
-4394 -4391 0
c Var 'aux916' direct represents '3' with '-4393'
4390 4392 4394 -4393 0
c Encoding variable: aux917 with domain: int(0..4) (representing constraint (aux912 + aux914))
c Both direct and order encoding.
c Var 'aux917' order represents '0' with '4395'
c Var 'aux917' direct represents '0' with '4395'
c Var 'aux917' order represents '1' with '4396'
-4395 4396 0
c Var 'aux917' direct represents '1' with '4397'
4395 -4396 4397 0
-4397 4396 0
-4397 -4395 0
c Var 'aux917' order represents '2' with '4398'
-4396 4398 0
c Var 'aux917' direct represents '2' with '4399'
4396 -4398 4399 0
-4399 4398 0
-4399 -4396 0
c Var 'aux917' order represents '3' with '4400'
-4398 4400 0
c Var 'aux917' direct represents '3' with '4401'
4398 -4400 4401 0
-4401 4400 0
-4401 -4398 0
c Var 'aux917' direct represents '4' with '-4400'
4395 4397 4399 4401 -4400 0
c Encoding variable: aux918 with domain: int(0..2) (representing constraint ((x_00001_00001=5) + (x_00001_00009=5)))
c Both direct and order encoding.
c Var 'aux918' order represents '0' with '4402'
c Var 'aux918' direct represents '0' with '4402'
c Var 'aux918' order represents '1' with '4403'
-4402 4403 0
c Var 'aux918' direct represents '1' with '4404'
4402 -4403 4404 0
-4404 4403 0
-4404 -4402 0
c Var 'aux918' direct represents '2' with '-4403'
4402 4404 -4403 0
c Encoding variable: aux919 with domain: int(0..2) (representing constraint ((x_00001_00008=5) + (x_00001_00002=5)))
c Both direct and order encoding.
c Var 'aux919' order represents '0' with '4405'
c Var 'aux919' direct represents '0' with '4405'
c Var 'aux919' order represents '1' with '4406'
-4405 4406 0
c Var 'aux919' direct represents '1' with '4407'
4405 -4406 4407 0
-4407 4406 0
-4407 -4405 0
c Var 'aux919' direct represents '2' with '-4406'
4405 4407 -4406 0
c Encoding variable: aux920 with domain: int(0..2) (representing constraint ((x_00001_00007=5) + (x_00001_00004=5)))
c Both direct and order encoding.
c Var 'aux920' order represents '0' with '4408'
c Var 'aux920' direct represents '0' with '4408'
c Var 'aux920' order represents '1' with '4409'
-4408 4409 0
c Var 'aux920' direct represents '1' with '4410'
4408 -4409 4410 0
-4410 4409 0
-4410 -4408 0
c Var 'aux920' direct represents '2' with '-4409'
4408 4410 -4409 0
c Encoding variable: aux921 with domain: int(0..2) (representing constraint ((x_00001_00006=5) + (x_00001_00005=5)))
c Both direct and order encoding.
c Var 'aux921' order represents '0' with '4411'
c Var 'aux921' direct represents '0' with '4411'
c Var 'aux921' order represents '1' with '4412'
-4411 4412 0
c Var 'aux921' direct represents '1' with '4413'
4411 -4412 4413 0
-4413 4412 0
-4413 -4411 0
c Var 'aux921' direct represents '2' with '-4412'
4411 4413 -4412 0
c Encoding variable: aux922 with domain: int(0..3) (representing constraint ((x_00001_00003=5) + aux921))
c Both direct and order encoding.
c Var 'aux922' order represents '0' with '4414'
c Var 'aux922' direct represents '0' with '4414'
c Var 'aux922' order represents '1' with '4415'
-4414 4415 0
c Var 'aux922' direct represents '1' with '4416'
4414 -4415 4416 0
-4416 4415 0
-4416 -4414 0
c Var 'aux922' order represents '2' with '4417'
-4415 4417 0
c Var 'aux922' direct represents '2' with '4418'
4415 -4417 4418 0
-4418 4417 0
-4418 -4415 0
c Var 'aux922' direct represents '3' with '-4417'
4414 4416 4418 -4417 0
c Encoding variable: aux923 with domain: int(0..4) (representing constraint (aux918 + aux920))
c Both direct and order encoding.
c Var 'aux923' order represents '0' with '4419'
c Var 'aux923' direct represents '0' with '4419'
c Var 'aux923' order represents '1' with '4420'
-4419 4420 0
c Var 'aux923' direct represents '1' with '4421'
4419 -4420 4421 0
-4421 4420 0
-4421 -4419 0
c Var 'aux923' order represents '2' with '4422'
-4420 4422 0
c Var 'aux923' direct represents '2' with '4423'
4420 -4422 4423 0
-4423 4422 0
-4423 -4420 0
c Var 'aux923' order represents '3' with '4424'
-4422 4424 0
c Var 'aux923' direct represents '3' with '4425'
4422 -4424 4425 0
-4425 4424 0
-4425 -4422 0
c Var 'aux923' direct represents '4' with '-4424'
4419 4421 4423 4425 -4424 0
c Encoding variable: aux924 with domain: int(0..2) (representing constraint ((x_00001_00001=6) + (x_00001_00009=6)))
c Both direct and order encoding.
c Var 'aux924' order represents '0' with '4426'
c Var 'aux924' direct represents '0' with '4426'
c Var 'aux924' order represents '1' with '4427'
-4426 4427 0
c Var 'aux924' direct represents '1' with '4428'
4426 -4427 4428 0
-4428 4427 0
-4428 -4426 0
c Var 'aux924' direct represents '2' with '-4427'
4426 4428 -4427 0
c Encoding variable: aux925 with domain: int(0..2) (representing constraint ((x_00001_00008=6) + (x_00001_00002=6)))
c Both direct and order encoding.
c Var 'aux925' order represents '0' with '4429'
c Var 'aux925' direct represents '0' with '4429'
c Var 'aux925' order represents '1' with '4430'
-4429 4430 0
c Var 'aux925' direct represents '1' with '4431'
4429 -4430 4431 0
-4431 4430 0
-4431 -4429 0
c Var 'aux925' direct represents '2' with '-4430'
4429 4431 -4430 0
c Encoding variable: aux926 with domain: int(0..2) (representing constraint ((x_00001_00007=6) + (x_00001_00004=6)))
c Both direct and order encoding.
c Var 'aux926' order represents '0' with '4432'
c Var 'aux926' direct represents '0' with '4432'
c Var 'aux926' order represents '1' with '4433'
-4432 4433 0
c Var 'aux926' direct represents '1' with '4434'
4432 -4433 4434 0
-4434 4433 0
-4434 -4432 0
c Var 'aux926' direct represents '2' with '-4433'
4432 4434 -4433 0
c Encoding variable: aux927 with domain: int(0..2) (representing constraint ((x_00001_00006=6) + (x_00001_00005=6)))
c Both direct and order encoding.
c Var 'aux927' order represents '0' with '4435'
c Var 'aux927' direct represents '0' with '4435'
c Var 'aux927' order represents '1' with '4436'
-4435 4436 0
c Var 'aux927' direct represents '1' with '4437'
4435 -4436 4437 0
-4437 4436 0
-4437 -4435 0
c Var 'aux927' direct represents '2' with '-4436'
4435 4437 -4436 0
c Encoding variable: aux928 with domain: int(0..3) (representing constraint ((x_00001_00003=6) + aux927))
c Both direct and order encoding.
c Var 'aux928' order represents '0' with '4438'
c Var 'aux928' direct represents '0' with '4438'
c Var 'aux928' order represents '1' with '4439'
-4438 4439 0
c Var 'aux928' direct represents '1' with '4440'
4438 -4439 4440 0
-4440 4439 0
-4440 -4438 0
c Var 'aux928' order represents '2' with '4441'
-4439 4441 0
c Var 'aux928' direct represents '2' with '4442'
4439 -4441 4442 0
-4442 4441 0
-4442 -4439 0
c Var 'aux928' direct represents '3' with '-4441'
4438 4440 4442 -4441 0
c Encoding variable: aux929 with domain: int(0..4) (representing constraint (aux924 + aux926))
c Both direct and order encoding.
c Var 'aux929' order represents '0' with '4443'
c Var 'aux929' direct represents '0' with '4443'
c Var 'aux929' order represents '1' with '4444'
-4443 4444 0
c Var 'aux929' direct represents '1' with '4445'
4443 -4444 4445 0
-4445 4444 0
-4445 -4443 0
c Var 'aux929' order represents '2' with '4446'
-4444 4446 0
c Var 'aux929' direct represents '2' with '4447'
4444 -4446 4447 0
-4447 4446 0
-4447 -4444 0
c Var 'aux929' order represents '3' with '4448'
-4446 4448 0
c Var 'aux929' direct represents '3' with '4449'
4446 -4448 4449 0
-4449 4448 0
-4449 -4446 0
c Var 'aux929' direct represents '4' with '-4448'
4443 4445 4447 4449 -4448 0
c Encoding variable: aux930 with domain: int(0..2) (representing constraint ((x_00001_00001=7) + (x_00001_00009=7)))
c Both direct and order encoding.
c Var 'aux930' order represents '0' with '4450'
c Var 'aux930' direct represents '0' with '4450'
c Var 'aux930' order represents '1' with '4451'
-4450 4451 0
c Var 'aux930' direct represents '1' with '4452'
4450 -4451 4452 0
-4452 4451 0
-4452 -4450 0
c Var 'aux930' direct represents '2' with '-4451'
4450 4452 -4451 0
c Encoding variable: aux931 with domain: int(0..2) (representing constraint ((x_00001_00008=7) + (x_00001_00002=7)))
c Both direct and order encoding.
c Var 'aux931' order represents '0' with '4453'
c Var 'aux931' direct represents '0' with '4453'
c Var 'aux931' order represents '1' with '4454'
-4453 4454 0
c Var 'aux931' direct represents '1' with '4455'
4453 -4454 4455 0
-4455 4454 0
-4455 -4453 0
c Var 'aux931' direct represents '2' with '-4454'
4453 4455 -4454 0
c Encoding variable: aux932 with domain: int(0..2) (representing constraint ((x_00001_00007=7) + (x_00001_00004=7)))
c Both direct and order encoding.
c Var 'aux932' order represents '0' with '4456'
c Var 'aux932' direct represents '0' with '4456'
c Var 'aux932' order represents '1' with '4457'
-4456 4457 0
c Var 'aux932' direct represents '1' with '4458'
4456 -4457 4458 0
-4458 4457 0
-4458 -4456 0
c Var 'aux932' direct represents '2' with '-4457'
4456 4458 -4457 0
c Encoding variable: aux933 with domain: int(0..2) (representing constraint ((x_00001_00006=7) + (x_00001_00005=7)))
c Both direct and order encoding.
c Var 'aux933' order represents '0' with '4459'
c Var 'aux933' direct represents '0' with '4459'
c Var 'aux933' order represents '1' with '4460'
-4459 4460 0
c Var 'aux933' direct represents '1' with '4461'
4459 -4460 4461 0
-4461 4460 0
-4461 -4459 0
c Var 'aux933' direct represents '2' with '-4460'
4459 4461 -4460 0
c Encoding variable: aux934 with domain: int(0..3) (representing constraint ((x_00001_00003=7) + aux933))
c Both direct and order encoding.
c Var 'aux934' order represents '0' with '4462'
c Var 'aux934' direct represents '0' with '4462'
c Var 'aux934' order represents '1' with '4463'
-4462 4463 0
c Var 'aux934' direct represents '1' with '4464'
4462 -4463 4464 0
-4464 4463 0
-4464 -4462 0
c Var 'aux934' order represents '2' with '4465'
-4463 4465 0
c Var 'aux934' direct represents '2' with '4466'
4463 -4465 4466 0
-4466 4465 0
-4466 -4463 0
c Var 'aux934' direct represents '3' with '-4465'
4462 4464 4466 -4465 0
c Encoding variable: aux935 with domain: int(0..4) (representing constraint (aux930 + aux932))
c Both direct and order encoding.
c Var 'aux935' order represents '0' with '4467'
c Var 'aux935' direct represents '0' with '4467'
c Var 'aux935' order represents '1' with '4468'
-4467 4468 0
c Var 'aux935' direct represents '1' with '4469'
4467 -4468 4469 0
-4469 4468 0
-4469 -4467 0
c Var 'aux935' order represents '2' with '4470'
-4468 4470 0
c Var 'aux935' direct represents '2' with '4471'
4468 -4470 4471 0
-4471 4470 0
-4471 -4468 0
c Var 'aux935' order represents '3' with '4472'
-4470 4472 0
c Var 'aux935' direct represents '3' with '4473'
4470 -4472 4473 0
-4473 4472 0
-4473 -4470 0
c Var 'aux935' direct represents '4' with '-4472'
4467 4469 4471 4473 -4472 0
c Encoding variable: aux936 with domain: int(0..2) (representing constraint ((x_00001_00001=8) + (x_00001_00009=8)))
c Both direct and order encoding.
c Var 'aux936' order represents '0' with '4474'
c Var 'aux936' direct represents '0' with '4474'
c Var 'aux936' order represents '1' with '4475'
-4474 4475 0
c Var 'aux936' direct represents '1' with '4476'
4474 -4475 4476 0
-4476 4475 0
-4476 -4474 0
c Var 'aux936' direct represents '2' with '-4475'
4474 4476 -4475 0
c Encoding variable: aux937 with domain: int(0..2) (representing constraint ((x_00001_00008=8) + (x_00001_00002=8)))
c Both direct and order encoding.
c Var 'aux937' order represents '0' with '4477'
c Var 'aux937' direct represents '0' with '4477'
c Var 'aux937' order represents '1' with '4478'
-4477 4478 0
c Var 'aux937' direct represents '1' with '4479'
4477 -4478 4479 0
-4479 4478 0
-4479 -4477 0
c Var 'aux937' direct represents '2' with '-4478'
4477 4479 -4478 0
c Encoding variable: aux938 with domain: int(0..2) (representing constraint ((x_00001_00007=8) + (x_00001_00004=8)))
c Both direct and order encoding.
c Var 'aux938' order represents '0' with '4480'
c Var 'aux938' direct represents '0' with '4480'
c Var 'aux938' order represents '1' with '4481'
-4480 4481 0
c Var 'aux938' direct represents '1' with '4482'
4480 -4481 4482 0
-4482 4481 0
-4482 -4480 0
c Var 'aux938' direct represents '2' with '-4481'
4480 4482 -4481 0
c Encoding variable: aux939 with domain: int(0..2) (representing constraint ((x_00001_00006=8) + (x_00001_00005=8)))
c Both direct and order encoding.
c Var 'aux939' order represents '0' with '4483'
c Var 'aux939' direct represents '0' with '4483'
c Var 'aux939' order represents '1' with '4484'
-4483 4484 0
c Var 'aux939' direct represents '1' with '4485'
4483 -4484 4485 0
-4485 4484 0
-4485 -4483 0
c Var 'aux939' direct represents '2' with '-4484'
4483 4485 -4484 0
c Encoding variable: aux940 with domain: int(0..3) (representing constraint ((x_00001_00003=8) + aux939))
c Both direct and order encoding.
c Var 'aux940' order represents '0' with '4486'
c Var 'aux940' direct represents '0' with '4486'
c Var 'aux940' order represents '1' with '4487'
-4486 4487 0
c Var 'aux940' direct represents '1' with '4488'
4486 -4487 4488 0
-4488 4487 0
-4488 -4486 0
c Var 'aux940' order represents '2' with '4489'
-4487 4489 0
c Var 'aux940' direct represents '2' with '4490'
4487 -4489 4490 0
-4490 4489 0
-4490 -4487 0
c Var 'aux940' direct represents '3' with '-4489'
4486 4488 4490 -4489 0
c Encoding variable: aux941 with domain: int(0..4) (representing constraint (aux936 + aux938))
c Both direct and order encoding.
c Var 'aux941' order represents '0' with '4491'
c Var 'aux941' direct represents '0' with '4491'
c Var 'aux941' order represents '1' with '4492'
-4491 4492 0
c Var 'aux941' direct represents '1' with '4493'
4491 -4492 4493 0
-4493 4492 0
-4493 -4491 0
c Var 'aux941' order represents '2' with '4494'
-4492 4494 0
c Var 'aux941' direct represents '2' with '4495'
4492 -4494 4495 0
-4495 4494 0
-4495 -4492 0
c Var 'aux941' order represents '3' with '4496'
-4494 4496 0
c Var 'aux941' direct represents '3' with '4497'
4494 -4496 4497 0
-4497 4496 0
-4497 -4494 0
c Var 'aux941' direct represents '4' with '-4496'
4491 4493 4495 4497 -4496 0
c Encoding variable: aux942 with domain: int(0..2) (representing constraint ((x_00001_00001=9) + (x_00001_00009=9)))
c Both direct and order encoding.
c Var 'aux942' order represents '0' with '4498'
c Var 'aux942' direct represents '0' with '4498'
c Var 'aux942' order represents '1' with '4499'
-4498 4499 0
c Var 'aux942' direct represents '1' with '4500'
4498 -4499 4500 0
-4500 4499 0
-4500 -4498 0
c Var 'aux942' direct represents '2' with '-4499'
4498 4500 -4499 0
c Encoding variable: aux943 with domain: int(0..2) (representing constraint ((x_00001_00008=9) + (x_00001_00002=9)))
c Both direct and order encoding.
c Var 'aux943' order represents '0' with '4501'
c Var 'aux943' direct represents '0' with '4501'
c Var 'aux943' order represents '1' with '4502'
-4501 4502 0
c Var 'aux943' direct represents '1' with '4503'
4501 -4502 4503 0
-4503 4502 0
-4503 -4501 0
c Var 'aux943' direct represents '2' with '-4502'
4501 4503 -4502 0
c Encoding variable: aux944 with domain: int(0..2) (representing constraint ((x_00001_00007=9) + (x_00001_00004=9)))
c Both direct and order encoding.
c Var 'aux944' order represents '0' with '4504'
c Var 'aux944' direct represents '0' with '4504'
c Var 'aux944' order represents '1' with '4505'
-4504 4505 0
c Var 'aux944' direct represents '1' with '4506'
4504 -4505 4506 0
-4506 4505 0
-4506 -4504 0
c Var 'aux944' direct represents '2' with '-4505'
4504 4506 -4505 0
c Encoding variable: aux945 with domain: int(0..2) (representing constraint ((x_00001_00006=9) + (x_00001_00005=9)))
c Both direct and order encoding.
c Var 'aux945' order represents '0' with '4507'
c Var 'aux945' direct represents '0' with '4507'
c Var 'aux945' order represents '1' with '4508'
-4507 4508 0
c Var 'aux945' direct represents '1' with '4509'
4507 -4508 4509 0
-4509 4508 0
-4509 -4507 0
c Var 'aux945' direct represents '2' with '-4508'
4507 4509 -4508 0
c Encoding variable: aux946 with domain: int(0..3) (representing constraint ((x_00001_00003=9) + aux945))
c Both direct and order encoding.
c Var 'aux946' order represents '0' with '4510'
c Var 'aux946' direct represents '0' with '4510'
c Var 'aux946' order represents '1' with '4511'
-4510 4511 0
c Var 'aux946' direct represents '1' with '4512'
4510 -4511 4512 0
-4512 4511 0
-4512 -4510 0
c Var 'aux946' order represents '2' with '4513'
-4511 4513 0
c Var 'aux946' direct represents '2' with '4514'
4511 -4513 4514 0
-4514 4513 0
-4514 -4511 0
c Var 'aux946' direct represents '3' with '-4513'
4510 4512 4514 -4513 0
c Encoding variable: aux947 with domain: int(0..4) (representing constraint (aux942 + aux944))
c Both direct and order encoding.
c Var 'aux947' order represents '0' with '4515'
c Var 'aux947' direct represents '0' with '4515'
c Var 'aux947' order represents '1' with '4516'
-4515 4516 0
c Var 'aux947' direct represents '1' with '4517'
4515 -4516 4517 0
-4517 4516 0
-4517 -4515 0
c Var 'aux947' order represents '2' with '4518'
-4516 4518 0
c Var 'aux947' direct represents '2' with '4519'
4516 -4518 4519 0
-4519 4518 0
-4519 -4516 0
c Var 'aux947' order represents '3' with '4520'
-4518 4520 0
c Var 'aux947' direct represents '3' with '4521'
4518 -4520 4521 0
-4521 4520 0
-4521 -4518 0
c Var 'aux947' direct represents '4' with '-4520'
4515 4517 4519 4521 -4520 0
c Encoding variable: aux948 with domain: int(0..2) (representing constraint ((x_00002_00001=1) + (x_00002_00009=1)))
c Both direct and order encoding.
c Var 'aux948' order represents '0' with '4522'
c Var 'aux948' direct represents '0' with '4522'
c Var 'aux948' order represents '1' with '4523'
-4522 4523 0
c Var 'aux948' direct represents '1' with '4524'
4522 -4523 4524 0
-4524 4523 0
-4524 -4522 0
c Var 'aux948' direct represents '2' with '-4523'
4522 4524 -4523 0
c Encoding variable: aux949 with domain: int(0..2) (representing constraint ((x_00002_00008=1) + (x_00002_00002=1)))
c Both direct and order encoding.
c Var 'aux949' order represents '0' with '4525'
c Var 'aux949' direct represents '0' with '4525'
c Var 'aux949' order represents '1' with '4526'
-4525 4526 0
c Var 'aux949' direct represents '1' with '4527'
4525 -4526 4527 0
-4527 4526 0
-4527 -4525 0
c Var 'aux949' direct represents '2' with '-4526'
4525 4527 -4526 0
c Encoding variable: aux950 with domain: int(0..2) (representing constraint ((x_00002_00007=1) + (x_00002_00004=1)))
c Both direct and order encoding.
c Var 'aux950' order represents '0' with '4528'
c Var 'aux950' direct represents '0' with '4528'
c Var 'aux950' order represents '1' with '4529'
-4528 4529 0
c Var 'aux950' direct represents '1' with '4530'
4528 -4529 4530 0
-4530 4529 0
-4530 -4528 0
c Var 'aux950' direct represents '2' with '-4529'
4528 4530 -4529 0
c Encoding variable: aux951 with domain: int(0..2) (representing constraint ((x_00002_00006=1) + (x_00002_00005=1)))
c Both direct and order encoding.
c Var 'aux951' order represents '0' with '4531'
c Var 'aux951' direct represents '0' with '4531'
c Var 'aux951' order represents '1' with '4532'
-4531 4532 0
c Var 'aux951' direct represents '1' with '4533'
4531 -4532 4533 0
-4533 4532 0
-4533 -4531 0
c Var 'aux951' direct represents '2' with '-4532'
4531 4533 -4532 0
c Encoding variable: aux952 with domain: int(0..3) (representing constraint ((x_00002_00003=1) + aux951))
c Both direct and order encoding.
c Var 'aux952' order represents '0' with '4534'
c Var 'aux952' direct represents '0' with '4534'
c Var 'aux952' order represents '1' with '4535'
-4534 4535 0
c Var 'aux952' direct represents '1' with '4536'
4534 -4535 4536 0
-4536 4535 0
-4536 -4534 0
c Var 'aux952' order represents '2' with '4537'
-4535 4537 0
c Var 'aux952' direct represents '2' with '4538'
4535 -4537 4538 0
-4538 4537 0
-4538 -4535 0
c Var 'aux952' direct represents '3' with '-4537'
4534 4536 4538 -4537 0
c Encoding variable: aux953 with domain: int(0..4) (representing constraint (aux948 + aux950))
c Both direct and order encoding.
c Var 'aux953' order represents '0' with '4539'
c Var 'aux953' direct represents '0' with '4539'
c Var 'aux953' order represents '1' with '4540'
-4539 4540 0
c Var 'aux953' direct represents '1' with '4541'
4539 -4540 4541 0
-4541 4540 0
-4541 -4539 0
c Var 'aux953' order represents '2' with '4542'
-4540 4542 0
c Var 'aux953' direct represents '2' with '4543'
4540 -4542 4543 0
-4543 4542 0
-4543 -4540 0
c Var 'aux953' order represents '3' with '4544'
-4542 4544 0
c Var 'aux953' direct represents '3' with '4545'
4542 -4544 4545 0
-4545 4544 0
-4545 -4542 0
c Var 'aux953' direct represents '4' with '-4544'
4539 4541 4543 4545 -4544 0
c Encoding variable: aux954 with domain: int(0..2) (representing constraint ((x_00002_00001=2) + (x_00002_00009=2)))
c Both direct and order encoding.
c Var 'aux954' order represents '0' with '4546'
c Var 'aux954' direct represents '0' with '4546'
c Var 'aux954' order represents '1' with '4547'
-4546 4547 0
c Var 'aux954' direct represents '1' with '4548'
4546 -4547 4548 0
-4548 4547 0
-4548 -4546 0
c Var 'aux954' direct represents '2' with '-4547'
4546 4548 -4547 0
c Encoding variable: aux955 with domain: int(0..2) (representing constraint ((x_00002_00008=2) + (x_00002_00002=2)))
c Both direct and order encoding.
c Var 'aux955' order represents '0' with '4549'
c Var 'aux955' direct represents '0' with '4549'
c Var 'aux955' order represents '1' with '4550'
-4549 4550 0
c Var 'aux955' direct represents '1' with '4551'
4549 -4550 4551 0
-4551 4550 0
-4551 -4549 0
c Var 'aux955' direct represents '2' with '-4550'
4549 4551 -4550 0
c Encoding variable: aux956 with domain: int(0..2) (representing constraint ((x_00002_00007=2) + (x_00002_00004=2)))
c Both direct and order encoding.
c Var 'aux956' order represents '0' with '4552'
c Var 'aux956' direct represents '0' with '4552'
c Var 'aux956' order represents '1' with '4553'
-4552 4553 0
c Var 'aux956' direct represents '1' with '4554'
4552 -4553 4554 0
-4554 4553 0
-4554 -4552 0
c Var 'aux956' direct represents '2' with '-4553'
4552 4554 -4553 0
c Encoding variable: aux957 with domain: int(0..2) (representing constraint ((x_00002_00006=2) + (x_00002_00005=2)))
c Both direct and order encoding.
c Var 'aux957' order represents '0' with '4555'
c Var 'aux957' direct represents '0' with '4555'
c Var 'aux957' order represents '1' with '4556'
-4555 4556 0
c Var 'aux957' direct represents '1' with '4557'
4555 -4556 4557 0
-4557 4556 0
-4557 -4555 0
c Var 'aux957' direct represents '2' with '-4556'
4555 4557 -4556 0
c Encoding variable: aux958 with domain: int(0..3) (representing constraint ((x_00002_00003=2) + aux957))
c Both direct and order encoding.
c Var 'aux958' order represents '0' with '4558'
c Var 'aux958' direct represents '0' with '4558'
c Var 'aux958' order represents '1' with '4559'
-4558 4559 0
c Var 'aux958' direct represents '1' with '4560'
4558 -4559 4560 0
-4560 4559 0
-4560 -4558 0
c Var 'aux958' order represents '2' with '4561'
-4559 4561 0
c Var 'aux958' direct represents '2' with '4562'
4559 -4561 4562 0
-4562 4561 0
-4562 -4559 0
c Var 'aux958' direct represents '3' with '-4561'
4558 4560 4562 -4561 0
c Encoding variable: aux959 with domain: int(0..4) (representing constraint (aux954 + aux956))
c Both direct and order encoding.
c Var 'aux959' order represents '0' with '4563'
c Var 'aux959' direct represents '0' with '4563'
c Var 'aux959' order represents '1' with '4564'
-4563 4564 0
c Var 'aux959' direct represents '1' with '4565'
4563 -4564 4565 0
-4565 4564 0
-4565 -4563 0
c Var 'aux959' order represents '2' with '4566'
-4564 4566 0
c Var 'aux959' direct represents '2' with '4567'
4564 -4566 4567 0
-4567 4566 0
-4567 -4564 0
c Var 'aux959' order represents '3' with '4568'
-4566 4568 0
c Var 'aux959' direct represents '3' with '4569'
4566 -4568 4569 0
-4569 4568 0
-4569 -4566 0
c Var 'aux959' direct represents '4' with '-4568'
4563 4565 4567 4569 -4568 0
c Encoding variable: aux960 with domain: int(0..2) (representing constraint ((x_00002_00001=3) + (x_00002_00009=3)))
c Both direct and order encoding.
c Var 'aux960' order represents '0' with '4570'
c Var 'aux960' direct represents '0' with '4570'
c Var 'aux960' order represents '1' with '4571'
-4570 4571 0
c Var 'aux960' direct represents '1' with '4572'
4570 -4571 4572 0
-4572 4571 0
-4572 -4570 0
c Var 'aux960' direct represents '2' with '-4571'
4570 4572 -4571 0
c Encoding variable: aux961 with domain: int(0..2) (representing constraint ((x_00002_00008=3) + (x_00002_00002=3)))
c Both direct and order encoding.
c Var 'aux961' order represents '0' with '4573'
c Var 'aux961' direct represents '0' with '4573'
c Var 'aux961' order represents '1' with '4574'
-4573 4574 0
c Var 'aux961' direct represents '1' with '4575'
4573 -4574 4575 0
-4575 4574 0
-4575 -4573 0
c Var 'aux961' direct represents '2' with '-4574'
4573 4575 -4574 0
c Encoding variable: aux962 with domain: int(0..2) (representing constraint ((x_00002_00007=3) + (x_00002_00004=3)))
c Both direct and order encoding.
c Var 'aux962' order represents '0' with '4576'
c Var 'aux962' direct represents '0' with '4576'
c Var 'aux962' order represents '1' with '4577'
-4576 4577 0
c Var 'aux962' direct represents '1' with '4578'
4576 -4577 4578 0
-4578 4577 0
-4578 -4576 0
c Var 'aux962' direct represents '2' with '-4577'
4576 4578 -4577 0
c Encoding variable: aux963 with domain: int(0..2) (representing constraint ((x_00002_00006=3) + (x_00002_00005=3)))
c Both direct and order encoding.
c Var 'aux963' order represents '0' with '4579'
c Var 'aux963' direct represents '0' with '4579'
c Var 'aux963' order represents '1' with '4580'
-4579 4580 0
c Var 'aux963' direct represents '1' with '4581'
4579 -4580 4581 0
-4581 4580 0
-4581 -4579 0
c Var 'aux963' direct represents '2' with '-4580'
4579 4581 -4580 0
c Encoding variable: aux964 with domain: int(0..3) (representing constraint ((x_00002_00003=3) + aux963))
c Both direct and order encoding.
c Var 'aux964' order represents '0' with '4582'
c Var 'aux964' direct represents '0' with '4582'
c Var 'aux964' order represents '1' with '4583'
-4582 4583 0
c Var 'aux964' direct represents '1' with '4584'
4582 -4583 4584 0
-4584 4583 0
-4584 -4582 0
c Var 'aux964' order represents '2' with '4585'
-4583 4585 0
c Var 'aux964' direct represents '2' with '4586'
4583 -4585 4586 0
-4586 4585 0
-4586 -4583 0
c Var 'aux964' direct represents '3' with '-4585'
4582 4584 4586 -4585 0
c Encoding variable: aux965 with domain: int(0..4) (representing constraint (aux960 + aux962))
c Both direct and order encoding.
c Var 'aux965' order represents '0' with '4587'
c Var 'aux965' direct represents '0' with '4587'
c Var 'aux965' order represents '1' with '4588'
-4587 4588 0
c Var 'aux965' direct represents '1' with '4589'
4587 -4588 4589 0
-4589 4588 0
-4589 -4587 0
c Var 'aux965' order represents '2' with '4590'
-4588 4590 0
c Var 'aux965' direct represents '2' with '4591'
4588 -4590 4591 0
-4591 4590 0
-4591 -4588 0
c Var 'aux965' order represents '3' with '4592'
-4590 4592 0
c Var 'aux965' direct represents '3' with '4593'
4590 -4592 4593 0
-4593 4592 0
-4593 -4590 0
c Var 'aux965' direct represents '4' with '-4592'
4587 4589 4591 4593 -4592 0
c Encoding variable: aux966 with domain: int(0..2) (representing constraint ((x_00002_00001=4) + (x_00002_00009=4)))
c Both direct and order encoding.
c Var 'aux966' order represents '0' with '4594'
c Var 'aux966' direct represents '0' with '4594'
c Var 'aux966' order represents '1' with '4595'
-4594 4595 0
c Var 'aux966' direct represents '1' with '4596'
4594 -4595 4596 0
-4596 4595 0
-4596 -4594 0
c Var 'aux966' direct represents '2' with '-4595'
4594 4596 -4595 0
c Encoding variable: aux967 with domain: int(0..2) (representing constraint ((x_00002_00008=4) + (x_00002_00002=4)))
c Both direct and order encoding.
c Var 'aux967' order represents '0' with '4597'
c Var 'aux967' direct represents '0' with '4597'
c Var 'aux967' order represents '1' with '4598'
-4597 4598 0
c Var 'aux967' direct represents '1' with '4599'
4597 -4598 4599 0
-4599 4598 0
-4599 -4597 0
c Var 'aux967' direct represents '2' with '-4598'
4597 4599 -4598 0
c Encoding variable: aux968 with domain: int(0..2) (representing constraint ((x_00002_00007=4) + (x_00002_00004=4)))
c Both direct and order encoding.
c Var 'aux968' order represents '0' with '4600'
c Var 'aux968' direct represents '0' with '4600'
c Var 'aux968' order represents '1' with '4601'
-4600 4601 0
c Var 'aux968' direct represents '1' with '4602'
4600 -4601 4602 0
-4602 4601 0
-4602 -4600 0
c Var 'aux968' direct represents '2' with '-4601'
4600 4602 -4601 0
c Encoding variable: aux969 with domain: int(0..2) (representing constraint ((x_00002_00006=4) + (x_00002_00005=4)))
c Both direct and order encoding.
c Var 'aux969' order represents '0' with '4603'
c Var 'aux969' direct represents '0' with '4603'
c Var 'aux969' order represents '1' with '4604'
-4603 4604 0
c Var 'aux969' direct represents '1' with '4605'
4603 -4604 4605 0
-4605 4604 0
-4605 -4603 0
c Var 'aux969' direct represents '2' with '-4604'
4603 4605 -4604 0
c Encoding variable: aux970 with domain: int(0..3) (representing constraint ((x_00002_00003=4) + aux969))
c Both direct and order encoding.
c Var 'aux970' order represents '0' with '4606'
c Var 'aux970' direct represents '0' with '4606'
c Var 'aux970' order represents '1' with '4607'
-4606 4607 0
c Var 'aux970' direct represents '1' with '4608'
4606 -4607 4608 0
-4608 4607 0
-4608 -4606 0
c Var 'aux970' order represents '2' with '4609'
-4607 4609 0
c Var 'aux970' direct represents '2' with '4610'
4607 -4609 4610 0
-4610 4609 0
-4610 -4607 0
c Var 'aux970' direct represents '3' with '-4609'
4606 4608 4610 -4609 0
c Encoding variable: aux971 with domain: int(0..4) (representing constraint (aux966 + aux968))
c Both direct and order encoding.
c Var 'aux971' order represents '0' with '4611'
c Var 'aux971' direct represents '0' with '4611'
c Var 'aux971' order represents '1' with '4612'
-4611 4612 0
c Var 'aux971' direct represents '1' with '4613'
4611 -4612 4613 0
-4613 4612 0
-4613 -4611 0
c Var 'aux971' order represents '2' with '4614'
-4612 4614 0
c Var 'aux971' direct represents '2' with '4615'
4612 -4614 4615 0
-4615 4614 0
-4615 -4612 0
c Var 'aux971' order represents '3' with '4616'
-4614 4616 0
c Var 'aux971' direct represents '3' with '4617'
4614 -4616 4617 0
-4617 4616 0
-4617 -4614 0
c Var 'aux971' direct represents '4' with '-4616'
4611 4613 4615 4617 -4616 0
c Encoding variable: aux972 with domain: int(0..2) (representing constraint ((x_00002_00001=5) + (x_00002_00009=5)))
c Both direct and order encoding.
c Var 'aux972' order represents '0' with '4618'
c Var 'aux972' direct represents '0' with '4618'
c Var 'aux972' order represents '1' with '4619'
-4618 4619 0
c Var 'aux972' direct represents '1' with '4620'
4618 -4619 4620 0
-4620 4619 0
-4620 -4618 0
c Var 'aux972' direct represents '2' with '-4619'
4618 4620 -4619 0
c Encoding variable: aux973 with domain: int(0..2) (representing constraint ((x_00002_00008=5) + (x_00002_00002=5)))
c Both direct and order encoding.
c Var 'aux973' order represents '0' with '4621'
c Var 'aux973' direct represents '0' with '4621'
c Var 'aux973' order represents '1' with '4622'
-4621 4622 0
c Var 'aux973' direct represents '1' with '4623'
4621 -4622 4623 0
-4623 4622 0
-4623 -4621 0
c Var 'aux973' direct represents '2' with '-4622'
4621 4623 -4622 0
c Encoding variable: aux974 with domain: int(0..2) (representing constraint ((x_00002_00007=5) + (x_00002_00004=5)))
c Both direct and order encoding.
c Var 'aux974' order represents '0' with '4624'
c Var 'aux974' direct represents '0' with '4624'
c Var 'aux974' order represents '1' with '4625'
-4624 4625 0
c Var 'aux974' direct represents '1' with '4626'
4624 -4625 4626 0
-4626 4625 0
-4626 -4624 0
c Var 'aux974' direct represents '2' with '-4625'
4624 4626 -4625 0
c Encoding variable: aux975 with domain: int(0..2) (representing constraint ((x_00002_00006=5) + (x_00002_00005=5)))
c Both direct and order encoding.
c Var 'aux975' order represents '0' with '4627'
c Var 'aux975' direct represents '0' with '4627'
c Var 'aux975' order represents '1' with '4628'
-4627 4628 0
c Var 'aux975' direct represents '1' with '4629'
4627 -4628 4629 0
-4629 4628 0
-4629 -4627 0
c Var 'aux975' direct represents '2' with '-4628'
4627 4629 -4628 0
c Encoding variable: aux976 with domain: int(0..3) (representing constraint ((x_00002_00003=5) + aux975))
c Both direct and order encoding.
c Var 'aux976' order represents '0' with '4630'
c Var 'aux976' direct represents '0' with '4630'
c Var 'aux976' order represents '1' with '4631'
-4630 4631 0
c Var 'aux976' direct represents '1' with '4632'
4630 -4631 4632 0
-4632 4631 0
-4632 -4630 0
c Var 'aux976' order represents '2' with '4633'
-4631 4633 0
c Var 'aux976' direct represents '2' with '4634'
4631 -4633 4634 0
-4634 4633 0
-4634 -4631 0
c Var 'aux976' direct represents '3' with '-4633'
4630 4632 4634 -4633 0
c Encoding variable: aux977 with domain: int(0..4) (representing constraint (aux972 + aux974))
c Both direct and order encoding.
c Var 'aux977' order represents '0' with '4635'
c Var 'aux977' direct represents '0' with '4635'
c Var 'aux977' order represents '1' with '4636'
-4635 4636 0
c Var 'aux977' direct represents '1' with '4637'
4635 -4636 4637 0
-4637 4636 0
-4637 -4635 0
c Var 'aux977' order represents '2' with '4638'
-4636 4638 0
c Var 'aux977' direct represents '2' with '4639'
4636 -4638 4639 0
-4639 4638 0
-4639 -4636 0
c Var 'aux977' order represents '3' with '4640'
-4638 4640 0
c Var 'aux977' direct represents '3' with '4641'
4638 -4640 4641 0
-4641 4640 0
-4641 -4638 0
c Var 'aux977' direct represents '4' with '-4640'
4635 4637 4639 4641 -4640 0
c Encoding variable: aux978 with domain: int(0..2) (representing constraint ((x_00002_00001=6) + (x_00002_00009=6)))
c Both direct and order encoding.
c Var 'aux978' order represents '0' with '4642'
c Var 'aux978' direct represents '0' with '4642'
c Var 'aux978' order represents '1' with '4643'
-4642 4643 0
c Var 'aux978' direct represents '1' with '4644'
4642 -4643 4644 0
-4644 4643 0
-4644 -4642 0
c Var 'aux978' direct represents '2' with '-4643'
4642 4644 -4643 0
c Encoding variable: aux979 with domain: int(0..2) (representing constraint ((x_00002_00008=6) + (x_00002_00002=6)))
c Both direct and order encoding.
c Var 'aux979' order represents '0' with '4645'
c Var 'aux979' direct represents '0' with '4645'
c Var 'aux979' order represents '1' with '4646'
-4645 4646 0
c Var 'aux979' direct represents '1' with '4647'
4645 -4646 4647 0
-4647 4646 0
-4647 -4645 0
c Var 'aux979' direct represents '2' with '-4646'
4645 4647 -4646 0
c Encoding variable: aux980 with domain: int(0..2) (representing constraint ((x_00002_00007=6) + (x_00002_00004=6)))
c Both direct and order encoding.
c Var 'aux980' order represents '0' with '4648'
c Var 'aux980' direct represents '0' with '4648'
c Var 'aux980' order represents '1' with '4649'
-4648 4649 0
c Var 'aux980' direct represents '1' with '4650'
4648 -4649 4650 0
-4650 4649 0
-4650 -4648 0
c Var 'aux980' direct represents '2' with '-4649'
4648 4650 -4649 0
c Encoding variable: aux981 with domain: int(0..2) (representing constraint ((x_00002_00006=6) + (x_00002_00005=6)))
c Both direct and order encoding.
c Var 'aux981' order represents '0' with '4651'
c Var 'aux981' direct represents '0' with '4651'
c Var 'aux981' order represents '1' with '4652'
-4651 4652 0
c Var 'aux981' direct represents '1' with '4653'
4651 -4652 4653 0
-4653 4652 0
-4653 -4651 0
c Var 'aux981' direct represents '2' with '-4652'
4651 4653 -4652 0
c Encoding variable: aux982 with domain: int(0..3) (representing constraint ((x_00002_00003=6) + aux981))
c Both direct and order encoding.
c Var 'aux982' order represents '0' with '4654'
c Var 'aux982' direct represents '0' with '4654'
c Var 'aux982' order represents '1' with '4655'
-4654 4655 0
c Var 'aux982' direct represents '1' with '4656'
4654 -4655 4656 0
-4656 4655 0
-4656 -4654 0
c Var 'aux982' order represents '2' with '4657'
-4655 4657 0
c Var 'aux982' direct represents '2' with '4658'
4655 -4657 4658 0
-4658 4657 0
-4658 -4655 0
c Var 'aux982' direct represents '3' with '-4657'
4654 4656 4658 -4657 0
c Encoding variable: aux983 with domain: int(0..4) (representing constraint (aux978 + aux980))
c Both direct and order encoding.
c Var 'aux983' order represents '0' with '4659'
c Var 'aux983' direct represents '0' with '4659'
c Var 'aux983' order represents '1' with '4660'
-4659 4660 0
c Var 'aux983' direct represents '1' with '4661'
4659 -4660 4661 0
-4661 4660 0
-4661 -4659 0
c Var 'aux983' order represents '2' with '4662'
-4660 4662 0
c Var 'aux983' direct represents '2' with '4663'
4660 -4662 4663 0
-4663 4662 0
-4663 -4660 0
c Var 'aux983' order represents '3' with '4664'
-4662 4664 0
c Var 'aux983' direct represents '3' with '4665'
4662 -4664 4665 0
-4665 4664 0
-4665 -4662 0
c Var 'aux983' direct represents '4' with '-4664'
4659 4661 4663 4665 -4664 0
c Encoding variable: aux984 with domain: int(0..2) (representing constraint ((x_00002_00001=7) + (x_00002_00009=7)))
c Both direct and order encoding.
c Var 'aux984' order represents '0' with '4666'
c Var 'aux984' direct represents '0' with '4666'
c Var 'aux984' order represents '1' with '4667'
-4666 4667 0
c Var 'aux984' direct represents '1' with '4668'
4666 -4667 4668 0
-4668 4667 0
-4668 -4666 0
c Var 'aux984' direct represents '2' with '-4667'
4666 4668 -4667 0
c Encoding variable: aux985 with domain: int(0..2) (representing constraint ((x_00002_00008=7) + (x_00002_00002=7)))
c Both direct and order encoding.
c Var 'aux985' order represents '0' with '4669'
c Var 'aux985' direct represents '0' with '4669'
c Var 'aux985' order represents '1' with '4670'
-4669 4670 0
c Var 'aux985' direct represents '1' with '4671'
4669 -4670 4671 0
-4671 4670 0
-4671 -4669 0
c Var 'aux985' direct represents '2' with '-4670'
4669 4671 -4670 0
c Encoding variable: aux986 with domain: int(0..2) (representing constraint ((x_00002_00007=7) + (x_00002_00004=7)))
c Both direct and order encoding.
c Var 'aux986' order represents '0' with '4672'
c Var 'aux986' direct represents '0' with '4672'
c Var 'aux986' order represents '1' with '4673'
-4672 4673 0
c Var 'aux986' direct represents '1' with '4674'
4672 -4673 4674 0
-4674 4673 0
-4674 -4672 0
c Var 'aux986' direct represents '2' with '-4673'
4672 4674 -4673 0
c Encoding variable: aux987 with domain: int(0..2) (representing constraint ((x_00002_00006=7) + (x_00002_00005=7)))
c Both direct and order encoding.
c Var 'aux987' order represents '0' with '4675'
c Var 'aux987' direct represents '0' with '4675'
c Var 'aux987' order represents '1' with '4676'
-4675 4676 0
c Var 'aux987' direct represents '1' with '4677'
4675 -4676 4677 0
-4677 4676 0
-4677 -4675 0
c Var 'aux987' direct represents '2' with '-4676'
4675 4677 -4676 0
c Encoding variable: aux988 with domain: int(0..3) (representing constraint ((x_00002_00003=7) + aux987))
c Both direct and order encoding.
c Var 'aux988' order represents '0' with '4678'
c Var 'aux988' direct represents '0' with '4678'
c Var 'aux988' order represents '1' with '4679'
-4678 4679 0
c Var 'aux988' direct represents '1' with '4680'
4678 -4679 4680 0
-4680 4679 0
-4680 -4678 0
c Var 'aux988' order represents '2' with '4681'
-4679 4681 0
c Var 'aux988' direct represents '2' with '4682'
4679 -4681 4682 0
-4682 4681 0
-4682 -4679 0
c Var 'aux988' direct represents '3' with '-4681'
4678 4680 4682 -4681 0
c Encoding variable: aux989 with domain: int(0..4) (representing constraint (aux984 + aux986))
c Both direct and order encoding.
c Var 'aux989' order represents '0' with '4683'
c Var 'aux989' direct represents '0' with '4683'
c Var 'aux989' order represents '1' with '4684'
-4683 4684 0
c Var 'aux989' direct represents '1' with '4685'
4683 -4684 4685 0
-4685 4684 0
-4685 -4683 0
c Var 'aux989' order represents '2' with '4686'
-4684 4686 0
c Var 'aux989' direct represents '2' with '4687'
4684 -4686 4687 0
-4687 4686 0
-4687 -4684 0
c Var 'aux989' order represents '3' with '4688'
-4686 4688 0
c Var 'aux989' direct represents '3' with '4689'
4686 -4688 4689 0
-4689 4688 0
-4689 -4686 0
c Var 'aux989' direct represents '4' with '-4688'
4683 4685 4687 4689 -4688 0
c Encoding variable: aux990 with domain: int(0..2) (representing constraint ((x_00002_00001=8) + (x_00002_00009=8)))
c Both direct and order encoding.
c Var 'aux990' order represents '0' with '4690'
c Var 'aux990' direct represents '0' with '4690'
c Var 'aux990' order represents '1' with '4691'
-4690 4691 0
c Var 'aux990' direct represents '1' with '4692'
4690 -4691 4692 0
-4692 4691 0
-4692 -4690 0
c Var 'aux990' direct represents '2' with '-4691'
4690 4692 -4691 0
c Encoding variable: aux991 with domain: int(0..2) (representing constraint ((x_00002_00008=8) + (x_00002_00002=8)))
c Both direct and order encoding.
c Var 'aux991' order represents '0' with '4693'
c Var 'aux991' direct represents '0' with '4693'
c Var 'aux991' order represents '1' with '4694'
-4693 4694 0
c Var 'aux991' direct represents '1' with '4695'
4693 -4694 4695 0
-4695 4694 0
-4695 -4693 0
c Var 'aux991' direct represents '2' with '-4694'
4693 4695 -4694 0
c Encoding variable: aux992 with domain: int(0..2) (representing constraint ((x_00002_00007=8) + (x_00002_00004=8)))
c Both direct and order encoding.
c Var 'aux992' order represents '0' with '4696'
c Var 'aux992' direct represents '0' with '4696'
c Var 'aux992' order represents '1' with '4697'
-4696 4697 0
c Var 'aux992' direct represents '1' with '4698'
4696 -4697 4698 0
-4698 4697 0
-4698 -4696 0
c Var 'aux992' direct represents '2' with '-4697'
4696 4698 -4697 0
c Encoding variable: aux993 with domain: int(0..2) (representing constraint ((x_00002_00006=8) + (x_00002_00005=8)))
c Both direct and order encoding.
c Var 'aux993' order represents '0' with '4699'
c Var 'aux993' direct represents '0' with '4699'
c Var 'aux993' order represents '1' with '4700'
-4699 4700 0
c Var 'aux993' direct represents '1' with '4701'
4699 -4700 4701 0
-4701 4700 0
-4701 -4699 0
c Var 'aux993' direct represents '2' with '-4700'
4699 4701 -4700 0
c Encoding variable: aux994 with domain: int(0..3) (representing constraint ((x_00002_00003=8) + aux993))
c Both direct and order encoding.
c Var 'aux994' order represents '0' with '4702'
c Var 'aux994' direct represents '0' with '4702'
c Var 'aux994' order represents '1' with '4703'
-4702 4703 0
c Var 'aux994' direct represents '1' with '4704'
4702 -4703 4704 0
-4704 4703 0
-4704 -4702 0
c Var 'aux994' order represents '2' with '4705'
-4703 4705 0
c Var 'aux994' direct represents '2' with '4706'
4703 -4705 4706 0
-4706 4705 0
-4706 -4703 0
c Var 'aux994' direct represents '3' with '-4705'
4702 4704 4706 -4705 0
c Encoding variable: aux995 with domain: int(0..4) (representing constraint (aux990 + aux992))
c Both direct and order encoding.
c Var 'aux995' order represents '0' with '4707'
c Var 'aux995' direct represents '0' with '4707'
c Var 'aux995' order represents '1' with '4708'
-4707 4708 0
c Var 'aux995' direct represents '1' with '4709'
4707 -4708 4709 0
-4709 4708 0
-4709 -4707 0
c Var 'aux995' order represents '2' with '4710'
-4708 4710 0
c Var 'aux995' direct represents '2' with '4711'
4708 -4710 4711 0
-4711 4710 0
-4711 -4708 0
c Var 'aux995' order represents '3' with '4712'
-4710 4712 0
c Var 'aux995' direct represents '3' with '4713'
4710 -4712 4713 0
-4713 4712 0
-4713 -4710 0
c Var 'aux995' direct represents '4' with '-4712'
4707 4709 4711 4713 -4712 0
c Encoding variable: aux996 with domain: int(0..2) (representing constraint ((x_00002_00001=9) + (x_00002_00009=9)))
c Both direct and order encoding.
c Var 'aux996' order represents '0' with '4714'
c Var 'aux996' direct represents '0' with '4714'
c Var 'aux996' order represents '1' with '4715'
-4714 4715 0
c Var 'aux996' direct represents '1' with '4716'
4714 -4715 4716 0
-4716 4715 0
-4716 -4714 0
c Var 'aux996' direct represents '2' with '-4715'
4714 4716 -4715 0
c Encoding variable: aux997 with domain: int(0..2) (representing constraint ((x_00002_00008=9) + (x_00002_00002=9)))
c Both direct and order encoding.
c Var 'aux997' order represents '0' with '4717'
c Var 'aux997' direct represents '0' with '4717'
c Var 'aux997' order represents '1' with '4718'
-4717 4718 0
c Var 'aux997' direct represents '1' with '4719'
4717 -4718 4719 0
-4719 4718 0
-4719 -4717 0
c Var 'aux997' direct represents '2' with '-4718'
4717 4719 -4718 0
c Encoding variable: aux998 with domain: int(0..2) (representing constraint ((x_00002_00007=9) + (x_00002_00004=9)))
c Both direct and order encoding.
c Var 'aux998' order represents '0' with '4720'
c Var 'aux998' direct represents '0' with '4720'
c Var 'aux998' order represents '1' with '4721'
-4720 4721 0
c Var 'aux998' direct represents '1' with '4722'
4720 -4721 4722 0
-4722 4721 0
-4722 -4720 0
c Var 'aux998' direct represents '2' with '-4721'
4720 4722 -4721 0
c Encoding variable: aux999 with domain: int(0..2) (representing constraint ((x_00002_00006=9) + (x_00002_00005=9)))
c Both direct and order encoding.
c Var 'aux999' order represents '0' with '4723'
c Var 'aux999' direct represents '0' with '4723'
c Var 'aux999' order represents '1' with '4724'
-4723 4724 0
c Var 'aux999' direct represents '1' with '4725'
4723 -4724 4725 0
-4725 4724 0
-4725 -4723 0
c Var 'aux999' direct represents '2' with '-4724'
4723 4725 -4724 0
c Encoding variable: aux1000 with domain: int(0..3) (representing constraint ((x_00002_00003=9) + aux999))
c Both direct and order encoding.
c Var 'aux1000' order represents '0' with '4726'
c Var 'aux1000' direct represents '0' with '4726'
c Var 'aux1000' order represents '1' with '4727'
-4726 4727 0
c Var 'aux1000' direct represents '1' with '4728'
4726 -4727 4728 0
-4728 4727 0
-4728 -4726 0
c Var 'aux1000' order represents '2' with '4729'
-4727 4729 0
c Var 'aux1000' direct represents '2' with '4730'
4727 -4729 4730 0
-4730 4729 0
-4730 -4727 0
c Var 'aux1000' direct represents '3' with '-4729'
4726 4728 4730 -4729 0
c Encoding variable: aux1001 with domain: int(0..4) (representing constraint (aux996 + aux998))
c Both direct and order encoding.
c Var 'aux1001' order represents '0' with '4731'
c Var 'aux1001' direct represents '0' with '4731'
c Var 'aux1001' order represents '1' with '4732'
-4731 4732 0
c Var 'aux1001' direct represents '1' with '4733'
4731 -4732 4733 0
-4733 4732 0
-4733 -4731 0
c Var 'aux1001' order represents '2' with '4734'
-4732 4734 0
c Var 'aux1001' direct represents '2' with '4735'
4732 -4734 4735 0
-4735 4734 0
-4735 -4732 0
c Var 'aux1001' order represents '3' with '4736'
-4734 4736 0
c Var 'aux1001' direct represents '3' with '4737'
4734 -4736 4737 0
-4737 4736 0
-4737 -4734 0
c Var 'aux1001' direct represents '4' with '-4736'
4731 4733 4735 4737 -4736 0
c Encoding variable: aux1002 with domain: int(0..2) (representing constraint ((x_00003_00001=1) + (x_00003_00009=1)))
c Both direct and order encoding.
c Var 'aux1002' order represents '0' with '4738'
c Var 'aux1002' direct represents '0' with '4738'
c Var 'aux1002' order represents '1' with '4739'
-4738 4739 0
c Var 'aux1002' direct represents '1' with '4740'
4738 -4739 4740 0
-4740 4739 0
-4740 -4738 0
c Var 'aux1002' direct represents '2' with '-4739'
4738 4740 -4739 0
c Encoding variable: aux1003 with domain: int(0..2) (representing constraint ((x_00003_00008=1) + (x_00003_00002=1)))
c Both direct and order encoding.
c Var 'aux1003' order represents '0' with '4741'
c Var 'aux1003' direct represents '0' with '4741'
c Var 'aux1003' order represents '1' with '4742'
-4741 4742 0
c Var 'aux1003' direct represents '1' with '4743'
4741 -4742 4743 0
-4743 4742 0
-4743 -4741 0
c Var 'aux1003' direct represents '2' with '-4742'
4741 4743 -4742 0
c Encoding variable: aux1004 with domain: int(0..2) (representing constraint ((x_00003_00007=1) + (x_00003_00004=1)))
c Both direct and order encoding.
c Var 'aux1004' order represents '0' with '4744'
c Var 'aux1004' direct represents '0' with '4744'
c Var 'aux1004' order represents '1' with '4745'
-4744 4745 0
c Var 'aux1004' direct represents '1' with '4746'
4744 -4745 4746 0
-4746 4745 0
-4746 -4744 0
c Var 'aux1004' direct represents '2' with '-4745'
4744 4746 -4745 0
c Encoding variable: aux1005 with domain: int(0..2) (representing constraint ((x_00003_00006=1) + (x_00003_00005=1)))
c Both direct and order encoding.
c Var 'aux1005' order represents '0' with '4747'
c Var 'aux1005' direct represents '0' with '4747'
c Var 'aux1005' order represents '1' with '4748'
-4747 4748 0
c Var 'aux1005' direct represents '1' with '4749'
4747 -4748 4749 0
-4749 4748 0
-4749 -4747 0
c Var 'aux1005' direct represents '2' with '-4748'
4747 4749 -4748 0
c Encoding variable: aux1006 with domain: int(0..3) (representing constraint ((x_00003_00003=1) + aux1005))
c Both direct and order encoding.
c Var 'aux1006' order represents '0' with '4750'
c Var 'aux1006' direct represents '0' with '4750'
c Var 'aux1006' order represents '1' with '4751'
-4750 4751 0
c Var 'aux1006' direct represents '1' with '4752'
4750 -4751 4752 0
-4752 4751 0
-4752 -4750 0
c Var 'aux1006' order represents '2' with '4753'
-4751 4753 0
c Var 'aux1006' direct represents '2' with '4754'
4751 -4753 4754 0
-4754 4753 0
-4754 -4751 0
c Var 'aux1006' direct represents '3' with '-4753'
4750 4752 4754 -4753 0
c Encoding variable: aux1007 with domain: int(0..4) (representing constraint (aux1002 + aux1004))
c Both direct and order encoding.
c Var 'aux1007' order represents '0' with '4755'
c Var 'aux1007' direct represents '0' with '4755'
c Var 'aux1007' order represents '1' with '4756'
-4755 4756 0
c Var 'aux1007' direct represents '1' with '4757'
4755 -4756 4757 0
-4757 4756 0
-4757 -4755 0
c Var 'aux1007' order represents '2' with '4758'
-4756 4758 0
c Var 'aux1007' direct represents '2' with '4759'
4756 -4758 4759 0
-4759 4758 0
-4759 -4756 0
c Var 'aux1007' order represents '3' with '4760'
-4758 4760 0
c Var 'aux1007' direct represents '3' with '4761'
4758 -4760 4761 0
-4761 4760 0
-4761 -4758 0
c Var 'aux1007' direct represents '4' with '-4760'
4755 4757 4759 4761 -4760 0
c Encoding variable: aux1008 with domain: int(0..2) (representing constraint ((x_00003_00001=2) + (x_00003_00009=2)))
c Both direct and order encoding.
c Var 'aux1008' order represents '0' with '4762'
c Var 'aux1008' direct represents '0' with '4762'
c Var 'aux1008' order represents '1' with '4763'
-4762 4763 0
c Var 'aux1008' direct represents '1' with '4764'
4762 -4763 4764 0
-4764 4763 0
-4764 -4762 0
c Var 'aux1008' direct represents '2' with '-4763'
4762 4764 -4763 0
c Encoding variable: aux1009 with domain: int(0..2) (representing constraint ((x_00003_00008=2) + (x_00003_00002=2)))
c Both direct and order encoding.
c Var 'aux1009' order represents '0' with '4765'
c Var 'aux1009' direct represents '0' with '4765'
c Var 'aux1009' order represents '1' with '4766'
-4765 4766 0
c Var 'aux1009' direct represents '1' with '4767'
4765 -4766 4767 0
-4767 4766 0
-4767 -4765 0
c Var 'aux1009' direct represents '2' with '-4766'
4765 4767 -4766 0
c Encoding variable: aux1010 with domain: int(0..2) (representing constraint ((x_00003_00007=2) + (x_00003_00004=2)))
c Both direct and order encoding.
c Var 'aux1010' order represents '0' with '4768'
c Var 'aux1010' direct represents '0' with '4768'
c Var 'aux1010' order represents '1' with '4769'
-4768 4769 0
c Var 'aux1010' direct represents '1' with '4770'
4768 -4769 4770 0
-4770 4769 0
-4770 -4768 0
c Var 'aux1010' direct represents '2' with '-4769'
4768 4770 -4769 0
c Encoding variable: aux1011 with domain: int(0..2) (representing constraint ((x_00003_00006=2) + (x_00003_00005=2)))
c Both direct and order encoding.
c Var 'aux1011' order represents '0' with '4771'
c Var 'aux1011' direct represents '0' with '4771'
c Var 'aux1011' order represents '1' with '4772'
-4771 4772 0
c Var 'aux1011' direct represents '1' with '4773'
4771 -4772 4773 0
-4773 4772 0
-4773 -4771 0
c Var 'aux1011' direct represents '2' with '-4772'
4771 4773 -4772 0
c Encoding variable: aux1012 with domain: int(0..3) (representing constraint ((x_00003_00003=2) + aux1011))
c Both direct and order encoding.
c Var 'aux1012' order represents '0' with '4774'
c Var 'aux1012' direct represents '0' with '4774'
c Var 'aux1012' order represents '1' with '4775'
-4774 4775 0
c Var 'aux1012' direct represents '1' with '4776'
4774 -4775 4776 0
-4776 4775 0
-4776 -4774 0
c Var 'aux1012' order represents '2' with '4777'
-4775 4777 0
c Var 'aux1012' direct represents '2' with '4778'
4775 -4777 4778 0
-4778 4777 0
-4778 -4775 0
c Var 'aux1012' direct represents '3' with '-4777'
4774 4776 4778 -4777 0
c Encoding variable: aux1013 with domain: int(0..4) (representing constraint (aux1008 + aux1010))
c Both direct and order encoding.
c Var 'aux1013' order represents '0' with '4779'
c Var 'aux1013' direct represents '0' with '4779'
c Var 'aux1013' order represents '1' with '4780'
-4779 4780 0
c Var 'aux1013' direct represents '1' with '4781'
4779 -4780 4781 0
-4781 4780 0
-4781 -4779 0
c Var 'aux1013' order represents '2' with '4782'
-4780 4782 0
c Var 'aux1013' direct represents '2' with '4783'
4780 -4782 4783 0
-4783 4782 0
-4783 -4780 0
c Var 'aux1013' order represents '3' with '4784'
-4782 4784 0
c Var 'aux1013' direct represents '3' with '4785'
4782 -4784 4785 0
-4785 4784 0
-4785 -4782 0
c Var 'aux1013' direct represents '4' with '-4784'
4779 4781 4783 4785 -4784 0
c Encoding variable: aux1014 with domain: int(0..2) (representing constraint ((x_00003_00001=3) + (x_00003_00009=3)))
c Both direct and order encoding.
c Var 'aux1014' order represents '0' with '4786'
c Var 'aux1014' direct represents '0' with '4786'
c Var 'aux1014' order represents '1' with '4787'
-4786 4787 0
c Var 'aux1014' direct represents '1' with '4788'
4786 -4787 4788 0
-4788 4787 0
-4788 -4786 0
c Var 'aux1014' direct represents '2' with '-4787'
4786 4788 -4787 0
c Encoding variable: aux1015 with domain: int(0..2) (representing constraint ((x_00003_00008=3) + (x_00003_00002=3)))
c Both direct and order encoding.
c Var 'aux1015' order represents '0' with '4789'
c Var 'aux1015' direct represents '0' with '4789'
c Var 'aux1015' order represents '1' with '4790'
-4789 4790 0
c Var 'aux1015' direct represents '1' with '4791'
4789 -4790 4791 0
-4791 4790 0
-4791 -4789 0
c Var 'aux1015' direct represents '2' with '-4790'
4789 4791 -4790 0
c Encoding variable: aux1016 with domain: int(0..2) (representing constraint ((x_00003_00007=3) + (x_00003_00004=3)))
c Both direct and order encoding.
c Var 'aux1016' order represents '0' with '4792'
c Var 'aux1016' direct represents '0' with '4792'
c Var 'aux1016' order represents '1' with '4793'
-4792 4793 0
c Var 'aux1016' direct represents '1' with '4794'
4792 -4793 4794 0
-4794 4793 0
-4794 -4792 0
c Var 'aux1016' direct represents '2' with '-4793'
4792 4794 -4793 0
c Encoding variable: aux1017 with domain: int(0..2) (representing constraint ((x_00003_00006=3) + (x_00003_00005=3)))
c Both direct and order encoding.
c Var 'aux1017' order represents '0' with '4795'
c Var 'aux1017' direct represents '0' with '4795'
c Var 'aux1017' order represents '1' with '4796'
-4795 4796 0
c Var 'aux1017' direct represents '1' with '4797'
4795 -4796 4797 0
-4797 4796 0
-4797 -4795 0
c Var 'aux1017' direct represents '2' with '-4796'
4795 4797 -4796 0
c Encoding variable: aux1018 with domain: int(0..3) (representing constraint ((x_00003_00003=3) + aux1017))
c Both direct and order encoding.
c Var 'aux1018' order represents '0' with '4798'
c Var 'aux1018' direct represents '0' with '4798'
c Var 'aux1018' order represents '1' with '4799'
-4798 4799 0
c Var 'aux1018' direct represents '1' with '4800'
4798 -4799 4800 0
-4800 4799 0
-4800 -4798 0
c Var 'aux1018' order represents '2' with '4801'
-4799 4801 0
c Var 'aux1018' direct represents '2' with '4802'
4799 -4801 4802 0
-4802 4801 0
-4802 -4799 0
c Var 'aux1018' direct represents '3' with '-4801'
4798 4800 4802 -4801 0
c Encoding variable: aux1019 with domain: int(0..4) (representing constraint (aux1014 + aux1016))
c Both direct and order encoding.
c Var 'aux1019' order represents '0' with '4803'
c Var 'aux1019' direct represents '0' with '4803'
c Var 'aux1019' order represents '1' with '4804'
-4803 4804 0
c Var 'aux1019' direct represents '1' with '4805'
4803 -4804 4805 0
-4805 4804 0
-4805 -4803 0
c Var 'aux1019' order represents '2' with '4806'
-4804 4806 0
c Var 'aux1019' direct represents '2' with '4807'
4804 -4806 4807 0
-4807 4806 0
-4807 -4804 0
c Var 'aux1019' order represents '3' with '4808'
-4806 4808 0
c Var 'aux1019' direct represents '3' with '4809'
4806 -4808 4809 0
-4809 4808 0
-4809 -4806 0
c Var 'aux1019' direct represents '4' with '-4808'
4803 4805 4807 4809 -4808 0
c Encoding variable: aux1020 with domain: int(0..2) (representing constraint ((x_00003_00001=4) + (x_00003_00009=4)))
c Both direct and order encoding.
c Var 'aux1020' order represents '0' with '4810'
c Var 'aux1020' direct represents '0' with '4810'
c Var 'aux1020' order represents '1' with '4811'
-4810 4811 0
c Var 'aux1020' direct represents '1' with '4812'
4810 -4811 4812 0
-4812 4811 0
-4812 -4810 0
c Var 'aux1020' direct represents '2' with '-4811'
4810 4812 -4811 0
c Encoding variable: aux1021 with domain: int(0..2) (representing constraint ((x_00003_00008=4) + (x_00003_00002=4)))
c Both direct and order encoding.
c Var 'aux1021' order represents '0' with '4813'
c Var 'aux1021' direct represents '0' with '4813'
c Var 'aux1021' order represents '1' with '4814'
-4813 4814 0
c Var 'aux1021' direct represents '1' with '4815'
4813 -4814 4815 0
-4815 4814 0
-4815 -4813 0
c Var 'aux1021' direct represents '2' with '-4814'
4813 4815 -4814 0
c Encoding variable: aux1022 with domain: int(0..2) (representing constraint ((x_00003_00007=4) + (x_00003_00004=4)))
c Both direct and order encoding.
c Var 'aux1022' order represents '0' with '4816'
c Var 'aux1022' direct represents '0' with '4816'
c Var 'aux1022' order represents '1' with '4817'
-4816 4817 0
c Var 'aux1022' direct represents '1' with '4818'
4816 -4817 4818 0
-4818 4817 0
-4818 -4816 0
c Var 'aux1022' direct represents '2' with '-4817'
4816 4818 -4817 0
c Encoding variable: aux1023 with domain: int(0..2) (representing constraint ((x_00003_00006=4) + (x_00003_00005=4)))
c Both direct and order encoding.
c Var 'aux1023' order represents '0' with '4819'
c Var 'aux1023' direct represents '0' with '4819'
c Var 'aux1023' order represents '1' with '4820'
-4819 4820 0
c Var 'aux1023' direct represents '1' with '4821'
4819 -4820 4821 0
-4821 4820 0
-4821 -4819 0
c Var 'aux1023' direct represents '2' with '-4820'
4819 4821 -4820 0
c Encoding variable: aux1024 with domain: int(0..3) (representing constraint ((x_00003_00003=4) + aux1023))
c Both direct and order encoding.
c Var 'aux1024' order represents '0' with '4822'
c Var 'aux1024' direct represents '0' with '4822'
c Var 'aux1024' order represents '1' with '4823'
-4822 4823 0
c Var 'aux1024' direct represents '1' with '4824'
4822 -4823 4824 0
-4824 4823 0
-4824 -4822 0
c Var 'aux1024' order represents '2' with '4825'
-4823 4825 0
c Var 'aux1024' direct represents '2' with '4826'
4823 -4825 4826 0
-4826 4825 0
-4826 -4823 0
c Var 'aux1024' direct represents '3' with '-4825'
4822 4824 4826 -4825 0
c Encoding variable: aux1025 with domain: int(0..4) (representing constraint (aux1020 + aux1022))
c Both direct and order encoding.
c Var 'aux1025' order represents '0' with '4827'
c Var 'aux1025' direct represents '0' with '4827'
c Var 'aux1025' order represents '1' with '4828'
-4827 4828 0
c Var 'aux1025' direct represents '1' with '4829'
4827 -4828 4829 0
-4829 4828 0
-4829 -4827 0
c Var 'aux1025' order represents '2' with '4830'
-4828 4830 0
c Var 'aux1025' direct represents '2' with '4831'
4828 -4830 4831 0
-4831 4830 0
-4831 -4828 0
c Var 'aux1025' order represents '3' with '4832'
-4830 4832 0
c Var 'aux1025' direct represents '3' with '4833'
4830 -4832 4833 0
-4833 4832 0
-4833 -4830 0
c Var 'aux1025' direct represents '4' with '-4832'
4827 4829 4831 4833 -4832 0
c Encoding variable: aux1026 with domain: int(0..2) (representing constraint ((x_00003_00001=5) + (x_00003_00009=5)))
c Both direct and order encoding.
c Var 'aux1026' order represents '0' with '4834'
c Var 'aux1026' direct represents '0' with '4834'
c Var 'aux1026' order represents '1' with '4835'
-4834 4835 0
c Var 'aux1026' direct represents '1' with '4836'
4834 -4835 4836 0
-4836 4835 0
-4836 -4834 0
c Var 'aux1026' direct represents '2' with '-4835'
4834 4836 -4835 0
c Encoding variable: aux1027 with domain: int(0..2) (representing constraint ((x_00003_00008=5) + (x_00003_00002=5)))
c Both direct and order encoding.
c Var 'aux1027' order represents '0' with '4837'
c Var 'aux1027' direct represents '0' with '4837'
c Var 'aux1027' order represents '1' with '4838'
-4837 4838 0
c Var 'aux1027' direct represents '1' with '4839'
4837 -4838 4839 0
-4839 4838 0
-4839 -4837 0
c Var 'aux1027' direct represents '2' with '-4838'
4837 4839 -4838 0
c Encoding variable: aux1028 with domain: int(0..2) (representing constraint ((x_00003_00007=5) + (x_00003_00004=5)))
c Both direct and order encoding.
c Var 'aux1028' order represents '0' with '4840'
c Var 'aux1028' direct represents '0' with '4840'
c Var 'aux1028' order represents '1' with '4841'
-4840 4841 0
c Var 'aux1028' direct represents '1' with '4842'
4840 -4841 4842 0
-4842 4841 0
-4842 -4840 0
c Var 'aux1028' direct represents '2' with '-4841'
4840 4842 -4841 0
c Encoding variable: aux1029 with domain: int(0..2) (representing constraint ((x_00003_00006=5) + (x_00003_00005=5)))
c Both direct and order encoding.
c Var 'aux1029' order represents '0' with '4843'
c Var 'aux1029' direct represents '0' with '4843'
c Var 'aux1029' order represents '1' with '4844'
-4843 4844 0
c Var 'aux1029' direct represents '1' with '4845'
4843 -4844 4845 0
-4845 4844 0
-4845 -4843 0
c Var 'aux1029' direct represents '2' with '-4844'
4843 4845 -4844 0
c Encoding variable: aux1030 with domain: int(0..3) (representing constraint ((x_00003_00003=5) + aux1029))
c Both direct and order encoding.
c Var 'aux1030' order represents '0' with '4846'
c Var 'aux1030' direct represents '0' with '4846'
c Var 'aux1030' order represents '1' with '4847'
-4846 4847 0
c Var 'aux1030' direct represents '1' with '4848'
4846 -4847 4848 0
-4848 4847 0
-4848 -4846 0
c Var 'aux1030' order represents '2' with '4849'
-4847 4849 0
c Var 'aux1030' direct represents '2' with '4850'
4847 -4849 4850 0
-4850 4849 0
-4850 -4847 0
c Var 'aux1030' direct represents '3' with '-4849'
4846 4848 4850 -4849 0
c Encoding variable: aux1031 with domain: int(0..4) (representing constraint (aux1026 + aux1028))
c Both direct and order encoding.
c Var 'aux1031' order represents '0' with '4851'
c Var 'aux1031' direct represents '0' with '4851'
c Var 'aux1031' order represents '1' with '4852'
-4851 4852 0
c Var 'aux1031' direct represents '1' with '4853'
4851 -4852 4853 0
-4853 4852 0
-4853 -4851 0
c Var 'aux1031' order represents '2' with '4854'
-4852 4854 0
c Var 'aux1031' direct represents '2' with '4855'
4852 -4854 4855 0
-4855 4854 0
-4855 -4852 0
c Var 'aux1031' order represents '3' with '4856'
-4854 4856 0
c Var 'aux1031' direct represents '3' with '4857'
4854 -4856 4857 0
-4857 4856 0
-4857 -4854 0
c Var 'aux1031' direct represents '4' with '-4856'
4851 4853 4855 4857 -4856 0
c Encoding variable: aux1032 with domain: int(0..2) (representing constraint ((x_00003_00001=6) + (x_00003_00009=6)))
c Both direct and order encoding.
c Var 'aux1032' order represents '0' with '4858'
c Var 'aux1032' direct represents '0' with '4858'
c Var 'aux1032' order represents '1' with '4859'
-4858 4859 0
c Var 'aux1032' direct represents '1' with '4860'
4858 -4859 4860 0
-4860 4859 0
-4860 -4858 0
c Var 'aux1032' direct represents '2' with '-4859'
4858 4860 -4859 0
c Encoding variable: aux1033 with domain: int(0..2) (representing constraint ((x_00003_00008=6) + (x_00003_00002=6)))
c Both direct and order encoding.
c Var 'aux1033' order represents '0' with '4861'
c Var 'aux1033' direct represents '0' with '4861'
c Var 'aux1033' order represents '1' with '4862'
-4861 4862 0
c Var 'aux1033' direct represents '1' with '4863'
4861 -4862 4863 0
-4863 4862 0
-4863 -4861 0
c Var 'aux1033' direct represents '2' with '-4862'
4861 4863 -4862 0
c Encoding variable: aux1034 with domain: int(0..2) (representing constraint ((x_00003_00007=6) + (x_00003_00004=6)))
c Both direct and order encoding.
c Var 'aux1034' order represents '0' with '4864'
c Var 'aux1034' direct represents '0' with '4864'
c Var 'aux1034' order represents '1' with '4865'
-4864 4865 0
c Var 'aux1034' direct represents '1' with '4866'
4864 -4865 4866 0
-4866 4865 0
-4866 -4864 0
c Var 'aux1034' direct represents '2' with '-4865'
4864 4866 -4865 0
c Encoding variable: aux1035 with domain: int(0..2) (representing constraint ((x_00003_00006=6) + (x_00003_00005=6)))
c Both direct and order encoding.
c Var 'aux1035' order represents '0' with '4867'
c Var 'aux1035' direct represents '0' with '4867'
c Var 'aux1035' order represents '1' with '4868'
-4867 4868 0
c Var 'aux1035' direct represents '1' with '4869'
4867 -4868 4869 0
-4869 4868 0
-4869 -4867 0
c Var 'aux1035' direct represents '2' with '-4868'
4867 4869 -4868 0
c Encoding variable: aux1036 with domain: int(0..3) (representing constraint ((x_00003_00003=6) + aux1035))
c Both direct and order encoding.
c Var 'aux1036' order represents '0' with '4870'
c Var 'aux1036' direct represents '0' with '4870'
c Var 'aux1036' order represents '1' with '4871'
-4870 4871 0
c Var 'aux1036' direct represents '1' with '4872'
4870 -4871 4872 0
-4872 4871 0
-4872 -4870 0
c Var 'aux1036' order represents '2' with '4873'
-4871 4873 0
c Var 'aux1036' direct represents '2' with '4874'
4871 -4873 4874 0
-4874 4873 0
-4874 -4871 0
c Var 'aux1036' direct represents '3' with '-4873'
4870 4872 4874 -4873 0
c Encoding variable: aux1037 with domain: int(0..4) (representing constraint (aux1032 + aux1034))
c Both direct and order encoding.
c Var 'aux1037' order represents '0' with '4875'
c Var 'aux1037' direct represents '0' with '4875'
c Var 'aux1037' order represents '1' with '4876'
-4875 4876 0
c Var 'aux1037' direct represents '1' with '4877'
4875 -4876 4877 0
-4877 4876 0
-4877 -4875 0
c Var 'aux1037' order represents '2' with '4878'
-4876 4878 0
c Var 'aux1037' direct represents '2' with '4879'
4876 -4878 4879 0
-4879 4878 0
-4879 -4876 0
c Var 'aux1037' order represents '3' with '4880'
-4878 4880 0
c Var 'aux1037' direct represents '3' with '4881'
4878 -4880 4881 0
-4881 4880 0
-4881 -4878 0
c Var 'aux1037' direct represents '4' with '-4880'
4875 4877 4879 4881 -4880 0
c Encoding variable: aux1038 with domain: int(0..2) (representing constraint ((x_00003_00001=7) + (x_00003_00009=7)))
c Both direct and order encoding.
c Var 'aux1038' order represents '0' with '4882'
c Var 'aux1038' direct represents '0' with '4882'
c Var 'aux1038' order represents '1' with '4883'
-4882 4883 0
c Var 'aux1038' direct represents '1' with '4884'
4882 -4883 4884 0
-4884 4883 0
-4884 -4882 0
c Var 'aux1038' direct represents '2' with '-4883'
4882 4884 -4883 0
c Encoding variable: aux1039 with domain: int(0..2) (representing constraint ((x_00003_00008=7) + (x_00003_00002=7)))
c Both direct and order encoding.
c Var 'aux1039' order represents '0' with '4885'
c Var 'aux1039' direct represents '0' with '4885'
c Var 'aux1039' order represents '1' with '4886'
-4885 4886 0
c Var 'aux1039' direct represents '1' with '4887'
4885 -4886 4887 0
-4887 4886 0
-4887 -4885 0
c Var 'aux1039' direct represents '2' with '-4886'
4885 4887 -4886 0
c Encoding variable: aux1040 with domain: int(0..2) (representing constraint ((x_00003_00007=7) + (x_00003_00004=7)))
c Both direct and order encoding.
c Var 'aux1040' order represents '0' with '4888'
c Var 'aux1040' direct represents '0' with '4888'
c Var 'aux1040' order represents '1' with '4889'
-4888 4889 0
c Var 'aux1040' direct represents '1' with '4890'
4888 -4889 4890 0
-4890 4889 0
-4890 -4888 0
c Var 'aux1040' direct represents '2' with '-4889'
4888 4890 -4889 0
c Encoding variable: aux1041 with domain: int(0..2) (representing constraint ((x_00003_00006=7) + (x_00003_00005=7)))
c Both direct and order encoding.
c Var 'aux1041' order represents '0' with '4891'
c Var 'aux1041' direct represents '0' with '4891'
c Var 'aux1041' order represents '1' with '4892'
-4891 4892 0
c Var 'aux1041' direct represents '1' with '4893'
4891 -4892 4893 0
-4893 4892 0
-4893 -4891 0
c Var 'aux1041' direct represents '2' with '-4892'
4891 4893 -4892 0
c Encoding variable: aux1042 with domain: int(0..3) (representing constraint ((x_00003_00003=7) + aux1041))
c Both direct and order encoding.
c Var 'aux1042' order represents '0' with '4894'
c Var 'aux1042' direct represents '0' with '4894'
c Var 'aux1042' order represents '1' with '4895'
-4894 4895 0
c Var 'aux1042' direct represents '1' with '4896'
4894 -4895 4896 0
-4896 4895 0
-4896 -4894 0
c Var 'aux1042' order represents '2' with '4897'
-4895 4897 0
c Var 'aux1042' direct represents '2' with '4898'
4895 -4897 4898 0
-4898 4897 0
-4898 -4895 0
c Var 'aux1042' direct represents '3' with '-4897'
4894 4896 4898 -4897 0
c Encoding variable: aux1043 with domain: int(0..4) (representing constraint (aux1038 + aux1040))
c Both direct and order encoding.
c Var 'aux1043' order represents '0' with '4899'
c Var 'aux1043' direct represents '0' with '4899'
c Var 'aux1043' order represents '1' with '4900'
-4899 4900 0
c Var 'aux1043' direct represents '1' with '4901'
4899 -4900 4901 0
-4901 4900 0
-4901 -4899 0
c Var 'aux1043' order represents '2' with '4902'
-4900 4902 0
c Var 'aux1043' direct represents '2' with '4903'
4900 -4902 4903 0
-4903 4902 0
-4903 -4900 0
c Var 'aux1043' order represents '3' with '4904'
-4902 4904 0
c Var 'aux1043' direct represents '3' with '4905'
4902 -4904 4905 0
-4905 4904 0
-4905 -4902 0
c Var 'aux1043' direct represents '4' with '-4904'
4899 4901 4903 4905 -4904 0
c Encoding variable: aux1044 with domain: int(0..2) (representing constraint ((x_00003_00001=8) + (x_00003_00009=8)))
c Both direct and order encoding.
c Var 'aux1044' order represents '0' with '4906'
c Var 'aux1044' direct represents '0' with '4906'
c Var 'aux1044' order represents '1' with '4907'
-4906 4907 0
c Var 'aux1044' direct represents '1' with '4908'
4906 -4907 4908 0
-4908 4907 0
-4908 -4906 0
c Var 'aux1044' direct represents '2' with '-4907'
4906 4908 -4907 0
c Encoding variable: aux1045 with domain: int(0..2) (representing constraint ((x_00003_00008=8) + (x_00003_00002=8)))
c Both direct and order encoding.
c Var 'aux1045' order represents '0' with '4909'
c Var 'aux1045' direct represents '0' with '4909'
c Var 'aux1045' order represents '1' with '4910'
-4909 4910 0
c Var 'aux1045' direct represents '1' with '4911'
4909 -4910 4911 0
-4911 4910 0
-4911 -4909 0
c Var 'aux1045' direct represents '2' with '-4910'
4909 4911 -4910 0
c Encoding variable: aux1046 with domain: int(0..2) (representing constraint ((x_00003_00007=8) + (x_00003_00004=8)))
c Both direct and order encoding.
c Var 'aux1046' order represents '0' with '4912'
c Var 'aux1046' direct represents '0' with '4912'
c Var 'aux1046' order represents '1' with '4913'
-4912 4913 0
c Var 'aux1046' direct represents '1' with '4914'
4912 -4913 4914 0
-4914 4913 0
-4914 -4912 0
c Var 'aux1046' direct represents '2' with '-4913'
4912 4914 -4913 0
c Encoding variable: aux1047 with domain: int(0..2) (representing constraint ((x_00003_00006=8) + (x_00003_00005=8)))
c Both direct and order encoding.
c Var 'aux1047' order represents '0' with '4915'
c Var 'aux1047' direct represents '0' with '4915'
c Var 'aux1047' order represents '1' with '4916'
-4915 4916 0
c Var 'aux1047' direct represents '1' with '4917'
4915 -4916 4917 0
-4917 4916 0
-4917 -4915 0
c Var 'aux1047' direct represents '2' with '-4916'
4915 4917 -4916 0
c Encoding variable: aux1048 with domain: int(0..3) (representing constraint ((x_00003_00003=8) + aux1047))
c Both direct and order encoding.
c Var 'aux1048' order represents '0' with '4918'
c Var 'aux1048' direct represents '0' with '4918'
c Var 'aux1048' order represents '1' with '4919'
-4918 4919 0
c Var 'aux1048' direct represents '1' with '4920'
4918 -4919 4920 0
-4920 4919 0
-4920 -4918 0
c Var 'aux1048' order represents '2' with '4921'
-4919 4921 0
c Var 'aux1048' direct represents '2' with '4922'
4919 -4921 4922 0
-4922 4921 0
-4922 -4919 0
c Var 'aux1048' direct represents '3' with '-4921'
4918 4920 4922 -4921 0
c Encoding variable: aux1049 with domain: int(0..4) (representing constraint (aux1044 + aux1046))
c Both direct and order encoding.
c Var 'aux1049' order represents '0' with '4923'
c Var 'aux1049' direct represents '0' with '4923'
c Var 'aux1049' order represents '1' with '4924'
-4923 4924 0
c Var 'aux1049' direct represents '1' with '4925'
4923 -4924 4925 0
-4925 4924 0
-4925 -4923 0
c Var 'aux1049' order represents '2' with '4926'
-4924 4926 0
c Var 'aux1049' direct represents '2' with '4927'
4924 -4926 4927 0
-4927 4926 0
-4927 -4924 0
c Var 'aux1049' order represents '3' with '4928'
-4926 4928 0
c Var 'aux1049' direct represents '3' with '4929'
4926 -4928 4929 0
-4929 4928 0
-4929 -4926 0
c Var 'aux1049' direct represents '4' with '-4928'
4923 4925 4927 4929 -4928 0
c Encoding variable: aux1050 with domain: int(0..2) (representing constraint ((x_00003_00001=9) + (x_00003_00009=9)))
c Both direct and order encoding.
c Var 'aux1050' order represents '0' with '4930'
c Var 'aux1050' direct represents '0' with '4930'
c Var 'aux1050' order represents '1' with '4931'
-4930 4931 0
c Var 'aux1050' direct represents '1' with '4932'
4930 -4931 4932 0
-4932 4931 0
-4932 -4930 0
c Var 'aux1050' direct represents '2' with '-4931'
4930 4932 -4931 0
c Encoding variable: aux1051 with domain: int(0..2) (representing constraint ((x_00003_00008=9) + (x_00003_00002=9)))
c Both direct and order encoding.
c Var 'aux1051' order represents '0' with '4933'
c Var 'aux1051' direct represents '0' with '4933'
c Var 'aux1051' order represents '1' with '4934'
-4933 4934 0
c Var 'aux1051' direct represents '1' with '4935'
4933 -4934 4935 0
-4935 4934 0
-4935 -4933 0
c Var 'aux1051' direct represents '2' with '-4934'
4933 4935 -4934 0
c Encoding variable: aux1052 with domain: int(0..2) (representing constraint ((x_00003_00007=9) + (x_00003_00004=9)))
c Both direct and order encoding.
c Var 'aux1052' order represents '0' with '4936'
c Var 'aux1052' direct represents '0' with '4936'
c Var 'aux1052' order represents '1' with '4937'
-4936 4937 0
c Var 'aux1052' direct represents '1' with '4938'
4936 -4937 4938 0
-4938 4937 0
-4938 -4936 0
c Var 'aux1052' direct represents '2' with '-4937'
4936 4938 -4937 0
c Encoding variable: aux1053 with domain: int(0..2) (representing constraint ((x_00003_00006=9) + (x_00003_00005=9)))
c Both direct and order encoding.
c Var 'aux1053' order represents '0' with '4939'
c Var 'aux1053' direct represents '0' with '4939'
c Var 'aux1053' order represents '1' with '4940'
-4939 4940 0
c Var 'aux1053' direct represents '1' with '4941'
4939 -4940 4941 0
-4941 4940 0
-4941 -4939 0
c Var 'aux1053' direct represents '2' with '-4940'
4939 4941 -4940 0
c Encoding variable: aux1054 with domain: int(0..3) (representing constraint ((x_00003_00003=9) + aux1053))
c Both direct and order encoding.
c Var 'aux1054' order represents '0' with '4942'
c Var 'aux1054' direct represents '0' with '4942'
c Var 'aux1054' order represents '1' with '4943'
-4942 4943 0
c Var 'aux1054' direct represents '1' with '4944'
4942 -4943 4944 0
-4944 4943 0
-4944 -4942 0
c Var 'aux1054' order represents '2' with '4945'
-4943 4945 0
c Var 'aux1054' direct represents '2' with '4946'
4943 -4945 4946 0
-4946 4945 0
-4946 -4943 0
c Var 'aux1054' direct represents '3' with '-4945'
4942 4944 4946 -4945 0
c Encoding variable: aux1055 with domain: int(0..4) (representing constraint (aux1050 + aux1052))
c Both direct and order encoding.
c Var 'aux1055' order represents '0' with '4947'
c Var 'aux1055' direct represents '0' with '4947'
c Var 'aux1055' order represents '1' with '4948'
-4947 4948 0
c Var 'aux1055' direct represents '1' with '4949'
4947 -4948 4949 0
-4949 4948 0
-4949 -4947 0
c Var 'aux1055' order represents '2' with '4950'
-4948 4950 0
c Var 'aux1055' direct represents '2' with '4951'
4948 -4950 4951 0
-4951 4950 0
-4951 -4948 0
c Var 'aux1055' order represents '3' with '4952'
-4950 4952 0
c Var 'aux1055' direct represents '3' with '4953'
4950 -4952 4953 0
-4953 4952 0
-4953 -4950 0
c Var 'aux1055' direct represents '4' with '-4952'
4947 4949 4951 4953 -4952 0
c Encoding variable: aux1056 with domain: int(0..2) (representing constraint ((x_00004_00001=1) + (x_00004_00009=1)))
c Both direct and order encoding.
c Var 'aux1056' order represents '0' with '4954'
c Var 'aux1056' direct represents '0' with '4954'
c Var 'aux1056' order represents '1' with '4955'
-4954 4955 0
c Var 'aux1056' direct represents '1' with '4956'
4954 -4955 4956 0
-4956 4955 0
-4956 -4954 0
c Var 'aux1056' direct represents '2' with '-4955'
4954 4956 -4955 0
c Encoding variable: aux1057 with domain: int(0..2) (representing constraint ((x_00004_00008=1) + (x_00004_00002=1)))
c Both direct and order encoding.
c Var 'aux1057' order represents '0' with '4957'
c Var 'aux1057' direct represents '0' with '4957'
c Var 'aux1057' order represents '1' with '4958'
-4957 4958 0
c Var 'aux1057' direct represents '1' with '4959'
4957 -4958 4959 0
-4959 4958 0
-4959 -4957 0
c Var 'aux1057' direct represents '2' with '-4958'
4957 4959 -4958 0
c Encoding variable: aux1058 with domain: int(0..2) (representing constraint ((x_00004_00007=1) + (x_00004_00004=1)))
c Both direct and order encoding.
c Var 'aux1058' order represents '0' with '4960'
c Var 'aux1058' direct represents '0' with '4960'
c Var 'aux1058' order represents '1' with '4961'
-4960 4961 0
c Var 'aux1058' direct represents '1' with '4962'
4960 -4961 4962 0
-4962 4961 0
-4962 -4960 0
c Var 'aux1058' direct represents '2' with '-4961'
4960 4962 -4961 0
c Encoding variable: aux1059 with domain: int(0..2) (representing constraint ((x_00004_00006=1) + (x_00004_00005=1)))
c Both direct and order encoding.
c Var 'aux1059' order represents '0' with '4963'
c Var 'aux1059' direct represents '0' with '4963'
c Var 'aux1059' order represents '1' with '4964'
-4963 4964 0
c Var 'aux1059' direct represents '1' with '4965'
4963 -4964 4965 0
-4965 4964 0
-4965 -4963 0
c Var 'aux1059' direct represents '2' with '-4964'
4963 4965 -4964 0
c Encoding variable: aux1060 with domain: int(0..3) (representing constraint ((x_00004_00003=1) + aux1059))
c Both direct and order encoding.
c Var 'aux1060' order represents '0' with '4966'
c Var 'aux1060' direct represents '0' with '4966'
c Var 'aux1060' order represents '1' with '4967'
-4966 4967 0
c Var 'aux1060' direct represents '1' with '4968'
4966 -4967 4968 0
-4968 4967 0
-4968 -4966 0
c Var 'aux1060' order represents '2' with '4969'
-4967 4969 0
c Var 'aux1060' direct represents '2' with '4970'
4967 -4969 4970 0
-4970 4969 0
-4970 -4967 0
c Var 'aux1060' direct represents '3' with '-4969'
4966 4968 4970 -4969 0
c Encoding variable: aux1061 with domain: int(0..4) (representing constraint (aux1056 + aux1058))
c Both direct and order encoding.
c Var 'aux1061' order represents '0' with '4971'
c Var 'aux1061' direct represents '0' with '4971'
c Var 'aux1061' order represents '1' with '4972'
-4971 4972 0
c Var 'aux1061' direct represents '1' with '4973'
4971 -4972 4973 0
-4973 4972 0
-4973 -4971 0
c Var 'aux1061' order represents '2' with '4974'
-4972 4974 0
c Var 'aux1061' direct represents '2' with '4975'
4972 -4974 4975 0
-4975 4974 0
-4975 -4972 0
c Var 'aux1061' order represents '3' with '4976'
-4974 4976 0
c Var 'aux1061' direct represents '3' with '4977'
4974 -4976 4977 0
-4977 4976 0
-4977 -4974 0
c Var 'aux1061' direct represents '4' with '-4976'
4971 4973 4975 4977 -4976 0
c Encoding variable: aux1062 with domain: int(0..2) (representing constraint ((x_00004_00001=2) + (x_00004_00009=2)))
c Both direct and order encoding.
c Var 'aux1062' order represents '0' with '4978'
c Var 'aux1062' direct represents '0' with '4978'
c Var 'aux1062' order represents '1' with '4979'
-4978 4979 0
c Var 'aux1062' direct represents '1' with '4980'
4978 -4979 4980 0
-4980 4979 0
-4980 -4978 0
c Var 'aux1062' direct represents '2' with '-4979'
4978 4980 -4979 0
c Encoding variable: aux1063 with domain: int(0..2) (representing constraint ((x_00004_00008=2) + (x_00004_00002=2)))
c Both direct and order encoding.
c Var 'aux1063' order represents '0' with '4981'
c Var 'aux1063' direct represents '0' with '4981'
c Var 'aux1063' order represents '1' with '4982'
-4981 4982 0
c Var 'aux1063' direct represents '1' with '4983'
4981 -4982 4983 0
-4983 4982 0
-4983 -4981 0
c Var 'aux1063' direct represents '2' with '-4982'
4981 4983 -4982 0
c Encoding variable: aux1064 with domain: int(0..2) (representing constraint ((x_00004_00007=2) + (x_00004_00004=2)))
c Both direct and order encoding.
c Var 'aux1064' order represents '0' with '4984'
c Var 'aux1064' direct represents '0' with '4984'
c Var 'aux1064' order represents '1' with '4985'
-4984 4985 0
c Var 'aux1064' direct represents '1' with '4986'
4984 -4985 4986 0
-4986 4985 0
-4986 -4984 0
c Var 'aux1064' direct represents '2' with '-4985'
4984 4986 -4985 0
c Encoding variable: aux1065 with domain: int(0..2) (representing constraint ((x_00004_00006=2) + (x_00004_00005=2)))
c Both direct and order encoding.
c Var 'aux1065' order represents '0' with '4987'
c Var 'aux1065' direct represents '0' with '4987'
c Var 'aux1065' order represents '1' with '4988'
-4987 4988 0
c Var 'aux1065' direct represents '1' with '4989'
4987 -4988 4989 0
-4989 4988 0
-4989 -4987 0
c Var 'aux1065' direct represents '2' with '-4988'
4987 4989 -4988 0
c Encoding variable: aux1066 with domain: int(0..3) (representing constraint ((x_00004_00003=2) + aux1065))
c Both direct and order encoding.
c Var 'aux1066' order represents '0' with '4990'
c Var 'aux1066' direct represents '0' with '4990'
c Var 'aux1066' order represents '1' with '4991'
-4990 4991 0
c Var 'aux1066' direct represents '1' with '4992'
4990 -4991 4992 0
-4992 4991 0
-4992 -4990 0
c Var 'aux1066' order represents '2' with '4993'
-4991 4993 0
c Var 'aux1066' direct represents '2' with '4994'
4991 -4993 4994 0
-4994 4993 0
-4994 -4991 0
c Var 'aux1066' direct represents '3' with '-4993'
4990 4992 4994 -4993 0
c Encoding variable: aux1067 with domain: int(0..4) (representing constraint (aux1062 + aux1064))
c Both direct and order encoding.
c Var 'aux1067' order represents '0' with '4995'
c Var 'aux1067' direct represents '0' with '4995'
c Var 'aux1067' order represents '1' with '4996'
-4995 4996 0
c Var 'aux1067' direct represents '1' with '4997'
4995 -4996 4997 0
-4997 4996 0
-4997 -4995 0
c Var 'aux1067' order represents '2' with '4998'
-4996 4998 0
c Var 'aux1067' direct represents '2' with '4999'
4996 -4998 4999 0
-4999 4998 0
-4999 -4996 0
c Var 'aux1067' order represents '3' with '5000'
-4998 5000 0
c Var 'aux1067' direct represents '3' with '5001'
4998 -5000 5001 0
-5001 5000 0
-5001 -4998 0
c Var 'aux1067' direct represents '4' with '-5000'
4995 4997 4999 5001 -5000 0
c Encoding variable: aux1068 with domain: int(0..2) (representing constraint ((x_00004_00001=3) + (x_00004_00009=3)))
c Both direct and order encoding.
c Var 'aux1068' order represents '0' with '5002'
c Var 'aux1068' direct represents '0' with '5002'
c Var 'aux1068' order represents '1' with '5003'
-5002 5003 0
c Var 'aux1068' direct represents '1' with '5004'
5002 -5003 5004 0
-5004 5003 0
-5004 -5002 0
c Var 'aux1068' direct represents '2' with '-5003'
5002 5004 -5003 0
c Encoding variable: aux1069 with domain: int(0..2) (representing constraint ((x_00004_00008=3) + (x_00004_00002=3)))
c Both direct and order encoding.
c Var 'aux1069' order represents '0' with '5005'
c Var 'aux1069' direct represents '0' with '5005'
c Var 'aux1069' order represents '1' with '5006'
-5005 5006 0
c Var 'aux1069' direct represents '1' with '5007'
5005 -5006 5007 0
-5007 5006 0
-5007 -5005 0
c Var 'aux1069' direct represents '2' with '-5006'
5005 5007 -5006 0
c Encoding variable: aux1070 with domain: int(0..2) (representing constraint ((x_00004_00007=3) + (x_00004_00004=3)))
c Both direct and order encoding.
c Var 'aux1070' order represents '0' with '5008'
c Var 'aux1070' direct represents '0' with '5008'
c Var 'aux1070' order represents '1' with '5009'
-5008 5009 0
c Var 'aux1070' direct represents '1' with '5010'
5008 -5009 5010 0
-5010 5009 0
-5010 -5008 0
c Var 'aux1070' direct represents '2' with '-5009'
5008 5010 -5009 0
c Encoding variable: aux1071 with domain: int(0..2) (representing constraint ((x_00004_00006=3) + (x_00004_00005=3)))
c Both direct and order encoding.
c Var 'aux1071' order represents '0' with '5011'
c Var 'aux1071' direct represents '0' with '5011'
c Var 'aux1071' order represents '1' with '5012'
-5011 5012 0
c Var 'aux1071' direct represents '1' with '5013'
5011 -5012 5013 0
-5013 5012 0
-5013 -5011 0
c Var 'aux1071' direct represents '2' with '-5012'
5011 5013 -5012 0
c Encoding variable: aux1072 with domain: int(0..3) (representing constraint ((x_00004_00003=3) + aux1071))
c Both direct and order encoding.
c Var 'aux1072' order represents '0' with '5014'
c Var 'aux1072' direct represents '0' with '5014'
c Var 'aux1072' order represents '1' with '5015'
-5014 5015 0
c Var 'aux1072' direct represents '1' with '5016'
5014 -5015 5016 0
-5016 5015 0
-5016 -5014 0
c Var 'aux1072' order represents '2' with '5017'
-5015 5017 0
c Var 'aux1072' direct represents '2' with '5018'
5015 -5017 5018 0
-5018 5017 0
-5018 -5015 0
c Var 'aux1072' direct represents '3' with '-5017'
5014 5016 5018 -5017 0
c Encoding variable: aux1073 with domain: int(0..4) (representing constraint (aux1068 + aux1070))
c Both direct and order encoding.
c Var 'aux1073' order represents '0' with '5019'
c Var 'aux1073' direct represents '0' with '5019'
c Var 'aux1073' order represents '1' with '5020'
-5019 5020 0
c Var 'aux1073' direct represents '1' with '5021'
5019 -5020 5021 0
-5021 5020 0
-5021 -5019 0
c Var 'aux1073' order represents '2' with '5022'
-5020 5022 0
c Var 'aux1073' direct represents '2' with '5023'
5020 -5022 5023 0
-5023 5022 0
-5023 -5020 0
c Var 'aux1073' order represents '3' with '5024'
-5022 5024 0
c Var 'aux1073' direct represents '3' with '5025'
5022 -5024 5025 0
-5025 5024 0
-5025 -5022 0
c Var 'aux1073' direct represents '4' with '-5024'
5019 5021 5023 5025 -5024 0
c Encoding variable: aux1074 with domain: int(0..2) (representing constraint ((x_00004_00001=4) + (x_00004_00009=4)))
c Both direct and order encoding.
c Var 'aux1074' order represents '0' with '5026'
c Var 'aux1074' direct represents '0' with '5026'
c Var 'aux1074' order represents '1' with '5027'
-5026 5027 0
c Var 'aux1074' direct represents '1' with '5028'
5026 -5027 5028 0
-5028 5027 0
-5028 -5026 0
c Var 'aux1074' direct represents '2' with '-5027'
5026 5028 -5027 0
c Encoding variable: aux1075 with domain: int(0..2) (representing constraint ((x_00004_00008=4) + (x_00004_00002=4)))
c Both direct and order encoding.
c Var 'aux1075' order represents '0' with '5029'
c Var 'aux1075' direct represents '0' with '5029'
c Var 'aux1075' order represents '1' with '5030'
-5029 5030 0
c Var 'aux1075' direct represents '1' with '5031'
5029 -5030 5031 0
-5031 5030 0
-5031 -5029 0
c Var 'aux1075' direct represents '2' with '-5030'
5029 5031 -5030 0
c Encoding variable: aux1076 with domain: int(0..2) (representing constraint ((x_00004_00007=4) + (x_00004_00004=4)))
c Both direct and order encoding.
c Var 'aux1076' order represents '0' with '5032'
c Var 'aux1076' direct represents '0' with '5032'
c Var 'aux1076' order represents '1' with '5033'
-5032 5033 0
c Var 'aux1076' direct represents '1' with '5034'
5032 -5033 5034 0
-5034 5033 0
-5034 -5032 0
c Var 'aux1076' direct represents '2' with '-5033'
5032 5034 -5033 0
c Encoding variable: aux1077 with domain: int(0..2) (representing constraint ((x_00004_00006=4) + (x_00004_00005=4)))
c Both direct and order encoding.
c Var 'aux1077' order represents '0' with '5035'
c Var 'aux1077' direct represents '0' with '5035'
c Var 'aux1077' order represents '1' with '5036'
-5035 5036 0
c Var 'aux1077' direct represents '1' with '5037'
5035 -5036 5037 0
-5037 5036 0
-5037 -5035 0
c Var 'aux1077' direct represents '2' with '-5036'
5035 5037 -5036 0
c Encoding variable: aux1078 with domain: int(0..3) (representing constraint ((x_00004_00003=4) + aux1077))
c Both direct and order encoding.
c Var 'aux1078' order represents '0' with '5038'
c Var 'aux1078' direct represents '0' with '5038'
c Var 'aux1078' order represents '1' with '5039'
-5038 5039 0
c Var 'aux1078' direct represents '1' with '5040'
5038 -5039 5040 0
-5040 5039 0
-5040 -5038 0
c Var 'aux1078' order represents '2' with '5041'
-5039 5041 0
c Var 'aux1078' direct represents '2' with '5042'
5039 -5041 5042 0
-5042 5041 0
-5042 -5039 0
c Var 'aux1078' direct represents '3' with '-5041'
5038 5040 5042 -5041 0
c Encoding variable: aux1079 with domain: int(0..4) (representing constraint (aux1074 + aux1076))
c Both direct and order encoding.
c Var 'aux1079' order represents '0' with '5043'
c Var 'aux1079' direct represents '0' with '5043'
c Var 'aux1079' order represents '1' with '5044'
-5043 5044 0
c Var 'aux1079' direct represents '1' with '5045'
5043 -5044 5045 0
-5045 5044 0
-5045 -5043 0
c Var 'aux1079' order represents '2' with '5046'
-5044 5046 0
c Var 'aux1079' direct represents '2' with '5047'
5044 -5046 5047 0
-5047 5046 0
-5047 -5044 0
c Var 'aux1079' order represents '3' with '5048'
-5046 5048 0
c Var 'aux1079' direct represents '3' with '5049'
5046 -5048 5049 0
-5049 5048 0
-5049 -5046 0
c Var 'aux1079' direct represents '4' with '-5048'
5043 5045 5047 5049 -5048 0
c Encoding variable: aux1080 with domain: int(0..2) (representing constraint ((x_00004_00001=5) + (x_00004_00009=5)))
c Both direct and order encoding.
c Var 'aux1080' order represents '0' with '5050'
c Var 'aux1080' direct represents '0' with '5050'
c Var 'aux1080' order represents '1' with '5051'
-5050 5051 0
c Var 'aux1080' direct represents '1' with '5052'
5050 -5051 5052 0
-5052 5051 0
-5052 -5050 0
c Var 'aux1080' direct represents '2' with '-5051'
5050 5052 -5051 0
c Encoding variable: aux1081 with domain: int(0..2) (representing constraint ((x_00004_00008=5) + (x_00004_00002=5)))
c Both direct and order encoding.
c Var 'aux1081' order represents '0' with '5053'
c Var 'aux1081' direct represents '0' with '5053'
c Var 'aux1081' order represents '1' with '5054'
-5053 5054 0
c Var 'aux1081' direct represents '1' with '5055'
5053 -5054 5055 0
-5055 5054 0
-5055 -5053 0
c Var 'aux1081' direct represents '2' with '-5054'
5053 5055 -5054 0
c Encoding variable: aux1082 with domain: int(0..2) (representing constraint ((x_00004_00007=5) + (x_00004_00004=5)))
c Both direct and order encoding.
c Var 'aux1082' order represents '0' with '5056'
c Var 'aux1082' direct represents '0' with '5056'
c Var 'aux1082' order represents '1' with '5057'
-5056 5057 0
c Var 'aux1082' direct represents '1' with '5058'
5056 -5057 5058 0
-5058 5057 0
-5058 -5056 0
c Var 'aux1082' direct represents '2' with '-5057'
5056 5058 -5057 0
c Encoding variable: aux1083 with domain: int(0..2) (representing constraint ((x_00004_00006=5) + (x_00004_00005=5)))
c Both direct and order encoding.
c Var 'aux1083' order represents '0' with '5059'
c Var 'aux1083' direct represents '0' with '5059'
c Var 'aux1083' order represents '1' with '5060'
-5059 5060 0
c Var 'aux1083' direct represents '1' with '5061'
5059 -5060 5061 0
-5061 5060 0
-5061 -5059 0
c Var 'aux1083' direct represents '2' with '-5060'
5059 5061 -5060 0
c Encoding variable: aux1084 with domain: int(0..3) (representing constraint ((x_00004_00003=5) + aux1083))
c Both direct and order encoding.
c Var 'aux1084' order represents '0' with '5062'
c Var 'aux1084' direct represents '0' with '5062'
c Var 'aux1084' order represents '1' with '5063'
-5062 5063 0
c Var 'aux1084' direct represents '1' with '5064'
5062 -5063 5064 0
-5064 5063 0
-5064 -5062 0
c Var 'aux1084' order represents '2' with '5065'
-5063 5065 0
c Var 'aux1084' direct represents '2' with '5066'
5063 -5065 5066 0
-5066 5065 0
-5066 -5063 0
c Var 'aux1084' direct represents '3' with '-5065'
5062 5064 5066 -5065 0
c Encoding variable: aux1085 with domain: int(0..4) (representing constraint (aux1080 + aux1082))
c Both direct and order encoding.
c Var 'aux1085' order represents '0' with '5067'
c Var 'aux1085' direct represents '0' with '5067'
c Var 'aux1085' order represents '1' with '5068'
-5067 5068 0
c Var 'aux1085' direct represents '1' with '5069'
5067 -5068 5069 0
-5069 5068 0
-5069 -5067 0
c Var 'aux1085' order represents '2' with '5070'
-5068 5070 0
c Var 'aux1085' direct represents '2' with '5071'
5068 -5070 5071 0
-5071 5070 0
-5071 -5068 0
c Var 'aux1085' order represents '3' with '5072'
-5070 5072 0
c Var 'aux1085' direct represents '3' with '5073'
5070 -5072 5073 0
-5073 5072 0
-5073 -5070 0
c Var 'aux1085' direct represents '4' with '-5072'
5067 5069 5071 5073 -5072 0
c Encoding variable: aux1086 with domain: int(0..2) (representing constraint ((x_00004_00001=6) + (x_00004_00009=6)))
c Both direct and order encoding.
c Var 'aux1086' order represents '0' with '5074'
c Var 'aux1086' direct represents '0' with '5074'
c Var 'aux1086' order represents '1' with '5075'
-5074 5075 0
c Var 'aux1086' direct represents '1' with '5076'
5074 -5075 5076 0
-5076 5075 0
-5076 -5074 0
c Var 'aux1086' direct represents '2' with '-5075'
5074 5076 -5075 0
c Encoding variable: aux1087 with domain: int(0..2) (representing constraint ((x_00004_00008=6) + (x_00004_00002=6)))
c Both direct and order encoding.
c Var 'aux1087' order represents '0' with '5077'
c Var 'aux1087' direct represents '0' with '5077'
c Var 'aux1087' order represents '1' with '5078'
-5077 5078 0
c Var 'aux1087' direct represents '1' with '5079'
5077 -5078 5079 0
-5079 5078 0
-5079 -5077 0
c Var 'aux1087' direct represents '2' with '-5078'
5077 5079 -5078 0
c Encoding variable: aux1088 with domain: int(0..2) (representing constraint ((x_00004_00007=6) + (x_00004_00004=6)))
c Both direct and order encoding.
c Var 'aux1088' order represents '0' with '5080'
c Var 'aux1088' direct represents '0' with '5080'
c Var 'aux1088' order represents '1' with '5081'
-5080 5081 0
c Var 'aux1088' direct represents '1' with '5082'
5080 -5081 5082 0
-5082 5081 0
-5082 -5080 0
c Var 'aux1088' direct represents '2' with '-5081'
5080 5082 -5081 0
c Encoding variable: aux1089 with domain: int(0..2) (representing constraint ((x_00004_00006=6) + (x_00004_00005=6)))
c Both direct and order encoding.
c Var 'aux1089' order represents '0' with '5083'
c Var 'aux1089' direct represents '0' with '5083'
c Var 'aux1089' order represents '1' with '5084'
-5083 5084 0
c Var 'aux1089' direct represents '1' with '5085'
5083 -5084 5085 0
-5085 5084 0
-5085 -5083 0
c Var 'aux1089' direct represents '2' with '-5084'
5083 5085 -5084 0
c Encoding variable: aux1090 with domain: int(0..3) (representing constraint ((x_00004_00003=6) + aux1089))
c Both direct and order encoding.
c Var 'aux1090' order represents '0' with '5086'
c Var 'aux1090' direct represents '0' with '5086'
c Var 'aux1090' order represents '1' with '5087'
-5086 5087 0
c Var 'aux1090' direct represents '1' with '5088'
5086 -5087 5088 0
-5088 5087 0
-5088 -5086 0
c Var 'aux1090' order represents '2' with '5089'
-5087 5089 0
c Var 'aux1090' direct represents '2' with '5090'
5087 -5089 5090 0
-5090 5089 0
-5090 -5087 0
c Var 'aux1090' direct represents '3' with '-5089'
5086 5088 5090 -5089 0
c Encoding variable: aux1091 with domain: int(0..4) (representing constraint (aux1086 + aux1088))
c Both direct and order encoding.
c Var 'aux1091' order represents '0' with '5091'
c Var 'aux1091' direct represents '0' with '5091'
c Var 'aux1091' order represents '1' with '5092'
-5091 5092 0
c Var 'aux1091' direct represents '1' with '5093'
5091 -5092 5093 0
-5093 5092 0
-5093 -5091 0
c Var 'aux1091' order represents '2' with '5094'
-5092 5094 0
c Var 'aux1091' direct represents '2' with '5095'
5092 -5094 5095 0
-5095 5094 0
-5095 -5092 0
c Var 'aux1091' order represents '3' with '5096'
-5094 5096 0
c Var 'aux1091' direct represents '3' with '5097'
5094 -5096 5097 0
-5097 5096 0
-5097 -5094 0
c Var 'aux1091' direct represents '4' with '-5096'
5091 5093 5095 5097 -5096 0
c Encoding variable: aux1092 with domain: int(0..2) (representing constraint ((x_00004_00001=7) + (x_00004_00009=7)))
c Both direct and order encoding.
c Var 'aux1092' order represents '0' with '5098'
c Var 'aux1092' direct represents '0' with '5098'
c Var 'aux1092' order represents '1' with '5099'
-5098 5099 0
c Var 'aux1092' direct represents '1' with '5100'
5098 -5099 5100 0
-5100 5099 0
-5100 -5098 0
c Var 'aux1092' direct represents '2' with '-5099'
5098 5100 -5099 0
c Encoding variable: aux1093 with domain: int(0..2) (representing constraint ((x_00004_00008=7) + (x_00004_00002=7)))
c Both direct and order encoding.
c Var 'aux1093' order represents '0' with '5101'
c Var 'aux1093' direct represents '0' with '5101'
c Var 'aux1093' order represents '1' with '5102'
-5101 5102 0
c Var 'aux1093' direct represents '1' with '5103'
5101 -5102 5103 0
-5103 5102 0
-5103 -5101 0
c Var 'aux1093' direct represents '2' with '-5102'
5101 5103 -5102 0
c Encoding variable: aux1094 with domain: int(0..2) (representing constraint ((x_00004_00007=7) + (x_00004_00004=7)))
c Both direct and order encoding.
c Var 'aux1094' order represents '0' with '5104'
c Var 'aux1094' direct represents '0' with '5104'
c Var 'aux1094' order represents '1' with '5105'
-5104 5105 0
c Var 'aux1094' direct represents '1' with '5106'
5104 -5105 5106 0
-5106 5105 0
-5106 -5104 0
c Var 'aux1094' direct represents '2' with '-5105'
5104 5106 -5105 0
c Encoding variable: aux1095 with domain: int(0..2) (representing constraint ((x_00004_00006=7) + (x_00004_00005=7)))
c Both direct and order encoding.
c Var 'aux1095' order represents '0' with '5107'
c Var 'aux1095' direct represents '0' with '5107'
c Var 'aux1095' order represents '1' with '5108'
-5107 5108 0
c Var 'aux1095' direct represents '1' with '5109'
5107 -5108 5109 0
-5109 5108 0
-5109 -5107 0
c Var 'aux1095' direct represents '2' with '-5108'
5107 5109 -5108 0
c Encoding variable: aux1096 with domain: int(0..3) (representing constraint ((x_00004_00003=7) + aux1095))
c Both direct and order encoding.
c Var 'aux1096' order represents '0' with '5110'
c Var 'aux1096' direct represents '0' with '5110'
c Var 'aux1096' order represents '1' with '5111'
-5110 5111 0
c Var 'aux1096' direct represents '1' with '5112'
5110 -5111 5112 0
-5112 5111 0
-5112 -5110 0
c Var 'aux1096' order represents '2' with '5113'
-5111 5113 0
c Var 'aux1096' direct represents '2' with '5114'
5111 -5113 5114 0
-5114 5113 0
-5114 -5111 0
c Var 'aux1096' direct represents '3' with '-5113'
5110 5112 5114 -5113 0
c Encoding variable: aux1097 with domain: int(0..4) (representing constraint (aux1092 + aux1094))
c Both direct and order encoding.
c Var 'aux1097' order represents '0' with '5115'
c Var 'aux1097' direct represents '0' with '5115'
c Var 'aux1097' order represents '1' with '5116'
-5115 5116 0
c Var 'aux1097' direct represents '1' with '5117'
5115 -5116 5117 0
-5117 5116 0
-5117 -5115 0
c Var 'aux1097' order represents '2' with '5118'
-5116 5118 0
c Var 'aux1097' direct represents '2' with '5119'
5116 -5118 5119 0
-5119 5118 0
-5119 -5116 0
c Var 'aux1097' order represents '3' with '5120'
-5118 5120 0
c Var 'aux1097' direct represents '3' with '5121'
5118 -5120 5121 0
-5121 5120 0
-5121 -5118 0
c Var 'aux1097' direct represents '4' with '-5120'
5115 5117 5119 5121 -5120 0
c Encoding variable: aux1098 with domain: int(0..2) (representing constraint ((x_00004_00001=8) + (x_00004_00009=8)))
c Both direct and order encoding.
c Var 'aux1098' order represents '0' with '5122'
c Var 'aux1098' direct represents '0' with '5122'
c Var 'aux1098' order represents '1' with '5123'
-5122 5123 0
c Var 'aux1098' direct represents '1' with '5124'
5122 -5123 5124 0
-5124 5123 0
-5124 -5122 0
c Var 'aux1098' direct represents '2' with '-5123'
5122 5124 -5123 0
c Encoding variable: aux1099 with domain: int(0..2) (representing constraint ((x_00004_00008=8) + (x_00004_00002=8)))
c Both direct and order encoding.
c Var 'aux1099' order represents '0' with '5125'
c Var 'aux1099' direct represents '0' with '5125'
c Var 'aux1099' order represents '1' with '5126'
-5125 5126 0
c Var 'aux1099' direct represents '1' with '5127'
5125 -5126 5127 0
-5127 5126 0
-5127 -5125 0
c Var 'aux1099' direct represents '2' with '-5126'
5125 5127 -5126 0
c Encoding variable: aux1100 with domain: int(0..2) (representing constraint ((x_00004_00007=8) + (x_00004_00004=8)))
c Both direct and order encoding.
c Var 'aux1100' order represents '0' with '5128'
c Var 'aux1100' direct represents '0' with '5128'
c Var 'aux1100' order represents '1' with '5129'
-5128 5129 0
c Var 'aux1100' direct represents '1' with '5130'
5128 -5129 5130 0
-5130 5129 0
-5130 -5128 0
c Var 'aux1100' direct represents '2' with '-5129'
5128 5130 -5129 0
c Encoding variable: aux1101 with domain: int(0..2) (representing constraint ((x_00004_00006=8) + (x_00004_00005=8)))
c Both direct and order encoding.
c Var 'aux1101' order represents '0' with '5131'
c Var 'aux1101' direct represents '0' with '5131'
c Var 'aux1101' order represents '1' with '5132'
-5131 5132 0
c Var 'aux1101' direct represents '1' with '5133'
5131 -5132 5133 0
-5133 5132 0
-5133 -5131 0
c Var 'aux1101' direct represents '2' with '-5132'
5131 5133 -5132 0
c Encoding variable: aux1102 with domain: int(0..3) (representing constraint ((x_00004_00003=8) + aux1101))
c Both direct and order encoding.
c Var 'aux1102' order represents '0' with '5134'
c Var 'aux1102' direct represents '0' with '5134'
c Var 'aux1102' order represents '1' with '5135'
-5134 5135 0
c Var 'aux1102' direct represents '1' with '5136'
5134 -5135 5136 0
-5136 5135 0
-5136 -5134 0
c Var 'aux1102' order represents '2' with '5137'
-5135 5137 0
c Var 'aux1102' direct represents '2' with '5138'
5135 -5137 5138 0
-5138 5137 0
-5138 -5135 0
c Var 'aux1102' direct represents '3' with '-5137'
5134 5136 5138 -5137 0
c Encoding variable: aux1103 with domain: int(0..4) (representing constraint (aux1098 + aux1100))
c Both direct and order encoding.
c Var 'aux1103' order represents '0' with '5139'
c Var 'aux1103' direct represents '0' with '5139'
c Var 'aux1103' order represents '1' with '5140'
-5139 5140 0
c Var 'aux1103' direct represents '1' with '5141'
5139 -5140 5141 0
-5141 5140 0
-5141 -5139 0
c Var 'aux1103' order represents '2' with '5142'
-5140 5142 0
c Var 'aux1103' direct represents '2' with '5143'
5140 -5142 5143 0
-5143 5142 0
-5143 -5140 0
c Var 'aux1103' order represents '3' with '5144'
-5142 5144 0
c Var 'aux1103' direct represents '3' with '5145'
5142 -5144 5145 0
-5145 5144 0
-5145 -5142 0
c Var 'aux1103' direct represents '4' with '-5144'
5139 5141 5143 5145 -5144 0
c Encoding variable: aux1104 with domain: int(0..2) (representing constraint ((x_00004_00001=9) + (x_00004_00009=9)))
c Both direct and order encoding.
c Var 'aux1104' order represents '0' with '5146'
c Var 'aux1104' direct represents '0' with '5146'
c Var 'aux1104' order represents '1' with '5147'
-5146 5147 0
c Var 'aux1104' direct represents '1' with '5148'
5146 -5147 5148 0
-5148 5147 0
-5148 -5146 0
c Var 'aux1104' direct represents '2' with '-5147'
5146 5148 -5147 0
c Encoding variable: aux1105 with domain: int(0..2) (representing constraint ((x_00004_00008=9) + (x_00004_00002=9)))
c Both direct and order encoding.
c Var 'aux1105' order represents '0' with '5149'
c Var 'aux1105' direct represents '0' with '5149'
c Var 'aux1105' order represents '1' with '5150'
-5149 5150 0
c Var 'aux1105' direct represents '1' with '5151'
5149 -5150 5151 0
-5151 5150 0
-5151 -5149 0
c Var 'aux1105' direct represents '2' with '-5150'
5149 5151 -5150 0
c Encoding variable: aux1106 with domain: int(0..2) (representing constraint ((x_00004_00007=9) + (x_00004_00004=9)))
c Both direct and order encoding.
c Var 'aux1106' order represents '0' with '5152'
c Var 'aux1106' direct represents '0' with '5152'
c Var 'aux1106' order represents '1' with '5153'
-5152 5153 0
c Var 'aux1106' direct represents '1' with '5154'
5152 -5153 5154 0
-5154 5153 0
-5154 -5152 0
c Var 'aux1106' direct represents '2' with '-5153'
5152 5154 -5153 0
c Encoding variable: aux1107 with domain: int(0..2) (representing constraint ((x_00004_00006=9) + (x_00004_00005=9)))
c Both direct and order encoding.
c Var 'aux1107' order represents '0' with '5155'
c Var 'aux1107' direct represents '0' with '5155'
c Var 'aux1107' order represents '1' with '5156'
-5155 5156 0
c Var 'aux1107' direct represents '1' with '5157'
5155 -5156 5157 0
-5157 5156 0
-5157 -5155 0
c Var 'aux1107' direct represents '2' with '-5156'
5155 5157 -5156 0
c Encoding variable: aux1108 with domain: int(0..3) (representing constraint ((x_00004_00003=9) + aux1107))
c Both direct and order encoding.
c Var 'aux1108' order represents '0' with '5158'
c Var 'aux1108' direct represents '0' with '5158'
c Var 'aux1108' order represents '1' with '5159'
-5158 5159 0
c Var 'aux1108' direct represents '1' with '5160'
5158 -5159 5160 0
-5160 5159 0
-5160 -5158 0
c Var 'aux1108' order represents '2' with '5161'
-5159 5161 0
c Var 'aux1108' direct represents '2' with '5162'
5159 -5161 5162 0
-5162 5161 0
-5162 -5159 0
c Var 'aux1108' direct represents '3' with '-5161'
5158 5160 5162 -5161 0
c Encoding variable: aux1109 with domain: int(0..4) (representing constraint (aux1104 + aux1106))
c Both direct and order encoding.
c Var 'aux1109' order represents '0' with '5163'
c Var 'aux1109' direct represents '0' with '5163'
c Var 'aux1109' order represents '1' with '5164'
-5163 5164 0
c Var 'aux1109' direct represents '1' with '5165'
5163 -5164 5165 0
-5165 5164 0
-5165 -5163 0
c Var 'aux1109' order represents '2' with '5166'
-5164 5166 0
c Var 'aux1109' direct represents '2' with '5167'
5164 -5166 5167 0
-5167 5166 0
-5167 -5164 0
c Var 'aux1109' order represents '3' with '5168'
-5166 5168 0
c Var 'aux1109' direct represents '3' with '5169'
5166 -5168 5169 0
-5169 5168 0
-5169 -5166 0
c Var 'aux1109' direct represents '4' with '-5168'
5163 5165 5167 5169 -5168 0
c Encoding variable: aux1110 with domain: int(0..2) (representing constraint ((x_00005_00001=1) + (x_00005_00009=1)))
c Both direct and order encoding.
c Var 'aux1110' order represents '0' with '5170'
c Var 'aux1110' direct represents '0' with '5170'
c Var 'aux1110' order represents '1' with '5171'
-5170 5171 0
c Var 'aux1110' direct represents '1' with '5172'
5170 -5171 5172 0
-5172 5171 0
-5172 -5170 0
c Var 'aux1110' direct represents '2' with '-5171'
5170 5172 -5171 0
c Encoding variable: aux1111 with domain: int(0..2) (representing constraint ((x_00005_00008=1) + (x_00005_00002=1)))
c Both direct and order encoding.
c Var 'aux1111' order represents '0' with '5173'
c Var 'aux1111' direct represents '0' with '5173'
c Var 'aux1111' order represents '1' with '5174'
-5173 5174 0
c Var 'aux1111' direct represents '1' with '5175'
5173 -5174 5175 0
-5175 5174 0
-5175 -5173 0
c Var 'aux1111' direct represents '2' with '-5174'
5173 5175 -5174 0
c Encoding variable: aux1112 with domain: int(0..2) (representing constraint ((x_00005_00007=1) + (x_00005_00004=1)))
c Both direct and order encoding.
c Var 'aux1112' order represents '0' with '5176'
c Var 'aux1112' direct represents '0' with '5176'
c Var 'aux1112' order represents '1' with '5177'
-5176 5177 0
c Var 'aux1112' direct represents '1' with '5178'
5176 -5177 5178 0
-5178 5177 0
-5178 -5176 0
c Var 'aux1112' direct represents '2' with '-5177'
5176 5178 -5177 0
c Encoding variable: aux1113 with domain: int(0..2) (representing constraint ((x_00005_00006=1) + (x_00005_00005=1)))
c Both direct and order encoding.
c Var 'aux1113' order represents '0' with '5179'
c Var 'aux1113' direct represents '0' with '5179'
c Var 'aux1113' order represents '1' with '5180'
-5179 5180 0
c Var 'aux1113' direct represents '1' with '5181'
5179 -5180 5181 0
-5181 5180 0
-5181 -5179 0
c Var 'aux1113' direct represents '2' with '-5180'
5179 5181 -5180 0
c Encoding variable: aux1114 with domain: int(0..3) (representing constraint ((x_00005_00003=1) + aux1113))
c Both direct and order encoding.
c Var 'aux1114' order represents '0' with '5182'
c Var 'aux1114' direct represents '0' with '5182'
c Var 'aux1114' order represents '1' with '5183'
-5182 5183 0
c Var 'aux1114' direct represents '1' with '5184'
5182 -5183 5184 0
-5184 5183 0
-5184 -5182 0
c Var 'aux1114' order represents '2' with '5185'
-5183 5185 0
c Var 'aux1114' direct represents '2' with '5186'
5183 -5185 5186 0
-5186 5185 0
-5186 -5183 0
c Var 'aux1114' direct represents '3' with '-5185'
5182 5184 5186 -5185 0
c Encoding variable: aux1115 with domain: int(0..4) (representing constraint (aux1110 + aux1112))
c Both direct and order encoding.
c Var 'aux1115' order represents '0' with '5187'
c Var 'aux1115' direct represents '0' with '5187'
c Var 'aux1115' order represents '1' with '5188'
-5187 5188 0
c Var 'aux1115' direct represents '1' with '5189'
5187 -5188 5189 0
-5189 5188 0
-5189 -5187 0
c Var 'aux1115' order represents '2' with '5190'
-5188 5190 0
c Var 'aux1115' direct represents '2' with '5191'
5188 -5190 5191 0
-5191 5190 0
-5191 -5188 0
c Var 'aux1115' order represents '3' with '5192'
-5190 5192 0
c Var 'aux1115' direct represents '3' with '5193'
5190 -5192 5193 0
-5193 5192 0
-5193 -5190 0
c Var 'aux1115' direct represents '4' with '-5192'
5187 5189 5191 5193 -5192 0
c Encoding variable: aux1116 with domain: int(0..2) (representing constraint ((x_00005_00001=2) + (x_00005_00009=2)))
c Both direct and order encoding.
c Var 'aux1116' order represents '0' with '5194'
c Var 'aux1116' direct represents '0' with '5194'
c Var 'aux1116' order represents '1' with '5195'
-5194 5195 0
c Var 'aux1116' direct represents '1' with '5196'
5194 -5195 5196 0
-5196 5195 0
-5196 -5194 0
c Var 'aux1116' direct represents '2' with '-5195'
5194 5196 -5195 0
c Encoding variable: aux1117 with domain: int(0..2) (representing constraint ((x_00005_00008=2) + (x_00005_00002=2)))
c Both direct and order encoding.
c Var 'aux1117' order represents '0' with '5197'
c Var 'aux1117' direct represents '0' with '5197'
c Var 'aux1117' order represents '1' with '5198'
-5197 5198 0
c Var 'aux1117' direct represents '1' with '5199'
5197 -5198 5199 0
-5199 5198 0
-5199 -5197 0
c Var 'aux1117' direct represents '2' with '-5198'
5197 5199 -5198 0
c Encoding variable: aux1118 with domain: int(0..2) (representing constraint ((x_00005_00007=2) + (x_00005_00004=2)))
c Both direct and order encoding.
c Var 'aux1118' order represents '0' with '5200'
c Var 'aux1118' direct represents '0' with '5200'
c Var 'aux1118' order represents '1' with '5201'
-5200 5201 0
c Var 'aux1118' direct represents '1' with '5202'
5200 -5201 5202 0
-5202 5201 0
-5202 -5200 0
c Var 'aux1118' direct represents '2' with '-5201'
5200 5202 -5201 0
c Encoding variable: aux1119 with domain: int(0..2) (representing constraint ((x_00005_00006=2) + (x_00005_00005=2)))
c Both direct and order encoding.
c Var 'aux1119' order represents '0' with '5203'
c Var 'aux1119' direct represents '0' with '5203'
c Var 'aux1119' order represents '1' with '5204'
-5203 5204 0
c Var 'aux1119' direct represents '1' with '5205'
5203 -5204 5205 0
-5205 5204 0
-5205 -5203 0
c Var 'aux1119' direct represents '2' with '-5204'
5203 5205 -5204 0
c Encoding variable: aux1120 with domain: int(0..3) (representing constraint ((x_00005_00003=2) + aux1119))
c Both direct and order encoding.
c Var 'aux1120' order represents '0' with '5206'
c Var 'aux1120' direct represents '0' with '5206'
c Var 'aux1120' order represents '1' with '5207'
-5206 5207 0
c Var 'aux1120' direct represents '1' with '5208'
5206 -5207 5208 0
-5208 5207 0
-5208 -5206 0
c Var 'aux1120' order represents '2' with '5209'
-5207 5209 0
c Var 'aux1120' direct represents '2' with '5210'
5207 -5209 5210 0
-5210 5209 0
-5210 -5207 0
c Var 'aux1120' direct represents '3' with '-5209'
5206 5208 5210 -5209 0
c Encoding variable: aux1121 with domain: int(0..4) (representing constraint (aux1116 + aux1118))
c Both direct and order encoding.
c Var 'aux1121' order represents '0' with '5211'
c Var 'aux1121' direct represents '0' with '5211'
c Var 'aux1121' order represents '1' with '5212'
-5211 5212 0
c Var 'aux1121' direct represents '1' with '5213'
5211 -5212 5213 0
-5213 5212 0
-5213 -5211 0
c Var 'aux1121' order represents '2' with '5214'
-5212 5214 0
c Var 'aux1121' direct represents '2' with '5215'
5212 -5214 5215 0
-5215 5214 0
-5215 -5212 0
c Var 'aux1121' order represents '3' with '5216'
-5214 5216 0
c Var 'aux1121' direct represents '3' with '5217'
5214 -5216 5217 0
-5217 5216 0
-5217 -5214 0
c Var 'aux1121' direct represents '4' with '-5216'
5211 5213 5215 5217 -5216 0
c Encoding variable: aux1122 with domain: int(0..2) (representing constraint ((x_00005_00001=3) + (x_00005_00009=3)))
c Both direct and order encoding.
c Var 'aux1122' order represents '0' with '5218'
c Var 'aux1122' direct represents '0' with '5218'
c Var 'aux1122' order represents '1' with '5219'
-5218 5219 0
c Var 'aux1122' direct represents '1' with '5220'
5218 -5219 5220 0
-5220 5219 0
-5220 -5218 0
c Var 'aux1122' direct represents '2' with '-5219'
5218 5220 -5219 0
c Encoding variable: aux1123 with domain: int(0..2) (representing constraint ((x_00005_00008=3) + (x_00005_00002=3)))
c Both direct and order encoding.
c Var 'aux1123' order represents '0' with '5221'
c Var 'aux1123' direct represents '0' with '5221'
c Var 'aux1123' order represents '1' with '5222'
-5221 5222 0
c Var 'aux1123' direct represents '1' with '5223'
5221 -5222 5223 0
-5223 5222 0
-5223 -5221 0
c Var 'aux1123' direct represents '2' with '-5222'
5221 5223 -5222 0
c Encoding variable: aux1124 with domain: int(0..2) (representing constraint ((x_00005_00007=3) + (x_00005_00004=3)))
c Both direct and order encoding.
c Var 'aux1124' order represents '0' with '5224'
c Var 'aux1124' direct represents '0' with '5224'
c Var 'aux1124' order represents '1' with '5225'
-5224 5225 0
c Var 'aux1124' direct represents '1' with '5226'
5224 -5225 5226 0
-5226 5225 0
-5226 -5224 0
c Var 'aux1124' direct represents '2' with '-5225'
5224 5226 -5225 0
c Encoding variable: aux1125 with domain: int(0..2) (representing constraint ((x_00005_00006=3) + (x_00005_00005=3)))
c Both direct and order encoding.
c Var 'aux1125' order represents '0' with '5227'
c Var 'aux1125' direct represents '0' with '5227'
c Var 'aux1125' order represents '1' with '5228'
-5227 5228 0
c Var 'aux1125' direct represents '1' with '5229'
5227 -5228 5229 0
-5229 5228 0
-5229 -5227 0
c Var 'aux1125' direct represents '2' with '-5228'
5227 5229 -5228 0
c Encoding variable: aux1126 with domain: int(0..3) (representing constraint ((x_00005_00003=3) + aux1125))
c Both direct and order encoding.
c Var 'aux1126' order represents '0' with '5230'
c Var 'aux1126' direct represents '0' with '5230'
c Var 'aux1126' order represents '1' with '5231'
-5230 5231 0
c Var 'aux1126' direct represents '1' with '5232'
5230 -5231 5232 0
-5232 5231 0
-5232 -5230 0
c Var 'aux1126' order represents '2' with '5233'
-5231 5233 0
c Var 'aux1126' direct represents '2' with '5234'
5231 -5233 5234 0
-5234 5233 0
-5234 -5231 0
c Var 'aux1126' direct represents '3' with '-5233'
5230 5232 5234 -5233 0
c Encoding variable: aux1127 with domain: int(0..4) (representing constraint (aux1122 + aux1124))
c Both direct and order encoding.
c Var 'aux1127' order represents '0' with '5235'
c Var 'aux1127' direct represents '0' with '5235'
c Var 'aux1127' order represents '1' with '5236'
-5235 5236 0
c Var 'aux1127' direct represents '1' with '5237'
5235 -5236 5237 0
-5237 5236 0
-5237 -5235 0
c Var 'aux1127' order represents '2' with '5238'
-5236 5238 0
c Var 'aux1127' direct represents '2' with '5239'
5236 -5238 5239 0
-5239 5238 0
-5239 -5236 0
c Var 'aux1127' order represents '3' with '5240'
-5238 5240 0
c Var 'aux1127' direct represents '3' with '5241'
5238 -5240 5241 0
-5241 5240 0
-5241 -5238 0
c Var 'aux1127' direct represents '4' with '-5240'
5235 5237 5239 5241 -5240 0
c Encoding variable: aux1128 with domain: int(0..2) (representing constraint ((x_00005_00001=4) + (x_00005_00009=4)))
c Both direct and order encoding.
c Var 'aux1128' order represents '0' with '5242'
c Var 'aux1128' direct represents '0' with '5242'
c Var 'aux1128' order represents '1' with '5243'
-5242 5243 0
c Var 'aux1128' direct represents '1' with '5244'
5242 -5243 5244 0
-5244 5243 0
-5244 -5242 0
c Var 'aux1128' direct represents '2' with '-5243'
5242 5244 -5243 0
c Encoding variable: aux1129 with domain: int(0..2) (representing constraint ((x_00005_00008=4) + (x_00005_00002=4)))
c Both direct and order encoding.
c Var 'aux1129' order represents '0' with '5245'
c Var 'aux1129' direct represents '0' with '5245'
c Var 'aux1129' order represents '1' with '5246'
-5245 5246 0
c Var 'aux1129' direct represents '1' with '5247'
5245 -5246 5247 0
-5247 5246 0
-5247 -5245 0
c Var 'aux1129' direct represents '2' with '-5246'
5245 5247 -5246 0
c Encoding variable: aux1130 with domain: int(0..2) (representing constraint ((x_00005_00007=4) + (x_00005_00004=4)))
c Both direct and order encoding.
c Var 'aux1130' order represents '0' with '5248'
c Var 'aux1130' direct represents '0' with '5248'
c Var 'aux1130' order represents '1' with '5249'
-5248 5249 0
c Var 'aux1130' direct represents '1' with '5250'
5248 -5249 5250 0
-5250 5249 0
-5250 -5248 0
c Var 'aux1130' direct represents '2' with '-5249'
5248 5250 -5249 0
c Encoding variable: aux1131 with domain: int(0..2) (representing constraint ((x_00005_00006=4) + (x_00005_00005=4)))
c Both direct and order encoding.
c Var 'aux1131' order represents '0' with '5251'
c Var 'aux1131' direct represents '0' with '5251'
c Var 'aux1131' order represents '1' with '5252'
-5251 5252 0
c Var 'aux1131' direct represents '1' with '5253'
5251 -5252 5253 0
-5253 5252 0
-5253 -5251 0
c Var 'aux1131' direct represents '2' with '-5252'
5251 5253 -5252 0
c Encoding variable: aux1132 with domain: int(0..3) (representing constraint ((x_00005_00003=4) + aux1131))
c Both direct and order encoding.
c Var 'aux1132' order represents '0' with '5254'
c Var 'aux1132' direct represents '0' with '5254'
c Var 'aux1132' order represents '1' with '5255'
-5254 5255 0
c Var 'aux1132' direct represents '1' with '5256'
5254 -5255 5256 0
-5256 5255 0
-5256 -5254 0
c Var 'aux1132' order represents '2' with '5257'
-5255 5257 0
c Var 'aux1132' direct represents '2' with '5258'
5255 -5257 5258 0
-5258 5257 0
-5258 -5255 0
c Var 'aux1132' direct represents '3' with '-5257'
5254 5256 5258 -5257 0
c Encoding variable: aux1133 with domain: int(0..4) (representing constraint (aux1128 + aux1130))
c Both direct and order encoding.
c Var 'aux1133' order represents '0' with '5259'
c Var 'aux1133' direct represents '0' with '5259'
c Var 'aux1133' order represents '1' with '5260'
-5259 5260 0
c Var 'aux1133' direct represents '1' with '5261'
5259 -5260 5261 0
-5261 5260 0
-5261 -5259 0
c Var 'aux1133' order represents '2' with '5262'
-5260 5262 0
c Var 'aux1133' direct represents '2' with '5263'
5260 -5262 5263 0
-5263 5262 0
-5263 -5260 0
c Var 'aux1133' order represents '3' with '5264'
-5262 5264 0
c Var 'aux1133' direct represents '3' with '5265'
5262 -5264 5265 0
-5265 5264 0
-5265 -5262 0
c Var 'aux1133' direct represents '4' with '-5264'
5259 5261 5263 5265 -5264 0
c Encoding variable: aux1134 with domain: int(0..2) (representing constraint ((x_00005_00001=5) + (x_00005_00009=5)))
c Both direct and order encoding.
c Var 'aux1134' order represents '0' with '5266'
c Var 'aux1134' direct represents '0' with '5266'
c Var 'aux1134' order represents '1' with '5267'
-5266 5267 0
c Var 'aux1134' direct represents '1' with '5268'
5266 -5267 5268 0
-5268 5267 0
-5268 -5266 0
c Var 'aux1134' direct represents '2' with '-5267'
5266 5268 -5267 0
c Encoding variable: aux1135 with domain: int(0..2) (representing constraint ((x_00005_00008=5) + (x_00005_00002=5)))
c Both direct and order encoding.
c Var 'aux1135' order represents '0' with '5269'
c Var 'aux1135' direct represents '0' with '5269'
c Var 'aux1135' order represents '1' with '5270'
-5269 5270 0
c Var 'aux1135' direct represents '1' with '5271'
5269 -5270 5271 0
-5271 5270 0
-5271 -5269 0
c Var 'aux1135' direct represents '2' with '-5270'
5269 5271 -5270 0
c Encoding variable: aux1136 with domain: int(0..2) (representing constraint ((x_00005_00007=5) + (x_00005_00004=5)))
c Both direct and order encoding.
c Var 'aux1136' order represents '0' with '5272'
c Var 'aux1136' direct represents '0' with '5272'
c Var 'aux1136' order represents '1' with '5273'
-5272 5273 0
c Var 'aux1136' direct represents '1' with '5274'
5272 -5273 5274 0
-5274 5273 0
-5274 -5272 0
c Var 'aux1136' direct represents '2' with '-5273'
5272 5274 -5273 0
c Encoding variable: aux1137 with domain: int(0..2) (representing constraint ((x_00005_00006=5) + (x_00005_00005=5)))
c Both direct and order encoding.
c Var 'aux1137' order represents '0' with '5275'
c Var 'aux1137' direct represents '0' with '5275'
c Var 'aux1137' order represents '1' with '5276'
-5275 5276 0
c Var 'aux1137' direct represents '1' with '5277'
5275 -5276 5277 0
-5277 5276 0
-5277 -5275 0
c Var 'aux1137' direct represents '2' with '-5276'
5275 5277 -5276 0
c Encoding variable: aux1138 with domain: int(0..3) (representing constraint ((x_00005_00003=5) + aux1137))
c Both direct and order encoding.
c Var 'aux1138' order represents '0' with '5278'
c Var 'aux1138' direct represents '0' with '5278'
c Var 'aux1138' order represents '1' with '5279'
-5278 5279 0
c Var 'aux1138' direct represents '1' with '5280'
5278 -5279 5280 0
-5280 5279 0
-5280 -5278 0
c Var 'aux1138' order represents '2' with '5281'
-5279 5281 0
c Var 'aux1138' direct represents '2' with '5282'
5279 -5281 5282 0
-5282 5281 0
-5282 -5279 0
c Var 'aux1138' direct represents '3' with '-5281'
5278 5280 5282 -5281 0
c Encoding variable: aux1139 with domain: int(0..4) (representing constraint (aux1134 + aux1136))
c Both direct and order encoding.
c Var 'aux1139' order represents '0' with '5283'
c Var 'aux1139' direct represents '0' with '5283'
c Var 'aux1139' order represents '1' with '5284'
-5283 5284 0
c Var 'aux1139' direct represents '1' with '5285'
5283 -5284 5285 0
-5285 5284 0
-5285 -5283 0
c Var 'aux1139' order represents '2' with '5286'
-5284 5286 0
c Var 'aux1139' direct represents '2' with '5287'
5284 -5286 5287 0
-5287 5286 0
-5287 -5284 0
c Var 'aux1139' order represents '3' with '5288'
-5286 5288 0
c Var 'aux1139' direct represents '3' with '5289'
5286 -5288 5289 0
-5289 5288 0
-5289 -5286 0
c Var 'aux1139' direct represents '4' with '-5288'
5283 5285 5287 5289 -5288 0
c Encoding variable: aux1140 with domain: int(0..2) (representing constraint ((x_00005_00001=6) + (x_00005_00009=6)))
c Both direct and order encoding.
c Var 'aux1140' order represents '0' with '5290'
c Var 'aux1140' direct represents '0' with '5290'
c Var 'aux1140' order represents '1' with '5291'
-5290 5291 0
c Var 'aux1140' direct represents '1' with '5292'
5290 -5291 5292 0
-5292 5291 0
-5292 -5290 0
c Var 'aux1140' direct represents '2' with '-5291'
5290 5292 -5291 0
c Encoding variable: aux1141 with domain: int(0..2) (representing constraint ((x_00005_00008=6) + (x_00005_00002=6)))
c Both direct and order encoding.
c Var 'aux1141' order represents '0' with '5293'
c Var 'aux1141' direct represents '0' with '5293'
c Var 'aux1141' order represents '1' with '5294'
-5293 5294 0
c Var 'aux1141' direct represents '1' with '5295'
5293 -5294 5295 0
-5295 5294 0
-5295 -5293 0
c Var 'aux1141' direct represents '2' with '-5294'
5293 5295 -5294 0
c Encoding variable: aux1142 with domain: int(0..2) (representing constraint ((x_00005_00007=6) + (x_00005_00004=6)))
c Both direct and order encoding.
c Var 'aux1142' order represents '0' with '5296'
c Var 'aux1142' direct represents '0' with '5296'
c Var 'aux1142' order represents '1' with '5297'
-5296 5297 0
c Var 'aux1142' direct represents '1' with '5298'
5296 -5297 5298 0
-5298 5297 0
-5298 -5296 0
c Var 'aux1142' direct represents '2' with '-5297'
5296 5298 -5297 0
c Encoding variable: aux1143 with domain: int(0..2) (representing constraint ((x_00005_00006=6) + (x_00005_00005=6)))
c Both direct and order encoding.
c Var 'aux1143' order represents '0' with '5299'
c Var 'aux1143' direct represents '0' with '5299'
c Var 'aux1143' order represents '1' with '5300'
-5299 5300 0
c Var 'aux1143' direct represents '1' with '5301'
5299 -5300 5301 0
-5301 5300 0
-5301 -5299 0
c Var 'aux1143' direct represents '2' with '-5300'
5299 5301 -5300 0
c Encoding variable: aux1144 with domain: int(0..3) (representing constraint ((x_00005_00003=6) + aux1143))
c Both direct and order encoding.
c Var 'aux1144' order represents '0' with '5302'
c Var 'aux1144' direct represents '0' with '5302'
c Var 'aux1144' order represents '1' with '5303'
-5302 5303 0
c Var 'aux1144' direct represents '1' with '5304'
5302 -5303 5304 0
-5304 5303 0
-5304 -5302 0
c Var 'aux1144' order represents '2' with '5305'
-5303 5305 0
c Var 'aux1144' direct represents '2' with '5306'
5303 -5305 5306 0
-5306 5305 0
-5306 -5303 0
c Var 'aux1144' direct represents '3' with '-5305'
5302 5304 5306 -5305 0
c Encoding variable: aux1145 with domain: int(0..4) (representing constraint (aux1140 + aux1142))
c Both direct and order encoding.
c Var 'aux1145' order represents '0' with '5307'
c Var 'aux1145' direct represents '0' with '5307'
c Var 'aux1145' order represents '1' with '5308'
-5307 5308 0
c Var 'aux1145' direct represents '1' with '5309'
5307 -5308 5309 0
-5309 5308 0
-5309 -5307 0
c Var 'aux1145' order represents '2' with '5310'
-5308 5310 0
c Var 'aux1145' direct represents '2' with '5311'
5308 -5310 5311 0
-5311 5310 0
-5311 -5308 0
c Var 'aux1145' order represents '3' with '5312'
-5310 5312 0
c Var 'aux1145' direct represents '3' with '5313'
5310 -5312 5313 0
-5313 5312 0
-5313 -5310 0
c Var 'aux1145' direct represents '4' with '-5312'
5307 5309 5311 5313 -5312 0
c Encoding variable: aux1146 with domain: int(0..2) (representing constraint ((x_00005_00001=7) + (x_00005_00009=7)))
c Both direct and order encoding.
c Var 'aux1146' order represents '0' with '5314'
c Var 'aux1146' direct represents '0' with '5314'
c Var 'aux1146' order represents '1' with '5315'
-5314 5315 0
c Var 'aux1146' direct represents '1' with '5316'
5314 -5315 5316 0
-5316 5315 0
-5316 -5314 0
c Var 'aux1146' direct represents '2' with '-5315'
5314 5316 -5315 0
c Encoding variable: aux1147 with domain: int(0..2) (representing constraint ((x_00005_00008=7) + (x_00005_00002=7)))
c Both direct and order encoding.
c Var 'aux1147' order represents '0' with '5317'
c Var 'aux1147' direct represents '0' with '5317'
c Var 'aux1147' order represents '1' with '5318'
-5317 5318 0
c Var 'aux1147' direct represents '1' with '5319'
5317 -5318 5319 0
-5319 5318 0
-5319 -5317 0
c Var 'aux1147' direct represents '2' with '-5318'
5317 5319 -5318 0
c Encoding variable: aux1148 with domain: int(0..2) (representing constraint ((x_00005_00007=7) + (x_00005_00004=7)))
c Both direct and order encoding.
c Var 'aux1148' order represents '0' with '5320'
c Var 'aux1148' direct represents '0' with '5320'
c Var 'aux1148' order represents '1' with '5321'
-5320 5321 0
c Var 'aux1148' direct represents '1' with '5322'
5320 -5321 5322 0
-5322 5321 0
-5322 -5320 0
c Var 'aux1148' direct represents '2' with '-5321'
5320 5322 -5321 0
c Encoding variable: aux1149 with domain: int(0..2) (representing constraint ((x_00005_00006=7) + (x_00005_00005=7)))
c Both direct and order encoding.
c Var 'aux1149' order represents '0' with '5323'
c Var 'aux1149' direct represents '0' with '5323'
c Var 'aux1149' order represents '1' with '5324'
-5323 5324 0
c Var 'aux1149' direct represents '1' with '5325'
5323 -5324 5325 0
-5325 5324 0
-5325 -5323 0
c Var 'aux1149' direct represents '2' with '-5324'
5323 5325 -5324 0
c Encoding variable: aux1150 with domain: int(0..3) (representing constraint ((x_00005_00003=7) + aux1149))
c Both direct and order encoding.
c Var 'aux1150' order represents '0' with '5326'
c Var 'aux1150' direct represents '0' with '5326'
c Var 'aux1150' order represents '1' with '5327'
-5326 5327 0
c Var 'aux1150' direct represents '1' with '5328'
5326 -5327 5328 0
-5328 5327 0
-5328 -5326 0
c Var 'aux1150' order represents '2' with '5329'
-5327 5329 0
c Var 'aux1150' direct represents '2' with '5330'
5327 -5329 5330 0
-5330 5329 0
-5330 -5327 0
c Var 'aux1150' direct represents '3' with '-5329'
5326 5328 5330 -5329 0
c Encoding variable: aux1151 with domain: int(0..4) (representing constraint (aux1146 + aux1148))
c Both direct and order encoding.
c Var 'aux1151' order represents '0' with '5331'
c Var 'aux1151' direct represents '0' with '5331'
c Var 'aux1151' order represents '1' with '5332'
-5331 5332 0
c Var 'aux1151' direct represents '1' with '5333'
5331 -5332 5333 0
-5333 5332 0
-5333 -5331 0
c Var 'aux1151' order represents '2' with '5334'
-5332 5334 0
c Var 'aux1151' direct represents '2' with '5335'
5332 -5334 5335 0
-5335 5334 0
-5335 -5332 0
c Var 'aux1151' order represents '3' with '5336'
-5334 5336 0
c Var 'aux1151' direct represents '3' with '5337'
5334 -5336 5337 0
-5337 5336 0
-5337 -5334 0
c Var 'aux1151' direct represents '4' with '-5336'
5331 5333 5335 5337 -5336 0
c Encoding variable: aux1152 with domain: int(0..2) (representing constraint ((x_00005_00001=8) + (x_00005_00009=8)))
c Both direct and order encoding.
c Var 'aux1152' order represents '0' with '5338'
c Var 'aux1152' direct represents '0' with '5338'
c Var 'aux1152' order represents '1' with '5339'
-5338 5339 0
c Var 'aux1152' direct represents '1' with '5340'
5338 -5339 5340 0
-5340 5339 0
-5340 -5338 0
c Var 'aux1152' direct represents '2' with '-5339'
5338 5340 -5339 0
c Encoding variable: aux1153 with domain: int(0..2) (representing constraint ((x_00005_00008=8) + (x_00005_00002=8)))
c Both direct and order encoding.
c Var 'aux1153' order represents '0' with '5341'
c Var 'aux1153' direct represents '0' with '5341'
c Var 'aux1153' order represents '1' with '5342'
-5341 5342 0
c Var 'aux1153' direct represents '1' with '5343'
5341 -5342 5343 0
-5343 5342 0
-5343 -5341 0
c Var 'aux1153' direct represents '2' with '-5342'
5341 5343 -5342 0
c Encoding variable: aux1154 with domain: int(0..2) (representing constraint ((x_00005_00007=8) + (x_00005_00004=8)))
c Both direct and order encoding.
c Var 'aux1154' order represents '0' with '5344'
c Var 'aux1154' direct represents '0' with '5344'
c Var 'aux1154' order represents '1' with '5345'
-5344 5345 0
c Var 'aux1154' direct represents '1' with '5346'
5344 -5345 5346 0
-5346 5345 0
-5346 -5344 0
c Var 'aux1154' direct represents '2' with '-5345'
5344 5346 -5345 0
c Encoding variable: aux1155 with domain: int(0..2) (representing constraint ((x_00005_00006=8) + (x_00005_00005=8)))
c Both direct and order encoding.
c Var 'aux1155' order represents '0' with '5347'
c Var 'aux1155' direct represents '0' with '5347'
c Var 'aux1155' order represents '1' with '5348'
-5347 5348 0
c Var 'aux1155' direct represents '1' with '5349'
5347 -5348 5349 0
-5349 5348 0
-5349 -5347 0
c Var 'aux1155' direct represents '2' with '-5348'
5347 5349 -5348 0
c Encoding variable: aux1156 with domain: int(0..3) (representing constraint ((x_00005_00003=8) + aux1155))
c Both direct and order encoding.
c Var 'aux1156' order represents '0' with '5350'
c Var 'aux1156' direct represents '0' with '5350'
c Var 'aux1156' order represents '1' with '5351'
-5350 5351 0
c Var 'aux1156' direct represents '1' with '5352'
5350 -5351 5352 0
-5352 5351 0
-5352 -5350 0
c Var 'aux1156' order represents '2' with '5353'
-5351 5353 0
c Var 'aux1156' direct represents '2' with '5354'
5351 -5353 5354 0
-5354 5353 0
-5354 -5351 0
c Var 'aux1156' direct represents '3' with '-5353'
5350 5352 5354 -5353 0
c Encoding variable: aux1157 with domain: int(0..4) (representing constraint (aux1152 + aux1154))
c Both direct and order encoding.
c Var 'aux1157' order represents '0' with '5355'
c Var 'aux1157' direct represents '0' with '5355'
c Var 'aux1157' order represents '1' with '5356'
-5355 5356 0
c Var 'aux1157' direct represents '1' with '5357'
5355 -5356 5357 0
-5357 5356 0
-5357 -5355 0
c Var 'aux1157' order represents '2' with '5358'
-5356 5358 0
c Var 'aux1157' direct represents '2' with '5359'
5356 -5358 5359 0
-5359 5358 0
-5359 -5356 0
c Var 'aux1157' order represents '3' with '5360'
-5358 5360 0
c Var 'aux1157' direct represents '3' with '5361'
5358 -5360 5361 0
-5361 5360 0
-5361 -5358 0
c Var 'aux1157' direct represents '4' with '-5360'
5355 5357 5359 5361 -5360 0
c Encoding variable: aux1158 with domain: int(0..2) (representing constraint ((x_00005_00001=9) + (x_00005_00009=9)))
c Both direct and order encoding.
c Var 'aux1158' order represents '0' with '5362'
c Var 'aux1158' direct represents '0' with '5362'
c Var 'aux1158' order represents '1' with '5363'
-5362 5363 0
c Var 'aux1158' direct represents '1' with '5364'
5362 -5363 5364 0
-5364 5363 0
-5364 -5362 0
c Var 'aux1158' direct represents '2' with '-5363'
5362 5364 -5363 0
c Encoding variable: aux1159 with domain: int(0..2) (representing constraint ((x_00005_00008=9) + (x_00005_00002=9)))
c Both direct and order encoding.
c Var 'aux1159' order represents '0' with '5365'
c Var 'aux1159' direct represents '0' with '5365'
c Var 'aux1159' order represents '1' with '5366'
-5365 5366 0
c Var 'aux1159' direct represents '1' with '5367'
5365 -5366 5367 0
-5367 5366 0
-5367 -5365 0
c Var 'aux1159' direct represents '2' with '-5366'
5365 5367 -5366 0
c Encoding variable: aux1160 with domain: int(0..2) (representing constraint ((x_00005_00007=9) + (x_00005_00004=9)))
c Both direct and order encoding.
c Var 'aux1160' order represents '0' with '5368'
c Var 'aux1160' direct represents '0' with '5368'
c Var 'aux1160' order represents '1' with '5369'
-5368 5369 0
c Var 'aux1160' direct represents '1' with '5370'
5368 -5369 5370 0
-5370 5369 0
-5370 -5368 0
c Var 'aux1160' direct represents '2' with '-5369'
5368 5370 -5369 0
c Encoding variable: aux1161 with domain: int(0..2) (representing constraint ((x_00005_00006=9) + (x_00005_00005=9)))
c Both direct and order encoding.
c Var 'aux1161' order represents '0' with '5371'
c Var 'aux1161' direct represents '0' with '5371'
c Var 'aux1161' order represents '1' with '5372'
-5371 5372 0
c Var 'aux1161' direct represents '1' with '5373'
5371 -5372 5373 0
-5373 5372 0
-5373 -5371 0
c Var 'aux1161' direct represents '2' with '-5372'
5371 5373 -5372 0
c Encoding variable: aux1162 with domain: int(0..3) (representing constraint ((x_00005_00003=9) + aux1161))
c Both direct and order encoding.
c Var 'aux1162' order represents '0' with '5374'
c Var 'aux1162' direct represents '0' with '5374'
c Var 'aux1162' order represents '1' with '5375'
-5374 5375 0
c Var 'aux1162' direct represents '1' with '5376'
5374 -5375 5376 0
-5376 5375 0
-5376 -5374 0
c Var 'aux1162' order represents '2' with '5377'
-5375 5377 0
c Var 'aux1162' direct represents '2' with '5378'
5375 -5377 5378 0
-5378 5377 0
-5378 -5375 0
c Var 'aux1162' direct represents '3' with '-5377'
5374 5376 5378 -5377 0
c Encoding variable: aux1163 with domain: int(0..4) (representing constraint (aux1158 + aux1160))
c Both direct and order encoding.
c Var 'aux1163' order represents '0' with '5379'
c Var 'aux1163' direct represents '0' with '5379'
c Var 'aux1163' order represents '1' with '5380'
-5379 5380 0
c Var 'aux1163' direct represents '1' with '5381'
5379 -5380 5381 0
-5381 5380 0
-5381 -5379 0
c Var 'aux1163' order represents '2' with '5382'
-5380 5382 0
c Var 'aux1163' direct represents '2' with '5383'
5380 -5382 5383 0
-5383 5382 0
-5383 -5380 0
c Var 'aux1163' order represents '3' with '5384'
-5382 5384 0
c Var 'aux1163' direct represents '3' with '5385'
5382 -5384 5385 0
-5385 5384 0
-5385 -5382 0
c Var 'aux1163' direct represents '4' with '-5384'
5379 5381 5383 5385 -5384 0
c Encoding variable: aux1164 with domain: int(0..2) (representing constraint ((x_00006_00001=1) + (x_00006_00009=1)))
c Both direct and order encoding.
c Var 'aux1164' order represents '0' with '5386'
c Var 'aux1164' direct represents '0' with '5386'
c Var 'aux1164' order represents '1' with '5387'
-5386 5387 0
c Var 'aux1164' direct represents '1' with '5388'
5386 -5387 5388 0
-5388 5387 0
-5388 -5386 0
c Var 'aux1164' direct represents '2' with '-5387'
5386 5388 -5387 0
c Encoding variable: aux1165 with domain: int(0..2) (representing constraint ((x_00006_00008=1) + (x_00006_00002=1)))
c Both direct and order encoding.
c Var 'aux1165' order represents '0' with '5389'
c Var 'aux1165' direct represents '0' with '5389'
c Var 'aux1165' order represents '1' with '5390'
-5389 5390 0
c Var 'aux1165' direct represents '1' with '5391'
5389 -5390 5391 0
-5391 5390 0
-5391 -5389 0
c Var 'aux1165' direct represents '2' with '-5390'
5389 5391 -5390 0
c Encoding variable: aux1166 with domain: int(0..2) (representing constraint ((x_00006_00007=1) + (x_00006_00004=1)))
c Both direct and order encoding.
c Var 'aux1166' order represents '0' with '5392'
c Var 'aux1166' direct represents '0' with '5392'
c Var 'aux1166' order represents '1' with '5393'
-5392 5393 0
c Var 'aux1166' direct represents '1' with '5394'
5392 -5393 5394 0
-5394 5393 0
-5394 -5392 0
c Var 'aux1166' direct represents '2' with '-5393'
5392 5394 -5393 0
c Encoding variable: aux1167 with domain: int(0..2) (representing constraint ((x_00006_00006=1) + (x_00006_00005=1)))
c Both direct and order encoding.
c Var 'aux1167' order represents '0' with '5395'
c Var 'aux1167' direct represents '0' with '5395'
c Var 'aux1167' order represents '1' with '5396'
-5395 5396 0
c Var 'aux1167' direct represents '1' with '5397'
5395 -5396 5397 0
-5397 5396 0
-5397 -5395 0
c Var 'aux1167' direct represents '2' with '-5396'
5395 5397 -5396 0
c Encoding variable: aux1168 with domain: int(0..3) (representing constraint ((x_00006_00003=1) + aux1167))
c Both direct and order encoding.
c Var 'aux1168' order represents '0' with '5398'
c Var 'aux1168' direct represents '0' with '5398'
c Var 'aux1168' order represents '1' with '5399'
-5398 5399 0
c Var 'aux1168' direct represents '1' with '5400'
5398 -5399 5400 0
-5400 5399 0
-5400 -5398 0
c Var 'aux1168' order represents '2' with '5401'
-5399 5401 0
c Var 'aux1168' direct represents '2' with '5402'
5399 -5401 5402 0
-5402 5401 0
-5402 -5399 0
c Var 'aux1168' direct represents '3' with '-5401'
5398 5400 5402 -5401 0
c Encoding variable: aux1169 with domain: int(0..4) (representing constraint (aux1164 + aux1166))
c Both direct and order encoding.
c Var 'aux1169' order represents '0' with '5403'
c Var 'aux1169' direct represents '0' with '5403'
c Var 'aux1169' order represents '1' with '5404'
-5403 5404 0
c Var 'aux1169' direct represents '1' with '5405'
5403 -5404 5405 0
-5405 5404 0
-5405 -5403 0
c Var 'aux1169' order represents '2' with '5406'
-5404 5406 0
c Var 'aux1169' direct represents '2' with '5407'
5404 -5406 5407 0
-5407 5406 0
-5407 -5404 0
c Var 'aux1169' order represents '3' with '5408'
-5406 5408 0
c Var 'aux1169' direct represents '3' with '5409'
5406 -5408 5409 0
-5409 5408 0
-5409 -5406 0
c Var 'aux1169' direct represents '4' with '-5408'
5403 5405 5407 5409 -5408 0
c Encoding variable: aux1170 with domain: int(0..2) (representing constraint ((x_00006_00001=2) + (x_00006_00009=2)))
c Both direct and order encoding.
c Var 'aux1170' order represents '0' with '5410'
c Var 'aux1170' direct represents '0' with '5410'
c Var 'aux1170' order represents '1' with '5411'
-5410 5411 0
c Var 'aux1170' direct represents '1' with '5412'
5410 -5411 5412 0
-5412 5411 0
-5412 -5410 0
c Var 'aux1170' direct represents '2' with '-5411'
5410 5412 -5411 0
c Encoding variable: aux1171 with domain: int(0..2) (representing constraint ((x_00006_00008=2) + (x_00006_00002=2)))
c Both direct and order encoding.
c Var 'aux1171' order represents '0' with '5413'
c Var 'aux1171' direct represents '0' with '5413'
c Var 'aux1171' order represents '1' with '5414'
-5413 5414 0
c Var 'aux1171' direct represents '1' with '5415'
5413 -5414 5415 0
-5415 5414 0
-5415 -5413 0
c Var 'aux1171' direct represents '2' with '-5414'
5413 5415 -5414 0
c Encoding variable: aux1172 with domain: int(0..2) (representing constraint ((x_00006_00007=2) + (x_00006_00004=2)))
c Both direct and order encoding.
c Var 'aux1172' order represents '0' with '5416'
c Var 'aux1172' direct represents '0' with '5416'
c Var 'aux1172' order represents '1' with '5417'
-5416 5417 0
c Var 'aux1172' direct represents '1' with '5418'
5416 -5417 5418 0
-5418 5417 0
-5418 -5416 0
c Var 'aux1172' direct represents '2' with '-5417'
5416 5418 -5417 0
c Encoding variable: aux1173 with domain: int(0..2) (representing constraint ((x_00006_00006=2) + (x_00006_00005=2)))
c Both direct and order encoding.
c Var 'aux1173' order represents '0' with '5419'
c Var 'aux1173' direct represents '0' with '5419'
c Var 'aux1173' order represents '1' with '5420'
-5419 5420 0
c Var 'aux1173' direct represents '1' with '5421'
5419 -5420 5421 0
-5421 5420 0
-5421 -5419 0
c Var 'aux1173' direct represents '2' with '-5420'
5419 5421 -5420 0
c Encoding variable: aux1174 with domain: int(0..3) (representing constraint ((x_00006_00003=2) + aux1173))
c Both direct and order encoding.
c Var 'aux1174' order represents '0' with '5422'
c Var 'aux1174' direct represents '0' with '5422'
c Var 'aux1174' order represents '1' with '5423'
-5422 5423 0
c Var 'aux1174' direct represents '1' with '5424'
5422 -5423 5424 0
-5424 5423 0
-5424 -5422 0
c Var 'aux1174' order represents '2' with '5425'
-5423 5425 0
c Var 'aux1174' direct represents '2' with '5426'
5423 -5425 5426 0
-5426 5425 0
-5426 -5423 0
c Var 'aux1174' direct represents '3' with '-5425'
5422 5424 5426 -5425 0
c Encoding variable: aux1175 with domain: int(0..4) (representing constraint (aux1170 + aux1172))
c Both direct and order encoding.
c Var 'aux1175' order represents '0' with '5427'
c Var 'aux1175' direct represents '0' with '5427'
c Var 'aux1175' order represents '1' with '5428'
-5427 5428 0
c Var 'aux1175' direct represents '1' with '5429'
5427 -5428 5429 0
-5429 5428 0
-5429 -5427 0
c Var 'aux1175' order represents '2' with '5430'
-5428 5430 0
c Var 'aux1175' direct represents '2' with '5431'
5428 -5430 5431 0
-5431 5430 0
-5431 -5428 0
c Var 'aux1175' order represents '3' with '5432'
-5430 5432 0
c Var 'aux1175' direct represents '3' with '5433'
5430 -5432 5433 0
-5433 5432 0
-5433 -5430 0
c Var 'aux1175' direct represents '4' with '-5432'
5427 5429 5431 5433 -5432 0
c Encoding variable: aux1176 with domain: int(0..2) (representing constraint ((x_00006_00001=3) + (x_00006_00009=3)))
c Both direct and order encoding.
c Var 'aux1176' order represents '0' with '5434'
c Var 'aux1176' direct represents '0' with '5434'
c Var 'aux1176' order represents '1' with '5435'
-5434 5435 0
c Var 'aux1176' direct represents '1' with '5436'
5434 -5435 5436 0
-5436 5435 0
-5436 -5434 0
c Var 'aux1176' direct represents '2' with '-5435'
5434 5436 -5435 0
c Encoding variable: aux1177 with domain: int(0..2) (representing constraint ((x_00006_00008=3) + (x_00006_00002=3)))
c Both direct and order encoding.
c Var 'aux1177' order represents '0' with '5437'
c Var 'aux1177' direct represents '0' with '5437'
c Var 'aux1177' order represents '1' with '5438'
-5437 5438 0
c Var 'aux1177' direct represents '1' with '5439'
5437 -5438 5439 0
-5439 5438 0
-5439 -5437 0
c Var 'aux1177' direct represents '2' with '-5438'
5437 5439 -5438 0
c Encoding variable: aux1178 with domain: int(0..2) (representing constraint ((x_00006_00007=3) + (x_00006_00004=3)))
c Both direct and order encoding.
c Var 'aux1178' order represents '0' with '5440'
c Var 'aux1178' direct represents '0' with '5440'
c Var 'aux1178' order represents '1' with '5441'
-5440 5441 0
c Var 'aux1178' direct represents '1' with '5442'
5440 -5441 5442 0
-5442 5441 0
-5442 -5440 0
c Var 'aux1178' direct represents '2' with '-5441'
5440 5442 -5441 0
c Encoding variable: aux1179 with domain: int(0..2) (representing constraint ((x_00006_00006=3) + (x_00006_00005=3)))
c Both direct and order encoding.
c Var 'aux1179' order represents '0' with '5443'
c Var 'aux1179' direct represents '0' with '5443'
c Var 'aux1179' order represents '1' with '5444'
-5443 5444 0
c Var 'aux1179' direct represents '1' with '5445'
5443 -5444 5445 0
-5445 5444 0
-5445 -5443 0
c Var 'aux1179' direct represents '2' with '-5444'
5443 5445 -5444 0
c Encoding variable: aux1180 with domain: int(0..3) (representing constraint ((x_00006_00003=3) + aux1179))
c Both direct and order encoding.
c Var 'aux1180' order represents '0' with '5446'
c Var 'aux1180' direct represents '0' with '5446'
c Var 'aux1180' order represents '1' with '5447'
-5446 5447 0
c Var 'aux1180' direct represents '1' with '5448'
5446 -5447 5448 0
-5448 5447 0
-5448 -5446 0
c Var 'aux1180' order represents '2' with '5449'
-5447 5449 0
c Var 'aux1180' direct represents '2' with '5450'
5447 -5449 5450 0
-5450 5449 0
-5450 -5447 0
c Var 'aux1180' direct represents '3' with '-5449'
5446 5448 5450 -5449 0
c Encoding variable: aux1181 with domain: int(0..4) (representing constraint (aux1176 + aux1178))
c Both direct and order encoding.
c Var 'aux1181' order represents '0' with '5451'
c Var 'aux1181' direct represents '0' with '5451'
c Var 'aux1181' order represents '1' with '5452'
-5451 5452 0
c Var 'aux1181' direct represents '1' with '5453'
5451 -5452 5453 0
-5453 5452 0
-5453 -5451 0
c Var 'aux1181' order represents '2' with '5454'
-5452 5454 0
c Var 'aux1181' direct represents '2' with '5455'
5452 -5454 5455 0
-5455 5454 0
-5455 -5452 0
c Var 'aux1181' order represents '3' with '5456'
-5454 5456 0
c Var 'aux1181' direct represents '3' with '5457'
5454 -5456 5457 0
-5457 5456 0
-5457 -5454 0
c Var 'aux1181' direct represents '4' with '-5456'
5451 5453 5455 5457 -5456 0
c Encoding variable: aux1182 with domain: int(0..2) (representing constraint ((x_00006_00001=4) + (x_00006_00009=4)))
c Both direct and order encoding.
c Var 'aux1182' order represents '0' with '5458'
c Var 'aux1182' direct represents '0' with '5458'
c Var 'aux1182' order represents '1' with '5459'
-5458 5459 0
c Var 'aux1182' direct represents '1' with '5460'
5458 -5459 5460 0
-5460 5459 0
-5460 -5458 0
c Var 'aux1182' direct represents '2' with '-5459'
5458 5460 -5459 0
c Encoding variable: aux1183 with domain: int(0..2) (representing constraint ((x_00006_00008=4) + (x_00006_00002=4)))
c Both direct and order encoding.
c Var 'aux1183' order represents '0' with '5461'
c Var 'aux1183' direct represents '0' with '5461'
c Var 'aux1183' order represents '1' with '5462'
-5461 5462 0
c Var 'aux1183' direct represents '1' with '5463'
5461 -5462 5463 0
-5463 5462 0
-5463 -5461 0
c Var 'aux1183' direct represents '2' with '-5462'
5461 5463 -5462 0
c Encoding variable: aux1184 with domain: int(0..2) (representing constraint ((x_00006_00007=4) + (x_00006_00004=4)))
c Both direct and order encoding.
c Var 'aux1184' order represents '0' with '5464'
c Var 'aux1184' direct represents '0' with '5464'
c Var 'aux1184' order represents '1' with '5465'
-5464 5465 0
c Var 'aux1184' direct represents '1' with '5466'
5464 -5465 5466 0
-5466 5465 0
-5466 -5464 0
c Var 'aux1184' direct represents '2' with '-5465'
5464 5466 -5465 0
c Encoding variable: aux1185 with domain: int(0..2) (representing constraint ((x_00006_00006=4) + (x_00006_00005=4)))
c Both direct and order encoding.
c Var 'aux1185' order represents '0' with '5467'
c Var 'aux1185' direct represents '0' with '5467'
c Var 'aux1185' order represents '1' with '5468'
-5467 5468 0
c Var 'aux1185' direct represents '1' with '5469'
5467 -5468 5469 0
-5469 5468 0
-5469 -5467 0
c Var 'aux1185' direct represents '2' with '-5468'
5467 5469 -5468 0
c Encoding variable: aux1186 with domain: int(0..3) (representing constraint ((x_00006_00003=4) + aux1185))
c Both direct and order encoding.
c Var 'aux1186' order represents '0' with '5470'
c Var 'aux1186' direct represents '0' with '5470'
c Var 'aux1186' order represents '1' with '5471'
-5470 5471 0
c Var 'aux1186' direct represents '1' with '5472'
5470 -5471 5472 0
-5472 5471 0
-5472 -5470 0
c Var 'aux1186' order represents '2' with '5473'
-5471 5473 0
c Var 'aux1186' direct represents '2' with '5474'
5471 -5473 5474 0
-5474 5473 0
-5474 -5471 0
c Var 'aux1186' direct represents '3' with '-5473'
5470 5472 5474 -5473 0
c Encoding variable: aux1187 with domain: int(0..4) (representing constraint (aux1182 + aux1184))
c Both direct and order encoding.
c Var 'aux1187' order represents '0' with '5475'
c Var 'aux1187' direct represents '0' with '5475'
c Var 'aux1187' order represents '1' with '5476'
-5475 5476 0
c Var 'aux1187' direct represents '1' with '5477'
5475 -5476 5477 0
-5477 5476 0
-5477 -5475 0
c Var 'aux1187' order represents '2' with '5478'
-5476 5478 0
c Var 'aux1187' direct represents '2' with '5479'
5476 -5478 5479 0
-5479 5478 0
-5479 -5476 0
c Var 'aux1187' order represents '3' with '5480'
-5478 5480 0
c Var 'aux1187' direct represents '3' with '5481'
5478 -5480 5481 0
-5481 5480 0
-5481 -5478 0
c Var 'aux1187' direct represents '4' with '-5480'
5475 5477 5479 5481 -5480 0
c Encoding variable: aux1188 with domain: int(0..2) (representing constraint ((x_00006_00001=5) + (x_00006_00009=5)))
c Both direct and order encoding.
c Var 'aux1188' order represents '0' with '5482'
c Var 'aux1188' direct represents '0' with '5482'
c Var 'aux1188' order represents '1' with '5483'
-5482 5483 0
c Var 'aux1188' direct represents '1' with '5484'
5482 -5483 5484 0
-5484 5483 0
-5484 -5482 0
c Var 'aux1188' direct represents '2' with '-5483'
5482 5484 -5483 0
c Encoding variable: aux1189 with domain: int(0..2) (representing constraint ((x_00006_00008=5) + (x_00006_00002=5)))
c Both direct and order encoding.
c Var 'aux1189' order represents '0' with '5485'
c Var 'aux1189' direct represents '0' with '5485'
c Var 'aux1189' order represents '1' with '5486'
-5485 5486 0
c Var 'aux1189' direct represents '1' with '5487'
5485 -5486 5487 0
-5487 5486 0
-5487 -5485 0
c Var 'aux1189' direct represents '2' with '-5486'
5485 5487 -5486 0
c Encoding variable: aux1190 with domain: int(0..2) (representing constraint ((x_00006_00007=5) + (x_00006_00004=5)))
c Both direct and order encoding.
c Var 'aux1190' order represents '0' with '5488'
c Var 'aux1190' direct represents '0' with '5488'
c Var 'aux1190' order represents '1' with '5489'
-5488 5489 0
c Var 'aux1190' direct represents '1' with '5490'
5488 -5489 5490 0
-5490 5489 0
-5490 -5488 0
c Var 'aux1190' direct represents '2' with '-5489'
5488 5490 -5489 0
c Encoding variable: aux1191 with domain: int(0..2) (representing constraint ((x_00006_00006=5) + (x_00006_00005=5)))
c Both direct and order encoding.
c Var 'aux1191' order represents '0' with '5491'
c Var 'aux1191' direct represents '0' with '5491'
c Var 'aux1191' order represents '1' with '5492'
-5491 5492 0
c Var 'aux1191' direct represents '1' with '5493'
5491 -5492 5493 0
-5493 5492 0
-5493 -5491 0
c Var 'aux1191' direct represents '2' with '-5492'
5491 5493 -5492 0
c Encoding variable: aux1192 with domain: int(0..3) (representing constraint ((x_00006_00003=5) + aux1191))
c Both direct and order encoding.
c Var 'aux1192' order represents '0' with '5494'
c Var 'aux1192' direct represents '0' with '5494'
c Var 'aux1192' order represents '1' with '5495'
-5494 5495 0
c Var 'aux1192' direct represents '1' with '5496'
5494 -5495 5496 0
-5496 5495 0
-5496 -5494 0
c Var 'aux1192' order represents '2' with '5497'
-5495 5497 0
c Var 'aux1192' direct represents '2' with '5498'
5495 -5497 5498 0
-5498 5497 0
-5498 -5495 0
c Var 'aux1192' direct represents '3' with '-5497'
5494 5496 5498 -5497 0
c Encoding variable: aux1193 with domain: int(0..4) (representing constraint (aux1188 + aux1190))
c Both direct and order encoding.
c Var 'aux1193' order represents '0' with '5499'
c Var 'aux1193' direct represents '0' with '5499'
c Var 'aux1193' order represents '1' with '5500'
-5499 5500 0
c Var 'aux1193' direct represents '1' with '5501'
5499 -5500 5501 0
-5501 5500 0
-5501 -5499 0
c Var 'aux1193' order represents '2' with '5502'
-5500 5502 0
c Var 'aux1193' direct represents '2' with '5503'
5500 -5502 5503 0
-5503 5502 0
-5503 -5500 0
c Var 'aux1193' order represents '3' with '5504'
-5502 5504 0
c Var 'aux1193' direct represents '3' with '5505'
5502 -5504 5505 0
-5505 5504 0
-5505 -5502 0
c Var 'aux1193' direct represents '4' with '-5504'
5499 5501 5503 5505 -5504 0
c Encoding variable: aux1194 with domain: int(0..2) (representing constraint ((x_00006_00001=6) + (x_00006_00009=6)))
c Both direct and order encoding.
c Var 'aux1194' order represents '0' with '5506'
c Var 'aux1194' direct represents '0' with '5506'
c Var 'aux1194' order represents '1' with '5507'
-5506 5507 0
c Var 'aux1194' direct represents '1' with '5508'
5506 -5507 5508 0
-5508 5507 0
-5508 -5506 0
c Var 'aux1194' direct represents '2' with '-5507'
5506 5508 -5507 0
c Encoding variable: aux1195 with domain: int(0..2) (representing constraint ((x_00006_00008=6) + (x_00006_00002=6)))
c Both direct and order encoding.
c Var 'aux1195' order represents '0' with '5509'
c Var 'aux1195' direct represents '0' with '5509'
c Var 'aux1195' order represents '1' with '5510'
-5509 5510 0
c Var 'aux1195' direct represents '1' with '5511'
5509 -5510 5511 0
-5511 5510 0
-5511 -5509 0
c Var 'aux1195' direct represents '2' with '-5510'
5509 5511 -5510 0
c Encoding variable: aux1196 with domain: int(0..2) (representing constraint ((x_00006_00007=6) + (x_00006_00004=6)))
c Both direct and order encoding.
c Var 'aux1196' order represents '0' with '5512'
c Var 'aux1196' direct represents '0' with '5512'
c Var 'aux1196' order represents '1' with '5513'
-5512 5513 0
c Var 'aux1196' direct represents '1' with '5514'
5512 -5513 5514 0
-5514 5513 0
-5514 -5512 0
c Var 'aux1196' direct represents '2' with '-5513'
5512 5514 -5513 0
c Encoding variable: aux1197 with domain: int(0..2) (representing constraint ((x_00006_00006=6) + (x_00006_00005=6)))
c Both direct and order encoding.
c Var 'aux1197' order represents '0' with '5515'
c Var 'aux1197' direct represents '0' with '5515'
c Var 'aux1197' order represents '1' with '5516'
-5515 5516 0
c Var 'aux1197' direct represents '1' with '5517'
5515 -5516 5517 0
-5517 5516 0
-5517 -5515 0
c Var 'aux1197' direct represents '2' with '-5516'
5515 5517 -5516 0
c Encoding variable: aux1198 with domain: int(0..3) (representing constraint ((x_00006_00003=6) + aux1197))
c Both direct and order encoding.
c Var 'aux1198' order represents '0' with '5518'
c Var 'aux1198' direct represents '0' with '5518'
c Var 'aux1198' order represents '1' with '5519'
-5518 5519 0
c Var 'aux1198' direct represents '1' with '5520'
5518 -5519 5520 0
-5520 5519 0
-5520 -5518 0
c Var 'aux1198' order represents '2' with '5521'
-5519 5521 0
c Var 'aux1198' direct represents '2' with '5522'
5519 -5521 5522 0
-5522 5521 0
-5522 -5519 0
c Var 'aux1198' direct represents '3' with '-5521'
5518 5520 5522 -5521 0
c Encoding variable: aux1199 with domain: int(0..4) (representing constraint (aux1194 + aux1196))
c Both direct and order encoding.
c Var 'aux1199' order represents '0' with '5523'
c Var 'aux1199' direct represents '0' with '5523'
c Var 'aux1199' order represents '1' with '5524'
-5523 5524 0
c Var 'aux1199' direct represents '1' with '5525'
5523 -5524 5525 0
-5525 5524 0
-5525 -5523 0
c Var 'aux1199' order represents '2' with '5526'
-5524 5526 0
c Var 'aux1199' direct represents '2' with '5527'
5524 -5526 5527 0
-5527 5526 0
-5527 -5524 0
c Var 'aux1199' order represents '3' with '5528'
-5526 5528 0
c Var 'aux1199' direct represents '3' with '5529'
5526 -5528 5529 0
-5529 5528 0
-5529 -5526 0
c Var 'aux1199' direct represents '4' with '-5528'
5523 5525 5527 5529 -5528 0
c Encoding variable: aux1200 with domain: int(0..2) (representing constraint ((x_00006_00001=7) + (x_00006_00009=7)))
c Both direct and order encoding.
c Var 'aux1200' order represents '0' with '5530'
c Var 'aux1200' direct represents '0' with '5530'
c Var 'aux1200' order represents '1' with '5531'
-5530 5531 0
c Var 'aux1200' direct represents '1' with '5532'
5530 -5531 5532 0
-5532 5531 0
-5532 -5530 0
c Var 'aux1200' direct represents '2' with '-5531'
5530 5532 -5531 0
c Encoding variable: aux1201 with domain: int(0..2) (representing constraint ((x_00006_00008=7) + (x_00006_00002=7)))
c Both direct and order encoding.
c Var 'aux1201' order represents '0' with '5533'
c Var 'aux1201' direct represents '0' with '5533'
c Var 'aux1201' order represents '1' with '5534'
-5533 5534 0
c Var 'aux1201' direct represents '1' with '5535'
5533 -5534 5535 0
-5535 5534 0
-5535 -5533 0
c Var 'aux1201' direct represents '2' with '-5534'
5533 5535 -5534 0
c Encoding variable: aux1202 with domain: int(0..2) (representing constraint ((x_00006_00007=7) + (x_00006_00004=7)))
c Both direct and order encoding.
c Var 'aux1202' order represents '0' with '5536'
c Var 'aux1202' direct represents '0' with '5536'
c Var 'aux1202' order represents '1' with '5537'
-5536 5537 0
c Var 'aux1202' direct represents '1' with '5538'
5536 -5537 5538 0
-5538 5537 0
-5538 -5536 0
c Var 'aux1202' direct represents '2' with '-5537'
5536 5538 -5537 0
c Encoding variable: aux1203 with domain: int(0..2) (representing constraint ((x_00006_00006=7) + (x_00006_00005=7)))
c Both direct and order encoding.
c Var 'aux1203' order represents '0' with '5539'
c Var 'aux1203' direct represents '0' with '5539'
c Var 'aux1203' order represents '1' with '5540'
-5539 5540 0
c Var 'aux1203' direct represents '1' with '5541'
5539 -5540 5541 0
-5541 5540 0
-5541 -5539 0
c Var 'aux1203' direct represents '2' with '-5540'
5539 5541 -5540 0
c Encoding variable: aux1204 with domain: int(0..3) (representing constraint ((x_00006_00003=7) + aux1203))
c Both direct and order encoding.
c Var 'aux1204' order represents '0' with '5542'
c Var 'aux1204' direct represents '0' with '5542'
c Var 'aux1204' order represents '1' with '5543'
-5542 5543 0
c Var 'aux1204' direct represents '1' with '5544'
5542 -5543 5544 0
-5544 5543 0
-5544 -5542 0
c Var 'aux1204' order represents '2' with '5545'
-5543 5545 0
c Var 'aux1204' direct represents '2' with '5546'
5543 -5545 5546 0
-5546 5545 0
-5546 -5543 0
c Var 'aux1204' direct represents '3' with '-5545'
5542 5544 5546 -5545 0
c Encoding variable: aux1205 with domain: int(0..4) (representing constraint (aux1200 + aux1202))
c Both direct and order encoding.
c Var 'aux1205' order represents '0' with '5547'
c Var 'aux1205' direct represents '0' with '5547'
c Var 'aux1205' order represents '1' with '5548'
-5547 5548 0
c Var 'aux1205' direct represents '1' with '5549'
5547 -5548 5549 0
-5549 5548 0
-5549 -5547 0
c Var 'aux1205' order represents '2' with '5550'
-5548 5550 0
c Var 'aux1205' direct represents '2' with '5551'
5548 -5550 5551 0
-5551 5550 0
-5551 -5548 0
c Var 'aux1205' order represents '3' with '5552'
-5550 5552 0
c Var 'aux1205' direct represents '3' with '5553'
5550 -5552 5553 0
-5553 5552 0
-5553 -5550 0
c Var 'aux1205' direct represents '4' with '-5552'
5547 5549 5551 5553 -5552 0
c Encoding variable: aux1206 with domain: int(0..2) (representing constraint ((x_00006_00001=8) + (x_00006_00009=8)))
c Both direct and order encoding.
c Var 'aux1206' order represents '0' with '5554'
c Var 'aux1206' direct represents '0' with '5554'
c Var 'aux1206' order represents '1' with '5555'
-5554 5555 0
c Var 'aux1206' direct represents '1' with '5556'
5554 -5555 5556 0
-5556 5555 0
-5556 -5554 0
c Var 'aux1206' direct represents '2' with '-5555'
5554 5556 -5555 0
c Encoding variable: aux1207 with domain: int(0..2) (representing constraint ((x_00006_00008=8) + (x_00006_00002=8)))
c Both direct and order encoding.
c Var 'aux1207' order represents '0' with '5557'
c Var 'aux1207' direct represents '0' with '5557'
c Var 'aux1207' order represents '1' with '5558'
-5557 5558 0
c Var 'aux1207' direct represents '1' with '5559'
5557 -5558 5559 0
-5559 5558 0
-5559 -5557 0
c Var 'aux1207' direct represents '2' with '-5558'
5557 5559 -5558 0
c Encoding variable: aux1208 with domain: int(0..2) (representing constraint ((x_00006_00007=8) + (x_00006_00004=8)))
c Both direct and order encoding.
c Var 'aux1208' order represents '0' with '5560'
c Var 'aux1208' direct represents '0' with '5560'
c Var 'aux1208' order represents '1' with '5561'
-5560 5561 0
c Var 'aux1208' direct represents '1' with '5562'
5560 -5561 5562 0
-5562 5561 0
-5562 -5560 0
c Var 'aux1208' direct represents '2' with '-5561'
5560 5562 -5561 0
c Encoding variable: aux1209 with domain: int(0..2) (representing constraint ((x_00006_00006=8) + (x_00006_00005=8)))
c Both direct and order encoding.
c Var 'aux1209' order represents '0' with '5563'
c Var 'aux1209' direct represents '0' with '5563'
c Var 'aux1209' order represents '1' with '5564'
-5563 5564 0
c Var 'aux1209' direct represents '1' with '5565'
5563 -5564 5565 0
-5565 5564 0
-5565 -5563 0
c Var 'aux1209' direct represents '2' with '-5564'
5563 5565 -5564 0
c Encoding variable: aux1210 with domain: int(0..3) (representing constraint ((x_00006_00003=8) + aux1209))
c Both direct and order encoding.
c Var 'aux1210' order represents '0' with '5566'
c Var 'aux1210' direct represents '0' with '5566'
c Var 'aux1210' order represents '1' with '5567'
-5566 5567 0
c Var 'aux1210' direct represents '1' with '5568'
5566 -5567 5568 0
-5568 5567 0
-5568 -5566 0
c Var 'aux1210' order represents '2' with '5569'
-5567 5569 0
c Var 'aux1210' direct represents '2' with '5570'
5567 -5569 5570 0
-5570 5569 0
-5570 -5567 0
c Var 'aux1210' direct represents '3' with '-5569'
5566 5568 5570 -5569 0
c Encoding variable: aux1211 with domain: int(0..4) (representing constraint (aux1206 + aux1208))
c Both direct and order encoding.
c Var 'aux1211' order represents '0' with '5571'
c Var 'aux1211' direct represents '0' with '5571'
c Var 'aux1211' order represents '1' with '5572'
-5571 5572 0
c Var 'aux1211' direct represents '1' with '5573'
5571 -5572 5573 0
-5573 5572 0
-5573 -5571 0
c Var 'aux1211' order represents '2' with '5574'
-5572 5574 0
c Var 'aux1211' direct represents '2' with '5575'
5572 -5574 5575 0
-5575 5574 0
-5575 -5572 0
c Var 'aux1211' order represents '3' with '5576'
-5574 5576 0
c Var 'aux1211' direct represents '3' with '5577'
5574 -5576 5577 0
-5577 5576 0
-5577 -5574 0
c Var 'aux1211' direct represents '4' with '-5576'
5571 5573 5575 5577 -5576 0
c Encoding variable: aux1212 with domain: int(0..2) (representing constraint ((x_00006_00001=9) + (x_00006_00009=9)))
c Both direct and order encoding.
c Var 'aux1212' order represents '0' with '5578'
c Var 'aux1212' direct represents '0' with '5578'
c Var 'aux1212' order represents '1' with '5579'
-5578 5579 0
c Var 'aux1212' direct represents '1' with '5580'
5578 -5579 5580 0
-5580 5579 0
-5580 -5578 0
c Var 'aux1212' direct represents '2' with '-5579'
5578 5580 -5579 0
c Encoding variable: aux1213 with domain: int(0..2) (representing constraint ((x_00006_00008=9) + (x_00006_00002=9)))
c Both direct and order encoding.
c Var 'aux1213' order represents '0' with '5581'
c Var 'aux1213' direct represents '0' with '5581'
c Var 'aux1213' order represents '1' with '5582'
-5581 5582 0
c Var 'aux1213' direct represents '1' with '5583'
5581 -5582 5583 0
-5583 5582 0
-5583 -5581 0
c Var 'aux1213' direct represents '2' with '-5582'
5581 5583 -5582 0
c Encoding variable: aux1214 with domain: int(0..2) (representing constraint ((x_00006_00007=9) + (x_00006_00004=9)))
c Both direct and order encoding.
c Var 'aux1214' order represents '0' with '5584'
c Var 'aux1214' direct represents '0' with '5584'
c Var 'aux1214' order represents '1' with '5585'
-5584 5585 0
c Var 'aux1214' direct represents '1' with '5586'
5584 -5585 5586 0
-5586 5585 0
-5586 -5584 0
c Var 'aux1214' direct represents '2' with '-5585'
5584 5586 -5585 0
c Encoding variable: aux1215 with domain: int(0..2) (representing constraint ((x_00006_00006=9) + (x_00006_00005=9)))
c Both direct and order encoding.
c Var 'aux1215' order represents '0' with '5587'
c Var 'aux1215' direct represents '0' with '5587'
c Var 'aux1215' order represents '1' with '5588'
-5587 5588 0
c Var 'aux1215' direct represents '1' with '5589'
5587 -5588 5589 0
-5589 5588 0
-5589 -5587 0
c Var 'aux1215' direct represents '2' with '-5588'
5587 5589 -5588 0
c Encoding variable: aux1216 with domain: int(0..3) (representing constraint ((x_00006_00003=9) + aux1215))
c Both direct and order encoding.
c Var 'aux1216' order represents '0' with '5590'
c Var 'aux1216' direct represents '0' with '5590'
c Var 'aux1216' order represents '1' with '5591'
-5590 5591 0
c Var 'aux1216' direct represents '1' with '5592'
5590 -5591 5592 0
-5592 5591 0
-5592 -5590 0
c Var 'aux1216' order represents '2' with '5593'
-5591 5593 0
c Var 'aux1216' direct represents '2' with '5594'
5591 -5593 5594 0
-5594 5593 0
-5594 -5591 0
c Var 'aux1216' direct represents '3' with '-5593'
5590 5592 5594 -5593 0
c Encoding variable: aux1217 with domain: int(0..4) (representing constraint (aux1212 + aux1214))
c Both direct and order encoding.
c Var 'aux1217' order represents '0' with '5595'
c Var 'aux1217' direct represents '0' with '5595'
c Var 'aux1217' order represents '1' with '5596'
-5595 5596 0
c Var 'aux1217' direct represents '1' with '5597'
5595 -5596 5597 0
-5597 5596 0
-5597 -5595 0
c Var 'aux1217' order represents '2' with '5598'
-5596 5598 0
c Var 'aux1217' direct represents '2' with '5599'
5596 -5598 5599 0
-5599 5598 0
-5599 -5596 0
c Var 'aux1217' order represents '3' with '5600'
-5598 5600 0
c Var 'aux1217' direct represents '3' with '5601'
5598 -5600 5601 0
-5601 5600 0
-5601 -5598 0
c Var 'aux1217' direct represents '4' with '-5600'
5595 5597 5599 5601 -5600 0
c Encoding variable: aux1218 with domain: int(0..2) (representing constraint ((x_00007_00001=1) + (x_00007_00009=1)))
c Both direct and order encoding.
c Var 'aux1218' order represents '0' with '5602'
c Var 'aux1218' direct represents '0' with '5602'
c Var 'aux1218' order represents '1' with '5603'
-5602 5603 0
c Var 'aux1218' direct represents '1' with '5604'
5602 -5603 5604 0
-5604 5603 0
-5604 -5602 0
c Var 'aux1218' direct represents '2' with '-5603'
5602 5604 -5603 0
c Encoding variable: aux1219 with domain: int(0..2) (representing constraint ((x_00007_00008=1) + (x_00007_00002=1)))
c Both direct and order encoding.
c Var 'aux1219' order represents '0' with '5605'
c Var 'aux1219' direct represents '0' with '5605'
c Var 'aux1219' order represents '1' with '5606'
-5605 5606 0
c Var 'aux1219' direct represents '1' with '5607'
5605 -5606 5607 0
-5607 5606 0
-5607 -5605 0
c Var 'aux1219' direct represents '2' with '-5606'
5605 5607 -5606 0
c Encoding variable: aux1220 with domain: int(0..2) (representing constraint ((x_00007_00007=1) + (x_00007_00004=1)))
c Both direct and order encoding.
c Var 'aux1220' order represents '0' with '5608'
c Var 'aux1220' direct represents '0' with '5608'
c Var 'aux1220' order represents '1' with '5609'
-5608 5609 0
c Var 'aux1220' direct represents '1' with '5610'
5608 -5609 5610 0
-5610 5609 0
-5610 -5608 0
c Var 'aux1220' direct represents '2' with '-5609'
5608 5610 -5609 0
c Encoding variable: aux1221 with domain: int(0..2) (representing constraint ((x_00007_00006=1) + (x_00007_00005=1)))
c Both direct and order encoding.
c Var 'aux1221' order represents '0' with '5611'
c Var 'aux1221' direct represents '0' with '5611'
c Var 'aux1221' order represents '1' with '5612'
-5611 5612 0
c Var 'aux1221' direct represents '1' with '5613'
5611 -5612 5613 0
-5613 5612 0
-5613 -5611 0
c Var 'aux1221' direct represents '2' with '-5612'
5611 5613 -5612 0
c Encoding variable: aux1222 with domain: int(0..3) (representing constraint ((x_00007_00003=1) + aux1221))
c Both direct and order encoding.
c Var 'aux1222' order represents '0' with '5614'
c Var 'aux1222' direct represents '0' with '5614'
c Var 'aux1222' order represents '1' with '5615'
-5614 5615 0
c Var 'aux1222' direct represents '1' with '5616'
5614 -5615 5616 0
-5616 5615 0
-5616 -5614 0
c Var 'aux1222' order represents '2' with '5617'
-5615 5617 0
c Var 'aux1222' direct represents '2' with '5618'
5615 -5617 5618 0
-5618 5617 0
-5618 -5615 0
c Var 'aux1222' direct represents '3' with '-5617'
5614 5616 5618 -5617 0
c Encoding variable: aux1223 with domain: int(0..4) (representing constraint (aux1218 + aux1220))
c Both direct and order encoding.
c Var 'aux1223' order represents '0' with '5619'
c Var 'aux1223' direct represents '0' with '5619'
c Var 'aux1223' order represents '1' with '5620'
-5619 5620 0
c Var 'aux1223' direct represents '1' with '5621'
5619 -5620 5621 0
-5621 5620 0
-5621 -5619 0
c Var 'aux1223' order represents '2' with '5622'
-5620 5622 0
c Var 'aux1223' direct represents '2' with '5623'
5620 -5622 5623 0
-5623 5622 0
-5623 -5620 0
c Var 'aux1223' order represents '3' with '5624'
-5622 5624 0
c Var 'aux1223' direct represents '3' with '5625'
5622 -5624 5625 0
-5625 5624 0
-5625 -5622 0
c Var 'aux1223' direct represents '4' with '-5624'
5619 5621 5623 5625 -5624 0
c Encoding variable: aux1224 with domain: int(0..2) (representing constraint ((x_00007_00001=2) + (x_00007_00009=2)))
c Both direct and order encoding.
c Var 'aux1224' order represents '0' with '5626'
c Var 'aux1224' direct represents '0' with '5626'
c Var 'aux1224' order represents '1' with '5627'
-5626 5627 0
c Var 'aux1224' direct represents '1' with '5628'
5626 -5627 5628 0
-5628 5627 0
-5628 -5626 0
c Var 'aux1224' direct represents '2' with '-5627'
5626 5628 -5627 0
c Encoding variable: aux1225 with domain: int(0..2) (representing constraint ((x_00007_00008=2) + (x_00007_00002=2)))
c Both direct and order encoding.
c Var 'aux1225' order represents '0' with '5629'
c Var 'aux1225' direct represents '0' with '5629'
c Var 'aux1225' order represents '1' with '5630'
-5629 5630 0
c Var 'aux1225' direct represents '1' with '5631'
5629 -5630 5631 0
-5631 5630 0
-5631 -5629 0
c Var 'aux1225' direct represents '2' with '-5630'
5629 5631 -5630 0
c Encoding variable: aux1226 with domain: int(0..2) (representing constraint ((x_00007_00007=2) + (x_00007_00004=2)))
c Both direct and order encoding.
c Var 'aux1226' order represents '0' with '5632'
c Var 'aux1226' direct represents '0' with '5632'
c Var 'aux1226' order represents '1' with '5633'
-5632 5633 0
c Var 'aux1226' direct represents '1' with '5634'
5632 -5633 5634 0
-5634 5633 0
-5634 -5632 0
c Var 'aux1226' direct represents '2' with '-5633'
5632 5634 -5633 0
c Encoding variable: aux1227 with domain: int(0..2) (representing constraint ((x_00007_00006=2) + (x_00007_00005=2)))
c Both direct and order encoding.
c Var 'aux1227' order represents '0' with '5635'
c Var 'aux1227' direct represents '0' with '5635'
c Var 'aux1227' order represents '1' with '5636'
-5635 5636 0
c Var 'aux1227' direct represents '1' with '5637'
5635 -5636 5637 0
-5637 5636 0
-5637 -5635 0
c Var 'aux1227' direct represents '2' with '-5636'
5635 5637 -5636 0
c Encoding variable: aux1228 with domain: int(0..3) (representing constraint ((x_00007_00003=2) + aux1227))
c Both direct and order encoding.
c Var 'aux1228' order represents '0' with '5638'
c Var 'aux1228' direct represents '0' with '5638'
c Var 'aux1228' order represents '1' with '5639'
-5638 5639 0
c Var 'aux1228' direct represents '1' with '5640'
5638 -5639 5640 0
-5640 5639 0
-5640 -5638 0
c Var 'aux1228' order represents '2' with '5641'
-5639 5641 0
c Var 'aux1228' direct represents '2' with '5642'
5639 -5641 5642 0
-5642 5641 0
-5642 -5639 0
c Var 'aux1228' direct represents '3' with '-5641'
5638 5640 5642 -5641 0
c Encoding variable: aux1229 with domain: int(0..4) (representing constraint (aux1224 + aux1226))
c Both direct and order encoding.
c Var 'aux1229' order represents '0' with '5643'
c Var 'aux1229' direct represents '0' with '5643'
c Var 'aux1229' order represents '1' with '5644'
-5643 5644 0
c Var 'aux1229' direct represents '1' with '5645'
5643 -5644 5645 0
-5645 5644 0
-5645 -5643 0
c Var 'aux1229' order represents '2' with '5646'
-5644 5646 0
c Var 'aux1229' direct represents '2' with '5647'
5644 -5646 5647 0
-5647 5646 0
-5647 -5644 0
c Var 'aux1229' order represents '3' with '5648'
-5646 5648 0
c Var 'aux1229' direct represents '3' with '5649'
5646 -5648 5649 0
-5649 5648 0
-5649 -5646 0
c Var 'aux1229' direct represents '4' with '-5648'
5643 5645 5647 5649 -5648 0
c Encoding variable: aux1230 with domain: int(0..2) (representing constraint ((x_00007_00001=3) + (x_00007_00009=3)))
c Both direct and order encoding.
c Var 'aux1230' order represents '0' with '5650'
c Var 'aux1230' direct represents '0' with '5650'
c Var 'aux1230' order represents '1' with '5651'
-5650 5651 0
c Var 'aux1230' direct represents '1' with '5652'
5650 -5651 5652 0
-5652 5651 0
-5652 -5650 0
c Var 'aux1230' direct represents '2' with '-5651'
5650 5652 -5651 0
c Encoding variable: aux1231 with domain: int(0..2) (representing constraint ((x_00007_00008=3) + (x_00007_00002=3)))
c Both direct and order encoding.
c Var 'aux1231' order represents '0' with '5653'
c Var 'aux1231' direct represents '0' with '5653'
c Var 'aux1231' order represents '1' with '5654'
-5653 5654 0
c Var 'aux1231' direct represents '1' with '5655'
5653 -5654 5655 0
-5655 5654 0
-5655 -5653 0
c Var 'aux1231' direct represents '2' with '-5654'
5653 5655 -5654 0
c Encoding variable: aux1232 with domain: int(0..2) (representing constraint ((x_00007_00007=3) + (x_00007_00004=3)))
c Both direct and order encoding.
c Var 'aux1232' order represents '0' with '5656'
c Var 'aux1232' direct represents '0' with '5656'
c Var 'aux1232' order represents '1' with '5657'
-5656 5657 0
c Var 'aux1232' direct represents '1' with '5658'
5656 -5657 5658 0
-5658 5657 0
-5658 -5656 0
c Var 'aux1232' direct represents '2' with '-5657'
5656 5658 -5657 0
c Encoding variable: aux1233 with domain: int(0..2) (representing constraint ((x_00007_00006=3) + (x_00007_00005=3)))
c Both direct and order encoding.
c Var 'aux1233' order represents '0' with '5659'
c Var 'aux1233' direct represents '0' with '5659'
c Var 'aux1233' order represents '1' with '5660'
-5659 5660 0
c Var 'aux1233' direct represents '1' with '5661'
5659 -5660 5661 0
-5661 5660 0
-5661 -5659 0
c Var 'aux1233' direct represents '2' with '-5660'
5659 5661 -5660 0
c Encoding variable: aux1234 with domain: int(0..3) (representing constraint ((x_00007_00003=3) + aux1233))
c Both direct and order encoding.
c Var 'aux1234' order represents '0' with '5662'
c Var 'aux1234' direct represents '0' with '5662'
c Var 'aux1234' order represents '1' with '5663'
-5662 5663 0
c Var 'aux1234' direct represents '1' with '5664'
5662 -5663 5664 0
-5664 5663 0
-5664 -5662 0
c Var 'aux1234' order represents '2' with '5665'
-5663 5665 0
c Var 'aux1234' direct represents '2' with '5666'
5663 -5665 5666 0
-5666 5665 0
-5666 -5663 0
c Var 'aux1234' direct represents '3' with '-5665'
5662 5664 5666 -5665 0
c Encoding variable: aux1235 with domain: int(0..4) (representing constraint (aux1230 + aux1232))
c Both direct and order encoding.
c Var 'aux1235' order represents '0' with '5667'
c Var 'aux1235' direct represents '0' with '5667'
c Var 'aux1235' order represents '1' with '5668'
-5667 5668 0
c Var 'aux1235' direct represents '1' with '5669'
5667 -5668 5669 0
-5669 5668 0
-5669 -5667 0
c Var 'aux1235' order represents '2' with '5670'
-5668 5670 0
c Var 'aux1235' direct represents '2' with '5671'
5668 -5670 5671 0
-5671 5670 0
-5671 -5668 0
c Var 'aux1235' order represents '3' with '5672'
-5670 5672 0
c Var 'aux1235' direct represents '3' with '5673'
5670 -5672 5673 0
-5673 5672 0
-5673 -5670 0
c Var 'aux1235' direct represents '4' with '-5672'
5667 5669 5671 5673 -5672 0
c Encoding variable: aux1236 with domain: int(0..2) (representing constraint ((x_00007_00001=4) + (x_00007_00009=4)))
c Both direct and order encoding.
c Var 'aux1236' order represents '0' with '5674'
c Var 'aux1236' direct represents '0' with '5674'
c Var 'aux1236' order represents '1' with '5675'
-5674 5675 0
c Var 'aux1236' direct represents '1' with '5676'
5674 -5675 5676 0
-5676 5675 0
-5676 -5674 0
c Var 'aux1236' direct represents '2' with '-5675'
5674 5676 -5675 0
c Encoding variable: aux1237 with domain: int(0..2) (representing constraint ((x_00007_00008=4) + (x_00007_00002=4)))
c Both direct and order encoding.
c Var 'aux1237' order represents '0' with '5677'
c Var 'aux1237' direct represents '0' with '5677'
c Var 'aux1237' order represents '1' with '5678'
-5677 5678 0
c Var 'aux1237' direct represents '1' with '5679'
5677 -5678 5679 0
-5679 5678 0
-5679 -5677 0
c Var 'aux1237' direct represents '2' with '-5678'
5677 5679 -5678 0
c Encoding variable: aux1238 with domain: int(0..2) (representing constraint ((x_00007_00007=4) + (x_00007_00004=4)))
c Both direct and order encoding.
c Var 'aux1238' order represents '0' with '5680'
c Var 'aux1238' direct represents '0' with '5680'
c Var 'aux1238' order represents '1' with '5681'
-5680 5681 0
c Var 'aux1238' direct represents '1' with '5682'
5680 -5681 5682 0
-5682 5681 0
-5682 -5680 0
c Var 'aux1238' direct represents '2' with '-5681'
5680 5682 -5681 0
c Encoding variable: aux1239 with domain: int(0..2) (representing constraint ((x_00007_00006=4) + (x_00007_00005=4)))
c Both direct and order encoding.
c Var 'aux1239' order represents '0' with '5683'
c Var 'aux1239' direct represents '0' with '5683'
c Var 'aux1239' order represents '1' with '5684'
-5683 5684 0
c Var 'aux1239' direct represents '1' with '5685'
5683 -5684 5685 0
-5685 5684 0
-5685 -5683 0
c Var 'aux1239' direct represents '2' with '-5684'
5683 5685 -5684 0
c Encoding variable: aux1240 with domain: int(0..3) (representing constraint ((x_00007_00003=4) + aux1239))
c Both direct and order encoding.
c Var 'aux1240' order represents '0' with '5686'
c Var 'aux1240' direct represents '0' with '5686'
c Var 'aux1240' order represents '1' with '5687'
-5686 5687 0
c Var 'aux1240' direct represents '1' with '5688'
5686 -5687 5688 0
-5688 5687 0
-5688 -5686 0
c Var 'aux1240' order represents '2' with '5689'
-5687 5689 0
c Var 'aux1240' direct represents '2' with '5690'
5687 -5689 5690 0
-5690 5689 0
-5690 -5687 0
c Var 'aux1240' direct represents '3' with '-5689'
5686 5688 5690 -5689 0
c Encoding variable: aux1241 with domain: int(0..4) (representing constraint (aux1236 + aux1238))
c Both direct and order encoding.
c Var 'aux1241' order represents '0' with '5691'
c Var 'aux1241' direct represents '0' with '5691'
c Var 'aux1241' order represents '1' with '5692'
-5691 5692 0
c Var 'aux1241' direct represents '1' with '5693'
5691 -5692 5693 0
-5693 5692 0
-5693 -5691 0
c Var 'aux1241' order represents '2' with '5694'
-5692 5694 0
c Var 'aux1241' direct represents '2' with '5695'
5692 -5694 5695 0
-5695 5694 0
-5695 -5692 0
c Var 'aux1241' order represents '3' with '5696'
-5694 5696 0
c Var 'aux1241' direct represents '3' with '5697'
5694 -5696 5697 0
-5697 5696 0
-5697 -5694 0
c Var 'aux1241' direct represents '4' with '-5696'
5691 5693 5695 5697 -5696 0
c Encoding variable: aux1242 with domain: int(0..2) (representing constraint ((x_00007_00001=5) + (x_00007_00009=5)))
c Both direct and order encoding.
c Var 'aux1242' order represents '0' with '5698'
c Var 'aux1242' direct represents '0' with '5698'
c Var 'aux1242' order represents '1' with '5699'
-5698 5699 0
c Var 'aux1242' direct represents '1' with '5700'
5698 -5699 5700 0
-5700 5699 0
-5700 -5698 0
c Var 'aux1242' direct represents '2' with '-5699'
5698 5700 -5699 0
c Encoding variable: aux1243 with domain: int(0..2) (representing constraint ((x_00007_00008=5) + (x_00007_00002=5)))
c Both direct and order encoding.
c Var 'aux1243' order represents '0' with '5701'
c Var 'aux1243' direct represents '0' with '5701'
c Var 'aux1243' order represents '1' with '5702'
-5701 5702 0
c Var 'aux1243' direct represents '1' with '5703'
5701 -5702 5703 0
-5703 5702 0
-5703 -5701 0
c Var 'aux1243' direct represents '2' with '-5702'
5701 5703 -5702 0
c Encoding variable: aux1244 with domain: int(0..2) (representing constraint ((x_00007_00007=5) + (x_00007_00004=5)))
c Both direct and order encoding.
c Var 'aux1244' order represents '0' with '5704'
c Var 'aux1244' direct represents '0' with '5704'
c Var 'aux1244' order represents '1' with '5705'
-5704 5705 0
c Var 'aux1244' direct represents '1' with '5706'
5704 -5705 5706 0
-5706 5705 0
-5706 -5704 0
c Var 'aux1244' direct represents '2' with '-5705'
5704 5706 -5705 0
c Encoding variable: aux1245 with domain: int(0..2) (representing constraint ((x_00007_00006=5) + (x_00007_00005=5)))
c Both direct and order encoding.
c Var 'aux1245' order represents '0' with '5707'
c Var 'aux1245' direct represents '0' with '5707'
c Var 'aux1245' order represents '1' with '5708'
-5707 5708 0
c Var 'aux1245' direct represents '1' with '5709'
5707 -5708 5709 0
-5709 5708 0
-5709 -5707 0
c Var 'aux1245' direct represents '2' with '-5708'
5707 5709 -5708 0
c Encoding variable: aux1246 with domain: int(0..3) (representing constraint ((x_00007_00003=5) + aux1245))
c Both direct and order encoding.
c Var 'aux1246' order represents '0' with '5710'
c Var 'aux1246' direct represents '0' with '5710'
c Var 'aux1246' order represents '1' with '5711'
-5710 5711 0
c Var 'aux1246' direct represents '1' with '5712'
5710 -5711 5712 0
-5712 5711 0
-5712 -5710 0
c Var 'aux1246' order represents '2' with '5713'
-5711 5713 0
c Var 'aux1246' direct represents '2' with '5714'
5711 -5713 5714 0
-5714 5713 0
-5714 -5711 0
c Var 'aux1246' direct represents '3' with '-5713'
5710 5712 5714 -5713 0
c Encoding variable: aux1247 with domain: int(0..4) (representing constraint (aux1242 + aux1244))
c Both direct and order encoding.
c Var 'aux1247' order represents '0' with '5715'
c Var 'aux1247' direct represents '0' with '5715'
c Var 'aux1247' order represents '1' with '5716'
-5715 5716 0
c Var 'aux1247' direct represents '1' with '5717'
5715 -5716 5717 0
-5717 5716 0
-5717 -5715 0
c Var 'aux1247' order represents '2' with '5718'
-5716 5718 0
c Var 'aux1247' direct represents '2' with '5719'
5716 -5718 5719 0
-5719 5718 0
-5719 -5716 0
c Var 'aux1247' order represents '3' with '5720'
-5718 5720 0
c Var 'aux1247' direct represents '3' with '5721'
5718 -5720 5721 0
-5721 5720 0
-5721 -5718 0
c Var 'aux1247' direct represents '4' with '-5720'
5715 5717 5719 5721 -5720 0
c Encoding variable: aux1248 with domain: int(0..2) (representing constraint ((x_00007_00001=6) + (x_00007_00009=6)))
c Both direct and order encoding.
c Var 'aux1248' order represents '0' with '5722'
c Var 'aux1248' direct represents '0' with '5722'
c Var 'aux1248' order represents '1' with '5723'
-5722 5723 0
c Var 'aux1248' direct represents '1' with '5724'
5722 -5723 5724 0
-5724 5723 0
-5724 -5722 0
c Var 'aux1248' direct represents '2' with '-5723'
5722 5724 -5723 0
c Encoding variable: aux1249 with domain: int(0..2) (representing constraint ((x_00007_00008=6) + (x_00007_00002=6)))
c Both direct and order encoding.
c Var 'aux1249' order represents '0' with '5725'
c Var 'aux1249' direct represents '0' with '5725'
c Var 'aux1249' order represents '1' with '5726'
-5725 5726 0
c Var 'aux1249' direct represents '1' with '5727'
5725 -5726 5727 0
-5727 5726 0
-5727 -5725 0
c Var 'aux1249' direct represents '2' with '-5726'
5725 5727 -5726 0
c Encoding variable: aux1250 with domain: int(0..2) (representing constraint ((x_00007_00007=6) + (x_00007_00004=6)))
c Both direct and order encoding.
c Var 'aux1250' order represents '0' with '5728'
c Var 'aux1250' direct represents '0' with '5728'
c Var 'aux1250' order represents '1' with '5729'
-5728 5729 0
c Var 'aux1250' direct represents '1' with '5730'
5728 -5729 5730 0
-5730 5729 0
-5730 -5728 0
c Var 'aux1250' direct represents '2' with '-5729'
5728 5730 -5729 0
c Encoding variable: aux1251 with domain: int(0..2) (representing constraint ((x_00007_00006=6) + (x_00007_00005=6)))
c Both direct and order encoding.
c Var 'aux1251' order represents '0' with '5731'
c Var 'aux1251' direct represents '0' with '5731'
c Var 'aux1251' order represents '1' with '5732'
-5731 5732 0
c Var 'aux1251' direct represents '1' with '5733'
5731 -5732 5733 0
-5733 5732 0
-5733 -5731 0
c Var 'aux1251' direct represents '2' with '-5732'
5731 5733 -5732 0
c Encoding variable: aux1252 with domain: int(0..3) (representing constraint ((x_00007_00003=6) + aux1251))
c Both direct and order encoding.
c Var 'aux1252' order represents '0' with '5734'
c Var 'aux1252' direct represents '0' with '5734'
c Var 'aux1252' order represents '1' with '5735'
-5734 5735 0
c Var 'aux1252' direct represents '1' with '5736'
5734 -5735 5736 0
-5736 5735 0
-5736 -5734 0
c Var 'aux1252' order represents '2' with '5737'
-5735 5737 0
c Var 'aux1252' direct represents '2' with '5738'
5735 -5737 5738 0
-5738 5737 0
-5738 -5735 0
c Var 'aux1252' direct represents '3' with '-5737'
5734 5736 5738 -5737 0
c Encoding variable: aux1253 with domain: int(0..4) (representing constraint (aux1248 + aux1250))
c Both direct and order encoding.
c Var 'aux1253' order represents '0' with '5739'
c Var 'aux1253' direct represents '0' with '5739'
c Var 'aux1253' order represents '1' with '5740'
-5739 5740 0
c Var 'aux1253' direct represents '1' with '5741'
5739 -5740 5741 0
-5741 5740 0
-5741 -5739 0
c Var 'aux1253' order represents '2' with '5742'
-5740 5742 0
c Var 'aux1253' direct represents '2' with '5743'
5740 -5742 5743 0
-5743 5742 0
-5743 -5740 0
c Var 'aux1253' order represents '3' with '5744'
-5742 5744 0
c Var 'aux1253' direct represents '3' with '5745'
5742 -5744 5745 0
-5745 5744 0
-5745 -5742 0
c Var 'aux1253' direct represents '4' with '-5744'
5739 5741 5743 5745 -5744 0
c Encoding variable: aux1254 with domain: int(0..2) (representing constraint ((x_00007_00001=7) + (x_00007_00009=7)))
c Both direct and order encoding.
c Var 'aux1254' order represents '0' with '5746'
c Var 'aux1254' direct represents '0' with '5746'
c Var 'aux1254' order represents '1' with '5747'
-5746 5747 0
c Var 'aux1254' direct represents '1' with '5748'
5746 -5747 5748 0
-5748 5747 0
-5748 -5746 0
c Var 'aux1254' direct represents '2' with '-5747'
5746 5748 -5747 0
c Encoding variable: aux1255 with domain: int(0..2) (representing constraint ((x_00007_00008=7) + (x_00007_00002=7)))
c Both direct and order encoding.
c Var 'aux1255' order represents '0' with '5749'
c Var 'aux1255' direct represents '0' with '5749'
c Var 'aux1255' order represents '1' with '5750'
-5749 5750 0
c Var 'aux1255' direct represents '1' with '5751'
5749 -5750 5751 0
-5751 5750 0
-5751 -5749 0
c Var 'aux1255' direct represents '2' with '-5750'
5749 5751 -5750 0
c Encoding variable: aux1256 with domain: int(0..2) (representing constraint ((x_00007_00007=7) + (x_00007_00004=7)))
c Both direct and order encoding.
c Var 'aux1256' order represents '0' with '5752'
c Var 'aux1256' direct represents '0' with '5752'
c Var 'aux1256' order represents '1' with '5753'
-5752 5753 0
c Var 'aux1256' direct represents '1' with '5754'
5752 -5753 5754 0
-5754 5753 0
-5754 -5752 0
c Var 'aux1256' direct represents '2' with '-5753'
5752 5754 -5753 0
c Encoding variable: aux1257 with domain: int(0..2) (representing constraint ((x_00007_00006=7) + (x_00007_00005=7)))
c Both direct and order encoding.
c Var 'aux1257' order represents '0' with '5755'
c Var 'aux1257' direct represents '0' with '5755'
c Var 'aux1257' order represents '1' with '5756'
-5755 5756 0
c Var 'aux1257' direct represents '1' with '5757'
5755 -5756 5757 0
-5757 5756 0
-5757 -5755 0
c Var 'aux1257' direct represents '2' with '-5756'
5755 5757 -5756 0
c Encoding variable: aux1258 with domain: int(0..3) (representing constraint ((x_00007_00003=7) + aux1257))
c Both direct and order encoding.
c Var 'aux1258' order represents '0' with '5758'
c Var 'aux1258' direct represents '0' with '5758'
c Var 'aux1258' order represents '1' with '5759'
-5758 5759 0
c Var 'aux1258' direct represents '1' with '5760'
5758 -5759 5760 0
-5760 5759 0
-5760 -5758 0
c Var 'aux1258' order represents '2' with '5761'
-5759 5761 0
c Var 'aux1258' direct represents '2' with '5762'
5759 -5761 5762 0
-5762 5761 0
-5762 -5759 0
c Var 'aux1258' direct represents '3' with '-5761'
5758 5760 5762 -5761 0
c Encoding variable: aux1259 with domain: int(0..4) (representing constraint (aux1254 + aux1256))
c Both direct and order encoding.
c Var 'aux1259' order represents '0' with '5763'
c Var 'aux1259' direct represents '0' with '5763'
c Var 'aux1259' order represents '1' with '5764'
-5763 5764 0
c Var 'aux1259' direct represents '1' with '5765'
5763 -5764 5765 0
-5765 5764 0
-5765 -5763 0
c Var 'aux1259' order represents '2' with '5766'
-5764 5766 0
c Var 'aux1259' direct represents '2' with '5767'
5764 -5766 5767 0
-5767 5766 0
-5767 -5764 0
c Var 'aux1259' order represents '3' with '5768'
-5766 5768 0
c Var 'aux1259' direct represents '3' with '5769'
5766 -5768 5769 0
-5769 5768 0
-5769 -5766 0
c Var 'aux1259' direct represents '4' with '-5768'
5763 5765 5767 5769 -5768 0
c Encoding variable: aux1260 with domain: int(0..2) (representing constraint ((x_00007_00001=8) + (x_00007_00009=8)))
c Both direct and order encoding.
c Var 'aux1260' order represents '0' with '5770'
c Var 'aux1260' direct represents '0' with '5770'
c Var 'aux1260' order represents '1' with '5771'
-5770 5771 0
c Var 'aux1260' direct represents '1' with '5772'
5770 -5771 5772 0
-5772 5771 0
-5772 -5770 0
c Var 'aux1260' direct represents '2' with '-5771'
5770 5772 -5771 0
c Encoding variable: aux1261 with domain: int(0..2) (representing constraint ((x_00007_00008=8) + (x_00007_00002=8)))
c Both direct and order encoding.
c Var 'aux1261' order represents '0' with '5773'
c Var 'aux1261' direct represents '0' with '5773'
c Var 'aux1261' order represents '1' with '5774'
-5773 5774 0
c Var 'aux1261' direct represents '1' with '5775'
5773 -5774 5775 0
-5775 5774 0
-5775 -5773 0
c Var 'aux1261' direct represents '2' with '-5774'
5773 5775 -5774 0
c Encoding variable: aux1262 with domain: int(0..2) (representing constraint ((x_00007_00007=8) + (x_00007_00004=8)))
c Both direct and order encoding.
c Var 'aux1262' order represents '0' with '5776'
c Var 'aux1262' direct represents '0' with '5776'
c Var 'aux1262' order represents '1' with '5777'
-5776 5777 0
c Var 'aux1262' direct represents '1' with '5778'
5776 -5777 5778 0
-5778 5777 0
-5778 -5776 0
c Var 'aux1262' direct represents '2' with '-5777'
5776 5778 -5777 0
c Encoding variable: aux1263 with domain: int(0..2) (representing constraint ((x_00007_00006=8) + (x_00007_00005=8)))
c Both direct and order encoding.
c Var 'aux1263' order represents '0' with '5779'
c Var 'aux1263' direct represents '0' with '5779'
c Var 'aux1263' order represents '1' with '5780'
-5779 5780 0
c Var 'aux1263' direct represents '1' with '5781'
5779 -5780 5781 0
-5781 5780 0
-5781 -5779 0
c Var 'aux1263' direct represents '2' with '-5780'
5779 5781 -5780 0
c Encoding variable: aux1264 with domain: int(0..3) (representing constraint ((x_00007_00003=8) + aux1263))
c Both direct and order encoding.
c Var 'aux1264' order represents '0' with '5782'
c Var 'aux1264' direct represents '0' with '5782'
c Var 'aux1264' order represents '1' with '5783'
-5782 5783 0
c Var 'aux1264' direct represents '1' with '5784'
5782 -5783 5784 0
-5784 5783 0
-5784 -5782 0
c Var 'aux1264' order represents '2' with '5785'
-5783 5785 0
c Var 'aux1264' direct represents '2' with '5786'
5783 -5785 5786 0
-5786 5785 0
-5786 -5783 0
c Var 'aux1264' direct represents '3' with '-5785'
5782 5784 5786 -5785 0
c Encoding variable: aux1265 with domain: int(0..4) (representing constraint (aux1260 + aux1262))
c Both direct and order encoding.
c Var 'aux1265' order represents '0' with '5787'
c Var 'aux1265' direct represents '0' with '5787'
c Var 'aux1265' order represents '1' with '5788'
-5787 5788 0
c Var 'aux1265' direct represents '1' with '5789'
5787 -5788 5789 0
-5789 5788 0
-5789 -5787 0
c Var 'aux1265' order represents '2' with '5790'
-5788 5790 0
c Var 'aux1265' direct represents '2' with '5791'
5788 -5790 5791 0
-5791 5790 0
-5791 -5788 0
c Var 'aux1265' order represents '3' with '5792'
-5790 5792 0
c Var 'aux1265' direct represents '3' with '5793'
5790 -5792 5793 0
-5793 5792 0
-5793 -5790 0
c Var 'aux1265' direct represents '4' with '-5792'
5787 5789 5791 5793 -5792 0
c Encoding variable: aux1266 with domain: int(0..2) (representing constraint ((x_00007_00001=9) + (x_00007_00009=9)))
c Both direct and order encoding.
c Var 'aux1266' order represents '0' with '5794'
c Var 'aux1266' direct represents '0' with '5794'
c Var 'aux1266' order represents '1' with '5795'
-5794 5795 0
c Var 'aux1266' direct represents '1' with '5796'
5794 -5795 5796 0
-5796 5795 0
-5796 -5794 0
c Var 'aux1266' direct represents '2' with '-5795'
5794 5796 -5795 0
c Encoding variable: aux1267 with domain: int(0..2) (representing constraint ((x_00007_00008=9) + (x_00007_00002=9)))
c Both direct and order encoding.
c Var 'aux1267' order represents '0' with '5797'
c Var 'aux1267' direct represents '0' with '5797'
c Var 'aux1267' order represents '1' with '5798'
-5797 5798 0
c Var 'aux1267' direct represents '1' with '5799'
5797 -5798 5799 0
-5799 5798 0
-5799 -5797 0
c Var 'aux1267' direct represents '2' with '-5798'
5797 5799 -5798 0
c Encoding variable: aux1268 with domain: int(0..2) (representing constraint ((x_00007_00007=9) + (x_00007_00004=9)))
c Both direct and order encoding.
c Var 'aux1268' order represents '0' with '5800'
c Var 'aux1268' direct represents '0' with '5800'
c Var 'aux1268' order represents '1' with '5801'
-5800 5801 0
c Var 'aux1268' direct represents '1' with '5802'
5800 -5801 5802 0
-5802 5801 0
-5802 -5800 0
c Var 'aux1268' direct represents '2' with '-5801'
5800 5802 -5801 0
c Encoding variable: aux1269 with domain: int(0..2) (representing constraint ((x_00007_00006=9) + (x_00007_00005=9)))
c Both direct and order encoding.
c Var 'aux1269' order represents '0' with '5803'
c Var 'aux1269' direct represents '0' with '5803'
c Var 'aux1269' order represents '1' with '5804'
-5803 5804 0
c Var 'aux1269' direct represents '1' with '5805'
5803 -5804 5805 0
-5805 5804 0
-5805 -5803 0
c Var 'aux1269' direct represents '2' with '-5804'
5803 5805 -5804 0
c Encoding variable: aux1270 with domain: int(0..3) (representing constraint ((x_00007_00003=9) + aux1269))
c Both direct and order encoding.
c Var 'aux1270' order represents '0' with '5806'
c Var 'aux1270' direct represents '0' with '5806'
c Var 'aux1270' order represents '1' with '5807'
-5806 5807 0
c Var 'aux1270' direct represents '1' with '5808'
5806 -5807 5808 0
-5808 5807 0
-5808 -5806 0
c Var 'aux1270' order represents '2' with '5809'
-5807 5809 0
c Var 'aux1270' direct represents '2' with '5810'
5807 -5809 5810 0
-5810 5809 0
-5810 -5807 0
c Var 'aux1270' direct represents '3' with '-5809'
5806 5808 5810 -5809 0
c Encoding variable: aux1271 with domain: int(0..4) (representing constraint (aux1266 + aux1268))
c Both direct and order encoding.
c Var 'aux1271' order represents '0' with '5811'
c Var 'aux1271' direct represents '0' with '5811'
c Var 'aux1271' order represents '1' with '5812'
-5811 5812 0
c Var 'aux1271' direct represents '1' with '5813'
5811 -5812 5813 0
-5813 5812 0
-5813 -5811 0
c Var 'aux1271' order represents '2' with '5814'
-5812 5814 0
c Var 'aux1271' direct represents '2' with '5815'
5812 -5814 5815 0
-5815 5814 0
-5815 -5812 0
c Var 'aux1271' order represents '3' with '5816'
-5814 5816 0
c Var 'aux1271' direct represents '3' with '5817'
5814 -5816 5817 0
-5817 5816 0
-5817 -5814 0
c Var 'aux1271' direct represents '4' with '-5816'
5811 5813 5815 5817 -5816 0
c Encoding variable: aux1272 with domain: int(0..2) (representing constraint ((x_00008_00001=1) + (x_00008_00009=1)))
c Both direct and order encoding.
c Var 'aux1272' order represents '0' with '5818'
c Var 'aux1272' direct represents '0' with '5818'
c Var 'aux1272' order represents '1' with '5819'
-5818 5819 0
c Var 'aux1272' direct represents '1' with '5820'
5818 -5819 5820 0
-5820 5819 0
-5820 -5818 0
c Var 'aux1272' direct represents '2' with '-5819'
5818 5820 -5819 0
c Encoding variable: aux1273 with domain: int(0..2) (representing constraint ((x_00008_00008=1) + (x_00008_00002=1)))
c Both direct and order encoding.
c Var 'aux1273' order represents '0' with '5821'
c Var 'aux1273' direct represents '0' with '5821'
c Var 'aux1273' order represents '1' with '5822'
-5821 5822 0
c Var 'aux1273' direct represents '1' with '5823'
5821 -5822 5823 0
-5823 5822 0
-5823 -5821 0
c Var 'aux1273' direct represents '2' with '-5822'
5821 5823 -5822 0
c Encoding variable: aux1274 with domain: int(0..2) (representing constraint ((x_00008_00007=1) + (x_00008_00004=1)))
c Both direct and order encoding.
c Var 'aux1274' order represents '0' with '5824'
c Var 'aux1274' direct represents '0' with '5824'
c Var 'aux1274' order represents '1' with '5825'
-5824 5825 0
c Var 'aux1274' direct represents '1' with '5826'
5824 -5825 5826 0
-5826 5825 0
-5826 -5824 0
c Var 'aux1274' direct represents '2' with '-5825'
5824 5826 -5825 0
c Encoding variable: aux1275 with domain: int(0..2) (representing constraint ((x_00008_00006=1) + (x_00008_00005=1)))
c Both direct and order encoding.
c Var 'aux1275' order represents '0' with '5827'
c Var 'aux1275' direct represents '0' with '5827'
c Var 'aux1275' order represents '1' with '5828'
-5827 5828 0
c Var 'aux1275' direct represents '1' with '5829'
5827 -5828 5829 0
-5829 5828 0
-5829 -5827 0
c Var 'aux1275' direct represents '2' with '-5828'
5827 5829 -5828 0
c Encoding variable: aux1276 with domain: int(0..3) (representing constraint ((x_00008_00003=1) + aux1275))
c Both direct and order encoding.
c Var 'aux1276' order represents '0' with '5830'
c Var 'aux1276' direct represents '0' with '5830'
c Var 'aux1276' order represents '1' with '5831'
-5830 5831 0
c Var 'aux1276' direct represents '1' with '5832'
5830 -5831 5832 0
-5832 5831 0
-5832 -5830 0
c Var 'aux1276' order represents '2' with '5833'
-5831 5833 0
c Var 'aux1276' direct represents '2' with '5834'
5831 -5833 5834 0
-5834 5833 0
-5834 -5831 0
c Var 'aux1276' direct represents '3' with '-5833'
5830 5832 5834 -5833 0
c Encoding variable: aux1277 with domain: int(0..4) (representing constraint (aux1272 + aux1274))
c Both direct and order encoding.
c Var 'aux1277' order represents '0' with '5835'
c Var 'aux1277' direct represents '0' with '5835'
c Var 'aux1277' order represents '1' with '5836'
-5835 5836 0
c Var 'aux1277' direct represents '1' with '5837'
5835 -5836 5837 0
-5837 5836 0
-5837 -5835 0
c Var 'aux1277' order represents '2' with '5838'
-5836 5838 0
c Var 'aux1277' direct represents '2' with '5839'
5836 -5838 5839 0
-5839 5838 0
-5839 -5836 0
c Var 'aux1277' order represents '3' with '5840'
-5838 5840 0
c Var 'aux1277' direct represents '3' with '5841'
5838 -5840 5841 0
-5841 5840 0
-5841 -5838 0
c Var 'aux1277' direct represents '4' with '-5840'
5835 5837 5839 5841 -5840 0
c Encoding variable: aux1278 with domain: int(0..2) (representing constraint ((x_00008_00001=2) + (x_00008_00009=2)))
c Both direct and order encoding.
c Var 'aux1278' order represents '0' with '5842'
c Var 'aux1278' direct represents '0' with '5842'
c Var 'aux1278' order represents '1' with '5843'
-5842 5843 0
c Var 'aux1278' direct represents '1' with '5844'
5842 -5843 5844 0
-5844 5843 0
-5844 -5842 0
c Var 'aux1278' direct represents '2' with '-5843'
5842 5844 -5843 0
c Encoding variable: aux1279 with domain: int(0..2) (representing constraint ((x_00008_00008=2) + (x_00008_00002=2)))
c Both direct and order encoding.
c Var 'aux1279' order represents '0' with '5845'
c Var 'aux1279' direct represents '0' with '5845'
c Var 'aux1279' order represents '1' with '5846'
-5845 5846 0
c Var 'aux1279' direct represents '1' with '5847'
5845 -5846 5847 0
-5847 5846 0
-5847 -5845 0
c Var 'aux1279' direct represents '2' with '-5846'
5845 5847 -5846 0
c Encoding variable: aux1280 with domain: int(0..2) (representing constraint ((x_00008_00007=2) + (x_00008_00004=2)))
c Both direct and order encoding.
c Var 'aux1280' order represents '0' with '5848'
c Var 'aux1280' direct represents '0' with '5848'
c Var 'aux1280' order represents '1' with '5849'
-5848 5849 0
c Var 'aux1280' direct represents '1' with '5850'
5848 -5849 5850 0
-5850 5849 0
-5850 -5848 0
c Var 'aux1280' direct represents '2' with '-5849'
5848 5850 -5849 0
c Encoding variable: aux1281 with domain: int(0..2) (representing constraint ((x_00008_00006=2) + (x_00008_00005=2)))
c Both direct and order encoding.
c Var 'aux1281' order represents '0' with '5851'
c Var 'aux1281' direct represents '0' with '5851'
c Var 'aux1281' order represents '1' with '5852'
-5851 5852 0
c Var 'aux1281' direct represents '1' with '5853'
5851 -5852 5853 0
-5853 5852 0
-5853 -5851 0
c Var 'aux1281' direct represents '2' with '-5852'
5851 5853 -5852 0
c Encoding variable: aux1282 with domain: int(0..3) (representing constraint ((x_00008_00003=2) + aux1281))
c Both direct and order encoding.
c Var 'aux1282' order represents '0' with '5854'
c Var 'aux1282' direct represents '0' with '5854'
c Var 'aux1282' order represents '1' with '5855'
-5854 5855 0
c Var 'aux1282' direct represents '1' with '5856'
5854 -5855 5856 0
-5856 5855 0
-5856 -5854 0
c Var 'aux1282' order represents '2' with '5857'
-5855 5857 0
c Var 'aux1282' direct represents '2' with '5858'
5855 -5857 5858 0
-5858 5857 0
-5858 -5855 0
c Var 'aux1282' direct represents '3' with '-5857'
5854 5856 5858 -5857 0
c Encoding variable: aux1283 with domain: int(0..4) (representing constraint (aux1278 + aux1280))
c Both direct and order encoding.
c Var 'aux1283' order represents '0' with '5859'
c Var 'aux1283' direct represents '0' with '5859'
c Var 'aux1283' order represents '1' with '5860'
-5859 5860 0
c Var 'aux1283' direct represents '1' with '5861'
5859 -5860 5861 0
-5861 5860 0
-5861 -5859 0
c Var 'aux1283' order represents '2' with '5862'
-5860 5862 0
c Var 'aux1283' direct represents '2' with '5863'
5860 -5862 5863 0
-5863 5862 0
-5863 -5860 0
c Var 'aux1283' order represents '3' with '5864'
-5862 5864 0
c Var 'aux1283' direct represents '3' with '5865'
5862 -5864 5865 0
-5865 5864 0
-5865 -5862 0
c Var 'aux1283' direct represents '4' with '-5864'
5859 5861 5863 5865 -5864 0
c Encoding variable: aux1284 with domain: int(0..2) (representing constraint ((x_00008_00001=3) + (x_00008_00009=3)))
c Both direct and order encoding.
c Var 'aux1284' order represents '0' with '5866'
c Var 'aux1284' direct represents '0' with '5866'
c Var 'aux1284' order represents '1' with '5867'
-5866 5867 0
c Var 'aux1284' direct represents '1' with '5868'
5866 -5867 5868 0
-5868 5867 0
-5868 -5866 0
c Var 'aux1284' direct represents '2' with '-5867'
5866 5868 -5867 0
c Encoding variable: aux1285 with domain: int(0..2) (representing constraint ((x_00008_00008=3) + (x_00008_00002=3)))
c Both direct and order encoding.
c Var 'aux1285' order represents '0' with '5869'
c Var 'aux1285' direct represents '0' with '5869'
c Var 'aux1285' order represents '1' with '5870'
-5869 5870 0
c Var 'aux1285' direct represents '1' with '5871'
5869 -5870 5871 0
-5871 5870 0
-5871 -5869 0
c Var 'aux1285' direct represents '2' with '-5870'
5869 5871 -5870 0
c Encoding variable: aux1286 with domain: int(0..2) (representing constraint ((x_00008_00007=3) + (x_00008_00004=3)))
c Both direct and order encoding.
c Var 'aux1286' order represents '0' with '5872'
c Var 'aux1286' direct represents '0' with '5872'
c Var 'aux1286' order represents '1' with '5873'
-5872 5873 0
c Var 'aux1286' direct represents '1' with '5874'
5872 -5873 5874 0
-5874 5873 0
-5874 -5872 0
c Var 'aux1286' direct represents '2' with '-5873'
5872 5874 -5873 0
c Encoding variable: aux1287 with domain: int(0..2) (representing constraint ((x_00008_00006=3) + (x_00008_00005=3)))
c Both direct and order encoding.
c Var 'aux1287' order represents '0' with '5875'
c Var 'aux1287' direct represents '0' with '5875'
c Var 'aux1287' order represents '1' with '5876'
-5875 5876 0
c Var 'aux1287' direct represents '1' with '5877'
5875 -5876 5877 0
-5877 5876 0
-5877 -5875 0
c Var 'aux1287' direct represents '2' with '-5876'
5875 5877 -5876 0
c Encoding variable: aux1288 with domain: int(0..3) (representing constraint ((x_00008_00003=3) + aux1287))
c Both direct and order encoding.
c Var 'aux1288' order represents '0' with '5878'
c Var 'aux1288' direct represents '0' with '5878'
c Var 'aux1288' order represents '1' with '5879'
-5878 5879 0
c Var 'aux1288' direct represents '1' with '5880'
5878 -5879 5880 0
-5880 5879 0
-5880 -5878 0
c Var 'aux1288' order represents '2' with '5881'
-5879 5881 0
c Var 'aux1288' direct represents '2' with '5882'
5879 -5881 5882 0
-5882 5881 0
-5882 -5879 0
c Var 'aux1288' direct represents '3' with '-5881'
5878 5880 5882 -5881 0
c Encoding variable: aux1289 with domain: int(0..4) (representing constraint (aux1284 + aux1286))
c Both direct and order encoding.
c Var 'aux1289' order represents '0' with '5883'
c Var 'aux1289' direct represents '0' with '5883'
c Var 'aux1289' order represents '1' with '5884'
-5883 5884 0
c Var 'aux1289' direct represents '1' with '5885'
5883 -5884 5885 0
-5885 5884 0
-5885 -5883 0
c Var 'aux1289' order represents '2' with '5886'
-5884 5886 0
c Var 'aux1289' direct represents '2' with '5887'
5884 -5886 5887 0
-5887 5886 0
-5887 -5884 0
c Var 'aux1289' order represents '3' with '5888'
-5886 5888 0
c Var 'aux1289' direct represents '3' with '5889'
5886 -5888 5889 0
-5889 5888 0
-5889 -5886 0
c Var 'aux1289' direct represents '4' with '-5888'
5883 5885 5887 5889 -5888 0
c Encoding variable: aux1290 with domain: int(0..2) (representing constraint ((x_00008_00001=4) + (x_00008_00009=4)))
c Both direct and order encoding.
c Var 'aux1290' order represents '0' with '5890'
c Var 'aux1290' direct represents '0' with '5890'
c Var 'aux1290' order represents '1' with '5891'
-5890 5891 0
c Var 'aux1290' direct represents '1' with '5892'
5890 -5891 5892 0
-5892 5891 0
-5892 -5890 0
c Var 'aux1290' direct represents '2' with '-5891'
5890 5892 -5891 0
c Encoding variable: aux1291 with domain: int(0..2) (representing constraint ((x_00008_00008=4) + (x_00008_00002=4)))
c Both direct and order encoding.
c Var 'aux1291' order represents '0' with '5893'
c Var 'aux1291' direct represents '0' with '5893'
c Var 'aux1291' order represents '1' with '5894'
-5893 5894 0
c Var 'aux1291' direct represents '1' with '5895'
5893 -5894 5895 0
-5895 5894 0
-5895 -5893 0
c Var 'aux1291' direct represents '2' with '-5894'
5893 5895 -5894 0
c Encoding variable: aux1292 with domain: int(0..2) (representing constraint ((x_00008_00007=4) + (x_00008_00004=4)))
c Both direct and order encoding.
c Var 'aux1292' order represents '0' with '5896'
c Var 'aux1292' direct represents '0' with '5896'
c Var 'aux1292' order represents '1' with '5897'
-5896 5897 0
c Var 'aux1292' direct represents '1' with '5898'
5896 -5897 5898 0
-5898 5897 0
-5898 -5896 0
c Var 'aux1292' direct represents '2' with '-5897'
5896 5898 -5897 0
c Encoding variable: aux1293 with domain: int(0..2) (representing constraint ((x_00008_00006=4) + (x_00008_00005=4)))
c Both direct and order encoding.
c Var 'aux1293' order represents '0' with '5899'
c Var 'aux1293' direct represents '0' with '5899'
c Var 'aux1293' order represents '1' with '5900'
-5899 5900 0
c Var 'aux1293' direct represents '1' with '5901'
5899 -5900 5901 0
-5901 5900 0
-5901 -5899 0
c Var 'aux1293' direct represents '2' with '-5900'
5899 5901 -5900 0
c Encoding variable: aux1294 with domain: int(0..3) (representing constraint ((x_00008_00003=4) + aux1293))
c Both direct and order encoding.
c Var 'aux1294' order represents '0' with '5902'
c Var 'aux1294' direct represents '0' with '5902'
c Var 'aux1294' order represents '1' with '5903'
-5902 5903 0
c Var 'aux1294' direct represents '1' with '5904'
5902 -5903 5904 0
-5904 5903 0
-5904 -5902 0
c Var 'aux1294' order represents '2' with '5905'
-5903 5905 0
c Var 'aux1294' direct represents '2' with '5906'
5903 -5905 5906 0
-5906 5905 0
-5906 -5903 0
c Var 'aux1294' direct represents '3' with '-5905'
5902 5904 5906 -5905 0
c Encoding variable: aux1295 with domain: int(0..4) (representing constraint (aux1290 + aux1292))
c Both direct and order encoding.
c Var 'aux1295' order represents '0' with '5907'
c Var 'aux1295' direct represents '0' with '5907'
c Var 'aux1295' order represents '1' with '5908'
-5907 5908 0
c Var 'aux1295' direct represents '1' with '5909'
5907 -5908 5909 0
-5909 5908 0
-5909 -5907 0
c Var 'aux1295' order represents '2' with '5910'
-5908 5910 0
c Var 'aux1295' direct represents '2' with '5911'
5908 -5910 5911 0
-5911 5910 0
-5911 -5908 0
c Var 'aux1295' order represents '3' with '5912'
-5910 5912 0
c Var 'aux1295' direct represents '3' with '5913'
5910 -5912 5913 0
-5913 5912 0
-5913 -5910 0
c Var 'aux1295' direct represents '4' with '-5912'
5907 5909 5911 5913 -5912 0
c Encoding variable: aux1296 with domain: int(0..2) (representing constraint ((x_00008_00001=5) + (x_00008_00009=5)))
c Both direct and order encoding.
c Var 'aux1296' order represents '0' with '5914'
c Var 'aux1296' direct represents '0' with '5914'
c Var 'aux1296' order represents '1' with '5915'
-5914 5915 0
c Var 'aux1296' direct represents '1' with '5916'
5914 -5915 5916 0
-5916 5915 0
-5916 -5914 0
c Var 'aux1296' direct represents '2' with '-5915'
5914 5916 -5915 0
c Encoding variable: aux1297 with domain: int(0..2) (representing constraint ((x_00008_00008=5) + (x_00008_00002=5)))
c Both direct and order encoding.
c Var 'aux1297' order represents '0' with '5917'
c Var 'aux1297' direct represents '0' with '5917'
c Var 'aux1297' order represents '1' with '5918'
-5917 5918 0
c Var 'aux1297' direct represents '1' with '5919'
5917 -5918 5919 0
-5919 5918 0
-5919 -5917 0
c Var 'aux1297' direct represents '2' with '-5918'
5917 5919 -5918 0
c Encoding variable: aux1298 with domain: int(0..2) (representing constraint ((x_00008_00007=5) + (x_00008_00004=5)))
c Both direct and order encoding.
c Var 'aux1298' order represents '0' with '5920'
c Var 'aux1298' direct represents '0' with '5920'
c Var 'aux1298' order represents '1' with '5921'
-5920 5921 0
c Var 'aux1298' direct represents '1' with '5922'
5920 -5921 5922 0
-5922 5921 0
-5922 -5920 0
c Var 'aux1298' direct represents '2' with '-5921'
5920 5922 -5921 0
c Encoding variable: aux1299 with domain: int(0..2) (representing constraint ((x_00008_00006=5) + (x_00008_00005=5)))
c Both direct and order encoding.
c Var 'aux1299' order represents '0' with '5923'
c Var 'aux1299' direct represents '0' with '5923'
c Var 'aux1299' order represents '1' with '5924'
-5923 5924 0
c Var 'aux1299' direct represents '1' with '5925'
5923 -5924 5925 0
-5925 5924 0
-5925 -5923 0
c Var 'aux1299' direct represents '2' with '-5924'
5923 5925 -5924 0
c Encoding variable: aux1300 with domain: int(0..3) (representing constraint ((x_00008_00003=5) + aux1299))
c Both direct and order encoding.
c Var 'aux1300' order represents '0' with '5926'
c Var 'aux1300' direct represents '0' with '5926'
c Var 'aux1300' order represents '1' with '5927'
-5926 5927 0
c Var 'aux1300' direct represents '1' with '5928'
5926 -5927 5928 0
-5928 5927 0
-5928 -5926 0
c Var 'aux1300' order represents '2' with '5929'
-5927 5929 0
c Var 'aux1300' direct represents '2' with '5930'
5927 -5929 5930 0
-5930 5929 0
-5930 -5927 0
c Var 'aux1300' direct represents '3' with '-5929'
5926 5928 5930 -5929 0
c Encoding variable: aux1301 with domain: int(0..4) (representing constraint (aux1296 + aux1298))
c Both direct and order encoding.
c Var 'aux1301' order represents '0' with '5931'
c Var 'aux1301' direct represents '0' with '5931'
c Var 'aux1301' order represents '1' with '5932'
-5931 5932 0
c Var 'aux1301' direct represents '1' with '5933'
5931 -5932 5933 0
-5933 5932 0
-5933 -5931 0
c Var 'aux1301' order represents '2' with '5934'
-5932 5934 0
c Var 'aux1301' direct represents '2' with '5935'
5932 -5934 5935 0
-5935 5934 0
-5935 -5932 0
c Var 'aux1301' order represents '3' with '5936'
-5934 5936 0
c Var 'aux1301' direct represents '3' with '5937'
5934 -5936 5937 0
-5937 5936 0
-5937 -5934 0
c Var 'aux1301' direct represents '4' with '-5936'
5931 5933 5935 5937 -5936 0
c Encoding variable: aux1302 with domain: int(0..2) (representing constraint ((x_00008_00001=6) + (x_00008_00009=6)))
c Both direct and order encoding.
c Var 'aux1302' order represents '0' with '5938'
c Var 'aux1302' direct represents '0' with '5938'
c Var 'aux1302' order represents '1' with '5939'
-5938 5939 0
c Var 'aux1302' direct represents '1' with '5940'
5938 -5939 5940 0
-5940 5939 0
-5940 -5938 0
c Var 'aux1302' direct represents '2' with '-5939'
5938 5940 -5939 0
c Encoding variable: aux1303 with domain: int(0..2) (representing constraint ((x_00008_00008=6) + (x_00008_00002=6)))
c Both direct and order encoding.
c Var 'aux1303' order represents '0' with '5941'
c Var 'aux1303' direct represents '0' with '5941'
c Var 'aux1303' order represents '1' with '5942'
-5941 5942 0
c Var 'aux1303' direct represents '1' with '5943'
5941 -5942 5943 0
-5943 5942 0
-5943 -5941 0
c Var 'aux1303' direct represents '2' with '-5942'
5941 5943 -5942 0
c Encoding variable: aux1304 with domain: int(0..2) (representing constraint ((x_00008_00007=6) + (x_00008_00004=6)))
c Both direct and order encoding.
c Var 'aux1304' order represents '0' with '5944'
c Var 'aux1304' direct represents '0' with '5944'
c Var 'aux1304' order represents '1' with '5945'
-5944 5945 0
c Var 'aux1304' direct represents '1' with '5946'
5944 -5945 5946 0
-5946 5945 0
-5946 -5944 0
c Var 'aux1304' direct represents '2' with '-5945'
5944 5946 -5945 0
c Encoding variable: aux1305 with domain: int(0..2) (representing constraint ((x_00008_00006=6) + (x_00008_00005=6)))
c Both direct and order encoding.
c Var 'aux1305' order represents '0' with '5947'
c Var 'aux1305' direct represents '0' with '5947'
c Var 'aux1305' order represents '1' with '5948'
-5947 5948 0
c Var 'aux1305' direct represents '1' with '5949'
5947 -5948 5949 0
-5949 5948 0
-5949 -5947 0
c Var 'aux1305' direct represents '2' with '-5948'
5947 5949 -5948 0
c Encoding variable: aux1306 with domain: int(0..3) (representing constraint ((x_00008_00003=6) + aux1305))
c Both direct and order encoding.
c Var 'aux1306' order represents '0' with '5950'
c Var 'aux1306' direct represents '0' with '5950'
c Var 'aux1306' order represents '1' with '5951'
-5950 5951 0
c Var 'aux1306' direct represents '1' with '5952'
5950 -5951 5952 0
-5952 5951 0
-5952 -5950 0
c Var 'aux1306' order represents '2' with '5953'
-5951 5953 0
c Var 'aux1306' direct represents '2' with '5954'
5951 -5953 5954 0
-5954 5953 0
-5954 -5951 0
c Var 'aux1306' direct represents '3' with '-5953'
5950 5952 5954 -5953 0
c Encoding variable: aux1307 with domain: int(0..4) (representing constraint (aux1302 + aux1304))
c Both direct and order encoding.
c Var 'aux1307' order represents '0' with '5955'
c Var 'aux1307' direct represents '0' with '5955'
c Var 'aux1307' order represents '1' with '5956'
-5955 5956 0
c Var 'aux1307' direct represents '1' with '5957'
5955 -5956 5957 0
-5957 5956 0
-5957 -5955 0
c Var 'aux1307' order represents '2' with '5958'
-5956 5958 0
c Var 'aux1307' direct represents '2' with '5959'
5956 -5958 5959 0
-5959 5958 0
-5959 -5956 0
c Var 'aux1307' order represents '3' with '5960'
-5958 5960 0
c Var 'aux1307' direct represents '3' with '5961'
5958 -5960 5961 0
-5961 5960 0
-5961 -5958 0
c Var 'aux1307' direct represents '4' with '-5960'
5955 5957 5959 5961 -5960 0
c Encoding variable: aux1308 with domain: int(0..2) (representing constraint ((x_00008_00001=7) + (x_00008_00009=7)))
c Both direct and order encoding.
c Var 'aux1308' order represents '0' with '5962'
c Var 'aux1308' direct represents '0' with '5962'
c Var 'aux1308' order represents '1' with '5963'
-5962 5963 0
c Var 'aux1308' direct represents '1' with '5964'
5962 -5963 5964 0
-5964 5963 0
-5964 -5962 0
c Var 'aux1308' direct represents '2' with '-5963'
5962 5964 -5963 0
c Encoding variable: aux1309 with domain: int(0..2) (representing constraint ((x_00008_00008=7) + (x_00008_00002=7)))
c Both direct and order encoding.
c Var 'aux1309' order represents '0' with '5965'
c Var 'aux1309' direct represents '0' with '5965'
c Var 'aux1309' order represents '1' with '5966'
-5965 5966 0
c Var 'aux1309' direct represents '1' with '5967'
5965 -5966 5967 0
-5967 5966 0
-5967 -5965 0
c Var 'aux1309' direct represents '2' with '-5966'
5965 5967 -5966 0
c Encoding variable: aux1310 with domain: int(0..2) (representing constraint ((x_00008_00007=7) + (x_00008_00004=7)))
c Both direct and order encoding.
c Var 'aux1310' order represents '0' with '5968'
c Var 'aux1310' direct represents '0' with '5968'
c Var 'aux1310' order represents '1' with '5969'
-5968 5969 0
c Var 'aux1310' direct represents '1' with '5970'
5968 -5969 5970 0
-5970 5969 0
-5970 -5968 0
c Var 'aux1310' direct represents '2' with '-5969'
5968 5970 -5969 0
c Encoding variable: aux1311 with domain: int(0..2) (representing constraint ((x_00008_00006=7) + (x_00008_00005=7)))
c Both direct and order encoding.
c Var 'aux1311' order represents '0' with '5971'
c Var 'aux1311' direct represents '0' with '5971'
c Var 'aux1311' order represents '1' with '5972'
-5971 5972 0
c Var 'aux1311' direct represents '1' with '5973'
5971 -5972 5973 0
-5973 5972 0
-5973 -5971 0
c Var 'aux1311' direct represents '2' with '-5972'
5971 5973 -5972 0
c Encoding variable: aux1312 with domain: int(0..3) (representing constraint ((x_00008_00003=7) + aux1311))
c Both direct and order encoding.
c Var 'aux1312' order represents '0' with '5974'
c Var 'aux1312' direct represents '0' with '5974'
c Var 'aux1312' order represents '1' with '5975'
-5974 5975 0
c Var 'aux1312' direct represents '1' with '5976'
5974 -5975 5976 0
-5976 5975 0
-5976 -5974 0
c Var 'aux1312' order represents '2' with '5977'
-5975 5977 0
c Var 'aux1312' direct represents '2' with '5978'
5975 -5977 5978 0
-5978 5977 0
-5978 -5975 0
c Var 'aux1312' direct represents '3' with '-5977'
5974 5976 5978 -5977 0
c Encoding variable: aux1313 with domain: int(0..4) (representing constraint (aux1308 + aux1310))
c Both direct and order encoding.
c Var 'aux1313' order represents '0' with '5979'
c Var 'aux1313' direct represents '0' with '5979'
c Var 'aux1313' order represents '1' with '5980'
-5979 5980 0
c Var 'aux1313' direct represents '1' with '5981'
5979 -5980 5981 0
-5981 5980 0
-5981 -5979 0
c Var 'aux1313' order represents '2' with '5982'
-5980 5982 0
c Var 'aux1313' direct represents '2' with '5983'
5980 -5982 5983 0
-5983 5982 0
-5983 -5980 0
c Var 'aux1313' order represents '3' with '5984'
-5982 5984 0
c Var 'aux1313' direct represents '3' with '5985'
5982 -5984 5985 0
-5985 5984 0
-5985 -5982 0
c Var 'aux1313' direct represents '4' with '-5984'
5979 5981 5983 5985 -5984 0
c Encoding variable: aux1314 with domain: int(0..2) (representing constraint ((x_00008_00001=8) + (x_00008_00009=8)))
c Both direct and order encoding.
c Var 'aux1314' order represents '0' with '5986'
c Var 'aux1314' direct represents '0' with '5986'
c Var 'aux1314' order represents '1' with '5987'
-5986 5987 0
c Var 'aux1314' direct represents '1' with '5988'
5986 -5987 5988 0
-5988 5987 0
-5988 -5986 0
c Var 'aux1314' direct represents '2' with '-5987'
5986 5988 -5987 0
c Encoding variable: aux1315 with domain: int(0..2) (representing constraint ((x_00008_00008=8) + (x_00008_00002=8)))
c Both direct and order encoding.
c Var 'aux1315' order represents '0' with '5989'
c Var 'aux1315' direct represents '0' with '5989'
c Var 'aux1315' order represents '1' with '5990'
-5989 5990 0
c Var 'aux1315' direct represents '1' with '5991'
5989 -5990 5991 0
-5991 5990 0
-5991 -5989 0
c Var 'aux1315' direct represents '2' with '-5990'
5989 5991 -5990 0
c Encoding variable: aux1316 with domain: int(0..2) (representing constraint ((x_00008_00007=8) + (x_00008_00004=8)))
c Both direct and order encoding.
c Var 'aux1316' order represents '0' with '5992'
c Var 'aux1316' direct represents '0' with '5992'
c Var 'aux1316' order represents '1' with '5993'
-5992 5993 0
c Var 'aux1316' direct represents '1' with '5994'
5992 -5993 5994 0
-5994 5993 0
-5994 -5992 0
c Var 'aux1316' direct represents '2' with '-5993'
5992 5994 -5993 0
c Encoding variable: aux1317 with domain: int(0..2) (representing constraint ((x_00008_00006=8) + (x_00008_00005=8)))
c Both direct and order encoding.
c Var 'aux1317' order represents '0' with '5995'
c Var 'aux1317' direct represents '0' with '5995'
c Var 'aux1317' order represents '1' with '5996'
-5995 5996 0
c Var 'aux1317' direct represents '1' with '5997'
5995 -5996 5997 0
-5997 5996 0
-5997 -5995 0
c Var 'aux1317' direct represents '2' with '-5996'
5995 5997 -5996 0
c Encoding variable: aux1318 with domain: int(0..3) (representing constraint ((x_00008_00003=8) + aux1317))
c Both direct and order encoding.
c Var 'aux1318' order represents '0' with '5998'
c Var 'aux1318' direct represents '0' with '5998'
c Var 'aux1318' order represents '1' with '5999'
-5998 5999 0
c Var 'aux1318' direct represents '1' with '6000'
5998 -5999 6000 0
-6000 5999 0
-6000 -5998 0
c Var 'aux1318' order represents '2' with '6001'
-5999 6001 0
c Var 'aux1318' direct represents '2' with '6002'
5999 -6001 6002 0
-6002 6001 0
-6002 -5999 0
c Var 'aux1318' direct represents '3' with '-6001'
5998 6000 6002 -6001 0
c Encoding variable: aux1319 with domain: int(0..4) (representing constraint (aux1314 + aux1316))
c Both direct and order encoding.
c Var 'aux1319' order represents '0' with '6003'
c Var 'aux1319' direct represents '0' with '6003'
c Var 'aux1319' order represents '1' with '6004'
-6003 6004 0
c Var 'aux1319' direct represents '1' with '6005'
6003 -6004 6005 0
-6005 6004 0
-6005 -6003 0
c Var 'aux1319' order represents '2' with '6006'
-6004 6006 0
c Var 'aux1319' direct represents '2' with '6007'
6004 -6006 6007 0
-6007 6006 0
-6007 -6004 0
c Var 'aux1319' order represents '3' with '6008'
-6006 6008 0
c Var 'aux1319' direct represents '3' with '6009'
6006 -6008 6009 0
-6009 6008 0
-6009 -6006 0
c Var 'aux1319' direct represents '4' with '-6008'
6003 6005 6007 6009 -6008 0
c Encoding variable: aux1320 with domain: int(0..2) (representing constraint ((x_00008_00001=9) + (x_00008_00009=9)))
c Both direct and order encoding.
c Var 'aux1320' order represents '0' with '6010'
c Var 'aux1320' direct represents '0' with '6010'
c Var 'aux1320' order represents '1' with '6011'
-6010 6011 0
c Var 'aux1320' direct represents '1' with '6012'
6010 -6011 6012 0
-6012 6011 0
-6012 -6010 0
c Var 'aux1320' direct represents '2' with '-6011'
6010 6012 -6011 0
c Encoding variable: aux1321 with domain: int(0..2) (representing constraint ((x_00008_00008=9) + (x_00008_00002=9)))
c Both direct and order encoding.
c Var 'aux1321' order represents '0' with '6013'
c Var 'aux1321' direct represents '0' with '6013'
c Var 'aux1321' order represents '1' with '6014'
-6013 6014 0
c Var 'aux1321' direct represents '1' with '6015'
6013 -6014 6015 0
-6015 6014 0
-6015 -6013 0
c Var 'aux1321' direct represents '2' with '-6014'
6013 6015 -6014 0
c Encoding variable: aux1322 with domain: int(0..2) (representing constraint ((x_00008_00007=9) + (x_00008_00004=9)))
c Both direct and order encoding.
c Var 'aux1322' order represents '0' with '6016'
c Var 'aux1322' direct represents '0' with '6016'
c Var 'aux1322' order represents '1' with '6017'
-6016 6017 0
c Var 'aux1322' direct represents '1' with '6018'
6016 -6017 6018 0
-6018 6017 0
-6018 -6016 0
c Var 'aux1322' direct represents '2' with '-6017'
6016 6018 -6017 0
c Encoding variable: aux1323 with domain: int(0..2) (representing constraint ((x_00008_00006=9) + (x_00008_00005=9)))
c Both direct and order encoding.
c Var 'aux1323' order represents '0' with '6019'
c Var 'aux1323' direct represents '0' with '6019'
c Var 'aux1323' order represents '1' with '6020'
-6019 6020 0
c Var 'aux1323' direct represents '1' with '6021'
6019 -6020 6021 0
-6021 6020 0
-6021 -6019 0
c Var 'aux1323' direct represents '2' with '-6020'
6019 6021 -6020 0
c Encoding variable: aux1324 with domain: int(0..3) (representing constraint ((x_00008_00003=9) + aux1323))
c Both direct and order encoding.
c Var 'aux1324' order represents '0' with '6022'
c Var 'aux1324' direct represents '0' with '6022'
c Var 'aux1324' order represents '1' with '6023'
-6022 6023 0
c Var 'aux1324' direct represents '1' with '6024'
6022 -6023 6024 0
-6024 6023 0
-6024 -6022 0
c Var 'aux1324' order represents '2' with '6025'
-6023 6025 0
c Var 'aux1324' direct represents '2' with '6026'
6023 -6025 6026 0
-6026 6025 0
-6026 -6023 0
c Var 'aux1324' direct represents '3' with '-6025'
6022 6024 6026 -6025 0
c Encoding variable: aux1325 with domain: int(0..4) (representing constraint (aux1320 + aux1322))
c Both direct and order encoding.
c Var 'aux1325' order represents '0' with '6027'
c Var 'aux1325' direct represents '0' with '6027'
c Var 'aux1325' order represents '1' with '6028'
-6027 6028 0
c Var 'aux1325' direct represents '1' with '6029'
6027 -6028 6029 0
-6029 6028 0
-6029 -6027 0
c Var 'aux1325' order represents '2' with '6030'
-6028 6030 0
c Var 'aux1325' direct represents '2' with '6031'
6028 -6030 6031 0
-6031 6030 0
-6031 -6028 0
c Var 'aux1325' order represents '3' with '6032'
-6030 6032 0
c Var 'aux1325' direct represents '3' with '6033'
6030 -6032 6033 0
-6033 6032 0
-6033 -6030 0
c Var 'aux1325' direct represents '4' with '-6032'
6027 6029 6031 6033 -6032 0
c Encoding variable: aux1326 with domain: int(0..2) (representing constraint ((x_00009_00001=1) + (x_00009_00009=1)))
c Both direct and order encoding.
c Var 'aux1326' order represents '0' with '6034'
c Var 'aux1326' direct represents '0' with '6034'
c Var 'aux1326' order represents '1' with '6035'
-6034 6035 0
c Var 'aux1326' direct represents '1' with '6036'
6034 -6035 6036 0
-6036 6035 0
-6036 -6034 0
c Var 'aux1326' direct represents '2' with '-6035'
6034 6036 -6035 0
c Encoding variable: aux1327 with domain: int(0..2) (representing constraint ((x_00009_00008=1) + (x_00009_00002=1)))
c Both direct and order encoding.
c Var 'aux1327' order represents '0' with '6037'
c Var 'aux1327' direct represents '0' with '6037'
c Var 'aux1327' order represents '1' with '6038'
-6037 6038 0
c Var 'aux1327' direct represents '1' with '6039'
6037 -6038 6039 0
-6039 6038 0
-6039 -6037 0
c Var 'aux1327' direct represents '2' with '-6038'
6037 6039 -6038 0
c Encoding variable: aux1328 with domain: int(0..2) (representing constraint ((x_00009_00007=1) + (x_00009_00004=1)))
c Both direct and order encoding.
c Var 'aux1328' order represents '0' with '6040'
c Var 'aux1328' direct represents '0' with '6040'
c Var 'aux1328' order represents '1' with '6041'
-6040 6041 0
c Var 'aux1328' direct represents '1' with '6042'
6040 -6041 6042 0
-6042 6041 0
-6042 -6040 0
c Var 'aux1328' direct represents '2' with '-6041'
6040 6042 -6041 0
c Encoding variable: aux1329 with domain: int(0..2) (representing constraint ((x_00009_00006=1) + (x_00009_00005=1)))
c Both direct and order encoding.
c Var 'aux1329' order represents '0' with '6043'
c Var 'aux1329' direct represents '0' with '6043'
c Var 'aux1329' order represents '1' with '6044'
-6043 6044 0
c Var 'aux1329' direct represents '1' with '6045'
6043 -6044 6045 0
-6045 6044 0
-6045 -6043 0
c Var 'aux1329' direct represents '2' with '-6044'
6043 6045 -6044 0
c Encoding variable: aux1330 with domain: int(0..3) (representing constraint ((x_00009_00003=1) + aux1329))
c Both direct and order encoding.
c Var 'aux1330' order represents '0' with '6046'
c Var 'aux1330' direct represents '0' with '6046'
c Var 'aux1330' order represents '1' with '6047'
-6046 6047 0
c Var 'aux1330' direct represents '1' with '6048'
6046 -6047 6048 0
-6048 6047 0
-6048 -6046 0
c Var 'aux1330' order represents '2' with '6049'
-6047 6049 0
c Var 'aux1330' direct represents '2' with '6050'
6047 -6049 6050 0
-6050 6049 0
-6050 -6047 0
c Var 'aux1330' direct represents '3' with '-6049'
6046 6048 6050 -6049 0
c Encoding variable: aux1331 with domain: int(0..4) (representing constraint (aux1326 + aux1328))
c Both direct and order encoding.
c Var 'aux1331' order represents '0' with '6051'
c Var 'aux1331' direct represents '0' with '6051'
c Var 'aux1331' order represents '1' with '6052'
-6051 6052 0
c Var 'aux1331' direct represents '1' with '6053'
6051 -6052 6053 0
-6053 6052 0
-6053 -6051 0
c Var 'aux1331' order represents '2' with '6054'
-6052 6054 0
c Var 'aux1331' direct represents '2' with '6055'
6052 -6054 6055 0
-6055 6054 0
-6055 -6052 0
c Var 'aux1331' order represents '3' with '6056'
-6054 6056 0
c Var 'aux1331' direct represents '3' with '6057'
6054 -6056 6057 0
-6057 6056 0
-6057 -6054 0
c Var 'aux1331' direct represents '4' with '-6056'
6051 6053 6055 6057 -6056 0
c Encoding variable: aux1332 with domain: int(0..2) (representing constraint ((x_00009_00001=2) + (x_00009_00009=2)))
c Both direct and order encoding.
c Var 'aux1332' order represents '0' with '6058'
c Var 'aux1332' direct represents '0' with '6058'
c Var 'aux1332' order represents '1' with '6059'
-6058 6059 0
c Var 'aux1332' direct represents '1' with '6060'
6058 -6059 6060 0
-6060 6059 0
-6060 -6058 0
c Var 'aux1332' direct represents '2' with '-6059'
6058 6060 -6059 0
c Encoding variable: aux1333 with domain: int(0..2) (representing constraint ((x_00009_00008=2) + (x_00009_00002=2)))
c Both direct and order encoding.
c Var 'aux1333' order represents '0' with '6061'
c Var 'aux1333' direct represents '0' with '6061'
c Var 'aux1333' order represents '1' with '6062'
-6061 6062 0
c Var 'aux1333' direct represents '1' with '6063'
6061 -6062 6063 0
-6063 6062 0
-6063 -6061 0
c Var 'aux1333' direct represents '2' with '-6062'
6061 6063 -6062 0
c Encoding variable: aux1334 with domain: int(0..2) (representing constraint ((x_00009_00007=2) + (x_00009_00004=2)))
c Both direct and order encoding.
c Var 'aux1334' order represents '0' with '6064'
c Var 'aux1334' direct represents '0' with '6064'
c Var 'aux1334' order represents '1' with '6065'
-6064 6065 0
c Var 'aux1334' direct represents '1' with '6066'
6064 -6065 6066 0
-6066 6065 0
-6066 -6064 0
c Var 'aux1334' direct represents '2' with '-6065'
6064 6066 -6065 0
c Encoding variable: aux1335 with domain: int(0..2) (representing constraint ((x_00009_00006=2) + (x_00009_00005=2)))
c Both direct and order encoding.
c Var 'aux1335' order represents '0' with '6067'
c Var 'aux1335' direct represents '0' with '6067'
c Var 'aux1335' order represents '1' with '6068'
-6067 6068 0
c Var 'aux1335' direct represents '1' with '6069'
6067 -6068 6069 0
-6069 6068 0
-6069 -6067 0
c Var 'aux1335' direct represents '2' with '-6068'
6067 6069 -6068 0
c Encoding variable: aux1336 with domain: int(0..3) (representing constraint ((x_00009_00003=2) + aux1335))
c Both direct and order encoding.
c Var 'aux1336' order represents '0' with '6070'
c Var 'aux1336' direct represents '0' with '6070'
c Var 'aux1336' order represents '1' with '6071'
-6070 6071 0
c Var 'aux1336' direct represents '1' with '6072'
6070 -6071 6072 0
-6072 6071 0
-6072 -6070 0
c Var 'aux1336' order represents '2' with '6073'
-6071 6073 0
c Var 'aux1336' direct represents '2' with '6074'
6071 -6073 6074 0
-6074 6073 0
-6074 -6071 0
c Var 'aux1336' direct represents '3' with '-6073'
6070 6072 6074 -6073 0
c Encoding variable: aux1337 with domain: int(0..4) (representing constraint (aux1332 + aux1334))
c Both direct and order encoding.
c Var 'aux1337' order represents '0' with '6075'
c Var 'aux1337' direct represents '0' with '6075'
c Var 'aux1337' order represents '1' with '6076'
-6075 6076 0
c Var 'aux1337' direct represents '1' with '6077'
6075 -6076 6077 0
-6077 6076 0
-6077 -6075 0
c Var 'aux1337' order represents '2' with '6078'
-6076 6078 0
c Var 'aux1337' direct represents '2' with '6079'
6076 -6078 6079 0
-6079 6078 0
-6079 -6076 0
c Var 'aux1337' order represents '3' with '6080'
-6078 6080 0
c Var 'aux1337' direct represents '3' with '6081'
6078 -6080 6081 0
-6081 6080 0
-6081 -6078 0
c Var 'aux1337' direct represents '4' with '-6080'
6075 6077 6079 6081 -6080 0
c Encoding variable: aux1338 with domain: int(0..2) (representing constraint ((x_00009_00001=3) + (x_00009_00009=3)))
c Both direct and order encoding.
c Var 'aux1338' order represents '0' with '6082'
c Var 'aux1338' direct represents '0' with '6082'
c Var 'aux1338' order represents '1' with '6083'
-6082 6083 0
c Var 'aux1338' direct represents '1' with '6084'
6082 -6083 6084 0
-6084 6083 0
-6084 -6082 0
c Var 'aux1338' direct represents '2' with '-6083'
6082 6084 -6083 0
c Encoding variable: aux1339 with domain: int(0..2) (representing constraint ((x_00009_00008=3) + (x_00009_00002=3)))
c Both direct and order encoding.
c Var 'aux1339' order represents '0' with '6085'
c Var 'aux1339' direct represents '0' with '6085'
c Var 'aux1339' order represents '1' with '6086'
-6085 6086 0
c Var 'aux1339' direct represents '1' with '6087'
6085 -6086 6087 0
-6087 6086 0
-6087 -6085 0
c Var 'aux1339' direct represents '2' with '-6086'
6085 6087 -6086 0
c Encoding variable: aux1340 with domain: int(0..2) (representing constraint ((x_00009_00007=3) + (x_00009_00004=3)))
c Both direct and order encoding.
c Var 'aux1340' order represents '0' with '6088'
c Var 'aux1340' direct represents '0' with '6088'
c Var 'aux1340' order represents '1' with '6089'
-6088 6089 0
c Var 'aux1340' direct represents '1' with '6090'
6088 -6089 6090 0
-6090 6089 0
-6090 -6088 0
c Var 'aux1340' direct represents '2' with '-6089'
6088 6090 -6089 0
c Encoding variable: aux1341 with domain: int(0..2) (representing constraint ((x_00009_00006=3) + (x_00009_00005=3)))
c Both direct and order encoding.
c Var 'aux1341' order represents '0' with '6091'
c Var 'aux1341' direct represents '0' with '6091'
c Var 'aux1341' order represents '1' with '6092'
-6091 6092 0
c Var 'aux1341' direct represents '1' with '6093'
6091 -6092 6093 0
-6093 6092 0
-6093 -6091 0
c Var 'aux1341' direct represents '2' with '-6092'
6091 6093 -6092 0
c Encoding variable: aux1342 with domain: int(0..3) (representing constraint ((x_00009_00003=3) + aux1341))
c Both direct and order encoding.
c Var 'aux1342' order represents '0' with '6094'
c Var 'aux1342' direct represents '0' with '6094'
c Var 'aux1342' order represents '1' with '6095'
-6094 6095 0
c Var 'aux1342' direct represents '1' with '6096'
6094 -6095 6096 0
-6096 6095 0
-6096 -6094 0
c Var 'aux1342' order represents '2' with '6097'
-6095 6097 0
c Var 'aux1342' direct represents '2' with '6098'
6095 -6097 6098 0
-6098 6097 0
-6098 -6095 0
c Var 'aux1342' direct represents '3' with '-6097'
6094 6096 6098 -6097 0
c Encoding variable: aux1343 with domain: int(0..4) (representing constraint (aux1338 + aux1340))
c Both direct and order encoding.
c Var 'aux1343' order represents '0' with '6099'
c Var 'aux1343' direct represents '0' with '6099'
c Var 'aux1343' order represents '1' with '6100'
-6099 6100 0
c Var 'aux1343' direct represents '1' with '6101'
6099 -6100 6101 0
-6101 6100 0
-6101 -6099 0
c Var 'aux1343' order represents '2' with '6102'
-6100 6102 0
c Var 'aux1343' direct represents '2' with '6103'
6100 -6102 6103 0
-6103 6102 0
-6103 -6100 0
c Var 'aux1343' order represents '3' with '6104'
-6102 6104 0
c Var 'aux1343' direct represents '3' with '6105'
6102 -6104 6105 0
-6105 6104 0
-6105 -6102 0
c Var 'aux1343' direct represents '4' with '-6104'
6099 6101 6103 6105 -6104 0
c Encoding variable: aux1344 with domain: int(0..2) (representing constraint ((x_00009_00001=4) + (x_00009_00009=4)))
c Both direct and order encoding.
c Var 'aux1344' order represents '0' with '6106'
c Var 'aux1344' direct represents '0' with '6106'
c Var 'aux1344' order represents '1' with '6107'
-6106 6107 0
c Var 'aux1344' direct represents '1' with '6108'
6106 -6107 6108 0
-6108 6107 0
-6108 -6106 0
c Var 'aux1344' direct represents '2' with '-6107'
6106 6108 -6107 0
c Encoding variable: aux1345 with domain: int(0..2) (representing constraint ((x_00009_00008=4) + (x_00009_00002=4)))
c Both direct and order encoding.
c Var 'aux1345' order represents '0' with '6109'
c Var 'aux1345' direct represents '0' with '6109'
c Var 'aux1345' order represents '1' with '6110'
-6109 6110 0
c Var 'aux1345' direct represents '1' with '6111'
6109 -6110 6111 0
-6111 6110 0
-6111 -6109 0
c Var 'aux1345' direct represents '2' with '-6110'
6109 6111 -6110 0
c Encoding variable: aux1346 with domain: int(0..2) (representing constraint ((x_00009_00007=4) + (x_00009_00004=4)))
c Both direct and order encoding.
c Var 'aux1346' order represents '0' with '6112'
c Var 'aux1346' direct represents '0' with '6112'
c Var 'aux1346' order represents '1' with '6113'
-6112 6113 0
c Var 'aux1346' direct represents '1' with '6114'
6112 -6113 6114 0
-6114 6113 0
-6114 -6112 0
c Var 'aux1346' direct represents '2' with '-6113'
6112 6114 -6113 0
c Encoding variable: aux1347 with domain: int(0..2) (representing constraint ((x_00009_00006=4) + (x_00009_00005=4)))
c Both direct and order encoding.
c Var 'aux1347' order represents '0' with '6115'
c Var 'aux1347' direct represents '0' with '6115'
c Var 'aux1347' order represents '1' with '6116'
-6115 6116 0
c Var 'aux1347' direct represents '1' with '6117'
6115 -6116 6117 0
-6117 6116 0
-6117 -6115 0
c Var 'aux1347' direct represents '2' with '-6116'
6115 6117 -6116 0
c Encoding variable: aux1348 with domain: int(0..3) (representing constraint ((x_00009_00003=4) + aux1347))
c Both direct and order encoding.
c Var 'aux1348' order represents '0' with '6118'
c Var 'aux1348' direct represents '0' with '6118'
c Var 'aux1348' order represents '1' with '6119'
-6118 6119 0
c Var 'aux1348' direct represents '1' with '6120'
6118 -6119 6120 0
-6120 6119 0
-6120 -6118 0
c Var 'aux1348' order represents '2' with '6121'
-6119 6121 0
c Var 'aux1348' direct represents '2' with '6122'
6119 -6121 6122 0
-6122 6121 0
-6122 -6119 0
c Var 'aux1348' direct represents '3' with '-6121'
6118 6120 6122 -6121 0
c Encoding variable: aux1349 with domain: int(0..4) (representing constraint (aux1344 + aux1346))
c Both direct and order encoding.
c Var 'aux1349' order represents '0' with '6123'
c Var 'aux1349' direct represents '0' with '6123'
c Var 'aux1349' order represents '1' with '6124'
-6123 6124 0
c Var 'aux1349' direct represents '1' with '6125'
6123 -6124 6125 0
-6125 6124 0
-6125 -6123 0
c Var 'aux1349' order represents '2' with '6126'
-6124 6126 0
c Var 'aux1349' direct represents '2' with '6127'
6124 -6126 6127 0
-6127 6126 0
-6127 -6124 0
c Var 'aux1349' order represents '3' with '6128'
-6126 6128 0
c Var 'aux1349' direct represents '3' with '6129'
6126 -6128 6129 0
-6129 6128 0
-6129 -6126 0
c Var 'aux1349' direct represents '4' with '-6128'
6123 6125 6127 6129 -6128 0
c Encoding variable: aux1350 with domain: int(0..2) (representing constraint ((x_00009_00001=5) + (x_00009_00009=5)))
c Both direct and order encoding.
c Var 'aux1350' order represents '0' with '6130'
c Var 'aux1350' direct represents '0' with '6130'
c Var 'aux1350' order represents '1' with '6131'
-6130 6131 0
c Var 'aux1350' direct represents '1' with '6132'
6130 -6131 6132 0
-6132 6131 0
-6132 -6130 0
c Var 'aux1350' direct represents '2' with '-6131'
6130 6132 -6131 0
c Encoding variable: aux1351 with domain: int(0..2) (representing constraint ((x_00009_00008=5) + (x_00009_00002=5)))
c Both direct and order encoding.
c Var 'aux1351' order represents '0' with '6133'
c Var 'aux1351' direct represents '0' with '6133'
c Var 'aux1351' order represents '1' with '6134'
-6133 6134 0
c Var 'aux1351' direct represents '1' with '6135'
6133 -6134 6135 0
-6135 6134 0
-6135 -6133 0
c Var 'aux1351' direct represents '2' with '-6134'
6133 6135 -6134 0
c Encoding variable: aux1352 with domain: int(0..2) (representing constraint ((x_00009_00007=5) + (x_00009_00004=5)))
c Both direct and order encoding.
c Var 'aux1352' order represents '0' with '6136'
c Var 'aux1352' direct represents '0' with '6136'
c Var 'aux1352' order represents '1' with '6137'
-6136 6137 0
c Var 'aux1352' direct represents '1' with '6138'
6136 -6137 6138 0
-6138 6137 0
-6138 -6136 0
c Var 'aux1352' direct represents '2' with '-6137'
6136 6138 -6137 0
c Encoding variable: aux1353 with domain: int(0..2) (representing constraint ((x_00009_00006=5) + (x_00009_00005=5)))
c Both direct and order encoding.
c Var 'aux1353' order represents '0' with '6139'
c Var 'aux1353' direct represents '0' with '6139'
c Var 'aux1353' order represents '1' with '6140'
-6139 6140 0
c Var 'aux1353' direct represents '1' with '6141'
6139 -6140 6141 0
-6141 6140 0
-6141 -6139 0
c Var 'aux1353' direct represents '2' with '-6140'
6139 6141 -6140 0
c Encoding variable: aux1354 with domain: int(0..3) (representing constraint ((x_00009_00003=5) + aux1353))
c Both direct and order encoding.
c Var 'aux1354' order represents '0' with '6142'
c Var 'aux1354' direct represents '0' with '6142'
c Var 'aux1354' order represents '1' with '6143'
-6142 6143 0
c Var 'aux1354' direct represents '1' with '6144'
6142 -6143 6144 0
-6144 6143 0
-6144 -6142 0
c Var 'aux1354' order represents '2' with '6145'
-6143 6145 0
c Var 'aux1354' direct represents '2' with '6146'
6143 -6145 6146 0
-6146 6145 0
-6146 -6143 0
c Var 'aux1354' direct represents '3' with '-6145'
6142 6144 6146 -6145 0
c Encoding variable: aux1355 with domain: int(0..4) (representing constraint (aux1350 + aux1352))
c Both direct and order encoding.
c Var 'aux1355' order represents '0' with '6147'
c Var 'aux1355' direct represents '0' with '6147'
c Var 'aux1355' order represents '1' with '6148'
-6147 6148 0
c Var 'aux1355' direct represents '1' with '6149'
6147 -6148 6149 0
-6149 6148 0
-6149 -6147 0
c Var 'aux1355' order represents '2' with '6150'
-6148 6150 0
c Var 'aux1355' direct represents '2' with '6151'
6148 -6150 6151 0
-6151 6150 0
-6151 -6148 0
c Var 'aux1355' order represents '3' with '6152'
-6150 6152 0
c Var 'aux1355' direct represents '3' with '6153'
6150 -6152 6153 0
-6153 6152 0
-6153 -6150 0
c Var 'aux1355' direct represents '4' with '-6152'
6147 6149 6151 6153 -6152 0
c Encoding variable: aux1356 with domain: int(0..2) (representing constraint ((x_00009_00001=6) + (x_00009_00009=6)))
c Both direct and order encoding.
c Var 'aux1356' order represents '0' with '6154'
c Var 'aux1356' direct represents '0' with '6154'
c Var 'aux1356' order represents '1' with '6155'
-6154 6155 0
c Var 'aux1356' direct represents '1' with '6156'
6154 -6155 6156 0
-6156 6155 0
-6156 -6154 0
c Var 'aux1356' direct represents '2' with '-6155'
6154 6156 -6155 0
c Encoding variable: aux1357 with domain: int(0..2) (representing constraint ((x_00009_00008=6) + (x_00009_00002=6)))
c Both direct and order encoding.
c Var 'aux1357' order represents '0' with '6157'
c Var 'aux1357' direct represents '0' with '6157'
c Var 'aux1357' order represents '1' with '6158'
-6157 6158 0
c Var 'aux1357' direct represents '1' with '6159'
6157 -6158 6159 0
-6159 6158 0
-6159 -6157 0
c Var 'aux1357' direct represents '2' with '-6158'
6157 6159 -6158 0
c Encoding variable: aux1358 with domain: int(0..2) (representing constraint ((x_00009_00007=6) + (x_00009_00004=6)))
c Both direct and order encoding.
c Var 'aux1358' order represents '0' with '6160'
c Var 'aux1358' direct represents '0' with '6160'
c Var 'aux1358' order represents '1' with '6161'
-6160 6161 0
c Var 'aux1358' direct represents '1' with '6162'
6160 -6161 6162 0
-6162 6161 0
-6162 -6160 0
c Var 'aux1358' direct represents '2' with '-6161'
6160 6162 -6161 0
c Encoding variable: aux1359 with domain: int(0..2) (representing constraint ((x_00009_00006=6) + (x_00009_00005=6)))
c Both direct and order encoding.
c Var 'aux1359' order represents '0' with '6163'
c Var 'aux1359' direct represents '0' with '6163'
c Var 'aux1359' order represents '1' with '6164'
-6163 6164 0
c Var 'aux1359' direct represents '1' with '6165'
6163 -6164 6165 0
-6165 6164 0
-6165 -6163 0
c Var 'aux1359' direct represents '2' with '-6164'
6163 6165 -6164 0
c Encoding variable: aux1360 with domain: int(0..3) (representing constraint ((x_00009_00003=6) + aux1359))
c Both direct and order encoding.
c Var 'aux1360' order represents '0' with '6166'
c Var 'aux1360' direct represents '0' with '6166'
c Var 'aux1360' order represents '1' with '6167'
-6166 6167 0
c Var 'aux1360' direct represents '1' with '6168'
6166 -6167 6168 0
-6168 6167 0
-6168 -6166 0
c Var 'aux1360' order represents '2' with '6169'
-6167 6169 0
c Var 'aux1360' direct represents '2' with '6170'
6167 -6169 6170 0
-6170 6169 0
-6170 -6167 0
c Var 'aux1360' direct represents '3' with '-6169'
6166 6168 6170 -6169 0
c Encoding variable: aux1361 with domain: int(0..4) (representing constraint (aux1356 + aux1358))
c Both direct and order encoding.
c Var 'aux1361' order represents '0' with '6171'
c Var 'aux1361' direct represents '0' with '6171'
c Var 'aux1361' order represents '1' with '6172'
-6171 6172 0
c Var 'aux1361' direct represents '1' with '6173'
6171 -6172 6173 0
-6173 6172 0
-6173 -6171 0
c Var 'aux1361' order represents '2' with '6174'
-6172 6174 0
c Var 'aux1361' direct represents '2' with '6175'
6172 -6174 6175 0
-6175 6174 0
-6175 -6172 0
c Var 'aux1361' order represents '3' with '6176'
-6174 6176 0
c Var 'aux1361' direct represents '3' with '6177'
6174 -6176 6177 0
-6177 6176 0
-6177 -6174 0
c Var 'aux1361' direct represents '4' with '-6176'
6171 6173 6175 6177 -6176 0
c Encoding variable: aux1362 with domain: int(0..2) (representing constraint ((x_00009_00001=7) + (x_00009_00009=7)))
c Both direct and order encoding.
c Var 'aux1362' order represents '0' with '6178'
c Var 'aux1362' direct represents '0' with '6178'
c Var 'aux1362' order represents '1' with '6179'
-6178 6179 0
c Var 'aux1362' direct represents '1' with '6180'
6178 -6179 6180 0
-6180 6179 0
-6180 -6178 0
c Var 'aux1362' direct represents '2' with '-6179'
6178 6180 -6179 0
c Encoding variable: aux1363 with domain: int(0..2) (representing constraint ((x_00009_00008=7) + (x_00009_00002=7)))
c Both direct and order encoding.
c Var 'aux1363' order represents '0' with '6181'
c Var 'aux1363' direct represents '0' with '6181'
c Var 'aux1363' order represents '1' with '6182'
-6181 6182 0
c Var 'aux1363' direct represents '1' with '6183'
6181 -6182 6183 0
-6183 6182 0
-6183 -6181 0
c Var 'aux1363' direct represents '2' with '-6182'
6181 6183 -6182 0
c Encoding variable: aux1364 with domain: int(0..2) (representing constraint ((x_00009_00007=7) + (x_00009_00004=7)))
c Both direct and order encoding.
c Var 'aux1364' order represents '0' with '6184'
c Var 'aux1364' direct represents '0' with '6184'
c Var 'aux1364' order represents '1' with '6185'
-6184 6185 0
c Var 'aux1364' direct represents '1' with '6186'
6184 -6185 6186 0
-6186 6185 0
-6186 -6184 0
c Var 'aux1364' direct represents '2' with '-6185'
6184 6186 -6185 0
c Encoding variable: aux1365 with domain: int(0..2) (representing constraint ((x_00009_00006=7) + (x_00009_00005=7)))
c Both direct and order encoding.
c Var 'aux1365' order represents '0' with '6187'
c Var 'aux1365' direct represents '0' with '6187'
c Var 'aux1365' order represents '1' with '6188'
-6187 6188 0
c Var 'aux1365' direct represents '1' with '6189'
6187 -6188 6189 0
-6189 6188 0
-6189 -6187 0
c Var 'aux1365' direct represents '2' with '-6188'
6187 6189 -6188 0
c Encoding variable: aux1366 with domain: int(0..3) (representing constraint ((x_00009_00003=7) + aux1365))
c Both direct and order encoding.
c Var 'aux1366' order represents '0' with '6190'
c Var 'aux1366' direct represents '0' with '6190'
c Var 'aux1366' order represents '1' with '6191'
-6190 6191 0
c Var 'aux1366' direct represents '1' with '6192'
6190 -6191 6192 0
-6192 6191 0
-6192 -6190 0
c Var 'aux1366' order represents '2' with '6193'
-6191 6193 0
c Var 'aux1366' direct represents '2' with '6194'
6191 -6193 6194 0
-6194 6193 0
-6194 -6191 0
c Var 'aux1366' direct represents '3' with '-6193'
6190 6192 6194 -6193 0
c Encoding variable: aux1367 with domain: int(0..4) (representing constraint (aux1362 + aux1364))
c Both direct and order encoding.
c Var 'aux1367' order represents '0' with '6195'
c Var 'aux1367' direct represents '0' with '6195'
c Var 'aux1367' order represents '1' with '6196'
-6195 6196 0
c Var 'aux1367' direct represents '1' with '6197'
6195 -6196 6197 0
-6197 6196 0
-6197 -6195 0
c Var 'aux1367' order represents '2' with '6198'
-6196 6198 0
c Var 'aux1367' direct represents '2' with '6199'
6196 -6198 6199 0
-6199 6198 0
-6199 -6196 0
c Var 'aux1367' order represents '3' with '6200'
-6198 6200 0
c Var 'aux1367' direct represents '3' with '6201'
6198 -6200 6201 0
-6201 6200 0
-6201 -6198 0
c Var 'aux1367' direct represents '4' with '-6200'
6195 6197 6199 6201 -6200 0
c Encoding variable: aux1368 with domain: int(0..2) (representing constraint ((x_00009_00001=8) + (x_00009_00009=8)))
c Both direct and order encoding.
c Var 'aux1368' order represents '0' with '6202'
c Var 'aux1368' direct represents '0' with '6202'
c Var 'aux1368' order represents '1' with '6203'
-6202 6203 0
c Var 'aux1368' direct represents '1' with '6204'
6202 -6203 6204 0
-6204 6203 0
-6204 -6202 0
c Var 'aux1368' direct represents '2' with '-6203'
6202 6204 -6203 0
c Encoding variable: aux1369 with domain: int(0..2) (representing constraint ((x_00009_00008=8) + (x_00009_00002=8)))
c Both direct and order encoding.
c Var 'aux1369' order represents '0' with '6205'
c Var 'aux1369' direct represents '0' with '6205'
c Var 'aux1369' order represents '1' with '6206'
-6205 6206 0
c Var 'aux1369' direct represents '1' with '6207'
6205 -6206 6207 0
-6207 6206 0
-6207 -6205 0
c Var 'aux1369' direct represents '2' with '-6206'
6205 6207 -6206 0
c Encoding variable: aux1370 with domain: int(0..2) (representing constraint ((x_00009_00007=8) + (x_00009_00004=8)))
c Both direct and order encoding.
c Var 'aux1370' order represents '0' with '6208'
c Var 'aux1370' direct represents '0' with '6208'
c Var 'aux1370' order represents '1' with '6209'
-6208 6209 0
c Var 'aux1370' direct represents '1' with '6210'
6208 -6209 6210 0
-6210 6209 0
-6210 -6208 0
c Var 'aux1370' direct represents '2' with '-6209'
6208 6210 -6209 0
c Encoding variable: aux1371 with domain: int(0..2) (representing constraint ((x_00009_00006=8) + (x_00009_00005=8)))
c Both direct and order encoding.
c Var 'aux1371' order represents '0' with '6211'
c Var 'aux1371' direct represents '0' with '6211'
c Var 'aux1371' order represents '1' with '6212'
-6211 6212 0
c Var 'aux1371' direct represents '1' with '6213'
6211 -6212 6213 0
-6213 6212 0
-6213 -6211 0
c Var 'aux1371' direct represents '2' with '-6212'
6211 6213 -6212 0
c Encoding variable: aux1372 with domain: int(0..3) (representing constraint ((x_00009_00003=8) + aux1371))
c Both direct and order encoding.
c Var 'aux1372' order represents '0' with '6214'
c Var 'aux1372' direct represents '0' with '6214'
c Var 'aux1372' order represents '1' with '6215'
-6214 6215 0
c Var 'aux1372' direct represents '1' with '6216'
6214 -6215 6216 0
-6216 6215 0
-6216 -6214 0
c Var 'aux1372' order represents '2' with '6217'
-6215 6217 0
c Var 'aux1372' direct represents '2' with '6218'
6215 -6217 6218 0
-6218 6217 0
-6218 -6215 0
c Var 'aux1372' direct represents '3' with '-6217'
6214 6216 6218 -6217 0
c Encoding variable: aux1373 with domain: int(0..4) (representing constraint (aux1368 + aux1370))
c Both direct and order encoding.
c Var 'aux1373' order represents '0' with '6219'
c Var 'aux1373' direct represents '0' with '6219'
c Var 'aux1373' order represents '1' with '6220'
-6219 6220 0
c Var 'aux1373' direct represents '1' with '6221'
6219 -6220 6221 0
-6221 6220 0
-6221 -6219 0
c Var 'aux1373' order represents '2' with '6222'
-6220 6222 0
c Var 'aux1373' direct represents '2' with '6223'
6220 -6222 6223 0
-6223 6222 0
-6223 -6220 0
c Var 'aux1373' order represents '3' with '6224'
-6222 6224 0
c Var 'aux1373' direct represents '3' with '6225'
6222 -6224 6225 0
-6225 6224 0
-6225 -6222 0
c Var 'aux1373' direct represents '4' with '-6224'
6219 6221 6223 6225 -6224 0
c Encoding variable: aux1374 with domain: int(0..2) (representing constraint ((x_00009_00001=9) + (x_00009_00009=9)))
c Both direct and order encoding.
c Var 'aux1374' order represents '0' with '6226'
c Var 'aux1374' direct represents '0' with '6226'
c Var 'aux1374' order represents '1' with '6227'
-6226 6227 0
c Var 'aux1374' direct represents '1' with '6228'
6226 -6227 6228 0
-6228 6227 0
-6228 -6226 0
c Var 'aux1374' direct represents '2' with '-6227'
6226 6228 -6227 0
c Encoding variable: aux1375 with domain: int(0..2) (representing constraint ((x_00009_00008=9) + (x_00009_00002=9)))
c Both direct and order encoding.
c Var 'aux1375' order represents '0' with '6229'
c Var 'aux1375' direct represents '0' with '6229'
c Var 'aux1375' order represents '1' with '6230'
-6229 6230 0
c Var 'aux1375' direct represents '1' with '6231'
6229 -6230 6231 0
-6231 6230 0
-6231 -6229 0
c Var 'aux1375' direct represents '2' with '-6230'
6229 6231 -6230 0
c Encoding variable: aux1376 with domain: int(0..2) (representing constraint ((x_00009_00007=9) + (x_00009_00004=9)))
c Both direct and order encoding.
c Var 'aux1376' order represents '0' with '6232'
c Var 'aux1376' direct represents '0' with '6232'
c Var 'aux1376' order represents '1' with '6233'
-6232 6233 0
c Var 'aux1376' direct represents '1' with '6234'
6232 -6233 6234 0
-6234 6233 0
-6234 -6232 0
c Var 'aux1376' direct represents '2' with '-6233'
6232 6234 -6233 0
c Encoding variable: aux1377 with domain: int(0..2) (representing constraint ((x_00009_00006=9) + (x_00009_00005=9)))
c Both direct and order encoding.
c Var 'aux1377' order represents '0' with '6235'
c Var 'aux1377' direct represents '0' with '6235'
c Var 'aux1377' order represents '1' with '6236'
-6235 6236 0
c Var 'aux1377' direct represents '1' with '6237'
6235 -6236 6237 0
-6237 6236 0
-6237 -6235 0
c Var 'aux1377' direct represents '2' with '-6236'
6235 6237 -6236 0
c Encoding variable: aux1378 with domain: int(0..3) (representing constraint ((x_00009_00003=9) + aux1377))
c Both direct and order encoding.
c Var 'aux1378' order represents '0' with '6238'
c Var 'aux1378' direct represents '0' with '6238'
c Var 'aux1378' order represents '1' with '6239'
-6238 6239 0
c Var 'aux1378' direct represents '1' with '6240'
6238 -6239 6240 0
-6240 6239 0
-6240 -6238 0
c Var 'aux1378' order represents '2' with '6241'
-6239 6241 0
c Var 'aux1378' direct represents '2' with '6242'
6239 -6241 6242 0
-6242 6241 0
-6242 -6239 0
c Var 'aux1378' direct represents '3' with '-6241'
6238 6240 6242 -6241 0
c Encoding variable: aux1379 with domain: int(0..4) (representing constraint (aux1374 + aux1376))
c Both direct and order encoding.
c Var 'aux1379' order represents '0' with '6243'
c Var 'aux1379' direct represents '0' with '6243'
c Var 'aux1379' order represents '1' with '6244'
-6243 6244 0
c Var 'aux1379' direct represents '1' with '6245'
6243 -6244 6245 0
-6245 6244 0
-6245 -6243 0
c Var 'aux1379' order represents '2' with '6246'
-6244 6246 0
c Var 'aux1379' direct represents '2' with '6247'
6244 -6246 6247 0
-6247 6246 0
-6247 -6244 0
c Var 'aux1379' order represents '3' with '6248'
-6246 6248 0
c Var 'aux1379' direct represents '3' with '6249'
6246 -6248 6249 0
-6249 6248 0
-6249 -6246 0
c Var 'aux1379' direct represents '4' with '-6248'
6243 6245 6247 6249 -6248 0
c Encoding variable: aux1380 with domain: int(0..2) (representing constraint ((x_00003_00001=1) + (x_00002_00003=1)))
c Both direct and order encoding.
c Var 'aux1380' order represents '0' with '6250'
c Var 'aux1380' direct represents '0' with '6250'
c Var 'aux1380' order represents '1' with '6251'
-6250 6251 0
c Var 'aux1380' direct represents '1' with '6252'
6250 -6251 6252 0
-6252 6251 0
-6252 -6250 0
c Var 'aux1380' direct represents '2' with '-6251'
6250 6252 -6251 0
c Encoding variable: aux1381 with domain: int(0..2) (representing constraint ((x_00002_00002=1) + (x_00003_00002=1)))
c Both direct and order encoding.
c Var 'aux1381' order represents '0' with '6253'
c Var 'aux1381' direct represents '0' with '6253'
c Var 'aux1381' order represents '1' with '6254'
-6253 6254 0
c Var 'aux1381' direct represents '1' with '6255'
6253 -6254 6255 0
-6255 6254 0
-6255 -6253 0
c Var 'aux1381' direct represents '2' with '-6254'
6253 6255 -6254 0
c Encoding variable: aux1382 with domain: int(0..2) (representing constraint ((x_00002_00001=1) + (x_00001_00001=1)))
c Both direct and order encoding.
c Var 'aux1382' order represents '0' with '6256'
c Var 'aux1382' direct represents '0' with '6256'
c Var 'aux1382' order represents '1' with '6257'
-6256 6257 0
c Var 'aux1382' direct represents '1' with '6258'
6256 -6257 6258 0
-6258 6257 0
-6258 -6256 0
c Var 'aux1382' direct represents '2' with '-6257'
6256 6258 -6257 0
c Encoding variable: aux1383 with domain: int(0..2) (representing constraint ((x_00001_00003=1) + (x_00001_00002=1)))
c Both direct and order encoding.
c Var 'aux1383' order represents '0' with '6259'
c Var 'aux1383' direct represents '0' with '6259'
c Var 'aux1383' order represents '1' with '6260'
-6259 6260 0
c Var 'aux1383' direct represents '1' with '6261'
6259 -6260 6261 0
-6261 6260 0
-6261 -6259 0
c Var 'aux1383' direct represents '2' with '-6260'
6259 6261 -6260 0
c Encoding variable: aux1384 with domain: int(0..3) (representing constraint ((x_00003_00003=1) + aux1383))
c Both direct and order encoding.
c Var 'aux1384' order represents '0' with '6262'
c Var 'aux1384' direct represents '0' with '6262'
c Var 'aux1384' order represents '1' with '6263'
-6262 6263 0
c Var 'aux1384' direct represents '1' with '6264'
6262 -6263 6264 0
-6264 6263 0
-6264 -6262 0
c Var 'aux1384' order represents '2' with '6265'
-6263 6265 0
c Var 'aux1384' direct represents '2' with '6266'
6263 -6265 6266 0
-6266 6265 0
-6266 -6263 0
c Var 'aux1384' direct represents '3' with '-6265'
6262 6264 6266 -6265 0
c Encoding variable: aux1385 with domain: int(0..4) (representing constraint (aux1380 + aux1382))
c Both direct and order encoding.
c Var 'aux1385' order represents '0' with '6267'
c Var 'aux1385' direct represents '0' with '6267'
c Var 'aux1385' order represents '1' with '6268'
-6267 6268 0
c Var 'aux1385' direct represents '1' with '6269'
6267 -6268 6269 0
-6269 6268 0
-6269 -6267 0
c Var 'aux1385' order represents '2' with '6270'
-6268 6270 0
c Var 'aux1385' direct represents '2' with '6271'
6268 -6270 6271 0
-6271 6270 0
-6271 -6268 0
c Var 'aux1385' order represents '3' with '6272'
-6270 6272 0
c Var 'aux1385' direct represents '3' with '6273'
6270 -6272 6273 0
-6273 6272 0
-6273 -6270 0
c Var 'aux1385' direct represents '4' with '-6272'
6267 6269 6271 6273 -6272 0
c Encoding variable: aux1386 with domain: int(0..2) (representing constraint ((x_00003_00001=2) + (x_00002_00003=2)))
c Both direct and order encoding.
c Var 'aux1386' order represents '0' with '6274'
c Var 'aux1386' direct represents '0' with '6274'
c Var 'aux1386' order represents '1' with '6275'
-6274 6275 0
c Var 'aux1386' direct represents '1' with '6276'
6274 -6275 6276 0
-6276 6275 0
-6276 -6274 0
c Var 'aux1386' direct represents '2' with '-6275'
6274 6276 -6275 0
c Encoding variable: aux1387 with domain: int(0..2) (representing constraint ((x_00002_00002=2) + (x_00003_00002=2)))
c Both direct and order encoding.
c Var 'aux1387' order represents '0' with '6277'
c Var 'aux1387' direct represents '0' with '6277'
c Var 'aux1387' order represents '1' with '6278'
-6277 6278 0
c Var 'aux1387' direct represents '1' with '6279'
6277 -6278 6279 0
-6279 6278 0
-6279 -6277 0
c Var 'aux1387' direct represents '2' with '-6278'
6277 6279 -6278 0
c Encoding variable: aux1388 with domain: int(0..2) (representing constraint ((x_00002_00001=2) + (x_00001_00001=2)))
c Both direct and order encoding.
c Var 'aux1388' order represents '0' with '6280'
c Var 'aux1388' direct represents '0' with '6280'
c Var 'aux1388' order represents '1' with '6281'
-6280 6281 0
c Var 'aux1388' direct represents '1' with '6282'
6280 -6281 6282 0
-6282 6281 0
-6282 -6280 0
c Var 'aux1388' direct represents '2' with '-6281'
6280 6282 -6281 0
c Encoding variable: aux1389 with domain: int(0..2) (representing constraint ((x_00001_00003=2) + (x_00001_00002=2)))
c Both direct and order encoding.
c Var 'aux1389' order represents '0' with '6283'
c Var 'aux1389' direct represents '0' with '6283'
c Var 'aux1389' order represents '1' with '6284'
-6283 6284 0
c Var 'aux1389' direct represents '1' with '6285'
6283 -6284 6285 0
-6285 6284 0
-6285 -6283 0
c Var 'aux1389' direct represents '2' with '-6284'
6283 6285 -6284 0
c Encoding variable: aux1390 with domain: int(0..3) (representing constraint ((x_00003_00003=2) + aux1389))
c Both direct and order encoding.
c Var 'aux1390' order represents '0' with '6286'
c Var 'aux1390' direct represents '0' with '6286'
c Var 'aux1390' order represents '1' with '6287'
-6286 6287 0
c Var 'aux1390' direct represents '1' with '6288'
6286 -6287 6288 0
-6288 6287 0
-6288 -6286 0
c Var 'aux1390' order represents '2' with '6289'
-6287 6289 0
c Var 'aux1390' direct represents '2' with '6290'
6287 -6289 6290 0
-6290 6289 0
-6290 -6287 0
c Var 'aux1390' direct represents '3' with '-6289'
6286 6288 6290 -6289 0
c Encoding variable: aux1391 with domain: int(0..4) (representing constraint (aux1386 + aux1388))
c Both direct and order encoding.
c Var 'aux1391' order represents '0' with '6291'
c Var 'aux1391' direct represents '0' with '6291'
c Var 'aux1391' order represents '1' with '6292'
-6291 6292 0
c Var 'aux1391' direct represents '1' with '6293'
6291 -6292 6293 0
-6293 6292 0
-6293 -6291 0
c Var 'aux1391' order represents '2' with '6294'
-6292 6294 0
c Var 'aux1391' direct represents '2' with '6295'
6292 -6294 6295 0
-6295 6294 0
-6295 -6292 0
c Var 'aux1391' order represents '3' with '6296'
-6294 6296 0
c Var 'aux1391' direct represents '3' with '6297'
6294 -6296 6297 0
-6297 6296 0
-6297 -6294 0
c Var 'aux1391' direct represents '4' with '-6296'
6291 6293 6295 6297 -6296 0
c Encoding variable: aux1392 with domain: int(0..2) (representing constraint ((x_00003_00001=3) + (x_00002_00003=3)))
c Both direct and order encoding.
c Var 'aux1392' order represents '0' with '6298'
c Var 'aux1392' direct represents '0' with '6298'
c Var 'aux1392' order represents '1' with '6299'
-6298 6299 0
c Var 'aux1392' direct represents '1' with '6300'
6298 -6299 6300 0
-6300 6299 0
-6300 -6298 0
c Var 'aux1392' direct represents '2' with '-6299'
6298 6300 -6299 0
c Encoding variable: aux1393 with domain: int(0..2) (representing constraint ((x_00002_00002=3) + (x_00003_00002=3)))
c Both direct and order encoding.
c Var 'aux1393' order represents '0' with '6301'
c Var 'aux1393' direct represents '0' with '6301'
c Var 'aux1393' order represents '1' with '6302'
-6301 6302 0
c Var 'aux1393' direct represents '1' with '6303'
6301 -6302 6303 0
-6303 6302 0
-6303 -6301 0
c Var 'aux1393' direct represents '2' with '-6302'
6301 6303 -6302 0
c Encoding variable: aux1394 with domain: int(0..2) (representing constraint ((x_00002_00001=3) + (x_00001_00001=3)))
c Both direct and order encoding.
c Var 'aux1394' order represents '0' with '6304'
c Var 'aux1394' direct represents '0' with '6304'
c Var 'aux1394' order represents '1' with '6305'
-6304 6305 0
c Var 'aux1394' direct represents '1' with '6306'
6304 -6305 6306 0
-6306 6305 0
-6306 -6304 0
c Var 'aux1394' direct represents '2' with '-6305'
6304 6306 -6305 0
c Encoding variable: aux1395 with domain: int(0..2) (representing constraint ((x_00001_00003=3) + (x_00001_00002=3)))
c Both direct and order encoding.
c Var 'aux1395' order represents '0' with '6307'
c Var 'aux1395' direct represents '0' with '6307'
c Var 'aux1395' order represents '1' with '6308'
-6307 6308 0
c Var 'aux1395' direct represents '1' with '6309'
6307 -6308 6309 0
-6309 6308 0
-6309 -6307 0
c Var 'aux1395' direct represents '2' with '-6308'
6307 6309 -6308 0
c Encoding variable: aux1396 with domain: int(0..3) (representing constraint ((x_00003_00003=3) + aux1395))
c Both direct and order encoding.
c Var 'aux1396' order represents '0' with '6310'
c Var 'aux1396' direct represents '0' with '6310'
c Var 'aux1396' order represents '1' with '6311'
-6310 6311 0
c Var 'aux1396' direct represents '1' with '6312'
6310 -6311 6312 0
-6312 6311 0
-6312 -6310 0
c Var 'aux1396' order represents '2' with '6313'
-6311 6313 0
c Var 'aux1396' direct represents '2' with '6314'
6311 -6313 6314 0
-6314 6313 0
-6314 -6311 0
c Var 'aux1396' direct represents '3' with '-6313'
6310 6312 6314 -6313 0
c Encoding variable: aux1397 with domain: int(0..4) (representing constraint (aux1392 + aux1394))
c Both direct and order encoding.
c Var 'aux1397' order represents '0' with '6315'
c Var 'aux1397' direct represents '0' with '6315'
c Var 'aux1397' order represents '1' with '6316'
-6315 6316 0
c Var 'aux1397' direct represents '1' with '6317'
6315 -6316 6317 0
-6317 6316 0
-6317 -6315 0
c Var 'aux1397' order represents '2' with '6318'
-6316 6318 0
c Var 'aux1397' direct represents '2' with '6319'
6316 -6318 6319 0
-6319 6318 0
-6319 -6316 0
c Var 'aux1397' order represents '3' with '6320'
-6318 6320 0
c Var 'aux1397' direct represents '3' with '6321'
6318 -6320 6321 0
-6321 6320 0
-6321 -6318 0
c Var 'aux1397' direct represents '4' with '-6320'
6315 6317 6319 6321 -6320 0
c Encoding variable: aux1398 with domain: int(0..2) (representing constraint ((x_00003_00001=4) + (x_00002_00003=4)))
c Both direct and order encoding.
c Var 'aux1398' order represents '0' with '6322'
c Var 'aux1398' direct represents '0' with '6322'
c Var 'aux1398' order represents '1' with '6323'
-6322 6323 0
c Var 'aux1398' direct represents '1' with '6324'
6322 -6323 6324 0
-6324 6323 0
-6324 -6322 0
c Var 'aux1398' direct represents '2' with '-6323'
6322 6324 -6323 0
c Encoding variable: aux1399 with domain: int(0..2) (representing constraint ((x_00002_00002=4) + (x_00003_00002=4)))
c Both direct and order encoding.
c Var 'aux1399' order represents '0' with '6325'
c Var 'aux1399' direct represents '0' with '6325'
c Var 'aux1399' order represents '1' with '6326'
-6325 6326 0
c Var 'aux1399' direct represents '1' with '6327'
6325 -6326 6327 0
-6327 6326 0
-6327 -6325 0
c Var 'aux1399' direct represents '2' with '-6326'
6325 6327 -6326 0
c Encoding variable: aux1400 with domain: int(0..2) (representing constraint ((x_00002_00001=4) + (x_00001_00001=4)))
c Both direct and order encoding.
c Var 'aux1400' order represents '0' with '6328'
c Var 'aux1400' direct represents '0' with '6328'
c Var 'aux1400' order represents '1' with '6329'
-6328 6329 0
c Var 'aux1400' direct represents '1' with '6330'
6328 -6329 6330 0
-6330 6329 0
-6330 -6328 0
c Var 'aux1400' direct represents '2' with '-6329'
6328 6330 -6329 0
c Encoding variable: aux1401 with domain: int(0..2) (representing constraint ((x_00001_00003=4) + (x_00001_00002=4)))
c Both direct and order encoding.
c Var 'aux1401' order represents '0' with '6331'
c Var 'aux1401' direct represents '0' with '6331'
c Var 'aux1401' order represents '1' with '6332'
-6331 6332 0
c Var 'aux1401' direct represents '1' with '6333'
6331 -6332 6333 0
-6333 6332 0
-6333 -6331 0
c Var 'aux1401' direct represents '2' with '-6332'
6331 6333 -6332 0
c Encoding variable: aux1402 with domain: int(0..3) (representing constraint ((x_00003_00003=4) + aux1401))
c Both direct and order encoding.
c Var 'aux1402' order represents '0' with '6334'
c Var 'aux1402' direct represents '0' with '6334'
c Var 'aux1402' order represents '1' with '6335'
-6334 6335 0
c Var 'aux1402' direct represents '1' with '6336'
6334 -6335 6336 0
-6336 6335 0
-6336 -6334 0
c Var 'aux1402' order represents '2' with '6337'
-6335 6337 0
c Var 'aux1402' direct represents '2' with '6338'
6335 -6337 6338 0
-6338 6337 0
-6338 -6335 0
c Var 'aux1402' direct represents '3' with '-6337'
6334 6336 6338 -6337 0
c Encoding variable: aux1403 with domain: int(0..4) (representing constraint (aux1398 + aux1400))
c Both direct and order encoding.
c Var 'aux1403' order represents '0' with '6339'
c Var 'aux1403' direct represents '0' with '6339'
c Var 'aux1403' order represents '1' with '6340'
-6339 6340 0
c Var 'aux1403' direct represents '1' with '6341'
6339 -6340 6341 0
-6341 6340 0
-6341 -6339 0
c Var 'aux1403' order represents '2' with '6342'
-6340 6342 0
c Var 'aux1403' direct represents '2' with '6343'
6340 -6342 6343 0
-6343 6342 0
-6343 -6340 0
c Var 'aux1403' order represents '3' with '6344'
-6342 6344 0
c Var 'aux1403' direct represents '3' with '6345'
6342 -6344 6345 0
-6345 6344 0
-6345 -6342 0
c Var 'aux1403' direct represents '4' with '-6344'
6339 6341 6343 6345 -6344 0
c Encoding variable: aux1404 with domain: int(0..2) (representing constraint ((x_00003_00001=5) + (x_00002_00003=5)))
c Both direct and order encoding.
c Var 'aux1404' order represents '0' with '6346'
c Var 'aux1404' direct represents '0' with '6346'
c Var 'aux1404' order represents '1' with '6347'
-6346 6347 0
c Var 'aux1404' direct represents '1' with '6348'
6346 -6347 6348 0
-6348 6347 0
-6348 -6346 0
c Var 'aux1404' direct represents '2' with '-6347'
6346 6348 -6347 0
c Encoding variable: aux1405 with domain: int(0..2) (representing constraint ((x_00002_00002=5) + (x_00003_00002=5)))
c Both direct and order encoding.
c Var 'aux1405' order represents '0' with '6349'
c Var 'aux1405' direct represents '0' with '6349'
c Var 'aux1405' order represents '1' with '6350'
-6349 6350 0
c Var 'aux1405' direct represents '1' with '6351'
6349 -6350 6351 0
-6351 6350 0
-6351 -6349 0
c Var 'aux1405' direct represents '2' with '-6350'
6349 6351 -6350 0
c Encoding variable: aux1406 with domain: int(0..2) (representing constraint ((x_00002_00001=5) + (x_00001_00001=5)))
c Both direct and order encoding.
c Var 'aux1406' order represents '0' with '6352'
c Var 'aux1406' direct represents '0' with '6352'
c Var 'aux1406' order represents '1' with '6353'
-6352 6353 0
c Var 'aux1406' direct represents '1' with '6354'
6352 -6353 6354 0
-6354 6353 0
-6354 -6352 0
c Var 'aux1406' direct represents '2' with '-6353'
6352 6354 -6353 0
c Encoding variable: aux1407 with domain: int(0..2) (representing constraint ((x_00001_00003=5) + (x_00001_00002=5)))
c Both direct and order encoding.
c Var 'aux1407' order represents '0' with '6355'
c Var 'aux1407' direct represents '0' with '6355'
c Var 'aux1407' order represents '1' with '6356'
-6355 6356 0
c Var 'aux1407' direct represents '1' with '6357'
6355 -6356 6357 0
-6357 6356 0
-6357 -6355 0
c Var 'aux1407' direct represents '2' with '-6356'
6355 6357 -6356 0
c Encoding variable: aux1408 with domain: int(0..3) (representing constraint ((x_00003_00003=5) + aux1407))
c Both direct and order encoding.
c Var 'aux1408' order represents '0' with '6358'
c Var 'aux1408' direct represents '0' with '6358'
c Var 'aux1408' order represents '1' with '6359'
-6358 6359 0
c Var 'aux1408' direct represents '1' with '6360'
6358 -6359 6360 0
-6360 6359 0
-6360 -6358 0
c Var 'aux1408' order represents '2' with '6361'
-6359 6361 0
c Var 'aux1408' direct represents '2' with '6362'
6359 -6361 6362 0
-6362 6361 0
-6362 -6359 0
c Var 'aux1408' direct represents '3' with '-6361'
6358 6360 6362 -6361 0
c Encoding variable: aux1409 with domain: int(0..4) (representing constraint (aux1404 + aux1406))
c Both direct and order encoding.
c Var 'aux1409' order represents '0' with '6363'
c Var 'aux1409' direct represents '0' with '6363'
c Var 'aux1409' order represents '1' with '6364'
-6363 6364 0
c Var 'aux1409' direct represents '1' with '6365'
6363 -6364 6365 0
-6365 6364 0
-6365 -6363 0
c Var 'aux1409' order represents '2' with '6366'
-6364 6366 0
c Var 'aux1409' direct represents '2' with '6367'
6364 -6366 6367 0
-6367 6366 0
-6367 -6364 0
c Var 'aux1409' order represents '3' with '6368'
-6366 6368 0
c Var 'aux1409' direct represents '3' with '6369'
6366 -6368 6369 0
-6369 6368 0
-6369 -6366 0
c Var 'aux1409' direct represents '4' with '-6368'
6363 6365 6367 6369 -6368 0
c Encoding variable: aux1410 with domain: int(0..2) (representing constraint ((x_00003_00001=6) + (x_00002_00003=6)))
c Both direct and order encoding.
c Var 'aux1410' order represents '0' with '6370'
c Var 'aux1410' direct represents '0' with '6370'
c Var 'aux1410' order represents '1' with '6371'
-6370 6371 0
c Var 'aux1410' direct represents '1' with '6372'
6370 -6371 6372 0
-6372 6371 0
-6372 -6370 0
c Var 'aux1410' direct represents '2' with '-6371'
6370 6372 -6371 0
c Encoding variable: aux1411 with domain: int(0..2) (representing constraint ((x_00002_00002=6) + (x_00003_00002=6)))
c Both direct and order encoding.
c Var 'aux1411' order represents '0' with '6373'
c Var 'aux1411' direct represents '0' with '6373'
c Var 'aux1411' order represents '1' with '6374'
-6373 6374 0
c Var 'aux1411' direct represents '1' with '6375'
6373 -6374 6375 0
-6375 6374 0
-6375 -6373 0
c Var 'aux1411' direct represents '2' with '-6374'
6373 6375 -6374 0
c Encoding variable: aux1412 with domain: int(0..2) (representing constraint ((x_00002_00001=6) + (x_00001_00001=6)))
c Both direct and order encoding.
c Var 'aux1412' order represents '0' with '6376'
c Var 'aux1412' direct represents '0' with '6376'
c Var 'aux1412' order represents '1' with '6377'
-6376 6377 0
c Var 'aux1412' direct represents '1' with '6378'
6376 -6377 6378 0
-6378 6377 0
-6378 -6376 0
c Var 'aux1412' direct represents '2' with '-6377'
6376 6378 -6377 0
c Encoding variable: aux1413 with domain: int(0..2) (representing constraint ((x_00001_00003=6) + (x_00001_00002=6)))
c Both direct and order encoding.
c Var 'aux1413' order represents '0' with '6379'
c Var 'aux1413' direct represents '0' with '6379'
c Var 'aux1413' order represents '1' with '6380'
-6379 6380 0
c Var 'aux1413' direct represents '1' with '6381'
6379 -6380 6381 0
-6381 6380 0
-6381 -6379 0
c Var 'aux1413' direct represents '2' with '-6380'
6379 6381 -6380 0
c Encoding variable: aux1414 with domain: int(0..3) (representing constraint ((x_00003_00003=6) + aux1413))
c Both direct and order encoding.
c Var 'aux1414' order represents '0' with '6382'
c Var 'aux1414' direct represents '0' with '6382'
c Var 'aux1414' order represents '1' with '6383'
-6382 6383 0
c Var 'aux1414' direct represents '1' with '6384'
6382 -6383 6384 0
-6384 6383 0
-6384 -6382 0
c Var 'aux1414' order represents '2' with '6385'
-6383 6385 0
c Var 'aux1414' direct represents '2' with '6386'
6383 -6385 6386 0
-6386 6385 0
-6386 -6383 0
c Var 'aux1414' direct represents '3' with '-6385'
6382 6384 6386 -6385 0
c Encoding variable: aux1415 with domain: int(0..4) (representing constraint (aux1410 + aux1412))
c Both direct and order encoding.
c Var 'aux1415' order represents '0' with '6387'
c Var 'aux1415' direct represents '0' with '6387'
c Var 'aux1415' order represents '1' with '6388'
-6387 6388 0
c Var 'aux1415' direct represents '1' with '6389'
6387 -6388 6389 0
-6389 6388 0
-6389 -6387 0
c Var 'aux1415' order represents '2' with '6390'
-6388 6390 0
c Var 'aux1415' direct represents '2' with '6391'
6388 -6390 6391 0
-6391 6390 0
-6391 -6388 0
c Var 'aux1415' order represents '3' with '6392'
-6390 6392 0
c Var 'aux1415' direct represents '3' with '6393'
6390 -6392 6393 0
-6393 6392 0
-6393 -6390 0
c Var 'aux1415' direct represents '4' with '-6392'
6387 6389 6391 6393 -6392 0
c Encoding variable: aux1416 with domain: int(0..2) (representing constraint ((x_00003_00001=7) + (x_00002_00003=7)))
c Both direct and order encoding.
c Var 'aux1416' order represents '0' with '6394'
c Var 'aux1416' direct represents '0' with '6394'
c Var 'aux1416' order represents '1' with '6395'
-6394 6395 0
c Var 'aux1416' direct represents '1' with '6396'
6394 -6395 6396 0
-6396 6395 0
-6396 -6394 0
c Var 'aux1416' direct represents '2' with '-6395'
6394 6396 -6395 0
c Encoding variable: aux1417 with domain: int(0..2) (representing constraint ((x_00002_00002=7) + (x_00003_00002=7)))
c Both direct and order encoding.
c Var 'aux1417' order represents '0' with '6397'
c Var 'aux1417' direct represents '0' with '6397'
c Var 'aux1417' order represents '1' with '6398'
-6397 6398 0
c Var 'aux1417' direct represents '1' with '6399'
6397 -6398 6399 0
-6399 6398 0
-6399 -6397 0
c Var 'aux1417' direct represents '2' with '-6398'
6397 6399 -6398 0
c Encoding variable: aux1418 with domain: int(0..2) (representing constraint ((x_00002_00001=7) + (x_00001_00001=7)))
c Both direct and order encoding.
c Var 'aux1418' order represents '0' with '6400'
c Var 'aux1418' direct represents '0' with '6400'
c Var 'aux1418' order represents '1' with '6401'
-6400 6401 0
c Var 'aux1418' direct represents '1' with '6402'
6400 -6401 6402 0
-6402 6401 0
-6402 -6400 0
c Var 'aux1418' direct represents '2' with '-6401'
6400 6402 -6401 0
c Encoding variable: aux1419 with domain: int(0..2) (representing constraint ((x_00001_00003=7) + (x_00001_00002=7)))
c Both direct and order encoding.
c Var 'aux1419' order represents '0' with '6403'
c Var 'aux1419' direct represents '0' with '6403'
c Var 'aux1419' order represents '1' with '6404'
-6403 6404 0
c Var 'aux1419' direct represents '1' with '6405'
6403 -6404 6405 0
-6405 6404 0
-6405 -6403 0
c Var 'aux1419' direct represents '2' with '-6404'
6403 6405 -6404 0
c Encoding variable: aux1420 with domain: int(0..3) (representing constraint ((x_00003_00003=7) + aux1419))
c Both direct and order encoding.
c Var 'aux1420' order represents '0' with '6406'
c Var 'aux1420' direct represents '0' with '6406'
c Var 'aux1420' order represents '1' with '6407'
-6406 6407 0
c Var 'aux1420' direct represents '1' with '6408'
6406 -6407 6408 0
-6408 6407 0
-6408 -6406 0
c Var 'aux1420' order represents '2' with '6409'
-6407 6409 0
c Var 'aux1420' direct represents '2' with '6410'
6407 -6409 6410 0
-6410 6409 0
-6410 -6407 0
c Var 'aux1420' direct represents '3' with '-6409'
6406 6408 6410 -6409 0
c Encoding variable: aux1421 with domain: int(0..4) (representing constraint (aux1416 + aux1418))
c Both direct and order encoding.
c Var 'aux1421' order represents '0' with '6411'
c Var 'aux1421' direct represents '0' with '6411'
c Var 'aux1421' order represents '1' with '6412'
-6411 6412 0
c Var 'aux1421' direct represents '1' with '6413'
6411 -6412 6413 0
-6413 6412 0
-6413 -6411 0
c Var 'aux1421' order represents '2' with '6414'
-6412 6414 0
c Var 'aux1421' direct represents '2' with '6415'
6412 -6414 6415 0
-6415 6414 0
-6415 -6412 0
c Var 'aux1421' order represents '3' with '6416'
-6414 6416 0
c Var 'aux1421' direct represents '3' with '6417'
6414 -6416 6417 0
-6417 6416 0
-6417 -6414 0
c Var 'aux1421' direct represents '4' with '-6416'
6411 6413 6415 6417 -6416 0
c Encoding variable: aux1422 with domain: int(0..2) (representing constraint ((x_00003_00001=8) + (x_00002_00003=8)))
c Both direct and order encoding.
c Var 'aux1422' order represents '0' with '6418'
c Var 'aux1422' direct represents '0' with '6418'
c Var 'aux1422' order represents '1' with '6419'
-6418 6419 0
c Var 'aux1422' direct represents '1' with '6420'
6418 -6419 6420 0
-6420 6419 0
-6420 -6418 0
c Var 'aux1422' direct represents '2' with '-6419'
6418 6420 -6419 0
c Encoding variable: aux1423 with domain: int(0..2) (representing constraint ((x_00002_00002=8) + (x_00003_00002=8)))
c Both direct and order encoding.
c Var 'aux1423' order represents '0' with '6421'
c Var 'aux1423' direct represents '0' with '6421'
c Var 'aux1423' order represents '1' with '6422'
-6421 6422 0
c Var 'aux1423' direct represents '1' with '6423'
6421 -6422 6423 0
-6423 6422 0
-6423 -6421 0
c Var 'aux1423' direct represents '2' with '-6422'
6421 6423 -6422 0
c Encoding variable: aux1424 with domain: int(0..2) (representing constraint ((x_00002_00001=8) + (x_00001_00001=8)))
c Both direct and order encoding.
c Var 'aux1424' order represents '0' with '6424'
c Var 'aux1424' direct represents '0' with '6424'
c Var 'aux1424' order represents '1' with '6425'
-6424 6425 0
c Var 'aux1424' direct represents '1' with '6426'
6424 -6425 6426 0
-6426 6425 0
-6426 -6424 0
c Var 'aux1424' direct represents '2' with '-6425'
6424 6426 -6425 0
c Encoding variable: aux1425 with domain: int(0..2) (representing constraint ((x_00001_00003=8) + (x_00001_00002=8)))
c Both direct and order encoding.
c Var 'aux1425' order represents '0' with '6427'
c Var 'aux1425' direct represents '0' with '6427'
c Var 'aux1425' order represents '1' with '6428'
-6427 6428 0
c Var 'aux1425' direct represents '1' with '6429'
6427 -6428 6429 0
-6429 6428 0
-6429 -6427 0
c Var 'aux1425' direct represents '2' with '-6428'
6427 6429 -6428 0
c Encoding variable: aux1426 with domain: int(0..3) (representing constraint ((x_00003_00003=8) + aux1425))
c Both direct and order encoding.
c Var 'aux1426' order represents '0' with '6430'
c Var 'aux1426' direct represents '0' with '6430'
c Var 'aux1426' order represents '1' with '6431'
-6430 6431 0
c Var 'aux1426' direct represents '1' with '6432'
6430 -6431 6432 0
-6432 6431 0
-6432 -6430 0
c Var 'aux1426' order represents '2' with '6433'
-6431 6433 0
c Var 'aux1426' direct represents '2' with '6434'
6431 -6433 6434 0
-6434 6433 0
-6434 -6431 0
c Var 'aux1426' direct represents '3' with '-6433'
6430 6432 6434 -6433 0
c Encoding variable: aux1427 with domain: int(0..4) (representing constraint (aux1422 + aux1424))
c Both direct and order encoding.
c Var 'aux1427' order represents '0' with '6435'
c Var 'aux1427' direct represents '0' with '6435'
c Var 'aux1427' order represents '1' with '6436'
-6435 6436 0
c Var 'aux1427' direct represents '1' with '6437'
6435 -6436 6437 0
-6437 6436 0
-6437 -6435 0
c Var 'aux1427' order represents '2' with '6438'
-6436 6438 0
c Var 'aux1427' direct represents '2' with '6439'
6436 -6438 6439 0
-6439 6438 0
-6439 -6436 0
c Var 'aux1427' order represents '3' with '6440'
-6438 6440 0
c Var 'aux1427' direct represents '3' with '6441'
6438 -6440 6441 0
-6441 6440 0
-6441 -6438 0
c Var 'aux1427' direct represents '4' with '-6440'
6435 6437 6439 6441 -6440 0
c Encoding variable: aux1428 with domain: int(0..2) (representing constraint ((x_00003_00001=9) + (x_00002_00003=9)))
c Both direct and order encoding.
c Var 'aux1428' order represents '0' with '6442'
c Var 'aux1428' direct represents '0' with '6442'
c Var 'aux1428' order represents '1' with '6443'
-6442 6443 0
c Var 'aux1428' direct represents '1' with '6444'
6442 -6443 6444 0
-6444 6443 0
-6444 -6442 0
c Var 'aux1428' direct represents '2' with '-6443'
6442 6444 -6443 0
c Encoding variable: aux1429 with domain: int(0..2) (representing constraint ((x_00002_00002=9) + (x_00003_00002=9)))
c Both direct and order encoding.
c Var 'aux1429' order represents '0' with '6445'
c Var 'aux1429' direct represents '0' with '6445'
c Var 'aux1429' order represents '1' with '6446'
-6445 6446 0
c Var 'aux1429' direct represents '1' with '6447'
6445 -6446 6447 0
-6447 6446 0
-6447 -6445 0
c Var 'aux1429' direct represents '2' with '-6446'
6445 6447 -6446 0
c Encoding variable: aux1430 with domain: int(0..2) (representing constraint ((x_00002_00001=9) + (x_00001_00001=9)))
c Both direct and order encoding.
c Var 'aux1430' order represents '0' with '6448'
c Var 'aux1430' direct represents '0' with '6448'
c Var 'aux1430' order represents '1' with '6449'
-6448 6449 0
c Var 'aux1430' direct represents '1' with '6450'
6448 -6449 6450 0
-6450 6449 0
-6450 -6448 0
c Var 'aux1430' direct represents '2' with '-6449'
6448 6450 -6449 0
c Encoding variable: aux1431 with domain: int(0..2) (representing constraint ((x_00001_00003=9) + (x_00001_00002=9)))
c Both direct and order encoding.
c Var 'aux1431' order represents '0' with '6451'
c Var 'aux1431' direct represents '0' with '6451'
c Var 'aux1431' order represents '1' with '6452'
-6451 6452 0
c Var 'aux1431' direct represents '1' with '6453'
6451 -6452 6453 0
-6453 6452 0
-6453 -6451 0
c Var 'aux1431' direct represents '2' with '-6452'
6451 6453 -6452 0
c Encoding variable: aux1432 with domain: int(0..3) (representing constraint ((x_00003_00003=9) + aux1431))
c Both direct and order encoding.
c Var 'aux1432' order represents '0' with '6454'
c Var 'aux1432' direct represents '0' with '6454'
c Var 'aux1432' order represents '1' with '6455'
-6454 6455 0
c Var 'aux1432' direct represents '1' with '6456'
6454 -6455 6456 0
-6456 6455 0
-6456 -6454 0
c Var 'aux1432' order represents '2' with '6457'
-6455 6457 0
c Var 'aux1432' direct represents '2' with '6458'
6455 -6457 6458 0
-6458 6457 0
-6458 -6455 0
c Var 'aux1432' direct represents '3' with '-6457'
6454 6456 6458 -6457 0
c Encoding variable: aux1433 with domain: int(0..4) (representing constraint (aux1428 + aux1430))
c Both direct and order encoding.
c Var 'aux1433' order represents '0' with '6459'
c Var 'aux1433' direct represents '0' with '6459'
c Var 'aux1433' order represents '1' with '6460'
-6459 6460 0
c Var 'aux1433' direct represents '1' with '6461'
6459 -6460 6461 0
-6461 6460 0
-6461 -6459 0
c Var 'aux1433' order represents '2' with '6462'
-6460 6462 0
c Var 'aux1433' direct represents '2' with '6463'
6460 -6462 6463 0
-6463 6462 0
-6463 -6460 0
c Var 'aux1433' order represents '3' with '6464'
-6462 6464 0
c Var 'aux1433' direct represents '3' with '6465'
6462 -6464 6465 0
-6465 6464 0
-6465 -6462 0
c Var 'aux1433' direct represents '4' with '-6464'
6459 6461 6463 6465 -6464 0
c Encoding variable: aux1434 with domain: int(0..2) (representing constraint ((x_00003_00004=1) + (x_00002_00006=1)))
c Both direct and order encoding.
c Var 'aux1434' order represents '0' with '6466'
c Var 'aux1434' direct represents '0' with '6466'
c Var 'aux1434' order represents '1' with '6467'
-6466 6467 0
c Var 'aux1434' direct represents '1' with '6468'
6466 -6467 6468 0
-6468 6467 0
-6468 -6466 0
c Var 'aux1434' direct represents '2' with '-6467'
6466 6468 -6467 0
c Encoding variable: aux1435 with domain: int(0..2) (representing constraint ((x_00002_00005=1) + (x_00003_00005=1)))
c Both direct and order encoding.
c Var 'aux1435' order represents '0' with '6469'
c Var 'aux1435' direct represents '0' with '6469'
c Var 'aux1435' order represents '1' with '6470'
-6469 6470 0
c Var 'aux1435' direct represents '1' with '6471'
6469 -6470 6471 0
-6471 6470 0
-6471 -6469 0
c Var 'aux1435' direct represents '2' with '-6470'
6469 6471 -6470 0
c Encoding variable: aux1436 with domain: int(0..2) (representing constraint ((x_00002_00004=1) + (x_00001_00004=1)))
c Both direct and order encoding.
c Var 'aux1436' order represents '0' with '6472'
c Var 'aux1436' direct represents '0' with '6472'
c Var 'aux1436' order represents '1' with '6473'
-6472 6473 0
c Var 'aux1436' direct represents '1' with '6474'
6472 -6473 6474 0
-6474 6473 0
-6474 -6472 0
c Var 'aux1436' direct represents '2' with '-6473'
6472 6474 -6473 0
c Encoding variable: aux1437 with domain: int(0..2) (representing constraint ((x_00001_00006=1) + (x_00001_00005=1)))
c Both direct and order encoding.
c Var 'aux1437' order represents '0' with '6475'
c Var 'aux1437' direct represents '0' with '6475'
c Var 'aux1437' order represents '1' with '6476'
-6475 6476 0
c Var 'aux1437' direct represents '1' with '6477'
6475 -6476 6477 0
-6477 6476 0
-6477 -6475 0
c Var 'aux1437' direct represents '2' with '-6476'
6475 6477 -6476 0
c Encoding variable: aux1438 with domain: int(0..3) (representing constraint ((x_00003_00006=1) + aux1437))
c Both direct and order encoding.
c Var 'aux1438' order represents '0' with '6478'
c Var 'aux1438' direct represents '0' with '6478'
c Var 'aux1438' order represents '1' with '6479'
-6478 6479 0
c Var 'aux1438' direct represents '1' with '6480'
6478 -6479 6480 0
-6480 6479 0
-6480 -6478 0
c Var 'aux1438' order represents '2' with '6481'
-6479 6481 0
c Var 'aux1438' direct represents '2' with '6482'
6479 -6481 6482 0
-6482 6481 0
-6482 -6479 0
c Var 'aux1438' direct represents '3' with '-6481'
6478 6480 6482 -6481 0
c Encoding variable: aux1439 with domain: int(0..4) (representing constraint (aux1434 + aux1436))
c Both direct and order encoding.
c Var 'aux1439' order represents '0' with '6483'
c Var 'aux1439' direct represents '0' with '6483'
c Var 'aux1439' order represents '1' with '6484'
-6483 6484 0
c Var 'aux1439' direct represents '1' with '6485'
6483 -6484 6485 0
-6485 6484 0
-6485 -6483 0
c Var 'aux1439' order represents '2' with '6486'
-6484 6486 0
c Var 'aux1439' direct represents '2' with '6487'
6484 -6486 6487 0
-6487 6486 0
-6487 -6484 0
c Var 'aux1439' order represents '3' with '6488'
-6486 6488 0
c Var 'aux1439' direct represents '3' with '6489'
6486 -6488 6489 0
-6489 6488 0
-6489 -6486 0
c Var 'aux1439' direct represents '4' with '-6488'
6483 6485 6487 6489 -6488 0
c Encoding variable: aux1440 with domain: int(0..2) (representing constraint ((x_00003_00004=2) + (x_00002_00006=2)))
c Both direct and order encoding.
c Var 'aux1440' order represents '0' with '6490'
c Var 'aux1440' direct represents '0' with '6490'
c Var 'aux1440' order represents '1' with '6491'
-6490 6491 0
c Var 'aux1440' direct represents '1' with '6492'
6490 -6491 6492 0
-6492 6491 0
-6492 -6490 0
c Var 'aux1440' direct represents '2' with '-6491'
6490 6492 -6491 0
c Encoding variable: aux1441 with domain: int(0..2) (representing constraint ((x_00002_00005=2) + (x_00003_00005=2)))
c Both direct and order encoding.
c Var 'aux1441' order represents '0' with '6493'
c Var 'aux1441' direct represents '0' with '6493'
c Var 'aux1441' order represents '1' with '6494'
-6493 6494 0
c Var 'aux1441' direct represents '1' with '6495'
6493 -6494 6495 0
-6495 6494 0
-6495 -6493 0
c Var 'aux1441' direct represents '2' with '-6494'
6493 6495 -6494 0
c Encoding variable: aux1442 with domain: int(0..2) (representing constraint ((x_00002_00004=2) + (x_00001_00004=2)))
c Both direct and order encoding.
c Var 'aux1442' order represents '0' with '6496'
c Var 'aux1442' direct represents '0' with '6496'
c Var 'aux1442' order represents '1' with '6497'
-6496 6497 0
c Var 'aux1442' direct represents '1' with '6498'
6496 -6497 6498 0
-6498 6497 0
-6498 -6496 0
c Var 'aux1442' direct represents '2' with '-6497'
6496 6498 -6497 0
c Encoding variable: aux1443 with domain: int(0..2) (representing constraint ((x_00001_00006=2) + (x_00001_00005=2)))
c Both direct and order encoding.
c Var 'aux1443' order represents '0' with '6499'
c Var 'aux1443' direct represents '0' with '6499'
c Var 'aux1443' order represents '1' with '6500'
-6499 6500 0
c Var 'aux1443' direct represents '1' with '6501'
6499 -6500 6501 0
-6501 6500 0
-6501 -6499 0
c Var 'aux1443' direct represents '2' with '-6500'
6499 6501 -6500 0
c Encoding variable: aux1444 with domain: int(0..3) (representing constraint ((x_00003_00006=2) + aux1443))
c Both direct and order encoding.
c Var 'aux1444' order represents '0' with '6502'
c Var 'aux1444' direct represents '0' with '6502'
c Var 'aux1444' order represents '1' with '6503'
-6502 6503 0
c Var 'aux1444' direct represents '1' with '6504'
6502 -6503 6504 0
-6504 6503 0
-6504 -6502 0
c Var 'aux1444' order represents '2' with '6505'
-6503 6505 0
c Var 'aux1444' direct represents '2' with '6506'
6503 -6505 6506 0
-6506 6505 0
-6506 -6503 0
c Var 'aux1444' direct represents '3' with '-6505'
6502 6504 6506 -6505 0
c Encoding variable: aux1445 with domain: int(0..4) (representing constraint (aux1440 + aux1442))
c Both direct and order encoding.
c Var 'aux1445' order represents '0' with '6507'
c Var 'aux1445' direct represents '0' with '6507'
c Var 'aux1445' order represents '1' with '6508'
-6507 6508 0
c Var 'aux1445' direct represents '1' with '6509'
6507 -6508 6509 0
-6509 6508 0
-6509 -6507 0
c Var 'aux1445' order represents '2' with '6510'
-6508 6510 0
c Var 'aux1445' direct represents '2' with '6511'
6508 -6510 6511 0
-6511 6510 0
-6511 -6508 0
c Var 'aux1445' order represents '3' with '6512'
-6510 6512 0
c Var 'aux1445' direct represents '3' with '6513'
6510 -6512 6513 0
-6513 6512 0
-6513 -6510 0
c Var 'aux1445' direct represents '4' with '-6512'
6507 6509 6511 6513 -6512 0
c Encoding variable: aux1446 with domain: int(0..2) (representing constraint ((x_00003_00004=3) + (x_00002_00006=3)))
c Both direct and order encoding.
c Var 'aux1446' order represents '0' with '6514'
c Var 'aux1446' direct represents '0' with '6514'
c Var 'aux1446' order represents '1' with '6515'
-6514 6515 0
c Var 'aux1446' direct represents '1' with '6516'
6514 -6515 6516 0
-6516 6515 0
-6516 -6514 0
c Var 'aux1446' direct represents '2' with '-6515'
6514 6516 -6515 0
c Encoding variable: aux1447 with domain: int(0..2) (representing constraint ((x_00002_00005=3) + (x_00003_00005=3)))
c Both direct and order encoding.
c Var 'aux1447' order represents '0' with '6517'
c Var 'aux1447' direct represents '0' with '6517'
c Var 'aux1447' order represents '1' with '6518'
-6517 6518 0
c Var 'aux1447' direct represents '1' with '6519'
6517 -6518 6519 0
-6519 6518 0
-6519 -6517 0
c Var 'aux1447' direct represents '2' with '-6518'
6517 6519 -6518 0
c Encoding variable: aux1448 with domain: int(0..2) (representing constraint ((x_00002_00004=3) + (x_00001_00004=3)))
c Both direct and order encoding.
c Var 'aux1448' order represents '0' with '6520'
c Var 'aux1448' direct represents '0' with '6520'
c Var 'aux1448' order represents '1' with '6521'
-6520 6521 0
c Var 'aux1448' direct represents '1' with '6522'
6520 -6521 6522 0
-6522 6521 0
-6522 -6520 0
c Var 'aux1448' direct represents '2' with '-6521'
6520 6522 -6521 0
c Encoding variable: aux1449 with domain: int(0..2) (representing constraint ((x_00001_00006=3) + (x_00001_00005=3)))
c Both direct and order encoding.
c Var 'aux1449' order represents '0' with '6523'
c Var 'aux1449' direct represents '0' with '6523'
c Var 'aux1449' order represents '1' with '6524'
-6523 6524 0
c Var 'aux1449' direct represents '1' with '6525'
6523 -6524 6525 0
-6525 6524 0
-6525 -6523 0
c Var 'aux1449' direct represents '2' with '-6524'
6523 6525 -6524 0
c Encoding variable: aux1450 with domain: int(0..3) (representing constraint ((x_00003_00006=3) + aux1449))
c Both direct and order encoding.
c Var 'aux1450' order represents '0' with '6526'
c Var 'aux1450' direct represents '0' with '6526'
c Var 'aux1450' order represents '1' with '6527'
-6526 6527 0
c Var 'aux1450' direct represents '1' with '6528'
6526 -6527 6528 0
-6528 6527 0
-6528 -6526 0
c Var 'aux1450' order represents '2' with '6529'
-6527 6529 0
c Var 'aux1450' direct represents '2' with '6530'
6527 -6529 6530 0
-6530 6529 0
-6530 -6527 0
c Var 'aux1450' direct represents '3' with '-6529'
6526 6528 6530 -6529 0
c Encoding variable: aux1451 with domain: int(0..4) (representing constraint (aux1446 + aux1448))
c Both direct and order encoding.
c Var 'aux1451' order represents '0' with '6531'
c Var 'aux1451' direct represents '0' with '6531'
c Var 'aux1451' order represents '1' with '6532'
-6531 6532 0
c Var 'aux1451' direct represents '1' with '6533'
6531 -6532 6533 0
-6533 6532 0
-6533 -6531 0
c Var 'aux1451' order represents '2' with '6534'
-6532 6534 0
c Var 'aux1451' direct represents '2' with '6535'
6532 -6534 6535 0
-6535 6534 0
-6535 -6532 0
c Var 'aux1451' order represents '3' with '6536'
-6534 6536 0
c Var 'aux1451' direct represents '3' with '6537'
6534 -6536 6537 0
-6537 6536 0
-6537 -6534 0
c Var 'aux1451' direct represents '4' with '-6536'
6531 6533 6535 6537 -6536 0
c Encoding variable: aux1452 with domain: int(0..2) (representing constraint ((x_00003_00004=4) + (x_00002_00006=4)))
c Both direct and order encoding.
c Var 'aux1452' order represents '0' with '6538'
c Var 'aux1452' direct represents '0' with '6538'
c Var 'aux1452' order represents '1' with '6539'
-6538 6539 0
c Var 'aux1452' direct represents '1' with '6540'
6538 -6539 6540 0
-6540 6539 0
-6540 -6538 0
c Var 'aux1452' direct represents '2' with '-6539'
6538 6540 -6539 0
c Encoding variable: aux1453 with domain: int(0..2) (representing constraint ((x_00002_00005=4) + (x_00003_00005=4)))
c Both direct and order encoding.
c Var 'aux1453' order represents '0' with '6541'
c Var 'aux1453' direct represents '0' with '6541'
c Var 'aux1453' order represents '1' with '6542'
-6541 6542 0
c Var 'aux1453' direct represents '1' with '6543'
6541 -6542 6543 0
-6543 6542 0
-6543 -6541 0
c Var 'aux1453' direct represents '2' with '-6542'
6541 6543 -6542 0
c Encoding variable: aux1454 with domain: int(0..2) (representing constraint ((x_00002_00004=4) + (x_00001_00004=4)))
c Both direct and order encoding.
c Var 'aux1454' order represents '0' with '6544'
c Var 'aux1454' direct represents '0' with '6544'
c Var 'aux1454' order represents '1' with '6545'
-6544 6545 0
c Var 'aux1454' direct represents '1' with '6546'
6544 -6545 6546 0
-6546 6545 0
-6546 -6544 0
c Var 'aux1454' direct represents '2' with '-6545'
6544 6546 -6545 0
c Encoding variable: aux1455 with domain: int(0..2) (representing constraint ((x_00001_00006=4) + (x_00001_00005=4)))
c Both direct and order encoding.
c Var 'aux1455' order represents '0' with '6547'
c Var 'aux1455' direct represents '0' with '6547'
c Var 'aux1455' order represents '1' with '6548'
-6547 6548 0
c Var 'aux1455' direct represents '1' with '6549'
6547 -6548 6549 0
-6549 6548 0
-6549 -6547 0
c Var 'aux1455' direct represents '2' with '-6548'
6547 6549 -6548 0
c Encoding variable: aux1456 with domain: int(0..3) (representing constraint ((x_00003_00006=4) + aux1455))
c Both direct and order encoding.
c Var 'aux1456' order represents '0' with '6550'
c Var 'aux1456' direct represents '0' with '6550'
c Var 'aux1456' order represents '1' with '6551'
-6550 6551 0
c Var 'aux1456' direct represents '1' with '6552'
6550 -6551 6552 0
-6552 6551 0
-6552 -6550 0
c Var 'aux1456' order represents '2' with '6553'
-6551 6553 0
c Var 'aux1456' direct represents '2' with '6554'
6551 -6553 6554 0
-6554 6553 0
-6554 -6551 0
c Var 'aux1456' direct represents '3' with '-6553'
6550 6552 6554 -6553 0
c Encoding variable: aux1457 with domain: int(0..4) (representing constraint (aux1452 + aux1454))
c Both direct and order encoding.
c Var 'aux1457' order represents '0' with '6555'
c Var 'aux1457' direct represents '0' with '6555'
c Var 'aux1457' order represents '1' with '6556'
-6555 6556 0
c Var 'aux1457' direct represents '1' with '6557'
6555 -6556 6557 0
-6557 6556 0
-6557 -6555 0
c Var 'aux1457' order represents '2' with '6558'
-6556 6558 0
c Var 'aux1457' direct represents '2' with '6559'
6556 -6558 6559 0
-6559 6558 0
-6559 -6556 0
c Var 'aux1457' order represents '3' with '6560'
-6558 6560 0
c Var 'aux1457' direct represents '3' with '6561'
6558 -6560 6561 0
-6561 6560 0
-6561 -6558 0
c Var 'aux1457' direct represents '4' with '-6560'
6555 6557 6559 6561 -6560 0
c Encoding variable: aux1458 with domain: int(0..2) (representing constraint ((x_00003_00004=5) + (x_00002_00006=5)))
c Both direct and order encoding.
c Var 'aux1458' order represents '0' with '6562'
c Var 'aux1458' direct represents '0' with '6562'
c Var 'aux1458' order represents '1' with '6563'
-6562 6563 0
c Var 'aux1458' direct represents '1' with '6564'
6562 -6563 6564 0
-6564 6563 0
-6564 -6562 0
c Var 'aux1458' direct represents '2' with '-6563'
6562 6564 -6563 0
c Encoding variable: aux1459 with domain: int(0..2) (representing constraint ((x_00002_00005=5) + (x_00003_00005=5)))
c Both direct and order encoding.
c Var 'aux1459' order represents '0' with '6565'
c Var 'aux1459' direct represents '0' with '6565'
c Var 'aux1459' order represents '1' with '6566'
-6565 6566 0
c Var 'aux1459' direct represents '1' with '6567'
6565 -6566 6567 0
-6567 6566 0
-6567 -6565 0
c Var 'aux1459' direct represents '2' with '-6566'
6565 6567 -6566 0
c Encoding variable: aux1460 with domain: int(0..2) (representing constraint ((x_00002_00004=5) + (x_00001_00004=5)))
c Both direct and order encoding.
c Var 'aux1460' order represents '0' with '6568'
c Var 'aux1460' direct represents '0' with '6568'
c Var 'aux1460' order represents '1' with '6569'
-6568 6569 0
c Var 'aux1460' direct represents '1' with '6570'
6568 -6569 6570 0
-6570 6569 0
-6570 -6568 0
c Var 'aux1460' direct represents '2' with '-6569'
6568 6570 -6569 0
c Encoding variable: aux1461 with domain: int(0..2) (representing constraint ((x_00001_00006=5) + (x_00001_00005=5)))
c Both direct and order encoding.
c Var 'aux1461' order represents '0' with '6571'
c Var 'aux1461' direct represents '0' with '6571'
c Var 'aux1461' order represents '1' with '6572'
-6571 6572 0
c Var 'aux1461' direct represents '1' with '6573'
6571 -6572 6573 0
-6573 6572 0
-6573 -6571 0
c Var 'aux1461' direct represents '2' with '-6572'
6571 6573 -6572 0
c Encoding variable: aux1462 with domain: int(0..3) (representing constraint ((x_00003_00006=5) + aux1461))
c Both direct and order encoding.
c Var 'aux1462' order represents '0' with '6574'
c Var 'aux1462' direct represents '0' with '6574'
c Var 'aux1462' order represents '1' with '6575'
-6574 6575 0
c Var 'aux1462' direct represents '1' with '6576'
6574 -6575 6576 0
-6576 6575 0
-6576 -6574 0
c Var 'aux1462' order represents '2' with '6577'
-6575 6577 0
c Var 'aux1462' direct represents '2' with '6578'
6575 -6577 6578 0
-6578 6577 0
-6578 -6575 0
c Var 'aux1462' direct represents '3' with '-6577'
6574 6576 6578 -6577 0
c Encoding variable: aux1463 with domain: int(0..4) (representing constraint (aux1458 + aux1460))
c Both direct and order encoding.
c Var 'aux1463' order represents '0' with '6579'
c Var 'aux1463' direct represents '0' with '6579'
c Var 'aux1463' order represents '1' with '6580'
-6579 6580 0
c Var 'aux1463' direct represents '1' with '6581'
6579 -6580 6581 0
-6581 6580 0
-6581 -6579 0
c Var 'aux1463' order represents '2' with '6582'
-6580 6582 0
c Var 'aux1463' direct represents '2' with '6583'
6580 -6582 6583 0
-6583 6582 0
-6583 -6580 0
c Var 'aux1463' order represents '3' with '6584'
-6582 6584 0
c Var 'aux1463' direct represents '3' with '6585'
6582 -6584 6585 0
-6585 6584 0
-6585 -6582 0
c Var 'aux1463' direct represents '4' with '-6584'
6579 6581 6583 6585 -6584 0
c Encoding variable: aux1464 with domain: int(0..2) (representing constraint ((x_00003_00004=6) + (x_00002_00006=6)))
c Both direct and order encoding.
c Var 'aux1464' order represents '0' with '6586'
c Var 'aux1464' direct represents '0' with '6586'
c Var 'aux1464' order represents '1' with '6587'
-6586 6587 0
c Var 'aux1464' direct represents '1' with '6588'
6586 -6587 6588 0
-6588 6587 0
-6588 -6586 0
c Var 'aux1464' direct represents '2' with '-6587'
6586 6588 -6587 0
c Encoding variable: aux1465 with domain: int(0..2) (representing constraint ((x_00002_00005=6) + (x_00003_00005=6)))
c Both direct and order encoding.
c Var 'aux1465' order represents '0' with '6589'
c Var 'aux1465' direct represents '0' with '6589'
c Var 'aux1465' order represents '1' with '6590'
-6589 6590 0
c Var 'aux1465' direct represents '1' with '6591'
6589 -6590 6591 0
-6591 6590 0
-6591 -6589 0
c Var 'aux1465' direct represents '2' with '-6590'
6589 6591 -6590 0
c Encoding variable: aux1466 with domain: int(0..2) (representing constraint ((x_00002_00004=6) + (x_00001_00004=6)))
c Both direct and order encoding.
c Var 'aux1466' order represents '0' with '6592'
c Var 'aux1466' direct represents '0' with '6592'
c Var 'aux1466' order represents '1' with '6593'
-6592 6593 0
c Var 'aux1466' direct represents '1' with '6594'
6592 -6593 6594 0
-6594 6593 0
-6594 -6592 0
c Var 'aux1466' direct represents '2' with '-6593'
6592 6594 -6593 0
c Encoding variable: aux1467 with domain: int(0..2) (representing constraint ((x_00001_00006=6) + (x_00001_00005=6)))
c Both direct and order encoding.
c Var 'aux1467' order represents '0' with '6595'
c Var 'aux1467' direct represents '0' with '6595'
c Var 'aux1467' order represents '1' with '6596'
-6595 6596 0
c Var 'aux1467' direct represents '1' with '6597'
6595 -6596 6597 0
-6597 6596 0
-6597 -6595 0
c Var 'aux1467' direct represents '2' with '-6596'
6595 6597 -6596 0
c Encoding variable: aux1468 with domain: int(0..3) (representing constraint ((x_00003_00006=6) + aux1467))
c Both direct and order encoding.
c Var 'aux1468' order represents '0' with '6598'
c Var 'aux1468' direct represents '0' with '6598'
c Var 'aux1468' order represents '1' with '6599'
-6598 6599 0
c Var 'aux1468' direct represents '1' with '6600'
6598 -6599 6600 0
-6600 6599 0
-6600 -6598 0
c Var 'aux1468' order represents '2' with '6601'
-6599 6601 0
c Var 'aux1468' direct represents '2' with '6602'
6599 -6601 6602 0
-6602 6601 0
-6602 -6599 0
c Var 'aux1468' direct represents '3' with '-6601'
6598 6600 6602 -6601 0
c Encoding variable: aux1469 with domain: int(0..4) (representing constraint (aux1464 + aux1466))
c Both direct and order encoding.
c Var 'aux1469' order represents '0' with '6603'
c Var 'aux1469' direct represents '0' with '6603'
c Var 'aux1469' order represents '1' with '6604'
-6603 6604 0
c Var 'aux1469' direct represents '1' with '6605'
6603 -6604 6605 0
-6605 6604 0
-6605 -6603 0
c Var 'aux1469' order represents '2' with '6606'
-6604 6606 0
c Var 'aux1469' direct represents '2' with '6607'
6604 -6606 6607 0
-6607 6606 0
-6607 -6604 0
c Var 'aux1469' order represents '3' with '6608'
-6606 6608 0
c Var 'aux1469' direct represents '3' with '6609'
6606 -6608 6609 0
-6609 6608 0
-6609 -6606 0
c Var 'aux1469' direct represents '4' with '-6608'
6603 6605 6607 6609 -6608 0
c Encoding variable: aux1470 with domain: int(0..2) (representing constraint ((x_00003_00004=7) + (x_00002_00006=7)))
c Both direct and order encoding.
c Var 'aux1470' order represents '0' with '6610'
c Var 'aux1470' direct represents '0' with '6610'
c Var 'aux1470' order represents '1' with '6611'
-6610 6611 0
c Var 'aux1470' direct represents '1' with '6612'
6610 -6611 6612 0
-6612 6611 0
-6612 -6610 0
c Var 'aux1470' direct represents '2' with '-6611'
6610 6612 -6611 0
c Encoding variable: aux1471 with domain: int(0..2) (representing constraint ((x_00002_00005=7) + (x_00003_00005=7)))
c Both direct and order encoding.
c Var 'aux1471' order represents '0' with '6613'
c Var 'aux1471' direct represents '0' with '6613'
c Var 'aux1471' order represents '1' with '6614'
-6613 6614 0
c Var 'aux1471' direct represents '1' with '6615'
6613 -6614 6615 0
-6615 6614 0
-6615 -6613 0
c Var 'aux1471' direct represents '2' with '-6614'
6613 6615 -6614 0
c Encoding variable: aux1472 with domain: int(0..2) (representing constraint ((x_00002_00004=7) + (x_00001_00004=7)))
c Both direct and order encoding.
c Var 'aux1472' order represents '0' with '6616'
c Var 'aux1472' direct represents '0' with '6616'
c Var 'aux1472' order represents '1' with '6617'
-6616 6617 0
c Var 'aux1472' direct represents '1' with '6618'
6616 -6617 6618 0
-6618 6617 0
-6618 -6616 0
c Var 'aux1472' direct represents '2' with '-6617'
6616 6618 -6617 0
c Encoding variable: aux1473 with domain: int(0..2) (representing constraint ((x_00001_00006=7) + (x_00001_00005=7)))
c Both direct and order encoding.
c Var 'aux1473' order represents '0' with '6619'
c Var 'aux1473' direct represents '0' with '6619'
c Var 'aux1473' order represents '1' with '6620'
-6619 6620 0
c Var 'aux1473' direct represents '1' with '6621'
6619 -6620 6621 0
-6621 6620 0
-6621 -6619 0
c Var 'aux1473' direct represents '2' with '-6620'
6619 6621 -6620 0
c Encoding variable: aux1474 with domain: int(0..3) (representing constraint ((x_00003_00006=7) + aux1473))
c Both direct and order encoding.
c Var 'aux1474' order represents '0' with '6622'
c Var 'aux1474' direct represents '0' with '6622'
c Var 'aux1474' order represents '1' with '6623'
-6622 6623 0
c Var 'aux1474' direct represents '1' with '6624'
6622 -6623 6624 0
-6624 6623 0
-6624 -6622 0
c Var 'aux1474' order represents '2' with '6625'
-6623 6625 0
c Var 'aux1474' direct represents '2' with '6626'
6623 -6625 6626 0
-6626 6625 0
-6626 -6623 0
c Var 'aux1474' direct represents '3' with '-6625'
6622 6624 6626 -6625 0
c Encoding variable: aux1475 with domain: int(0..4) (representing constraint (aux1470 + aux1472))
c Both direct and order encoding.
c Var 'aux1475' order represents '0' with '6627'
c Var 'aux1475' direct represents '0' with '6627'
c Var 'aux1475' order represents '1' with '6628'
-6627 6628 0
c Var 'aux1475' direct represents '1' with '6629'
6627 -6628 6629 0
-6629 6628 0
-6629 -6627 0
c Var 'aux1475' order represents '2' with '6630'
-6628 6630 0
c Var 'aux1475' direct represents '2' with '6631'
6628 -6630 6631 0
-6631 6630 0
-6631 -6628 0
c Var 'aux1475' order represents '3' with '6632'
-6630 6632 0
c Var 'aux1475' direct represents '3' with '6633'
6630 -6632 6633 0
-6633 6632 0
-6633 -6630 0
c Var 'aux1475' direct represents '4' with '-6632'
6627 6629 6631 6633 -6632 0
c Encoding variable: aux1476 with domain: int(0..2) (representing constraint ((x_00003_00004=8) + (x_00002_00006=8)))
c Both direct and order encoding.
c Var 'aux1476' order represents '0' with '6634'
c Var 'aux1476' direct represents '0' with '6634'
c Var 'aux1476' order represents '1' with '6635'
-6634 6635 0
c Var 'aux1476' direct represents '1' with '6636'
6634 -6635 6636 0
-6636 6635 0
-6636 -6634 0
c Var 'aux1476' direct represents '2' with '-6635'
6634 6636 -6635 0
c Encoding variable: aux1477 with domain: int(0..2) (representing constraint ((x_00002_00005=8) + (x_00003_00005=8)))
c Both direct and order encoding.
c Var 'aux1477' order represents '0' with '6637'
c Var 'aux1477' direct represents '0' with '6637'
c Var 'aux1477' order represents '1' with '6638'
-6637 6638 0
c Var 'aux1477' direct represents '1' with '6639'
6637 -6638 6639 0
-6639 6638 0
-6639 -6637 0
c Var 'aux1477' direct represents '2' with '-6638'
6637 6639 -6638 0
c Encoding variable: aux1478 with domain: int(0..2) (representing constraint ((x_00002_00004=8) + (x_00001_00004=8)))
c Both direct and order encoding.
c Var 'aux1478' order represents '0' with '6640'
c Var 'aux1478' direct represents '0' with '6640'
c Var 'aux1478' order represents '1' with '6641'
-6640 6641 0
c Var 'aux1478' direct represents '1' with '6642'
6640 -6641 6642 0
-6642 6641 0
-6642 -6640 0
c Var 'aux1478' direct represents '2' with '-6641'
6640 6642 -6641 0
c Encoding variable: aux1479 with domain: int(0..2) (representing constraint ((x_00001_00006=8) + (x_00001_00005=8)))
c Both direct and order encoding.
c Var 'aux1479' order represents '0' with '6643'
c Var 'aux1479' direct represents '0' with '6643'
c Var 'aux1479' order represents '1' with '6644'
-6643 6644 0
c Var 'aux1479' direct represents '1' with '6645'
6643 -6644 6645 0
-6645 6644 0
-6645 -6643 0
c Var 'aux1479' direct represents '2' with '-6644'
6643 6645 -6644 0
c Encoding variable: aux1480 with domain: int(0..3) (representing constraint ((x_00003_00006=8) + aux1479))
c Both direct and order encoding.
c Var 'aux1480' order represents '0' with '6646'
c Var 'aux1480' direct represents '0' with '6646'
c Var 'aux1480' order represents '1' with '6647'
-6646 6647 0
c Var 'aux1480' direct represents '1' with '6648'
6646 -6647 6648 0
-6648 6647 0
-6648 -6646 0
c Var 'aux1480' order represents '2' with '6649'
-6647 6649 0
c Var 'aux1480' direct represents '2' with '6650'
6647 -6649 6650 0
-6650 6649 0
-6650 -6647 0
c Var 'aux1480' direct represents '3' with '-6649'
6646 6648 6650 -6649 0
c Encoding variable: aux1481 with domain: int(0..4) (representing constraint (aux1476 + aux1478))
c Both direct and order encoding.
c Var 'aux1481' order represents '0' with '6651'
c Var 'aux1481' direct represents '0' with '6651'
c Var 'aux1481' order represents '1' with '6652'
-6651 6652 0
c Var 'aux1481' direct represents '1' with '6653'
6651 -6652 6653 0
-6653 6652 0
-6653 -6651 0
c Var 'aux1481' order represents '2' with '6654'
-6652 6654 0
c Var 'aux1481' direct represents '2' with '6655'
6652 -6654 6655 0
-6655 6654 0
-6655 -6652 0
c Var 'aux1481' order represents '3' with '6656'
-6654 6656 0
c Var 'aux1481' direct represents '3' with '6657'
6654 -6656 6657 0
-6657 6656 0
-6657 -6654 0
c Var 'aux1481' direct represents '4' with '-6656'
6651 6653 6655 6657 -6656 0
c Encoding variable: aux1482 with domain: int(0..2) (representing constraint ((x_00003_00004=9) + (x_00002_00006=9)))
c Both direct and order encoding.
c Var 'aux1482' order represents '0' with '6658'
c Var 'aux1482' direct represents '0' with '6658'
c Var 'aux1482' order represents '1' with '6659'
-6658 6659 0
c Var 'aux1482' direct represents '1' with '6660'
6658 -6659 6660 0
-6660 6659 0
-6660 -6658 0
c Var 'aux1482' direct represents '2' with '-6659'
6658 6660 -6659 0
c Encoding variable: aux1483 with domain: int(0..2) (representing constraint ((x_00002_00005=9) + (x_00003_00005=9)))
c Both direct and order encoding.
c Var 'aux1483' order represents '0' with '6661'
c Var 'aux1483' direct represents '0' with '6661'
c Var 'aux1483' order represents '1' with '6662'
-6661 6662 0
c Var 'aux1483' direct represents '1' with '6663'
6661 -6662 6663 0
-6663 6662 0
-6663 -6661 0
c Var 'aux1483' direct represents '2' with '-6662'
6661 6663 -6662 0
c Encoding variable: aux1484 with domain: int(0..2) (representing constraint ((x_00002_00004=9) + (x_00001_00004=9)))
c Both direct and order encoding.
c Var 'aux1484' order represents '0' with '6664'
c Var 'aux1484' direct represents '0' with '6664'
c Var 'aux1484' order represents '1' with '6665'
-6664 6665 0
c Var 'aux1484' direct represents '1' with '6666'
6664 -6665 6666 0
-6666 6665 0
-6666 -6664 0
c Var 'aux1484' direct represents '2' with '-6665'
6664 6666 -6665 0
c Encoding variable: aux1485 with domain: int(0..2) (representing constraint ((x_00001_00006=9) + (x_00001_00005=9)))
c Both direct and order encoding.
c Var 'aux1485' order represents '0' with '6667'
c Var 'aux1485' direct represents '0' with '6667'
c Var 'aux1485' order represents '1' with '6668'
-6667 6668 0
c Var 'aux1485' direct represents '1' with '6669'
6667 -6668 6669 0
-6669 6668 0
-6669 -6667 0
c Var 'aux1485' direct represents '2' with '-6668'
6667 6669 -6668 0
c Encoding variable: aux1486 with domain: int(0..3) (representing constraint ((x_00003_00006=9) + aux1485))
c Both direct and order encoding.
c Var 'aux1486' order represents '0' with '6670'
c Var 'aux1486' direct represents '0' with '6670'
c Var 'aux1486' order represents '1' with '6671'
-6670 6671 0
c Var 'aux1486' direct represents '1' with '6672'
6670 -6671 6672 0
-6672 6671 0
-6672 -6670 0
c Var 'aux1486' order represents '2' with '6673'
-6671 6673 0
c Var 'aux1486' direct represents '2' with '6674'
6671 -6673 6674 0
-6674 6673 0
-6674 -6671 0
c Var 'aux1486' direct represents '3' with '-6673'
6670 6672 6674 -6673 0
c Encoding variable: aux1487 with domain: int(0..4) (representing constraint (aux1482 + aux1484))
c Both direct and order encoding.
c Var 'aux1487' order represents '0' with '6675'
c Var 'aux1487' direct represents '0' with '6675'
c Var 'aux1487' order represents '1' with '6676'
-6675 6676 0
c Var 'aux1487' direct represents '1' with '6677'
6675 -6676 6677 0
-6677 6676 0
-6677 -6675 0
c Var 'aux1487' order represents '2' with '6678'
-6676 6678 0
c Var 'aux1487' direct represents '2' with '6679'
6676 -6678 6679 0
-6679 6678 0
-6679 -6676 0
c Var 'aux1487' order represents '3' with '6680'
-6678 6680 0
c Var 'aux1487' direct represents '3' with '6681'
6678 -6680 6681 0
-6681 6680 0
-6681 -6678 0
c Var 'aux1487' direct represents '4' with '-6680'
6675 6677 6679 6681 -6680 0
c Encoding variable: aux1488 with domain: int(0..2) (representing constraint ((x_00003_00007=1) + (x_00002_00009=1)))
c Both direct and order encoding.
c Var 'aux1488' order represents '0' with '6682'
c Var 'aux1488' direct represents '0' with '6682'
c Var 'aux1488' order represents '1' with '6683'
-6682 6683 0
c Var 'aux1488' direct represents '1' with '6684'
6682 -6683 6684 0
-6684 6683 0
-6684 -6682 0
c Var 'aux1488' direct represents '2' with '-6683'
6682 6684 -6683 0
c Encoding variable: aux1489 with domain: int(0..2) (representing constraint ((x_00002_00008=1) + (x_00003_00008=1)))
c Both direct and order encoding.
c Var 'aux1489' order represents '0' with '6685'
c Var 'aux1489' direct represents '0' with '6685'
c Var 'aux1489' order represents '1' with '6686'
-6685 6686 0
c Var 'aux1489' direct represents '1' with '6687'
6685 -6686 6687 0
-6687 6686 0
-6687 -6685 0
c Var 'aux1489' direct represents '2' with '-6686'
6685 6687 -6686 0
c Encoding variable: aux1490 with domain: int(0..2) (representing constraint ((x_00002_00007=1) + (x_00001_00007=1)))
c Both direct and order encoding.
c Var 'aux1490' order represents '0' with '6688'
c Var 'aux1490' direct represents '0' with '6688'
c Var 'aux1490' order represents '1' with '6689'
-6688 6689 0
c Var 'aux1490' direct represents '1' with '6690'
6688 -6689 6690 0
-6690 6689 0
-6690 -6688 0
c Var 'aux1490' direct represents '2' with '-6689'
6688 6690 -6689 0
c Encoding variable: aux1491 with domain: int(0..2) (representing constraint ((x_00001_00009=1) + (x_00001_00008=1)))
c Both direct and order encoding.
c Var 'aux1491' order represents '0' with '6691'
c Var 'aux1491' direct represents '0' with '6691'
c Var 'aux1491' order represents '1' with '6692'
-6691 6692 0
c Var 'aux1491' direct represents '1' with '6693'
6691 -6692 6693 0
-6693 6692 0
-6693 -6691 0
c Var 'aux1491' direct represents '2' with '-6692'
6691 6693 -6692 0
c Encoding variable: aux1492 with domain: int(0..3) (representing constraint ((x_00003_00009=1) + aux1491))
c Both direct and order encoding.
c Var 'aux1492' order represents '0' with '6694'
c Var 'aux1492' direct represents '0' with '6694'
c Var 'aux1492' order represents '1' with '6695'
-6694 6695 0
c Var 'aux1492' direct represents '1' with '6696'
6694 -6695 6696 0
-6696 6695 0
-6696 -6694 0
c Var 'aux1492' order represents '2' with '6697'
-6695 6697 0
c Var 'aux1492' direct represents '2' with '6698'
6695 -6697 6698 0
-6698 6697 0
-6698 -6695 0
c Var 'aux1492' direct represents '3' with '-6697'
6694 6696 6698 -6697 0
c Encoding variable: aux1493 with domain: int(0..4) (representing constraint (aux1488 + aux1490))
c Both direct and order encoding.
c Var 'aux1493' order represents '0' with '6699'
c Var 'aux1493' direct represents '0' with '6699'
c Var 'aux1493' order represents '1' with '6700'
-6699 6700 0
c Var 'aux1493' direct represents '1' with '6701'
6699 -6700 6701 0
-6701 6700 0
-6701 -6699 0
c Var 'aux1493' order represents '2' with '6702'
-6700 6702 0
c Var 'aux1493' direct represents '2' with '6703'
6700 -6702 6703 0
-6703 6702 0
-6703 -6700 0
c Var 'aux1493' order represents '3' with '6704'
-6702 6704 0
c Var 'aux1493' direct represents '3' with '6705'
6702 -6704 6705 0
-6705 6704 0
-6705 -6702 0
c Var 'aux1493' direct represents '4' with '-6704'
6699 6701 6703 6705 -6704 0
c Encoding variable: aux1494 with domain: int(0..2) (representing constraint ((x_00003_00007=2) + (x_00002_00009=2)))
c Both direct and order encoding.
c Var 'aux1494' order represents '0' with '6706'
c Var 'aux1494' direct represents '0' with '6706'
c Var 'aux1494' order represents '1' with '6707'
-6706 6707 0
c Var 'aux1494' direct represents '1' with '6708'
6706 -6707 6708 0
-6708 6707 0
-6708 -6706 0
c Var 'aux1494' direct represents '2' with '-6707'
6706 6708 -6707 0
c Encoding variable: aux1495 with domain: int(0..2) (representing constraint ((x_00002_00008=2) + (x_00003_00008=2)))
c Both direct and order encoding.
c Var 'aux1495' order represents '0' with '6709'
c Var 'aux1495' direct represents '0' with '6709'
c Var 'aux1495' order represents '1' with '6710'
-6709 6710 0
c Var 'aux1495' direct represents '1' with '6711'
6709 -6710 6711 0
-6711 6710 0
-6711 -6709 0
c Var 'aux1495' direct represents '2' with '-6710'
6709 6711 -6710 0
c Encoding variable: aux1496 with domain: int(0..2) (representing constraint ((x_00002_00007=2) + (x_00001_00007=2)))
c Both direct and order encoding.
c Var 'aux1496' order represents '0' with '6712'
c Var 'aux1496' direct represents '0' with '6712'
c Var 'aux1496' order represents '1' with '6713'
-6712 6713 0
c Var 'aux1496' direct represents '1' with '6714'
6712 -6713 6714 0
-6714 6713 0
-6714 -6712 0
c Var 'aux1496' direct represents '2' with '-6713'
6712 6714 -6713 0
c Encoding variable: aux1497 with domain: int(0..2) (representing constraint ((x_00001_00009=2) + (x_00001_00008=2)))
c Both direct and order encoding.
c Var 'aux1497' order represents '0' with '6715'
c Var 'aux1497' direct represents '0' with '6715'
c Var 'aux1497' order represents '1' with '6716'
-6715 6716 0
c Var 'aux1497' direct represents '1' with '6717'
6715 -6716 6717 0
-6717 6716 0
-6717 -6715 0
c Var 'aux1497' direct represents '2' with '-6716'
6715 6717 -6716 0
c Encoding variable: aux1498 with domain: int(0..3) (representing constraint ((x_00003_00009=2) + aux1497))
c Both direct and order encoding.
c Var 'aux1498' order represents '0' with '6718'
c Var 'aux1498' direct represents '0' with '6718'
c Var 'aux1498' order represents '1' with '6719'
-6718 6719 0
c Var 'aux1498' direct represents '1' with '6720'
6718 -6719 6720 0
-6720 6719 0
-6720 -6718 0
c Var 'aux1498' order represents '2' with '6721'
-6719 6721 0
c Var 'aux1498' direct represents '2' with '6722'
6719 -6721 6722 0
-6722 6721 0
-6722 -6719 0
c Var 'aux1498' direct represents '3' with '-6721'
6718 6720 6722 -6721 0
c Encoding variable: aux1499 with domain: int(0..4) (representing constraint (aux1494 + aux1496))
c Both direct and order encoding.
c Var 'aux1499' order represents '0' with '6723'
c Var 'aux1499' direct represents '0' with '6723'
c Var 'aux1499' order represents '1' with '6724'
-6723 6724 0
c Var 'aux1499' direct represents '1' with '6725'
6723 -6724 6725 0
-6725 6724 0
-6725 -6723 0
c Var 'aux1499' order represents '2' with '6726'
-6724 6726 0
c Var 'aux1499' direct represents '2' with '6727'
6724 -6726 6727 0
-6727 6726 0
-6727 -6724 0
c Var 'aux1499' order represents '3' with '6728'
-6726 6728 0
c Var 'aux1499' direct represents '3' with '6729'
6726 -6728 6729 0
-6729 6728 0
-6729 -6726 0
c Var 'aux1499' direct represents '4' with '-6728'
6723 6725 6727 6729 -6728 0
c Encoding variable: aux1500 with domain: int(0..2) (representing constraint ((x_00003_00007=3) + (x_00002_00009=3)))
c Both direct and order encoding.
c Var 'aux1500' order represents '0' with '6730'
c Var 'aux1500' direct represents '0' with '6730'
c Var 'aux1500' order represents '1' with '6731'
-6730 6731 0
c Var 'aux1500' direct represents '1' with '6732'
6730 -6731 6732 0
-6732 6731 0
-6732 -6730 0
c Var 'aux1500' direct represents '2' with '-6731'
6730 6732 -6731 0
c Encoding variable: aux1501 with domain: int(0..2) (representing constraint ((x_00002_00008=3) + (x_00003_00008=3)))
c Both direct and order encoding.
c Var 'aux1501' order represents '0' with '6733'
c Var 'aux1501' direct represents '0' with '6733'
c Var 'aux1501' order represents '1' with '6734'
-6733 6734 0
c Var 'aux1501' direct represents '1' with '6735'
6733 -6734 6735 0
-6735 6734 0
-6735 -6733 0
c Var 'aux1501' direct represents '2' with '-6734'
6733 6735 -6734 0
c Encoding variable: aux1502 with domain: int(0..2) (representing constraint ((x_00002_00007=3) + (x_00001_00007=3)))
c Both direct and order encoding.
c Var 'aux1502' order represents '0' with '6736'
c Var 'aux1502' direct represents '0' with '6736'
c Var 'aux1502' order represents '1' with '6737'
-6736 6737 0
c Var 'aux1502' direct represents '1' with '6738'
6736 -6737 6738 0
-6738 6737 0
-6738 -6736 0
c Var 'aux1502' direct represents '2' with '-6737'
6736 6738 -6737 0
c Encoding variable: aux1503 with domain: int(0..2) (representing constraint ((x_00001_00009=3) + (x_00001_00008=3)))
c Both direct and order encoding.
c Var 'aux1503' order represents '0' with '6739'
c Var 'aux1503' direct represents '0' with '6739'
c Var 'aux1503' order represents '1' with '6740'
-6739 6740 0
c Var 'aux1503' direct represents '1' with '6741'
6739 -6740 6741 0
-6741 6740 0
-6741 -6739 0
c Var 'aux1503' direct represents '2' with '-6740'
6739 6741 -6740 0
c Encoding variable: aux1504 with domain: int(0..3) (representing constraint ((x_00003_00009=3) + aux1503))
c Both direct and order encoding.
c Var 'aux1504' order represents '0' with '6742'
c Var 'aux1504' direct represents '0' with '6742'
c Var 'aux1504' order represents '1' with '6743'
-6742 6743 0
c Var 'aux1504' direct represents '1' with '6744'
6742 -6743 6744 0
-6744 6743 0
-6744 -6742 0
c Var 'aux1504' order represents '2' with '6745'
-6743 6745 0
c Var 'aux1504' direct represents '2' with '6746'
6743 -6745 6746 0
-6746 6745 0
-6746 -6743 0
c Var 'aux1504' direct represents '3' with '-6745'
6742 6744 6746 -6745 0
c Encoding variable: aux1505 with domain: int(0..4) (representing constraint (aux1500 + aux1502))
c Both direct and order encoding.
c Var 'aux1505' order represents '0' with '6747'
c Var 'aux1505' direct represents '0' with '6747'
c Var 'aux1505' order represents '1' with '6748'
-6747 6748 0
c Var 'aux1505' direct represents '1' with '6749'
6747 -6748 6749 0
-6749 6748 0
-6749 -6747 0
c Var 'aux1505' order represents '2' with '6750'
-6748 6750 0
c Var 'aux1505' direct represents '2' with '6751'
6748 -6750 6751 0
-6751 6750 0
-6751 -6748 0
c Var 'aux1505' order represents '3' with '6752'
-6750 6752 0
c Var 'aux1505' direct represents '3' with '6753'
6750 -6752 6753 0
-6753 6752 0
-6753 -6750 0
c Var 'aux1505' direct represents '4' with '-6752'
6747 6749 6751 6753 -6752 0
c Encoding variable: aux1506 with domain: int(0..2) (representing constraint ((x_00003_00007=4) + (x_00002_00009=4)))
c Both direct and order encoding.
c Var 'aux1506' order represents '0' with '6754'
c Var 'aux1506' direct represents '0' with '6754'
c Var 'aux1506' order represents '1' with '6755'
-6754 6755 0
c Var 'aux1506' direct represents '1' with '6756'
6754 -6755 6756 0
-6756 6755 0
-6756 -6754 0
c Var 'aux1506' direct represents '2' with '-6755'
6754 6756 -6755 0
c Encoding variable: aux1507 with domain: int(0..2) (representing constraint ((x_00002_00008=4) + (x_00003_00008=4)))
c Both direct and order encoding.
c Var 'aux1507' order represents '0' with '6757'
c Var 'aux1507' direct represents '0' with '6757'
c Var 'aux1507' order represents '1' with '6758'
-6757 6758 0
c Var 'aux1507' direct represents '1' with '6759'
6757 -6758 6759 0
-6759 6758 0
-6759 -6757 0
c Var 'aux1507' direct represents '2' with '-6758'
6757 6759 -6758 0
c Encoding variable: aux1508 with domain: int(0..2) (representing constraint ((x_00002_00007=4) + (x_00001_00007=4)))
c Both direct and order encoding.
c Var 'aux1508' order represents '0' with '6760'
c Var 'aux1508' direct represents '0' with '6760'
c Var 'aux1508' order represents '1' with '6761'
-6760 6761 0
c Var 'aux1508' direct represents '1' with '6762'
6760 -6761 6762 0
-6762 6761 0
-6762 -6760 0
c Var 'aux1508' direct represents '2' with '-6761'
6760 6762 -6761 0
c Encoding variable: aux1509 with domain: int(0..2) (representing constraint ((x_00001_00009=4) + (x_00001_00008=4)))
c Both direct and order encoding.
c Var 'aux1509' order represents '0' with '6763'
c Var 'aux1509' direct represents '0' with '6763'
c Var 'aux1509' order represents '1' with '6764'
-6763 6764 0
c Var 'aux1509' direct represents '1' with '6765'
6763 -6764 6765 0
-6765 6764 0
-6765 -6763 0
c Var 'aux1509' direct represents '2' with '-6764'
6763 6765 -6764 0
c Encoding variable: aux1510 with domain: int(0..3) (representing constraint ((x_00003_00009=4) + aux1509))
c Both direct and order encoding.
c Var 'aux1510' order represents '0' with '6766'
c Var 'aux1510' direct represents '0' with '6766'
c Var 'aux1510' order represents '1' with '6767'
-6766 6767 0
c Var 'aux1510' direct represents '1' with '6768'
6766 -6767 6768 0
-6768 6767 0
-6768 -6766 0
c Var 'aux1510' order represents '2' with '6769'
-6767 6769 0
c Var 'aux1510' direct represents '2' with '6770'
6767 -6769 6770 0
-6770 6769 0
-6770 -6767 0
c Var 'aux1510' direct represents '3' with '-6769'
6766 6768 6770 -6769 0
c Encoding variable: aux1511 with domain: int(0..4) (representing constraint (aux1506 + aux1508))
c Both direct and order encoding.
c Var 'aux1511' order represents '0' with '6771'
c Var 'aux1511' direct represents '0' with '6771'
c Var 'aux1511' order represents '1' with '6772'
-6771 6772 0
c Var 'aux1511' direct represents '1' with '6773'
6771 -6772 6773 0
-6773 6772 0
-6773 -6771 0
c Var 'aux1511' order represents '2' with '6774'
-6772 6774 0
c Var 'aux1511' direct represents '2' with '6775'
6772 -6774 6775 0
-6775 6774 0
-6775 -6772 0
c Var 'aux1511' order represents '3' with '6776'
-6774 6776 0
c Var 'aux1511' direct represents '3' with '6777'
6774 -6776 6777 0
-6777 6776 0
-6777 -6774 0
c Var 'aux1511' direct represents '4' with '-6776'
6771 6773 6775 6777 -6776 0
c Encoding variable: aux1512 with domain: int(0..2) (representing constraint ((x_00003_00007=5) + (x_00002_00009=5)))
c Both direct and order encoding.
c Var 'aux1512' order represents '0' with '6778'
c Var 'aux1512' direct represents '0' with '6778'
c Var 'aux1512' order represents '1' with '6779'
-6778 6779 0
c Var 'aux1512' direct represents '1' with '6780'
6778 -6779 6780 0
-6780 6779 0
-6780 -6778 0
c Var 'aux1512' direct represents '2' with '-6779'
6778 6780 -6779 0
c Encoding variable: aux1513 with domain: int(0..2) (representing constraint ((x_00002_00008=5) + (x_00003_00008=5)))
c Both direct and order encoding.
c Var 'aux1513' order represents '0' with '6781'
c Var 'aux1513' direct represents '0' with '6781'
c Var 'aux1513' order represents '1' with '6782'
-6781 6782 0
c Var 'aux1513' direct represents '1' with '6783'
6781 -6782 6783 0
-6783 6782 0
-6783 -6781 0
c Var 'aux1513' direct represents '2' with '-6782'
6781 6783 -6782 0
c Encoding variable: aux1514 with domain: int(0..2) (representing constraint ((x_00002_00007=5) + (x_00001_00007=5)))
c Both direct and order encoding.
c Var 'aux1514' order represents '0' with '6784'
c Var 'aux1514' direct represents '0' with '6784'
c Var 'aux1514' order represents '1' with '6785'
-6784 6785 0
c Var 'aux1514' direct represents '1' with '6786'
6784 -6785 6786 0
-6786 6785 0
-6786 -6784 0
c Var 'aux1514' direct represents '2' with '-6785'
6784 6786 -6785 0
c Encoding variable: aux1515 with domain: int(0..2) (representing constraint ((x_00001_00009=5) + (x_00001_00008=5)))
c Both direct and order encoding.
c Var 'aux1515' order represents '0' with '6787'
c Var 'aux1515' direct represents '0' with '6787'
c Var 'aux1515' order represents '1' with '6788'
-6787 6788 0
c Var 'aux1515' direct represents '1' with '6789'
6787 -6788 6789 0
-6789 6788 0
-6789 -6787 0
c Var 'aux1515' direct represents '2' with '-6788'
6787 6789 -6788 0
c Encoding variable: aux1516 with domain: int(0..3) (representing constraint ((x_00003_00009=5) + aux1515))
c Both direct and order encoding.
c Var 'aux1516' order represents '0' with '6790'
c Var 'aux1516' direct represents '0' with '6790'
c Var 'aux1516' order represents '1' with '6791'
-6790 6791 0
c Var 'aux1516' direct represents '1' with '6792'
6790 -6791 6792 0
-6792 6791 0
-6792 -6790 0
c Var 'aux1516' order represents '2' with '6793'
-6791 6793 0
c Var 'aux1516' direct represents '2' with '6794'
6791 -6793 6794 0
-6794 6793 0
-6794 -6791 0
c Var 'aux1516' direct represents '3' with '-6793'
6790 6792 6794 -6793 0
c Encoding variable: aux1517 with domain: int(0..4) (representing constraint (aux1512 + aux1514))
c Both direct and order encoding.
c Var 'aux1517' order represents '0' with '6795'
c Var 'aux1517' direct represents '0' with '6795'
c Var 'aux1517' order represents '1' with '6796'
-6795 6796 0
c Var 'aux1517' direct represents '1' with '6797'
6795 -6796 6797 0
-6797 6796 0
-6797 -6795 0
c Var 'aux1517' order represents '2' with '6798'
-6796 6798 0
c Var 'aux1517' direct represents '2' with '6799'
6796 -6798 6799 0
-6799 6798 0
-6799 -6796 0
c Var 'aux1517' order represents '3' with '6800'
-6798 6800 0
c Var 'aux1517' direct represents '3' with '6801'
6798 -6800 6801 0
-6801 6800 0
-6801 -6798 0
c Var 'aux1517' direct represents '4' with '-6800'
6795 6797 6799 6801 -6800 0
c Encoding variable: aux1518 with domain: int(0..2) (representing constraint ((x_00003_00007=6) + (x_00002_00009=6)))
c Both direct and order encoding.
c Var 'aux1518' order represents '0' with '6802'
c Var 'aux1518' direct represents '0' with '6802'
c Var 'aux1518' order represents '1' with '6803'
-6802 6803 0
c Var 'aux1518' direct represents '1' with '6804'
6802 -6803 6804 0
-6804 6803 0
-6804 -6802 0
c Var 'aux1518' direct represents '2' with '-6803'
6802 6804 -6803 0
c Encoding variable: aux1519 with domain: int(0..2) (representing constraint ((x_00002_00008=6) + (x_00003_00008=6)))
c Both direct and order encoding.
c Var 'aux1519' order represents '0' with '6805'
c Var 'aux1519' direct represents '0' with '6805'
c Var 'aux1519' order represents '1' with '6806'
-6805 6806 0
c Var 'aux1519' direct represents '1' with '6807'
6805 -6806 6807 0
-6807 6806 0
-6807 -6805 0
c Var 'aux1519' direct represents '2' with '-6806'
6805 6807 -6806 0
c Encoding variable: aux1520 with domain: int(0..2) (representing constraint ((x_00002_00007=6) + (x_00001_00007=6)))
c Both direct and order encoding.
c Var 'aux1520' order represents '0' with '6808'
c Var 'aux1520' direct represents '0' with '6808'
c Var 'aux1520' order represents '1' with '6809'
-6808 6809 0
c Var 'aux1520' direct represents '1' with '6810'
6808 -6809 6810 0
-6810 6809 0
-6810 -6808 0
c Var 'aux1520' direct represents '2' with '-6809'
6808 6810 -6809 0
c Encoding variable: aux1521 with domain: int(0..2) (representing constraint ((x_00001_00009=6) + (x_00001_00008=6)))
c Both direct and order encoding.
c Var 'aux1521' order represents '0' with '6811'
c Var 'aux1521' direct represents '0' with '6811'
c Var 'aux1521' order represents '1' with '6812'
-6811 6812 0
c Var 'aux1521' direct represents '1' with '6813'
6811 -6812 6813 0
-6813 6812 0
-6813 -6811 0
c Var 'aux1521' direct represents '2' with '-6812'
6811 6813 -6812 0
c Encoding variable: aux1522 with domain: int(0..3) (representing constraint ((x_00003_00009=6) + aux1521))
c Both direct and order encoding.
c Var 'aux1522' order represents '0' with '6814'
c Var 'aux1522' direct represents '0' with '6814'
c Var 'aux1522' order represents '1' with '6815'
-6814 6815 0
c Var 'aux1522' direct represents '1' with '6816'
6814 -6815 6816 0
-6816 6815 0
-6816 -6814 0
c Var 'aux1522' order represents '2' with '6817'
-6815 6817 0
c Var 'aux1522' direct represents '2' with '6818'
6815 -6817 6818 0
-6818 6817 0
-6818 -6815 0
c Var 'aux1522' direct represents '3' with '-6817'
6814 6816 6818 -6817 0
c Encoding variable: aux1523 with domain: int(0..4) (representing constraint (aux1518 + aux1520))
c Both direct and order encoding.
c Var 'aux1523' order represents '0' with '6819'
c Var 'aux1523' direct represents '0' with '6819'
c Var 'aux1523' order represents '1' with '6820'
-6819 6820 0
c Var 'aux1523' direct represents '1' with '6821'
6819 -6820 6821 0
-6821 6820 0
-6821 -6819 0
c Var 'aux1523' order represents '2' with '6822'
-6820 6822 0
c Var 'aux1523' direct represents '2' with '6823'
6820 -6822 6823 0
-6823 6822 0
-6823 -6820 0
c Var 'aux1523' order represents '3' with '6824'
-6822 6824 0
c Var 'aux1523' direct represents '3' with '6825'
6822 -6824 6825 0
-6825 6824 0
-6825 -6822 0
c Var 'aux1523' direct represents '4' with '-6824'
6819 6821 6823 6825 -6824 0
c Encoding variable: aux1524 with domain: int(0..2) (representing constraint ((x_00003_00007=7) + (x_00002_00009=7)))
c Both direct and order encoding.
c Var 'aux1524' order represents '0' with '6826'
c Var 'aux1524' direct represents '0' with '6826'
c Var 'aux1524' order represents '1' with '6827'
-6826 6827 0
c Var 'aux1524' direct represents '1' with '6828'
6826 -6827 6828 0
-6828 6827 0
-6828 -6826 0
c Var 'aux1524' direct represents '2' with '-6827'
6826 6828 -6827 0
c Encoding variable: aux1525 with domain: int(0..2) (representing constraint ((x_00002_00008=7) + (x_00003_00008=7)))
c Both direct and order encoding.
c Var 'aux1525' order represents '0' with '6829'
c Var 'aux1525' direct represents '0' with '6829'
c Var 'aux1525' order represents '1' with '6830'
-6829 6830 0
c Var 'aux1525' direct represents '1' with '6831'
6829 -6830 6831 0
-6831 6830 0
-6831 -6829 0
c Var 'aux1525' direct represents '2' with '-6830'
6829 6831 -6830 0
c Encoding variable: aux1526 with domain: int(0..2) (representing constraint ((x_00002_00007=7) + (x_00001_00007=7)))
c Both direct and order encoding.
c Var 'aux1526' order represents '0' with '6832'
c Var 'aux1526' direct represents '0' with '6832'
c Var 'aux1526' order represents '1' with '6833'
-6832 6833 0
c Var 'aux1526' direct represents '1' with '6834'
6832 -6833 6834 0
-6834 6833 0
-6834 -6832 0
c Var 'aux1526' direct represents '2' with '-6833'
6832 6834 -6833 0
c Encoding variable: aux1527 with domain: int(0..2) (representing constraint ((x_00001_00009=7) + (x_00001_00008=7)))
c Both direct and order encoding.
c Var 'aux1527' order represents '0' with '6835'
c Var 'aux1527' direct represents '0' with '6835'
c Var 'aux1527' order represents '1' with '6836'
-6835 6836 0
c Var 'aux1527' direct represents '1' with '6837'
6835 -6836 6837 0
-6837 6836 0
-6837 -6835 0
c Var 'aux1527' direct represents '2' with '-6836'
6835 6837 -6836 0
c Encoding variable: aux1528 with domain: int(0..3) (representing constraint ((x_00003_00009=7) + aux1527))
c Both direct and order encoding.
c Var 'aux1528' order represents '0' with '6838'
c Var 'aux1528' direct represents '0' with '6838'
c Var 'aux1528' order represents '1' with '6839'
-6838 6839 0
c Var 'aux1528' direct represents '1' with '6840'
6838 -6839 6840 0
-6840 6839 0
-6840 -6838 0
c Var 'aux1528' order represents '2' with '6841'
-6839 6841 0
c Var 'aux1528' direct represents '2' with '6842'
6839 -6841 6842 0
-6842 6841 0
-6842 -6839 0
c Var 'aux1528' direct represents '3' with '-6841'
6838 6840 6842 -6841 0
c Encoding variable: aux1529 with domain: int(0..4) (representing constraint (aux1524 + aux1526))
c Both direct and order encoding.
c Var 'aux1529' order represents '0' with '6843'
c Var 'aux1529' direct represents '0' with '6843'
c Var 'aux1529' order represents '1' with '6844'
-6843 6844 0
c Var 'aux1529' direct represents '1' with '6845'
6843 -6844 6845 0
-6845 6844 0
-6845 -6843 0
c Var 'aux1529' order represents '2' with '6846'
-6844 6846 0
c Var 'aux1529' direct represents '2' with '6847'
6844 -6846 6847 0
-6847 6846 0
-6847 -6844 0
c Var 'aux1529' order represents '3' with '6848'
-6846 6848 0
c Var 'aux1529' direct represents '3' with '6849'
6846 -6848 6849 0
-6849 6848 0
-6849 -6846 0
c Var 'aux1529' direct represents '4' with '-6848'
6843 6845 6847 6849 -6848 0
c Encoding variable: aux1530 with domain: int(0..2) (representing constraint ((x_00003_00007=8) + (x_00002_00009=8)))
c Both direct and order encoding.
c Var 'aux1530' order represents '0' with '6850'
c Var 'aux1530' direct represents '0' with '6850'
c Var 'aux1530' order represents '1' with '6851'
-6850 6851 0
c Var 'aux1530' direct represents '1' with '6852'
6850 -6851 6852 0
-6852 6851 0
-6852 -6850 0
c Var 'aux1530' direct represents '2' with '-6851'
6850 6852 -6851 0
c Encoding variable: aux1531 with domain: int(0..2) (representing constraint ((x_00002_00008=8) + (x_00003_00008=8)))
c Both direct and order encoding.
c Var 'aux1531' order represents '0' with '6853'
c Var 'aux1531' direct represents '0' with '6853'
c Var 'aux1531' order represents '1' with '6854'
-6853 6854 0
c Var 'aux1531' direct represents '1' with '6855'
6853 -6854 6855 0
-6855 6854 0
-6855 -6853 0
c Var 'aux1531' direct represents '2' with '-6854'
6853 6855 -6854 0
c Encoding variable: aux1532 with domain: int(0..2) (representing constraint ((x_00002_00007=8) + (x_00001_00007=8)))
c Both direct and order encoding.
c Var 'aux1532' order represents '0' with '6856'
c Var 'aux1532' direct represents '0' with '6856'
c Var 'aux1532' order represents '1' with '6857'
-6856 6857 0
c Var 'aux1532' direct represents '1' with '6858'
6856 -6857 6858 0
-6858 6857 0
-6858 -6856 0
c Var 'aux1532' direct represents '2' with '-6857'
6856 6858 -6857 0
c Encoding variable: aux1533 with domain: int(0..2) (representing constraint ((x_00001_00009=8) + (x_00001_00008=8)))
c Both direct and order encoding.
c Var 'aux1533' order represents '0' with '6859'
c Var 'aux1533' direct represents '0' with '6859'
c Var 'aux1533' order represents '1' with '6860'
-6859 6860 0
c Var 'aux1533' direct represents '1' with '6861'
6859 -6860 6861 0
-6861 6860 0
-6861 -6859 0
c Var 'aux1533' direct represents '2' with '-6860'
6859 6861 -6860 0
c Encoding variable: aux1534 with domain: int(0..3) (representing constraint ((x_00003_00009=8) + aux1533))
c Both direct and order encoding.
c Var 'aux1534' order represents '0' with '6862'
c Var 'aux1534' direct represents '0' with '6862'
c Var 'aux1534' order represents '1' with '6863'
-6862 6863 0
c Var 'aux1534' direct represents '1' with '6864'
6862 -6863 6864 0
-6864 6863 0
-6864 -6862 0
c Var 'aux1534' order represents '2' with '6865'
-6863 6865 0
c Var 'aux1534' direct represents '2' with '6866'
6863 -6865 6866 0
-6866 6865 0
-6866 -6863 0
c Var 'aux1534' direct represents '3' with '-6865'
6862 6864 6866 -6865 0
c Encoding variable: aux1535 with domain: int(0..4) (representing constraint (aux1530 + aux1532))
c Both direct and order encoding.
c Var 'aux1535' order represents '0' with '6867'
c Var 'aux1535' direct represents '0' with '6867'
c Var 'aux1535' order represents '1' with '6868'
-6867 6868 0
c Var 'aux1535' direct represents '1' with '6869'
6867 -6868 6869 0
-6869 6868 0
-6869 -6867 0
c Var 'aux1535' order represents '2' with '6870'
-6868 6870 0
c Var 'aux1535' direct represents '2' with '6871'
6868 -6870 6871 0
-6871 6870 0
-6871 -6868 0
c Var 'aux1535' order represents '3' with '6872'
-6870 6872 0
c Var 'aux1535' direct represents '3' with '6873'
6870 -6872 6873 0
-6873 6872 0
-6873 -6870 0
c Var 'aux1535' direct represents '4' with '-6872'
6867 6869 6871 6873 -6872 0
c Encoding variable: aux1536 with domain: int(0..2) (representing constraint ((x_00003_00007=9) + (x_00002_00009=9)))
c Both direct and order encoding.
c Var 'aux1536' order represents '0' with '6874'
c Var 'aux1536' direct represents '0' with '6874'
c Var 'aux1536' order represents '1' with '6875'
-6874 6875 0
c Var 'aux1536' direct represents '1' with '6876'
6874 -6875 6876 0
-6876 6875 0
-6876 -6874 0
c Var 'aux1536' direct represents '2' with '-6875'
6874 6876 -6875 0
c Encoding variable: aux1537 with domain: int(0..2) (representing constraint ((x_00002_00008=9) + (x_00003_00008=9)))
c Both direct and order encoding.
c Var 'aux1537' order represents '0' with '6877'
c Var 'aux1537' direct represents '0' with '6877'
c Var 'aux1537' order represents '1' with '6878'
-6877 6878 0
c Var 'aux1537' direct represents '1' with '6879'
6877 -6878 6879 0
-6879 6878 0
-6879 -6877 0
c Var 'aux1537' direct represents '2' with '-6878'
6877 6879 -6878 0
c Encoding variable: aux1538 with domain: int(0..2) (representing constraint ((x_00002_00007=9) + (x_00001_00007=9)))
c Both direct and order encoding.
c Var 'aux1538' order represents '0' with '6880'
c Var 'aux1538' direct represents '0' with '6880'
c Var 'aux1538' order represents '1' with '6881'
-6880 6881 0
c Var 'aux1538' direct represents '1' with '6882'
6880 -6881 6882 0
-6882 6881 0
-6882 -6880 0
c Var 'aux1538' direct represents '2' with '-6881'
6880 6882 -6881 0
c Encoding variable: aux1539 with domain: int(0..2) (representing constraint ((x_00001_00009=9) + (x_00001_00008=9)))
c Both direct and order encoding.
c Var 'aux1539' order represents '0' with '6883'
c Var 'aux1539' direct represents '0' with '6883'
c Var 'aux1539' order represents '1' with '6884'
-6883 6884 0
c Var 'aux1539' direct represents '1' with '6885'
6883 -6884 6885 0
-6885 6884 0
-6885 -6883 0
c Var 'aux1539' direct represents '2' with '-6884'
6883 6885 -6884 0
c Encoding variable: aux1540 with domain: int(0..3) (representing constraint ((x_00003_00009=9) + aux1539))
c Both direct and order encoding.
c Var 'aux1540' order represents '0' with '6886'
c Var 'aux1540' direct represents '0' with '6886'
c Var 'aux1540' order represents '1' with '6887'
-6886 6887 0
c Var 'aux1540' direct represents '1' with '6888'
6886 -6887 6888 0
-6888 6887 0
-6888 -6886 0
c Var 'aux1540' order represents '2' with '6889'
-6887 6889 0
c Var 'aux1540' direct represents '2' with '6890'
6887 -6889 6890 0
-6890 6889 0
-6890 -6887 0
c Var 'aux1540' direct represents '3' with '-6889'
6886 6888 6890 -6889 0
c Encoding variable: aux1541 with domain: int(0..4) (representing constraint (aux1536 + aux1538))
c Both direct and order encoding.
c Var 'aux1541' order represents '0' with '6891'
c Var 'aux1541' direct represents '0' with '6891'
c Var 'aux1541' order represents '1' with '6892'
-6891 6892 0
c Var 'aux1541' direct represents '1' with '6893'
6891 -6892 6893 0
-6893 6892 0
-6893 -6891 0
c Var 'aux1541' order represents '2' with '6894'
-6892 6894 0
c Var 'aux1541' direct represents '2' with '6895'
6892 -6894 6895 0
-6895 6894 0
-6895 -6892 0
c Var 'aux1541' order represents '3' with '6896'
-6894 6896 0
c Var 'aux1541' direct represents '3' with '6897'
6894 -6896 6897 0
-6897 6896 0
-6897 -6894 0
c Var 'aux1541' direct represents '4' with '-6896'
6891 6893 6895 6897 -6896 0
c Encoding variable: aux1542 with domain: int(0..2) (representing constraint ((x_00006_00001=1) + (x_00005_00003=1)))
c Both direct and order encoding.
c Var 'aux1542' order represents '0' with '6898'
c Var 'aux1542' direct represents '0' with '6898'
c Var 'aux1542' order represents '1' with '6899'
-6898 6899 0
c Var 'aux1542' direct represents '1' with '6900'
6898 -6899 6900 0
-6900 6899 0
-6900 -6898 0
c Var 'aux1542' direct represents '2' with '-6899'
6898 6900 -6899 0
c Encoding variable: aux1543 with domain: int(0..2) (representing constraint ((x_00005_00002=1) + (x_00006_00002=1)))
c Both direct and order encoding.
c Var 'aux1543' order represents '0' with '6901'
c Var 'aux1543' direct represents '0' with '6901'
c Var 'aux1543' order represents '1' with '6902'
-6901 6902 0
c Var 'aux1543' direct represents '1' with '6903'
6901 -6902 6903 0
-6903 6902 0
-6903 -6901 0
c Var 'aux1543' direct represents '2' with '-6902'
6901 6903 -6902 0
c Encoding variable: aux1544 with domain: int(0..2) (representing constraint ((x_00005_00001=1) + (x_00004_00001=1)))
c Both direct and order encoding.
c Var 'aux1544' order represents '0' with '6904'
c Var 'aux1544' direct represents '0' with '6904'
c Var 'aux1544' order represents '1' with '6905'
-6904 6905 0
c Var 'aux1544' direct represents '1' with '6906'
6904 -6905 6906 0
-6906 6905 0
-6906 -6904 0
c Var 'aux1544' direct represents '2' with '-6905'
6904 6906 -6905 0
c Encoding variable: aux1545 with domain: int(0..2) (representing constraint ((x_00004_00003=1) + (x_00004_00002=1)))
c Both direct and order encoding.
c Var 'aux1545' order represents '0' with '6907'
c Var 'aux1545' direct represents '0' with '6907'
c Var 'aux1545' order represents '1' with '6908'
-6907 6908 0
c Var 'aux1545' direct represents '1' with '6909'
6907 -6908 6909 0
-6909 6908 0
-6909 -6907 0
c Var 'aux1545' direct represents '2' with '-6908'
6907 6909 -6908 0
c Encoding variable: aux1546 with domain: int(0..3) (representing constraint ((x_00006_00003=1) + aux1545))
c Both direct and order encoding.
c Var 'aux1546' order represents '0' with '6910'
c Var 'aux1546' direct represents '0' with '6910'
c Var 'aux1546' order represents '1' with '6911'
-6910 6911 0
c Var 'aux1546' direct represents '1' with '6912'
6910 -6911 6912 0
-6912 6911 0
-6912 -6910 0
c Var 'aux1546' order represents '2' with '6913'
-6911 6913 0
c Var 'aux1546' direct represents '2' with '6914'
6911 -6913 6914 0
-6914 6913 0
-6914 -6911 0
c Var 'aux1546' direct represents '3' with '-6913'
6910 6912 6914 -6913 0
c Encoding variable: aux1547 with domain: int(0..4) (representing constraint (aux1542 + aux1544))
c Both direct and order encoding.
c Var 'aux1547' order represents '0' with '6915'
c Var 'aux1547' direct represents '0' with '6915'
c Var 'aux1547' order represents '1' with '6916'
-6915 6916 0
c Var 'aux1547' direct represents '1' with '6917'
6915 -6916 6917 0
-6917 6916 0
-6917 -6915 0
c Var 'aux1547' order represents '2' with '6918'
-6916 6918 0
c Var 'aux1547' direct represents '2' with '6919'
6916 -6918 6919 0
-6919 6918 0
-6919 -6916 0
c Var 'aux1547' order represents '3' with '6920'
-6918 6920 0
c Var 'aux1547' direct represents '3' with '6921'
6918 -6920 6921 0
-6921 6920 0
-6921 -6918 0
c Var 'aux1547' direct represents '4' with '-6920'
6915 6917 6919 6921 -6920 0
c Encoding variable: aux1548 with domain: int(0..2) (representing constraint ((x_00006_00001=2) + (x_00005_00003=2)))
c Both direct and order encoding.
c Var 'aux1548' order represents '0' with '6922'
c Var 'aux1548' direct represents '0' with '6922'
c Var 'aux1548' order represents '1' with '6923'
-6922 6923 0
c Var 'aux1548' direct represents '1' with '6924'
6922 -6923 6924 0
-6924 6923 0
-6924 -6922 0
c Var 'aux1548' direct represents '2' with '-6923'
6922 6924 -6923 0
c Encoding variable: aux1549 with domain: int(0..2) (representing constraint ((x_00005_00002=2) + (x_00006_00002=2)))
c Both direct and order encoding.
c Var 'aux1549' order represents '0' with '6925'
c Var 'aux1549' direct represents '0' with '6925'
c Var 'aux1549' order represents '1' with '6926'
-6925 6926 0
c Var 'aux1549' direct represents '1' with '6927'
6925 -6926 6927 0
-6927 6926 0
-6927 -6925 0
c Var 'aux1549' direct represents '2' with '-6926'
6925 6927 -6926 0
c Encoding variable: aux1550 with domain: int(0..2) (representing constraint ((x_00005_00001=2) + (x_00004_00001=2)))
c Both direct and order encoding.
c Var 'aux1550' order represents '0' with '6928'
c Var 'aux1550' direct represents '0' with '6928'
c Var 'aux1550' order represents '1' with '6929'
-6928 6929 0
c Var 'aux1550' direct represents '1' with '6930'
6928 -6929 6930 0
-6930 6929 0
-6930 -6928 0
c Var 'aux1550' direct represents '2' with '-6929'
6928 6930 -6929 0
c Encoding variable: aux1551 with domain: int(0..2) (representing constraint ((x_00004_00003=2) + (x_00004_00002=2)))
c Both direct and order encoding.
c Var 'aux1551' order represents '0' with '6931'
c Var 'aux1551' direct represents '0' with '6931'
c Var 'aux1551' order represents '1' with '6932'
-6931 6932 0
c Var 'aux1551' direct represents '1' with '6933'
6931 -6932 6933 0
-6933 6932 0
-6933 -6931 0
c Var 'aux1551' direct represents '2' with '-6932'
6931 6933 -6932 0
c Encoding variable: aux1552 with domain: int(0..3) (representing constraint ((x_00006_00003=2) + aux1551))
c Both direct and order encoding.
c Var 'aux1552' order represents '0' with '6934'
c Var 'aux1552' direct represents '0' with '6934'
c Var 'aux1552' order represents '1' with '6935'
-6934 6935 0
c Var 'aux1552' direct represents '1' with '6936'
6934 -6935 6936 0
-6936 6935 0
-6936 -6934 0
c Var 'aux1552' order represents '2' with '6937'
-6935 6937 0
c Var 'aux1552' direct represents '2' with '6938'
6935 -6937 6938 0
-6938 6937 0
-6938 -6935 0
c Var 'aux1552' direct represents '3' with '-6937'
6934 6936 6938 -6937 0
c Encoding variable: aux1553 with domain: int(0..4) (representing constraint (aux1548 + aux1550))
c Both direct and order encoding.
c Var 'aux1553' order represents '0' with '6939'
c Var 'aux1553' direct represents '0' with '6939'
c Var 'aux1553' order represents '1' with '6940'
-6939 6940 0
c Var 'aux1553' direct represents '1' with '6941'
6939 -6940 6941 0
-6941 6940 0
-6941 -6939 0
c Var 'aux1553' order represents '2' with '6942'
-6940 6942 0
c Var 'aux1553' direct represents '2' with '6943'
6940 -6942 6943 0
-6943 6942 0
-6943 -6940 0
c Var 'aux1553' order represents '3' with '6944'
-6942 6944 0
c Var 'aux1553' direct represents '3' with '6945'
6942 -6944 6945 0
-6945 6944 0
-6945 -6942 0
c Var 'aux1553' direct represents '4' with '-6944'
6939 6941 6943 6945 -6944 0
c Encoding variable: aux1554 with domain: int(0..2) (representing constraint ((x_00006_00001=3) + (x_00005_00003=3)))
c Both direct and order encoding.
c Var 'aux1554' order represents '0' with '6946'
c Var 'aux1554' direct represents '0' with '6946'
c Var 'aux1554' order represents '1' with '6947'
-6946 6947 0
c Var 'aux1554' direct represents '1' with '6948'
6946 -6947 6948 0
-6948 6947 0
-6948 -6946 0
c Var 'aux1554' direct represents '2' with '-6947'
6946 6948 -6947 0
c Encoding variable: aux1555 with domain: int(0..2) (representing constraint ((x_00005_00002=3) + (x_00006_00002=3)))
c Both direct and order encoding.
c Var 'aux1555' order represents '0' with '6949'
c Var 'aux1555' direct represents '0' with '6949'
c Var 'aux1555' order represents '1' with '6950'
-6949 6950 0
c Var 'aux1555' direct represents '1' with '6951'
6949 -6950 6951 0
-6951 6950 0
-6951 -6949 0
c Var 'aux1555' direct represents '2' with '-6950'
6949 6951 -6950 0
c Encoding variable: aux1556 with domain: int(0..2) (representing constraint ((x_00005_00001=3) + (x_00004_00001=3)))
c Both direct and order encoding.
c Var 'aux1556' order represents '0' with '6952'
c Var 'aux1556' direct represents '0' with '6952'
c Var 'aux1556' order represents '1' with '6953'
-6952 6953 0
c Var 'aux1556' direct represents '1' with '6954'
6952 -6953 6954 0
-6954 6953 0
-6954 -6952 0
c Var 'aux1556' direct represents '2' with '-6953'
6952 6954 -6953 0
c Encoding variable: aux1557 with domain: int(0..2) (representing constraint ((x_00004_00003=3) + (x_00004_00002=3)))
c Both direct and order encoding.
c Var 'aux1557' order represents '0' with '6955'
c Var 'aux1557' direct represents '0' with '6955'
c Var 'aux1557' order represents '1' with '6956'
-6955 6956 0
c Var 'aux1557' direct represents '1' with '6957'
6955 -6956 6957 0
-6957 6956 0
-6957 -6955 0
c Var 'aux1557' direct represents '2' with '-6956'
6955 6957 -6956 0
c Encoding variable: aux1558 with domain: int(0..3) (representing constraint ((x_00006_00003=3) + aux1557))
c Both direct and order encoding.
c Var 'aux1558' order represents '0' with '6958'
c Var 'aux1558' direct represents '0' with '6958'
c Var 'aux1558' order represents '1' with '6959'
-6958 6959 0
c Var 'aux1558' direct represents '1' with '6960'
6958 -6959 6960 0
-6960 6959 0
-6960 -6958 0
c Var 'aux1558' order represents '2' with '6961'
-6959 6961 0
c Var 'aux1558' direct represents '2' with '6962'
6959 -6961 6962 0
-6962 6961 0
-6962 -6959 0
c Var 'aux1558' direct represents '3' with '-6961'
6958 6960 6962 -6961 0
c Encoding variable: aux1559 with domain: int(0..4) (representing constraint (aux1554 + aux1556))
c Both direct and order encoding.
c Var 'aux1559' order represents '0' with '6963'
c Var 'aux1559' direct represents '0' with '6963'
c Var 'aux1559' order represents '1' with '6964'
-6963 6964 0
c Var 'aux1559' direct represents '1' with '6965'
6963 -6964 6965 0
-6965 6964 0
-6965 -6963 0
c Var 'aux1559' order represents '2' with '6966'
-6964 6966 0
c Var 'aux1559' direct represents '2' with '6967'
6964 -6966 6967 0
-6967 6966 0
-6967 -6964 0
c Var 'aux1559' order represents '3' with '6968'
-6966 6968 0
c Var 'aux1559' direct represents '3' with '6969'
6966 -6968 6969 0
-6969 6968 0
-6969 -6966 0
c Var 'aux1559' direct represents '4' with '-6968'
6963 6965 6967 6969 -6968 0
c Encoding variable: aux1560 with domain: int(0..2) (representing constraint ((x_00006_00001=4) + (x_00005_00003=4)))
c Both direct and order encoding.
c Var 'aux1560' order represents '0' with '6970'
c Var 'aux1560' direct represents '0' with '6970'
c Var 'aux1560' order represents '1' with '6971'
-6970 6971 0
c Var 'aux1560' direct represents '1' with '6972'
6970 -6971 6972 0
-6972 6971 0
-6972 -6970 0
c Var 'aux1560' direct represents '2' with '-6971'
6970 6972 -6971 0
c Encoding variable: aux1561 with domain: int(0..2) (representing constraint ((x_00005_00002=4) + (x_00006_00002=4)))
c Both direct and order encoding.
c Var 'aux1561' order represents '0' with '6973'
c Var 'aux1561' direct represents '0' with '6973'
c Var 'aux1561' order represents '1' with '6974'
-6973 6974 0
c Var 'aux1561' direct represents '1' with '6975'
6973 -6974 6975 0
-6975 6974 0
-6975 -6973 0
c Var 'aux1561' direct represents '2' with '-6974'
6973 6975 -6974 0
c Encoding variable: aux1562 with domain: int(0..2) (representing constraint ((x_00005_00001=4) + (x_00004_00001=4)))
c Both direct and order encoding.
c Var 'aux1562' order represents '0' with '6976'
c Var 'aux1562' direct represents '0' with '6976'
c Var 'aux1562' order represents '1' with '6977'
-6976 6977 0
c Var 'aux1562' direct represents '1' with '6978'
6976 -6977 6978 0
-6978 6977 0
-6978 -6976 0
c Var 'aux1562' direct represents '2' with '-6977'
6976 6978 -6977 0
c Encoding variable: aux1563 with domain: int(0..2) (representing constraint ((x_00004_00003=4) + (x_00004_00002=4)))
c Both direct and order encoding.
c Var 'aux1563' order represents '0' with '6979'
c Var 'aux1563' direct represents '0' with '6979'
c Var 'aux1563' order represents '1' with '6980'
-6979 6980 0
c Var 'aux1563' direct represents '1' with '6981'
6979 -6980 6981 0
-6981 6980 0
-6981 -6979 0
c Var 'aux1563' direct represents '2' with '-6980'
6979 6981 -6980 0
c Encoding variable: aux1564 with domain: int(0..3) (representing constraint ((x_00006_00003=4) + aux1563))
c Both direct and order encoding.
c Var 'aux1564' order represents '0' with '6982'
c Var 'aux1564' direct represents '0' with '6982'
c Var 'aux1564' order represents '1' with '6983'
-6982 6983 0
c Var 'aux1564' direct represents '1' with '6984'
6982 -6983 6984 0
-6984 6983 0
-6984 -6982 0
c Var 'aux1564' order represents '2' with '6985'
-6983 6985 0
c Var 'aux1564' direct represents '2' with '6986'
6983 -6985 6986 0
-6986 6985 0
-6986 -6983 0
c Var 'aux1564' direct represents '3' with '-6985'
6982 6984 6986 -6985 0
c Encoding variable: aux1565 with domain: int(0..4) (representing constraint (aux1560 + aux1562))
c Both direct and order encoding.
c Var 'aux1565' order represents '0' with '6987'
c Var 'aux1565' direct represents '0' with '6987'
c Var 'aux1565' order represents '1' with '6988'
-6987 6988 0
c Var 'aux1565' direct represents '1' with '6989'
6987 -6988 6989 0
-6989 6988 0
-6989 -6987 0
c Var 'aux1565' order represents '2' with '6990'
-6988 6990 0
c Var 'aux1565' direct represents '2' with '6991'
6988 -6990 6991 0
-6991 6990 0
-6991 -6988 0
c Var 'aux1565' order represents '3' with '6992'
-6990 6992 0
c Var 'aux1565' direct represents '3' with '6993'
6990 -6992 6993 0
-6993 6992 0
-6993 -6990 0
c Var 'aux1565' direct represents '4' with '-6992'
6987 6989 6991 6993 -6992 0
c Encoding variable: aux1566 with domain: int(0..2) (representing constraint ((x_00006_00001=5) + (x_00005_00003=5)))
c Both direct and order encoding.
c Var 'aux1566' order represents '0' with '6994'
c Var 'aux1566' direct represents '0' with '6994'
c Var 'aux1566' order represents '1' with '6995'
-6994 6995 0
c Var 'aux1566' direct represents '1' with '6996'
6994 -6995 6996 0
-6996 6995 0
-6996 -6994 0
c Var 'aux1566' direct represents '2' with '-6995'
6994 6996 -6995 0
c Encoding variable: aux1567 with domain: int(0..2) (representing constraint ((x_00005_00002=5) + (x_00006_00002=5)))
c Both direct and order encoding.
c Var 'aux1567' order represents '0' with '6997'
c Var 'aux1567' direct represents '0' with '6997'
c Var 'aux1567' order represents '1' with '6998'
-6997 6998 0
c Var 'aux1567' direct represents '1' with '6999'
6997 -6998 6999 0
-6999 6998 0
-6999 -6997 0
c Var 'aux1567' direct represents '2' with '-6998'
6997 6999 -6998 0
c Encoding variable: aux1568 with domain: int(0..2) (representing constraint ((x_00005_00001=5) + (x_00004_00001=5)))
c Both direct and order encoding.
c Var 'aux1568' order represents '0' with '7000'
c Var 'aux1568' direct represents '0' with '7000'
c Var 'aux1568' order represents '1' with '7001'
-7000 7001 0
c Var 'aux1568' direct represents '1' with '7002'
7000 -7001 7002 0
-7002 7001 0
-7002 -7000 0
c Var 'aux1568' direct represents '2' with '-7001'
7000 7002 -7001 0
c Encoding variable: aux1569 with domain: int(0..2) (representing constraint ((x_00004_00003=5) + (x_00004_00002=5)))
c Both direct and order encoding.
c Var 'aux1569' order represents '0' with '7003'
c Var 'aux1569' direct represents '0' with '7003'
c Var 'aux1569' order represents '1' with '7004'
-7003 7004 0
c Var 'aux1569' direct represents '1' with '7005'
7003 -7004 7005 0
-7005 7004 0
-7005 -7003 0
c Var 'aux1569' direct represents '2' with '-7004'
7003 7005 -7004 0
c Encoding variable: aux1570 with domain: int(0..3) (representing constraint ((x_00006_00003=5) + aux1569))
c Both direct and order encoding.
c Var 'aux1570' order represents '0' with '7006'
c Var 'aux1570' direct represents '0' with '7006'
c Var 'aux1570' order represents '1' with '7007'
-7006 7007 0
c Var 'aux1570' direct represents '1' with '7008'
7006 -7007 7008 0
-7008 7007 0
-7008 -7006 0
c Var 'aux1570' order represents '2' with '7009'
-7007 7009 0
c Var 'aux1570' direct represents '2' with '7010'
7007 -7009 7010 0
-7010 7009 0
-7010 -7007 0
c Var 'aux1570' direct represents '3' with '-7009'
7006 7008 7010 -7009 0
c Encoding variable: aux1571 with domain: int(0..4) (representing constraint (aux1566 + aux1568))
c Both direct and order encoding.
c Var 'aux1571' order represents '0' with '7011'
c Var 'aux1571' direct represents '0' with '7011'
c Var 'aux1571' order represents '1' with '7012'
-7011 7012 0
c Var 'aux1571' direct represents '1' with '7013'
7011 -7012 7013 0
-7013 7012 0
-7013 -7011 0
c Var 'aux1571' order represents '2' with '7014'
-7012 7014 0
c Var 'aux1571' direct represents '2' with '7015'
7012 -7014 7015 0
-7015 7014 0
-7015 -7012 0
c Var 'aux1571' order represents '3' with '7016'
-7014 7016 0
c Var 'aux1571' direct represents '3' with '7017'
7014 -7016 7017 0
-7017 7016 0
-7017 -7014 0
c Var 'aux1571' direct represents '4' with '-7016'
7011 7013 7015 7017 -7016 0
c Encoding variable: aux1572 with domain: int(0..2) (representing constraint ((x_00006_00001=6) + (x_00005_00003=6)))
c Both direct and order encoding.
c Var 'aux1572' order represents '0' with '7018'
c Var 'aux1572' direct represents '0' with '7018'
c Var 'aux1572' order represents '1' with '7019'
-7018 7019 0
c Var 'aux1572' direct represents '1' with '7020'
7018 -7019 7020 0
-7020 7019 0
-7020 -7018 0
c Var 'aux1572' direct represents '2' with '-7019'
7018 7020 -7019 0
c Encoding variable: aux1573 with domain: int(0..2) (representing constraint ((x_00005_00002=6) + (x_00006_00002=6)))
c Both direct and order encoding.
c Var 'aux1573' order represents '0' with '7021'
c Var 'aux1573' direct represents '0' with '7021'
c Var 'aux1573' order represents '1' with '7022'
-7021 7022 0
c Var 'aux1573' direct represents '1' with '7023'
7021 -7022 7023 0
-7023 7022 0
-7023 -7021 0
c Var 'aux1573' direct represents '2' with '-7022'
7021 7023 -7022 0
c Encoding variable: aux1574 with domain: int(0..2) (representing constraint ((x_00005_00001=6) + (x_00004_00001=6)))
c Both direct and order encoding.
c Var 'aux1574' order represents '0' with '7024'
c Var 'aux1574' direct represents '0' with '7024'
c Var 'aux1574' order represents '1' with '7025'
-7024 7025 0
c Var 'aux1574' direct represents '1' with '7026'
7024 -7025 7026 0
-7026 7025 0
-7026 -7024 0
c Var 'aux1574' direct represents '2' with '-7025'
7024 7026 -7025 0
c Encoding variable: aux1575 with domain: int(0..2) (representing constraint ((x_00004_00003=6) + (x_00004_00002=6)))
c Both direct and order encoding.
c Var 'aux1575' order represents '0' with '7027'
c Var 'aux1575' direct represents '0' with '7027'
c Var 'aux1575' order represents '1' with '7028'
-7027 7028 0
c Var 'aux1575' direct represents '1' with '7029'
7027 -7028 7029 0
-7029 7028 0
-7029 -7027 0
c Var 'aux1575' direct represents '2' with '-7028'
7027 7029 -7028 0
c Encoding variable: aux1576 with domain: int(0..3) (representing constraint ((x_00006_00003=6) + aux1575))
c Both direct and order encoding.
c Var 'aux1576' order represents '0' with '7030'
c Var 'aux1576' direct represents '0' with '7030'
c Var 'aux1576' order represents '1' with '7031'
-7030 7031 0
c Var 'aux1576' direct represents '1' with '7032'
7030 -7031 7032 0
-7032 7031 0
-7032 -7030 0
c Var 'aux1576' order represents '2' with '7033'
-7031 7033 0
c Var 'aux1576' direct represents '2' with '7034'
7031 -7033 7034 0
-7034 7033 0
-7034 -7031 0
c Var 'aux1576' direct represents '3' with '-7033'
7030 7032 7034 -7033 0
c Encoding variable: aux1577 with domain: int(0..4) (representing constraint (aux1572 + aux1574))
c Both direct and order encoding.
c Var 'aux1577' order represents '0' with '7035'
c Var 'aux1577' direct represents '0' with '7035'
c Var 'aux1577' order represents '1' with '7036'
-7035 7036 0
c Var 'aux1577' direct represents '1' with '7037'
7035 -7036 7037 0
-7037 7036 0
-7037 -7035 0
c Var 'aux1577' order represents '2' with '7038'
-7036 7038 0
c Var 'aux1577' direct represents '2' with '7039'
7036 -7038 7039 0
-7039 7038 0
-7039 -7036 0
c Var 'aux1577' order represents '3' with '7040'
-7038 7040 0
c Var 'aux1577' direct represents '3' with '7041'
7038 -7040 7041 0
-7041 7040 0
-7041 -7038 0
c Var 'aux1577' direct represents '4' with '-7040'
7035 7037 7039 7041 -7040 0
c Encoding variable: aux1578 with domain: int(0..2) (representing constraint ((x_00006_00001=7) + (x_00005_00003=7)))
c Both direct and order encoding.
c Var 'aux1578' order represents '0' with '7042'
c Var 'aux1578' direct represents '0' with '7042'
c Var 'aux1578' order represents '1' with '7043'
-7042 7043 0
c Var 'aux1578' direct represents '1' with '7044'
7042 -7043 7044 0
-7044 7043 0
-7044 -7042 0
c Var 'aux1578' direct represents '2' with '-7043'
7042 7044 -7043 0
c Encoding variable: aux1579 with domain: int(0..2) (representing constraint ((x_00005_00002=7) + (x_00006_00002=7)))
c Both direct and order encoding.
c Var 'aux1579' order represents '0' with '7045'
c Var 'aux1579' direct represents '0' with '7045'
c Var 'aux1579' order represents '1' with '7046'
-7045 7046 0
c Var 'aux1579' direct represents '1' with '7047'
7045 -7046 7047 0
-7047 7046 0
-7047 -7045 0
c Var 'aux1579' direct represents '2' with '-7046'
7045 7047 -7046 0
c Encoding variable: aux1580 with domain: int(0..2) (representing constraint ((x_00005_00001=7) + (x_00004_00001=7)))
c Both direct and order encoding.
c Var 'aux1580' order represents '0' with '7048'
c Var 'aux1580' direct represents '0' with '7048'
c Var 'aux1580' order represents '1' with '7049'
-7048 7049 0
c Var 'aux1580' direct represents '1' with '7050'
7048 -7049 7050 0
-7050 7049 0
-7050 -7048 0
c Var 'aux1580' direct represents '2' with '-7049'
7048 7050 -7049 0
c Encoding variable: aux1581 with domain: int(0..2) (representing constraint ((x_00004_00003=7) + (x_00004_00002=7)))
c Both direct and order encoding.
c Var 'aux1581' order represents '0' with '7051'
c Var 'aux1581' direct represents '0' with '7051'
c Var 'aux1581' order represents '1' with '7052'
-7051 7052 0
c Var 'aux1581' direct represents '1' with '7053'
7051 -7052 7053 0
-7053 7052 0
-7053 -7051 0
c Var 'aux1581' direct represents '2' with '-7052'
7051 7053 -7052 0
c Encoding variable: aux1582 with domain: int(0..3) (representing constraint ((x_00006_00003=7) + aux1581))
c Both direct and order encoding.
c Var 'aux1582' order represents '0' with '7054'
c Var 'aux1582' direct represents '0' with '7054'
c Var 'aux1582' order represents '1' with '7055'
-7054 7055 0
c Var 'aux1582' direct represents '1' with '7056'
7054 -7055 7056 0
-7056 7055 0
-7056 -7054 0
c Var 'aux1582' order represents '2' with '7057'
-7055 7057 0
c Var 'aux1582' direct represents '2' with '7058'
7055 -7057 7058 0
-7058 7057 0
-7058 -7055 0
c Var 'aux1582' direct represents '3' with '-7057'
7054 7056 7058 -7057 0
c Encoding variable: aux1583 with domain: int(0..4) (representing constraint (aux1578 + aux1580))
c Both direct and order encoding.
c Var 'aux1583' order represents '0' with '7059'
c Var 'aux1583' direct represents '0' with '7059'
c Var 'aux1583' order represents '1' with '7060'
-7059 7060 0
c Var 'aux1583' direct represents '1' with '7061'
7059 -7060 7061 0
-7061 7060 0
-7061 -7059 0
c Var 'aux1583' order represents '2' with '7062'
-7060 7062 0
c Var 'aux1583' direct represents '2' with '7063'
7060 -7062 7063 0
-7063 7062 0
-7063 -7060 0
c Var 'aux1583' order represents '3' with '7064'
-7062 7064 0
c Var 'aux1583' direct represents '3' with '7065'
7062 -7064 7065 0
-7065 7064 0
-7065 -7062 0
c Var 'aux1583' direct represents '4' with '-7064'
7059 7061 7063 7065 -7064 0
c Encoding variable: aux1584 with domain: int(0..2) (representing constraint ((x_00006_00001=8) + (x_00005_00003=8)))
c Both direct and order encoding.
c Var 'aux1584' order represents '0' with '7066'
c Var 'aux1584' direct represents '0' with '7066'
c Var 'aux1584' order represents '1' with '7067'
-7066 7067 0
c Var 'aux1584' direct represents '1' with '7068'
7066 -7067 7068 0
-7068 7067 0
-7068 -7066 0
c Var 'aux1584' direct represents '2' with '-7067'
7066 7068 -7067 0
c Encoding variable: aux1585 with domain: int(0..2) (representing constraint ((x_00005_00002=8) + (x_00006_00002=8)))
c Both direct and order encoding.
c Var 'aux1585' order represents '0' with '7069'
c Var 'aux1585' direct represents '0' with '7069'
c Var 'aux1585' order represents '1' with '7070'
-7069 7070 0
c Var 'aux1585' direct represents '1' with '7071'
7069 -7070 7071 0
-7071 7070 0
-7071 -7069 0
c Var 'aux1585' direct represents '2' with '-7070'
7069 7071 -7070 0
c Encoding variable: aux1586 with domain: int(0..2) (representing constraint ((x_00005_00001=8) + (x_00004_00001=8)))
c Both direct and order encoding.
c Var 'aux1586' order represents '0' with '7072'
c Var 'aux1586' direct represents '0' with '7072'
c Var 'aux1586' order represents '1' with '7073'
-7072 7073 0
c Var 'aux1586' direct represents '1' with '7074'
7072 -7073 7074 0
-7074 7073 0
-7074 -7072 0
c Var 'aux1586' direct represents '2' with '-7073'
7072 7074 -7073 0
c Encoding variable: aux1587 with domain: int(0..2) (representing constraint ((x_00004_00003=8) + (x_00004_00002=8)))
c Both direct and order encoding.
c Var 'aux1587' order represents '0' with '7075'
c Var 'aux1587' direct represents '0' with '7075'
c Var 'aux1587' order represents '1' with '7076'
-7075 7076 0
c Var 'aux1587' direct represents '1' with '7077'
7075 -7076 7077 0
-7077 7076 0
-7077 -7075 0
c Var 'aux1587' direct represents '2' with '-7076'
7075 7077 -7076 0
c Encoding variable: aux1588 with domain: int(0..3) (representing constraint ((x_00006_00003=8) + aux1587))
c Both direct and order encoding.
c Var 'aux1588' order represents '0' with '7078'
c Var 'aux1588' direct represents '0' with '7078'
c Var 'aux1588' order represents '1' with '7079'
-7078 7079 0
c Var 'aux1588' direct represents '1' with '7080'
7078 -7079 7080 0
-7080 7079 0
-7080 -7078 0
c Var 'aux1588' order represents '2' with '7081'
-7079 7081 0
c Var 'aux1588' direct represents '2' with '7082'
7079 -7081 7082 0
-7082 7081 0
-7082 -7079 0
c Var 'aux1588' direct represents '3' with '-7081'
7078 7080 7082 -7081 0
c Encoding variable: aux1589 with domain: int(0..4) (representing constraint (aux1584 + aux1586))
c Both direct and order encoding.
c Var 'aux1589' order represents '0' with '7083'
c Var 'aux1589' direct represents '0' with '7083'
c Var 'aux1589' order represents '1' with '7084'
-7083 7084 0
c Var 'aux1589' direct represents '1' with '7085'
7083 -7084 7085 0
-7085 7084 0
-7085 -7083 0
c Var 'aux1589' order represents '2' with '7086'
-7084 7086 0
c Var 'aux1589' direct represents '2' with '7087'
7084 -7086 7087 0
-7087 7086 0
-7087 -7084 0
c Var 'aux1589' order represents '3' with '7088'
-7086 7088 0
c Var 'aux1589' direct represents '3' with '7089'
7086 -7088 7089 0
-7089 7088 0
-7089 -7086 0
c Var 'aux1589' direct represents '4' with '-7088'
7083 7085 7087 7089 -7088 0
c Encoding variable: aux1590 with domain: int(0..2) (representing constraint ((x_00006_00001=9) + (x_00005_00003=9)))
c Both direct and order encoding.
c Var 'aux1590' order represents '0' with '7090'
c Var 'aux1590' direct represents '0' with '7090'
c Var 'aux1590' order represents '1' with '7091'
-7090 7091 0
c Var 'aux1590' direct represents '1' with '7092'
7090 -7091 7092 0
-7092 7091 0
-7092 -7090 0
c Var 'aux1590' direct represents '2' with '-7091'
7090 7092 -7091 0
c Encoding variable: aux1591 with domain: int(0..2) (representing constraint ((x_00005_00002=9) + (x_00006_00002=9)))
c Both direct and order encoding.
c Var 'aux1591' order represents '0' with '7093'
c Var 'aux1591' direct represents '0' with '7093'
c Var 'aux1591' order represents '1' with '7094'
-7093 7094 0
c Var 'aux1591' direct represents '1' with '7095'
7093 -7094 7095 0
-7095 7094 0
-7095 -7093 0
c Var 'aux1591' direct represents '2' with '-7094'
7093 7095 -7094 0
c Encoding variable: aux1592 with domain: int(0..2) (representing constraint ((x_00005_00001=9) + (x_00004_00001=9)))
c Both direct and order encoding.
c Var 'aux1592' order represents '0' with '7096'
c Var 'aux1592' direct represents '0' with '7096'
c Var 'aux1592' order represents '1' with '7097'
-7096 7097 0
c Var 'aux1592' direct represents '1' with '7098'
7096 -7097 7098 0
-7098 7097 0
-7098 -7096 0
c Var 'aux1592' direct represents '2' with '-7097'
7096 7098 -7097 0
c Encoding variable: aux1593 with domain: int(0..2) (representing constraint ((x_00004_00003=9) + (x_00004_00002=9)))
c Both direct and order encoding.
c Var 'aux1593' order represents '0' with '7099'
c Var 'aux1593' direct represents '0' with '7099'
c Var 'aux1593' order represents '1' with '7100'
-7099 7100 0
c Var 'aux1593' direct represents '1' with '7101'
7099 -7100 7101 0
-7101 7100 0
-7101 -7099 0
c Var 'aux1593' direct represents '2' with '-7100'
7099 7101 -7100 0
c Encoding variable: aux1594 with domain: int(0..3) (representing constraint ((x_00006_00003=9) + aux1593))
c Both direct and order encoding.
c Var 'aux1594' order represents '0' with '7102'
c Var 'aux1594' direct represents '0' with '7102'
c Var 'aux1594' order represents '1' with '7103'
-7102 7103 0
c Var 'aux1594' direct represents '1' with '7104'
7102 -7103 7104 0
-7104 7103 0
-7104 -7102 0
c Var 'aux1594' order represents '2' with '7105'
-7103 7105 0
c Var 'aux1594' direct represents '2' with '7106'
7103 -7105 7106 0
-7106 7105 0
-7106 -7103 0
c Var 'aux1594' direct represents '3' with '-7105'
7102 7104 7106 -7105 0
c Encoding variable: aux1595 with domain: int(0..4) (representing constraint (aux1590 + aux1592))
c Both direct and order encoding.
c Var 'aux1595' order represents '0' with '7107'
c Var 'aux1595' direct represents '0' with '7107'
c Var 'aux1595' order represents '1' with '7108'
-7107 7108 0
c Var 'aux1595' direct represents '1' with '7109'
7107 -7108 7109 0
-7109 7108 0
-7109 -7107 0
c Var 'aux1595' order represents '2' with '7110'
-7108 7110 0
c Var 'aux1595' direct represents '2' with '7111'
7108 -7110 7111 0
-7111 7110 0
-7111 -7108 0
c Var 'aux1595' order represents '3' with '7112'
-7110 7112 0
c Var 'aux1595' direct represents '3' with '7113'
7110 -7112 7113 0
-7113 7112 0
-7113 -7110 0
c Var 'aux1595' direct represents '4' with '-7112'
7107 7109 7111 7113 -7112 0
c Encoding variable: aux1596 with domain: int(0..2) (representing constraint ((x_00006_00004=1) + (x_00005_00006=1)))
c Both direct and order encoding.
c Var 'aux1596' order represents '0' with '7114'
c Var 'aux1596' direct represents '0' with '7114'
c Var 'aux1596' order represents '1' with '7115'
-7114 7115 0
c Var 'aux1596' direct represents '1' with '7116'
7114 -7115 7116 0
-7116 7115 0
-7116 -7114 0
c Var 'aux1596' direct represents '2' with '-7115'
7114 7116 -7115 0
c Encoding variable: aux1597 with domain: int(0..2) (representing constraint ((x_00005_00005=1) + (x_00006_00005=1)))
c Both direct and order encoding.
c Var 'aux1597' order represents '0' with '7117'
c Var 'aux1597' direct represents '0' with '7117'
c Var 'aux1597' order represents '1' with '7118'
-7117 7118 0
c Var 'aux1597' direct represents '1' with '7119'
7117 -7118 7119 0
-7119 7118 0
-7119 -7117 0
c Var 'aux1597' direct represents '2' with '-7118'
7117 7119 -7118 0
c Encoding variable: aux1598 with domain: int(0..2) (representing constraint ((x_00005_00004=1) + (x_00004_00004=1)))
c Both direct and order encoding.
c Var 'aux1598' order represents '0' with '7120'
c Var 'aux1598' direct represents '0' with '7120'
c Var 'aux1598' order represents '1' with '7121'
-7120 7121 0
c Var 'aux1598' direct represents '1' with '7122'
7120 -7121 7122 0
-7122 7121 0
-7122 -7120 0
c Var 'aux1598' direct represents '2' with '-7121'
7120 7122 -7121 0
c Encoding variable: aux1599 with domain: int(0..2) (representing constraint ((x_00004_00006=1) + (x_00004_00005=1)))
c Both direct and order encoding.
c Var 'aux1599' order represents '0' with '7123'
c Var 'aux1599' direct represents '0' with '7123'
c Var 'aux1599' order represents '1' with '7124'
-7123 7124 0
c Var 'aux1599' direct represents '1' with '7125'
7123 -7124 7125 0
-7125 7124 0
-7125 -7123 0
c Var 'aux1599' direct represents '2' with '-7124'
7123 7125 -7124 0
c Encoding variable: aux1600 with domain: int(0..3) (representing constraint ((x_00006_00006=1) + aux1599))
c Both direct and order encoding.
c Var 'aux1600' order represents '0' with '7126'
c Var 'aux1600' direct represents '0' with '7126'
c Var 'aux1600' order represents '1' with '7127'
-7126 7127 0
c Var 'aux1600' direct represents '1' with '7128'
7126 -7127 7128 0
-7128 7127 0
-7128 -7126 0
c Var 'aux1600' order represents '2' with '7129'
-7127 7129 0
c Var 'aux1600' direct represents '2' with '7130'
7127 -7129 7130 0
-7130 7129 0
-7130 -7127 0
c Var 'aux1600' direct represents '3' with '-7129'
7126 7128 7130 -7129 0
c Encoding variable: aux1601 with domain: int(0..4) (representing constraint (aux1596 + aux1598))
c Both direct and order encoding.
c Var 'aux1601' order represents '0' with '7131'
c Var 'aux1601' direct represents '0' with '7131'
c Var 'aux1601' order represents '1' with '7132'
-7131 7132 0
c Var 'aux1601' direct represents '1' with '7133'
7131 -7132 7133 0
-7133 7132 0
-7133 -7131 0
c Var 'aux1601' order represents '2' with '7134'
-7132 7134 0
c Var 'aux1601' direct represents '2' with '7135'
7132 -7134 7135 0
-7135 7134 0
-7135 -7132 0
c Var 'aux1601' order represents '3' with '7136'
-7134 7136 0
c Var 'aux1601' direct represents '3' with '7137'
7134 -7136 7137 0
-7137 7136 0
-7137 -7134 0
c Var 'aux1601' direct represents '4' with '-7136'
7131 7133 7135 7137 -7136 0
c Encoding variable: aux1602 with domain: int(0..2) (representing constraint ((x_00006_00004=2) + (x_00005_00006=2)))
c Both direct and order encoding.
c Var 'aux1602' order represents '0' with '7138'
c Var 'aux1602' direct represents '0' with '7138'
c Var 'aux1602' order represents '1' with '7139'
-7138 7139 0
c Var 'aux1602' direct represents '1' with '7140'
7138 -7139 7140 0
-7140 7139 0
-7140 -7138 0
c Var 'aux1602' direct represents '2' with '-7139'
7138 7140 -7139 0
c Encoding variable: aux1603 with domain: int(0..2) (representing constraint ((x_00005_00005=2) + (x_00006_00005=2)))
c Both direct and order encoding.
c Var 'aux1603' order represents '0' with '7141'
c Var 'aux1603' direct represents '0' with '7141'
c Var 'aux1603' order represents '1' with '7142'
-7141 7142 0
c Var 'aux1603' direct represents '1' with '7143'
7141 -7142 7143 0
-7143 7142 0
-7143 -7141 0
c Var 'aux1603' direct represents '2' with '-7142'
7141 7143 -7142 0
c Encoding variable: aux1604 with domain: int(0..2) (representing constraint ((x_00005_00004=2) + (x_00004_00004=2)))
c Both direct and order encoding.
c Var 'aux1604' order represents '0' with '7144'
c Var 'aux1604' direct represents '0' with '7144'
c Var 'aux1604' order represents '1' with '7145'
-7144 7145 0
c Var 'aux1604' direct represents '1' with '7146'
7144 -7145 7146 0
-7146 7145 0
-7146 -7144 0
c Var 'aux1604' direct represents '2' with '-7145'
7144 7146 -7145 0
c Encoding variable: aux1605 with domain: int(0..2) (representing constraint ((x_00004_00006=2) + (x_00004_00005=2)))
c Both direct and order encoding.
c Var 'aux1605' order represents '0' with '7147'
c Var 'aux1605' direct represents '0' with '7147'
c Var 'aux1605' order represents '1' with '7148'
-7147 7148 0
c Var 'aux1605' direct represents '1' with '7149'
7147 -7148 7149 0
-7149 7148 0
-7149 -7147 0
c Var 'aux1605' direct represents '2' with '-7148'
7147 7149 -7148 0
c Encoding variable: aux1606 with domain: int(0..3) (representing constraint ((x_00006_00006=2) + aux1605))
c Both direct and order encoding.
c Var 'aux1606' order represents '0' with '7150'
c Var 'aux1606' direct represents '0' with '7150'
c Var 'aux1606' order represents '1' with '7151'
-7150 7151 0
c Var 'aux1606' direct represents '1' with '7152'
7150 -7151 7152 0
-7152 7151 0
-7152 -7150 0
c Var 'aux1606' order represents '2' with '7153'
-7151 7153 0
c Var 'aux1606' direct represents '2' with '7154'
7151 -7153 7154 0
-7154 7153 0
-7154 -7151 0
c Var 'aux1606' direct represents '3' with '-7153'
7150 7152 7154 -7153 0
c Encoding variable: aux1607 with domain: int(0..4) (representing constraint (aux1602 + aux1604))
c Both direct and order encoding.
c Var 'aux1607' order represents '0' with '7155'
c Var 'aux1607' direct represents '0' with '7155'
c Var 'aux1607' order represents '1' with '7156'
-7155 7156 0
c Var 'aux1607' direct represents '1' with '7157'
7155 -7156 7157 0
-7157 7156 0
-7157 -7155 0
c Var 'aux1607' order represents '2' with '7158'
-7156 7158 0
c Var 'aux1607' direct represents '2' with '7159'
7156 -7158 7159 0
-7159 7158 0
-7159 -7156 0
c Var 'aux1607' order represents '3' with '7160'
-7158 7160 0
c Var 'aux1607' direct represents '3' with '7161'
7158 -7160 7161 0
-7161 7160 0
-7161 -7158 0
c Var 'aux1607' direct represents '4' with '-7160'
7155 7157 7159 7161 -7160 0
c Encoding variable: aux1608 with domain: int(0..2) (representing constraint ((x_00006_00004=3) + (x_00005_00006=3)))
c Both direct and order encoding.
c Var 'aux1608' order represents '0' with '7162'
c Var 'aux1608' direct represents '0' with '7162'
c Var 'aux1608' order represents '1' with '7163'
-7162 7163 0
c Var 'aux1608' direct represents '1' with '7164'
7162 -7163 7164 0
-7164 7163 0
-7164 -7162 0
c Var 'aux1608' direct represents '2' with '-7163'
7162 7164 -7163 0
c Encoding variable: aux1609 with domain: int(0..2) (representing constraint ((x_00005_00005=3) + (x_00006_00005=3)))
c Both direct and order encoding.
c Var 'aux1609' order represents '0' with '7165'
c Var 'aux1609' direct represents '0' with '7165'
c Var 'aux1609' order represents '1' with '7166'
-7165 7166 0
c Var 'aux1609' direct represents '1' with '7167'
7165 -7166 7167 0
-7167 7166 0
-7167 -7165 0
c Var 'aux1609' direct represents '2' with '-7166'
7165 7167 -7166 0
c Encoding variable: aux1610 with domain: int(0..2) (representing constraint ((x_00005_00004=3) + (x_00004_00004=3)))
c Both direct and order encoding.
c Var 'aux1610' order represents '0' with '7168'
c Var 'aux1610' direct represents '0' with '7168'
c Var 'aux1610' order represents '1' with '7169'
-7168 7169 0
c Var 'aux1610' direct represents '1' with '7170'
7168 -7169 7170 0
-7170 7169 0
-7170 -7168 0
c Var 'aux1610' direct represents '2' with '-7169'
7168 7170 -7169 0
c Encoding variable: aux1611 with domain: int(0..2) (representing constraint ((x_00004_00006=3) + (x_00004_00005=3)))
c Both direct and order encoding.
c Var 'aux1611' order represents '0' with '7171'
c Var 'aux1611' direct represents '0' with '7171'
c Var 'aux1611' order represents '1' with '7172'
-7171 7172 0
c Var 'aux1611' direct represents '1' with '7173'
7171 -7172 7173 0
-7173 7172 0
-7173 -7171 0
c Var 'aux1611' direct represents '2' with '-7172'
7171 7173 -7172 0
c Encoding variable: aux1612 with domain: int(0..3) (representing constraint ((x_00006_00006=3) + aux1611))
c Both direct and order encoding.
c Var 'aux1612' order represents '0' with '7174'
c Var 'aux1612' direct represents '0' with '7174'
c Var 'aux1612' order represents '1' with '7175'
-7174 7175 0
c Var 'aux1612' direct represents '1' with '7176'
7174 -7175 7176 0
-7176 7175 0
-7176 -7174 0
c Var 'aux1612' order represents '2' with '7177'
-7175 7177 0
c Var 'aux1612' direct represents '2' with '7178'
7175 -7177 7178 0
-7178 7177 0
-7178 -7175 0
c Var 'aux1612' direct represents '3' with '-7177'
7174 7176 7178 -7177 0
c Encoding variable: aux1613 with domain: int(0..4) (representing constraint (aux1608 + aux1610))
c Both direct and order encoding.
c Var 'aux1613' order represents '0' with '7179'
c Var 'aux1613' direct represents '0' with '7179'
c Var 'aux1613' order represents '1' with '7180'
-7179 7180 0
c Var 'aux1613' direct represents '1' with '7181'
7179 -7180 7181 0
-7181 7180 0
-7181 -7179 0
c Var 'aux1613' order represents '2' with '7182'
-7180 7182 0
c Var 'aux1613' direct represents '2' with '7183'
7180 -7182 7183 0
-7183 7182 0
-7183 -7180 0
c Var 'aux1613' order represents '3' with '7184'
-7182 7184 0
c Var 'aux1613' direct represents '3' with '7185'
7182 -7184 7185 0
-7185 7184 0
-7185 -7182 0
c Var 'aux1613' direct represents '4' with '-7184'
7179 7181 7183 7185 -7184 0
c Encoding variable: aux1614 with domain: int(0..2) (representing constraint ((x_00006_00004=4) + (x_00005_00006=4)))
c Both direct and order encoding.
c Var 'aux1614' order represents '0' with '7186'
c Var 'aux1614' direct represents '0' with '7186'
c Var 'aux1614' order represents '1' with '7187'
-7186 7187 0
c Var 'aux1614' direct represents '1' with '7188'
7186 -7187 7188 0
-7188 7187 0
-7188 -7186 0
c Var 'aux1614' direct represents '2' with '-7187'
7186 7188 -7187 0
c Encoding variable: aux1615 with domain: int(0..2) (representing constraint ((x_00005_00005=4) + (x_00006_00005=4)))
c Both direct and order encoding.
c Var 'aux1615' order represents '0' with '7189'
c Var 'aux1615' direct represents '0' with '7189'
c Var 'aux1615' order represents '1' with '7190'
-7189 7190 0
c Var 'aux1615' direct represents '1' with '7191'
7189 -7190 7191 0
-7191 7190 0
-7191 -7189 0
c Var 'aux1615' direct represents '2' with '-7190'
7189 7191 -7190 0
c Encoding variable: aux1616 with domain: int(0..2) (representing constraint ((x_00005_00004=4) + (x_00004_00004=4)))
c Both direct and order encoding.
c Var 'aux1616' order represents '0' with '7192'
c Var 'aux1616' direct represents '0' with '7192'
c Var 'aux1616' order represents '1' with '7193'
-7192 7193 0
c Var 'aux1616' direct represents '1' with '7194'
7192 -7193 7194 0
-7194 7193 0
-7194 -7192 0
c Var 'aux1616' direct represents '2' with '-7193'
7192 7194 -7193 0
c Encoding variable: aux1617 with domain: int(0..2) (representing constraint ((x_00004_00006=4) + (x_00004_00005=4)))
c Both direct and order encoding.
c Var 'aux1617' order represents '0' with '7195'
c Var 'aux1617' direct represents '0' with '7195'
c Var 'aux1617' order represents '1' with '7196'
-7195 7196 0
c Var 'aux1617' direct represents '1' with '7197'
7195 -7196 7197 0
-7197 7196 0
-7197 -7195 0
c Var 'aux1617' direct represents '2' with '-7196'
7195 7197 -7196 0
c Encoding variable: aux1618 with domain: int(0..3) (representing constraint ((x_00006_00006=4) + aux1617))
c Both direct and order encoding.
c Var 'aux1618' order represents '0' with '7198'
c Var 'aux1618' direct represents '0' with '7198'
c Var 'aux1618' order represents '1' with '7199'
-7198 7199 0
c Var 'aux1618' direct represents '1' with '7200'
7198 -7199 7200 0
-7200 7199 0
-7200 -7198 0
c Var 'aux1618' order represents '2' with '7201'
-7199 7201 0
c Var 'aux1618' direct represents '2' with '7202'
7199 -7201 7202 0
-7202 7201 0
-7202 -7199 0
c Var 'aux1618' direct represents '3' with '-7201'
7198 7200 7202 -7201 0
c Encoding variable: aux1619 with domain: int(0..4) (representing constraint (aux1614 + aux1616))
c Both direct and order encoding.
c Var 'aux1619' order represents '0' with '7203'
c Var 'aux1619' direct represents '0' with '7203'
c Var 'aux1619' order represents '1' with '7204'
-7203 7204 0
c Var 'aux1619' direct represents '1' with '7205'
7203 -7204 7205 0
-7205 7204 0
-7205 -7203 0
c Var 'aux1619' order represents '2' with '7206'
-7204 7206 0
c Var 'aux1619' direct represents '2' with '7207'
7204 -7206 7207 0
-7207 7206 0
-7207 -7204 0
c Var 'aux1619' order represents '3' with '7208'
-7206 7208 0
c Var 'aux1619' direct represents '3' with '7209'
7206 -7208 7209 0
-7209 7208 0
-7209 -7206 0
c Var 'aux1619' direct represents '4' with '-7208'
7203 7205 7207 7209 -7208 0
c Encoding variable: aux1620 with domain: int(0..2) (representing constraint ((x_00006_00004=5) + (x_00005_00006=5)))
c Both direct and order encoding.
c Var 'aux1620' order represents '0' with '7210'
c Var 'aux1620' direct represents '0' with '7210'
c Var 'aux1620' order represents '1' with '7211'
-7210 7211 0
c Var 'aux1620' direct represents '1' with '7212'
7210 -7211 7212 0
-7212 7211 0
-7212 -7210 0
c Var 'aux1620' direct represents '2' with '-7211'
7210 7212 -7211 0
c Encoding variable: aux1621 with domain: int(0..2) (representing constraint ((x_00005_00005=5) + (x_00006_00005=5)))
c Both direct and order encoding.
c Var 'aux1621' order represents '0' with '7213'
c Var 'aux1621' direct represents '0' with '7213'
c Var 'aux1621' order represents '1' with '7214'
-7213 7214 0
c Var 'aux1621' direct represents '1' with '7215'
7213 -7214 7215 0
-7215 7214 0
-7215 -7213 0
c Var 'aux1621' direct represents '2' with '-7214'
7213 7215 -7214 0
c Encoding variable: aux1622 with domain: int(0..2) (representing constraint ((x_00005_00004=5) + (x_00004_00004=5)))
c Both direct and order encoding.
c Var 'aux1622' order represents '0' with '7216'
c Var 'aux1622' direct represents '0' with '7216'
c Var 'aux1622' order represents '1' with '7217'
-7216 7217 0
c Var 'aux1622' direct represents '1' with '7218'
7216 -7217 7218 0
-7218 7217 0
-7218 -7216 0
c Var 'aux1622' direct represents '2' with '-7217'
7216 7218 -7217 0
c Encoding variable: aux1623 with domain: int(0..2) (representing constraint ((x_00004_00006=5) + (x_00004_00005=5)))
c Both direct and order encoding.
c Var 'aux1623' order represents '0' with '7219'
c Var 'aux1623' direct represents '0' with '7219'
c Var 'aux1623' order represents '1' with '7220'
-7219 7220 0
c Var 'aux1623' direct represents '1' with '7221'
7219 -7220 7221 0
-7221 7220 0
-7221 -7219 0
c Var 'aux1623' direct represents '2' with '-7220'
7219 7221 -7220 0
c Encoding variable: aux1624 with domain: int(0..3) (representing constraint ((x_00006_00006=5) + aux1623))
c Both direct and order encoding.
c Var 'aux1624' order represents '0' with '7222'
c Var 'aux1624' direct represents '0' with '7222'
c Var 'aux1624' order represents '1' with '7223'
-7222 7223 0
c Var 'aux1624' direct represents '1' with '7224'
7222 -7223 7224 0
-7224 7223 0
-7224 -7222 0
c Var 'aux1624' order represents '2' with '7225'
-7223 7225 0
c Var 'aux1624' direct represents '2' with '7226'
7223 -7225 7226 0
-7226 7225 0
-7226 -7223 0
c Var 'aux1624' direct represents '3' with '-7225'
7222 7224 7226 -7225 0
c Encoding variable: aux1625 with domain: int(0..4) (representing constraint (aux1620 + aux1622))
c Both direct and order encoding.
c Var 'aux1625' order represents '0' with '7227'
c Var 'aux1625' direct represents '0' with '7227'
c Var 'aux1625' order represents '1' with '7228'
-7227 7228 0
c Var 'aux1625' direct represents '1' with '7229'
7227 -7228 7229 0
-7229 7228 0
-7229 -7227 0
c Var 'aux1625' order represents '2' with '7230'
-7228 7230 0
c Var 'aux1625' direct represents '2' with '7231'
7228 -7230 7231 0
-7231 7230 0
-7231 -7228 0
c Var 'aux1625' order represents '3' with '7232'
-7230 7232 0
c Var 'aux1625' direct represents '3' with '7233'
7230 -7232 7233 0
-7233 7232 0
-7233 -7230 0
c Var 'aux1625' direct represents '4' with '-7232'
7227 7229 7231 7233 -7232 0
c Encoding variable: aux1626 with domain: int(0..2) (representing constraint ((x_00006_00004=6) + (x_00005_00006=6)))
c Both direct and order encoding.
c Var 'aux1626' order represents '0' with '7234'
c Var 'aux1626' direct represents '0' with '7234'
c Var 'aux1626' order represents '1' with '7235'
-7234 7235 0
c Var 'aux1626' direct represents '1' with '7236'
7234 -7235 7236 0
-7236 7235 0
-7236 -7234 0
c Var 'aux1626' direct represents '2' with '-7235'
7234 7236 -7235 0
c Encoding variable: aux1627 with domain: int(0..2) (representing constraint ((x_00005_00005=6) + (x_00006_00005=6)))
c Both direct and order encoding.
c Var 'aux1627' order represents '0' with '7237'
c Var 'aux1627' direct represents '0' with '7237'
c Var 'aux1627' order represents '1' with '7238'
-7237 7238 0
c Var 'aux1627' direct represents '1' with '7239'
7237 -7238 7239 0
-7239 7238 0
-7239 -7237 0
c Var 'aux1627' direct represents '2' with '-7238'
7237 7239 -7238 0
c Encoding variable: aux1628 with domain: int(0..2) (representing constraint ((x_00005_00004=6) + (x_00004_00004=6)))
c Both direct and order encoding.
c Var 'aux1628' order represents '0' with '7240'
c Var 'aux1628' direct represents '0' with '7240'
c Var 'aux1628' order represents '1' with '7241'
-7240 7241 0
c Var 'aux1628' direct represents '1' with '7242'
7240 -7241 7242 0
-7242 7241 0
-7242 -7240 0
c Var 'aux1628' direct represents '2' with '-7241'
7240 7242 -7241 0
c Encoding variable: aux1629 with domain: int(0..2) (representing constraint ((x_00004_00006=6) + (x_00004_00005=6)))
c Both direct and order encoding.
c Var 'aux1629' order represents '0' with '7243'
c Var 'aux1629' direct represents '0' with '7243'
c Var 'aux1629' order represents '1' with '7244'
-7243 7244 0
c Var 'aux1629' direct represents '1' with '7245'
7243 -7244 7245 0
-7245 7244 0
-7245 -7243 0
c Var 'aux1629' direct represents '2' with '-7244'
7243 7245 -7244 0
c Encoding variable: aux1630 with domain: int(0..3) (representing constraint ((x_00006_00006=6) + aux1629))
c Both direct and order encoding.
c Var 'aux1630' order represents '0' with '7246'
c Var 'aux1630' direct represents '0' with '7246'
c Var 'aux1630' order represents '1' with '7247'
-7246 7247 0
c Var 'aux1630' direct represents '1' with '7248'
7246 -7247 7248 0
-7248 7247 0
-7248 -7246 0
c Var 'aux1630' order represents '2' with '7249'
-7247 7249 0
c Var 'aux1630' direct represents '2' with '7250'
7247 -7249 7250 0
-7250 7249 0
-7250 -7247 0
c Var 'aux1630' direct represents '3' with '-7249'
7246 7248 7250 -7249 0
c Encoding variable: aux1631 with domain: int(0..4) (representing constraint (aux1626 + aux1628))
c Both direct and order encoding.
c Var 'aux1631' order represents '0' with '7251'
c Var 'aux1631' direct represents '0' with '7251'
c Var 'aux1631' order represents '1' with '7252'
-7251 7252 0
c Var 'aux1631' direct represents '1' with '7253'
7251 -7252 7253 0
-7253 7252 0
-7253 -7251 0
c Var 'aux1631' order represents '2' with '7254'
-7252 7254 0
c Var 'aux1631' direct represents '2' with '7255'
7252 -7254 7255 0
-7255 7254 0
-7255 -7252 0
c Var 'aux1631' order represents '3' with '7256'
-7254 7256 0
c Var 'aux1631' direct represents '3' with '7257'
7254 -7256 7257 0
-7257 7256 0
-7257 -7254 0
c Var 'aux1631' direct represents '4' with '-7256'
7251 7253 7255 7257 -7256 0
c Encoding variable: aux1632 with domain: int(0..2) (representing constraint ((x_00006_00004=7) + (x_00005_00006=7)))
c Both direct and order encoding.
c Var 'aux1632' order represents '0' with '7258'
c Var 'aux1632' direct represents '0' with '7258'
c Var 'aux1632' order represents '1' with '7259'
-7258 7259 0
c Var 'aux1632' direct represents '1' with '7260'
7258 -7259 7260 0
-7260 7259 0
-7260 -7258 0
c Var 'aux1632' direct represents '2' with '-7259'
7258 7260 -7259 0
c Encoding variable: aux1633 with domain: int(0..2) (representing constraint ((x_00005_00005=7) + (x_00006_00005=7)))
c Both direct and order encoding.
c Var 'aux1633' order represents '0' with '7261'
c Var 'aux1633' direct represents '0' with '7261'
c Var 'aux1633' order represents '1' with '7262'
-7261 7262 0
c Var 'aux1633' direct represents '1' with '7263'
7261 -7262 7263 0
-7263 7262 0
-7263 -7261 0
c Var 'aux1633' direct represents '2' with '-7262'
7261 7263 -7262 0
c Encoding variable: aux1634 with domain: int(0..2) (representing constraint ((x_00005_00004=7) + (x_00004_00004=7)))
c Both direct and order encoding.
c Var 'aux1634' order represents '0' with '7264'
c Var 'aux1634' direct represents '0' with '7264'
c Var 'aux1634' order represents '1' with '7265'
-7264 7265 0
c Var 'aux1634' direct represents '1' with '7266'
7264 -7265 7266 0
-7266 7265 0
-7266 -7264 0
c Var 'aux1634' direct represents '2' with '-7265'
7264 7266 -7265 0
c Encoding variable: aux1635 with domain: int(0..2) (representing constraint ((x_00004_00006=7) + (x_00004_00005=7)))
c Both direct and order encoding.
c Var 'aux1635' order represents '0' with '7267'
c Var 'aux1635' direct represents '0' with '7267'
c Var 'aux1635' order represents '1' with '7268'
-7267 7268 0
c Var 'aux1635' direct represents '1' with '7269'
7267 -7268 7269 0
-7269 7268 0
-7269 -7267 0
c Var 'aux1635' direct represents '2' with '-7268'
7267 7269 -7268 0
c Encoding variable: aux1636 with domain: int(0..3) (representing constraint ((x_00006_00006=7) + aux1635))
c Both direct and order encoding.
c Var 'aux1636' order represents '0' with '7270'
c Var 'aux1636' direct represents '0' with '7270'
c Var 'aux1636' order represents '1' with '7271'
-7270 7271 0
c Var 'aux1636' direct represents '1' with '7272'
7270 -7271 7272 0
-7272 7271 0
-7272 -7270 0
c Var 'aux1636' order represents '2' with '7273'
-7271 7273 0
c Var 'aux1636' direct represents '2' with '7274'
7271 -7273 7274 0
-7274 7273 0
-7274 -7271 0
c Var 'aux1636' direct represents '3' with '-7273'
7270 7272 7274 -7273 0
c Encoding variable: aux1637 with domain: int(0..4) (representing constraint (aux1632 + aux1634))
c Both direct and order encoding.
c Var 'aux1637' order represents '0' with '7275'
c Var 'aux1637' direct represents '0' with '7275'
c Var 'aux1637' order represents '1' with '7276'
-7275 7276 0
c Var 'aux1637' direct represents '1' with '7277'
7275 -7276 7277 0
-7277 7276 0
-7277 -7275 0
c Var 'aux1637' order represents '2' with '7278'
-7276 7278 0
c Var 'aux1637' direct represents '2' with '7279'
7276 -7278 7279 0
-7279 7278 0
-7279 -7276 0
c Var 'aux1637' order represents '3' with '7280'
-7278 7280 0
c Var 'aux1637' direct represents '3' with '7281'
7278 -7280 7281 0
-7281 7280 0
-7281 -7278 0
c Var 'aux1637' direct represents '4' with '-7280'
7275 7277 7279 7281 -7280 0
c Encoding variable: aux1638 with domain: int(0..2) (representing constraint ((x_00006_00004=8) + (x_00005_00006=8)))
c Both direct and order encoding.
c Var 'aux1638' order represents '0' with '7282'
c Var 'aux1638' direct represents '0' with '7282'
c Var 'aux1638' order represents '1' with '7283'
-7282 7283 0
c Var 'aux1638' direct represents '1' with '7284'
7282 -7283 7284 0
-7284 7283 0
-7284 -7282 0
c Var 'aux1638' direct represents '2' with '-7283'
7282 7284 -7283 0
c Encoding variable: aux1639 with domain: int(0..2) (representing constraint ((x_00005_00005=8) + (x_00006_00005=8)))
c Both direct and order encoding.
c Var 'aux1639' order represents '0' with '7285'
c Var 'aux1639' direct represents '0' with '7285'
c Var 'aux1639' order represents '1' with '7286'
-7285 7286 0
c Var 'aux1639' direct represents '1' with '7287'
7285 -7286 7287 0
-7287 7286 0
-7287 -7285 0
c Var 'aux1639' direct represents '2' with '-7286'
7285 7287 -7286 0
c Encoding variable: aux1640 with domain: int(0..2) (representing constraint ((x_00005_00004=8) + (x_00004_00004=8)))
c Both direct and order encoding.
c Var 'aux1640' order represents '0' with '7288'
c Var 'aux1640' direct represents '0' with '7288'
c Var 'aux1640' order represents '1' with '7289'
-7288 7289 0
c Var 'aux1640' direct represents '1' with '7290'
7288 -7289 7290 0
-7290 7289 0
-7290 -7288 0
c Var 'aux1640' direct represents '2' with '-7289'
7288 7290 -7289 0
c Encoding variable: aux1641 with domain: int(0..2) (representing constraint ((x_00004_00006=8) + (x_00004_00005=8)))
c Both direct and order encoding.
c Var 'aux1641' order represents '0' with '7291'
c Var 'aux1641' direct represents '0' with '7291'
c Var 'aux1641' order represents '1' with '7292'
-7291 7292 0
c Var 'aux1641' direct represents '1' with '7293'
7291 -7292 7293 0
-7293 7292 0
-7293 -7291 0
c Var 'aux1641' direct represents '2' with '-7292'
7291 7293 -7292 0
c Encoding variable: aux1642 with domain: int(0..3) (representing constraint ((x_00006_00006=8) + aux1641))
c Both direct and order encoding.
c Var 'aux1642' order represents '0' with '7294'
c Var 'aux1642' direct represents '0' with '7294'
c Var 'aux1642' order represents '1' with '7295'
-7294 7295 0
c Var 'aux1642' direct represents '1' with '7296'
7294 -7295 7296 0
-7296 7295 0
-7296 -7294 0
c Var 'aux1642' order represents '2' with '7297'
-7295 7297 0
c Var 'aux1642' direct represents '2' with '7298'
7295 -7297 7298 0
-7298 7297 0
-7298 -7295 0
c Var 'aux1642' direct represents '3' with '-7297'
7294 7296 7298 -7297 0
c Encoding variable: aux1643 with domain: int(0..4) (representing constraint (aux1638 + aux1640))
c Both direct and order encoding.
c Var 'aux1643' order represents '0' with '7299'
c Var 'aux1643' direct represents '0' with '7299'
c Var 'aux1643' order represents '1' with '7300'
-7299 7300 0
c Var 'aux1643' direct represents '1' with '7301'
7299 -7300 7301 0
-7301 7300 0
-7301 -7299 0
c Var 'aux1643' order represents '2' with '7302'
-7300 7302 0
c Var 'aux1643' direct represents '2' with '7303'
7300 -7302 7303 0
-7303 7302 0
-7303 -7300 0
c Var 'aux1643' order represents '3' with '7304'
-7302 7304 0
c Var 'aux1643' direct represents '3' with '7305'
7302 -7304 7305 0
-7305 7304 0
-7305 -7302 0
c Var 'aux1643' direct represents '4' with '-7304'
7299 7301 7303 7305 -7304 0
c Encoding variable: aux1644 with domain: int(0..2) (representing constraint ((x_00006_00004=9) + (x_00005_00006=9)))
c Both direct and order encoding.
c Var 'aux1644' order represents '0' with '7306'
c Var 'aux1644' direct represents '0' with '7306'
c Var 'aux1644' order represents '1' with '7307'
-7306 7307 0
c Var 'aux1644' direct represents '1' with '7308'
7306 -7307 7308 0
-7308 7307 0
-7308 -7306 0
c Var 'aux1644' direct represents '2' with '-7307'
7306 7308 -7307 0
c Encoding variable: aux1645 with domain: int(0..2) (representing constraint ((x_00005_00005=9) + (x_00006_00005=9)))
c Both direct and order encoding.
c Var 'aux1645' order represents '0' with '7309'
c Var 'aux1645' direct represents '0' with '7309'
c Var 'aux1645' order represents '1' with '7310'
-7309 7310 0
c Var 'aux1645' direct represents '1' with '7311'
7309 -7310 7311 0
-7311 7310 0
-7311 -7309 0
c Var 'aux1645' direct represents '2' with '-7310'
7309 7311 -7310 0
c Encoding variable: aux1646 with domain: int(0..2) (representing constraint ((x_00005_00004=9) + (x_00004_00004=9)))
c Both direct and order encoding.
c Var 'aux1646' order represents '0' with '7312'
c Var 'aux1646' direct represents '0' with '7312'
c Var 'aux1646' order represents '1' with '7313'
-7312 7313 0
c Var 'aux1646' direct represents '1' with '7314'
7312 -7313 7314 0
-7314 7313 0
-7314 -7312 0
c Var 'aux1646' direct represents '2' with '-7313'
7312 7314 -7313 0
c Encoding variable: aux1647 with domain: int(0..2) (representing constraint ((x_00004_00006=9) + (x_00004_00005=9)))
c Both direct and order encoding.
c Var 'aux1647' order represents '0' with '7315'
c Var 'aux1647' direct represents '0' with '7315'
c Var 'aux1647' order represents '1' with '7316'
-7315 7316 0
c Var 'aux1647' direct represents '1' with '7317'
7315 -7316 7317 0
-7317 7316 0
-7317 -7315 0
c Var 'aux1647' direct represents '2' with '-7316'
7315 7317 -7316 0
c Encoding variable: aux1648 with domain: int(0..3) (representing constraint ((x_00006_00006=9) + aux1647))
c Both direct and order encoding.
c Var 'aux1648' order represents '0' with '7318'
c Var 'aux1648' direct represents '0' with '7318'
c Var 'aux1648' order represents '1' with '7319'
-7318 7319 0
c Var 'aux1648' direct represents '1' with '7320'
7318 -7319 7320 0
-7320 7319 0
-7320 -7318 0
c Var 'aux1648' order represents '2' with '7321'
-7319 7321 0
c Var 'aux1648' direct represents '2' with '7322'
7319 -7321 7322 0
-7322 7321 0
-7322 -7319 0
c Var 'aux1648' direct represents '3' with '-7321'
7318 7320 7322 -7321 0
c Encoding variable: aux1649 with domain: int(0..4) (representing constraint (aux1644 + aux1646))
c Both direct and order encoding.
c Var 'aux1649' order represents '0' with '7323'
c Var 'aux1649' direct represents '0' with '7323'
c Var 'aux1649' order represents '1' with '7324'
-7323 7324 0
c Var 'aux1649' direct represents '1' with '7325'
7323 -7324 7325 0
-7325 7324 0
-7325 -7323 0
c Var 'aux1649' order represents '2' with '7326'
-7324 7326 0
c Var 'aux1649' direct represents '2' with '7327'
7324 -7326 7327 0
-7327 7326 0
-7327 -7324 0
c Var 'aux1649' order represents '3' with '7328'
-7326 7328 0
c Var 'aux1649' direct represents '3' with '7329'
7326 -7328 7329 0
-7329 7328 0
-7329 -7326 0
c Var 'aux1649' direct represents '4' with '-7328'
7323 7325 7327 7329 -7328 0
c Encoding variable: aux1650 with domain: int(0..2) (representing constraint ((x_00006_00007=1) + (x_00005_00009=1)))
c Both direct and order encoding.
c Var 'aux1650' order represents '0' with '7330'
c Var 'aux1650' direct represents '0' with '7330'
c Var 'aux1650' order represents '1' with '7331'
-7330 7331 0
c Var 'aux1650' direct represents '1' with '7332'
7330 -7331 7332 0
-7332 7331 0
-7332 -7330 0
c Var 'aux1650' direct represents '2' with '-7331'
7330 7332 -7331 0
c Encoding variable: aux1651 with domain: int(0..2) (representing constraint ((x_00005_00008=1) + (x_00006_00008=1)))
c Both direct and order encoding.
c Var 'aux1651' order represents '0' with '7333'
c Var 'aux1651' direct represents '0' with '7333'
c Var 'aux1651' order represents '1' with '7334'
-7333 7334 0
c Var 'aux1651' direct represents '1' with '7335'
7333 -7334 7335 0
-7335 7334 0
-7335 -7333 0
c Var 'aux1651' direct represents '2' with '-7334'
7333 7335 -7334 0
c Encoding variable: aux1652 with domain: int(0..2) (representing constraint ((x_00005_00007=1) + (x_00004_00007=1)))
c Both direct and order encoding.
c Var 'aux1652' order represents '0' with '7336'
c Var 'aux1652' direct represents '0' with '7336'
c Var 'aux1652' order represents '1' with '7337'
-7336 7337 0
c Var 'aux1652' direct represents '1' with '7338'
7336 -7337 7338 0
-7338 7337 0
-7338 -7336 0
c Var 'aux1652' direct represents '2' with '-7337'
7336 7338 -7337 0
c Encoding variable: aux1653 with domain: int(0..2) (representing constraint ((x_00004_00009=1) + (x_00004_00008=1)))
c Both direct and order encoding.
c Var 'aux1653' order represents '0' with '7339'
c Var 'aux1653' direct represents '0' with '7339'
c Var 'aux1653' order represents '1' with '7340'
-7339 7340 0
c Var 'aux1653' direct represents '1' with '7341'
7339 -7340 7341 0
-7341 7340 0
-7341 -7339 0
c Var 'aux1653' direct represents '2' with '-7340'
7339 7341 -7340 0
c Encoding variable: aux1654 with domain: int(0..3) (representing constraint ((x_00006_00009=1) + aux1653))
c Both direct and order encoding.
c Var 'aux1654' order represents '0' with '7342'
c Var 'aux1654' direct represents '0' with '7342'
c Var 'aux1654' order represents '1' with '7343'
-7342 7343 0
c Var 'aux1654' direct represents '1' with '7344'
7342 -7343 7344 0
-7344 7343 0
-7344 -7342 0
c Var 'aux1654' order represents '2' with '7345'
-7343 7345 0
c Var 'aux1654' direct represents '2' with '7346'
7343 -7345 7346 0
-7346 7345 0
-7346 -7343 0
c Var 'aux1654' direct represents '3' with '-7345'
7342 7344 7346 -7345 0
c Encoding variable: aux1655 with domain: int(0..4) (representing constraint (aux1650 + aux1652))
c Both direct and order encoding.
c Var 'aux1655' order represents '0' with '7347'
c Var 'aux1655' direct represents '0' with '7347'
c Var 'aux1655' order represents '1' with '7348'
-7347 7348 0
c Var 'aux1655' direct represents '1' with '7349'
7347 -7348 7349 0
-7349 7348 0
-7349 -7347 0
c Var 'aux1655' order represents '2' with '7350'
-7348 7350 0
c Var 'aux1655' direct represents '2' with '7351'
7348 -7350 7351 0
-7351 7350 0
-7351 -7348 0
c Var 'aux1655' order represents '3' with '7352'
-7350 7352 0
c Var 'aux1655' direct represents '3' with '7353'
7350 -7352 7353 0
-7353 7352 0
-7353 -7350 0
c Var 'aux1655' direct represents '4' with '-7352'
7347 7349 7351 7353 -7352 0
c Encoding variable: aux1656 with domain: int(0..2) (representing constraint ((x_00006_00007=2) + (x_00005_00009=2)))
c Both direct and order encoding.
c Var 'aux1656' order represents '0' with '7354'
c Var 'aux1656' direct represents '0' with '7354'
c Var 'aux1656' order represents '1' with '7355'
-7354 7355 0
c Var 'aux1656' direct represents '1' with '7356'
7354 -7355 7356 0
-7356 7355 0
-7356 -7354 0
c Var 'aux1656' direct represents '2' with '-7355'
7354 7356 -7355 0
c Encoding variable: aux1657 with domain: int(0..2) (representing constraint ((x_00005_00008=2) + (x_00006_00008=2)))
c Both direct and order encoding.
c Var 'aux1657' order represents '0' with '7357'
c Var 'aux1657' direct represents '0' with '7357'
c Var 'aux1657' order represents '1' with '7358'
-7357 7358 0
c Var 'aux1657' direct represents '1' with '7359'
7357 -7358 7359 0
-7359 7358 0
-7359 -7357 0
c Var 'aux1657' direct represents '2' with '-7358'
7357 7359 -7358 0
c Encoding variable: aux1658 with domain: int(0..2) (representing constraint ((x_00005_00007=2) + (x_00004_00007=2)))
c Both direct and order encoding.
c Var 'aux1658' order represents '0' with '7360'
c Var 'aux1658' direct represents '0' with '7360'
c Var 'aux1658' order represents '1' with '7361'
-7360 7361 0
c Var 'aux1658' direct represents '1' with '7362'
7360 -7361 7362 0
-7362 7361 0
-7362 -7360 0
c Var 'aux1658' direct represents '2' with '-7361'
7360 7362 -7361 0
c Encoding variable: aux1659 with domain: int(0..2) (representing constraint ((x_00004_00009=2) + (x_00004_00008=2)))
c Both direct and order encoding.
c Var 'aux1659' order represents '0' with '7363'
c Var 'aux1659' direct represents '0' with '7363'
c Var 'aux1659' order represents '1' with '7364'
-7363 7364 0
c Var 'aux1659' direct represents '1' with '7365'
7363 -7364 7365 0
-7365 7364 0
-7365 -7363 0
c Var 'aux1659' direct represents '2' with '-7364'
7363 7365 -7364 0
c Encoding variable: aux1660 with domain: int(0..3) (representing constraint ((x_00006_00009=2) + aux1659))
c Both direct and order encoding.
c Var 'aux1660' order represents '0' with '7366'
c Var 'aux1660' direct represents '0' with '7366'
c Var 'aux1660' order represents '1' with '7367'
-7366 7367 0
c Var 'aux1660' direct represents '1' with '7368'
7366 -7367 7368 0
-7368 7367 0
-7368 -7366 0
c Var 'aux1660' order represents '2' with '7369'
-7367 7369 0
c Var 'aux1660' direct represents '2' with '7370'
7367 -7369 7370 0
-7370 7369 0
-7370 -7367 0
c Var 'aux1660' direct represents '3' with '-7369'
7366 7368 7370 -7369 0
c Encoding variable: aux1661 with domain: int(0..4) (representing constraint (aux1656 + aux1658))
c Both direct and order encoding.
c Var 'aux1661' order represents '0' with '7371'
c Var 'aux1661' direct represents '0' with '7371'
c Var 'aux1661' order represents '1' with '7372'
-7371 7372 0
c Var 'aux1661' direct represents '1' with '7373'
7371 -7372 7373 0
-7373 7372 0
-7373 -7371 0
c Var 'aux1661' order represents '2' with '7374'
-7372 7374 0
c Var 'aux1661' direct represents '2' with '7375'
7372 -7374 7375 0
-7375 7374 0
-7375 -7372 0
c Var 'aux1661' order represents '3' with '7376'
-7374 7376 0
c Var 'aux1661' direct represents '3' with '7377'
7374 -7376 7377 0
-7377 7376 0
-7377 -7374 0
c Var 'aux1661' direct represents '4' with '-7376'
7371 7373 7375 7377 -7376 0
c Encoding variable: aux1662 with domain: int(0..2) (representing constraint ((x_00006_00007=3) + (x_00005_00009=3)))
c Both direct and order encoding.
c Var 'aux1662' order represents '0' with '7378'
c Var 'aux1662' direct represents '0' with '7378'
c Var 'aux1662' order represents '1' with '7379'
-7378 7379 0
c Var 'aux1662' direct represents '1' with '7380'
7378 -7379 7380 0
-7380 7379 0
-7380 -7378 0
c Var 'aux1662' direct represents '2' with '-7379'
7378 7380 -7379 0
c Encoding variable: aux1663 with domain: int(0..2) (representing constraint ((x_00005_00008=3) + (x_00006_00008=3)))
c Both direct and order encoding.
c Var 'aux1663' order represents '0' with '7381'
c Var 'aux1663' direct represents '0' with '7381'
c Var 'aux1663' order represents '1' with '7382'
-7381 7382 0
c Var 'aux1663' direct represents '1' with '7383'
7381 -7382 7383 0
-7383 7382 0
-7383 -7381 0
c Var 'aux1663' direct represents '2' with '-7382'
7381 7383 -7382 0
c Encoding variable: aux1664 with domain: int(0..2) (representing constraint ((x_00005_00007=3) + (x_00004_00007=3)))
c Both direct and order encoding.
c Var 'aux1664' order represents '0' with '7384'
c Var 'aux1664' direct represents '0' with '7384'
c Var 'aux1664' order represents '1' with '7385'
-7384 7385 0
c Var 'aux1664' direct represents '1' with '7386'
7384 -7385 7386 0
-7386 7385 0
-7386 -7384 0
c Var 'aux1664' direct represents '2' with '-7385'
7384 7386 -7385 0
c Encoding variable: aux1665 with domain: int(0..2) (representing constraint ((x_00004_00009=3) + (x_00004_00008=3)))
c Both direct and order encoding.
c Var 'aux1665' order represents '0' with '7387'
c Var 'aux1665' direct represents '0' with '7387'
c Var 'aux1665' order represents '1' with '7388'
-7387 7388 0
c Var 'aux1665' direct represents '1' with '7389'
7387 -7388 7389 0
-7389 7388 0
-7389 -7387 0
c Var 'aux1665' direct represents '2' with '-7388'
7387 7389 -7388 0
c Encoding variable: aux1666 with domain: int(0..3) (representing constraint ((x_00006_00009=3) + aux1665))
c Both direct and order encoding.
c Var 'aux1666' order represents '0' with '7390'
c Var 'aux1666' direct represents '0' with '7390'
c Var 'aux1666' order represents '1' with '7391'
-7390 7391 0
c Var 'aux1666' direct represents '1' with '7392'
7390 -7391 7392 0
-7392 7391 0
-7392 -7390 0
c Var 'aux1666' order represents '2' with '7393'
-7391 7393 0
c Var 'aux1666' direct represents '2' with '7394'
7391 -7393 7394 0
-7394 7393 0
-7394 -7391 0
c Var 'aux1666' direct represents '3' with '-7393'
7390 7392 7394 -7393 0
c Encoding variable: aux1667 with domain: int(0..4) (representing constraint (aux1662 + aux1664))
c Both direct and order encoding.
c Var 'aux1667' order represents '0' with '7395'
c Var 'aux1667' direct represents '0' with '7395'
c Var 'aux1667' order represents '1' with '7396'
-7395 7396 0
c Var 'aux1667' direct represents '1' with '7397'
7395 -7396 7397 0
-7397 7396 0
-7397 -7395 0
c Var 'aux1667' order represents '2' with '7398'
-7396 7398 0
c Var 'aux1667' direct represents '2' with '7399'
7396 -7398 7399 0
-7399 7398 0
-7399 -7396 0
c Var 'aux1667' order represents '3' with '7400'
-7398 7400 0
c Var 'aux1667' direct represents '3' with '7401'
7398 -7400 7401 0
-7401 7400 0
-7401 -7398 0
c Var 'aux1667' direct represents '4' with '-7400'
7395 7397 7399 7401 -7400 0
c Encoding variable: aux1668 with domain: int(0..2) (representing constraint ((x_00006_00007=4) + (x_00005_00009=4)))
c Both direct and order encoding.
c Var 'aux1668' order represents '0' with '7402'
c Var 'aux1668' direct represents '0' with '7402'
c Var 'aux1668' order represents '1' with '7403'
-7402 7403 0
c Var 'aux1668' direct represents '1' with '7404'
7402 -7403 7404 0
-7404 7403 0
-7404 -7402 0
c Var 'aux1668' direct represents '2' with '-7403'
7402 7404 -7403 0
c Encoding variable: aux1669 with domain: int(0..2) (representing constraint ((x_00005_00008=4) + (x_00006_00008=4)))
c Both direct and order encoding.
c Var 'aux1669' order represents '0' with '7405'
c Var 'aux1669' direct represents '0' with '7405'
c Var 'aux1669' order represents '1' with '7406'
-7405 7406 0
c Var 'aux1669' direct represents '1' with '7407'
7405 -7406 7407 0
-7407 7406 0
-7407 -7405 0
c Var 'aux1669' direct represents '2' with '-7406'
7405 7407 -7406 0
c Encoding variable: aux1670 with domain: int(0..2) (representing constraint ((x_00005_00007=4) + (x_00004_00007=4)))
c Both direct and order encoding.
c Var 'aux1670' order represents '0' with '7408'
c Var 'aux1670' direct represents '0' with '7408'
c Var 'aux1670' order represents '1' with '7409'
-7408 7409 0
c Var 'aux1670' direct represents '1' with '7410'
7408 -7409 7410 0
-7410 7409 0
-7410 -7408 0
c Var 'aux1670' direct represents '2' with '-7409'
7408 7410 -7409 0
c Encoding variable: aux1671 with domain: int(0..2) (representing constraint ((x_00004_00009=4) + (x_00004_00008=4)))
c Both direct and order encoding.
c Var 'aux1671' order represents '0' with '7411'
c Var 'aux1671' direct represents '0' with '7411'
c Var 'aux1671' order represents '1' with '7412'
-7411 7412 0
c Var 'aux1671' direct represents '1' with '7413'
7411 -7412 7413 0
-7413 7412 0
-7413 -7411 0
c Var 'aux1671' direct represents '2' with '-7412'
7411 7413 -7412 0
c Encoding variable: aux1672 with domain: int(0..3) (representing constraint ((x_00006_00009=4) + aux1671))
c Both direct and order encoding.
c Var 'aux1672' order represents '0' with '7414'
c Var 'aux1672' direct represents '0' with '7414'
c Var 'aux1672' order represents '1' with '7415'
-7414 7415 0
c Var 'aux1672' direct represents '1' with '7416'
7414 -7415 7416 0
-7416 7415 0
-7416 -7414 0
c Var 'aux1672' order represents '2' with '7417'
-7415 7417 0
c Var 'aux1672' direct represents '2' with '7418'
7415 -7417 7418 0
-7418 7417 0
-7418 -7415 0
c Var 'aux1672' direct represents '3' with '-7417'
7414 7416 7418 -7417 0
c Encoding variable: aux1673 with domain: int(0..4) (representing constraint (aux1668 + aux1670))
c Both direct and order encoding.
c Var 'aux1673' order represents '0' with '7419'
c Var 'aux1673' direct represents '0' with '7419'
c Var 'aux1673' order represents '1' with '7420'
-7419 7420 0
c Var 'aux1673' direct represents '1' with '7421'
7419 -7420 7421 0
-7421 7420 0
-7421 -7419 0
c Var 'aux1673' order represents '2' with '7422'
-7420 7422 0
c Var 'aux1673' direct represents '2' with '7423'
7420 -7422 7423 0
-7423 7422 0
-7423 -7420 0
c Var 'aux1673' order represents '3' with '7424'
-7422 7424 0
c Var 'aux1673' direct represents '3' with '7425'
7422 -7424 7425 0
-7425 7424 0
-7425 -7422 0
c Var 'aux1673' direct represents '4' with '-7424'
7419 7421 7423 7425 -7424 0
c Encoding variable: aux1674 with domain: int(0..2) (representing constraint ((x_00006_00007=5) + (x_00005_00009=5)))
c Both direct and order encoding.
c Var 'aux1674' order represents '0' with '7426'
c Var 'aux1674' direct represents '0' with '7426'
c Var 'aux1674' order represents '1' with '7427'
-7426 7427 0
c Var 'aux1674' direct represents '1' with '7428'
7426 -7427 7428 0
-7428 7427 0
-7428 -7426 0
c Var 'aux1674' direct represents '2' with '-7427'
7426 7428 -7427 0
c Encoding variable: aux1675 with domain: int(0..2) (representing constraint ((x_00005_00008=5) + (x_00006_00008=5)))
c Both direct and order encoding.
c Var 'aux1675' order represents '0' with '7429'
c Var 'aux1675' direct represents '0' with '7429'
c Var 'aux1675' order represents '1' with '7430'
-7429 7430 0
c Var 'aux1675' direct represents '1' with '7431'
7429 -7430 7431 0
-7431 7430 0
-7431 -7429 0
c Var 'aux1675' direct represents '2' with '-7430'
7429 7431 -7430 0
c Encoding variable: aux1676 with domain: int(0..2) (representing constraint ((x_00005_00007=5) + (x_00004_00007=5)))
c Both direct and order encoding.
c Var 'aux1676' order represents '0' with '7432'
c Var 'aux1676' direct represents '0' with '7432'
c Var 'aux1676' order represents '1' with '7433'
-7432 7433 0
c Var 'aux1676' direct represents '1' with '7434'
7432 -7433 7434 0
-7434 7433 0
-7434 -7432 0
c Var 'aux1676' direct represents '2' with '-7433'
7432 7434 -7433 0
c Encoding variable: aux1677 with domain: int(0..2) (representing constraint ((x_00004_00009=5) + (x_00004_00008=5)))
c Both direct and order encoding.
c Var 'aux1677' order represents '0' with '7435'
c Var 'aux1677' direct represents '0' with '7435'
c Var 'aux1677' order represents '1' with '7436'
-7435 7436 0
c Var 'aux1677' direct represents '1' with '7437'
7435 -7436 7437 0
-7437 7436 0
-7437 -7435 0
c Var 'aux1677' direct represents '2' with '-7436'
7435 7437 -7436 0
c Encoding variable: aux1678 with domain: int(0..3) (representing constraint ((x_00006_00009=5) + aux1677))
c Both direct and order encoding.
c Var 'aux1678' order represents '0' with '7438'
c Var 'aux1678' direct represents '0' with '7438'
c Var 'aux1678' order represents '1' with '7439'
-7438 7439 0
c Var 'aux1678' direct represents '1' with '7440'
7438 -7439 7440 0
-7440 7439 0
-7440 -7438 0
c Var 'aux1678' order represents '2' with '7441'
-7439 7441 0
c Var 'aux1678' direct represents '2' with '7442'
7439 -7441 7442 0
-7442 7441 0
-7442 -7439 0
c Var 'aux1678' direct represents '3' with '-7441'
7438 7440 7442 -7441 0
c Encoding variable: aux1679 with domain: int(0..4) (representing constraint (aux1674 + aux1676))
c Both direct and order encoding.
c Var 'aux1679' order represents '0' with '7443'
c Var 'aux1679' direct represents '0' with '7443'
c Var 'aux1679' order represents '1' with '7444'
-7443 7444 0
c Var 'aux1679' direct represents '1' with '7445'
7443 -7444 7445 0
-7445 7444 0
-7445 -7443 0
c Var 'aux1679' order represents '2' with '7446'
-7444 7446 0
c Var 'aux1679' direct represents '2' with '7447'
7444 -7446 7447 0
-7447 7446 0
-7447 -7444 0
c Var 'aux1679' order represents '3' with '7448'
-7446 7448 0
c Var 'aux1679' direct represents '3' with '7449'
7446 -7448 7449 0
-7449 7448 0
-7449 -7446 0
c Var 'aux1679' direct represents '4' with '-7448'
7443 7445 7447 7449 -7448 0
c Encoding variable: aux1680 with domain: int(0..2) (representing constraint ((x_00006_00007=6) + (x_00005_00009=6)))
c Both direct and order encoding.
c Var 'aux1680' order represents '0' with '7450'
c Var 'aux1680' direct represents '0' with '7450'
c Var 'aux1680' order represents '1' with '7451'
-7450 7451 0
c Var 'aux1680' direct represents '1' with '7452'
7450 -7451 7452 0
-7452 7451 0
-7452 -7450 0
c Var 'aux1680' direct represents '2' with '-7451'
7450 7452 -7451 0
c Encoding variable: aux1681 with domain: int(0..2) (representing constraint ((x_00005_00008=6) + (x_00006_00008=6)))
c Both direct and order encoding.
c Var 'aux1681' order represents '0' with '7453'
c Var 'aux1681' direct represents '0' with '7453'
c Var 'aux1681' order represents '1' with '7454'
-7453 7454 0
c Var 'aux1681' direct represents '1' with '7455'
7453 -7454 7455 0
-7455 7454 0
-7455 -7453 0
c Var 'aux1681' direct represents '2' with '-7454'
7453 7455 -7454 0
c Encoding variable: aux1682 with domain: int(0..2) (representing constraint ((x_00005_00007=6) + (x_00004_00007=6)))
c Both direct and order encoding.
c Var 'aux1682' order represents '0' with '7456'
c Var 'aux1682' direct represents '0' with '7456'
c Var 'aux1682' order represents '1' with '7457'
-7456 7457 0
c Var 'aux1682' direct represents '1' with '7458'
7456 -7457 7458 0
-7458 7457 0
-7458 -7456 0
c Var 'aux1682' direct represents '2' with '-7457'
7456 7458 -7457 0
c Encoding variable: aux1683 with domain: int(0..2) (representing constraint ((x_00004_00009=6) + (x_00004_00008=6)))
c Both direct and order encoding.
c Var 'aux1683' order represents '0' with '7459'
c Var 'aux1683' direct represents '0' with '7459'
c Var 'aux1683' order represents '1' with '7460'
-7459 7460 0
c Var 'aux1683' direct represents '1' with '7461'
7459 -7460 7461 0
-7461 7460 0
-7461 -7459 0
c Var 'aux1683' direct represents '2' with '-7460'
7459 7461 -7460 0
c Encoding variable: aux1684 with domain: int(0..3) (representing constraint ((x_00006_00009=6) + aux1683))
c Both direct and order encoding.
c Var 'aux1684' order represents '0' with '7462'
c Var 'aux1684' direct represents '0' with '7462'
c Var 'aux1684' order represents '1' with '7463'
-7462 7463 0
c Var 'aux1684' direct represents '1' with '7464'
7462 -7463 7464 0
-7464 7463 0
-7464 -7462 0
c Var 'aux1684' order represents '2' with '7465'
-7463 7465 0
c Var 'aux1684' direct represents '2' with '7466'
7463 -7465 7466 0
-7466 7465 0
-7466 -7463 0
c Var 'aux1684' direct represents '3' with '-7465'
7462 7464 7466 -7465 0
c Encoding variable: aux1685 with domain: int(0..4) (representing constraint (aux1680 + aux1682))
c Both direct and order encoding.
c Var 'aux1685' order represents '0' with '7467'
c Var 'aux1685' direct represents '0' with '7467'
c Var 'aux1685' order represents '1' with '7468'
-7467 7468 0
c Var 'aux1685' direct represents '1' with '7469'
7467 -7468 7469 0
-7469 7468 0
-7469 -7467 0
c Var 'aux1685' order represents '2' with '7470'
-7468 7470 0
c Var 'aux1685' direct represents '2' with '7471'
7468 -7470 7471 0
-7471 7470 0
-7471 -7468 0
c Var 'aux1685' order represents '3' with '7472'
-7470 7472 0
c Var 'aux1685' direct represents '3' with '7473'
7470 -7472 7473 0
-7473 7472 0
-7473 -7470 0
c Var 'aux1685' direct represents '4' with '-7472'
7467 7469 7471 7473 -7472 0
c Encoding variable: aux1686 with domain: int(0..2) (representing constraint ((x_00006_00007=7) + (x_00005_00009=7)))
c Both direct and order encoding.
c Var 'aux1686' order represents '0' with '7474'
c Var 'aux1686' direct represents '0' with '7474'
c Var 'aux1686' order represents '1' with '7475'
-7474 7475 0
c Var 'aux1686' direct represents '1' with '7476'
7474 -7475 7476 0
-7476 7475 0
-7476 -7474 0
c Var 'aux1686' direct represents '2' with '-7475'
7474 7476 -7475 0
c Encoding variable: aux1687 with domain: int(0..2) (representing constraint ((x_00005_00008=7) + (x_00006_00008=7)))
c Both direct and order encoding.
c Var 'aux1687' order represents '0' with '7477'
c Var 'aux1687' direct represents '0' with '7477'
c Var 'aux1687' order represents '1' with '7478'
-7477 7478 0
c Var 'aux1687' direct represents '1' with '7479'
7477 -7478 7479 0
-7479 7478 0
-7479 -7477 0
c Var 'aux1687' direct represents '2' with '-7478'
7477 7479 -7478 0
c Encoding variable: aux1688 with domain: int(0..2) (representing constraint ((x_00005_00007=7) + (x_00004_00007=7)))
c Both direct and order encoding.
c Var 'aux1688' order represents '0' with '7480'
c Var 'aux1688' direct represents '0' with '7480'
c Var 'aux1688' order represents '1' with '7481'
-7480 7481 0
c Var 'aux1688' direct represents '1' with '7482'
7480 -7481 7482 0
-7482 7481 0
-7482 -7480 0
c Var 'aux1688' direct represents '2' with '-7481'
7480 7482 -7481 0
c Encoding variable: aux1689 with domain: int(0..2) (representing constraint ((x_00004_00009=7) + (x_00004_00008=7)))
c Both direct and order encoding.
c Var 'aux1689' order represents '0' with '7483'
c Var 'aux1689' direct represents '0' with '7483'
c Var 'aux1689' order represents '1' with '7484'
-7483 7484 0
c Var 'aux1689' direct represents '1' with '7485'
7483 -7484 7485 0
-7485 7484 0
-7485 -7483 0
c Var 'aux1689' direct represents '2' with '-7484'
7483 7485 -7484 0
c Encoding variable: aux1690 with domain: int(0..3) (representing constraint ((x_00006_00009=7) + aux1689))
c Both direct and order encoding.
c Var 'aux1690' order represents '0' with '7486'
c Var 'aux1690' direct represents '0' with '7486'
c Var 'aux1690' order represents '1' with '7487'
-7486 7487 0
c Var 'aux1690' direct represents '1' with '7488'
7486 -7487 7488 0
-7488 7487 0
-7488 -7486 0
c Var 'aux1690' order represents '2' with '7489'
-7487 7489 0
c Var 'aux1690' direct represents '2' with '7490'
7487 -7489 7490 0
-7490 7489 0
-7490 -7487 0
c Var 'aux1690' direct represents '3' with '-7489'
7486 7488 7490 -7489 0
c Encoding variable: aux1691 with domain: int(0..4) (representing constraint (aux1686 + aux1688))
c Both direct and order encoding.
c Var 'aux1691' order represents '0' with '7491'
c Var 'aux1691' direct represents '0' with '7491'
c Var 'aux1691' order represents '1' with '7492'
-7491 7492 0
c Var 'aux1691' direct represents '1' with '7493'
7491 -7492 7493 0
-7493 7492 0
-7493 -7491 0
c Var 'aux1691' order represents '2' with '7494'
-7492 7494 0
c Var 'aux1691' direct represents '2' with '7495'
7492 -7494 7495 0
-7495 7494 0
-7495 -7492 0
c Var 'aux1691' order represents '3' with '7496'
-7494 7496 0
c Var 'aux1691' direct represents '3' with '7497'
7494 -7496 7497 0
-7497 7496 0
-7497 -7494 0
c Var 'aux1691' direct represents '4' with '-7496'
7491 7493 7495 7497 -7496 0
c Encoding variable: aux1692 with domain: int(0..2) (representing constraint ((x_00006_00007=8) + (x_00005_00009=8)))
c Both direct and order encoding.
c Var 'aux1692' order represents '0' with '7498'
c Var 'aux1692' direct represents '0' with '7498'
c Var 'aux1692' order represents '1' with '7499'
-7498 7499 0
c Var 'aux1692' direct represents '1' with '7500'
7498 -7499 7500 0
-7500 7499 0
-7500 -7498 0
c Var 'aux1692' direct represents '2' with '-7499'
7498 7500 -7499 0
c Encoding variable: aux1693 with domain: int(0..2) (representing constraint ((x_00005_00008=8) + (x_00006_00008=8)))
c Both direct and order encoding.
c Var 'aux1693' order represents '0' with '7501'
c Var 'aux1693' direct represents '0' with '7501'
c Var 'aux1693' order represents '1' with '7502'
-7501 7502 0
c Var 'aux1693' direct represents '1' with '7503'
7501 -7502 7503 0
-7503 7502 0
-7503 -7501 0
c Var 'aux1693' direct represents '2' with '-7502'
7501 7503 -7502 0
c Encoding variable: aux1694 with domain: int(0..2) (representing constraint ((x_00005_00007=8) + (x_00004_00007=8)))
c Both direct and order encoding.
c Var 'aux1694' order represents '0' with '7504'
c Var 'aux1694' direct represents '0' with '7504'
c Var 'aux1694' order represents '1' with '7505'
-7504 7505 0
c Var 'aux1694' direct represents '1' with '7506'
7504 -7505 7506 0
-7506 7505 0
-7506 -7504 0
c Var 'aux1694' direct represents '2' with '-7505'
7504 7506 -7505 0
c Encoding variable: aux1695 with domain: int(0..2) (representing constraint ((x_00004_00009=8) + (x_00004_00008=8)))
c Both direct and order encoding.
c Var 'aux1695' order represents '0' with '7507'
c Var 'aux1695' direct represents '0' with '7507'
c Var 'aux1695' order represents '1' with '7508'
-7507 7508 0
c Var 'aux1695' direct represents '1' with '7509'
7507 -7508 7509 0
-7509 7508 0
-7509 -7507 0
c Var 'aux1695' direct represents '2' with '-7508'
7507 7509 -7508 0
c Encoding variable: aux1696 with domain: int(0..3) (representing constraint ((x_00006_00009=8) + aux1695))
c Both direct and order encoding.
c Var 'aux1696' order represents '0' with '7510'
c Var 'aux1696' direct represents '0' with '7510'
c Var 'aux1696' order represents '1' with '7511'
-7510 7511 0
c Var 'aux1696' direct represents '1' with '7512'
7510 -7511 7512 0
-7512 7511 0
-7512 -7510 0
c Var 'aux1696' order represents '2' with '7513'
-7511 7513 0
c Var 'aux1696' direct represents '2' with '7514'
7511 -7513 7514 0
-7514 7513 0
-7514 -7511 0
c Var 'aux1696' direct represents '3' with '-7513'
7510 7512 7514 -7513 0
c Encoding variable: aux1697 with domain: int(0..4) (representing constraint (aux1692 + aux1694))
c Both direct and order encoding.
c Var 'aux1697' order represents '0' with '7515'
c Var 'aux1697' direct represents '0' with '7515'
c Var 'aux1697' order represents '1' with '7516'
-7515 7516 0
c Var 'aux1697' direct represents '1' with '7517'
7515 -7516 7517 0
-7517 7516 0
-7517 -7515 0
c Var 'aux1697' order represents '2' with '7518'
-7516 7518 0
c Var 'aux1697' direct represents '2' with '7519'
7516 -7518 7519 0
-7519 7518 0
-7519 -7516 0
c Var 'aux1697' order represents '3' with '7520'
-7518 7520 0
c Var 'aux1697' direct represents '3' with '7521'
7518 -7520 7521 0
-7521 7520 0
-7521 -7518 0
c Var 'aux1697' direct represents '4' with '-7520'
7515 7517 7519 7521 -7520 0
c Encoding variable: aux1698 with domain: int(0..2) (representing constraint ((x_00006_00007=9) + (x_00005_00009=9)))
c Both direct and order encoding.
c Var 'aux1698' order represents '0' with '7522'
c Var 'aux1698' direct represents '0' with '7522'
c Var 'aux1698' order represents '1' with '7523'
-7522 7523 0
c Var 'aux1698' direct represents '1' with '7524'
7522 -7523 7524 0
-7524 7523 0
-7524 -7522 0
c Var 'aux1698' direct represents '2' with '-7523'
7522 7524 -7523 0
c Encoding variable: aux1699 with domain: int(0..2) (representing constraint ((x_00005_00008=9) + (x_00006_00008=9)))
c Both direct and order encoding.
c Var 'aux1699' order represents '0' with '7525'
c Var 'aux1699' direct represents '0' with '7525'
c Var 'aux1699' order represents '1' with '7526'
-7525 7526 0
c Var 'aux1699' direct represents '1' with '7527'
7525 -7526 7527 0
-7527 7526 0
-7527 -7525 0
c Var 'aux1699' direct represents '2' with '-7526'
7525 7527 -7526 0
c Encoding variable: aux1700 with domain: int(0..2) (representing constraint ((x_00005_00007=9) + (x_00004_00007=9)))
c Both direct and order encoding.
c Var 'aux1700' order represents '0' with '7528'
c Var 'aux1700' direct represents '0' with '7528'
c Var 'aux1700' order represents '1' with '7529'
-7528 7529 0
c Var 'aux1700' direct represents '1' with '7530'
7528 -7529 7530 0
-7530 7529 0
-7530 -7528 0
c Var 'aux1700' direct represents '2' with '-7529'
7528 7530 -7529 0
c Encoding variable: aux1701 with domain: int(0..2) (representing constraint ((x_00004_00009=9) + (x_00004_00008=9)))
c Both direct and order encoding.
c Var 'aux1701' order represents '0' with '7531'
c Var 'aux1701' direct represents '0' with '7531'
c Var 'aux1701' order represents '1' with '7532'
-7531 7532 0
c Var 'aux1701' direct represents '1' with '7533'
7531 -7532 7533 0
-7533 7532 0
-7533 -7531 0
c Var 'aux1701' direct represents '2' with '-7532'
7531 7533 -7532 0
c Encoding variable: aux1702 with domain: int(0..3) (representing constraint ((x_00006_00009=9) + aux1701))
c Both direct and order encoding.
c Var 'aux1702' order represents '0' with '7534'
c Var 'aux1702' direct represents '0' with '7534'
c Var 'aux1702' order represents '1' with '7535'
-7534 7535 0
c Var 'aux1702' direct represents '1' with '7536'
7534 -7535 7536 0
-7536 7535 0
-7536 -7534 0
c Var 'aux1702' order represents '2' with '7537'
-7535 7537 0
c Var 'aux1702' direct represents '2' with '7538'
7535 -7537 7538 0
-7538 7537 0
-7538 -7535 0
c Var 'aux1702' direct represents '3' with '-7537'
7534 7536 7538 -7537 0
c Encoding variable: aux1703 with domain: int(0..4) (representing constraint (aux1698 + aux1700))
c Both direct and order encoding.
c Var 'aux1703' order represents '0' with '7539'
c Var 'aux1703' direct represents '0' with '7539'
c Var 'aux1703' order represents '1' with '7540'
-7539 7540 0
c Var 'aux1703' direct represents '1' with '7541'
7539 -7540 7541 0
-7541 7540 0
-7541 -7539 0
c Var 'aux1703' order represents '2' with '7542'
-7540 7542 0
c Var 'aux1703' direct represents '2' with '7543'
7540 -7542 7543 0
-7543 7542 0
-7543 -7540 0
c Var 'aux1703' order represents '3' with '7544'
-7542 7544 0
c Var 'aux1703' direct represents '3' with '7545'
7542 -7544 7545 0
-7545 7544 0
-7545 -7542 0
c Var 'aux1703' direct represents '4' with '-7544'
7539 7541 7543 7545 -7544 0
c Encoding variable: aux1704 with domain: int(0..2) (representing constraint ((x_00008_00001=1) + (x_00007_00003=1)))
c Both direct and order encoding.
c Var 'aux1704' order represents '0' with '7546'
c Var 'aux1704' direct represents '0' with '7546'
c Var 'aux1704' order represents '1' with '7547'
-7546 7547 0
c Var 'aux1704' direct represents '1' with '7548'
7546 -7547 7548 0
-7548 7547 0
-7548 -7546 0
c Var 'aux1704' direct represents '2' with '-7547'
7546 7548 -7547 0
c Encoding variable: aux1705 with domain: int(0..2) (representing constraint ((x_00007_00002=1) + (x_00008_00002=1)))
c Both direct and order encoding.
c Var 'aux1705' order represents '0' with '7549'
c Var 'aux1705' direct represents '0' with '7549'
c Var 'aux1705' order represents '1' with '7550'
-7549 7550 0
c Var 'aux1705' direct represents '1' with '7551'
7549 -7550 7551 0
-7551 7550 0
-7551 -7549 0
c Var 'aux1705' direct represents '2' with '-7550'
7549 7551 -7550 0
c Encoding variable: aux1706 with domain: int(0..2) (representing constraint ((x_00007_00001=1) + (x_00009_00001=1)))
c Both direct and order encoding.
c Var 'aux1706' order represents '0' with '7552'
c Var 'aux1706' direct represents '0' with '7552'
c Var 'aux1706' order represents '1' with '7553'
-7552 7553 0
c Var 'aux1706' direct represents '1' with '7554'
7552 -7553 7554 0
-7554 7553 0
-7554 -7552 0
c Var 'aux1706' direct represents '2' with '-7553'
7552 7554 -7553 0
c Encoding variable: aux1707 with domain: int(0..2) (representing constraint ((x_00009_00003=1) + (x_00009_00002=1)))
c Both direct and order encoding.
c Var 'aux1707' order represents '0' with '7555'
c Var 'aux1707' direct represents '0' with '7555'
c Var 'aux1707' order represents '1' with '7556'
-7555 7556 0
c Var 'aux1707' direct represents '1' with '7557'
7555 -7556 7557 0
-7557 7556 0
-7557 -7555 0
c Var 'aux1707' direct represents '2' with '-7556'
7555 7557 -7556 0
c Encoding variable: aux1708 with domain: int(0..3) (representing constraint ((x_00008_00003=1) + aux1707))
c Both direct and order encoding.
c Var 'aux1708' order represents '0' with '7558'
c Var 'aux1708' direct represents '0' with '7558'
c Var 'aux1708' order represents '1' with '7559'
-7558 7559 0
c Var 'aux1708' direct represents '1' with '7560'
7558 -7559 7560 0
-7560 7559 0
-7560 -7558 0
c Var 'aux1708' order represents '2' with '7561'
-7559 7561 0
c Var 'aux1708' direct represents '2' with '7562'
7559 -7561 7562 0
-7562 7561 0
-7562 -7559 0
c Var 'aux1708' direct represents '3' with '-7561'
7558 7560 7562 -7561 0
c Encoding variable: aux1709 with domain: int(0..4) (representing constraint (aux1704 + aux1706))
c Both direct and order encoding.
c Var 'aux1709' order represents '0' with '7563'
c Var 'aux1709' direct represents '0' with '7563'
c Var 'aux1709' order represents '1' with '7564'
-7563 7564 0
c Var 'aux1709' direct represents '1' with '7565'
7563 -7564 7565 0
-7565 7564 0
-7565 -7563 0
c Var 'aux1709' order represents '2' with '7566'
-7564 7566 0
c Var 'aux1709' direct represents '2' with '7567'
7564 -7566 7567 0
-7567 7566 0
-7567 -7564 0
c Var 'aux1709' order represents '3' with '7568'
-7566 7568 0
c Var 'aux1709' direct represents '3' with '7569'
7566 -7568 7569 0
-7569 7568 0
-7569 -7566 0
c Var 'aux1709' direct represents '4' with '-7568'
7563 7565 7567 7569 -7568 0
c Encoding variable: aux1710 with domain: int(0..2) (representing constraint ((x_00008_00001=2) + (x_00007_00003=2)))
c Both direct and order encoding.
c Var 'aux1710' order represents '0' with '7570'
c Var 'aux1710' direct represents '0' with '7570'
c Var 'aux1710' order represents '1' with '7571'
-7570 7571 0
c Var 'aux1710' direct represents '1' with '7572'
7570 -7571 7572 0
-7572 7571 0
-7572 -7570 0
c Var 'aux1710' direct represents '2' with '-7571'
7570 7572 -7571 0
c Encoding variable: aux1711 with domain: int(0..2) (representing constraint ((x_00007_00002=2) + (x_00008_00002=2)))
c Both direct and order encoding.
c Var 'aux1711' order represents '0' with '7573'
c Var 'aux1711' direct represents '0' with '7573'
c Var 'aux1711' order represents '1' with '7574'
-7573 7574 0
c Var 'aux1711' direct represents '1' with '7575'
7573 -7574 7575 0
-7575 7574 0
-7575 -7573 0
c Var 'aux1711' direct represents '2' with '-7574'
7573 7575 -7574 0
c Encoding variable: aux1712 with domain: int(0..2) (representing constraint ((x_00007_00001=2) + (x_00009_00001=2)))
c Both direct and order encoding.
c Var 'aux1712' order represents '0' with '7576'
c Var 'aux1712' direct represents '0' with '7576'
c Var 'aux1712' order represents '1' with '7577'
-7576 7577 0
c Var 'aux1712' direct represents '1' with '7578'
7576 -7577 7578 0
-7578 7577 0
-7578 -7576 0
c Var 'aux1712' direct represents '2' with '-7577'
7576 7578 -7577 0
c Encoding variable: aux1713 with domain: int(0..2) (representing constraint ((x_00009_00003=2) + (x_00009_00002=2)))
c Both direct and order encoding.
c Var 'aux1713' order represents '0' with '7579'
c Var 'aux1713' direct represents '0' with '7579'
c Var 'aux1713' order represents '1' with '7580'
-7579 7580 0
c Var 'aux1713' direct represents '1' with '7581'
7579 -7580 7581 0
-7581 7580 0
-7581 -7579 0
c Var 'aux1713' direct represents '2' with '-7580'
7579 7581 -7580 0
c Encoding variable: aux1714 with domain: int(0..3) (representing constraint ((x_00008_00003=2) + aux1713))
c Both direct and order encoding.
c Var 'aux1714' order represents '0' with '7582'
c Var 'aux1714' direct represents '0' with '7582'
c Var 'aux1714' order represents '1' with '7583'
-7582 7583 0
c Var 'aux1714' direct represents '1' with '7584'
7582 -7583 7584 0
-7584 7583 0
-7584 -7582 0
c Var 'aux1714' order represents '2' with '7585'
-7583 7585 0
c Var 'aux1714' direct represents '2' with '7586'
7583 -7585 7586 0
-7586 7585 0
-7586 -7583 0
c Var 'aux1714' direct represents '3' with '-7585'
7582 7584 7586 -7585 0
c Encoding variable: aux1715 with domain: int(0..4) (representing constraint (aux1710 + aux1712))
c Both direct and order encoding.
c Var 'aux1715' order represents '0' with '7587'
c Var 'aux1715' direct represents '0' with '7587'
c Var 'aux1715' order represents '1' with '7588'
-7587 7588 0
c Var 'aux1715' direct represents '1' with '7589'
7587 -7588 7589 0
-7589 7588 0
-7589 -7587 0
c Var 'aux1715' order represents '2' with '7590'
-7588 7590 0
c Var 'aux1715' direct represents '2' with '7591'
7588 -7590 7591 0
-7591 7590 0
-7591 -7588 0
c Var 'aux1715' order represents '3' with '7592'
-7590 7592 0
c Var 'aux1715' direct represents '3' with '7593'
7590 -7592 7593 0
-7593 7592 0
-7593 -7590 0
c Var 'aux1715' direct represents '4' with '-7592'
7587 7589 7591 7593 -7592 0
c Encoding variable: aux1716 with domain: int(0..2) (representing constraint ((x_00008_00001=3) + (x_00007_00003=3)))
c Both direct and order encoding.
c Var 'aux1716' order represents '0' with '7594'
c Var 'aux1716' direct represents '0' with '7594'
c Var 'aux1716' order represents '1' with '7595'
-7594 7595 0
c Var 'aux1716' direct represents '1' with '7596'
7594 -7595 7596 0
-7596 7595 0
-7596 -7594 0
c Var 'aux1716' direct represents '2' with '-7595'
7594 7596 -7595 0
c Encoding variable: aux1717 with domain: int(0..2) (representing constraint ((x_00007_00002=3) + (x_00008_00002=3)))
c Both direct and order encoding.
c Var 'aux1717' order represents '0' with '7597'
c Var 'aux1717' direct represents '0' with '7597'
c Var 'aux1717' order represents '1' with '7598'
-7597 7598 0
c Var 'aux1717' direct represents '1' with '7599'
7597 -7598 7599 0
-7599 7598 0
-7599 -7597 0
c Var 'aux1717' direct represents '2' with '-7598'
7597 7599 -7598 0
c Encoding variable: aux1718 with domain: int(0..2) (representing constraint ((x_00007_00001=3) + (x_00009_00001=3)))
c Both direct and order encoding.
c Var 'aux1718' order represents '0' with '7600'
c Var 'aux1718' direct represents '0' with '7600'
c Var 'aux1718' order represents '1' with '7601'
-7600 7601 0
c Var 'aux1718' direct represents '1' with '7602'
7600 -7601 7602 0
-7602 7601 0
-7602 -7600 0
c Var 'aux1718' direct represents '2' with '-7601'
7600 7602 -7601 0
c Encoding variable: aux1719 with domain: int(0..2) (representing constraint ((x_00009_00003=3) + (x_00009_00002=3)))
c Both direct and order encoding.
c Var 'aux1719' order represents '0' with '7603'
c Var 'aux1719' direct represents '0' with '7603'
c Var 'aux1719' order represents '1' with '7604'
-7603 7604 0
c Var 'aux1719' direct represents '1' with '7605'
7603 -7604 7605 0
-7605 7604 0
-7605 -7603 0
c Var 'aux1719' direct represents '2' with '-7604'
7603 7605 -7604 0
c Encoding variable: aux1720 with domain: int(0..3) (representing constraint ((x_00008_00003=3) + aux1719))
c Both direct and order encoding.
c Var 'aux1720' order represents '0' with '7606'
c Var 'aux1720' direct represents '0' with '7606'
c Var 'aux1720' order represents '1' with '7607'
-7606 7607 0
c Var 'aux1720' direct represents '1' with '7608'
7606 -7607 7608 0
-7608 7607 0
-7608 -7606 0
c Var 'aux1720' order represents '2' with '7609'
-7607 7609 0
c Var 'aux1720' direct represents '2' with '7610'
7607 -7609 7610 0
-7610 7609 0
-7610 -7607 0
c Var 'aux1720' direct represents '3' with '-7609'
7606 7608 7610 -7609 0
c Encoding variable: aux1721 with domain: int(0..4) (representing constraint (aux1716 + aux1718))
c Both direct and order encoding.
c Var 'aux1721' order represents '0' with '7611'
c Var 'aux1721' direct represents '0' with '7611'
c Var 'aux1721' order represents '1' with '7612'
-7611 7612 0
c Var 'aux1721' direct represents '1' with '7613'
7611 -7612 7613 0
-7613 7612 0
-7613 -7611 0
c Var 'aux1721' order represents '2' with '7614'
-7612 7614 0
c Var 'aux1721' direct represents '2' with '7615'
7612 -7614 7615 0
-7615 7614 0
-7615 -7612 0
c Var 'aux1721' order represents '3' with '7616'
-7614 7616 0
c Var 'aux1721' direct represents '3' with '7617'
7614 -7616 7617 0
-7617 7616 0
-7617 -7614 0
c Var 'aux1721' direct represents '4' with '-7616'
7611 7613 7615 7617 -7616 0
c Encoding variable: aux1722 with domain: int(0..2) (representing constraint ((x_00008_00001=4) + (x_00007_00003=4)))
c Both direct and order encoding.
c Var 'aux1722' order represents '0' with '7618'
c Var 'aux1722' direct represents '0' with '7618'
c Var 'aux1722' order represents '1' with '7619'
-7618 7619 0
c Var 'aux1722' direct represents '1' with '7620'
7618 -7619 7620 0
-7620 7619 0
-7620 -7618 0
c Var 'aux1722' direct represents '2' with '-7619'
7618 7620 -7619 0
c Encoding variable: aux1723 with domain: int(0..2) (representing constraint ((x_00007_00002=4) + (x_00008_00002=4)))
c Both direct and order encoding.
c Var 'aux1723' order represents '0' with '7621'
c Var 'aux1723' direct represents '0' with '7621'
c Var 'aux1723' order represents '1' with '7622'
-7621 7622 0
c Var 'aux1723' direct represents '1' with '7623'
7621 -7622 7623 0
-7623 7622 0
-7623 -7621 0
c Var 'aux1723' direct represents '2' with '-7622'
7621 7623 -7622 0
c Encoding variable: aux1724 with domain: int(0..2) (representing constraint ((x_00007_00001=4) + (x_00009_00001=4)))
c Both direct and order encoding.
c Var 'aux1724' order represents '0' with '7624'
c Var 'aux1724' direct represents '0' with '7624'
c Var 'aux1724' order represents '1' with '7625'
-7624 7625 0
c Var 'aux1724' direct represents '1' with '7626'
7624 -7625 7626 0
-7626 7625 0
-7626 -7624 0
c Var 'aux1724' direct represents '2' with '-7625'
7624 7626 -7625 0
c Encoding variable: aux1725 with domain: int(0..2) (representing constraint ((x_00009_00003=4) + (x_00009_00002=4)))
c Both direct and order encoding.
c Var 'aux1725' order represents '0' with '7627'
c Var 'aux1725' direct represents '0' with '7627'
c Var 'aux1725' order represents '1' with '7628'
-7627 7628 0
c Var 'aux1725' direct represents '1' with '7629'
7627 -7628 7629 0
-7629 7628 0
-7629 -7627 0
c Var 'aux1725' direct represents '2' with '-7628'
7627 7629 -7628 0
c Encoding variable: aux1726 with domain: int(0..3) (representing constraint ((x_00008_00003=4) + aux1725))
c Both direct and order encoding.
c Var 'aux1726' order represents '0' with '7630'
c Var 'aux1726' direct represents '0' with '7630'
c Var 'aux1726' order represents '1' with '7631'
-7630 7631 0
c Var 'aux1726' direct represents '1' with '7632'
7630 -7631 7632 0
-7632 7631 0
-7632 -7630 0
c Var 'aux1726' order represents '2' with '7633'
-7631 7633 0
c Var 'aux1726' direct represents '2' with '7634'
7631 -7633 7634 0
-7634 7633 0
-7634 -7631 0
c Var 'aux1726' direct represents '3' with '-7633'
7630 7632 7634 -7633 0
c Encoding variable: aux1727 with domain: int(0..4) (representing constraint (aux1722 + aux1724))
c Both direct and order encoding.
c Var 'aux1727' order represents '0' with '7635'
c Var 'aux1727' direct represents '0' with '7635'
c Var 'aux1727' order represents '1' with '7636'
-7635 7636 0
c Var 'aux1727' direct represents '1' with '7637'
7635 -7636 7637 0
-7637 7636 0
-7637 -7635 0
c Var 'aux1727' order represents '2' with '7638'
-7636 7638 0
c Var 'aux1727' direct represents '2' with '7639'
7636 -7638 7639 0
-7639 7638 0
-7639 -7636 0
c Var 'aux1727' order represents '3' with '7640'
-7638 7640 0
c Var 'aux1727' direct represents '3' with '7641'
7638 -7640 7641 0
-7641 7640 0
-7641 -7638 0
c Var 'aux1727' direct represents '4' with '-7640'
7635 7637 7639 7641 -7640 0
c Encoding variable: aux1728 with domain: int(0..2) (representing constraint ((x_00008_00001=5) + (x_00007_00003=5)))
c Both direct and order encoding.
c Var 'aux1728' order represents '0' with '7642'
c Var 'aux1728' direct represents '0' with '7642'
c Var 'aux1728' order represents '1' with '7643'
-7642 7643 0
c Var 'aux1728' direct represents '1' with '7644'
7642 -7643 7644 0
-7644 7643 0
-7644 -7642 0
c Var 'aux1728' direct represents '2' with '-7643'
7642 7644 -7643 0
c Encoding variable: aux1729 with domain: int(0..2) (representing constraint ((x_00007_00002=5) + (x_00008_00002=5)))
c Both direct and order encoding.
c Var 'aux1729' order represents '0' with '7645'
c Var 'aux1729' direct represents '0' with '7645'
c Var 'aux1729' order represents '1' with '7646'
-7645 7646 0
c Var 'aux1729' direct represents '1' with '7647'
7645 -7646 7647 0
-7647 7646 0
-7647 -7645 0
c Var 'aux1729' direct represents '2' with '-7646'
7645 7647 -7646 0
c Encoding variable: aux1730 with domain: int(0..2) (representing constraint ((x_00007_00001=5) + (x_00009_00001=5)))
c Both direct and order encoding.
c Var 'aux1730' order represents '0' with '7648'
c Var 'aux1730' direct represents '0' with '7648'
c Var 'aux1730' order represents '1' with '7649'
-7648 7649 0
c Var 'aux1730' direct represents '1' with '7650'
7648 -7649 7650 0
-7650 7649 0
-7650 -7648 0
c Var 'aux1730' direct represents '2' with '-7649'
7648 7650 -7649 0
c Encoding variable: aux1731 with domain: int(0..2) (representing constraint ((x_00009_00003=5) + (x_00009_00002=5)))
c Both direct and order encoding.
c Var 'aux1731' order represents '0' with '7651'
c Var 'aux1731' direct represents '0' with '7651'
c Var 'aux1731' order represents '1' with '7652'
-7651 7652 0
c Var 'aux1731' direct represents '1' with '7653'
7651 -7652 7653 0
-7653 7652 0
-7653 -7651 0
c Var 'aux1731' direct represents '2' with '-7652'
7651 7653 -7652 0
c Encoding variable: aux1732 with domain: int(0..3) (representing constraint ((x_00008_00003=5) + aux1731))
c Both direct and order encoding.
c Var 'aux1732' order represents '0' with '7654'
c Var 'aux1732' direct represents '0' with '7654'
c Var 'aux1732' order represents '1' with '7655'
-7654 7655 0
c Var 'aux1732' direct represents '1' with '7656'
7654 -7655 7656 0
-7656 7655 0
-7656 -7654 0
c Var 'aux1732' order represents '2' with '7657'
-7655 7657 0
c Var 'aux1732' direct represents '2' with '7658'
7655 -7657 7658 0
-7658 7657 0
-7658 -7655 0
c Var 'aux1732' direct represents '3' with '-7657'
7654 7656 7658 -7657 0
c Encoding variable: aux1733 with domain: int(0..4) (representing constraint (aux1728 + aux1730))
c Both direct and order encoding.
c Var 'aux1733' order represents '0' with '7659'
c Var 'aux1733' direct represents '0' with '7659'
c Var 'aux1733' order represents '1' with '7660'
-7659 7660 0
c Var 'aux1733' direct represents '1' with '7661'
7659 -7660 7661 0
-7661 7660 0
-7661 -7659 0
c Var 'aux1733' order represents '2' with '7662'
-7660 7662 0
c Var 'aux1733' direct represents '2' with '7663'
7660 -7662 7663 0
-7663 7662 0
-7663 -7660 0
c Var 'aux1733' order represents '3' with '7664'
-7662 7664 0
c Var 'aux1733' direct represents '3' with '7665'
7662 -7664 7665 0
-7665 7664 0
-7665 -7662 0
c Var 'aux1733' direct represents '4' with '-7664'
7659 7661 7663 7665 -7664 0
c Encoding variable: aux1734 with domain: int(0..2) (representing constraint ((x_00008_00001=6) + (x_00007_00003=6)))
c Both direct and order encoding.
c Var 'aux1734' order represents '0' with '7666'
c Var 'aux1734' direct represents '0' with '7666'
c Var 'aux1734' order represents '1' with '7667'
-7666 7667 0
c Var 'aux1734' direct represents '1' with '7668'
7666 -7667 7668 0
-7668 7667 0
-7668 -7666 0
c Var 'aux1734' direct represents '2' with '-7667'
7666 7668 -7667 0
c Encoding variable: aux1735 with domain: int(0..2) (representing constraint ((x_00007_00002=6) + (x_00008_00002=6)))
c Both direct and order encoding.
c Var 'aux1735' order represents '0' with '7669'
c Var 'aux1735' direct represents '0' with '7669'
c Var 'aux1735' order represents '1' with '7670'
-7669 7670 0
c Var 'aux1735' direct represents '1' with '7671'
7669 -7670 7671 0
-7671 7670 0
-7671 -7669 0
c Var 'aux1735' direct represents '2' with '-7670'
7669 7671 -7670 0
c Encoding variable: aux1736 with domain: int(0..2) (representing constraint ((x_00007_00001=6) + (x_00009_00001=6)))
c Both direct and order encoding.
c Var 'aux1736' order represents '0' with '7672'
c Var 'aux1736' direct represents '0' with '7672'
c Var 'aux1736' order represents '1' with '7673'
-7672 7673 0
c Var 'aux1736' direct represents '1' with '7674'
7672 -7673 7674 0
-7674 7673 0
-7674 -7672 0
c Var 'aux1736' direct represents '2' with '-7673'
7672 7674 -7673 0
c Encoding variable: aux1737 with domain: int(0..2) (representing constraint ((x_00009_00003=6) + (x_00009_00002=6)))
c Both direct and order encoding.
c Var 'aux1737' order represents '0' with '7675'
c Var 'aux1737' direct represents '0' with '7675'
c Var 'aux1737' order represents '1' with '7676'
-7675 7676 0
c Var 'aux1737' direct represents '1' with '7677'
7675 -7676 7677 0
-7677 7676 0
-7677 -7675 0
c Var 'aux1737' direct represents '2' with '-7676'
7675 7677 -7676 0
c Encoding variable: aux1738 with domain: int(0..3) (representing constraint ((x_00008_00003=6) + aux1737))
c Both direct and order encoding.
c Var 'aux1738' order represents '0' with '7678'
c Var 'aux1738' direct represents '0' with '7678'
c Var 'aux1738' order represents '1' with '7679'
-7678 7679 0
c Var 'aux1738' direct represents '1' with '7680'
7678 -7679 7680 0
-7680 7679 0
-7680 -7678 0
c Var 'aux1738' order represents '2' with '7681'
-7679 7681 0
c Var 'aux1738' direct represents '2' with '7682'
7679 -7681 7682 0
-7682 7681 0
-7682 -7679 0
c Var 'aux1738' direct represents '3' with '-7681'
7678 7680 7682 -7681 0
c Encoding variable: aux1739 with domain: int(0..4) (representing constraint (aux1734 + aux1736))
c Both direct and order encoding.
c Var 'aux1739' order represents '0' with '7683'
c Var 'aux1739' direct represents '0' with '7683'
c Var 'aux1739' order represents '1' with '7684'
-7683 7684 0
c Var 'aux1739' direct represents '1' with '7685'
7683 -7684 7685 0
-7685 7684 0
-7685 -7683 0
c Var 'aux1739' order represents '2' with '7686'
-7684 7686 0
c Var 'aux1739' direct represents '2' with '7687'
7684 -7686 7687 0
-7687 7686 0
-7687 -7684 0
c Var 'aux1739' order represents '3' with '7688'
-7686 7688 0
c Var 'aux1739' direct represents '3' with '7689'
7686 -7688 7689 0
-7689 7688 0
-7689 -7686 0
c Var 'aux1739' direct represents '4' with '-7688'
7683 7685 7687 7689 -7688 0
c Encoding variable: aux1740 with domain: int(0..2) (representing constraint ((x_00008_00001=7) + (x_00007_00003=7)))
c Both direct and order encoding.
c Var 'aux1740' order represents '0' with '7690'
c Var 'aux1740' direct represents '0' with '7690'
c Var 'aux1740' order represents '1' with '7691'
-7690 7691 0
c Var 'aux1740' direct represents '1' with '7692'
7690 -7691 7692 0
-7692 7691 0
-7692 -7690 0
c Var 'aux1740' direct represents '2' with '-7691'
7690 7692 -7691 0
c Encoding variable: aux1741 with domain: int(0..2) (representing constraint ((x_00007_00002=7) + (x_00008_00002=7)))
c Both direct and order encoding.
c Var 'aux1741' order represents '0' with '7693'
c Var 'aux1741' direct represents '0' with '7693'
c Var 'aux1741' order represents '1' with '7694'
-7693 7694 0
c Var 'aux1741' direct represents '1' with '7695'
7693 -7694 7695 0
-7695 7694 0
-7695 -7693 0
c Var 'aux1741' direct represents '2' with '-7694'
7693 7695 -7694 0
c Encoding variable: aux1742 with domain: int(0..2) (representing constraint ((x_00007_00001=7) + (x_00009_00001=7)))
c Both direct and order encoding.
c Var 'aux1742' order represents '0' with '7696'
c Var 'aux1742' direct represents '0' with '7696'
c Var 'aux1742' order represents '1' with '7697'
-7696 7697 0
c Var 'aux1742' direct represents '1' with '7698'
7696 -7697 7698 0
-7698 7697 0
-7698 -7696 0
c Var 'aux1742' direct represents '2' with '-7697'
7696 7698 -7697 0
c Encoding variable: aux1743 with domain: int(0..2) (representing constraint ((x_00009_00003=7) + (x_00009_00002=7)))
c Both direct and order encoding.
c Var 'aux1743' order represents '0' with '7699'
c Var 'aux1743' direct represents '0' with '7699'
c Var 'aux1743' order represents '1' with '7700'
-7699 7700 0
c Var 'aux1743' direct represents '1' with '7701'
7699 -7700 7701 0
-7701 7700 0
-7701 -7699 0
c Var 'aux1743' direct represents '2' with '-7700'
7699 7701 -7700 0
c Encoding variable: aux1744 with domain: int(0..3) (representing constraint ((x_00008_00003=7) + aux1743))
c Both direct and order encoding.
c Var 'aux1744' order represents '0' with '7702'
c Var 'aux1744' direct represents '0' with '7702'
c Var 'aux1744' order represents '1' with '7703'
-7702 7703 0
c Var 'aux1744' direct represents '1' with '7704'
7702 -7703 7704 0
-7704 7703 0
-7704 -7702 0
c Var 'aux1744' order represents '2' with '7705'
-7703 7705 0
c Var 'aux1744' direct represents '2' with '7706'
7703 -7705 7706 0
-7706 7705 0
-7706 -7703 0
c Var 'aux1744' direct represents '3' with '-7705'
7702 7704 7706 -7705 0
c Encoding variable: aux1745 with domain: int(0..4) (representing constraint (aux1740 + aux1742))
c Both direct and order encoding.
c Var 'aux1745' order represents '0' with '7707'
c Var 'aux1745' direct represents '0' with '7707'
c Var 'aux1745' order represents '1' with '7708'
-7707 7708 0
c Var 'aux1745' direct represents '1' with '7709'
7707 -7708 7709 0
-7709 7708 0
-7709 -7707 0
c Var 'aux1745' order represents '2' with '7710'
-7708 7710 0
c Var 'aux1745' direct represents '2' with '7711'
7708 -7710 7711 0
-7711 7710 0
-7711 -7708 0
c Var 'aux1745' order represents '3' with '7712'
-7710 7712 0
c Var 'aux1745' direct represents '3' with '7713'
7710 -7712 7713 0
-7713 7712 0
-7713 -7710 0
c Var 'aux1745' direct represents '4' with '-7712'
7707 7709 7711 7713 -7712 0
c Encoding variable: aux1746 with domain: int(0..2) (representing constraint ((x_00008_00001=8) + (x_00007_00003=8)))
c Both direct and order encoding.
c Var 'aux1746' order represents '0' with '7714'
c Var 'aux1746' direct represents '0' with '7714'
c Var 'aux1746' order represents '1' with '7715'
-7714 7715 0
c Var 'aux1746' direct represents '1' with '7716'
7714 -7715 7716 0
-7716 7715 0
-7716 -7714 0
c Var 'aux1746' direct represents '2' with '-7715'
7714 7716 -7715 0
c Encoding variable: aux1747 with domain: int(0..2) (representing constraint ((x_00007_00002=8) + (x_00008_00002=8)))
c Both direct and order encoding.
c Var 'aux1747' order represents '0' with '7717'
c Var 'aux1747' direct represents '0' with '7717'
c Var 'aux1747' order represents '1' with '7718'
-7717 7718 0
c Var 'aux1747' direct represents '1' with '7719'
7717 -7718 7719 0
-7719 7718 0
-7719 -7717 0
c Var 'aux1747' direct represents '2' with '-7718'
7717 7719 -7718 0
c Encoding variable: aux1748 with domain: int(0..2) (representing constraint ((x_00007_00001=8) + (x_00009_00001=8)))
c Both direct and order encoding.
c Var 'aux1748' order represents '0' with '7720'
c Var 'aux1748' direct represents '0' with '7720'
c Var 'aux1748' order represents '1' with '7721'
-7720 7721 0
c Var 'aux1748' direct represents '1' with '7722'
7720 -7721 7722 0
-7722 7721 0
-7722 -7720 0
c Var 'aux1748' direct represents '2' with '-7721'
7720 7722 -7721 0
c Encoding variable: aux1749 with domain: int(0..2) (representing constraint ((x_00009_00003=8) + (x_00009_00002=8)))
c Both direct and order encoding.
c Var 'aux1749' order represents '0' with '7723'
c Var 'aux1749' direct represents '0' with '7723'
c Var 'aux1749' order represents '1' with '7724'
-7723 7724 0
c Var 'aux1749' direct represents '1' with '7725'
7723 -7724 7725 0
-7725 7724 0
-7725 -7723 0
c Var 'aux1749' direct represents '2' with '-7724'
7723 7725 -7724 0
c Encoding variable: aux1750 with domain: int(0..3) (representing constraint ((x_00008_00003=8) + aux1749))
c Both direct and order encoding.
c Var 'aux1750' order represents '0' with '7726'
c Var 'aux1750' direct represents '0' with '7726'
c Var 'aux1750' order represents '1' with '7727'
-7726 7727 0
c Var 'aux1750' direct represents '1' with '7728'
7726 -7727 7728 0
-7728 7727 0
-7728 -7726 0
c Var 'aux1750' order represents '2' with '7729'
-7727 7729 0
c Var 'aux1750' direct represents '2' with '7730'
7727 -7729 7730 0
-7730 7729 0
-7730 -7727 0
c Var 'aux1750' direct represents '3' with '-7729'
7726 7728 7730 -7729 0
c Encoding variable: aux1751 with domain: int(0..4) (representing constraint (aux1746 + aux1748))
c Both direct and order encoding.
c Var 'aux1751' order represents '0' with '7731'
c Var 'aux1751' direct represents '0' with '7731'
c Var 'aux1751' order represents '1' with '7732'
-7731 7732 0
c Var 'aux1751' direct represents '1' with '7733'
7731 -7732 7733 0
-7733 7732 0
-7733 -7731 0
c Var 'aux1751' order represents '2' with '7734'
-7732 7734 0
c Var 'aux1751' direct represents '2' with '7735'
7732 -7734 7735 0
-7735 7734 0
-7735 -7732 0
c Var 'aux1751' order represents '3' with '7736'
-7734 7736 0
c Var 'aux1751' direct represents '3' with '7737'
7734 -7736 7737 0
-7737 7736 0
-7737 -7734 0
c Var 'aux1751' direct represents '4' with '-7736'
7731 7733 7735 7737 -7736 0
c Encoding variable: aux1752 with domain: int(0..2) (representing constraint ((x_00008_00001=9) + (x_00007_00003=9)))
c Both direct and order encoding.
c Var 'aux1752' order represents '0' with '7738'
c Var 'aux1752' direct represents '0' with '7738'
c Var 'aux1752' order represents '1' with '7739'
-7738 7739 0
c Var 'aux1752' direct represents '1' with '7740'
7738 -7739 7740 0
-7740 7739 0
-7740 -7738 0
c Var 'aux1752' direct represents '2' with '-7739'
7738 7740 -7739 0
c Encoding variable: aux1753 with domain: int(0..2) (representing constraint ((x_00007_00002=9) + (x_00008_00002=9)))
c Both direct and order encoding.
c Var 'aux1753' order represents '0' with '7741'
c Var 'aux1753' direct represents '0' with '7741'
c Var 'aux1753' order represents '1' with '7742'
-7741 7742 0
c Var 'aux1753' direct represents '1' with '7743'
7741 -7742 7743 0
-7743 7742 0
-7743 -7741 0
c Var 'aux1753' direct represents '2' with '-7742'
7741 7743 -7742 0
c Encoding variable: aux1754 with domain: int(0..2) (representing constraint ((x_00007_00001=9) + (x_00009_00001=9)))
c Both direct and order encoding.
c Var 'aux1754' order represents '0' with '7744'
c Var 'aux1754' direct represents '0' with '7744'
c Var 'aux1754' order represents '1' with '7745'
-7744 7745 0
c Var 'aux1754' direct represents '1' with '7746'
7744 -7745 7746 0
-7746 7745 0
-7746 -7744 0
c Var 'aux1754' direct represents '2' with '-7745'
7744 7746 -7745 0
c Encoding variable: aux1755 with domain: int(0..2) (representing constraint ((x_00009_00003=9) + (x_00009_00002=9)))
c Both direct and order encoding.
c Var 'aux1755' order represents '0' with '7747'
c Var 'aux1755' direct represents '0' with '7747'
c Var 'aux1755' order represents '1' with '7748'
-7747 7748 0
c Var 'aux1755' direct represents '1' with '7749'
7747 -7748 7749 0
-7749 7748 0
-7749 -7747 0
c Var 'aux1755' direct represents '2' with '-7748'
7747 7749 -7748 0
c Encoding variable: aux1756 with domain: int(0..3) (representing constraint ((x_00008_00003=9) + aux1755))
c Both direct and order encoding.
c Var 'aux1756' order represents '0' with '7750'
c Var 'aux1756' direct represents '0' with '7750'
c Var 'aux1756' order represents '1' with '7751'
-7750 7751 0
c Var 'aux1756' direct represents '1' with '7752'
7750 -7751 7752 0
-7752 7751 0
-7752 -7750 0
c Var 'aux1756' order represents '2' with '7753'
-7751 7753 0
c Var 'aux1756' direct represents '2' with '7754'
7751 -7753 7754 0
-7754 7753 0
-7754 -7751 0
c Var 'aux1756' direct represents '3' with '-7753'
7750 7752 7754 -7753 0
c Encoding variable: aux1757 with domain: int(0..4) (representing constraint (aux1752 + aux1754))
c Both direct and order encoding.
c Var 'aux1757' order represents '0' with '7755'
c Var 'aux1757' direct represents '0' with '7755'
c Var 'aux1757' order represents '1' with '7756'
-7755 7756 0
c Var 'aux1757' direct represents '1' with '7757'
7755 -7756 7757 0
-7757 7756 0
-7757 -7755 0
c Var 'aux1757' order represents '2' with '7758'
-7756 7758 0
c Var 'aux1757' direct represents '2' with '7759'
7756 -7758 7759 0
-7759 7758 0
-7759 -7756 0
c Var 'aux1757' order represents '3' with '7760'
-7758 7760 0
c Var 'aux1757' direct represents '3' with '7761'
7758 -7760 7761 0
-7761 7760 0
-7761 -7758 0
c Var 'aux1757' direct represents '4' with '-7760'
7755 7757 7759 7761 -7760 0
c Encoding variable: aux1758 with domain: int(0..2) (representing constraint ((x_00008_00004=1) + (x_00007_00006=1)))
c Both direct and order encoding.
c Var 'aux1758' order represents '0' with '7762'
c Var 'aux1758' direct represents '0' with '7762'
c Var 'aux1758' order represents '1' with '7763'
-7762 7763 0
c Var 'aux1758' direct represents '1' with '7764'
7762 -7763 7764 0
-7764 7763 0
-7764 -7762 0
c Var 'aux1758' direct represents '2' with '-7763'
7762 7764 -7763 0
c Encoding variable: aux1759 with domain: int(0..2) (representing constraint ((x_00007_00005=1) + (x_00008_00005=1)))
c Both direct and order encoding.
c Var 'aux1759' order represents '0' with '7765'
c Var 'aux1759' direct represents '0' with '7765'
c Var 'aux1759' order represents '1' with '7766'
-7765 7766 0
c Var 'aux1759' direct represents '1' with '7767'
7765 -7766 7767 0
-7767 7766 0
-7767 -7765 0
c Var 'aux1759' direct represents '2' with '-7766'
7765 7767 -7766 0
c Encoding variable: aux1760 with domain: int(0..2) (representing constraint ((x_00007_00004=1) + (x_00009_00004=1)))
c Both direct and order encoding.
c Var 'aux1760' order represents '0' with '7768'
c Var 'aux1760' direct represents '0' with '7768'
c Var 'aux1760' order represents '1' with '7769'
-7768 7769 0
c Var 'aux1760' direct represents '1' with '7770'
7768 -7769 7770 0
-7770 7769 0
-7770 -7768 0
c Var 'aux1760' direct represents '2' with '-7769'
7768 7770 -7769 0
c Encoding variable: aux1761 with domain: int(0..2) (representing constraint ((x_00009_00006=1) + (x_00009_00005=1)))
c Both direct and order encoding.
c Var 'aux1761' order represents '0' with '7771'
c Var 'aux1761' direct represents '0' with '7771'
c Var 'aux1761' order represents '1' with '7772'
-7771 7772 0
c Var 'aux1761' direct represents '1' with '7773'
7771 -7772 7773 0
-7773 7772 0
-7773 -7771 0
c Var 'aux1761' direct represents '2' with '-7772'
7771 7773 -7772 0
c Encoding variable: aux1762 with domain: int(0..3) (representing constraint ((x_00008_00006=1) + aux1761))
c Both direct and order encoding.
c Var 'aux1762' order represents '0' with '7774'
c Var 'aux1762' direct represents '0' with '7774'
c Var 'aux1762' order represents '1' with '7775'
-7774 7775 0
c Var 'aux1762' direct represents '1' with '7776'
7774 -7775 7776 0
-7776 7775 0
-7776 -7774 0
c Var 'aux1762' order represents '2' with '7777'
-7775 7777 0
c Var 'aux1762' direct represents '2' with '7778'
7775 -7777 7778 0
-7778 7777 0
-7778 -7775 0
c Var 'aux1762' direct represents '3' with '-7777'
7774 7776 7778 -7777 0
c Encoding variable: aux1763 with domain: int(0..4) (representing constraint (aux1758 + aux1760))
c Both direct and order encoding.
c Var 'aux1763' order represents '0' with '7779'
c Var 'aux1763' direct represents '0' with '7779'
c Var 'aux1763' order represents '1' with '7780'
-7779 7780 0
c Var 'aux1763' direct represents '1' with '7781'
7779 -7780 7781 0
-7781 7780 0
-7781 -7779 0
c Var 'aux1763' order represents '2' with '7782'
-7780 7782 0
c Var 'aux1763' direct represents '2' with '7783'
7780 -7782 7783 0
-7783 7782 0
-7783 -7780 0
c Var 'aux1763' order represents '3' with '7784'
-7782 7784 0
c Var 'aux1763' direct represents '3' with '7785'
7782 -7784 7785 0
-7785 7784 0
-7785 -7782 0
c Var 'aux1763' direct represents '4' with '-7784'
7779 7781 7783 7785 -7784 0
c Encoding variable: aux1764 with domain: int(0..2) (representing constraint ((x_00008_00004=2) + (x_00007_00006=2)))
c Both direct and order encoding.
c Var 'aux1764' order represents '0' with '7786'
c Var 'aux1764' direct represents '0' with '7786'
c Var 'aux1764' order represents '1' with '7787'
-7786 7787 0
c Var 'aux1764' direct represents '1' with '7788'
7786 -7787 7788 0
-7788 7787 0
-7788 -7786 0
c Var 'aux1764' direct represents '2' with '-7787'
7786 7788 -7787 0
c Encoding variable: aux1765 with domain: int(0..2) (representing constraint ((x_00007_00005=2) + (x_00008_00005=2)))
c Both direct and order encoding.
c Var 'aux1765' order represents '0' with '7789'
c Var 'aux1765' direct represents '0' with '7789'
c Var 'aux1765' order represents '1' with '7790'
-7789 7790 0
c Var 'aux1765' direct represents '1' with '7791'
7789 -7790 7791 0
-7791 7790 0
-7791 -7789 0
c Var 'aux1765' direct represents '2' with '-7790'
7789 7791 -7790 0
c Encoding variable: aux1766 with domain: int(0..2) (representing constraint ((x_00007_00004=2) + (x_00009_00004=2)))
c Both direct and order encoding.
c Var 'aux1766' order represents '0' with '7792'
c Var 'aux1766' direct represents '0' with '7792'
c Var 'aux1766' order represents '1' with '7793'
-7792 7793 0
c Var 'aux1766' direct represents '1' with '7794'
7792 -7793 7794 0
-7794 7793 0
-7794 -7792 0
c Var 'aux1766' direct represents '2' with '-7793'
7792 7794 -7793 0
c Encoding variable: aux1767 with domain: int(0..2) (representing constraint ((x_00009_00006=2) + (x_00009_00005=2)))
c Both direct and order encoding.
c Var 'aux1767' order represents '0' with '7795'
c Var 'aux1767' direct represents '0' with '7795'
c Var 'aux1767' order represents '1' with '7796'
-7795 7796 0
c Var 'aux1767' direct represents '1' with '7797'
7795 -7796 7797 0
-7797 7796 0
-7797 -7795 0
c Var 'aux1767' direct represents '2' with '-7796'
7795 7797 -7796 0
c Encoding variable: aux1768 with domain: int(0..3) (representing constraint ((x_00008_00006=2) + aux1767))
c Both direct and order encoding.
c Var 'aux1768' order represents '0' with '7798'
c Var 'aux1768' direct represents '0' with '7798'
c Var 'aux1768' order represents '1' with '7799'
-7798 7799 0
c Var 'aux1768' direct represents '1' with '7800'
7798 -7799 7800 0
-7800 7799 0
-7800 -7798 0
c Var 'aux1768' order represents '2' with '7801'
-7799 7801 0
c Var 'aux1768' direct represents '2' with '7802'
7799 -7801 7802 0
-7802 7801 0
-7802 -7799 0
c Var 'aux1768' direct represents '3' with '-7801'
7798 7800 7802 -7801 0
c Encoding variable: aux1769 with domain: int(0..4) (representing constraint (aux1764 + aux1766))
c Both direct and order encoding.
c Var 'aux1769' order represents '0' with '7803'
c Var 'aux1769' direct represents '0' with '7803'
c Var 'aux1769' order represents '1' with '7804'
-7803 7804 0
c Var 'aux1769' direct represents '1' with '7805'
7803 -7804 7805 0
-7805 7804 0
-7805 -7803 0
c Var 'aux1769' order represents '2' with '7806'
-7804 7806 0
c Var 'aux1769' direct represents '2' with '7807'
7804 -7806 7807 0
-7807 7806 0
-7807 -7804 0
c Var 'aux1769' order represents '3' with '7808'
-7806 7808 0
c Var 'aux1769' direct represents '3' with '7809'
7806 -7808 7809 0
-7809 7808 0
-7809 -7806 0
c Var 'aux1769' direct represents '4' with '-7808'
7803 7805 7807 7809 -7808 0
c Encoding variable: aux1770 with domain: int(0..2) (representing constraint ((x_00008_00004=3) + (x_00007_00006=3)))
c Both direct and order encoding.
c Var 'aux1770' order represents '0' with '7810'
c Var 'aux1770' direct represents '0' with '7810'
c Var 'aux1770' order represents '1' with '7811'
-7810 7811 0
c Var 'aux1770' direct represents '1' with '7812'
7810 -7811 7812 0
-7812 7811 0
-7812 -7810 0
c Var 'aux1770' direct represents '2' with '-7811'
7810 7812 -7811 0
c Encoding variable: aux1771 with domain: int(0..2) (representing constraint ((x_00007_00005=3) + (x_00008_00005=3)))
c Both direct and order encoding.
c Var 'aux1771' order represents '0' with '7813'
c Var 'aux1771' direct represents '0' with '7813'
c Var 'aux1771' order represents '1' with '7814'
-7813 7814 0
c Var 'aux1771' direct represents '1' with '7815'
7813 -7814 7815 0
-7815 7814 0
-7815 -7813 0
c Var 'aux1771' direct represents '2' with '-7814'
7813 7815 -7814 0
c Encoding variable: aux1772 with domain: int(0..2) (representing constraint ((x_00007_00004=3) + (x_00009_00004=3)))
c Both direct and order encoding.
c Var 'aux1772' order represents '0' with '7816'
c Var 'aux1772' direct represents '0' with '7816'
c Var 'aux1772' order represents '1' with '7817'
-7816 7817 0
c Var 'aux1772' direct represents '1' with '7818'
7816 -7817 7818 0
-7818 7817 0
-7818 -7816 0
c Var 'aux1772' direct represents '2' with '-7817'
7816 7818 -7817 0
c Encoding variable: aux1773 with domain: int(0..2) (representing constraint ((x_00009_00006=3) + (x_00009_00005=3)))
c Both direct and order encoding.
c Var 'aux1773' order represents '0' with '7819'
c Var 'aux1773' direct represents '0' with '7819'
c Var 'aux1773' order represents '1' with '7820'
-7819 7820 0
c Var 'aux1773' direct represents '1' with '7821'
7819 -7820 7821 0
-7821 7820 0
-7821 -7819 0
c Var 'aux1773' direct represents '2' with '-7820'
7819 7821 -7820 0
c Encoding variable: aux1774 with domain: int(0..3) (representing constraint ((x_00008_00006=3) + aux1773))
c Both direct and order encoding.
c Var 'aux1774' order represents '0' with '7822'
c Var 'aux1774' direct represents '0' with '7822'
c Var 'aux1774' order represents '1' with '7823'
-7822 7823 0
c Var 'aux1774' direct represents '1' with '7824'
7822 -7823 7824 0
-7824 7823 0
-7824 -7822 0
c Var 'aux1774' order represents '2' with '7825'
-7823 7825 0
c Var 'aux1774' direct represents '2' with '7826'
7823 -7825 7826 0
-7826 7825 0
-7826 -7823 0
c Var 'aux1774' direct represents '3' with '-7825'
7822 7824 7826 -7825 0
c Encoding variable: aux1775 with domain: int(0..4) (representing constraint (aux1770 + aux1772))
c Both direct and order encoding.
c Var 'aux1775' order represents '0' with '7827'
c Var 'aux1775' direct represents '0' with '7827'
c Var 'aux1775' order represents '1' with '7828'
-7827 7828 0
c Var 'aux1775' direct represents '1' with '7829'
7827 -7828 7829 0
-7829 7828 0
-7829 -7827 0
c Var 'aux1775' order represents '2' with '7830'
-7828 7830 0
c Var 'aux1775' direct represents '2' with '7831'
7828 -7830 7831 0
-7831 7830 0
-7831 -7828 0
c Var 'aux1775' order represents '3' with '7832'
-7830 7832 0
c Var 'aux1775' direct represents '3' with '7833'
7830 -7832 7833 0
-7833 7832 0
-7833 -7830 0
c Var 'aux1775' direct represents '4' with '-7832'
7827 7829 7831 7833 -7832 0
c Encoding variable: aux1776 with domain: int(0..2) (representing constraint ((x_00008_00004=4) + (x_00007_00006=4)))
c Both direct and order encoding.
c Var 'aux1776' order represents '0' with '7834'
c Var 'aux1776' direct represents '0' with '7834'
c Var 'aux1776' order represents '1' with '7835'
-7834 7835 0
c Var 'aux1776' direct represents '1' with '7836'
7834 -7835 7836 0
-7836 7835 0
-7836 -7834 0
c Var 'aux1776' direct represents '2' with '-7835'
7834 7836 -7835 0
c Encoding variable: aux1777 with domain: int(0..2) (representing constraint ((x_00007_00005=4) + (x_00008_00005=4)))
c Both direct and order encoding.
c Var 'aux1777' order represents '0' with '7837'
c Var 'aux1777' direct represents '0' with '7837'
c Var 'aux1777' order represents '1' with '7838'
-7837 7838 0
c Var 'aux1777' direct represents '1' with '7839'
7837 -7838 7839 0
-7839 7838 0
-7839 -7837 0
c Var 'aux1777' direct represents '2' with '-7838'
7837 7839 -7838 0
c Encoding variable: aux1778 with domain: int(0..2) (representing constraint ((x_00007_00004=4) + (x_00009_00004=4)))
c Both direct and order encoding.
c Var 'aux1778' order represents '0' with '7840'
c Var 'aux1778' direct represents '0' with '7840'
c Var 'aux1778' order represents '1' with '7841'
-7840 7841 0
c Var 'aux1778' direct represents '1' with '7842'
7840 -7841 7842 0
-7842 7841 0
-7842 -7840 0
c Var 'aux1778' direct represents '2' with '-7841'
7840 7842 -7841 0
c Encoding variable: aux1779 with domain: int(0..2) (representing constraint ((x_00009_00006=4) + (x_00009_00005=4)))
c Both direct and order encoding.
c Var 'aux1779' order represents '0' with '7843'
c Var 'aux1779' direct represents '0' with '7843'
c Var 'aux1779' order represents '1' with '7844'
-7843 7844 0
c Var 'aux1779' direct represents '1' with '7845'
7843 -7844 7845 0
-7845 7844 0
-7845 -7843 0
c Var 'aux1779' direct represents '2' with '-7844'
7843 7845 -7844 0
c Encoding variable: aux1780 with domain: int(0..3) (representing constraint ((x_00008_00006=4) + aux1779))
c Both direct and order encoding.
c Var 'aux1780' order represents '0' with '7846'
c Var 'aux1780' direct represents '0' with '7846'
c Var 'aux1780' order represents '1' with '7847'
-7846 7847 0
c Var 'aux1780' direct represents '1' with '7848'
7846 -7847 7848 0
-7848 7847 0
-7848 -7846 0
c Var 'aux1780' order represents '2' with '7849'
-7847 7849 0
c Var 'aux1780' direct represents '2' with '7850'
7847 -7849 7850 0
-7850 7849 0
-7850 -7847 0
c Var 'aux1780' direct represents '3' with '-7849'
7846 7848 7850 -7849 0
c Encoding variable: aux1781 with domain: int(0..4) (representing constraint (aux1776 + aux1778))
c Both direct and order encoding.
c Var 'aux1781' order represents '0' with '7851'
c Var 'aux1781' direct represents '0' with '7851'
c Var 'aux1781' order represents '1' with '7852'
-7851 7852 0
c Var 'aux1781' direct represents '1' with '7853'
7851 -7852 7853 0
-7853 7852 0
-7853 -7851 0
c Var 'aux1781' order represents '2' with '7854'
-7852 7854 0
c Var 'aux1781' direct represents '2' with '7855'
7852 -7854 7855 0
-7855 7854 0
-7855 -7852 0
c Var 'aux1781' order represents '3' with '7856'
-7854 7856 0
c Var 'aux1781' direct represents '3' with '7857'
7854 -7856 7857 0
-7857 7856 0
-7857 -7854 0
c Var 'aux1781' direct represents '4' with '-7856'
7851 7853 7855 7857 -7856 0
c Encoding variable: aux1782 with domain: int(0..2) (representing constraint ((x_00008_00004=5) + (x_00007_00006=5)))
c Both direct and order encoding.
c Var 'aux1782' order represents '0' with '7858'
c Var 'aux1782' direct represents '0' with '7858'
c Var 'aux1782' order represents '1' with '7859'
-7858 7859 0
c Var 'aux1782' direct represents '1' with '7860'
7858 -7859 7860 0
-7860 7859 0
-7860 -7858 0
c Var 'aux1782' direct represents '2' with '-7859'
7858 7860 -7859 0
c Encoding variable: aux1783 with domain: int(0..2) (representing constraint ((x_00007_00005=5) + (x_00008_00005=5)))
c Both direct and order encoding.
c Var 'aux1783' order represents '0' with '7861'
c Var 'aux1783' direct represents '0' with '7861'
c Var 'aux1783' order represents '1' with '7862'
-7861 7862 0
c Var 'aux1783' direct represents '1' with '7863'
7861 -7862 7863 0
-7863 7862 0
-7863 -7861 0
c Var 'aux1783' direct represents '2' with '-7862'
7861 7863 -7862 0
c Encoding variable: aux1784 with domain: int(0..2) (representing constraint ((x_00007_00004=5) + (x_00009_00004=5)))
c Both direct and order encoding.
c Var 'aux1784' order represents '0' with '7864'
c Var 'aux1784' direct represents '0' with '7864'
c Var 'aux1784' order represents '1' with '7865'
-7864 7865 0
c Var 'aux1784' direct represents '1' with '7866'
7864 -7865 7866 0
-7866 7865 0
-7866 -7864 0
c Var 'aux1784' direct represents '2' with '-7865'
7864 7866 -7865 0
c Encoding variable: aux1785 with domain: int(0..2) (representing constraint ((x_00009_00006=5) + (x_00009_00005=5)))
c Both direct and order encoding.
c Var 'aux1785' order represents '0' with '7867'
c Var 'aux1785' direct represents '0' with '7867'
c Var 'aux1785' order represents '1' with '7868'
-7867 7868 0
c Var 'aux1785' direct represents '1' with '7869'
7867 -7868 7869 0
-7869 7868 0
-7869 -7867 0
c Var 'aux1785' direct represents '2' with '-7868'
7867 7869 -7868 0
c Encoding variable: aux1786 with domain: int(0..3) (representing constraint ((x_00008_00006=5) + aux1785))
c Both direct and order encoding.
c Var 'aux1786' order represents '0' with '7870'
c Var 'aux1786' direct represents '0' with '7870'
c Var 'aux1786' order represents '1' with '7871'
-7870 7871 0
c Var 'aux1786' direct represents '1' with '7872'
7870 -7871 7872 0
-7872 7871 0
-7872 -7870 0
c Var 'aux1786' order represents '2' with '7873'
-7871 7873 0
c Var 'aux1786' direct represents '2' with '7874'
7871 -7873 7874 0
-7874 7873 0
-7874 -7871 0
c Var 'aux1786' direct represents '3' with '-7873'
7870 7872 7874 -7873 0
c Encoding variable: aux1787 with domain: int(0..4) (representing constraint (aux1782 + aux1784))
c Both direct and order encoding.
c Var 'aux1787' order represents '0' with '7875'
c Var 'aux1787' direct represents '0' with '7875'
c Var 'aux1787' order represents '1' with '7876'
-7875 7876 0
c Var 'aux1787' direct represents '1' with '7877'
7875 -7876 7877 0
-7877 7876 0
-7877 -7875 0
c Var 'aux1787' order represents '2' with '7878'
-7876 7878 0
c Var 'aux1787' direct represents '2' with '7879'
7876 -7878 7879 0
-7879 7878 0
-7879 -7876 0
c Var 'aux1787' order represents '3' with '7880'
-7878 7880 0
c Var 'aux1787' direct represents '3' with '7881'
7878 -7880 7881 0
-7881 7880 0
-7881 -7878 0
c Var 'aux1787' direct represents '4' with '-7880'
7875 7877 7879 7881 -7880 0
c Encoding variable: aux1788 with domain: int(0..2) (representing constraint ((x_00008_00004=6) + (x_00007_00006=6)))
c Both direct and order encoding.
c Var 'aux1788' order represents '0' with '7882'
c Var 'aux1788' direct represents '0' with '7882'
c Var 'aux1788' order represents '1' with '7883'
-7882 7883 0
c Var 'aux1788' direct represents '1' with '7884'
7882 -7883 7884 0
-7884 7883 0
-7884 -7882 0
c Var 'aux1788' direct represents '2' with '-7883'
7882 7884 -7883 0
c Encoding variable: aux1789 with domain: int(0..2) (representing constraint ((x_00007_00005=6) + (x_00008_00005=6)))
c Both direct and order encoding.
c Var 'aux1789' order represents '0' with '7885'
c Var 'aux1789' direct represents '0' with '7885'
c Var 'aux1789' order represents '1' with '7886'
-7885 7886 0
c Var 'aux1789' direct represents '1' with '7887'
7885 -7886 7887 0
-7887 7886 0
-7887 -7885 0
c Var 'aux1789' direct represents '2' with '-7886'
7885 7887 -7886 0
c Encoding variable: aux1790 with domain: int(0..2) (representing constraint ((x_00007_00004=6) + (x_00009_00004=6)))
c Both direct and order encoding.
c Var 'aux1790' order represents '0' with '7888'
c Var 'aux1790' direct represents '0' with '7888'
c Var 'aux1790' order represents '1' with '7889'
-7888 7889 0
c Var 'aux1790' direct represents '1' with '7890'
7888 -7889 7890 0
-7890 7889 0
-7890 -7888 0
c Var 'aux1790' direct represents '2' with '-7889'
7888 7890 -7889 0
c Encoding variable: aux1791 with domain: int(0..2) (representing constraint ((x_00009_00006=6) + (x_00009_00005=6)))
c Both direct and order encoding.
c Var 'aux1791' order represents '0' with '7891'
c Var 'aux1791' direct represents '0' with '7891'
c Var 'aux1791' order represents '1' with '7892'
-7891 7892 0
c Var 'aux1791' direct represents '1' with '7893'
7891 -7892 7893 0
-7893 7892 0
-7893 -7891 0
c Var 'aux1791' direct represents '2' with '-7892'
7891 7893 -7892 0
c Encoding variable: aux1792 with domain: int(0..3) (representing constraint ((x_00008_00006=6) + aux1791))
c Both direct and order encoding.
c Var 'aux1792' order represents '0' with '7894'
c Var 'aux1792' direct represents '0' with '7894'
c Var 'aux1792' order represents '1' with '7895'
-7894 7895 0
c Var 'aux1792' direct represents '1' with '7896'
7894 -7895 7896 0
-7896 7895 0
-7896 -7894 0
c Var 'aux1792' order represents '2' with '7897'
-7895 7897 0
c Var 'aux1792' direct represents '2' with '7898'
7895 -7897 7898 0
-7898 7897 0
-7898 -7895 0
c Var 'aux1792' direct represents '3' with '-7897'
7894 7896 7898 -7897 0
c Encoding variable: aux1793 with domain: int(0..4) (representing constraint (aux1788 + aux1790))
c Both direct and order encoding.
c Var 'aux1793' order represents '0' with '7899'
c Var 'aux1793' direct represents '0' with '7899'
c Var 'aux1793' order represents '1' with '7900'
-7899 7900 0
c Var 'aux1793' direct represents '1' with '7901'
7899 -7900 7901 0
-7901 7900 0
-7901 -7899 0
c Var 'aux1793' order represents '2' with '7902'
-7900 7902 0
c Var 'aux1793' direct represents '2' with '7903'
7900 -7902 7903 0
-7903 7902 0
-7903 -7900 0
c Var 'aux1793' order represents '3' with '7904'
-7902 7904 0
c Var 'aux1793' direct represents '3' with '7905'
7902 -7904 7905 0
-7905 7904 0
-7905 -7902 0
c Var 'aux1793' direct represents '4' with '-7904'
7899 7901 7903 7905 -7904 0
c Encoding variable: aux1794 with domain: int(0..2) (representing constraint ((x_00008_00004=7) + (x_00007_00006=7)))
c Both direct and order encoding.
c Var 'aux1794' order represents '0' with '7906'
c Var 'aux1794' direct represents '0' with '7906'
c Var 'aux1794' order represents '1' with '7907'
-7906 7907 0
c Var 'aux1794' direct represents '1' with '7908'
7906 -7907 7908 0
-7908 7907 0
-7908 -7906 0
c Var 'aux1794' direct represents '2' with '-7907'
7906 7908 -7907 0
c Encoding variable: aux1795 with domain: int(0..2) (representing constraint ((x_00007_00005=7) + (x_00008_00005=7)))
c Both direct and order encoding.
c Var 'aux1795' order represents '0' with '7909'
c Var 'aux1795' direct represents '0' with '7909'
c Var 'aux1795' order represents '1' with '7910'
-7909 7910 0
c Var 'aux1795' direct represents '1' with '7911'
7909 -7910 7911 0
-7911 7910 0
-7911 -7909 0
c Var 'aux1795' direct represents '2' with '-7910'
7909 7911 -7910 0
c Encoding variable: aux1796 with domain: int(0..2) (representing constraint ((x_00007_00004=7) + (x_00009_00004=7)))
c Both direct and order encoding.
c Var 'aux1796' order represents '0' with '7912'
c Var 'aux1796' direct represents '0' with '7912'
c Var 'aux1796' order represents '1' with '7913'
-7912 7913 0
c Var 'aux1796' direct represents '1' with '7914'
7912 -7913 7914 0
-7914 7913 0
-7914 -7912 0
c Var 'aux1796' direct represents '2' with '-7913'
7912 7914 -7913 0
c Encoding variable: aux1797 with domain: int(0..2) (representing constraint ((x_00009_00006=7) + (x_00009_00005=7)))
c Both direct and order encoding.
c Var 'aux1797' order represents '0' with '7915'
c Var 'aux1797' direct represents '0' with '7915'
c Var 'aux1797' order represents '1' with '7916'
-7915 7916 0
c Var 'aux1797' direct represents '1' with '7917'
7915 -7916 7917 0
-7917 7916 0
-7917 -7915 0
c Var 'aux1797' direct represents '2' with '-7916'
7915 7917 -7916 0
c Encoding variable: aux1798 with domain: int(0..3) (representing constraint ((x_00008_00006=7) + aux1797))
c Both direct and order encoding.
c Var 'aux1798' order represents '0' with '7918'
c Var 'aux1798' direct represents '0' with '7918'
c Var 'aux1798' order represents '1' with '7919'
-7918 7919 0
c Var 'aux1798' direct represents '1' with '7920'
7918 -7919 7920 0
-7920 7919 0
-7920 -7918 0
c Var 'aux1798' order represents '2' with '7921'
-7919 7921 0
c Var 'aux1798' direct represents '2' with '7922'
7919 -7921 7922 0
-7922 7921 0
-7922 -7919 0
c Var 'aux1798' direct represents '3' with '-7921'
7918 7920 7922 -7921 0
c Encoding variable: aux1799 with domain: int(0..4) (representing constraint (aux1794 + aux1796))
c Both direct and order encoding.
c Var 'aux1799' order represents '0' with '7923'
c Var 'aux1799' direct represents '0' with '7923'
c Var 'aux1799' order represents '1' with '7924'
-7923 7924 0
c Var 'aux1799' direct represents '1' with '7925'
7923 -7924 7925 0
-7925 7924 0
-7925 -7923 0
c Var 'aux1799' order represents '2' with '7926'
-7924 7926 0
c Var 'aux1799' direct represents '2' with '7927'
7924 -7926 7927 0
-7927 7926 0
-7927 -7924 0
c Var 'aux1799' order represents '3' with '7928'
-7926 7928 0
c Var 'aux1799' direct represents '3' with '7929'
7926 -7928 7929 0
-7929 7928 0
-7929 -7926 0
c Var 'aux1799' direct represents '4' with '-7928'
7923 7925 7927 7929 -7928 0
c Encoding variable: aux1800 with domain: int(0..2) (representing constraint ((x_00008_00004=8) + (x_00007_00006=8)))
c Both direct and order encoding.
c Var 'aux1800' order represents '0' with '7930'
c Var 'aux1800' direct represents '0' with '7930'
c Var 'aux1800' order represents '1' with '7931'
-7930 7931 0
c Var 'aux1800' direct represents '1' with '7932'
7930 -7931 7932 0
-7932 7931 0
-7932 -7930 0
c Var 'aux1800' direct represents '2' with '-7931'
7930 7932 -7931 0
c Encoding variable: aux1801 with domain: int(0..2) (representing constraint ((x_00007_00005=8) + (x_00008_00005=8)))
c Both direct and order encoding.
c Var 'aux1801' order represents '0' with '7933'
c Var 'aux1801' direct represents '0' with '7933'
c Var 'aux1801' order represents '1' with '7934'
-7933 7934 0
c Var 'aux1801' direct represents '1' with '7935'
7933 -7934 7935 0
-7935 7934 0
-7935 -7933 0
c Var 'aux1801' direct represents '2' with '-7934'
7933 7935 -7934 0
c Encoding variable: aux1802 with domain: int(0..2) (representing constraint ((x_00007_00004=8) + (x_00009_00004=8)))
c Both direct and order encoding.
c Var 'aux1802' order represents '0' with '7936'
c Var 'aux1802' direct represents '0' with '7936'
c Var 'aux1802' order represents '1' with '7937'
-7936 7937 0
c Var 'aux1802' direct represents '1' with '7938'
7936 -7937 7938 0
-7938 7937 0
-7938 -7936 0
c Var 'aux1802' direct represents '2' with '-7937'
7936 7938 -7937 0
c Encoding variable: aux1803 with domain: int(0..2) (representing constraint ((x_00009_00006=8) + (x_00009_00005=8)))
c Both direct and order encoding.
c Var 'aux1803' order represents '0' with '7939'
c Var 'aux1803' direct represents '0' with '7939'
c Var 'aux1803' order represents '1' with '7940'
-7939 7940 0
c Var 'aux1803' direct represents '1' with '7941'
7939 -7940 7941 0
-7941 7940 0
-7941 -7939 0
c Var 'aux1803' direct represents '2' with '-7940'
7939 7941 -7940 0
c Encoding variable: aux1804 with domain: int(0..3) (representing constraint ((x_00008_00006=8) + aux1803))
c Both direct and order encoding.
c Var 'aux1804' order represents '0' with '7942'
c Var 'aux1804' direct represents '0' with '7942'
c Var 'aux1804' order represents '1' with '7943'
-7942 7943 0
c Var 'aux1804' direct represents '1' with '7944'
7942 -7943 7944 0
-7944 7943 0
-7944 -7942 0
c Var 'aux1804' order represents '2' with '7945'
-7943 7945 0
c Var 'aux1804' direct represents '2' with '7946'
7943 -7945 7946 0
-7946 7945 0
-7946 -7943 0
c Var 'aux1804' direct represents '3' with '-7945'
7942 7944 7946 -7945 0
c Encoding variable: aux1805 with domain: int(0..4) (representing constraint (aux1800 + aux1802))
c Both direct and order encoding.
c Var 'aux1805' order represents '0' with '7947'
c Var 'aux1805' direct represents '0' with '7947'
c Var 'aux1805' order represents '1' with '7948'
-7947 7948 0
c Var 'aux1805' direct represents '1' with '7949'
7947 -7948 7949 0
-7949 7948 0
-7949 -7947 0
c Var 'aux1805' order represents '2' with '7950'
-7948 7950 0
c Var 'aux1805' direct represents '2' with '7951'
7948 -7950 7951 0
-7951 7950 0
-7951 -7948 0
c Var 'aux1805' order represents '3' with '7952'
-7950 7952 0
c Var 'aux1805' direct represents '3' with '7953'
7950 -7952 7953 0
-7953 7952 0
-7953 -7950 0
c Var 'aux1805' direct represents '4' with '-7952'
7947 7949 7951 7953 -7952 0
c Encoding variable: aux1806 with domain: int(0..2) (representing constraint ((x_00008_00004=9) + (x_00007_00006=9)))
c Both direct and order encoding.
c Var 'aux1806' order represents '0' with '7954'
c Var 'aux1806' direct represents '0' with '7954'
c Var 'aux1806' order represents '1' with '7955'
-7954 7955 0
c Var 'aux1806' direct represents '1' with '7956'
7954 -7955 7956 0
-7956 7955 0
-7956 -7954 0
c Var 'aux1806' direct represents '2' with '-7955'
7954 7956 -7955 0
c Encoding variable: aux1807 with domain: int(0..2) (representing constraint ((x_00007_00005=9) + (x_00008_00005=9)))
c Both direct and order encoding.
c Var 'aux1807' order represents '0' with '7957'
c Var 'aux1807' direct represents '0' with '7957'
c Var 'aux1807' order represents '1' with '7958'
-7957 7958 0
c Var 'aux1807' direct represents '1' with '7959'
7957 -7958 7959 0
-7959 7958 0
-7959 -7957 0
c Var 'aux1807' direct represents '2' with '-7958'
7957 7959 -7958 0
c Encoding variable: aux1808 with domain: int(0..2) (representing constraint ((x_00007_00004=9) + (x_00009_00004=9)))
c Both direct and order encoding.
c Var 'aux1808' order represents '0' with '7960'
c Var 'aux1808' direct represents '0' with '7960'
c Var 'aux1808' order represents '1' with '7961'
-7960 7961 0
c Var 'aux1808' direct represents '1' with '7962'
7960 -7961 7962 0
-7962 7961 0
-7962 -7960 0
c Var 'aux1808' direct represents '2' with '-7961'
7960 7962 -7961 0
c Encoding variable: aux1809 with domain: int(0..2) (representing constraint ((x_00009_00006=9) + (x_00009_00005=9)))
c Both direct and order encoding.
c Var 'aux1809' order represents '0' with '7963'
c Var 'aux1809' direct represents '0' with '7963'
c Var 'aux1809' order represents '1' with '7964'
-7963 7964 0
c Var 'aux1809' direct represents '1' with '7965'
7963 -7964 7965 0
-7965 7964 0
-7965 -7963 0
c Var 'aux1809' direct represents '2' with '-7964'
7963 7965 -7964 0
c Encoding variable: aux1810 with domain: int(0..3) (representing constraint ((x_00008_00006=9) + aux1809))
c Both direct and order encoding.
c Var 'aux1810' order represents '0' with '7966'
c Var 'aux1810' direct represents '0' with '7966'
c Var 'aux1810' order represents '1' with '7967'
-7966 7967 0
c Var 'aux1810' direct represents '1' with '7968'
7966 -7967 7968 0
-7968 7967 0
-7968 -7966 0
c Var 'aux1810' order represents '2' with '7969'
-7967 7969 0
c Var 'aux1810' direct represents '2' with '7970'
7967 -7969 7970 0
-7970 7969 0
-7970 -7967 0
c Var 'aux1810' direct represents '3' with '-7969'
7966 7968 7970 -7969 0
c Encoding variable: aux1811 with domain: int(0..4) (representing constraint (aux1806 + aux1808))
c Both direct and order encoding.
c Var 'aux1811' order represents '0' with '7971'
c Var 'aux1811' direct represents '0' with '7971'
c Var 'aux1811' order represents '1' with '7972'
-7971 7972 0
c Var 'aux1811' direct represents '1' with '7973'
7971 -7972 7973 0
-7973 7972 0
-7973 -7971 0
c Var 'aux1811' order represents '2' with '7974'
-7972 7974 0
c Var 'aux1811' direct represents '2' with '7975'
7972 -7974 7975 0
-7975 7974 0
-7975 -7972 0
c Var 'aux1811' order represents '3' with '7976'
-7974 7976 0
c Var 'aux1811' direct represents '3' with '7977'
7974 -7976 7977 0
-7977 7976 0
-7977 -7974 0
c Var 'aux1811' direct represents '4' with '-7976'
7971 7973 7975 7977 -7976 0
c Encoding variable: aux1812 with domain: int(0..2) (representing constraint ((x_00008_00007=1) + (x_00007_00009=1)))
c Both direct and order encoding.
c Var 'aux1812' order represents '0' with '7978'
c Var 'aux1812' direct represents '0' with '7978'
c Var 'aux1812' order represents '1' with '7979'
-7978 7979 0
c Var 'aux1812' direct represents '1' with '7980'
7978 -7979 7980 0
-7980 7979 0
-7980 -7978 0
c Var 'aux1812' direct represents '2' with '-7979'
7978 7980 -7979 0
c Encoding variable: aux1813 with domain: int(0..2) (representing constraint ((x_00007_00008=1) + (x_00008_00008=1)))
c Both direct and order encoding.
c Var 'aux1813' order represents '0' with '7981'
c Var 'aux1813' direct represents '0' with '7981'
c Var 'aux1813' order represents '1' with '7982'
-7981 7982 0
c Var 'aux1813' direct represents '1' with '7983'
7981 -7982 7983 0
-7983 7982 0
-7983 -7981 0
c Var 'aux1813' direct represents '2' with '-7982'
7981 7983 -7982 0
c Encoding variable: aux1814 with domain: int(0..2) (representing constraint ((x_00007_00007=1) + (x_00009_00007=1)))
c Both direct and order encoding.
c Var 'aux1814' order represents '0' with '7984'
c Var 'aux1814' direct represents '0' with '7984'
c Var 'aux1814' order represents '1' with '7985'
-7984 7985 0
c Var 'aux1814' direct represents '1' with '7986'
7984 -7985 7986 0
-7986 7985 0
-7986 -7984 0
c Var 'aux1814' direct represents '2' with '-7985'
7984 7986 -7985 0
c Encoding variable: aux1815 with domain: int(0..2) (representing constraint ((x_00009_00009=1) + (x_00009_00008=1)))
c Both direct and order encoding.
c Var 'aux1815' order represents '0' with '7987'
c Var 'aux1815' direct represents '0' with '7987'
c Var 'aux1815' order represents '1' with '7988'
-7987 7988 0
c Var 'aux1815' direct represents '1' with '7989'
7987 -7988 7989 0
-7989 7988 0
-7989 -7987 0
c Var 'aux1815' direct represents '2' with '-7988'
7987 7989 -7988 0
c Encoding variable: aux1816 with domain: int(0..3) (representing constraint ((x_00008_00009=1) + aux1815))
c Both direct and order encoding.
c Var 'aux1816' order represents '0' with '7990'
c Var 'aux1816' direct represents '0' with '7990'
c Var 'aux1816' order represents '1' with '7991'
-7990 7991 0
c Var 'aux1816' direct represents '1' with '7992'
7990 -7991 7992 0
-7992 7991 0
-7992 -7990 0
c Var 'aux1816' order represents '2' with '7993'
-7991 7993 0
c Var 'aux1816' direct represents '2' with '7994'
7991 -7993 7994 0
-7994 7993 0
-7994 -7991 0
c Var 'aux1816' direct represents '3' with '-7993'
7990 7992 7994 -7993 0
c Encoding variable: aux1817 with domain: int(0..4) (representing constraint (aux1812 + aux1814))
c Both direct and order encoding.
c Var 'aux1817' order represents '0' with '7995'
c Var 'aux1817' direct represents '0' with '7995'
c Var 'aux1817' order represents '1' with '7996'
-7995 7996 0
c Var 'aux1817' direct represents '1' with '7997'
7995 -7996 7997 0
-7997 7996 0
-7997 -7995 0
c Var 'aux1817' order represents '2' with '7998'
-7996 7998 0
c Var 'aux1817' direct represents '2' with '7999'
7996 -7998 7999 0
-7999 7998 0
-7999 -7996 0
c Var 'aux1817' order represents '3' with '8000'
-7998 8000 0
c Var 'aux1817' direct represents '3' with '8001'
7998 -8000 8001 0
-8001 8000 0
-8001 -7998 0
c Var 'aux1817' direct represents '4' with '-8000'
7995 7997 7999 8001 -8000 0
c Encoding variable: aux1818 with domain: int(0..2) (representing constraint ((x_00008_00007=2) + (x_00007_00009=2)))
c Both direct and order encoding.
c Var 'aux1818' order represents '0' with '8002'
c Var 'aux1818' direct represents '0' with '8002'
c Var 'aux1818' order represents '1' with '8003'
-8002 8003 0
c Var 'aux1818' direct represents '1' with '8004'
8002 -8003 8004 0
-8004 8003 0
-8004 -8002 0
c Var 'aux1818' direct represents '2' with '-8003'
8002 8004 -8003 0
c Encoding variable: aux1819 with domain: int(0..2) (representing constraint ((x_00007_00008=2) + (x_00008_00008=2)))
c Both direct and order encoding.
c Var 'aux1819' order represents '0' with '8005'
c Var 'aux1819' direct represents '0' with '8005'
c Var 'aux1819' order represents '1' with '8006'
-8005 8006 0
c Var 'aux1819' direct represents '1' with '8007'
8005 -8006 8007 0
-8007 8006 0
-8007 -8005 0
c Var 'aux1819' direct represents '2' with '-8006'
8005 8007 -8006 0
c Encoding variable: aux1820 with domain: int(0..2) (representing constraint ((x_00007_00007=2) + (x_00009_00007=2)))
c Both direct and order encoding.
c Var 'aux1820' order represents '0' with '8008'
c Var 'aux1820' direct represents '0' with '8008'
c Var 'aux1820' order represents '1' with '8009'
-8008 8009 0
c Var 'aux1820' direct represents '1' with '8010'
8008 -8009 8010 0
-8010 8009 0
-8010 -8008 0
c Var 'aux1820' direct represents '2' with '-8009'
8008 8010 -8009 0
c Encoding variable: aux1821 with domain: int(0..2) (representing constraint ((x_00009_00009=2) + (x_00009_00008=2)))
c Both direct and order encoding.
c Var 'aux1821' order represents '0' with '8011'
c Var 'aux1821' direct represents '0' with '8011'
c Var 'aux1821' order represents '1' with '8012'
-8011 8012 0
c Var 'aux1821' direct represents '1' with '8013'
8011 -8012 8013 0
-8013 8012 0
-8013 -8011 0
c Var 'aux1821' direct represents '2' with '-8012'
8011 8013 -8012 0
c Encoding variable: aux1822 with domain: int(0..3) (representing constraint ((x_00008_00009=2) + aux1821))
c Both direct and order encoding.
c Var 'aux1822' order represents '0' with '8014'
c Var 'aux1822' direct represents '0' with '8014'
c Var 'aux1822' order represents '1' with '8015'
-8014 8015 0
c Var 'aux1822' direct represents '1' with '8016'
8014 -8015 8016 0
-8016 8015 0
-8016 -8014 0
c Var 'aux1822' order represents '2' with '8017'
-8015 8017 0
c Var 'aux1822' direct represents '2' with '8018'
8015 -8017 8018 0
-8018 8017 0
-8018 -8015 0
c Var 'aux1822' direct represents '3' with '-8017'
8014 8016 8018 -8017 0
c Encoding variable: aux1823 with domain: int(0..4) (representing constraint (aux1818 + aux1820))
c Both direct and order encoding.
c Var 'aux1823' order represents '0' with '8019'
c Var 'aux1823' direct represents '0' with '8019'
c Var 'aux1823' order represents '1' with '8020'
-8019 8020 0
c Var 'aux1823' direct represents '1' with '8021'
8019 -8020 8021 0
-8021 8020 0
-8021 -8019 0
c Var 'aux1823' order represents '2' with '8022'
-8020 8022 0
c Var 'aux1823' direct represents '2' with '8023'
8020 -8022 8023 0
-8023 8022 0
-8023 -8020 0
c Var 'aux1823' order represents '3' with '8024'
-8022 8024 0
c Var 'aux1823' direct represents '3' with '8025'
8022 -8024 8025 0
-8025 8024 0
-8025 -8022 0
c Var 'aux1823' direct represents '4' with '-8024'
8019 8021 8023 8025 -8024 0
c Encoding variable: aux1824 with domain: int(0..2) (representing constraint ((x_00008_00007=3) + (x_00007_00009=3)))
c Both direct and order encoding.
c Var 'aux1824' order represents '0' with '8026'
c Var 'aux1824' direct represents '0' with '8026'
c Var 'aux1824' order represents '1' with '8027'
-8026 8027 0
c Var 'aux1824' direct represents '1' with '8028'
8026 -8027 8028 0
-8028 8027 0
-8028 -8026 0
c Var 'aux1824' direct represents '2' with '-8027'
8026 8028 -8027 0
c Encoding variable: aux1825 with domain: int(0..2) (representing constraint ((x_00007_00008=3) + (x_00008_00008=3)))
c Both direct and order encoding.
c Var 'aux1825' order represents '0' with '8029'
c Var 'aux1825' direct represents '0' with '8029'
c Var 'aux1825' order represents '1' with '8030'
-8029 8030 0
c Var 'aux1825' direct represents '1' with '8031'
8029 -8030 8031 0
-8031 8030 0
-8031 -8029 0
c Var 'aux1825' direct represents '2' with '-8030'
8029 8031 -8030 0
c Encoding variable: aux1826 with domain: int(0..2) (representing constraint ((x_00007_00007=3) + (x_00009_00007=3)))
c Both direct and order encoding.
c Var 'aux1826' order represents '0' with '8032'
c Var 'aux1826' direct represents '0' with '8032'
c Var 'aux1826' order represents '1' with '8033'
-8032 8033 0
c Var 'aux1826' direct represents '1' with '8034'
8032 -8033 8034 0
-8034 8033 0
-8034 -8032 0
c Var 'aux1826' direct represents '2' with '-8033'
8032 8034 -8033 0
c Encoding variable: aux1827 with domain: int(0..2) (representing constraint ((x_00009_00009=3) + (x_00009_00008=3)))
c Both direct and order encoding.
c Var 'aux1827' order represents '0' with '8035'
c Var 'aux1827' direct represents '0' with '8035'
c Var 'aux1827' order represents '1' with '8036'
-8035 8036 0
c Var 'aux1827' direct represents '1' with '8037'
8035 -8036 8037 0
-8037 8036 0
-8037 -8035 0
c Var 'aux1827' direct represents '2' with '-8036'
8035 8037 -8036 0
c Encoding variable: aux1828 with domain: int(0..3) (representing constraint ((x_00008_00009=3) + aux1827))
c Both direct and order encoding.
c Var 'aux1828' order represents '0' with '8038'
c Var 'aux1828' direct represents '0' with '8038'
c Var 'aux1828' order represents '1' with '8039'
-8038 8039 0
c Var 'aux1828' direct represents '1' with '8040'
8038 -8039 8040 0
-8040 8039 0
-8040 -8038 0
c Var 'aux1828' order represents '2' with '8041'
-8039 8041 0
c Var 'aux1828' direct represents '2' with '8042'
8039 -8041 8042 0
-8042 8041 0
-8042 -8039 0
c Var 'aux1828' direct represents '3' with '-8041'
8038 8040 8042 -8041 0
c Encoding variable: aux1829 with domain: int(0..4) (representing constraint (aux1824 + aux1826))
c Both direct and order encoding.
c Var 'aux1829' order represents '0' with '8043'
c Var 'aux1829' direct represents '0' with '8043'
c Var 'aux1829' order represents '1' with '8044'
-8043 8044 0
c Var 'aux1829' direct represents '1' with '8045'
8043 -8044 8045 0
-8045 8044 0
-8045 -8043 0
c Var 'aux1829' order represents '2' with '8046'
-8044 8046 0
c Var 'aux1829' direct represents '2' with '8047'
8044 -8046 8047 0
-8047 8046 0
-8047 -8044 0
c Var 'aux1829' order represents '3' with '8048'
-8046 8048 0
c Var 'aux1829' direct represents '3' with '8049'
8046 -8048 8049 0
-8049 8048 0
-8049 -8046 0
c Var 'aux1829' direct represents '4' with '-8048'
8043 8045 8047 8049 -8048 0
c Encoding variable: aux1830 with domain: int(0..2) (representing constraint ((x_00008_00007=4) + (x_00007_00009=4)))
c Both direct and order encoding.
c Var 'aux1830' order represents '0' with '8050'
c Var 'aux1830' direct represents '0' with '8050'
c Var 'aux1830' order represents '1' with '8051'
-8050 8051 0
c Var 'aux1830' direct represents '1' with '8052'
8050 -8051 8052 0
-8052 8051 0
-8052 -8050 0
c Var 'aux1830' direct represents '2' with '-8051'
8050 8052 -8051 0
c Encoding variable: aux1831 with domain: int(0..2) (representing constraint ((x_00007_00008=4) + (x_00008_00008=4)))
c Both direct and order encoding.
c Var 'aux1831' order represents '0' with '8053'
c Var 'aux1831' direct represents '0' with '8053'
c Var 'aux1831' order represents '1' with '8054'
-8053 8054 0
c Var 'aux1831' direct represents '1' with '8055'
8053 -8054 8055 0
-8055 8054 0
-8055 -8053 0
c Var 'aux1831' direct represents '2' with '-8054'
8053 8055 -8054 0
c Encoding variable: aux1832 with domain: int(0..2) (representing constraint ((x_00007_00007=4) + (x_00009_00007=4)))
c Both direct and order encoding.
c Var 'aux1832' order represents '0' with '8056'
c Var 'aux1832' direct represents '0' with '8056'
c Var 'aux1832' order represents '1' with '8057'
-8056 8057 0
c Var 'aux1832' direct represents '1' with '8058'
8056 -8057 8058 0
-8058 8057 0
-8058 -8056 0
c Var 'aux1832' direct represents '2' with '-8057'
8056 8058 -8057 0
c Encoding variable: aux1833 with domain: int(0..2) (representing constraint ((x_00009_00009=4) + (x_00009_00008=4)))
c Both direct and order encoding.
c Var 'aux1833' order represents '0' with '8059'
c Var 'aux1833' direct represents '0' with '8059'
c Var 'aux1833' order represents '1' with '8060'
-8059 8060 0
c Var 'aux1833' direct represents '1' with '8061'
8059 -8060 8061 0
-8061 8060 0
-8061 -8059 0
c Var 'aux1833' direct represents '2' with '-8060'
8059 8061 -8060 0
c Encoding variable: aux1834 with domain: int(0..3) (representing constraint ((x_00008_00009=4) + aux1833))
c Both direct and order encoding.
c Var 'aux1834' order represents '0' with '8062'
c Var 'aux1834' direct represents '0' with '8062'
c Var 'aux1834' order represents '1' with '8063'
-8062 8063 0
c Var 'aux1834' direct represents '1' with '8064'
8062 -8063 8064 0
-8064 8063 0
-8064 -8062 0
c Var 'aux1834' order represents '2' with '8065'
-8063 8065 0
c Var 'aux1834' direct represents '2' with '8066'
8063 -8065 8066 0
-8066 8065 0
-8066 -8063 0
c Var 'aux1834' direct represents '3' with '-8065'
8062 8064 8066 -8065 0
c Encoding variable: aux1835 with domain: int(0..4) (representing constraint (aux1830 + aux1832))
c Both direct and order encoding.
c Var 'aux1835' order represents '0' with '8067'
c Var 'aux1835' direct represents '0' with '8067'
c Var 'aux1835' order represents '1' with '8068'
-8067 8068 0
c Var 'aux1835' direct represents '1' with '8069'
8067 -8068 8069 0
-8069 8068 0
-8069 -8067 0
c Var 'aux1835' order represents '2' with '8070'
-8068 8070 0
c Var 'aux1835' direct represents '2' with '8071'
8068 -8070 8071 0
-8071 8070 0
-8071 -8068 0
c Var 'aux1835' order represents '3' with '8072'
-8070 8072 0
c Var 'aux1835' direct represents '3' with '8073'
8070 -8072 8073 0
-8073 8072 0
-8073 -8070 0
c Var 'aux1835' direct represents '4' with '-8072'
8067 8069 8071 8073 -8072 0
c Encoding variable: aux1836 with domain: int(0..2) (representing constraint ((x_00008_00007=5) + (x_00007_00009=5)))
c Both direct and order encoding.
c Var 'aux1836' order represents '0' with '8074'
c Var 'aux1836' direct represents '0' with '8074'
c Var 'aux1836' order represents '1' with '8075'
-8074 8075 0
c Var 'aux1836' direct represents '1' with '8076'
8074 -8075 8076 0
-8076 8075 0
-8076 -8074 0
c Var 'aux1836' direct represents '2' with '-8075'
8074 8076 -8075 0
c Encoding variable: aux1837 with domain: int(0..2) (representing constraint ((x_00007_00008=5) + (x_00008_00008=5)))
c Both direct and order encoding.
c Var 'aux1837' order represents '0' with '8077'
c Var 'aux1837' direct represents '0' with '8077'
c Var 'aux1837' order represents '1' with '8078'
-8077 8078 0
c Var 'aux1837' direct represents '1' with '8079'
8077 -8078 8079 0
-8079 8078 0
-8079 -8077 0
c Var 'aux1837' direct represents '2' with '-8078'
8077 8079 -8078 0
c Encoding variable: aux1838 with domain: int(0..2) (representing constraint ((x_00007_00007=5) + (x_00009_00007=5)))
c Both direct and order encoding.
c Var 'aux1838' order represents '0' with '8080'
c Var 'aux1838' direct represents '0' with '8080'
c Var 'aux1838' order represents '1' with '8081'
-8080 8081 0
c Var 'aux1838' direct represents '1' with '8082'
8080 -8081 8082 0
-8082 8081 0
-8082 -8080 0
c Var 'aux1838' direct represents '2' with '-8081'
8080 8082 -8081 0
c Encoding variable: aux1839 with domain: int(0..2) (representing constraint ((x_00009_00009=5) + (x_00009_00008=5)))
c Both direct and order encoding.
c Var 'aux1839' order represents '0' with '8083'
c Var 'aux1839' direct represents '0' with '8083'
c Var 'aux1839' order represents '1' with '8084'
-8083 8084 0
c Var 'aux1839' direct represents '1' with '8085'
8083 -8084 8085 0
-8085 8084 0
-8085 -8083 0
c Var 'aux1839' direct represents '2' with '-8084'
8083 8085 -8084 0
c Encoding variable: aux1840 with domain: int(0..3) (representing constraint ((x_00008_00009=5) + aux1839))
c Both direct and order encoding.
c Var 'aux1840' order represents '0' with '8086'
c Var 'aux1840' direct represents '0' with '8086'
c Var 'aux1840' order represents '1' with '8087'
-8086 8087 0
c Var 'aux1840' direct represents '1' with '8088'
8086 -8087 8088 0
-8088 8087 0
-8088 -8086 0
c Var 'aux1840' order represents '2' with '8089'
-8087 8089 0
c Var 'aux1840' direct represents '2' with '8090'
8087 -8089 8090 0
-8090 8089 0
-8090 -8087 0
c Var 'aux1840' direct represents '3' with '-8089'
8086 8088 8090 -8089 0
c Encoding variable: aux1841 with domain: int(0..4) (representing constraint (aux1836 + aux1838))
c Both direct and order encoding.
c Var 'aux1841' order represents '0' with '8091'
c Var 'aux1841' direct represents '0' with '8091'
c Var 'aux1841' order represents '1' with '8092'
-8091 8092 0
c Var 'aux1841' direct represents '1' with '8093'
8091 -8092 8093 0
-8093 8092 0
-8093 -8091 0
c Var 'aux1841' order represents '2' with '8094'
-8092 8094 0
c Var 'aux1841' direct represents '2' with '8095'
8092 -8094 8095 0
-8095 8094 0
-8095 -8092 0
c Var 'aux1841' order represents '3' with '8096'
-8094 8096 0
c Var 'aux1841' direct represents '3' with '8097'
8094 -8096 8097 0
-8097 8096 0
-8097 -8094 0
c Var 'aux1841' direct represents '4' with '-8096'
8091 8093 8095 8097 -8096 0
c Encoding variable: aux1842 with domain: int(0..2) (representing constraint ((x_00008_00007=6) + (x_00007_00009=6)))
c Both direct and order encoding.
c Var 'aux1842' order represents '0' with '8098'
c Var 'aux1842' direct represents '0' with '8098'
c Var 'aux1842' order represents '1' with '8099'
-8098 8099 0
c Var 'aux1842' direct represents '1' with '8100'
8098 -8099 8100 0
-8100 8099 0
-8100 -8098 0
c Var 'aux1842' direct represents '2' with '-8099'
8098 8100 -8099 0
c Encoding variable: aux1843 with domain: int(0..2) (representing constraint ((x_00007_00008=6) + (x_00008_00008=6)))
c Both direct and order encoding.
c Var 'aux1843' order represents '0' with '8101'
c Var 'aux1843' direct represents '0' with '8101'
c Var 'aux1843' order represents '1' with '8102'
-8101 8102 0
c Var 'aux1843' direct represents '1' with '8103'
8101 -8102 8103 0
-8103 8102 0
-8103 -8101 0
c Var 'aux1843' direct represents '2' with '-8102'
8101 8103 -8102 0
c Encoding variable: aux1844 with domain: int(0..2) (representing constraint ((x_00007_00007=6) + (x_00009_00007=6)))
c Both direct and order encoding.
c Var 'aux1844' order represents '0' with '8104'
c Var 'aux1844' direct represents '0' with '8104'
c Var 'aux1844' order represents '1' with '8105'
-8104 8105 0
c Var 'aux1844' direct represents '1' with '8106'
8104 -8105 8106 0
-8106 8105 0
-8106 -8104 0
c Var 'aux1844' direct represents '2' with '-8105'
8104 8106 -8105 0
c Encoding variable: aux1845 with domain: int(0..2) (representing constraint ((x_00009_00009=6) + (x_00009_00008=6)))
c Both direct and order encoding.
c Var 'aux1845' order represents '0' with '8107'
c Var 'aux1845' direct represents '0' with '8107'
c Var 'aux1845' order represents '1' with '8108'
-8107 8108 0
c Var 'aux1845' direct represents '1' with '8109'
8107 -8108 8109 0
-8109 8108 0
-8109 -8107 0
c Var 'aux1845' direct represents '2' with '-8108'
8107 8109 -8108 0
c Encoding variable: aux1846 with domain: int(0..3) (representing constraint ((x_00008_00009=6) + aux1845))
c Both direct and order encoding.
c Var 'aux1846' order represents '0' with '8110'
c Var 'aux1846' direct represents '0' with '8110'
c Var 'aux1846' order represents '1' with '8111'
-8110 8111 0
c Var 'aux1846' direct represents '1' with '8112'
8110 -8111 8112 0
-8112 8111 0
-8112 -8110 0
c Var 'aux1846' order represents '2' with '8113'
-8111 8113 0
c Var 'aux1846' direct represents '2' with '8114'
8111 -8113 8114 0
-8114 8113 0
-8114 -8111 0
c Var 'aux1846' direct represents '3' with '-8113'
8110 8112 8114 -8113 0
c Encoding variable: aux1847 with domain: int(0..4) (representing constraint (aux1842 + aux1844))
c Both direct and order encoding.
c Var 'aux1847' order represents '0' with '8115'
c Var 'aux1847' direct represents '0' with '8115'
c Var 'aux1847' order represents '1' with '8116'
-8115 8116 0
c Var 'aux1847' direct represents '1' with '8117'
8115 -8116 8117 0
-8117 8116 0
-8117 -8115 0
c Var 'aux1847' order represents '2' with '8118'
-8116 8118 0
c Var 'aux1847' direct represents '2' with '8119'
8116 -8118 8119 0
-8119 8118 0
-8119 -8116 0
c Var 'aux1847' order represents '3' with '8120'
-8118 8120 0
c Var 'aux1847' direct represents '3' with '8121'
8118 -8120 8121 0
-8121 8120 0
-8121 -8118 0
c Var 'aux1847' direct represents '4' with '-8120'
8115 8117 8119 8121 -8120 0
c Encoding variable: aux1848 with domain: int(0..2) (representing constraint ((x_00008_00007=7) + (x_00007_00009=7)))
c Both direct and order encoding.
c Var 'aux1848' order represents '0' with '8122'
c Var 'aux1848' direct represents '0' with '8122'
c Var 'aux1848' order represents '1' with '8123'
-8122 8123 0
c Var 'aux1848' direct represents '1' with '8124'
8122 -8123 8124 0
-8124 8123 0
-8124 -8122 0
c Var 'aux1848' direct represents '2' with '-8123'
8122 8124 -8123 0
c Encoding variable: aux1849 with domain: int(0..2) (representing constraint ((x_00007_00008=7) + (x_00008_00008=7)))
c Both direct and order encoding.
c Var 'aux1849' order represents '0' with '8125'
c Var 'aux1849' direct represents '0' with '8125'
c Var 'aux1849' order represents '1' with '8126'
-8125 8126 0
c Var 'aux1849' direct represents '1' with '8127'
8125 -8126 8127 0
-8127 8126 0
-8127 -8125 0
c Var 'aux1849' direct represents '2' with '-8126'
8125 8127 -8126 0
c Encoding variable: aux1850 with domain: int(0..2) (representing constraint ((x_00007_00007=7) + (x_00009_00007=7)))
c Both direct and order encoding.
c Var 'aux1850' order represents '0' with '8128'
c Var 'aux1850' direct represents '0' with '8128'
c Var 'aux1850' order represents '1' with '8129'
-8128 8129 0
c Var 'aux1850' direct represents '1' with '8130'
8128 -8129 8130 0
-8130 8129 0
-8130 -8128 0
c Var 'aux1850' direct represents '2' with '-8129'
8128 8130 -8129 0
c Encoding variable: aux1851 with domain: int(0..2) (representing constraint ((x_00009_00009=7) + (x_00009_00008=7)))
c Both direct and order encoding.
c Var 'aux1851' order represents '0' with '8131'
c Var 'aux1851' direct represents '0' with '8131'
c Var 'aux1851' order represents '1' with '8132'
-8131 8132 0
c Var 'aux1851' direct represents '1' with '8133'
8131 -8132 8133 0
-8133 8132 0
-8133 -8131 0
c Var 'aux1851' direct represents '2' with '-8132'
8131 8133 -8132 0
c Encoding variable: aux1852 with domain: int(0..3) (representing constraint ((x_00008_00009=7) + aux1851))
c Both direct and order encoding.
c Var 'aux1852' order represents '0' with '8134'
c Var 'aux1852' direct represents '0' with '8134'
c Var 'aux1852' order represents '1' with '8135'
-8134 8135 0
c Var 'aux1852' direct represents '1' with '8136'
8134 -8135 8136 0
-8136 8135 0
-8136 -8134 0
c Var 'aux1852' order represents '2' with '8137'
-8135 8137 0
c Var 'aux1852' direct represents '2' with '8138'
8135 -8137 8138 0
-8138 8137 0
-8138 -8135 0
c Var 'aux1852' direct represents '3' with '-8137'
8134 8136 8138 -8137 0
c Encoding variable: aux1853 with domain: int(0..4) (representing constraint (aux1848 + aux1850))
c Both direct and order encoding.
c Var 'aux1853' order represents '0' with '8139'
c Var 'aux1853' direct represents '0' with '8139'
c Var 'aux1853' order represents '1' with '8140'
-8139 8140 0
c Var 'aux1853' direct represents '1' with '8141'
8139 -8140 8141 0
-8141 8140 0
-8141 -8139 0
c Var 'aux1853' order represents '2' with '8142'
-8140 8142 0
c Var 'aux1853' direct represents '2' with '8143'
8140 -8142 8143 0
-8143 8142 0
-8143 -8140 0
c Var 'aux1853' order represents '3' with '8144'
-8142 8144 0
c Var 'aux1853' direct represents '3' with '8145'
8142 -8144 8145 0
-8145 8144 0
-8145 -8142 0
c Var 'aux1853' direct represents '4' with '-8144'
8139 8141 8143 8145 -8144 0
c Encoding variable: aux1854 with domain: int(0..2) (representing constraint ((x_00008_00007=8) + (x_00007_00009=8)))
c Both direct and order encoding.
c Var 'aux1854' order represents '0' with '8146'
c Var 'aux1854' direct represents '0' with '8146'
c Var 'aux1854' order represents '1' with '8147'
-8146 8147 0
c Var 'aux1854' direct represents '1' with '8148'
8146 -8147 8148 0
-8148 8147 0
-8148 -8146 0
c Var 'aux1854' direct represents '2' with '-8147'
8146 8148 -8147 0
c Encoding variable: aux1855 with domain: int(0..2) (representing constraint ((x_00007_00008=8) + (x_00008_00008=8)))
c Both direct and order encoding.
c Var 'aux1855' order represents '0' with '8149'
c Var 'aux1855' direct represents '0' with '8149'
c Var 'aux1855' order represents '1' with '8150'
-8149 8150 0
c Var 'aux1855' direct represents '1' with '8151'
8149 -8150 8151 0
-8151 8150 0
-8151 -8149 0
c Var 'aux1855' direct represents '2' with '-8150'
8149 8151 -8150 0
c Encoding variable: aux1856 with domain: int(0..2) (representing constraint ((x_00007_00007=8) + (x_00009_00007=8)))
c Both direct and order encoding.
c Var 'aux1856' order represents '0' with '8152'
c Var 'aux1856' direct represents '0' with '8152'
c Var 'aux1856' order represents '1' with '8153'
-8152 8153 0
c Var 'aux1856' direct represents '1' with '8154'
8152 -8153 8154 0
-8154 8153 0
-8154 -8152 0
c Var 'aux1856' direct represents '2' with '-8153'
8152 8154 -8153 0
c Encoding variable: aux1857 with domain: int(0..2) (representing constraint ((x_00009_00009=8) + (x_00009_00008=8)))
c Both direct and order encoding.
c Var 'aux1857' order represents '0' with '8155'
c Var 'aux1857' direct represents '0' with '8155'
c Var 'aux1857' order represents '1' with '8156'
-8155 8156 0
c Var 'aux1857' direct represents '1' with '8157'
8155 -8156 8157 0
-8157 8156 0
-8157 -8155 0
c Var 'aux1857' direct represents '2' with '-8156'
8155 8157 -8156 0
c Encoding variable: aux1858 with domain: int(0..3) (representing constraint ((x_00008_00009=8) + aux1857))
c Both direct and order encoding.
c Var 'aux1858' order represents '0' with '8158'
c Var 'aux1858' direct represents '0' with '8158'
c Var 'aux1858' order represents '1' with '8159'
-8158 8159 0
c Var 'aux1858' direct represents '1' with '8160'
8158 -8159 8160 0
-8160 8159 0
-8160 -8158 0
c Var 'aux1858' order represents '2' with '8161'
-8159 8161 0
c Var 'aux1858' direct represents '2' with '8162'
8159 -8161 8162 0
-8162 8161 0
-8162 -8159 0
c Var 'aux1858' direct represents '3' with '-8161'
8158 8160 8162 -8161 0
c Encoding variable: aux1859 with domain: int(0..4) (representing constraint (aux1854 + aux1856))
c Both direct and order encoding.
c Var 'aux1859' order represents '0' with '8163'
c Var 'aux1859' direct represents '0' with '8163'
c Var 'aux1859' order represents '1' with '8164'
-8163 8164 0
c Var 'aux1859' direct represents '1' with '8165'
8163 -8164 8165 0
-8165 8164 0
-8165 -8163 0
c Var 'aux1859' order represents '2' with '8166'
-8164 8166 0
c Var 'aux1859' direct represents '2' with '8167'
8164 -8166 8167 0
-8167 8166 0
-8167 -8164 0
c Var 'aux1859' order represents '3' with '8168'
-8166 8168 0
c Var 'aux1859' direct represents '3' with '8169'
8166 -8168 8169 0
-8169 8168 0
-8169 -8166 0
c Var 'aux1859' direct represents '4' with '-8168'
8163 8165 8167 8169 -8168 0
c Encoding variable: aux1860 with domain: int(0..2) (representing constraint ((x_00008_00007=9) + (x_00007_00009=9)))
c Both direct and order encoding.
c Var 'aux1860' order represents '0' with '8170'
c Var 'aux1860' direct represents '0' with '8170'
c Var 'aux1860' order represents '1' with '8171'
-8170 8171 0
c Var 'aux1860' direct represents '1' with '8172'
8170 -8171 8172 0
-8172 8171 0
-8172 -8170 0
c Var 'aux1860' direct represents '2' with '-8171'
8170 8172 -8171 0
c Encoding variable: aux1861 with domain: int(0..2) (representing constraint ((x_00007_00008=9) + (x_00008_00008=9)))
c Both direct and order encoding.
c Var 'aux1861' order represents '0' with '8173'
c Var 'aux1861' direct represents '0' with '8173'
c Var 'aux1861' order represents '1' with '8174'
-8173 8174 0
c Var 'aux1861' direct represents '1' with '8175'
8173 -8174 8175 0
-8175 8174 0
-8175 -8173 0
c Var 'aux1861' direct represents '2' with '-8174'
8173 8175 -8174 0
c Encoding variable: aux1862 with domain: int(0..2) (representing constraint ((x_00007_00007=9) + (x_00009_00007=9)))
c Both direct and order encoding.
c Var 'aux1862' order represents '0' with '8176'
c Var 'aux1862' direct represents '0' with '8176'
c Var 'aux1862' order represents '1' with '8177'
-8176 8177 0
c Var 'aux1862' direct represents '1' with '8178'
8176 -8177 8178 0
-8178 8177 0
-8178 -8176 0
c Var 'aux1862' direct represents '2' with '-8177'
8176 8178 -8177 0
c Encoding variable: aux1863 with domain: int(0..2) (representing constraint ((x_00009_00009=9) + (x_00009_00008=9)))
c Both direct and order encoding.
c Var 'aux1863' order represents '0' with '8179'
c Var 'aux1863' direct represents '0' with '8179'
c Var 'aux1863' order represents '1' with '8180'
-8179 8180 0
c Var 'aux1863' direct represents '1' with '8181'
8179 -8180 8181 0
-8181 8180 0
-8181 -8179 0
c Var 'aux1863' direct represents '2' with '-8180'
8179 8181 -8180 0
c Encoding variable: aux1864 with domain: int(0..3) (representing constraint ((x_00008_00009=9) + aux1863))
c Both direct and order encoding.
c Var 'aux1864' order represents '0' with '8182'
c Var 'aux1864' direct represents '0' with '8182'
c Var 'aux1864' order represents '1' with '8183'
-8182 8183 0
c Var 'aux1864' direct represents '1' with '8184'
8182 -8183 8184 0
-8184 8183 0
-8184 -8182 0
c Var 'aux1864' order represents '2' with '8185'
-8183 8185 0
c Var 'aux1864' direct represents '2' with '8186'
8183 -8185 8186 0
-8186 8185 0
-8186 -8183 0
c Var 'aux1864' direct represents '3' with '-8185'
8182 8184 8186 -8185 0
c Encoding variable: aux1865 with domain: int(0..4) (representing constraint (aux1860 + aux1862))
c Both direct and order encoding.
c Var 'aux1865' order represents '0' with '8187'
c Var 'aux1865' direct represents '0' with '8187'
c Var 'aux1865' order represents '1' with '8188'
-8187 8188 0
c Var 'aux1865' direct represents '1' with '8189'
8187 -8188 8189 0
-8189 8188 0
-8189 -8187 0
c Var 'aux1865' order represents '2' with '8190'
-8188 8190 0
c Var 'aux1865' direct represents '2' with '8191'
8188 -8190 8191 0
-8191 8190 0
-8191 -8188 0
c Var 'aux1865' order represents '3' with '8192'
-8190 8192 0
c Var 'aux1865' direct represents '3' with '8193'
8190 -8192 8193 0
-8193 8192 0
-8193 -8190 0
c Var 'aux1865' direct represents '4' with '-8192'
8187 8189 8191 8193 -8192 0
c Encoding variable: aux1866 with domain: int(0..2) (representing constraint ((x_00003_00001=1) + (x_00002_00001=1)))
c Both direct and order encoding.
c Var 'aux1866' order represents '0' with '8194'
c Var 'aux1866' direct represents '0' with '8194'
c Var 'aux1866' order represents '1' with '8195'
-8194 8195 0
c Var 'aux1866' direct represents '1' with '8196'
8194 -8195 8196 0
-8196 8195 0
-8196 -8194 0
c Var 'aux1866' direct represents '2' with '-8195'
8194 8196 -8195 0
c Encoding variable: aux1867 with domain: int(0..2) (representing constraint ((x_00003_00001=2) + (x_00002_00001=2)))
c Both direct and order encoding.
c Var 'aux1867' order represents '0' with '8197'
c Var 'aux1867' direct represents '0' with '8197'
c Var 'aux1867' order represents '1' with '8198'
-8197 8198 0
c Var 'aux1867' direct represents '1' with '8199'
8197 -8198 8199 0
-8199 8198 0
-8199 -8197 0
c Var 'aux1867' direct represents '2' with '-8198'
8197 8199 -8198 0
c Encoding variable: aux1868 with domain: int(0..2) (representing constraint ((x_00003_00001=3) + (x_00002_00001=3)))
c Both direct and order encoding.
c Var 'aux1868' order represents '0' with '8200'
c Var 'aux1868' direct represents '0' with '8200'
c Var 'aux1868' order represents '1' with '8201'
-8200 8201 0
c Var 'aux1868' direct represents '1' with '8202'
8200 -8201 8202 0
-8202 8201 0
-8202 -8200 0
c Var 'aux1868' direct represents '2' with '-8201'
8200 8202 -8201 0
c Encoding variable: aux1869 with domain: int(0..2) (representing constraint ((x_00003_00001=4) + (x_00002_00001=4)))
c Both direct and order encoding.
c Var 'aux1869' order represents '0' with '8203'
c Var 'aux1869' direct represents '0' with '8203'
c Var 'aux1869' order represents '1' with '8204'
-8203 8204 0
c Var 'aux1869' direct represents '1' with '8205'
8203 -8204 8205 0
-8205 8204 0
-8205 -8203 0
c Var 'aux1869' direct represents '2' with '-8204'
8203 8205 -8204 0
c Encoding variable: aux1870 with domain: int(0..2) (representing constraint ((x_00003_00001=5) + (x_00002_00001=5)))
c Both direct and order encoding.
c Var 'aux1870' order represents '0' with '8206'
c Var 'aux1870' direct represents '0' with '8206'
c Var 'aux1870' order represents '1' with '8207'
-8206 8207 0
c Var 'aux1870' direct represents '1' with '8208'
8206 -8207 8208 0
-8208 8207 0
-8208 -8206 0
c Var 'aux1870' direct represents '2' with '-8207'
8206 8208 -8207 0
c Encoding variable: aux1871 with domain: int(0..2) (representing constraint ((x_00003_00001=6) + (x_00002_00001=6)))
c Both direct and order encoding.
c Var 'aux1871' order represents '0' with '8209'
c Var 'aux1871' direct represents '0' with '8209'
c Var 'aux1871' order represents '1' with '8210'
-8209 8210 0
c Var 'aux1871' direct represents '1' with '8211'
8209 -8210 8211 0
-8211 8210 0
-8211 -8209 0
c Var 'aux1871' direct represents '2' with '-8210'
8209 8211 -8210 0
c Encoding variable: aux1872 with domain: int(0..2) (representing constraint ((x_00003_00001=7) + (x_00002_00001=7)))
c Both direct and order encoding.
c Var 'aux1872' order represents '0' with '8212'
c Var 'aux1872' direct represents '0' with '8212'
c Var 'aux1872' order represents '1' with '8213'
-8212 8213 0
c Var 'aux1872' direct represents '1' with '8214'
8212 -8213 8214 0
-8214 8213 0
-8214 -8212 0
c Var 'aux1872' direct represents '2' with '-8213'
8212 8214 -8213 0
c Encoding variable: aux1873 with domain: int(0..2) (representing constraint ((x_00003_00001=8) + (x_00002_00001=8)))
c Both direct and order encoding.
c Var 'aux1873' order represents '0' with '8215'
c Var 'aux1873' direct represents '0' with '8215'
c Var 'aux1873' order represents '1' with '8216'
-8215 8216 0
c Var 'aux1873' direct represents '1' with '8217'
8215 -8216 8217 0
-8217 8216 0
-8217 -8215 0
c Var 'aux1873' direct represents '2' with '-8216'
8215 8217 -8216 0
c Encoding variable: aux1874 with domain: int(0..2) (representing constraint ((x_00003_00001=9) + (x_00002_00001=9)))
c Both direct and order encoding.
c Var 'aux1874' order represents '0' with '8218'
c Var 'aux1874' direct represents '0' with '8218'
c Var 'aux1874' order represents '1' with '8219'
-8218 8219 0
c Var 'aux1874' direct represents '1' with '8220'
8218 -8219 8220 0
-8220 8219 0
-8220 -8218 0
c Var 'aux1874' direct represents '2' with '-8219'
8218 8220 -8219 0
c Encoding variable: aux1875 with domain: int(0..2) (representing constraint ((x_00003_00008=1) + (x_00002_00009=1)))
c Both direct and order encoding.
c Var 'aux1875' order represents '0' with '8221'
c Var 'aux1875' direct represents '0' with '8221'
c Var 'aux1875' order represents '1' with '8222'
-8221 8222 0
c Var 'aux1875' direct represents '1' with '8223'
8221 -8222 8223 0
-8223 8222 0
-8223 -8221 0
c Var 'aux1875' direct represents '2' with '-8222'
8221 8223 -8222 0
c Encoding variable: aux1876 with domain: int(0..2) (representing constraint ((x_00002_00008=1) + (x_00003_00009=1)))
c Both direct and order encoding.
c Var 'aux1876' order represents '0' with '8224'
c Var 'aux1876' direct represents '0' with '8224'
c Var 'aux1876' order represents '1' with '8225'
-8224 8225 0
c Var 'aux1876' direct represents '1' with '8226'
8224 -8225 8226 0
-8226 8225 0
-8226 -8224 0
c Var 'aux1876' direct represents '2' with '-8225'
8224 8226 -8225 0
c Encoding variable: aux1877 with domain: int(0..2) (representing constraint ((x_00002_00007=1) + (x_00001_00008=1)))
c Both direct and order encoding.
c Var 'aux1877' order represents '0' with '8227'
c Var 'aux1877' direct represents '0' with '8227'
c Var 'aux1877' order represents '1' with '8228'
-8227 8228 0
c Var 'aux1877' direct represents '1' with '8229'
8227 -8228 8229 0
-8229 8228 0
-8229 -8227 0
c Var 'aux1877' direct represents '2' with '-8228'
8227 8229 -8228 0
c Encoding variable: aux1878 with domain: int(0..2) (representing constraint ((x_00001_00009=1) + (x_00001_00007=1)))
c Both direct and order encoding.
c Var 'aux1878' order represents '0' with '8230'
c Var 'aux1878' direct represents '0' with '8230'
c Var 'aux1878' order represents '1' with '8231'
-8230 8231 0
c Var 'aux1878' direct represents '1' with '8232'
8230 -8231 8232 0
-8232 8231 0
-8232 -8230 0
c Var 'aux1878' direct represents '2' with '-8231'
8230 8232 -8231 0
c Encoding variable: aux1879 with domain: int(0..4) (representing constraint (aux1875 + aux1878))
c Both direct and order encoding.
c Var 'aux1879' order represents '0' with '8233'
c Var 'aux1879' direct represents '0' with '8233'
c Var 'aux1879' order represents '1' with '8234'
-8233 8234 0
c Var 'aux1879' direct represents '1' with '8235'
8233 -8234 8235 0
-8235 8234 0
-8235 -8233 0
c Var 'aux1879' order represents '2' with '8236'
-8234 8236 0
c Var 'aux1879' direct represents '2' with '8237'
8234 -8236 8237 0
-8237 8236 0
-8237 -8234 0
c Var 'aux1879' order represents '3' with '8238'
-8236 8238 0
c Var 'aux1879' direct represents '3' with '8239'
8236 -8238 8239 0
-8239 8238 0
-8239 -8236 0
c Var 'aux1879' direct represents '4' with '-8238'
8233 8235 8237 8239 -8238 0
c Encoding variable: aux1880 with domain: int(0..2) (representing constraint ((x_00003_00008=2) + (x_00002_00009=2)))
c Both direct and order encoding.
c Var 'aux1880' order represents '0' with '8240'
c Var 'aux1880' direct represents '0' with '8240'
c Var 'aux1880' order represents '1' with '8241'
-8240 8241 0
c Var 'aux1880' direct represents '1' with '8242'
8240 -8241 8242 0
-8242 8241 0
-8242 -8240 0
c Var 'aux1880' direct represents '2' with '-8241'
8240 8242 -8241 0
c Encoding variable: aux1881 with domain: int(0..2) (representing constraint ((x_00002_00008=2) + (x_00003_00009=2)))
c Both direct and order encoding.
c Var 'aux1881' order represents '0' with '8243'
c Var 'aux1881' direct represents '0' with '8243'
c Var 'aux1881' order represents '1' with '8244'
-8243 8244 0
c Var 'aux1881' direct represents '1' with '8245'
8243 -8244 8245 0
-8245 8244 0
-8245 -8243 0
c Var 'aux1881' direct represents '2' with '-8244'
8243 8245 -8244 0
c Encoding variable: aux1882 with domain: int(0..2) (representing constraint ((x_00002_00007=2) + (x_00001_00008=2)))
c Both direct and order encoding.
c Var 'aux1882' order represents '0' with '8246'
c Var 'aux1882' direct represents '0' with '8246'
c Var 'aux1882' order represents '1' with '8247'
-8246 8247 0
c Var 'aux1882' direct represents '1' with '8248'
8246 -8247 8248 0
-8248 8247 0
-8248 -8246 0
c Var 'aux1882' direct represents '2' with '-8247'
8246 8248 -8247 0
c Encoding variable: aux1883 with domain: int(0..2) (representing constraint ((x_00001_00009=2) + (x_00001_00007=2)))
c Both direct and order encoding.
c Var 'aux1883' order represents '0' with '8249'
c Var 'aux1883' direct represents '0' with '8249'
c Var 'aux1883' order represents '1' with '8250'
-8249 8250 0
c Var 'aux1883' direct represents '1' with '8251'
8249 -8250 8251 0
-8251 8250 0
-8251 -8249 0
c Var 'aux1883' direct represents '2' with '-8250'
8249 8251 -8250 0
c Encoding variable: aux1884 with domain: int(0..4) (representing constraint (aux1880 + aux1883))
c Both direct and order encoding.
c Var 'aux1884' order represents '0' with '8252'
c Var 'aux1884' direct represents '0' with '8252'
c Var 'aux1884' order represents '1' with '8253'
-8252 8253 0
c Var 'aux1884' direct represents '1' with '8254'
8252 -8253 8254 0
-8254 8253 0
-8254 -8252 0
c Var 'aux1884' order represents '2' with '8255'
-8253 8255 0
c Var 'aux1884' direct represents '2' with '8256'
8253 -8255 8256 0
-8256 8255 0
-8256 -8253 0
c Var 'aux1884' order represents '3' with '8257'
-8255 8257 0
c Var 'aux1884' direct represents '3' with '8258'
8255 -8257 8258 0
-8258 8257 0
-8258 -8255 0
c Var 'aux1884' direct represents '4' with '-8257'
8252 8254 8256 8258 -8257 0
c Encoding variable: aux1885 with domain: int(0..2) (representing constraint ((x_00003_00008=3) + (x_00002_00009=3)))
c Both direct and order encoding.
c Var 'aux1885' order represents '0' with '8259'
c Var 'aux1885' direct represents '0' with '8259'
c Var 'aux1885' order represents '1' with '8260'
-8259 8260 0
c Var 'aux1885' direct represents '1' with '8261'
8259 -8260 8261 0
-8261 8260 0
-8261 -8259 0
c Var 'aux1885' direct represents '2' with '-8260'
8259 8261 -8260 0
c Encoding variable: aux1886 with domain: int(0..2) (representing constraint ((x_00002_00008=3) + (x_00003_00009=3)))
c Both direct and order encoding.
c Var 'aux1886' order represents '0' with '8262'
c Var 'aux1886' direct represents '0' with '8262'
c Var 'aux1886' order represents '1' with '8263'
-8262 8263 0
c Var 'aux1886' direct represents '1' with '8264'
8262 -8263 8264 0
-8264 8263 0
-8264 -8262 0
c Var 'aux1886' direct represents '2' with '-8263'
8262 8264 -8263 0
c Encoding variable: aux1887 with domain: int(0..2) (representing constraint ((x_00002_00007=3) + (x_00001_00008=3)))
c Both direct and order encoding.
c Var 'aux1887' order represents '0' with '8265'
c Var 'aux1887' direct represents '0' with '8265'
c Var 'aux1887' order represents '1' with '8266'
-8265 8266 0
c Var 'aux1887' direct represents '1' with '8267'
8265 -8266 8267 0
-8267 8266 0
-8267 -8265 0
c Var 'aux1887' direct represents '2' with '-8266'
8265 8267 -8266 0
c Encoding variable: aux1888 with domain: int(0..2) (representing constraint ((x_00001_00009=3) + (x_00001_00007=3)))
c Both direct and order encoding.
c Var 'aux1888' order represents '0' with '8268'
c Var 'aux1888' direct represents '0' with '8268'
c Var 'aux1888' order represents '1' with '8269'
-8268 8269 0
c Var 'aux1888' direct represents '1' with '8270'
8268 -8269 8270 0
-8270 8269 0
-8270 -8268 0
c Var 'aux1888' direct represents '2' with '-8269'
8268 8270 -8269 0
c Encoding variable: aux1889 with domain: int(0..4) (representing constraint (aux1885 + aux1888))
c Both direct and order encoding.
c Var 'aux1889' order represents '0' with '8271'
c Var 'aux1889' direct represents '0' with '8271'
c Var 'aux1889' order represents '1' with '8272'
-8271 8272 0
c Var 'aux1889' direct represents '1' with '8273'
8271 -8272 8273 0
-8273 8272 0
-8273 -8271 0
c Var 'aux1889' order represents '2' with '8274'
-8272 8274 0
c Var 'aux1889' direct represents '2' with '8275'
8272 -8274 8275 0
-8275 8274 0
-8275 -8272 0
c Var 'aux1889' order represents '3' with '8276'
-8274 8276 0
c Var 'aux1889' direct represents '3' with '8277'
8274 -8276 8277 0
-8277 8276 0
-8277 -8274 0
c Var 'aux1889' direct represents '4' with '-8276'
8271 8273 8275 8277 -8276 0
c Encoding variable: aux1890 with domain: int(0..2) (representing constraint ((x_00003_00008=4) + (x_00002_00009=4)))
c Both direct and order encoding.
c Var 'aux1890' order represents '0' with '8278'
c Var 'aux1890' direct represents '0' with '8278'
c Var 'aux1890' order represents '1' with '8279'
-8278 8279 0
c Var 'aux1890' direct represents '1' with '8280'
8278 -8279 8280 0
-8280 8279 0
-8280 -8278 0
c Var 'aux1890' direct represents '2' with '-8279'
8278 8280 -8279 0
c Encoding variable: aux1891 with domain: int(0..2) (representing constraint ((x_00002_00008=4) + (x_00003_00009=4)))
c Both direct and order encoding.
c Var 'aux1891' order represents '0' with '8281'
c Var 'aux1891' direct represents '0' with '8281'
c Var 'aux1891' order represents '1' with '8282'
-8281 8282 0
c Var 'aux1891' direct represents '1' with '8283'
8281 -8282 8283 0
-8283 8282 0
-8283 -8281 0
c Var 'aux1891' direct represents '2' with '-8282'
8281 8283 -8282 0
c Encoding variable: aux1892 with domain: int(0..2) (representing constraint ((x_00002_00007=4) + (x_00001_00008=4)))
c Both direct and order encoding.
c Var 'aux1892' order represents '0' with '8284'
c Var 'aux1892' direct represents '0' with '8284'
c Var 'aux1892' order represents '1' with '8285'
-8284 8285 0
c Var 'aux1892' direct represents '1' with '8286'
8284 -8285 8286 0
-8286 8285 0
-8286 -8284 0
c Var 'aux1892' direct represents '2' with '-8285'
8284 8286 -8285 0
c Encoding variable: aux1893 with domain: int(0..2) (representing constraint ((x_00001_00009=4) + (x_00001_00007=4)))
c Both direct and order encoding.
c Var 'aux1893' order represents '0' with '8287'
c Var 'aux1893' direct represents '0' with '8287'
c Var 'aux1893' order represents '1' with '8288'
-8287 8288 0
c Var 'aux1893' direct represents '1' with '8289'
8287 -8288 8289 0
-8289 8288 0
-8289 -8287 0
c Var 'aux1893' direct represents '2' with '-8288'
8287 8289 -8288 0
c Encoding variable: aux1894 with domain: int(0..4) (representing constraint (aux1890 + aux1893))
c Both direct and order encoding.
c Var 'aux1894' order represents '0' with '8290'
c Var 'aux1894' direct represents '0' with '8290'
c Var 'aux1894' order represents '1' with '8291'
-8290 8291 0
c Var 'aux1894' direct represents '1' with '8292'
8290 -8291 8292 0
-8292 8291 0
-8292 -8290 0
c Var 'aux1894' order represents '2' with '8293'
-8291 8293 0
c Var 'aux1894' direct represents '2' with '8294'
8291 -8293 8294 0
-8294 8293 0
-8294 -8291 0
c Var 'aux1894' order represents '3' with '8295'
-8293 8295 0
c Var 'aux1894' direct represents '3' with '8296'
8293 -8295 8296 0
-8296 8295 0
-8296 -8293 0
c Var 'aux1894' direct represents '4' with '-8295'
8290 8292 8294 8296 -8295 0
c Encoding variable: aux1895 with domain: int(0..2) (representing constraint ((x_00003_00008=5) + (x_00002_00009=5)))
c Both direct and order encoding.
c Var 'aux1895' order represents '0' with '8297'
c Var 'aux1895' direct represents '0' with '8297'
c Var 'aux1895' order represents '1' with '8298'
-8297 8298 0
c Var 'aux1895' direct represents '1' with '8299'
8297 -8298 8299 0
-8299 8298 0
-8299 -8297 0
c Var 'aux1895' direct represents '2' with '-8298'
8297 8299 -8298 0
c Encoding variable: aux1896 with domain: int(0..2) (representing constraint ((x_00002_00008=5) + (x_00003_00009=5)))
c Both direct and order encoding.
c Var 'aux1896' order represents '0' with '8300'
c Var 'aux1896' direct represents '0' with '8300'
c Var 'aux1896' order represents '1' with '8301'
-8300 8301 0
c Var 'aux1896' direct represents '1' with '8302'
8300 -8301 8302 0
-8302 8301 0
-8302 -8300 0
c Var 'aux1896' direct represents '2' with '-8301'
8300 8302 -8301 0
c Encoding variable: aux1897 with domain: int(0..2) (representing constraint ((x_00002_00007=5) + (x_00001_00008=5)))
c Both direct and order encoding.
c Var 'aux1897' order represents '0' with '8303'
c Var 'aux1897' direct represents '0' with '8303'
c Var 'aux1897' order represents '1' with '8304'
-8303 8304 0
c Var 'aux1897' direct represents '1' with '8305'
8303 -8304 8305 0
-8305 8304 0
-8305 -8303 0
c Var 'aux1897' direct represents '2' with '-8304'
8303 8305 -8304 0
c Encoding variable: aux1898 with domain: int(0..2) (representing constraint ((x_00001_00009=5) + (x_00001_00007=5)))
c Both direct and order encoding.
c Var 'aux1898' order represents '0' with '8306'
c Var 'aux1898' direct represents '0' with '8306'
c Var 'aux1898' order represents '1' with '8307'
-8306 8307 0
c Var 'aux1898' direct represents '1' with '8308'
8306 -8307 8308 0
-8308 8307 0
-8308 -8306 0
c Var 'aux1898' direct represents '2' with '-8307'
8306 8308 -8307 0
c Encoding variable: aux1899 with domain: int(0..4) (representing constraint (aux1895 + aux1898))
c Both direct and order encoding.
c Var 'aux1899' order represents '0' with '8309'
c Var 'aux1899' direct represents '0' with '8309'
c Var 'aux1899' order represents '1' with '8310'
-8309 8310 0
c Var 'aux1899' direct represents '1' with '8311'
8309 -8310 8311 0
-8311 8310 0
-8311 -8309 0
c Var 'aux1899' order represents '2' with '8312'
-8310 8312 0
c Var 'aux1899' direct represents '2' with '8313'
8310 -8312 8313 0
-8313 8312 0
-8313 -8310 0
c Var 'aux1899' order represents '3' with '8314'
-8312 8314 0
c Var 'aux1899' direct represents '3' with '8315'
8312 -8314 8315 0
-8315 8314 0
-8315 -8312 0
c Var 'aux1899' direct represents '4' with '-8314'
8309 8311 8313 8315 -8314 0
c Encoding variable: aux1900 with domain: int(0..2) (representing constraint ((x_00003_00008=6) + (x_00002_00009=6)))
c Both direct and order encoding.
c Var 'aux1900' order represents '0' with '8316'
c Var 'aux1900' direct represents '0' with '8316'
c Var 'aux1900' order represents '1' with '8317'
-8316 8317 0
c Var 'aux1900' direct represents '1' with '8318'
8316 -8317 8318 0
-8318 8317 0
-8318 -8316 0
c Var 'aux1900' direct represents '2' with '-8317'
8316 8318 -8317 0
c Encoding variable: aux1901 with domain: int(0..2) (representing constraint ((x_00002_00008=6) + (x_00003_00009=6)))
c Both direct and order encoding.
c Var 'aux1901' order represents '0' with '8319'
c Var 'aux1901' direct represents '0' with '8319'
c Var 'aux1901' order represents '1' with '8320'
-8319 8320 0
c Var 'aux1901' direct represents '1' with '8321'
8319 -8320 8321 0
-8321 8320 0
-8321 -8319 0
c Var 'aux1901' direct represents '2' with '-8320'
8319 8321 -8320 0
c Encoding variable: aux1902 with domain: int(0..2) (representing constraint ((x_00002_00007=6) + (x_00001_00008=6)))
c Both direct and order encoding.
c Var 'aux1902' order represents '0' with '8322'
c Var 'aux1902' direct represents '0' with '8322'
c Var 'aux1902' order represents '1' with '8323'
-8322 8323 0
c Var 'aux1902' direct represents '1' with '8324'
8322 -8323 8324 0
-8324 8323 0
-8324 -8322 0
c Var 'aux1902' direct represents '2' with '-8323'
8322 8324 -8323 0
c Encoding variable: aux1903 with domain: int(0..2) (representing constraint ((x_00001_00009=6) + (x_00001_00007=6)))
c Both direct and order encoding.
c Var 'aux1903' order represents '0' with '8325'
c Var 'aux1903' direct represents '0' with '8325'
c Var 'aux1903' order represents '1' with '8326'
-8325 8326 0
c Var 'aux1903' direct represents '1' with '8327'
8325 -8326 8327 0
-8327 8326 0
-8327 -8325 0
c Var 'aux1903' direct represents '2' with '-8326'
8325 8327 -8326 0
c Encoding variable: aux1904 with domain: int(0..4) (representing constraint (aux1900 + aux1903))
c Both direct and order encoding.
c Var 'aux1904' order represents '0' with '8328'
c Var 'aux1904' direct represents '0' with '8328'
c Var 'aux1904' order represents '1' with '8329'
-8328 8329 0
c Var 'aux1904' direct represents '1' with '8330'
8328 -8329 8330 0
-8330 8329 0
-8330 -8328 0
c Var 'aux1904' order represents '2' with '8331'
-8329 8331 0
c Var 'aux1904' direct represents '2' with '8332'
8329 -8331 8332 0
-8332 8331 0
-8332 -8329 0
c Var 'aux1904' order represents '3' with '8333'
-8331 8333 0
c Var 'aux1904' direct represents '3' with '8334'
8331 -8333 8334 0
-8334 8333 0
-8334 -8331 0
c Var 'aux1904' direct represents '4' with '-8333'
8328 8330 8332 8334 -8333 0
c Encoding variable: aux1905 with domain: int(0..2) (representing constraint ((x_00003_00008=7) + (x_00002_00009=7)))
c Both direct and order encoding.
c Var 'aux1905' order represents '0' with '8335'
c Var 'aux1905' direct represents '0' with '8335'
c Var 'aux1905' order represents '1' with '8336'
-8335 8336 0
c Var 'aux1905' direct represents '1' with '8337'
8335 -8336 8337 0
-8337 8336 0
-8337 -8335 0
c Var 'aux1905' direct represents '2' with '-8336'
8335 8337 -8336 0
c Encoding variable: aux1906 with domain: int(0..2) (representing constraint ((x_00002_00008=7) + (x_00003_00009=7)))
c Both direct and order encoding.
c Var 'aux1906' order represents '0' with '8338'
c Var 'aux1906' direct represents '0' with '8338'
c Var 'aux1906' order represents '1' with '8339'
-8338 8339 0
c Var 'aux1906' direct represents '1' with '8340'
8338 -8339 8340 0
-8340 8339 0
-8340 -8338 0
c Var 'aux1906' direct represents '2' with '-8339'
8338 8340 -8339 0
c Encoding variable: aux1907 with domain: int(0..2) (representing constraint ((x_00002_00007=7) + (x_00001_00008=7)))
c Both direct and order encoding.
c Var 'aux1907' order represents '0' with '8341'
c Var 'aux1907' direct represents '0' with '8341'
c Var 'aux1907' order represents '1' with '8342'
-8341 8342 0
c Var 'aux1907' direct represents '1' with '8343'
8341 -8342 8343 0
-8343 8342 0
-8343 -8341 0
c Var 'aux1907' direct represents '2' with '-8342'
8341 8343 -8342 0
c Encoding variable: aux1908 with domain: int(0..2) (representing constraint ((x_00001_00009=7) + (x_00001_00007=7)))
c Both direct and order encoding.
c Var 'aux1908' order represents '0' with '8344'
c Var 'aux1908' direct represents '0' with '8344'
c Var 'aux1908' order represents '1' with '8345'
-8344 8345 0
c Var 'aux1908' direct represents '1' with '8346'
8344 -8345 8346 0
-8346 8345 0
-8346 -8344 0
c Var 'aux1908' direct represents '2' with '-8345'
8344 8346 -8345 0
c Encoding variable: aux1909 with domain: int(0..4) (representing constraint (aux1905 + aux1908))
c Both direct and order encoding.
c Var 'aux1909' order represents '0' with '8347'
c Var 'aux1909' direct represents '0' with '8347'
c Var 'aux1909' order represents '1' with '8348'
-8347 8348 0
c Var 'aux1909' direct represents '1' with '8349'
8347 -8348 8349 0
-8349 8348 0
-8349 -8347 0
c Var 'aux1909' order represents '2' with '8350'
-8348 8350 0
c Var 'aux1909' direct represents '2' with '8351'
8348 -8350 8351 0
-8351 8350 0
-8351 -8348 0
c Var 'aux1909' order represents '3' with '8352'
-8350 8352 0
c Var 'aux1909' direct represents '3' with '8353'
8350 -8352 8353 0
-8353 8352 0
-8353 -8350 0
c Var 'aux1909' direct represents '4' with '-8352'
8347 8349 8351 8353 -8352 0
c Encoding variable: aux1910 with domain: int(0..2) (representing constraint ((x_00003_00008=8) + (x_00002_00009=8)))
c Both direct and order encoding.
c Var 'aux1910' order represents '0' with '8354'
c Var 'aux1910' direct represents '0' with '8354'
c Var 'aux1910' order represents '1' with '8355'
-8354 8355 0
c Var 'aux1910' direct represents '1' with '8356'
8354 -8355 8356 0
-8356 8355 0
-8356 -8354 0
c Var 'aux1910' direct represents '2' with '-8355'
8354 8356 -8355 0
c Encoding variable: aux1911 with domain: int(0..2) (representing constraint ((x_00002_00008=8) + (x_00003_00009=8)))
c Both direct and order encoding.
c Var 'aux1911' order represents '0' with '8357'
c Var 'aux1911' direct represents '0' with '8357'
c Var 'aux1911' order represents '1' with '8358'
-8357 8358 0
c Var 'aux1911' direct represents '1' with '8359'
8357 -8358 8359 0
-8359 8358 0
-8359 -8357 0
c Var 'aux1911' direct represents '2' with '-8358'
8357 8359 -8358 0
c Encoding variable: aux1912 with domain: int(0..2) (representing constraint ((x_00002_00007=8) + (x_00001_00008=8)))
c Both direct and order encoding.
c Var 'aux1912' order represents '0' with '8360'
c Var 'aux1912' direct represents '0' with '8360'
c Var 'aux1912' order represents '1' with '8361'
-8360 8361 0
c Var 'aux1912' direct represents '1' with '8362'
8360 -8361 8362 0
-8362 8361 0
-8362 -8360 0
c Var 'aux1912' direct represents '2' with '-8361'
8360 8362 -8361 0
c Encoding variable: aux1913 with domain: int(0..2) (representing constraint ((x_00001_00009=8) + (x_00001_00007=8)))
c Both direct and order encoding.
c Var 'aux1913' order represents '0' with '8363'
c Var 'aux1913' direct represents '0' with '8363'
c Var 'aux1913' order represents '1' with '8364'
-8363 8364 0
c Var 'aux1913' direct represents '1' with '8365'
8363 -8364 8365 0
-8365 8364 0
-8365 -8363 0
c Var 'aux1913' direct represents '2' with '-8364'
8363 8365 -8364 0
c Encoding variable: aux1914 with domain: int(0..4) (representing constraint (aux1910 + aux1913))
c Both direct and order encoding.
c Var 'aux1914' order represents '0' with '8366'
c Var 'aux1914' direct represents '0' with '8366'
c Var 'aux1914' order represents '1' with '8367'
-8366 8367 0
c Var 'aux1914' direct represents '1' with '8368'
8366 -8367 8368 0
-8368 8367 0
-8368 -8366 0
c Var 'aux1914' order represents '2' with '8369'
-8367 8369 0
c Var 'aux1914' direct represents '2' with '8370'
8367 -8369 8370 0
-8370 8369 0
-8370 -8367 0
c Var 'aux1914' order represents '3' with '8371'
-8369 8371 0
c Var 'aux1914' direct represents '3' with '8372'
8369 -8371 8372 0
-8372 8371 0
-8372 -8369 0
c Var 'aux1914' direct represents '4' with '-8371'
8366 8368 8370 8372 -8371 0
c Encoding variable: aux1915 with domain: int(0..2) (representing constraint ((x_00003_00008=9) + (x_00002_00009=9)))
c Both direct and order encoding.
c Var 'aux1915' order represents '0' with '8373'
c Var 'aux1915' direct represents '0' with '8373'
c Var 'aux1915' order represents '1' with '8374'
-8373 8374 0
c Var 'aux1915' direct represents '1' with '8375'
8373 -8374 8375 0
-8375 8374 0
-8375 -8373 0
c Var 'aux1915' direct represents '2' with '-8374'
8373 8375 -8374 0
c Encoding variable: aux1916 with domain: int(0..2) (representing constraint ((x_00002_00008=9) + (x_00003_00009=9)))
c Both direct and order encoding.
c Var 'aux1916' order represents '0' with '8376'
c Var 'aux1916' direct represents '0' with '8376'
c Var 'aux1916' order represents '1' with '8377'
-8376 8377 0
c Var 'aux1916' direct represents '1' with '8378'
8376 -8377 8378 0
-8378 8377 0
-8378 -8376 0
c Var 'aux1916' direct represents '2' with '-8377'
8376 8378 -8377 0
c Encoding variable: aux1917 with domain: int(0..2) (representing constraint ((x_00002_00007=9) + (x_00001_00008=9)))
c Both direct and order encoding.
c Var 'aux1917' order represents '0' with '8379'
c Var 'aux1917' direct represents '0' with '8379'
c Var 'aux1917' order represents '1' with '8380'
-8379 8380 0
c Var 'aux1917' direct represents '1' with '8381'
8379 -8380 8381 0
-8381 8380 0
-8381 -8379 0
c Var 'aux1917' direct represents '2' with '-8380'
8379 8381 -8380 0
c Encoding variable: aux1918 with domain: int(0..2) (representing constraint ((x_00001_00009=9) + (x_00001_00007=9)))
c Both direct and order encoding.
c Var 'aux1918' order represents '0' with '8382'
c Var 'aux1918' direct represents '0' with '8382'
c Var 'aux1918' order represents '1' with '8383'
-8382 8383 0
c Var 'aux1918' direct represents '1' with '8384'
8382 -8383 8384 0
-8384 8383 0
-8384 -8382 0
c Var 'aux1918' direct represents '2' with '-8383'
8382 8384 -8383 0
c Encoding variable: aux1919 with domain: int(0..4) (representing constraint (aux1915 + aux1918))
c Both direct and order encoding.
c Var 'aux1919' order represents '0' with '8385'
c Var 'aux1919' direct represents '0' with '8385'
c Var 'aux1919' order represents '1' with '8386'
-8385 8386 0
c Var 'aux1919' direct represents '1' with '8387'
8385 -8386 8387 0
-8387 8386 0
-8387 -8385 0
c Var 'aux1919' order represents '2' with '8388'
-8386 8388 0
c Var 'aux1919' direct represents '2' with '8389'
8386 -8388 8389 0
-8389 8388 0
-8389 -8386 0
c Var 'aux1919' order represents '3' with '8390'
-8388 8390 0
c Var 'aux1919' direct represents '3' with '8391'
8388 -8390 8391 0
-8391 8390 0
-8391 -8388 0
c Var 'aux1919' direct represents '4' with '-8390'
8385 8387 8389 8391 -8390 0
c Encoding variable: aux1920 with domain: int(0..2) (representing constraint ((x_00003_00003=1) + (x_00002_00004=1)))
c Both direct and order encoding.
c Var 'aux1920' order represents '0' with '8392'
c Var 'aux1920' direct represents '0' with '8392'
c Var 'aux1920' order represents '1' with '8393'
-8392 8393 0
c Var 'aux1920' direct represents '1' with '8394'
8392 -8393 8394 0
-8394 8393 0
-8394 -8392 0
c Var 'aux1920' direct represents '2' with '-8393'
8392 8394 -8393 0
c Encoding variable: aux1921 with domain: int(0..2) (representing constraint ((x_00002_00003=1) + (x_00003_00004=1)))
c Both direct and order encoding.
c Var 'aux1921' order represents '0' with '8395'
c Var 'aux1921' direct represents '0' with '8395'
c Var 'aux1921' order represents '1' with '8396'
-8395 8396 0
c Var 'aux1921' direct represents '1' with '8397'
8395 -8396 8397 0
-8397 8396 0
-8397 -8395 0
c Var 'aux1921' direct represents '2' with '-8396'
8395 8397 -8396 0
c Encoding variable: aux1922 with domain: int(0..2) (representing constraint ((x_00003_00003=2) + (x_00002_00004=2)))
c Both direct and order encoding.
c Var 'aux1922' order represents '0' with '8398'
c Var 'aux1922' direct represents '0' with '8398'
c Var 'aux1922' order represents '1' with '8399'
-8398 8399 0
c Var 'aux1922' direct represents '1' with '8400'
8398 -8399 8400 0
-8400 8399 0
-8400 -8398 0
c Var 'aux1922' direct represents '2' with '-8399'
8398 8400 -8399 0
c Encoding variable: aux1923 with domain: int(0..2) (representing constraint ((x_00002_00003=2) + (x_00003_00004=2)))
c Both direct and order encoding.
c Var 'aux1923' order represents '0' with '8401'
c Var 'aux1923' direct represents '0' with '8401'
c Var 'aux1923' order represents '1' with '8402'
-8401 8402 0
c Var 'aux1923' direct represents '1' with '8403'
8401 -8402 8403 0
-8403 8402 0
-8403 -8401 0
c Var 'aux1923' direct represents '2' with '-8402'
8401 8403 -8402 0
c Encoding variable: aux1924 with domain: int(0..2) (representing constraint ((x_00003_00003=3) + (x_00002_00004=3)))
c Both direct and order encoding.
c Var 'aux1924' order represents '0' with '8404'
c Var 'aux1924' direct represents '0' with '8404'
c Var 'aux1924' order represents '1' with '8405'
-8404 8405 0
c Var 'aux1924' direct represents '1' with '8406'
8404 -8405 8406 0
-8406 8405 0
-8406 -8404 0
c Var 'aux1924' direct represents '2' with '-8405'
8404 8406 -8405 0
c Encoding variable: aux1925 with domain: int(0..2) (representing constraint ((x_00002_00003=3) + (x_00003_00004=3)))
c Both direct and order encoding.
c Var 'aux1925' order represents '0' with '8407'
c Var 'aux1925' direct represents '0' with '8407'
c Var 'aux1925' order represents '1' with '8408'
-8407 8408 0
c Var 'aux1925' direct represents '1' with '8409'
8407 -8408 8409 0
-8409 8408 0
-8409 -8407 0
c Var 'aux1925' direct represents '2' with '-8408'
8407 8409 -8408 0
c Encoding variable: aux1926 with domain: int(0..2) (representing constraint ((x_00003_00003=4) + (x_00002_00004=4)))
c Both direct and order encoding.
c Var 'aux1926' order represents '0' with '8410'
c Var 'aux1926' direct represents '0' with '8410'
c Var 'aux1926' order represents '1' with '8411'
-8410 8411 0
c Var 'aux1926' direct represents '1' with '8412'
8410 -8411 8412 0
-8412 8411 0
-8412 -8410 0
c Var 'aux1926' direct represents '2' with '-8411'
8410 8412 -8411 0
c Encoding variable: aux1927 with domain: int(0..2) (representing constraint ((x_00002_00003=4) + (x_00003_00004=4)))
c Both direct and order encoding.
c Var 'aux1927' order represents '0' with '8413'
c Var 'aux1927' direct represents '0' with '8413'
c Var 'aux1927' order represents '1' with '8414'
-8413 8414 0
c Var 'aux1927' direct represents '1' with '8415'
8413 -8414 8415 0
-8415 8414 0
-8415 -8413 0
c Var 'aux1927' direct represents '2' with '-8414'
8413 8415 -8414 0
c Encoding variable: aux1928 with domain: int(0..2) (representing constraint ((x_00003_00003=5) + (x_00002_00004=5)))
c Both direct and order encoding.
c Var 'aux1928' order represents '0' with '8416'
c Var 'aux1928' direct represents '0' with '8416'
c Var 'aux1928' order represents '1' with '8417'
-8416 8417 0
c Var 'aux1928' direct represents '1' with '8418'
8416 -8417 8418 0
-8418 8417 0
-8418 -8416 0
c Var 'aux1928' direct represents '2' with '-8417'
8416 8418 -8417 0
c Encoding variable: aux1929 with domain: int(0..2) (representing constraint ((x_00002_00003=5) + (x_00003_00004=5)))
c Both direct and order encoding.
c Var 'aux1929' order represents '0' with '8419'
c Var 'aux1929' direct represents '0' with '8419'
c Var 'aux1929' order represents '1' with '8420'
-8419 8420 0
c Var 'aux1929' direct represents '1' with '8421'
8419 -8420 8421 0
-8421 8420 0
-8421 -8419 0
c Var 'aux1929' direct represents '2' with '-8420'
8419 8421 -8420 0
c Encoding variable: aux1930 with domain: int(0..2) (representing constraint ((x_00003_00003=6) + (x_00002_00004=6)))
c Both direct and order encoding.
c Var 'aux1930' order represents '0' with '8422'
c Var 'aux1930' direct represents '0' with '8422'
c Var 'aux1930' order represents '1' with '8423'
-8422 8423 0
c Var 'aux1930' direct represents '1' with '8424'
8422 -8423 8424 0
-8424 8423 0
-8424 -8422 0
c Var 'aux1930' direct represents '2' with '-8423'
8422 8424 -8423 0
c Encoding variable: aux1931 with domain: int(0..2) (representing constraint ((x_00002_00003=6) + (x_00003_00004=6)))
c Both direct and order encoding.
c Var 'aux1931' order represents '0' with '8425'
c Var 'aux1931' direct represents '0' with '8425'
c Var 'aux1931' order represents '1' with '8426'
-8425 8426 0
c Var 'aux1931' direct represents '1' with '8427'
8425 -8426 8427 0
-8427 8426 0
-8427 -8425 0
c Var 'aux1931' direct represents '2' with '-8426'
8425 8427 -8426 0
c Encoding variable: aux1932 with domain: int(0..2) (representing constraint ((x_00003_00003=7) + (x_00002_00004=7)))
c Both direct and order encoding.
c Var 'aux1932' order represents '0' with '8428'
c Var 'aux1932' direct represents '0' with '8428'
c Var 'aux1932' order represents '1' with '8429'
-8428 8429 0
c Var 'aux1932' direct represents '1' with '8430'
8428 -8429 8430 0
-8430 8429 0
-8430 -8428 0
c Var 'aux1932' direct represents '2' with '-8429'
8428 8430 -8429 0
c Encoding variable: aux1933 with domain: int(0..2) (representing constraint ((x_00002_00003=7) + (x_00003_00004=7)))
c Both direct and order encoding.
c Var 'aux1933' order represents '0' with '8431'
c Var 'aux1933' direct represents '0' with '8431'
c Var 'aux1933' order represents '1' with '8432'
-8431 8432 0
c Var 'aux1933' direct represents '1' with '8433'
8431 -8432 8433 0
-8433 8432 0
-8433 -8431 0
c Var 'aux1933' direct represents '2' with '-8432'
8431 8433 -8432 0
c Encoding variable: aux1934 with domain: int(0..2) (representing constraint ((x_00003_00003=8) + (x_00002_00004=8)))
c Both direct and order encoding.
c Var 'aux1934' order represents '0' with '8434'
c Var 'aux1934' direct represents '0' with '8434'
c Var 'aux1934' order represents '1' with '8435'
-8434 8435 0
c Var 'aux1934' direct represents '1' with '8436'
8434 -8435 8436 0
-8436 8435 0
-8436 -8434 0
c Var 'aux1934' direct represents '2' with '-8435'
8434 8436 -8435 0
c Encoding variable: aux1935 with domain: int(0..2) (representing constraint ((x_00002_00003=8) + (x_00003_00004=8)))
c Both direct and order encoding.
c Var 'aux1935' order represents '0' with '8437'
c Var 'aux1935' direct represents '0' with '8437'
c Var 'aux1935' order represents '1' with '8438'
-8437 8438 0
c Var 'aux1935' direct represents '1' with '8439'
8437 -8438 8439 0
-8439 8438 0
-8439 -8437 0
c Var 'aux1935' direct represents '2' with '-8438'
8437 8439 -8438 0
c Encoding variable: aux1936 with domain: int(0..2) (representing constraint ((x_00003_00003=9) + (x_00002_00004=9)))
c Both direct and order encoding.
c Var 'aux1936' order represents '0' with '8440'
c Var 'aux1936' direct represents '0' with '8440'
c Var 'aux1936' order represents '1' with '8441'
-8440 8441 0
c Var 'aux1936' direct represents '1' with '8442'
8440 -8441 8442 0
-8442 8441 0
-8442 -8440 0
c Var 'aux1936' direct represents '2' with '-8441'
8440 8442 -8441 0
c Encoding variable: aux1937 with domain: int(0..2) (representing constraint ((x_00002_00003=9) + (x_00003_00004=9)))
c Both direct and order encoding.
c Var 'aux1937' order represents '0' with '8443'
c Var 'aux1937' direct represents '0' with '8443'
c Var 'aux1937' order represents '1' with '8444'
-8443 8444 0
c Var 'aux1937' direct represents '1' with '8445'
8443 -8444 8445 0
-8445 8444 0
-8445 -8443 0
c Var 'aux1937' direct represents '2' with '-8444'
8443 8445 -8444 0
c Encoding variable: aux1938 with domain: int(0..2) (representing constraint ((x_00003_00005=1) + (x_00005_00007=1)))
c Both direct and order encoding.
c Var 'aux1938' order represents '0' with '8446'
c Var 'aux1938' direct represents '0' with '8446'
c Var 'aux1938' order represents '1' with '8447'
-8446 8447 0
c Var 'aux1938' direct represents '1' with '8448'
8446 -8447 8448 0
-8448 8447 0
-8448 -8446 0
c Var 'aux1938' direct represents '2' with '-8447'
8446 8448 -8447 0
c Encoding variable: aux1939 with domain: int(0..2) (representing constraint ((x_00005_00006=1) + (x_00004_00005=1)))
c Both direct and order encoding.
c Var 'aux1939' order represents '0' with '8449'
c Var 'aux1939' direct represents '0' with '8449'
c Var 'aux1939' order represents '1' with '8450'
-8449 8450 0
c Var 'aux1939' direct represents '1' with '8451'
8449 -8450 8451 0
-8451 8450 0
-8451 -8449 0
c Var 'aux1939' direct represents '2' with '-8450'
8449 8451 -8450 0
c Encoding variable: aux1940 with domain: int(0..2) (representing constraint ((x_00003_00005=2) + (x_00005_00007=2)))
c Both direct and order encoding.
c Var 'aux1940' order represents '0' with '8452'
c Var 'aux1940' direct represents '0' with '8452'
c Var 'aux1940' order represents '1' with '8453'
-8452 8453 0
c Var 'aux1940' direct represents '1' with '8454'
8452 -8453 8454 0
-8454 8453 0
-8454 -8452 0
c Var 'aux1940' direct represents '2' with '-8453'
8452 8454 -8453 0
c Encoding variable: aux1941 with domain: int(0..2) (representing constraint ((x_00005_00006=2) + (x_00004_00005=2)))
c Both direct and order encoding.
c Var 'aux1941' order represents '0' with '8455'
c Var 'aux1941' direct represents '0' with '8455'
c Var 'aux1941' order represents '1' with '8456'
-8455 8456 0
c Var 'aux1941' direct represents '1' with '8457'
8455 -8456 8457 0
-8457 8456 0
-8457 -8455 0
c Var 'aux1941' direct represents '2' with '-8456'
8455 8457 -8456 0
c Encoding variable: aux1942 with domain: int(0..2) (representing constraint ((x_00003_00005=3) + (x_00005_00007=3)))
c Both direct and order encoding.
c Var 'aux1942' order represents '0' with '8458'
c Var 'aux1942' direct represents '0' with '8458'
c Var 'aux1942' order represents '1' with '8459'
-8458 8459 0
c Var 'aux1942' direct represents '1' with '8460'
8458 -8459 8460 0
-8460 8459 0
-8460 -8458 0
c Var 'aux1942' direct represents '2' with '-8459'
8458 8460 -8459 0
c Encoding variable: aux1943 with domain: int(0..2) (representing constraint ((x_00005_00006=3) + (x_00004_00005=3)))
c Both direct and order encoding.
c Var 'aux1943' order represents '0' with '8461'
c Var 'aux1943' direct represents '0' with '8461'
c Var 'aux1943' order represents '1' with '8462'
-8461 8462 0
c Var 'aux1943' direct represents '1' with '8463'
8461 -8462 8463 0
-8463 8462 0
-8463 -8461 0
c Var 'aux1943' direct represents '2' with '-8462'
8461 8463 -8462 0
c Encoding variable: aux1944 with domain: int(0..2) (representing constraint ((x_00003_00005=4) + (x_00005_00007=4)))
c Both direct and order encoding.
c Var 'aux1944' order represents '0' with '8464'
c Var 'aux1944' direct represents '0' with '8464'
c Var 'aux1944' order represents '1' with '8465'
-8464 8465 0
c Var 'aux1944' direct represents '1' with '8466'
8464 -8465 8466 0
-8466 8465 0
-8466 -8464 0
c Var 'aux1944' direct represents '2' with '-8465'
8464 8466 -8465 0
c Encoding variable: aux1945 with domain: int(0..2) (representing constraint ((x_00005_00006=4) + (x_00004_00005=4)))
c Both direct and order encoding.
c Var 'aux1945' order represents '0' with '8467'
c Var 'aux1945' direct represents '0' with '8467'
c Var 'aux1945' order represents '1' with '8468'
-8467 8468 0
c Var 'aux1945' direct represents '1' with '8469'
8467 -8468 8469 0
-8469 8468 0
-8469 -8467 0
c Var 'aux1945' direct represents '2' with '-8468'
8467 8469 -8468 0
c Encoding variable: aux1946 with domain: int(0..2) (representing constraint ((x_00003_00005=5) + (x_00005_00007=5)))
c Both direct and order encoding.
c Var 'aux1946' order represents '0' with '8470'
c Var 'aux1946' direct represents '0' with '8470'
c Var 'aux1946' order represents '1' with '8471'
-8470 8471 0
c Var 'aux1946' direct represents '1' with '8472'
8470 -8471 8472 0
-8472 8471 0
-8472 -8470 0
c Var 'aux1946' direct represents '2' with '-8471'
8470 8472 -8471 0
c Encoding variable: aux1947 with domain: int(0..2) (representing constraint ((x_00005_00006=5) + (x_00004_00005=5)))
c Both direct and order encoding.
c Var 'aux1947' order represents '0' with '8473'
c Var 'aux1947' direct represents '0' with '8473'
c Var 'aux1947' order represents '1' with '8474'
-8473 8474 0
c Var 'aux1947' direct represents '1' with '8475'
8473 -8474 8475 0
-8475 8474 0
-8475 -8473 0
c Var 'aux1947' direct represents '2' with '-8474'
8473 8475 -8474 0
c Encoding variable: aux1948 with domain: int(0..2) (representing constraint ((x_00003_00005=6) + (x_00005_00007=6)))
c Both direct and order encoding.
c Var 'aux1948' order represents '0' with '8476'
c Var 'aux1948' direct represents '0' with '8476'
c Var 'aux1948' order represents '1' with '8477'
-8476 8477 0
c Var 'aux1948' direct represents '1' with '8478'
8476 -8477 8478 0
-8478 8477 0
-8478 -8476 0
c Var 'aux1948' direct represents '2' with '-8477'
8476 8478 -8477 0
c Encoding variable: aux1949 with domain: int(0..2) (representing constraint ((x_00005_00006=6) + (x_00004_00005=6)))
c Both direct and order encoding.
c Var 'aux1949' order represents '0' with '8479'
c Var 'aux1949' direct represents '0' with '8479'
c Var 'aux1949' order represents '1' with '8480'
-8479 8480 0
c Var 'aux1949' direct represents '1' with '8481'
8479 -8480 8481 0
-8481 8480 0
-8481 -8479 0
c Var 'aux1949' direct represents '2' with '-8480'
8479 8481 -8480 0
c Encoding variable: aux1950 with domain: int(0..2) (representing constraint ((x_00003_00005=7) + (x_00005_00007=7)))
c Both direct and order encoding.
c Var 'aux1950' order represents '0' with '8482'
c Var 'aux1950' direct represents '0' with '8482'
c Var 'aux1950' order represents '1' with '8483'
-8482 8483 0
c Var 'aux1950' direct represents '1' with '8484'
8482 -8483 8484 0
-8484 8483 0
-8484 -8482 0
c Var 'aux1950' direct represents '2' with '-8483'
8482 8484 -8483 0
c Encoding variable: aux1951 with domain: int(0..2) (representing constraint ((x_00005_00006=7) + (x_00004_00005=7)))
c Both direct and order encoding.
c Var 'aux1951' order represents '0' with '8485'
c Var 'aux1951' direct represents '0' with '8485'
c Var 'aux1951' order represents '1' with '8486'
-8485 8486 0
c Var 'aux1951' direct represents '1' with '8487'
8485 -8486 8487 0
-8487 8486 0
-8487 -8485 0
c Var 'aux1951' direct represents '2' with '-8486'
8485 8487 -8486 0
c Encoding variable: aux1952 with domain: int(0..2) (representing constraint ((x_00003_00005=8) + (x_00005_00007=8)))
c Both direct and order encoding.
c Var 'aux1952' order represents '0' with '8488'
c Var 'aux1952' direct represents '0' with '8488'
c Var 'aux1952' order represents '1' with '8489'
-8488 8489 0
c Var 'aux1952' direct represents '1' with '8490'
8488 -8489 8490 0
-8490 8489 0
-8490 -8488 0
c Var 'aux1952' direct represents '2' with '-8489'
8488 8490 -8489 0
c Encoding variable: aux1953 with domain: int(0..2) (representing constraint ((x_00005_00006=8) + (x_00004_00005=8)))
c Both direct and order encoding.
c Var 'aux1953' order represents '0' with '8491'
c Var 'aux1953' direct represents '0' with '8491'
c Var 'aux1953' order represents '1' with '8492'
-8491 8492 0
c Var 'aux1953' direct represents '1' with '8493'
8491 -8492 8493 0
-8493 8492 0
-8493 -8491 0
c Var 'aux1953' direct represents '2' with '-8492'
8491 8493 -8492 0
c Encoding variable: aux1954 with domain: int(0..2) (representing constraint ((x_00003_00005=9) + (x_00005_00007=9)))
c Both direct and order encoding.
c Var 'aux1954' order represents '0' with '8494'
c Var 'aux1954' direct represents '0' with '8494'
c Var 'aux1954' order represents '1' with '8495'
-8494 8495 0
c Var 'aux1954' direct represents '1' with '8496'
8494 -8495 8496 0
-8496 8495 0
-8496 -8494 0
c Var 'aux1954' direct represents '2' with '-8495'
8494 8496 -8495 0
c Encoding variable: aux1955 with domain: int(0..2) (representing constraint ((x_00005_00006=9) + (x_00004_00005=9)))
c Both direct and order encoding.
c Var 'aux1955' order represents '0' with '8497'
c Var 'aux1955' direct represents '0' with '8497'
c Var 'aux1955' order represents '1' with '8498'
-8497 8498 0
c Var 'aux1955' direct represents '1' with '8499'
8497 -8498 8499 0
-8499 8498 0
-8499 -8497 0
c Var 'aux1955' direct represents '2' with '-8498'
8497 8499 -8498 0
c Encoding variable: aux1956 with domain: int(0..2) (representing constraint ((x_00004_00001=1) + (x_00005_00001=1)))
c Both direct and order encoding.
c Var 'aux1956' order represents '0' with '8500'
c Var 'aux1956' direct represents '0' with '8500'
c Var 'aux1956' order represents '1' with '8501'
-8500 8501 0
c Var 'aux1956' direct represents '1' with '8502'
8500 -8501 8502 0
-8502 8501 0
-8502 -8500 0
c Var 'aux1956' direct represents '2' with '-8501'
8500 8502 -8501 0
c Encoding variable: aux1957 with domain: int(0..2) (representing constraint ((x_00004_00001=2) + (x_00005_00001=2)))
c Both direct and order encoding.
c Var 'aux1957' order represents '0' with '8503'
c Var 'aux1957' direct represents '0' with '8503'
c Var 'aux1957' order represents '1' with '8504'
-8503 8504 0
c Var 'aux1957' direct represents '1' with '8505'
8503 -8504 8505 0
-8505 8504 0
-8505 -8503 0
c Var 'aux1957' direct represents '2' with '-8504'
8503 8505 -8504 0
c Encoding variable: aux1958 with domain: int(0..2) (representing constraint ((x_00004_00001=3) + (x_00005_00001=3)))
c Both direct and order encoding.
c Var 'aux1958' order represents '0' with '8506'
c Var 'aux1958' direct represents '0' with '8506'
c Var 'aux1958' order represents '1' with '8507'
-8506 8507 0
c Var 'aux1958' direct represents '1' with '8508'
8506 -8507 8508 0
-8508 8507 0
-8508 -8506 0
c Var 'aux1958' direct represents '2' with '-8507'
8506 8508 -8507 0
c Encoding variable: aux1959 with domain: int(0..2) (representing constraint ((x_00004_00001=4) + (x_00005_00001=4)))
c Both direct and order encoding.
c Var 'aux1959' order represents '0' with '8509'
c Var 'aux1959' direct represents '0' with '8509'
c Var 'aux1959' order represents '1' with '8510'
-8509 8510 0
c Var 'aux1959' direct represents '1' with '8511'
8509 -8510 8511 0
-8511 8510 0
-8511 -8509 0
c Var 'aux1959' direct represents '2' with '-8510'
8509 8511 -8510 0
c Encoding variable: aux1960 with domain: int(0..2) (representing constraint ((x_00004_00001=5) + (x_00005_00001=5)))
c Both direct and order encoding.
c Var 'aux1960' order represents '0' with '8512'
c Var 'aux1960' direct represents '0' with '8512'
c Var 'aux1960' order represents '1' with '8513'
-8512 8513 0
c Var 'aux1960' direct represents '1' with '8514'
8512 -8513 8514 0
-8514 8513 0
-8514 -8512 0
c Var 'aux1960' direct represents '2' with '-8513'
8512 8514 -8513 0
c Encoding variable: aux1961 with domain: int(0..2) (representing constraint ((x_00004_00001=6) + (x_00005_00001=6)))
c Both direct and order encoding.
c Var 'aux1961' order represents '0' with '8515'
c Var 'aux1961' direct represents '0' with '8515'
c Var 'aux1961' order represents '1' with '8516'
-8515 8516 0
c Var 'aux1961' direct represents '1' with '8517'
8515 -8516 8517 0
-8517 8516 0
-8517 -8515 0
c Var 'aux1961' direct represents '2' with '-8516'
8515 8517 -8516 0
c Encoding variable: aux1962 with domain: int(0..2) (representing constraint ((x_00004_00001=7) + (x_00005_00001=7)))
c Both direct and order encoding.
c Var 'aux1962' order represents '0' with '8518'
c Var 'aux1962' direct represents '0' with '8518'
c Var 'aux1962' order represents '1' with '8519'
-8518 8519 0
c Var 'aux1962' direct represents '1' with '8520'
8518 -8519 8520 0
-8520 8519 0
-8520 -8518 0
c Var 'aux1962' direct represents '2' with '-8519'
8518 8520 -8519 0
c Encoding variable: aux1963 with domain: int(0..2) (representing constraint ((x_00004_00001=8) + (x_00005_00001=8)))
c Both direct and order encoding.
c Var 'aux1963' order represents '0' with '8521'
c Var 'aux1963' direct represents '0' with '8521'
c Var 'aux1963' order represents '1' with '8522'
-8521 8522 0
c Var 'aux1963' direct represents '1' with '8523'
8521 -8522 8523 0
-8523 8522 0
-8523 -8521 0
c Var 'aux1963' direct represents '2' with '-8522'
8521 8523 -8522 0
c Encoding variable: aux1964 with domain: int(0..2) (representing constraint ((x_00004_00001=9) + (x_00005_00001=9)))
c Both direct and order encoding.
c Var 'aux1964' order represents '0' with '8524'
c Var 'aux1964' direct represents '0' with '8524'
c Var 'aux1964' order represents '1' with '8525'
-8524 8525 0
c Var 'aux1964' direct represents '1' with '8526'
8524 -8525 8526 0
-8526 8525 0
-8526 -8524 0
c Var 'aux1964' direct represents '2' with '-8525'
8524 8526 -8525 0
c Encoding variable: aux1965 with domain: int(0..2) (representing constraint ((x_00006_00005=1) + (x_00005_00005=1)))
c Both direct and order encoding.
c Var 'aux1965' order represents '0' with '8527'
c Var 'aux1965' direct represents '0' with '8527'
c Var 'aux1965' order represents '1' with '8528'
-8527 8528 0
c Var 'aux1965' direct represents '1' with '8529'
8527 -8528 8529 0
-8529 8528 0
-8529 -8527 0
c Var 'aux1965' direct represents '2' with '-8528'
8527 8529 -8528 0
c Encoding variable: aux1966 with domain: int(0..2) (representing constraint ((x_00005_00004=1) + (x_00007_00005=1)))
c Both direct and order encoding.
c Var 'aux1966' order represents '0' with '8530'
c Var 'aux1966' direct represents '0' with '8530'
c Var 'aux1966' order represents '1' with '8531'
-8530 8531 0
c Var 'aux1966' direct represents '1' with '8532'
8530 -8531 8532 0
-8532 8531 0
-8532 -8530 0
c Var 'aux1966' direct represents '2' with '-8531'
8530 8532 -8531 0
c Encoding variable: aux1967 with domain: int(0..2) (representing constraint ((x_00006_00005=2) + (x_00005_00005=2)))
c Both direct and order encoding.
c Var 'aux1967' order represents '0' with '8533'
c Var 'aux1967' direct represents '0' with '8533'
c Var 'aux1967' order represents '1' with '8534'
-8533 8534 0
c Var 'aux1967' direct represents '1' with '8535'
8533 -8534 8535 0
-8535 8534 0
-8535 -8533 0
c Var 'aux1967' direct represents '2' with '-8534'
8533 8535 -8534 0
c Encoding variable: aux1968 with domain: int(0..2) (representing constraint ((x_00005_00004=2) + (x_00007_00005=2)))
c Both direct and order encoding.
c Var 'aux1968' order represents '0' with '8536'
c Var 'aux1968' direct represents '0' with '8536'
c Var 'aux1968' order represents '1' with '8537'
-8536 8537 0
c Var 'aux1968' direct represents '1' with '8538'
8536 -8537 8538 0
-8538 8537 0
-8538 -8536 0
c Var 'aux1968' direct represents '2' with '-8537'
8536 8538 -8537 0
c Encoding variable: aux1969 with domain: int(0..2) (representing constraint ((x_00006_00005=3) + (x_00005_00005=3)))
c Both direct and order encoding.
c Var 'aux1969' order represents '0' with '8539'
c Var 'aux1969' direct represents '0' with '8539'
c Var 'aux1969' order represents '1' with '8540'
-8539 8540 0
c Var 'aux1969' direct represents '1' with '8541'
8539 -8540 8541 0
-8541 8540 0
-8541 -8539 0
c Var 'aux1969' direct represents '2' with '-8540'
8539 8541 -8540 0
c Encoding variable: aux1970 with domain: int(0..2) (representing constraint ((x_00005_00004=3) + (x_00007_00005=3)))
c Both direct and order encoding.
c Var 'aux1970' order represents '0' with '8542'
c Var 'aux1970' direct represents '0' with '8542'
c Var 'aux1970' order represents '1' with '8543'
-8542 8543 0
c Var 'aux1970' direct represents '1' with '8544'
8542 -8543 8544 0
-8544 8543 0
-8544 -8542 0
c Var 'aux1970' direct represents '2' with '-8543'
8542 8544 -8543 0
c Encoding variable: aux1971 with domain: int(0..2) (representing constraint ((x_00006_00005=4) + (x_00005_00005=4)))
c Both direct and order encoding.
c Var 'aux1971' order represents '0' with '8545'
c Var 'aux1971' direct represents '0' with '8545'
c Var 'aux1971' order represents '1' with '8546'
-8545 8546 0
c Var 'aux1971' direct represents '1' with '8547'
8545 -8546 8547 0
-8547 8546 0
-8547 -8545 0
c Var 'aux1971' direct represents '2' with '-8546'
8545 8547 -8546 0
c Encoding variable: aux1972 with domain: int(0..2) (representing constraint ((x_00005_00004=4) + (x_00007_00005=4)))
c Both direct and order encoding.
c Var 'aux1972' order represents '0' with '8548'
c Var 'aux1972' direct represents '0' with '8548'
c Var 'aux1972' order represents '1' with '8549'
-8548 8549 0
c Var 'aux1972' direct represents '1' with '8550'
8548 -8549 8550 0
-8550 8549 0
-8550 -8548 0
c Var 'aux1972' direct represents '2' with '-8549'
8548 8550 -8549 0
c Encoding variable: aux1973 with domain: int(0..2) (representing constraint ((x_00006_00005=5) + (x_00005_00005=5)))
c Both direct and order encoding.
c Var 'aux1973' order represents '0' with '8551'
c Var 'aux1973' direct represents '0' with '8551'
c Var 'aux1973' order represents '1' with '8552'
-8551 8552 0
c Var 'aux1973' direct represents '1' with '8553'
8551 -8552 8553 0
-8553 8552 0
-8553 -8551 0
c Var 'aux1973' direct represents '2' with '-8552'
8551 8553 -8552 0
c Encoding variable: aux1974 with domain: int(0..2) (representing constraint ((x_00005_00004=5) + (x_00007_00005=5)))
c Both direct and order encoding.
c Var 'aux1974' order represents '0' with '8554'
c Var 'aux1974' direct represents '0' with '8554'
c Var 'aux1974' order represents '1' with '8555'
-8554 8555 0
c Var 'aux1974' direct represents '1' with '8556'
8554 -8555 8556 0
-8556 8555 0
-8556 -8554 0
c Var 'aux1974' direct represents '2' with '-8555'
8554 8556 -8555 0
c Encoding variable: aux1975 with domain: int(0..2) (representing constraint ((x_00006_00005=6) + (x_00005_00005=6)))
c Both direct and order encoding.
c Var 'aux1975' order represents '0' with '8557'
c Var 'aux1975' direct represents '0' with '8557'
c Var 'aux1975' order represents '1' with '8558'
-8557 8558 0
c Var 'aux1975' direct represents '1' with '8559'
8557 -8558 8559 0
-8559 8558 0
-8559 -8557 0
c Var 'aux1975' direct represents '2' with '-8558'
8557 8559 -8558 0
c Encoding variable: aux1976 with domain: int(0..2) (representing constraint ((x_00005_00004=6) + (x_00007_00005=6)))
c Both direct and order encoding.
c Var 'aux1976' order represents '0' with '8560'
c Var 'aux1976' direct represents '0' with '8560'
c Var 'aux1976' order represents '1' with '8561'
-8560 8561 0
c Var 'aux1976' direct represents '1' with '8562'
8560 -8561 8562 0
-8562 8561 0
-8562 -8560 0
c Var 'aux1976' direct represents '2' with '-8561'
8560 8562 -8561 0
c Encoding variable: aux1977 with domain: int(0..2) (representing constraint ((x_00006_00005=7) + (x_00005_00005=7)))
c Both direct and order encoding.
c Var 'aux1977' order represents '0' with '8563'
c Var 'aux1977' direct represents '0' with '8563'
c Var 'aux1977' order represents '1' with '8564'
-8563 8564 0
c Var 'aux1977' direct represents '1' with '8565'
8563 -8564 8565 0
-8565 8564 0
-8565 -8563 0
c Var 'aux1977' direct represents '2' with '-8564'
8563 8565 -8564 0
c Encoding variable: aux1978 with domain: int(0..2) (representing constraint ((x_00005_00004=7) + (x_00007_00005=7)))
c Both direct and order encoding.
c Var 'aux1978' order represents '0' with '8566'
c Var 'aux1978' direct represents '0' with '8566'
c Var 'aux1978' order represents '1' with '8567'
-8566 8567 0
c Var 'aux1978' direct represents '1' with '8568'
8566 -8567 8568 0
-8568 8567 0
-8568 -8566 0
c Var 'aux1978' direct represents '2' with '-8567'
8566 8568 -8567 0
c Encoding variable: aux1979 with domain: int(0..2) (representing constraint ((x_00006_00005=8) + (x_00005_00005=8)))
c Both direct and order encoding.
c Var 'aux1979' order represents '0' with '8569'
c Var 'aux1979' direct represents '0' with '8569'
c Var 'aux1979' order represents '1' with '8570'
-8569 8570 0
c Var 'aux1979' direct represents '1' with '8571'
8569 -8570 8571 0
-8571 8570 0
-8571 -8569 0
c Var 'aux1979' direct represents '2' with '-8570'
8569 8571 -8570 0
c Encoding variable: aux1980 with domain: int(0..2) (representing constraint ((x_00005_00004=8) + (x_00007_00005=8)))
c Both direct and order encoding.
c Var 'aux1980' order represents '0' with '8572'
c Var 'aux1980' direct represents '0' with '8572'
c Var 'aux1980' order represents '1' with '8573'
-8572 8573 0
c Var 'aux1980' direct represents '1' with '8574'
8572 -8573 8574 0
-8574 8573 0
-8574 -8572 0
c Var 'aux1980' direct represents '2' with '-8573'
8572 8574 -8573 0
c Encoding variable: aux1981 with domain: int(0..2) (representing constraint ((x_00006_00005=9) + (x_00005_00005=9)))
c Both direct and order encoding.
c Var 'aux1981' order represents '0' with '8575'
c Var 'aux1981' direct represents '0' with '8575'
c Var 'aux1981' order represents '1' with '8576'
-8575 8576 0
c Var 'aux1981' direct represents '1' with '8577'
8575 -8576 8577 0
-8577 8576 0
-8577 -8575 0
c Var 'aux1981' direct represents '2' with '-8576'
8575 8577 -8576 0
c Encoding variable: aux1982 with domain: int(0..2) (representing constraint ((x_00005_00004=9) + (x_00007_00005=9)))
c Both direct and order encoding.
c Var 'aux1982' order represents '0' with '8578'
c Var 'aux1982' direct represents '0' with '8578'
c Var 'aux1982' order represents '1' with '8579'
-8578 8579 0
c Var 'aux1982' direct represents '1' with '8580'
8578 -8579 8580 0
-8580 8579 0
-8580 -8578 0
c Var 'aux1982' direct represents '2' with '-8579'
8578 8580 -8579 0
c Encoding variable: aux1983 with domain: int(0..2) (representing constraint ((x_00006_00003=1) + (x_00007_00004=1)))
c Both direct and order encoding.
c Var 'aux1983' order represents '0' with '8581'
c Var 'aux1983' direct represents '0' with '8581'
c Var 'aux1983' order represents '1' with '8582'
-8581 8582 0
c Var 'aux1983' direct represents '1' with '8583'
8581 -8582 8583 0
-8583 8582 0
-8583 -8581 0
c Var 'aux1983' direct represents '2' with '-8582'
8581 8583 -8582 0
c Encoding variable: aux1984 with domain: int(0..2) (representing constraint ((x_00006_00003=2) + (x_00007_00004=2)))
c Both direct and order encoding.
c Var 'aux1984' order represents '0' with '8584'
c Var 'aux1984' direct represents '0' with '8584'
c Var 'aux1984' order represents '1' with '8585'
-8584 8585 0
c Var 'aux1984' direct represents '1' with '8586'
8584 -8585 8586 0
-8586 8585 0
-8586 -8584 0
c Var 'aux1984' direct represents '2' with '-8585'
8584 8586 -8585 0
c Encoding variable: aux1985 with domain: int(0..2) (representing constraint ((x_00006_00003=3) + (x_00007_00004=3)))
c Both direct and order encoding.
c Var 'aux1985' order represents '0' with '8587'
c Var 'aux1985' direct represents '0' with '8587'
c Var 'aux1985' order represents '1' with '8588'
-8587 8588 0
c Var 'aux1985' direct represents '1' with '8589'
8587 -8588 8589 0
-8589 8588 0
-8589 -8587 0
c Var 'aux1985' direct represents '2' with '-8588'
8587 8589 -8588 0
c Encoding variable: aux1986 with domain: int(0..2) (representing constraint ((x_00006_00003=4) + (x_00007_00004=4)))
c Both direct and order encoding.
c Var 'aux1986' order represents '0' with '8590'
c Var 'aux1986' direct represents '0' with '8590'
c Var 'aux1986' order represents '1' with '8591'
-8590 8591 0
c Var 'aux1986' direct represents '1' with '8592'
8590 -8591 8592 0
-8592 8591 0
-8592 -8590 0
c Var 'aux1986' direct represents '2' with '-8591'
8590 8592 -8591 0
c Encoding variable: aux1987 with domain: int(0..2) (representing constraint ((x_00006_00003=5) + (x_00007_00004=5)))
c Both direct and order encoding.
c Var 'aux1987' order represents '0' with '8593'
c Var 'aux1987' direct represents '0' with '8593'
c Var 'aux1987' order represents '1' with '8594'
-8593 8594 0
c Var 'aux1987' direct represents '1' with '8595'
8593 -8594 8595 0
-8595 8594 0
-8595 -8593 0
c Var 'aux1987' direct represents '2' with '-8594'
8593 8595 -8594 0
c Encoding variable: aux1988 with domain: int(0..2) (representing constraint ((x_00006_00003=6) + (x_00007_00004=6)))
c Both direct and order encoding.
c Var 'aux1988' order represents '0' with '8596'
c Var 'aux1988' direct represents '0' with '8596'
c Var 'aux1988' order represents '1' with '8597'
-8596 8597 0
c Var 'aux1988' direct represents '1' with '8598'
8596 -8597 8598 0
-8598 8597 0
-8598 -8596 0
c Var 'aux1988' direct represents '2' with '-8597'
8596 8598 -8597 0
c Encoding variable: aux1989 with domain: int(0..2) (representing constraint ((x_00006_00003=7) + (x_00007_00004=7)))
c Both direct and order encoding.
c Var 'aux1989' order represents '0' with '8599'
c Var 'aux1989' direct represents '0' with '8599'
c Var 'aux1989' order represents '1' with '8600'
-8599 8600 0
c Var 'aux1989' direct represents '1' with '8601'
8599 -8600 8601 0
-8601 8600 0
-8601 -8599 0
c Var 'aux1989' direct represents '2' with '-8600'
8599 8601 -8600 0
c Encoding variable: aux1990 with domain: int(0..2) (representing constraint ((x_00006_00003=8) + (x_00007_00004=8)))
c Both direct and order encoding.
c Var 'aux1990' order represents '0' with '8602'
c Var 'aux1990' direct represents '0' with '8602'
c Var 'aux1990' order represents '1' with '8603'
-8602 8603 0
c Var 'aux1990' direct represents '1' with '8604'
8602 -8603 8604 0
-8604 8603 0
-8604 -8602 0
c Var 'aux1990' direct represents '2' with '-8603'
8602 8604 -8603 0
c Encoding variable: aux1991 with domain: int(0..2) (representing constraint ((x_00006_00003=9) + (x_00007_00004=9)))
c Both direct and order encoding.
c Var 'aux1991' order represents '0' with '8605'
c Var 'aux1991' direct represents '0' with '8605'
c Var 'aux1991' order represents '1' with '8606'
-8605 8606 0
c Var 'aux1991' direct represents '1' with '8607'
8605 -8606 8607 0
-8607 8606 0
-8607 -8605 0
c Var 'aux1991' direct represents '2' with '-8606'
8605 8607 -8606 0
c Encoding variable: aux1992 with domain: int(0..2) (representing constraint ((x_00006_00006=1) + (x_00007_00008=1)))
c Both direct and order encoding.
c Var 'aux1992' order represents '0' with '8608'
c Var 'aux1992' direct represents '0' with '8608'
c Var 'aux1992' order represents '1' with '8609'
-8608 8609 0
c Var 'aux1992' direct represents '1' with '8610'
8608 -8609 8610 0
-8610 8609 0
-8610 -8608 0
c Var 'aux1992' direct represents '2' with '-8609'
8608 8610 -8609 0
c Encoding variable: aux1993 with domain: int(0..2) (representing constraint ((x_00007_00007=1) + (x_00006_00007=1)))
c Both direct and order encoding.
c Var 'aux1993' order represents '0' with '8611'
c Var 'aux1993' direct represents '0' with '8611'
c Var 'aux1993' order represents '1' with '8612'
-8611 8612 0
c Var 'aux1993' direct represents '1' with '8613'
8611 -8612 8613 0
-8613 8612 0
-8613 -8611 0
c Var 'aux1993' direct represents '2' with '-8612'
8611 8613 -8612 0
c Encoding variable: aux1994 with domain: int(0..2) (representing constraint ((x_00006_00006=2) + (x_00007_00008=2)))
c Both direct and order encoding.
c Var 'aux1994' order represents '0' with '8614'
c Var 'aux1994' direct represents '0' with '8614'
c Var 'aux1994' order represents '1' with '8615'
-8614 8615 0
c Var 'aux1994' direct represents '1' with '8616'
8614 -8615 8616 0
-8616 8615 0
-8616 -8614 0
c Var 'aux1994' direct represents '2' with '-8615'
8614 8616 -8615 0
c Encoding variable: aux1995 with domain: int(0..2) (representing constraint ((x_00007_00007=2) + (x_00006_00007=2)))
c Both direct and order encoding.
c Var 'aux1995' order represents '0' with '8617'
c Var 'aux1995' direct represents '0' with '8617'
c Var 'aux1995' order represents '1' with '8618'
-8617 8618 0
c Var 'aux1995' direct represents '1' with '8619'
8617 -8618 8619 0
-8619 8618 0
-8619 -8617 0
c Var 'aux1995' direct represents '2' with '-8618'
8617 8619 -8618 0
c Encoding variable: aux1996 with domain: int(0..2) (representing constraint ((x_00006_00006=3) + (x_00007_00008=3)))
c Both direct and order encoding.
c Var 'aux1996' order represents '0' with '8620'
c Var 'aux1996' direct represents '0' with '8620'
c Var 'aux1996' order represents '1' with '8621'
-8620 8621 0
c Var 'aux1996' direct represents '1' with '8622'
8620 -8621 8622 0
-8622 8621 0
-8622 -8620 0
c Var 'aux1996' direct represents '2' with '-8621'
8620 8622 -8621 0
c Encoding variable: aux1997 with domain: int(0..2) (representing constraint ((x_00007_00007=3) + (x_00006_00007=3)))
c Both direct and order encoding.
c Var 'aux1997' order represents '0' with '8623'
c Var 'aux1997' direct represents '0' with '8623'
c Var 'aux1997' order represents '1' with '8624'
-8623 8624 0
c Var 'aux1997' direct represents '1' with '8625'
8623 -8624 8625 0
-8625 8624 0
-8625 -8623 0
c Var 'aux1997' direct represents '2' with '-8624'
8623 8625 -8624 0
c Encoding variable: aux1998 with domain: int(0..2) (representing constraint ((x_00006_00006=4) + (x_00007_00008=4)))
c Both direct and order encoding.
c Var 'aux1998' order represents '0' with '8626'
c Var 'aux1998' direct represents '0' with '8626'
c Var 'aux1998' order represents '1' with '8627'
-8626 8627 0
c Var 'aux1998' direct represents '1' with '8628'
8626 -8627 8628 0
-8628 8627 0
-8628 -8626 0
c Var 'aux1998' direct represents '2' with '-8627'
8626 8628 -8627 0
c Encoding variable: aux1999 with domain: int(0..2) (representing constraint ((x_00007_00007=4) + (x_00006_00007=4)))
c Both direct and order encoding.
c Var 'aux1999' order represents '0' with '8629'
c Var 'aux1999' direct represents '0' with '8629'
c Var 'aux1999' order represents '1' with '8630'
-8629 8630 0
c Var 'aux1999' direct represents '1' with '8631'
8629 -8630 8631 0
-8631 8630 0
-8631 -8629 0
c Var 'aux1999' direct represents '2' with '-8630'
8629 8631 -8630 0
c Encoding variable: aux2000 with domain: int(0..2) (representing constraint ((x_00006_00006=5) + (x_00007_00008=5)))
c Both direct and order encoding.
c Var 'aux2000' order represents '0' with '8632'
c Var 'aux2000' direct represents '0' with '8632'
c Var 'aux2000' order represents '1' with '8633'
-8632 8633 0
c Var 'aux2000' direct represents '1' with '8634'
8632 -8633 8634 0
-8634 8633 0
-8634 -8632 0
c Var 'aux2000' direct represents '2' with '-8633'
8632 8634 -8633 0
c Encoding variable: aux2001 with domain: int(0..2) (representing constraint ((x_00007_00007=5) + (x_00006_00007=5)))
c Both direct and order encoding.
c Var 'aux2001' order represents '0' with '8635'
c Var 'aux2001' direct represents '0' with '8635'
c Var 'aux2001' order represents '1' with '8636'
-8635 8636 0
c Var 'aux2001' direct represents '1' with '8637'
8635 -8636 8637 0
-8637 8636 0
-8637 -8635 0
c Var 'aux2001' direct represents '2' with '-8636'
8635 8637 -8636 0
c Encoding variable: aux2002 with domain: int(0..2) (representing constraint ((x_00006_00006=6) + (x_00007_00008=6)))
c Both direct and order encoding.
c Var 'aux2002' order represents '0' with '8638'
c Var 'aux2002' direct represents '0' with '8638'
c Var 'aux2002' order represents '1' with '8639'
-8638 8639 0
c Var 'aux2002' direct represents '1' with '8640'
8638 -8639 8640 0
-8640 8639 0
-8640 -8638 0
c Var 'aux2002' direct represents '2' with '-8639'
8638 8640 -8639 0
c Encoding variable: aux2003 with domain: int(0..2) (representing constraint ((x_00007_00007=6) + (x_00006_00007=6)))
c Both direct and order encoding.
c Var 'aux2003' order represents '0' with '8641'
c Var 'aux2003' direct represents '0' with '8641'
c Var 'aux2003' order represents '1' with '8642'
-8641 8642 0
c Var 'aux2003' direct represents '1' with '8643'
8641 -8642 8643 0
-8643 8642 0
-8643 -8641 0
c Var 'aux2003' direct represents '2' with '-8642'
8641 8643 -8642 0
c Encoding variable: aux2004 with domain: int(0..2) (representing constraint ((x_00006_00006=7) + (x_00007_00008=7)))
c Both direct and order encoding.
c Var 'aux2004' order represents '0' with '8644'
c Var 'aux2004' direct represents '0' with '8644'
c Var 'aux2004' order represents '1' with '8645'
-8644 8645 0
c Var 'aux2004' direct represents '1' with '8646'
8644 -8645 8646 0
-8646 8645 0
-8646 -8644 0
c Var 'aux2004' direct represents '2' with '-8645'
8644 8646 -8645 0
c Encoding variable: aux2005 with domain: int(0..2) (representing constraint ((x_00007_00007=7) + (x_00006_00007=7)))
c Both direct and order encoding.
c Var 'aux2005' order represents '0' with '8647'
c Var 'aux2005' direct represents '0' with '8647'
c Var 'aux2005' order represents '1' with '8648'
-8647 8648 0
c Var 'aux2005' direct represents '1' with '8649'
8647 -8648 8649 0
-8649 8648 0
-8649 -8647 0
c Var 'aux2005' direct represents '2' with '-8648'
8647 8649 -8648 0
c Encoding variable: aux2006 with domain: int(0..2) (representing constraint ((x_00006_00006=8) + (x_00007_00008=8)))
c Both direct and order encoding.
c Var 'aux2006' order represents '0' with '8650'
c Var 'aux2006' direct represents '0' with '8650'
c Var 'aux2006' order represents '1' with '8651'
-8650 8651 0
c Var 'aux2006' direct represents '1' with '8652'
8650 -8651 8652 0
-8652 8651 0
-8652 -8650 0
c Var 'aux2006' direct represents '2' with '-8651'
8650 8652 -8651 0
c Encoding variable: aux2007 with domain: int(0..2) (representing constraint ((x_00007_00007=8) + (x_00006_00007=8)))
c Both direct and order encoding.
c Var 'aux2007' order represents '0' with '8653'
c Var 'aux2007' direct represents '0' with '8653'
c Var 'aux2007' order represents '1' with '8654'
-8653 8654 0
c Var 'aux2007' direct represents '1' with '8655'
8653 -8654 8655 0
-8655 8654 0
-8655 -8653 0
c Var 'aux2007' direct represents '2' with '-8654'
8653 8655 -8654 0
c Encoding variable: aux2008 with domain: int(0..2) (representing constraint ((x_00006_00006=9) + (x_00007_00008=9)))
c Both direct and order encoding.
c Var 'aux2008' order represents '0' with '8656'
c Var 'aux2008' direct represents '0' with '8656'
c Var 'aux2008' order represents '1' with '8657'
-8656 8657 0
c Var 'aux2008' direct represents '1' with '8658'
8656 -8657 8658 0
-8658 8657 0
-8658 -8656 0
c Var 'aux2008' direct represents '2' with '-8657'
8656 8658 -8657 0
c Encoding variable: aux2009 with domain: int(0..2) (representing constraint ((x_00007_00007=9) + (x_00006_00007=9)))
c Both direct and order encoding.
c Var 'aux2009' order represents '0' with '8659'
c Var 'aux2009' direct represents '0' with '8659'
c Var 'aux2009' order represents '1' with '8660'
-8659 8660 0
c Var 'aux2009' direct represents '1' with '8661'
8659 -8660 8661 0
-8661 8660 0
-8661 -8659 0
c Var 'aux2009' direct represents '2' with '-8660'
8659 8661 -8660 0
c Encoding variable: aux2010 with domain: int(0..2) (representing constraint ((x_00008_00001=1) + (x_00007_00002=1)))
c Both direct and order encoding.
c Var 'aux2010' order represents '0' with '8662'
c Var 'aux2010' direct represents '0' with '8662'
c Var 'aux2010' order represents '1' with '8663'
-8662 8663 0
c Var 'aux2010' direct represents '1' with '8664'
8662 -8663 8664 0
-8664 8663 0
-8664 -8662 0
c Var 'aux2010' direct represents '2' with '-8663'
8662 8664 -8663 0
c Encoding variable: aux2011 with domain: int(0..2) (representing constraint ((x_00009_00002=1) + (x_00008_00002=1)))
c Both direct and order encoding.
c Var 'aux2011' order represents '0' with '8665'
c Var 'aux2011' direct represents '0' with '8665'
c Var 'aux2011' order represents '1' with '8666'
-8665 8666 0
c Var 'aux2011' direct represents '1' with '8667'
8665 -8666 8667 0
-8667 8666 0
-8667 -8665 0
c Var 'aux2011' direct represents '2' with '-8666'
8665 8667 -8666 0
c Encoding variable: aux2012 with domain: int(0..2) (representing constraint ((x_00009_00001=1) + (x_00008_00003=1)))
c Both direct and order encoding.
c Var 'aux2012' order represents '0' with '8668'
c Var 'aux2012' direct represents '0' with '8668'
c Var 'aux2012' order represents '1' with '8669'
-8668 8669 0
c Var 'aux2012' direct represents '1' with '8670'
8668 -8669 8670 0
-8670 8669 0
-8670 -8668 0
c Var 'aux2012' direct represents '2' with '-8669'
8668 8670 -8669 0
c Encoding variable: aux2013 with domain: int(0..2) (representing constraint ((x_00008_00001=2) + (x_00007_00002=2)))
c Both direct and order encoding.
c Var 'aux2013' order represents '0' with '8671'
c Var 'aux2013' direct represents '0' with '8671'
c Var 'aux2013' order represents '1' with '8672'
-8671 8672 0
c Var 'aux2013' direct represents '1' with '8673'
8671 -8672 8673 0
-8673 8672 0
-8673 -8671 0
c Var 'aux2013' direct represents '2' with '-8672'
8671 8673 -8672 0
c Encoding variable: aux2014 with domain: int(0..2) (representing constraint ((x_00009_00002=2) + (x_00008_00002=2)))
c Both direct and order encoding.
c Var 'aux2014' order represents '0' with '8674'
c Var 'aux2014' direct represents '0' with '8674'
c Var 'aux2014' order represents '1' with '8675'
-8674 8675 0
c Var 'aux2014' direct represents '1' with '8676'
8674 -8675 8676 0
-8676 8675 0
-8676 -8674 0
c Var 'aux2014' direct represents '2' with '-8675'
8674 8676 -8675 0
c Encoding variable: aux2015 with domain: int(0..2) (representing constraint ((x_00009_00001=2) + (x_00008_00003=2)))
c Both direct and order encoding.
c Var 'aux2015' order represents '0' with '8677'
c Var 'aux2015' direct represents '0' with '8677'
c Var 'aux2015' order represents '1' with '8678'
-8677 8678 0
c Var 'aux2015' direct represents '1' with '8679'
8677 -8678 8679 0
-8679 8678 0
-8679 -8677 0
c Var 'aux2015' direct represents '2' with '-8678'
8677 8679 -8678 0
c Encoding variable: aux2016 with domain: int(0..2) (representing constraint ((x_00008_00001=3) + (x_00007_00002=3)))
c Both direct and order encoding.
c Var 'aux2016' order represents '0' with '8680'
c Var 'aux2016' direct represents '0' with '8680'
c Var 'aux2016' order represents '1' with '8681'
-8680 8681 0
c Var 'aux2016' direct represents '1' with '8682'
8680 -8681 8682 0
-8682 8681 0
-8682 -8680 0
c Var 'aux2016' direct represents '2' with '-8681'
8680 8682 -8681 0
c Encoding variable: aux2017 with domain: int(0..2) (representing constraint ((x_00009_00002=3) + (x_00008_00002=3)))
c Both direct and order encoding.
c Var 'aux2017' order represents '0' with '8683'
c Var 'aux2017' direct represents '0' with '8683'
c Var 'aux2017' order represents '1' with '8684'
-8683 8684 0
c Var 'aux2017' direct represents '1' with '8685'
8683 -8684 8685 0
-8685 8684 0
-8685 -8683 0
c Var 'aux2017' direct represents '2' with '-8684'
8683 8685 -8684 0
c Encoding variable: aux2018 with domain: int(0..2) (representing constraint ((x_00009_00001=3) + (x_00008_00003=3)))
c Both direct and order encoding.
c Var 'aux2018' order represents '0' with '8686'
c Var 'aux2018' direct represents '0' with '8686'
c Var 'aux2018' order represents '1' with '8687'
-8686 8687 0
c Var 'aux2018' direct represents '1' with '8688'
8686 -8687 8688 0
-8688 8687 0
-8688 -8686 0
c Var 'aux2018' direct represents '2' with '-8687'
8686 8688 -8687 0
c Encoding variable: aux2019 with domain: int(0..2) (representing constraint ((x_00008_00001=4) + (x_00007_00002=4)))
c Both direct and order encoding.
c Var 'aux2019' order represents '0' with '8689'
c Var 'aux2019' direct represents '0' with '8689'
c Var 'aux2019' order represents '1' with '8690'
-8689 8690 0
c Var 'aux2019' direct represents '1' with '8691'
8689 -8690 8691 0
-8691 8690 0
-8691 -8689 0
c Var 'aux2019' direct represents '2' with '-8690'
8689 8691 -8690 0
c Encoding variable: aux2020 with domain: int(0..2) (representing constraint ((x_00009_00002=4) + (x_00008_00002=4)))
c Both direct and order encoding.
c Var 'aux2020' order represents '0' with '8692'
c Var 'aux2020' direct represents '0' with '8692'
c Var 'aux2020' order represents '1' with '8693'
-8692 8693 0
c Var 'aux2020' direct represents '1' with '8694'
8692 -8693 8694 0
-8694 8693 0
-8694 -8692 0
c Var 'aux2020' direct represents '2' with '-8693'
8692 8694 -8693 0
c Encoding variable: aux2021 with domain: int(0..2) (representing constraint ((x_00009_00001=4) + (x_00008_00003=4)))
c Both direct and order encoding.
c Var 'aux2021' order represents '0' with '8695'
c Var 'aux2021' direct represents '0' with '8695'
c Var 'aux2021' order represents '1' with '8696'
-8695 8696 0
c Var 'aux2021' direct represents '1' with '8697'
8695 -8696 8697 0
-8697 8696 0
-8697 -8695 0
c Var 'aux2021' direct represents '2' with '-8696'
8695 8697 -8696 0
c Encoding variable: aux2022 with domain: int(0..2) (representing constraint ((x_00008_00001=5) + (x_00007_00002=5)))
c Both direct and order encoding.
c Var 'aux2022' order represents '0' with '8698'
c Var 'aux2022' direct represents '0' with '8698'
c Var 'aux2022' order represents '1' with '8699'
-8698 8699 0
c Var 'aux2022' direct represents '1' with '8700'
8698 -8699 8700 0
-8700 8699 0
-8700 -8698 0
c Var 'aux2022' direct represents '2' with '-8699'
8698 8700 -8699 0
c Encoding variable: aux2023 with domain: int(0..2) (representing constraint ((x_00009_00002=5) + (x_00008_00002=5)))
c Both direct and order encoding.
c Var 'aux2023' order represents '0' with '8701'
c Var 'aux2023' direct represents '0' with '8701'
c Var 'aux2023' order represents '1' with '8702'
-8701 8702 0
c Var 'aux2023' direct represents '1' with '8703'
8701 -8702 8703 0
-8703 8702 0
-8703 -8701 0
c Var 'aux2023' direct represents '2' with '-8702'
8701 8703 -8702 0
c Encoding variable: aux2024 with domain: int(0..2) (representing constraint ((x_00009_00001=5) + (x_00008_00003=5)))
c Both direct and order encoding.
c Var 'aux2024' order represents '0' with '8704'
c Var 'aux2024' direct represents '0' with '8704'
c Var 'aux2024' order represents '1' with '8705'
-8704 8705 0
c Var 'aux2024' direct represents '1' with '8706'
8704 -8705 8706 0
-8706 8705 0
-8706 -8704 0
c Var 'aux2024' direct represents '2' with '-8705'
8704 8706 -8705 0
c Encoding variable: aux2025 with domain: int(0..2) (representing constraint ((x_00008_00001=6) + (x_00007_00002=6)))
c Both direct and order encoding.
c Var 'aux2025' order represents '0' with '8707'
c Var 'aux2025' direct represents '0' with '8707'
c Var 'aux2025' order represents '1' with '8708'
-8707 8708 0
c Var 'aux2025' direct represents '1' with '8709'
8707 -8708 8709 0
-8709 8708 0
-8709 -8707 0
c Var 'aux2025' direct represents '2' with '-8708'
8707 8709 -8708 0
c Encoding variable: aux2026 with domain: int(0..2) (representing constraint ((x_00009_00002=6) + (x_00008_00002=6)))
c Both direct and order encoding.
c Var 'aux2026' order represents '0' with '8710'
c Var 'aux2026' direct represents '0' with '8710'
c Var 'aux2026' order represents '1' with '8711'
-8710 8711 0
c Var 'aux2026' direct represents '1' with '8712'
8710 -8711 8712 0
-8712 8711 0
-8712 -8710 0
c Var 'aux2026' direct represents '2' with '-8711'
8710 8712 -8711 0
c Encoding variable: aux2027 with domain: int(0..2) (representing constraint ((x_00009_00001=6) + (x_00008_00003=6)))
c Both direct and order encoding.
c Var 'aux2027' order represents '0' with '8713'
c Var 'aux2027' direct represents '0' with '8713'
c Var 'aux2027' order represents '1' with '8714'
-8713 8714 0
c Var 'aux2027' direct represents '1' with '8715'
8713 -8714 8715 0
-8715 8714 0
-8715 -8713 0
c Var 'aux2027' direct represents '2' with '-8714'
8713 8715 -8714 0
c Encoding variable: aux2028 with domain: int(0..2) (representing constraint ((x_00008_00001=7) + (x_00007_00002=7)))
c Both direct and order encoding.
c Var 'aux2028' order represents '0' with '8716'
c Var 'aux2028' direct represents '0' with '8716'
c Var 'aux2028' order represents '1' with '8717'
-8716 8717 0
c Var 'aux2028' direct represents '1' with '8718'
8716 -8717 8718 0
-8718 8717 0
-8718 -8716 0
c Var 'aux2028' direct represents '2' with '-8717'
8716 8718 -8717 0
c Encoding variable: aux2029 with domain: int(0..2) (representing constraint ((x_00009_00002=7) + (x_00008_00002=7)))
c Both direct and order encoding.
c Var 'aux2029' order represents '0' with '8719'
c Var 'aux2029' direct represents '0' with '8719'
c Var 'aux2029' order represents '1' with '8720'
-8719 8720 0
c Var 'aux2029' direct represents '1' with '8721'
8719 -8720 8721 0
-8721 8720 0
-8721 -8719 0
c Var 'aux2029' direct represents '2' with '-8720'
8719 8721 -8720 0
c Encoding variable: aux2030 with domain: int(0..2) (representing constraint ((x_00009_00001=7) + (x_00008_00003=7)))
c Both direct and order encoding.
c Var 'aux2030' order represents '0' with '8722'
c Var 'aux2030' direct represents '0' with '8722'
c Var 'aux2030' order represents '1' with '8723'
-8722 8723 0
c Var 'aux2030' direct represents '1' with '8724'
8722 -8723 8724 0
-8724 8723 0
-8724 -8722 0
c Var 'aux2030' direct represents '2' with '-8723'
8722 8724 -8723 0
c Encoding variable: aux2031 with domain: int(0..2) (representing constraint ((x_00008_00001=8) + (x_00007_00002=8)))
c Both direct and order encoding.
c Var 'aux2031' order represents '0' with '8725'
c Var 'aux2031' direct represents '0' with '8725'
c Var 'aux2031' order represents '1' with '8726'
-8725 8726 0
c Var 'aux2031' direct represents '1' with '8727'
8725 -8726 8727 0
-8727 8726 0
-8727 -8725 0
c Var 'aux2031' direct represents '2' with '-8726'
8725 8727 -8726 0
c Encoding variable: aux2032 with domain: int(0..2) (representing constraint ((x_00009_00002=8) + (x_00008_00002=8)))
c Both direct and order encoding.
c Var 'aux2032' order represents '0' with '8728'
c Var 'aux2032' direct represents '0' with '8728'
c Var 'aux2032' order represents '1' with '8729'
-8728 8729 0
c Var 'aux2032' direct represents '1' with '8730'
8728 -8729 8730 0
-8730 8729 0
-8730 -8728 0
c Var 'aux2032' direct represents '2' with '-8729'
8728 8730 -8729 0
c Encoding variable: aux2033 with domain: int(0..2) (representing constraint ((x_00009_00001=8) + (x_00008_00003=8)))
c Both direct and order encoding.
c Var 'aux2033' order represents '0' with '8731'
c Var 'aux2033' direct represents '0' with '8731'
c Var 'aux2033' order represents '1' with '8732'
-8731 8732 0
c Var 'aux2033' direct represents '1' with '8733'
8731 -8732 8733 0
-8733 8732 0
-8733 -8731 0
c Var 'aux2033' direct represents '2' with '-8732'
8731 8733 -8732 0
c Encoding variable: aux2034 with domain: int(0..2) (representing constraint ((x_00008_00001=9) + (x_00007_00002=9)))
c Both direct and order encoding.
c Var 'aux2034' order represents '0' with '8734'
c Var 'aux2034' direct represents '0' with '8734'
c Var 'aux2034' order represents '1' with '8735'
-8734 8735 0
c Var 'aux2034' direct represents '1' with '8736'
8734 -8735 8736 0
-8736 8735 0
-8736 -8734 0
c Var 'aux2034' direct represents '2' with '-8735'
8734 8736 -8735 0
c Encoding variable: aux2035 with domain: int(0..2) (representing constraint ((x_00009_00002=9) + (x_00008_00002=9)))
c Both direct and order encoding.
c Var 'aux2035' order represents '0' with '8737'
c Var 'aux2035' direct represents '0' with '8737'
c Var 'aux2035' order represents '1' with '8738'
-8737 8738 0
c Var 'aux2035' direct represents '1' with '8739'
8737 -8738 8739 0
-8739 8738 0
-8739 -8737 0
c Var 'aux2035' direct represents '2' with '-8738'
8737 8739 -8738 0
c Encoding variable: aux2036 with domain: int(0..2) (representing constraint ((x_00009_00001=9) + (x_00008_00003=9)))
c Both direct and order encoding.
c Var 'aux2036' order represents '0' with '8740'
c Var 'aux2036' direct represents '0' with '8740'
c Var 'aux2036' order represents '1' with '8741'
-8740 8741 0
c Var 'aux2036' direct represents '1' with '8742'
8740 -8741 8742 0
-8742 8741 0
-8742 -8740 0
c Var 'aux2036' direct represents '2' with '-8741'
8740 8742 -8741 0
c Encoding variable: aux2037 with domain: int(0..2) (representing constraint ((x_00008_00006=1) + (x_00007_00006=1)))
c Both direct and order encoding.
c Var 'aux2037' order represents '0' with '8743'
c Var 'aux2037' direct represents '0' with '8743'
c Var 'aux2037' order represents '1' with '8744'
-8743 8744 0
c Var 'aux2037' direct represents '1' with '8745'
8743 -8744 8745 0
-8745 8744 0
-8745 -8743 0
c Var 'aux2037' direct represents '2' with '-8744'
8743 8745 -8744 0
c Encoding variable: aux2038 with domain: int(0..2) (representing constraint ((x_00008_00006=2) + (x_00007_00006=2)))
c Both direct and order encoding.
c Var 'aux2038' order represents '0' with '8746'
c Var 'aux2038' direct represents '0' with '8746'
c Var 'aux2038' order represents '1' with '8747'
-8746 8747 0
c Var 'aux2038' direct represents '1' with '8748'
8746 -8747 8748 0
-8748 8747 0
-8748 -8746 0
c Var 'aux2038' direct represents '2' with '-8747'
8746 8748 -8747 0
c Encoding variable: aux2039 with domain: int(0..2) (representing constraint ((x_00008_00006=3) + (x_00007_00006=3)))
c Both direct and order encoding.
c Var 'aux2039' order represents '0' with '8749'
c Var 'aux2039' direct represents '0' with '8749'
c Var 'aux2039' order represents '1' with '8750'
-8749 8750 0
c Var 'aux2039' direct represents '1' with '8751'
8749 -8750 8751 0
-8751 8750 0
-8751 -8749 0
c Var 'aux2039' direct represents '2' with '-8750'
8749 8751 -8750 0
c Encoding variable: aux2040 with domain: int(0..2) (representing constraint ((x_00008_00006=4) + (x_00007_00006=4)))
c Both direct and order encoding.
c Var 'aux2040' order represents '0' with '8752'
c Var 'aux2040' direct represents '0' with '8752'
c Var 'aux2040' order represents '1' with '8753'
-8752 8753 0
c Var 'aux2040' direct represents '1' with '8754'
8752 -8753 8754 0
-8754 8753 0
-8754 -8752 0
c Var 'aux2040' direct represents '2' with '-8753'
8752 8754 -8753 0
c Encoding variable: aux2041 with domain: int(0..2) (representing constraint ((x_00008_00006=5) + (x_00007_00006=5)))
c Both direct and order encoding.
c Var 'aux2041' order represents '0' with '8755'
c Var 'aux2041' direct represents '0' with '8755'
c Var 'aux2041' order represents '1' with '8756'
-8755 8756 0
c Var 'aux2041' direct represents '1' with '8757'
8755 -8756 8757 0
-8757 8756 0
-8757 -8755 0
c Var 'aux2041' direct represents '2' with '-8756'
8755 8757 -8756 0
c Encoding variable: aux2042 with domain: int(0..2) (representing constraint ((x_00008_00006=6) + (x_00007_00006=6)))
c Both direct and order encoding.
c Var 'aux2042' order represents '0' with '8758'
c Var 'aux2042' direct represents '0' with '8758'
c Var 'aux2042' order represents '1' with '8759'
-8758 8759 0
c Var 'aux2042' direct represents '1' with '8760'
8758 -8759 8760 0
-8760 8759 0
-8760 -8758 0
c Var 'aux2042' direct represents '2' with '-8759'
8758 8760 -8759 0
c Encoding variable: aux2043 with domain: int(0..2) (representing constraint ((x_00008_00006=7) + (x_00007_00006=7)))
c Both direct and order encoding.
c Var 'aux2043' order represents '0' with '8761'
c Var 'aux2043' direct represents '0' with '8761'
c Var 'aux2043' order represents '1' with '8762'
-8761 8762 0
c Var 'aux2043' direct represents '1' with '8763'
8761 -8762 8763 0
-8763 8762 0
-8763 -8761 0
c Var 'aux2043' direct represents '2' with '-8762'
8761 8763 -8762 0
c Encoding variable: aux2044 with domain: int(0..2) (representing constraint ((x_00008_00006=8) + (x_00007_00006=8)))
c Both direct and order encoding.
c Var 'aux2044' order represents '0' with '8764'
c Var 'aux2044' direct represents '0' with '8764'
c Var 'aux2044' order represents '1' with '8765'
-8764 8765 0
c Var 'aux2044' direct represents '1' with '8766'
8764 -8765 8766 0
-8766 8765 0
-8766 -8764 0
c Var 'aux2044' direct represents '2' with '-8765'
8764 8766 -8765 0
c Encoding variable: aux2045 with domain: int(0..2) (representing constraint ((x_00008_00006=9) + (x_00007_00006=9)))
c Both direct and order encoding.
c Var 'aux2045' order represents '0' with '8767'
c Var 'aux2045' direct represents '0' with '8767'
c Var 'aux2045' order represents '1' with '8768'
-8767 8768 0
c Var 'aux2045' direct represents '1' with '8769'
8767 -8768 8769 0
-8769 8768 0
-8769 -8767 0
c Var 'aux2045' direct represents '2' with '-8768'
8767 8769 -8768 0
c Encoding variable: aux2046 with domain: int(0..2) (representing constraint ((x_00008_00009=1) + (x_00009_00009=1)))
c Both direct and order encoding.
c Var 'aux2046' order represents '0' with '8770'
c Var 'aux2046' direct represents '0' with '8770'
c Var 'aux2046' order represents '1' with '8771'
-8770 8771 0
c Var 'aux2046' direct represents '1' with '8772'
8770 -8771 8772 0
-8772 8771 0
-8772 -8770 0
c Var 'aux2046' direct represents '2' with '-8771'
8770 8772 -8771 0
c Encoding variable: aux2047 with domain: int(0..2) (representing constraint ((x_00008_00009=2) + (x_00009_00009=2)))
c Both direct and order encoding.
c Var 'aux2047' order represents '0' with '8773'
c Var 'aux2047' direct represents '0' with '8773'
c Var 'aux2047' order represents '1' with '8774'
-8773 8774 0
c Var 'aux2047' direct represents '1' with '8775'
8773 -8774 8775 0
-8775 8774 0
-8775 -8773 0
c Var 'aux2047' direct represents '2' with '-8774'
8773 8775 -8774 0
c Encoding variable: aux2048 with domain: int(0..2) (representing constraint ((x_00008_00009=3) + (x_00009_00009=3)))
c Both direct and order encoding.
c Var 'aux2048' order represents '0' with '8776'
c Var 'aux2048' direct represents '0' with '8776'
c Var 'aux2048' order represents '1' with '8777'
-8776 8777 0
c Var 'aux2048' direct represents '1' with '8778'
8776 -8777 8778 0
-8778 8777 0
-8778 -8776 0
c Var 'aux2048' direct represents '2' with '-8777'
8776 8778 -8777 0
c Encoding variable: aux2049 with domain: int(0..2) (representing constraint ((x_00008_00009=4) + (x_00009_00009=4)))
c Both direct and order encoding.
c Var 'aux2049' order represents '0' with '8779'
c Var 'aux2049' direct represents '0' with '8779'
c Var 'aux2049' order represents '1' with '8780'
-8779 8780 0
c Var 'aux2049' direct represents '1' with '8781'
8779 -8780 8781 0
-8781 8780 0
-8781 -8779 0
c Var 'aux2049' direct represents '2' with '-8780'
8779 8781 -8780 0
c Encoding variable: aux2050 with domain: int(0..2) (representing constraint ((x_00008_00009=5) + (x_00009_00009=5)))
c Both direct and order encoding.
c Var 'aux2050' order represents '0' with '8782'
c Var 'aux2050' direct represents '0' with '8782'
c Var 'aux2050' order represents '1' with '8783'
-8782 8783 0
c Var 'aux2050' direct represents '1' with '8784'
8782 -8783 8784 0
-8784 8783 0
-8784 -8782 0
c Var 'aux2050' direct represents '2' with '-8783'
8782 8784 -8783 0
c Encoding variable: aux2051 with domain: int(0..2) (representing constraint ((x_00008_00009=6) + (x_00009_00009=6)))
c Both direct and order encoding.
c Var 'aux2051' order represents '0' with '8785'
c Var 'aux2051' direct represents '0' with '8785'
c Var 'aux2051' order represents '1' with '8786'
-8785 8786 0
c Var 'aux2051' direct represents '1' with '8787'
8785 -8786 8787 0
-8787 8786 0
-8787 -8785 0
c Var 'aux2051' direct represents '2' with '-8786'
8785 8787 -8786 0
c Encoding variable: aux2052 with domain: int(0..2) (representing constraint ((x_00008_00009=7) + (x_00009_00009=7)))
c Both direct and order encoding.
c Var 'aux2052' order represents '0' with '8788'
c Var 'aux2052' direct represents '0' with '8788'
c Var 'aux2052' order represents '1' with '8789'
-8788 8789 0
c Var 'aux2052' direct represents '1' with '8790'
8788 -8789 8790 0
-8790 8789 0
-8790 -8788 0
c Var 'aux2052' direct represents '2' with '-8789'
8788 8790 -8789 0
c Encoding variable: aux2053 with domain: int(0..2) (representing constraint ((x_00008_00009=8) + (x_00009_00009=8)))
c Both direct and order encoding.
c Var 'aux2053' order represents '0' with '8791'
c Var 'aux2053' direct represents '0' with '8791'
c Var 'aux2053' order represents '1' with '8792'
-8791 8792 0
c Var 'aux2053' direct represents '1' with '8793'
8791 -8792 8793 0
-8793 8792 0
-8793 -8791 0
c Var 'aux2053' direct represents '2' with '-8792'
8791 8793 -8792 0
c Encoding variable: aux2054 with domain: int(0..2) (representing constraint ((x_00008_00009=9) + (x_00009_00009=9)))
c Both direct and order encoding.
c Var 'aux2054' order represents '0' with '8794'
c Var 'aux2054' direct represents '0' with '8794'
c Var 'aux2054' order represents '1' with '8795'
-8794 8795 0
c Var 'aux2054' direct represents '1' with '8796'
8794 -8795 8796 0
-8796 8795 0
-8796 -8794 0
c Var 'aux2054' direct represents '2' with '-8795'
8794 8796 -8795 0
c Encoding variable: aux2055 with domain: bool (representing constraint ((aux387 + shift(x_00003_00001, -1) + shift(x_00001_00001, -1))<=16))
c Var 'aux2055' direct represents '0' with '-8797'
c Var 'aux2055' direct represents '1' with '8797'
c Var 'aux2055' order represents '1' with '1'
c Var 'aux2055' order represents '0' with '-8797'
c Encoding variable: aux2056 with domain: bool (representing constraint (16<=(aux387 + shift(x_00003_00001, -1) + shift(x_00001_00001, -1))))
c Var 'aux2056' direct represents '0' with '-8798'
c Var 'aux2056' direct represents '1' with '8798'
c Var 'aux2056' order represents '1' with '1'
c Var 'aux2056' order represents '0' with '-8798'
c Encoding variable: aux2057 with domain: bool (representing constraint ((x_00001_00003 + x_00001_00004)<=9))
c Var 'aux2057' direct represents '0' with '-8799'
c Var 'aux2057' direct represents '1' with '8799'
c Var 'aux2057' order represents '1' with '1'
c Var 'aux2057' order represents '0' with '-8799'
c Encoding variable: aux2058 with domain: bool (representing constraint (9<=(x_00001_00003 + x_00001_00004)))
c Var 'aux2058' direct represents '0' with '-8800'
c Var 'aux2058' direct represents '1' with '8800'
c Var 'aux2058' order represents '1' with '1'
c Var 'aux2058' order represents '0' with '-8800'
c Encoding variable: aux2059 with domain: bool (representing constraint ((x_00001_00005 + x_00001_00006)<=13))
c Var 'aux2059' direct represents '0' with '-8801'
c Var 'aux2059' direct represents '1' with '8801'
c Var 'aux2059' order represents '1' with '1'
c Var 'aux2059' order represents '0' with '-8801'
c Encoding variable: aux2060 with domain: bool (representing constraint (13<=(x_00001_00005 + x_00001_00006)))
c Var 'aux2060' direct represents '0' with '-8802'
c Var 'aux2060' direct represents '1' with '8802'
c Var 'aux2060' order represents '1' with '1'
c Var 'aux2060' order represents '0' with '-8802'
c Encoding variable: aux2061 with domain: bool (representing constraint ((aux389 + aux390 + aux392)<=30))
c Var 'aux2061' direct represents '0' with '-8803'
c Var 'aux2061' direct represents '1' with '8803'
c Var 'aux2061' order represents '1' with '1'
c Var 'aux2061' order represents '0' with '-8803'
c Encoding variable: aux2062 with domain: bool (representing constraint (30<=(aux389 + aux390 + aux392)))
c Var 'aux2062' direct represents '0' with '-8804'
c Var 'aux2062' direct represents '1' with '8804'
c Var 'aux2062' order represents '1' with '1'
c Var 'aux2062' order represents '0' with '-8804'
c Encoding variable: aux2063 with domain: bool (representing constraint ((x_00002_00002 + x_00003_00002)<=8))
c Var 'aux2063' direct represents '0' with '-8805'
c Var 'aux2063' direct represents '1' with '8805'
c Var 'aux2063' order represents '1' with '1'
c Var 'aux2063' order represents '0' with '-8805'
c Encoding variable: aux2064 with domain: bool (representing constraint (8<=(x_00002_00002 + x_00003_00002)))
c Var 'aux2064' direct represents '0' with '-8806'
c Var 'aux2064' direct represents '1' with '8806'
c Var 'aux2064' order represents '1' with '1'
c Var 'aux2064' order represents '0' with '-8806'
c Encoding variable: aux2065 with domain: bool (representing constraint ((aux393 + aux394 + shift(x_00003_00003, -1))<=25))
c Var 'aux2065' direct represents '0' with '-8807'
c Var 'aux2065' direct represents '1' with '8807'
c Var 'aux2065' order represents '1' with '1'
c Var 'aux2065' order represents '0' with '-8807'
c Encoding variable: aux2066 with domain: bool (representing constraint (25<=(aux393 + aux394 + shift(x_00003_00003, -1))))
c Var 'aux2066' direct represents '0' with '-8808'
c Var 'aux2066' direct represents '1' with '8808'
c Var 'aux2066' order represents '1' with '1'
c Var 'aux2066' order represents '0' with '-8808'
c Encoding variable: aux2067 with domain: bool (representing constraint ((x_00002_00005 + x_00002_00006)<=11))
c Var 'aux2067' direct represents '0' with '-8809'
c Var 'aux2067' direct represents '1' with '8809'
c Var 'aux2067' order represents '1' with '1'
c Var 'aux2067' order represents '0' with '-8809'
c Encoding variable: aux2068 with domain: bool (representing constraint (11<=(x_00002_00005 + x_00002_00006)))
c Var 'aux2068' direct represents '0' with '-8810'
c Var 'aux2068' direct represents '1' with '8810'
c Var 'aux2068' order represents '1' with '1'
c Var 'aux2068' order represents '0' with '-8810'
c Encoding variable: aux2069 with domain: bool (representing constraint ((aux395 + aux396 + shift(x_00004_00006, -1))<=15))
c Var 'aux2069' direct represents '0' with '-8811'
c Var 'aux2069' direct represents '1' with '8811'
c Var 'aux2069' order represents '1' with '1'
c Var 'aux2069' order represents '0' with '-8811'
c Encoding variable: aux2070 with domain: bool (representing constraint (15<=(aux395 + aux396 + shift(x_00004_00006, -1))))
c Var 'aux2070' direct represents '0' with '-8812'
c Var 'aux2070' direct represents '1' with '8812'
c Var 'aux2070' order represents '1' with '1'
c Var 'aux2070' order represents '0' with '-8812'
c Encoding variable: aux2071 with domain: bool (representing constraint ((x_00003_00006 + x_00003_00007 + x_00004_00007)<=11))
c Var 'aux2071' direct represents '0' with '-8813'
c Var 'aux2071' direct represents '1' with '8813'
c Var 'aux2071' order represents '1' with '1'
c Var 'aux2071' order represents '0' with '-8813'
c Encoding variable: aux2072 with domain: bool (representing constraint (11<=(x_00003_00006 + x_00003_00007 + x_00004_00007)))
c Var 'aux2072' direct represents '0' with '-8814'
c Var 'aux2072' direct represents '1' with '8814'
c Var 'aux2072' order represents '1' with '1'
c Var 'aux2072' order represents '0' with '-8814'
c Encoding variable: aux2073 with domain: bool (representing constraint ((aux397 + shift(x_00004_00002, -1) + shift(x_00004_00003, -1))<=21))
c Var 'aux2073' direct represents '0' with '-8815'
c Var 'aux2073' direct represents '1' with '8815'
c Var 'aux2073' order represents '1' with '1'
c Var 'aux2073' order represents '0' with '-8815'
c Encoding variable: aux2074 with domain: bool (representing constraint (21<=(aux397 + shift(x_00004_00002, -1) + shift(x_00004_00003, -1))))
c Var 'aux2074' direct represents '0' with '-8816'
c Var 'aux2074' direct represents '1' with '8816'
c Var 'aux2074' order represents '1' with '1'
c Var 'aux2074' order represents '0' with '-8816'
c Encoding variable: aux2075 with domain: bool (representing constraint ((x_00004_00008 + x_00005_00008)<=14))
c Var 'aux2075' direct represents '0' with '-8817'
c Var 'aux2075' direct represents '1' with '8817'
c Var 'aux2075' order represents '1' with '1'
c Var 'aux2075' order represents '0' with '-8817'
c Encoding variable: aux2076 with domain: bool (representing constraint (14<=(x_00004_00008 + x_00005_00008)))
c Var 'aux2076' direct represents '0' with '-8818'
c Var 'aux2076' direct represents '1' with '8818'
c Var 'aux2076' order represents '1' with '1'
c Var 'aux2076' order represents '0' with '-8818'
c Encoding variable: aux2077 with domain: bool (representing constraint ((x_00004_00009 + x_00005_00009)<=11))
c Var 'aux2077' direct represents '0' with '-8819'
c Var 'aux2077' direct represents '1' with '8819'
c Var 'aux2077' order represents '1' with '1'
c Var 'aux2077' order represents '0' with '-8819'
c Encoding variable: aux2078 with domain: bool (representing constraint (11<=(x_00004_00009 + x_00005_00009)))
c Var 'aux2078' direct represents '0' with '-8820'
c Var 'aux2078' direct represents '1' with '8820'
c Var 'aux2078' order represents '1' with '1'
c Var 'aux2078' order represents '0' with '-8820'
c Encoding variable: aux2079 with domain: bool (representing constraint ((x_00005_00002 + x_00006_00002)<=10))
c Var 'aux2079' direct represents '0' with '-8821'
c Var 'aux2079' direct represents '1' with '8821'
c Var 'aux2079' order represents '1' with '1'
c Var 'aux2079' order represents '0' with '-8821'
c Encoding variable: aux2080 with domain: bool (representing constraint (10<=(x_00005_00002 + x_00006_00002)))
c Var 'aux2080' direct represents '0' with '-8822'
c Var 'aux2080' direct represents '1' with '8822'
c Var 'aux2080' order represents '1' with '1'
c Var 'aux2080' order represents '0' with '-8822'
c Encoding variable: aux2081 with domain: bool (representing constraint ((aux398 + aux399 + shift(x_00005_00004, -1))<=19))
c Var 'aux2081' direct represents '0' with '-8823'
c Var 'aux2081' direct represents '1' with '8823'
c Var 'aux2081' order represents '1' with '1'
c Var 'aux2081' order represents '0' with '-8823'
c Encoding variable: aux2082 with domain: bool (representing constraint (19<=(aux398 + aux399 + shift(x_00005_00004, -1))))
c Var 'aux2082' direct represents '0' with '-8824'
c Var 'aux2082' direct represents '1' with '8824'
c Var 'aux2082' order represents '1' with '1'
c Var 'aux2082' order represents '0' with '-8824'
c Encoding variable: aux2083 with domain: bool (representing constraint ((x_00007_00001 + x_00006_00001)<=6))
c Var 'aux2083' direct represents '0' with '-8825'
c Var 'aux2083' direct represents '1' with '8825'
c Var 'aux2083' order represents '1' with '1'
c Var 'aux2083' order represents '0' with '-8825'
c Encoding variable: aux2084 with domain: bool (representing constraint (6<=(x_00007_00001 + x_00006_00001)))
c Var 'aux2084' direct represents '0' with '-8826'
c Var 'aux2084' direct represents '1' with '8826'
c Var 'aux2084' order represents '1' with '1'
c Var 'aux2084' order represents '0' with '-8826'
c Encoding variable: aux2085 with domain: bool (representing constraint ((shift(x_00007_00004, -1) + aux400 + shift(x_00006_00003, -1))<=10))
c Var 'aux2085' direct represents '0' with '-8827'
c Var 'aux2085' direct represents '1' with '8827'
c Var 'aux2085' order represents '1' with '1'
c Var 'aux2085' order represents '0' with '-8827'
c Encoding variable: aux2086 with domain: bool (representing constraint (10<=(shift(x_00007_00004, -1) + aux400 + shift(x_00006_00003, -1))))
c Var 'aux2086' direct represents '0' with '-8828'
c Var 'aux2086' direct represents '1' with '8828'
c Var 'aux2086' order represents '1' with '1'
c Var 'aux2086' order represents '0' with '-8828'
c Encoding variable: aux2087 with domain: bool (representing constraint ((aux401 + aux402 + shift(x_00006_00006, -1))<=27))
c Var 'aux2087' direct represents '0' with '-8829'
c Var 'aux2087' direct represents '1' with '8829'
c Var 'aux2087' order represents '1' with '1'
c Var 'aux2087' order represents '0' with '-8829'
c Encoding variable: aux2088 with domain: bool (representing constraint (27<=(aux401 + aux402 + shift(x_00006_00006, -1))))
c Var 'aux2088' direct represents '0' with '-8830'
c Var 'aux2088' direct represents '1' with '8830'
c Var 'aux2088' order represents '1' with '1'
c Var 'aux2088' order represents '0' with '-8830'
c Encoding variable: aux2089 with domain: bool (representing constraint ((x_00007_00009 + x_00006_00009)<=10))
c Var 'aux2089' direct represents '0' with '-8831'
c Var 'aux2089' direct represents '1' with '8831'
c Var 'aux2089' order represents '1' with '1'
c Var 'aux2089' order represents '0' with '-8831'
c Encoding variable: aux2090 with domain: bool (representing constraint (10<=(x_00007_00009 + x_00006_00009)))
c Var 'aux2090' direct represents '0' with '-8832'
c Var 'aux2090' direct represents '1' with '8832'
c Var 'aux2090' order represents '1' with '1'
c Var 'aux2090' order represents '0' with '-8832'
c Encoding variable: aux2091 with domain: bool (representing constraint ((aux403 + aux404 + aux405)<=27))
c Var 'aux2091' direct represents '0' with '-8833'
c Var 'aux2091' direct represents '1' with '8833'
c Var 'aux2091' order represents '1' with '1'
c Var 'aux2091' order represents '0' with '-8833'
c Encoding variable: aux2092 with domain: bool (representing constraint (27<=(aux403 + aux404 + aux405)))
c Var 'aux2092' direct represents '0' with '-8834'
c Var 'aux2092' direct represents '1' with '8834'
c Var 'aux2092' order represents '1' with '1'
c Var 'aux2092' order represents '0' with '-8834'
c Encoding variable: aux2093 with domain: bool (representing constraint ((aux406 + shift(x_00008_00006, -1) + shift(x_00009_00005, -1))<=11))
c Var 'aux2093' direct represents '0' with '-8835'
c Var 'aux2093' direct represents '1' with '8835'
c Var 'aux2093' order represents '1' with '1'
c Var 'aux2093' order represents '0' with '-8835'
c Encoding variable: aux2094 with domain: bool (representing constraint (11<=(aux406 + shift(x_00008_00006, -1) + shift(x_00009_00005, -1))))
c Var 'aux2094' direct represents '0' with '-8836'
c Var 'aux2094' direct represents '1' with '8836'
c Var 'aux2094' order represents '1' with '1'
c Var 'aux2094' order represents '0' with '-8836'
c Encoding variable: aux2095 with domain: bool (representing constraint ((x_00008_00004 + x_00008_00005)<=9))
c Var 'aux2095' direct represents '0' with '-8837'
c Var 'aux2095' direct represents '1' with '8837'
c Var 'aux2095' order represents '1' with '1'
c Var 'aux2095' order represents '0' with '-8837'
c Encoding variable: aux2096 with domain: bool (representing constraint (9<=(x_00008_00004 + x_00008_00005)))
c Var 'aux2096' direct represents '0' with '-8838'
c Var 'aux2096' direct represents '1' with '8838'
c Var 'aux2096' order represents '1' with '1'
c Var 'aux2096' order represents '0' with '-8838'
c Encoding variable: aux2097 with domain: bool (representing constraint ((x_00008_00007 + x_00008_00008)<=12))
c Var 'aux2097' direct represents '0' with '-8839'
c Var 'aux2097' direct represents '1' with '8839'
c Var 'aux2097' order represents '1' with '1'
c Var 'aux2097' order represents '0' with '-8839'
c Encoding variable: aux2098 with domain: bool (representing constraint (12<=(x_00008_00007 + x_00008_00008)))
c Var 'aux2098' direct represents '0' with '-8840'
c Var 'aux2098' direct represents '1' with '8840'
c Var 'aux2098' order represents '1' with '1'
c Var 'aux2098' order represents '0' with '-8840'
c Encoding variable: aux2099 with domain: bool (representing constraint ((aux407 + shift(x_00009_00007, -1) + shift(x_00009_00008, -1))<=9))
c Var 'aux2099' direct represents '0' with '-8841'
c Var 'aux2099' direct represents '1' with '8841'
c Var 'aux2099' order represents '1' with '1'
c Var 'aux2099' order represents '0' with '-8841'
c Encoding variable: aux2100 with domain: bool (representing constraint (9<=(aux407 + shift(x_00009_00007, -1) + shift(x_00009_00008, -1))))
c Var 'aux2100' direct represents '0' with '-8842'
c Var 'aux2100' direct represents '1' with '8842'
c Var 'aux2100' order represents '1' with '1'
c Var 'aux2100' order represents '0' with '-8842'
c Encoding variable: aux2101 with domain: bool (representing constraint ((x_00009_00003 + x_00009_00004)<=17))
c Var 'aux2101' direct represents '0' with '-8843'
c Var 'aux2101' direct represents '1' with '8843'
c Var 'aux2101' order represents '1' with '1'
c Var 'aux2101' order represents '0' with '-8843'
c Encoding variable: aux2102 with domain: bool (representing constraint (17<=(x_00009_00003 + x_00009_00004)))
c Var 'aux2102' direct represents '0' with '-8844'
c Var 'aux2102' direct represents '1' with '8844'
c Var 'aux2102' order represents '1' with '1'
c Var 'aux2102' order represents '0' with '-8844'
c Encoding variable: aux2103 with domain: bool (representing constraint ((aux409 + aux412 + aux413)<=1))
c Var 'aux2103' direct represents '0' with '-8845'
c Var 'aux2103' direct represents '1' with '8845'
c Var 'aux2103' order represents '1' with '1'
c Var 'aux2103' order represents '0' with '-8845'
c Encoding variable: aux2104 with domain: bool (representing constraint (1<=(aux409 + aux412 + aux413)))
c Var 'aux2104' direct represents '0' with '-8846'
c Var 'aux2104' direct represents '1' with '8846'
c Var 'aux2104' order represents '1' with '1'
c Var 'aux2104' order represents '0' with '-8846'
c Encoding variable: aux2105 with domain: bool (representing constraint ((aux415 + aux418 + aux419)<=1))
c Var 'aux2105' direct represents '0' with '-8847'
c Var 'aux2105' direct represents '1' with '8847'
c Var 'aux2105' order represents '1' with '1'
c Var 'aux2105' order represents '0' with '-8847'
c Encoding variable: aux2106 with domain: bool (representing constraint (1<=(aux415 + aux418 + aux419)))
c Var 'aux2106' direct represents '0' with '-8848'
c Var 'aux2106' direct represents '1' with '8848'
c Var 'aux2106' order represents '1' with '1'
c Var 'aux2106' order represents '0' with '-8848'
c Encoding variable: aux2107 with domain: bool (representing constraint ((aux421 + aux424 + aux425)<=1))
c Var 'aux2107' direct represents '0' with '-8849'
c Var 'aux2107' direct represents '1' with '8849'
c Var 'aux2107' order represents '1' with '1'
c Var 'aux2107' order represents '0' with '-8849'
c Encoding variable: aux2108 with domain: bool (representing constraint (1<=(aux421 + aux424 + aux425)))
c Var 'aux2108' direct represents '0' with '-8850'
c Var 'aux2108' direct represents '1' with '8850'
c Var 'aux2108' order represents '1' with '1'
c Var 'aux2108' order represents '0' with '-8850'
c Encoding variable: aux2109 with domain: bool (representing constraint ((aux427 + aux430 + aux431)<=1))
c Var 'aux2109' direct represents '0' with '-8851'
c Var 'aux2109' direct represents '1' with '8851'
c Var 'aux2109' order represents '1' with '1'
c Var 'aux2109' order represents '0' with '-8851'
c Encoding variable: aux2110 with domain: bool (representing constraint (1<=(aux427 + aux430 + aux431)))
c Var 'aux2110' direct represents '0' with '-8852'
c Var 'aux2110' direct represents '1' with '8852'
c Var 'aux2110' order represents '1' with '1'
c Var 'aux2110' order represents '0' with '-8852'
c Encoding variable: aux2111 with domain: bool (representing constraint ((aux433 + aux436 + aux437)<=1))
c Var 'aux2111' direct represents '0' with '-8853'
c Var 'aux2111' direct represents '1' with '8853'
c Var 'aux2111' order represents '1' with '1'
c Var 'aux2111' order represents '0' with '-8853'
c Encoding variable: aux2112 with domain: bool (representing constraint (1<=(aux433 + aux436 + aux437)))
c Var 'aux2112' direct represents '0' with '-8854'
c Var 'aux2112' direct represents '1' with '8854'
c Var 'aux2112' order represents '1' with '1'
c Var 'aux2112' order represents '0' with '-8854'
c Encoding variable: aux2113 with domain: bool (representing constraint ((aux439 + aux442 + aux443)<=1))
c Var 'aux2113' direct represents '0' with '-8855'
c Var 'aux2113' direct represents '1' with '8855'
c Var 'aux2113' order represents '1' with '1'
c Var 'aux2113' order represents '0' with '-8855'
c Encoding variable: aux2114 with domain: bool (representing constraint (1<=(aux439 + aux442 + aux443)))
c Var 'aux2114' direct represents '0' with '-8856'
c Var 'aux2114' direct represents '1' with '8856'
c Var 'aux2114' order represents '1' with '1'
c Var 'aux2114' order represents '0' with '-8856'
c Encoding variable: aux2115 with domain: bool (representing constraint ((aux445 + aux448 + aux449)<=1))
c Var 'aux2115' direct represents '0' with '-8857'
c Var 'aux2115' direct represents '1' with '8857'
c Var 'aux2115' order represents '1' with '1'
c Var 'aux2115' order represents '0' with '-8857'
c Encoding variable: aux2116 with domain: bool (representing constraint (1<=(aux445 + aux448 + aux449)))
c Var 'aux2116' direct represents '0' with '-8858'
c Var 'aux2116' direct represents '1' with '8858'
c Var 'aux2116' order represents '1' with '1'
c Var 'aux2116' order represents '0' with '-8858'
c Encoding variable: aux2117 with domain: bool (representing constraint ((aux451 + aux454 + aux455)<=1))
c Var 'aux2117' direct represents '0' with '-8859'
c Var 'aux2117' direct represents '1' with '8859'
c Var 'aux2117' order represents '1' with '1'
c Var 'aux2117' order represents '0' with '-8859'
c Encoding variable: aux2118 with domain: bool (representing constraint (1<=(aux451 + aux454 + aux455)))
c Var 'aux2118' direct represents '0' with '-8860'
c Var 'aux2118' direct represents '1' with '8860'
c Var 'aux2118' order represents '1' with '1'
c Var 'aux2118' order represents '0' with '-8860'
c Encoding variable: aux2119 with domain: bool (representing constraint ((aux457 + aux460 + aux461)<=1))
c Var 'aux2119' direct represents '0' with '-8861'
c Var 'aux2119' direct represents '1' with '8861'
c Var 'aux2119' order represents '1' with '1'
c Var 'aux2119' order represents '0' with '-8861'
c Encoding variable: aux2120 with domain: bool (representing constraint (1<=(aux457 + aux460 + aux461)))
c Var 'aux2120' direct represents '0' with '-8862'
c Var 'aux2120' direct represents '1' with '8862'
c Var 'aux2120' order represents '1' with '1'
c Var 'aux2120' order represents '0' with '-8862'
c Encoding variable: aux2121 with domain: bool (representing constraint ((aux463 + aux466 + aux467)<=1))
c Var 'aux2121' direct represents '0' with '-8863'
c Var 'aux2121' direct represents '1' with '8863'
c Var 'aux2121' order represents '1' with '1'
c Var 'aux2121' order represents '0' with '-8863'
c Encoding variable: aux2122 with domain: bool (representing constraint (1<=(aux463 + aux466 + aux467)))
c Var 'aux2122' direct represents '0' with '-8864'
c Var 'aux2122' direct represents '1' with '8864'
c Var 'aux2122' order represents '1' with '1'
c Var 'aux2122' order represents '0' with '-8864'
c Encoding variable: aux2123 with domain: bool (representing constraint ((aux469 + aux472 + aux473)<=1))
c Var 'aux2123' direct represents '0' with '-8865'
c Var 'aux2123' direct represents '1' with '8865'
c Var 'aux2123' order represents '1' with '1'
c Var 'aux2123' order represents '0' with '-8865'
c Encoding variable: aux2124 with domain: bool (representing constraint (1<=(aux469 + aux472 + aux473)))
c Var 'aux2124' direct represents '0' with '-8866'
c Var 'aux2124' direct represents '1' with '8866'
c Var 'aux2124' order represents '1' with '1'
c Var 'aux2124' order represents '0' with '-8866'
c Encoding variable: aux2125 with domain: bool (representing constraint ((aux475 + aux478 + aux479)<=1))
c Var 'aux2125' direct represents '0' with '-8867'
c Var 'aux2125' direct represents '1' with '8867'
c Var 'aux2125' order represents '1' with '1'
c Var 'aux2125' order represents '0' with '-8867'
c Encoding variable: aux2126 with domain: bool (representing constraint (1<=(aux475 + aux478 + aux479)))
c Var 'aux2126' direct represents '0' with '-8868'
c Var 'aux2126' direct represents '1' with '8868'
c Var 'aux2126' order represents '1' with '1'
c Var 'aux2126' order represents '0' with '-8868'
c Encoding variable: aux2127 with domain: bool (representing constraint ((aux481 + aux484 + aux485)<=1))
c Var 'aux2127' direct represents '0' with '-8869'
c Var 'aux2127' direct represents '1' with '8869'
c Var 'aux2127' order represents '1' with '1'
c Var 'aux2127' order represents '0' with '-8869'
c Encoding variable: aux2128 with domain: bool (representing constraint (1<=(aux481 + aux484 + aux485)))
c Var 'aux2128' direct represents '0' with '-8870'
c Var 'aux2128' direct represents '1' with '8870'
c Var 'aux2128' order represents '1' with '1'
c Var 'aux2128' order represents '0' with '-8870'
c Encoding variable: aux2129 with domain: bool (representing constraint ((aux487 + aux490 + aux491)<=1))
c Var 'aux2129' direct represents '0' with '-8871'
c Var 'aux2129' direct represents '1' with '8871'
c Var 'aux2129' order represents '1' with '1'
c Var 'aux2129' order represents '0' with '-8871'
c Encoding variable: aux2130 with domain: bool (representing constraint (1<=(aux487 + aux490 + aux491)))
c Var 'aux2130' direct represents '0' with '-8872'
c Var 'aux2130' direct represents '1' with '8872'
c Var 'aux2130' order represents '1' with '1'
c Var 'aux2130' order represents '0' with '-8872'
c Encoding variable: aux2131 with domain: bool (representing constraint ((aux493 + aux496 + aux497)<=1))
c Var 'aux2131' direct represents '0' with '-8873'
c Var 'aux2131' direct represents '1' with '8873'
c Var 'aux2131' order represents '1' with '1'
c Var 'aux2131' order represents '0' with '-8873'
c Encoding variable: aux2132 with domain: bool (representing constraint (1<=(aux493 + aux496 + aux497)))
c Var 'aux2132' direct represents '0' with '-8874'
c Var 'aux2132' direct represents '1' with '8874'
c Var 'aux2132' order represents '1' with '1'
c Var 'aux2132' order represents '0' with '-8874'
c Encoding variable: aux2133 with domain: bool (representing constraint ((aux499 + aux502 + aux503)<=1))
c Var 'aux2133' direct represents '0' with '-8875'
c Var 'aux2133' direct represents '1' with '8875'
c Var 'aux2133' order represents '1' with '1'
c Var 'aux2133' order represents '0' with '-8875'
c Encoding variable: aux2134 with domain: bool (representing constraint (1<=(aux499 + aux502 + aux503)))
c Var 'aux2134' direct represents '0' with '-8876'
c Var 'aux2134' direct represents '1' with '8876'
c Var 'aux2134' order represents '1' with '1'
c Var 'aux2134' order represents '0' with '-8876'
c Encoding variable: aux2135 with domain: bool (representing constraint ((aux505 + aux508 + aux509)<=1))
c Var 'aux2135' direct represents '0' with '-8877'
c Var 'aux2135' direct represents '1' with '8877'
c Var 'aux2135' order represents '1' with '1'
c Var 'aux2135' order represents '0' with '-8877'
c Encoding variable: aux2136 with domain: bool (representing constraint (1<=(aux505 + aux508 + aux509)))
c Var 'aux2136' direct represents '0' with '-8878'
c Var 'aux2136' direct represents '1' with '8878'
c Var 'aux2136' order represents '1' with '1'
c Var 'aux2136' order represents '0' with '-8878'
c Encoding variable: aux2137 with domain: bool (representing constraint ((aux511 + aux514 + aux515)<=1))
c Var 'aux2137' direct represents '0' with '-8879'
c Var 'aux2137' direct represents '1' with '8879'
c Var 'aux2137' order represents '1' with '1'
c Var 'aux2137' order represents '0' with '-8879'
c Encoding variable: aux2138 with domain: bool (representing constraint (1<=(aux511 + aux514 + aux515)))
c Var 'aux2138' direct represents '0' with '-8880'
c Var 'aux2138' direct represents '1' with '8880'
c Var 'aux2138' order represents '1' with '1'
c Var 'aux2138' order represents '0' with '-8880'
c Encoding variable: aux2139 with domain: bool (representing constraint ((aux517 + aux520 + aux521)<=1))
c Var 'aux2139' direct represents '0' with '-8881'
c Var 'aux2139' direct represents '1' with '8881'
c Var 'aux2139' order represents '1' with '1'
c Var 'aux2139' order represents '0' with '-8881'
c Encoding variable: aux2140 with domain: bool (representing constraint (1<=(aux517 + aux520 + aux521)))
c Var 'aux2140' direct represents '0' with '-8882'
c Var 'aux2140' direct represents '1' with '8882'
c Var 'aux2140' order represents '1' with '1'
c Var 'aux2140' order represents '0' with '-8882'
c Encoding variable: aux2141 with domain: bool (representing constraint ((aux523 + aux526 + aux527)<=1))
c Var 'aux2141' direct represents '0' with '-8883'
c Var 'aux2141' direct represents '1' with '8883'
c Var 'aux2141' order represents '1' with '1'
c Var 'aux2141' order represents '0' with '-8883'
c Encoding variable: aux2142 with domain: bool (representing constraint (1<=(aux523 + aux526 + aux527)))
c Var 'aux2142' direct represents '0' with '-8884'
c Var 'aux2142' direct represents '1' with '8884'
c Var 'aux2142' order represents '1' with '1'
c Var 'aux2142' order represents '0' with '-8884'
c Encoding variable: aux2143 with domain: bool (representing constraint ((aux529 + aux532 + aux533)<=1))
c Var 'aux2143' direct represents '0' with '-8885'
c Var 'aux2143' direct represents '1' with '8885'
c Var 'aux2143' order represents '1' with '1'
c Var 'aux2143' order represents '0' with '-8885'
c Encoding variable: aux2144 with domain: bool (representing constraint (1<=(aux529 + aux532 + aux533)))
c Var 'aux2144' direct represents '0' with '-8886'
c Var 'aux2144' direct represents '1' with '8886'
c Var 'aux2144' order represents '1' with '1'
c Var 'aux2144' order represents '0' with '-8886'
c Encoding variable: aux2145 with domain: bool (representing constraint ((aux535 + aux538 + aux539)<=1))
c Var 'aux2145' direct represents '0' with '-8887'
c Var 'aux2145' direct represents '1' with '8887'
c Var 'aux2145' order represents '1' with '1'
c Var 'aux2145' order represents '0' with '-8887'
c Encoding variable: aux2146 with domain: bool (representing constraint (1<=(aux535 + aux538 + aux539)))
c Var 'aux2146' direct represents '0' with '-8888'
c Var 'aux2146' direct represents '1' with '8888'
c Var 'aux2146' order represents '1' with '1'
c Var 'aux2146' order represents '0' with '-8888'
c Encoding variable: aux2147 with domain: bool (representing constraint ((aux541 + aux544 + aux545)<=1))
c Var 'aux2147' direct represents '0' with '-8889'
c Var 'aux2147' direct represents '1' with '8889'
c Var 'aux2147' order represents '1' with '1'
c Var 'aux2147' order represents '0' with '-8889'
c Encoding variable: aux2148 with domain: bool (representing constraint (1<=(aux541 + aux544 + aux545)))
c Var 'aux2148' direct represents '0' with '-8890'
c Var 'aux2148' direct represents '1' with '8890'
c Var 'aux2148' order represents '1' with '1'
c Var 'aux2148' order represents '0' with '-8890'
c Encoding variable: aux2149 with domain: bool (representing constraint ((aux547 + aux550 + aux551)<=1))
c Var 'aux2149' direct represents '0' with '-8891'
c Var 'aux2149' direct represents '1' with '8891'
c Var 'aux2149' order represents '1' with '1'
c Var 'aux2149' order represents '0' with '-8891'
c Encoding variable: aux2150 with domain: bool (representing constraint (1<=(aux547 + aux550 + aux551)))
c Var 'aux2150' direct represents '0' with '-8892'
c Var 'aux2150' direct represents '1' with '8892'
c Var 'aux2150' order represents '1' with '1'
c Var 'aux2150' order represents '0' with '-8892'
c Encoding variable: aux2151 with domain: bool (representing constraint ((aux553 + aux556 + aux557)<=1))
c Var 'aux2151' direct represents '0' with '-8893'
c Var 'aux2151' direct represents '1' with '8893'
c Var 'aux2151' order represents '1' with '1'
c Var 'aux2151' order represents '0' with '-8893'
c Encoding variable: aux2152 with domain: bool (representing constraint (1<=(aux553 + aux556 + aux557)))
c Var 'aux2152' direct represents '0' with '-8894'
c Var 'aux2152' direct represents '1' with '8894'
c Var 'aux2152' order represents '1' with '1'
c Var 'aux2152' order represents '0' with '-8894'
c Encoding variable: aux2153 with domain: bool (representing constraint ((aux559 + aux562 + aux563)<=1))
c Var 'aux2153' direct represents '0' with '-8895'
c Var 'aux2153' direct represents '1' with '8895'
c Var 'aux2153' order represents '1' with '1'
c Var 'aux2153' order represents '0' with '-8895'
c Encoding variable: aux2154 with domain: bool (representing constraint (1<=(aux559 + aux562 + aux563)))
c Var 'aux2154' direct represents '0' with '-8896'
c Var 'aux2154' direct represents '1' with '8896'
c Var 'aux2154' order represents '1' with '1'
c Var 'aux2154' order represents '0' with '-8896'
c Encoding variable: aux2155 with domain: bool (representing constraint ((aux565 + aux568 + aux569)<=1))
c Var 'aux2155' direct represents '0' with '-8897'
c Var 'aux2155' direct represents '1' with '8897'
c Var 'aux2155' order represents '1' with '1'
c Var 'aux2155' order represents '0' with '-8897'
c Encoding variable: aux2156 with domain: bool (representing constraint (1<=(aux565 + aux568 + aux569)))
c Var 'aux2156' direct represents '0' with '-8898'
c Var 'aux2156' direct represents '1' with '8898'
c Var 'aux2156' order represents '1' with '1'
c Var 'aux2156' order represents '0' with '-8898'
c Encoding variable: aux2157 with domain: bool (representing constraint ((aux571 + aux574 + aux575)<=1))
c Var 'aux2157' direct represents '0' with '-8899'
c Var 'aux2157' direct represents '1' with '8899'
c Var 'aux2157' order represents '1' with '1'
c Var 'aux2157' order represents '0' with '-8899'
c Encoding variable: aux2158 with domain: bool (representing constraint (1<=(aux571 + aux574 + aux575)))
c Var 'aux2158' direct represents '0' with '-8900'
c Var 'aux2158' direct represents '1' with '8900'
c Var 'aux2158' order represents '1' with '1'
c Var 'aux2158' order represents '0' with '-8900'
c Encoding variable: aux2159 with domain: bool (representing constraint ((aux577 + aux580 + aux581)<=1))
c Var 'aux2159' direct represents '0' with '-8901'
c Var 'aux2159' direct represents '1' with '8901'
c Var 'aux2159' order represents '1' with '1'
c Var 'aux2159' order represents '0' with '-8901'
c Encoding variable: aux2160 with domain: bool (representing constraint (1<=(aux577 + aux580 + aux581)))
c Var 'aux2160' direct represents '0' with '-8902'
c Var 'aux2160' direct represents '1' with '8902'
c Var 'aux2160' order represents '1' with '1'
c Var 'aux2160' order represents '0' with '-8902'
c Encoding variable: aux2161 with domain: bool (representing constraint ((aux583 + aux586 + aux587)<=1))
c Var 'aux2161' direct represents '0' with '-8903'
c Var 'aux2161' direct represents '1' with '8903'
c Var 'aux2161' order represents '1' with '1'
c Var 'aux2161' order represents '0' with '-8903'
c Encoding variable: aux2162 with domain: bool (representing constraint (1<=(aux583 + aux586 + aux587)))
c Var 'aux2162' direct represents '0' with '-8904'
c Var 'aux2162' direct represents '1' with '8904'
c Var 'aux2162' order represents '1' with '1'
c Var 'aux2162' order represents '0' with '-8904'
c Encoding variable: aux2163 with domain: bool (representing constraint ((aux589 + aux592 + aux593)<=1))
c Var 'aux2163' direct represents '0' with '-8905'
c Var 'aux2163' direct represents '1' with '8905'
c Var 'aux2163' order represents '1' with '1'
c Var 'aux2163' order represents '0' with '-8905'
c Encoding variable: aux2164 with domain: bool (representing constraint (1<=(aux589 + aux592 + aux593)))
c Var 'aux2164' direct represents '0' with '-8906'
c Var 'aux2164' direct represents '1' with '8906'
c Var 'aux2164' order represents '1' with '1'
c Var 'aux2164' order represents '0' with '-8906'
c Encoding variable: aux2165 with domain: bool (representing constraint ((aux595 + aux598 + aux599)<=1))
c Var 'aux2165' direct represents '0' with '-8907'
c Var 'aux2165' direct represents '1' with '8907'
c Var 'aux2165' order represents '1' with '1'
c Var 'aux2165' order represents '0' with '-8907'
c Encoding variable: aux2166 with domain: bool (representing constraint (1<=(aux595 + aux598 + aux599)))
c Var 'aux2166' direct represents '0' with '-8908'
c Var 'aux2166' direct represents '1' with '8908'
c Var 'aux2166' order represents '1' with '1'
c Var 'aux2166' order represents '0' with '-8908'
c Encoding variable: aux2167 with domain: bool (representing constraint ((aux601 + aux604 + aux605)<=1))
c Var 'aux2167' direct represents '0' with '-8909'
c Var 'aux2167' direct represents '1' with '8909'
c Var 'aux2167' order represents '1' with '1'
c Var 'aux2167' order represents '0' with '-8909'
c Encoding variable: aux2168 with domain: bool (representing constraint (1<=(aux601 + aux604 + aux605)))
c Var 'aux2168' direct represents '0' with '-8910'
c Var 'aux2168' direct represents '1' with '8910'
c Var 'aux2168' order represents '1' with '1'
c Var 'aux2168' order represents '0' with '-8910'
c Encoding variable: aux2169 with domain: bool (representing constraint ((aux607 + aux610 + aux611)<=1))
c Var 'aux2169' direct represents '0' with '-8911'
c Var 'aux2169' direct represents '1' with '8911'
c Var 'aux2169' order represents '1' with '1'
c Var 'aux2169' order represents '0' with '-8911'
c Encoding variable: aux2170 with domain: bool (representing constraint (1<=(aux607 + aux610 + aux611)))
c Var 'aux2170' direct represents '0' with '-8912'
c Var 'aux2170' direct represents '1' with '8912'
c Var 'aux2170' order represents '1' with '1'
c Var 'aux2170' order represents '0' with '-8912'
c Encoding variable: aux2171 with domain: bool (representing constraint ((aux613 + aux616 + aux617)<=1))
c Var 'aux2171' direct represents '0' with '-8913'
c Var 'aux2171' direct represents '1' with '8913'
c Var 'aux2171' order represents '1' with '1'
c Var 'aux2171' order represents '0' with '-8913'
c Encoding variable: aux2172 with domain: bool (representing constraint (1<=(aux613 + aux616 + aux617)))
c Var 'aux2172' direct represents '0' with '-8914'
c Var 'aux2172' direct represents '1' with '8914'
c Var 'aux2172' order represents '1' with '1'
c Var 'aux2172' order represents '0' with '-8914'
c Encoding variable: aux2173 with domain: bool (representing constraint ((aux619 + aux622 + aux623)<=1))
c Var 'aux2173' direct represents '0' with '-8915'
c Var 'aux2173' direct represents '1' with '8915'
c Var 'aux2173' order represents '1' with '1'
c Var 'aux2173' order represents '0' with '-8915'
c Encoding variable: aux2174 with domain: bool (representing constraint (1<=(aux619 + aux622 + aux623)))
c Var 'aux2174' direct represents '0' with '-8916'
c Var 'aux2174' direct represents '1' with '8916'
c Var 'aux2174' order represents '1' with '1'
c Var 'aux2174' order represents '0' with '-8916'
c Encoding variable: aux2175 with domain: bool (representing constraint ((aux625 + aux628 + aux629)<=1))
c Var 'aux2175' direct represents '0' with '-8917'
c Var 'aux2175' direct represents '1' with '8917'
c Var 'aux2175' order represents '1' with '1'
c Var 'aux2175' order represents '0' with '-8917'
c Encoding variable: aux2176 with domain: bool (representing constraint (1<=(aux625 + aux628 + aux629)))
c Var 'aux2176' direct represents '0' with '-8918'
c Var 'aux2176' direct represents '1' with '8918'
c Var 'aux2176' order represents '1' with '1'
c Var 'aux2176' order represents '0' with '-8918'
c Encoding variable: aux2177 with domain: bool (representing constraint ((aux631 + aux634 + aux635)<=1))
c Var 'aux2177' direct represents '0' with '-8919'
c Var 'aux2177' direct represents '1' with '8919'
c Var 'aux2177' order represents '1' with '1'
c Var 'aux2177' order represents '0' with '-8919'
c Encoding variable: aux2178 with domain: bool (representing constraint (1<=(aux631 + aux634 + aux635)))
c Var 'aux2178' direct represents '0' with '-8920'
c Var 'aux2178' direct represents '1' with '8920'
c Var 'aux2178' order represents '1' with '1'
c Var 'aux2178' order represents '0' with '-8920'
c Encoding variable: aux2179 with domain: bool (representing constraint ((aux637 + aux640 + aux641)<=1))
c Var 'aux2179' direct represents '0' with '-8921'
c Var 'aux2179' direct represents '1' with '8921'
c Var 'aux2179' order represents '1' with '1'
c Var 'aux2179' order represents '0' with '-8921'
c Encoding variable: aux2180 with domain: bool (representing constraint (1<=(aux637 + aux640 + aux641)))
c Var 'aux2180' direct represents '0' with '-8922'
c Var 'aux2180' direct represents '1' with '8922'
c Var 'aux2180' order represents '1' with '1'
c Var 'aux2180' order represents '0' with '-8922'
c Encoding variable: aux2181 with domain: bool (representing constraint ((aux643 + aux646 + aux647)<=1))
c Var 'aux2181' direct represents '0' with '-8923'
c Var 'aux2181' direct represents '1' with '8923'
c Var 'aux2181' order represents '1' with '1'
c Var 'aux2181' order represents '0' with '-8923'
c Encoding variable: aux2182 with domain: bool (representing constraint (1<=(aux643 + aux646 + aux647)))
c Var 'aux2182' direct represents '0' with '-8924'
c Var 'aux2182' direct represents '1' with '8924'
c Var 'aux2182' order represents '1' with '1'
c Var 'aux2182' order represents '0' with '-8924'
c Encoding variable: aux2183 with domain: bool (representing constraint ((aux649 + aux652 + aux653)<=1))
c Var 'aux2183' direct represents '0' with '-8925'
c Var 'aux2183' direct represents '1' with '8925'
c Var 'aux2183' order represents '1' with '1'
c Var 'aux2183' order represents '0' with '-8925'
c Encoding variable: aux2184 with domain: bool (representing constraint (1<=(aux649 + aux652 + aux653)))
c Var 'aux2184' direct represents '0' with '-8926'
c Var 'aux2184' direct represents '1' with '8926'
c Var 'aux2184' order represents '1' with '1'
c Var 'aux2184' order represents '0' with '-8926'
c Encoding variable: aux2185 with domain: bool (representing constraint ((aux655 + aux658 + aux659)<=1))
c Var 'aux2185' direct represents '0' with '-8927'
c Var 'aux2185' direct represents '1' with '8927'
c Var 'aux2185' order represents '1' with '1'
c Var 'aux2185' order represents '0' with '-8927'
c Encoding variable: aux2186 with domain: bool (representing constraint (1<=(aux655 + aux658 + aux659)))
c Var 'aux2186' direct represents '0' with '-8928'
c Var 'aux2186' direct represents '1' with '8928'
c Var 'aux2186' order represents '1' with '1'
c Var 'aux2186' order represents '0' with '-8928'
c Encoding variable: aux2187 with domain: bool (representing constraint ((aux661 + aux664 + aux665)<=1))
c Var 'aux2187' direct represents '0' with '-8929'
c Var 'aux2187' direct represents '1' with '8929'
c Var 'aux2187' order represents '1' with '1'
c Var 'aux2187' order represents '0' with '-8929'
c Encoding variable: aux2188 with domain: bool (representing constraint (1<=(aux661 + aux664 + aux665)))
c Var 'aux2188' direct represents '0' with '-8930'
c Var 'aux2188' direct represents '1' with '8930'
c Var 'aux2188' order represents '1' with '1'
c Var 'aux2188' order represents '0' with '-8930'
c Encoding variable: aux2189 with domain: bool (representing constraint ((aux667 + aux670 + aux671)<=1))
c Var 'aux2189' direct represents '0' with '-8931'
c Var 'aux2189' direct represents '1' with '8931'
c Var 'aux2189' order represents '1' with '1'
c Var 'aux2189' order represents '0' with '-8931'
c Encoding variable: aux2190 with domain: bool (representing constraint (1<=(aux667 + aux670 + aux671)))
c Var 'aux2190' direct represents '0' with '-8932'
c Var 'aux2190' direct represents '1' with '8932'
c Var 'aux2190' order represents '1' with '1'
c Var 'aux2190' order represents '0' with '-8932'
c Encoding variable: aux2191 with domain: bool (representing constraint ((aux673 + aux676 + aux677)<=1))
c Var 'aux2191' direct represents '0' with '-8933'
c Var 'aux2191' direct represents '1' with '8933'
c Var 'aux2191' order represents '1' with '1'
c Var 'aux2191' order represents '0' with '-8933'
c Encoding variable: aux2192 with domain: bool (representing constraint (1<=(aux673 + aux676 + aux677)))
c Var 'aux2192' direct represents '0' with '-8934'
c Var 'aux2192' direct represents '1' with '8934'
c Var 'aux2192' order represents '1' with '1'
c Var 'aux2192' order represents '0' with '-8934'
c Encoding variable: aux2193 with domain: bool (representing constraint ((aux679 + aux682 + aux683)<=1))
c Var 'aux2193' direct represents '0' with '-8935'
c Var 'aux2193' direct represents '1' with '8935'
c Var 'aux2193' order represents '1' with '1'
c Var 'aux2193' order represents '0' with '-8935'
c Encoding variable: aux2194 with domain: bool (representing constraint (1<=(aux679 + aux682 + aux683)))
c Var 'aux2194' direct represents '0' with '-8936'
c Var 'aux2194' direct represents '1' with '8936'
c Var 'aux2194' order represents '1' with '1'
c Var 'aux2194' order represents '0' with '-8936'
c Encoding variable: aux2195 with domain: bool (representing constraint ((aux685 + aux688 + aux689)<=1))
c Var 'aux2195' direct represents '0' with '-8937'
c Var 'aux2195' direct represents '1' with '8937'
c Var 'aux2195' order represents '1' with '1'
c Var 'aux2195' order represents '0' with '-8937'
c Encoding variable: aux2196 with domain: bool (representing constraint (1<=(aux685 + aux688 + aux689)))
c Var 'aux2196' direct represents '0' with '-8938'
c Var 'aux2196' direct represents '1' with '8938'
c Var 'aux2196' order represents '1' with '1'
c Var 'aux2196' order represents '0' with '-8938'
c Encoding variable: aux2197 with domain: bool (representing constraint ((aux691 + aux694 + aux695)<=1))
c Var 'aux2197' direct represents '0' with '-8939'
c Var 'aux2197' direct represents '1' with '8939'
c Var 'aux2197' order represents '1' with '1'
c Var 'aux2197' order represents '0' with '-8939'
c Encoding variable: aux2198 with domain: bool (representing constraint (1<=(aux691 + aux694 + aux695)))
c Var 'aux2198' direct represents '0' with '-8940'
c Var 'aux2198' direct represents '1' with '8940'
c Var 'aux2198' order represents '1' with '1'
c Var 'aux2198' order represents '0' with '-8940'
c Encoding variable: aux2199 with domain: bool (representing constraint ((aux697 + aux700 + aux701)<=1))
c Var 'aux2199' direct represents '0' with '-8941'
c Var 'aux2199' direct represents '1' with '8941'
c Var 'aux2199' order represents '1' with '1'
c Var 'aux2199' order represents '0' with '-8941'
c Encoding variable: aux2200 with domain: bool (representing constraint (1<=(aux697 + aux700 + aux701)))
c Var 'aux2200' direct represents '0' with '-8942'
c Var 'aux2200' direct represents '1' with '8942'
c Var 'aux2200' order represents '1' with '1'
c Var 'aux2200' order represents '0' with '-8942'
c Encoding variable: aux2201 with domain: bool (representing constraint ((aux703 + aux706 + aux707)<=1))
c Var 'aux2201' direct represents '0' with '-8943'
c Var 'aux2201' direct represents '1' with '8943'
c Var 'aux2201' order represents '1' with '1'
c Var 'aux2201' order represents '0' with '-8943'
c Encoding variable: aux2202 with domain: bool (representing constraint (1<=(aux703 + aux706 + aux707)))
c Var 'aux2202' direct represents '0' with '-8944'
c Var 'aux2202' direct represents '1' with '8944'
c Var 'aux2202' order represents '1' with '1'
c Var 'aux2202' order represents '0' with '-8944'
c Encoding variable: aux2203 with domain: bool (representing constraint ((aux709 + aux712 + aux713)<=1))
c Var 'aux2203' direct represents '0' with '-8945'
c Var 'aux2203' direct represents '1' with '8945'
c Var 'aux2203' order represents '1' with '1'
c Var 'aux2203' order represents '0' with '-8945'
c Encoding variable: aux2204 with domain: bool (representing constraint (1<=(aux709 + aux712 + aux713)))
c Var 'aux2204' direct represents '0' with '-8946'
c Var 'aux2204' direct represents '1' with '8946'
c Var 'aux2204' order represents '1' with '1'
c Var 'aux2204' order represents '0' with '-8946'
c Encoding variable: aux2205 with domain: bool (representing constraint ((aux715 + aux718 + aux719)<=1))
c Var 'aux2205' direct represents '0' with '-8947'
c Var 'aux2205' direct represents '1' with '8947'
c Var 'aux2205' order represents '1' with '1'
c Var 'aux2205' order represents '0' with '-8947'
c Encoding variable: aux2206 with domain: bool (representing constraint (1<=(aux715 + aux718 + aux719)))
c Var 'aux2206' direct represents '0' with '-8948'
c Var 'aux2206' direct represents '1' with '8948'
c Var 'aux2206' order represents '1' with '1'
c Var 'aux2206' order represents '0' with '-8948'
c Encoding variable: aux2207 with domain: bool (representing constraint ((aux721 + aux724 + aux725)<=1))
c Var 'aux2207' direct represents '0' with '-8949'
c Var 'aux2207' direct represents '1' with '8949'
c Var 'aux2207' order represents '1' with '1'
c Var 'aux2207' order represents '0' with '-8949'
c Encoding variable: aux2208 with domain: bool (representing constraint (1<=(aux721 + aux724 + aux725)))
c Var 'aux2208' direct represents '0' with '-8950'
c Var 'aux2208' direct represents '1' with '8950'
c Var 'aux2208' order represents '1' with '1'
c Var 'aux2208' order represents '0' with '-8950'
c Encoding variable: aux2209 with domain: bool (representing constraint ((aux727 + aux730 + aux731)<=1))
c Var 'aux2209' direct represents '0' with '-8951'
c Var 'aux2209' direct represents '1' with '8951'
c Var 'aux2209' order represents '1' with '1'
c Var 'aux2209' order represents '0' with '-8951'
c Encoding variable: aux2210 with domain: bool (representing constraint (1<=(aux727 + aux730 + aux731)))
c Var 'aux2210' direct represents '0' with '-8952'
c Var 'aux2210' direct represents '1' with '8952'
c Var 'aux2210' order represents '1' with '1'
c Var 'aux2210' order represents '0' with '-8952'
c Encoding variable: aux2211 with domain: bool (representing constraint ((aux733 + aux736 + aux737)<=1))
c Var 'aux2211' direct represents '0' with '-8953'
c Var 'aux2211' direct represents '1' with '8953'
c Var 'aux2211' order represents '1' with '1'
c Var 'aux2211' order represents '0' with '-8953'
c Encoding variable: aux2212 with domain: bool (representing constraint (1<=(aux733 + aux736 + aux737)))
c Var 'aux2212' direct represents '0' with '-8954'
c Var 'aux2212' direct represents '1' with '8954'
c Var 'aux2212' order represents '1' with '1'
c Var 'aux2212' order represents '0' with '-8954'
c Encoding variable: aux2213 with domain: bool (representing constraint ((aux739 + aux742 + aux743)<=1))
c Var 'aux2213' direct represents '0' with '-8955'
c Var 'aux2213' direct represents '1' with '8955'
c Var 'aux2213' order represents '1' with '1'
c Var 'aux2213' order represents '0' with '-8955'
c Encoding variable: aux2214 with domain: bool (representing constraint (1<=(aux739 + aux742 + aux743)))
c Var 'aux2214' direct represents '0' with '-8956'
c Var 'aux2214' direct represents '1' with '8956'
c Var 'aux2214' order represents '1' with '1'
c Var 'aux2214' order represents '0' with '-8956'
c Encoding variable: aux2215 with domain: bool (representing constraint ((aux745 + aux748 + aux749)<=1))
c Var 'aux2215' direct represents '0' with '-8957'
c Var 'aux2215' direct represents '1' with '8957'
c Var 'aux2215' order represents '1' with '1'
c Var 'aux2215' order represents '0' with '-8957'
c Encoding variable: aux2216 with domain: bool (representing constraint (1<=(aux745 + aux748 + aux749)))
c Var 'aux2216' direct represents '0' with '-8958'
c Var 'aux2216' direct represents '1' with '8958'
c Var 'aux2216' order represents '1' with '1'
c Var 'aux2216' order represents '0' with '-8958'
c Encoding variable: aux2217 with domain: bool (representing constraint ((aux751 + aux754 + aux755)<=1))
c Var 'aux2217' direct represents '0' with '-8959'
c Var 'aux2217' direct represents '1' with '8959'
c Var 'aux2217' order represents '1' with '1'
c Var 'aux2217' order represents '0' with '-8959'
c Encoding variable: aux2218 with domain: bool (representing constraint (1<=(aux751 + aux754 + aux755)))
c Var 'aux2218' direct represents '0' with '-8960'
c Var 'aux2218' direct represents '1' with '8960'
c Var 'aux2218' order represents '1' with '1'
c Var 'aux2218' order represents '0' with '-8960'
c Encoding variable: aux2219 with domain: bool (representing constraint ((aux757 + aux760 + aux761)<=1))
c Var 'aux2219' direct represents '0' with '-8961'
c Var 'aux2219' direct represents '1' with '8961'
c Var 'aux2219' order represents '1' with '1'
c Var 'aux2219' order represents '0' with '-8961'
c Encoding variable: aux2220 with domain: bool (representing constraint (1<=(aux757 + aux760 + aux761)))
c Var 'aux2220' direct represents '0' with '-8962'
c Var 'aux2220' direct represents '1' with '8962'
c Var 'aux2220' order represents '1' with '1'
c Var 'aux2220' order represents '0' with '-8962'
c Encoding variable: aux2221 with domain: bool (representing constraint ((aux763 + aux766 + aux767)<=1))
c Var 'aux2221' direct represents '0' with '-8963'
c Var 'aux2221' direct represents '1' with '8963'
c Var 'aux2221' order represents '1' with '1'
c Var 'aux2221' order represents '0' with '-8963'
c Encoding variable: aux2222 with domain: bool (representing constraint (1<=(aux763 + aux766 + aux767)))
c Var 'aux2222' direct represents '0' with '-8964'
c Var 'aux2222' direct represents '1' with '8964'
c Var 'aux2222' order represents '1' with '1'
c Var 'aux2222' order represents '0' with '-8964'
c Encoding variable: aux2223 with domain: bool (representing constraint ((aux769 + aux772 + aux773)<=1))
c Var 'aux2223' direct represents '0' with '-8965'
c Var 'aux2223' direct represents '1' with '8965'
c Var 'aux2223' order represents '1' with '1'
c Var 'aux2223' order represents '0' with '-8965'
c Encoding variable: aux2224 with domain: bool (representing constraint (1<=(aux769 + aux772 + aux773)))
c Var 'aux2224' direct represents '0' with '-8966'
c Var 'aux2224' direct represents '1' with '8966'
c Var 'aux2224' order represents '1' with '1'
c Var 'aux2224' order represents '0' with '-8966'
c Encoding variable: aux2225 with domain: bool (representing constraint ((aux775 + aux778 + aux779)<=1))
c Var 'aux2225' direct represents '0' with '-8967'
c Var 'aux2225' direct represents '1' with '8967'
c Var 'aux2225' order represents '1' with '1'
c Var 'aux2225' order represents '0' with '-8967'
c Encoding variable: aux2226 with domain: bool (representing constraint (1<=(aux775 + aux778 + aux779)))
c Var 'aux2226' direct represents '0' with '-8968'
c Var 'aux2226' direct represents '1' with '8968'
c Var 'aux2226' order represents '1' with '1'
c Var 'aux2226' order represents '0' with '-8968'
c Encoding variable: aux2227 with domain: bool (representing constraint ((aux781 + aux784 + aux785)<=1))
c Var 'aux2227' direct represents '0' with '-8969'
c Var 'aux2227' direct represents '1' with '8969'
c Var 'aux2227' order represents '1' with '1'
c Var 'aux2227' order represents '0' with '-8969'
c Encoding variable: aux2228 with domain: bool (representing constraint (1<=(aux781 + aux784 + aux785)))
c Var 'aux2228' direct represents '0' with '-8970'
c Var 'aux2228' direct represents '1' with '8970'
c Var 'aux2228' order represents '1' with '1'
c Var 'aux2228' order represents '0' with '-8970'
c Encoding variable: aux2229 with domain: bool (representing constraint ((aux787 + aux790 + aux791)<=1))
c Var 'aux2229' direct represents '0' with '-8971'
c Var 'aux2229' direct represents '1' with '8971'
c Var 'aux2229' order represents '1' with '1'
c Var 'aux2229' order represents '0' with '-8971'
c Encoding variable: aux2230 with domain: bool (representing constraint (1<=(aux787 + aux790 + aux791)))
c Var 'aux2230' direct represents '0' with '-8972'
c Var 'aux2230' direct represents '1' with '8972'
c Var 'aux2230' order represents '1' with '1'
c Var 'aux2230' order represents '0' with '-8972'
c Encoding variable: aux2231 with domain: bool (representing constraint ((aux793 + aux796 + aux797)<=1))
c Var 'aux2231' direct represents '0' with '-8973'
c Var 'aux2231' direct represents '1' with '8973'
c Var 'aux2231' order represents '1' with '1'
c Var 'aux2231' order represents '0' with '-8973'
c Encoding variable: aux2232 with domain: bool (representing constraint (1<=(aux793 + aux796 + aux797)))
c Var 'aux2232' direct represents '0' with '-8974'
c Var 'aux2232' direct represents '1' with '8974'
c Var 'aux2232' order represents '1' with '1'
c Var 'aux2232' order represents '0' with '-8974'
c Encoding variable: aux2233 with domain: bool (representing constraint ((aux799 + aux802 + aux803)<=1))
c Var 'aux2233' direct represents '0' with '-8975'
c Var 'aux2233' direct represents '1' with '8975'
c Var 'aux2233' order represents '1' with '1'
c Var 'aux2233' order represents '0' with '-8975'
c Encoding variable: aux2234 with domain: bool (representing constraint (1<=(aux799 + aux802 + aux803)))
c Var 'aux2234' direct represents '0' with '-8976'
c Var 'aux2234' direct represents '1' with '8976'
c Var 'aux2234' order represents '1' with '1'
c Var 'aux2234' order represents '0' with '-8976'
c Encoding variable: aux2235 with domain: bool (representing constraint ((aux805 + aux808 + aux809)<=1))
c Var 'aux2235' direct represents '0' with '-8977'
c Var 'aux2235' direct represents '1' with '8977'
c Var 'aux2235' order represents '1' with '1'
c Var 'aux2235' order represents '0' with '-8977'
c Encoding variable: aux2236 with domain: bool (representing constraint (1<=(aux805 + aux808 + aux809)))
c Var 'aux2236' direct represents '0' with '-8978'
c Var 'aux2236' direct represents '1' with '8978'
c Var 'aux2236' order represents '1' with '1'
c Var 'aux2236' order represents '0' with '-8978'
c Encoding variable: aux2237 with domain: bool (representing constraint ((aux811 + aux814 + aux815)<=1))
c Var 'aux2237' direct represents '0' with '-8979'
c Var 'aux2237' direct represents '1' with '8979'
c Var 'aux2237' order represents '1' with '1'
c Var 'aux2237' order represents '0' with '-8979'
c Encoding variable: aux2238 with domain: bool (representing constraint (1<=(aux811 + aux814 + aux815)))
c Var 'aux2238' direct represents '0' with '-8980'
c Var 'aux2238' direct represents '1' with '8980'
c Var 'aux2238' order represents '1' with '1'
c Var 'aux2238' order represents '0' with '-8980'
c Encoding variable: aux2239 with domain: bool (representing constraint ((aux817 + aux820 + aux821)<=1))
c Var 'aux2239' direct represents '0' with '-8981'
c Var 'aux2239' direct represents '1' with '8981'
c Var 'aux2239' order represents '1' with '1'
c Var 'aux2239' order represents '0' with '-8981'
c Encoding variable: aux2240 with domain: bool (representing constraint (1<=(aux817 + aux820 + aux821)))
c Var 'aux2240' direct represents '0' with '-8982'
c Var 'aux2240' direct represents '1' with '8982'
c Var 'aux2240' order represents '1' with '1'
c Var 'aux2240' order represents '0' with '-8982'
c Encoding variable: aux2241 with domain: bool (representing constraint ((aux823 + aux826 + aux827)<=1))
c Var 'aux2241' direct represents '0' with '-8983'
c Var 'aux2241' direct represents '1' with '8983'
c Var 'aux2241' order represents '1' with '1'
c Var 'aux2241' order represents '0' with '-8983'
c Encoding variable: aux2242 with domain: bool (representing constraint (1<=(aux823 + aux826 + aux827)))
c Var 'aux2242' direct represents '0' with '-8984'
c Var 'aux2242' direct represents '1' with '8984'
c Var 'aux2242' order represents '1' with '1'
c Var 'aux2242' order represents '0' with '-8984'
c Encoding variable: aux2243 with domain: bool (representing constraint ((aux829 + aux832 + aux833)<=1))
c Var 'aux2243' direct represents '0' with '-8985'
c Var 'aux2243' direct represents '1' with '8985'
c Var 'aux2243' order represents '1' with '1'
c Var 'aux2243' order represents '0' with '-8985'
c Encoding variable: aux2244 with domain: bool (representing constraint (1<=(aux829 + aux832 + aux833)))
c Var 'aux2244' direct represents '0' with '-8986'
c Var 'aux2244' direct represents '1' with '8986'
c Var 'aux2244' order represents '1' with '1'
c Var 'aux2244' order represents '0' with '-8986'
c Encoding variable: aux2245 with domain: bool (representing constraint ((aux835 + aux838 + aux839)<=1))
c Var 'aux2245' direct represents '0' with '-8987'
c Var 'aux2245' direct represents '1' with '8987'
c Var 'aux2245' order represents '1' with '1'
c Var 'aux2245' order represents '0' with '-8987'
c Encoding variable: aux2246 with domain: bool (representing constraint (1<=(aux835 + aux838 + aux839)))
c Var 'aux2246' direct represents '0' with '-8988'
c Var 'aux2246' direct represents '1' with '8988'
c Var 'aux2246' order represents '1' with '1'
c Var 'aux2246' order represents '0' with '-8988'
c Encoding variable: aux2247 with domain: bool (representing constraint ((aux841 + aux844 + aux845)<=1))
c Var 'aux2247' direct represents '0' with '-8989'
c Var 'aux2247' direct represents '1' with '8989'
c Var 'aux2247' order represents '1' with '1'
c Var 'aux2247' order represents '0' with '-8989'
c Encoding variable: aux2248 with domain: bool (representing constraint (1<=(aux841 + aux844 + aux845)))
c Var 'aux2248' direct represents '0' with '-8990'
c Var 'aux2248' direct represents '1' with '8990'
c Var 'aux2248' order represents '1' with '1'
c Var 'aux2248' order represents '0' with '-8990'
c Encoding variable: aux2249 with domain: bool (representing constraint ((aux847 + aux850 + aux851)<=1))
c Var 'aux2249' direct represents '0' with '-8991'
c Var 'aux2249' direct represents '1' with '8991'
c Var 'aux2249' order represents '1' with '1'
c Var 'aux2249' order represents '0' with '-8991'
c Encoding variable: aux2250 with domain: bool (representing constraint (1<=(aux847 + aux850 + aux851)))
c Var 'aux2250' direct represents '0' with '-8992'
c Var 'aux2250' direct represents '1' with '8992'
c Var 'aux2250' order represents '1' with '1'
c Var 'aux2250' order represents '0' with '-8992'
c Encoding variable: aux2251 with domain: bool (representing constraint ((aux853 + aux856 + aux857)<=1))
c Var 'aux2251' direct represents '0' with '-8993'
c Var 'aux2251' direct represents '1' with '8993'
c Var 'aux2251' order represents '1' with '1'
c Var 'aux2251' order represents '0' with '-8993'
c Encoding variable: aux2252 with domain: bool (representing constraint (1<=(aux853 + aux856 + aux857)))
c Var 'aux2252' direct represents '0' with '-8994'
c Var 'aux2252' direct represents '1' with '8994'
c Var 'aux2252' order represents '1' with '1'
c Var 'aux2252' order represents '0' with '-8994'
c Encoding variable: aux2253 with domain: bool (representing constraint ((aux859 + aux862 + aux863)<=1))
c Var 'aux2253' direct represents '0' with '-8995'
c Var 'aux2253' direct represents '1' with '8995'
c Var 'aux2253' order represents '1' with '1'
c Var 'aux2253' order represents '0' with '-8995'
c Encoding variable: aux2254 with domain: bool (representing constraint (1<=(aux859 + aux862 + aux863)))
c Var 'aux2254' direct represents '0' with '-8996'
c Var 'aux2254' direct represents '1' with '8996'
c Var 'aux2254' order represents '1' with '1'
c Var 'aux2254' order represents '0' with '-8996'
c Encoding variable: aux2255 with domain: bool (representing constraint ((aux865 + aux868 + aux869)<=1))
c Var 'aux2255' direct represents '0' with '-8997'
c Var 'aux2255' direct represents '1' with '8997'
c Var 'aux2255' order represents '1' with '1'
c Var 'aux2255' order represents '0' with '-8997'
c Encoding variable: aux2256 with domain: bool (representing constraint (1<=(aux865 + aux868 + aux869)))
c Var 'aux2256' direct represents '0' with '-8998'
c Var 'aux2256' direct represents '1' with '8998'
c Var 'aux2256' order represents '1' with '1'
c Var 'aux2256' order represents '0' with '-8998'
c Encoding variable: aux2257 with domain: bool (representing constraint ((aux871 + aux874 + aux875)<=1))
c Var 'aux2257' direct represents '0' with '-8999'
c Var 'aux2257' direct represents '1' with '8999'
c Var 'aux2257' order represents '1' with '1'
c Var 'aux2257' order represents '0' with '-8999'
c Encoding variable: aux2258 with domain: bool (representing constraint (1<=(aux871 + aux874 + aux875)))
c Var 'aux2258' direct represents '0' with '-9000'
c Var 'aux2258' direct represents '1' with '9000'
c Var 'aux2258' order represents '1' with '1'
c Var 'aux2258' order represents '0' with '-9000'
c Encoding variable: aux2259 with domain: bool (representing constraint ((aux877 + aux880 + aux881)<=1))
c Var 'aux2259' direct represents '0' with '-9001'
c Var 'aux2259' direct represents '1' with '9001'
c Var 'aux2259' order represents '1' with '1'
c Var 'aux2259' order represents '0' with '-9001'
c Encoding variable: aux2260 with domain: bool (representing constraint (1<=(aux877 + aux880 + aux881)))
c Var 'aux2260' direct represents '0' with '-9002'
c Var 'aux2260' direct represents '1' with '9002'
c Var 'aux2260' order represents '1' with '1'
c Var 'aux2260' order represents '0' with '-9002'
c Encoding variable: aux2261 with domain: bool (representing constraint ((aux883 + aux886 + aux887)<=1))
c Var 'aux2261' direct represents '0' with '-9003'
c Var 'aux2261' direct represents '1' with '9003'
c Var 'aux2261' order represents '1' with '1'
c Var 'aux2261' order represents '0' with '-9003'
c Encoding variable: aux2262 with domain: bool (representing constraint (1<=(aux883 + aux886 + aux887)))
c Var 'aux2262' direct represents '0' with '-9004'
c Var 'aux2262' direct represents '1' with '9004'
c Var 'aux2262' order represents '1' with '1'
c Var 'aux2262' order represents '0' with '-9004'
c Encoding variable: aux2263 with domain: bool (representing constraint ((aux889 + aux892 + aux893)<=1))
c Var 'aux2263' direct represents '0' with '-9005'
c Var 'aux2263' direct represents '1' with '9005'
c Var 'aux2263' order represents '1' with '1'
c Var 'aux2263' order represents '0' with '-9005'
c Encoding variable: aux2264 with domain: bool (representing constraint (1<=(aux889 + aux892 + aux893)))
c Var 'aux2264' direct represents '0' with '-9006'
c Var 'aux2264' direct represents '1' with '9006'
c Var 'aux2264' order represents '1' with '1'
c Var 'aux2264' order represents '0' with '-9006'
c Encoding variable: aux2265 with domain: bool (representing constraint ((aux895 + aux898 + aux899)<=1))
c Var 'aux2265' direct represents '0' with '-9007'
c Var 'aux2265' direct represents '1' with '9007'
c Var 'aux2265' order represents '1' with '1'
c Var 'aux2265' order represents '0' with '-9007'
c Encoding variable: aux2266 with domain: bool (representing constraint (1<=(aux895 + aux898 + aux899)))
c Var 'aux2266' direct represents '0' with '-9008'
c Var 'aux2266' direct represents '1' with '9008'
c Var 'aux2266' order represents '1' with '1'
c Var 'aux2266' order represents '0' with '-9008'
c Encoding variable: aux2267 with domain: bool (representing constraint ((aux901 + aux904 + aux905)<=1))
c Var 'aux2267' direct represents '0' with '-9009'
c Var 'aux2267' direct represents '1' with '9009'
c Var 'aux2267' order represents '1' with '1'
c Var 'aux2267' order represents '0' with '-9009'
c Encoding variable: aux2268 with domain: bool (representing constraint (1<=(aux901 + aux904 + aux905)))
c Var 'aux2268' direct represents '0' with '-9010'
c Var 'aux2268' direct represents '1' with '9010'
c Var 'aux2268' order represents '1' with '1'
c Var 'aux2268' order represents '0' with '-9010'
c Encoding variable: aux2269 with domain: bool (representing constraint ((aux907 + aux910 + aux911)<=1))
c Var 'aux2269' direct represents '0' with '-9011'
c Var 'aux2269' direct represents '1' with '9011'
c Var 'aux2269' order represents '1' with '1'
c Var 'aux2269' order represents '0' with '-9011'
c Encoding variable: aux2270 with domain: bool (representing constraint (1<=(aux907 + aux910 + aux911)))
c Var 'aux2270' direct represents '0' with '-9012'
c Var 'aux2270' direct represents '1' with '9012'
c Var 'aux2270' order represents '1' with '1'
c Var 'aux2270' order represents '0' with '-9012'
c Encoding variable: aux2271 with domain: bool (representing constraint ((aux913 + aux916 + aux917)<=1))
c Var 'aux2271' direct represents '0' with '-9013'
c Var 'aux2271' direct represents '1' with '9013'
c Var 'aux2271' order represents '1' with '1'
c Var 'aux2271' order represents '0' with '-9013'
c Encoding variable: aux2272 with domain: bool (representing constraint (1<=(aux913 + aux916 + aux917)))
c Var 'aux2272' direct represents '0' with '-9014'
c Var 'aux2272' direct represents '1' with '9014'
c Var 'aux2272' order represents '1' with '1'
c Var 'aux2272' order represents '0' with '-9014'
c Encoding variable: aux2273 with domain: bool (representing constraint ((aux919 + aux922 + aux923)<=1))
c Var 'aux2273' direct represents '0' with '-9015'
c Var 'aux2273' direct represents '1' with '9015'
c Var 'aux2273' order represents '1' with '1'
c Var 'aux2273' order represents '0' with '-9015'
c Encoding variable: aux2274 with domain: bool (representing constraint (1<=(aux919 + aux922 + aux923)))
c Var 'aux2274' direct represents '0' with '-9016'
c Var 'aux2274' direct represents '1' with '9016'
c Var 'aux2274' order represents '1' with '1'
c Var 'aux2274' order represents '0' with '-9016'
c Encoding variable: aux2275 with domain: bool (representing constraint ((aux925 + aux928 + aux929)<=1))
c Var 'aux2275' direct represents '0' with '-9017'
c Var 'aux2275' direct represents '1' with '9017'
c Var 'aux2275' order represents '1' with '1'
c Var 'aux2275' order represents '0' with '-9017'
c Encoding variable: aux2276 with domain: bool (representing constraint (1<=(aux925 + aux928 + aux929)))
c Var 'aux2276' direct represents '0' with '-9018'
c Var 'aux2276' direct represents '1' with '9018'
c Var 'aux2276' order represents '1' with '1'
c Var 'aux2276' order represents '0' with '-9018'
c Encoding variable: aux2277 with domain: bool (representing constraint ((aux931 + aux934 + aux935)<=1))
c Var 'aux2277' direct represents '0' with '-9019'
c Var 'aux2277' direct represents '1' with '9019'
c Var 'aux2277' order represents '1' with '1'
c Var 'aux2277' order represents '0' with '-9019'
c Encoding variable: aux2278 with domain: bool (representing constraint (1<=(aux931 + aux934 + aux935)))
c Var 'aux2278' direct represents '0' with '-9020'
c Var 'aux2278' direct represents '1' with '9020'
c Var 'aux2278' order represents '1' with '1'
c Var 'aux2278' order represents '0' with '-9020'
c Encoding variable: aux2279 with domain: bool (representing constraint ((aux937 + aux940 + aux941)<=1))
c Var 'aux2279' direct represents '0' with '-9021'
c Var 'aux2279' direct represents '1' with '9021'
c Var 'aux2279' order represents '1' with '1'
c Var 'aux2279' order represents '0' with '-9021'
c Encoding variable: aux2280 with domain: bool (representing constraint (1<=(aux937 + aux940 + aux941)))
c Var 'aux2280' direct represents '0' with '-9022'
c Var 'aux2280' direct represents '1' with '9022'
c Var 'aux2280' order represents '1' with '1'
c Var 'aux2280' order represents '0' with '-9022'
c Encoding variable: aux2281 with domain: bool (representing constraint ((aux943 + aux946 + aux947)<=1))
c Var 'aux2281' direct represents '0' with '-9023'
c Var 'aux2281' direct represents '1' with '9023'
c Var 'aux2281' order represents '1' with '1'
c Var 'aux2281' order represents '0' with '-9023'
c Encoding variable: aux2282 with domain: bool (representing constraint (1<=(aux943 + aux946 + aux947)))
c Var 'aux2282' direct represents '0' with '-9024'
c Var 'aux2282' direct represents '1' with '9024'
c Var 'aux2282' order represents '1' with '1'
c Var 'aux2282' order represents '0' with '-9024'
c Encoding variable: aux2283 with domain: bool (representing constraint ((aux949 + aux952 + aux953)<=1))
c Var 'aux2283' direct represents '0' with '-9025'
c Var 'aux2283' direct represents '1' with '9025'
c Var 'aux2283' order represents '1' with '1'
c Var 'aux2283' order represents '0' with '-9025'
c Encoding variable: aux2284 with domain: bool (representing constraint (1<=(aux949 + aux952 + aux953)))
c Var 'aux2284' direct represents '0' with '-9026'
c Var 'aux2284' direct represents '1' with '9026'
c Var 'aux2284' order represents '1' with '1'
c Var 'aux2284' order represents '0' with '-9026'
c Encoding variable: aux2285 with domain: bool (representing constraint ((aux955 + aux958 + aux959)<=1))
c Var 'aux2285' direct represents '0' with '-9027'
c Var 'aux2285' direct represents '1' with '9027'
c Var 'aux2285' order represents '1' with '1'
c Var 'aux2285' order represents '0' with '-9027'
c Encoding variable: aux2286 with domain: bool (representing constraint (1<=(aux955 + aux958 + aux959)))
c Var 'aux2286' direct represents '0' with '-9028'
c Var 'aux2286' direct represents '1' with '9028'
c Var 'aux2286' order represents '1' with '1'
c Var 'aux2286' order represents '0' with '-9028'
c Encoding variable: aux2287 with domain: bool (representing constraint ((aux961 + aux964 + aux965)<=1))
c Var 'aux2287' direct represents '0' with '-9029'
c Var 'aux2287' direct represents '1' with '9029'
c Var 'aux2287' order represents '1' with '1'
c Var 'aux2287' order represents '0' with '-9029'
c Encoding variable: aux2288 with domain: bool (representing constraint (1<=(aux961 + aux964 + aux965)))
c Var 'aux2288' direct represents '0' with '-9030'
c Var 'aux2288' direct represents '1' with '9030'
c Var 'aux2288' order represents '1' with '1'
c Var 'aux2288' order represents '0' with '-9030'
c Encoding variable: aux2289 with domain: bool (representing constraint ((aux967 + aux970 + aux971)<=1))
c Var 'aux2289' direct represents '0' with '-9031'
c Var 'aux2289' direct represents '1' with '9031'
c Var 'aux2289' order represents '1' with '1'
c Var 'aux2289' order represents '0' with '-9031'
c Encoding variable: aux2290 with domain: bool (representing constraint (1<=(aux967 + aux970 + aux971)))
c Var 'aux2290' direct represents '0' with '-9032'
c Var 'aux2290' direct represents '1' with '9032'
c Var 'aux2290' order represents '1' with '1'
c Var 'aux2290' order represents '0' with '-9032'
c Encoding variable: aux2291 with domain: bool (representing constraint ((aux973 + aux976 + aux977)<=1))
c Var 'aux2291' direct represents '0' with '-9033'
c Var 'aux2291' direct represents '1' with '9033'
c Var 'aux2291' order represents '1' with '1'
c Var 'aux2291' order represents '0' with '-9033'
c Encoding variable: aux2292 with domain: bool (representing constraint (1<=(aux973 + aux976 + aux977)))
c Var 'aux2292' direct represents '0' with '-9034'
c Var 'aux2292' direct represents '1' with '9034'
c Var 'aux2292' order represents '1' with '1'
c Var 'aux2292' order represents '0' with '-9034'
c Encoding variable: aux2293 with domain: bool (representing constraint ((aux979 + aux982 + aux983)<=1))
c Var 'aux2293' direct represents '0' with '-9035'
c Var 'aux2293' direct represents '1' with '9035'
c Var 'aux2293' order represents '1' with '1'
c Var 'aux2293' order represents '0' with '-9035'
c Encoding variable: aux2294 with domain: bool (representing constraint (1<=(aux979 + aux982 + aux983)))
c Var 'aux2294' direct represents '0' with '-9036'
c Var 'aux2294' direct represents '1' with '9036'
c Var 'aux2294' order represents '1' with '1'
c Var 'aux2294' order represents '0' with '-9036'
c Encoding variable: aux2295 with domain: bool (representing constraint ((aux985 + aux988 + aux989)<=1))
c Var 'aux2295' direct represents '0' with '-9037'
c Var 'aux2295' direct represents '1' with '9037'
c Var 'aux2295' order represents '1' with '1'
c Var 'aux2295' order represents '0' with '-9037'
c Encoding variable: aux2296 with domain: bool (representing constraint (1<=(aux985 + aux988 + aux989)))
c Var 'aux2296' direct represents '0' with '-9038'
c Var 'aux2296' direct represents '1' with '9038'
c Var 'aux2296' order represents '1' with '1'
c Var 'aux2296' order represents '0' with '-9038'
c Encoding variable: aux2297 with domain: bool (representing constraint ((aux991 + aux994 + aux995)<=1))
c Var 'aux2297' direct represents '0' with '-9039'
c Var 'aux2297' direct represents '1' with '9039'
c Var 'aux2297' order represents '1' with '1'
c Var 'aux2297' order represents '0' with '-9039'
c Encoding variable: aux2298 with domain: bool (representing constraint (1<=(aux991 + aux994 + aux995)))
c Var 'aux2298' direct represents '0' with '-9040'
c Var 'aux2298' direct represents '1' with '9040'
c Var 'aux2298' order represents '1' with '1'
c Var 'aux2298' order represents '0' with '-9040'
c Encoding variable: aux2299 with domain: bool (representing constraint ((aux997 + aux1000 + aux1001)<=1))
c Var 'aux2299' direct represents '0' with '-9041'
c Var 'aux2299' direct represents '1' with '9041'
c Var 'aux2299' order represents '1' with '1'
c Var 'aux2299' order represents '0' with '-9041'
c Encoding variable: aux2300 with domain: bool (representing constraint (1<=(aux997 + aux1000 + aux1001)))
c Var 'aux2300' direct represents '0' with '-9042'
c Var 'aux2300' direct represents '1' with '9042'
c Var 'aux2300' order represents '1' with '1'
c Var 'aux2300' order represents '0' with '-9042'
c Encoding variable: aux2301 with domain: bool (representing constraint ((aux1003 + aux1006 + aux1007)<=1))
c Var 'aux2301' direct represents '0' with '-9043'
c Var 'aux2301' direct represents '1' with '9043'
c Var 'aux2301' order represents '1' with '1'
c Var 'aux2301' order represents '0' with '-9043'
c Encoding variable: aux2302 with domain: bool (representing constraint (1<=(aux1003 + aux1006 + aux1007)))
c Var 'aux2302' direct represents '0' with '-9044'
c Var 'aux2302' direct represents '1' with '9044'
c Var 'aux2302' order represents '1' with '1'
c Var 'aux2302' order represents '0' with '-9044'
c Encoding variable: aux2303 with domain: bool (representing constraint ((aux1009 + aux1012 + aux1013)<=1))
c Var 'aux2303' direct represents '0' with '-9045'
c Var 'aux2303' direct represents '1' with '9045'
c Var 'aux2303' order represents '1' with '1'
c Var 'aux2303' order represents '0' with '-9045'
c Encoding variable: aux2304 with domain: bool (representing constraint (1<=(aux1009 + aux1012 + aux1013)))
c Var 'aux2304' direct represents '0' with '-9046'
c Var 'aux2304' direct represents '1' with '9046'
c Var 'aux2304' order represents '1' with '1'
c Var 'aux2304' order represents '0' with '-9046'
c Encoding variable: aux2305 with domain: bool (representing constraint ((aux1015 + aux1018 + aux1019)<=1))
c Var 'aux2305' direct represents '0' with '-9047'
c Var 'aux2305' direct represents '1' with '9047'
c Var 'aux2305' order represents '1' with '1'
c Var 'aux2305' order represents '0' with '-9047'
c Encoding variable: aux2306 with domain: bool (representing constraint (1<=(aux1015 + aux1018 + aux1019)))
c Var 'aux2306' direct represents '0' with '-9048'
c Var 'aux2306' direct represents '1' with '9048'
c Var 'aux2306' order represents '1' with '1'
c Var 'aux2306' order represents '0' with '-9048'
c Encoding variable: aux2307 with domain: bool (representing constraint ((aux1021 + aux1024 + aux1025)<=1))
c Var 'aux2307' direct represents '0' with '-9049'
c Var 'aux2307' direct represents '1' with '9049'
c Var 'aux2307' order represents '1' with '1'
c Var 'aux2307' order represents '0' with '-9049'
c Encoding variable: aux2308 with domain: bool (representing constraint (1<=(aux1021 + aux1024 + aux1025)))
c Var 'aux2308' direct represents '0' with '-9050'
c Var 'aux2308' direct represents '1' with '9050'
c Var 'aux2308' order represents '1' with '1'
c Var 'aux2308' order represents '0' with '-9050'
c Encoding variable: aux2309 with domain: bool (representing constraint ((aux1027 + aux1030 + aux1031)<=1))
c Var 'aux2309' direct represents '0' with '-9051'
c Var 'aux2309' direct represents '1' with '9051'
c Var 'aux2309' order represents '1' with '1'
c Var 'aux2309' order represents '0' with '-9051'
c Encoding variable: aux2310 with domain: bool (representing constraint (1<=(aux1027 + aux1030 + aux1031)))
c Var 'aux2310' direct represents '0' with '-9052'
c Var 'aux2310' direct represents '1' with '9052'
c Var 'aux2310' order represents '1' with '1'
c Var 'aux2310' order represents '0' with '-9052'
c Encoding variable: aux2311 with domain: bool (representing constraint ((aux1033 + aux1036 + aux1037)<=1))
c Var 'aux2311' direct represents '0' with '-9053'
c Var 'aux2311' direct represents '1' with '9053'
c Var 'aux2311' order represents '1' with '1'
c Var 'aux2311' order represents '0' with '-9053'
c Encoding variable: aux2312 with domain: bool (representing constraint (1<=(aux1033 + aux1036 + aux1037)))
c Var 'aux2312' direct represents '0' with '-9054'
c Var 'aux2312' direct represents '1' with '9054'
c Var 'aux2312' order represents '1' with '1'
c Var 'aux2312' order represents '0' with '-9054'
c Encoding variable: aux2313 with domain: bool (representing constraint ((aux1039 + aux1042 + aux1043)<=1))
c Var 'aux2313' direct represents '0' with '-9055'
c Var 'aux2313' direct represents '1' with '9055'
c Var 'aux2313' order represents '1' with '1'
c Var 'aux2313' order represents '0' with '-9055'
c Encoding variable: aux2314 with domain: bool (representing constraint (1<=(aux1039 + aux1042 + aux1043)))
c Var 'aux2314' direct represents '0' with '-9056'
c Var 'aux2314' direct represents '1' with '9056'
c Var 'aux2314' order represents '1' with '1'
c Var 'aux2314' order represents '0' with '-9056'
c Encoding variable: aux2315 with domain: bool (representing constraint ((aux1045 + aux1048 + aux1049)<=1))
c Var 'aux2315' direct represents '0' with '-9057'
c Var 'aux2315' direct represents '1' with '9057'
c Var 'aux2315' order represents '1' with '1'
c Var 'aux2315' order represents '0' with '-9057'
c Encoding variable: aux2316 with domain: bool (representing constraint (1<=(aux1045 + aux1048 + aux1049)))
c Var 'aux2316' direct represents '0' with '-9058'
c Var 'aux2316' direct represents '1' with '9058'
c Var 'aux2316' order represents '1' with '1'
c Var 'aux2316' order represents '0' with '-9058'
c Encoding variable: aux2317 with domain: bool (representing constraint ((aux1051 + aux1054 + aux1055)<=1))
c Var 'aux2317' direct represents '0' with '-9059'
c Var 'aux2317' direct represents '1' with '9059'
c Var 'aux2317' order represents '1' with '1'
c Var 'aux2317' order represents '0' with '-9059'
c Encoding variable: aux2318 with domain: bool (representing constraint (1<=(aux1051 + aux1054 + aux1055)))
c Var 'aux2318' direct represents '0' with '-9060'
c Var 'aux2318' direct represents '1' with '9060'
c Var 'aux2318' order represents '1' with '1'
c Var 'aux2318' order represents '0' with '-9060'
c Encoding variable: aux2319 with domain: bool (representing constraint ((aux1057 + aux1060 + aux1061)<=1))
c Var 'aux2319' direct represents '0' with '-9061'
c Var 'aux2319' direct represents '1' with '9061'
c Var 'aux2319' order represents '1' with '1'
c Var 'aux2319' order represents '0' with '-9061'
c Encoding variable: aux2320 with domain: bool (representing constraint (1<=(aux1057 + aux1060 + aux1061)))
c Var 'aux2320' direct represents '0' with '-9062'
c Var 'aux2320' direct represents '1' with '9062'
c Var 'aux2320' order represents '1' with '1'
c Var 'aux2320' order represents '0' with '-9062'
c Encoding variable: aux2321 with domain: bool (representing constraint ((aux1063 + aux1066 + aux1067)<=1))
c Var 'aux2321' direct represents '0' with '-9063'
c Var 'aux2321' direct represents '1' with '9063'
c Var 'aux2321' order represents '1' with '1'
c Var 'aux2321' order represents '0' with '-9063'
c Encoding variable: aux2322 with domain: bool (representing constraint (1<=(aux1063 + aux1066 + aux1067)))
c Var 'aux2322' direct represents '0' with '-9064'
c Var 'aux2322' direct represents '1' with '9064'
c Var 'aux2322' order represents '1' with '1'
c Var 'aux2322' order represents '0' with '-9064'
c Encoding variable: aux2323 with domain: bool (representing constraint ((aux1069 + aux1072 + aux1073)<=1))
c Var 'aux2323' direct represents '0' with '-9065'
c Var 'aux2323' direct represents '1' with '9065'
c Var 'aux2323' order represents '1' with '1'
c Var 'aux2323' order represents '0' with '-9065'
c Encoding variable: aux2324 with domain: bool (representing constraint (1<=(aux1069 + aux1072 + aux1073)))
c Var 'aux2324' direct represents '0' with '-9066'
c Var 'aux2324' direct represents '1' with '9066'
c Var 'aux2324' order represents '1' with '1'
c Var 'aux2324' order represents '0' with '-9066'
c Encoding variable: aux2325 with domain: bool (representing constraint ((aux1075 + aux1078 + aux1079)<=1))
c Var 'aux2325' direct represents '0' with '-9067'
c Var 'aux2325' direct represents '1' with '9067'
c Var 'aux2325' order represents '1' with '1'
c Var 'aux2325' order represents '0' with '-9067'
c Encoding variable: aux2326 with domain: bool (representing constraint (1<=(aux1075 + aux1078 + aux1079)))
c Var 'aux2326' direct represents '0' with '-9068'
c Var 'aux2326' direct represents '1' with '9068'
c Var 'aux2326' order represents '1' with '1'
c Var 'aux2326' order represents '0' with '-9068'
c Encoding variable: aux2327 with domain: bool (representing constraint ((aux1081 + aux1084 + aux1085)<=1))
c Var 'aux2327' direct represents '0' with '-9069'
c Var 'aux2327' direct represents '1' with '9069'
c Var 'aux2327' order represents '1' with '1'
c Var 'aux2327' order represents '0' with '-9069'
c Encoding variable: aux2328 with domain: bool (representing constraint (1<=(aux1081 + aux1084 + aux1085)))
c Var 'aux2328' direct represents '0' with '-9070'
c Var 'aux2328' direct represents '1' with '9070'
c Var 'aux2328' order represents '1' with '1'
c Var 'aux2328' order represents '0' with '-9070'
c Encoding variable: aux2329 with domain: bool (representing constraint ((aux1087 + aux1090 + aux1091)<=1))
c Var 'aux2329' direct represents '0' with '-9071'
c Var 'aux2329' direct represents '1' with '9071'
c Var 'aux2329' order represents '1' with '1'
c Var 'aux2329' order represents '0' with '-9071'
c Encoding variable: aux2330 with domain: bool (representing constraint (1<=(aux1087 + aux1090 + aux1091)))
c Var 'aux2330' direct represents '0' with '-9072'
c Var 'aux2330' direct represents '1' with '9072'
c Var 'aux2330' order represents '1' with '1'
c Var 'aux2330' order represents '0' with '-9072'
c Encoding variable: aux2331 with domain: bool (representing constraint ((aux1093 + aux1096 + aux1097)<=1))
c Var 'aux2331' direct represents '0' with '-9073'
c Var 'aux2331' direct represents '1' with '9073'
c Var 'aux2331' order represents '1' with '1'
c Var 'aux2331' order represents '0' with '-9073'
c Encoding variable: aux2332 with domain: bool (representing constraint (1<=(aux1093 + aux1096 + aux1097)))
c Var 'aux2332' direct represents '0' with '-9074'
c Var 'aux2332' direct represents '1' with '9074'
c Var 'aux2332' order represents '1' with '1'
c Var 'aux2332' order represents '0' with '-9074'
c Encoding variable: aux2333 with domain: bool (representing constraint ((aux1099 + aux1102 + aux1103)<=1))
c Var 'aux2333' direct represents '0' with '-9075'
c Var 'aux2333' direct represents '1' with '9075'
c Var 'aux2333' order represents '1' with '1'
c Var 'aux2333' order represents '0' with '-9075'
c Encoding variable: aux2334 with domain: bool (representing constraint (1<=(aux1099 + aux1102 + aux1103)))
c Var 'aux2334' direct represents '0' with '-9076'
c Var 'aux2334' direct represents '1' with '9076'
c Var 'aux2334' order represents '1' with '1'
c Var 'aux2334' order represents '0' with '-9076'
c Encoding variable: aux2335 with domain: bool (representing constraint ((aux1105 + aux1108 + aux1109)<=1))
c Var 'aux2335' direct represents '0' with '-9077'
c Var 'aux2335' direct represents '1' with '9077'
c Var 'aux2335' order represents '1' with '1'
c Var 'aux2335' order represents '0' with '-9077'
c Encoding variable: aux2336 with domain: bool (representing constraint (1<=(aux1105 + aux1108 + aux1109)))
c Var 'aux2336' direct represents '0' with '-9078'
c Var 'aux2336' direct represents '1' with '9078'
c Var 'aux2336' order represents '1' with '1'
c Var 'aux2336' order represents '0' with '-9078'
c Encoding variable: aux2337 with domain: bool (representing constraint ((aux1111 + aux1114 + aux1115)<=1))
c Var 'aux2337' direct represents '0' with '-9079'
c Var 'aux2337' direct represents '1' with '9079'
c Var 'aux2337' order represents '1' with '1'
c Var 'aux2337' order represents '0' with '-9079'
c Encoding variable: aux2338 with domain: bool (representing constraint (1<=(aux1111 + aux1114 + aux1115)))
c Var 'aux2338' direct represents '0' with '-9080'
c Var 'aux2338' direct represents '1' with '9080'
c Var 'aux2338' order represents '1' with '1'
c Var 'aux2338' order represents '0' with '-9080'
c Encoding variable: aux2339 with domain: bool (representing constraint ((aux1117 + aux1120 + aux1121)<=1))
c Var 'aux2339' direct represents '0' with '-9081'
c Var 'aux2339' direct represents '1' with '9081'
c Var 'aux2339' order represents '1' with '1'
c Var 'aux2339' order represents '0' with '-9081'
c Encoding variable: aux2340 with domain: bool (representing constraint (1<=(aux1117 + aux1120 + aux1121)))
c Var 'aux2340' direct represents '0' with '-9082'
c Var 'aux2340' direct represents '1' with '9082'
c Var 'aux2340' order represents '1' with '1'
c Var 'aux2340' order represents '0' with '-9082'
c Encoding variable: aux2341 with domain: bool (representing constraint ((aux1123 + aux1126 + aux1127)<=1))
c Var 'aux2341' direct represents '0' with '-9083'
c Var 'aux2341' direct represents '1' with '9083'
c Var 'aux2341' order represents '1' with '1'
c Var 'aux2341' order represents '0' with '-9083'
c Encoding variable: aux2342 with domain: bool (representing constraint (1<=(aux1123 + aux1126 + aux1127)))
c Var 'aux2342' direct represents '0' with '-9084'
c Var 'aux2342' direct represents '1' with '9084'
c Var 'aux2342' order represents '1' with '1'
c Var 'aux2342' order represents '0' with '-9084'
c Encoding variable: aux2343 with domain: bool (representing constraint ((aux1129 + aux1132 + aux1133)<=1))
c Var 'aux2343' direct represents '0' with '-9085'
c Var 'aux2343' direct represents '1' with '9085'
c Var 'aux2343' order represents '1' with '1'
c Var 'aux2343' order represents '0' with '-9085'
c Encoding variable: aux2344 with domain: bool (representing constraint (1<=(aux1129 + aux1132 + aux1133)))
c Var 'aux2344' direct represents '0' with '-9086'
c Var 'aux2344' direct represents '1' with '9086'
c Var 'aux2344' order represents '1' with '1'
c Var 'aux2344' order represents '0' with '-9086'
c Encoding variable: aux2345 with domain: bool (representing constraint ((aux1135 + aux1138 + aux1139)<=1))
c Var 'aux2345' direct represents '0' with '-9087'
c Var 'aux2345' direct represents '1' with '9087'
c Var 'aux2345' order represents '1' with '1'
c Var 'aux2345' order represents '0' with '-9087'
c Encoding variable: aux2346 with domain: bool (representing constraint (1<=(aux1135 + aux1138 + aux1139)))
c Var 'aux2346' direct represents '0' with '-9088'
c Var 'aux2346' direct represents '1' with '9088'
c Var 'aux2346' order represents '1' with '1'
c Var 'aux2346' order represents '0' with '-9088'
c Encoding variable: aux2347 with domain: bool (representing constraint ((aux1141 + aux1144 + aux1145)<=1))
c Var 'aux2347' direct represents '0' with '-9089'
c Var 'aux2347' direct represents '1' with '9089'
c Var 'aux2347' order represents '1' with '1'
c Var 'aux2347' order represents '0' with '-9089'
c Encoding variable: aux2348 with domain: bool (representing constraint (1<=(aux1141 + aux1144 + aux1145)))
c Var 'aux2348' direct represents '0' with '-9090'
c Var 'aux2348' direct represents '1' with '9090'
c Var 'aux2348' order represents '1' with '1'
c Var 'aux2348' order represents '0' with '-9090'
c Encoding variable: aux2349 with domain: bool (representing constraint ((aux1147 + aux1150 + aux1151)<=1))
c Var 'aux2349' direct represents '0' with '-9091'
c Var 'aux2349' direct represents '1' with '9091'
c Var 'aux2349' order represents '1' with '1'
c Var 'aux2349' order represents '0' with '-9091'
c Encoding variable: aux2350 with domain: bool (representing constraint (1<=(aux1147 + aux1150 + aux1151)))
c Var 'aux2350' direct represents '0' with '-9092'
c Var 'aux2350' direct represents '1' with '9092'
c Var 'aux2350' order represents '1' with '1'
c Var 'aux2350' order represents '0' with '-9092'
c Encoding variable: aux2351 with domain: bool (representing constraint ((aux1153 + aux1156 + aux1157)<=1))
c Var 'aux2351' direct represents '0' with '-9093'
c Var 'aux2351' direct represents '1' with '9093'
c Var 'aux2351' order represents '1' with '1'
c Var 'aux2351' order represents '0' with '-9093'
c Encoding variable: aux2352 with domain: bool (representing constraint (1<=(aux1153 + aux1156 + aux1157)))
c Var 'aux2352' direct represents '0' with '-9094'
c Var 'aux2352' direct represents '1' with '9094'
c Var 'aux2352' order represents '1' with '1'
c Var 'aux2352' order represents '0' with '-9094'
c Encoding variable: aux2353 with domain: bool (representing constraint ((aux1159 + aux1162 + aux1163)<=1))
c Var 'aux2353' direct represents '0' with '-9095'
c Var 'aux2353' direct represents '1' with '9095'
c Var 'aux2353' order represents '1' with '1'
c Var 'aux2353' order represents '0' with '-9095'
c Encoding variable: aux2354 with domain: bool (representing constraint (1<=(aux1159 + aux1162 + aux1163)))
c Var 'aux2354' direct represents '0' with '-9096'
c Var 'aux2354' direct represents '1' with '9096'
c Var 'aux2354' order represents '1' with '1'
c Var 'aux2354' order represents '0' with '-9096'
c Encoding variable: aux2355 with domain: bool (representing constraint ((aux1165 + aux1168 + aux1169)<=1))
c Var 'aux2355' direct represents '0' with '-9097'
c Var 'aux2355' direct represents '1' with '9097'
c Var 'aux2355' order represents '1' with '1'
c Var 'aux2355' order represents '0' with '-9097'
c Encoding variable: aux2356 with domain: bool (representing constraint (1<=(aux1165 + aux1168 + aux1169)))
c Var 'aux2356' direct represents '0' with '-9098'
c Var 'aux2356' direct represents '1' with '9098'
c Var 'aux2356' order represents '1' with '1'
c Var 'aux2356' order represents '0' with '-9098'
c Encoding variable: aux2357 with domain: bool (representing constraint ((aux1171 + aux1174 + aux1175)<=1))
c Var 'aux2357' direct represents '0' with '-9099'
c Var 'aux2357' direct represents '1' with '9099'
c Var 'aux2357' order represents '1' with '1'
c Var 'aux2357' order represents '0' with '-9099'
c Encoding variable: aux2358 with domain: bool (representing constraint (1<=(aux1171 + aux1174 + aux1175)))
c Var 'aux2358' direct represents '0' with '-9100'
c Var 'aux2358' direct represents '1' with '9100'
c Var 'aux2358' order represents '1' with '1'
c Var 'aux2358' order represents '0' with '-9100'
c Encoding variable: aux2359 with domain: bool (representing constraint ((aux1177 + aux1180 + aux1181)<=1))
c Var 'aux2359' direct represents '0' with '-9101'
c Var 'aux2359' direct represents '1' with '9101'
c Var 'aux2359' order represents '1' with '1'
c Var 'aux2359' order represents '0' with '-9101'
c Encoding variable: aux2360 with domain: bool (representing constraint (1<=(aux1177 + aux1180 + aux1181)))
c Var 'aux2360' direct represents '0' with '-9102'
c Var 'aux2360' direct represents '1' with '9102'
c Var 'aux2360' order represents '1' with '1'
c Var 'aux2360' order represents '0' with '-9102'
c Encoding variable: aux2361 with domain: bool (representing constraint ((aux1183 + aux1186 + aux1187)<=1))
c Var 'aux2361' direct represents '0' with '-9103'
c Var 'aux2361' direct represents '1' with '9103'
c Var 'aux2361' order represents '1' with '1'
c Var 'aux2361' order represents '0' with '-9103'
c Encoding variable: aux2362 with domain: bool (representing constraint (1<=(aux1183 + aux1186 + aux1187)))
c Var 'aux2362' direct represents '0' with '-9104'
c Var 'aux2362' direct represents '1' with '9104'
c Var 'aux2362' order represents '1' with '1'
c Var 'aux2362' order represents '0' with '-9104'
c Encoding variable: aux2363 with domain: bool (representing constraint ((aux1189 + aux1192 + aux1193)<=1))
c Var 'aux2363' direct represents '0' with '-9105'
c Var 'aux2363' direct represents '1' with '9105'
c Var 'aux2363' order represents '1' with '1'
c Var 'aux2363' order represents '0' with '-9105'
c Encoding variable: aux2364 with domain: bool (representing constraint (1<=(aux1189 + aux1192 + aux1193)))
c Var 'aux2364' direct represents '0' with '-9106'
c Var 'aux2364' direct represents '1' with '9106'
c Var 'aux2364' order represents '1' with '1'
c Var 'aux2364' order represents '0' with '-9106'
c Encoding variable: aux2365 with domain: bool (representing constraint ((aux1195 + aux1198 + aux1199)<=1))
c Var 'aux2365' direct represents '0' with '-9107'
c Var 'aux2365' direct represents '1' with '9107'
c Var 'aux2365' order represents '1' with '1'
c Var 'aux2365' order represents '0' with '-9107'
c Encoding variable: aux2366 with domain: bool (representing constraint (1<=(aux1195 + aux1198 + aux1199)))
c Var 'aux2366' direct represents '0' with '-9108'
c Var 'aux2366' direct represents '1' with '9108'
c Var 'aux2366' order represents '1' with '1'
c Var 'aux2366' order represents '0' with '-9108'
c Encoding variable: aux2367 with domain: bool (representing constraint ((aux1201 + aux1204 + aux1205)<=1))
c Var 'aux2367' direct represents '0' with '-9109'
c Var 'aux2367' direct represents '1' with '9109'
c Var 'aux2367' order represents '1' with '1'
c Var 'aux2367' order represents '0' with '-9109'
c Encoding variable: aux2368 with domain: bool (representing constraint (1<=(aux1201 + aux1204 + aux1205)))
c Var 'aux2368' direct represents '0' with '-9110'
c Var 'aux2368' direct represents '1' with '9110'
c Var 'aux2368' order represents '1' with '1'
c Var 'aux2368' order represents '0' with '-9110'
c Encoding variable: aux2369 with domain: bool (representing constraint ((aux1207 + aux1210 + aux1211)<=1))
c Var 'aux2369' direct represents '0' with '-9111'
c Var 'aux2369' direct represents '1' with '9111'
c Var 'aux2369' order represents '1' with '1'
c Var 'aux2369' order represents '0' with '-9111'
c Encoding variable: aux2370 with domain: bool (representing constraint (1<=(aux1207 + aux1210 + aux1211)))
c Var 'aux2370' direct represents '0' with '-9112'
c Var 'aux2370' direct represents '1' with '9112'
c Var 'aux2370' order represents '1' with '1'
c Var 'aux2370' order represents '0' with '-9112'
c Encoding variable: aux2371 with domain: bool (representing constraint ((aux1213 + aux1216 + aux1217)<=1))
c Var 'aux2371' direct represents '0' with '-9113'
c Var 'aux2371' direct represents '1' with '9113'
c Var 'aux2371' order represents '1' with '1'
c Var 'aux2371' order represents '0' with '-9113'
c Encoding variable: aux2372 with domain: bool (representing constraint (1<=(aux1213 + aux1216 + aux1217)))
c Var 'aux2372' direct represents '0' with '-9114'
c Var 'aux2372' direct represents '1' with '9114'
c Var 'aux2372' order represents '1' with '1'
c Var 'aux2372' order represents '0' with '-9114'
c Encoding variable: aux2373 with domain: bool (representing constraint ((aux1219 + aux1222 + aux1223)<=1))
c Var 'aux2373' direct represents '0' with '-9115'
c Var 'aux2373' direct represents '1' with '9115'
c Var 'aux2373' order represents '1' with '1'
c Var 'aux2373' order represents '0' with '-9115'
c Encoding variable: aux2374 with domain: bool (representing constraint (1<=(aux1219 + aux1222 + aux1223)))
c Var 'aux2374' direct represents '0' with '-9116'
c Var 'aux2374' direct represents '1' with '9116'
c Var 'aux2374' order represents '1' with '1'
c Var 'aux2374' order represents '0' with '-9116'
c Encoding variable: aux2375 with domain: bool (representing constraint ((aux1225 + aux1228 + aux1229)<=1))
c Var 'aux2375' direct represents '0' with '-9117'
c Var 'aux2375' direct represents '1' with '9117'
c Var 'aux2375' order represents '1' with '1'
c Var 'aux2375' order represents '0' with '-9117'
c Encoding variable: aux2376 with domain: bool (representing constraint (1<=(aux1225 + aux1228 + aux1229)))
c Var 'aux2376' direct represents '0' with '-9118'
c Var 'aux2376' direct represents '1' with '9118'
c Var 'aux2376' order represents '1' with '1'
c Var 'aux2376' order represents '0' with '-9118'
c Encoding variable: aux2377 with domain: bool (representing constraint ((aux1231 + aux1234 + aux1235)<=1))
c Var 'aux2377' direct represents '0' with '-9119'
c Var 'aux2377' direct represents '1' with '9119'
c Var 'aux2377' order represents '1' with '1'
c Var 'aux2377' order represents '0' with '-9119'
c Encoding variable: aux2378 with domain: bool (representing constraint (1<=(aux1231 + aux1234 + aux1235)))
c Var 'aux2378' direct represents '0' with '-9120'
c Var 'aux2378' direct represents '1' with '9120'
c Var 'aux2378' order represents '1' with '1'
c Var 'aux2378' order represents '0' with '-9120'
c Encoding variable: aux2379 with domain: bool (representing constraint ((aux1237 + aux1240 + aux1241)<=1))
c Var 'aux2379' direct represents '0' with '-9121'
c Var 'aux2379' direct represents '1' with '9121'
c Var 'aux2379' order represents '1' with '1'
c Var 'aux2379' order represents '0' with '-9121'
c Encoding variable: aux2380 with domain: bool (representing constraint (1<=(aux1237 + aux1240 + aux1241)))
c Var 'aux2380' direct represents '0' with '-9122'
c Var 'aux2380' direct represents '1' with '9122'
c Var 'aux2380' order represents '1' with '1'
c Var 'aux2380' order represents '0' with '-9122'
c Encoding variable: aux2381 with domain: bool (representing constraint ((aux1243 + aux1246 + aux1247)<=1))
c Var 'aux2381' direct represents '0' with '-9123'
c Var 'aux2381' direct represents '1' with '9123'
c Var 'aux2381' order represents '1' with '1'
c Var 'aux2381' order represents '0' with '-9123'
c Encoding variable: aux2382 with domain: bool (representing constraint (1<=(aux1243 + aux1246 + aux1247)))
c Var 'aux2382' direct represents '0' with '-9124'
c Var 'aux2382' direct represents '1' with '9124'
c Var 'aux2382' order represents '1' with '1'
c Var 'aux2382' order represents '0' with '-9124'
c Encoding variable: aux2383 with domain: bool (representing constraint ((aux1249 + aux1252 + aux1253)<=1))
c Var 'aux2383' direct represents '0' with '-9125'
c Var 'aux2383' direct represents '1' with '9125'
c Var 'aux2383' order represents '1' with '1'
c Var 'aux2383' order represents '0' with '-9125'
c Encoding variable: aux2384 with domain: bool (representing constraint (1<=(aux1249 + aux1252 + aux1253)))
c Var 'aux2384' direct represents '0' with '-9126'
c Var 'aux2384' direct represents '1' with '9126'
c Var 'aux2384' order represents '1' with '1'
c Var 'aux2384' order represents '0' with '-9126'
c Encoding variable: aux2385 with domain: bool (representing constraint ((aux1255 + aux1258 + aux1259)<=1))
c Var 'aux2385' direct represents '0' with '-9127'
c Var 'aux2385' direct represents '1' with '9127'
c Var 'aux2385' order represents '1' with '1'
c Var 'aux2385' order represents '0' with '-9127'
c Encoding variable: aux2386 with domain: bool (representing constraint (1<=(aux1255 + aux1258 + aux1259)))
c Var 'aux2386' direct represents '0' with '-9128'
c Var 'aux2386' direct represents '1' with '9128'
c Var 'aux2386' order represents '1' with '1'
c Var 'aux2386' order represents '0' with '-9128'
c Encoding variable: aux2387 with domain: bool (representing constraint ((aux1261 + aux1264 + aux1265)<=1))
c Var 'aux2387' direct represents '0' with '-9129'
c Var 'aux2387' direct represents '1' with '9129'
c Var 'aux2387' order represents '1' with '1'
c Var 'aux2387' order represents '0' with '-9129'
c Encoding variable: aux2388 with domain: bool (representing constraint (1<=(aux1261 + aux1264 + aux1265)))
c Var 'aux2388' direct represents '0' with '-9130'
c Var 'aux2388' direct represents '1' with '9130'
c Var 'aux2388' order represents '1' with '1'
c Var 'aux2388' order represents '0' with '-9130'
c Encoding variable: aux2389 with domain: bool (representing constraint ((aux1267 + aux1270 + aux1271)<=1))
c Var 'aux2389' direct represents '0' with '-9131'
c Var 'aux2389' direct represents '1' with '9131'
c Var 'aux2389' order represents '1' with '1'
c Var 'aux2389' order represents '0' with '-9131'
c Encoding variable: aux2390 with domain: bool (representing constraint (1<=(aux1267 + aux1270 + aux1271)))
c Var 'aux2390' direct represents '0' with '-9132'
c Var 'aux2390' direct represents '1' with '9132'
c Var 'aux2390' order represents '1' with '1'
c Var 'aux2390' order represents '0' with '-9132'
c Encoding variable: aux2391 with domain: bool (representing constraint ((aux1273 + aux1276 + aux1277)<=1))
c Var 'aux2391' direct represents '0' with '-9133'
c Var 'aux2391' direct represents '1' with '9133'
c Var 'aux2391' order represents '1' with '1'
c Var 'aux2391' order represents '0' with '-9133'
c Encoding variable: aux2392 with domain: bool (representing constraint (1<=(aux1273 + aux1276 + aux1277)))
c Var 'aux2392' direct represents '0' with '-9134'
c Var 'aux2392' direct represents '1' with '9134'
c Var 'aux2392' order represents '1' with '1'
c Var 'aux2392' order represents '0' with '-9134'
c Encoding variable: aux2393 with domain: bool (representing constraint ((aux1279 + aux1282 + aux1283)<=1))
c Var 'aux2393' direct represents '0' with '-9135'
c Var 'aux2393' direct represents '1' with '9135'
c Var 'aux2393' order represents '1' with '1'
c Var 'aux2393' order represents '0' with '-9135'
c Encoding variable: aux2394 with domain: bool (representing constraint (1<=(aux1279 + aux1282 + aux1283)))
c Var 'aux2394' direct represents '0' with '-9136'
c Var 'aux2394' direct represents '1' with '9136'
c Var 'aux2394' order represents '1' with '1'
c Var 'aux2394' order represents '0' with '-9136'
c Encoding variable: aux2395 with domain: bool (representing constraint ((aux1285 + aux1288 + aux1289)<=1))
c Var 'aux2395' direct represents '0' with '-9137'
c Var 'aux2395' direct represents '1' with '9137'
c Var 'aux2395' order represents '1' with '1'
c Var 'aux2395' order represents '0' with '-9137'
c Encoding variable: aux2396 with domain: bool (representing constraint (1<=(aux1285 + aux1288 + aux1289)))
c Var 'aux2396' direct represents '0' with '-9138'
c Var 'aux2396' direct represents '1' with '9138'
c Var 'aux2396' order represents '1' with '1'
c Var 'aux2396' order represents '0' with '-9138'
c Encoding variable: aux2397 with domain: bool (representing constraint ((aux1291 + aux1294 + aux1295)<=1))
c Var 'aux2397' direct represents '0' with '-9139'
c Var 'aux2397' direct represents '1' with '9139'
c Var 'aux2397' order represents '1' with '1'
c Var 'aux2397' order represents '0' with '-9139'
c Encoding variable: aux2398 with domain: bool (representing constraint (1<=(aux1291 + aux1294 + aux1295)))
c Var 'aux2398' direct represents '0' with '-9140'
c Var 'aux2398' direct represents '1' with '9140'
c Var 'aux2398' order represents '1' with '1'
c Var 'aux2398' order represents '0' with '-9140'
c Encoding variable: aux2399 with domain: bool (representing constraint ((aux1297 + aux1300 + aux1301)<=1))
c Var 'aux2399' direct represents '0' with '-9141'
c Var 'aux2399' direct represents '1' with '9141'
c Var 'aux2399' order represents '1' with '1'
c Var 'aux2399' order represents '0' with '-9141'
c Encoding variable: aux2400 with domain: bool (representing constraint (1<=(aux1297 + aux1300 + aux1301)))
c Var 'aux2400' direct represents '0' with '-9142'
c Var 'aux2400' direct represents '1' with '9142'
c Var 'aux2400' order represents '1' with '1'
c Var 'aux2400' order represents '0' with '-9142'
c Encoding variable: aux2401 with domain: bool (representing constraint ((aux1303 + aux1306 + aux1307)<=1))
c Var 'aux2401' direct represents '0' with '-9143'
c Var 'aux2401' direct represents '1' with '9143'
c Var 'aux2401' order represents '1' with '1'
c Var 'aux2401' order represents '0' with '-9143'
c Encoding variable: aux2402 with domain: bool (representing constraint (1<=(aux1303 + aux1306 + aux1307)))
c Var 'aux2402' direct represents '0' with '-9144'
c Var 'aux2402' direct represents '1' with '9144'
c Var 'aux2402' order represents '1' with '1'
c Var 'aux2402' order represents '0' with '-9144'
c Encoding variable: aux2403 with domain: bool (representing constraint ((aux1309 + aux1312 + aux1313)<=1))
c Var 'aux2403' direct represents '0' with '-9145'
c Var 'aux2403' direct represents '1' with '9145'
c Var 'aux2403' order represents '1' with '1'
c Var 'aux2403' order represents '0' with '-9145'
c Encoding variable: aux2404 with domain: bool (representing constraint (1<=(aux1309 + aux1312 + aux1313)))
c Var 'aux2404' direct represents '0' with '-9146'
c Var 'aux2404' direct represents '1' with '9146'
c Var 'aux2404' order represents '1' with '1'
c Var 'aux2404' order represents '0' with '-9146'
c Encoding variable: aux2405 with domain: bool (representing constraint ((aux1315 + aux1318 + aux1319)<=1))
c Var 'aux2405' direct represents '0' with '-9147'
c Var 'aux2405' direct represents '1' with '9147'
c Var 'aux2405' order represents '1' with '1'
c Var 'aux2405' order represents '0' with '-9147'
c Encoding variable: aux2406 with domain: bool (representing constraint (1<=(aux1315 + aux1318 + aux1319)))
c Var 'aux2406' direct represents '0' with '-9148'
c Var 'aux2406' direct represents '1' with '9148'
c Var 'aux2406' order represents '1' with '1'
c Var 'aux2406' order represents '0' with '-9148'
c Encoding variable: aux2407 with domain: bool (representing constraint ((aux1321 + aux1324 + aux1325)<=1))
c Var 'aux2407' direct represents '0' with '-9149'
c Var 'aux2407' direct represents '1' with '9149'
c Var 'aux2407' order represents '1' with '1'
c Var 'aux2407' order represents '0' with '-9149'
c Encoding variable: aux2408 with domain: bool (representing constraint (1<=(aux1321 + aux1324 + aux1325)))
c Var 'aux2408' direct represents '0' with '-9150'
c Var 'aux2408' direct represents '1' with '9150'
c Var 'aux2408' order represents '1' with '1'
c Var 'aux2408' order represents '0' with '-9150'
c Encoding variable: aux2409 with domain: bool (representing constraint ((aux1327 + aux1330 + aux1331)<=1))
c Var 'aux2409' direct represents '0' with '-9151'
c Var 'aux2409' direct represents '1' with '9151'
c Var 'aux2409' order represents '1' with '1'
c Var 'aux2409' order represents '0' with '-9151'
c Encoding variable: aux2410 with domain: bool (representing constraint (1<=(aux1327 + aux1330 + aux1331)))
c Var 'aux2410' direct represents '0' with '-9152'
c Var 'aux2410' direct represents '1' with '9152'
c Var 'aux2410' order represents '1' with '1'
c Var 'aux2410' order represents '0' with '-9152'
c Encoding variable: aux2411 with domain: bool (representing constraint ((aux1333 + aux1336 + aux1337)<=1))
c Var 'aux2411' direct represents '0' with '-9153'
c Var 'aux2411' direct represents '1' with '9153'
c Var 'aux2411' order represents '1' with '1'
c Var 'aux2411' order represents '0' with '-9153'
c Encoding variable: aux2412 with domain: bool (representing constraint (1<=(aux1333 + aux1336 + aux1337)))
c Var 'aux2412' direct represents '0' with '-9154'
c Var 'aux2412' direct represents '1' with '9154'
c Var 'aux2412' order represents '1' with '1'
c Var 'aux2412' order represents '0' with '-9154'
c Encoding variable: aux2413 with domain: bool (representing constraint ((aux1339 + aux1342 + aux1343)<=1))
c Var 'aux2413' direct represents '0' with '-9155'
c Var 'aux2413' direct represents '1' with '9155'
c Var 'aux2413' order represents '1' with '1'
c Var 'aux2413' order represents '0' with '-9155'
c Encoding variable: aux2414 with domain: bool (representing constraint (1<=(aux1339 + aux1342 + aux1343)))
c Var 'aux2414' direct represents '0' with '-9156'
c Var 'aux2414' direct represents '1' with '9156'
c Var 'aux2414' order represents '1' with '1'
c Var 'aux2414' order represents '0' with '-9156'
c Encoding variable: aux2415 with domain: bool (representing constraint ((aux1345 + aux1348 + aux1349)<=1))
c Var 'aux2415' direct represents '0' with '-9157'
c Var 'aux2415' direct represents '1' with '9157'
c Var 'aux2415' order represents '1' with '1'
c Var 'aux2415' order represents '0' with '-9157'
c Encoding variable: aux2416 with domain: bool (representing constraint (1<=(aux1345 + aux1348 + aux1349)))
c Var 'aux2416' direct represents '0' with '-9158'
c Var 'aux2416' direct represents '1' with '9158'
c Var 'aux2416' order represents '1' with '1'
c Var 'aux2416' order represents '0' with '-9158'
c Encoding variable: aux2417 with domain: bool (representing constraint ((aux1351 + aux1354 + aux1355)<=1))
c Var 'aux2417' direct represents '0' with '-9159'
c Var 'aux2417' direct represents '1' with '9159'
c Var 'aux2417' order represents '1' with '1'
c Var 'aux2417' order represents '0' with '-9159'
c Encoding variable: aux2418 with domain: bool (representing constraint (1<=(aux1351 + aux1354 + aux1355)))
c Var 'aux2418' direct represents '0' with '-9160'
c Var 'aux2418' direct represents '1' with '9160'
c Var 'aux2418' order represents '1' with '1'
c Var 'aux2418' order represents '0' with '-9160'
c Encoding variable: aux2419 with domain: bool (representing constraint ((aux1357 + aux1360 + aux1361)<=1))
c Var 'aux2419' direct represents '0' with '-9161'
c Var 'aux2419' direct represents '1' with '9161'
c Var 'aux2419' order represents '1' with '1'
c Var 'aux2419' order represents '0' with '-9161'
c Encoding variable: aux2420 with domain: bool (representing constraint (1<=(aux1357 + aux1360 + aux1361)))
c Var 'aux2420' direct represents '0' with '-9162'
c Var 'aux2420' direct represents '1' with '9162'
c Var 'aux2420' order represents '1' with '1'
c Var 'aux2420' order represents '0' with '-9162'
c Encoding variable: aux2421 with domain: bool (representing constraint ((aux1363 + aux1366 + aux1367)<=1))
c Var 'aux2421' direct represents '0' with '-9163'
c Var 'aux2421' direct represents '1' with '9163'
c Var 'aux2421' order represents '1' with '1'
c Var 'aux2421' order represents '0' with '-9163'
c Encoding variable: aux2422 with domain: bool (representing constraint (1<=(aux1363 + aux1366 + aux1367)))
c Var 'aux2422' direct represents '0' with '-9164'
c Var 'aux2422' direct represents '1' with '9164'
c Var 'aux2422' order represents '1' with '1'
c Var 'aux2422' order represents '0' with '-9164'
c Encoding variable: aux2423 with domain: bool (representing constraint ((aux1369 + aux1372 + aux1373)<=1))
c Var 'aux2423' direct represents '0' with '-9165'
c Var 'aux2423' direct represents '1' with '9165'
c Var 'aux2423' order represents '1' with '1'
c Var 'aux2423' order represents '0' with '-9165'
c Encoding variable: aux2424 with domain: bool (representing constraint (1<=(aux1369 + aux1372 + aux1373)))
c Var 'aux2424' direct represents '0' with '-9166'
c Var 'aux2424' direct represents '1' with '9166'
c Var 'aux2424' order represents '1' with '1'
c Var 'aux2424' order represents '0' with '-9166'
c Encoding variable: aux2425 with domain: bool (representing constraint ((aux1375 + aux1378 + aux1379)<=1))
c Var 'aux2425' direct represents '0' with '-9167'
c Var 'aux2425' direct represents '1' with '9167'
c Var 'aux2425' order represents '1' with '1'
c Var 'aux2425' order represents '0' with '-9167'
c Encoding variable: aux2426 with domain: bool (representing constraint (1<=(aux1375 + aux1378 + aux1379)))
c Var 'aux2426' direct represents '0' with '-9168'
c Var 'aux2426' direct represents '1' with '9168'
c Var 'aux2426' order represents '1' with '1'
c Var 'aux2426' order represents '0' with '-9168'
c Encoding variable: aux2427 with domain: bool (representing constraint ((aux1381 + aux1384 + aux1385)<=1))
c Var 'aux2427' direct represents '0' with '-9169'
c Var 'aux2427' direct represents '1' with '9169'
c Var 'aux2427' order represents '1' with '1'
c Var 'aux2427' order represents '0' with '-9169'
c Encoding variable: aux2428 with domain: bool (representing constraint (1<=(aux1381 + aux1384 + aux1385)))
c Var 'aux2428' direct represents '0' with '-9170'
c Var 'aux2428' direct represents '1' with '9170'
c Var 'aux2428' order represents '1' with '1'
c Var 'aux2428' order represents '0' with '-9170'
c Encoding variable: aux2429 with domain: bool (representing constraint ((aux1387 + aux1390 + aux1391)<=1))
c Var 'aux2429' direct represents '0' with '-9171'
c Var 'aux2429' direct represents '1' with '9171'
c Var 'aux2429' order represents '1' with '1'
c Var 'aux2429' order represents '0' with '-9171'
c Encoding variable: aux2430 with domain: bool (representing constraint (1<=(aux1387 + aux1390 + aux1391)))
c Var 'aux2430' direct represents '0' with '-9172'
c Var 'aux2430' direct represents '1' with '9172'
c Var 'aux2430' order represents '1' with '1'
c Var 'aux2430' order represents '0' with '-9172'
c Encoding variable: aux2431 with domain: bool (representing constraint ((aux1393 + aux1396 + aux1397)<=1))
c Var 'aux2431' direct represents '0' with '-9173'
c Var 'aux2431' direct represents '1' with '9173'
c Var 'aux2431' order represents '1' with '1'
c Var 'aux2431' order represents '0' with '-9173'
c Encoding variable: aux2432 with domain: bool (representing constraint (1<=(aux1393 + aux1396 + aux1397)))
c Var 'aux2432' direct represents '0' with '-9174'
c Var 'aux2432' direct represents '1' with '9174'
c Var 'aux2432' order represents '1' with '1'
c Var 'aux2432' order represents '0' with '-9174'
c Encoding variable: aux2433 with domain: bool (representing constraint ((aux1399 + aux1402 + aux1403)<=1))
c Var 'aux2433' direct represents '0' with '-9175'
c Var 'aux2433' direct represents '1' with '9175'
c Var 'aux2433' order represents '1' with '1'
c Var 'aux2433' order represents '0' with '-9175'
c Encoding variable: aux2434 with domain: bool (representing constraint (1<=(aux1399 + aux1402 + aux1403)))
c Var 'aux2434' direct represents '0' with '-9176'
c Var 'aux2434' direct represents '1' with '9176'
c Var 'aux2434' order represents '1' with '1'
c Var 'aux2434' order represents '0' with '-9176'
c Encoding variable: aux2435 with domain: bool (representing constraint ((aux1405 + aux1408 + aux1409)<=1))
c Var 'aux2435' direct represents '0' with '-9177'
c Var 'aux2435' direct represents '1' with '9177'
c Var 'aux2435' order represents '1' with '1'
c Var 'aux2435' order represents '0' with '-9177'
c Encoding variable: aux2436 with domain: bool (representing constraint (1<=(aux1405 + aux1408 + aux1409)))
c Var 'aux2436' direct represents '0' with '-9178'
c Var 'aux2436' direct represents '1' with '9178'
c Var 'aux2436' order represents '1' with '1'
c Var 'aux2436' order represents '0' with '-9178'
c Encoding variable: aux2437 with domain: bool (representing constraint ((aux1411 + aux1414 + aux1415)<=1))
c Var 'aux2437' direct represents '0' with '-9179'
c Var 'aux2437' direct represents '1' with '9179'
c Var 'aux2437' order represents '1' with '1'
c Var 'aux2437' order represents '0' with '-9179'
c Encoding variable: aux2438 with domain: bool (representing constraint (1<=(aux1411 + aux1414 + aux1415)))
c Var 'aux2438' direct represents '0' with '-9180'
c Var 'aux2438' direct represents '1' with '9180'
c Var 'aux2438' order represents '1' with '1'
c Var 'aux2438' order represents '0' with '-9180'
c Encoding variable: aux2439 with domain: bool (representing constraint ((aux1417 + aux1420 + aux1421)<=1))
c Var 'aux2439' direct represents '0' with '-9181'
c Var 'aux2439' direct represents '1' with '9181'
c Var 'aux2439' order represents '1' with '1'
c Var 'aux2439' order represents '0' with '-9181'
c Encoding variable: aux2440 with domain: bool (representing constraint (1<=(aux1417 + aux1420 + aux1421)))
c Var 'aux2440' direct represents '0' with '-9182'
c Var 'aux2440' direct represents '1' with '9182'
c Var 'aux2440' order represents '1' with '1'
c Var 'aux2440' order represents '0' with '-9182'
c Encoding variable: aux2441 with domain: bool (representing constraint ((aux1423 + aux1426 + aux1427)<=1))
c Var 'aux2441' direct represents '0' with '-9183'
c Var 'aux2441' direct represents '1' with '9183'
c Var 'aux2441' order represents '1' with '1'
c Var 'aux2441' order represents '0' with '-9183'
c Encoding variable: aux2442 with domain: bool (representing constraint (1<=(aux1423 + aux1426 + aux1427)))
c Var 'aux2442' direct represents '0' with '-9184'
c Var 'aux2442' direct represents '1' with '9184'
c Var 'aux2442' order represents '1' with '1'
c Var 'aux2442' order represents '0' with '-9184'
c Encoding variable: aux2443 with domain: bool (representing constraint ((aux1429 + aux1432 + aux1433)<=1))
c Var 'aux2443' direct represents '0' with '-9185'
c Var 'aux2443' direct represents '1' with '9185'
c Var 'aux2443' order represents '1' with '1'
c Var 'aux2443' order represents '0' with '-9185'
c Encoding variable: aux2444 with domain: bool (representing constraint (1<=(aux1429 + aux1432 + aux1433)))
c Var 'aux2444' direct represents '0' with '-9186'
c Var 'aux2444' direct represents '1' with '9186'
c Var 'aux2444' order represents '1' with '1'
c Var 'aux2444' order represents '0' with '-9186'
c Encoding variable: aux2445 with domain: bool (representing constraint ((aux1435 + aux1438 + aux1439)<=1))
c Var 'aux2445' direct represents '0' with '-9187'
c Var 'aux2445' direct represents '1' with '9187'
c Var 'aux2445' order represents '1' with '1'
c Var 'aux2445' order represents '0' with '-9187'
c Encoding variable: aux2446 with domain: bool (representing constraint (1<=(aux1435 + aux1438 + aux1439)))
c Var 'aux2446' direct represents '0' with '-9188'
c Var 'aux2446' direct represents '1' with '9188'
c Var 'aux2446' order represents '1' with '1'
c Var 'aux2446' order represents '0' with '-9188'
c Encoding variable: aux2447 with domain: bool (representing constraint ((aux1441 + aux1444 + aux1445)<=1))
c Var 'aux2447' direct represents '0' with '-9189'
c Var 'aux2447' direct represents '1' with '9189'
c Var 'aux2447' order represents '1' with '1'
c Var 'aux2447' order represents '0' with '-9189'
c Encoding variable: aux2448 with domain: bool (representing constraint (1<=(aux1441 + aux1444 + aux1445)))
c Var 'aux2448' direct represents '0' with '-9190'
c Var 'aux2448' direct represents '1' with '9190'
c Var 'aux2448' order represents '1' with '1'
c Var 'aux2448' order represents '0' with '-9190'
c Encoding variable: aux2449 with domain: bool (representing constraint ((aux1447 + aux1450 + aux1451)<=1))
c Var 'aux2449' direct represents '0' with '-9191'
c Var 'aux2449' direct represents '1' with '9191'
c Var 'aux2449' order represents '1' with '1'
c Var 'aux2449' order represents '0' with '-9191'
c Encoding variable: aux2450 with domain: bool (representing constraint (1<=(aux1447 + aux1450 + aux1451)))
c Var 'aux2450' direct represents '0' with '-9192'
c Var 'aux2450' direct represents '1' with '9192'
c Var 'aux2450' order represents '1' with '1'
c Var 'aux2450' order represents '0' with '-9192'
c Encoding variable: aux2451 with domain: bool (representing constraint ((aux1453 + aux1456 + aux1457)<=1))
c Var 'aux2451' direct represents '0' with '-9193'
c Var 'aux2451' direct represents '1' with '9193'
c Var 'aux2451' order represents '1' with '1'
c Var 'aux2451' order represents '0' with '-9193'
c Encoding variable: aux2452 with domain: bool (representing constraint (1<=(aux1453 + aux1456 + aux1457)))
c Var 'aux2452' direct represents '0' with '-9194'
c Var 'aux2452' direct represents '1' with '9194'
c Var 'aux2452' order represents '1' with '1'
c Var 'aux2452' order represents '0' with '-9194'
c Encoding variable: aux2453 with domain: bool (representing constraint ((aux1459 + aux1462 + aux1463)<=1))
c Var 'aux2453' direct represents '0' with '-9195'
c Var 'aux2453' direct represents '1' with '9195'
c Var 'aux2453' order represents '1' with '1'
c Var 'aux2453' order represents '0' with '-9195'
c Encoding variable: aux2454 with domain: bool (representing constraint (1<=(aux1459 + aux1462 + aux1463)))
c Var 'aux2454' direct represents '0' with '-9196'
c Var 'aux2454' direct represents '1' with '9196'
c Var 'aux2454' order represents '1' with '1'
c Var 'aux2454' order represents '0' with '-9196'
c Encoding variable: aux2455 with domain: bool (representing constraint ((aux1465 + aux1468 + aux1469)<=1))
c Var 'aux2455' direct represents '0' with '-9197'
c Var 'aux2455' direct represents '1' with '9197'
c Var 'aux2455' order represents '1' with '1'
c Var 'aux2455' order represents '0' with '-9197'
c Encoding variable: aux2456 with domain: bool (representing constraint (1<=(aux1465 + aux1468 + aux1469)))
c Var 'aux2456' direct represents '0' with '-9198'
c Var 'aux2456' direct represents '1' with '9198'
c Var 'aux2456' order represents '1' with '1'
c Var 'aux2456' order represents '0' with '-9198'
c Encoding variable: aux2457 with domain: bool (representing constraint ((aux1471 + aux1474 + aux1475)<=1))
c Var 'aux2457' direct represents '0' with '-9199'
c Var 'aux2457' direct represents '1' with '9199'
c Var 'aux2457' order represents '1' with '1'
c Var 'aux2457' order represents '0' with '-9199'
c Encoding variable: aux2458 with domain: bool (representing constraint (1<=(aux1471 + aux1474 + aux1475)))
c Var 'aux2458' direct represents '0' with '-9200'
c Var 'aux2458' direct represents '1' with '9200'
c Var 'aux2458' order represents '1' with '1'
c Var 'aux2458' order represents '0' with '-9200'
c Encoding variable: aux2459 with domain: bool (representing constraint ((aux1477 + aux1480 + aux1481)<=1))
c Var 'aux2459' direct represents '0' with '-9201'
c Var 'aux2459' direct represents '1' with '9201'
c Var 'aux2459' order represents '1' with '1'
c Var 'aux2459' order represents '0' with '-9201'
c Encoding variable: aux2460 with domain: bool (representing constraint (1<=(aux1477 + aux1480 + aux1481)))
c Var 'aux2460' direct represents '0' with '-9202'
c Var 'aux2460' direct represents '1' with '9202'
c Var 'aux2460' order represents '1' with '1'
c Var 'aux2460' order represents '0' with '-9202'
c Encoding variable: aux2461 with domain: bool (representing constraint ((aux1483 + aux1486 + aux1487)<=1))
c Var 'aux2461' direct represents '0' with '-9203'
c Var 'aux2461' direct represents '1' with '9203'
c Var 'aux2461' order represents '1' with '1'
c Var 'aux2461' order represents '0' with '-9203'
c Encoding variable: aux2462 with domain: bool (representing constraint (1<=(aux1483 + aux1486 + aux1487)))
c Var 'aux2462' direct represents '0' with '-9204'
c Var 'aux2462' direct represents '1' with '9204'
c Var 'aux2462' order represents '1' with '1'
c Var 'aux2462' order represents '0' with '-9204'
c Encoding variable: aux2463 with domain: bool (representing constraint ((aux1489 + aux1492 + aux1493)<=1))
c Var 'aux2463' direct represents '0' with '-9205'
c Var 'aux2463' direct represents '1' with '9205'
c Var 'aux2463' order represents '1' with '1'
c Var 'aux2463' order represents '0' with '-9205'
c Encoding variable: aux2464 with domain: bool (representing constraint (1<=(aux1489 + aux1492 + aux1493)))
c Var 'aux2464' direct represents '0' with '-9206'
c Var 'aux2464' direct represents '1' with '9206'
c Var 'aux2464' order represents '1' with '1'
c Var 'aux2464' order represents '0' with '-9206'
c Encoding variable: aux2465 with domain: bool (representing constraint ((aux1495 + aux1498 + aux1499)<=1))
c Var 'aux2465' direct represents '0' with '-9207'
c Var 'aux2465' direct represents '1' with '9207'
c Var 'aux2465' order represents '1' with '1'
c Var 'aux2465' order represents '0' with '-9207'
c Encoding variable: aux2466 with domain: bool (representing constraint (1<=(aux1495 + aux1498 + aux1499)))
c Var 'aux2466' direct represents '0' with '-9208'
c Var 'aux2466' direct represents '1' with '9208'
c Var 'aux2466' order represents '1' with '1'
c Var 'aux2466' order represents '0' with '-9208'
c Encoding variable: aux2467 with domain: bool (representing constraint ((aux1501 + aux1504 + aux1505)<=1))
c Var 'aux2467' direct represents '0' with '-9209'
c Var 'aux2467' direct represents '1' with '9209'
c Var 'aux2467' order represents '1' with '1'
c Var 'aux2467' order represents '0' with '-9209'
c Encoding variable: aux2468 with domain: bool (representing constraint (1<=(aux1501 + aux1504 + aux1505)))
c Var 'aux2468' direct represents '0' with '-9210'
c Var 'aux2468' direct represents '1' with '9210'
c Var 'aux2468' order represents '1' with '1'
c Var 'aux2468' order represents '0' with '-9210'
c Encoding variable: aux2469 with domain: bool (representing constraint ((aux1507 + aux1510 + aux1511)<=1))
c Var 'aux2469' direct represents '0' with '-9211'
c Var 'aux2469' direct represents '1' with '9211'
c Var 'aux2469' order represents '1' with '1'
c Var 'aux2469' order represents '0' with '-9211'
c Encoding variable: aux2470 with domain: bool (representing constraint (1<=(aux1507 + aux1510 + aux1511)))
c Var 'aux2470' direct represents '0' with '-9212'
c Var 'aux2470' direct represents '1' with '9212'
c Var 'aux2470' order represents '1' with '1'
c Var 'aux2470' order represents '0' with '-9212'
c Encoding variable: aux2471 with domain: bool (representing constraint ((aux1513 + aux1516 + aux1517)<=1))
c Var 'aux2471' direct represents '0' with '-9213'
c Var 'aux2471' direct represents '1' with '9213'
c Var 'aux2471' order represents '1' with '1'
c Var 'aux2471' order represents '0' with '-9213'
c Encoding variable: aux2472 with domain: bool (representing constraint (1<=(aux1513 + aux1516 + aux1517)))
c Var 'aux2472' direct represents '0' with '-9214'
c Var 'aux2472' direct represents '1' with '9214'
c Var 'aux2472' order represents '1' with '1'
c Var 'aux2472' order represents '0' with '-9214'
c Encoding variable: aux2473 with domain: bool (representing constraint ((aux1519 + aux1522 + aux1523)<=1))
c Var 'aux2473' direct represents '0' with '-9215'
c Var 'aux2473' direct represents '1' with '9215'
c Var 'aux2473' order represents '1' with '1'
c Var 'aux2473' order represents '0' with '-9215'
c Encoding variable: aux2474 with domain: bool (representing constraint (1<=(aux1519 + aux1522 + aux1523)))
c Var 'aux2474' direct represents '0' with '-9216'
c Var 'aux2474' direct represents '1' with '9216'
c Var 'aux2474' order represents '1' with '1'
c Var 'aux2474' order represents '0' with '-9216'
c Encoding variable: aux2475 with domain: bool (representing constraint ((aux1525 + aux1528 + aux1529)<=1))
c Var 'aux2475' direct represents '0' with '-9217'
c Var 'aux2475' direct represents '1' with '9217'
c Var 'aux2475' order represents '1' with '1'
c Var 'aux2475' order represents '0' with '-9217'
c Encoding variable: aux2476 with domain: bool (representing constraint (1<=(aux1525 + aux1528 + aux1529)))
c Var 'aux2476' direct represents '0' with '-9218'
c Var 'aux2476' direct represents '1' with '9218'
c Var 'aux2476' order represents '1' with '1'
c Var 'aux2476' order represents '0' with '-9218'
c Encoding variable: aux2477 with domain: bool (representing constraint ((aux1531 + aux1534 + aux1535)<=1))
c Var 'aux2477' direct represents '0' with '-9219'
c Var 'aux2477' direct represents '1' with '9219'
c Var 'aux2477' order represents '1' with '1'
c Var 'aux2477' order represents '0' with '-9219'
c Encoding variable: aux2478 with domain: bool (representing constraint (1<=(aux1531 + aux1534 + aux1535)))
c Var 'aux2478' direct represents '0' with '-9220'
c Var 'aux2478' direct represents '1' with '9220'
c Var 'aux2478' order represents '1' with '1'
c Var 'aux2478' order represents '0' with '-9220'
c Encoding variable: aux2479 with domain: bool (representing constraint ((aux1537 + aux1540 + aux1541)<=1))
c Var 'aux2479' direct represents '0' with '-9221'
c Var 'aux2479' direct represents '1' with '9221'
c Var 'aux2479' order represents '1' with '1'
c Var 'aux2479' order represents '0' with '-9221'
c Encoding variable: aux2480 with domain: bool (representing constraint (1<=(aux1537 + aux1540 + aux1541)))
c Var 'aux2480' direct represents '0' with '-9222'
c Var 'aux2480' direct represents '1' with '9222'
c Var 'aux2480' order represents '1' with '1'
c Var 'aux2480' order represents '0' with '-9222'
c Encoding variable: aux2481 with domain: bool (representing constraint ((aux1543 + aux1546 + aux1547)<=1))
c Var 'aux2481' direct represents '0' with '-9223'
c Var 'aux2481' direct represents '1' with '9223'
c Var 'aux2481' order represents '1' with '1'
c Var 'aux2481' order represents '0' with '-9223'
c Encoding variable: aux2482 with domain: bool (representing constraint (1<=(aux1543 + aux1546 + aux1547)))
c Var 'aux2482' direct represents '0' with '-9224'
c Var 'aux2482' direct represents '1' with '9224'
c Var 'aux2482' order represents '1' with '1'
c Var 'aux2482' order represents '0' with '-9224'
c Encoding variable: aux2483 with domain: bool (representing constraint ((aux1549 + aux1552 + aux1553)<=1))
c Var 'aux2483' direct represents '0' with '-9225'
c Var 'aux2483' direct represents '1' with '9225'
c Var 'aux2483' order represents '1' with '1'
c Var 'aux2483' order represents '0' with '-9225'
c Encoding variable: aux2484 with domain: bool (representing constraint (1<=(aux1549 + aux1552 + aux1553)))
c Var 'aux2484' direct represents '0' with '-9226'
c Var 'aux2484' direct represents '1' with '9226'
c Var 'aux2484' order represents '1' with '1'
c Var 'aux2484' order represents '0' with '-9226'
c Encoding variable: aux2485 with domain: bool (representing constraint ((aux1555 + aux1558 + aux1559)<=1))
c Var 'aux2485' direct represents '0' with '-9227'
c Var 'aux2485' direct represents '1' with '9227'
c Var 'aux2485' order represents '1' with '1'
c Var 'aux2485' order represents '0' with '-9227'
c Encoding variable: aux2486 with domain: bool (representing constraint (1<=(aux1555 + aux1558 + aux1559)))
c Var 'aux2486' direct represents '0' with '-9228'
c Var 'aux2486' direct represents '1' with '9228'
c Var 'aux2486' order represents '1' with '1'
c Var 'aux2486' order represents '0' with '-9228'
c Encoding variable: aux2487 with domain: bool (representing constraint ((aux1561 + aux1564 + aux1565)<=1))
c Var 'aux2487' direct represents '0' with '-9229'
c Var 'aux2487' direct represents '1' with '9229'
c Var 'aux2487' order represents '1' with '1'
c Var 'aux2487' order represents '0' with '-9229'
c Encoding variable: aux2488 with domain: bool (representing constraint (1<=(aux1561 + aux1564 + aux1565)))
c Var 'aux2488' direct represents '0' with '-9230'
c Var 'aux2488' direct represents '1' with '9230'
c Var 'aux2488' order represents '1' with '1'
c Var 'aux2488' order represents '0' with '-9230'
c Encoding variable: aux2489 with domain: bool (representing constraint ((aux1567 + aux1570 + aux1571)<=1))
c Var 'aux2489' direct represents '0' with '-9231'
c Var 'aux2489' direct represents '1' with '9231'
c Var 'aux2489' order represents '1' with '1'
c Var 'aux2489' order represents '0' with '-9231'
c Encoding variable: aux2490 with domain: bool (representing constraint (1<=(aux1567 + aux1570 + aux1571)))
c Var 'aux2490' direct represents '0' with '-9232'
c Var 'aux2490' direct represents '1' with '9232'
c Var 'aux2490' order represents '1' with '1'
c Var 'aux2490' order represents '0' with '-9232'
c Encoding variable: aux2491 with domain: bool (representing constraint ((aux1573 + aux1576 + aux1577)<=1))
c Var 'aux2491' direct represents '0' with '-9233'
c Var 'aux2491' direct represents '1' with '9233'
c Var 'aux2491' order represents '1' with '1'
c Var 'aux2491' order represents '0' with '-9233'
c Encoding variable: aux2492 with domain: bool (representing constraint (1<=(aux1573 + aux1576 + aux1577)))
c Var 'aux2492' direct represents '0' with '-9234'
c Var 'aux2492' direct represents '1' with '9234'
c Var 'aux2492' order represents '1' with '1'
c Var 'aux2492' order represents '0' with '-9234'
c Encoding variable: aux2493 with domain: bool (representing constraint ((aux1579 + aux1582 + aux1583)<=1))
c Var 'aux2493' direct represents '0' with '-9235'
c Var 'aux2493' direct represents '1' with '9235'
c Var 'aux2493' order represents '1' with '1'
c Var 'aux2493' order represents '0' with '-9235'
c Encoding variable: aux2494 with domain: bool (representing constraint (1<=(aux1579 + aux1582 + aux1583)))
c Var 'aux2494' direct represents '0' with '-9236'
c Var 'aux2494' direct represents '1' with '9236'
c Var 'aux2494' order represents '1' with '1'
c Var 'aux2494' order represents '0' with '-9236'
c Encoding variable: aux2495 with domain: bool (representing constraint ((aux1585 + aux1588 + aux1589)<=1))
c Var 'aux2495' direct represents '0' with '-9237'
c Var 'aux2495' direct represents '1' with '9237'
c Var 'aux2495' order represents '1' with '1'
c Var 'aux2495' order represents '0' with '-9237'
c Encoding variable: aux2496 with domain: bool (representing constraint (1<=(aux1585 + aux1588 + aux1589)))
c Var 'aux2496' direct represents '0' with '-9238'
c Var 'aux2496' direct represents '1' with '9238'
c Var 'aux2496' order represents '1' with '1'
c Var 'aux2496' order represents '0' with '-9238'
c Encoding variable: aux2497 with domain: bool (representing constraint ((aux1591 + aux1594 + aux1595)<=1))
c Var 'aux2497' direct represents '0' with '-9239'
c Var 'aux2497' direct represents '1' with '9239'
c Var 'aux2497' order represents '1' with '1'
c Var 'aux2497' order represents '0' with '-9239'
c Encoding variable: aux2498 with domain: bool (representing constraint (1<=(aux1591 + aux1594 + aux1595)))
c Var 'aux2498' direct represents '0' with '-9240'
c Var 'aux2498' direct represents '1' with '9240'
c Var 'aux2498' order represents '1' with '1'
c Var 'aux2498' order represents '0' with '-9240'
c Encoding variable: aux2499 with domain: bool (representing constraint ((aux1597 + aux1600 + aux1601)<=1))
c Var 'aux2499' direct represents '0' with '-9241'
c Var 'aux2499' direct represents '1' with '9241'
c Var 'aux2499' order represents '1' with '1'
c Var 'aux2499' order represents '0' with '-9241'
c Encoding variable: aux2500 with domain: bool (representing constraint (1<=(aux1597 + aux1600 + aux1601)))
c Var 'aux2500' direct represents '0' with '-9242'
c Var 'aux2500' direct represents '1' with '9242'
c Var 'aux2500' order represents '1' with '1'
c Var 'aux2500' order represents '0' with '-9242'
c Encoding variable: aux2501 with domain: bool (representing constraint ((aux1603 + aux1606 + aux1607)<=1))
c Var 'aux2501' direct represents '0' with '-9243'
c Var 'aux2501' direct represents '1' with '9243'
c Var 'aux2501' order represents '1' with '1'
c Var 'aux2501' order represents '0' with '-9243'
c Encoding variable: aux2502 with domain: bool (representing constraint (1<=(aux1603 + aux1606 + aux1607)))
c Var 'aux2502' direct represents '0' with '-9244'
c Var 'aux2502' direct represents '1' with '9244'
c Var 'aux2502' order represents '1' with '1'
c Var 'aux2502' order represents '0' with '-9244'
c Encoding variable: aux2503 with domain: bool (representing constraint ((aux1609 + aux1612 + aux1613)<=1))
c Var 'aux2503' direct represents '0' with '-9245'
c Var 'aux2503' direct represents '1' with '9245'
c Var 'aux2503' order represents '1' with '1'
c Var 'aux2503' order represents '0' with '-9245'
c Encoding variable: aux2504 with domain: bool (representing constraint (1<=(aux1609 + aux1612 + aux1613)))
c Var 'aux2504' direct represents '0' with '-9246'
c Var 'aux2504' direct represents '1' with '9246'
c Var 'aux2504' order represents '1' with '1'
c Var 'aux2504' order represents '0' with '-9246'
c Encoding variable: aux2505 with domain: bool (representing constraint ((aux1615 + aux1618 + aux1619)<=1))
c Var 'aux2505' direct represents '0' with '-9247'
c Var 'aux2505' direct represents '1' with '9247'
c Var 'aux2505' order represents '1' with '1'
c Var 'aux2505' order represents '0' with '-9247'
c Encoding variable: aux2506 with domain: bool (representing constraint (1<=(aux1615 + aux1618 + aux1619)))
c Var 'aux2506' direct represents '0' with '-9248'
c Var 'aux2506' direct represents '1' with '9248'
c Var 'aux2506' order represents '1' with '1'
c Var 'aux2506' order represents '0' with '-9248'
c Encoding variable: aux2507 with domain: bool (representing constraint ((aux1621 + aux1624 + aux1625)<=1))
c Var 'aux2507' direct represents '0' with '-9249'
c Var 'aux2507' direct represents '1' with '9249'
c Var 'aux2507' order represents '1' with '1'
c Var 'aux2507' order represents '0' with '-9249'
c Encoding variable: aux2508 with domain: bool (representing constraint (1<=(aux1621 + aux1624 + aux1625)))
c Var 'aux2508' direct represents '0' with '-9250'
c Var 'aux2508' direct represents '1' with '9250'
c Var 'aux2508' order represents '1' with '1'
c Var 'aux2508' order represents '0' with '-9250'
c Encoding variable: aux2509 with domain: bool (representing constraint ((aux1627 + aux1630 + aux1631)<=1))
c Var 'aux2509' direct represents '0' with '-9251'
c Var 'aux2509' direct represents '1' with '9251'
c Var 'aux2509' order represents '1' with '1'
c Var 'aux2509' order represents '0' with '-9251'
c Encoding variable: aux2510 with domain: bool (representing constraint (1<=(aux1627 + aux1630 + aux1631)))
c Var 'aux2510' direct represents '0' with '-9252'
c Var 'aux2510' direct represents '1' with '9252'
c Var 'aux2510' order represents '1' with '1'
c Var 'aux2510' order represents '0' with '-9252'
c Encoding variable: aux2511 with domain: bool (representing constraint ((aux1633 + aux1636 + aux1637)<=1))
c Var 'aux2511' direct represents '0' with '-9253'
c Var 'aux2511' direct represents '1' with '9253'
c Var 'aux2511' order represents '1' with '1'
c Var 'aux2511' order represents '0' with '-9253'
c Encoding variable: aux2512 with domain: bool (representing constraint (1<=(aux1633 + aux1636 + aux1637)))
c Var 'aux2512' direct represents '0' with '-9254'
c Var 'aux2512' direct represents '1' with '9254'
c Var 'aux2512' order represents '1' with '1'
c Var 'aux2512' order represents '0' with '-9254'
c Encoding variable: aux2513 with domain: bool (representing constraint ((aux1639 + aux1642 + aux1643)<=1))
c Var 'aux2513' direct represents '0' with '-9255'
c Var 'aux2513' direct represents '1' with '9255'
c Var 'aux2513' order represents '1' with '1'
c Var 'aux2513' order represents '0' with '-9255'
c Encoding variable: aux2514 with domain: bool (representing constraint (1<=(aux1639 + aux1642 + aux1643)))
c Var 'aux2514' direct represents '0' with '-9256'
c Var 'aux2514' direct represents '1' with '9256'
c Var 'aux2514' order represents '1' with '1'
c Var 'aux2514' order represents '0' with '-9256'
c Encoding variable: aux2515 with domain: bool (representing constraint ((aux1645 + aux1648 + aux1649)<=1))
c Var 'aux2515' direct represents '0' with '-9257'
c Var 'aux2515' direct represents '1' with '9257'
c Var 'aux2515' order represents '1' with '1'
c Var 'aux2515' order represents '0' with '-9257'
c Encoding variable: aux2516 with domain: bool (representing constraint (1<=(aux1645 + aux1648 + aux1649)))
c Var 'aux2516' direct represents '0' with '-9258'
c Var 'aux2516' direct represents '1' with '9258'
c Var 'aux2516' order represents '1' with '1'
c Var 'aux2516' order represents '0' with '-9258'
c Encoding variable: aux2517 with domain: bool (representing constraint ((aux1651 + aux1654 + aux1655)<=1))
c Var 'aux2517' direct represents '0' with '-9259'
c Var 'aux2517' direct represents '1' with '9259'
c Var 'aux2517' order represents '1' with '1'
c Var 'aux2517' order represents '0' with '-9259'
c Encoding variable: aux2518 with domain: bool (representing constraint (1<=(aux1651 + aux1654 + aux1655)))
c Var 'aux2518' direct represents '0' with '-9260'
c Var 'aux2518' direct represents '1' with '9260'
c Var 'aux2518' order represents '1' with '1'
c Var 'aux2518' order represents '0' with '-9260'
c Encoding variable: aux2519 with domain: bool (representing constraint ((aux1657 + aux1660 + aux1661)<=1))
c Var 'aux2519' direct represents '0' with '-9261'
c Var 'aux2519' direct represents '1' with '9261'
c Var 'aux2519' order represents '1' with '1'
c Var 'aux2519' order represents '0' with '-9261'
c Encoding variable: aux2520 with domain: bool (representing constraint (1<=(aux1657 + aux1660 + aux1661)))
c Var 'aux2520' direct represents '0' with '-9262'
c Var 'aux2520' direct represents '1' with '9262'
c Var 'aux2520' order represents '1' with '1'
c Var 'aux2520' order represents '0' with '-9262'
c Encoding variable: aux2521 with domain: bool (representing constraint ((aux1663 + aux1666 + aux1667)<=1))
c Var 'aux2521' direct represents '0' with '-9263'
c Var 'aux2521' direct represents '1' with '9263'
c Var 'aux2521' order represents '1' with '1'
c Var 'aux2521' order represents '0' with '-9263'
c Encoding variable: aux2522 with domain: bool (representing constraint (1<=(aux1663 + aux1666 + aux1667)))
c Var 'aux2522' direct represents '0' with '-9264'
c Var 'aux2522' direct represents '1' with '9264'
c Var 'aux2522' order represents '1' with '1'
c Var 'aux2522' order represents '0' with '-9264'
c Encoding variable: aux2523 with domain: bool (representing constraint ((aux1669 + aux1672 + aux1673)<=1))
c Var 'aux2523' direct represents '0' with '-9265'
c Var 'aux2523' direct represents '1' with '9265'
c Var 'aux2523' order represents '1' with '1'
c Var 'aux2523' order represents '0' with '-9265'
c Encoding variable: aux2524 with domain: bool (representing constraint (1<=(aux1669 + aux1672 + aux1673)))
c Var 'aux2524' direct represents '0' with '-9266'
c Var 'aux2524' direct represents '1' with '9266'
c Var 'aux2524' order represents '1' with '1'
c Var 'aux2524' order represents '0' with '-9266'
c Encoding variable: aux2525 with domain: bool (representing constraint ((aux1675 + aux1678 + aux1679)<=1))
c Var 'aux2525' direct represents '0' with '-9267'
c Var 'aux2525' direct represents '1' with '9267'
c Var 'aux2525' order represents '1' with '1'
c Var 'aux2525' order represents '0' with '-9267'
c Encoding variable: aux2526 with domain: bool (representing constraint (1<=(aux1675 + aux1678 + aux1679)))
c Var 'aux2526' direct represents '0' with '-9268'
c Var 'aux2526' direct represents '1' with '9268'
c Var 'aux2526' order represents '1' with '1'
c Var 'aux2526' order represents '0' with '-9268'
c Encoding variable: aux2527 with domain: bool (representing constraint ((aux1681 + aux1684 + aux1685)<=1))
c Var 'aux2527' direct represents '0' with '-9269'
c Var 'aux2527' direct represents '1' with '9269'
c Var 'aux2527' order represents '1' with '1'
c Var 'aux2527' order represents '0' with '-9269'
c Encoding variable: aux2528 with domain: bool (representing constraint (1<=(aux1681 + aux1684 + aux1685)))
c Var 'aux2528' direct represents '0' with '-9270'
c Var 'aux2528' direct represents '1' with '9270'
c Var 'aux2528' order represents '1' with '1'
c Var 'aux2528' order represents '0' with '-9270'
c Encoding variable: aux2529 with domain: bool (representing constraint ((aux1687 + aux1690 + aux1691)<=1))
c Var 'aux2529' direct represents '0' with '-9271'
c Var 'aux2529' direct represents '1' with '9271'
c Var 'aux2529' order represents '1' with '1'
c Var 'aux2529' order represents '0' with '-9271'
c Encoding variable: aux2530 with domain: bool (representing constraint (1<=(aux1687 + aux1690 + aux1691)))
c Var 'aux2530' direct represents '0' with '-9272'
c Var 'aux2530' direct represents '1' with '9272'
c Var 'aux2530' order represents '1' with '1'
c Var 'aux2530' order represents '0' with '-9272'
c Encoding variable: aux2531 with domain: bool (representing constraint ((aux1693 + aux1696 + aux1697)<=1))
c Var 'aux2531' direct represents '0' with '-9273'
c Var 'aux2531' direct represents '1' with '9273'
c Var 'aux2531' order represents '1' with '1'
c Var 'aux2531' order represents '0' with '-9273'
c Encoding variable: aux2532 with domain: bool (representing constraint (1<=(aux1693 + aux1696 + aux1697)))
c Var 'aux2532' direct represents '0' with '-9274'
c Var 'aux2532' direct represents '1' with '9274'
c Var 'aux2532' order represents '1' with '1'
c Var 'aux2532' order represents '0' with '-9274'
c Encoding variable: aux2533 with domain: bool (representing constraint ((aux1699 + aux1702 + aux1703)<=1))
c Var 'aux2533' direct represents '0' with '-9275'
c Var 'aux2533' direct represents '1' with '9275'
c Var 'aux2533' order represents '1' with '1'
c Var 'aux2533' order represents '0' with '-9275'
c Encoding variable: aux2534 with domain: bool (representing constraint (1<=(aux1699 + aux1702 + aux1703)))
c Var 'aux2534' direct represents '0' with '-9276'
c Var 'aux2534' direct represents '1' with '9276'
c Var 'aux2534' order represents '1' with '1'
c Var 'aux2534' order represents '0' with '-9276'
c Encoding variable: aux2535 with domain: bool (representing constraint ((aux1705 + aux1708 + aux1709)<=1))
c Var 'aux2535' direct represents '0' with '-9277'
c Var 'aux2535' direct represents '1' with '9277'
c Var 'aux2535' order represents '1' with '1'
c Var 'aux2535' order represents '0' with '-9277'
c Encoding variable: aux2536 with domain: bool (representing constraint (1<=(aux1705 + aux1708 + aux1709)))
c Var 'aux2536' direct represents '0' with '-9278'
c Var 'aux2536' direct represents '1' with '9278'
c Var 'aux2536' order represents '1' with '1'
c Var 'aux2536' order represents '0' with '-9278'
c Encoding variable: aux2537 with domain: bool (representing constraint ((aux1711 + aux1714 + aux1715)<=1))
c Var 'aux2537' direct represents '0' with '-9279'
c Var 'aux2537' direct represents '1' with '9279'
c Var 'aux2537' order represents '1' with '1'
c Var 'aux2537' order represents '0' with '-9279'
c Encoding variable: aux2538 with domain: bool (representing constraint (1<=(aux1711 + aux1714 + aux1715)))
c Var 'aux2538' direct represents '0' with '-9280'
c Var 'aux2538' direct represents '1' with '9280'
c Var 'aux2538' order represents '1' with '1'
c Var 'aux2538' order represents '0' with '-9280'
c Encoding variable: aux2539 with domain: bool (representing constraint ((aux1717 + aux1720 + aux1721)<=1))
c Var 'aux2539' direct represents '0' with '-9281'
c Var 'aux2539' direct represents '1' with '9281'
c Var 'aux2539' order represents '1' with '1'
c Var 'aux2539' order represents '0' with '-9281'
c Encoding variable: aux2540 with domain: bool (representing constraint (1<=(aux1717 + aux1720 + aux1721)))
c Var 'aux2540' direct represents '0' with '-9282'
c Var 'aux2540' direct represents '1' with '9282'
c Var 'aux2540' order represents '1' with '1'
c Var 'aux2540' order represents '0' with '-9282'
c Encoding variable: aux2541 with domain: bool (representing constraint ((aux1723 + aux1726 + aux1727)<=1))
c Var 'aux2541' direct represents '0' with '-9283'
c Var 'aux2541' direct represents '1' with '9283'
c Var 'aux2541' order represents '1' with '1'
c Var 'aux2541' order represents '0' with '-9283'
c Encoding variable: aux2542 with domain: bool (representing constraint (1<=(aux1723 + aux1726 + aux1727)))
c Var 'aux2542' direct represents '0' with '-9284'
c Var 'aux2542' direct represents '1' with '9284'
c Var 'aux2542' order represents '1' with '1'
c Var 'aux2542' order represents '0' with '-9284'
c Encoding variable: aux2543 with domain: bool (representing constraint ((aux1729 + aux1732 + aux1733)<=1))
c Var 'aux2543' direct represents '0' with '-9285'
c Var 'aux2543' direct represents '1' with '9285'
c Var 'aux2543' order represents '1' with '1'
c Var 'aux2543' order represents '0' with '-9285'
c Encoding variable: aux2544 with domain: bool (representing constraint (1<=(aux1729 + aux1732 + aux1733)))
c Var 'aux2544' direct represents '0' with '-9286'
c Var 'aux2544' direct represents '1' with '9286'
c Var 'aux2544' order represents '1' with '1'
c Var 'aux2544' order represents '0' with '-9286'
c Encoding variable: aux2545 with domain: bool (representing constraint ((aux1735 + aux1738 + aux1739)<=1))
c Var 'aux2545' direct represents '0' with '-9287'
c Var 'aux2545' direct represents '1' with '9287'
c Var 'aux2545' order represents '1' with '1'
c Var 'aux2545' order represents '0' with '-9287'
c Encoding variable: aux2546 with domain: bool (representing constraint (1<=(aux1735 + aux1738 + aux1739)))
c Var 'aux2546' direct represents '0' with '-9288'
c Var 'aux2546' direct represents '1' with '9288'
c Var 'aux2546' order represents '1' with '1'
c Var 'aux2546' order represents '0' with '-9288'
c Encoding variable: aux2547 with domain: bool (representing constraint ((aux1741 + aux1744 + aux1745)<=1))
c Var 'aux2547' direct represents '0' with '-9289'
c Var 'aux2547' direct represents '1' with '9289'
c Var 'aux2547' order represents '1' with '1'
c Var 'aux2547' order represents '0' with '-9289'
c Encoding variable: aux2548 with domain: bool (representing constraint (1<=(aux1741 + aux1744 + aux1745)))
c Var 'aux2548' direct represents '0' with '-9290'
c Var 'aux2548' direct represents '1' with '9290'
c Var 'aux2548' order represents '1' with '1'
c Var 'aux2548' order represents '0' with '-9290'
c Encoding variable: aux2549 with domain: bool (representing constraint ((aux1747 + aux1750 + aux1751)<=1))
c Var 'aux2549' direct represents '0' with '-9291'
c Var 'aux2549' direct represents '1' with '9291'
c Var 'aux2549' order represents '1' with '1'
c Var 'aux2549' order represents '0' with '-9291'
c Encoding variable: aux2550 with domain: bool (representing constraint (1<=(aux1747 + aux1750 + aux1751)))
c Var 'aux2550' direct represents '0' with '-9292'
c Var 'aux2550' direct represents '1' with '9292'
c Var 'aux2550' order represents '1' with '1'
c Var 'aux2550' order represents '0' with '-9292'
c Encoding variable: aux2551 with domain: bool (representing constraint ((aux1753 + aux1756 + aux1757)<=1))
c Var 'aux2551' direct represents '0' with '-9293'
c Var 'aux2551' direct represents '1' with '9293'
c Var 'aux2551' order represents '1' with '1'
c Var 'aux2551' order represents '0' with '-9293'
c Encoding variable: aux2552 with domain: bool (representing constraint (1<=(aux1753 + aux1756 + aux1757)))
c Var 'aux2552' direct represents '0' with '-9294'
c Var 'aux2552' direct represents '1' with '9294'
c Var 'aux2552' order represents '1' with '1'
c Var 'aux2552' order represents '0' with '-9294'
c Encoding variable: aux2553 with domain: bool (representing constraint ((aux1759 + aux1762 + aux1763)<=1))
c Var 'aux2553' direct represents '0' with '-9295'
c Var 'aux2553' direct represents '1' with '9295'
c Var 'aux2553' order represents '1' with '1'
c Var 'aux2553' order represents '0' with '-9295'
c Encoding variable: aux2554 with domain: bool (representing constraint (1<=(aux1759 + aux1762 + aux1763)))
c Var 'aux2554' direct represents '0' with '-9296'
c Var 'aux2554' direct represents '1' with '9296'
c Var 'aux2554' order represents '1' with '1'
c Var 'aux2554' order represents '0' with '-9296'
c Encoding variable: aux2555 with domain: bool (representing constraint ((aux1765 + aux1768 + aux1769)<=1))
c Var 'aux2555' direct represents '0' with '-9297'
c Var 'aux2555' direct represents '1' with '9297'
c Var 'aux2555' order represents '1' with '1'
c Var 'aux2555' order represents '0' with '-9297'
c Encoding variable: aux2556 with domain: bool (representing constraint (1<=(aux1765 + aux1768 + aux1769)))
c Var 'aux2556' direct represents '0' with '-9298'
c Var 'aux2556' direct represents '1' with '9298'
c Var 'aux2556' order represents '1' with '1'
c Var 'aux2556' order represents '0' with '-9298'
c Encoding variable: aux2557 with domain: bool (representing constraint ((aux1771 + aux1774 + aux1775)<=1))
c Var 'aux2557' direct represents '0' with '-9299'
c Var 'aux2557' direct represents '1' with '9299'
c Var 'aux2557' order represents '1' with '1'
c Var 'aux2557' order represents '0' with '-9299'
c Encoding variable: aux2558 with domain: bool (representing constraint (1<=(aux1771 + aux1774 + aux1775)))
c Var 'aux2558' direct represents '0' with '-9300'
c Var 'aux2558' direct represents '1' with '9300'
c Var 'aux2558' order represents '1' with '1'
c Var 'aux2558' order represents '0' with '-9300'
c Encoding variable: aux2559 with domain: bool (representing constraint ((aux1777 + aux1780 + aux1781)<=1))
c Var 'aux2559' direct represents '0' with '-9301'
c Var 'aux2559' direct represents '1' with '9301'
c Var 'aux2559' order represents '1' with '1'
c Var 'aux2559' order represents '0' with '-9301'
c Encoding variable: aux2560 with domain: bool (representing constraint (1<=(aux1777 + aux1780 + aux1781)))
c Var 'aux2560' direct represents '0' with '-9302'
c Var 'aux2560' direct represents '1' with '9302'
c Var 'aux2560' order represents '1' with '1'
c Var 'aux2560' order represents '0' with '-9302'
c Encoding variable: aux2561 with domain: bool (representing constraint ((aux1783 + aux1786 + aux1787)<=1))
c Var 'aux2561' direct represents '0' with '-9303'
c Var 'aux2561' direct represents '1' with '9303'
c Var 'aux2561' order represents '1' with '1'
c Var 'aux2561' order represents '0' with '-9303'
c Encoding variable: aux2562 with domain: bool (representing constraint (1<=(aux1783 + aux1786 + aux1787)))
c Var 'aux2562' direct represents '0' with '-9304'
c Var 'aux2562' direct represents '1' with '9304'
c Var 'aux2562' order represents '1' with '1'
c Var 'aux2562' order represents '0' with '-9304'
c Encoding variable: aux2563 with domain: bool (representing constraint ((aux1789 + aux1792 + aux1793)<=1))
c Var 'aux2563' direct represents '0' with '-9305'
c Var 'aux2563' direct represents '1' with '9305'
c Var 'aux2563' order represents '1' with '1'
c Var 'aux2563' order represents '0' with '-9305'
c Encoding variable: aux2564 with domain: bool (representing constraint (1<=(aux1789 + aux1792 + aux1793)))
c Var 'aux2564' direct represents '0' with '-9306'
c Var 'aux2564' direct represents '1' with '9306'
c Var 'aux2564' order represents '1' with '1'
c Var 'aux2564' order represents '0' with '-9306'
c Encoding variable: aux2565 with domain: bool (representing constraint ((aux1795 + aux1798 + aux1799)<=1))
c Var 'aux2565' direct represents '0' with '-9307'
c Var 'aux2565' direct represents '1' with '9307'
c Var 'aux2565' order represents '1' with '1'
c Var 'aux2565' order represents '0' with '-9307'
c Encoding variable: aux2566 with domain: bool (representing constraint (1<=(aux1795 + aux1798 + aux1799)))
c Var 'aux2566' direct represents '0' with '-9308'
c Var 'aux2566' direct represents '1' with '9308'
c Var 'aux2566' order represents '1' with '1'
c Var 'aux2566' order represents '0' with '-9308'
c Encoding variable: aux2567 with domain: bool (representing constraint ((aux1801 + aux1804 + aux1805)<=1))
c Var 'aux2567' direct represents '0' with '-9309'
c Var 'aux2567' direct represents '1' with '9309'
c Var 'aux2567' order represents '1' with '1'
c Var 'aux2567' order represents '0' with '-9309'
c Encoding variable: aux2568 with domain: bool (representing constraint (1<=(aux1801 + aux1804 + aux1805)))
c Var 'aux2568' direct represents '0' with '-9310'
c Var 'aux2568' direct represents '1' with '9310'
c Var 'aux2568' order represents '1' with '1'
c Var 'aux2568' order represents '0' with '-9310'
c Encoding variable: aux2569 with domain: bool (representing constraint ((aux1807 + aux1810 + aux1811)<=1))
c Var 'aux2569' direct represents '0' with '-9311'
c Var 'aux2569' direct represents '1' with '9311'
c Var 'aux2569' order represents '1' with '1'
c Var 'aux2569' order represents '0' with '-9311'
c Encoding variable: aux2570 with domain: bool (representing constraint (1<=(aux1807 + aux1810 + aux1811)))
c Var 'aux2570' direct represents '0' with '-9312'
c Var 'aux2570' direct represents '1' with '9312'
c Var 'aux2570' order represents '1' with '1'
c Var 'aux2570' order represents '0' with '-9312'
c Encoding variable: aux2571 with domain: bool (representing constraint ((aux1813 + aux1816 + aux1817)<=1))
c Var 'aux2571' direct represents '0' with '-9313'
c Var 'aux2571' direct represents '1' with '9313'
c Var 'aux2571' order represents '1' with '1'
c Var 'aux2571' order represents '0' with '-9313'
c Encoding variable: aux2572 with domain: bool (representing constraint (1<=(aux1813 + aux1816 + aux1817)))
c Var 'aux2572' direct represents '0' with '-9314'
c Var 'aux2572' direct represents '1' with '9314'
c Var 'aux2572' order represents '1' with '1'
c Var 'aux2572' order represents '0' with '-9314'
c Encoding variable: aux2573 with domain: bool (representing constraint ((aux1819 + aux1822 + aux1823)<=1))
c Var 'aux2573' direct represents '0' with '-9315'
c Var 'aux2573' direct represents '1' with '9315'
c Var 'aux2573' order represents '1' with '1'
c Var 'aux2573' order represents '0' with '-9315'
c Encoding variable: aux2574 with domain: bool (representing constraint (1<=(aux1819 + aux1822 + aux1823)))
c Var 'aux2574' direct represents '0' with '-9316'
c Var 'aux2574' direct represents '1' with '9316'
c Var 'aux2574' order represents '1' with '1'
c Var 'aux2574' order represents '0' with '-9316'
c Encoding variable: aux2575 with domain: bool (representing constraint ((aux1825 + aux1828 + aux1829)<=1))
c Var 'aux2575' direct represents '0' with '-9317'
c Var 'aux2575' direct represents '1' with '9317'
c Var 'aux2575' order represents '1' with '1'
c Var 'aux2575' order represents '0' with '-9317'
c Encoding variable: aux2576 with domain: bool (representing constraint (1<=(aux1825 + aux1828 + aux1829)))
c Var 'aux2576' direct represents '0' with '-9318'
c Var 'aux2576' direct represents '1' with '9318'
c Var 'aux2576' order represents '1' with '1'
c Var 'aux2576' order represents '0' with '-9318'
c Encoding variable: aux2577 with domain: bool (representing constraint ((aux1831 + aux1834 + aux1835)<=1))
c Var 'aux2577' direct represents '0' with '-9319'
c Var 'aux2577' direct represents '1' with '9319'
c Var 'aux2577' order represents '1' with '1'
c Var 'aux2577' order represents '0' with '-9319'
c Encoding variable: aux2578 with domain: bool (representing constraint (1<=(aux1831 + aux1834 + aux1835)))
c Var 'aux2578' direct represents '0' with '-9320'
c Var 'aux2578' direct represents '1' with '9320'
c Var 'aux2578' order represents '1' with '1'
c Var 'aux2578' order represents '0' with '-9320'
c Encoding variable: aux2579 with domain: bool (representing constraint ((aux1837 + aux1840 + aux1841)<=1))
c Var 'aux2579' direct represents '0' with '-9321'
c Var 'aux2579' direct represents '1' with '9321'
c Var 'aux2579' order represents '1' with '1'
c Var 'aux2579' order represents '0' with '-9321'
c Encoding variable: aux2580 with domain: bool (representing constraint (1<=(aux1837 + aux1840 + aux1841)))
c Var 'aux2580' direct represents '0' with '-9322'
c Var 'aux2580' direct represents '1' with '9322'
c Var 'aux2580' order represents '1' with '1'
c Var 'aux2580' order represents '0' with '-9322'
c Encoding variable: aux2581 with domain: bool (representing constraint ((aux1843 + aux1846 + aux1847)<=1))
c Var 'aux2581' direct represents '0' with '-9323'
c Var 'aux2581' direct represents '1' with '9323'
c Var 'aux2581' order represents '1' with '1'
c Var 'aux2581' order represents '0' with '-9323'
c Encoding variable: aux2582 with domain: bool (representing constraint (1<=(aux1843 + aux1846 + aux1847)))
c Var 'aux2582' direct represents '0' with '-9324'
c Var 'aux2582' direct represents '1' with '9324'
c Var 'aux2582' order represents '1' with '1'
c Var 'aux2582' order represents '0' with '-9324'
c Encoding variable: aux2583 with domain: bool (representing constraint ((aux1849 + aux1852 + aux1853)<=1))
c Var 'aux2583' direct represents '0' with '-9325'
c Var 'aux2583' direct represents '1' with '9325'
c Var 'aux2583' order represents '1' with '1'
c Var 'aux2583' order represents '0' with '-9325'
c Encoding variable: aux2584 with domain: bool (representing constraint (1<=(aux1849 + aux1852 + aux1853)))
c Var 'aux2584' direct represents '0' with '-9326'
c Var 'aux2584' direct represents '1' with '9326'
c Var 'aux2584' order represents '1' with '1'
c Var 'aux2584' order represents '0' with '-9326'
c Encoding variable: aux2585 with domain: bool (representing constraint ((aux1855 + aux1858 + aux1859)<=1))
c Var 'aux2585' direct represents '0' with '-9327'
c Var 'aux2585' direct represents '1' with '9327'
c Var 'aux2585' order represents '1' with '1'
c Var 'aux2585' order represents '0' with '-9327'
c Encoding variable: aux2586 with domain: bool (representing constraint (1<=(aux1855 + aux1858 + aux1859)))
c Var 'aux2586' direct represents '0' with '-9328'
c Var 'aux2586' direct represents '1' with '9328'
c Var 'aux2586' order represents '1' with '1'
c Var 'aux2586' order represents '0' with '-9328'
c Encoding variable: aux2587 with domain: bool (representing constraint ((aux1861 + aux1864 + aux1865)<=1))
c Var 'aux2587' direct represents '0' with '-9329'
c Var 'aux2587' direct represents '1' with '9329'
c Var 'aux2587' order represents '1' with '1'
c Var 'aux2587' order represents '0' with '-9329'
c Encoding variable: aux2588 with domain: bool (representing constraint (1<=(aux1861 + aux1864 + aux1865)))
c Var 'aux2588' direct represents '0' with '-9330'
c Var 'aux2588' direct represents '1' with '9330'
c Var 'aux2588' order represents '1' with '1'
c Var 'aux2588' order represents '0' with '-9330'
c (((aux387 + shift(x_00003_00001, -1) + shift(x_00001_00001, -1))<=16)=tv=SATLiteral(8797))
-8797 2 1708 0
-8797 3 1706 0
-8797 5 1704 0
-8797 7 1702 0
-8797 9 1700 0
-8797 11 1698 0
-8797 13 1696 0
-8797 15 1694 0
-8797 272 1708 0
-8797 272 2 1706 0
-8797 272 3 1704 0
-8797 272 5 1702 0
-8797 272 7 1700 0
-8797 272 9 1698 0
-8797 272 11 1696 0
-8797 272 13 1694 0
-8797 272 15 1692 0
-8797 273 1706 0
-8797 273 2 1704 0
-8797 273 3 1702 0
-8797 273 5 1700 0
-8797 273 7 1698 0
-8797 273 9 1696 0
-8797 273 11 1694 0
-8797 273 13 1692 0
-8797 273 15 1690 0
-8797 275 1704 0
-8797 275 2 1702 0
-8797 275 3 1700 0
-8797 275 5 1698 0
-8797 275 7 1696 0
-8797 275 9 1694 0
-8797 275 11 1692 0
-8797 275 13 1690 0
-8797 275 15 1688 0
-8797 277 1702 0
-8797 277 2 1700 0
-8797 277 3 1698 0
-8797 277 5 1696 0
-8797 277 7 1694 0
-8797 277 9 1692 0
-8797 277 11 1690 0
-8797 277 13 1688 0
-8797 277 15 1686 0
-8797 279 1700 0
-8797 279 2 1698 0
-8797 279 3 1696 0
-8797 279 5 1694 0
-8797 279 7 1692 0
-8797 279 9 1690 0
-8797 279 11 1688 0
-8797 279 13 1686 0
-8797 279 15 1684 0
-8797 281 1698 0
-8797 281 2 1696 0
-8797 281 3 1694 0
-8797 281 5 1692 0
-8797 281 7 1690 0
-8797 281 9 1688 0
-8797 281 11 1686 0
-8797 281 13 1684 0
-8797 281 15 1682 0
-8797 283 1696 0
-8797 283 2 1694 0
-8797 283 3 1692 0
-8797 283 5 1690 0
-8797 283 7 1688 0
-8797 283 9 1686 0
-8797 283 11 1684 0
-8797 283 13 1682 0
-8797 283 15 1680 0
-8797 285 1694 0
-8797 285 2 1692 0
-8797 285 3 1690 0
-8797 285 5 1688 0
-8797 285 7 1686 0
-8797 285 9 1684 0
-8797 285 11 1682 0
-8797 285 13 1680 0
-8797 285 15 1679 0
8797 -1679 0
8797 -15 -1680 0
8797 -13 -1682 0
8797 -11 -1684 0
8797 -9 -1686 0
8797 -7 -1688 0
8797 -5 -1690 0
8797 -3 -1692 0
8797 -2 -1694 0
8797 -285 -1680 0
8797 -285 -15 -1682 0
8797 -285 -13 -1684 0
8797 -285 -11 -1686 0
8797 -285 -9 -1688 0
8797 -285 -7 -1690 0
8797 -285 -5 -1692 0
8797 -285 -3 -1694 0
8797 -285 -2 -1696 0
8797 -283 -1682 0
8797 -283 -15 -1684 0
8797 -283 -13 -1686 0
8797 -283 -11 -1688 0
8797 -283 -9 -1690 0
8797 -283 -7 -1692 0
8797 -283 -5 -1694 0
8797 -283 -3 -1696 0
8797 -283 -2 -1698 0
8797 -281 -1684 0
8797 -281 -15 -1686 0
8797 -281 -13 -1688 0
8797 -281 -11 -1690 0
8797 -281 -9 -1692 0
8797 -281 -7 -1694 0
8797 -281 -5 -1696 0
8797 -281 -3 -1698 0
8797 -281 -2 -1700 0
8797 -279 -1686 0
8797 -279 -15 -1688 0
8797 -279 -13 -1690 0
8797 -279 -11 -1692 0
8797 -279 -9 -1694 0
8797 -279 -7 -1696 0
8797 -279 -5 -1698 0
8797 -279 -3 -1700 0
8797 -279 -2 -1702 0
8797 -277 -1688 0
8797 -277 -15 -1690 0
8797 -277 -13 -1692 0
8797 -277 -11 -1694 0
8797 -277 -9 -1696 0
8797 -277 -7 -1698 0
8797 -277 -5 -1700 0
8797 -277 -3 -1702 0
8797 -277 -2 -1704 0
8797 -275 -1690 0
8797 -275 -15 -1692 0
8797 -275 -13 -1694 0
8797 -275 -11 -1696 0
8797 -275 -9 -1698 0
8797 -275 -7 -1700 0
8797 -275 -5 -1702 0
8797 -275 -3 -1704 0
8797 -275 -2 -1706 0
8797 -273 -1692 0
8797 -273 -15 -1694 0
8797 -273 -13 -1696 0
8797 -273 -11 -1698 0
8797 -273 -9 -1700 0
8797 -273 -7 -1702 0
8797 -273 -5 -1704 0
8797 -273 -3 -1706 0
8797 -273 -2 -1708 0
8797 -272 -1694 0
8797 -272 -15 -1696 0
8797 -272 -13 -1698 0
8797 -272 -11 -1700 0
8797 -272 -9 -1702 0
8797 -272 -7 -1704 0
8797 -272 -5 -1706 0
8797 -272 -3 -1708 0
8797 -272 -2 0
c ((16<=(aux387 + shift(x_00003_00001, -1) + shift(x_00001_00001, -1)))=tv=SATLiteral(8798))
-8798 -15 -1679 0
-8798 -13 -1680 0
-8798 -11 -1682 0
-8798 -9 -1684 0
-8798 -7 -1686 0
-8798 -5 -1688 0
-8798 -3 -1690 0
-8798 -2 -1692 0
-8798 -285 -1679 0
-8798 -285 -15 -1680 0
-8798 -285 -13 -1682 0
-8798 -285 -11 -1684 0
-8798 -285 -9 -1686 0
-8798 -285 -7 -1688 0
-8798 -285 -5 -1690 0
-8798 -285 -3 -1692 0
-8798 -285 -2 -1694 0
-8798 -283 -1680 0
-8798 -283 -15 -1682 0
-8798 -283 -13 -1684 0
-8798 -283 -11 -1686 0
-8798 -283 -9 -1688 0
-8798 -283 -7 -1690 0
-8798 -283 -5 -1692 0
-8798 -283 -3 -1694 0
-8798 -283 -2 -1696 0
-8798 -281 -1682 0
-8798 -281 -15 -1684 0
-8798 -281 -13 -1686 0
-8798 -281 -11 -1688 0
-8798 -281 -9 -1690 0
-8798 -281 -7 -1692 0
-8798 -281 -5 -1694 0
-8798 -281 -3 -1696 0
-8798 -281 -2 -1698 0
-8798 -279 -1684 0
-8798 -279 -15 -1686 0
-8798 -279 -13 -1688 0
-8798 -279 -11 -1690 0
-8798 -279 -9 -1692 0
-8798 -279 -7 -1694 0
-8798 -279 -5 -1696 0
-8798 -279 -3 -1698 0
-8798 -279 -2 -1700 0
-8798 -277 -1686 0
-8798 -277 -15 -1688 0
-8798 -277 -13 -1690 0
-8798 -277 -11 -1692 0
-8798 -277 -9 -1694 0
-8798 -277 -7 -1696 0
-8798 -277 -5 -1698 0
-8798 -277 -3 -1700 0
-8798 -277 -2 -1702 0
-8798 -275 -1688 0
-8798 -275 -15 -1690 0
-8798 -275 -13 -1692 0
-8798 -275 -11 -1694 0
-8798 -275 -9 -1696 0
-8798 -275 -7 -1698 0
-8798 -275 -5 -1700 0
-8798 -275 -3 -1702 0
-8798 -275 -2 -1704 0
-8798 -273 -1690 0
-8798 -273 -15 -1692 0
-8798 -273 -13 -1694 0
-8798 -273 -11 -1696 0
-8798 -273 -9 -1698 0
-8798 -273 -7 -1700 0
-8798 -273 -5 -1702 0
-8798 -273 -3 -1704 0
-8798 -273 -2 -1706 0
-8798 -272 -1692 0
-8798 -272 -15 -1694 0
-8798 -272 -13 -1696 0
-8798 -272 -11 -1698 0
-8798 -272 -9 -1700 0
-8798 -272 -7 -1702 0
-8798 -272 -5 -1704 0
-8798 -272 -3 -1706 0
-8798 -272 -2 -1708 0
8798 1708 0
8798 2 1706 0
8798 3 1704 0
8798 5 1702 0
8798 7 1700 0
8798 9 1698 0
8798 11 1696 0
8798 13 1694 0
8798 15 1692 0
8798 272 1706 0
8798 272 2 1704 0
8798 272 3 1702 0
8798 272 5 1700 0
8798 272 7 1698 0
8798 272 9 1696 0
8798 272 11 1694 0
8798 272 13 1692 0
8798 272 15 1690 0
8798 273 1704 0
8798 273 2 1702 0
8798 273 3 1700 0
8798 273 5 1698 0
8798 273 7 1696 0
8798 273 9 1694 0
8798 273 11 1692 0
8798 273 13 1690 0
8798 273 15 1688 0
8798 275 1702 0
8798 275 2 1700 0
8798 275 3 1698 0
8798 275 5 1696 0
8798 275 7 1694 0
8798 275 9 1692 0
8798 275 11 1690 0
8798 275 13 1688 0
8798 275 15 1686 0
8798 277 1700 0
8798 277 2 1698 0
8798 277 3 1696 0
8798 277 5 1694 0
8798 277 7 1692 0
8798 277 9 1690 0
8798 277 11 1688 0
8798 277 13 1686 0
8798 277 15 1684 0
8798 279 1698 0
8798 279 2 1696 0
8798 279 3 1694 0
8798 279 5 1692 0
8798 279 7 1690 0
8798 279 9 1688 0
8798 279 11 1686 0
8798 279 13 1684 0
8798 279 15 1682 0
8798 281 1696 0
8798 281 2 1694 0
8798 281 3 1692 0
8798 281 5 1690 0
8798 281 7 1688 0
8798 281 9 1686 0
8798 281 11 1684 0
8798 281 13 1682 0
8798 281 15 1680 0
8798 283 1694 0
8798 283 2 1692 0
8798 283 3 1690 0
8798 283 5 1688 0
8798 283 7 1686 0
8798 283 9 1684 0
8798 283 11 1682 0
8798 283 13 1680 0
8798 283 15 1679 0
8798 285 1692 0
8798 285 2 1690 0
8798 285 3 1688 0
8798 285 5 1686 0
8798 285 7 1684 0
8798 285 9 1682 0
8798 285 11 1680 0
8798 285 13 1679 0
8798 285 15 0
c (((x_00001_00003 + x_00001_00004)<=9)=tv=SATLiteral(8799))
-8799 60 0
-8799 32 58 0
-8799 33 56 0
-8799 35 54 0
-8799 37 52 0
-8799 39 50 0
-8799 41 48 0
-8799 43 47 0
-8799 45 0
8799 -45 -47 0
8799 -43 -48 0
8799 -41 -50 0
8799 -39 -52 0
8799 -37 -54 0
8799 -35 -56 0
8799 -33 -58 0
8799 -32 -60 0
c ((9<=(x_00001_00003 + x_00001_00004))=tv=SATLiteral(8800))
-8800 -43 -47 0
-8800 -41 -48 0
-8800 -39 -50 0
-8800 -37 -52 0
-8800 -35 -54 0
-8800 -33 -56 0
-8800 -32 -58 0
8800 58 0
8800 32 56 0
8800 33 54 0
8800 35 52 0
8800 37 50 0
8800 39 48 0
8800 41 47 0
8800 43 0
8800 45 0
c (((x_00001_00005 + x_00001_00006)<=13)=tv=SATLiteral(8801))
-8801 67 90 0
-8801 69 88 0
-8801 71 86 0
-8801 73 84 0
-8801 75 82 0
8801 -82 0
8801 -75 -84 0
8801 -73 -86 0
8801 -71 -88 0
8801 -69 -90 0
8801 -67 0
8801 -65 0
8801 -63 0
8801 -62 0
c ((13<=(x_00001_00005 + x_00001_00006))=tv=SATLiteral(8802))
-8802 -80 0
-8802 -75 -82 0
-8802 -73 -84 0
-8802 -71 -86 0
-8802 -69 -88 0
-8802 -67 -90 0
-8802 -65 0
-8802 -63 0
-8802 -62 0
8802 65 90 0
8802 67 88 0
8802 69 86 0
8802 71 84 0
8802 73 82 0
8802 75 80 0
c (((aux389 + aux390 + aux392)<=30)=tv=SATLiteral(8803))
-8803 1893 0
-8803 1772 1891 0
-8803 1773 1889 0
-8803 1775 1887 0
-8803 1777 1885 0
-8803 1779 1883 0
-8803 1781 1881 0
-8803 1783 1879 0
-8803 1785 1877 0
-8803 1787 1875 0
-8803 1789 1873 0
-8803 1791 1871 0
-8803 1793 1869 0
-8803 1795 1867 0
-8803 1797 1865 0
-8803 1799 1863 0
-8803 1801 1861 0
-8803 1741 1891 0
-8803 1741 1772 1889 0
-8803 1741 1773 1887 0
-8803 1741 1775 1885 0
-8803 1741 1777 1883 0
-8803 1741 1779 1881 0
-8803 1741 1781 1879 0
-8803 1741 1783 1877 0
-8803 1741 1785 1875 0
-8803 1741 1787 1873 0
-8803 1741 1789 1871 0
-8803 1741 1791 1869 0
-8803 1741 1793 1867 0
-8803 1741 1795 1865 0
-8803 1741 1797 1863 0
-8803 1741 1799 1861 0
-8803 1741 1801 1859 0
-8803 1742 1889 0
-8803 1742 1772 1887 0
-8803 1742 1773 1885 0
-8803 1742 1775 1883 0
-8803 1742 1777 1881 0
-8803 1742 1779 1879 0
-8803 1742 1781 1877 0
-8803 1742 1783 1875 0
-8803 1742 1785 1873 0
-8803 1742 1787 1871 0
-8803 1742 1789 1869 0
-8803 1742 1791 1867 0
-8803 1742 1793 1865 0
-8803 1742 1795 1863 0
-8803 1742 1797 1861 0
-8803 1742 1799 1859 0
-8803 1742 1801 1857 0
-8803 1744 1887 0
-8803 1744 1772 1885 0
-8803 1744 1773 1883 0
-8803 1744 1775 1881 0
-8803 1744 1777 1879 0
-8803 1744 1779 1877 0
-8803 1744 1781 1875 0
-8803 1744 1783 1873 0
-8803 1744 1785 1871 0
-8803 1744 1787 1869 0
-8803 1744 1789 1867 0
-8803 1744 1791 1865 0
-8803 1744 1793 1863 0
-8803 1744 1795 1861 0
-8803 1744 1797 1859 0
-8803 1744 1799 1857 0
-8803 1744 1801 1855 0
-8803 1746 1885 0
-8803 1746 1772 1883 0
-8803 1746 1773 1881 0
-8803 1746 1775 1879 0
-8803 1746 1777 1877 0
-8803 1746 1779 1875 0
-8803 1746 1781 1873 0
-8803 1746 1783 1871 0
-8803 1746 1785 1869 0
-8803 1746 1787 1867 0
-8803 1746 1789 1865 0
-8803 1746 1791 1863 0
-8803 1746 1793 1861 0
-8803 1746 1795 1859 0
-8803 1746 1797 1857 0
-8803 1746 1799 1855 0
-8803 1746 1801 1853 0
-8803 1748 1883 0
-8803 1748 1772 1881 0
-8803 1748 1773 1879 0
-8803 1748 1775 1877 0
-8803 1748 1777 1875 0
-8803 1748 1779 1873 0
-8803 1748 1781 1871 0
-8803 1748 1783 1869 0
-8803 1748 1785 1867 0
-8803 1748 1787 1865 0
-8803 1748 1789 1863 0
-8803 1748 1791 1861 0
-8803 1748 1793 1859 0
-8803 1748 1795 1857 0
-8803 1748 1797 1855 0
-8803 1748 1799 1853 0
-8803 1748 1801 1851 0
-8803 1750 1881 0
-8803 1750 1772 1879 0
-8803 1750 1773 1877 0
-8803 1750 1775 1875 0
-8803 1750 1777 1873 0
-8803 1750 1779 1871 0
-8803 1750 1781 1869 0
-8803 1750 1783 1867 0
-8803 1750 1785 1865 0
-8803 1750 1787 1863 0
-8803 1750 1789 1861 0
-8803 1750 1791 1859 0
-8803 1750 1793 1857 0
-8803 1750 1795 1855 0
-8803 1750 1797 1853 0
-8803 1750 1799 1851 0
-8803 1750 1801 1849 0
-8803 1752 1879 0
-8803 1752 1772 1877 0
-8803 1752 1773 1875 0
-8803 1752 1775 1873 0
-8803 1752 1777 1871 0
-8803 1752 1779 1869 0
-8803 1752 1781 1867 0
-8803 1752 1783 1865 0
-8803 1752 1785 1863 0
-8803 1752 1787 1861 0
-8803 1752 1789 1859 0
-8803 1752 1791 1857 0
-8803 1752 1793 1855 0
-8803 1752 1795 1853 0
-8803 1752 1797 1851 0
-8803 1752 1799 1849 0
-8803 1752 1801 1847 0
-8803 1754 1877 0
-8803 1754 1772 1875 0
-8803 1754 1773 1873 0
-8803 1754 1775 1871 0
-8803 1754 1777 1869 0
-8803 1754 1779 1867 0
-8803 1754 1781 1865 0
-8803 1754 1783 1863 0
-8803 1754 1785 1861 0
-8803 1754 1787 1859 0
-8803 1754 1789 1857 0
-8803 1754 1791 1855 0
-8803 1754 1793 1853 0
-8803 1754 1795 1851 0
-8803 1754 1797 1849 0
-8803 1754 1799 1847 0
-8803 1754 1801 1845 0
-8803 1756 1875 0
-8803 1756 1772 1873 0
-8803 1756 1773 1871 0
-8803 1756 1775 1869 0
-8803 1756 1777 1867 0
-8803 1756 1779 1865 0
-8803 1756 1781 1863 0
-8803 1756 1783 1861 0
-8803 1756 1785 1859 0
-8803 1756 1787 1857 0
-8803 1756 1789 1855 0
-8803 1756 1791 1853 0
-8803 1756 1793 1851 0
-8803 1756 1795 1849 0
-8803 1756 1797 1847 0
-8803 1756 1799 1845 0
-8803 1756 1801 1843 0
-8803 1758 1873 0
-8803 1758 1772 1871 0
-8803 1758 1773 1869 0
-8803 1758 1775 1867 0
-8803 1758 1777 1865 0
-8803 1758 1779 1863 0
-8803 1758 1781 1861 0
-8803 1758 1783 1859 0
-8803 1758 1785 1857 0
-8803 1758 1787 1855 0
-8803 1758 1789 1853 0
-8803 1758 1791 1851 0
-8803 1758 1793 1849 0
-8803 1758 1795 1847 0
-8803 1758 1797 1845 0
-8803 1758 1799 1843 0
-8803 1758 1801 1841 0
-8803 1760 1871 0
-8803 1760 1772 1869 0
-8803 1760 1773 1867 0
-8803 1760 1775 1865 0
-8803 1760 1777 1863 0
-8803 1760 1779 1861 0
-8803 1760 1781 1859 0
-8803 1760 1783 1857 0
-8803 1760 1785 1855 0
-8803 1760 1787 1853 0
-8803 1760 1789 1851 0
-8803 1760 1791 1849 0
-8803 1760 1793 1847 0
-8803 1760 1795 1845 0
-8803 1760 1797 1843 0
-8803 1760 1799 1841 0
-8803 1760 1801 1839 0
-8803 1762 1869 0
-8803 1762 1772 1867 0
-8803 1762 1773 1865 0
-8803 1762 1775 1863 0
-8803 1762 1777 1861 0
-8803 1762 1779 1859 0
-8803 1762 1781 1857 0
-8803 1762 1783 1855 0
-8803 1762 1785 1853 0
-8803 1762 1787 1851 0
-8803 1762 1789 1849 0
-8803 1762 1791 1847 0
-8803 1762 1793 1845 0
-8803 1762 1795 1843 0
-8803 1762 1797 1841 0
-8803 1762 1799 1839 0
-8803 1762 1801 1837 0
-8803 1764 1867 0
-8803 1764 1772 1865 0
-8803 1764 1773 1863 0
-8803 1764 1775 1861 0
-8803 1764 1777 1859 0
-8803 1764 1779 1857 0
-8803 1764 1781 1855 0
-8803 1764 1783 1853 0
-8803 1764 1785 1851 0
-8803 1764 1787 1849 0
-8803 1764 1789 1847 0
-8803 1764 1791 1845 0
-8803 1764 1793 1843 0
-8803 1764 1795 1841 0
-8803 1764 1797 1839 0
-8803 1764 1799 1837 0
-8803 1764 1801 1835 0
-8803 1766 1865 0
-8803 1766 1772 1863 0
-8803 1766 1773 1861 0
-8803 1766 1775 1859 0
-8803 1766 1777 1857 0
-8803 1766 1779 1855 0
-8803 1766 1781 1853 0
-8803 1766 1783 1851 0
-8803 1766 1785 1849 0
-8803 1766 1787 1847 0
-8803 1766 1789 1845 0
-8803 1766 1791 1843 0
-8803 1766 1793 1841 0
-8803 1766 1795 1839 0
-8803 1766 1797 1837 0
-8803 1766 1799 1835 0
-8803 1766 1801 1834 0
-8803 1768 1863 0
-8803 1768 1772 1861 0
-8803 1768 1773 1859 0
-8803 1768 1775 1857 0
-8803 1768 1777 1855 0
-8803 1768 1779 1853 0
-8803 1768 1781 1851 0
-8803 1768 1783 1849 0
-8803 1768 1785 1847 0
-8803 1768 1787 1845 0
-8803 1768 1789 1843 0
-8803 1768 1791 1841 0
-8803 1768 1793 1839 0
-8803 1768 1795 1837 0
-8803 1768 1797 1835 0
-8803 1768 1799 1834 0
-8803 1768 1801 0
-8803 1770 1861 0
-8803 1770 1772 1859 0
-8803 1770 1773 1857 0
-8803 1770 1775 1855 0
-8803 1770 1777 1853 0
-8803 1770 1779 1851 0
-8803 1770 1781 1849 0
-8803 1770 1783 1847 0
-8803 1770 1785 1845 0
-8803 1770 1787 1843 0
-8803 1770 1789 1841 0
-8803 1770 1791 1839 0
-8803 1770 1793 1837 0
-8803 1770 1795 1835 0
-8803 1770 1797 1834 0
-8803 1770 1799 0
-8803 1770 1801 0
8803 -1799 -1834 0
8803 -1797 -1835 0
8803 -1795 -1837 0
8803 -1793 -1839 0
8803 -1791 -1841 0
8803 -1789 -1843 0
8803 -1787 -1845 0
8803 -1785 -1847 0
8803 -1783 -1849 0
8803 -1781 -1851 0
8803 -1779 -1853 0
8803 -1777 -1855 0
8803 -1775 -1857 0
8803 -1773 -1859 0
8803 -1772 -1861 0
8803 -1770 -1801 -1834 0
8803 -1770 -1799 -1835 0
8803 -1770 -1797 -1837 0
8803 -1770 -1795 -1839 0
8803 -1770 -1793 -1841 0
8803 -1770 -1791 -1843 0
8803 -1770 -1789 -1845 0
8803 -1770 -1787 -1847 0
8803 -1770 -1785 -1849 0
8803 -1770 -1783 -1851 0
8803 -1770 -1781 -1853 0
8803 -1770 -1779 -1855 0
8803 -1770 -1777 -1857 0
8803 -1770 -1775 -1859 0
8803 -1770 -1773 -1861 0
8803 -1770 -1772 -1863 0
8803 -1768 -1834 0
8803 -1768 -1801 -1835 0
8803 -1768 -1799 -1837 0
8803 -1768 -1797 -1839 0
8803 -1768 -1795 -1841 0
8803 -1768 -1793 -1843 0
8803 -1768 -1791 -1845 0
8803 -1768 -1789 -1847 0
8803 -1768 -1787 -1849 0
8803 -1768 -1785 -1851 0
8803 -1768 -1783 -1853 0
8803 -1768 -1781 -1855 0
8803 -1768 -1779 -1857 0
8803 -1768 -1777 -1859 0
8803 -1768 -1775 -1861 0
8803 -1768 -1773 -1863 0
8803 -1768 -1772 -1865 0
8803 -1766 -1835 0
8803 -1766 -1801 -1837 0
8803 -1766 -1799 -1839 0
8803 -1766 -1797 -1841 0
8803 -1766 -1795 -1843 0
8803 -1766 -1793 -1845 0
8803 -1766 -1791 -1847 0
8803 -1766 -1789 -1849 0
8803 -1766 -1787 -1851 0
8803 -1766 -1785 -1853 0
8803 -1766 -1783 -1855 0
8803 -1766 -1781 -1857 0
8803 -1766 -1779 -1859 0
8803 -1766 -1777 -1861 0
8803 -1766 -1775 -1863 0
8803 -1766 -1773 -1865 0
8803 -1766 -1772 -1867 0
8803 -1764 -1837 0
8803 -1764 -1801 -1839 0
8803 -1764 -1799 -1841 0
8803 -1764 -1797 -1843 0
8803 -1764 -1795 -1845 0
8803 -1764 -1793 -1847 0
8803 -1764 -1791 -1849 0
8803 -1764 -1789 -1851 0
8803 -1764 -1787 -1853 0
8803 -1764 -1785 -1855 0
8803 -1764 -1783 -1857 0
8803 -1764 -1781 -1859 0
8803 -1764 -1779 -1861 0
8803 -1764 -1777 -1863 0
8803 -1764 -1775 -1865 0
8803 -1764 -1773 -1867 0
8803 -1764 -1772 -1869 0
8803 -1762 -1839 0
8803 -1762 -1801 -1841 0
8803 -1762 -1799 -1843 0
8803 -1762 -1797 -1845 0
8803 -1762 -1795 -1847 0
8803 -1762 -1793 -1849 0
8803 -1762 -1791 -1851 0
8803 -1762 -1789 -1853 0
8803 -1762 -1787 -1855 0
8803 -1762 -1785 -1857 0
8803 -1762 -1783 -1859 0
8803 -1762 -1781 -1861 0
8803 -1762 -1779 -1863 0
8803 -1762 -1777 -1865 0
8803 -1762 -1775 -1867 0
8803 -1762 -1773 -1869 0
8803 -1762 -1772 -1871 0
8803 -1760 -1841 0
8803 -1760 -1801 -1843 0
8803 -1760 -1799 -1845 0
8803 -1760 -1797 -1847 0
8803 -1760 -1795 -1849 0
8803 -1760 -1793 -1851 0
8803 -1760 -1791 -1853 0
8803 -1760 -1789 -1855 0
8803 -1760 -1787 -1857 0
8803 -1760 -1785 -1859 0
8803 -1760 -1783 -1861 0
8803 -1760 -1781 -1863 0
8803 -1760 -1779 -1865 0
8803 -1760 -1777 -1867 0
8803 -1760 -1775 -1869 0
8803 -1760 -1773 -1871 0
8803 -1760 -1772 -1873 0
8803 -1758 -1843 0
8803 -1758 -1801 -1845 0
8803 -1758 -1799 -1847 0
8803 -1758 -1797 -1849 0
8803 -1758 -1795 -1851 0
8803 -1758 -1793 -1853 0
8803 -1758 -1791 -1855 0
8803 -1758 -1789 -1857 0
8803 -1758 -1787 -1859 0
8803 -1758 -1785 -1861 0
8803 -1758 -1783 -1863 0
8803 -1758 -1781 -1865 0
8803 -1758 -1779 -1867 0
8803 -1758 -1777 -1869 0
8803 -1758 -1775 -1871 0
8803 -1758 -1773 -1873 0
8803 -1758 -1772 -1875 0
8803 -1756 -1845 0
8803 -1756 -1801 -1847 0
8803 -1756 -1799 -1849 0
8803 -1756 -1797 -1851 0
8803 -1756 -1795 -1853 0
8803 -1756 -1793 -1855 0
8803 -1756 -1791 -1857 0
8803 -1756 -1789 -1859 0
8803 -1756 -1787 -1861 0
8803 -1756 -1785 -1863 0
8803 -1756 -1783 -1865 0
8803 -1756 -1781 -1867 0
8803 -1756 -1779 -1869 0
8803 -1756 -1777 -1871 0
8803 -1756 -1775 -1873 0
8803 -1756 -1773 -1875 0
8803 -1756 -1772 -1877 0
8803 -1754 -1847 0
8803 -1754 -1801 -1849 0
8803 -1754 -1799 -1851 0
8803 -1754 -1797 -1853 0
8803 -1754 -1795 -1855 0
8803 -1754 -1793 -1857 0
8803 -1754 -1791 -1859 0
8803 -1754 -1789 -1861 0
8803 -1754 -1787 -1863 0
8803 -1754 -1785 -1865 0
8803 -1754 -1783 -1867 0
8803 -1754 -1781 -1869 0
8803 -1754 -1779 -1871 0
8803 -1754 -1777 -1873 0
8803 -1754 -1775 -1875 0
8803 -1754 -1773 -1877 0
8803 -1754 -1772 -1879 0
8803 -1752 -1849 0
8803 -1752 -1801 -1851 0
8803 -1752 -1799 -1853 0
8803 -1752 -1797 -1855 0
8803 -1752 -1795 -1857 0
8803 -1752 -1793 -1859 0
8803 -1752 -1791 -1861 0
8803 -1752 -1789 -1863 0
8803 -1752 -1787 -1865 0
8803 -1752 -1785 -1867 0
8803 -1752 -1783 -1869 0
8803 -1752 -1781 -1871 0
8803 -1752 -1779 -1873 0
8803 -1752 -1777 -1875 0
8803 -1752 -1775 -1877 0
8803 -1752 -1773 -1879 0
8803 -1752 -1772 -1881 0
8803 -1750 -1851 0
8803 -1750 -1801 -1853 0
8803 -1750 -1799 -1855 0
8803 -1750 -1797 -1857 0
8803 -1750 -1795 -1859 0
8803 -1750 -1793 -1861 0
8803 -1750 -1791 -1863 0
8803 -1750 -1789 -1865 0
8803 -1750 -1787 -1867 0
8803 -1750 -1785 -1869 0
8803 -1750 -1783 -1871 0
8803 -1750 -1781 -1873 0
8803 -1750 -1779 -1875 0
8803 -1750 -1777 -1877 0
8803 -1750 -1775 -1879 0
8803 -1750 -1773 -1881 0
8803 -1750 -1772 -1883 0
8803 -1748 -1853 0
8803 -1748 -1801 -1855 0
8803 -1748 -1799 -1857 0
8803 -1748 -1797 -1859 0
8803 -1748 -1795 -1861 0
8803 -1748 -1793 -1863 0
8803 -1748 -1791 -1865 0
8803 -1748 -1789 -1867 0
8803 -1748 -1787 -1869 0
8803 -1748 -1785 -1871 0
8803 -1748 -1783 -1873 0
8803 -1748 -1781 -1875 0
8803 -1748 -1779 -1877 0
8803 -1748 -1777 -1879 0
8803 -1748 -1775 -1881 0
8803 -1748 -1773 -1883 0
8803 -1748 -1772 -1885 0
8803 -1746 -1855 0
8803 -1746 -1801 -1857 0
8803 -1746 -1799 -1859 0
8803 -1746 -1797 -1861 0
8803 -1746 -1795 -1863 0
8803 -1746 -1793 -1865 0
8803 -1746 -1791 -1867 0
8803 -1746 -1789 -1869 0
8803 -1746 -1787 -1871 0
8803 -1746 -1785 -1873 0
8803 -1746 -1783 -1875 0
8803 -1746 -1781 -1877 0
8803 -1746 -1779 -1879 0
8803 -1746 -1777 -1881 0
8803 -1746 -1775 -1883 0
8803 -1746 -1773 -1885 0
8803 -1746 -1772 -1887 0
8803 -1744 -1857 0
8803 -1744 -1801 -1859 0
8803 -1744 -1799 -1861 0
8803 -1744 -1797 -1863 0
8803 -1744 -1795 -1865 0
8803 -1744 -1793 -1867 0
8803 -1744 -1791 -1869 0
8803 -1744 -1789 -1871 0
8803 -1744 -1787 -1873 0
8803 -1744 -1785 -1875 0
8803 -1744 -1783 -1877 0
8803 -1744 -1781 -1879 0
8803 -1744 -1779 -1881 0
8803 -1744 -1777 -1883 0
8803 -1744 -1775 -1885 0
8803 -1744 -1773 -1887 0
8803 -1744 -1772 -1889 0
8803 -1742 -1859 0
8803 -1742 -1801 -1861 0
8803 -1742 -1799 -1863 0
8803 -1742 -1797 -1865 0
8803 -1742 -1795 -1867 0
8803 -1742 -1793 -1869 0
8803 -1742 -1791 -1871 0
8803 -1742 -1789 -1873 0
8803 -1742 -1787 -1875 0
8803 -1742 -1785 -1877 0
8803 -1742 -1783 -1879 0
8803 -1742 -1781 -1881 0
8803 -1742 -1779 -1883 0
8803 -1742 -1777 -1885 0
8803 -1742 -1775 -1887 0
8803 -1742 -1773 -1889 0
8803 -1742 -1772 -1891 0
8803 -1741 -1861 0
8803 -1741 -1801 -1863 0
8803 -1741 -1799 -1865 0
8803 -1741 -1797 -1867 0
8803 -1741 -1795 -1869 0
8803 -1741 -1793 -1871 0
8803 -1741 -1791 -1873 0
8803 -1741 -1789 -1875 0
8803 -1741 -1787 -1877 0
8803 -1741 -1785 -1879 0
8803 -1741 -1783 -1881 0
8803 -1741 -1781 -1883 0
8803 -1741 -1779 -1885 0
8803 -1741 -1777 -1887 0
8803 -1741 -1775 -1889 0
8803 -1741 -1773 -1891 0
8803 -1741 -1772 -1893 0
c ((30<=(aux389 + aux390 + aux392))=tv=SATLiteral(8804))
-8804 -1797 -1834 0
-8804 -1795 -1835 0
-8804 -1793 -1837 0
-8804 -1791 -1839 0
-8804 -1789 -1841 0
-8804 -1787 -1843 0
-8804 -1785 -1845 0
-8804 -1783 -1847 0
-8804 -1781 -1849 0
-8804 -1779 -1851 0
-8804 -1777 -1853 0
-8804 -1775 -1855 0
-8804 -1773 -1857 0
-8804 -1772 -1859 0
-8804 -1770 -1799 -1834 0
-8804 -1770 -1797 -1835 0
-8804 -1770 -1795 -1837 0
-8804 -1770 -1793 -1839 0
-8804 -1770 -1791 -1841 0
-8804 -1770 -1789 -1843 0
-8804 -1770 -1787 -1845 0
-8804 -1770 -1785 -1847 0
-8804 -1770 -1783 -1849 0
-8804 -1770 -1781 -1851 0
-8804 -1770 -1779 -1853 0
-8804 -1770 -1777 -1855 0
-8804 -1770 -1775 -1857 0
-8804 -1770 -1773 -1859 0
-8804 -1770 -1772 -1861 0
-8804 -1768 -1801 -1834 0
-8804 -1768 -1799 -1835 0
-8804 -1768 -1797 -1837 0
-8804 -1768 -1795 -1839 0
-8804 -1768 -1793 -1841 0
-8804 -1768 -1791 -1843 0
-8804 -1768 -1789 -1845 0
-8804 -1768 -1787 -1847 0
-8804 -1768 -1785 -1849 0
-8804 -1768 -1783 -1851 0
-8804 -1768 -1781 -1853 0
-8804 -1768 -1779 -1855 0
-8804 -1768 -1777 -1857 0
-8804 -1768 -1775 -1859 0
-8804 -1768 -1773 -1861 0
-8804 -1768 -1772 -1863 0
-8804 -1766 -1834 0
-8804 -1766 -1801 -1835 0
-8804 -1766 -1799 -1837 0
-8804 -1766 -1797 -1839 0
-8804 -1766 -1795 -1841 0
-8804 -1766 -1793 -1843 0
-8804 -1766 -1791 -1845 0
-8804 -1766 -1789 -1847 0
-8804 -1766 -1787 -1849 0
-8804 -1766 -1785 -1851 0
-8804 -1766 -1783 -1853 0
-8804 -1766 -1781 -1855 0
-8804 -1766 -1779 -1857 0
-8804 -1766 -1777 -1859 0
-8804 -1766 -1775 -1861 0
-8804 -1766 -1773 -1863 0
-8804 -1766 -1772 -1865 0
-8804 -1764 -1835 0
-8804 -1764 -1801 -1837 0
-8804 -1764 -1799 -1839 0
-8804 -1764 -1797 -1841 0
-8804 -1764 -1795 -1843 0
-8804 -1764 -1793 -1845 0
-8804 -1764 -1791 -1847 0
-8804 -1764 -1789 -1849 0
-8804 -1764 -1787 -1851 0
-8804 -1764 -1785 -1853 0
-8804 -1764 -1783 -1855 0
-8804 -1764 -1781 -1857 0
-8804 -1764 -1779 -1859 0
-8804 -1764 -1777 -1861 0
-8804 -1764 -1775 -1863 0
-8804 -1764 -1773 -1865 0
-8804 -1764 -1772 -1867 0
-8804 -1762 -1837 0
-8804 -1762 -1801 -1839 0
-8804 -1762 -1799 -1841 0
-8804 -1762 -1797 -1843 0
-8804 -1762 -1795 -1845 0
-8804 -1762 -1793 -1847 0
-8804 -1762 -1791 -1849 0
-8804 -1762 -1789 -1851 0
-8804 -1762 -1787 -1853 0
-8804 -1762 -1785 -1855 0
-8804 -1762 -1783 -1857 0
-8804 -1762 -1781 -1859 0
-8804 -1762 -1779 -1861 0
-8804 -1762 -1777 -1863 0
-8804 -1762 -1775 -1865 0
-8804 -1762 -1773 -1867 0
-8804 -1762 -1772 -1869 0
-8804 -1760 -1839 0
-8804 -1760 -1801 -1841 0
-8804 -1760 -1799 -1843 0
-8804 -1760 -1797 -1845 0
-8804 -1760 -1795 -1847 0
-8804 -1760 -1793 -1849 0
-8804 -1760 -1791 -1851 0
-8804 -1760 -1789 -1853 0
-8804 -1760 -1787 -1855 0
-8804 -1760 -1785 -1857 0
-8804 -1760 -1783 -1859 0
-8804 -1760 -1781 -1861 0
-8804 -1760 -1779 -1863 0
-8804 -1760 -1777 -1865 0
-8804 -1760 -1775 -1867 0
-8804 -1760 -1773 -1869 0
-8804 -1760 -1772 -1871 0
-8804 -1758 -1841 0
-8804 -1758 -1801 -1843 0
-8804 -1758 -1799 -1845 0
-8804 -1758 -1797 -1847 0
-8804 -1758 -1795 -1849 0
-8804 -1758 -1793 -1851 0
-8804 -1758 -1791 -1853 0
-8804 -1758 -1789 -1855 0
-8804 -1758 -1787 -1857 0
-8804 -1758 -1785 -1859 0
-8804 -1758 -1783 -1861 0
-8804 -1758 -1781 -1863 0
-8804 -1758 -1779 -1865 0
-8804 -1758 -1777 -1867 0
-8804 -1758 -1775 -1869 0
-8804 -1758 -1773 -1871 0
-8804 -1758 -1772 -1873 0
-8804 -1756 -1843 0
-8804 -1756 -1801 -1845 0
-8804 -1756 -1799 -1847 0
-8804 -1756 -1797 -1849 0
-8804 -1756 -1795 -1851 0
-8804 -1756 -1793 -1853 0
-8804 -1756 -1791 -1855 0
-8804 -1756 -1789 -1857 0
-8804 -1756 -1787 -1859 0
-8804 -1756 -1785 -1861 0
-8804 -1756 -1783 -1863 0
-8804 -1756 -1781 -1865 0
-8804 -1756 -1779 -1867 0
-8804 -1756 -1777 -1869 0
-8804 -1756 -1775 -1871 0
-8804 -1756 -1773 -1873 0
-8804 -1756 -1772 -1875 0
-8804 -1754 -1845 0
-8804 -1754 -1801 -1847 0
-8804 -1754 -1799 -1849 0
-8804 -1754 -1797 -1851 0
-8804 -1754 -1795 -1853 0
-8804 -1754 -1793 -1855 0
-8804 -1754 -1791 -1857 0
-8804 -1754 -1789 -1859 0
-8804 -1754 -1787 -1861 0
-8804 -1754 -1785 -1863 0
-8804 -1754 -1783 -1865 0
-8804 -1754 -1781 -1867 0
-8804 -1754 -1779 -1869 0
-8804 -1754 -1777 -1871 0
-8804 -1754 -1775 -1873 0
-8804 -1754 -1773 -1875 0
-8804 -1754 -1772 -1877 0
-8804 -1752 -1847 0
-8804 -1752 -1801 -1849 0
-8804 -1752 -1799 -1851 0
-8804 -1752 -1797 -1853 0
-8804 -1752 -1795 -1855 0
-8804 -1752 -1793 -1857 0
-8804 -1752 -1791 -1859 0
-8804 -1752 -1789 -1861 0
-8804 -1752 -1787 -1863 0
-8804 -1752 -1785 -1865 0
-8804 -1752 -1783 -1867 0
-8804 -1752 -1781 -1869 0
-8804 -1752 -1779 -1871 0
-8804 -1752 -1777 -1873 0
-8804 -1752 -1775 -1875 0
-8804 -1752 -1773 -1877 0
-8804 -1752 -1772 -1879 0
-8804 -1750 -1849 0
-8804 -1750 -1801 -1851 0
-8804 -1750 -1799 -1853 0
-8804 -1750 -1797 -1855 0
-8804 -1750 -1795 -1857 0
-8804 -1750 -1793 -1859 0
-8804 -1750 -1791 -1861 0
-8804 -1750 -1789 -1863 0
-8804 -1750 -1787 -1865 0
-8804 -1750 -1785 -1867 0
-8804 -1750 -1783 -1869 0
-8804 -1750 -1781 -1871 0
-8804 -1750 -1779 -1873 0
-8804 -1750 -1777 -1875 0
-8804 -1750 -1775 -1877 0
-8804 -1750 -1773 -1879 0
-8804 -1750 -1772 -1881 0
-8804 -1748 -1851 0
-8804 -1748 -1801 -1853 0
-8804 -1748 -1799 -1855 0
-8804 -1748 -1797 -1857 0
-8804 -1748 -1795 -1859 0
-8804 -1748 -1793 -1861 0
-8804 -1748 -1791 -1863 0
-8804 -1748 -1789 -1865 0
-8804 -1748 -1787 -1867 0
-8804 -1748 -1785 -1869 0
-8804 -1748 -1783 -1871 0
-8804 -1748 -1781 -1873 0
-8804 -1748 -1779 -1875 0
-8804 -1748 -1777 -1877 0
-8804 -1748 -1775 -1879 0
-8804 -1748 -1773 -1881 0
-8804 -1748 -1772 -1883 0
-8804 -1746 -1853 0
-8804 -1746 -1801 -1855 0
-8804 -1746 -1799 -1857 0
-8804 -1746 -1797 -1859 0
-8804 -1746 -1795 -1861 0
-8804 -1746 -1793 -1863 0
-8804 -1746 -1791 -1865 0
-8804 -1746 -1789 -1867 0
-8804 -1746 -1787 -1869 0
-8804 -1746 -1785 -1871 0
-8804 -1746 -1783 -1873 0
-8804 -1746 -1781 -1875 0
-8804 -1746 -1779 -1877 0
-8804 -1746 -1777 -1879 0
-8804 -1746 -1775 -1881 0
-8804 -1746 -1773 -1883 0
-8804 -1746 -1772 -1885 0
-8804 -1744 -1855 0
-8804 -1744 -1801 -1857 0
-8804 -1744 -1799 -1859 0
-8804 -1744 -1797 -1861 0
-8804 -1744 -1795 -1863 0
-8804 -1744 -1793 -1865 0
-8804 -1744 -1791 -1867 0
-8804 -1744 -1789 -1869 0
-8804 -1744 -1787 -1871 0
-8804 -1744 -1785 -1873 0
-8804 -1744 -1783 -1875 0
-8804 -1744 -1781 -1877 0
-8804 -1744 -1779 -1879 0
-8804 -1744 -1777 -1881 0
-8804 -1744 -1775 -1883 0
-8804 -1744 -1773 -1885 0
-8804 -1744 -1772 -1887 0
-8804 -1742 -1857 0
-8804 -1742 -1801 -1859 0
-8804 -1742 -1799 -1861 0
-8804 -1742 -1797 -1863 0
-8804 -1742 -1795 -1865 0
-8804 -1742 -1793 -1867 0
-8804 -1742 -1791 -1869 0
-8804 -1742 -1789 -1871 0
-8804 -1742 -1787 -1873 0
-8804 -1742 -1785 -1875 0
-8804 -1742 -1783 -1877 0
-8804 -1742 -1781 -1879 0
-8804 -1742 -1779 -1881 0
-8804 -1742 -1777 -1883 0
-8804 -1742 -1775 -1885 0
-8804 -1742 -1773 -1887 0
-8804 -1742 -1772 -1889 0
-8804 -1741 -1859 0
-8804 -1741 -1801 -1861 0
-8804 -1741 -1799 -1863 0
-8804 -1741 -1797 -1865 0
-8804 -1741 -1795 -1867 0
-8804 -1741 -1793 -1869 0
-8804 -1741 -1791 -1871 0
-8804 -1741 -1789 -1873 0
-8804 -1741 -1787 -1875 0
-8804 -1741 -1785 -1877 0
-8804 -1741 -1783 -1879 0
-8804 -1741 -1781 -1881 0
-8804 -1741 -1779 -1883 0
-8804 -1741 -1777 -1885 0
-8804 -1741 -1775 -1887 0
-8804 -1741 -1773 -1889 0
-8804 -1741 -1772 -1891 0
8804 1891 0
8804 1772 1889 0
8804 1773 1887 0
8804 1775 1885 0
8804 1777 1883 0
8804 1779 1881 0
8804 1781 1879 0
8804 1783 1877 0
8804 1785 1875 0
8804 1787 1873 0
8804 1789 1871 0
8804 1791 1869 0
8804 1793 1867 0
8804 1795 1865 0
8804 1797 1863 0
8804 1799 1861 0
8804 1801 1859 0
8804 1741 1889 0
8804 1741 1772 1887 0
8804 1741 1773 1885 0
8804 1741 1775 1883 0
8804 1741 1777 1881 0
8804 1741 1779 1879 0
8804 1741 1781 1877 0
8804 1741 1783 1875 0
8804 1741 1785 1873 0
8804 1741 1787 1871 0
8804 1741 1789 1869 0
8804 1741 1791 1867 0
8804 1741 1793 1865 0
8804 1741 1795 1863 0
8804 1741 1797 1861 0
8804 1741 1799 1859 0
8804 1741 1801 1857 0
8804 1742 1887 0
8804 1742 1772 1885 0
8804 1742 1773 1883 0
8804 1742 1775 1881 0
8804 1742 1777 1879 0
8804 1742 1779 1877 0
8804 1742 1781 1875 0
8804 1742 1783 1873 0
8804 1742 1785 1871 0
8804 1742 1787 1869 0
8804 1742 1789 1867 0
8804 1742 1791 1865 0
8804 1742 1793 1863 0
8804 1742 1795 1861 0
8804 1742 1797 1859 0
8804 1742 1799 1857 0
8804 1742 1801 1855 0
8804 1744 1885 0
8804 1744 1772 1883 0
8804 1744 1773 1881 0
8804 1744 1775 1879 0
8804 1744 1777 1877 0
8804 1744 1779 1875 0
8804 1744 1781 1873 0
8804 1744 1783 1871 0
8804 1744 1785 1869 0
8804 1744 1787 1867 0
8804 1744 1789 1865 0
8804 1744 1791 1863 0
8804 1744 1793 1861 0
8804 1744 1795 1859 0
8804 1744 1797 1857 0
8804 1744 1799 1855 0
8804 1744 1801 1853 0
8804 1746 1883 0
8804 1746 1772 1881 0
8804 1746 1773 1879 0
8804 1746 1775 1877 0
8804 1746 1777 1875 0
8804 1746 1779 1873 0
8804 1746 1781 1871 0
8804 1746 1783 1869 0
8804 1746 1785 1867 0
8804 1746 1787 1865 0
8804 1746 1789 1863 0
8804 1746 1791 1861 0
8804 1746 1793 1859 0
8804 1746 1795 1857 0
8804 1746 1797 1855 0
8804 1746 1799 1853 0
8804 1746 1801 1851 0
8804 1748 1881 0
8804 1748 1772 1879 0
8804 1748 1773 1877 0
8804 1748 1775 1875 0
8804 1748 1777 1873 0
8804 1748 1779 1871 0
8804 1748 1781 1869 0
8804 1748 1783 1867 0
8804 1748 1785 1865 0
8804 1748 1787 1863 0
8804 1748 1789 1861 0
8804 1748 1791 1859 0
8804 1748 1793 1857 0
8804 1748 1795 1855 0
8804 1748 1797 1853 0
8804 1748 1799 1851 0
8804 1748 1801 1849 0
8804 1750 1879 0
8804 1750 1772 1877 0
8804 1750 1773 1875 0
8804 1750 1775 1873 0
8804 1750 1777 1871 0
8804 1750 1779 1869 0
8804 1750 1781 1867 0
8804 1750 1783 1865 0
8804 1750 1785 1863 0
8804 1750 1787 1861 0
8804 1750 1789 1859 0
8804 1750 1791 1857 0
8804 1750 1793 1855 0
8804 1750 1795 1853 0
8804 1750 1797 1851 0
8804 1750 1799 1849 0
8804 1750 1801 1847 0
8804 1752 1877 0
8804 1752 1772 1875 0
8804 1752 1773 1873 0
8804 1752 1775 1871 0
8804 1752 1777 1869 0
8804 1752 1779 1867 0
8804 1752 1781 1865 0
8804 1752 1783 1863 0
8804 1752 1785 1861 0
8804 1752 1787 1859 0
8804 1752 1789 1857 0
8804 1752 1791 1855 0
8804 1752 1793 1853 0
8804 1752 1795 1851 0
8804 1752 1797 1849 0
8804 1752 1799 1847 0
8804 1752 1801 1845 0
8804 1754 1875 0
8804 1754 1772 1873 0
8804 1754 1773 1871 0
8804 1754 1775 1869 0
8804 1754 1777 1867 0
8804 1754 1779 1865 0
8804 1754 1781 1863 0
8804 1754 1783 1861 0
8804 1754 1785 1859 0
8804 1754 1787 1857 0
8804 1754 1789 1855 0
8804 1754 1791 1853 0
8804 1754 1793 1851 0
8804 1754 1795 1849 0
8804 1754 1797 1847 0
8804 1754 1799 1845 0
8804 1754 1801 1843 0
8804 1756 1873 0
8804 1756 1772 1871 0
8804 1756 1773 1869 0
8804 1756 1775 1867 0
8804 1756 1777 1865 0
8804 1756 1779 1863 0
8804 1756 1781 1861 0
8804 1756 1783 1859 0
8804 1756 1785 1857 0
8804 1756 1787 1855 0
8804 1756 1789 1853 0
8804 1756 1791 1851 0
8804 1756 1793 1849 0
8804 1756 1795 1847 0
8804 1756 1797 1845 0
8804 1756 1799 1843 0
8804 1756 1801 1841 0
8804 1758 1871 0
8804 1758 1772 1869 0
8804 1758 1773 1867 0
8804 1758 1775 1865 0
8804 1758 1777 1863 0
8804 1758 1779 1861 0
8804 1758 1781 1859 0
8804 1758 1783 1857 0
8804 1758 1785 1855 0
8804 1758 1787 1853 0
8804 1758 1789 1851 0
8804 1758 1791 1849 0
8804 1758 1793 1847 0
8804 1758 1795 1845 0
8804 1758 1797 1843 0
8804 1758 1799 1841 0
8804 1758 1801 1839 0
8804 1760 1869 0
8804 1760 1772 1867 0
8804 1760 1773 1865 0
8804 1760 1775 1863 0
8804 1760 1777 1861 0
8804 1760 1779 1859 0
8804 1760 1781 1857 0
8804 1760 1783 1855 0
8804 1760 1785 1853 0
8804 1760 1787 1851 0
8804 1760 1789 1849 0
8804 1760 1791 1847 0
8804 1760 1793 1845 0
8804 1760 1795 1843 0
8804 1760 1797 1841 0
8804 1760 1799 1839 0
8804 1760 1801 1837 0
8804 1762 1867 0
8804 1762 1772 1865 0
8804 1762 1773 1863 0
8804 1762 1775 1861 0
8804 1762 1777 1859 0
8804 1762 1779 1857 0
8804 1762 1781 1855 0
8804 1762 1783 1853 0
8804 1762 1785 1851 0
8804 1762 1787 1849 0
8804 1762 1789 1847 0
8804 1762 1791 1845 0
8804 1762 1793 1843 0
8804 1762 1795 1841 0
8804 1762 1797 1839 0
8804 1762 1799 1837 0
8804 1762 1801 1835 0
8804 1764 1865 0
8804 1764 1772 1863 0
8804 1764 1773 1861 0
8804 1764 1775 1859 0
8804 1764 1777 1857 0
8804 1764 1779 1855 0
8804 1764 1781 1853 0
8804 1764 1783 1851 0
8804 1764 1785 1849 0
8804 1764 1787 1847 0
8804 1764 1789 1845 0
8804 1764 1791 1843 0
8804 1764 1793 1841 0
8804 1764 1795 1839 0
8804 1764 1797 1837 0
8804 1764 1799 1835 0
8804 1764 1801 1834 0
8804 1766 1863 0
8804 1766 1772 1861 0
8804 1766 1773 1859 0
8804 1766 1775 1857 0
8804 1766 1777 1855 0
8804 1766 1779 1853 0
8804 1766 1781 1851 0
8804 1766 1783 1849 0
8804 1766 1785 1847 0
8804 1766 1787 1845 0
8804 1766 1789 1843 0
8804 1766 1791 1841 0
8804 1766 1793 1839 0
8804 1766 1795 1837 0
8804 1766 1797 1835 0
8804 1766 1799 1834 0
8804 1766 1801 0
8804 1768 1861 0
8804 1768 1772 1859 0
8804 1768 1773 1857 0
8804 1768 1775 1855 0
8804 1768 1777 1853 0
8804 1768 1779 1851 0
8804 1768 1781 1849 0
8804 1768 1783 1847 0
8804 1768 1785 1845 0
8804 1768 1787 1843 0
8804 1768 1789 1841 0
8804 1768 1791 1839 0
8804 1768 1793 1837 0
8804 1768 1795 1835 0
8804 1768 1797 1834 0
8804 1768 1799 0
8804 1768 1801 0
8804 1770 1859 0
8804 1770 1772 1857 0
8804 1770 1773 1855 0
8804 1770 1775 1853 0
8804 1770 1777 1851 0
8804 1770 1779 1849 0
8804 1770 1781 1847 0
8804 1770 1783 1845 0
8804 1770 1785 1843 0
8804 1770 1787 1841 0
8804 1770 1789 1839 0
8804 1770 1791 1837 0
8804 1770 1793 1835 0
8804 1770 1795 1834 0
8804 1770 1797 0
8804 1770 1799 0
8804 1770 1801 0
c (((x_00002_00002 + x_00003_00002)<=8)=tv=SATLiteral(8805))
-8805 298 0
-8805 152 296 0
-8805 153 294 0
-8805 155 292 0
-8805 157 290 0
-8805 159 288 0
-8805 161 287 0
-8805 163 0
-8805 165 0
8805 -163 -287 0
8805 -161 -288 0
8805 -159 -290 0
8805 -157 -292 0
8805 -155 -294 0
8805 -153 -296 0
8805 -152 -298 0
c ((8<=(x_00002_00002 + x_00003_00002))=tv=SATLiteral(8806))
-8806 -161 -287 0
-8806 -159 -288 0
-8806 -157 -290 0
-8806 -155 -292 0
-8806 -153 -294 0
-8806 -152 -296 0
8806 296 0
8806 152 294 0
8806 153 292 0
8806 155 290 0
8806 157 288 0
8806 159 287 0
8806 161 0
8806 163 0
8806 165 0
c (((aux393 + aux394 + shift(x_00003_00003, -1))<=25)=tv=SATLiteral(8807))
-8807 1914 1957 0
-8807 1916 1955 0
-8807 1918 1953 0
-8807 1920 1951 0
-8807 1922 1949 0
-8807 1924 1947 0
-8807 1926 1945 0
-8807 302 1912 1957 0
-8807 302 1914 1955 0
-8807 302 1916 1953 0
-8807 302 1918 1951 0
-8807 302 1920 1949 0
-8807 302 1922 1947 0
-8807 302 1924 1945 0
-8807 302 1926 1943 0
-8807 303 1910 1957 0
-8807 303 1912 1955 0
-8807 303 1914 1953 0
-8807 303 1916 1951 0
-8807 303 1918 1949 0
-8807 303 1920 1947 0
-8807 303 1922 1945 0
-8807 303 1924 1943 0
-8807 303 1926 1941 0
-8807 305 1908 1957 0
-8807 305 1910 1955 0
-8807 305 1912 1953 0
-8807 305 1914 1951 0
-8807 305 1916 1949 0
-8807 305 1918 1947 0
-8807 305 1920 1945 0
-8807 305 1922 1943 0
-8807 305 1924 1941 0
-8807 305 1926 1939 0
-8807 307 1906 1957 0
-8807 307 1908 1955 0
-8807 307 1910 1953 0
-8807 307 1912 1951 0
-8807 307 1914 1949 0
-8807 307 1916 1947 0
-8807 307 1918 1945 0
-8807 307 1920 1943 0
-8807 307 1922 1941 0
-8807 307 1924 1939 0
-8807 307 1926 1937 0
-8807 309 1904 1957 0
-8807 309 1906 1955 0
-8807 309 1908 1953 0
-8807 309 1910 1951 0
-8807 309 1912 1949 0
-8807 309 1914 1947 0
-8807 309 1916 1945 0
-8807 309 1918 1943 0
-8807 309 1920 1941 0
-8807 309 1922 1939 0
-8807 309 1924 1937 0
-8807 309 1926 1935 0
-8807 311 1902 1957 0
-8807 311 1904 1955 0
-8807 311 1906 1953 0
-8807 311 1908 1951 0
-8807 311 1910 1949 0
-8807 311 1912 1947 0
-8807 311 1914 1945 0
-8807 311 1916 1943 0
-8807 311 1918 1941 0
-8807 311 1920 1939 0
-8807 311 1922 1937 0
-8807 311 1924 1935 0
-8807 311 1926 1933 0
-8807 313 1900 1957 0
-8807 313 1902 1955 0
-8807 313 1904 1953 0
-8807 313 1906 1951 0
-8807 313 1908 1949 0
-8807 313 1910 1947 0
-8807 313 1912 1945 0
-8807 313 1914 1943 0
-8807 313 1916 1941 0
-8807 313 1918 1939 0
-8807 313 1920 1937 0
-8807 313 1922 1935 0
-8807 313 1924 1933 0
-8807 313 1926 1931 0
-8807 315 1898 1957 0
-8807 315 1900 1955 0
-8807 315 1902 1953 0
-8807 315 1904 1951 0
-8807 315 1906 1949 0
-8807 315 1908 1947 0
-8807 315 1910 1945 0
-8807 315 1912 1943 0
-8807 315 1914 1941 0
-8807 315 1916 1939 0
-8807 315 1918 1937 0
-8807 315 1920 1935 0
-8807 315 1922 1933 0
-8807 315 1924 1931 0
-8807 315 1926 1929 0
8807 -1929 0
8807 -1926 -1931 0
8807 -1924 -1933 0
8807 -1922 -1935 0
8807 -1920 -1937 0
8807 -1918 -1939 0
8807 -1916 -1941 0
8807 -1914 -1943 0
8807 -1912 -1945 0
8807 -1910 -1947 0
8807 -1908 -1949 0
8807 -1906 -1951 0
8807 -1904 -1953 0
8807 -1902 -1955 0
8807 -1900 -1957 0
8807 -1898 0
8807 -1897 0
8807 -315 -1931 0
8807 -315 -1926 -1933 0
8807 -315 -1924 -1935 0
8807 -315 -1922 -1937 0
8807 -315 -1920 -1939 0
8807 -315 -1918 -1941 0
8807 -315 -1916 -1943 0
8807 -315 -1914 -1945 0
8807 -315 -1912 -1947 0
8807 -315 -1910 -1949 0
8807 -315 -1908 -1951 0
8807 -315 -1906 -1953 0
8807 -315 -1904 -1955 0
8807 -315 -1902 -1957 0
8807 -315 -1900 0
8807 -315 -1898 0
8807 -315 -1897 0
8807 -313 -1933 0
8807 -313 -1926 -1935 0
8807 -313 -1924 -1937 0
8807 -313 -1922 -1939 0
8807 -313 -1920 -1941 0
8807 -313 -1918 -1943 0
8807 -313 -1916 -1945 0
8807 -313 -1914 -1947 0
8807 -313 -1912 -1949 0
8807 -313 -1910 -1951 0
8807 -313 -1908 -1953 0
8807 -313 -1906 -1955 0
8807 -313 -1904 -1957 0
8807 -313 -1902 0
8807 -313 -1900 0
8807 -313 -1898 0
8807 -313 -1897 0
8807 -311 -1935 0
8807 -311 -1926 -1937 0
8807 -311 -1924 -1939 0
8807 -311 -1922 -1941 0
8807 -311 -1920 -1943 0
8807 -311 -1918 -1945 0
8807 -311 -1916 -1947 0
8807 -311 -1914 -1949 0
8807 -311 -1912 -1951 0
8807 -311 -1910 -1953 0
8807 -311 -1908 -1955 0
8807 -311 -1906 -1957 0
8807 -311 -1904 0
8807 -311 -1902 0
8807 -311 -1900 0
8807 -311 -1898 0
8807 -311 -1897 0
8807 -309 -1937 0
8807 -309 -1926 -1939 0
8807 -309 -1924 -1941 0
8807 -309 -1922 -1943 0
8807 -309 -1920 -1945 0
8807 -309 -1918 -1947 0
8807 -309 -1916 -1949 0
8807 -309 -1914 -1951 0
8807 -309 -1912 -1953 0
8807 -309 -1910 -1955 0
8807 -309 -1908 -1957 0
8807 -309 -1906 0
8807 -309 -1904 0
8807 -309 -1902 0
8807 -309 -1900 0
8807 -309 -1898 0
8807 -309 -1897 0
8807 -307 -1939 0
8807 -307 -1926 -1941 0
8807 -307 -1924 -1943 0
8807 -307 -1922 -1945 0
8807 -307 -1920 -1947 0
8807 -307 -1918 -1949 0
8807 -307 -1916 -1951 0
8807 -307 -1914 -1953 0
8807 -307 -1912 -1955 0
8807 -307 -1910 -1957 0
8807 -307 -1908 0
8807 -307 -1906 0
8807 -307 -1904 0
8807 -307 -1902 0
8807 -307 -1900 0
8807 -307 -1898 0
8807 -307 -1897 0
8807 -305 -1941 0
8807 -305 -1926 -1943 0
8807 -305 -1924 -1945 0
8807 -305 -1922 -1947 0
8807 -305 -1920 -1949 0
8807 -305 -1918 -1951 0
8807 -305 -1916 -1953 0
8807 -305 -1914 -1955 0
8807 -305 -1912 -1957 0
8807 -305 -1910 0
8807 -305 -1908 0
8807 -305 -1906 0
8807 -305 -1904 0
8807 -305 -1902 0
8807 -305 -1900 0
8807 -305 -1898 0
8807 -305 -1897 0
8807 -303 -1943 0
8807 -303 -1926 -1945 0
8807 -303 -1924 -1947 0
8807 -303 -1922 -1949 0
8807 -303 -1920 -1951 0
8807 -303 -1918 -1953 0
8807 -303 -1916 -1955 0
8807 -303 -1914 -1957 0
8807 -303 -1912 0
8807 -303 -1910 0
8807 -303 -1908 0
8807 -303 -1906 0
8807 -303 -1904 0
8807 -303 -1902 0
8807 -303 -1900 0
8807 -303 -1898 0
8807 -303 -1897 0
8807 -302 -1945 0
8807 -302 -1926 -1947 0
8807 -302 -1924 -1949 0
8807 -302 -1922 -1951 0
8807 -302 -1920 -1953 0
8807 -302 -1918 -1955 0
8807 -302 -1916 -1957 0
8807 -302 -1914 0
8807 -302 -1912 0
8807 -302 -1910 0
8807 -302 -1908 0
8807 -302 -1906 0
8807 -302 -1904 0
8807 -302 -1902 0
8807 -302 -1900 0
8807 -302 -1898 0
8807 -302 -1897 0
c ((25<=(aux393 + aux394 + shift(x_00003_00003, -1)))=tv=SATLiteral(8808))
-8808 -1928 0
-8808 -1926 -1929 0
-8808 -1924 -1931 0
-8808 -1922 -1933 0
-8808 -1920 -1935 0
-8808 -1918 -1937 0
-8808 -1916 -1939 0
-8808 -1914 -1941 0
-8808 -1912 -1943 0
-8808 -1910 -1945 0
-8808 -1908 -1947 0
-8808 -1906 -1949 0
-8808 -1904 -1951 0
-8808 -1902 -1953 0
-8808 -1900 -1955 0
-8808 -1898 -1957 0
-8808 -1897 0
-8808 -315 -1929 0
-8808 -315 -1926 -1931 0
-8808 -315 -1924 -1933 0
-8808 -315 -1922 -1935 0
-8808 -315 -1920 -1937 0
-8808 -315 -1918 -1939 0
-8808 -315 -1916 -1941 0
-8808 -315 -1914 -1943 0
-8808 -315 -1912 -1945 0
-8808 -315 -1910 -1947 0
-8808 -315 -1908 -1949 0
-8808 -315 -1906 -1951 0
-8808 -315 -1904 -1953 0
-8808 -315 -1902 -1955 0
-8808 -315 -1900 -1957 0
-8808 -315 -1898 0
-8808 -315 -1897 0
-8808 -313 -1931 0
-8808 -313 -1926 -1933 0
-8808 -313 -1924 -1935 0
-8808 -313 -1922 -1937 0
-8808 -313 -1920 -1939 0
-8808 -313 -1918 -1941 0
-8808 -313 -1916 -1943 0
-8808 -313 -1914 -1945 0
-8808 -313 -1912 -1947 0
-8808 -313 -1910 -1949 0
-8808 -313 -1908 -1951 0
-8808 -313 -1906 -1953 0
-8808 -313 -1904 -1955 0
-8808 -313 -1902 -1957 0
-8808 -313 -1900 0
-8808 -313 -1898 0
-8808 -313 -1897 0
-8808 -311 -1933 0
-8808 -311 -1926 -1935 0
-8808 -311 -1924 -1937 0
-8808 -311 -1922 -1939 0
-8808 -311 -1920 -1941 0
-8808 -311 -1918 -1943 0
-8808 -311 -1916 -1945 0
-8808 -311 -1914 -1947 0
-8808 -311 -1912 -1949 0
-8808 -311 -1910 -1951 0
-8808 -311 -1908 -1953 0
-8808 -311 -1906 -1955 0
-8808 -311 -1904 -1957 0
-8808 -311 -1902 0
-8808 -311 -1900 0
-8808 -311 -1898 0
-8808 -311 -1897 0
-8808 -309 -1935 0
-8808 -309 -1926 -1937 0
-8808 -309 -1924 -1939 0
-8808 -309 -1922 -1941 0
-8808 -309 -1920 -1943 0
-8808 -309 -1918 -1945 0
-8808 -309 -1916 -1947 0
-8808 -309 -1914 -1949 0
-8808 -309 -1912 -1951 0
-8808 -309 -1910 -1953 0
-8808 -309 -1908 -1955 0
-8808 -309 -1906 -1957 0
-8808 -309 -1904 0
-8808 -309 -1902 0
-8808 -309 -1900 0
-8808 -309 -1898 0
-8808 -309 -1897 0
-8808 -307 -1937 0
-8808 -307 -1926 -1939 0
-8808 -307 -1924 -1941 0
-8808 -307 -1922 -1943 0
-8808 -307 -1920 -1945 0
-8808 -307 -1918 -1947 0
-8808 -307 -1916 -1949 0
-8808 -307 -1914 -1951 0
-8808 -307 -1912 -1953 0
-8808 -307 -1910 -1955 0
-8808 -307 -1908 -1957 0
-8808 -307 -1906 0
-8808 -307 -1904 0
-8808 -307 -1902 0
-8808 -307 -1900 0
-8808 -307 -1898 0
-8808 -307 -1897 0
-8808 -305 -1939 0
-8808 -305 -1926 -1941 0
-8808 -305 -1924 -1943 0
-8808 -305 -1922 -1945 0
-8808 -305 -1920 -1947 0
-8808 -305 -1918 -1949 0
-8808 -305 -1916 -1951 0
-8808 -305 -1914 -1953 0
-8808 -305 -1912 -1955 0
-8808 -305 -1910 -1957 0
-8808 -305 -1908 0
-8808 -305 -1906 0
-8808 -305 -1904 0
-8808 -305 -1902 0
-8808 -305 -1900 0
-8808 -305 -1898 0
-8808 -305 -1897 0
-8808 -303 -1941 0
-8808 -303 -1926 -1943 0
-8808 -303 -1924 -1945 0
-8808 -303 -1922 -1947 0
-8808 -303 -1920 -1949 0
-8808 -303 -1918 -1951 0
-8808 -303 -1916 -1953 0
-8808 -303 -1914 -1955 0
-8808 -303 -1912 -1957 0
-8808 -303 -1910 0
-8808 -303 -1908 0
-8808 -303 -1906 0
-8808 -303 -1904 0
-8808 -303 -1902 0
-8808 -303 -1900 0
-8808 -303 -1898 0
-8808 -303 -1897 0
-8808 -302 -1943 0
-8808 -302 -1926 -1945 0
-8808 -302 -1924 -1947 0
-8808 -302 -1922 -1949 0
-8808 -302 -1920 -1951 0
-8808 -302 -1918 -1953 0
-8808 -302 -1916 -1955 0
-8808 -302 -1914 -1957 0
-8808 -302 -1912 0
-8808 -302 -1910 0
-8808 -302 -1908 0
-8808 -302 -1906 0
-8808 -302 -1904 0
-8808 -302 -1902 0
-8808 -302 -1900 0
-8808 -302 -1898 0
-8808 -302 -1897 0
8808 1912 1957 0
8808 1914 1955 0
8808 1916 1953 0
8808 1918 1951 0
8808 1920 1949 0
8808 1922 1947 0
8808 1924 1945 0
8808 1926 1943 0
8808 302 1910 1957 0
8808 302 1912 1955 0
8808 302 1914 1953 0
8808 302 1916 1951 0
8808 302 1918 1949 0
8808 302 1920 1947 0
8808 302 1922 1945 0
8808 302 1924 1943 0
8808 302 1926 1941 0
8808 303 1908 1957 0
8808 303 1910 1955 0
8808 303 1912 1953 0
8808 303 1914 1951 0
8808 303 1916 1949 0
8808 303 1918 1947 0
8808 303 1920 1945 0
8808 303 1922 1943 0
8808 303 1924 1941 0
8808 303 1926 1939 0
8808 305 1906 1957 0
8808 305 1908 1955 0
8808 305 1910 1953 0
8808 305 1912 1951 0
8808 305 1914 1949 0
8808 305 1916 1947 0
8808 305 1918 1945 0
8808 305 1920 1943 0
8808 305 1922 1941 0
8808 305 1924 1939 0
8808 305 1926 1937 0
8808 307 1904 1957 0
8808 307 1906 1955 0
8808 307 1908 1953 0
8808 307 1910 1951 0
8808 307 1912 1949 0
8808 307 1914 1947 0
8808 307 1916 1945 0
8808 307 1918 1943 0
8808 307 1920 1941 0
8808 307 1922 1939 0
8808 307 1924 1937 0
8808 307 1926 1935 0
8808 309 1902 1957 0
8808 309 1904 1955 0
8808 309 1906 1953 0
8808 309 1908 1951 0
8808 309 1910 1949 0
8808 309 1912 1947 0
8808 309 1914 1945 0
8808 309 1916 1943 0
8808 309 1918 1941 0
8808 309 1920 1939 0
8808 309 1922 1937 0
8808 309 1924 1935 0
8808 309 1926 1933 0
8808 311 1900 1957 0
8808 311 1902 1955 0
8808 311 1904 1953 0
8808 311 1906 1951 0
8808 311 1908 1949 0
8808 311 1910 1947 0
8808 311 1912 1945 0
8808 311 1914 1943 0
8808 311 1916 1941 0
8808 311 1918 1939 0
8808 311 1920 1937 0
8808 311 1922 1935 0
8808 311 1924 1933 0
8808 311 1926 1931 0
8808 313 1898 1957 0
8808 313 1900 1955 0
8808 313 1902 1953 0
8808 313 1904 1951 0
8808 313 1906 1949 0
8808 313 1908 1947 0
8808 313 1910 1945 0
8808 313 1912 1943 0
8808 313 1914 1941 0
8808 313 1916 1939 0
8808 313 1918 1937 0
8808 313 1920 1935 0
8808 313 1922 1933 0
8808 313 1924 1931 0
8808 313 1926 1929 0
8808 315 1897 1957 0
8808 315 1898 1955 0
8808 315 1900 1953 0
8808 315 1902 1951 0
8808 315 1904 1949 0
8808 315 1906 1947 0
8808 315 1908 1945 0
8808 315 1910 1943 0
8808 315 1912 1941 0
8808 315 1914 1939 0
8808 315 1916 1937 0
8808 315 1918 1935 0
8808 315 1920 1933 0
8808 315 1922 1931 0
8808 315 1924 1929 0
8808 315 1926 1928 0
c (((x_00002_00005 + x_00002_00006)<=11)=tv=SATLiteral(8809))
-8809 198 225 0
-8809 200 223 0
-8809 202 221 0
-8809 204 219 0
-8809 206 217 0
-8809 208 215 0
-8809 210 213 0
8809 -213 0
8809 -210 -215 0
8809 -208 -217 0
8809 -206 -219 0
8809 -204 -221 0
8809 -202 -223 0
8809 -200 -225 0
8809 -198 0
8809 -197 0
c ((11<=(x_00002_00005 + x_00002_00006))=tv=SATLiteral(8810))
-8810 -212 0
-8810 -210 -213 0
-8810 -208 -215 0
-8810 -206 -217 0
-8810 -204 -219 0
-8810 -202 -221 0
-8810 -200 -223 0
-8810 -198 -225 0
-8810 -197 0
8810 197 225 0
8810 198 223 0
8810 200 221 0
8810 202 219 0
8810 204 217 0
8810 206 215 0
8810 208 213 0
8810 210 212 0
c (((aux395 + aux396 + shift(x_00004_00006, -1))<=15)=tv=SATLiteral(8811))
-8811 2019 0
-8811 1959 2017 0
-8811 1960 2015 0
-8811 1962 2013 0
-8811 1964 2011 0
-8811 1966 2009 0
-8811 1968 2007 0
-8811 1970 2005 0
-8811 1972 2003 0
-8811 1974 2001 0
-8811 1976 1999 0
-8811 1978 1997 0
-8811 1980 1995 0
-8811 1982 1993 0
-8811 1984 1991 0
-8811 1986 1990 0
-8811 1988 0
-8811 482 2017 0
-8811 482 1959 2015 0
-8811 482 1960 2013 0
-8811 482 1962 2011 0
-8811 482 1964 2009 0
-8811 482 1966 2007 0
-8811 482 1968 2005 0
-8811 482 1970 2003 0
-8811 482 1972 2001 0
-8811 482 1974 1999 0
-8811 482 1976 1997 0
-8811 482 1978 1995 0
-8811 482 1980 1993 0
-8811 482 1982 1991 0
-8811 482 1984 1990 0
-8811 482 1986 0
-8811 482 1988 0
-8811 483 2015 0
-8811 483 1959 2013 0
-8811 483 1960 2011 0
-8811 483 1962 2009 0
-8811 483 1964 2007 0
-8811 483 1966 2005 0
-8811 483 1968 2003 0
-8811 483 1970 2001 0
-8811 483 1972 1999 0
-8811 483 1974 1997 0
-8811 483 1976 1995 0
-8811 483 1978 1993 0
-8811 483 1980 1991 0
-8811 483 1982 1990 0
-8811 483 1984 0
-8811 483 1986 0
-8811 483 1988 0
-8811 485 2013 0
-8811 485 1959 2011 0
-8811 485 1960 2009 0
-8811 485 1962 2007 0
-8811 485 1964 2005 0
-8811 485 1966 2003 0
-8811 485 1968 2001 0
-8811 485 1970 1999 0
-8811 485 1972 1997 0
-8811 485 1974 1995 0
-8811 485 1976 1993 0
-8811 485 1978 1991 0
-8811 485 1980 1990 0
-8811 485 1982 0
-8811 485 1984 0
-8811 485 1986 0
-8811 485 1988 0
-8811 487 2011 0
-8811 487 1959 2009 0
-8811 487 1960 2007 0
-8811 487 1962 2005 0
-8811 487 1964 2003 0
-8811 487 1966 2001 0
-8811 487 1968 1999 0
-8811 487 1970 1997 0
-8811 487 1972 1995 0
-8811 487 1974 1993 0
-8811 487 1976 1991 0
-8811 487 1978 1990 0
-8811 487 1980 0
-8811 487 1982 0
-8811 487 1984 0
-8811 487 1986 0
-8811 487 1988 0
-8811 489 2009 0
-8811 489 1959 2007 0
-8811 489 1960 2005 0
-8811 489 1962 2003 0
-8811 489 1964 2001 0
-8811 489 1966 1999 0
-8811 489 1968 1997 0
-8811 489 1970 1995 0
-8811 489 1972 1993 0
-8811 489 1974 1991 0
-8811 489 1976 1990 0
-8811 489 1978 0
-8811 489 1980 0
-8811 489 1982 0
-8811 489 1984 0
-8811 489 1986 0
-8811 489 1988 0
-8811 491 2007 0
-8811 491 1959 2005 0
-8811 491 1960 2003 0
-8811 491 1962 2001 0
-8811 491 1964 1999 0
-8811 491 1966 1997 0
-8811 491 1968 1995 0
-8811 491 1970 1993 0
-8811 491 1972 1991 0
-8811 491 1974 1990 0
-8811 491 1976 0
-8811 491 1978 0
-8811 491 1980 0
-8811 491 1982 0
-8811 491 1984 0
-8811 491 1986 0
-8811 491 1988 0
-8811 493 2005 0
-8811 493 1959 2003 0
-8811 493 1960 2001 0
-8811 493 1962 1999 0
-8811 493 1964 1997 0
-8811 493 1966 1995 0
-8811 493 1968 1993 0
-8811 493 1970 1991 0
-8811 493 1972 1990 0
-8811 493 1974 0
-8811 493 1976 0
-8811 493 1978 0
-8811 493 1980 0
-8811 493 1982 0
-8811 493 1984 0
-8811 493 1986 0
-8811 493 1988 0
-8811 495 2003 0
-8811 495 1959 2001 0
-8811 495 1960 1999 0
-8811 495 1962 1997 0
-8811 495 1964 1995 0
-8811 495 1966 1993 0
-8811 495 1968 1991 0
-8811 495 1970 1990 0
-8811 495 1972 0
-8811 495 1974 0
-8811 495 1976 0
-8811 495 1978 0
-8811 495 1980 0
-8811 495 1982 0
-8811 495 1984 0
-8811 495 1986 0
-8811 495 1988 0
8811 -1972 -1990 0
8811 -1970 -1991 0
8811 -1968 -1993 0
8811 -1966 -1995 0
8811 -1964 -1997 0
8811 -1962 -1999 0
8811 -1960 -2001 0
8811 -1959 -2003 0
8811 -495 -1974 -1990 0
8811 -495 -1972 -1991 0
8811 -495 -1970 -1993 0
8811 -495 -1968 -1995 0
8811 -495 -1966 -1997 0
8811 -495 -1964 -1999 0
8811 -495 -1962 -2001 0
8811 -495 -1960 -2003 0
8811 -495 -1959 -2005 0
8811 -493 -1976 -1990 0
8811 -493 -1974 -1991 0
8811 -493 -1972 -1993 0
8811 -493 -1970 -1995 0
8811 -493 -1968 -1997 0
8811 -493 -1966 -1999 0
8811 -493 -1964 -2001 0
8811 -493 -1962 -2003 0
8811 -493 -1960 -2005 0
8811 -493 -1959 -2007 0
8811 -491 -1978 -1990 0
8811 -491 -1976 -1991 0
8811 -491 -1974 -1993 0
8811 -491 -1972 -1995 0
8811 -491 -1970 -1997 0
8811 -491 -1968 -1999 0
8811 -491 -1966 -2001 0
8811 -491 -1964 -2003 0
8811 -491 -1962 -2005 0
8811 -491 -1960 -2007 0
8811 -491 -1959 -2009 0
8811 -489 -1980 -1990 0
8811 -489 -1978 -1991 0
8811 -489 -1976 -1993 0
8811 -489 -1974 -1995 0
8811 -489 -1972 -1997 0
8811 -489 -1970 -1999 0
8811 -489 -1968 -2001 0
8811 -489 -1966 -2003 0
8811 -489 -1964 -2005 0
8811 -489 -1962 -2007 0
8811 -489 -1960 -2009 0
8811 -489 -1959 -2011 0
8811 -487 -1982 -1990 0
8811 -487 -1980 -1991 0
8811 -487 -1978 -1993 0
8811 -487 -1976 -1995 0
8811 -487 -1974 -1997 0
8811 -487 -1972 -1999 0
8811 -487 -1970 -2001 0
8811 -487 -1968 -2003 0
8811 -487 -1966 -2005 0
8811 -487 -1964 -2007 0
8811 -487 -1962 -2009 0
8811 -487 -1960 -2011 0
8811 -487 -1959 -2013 0
8811 -485 -1984 -1990 0
8811 -485 -1982 -1991 0
8811 -485 -1980 -1993 0
8811 -485 -1978 -1995 0
8811 -485 -1976 -1997 0
8811 -485 -1974 -1999 0
8811 -485 -1972 -2001 0
8811 -485 -1970 -2003 0
8811 -485 -1968 -2005 0
8811 -485 -1966 -2007 0
8811 -485 -1964 -2009 0
8811 -485 -1962 -2011 0
8811 -485 -1960 -2013 0
8811 -485 -1959 -2015 0
8811 -483 -1986 -1990 0
8811 -483 -1984 -1991 0
8811 -483 -1982 -1993 0
8811 -483 -1980 -1995 0
8811 -483 -1978 -1997 0
8811 -483 -1976 -1999 0
8811 -483 -1974 -2001 0
8811 -483 -1972 -2003 0
8811 -483 -1970 -2005 0
8811 -483 -1968 -2007 0
8811 -483 -1966 -2009 0
8811 -483 -1964 -2011 0
8811 -483 -1962 -2013 0
8811 -483 -1960 -2015 0
8811 -483 -1959 -2017 0
8811 -482 -1988 -1990 0
8811 -482 -1986 -1991 0
8811 -482 -1984 -1993 0
8811 -482 -1982 -1995 0
8811 -482 -1980 -1997 0
8811 -482 -1978 -1999 0
8811 -482 -1976 -2001 0
8811 -482 -1974 -2003 0
8811 -482 -1972 -2005 0
8811 -482 -1970 -2007 0
8811 -482 -1968 -2009 0
8811 -482 -1966 -2011 0
8811 -482 -1964 -2013 0
8811 -482 -1962 -2015 0
8811 -482 -1960 -2017 0
8811 -482 -1959 -2019 0
c ((15<=(aux395 + aux396 + shift(x_00004_00006, -1)))=tv=SATLiteral(8812))
-8812 -1970 -1990 0
-8812 -1968 -1991 0
-8812 -1966 -1993 0
-8812 -1964 -1995 0
-8812 -1962 -1997 0
-8812 -1960 -1999 0
-8812 -1959 -2001 0
-8812 -495 -1972 -1990 0
-8812 -495 -1970 -1991 0
-8812 -495 -1968 -1993 0
-8812 -495 -1966 -1995 0
-8812 -495 -1964 -1997 0
-8812 -495 -1962 -1999 0
-8812 -495 -1960 -2001 0
-8812 -495 -1959 -2003 0
-8812 -493 -1974 -1990 0
-8812 -493 -1972 -1991 0
-8812 -493 -1970 -1993 0
-8812 -493 -1968 -1995 0
-8812 -493 -1966 -1997 0
-8812 -493 -1964 -1999 0
-8812 -493 -1962 -2001 0
-8812 -493 -1960 -2003 0
-8812 -493 -1959 -2005 0
-8812 -491 -1976 -1990 0
-8812 -491 -1974 -1991 0
-8812 -491 -1972 -1993 0
-8812 -491 -1970 -1995 0
-8812 -491 -1968 -1997 0
-8812 -491 -1966 -1999 0
-8812 -491 -1964 -2001 0
-8812 -491 -1962 -2003 0
-8812 -491 -1960 -2005 0
-8812 -491 -1959 -2007 0
-8812 -489 -1978 -1990 0
-8812 -489 -1976 -1991 0
-8812 -489 -1974 -1993 0
-8812 -489 -1972 -1995 0
-8812 -489 -1970 -1997 0
-8812 -489 -1968 -1999 0
-8812 -489 -1966 -2001 0
-8812 -489 -1964 -2003 0
-8812 -489 -1962 -2005 0
-8812 -489 -1960 -2007 0
-8812 -489 -1959 -2009 0
-8812 -487 -1980 -1990 0
-8812 -487 -1978 -1991 0
-8812 -487 -1976 -1993 0
-8812 -487 -1974 -1995 0
-8812 -487 -1972 -1997 0
-8812 -487 -1970 -1999 0
-8812 -487 -1968 -2001 0
-8812 -487 -1966 -2003 0
-8812 -487 -1964 -2005 0
-8812 -487 -1962 -2007 0
-8812 -487 -1960 -2009 0
-8812 -487 -1959 -2011 0
-8812 -485 -1982 -1990 0
-8812 -485 -1980 -1991 0
-8812 -485 -1978 -1993 0
-8812 -485 -1976 -1995 0
-8812 -485 -1974 -1997 0
-8812 -485 -1972 -1999 0
-8812 -485 -1970 -2001 0
-8812 -485 -1968 -2003 0
-8812 -485 -1966 -2005 0
-8812 -485 -1964 -2007 0
-8812 -485 -1962 -2009 0
-8812 -485 -1960 -2011 0
-8812 -485 -1959 -2013 0
-8812 -483 -1984 -1990 0
-8812 -483 -1982 -1991 0
-8812 -483 -1980 -1993 0
-8812 -483 -1978 -1995 0
-8812 -483 -1976 -1997 0
-8812 -483 -1974 -1999 0
-8812 -483 -1972 -2001 0
-8812 -483 -1970 -2003 0
-8812 -483 -1968 -2005 0
-8812 -483 -1966 -2007 0
-8812 -483 -1964 -2009 0
-8812 -483 -1962 -2011 0
-8812 -483 -1960 -2013 0
-8812 -483 -1959 -2015 0
-8812 -482 -1986 -1990 0
-8812 -482 -1984 -1991 0
-8812 -482 -1982 -1993 0
-8812 -482 -1980 -1995 0
-8812 -482 -1978 -1997 0
-8812 -482 -1976 -1999 0
-8812 -482 -1974 -2001 0
-8812 -482 -1972 -2003 0
-8812 -482 -1970 -2005 0
-8812 -482 -1968 -2007 0
-8812 -482 -1966 -2009 0
-8812 -482 -1964 -2011 0
-8812 -482 -1962 -2013 0
-8812 -482 -1960 -2015 0
-8812 -482 -1959 -2017 0
8812 2017 0
8812 1959 2015 0
8812 1960 2013 0
8812 1962 2011 0
8812 1964 2009 0
8812 1966 2007 0
8812 1968 2005 0
8812 1970 2003 0
8812 1972 2001 0
8812 1974 1999 0
8812 1976 1997 0
8812 1978 1995 0
8812 1980 1993 0
8812 1982 1991 0
8812 1984 1990 0
8812 1986 0
8812 1988 0
8812 482 2015 0
8812 482 1959 2013 0
8812 482 1960 2011 0
8812 482 1962 2009 0
8812 482 1964 2007 0
8812 482 1966 2005 0
8812 482 1968 2003 0
8812 482 1970 2001 0
8812 482 1972 1999 0
8812 482 1974 1997 0
8812 482 1976 1995 0
8812 482 1978 1993 0
8812 482 1980 1991 0
8812 482 1982 1990 0
8812 482 1984 0
8812 482 1986 0
8812 482 1988 0
8812 483 2013 0
8812 483 1959 2011 0
8812 483 1960 2009 0
8812 483 1962 2007 0
8812 483 1964 2005 0
8812 483 1966 2003 0
8812 483 1968 2001 0
8812 483 1970 1999 0
8812 483 1972 1997 0
8812 483 1974 1995 0
8812 483 1976 1993 0
8812 483 1978 1991 0
8812 483 1980 1990 0
8812 483 1982 0
8812 483 1984 0
8812 483 1986 0
8812 483 1988 0
8812 485 2011 0
8812 485 1959 2009 0
8812 485 1960 2007 0
8812 485 1962 2005 0
8812 485 1964 2003 0
8812 485 1966 2001 0
8812 485 1968 1999 0
8812 485 1970 1997 0
8812 485 1972 1995 0
8812 485 1974 1993 0
8812 485 1976 1991 0
8812 485 1978 1990 0
8812 485 1980 0
8812 485 1982 0
8812 485 1984 0
8812 485 1986 0
8812 485 1988 0
8812 487 2009 0
8812 487 1959 2007 0
8812 487 1960 2005 0
8812 487 1962 2003 0
8812 487 1964 2001 0
8812 487 1966 1999 0
8812 487 1968 1997 0
8812 487 1970 1995 0
8812 487 1972 1993 0
8812 487 1974 1991 0
8812 487 1976 1990 0
8812 487 1978 0
8812 487 1980 0
8812 487 1982 0
8812 487 1984 0
8812 487 1986 0
8812 487 1988 0
8812 489 2007 0
8812 489 1959 2005 0
8812 489 1960 2003 0
8812 489 1962 2001 0
8812 489 1964 1999 0
8812 489 1966 1997 0
8812 489 1968 1995 0
8812 489 1970 1993 0
8812 489 1972 1991 0
8812 489 1974 1990 0
8812 489 1976 0
8812 489 1978 0
8812 489 1980 0
8812 489 1982 0
8812 489 1984 0
8812 489 1986 0
8812 489 1988 0
8812 491 2005 0
8812 491 1959 2003 0
8812 491 1960 2001 0
8812 491 1962 1999 0
8812 491 1964 1997 0
8812 491 1966 1995 0
8812 491 1968 1993 0
8812 491 1970 1991 0
8812 491 1972 1990 0
8812 491 1974 0
8812 491 1976 0
8812 491 1978 0
8812 491 1980 0
8812 491 1982 0
8812 491 1984 0
8812 491 1986 0
8812 491 1988 0
8812 493 2003 0
8812 493 1959 2001 0
8812 493 1960 1999 0
8812 493 1962 1997 0
8812 493 1964 1995 0
8812 493 1966 1993 0
8812 493 1968 1991 0
8812 493 1970 1990 0
8812 493 1972 0
8812 493 1974 0
8812 493 1976 0
8812 493 1978 0
8812 493 1980 0
8812 493 1982 0
8812 493 1984 0
8812 493 1986 0
8812 493 1988 0
8812 495 2001 0
8812 495 1959 1999 0
8812 495 1960 1997 0
8812 495 1962 1995 0
8812 495 1964 1993 0
8812 495 1966 1991 0
8812 495 1968 1990 0
8812 495 1970 0
8812 495 1972 0
8812 495 1974 0
8812 495 1976 0
8812 495 1978 0
8812 495 1980 0
8812 495 1982 0
8812 495 1984 0
8812 495 1986 0
8812 495 1988 0
c (((x_00003_00006 + x_00003_00007 + x_00004_00007)<=11)=tv=SATLiteral(8813))
-8813 362 510 0
-8813 363 508 0
-8813 365 506 0
-8813 367 504 0
-8813 369 502 0
-8813 371 500 0
-8813 373 498 0
-8813 375 497 0
-8813 347 510 0
-8813 347 362 508 0
-8813 347 363 506 0
-8813 347 365 504 0
-8813 347 367 502 0
-8813 347 369 500 0
-8813 347 371 498 0
-8813 347 373 497 0
-8813 347 375 0
-8813 348 508 0
-8813 348 362 506 0
-8813 348 363 504 0
-8813 348 365 502 0
-8813 348 367 500 0
-8813 348 369 498 0
-8813 348 371 497 0
-8813 348 373 0
-8813 348 375 0
-8813 350 506 0
-8813 350 362 504 0
-8813 350 363 502 0
-8813 350 365 500 0
-8813 350 367 498 0
-8813 350 369 497 0
-8813 350 371 0
-8813 350 373 0
-8813 350 375 0
-8813 352 504 0
-8813 352 362 502 0
-8813 352 363 500 0
-8813 352 365 498 0
-8813 352 367 497 0
-8813 352 369 0
-8813 352 371 0
-8813 352 373 0
-8813 352 375 0
-8813 354 502 0
-8813 354 362 500 0
-8813 354 363 498 0
-8813 354 365 497 0
-8813 354 367 0
-8813 354 369 0
-8813 354 371 0
-8813 354 373 0
-8813 354 375 0
-8813 356 500 0
-8813 356 362 498 0
-8813 356 363 497 0
-8813 356 365 0
-8813 356 367 0
-8813 356 369 0
-8813 356 371 0
-8813 356 373 0
-8813 356 375 0
-8813 358 498 0
-8813 358 362 497 0
-8813 358 363 0
-8813 358 365 0
-8813 358 367 0
-8813 358 369 0
-8813 358 371 0
-8813 358 373 0
-8813 358 375 0
-8813 360 497 0
-8813 360 362 0
-8813 360 363 0
-8813 360 365 0
-8813 360 367 0
-8813 360 369 0
-8813 360 371 0
-8813 360 373 0
-8813 360 375 0
8813 -362 -497 0
8813 -360 -363 -497 0
8813 -360 -362 -498 0
8813 -358 -365 -497 0
8813 -358 -363 -498 0
8813 -358 -362 -500 0
8813 -356 -367 -497 0
8813 -356 -365 -498 0
8813 -356 -363 -500 0
8813 -356 -362 -502 0
8813 -354 -369 -497 0
8813 -354 -367 -498 0
8813 -354 -365 -500 0
8813 -354 -363 -502 0
8813 -354 -362 -504 0
8813 -352 -371 -497 0
8813 -352 -369 -498 0
8813 -352 -367 -500 0
8813 -352 -365 -502 0
8813 -352 -363 -504 0
8813 -352 -362 -506 0
8813 -350 -373 -497 0
8813 -350 -371 -498 0
8813 -350 -369 -500 0
8813 -350 -367 -502 0
8813 -350 -365 -504 0
8813 -350 -363 -506 0
8813 -350 -362 -508 0
8813 -348 -375 -497 0
8813 -348 -373 -498 0
8813 -348 -371 -500 0
8813 -348 -369 -502 0
8813 -348 -367 -504 0
8813 -348 -365 -506 0
8813 -348 -363 -508 0
8813 -348 -362 -510 0
8813 -347 -497 0
8813 -347 -375 -498 0
8813 -347 -373 -500 0
8813 -347 -371 -502 0
8813 -347 -369 -504 0
8813 -347 -367 -506 0
8813 -347 -365 -508 0
8813 -347 -363 -510 0
8813 -347 -362 0
c ((11<=(x_00003_00006 + x_00003_00007 + x_00004_00007))=tv=SATLiteral(8814))
-8814 -360 -362 -497 0
-8814 -358 -363 -497 0
-8814 -358 -362 -498 0
-8814 -356 -365 -497 0
-8814 -356 -363 -498 0
-8814 -356 -362 -500 0
-8814 -354 -367 -497 0
-8814 -354 -365 -498 0
-8814 -354 -363 -500 0
-8814 -354 -362 -502 0
-8814 -352 -369 -497 0
-8814 -352 -367 -498 0
-8814 -352 -365 -500 0
-8814 -352 -363 -502 0
-8814 -352 -362 -504 0
-8814 -350 -371 -497 0
-8814 -350 -369 -498 0
-8814 -350 -367 -500 0
-8814 -350 -365 -502 0
-8814 -350 -363 -504 0
-8814 -350 -362 -506 0
-8814 -348 -373 -497 0
-8814 -348 -371 -498 0
-8814 -348 -369 -500 0
-8814 -348 -367 -502 0
-8814 -348 -365 -504 0
-8814 -348 -363 -506 0
-8814 -348 -362 -508 0
-8814 -347 -375 -497 0
-8814 -347 -373 -498 0
-8814 -347 -371 -500 0
-8814 -347 -369 -502 0
-8814 -347 -367 -504 0
-8814 -347 -365 -506 0
-8814 -347 -363 -508 0
-8814 -347 -362 -510 0
8814 510 0
8814 362 508 0
8814 363 506 0
8814 365 504 0
8814 367 502 0
8814 369 500 0
8814 371 498 0
8814 373 497 0
8814 375 0
8814 347 508 0
8814 347 362 506 0
8814 347 363 504 0
8814 347 365 502 0
8814 347 367 500 0
8814 347 369 498 0
8814 347 371 497 0
8814 347 373 0
8814 347 375 0
8814 348 506 0
8814 348 362 504 0
8814 348 363 502 0
8814 348 365 500 0
8814 348 367 498 0
8814 348 369 497 0
8814 348 371 0
8814 348 373 0
8814 348 375 0
8814 350 504 0
8814 350 362 502 0
8814 350 363 500 0
8814 350 365 498 0
8814 350 367 497 0
8814 350 369 0
8814 350 371 0
8814 350 373 0
8814 350 375 0
8814 352 502 0
8814 352 362 500 0
8814 352 363 498 0
8814 352 365 497 0
8814 352 367 0
8814 352 369 0
8814 352 371 0
8814 352 373 0
8814 352 375 0
8814 354 500 0
8814 354 362 498 0
8814 354 363 497 0
8814 354 365 0
8814 354 367 0
8814 354 369 0
8814 354 371 0
8814 354 373 0
8814 354 375 0
8814 356 498 0
8814 356 362 497 0
8814 356 363 0
8814 356 365 0
8814 356 367 0
8814 356 369 0
8814 356 371 0
8814 356 373 0
8814 356 375 0
8814 358 497 0
8814 358 362 0
8814 358 363 0
8814 358 365 0
8814 358 367 0
8814 358 369 0
8814 358 371 0
8814 358 373 0
8814 358 375 0
8814 360 0
8814 360 362 0
8814 360 363 0
8814 360 365 0
8814 360 367 0
8814 360 369 0
8814 360 371 0
8814 360 373 0
8814 360 375 0
c (((aux397 + shift(x_00004_00002, -1) + shift(x_00004_00003, -1))<=21)=tv=SATLiteral(8815))
-8815 446 2050 0
-8815 448 2048 0
-8815 450 2046 0
-8815 422 444 2050 0
-8815 422 446 2048 0
-8815 422 448 2046 0
-8815 422 450 2044 0
-8815 423 442 2050 0
-8815 423 444 2048 0
-8815 423 446 2046 0
-8815 423 448 2044 0
-8815 423 450 2042 0
-8815 425 440 2050 0
-8815 425 442 2048 0
-8815 425 444 2046 0
-8815 425 446 2044 0
-8815 425 448 2042 0
-8815 425 450 2040 0
-8815 427 438 2050 0
-8815 427 440 2048 0
-8815 427 442 2046 0
-8815 427 444 2044 0
-8815 427 446 2042 0
-8815 427 448 2040 0
-8815 427 450 2038 0
-8815 429 437 2050 0
-8815 429 438 2048 0
-8815 429 440 2046 0
-8815 429 442 2044 0
-8815 429 444 2042 0
-8815 429 446 2040 0
-8815 429 448 2038 0
-8815 429 450 2036 0
-8815 431 2050 0
-8815 431 437 2048 0
-8815 431 438 2046 0
-8815 431 440 2044 0
-8815 431 442 2042 0
-8815 431 444 2040 0
-8815 431 446 2038 0
-8815 431 448 2036 0
-8815 431 450 2034 0
-8815 433 2048 0
-8815 433 437 2046 0
-8815 433 438 2044 0
-8815 433 440 2042 0
-8815 433 442 2040 0
-8815 433 444 2038 0
-8815 433 446 2036 0
-8815 433 448 2034 0
-8815 433 450 2032 0
-8815 435 2046 0
-8815 435 437 2044 0
-8815 435 438 2042 0
-8815 435 440 2040 0
-8815 435 442 2038 0
-8815 435 444 2036 0
-8815 435 446 2034 0
-8815 435 448 2032 0
-8815 435 450 2030 0
8815 -2030 0
8815 -450 -2032 0
8815 -448 -2034 0
8815 -446 -2036 0
8815 -444 -2038 0
8815 -442 -2040 0
8815 -440 -2042 0
8815 -438 -2044 0
8815 -437 -2046 0
8815 -435 -2032 0
8815 -435 -450 -2034 0
8815 -435 -448 -2036 0
8815 -435 -446 -2038 0
8815 -435 -444 -2040 0
8815 -435 -442 -2042 0
8815 -435 -440 -2044 0
8815 -435 -438 -2046 0
8815 -435 -437 -2048 0
8815 -433 -2034 0
8815 -433 -450 -2036 0
8815 -433 -448 -2038 0
8815 -433 -446 -2040 0
8815 -433 -444 -2042 0
8815 -433 -442 -2044 0
8815 -433 -440 -2046 0
8815 -433 -438 -2048 0
8815 -433 -437 -2050 0
8815 -431 -2036 0
8815 -431 -450 -2038 0
8815 -431 -448 -2040 0
8815 -431 -446 -2042 0
8815 -431 -444 -2044 0
8815 -431 -442 -2046 0
8815 -431 -440 -2048 0
8815 -431 -438 -2050 0
8815 -431 -437 0
8815 -429 -2038 0
8815 -429 -450 -2040 0
8815 -429 -448 -2042 0
8815 -429 -446 -2044 0
8815 -429 -444 -2046 0
8815 -429 -442 -2048 0
8815 -429 -440 -2050 0
8815 -429 -438 0
8815 -429 -437 0
8815 -427 -2040 0
8815 -427 -450 -2042 0
8815 -427 -448 -2044 0
8815 -427 -446 -2046 0
8815 -427 -444 -2048 0
8815 -427 -442 -2050 0
8815 -427 -440 0
8815 -427 -438 0
8815 -427 -437 0
8815 -425 -2042 0
8815 -425 -450 -2044 0
8815 -425 -448 -2046 0
8815 -425 -446 -2048 0
8815 -425 -444 -2050 0
8815 -425 -442 0
8815 -425 -440 0
8815 -425 -438 0
8815 -425 -437 0
8815 -423 -2044 0
8815 -423 -450 -2046 0
8815 -423 -448 -2048 0
8815 -423 -446 -2050 0
8815 -423 -444 0
8815 -423 -442 0
8815 -423 -440 0
8815 -423 -438 0
8815 -423 -437 0
8815 -422 -2046 0
8815 -422 -450 -2048 0
8815 -422 -448 -2050 0
8815 -422 -446 0
8815 -422 -444 0
8815 -422 -442 0
8815 -422 -440 0
8815 -422 -438 0
8815 -422 -437 0
c ((21<=(aux397 + shift(x_00004_00002, -1) + shift(x_00004_00003, -1)))=tv=SATLiteral(8816))
-8816 -2028 0
-8816 -450 -2030 0
-8816 -448 -2032 0
-8816 -446 -2034 0
-8816 -444 -2036 0
-8816 -442 -2038 0
-8816 -440 -2040 0
-8816 -438 -2042 0
-8816 -437 -2044 0
-8816 -435 -2030 0
-8816 -435 -450 -2032 0
-8816 -435 -448 -2034 0
-8816 -435 -446 -2036 0
-8816 -435 -444 -2038 0
-8816 -435 -442 -2040 0
-8816 -435 -440 -2042 0
-8816 -435 -438 -2044 0
-8816 -435 -437 -2046 0
-8816 -433 -2032 0
-8816 -433 -450 -2034 0
-8816 -433 -448 -2036 0
-8816 -433 -446 -2038 0
-8816 -433 -444 -2040 0
-8816 -433 -442 -2042 0
-8816 -433 -440 -2044 0
-8816 -433 -438 -2046 0
-8816 -433 -437 -2048 0
-8816 -431 -2034 0
-8816 -431 -450 -2036 0
-8816 -431 -448 -2038 0
-8816 -431 -446 -2040 0
-8816 -431 -444 -2042 0
-8816 -431 -442 -2044 0
-8816 -431 -440 -2046 0
-8816 -431 -438 -2048 0
-8816 -431 -437 -2050 0
-8816 -429 -2036 0
-8816 -429 -450 -2038 0
-8816 -429 -448 -2040 0
-8816 -429 -446 -2042 0
-8816 -429 -444 -2044 0
-8816 -429 -442 -2046 0
-8816 -429 -440 -2048 0
-8816 -429 -438 -2050 0
-8816 -429 -437 0
-8816 -427 -2038 0
-8816 -427 -450 -2040 0
-8816 -427 -448 -2042 0
-8816 -427 -446 -2044 0
-8816 -427 -444 -2046 0
-8816 -427 -442 -2048 0
-8816 -427 -440 -2050 0
-8816 -427 -438 0
-8816 -427 -437 0
-8816 -425 -2040 0
-8816 -425 -450 -2042 0
-8816 -425 -448 -2044 0
-8816 -425 -446 -2046 0
-8816 -425 -444 -2048 0
-8816 -425 -442 -2050 0
-8816 -425 -440 0
-8816 -425 -438 0
-8816 -425 -437 0
-8816 -423 -2042 0
-8816 -423 -450 -2044 0
-8816 -423 -448 -2046 0
-8816 -423 -446 -2048 0
-8816 -423 -444 -2050 0
-8816 -423 -442 0
-8816 -423 -440 0
-8816 -423 -438 0
-8816 -423 -437 0
-8816 -422 -2044 0
-8816 -422 -450 -2046 0
-8816 -422 -448 -2048 0
-8816 -422 -446 -2050 0
-8816 -422 -444 0
-8816 -422 -442 0
-8816 -422 -440 0
-8816 -422 -438 0
-8816 -422 -437 0
8816 444 2050 0
8816 446 2048 0
8816 448 2046 0
8816 450 2044 0
8816 422 442 2050 0
8816 422 444 2048 0
8816 422 446 2046 0
8816 422 448 2044 0
8816 422 450 2042 0
8816 423 440 2050 0
8816 423 442 2048 0
8816 423 444 2046 0
8816 423 446 2044 0
8816 423 448 2042 0
8816 423 450 2040 0
8816 425 438 2050 0
8816 425 440 2048 0
8816 425 442 2046 0
8816 425 444 2044 0
8816 425 446 2042 0
8816 425 448 2040 0
8816 425 450 2038 0
8816 427 437 2050 0
8816 427 438 2048 0
8816 427 440 2046 0
8816 427 442 2044 0
8816 427 444 2042 0
8816 427 446 2040 0
8816 427 448 2038 0
8816 427 450 2036 0
8816 429 2050 0
8816 429 437 2048 0
8816 429 438 2046 0
8816 429 440 2044 0
8816 429 442 2042 0
8816 429 444 2040 0
8816 429 446 2038 0
8816 429 448 2036 0
8816 429 450 2034 0
8816 431 2048 0
8816 431 437 2046 0
8816 431 438 2044 0
8816 431 440 2042 0
8816 431 442 2040 0
8816 431 444 2038 0
8816 431 446 2036 0
8816 431 448 2034 0
8816 431 450 2032 0
8816 433 2046 0
8816 433 437 2044 0
8816 433 438 2042 0
8816 433 440 2040 0
8816 433 442 2038 0
8816 433 444 2036 0
8816 433 446 2034 0
8816 433 448 2032 0
8816 433 450 2030 0
8816 435 2044 0
8816 435 437 2042 0
8816 435 438 2040 0
8816 435 440 2038 0
8816 435 442 2036 0
8816 435 444 2034 0
8816 435 446 2032 0
8816 435 448 2030 0
8816 435 450 2028 0
c (((x_00004_00008 + x_00005_00008)<=14)=tv=SATLiteral(8817))
-8817 519 660 0
-8817 521 658 0
-8817 523 656 0
-8817 525 654 0
8817 -654 0
8817 -525 -656 0
8817 -523 -658 0
8817 -521 -660 0
8817 -519 0
8817 -517 0
8817 -515 0
8817 -513 0
8817 -512 0
c ((14<=(x_00004_00008 + x_00005_00008))=tv=SATLiteral(8818))
-8818 -652 0
-8818 -525 -654 0
-8818 -523 -656 0
-8818 -521 -658 0
-8818 -519 -660 0
-8818 -517 0
-8818 -515 0
-8818 -513 0
-8818 -512 0
8818 517 660 0
8818 519 658 0
8818 521 656 0
8818 523 654 0
8818 525 652 0
c (((x_00004_00009 + x_00005_00009)<=11)=tv=SATLiteral(8819))
-8819 528 675 0
-8819 530 673 0
-8819 532 671 0
-8819 534 669 0
-8819 536 667 0
-8819 538 665 0
-8819 540 663 0
8819 -663 0
8819 -540 -665 0
8819 -538 -667 0
8819 -536 -669 0
8819 -534 -671 0
8819 -532 -673 0
8819 -530 -675 0
8819 -528 0
8819 -527 0
c ((11<=(x_00004_00009 + x_00005_00009))=tv=SATLiteral(8820))
-8820 -662 0
-8820 -540 -663 0
-8820 -538 -665 0
-8820 -536 -667 0
-8820 -534 -669 0
-8820 -532 -671 0
-8820 -530 -673 0
-8820 -528 -675 0
-8820 -527 0
8820 527 675 0
8820 528 673 0
8820 530 671 0
8820 532 669 0
8820 534 667 0
8820 536 665 0
8820 538 663 0
8820 540 662 0
c (((x_00005_00002 + x_00006_00002)<=10)=tv=SATLiteral(8821))
-8821 557 705 0
-8821 558 703 0
-8821 560 701 0
-8821 562 699 0
-8821 564 697 0
-8821 566 695 0
-8821 568 693 0
-8821 570 692 0
8821 -692 0
8821 -570 -693 0
8821 -568 -695 0
8821 -566 -697 0
8821 -564 -699 0
8821 -562 -701 0
8821 -560 -703 0
8821 -558 -705 0
8821 -557 0
c ((10<=(x_00005_00002 + x_00006_00002))=tv=SATLiteral(8822))
-8822 -570 -692 0
-8822 -568 -693 0
-8822 -566 -695 0
-8822 -564 -697 0
-8822 -562 -699 0
-8822 -560 -701 0
-8822 -558 -703 0
-8822 -557 -705 0
8822 705 0
8822 557 703 0
8822 558 701 0
8822 560 699 0
8822 562 697 0
8822 564 695 0
8822 566 693 0
8822 568 692 0
8822 570 0
c (((aux398 + aux399 + shift(x_00005_00004, -1))<=19)=tv=SATLiteral(8823))
-8823 2057 2112 0
-8823 2059 2110 0
-8823 2061 2108 0
-8823 2063 2106 0
-8823 2065 2104 0
-8823 2067 2102 0
-8823 2069 2100 0
-8823 2071 2098 0
-8823 2073 2096 0
-8823 2075 2094 0
-8823 2077 2092 0
-8823 2079 2090 0
-8823 2081 2088 0
-8823 587 2055 2112 0
-8823 587 2057 2110 0
-8823 587 2059 2108 0
-8823 587 2061 2106 0
-8823 587 2063 2104 0
-8823 587 2065 2102 0
-8823 587 2067 2100 0
-8823 587 2069 2098 0
-8823 587 2071 2096 0
-8823 587 2073 2094 0
-8823 587 2075 2092 0
-8823 587 2077 2090 0
-8823 587 2079 2088 0
-8823 587 2081 2086 0
-8823 588 2053 2112 0
-8823 588 2055 2110 0
-8823 588 2057 2108 0
-8823 588 2059 2106 0
-8823 588 2061 2104 0
-8823 588 2063 2102 0
-8823 588 2065 2100 0
-8823 588 2067 2098 0
-8823 588 2069 2096 0
-8823 588 2071 2094 0
-8823 588 2073 2092 0
-8823 588 2075 2090 0
-8823 588 2077 2088 0
-8823 588 2079 2086 0
-8823 588 2081 2084 0
-8823 590 2052 2112 0
-8823 590 2053 2110 0
-8823 590 2055 2108 0
-8823 590 2057 2106 0
-8823 590 2059 2104 0
-8823 590 2061 2102 0
-8823 590 2063 2100 0
-8823 590 2065 2098 0
-8823 590 2067 2096 0
-8823 590 2069 2094 0
-8823 590 2071 2092 0
-8823 590 2073 2090 0
-8823 590 2075 2088 0
-8823 590 2077 2086 0
-8823 590 2079 2084 0
-8823 590 2081 2083 0
-8823 592 2112 0
-8823 592 2052 2110 0
-8823 592 2053 2108 0
-8823 592 2055 2106 0
-8823 592 2057 2104 0
-8823 592 2059 2102 0
-8823 592 2061 2100 0
-8823 592 2063 2098 0
-8823 592 2065 2096 0
-8823 592 2067 2094 0
-8823 592 2069 2092 0
-8823 592 2071 2090 0
-8823 592 2073 2088 0
-8823 592 2075 2086 0
-8823 592 2077 2084 0
-8823 592 2079 2083 0
-8823 592 2081 0
-8823 594 2110 0
-8823 594 2052 2108 0
-8823 594 2053 2106 0
-8823 594 2055 2104 0
-8823 594 2057 2102 0
-8823 594 2059 2100 0
-8823 594 2061 2098 0
-8823 594 2063 2096 0
-8823 594 2065 2094 0
-8823 594 2067 2092 0
-8823 594 2069 2090 0
-8823 594 2071 2088 0
-8823 594 2073 2086 0
-8823 594 2075 2084 0
-8823 594 2077 2083 0
-8823 594 2079 0
-8823 594 2081 0
-8823 596 2108 0
-8823 596 2052 2106 0
-8823 596 2053 2104 0
-8823 596 2055 2102 0
-8823 596 2057 2100 0
-8823 596 2059 2098 0
-8823 596 2061 2096 0
-8823 596 2063 2094 0
-8823 596 2065 2092 0
-8823 596 2067 2090 0
-8823 596 2069 2088 0
-8823 596 2071 2086 0
-8823 596 2073 2084 0
-8823 596 2075 2083 0
-8823 596 2077 0
-8823 596 2079 0
-8823 596 2081 0
-8823 598 2106 0
-8823 598 2052 2104 0
-8823 598 2053 2102 0
-8823 598 2055 2100 0
-8823 598 2057 2098 0
-8823 598 2059 2096 0
-8823 598 2061 2094 0
-8823 598 2063 2092 0
-8823 598 2065 2090 0
-8823 598 2067 2088 0
-8823 598 2069 2086 0
-8823 598 2071 2084 0
-8823 598 2073 2083 0
-8823 598 2075 0
-8823 598 2077 0
-8823 598 2079 0
-8823 598 2081 0
-8823 600 2104 0
-8823 600 2052 2102 0
-8823 600 2053 2100 0
-8823 600 2055 2098 0
-8823 600 2057 2096 0
-8823 600 2059 2094 0
-8823 600 2061 2092 0
-8823 600 2063 2090 0
-8823 600 2065 2088 0
-8823 600 2067 2086 0
-8823 600 2069 2084 0
-8823 600 2071 2083 0
-8823 600 2073 0
-8823 600 2075 0
-8823 600 2077 0
-8823 600 2079 0
-8823 600 2081 0
8823 -2073 -2083 0
8823 -2071 -2084 0
8823 -2069 -2086 0
8823 -2067 -2088 0
8823 -2065 -2090 0
8823 -2063 -2092 0
8823 -2061 -2094 0
8823 -2059 -2096 0
8823 -2057 -2098 0
8823 -2055 -2100 0
8823 -2053 -2102 0
8823 -2052 -2104 0
8823 -600 -2075 -2083 0
8823 -600 -2073 -2084 0
8823 -600 -2071 -2086 0
8823 -600 -2069 -2088 0
8823 -600 -2067 -2090 0
8823 -600 -2065 -2092 0
8823 -600 -2063 -2094 0
8823 -600 -2061 -2096 0
8823 -600 -2059 -2098 0
8823 -600 -2057 -2100 0
8823 -600 -2055 -2102 0
8823 -600 -2053 -2104 0
8823 -600 -2052 -2106 0
8823 -598 -2077 -2083 0
8823 -598 -2075 -2084 0
8823 -598 -2073 -2086 0
8823 -598 -2071 -2088 0
8823 -598 -2069 -2090 0
8823 -598 -2067 -2092 0
8823 -598 -2065 -2094 0
8823 -598 -2063 -2096 0
8823 -598 -2061 -2098 0
8823 -598 -2059 -2100 0
8823 -598 -2057 -2102 0
8823 -598 -2055 -2104 0
8823 -598 -2053 -2106 0
8823 -598 -2052 -2108 0
8823 -596 -2079 -2083 0
8823 -596 -2077 -2084 0
8823 -596 -2075 -2086 0
8823 -596 -2073 -2088 0
8823 -596 -2071 -2090 0
8823 -596 -2069 -2092 0
8823 -596 -2067 -2094 0
8823 -596 -2065 -2096 0
8823 -596 -2063 -2098 0
8823 -596 -2061 -2100 0
8823 -596 -2059 -2102 0
8823 -596 -2057 -2104 0
8823 -596 -2055 -2106 0
8823 -596 -2053 -2108 0
8823 -596 -2052 -2110 0
8823 -594 -2081 -2083 0
8823 -594 -2079 -2084 0
8823 -594 -2077 -2086 0
8823 -594 -2075 -2088 0
8823 -594 -2073 -2090 0
8823 -594 -2071 -2092 0
8823 -594 -2069 -2094 0
8823 -594 -2067 -2096 0
8823 -594 -2065 -2098 0
8823 -594 -2063 -2100 0
8823 -594 -2061 -2102 0
8823 -594 -2059 -2104 0
8823 -594 -2057 -2106 0
8823 -594 -2055 -2108 0
8823 -594 -2053 -2110 0
8823 -594 -2052 -2112 0
8823 -592 -2083 0
8823 -592 -2081 -2084 0
8823 -592 -2079 -2086 0
8823 -592 -2077 -2088 0
8823 -592 -2075 -2090 0
8823 -592 -2073 -2092 0
8823 -592 -2071 -2094 0
8823 -592 -2069 -2096 0
8823 -592 -2067 -2098 0
8823 -592 -2065 -2100 0
8823 -592 -2063 -2102 0
8823 -592 -2061 -2104 0
8823 -592 -2059 -2106 0
8823 -592 -2057 -2108 0
8823 -592 -2055 -2110 0
8823 -592 -2053 -2112 0
8823 -592 -2052 0
8823 -590 -2084 0
8823 -590 -2081 -2086 0
8823 -590 -2079 -2088 0
8823 -590 -2077 -2090 0
8823 -590 -2075 -2092 0
8823 -590 -2073 -2094 0
8823 -590 -2071 -2096 0
8823 -590 -2069 -2098 0
8823 -590 -2067 -2100 0
8823 -590 -2065 -2102 0
8823 -590 -2063 -2104 0
8823 -590 -2061 -2106 0
8823 -590 -2059 -2108 0
8823 -590 -2057 -2110 0
8823 -590 -2055 -2112 0
8823 -590 -2053 0
8823 -590 -2052 0
8823 -588 -2086 0
8823 -588 -2081 -2088 0
8823 -588 -2079 -2090 0
8823 -588 -2077 -2092 0
8823 -588 -2075 -2094 0
8823 -588 -2073 -2096 0
8823 -588 -2071 -2098 0
8823 -588 -2069 -2100 0
8823 -588 -2067 -2102 0
8823 -588 -2065 -2104 0
8823 -588 -2063 -2106 0
8823 -588 -2061 -2108 0
8823 -588 -2059 -2110 0
8823 -588 -2057 -2112 0
8823 -588 -2055 0
8823 -588 -2053 0
8823 -588 -2052 0
8823 -587 -2088 0
8823 -587 -2081 -2090 0
8823 -587 -2079 -2092 0
8823 -587 -2077 -2094 0
8823 -587 -2075 -2096 0
8823 -587 -2073 -2098 0
8823 -587 -2071 -2100 0
8823 -587 -2069 -2102 0
8823 -587 -2067 -2104 0
8823 -587 -2065 -2106 0
8823 -587 -2063 -2108 0
8823 -587 -2061 -2110 0
8823 -587 -2059 -2112 0
8823 -587 -2057 0
8823 -587 -2055 0
8823 -587 -2053 0
8823 -587 -2052 0
c ((19<=(aux398 + aux399 + shift(x_00005_00004, -1)))=tv=SATLiteral(8824))
-8824 -2071 -2083 0
-8824 -2069 -2084 0
-8824 -2067 -2086 0
-8824 -2065 -2088 0
-8824 -2063 -2090 0
-8824 -2061 -2092 0
-8824 -2059 -2094 0
-8824 -2057 -2096 0
-8824 -2055 -2098 0
-8824 -2053 -2100 0
-8824 -2052 -2102 0
-8824 -600 -2073 -2083 0
-8824 -600 -2071 -2084 0
-8824 -600 -2069 -2086 0
-8824 -600 -2067 -2088 0
-8824 -600 -2065 -2090 0
-8824 -600 -2063 -2092 0
-8824 -600 -2061 -2094 0
-8824 -600 -2059 -2096 0
-8824 -600 -2057 -2098 0
-8824 -600 -2055 -2100 0
-8824 -600 -2053 -2102 0
-8824 -600 -2052 -2104 0
-8824 -598 -2075 -2083 0
-8824 -598 -2073 -2084 0
-8824 -598 -2071 -2086 0
-8824 -598 -2069 -2088 0
-8824 -598 -2067 -2090 0
-8824 -598 -2065 -2092 0
-8824 -598 -2063 -2094 0
-8824 -598 -2061 -2096 0
-8824 -598 -2059 -2098 0
-8824 -598 -2057 -2100 0
-8824 -598 -2055 -2102 0
-8824 -598 -2053 -2104 0
-8824 -598 -2052 -2106 0
-8824 -596 -2077 -2083 0
-8824 -596 -2075 -2084 0
-8824 -596 -2073 -2086 0
-8824 -596 -2071 -2088 0
-8824 -596 -2069 -2090 0
-8824 -596 -2067 -2092 0
-8824 -596 -2065 -2094 0
-8824 -596 -2063 -2096 0
-8824 -596 -2061 -2098 0
-8824 -596 -2059 -2100 0
-8824 -596 -2057 -2102 0
-8824 -596 -2055 -2104 0
-8824 -596 -2053 -2106 0
-8824 -596 -2052 -2108 0
-8824 -594 -2079 -2083 0
-8824 -594 -2077 -2084 0
-8824 -594 -2075 -2086 0
-8824 -594 -2073 -2088 0
-8824 -594 -2071 -2090 0
-8824 -594 -2069 -2092 0
-8824 -594 -2067 -2094 0
-8824 -594 -2065 -2096 0
-8824 -594 -2063 -2098 0
-8824 -594 -2061 -2100 0
-8824 -594 -2059 -2102 0
-8824 -594 -2057 -2104 0
-8824 -594 -2055 -2106 0
-8824 -594 -2053 -2108 0
-8824 -594 -2052 -2110 0
-8824 -592 -2081 -2083 0
-8824 -592 -2079 -2084 0
-8824 -592 -2077 -2086 0
-8824 -592 -2075 -2088 0
-8824 -592 -2073 -2090 0
-8824 -592 -2071 -2092 0
-8824 -592 -2069 -2094 0
-8824 -592 -2067 -2096 0
-8824 -592 -2065 -2098 0
-8824 -592 -2063 -2100 0
-8824 -592 -2061 -2102 0
-8824 -592 -2059 -2104 0
-8824 -592 -2057 -2106 0
-8824 -592 -2055 -2108 0
-8824 -592 -2053 -2110 0
-8824 -592 -2052 -2112 0
-8824 -590 -2083 0
-8824 -590 -2081 -2084 0
-8824 -590 -2079 -2086 0
-8824 -590 -2077 -2088 0
-8824 -590 -2075 -2090 0
-8824 -590 -2073 -2092 0
-8824 -590 -2071 -2094 0
-8824 -590 -2069 -2096 0
-8824 -590 -2067 -2098 0
-8824 -590 -2065 -2100 0
-8824 -590 -2063 -2102 0
-8824 -590 -2061 -2104 0
-8824 -590 -2059 -2106 0
-8824 -590 -2057 -2108 0
-8824 -590 -2055 -2110 0
-8824 -590 -2053 -2112 0
-8824 -590 -2052 0
-8824 -588 -2084 0
-8824 -588 -2081 -2086 0
-8824 -588 -2079 -2088 0
-8824 -588 -2077 -2090 0
-8824 -588 -2075 -2092 0
-8824 -588 -2073 -2094 0
-8824 -588 -2071 -2096 0
-8824 -588 -2069 -2098 0
-8824 -588 -2067 -2100 0
-8824 -588 -2065 -2102 0
-8824 -588 -2063 -2104 0
-8824 -588 -2061 -2106 0
-8824 -588 -2059 -2108 0
-8824 -588 -2057 -2110 0
-8824 -588 -2055 -2112 0
-8824 -588 -2053 0
-8824 -588 -2052 0
-8824 -587 -2086 0
-8824 -587 -2081 -2088 0
-8824 -587 -2079 -2090 0
-8824 -587 -2077 -2092 0
-8824 -587 -2075 -2094 0
-8824 -587 -2073 -2096 0
-8824 -587 -2071 -2098 0
-8824 -587 -2069 -2100 0
-8824 -587 -2067 -2102 0
-8824 -587 -2065 -2104 0
-8824 -587 -2063 -2106 0
-8824 -587 -2061 -2108 0
-8824 -587 -2059 -2110 0
-8824 -587 -2057 -2112 0
-8824 -587 -2055 0
-8824 -587 -2053 0
-8824 -587 -2052 0
8824 2055 2112 0
8824 2057 2110 0
8824 2059 2108 0
8824 2061 2106 0
8824 2063 2104 0
8824 2065 2102 0
8824 2067 2100 0
8824 2069 2098 0
8824 2071 2096 0
8824 2073 2094 0
8824 2075 2092 0
8824 2077 2090 0
8824 2079 2088 0
8824 2081 2086 0
8824 587 2053 2112 0
8824 587 2055 2110 0
8824 587 2057 2108 0
8824 587 2059 2106 0
8824 587 2061 2104 0
8824 587 2063 2102 0
8824 587 2065 2100 0
8824 587 2067 2098 0
8824 587 2069 2096 0
8824 587 2071 2094 0
8824 587 2073 2092 0
8824 587 2075 2090 0
8824 587 2077 2088 0
8824 587 2079 2086 0
8824 587 2081 2084 0
8824 588 2052 2112 0
8824 588 2053 2110 0
8824 588 2055 2108 0
8824 588 2057 2106 0
8824 588 2059 2104 0
8824 588 2061 2102 0
8824 588 2063 2100 0
8824 588 2065 2098 0
8824 588 2067 2096 0
8824 588 2069 2094 0
8824 588 2071 2092 0
8824 588 2073 2090 0
8824 588 2075 2088 0
8824 588 2077 2086 0
8824 588 2079 2084 0
8824 588 2081 2083 0
8824 590 2112 0
8824 590 2052 2110 0
8824 590 2053 2108 0
8824 590 2055 2106 0
8824 590 2057 2104 0
8824 590 2059 2102 0
8824 590 2061 2100 0
8824 590 2063 2098 0
8824 590 2065 2096 0
8824 590 2067 2094 0
8824 590 2069 2092 0
8824 590 2071 2090 0
8824 590 2073 2088 0
8824 590 2075 2086 0
8824 590 2077 2084 0
8824 590 2079 2083 0
8824 590 2081 0
8824 592 2110 0
8824 592 2052 2108 0
8824 592 2053 2106 0
8824 592 2055 2104 0
8824 592 2057 2102 0
8824 592 2059 2100 0
8824 592 2061 2098 0
8824 592 2063 2096 0
8824 592 2065 2094 0
8824 592 2067 2092 0
8824 592 2069 2090 0
8824 592 2071 2088 0
8824 592 2073 2086 0
8824 592 2075 2084 0
8824 592 2077 2083 0
8824 592 2079 0
8824 592 2081 0
8824 594 2108 0
8824 594 2052 2106 0
8824 594 2053 2104 0
8824 594 2055 2102 0
8824 594 2057 2100 0
8824 594 2059 2098 0
8824 594 2061 2096 0
8824 594 2063 2094 0
8824 594 2065 2092 0
8824 594 2067 2090 0
8824 594 2069 2088 0
8824 594 2071 2086 0
8824 594 2073 2084 0
8824 594 2075 2083 0
8824 594 2077 0
8824 594 2079 0
8824 594 2081 0
8824 596 2106 0
8824 596 2052 2104 0
8824 596 2053 2102 0
8824 596 2055 2100 0
8824 596 2057 2098 0
8824 596 2059 2096 0
8824 596 2061 2094 0
8824 596 2063 2092 0
8824 596 2065 2090 0
8824 596 2067 2088 0
8824 596 2069 2086 0
8824 596 2071 2084 0
8824 596 2073 2083 0
8824 596 2075 0
8824 596 2077 0
8824 596 2079 0
8824 596 2081 0
8824 598 2104 0
8824 598 2052 2102 0
8824 598 2053 2100 0
8824 598 2055 2098 0
8824 598 2057 2096 0
8824 598 2059 2094 0
8824 598 2061 2092 0
8824 598 2063 2090 0
8824 598 2065 2088 0
8824 598 2067 2086 0
8824 598 2069 2084 0
8824 598 2071 2083 0
8824 598 2073 0
8824 598 2075 0
8824 598 2077 0
8824 598 2079 0
8824 598 2081 0
8824 600 2102 0
8824 600 2052 2100 0
8824 600 2053 2098 0
8824 600 2055 2096 0
8824 600 2057 2094 0
8824 600 2059 2092 0
8824 600 2061 2090 0
8824 600 2063 2088 0
8824 600 2065 2086 0
8824 600 2067 2084 0
8824 600 2069 2083 0
8824 600 2071 0
8824 600 2073 0
8824 600 2075 0
8824 600 2077 0
8824 600 2079 0
8824 600 2081 0
c (((x_00007_00001 + x_00006_00001)<=6)=tv=SATLiteral(8825))
-8825 684 0
-8825 812 682 0
-8825 813 680 0
-8825 815 678 0
-8825 817 677 0
-8825 819 0
-8825 821 0
-8825 823 0
-8825 825 0
8825 -819 -677 0
8825 -817 -678 0
8825 -815 -680 0
8825 -813 -682 0
8825 -812 -684 0
c ((6<=(x_00007_00001 + x_00006_00001))=tv=SATLiteral(8826))
-8826 -817 -677 0
-8826 -815 -678 0
-8826 -813 -680 0
-8826 -812 -682 0
8826 682 0
8826 812 680 0
8826 813 678 0
8826 815 677 0
8826 817 0
8826 819 0
8826 821 0
8826 823 0
8826 825 0
c (((shift(x_00007_00004, -1) + aux400 + shift(x_00006_00003, -1))<=10)=tv=SATLiteral(8827))
-8827 2133 0
-8827 707 2131 0
-8827 708 2129 0
-8827 710 2127 0
-8827 712 2125 0
-8827 714 2123 0
-8827 716 2121 0
-8827 718 2119 0
-8827 720 2117 0
-8827 857 2131 0
-8827 857 707 2129 0
-8827 857 708 2127 0
-8827 857 710 2125 0
-8827 857 712 2123 0
-8827 857 714 2121 0
-8827 857 716 2119 0
-8827 857 718 2117 0
-8827 857 720 2115 0
-8827 858 2129 0
-8827 858 707 2127 0
-8827 858 708 2125 0
-8827 858 710 2123 0
-8827 858 712 2121 0
-8827 858 714 2119 0
-8827 858 716 2117 0
-8827 858 718 2115 0
-8827 858 720 2114 0
-8827 860 2127 0
-8827 860 707 2125 0
-8827 860 708 2123 0
-8827 860 710 2121 0
-8827 860 712 2119 0
-8827 860 714 2117 0
-8827 860 716 2115 0
-8827 860 718 2114 0
-8827 860 720 0
-8827 862 2125 0
-8827 862 707 2123 0
-8827 862 708 2121 0
-8827 862 710 2119 0
-8827 862 712 2117 0
-8827 862 714 2115 0
-8827 862 716 2114 0
-8827 862 718 0
-8827 862 720 0
-8827 864 2123 0
-8827 864 707 2121 0
-8827 864 708 2119 0
-8827 864 710 2117 0
-8827 864 712 2115 0
-8827 864 714 2114 0
-8827 864 716 0
-8827 864 718 0
-8827 864 720 0
-8827 866 2121 0
-8827 866 707 2119 0
-8827 866 708 2117 0
-8827 866 710 2115 0
-8827 866 712 2114 0
-8827 866 714 0
-8827 866 716 0
-8827 866 718 0
-8827 866 720 0
-8827 868 2119 0
-8827 868 707 2117 0
-8827 868 708 2115 0
-8827 868 710 2114 0
-8827 868 712 0
-8827 868 714 0
-8827 868 716 0
-8827 868 718 0
-8827 868 720 0
-8827 870 2117 0
-8827 870 707 2115 0
-8827 870 708 2114 0
-8827 870 710 0
-8827 870 712 0
-8827 870 714 0
-8827 870 716 0
-8827 870 718 0
-8827 870 720 0
8827 -710 -2114 0
8827 -708 -2115 0
8827 -707 -2117 0
8827 -870 -712 -2114 0
8827 -870 -710 -2115 0
8827 -870 -708 -2117 0
8827 -870 -707 -2119 0
8827 -868 -714 -2114 0
8827 -868 -712 -2115 0
8827 -868 -710 -2117 0
8827 -868 -708 -2119 0
8827 -868 -707 -2121 0
8827 -866 -716 -2114 0
8827 -866 -714 -2115 0
8827 -866 -712 -2117 0
8827 -866 -710 -2119 0
8827 -866 -708 -2121 0
8827 -866 -707 -2123 0
8827 -864 -718 -2114 0
8827 -864 -716 -2115 0
8827 -864 -714 -2117 0
8827 -864 -712 -2119 0
8827 -864 -710 -2121 0
8827 -864 -708 -2123 0
8827 -864 -707 -2125 0
8827 -862 -720 -2114 0
8827 -862 -718 -2115 0
8827 -862 -716 -2117 0
8827 -862 -714 -2119 0
8827 -862 -712 -2121 0
8827 -862 -710 -2123 0
8827 -862 -708 -2125 0
8827 -862 -707 -2127 0
8827 -860 -2114 0
8827 -860 -720 -2115 0
8827 -860 -718 -2117 0
8827 -860 -716 -2119 0
8827 -860 -714 -2121 0
8827 -860 -712 -2123 0
8827 -860 -710 -2125 0
8827 -860 -708 -2127 0
8827 -860 -707 -2129 0
8827 -858 -2115 0
8827 -858 -720 -2117 0
8827 -858 -718 -2119 0
8827 -858 -716 -2121 0
8827 -858 -714 -2123 0
8827 -858 -712 -2125 0
8827 -858 -710 -2127 0
8827 -858 -708 -2129 0
8827 -858 -707 -2131 0
8827 -857 -2117 0
8827 -857 -720 -2119 0
8827 -857 -718 -2121 0
8827 -857 -716 -2123 0
8827 -857 -714 -2125 0
8827 -857 -712 -2127 0
8827 -857 -710 -2129 0
8827 -857 -708 -2131 0
8827 -857 -707 -2133 0
c ((10<=(shift(x_00007_00004, -1) + aux400 + shift(x_00006_00003, -1)))=tv=SATLiteral(8828))
-8828 -708 -2114 0
-8828 -707 -2115 0
-8828 -870 -710 -2114 0
-8828 -870 -708 -2115 0
-8828 -870 -707 -2117 0
-8828 -868 -712 -2114 0
-8828 -868 -710 -2115 0
-8828 -868 -708 -2117 0
-8828 -868 -707 -2119 0
-8828 -866 -714 -2114 0
-8828 -866 -712 -2115 0
-8828 -866 -710 -2117 0
-8828 -866 -708 -2119 0
-8828 -866 -707 -2121 0
-8828 -864 -716 -2114 0
-8828 -864 -714 -2115 0
-8828 -864 -712 -2117 0
-8828 -864 -710 -2119 0
-8828 -864 -708 -2121 0
-8828 -864 -707 -2123 0
-8828 -862 -718 -2114 0
-8828 -862 -716 -2115 0
-8828 -862 -714 -2117 0
-8828 -862 -712 -2119 0
-8828 -862 -710 -2121 0
-8828 -862 -708 -2123 0
-8828 -862 -707 -2125 0
-8828 -860 -720 -2114 0
-8828 -860 -718 -2115 0
-8828 -860 -716 -2117 0
-8828 -860 -714 -2119 0
-8828 -860 -712 -2121 0
-8828 -860 -710 -2123 0
-8828 -860 -708 -2125 0
-8828 -860 -707 -2127 0
-8828 -858 -2114 0
-8828 -858 -720 -2115 0
-8828 -858 -718 -2117 0
-8828 -858 -716 -2119 0
-8828 -858 -714 -2121 0
-8828 -858 -712 -2123 0
-8828 -858 -710 -2125 0
-8828 -858 -708 -2127 0
-8828 -858 -707 -2129 0
-8828 -857 -2115 0
-8828 -857 -720 -2117 0
-8828 -857 -718 -2119 0
-8828 -857 -716 -2121 0
-8828 -857 -714 -2123 0
-8828 -857 -712 -2125 0
-8828 -857 -710 -2127 0
-8828 -857 -708 -2129 0
-8828 -857 -707 -2131 0
8828 2131 0
8828 707 2129 0
8828 708 2127 0
8828 710 2125 0
8828 712 2123 0
8828 714 2121 0
8828 716 2119 0
8828 718 2117 0
8828 720 2115 0
8828 857 2129 0
8828 857 707 2127 0
8828 857 708 2125 0
8828 857 710 2123 0
8828 857 712 2121 0
8828 857 714 2119 0
8828 857 716 2117 0
8828 857 718 2115 0
8828 857 720 2114 0
8828 858 2127 0
8828 858 707 2125 0
8828 858 708 2123 0
8828 858 710 2121 0
8828 858 712 2119 0
8828 858 714 2117 0
8828 858 716 2115 0
8828 858 718 2114 0
8828 858 720 0
8828 860 2125 0
8828 860 707 2123 0
8828 860 708 2121 0
8828 860 710 2119 0
8828 860 712 2117 0
8828 860 714 2115 0
8828 860 716 2114 0
8828 860 718 0
8828 860 720 0
8828 862 2123 0
8828 862 707 2121 0
8828 862 708 2119 0
8828 862 710 2117 0
8828 862 712 2115 0
8828 862 714 2114 0
8828 862 716 0
8828 862 718 0
8828 862 720 0
8828 864 2121 0
8828 864 707 2119 0
8828 864 708 2117 0
8828 864 710 2115 0
8828 864 712 2114 0
8828 864 714 0
8828 864 716 0
8828 864 718 0
8828 864 720 0
8828 866 2119 0
8828 866 707 2117 0
8828 866 708 2115 0
8828 866 710 2114 0
8828 866 712 0
8828 866 714 0
8828 866 716 0
8828 866 718 0
8828 866 720 0
8828 868 2117 0
8828 868 707 2115 0
8828 868 708 2114 0
8828 868 710 0
8828 868 712 0
8828 868 714 0
8828 868 716 0
8828 868 718 0
8828 868 720 0
8828 870 2115 0
8828 870 707 2114 0
8828 870 708 0
8828 870 710 0
8828 870 712 0
8828 870 714 0
8828 870 716 0
8828 870 718 0
8828 870 720 0
c (((aux401 + aux402 + shift(x_00006_00006, -1))<=27)=tv=SATLiteral(8829))
-8829 2166 2205 0
-8829 2168 2203 0
-8829 2170 2201 0
-8829 2172 2199 0
-8829 2174 2197 0
-8829 752 2164 2205 0
-8829 752 2166 2203 0
-8829 752 2168 2201 0
-8829 752 2170 2199 0
-8829 752 2172 2197 0
-8829 752 2174 2195 0
-8829 753 2162 2205 0
-8829 753 2164 2203 0
-8829 753 2166 2201 0
-8829 753 2168 2199 0
-8829 753 2170 2197 0
-8829 753 2172 2195 0
-8829 753 2174 2193 0
-8829 755 2160 2205 0
-8829 755 2162 2203 0
-8829 755 2164 2201 0
-8829 755 2166 2199 0
-8829 755 2168 2197 0
-8829 755 2170 2195 0
-8829 755 2172 2193 0
-8829 755 2174 2191 0
-8829 757 2158 2205 0
-8829 757 2160 2203 0
-8829 757 2162 2201 0
-8829 757 2164 2199 0
-8829 757 2166 2197 0
-8829 757 2168 2195 0
-8829 757 2170 2193 0
-8829 757 2172 2191 0
-8829 757 2174 2189 0
-8829 759 2156 2205 0
-8829 759 2158 2203 0
-8829 759 2160 2201 0
-8829 759 2162 2199 0
-8829 759 2164 2197 0
-8829 759 2166 2195 0
-8829 759 2168 2193 0
-8829 759 2170 2191 0
-8829 759 2172 2189 0
-8829 759 2174 2187 0
-8829 761 2154 2205 0
-8829 761 2156 2203 0
-8829 761 2158 2201 0
-8829 761 2160 2199 0
-8829 761 2162 2197 0
-8829 761 2164 2195 0
-8829 761 2166 2193 0
-8829 761 2168 2191 0
-8829 761 2170 2189 0
-8829 761 2172 2187 0
-8829 761 2174 2185 0
-8829 763 2152 2205 0
-8829 763 2154 2203 0
-8829 763 2156 2201 0
-8829 763 2158 2199 0
-8829 763 2160 2197 0
-8829 763 2162 2195 0
-8829 763 2164 2193 0
-8829 763 2166 2191 0
-8829 763 2168 2189 0
-8829 763 2170 2187 0
-8829 763 2172 2185 0
-8829 763 2174 2183 0
-8829 765 2150 2205 0
-8829 765 2152 2203 0
-8829 765 2154 2201 0
-8829 765 2156 2199 0
-8829 765 2158 2197 0
-8829 765 2160 2195 0
-8829 765 2162 2193 0
-8829 765 2164 2191 0
-8829 765 2166 2189 0
-8829 765 2168 2187 0
-8829 765 2170 2185 0
-8829 765 2172 2183 0
-8829 765 2174 2181 0
8829 -2181 0
8829 -2174 -2183 0
8829 -2172 -2185 0
8829 -2170 -2187 0
8829 -2168 -2189 0
8829 -2166 -2191 0
8829 -2164 -2193 0
8829 -2162 -2195 0
8829 -2160 -2197 0
8829 -2158 -2199 0
8829 -2156 -2201 0
8829 -2154 -2203 0
8829 -2152 -2205 0
8829 -2150 0
8829 -2148 0
8829 -2146 0
8829 -2145 0
8829 -765 -2183 0
8829 -765 -2174 -2185 0
8829 -765 -2172 -2187 0
8829 -765 -2170 -2189 0
8829 -765 -2168 -2191 0
8829 -765 -2166 -2193 0
8829 -765 -2164 -2195 0
8829 -765 -2162 -2197 0
8829 -765 -2160 -2199 0
8829 -765 -2158 -2201 0
8829 -765 -2156 -2203 0
8829 -765 -2154 -2205 0
8829 -765 -2152 0
8829 -765 -2150 0
8829 -765 -2148 0
8829 -765 -2146 0
8829 -765 -2145 0
8829 -763 -2185 0
8829 -763 -2174 -2187 0
8829 -763 -2172 -2189 0
8829 -763 -2170 -2191 0
8829 -763 -2168 -2193 0
8829 -763 -2166 -2195 0
8829 -763 -2164 -2197 0
8829 -763 -2162 -2199 0
8829 -763 -2160 -2201 0
8829 -763 -2158 -2203 0
8829 -763 -2156 -2205 0
8829 -763 -2154 0
8829 -763 -2152 0
8829 -763 -2150 0
8829 -763 -2148 0
8829 -763 -2146 0
8829 -763 -2145 0
8829 -761 -2187 0
8829 -761 -2174 -2189 0
8829 -761 -2172 -2191 0
8829 -761 -2170 -2193 0
8829 -761 -2168 -2195 0
8829 -761 -2166 -2197 0
8829 -761 -2164 -2199 0
8829 -761 -2162 -2201 0
8829 -761 -2160 -2203 0
8829 -761 -2158 -2205 0
8829 -761 -2156 0
8829 -761 -2154 0
8829 -761 -2152 0
8829 -761 -2150 0
8829 -761 -2148 0
8829 -761 -2146 0
8829 -761 -2145 0
8829 -759 -2189 0
8829 -759 -2174 -2191 0
8829 -759 -2172 -2193 0
8829 -759 -2170 -2195 0
8829 -759 -2168 -2197 0
8829 -759 -2166 -2199 0
8829 -759 -2164 -2201 0
8829 -759 -2162 -2203 0
8829 -759 -2160 -2205 0
8829 -759 -2158 0
8829 -759 -2156 0
8829 -759 -2154 0
8829 -759 -2152 0
8829 -759 -2150 0
8829 -759 -2148 0
8829 -759 -2146 0
8829 -759 -2145 0
8829 -757 -2191 0
8829 -757 -2174 -2193 0
8829 -757 -2172 -2195 0
8829 -757 -2170 -2197 0
8829 -757 -2168 -2199 0
8829 -757 -2166 -2201 0
8829 -757 -2164 -2203 0
8829 -757 -2162 -2205 0
8829 -757 -2160 0
8829 -757 -2158 0
8829 -757 -2156 0
8829 -757 -2154 0
8829 -757 -2152 0
8829 -757 -2150 0
8829 -757 -2148 0
8829 -757 -2146 0
8829 -757 -2145 0
8829 -755 -2193 0
8829 -755 -2174 -2195 0
8829 -755 -2172 -2197 0
8829 -755 -2170 -2199 0
8829 -755 -2168 -2201 0
8829 -755 -2166 -2203 0
8829 -755 -2164 -2205 0
8829 -755 -2162 0
8829 -755 -2160 0
8829 -755 -2158 0
8829 -755 -2156 0
8829 -755 -2154 0
8829 -755 -2152 0
8829 -755 -2150 0
8829 -755 -2148 0
8829 -755 -2146 0
8829 -755 -2145 0
8829 -753 -2195 0
8829 -753 -2174 -2197 0
8829 -753 -2172 -2199 0
8829 -753 -2170 -2201 0
8829 -753 -2168 -2203 0
8829 -753 -2166 -2205 0
8829 -753 -2164 0
8829 -753 -2162 0
8829 -753 -2160 0
8829 -753 -2158 0
8829 -753 -2156 0
8829 -753 -2154 0
8829 -753 -2152 0
8829 -753 -2150 0
8829 -753 -2148 0
8829 -753 -2146 0
8829 -753 -2145 0
8829 -752 -2197 0
8829 -752 -2174 -2199 0
8829 -752 -2172 -2201 0
8829 -752 -2170 -2203 0
8829 -752 -2168 -2205 0
8829 -752 -2166 0
8829 -752 -2164 0
8829 -752 -2162 0
8829 -752 -2160 0
8829 -752 -2158 0
8829 -752 -2156 0
8829 -752 -2154 0
8829 -752 -2152 0
8829 -752 -2150 0
8829 -752 -2148 0
8829 -752 -2146 0
8829 -752 -2145 0
c ((27<=(aux401 + aux402 + shift(x_00006_00006, -1)))=tv=SATLiteral(8830))
-8830 -2179 0
-8830 -2174 -2181 0
-8830 -2172 -2183 0
-8830 -2170 -2185 0
-8830 -2168 -2187 0
-8830 -2166 -2189 0
-8830 -2164 -2191 0
-8830 -2162 -2193 0
-8830 -2160 -2195 0
-8830 -2158 -2197 0
-8830 -2156 -2199 0
-8830 -2154 -2201 0
-8830 -2152 -2203 0
-8830 -2150 -2205 0
-8830 -2148 0
-8830 -2146 0
-8830 -2145 0
-8830 -765 -2181 0
-8830 -765 -2174 -2183 0
-8830 -765 -2172 -2185 0
-8830 -765 -2170 -2187 0
-8830 -765 -2168 -2189 0
-8830 -765 -2166 -2191 0
-8830 -765 -2164 -2193 0
-8830 -765 -2162 -2195 0
-8830 -765 -2160 -2197 0
-8830 -765 -2158 -2199 0
-8830 -765 -2156 -2201 0
-8830 -765 -2154 -2203 0
-8830 -765 -2152 -2205 0
-8830 -765 -2150 0
-8830 -765 -2148 0
-8830 -765 -2146 0
-8830 -765 -2145 0
-8830 -763 -2183 0
-8830 -763 -2174 -2185 0
-8830 -763 -2172 -2187 0
-8830 -763 -2170 -2189 0
-8830 -763 -2168 -2191 0
-8830 -763 -2166 -2193 0
-8830 -763 -2164 -2195 0
-8830 -763 -2162 -2197 0
-8830 -763 -2160 -2199 0
-8830 -763 -2158 -2201 0
-8830 -763 -2156 -2203 0
-8830 -763 -2154 -2205 0
-8830 -763 -2152 0
-8830 -763 -2150 0
-8830 -763 -2148 0
-8830 -763 -2146 0
-8830 -763 -2145 0
-8830 -761 -2185 0
-8830 -761 -2174 -2187 0
-8830 -761 -2172 -2189 0
-8830 -761 -2170 -2191 0
-8830 -761 -2168 -2193 0
-8830 -761 -2166 -2195 0
-8830 -761 -2164 -2197 0
-8830 -761 -2162 -2199 0
-8830 -761 -2160 -2201 0
-8830 -761 -2158 -2203 0
-8830 -761 -2156 -2205 0
-8830 -761 -2154 0
-8830 -761 -2152 0
-8830 -761 -2150 0
-8830 -761 -2148 0
-8830 -761 -2146 0
-8830 -761 -2145 0
-8830 -759 -2187 0
-8830 -759 -2174 -2189 0
-8830 -759 -2172 -2191 0
-8830 -759 -2170 -2193 0
-8830 -759 -2168 -2195 0
-8830 -759 -2166 -2197 0
-8830 -759 -2164 -2199 0
-8830 -759 -2162 -2201 0
-8830 -759 -2160 -2203 0
-8830 -759 -2158 -2205 0
-8830 -759 -2156 0
-8830 -759 -2154 0
-8830 -759 -2152 0
-8830 -759 -2150 0
-8830 -759 -2148 0
-8830 -759 -2146 0
-8830 -759 -2145 0
-8830 -757 -2189 0
-8830 -757 -2174 -2191 0
-8830 -757 -2172 -2193 0
-8830 -757 -2170 -2195 0
-8830 -757 -2168 -2197 0
-8830 -757 -2166 -2199 0
-8830 -757 -2164 -2201 0
-8830 -757 -2162 -2203 0
-8830 -757 -2160 -2205 0
-8830 -757 -2158 0
-8830 -757 -2156 0
-8830 -757 -2154 0
-8830 -757 -2152 0
-8830 -757 -2150 0
-8830 -757 -2148 0
-8830 -757 -2146 0
-8830 -757 -2145 0
-8830 -755 -2191 0
-8830 -755 -2174 -2193 0
-8830 -755 -2172 -2195 0
-8830 -755 -2170 -2197 0
-8830 -755 -2168 -2199 0
-8830 -755 -2166 -2201 0
-8830 -755 -2164 -2203 0
-8830 -755 -2162 -2205 0
-8830 -755 -2160 0
-8830 -755 -2158 0
-8830 -755 -2156 0
-8830 -755 -2154 0
-8830 -755 -2152 0
-8830 -755 -2150 0
-8830 -755 -2148 0
-8830 -755 -2146 0
-8830 -755 -2145 0
-8830 -753 -2193 0
-8830 -753 -2174 -2195 0
-8830 -753 -2172 -2197 0
-8830 -753 -2170 -2199 0
-8830 -753 -2168 -2201 0
-8830 -753 -2166 -2203 0
-8830 -753 -2164 -2205 0
-8830 -753 -2162 0
-8830 -753 -2160 0
-8830 -753 -2158 0
-8830 -753 -2156 0
-8830 -753 -2154 0
-8830 -753 -2152 0
-8830 -753 -2150 0
-8830 -753 -2148 0
-8830 -753 -2146 0
-8830 -753 -2145 0
-8830 -752 -2195 0
-8830 -752 -2174 -2197 0
-8830 -752 -2172 -2199 0
-8830 -752 -2170 -2201 0
-8830 -752 -2168 -2203 0
-8830 -752 -2166 -2205 0
-8830 -752 -2164 0
-8830 -752 -2162 0
-8830 -752 -2160 0
-8830 -752 -2158 0
-8830 -752 -2156 0
-8830 -752 -2154 0
-8830 -752 -2152 0
-8830 -752 -2150 0
-8830 -752 -2148 0
-8830 -752 -2146 0
-8830 -752 -2145 0
8830 2164 2205 0
8830 2166 2203 0
8830 2168 2201 0
8830 2170 2199 0
8830 2172 2197 0
8830 2174 2195 0
8830 752 2162 2205 0
8830 752 2164 2203 0
8830 752 2166 2201 0
8830 752 2168 2199 0
8830 752 2170 2197 0
8830 752 2172 2195 0
8830 752 2174 2193 0
8830 753 2160 2205 0
8830 753 2162 2203 0
8830 753 2164 2201 0
8830 753 2166 2199 0
8830 753 2168 2197 0
8830 753 2170 2195 0
8830 753 2172 2193 0
8830 753 2174 2191 0
8830 755 2158 2205 0
8830 755 2160 2203 0
8830 755 2162 2201 0
8830 755 2164 2199 0
8830 755 2166 2197 0
8830 755 2168 2195 0
8830 755 2170 2193 0
8830 755 2172 2191 0
8830 755 2174 2189 0
8830 757 2156 2205 0
8830 757 2158 2203 0
8830 757 2160 2201 0
8830 757 2162 2199 0
8830 757 2164 2197 0
8830 757 2166 2195 0
8830 757 2168 2193 0
8830 757 2170 2191 0
8830 757 2172 2189 0
8830 757 2174 2187 0
8830 759 2154 2205 0
8830 759 2156 2203 0
8830 759 2158 2201 0
8830 759 2160 2199 0
8830 759 2162 2197 0
8830 759 2164 2195 0
8830 759 2166 2193 0
8830 759 2168 2191 0
8830 759 2170 2189 0
8830 759 2172 2187 0
8830 759 2174 2185 0
8830 761 2152 2205 0
8830 761 2154 2203 0
8830 761 2156 2201 0
8830 761 2158 2199 0
8830 761 2160 2197 0
8830 761 2162 2195 0
8830 761 2164 2193 0
8830 761 2166 2191 0
8830 761 2168 2189 0
8830 761 2170 2187 0
8830 761 2172 2185 0
8830 761 2174 2183 0
8830 763 2150 2205 0
8830 763 2152 2203 0
8830 763 2154 2201 0
8830 763 2156 2199 0
8830 763 2158 2197 0
8830 763 2160 2195 0
8830 763 2162 2193 0
8830 763 2164 2191 0
8830 763 2166 2189 0
8830 763 2168 2187 0
8830 763 2170 2185 0
8830 763 2172 2183 0
8830 763 2174 2181 0
8830 765 2148 2205 0
8830 765 2150 2203 0
8830 765 2152 2201 0
8830 765 2154 2199 0
8830 765 2156 2197 0
8830 765 2158 2195 0
8830 765 2160 2193 0
8830 765 2162 2191 0
8830 765 2164 2189 0
8830 765 2166 2187 0
8830 765 2168 2185 0
8830 765 2170 2183 0
8830 765 2172 2181 0
8830 765 2174 2179 0
c (((x_00007_00009 + x_00006_00009)<=10)=tv=SATLiteral(8831))
-8831 932 810 0
-8831 933 808 0
-8831 935 806 0
-8831 937 804 0
-8831 939 802 0
-8831 941 800 0
-8831 943 798 0
-8831 945 797 0
8831 -797 0
8831 -945 -798 0
8831 -943 -800 0
8831 -941 -802 0
8831 -939 -804 0
8831 -937 -806 0
8831 -935 -808 0
8831 -933 -810 0
8831 -932 0
c ((10<=(x_00007_00009 + x_00006_00009))=tv=SATLiteral(8832))
-8832 -945 -797 0
-8832 -943 -798 0
-8832 -941 -800 0
-8832 -939 -802 0
-8832 -937 -804 0
-8832 -935 -806 0
-8832 -933 -808 0
-8832 -932 -810 0
8832 810 0
8832 932 808 0
8832 933 806 0
8832 935 804 0
8832 937 802 0
8832 939 800 0
8832 941 798 0
8832 943 797 0
8832 945 0
c (((aux403 + aux404 + aux405)<=27)=tv=SATLiteral(8833))
-8833 2259 2298 0
-8833 2261 2296 0
-8833 2263 2294 0
-8833 2265 2292 0
-8833 2267 2290 0
-8833 2207 2257 2298 0
-8833 2207 2259 2296 0
-8833 2207 2261 2294 0
-8833 2207 2263 2292 0
-8833 2207 2265 2290 0
-8833 2207 2267 2288 0
-8833 2208 2255 2298 0
-8833 2208 2257 2296 0
-8833 2208 2259 2294 0
-8833 2208 2261 2292 0
-8833 2208 2263 2290 0
-8833 2208 2265 2288 0
-8833 2208 2267 2286 0
-8833 2210 2253 2298 0
-8833 2210 2255 2296 0
-8833 2210 2257 2294 0
-8833 2210 2259 2292 0
-8833 2210 2261 2290 0
-8833 2210 2263 2288 0
-8833 2210 2265 2286 0
-8833 2210 2267 2284 0
-8833 2212 2251 2298 0
-8833 2212 2253 2296 0
-8833 2212 2255 2294 0
-8833 2212 2257 2292 0
-8833 2212 2259 2290 0
-8833 2212 2261 2288 0
-8833 2212 2263 2286 0
-8833 2212 2265 2284 0
-8833 2212 2267 2282 0
-8833 2214 2249 2298 0
-8833 2214 2251 2296 0
-8833 2214 2253 2294 0
-8833 2214 2255 2292 0
-8833 2214 2257 2290 0
-8833 2214 2259 2288 0
-8833 2214 2261 2286 0
-8833 2214 2263 2284 0
-8833 2214 2265 2282 0
-8833 2214 2267 2280 0
-8833 2216 2247 2298 0
-8833 2216 2249 2296 0
-8833 2216 2251 2294 0
-8833 2216 2253 2292 0
-8833 2216 2255 2290 0
-8833 2216 2257 2288 0
-8833 2216 2259 2286 0
-8833 2216 2261 2284 0
-8833 2216 2263 2282 0
-8833 2216 2265 2280 0
-8833 2216 2267 2278 0
-8833 2218 2245 2298 0
-8833 2218 2247 2296 0
-8833 2218 2249 2294 0
-8833 2218 2251 2292 0
-8833 2218 2253 2290 0
-8833 2218 2255 2288 0
-8833 2218 2257 2286 0
-8833 2218 2259 2284 0
-8833 2218 2261 2282 0
-8833 2218 2263 2280 0
-8833 2218 2265 2278 0
-8833 2218 2267 2276 0
-8833 2220 2243 2298 0
-8833 2220 2245 2296 0
-8833 2220 2247 2294 0
-8833 2220 2249 2292 0
-8833 2220 2251 2290 0
-8833 2220 2253 2288 0
-8833 2220 2255 2286 0
-8833 2220 2257 2284 0
-8833 2220 2259 2282 0
-8833 2220 2261 2280 0
-8833 2220 2263 2278 0
-8833 2220 2265 2276 0
-8833 2220 2267 2274 0
-8833 2222 2241 2298 0
-8833 2222 2243 2296 0
-8833 2222 2245 2294 0
-8833 2222 2247 2292 0
-8833 2222 2249 2290 0
-8833 2222 2251 2288 0
-8833 2222 2253 2286 0
-8833 2222 2255 2284 0
-8833 2222 2257 2282 0
-8833 2222 2259 2280 0
-8833 2222 2261 2278 0
-8833 2222 2263 2276 0
-8833 2222 2265 2274 0
-8833 2222 2267 2272 0
-8833 2224 2239 2298 0
-8833 2224 2241 2296 0
-8833 2224 2243 2294 0
-8833 2224 2245 2292 0
-8833 2224 2247 2290 0
-8833 2224 2249 2288 0
-8833 2224 2251 2286 0
-8833 2224 2253 2284 0
-8833 2224 2255 2282 0
-8833 2224 2257 2280 0
-8833 2224 2259 2278 0
-8833 2224 2261 2276 0
-8833 2224 2263 2274 0
-8833 2224 2265 2272 0
-8833 2224 2267 2270 0
-8833 2226 2238 2298 0
-8833 2226 2239 2296 0
-8833 2226 2241 2294 0
-8833 2226 2243 2292 0
-8833 2226 2245 2290 0
-8833 2226 2247 2288 0
-8833 2226 2249 2286 0
-8833 2226 2251 2284 0
-8833 2226 2253 2282 0
-8833 2226 2255 2280 0
-8833 2226 2257 2278 0
-8833 2226 2259 2276 0
-8833 2226 2261 2274 0
-8833 2226 2263 2272 0
-8833 2226 2265 2270 0
-8833 2226 2267 2269 0
-8833 2228 2298 0
-8833 2228 2238 2296 0
-8833 2228 2239 2294 0
-8833 2228 2241 2292 0
-8833 2228 2243 2290 0
-8833 2228 2245 2288 0
-8833 2228 2247 2286 0
-8833 2228 2249 2284 0
-8833 2228 2251 2282 0
-8833 2228 2253 2280 0
-8833 2228 2255 2278 0
-8833 2228 2257 2276 0
-8833 2228 2259 2274 0
-8833 2228 2261 2272 0
-8833 2228 2263 2270 0
-8833 2228 2265 2269 0
-8833 2228 2267 0
-8833 2230 2296 0
-8833 2230 2238 2294 0
-8833 2230 2239 2292 0
-8833 2230 2241 2290 0
-8833 2230 2243 2288 0
-8833 2230 2245 2286 0
-8833 2230 2247 2284 0
-8833 2230 2249 2282 0
-8833 2230 2251 2280 0
-8833 2230 2253 2278 0
-8833 2230 2255 2276 0
-8833 2230 2257 2274 0
-8833 2230 2259 2272 0
-8833 2230 2261 2270 0
-8833 2230 2263 2269 0
-8833 2230 2265 0
-8833 2230 2267 0
-8833 2232 2294 0
-8833 2232 2238 2292 0
-8833 2232 2239 2290 0
-8833 2232 2241 2288 0
-8833 2232 2243 2286 0
-8833 2232 2245 2284 0
-8833 2232 2247 2282 0
-8833 2232 2249 2280 0
-8833 2232 2251 2278 0
-8833 2232 2253 2276 0
-8833 2232 2255 2274 0
-8833 2232 2257 2272 0
-8833 2232 2259 2270 0
-8833 2232 2261 2269 0
-8833 2232 2263 0
-8833 2232 2265 0
-8833 2232 2267 0
-8833 2234 2292 0
-8833 2234 2238 2290 0
-8833 2234 2239 2288 0
-8833 2234 2241 2286 0
-8833 2234 2243 2284 0
-8833 2234 2245 2282 0
-8833 2234 2247 2280 0
-8833 2234 2249 2278 0
-8833 2234 2251 2276 0
-8833 2234 2253 2274 0
-8833 2234 2255 2272 0
-8833 2234 2257 2270 0
-8833 2234 2259 2269 0
-8833 2234 2261 0
-8833 2234 2263 0
-8833 2234 2265 0
-8833 2234 2267 0
-8833 2236 2290 0
-8833 2236 2238 2288 0
-8833 2236 2239 2286 0
-8833 2236 2241 2284 0
-8833 2236 2243 2282 0
-8833 2236 2245 2280 0
-8833 2236 2247 2278 0
-8833 2236 2249 2276 0
-8833 2236 2251 2274 0
-8833 2236 2253 2272 0
-8833 2236 2255 2270 0
-8833 2236 2257 2269 0
-8833 2236 2259 0
-8833 2236 2261 0
-8833 2236 2263 0
-8833 2236 2265 0
-8833 2236 2267 0
8833 -2259 -2269 0
8833 -2257 -2270 0
8833 -2255 -2272 0
8833 -2253 -2274 0
8833 -2251 -2276 0
8833 -2249 -2278 0
8833 -2247 -2280 0
8833 -2245 -2282 0
8833 -2243 -2284 0
8833 -2241 -2286 0
8833 -2239 -2288 0
8833 -2238 -2290 0
8833 -2236 -2261 -2269 0
8833 -2236 -2259 -2270 0
8833 -2236 -2257 -2272 0
8833 -2236 -2255 -2274 0
8833 -2236 -2253 -2276 0
8833 -2236 -2251 -2278 0
8833 -2236 -2249 -2280 0
8833 -2236 -2247 -2282 0
8833 -2236 -2245 -2284 0
8833 -2236 -2243 -2286 0
8833 -2236 -2241 -2288 0
8833 -2236 -2239 -2290 0
8833 -2236 -2238 -2292 0
8833 -2234 -2263 -2269 0
8833 -2234 -2261 -2270 0
8833 -2234 -2259 -2272 0
8833 -2234 -2257 -2274 0
8833 -2234 -2255 -2276 0
8833 -2234 -2253 -2278 0
8833 -2234 -2251 -2280 0
8833 -2234 -2249 -2282 0
8833 -2234 -2247 -2284 0
8833 -2234 -2245 -2286 0
8833 -2234 -2243 -2288 0
8833 -2234 -2241 -2290 0
8833 -2234 -2239 -2292 0
8833 -2234 -2238 -2294 0
8833 -2232 -2265 -2269 0
8833 -2232 -2263 -2270 0
8833 -2232 -2261 -2272 0
8833 -2232 -2259 -2274 0
8833 -2232 -2257 -2276 0
8833 -2232 -2255 -2278 0
8833 -2232 -2253 -2280 0
8833 -2232 -2251 -2282 0
8833 -2232 -2249 -2284 0
8833 -2232 -2247 -2286 0
8833 -2232 -2245 -2288 0
8833 -2232 -2243 -2290 0
8833 -2232 -2241 -2292 0
8833 -2232 -2239 -2294 0
8833 -2232 -2238 -2296 0
8833 -2230 -2267 -2269 0
8833 -2230 -2265 -2270 0
8833 -2230 -2263 -2272 0
8833 -2230 -2261 -2274 0
8833 -2230 -2259 -2276 0
8833 -2230 -2257 -2278 0
8833 -2230 -2255 -2280 0
8833 -2230 -2253 -2282 0
8833 -2230 -2251 -2284 0
8833 -2230 -2249 -2286 0
8833 -2230 -2247 -2288 0
8833 -2230 -2245 -2290 0
8833 -2230 -2243 -2292 0
8833 -2230 -2241 -2294 0
8833 -2230 -2239 -2296 0
8833 -2230 -2238 -2298 0
8833 -2228 -2269 0
8833 -2228 -2267 -2270 0
8833 -2228 -2265 -2272 0
8833 -2228 -2263 -2274 0
8833 -2228 -2261 -2276 0
8833 -2228 -2259 -2278 0
8833 -2228 -2257 -2280 0
8833 -2228 -2255 -2282 0
8833 -2228 -2253 -2284 0
8833 -2228 -2251 -2286 0
8833 -2228 -2249 -2288 0
8833 -2228 -2247 -2290 0
8833 -2228 -2245 -2292 0
8833 -2228 -2243 -2294 0
8833 -2228 -2241 -2296 0
8833 -2228 -2239 -2298 0
8833 -2228 -2238 0
8833 -2226 -2270 0
8833 -2226 -2267 -2272 0
8833 -2226 -2265 -2274 0
8833 -2226 -2263 -2276 0
8833 -2226 -2261 -2278 0
8833 -2226 -2259 -2280 0
8833 -2226 -2257 -2282 0
8833 -2226 -2255 -2284 0
8833 -2226 -2253 -2286 0
8833 -2226 -2251 -2288 0
8833 -2226 -2249 -2290 0
8833 -2226 -2247 -2292 0
8833 -2226 -2245 -2294 0
8833 -2226 -2243 -2296 0
8833 -2226 -2241 -2298 0
8833 -2226 -2239 0
8833 -2226 -2238 0
8833 -2224 -2272 0
8833 -2224 -2267 -2274 0
8833 -2224 -2265 -2276 0
8833 -2224 -2263 -2278 0
8833 -2224 -2261 -2280 0
8833 -2224 -2259 -2282 0
8833 -2224 -2257 -2284 0
8833 -2224 -2255 -2286 0
8833 -2224 -2253 -2288 0
8833 -2224 -2251 -2290 0
8833 -2224 -2249 -2292 0
8833 -2224 -2247 -2294 0
8833 -2224 -2245 -2296 0
8833 -2224 -2243 -2298 0
8833 -2224 -2241 0
8833 -2224 -2239 0
8833 -2224 -2238 0
8833 -2222 -2274 0
8833 -2222 -2267 -2276 0
8833 -2222 -2265 -2278 0
8833 -2222 -2263 -2280 0
8833 -2222 -2261 -2282 0
8833 -2222 -2259 -2284 0
8833 -2222 -2257 -2286 0
8833 -2222 -2255 -2288 0
8833 -2222 -2253 -2290 0
8833 -2222 -2251 -2292 0
8833 -2222 -2249 -2294 0
8833 -2222 -2247 -2296 0
8833 -2222 -2245 -2298 0
8833 -2222 -2243 0
8833 -2222 -2241 0
8833 -2222 -2239 0
8833 -2222 -2238 0
8833 -2220 -2276 0
8833 -2220 -2267 -2278 0
8833 -2220 -2265 -2280 0
8833 -2220 -2263 -2282 0
8833 -2220 -2261 -2284 0
8833 -2220 -2259 -2286 0
8833 -2220 -2257 -2288 0
8833 -2220 -2255 -2290 0
8833 -2220 -2253 -2292 0
8833 -2220 -2251 -2294 0
8833 -2220 -2249 -2296 0
8833 -2220 -2247 -2298 0
8833 -2220 -2245 0
8833 -2220 -2243 0
8833 -2220 -2241 0
8833 -2220 -2239 0
8833 -2220 -2238 0
8833 -2218 -2278 0
8833 -2218 -2267 -2280 0
8833 -2218 -2265 -2282 0
8833 -2218 -2263 -2284 0
8833 -2218 -2261 -2286 0
8833 -2218 -2259 -2288 0
8833 -2218 -2257 -2290 0
8833 -2218 -2255 -2292 0
8833 -2218 -2253 -2294 0
8833 -2218 -2251 -2296 0
8833 -2218 -2249 -2298 0
8833 -2218 -2247 0
8833 -2218 -2245 0
8833 -2218 -2243 0
8833 -2218 -2241 0
8833 -2218 -2239 0
8833 -2218 -2238 0
8833 -2216 -2280 0
8833 -2216 -2267 -2282 0
8833 -2216 -2265 -2284 0
8833 -2216 -2263 -2286 0
8833 -2216 -2261 -2288 0
8833 -2216 -2259 -2290 0
8833 -2216 -2257 -2292 0
8833 -2216 -2255 -2294 0
8833 -2216 -2253 -2296 0
8833 -2216 -2251 -2298 0
8833 -2216 -2249 0
8833 -2216 -2247 0
8833 -2216 -2245 0
8833 -2216 -2243 0
8833 -2216 -2241 0
8833 -2216 -2239 0
8833 -2216 -2238 0
8833 -2214 -2282 0
8833 -2214 -2267 -2284 0
8833 -2214 -2265 -2286 0
8833 -2214 -2263 -2288 0
8833 -2214 -2261 -2290 0
8833 -2214 -2259 -2292 0
8833 -2214 -2257 -2294 0
8833 -2214 -2255 -2296 0
8833 -2214 -2253 -2298 0
8833 -2214 -2251 0
8833 -2214 -2249 0
8833 -2214 -2247 0
8833 -2214 -2245 0
8833 -2214 -2243 0
8833 -2214 -2241 0
8833 -2214 -2239 0
8833 -2214 -2238 0
8833 -2212 -2284 0
8833 -2212 -2267 -2286 0
8833 -2212 -2265 -2288 0
8833 -2212 -2263 -2290 0
8833 -2212 -2261 -2292 0
8833 -2212 -2259 -2294 0
8833 -2212 -2257 -2296 0
8833 -2212 -2255 -2298 0
8833 -2212 -2253 0
8833 -2212 -2251 0
8833 -2212 -2249 0
8833 -2212 -2247 0
8833 -2212 -2245 0
8833 -2212 -2243 0
8833 -2212 -2241 0
8833 -2212 -2239 0
8833 -2212 -2238 0
8833 -2210 -2286 0
8833 -2210 -2267 -2288 0
8833 -2210 -2265 -2290 0
8833 -2210 -2263 -2292 0
8833 -2210 -2261 -2294 0
8833 -2210 -2259 -2296 0
8833 -2210 -2257 -2298 0
8833 -2210 -2255 0
8833 -2210 -2253 0
8833 -2210 -2251 0
8833 -2210 -2249 0
8833 -2210 -2247 0
8833 -2210 -2245 0
8833 -2210 -2243 0
8833 -2210 -2241 0
8833 -2210 -2239 0
8833 -2210 -2238 0
8833 -2208 -2288 0
8833 -2208 -2267 -2290 0
8833 -2208 -2265 -2292 0
8833 -2208 -2263 -2294 0
8833 -2208 -2261 -2296 0
8833 -2208 -2259 -2298 0
8833 -2208 -2257 0
8833 -2208 -2255 0
8833 -2208 -2253 0
8833 -2208 -2251 0
8833 -2208 -2249 0
8833 -2208 -2247 0
8833 -2208 -2245 0
8833 -2208 -2243 0
8833 -2208 -2241 0
8833 -2208 -2239 0
8833 -2208 -2238 0
8833 -2207 -2290 0
8833 -2207 -2267 -2292 0
8833 -2207 -2265 -2294 0
8833 -2207 -2263 -2296 0
8833 -2207 -2261 -2298 0
8833 -2207 -2259 0
8833 -2207 -2257 0
8833 -2207 -2255 0
8833 -2207 -2253 0
8833 -2207 -2251 0
8833 -2207 -2249 0
8833 -2207 -2247 0
8833 -2207 -2245 0
8833 -2207 -2243 0
8833 -2207 -2241 0
8833 -2207 -2239 0
8833 -2207 -2238 0
c ((27<=(aux403 + aux404 + aux405))=tv=SATLiteral(8834))
-8834 -2257 -2269 0
-8834 -2255 -2270 0
-8834 -2253 -2272 0
-8834 -2251 -2274 0
-8834 -2249 -2276 0
-8834 -2247 -2278 0
-8834 -2245 -2280 0
-8834 -2243 -2282 0
-8834 -2241 -2284 0
-8834 -2239 -2286 0
-8834 -2238 -2288 0
-8834 -2236 -2259 -2269 0
-8834 -2236 -2257 -2270 0
-8834 -2236 -2255 -2272 0
-8834 -2236 -2253 -2274 0
-8834 -2236 -2251 -2276 0
-8834 -2236 -2249 -2278 0
-8834 -2236 -2247 -2280 0
-8834 -2236 -2245 -2282 0
-8834 -2236 -2243 -2284 0
-8834 -2236 -2241 -2286 0
-8834 -2236 -2239 -2288 0
-8834 -2236 -2238 -2290 0
-8834 -2234 -2261 -2269 0
-8834 -2234 -2259 -2270 0
-8834 -2234 -2257 -2272 0
-8834 -2234 -2255 -2274 0
-8834 -2234 -2253 -2276 0
-8834 -2234 -2251 -2278 0
-8834 -2234 -2249 -2280 0
-8834 -2234 -2247 -2282 0
-8834 -2234 -2245 -2284 0
-8834 -2234 -2243 -2286 0
-8834 -2234 -2241 -2288 0
-8834 -2234 -2239 -2290 0
-8834 -2234 -2238 -2292 0
-8834 -2232 -2263 -2269 0
-8834 -2232 -2261 -2270 0
-8834 -2232 -2259 -2272 0
-8834 -2232 -2257 -2274 0
-8834 -2232 -2255 -2276 0
-8834 -2232 -2253 -2278 0
-8834 -2232 -2251 -2280 0
-8834 -2232 -2249 -2282 0
-8834 -2232 -2247 -2284 0
-8834 -2232 -2245 -2286 0
-8834 -2232 -2243 -2288 0
-8834 -2232 -2241 -2290 0
-8834 -2232 -2239 -2292 0
-8834 -2232 -2238 -2294 0
-8834 -2230 -2265 -2269 0
-8834 -2230 -2263 -2270 0
-8834 -2230 -2261 -2272 0
-8834 -2230 -2259 -2274 0
-8834 -2230 -2257 -2276 0
-8834 -2230 -2255 -2278 0
-8834 -2230 -2253 -2280 0
-8834 -2230 -2251 -2282 0
-8834 -2230 -2249 -2284 0
-8834 -2230 -2247 -2286 0
-8834 -2230 -2245 -2288 0
-8834 -2230 -2243 -2290 0
-8834 -2230 -2241 -2292 0
-8834 -2230 -2239 -2294 0
-8834 -2230 -2238 -2296 0
-8834 -2228 -2267 -2269 0
-8834 -2228 -2265 -2270 0
-8834 -2228 -2263 -2272 0
-8834 -2228 -2261 -2274 0
-8834 -2228 -2259 -2276 0
-8834 -2228 -2257 -2278 0
-8834 -2228 -2255 -2280 0
-8834 -2228 -2253 -2282 0
-8834 -2228 -2251 -2284 0
-8834 -2228 -2249 -2286 0
-8834 -2228 -2247 -2288 0
-8834 -2228 -2245 -2290 0
-8834 -2228 -2243 -2292 0
-8834 -2228 -2241 -2294 0
-8834 -2228 -2239 -2296 0
-8834 -2228 -2238 -2298 0
-8834 -2226 -2269 0
-8834 -2226 -2267 -2270 0
-8834 -2226 -2265 -2272 0
-8834 -2226 -2263 -2274 0
-8834 -2226 -2261 -2276 0
-8834 -2226 -2259 -2278 0
-8834 -2226 -2257 -2280 0
-8834 -2226 -2255 -2282 0
-8834 -2226 -2253 -2284 0
-8834 -2226 -2251 -2286 0
-8834 -2226 -2249 -2288 0
-8834 -2226 -2247 -2290 0
-8834 -2226 -2245 -2292 0
-8834 -2226 -2243 -2294 0
-8834 -2226 -2241 -2296 0
-8834 -2226 -2239 -2298 0
-8834 -2226 -2238 0
-8834 -2224 -2270 0
-8834 -2224 -2267 -2272 0
-8834 -2224 -2265 -2274 0
-8834 -2224 -2263 -2276 0
-8834 -2224 -2261 -2278 0
-8834 -2224 -2259 -2280 0
-8834 -2224 -2257 -2282 0
-8834 -2224 -2255 -2284 0
-8834 -2224 -2253 -2286 0
-8834 -2224 -2251 -2288 0
-8834 -2224 -2249 -2290 0
-8834 -2224 -2247 -2292 0
-8834 -2224 -2245 -2294 0
-8834 -2224 -2243 -2296 0
-8834 -2224 -2241 -2298 0
-8834 -2224 -2239 0
-8834 -2224 -2238 0
-8834 -2222 -2272 0
-8834 -2222 -2267 -2274 0
-8834 -2222 -2265 -2276 0
-8834 -2222 -2263 -2278 0
-8834 -2222 -2261 -2280 0
-8834 -2222 -2259 -2282 0
-8834 -2222 -2257 -2284 0
-8834 -2222 -2255 -2286 0
-8834 -2222 -2253 -2288 0
-8834 -2222 -2251 -2290 0
-8834 -2222 -2249 -2292 0
-8834 -2222 -2247 -2294 0
-8834 -2222 -2245 -2296 0
-8834 -2222 -2243 -2298 0
-8834 -2222 -2241 0
-8834 -2222 -2239 0
-8834 -2222 -2238 0
-8834 -2220 -2274 0
-8834 -2220 -2267 -2276 0
-8834 -2220 -2265 -2278 0
-8834 -2220 -2263 -2280 0
-8834 -2220 -2261 -2282 0
-8834 -2220 -2259 -2284 0
-8834 -2220 -2257 -2286 0
-8834 -2220 -2255 -2288 0
-8834 -2220 -2253 -2290 0
-8834 -2220 -2251 -2292 0
-8834 -2220 -2249 -2294 0
-8834 -2220 -2247 -2296 0
-8834 -2220 -2245 -2298 0
-8834 -2220 -2243 0
-8834 -2220 -2241 0
-8834 -2220 -2239 0
-8834 -2220 -2238 0
-8834 -2218 -2276 0
-8834 -2218 -2267 -2278 0
-8834 -2218 -2265 -2280 0
-8834 -2218 -2263 -2282 0
-8834 -2218 -2261 -2284 0
-8834 -2218 -2259 -2286 0
-8834 -2218 -2257 -2288 0
-8834 -2218 -2255 -2290 0
-8834 -2218 -2253 -2292 0
-8834 -2218 -2251 -2294 0
-8834 -2218 -2249 -2296 0
-8834 -2218 -2247 -2298 0
-8834 -2218 -2245 0
-8834 -2218 -2243 0
-8834 -2218 -2241 0
-8834 -2218 -2239 0
-8834 -2218 -2238 0
-8834 -2216 -2278 0
-8834 -2216 -2267 -2280 0
-8834 -2216 -2265 -2282 0
-8834 -2216 -2263 -2284 0
-8834 -2216 -2261 -2286 0
-8834 -2216 -2259 -2288 0
-8834 -2216 -2257 -2290 0
-8834 -2216 -2255 -2292 0
-8834 -2216 -2253 -2294 0
-8834 -2216 -2251 -2296 0
-8834 -2216 -2249 -2298 0
-8834 -2216 -2247 0
-8834 -2216 -2245 0
-8834 -2216 -2243 0
-8834 -2216 -2241 0
-8834 -2216 -2239 0
-8834 -2216 -2238 0
-8834 -2214 -2280 0
-8834 -2214 -2267 -2282 0
-8834 -2214 -2265 -2284 0
-8834 -2214 -2263 -2286 0
-8834 -2214 -2261 -2288 0
-8834 -2214 -2259 -2290 0
-8834 -2214 -2257 -2292 0
-8834 -2214 -2255 -2294 0
-8834 -2214 -2253 -2296 0
-8834 -2214 -2251 -2298 0
-8834 -2214 -2249 0
-8834 -2214 -2247 0
-8834 -2214 -2245 0
-8834 -2214 -2243 0
-8834 -2214 -2241 0
-8834 -2214 -2239 0
-8834 -2214 -2238 0
-8834 -2212 -2282 0
-8834 -2212 -2267 -2284 0
-8834 -2212 -2265 -2286 0
-8834 -2212 -2263 -2288 0
-8834 -2212 -2261 -2290 0
-8834 -2212 -2259 -2292 0
-8834 -2212 -2257 -2294 0
-8834 -2212 -2255 -2296 0
-8834 -2212 -2253 -2298 0
-8834 -2212 -2251 0
-8834 -2212 -2249 0
-8834 -2212 -2247 0
-8834 -2212 -2245 0
-8834 -2212 -2243 0
-8834 -2212 -2241 0
-8834 -2212 -2239 0
-8834 -2212 -2238 0
-8834 -2210 -2284 0
-8834 -2210 -2267 -2286 0
-8834 -2210 -2265 -2288 0
-8834 -2210 -2263 -2290 0
-8834 -2210 -2261 -2292 0
-8834 -2210 -2259 -2294 0
-8834 -2210 -2257 -2296 0
-8834 -2210 -2255 -2298 0
-8834 -2210 -2253 0
-8834 -2210 -2251 0
-8834 -2210 -2249 0
-8834 -2210 -2247 0
-8834 -2210 -2245 0
-8834 -2210 -2243 0
-8834 -2210 -2241 0
-8834 -2210 -2239 0
-8834 -2210 -2238 0
-8834 -2208 -2286 0
-8834 -2208 -2267 -2288 0
-8834 -2208 -2265 -2290 0
-8834 -2208 -2263 -2292 0
-8834 -2208 -2261 -2294 0
-8834 -2208 -2259 -2296 0
-8834 -2208 -2257 -2298 0
-8834 -2208 -2255 0
-8834 -2208 -2253 0
-8834 -2208 -2251 0
-8834 -2208 -2249 0
-8834 -2208 -2247 0
-8834 -2208 -2245 0
-8834 -2208 -2243 0
-8834 -2208 -2241 0
-8834 -2208 -2239 0
-8834 -2208 -2238 0
-8834 -2207 -2288 0
-8834 -2207 -2267 -2290 0
-8834 -2207 -2265 -2292 0
-8834 -2207 -2263 -2294 0
-8834 -2207 -2261 -2296 0
-8834 -2207 -2259 -2298 0
-8834 -2207 -2257 0
-8834 -2207 -2255 0
-8834 -2207 -2253 0
-8834 -2207 -2251 0
-8834 -2207 -2249 0
-8834 -2207 -2247 0
-8834 -2207 -2245 0
-8834 -2207 -2243 0
-8834 -2207 -2241 0
-8834 -2207 -2239 0
-8834 -2207 -2238 0
8834 2257 2298 0
8834 2259 2296 0
8834 2261 2294 0
8834 2263 2292 0
8834 2265 2290 0
8834 2267 2288 0
8834 2207 2255 2298 0
8834 2207 2257 2296 0
8834 2207 2259 2294 0
8834 2207 2261 2292 0
8834 2207 2263 2290 0
8834 2207 2265 2288 0
8834 2207 2267 2286 0
8834 2208 2253 2298 0
8834 2208 2255 2296 0
8834 2208 2257 2294 0
8834 2208 2259 2292 0
8834 2208 2261 2290 0
8834 2208 2263 2288 0
8834 2208 2265 2286 0
8834 2208 2267 2284 0
8834 2210 2251 2298 0
8834 2210 2253 2296 0
8834 2210 2255 2294 0
8834 2210 2257 2292 0
8834 2210 2259 2290 0
8834 2210 2261 2288 0
8834 2210 2263 2286 0
8834 2210 2265 2284 0
8834 2210 2267 2282 0
8834 2212 2249 2298 0
8834 2212 2251 2296 0
8834 2212 2253 2294 0
8834 2212 2255 2292 0
8834 2212 2257 2290 0
8834 2212 2259 2288 0
8834 2212 2261 2286 0
8834 2212 2263 2284 0
8834 2212 2265 2282 0
8834 2212 2267 2280 0
8834 2214 2247 2298 0
8834 2214 2249 2296 0
8834 2214 2251 2294 0
8834 2214 2253 2292 0
8834 2214 2255 2290 0
8834 2214 2257 2288 0
8834 2214 2259 2286 0
8834 2214 2261 2284 0
8834 2214 2263 2282 0
8834 2214 2265 2280 0
8834 2214 2267 2278 0
8834 2216 2245 2298 0
8834 2216 2247 2296 0
8834 2216 2249 2294 0
8834 2216 2251 2292 0
8834 2216 2253 2290 0
8834 2216 2255 2288 0
8834 2216 2257 2286 0
8834 2216 2259 2284 0
8834 2216 2261 2282 0
8834 2216 2263 2280 0
8834 2216 2265 2278 0
8834 2216 2267 2276 0
8834 2218 2243 2298 0
8834 2218 2245 2296 0
8834 2218 2247 2294 0
8834 2218 2249 2292 0
8834 2218 2251 2290 0
8834 2218 2253 2288 0
8834 2218 2255 2286 0
8834 2218 2257 2284 0
8834 2218 2259 2282 0
8834 2218 2261 2280 0
8834 2218 2263 2278 0
8834 2218 2265 2276 0
8834 2218 2267 2274 0
8834 2220 2241 2298 0
8834 2220 2243 2296 0
8834 2220 2245 2294 0
8834 2220 2247 2292 0
8834 2220 2249 2290 0
8834 2220 2251 2288 0
8834 2220 2253 2286 0
8834 2220 2255 2284 0
8834 2220 2257 2282 0
8834 2220 2259 2280 0
8834 2220 2261 2278 0
8834 2220 2263 2276 0
8834 2220 2265 2274 0
8834 2220 2267 2272 0
8834 2222 2239 2298 0
8834 2222 2241 2296 0
8834 2222 2243 2294 0
8834 2222 2245 2292 0
8834 2222 2247 2290 0
8834 2222 2249 2288 0
8834 2222 2251 2286 0
8834 2222 2253 2284 0
8834 2222 2255 2282 0
8834 2222 2257 2280 0
8834 2222 2259 2278 0
8834 2222 2261 2276 0
8834 2222 2263 2274 0
8834 2222 2265 2272 0
8834 2222 2267 2270 0
8834 2224 2238 2298 0
8834 2224 2239 2296 0
8834 2224 2241 2294 0
8834 2224 2243 2292 0
8834 2224 2245 2290 0
8834 2224 2247 2288 0
8834 2224 2249 2286 0
8834 2224 2251 2284 0
8834 2224 2253 2282 0
8834 2224 2255 2280 0
8834 2224 2257 2278 0
8834 2224 2259 2276 0
8834 2224 2261 2274 0
8834 2224 2263 2272 0
8834 2224 2265 2270 0
8834 2224 2267 2269 0
8834 2226 2298 0
8834 2226 2238 2296 0
8834 2226 2239 2294 0
8834 2226 2241 2292 0
8834 2226 2243 2290 0
8834 2226 2245 2288 0
8834 2226 2247 2286 0
8834 2226 2249 2284 0
8834 2226 2251 2282 0
8834 2226 2253 2280 0
8834 2226 2255 2278 0
8834 2226 2257 2276 0
8834 2226 2259 2274 0
8834 2226 2261 2272 0
8834 2226 2263 2270 0
8834 2226 2265 2269 0
8834 2226 2267 0
8834 2228 2296 0
8834 2228 2238 2294 0
8834 2228 2239 2292 0
8834 2228 2241 2290 0
8834 2228 2243 2288 0
8834 2228 2245 2286 0
8834 2228 2247 2284 0
8834 2228 2249 2282 0
8834 2228 2251 2280 0
8834 2228 2253 2278 0
8834 2228 2255 2276 0
8834 2228 2257 2274 0
8834 2228 2259 2272 0
8834 2228 2261 2270 0
8834 2228 2263 2269 0
8834 2228 2265 0
8834 2228 2267 0
8834 2230 2294 0
8834 2230 2238 2292 0
8834 2230 2239 2290 0
8834 2230 2241 2288 0
8834 2230 2243 2286 0
8834 2230 2245 2284 0
8834 2230 2247 2282 0
8834 2230 2249 2280 0
8834 2230 2251 2278 0
8834 2230 2253 2276 0
8834 2230 2255 2274 0
8834 2230 2257 2272 0
8834 2230 2259 2270 0
8834 2230 2261 2269 0
8834 2230 2263 0
8834 2230 2265 0
8834 2230 2267 0
8834 2232 2292 0
8834 2232 2238 2290 0
8834 2232 2239 2288 0
8834 2232 2241 2286 0
8834 2232 2243 2284 0
8834 2232 2245 2282 0
8834 2232 2247 2280 0
8834 2232 2249 2278 0
8834 2232 2251 2276 0
8834 2232 2253 2274 0
8834 2232 2255 2272 0
8834 2232 2257 2270 0
8834 2232 2259 2269 0
8834 2232 2261 0
8834 2232 2263 0
8834 2232 2265 0
8834 2232 2267 0
8834 2234 2290 0
8834 2234 2238 2288 0
8834 2234 2239 2286 0
8834 2234 2241 2284 0
8834 2234 2243 2282 0
8834 2234 2245 2280 0
8834 2234 2247 2278 0
8834 2234 2249 2276 0
8834 2234 2251 2274 0
8834 2234 2253 2272 0
8834 2234 2255 2270 0
8834 2234 2257 2269 0
8834 2234 2259 0
8834 2234 2261 0
8834 2234 2263 0
8834 2234 2265 0
8834 2234 2267 0
8834 2236 2288 0
8834 2236 2238 2286 0
8834 2236 2239 2284 0
8834 2236 2241 2282 0
8834 2236 2243 2280 0
8834 2236 2245 2278 0
8834 2236 2247 2276 0
8834 2236 2249 2274 0
8834 2236 2251 2272 0
8834 2236 2253 2270 0
8834 2236 2255 2269 0
8834 2236 2257 0
8834 2236 2259 0
8834 2236 2261 0
8834 2236 2263 0
8834 2236 2265 0
8834 2236 2267 0
c (((aux406 + shift(x_00008_00006, -1) + shift(x_00009_00005, -1))<=11)=tv=SATLiteral(8835))
-8835 2321 0
-8835 1142 2319 0
-8835 1143 2317 0
-8835 1145 2315 0
-8835 1147 2313 0
-8835 1149 2311 0
-8835 1151 2309 0
-8835 1153 2307 0
-8835 1155 2305 0
-8835 1022 2319 0
-8835 1022 1142 2317 0
-8835 1022 1143 2315 0
-8835 1022 1145 2313 0
-8835 1022 1147 2311 0
-8835 1022 1149 2309 0
-8835 1022 1151 2307 0
-8835 1022 1153 2305 0
-8835 1022 1155 2303 0
-8835 1023 2317 0
-8835 1023 1142 2315 0
-8835 1023 1143 2313 0
-8835 1023 1145 2311 0
-8835 1023 1147 2309 0
-8835 1023 1149 2307 0
-8835 1023 1151 2305 0
-8835 1023 1153 2303 0
-8835 1023 1155 2301 0
-8835 1025 2315 0
-8835 1025 1142 2313 0
-8835 1025 1143 2311 0
-8835 1025 1145 2309 0
-8835 1025 1147 2307 0
-8835 1025 1149 2305 0
-8835 1025 1151 2303 0
-8835 1025 1153 2301 0
-8835 1025 1155 2300 0
-8835 1027 2313 0
-8835 1027 1142 2311 0
-8835 1027 1143 2309 0
-8835 1027 1145 2307 0
-8835 1027 1147 2305 0
-8835 1027 1149 2303 0
-8835 1027 1151 2301 0
-8835 1027 1153 2300 0
-8835 1027 1155 0
-8835 1029 2311 0
-8835 1029 1142 2309 0
-8835 1029 1143 2307 0
-8835 1029 1145 2305 0
-8835 1029 1147 2303 0
-8835 1029 1149 2301 0
-8835 1029 1151 2300 0
-8835 1029 1153 0
-8835 1029 1155 0
-8835 1031 2309 0
-8835 1031 1142 2307 0
-8835 1031 1143 2305 0
-8835 1031 1145 2303 0
-8835 1031 1147 2301 0
-8835 1031 1149 2300 0
-8835 1031 1151 0
-8835 1031 1153 0
-8835 1031 1155 0
-8835 1033 2307 0
-8835 1033 1142 2305 0
-8835 1033 1143 2303 0
-8835 1033 1145 2301 0
-8835 1033 1147 2300 0
-8835 1033 1149 0
-8835 1033 1151 0
-8835 1033 1153 0
-8835 1033 1155 0
-8835 1035 2305 0
-8835 1035 1142 2303 0
-8835 1035 1143 2301 0
-8835 1035 1145 2300 0
-8835 1035 1147 0
-8835 1035 1149 0
-8835 1035 1151 0
-8835 1035 1153 0
-8835 1035 1155 0
8835 -1147 -2300 0
8835 -1145 -2301 0
8835 -1143 -2303 0
8835 -1142 -2305 0
8835 -1035 -1149 -2300 0
8835 -1035 -1147 -2301 0
8835 -1035 -1145 -2303 0
8835 -1035 -1143 -2305 0
8835 -1035 -1142 -2307 0
8835 -1033 -1151 -2300 0
8835 -1033 -1149 -2301 0
8835 -1033 -1147 -2303 0
8835 -1033 -1145 -2305 0
8835 -1033 -1143 -2307 0
8835 -1033 -1142 -2309 0
8835 -1031 -1153 -2300 0
8835 -1031 -1151 -2301 0
8835 -1031 -1149 -2303 0
8835 -1031 -1147 -2305 0
8835 -1031 -1145 -2307 0
8835 -1031 -1143 -2309 0
8835 -1031 -1142 -2311 0
8835 -1029 -1155 -2300 0
8835 -1029 -1153 -2301 0
8835 -1029 -1151 -2303 0
8835 -1029 -1149 -2305 0
8835 -1029 -1147 -2307 0
8835 -1029 -1145 -2309 0
8835 -1029 -1143 -2311 0
8835 -1029 -1142 -2313 0
8835 -1027 -2300 0
8835 -1027 -1155 -2301 0
8835 -1027 -1153 -2303 0
8835 -1027 -1151 -2305 0
8835 -1027 -1149 -2307 0
8835 -1027 -1147 -2309 0
8835 -1027 -1145 -2311 0
8835 -1027 -1143 -2313 0
8835 -1027 -1142 -2315 0
8835 -1025 -2301 0
8835 -1025 -1155 -2303 0
8835 -1025 -1153 -2305 0
8835 -1025 -1151 -2307 0
8835 -1025 -1149 -2309 0
8835 -1025 -1147 -2311 0
8835 -1025 -1145 -2313 0
8835 -1025 -1143 -2315 0
8835 -1025 -1142 -2317 0
8835 -1023 -2303 0
8835 -1023 -1155 -2305 0
8835 -1023 -1153 -2307 0
8835 -1023 -1151 -2309 0
8835 -1023 -1149 -2311 0
8835 -1023 -1147 -2313 0
8835 -1023 -1145 -2315 0
8835 -1023 -1143 -2317 0
8835 -1023 -1142 -2319 0
8835 -1022 -2305 0
8835 -1022 -1155 -2307 0
8835 -1022 -1153 -2309 0
8835 -1022 -1151 -2311 0
8835 -1022 -1149 -2313 0
8835 -1022 -1147 -2315 0
8835 -1022 -1145 -2317 0
8835 -1022 -1143 -2319 0
8835 -1022 -1142 -2321 0
c ((11<=(aux406 + shift(x_00008_00006, -1) + shift(x_00009_00005, -1)))=tv=SATLiteral(8836))
-8836 -1145 -2300 0
-8836 -1143 -2301 0
-8836 -1142 -2303 0
-8836 -1035 -1147 -2300 0
-8836 -1035 -1145 -2301 0
-8836 -1035 -1143 -2303 0
-8836 -1035 -1142 -2305 0
-8836 -1033 -1149 -2300 0
-8836 -1033 -1147 -2301 0
-8836 -1033 -1145 -2303 0
-8836 -1033 -1143 -2305 0
-8836 -1033 -1142 -2307 0
-8836 -1031 -1151 -2300 0
-8836 -1031 -1149 -2301 0
-8836 -1031 -1147 -2303 0
-8836 -1031 -1145 -2305 0
-8836 -1031 -1143 -2307 0
-8836 -1031 -1142 -2309 0
-8836 -1029 -1153 -2300 0
-8836 -1029 -1151 -2301 0
-8836 -1029 -1149 -2303 0
-8836 -1029 -1147 -2305 0
-8836 -1029 -1145 -2307 0
-8836 -1029 -1143 -2309 0
-8836 -1029 -1142 -2311 0
-8836 -1027 -1155 -2300 0
-8836 -1027 -1153 -2301 0
-8836 -1027 -1151 -2303 0
-8836 -1027 -1149 -2305 0
-8836 -1027 -1147 -2307 0
-8836 -1027 -1145 -2309 0
-8836 -1027 -1143 -2311 0
-8836 -1027 -1142 -2313 0
-8836 -1025 -2300 0
-8836 -1025 -1155 -2301 0
-8836 -1025 -1153 -2303 0
-8836 -1025 -1151 -2305 0
-8836 -1025 -1149 -2307 0
-8836 -1025 -1147 -2309 0
-8836 -1025 -1145 -2311 0
-8836 -1025 -1143 -2313 0
-8836 -1025 -1142 -2315 0
-8836 -1023 -2301 0
-8836 -1023 -1155 -2303 0
-8836 -1023 -1153 -2305 0
-8836 -1023 -1151 -2307 0
-8836 -1023 -1149 -2309 0
-8836 -1023 -1147 -2311 0
-8836 -1023 -1145 -2313 0
-8836 -1023 -1143 -2315 0
-8836 -1023 -1142 -2317 0
-8836 -1022 -2303 0
-8836 -1022 -1155 -2305 0
-8836 -1022 -1153 -2307 0
-8836 -1022 -1151 -2309 0
-8836 -1022 -1149 -2311 0
-8836 -1022 -1147 -2313 0
-8836 -1022 -1145 -2315 0
-8836 -1022 -1143 -2317 0
-8836 -1022 -1142 -2319 0
8836 2319 0
8836 1142 2317 0
8836 1143 2315 0
8836 1145 2313 0
8836 1147 2311 0
8836 1149 2309 0
8836 1151 2307 0
8836 1153 2305 0
8836 1155 2303 0
8836 1022 2317 0
8836 1022 1142 2315 0
8836 1022 1143 2313 0
8836 1022 1145 2311 0
8836 1022 1147 2309 0
8836 1022 1149 2307 0
8836 1022 1151 2305 0
8836 1022 1153 2303 0
8836 1022 1155 2301 0
8836 1023 2315 0
8836 1023 1142 2313 0
8836 1023 1143 2311 0
8836 1023 1145 2309 0
8836 1023 1147 2307 0
8836 1023 1149 2305 0
8836 1023 1151 2303 0
8836 1023 1153 2301 0
8836 1023 1155 2300 0
8836 1025 2313 0
8836 1025 1142 2311 0
8836 1025 1143 2309 0
8836 1025 1145 2307 0
8836 1025 1147 2305 0
8836 1025 1149 2303 0
8836 1025 1151 2301 0
8836 1025 1153 2300 0
8836 1025 1155 0
8836 1027 2311 0
8836 1027 1142 2309 0
8836 1027 1143 2307 0
8836 1027 1145 2305 0
8836 1027 1147 2303 0
8836 1027 1149 2301 0
8836 1027 1151 2300 0
8836 1027 1153 0
8836 1027 1155 0
8836 1029 2309 0
8836 1029 1142 2307 0
8836 1029 1143 2305 0
8836 1029 1145 2303 0
8836 1029 1147 2301 0
8836 1029 1149 2300 0
8836 1029 1151 0
8836 1029 1153 0
8836 1029 1155 0
8836 1031 2307 0
8836 1031 1142 2305 0
8836 1031 1143 2303 0
8836 1031 1145 2301 0
8836 1031 1147 2300 0
8836 1031 1149 0
8836 1031 1151 0
8836 1031 1153 0
8836 1031 1155 0
8836 1033 2305 0
8836 1033 1142 2303 0
8836 1033 1143 2301 0
8836 1033 1145 2300 0
8836 1033 1147 0
8836 1033 1149 0
8836 1033 1151 0
8836 1033 1153 0
8836 1033 1155 0
8836 1035 2303 0
8836 1035 1142 2301 0
8836 1035 1143 2300 0
8836 1035 1145 0
8836 1035 1147 0
8836 1035 1149 0
8836 1035 1151 0
8836 1035 1153 0
8836 1035 1155 0
c (((x_00008_00004 + x_00008_00005)<=9)=tv=SATLiteral(8837))
-8837 1020 0
-8837 992 1018 0
-8837 993 1016 0
-8837 995 1014 0
-8837 997 1012 0
-8837 999 1010 0
-8837 1001 1008 0
-8837 1003 1007 0
-8837 1005 0
8837 -1005 -1007 0
8837 -1003 -1008 0
8837 -1001 -1010 0
8837 -999 -1012 0
8837 -997 -1014 0
8837 -995 -1016 0
8837 -993 -1018 0
8837 -992 -1020 0
c ((9<=(x_00008_00004 + x_00008_00005))=tv=SATLiteral(8838))
-8838 -1003 -1007 0
-8838 -1001 -1008 0
-8838 -999 -1010 0
-8838 -997 -1012 0
-8838 -995 -1014 0
-8838 -993 -1016 0
-8838 -992 -1018 0
8838 1018 0
8838 992 1016 0
8838 993 1014 0
8838 995 1012 0
8838 997 1010 0
8838 999 1008 0
8838 1001 1007 0
8838 1003 0
8838 1005 0
c (((x_00008_00007 + x_00008_00008)<=12)=tv=SATLiteral(8839))
-8839 1040 1065 0
-8839 1042 1063 0
-8839 1044 1061 0
-8839 1046 1059 0
-8839 1048 1057 0
-8839 1050 1055 0
8839 -1055 0
8839 -1050 -1057 0
8839 -1048 -1059 0
8839 -1046 -1061 0
8839 -1044 -1063 0
8839 -1042 -1065 0
8839 -1040 0
8839 -1038 0
8839 -1037 0
c ((12<=(x_00008_00007 + x_00008_00008))=tv=SATLiteral(8840))
-8840 -1053 0
-8840 -1050 -1055 0
-8840 -1048 -1057 0
-8840 -1046 -1059 0
-8840 -1044 -1061 0
-8840 -1042 -1063 0
-8840 -1040 -1065 0
-8840 -1038 0
-8840 -1037 0
8840 1038 1065 0
8840 1040 1063 0
8840 1042 1061 0
8840 1044 1059 0
8840 1046 1057 0
8840 1048 1055 0
8840 1050 1053 0
c (((aux407 + shift(x_00009_00007, -1) + shift(x_00009_00008, -1))<=9)=tv=SATLiteral(8841))
-8841 2348 0
-8841 1187 2346 0
-8841 1188 2344 0
-8841 1190 2342 0
-8841 1192 2340 0
-8841 1194 2338 0
-8841 1196 2336 0
-8841 1198 2334 0
-8841 1200 2332 0
-8841 1172 2346 0
-8841 1172 1187 2344 0
-8841 1172 1188 2342 0
-8841 1172 1190 2340 0
-8841 1172 1192 2338 0
-8841 1172 1194 2336 0
-8841 1172 1196 2334 0
-8841 1172 1198 2332 0
-8841 1172 1200 2331 0
-8841 1173 2344 0
-8841 1173 1187 2342 0
-8841 1173 1188 2340 0
-8841 1173 1190 2338 0
-8841 1173 1192 2336 0
-8841 1173 1194 2334 0
-8841 1173 1196 2332 0
-8841 1173 1198 2331 0
-8841 1173 1200 0
-8841 1175 2342 0
-8841 1175 1187 2340 0
-8841 1175 1188 2338 0
-8841 1175 1190 2336 0
-8841 1175 1192 2334 0
-8841 1175 1194 2332 0
-8841 1175 1196 2331 0
-8841 1175 1198 0
-8841 1175 1200 0
-8841 1177 2340 0
-8841 1177 1187 2338 0
-8841 1177 1188 2336 0
-8841 1177 1190 2334 0
-8841 1177 1192 2332 0
-8841 1177 1194 2331 0
-8841 1177 1196 0
-8841 1177 1198 0
-8841 1177 1200 0
-8841 1179 2338 0
-8841 1179 1187 2336 0
-8841 1179 1188 2334 0
-8841 1179 1190 2332 0
-8841 1179 1192 2331 0
-8841 1179 1194 0
-8841 1179 1196 0
-8841 1179 1198 0
-8841 1179 1200 0
-8841 1181 2336 0
-8841 1181 1187 2334 0
-8841 1181 1188 2332 0
-8841 1181 1190 2331 0
-8841 1181 1192 0
-8841 1181 1194 0
-8841 1181 1196 0
-8841 1181 1198 0
-8841 1181 1200 0
-8841 1183 2334 0
-8841 1183 1187 2332 0
-8841 1183 1188 2331 0
-8841 1183 1190 0
-8841 1183 1192 0
-8841 1183 1194 0
-8841 1183 1196 0
-8841 1183 1198 0
-8841 1183 1200 0
-8841 1185 2332 0
-8841 1185 1187 2331 0
-8841 1185 1188 0
-8841 1185 1190 0
-8841 1185 1192 0
-8841 1185 1194 0
-8841 1185 1196 0
-8841 1185 1198 0
-8841 1185 1200 0
8841 -1188 -2331 0
8841 -1187 -2332 0
8841 -1185 -1190 -2331 0
8841 -1185 -1188 -2332 0
8841 -1185 -1187 -2334 0
8841 -1183 -1192 -2331 0
8841 -1183 -1190 -2332 0
8841 -1183 -1188 -2334 0
8841 -1183 -1187 -2336 0
8841 -1181 -1194 -2331 0
8841 -1181 -1192 -2332 0
8841 -1181 -1190 -2334 0
8841 -1181 -1188 -2336 0
8841 -1181 -1187 -2338 0
8841 -1179 -1196 -2331 0
8841 -1179 -1194 -2332 0
8841 -1179 -1192 -2334 0
8841 -1179 -1190 -2336 0
8841 -1179 -1188 -2338 0
8841 -1179 -1187 -2340 0
8841 -1177 -1198 -2331 0
8841 -1177 -1196 -2332 0
8841 -1177 -1194 -2334 0
8841 -1177 -1192 -2336 0
8841 -1177 -1190 -2338 0
8841 -1177 -1188 -2340 0
8841 -1177 -1187 -2342 0
8841 -1175 -1200 -2331 0
8841 -1175 -1198 -2332 0
8841 -1175 -1196 -2334 0
8841 -1175 -1194 -2336 0
8841 -1175 -1192 -2338 0
8841 -1175 -1190 -2340 0
8841 -1175 -1188 -2342 0
8841 -1175 -1187 -2344 0
8841 -1173 -2331 0
8841 -1173 -1200 -2332 0
8841 -1173 -1198 -2334 0
8841 -1173 -1196 -2336 0
8841 -1173 -1194 -2338 0
8841 -1173 -1192 -2340 0
8841 -1173 -1190 -2342 0
8841 -1173 -1188 -2344 0
8841 -1173 -1187 -2346 0
8841 -1172 -2332 0
8841 -1172 -1200 -2334 0
8841 -1172 -1198 -2336 0
8841 -1172 -1196 -2338 0
8841 -1172 -1194 -2340 0
8841 -1172 -1192 -2342 0
8841 -1172 -1190 -2344 0
8841 -1172 -1188 -2346 0
8841 -1172 -1187 -2348 0
c ((9<=(aux407 + shift(x_00009_00007, -1) + shift(x_00009_00008, -1)))=tv=SATLiteral(8842))
-8842 -1187 -2331 0
-8842 -1185 -1188 -2331 0
-8842 -1185 -1187 -2332 0
-8842 -1183 -1190 -2331 0
-8842 -1183 -1188 -2332 0
-8842 -1183 -1187 -2334 0
-8842 -1181 -1192 -2331 0
-8842 -1181 -1190 -2332 0
-8842 -1181 -1188 -2334 0
-8842 -1181 -1187 -2336 0
-8842 -1179 -1194 -2331 0
-8842 -1179 -1192 -2332 0
-8842 -1179 -1190 -2334 0
-8842 -1179 -1188 -2336 0
-8842 -1179 -1187 -2338 0
-8842 -1177 -1196 -2331 0
-8842 -1177 -1194 -2332 0
-8842 -1177 -1192 -2334 0
-8842 -1177 -1190 -2336 0
-8842 -1177 -1188 -2338 0
-8842 -1177 -1187 -2340 0
-8842 -1175 -1198 -2331 0
-8842 -1175 -1196 -2332 0
-8842 -1175 -1194 -2334 0
-8842 -1175 -1192 -2336 0
-8842 -1175 -1190 -2338 0
-8842 -1175 -1188 -2340 0
-8842 -1175 -1187 -2342 0
-8842 -1173 -1200 -2331 0
-8842 -1173 -1198 -2332 0
-8842 -1173 -1196 -2334 0
-8842 -1173 -1194 -2336 0
-8842 -1173 -1192 -2338 0
-8842 -1173 -1190 -2340 0
-8842 -1173 -1188 -2342 0
-8842 -1173 -1187 -2344 0
-8842 -1172 -2331 0
-8842 -1172 -1200 -2332 0
-8842 -1172 -1198 -2334 0
-8842 -1172 -1196 -2336 0
-8842 -1172 -1194 -2338 0
-8842 -1172 -1192 -2340 0
-8842 -1172 -1190 -2342 0
-8842 -1172 -1188 -2344 0
-8842 -1172 -1187 -2346 0
8842 2346 0
8842 1187 2344 0
8842 1188 2342 0
8842 1190 2340 0
8842 1192 2338 0
8842 1194 2336 0
8842 1196 2334 0
8842 1198 2332 0
8842 1200 2331 0
8842 1172 2344 0
8842 1172 1187 2342 0
8842 1172 1188 2340 0
8842 1172 1190 2338 0
8842 1172 1192 2336 0
8842 1172 1194 2334 0
8842 1172 1196 2332 0
8842 1172 1198 2331 0
8842 1172 1200 0
8842 1173 2342 0
8842 1173 1187 2340 0
8842 1173 1188 2338 0
8842 1173 1190 2336 0
8842 1173 1192 2334 0
8842 1173 1194 2332 0
8842 1173 1196 2331 0
8842 1173 1198 0
8842 1173 1200 0
8842 1175 2340 0
8842 1175 1187 2338 0
8842 1175 1188 2336 0
8842 1175 1190 2334 0
8842 1175 1192 2332 0
8842 1175 1194 2331 0
8842 1175 1196 0
8842 1175 1198 0
8842 1175 1200 0
8842 1177 2338 0
8842 1177 1187 2336 0
8842 1177 1188 2334 0
8842 1177 1190 2332 0
8842 1177 1192 2331 0
8842 1177 1194 0
8842 1177 1196 0
8842 1177 1198 0
8842 1177 1200 0
8842 1179 2336 0
8842 1179 1187 2334 0
8842 1179 1188 2332 0
8842 1179 1190 2331 0
8842 1179 1192 0
8842 1179 1194 0
8842 1179 1196 0
8842 1179 1198 0
8842 1179 1200 0
8842 1181 2334 0
8842 1181 1187 2332 0
8842 1181 1188 2331 0
8842 1181 1190 0
8842 1181 1192 0
8842 1181 1194 0
8842 1181 1196 0
8842 1181 1198 0
8842 1181 1200 0
8842 1183 2332 0
8842 1183 1187 2331 0
8842 1183 1188 0
8842 1183 1190 0
8842 1183 1192 0
8842 1183 1194 0
8842 1183 1196 0
8842 1183 1198 0
8842 1183 1200 0
8842 1185 2331 0
8842 1185 1187 0
8842 1185 1188 0
8842 1185 1190 0
8842 1185 1192 0
8842 1185 1194 0
8842 1185 1196 0
8842 1185 1198 0
8842 1185 1200 0
c (((x_00009_00003 + x_00009_00004)<=17)=tv=SATLiteral(8843))
-8843 1125 1140 0
8843 -1140 0
8843 -1125 0
8843 -1123 0
8843 -1121 0
8843 -1119 0
8843 -1117 0
8843 -1115 0
8843 -1113 0
8843 -1112 0
c ((17<=(x_00009_00003 + x_00009_00004))=tv=SATLiteral(8844))
-8844 -1138 0
-8844 -1125 -1140 0
-8844 -1123 0
-8844 -1121 0
-8844 -1119 0
-8844 -1117 0
-8844 -1115 0
-8844 -1113 0
-8844 -1112 0
8844 1123 1140 0
8844 1125 1138 0
c (((aux409 + aux412 + aux413)<=1)=tv=SATLiteral(8845))
-8845 2380 0
-8845 2374 2379 0
-8845 2375 0
-8845 2377 0
-8845 2365 2379 0
-8845 2365 2374 0
-8845 2365 2375 0
-8845 2365 2377 0
-8845 2366 0
-8845 2366 2374 0
-8845 2366 2375 0
-8845 2366 2377 0
8845 -2366 -2374 -2379 0
8845 -2365 -2375 -2379 0
8845 -2365 -2374 -2380 0
c ((1<=(aux409 + aux412 + aux413))=tv=SATLiteral(8846))
-8846 -2365 -2374 -2379 0
8846 2379 0
8846 2374 0
8846 2375 0
8846 2377 0
8846 2365 0
8846 2365 2374 0
8846 2365 2375 0
8846 2365 2377 0
8846 2366 0
8846 2366 2374 0
8846 2366 2375 0
8846 2366 2377 0
c (((aux415 + aux418 + aux419)<=1)=tv=SATLiteral(8847))
-8847 2404 0
-8847 2398 2403 0
-8847 2399 0
-8847 2401 0
-8847 2389 2403 0
-8847 2389 2398 0
-8847 2389 2399 0
-8847 2389 2401 0
-8847 2390 0
-8847 2390 2398 0
-8847 2390 2399 0
-8847 2390 2401 0
8847 -2390 -2398 -2403 0
8847 -2389 -2399 -2403 0
8847 -2389 -2398 -2404 0
c ((1<=(aux415 + aux418 + aux419))=tv=SATLiteral(8848))
-8848 -2389 -2398 -2403 0
8848 2403 0
8848 2398 0
8848 2399 0
8848 2401 0
8848 2389 0
8848 2389 2398 0
8848 2389 2399 0
8848 2389 2401 0
8848 2390 0
8848 2390 2398 0
8848 2390 2399 0
8848 2390 2401 0
c (((aux421 + aux424 + aux425)<=1)=tv=SATLiteral(8849))
-8849 2428 0
-8849 2422 2427 0
-8849 2423 0
-8849 2425 0
-8849 2413 2427 0
-8849 2413 2422 0
-8849 2413 2423 0
-8849 2413 2425 0
-8849 2414 0
-8849 2414 2422 0
-8849 2414 2423 0
-8849 2414 2425 0
8849 -2414 -2422 -2427 0
8849 -2413 -2423 -2427 0
8849 -2413 -2422 -2428 0
c ((1<=(aux421 + aux424 + aux425))=tv=SATLiteral(8850))
-8850 -2413 -2422 -2427 0
8850 2427 0
8850 2422 0
8850 2423 0
8850 2425 0
8850 2413 0
8850 2413 2422 0
8850 2413 2423 0
8850 2413 2425 0
8850 2414 0
8850 2414 2422 0
8850 2414 2423 0
8850 2414 2425 0
c (((aux427 + aux430 + aux431)<=1)=tv=SATLiteral(8851))
-8851 2452 0
-8851 2446 2451 0
-8851 2447 0
-8851 2449 0
-8851 2437 2451 0
-8851 2437 2446 0
-8851 2437 2447 0
-8851 2437 2449 0
-8851 2438 0
-8851 2438 2446 0
-8851 2438 2447 0
-8851 2438 2449 0
8851 -2438 -2446 -2451 0
8851 -2437 -2447 -2451 0
8851 -2437 -2446 -2452 0
c ((1<=(aux427 + aux430 + aux431))=tv=SATLiteral(8852))
-8852 -2437 -2446 -2451 0
8852 2451 0
8852 2446 0
8852 2447 0
8852 2449 0
8852 2437 0
8852 2437 2446 0
8852 2437 2447 0
8852 2437 2449 0
8852 2438 0
8852 2438 2446 0
8852 2438 2447 0
8852 2438 2449 0
c (((aux433 + aux436 + aux437)<=1)=tv=SATLiteral(8853))
-8853 2476 0
-8853 2470 2475 0
-8853 2471 0
-8853 2473 0
-8853 2461 2475 0
-8853 2461 2470 0
-8853 2461 2471 0
-8853 2461 2473 0
-8853 2462 0
-8853 2462 2470 0
-8853 2462 2471 0
-8853 2462 2473 0
8853 -2462 -2470 -2475 0
8853 -2461 -2471 -2475 0
8853 -2461 -2470 -2476 0
c ((1<=(aux433 + aux436 + aux437))=tv=SATLiteral(8854))
-8854 -2461 -2470 -2475 0
8854 2475 0
8854 2470 0
8854 2471 0
8854 2473 0
8854 2461 0
8854 2461 2470 0
8854 2461 2471 0
8854 2461 2473 0
8854 2462 0
8854 2462 2470 0
8854 2462 2471 0
8854 2462 2473 0
c (((aux439 + aux442 + aux443)<=1)=tv=SATLiteral(8855))
-8855 2500 0
-8855 2494 2499 0
-8855 2495 0
-8855 2497 0
-8855 2485 2499 0
-8855 2485 2494 0
-8855 2485 2495 0
-8855 2485 2497 0
-8855 2486 0
-8855 2486 2494 0
-8855 2486 2495 0
-8855 2486 2497 0
8855 -2486 -2494 -2499 0
8855 -2485 -2495 -2499 0
8855 -2485 -2494 -2500 0
c ((1<=(aux439 + aux442 + aux443))=tv=SATLiteral(8856))
-8856 -2485 -2494 -2499 0
8856 2499 0
8856 2494 0
8856 2495 0
8856 2497 0
8856 2485 0
8856 2485 2494 0
8856 2485 2495 0
8856 2485 2497 0
8856 2486 0
8856 2486 2494 0
8856 2486 2495 0
8856 2486 2497 0
c (((aux445 + aux448 + aux449)<=1)=tv=SATLiteral(8857))
-8857 2524 0
-8857 2518 2523 0
-8857 2519 0
-8857 2521 0
-8857 2509 2523 0
-8857 2509 2518 0
-8857 2509 2519 0
-8857 2509 2521 0
-8857 2510 0
-8857 2510 2518 0
-8857 2510 2519 0
-8857 2510 2521 0
8857 -2510 -2518 -2523 0
8857 -2509 -2519 -2523 0
8857 -2509 -2518 -2524 0
c ((1<=(aux445 + aux448 + aux449))=tv=SATLiteral(8858))
-8858 -2509 -2518 -2523 0
8858 2523 0
8858 2518 0
8858 2519 0
8858 2521 0
8858 2509 0
8858 2509 2518 0
8858 2509 2519 0
8858 2509 2521 0
8858 2510 0
8858 2510 2518 0
8858 2510 2519 0
8858 2510 2521 0
c (((aux451 + aux454 + aux455)<=1)=tv=SATLiteral(8859))
-8859 2548 0
-8859 2542 2547 0
-8859 2543 0
-8859 2545 0
-8859 2533 2547 0
-8859 2533 2542 0
-8859 2533 2543 0
-8859 2533 2545 0
-8859 2534 0
-8859 2534 2542 0
-8859 2534 2543 0
-8859 2534 2545 0
8859 -2534 -2542 -2547 0
8859 -2533 -2543 -2547 0
8859 -2533 -2542 -2548 0
c ((1<=(aux451 + aux454 + aux455))=tv=SATLiteral(8860))
-8860 -2533 -2542 -2547 0
8860 2547 0
8860 2542 0
8860 2543 0
8860 2545 0
8860 2533 0
8860 2533 2542 0
8860 2533 2543 0
8860 2533 2545 0
8860 2534 0
8860 2534 2542 0
8860 2534 2543 0
8860 2534 2545 0
c (((aux457 + aux460 + aux461)<=1)=tv=SATLiteral(8861))
-8861 2572 0
-8861 2566 2571 0
-8861 2567 0
-8861 2569 0
-8861 2557 2571 0
-8861 2557 2566 0
-8861 2557 2567 0
-8861 2557 2569 0
-8861 2558 0
-8861 2558 2566 0
-8861 2558 2567 0
-8861 2558 2569 0
8861 -2558 -2566 -2571 0
8861 -2557 -2567 -2571 0
8861 -2557 -2566 -2572 0
c ((1<=(aux457 + aux460 + aux461))=tv=SATLiteral(8862))
-8862 -2557 -2566 -2571 0
8862 2571 0
8862 2566 0
8862 2567 0
8862 2569 0
8862 2557 0
8862 2557 2566 0
8862 2557 2567 0
8862 2557 2569 0
8862 2558 0
8862 2558 2566 0
8862 2558 2567 0
8862 2558 2569 0
c (((aux463 + aux466 + aux467)<=1)=tv=SATLiteral(8863))
-8863 2596 0
-8863 2590 2595 0
-8863 2591 0
-8863 2593 0
-8863 2581 2595 0
-8863 2581 2590 0
-8863 2581 2591 0
-8863 2581 2593 0
-8863 2582 0
-8863 2582 2590 0
-8863 2582 2591 0
-8863 2582 2593 0
8863 -2582 -2590 -2595 0
8863 -2581 -2591 -2595 0
8863 -2581 -2590 -2596 0
c ((1<=(aux463 + aux466 + aux467))=tv=SATLiteral(8864))
-8864 -2581 -2590 -2595 0
8864 2595 0
8864 2590 0
8864 2591 0
8864 2593 0
8864 2581 0
8864 2581 2590 0
8864 2581 2591 0
8864 2581 2593 0
8864 2582 0
8864 2582 2590 0
8864 2582 2591 0
8864 2582 2593 0
c (((aux469 + aux472 + aux473)<=1)=tv=SATLiteral(8865))
-8865 2620 0
-8865 2614 2619 0
-8865 2615 0
-8865 2617 0
-8865 2605 2619 0
-8865 2605 2614 0
-8865 2605 2615 0
-8865 2605 2617 0
-8865 2606 0
-8865 2606 2614 0
-8865 2606 2615 0
-8865 2606 2617 0
8865 -2606 -2614 -2619 0
8865 -2605 -2615 -2619 0
8865 -2605 -2614 -2620 0
c ((1<=(aux469 + aux472 + aux473))=tv=SATLiteral(8866))
-8866 -2605 -2614 -2619 0
8866 2619 0
8866 2614 0
8866 2615 0
8866 2617 0
8866 2605 0
8866 2605 2614 0
8866 2605 2615 0
8866 2605 2617 0
8866 2606 0
8866 2606 2614 0
8866 2606 2615 0
8866 2606 2617 0
c (((aux475 + aux478 + aux479)<=1)=tv=SATLiteral(8867))
-8867 2644 0
-8867 2638 2643 0
-8867 2639 0
-8867 2641 0
-8867 2629 2643 0
-8867 2629 2638 0
-8867 2629 2639 0
-8867 2629 2641 0
-8867 2630 0
-8867 2630 2638 0
-8867 2630 2639 0
-8867 2630 2641 0
8867 -2630 -2638 -2643 0
8867 -2629 -2639 -2643 0
8867 -2629 -2638 -2644 0
c ((1<=(aux475 + aux478 + aux479))=tv=SATLiteral(8868))
-8868 -2629 -2638 -2643 0
8868 2643 0
8868 2638 0
8868 2639 0
8868 2641 0
8868 2629 0
8868 2629 2638 0
8868 2629 2639 0
8868 2629 2641 0
8868 2630 0
8868 2630 2638 0
8868 2630 2639 0
8868 2630 2641 0
c (((aux481 + aux484 + aux485)<=1)=tv=SATLiteral(8869))
-8869 2668 0
-8869 2662 2667 0
-8869 2663 0
-8869 2665 0
-8869 2653 2667 0
-8869 2653 2662 0
-8869 2653 2663 0
-8869 2653 2665 0
-8869 2654 0
-8869 2654 2662 0
-8869 2654 2663 0
-8869 2654 2665 0
8869 -2654 -2662 -2667 0
8869 -2653 -2663 -2667 0
8869 -2653 -2662 -2668 0
c ((1<=(aux481 + aux484 + aux485))=tv=SATLiteral(8870))
-8870 -2653 -2662 -2667 0
8870 2667 0
8870 2662 0
8870 2663 0
8870 2665 0
8870 2653 0
8870 2653 2662 0
8870 2653 2663 0
8870 2653 2665 0
8870 2654 0
8870 2654 2662 0
8870 2654 2663 0
8870 2654 2665 0
c (((aux487 + aux490 + aux491)<=1)=tv=SATLiteral(8871))
-8871 2692 0
-8871 2686 2691 0
-8871 2687 0
-8871 2689 0
-8871 2677 2691 0
-8871 2677 2686 0
-8871 2677 2687 0
-8871 2677 2689 0
-8871 2678 0
-8871 2678 2686 0
-8871 2678 2687 0
-8871 2678 2689 0
8871 -2678 -2686 -2691 0
8871 -2677 -2687 -2691 0
8871 -2677 -2686 -2692 0
c ((1<=(aux487 + aux490 + aux491))=tv=SATLiteral(8872))
-8872 -2677 -2686 -2691 0
8872 2691 0
8872 2686 0
8872 2687 0
8872 2689 0
8872 2677 0
8872 2677 2686 0
8872 2677 2687 0
8872 2677 2689 0
8872 2678 0
8872 2678 2686 0
8872 2678 2687 0
8872 2678 2689 0
c (((aux493 + aux496 + aux497)<=1)=tv=SATLiteral(8873))
-8873 2716 0
-8873 2710 2715 0
-8873 2711 0
-8873 2713 0
-8873 2701 2715 0
-8873 2701 2710 0
-8873 2701 2711 0
-8873 2701 2713 0
-8873 2702 0
-8873 2702 2710 0
-8873 2702 2711 0
-8873 2702 2713 0
8873 -2702 -2710 -2715 0
8873 -2701 -2711 -2715 0
8873 -2701 -2710 -2716 0
c ((1<=(aux493 + aux496 + aux497))=tv=SATLiteral(8874))
-8874 -2701 -2710 -2715 0
8874 2715 0
8874 2710 0
8874 2711 0
8874 2713 0
8874 2701 0
8874 2701 2710 0
8874 2701 2711 0
8874 2701 2713 0
8874 2702 0
8874 2702 2710 0
8874 2702 2711 0
8874 2702 2713 0
c (((aux499 + aux502 + aux503)<=1)=tv=SATLiteral(8875))
-8875 2740 0
-8875 2734 2739 0
-8875 2735 0
-8875 2737 0
-8875 2725 2739 0
-8875 2725 2734 0
-8875 2725 2735 0
-8875 2725 2737 0
-8875 2726 0
-8875 2726 2734 0
-8875 2726 2735 0
-8875 2726 2737 0
8875 -2726 -2734 -2739 0
8875 -2725 -2735 -2739 0
8875 -2725 -2734 -2740 0
c ((1<=(aux499 + aux502 + aux503))=tv=SATLiteral(8876))
-8876 -2725 -2734 -2739 0
8876 2739 0
8876 2734 0
8876 2735 0
8876 2737 0
8876 2725 0
8876 2725 2734 0
8876 2725 2735 0
8876 2725 2737 0
8876 2726 0
8876 2726 2734 0
8876 2726 2735 0
8876 2726 2737 0
c (((aux505 + aux508 + aux509)<=1)=tv=SATLiteral(8877))
-8877 2764 0
-8877 2758 2763 0
-8877 2759 0
-8877 2761 0
-8877 2749 2763 0
-8877 2749 2758 0
-8877 2749 2759 0
-8877 2749 2761 0
-8877 2750 0
-8877 2750 2758 0
-8877 2750 2759 0
-8877 2750 2761 0
8877 -2750 -2758 -2763 0
8877 -2749 -2759 -2763 0
8877 -2749 -2758 -2764 0
c ((1<=(aux505 + aux508 + aux509))=tv=SATLiteral(8878))
-8878 -2749 -2758 -2763 0
8878 2763 0
8878 2758 0
8878 2759 0
8878 2761 0
8878 2749 0
8878 2749 2758 0
8878 2749 2759 0
8878 2749 2761 0
8878 2750 0
8878 2750 2758 0
8878 2750 2759 0
8878 2750 2761 0
c (((aux511 + aux514 + aux515)<=1)=tv=SATLiteral(8879))
-8879 2788 0
-8879 2782 2787 0
-8879 2783 0
-8879 2785 0
-8879 2773 2787 0
-8879 2773 2782 0
-8879 2773 2783 0
-8879 2773 2785 0
-8879 2774 0
-8879 2774 2782 0
-8879 2774 2783 0
-8879 2774 2785 0
8879 -2774 -2782 -2787 0
8879 -2773 -2783 -2787 0
8879 -2773 -2782 -2788 0
c ((1<=(aux511 + aux514 + aux515))=tv=SATLiteral(8880))
-8880 -2773 -2782 -2787 0
8880 2787 0
8880 2782 0
8880 2783 0
8880 2785 0
8880 2773 0
8880 2773 2782 0
8880 2773 2783 0
8880 2773 2785 0
8880 2774 0
8880 2774 2782 0
8880 2774 2783 0
8880 2774 2785 0
c (((aux517 + aux520 + aux521)<=1)=tv=SATLiteral(8881))
-8881 2812 0
-8881 2806 2811 0
-8881 2807 0
-8881 2809 0
-8881 2797 2811 0
-8881 2797 2806 0
-8881 2797 2807 0
-8881 2797 2809 0
-8881 2798 0
-8881 2798 2806 0
-8881 2798 2807 0
-8881 2798 2809 0
8881 -2798 -2806 -2811 0
8881 -2797 -2807 -2811 0
8881 -2797 -2806 -2812 0
c ((1<=(aux517 + aux520 + aux521))=tv=SATLiteral(8882))
-8882 -2797 -2806 -2811 0
8882 2811 0
8882 2806 0
8882 2807 0
8882 2809 0
8882 2797 0
8882 2797 2806 0
8882 2797 2807 0
8882 2797 2809 0
8882 2798 0
8882 2798 2806 0
8882 2798 2807 0
8882 2798 2809 0
c (((aux523 + aux526 + aux527)<=1)=tv=SATLiteral(8883))
-8883 2836 0
-8883 2830 2835 0
-8883 2831 0
-8883 2833 0
-8883 2821 2835 0
-8883 2821 2830 0
-8883 2821 2831 0
-8883 2821 2833 0
-8883 2822 0
-8883 2822 2830 0
-8883 2822 2831 0
-8883 2822 2833 0
8883 -2822 -2830 -2835 0
8883 -2821 -2831 -2835 0
8883 -2821 -2830 -2836 0
c ((1<=(aux523 + aux526 + aux527))=tv=SATLiteral(8884))
-8884 -2821 -2830 -2835 0
8884 2835 0
8884 2830 0
8884 2831 0
8884 2833 0
8884 2821 0
8884 2821 2830 0
8884 2821 2831 0
8884 2821 2833 0
8884 2822 0
8884 2822 2830 0
8884 2822 2831 0
8884 2822 2833 0
c (((aux529 + aux532 + aux533)<=1)=tv=SATLiteral(8885))
-8885 2860 0
-8885 2854 2859 0
-8885 2855 0
-8885 2857 0
-8885 2845 2859 0
-8885 2845 2854 0
-8885 2845 2855 0
-8885 2845 2857 0
-8885 2846 0
-8885 2846 2854 0
-8885 2846 2855 0
-8885 2846 2857 0
8885 -2846 -2854 -2859 0
8885 -2845 -2855 -2859 0
8885 -2845 -2854 -2860 0
c ((1<=(aux529 + aux532 + aux533))=tv=SATLiteral(8886))
-8886 -2845 -2854 -2859 0
8886 2859 0
8886 2854 0
8886 2855 0
8886 2857 0
8886 2845 0
8886 2845 2854 0
8886 2845 2855 0
8886 2845 2857 0
8886 2846 0
8886 2846 2854 0
8886 2846 2855 0
8886 2846 2857 0
c (((aux535 + aux538 + aux539)<=1)=tv=SATLiteral(8887))
-8887 2884 0
-8887 2878 2883 0
-8887 2879 0
-8887 2881 0
-8887 2869 2883 0
-8887 2869 2878 0
-8887 2869 2879 0
-8887 2869 2881 0
-8887 2870 0
-8887 2870 2878 0
-8887 2870 2879 0
-8887 2870 2881 0
8887 -2870 -2878 -2883 0
8887 -2869 -2879 -2883 0
8887 -2869 -2878 -2884 0
c ((1<=(aux535 + aux538 + aux539))=tv=SATLiteral(8888))
-8888 -2869 -2878 -2883 0
8888 2883 0
8888 2878 0
8888 2879 0
8888 2881 0
8888 2869 0
8888 2869 2878 0
8888 2869 2879 0
8888 2869 2881 0
8888 2870 0
8888 2870 2878 0
8888 2870 2879 0
8888 2870 2881 0
c (((aux541 + aux544 + aux545)<=1)=tv=SATLiteral(8889))
-8889 2908 0
-8889 2902 2907 0
-8889 2903 0
-8889 2905 0
-8889 2893 2907 0
-8889 2893 2902 0
-8889 2893 2903 0
-8889 2893 2905 0
-8889 2894 0
-8889 2894 2902 0
-8889 2894 2903 0
-8889 2894 2905 0
8889 -2894 -2902 -2907 0
8889 -2893 -2903 -2907 0
8889 -2893 -2902 -2908 0
c ((1<=(aux541 + aux544 + aux545))=tv=SATLiteral(8890))
-8890 -2893 -2902 -2907 0
8890 2907 0
8890 2902 0
8890 2903 0
8890 2905 0
8890 2893 0
8890 2893 2902 0
8890 2893 2903 0
8890 2893 2905 0
8890 2894 0
8890 2894 2902 0
8890 2894 2903 0
8890 2894 2905 0
c (((aux547 + aux550 + aux551)<=1)=tv=SATLiteral(8891))
-8891 2932 0
-8891 2926 2931 0
-8891 2927 0
-8891 2929 0
-8891 2917 2931 0
-8891 2917 2926 0
-8891 2917 2927 0
-8891 2917 2929 0
-8891 2918 0
-8891 2918 2926 0
-8891 2918 2927 0
-8891 2918 2929 0
8891 -2918 -2926 -2931 0
8891 -2917 -2927 -2931 0
8891 -2917 -2926 -2932 0
c ((1<=(aux547 + aux550 + aux551))=tv=SATLiteral(8892))
-8892 -2917 -2926 -2931 0
8892 2931 0
8892 2926 0
8892 2927 0
8892 2929 0
8892 2917 0
8892 2917 2926 0
8892 2917 2927 0
8892 2917 2929 0
8892 2918 0
8892 2918 2926 0
8892 2918 2927 0
8892 2918 2929 0
c (((aux553 + aux556 + aux557)<=1)=tv=SATLiteral(8893))
-8893 2956 0
-8893 2950 2955 0
-8893 2951 0
-8893 2953 0
-8893 2941 2955 0
-8893 2941 2950 0
-8893 2941 2951 0
-8893 2941 2953 0
-8893 2942 0
-8893 2942 2950 0
-8893 2942 2951 0
-8893 2942 2953 0
8893 -2942 -2950 -2955 0
8893 -2941 -2951 -2955 0
8893 -2941 -2950 -2956 0
c ((1<=(aux553 + aux556 + aux557))=tv=SATLiteral(8894))
-8894 -2941 -2950 -2955 0
8894 2955 0
8894 2950 0
8894 2951 0
8894 2953 0
8894 2941 0
8894 2941 2950 0
8894 2941 2951 0
8894 2941 2953 0
8894 2942 0
8894 2942 2950 0
8894 2942 2951 0
8894 2942 2953 0
c (((aux559 + aux562 + aux563)<=1)=tv=SATLiteral(8895))
-8895 2980 0
-8895 2974 2979 0
-8895 2975 0
-8895 2977 0
-8895 2965 2979 0
-8895 2965 2974 0
-8895 2965 2975 0
-8895 2965 2977 0
-8895 2966 0
-8895 2966 2974 0
-8895 2966 2975 0
-8895 2966 2977 0
8895 -2966 -2974 -2979 0
8895 -2965 -2975 -2979 0
8895 -2965 -2974 -2980 0
c ((1<=(aux559 + aux562 + aux563))=tv=SATLiteral(8896))
-8896 -2965 -2974 -2979 0
8896 2979 0
8896 2974 0
8896 2975 0
8896 2977 0
8896 2965 0
8896 2965 2974 0
8896 2965 2975 0
8896 2965 2977 0
8896 2966 0
8896 2966 2974 0
8896 2966 2975 0
8896 2966 2977 0
c (((aux565 + aux568 + aux569)<=1)=tv=SATLiteral(8897))
-8897 3004 0
-8897 2998 3003 0
-8897 2999 0
-8897 3001 0
-8897 2989 3003 0
-8897 2989 2998 0
-8897 2989 2999 0
-8897 2989 3001 0
-8897 2990 0
-8897 2990 2998 0
-8897 2990 2999 0
-8897 2990 3001 0
8897 -2990 -2998 -3003 0
8897 -2989 -2999 -3003 0
8897 -2989 -2998 -3004 0
c ((1<=(aux565 + aux568 + aux569))=tv=SATLiteral(8898))
-8898 -2989 -2998 -3003 0
8898 3003 0
8898 2998 0
8898 2999 0
8898 3001 0
8898 2989 0
8898 2989 2998 0
8898 2989 2999 0
8898 2989 3001 0
8898 2990 0
8898 2990 2998 0
8898 2990 2999 0
8898 2990 3001 0
c (((aux571 + aux574 + aux575)<=1)=tv=SATLiteral(8899))
-8899 3028 0
-8899 3022 3027 0
-8899 3023 0
-8899 3025 0
-8899 3013 3027 0
-8899 3013 3022 0
-8899 3013 3023 0
-8899 3013 3025 0
-8899 3014 0
-8899 3014 3022 0
-8899 3014 3023 0
-8899 3014 3025 0
8899 -3014 -3022 -3027 0
8899 -3013 -3023 -3027 0
8899 -3013 -3022 -3028 0
c ((1<=(aux571 + aux574 + aux575))=tv=SATLiteral(8900))
-8900 -3013 -3022 -3027 0
8900 3027 0
8900 3022 0
8900 3023 0
8900 3025 0
8900 3013 0
8900 3013 3022 0
8900 3013 3023 0
8900 3013 3025 0
8900 3014 0
8900 3014 3022 0
8900 3014 3023 0
8900 3014 3025 0
c (((aux577 + aux580 + aux581)<=1)=tv=SATLiteral(8901))
-8901 3052 0
-8901 3046 3051 0
-8901 3047 0
-8901 3049 0
-8901 3037 3051 0
-8901 3037 3046 0
-8901 3037 3047 0
-8901 3037 3049 0
-8901 3038 0
-8901 3038 3046 0
-8901 3038 3047 0
-8901 3038 3049 0
8901 -3038 -3046 -3051 0
8901 -3037 -3047 -3051 0
8901 -3037 -3046 -3052 0
c ((1<=(aux577 + aux580 + aux581))=tv=SATLiteral(8902))
-8902 -3037 -3046 -3051 0
8902 3051 0
8902 3046 0
8902 3047 0
8902 3049 0
8902 3037 0
8902 3037 3046 0
8902 3037 3047 0
8902 3037 3049 0
8902 3038 0
8902 3038 3046 0
8902 3038 3047 0
8902 3038 3049 0
c (((aux583 + aux586 + aux587)<=1)=tv=SATLiteral(8903))
-8903 3076 0
-8903 3070 3075 0
-8903 3071 0
-8903 3073 0
-8903 3061 3075 0
-8903 3061 3070 0
-8903 3061 3071 0
-8903 3061 3073 0
-8903 3062 0
-8903 3062 3070 0
-8903 3062 3071 0
-8903 3062 3073 0
8903 -3062 -3070 -3075 0
8903 -3061 -3071 -3075 0
8903 -3061 -3070 -3076 0
c ((1<=(aux583 + aux586 + aux587))=tv=SATLiteral(8904))
-8904 -3061 -3070 -3075 0
8904 3075 0
8904 3070 0
8904 3071 0
8904 3073 0
8904 3061 0
8904 3061 3070 0
8904 3061 3071 0
8904 3061 3073 0
8904 3062 0
8904 3062 3070 0
8904 3062 3071 0
8904 3062 3073 0
c (((aux589 + aux592 + aux593)<=1)=tv=SATLiteral(8905))
-8905 3100 0
-8905 3094 3099 0
-8905 3095 0
-8905 3097 0
-8905 3085 3099 0
-8905 3085 3094 0
-8905 3085 3095 0
-8905 3085 3097 0
-8905 3086 0
-8905 3086 3094 0
-8905 3086 3095 0
-8905 3086 3097 0
8905 -3086 -3094 -3099 0
8905 -3085 -3095 -3099 0
8905 -3085 -3094 -3100 0
c ((1<=(aux589 + aux592 + aux593))=tv=SATLiteral(8906))
-8906 -3085 -3094 -3099 0
8906 3099 0
8906 3094 0
8906 3095 0
8906 3097 0
8906 3085 0
8906 3085 3094 0
8906 3085 3095 0
8906 3085 3097 0
8906 3086 0
8906 3086 3094 0
8906 3086 3095 0
8906 3086 3097 0
c (((aux595 + aux598 + aux599)<=1)=tv=SATLiteral(8907))
-8907 3124 0
-8907 3118 3123 0
-8907 3119 0
-8907 3121 0
-8907 3109 3123 0
-8907 3109 3118 0
-8907 3109 3119 0
-8907 3109 3121 0
-8907 3110 0
-8907 3110 3118 0
-8907 3110 3119 0
-8907 3110 3121 0
8907 -3110 -3118 -3123 0
8907 -3109 -3119 -3123 0
8907 -3109 -3118 -3124 0
c ((1<=(aux595 + aux598 + aux599))=tv=SATLiteral(8908))
-8908 -3109 -3118 -3123 0
8908 3123 0
8908 3118 0
8908 3119 0
8908 3121 0
8908 3109 0
8908 3109 3118 0
8908 3109 3119 0
8908 3109 3121 0
8908 3110 0
8908 3110 3118 0
8908 3110 3119 0
8908 3110 3121 0
c (((aux601 + aux604 + aux605)<=1)=tv=SATLiteral(8909))
-8909 3148 0
-8909 3142 3147 0
-8909 3143 0
-8909 3145 0
-8909 3133 3147 0
-8909 3133 3142 0
-8909 3133 3143 0
-8909 3133 3145 0
-8909 3134 0
-8909 3134 3142 0
-8909 3134 3143 0
-8909 3134 3145 0
8909 -3134 -3142 -3147 0
8909 -3133 -3143 -3147 0
8909 -3133 -3142 -3148 0
c ((1<=(aux601 + aux604 + aux605))=tv=SATLiteral(8910))
-8910 -3133 -3142 -3147 0
8910 3147 0
8910 3142 0
8910 3143 0
8910 3145 0
8910 3133 0
8910 3133 3142 0
8910 3133 3143 0
8910 3133 3145 0
8910 3134 0
8910 3134 3142 0
8910 3134 3143 0
8910 3134 3145 0
c (((aux607 + aux610 + aux611)<=1)=tv=SATLiteral(8911))
-8911 3172 0
-8911 3166 3171 0
-8911 3167 0
-8911 3169 0
-8911 3157 3171 0
-8911 3157 3166 0
-8911 3157 3167 0
-8911 3157 3169 0
-8911 3158 0
-8911 3158 3166 0
-8911 3158 3167 0
-8911 3158 3169 0
8911 -3158 -3166 -3171 0
8911 -3157 -3167 -3171 0
8911 -3157 -3166 -3172 0
c ((1<=(aux607 + aux610 + aux611))=tv=SATLiteral(8912))
-8912 -3157 -3166 -3171 0
8912 3171 0
8912 3166 0
8912 3167 0
8912 3169 0
8912 3157 0
8912 3157 3166 0
8912 3157 3167 0
8912 3157 3169 0
8912 3158 0
8912 3158 3166 0
8912 3158 3167 0
8912 3158 3169 0
c (((aux613 + aux616 + aux617)<=1)=tv=SATLiteral(8913))
-8913 3196 0
-8913 3190 3195 0
-8913 3191 0
-8913 3193 0
-8913 3181 3195 0
-8913 3181 3190 0
-8913 3181 3191 0
-8913 3181 3193 0
-8913 3182 0
-8913 3182 3190 0
-8913 3182 3191 0
-8913 3182 3193 0
8913 -3182 -3190 -3195 0
8913 -3181 -3191 -3195 0
8913 -3181 -3190 -3196 0
c ((1<=(aux613 + aux616 + aux617))=tv=SATLiteral(8914))
-8914 -3181 -3190 -3195 0
8914 3195 0
8914 3190 0
8914 3191 0
8914 3193 0
8914 3181 0
8914 3181 3190 0
8914 3181 3191 0
8914 3181 3193 0
8914 3182 0
8914 3182 3190 0
8914 3182 3191 0
8914 3182 3193 0
c (((aux619 + aux622 + aux623)<=1)=tv=SATLiteral(8915))
-8915 3220 0
-8915 3214 3219 0
-8915 3215 0
-8915 3217 0
-8915 3205 3219 0
-8915 3205 3214 0
-8915 3205 3215 0
-8915 3205 3217 0
-8915 3206 0
-8915 3206 3214 0
-8915 3206 3215 0
-8915 3206 3217 0
8915 -3206 -3214 -3219 0
8915 -3205 -3215 -3219 0
8915 -3205 -3214 -3220 0
c ((1<=(aux619 + aux622 + aux623))=tv=SATLiteral(8916))
-8916 -3205 -3214 -3219 0
8916 3219 0
8916 3214 0
8916 3215 0
8916 3217 0
8916 3205 0
8916 3205 3214 0
8916 3205 3215 0
8916 3205 3217 0
8916 3206 0
8916 3206 3214 0
8916 3206 3215 0
8916 3206 3217 0
c (((aux625 + aux628 + aux629)<=1)=tv=SATLiteral(8917))
-8917 3244 0
-8917 3238 3243 0
-8917 3239 0
-8917 3241 0
-8917 3229 3243 0
-8917 3229 3238 0
-8917 3229 3239 0
-8917 3229 3241 0
-8917 3230 0
-8917 3230 3238 0
-8917 3230 3239 0
-8917 3230 3241 0
8917 -3230 -3238 -3243 0
8917 -3229 -3239 -3243 0
8917 -3229 -3238 -3244 0
c ((1<=(aux625 + aux628 + aux629))=tv=SATLiteral(8918))
-8918 -3229 -3238 -3243 0
8918 3243 0
8918 3238 0
8918 3239 0
8918 3241 0
8918 3229 0
8918 3229 3238 0
8918 3229 3239 0
8918 3229 3241 0
8918 3230 0
8918 3230 3238 0
8918 3230 3239 0
8918 3230 3241 0
c (((aux631 + aux634 + aux635)<=1)=tv=SATLiteral(8919))
-8919 3268 0
-8919 3262 3267 0
-8919 3263 0
-8919 3265 0
-8919 3253 3267 0
-8919 3253 3262 0
-8919 3253 3263 0
-8919 3253 3265 0
-8919 3254 0
-8919 3254 3262 0
-8919 3254 3263 0
-8919 3254 3265 0
8919 -3254 -3262 -3267 0
8919 -3253 -3263 -3267 0
8919 -3253 -3262 -3268 0
c ((1<=(aux631 + aux634 + aux635))=tv=SATLiteral(8920))
-8920 -3253 -3262 -3267 0
8920 3267 0
8920 3262 0
8920 3263 0
8920 3265 0
8920 3253 0
8920 3253 3262 0
8920 3253 3263 0
8920 3253 3265 0
8920 3254 0
8920 3254 3262 0
8920 3254 3263 0
8920 3254 3265 0
c (((aux637 + aux640 + aux641)<=1)=tv=SATLiteral(8921))
-8921 3292 0
-8921 3286 3291 0
-8921 3287 0
-8921 3289 0
-8921 3277 3291 0
-8921 3277 3286 0
-8921 3277 3287 0
-8921 3277 3289 0
-8921 3278 0
-8921 3278 3286 0
-8921 3278 3287 0
-8921 3278 3289 0
8921 -3278 -3286 -3291 0
8921 -3277 -3287 -3291 0
8921 -3277 -3286 -3292 0
c ((1<=(aux637 + aux640 + aux641))=tv=SATLiteral(8922))
-8922 -3277 -3286 -3291 0
8922 3291 0
8922 3286 0
8922 3287 0
8922 3289 0
8922 3277 0
8922 3277 3286 0
8922 3277 3287 0
8922 3277 3289 0
8922 3278 0
8922 3278 3286 0
8922 3278 3287 0
8922 3278 3289 0
c (((aux643 + aux646 + aux647)<=1)=tv=SATLiteral(8923))
-8923 3316 0
-8923 3310 3315 0
-8923 3311 0
-8923 3313 0
-8923 3301 3315 0
-8923 3301 3310 0
-8923 3301 3311 0
-8923 3301 3313 0
-8923 3302 0
-8923 3302 3310 0
-8923 3302 3311 0
-8923 3302 3313 0
8923 -3302 -3310 -3315 0
8923 -3301 -3311 -3315 0
8923 -3301 -3310 -3316 0
c ((1<=(aux643 + aux646 + aux647))=tv=SATLiteral(8924))
-8924 -3301 -3310 -3315 0
8924 3315 0
8924 3310 0
8924 3311 0
8924 3313 0
8924 3301 0
8924 3301 3310 0
8924 3301 3311 0
8924 3301 3313 0
8924 3302 0
8924 3302 3310 0
8924 3302 3311 0
8924 3302 3313 0
c (((aux649 + aux652 + aux653)<=1)=tv=SATLiteral(8925))
-8925 3340 0
-8925 3334 3339 0
-8925 3335 0
-8925 3337 0
-8925 3325 3339 0
-8925 3325 3334 0
-8925 3325 3335 0
-8925 3325 3337 0
-8925 3326 0
-8925 3326 3334 0
-8925 3326 3335 0
-8925 3326 3337 0
8925 -3326 -3334 -3339 0
8925 -3325 -3335 -3339 0
8925 -3325 -3334 -3340 0
c ((1<=(aux649 + aux652 + aux653))=tv=SATLiteral(8926))
-8926 -3325 -3334 -3339 0
8926 3339 0
8926 3334 0
8926 3335 0
8926 3337 0
8926 3325 0
8926 3325 3334 0
8926 3325 3335 0
8926 3325 3337 0
8926 3326 0
8926 3326 3334 0
8926 3326 3335 0
8926 3326 3337 0
c (((aux655 + aux658 + aux659)<=1)=tv=SATLiteral(8927))
-8927 3364 0
-8927 3358 3363 0
-8927 3359 0
-8927 3361 0
-8927 3349 3363 0
-8927 3349 3358 0
-8927 3349 3359 0
-8927 3349 3361 0
-8927 3350 0
-8927 3350 3358 0
-8927 3350 3359 0
-8927 3350 3361 0
8927 -3350 -3358 -3363 0
8927 -3349 -3359 -3363 0
8927 -3349 -3358 -3364 0
c ((1<=(aux655 + aux658 + aux659))=tv=SATLiteral(8928))
-8928 -3349 -3358 -3363 0
8928 3363 0
8928 3358 0
8928 3359 0
8928 3361 0
8928 3349 0
8928 3349 3358 0
8928 3349 3359 0
8928 3349 3361 0
8928 3350 0
8928 3350 3358 0
8928 3350 3359 0
8928 3350 3361 0
c (((aux661 + aux664 + aux665)<=1)=tv=SATLiteral(8929))
-8929 3388 0
-8929 3382 3387 0
-8929 3383 0
-8929 3385 0
-8929 3373 3387 0
-8929 3373 3382 0
-8929 3373 3383 0
-8929 3373 3385 0
-8929 3374 0
-8929 3374 3382 0
-8929 3374 3383 0
-8929 3374 3385 0
8929 -3374 -3382 -3387 0
8929 -3373 -3383 -3387 0
8929 -3373 -3382 -3388 0
c ((1<=(aux661 + aux664 + aux665))=tv=SATLiteral(8930))
-8930 -3373 -3382 -3387 0
8930 3387 0
8930 3382 0
8930 3383 0
8930 3385 0
8930 3373 0
8930 3373 3382 0
8930 3373 3383 0
8930 3373 3385 0
8930 3374 0
8930 3374 3382 0
8930 3374 3383 0
8930 3374 3385 0
c (((aux667 + aux670 + aux671)<=1)=tv=SATLiteral(8931))
-8931 3412 0
-8931 3406 3411 0
-8931 3407 0
-8931 3409 0
-8931 3397 3411 0
-8931 3397 3406 0
-8931 3397 3407 0
-8931 3397 3409 0
-8931 3398 0
-8931 3398 3406 0
-8931 3398 3407 0
-8931 3398 3409 0
8931 -3398 -3406 -3411 0
8931 -3397 -3407 -3411 0
8931 -3397 -3406 -3412 0
c ((1<=(aux667 + aux670 + aux671))=tv=SATLiteral(8932))
-8932 -3397 -3406 -3411 0
8932 3411 0
8932 3406 0
8932 3407 0
8932 3409 0
8932 3397 0
8932 3397 3406 0
8932 3397 3407 0
8932 3397 3409 0
8932 3398 0
8932 3398 3406 0
8932 3398 3407 0
8932 3398 3409 0
c (((aux673 + aux676 + aux677)<=1)=tv=SATLiteral(8933))
-8933 3436 0
-8933 3430 3435 0
-8933 3431 0
-8933 3433 0
-8933 3421 3435 0
-8933 3421 3430 0
-8933 3421 3431 0
-8933 3421 3433 0
-8933 3422 0
-8933 3422 3430 0
-8933 3422 3431 0
-8933 3422 3433 0
8933 -3422 -3430 -3435 0
8933 -3421 -3431 -3435 0
8933 -3421 -3430 -3436 0
c ((1<=(aux673 + aux676 + aux677))=tv=SATLiteral(8934))
-8934 -3421 -3430 -3435 0
8934 3435 0
8934 3430 0
8934 3431 0
8934 3433 0
8934 3421 0
8934 3421 3430 0
8934 3421 3431 0
8934 3421 3433 0
8934 3422 0
8934 3422 3430 0
8934 3422 3431 0
8934 3422 3433 0
c (((aux679 + aux682 + aux683)<=1)=tv=SATLiteral(8935))
-8935 3460 0
-8935 3454 3459 0
-8935 3455 0
-8935 3457 0
-8935 3445 3459 0
-8935 3445 3454 0
-8935 3445 3455 0
-8935 3445 3457 0
-8935 3446 0
-8935 3446 3454 0
-8935 3446 3455 0
-8935 3446 3457 0
8935 -3446 -3454 -3459 0
8935 -3445 -3455 -3459 0
8935 -3445 -3454 -3460 0
c ((1<=(aux679 + aux682 + aux683))=tv=SATLiteral(8936))
-8936 -3445 -3454 -3459 0
8936 3459 0
8936 3454 0
8936 3455 0
8936 3457 0
8936 3445 0
8936 3445 3454 0
8936 3445 3455 0
8936 3445 3457 0
8936 3446 0
8936 3446 3454 0
8936 3446 3455 0
8936 3446 3457 0
c (((aux685 + aux688 + aux689)<=1)=tv=SATLiteral(8937))
-8937 3484 0
-8937 3478 3483 0
-8937 3479 0
-8937 3481 0
-8937 3469 3483 0
-8937 3469 3478 0
-8937 3469 3479 0
-8937 3469 3481 0
-8937 3470 0
-8937 3470 3478 0
-8937 3470 3479 0
-8937 3470 3481 0
8937 -3470 -3478 -3483 0
8937 -3469 -3479 -3483 0
8937 -3469 -3478 -3484 0
c ((1<=(aux685 + aux688 + aux689))=tv=SATLiteral(8938))
-8938 -3469 -3478 -3483 0
8938 3483 0
8938 3478 0
8938 3479 0
8938 3481 0
8938 3469 0
8938 3469 3478 0
8938 3469 3479 0
8938 3469 3481 0
8938 3470 0
8938 3470 3478 0
8938 3470 3479 0
8938 3470 3481 0
c (((aux691 + aux694 + aux695)<=1)=tv=SATLiteral(8939))
-8939 3508 0
-8939 3502 3507 0
-8939 3503 0
-8939 3505 0
-8939 3493 3507 0
-8939 3493 3502 0
-8939 3493 3503 0
-8939 3493 3505 0
-8939 3494 0
-8939 3494 3502 0
-8939 3494 3503 0
-8939 3494 3505 0
8939 -3494 -3502 -3507 0
8939 -3493 -3503 -3507 0
8939 -3493 -3502 -3508 0
c ((1<=(aux691 + aux694 + aux695))=tv=SATLiteral(8940))
-8940 -3493 -3502 -3507 0
8940 3507 0
8940 3502 0
8940 3503 0
8940 3505 0
8940 3493 0
8940 3493 3502 0
8940 3493 3503 0
8940 3493 3505 0
8940 3494 0
8940 3494 3502 0
8940 3494 3503 0
8940 3494 3505 0
c (((aux697 + aux700 + aux701)<=1)=tv=SATLiteral(8941))
-8941 3532 0
-8941 3526 3531 0
-8941 3527 0
-8941 3529 0
-8941 3517 3531 0
-8941 3517 3526 0
-8941 3517 3527 0
-8941 3517 3529 0
-8941 3518 0
-8941 3518 3526 0
-8941 3518 3527 0
-8941 3518 3529 0
8941 -3518 -3526 -3531 0
8941 -3517 -3527 -3531 0
8941 -3517 -3526 -3532 0
c ((1<=(aux697 + aux700 + aux701))=tv=SATLiteral(8942))
-8942 -3517 -3526 -3531 0
8942 3531 0
8942 3526 0
8942 3527 0
8942 3529 0
8942 3517 0
8942 3517 3526 0
8942 3517 3527 0
8942 3517 3529 0
8942 3518 0
8942 3518 3526 0
8942 3518 3527 0
8942 3518 3529 0
c (((aux703 + aux706 + aux707)<=1)=tv=SATLiteral(8943))
-8943 3556 0
-8943 3550 3555 0
-8943 3551 0
-8943 3553 0
-8943 3541 3555 0
-8943 3541 3550 0
-8943 3541 3551 0
-8943 3541 3553 0
-8943 3542 0
-8943 3542 3550 0
-8943 3542 3551 0
-8943 3542 3553 0
8943 -3542 -3550 -3555 0
8943 -3541 -3551 -3555 0
8943 -3541 -3550 -3556 0
c ((1<=(aux703 + aux706 + aux707))=tv=SATLiteral(8944))
-8944 -3541 -3550 -3555 0
8944 3555 0
8944 3550 0
8944 3551 0
8944 3553 0
8944 3541 0
8944 3541 3550 0
8944 3541 3551 0
8944 3541 3553 0
8944 3542 0
8944 3542 3550 0
8944 3542 3551 0
8944 3542 3553 0
c (((aux709 + aux712 + aux713)<=1)=tv=SATLiteral(8945))
-8945 3580 0
-8945 3574 3579 0
-8945 3575 0
-8945 3577 0
-8945 3565 3579 0
-8945 3565 3574 0
-8945 3565 3575 0
-8945 3565 3577 0
-8945 3566 0
-8945 3566 3574 0
-8945 3566 3575 0
-8945 3566 3577 0
8945 -3566 -3574 -3579 0
8945 -3565 -3575 -3579 0
8945 -3565 -3574 -3580 0
c ((1<=(aux709 + aux712 + aux713))=tv=SATLiteral(8946))
-8946 -3565 -3574 -3579 0
8946 3579 0
8946 3574 0
8946 3575 0
8946 3577 0
8946 3565 0
8946 3565 3574 0
8946 3565 3575 0
8946 3565 3577 0
8946 3566 0
8946 3566 3574 0
8946 3566 3575 0
8946 3566 3577 0
c (((aux715 + aux718 + aux719)<=1)=tv=SATLiteral(8947))
-8947 3604 0
-8947 3598 3603 0
-8947 3599 0
-8947 3601 0
-8947 3589 3603 0
-8947 3589 3598 0
-8947 3589 3599 0
-8947 3589 3601 0
-8947 3590 0
-8947 3590 3598 0
-8947 3590 3599 0
-8947 3590 3601 0
8947 -3590 -3598 -3603 0
8947 -3589 -3599 -3603 0
8947 -3589 -3598 -3604 0
c ((1<=(aux715 + aux718 + aux719))=tv=SATLiteral(8948))
-8948 -3589 -3598 -3603 0
8948 3603 0
8948 3598 0
8948 3599 0
8948 3601 0
8948 3589 0
8948 3589 3598 0
8948 3589 3599 0
8948 3589 3601 0
8948 3590 0
8948 3590 3598 0
8948 3590 3599 0
8948 3590 3601 0
c (((aux721 + aux724 + aux725)<=1)=tv=SATLiteral(8949))
-8949 3628 0
-8949 3622 3627 0
-8949 3623 0
-8949 3625 0
-8949 3613 3627 0
-8949 3613 3622 0
-8949 3613 3623 0
-8949 3613 3625 0
-8949 3614 0
-8949 3614 3622 0
-8949 3614 3623 0
-8949 3614 3625 0
8949 -3614 -3622 -3627 0
8949 -3613 -3623 -3627 0
8949 -3613 -3622 -3628 0
c ((1<=(aux721 + aux724 + aux725))=tv=SATLiteral(8950))
-8950 -3613 -3622 -3627 0
8950 3627 0
8950 3622 0
8950 3623 0
8950 3625 0
8950 3613 0
8950 3613 3622 0
8950 3613 3623 0
8950 3613 3625 0
8950 3614 0
8950 3614 3622 0
8950 3614 3623 0
8950 3614 3625 0
c (((aux727 + aux730 + aux731)<=1)=tv=SATLiteral(8951))
-8951 3652 0
-8951 3646 3651 0
-8951 3647 0
-8951 3649 0
-8951 3637 3651 0
-8951 3637 3646 0
-8951 3637 3647 0
-8951 3637 3649 0
-8951 3638 0
-8951 3638 3646 0
-8951 3638 3647 0
-8951 3638 3649 0
8951 -3638 -3646 -3651 0
8951 -3637 -3647 -3651 0
8951 -3637 -3646 -3652 0
c ((1<=(aux727 + aux730 + aux731))=tv=SATLiteral(8952))
-8952 -3637 -3646 -3651 0
8952 3651 0
8952 3646 0
8952 3647 0
8952 3649 0
8952 3637 0
8952 3637 3646 0
8952 3637 3647 0
8952 3637 3649 0
8952 3638 0
8952 3638 3646 0
8952 3638 3647 0
8952 3638 3649 0
c (((aux733 + aux736 + aux737)<=1)=tv=SATLiteral(8953))
-8953 3676 0
-8953 3670 3675 0
-8953 3671 0
-8953 3673 0
-8953 3661 3675 0
-8953 3661 3670 0
-8953 3661 3671 0
-8953 3661 3673 0
-8953 3662 0
-8953 3662 3670 0
-8953 3662 3671 0
-8953 3662 3673 0
8953 -3662 -3670 -3675 0
8953 -3661 -3671 -3675 0
8953 -3661 -3670 -3676 0
c ((1<=(aux733 + aux736 + aux737))=tv=SATLiteral(8954))
-8954 -3661 -3670 -3675 0
8954 3675 0
8954 3670 0
8954 3671 0
8954 3673 0
8954 3661 0
8954 3661 3670 0
8954 3661 3671 0
8954 3661 3673 0
8954 3662 0
8954 3662 3670 0
8954 3662 3671 0
8954 3662 3673 0
c (((aux739 + aux742 + aux743)<=1)=tv=SATLiteral(8955))
-8955 3700 0
-8955 3694 3699 0
-8955 3695 0
-8955 3697 0
-8955 3685 3699 0
-8955 3685 3694 0
-8955 3685 3695 0
-8955 3685 3697 0
-8955 3686 0
-8955 3686 3694 0
-8955 3686 3695 0
-8955 3686 3697 0
8955 -3686 -3694 -3699 0
8955 -3685 -3695 -3699 0
8955 -3685 -3694 -3700 0
c ((1<=(aux739 + aux742 + aux743))=tv=SATLiteral(8956))
-8956 -3685 -3694 -3699 0
8956 3699 0
8956 3694 0
8956 3695 0
8956 3697 0
8956 3685 0
8956 3685 3694 0
8956 3685 3695 0
8956 3685 3697 0
8956 3686 0
8956 3686 3694 0
8956 3686 3695 0
8956 3686 3697 0
c (((aux745 + aux748 + aux749)<=1)=tv=SATLiteral(8957))
-8957 3724 0
-8957 3718 3723 0
-8957 3719 0
-8957 3721 0
-8957 3709 3723 0
-8957 3709 3718 0
-8957 3709 3719 0
-8957 3709 3721 0
-8957 3710 0
-8957 3710 3718 0
-8957 3710 3719 0
-8957 3710 3721 0
8957 -3710 -3718 -3723 0
8957 -3709 -3719 -3723 0
8957 -3709 -3718 -3724 0
c ((1<=(aux745 + aux748 + aux749))=tv=SATLiteral(8958))
-8958 -3709 -3718 -3723 0
8958 3723 0
8958 3718 0
8958 3719 0
8958 3721 0
8958 3709 0
8958 3709 3718 0
8958 3709 3719 0
8958 3709 3721 0
8958 3710 0
8958 3710 3718 0
8958 3710 3719 0
8958 3710 3721 0
c (((aux751 + aux754 + aux755)<=1)=tv=SATLiteral(8959))
-8959 3748 0
-8959 3742 3747 0
-8959 3743 0
-8959 3745 0
-8959 3733 3747 0
-8959 3733 3742 0
-8959 3733 3743 0
-8959 3733 3745 0
-8959 3734 0
-8959 3734 3742 0
-8959 3734 3743 0
-8959 3734 3745 0
8959 -3734 -3742 -3747 0
8959 -3733 -3743 -3747 0
8959 -3733 -3742 -3748 0
c ((1<=(aux751 + aux754 + aux755))=tv=SATLiteral(8960))
-8960 -3733 -3742 -3747 0
8960 3747 0
8960 3742 0
8960 3743 0
8960 3745 0
8960 3733 0
8960 3733 3742 0
8960 3733 3743 0
8960 3733 3745 0
8960 3734 0
8960 3734 3742 0
8960 3734 3743 0
8960 3734 3745 0
c (((aux757 + aux760 + aux761)<=1)=tv=SATLiteral(8961))
-8961 3772 0
-8961 3766 3771 0
-8961 3767 0
-8961 3769 0
-8961 3757 3771 0
-8961 3757 3766 0
-8961 3757 3767 0
-8961 3757 3769 0
-8961 3758 0
-8961 3758 3766 0
-8961 3758 3767 0
-8961 3758 3769 0
8961 -3758 -3766 -3771 0
8961 -3757 -3767 -3771 0
8961 -3757 -3766 -3772 0
c ((1<=(aux757 + aux760 + aux761))=tv=SATLiteral(8962))
-8962 -3757 -3766 -3771 0
8962 3771 0
8962 3766 0
8962 3767 0
8962 3769 0
8962 3757 0
8962 3757 3766 0
8962 3757 3767 0
8962 3757 3769 0
8962 3758 0
8962 3758 3766 0
8962 3758 3767 0
8962 3758 3769 0
c (((aux763 + aux766 + aux767)<=1)=tv=SATLiteral(8963))
-8963 3796 0
-8963 3790 3795 0
-8963 3791 0
-8963 3793 0
-8963 3781 3795 0
-8963 3781 3790 0
-8963 3781 3791 0
-8963 3781 3793 0
-8963 3782 0
-8963 3782 3790 0
-8963 3782 3791 0
-8963 3782 3793 0
8963 -3782 -3790 -3795 0
8963 -3781 -3791 -3795 0
8963 -3781 -3790 -3796 0
c ((1<=(aux763 + aux766 + aux767))=tv=SATLiteral(8964))
-8964 -3781 -3790 -3795 0
8964 3795 0
8964 3790 0
8964 3791 0
8964 3793 0
8964 3781 0
8964 3781 3790 0
8964 3781 3791 0
8964 3781 3793 0
8964 3782 0
8964 3782 3790 0
8964 3782 3791 0
8964 3782 3793 0
c (((aux769 + aux772 + aux773)<=1)=tv=SATLiteral(8965))
-8965 3820 0
-8965 3814 3819 0
-8965 3815 0
-8965 3817 0
-8965 3805 3819 0
-8965 3805 3814 0
-8965 3805 3815 0
-8965 3805 3817 0
-8965 3806 0
-8965 3806 3814 0
-8965 3806 3815 0
-8965 3806 3817 0
8965 -3806 -3814 -3819 0
8965 -3805 -3815 -3819 0
8965 -3805 -3814 -3820 0
c ((1<=(aux769 + aux772 + aux773))=tv=SATLiteral(8966))
-8966 -3805 -3814 -3819 0
8966 3819 0
8966 3814 0
8966 3815 0
8966 3817 0
8966 3805 0
8966 3805 3814 0
8966 3805 3815 0
8966 3805 3817 0
8966 3806 0
8966 3806 3814 0
8966 3806 3815 0
8966 3806 3817 0
c (((aux775 + aux778 + aux779)<=1)=tv=SATLiteral(8967))
-8967 3844 0
-8967 3838 3843 0
-8967 3839 0
-8967 3841 0
-8967 3829 3843 0
-8967 3829 3838 0
-8967 3829 3839 0
-8967 3829 3841 0
-8967 3830 0
-8967 3830 3838 0
-8967 3830 3839 0
-8967 3830 3841 0
8967 -3830 -3838 -3843 0
8967 -3829 -3839 -3843 0
8967 -3829 -3838 -3844 0
c ((1<=(aux775 + aux778 + aux779))=tv=SATLiteral(8968))
-8968 -3829 -3838 -3843 0
8968 3843 0
8968 3838 0
8968 3839 0
8968 3841 0
8968 3829 0
8968 3829 3838 0
8968 3829 3839 0
8968 3829 3841 0
8968 3830 0
8968 3830 3838 0
8968 3830 3839 0
8968 3830 3841 0
c (((aux781 + aux784 + aux785)<=1)=tv=SATLiteral(8969))
-8969 3868 0
-8969 3862 3867 0
-8969 3863 0
-8969 3865 0
-8969 3853 3867 0
-8969 3853 3862 0
-8969 3853 3863 0
-8969 3853 3865 0
-8969 3854 0
-8969 3854 3862 0
-8969 3854 3863 0
-8969 3854 3865 0
8969 -3854 -3862 -3867 0
8969 -3853 -3863 -3867 0
8969 -3853 -3862 -3868 0
c ((1<=(aux781 + aux784 + aux785))=tv=SATLiteral(8970))
-8970 -3853 -3862 -3867 0
8970 3867 0
8970 3862 0
8970 3863 0
8970 3865 0
8970 3853 0
8970 3853 3862 0
8970 3853 3863 0
8970 3853 3865 0
8970 3854 0
8970 3854 3862 0
8970 3854 3863 0
8970 3854 3865 0
c (((aux787 + aux790 + aux791)<=1)=tv=SATLiteral(8971))
-8971 3892 0
-8971 3886 3891 0
-8971 3887 0
-8971 3889 0
-8971 3877 3891 0
-8971 3877 3886 0
-8971 3877 3887 0
-8971 3877 3889 0
-8971 3878 0
-8971 3878 3886 0
-8971 3878 3887 0
-8971 3878 3889 0
8971 -3878 -3886 -3891 0
8971 -3877 -3887 -3891 0
8971 -3877 -3886 -3892 0
c ((1<=(aux787 + aux790 + aux791))=tv=SATLiteral(8972))
-8972 -3877 -3886 -3891 0
8972 3891 0
8972 3886 0
8972 3887 0
8972 3889 0
8972 3877 0
8972 3877 3886 0
8972 3877 3887 0
8972 3877 3889 0
8972 3878 0
8972 3878 3886 0
8972 3878 3887 0
8972 3878 3889 0
c (((aux793 + aux796 + aux797)<=1)=tv=SATLiteral(8973))
-8973 3916 0
-8973 3910 3915 0
-8973 3911 0
-8973 3913 0
-8973 3901 3915 0
-8973 3901 3910 0
-8973 3901 3911 0
-8973 3901 3913 0
-8973 3902 0
-8973 3902 3910 0
-8973 3902 3911 0
-8973 3902 3913 0
8973 -3902 -3910 -3915 0
8973 -3901 -3911 -3915 0
8973 -3901 -3910 -3916 0
c ((1<=(aux793 + aux796 + aux797))=tv=SATLiteral(8974))
-8974 -3901 -3910 -3915 0
8974 3915 0
8974 3910 0
8974 3911 0
8974 3913 0
8974 3901 0
8974 3901 3910 0
8974 3901 3911 0
8974 3901 3913 0
8974 3902 0
8974 3902 3910 0
8974 3902 3911 0
8974 3902 3913 0
c (((aux799 + aux802 + aux803)<=1)=tv=SATLiteral(8975))
-8975 3940 0
-8975 3934 3939 0
-8975 3935 0
-8975 3937 0
-8975 3925 3939 0
-8975 3925 3934 0
-8975 3925 3935 0
-8975 3925 3937 0
-8975 3926 0
-8975 3926 3934 0
-8975 3926 3935 0
-8975 3926 3937 0
8975 -3926 -3934 -3939 0
8975 -3925 -3935 -3939 0
8975 -3925 -3934 -3940 0
c ((1<=(aux799 + aux802 + aux803))=tv=SATLiteral(8976))
-8976 -3925 -3934 -3939 0
8976 3939 0
8976 3934 0
8976 3935 0
8976 3937 0
8976 3925 0
8976 3925 3934 0
8976 3925 3935 0
8976 3925 3937 0
8976 3926 0
8976 3926 3934 0
8976 3926 3935 0
8976 3926 3937 0
c (((aux805 + aux808 + aux809)<=1)=tv=SATLiteral(8977))
-8977 3964 0
-8977 3958 3963 0
-8977 3959 0
-8977 3961 0
-8977 3949 3963 0
-8977 3949 3958 0
-8977 3949 3959 0
-8977 3949 3961 0
-8977 3950 0
-8977 3950 3958 0
-8977 3950 3959 0
-8977 3950 3961 0
8977 -3950 -3958 -3963 0
8977 -3949 -3959 -3963 0
8977 -3949 -3958 -3964 0
c ((1<=(aux805 + aux808 + aux809))=tv=SATLiteral(8978))
-8978 -3949 -3958 -3963 0
8978 3963 0
8978 3958 0
8978 3959 0
8978 3961 0
8978 3949 0
8978 3949 3958 0
8978 3949 3959 0
8978 3949 3961 0
8978 3950 0
8978 3950 3958 0
8978 3950 3959 0
8978 3950 3961 0
c (((aux811 + aux814 + aux815)<=1)=tv=SATLiteral(8979))
-8979 3988 0
-8979 3982 3987 0
-8979 3983 0
-8979 3985 0
-8979 3973 3987 0
-8979 3973 3982 0
-8979 3973 3983 0
-8979 3973 3985 0
-8979 3974 0
-8979 3974 3982 0
-8979 3974 3983 0
-8979 3974 3985 0
8979 -3974 -3982 -3987 0
8979 -3973 -3983 -3987 0
8979 -3973 -3982 -3988 0
c ((1<=(aux811 + aux814 + aux815))=tv=SATLiteral(8980))
-8980 -3973 -3982 -3987 0
8980 3987 0
8980 3982 0
8980 3983 0
8980 3985 0
8980 3973 0
8980 3973 3982 0
8980 3973 3983 0
8980 3973 3985 0
8980 3974 0
8980 3974 3982 0
8980 3974 3983 0
8980 3974 3985 0
c (((aux817 + aux820 + aux821)<=1)=tv=SATLiteral(8981))
-8981 4012 0
-8981 4006 4011 0
-8981 4007 0
-8981 4009 0
-8981 3997 4011 0
-8981 3997 4006 0
-8981 3997 4007 0
-8981 3997 4009 0
-8981 3998 0
-8981 3998 4006 0
-8981 3998 4007 0
-8981 3998 4009 0
8981 -3998 -4006 -4011 0
8981 -3997 -4007 -4011 0
8981 -3997 -4006 -4012 0
c ((1<=(aux817 + aux820 + aux821))=tv=SATLiteral(8982))
-8982 -3997 -4006 -4011 0
8982 4011 0
8982 4006 0
8982 4007 0
8982 4009 0
8982 3997 0
8982 3997 4006 0
8982 3997 4007 0
8982 3997 4009 0
8982 3998 0
8982 3998 4006 0
8982 3998 4007 0
8982 3998 4009 0
c (((aux823 + aux826 + aux827)<=1)=tv=SATLiteral(8983))
-8983 4036 0
-8983 4030 4035 0
-8983 4031 0
-8983 4033 0
-8983 4021 4035 0
-8983 4021 4030 0
-8983 4021 4031 0
-8983 4021 4033 0
-8983 4022 0
-8983 4022 4030 0
-8983 4022 4031 0
-8983 4022 4033 0
8983 -4022 -4030 -4035 0
8983 -4021 -4031 -4035 0
8983 -4021 -4030 -4036 0
c ((1<=(aux823 + aux826 + aux827))=tv=SATLiteral(8984))
-8984 -4021 -4030 -4035 0
8984 4035 0
8984 4030 0
8984 4031 0
8984 4033 0
8984 4021 0
8984 4021 4030 0
8984 4021 4031 0
8984 4021 4033 0
8984 4022 0
8984 4022 4030 0
8984 4022 4031 0
8984 4022 4033 0
c (((aux829 + aux832 + aux833)<=1)=tv=SATLiteral(8985))
-8985 4060 0
-8985 4054 4059 0
-8985 4055 0
-8985 4057 0
-8985 4045 4059 0
-8985 4045 4054 0
-8985 4045 4055 0
-8985 4045 4057 0
-8985 4046 0
-8985 4046 4054 0
-8985 4046 4055 0
-8985 4046 4057 0
8985 -4046 -4054 -4059 0
8985 -4045 -4055 -4059 0
8985 -4045 -4054 -4060 0
c ((1<=(aux829 + aux832 + aux833))=tv=SATLiteral(8986))
-8986 -4045 -4054 -4059 0
8986 4059 0
8986 4054 0
8986 4055 0
8986 4057 0
8986 4045 0
8986 4045 4054 0
8986 4045 4055 0
8986 4045 4057 0
8986 4046 0
8986 4046 4054 0
8986 4046 4055 0
8986 4046 4057 0
c (((aux835 + aux838 + aux839)<=1)=tv=SATLiteral(8987))
-8987 4084 0
-8987 4078 4083 0
-8987 4079 0
-8987 4081 0
-8987 4069 4083 0
-8987 4069 4078 0
-8987 4069 4079 0
-8987 4069 4081 0
-8987 4070 0
-8987 4070 4078 0
-8987 4070 4079 0
-8987 4070 4081 0
8987 -4070 -4078 -4083 0
8987 -4069 -4079 -4083 0
8987 -4069 -4078 -4084 0
c ((1<=(aux835 + aux838 + aux839))=tv=SATLiteral(8988))
-8988 -4069 -4078 -4083 0
8988 4083 0
8988 4078 0
8988 4079 0
8988 4081 0
8988 4069 0
8988 4069 4078 0
8988 4069 4079 0
8988 4069 4081 0
8988 4070 0
8988 4070 4078 0
8988 4070 4079 0
8988 4070 4081 0
c (((aux841 + aux844 + aux845)<=1)=tv=SATLiteral(8989))
-8989 4108 0
-8989 4102 4107 0
-8989 4103 0
-8989 4105 0
-8989 4093 4107 0
-8989 4093 4102 0
-8989 4093 4103 0
-8989 4093 4105 0
-8989 4094 0
-8989 4094 4102 0
-8989 4094 4103 0
-8989 4094 4105 0
8989 -4094 -4102 -4107 0
8989 -4093 -4103 -4107 0
8989 -4093 -4102 -4108 0
c ((1<=(aux841 + aux844 + aux845))=tv=SATLiteral(8990))
-8990 -4093 -4102 -4107 0
8990 4107 0
8990 4102 0
8990 4103 0
8990 4105 0
8990 4093 0
8990 4093 4102 0
8990 4093 4103 0
8990 4093 4105 0
8990 4094 0
8990 4094 4102 0
8990 4094 4103 0
8990 4094 4105 0
c (((aux847 + aux850 + aux851)<=1)=tv=SATLiteral(8991))
-8991 4132 0
-8991 4126 4131 0
-8991 4127 0
-8991 4129 0
-8991 4117 4131 0
-8991 4117 4126 0
-8991 4117 4127 0
-8991 4117 4129 0
-8991 4118 0
-8991 4118 4126 0
-8991 4118 4127 0
-8991 4118 4129 0
8991 -4118 -4126 -4131 0
8991 -4117 -4127 -4131 0
8991 -4117 -4126 -4132 0
c ((1<=(aux847 + aux850 + aux851))=tv=SATLiteral(8992))
-8992 -4117 -4126 -4131 0
8992 4131 0
8992 4126 0
8992 4127 0
8992 4129 0
8992 4117 0
8992 4117 4126 0
8992 4117 4127 0
8992 4117 4129 0
8992 4118 0
8992 4118 4126 0
8992 4118 4127 0
8992 4118 4129 0
c (((aux853 + aux856 + aux857)<=1)=tv=SATLiteral(8993))
-8993 4156 0
-8993 4150 4155 0
-8993 4151 0
-8993 4153 0
-8993 4141 4155 0
-8993 4141 4150 0
-8993 4141 4151 0
-8993 4141 4153 0
-8993 4142 0
-8993 4142 4150 0
-8993 4142 4151 0
-8993 4142 4153 0
8993 -4142 -4150 -4155 0
8993 -4141 -4151 -4155 0
8993 -4141 -4150 -4156 0
c ((1<=(aux853 + aux856 + aux857))=tv=SATLiteral(8994))
-8994 -4141 -4150 -4155 0
8994 4155 0
8994 4150 0
8994 4151 0
8994 4153 0
8994 4141 0
8994 4141 4150 0
8994 4141 4151 0
8994 4141 4153 0
8994 4142 0
8994 4142 4150 0
8994 4142 4151 0
8994 4142 4153 0
c (((aux859 + aux862 + aux863)<=1)=tv=SATLiteral(8995))
-8995 4180 0
-8995 4174 4179 0
-8995 4175 0
-8995 4177 0
-8995 4165 4179 0
-8995 4165 4174 0
-8995 4165 4175 0
-8995 4165 4177 0
-8995 4166 0
-8995 4166 4174 0
-8995 4166 4175 0
-8995 4166 4177 0
8995 -4166 -4174 -4179 0
8995 -4165 -4175 -4179 0
8995 -4165 -4174 -4180 0
c ((1<=(aux859 + aux862 + aux863))=tv=SATLiteral(8996))
-8996 -4165 -4174 -4179 0
8996 4179 0
8996 4174 0
8996 4175 0
8996 4177 0
8996 4165 0
8996 4165 4174 0
8996 4165 4175 0
8996 4165 4177 0
8996 4166 0
8996 4166 4174 0
8996 4166 4175 0
8996 4166 4177 0
c (((aux865 + aux868 + aux869)<=1)=tv=SATLiteral(8997))
-8997 4204 0
-8997 4198 4203 0
-8997 4199 0
-8997 4201 0
-8997 4189 4203 0
-8997 4189 4198 0
-8997 4189 4199 0
-8997 4189 4201 0
-8997 4190 0
-8997 4190 4198 0
-8997 4190 4199 0
-8997 4190 4201 0
8997 -4190 -4198 -4203 0
8997 -4189 -4199 -4203 0
8997 -4189 -4198 -4204 0
c ((1<=(aux865 + aux868 + aux869))=tv=SATLiteral(8998))
-8998 -4189 -4198 -4203 0
8998 4203 0
8998 4198 0
8998 4199 0
8998 4201 0
8998 4189 0
8998 4189 4198 0
8998 4189 4199 0
8998 4189 4201 0
8998 4190 0
8998 4190 4198 0
8998 4190 4199 0
8998 4190 4201 0
c (((aux871 + aux874 + aux875)<=1)=tv=SATLiteral(8999))
-8999 4228 0
-8999 4222 4227 0
-8999 4223 0
-8999 4225 0
-8999 4213 4227 0
-8999 4213 4222 0
-8999 4213 4223 0
-8999 4213 4225 0
-8999 4214 0
-8999 4214 4222 0
-8999 4214 4223 0
-8999 4214 4225 0
8999 -4214 -4222 -4227 0
8999 -4213 -4223 -4227 0
8999 -4213 -4222 -4228 0
c ((1<=(aux871 + aux874 + aux875))=tv=SATLiteral(9000))
-9000 -4213 -4222 -4227 0
9000 4227 0
9000 4222 0
9000 4223 0
9000 4225 0
9000 4213 0
9000 4213 4222 0
9000 4213 4223 0
9000 4213 4225 0
9000 4214 0
9000 4214 4222 0
9000 4214 4223 0
9000 4214 4225 0
c (((aux877 + aux880 + aux881)<=1)=tv=SATLiteral(9001))
-9001 4252 0
-9001 4246 4251 0
-9001 4247 0
-9001 4249 0
-9001 4237 4251 0
-9001 4237 4246 0
-9001 4237 4247 0
-9001 4237 4249 0
-9001 4238 0
-9001 4238 4246 0
-9001 4238 4247 0
-9001 4238 4249 0
9001 -4238 -4246 -4251 0
9001 -4237 -4247 -4251 0
9001 -4237 -4246 -4252 0
c ((1<=(aux877 + aux880 + aux881))=tv=SATLiteral(9002))
-9002 -4237 -4246 -4251 0
9002 4251 0
9002 4246 0
9002 4247 0
9002 4249 0
9002 4237 0
9002 4237 4246 0
9002 4237 4247 0
9002 4237 4249 0
9002 4238 0
9002 4238 4246 0
9002 4238 4247 0
9002 4238 4249 0
c (((aux883 + aux886 + aux887)<=1)=tv=SATLiteral(9003))
-9003 4276 0
-9003 4270 4275 0
-9003 4271 0
-9003 4273 0
-9003 4261 4275 0
-9003 4261 4270 0
-9003 4261 4271 0
-9003 4261 4273 0
-9003 4262 0
-9003 4262 4270 0
-9003 4262 4271 0
-9003 4262 4273 0
9003 -4262 -4270 -4275 0
9003 -4261 -4271 -4275 0
9003 -4261 -4270 -4276 0
c ((1<=(aux883 + aux886 + aux887))=tv=SATLiteral(9004))
-9004 -4261 -4270 -4275 0
9004 4275 0
9004 4270 0
9004 4271 0
9004 4273 0
9004 4261 0
9004 4261 4270 0
9004 4261 4271 0
9004 4261 4273 0
9004 4262 0
9004 4262 4270 0
9004 4262 4271 0
9004 4262 4273 0
c (((aux889 + aux892 + aux893)<=1)=tv=SATLiteral(9005))
-9005 4300 0
-9005 4294 4299 0
-9005 4295 0
-9005 4297 0
-9005 4285 4299 0
-9005 4285 4294 0
-9005 4285 4295 0
-9005 4285 4297 0
-9005 4286 0
-9005 4286 4294 0
-9005 4286 4295 0
-9005 4286 4297 0
9005 -4286 -4294 -4299 0
9005 -4285 -4295 -4299 0
9005 -4285 -4294 -4300 0
c ((1<=(aux889 + aux892 + aux893))=tv=SATLiteral(9006))
-9006 -4285 -4294 -4299 0
9006 4299 0
9006 4294 0
9006 4295 0
9006 4297 0
9006 4285 0
9006 4285 4294 0
9006 4285 4295 0
9006 4285 4297 0
9006 4286 0
9006 4286 4294 0
9006 4286 4295 0
9006 4286 4297 0
c (((aux895 + aux898 + aux899)<=1)=tv=SATLiteral(9007))
-9007 4324 0
-9007 4318 4323 0
-9007 4319 0
-9007 4321 0
-9007 4309 4323 0
-9007 4309 4318 0
-9007 4309 4319 0
-9007 4309 4321 0
-9007 4310 0
-9007 4310 4318 0
-9007 4310 4319 0
-9007 4310 4321 0
9007 -4310 -4318 -4323 0
9007 -4309 -4319 -4323 0
9007 -4309 -4318 -4324 0
c ((1<=(aux895 + aux898 + aux899))=tv=SATLiteral(9008))
-9008 -4309 -4318 -4323 0
9008 4323 0
9008 4318 0
9008 4319 0
9008 4321 0
9008 4309 0
9008 4309 4318 0
9008 4309 4319 0
9008 4309 4321 0
9008 4310 0
9008 4310 4318 0
9008 4310 4319 0
9008 4310 4321 0
c (((aux901 + aux904 + aux905)<=1)=tv=SATLiteral(9009))
-9009 4348 0
-9009 4342 4347 0
-9009 4343 0
-9009 4345 0
-9009 4333 4347 0
-9009 4333 4342 0
-9009 4333 4343 0
-9009 4333 4345 0
-9009 4334 0
-9009 4334 4342 0
-9009 4334 4343 0
-9009 4334 4345 0
9009 -4334 -4342 -4347 0
9009 -4333 -4343 -4347 0
9009 -4333 -4342 -4348 0
c ((1<=(aux901 + aux904 + aux905))=tv=SATLiteral(9010))
-9010 -4333 -4342 -4347 0
9010 4347 0
9010 4342 0
9010 4343 0
9010 4345 0
9010 4333 0
9010 4333 4342 0
9010 4333 4343 0
9010 4333 4345 0
9010 4334 0
9010 4334 4342 0
9010 4334 4343 0
9010 4334 4345 0
c (((aux907 + aux910 + aux911)<=1)=tv=SATLiteral(9011))
-9011 4372 0
-9011 4366 4371 0
-9011 4367 0
-9011 4369 0
-9011 4357 4371 0
-9011 4357 4366 0
-9011 4357 4367 0
-9011 4357 4369 0
-9011 4358 0
-9011 4358 4366 0
-9011 4358 4367 0
-9011 4358 4369 0
9011 -4358 -4366 -4371 0
9011 -4357 -4367 -4371 0
9011 -4357 -4366 -4372 0
c ((1<=(aux907 + aux910 + aux911))=tv=SATLiteral(9012))
-9012 -4357 -4366 -4371 0
9012 4371 0
9012 4366 0
9012 4367 0
9012 4369 0
9012 4357 0
9012 4357 4366 0
9012 4357 4367 0
9012 4357 4369 0
9012 4358 0
9012 4358 4366 0
9012 4358 4367 0
9012 4358 4369 0
c (((aux913 + aux916 + aux917)<=1)=tv=SATLiteral(9013))
-9013 4396 0
-9013 4390 4395 0
-9013 4391 0
-9013 4393 0
-9013 4381 4395 0
-9013 4381 4390 0
-9013 4381 4391 0
-9013 4381 4393 0
-9013 4382 0
-9013 4382 4390 0
-9013 4382 4391 0
-9013 4382 4393 0
9013 -4382 -4390 -4395 0
9013 -4381 -4391 -4395 0
9013 -4381 -4390 -4396 0
c ((1<=(aux913 + aux916 + aux917))=tv=SATLiteral(9014))
-9014 -4381 -4390 -4395 0
9014 4395 0
9014 4390 0
9014 4391 0
9014 4393 0
9014 4381 0
9014 4381 4390 0
9014 4381 4391 0
9014 4381 4393 0
9014 4382 0
9014 4382 4390 0
9014 4382 4391 0
9014 4382 4393 0
c (((aux919 + aux922 + aux923)<=1)=tv=SATLiteral(9015))
-9015 4420 0
-9015 4414 4419 0
-9015 4415 0
-9015 4417 0
-9015 4405 4419 0
-9015 4405 4414 0
-9015 4405 4415 0
-9015 4405 4417 0
-9015 4406 0
-9015 4406 4414 0
-9015 4406 4415 0
-9015 4406 4417 0
9015 -4406 -4414 -4419 0
9015 -4405 -4415 -4419 0
9015 -4405 -4414 -4420 0
c ((1<=(aux919 + aux922 + aux923))=tv=SATLiteral(9016))
-9016 -4405 -4414 -4419 0
9016 4419 0
9016 4414 0
9016 4415 0
9016 4417 0
9016 4405 0
9016 4405 4414 0
9016 4405 4415 0
9016 4405 4417 0
9016 4406 0
9016 4406 4414 0
9016 4406 4415 0
9016 4406 4417 0
c (((aux925 + aux928 + aux929)<=1)=tv=SATLiteral(9017))
-9017 4444 0
-9017 4438 4443 0
-9017 4439 0
-9017 4441 0
-9017 4429 4443 0
-9017 4429 4438 0
-9017 4429 4439 0
-9017 4429 4441 0
-9017 4430 0
-9017 4430 4438 0
-9017 4430 4439 0
-9017 4430 4441 0
9017 -4430 -4438 -4443 0
9017 -4429 -4439 -4443 0
9017 -4429 -4438 -4444 0
c ((1<=(aux925 + aux928 + aux929))=tv=SATLiteral(9018))
-9018 -4429 -4438 -4443 0
9018 4443 0
9018 4438 0
9018 4439 0
9018 4441 0
9018 4429 0
9018 4429 4438 0
9018 4429 4439 0
9018 4429 4441 0
9018 4430 0
9018 4430 4438 0
9018 4430 4439 0
9018 4430 4441 0
c (((aux931 + aux934 + aux935)<=1)=tv=SATLiteral(9019))
-9019 4468 0
-9019 4462 4467 0
-9019 4463 0
-9019 4465 0
-9019 4453 4467 0
-9019 4453 4462 0
-9019 4453 4463 0
-9019 4453 4465 0
-9019 4454 0
-9019 4454 4462 0
-9019 4454 4463 0
-9019 4454 4465 0
9019 -4454 -4462 -4467 0
9019 -4453 -4463 -4467 0
9019 -4453 -4462 -4468 0
c ((1<=(aux931 + aux934 + aux935))=tv=SATLiteral(9020))
-9020 -4453 -4462 -4467 0
9020 4467 0
9020 4462 0
9020 4463 0
9020 4465 0
9020 4453 0
9020 4453 4462 0
9020 4453 4463 0
9020 4453 4465 0
9020 4454 0
9020 4454 4462 0
9020 4454 4463 0
9020 4454 4465 0
c (((aux937 + aux940 + aux941)<=1)=tv=SATLiteral(9021))
-9021 4492 0
-9021 4486 4491 0
-9021 4487 0
-9021 4489 0
-9021 4477 4491 0
-9021 4477 4486 0
-9021 4477 4487 0
-9021 4477 4489 0
-9021 4478 0
-9021 4478 4486 0
-9021 4478 4487 0
-9021 4478 4489 0
9021 -4478 -4486 -4491 0
9021 -4477 -4487 -4491 0
9021 -4477 -4486 -4492 0
c ((1<=(aux937 + aux940 + aux941))=tv=SATLiteral(9022))
-9022 -4477 -4486 -4491 0
9022 4491 0
9022 4486 0
9022 4487 0
9022 4489 0
9022 4477 0
9022 4477 4486 0
9022 4477 4487 0
9022 4477 4489 0
9022 4478 0
9022 4478 4486 0
9022 4478 4487 0
9022 4478 4489 0
c (((aux943 + aux946 + aux947)<=1)=tv=SATLiteral(9023))
-9023 4516 0
-9023 4510 4515 0
-9023 4511 0
-9023 4513 0
-9023 4501 4515 0
-9023 4501 4510 0
-9023 4501 4511 0
-9023 4501 4513 0
-9023 4502 0
-9023 4502 4510 0
-9023 4502 4511 0
-9023 4502 4513 0
9023 -4502 -4510 -4515 0
9023 -4501 -4511 -4515 0
9023 -4501 -4510 -4516 0
c ((1<=(aux943 + aux946 + aux947))=tv=SATLiteral(9024))
-9024 -4501 -4510 -4515 0
9024 4515 0
9024 4510 0
9024 4511 0
9024 4513 0
9024 4501 0
9024 4501 4510 0
9024 4501 4511 0
9024 4501 4513 0
9024 4502 0
9024 4502 4510 0
9024 4502 4511 0
9024 4502 4513 0
c (((aux949 + aux952 + aux953)<=1)=tv=SATLiteral(9025))
-9025 4540 0
-9025 4534 4539 0
-9025 4535 0
-9025 4537 0
-9025 4525 4539 0
-9025 4525 4534 0
-9025 4525 4535 0
-9025 4525 4537 0
-9025 4526 0
-9025 4526 4534 0
-9025 4526 4535 0
-9025 4526 4537 0
9025 -4526 -4534 -4539 0
9025 -4525 -4535 -4539 0
9025 -4525 -4534 -4540 0
c ((1<=(aux949 + aux952 + aux953))=tv=SATLiteral(9026))
-9026 -4525 -4534 -4539 0
9026 4539 0
9026 4534 0
9026 4535 0
9026 4537 0
9026 4525 0
9026 4525 4534 0
9026 4525 4535 0
9026 4525 4537 0
9026 4526 0
9026 4526 4534 0
9026 4526 4535 0
9026 4526 4537 0
c (((aux955 + aux958 + aux959)<=1)=tv=SATLiteral(9027))
-9027 4564 0
-9027 4558 4563 0
-9027 4559 0
-9027 4561 0
-9027 4549 4563 0
-9027 4549 4558 0
-9027 4549 4559 0
-9027 4549 4561 0
-9027 4550 0
-9027 4550 4558 0
-9027 4550 4559 0
-9027 4550 4561 0
9027 -4550 -4558 -4563 0
9027 -4549 -4559 -4563 0
9027 -4549 -4558 -4564 0
c ((1<=(aux955 + aux958 + aux959))=tv=SATLiteral(9028))
-9028 -4549 -4558 -4563 0
9028 4563 0
9028 4558 0
9028 4559 0
9028 4561 0
9028 4549 0
9028 4549 4558 0
9028 4549 4559 0
9028 4549 4561 0
9028 4550 0
9028 4550 4558 0
9028 4550 4559 0
9028 4550 4561 0
c (((aux961 + aux964 + aux965)<=1)=tv=SATLiteral(9029))
-9029 4588 0
-9029 4582 4587 0
-9029 4583 0
-9029 4585 0
-9029 4573 4587 0
-9029 4573 4582 0
-9029 4573 4583 0
-9029 4573 4585 0
-9029 4574 0
-9029 4574 4582 0
-9029 4574 4583 0
-9029 4574 4585 0
9029 -4574 -4582 -4587 0
9029 -4573 -4583 -4587 0
9029 -4573 -4582 -4588 0
c ((1<=(aux961 + aux964 + aux965))=tv=SATLiteral(9030))
-9030 -4573 -4582 -4587 0
9030 4587 0
9030 4582 0
9030 4583 0
9030 4585 0
9030 4573 0
9030 4573 4582 0
9030 4573 4583 0
9030 4573 4585 0
9030 4574 0
9030 4574 4582 0
9030 4574 4583 0
9030 4574 4585 0
c (((aux967 + aux970 + aux971)<=1)=tv=SATLiteral(9031))
-9031 4612 0
-9031 4606 4611 0
-9031 4607 0
-9031 4609 0
-9031 4597 4611 0
-9031 4597 4606 0
-9031 4597 4607 0
-9031 4597 4609 0
-9031 4598 0
-9031 4598 4606 0
-9031 4598 4607 0
-9031 4598 4609 0
9031 -4598 -4606 -4611 0
9031 -4597 -4607 -4611 0
9031 -4597 -4606 -4612 0
c ((1<=(aux967 + aux970 + aux971))=tv=SATLiteral(9032))
-9032 -4597 -4606 -4611 0
9032 4611 0
9032 4606 0
9032 4607 0
9032 4609 0
9032 4597 0
9032 4597 4606 0
9032 4597 4607 0
9032 4597 4609 0
9032 4598 0
9032 4598 4606 0
9032 4598 4607 0
9032 4598 4609 0
c (((aux973 + aux976 + aux977)<=1)=tv=SATLiteral(9033))
-9033 4636 0
-9033 4630 4635 0
-9033 4631 0
-9033 4633 0
-9033 4621 4635 0
-9033 4621 4630 0
-9033 4621 4631 0
-9033 4621 4633 0
-9033 4622 0
-9033 4622 4630 0
-9033 4622 4631 0
-9033 4622 4633 0
9033 -4622 -4630 -4635 0
9033 -4621 -4631 -4635 0
9033 -4621 -4630 -4636 0
c ((1<=(aux973 + aux976 + aux977))=tv=SATLiteral(9034))
-9034 -4621 -4630 -4635 0
9034 4635 0
9034 4630 0
9034 4631 0
9034 4633 0
9034 4621 0
9034 4621 4630 0
9034 4621 4631 0
9034 4621 4633 0
9034 4622 0
9034 4622 4630 0
9034 4622 4631 0
9034 4622 4633 0
c (((aux979 + aux982 + aux983)<=1)=tv=SATLiteral(9035))
-9035 4660 0
-9035 4654 4659 0
-9035 4655 0
-9035 4657 0
-9035 4645 4659 0
-9035 4645 4654 0
-9035 4645 4655 0
-9035 4645 4657 0
-9035 4646 0
-9035 4646 4654 0
-9035 4646 4655 0
-9035 4646 4657 0
9035 -4646 -4654 -4659 0
9035 -4645 -4655 -4659 0
9035 -4645 -4654 -4660 0
c ((1<=(aux979 + aux982 + aux983))=tv=SATLiteral(9036))
-9036 -4645 -4654 -4659 0
9036 4659 0
9036 4654 0
9036 4655 0
9036 4657 0
9036 4645 0
9036 4645 4654 0
9036 4645 4655 0
9036 4645 4657 0
9036 4646 0
9036 4646 4654 0
9036 4646 4655 0
9036 4646 4657 0
c (((aux985 + aux988 + aux989)<=1)=tv=SATLiteral(9037))
-9037 4684 0
-9037 4678 4683 0
-9037 4679 0
-9037 4681 0
-9037 4669 4683 0
-9037 4669 4678 0
-9037 4669 4679 0
-9037 4669 4681 0
-9037 4670 0
-9037 4670 4678 0
-9037 4670 4679 0
-9037 4670 4681 0
9037 -4670 -4678 -4683 0
9037 -4669 -4679 -4683 0
9037 -4669 -4678 -4684 0
c ((1<=(aux985 + aux988 + aux989))=tv=SATLiteral(9038))
-9038 -4669 -4678 -4683 0
9038 4683 0
9038 4678 0
9038 4679 0
9038 4681 0
9038 4669 0
9038 4669 4678 0
9038 4669 4679 0
9038 4669 4681 0
9038 4670 0
9038 4670 4678 0
9038 4670 4679 0
9038 4670 4681 0
c (((aux991 + aux994 + aux995)<=1)=tv=SATLiteral(9039))
-9039 4708 0
-9039 4702 4707 0
-9039 4703 0
-9039 4705 0
-9039 4693 4707 0
-9039 4693 4702 0
-9039 4693 4703 0
-9039 4693 4705 0
-9039 4694 0
-9039 4694 4702 0
-9039 4694 4703 0
-9039 4694 4705 0
9039 -4694 -4702 -4707 0
9039 -4693 -4703 -4707 0
9039 -4693 -4702 -4708 0
c ((1<=(aux991 + aux994 + aux995))=tv=SATLiteral(9040))
-9040 -4693 -4702 -4707 0
9040 4707 0
9040 4702 0
9040 4703 0
9040 4705 0
9040 4693 0
9040 4693 4702 0
9040 4693 4703 0
9040 4693 4705 0
9040 4694 0
9040 4694 4702 0
9040 4694 4703 0
9040 4694 4705 0
c (((aux997 + aux1000 + aux1001)<=1)=tv=SATLiteral(9041))
-9041 4732 0
-9041 4726 4731 0
-9041 4727 0
-9041 4729 0
-9041 4717 4731 0
-9041 4717 4726 0
-9041 4717 4727 0
-9041 4717 4729 0
-9041 4718 0
-9041 4718 4726 0
-9041 4718 4727 0
-9041 4718 4729 0
9041 -4718 -4726 -4731 0
9041 -4717 -4727 -4731 0
9041 -4717 -4726 -4732 0
c ((1<=(aux997 + aux1000 + aux1001))=tv=SATLiteral(9042))
-9042 -4717 -4726 -4731 0
9042 4731 0
9042 4726 0
9042 4727 0
9042 4729 0
9042 4717 0
9042 4717 4726 0
9042 4717 4727 0
9042 4717 4729 0
9042 4718 0
9042 4718 4726 0
9042 4718 4727 0
9042 4718 4729 0
c (((aux1003 + aux1006 + aux1007)<=1)=tv=SATLiteral(9043))
-9043 4756 0
-9043 4750 4755 0
-9043 4751 0
-9043 4753 0
-9043 4741 4755 0
-9043 4741 4750 0
-9043 4741 4751 0
-9043 4741 4753 0
-9043 4742 0
-9043 4742 4750 0
-9043 4742 4751 0
-9043 4742 4753 0
9043 -4742 -4750 -4755 0
9043 -4741 -4751 -4755 0
9043 -4741 -4750 -4756 0
c ((1<=(aux1003 + aux1006 + aux1007))=tv=SATLiteral(9044))
-9044 -4741 -4750 -4755 0
9044 4755 0
9044 4750 0
9044 4751 0
9044 4753 0
9044 4741 0
9044 4741 4750 0
9044 4741 4751 0
9044 4741 4753 0
9044 4742 0
9044 4742 4750 0
9044 4742 4751 0
9044 4742 4753 0
c (((aux1009 + aux1012 + aux1013)<=1)=tv=SATLiteral(9045))
-9045 4780 0
-9045 4774 4779 0
-9045 4775 0
-9045 4777 0
-9045 4765 4779 0
-9045 4765 4774 0
-9045 4765 4775 0
-9045 4765 4777 0
-9045 4766 0
-9045 4766 4774 0
-9045 4766 4775 0
-9045 4766 4777 0
9045 -4766 -4774 -4779 0
9045 -4765 -4775 -4779 0
9045 -4765 -4774 -4780 0
c ((1<=(aux1009 + aux1012 + aux1013))=tv=SATLiteral(9046))
-9046 -4765 -4774 -4779 0
9046 4779 0
9046 4774 0
9046 4775 0
9046 4777 0
9046 4765 0
9046 4765 4774 0
9046 4765 4775 0
9046 4765 4777 0
9046 4766 0
9046 4766 4774 0
9046 4766 4775 0
9046 4766 4777 0
c (((aux1015 + aux1018 + aux1019)<=1)=tv=SATLiteral(9047))
-9047 4804 0
-9047 4798 4803 0
-9047 4799 0
-9047 4801 0
-9047 4789 4803 0
-9047 4789 4798 0
-9047 4789 4799 0
-9047 4789 4801 0
-9047 4790 0
-9047 4790 4798 0
-9047 4790 4799 0
-9047 4790 4801 0
9047 -4790 -4798 -4803 0
9047 -4789 -4799 -4803 0
9047 -4789 -4798 -4804 0
c ((1<=(aux1015 + aux1018 + aux1019))=tv=SATLiteral(9048))
-9048 -4789 -4798 -4803 0
9048 4803 0
9048 4798 0
9048 4799 0
9048 4801 0
9048 4789 0
9048 4789 4798 0
9048 4789 4799 0
9048 4789 4801 0
9048 4790 0
9048 4790 4798 0
9048 4790 4799 0
9048 4790 4801 0
c (((aux1021 + aux1024 + aux1025)<=1)=tv=SATLiteral(9049))
-9049 4828 0
-9049 4822 4827 0
-9049 4823 0
-9049 4825 0
-9049 4813 4827 0
-9049 4813 4822 0
-9049 4813 4823 0
-9049 4813 4825 0
-9049 4814 0
-9049 4814 4822 0
-9049 4814 4823 0
-9049 4814 4825 0
9049 -4814 -4822 -4827 0
9049 -4813 -4823 -4827 0
9049 -4813 -4822 -4828 0
c ((1<=(aux1021 + aux1024 + aux1025))=tv=SATLiteral(9050))
-9050 -4813 -4822 -4827 0
9050 4827 0
9050 4822 0
9050 4823 0
9050 4825 0
9050 4813 0
9050 4813 4822 0
9050 4813 4823 0
9050 4813 4825 0
9050 4814 0
9050 4814 4822 0
9050 4814 4823 0
9050 4814 4825 0
c (((aux1027 + aux1030 + aux1031)<=1)=tv=SATLiteral(9051))
-9051 4852 0
-9051 4846 4851 0
-9051 4847 0
-9051 4849 0
-9051 4837 4851 0
-9051 4837 4846 0
-9051 4837 4847 0
-9051 4837 4849 0
-9051 4838 0
-9051 4838 4846 0
-9051 4838 4847 0
-9051 4838 4849 0
9051 -4838 -4846 -4851 0
9051 -4837 -4847 -4851 0
9051 -4837 -4846 -4852 0
c ((1<=(aux1027 + aux1030 + aux1031))=tv=SATLiteral(9052))
-9052 -4837 -4846 -4851 0
9052 4851 0
9052 4846 0
9052 4847 0
9052 4849 0
9052 4837 0
9052 4837 4846 0
9052 4837 4847 0
9052 4837 4849 0
9052 4838 0
9052 4838 4846 0
9052 4838 4847 0
9052 4838 4849 0
c (((aux1033 + aux1036 + aux1037)<=1)=tv=SATLiteral(9053))
-9053 4876 0
-9053 4870 4875 0
-9053 4871 0
-9053 4873 0
-9053 4861 4875 0
-9053 4861 4870 0
-9053 4861 4871 0
-9053 4861 4873 0
-9053 4862 0
-9053 4862 4870 0
-9053 4862 4871 0
-9053 4862 4873 0
9053 -4862 -4870 -4875 0
9053 -4861 -4871 -4875 0
9053 -4861 -4870 -4876 0
c ((1<=(aux1033 + aux1036 + aux1037))=tv=SATLiteral(9054))
-9054 -4861 -4870 -4875 0
9054 4875 0
9054 4870 0
9054 4871 0
9054 4873 0
9054 4861 0
9054 4861 4870 0
9054 4861 4871 0
9054 4861 4873 0
9054 4862 0
9054 4862 4870 0
9054 4862 4871 0
9054 4862 4873 0
c (((aux1039 + aux1042 + aux1043)<=1)=tv=SATLiteral(9055))
-9055 4900 0
-9055 4894 4899 0
-9055 4895 0
-9055 4897 0
-9055 4885 4899 0
-9055 4885 4894 0
-9055 4885 4895 0
-9055 4885 4897 0
-9055 4886 0
-9055 4886 4894 0
-9055 4886 4895 0
-9055 4886 4897 0
9055 -4886 -4894 -4899 0
9055 -4885 -4895 -4899 0
9055 -4885 -4894 -4900 0
c ((1<=(aux1039 + aux1042 + aux1043))=tv=SATLiteral(9056))
-9056 -4885 -4894 -4899 0
9056 4899 0
9056 4894 0
9056 4895 0
9056 4897 0
9056 4885 0
9056 4885 4894 0
9056 4885 4895 0
9056 4885 4897 0
9056 4886 0
9056 4886 4894 0
9056 4886 4895 0
9056 4886 4897 0
c (((aux1045 + aux1048 + aux1049)<=1)=tv=SATLiteral(9057))
-9057 4924 0
-9057 4918 4923 0
-9057 4919 0
-9057 4921 0
-9057 4909 4923 0
-9057 4909 4918 0
-9057 4909 4919 0
-9057 4909 4921 0
-9057 4910 0
-9057 4910 4918 0
-9057 4910 4919 0
-9057 4910 4921 0
9057 -4910 -4918 -4923 0
9057 -4909 -4919 -4923 0
9057 -4909 -4918 -4924 0
c ((1<=(aux1045 + aux1048 + aux1049))=tv=SATLiteral(9058))
-9058 -4909 -4918 -4923 0
9058 4923 0
9058 4918 0
9058 4919 0
9058 4921 0
9058 4909 0
9058 4909 4918 0
9058 4909 4919 0
9058 4909 4921 0
9058 4910 0
9058 4910 4918 0
9058 4910 4919 0
9058 4910 4921 0
c (((aux1051 + aux1054 + aux1055)<=1)=tv=SATLiteral(9059))
-9059 4948 0
-9059 4942 4947 0
-9059 4943 0
-9059 4945 0
-9059 4933 4947 0
-9059 4933 4942 0
-9059 4933 4943 0
-9059 4933 4945 0
-9059 4934 0
-9059 4934 4942 0
-9059 4934 4943 0
-9059 4934 4945 0
9059 -4934 -4942 -4947 0
9059 -4933 -4943 -4947 0
9059 -4933 -4942 -4948 0
c ((1<=(aux1051 + aux1054 + aux1055))=tv=SATLiteral(9060))
-9060 -4933 -4942 -4947 0
9060 4947 0
9060 4942 0
9060 4943 0
9060 4945 0
9060 4933 0
9060 4933 4942 0
9060 4933 4943 0
9060 4933 4945 0
9060 4934 0
9060 4934 4942 0
9060 4934 4943 0
9060 4934 4945 0
c (((aux1057 + aux1060 + aux1061)<=1)=tv=SATLiteral(9061))
-9061 4972 0
-9061 4966 4971 0
-9061 4967 0
-9061 4969 0
-9061 4957 4971 0
-9061 4957 4966 0
-9061 4957 4967 0
-9061 4957 4969 0
-9061 4958 0
-9061 4958 4966 0
-9061 4958 4967 0
-9061 4958 4969 0
9061 -4958 -4966 -4971 0
9061 -4957 -4967 -4971 0
9061 -4957 -4966 -4972 0
c ((1<=(aux1057 + aux1060 + aux1061))=tv=SATLiteral(9062))
-9062 -4957 -4966 -4971 0
9062 4971 0
9062 4966 0
9062 4967 0
9062 4969 0
9062 4957 0
9062 4957 4966 0
9062 4957 4967 0
9062 4957 4969 0
9062 4958 0
9062 4958 4966 0
9062 4958 4967 0
9062 4958 4969 0
c (((aux1063 + aux1066 + aux1067)<=1)=tv=SATLiteral(9063))
-9063 4996 0
-9063 4990 4995 0
-9063 4991 0
-9063 4993 0
-9063 4981 4995 0
-9063 4981 4990 0
-9063 4981 4991 0
-9063 4981 4993 0
-9063 4982 0
-9063 4982 4990 0
-9063 4982 4991 0
-9063 4982 4993 0
9063 -4982 -4990 -4995 0
9063 -4981 -4991 -4995 0
9063 -4981 -4990 -4996 0
c ((1<=(aux1063 + aux1066 + aux1067))=tv=SATLiteral(9064))
-9064 -4981 -4990 -4995 0
9064 4995 0
9064 4990 0
9064 4991 0
9064 4993 0
9064 4981 0
9064 4981 4990 0
9064 4981 4991 0
9064 4981 4993 0
9064 4982 0
9064 4982 4990 0
9064 4982 4991 0
9064 4982 4993 0
c (((aux1069 + aux1072 + aux1073)<=1)=tv=SATLiteral(9065))
-9065 5020 0
-9065 5014 5019 0
-9065 5015 0
-9065 5017 0
-9065 5005 5019 0
-9065 5005 5014 0
-9065 5005 5015 0
-9065 5005 5017 0
-9065 5006 0
-9065 5006 5014 0
-9065 5006 5015 0
-9065 5006 5017 0
9065 -5006 -5014 -5019 0
9065 -5005 -5015 -5019 0
9065 -5005 -5014 -5020 0
c ((1<=(aux1069 + aux1072 + aux1073))=tv=SATLiteral(9066))
-9066 -5005 -5014 -5019 0
9066 5019 0
9066 5014 0
9066 5015 0
9066 5017 0
9066 5005 0
9066 5005 5014 0
9066 5005 5015 0
9066 5005 5017 0
9066 5006 0
9066 5006 5014 0
9066 5006 5015 0
9066 5006 5017 0
c (((aux1075 + aux1078 + aux1079)<=1)=tv=SATLiteral(9067))
-9067 5044 0
-9067 5038 5043 0
-9067 5039 0
-9067 5041 0
-9067 5029 5043 0
-9067 5029 5038 0
-9067 5029 5039 0
-9067 5029 5041 0
-9067 5030 0
-9067 5030 5038 0
-9067 5030 5039 0
-9067 5030 5041 0
9067 -5030 -5038 -5043 0
9067 -5029 -5039 -5043 0
9067 -5029 -5038 -5044 0
c ((1<=(aux1075 + aux1078 + aux1079))=tv=SATLiteral(9068))
-9068 -5029 -5038 -5043 0
9068 5043 0
9068 5038 0
9068 5039 0
9068 5041 0
9068 5029 0
9068 5029 5038 0
9068 5029 5039 0
9068 5029 5041 0
9068 5030 0
9068 5030 5038 0
9068 5030 5039 0
9068 5030 5041 0
c (((aux1081 + aux1084 + aux1085)<=1)=tv=SATLiteral(9069))
-9069 5068 0
-9069 5062 5067 0
-9069 5063 0
-9069 5065 0
-9069 5053 5067 0
-9069 5053 5062 0
-9069 5053 5063 0
-9069 5053 5065 0
-9069 5054 0
-9069 5054 5062 0
-9069 5054 5063 0
-9069 5054 5065 0
9069 -5054 -5062 -5067 0
9069 -5053 -5063 -5067 0
9069 -5053 -5062 -5068 0
c ((1<=(aux1081 + aux1084 + aux1085))=tv=SATLiteral(9070))
-9070 -5053 -5062 -5067 0
9070 5067 0
9070 5062 0
9070 5063 0
9070 5065 0
9070 5053 0
9070 5053 5062 0
9070 5053 5063 0
9070 5053 5065 0
9070 5054 0
9070 5054 5062 0
9070 5054 5063 0
9070 5054 5065 0
c (((aux1087 + aux1090 + aux1091)<=1)=tv=SATLiteral(9071))
-9071 5092 0
-9071 5086 5091 0
-9071 5087 0
-9071 5089 0
-9071 5077 5091 0
-9071 5077 5086 0
-9071 5077 5087 0
-9071 5077 5089 0
-9071 5078 0
-9071 5078 5086 0
-9071 5078 5087 0
-9071 5078 5089 0
9071 -5078 -5086 -5091 0
9071 -5077 -5087 -5091 0
9071 -5077 -5086 -5092 0
c ((1<=(aux1087 + aux1090 + aux1091))=tv=SATLiteral(9072))
-9072 -5077 -5086 -5091 0
9072 5091 0
9072 5086 0
9072 5087 0
9072 5089 0
9072 5077 0
9072 5077 5086 0
9072 5077 5087 0
9072 5077 5089 0
9072 5078 0
9072 5078 5086 0
9072 5078 5087 0
9072 5078 5089 0
c (((aux1093 + aux1096 + aux1097)<=1)=tv=SATLiteral(9073))
-9073 5116 0
-9073 5110 5115 0
-9073 5111 0
-9073 5113 0
-9073 5101 5115 0
-9073 5101 5110 0
-9073 5101 5111 0
-9073 5101 5113 0
-9073 5102 0
-9073 5102 5110 0
-9073 5102 5111 0
-9073 5102 5113 0
9073 -5102 -5110 -5115 0
9073 -5101 -5111 -5115 0
9073 -5101 -5110 -5116 0
c ((1<=(aux1093 + aux1096 + aux1097))=tv=SATLiteral(9074))
-9074 -5101 -5110 -5115 0
9074 5115 0
9074 5110 0
9074 5111 0
9074 5113 0
9074 5101 0
9074 5101 5110 0
9074 5101 5111 0
9074 5101 5113 0
9074 5102 0
9074 5102 5110 0
9074 5102 5111 0
9074 5102 5113 0
c (((aux1099 + aux1102 + aux1103)<=1)=tv=SATLiteral(9075))
-9075 5140 0
-9075 5134 5139 0
-9075 5135 0
-9075 5137 0
-9075 5125 5139 0
-9075 5125 5134 0
-9075 5125 5135 0
-9075 5125 5137 0
-9075 5126 0
-9075 5126 5134 0
-9075 5126 5135 0
-9075 5126 5137 0
9075 -5126 -5134 -5139 0
9075 -5125 -5135 -5139 0
9075 -5125 -5134 -5140 0
c ((1<=(aux1099 + aux1102 + aux1103))=tv=SATLiteral(9076))
-9076 -5125 -5134 -5139 0
9076 5139 0
9076 5134 0
9076 5135 0
9076 5137 0
9076 5125 0
9076 5125 5134 0
9076 5125 5135 0
9076 5125 5137 0
9076 5126 0
9076 5126 5134 0
9076 5126 5135 0
9076 5126 5137 0
c (((aux1105 + aux1108 + aux1109)<=1)=tv=SATLiteral(9077))
-9077 5164 0
-9077 5158 5163 0
-9077 5159 0
-9077 5161 0
-9077 5149 5163 0
-9077 5149 5158 0
-9077 5149 5159 0
-9077 5149 5161 0
-9077 5150 0
-9077 5150 5158 0
-9077 5150 5159 0
-9077 5150 5161 0
9077 -5150 -5158 -5163 0
9077 -5149 -5159 -5163 0
9077 -5149 -5158 -5164 0
c ((1<=(aux1105 + aux1108 + aux1109))=tv=SATLiteral(9078))
-9078 -5149 -5158 -5163 0
9078 5163 0
9078 5158 0
9078 5159 0
9078 5161 0
9078 5149 0
9078 5149 5158 0
9078 5149 5159 0
9078 5149 5161 0
9078 5150 0
9078 5150 5158 0
9078 5150 5159 0
9078 5150 5161 0
c (((aux1111 + aux1114 + aux1115)<=1)=tv=SATLiteral(9079))
-9079 5188 0
-9079 5182 5187 0
-9079 5183 0
-9079 5185 0
-9079 5173 5187 0
-9079 5173 5182 0
-9079 5173 5183 0
-9079 5173 5185 0
-9079 5174 0
-9079 5174 5182 0
-9079 5174 5183 0
-9079 5174 5185 0
9079 -5174 -5182 -5187 0
9079 -5173 -5183 -5187 0
9079 -5173 -5182 -5188 0
c ((1<=(aux1111 + aux1114 + aux1115))=tv=SATLiteral(9080))
-9080 -5173 -5182 -5187 0
9080 5187 0
9080 5182 0
9080 5183 0
9080 5185 0
9080 5173 0
9080 5173 5182 0
9080 5173 5183 0
9080 5173 5185 0
9080 5174 0
9080 5174 5182 0
9080 5174 5183 0
9080 5174 5185 0
c (((aux1117 + aux1120 + aux1121)<=1)=tv=SATLiteral(9081))
-9081 5212 0
-9081 5206 5211 0
-9081 5207 0
-9081 5209 0
-9081 5197 5211 0
-9081 5197 5206 0
-9081 5197 5207 0
-9081 5197 5209 0
-9081 5198 0
-9081 5198 5206 0
-9081 5198 5207 0
-9081 5198 5209 0
9081 -5198 -5206 -5211 0
9081 -5197 -5207 -5211 0
9081 -5197 -5206 -5212 0
c ((1<=(aux1117 + aux1120 + aux1121))=tv=SATLiteral(9082))
-9082 -5197 -5206 -5211 0
9082 5211 0
9082 5206 0
9082 5207 0
9082 5209 0
9082 5197 0
9082 5197 5206 0
9082 5197 5207 0
9082 5197 5209 0
9082 5198 0
9082 5198 5206 0
9082 5198 5207 0
9082 5198 5209 0
c (((aux1123 + aux1126 + aux1127)<=1)=tv=SATLiteral(9083))
-9083 5236 0
-9083 5230 5235 0
-9083 5231 0
-9083 5233 0
-9083 5221 5235 0
-9083 5221 5230 0
-9083 5221 5231 0
-9083 5221 5233 0
-9083 5222 0
-9083 5222 5230 0
-9083 5222 5231 0
-9083 5222 5233 0
9083 -5222 -5230 -5235 0
9083 -5221 -5231 -5235 0
9083 -5221 -5230 -5236 0
c ((1<=(aux1123 + aux1126 + aux1127))=tv=SATLiteral(9084))
-9084 -5221 -5230 -5235 0
9084 5235 0
9084 5230 0
9084 5231 0
9084 5233 0
9084 5221 0
9084 5221 5230 0
9084 5221 5231 0
9084 5221 5233 0
9084 5222 0
9084 5222 5230 0
9084 5222 5231 0
9084 5222 5233 0
c (((aux1129 + aux1132 + aux1133)<=1)=tv=SATLiteral(9085))
-9085 5260 0
-9085 5254 5259 0
-9085 5255 0
-9085 5257 0
-9085 5245 5259 0
-9085 5245 5254 0
-9085 5245 5255 0
-9085 5245 5257 0
-9085 5246 0
-9085 5246 5254 0
-9085 5246 5255 0
-9085 5246 5257 0
9085 -5246 -5254 -5259 0
9085 -5245 -5255 -5259 0
9085 -5245 -5254 -5260 0
c ((1<=(aux1129 + aux1132 + aux1133))=tv=SATLiteral(9086))
-9086 -5245 -5254 -5259 0
9086 5259 0
9086 5254 0
9086 5255 0
9086 5257 0
9086 5245 0
9086 5245 5254 0
9086 5245 5255 0
9086 5245 5257 0
9086 5246 0
9086 5246 5254 0
9086 5246 5255 0
9086 5246 5257 0
c (((aux1135 + aux1138 + aux1139)<=1)=tv=SATLiteral(9087))
-9087 5284 0
-9087 5278 5283 0
-9087 5279 0
-9087 5281 0
-9087 5269 5283 0
-9087 5269 5278 0
-9087 5269 5279 0
-9087 5269 5281 0
-9087 5270 0
-9087 5270 5278 0
-9087 5270 5279 0
-9087 5270 5281 0
9087 -5270 -5278 -5283 0
9087 -5269 -5279 -5283 0
9087 -5269 -5278 -5284 0
c ((1<=(aux1135 + aux1138 + aux1139))=tv=SATLiteral(9088))
-9088 -5269 -5278 -5283 0
9088 5283 0
9088 5278 0
9088 5279 0
9088 5281 0
9088 5269 0
9088 5269 5278 0
9088 5269 5279 0
9088 5269 5281 0
9088 5270 0
9088 5270 5278 0
9088 5270 5279 0
9088 5270 5281 0
c (((aux1141 + aux1144 + aux1145)<=1)=tv=SATLiteral(9089))
-9089 5308 0
-9089 5302 5307 0
-9089 5303 0
-9089 5305 0
-9089 5293 5307 0
-9089 5293 5302 0
-9089 5293 5303 0
-9089 5293 5305 0
-9089 5294 0
-9089 5294 5302 0
-9089 5294 5303 0
-9089 5294 5305 0
9089 -5294 -5302 -5307 0
9089 -5293 -5303 -5307 0
9089 -5293 -5302 -5308 0
c ((1<=(aux1141 + aux1144 + aux1145))=tv=SATLiteral(9090))
-9090 -5293 -5302 -5307 0
9090 5307 0
9090 5302 0
9090 5303 0
9090 5305 0
9090 5293 0
9090 5293 5302 0
9090 5293 5303 0
9090 5293 5305 0
9090 5294 0
9090 5294 5302 0
9090 5294 5303 0
9090 5294 5305 0
c (((aux1147 + aux1150 + aux1151)<=1)=tv=SATLiteral(9091))
-9091 5332 0
-9091 5326 5331 0
-9091 5327 0
-9091 5329 0
-9091 5317 5331 0
-9091 5317 5326 0
-9091 5317 5327 0
-9091 5317 5329 0
-9091 5318 0
-9091 5318 5326 0
-9091 5318 5327 0
-9091 5318 5329 0
9091 -5318 -5326 -5331 0
9091 -5317 -5327 -5331 0
9091 -5317 -5326 -5332 0
c ((1<=(aux1147 + aux1150 + aux1151))=tv=SATLiteral(9092))
-9092 -5317 -5326 -5331 0
9092 5331 0
9092 5326 0
9092 5327 0
9092 5329 0
9092 5317 0
9092 5317 5326 0
9092 5317 5327 0
9092 5317 5329 0
9092 5318 0
9092 5318 5326 0
9092 5318 5327 0
9092 5318 5329 0
c (((aux1153 + aux1156 + aux1157)<=1)=tv=SATLiteral(9093))
-9093 5356 0
-9093 5350 5355 0
-9093 5351 0
-9093 5353 0
-9093 5341 5355 0
-9093 5341 5350 0
-9093 5341 5351 0
-9093 5341 5353 0
-9093 5342 0
-9093 5342 5350 0
-9093 5342 5351 0
-9093 5342 5353 0
9093 -5342 -5350 -5355 0
9093 -5341 -5351 -5355 0
9093 -5341 -5350 -5356 0
c ((1<=(aux1153 + aux1156 + aux1157))=tv=SATLiteral(9094))
-9094 -5341 -5350 -5355 0
9094 5355 0
9094 5350 0
9094 5351 0
9094 5353 0
9094 5341 0
9094 5341 5350 0
9094 5341 5351 0
9094 5341 5353 0
9094 5342 0
9094 5342 5350 0
9094 5342 5351 0
9094 5342 5353 0
c (((aux1159 + aux1162 + aux1163)<=1)=tv=SATLiteral(9095))
-9095 5380 0
-9095 5374 5379 0
-9095 5375 0
-9095 5377 0
-9095 5365 5379 0
-9095 5365 5374 0
-9095 5365 5375 0
-9095 5365 5377 0
-9095 5366 0
-9095 5366 5374 0
-9095 5366 5375 0
-9095 5366 5377 0
9095 -5366 -5374 -5379 0
9095 -5365 -5375 -5379 0
9095 -5365 -5374 -5380 0
c ((1<=(aux1159 + aux1162 + aux1163))=tv=SATLiteral(9096))
-9096 -5365 -5374 -5379 0
9096 5379 0
9096 5374 0
9096 5375 0
9096 5377 0
9096 5365 0
9096 5365 5374 0
9096 5365 5375 0
9096 5365 5377 0
9096 5366 0
9096 5366 5374 0
9096 5366 5375 0
9096 5366 5377 0
c (((aux1165 + aux1168 + aux1169)<=1)=tv=SATLiteral(9097))
-9097 5404 0
-9097 5398 5403 0
-9097 5399 0
-9097 5401 0
-9097 5389 5403 0
-9097 5389 5398 0
-9097 5389 5399 0
-9097 5389 5401 0
-9097 5390 0
-9097 5390 5398 0
-9097 5390 5399 0
-9097 5390 5401 0
9097 -5390 -5398 -5403 0
9097 -5389 -5399 -5403 0
9097 -5389 -5398 -5404 0
c ((1<=(aux1165 + aux1168 + aux1169))=tv=SATLiteral(9098))
-9098 -5389 -5398 -5403 0
9098 5403 0
9098 5398 0
9098 5399 0
9098 5401 0
9098 5389 0
9098 5389 5398 0
9098 5389 5399 0
9098 5389 5401 0
9098 5390 0
9098 5390 5398 0
9098 5390 5399 0
9098 5390 5401 0
c (((aux1171 + aux1174 + aux1175)<=1)=tv=SATLiteral(9099))
-9099 5428 0
-9099 5422 5427 0
-9099 5423 0
-9099 5425 0
-9099 5413 5427 0
-9099 5413 5422 0
-9099 5413 5423 0
-9099 5413 5425 0
-9099 5414 0
-9099 5414 5422 0
-9099 5414 5423 0
-9099 5414 5425 0
9099 -5414 -5422 -5427 0
9099 -5413 -5423 -5427 0
9099 -5413 -5422 -5428 0
c ((1<=(aux1171 + aux1174 + aux1175))=tv=SATLiteral(9100))
-9100 -5413 -5422 -5427 0
9100 5427 0
9100 5422 0
9100 5423 0
9100 5425 0
9100 5413 0
9100 5413 5422 0
9100 5413 5423 0
9100 5413 5425 0
9100 5414 0
9100 5414 5422 0
9100 5414 5423 0
9100 5414 5425 0
c (((aux1177 + aux1180 + aux1181)<=1)=tv=SATLiteral(9101))
-9101 5452 0
-9101 5446 5451 0
-9101 5447 0
-9101 5449 0
-9101 5437 5451 0
-9101 5437 5446 0
-9101 5437 5447 0
-9101 5437 5449 0
-9101 5438 0
-9101 5438 5446 0
-9101 5438 5447 0
-9101 5438 5449 0
9101 -5438 -5446 -5451 0
9101 -5437 -5447 -5451 0
9101 -5437 -5446 -5452 0
c ((1<=(aux1177 + aux1180 + aux1181))=tv=SATLiteral(9102))
-9102 -5437 -5446 -5451 0
9102 5451 0
9102 5446 0
9102 5447 0
9102 5449 0
9102 5437 0
9102 5437 5446 0
9102 5437 5447 0
9102 5437 5449 0
9102 5438 0
9102 5438 5446 0
9102 5438 5447 0
9102 5438 5449 0
c (((aux1183 + aux1186 + aux1187)<=1)=tv=SATLiteral(9103))
-9103 5476 0
-9103 5470 5475 0
-9103 5471 0
-9103 5473 0
-9103 5461 5475 0
-9103 5461 5470 0
-9103 5461 5471 0
-9103 5461 5473 0
-9103 5462 0
-9103 5462 5470 0
-9103 5462 5471 0
-9103 5462 5473 0
9103 -5462 -5470 -5475 0
9103 -5461 -5471 -5475 0
9103 -5461 -5470 -5476 0
c ((1<=(aux1183 + aux1186 + aux1187))=tv=SATLiteral(9104))
-9104 -5461 -5470 -5475 0
9104 5475 0
9104 5470 0
9104 5471 0
9104 5473 0
9104 5461 0
9104 5461 5470 0
9104 5461 5471 0
9104 5461 5473 0
9104 5462 0
9104 5462 5470 0
9104 5462 5471 0
9104 5462 5473 0
c (((aux1189 + aux1192 + aux1193)<=1)=tv=SATLiteral(9105))
-9105 5500 0
-9105 5494 5499 0
-9105 5495 0
-9105 5497 0
-9105 5485 5499 0
-9105 5485 5494 0
-9105 5485 5495 0
-9105 5485 5497 0
-9105 5486 0
-9105 5486 5494 0
-9105 5486 5495 0
-9105 5486 5497 0
9105 -5486 -5494 -5499 0
9105 -5485 -5495 -5499 0
9105 -5485 -5494 -5500 0
c ((1<=(aux1189 + aux1192 + aux1193))=tv=SATLiteral(9106))
-9106 -5485 -5494 -5499 0
9106 5499 0
9106 5494 0
9106 5495 0
9106 5497 0
9106 5485 0
9106 5485 5494 0
9106 5485 5495 0
9106 5485 5497 0
9106 5486 0
9106 5486 5494 0
9106 5486 5495 0
9106 5486 5497 0
c (((aux1195 + aux1198 + aux1199)<=1)=tv=SATLiteral(9107))
-9107 5524 0
-9107 5518 5523 0
-9107 5519 0
-9107 5521 0
-9107 5509 5523 0
-9107 5509 5518 0
-9107 5509 5519 0
-9107 5509 5521 0
-9107 5510 0
-9107 5510 5518 0
-9107 5510 5519 0
-9107 5510 5521 0
9107 -5510 -5518 -5523 0
9107 -5509 -5519 -5523 0
9107 -5509 -5518 -5524 0
c ((1<=(aux1195 + aux1198 + aux1199))=tv=SATLiteral(9108))
-9108 -5509 -5518 -5523 0
9108 5523 0
9108 5518 0
9108 5519 0
9108 5521 0
9108 5509 0
9108 5509 5518 0
9108 5509 5519 0
9108 5509 5521 0
9108 5510 0
9108 5510 5518 0
9108 5510 5519 0
9108 5510 5521 0
c (((aux1201 + aux1204 + aux1205)<=1)=tv=SATLiteral(9109))
-9109 5548 0
-9109 5542 5547 0
-9109 5543 0
-9109 5545 0
-9109 5533 5547 0
-9109 5533 5542 0
-9109 5533 5543 0
-9109 5533 5545 0
-9109 5534 0
-9109 5534 5542 0
-9109 5534 5543 0
-9109 5534 5545 0
9109 -5534 -5542 -5547 0
9109 -5533 -5543 -5547 0
9109 -5533 -5542 -5548 0
c ((1<=(aux1201 + aux1204 + aux1205))=tv=SATLiteral(9110))
-9110 -5533 -5542 -5547 0
9110 5547 0
9110 5542 0
9110 5543 0
9110 5545 0
9110 5533 0
9110 5533 5542 0
9110 5533 5543 0
9110 5533 5545 0
9110 5534 0
9110 5534 5542 0
9110 5534 5543 0
9110 5534 5545 0
c (((aux1207 + aux1210 + aux1211)<=1)=tv=SATLiteral(9111))
-9111 5572 0
-9111 5566 5571 0
-9111 5567 0
-9111 5569 0
-9111 5557 5571 0
-9111 5557 5566 0
-9111 5557 5567 0
-9111 5557 5569 0
-9111 5558 0
-9111 5558 5566 0
-9111 5558 5567 0
-9111 5558 5569 0
9111 -5558 -5566 -5571 0
9111 -5557 -5567 -5571 0
9111 -5557 -5566 -5572 0
c ((1<=(aux1207 + aux1210 + aux1211))=tv=SATLiteral(9112))
-9112 -5557 -5566 -5571 0
9112 5571 0
9112 5566 0
9112 5567 0
9112 5569 0
9112 5557 0
9112 5557 5566 0
9112 5557 5567 0
9112 5557 5569 0
9112 5558 0
9112 5558 5566 0
9112 5558 5567 0
9112 5558 5569 0
c (((aux1213 + aux1216 + aux1217)<=1)=tv=SATLiteral(9113))
-9113 5596 0
-9113 5590 5595 0
-9113 5591 0
-9113 5593 0
-9113 5581 5595 0
-9113 5581 5590 0
-9113 5581 5591 0
-9113 5581 5593 0
-9113 5582 0
-9113 5582 5590 0
-9113 5582 5591 0
-9113 5582 5593 0
9113 -5582 -5590 -5595 0
9113 -5581 -5591 -5595 0
9113 -5581 -5590 -5596 0
c ((1<=(aux1213 + aux1216 + aux1217))=tv=SATLiteral(9114))
-9114 -5581 -5590 -5595 0
9114 5595 0
9114 5590 0
9114 5591 0
9114 5593 0
9114 5581 0
9114 5581 5590 0
9114 5581 5591 0
9114 5581 5593 0
9114 5582 0
9114 5582 5590 0
9114 5582 5591 0
9114 5582 5593 0
c (((aux1219 + aux1222 + aux1223)<=1)=tv=SATLiteral(9115))
-9115 5620 0
-9115 5614 5619 0
-9115 5615 0
-9115 5617 0
-9115 5605 5619 0
-9115 5605 5614 0
-9115 5605 5615 0
-9115 5605 5617 0
-9115 5606 0
-9115 5606 5614 0
-9115 5606 5615 0
-9115 5606 5617 0
9115 -5606 -5614 -5619 0
9115 -5605 -5615 -5619 0
9115 -5605 -5614 -5620 0
c ((1<=(aux1219 + aux1222 + aux1223))=tv=SATLiteral(9116))
-9116 -5605 -5614 -5619 0
9116 5619 0
9116 5614 0
9116 5615 0
9116 5617 0
9116 5605 0
9116 5605 5614 0
9116 5605 5615 0
9116 5605 5617 0
9116 5606 0
9116 5606 5614 0
9116 5606 5615 0
9116 5606 5617 0
c (((aux1225 + aux1228 + aux1229)<=1)=tv=SATLiteral(9117))
-9117 5644 0
-9117 5638 5643 0
-9117 5639 0
-9117 5641 0
-9117 5629 5643 0
-9117 5629 5638 0
-9117 5629 5639 0
-9117 5629 5641 0
-9117 5630 0
-9117 5630 5638 0
-9117 5630 5639 0
-9117 5630 5641 0
9117 -5630 -5638 -5643 0
9117 -5629 -5639 -5643 0
9117 -5629 -5638 -5644 0
c ((1<=(aux1225 + aux1228 + aux1229))=tv=SATLiteral(9118))
-9118 -5629 -5638 -5643 0
9118 5643 0
9118 5638 0
9118 5639 0
9118 5641 0
9118 5629 0
9118 5629 5638 0
9118 5629 5639 0
9118 5629 5641 0
9118 5630 0
9118 5630 5638 0
9118 5630 5639 0
9118 5630 5641 0
c (((aux1231 + aux1234 + aux1235)<=1)=tv=SATLiteral(9119))
-9119 5668 0
-9119 5662 5667 0
-9119 5663 0
-9119 5665 0
-9119 5653 5667 0
-9119 5653 5662 0
-9119 5653 5663 0
-9119 5653 5665 0
-9119 5654 0
-9119 5654 5662 0
-9119 5654 5663 0
-9119 5654 5665 0
9119 -5654 -5662 -5667 0
9119 -5653 -5663 -5667 0
9119 -5653 -5662 -5668 0
c ((1<=(aux1231 + aux1234 + aux1235))=tv=SATLiteral(9120))
-9120 -5653 -5662 -5667 0
9120 5667 0
9120 5662 0
9120 5663 0
9120 5665 0
9120 5653 0
9120 5653 5662 0
9120 5653 5663 0
9120 5653 5665 0
9120 5654 0
9120 5654 5662 0
9120 5654 5663 0
9120 5654 5665 0
c (((aux1237 + aux1240 + aux1241)<=1)=tv=SATLiteral(9121))
-9121 5692 0
-9121 5686 5691 0
-9121 5687 0
-9121 5689 0
-9121 5677 5691 0
-9121 5677 5686 0
-9121 5677 5687 0
-9121 5677 5689 0
-9121 5678 0
-9121 5678 5686 0
-9121 5678 5687 0
-9121 5678 5689 0
9121 -5678 -5686 -5691 0
9121 -5677 -5687 -5691 0
9121 -5677 -5686 -5692 0
c ((1<=(aux1237 + aux1240 + aux1241))=tv=SATLiteral(9122))
-9122 -5677 -5686 -5691 0
9122 5691 0
9122 5686 0
9122 5687 0
9122 5689 0
9122 5677 0
9122 5677 5686 0
9122 5677 5687 0
9122 5677 5689 0
9122 5678 0
9122 5678 5686 0
9122 5678 5687 0
9122 5678 5689 0
c (((aux1243 + aux1246 + aux1247)<=1)=tv=SATLiteral(9123))
-9123 5716 0
-9123 5710 5715 0
-9123 5711 0
-9123 5713 0
-9123 5701 5715 0
-9123 5701 5710 0
-9123 5701 5711 0
-9123 5701 5713 0
-9123 5702 0
-9123 5702 5710 0
-9123 5702 5711 0
-9123 5702 5713 0
9123 -5702 -5710 -5715 0
9123 -5701 -5711 -5715 0
9123 -5701 -5710 -5716 0
c ((1<=(aux1243 + aux1246 + aux1247))=tv=SATLiteral(9124))
-9124 -5701 -5710 -5715 0
9124 5715 0
9124 5710 0
9124 5711 0
9124 5713 0
9124 5701 0
9124 5701 5710 0
9124 5701 5711 0
9124 5701 5713 0
9124 5702 0
9124 5702 5710 0
9124 5702 5711 0
9124 5702 5713 0
c (((aux1249 + aux1252 + aux1253)<=1)=tv=SATLiteral(9125))
-9125 5740 0
-9125 5734 5739 0
-9125 5735 0
-9125 5737 0
-9125 5725 5739 0
-9125 5725 5734 0
-9125 5725 5735 0
-9125 5725 5737 0
-9125 5726 0
-9125 5726 5734 0
-9125 5726 5735 0
-9125 5726 5737 0
9125 -5726 -5734 -5739 0
9125 -5725 -5735 -5739 0
9125 -5725 -5734 -5740 0
c ((1<=(aux1249 + aux1252 + aux1253))=tv=SATLiteral(9126))
-9126 -5725 -5734 -5739 0
9126 5739 0
9126 5734 0
9126 5735 0
9126 5737 0
9126 5725 0
9126 5725 5734 0
9126 5725 5735 0
9126 5725 5737 0
9126 5726 0
9126 5726 5734 0
9126 5726 5735 0
9126 5726 5737 0
c (((aux1255 + aux1258 + aux1259)<=1)=tv=SATLiteral(9127))
-9127 5764 0
-9127 5758 5763 0
-9127 5759 0
-9127 5761 0
-9127 5749 5763 0
-9127 5749 5758 0
-9127 5749 5759 0
-9127 5749 5761 0
-9127 5750 0
-9127 5750 5758 0
-9127 5750 5759 0
-9127 5750 5761 0
9127 -5750 -5758 -5763 0
9127 -5749 -5759 -5763 0
9127 -5749 -5758 -5764 0
c ((1<=(aux1255 + aux1258 + aux1259))=tv=SATLiteral(9128))
-9128 -5749 -5758 -5763 0
9128 5763 0
9128 5758 0
9128 5759 0
9128 5761 0
9128 5749 0
9128 5749 5758 0
9128 5749 5759 0
9128 5749 5761 0
9128 5750 0
9128 5750 5758 0
9128 5750 5759 0
9128 5750 5761 0
c (((aux1261 + aux1264 + aux1265)<=1)=tv=SATLiteral(9129))
-9129 5788 0
-9129 5782 5787 0
-9129 5783 0
-9129 5785 0
-9129 5773 5787 0
-9129 5773 5782 0
-9129 5773 5783 0
-9129 5773 5785 0
-9129 5774 0
-9129 5774 5782 0
-9129 5774 5783 0
-9129 5774 5785 0
9129 -5774 -5782 -5787 0
9129 -5773 -5783 -5787 0
9129 -5773 -5782 -5788 0
c ((1<=(aux1261 + aux1264 + aux1265))=tv=SATLiteral(9130))
-9130 -5773 -5782 -5787 0
9130 5787 0
9130 5782 0
9130 5783 0
9130 5785 0
9130 5773 0
9130 5773 5782 0
9130 5773 5783 0
9130 5773 5785 0
9130 5774 0
9130 5774 5782 0
9130 5774 5783 0
9130 5774 5785 0
c (((aux1267 + aux1270 + aux1271)<=1)=tv=SATLiteral(9131))
-9131 5812 0
-9131 5806 5811 0
-9131 5807 0
-9131 5809 0
-9131 5797 5811 0
-9131 5797 5806 0
-9131 5797 5807 0
-9131 5797 5809 0
-9131 5798 0
-9131 5798 5806 0
-9131 5798 5807 0
-9131 5798 5809 0
9131 -5798 -5806 -5811 0
9131 -5797 -5807 -5811 0
9131 -5797 -5806 -5812 0
c ((1<=(aux1267 + aux1270 + aux1271))=tv=SATLiteral(9132))
-9132 -5797 -5806 -5811 0
9132 5811 0
9132 5806 0
9132 5807 0
9132 5809 0
9132 5797 0
9132 5797 5806 0
9132 5797 5807 0
9132 5797 5809 0
9132 5798 0
9132 5798 5806 0
9132 5798 5807 0
9132 5798 5809 0
c (((aux1273 + aux1276 + aux1277)<=1)=tv=SATLiteral(9133))
-9133 5836 0
-9133 5830 5835 0
-9133 5831 0
-9133 5833 0
-9133 5821 5835 0
-9133 5821 5830 0
-9133 5821 5831 0
-9133 5821 5833 0
-9133 5822 0
-9133 5822 5830 0
-9133 5822 5831 0
-9133 5822 5833 0
9133 -5822 -5830 -5835 0
9133 -5821 -5831 -5835 0
9133 -5821 -5830 -5836 0
c ((1<=(aux1273 + aux1276 + aux1277))=tv=SATLiteral(9134))
-9134 -5821 -5830 -5835 0
9134 5835 0
9134 5830 0
9134 5831 0
9134 5833 0
9134 5821 0
9134 5821 5830 0
9134 5821 5831 0
9134 5821 5833 0
9134 5822 0
9134 5822 5830 0
9134 5822 5831 0
9134 5822 5833 0
c (((aux1279 + aux1282 + aux1283)<=1)=tv=SATLiteral(9135))
-9135 5860 0
-9135 5854 5859 0
-9135 5855 0
-9135 5857 0
-9135 5845 5859 0
-9135 5845 5854 0
-9135 5845 5855 0
-9135 5845 5857 0
-9135 5846 0
-9135 5846 5854 0
-9135 5846 5855 0
-9135 5846 5857 0
9135 -5846 -5854 -5859 0
9135 -5845 -5855 -5859 0
9135 -5845 -5854 -5860 0
c ((1<=(aux1279 + aux1282 + aux1283))=tv=SATLiteral(9136))
-9136 -5845 -5854 -5859 0
9136 5859 0
9136 5854 0
9136 5855 0
9136 5857 0
9136 5845 0
9136 5845 5854 0
9136 5845 5855 0
9136 5845 5857 0
9136 5846 0
9136 5846 5854 0
9136 5846 5855 0
9136 5846 5857 0
c (((aux1285 + aux1288 + aux1289)<=1)=tv=SATLiteral(9137))
-9137 5884 0
-9137 5878 5883 0
-9137 5879 0
-9137 5881 0
-9137 5869 5883 0
-9137 5869 5878 0
-9137 5869 5879 0
-9137 5869 5881 0
-9137 5870 0
-9137 5870 5878 0
-9137 5870 5879 0
-9137 5870 5881 0
9137 -5870 -5878 -5883 0
9137 -5869 -5879 -5883 0
9137 -5869 -5878 -5884 0
c ((1<=(aux1285 + aux1288 + aux1289))=tv=SATLiteral(9138))
-9138 -5869 -5878 -5883 0
9138 5883 0
9138 5878 0
9138 5879 0
9138 5881 0
9138 5869 0
9138 5869 5878 0
9138 5869 5879 0
9138 5869 5881 0
9138 5870 0
9138 5870 5878 0
9138 5870 5879 0
9138 5870 5881 0
c (((aux1291 + aux1294 + aux1295)<=1)=tv=SATLiteral(9139))
-9139 5908 0
-9139 5902 5907 0
-9139 5903 0
-9139 5905 0
-9139 5893 5907 0
-9139 5893 5902 0
-9139 5893 5903 0
-9139 5893 5905 0
-9139 5894 0
-9139 5894 5902 0
-9139 5894 5903 0
-9139 5894 5905 0
9139 -5894 -5902 -5907 0
9139 -5893 -5903 -5907 0
9139 -5893 -5902 -5908 0
c ((1<=(aux1291 + aux1294 + aux1295))=tv=SATLiteral(9140))
-9140 -5893 -5902 -5907 0
9140 5907 0
9140 5902 0
9140 5903 0
9140 5905 0
9140 5893 0
9140 5893 5902 0
9140 5893 5903 0
9140 5893 5905 0
9140 5894 0
9140 5894 5902 0
9140 5894 5903 0
9140 5894 5905 0
c (((aux1297 + aux1300 + aux1301)<=1)=tv=SATLiteral(9141))
-9141 5932 0
-9141 5926 5931 0
-9141 5927 0
-9141 5929 0
-9141 5917 5931 0
-9141 5917 5926 0
-9141 5917 5927 0
-9141 5917 5929 0
-9141 5918 0
-9141 5918 5926 0
-9141 5918 5927 0
-9141 5918 5929 0
9141 -5918 -5926 -5931 0
9141 -5917 -5927 -5931 0
9141 -5917 -5926 -5932 0
c ((1<=(aux1297 + aux1300 + aux1301))=tv=SATLiteral(9142))
-9142 -5917 -5926 -5931 0
9142 5931 0
9142 5926 0
9142 5927 0
9142 5929 0
9142 5917 0
9142 5917 5926 0
9142 5917 5927 0
9142 5917 5929 0
9142 5918 0
9142 5918 5926 0
9142 5918 5927 0
9142 5918 5929 0
c (((aux1303 + aux1306 + aux1307)<=1)=tv=SATLiteral(9143))
-9143 5956 0
-9143 5950 5955 0
-9143 5951 0
-9143 5953 0
-9143 5941 5955 0
-9143 5941 5950 0
-9143 5941 5951 0
-9143 5941 5953 0
-9143 5942 0
-9143 5942 5950 0
-9143 5942 5951 0
-9143 5942 5953 0
9143 -5942 -5950 -5955 0
9143 -5941 -5951 -5955 0
9143 -5941 -5950 -5956 0
c ((1<=(aux1303 + aux1306 + aux1307))=tv=SATLiteral(9144))
-9144 -5941 -5950 -5955 0
9144 5955 0
9144 5950 0
9144 5951 0
9144 5953 0
9144 5941 0
9144 5941 5950 0
9144 5941 5951 0
9144 5941 5953 0
9144 5942 0
9144 5942 5950 0
9144 5942 5951 0
9144 5942 5953 0
c (((aux1309 + aux1312 + aux1313)<=1)=tv=SATLiteral(9145))
-9145 5980 0
-9145 5974 5979 0
-9145 5975 0
-9145 5977 0
-9145 5965 5979 0
-9145 5965 5974 0
-9145 5965 5975 0
-9145 5965 5977 0
-9145 5966 0
-9145 5966 5974 0
-9145 5966 5975 0
-9145 5966 5977 0
9145 -5966 -5974 -5979 0
9145 -5965 -5975 -5979 0
9145 -5965 -5974 -5980 0
c ((1<=(aux1309 + aux1312 + aux1313))=tv=SATLiteral(9146))
-9146 -5965 -5974 -5979 0
9146 5979 0
9146 5974 0
9146 5975 0
9146 5977 0
9146 5965 0
9146 5965 5974 0
9146 5965 5975 0
9146 5965 5977 0
9146 5966 0
9146 5966 5974 0
9146 5966 5975 0
9146 5966 5977 0
c (((aux1315 + aux1318 + aux1319)<=1)=tv=SATLiteral(9147))
-9147 6004 0
-9147 5998 6003 0
-9147 5999 0
-9147 6001 0
-9147 5989 6003 0
-9147 5989 5998 0
-9147 5989 5999 0
-9147 5989 6001 0
-9147 5990 0
-9147 5990 5998 0
-9147 5990 5999 0
-9147 5990 6001 0
9147 -5990 -5998 -6003 0
9147 -5989 -5999 -6003 0
9147 -5989 -5998 -6004 0
c ((1<=(aux1315 + aux1318 + aux1319))=tv=SATLiteral(9148))
-9148 -5989 -5998 -6003 0
9148 6003 0
9148 5998 0
9148 5999 0
9148 6001 0
9148 5989 0
9148 5989 5998 0
9148 5989 5999 0
9148 5989 6001 0
9148 5990 0
9148 5990 5998 0
9148 5990 5999 0
9148 5990 6001 0
c (((aux1321 + aux1324 + aux1325)<=1)=tv=SATLiteral(9149))
-9149 6028 0
-9149 6022 6027 0
-9149 6023 0
-9149 6025 0
-9149 6013 6027 0
-9149 6013 6022 0
-9149 6013 6023 0
-9149 6013 6025 0
-9149 6014 0
-9149 6014 6022 0
-9149 6014 6023 0
-9149 6014 6025 0
9149 -6014 -6022 -6027 0
9149 -6013 -6023 -6027 0
9149 -6013 -6022 -6028 0
c ((1<=(aux1321 + aux1324 + aux1325))=tv=SATLiteral(9150))
-9150 -6013 -6022 -6027 0
9150 6027 0
9150 6022 0
9150 6023 0
9150 6025 0
9150 6013 0
9150 6013 6022 0
9150 6013 6023 0
9150 6013 6025 0
9150 6014 0
9150 6014 6022 0
9150 6014 6023 0
9150 6014 6025 0
c (((aux1327 + aux1330 + aux1331)<=1)=tv=SATLiteral(9151))
-9151 6052 0
-9151 6046 6051 0
-9151 6047 0
-9151 6049 0
-9151 6037 6051 0
-9151 6037 6046 0
-9151 6037 6047 0
-9151 6037 6049 0
-9151 6038 0
-9151 6038 6046 0
-9151 6038 6047 0
-9151 6038 6049 0
9151 -6038 -6046 -6051 0
9151 -6037 -6047 -6051 0
9151 -6037 -6046 -6052 0
c ((1<=(aux1327 + aux1330 + aux1331))=tv=SATLiteral(9152))
-9152 -6037 -6046 -6051 0
9152 6051 0
9152 6046 0
9152 6047 0
9152 6049 0
9152 6037 0
9152 6037 6046 0
9152 6037 6047 0
9152 6037 6049 0
9152 6038 0
9152 6038 6046 0
9152 6038 6047 0
9152 6038 6049 0
c (((aux1333 + aux1336 + aux1337)<=1)=tv=SATLiteral(9153))
-9153 6076 0
-9153 6070 6075 0
-9153 6071 0
-9153 6073 0
-9153 6061 6075 0
-9153 6061 6070 0
-9153 6061 6071 0
-9153 6061 6073 0
-9153 6062 0
-9153 6062 6070 0
-9153 6062 6071 0
-9153 6062 6073 0
9153 -6062 -6070 -6075 0
9153 -6061 -6071 -6075 0
9153 -6061 -6070 -6076 0
c ((1<=(aux1333 + aux1336 + aux1337))=tv=SATLiteral(9154))
-9154 -6061 -6070 -6075 0
9154 6075 0
9154 6070 0
9154 6071 0
9154 6073 0
9154 6061 0
9154 6061 6070 0
9154 6061 6071 0
9154 6061 6073 0
9154 6062 0
9154 6062 6070 0
9154 6062 6071 0
9154 6062 6073 0
c (((aux1339 + aux1342 + aux1343)<=1)=tv=SATLiteral(9155))
-9155 6100 0
-9155 6094 6099 0
-9155 6095 0
-9155 6097 0
-9155 6085 6099 0
-9155 6085 6094 0
-9155 6085 6095 0
-9155 6085 6097 0
-9155 6086 0
-9155 6086 6094 0
-9155 6086 6095 0
-9155 6086 6097 0
9155 -6086 -6094 -6099 0
9155 -6085 -6095 -6099 0
9155 -6085 -6094 -6100 0
c ((1<=(aux1339 + aux1342 + aux1343))=tv=SATLiteral(9156))
-9156 -6085 -6094 -6099 0
9156 6099 0
9156 6094 0
9156 6095 0
9156 6097 0
9156 6085 0
9156 6085 6094 0
9156 6085 6095 0
9156 6085 6097 0
9156 6086 0
9156 6086 6094 0
9156 6086 6095 0
9156 6086 6097 0
c (((aux1345 + aux1348 + aux1349)<=1)=tv=SATLiteral(9157))
-9157 6124 0
-9157 6118 6123 0
-9157 6119 0
-9157 6121 0
-9157 6109 6123 0
-9157 6109 6118 0
-9157 6109 6119 0
-9157 6109 6121 0
-9157 6110 0
-9157 6110 6118 0
-9157 6110 6119 0
-9157 6110 6121 0
9157 -6110 -6118 -6123 0
9157 -6109 -6119 -6123 0
9157 -6109 -6118 -6124 0
c ((1<=(aux1345 + aux1348 + aux1349))=tv=SATLiteral(9158))
-9158 -6109 -6118 -6123 0
9158 6123 0
9158 6118 0
9158 6119 0
9158 6121 0
9158 6109 0
9158 6109 6118 0
9158 6109 6119 0
9158 6109 6121 0
9158 6110 0
9158 6110 6118 0
9158 6110 6119 0
9158 6110 6121 0
c (((aux1351 + aux1354 + aux1355)<=1)=tv=SATLiteral(9159))
-9159 6148 0
-9159 6142 6147 0
-9159 6143 0
-9159 6145 0
-9159 6133 6147 0
-9159 6133 6142 0
-9159 6133 6143 0
-9159 6133 6145 0
-9159 6134 0
-9159 6134 6142 0
-9159 6134 6143 0
-9159 6134 6145 0
9159 -6134 -6142 -6147 0
9159 -6133 -6143 -6147 0
9159 -6133 -6142 -6148 0
c ((1<=(aux1351 + aux1354 + aux1355))=tv=SATLiteral(9160))
-9160 -6133 -6142 -6147 0
9160 6147 0
9160 6142 0
9160 6143 0
9160 6145 0
9160 6133 0
9160 6133 6142 0
9160 6133 6143 0
9160 6133 6145 0
9160 6134 0
9160 6134 6142 0
9160 6134 6143 0
9160 6134 6145 0
c (((aux1357 + aux1360 + aux1361)<=1)=tv=SATLiteral(9161))
-9161 6172 0
-9161 6166 6171 0
-9161 6167 0
-9161 6169 0
-9161 6157 6171 0
-9161 6157 6166 0
-9161 6157 6167 0
-9161 6157 6169 0
-9161 6158 0
-9161 6158 6166 0
-9161 6158 6167 0
-9161 6158 6169 0
9161 -6158 -6166 -6171 0
9161 -6157 -6167 -6171 0
9161 -6157 -6166 -6172 0
c ((1<=(aux1357 + aux1360 + aux1361))=tv=SATLiteral(9162))
-9162 -6157 -6166 -6171 0
9162 6171 0
9162 6166 0
9162 6167 0
9162 6169 0
9162 6157 0
9162 6157 6166 0
9162 6157 6167 0
9162 6157 6169 0
9162 6158 0
9162 6158 6166 0
9162 6158 6167 0
9162 6158 6169 0
c (((aux1363 + aux1366 + aux1367)<=1)=tv=SATLiteral(9163))
-9163 6196 0
-9163 6190 6195 0
-9163 6191 0
-9163 6193 0
-9163 6181 6195 0
-9163 6181 6190 0
-9163 6181 6191 0
-9163 6181 6193 0
-9163 6182 0
-9163 6182 6190 0
-9163 6182 6191 0
-9163 6182 6193 0
9163 -6182 -6190 -6195 0
9163 -6181 -6191 -6195 0
9163 -6181 -6190 -6196 0
c ((1<=(aux1363 + aux1366 + aux1367))=tv=SATLiteral(9164))
-9164 -6181 -6190 -6195 0
9164 6195 0
9164 6190 0
9164 6191 0
9164 6193 0
9164 6181 0
9164 6181 6190 0
9164 6181 6191 0
9164 6181 6193 0
9164 6182 0
9164 6182 6190 0
9164 6182 6191 0
9164 6182 6193 0
c (((aux1369 + aux1372 + aux1373)<=1)=tv=SATLiteral(9165))
-9165 6220 0
-9165 6214 6219 0
-9165 6215 0
-9165 6217 0
-9165 6205 6219 0
-9165 6205 6214 0
-9165 6205 6215 0
-9165 6205 6217 0
-9165 6206 0
-9165 6206 6214 0
-9165 6206 6215 0
-9165 6206 6217 0
9165 -6206 -6214 -6219 0
9165 -6205 -6215 -6219 0
9165 -6205 -6214 -6220 0
c ((1<=(aux1369 + aux1372 + aux1373))=tv=SATLiteral(9166))
-9166 -6205 -6214 -6219 0
9166 6219 0
9166 6214 0
9166 6215 0
9166 6217 0
9166 6205 0
9166 6205 6214 0
9166 6205 6215 0
9166 6205 6217 0
9166 6206 0
9166 6206 6214 0
9166 6206 6215 0
9166 6206 6217 0
c (((aux1375 + aux1378 + aux1379)<=1)=tv=SATLiteral(9167))
-9167 6244 0
-9167 6238 6243 0
-9167 6239 0
-9167 6241 0
-9167 6229 6243 0
-9167 6229 6238 0
-9167 6229 6239 0
-9167 6229 6241 0
-9167 6230 0
-9167 6230 6238 0
-9167 6230 6239 0
-9167 6230 6241 0
9167 -6230 -6238 -6243 0
9167 -6229 -6239 -6243 0
9167 -6229 -6238 -6244 0
c ((1<=(aux1375 + aux1378 + aux1379))=tv=SATLiteral(9168))
-9168 -6229 -6238 -6243 0
9168 6243 0
9168 6238 0
9168 6239 0
9168 6241 0
9168 6229 0
9168 6229 6238 0
9168 6229 6239 0
9168 6229 6241 0
9168 6230 0
9168 6230 6238 0
9168 6230 6239 0
9168 6230 6241 0
c (((aux1381 + aux1384 + aux1385)<=1)=tv=SATLiteral(9169))
-9169 6268 0
-9169 6262 6267 0
-9169 6263 0
-9169 6265 0
-9169 6253 6267 0
-9169 6253 6262 0
-9169 6253 6263 0
-9169 6253 6265 0
-9169 6254 0
-9169 6254 6262 0
-9169 6254 6263 0
-9169 6254 6265 0
9169 -6254 -6262 -6267 0
9169 -6253 -6263 -6267 0
9169 -6253 -6262 -6268 0
c ((1<=(aux1381 + aux1384 + aux1385))=tv=SATLiteral(9170))
-9170 -6253 -6262 -6267 0
9170 6267 0
9170 6262 0
9170 6263 0
9170 6265 0
9170 6253 0
9170 6253 6262 0
9170 6253 6263 0
9170 6253 6265 0
9170 6254 0
9170 6254 6262 0
9170 6254 6263 0
9170 6254 6265 0
c (((aux1387 + aux1390 + aux1391)<=1)=tv=SATLiteral(9171))
-9171 6292 0
-9171 6286 6291 0
-9171 6287 0
-9171 6289 0
-9171 6277 6291 0
-9171 6277 6286 0
-9171 6277 6287 0
-9171 6277 6289 0
-9171 6278 0
-9171 6278 6286 0
-9171 6278 6287 0
-9171 6278 6289 0
9171 -6278 -6286 -6291 0
9171 -6277 -6287 -6291 0
9171 -6277 -6286 -6292 0
c ((1<=(aux1387 + aux1390 + aux1391))=tv=SATLiteral(9172))
-9172 -6277 -6286 -6291 0
9172 6291 0
9172 6286 0
9172 6287 0
9172 6289 0
9172 6277 0
9172 6277 6286 0
9172 6277 6287 0
9172 6277 6289 0
9172 6278 0
9172 6278 6286 0
9172 6278 6287 0
9172 6278 6289 0
c (((aux1393 + aux1396 + aux1397)<=1)=tv=SATLiteral(9173))
-9173 6316 0
-9173 6310 6315 0
-9173 6311 0
-9173 6313 0
-9173 6301 6315 0
-9173 6301 6310 0
-9173 6301 6311 0
-9173 6301 6313 0
-9173 6302 0
-9173 6302 6310 0
-9173 6302 6311 0
-9173 6302 6313 0
9173 -6302 -6310 -6315 0
9173 -6301 -6311 -6315 0
9173 -6301 -6310 -6316 0
c ((1<=(aux1393 + aux1396 + aux1397))=tv=SATLiteral(9174))
-9174 -6301 -6310 -6315 0
9174 6315 0
9174 6310 0
9174 6311 0
9174 6313 0
9174 6301 0
9174 6301 6310 0
9174 6301 6311 0
9174 6301 6313 0
9174 6302 0
9174 6302 6310 0
9174 6302 6311 0
9174 6302 6313 0
c (((aux1399 + aux1402 + aux1403)<=1)=tv=SATLiteral(9175))
-9175 6340 0
-9175 6334 6339 0
-9175 6335 0
-9175 6337 0
-9175 6325 6339 0
-9175 6325 6334 0
-9175 6325 6335 0
-9175 6325 6337 0
-9175 6326 0
-9175 6326 6334 0
-9175 6326 6335 0
-9175 6326 6337 0
9175 -6326 -6334 -6339 0
9175 -6325 -6335 -6339 0
9175 -6325 -6334 -6340 0
c ((1<=(aux1399 + aux1402 + aux1403))=tv=SATLiteral(9176))
-9176 -6325 -6334 -6339 0
9176 6339 0
9176 6334 0
9176 6335 0
9176 6337 0
9176 6325 0
9176 6325 6334 0
9176 6325 6335 0
9176 6325 6337 0
9176 6326 0
9176 6326 6334 0
9176 6326 6335 0
9176 6326 6337 0
c (((aux1405 + aux1408 + aux1409)<=1)=tv=SATLiteral(9177))
-9177 6364 0
-9177 6358 6363 0
-9177 6359 0
-9177 6361 0
-9177 6349 6363 0
-9177 6349 6358 0
-9177 6349 6359 0
-9177 6349 6361 0
-9177 6350 0
-9177 6350 6358 0
-9177 6350 6359 0
-9177 6350 6361 0
9177 -6350 -6358 -6363 0
9177 -6349 -6359 -6363 0
9177 -6349 -6358 -6364 0
c ((1<=(aux1405 + aux1408 + aux1409))=tv=SATLiteral(9178))
-9178 -6349 -6358 -6363 0
9178 6363 0
9178 6358 0
9178 6359 0
9178 6361 0
9178 6349 0
9178 6349 6358 0
9178 6349 6359 0
9178 6349 6361 0
9178 6350 0
9178 6350 6358 0
9178 6350 6359 0
9178 6350 6361 0
c (((aux1411 + aux1414 + aux1415)<=1)=tv=SATLiteral(9179))
-9179 6388 0
-9179 6382 6387 0
-9179 6383 0
-9179 6385 0
-9179 6373 6387 0
-9179 6373 6382 0
-9179 6373 6383 0
-9179 6373 6385 0
-9179 6374 0
-9179 6374 6382 0
-9179 6374 6383 0
-9179 6374 6385 0
9179 -6374 -6382 -6387 0
9179 -6373 -6383 -6387 0
9179 -6373 -6382 -6388 0
c ((1<=(aux1411 + aux1414 + aux1415))=tv=SATLiteral(9180))
-9180 -6373 -6382 -6387 0
9180 6387 0
9180 6382 0
9180 6383 0
9180 6385 0
9180 6373 0
9180 6373 6382 0
9180 6373 6383 0
9180 6373 6385 0
9180 6374 0
9180 6374 6382 0
9180 6374 6383 0
9180 6374 6385 0
c (((aux1417 + aux1420 + aux1421)<=1)=tv=SATLiteral(9181))
-9181 6412 0
-9181 6406 6411 0
-9181 6407 0
-9181 6409 0
-9181 6397 6411 0
-9181 6397 6406 0
-9181 6397 6407 0
-9181 6397 6409 0
-9181 6398 0
-9181 6398 6406 0
-9181 6398 6407 0
-9181 6398 6409 0
9181 -6398 -6406 -6411 0
9181 -6397 -6407 -6411 0
9181 -6397 -6406 -6412 0
c ((1<=(aux1417 + aux1420 + aux1421))=tv=SATLiteral(9182))
-9182 -6397 -6406 -6411 0
9182 6411 0
9182 6406 0
9182 6407 0
9182 6409 0
9182 6397 0
9182 6397 6406 0
9182 6397 6407 0
9182 6397 6409 0
9182 6398 0
9182 6398 6406 0
9182 6398 6407 0
9182 6398 6409 0
c (((aux1423 + aux1426 + aux1427)<=1)=tv=SATLiteral(9183))
-9183 6436 0
-9183 6430 6435 0
-9183 6431 0
-9183 6433 0
-9183 6421 6435 0
-9183 6421 6430 0
-9183 6421 6431 0
-9183 6421 6433 0
-9183 6422 0
-9183 6422 6430 0
-9183 6422 6431 0
-9183 6422 6433 0
9183 -6422 -6430 -6435 0
9183 -6421 -6431 -6435 0
9183 -6421 -6430 -6436 0
c ((1<=(aux1423 + aux1426 + aux1427))=tv=SATLiteral(9184))
-9184 -6421 -6430 -6435 0
9184 6435 0
9184 6430 0
9184 6431 0
9184 6433 0
9184 6421 0
9184 6421 6430 0
9184 6421 6431 0
9184 6421 6433 0
9184 6422 0
9184 6422 6430 0
9184 6422 6431 0
9184 6422 6433 0
c (((aux1429 + aux1432 + aux1433)<=1)=tv=SATLiteral(9185))
-9185 6460 0
-9185 6454 6459 0
-9185 6455 0
-9185 6457 0
-9185 6445 6459 0
-9185 6445 6454 0
-9185 6445 6455 0
-9185 6445 6457 0
-9185 6446 0
-9185 6446 6454 0
-9185 6446 6455 0
-9185 6446 6457 0
9185 -6446 -6454 -6459 0
9185 -6445 -6455 -6459 0
9185 -6445 -6454 -6460 0
c ((1<=(aux1429 + aux1432 + aux1433))=tv=SATLiteral(9186))
-9186 -6445 -6454 -6459 0
9186 6459 0
9186 6454 0
9186 6455 0
9186 6457 0
9186 6445 0
9186 6445 6454 0
9186 6445 6455 0
9186 6445 6457 0
9186 6446 0
9186 6446 6454 0
9186 6446 6455 0
9186 6446 6457 0
c (((aux1435 + aux1438 + aux1439)<=1)=tv=SATLiteral(9187))
-9187 6484 0
-9187 6478 6483 0
-9187 6479 0
-9187 6481 0
-9187 6469 6483 0
-9187 6469 6478 0
-9187 6469 6479 0
-9187 6469 6481 0
-9187 6470 0
-9187 6470 6478 0
-9187 6470 6479 0
-9187 6470 6481 0
9187 -6470 -6478 -6483 0
9187 -6469 -6479 -6483 0
9187 -6469 -6478 -6484 0
c ((1<=(aux1435 + aux1438 + aux1439))=tv=SATLiteral(9188))
-9188 -6469 -6478 -6483 0
9188 6483 0
9188 6478 0
9188 6479 0
9188 6481 0
9188 6469 0
9188 6469 6478 0
9188 6469 6479 0
9188 6469 6481 0
9188 6470 0
9188 6470 6478 0
9188 6470 6479 0
9188 6470 6481 0
c (((aux1441 + aux1444 + aux1445)<=1)=tv=SATLiteral(9189))
-9189 6508 0
-9189 6502 6507 0
-9189 6503 0
-9189 6505 0
-9189 6493 6507 0
-9189 6493 6502 0
-9189 6493 6503 0
-9189 6493 6505 0
-9189 6494 0
-9189 6494 6502 0
-9189 6494 6503 0
-9189 6494 6505 0
9189 -6494 -6502 -6507 0
9189 -6493 -6503 -6507 0
9189 -6493 -6502 -6508 0
c ((1<=(aux1441 + aux1444 + aux1445))=tv=SATLiteral(9190))
-9190 -6493 -6502 -6507 0
9190 6507 0
9190 6502 0
9190 6503 0
9190 6505 0
9190 6493 0
9190 6493 6502 0
9190 6493 6503 0
9190 6493 6505 0
9190 6494 0
9190 6494 6502 0
9190 6494 6503 0
9190 6494 6505 0
c (((aux1447 + aux1450 + aux1451)<=1)=tv=SATLiteral(9191))
-9191 6532 0
-9191 6526 6531 0
-9191 6527 0
-9191 6529 0
-9191 6517 6531 0
-9191 6517 6526 0
-9191 6517 6527 0
-9191 6517 6529 0
-9191 6518 0
-9191 6518 6526 0
-9191 6518 6527 0
-9191 6518 6529 0
9191 -6518 -6526 -6531 0
9191 -6517 -6527 -6531 0
9191 -6517 -6526 -6532 0
c ((1<=(aux1447 + aux1450 + aux1451))=tv=SATLiteral(9192))
-9192 -6517 -6526 -6531 0
9192 6531 0
9192 6526 0
9192 6527 0
9192 6529 0
9192 6517 0
9192 6517 6526 0
9192 6517 6527 0
9192 6517 6529 0
9192 6518 0
9192 6518 6526 0
9192 6518 6527 0
9192 6518 6529 0
c (((aux1453 + aux1456 + aux1457)<=1)=tv=SATLiteral(9193))
-9193 6556 0
-9193 6550 6555 0
-9193 6551 0
-9193 6553 0
-9193 6541 6555 0
-9193 6541 6550 0
-9193 6541 6551 0
-9193 6541 6553 0
-9193 6542 0
-9193 6542 6550 0
-9193 6542 6551 0
-9193 6542 6553 0
9193 -6542 -6550 -6555 0
9193 -6541 -6551 -6555 0
9193 -6541 -6550 -6556 0
c ((1<=(aux1453 + aux1456 + aux1457))=tv=SATLiteral(9194))
-9194 -6541 -6550 -6555 0
9194 6555 0
9194 6550 0
9194 6551 0
9194 6553 0
9194 6541 0
9194 6541 6550 0
9194 6541 6551 0
9194 6541 6553 0
9194 6542 0
9194 6542 6550 0
9194 6542 6551 0
9194 6542 6553 0
c (((aux1459 + aux1462 + aux1463)<=1)=tv=SATLiteral(9195))
-9195 6580 0
-9195 6574 6579 0
-9195 6575 0
-9195 6577 0
-9195 6565 6579 0
-9195 6565 6574 0
-9195 6565 6575 0
-9195 6565 6577 0
-9195 6566 0
-9195 6566 6574 0
-9195 6566 6575 0
-9195 6566 6577 0
9195 -6566 -6574 -6579 0
9195 -6565 -6575 -6579 0
9195 -6565 -6574 -6580 0
c ((1<=(aux1459 + aux1462 + aux1463))=tv=SATLiteral(9196))
-9196 -6565 -6574 -6579 0
9196 6579 0
9196 6574 0
9196 6575 0
9196 6577 0
9196 6565 0
9196 6565 6574 0
9196 6565 6575 0
9196 6565 6577 0
9196 6566 0
9196 6566 6574 0
9196 6566 6575 0
9196 6566 6577 0
c (((aux1465 + aux1468 + aux1469)<=1)=tv=SATLiteral(9197))
-9197 6604 0
-9197 6598 6603 0
-9197 6599 0
-9197 6601 0
-9197 6589 6603 0
-9197 6589 6598 0
-9197 6589 6599 0
-9197 6589 6601 0
-9197 6590 0
-9197 6590 6598 0
-9197 6590 6599 0
-9197 6590 6601 0
9197 -6590 -6598 -6603 0
9197 -6589 -6599 -6603 0
9197 -6589 -6598 -6604 0
c ((1<=(aux1465 + aux1468 + aux1469))=tv=SATLiteral(9198))
-9198 -6589 -6598 -6603 0
9198 6603 0
9198 6598 0
9198 6599 0
9198 6601 0
9198 6589 0
9198 6589 6598 0
9198 6589 6599 0
9198 6589 6601 0
9198 6590 0
9198 6590 6598 0
9198 6590 6599 0
9198 6590 6601 0
c (((aux1471 + aux1474 + aux1475)<=1)=tv=SATLiteral(9199))
-9199 6628 0
-9199 6622 6627 0
-9199 6623 0
-9199 6625 0
-9199 6613 6627 0
-9199 6613 6622 0
-9199 6613 6623 0
-9199 6613 6625 0
-9199 6614 0
-9199 6614 6622 0
-9199 6614 6623 0
-9199 6614 6625 0
9199 -6614 -6622 -6627 0
9199 -6613 -6623 -6627 0
9199 -6613 -6622 -6628 0
c ((1<=(aux1471 + aux1474 + aux1475))=tv=SATLiteral(9200))
-9200 -6613 -6622 -6627 0
9200 6627 0
9200 6622 0
9200 6623 0
9200 6625 0
9200 6613 0
9200 6613 6622 0
9200 6613 6623 0
9200 6613 6625 0
9200 6614 0
9200 6614 6622 0
9200 6614 6623 0
9200 6614 6625 0
c (((aux1477 + aux1480 + aux1481)<=1)=tv=SATLiteral(9201))
-9201 6652 0
-9201 6646 6651 0
-9201 6647 0
-9201 6649 0
-9201 6637 6651 0
-9201 6637 6646 0
-9201 6637 6647 0
-9201 6637 6649 0
-9201 6638 0
-9201 6638 6646 0
-9201 6638 6647 0
-9201 6638 6649 0
9201 -6638 -6646 -6651 0
9201 -6637 -6647 -6651 0
9201 -6637 -6646 -6652 0
c ((1<=(aux1477 + aux1480 + aux1481))=tv=SATLiteral(9202))
-9202 -6637 -6646 -6651 0
9202 6651 0
9202 6646 0
9202 6647 0
9202 6649 0
9202 6637 0
9202 6637 6646 0
9202 6637 6647 0
9202 6637 6649 0
9202 6638 0
9202 6638 6646 0
9202 6638 6647 0
9202 6638 6649 0
c (((aux1483 + aux1486 + aux1487)<=1)=tv=SATLiteral(9203))
-9203 6676 0
-9203 6670 6675 0
-9203 6671 0
-9203 6673 0
-9203 6661 6675 0
-9203 6661 6670 0
-9203 6661 6671 0
-9203 6661 6673 0
-9203 6662 0
-9203 6662 6670 0
-9203 6662 6671 0
-9203 6662 6673 0
9203 -6662 -6670 -6675 0
9203 -6661 -6671 -6675 0
9203 -6661 -6670 -6676 0
c ((1<=(aux1483 + aux1486 + aux1487))=tv=SATLiteral(9204))
-9204 -6661 -6670 -6675 0
9204 6675 0
9204 6670 0
9204 6671 0
9204 6673 0
9204 6661 0
9204 6661 6670 0
9204 6661 6671 0
9204 6661 6673 0
9204 6662 0
9204 6662 6670 0
9204 6662 6671 0
9204 6662 6673 0
c (((aux1489 + aux1492 + aux1493)<=1)=tv=SATLiteral(9205))
-9205 6700 0
-9205 6694 6699 0
-9205 6695 0
-9205 6697 0
-9205 6685 6699 0
-9205 6685 6694 0
-9205 6685 6695 0
-9205 6685 6697 0
-9205 6686 0
-9205 6686 6694 0
-9205 6686 6695 0
-9205 6686 6697 0
9205 -6686 -6694 -6699 0
9205 -6685 -6695 -6699 0
9205 -6685 -6694 -6700 0
c ((1<=(aux1489 + aux1492 + aux1493))=tv=SATLiteral(9206))
-9206 -6685 -6694 -6699 0
9206 6699 0
9206 6694 0
9206 6695 0
9206 6697 0
9206 6685 0
9206 6685 6694 0
9206 6685 6695 0
9206 6685 6697 0
9206 6686 0
9206 6686 6694 0
9206 6686 6695 0
9206 6686 6697 0
c (((aux1495 + aux1498 + aux1499)<=1)=tv=SATLiteral(9207))
-9207 6724 0
-9207 6718 6723 0
-9207 6719 0
-9207 6721 0
-9207 6709 6723 0
-9207 6709 6718 0
-9207 6709 6719 0
-9207 6709 6721 0
-9207 6710 0
-9207 6710 6718 0
-9207 6710 6719 0
-9207 6710 6721 0
9207 -6710 -6718 -6723 0
9207 -6709 -6719 -6723 0
9207 -6709 -6718 -6724 0
c ((1<=(aux1495 + aux1498 + aux1499))=tv=SATLiteral(9208))
-9208 -6709 -6718 -6723 0
9208 6723 0
9208 6718 0
9208 6719 0
9208 6721 0
9208 6709 0
9208 6709 6718 0
9208 6709 6719 0
9208 6709 6721 0
9208 6710 0
9208 6710 6718 0
9208 6710 6719 0
9208 6710 6721 0
c (((aux1501 + aux1504 + aux1505)<=1)=tv=SATLiteral(9209))
-9209 6748 0
-9209 6742 6747 0
-9209 6743 0
-9209 6745 0
-9209 6733 6747 0
-9209 6733 6742 0
-9209 6733 6743 0
-9209 6733 6745 0
-9209 6734 0
-9209 6734 6742 0
-9209 6734 6743 0
-9209 6734 6745 0
9209 -6734 -6742 -6747 0
9209 -6733 -6743 -6747 0
9209 -6733 -6742 -6748 0
c ((1<=(aux1501 + aux1504 + aux1505))=tv=SATLiteral(9210))
-9210 -6733 -6742 -6747 0
9210 6747 0
9210 6742 0
9210 6743 0
9210 6745 0
9210 6733 0
9210 6733 6742 0
9210 6733 6743 0
9210 6733 6745 0
9210 6734 0
9210 6734 6742 0
9210 6734 6743 0
9210 6734 6745 0
c (((aux1507 + aux1510 + aux1511)<=1)=tv=SATLiteral(9211))
-9211 6772 0
-9211 6766 6771 0
-9211 6767 0
-9211 6769 0
-9211 6757 6771 0
-9211 6757 6766 0
-9211 6757 6767 0
-9211 6757 6769 0
-9211 6758 0
-9211 6758 6766 0
-9211 6758 6767 0
-9211 6758 6769 0
9211 -6758 -6766 -6771 0
9211 -6757 -6767 -6771 0
9211 -6757 -6766 -6772 0
c ((1<=(aux1507 + aux1510 + aux1511))=tv=SATLiteral(9212))
-9212 -6757 -6766 -6771 0
9212 6771 0
9212 6766 0
9212 6767 0
9212 6769 0
9212 6757 0
9212 6757 6766 0
9212 6757 6767 0
9212 6757 6769 0
9212 6758 0
9212 6758 6766 0
9212 6758 6767 0
9212 6758 6769 0
c (((aux1513 + aux1516 + aux1517)<=1)=tv=SATLiteral(9213))
-9213 6796 0
-9213 6790 6795 0
-9213 6791 0
-9213 6793 0
-9213 6781 6795 0
-9213 6781 6790 0
-9213 6781 6791 0
-9213 6781 6793 0
-9213 6782 0
-9213 6782 6790 0
-9213 6782 6791 0
-9213 6782 6793 0
9213 -6782 -6790 -6795 0
9213 -6781 -6791 -6795 0
9213 -6781 -6790 -6796 0
c ((1<=(aux1513 + aux1516 + aux1517))=tv=SATLiteral(9214))
-9214 -6781 -6790 -6795 0
9214 6795 0
9214 6790 0
9214 6791 0
9214 6793 0
9214 6781 0
9214 6781 6790 0
9214 6781 6791 0
9214 6781 6793 0
9214 6782 0
9214 6782 6790 0
9214 6782 6791 0
9214 6782 6793 0
c (((aux1519 + aux1522 + aux1523)<=1)=tv=SATLiteral(9215))
-9215 6820 0
-9215 6814 6819 0
-9215 6815 0
-9215 6817 0
-9215 6805 6819 0
-9215 6805 6814 0
-9215 6805 6815 0
-9215 6805 6817 0
-9215 6806 0
-9215 6806 6814 0
-9215 6806 6815 0
-9215 6806 6817 0
9215 -6806 -6814 -6819 0
9215 -6805 -6815 -6819 0
9215 -6805 -6814 -6820 0
c ((1<=(aux1519 + aux1522 + aux1523))=tv=SATLiteral(9216))
-9216 -6805 -6814 -6819 0
9216 6819 0
9216 6814 0
9216 6815 0
9216 6817 0
9216 6805 0
9216 6805 6814 0
9216 6805 6815 0
9216 6805 6817 0
9216 6806 0
9216 6806 6814 0
9216 6806 6815 0
9216 6806 6817 0
c (((aux1525 + aux1528 + aux1529)<=1)=tv=SATLiteral(9217))
-9217 6844 0
-9217 6838 6843 0
-9217 6839 0
-9217 6841 0
-9217 6829 6843 0
-9217 6829 6838 0
-9217 6829 6839 0
-9217 6829 6841 0
-9217 6830 0
-9217 6830 6838 0
-9217 6830 6839 0
-9217 6830 6841 0
9217 -6830 -6838 -6843 0
9217 -6829 -6839 -6843 0
9217 -6829 -6838 -6844 0
c ((1<=(aux1525 + aux1528 + aux1529))=tv=SATLiteral(9218))
-9218 -6829 -6838 -6843 0
9218 6843 0
9218 6838 0
9218 6839 0
9218 6841 0
9218 6829 0
9218 6829 6838 0
9218 6829 6839 0
9218 6829 6841 0
9218 6830 0
9218 6830 6838 0
9218 6830 6839 0
9218 6830 6841 0
c (((aux1531 + aux1534 + aux1535)<=1)=tv=SATLiteral(9219))
-9219 6868 0
-9219 6862 6867 0
-9219 6863 0
-9219 6865 0
-9219 6853 6867 0
-9219 6853 6862 0
-9219 6853 6863 0
-9219 6853 6865 0
-9219 6854 0
-9219 6854 6862 0
-9219 6854 6863 0
-9219 6854 6865 0
9219 -6854 -6862 -6867 0
9219 -6853 -6863 -6867 0
9219 -6853 -6862 -6868 0
c ((1<=(aux1531 + aux1534 + aux1535))=tv=SATLiteral(9220))
-9220 -6853 -6862 -6867 0
9220 6867 0
9220 6862 0
9220 6863 0
9220 6865 0
9220 6853 0
9220 6853 6862 0
9220 6853 6863 0
9220 6853 6865 0
9220 6854 0
9220 6854 6862 0
9220 6854 6863 0
9220 6854 6865 0
c (((aux1537 + aux1540 + aux1541)<=1)=tv=SATLiteral(9221))
-9221 6892 0
-9221 6886 6891 0
-9221 6887 0
-9221 6889 0
-9221 6877 6891 0
-9221 6877 6886 0
-9221 6877 6887 0
-9221 6877 6889 0
-9221 6878 0
-9221 6878 6886 0
-9221 6878 6887 0
-9221 6878 6889 0
9221 -6878 -6886 -6891 0
9221 -6877 -6887 -6891 0
9221 -6877 -6886 -6892 0
c ((1<=(aux1537 + aux1540 + aux1541))=tv=SATLiteral(9222))
-9222 -6877 -6886 -6891 0
9222 6891 0
9222 6886 0
9222 6887 0
9222 6889 0
9222 6877 0
9222 6877 6886 0
9222 6877 6887 0
9222 6877 6889 0
9222 6878 0
9222 6878 6886 0
9222 6878 6887 0
9222 6878 6889 0
c (((aux1543 + aux1546 + aux1547)<=1)=tv=SATLiteral(9223))
-9223 6916 0
-9223 6910 6915 0
-9223 6911 0
-9223 6913 0
-9223 6901 6915 0
-9223 6901 6910 0
-9223 6901 6911 0
-9223 6901 6913 0
-9223 6902 0
-9223 6902 6910 0
-9223 6902 6911 0
-9223 6902 6913 0
9223 -6902 -6910 -6915 0
9223 -6901 -6911 -6915 0
9223 -6901 -6910 -6916 0
c ((1<=(aux1543 + aux1546 + aux1547))=tv=SATLiteral(9224))
-9224 -6901 -6910 -6915 0
9224 6915 0
9224 6910 0
9224 6911 0
9224 6913 0
9224 6901 0
9224 6901 6910 0
9224 6901 6911 0
9224 6901 6913 0
9224 6902 0
9224 6902 6910 0
9224 6902 6911 0
9224 6902 6913 0
c (((aux1549 + aux1552 + aux1553)<=1)=tv=SATLiteral(9225))
-9225 6940 0
-9225 6934 6939 0
-9225 6935 0
-9225 6937 0
-9225 6925 6939 0
-9225 6925 6934 0
-9225 6925 6935 0
-9225 6925 6937 0
-9225 6926 0
-9225 6926 6934 0
-9225 6926 6935 0
-9225 6926 6937 0
9225 -6926 -6934 -6939 0
9225 -6925 -6935 -6939 0
9225 -6925 -6934 -6940 0
c ((1<=(aux1549 + aux1552 + aux1553))=tv=SATLiteral(9226))
-9226 -6925 -6934 -6939 0
9226 6939 0
9226 6934 0
9226 6935 0
9226 6937 0
9226 6925 0
9226 6925 6934 0
9226 6925 6935 0
9226 6925 6937 0
9226 6926 0
9226 6926 6934 0
9226 6926 6935 0
9226 6926 6937 0
c (((aux1555 + aux1558 + aux1559)<=1)=tv=SATLiteral(9227))
-9227 6964 0
-9227 6958 6963 0
-9227 6959 0
-9227 6961 0
-9227 6949 6963 0
-9227 6949 6958 0
-9227 6949 6959 0
-9227 6949 6961 0
-9227 6950 0
-9227 6950 6958 0
-9227 6950 6959 0
-9227 6950 6961 0
9227 -6950 -6958 -6963 0
9227 -6949 -6959 -6963 0
9227 -6949 -6958 -6964 0
c ((1<=(aux1555 + aux1558 + aux1559))=tv=SATLiteral(9228))
-9228 -6949 -6958 -6963 0
9228 6963 0
9228 6958 0
9228 6959 0
9228 6961 0
9228 6949 0
9228 6949 6958 0
9228 6949 6959 0
9228 6949 6961 0
9228 6950 0
9228 6950 6958 0
9228 6950 6959 0
9228 6950 6961 0
c (((aux1561 + aux1564 + aux1565)<=1)=tv=SATLiteral(9229))
-9229 6988 0
-9229 6982 6987 0
-9229 6983 0
-9229 6985 0
-9229 6973 6987 0
-9229 6973 6982 0
-9229 6973 6983 0
-9229 6973 6985 0
-9229 6974 0
-9229 6974 6982 0
-9229 6974 6983 0
-9229 6974 6985 0
9229 -6974 -6982 -6987 0
9229 -6973 -6983 -6987 0
9229 -6973 -6982 -6988 0
c ((1<=(aux1561 + aux1564 + aux1565))=tv=SATLiteral(9230))
-9230 -6973 -6982 -6987 0
9230 6987 0
9230 6982 0
9230 6983 0
9230 6985 0
9230 6973 0
9230 6973 6982 0
9230 6973 6983 0
9230 6973 6985 0
9230 6974 0
9230 6974 6982 0
9230 6974 6983 0
9230 6974 6985 0
c (((aux1567 + aux1570 + aux1571)<=1)=tv=SATLiteral(9231))
-9231 7012 0
-9231 7006 7011 0
-9231 7007 0
-9231 7009 0
-9231 6997 7011 0
-9231 6997 7006 0
-9231 6997 7007 0
-9231 6997 7009 0
-9231 6998 0
-9231 6998 7006 0
-9231 6998 7007 0
-9231 6998 7009 0
9231 -6998 -7006 -7011 0
9231 -6997 -7007 -7011 0
9231 -6997 -7006 -7012 0
c ((1<=(aux1567 + aux1570 + aux1571))=tv=SATLiteral(9232))
-9232 -6997 -7006 -7011 0
9232 7011 0
9232 7006 0
9232 7007 0
9232 7009 0
9232 6997 0
9232 6997 7006 0
9232 6997 7007 0
9232 6997 7009 0
9232 6998 0
9232 6998 7006 0
9232 6998 7007 0
9232 6998 7009 0
c (((aux1573 + aux1576 + aux1577)<=1)=tv=SATLiteral(9233))
-9233 7036 0
-9233 7030 7035 0
-9233 7031 0
-9233 7033 0
-9233 7021 7035 0
-9233 7021 7030 0
-9233 7021 7031 0
-9233 7021 7033 0
-9233 7022 0
-9233 7022 7030 0
-9233 7022 7031 0
-9233 7022 7033 0
9233 -7022 -7030 -7035 0
9233 -7021 -7031 -7035 0
9233 -7021 -7030 -7036 0
c ((1<=(aux1573 + aux1576 + aux1577))=tv=SATLiteral(9234))
-9234 -7021 -7030 -7035 0
9234 7035 0
9234 7030 0
9234 7031 0
9234 7033 0
9234 7021 0
9234 7021 7030 0
9234 7021 7031 0
9234 7021 7033 0
9234 7022 0
9234 7022 7030 0
9234 7022 7031 0
9234 7022 7033 0
c (((aux1579 + aux1582 + aux1583)<=1)=tv=SATLiteral(9235))
-9235 7060 0
-9235 7054 7059 0
-9235 7055 0
-9235 7057 0
-9235 7045 7059 0
-9235 7045 7054 0
-9235 7045 7055 0
-9235 7045 7057 0
-9235 7046 0
-9235 7046 7054 0
-9235 7046 7055 0
-9235 7046 7057 0
9235 -7046 -7054 -7059 0
9235 -7045 -7055 -7059 0
9235 -7045 -7054 -7060 0
c ((1<=(aux1579 + aux1582 + aux1583))=tv=SATLiteral(9236))
-9236 -7045 -7054 -7059 0
9236 7059 0
9236 7054 0
9236 7055 0
9236 7057 0
9236 7045 0
9236 7045 7054 0
9236 7045 7055 0
9236 7045 7057 0
9236 7046 0
9236 7046 7054 0
9236 7046 7055 0
9236 7046 7057 0
c (((aux1585 + aux1588 + aux1589)<=1)=tv=SATLiteral(9237))
-9237 7084 0
-9237 7078 7083 0
-9237 7079 0
-9237 7081 0
-9237 7069 7083 0
-9237 7069 7078 0
-9237 7069 7079 0
-9237 7069 7081 0
-9237 7070 0
-9237 7070 7078 0
-9237 7070 7079 0
-9237 7070 7081 0
9237 -7070 -7078 -7083 0
9237 -7069 -7079 -7083 0
9237 -7069 -7078 -7084 0
c ((1<=(aux1585 + aux1588 + aux1589))=tv=SATLiteral(9238))
-9238 -7069 -7078 -7083 0
9238 7083 0
9238 7078 0
9238 7079 0
9238 7081 0
9238 7069 0
9238 7069 7078 0
9238 7069 7079 0
9238 7069 7081 0
9238 7070 0
9238 7070 7078 0
9238 7070 7079 0
9238 7070 7081 0
c (((aux1591 + aux1594 + aux1595)<=1)=tv=SATLiteral(9239))
-9239 7108 0
-9239 7102 7107 0
-9239 7103 0
-9239 7105 0
-9239 7093 7107 0
-9239 7093 7102 0
-9239 7093 7103 0
-9239 7093 7105 0
-9239 7094 0
-9239 7094 7102 0
-9239 7094 7103 0
-9239 7094 7105 0
9239 -7094 -7102 -7107 0
9239 -7093 -7103 -7107 0
9239 -7093 -7102 -7108 0
c ((1<=(aux1591 + aux1594 + aux1595))=tv=SATLiteral(9240))
-9240 -7093 -7102 -7107 0
9240 7107 0
9240 7102 0
9240 7103 0
9240 7105 0
9240 7093 0
9240 7093 7102 0
9240 7093 7103 0
9240 7093 7105 0
9240 7094 0
9240 7094 7102 0
9240 7094 7103 0
9240 7094 7105 0
c (((aux1597 + aux1600 + aux1601)<=1)=tv=SATLiteral(9241))
-9241 7132 0
-9241 7126 7131 0
-9241 7127 0
-9241 7129 0
-9241 7117 7131 0
-9241 7117 7126 0
-9241 7117 7127 0
-9241 7117 7129 0
-9241 7118 0
-9241 7118 7126 0
-9241 7118 7127 0
-9241 7118 7129 0
9241 -7118 -7126 -7131 0
9241 -7117 -7127 -7131 0
9241 -7117 -7126 -7132 0
c ((1<=(aux1597 + aux1600 + aux1601))=tv=SATLiteral(9242))
-9242 -7117 -7126 -7131 0
9242 7131 0
9242 7126 0
9242 7127 0
9242 7129 0
9242 7117 0
9242 7117 7126 0
9242 7117 7127 0
9242 7117 7129 0
9242 7118 0
9242 7118 7126 0
9242 7118 7127 0
9242 7118 7129 0
c (((aux1603 + aux1606 + aux1607)<=1)=tv=SATLiteral(9243))
-9243 7156 0
-9243 7150 7155 0
-9243 7151 0
-9243 7153 0
-9243 7141 7155 0
-9243 7141 7150 0
-9243 7141 7151 0
-9243 7141 7153 0
-9243 7142 0
-9243 7142 7150 0
-9243 7142 7151 0
-9243 7142 7153 0
9243 -7142 -7150 -7155 0
9243 -7141 -7151 -7155 0
9243 -7141 -7150 -7156 0
c ((1<=(aux1603 + aux1606 + aux1607))=tv=SATLiteral(9244))
-9244 -7141 -7150 -7155 0
9244 7155 0
9244 7150 0
9244 7151 0
9244 7153 0
9244 7141 0
9244 7141 7150 0
9244 7141 7151 0
9244 7141 7153 0
9244 7142 0
9244 7142 7150 0
9244 7142 7151 0
9244 7142 7153 0
c (((aux1609 + aux1612 + aux1613)<=1)=tv=SATLiteral(9245))
-9245 7180 0
-9245 7174 7179 0
-9245 7175 0
-9245 7177 0
-9245 7165 7179 0
-9245 7165 7174 0
-9245 7165 7175 0
-9245 7165 7177 0
-9245 7166 0
-9245 7166 7174 0
-9245 7166 7175 0
-9245 7166 7177 0
9245 -7166 -7174 -7179 0
9245 -7165 -7175 -7179 0
9245 -7165 -7174 -7180 0
c ((1<=(aux1609 + aux1612 + aux1613))=tv=SATLiteral(9246))
-9246 -7165 -7174 -7179 0
9246 7179 0
9246 7174 0
9246 7175 0
9246 7177 0
9246 7165 0
9246 7165 7174 0
9246 7165 7175 0
9246 7165 7177 0
9246 7166 0
9246 7166 7174 0
9246 7166 7175 0
9246 7166 7177 0
c (((aux1615 + aux1618 + aux1619)<=1)=tv=SATLiteral(9247))
-9247 7204 0
-9247 7198 7203 0
-9247 7199 0
-9247 7201 0
-9247 7189 7203 0
-9247 7189 7198 0
-9247 7189 7199 0
-9247 7189 7201 0
-9247 7190 0
-9247 7190 7198 0
-9247 7190 7199 0
-9247 7190 7201 0
9247 -7190 -7198 -7203 0
9247 -7189 -7199 -7203 0
9247 -7189 -7198 -7204 0
c ((1<=(aux1615 + aux1618 + aux1619))=tv=SATLiteral(9248))
-9248 -7189 -7198 -7203 0
9248 7203 0
9248 7198 0
9248 7199 0
9248 7201 0
9248 7189 0
9248 7189 7198 0
9248 7189 7199 0
9248 7189 7201 0
9248 7190 0
9248 7190 7198 0
9248 7190 7199 0
9248 7190 7201 0
c (((aux1621 + aux1624 + aux1625)<=1)=tv=SATLiteral(9249))
-9249 7228 0
-9249 7222 7227 0
-9249 7223 0
-9249 7225 0
-9249 7213 7227 0
-9249 7213 7222 0
-9249 7213 7223 0
-9249 7213 7225 0
-9249 7214 0
-9249 7214 7222 0
-9249 7214 7223 0
-9249 7214 7225 0
9249 -7214 -7222 -7227 0
9249 -7213 -7223 -7227 0
9249 -7213 -7222 -7228 0
c ((1<=(aux1621 + aux1624 + aux1625))=tv=SATLiteral(9250))
-9250 -7213 -7222 -7227 0
9250 7227 0
9250 7222 0
9250 7223 0
9250 7225 0
9250 7213 0
9250 7213 7222 0
9250 7213 7223 0
9250 7213 7225 0
9250 7214 0
9250 7214 7222 0
9250 7214 7223 0
9250 7214 7225 0
c (((aux1627 + aux1630 + aux1631)<=1)=tv=SATLiteral(9251))
-9251 7252 0
-9251 7246 7251 0
-9251 7247 0
-9251 7249 0
-9251 7237 7251 0
-9251 7237 7246 0
-9251 7237 7247 0
-9251 7237 7249 0
-9251 7238 0
-9251 7238 7246 0
-9251 7238 7247 0
-9251 7238 7249 0
9251 -7238 -7246 -7251 0
9251 -7237 -7247 -7251 0
9251 -7237 -7246 -7252 0
c ((1<=(aux1627 + aux1630 + aux1631))=tv=SATLiteral(9252))
-9252 -7237 -7246 -7251 0
9252 7251 0
9252 7246 0
9252 7247 0
9252 7249 0
9252 7237 0
9252 7237 7246 0
9252 7237 7247 0
9252 7237 7249 0
9252 7238 0
9252 7238 7246 0
9252 7238 7247 0
9252 7238 7249 0
c (((aux1633 + aux1636 + aux1637)<=1)=tv=SATLiteral(9253))
-9253 7276 0
-9253 7270 7275 0
-9253 7271 0
-9253 7273 0
-9253 7261 7275 0
-9253 7261 7270 0
-9253 7261 7271 0
-9253 7261 7273 0
-9253 7262 0
-9253 7262 7270 0
-9253 7262 7271 0
-9253 7262 7273 0
9253 -7262 -7270 -7275 0
9253 -7261 -7271 -7275 0
9253 -7261 -7270 -7276 0
c ((1<=(aux1633 + aux1636 + aux1637))=tv=SATLiteral(9254))
-9254 -7261 -7270 -7275 0
9254 7275 0
9254 7270 0
9254 7271 0
9254 7273 0
9254 7261 0
9254 7261 7270 0
9254 7261 7271 0
9254 7261 7273 0
9254 7262 0
9254 7262 7270 0
9254 7262 7271 0
9254 7262 7273 0
c (((aux1639 + aux1642 + aux1643)<=1)=tv=SATLiteral(9255))
-9255 7300 0
-9255 7294 7299 0
-9255 7295 0
-9255 7297 0
-9255 7285 7299 0
-9255 7285 7294 0
-9255 7285 7295 0
-9255 7285 7297 0
-9255 7286 0
-9255 7286 7294 0
-9255 7286 7295 0
-9255 7286 7297 0
9255 -7286 -7294 -7299 0
9255 -7285 -7295 -7299 0
9255 -7285 -7294 -7300 0
c ((1<=(aux1639 + aux1642 + aux1643))=tv=SATLiteral(9256))
-9256 -7285 -7294 -7299 0
9256 7299 0
9256 7294 0
9256 7295 0
9256 7297 0
9256 7285 0
9256 7285 7294 0
9256 7285 7295 0
9256 7285 7297 0
9256 7286 0
9256 7286 7294 0
9256 7286 7295 0
9256 7286 7297 0
c (((aux1645 + aux1648 + aux1649)<=1)=tv=SATLiteral(9257))
-9257 7324 0
-9257 7318 7323 0
-9257 7319 0
-9257 7321 0
-9257 7309 7323 0
-9257 7309 7318 0
-9257 7309 7319 0
-9257 7309 7321 0
-9257 7310 0
-9257 7310 7318 0
-9257 7310 7319 0
-9257 7310 7321 0
9257 -7310 -7318 -7323 0
9257 -7309 -7319 -7323 0
9257 -7309 -7318 -7324 0
c ((1<=(aux1645 + aux1648 + aux1649))=tv=SATLiteral(9258))
-9258 -7309 -7318 -7323 0
9258 7323 0
9258 7318 0
9258 7319 0
9258 7321 0
9258 7309 0
9258 7309 7318 0
9258 7309 7319 0
9258 7309 7321 0
9258 7310 0
9258 7310 7318 0
9258 7310 7319 0
9258 7310 7321 0
c (((aux1651 + aux1654 + aux1655)<=1)=tv=SATLiteral(9259))
-9259 7348 0
-9259 7342 7347 0
-9259 7343 0
-9259 7345 0
-9259 7333 7347 0
-9259 7333 7342 0
-9259 7333 7343 0
-9259 7333 7345 0
-9259 7334 0
-9259 7334 7342 0
-9259 7334 7343 0
-9259 7334 7345 0
9259 -7334 -7342 -7347 0
9259 -7333 -7343 -7347 0
9259 -7333 -7342 -7348 0
c ((1<=(aux1651 + aux1654 + aux1655))=tv=SATLiteral(9260))
-9260 -7333 -7342 -7347 0
9260 7347 0
9260 7342 0
9260 7343 0
9260 7345 0
9260 7333 0
9260 7333 7342 0
9260 7333 7343 0
9260 7333 7345 0
9260 7334 0
9260 7334 7342 0
9260 7334 7343 0
9260 7334 7345 0
c (((aux1657 + aux1660 + aux1661)<=1)=tv=SATLiteral(9261))
-9261 7372 0
-9261 7366 7371 0
-9261 7367 0
-9261 7369 0
-9261 7357 7371 0
-9261 7357 7366 0
-9261 7357 7367 0
-9261 7357 7369 0
-9261 7358 0
-9261 7358 7366 0
-9261 7358 7367 0
-9261 7358 7369 0
9261 -7358 -7366 -7371 0
9261 -7357 -7367 -7371 0
9261 -7357 -7366 -7372 0
c ((1<=(aux1657 + aux1660 + aux1661))=tv=SATLiteral(9262))
-9262 -7357 -7366 -7371 0
9262 7371 0
9262 7366 0
9262 7367 0
9262 7369 0
9262 7357 0
9262 7357 7366 0
9262 7357 7367 0
9262 7357 7369 0
9262 7358 0
9262 7358 7366 0
9262 7358 7367 0
9262 7358 7369 0
c (((aux1663 + aux1666 + aux1667)<=1)=tv=SATLiteral(9263))
-9263 7396 0
-9263 7390 7395 0
-9263 7391 0
-9263 7393 0
-9263 7381 7395 0
-9263 7381 7390 0
-9263 7381 7391 0
-9263 7381 7393 0
-9263 7382 0
-9263 7382 7390 0
-9263 7382 7391 0
-9263 7382 7393 0
9263 -7382 -7390 -7395 0
9263 -7381 -7391 -7395 0
9263 -7381 -7390 -7396 0
c ((1<=(aux1663 + aux1666 + aux1667))=tv=SATLiteral(9264))
-9264 -7381 -7390 -7395 0
9264 7395 0
9264 7390 0
9264 7391 0
9264 7393 0
9264 7381 0
9264 7381 7390 0
9264 7381 7391 0
9264 7381 7393 0
9264 7382 0
9264 7382 7390 0
9264 7382 7391 0
9264 7382 7393 0
c (((aux1669 + aux1672 + aux1673)<=1)=tv=SATLiteral(9265))
-9265 7420 0
-9265 7414 7419 0
-9265 7415 0
-9265 7417 0
-9265 7405 7419 0
-9265 7405 7414 0
-9265 7405 7415 0
-9265 7405 7417 0
-9265 7406 0
-9265 7406 7414 0
-9265 7406 7415 0
-9265 7406 7417 0
9265 -7406 -7414 -7419 0
9265 -7405 -7415 -7419 0
9265 -7405 -7414 -7420 0
c ((1<=(aux1669 + aux1672 + aux1673))=tv=SATLiteral(9266))
-9266 -7405 -7414 -7419 0
9266 7419 0
9266 7414 0
9266 7415 0
9266 7417 0
9266 7405 0
9266 7405 7414 0
9266 7405 7415 0
9266 7405 7417 0
9266 7406 0
9266 7406 7414 0
9266 7406 7415 0
9266 7406 7417 0
c (((aux1675 + aux1678 + aux1679)<=1)=tv=SATLiteral(9267))
-9267 7444 0
-9267 7438 7443 0
-9267 7439 0
-9267 7441 0
-9267 7429 7443 0
-9267 7429 7438 0
-9267 7429 7439 0
-9267 7429 7441 0
-9267 7430 0
-9267 7430 7438 0
-9267 7430 7439 0
-9267 7430 7441 0
9267 -7430 -7438 -7443 0
9267 -7429 -7439 -7443 0
9267 -7429 -7438 -7444 0
c ((1<=(aux1675 + aux1678 + aux1679))=tv=SATLiteral(9268))
-9268 -7429 -7438 -7443 0
9268 7443 0
9268 7438 0
9268 7439 0
9268 7441 0
9268 7429 0
9268 7429 7438 0
9268 7429 7439 0
9268 7429 7441 0
9268 7430 0
9268 7430 7438 0
9268 7430 7439 0
9268 7430 7441 0
c (((aux1681 + aux1684 + aux1685)<=1)=tv=SATLiteral(9269))
-9269 7468 0
-9269 7462 7467 0
-9269 7463 0
-9269 7465 0
-9269 7453 7467 0
-9269 7453 7462 0
-9269 7453 7463 0
-9269 7453 7465 0
-9269 7454 0
-9269 7454 7462 0
-9269 7454 7463 0
-9269 7454 7465 0
9269 -7454 -7462 -7467 0
9269 -7453 -7463 -7467 0
9269 -7453 -7462 -7468 0
c ((1<=(aux1681 + aux1684 + aux1685))=tv=SATLiteral(9270))
-9270 -7453 -7462 -7467 0
9270 7467 0
9270 7462 0
9270 7463 0
9270 7465 0
9270 7453 0
9270 7453 7462 0
9270 7453 7463 0
9270 7453 7465 0
9270 7454 0
9270 7454 7462 0
9270 7454 7463 0
9270 7454 7465 0
c (((aux1687 + aux1690 + aux1691)<=1)=tv=SATLiteral(9271))
-9271 7492 0
-9271 7486 7491 0
-9271 7487 0
-9271 7489 0
-9271 7477 7491 0
-9271 7477 7486 0
-9271 7477 7487 0
-9271 7477 7489 0
-9271 7478 0
-9271 7478 7486 0
-9271 7478 7487 0
-9271 7478 7489 0
9271 -7478 -7486 -7491 0
9271 -7477 -7487 -7491 0
9271 -7477 -7486 -7492 0
c ((1<=(aux1687 + aux1690 + aux1691))=tv=SATLiteral(9272))
-9272 -7477 -7486 -7491 0
9272 7491 0
9272 7486 0
9272 7487 0
9272 7489 0
9272 7477 0
9272 7477 7486 0
9272 7477 7487 0
9272 7477 7489 0
9272 7478 0
9272 7478 7486 0
9272 7478 7487 0
9272 7478 7489 0
c (((aux1693 + aux1696 + aux1697)<=1)=tv=SATLiteral(9273))
-9273 7516 0
-9273 7510 7515 0
-9273 7511 0
-9273 7513 0
-9273 7501 7515 0
-9273 7501 7510 0
-9273 7501 7511 0
-9273 7501 7513 0
-9273 7502 0
-9273 7502 7510 0
-9273 7502 7511 0
-9273 7502 7513 0
9273 -7502 -7510 -7515 0
9273 -7501 -7511 -7515 0
9273 -7501 -7510 -7516 0
c ((1<=(aux1693 + aux1696 + aux1697))=tv=SATLiteral(9274))
-9274 -7501 -7510 -7515 0
9274 7515 0
9274 7510 0
9274 7511 0
9274 7513 0
9274 7501 0
9274 7501 7510 0
9274 7501 7511 0
9274 7501 7513 0
9274 7502 0
9274 7502 7510 0
9274 7502 7511 0
9274 7502 7513 0
c (((aux1699 + aux1702 + aux1703)<=1)=tv=SATLiteral(9275))
-9275 7540 0
-9275 7534 7539 0
-9275 7535 0
-9275 7537 0
-9275 7525 7539 0
-9275 7525 7534 0
-9275 7525 7535 0
-9275 7525 7537 0
-9275 7526 0
-9275 7526 7534 0
-9275 7526 7535 0
-9275 7526 7537 0
9275 -7526 -7534 -7539 0
9275 -7525 -7535 -7539 0
9275 -7525 -7534 -7540 0
c ((1<=(aux1699 + aux1702 + aux1703))=tv=SATLiteral(9276))
-9276 -7525 -7534 -7539 0
9276 7539 0
9276 7534 0
9276 7535 0
9276 7537 0
9276 7525 0
9276 7525 7534 0
9276 7525 7535 0
9276 7525 7537 0
9276 7526 0
9276 7526 7534 0
9276 7526 7535 0
9276 7526 7537 0
c (((aux1705 + aux1708 + aux1709)<=1)=tv=SATLiteral(9277))
-9277 7564 0
-9277 7558 7563 0
-9277 7559 0
-9277 7561 0
-9277 7549 7563 0
-9277 7549 7558 0
-9277 7549 7559 0
-9277 7549 7561 0
-9277 7550 0
-9277 7550 7558 0
-9277 7550 7559 0
-9277 7550 7561 0
9277 -7550 -7558 -7563 0
9277 -7549 -7559 -7563 0
9277 -7549 -7558 -7564 0
c ((1<=(aux1705 + aux1708 + aux1709))=tv=SATLiteral(9278))
-9278 -7549 -7558 -7563 0
9278 7563 0
9278 7558 0
9278 7559 0
9278 7561 0
9278 7549 0
9278 7549 7558 0
9278 7549 7559 0
9278 7549 7561 0
9278 7550 0
9278 7550 7558 0
9278 7550 7559 0
9278 7550 7561 0
c (((aux1711 + aux1714 + aux1715)<=1)=tv=SATLiteral(9279))
-9279 7588 0
-9279 7582 7587 0
-9279 7583 0
-9279 7585 0
-9279 7573 7587 0
-9279 7573 7582 0
-9279 7573 7583 0
-9279 7573 7585 0
-9279 7574 0
-9279 7574 7582 0
-9279 7574 7583 0
-9279 7574 7585 0
9279 -7574 -7582 -7587 0
9279 -7573 -7583 -7587 0
9279 -7573 -7582 -7588 0
c ((1<=(aux1711 + aux1714 + aux1715))=tv=SATLiteral(9280))
-9280 -7573 -7582 -7587 0
9280 7587 0
9280 7582 0
9280 7583 0
9280 7585 0
9280 7573 0
9280 7573 7582 0
9280 7573 7583 0
9280 7573 7585 0
9280 7574 0
9280 7574 7582 0
9280 7574 7583 0
9280 7574 7585 0
c (((aux1717 + aux1720 + aux1721)<=1)=tv=SATLiteral(9281))
-9281 7612 0
-9281 7606 7611 0
-9281 7607 0
-9281 7609 0
-9281 7597 7611 0
-9281 7597 7606 0
-9281 7597 7607 0
-9281 7597 7609 0
-9281 7598 0
-9281 7598 7606 0
-9281 7598 7607 0
-9281 7598 7609 0
9281 -7598 -7606 -7611 0
9281 -7597 -7607 -7611 0
9281 -7597 -7606 -7612 0
c ((1<=(aux1717 + aux1720 + aux1721))=tv=SATLiteral(9282))
-9282 -7597 -7606 -7611 0
9282 7611 0
9282 7606 0
9282 7607 0
9282 7609 0
9282 7597 0
9282 7597 7606 0
9282 7597 7607 0
9282 7597 7609 0
9282 7598 0
9282 7598 7606 0
9282 7598 7607 0
9282 7598 7609 0
c (((aux1723 + aux1726 + aux1727)<=1)=tv=SATLiteral(9283))
-9283 7636 0
-9283 7630 7635 0
-9283 7631 0
-9283 7633 0
-9283 7621 7635 0
-9283 7621 7630 0
-9283 7621 7631 0
-9283 7621 7633 0
-9283 7622 0
-9283 7622 7630 0
-9283 7622 7631 0
-9283 7622 7633 0
9283 -7622 -7630 -7635 0
9283 -7621 -7631 -7635 0
9283 -7621 -7630 -7636 0
c ((1<=(aux1723 + aux1726 + aux1727))=tv=SATLiteral(9284))
-9284 -7621 -7630 -7635 0
9284 7635 0
9284 7630 0
9284 7631 0
9284 7633 0
9284 7621 0
9284 7621 7630 0
9284 7621 7631 0
9284 7621 7633 0
9284 7622 0
9284 7622 7630 0
9284 7622 7631 0
9284 7622 7633 0
c (((aux1729 + aux1732 + aux1733)<=1)=tv=SATLiteral(9285))
-9285 7660 0
-9285 7654 7659 0
-9285 7655 0
-9285 7657 0
-9285 7645 7659 0
-9285 7645 7654 0
-9285 7645 7655 0
-9285 7645 7657 0
-9285 7646 0
-9285 7646 7654 0
-9285 7646 7655 0
-9285 7646 7657 0
9285 -7646 -7654 -7659 0
9285 -7645 -7655 -7659 0
9285 -7645 -7654 -7660 0
c ((1<=(aux1729 + aux1732 + aux1733))=tv=SATLiteral(9286))
-9286 -7645 -7654 -7659 0
9286 7659 0
9286 7654 0
9286 7655 0
9286 7657 0
9286 7645 0
9286 7645 7654 0
9286 7645 7655 0
9286 7645 7657 0
9286 7646 0
9286 7646 7654 0
9286 7646 7655 0
9286 7646 7657 0
c (((aux1735 + aux1738 + aux1739)<=1)=tv=SATLiteral(9287))
-9287 7684 0
-9287 7678 7683 0
-9287 7679 0
-9287 7681 0
-9287 7669 7683 0
-9287 7669 7678 0
-9287 7669 7679 0
-9287 7669 7681 0
-9287 7670 0
-9287 7670 7678 0
-9287 7670 7679 0
-9287 7670 7681 0
9287 -7670 -7678 -7683 0
9287 -7669 -7679 -7683 0
9287 -7669 -7678 -7684 0
c ((1<=(aux1735 + aux1738 + aux1739))=tv=SATLiteral(9288))
-9288 -7669 -7678 -7683 0
9288 7683 0
9288 7678 0
9288 7679 0
9288 7681 0
9288 7669 0
9288 7669 7678 0
9288 7669 7679 0
9288 7669 7681 0
9288 7670 0
9288 7670 7678 0
9288 7670 7679 0
9288 7670 7681 0
c (((aux1741 + aux1744 + aux1745)<=1)=tv=SATLiteral(9289))
-9289 7708 0
-9289 7702 7707 0
-9289 7703 0
-9289 7705 0
-9289 7693 7707 0
-9289 7693 7702 0
-9289 7693 7703 0
-9289 7693 7705 0
-9289 7694 0
-9289 7694 7702 0
-9289 7694 7703 0
-9289 7694 7705 0
9289 -7694 -7702 -7707 0
9289 -7693 -7703 -7707 0
9289 -7693 -7702 -7708 0
c ((1<=(aux1741 + aux1744 + aux1745))=tv=SATLiteral(9290))
-9290 -7693 -7702 -7707 0
9290 7707 0
9290 7702 0
9290 7703 0
9290 7705 0
9290 7693 0
9290 7693 7702 0
9290 7693 7703 0
9290 7693 7705 0
9290 7694 0
9290 7694 7702 0
9290 7694 7703 0
9290 7694 7705 0
c (((aux1747 + aux1750 + aux1751)<=1)=tv=SATLiteral(9291))
-9291 7732 0
-9291 7726 7731 0
-9291 7727 0
-9291 7729 0
-9291 7717 7731 0
-9291 7717 7726 0
-9291 7717 7727 0
-9291 7717 7729 0
-9291 7718 0
-9291 7718 7726 0
-9291 7718 7727 0
-9291 7718 7729 0
9291 -7718 -7726 -7731 0
9291 -7717 -7727 -7731 0
9291 -7717 -7726 -7732 0
c ((1<=(aux1747 + aux1750 + aux1751))=tv=SATLiteral(9292))
-9292 -7717 -7726 -7731 0
9292 7731 0
9292 7726 0
9292 7727 0
9292 7729 0
9292 7717 0
9292 7717 7726 0
9292 7717 7727 0
9292 7717 7729 0
9292 7718 0
9292 7718 7726 0
9292 7718 7727 0
9292 7718 7729 0
c (((aux1753 + aux1756 + aux1757)<=1)=tv=SATLiteral(9293))
-9293 7756 0
-9293 7750 7755 0
-9293 7751 0
-9293 7753 0
-9293 7741 7755 0
-9293 7741 7750 0
-9293 7741 7751 0
-9293 7741 7753 0
-9293 7742 0
-9293 7742 7750 0
-9293 7742 7751 0
-9293 7742 7753 0
9293 -7742 -7750 -7755 0
9293 -7741 -7751 -7755 0
9293 -7741 -7750 -7756 0
c ((1<=(aux1753 + aux1756 + aux1757))=tv=SATLiteral(9294))
-9294 -7741 -7750 -7755 0
9294 7755 0
9294 7750 0
9294 7751 0
9294 7753 0
9294 7741 0
9294 7741 7750 0
9294 7741 7751 0
9294 7741 7753 0
9294 7742 0
9294 7742 7750 0
9294 7742 7751 0
9294 7742 7753 0
c (((aux1759 + aux1762 + aux1763)<=1)=tv=SATLiteral(9295))
-9295 7780 0
-9295 7774 7779 0
-9295 7775 0
-9295 7777 0
-9295 7765 7779 0
-9295 7765 7774 0
-9295 7765 7775 0
-9295 7765 7777 0
-9295 7766 0
-9295 7766 7774 0
-9295 7766 7775 0
-9295 7766 7777 0
9295 -7766 -7774 -7779 0
9295 -7765 -7775 -7779 0
9295 -7765 -7774 -7780 0
c ((1<=(aux1759 + aux1762 + aux1763))=tv=SATLiteral(9296))
-9296 -7765 -7774 -7779 0
9296 7779 0
9296 7774 0
9296 7775 0
9296 7777 0
9296 7765 0
9296 7765 7774 0
9296 7765 7775 0
9296 7765 7777 0
9296 7766 0
9296 7766 7774 0
9296 7766 7775 0
9296 7766 7777 0
c (((aux1765 + aux1768 + aux1769)<=1)=tv=SATLiteral(9297))
-9297 7804 0
-9297 7798 7803 0
-9297 7799 0
-9297 7801 0
-9297 7789 7803 0
-9297 7789 7798 0
-9297 7789 7799 0
-9297 7789 7801 0
-9297 7790 0
-9297 7790 7798 0
-9297 7790 7799 0
-9297 7790 7801 0
9297 -7790 -7798 -7803 0
9297 -7789 -7799 -7803 0
9297 -7789 -7798 -7804 0
c ((1<=(aux1765 + aux1768 + aux1769))=tv=SATLiteral(9298))
-9298 -7789 -7798 -7803 0
9298 7803 0
9298 7798 0
9298 7799 0
9298 7801 0
9298 7789 0
9298 7789 7798 0
9298 7789 7799 0
9298 7789 7801 0
9298 7790 0
9298 7790 7798 0
9298 7790 7799 0
9298 7790 7801 0
c (((aux1771 + aux1774 + aux1775)<=1)=tv=SATLiteral(9299))
-9299 7828 0
-9299 7822 7827 0
-9299 7823 0
-9299 7825 0
-9299 7813 7827 0
-9299 7813 7822 0
-9299 7813 7823 0
-9299 7813 7825 0
-9299 7814 0
-9299 7814 7822 0
-9299 7814 7823 0
-9299 7814 7825 0
9299 -7814 -7822 -7827 0
9299 -7813 -7823 -7827 0
9299 -7813 -7822 -7828 0
c ((1<=(aux1771 + aux1774 + aux1775))=tv=SATLiteral(9300))
-9300 -7813 -7822 -7827 0
9300 7827 0
9300 7822 0
9300 7823 0
9300 7825 0
9300 7813 0
9300 7813 7822 0
9300 7813 7823 0
9300 7813 7825 0
9300 7814 0
9300 7814 7822 0
9300 7814 7823 0
9300 7814 7825 0
c (((aux1777 + aux1780 + aux1781)<=1)=tv=SATLiteral(9301))
-9301 7852 0
-9301 7846 7851 0
-9301 7847 0
-9301 7849 0
-9301 7837 7851 0
-9301 7837 7846 0
-9301 7837 7847 0
-9301 7837 7849 0
-9301 7838 0
-9301 7838 7846 0
-9301 7838 7847 0
-9301 7838 7849 0
9301 -7838 -7846 -7851 0
9301 -7837 -7847 -7851 0
9301 -7837 -7846 -7852 0
c ((1<=(aux1777 + aux1780 + aux1781))=tv=SATLiteral(9302))
-9302 -7837 -7846 -7851 0
9302 7851 0
9302 7846 0
9302 7847 0
9302 7849 0
9302 7837 0
9302 7837 7846 0
9302 7837 7847 0
9302 7837 7849 0
9302 7838 0
9302 7838 7846 0
9302 7838 7847 0
9302 7838 7849 0
c (((aux1783 + aux1786 + aux1787)<=1)=tv=SATLiteral(9303))
-9303 7876 0
-9303 7870 7875 0
-9303 7871 0
-9303 7873 0
-9303 7861 7875 0
-9303 7861 7870 0
-9303 7861 7871 0
-9303 7861 7873 0
-9303 7862 0
-9303 7862 7870 0
-9303 7862 7871 0
-9303 7862 7873 0
9303 -7862 -7870 -7875 0
9303 -7861 -7871 -7875 0
9303 -7861 -7870 -7876 0
c ((1<=(aux1783 + aux1786 + aux1787))=tv=SATLiteral(9304))
-9304 -7861 -7870 -7875 0
9304 7875 0
9304 7870 0
9304 7871 0
9304 7873 0
9304 7861 0
9304 7861 7870 0
9304 7861 7871 0
9304 7861 7873 0
9304 7862 0
9304 7862 7870 0
9304 7862 7871 0
9304 7862 7873 0
c (((aux1789 + aux1792 + aux1793)<=1)=tv=SATLiteral(9305))
-9305 7900 0
-9305 7894 7899 0
-9305 7895 0
-9305 7897 0
-9305 7885 7899 0
-9305 7885 7894 0
-9305 7885 7895 0
-9305 7885 7897 0
-9305 7886 0
-9305 7886 7894 0
-9305 7886 7895 0
-9305 7886 7897 0
9305 -7886 -7894 -7899 0
9305 -7885 -7895 -7899 0
9305 -7885 -7894 -7900 0
c ((1<=(aux1789 + aux1792 + aux1793))=tv=SATLiteral(9306))
-9306 -7885 -7894 -7899 0
9306 7899 0
9306 7894 0
9306 7895 0
9306 7897 0
9306 7885 0
9306 7885 7894 0
9306 7885 7895 0
9306 7885 7897 0
9306 7886 0
9306 7886 7894 0
9306 7886 7895 0
9306 7886 7897 0
c (((aux1795 + aux1798 + aux1799)<=1)=tv=SATLiteral(9307))
-9307 7924 0
-9307 7918 7923 0
-9307 7919 0
-9307 7921 0
-9307 7909 7923 0
-9307 7909 7918 0
-9307 7909 7919 0
-9307 7909 7921 0
-9307 7910 0
-9307 7910 7918 0
-9307 7910 7919 0
-9307 7910 7921 0
9307 -7910 -7918 -7923 0
9307 -7909 -7919 -7923 0
9307 -7909 -7918 -7924 0
c ((1<=(aux1795 + aux1798 + aux1799))=tv=SATLiteral(9308))
-9308 -7909 -7918 -7923 0
9308 7923 0
9308 7918 0
9308 7919 0
9308 7921 0
9308 7909 0
9308 7909 7918 0
9308 7909 7919 0
9308 7909 7921 0
9308 7910 0
9308 7910 7918 0
9308 7910 7919 0
9308 7910 7921 0
c (((aux1801 + aux1804 + aux1805)<=1)=tv=SATLiteral(9309))
-9309 7948 0
-9309 7942 7947 0
-9309 7943 0
-9309 7945 0
-9309 7933 7947 0
-9309 7933 7942 0
-9309 7933 7943 0
-9309 7933 7945 0
-9309 7934 0
-9309 7934 7942 0
-9309 7934 7943 0
-9309 7934 7945 0
9309 -7934 -7942 -7947 0
9309 -7933 -7943 -7947 0
9309 -7933 -7942 -7948 0
c ((1<=(aux1801 + aux1804 + aux1805))=tv=SATLiteral(9310))
-9310 -7933 -7942 -7947 0
9310 7947 0
9310 7942 0
9310 7943 0
9310 7945 0
9310 7933 0
9310 7933 7942 0
9310 7933 7943 0
9310 7933 7945 0
9310 7934 0
9310 7934 7942 0
9310 7934 7943 0
9310 7934 7945 0
c (((aux1807 + aux1810 + aux1811)<=1)=tv=SATLiteral(9311))
-9311 7972 0
-9311 7966 7971 0
-9311 7967 0
-9311 7969 0
-9311 7957 7971 0
-9311 7957 7966 0
-9311 7957 7967 0
-9311 7957 7969 0
-9311 7958 0
-9311 7958 7966 0
-9311 7958 7967 0
-9311 7958 7969 0
9311 -7958 -7966 -7971 0
9311 -7957 -7967 -7971 0
9311 -7957 -7966 -7972 0
c ((1<=(aux1807 + aux1810 + aux1811))=tv=SATLiteral(9312))
-9312 -7957 -7966 -7971 0
9312 7971 0
9312 7966 0
9312 7967 0
9312 7969 0
9312 7957 0
9312 7957 7966 0
9312 7957 7967 0
9312 7957 7969 0
9312 7958 0
9312 7958 7966 0
9312 7958 7967 0
9312 7958 7969 0
c (((aux1813 + aux1816 + aux1817)<=1)=tv=SATLiteral(9313))
-9313 7996 0
-9313 7990 7995 0
-9313 7991 0
-9313 7993 0
-9313 7981 7995 0
-9313 7981 7990 0
-9313 7981 7991 0
-9313 7981 7993 0
-9313 7982 0
-9313 7982 7990 0
-9313 7982 7991 0
-9313 7982 7993 0
9313 -7982 -7990 -7995 0
9313 -7981 -7991 -7995 0
9313 -7981 -7990 -7996 0
c ((1<=(aux1813 + aux1816 + aux1817))=tv=SATLiteral(9314))
-9314 -7981 -7990 -7995 0
9314 7995 0
9314 7990 0
9314 7991 0
9314 7993 0
9314 7981 0
9314 7981 7990 0
9314 7981 7991 0
9314 7981 7993 0
9314 7982 0
9314 7982 7990 0
9314 7982 7991 0
9314 7982 7993 0
c (((aux1819 + aux1822 + aux1823)<=1)=tv=SATLiteral(9315))
-9315 8020 0
-9315 8014 8019 0
-9315 8015 0
-9315 8017 0
-9315 8005 8019 0
-9315 8005 8014 0
-9315 8005 8015 0
-9315 8005 8017 0
-9315 8006 0
-9315 8006 8014 0
-9315 8006 8015 0
-9315 8006 8017 0
9315 -8006 -8014 -8019 0
9315 -8005 -8015 -8019 0
9315 -8005 -8014 -8020 0
c ((1<=(aux1819 + aux1822 + aux1823))=tv=SATLiteral(9316))
-9316 -8005 -8014 -8019 0
9316 8019 0
9316 8014 0
9316 8015 0
9316 8017 0
9316 8005 0
9316 8005 8014 0
9316 8005 8015 0
9316 8005 8017 0
9316 8006 0
9316 8006 8014 0
9316 8006 8015 0
9316 8006 8017 0
c (((aux1825 + aux1828 + aux1829)<=1)=tv=SATLiteral(9317))
-9317 8044 0
-9317 8038 8043 0
-9317 8039 0
-9317 8041 0
-9317 8029 8043 0
-9317 8029 8038 0
-9317 8029 8039 0
-9317 8029 8041 0
-9317 8030 0
-9317 8030 8038 0
-9317 8030 8039 0
-9317 8030 8041 0
9317 -8030 -8038 -8043 0
9317 -8029 -8039 -8043 0
9317 -8029 -8038 -8044 0
c ((1<=(aux1825 + aux1828 + aux1829))=tv=SATLiteral(9318))
-9318 -8029 -8038 -8043 0
9318 8043 0
9318 8038 0
9318 8039 0
9318 8041 0
9318 8029 0
9318 8029 8038 0
9318 8029 8039 0
9318 8029 8041 0
9318 8030 0
9318 8030 8038 0
9318 8030 8039 0
9318 8030 8041 0
c (((aux1831 + aux1834 + aux1835)<=1)=tv=SATLiteral(9319))
-9319 8068 0
-9319 8062 8067 0
-9319 8063 0
-9319 8065 0
-9319 8053 8067 0
-9319 8053 8062 0
-9319 8053 8063 0
-9319 8053 8065 0
-9319 8054 0
-9319 8054 8062 0
-9319 8054 8063 0
-9319 8054 8065 0
9319 -8054 -8062 -8067 0
9319 -8053 -8063 -8067 0
9319 -8053 -8062 -8068 0
c ((1<=(aux1831 + aux1834 + aux1835))=tv=SATLiteral(9320))
-9320 -8053 -8062 -8067 0
9320 8067 0
9320 8062 0
9320 8063 0
9320 8065 0
9320 8053 0
9320 8053 8062 0
9320 8053 8063 0
9320 8053 8065 0
9320 8054 0
9320 8054 8062 0
9320 8054 8063 0
9320 8054 8065 0
c (((aux1837 + aux1840 + aux1841)<=1)=tv=SATLiteral(9321))
-9321 8092 0
-9321 8086 8091 0
-9321 8087 0
-9321 8089 0
-9321 8077 8091 0
-9321 8077 8086 0
-9321 8077 8087 0
-9321 8077 8089 0
-9321 8078 0
-9321 8078 8086 0
-9321 8078 8087 0
-9321 8078 8089 0
9321 -8078 -8086 -8091 0
9321 -8077 -8087 -8091 0
9321 -8077 -8086 -8092 0
c ((1<=(aux1837 + aux1840 + aux1841))=tv=SATLiteral(9322))
-9322 -8077 -8086 -8091 0
9322 8091 0
9322 8086 0
9322 8087 0
9322 8089 0
9322 8077 0
9322 8077 8086 0
9322 8077 8087 0
9322 8077 8089 0
9322 8078 0
9322 8078 8086 0
9322 8078 8087 0
9322 8078 8089 0
c (((aux1843 + aux1846 + aux1847)<=1)=tv=SATLiteral(9323))
-9323 8116 0
-9323 8110 8115 0
-9323 8111 0
-9323 8113 0
-9323 8101 8115 0
-9323 8101 8110 0
-9323 8101 8111 0
-9323 8101 8113 0
-9323 8102 0
-9323 8102 8110 0
-9323 8102 8111 0
-9323 8102 8113 0
9323 -8102 -8110 -8115 0
9323 -8101 -8111 -8115 0
9323 -8101 -8110 -8116 0
c ((1<=(aux1843 + aux1846 + aux1847))=tv=SATLiteral(9324))
-9324 -8101 -8110 -8115 0
9324 8115 0
9324 8110 0
9324 8111 0
9324 8113 0
9324 8101 0
9324 8101 8110 0
9324 8101 8111 0
9324 8101 8113 0
9324 8102 0
9324 8102 8110 0
9324 8102 8111 0
9324 8102 8113 0
c (((aux1849 + aux1852 + aux1853)<=1)=tv=SATLiteral(9325))
-9325 8140 0
-9325 8134 8139 0
-9325 8135 0
-9325 8137 0
-9325 8125 8139 0
-9325 8125 8134 0
-9325 8125 8135 0
-9325 8125 8137 0
-9325 8126 0
-9325 8126 8134 0
-9325 8126 8135 0
-9325 8126 8137 0
9325 -8126 -8134 -8139 0
9325 -8125 -8135 -8139 0
9325 -8125 -8134 -8140 0
c ((1<=(aux1849 + aux1852 + aux1853))=tv=SATLiteral(9326))
-9326 -8125 -8134 -8139 0
9326 8139 0
9326 8134 0
9326 8135 0
9326 8137 0
9326 8125 0
9326 8125 8134 0
9326 8125 8135 0
9326 8125 8137 0
9326 8126 0
9326 8126 8134 0
9326 8126 8135 0
9326 8126 8137 0
c (((aux1855 + aux1858 + aux1859)<=1)=tv=SATLiteral(9327))
-9327 8164 0
-9327 8158 8163 0
-9327 8159 0
-9327 8161 0
-9327 8149 8163 0
-9327 8149 8158 0
-9327 8149 8159 0
-9327 8149 8161 0
-9327 8150 0
-9327 8150 8158 0
-9327 8150 8159 0
-9327 8150 8161 0
9327 -8150 -8158 -8163 0
9327 -8149 -8159 -8163 0
9327 -8149 -8158 -8164 0
c ((1<=(aux1855 + aux1858 + aux1859))=tv=SATLiteral(9328))
-9328 -8149 -8158 -8163 0
9328 8163 0
9328 8158 0
9328 8159 0
9328 8161 0
9328 8149 0
9328 8149 8158 0
9328 8149 8159 0
9328 8149 8161 0
9328 8150 0
9328 8150 8158 0
9328 8150 8159 0
9328 8150 8161 0
c (((aux1861 + aux1864 + aux1865)<=1)=tv=SATLiteral(9329))
-9329 8188 0
-9329 8182 8187 0
-9329 8183 0
-9329 8185 0
-9329 8173 8187 0
-9329 8173 8182 0
-9329 8173 8183 0
-9329 8173 8185 0
-9329 8174 0
-9329 8174 8182 0
-9329 8174 8183 0
-9329 8174 8185 0
9329 -8174 -8182 -8187 0
9329 -8173 -8183 -8187 0
9329 -8173 -8182 -8188 0
c ((1<=(aux1861 + aux1864 + aux1865))=tv=SATLiteral(9330))
-9330 -8173 -8182 -8187 0
9330 8187 0
9330 8182 0
9330 8183 0
9330 8185 0
9330 8173 0
9330 8173 8182 0
9330 8173 8183 0
9330 8173 8185 0
9330 8174 0
9330 8174 8182 0
9330 8174 8183 0
9330 8174 8185 0
c ((SATLiteral(8797) /\ SATLiteral(8798))=tv=SATLiteral(1292))
1292 -8797 -8798 0
8797 -1292 0
8798 -1292 0
c ((SATLiteral(8799) /\ SATLiteral(8800))=tv=SATLiteral(1293))
1293 -8799 -8800 0
8799 -1293 0
8800 -1293 0
c ((SATLiteral(8801) /\ SATLiteral(8802))=tv=SATLiteral(1294))
1294 -8801 -8802 0
8801 -1294 0
8802 -1294 0
c ((SATLiteral(8803) /\ SATLiteral(8804))=tv=SATLiteral(1295))
1295 -8803 -8804 0
8803 -1295 0
8804 -1295 0
c ((SATLiteral(8805) /\ SATLiteral(8806))=tv=SATLiteral(1296))
1296 -8805 -8806 0
8805 -1296 0
8806 -1296 0
c ((SATLiteral(8807) /\ SATLiteral(8808))=tv=SATLiteral(1297))
1297 -8807 -8808 0
8807 -1297 0
8808 -1297 0
c ((SATLiteral(8809) /\ SATLiteral(8810))=tv=SATLiteral(1298))
1298 -8809 -8810 0
8809 -1298 0
8810 -1298 0
c ((SATLiteral(8811) /\ SATLiteral(8812))=tv=SATLiteral(1299))
1299 -8811 -8812 0
8811 -1299 0
8812 -1299 0
c ((SATLiteral(8813) /\ SATLiteral(8814))=tv=SATLiteral(1300))
1300 -8813 -8814 0
8813 -1300 0
8814 -1300 0
c ((SATLiteral(8815) /\ SATLiteral(8816))=tv=SATLiteral(1301))
1301 -8815 -8816 0
8815 -1301 0
8816 -1301 0
c ((SATLiteral(8817) /\ SATLiteral(8818))=tv=SATLiteral(1302))
1302 -8817 -8818 0
8817 -1302 0
8818 -1302 0
c ((SATLiteral(8819) /\ SATLiteral(8820))=tv=SATLiteral(1303))
1303 -8819 -8820 0
8819 -1303 0
8820 -1303 0
c ((SATLiteral(8821) /\ SATLiteral(8822))=tv=SATLiteral(1304))
1304 -8821 -8822 0
8821 -1304 0
8822 -1304 0
c ((SATLiteral(8823) /\ SATLiteral(8824))=tv=SATLiteral(1305))
1305 -8823 -8824 0
8823 -1305 0
8824 -1305 0
c ((SATLiteral(8825) /\ SATLiteral(8826))=tv=SATLiteral(1306))
1306 -8825 -8826 0
8825 -1306 0
8826 -1306 0
c ((SATLiteral(8827) /\ SATLiteral(8828))=tv=SATLiteral(1307))
1307 -8827 -8828 0
8827 -1307 0
8828 -1307 0
c ((SATLiteral(8829) /\ SATLiteral(8830))=tv=SATLiteral(1308))
1308 -8829 -8830 0
8829 -1308 0
8830 -1308 0
c ((SATLiteral(8831) /\ SATLiteral(8832))=tv=SATLiteral(1309))
1309 -8831 -8832 0
8831 -1309 0
8832 -1309 0
c ((SATLiteral(8833) /\ SATLiteral(8834))=tv=SATLiteral(1310))
1310 -8833 -8834 0
8833 -1310 0
8834 -1310 0
c ((SATLiteral(8835) /\ SATLiteral(8836))=tv=SATLiteral(1311))
1311 -8835 -8836 0
8835 -1311 0
8836 -1311 0
c ((SATLiteral(8837) /\ SATLiteral(8838))=tv=SATLiteral(1312))
1312 -8837 -8838 0
8837 -1312 0
8838 -1312 0
c ((SATLiteral(8839) /\ SATLiteral(8840))=tv=SATLiteral(1313))
1313 -8839 -8840 0
8839 -1313 0
8840 -1313 0
c ((SATLiteral(8841) /\ SATLiteral(8842))=tv=SATLiteral(1314))
1314 -8841 -8842 0
8841 -1314 0
8842 -1314 0
c ((SATLiteral(8843) /\ SATLiteral(8844))=tv=SATLiteral(1315))
1315 -8843 -8844 0
8843 -1315 0
8844 -1315 0
c ((x_00001_00003 != x_00001_00004)=tv=SATLiteral(1316))
-32 47 1316 0
-34 49 1316 0
-36 51 1316 0
-38 53 1316 0
-40 55 1316 0
-42 57 1316 0
-44 59 1316 0
-46 61 1316 0
45 -60 1316 0
-47 32 1316 0
-49 34 1316 0
-51 36 1316 0
-53 38 1316 0
-55 40 1316 0
-57 42 1316 0
-59 44 1316 0
-61 46 1316 0
60 -45 1316 0
-32 -47 -1316 0
-34 -49 -1316 0
-36 -51 -1316 0
-38 -53 -1316 0
-40 -55 -1316 0
-42 -57 -1316 0
-44 -59 -1316 0
-46 -61 -1316 0
45 60 -1316 0
c ((x_00001_00005 != x_00001_00006)=tv=SATLiteral(1317))
-62 77 1317 0
-64 79 1317 0
-66 81 1317 0
-68 83 1317 0
-70 85 1317 0
-72 87 1317 0
-74 89 1317 0
-76 91 1317 0
75 -90 1317 0
-77 62 1317 0
-79 64 1317 0
-81 66 1317 0
-83 68 1317 0
-85 70 1317 0
-87 72 1317 0
-89 74 1317 0
-91 76 1317 0
90 -75 1317 0
-62 -77 -1317 0
-64 -79 -1317 0
-66 -81 -1317 0
-68 -83 -1317 0
-70 -85 -1317 0
-72 -87 -1317 0
-74 -89 -1317 0
-76 -91 -1317 0
75 90 -1317 0
c ((x_00002_00002 != x_00003_00002)=tv=SATLiteral(1318))
-152 287 1318 0
-154 289 1318 0
-156 291 1318 0
-158 293 1318 0
-160 295 1318 0
-162 297 1318 0
-164 299 1318 0
-166 301 1318 0
165 -300 1318 0
-287 152 1318 0
-289 154 1318 0
-291 156 1318 0
-293 158 1318 0
-295 160 1318 0
-297 162 1318 0
-299 164 1318 0
-301 166 1318 0
300 -165 1318 0
-152 -287 -1318 0
-154 -289 -1318 0
-156 -291 -1318 0
-158 -293 -1318 0
-160 -295 -1318 0
-162 -297 -1318 0
-164 -299 -1318 0
-166 -301 -1318 0
165 300 -1318 0
c ((x_00002_00005 != x_00002_00006)=tv=SATLiteral(1319))
-197 212 1319 0
-199 214 1319 0
-201 216 1319 0
-203 218 1319 0
-205 220 1319 0
-207 222 1319 0
-209 224 1319 0
-211 226 1319 0
210 -225 1319 0
-212 197 1319 0
-214 199 1319 0
-216 201 1319 0
-218 203 1319 0
-220 205 1319 0
-222 207 1319 0
-224 209 1319 0
-226 211 1319 0
225 -210 1319 0
-197 -212 -1319 0
-199 -214 -1319 0
-201 -216 -1319 0
-203 -218 -1319 0
-205 -220 -1319 0
-207 -222 -1319 0
-209 -224 -1319 0
-211 -226 -1319 0
210 225 -1319 0
c ((x_00004_00008 != x_00005_00008)=tv=SATLiteral(1320))
-512 647 1320 0
-514 649 1320 0
-516 651 1320 0
-518 653 1320 0
-520 655 1320 0
-522 657 1320 0
-524 659 1320 0
-526 661 1320 0
525 -660 1320 0
-647 512 1320 0
-649 514 1320 0
-651 516 1320 0
-653 518 1320 0
-655 520 1320 0
-657 522 1320 0
-659 524 1320 0
-661 526 1320 0
660 -525 1320 0
-512 -647 -1320 0
-514 -649 -1320 0
-516 -651 -1320 0
-518 -653 -1320 0
-520 -655 -1320 0
-522 -657 -1320 0
-524 -659 -1320 0
-526 -661 -1320 0
525 660 -1320 0
c ((x_00004_00009 != x_00005_00009)=tv=SATLiteral(1321))
-527 662 1321 0
-529 664 1321 0
-531 666 1321 0
-533 668 1321 0
-535 670 1321 0
-537 672 1321 0
-539 674 1321 0
-541 676 1321 0
540 -675 1321 0
-662 527 1321 0
-664 529 1321 0
-666 531 1321 0
-668 533 1321 0
-670 535 1321 0
-672 537 1321 0
-674 539 1321 0
-676 541 1321 0
675 -540 1321 0
-527 -662 -1321 0
-529 -664 -1321 0
-531 -666 -1321 0
-533 -668 -1321 0
-535 -670 -1321 0
-537 -672 -1321 0
-539 -674 -1321 0
-541 -676 -1321 0
540 675 -1321 0
c ((x_00005_00002 != x_00006_00002)=tv=SATLiteral(1322))
-557 692 1322 0
-559 694 1322 0
-561 696 1322 0
-563 698 1322 0
-565 700 1322 0
-567 702 1322 0
-569 704 1322 0
-571 706 1322 0
570 -705 1322 0
-692 557 1322 0
-694 559 1322 0
-696 561 1322 0
-698 563 1322 0
-700 565 1322 0
-702 567 1322 0
-704 569 1322 0
-706 571 1322 0
705 -570 1322 0
-557 -692 -1322 0
-559 -694 -1322 0
-561 -696 -1322 0
-563 -698 -1322 0
-565 -700 -1322 0
-567 -702 -1322 0
-569 -704 -1322 0
-571 -706 -1322 0
570 705 -1322 0
c ((x_00007_00001 != x_00006_00001)=tv=SATLiteral(1323))
-812 677 1323 0
-814 679 1323 0
-816 681 1323 0
-818 683 1323 0
-820 685 1323 0
-822 687 1323 0
-824 689 1323 0
-826 691 1323 0
825 -690 1323 0
-677 812 1323 0
-679 814 1323 0
-681 816 1323 0
-683 818 1323 0
-685 820 1323 0
-687 822 1323 0
-689 824 1323 0
-691 826 1323 0
690 -825 1323 0
-812 -677 -1323 0
-814 -679 -1323 0
-816 -681 -1323 0
-818 -683 -1323 0
-820 -685 -1323 0
-822 -687 -1323 0
-824 -689 -1323 0
-826 -691 -1323 0
825 690 -1323 0
c ((x_00007_00009 != x_00006_00009)=tv=SATLiteral(1324))
-932 797 1324 0
-934 799 1324 0
-936 801 1324 0
-938 803 1324 0
-940 805 1324 0
-942 807 1324 0
-944 809 1324 0
-946 811 1324 0
945 -810 1324 0
-797 932 1324 0
-799 934 1324 0
-801 936 1324 0
-803 938 1324 0
-805 940 1324 0
-807 942 1324 0
-809 944 1324 0
-811 946 1324 0
810 -945 1324 0
-932 -797 -1324 0
-934 -799 -1324 0
-936 -801 -1324 0
-938 -803 -1324 0
-940 -805 -1324 0
-942 -807 -1324 0
-944 -809 -1324 0
-946 -811 -1324 0
945 810 -1324 0
c ((x_00008_00004 != x_00008_00005)=tv=SATLiteral(1325))
-992 1007 1325 0
-994 1009 1325 0
-996 1011 1325 0
-998 1013 1325 0
-1000 1015 1325 0
-1002 1017 1325 0
-1004 1019 1325 0
-1006 1021 1325 0
1005 -1020 1325 0
-1007 992 1325 0
-1009 994 1325 0
-1011 996 1325 0
-1013 998 1325 0
-1015 1000 1325 0
-1017 1002 1325 0
-1019 1004 1325 0
-1021 1006 1325 0
1020 -1005 1325 0
-992 -1007 -1325 0
-994 -1009 -1325 0
-996 -1011 -1325 0
-998 -1013 -1325 0
-1000 -1015 -1325 0
-1002 -1017 -1325 0
-1004 -1019 -1325 0
-1006 -1021 -1325 0
1005 1020 -1325 0
c ((x_00008_00007 != x_00008_00008)=tv=SATLiteral(1326))
-1037 1052 1326 0
-1039 1054 1326 0
-1041 1056 1326 0
-1043 1058 1326 0
-1045 1060 1326 0
-1047 1062 1326 0
-1049 1064 1326 0
-1051 1066 1326 0
1050 -1065 1326 0
-1052 1037 1326 0
-1054 1039 1326 0
-1056 1041 1326 0
-1058 1043 1326 0
-1060 1045 1326 0
-1062 1047 1326 0
-1064 1049 1326 0
-1066 1051 1326 0
1065 -1050 1326 0
-1037 -1052 -1326 0
-1039 -1054 -1326 0
-1041 -1056 -1326 0
-1043 -1058 -1326 0
-1045 -1060 -1326 0
-1047 -1062 -1326 0
-1049 -1064 -1326 0
-1051 -1066 -1326 0
1050 1065 -1326 0
c ((x_00009_00003 != x_00009_00004)=tv=SATLiteral(1327))
-1112 1127 1327 0
-1114 1129 1327 0
-1116 1131 1327 0
-1118 1133 1327 0
-1120 1135 1327 0
-1122 1137 1327 0
-1124 1139 1327 0
-1126 1141 1327 0
1125 -1140 1327 0
-1127 1112 1327 0
-1129 1114 1327 0
-1131 1116 1327 0
-1133 1118 1327 0
-1135 1120 1327 0
-1137 1122 1327 0
-1139 1124 1327 0
-1141 1126 1327 0
1140 -1125 1327 0
-1112 -1127 -1327 0
-1114 -1129 -1327 0
-1116 -1131 -1327 0
-1118 -1133 -1327 0
-1120 -1135 -1327 0
-1122 -1137 -1327 0
-1124 -1139 -1327 0
-1126 -1141 -1327 0
1125 1140 -1327 0
c ((SATLiteral(8845) /\ SATLiteral(8846))=tv=SATLiteral(1328))
1328 -8845 -8846 0
8845 -1328 0
8846 -1328 0
c ((SATLiteral(8847) /\ SATLiteral(8848))=tv=SATLiteral(1329))
1329 -8847 -8848 0
8847 -1329 0
8848 -1329 0
c ((SATLiteral(8849) /\ SATLiteral(8850))=tv=SATLiteral(1330))
1330 -8849 -8850 0
8849 -1330 0
8850 -1330 0
c ((SATLiteral(8851) /\ SATLiteral(8852))=tv=SATLiteral(1331))
1331 -8851 -8852 0
8851 -1331 0
8852 -1331 0
c ((SATLiteral(8853) /\ SATLiteral(8854))=tv=SATLiteral(1332))
1332 -8853 -8854 0
8853 -1332 0
8854 -1332 0
c ((SATLiteral(8855) /\ SATLiteral(8856))=tv=SATLiteral(1333))
1333 -8855 -8856 0
8855 -1333 0
8856 -1333 0
c ((SATLiteral(8857) /\ SATLiteral(8858))=tv=SATLiteral(1334))
1334 -8857 -8858 0
8857 -1334 0
8858 -1334 0
c ((SATLiteral(8859) /\ SATLiteral(8860))=tv=SATLiteral(1335))
1335 -8859 -8860 0
8859 -1335 0
8860 -1335 0
c ((SATLiteral(8861) /\ SATLiteral(8862))=tv=SATLiteral(1336))
1336 -8861 -8862 0
8861 -1336 0
8862 -1336 0
c ((SATLiteral(8863) /\ SATLiteral(8864))=tv=SATLiteral(1337))
1337 -8863 -8864 0
8863 -1337 0
8864 -1337 0
c ((SATLiteral(8865) /\ SATLiteral(8866))=tv=SATLiteral(1338))
1338 -8865 -8866 0
8865 -1338 0
8866 -1338 0
c ((SATLiteral(8867) /\ SATLiteral(8868))=tv=SATLiteral(1339))
1339 -8867 -8868 0
8867 -1339 0
8868 -1339 0
c ((SATLiteral(8869) /\ SATLiteral(8870))=tv=SATLiteral(1340))
1340 -8869 -8870 0
8869 -1340 0
8870 -1340 0
c ((SATLiteral(8871) /\ SATLiteral(8872))=tv=SATLiteral(1341))
1341 -8871 -8872 0
8871 -1341 0
8872 -1341 0
c ((SATLiteral(8873) /\ SATLiteral(8874))=tv=SATLiteral(1342))
1342 -8873 -8874 0
8873 -1342 0
8874 -1342 0
c ((SATLiteral(8875) /\ SATLiteral(8876))=tv=SATLiteral(1343))
1343 -8875 -8876 0
8875 -1343 0
8876 -1343 0
c ((SATLiteral(8877) /\ SATLiteral(8878))=tv=SATLiteral(1344))
1344 -8877 -8878 0
8877 -1344 0
8878 -1344 0
c ((SATLiteral(8879) /\ SATLiteral(8880))=tv=SATLiteral(1345))
1345 -8879 -8880 0
8879 -1345 0
8880 -1345 0
c ((SATLiteral(8881) /\ SATLiteral(8882))=tv=SATLiteral(1346))
1346 -8881 -8882 0
8881 -1346 0
8882 -1346 0
c ((SATLiteral(8883) /\ SATLiteral(8884))=tv=SATLiteral(1347))
1347 -8883 -8884 0
8883 -1347 0
8884 -1347 0
c ((SATLiteral(8885) /\ SATLiteral(8886))=tv=SATLiteral(1348))
1348 -8885 -8886 0
8885 -1348 0
8886 -1348 0
c ((SATLiteral(8887) /\ SATLiteral(8888))=tv=SATLiteral(1349))
1349 -8887 -8888 0
8887 -1349 0
8888 -1349 0
c ((SATLiteral(8889) /\ SATLiteral(8890))=tv=SATLiteral(1350))
1350 -8889 -8890 0
8889 -1350 0
8890 -1350 0
c ((SATLiteral(8891) /\ SATLiteral(8892))=tv=SATLiteral(1351))
1351 -8891 -8892 0
8891 -1351 0
8892 -1351 0
c ((SATLiteral(8893) /\ SATLiteral(8894))=tv=SATLiteral(1352))
1352 -8893 -8894 0
8893 -1352 0
8894 -1352 0
c ((SATLiteral(8895) /\ SATLiteral(8896))=tv=SATLiteral(1353))
1353 -8895 -8896 0
8895 -1353 0
8896 -1353 0
c ((SATLiteral(8897) /\ SATLiteral(8898))=tv=SATLiteral(1354))
1354 -8897 -8898 0
8897 -1354 0
8898 -1354 0
c ((SATLiteral(8899) /\ SATLiteral(8900))=tv=SATLiteral(1355))
1355 -8899 -8900 0
8899 -1355 0
8900 -1355 0
c ((SATLiteral(8901) /\ SATLiteral(8902))=tv=SATLiteral(1356))
1356 -8901 -8902 0
8901 -1356 0
8902 -1356 0
c ((SATLiteral(8903) /\ SATLiteral(8904))=tv=SATLiteral(1357))
1357 -8903 -8904 0
8903 -1357 0
8904 -1357 0
c ((SATLiteral(8905) /\ SATLiteral(8906))=tv=SATLiteral(1358))
1358 -8905 -8906 0
8905 -1358 0
8906 -1358 0
c ((SATLiteral(8907) /\ SATLiteral(8908))=tv=SATLiteral(1359))
1359 -8907 -8908 0
8907 -1359 0
8908 -1359 0
c ((SATLiteral(8909) /\ SATLiteral(8910))=tv=SATLiteral(1360))
1360 -8909 -8910 0
8909 -1360 0
8910 -1360 0
c ((SATLiteral(8911) /\ SATLiteral(8912))=tv=SATLiteral(1361))
1361 -8911 -8912 0
8911 -1361 0
8912 -1361 0
c ((SATLiteral(8913) /\ SATLiteral(8914))=tv=SATLiteral(1362))
1362 -8913 -8914 0
8913 -1362 0
8914 -1362 0
c ((SATLiteral(8915) /\ SATLiteral(8916))=tv=SATLiteral(1363))
1363 -8915 -8916 0
8915 -1363 0
8916 -1363 0
c ((SATLiteral(8917) /\ SATLiteral(8918))=tv=SATLiteral(1364))
1364 -8917 -8918 0
8917 -1364 0
8918 -1364 0
c ((SATLiteral(8919) /\ SATLiteral(8920))=tv=SATLiteral(1365))
1365 -8919 -8920 0
8919 -1365 0
8920 -1365 0
c ((SATLiteral(8921) /\ SATLiteral(8922))=tv=SATLiteral(1366))
1366 -8921 -8922 0
8921 -1366 0
8922 -1366 0
c ((SATLiteral(8923) /\ SATLiteral(8924))=tv=SATLiteral(1367))
1367 -8923 -8924 0
8923 -1367 0
8924 -1367 0
c ((SATLiteral(8925) /\ SATLiteral(8926))=tv=SATLiteral(1368))
1368 -8925 -8926 0
8925 -1368 0
8926 -1368 0
c ((SATLiteral(8927) /\ SATLiteral(8928))=tv=SATLiteral(1369))
1369 -8927 -8928 0
8927 -1369 0
8928 -1369 0
c ((SATLiteral(8929) /\ SATLiteral(8930))=tv=SATLiteral(1370))
1370 -8929 -8930 0
8929 -1370 0
8930 -1370 0
c ((SATLiteral(8931) /\ SATLiteral(8932))=tv=SATLiteral(1371))
1371 -8931 -8932 0
8931 -1371 0
8932 -1371 0
c ((SATLiteral(8933) /\ SATLiteral(8934))=tv=SATLiteral(1372))
1372 -8933 -8934 0
8933 -1372 0
8934 -1372 0
c ((SATLiteral(8935) /\ SATLiteral(8936))=tv=SATLiteral(1373))
1373 -8935 -8936 0
8935 -1373 0
8936 -1373 0
c ((SATLiteral(8937) /\ SATLiteral(8938))=tv=SATLiteral(1374))
1374 -8937 -8938 0
8937 -1374 0
8938 -1374 0
c ((SATLiteral(8939) /\ SATLiteral(8940))=tv=SATLiteral(1375))
1375 -8939 -8940 0
8939 -1375 0
8940 -1375 0
c ((SATLiteral(8941) /\ SATLiteral(8942))=tv=SATLiteral(1376))
1376 -8941 -8942 0
8941 -1376 0
8942 -1376 0
c ((SATLiteral(8943) /\ SATLiteral(8944))=tv=SATLiteral(1377))
1377 -8943 -8944 0
8943 -1377 0
8944 -1377 0
c ((SATLiteral(8945) /\ SATLiteral(8946))=tv=SATLiteral(1378))
1378 -8945 -8946 0
8945 -1378 0
8946 -1378 0
c ((SATLiteral(8947) /\ SATLiteral(8948))=tv=SATLiteral(1379))
1379 -8947 -8948 0
8947 -1379 0
8948 -1379 0
c ((SATLiteral(8949) /\ SATLiteral(8950))=tv=SATLiteral(1380))
1380 -8949 -8950 0
8949 -1380 0
8950 -1380 0
c ((SATLiteral(8951) /\ SATLiteral(8952))=tv=SATLiteral(1381))
1381 -8951 -8952 0
8951 -1381 0
8952 -1381 0
c ((SATLiteral(8953) /\ SATLiteral(8954))=tv=SATLiteral(1382))
1382 -8953 -8954 0
8953 -1382 0
8954 -1382 0
c ((SATLiteral(8955) /\ SATLiteral(8956))=tv=SATLiteral(1383))
1383 -8955 -8956 0
8955 -1383 0
8956 -1383 0
c ((SATLiteral(8957) /\ SATLiteral(8958))=tv=SATLiteral(1384))
1384 -8957 -8958 0
8957 -1384 0
8958 -1384 0
c ((SATLiteral(8959) /\ SATLiteral(8960))=tv=SATLiteral(1385))
1385 -8959 -8960 0
8959 -1385 0
8960 -1385 0
c ((SATLiteral(8961) /\ SATLiteral(8962))=tv=SATLiteral(1386))
1386 -8961 -8962 0
8961 -1386 0
8962 -1386 0
c ((SATLiteral(8963) /\ SATLiteral(8964))=tv=SATLiteral(1387))
1387 -8963 -8964 0
8963 -1387 0
8964 -1387 0
c ((SATLiteral(8965) /\ SATLiteral(8966))=tv=SATLiteral(1388))
1388 -8965 -8966 0
8965 -1388 0
8966 -1388 0
c ((SATLiteral(8967) /\ SATLiteral(8968))=tv=SATLiteral(1389))
1389 -8967 -8968 0
8967 -1389 0
8968 -1389 0
c ((SATLiteral(8969) /\ SATLiteral(8970))=tv=SATLiteral(1390))
1390 -8969 -8970 0
8969 -1390 0
8970 -1390 0
c ((SATLiteral(8971) /\ SATLiteral(8972))=tv=SATLiteral(1391))
1391 -8971 -8972 0
8971 -1391 0
8972 -1391 0
c ((SATLiteral(8973) /\ SATLiteral(8974))=tv=SATLiteral(1392))
1392 -8973 -8974 0
8973 -1392 0
8974 -1392 0
c ((SATLiteral(8975) /\ SATLiteral(8976))=tv=SATLiteral(1393))
1393 -8975 -8976 0
8975 -1393 0
8976 -1393 0
c ((SATLiteral(8977) /\ SATLiteral(8978))=tv=SATLiteral(1394))
1394 -8977 -8978 0
8977 -1394 0
8978 -1394 0
c ((SATLiteral(8979) /\ SATLiteral(8980))=tv=SATLiteral(1395))
1395 -8979 -8980 0
8979 -1395 0
8980 -1395 0
c ((SATLiteral(8981) /\ SATLiteral(8982))=tv=SATLiteral(1396))
1396 -8981 -8982 0
8981 -1396 0
8982 -1396 0
c ((SATLiteral(8983) /\ SATLiteral(8984))=tv=SATLiteral(1397))
1397 -8983 -8984 0
8983 -1397 0
8984 -1397 0
c ((SATLiteral(8985) /\ SATLiteral(8986))=tv=SATLiteral(1398))
1398 -8985 -8986 0
8985 -1398 0
8986 -1398 0
c ((SATLiteral(8987) /\ SATLiteral(8988))=tv=SATLiteral(1399))
1399 -8987 -8988 0
8987 -1399 0
8988 -1399 0
c ((SATLiteral(8989) /\ SATLiteral(8990))=tv=SATLiteral(1400))
1400 -8989 -8990 0
8989 -1400 0
8990 -1400 0
c ((SATLiteral(8991) /\ SATLiteral(8992))=tv=SATLiteral(1401))
1401 -8991 -8992 0
8991 -1401 0
8992 -1401 0
c ((SATLiteral(8993) /\ SATLiteral(8994))=tv=SATLiteral(1402))
1402 -8993 -8994 0
8993 -1402 0
8994 -1402 0
c ((SATLiteral(8995) /\ SATLiteral(8996))=tv=SATLiteral(1403))
1403 -8995 -8996 0
8995 -1403 0
8996 -1403 0
c ((SATLiteral(8997) /\ SATLiteral(8998))=tv=SATLiteral(1404))
1404 -8997 -8998 0
8997 -1404 0
8998 -1404 0
c ((SATLiteral(8999) /\ SATLiteral(9000))=tv=SATLiteral(1405))
1405 -8999 -9000 0
8999 -1405 0
9000 -1405 0
c ((SATLiteral(9001) /\ SATLiteral(9002))=tv=SATLiteral(1406))
1406 -9001 -9002 0
9001 -1406 0
9002 -1406 0
c ((SATLiteral(9003) /\ SATLiteral(9004))=tv=SATLiteral(1407))
1407 -9003 -9004 0
9003 -1407 0
9004 -1407 0
c ((SATLiteral(9005) /\ SATLiteral(9006))=tv=SATLiteral(1408))
1408 -9005 -9006 0
9005 -1408 0
9006 -1408 0
c ((SATLiteral(9007) /\ SATLiteral(9008))=tv=SATLiteral(1409))
1409 -9007 -9008 0
9007 -1409 0
9008 -1409 0
c ((SATLiteral(9009) /\ SATLiteral(9010))=tv=SATLiteral(1410))
1410 -9009 -9010 0
9009 -1410 0
9010 -1410 0
c ((SATLiteral(9011) /\ SATLiteral(9012))=tv=SATLiteral(1411))
1411 -9011 -9012 0
9011 -1411 0
9012 -1411 0
c ((SATLiteral(9013) /\ SATLiteral(9014))=tv=SATLiteral(1412))
1412 -9013 -9014 0
9013 -1412 0
9014 -1412 0
c ((SATLiteral(9015) /\ SATLiteral(9016))=tv=SATLiteral(1413))
1413 -9015 -9016 0
9015 -1413 0
9016 -1413 0
c ((SATLiteral(9017) /\ SATLiteral(9018))=tv=SATLiteral(1414))
1414 -9017 -9018 0
9017 -1414 0
9018 -1414 0
c ((SATLiteral(9019) /\ SATLiteral(9020))=tv=SATLiteral(1415))
1415 -9019 -9020 0
9019 -1415 0
9020 -1415 0
c ((SATLiteral(9021) /\ SATLiteral(9022))=tv=SATLiteral(1416))
1416 -9021 -9022 0
9021 -1416 0
9022 -1416 0
c ((SATLiteral(9023) /\ SATLiteral(9024))=tv=SATLiteral(1417))
1417 -9023 -9024 0
9023 -1417 0
9024 -1417 0
c ((SATLiteral(9025) /\ SATLiteral(9026))=tv=SATLiteral(1418))
1418 -9025 -9026 0
9025 -1418 0
9026 -1418 0
c ((SATLiteral(9027) /\ SATLiteral(9028))=tv=SATLiteral(1419))
1419 -9027 -9028 0
9027 -1419 0
9028 -1419 0
c ((SATLiteral(9029) /\ SATLiteral(9030))=tv=SATLiteral(1420))
1420 -9029 -9030 0
9029 -1420 0
9030 -1420 0
c ((SATLiteral(9031) /\ SATLiteral(9032))=tv=SATLiteral(1421))
1421 -9031 -9032 0
9031 -1421 0
9032 -1421 0
c ((SATLiteral(9033) /\ SATLiteral(9034))=tv=SATLiteral(1422))
1422 -9033 -9034 0
9033 -1422 0
9034 -1422 0
c ((SATLiteral(9035) /\ SATLiteral(9036))=tv=SATLiteral(1423))
1423 -9035 -9036 0
9035 -1423 0
9036 -1423 0
c ((SATLiteral(9037) /\ SATLiteral(9038))=tv=SATLiteral(1424))
1424 -9037 -9038 0
9037 -1424 0
9038 -1424 0
c ((SATLiteral(9039) /\ SATLiteral(9040))=tv=SATLiteral(1425))
1425 -9039 -9040 0
9039 -1425 0
9040 -1425 0
c ((SATLiteral(9041) /\ SATLiteral(9042))=tv=SATLiteral(1426))
1426 -9041 -9042 0
9041 -1426 0
9042 -1426 0
c ((SATLiteral(9043) /\ SATLiteral(9044))=tv=SATLiteral(1427))
1427 -9043 -9044 0
9043 -1427 0
9044 -1427 0
c ((SATLiteral(9045) /\ SATLiteral(9046))=tv=SATLiteral(1428))
1428 -9045 -9046 0
9045 -1428 0
9046 -1428 0
c ((SATLiteral(9047) /\ SATLiteral(9048))=tv=SATLiteral(1429))
1429 -9047 -9048 0
9047 -1429 0
9048 -1429 0
c ((SATLiteral(9049) /\ SATLiteral(9050))=tv=SATLiteral(1430))
1430 -9049 -9050 0
9049 -1430 0
9050 -1430 0
c ((SATLiteral(9051) /\ SATLiteral(9052))=tv=SATLiteral(1431))
1431 -9051 -9052 0
9051 -1431 0
9052 -1431 0
c ((SATLiteral(9053) /\ SATLiteral(9054))=tv=SATLiteral(1432))
1432 -9053 -9054 0
9053 -1432 0
9054 -1432 0
c ((SATLiteral(9055) /\ SATLiteral(9056))=tv=SATLiteral(1433))
1433 -9055 -9056 0
9055 -1433 0
9056 -1433 0
c ((SATLiteral(9057) /\ SATLiteral(9058))=tv=SATLiteral(1434))
1434 -9057 -9058 0
9057 -1434 0
9058 -1434 0
c ((SATLiteral(9059) /\ SATLiteral(9060))=tv=SATLiteral(1435))
1435 -9059 -9060 0
9059 -1435 0
9060 -1435 0
c ((SATLiteral(9061) /\ SATLiteral(9062))=tv=SATLiteral(1436))
1436 -9061 -9062 0
9061 -1436 0
9062 -1436 0
c ((SATLiteral(9063) /\ SATLiteral(9064))=tv=SATLiteral(1437))
1437 -9063 -9064 0
9063 -1437 0
9064 -1437 0
c ((SATLiteral(9065) /\ SATLiteral(9066))=tv=SATLiteral(1438))
1438 -9065 -9066 0
9065 -1438 0
9066 -1438 0
c ((SATLiteral(9067) /\ SATLiteral(9068))=tv=SATLiteral(1439))
1439 -9067 -9068 0
9067 -1439 0
9068 -1439 0
c ((SATLiteral(9069) /\ SATLiteral(9070))=tv=SATLiteral(1440))
1440 -9069 -9070 0
9069 -1440 0
9070 -1440 0
c ((SATLiteral(9071) /\ SATLiteral(9072))=tv=SATLiteral(1441))
1441 -9071 -9072 0
9071 -1441 0
9072 -1441 0
c ((SATLiteral(9073) /\ SATLiteral(9074))=tv=SATLiteral(1442))
1442 -9073 -9074 0
9073 -1442 0
9074 -1442 0
c ((SATLiteral(9075) /\ SATLiteral(9076))=tv=SATLiteral(1443))
1443 -9075 -9076 0
9075 -1443 0
9076 -1443 0
c ((SATLiteral(9077) /\ SATLiteral(9078))=tv=SATLiteral(1444))
1444 -9077 -9078 0
9077 -1444 0
9078 -1444 0
c ((SATLiteral(9079) /\ SATLiteral(9080))=tv=SATLiteral(1445))
1445 -9079 -9080 0
9079 -1445 0
9080 -1445 0
c ((SATLiteral(9081) /\ SATLiteral(9082))=tv=SATLiteral(1446))
1446 -9081 -9082 0
9081 -1446 0
9082 -1446 0
c ((SATLiteral(9083) /\ SATLiteral(9084))=tv=SATLiteral(1447))
1447 -9083 -9084 0
9083 -1447 0
9084 -1447 0
c ((SATLiteral(9085) /\ SATLiteral(9086))=tv=SATLiteral(1448))
1448 -9085 -9086 0
9085 -1448 0
9086 -1448 0
c ((SATLiteral(9087) /\ SATLiteral(9088))=tv=SATLiteral(1449))
1449 -9087 -9088 0
9087 -1449 0
9088 -1449 0
c ((SATLiteral(9089) /\ SATLiteral(9090))=tv=SATLiteral(1450))
1450 -9089 -9090 0
9089 -1450 0
9090 -1450 0
c ((SATLiteral(9091) /\ SATLiteral(9092))=tv=SATLiteral(1451))
1451 -9091 -9092 0
9091 -1451 0
9092 -1451 0
c ((SATLiteral(9093) /\ SATLiteral(9094))=tv=SATLiteral(1452))
1452 -9093 -9094 0
9093 -1452 0
9094 -1452 0
c ((SATLiteral(9095) /\ SATLiteral(9096))=tv=SATLiteral(1453))
1453 -9095 -9096 0
9095 -1453 0
9096 -1453 0
c ((SATLiteral(9097) /\ SATLiteral(9098))=tv=SATLiteral(1454))
1454 -9097 -9098 0
9097 -1454 0
9098 -1454 0
c ((SATLiteral(9099) /\ SATLiteral(9100))=tv=SATLiteral(1455))
1455 -9099 -9100 0
9099 -1455 0
9100 -1455 0
c ((SATLiteral(9101) /\ SATLiteral(9102))=tv=SATLiteral(1456))
1456 -9101 -9102 0
9101 -1456 0
9102 -1456 0
c ((SATLiteral(9103) /\ SATLiteral(9104))=tv=SATLiteral(1457))
1457 -9103 -9104 0
9103 -1457 0
9104 -1457 0
c ((SATLiteral(9105) /\ SATLiteral(9106))=tv=SATLiteral(1458))
1458 -9105 -9106 0
9105 -1458 0
9106 -1458 0
c ((SATLiteral(9107) /\ SATLiteral(9108))=tv=SATLiteral(1459))
1459 -9107 -9108 0
9107 -1459 0
9108 -1459 0
c ((SATLiteral(9109) /\ SATLiteral(9110))=tv=SATLiteral(1460))
1460 -9109 -9110 0
9109 -1460 0
9110 -1460 0
c ((SATLiteral(9111) /\ SATLiteral(9112))=tv=SATLiteral(1461))
1461 -9111 -9112 0
9111 -1461 0
9112 -1461 0
c ((SATLiteral(9113) /\ SATLiteral(9114))=tv=SATLiteral(1462))
1462 -9113 -9114 0
9113 -1462 0
9114 -1462 0
c ((SATLiteral(9115) /\ SATLiteral(9116))=tv=SATLiteral(1463))
1463 -9115 -9116 0
9115 -1463 0
9116 -1463 0
c ((SATLiteral(9117) /\ SATLiteral(9118))=tv=SATLiteral(1464))
1464 -9117 -9118 0
9117 -1464 0
9118 -1464 0
c ((SATLiteral(9119) /\ SATLiteral(9120))=tv=SATLiteral(1465))
1465 -9119 -9120 0
9119 -1465 0
9120 -1465 0
c ((SATLiteral(9121) /\ SATLiteral(9122))=tv=SATLiteral(1466))
1466 -9121 -9122 0
9121 -1466 0
9122 -1466 0
c ((SATLiteral(9123) /\ SATLiteral(9124))=tv=SATLiteral(1467))
1467 -9123 -9124 0
9123 -1467 0
9124 -1467 0
c ((SATLiteral(9125) /\ SATLiteral(9126))=tv=SATLiteral(1468))
1468 -9125 -9126 0
9125 -1468 0
9126 -1468 0
c ((SATLiteral(9127) /\ SATLiteral(9128))=tv=SATLiteral(1469))
1469 -9127 -9128 0
9127 -1469 0
9128 -1469 0
c ((SATLiteral(9129) /\ SATLiteral(9130))=tv=SATLiteral(1470))
1470 -9129 -9130 0
9129 -1470 0
9130 -1470 0
c ((SATLiteral(9131) /\ SATLiteral(9132))=tv=SATLiteral(1471))
1471 -9131 -9132 0
9131 -1471 0
9132 -1471 0
c ((SATLiteral(9133) /\ SATLiteral(9134))=tv=SATLiteral(1472))
1472 -9133 -9134 0
9133 -1472 0
9134 -1472 0
c ((SATLiteral(9135) /\ SATLiteral(9136))=tv=SATLiteral(1473))
1473 -9135 -9136 0
9135 -1473 0
9136 -1473 0
c ((SATLiteral(9137) /\ SATLiteral(9138))=tv=SATLiteral(1474))
1474 -9137 -9138 0
9137 -1474 0
9138 -1474 0
c ((SATLiteral(9139) /\ SATLiteral(9140))=tv=SATLiteral(1475))
1475 -9139 -9140 0
9139 -1475 0
9140 -1475 0
c ((SATLiteral(9141) /\ SATLiteral(9142))=tv=SATLiteral(1476))
1476 -9141 -9142 0
9141 -1476 0
9142 -1476 0
c ((SATLiteral(9143) /\ SATLiteral(9144))=tv=SATLiteral(1477))
1477 -9143 -9144 0
9143 -1477 0
9144 -1477 0
c ((SATLiteral(9145) /\ SATLiteral(9146))=tv=SATLiteral(1478))
1478 -9145 -9146 0
9145 -1478 0
9146 -1478 0
c ((SATLiteral(9147) /\ SATLiteral(9148))=tv=SATLiteral(1479))
1479 -9147 -9148 0
9147 -1479 0
9148 -1479 0
c ((SATLiteral(9149) /\ SATLiteral(9150))=tv=SATLiteral(1480))
1480 -9149 -9150 0
9149 -1480 0
9150 -1480 0
c ((SATLiteral(9151) /\ SATLiteral(9152))=tv=SATLiteral(1481))
1481 -9151 -9152 0
9151 -1481 0
9152 -1481 0
c ((SATLiteral(9153) /\ SATLiteral(9154))=tv=SATLiteral(1482))
1482 -9153 -9154 0
9153 -1482 0
9154 -1482 0
c ((SATLiteral(9155) /\ SATLiteral(9156))=tv=SATLiteral(1483))
1483 -9155 -9156 0
9155 -1483 0
9156 -1483 0
c ((SATLiteral(9157) /\ SATLiteral(9158))=tv=SATLiteral(1484))
1484 -9157 -9158 0
9157 -1484 0
9158 -1484 0
c ((SATLiteral(9159) /\ SATLiteral(9160))=tv=SATLiteral(1485))
1485 -9159 -9160 0
9159 -1485 0
9160 -1485 0
c ((SATLiteral(9161) /\ SATLiteral(9162))=tv=SATLiteral(1486))
1486 -9161 -9162 0
9161 -1486 0
9162 -1486 0
c ((SATLiteral(9163) /\ SATLiteral(9164))=tv=SATLiteral(1487))
1487 -9163 -9164 0
9163 -1487 0
9164 -1487 0
c ((SATLiteral(9165) /\ SATLiteral(9166))=tv=SATLiteral(1488))
1488 -9165 -9166 0
9165 -1488 0
9166 -1488 0
c ((SATLiteral(9167) /\ SATLiteral(9168))=tv=SATLiteral(1489))
1489 -9167 -9168 0
9167 -1489 0
9168 -1489 0
c ((SATLiteral(9169) /\ SATLiteral(9170))=tv=SATLiteral(1490))
1490 -9169 -9170 0
9169 -1490 0
9170 -1490 0
c ((SATLiteral(9171) /\ SATLiteral(9172))=tv=SATLiteral(1491))
1491 -9171 -9172 0
9171 -1491 0
9172 -1491 0
c ((SATLiteral(9173) /\ SATLiteral(9174))=tv=SATLiteral(1492))
1492 -9173 -9174 0
9173 -1492 0
9174 -1492 0
c ((SATLiteral(9175) /\ SATLiteral(9176))=tv=SATLiteral(1493))
1493 -9175 -9176 0
9175 -1493 0
9176 -1493 0
c ((SATLiteral(9177) /\ SATLiteral(9178))=tv=SATLiteral(1494))
1494 -9177 -9178 0
9177 -1494 0
9178 -1494 0
c ((SATLiteral(9179) /\ SATLiteral(9180))=tv=SATLiteral(1495))
1495 -9179 -9180 0
9179 -1495 0
9180 -1495 0
c ((SATLiteral(9181) /\ SATLiteral(9182))=tv=SATLiteral(1496))
1496 -9181 -9182 0
9181 -1496 0
9182 -1496 0
c ((SATLiteral(9183) /\ SATLiteral(9184))=tv=SATLiteral(1497))
1497 -9183 -9184 0
9183 -1497 0
9184 -1497 0
c ((SATLiteral(9185) /\ SATLiteral(9186))=tv=SATLiteral(1498))
1498 -9185 -9186 0
9185 -1498 0
9186 -1498 0
c ((SATLiteral(9187) /\ SATLiteral(9188))=tv=SATLiteral(1499))
1499 -9187 -9188 0
9187 -1499 0
9188 -1499 0
c ((SATLiteral(9189) /\ SATLiteral(9190))=tv=SATLiteral(1500))
1500 -9189 -9190 0
9189 -1500 0
9190 -1500 0
c ((SATLiteral(9191) /\ SATLiteral(9192))=tv=SATLiteral(1501))
1501 -9191 -9192 0
9191 -1501 0
9192 -1501 0
c ((SATLiteral(9193) /\ SATLiteral(9194))=tv=SATLiteral(1502))
1502 -9193 -9194 0
9193 -1502 0
9194 -1502 0
c ((SATLiteral(9195) /\ SATLiteral(9196))=tv=SATLiteral(1503))
1503 -9195 -9196 0
9195 -1503 0
9196 -1503 0
c ((SATLiteral(9197) /\ SATLiteral(9198))=tv=SATLiteral(1504))
1504 -9197 -9198 0
9197 -1504 0
9198 -1504 0
c ((SATLiteral(9199) /\ SATLiteral(9200))=tv=SATLiteral(1505))
1505 -9199 -9200 0
9199 -1505 0
9200 -1505 0
c ((SATLiteral(9201) /\ SATLiteral(9202))=tv=SATLiteral(1506))
1506 -9201 -9202 0
9201 -1506 0
9202 -1506 0
c ((SATLiteral(9203) /\ SATLiteral(9204))=tv=SATLiteral(1507))
1507 -9203 -9204 0
9203 -1507 0
9204 -1507 0
c ((SATLiteral(9205) /\ SATLiteral(9206))=tv=SATLiteral(1508))
1508 -9205 -9206 0
9205 -1508 0
9206 -1508 0
c ((SATLiteral(9207) /\ SATLiteral(9208))=tv=SATLiteral(1509))
1509 -9207 -9208 0
9207 -1509 0
9208 -1509 0
c ((SATLiteral(9209) /\ SATLiteral(9210))=tv=SATLiteral(1510))
1510 -9209 -9210 0
9209 -1510 0
9210 -1510 0
c ((SATLiteral(9211) /\ SATLiteral(9212))=tv=SATLiteral(1511))
1511 -9211 -9212 0
9211 -1511 0
9212 -1511 0
c ((SATLiteral(9213) /\ SATLiteral(9214))=tv=SATLiteral(1512))
1512 -9213 -9214 0
9213 -1512 0
9214 -1512 0
c ((SATLiteral(9215) /\ SATLiteral(9216))=tv=SATLiteral(1513))
1513 -9215 -9216 0
9215 -1513 0
9216 -1513 0
c ((SATLiteral(9217) /\ SATLiteral(9218))=tv=SATLiteral(1514))
1514 -9217 -9218 0
9217 -1514 0
9218 -1514 0
c ((SATLiteral(9219) /\ SATLiteral(9220))=tv=SATLiteral(1515))
1515 -9219 -9220 0
9219 -1515 0
9220 -1515 0
c ((SATLiteral(9221) /\ SATLiteral(9222))=tv=SATLiteral(1516))
1516 -9221 -9222 0
9221 -1516 0
9222 -1516 0
c ((SATLiteral(9223) /\ SATLiteral(9224))=tv=SATLiteral(1517))
1517 -9223 -9224 0
9223 -1517 0
9224 -1517 0
c ((SATLiteral(9225) /\ SATLiteral(9226))=tv=SATLiteral(1518))
1518 -9225 -9226 0
9225 -1518 0
9226 -1518 0
c ((SATLiteral(9227) /\ SATLiteral(9228))=tv=SATLiteral(1519))
1519 -9227 -9228 0
9227 -1519 0
9228 -1519 0
c ((SATLiteral(9229) /\ SATLiteral(9230))=tv=SATLiteral(1520))
1520 -9229 -9230 0
9229 -1520 0
9230 -1520 0
c ((SATLiteral(9231) /\ SATLiteral(9232))=tv=SATLiteral(1521))
1521 -9231 -9232 0
9231 -1521 0
9232 -1521 0
c ((SATLiteral(9233) /\ SATLiteral(9234))=tv=SATLiteral(1522))
1522 -9233 -9234 0
9233 -1522 0
9234 -1522 0
c ((SATLiteral(9235) /\ SATLiteral(9236))=tv=SATLiteral(1523))
1523 -9235 -9236 0
9235 -1523 0
9236 -1523 0
c ((SATLiteral(9237) /\ SATLiteral(9238))=tv=SATLiteral(1524))
1524 -9237 -9238 0
9237 -1524 0
9238 -1524 0
c ((SATLiteral(9239) /\ SATLiteral(9240))=tv=SATLiteral(1525))
1525 -9239 -9240 0
9239 -1525 0
9240 -1525 0
c ((SATLiteral(9241) /\ SATLiteral(9242))=tv=SATLiteral(1526))
1526 -9241 -9242 0
9241 -1526 0
9242 -1526 0
c ((SATLiteral(9243) /\ SATLiteral(9244))=tv=SATLiteral(1527))
1527 -9243 -9244 0
9243 -1527 0
9244 -1527 0
c ((SATLiteral(9245) /\ SATLiteral(9246))=tv=SATLiteral(1528))
1528 -9245 -9246 0
9245 -1528 0
9246 -1528 0
c ((SATLiteral(9247) /\ SATLiteral(9248))=tv=SATLiteral(1529))
1529 -9247 -9248 0
9247 -1529 0
9248 -1529 0
c ((SATLiteral(9249) /\ SATLiteral(9250))=tv=SATLiteral(1530))
1530 -9249 -9250 0
9249 -1530 0
9250 -1530 0
c ((SATLiteral(9251) /\ SATLiteral(9252))=tv=SATLiteral(1531))
1531 -9251 -9252 0
9251 -1531 0
9252 -1531 0
c ((SATLiteral(9253) /\ SATLiteral(9254))=tv=SATLiteral(1532))
1532 -9253 -9254 0
9253 -1532 0
9254 -1532 0
c ((SATLiteral(9255) /\ SATLiteral(9256))=tv=SATLiteral(1533))
1533 -9255 -9256 0
9255 -1533 0
9256 -1533 0
c ((SATLiteral(9257) /\ SATLiteral(9258))=tv=SATLiteral(1534))
1534 -9257 -9258 0
9257 -1534 0
9258 -1534 0
c ((SATLiteral(9259) /\ SATLiteral(9260))=tv=SATLiteral(1535))
1535 -9259 -9260 0
9259 -1535 0
9260 -1535 0
c ((SATLiteral(9261) /\ SATLiteral(9262))=tv=SATLiteral(1536))
1536 -9261 -9262 0
9261 -1536 0
9262 -1536 0
c ((SATLiteral(9263) /\ SATLiteral(9264))=tv=SATLiteral(1537))
1537 -9263 -9264 0
9263 -1537 0
9264 -1537 0
c ((SATLiteral(9265) /\ SATLiteral(9266))=tv=SATLiteral(1538))
1538 -9265 -9266 0
9265 -1538 0
9266 -1538 0
c ((SATLiteral(9267) /\ SATLiteral(9268))=tv=SATLiteral(1539))
1539 -9267 -9268 0
9267 -1539 0
9268 -1539 0
c ((SATLiteral(9269) /\ SATLiteral(9270))=tv=SATLiteral(1540))
1540 -9269 -9270 0
9269 -1540 0
9270 -1540 0
c ((SATLiteral(9271) /\ SATLiteral(9272))=tv=SATLiteral(1541))
1541 -9271 -9272 0
9271 -1541 0
9272 -1541 0
c ((SATLiteral(9273) /\ SATLiteral(9274))=tv=SATLiteral(1542))
1542 -9273 -9274 0
9273 -1542 0
9274 -1542 0
c ((SATLiteral(9275) /\ SATLiteral(9276))=tv=SATLiteral(1543))
1543 -9275 -9276 0
9275 -1543 0
9276 -1543 0
c ((SATLiteral(9277) /\ SATLiteral(9278))=tv=SATLiteral(1544))
1544 -9277 -9278 0
9277 -1544 0
9278 -1544 0
c ((SATLiteral(9279) /\ SATLiteral(9280))=tv=SATLiteral(1545))
1545 -9279 -9280 0
9279 -1545 0
9280 -1545 0
c ((SATLiteral(9281) /\ SATLiteral(9282))=tv=SATLiteral(1546))
1546 -9281 -9282 0
9281 -1546 0
9282 -1546 0
c ((SATLiteral(9283) /\ SATLiteral(9284))=tv=SATLiteral(1547))
1547 -9283 -9284 0
9283 -1547 0
9284 -1547 0
c ((SATLiteral(9285) /\ SATLiteral(9286))=tv=SATLiteral(1548))
1548 -9285 -9286 0
9285 -1548 0
9286 -1548 0
c ((SATLiteral(9287) /\ SATLiteral(9288))=tv=SATLiteral(1549))
1549 -9287 -9288 0
9287 -1549 0
9288 -1549 0
c ((SATLiteral(9289) /\ SATLiteral(9290))=tv=SATLiteral(1550))
1550 -9289 -9290 0
9289 -1550 0
9290 -1550 0
c ((SATLiteral(9291) /\ SATLiteral(9292))=tv=SATLiteral(1551))
1551 -9291 -9292 0
9291 -1551 0
9292 -1551 0
c ((SATLiteral(9293) /\ SATLiteral(9294))=tv=SATLiteral(1552))
1552 -9293 -9294 0
9293 -1552 0
9294 -1552 0
c ((SATLiteral(9295) /\ SATLiteral(9296))=tv=SATLiteral(1553))
1553 -9295 -9296 0
9295 -1553 0
9296 -1553 0
c ((SATLiteral(9297) /\ SATLiteral(9298))=tv=SATLiteral(1554))
1554 -9297 -9298 0
9297 -1554 0
9298 -1554 0
c ((SATLiteral(9299) /\ SATLiteral(9300))=tv=SATLiteral(1555))
1555 -9299 -9300 0
9299 -1555 0
9300 -1555 0
c ((SATLiteral(9301) /\ SATLiteral(9302))=tv=SATLiteral(1556))
1556 -9301 -9302 0
9301 -1556 0
9302 -1556 0
c ((SATLiteral(9303) /\ SATLiteral(9304))=tv=SATLiteral(1557))
1557 -9303 -9304 0
9303 -1557 0
9304 -1557 0
c ((SATLiteral(9305) /\ SATLiteral(9306))=tv=SATLiteral(1558))
1558 -9305 -9306 0
9305 -1558 0
9306 -1558 0
c ((SATLiteral(9307) /\ SATLiteral(9308))=tv=SATLiteral(1559))
1559 -9307 -9308 0
9307 -1559 0
9308 -1559 0
c ((SATLiteral(9309) /\ SATLiteral(9310))=tv=SATLiteral(1560))
1560 -9309 -9310 0
9309 -1560 0
9310 -1560 0
c ((SATLiteral(9311) /\ SATLiteral(9312))=tv=SATLiteral(1561))
1561 -9311 -9312 0
9311 -1561 0
9312 -1561 0
c ((SATLiteral(9313) /\ SATLiteral(9314))=tv=SATLiteral(1562))
1562 -9313 -9314 0
9313 -1562 0
9314 -1562 0
c ((SATLiteral(9315) /\ SATLiteral(9316))=tv=SATLiteral(1563))
1563 -9315 -9316 0
9315 -1563 0
9316 -1563 0
c ((SATLiteral(9317) /\ SATLiteral(9318))=tv=SATLiteral(1564))
1564 -9317 -9318 0
9317 -1564 0
9318 -1564 0
c ((SATLiteral(9319) /\ SATLiteral(9320))=tv=SATLiteral(1565))
1565 -9319 -9320 0
9319 -1565 0
9320 -1565 0
c ((SATLiteral(9321) /\ SATLiteral(9322))=tv=SATLiteral(1566))
1566 -9321 -9322 0
9321 -1566 0
9322 -1566 0
c ((SATLiteral(9323) /\ SATLiteral(9324))=tv=SATLiteral(1567))
1567 -9323 -9324 0
9323 -1567 0
9324 -1567 0
c ((SATLiteral(9325) /\ SATLiteral(9326))=tv=SATLiteral(1568))
1568 -9325 -9326 0
9325 -1568 0
9326 -1568 0
c ((SATLiteral(9327) /\ SATLiteral(9328))=tv=SATLiteral(1569))
1569 -9327 -9328 0
9327 -1569 0
9328 -1569 0
c ((SATLiteral(9329) /\ SATLiteral(9330))=tv=SATLiteral(1570))
1570 -9329 -9330 0
9329 -1570 0
9330 -1570 0
c (((SATLiteral(2) + SATLiteral(17) + aux1866)<=1)=tv=SATLiteral(1571))
-1571 8195 0
-1571 -17 8194 0
-1571 -2 8194 0
-1571 -2 -17 0
1571 17 -8194 0
1571 2 -8194 0
1571 2 17 -8195 0
c (((SATLiteral(4) + SATLiteral(19) + aux1867)<=1)=tv=SATLiteral(1572))
-1572 8198 0
-1572 -19 8197 0
-1572 -4 8197 0
-1572 -4 -19 0
1572 19 -8197 0
1572 4 -8197 0
1572 4 19 -8198 0
c (((SATLiteral(6) + SATLiteral(21) + aux1868)<=1)=tv=SATLiteral(1573))
-1573 8201 0
-1573 -21 8200 0
-1573 -6 8200 0
-1573 -6 -21 0
1573 21 -8200 0
1573 6 -8200 0
1573 6 21 -8201 0
c (((SATLiteral(8) + SATLiteral(23) + aux1869)<=1)=tv=SATLiteral(1574))
-1574 8204 0
-1574 -23 8203 0
-1574 -8 8203 0
-1574 -8 -23 0
1574 23 -8203 0
1574 8 -8203 0
1574 8 23 -8204 0
c (((SATLiteral(10) + SATLiteral(25) + aux1870)<=1)=tv=SATLiteral(1575))
-1575 8207 0
-1575 -25 8206 0
-1575 -10 8206 0
-1575 -10 -25 0
1575 25 -8206 0
1575 10 -8206 0
1575 10 25 -8207 0
c (((SATLiteral(12) + SATLiteral(27) + aux1871)<=1)=tv=SATLiteral(1576))
-1576 8210 0
-1576 -27 8209 0
-1576 -12 8209 0
-1576 -12 -27 0
1576 27 -8209 0
1576 12 -8209 0
1576 12 27 -8210 0
c (((SATLiteral(14) + SATLiteral(29) + aux1872)<=1)=tv=SATLiteral(1577))
-1577 8213 0
-1577 -29 8212 0
-1577 -14 8212 0
-1577 -14 -29 0
1577 29 -8212 0
1577 14 -8212 0
1577 14 29 -8213 0
c (((SATLiteral(16) + SATLiteral(31) + aux1873)<=1)=tv=SATLiteral(1578))
-1578 8216 0
-1578 -31 8215 0
-1578 -16 8215 0
-1578 -16 -31 0
1578 31 -8215 0
1578 16 -8215 0
1578 16 31 -8216 0
c (((SATLiteral(-15) + SATLiteral(-30) + aux1874)<=1)=tv=SATLiteral(1579))
-1579 8219 0
-1579 30 8218 0
-1579 15 8218 0
-1579 15 30 0
1579 -30 -8218 0
1579 -15 -8218 0
1579 -15 -30 -8219 0
c (((aux1876 + aux1877 + aux1879)<=1)=tv=SATLiteral(1580))
-1580 8234 0
-1580 8227 8233 0
-1580 8228 0
-1580 8224 8233 0
-1580 8224 8227 0
-1580 8224 8228 0
-1580 8225 0
-1580 8225 8227 0
-1580 8225 8228 0
1580 -8225 -8227 -8233 0
1580 -8224 -8228 -8233 0
1580 -8224 -8227 -8234 0
c (((aux1881 + aux1882 + aux1884)<=1)=tv=SATLiteral(1581))
-1581 8253 0
-1581 8246 8252 0
-1581 8247 0
-1581 8243 8252 0
-1581 8243 8246 0
-1581 8243 8247 0
-1581 8244 0
-1581 8244 8246 0
-1581 8244 8247 0
1581 -8244 -8246 -8252 0
1581 -8243 -8247 -8252 0
1581 -8243 -8246 -8253 0
c (((aux1886 + aux1887 + aux1889)<=1)=tv=SATLiteral(1582))
-1582 8272 0
-1582 8265 8271 0
-1582 8266 0
-1582 8262 8271 0
-1582 8262 8265 0
-1582 8262 8266 0
-1582 8263 0
-1582 8263 8265 0
-1582 8263 8266 0
1582 -8263 -8265 -8271 0
1582 -8262 -8266 -8271 0
1582 -8262 -8265 -8272 0
c (((aux1891 + aux1892 + aux1894)<=1)=tv=SATLiteral(1583))
-1583 8291 0
-1583 8284 8290 0
-1583 8285 0
-1583 8281 8290 0
-1583 8281 8284 0
-1583 8281 8285 0
-1583 8282 0
-1583 8282 8284 0
-1583 8282 8285 0
1583 -8282 -8284 -8290 0
1583 -8281 -8285 -8290 0
1583 -8281 -8284 -8291 0
c (((aux1896 + aux1897 + aux1899)<=1)=tv=SATLiteral(1584))
-1584 8310 0
-1584 8303 8309 0
-1584 8304 0
-1584 8300 8309 0
-1584 8300 8303 0
-1584 8300 8304 0
-1584 8301 0
-1584 8301 8303 0
-1584 8301 8304 0
1584 -8301 -8303 -8309 0
1584 -8300 -8304 -8309 0
1584 -8300 -8303 -8310 0
c (((aux1901 + aux1902 + aux1904)<=1)=tv=SATLiteral(1585))
-1585 8329 0
-1585 8322 8328 0
-1585 8323 0
-1585 8319 8328 0
-1585 8319 8322 0
-1585 8319 8323 0
-1585 8320 0
-1585 8320 8322 0
-1585 8320 8323 0
1585 -8320 -8322 -8328 0
1585 -8319 -8323 -8328 0
1585 -8319 -8322 -8329 0
c (((aux1906 + aux1907 + aux1909)<=1)=tv=SATLiteral(1586))
-1586 8348 0
-1586 8341 8347 0
-1586 8342 0
-1586 8338 8347 0
-1586 8338 8341 0
-1586 8338 8342 0
-1586 8339 0
-1586 8339 8341 0
-1586 8339 8342 0
1586 -8339 -8341 -8347 0
1586 -8338 -8342 -8347 0
1586 -8338 -8341 -8348 0
c (((aux1911 + aux1912 + aux1914)<=1)=tv=SATLiteral(1587))
-1587 8367 0
-1587 8360 8366 0
-1587 8361 0
-1587 8357 8366 0
-1587 8357 8360 0
-1587 8357 8361 0
-1587 8358 0
-1587 8358 8360 0
-1587 8358 8361 0
1587 -8358 -8360 -8366 0
1587 -8357 -8361 -8366 0
1587 -8357 -8360 -8367 0
c (((aux1916 + aux1917 + aux1919)<=1)=tv=SATLiteral(1588))
-1588 8386 0
-1588 8379 8385 0
-1588 8380 0
-1588 8376 8385 0
-1588 8376 8379 0
-1588 8376 8380 0
-1588 8377 0
-1588 8377 8379 0
-1588 8377 8380 0
1588 -8377 -8379 -8385 0
1588 -8376 -8380 -8385 0
1588 -8376 -8379 -8386 0
c (((aux1920 + aux1921 + SATLiteral(452))<=1)=tv=SATLiteral(1589))
-1589 8396 0
-1589 8392 8395 0
-1589 8393 0
-1589 -452 8395 0
-1589 -452 8392 0
-1589 -452 8393 0
1589 -8392 -8395 0
1589 452 -8393 -8395 0
1589 452 -8392 -8396 0
c (((aux1922 + aux1923 + SATLiteral(454))<=1)=tv=SATLiteral(1590))
-1590 8402 0
-1590 8398 8401 0
-1590 8399 0
-1590 -454 8401 0
-1590 -454 8398 0
-1590 -454 8399 0
1590 -8398 -8401 0
1590 454 -8399 -8401 0
1590 454 -8398 -8402 0
c (((aux1924 + aux1925 + SATLiteral(456))<=1)=tv=SATLiteral(1591))
-1591 8408 0
-1591 8404 8407 0
-1591 8405 0
-1591 -456 8407 0
-1591 -456 8404 0
-1591 -456 8405 0
1591 -8404 -8407 0
1591 456 -8405 -8407 0
1591 456 -8404 -8408 0
c (((aux1926 + aux1927 + SATLiteral(458))<=1)=tv=SATLiteral(1592))
-1592 8414 0
-1592 8410 8413 0
-1592 8411 0
-1592 -458 8413 0
-1592 -458 8410 0
-1592 -458 8411 0
1592 -8410 -8413 0
1592 458 -8411 -8413 0
1592 458 -8410 -8414 0
c (((aux1928 + aux1929 + SATLiteral(460))<=1)=tv=SATLiteral(1593))
-1593 8420 0
-1593 8416 8419 0
-1593 8417 0
-1593 -460 8419 0
-1593 -460 8416 0
-1593 -460 8417 0
1593 -8416 -8419 0
1593 460 -8417 -8419 0
1593 460 -8416 -8420 0
c (((aux1930 + aux1931 + SATLiteral(462))<=1)=tv=SATLiteral(1594))
-1594 8426 0
-1594 8422 8425 0
-1594 8423 0
-1594 -462 8425 0
-1594 -462 8422 0
-1594 -462 8423 0
1594 -8422 -8425 0
1594 462 -8423 -8425 0
1594 462 -8422 -8426 0
c (((aux1932 + aux1933 + SATLiteral(464))<=1)=tv=SATLiteral(1595))
-1595 8432 0
-1595 8428 8431 0
-1595 8429 0
-1595 -464 8431 0
-1595 -464 8428 0
-1595 -464 8429 0
1595 -8428 -8431 0
1595 464 -8429 -8431 0
1595 464 -8428 -8432 0
c (((aux1934 + aux1935 + SATLiteral(466))<=1)=tv=SATLiteral(1596))
-1596 8438 0
-1596 8434 8437 0
-1596 8435 0
-1596 -466 8437 0
-1596 -466 8434 0
-1596 -466 8435 0
1596 -8434 -8437 0
1596 466 -8435 -8437 0
1596 466 -8434 -8438 0
c (((aux1936 + aux1937 + SATLiteral(-465))<=1)=tv=SATLiteral(1597))
-1597 8444 0
-1597 8440 8443 0
-1597 8441 0
-1597 465 8443 0
-1597 465 8440 0
-1597 465 8441 0
1597 -8440 -8443 0
1597 -465 -8441 -8443 0
1597 -465 -8440 -8444 0
c (((aux1938 + aux1939 + SATLiteral(482))<=1)=tv=SATLiteral(1598))
-1598 8450 0
-1598 8446 8449 0
-1598 8447 0
-1598 -482 8449 0
-1598 -482 8446 0
-1598 -482 8447 0
1598 -8446 -8449 0
1598 482 -8447 -8449 0
1598 482 -8446 -8450 0
c (((aux1940 + aux1941 + SATLiteral(484))<=1)=tv=SATLiteral(1599))
-1599 8456 0
-1599 8452 8455 0
-1599 8453 0
-1599 -484 8455 0
-1599 -484 8452 0
-1599 -484 8453 0
1599 -8452 -8455 0
1599 484 -8453 -8455 0
1599 484 -8452 -8456 0
c (((aux1942 + aux1943 + SATLiteral(486))<=1)=tv=SATLiteral(1600))
-1600 8462 0
-1600 8458 8461 0
-1600 8459 0
-1600 -486 8461 0
-1600 -486 8458 0
-1600 -486 8459 0
1600 -8458 -8461 0
1600 486 -8459 -8461 0
1600 486 -8458 -8462 0
c (((aux1944 + aux1945 + SATLiteral(488))<=1)=tv=SATLiteral(1601))
-1601 8468 0
-1601 8464 8467 0
-1601 8465 0
-1601 -488 8467 0
-1601 -488 8464 0
-1601 -488 8465 0
1601 -8464 -8467 0
1601 488 -8465 -8467 0
1601 488 -8464 -8468 0
c (((aux1946 + aux1947 + SATLiteral(490))<=1)=tv=SATLiteral(1602))
-1602 8474 0
-1602 8470 8473 0
-1602 8471 0
-1602 -490 8473 0
-1602 -490 8470 0
-1602 -490 8471 0
1602 -8470 -8473 0
1602 490 -8471 -8473 0
1602 490 -8470 -8474 0
c (((aux1948 + aux1949 + SATLiteral(492))<=1)=tv=SATLiteral(1603))
-1603 8480 0
-1603 8476 8479 0
-1603 8477 0
-1603 -492 8479 0
-1603 -492 8476 0
-1603 -492 8477 0
1603 -8476 -8479 0
1603 492 -8477 -8479 0
1603 492 -8476 -8480 0
c (((aux1950 + aux1951 + SATLiteral(494))<=1)=tv=SATLiteral(1604))
-1604 8486 0
-1604 8482 8485 0
-1604 8483 0
-1604 -494 8485 0
-1604 -494 8482 0
-1604 -494 8483 0
1604 -8482 -8485 0
1604 494 -8483 -8485 0
1604 494 -8482 -8486 0
c (((aux1952 + aux1953 + SATLiteral(496))<=1)=tv=SATLiteral(1605))
-1605 8492 0
-1605 8488 8491 0
-1605 8489 0
-1605 -496 8491 0
-1605 -496 8488 0
-1605 -496 8489 0
1605 -8488 -8491 0
1605 496 -8489 -8491 0
1605 496 -8488 -8492 0
c (((aux1954 + aux1955 + SATLiteral(-495))<=1)=tv=SATLiteral(1606))
-1606 8498 0
-1606 8494 8497 0
-1606 8495 0
-1606 495 8497 0
-1606 495 8494 0
-1606 495 8495 0
1606 -8494 -8497 0
1606 -495 -8495 -8497 0
1606 -495 -8494 -8498 0
c (((SATLiteral(347) + SATLiteral(362) + SATLiteral(497))<=1)=tv=SATLiteral(1607))
-1607 -362 -497 0
-1607 -347 -497 0
-1607 -347 -362 0
1607 362 497 0
1607 347 497 0
1607 347 362 0
c (((SATLiteral(349) + SATLiteral(364) + SATLiteral(499))<=1)=tv=SATLiteral(1608))
-1608 -364 -499 0
-1608 -349 -499 0
-1608 -349 -364 0
1608 364 499 0
1608 349 499 0
1608 349 364 0
c (((SATLiteral(351) + SATLiteral(366) + SATLiteral(501))<=1)=tv=SATLiteral(1609))
-1609 -366 -501 0
-1609 -351 -501 0
-1609 -351 -366 0
1609 366 501 0
1609 351 501 0
1609 351 366 0
c (((SATLiteral(353) + SATLiteral(368) + SATLiteral(503))<=1)=tv=SATLiteral(1610))
-1610 -368 -503 0
-1610 -353 -503 0
-1610 -353 -368 0
1610 368 503 0
1610 353 503 0
1610 353 368 0
c (((SATLiteral(355) + SATLiteral(370) + SATLiteral(505))<=1)=tv=SATLiteral(1611))
-1611 -370 -505 0
-1611 -355 -505 0
-1611 -355 -370 0
1611 370 505 0
1611 355 505 0
1611 355 370 0
c (((SATLiteral(357) + SATLiteral(372) + SATLiteral(507))<=1)=tv=SATLiteral(1612))
-1612 -372 -507 0
-1612 -357 -507 0
-1612 -357 -372 0
1612 372 507 0
1612 357 507 0
1612 357 372 0
c (((SATLiteral(359) + SATLiteral(374) + SATLiteral(509))<=1)=tv=SATLiteral(1613))
-1613 -374 -509 0
-1613 -359 -509 0
-1613 -359 -374 0
1613 374 509 0
1613 359 509 0
1613 359 374 0
c (((SATLiteral(361) + SATLiteral(376) + SATLiteral(511))<=1)=tv=SATLiteral(1614))
-1614 -376 -511 0
-1614 -361 -511 0
-1614 -361 -376 0
1614 376 511 0
1614 361 511 0
1614 361 376 0
c (((SATLiteral(-360) + SATLiteral(-375) + SATLiteral(-510))<=1)=tv=SATLiteral(1615))
-1615 375 510 0
-1615 360 510 0
-1615 360 375 0
1615 -375 -510 0
1615 -360 -510 0
1615 -360 -375 0
c (((aux1956 + SATLiteral(422) + SATLiteral(437))<=1)=tv=SATLiteral(1616))
-1616 8501 0
-1616 -437 8500 0
-1616 -422 8500 0
-1616 -422 -437 0
1616 437 -8500 0
1616 422 -8500 0
1616 422 437 -8501 0
c (((aux1957 + SATLiteral(424) + SATLiteral(439))<=1)=tv=SATLiteral(1617))
-1617 8504 0
-1617 -439 8503 0
-1617 -424 8503 0
-1617 -424 -439 0
1617 439 -8503 0
1617 424 -8503 0
1617 424 439 -8504 0
c (((aux1958 + SATLiteral(426) + SATLiteral(441))<=1)=tv=SATLiteral(1618))
-1618 8507 0
-1618 -441 8506 0
-1618 -426 8506 0
-1618 -426 -441 0
1618 441 -8506 0
1618 426 -8506 0
1618 426 441 -8507 0
c (((aux1959 + SATLiteral(428) + SATLiteral(443))<=1)=tv=SATLiteral(1619))
-1619 8510 0
-1619 -443 8509 0
-1619 -428 8509 0
-1619 -428 -443 0
1619 443 -8509 0
1619 428 -8509 0
1619 428 443 -8510 0
c (((aux1960 + SATLiteral(430) + SATLiteral(445))<=1)=tv=SATLiteral(1620))
-1620 8513 0
-1620 -445 8512 0
-1620 -430 8512 0
-1620 -430 -445 0
1620 445 -8512 0
1620 430 -8512 0
1620 430 445 -8513 0
c (((aux1961 + SATLiteral(432) + SATLiteral(447))<=1)=tv=SATLiteral(1621))
-1621 8516 0
-1621 -447 8515 0
-1621 -432 8515 0
-1621 -432 -447 0
1621 447 -8515 0
1621 432 -8515 0
1621 432 447 -8516 0
c (((aux1962 + SATLiteral(434) + SATLiteral(449))<=1)=tv=SATLiteral(1622))
-1622 8519 0
-1622 -449 8518 0
-1622 -434 8518 0
-1622 -434 -449 0
1622 449 -8518 0
1622 434 -8518 0
1622 434 449 -8519 0
c (((aux1963 + SATLiteral(436) + SATLiteral(451))<=1)=tv=SATLiteral(1623))
-1623 8522 0
-1623 -451 8521 0
-1623 -436 8521 0
-1623 -436 -451 0
1623 451 -8521 0
1623 436 -8521 0
1623 436 451 -8522 0
c (((aux1964 + SATLiteral(-435) + SATLiteral(-450))<=1)=tv=SATLiteral(1624))
-1624 8525 0
-1624 450 8524 0
-1624 435 8524 0
-1624 435 450 0
1624 -450 -8524 0
1624 -435 -8524 0
1624 -435 -450 -8525 0
c (((aux1965 + aux1966 + SATLiteral(572))<=1)=tv=SATLiteral(1625))
-1625 8531 0
-1625 8527 8530 0
-1625 8528 0
-1625 -572 8530 0
-1625 -572 8527 0
-1625 -572 8528 0
1625 -8527 -8530 0
1625 572 -8528 -8530 0
1625 572 -8527 -8531 0
c (((aux1967 + aux1968 + SATLiteral(574))<=1)=tv=SATLiteral(1626))
-1626 8537 0
-1626 8533 8536 0
-1626 8534 0
-1626 -574 8536 0
-1626 -574 8533 0
-1626 -574 8534 0
1626 -8533 -8536 0
1626 574 -8534 -8536 0
1626 574 -8533 -8537 0
c (((aux1969 + aux1970 + SATLiteral(576))<=1)=tv=SATLiteral(1627))
-1627 8543 0
-1627 8539 8542 0
-1627 8540 0
-1627 -576 8542 0
-1627 -576 8539 0
-1627 -576 8540 0
1627 -8539 -8542 0
1627 576 -8540 -8542 0
1627 576 -8539 -8543 0
c (((aux1971 + aux1972 + SATLiteral(578))<=1)=tv=SATLiteral(1628))
-1628 8549 0
-1628 8545 8548 0
-1628 8546 0
-1628 -578 8548 0
-1628 -578 8545 0
-1628 -578 8546 0
1628 -8545 -8548 0
1628 578 -8546 -8548 0
1628 578 -8545 -8549 0
c (((aux1973 + aux1974 + SATLiteral(580))<=1)=tv=SATLiteral(1629))
-1629 8555 0
-1629 8551 8554 0
-1629 8552 0
-1629 -580 8554 0
-1629 -580 8551 0
-1629 -580 8552 0
1629 -8551 -8554 0
1629 580 -8552 -8554 0
1629 580 -8551 -8555 0
c (((aux1975 + aux1976 + SATLiteral(582))<=1)=tv=SATLiteral(1630))
-1630 8561 0
-1630 8557 8560 0
-1630 8558 0
-1630 -582 8560 0
-1630 -582 8557 0
-1630 -582 8558 0
1630 -8557 -8560 0
1630 582 -8558 -8560 0
1630 582 -8557 -8561 0
c (((aux1977 + aux1978 + SATLiteral(584))<=1)=tv=SATLiteral(1631))
-1631 8567 0
-1631 8563 8566 0
-1631 8564 0
-1631 -584 8566 0
-1631 -584 8563 0
-1631 -584 8564 0
1631 -8563 -8566 0
1631 584 -8564 -8566 0
1631 584 -8563 -8567 0
c (((aux1979 + aux1980 + SATLiteral(586))<=1)=tv=SATLiteral(1632))
-1632 8573 0
-1632 8569 8572 0
-1632 8570 0
-1632 -586 8572 0
-1632 -586 8569 0
-1632 -586 8570 0
1632 -8569 -8572 0
1632 586 -8570 -8572 0
1632 586 -8569 -8573 0
c (((aux1981 + aux1982 + SATLiteral(-585))<=1)=tv=SATLiteral(1633))
-1633 8579 0
-1633 8575 8578 0
-1633 8576 0
-1633 585 8578 0
-1633 585 8575 0
-1633 585 8576 0
1633 -8575 -8578 0
1633 -585 -8576 -8578 0
1633 -585 -8575 -8579 0
c (((SATLiteral(722) + aux1983 + SATLiteral(842))<=1)=tv=SATLiteral(1634))
-1634 8582 0
-1634 -842 8581 0
-1634 -722 8581 0
-1634 -722 -842 0
1634 842 -8581 0
1634 722 -8581 0
1634 722 842 -8582 0
c (((SATLiteral(724) + aux1984 + SATLiteral(844))<=1)=tv=SATLiteral(1635))
-1635 8585 0
-1635 -844 8584 0
-1635 -724 8584 0
-1635 -724 -844 0
1635 844 -8584 0
1635 724 -8584 0
1635 724 844 -8585 0
c (((SATLiteral(726) + aux1985 + SATLiteral(846))<=1)=tv=SATLiteral(1636))
-1636 8588 0
-1636 -846 8587 0
-1636 -726 8587 0
-1636 -726 -846 0
1636 846 -8587 0
1636 726 -8587 0
1636 726 846 -8588 0
c (((SATLiteral(728) + aux1986 + SATLiteral(848))<=1)=tv=SATLiteral(1637))
-1637 8591 0
-1637 -848 8590 0
-1637 -728 8590 0
-1637 -728 -848 0
1637 848 -8590 0
1637 728 -8590 0
1637 728 848 -8591 0
c (((SATLiteral(730) + aux1987 + SATLiteral(850))<=1)=tv=SATLiteral(1638))
-1638 8594 0
-1638 -850 8593 0
-1638 -730 8593 0
-1638 -730 -850 0
1638 850 -8593 0
1638 730 -8593 0
1638 730 850 -8594 0
c (((SATLiteral(732) + aux1988 + SATLiteral(852))<=1)=tv=SATLiteral(1639))
-1639 8597 0
-1639 -852 8596 0
-1639 -732 8596 0
-1639 -732 -852 0
1639 852 -8596 0
1639 732 -8596 0
1639 732 852 -8597 0
c (((SATLiteral(734) + aux1989 + SATLiteral(854))<=1)=tv=SATLiteral(1640))
-1640 8600 0
-1640 -854 8599 0
-1640 -734 8599 0
-1640 -734 -854 0
1640 854 -8599 0
1640 734 -8599 0
1640 734 854 -8600 0
c (((SATLiteral(736) + aux1990 + SATLiteral(856))<=1)=tv=SATLiteral(1641))
-1641 8603 0
-1641 -856 8602 0
-1641 -736 8602 0
-1641 -736 -856 0
1641 856 -8602 0
1641 736 -8602 0
1641 736 856 -8603 0
c (((SATLiteral(-735) + aux1991 + SATLiteral(-855))<=1)=tv=SATLiteral(1642))
-1642 8606 0
-1642 855 8605 0
-1642 735 8605 0
-1642 735 855 0
1642 -855 -8605 0
1642 -735 -8605 0
1642 -735 -855 -8606 0
c (((SATLiteral(782) + aux1992 + aux1993)<=1)=tv=SATLiteral(1643))
-1643 8612 0
-1643 8608 8611 0
-1643 8609 0
-1643 -782 8611 0
-1643 -782 8608 0
-1643 -782 8609 0
1643 -8608 -8611 0
1643 782 -8609 -8611 0
1643 782 -8608 -8612 0
c (((SATLiteral(784) + aux1994 + aux1995)<=1)=tv=SATLiteral(1644))
-1644 8618 0
-1644 8614 8617 0
-1644 8615 0
-1644 -784 8617 0
-1644 -784 8614 0
-1644 -784 8615 0
1644 -8614 -8617 0
1644 784 -8615 -8617 0
1644 784 -8614 -8618 0
c (((SATLiteral(786) + aux1996 + aux1997)<=1)=tv=SATLiteral(1645))
-1645 8624 0
-1645 8620 8623 0
-1645 8621 0
-1645 -786 8623 0
-1645 -786 8620 0
-1645 -786 8621 0
1645 -8620 -8623 0
1645 786 -8621 -8623 0
1645 786 -8620 -8624 0
c (((SATLiteral(788) + aux1998 + aux1999)<=1)=tv=SATLiteral(1646))
-1646 8630 0
-1646 8626 8629 0
-1646 8627 0
-1646 -788 8629 0
-1646 -788 8626 0
-1646 -788 8627 0
1646 -8626 -8629 0
1646 788 -8627 -8629 0
1646 788 -8626 -8630 0
c (((SATLiteral(790) + aux2000 + aux2001)<=1)=tv=SATLiteral(1647))
-1647 8636 0
-1647 8632 8635 0
-1647 8633 0
-1647 -790 8635 0
-1647 -790 8632 0
-1647 -790 8633 0
1647 -8632 -8635 0
1647 790 -8633 -8635 0
1647 790 -8632 -8636 0
c (((SATLiteral(792) + aux2002 + aux2003)<=1)=tv=SATLiteral(1648))
-1648 8642 0
-1648 8638 8641 0
-1648 8639 0
-1648 -792 8641 0
-1648 -792 8638 0
-1648 -792 8639 0
1648 -8638 -8641 0
1648 792 -8639 -8641 0
1648 792 -8638 -8642 0
c (((SATLiteral(794) + aux2004 + aux2005)<=1)=tv=SATLiteral(1649))
-1649 8648 0
-1649 8644 8647 0
-1649 8645 0
-1649 -794 8647 0
-1649 -794 8644 0
-1649 -794 8645 0
1649 -8644 -8647 0
1649 794 -8645 -8647 0
1649 794 -8644 -8648 0
c (((SATLiteral(796) + aux2006 + aux2007)<=1)=tv=SATLiteral(1650))
-1650 8654 0
-1650 8650 8653 0
-1650 8651 0
-1650 -796 8653 0
-1650 -796 8650 0
-1650 -796 8651 0
1650 -8650 -8653 0
1650 796 -8651 -8653 0
1650 796 -8650 -8654 0
c (((SATLiteral(-795) + aux2008 + aux2009)<=1)=tv=SATLiteral(1651))
-1651 8660 0
-1651 8656 8659 0
-1651 8657 0
-1651 795 8659 0
-1651 795 8656 0
-1651 795 8657 0
1651 -8656 -8659 0
1651 -795 -8657 -8659 0
1651 -795 -8656 -8660 0
c (((aux2010 + aux2011 + aux2012)<=1)=tv=SATLiteral(1652))
-1652 8669 0
-1652 8665 8668 0
-1652 8666 0
-1652 8662 8668 0
-1652 8662 8665 0
-1652 8662 8666 0
-1652 8663 0
-1652 8663 8665 0
-1652 8663 8666 0
1652 -8663 -8665 -8668 0
1652 -8662 -8666 -8668 0
1652 -8662 -8665 -8669 0
c (((aux2013 + aux2014 + aux2015)<=1)=tv=SATLiteral(1653))
-1653 8678 0
-1653 8674 8677 0
-1653 8675 0
-1653 8671 8677 0
-1653 8671 8674 0
-1653 8671 8675 0
-1653 8672 0
-1653 8672 8674 0
-1653 8672 8675 0
1653 -8672 -8674 -8677 0
1653 -8671 -8675 -8677 0
1653 -8671 -8674 -8678 0
c (((aux2016 + aux2017 + aux2018)<=1)=tv=SATLiteral(1654))
-1654 8687 0
-1654 8683 8686 0
-1654 8684 0
-1654 8680 8686 0
-1654 8680 8683 0
-1654 8680 8684 0
-1654 8681 0
-1654 8681 8683 0
-1654 8681 8684 0
1654 -8681 -8683 -8686 0
1654 -8680 -8684 -8686 0
1654 -8680 -8683 -8687 0
c (((aux2019 + aux2020 + aux2021)<=1)=tv=SATLiteral(1655))
-1655 8696 0
-1655 8692 8695 0
-1655 8693 0
-1655 8689 8695 0
-1655 8689 8692 0
-1655 8689 8693 0
-1655 8690 0
-1655 8690 8692 0
-1655 8690 8693 0
1655 -8690 -8692 -8695 0
1655 -8689 -8693 -8695 0
1655 -8689 -8692 -8696 0
c (((aux2022 + aux2023 + aux2024)<=1)=tv=SATLiteral(1656))
-1656 8705 0
-1656 8701 8704 0
-1656 8702 0
-1656 8698 8704 0
-1656 8698 8701 0
-1656 8698 8702 0
-1656 8699 0
-1656 8699 8701 0
-1656 8699 8702 0
1656 -8699 -8701 -8704 0
1656 -8698 -8702 -8704 0
1656 -8698 -8701 -8705 0
c (((aux2025 + aux2026 + aux2027)<=1)=tv=SATLiteral(1657))
-1657 8714 0
-1657 8710 8713 0
-1657 8711 0
-1657 8707 8713 0
-1657 8707 8710 0
-1657 8707 8711 0
-1657 8708 0
-1657 8708 8710 0
-1657 8708 8711 0
1657 -8708 -8710 -8713 0
1657 -8707 -8711 -8713 0
1657 -8707 -8710 -8714 0
c (((aux2028 + aux2029 + aux2030)<=1)=tv=SATLiteral(1658))
-1658 8723 0
-1658 8719 8722 0
-1658 8720 0
-1658 8716 8722 0
-1658 8716 8719 0
-1658 8716 8720 0
-1658 8717 0
-1658 8717 8719 0
-1658 8717 8720 0
1658 -8717 -8719 -8722 0
1658 -8716 -8720 -8722 0
1658 -8716 -8719 -8723 0
c (((aux2031 + aux2032 + aux2033)<=1)=tv=SATLiteral(1659))
-1659 8732 0
-1659 8728 8731 0
-1659 8729 0
-1659 8725 8731 0
-1659 8725 8728 0
-1659 8725 8729 0
-1659 8726 0
-1659 8726 8728 0
-1659 8726 8729 0
1659 -8726 -8728 -8731 0
1659 -8725 -8729 -8731 0
1659 -8725 -8728 -8732 0
c (((aux2034 + aux2035 + aux2036)<=1)=tv=SATLiteral(1660))
-1660 8741 0
-1660 8737 8740 0
-1660 8738 0
-1660 8734 8740 0
-1660 8734 8737 0
-1660 8734 8738 0
-1660 8735 0
-1660 8735 8737 0
-1660 8735 8738 0
1660 -8735 -8737 -8740 0
1660 -8734 -8738 -8740 0
1660 -8734 -8737 -8741 0
c (((aux2037 + SATLiteral(1142) + SATLiteral(1157))<=1)=tv=SATLiteral(1661))
-1661 8744 0
-1661 -1157 8743 0
-1661 -1142 8743 0
-1661 -1142 -1157 0
1661 1157 -8743 0
1661 1142 -8743 0
1661 1142 1157 -8744 0
c (((aux2038 + SATLiteral(1144) + SATLiteral(1159))<=1)=tv=SATLiteral(1662))
-1662 8747 0
-1662 -1159 8746 0
-1662 -1144 8746 0
-1662 -1144 -1159 0
1662 1159 -8746 0
1662 1144 -8746 0
1662 1144 1159 -8747 0
c (((aux2039 + SATLiteral(1146) + SATLiteral(1161))<=1)=tv=SATLiteral(1663))
-1663 8750 0
-1663 -1161 8749 0
-1663 -1146 8749 0
-1663 -1146 -1161 0
1663 1161 -8749 0
1663 1146 -8749 0
1663 1146 1161 -8750 0
c (((aux2040 + SATLiteral(1148) + SATLiteral(1163))<=1)=tv=SATLiteral(1664))
-1664 8753 0
-1664 -1163 8752 0
-1664 -1148 8752 0
-1664 -1148 -1163 0
1664 1163 -8752 0
1664 1148 -8752 0
1664 1148 1163 -8753 0
c (((aux2041 + SATLiteral(1150) + SATLiteral(1165))<=1)=tv=SATLiteral(1665))
-1665 8756 0
-1665 -1165 8755 0
-1665 -1150 8755 0
-1665 -1150 -1165 0
1665 1165 -8755 0
1665 1150 -8755 0
1665 1150 1165 -8756 0
c (((aux2042 + SATLiteral(1152) + SATLiteral(1167))<=1)=tv=SATLiteral(1666))
-1666 8759 0
-1666 -1167 8758 0
-1666 -1152 8758 0
-1666 -1152 -1167 0
1666 1167 -8758 0
1666 1152 -8758 0
1666 1152 1167 -8759 0
c (((aux2043 + SATLiteral(1154) + SATLiteral(1169))<=1)=tv=SATLiteral(1667))
-1667 8762 0
-1667 -1169 8761 0
-1667 -1154 8761 0
-1667 -1154 -1169 0
1667 1169 -8761 0
1667 1154 -8761 0
1667 1154 1169 -8762 0
c (((aux2044 + SATLiteral(1156) + SATLiteral(1171))<=1)=tv=SATLiteral(1668))
-1668 8765 0
-1668 -1171 8764 0
-1668 -1156 8764 0
-1668 -1156 -1171 0
1668 1171 -8764 0
1668 1156 -8764 0
1668 1156 1171 -8765 0
c (((aux2045 + SATLiteral(-1155) + SATLiteral(-1170))<=1)=tv=SATLiteral(1669))
-1669 8768 0
-1669 1170 8767 0
-1669 1155 8767 0
-1669 1155 1170 0
1669 -1170 -8767 0
1669 -1155 -8767 0
1669 -1155 -1170 -8768 0
c (((aux2046 + SATLiteral(1172) + SATLiteral(1187))<=1)=tv=SATLiteral(1670))
-1670 8771 0
-1670 -1187 8770 0
-1670 -1172 8770 0
-1670 -1172 -1187 0
1670 1187 -8770 0
1670 1172 -8770 0
1670 1172 1187 -8771 0
c (((aux2047 + SATLiteral(1174) + SATLiteral(1189))<=1)=tv=SATLiteral(1671))
-1671 8774 0
-1671 -1189 8773 0
-1671 -1174 8773 0
-1671 -1174 -1189 0
1671 1189 -8773 0
1671 1174 -8773 0
1671 1174 1189 -8774 0
c (((aux2048 + SATLiteral(1176) + SATLiteral(1191))<=1)=tv=SATLiteral(1672))
-1672 8777 0
-1672 -1191 8776 0
-1672 -1176 8776 0
-1672 -1176 -1191 0
1672 1191 -8776 0
1672 1176 -8776 0
1672 1176 1191 -8777 0
c (((aux2049 + SATLiteral(1178) + SATLiteral(1193))<=1)=tv=SATLiteral(1673))
-1673 8780 0
-1673 -1193 8779 0
-1673 -1178 8779 0
-1673 -1178 -1193 0
1673 1193 -8779 0
1673 1178 -8779 0
1673 1178 1193 -8780 0
c (((aux2050 + SATLiteral(1180) + SATLiteral(1195))<=1)=tv=SATLiteral(1674))
-1674 8783 0
-1674 -1195 8782 0
-1674 -1180 8782 0
-1674 -1180 -1195 0
1674 1195 -8782 0
1674 1180 -8782 0
1674 1180 1195 -8783 0
c (((aux2051 + SATLiteral(1182) + SATLiteral(1197))<=1)=tv=SATLiteral(1675))
-1675 8786 0
-1675 -1197 8785 0
-1675 -1182 8785 0
-1675 -1182 -1197 0
1675 1197 -8785 0
1675 1182 -8785 0
1675 1182 1197 -8786 0
c (((aux2052 + SATLiteral(1184) + SATLiteral(1199))<=1)=tv=SATLiteral(1676))
-1676 8789 0
-1676 -1199 8788 0
-1676 -1184 8788 0
-1676 -1184 -1199 0
1676 1199 -8788 0
1676 1184 -8788 0
1676 1184 1199 -8789 0
c (((aux2053 + SATLiteral(1186) + SATLiteral(1201))<=1)=tv=SATLiteral(1677))
-1677 8792 0
-1677 -1201 8791 0
-1677 -1186 8791 0
-1677 -1186 -1201 0
1677 1201 -8791 0
1677 1186 -8791 0
1677 1186 1201 -8792 0
c (((aux2054 + SATLiteral(-1185) + SATLiteral(-1200))<=1)=tv=SATLiteral(1678))
-1678 8795 0
-1678 1200 8794 0
-1678 1185 8794 0
-1678 1185 1200 0
1678 -1200 -8794 0
1678 -1185 -8794 0
1678 -1185 -1200 -8795 0
c (SATLiteral(1268) -> SATLiteral(1292))
-1268 1292 0
c (SATLiteral(1269) -> SATLiteral(1293))
-1269 1293 0
c (SATLiteral(1270) -> SATLiteral(1294))
-1270 1294 0
c (SATLiteral(1271) -> SATLiteral(1295))
-1271 1295 0
c (SATLiteral(1272) -> SATLiteral(1296))
-1272 1296 0
c (SATLiteral(1273) -> SATLiteral(1297))
-1273 1297 0
c (SATLiteral(1274) -> SATLiteral(1298))
-1274 1298 0
c (SATLiteral(1275) -> SATLiteral(1299))
-1275 1299 0
c (SATLiteral(1276) -> SATLiteral(1300))
-1276 1300 0
c (SATLiteral(1277) -> SATLiteral(1301))
-1277 1301 0
c (SATLiteral(1278) -> SATLiteral(1302))
-1278 1302 0
c (SATLiteral(1279) -> SATLiteral(1303))
-1279 1303 0
c (SATLiteral(1280) -> SATLiteral(1304))
-1280 1304 0
c (SATLiteral(1281) -> SATLiteral(1305))
-1281 1305 0
c (SATLiteral(1282) -> SATLiteral(1306))
-1282 1306 0
c (SATLiteral(1283) -> SATLiteral(1307))
-1283 1307 0
c (SATLiteral(1284) -> SATLiteral(1308))
-1284 1308 0
c (SATLiteral(1285) -> SATLiteral(1309))
-1285 1309 0
c (SATLiteral(1286) -> SATLiteral(1310))
-1286 1310 0
c (SATLiteral(1287) -> SATLiteral(1311))
-1287 1311 0
c (SATLiteral(1288) -> SATLiteral(1312))
-1288 1312 0
c (SATLiteral(1289) -> SATLiteral(1313))
-1289 1313 0
c (SATLiteral(1290) -> SATLiteral(1314))
-1290 1314 0
c (SATLiteral(1291) -> SATLiteral(1315))
-1291 1315 0
c (SATLiteral(1245) -> SATLiteral(1316))
-1245 1316 0
c (SATLiteral(1246) -> SATLiteral(1317))
-1246 1317 0
c (SATLiteral(1248) -> SATLiteral(1318))
-1248 1318 0
c (SATLiteral(1250) -> SATLiteral(1319))
-1250 1319 0
c (SATLiteral(1254) -> SATLiteral(1320))
-1254 1320 0
c (SATLiteral(1255) -> SATLiteral(1321))
-1255 1321 0
c (SATLiteral(1256) -> SATLiteral(1322))
-1256 1322 0
c (SATLiteral(1258) -> SATLiteral(1323))
-1258 1323 0
c (SATLiteral(1261) -> SATLiteral(1324))
-1261 1324 0
c (SATLiteral(1264) -> SATLiteral(1325))
-1264 1325 0
c (SATLiteral(1265) -> SATLiteral(1326))
-1265 1326 0
c (SATLiteral(1267) -> SATLiteral(1327))
-1267 1327 0
c (SATLiteral(1217) -> SATLiteral(1328))
-1217 1328 0
c (SATLiteral(1217) -> SATLiteral(1329))
-1217 1329 0
c (SATLiteral(1217) -> SATLiteral(1330))
-1217 1330 0
c (SATLiteral(1217) -> SATLiteral(1331))
-1217 1331 0
c (SATLiteral(1217) -> SATLiteral(1332))
-1217 1332 0
c (SATLiteral(1217) -> SATLiteral(1333))
-1217 1333 0
c (SATLiteral(1217) -> SATLiteral(1334))
-1217 1334 0
c (SATLiteral(1217) -> SATLiteral(1335))
-1217 1335 0
c (SATLiteral(1217) -> SATLiteral(1336))
-1217 1336 0
c (SATLiteral(1218) -> SATLiteral(1337))
-1218 1337 0
c (SATLiteral(1218) -> SATLiteral(1338))
-1218 1338 0
c (SATLiteral(1218) -> SATLiteral(1339))
-1218 1339 0
c (SATLiteral(1218) -> SATLiteral(1340))
-1218 1340 0
c (SATLiteral(1218) -> SATLiteral(1341))
-1218 1341 0
c (SATLiteral(1218) -> SATLiteral(1342))
-1218 1342 0
c (SATLiteral(1218) -> SATLiteral(1343))
-1218 1343 0
c (SATLiteral(1218) -> SATLiteral(1344))
-1218 1344 0
c (SATLiteral(1218) -> SATLiteral(1345))
-1218 1345 0
c (SATLiteral(1219) -> SATLiteral(1346))
-1219 1346 0
c (SATLiteral(1219) -> SATLiteral(1347))
-1219 1347 0
c (SATLiteral(1219) -> SATLiteral(1348))
-1219 1348 0
c (SATLiteral(1219) -> SATLiteral(1349))
-1219 1349 0
c (SATLiteral(1219) -> SATLiteral(1350))
-1219 1350 0
c (SATLiteral(1219) -> SATLiteral(1351))
-1219 1351 0
c (SATLiteral(1219) -> SATLiteral(1352))
-1219 1352 0
c (SATLiteral(1219) -> SATLiteral(1353))
-1219 1353 0
c (SATLiteral(1219) -> SATLiteral(1354))
-1219 1354 0
c (SATLiteral(1220) -> SATLiteral(1355))
-1220 1355 0
c (SATLiteral(1220) -> SATLiteral(1356))
-1220 1356 0
c (SATLiteral(1220) -> SATLiteral(1357))
-1220 1357 0
c (SATLiteral(1220) -> SATLiteral(1358))
-1220 1358 0
c (SATLiteral(1220) -> SATLiteral(1359))
-1220 1359 0
c (SATLiteral(1220) -> SATLiteral(1360))
-1220 1360 0
c (SATLiteral(1220) -> SATLiteral(1361))
-1220 1361 0
c (SATLiteral(1220) -> SATLiteral(1362))
-1220 1362 0
c (SATLiteral(1220) -> SATLiteral(1363))
-1220 1363 0
c (SATLiteral(1221) -> SATLiteral(1364))
-1221 1364 0
c (SATLiteral(1221) -> SATLiteral(1365))
-1221 1365 0
c (SATLiteral(1221) -> SATLiteral(1366))
-1221 1366 0
c (SATLiteral(1221) -> SATLiteral(1367))
-1221 1367 0
c (SATLiteral(1221) -> SATLiteral(1368))
-1221 1368 0
c (SATLiteral(1221) -> SATLiteral(1369))
-1221 1369 0
c (SATLiteral(1221) -> SATLiteral(1370))
-1221 1370 0
c (SATLiteral(1221) -> SATLiteral(1371))
-1221 1371 0
c (SATLiteral(1221) -> SATLiteral(1372))
-1221 1372 0
c (SATLiteral(1222) -> SATLiteral(1373))
-1222 1373 0
c (SATLiteral(1222) -> SATLiteral(1374))
-1222 1374 0
c (SATLiteral(1222) -> SATLiteral(1375))
-1222 1375 0
c (SATLiteral(1222) -> SATLiteral(1376))
-1222 1376 0
c (SATLiteral(1222) -> SATLiteral(1377))
-1222 1377 0
c (SATLiteral(1222) -> SATLiteral(1378))
-1222 1378 0
c (SATLiteral(1222) -> SATLiteral(1379))
-1222 1379 0
c (SATLiteral(1222) -> SATLiteral(1380))
-1222 1380 0
c (SATLiteral(1222) -> SATLiteral(1381))
-1222 1381 0
c (SATLiteral(1223) -> SATLiteral(1382))
-1223 1382 0
c (SATLiteral(1223) -> SATLiteral(1383))
-1223 1383 0
c (SATLiteral(1223) -> SATLiteral(1384))
-1223 1384 0
c (SATLiteral(1223) -> SATLiteral(1385))
-1223 1385 0
c (SATLiteral(1223) -> SATLiteral(1386))
-1223 1386 0
c (SATLiteral(1223) -> SATLiteral(1387))
-1223 1387 0
c (SATLiteral(1223) -> SATLiteral(1388))
-1223 1388 0
c (SATLiteral(1223) -> SATLiteral(1389))
-1223 1389 0
c (SATLiteral(1223) -> SATLiteral(1390))
-1223 1390 0
c (SATLiteral(1224) -> SATLiteral(1391))
-1224 1391 0
c (SATLiteral(1224) -> SATLiteral(1392))
-1224 1392 0
c (SATLiteral(1224) -> SATLiteral(1393))
-1224 1393 0
c (SATLiteral(1224) -> SATLiteral(1394))
-1224 1394 0
c (SATLiteral(1224) -> SATLiteral(1395))
-1224 1395 0
c (SATLiteral(1224) -> SATLiteral(1396))
-1224 1396 0
c (SATLiteral(1224) -> SATLiteral(1397))
-1224 1397 0
c (SATLiteral(1224) -> SATLiteral(1398))
-1224 1398 0
c (SATLiteral(1224) -> SATLiteral(1399))
-1224 1399 0
c (SATLiteral(1225) -> SATLiteral(1400))
-1225 1400 0
c (SATLiteral(1225) -> SATLiteral(1401))
-1225 1401 0
c (SATLiteral(1225) -> SATLiteral(1402))
-1225 1402 0
c (SATLiteral(1225) -> SATLiteral(1403))
-1225 1403 0
c (SATLiteral(1225) -> SATLiteral(1404))
-1225 1404 0
c (SATLiteral(1225) -> SATLiteral(1405))
-1225 1405 0
c (SATLiteral(1225) -> SATLiteral(1406))
-1225 1406 0
c (SATLiteral(1225) -> SATLiteral(1407))
-1225 1407 0
c (SATLiteral(1225) -> SATLiteral(1408))
-1225 1408 0
c (SATLiteral(1226) -> SATLiteral(1409))
-1226 1409 0
c (SATLiteral(1226) -> SATLiteral(1410))
-1226 1410 0
c (SATLiteral(1226) -> SATLiteral(1411))
-1226 1411 0
c (SATLiteral(1226) -> SATLiteral(1412))
-1226 1412 0
c (SATLiteral(1226) -> SATLiteral(1413))
-1226 1413 0
c (SATLiteral(1226) -> SATLiteral(1414))
-1226 1414 0
c (SATLiteral(1226) -> SATLiteral(1415))
-1226 1415 0
c (SATLiteral(1226) -> SATLiteral(1416))
-1226 1416 0
c (SATLiteral(1226) -> SATLiteral(1417))
-1226 1417 0
c (SATLiteral(1227) -> SATLiteral(1418))
-1227 1418 0
c (SATLiteral(1227) -> SATLiteral(1419))
-1227 1419 0
c (SATLiteral(1227) -> SATLiteral(1420))
-1227 1420 0
c (SATLiteral(1227) -> SATLiteral(1421))
-1227 1421 0
c (SATLiteral(1227) -> SATLiteral(1422))
-1227 1422 0
c (SATLiteral(1227) -> SATLiteral(1423))
-1227 1423 0
c (SATLiteral(1227) -> SATLiteral(1424))
-1227 1424 0
c (SATLiteral(1227) -> SATLiteral(1425))
-1227 1425 0
c (SATLiteral(1227) -> SATLiteral(1426))
-1227 1426 0
c (SATLiteral(1228) -> SATLiteral(1427))
-1228 1427 0
c (SATLiteral(1228) -> SATLiteral(1428))
-1228 1428 0
c (SATLiteral(1228) -> SATLiteral(1429))
-1228 1429 0
c (SATLiteral(1228) -> SATLiteral(1430))
-1228 1430 0
c (SATLiteral(1228) -> SATLiteral(1431))
-1228 1431 0
c (SATLiteral(1228) -> SATLiteral(1432))
-1228 1432 0
c (SATLiteral(1228) -> SATLiteral(1433))
-1228 1433 0
c (SATLiteral(1228) -> SATLiteral(1434))
-1228 1434 0
c (SATLiteral(1228) -> SATLiteral(1435))
-1228 1435 0
c (SATLiteral(1229) -> SATLiteral(1436))
-1229 1436 0
c (SATLiteral(1229) -> SATLiteral(1437))
-1229 1437 0
c (SATLiteral(1229) -> SATLiteral(1438))
-1229 1438 0
c (SATLiteral(1229) -> SATLiteral(1439))
-1229 1439 0
c (SATLiteral(1229) -> SATLiteral(1440))
-1229 1440 0
c (SATLiteral(1229) -> SATLiteral(1441))
-1229 1441 0
c (SATLiteral(1229) -> SATLiteral(1442))
-1229 1442 0
c (SATLiteral(1229) -> SATLiteral(1443))
-1229 1443 0
c (SATLiteral(1229) -> SATLiteral(1444))
-1229 1444 0
c (SATLiteral(1230) -> SATLiteral(1445))
-1230 1445 0
c (SATLiteral(1230) -> SATLiteral(1446))
-1230 1446 0
c (SATLiteral(1230) -> SATLiteral(1447))
-1230 1447 0
c (SATLiteral(1230) -> SATLiteral(1448))
-1230 1448 0
c (SATLiteral(1230) -> SATLiteral(1449))
-1230 1449 0
c (SATLiteral(1230) -> SATLiteral(1450))
-1230 1450 0
c (SATLiteral(1230) -> SATLiteral(1451))
-1230 1451 0
c (SATLiteral(1230) -> SATLiteral(1452))
-1230 1452 0
c (SATLiteral(1230) -> SATLiteral(1453))
-1230 1453 0
c (SATLiteral(1231) -> SATLiteral(1454))
-1231 1454 0
c (SATLiteral(1231) -> SATLiteral(1455))
-1231 1455 0
c (SATLiteral(1231) -> SATLiteral(1456))
-1231 1456 0
c (SATLiteral(1231) -> SATLiteral(1457))
-1231 1457 0
c (SATLiteral(1231) -> SATLiteral(1458))
-1231 1458 0
c (SATLiteral(1231) -> SATLiteral(1459))
-1231 1459 0
c (SATLiteral(1231) -> SATLiteral(1460))
-1231 1460 0
c (SATLiteral(1231) -> SATLiteral(1461))
-1231 1461 0
c (SATLiteral(1231) -> SATLiteral(1462))
-1231 1462 0
c (SATLiteral(1232) -> SATLiteral(1463))
-1232 1463 0
c (SATLiteral(1232) -> SATLiteral(1464))
-1232 1464 0
c (SATLiteral(1232) -> SATLiteral(1465))
-1232 1465 0
c (SATLiteral(1232) -> SATLiteral(1466))
-1232 1466 0
c (SATLiteral(1232) -> SATLiteral(1467))
-1232 1467 0
c (SATLiteral(1232) -> SATLiteral(1468))
-1232 1468 0
c (SATLiteral(1232) -> SATLiteral(1469))
-1232 1469 0
c (SATLiteral(1232) -> SATLiteral(1470))
-1232 1470 0
c (SATLiteral(1232) -> SATLiteral(1471))
-1232 1471 0
c (SATLiteral(1233) -> SATLiteral(1472))
-1233 1472 0
c (SATLiteral(1233) -> SATLiteral(1473))
-1233 1473 0
c (SATLiteral(1233) -> SATLiteral(1474))
-1233 1474 0
c (SATLiteral(1233) -> SATLiteral(1475))
-1233 1475 0
c (SATLiteral(1233) -> SATLiteral(1476))
-1233 1476 0
c (SATLiteral(1233) -> SATLiteral(1477))
-1233 1477 0
c (SATLiteral(1233) -> SATLiteral(1478))
-1233 1478 0
c (SATLiteral(1233) -> SATLiteral(1479))
-1233 1479 0
c (SATLiteral(1233) -> SATLiteral(1480))
-1233 1480 0
c (SATLiteral(1234) -> SATLiteral(1481))
-1234 1481 0
c (SATLiteral(1234) -> SATLiteral(1482))
-1234 1482 0
c (SATLiteral(1234) -> SATLiteral(1483))
-1234 1483 0
c (SATLiteral(1234) -> SATLiteral(1484))
-1234 1484 0
c (SATLiteral(1234) -> SATLiteral(1485))
-1234 1485 0
c (SATLiteral(1234) -> SATLiteral(1486))
-1234 1486 0
c (SATLiteral(1234) -> SATLiteral(1487))
-1234 1487 0
c (SATLiteral(1234) -> SATLiteral(1488))
-1234 1488 0
c (SATLiteral(1234) -> SATLiteral(1489))
-1234 1489 0
c (SATLiteral(1235) -> SATLiteral(1490))
-1235 1490 0
c (SATLiteral(1235) -> SATLiteral(1491))
-1235 1491 0
c (SATLiteral(1235) -> SATLiteral(1492))
-1235 1492 0
c (SATLiteral(1235) -> SATLiteral(1493))
-1235 1493 0
c (SATLiteral(1235) -> SATLiteral(1494))
-1235 1494 0
c (SATLiteral(1235) -> SATLiteral(1495))
-1235 1495 0
c (SATLiteral(1235) -> SATLiteral(1496))
-1235 1496 0
c (SATLiteral(1235) -> SATLiteral(1497))
-1235 1497 0
c (SATLiteral(1235) -> SATLiteral(1498))
-1235 1498 0
c (SATLiteral(1236) -> SATLiteral(1499))
-1236 1499 0
c (SATLiteral(1236) -> SATLiteral(1500))
-1236 1500 0
c (SATLiteral(1236) -> SATLiteral(1501))
-1236 1501 0
c (SATLiteral(1236) -> SATLiteral(1502))
-1236 1502 0
c (SATLiteral(1236) -> SATLiteral(1503))
-1236 1503 0
c (SATLiteral(1236) -> SATLiteral(1504))
-1236 1504 0
c (SATLiteral(1236) -> SATLiteral(1505))
-1236 1505 0
c (SATLiteral(1236) -> SATLiteral(1506))
-1236 1506 0
c (SATLiteral(1236) -> SATLiteral(1507))
-1236 1507 0
c (SATLiteral(1237) -> SATLiteral(1508))
-1237 1508 0
c (SATLiteral(1237) -> SATLiteral(1509))
-1237 1509 0
c (SATLiteral(1237) -> SATLiteral(1510))
-1237 1510 0
c (SATLiteral(1237) -> SATLiteral(1511))
-1237 1511 0
c (SATLiteral(1237) -> SATLiteral(1512))
-1237 1512 0
c (SATLiteral(1237) -> SATLiteral(1513))
-1237 1513 0
c (SATLiteral(1237) -> SATLiteral(1514))
-1237 1514 0
c (SATLiteral(1237) -> SATLiteral(1515))
-1237 1515 0
c (SATLiteral(1237) -> SATLiteral(1516))
-1237 1516 0
c (SATLiteral(1238) -> SATLiteral(1517))
-1238 1517 0
c (SATLiteral(1238) -> SATLiteral(1518))
-1238 1518 0
c (SATLiteral(1238) -> SATLiteral(1519))
-1238 1519 0
c (SATLiteral(1238) -> SATLiteral(1520))
-1238 1520 0
c (SATLiteral(1238) -> SATLiteral(1521))
-1238 1521 0
c (SATLiteral(1238) -> SATLiteral(1522))
-1238 1522 0
c (SATLiteral(1238) -> SATLiteral(1523))
-1238 1523 0
c (SATLiteral(1238) -> SATLiteral(1524))
-1238 1524 0
c (SATLiteral(1238) -> SATLiteral(1525))
-1238 1525 0
c (SATLiteral(1239) -> SATLiteral(1526))
-1239 1526 0
c (SATLiteral(1239) -> SATLiteral(1527))
-1239 1527 0
c (SATLiteral(1239) -> SATLiteral(1528))
-1239 1528 0
c (SATLiteral(1239) -> SATLiteral(1529))
-1239 1529 0
c (SATLiteral(1239) -> SATLiteral(1530))
-1239 1530 0
c (SATLiteral(1239) -> SATLiteral(1531))
-1239 1531 0
c (SATLiteral(1239) -> SATLiteral(1532))
-1239 1532 0
c (SATLiteral(1239) -> SATLiteral(1533))
-1239 1533 0
c (SATLiteral(1239) -> SATLiteral(1534))
-1239 1534 0
c (SATLiteral(1240) -> SATLiteral(1535))
-1240 1535 0
c (SATLiteral(1240) -> SATLiteral(1536))
-1240 1536 0
c (SATLiteral(1240) -> SATLiteral(1537))
-1240 1537 0
c (SATLiteral(1240) -> SATLiteral(1538))
-1240 1538 0
c (SATLiteral(1240) -> SATLiteral(1539))
-1240 1539 0
c (SATLiteral(1240) -> SATLiteral(1540))
-1240 1540 0
c (SATLiteral(1240) -> SATLiteral(1541))
-1240 1541 0
c (SATLiteral(1240) -> SATLiteral(1542))
-1240 1542 0
c (SATLiteral(1240) -> SATLiteral(1543))
-1240 1543 0
c (SATLiteral(1241) -> SATLiteral(1544))
-1241 1544 0
c (SATLiteral(1241) -> SATLiteral(1545))
-1241 1545 0
c (SATLiteral(1241) -> SATLiteral(1546))
-1241 1546 0
c (SATLiteral(1241) -> SATLiteral(1547))
-1241 1547 0
c (SATLiteral(1241) -> SATLiteral(1548))
-1241 1548 0
c (SATLiteral(1241) -> SATLiteral(1549))
-1241 1549 0
c (SATLiteral(1241) -> SATLiteral(1550))
-1241 1550 0
c (SATLiteral(1241) -> SATLiteral(1551))
-1241 1551 0
c (SATLiteral(1241) -> SATLiteral(1552))
-1241 1552 0
c (SATLiteral(1242) -> SATLiteral(1553))
-1242 1553 0
c (SATLiteral(1242) -> SATLiteral(1554))
-1242 1554 0
c (SATLiteral(1242) -> SATLiteral(1555))
-1242 1555 0
c (SATLiteral(1242) -> SATLiteral(1556))
-1242 1556 0
c (SATLiteral(1242) -> SATLiteral(1557))
-1242 1557 0
c (SATLiteral(1242) -> SATLiteral(1558))
-1242 1558 0
c (SATLiteral(1242) -> SATLiteral(1559))
-1242 1559 0
c (SATLiteral(1242) -> SATLiteral(1560))
-1242 1560 0
c (SATLiteral(1242) -> SATLiteral(1561))
-1242 1561 0
c (SATLiteral(1243) -> SATLiteral(1562))
-1243 1562 0
c (SATLiteral(1243) -> SATLiteral(1563))
-1243 1563 0
c (SATLiteral(1243) -> SATLiteral(1564))
-1243 1564 0
c (SATLiteral(1243) -> SATLiteral(1565))
-1243 1565 0
c (SATLiteral(1243) -> SATLiteral(1566))
-1243 1566 0
c (SATLiteral(1243) -> SATLiteral(1567))
-1243 1567 0
c (SATLiteral(1243) -> SATLiteral(1568))
-1243 1568 0
c (SATLiteral(1243) -> SATLiteral(1569))
-1243 1569 0
c (SATLiteral(1243) -> SATLiteral(1570))
-1243 1570 0
c (SATLiteral(1244) -> SATLiteral(1571))
-1244 1571 0
c (SATLiteral(1244) -> SATLiteral(1572))
-1244 1572 0
c (SATLiteral(1244) -> SATLiteral(1573))
-1244 1573 0
c (SATLiteral(1244) -> SATLiteral(1574))
-1244 1574 0
c (SATLiteral(1244) -> SATLiteral(1575))
-1244 1575 0
c (SATLiteral(1244) -> SATLiteral(1576))
-1244 1576 0
c (SATLiteral(1244) -> SATLiteral(1577))
-1244 1577 0
c (SATLiteral(1244) -> SATLiteral(1578))
-1244 1578 0
c (SATLiteral(1244) -> SATLiteral(1579))
-1244 1579 0
c (SATLiteral(1247) -> SATLiteral(1580))
-1247 1580 0
c (SATLiteral(1247) -> SATLiteral(1581))
-1247 1581 0
c (SATLiteral(1247) -> SATLiteral(1582))
-1247 1582 0
c (SATLiteral(1247) -> SATLiteral(1583))
-1247 1583 0
c (SATLiteral(1247) -> SATLiteral(1584))
-1247 1584 0
c (SATLiteral(1247) -> SATLiteral(1585))
-1247 1585 0
c (SATLiteral(1247) -> SATLiteral(1586))
-1247 1586 0
c (SATLiteral(1247) -> SATLiteral(1587))
-1247 1587 0
c (SATLiteral(1247) -> SATLiteral(1588))
-1247 1588 0
c (SATLiteral(1249) -> SATLiteral(1589))
-1249 1589 0
c (SATLiteral(1249) -> SATLiteral(1590))
-1249 1590 0
c (SATLiteral(1249) -> SATLiteral(1591))
-1249 1591 0
c (SATLiteral(1249) -> SATLiteral(1592))
-1249 1592 0
c (SATLiteral(1249) -> SATLiteral(1593))
-1249 1593 0
c (SATLiteral(1249) -> SATLiteral(1594))
-1249 1594 0
c (SATLiteral(1249) -> SATLiteral(1595))
-1249 1595 0
c (SATLiteral(1249) -> SATLiteral(1596))
-1249 1596 0
c (SATLiteral(1249) -> SATLiteral(1597))
-1249 1597 0
c (SATLiteral(1251) -> SATLiteral(1598))
-1251 1598 0
c (SATLiteral(1251) -> SATLiteral(1599))
-1251 1599 0
c (SATLiteral(1251) -> SATLiteral(1600))
-1251 1600 0
c (SATLiteral(1251) -> SATLiteral(1601))
-1251 1601 0
c (SATLiteral(1251) -> SATLiteral(1602))
-1251 1602 0
c (SATLiteral(1251) -> SATLiteral(1603))
-1251 1603 0
c (SATLiteral(1251) -> SATLiteral(1604))
-1251 1604 0
c (SATLiteral(1251) -> SATLiteral(1605))
-1251 1605 0
c (SATLiteral(1251) -> SATLiteral(1606))
-1251 1606 0
c (SATLiteral(1252) -> SATLiteral(1607))
-1252 1607 0
c (SATLiteral(1252) -> SATLiteral(1608))
-1252 1608 0
c (SATLiteral(1252) -> SATLiteral(1609))
-1252 1609 0
c (SATLiteral(1252) -> SATLiteral(1610))
-1252 1610 0
c (SATLiteral(1252) -> SATLiteral(1611))
-1252 1611 0
c (SATLiteral(1252) -> SATLiteral(1612))
-1252 1612 0
c (SATLiteral(1252) -> SATLiteral(1613))
-1252 1613 0
c (SATLiteral(1252) -> SATLiteral(1614))
-1252 1614 0
c (SATLiteral(1252) -> SATLiteral(1615))
-1252 1615 0
c (SATLiteral(1253) -> SATLiteral(1616))
-1253 1616 0
c (SATLiteral(1253) -> SATLiteral(1617))
-1253 1617 0
c (SATLiteral(1253) -> SATLiteral(1618))
-1253 1618 0
c (SATLiteral(1253) -> SATLiteral(1619))
-1253 1619 0
c (SATLiteral(1253) -> SATLiteral(1620))
-1253 1620 0
c (SATLiteral(1253) -> SATLiteral(1621))
-1253 1621 0
c (SATLiteral(1253) -> SATLiteral(1622))
-1253 1622 0
c (SATLiteral(1253) -> SATLiteral(1623))
-1253 1623 0
c (SATLiteral(1253) -> SATLiteral(1624))
-1253 1624 0
c (SATLiteral(1257) -> SATLiteral(1625))
-1257 1625 0
c (SATLiteral(1257) -> SATLiteral(1626))
-1257 1626 0
c (SATLiteral(1257) -> SATLiteral(1627))
-1257 1627 0
c (SATLiteral(1257) -> SATLiteral(1628))
-1257 1628 0
c (SATLiteral(1257) -> SATLiteral(1629))
-1257 1629 0
c (SATLiteral(1257) -> SATLiteral(1630))
-1257 1630 0
c (SATLiteral(1257) -> SATLiteral(1631))
-1257 1631 0
c (SATLiteral(1257) -> SATLiteral(1632))
-1257 1632 0
c (SATLiteral(1257) -> SATLiteral(1633))
-1257 1633 0
c (SATLiteral(1259) -> SATLiteral(1634))
-1259 1634 0
c (SATLiteral(1259) -> SATLiteral(1635))
-1259 1635 0
c (SATLiteral(1259) -> SATLiteral(1636))
-1259 1636 0
c (SATLiteral(1259) -> SATLiteral(1637))
-1259 1637 0
c (SATLiteral(1259) -> SATLiteral(1638))
-1259 1638 0
c (SATLiteral(1259) -> SATLiteral(1639))
-1259 1639 0
c (SATLiteral(1259) -> SATLiteral(1640))
-1259 1640 0
c (SATLiteral(1259) -> SATLiteral(1641))
-1259 1641 0
c (SATLiteral(1259) -> SATLiteral(1642))
-1259 1642 0
c (SATLiteral(1260) -> SATLiteral(1643))
-1260 1643 0
c (SATLiteral(1260) -> SATLiteral(1644))
-1260 1644 0
c (SATLiteral(1260) -> SATLiteral(1645))
-1260 1645 0
c (SATLiteral(1260) -> SATLiteral(1646))
-1260 1646 0
c (SATLiteral(1260) -> SATLiteral(1647))
-1260 1647 0
c (SATLiteral(1260) -> SATLiteral(1648))
-1260 1648 0
c (SATLiteral(1260) -> SATLiteral(1649))
-1260 1649 0
c (SATLiteral(1260) -> SATLiteral(1650))
-1260 1650 0
c (SATLiteral(1260) -> SATLiteral(1651))
-1260 1651 0
c (SATLiteral(1262) -> SATLiteral(1652))
-1262 1652 0
c (SATLiteral(1262) -> SATLiteral(1653))
-1262 1653 0
c (SATLiteral(1262) -> SATLiteral(1654))
-1262 1654 0
c (SATLiteral(1262) -> SATLiteral(1655))
-1262 1655 0
c (SATLiteral(1262) -> SATLiteral(1656))
-1262 1656 0
c (SATLiteral(1262) -> SATLiteral(1657))
-1262 1657 0
c (SATLiteral(1262) -> SATLiteral(1658))
-1262 1658 0
c (SATLiteral(1262) -> SATLiteral(1659))
-1262 1659 0
c (SATLiteral(1262) -> SATLiteral(1660))
-1262 1660 0
c (SATLiteral(1263) -> SATLiteral(1661))
-1263 1661 0
c (SATLiteral(1263) -> SATLiteral(1662))
-1263 1662 0
c (SATLiteral(1263) -> SATLiteral(1663))
-1263 1663 0
c (SATLiteral(1263) -> SATLiteral(1664))
-1263 1664 0
c (SATLiteral(1263) -> SATLiteral(1665))
-1263 1665 0
c (SATLiteral(1263) -> SATLiteral(1666))
-1263 1666 0
c (SATLiteral(1263) -> SATLiteral(1667))
-1263 1667 0
c (SATLiteral(1263) -> SATLiteral(1668))
-1263 1668 0
c (SATLiteral(1263) -> SATLiteral(1669))
-1263 1669 0
c (SATLiteral(1266) -> SATLiteral(1670))
-1266 1670 0
c (SATLiteral(1266) -> SATLiteral(1671))
-1266 1671 0
c (SATLiteral(1266) -> SATLiteral(1672))
-1266 1672 0
c (SATLiteral(1266) -> SATLiteral(1673))
-1266 1673 0
c (SATLiteral(1266) -> SATLiteral(1674))
-1266 1674 0
c (SATLiteral(1266) -> SATLiteral(1675))
-1266 1675 0
c (SATLiteral(1266) -> SATLiteral(1676))
-1266 1676 0
c (SATLiteral(1266) -> SATLiteral(1677))
-1266 1677 0
c (SATLiteral(1266) -> SATLiteral(1678))
-1266 1678 0
c (( - aux387 + shift(x_00001_00002, -1) + shift(x_00002_00001, -1))<=0)
137 -1679 0
138 -1680 0
140 -1682 0
142 -1684 0
144 -1686 0
146 -1688 0
148 -1690 0
150 -1692 0
17 -1679 0
17 137 -1680 0
17 138 -1682 0
17 140 -1684 0
17 142 -1686 0
17 144 -1688 0
17 146 -1690 0
17 148 -1692 0
17 150 -1694 0
18 -1680 0
18 137 -1682 0
18 138 -1684 0
18 140 -1686 0
18 142 -1688 0
18 144 -1690 0
18 146 -1692 0
18 148 -1694 0
18 150 -1696 0
20 -1682 0
20 137 -1684 0
20 138 -1686 0
20 140 -1688 0
20 142 -1690 0
20 144 -1692 0
20 146 -1694 0
20 148 -1696 0
20 150 -1698 0
22 -1684 0
22 137 -1686 0
22 138 -1688 0
22 140 -1690 0
22 142 -1692 0
22 144 -1694 0
22 146 -1696 0
22 148 -1698 0
22 150 -1700 0
24 -1686 0
24 137 -1688 0
24 138 -1690 0
24 140 -1692 0
24 142 -1694 0
24 144 -1696 0
24 146 -1698 0
24 148 -1700 0
24 150 -1702 0
26 -1688 0
26 137 -1690 0
26 138 -1692 0
26 140 -1694 0
26 142 -1696 0
26 144 -1698 0
26 146 -1700 0
26 148 -1702 0
26 150 -1704 0
28 -1690 0
28 137 -1692 0
28 138 -1694 0
28 140 -1696 0
28 142 -1698 0
28 144 -1700 0
28 146 -1702 0
28 148 -1704 0
28 150 -1706 0
30 -1692 0
30 137 -1694 0
30 138 -1696 0
30 140 -1698 0
30 142 -1700 0
30 144 -1702 0
30 146 -1704 0
30 148 -1706 0
30 150 -1708 0
c (0<=( - aux387 + shift(x_00001_00002, -1) + shift(x_00002_00001, -1)))
-150 1708 0
-148 1706 0
-146 1704 0
-144 1702 0
-142 1700 0
-140 1698 0
-138 1696 0
-137 1694 0
-30 1708 0
-30 -150 1706 0
-30 -148 1704 0
-30 -146 1702 0
-30 -144 1700 0
-30 -142 1698 0
-30 -140 1696 0
-30 -138 1694 0
-30 -137 1692 0
-28 1706 0
-28 -150 1704 0
-28 -148 1702 0
-28 -146 1700 0
-28 -144 1698 0
-28 -142 1696 0
-28 -140 1694 0
-28 -138 1692 0
-28 -137 1690 0
-26 1704 0
-26 -150 1702 0
-26 -148 1700 0
-26 -146 1698 0
-26 -144 1696 0
-26 -142 1694 0
-26 -140 1692 0
-26 -138 1690 0
-26 -137 1688 0
-24 1702 0
-24 -150 1700 0
-24 -148 1698 0
-24 -146 1696 0
-24 -144 1694 0
-24 -142 1692 0
-24 -140 1690 0
-24 -138 1688 0
-24 -137 1686 0
-22 1700 0
-22 -150 1698 0
-22 -148 1696 0
-22 -146 1694 0
-22 -144 1692 0
-22 -142 1690 0
-22 -140 1688 0
-22 -138 1686 0
-22 -137 1684 0
-20 1698 0
-20 -150 1696 0
-20 -148 1694 0
-20 -146 1692 0
-20 -144 1690 0
-20 -142 1688 0
-20 -140 1686 0
-20 -138 1684 0
-20 -137 1682 0
-18 1696 0
-18 -150 1694 0
-18 -148 1692 0
-18 -146 1690 0
-18 -144 1688 0
-18 -142 1686 0
-18 -140 1684 0
-18 -138 1682 0
-18 -137 1680 0
-17 1694 0
-17 -150 1692 0
-17 -148 1690 0
-17 -146 1688 0
-17 -144 1686 0
-17 -142 1684 0
-17 -140 1682 0
-17 -138 1680 0
-17 -137 1679 0
c (( - aux397 + shift(x_00005_00001, -1) + shift(x_00004_00001, -1))<=0)
407 -2021 0
408 -2022 0
410 -2024 0
412 -2026 0
414 -2028 0
416 -2030 0
418 -2032 0
420 -2034 0
542 -2021 0
542 407 -2022 0
542 408 -2024 0
542 410 -2026 0
542 412 -2028 0
542 414 -2030 0
542 416 -2032 0
542 418 -2034 0
542 420 -2036 0
543 -2022 0
543 407 -2024 0
543 408 -2026 0
543 410 -2028 0
543 412 -2030 0
543 414 -2032 0
543 416 -2034 0
543 418 -2036 0
543 420 -2038 0
545 -2024 0
545 407 -2026 0
545 408 -2028 0
545 410 -2030 0
545 412 -2032 0
545 414 -2034 0
545 416 -2036 0
545 418 -2038 0
545 420 -2040 0
547 -2026 0
547 407 -2028 0
547 408 -2030 0
547 410 -2032 0
547 412 -2034 0
547 414 -2036 0
547 416 -2038 0
547 418 -2040 0
547 420 -2042 0
549 -2028 0
549 407 -2030 0
549 408 -2032 0
549 410 -2034 0
549 412 -2036 0
549 414 -2038 0
549 416 -2040 0
549 418 -2042 0
549 420 -2044 0
551 -2030 0
551 407 -2032 0
551 408 -2034 0
551 410 -2036 0
551 412 -2038 0
551 414 -2040 0
551 416 -2042 0
551 418 -2044 0
551 420 -2046 0
553 -2032 0
553 407 -2034 0
553 408 -2036 0
553 410 -2038 0
553 412 -2040 0
553 414 -2042 0
553 416 -2044 0
553 418 -2046 0
553 420 -2048 0
555 -2034 0
555 407 -2036 0
555 408 -2038 0
555 410 -2040 0
555 412 -2042 0
555 414 -2044 0
555 416 -2046 0
555 418 -2048 0
555 420 -2050 0
c (0<=( - aux397 + shift(x_00005_00001, -1) + shift(x_00004_00001, -1)))
-420 2050 0
-418 2048 0
-416 2046 0
-414 2044 0
-412 2042 0
-410 2040 0
-408 2038 0
-407 2036 0
-555 2050 0
-555 -420 2048 0
-555 -418 2046 0
-555 -416 2044 0
-555 -414 2042 0
-555 -412 2040 0
-555 -410 2038 0
-555 -408 2036 0
-555 -407 2034 0
-553 2048 0
-553 -420 2046 0
-553 -418 2044 0
-553 -416 2042 0
-553 -414 2040 0
-553 -412 2038 0
-553 -410 2036 0
-553 -408 2034 0
-553 -407 2032 0
-551 2046 0
-551 -420 2044 0
-551 -418 2042 0
-551 -416 2040 0
-551 -414 2038 0
-551 -412 2036 0
-551 -410 2034 0
-551 -408 2032 0
-551 -407 2030 0
-549 2044 0
-549 -420 2042 0
-549 -418 2040 0
-549 -416 2038 0
-549 -414 2036 0
-549 -412 2034 0
-549 -410 2032 0
-549 -408 2030 0
-549 -407 2028 0
-547 2042 0
-547 -420 2040 0
-547 -418 2038 0
-547 -416 2036 0
-547 -414 2034 0
-547 -412 2032 0
-547 -410 2030 0
-547 -408 2028 0
-547 -407 2026 0
-545 2040 0
-545 -420 2038 0
-545 -418 2036 0
-545 -416 2034 0
-545 -414 2032 0
-545 -412 2030 0
-545 -410 2028 0
-545 -408 2026 0
-545 -407 2024 0
-543 2038 0
-543 -420 2036 0
-543 -418 2034 0
-543 -416 2032 0
-543 -414 2030 0
-543 -412 2028 0
-543 -410 2026 0
-543 -408 2024 0
-543 -407 2022 0
-542 2036 0
-542 -420 2034 0
-542 -418 2032 0
-542 -416 2030 0
-542 -414 2028 0
-542 -412 2026 0
-542 -410 2024 0
-542 -408 2022 0
-542 -407 2021 0
c ((shift(x_00007_00003, -1) - aux400 + shift(x_00006_00004, -1))<=0)
722 -2114 0
723 -2115 0
725 -2117 0
727 -2119 0
729 -2121 0
731 -2123 0
733 -2125 0
735 -2127 0
842 -2114 0
842 722 -2115 0
842 723 -2117 0
842 725 -2119 0
842 727 -2121 0
842 729 -2123 0
842 731 -2125 0
842 733 -2127 0
842 735 -2129 0
843 -2115 0
843 722 -2117 0
843 723 -2119 0
843 725 -2121 0
843 727 -2123 0
843 729 -2125 0
843 731 -2127 0
843 733 -2129 0
843 735 -2131 0
845 -2117 0
845 722 -2119 0
845 723 -2121 0
845 725 -2123 0
845 727 -2125 0
845 729 -2127 0
845 731 -2129 0
845 733 -2131 0
845 735 -2133 0
847 -2119 0
847 722 -2121 0
847 723 -2123 0
847 725 -2125 0
847 727 -2127 0
847 729 -2129 0
847 731 -2131 0
847 733 -2133 0
847 735 -2135 0
849 -2121 0
849 722 -2123 0
849 723 -2125 0
849 725 -2127 0
849 727 -2129 0
849 729 -2131 0
849 731 -2133 0
849 733 -2135 0
849 735 -2137 0
851 -2123 0
851 722 -2125 0
851 723 -2127 0
851 725 -2129 0
851 727 -2131 0
851 729 -2133 0
851 731 -2135 0
851 733 -2137 0
851 735 -2139 0
853 -2125 0
853 722 -2127 0
853 723 -2129 0
853 725 -2131 0
853 727 -2133 0
853 729 -2135 0
853 731 -2137 0
853 733 -2139 0
853 735 -2141 0
855 -2127 0
855 722 -2129 0
855 723 -2131 0
855 725 -2133 0
855 727 -2135 0
855 729 -2137 0
855 731 -2139 0
855 733 -2141 0
855 735 -2143 0
c (0<=(shift(x_00007_00003, -1) - aux400 + shift(x_00006_00004, -1)))
-735 2143 0
-733 2141 0
-731 2139 0
-729 2137 0
-727 2135 0
-725 2133 0
-723 2131 0
-722 2129 0
-855 2143 0
-855 -735 2141 0
-855 -733 2139 0
-855 -731 2137 0
-855 -729 2135 0
-855 -727 2133 0
-855 -725 2131 0
-855 -723 2129 0
-855 -722 2127 0
-853 2141 0
-853 -735 2139 0
-853 -733 2137 0
-853 -731 2135 0
-853 -729 2133 0
-853 -727 2131 0
-853 -725 2129 0
-853 -723 2127 0
-853 -722 2125 0
-851 2139 0
-851 -735 2137 0
-851 -733 2135 0
-851 -731 2133 0
-851 -729 2131 0
-851 -727 2129 0
-851 -725 2127 0
-851 -723 2125 0
-851 -722 2123 0
-849 2137 0
-849 -735 2135 0
-849 -733 2133 0
-849 -731 2131 0
-849 -729 2129 0
-849 -727 2127 0
-849 -725 2125 0
-849 -723 2123 0
-849 -722 2121 0
-847 2135 0
-847 -735 2133 0
-847 -733 2131 0
-847 -731 2129 0
-847 -729 2127 0
-847 -727 2125 0
-847 -725 2123 0
-847 -723 2121 0
-847 -722 2119 0
-845 2133 0
-845 -735 2131 0
-845 -733 2129 0
-845 -731 2127 0
-845 -729 2125 0
-845 -727 2123 0
-845 -725 2121 0
-845 -723 2119 0
-845 -722 2117 0
-843 2131 0
-843 -735 2129 0
-843 -733 2127 0
-843 -731 2125 0
-843 -729 2123 0
-843 -727 2121 0
-843 -725 2119 0
-843 -723 2117 0
-843 -722 2115 0
-842 2129 0
-842 -735 2127 0
-842 -733 2125 0
-842 -731 2123 0
-842 -729 2121 0
-842 -727 2119 0
-842 -725 2117 0
-842 -723 2115 0
-842 -722 2114 0
c ((shift(x_00007_00006, -1) - aux406 + shift(x_00009_00006, -1))<=0)
1157 -2300 0
1158 -2301 0
1160 -2303 0
1162 -2305 0
1164 -2307 0
1166 -2309 0
1168 -2311 0
1170 -2313 0
887 -2300 0
887 1157 -2301 0
887 1158 -2303 0
887 1160 -2305 0
887 1162 -2307 0
887 1164 -2309 0
887 1166 -2311 0
887 1168 -2313 0
887 1170 -2315 0
888 -2301 0
888 1157 -2303 0
888 1158 -2305 0
888 1160 -2307 0
888 1162 -2309 0
888 1164 -2311 0
888 1166 -2313 0
888 1168 -2315 0
888 1170 -2317 0
890 -2303 0
890 1157 -2305 0
890 1158 -2307 0
890 1160 -2309 0
890 1162 -2311 0
890 1164 -2313 0
890 1166 -2315 0
890 1168 -2317 0
890 1170 -2319 0
892 -2305 0
892 1157 -2307 0
892 1158 -2309 0
892 1160 -2311 0
892 1162 -2313 0
892 1164 -2315 0
892 1166 -2317 0
892 1168 -2319 0
892 1170 -2321 0
894 -2307 0
894 1157 -2309 0
894 1158 -2311 0
894 1160 -2313 0
894 1162 -2315 0
894 1164 -2317 0
894 1166 -2319 0
894 1168 -2321 0
894 1170 -2323 0
896 -2309 0
896 1157 -2311 0
896 1158 -2313 0
896 1160 -2315 0
896 1162 -2317 0
896 1164 -2319 0
896 1166 -2321 0
896 1168 -2323 0
896 1170 -2325 0
898 -2311 0
898 1157 -2313 0
898 1158 -2315 0
898 1160 -2317 0
898 1162 -2319 0
898 1164 -2321 0
898 1166 -2323 0
898 1168 -2325 0
898 1170 -2327 0
900 -2313 0
900 1157 -2315 0
900 1158 -2317 0
900 1160 -2319 0
900 1162 -2321 0
900 1164 -2323 0
900 1166 -2325 0
900 1168 -2327 0
900 1170 -2329 0
c (0<=(shift(x_00007_00006, -1) - aux406 + shift(x_00009_00006, -1)))
-1170 2329 0
-1168 2327 0
-1166 2325 0
-1164 2323 0
-1162 2321 0
-1160 2319 0
-1158 2317 0
-1157 2315 0
-900 2329 0
-900 -1170 2327 0
-900 -1168 2325 0
-900 -1166 2323 0
-900 -1164 2321 0
-900 -1162 2319 0
-900 -1160 2317 0
-900 -1158 2315 0
-900 -1157 2313 0
-898 2327 0
-898 -1170 2325 0
-898 -1168 2323 0
-898 -1166 2321 0
-898 -1164 2319 0
-898 -1162 2317 0
-898 -1160 2315 0
-898 -1158 2313 0
-898 -1157 2311 0
-896 2325 0
-896 -1170 2323 0
-896 -1168 2321 0
-896 -1166 2319 0
-896 -1164 2317 0
-896 -1162 2315 0
-896 -1160 2313 0
-896 -1158 2311 0
-896 -1157 2309 0
-894 2323 0
-894 -1170 2321 0
-894 -1168 2319 0
-894 -1166 2317 0
-894 -1164 2315 0
-894 -1162 2313 0
-894 -1160 2311 0
-894 -1158 2309 0
-894 -1157 2307 0
-892 2321 0
-892 -1170 2319 0
-892 -1168 2317 0
-892 -1166 2315 0
-892 -1164 2313 0
-892 -1162 2311 0
-892 -1160 2309 0
-892 -1158 2307 0
-892 -1157 2305 0
-890 2319 0
-890 -1170 2317 0
-890 -1168 2315 0
-890 -1166 2313 0
-890 -1164 2311 0
-890 -1162 2309 0
-890 -1160 2307 0
-890 -1158 2305 0
-890 -1157 2303 0
-888 2317 0
-888 -1170 2315 0
-888 -1168 2313 0
-888 -1166 2311 0
-888 -1164 2309 0
-888 -1162 2307 0
-888 -1160 2305 0
-888 -1158 2303 0
-888 -1157 2301 0
-887 2315 0
-887 -1170 2313 0
-887 -1168 2311 0
-887 -1166 2309 0
-887 -1164 2307 0
-887 -1162 2305 0
-887 -1160 2303 0
-887 -1158 2301 0
-887 -1157 2300 0
c (( - aux407 + shift(x_00008_00009, -1) + shift(x_00009_00009, -1))<=0)
1202 -2331 0
1203 -2332 0
1205 -2334 0
1207 -2336 0
1209 -2338 0
1211 -2340 0
1213 -2342 0
1215 -2344 0
1067 -2331 0
1067 1202 -2332 0
1067 1203 -2334 0
1067 1205 -2336 0
1067 1207 -2338 0
1067 1209 -2340 0
1067 1211 -2342 0
1067 1213 -2344 0
1067 1215 -2346 0
1068 -2332 0
1068 1202 -2334 0
1068 1203 -2336 0
1068 1205 -2338 0
1068 1207 -2340 0
1068 1209 -2342 0
1068 1211 -2344 0
1068 1213 -2346 0
1068 1215 -2348 0
1070 -2334 0
1070 1202 -2336 0
1070 1203 -2338 0
1070 1205 -2340 0
1070 1207 -2342 0
1070 1209 -2344 0
1070 1211 -2346 0
1070 1213 -2348 0
1070 1215 -2350 0
1072 -2336 0
1072 1202 -2338 0
1072 1203 -2340 0
1072 1205 -2342 0
1072 1207 -2344 0
1072 1209 -2346 0
1072 1211 -2348 0
1072 1213 -2350 0
1072 1215 -2352 0
1074 -2338 0
1074 1202 -2340 0
1074 1203 -2342 0
1074 1205 -2344 0
1074 1207 -2346 0
1074 1209 -2348 0
1074 1211 -2350 0
1074 1213 -2352 0
1074 1215 -2354 0
1076 -2340 0
1076 1202 -2342 0
1076 1203 -2344 0
1076 1205 -2346 0
1076 1207 -2348 0
1076 1209 -2350 0
1076 1211 -2352 0
1076 1213 -2354 0
1076 1215 -2356 0
1078 -2342 0
1078 1202 -2344 0
1078 1203 -2346 0
1078 1205 -2348 0
1078 1207 -2350 0
1078 1209 -2352 0
1078 1211 -2354 0
1078 1213 -2356 0
1078 1215 -2358 0
1080 -2344 0
1080 1202 -2346 0
1080 1203 -2348 0
1080 1205 -2350 0
1080 1207 -2352 0
1080 1209 -2354 0
1080 1211 -2356 0
1080 1213 -2358 0
1080 1215 -2360 0
c (0<=( - aux407 + shift(x_00008_00009, -1) + shift(x_00009_00009, -1)))
-1215 2360 0
-1213 2358 0
-1211 2356 0
-1209 2354 0
-1207 2352 0
-1205 2350 0
-1203 2348 0
-1202 2346 0
-1080 2360 0
-1080 -1215 2358 0
-1080 -1213 2356 0
-1080 -1211 2354 0
-1080 -1209 2352 0
-1080 -1207 2350 0
-1080 -1205 2348 0
-1080 -1203 2346 0
-1080 -1202 2344 0
-1078 2358 0
-1078 -1215 2356 0
-1078 -1213 2354 0
-1078 -1211 2352 0
-1078 -1209 2350 0
-1078 -1207 2348 0
-1078 -1205 2346 0
-1078 -1203 2344 0
-1078 -1202 2342 0
-1076 2356 0
-1076 -1215 2354 0
-1076 -1213 2352 0
-1076 -1211 2350 0
-1076 -1209 2348 0
-1076 -1207 2346 0
-1076 -1205 2344 0
-1076 -1203 2342 0
-1076 -1202 2340 0
-1074 2354 0
-1074 -1215 2352 0
-1074 -1213 2350 0
-1074 -1211 2348 0
-1074 -1209 2346 0
-1074 -1207 2344 0
-1074 -1205 2342 0
-1074 -1203 2340 0
-1074 -1202 2338 0
-1072 2352 0
-1072 -1215 2350 0
-1072 -1213 2348 0
-1072 -1211 2346 0
-1072 -1209 2344 0
-1072 -1207 2342 0
-1072 -1205 2340 0
-1072 -1203 2338 0
-1072 -1202 2336 0
-1070 2350 0
-1070 -1215 2348 0
-1070 -1213 2346 0
-1070 -1211 2344 0
-1070 -1209 2342 0
-1070 -1207 2340 0
-1070 -1205 2338 0
-1070 -1203 2336 0
-1070 -1202 2334 0
-1068 2348 0
-1068 -1215 2346 0
-1068 -1213 2344 0
-1068 -1211 2342 0
-1068 -1209 2340 0
-1068 -1207 2338 0
-1068 -1205 2336 0
-1068 -1203 2334 0
-1068 -1202 2332 0
-1067 2346 0
-1067 -1215 2344 0
-1067 -1213 2342 0
-1067 -1211 2340 0
-1067 -1209 2338 0
-1067 -1207 2336 0
-1067 -1205 2334 0
-1067 -1203 2332 0
-1067 -1202 2331 0
c ((SATLiteral(272) - aux1866 + SATLiteral(137))<=0)
-137 -8194 0
-272 -8194 0
-272 -137 -8195 0
c (0<=(SATLiteral(272) - aux1866 + SATLiteral(137)))
137 8195 0
272 8195 0
272 137 8194 0
c ((SATLiteral(274) - aux1867 + SATLiteral(139))<=0)
-139 -8197 0
-274 -8197 0
-274 -139 -8198 0
c (0<=(SATLiteral(274) - aux1867 + SATLiteral(139)))
139 8198 0
274 8198 0
274 139 8197 0
c ((SATLiteral(276) - aux1868 + SATLiteral(141))<=0)
-141 -8200 0
-276 -8200 0
-276 -141 -8201 0
c (0<=(SATLiteral(276) - aux1868 + SATLiteral(141)))
141 8201 0
276 8201 0
276 141 8200 0
c ((SATLiteral(278) - aux1869 + SATLiteral(143))<=0)
-143 -8203 0
-278 -8203 0
-278 -143 -8204 0
c (0<=(SATLiteral(278) - aux1869 + SATLiteral(143)))
143 8204 0
278 8204 0
278 143 8203 0
c ((SATLiteral(280) - aux1870 + SATLiteral(145))<=0)
-145 -8206 0
-280 -8206 0
-280 -145 -8207 0
c (0<=(SATLiteral(280) - aux1870 + SATLiteral(145)))
145 8207 0
280 8207 0
280 145 8206 0
c ((SATLiteral(282) - aux1871 + SATLiteral(147))<=0)
-147 -8209 0
-282 -8209 0
-282 -147 -8210 0
c (0<=(SATLiteral(282) - aux1871 + SATLiteral(147)))
147 8210 0
282 8210 0
282 147 8209 0
c ((SATLiteral(284) - aux1872 + SATLiteral(149))<=0)
-149 -8212 0
-284 -8212 0
-284 -149 -8213 0
c (0<=(SATLiteral(284) - aux1872 + SATLiteral(149)))
149 8213 0
284 8213 0
284 149 8212 0
c ((SATLiteral(286) - aux1873 + SATLiteral(151))<=0)
-151 -8215 0
-286 -8215 0
-286 -151 -8216 0
c (0<=(SATLiteral(286) - aux1873 + SATLiteral(151)))
151 8216 0
286 8216 0
286 151 8215 0
c ((SATLiteral(-285) - aux1874 + SATLiteral(-150))<=0)
150 -8218 0
285 -8218 0
285 150 -8219 0
c (0<=(SATLiteral(-285) - aux1874 + SATLiteral(-150)))
-150 8219 0
-285 8219 0
-285 -150 8218 0
c (( - aux1956 + SATLiteral(407) + SATLiteral(542))<=0)
-542 -8500 0
-407 -8500 0
-407 -542 -8501 0
c (0<=( - aux1956 + SATLiteral(407) + SATLiteral(542)))
542 8501 0
407 8501 0
407 542 8500 0
c (( - aux1957 + SATLiteral(409) + SATLiteral(544))<=0)
-544 -8503 0
-409 -8503 0
-409 -544 -8504 0
c (0<=( - aux1957 + SATLiteral(409) + SATLiteral(544)))
544 8504 0
409 8504 0
409 544 8503 0
c (( - aux1958 + SATLiteral(411) + SATLiteral(546))<=0)
-546 -8506 0
-411 -8506 0
-411 -546 -8507 0
c (0<=( - aux1958 + SATLiteral(411) + SATLiteral(546)))
546 8507 0
411 8507 0
411 546 8506 0
c (( - aux1959 + SATLiteral(413) + SATLiteral(548))<=0)
-548 -8509 0
-413 -8509 0
-413 -548 -8510 0
c (0<=( - aux1959 + SATLiteral(413) + SATLiteral(548)))
548 8510 0
413 8510 0
413 548 8509 0
c (( - aux1960 + SATLiteral(415) + SATLiteral(550))<=0)
-550 -8512 0
-415 -8512 0
-415 -550 -8513 0
c (0<=( - aux1960 + SATLiteral(415) + SATLiteral(550)))
550 8513 0
415 8513 0
415 550 8512 0
c (( - aux1961 + SATLiteral(417) + SATLiteral(552))<=0)
-552 -8515 0
-417 -8515 0
-417 -552 -8516 0
c (0<=( - aux1961 + SATLiteral(417) + SATLiteral(552)))
552 8516 0
417 8516 0
417 552 8515 0
c (( - aux1962 + SATLiteral(419) + SATLiteral(554))<=0)
-554 -8518 0
-419 -8518 0
-419 -554 -8519 0
c (0<=( - aux1962 + SATLiteral(419) + SATLiteral(554)))
554 8519 0
419 8519 0
419 554 8518 0
c (( - aux1963 + SATLiteral(421) + SATLiteral(556))<=0)
-556 -8521 0
-421 -8521 0
-421 -556 -8522 0
c (0<=( - aux1963 + SATLiteral(421) + SATLiteral(556)))
556 8522 0
421 8522 0
421 556 8521 0
c (( - aux1964 + SATLiteral(-420) + SATLiteral(-555))<=0)
555 -8524 0
420 -8524 0
420 555 -8525 0
c (0<=( - aux1964 + SATLiteral(-420) + SATLiteral(-555)))
-555 8525 0
-420 8525 0
-420 -555 8524 0
c ((SATLiteral(707) - aux1983 + SATLiteral(857))<=0)
-857 -8581 0
-707 -8581 0
-707 -857 -8582 0
c (0<=(SATLiteral(707) - aux1983 + SATLiteral(857)))
857 8582 0
707 8582 0
707 857 8581 0
c ((SATLiteral(709) - aux1984 + SATLiteral(859))<=0)
-859 -8584 0
-709 -8584 0
-709 -859 -8585 0
c (0<=(SATLiteral(709) - aux1984 + SATLiteral(859)))
859 8585 0
709 8585 0
709 859 8584 0
c ((SATLiteral(711) - aux1985 + SATLiteral(861))<=0)
-861 -8587 0
-711 -8587 0
-711 -861 -8588 0
c (0<=(SATLiteral(711) - aux1985 + SATLiteral(861)))
861 8588 0
711 8588 0
711 861 8587 0
c ((SATLiteral(713) - aux1986 + SATLiteral(863))<=0)
-863 -8590 0
-713 -8590 0
-713 -863 -8591 0
c (0<=(SATLiteral(713) - aux1986 + SATLiteral(863)))
863 8591 0
713 8591 0
713 863 8590 0
c ((SATLiteral(715) - aux1987 + SATLiteral(865))<=0)
-865 -8593 0
-715 -8593 0
-715 -865 -8594 0
c (0<=(SATLiteral(715) - aux1987 + SATLiteral(865)))
865 8594 0
715 8594 0
715 865 8593 0
c ((SATLiteral(717) - aux1988 + SATLiteral(867))<=0)
-867 -8596 0
-717 -8596 0
-717 -867 -8597 0
c (0<=(SATLiteral(717) - aux1988 + SATLiteral(867)))
867 8597 0
717 8597 0
717 867 8596 0
c ((SATLiteral(719) - aux1989 + SATLiteral(869))<=0)
-869 -8599 0
-719 -8599 0
-719 -869 -8600 0
c (0<=(SATLiteral(719) - aux1989 + SATLiteral(869)))
869 8600 0
719 8600 0
719 869 8599 0
c ((SATLiteral(721) - aux1990 + SATLiteral(871))<=0)
-871 -8602 0
-721 -8602 0
-721 -871 -8603 0
c (0<=(SATLiteral(721) - aux1990 + SATLiteral(871)))
871 8603 0
721 8603 0
721 871 8602 0
c ((SATLiteral(-720) - aux1991 + SATLiteral(-870))<=0)
870 -8605 0
720 -8605 0
720 870 -8606 0
c (0<=(SATLiteral(-720) - aux1991 + SATLiteral(-870)))
-870 8606 0
-720 8606 0
-720 -870 8605 0
c ((SATLiteral(1022) - aux2037 + SATLiteral(887))<=0)
-887 -8743 0
-1022 -8743 0
-1022 -887 -8744 0
c (0<=(SATLiteral(1022) - aux2037 + SATLiteral(887)))
887 8744 0
1022 8744 0
1022 887 8743 0
c ((SATLiteral(1024) - aux2038 + SATLiteral(889))<=0)
-889 -8746 0
-1024 -8746 0
-1024 -889 -8747 0
c (0<=(SATLiteral(1024) - aux2038 + SATLiteral(889)))
889 8747 0
1024 8747 0
1024 889 8746 0
c ((SATLiteral(1026) - aux2039 + SATLiteral(891))<=0)
-891 -8749 0
-1026 -8749 0
-1026 -891 -8750 0
c (0<=(SATLiteral(1026) - aux2039 + SATLiteral(891)))
891 8750 0
1026 8750 0
1026 891 8749 0
c ((SATLiteral(1028) - aux2040 + SATLiteral(893))<=0)
-893 -8752 0
-1028 -8752 0
-1028 -893 -8753 0
c (0<=(SATLiteral(1028) - aux2040 + SATLiteral(893)))
893 8753 0
1028 8753 0
1028 893 8752 0
c ((SATLiteral(1030) - aux2041 + SATLiteral(895))<=0)
-895 -8755 0
-1030 -8755 0
-1030 -895 -8756 0
c (0<=(SATLiteral(1030) - aux2041 + SATLiteral(895)))
895 8756 0
1030 8756 0
1030 895 8755 0
c ((SATLiteral(1032) - aux2042 + SATLiteral(897))<=0)
-897 -8758 0
-1032 -8758 0
-1032 -897 -8759 0
c (0<=(SATLiteral(1032) - aux2042 + SATLiteral(897)))
897 8759 0
1032 8759 0
1032 897 8758 0
c ((SATLiteral(1034) - aux2043 + SATLiteral(899))<=0)
-899 -8761 0
-1034 -8761 0
-1034 -899 -8762 0
c (0<=(SATLiteral(1034) - aux2043 + SATLiteral(899)))
899 8762 0
1034 8762 0
1034 899 8761 0
c ((SATLiteral(1036) - aux2044 + SATLiteral(901))<=0)
-901 -8764 0
-1036 -8764 0
-1036 -901 -8765 0
c (0<=(SATLiteral(1036) - aux2044 + SATLiteral(901)))
901 8765 0
1036 8765 0
1036 901 8764 0
c ((SATLiteral(-1035) - aux2045 + SATLiteral(-900))<=0)
900 -8767 0
1035 -8767 0
1035 900 -8768 0
c (0<=(SATLiteral(-1035) - aux2045 + SATLiteral(-900)))
-900 8768 0
-1035 8768 0
-1035 -900 8767 0
c ((SATLiteral(1067) - aux2046 + SATLiteral(1202))<=0)
-1202 -8770 0
-1067 -8770 0
-1067 -1202 -8771 0
c (0<=(SATLiteral(1067) - aux2046 + SATLiteral(1202)))
1202 8771 0
1067 8771 0
1067 1202 8770 0
c ((SATLiteral(1069) - aux2047 + SATLiteral(1204))<=0)
-1204 -8773 0
-1069 -8773 0
-1069 -1204 -8774 0
c (0<=(SATLiteral(1069) - aux2047 + SATLiteral(1204)))
1204 8774 0
1069 8774 0
1069 1204 8773 0
c ((SATLiteral(1071) - aux2048 + SATLiteral(1206))<=0)
-1206 -8776 0
-1071 -8776 0
-1071 -1206 -8777 0
c (0<=(SATLiteral(1071) - aux2048 + SATLiteral(1206)))
1206 8777 0
1071 8777 0
1071 1206 8776 0
c ((SATLiteral(1073) - aux2049 + SATLiteral(1208))<=0)
-1208 -8779 0
-1073 -8779 0
-1073 -1208 -8780 0
c (0<=(SATLiteral(1073) - aux2049 + SATLiteral(1208)))
1208 8780 0
1073 8780 0
1073 1208 8779 0
c ((SATLiteral(1075) - aux2050 + SATLiteral(1210))<=0)
-1210 -8782 0
-1075 -8782 0
-1075 -1210 -8783 0
c (0<=(SATLiteral(1075) - aux2050 + SATLiteral(1210)))
1210 8783 0
1075 8783 0
1075 1210 8782 0
c ((SATLiteral(1077) - aux2051 + SATLiteral(1212))<=0)
-1212 -8785 0
-1077 -8785 0
-1077 -1212 -8786 0
c (0<=(SATLiteral(1077) - aux2051 + SATLiteral(1212)))
1212 8786 0
1077 8786 0
1077 1212 8785 0
c ((SATLiteral(1079) - aux2052 + SATLiteral(1214))<=0)
-1214 -8788 0
-1079 -8788 0
-1079 -1214 -8789 0
c (0<=(SATLiteral(1079) - aux2052 + SATLiteral(1214)))
1214 8789 0
1079 8789 0
1079 1214 8788 0
c ((SATLiteral(1081) - aux2053 + SATLiteral(1216))<=0)
-1216 -8791 0
-1081 -8791 0
-1081 -1216 -8792 0
c (0<=(SATLiteral(1081) - aux2053 + SATLiteral(1216)))
1216 8792 0
1081 8792 0
1081 1216 8791 0
c ((SATLiteral(-1080) - aux2054 + SATLiteral(-1215))<=0)
1215 -8794 0
1080 -8794 0
1080 1215 -8795 0
c (0<=(SATLiteral(-1080) - aux2054 + SATLiteral(-1215)))
-1215 8795 0
-1080 8795 0
-1080 -1215 8794 0
c (( - aux388 + shift(x_00001_00009, -1) + shift(x_00002_00007, -1))<=0)
227 -1710 0
228 -1711 0
230 -1713 0
232 -1715 0
234 -1717 0
236 -1719 0
238 -1721 0
240 -1723 0
122 -1710 0
122 227 -1711 0
122 228 -1713 0
122 230 -1715 0
122 232 -1717 0
122 234 -1719 0
122 236 -1721 0
122 238 -1723 0
122 240 -1725 0
123 -1711 0
123 227 -1713 0
123 228 -1715 0
123 230 -1717 0
123 232 -1719 0
123 234 -1721 0
123 236 -1723 0
123 238 -1725 0
123 240 -1727 0
125 -1713 0
125 227 -1715 0
125 228 -1717 0
125 230 -1719 0
125 232 -1721 0
125 234 -1723 0
125 236 -1725 0
125 238 -1727 0
125 240 -1729 0
127 -1715 0
127 227 -1717 0
127 228 -1719 0
127 230 -1721 0
127 232 -1723 0
127 234 -1725 0
127 236 -1727 0
127 238 -1729 0
127 240 -1731 0
129 -1717 0
129 227 -1719 0
129 228 -1721 0
129 230 -1723 0
129 232 -1725 0
129 234 -1727 0
129 236 -1729 0
129 238 -1731 0
129 240 -1733 0
131 -1719 0
131 227 -1721 0
131 228 -1723 0
131 230 -1725 0
131 232 -1727 0
131 234 -1729 0
131 236 -1731 0
131 238 -1733 0
131 240 -1735 0
133 -1721 0
133 227 -1723 0
133 228 -1725 0
133 230 -1727 0
133 232 -1729 0
133 234 -1731 0
133 236 -1733 0
133 238 -1735 0
133 240 -1737 0
135 -1723 0
135 227 -1725 0
135 228 -1727 0
135 230 -1729 0
135 232 -1731 0
135 234 -1733 0
135 236 -1735 0
135 238 -1737 0
135 240 -1739 0
c (0<=( - aux388 + shift(x_00001_00009, -1) + shift(x_00002_00007, -1)))
-240 1739 0
-238 1737 0
-236 1735 0
-234 1733 0
-232 1731 0
-230 1729 0
-228 1727 0
-227 1725 0
-135 1739 0
-135 -240 1737 0
-135 -238 1735 0
-135 -236 1733 0
-135 -234 1731 0
-135 -232 1729 0
-135 -230 1727 0
-135 -228 1725 0
-135 -227 1723 0
-133 1737 0
-133 -240 1735 0
-133 -238 1733 0
-133 -236 1731 0
-133 -234 1729 0
-133 -232 1727 0
-133 -230 1725 0
-133 -228 1723 0
-133 -227 1721 0
-131 1735 0
-131 -240 1733 0
-131 -238 1731 0
-131 -236 1729 0
-131 -234 1727 0
-131 -232 1725 0
-131 -230 1723 0
-131 -228 1721 0
-131 -227 1719 0
-129 1733 0
-129 -240 1731 0
-129 -238 1729 0
-129 -236 1727 0
-129 -234 1725 0
-129 -232 1723 0
-129 -230 1721 0
-129 -228 1719 0
-129 -227 1717 0
-127 1731 0
-127 -240 1729 0
-127 -238 1727 0
-127 -236 1725 0
-127 -234 1723 0
-127 -232 1721 0
-127 -230 1719 0
-127 -228 1717 0
-127 -227 1715 0
-125 1729 0
-125 -240 1727 0
-125 -238 1725 0
-125 -236 1723 0
-125 -234 1721 0
-125 -232 1719 0
-125 -230 1717 0
-125 -228 1715 0
-125 -227 1713 0
-123 1727 0
-123 -240 1725 0
-123 -238 1723 0
-123 -236 1721 0
-123 -234 1719 0
-123 -232 1717 0
-123 -230 1715 0
-123 -228 1713 0
-123 -227 1711 0
-122 1725 0
-122 -240 1723 0
-122 -238 1721 0
-122 -236 1719 0
-122 -234 1717 0
-122 -232 1715 0
-122 -230 1713 0
-122 -228 1711 0
-122 -227 1710 0
c (( - aux389 + shift(x_00001_00008, -1) + shift(x_00002_00008, -1))<=0)
242 -1741 0
243 -1742 0
245 -1744 0
247 -1746 0
249 -1748 0
251 -1750 0
253 -1752 0
255 -1754 0
107 -1741 0
107 242 -1742 0
107 243 -1744 0
107 245 -1746 0
107 247 -1748 0
107 249 -1750 0
107 251 -1752 0
107 253 -1754 0
107 255 -1756 0
108 -1742 0
108 242 -1744 0
108 243 -1746 0
108 245 -1748 0
108 247 -1750 0
108 249 -1752 0
108 251 -1754 0
108 253 -1756 0
108 255 -1758 0
110 -1744 0
110 242 -1746 0
110 243 -1748 0
110 245 -1750 0
110 247 -1752 0
110 249 -1754 0
110 251 -1756 0
110 253 -1758 0
110 255 -1760 0
112 -1746 0
112 242 -1748 0
112 243 -1750 0
112 245 -1752 0
112 247 -1754 0
112 249 -1756 0
112 251 -1758 0
112 253 -1760 0
112 255 -1762 0
114 -1748 0
114 242 -1750 0
114 243 -1752 0
114 245 -1754 0
114 247 -1756 0
114 249 -1758 0
114 251 -1760 0
114 253 -1762 0
114 255 -1764 0
116 -1750 0
116 242 -1752 0
116 243 -1754 0
116 245 -1756 0
116 247 -1758 0
116 249 -1760 0
116 251 -1762 0
116 253 -1764 0
116 255 -1766 0
118 -1752 0
118 242 -1754 0
118 243 -1756 0
118 245 -1758 0
118 247 -1760 0
118 249 -1762 0
118 251 -1764 0
118 253 -1766 0
118 255 -1768 0
120 -1754 0
120 242 -1756 0
120 243 -1758 0
120 245 -1760 0
120 247 -1762 0
120 249 -1764 0
120 251 -1766 0
120 253 -1768 0
120 255 -1770 0
c (0<=( - aux389 + shift(x_00001_00008, -1) + shift(x_00002_00008, -1)))
-255 1770 0
-253 1768 0
-251 1766 0
-249 1764 0
-247 1762 0
-245 1760 0
-243 1758 0
-242 1756 0
-120 1770 0
-120 -255 1768 0
-120 -253 1766 0
-120 -251 1764 0
-120 -249 1762 0
-120 -247 1760 0
-120 -245 1758 0
-120 -243 1756 0
-120 -242 1754 0
-118 1768 0
-118 -255 1766 0
-118 -253 1764 0
-118 -251 1762 0
-118 -249 1760 0
-118 -247 1758 0
-118 -245 1756 0
-118 -243 1754 0
-118 -242 1752 0
-116 1766 0
-116 -255 1764 0
-116 -253 1762 0
-116 -251 1760 0
-116 -249 1758 0
-116 -247 1756 0
-116 -245 1754 0
-116 -243 1752 0
-116 -242 1750 0
-114 1764 0
-114 -255 1762 0
-114 -253 1760 0
-114 -251 1758 0
-114 -249 1756 0
-114 -247 1754 0
-114 -245 1752 0
-114 -243 1750 0
-114 -242 1748 0
-112 1762 0
-112 -255 1760 0
-112 -253 1758 0
-112 -251 1756 0
-112 -249 1754 0
-112 -247 1752 0
-112 -245 1750 0
-112 -243 1748 0
-112 -242 1746 0
-110 1760 0
-110 -255 1758 0
-110 -253 1756 0
-110 -251 1754 0
-110 -249 1752 0
-110 -247 1750 0
-110 -245 1748 0
-110 -243 1746 0
-110 -242 1744 0
-108 1758 0
-108 -255 1756 0
-108 -253 1754 0
-108 -251 1752 0
-108 -249 1750 0
-108 -247 1748 0
-108 -245 1746 0
-108 -243 1744 0
-108 -242 1742 0
-107 1756 0
-107 -255 1754 0
-107 -253 1752 0
-107 -251 1750 0
-107 -249 1748 0
-107 -247 1746 0
-107 -245 1744 0
-107 -243 1742 0
-107 -242 1741 0
c (( - aux390 + shift(x_00003_00008, -1) + shift(x_00001_00007, -1))<=0)
92 -1772 0
93 -1773 0
95 -1775 0
97 -1777 0
99 -1779 0
101 -1781 0
103 -1783 0
105 -1785 0
377 -1772 0
377 92 -1773 0
377 93 -1775 0
377 95 -1777 0
377 97 -1779 0
377 99 -1781 0
377 101 -1783 0
377 103 -1785 0
377 105 -1787 0
378 -1773 0
378 92 -1775 0
378 93 -1777 0
378 95 -1779 0
378 97 -1781 0
378 99 -1783 0
378 101 -1785 0
378 103 -1787 0
378 105 -1789 0
380 -1775 0
380 92 -1777 0
380 93 -1779 0
380 95 -1781 0
380 97 -1783 0
380 99 -1785 0
380 101 -1787 0
380 103 -1789 0
380 105 -1791 0
382 -1777 0
382 92 -1779 0
382 93 -1781 0
382 95 -1783 0
382 97 -1785 0
382 99 -1787 0
382 101 -1789 0
382 103 -1791 0
382 105 -1793 0
384 -1779 0
384 92 -1781 0
384 93 -1783 0
384 95 -1785 0
384 97 -1787 0
384 99 -1789 0
384 101 -1791 0
384 103 -1793 0
384 105 -1795 0
386 -1781 0
386 92 -1783 0
386 93 -1785 0
386 95 -1787 0
386 97 -1789 0
386 99 -1791 0
386 101 -1793 0
386 103 -1795 0
386 105 -1797 0
388 -1783 0
388 92 -1785 0
388 93 -1787 0
388 95 -1789 0
388 97 -1791 0
388 99 -1793 0
388 101 -1795 0
388 103 -1797 0
388 105 -1799 0
390 -1785 0
390 92 -1787 0
390 93 -1789 0
390 95 -1791 0
390 97 -1793 0
390 99 -1795 0
390 101 -1797 0
390 103 -1799 0
390 105 -1801 0
c (0<=( - aux390 + shift(x_00003_00008, -1) + shift(x_00001_00007, -1)))
-105 1801 0
-103 1799 0
-101 1797 0
-99 1795 0
-97 1793 0
-95 1791 0
-93 1789 0
-92 1787 0
-390 1801 0
-390 -105 1799 0
-390 -103 1797 0
-390 -101 1795 0
-390 -99 1793 0
-390 -97 1791 0
-390 -95 1789 0
-390 -93 1787 0
-390 -92 1785 0
-388 1799 0
-388 -105 1797 0
-388 -103 1795 0
-388 -101 1793 0
-388 -99 1791 0
-388 -97 1789 0
-388 -95 1787 0
-388 -93 1785 0
-388 -92 1783 0
-386 1797 0
-386 -105 1795 0
-386 -103 1793 0
-386 -101 1791 0
-386 -99 1789 0
-386 -97 1787 0
-386 -95 1785 0
-386 -93 1783 0
-386 -92 1781 0
-384 1795 0
-384 -105 1793 0
-384 -103 1791 0
-384 -101 1789 0
-384 -99 1787 0
-384 -97 1785 0
-384 -95 1783 0
-384 -93 1781 0
-384 -92 1779 0
-382 1793 0
-382 -105 1791 0
-382 -103 1789 0
-382 -101 1787 0
-382 -99 1785 0
-382 -97 1783 0
-382 -95 1781 0
-382 -93 1779 0
-382 -92 1777 0
-380 1791 0
-380 -105 1789 0
-380 -103 1787 0
-380 -101 1785 0
-380 -99 1783 0
-380 -97 1781 0
-380 -95 1779 0
-380 -93 1777 0
-380 -92 1775 0
-378 1789 0
-378 -105 1787 0
-378 -103 1785 0
-378 -101 1783 0
-378 -99 1781 0
-378 -97 1779 0
-378 -95 1777 0
-378 -93 1775 0
-378 -92 1773 0
-377 1787 0
-377 -105 1785 0
-377 -103 1783 0
-377 -101 1781 0
-377 -99 1779 0
-377 -97 1777 0
-377 -95 1775 0
-377 -93 1773 0
-377 -92 1772 0
c (( - aux391 + shift(x_00003_00009, -1) + shift(x_00002_00009, -1))<=0)
257 -1803 0
258 -1804 0
260 -1806 0
262 -1808 0
264 -1810 0
266 -1812 0
268 -1814 0
270 -1816 0
392 -1803 0
392 257 -1804 0
392 258 -1806 0
392 260 -1808 0
392 262 -1810 0
392 264 -1812 0
392 266 -1814 0
392 268 -1816 0
392 270 -1818 0
393 -1804 0
393 257 -1806 0
393 258 -1808 0
393 260 -1810 0
393 262 -1812 0
393 264 -1814 0
393 266 -1816 0
393 268 -1818 0
393 270 -1820 0
395 -1806 0
395 257 -1808 0
395 258 -1810 0
395 260 -1812 0
395 262 -1814 0
395 264 -1816 0
395 266 -1818 0
395 268 -1820 0
395 270 -1822 0
397 -1808 0
397 257 -1810 0
397 258 -1812 0
397 260 -1814 0
397 262 -1816 0
397 264 -1818 0
397 266 -1820 0
397 268 -1822 0
397 270 -1824 0
399 -1810 0
399 257 -1812 0
399 258 -1814 0
399 260 -1816 0
399 262 -1818 0
399 264 -1820 0
399 266 -1822 0
399 268 -1824 0
399 270 -1826 0
401 -1812 0
401 257 -1814 0
401 258 -1816 0
401 260 -1818 0
401 262 -1820 0
401 264 -1822 0
401 266 -1824 0
401 268 -1826 0
401 270 -1828 0
403 -1814 0
403 257 -1816 0
403 258 -1818 0
403 260 -1820 0
403 262 -1822 0
403 264 -1824 0
403 266 -1826 0
403 268 -1828 0
403 270 -1830 0
405 -1816 0
405 257 -1818 0
405 258 -1820 0
405 260 -1822 0
405 262 -1824 0
405 264 -1826 0
405 266 -1828 0
405 268 -1830 0
405 270 -1832 0
c (0<=( - aux391 + shift(x_00003_00009, -1) + shift(x_00002_00009, -1)))
-270 1832 0
-268 1830 0
-266 1828 0
-264 1826 0
-262 1824 0
-260 1822 0
-258 1820 0
-257 1818 0
-405 1832 0
-405 -270 1830 0
-405 -268 1828 0
-405 -266 1826 0
-405 -264 1824 0
-405 -262 1822 0
-405 -260 1820 0
-405 -258 1818 0
-405 -257 1816 0
-403 1830 0
-403 -270 1828 0
-403 -268 1826 0
-403 -266 1824 0
-403 -264 1822 0
-403 -262 1820 0
-403 -260 1818 0
-403 -258 1816 0
-403 -257 1814 0
-401 1828 0
-401 -270 1826 0
-401 -268 1824 0
-401 -266 1822 0
-401 -264 1820 0
-401 -262 1818 0
-401 -260 1816 0
-401 -258 1814 0
-401 -257 1812 0
-399 1826 0
-399 -270 1824 0
-399 -268 1822 0
-399 -266 1820 0
-399 -264 1818 0
-399 -262 1816 0
-399 -260 1814 0
-399 -258 1812 0
-399 -257 1810 0
-397 1824 0
-397 -270 1822 0
-397 -268 1820 0
-397 -266 1818 0
-397 -264 1816 0
-397 -262 1814 0
-397 -260 1812 0
-397 -258 1810 0
-397 -257 1808 0
-395 1822 0
-395 -270 1820 0
-395 -268 1818 0
-395 -266 1816 0
-395 -264 1814 0
-395 -262 1812 0
-395 -260 1810 0
-395 -258 1808 0
-395 -257 1806 0
-393 1820 0
-393 -270 1818 0
-393 -268 1816 0
-393 -266 1814 0
-393 -264 1812 0
-393 -262 1810 0
-393 -260 1808 0
-393 -258 1806 0
-393 -257 1804 0
-392 1818 0
-392 -270 1816 0
-392 -268 1814 0
-392 -266 1812 0
-392 -264 1810 0
-392 -262 1808 0
-392 -260 1806 0
-392 -258 1804 0
-392 -257 1803 0
c ((aux388 + aux391 - aux392)<=0)
1803 -1834 0
1804 -1835 0
1806 -1837 0
1808 -1839 0
1810 -1841 0
1812 -1843 0
1814 -1845 0
1816 -1847 0
1818 -1849 0
1820 -1851 0
1822 -1853 0
1824 -1855 0
1826 -1857 0
1828 -1859 0
1830 -1861 0
1832 -1863 0
1710 -1834 0
1710 1803 -1835 0
1710 1804 -1837 0
1710 1806 -1839 0
1710 1808 -1841 0
1710 1810 -1843 0
1710 1812 -1845 0
1710 1814 -1847 0
1710 1816 -1849 0
1710 1818 -1851 0
1710 1820 -1853 0
1710 1822 -1855 0
1710 1824 -1857 0
1710 1826 -1859 0
1710 1828 -1861 0
1710 1830 -1863 0
1710 1832 -1865 0
1711 -1835 0
1711 1803 -1837 0
1711 1804 -1839 0
1711 1806 -1841 0
1711 1808 -1843 0
1711 1810 -1845 0
1711 1812 -1847 0
1711 1814 -1849 0
1711 1816 -1851 0
1711 1818 -1853 0
1711 1820 -1855 0
1711 1822 -1857 0
1711 1824 -1859 0
1711 1826 -1861 0
1711 1828 -1863 0
1711 1830 -1865 0
1711 1832 -1867 0
1713 -1837 0
1713 1803 -1839 0
1713 1804 -1841 0
1713 1806 -1843 0
1713 1808 -1845 0
1713 1810 -1847 0
1713 1812 -1849 0
1713 1814 -1851 0
1713 1816 -1853 0
1713 1818 -1855 0
1713 1820 -1857 0
1713 1822 -1859 0
1713 1824 -1861 0
1713 1826 -1863 0
1713 1828 -1865 0
1713 1830 -1867 0
1713 1832 -1869 0
1715 -1839 0
1715 1803 -1841 0
1715 1804 -1843 0
1715 1806 -1845 0
1715 1808 -1847 0
1715 1810 -1849 0
1715 1812 -1851 0
1715 1814 -1853 0
1715 1816 -1855 0
1715 1818 -1857 0
1715 1820 -1859 0
1715 1822 -1861 0
1715 1824 -1863 0
1715 1826 -1865 0
1715 1828 -1867 0
1715 1830 -1869 0
1715 1832 -1871 0
1717 -1841 0
1717 1803 -1843 0
1717 1804 -1845 0
1717 1806 -1847 0
1717 1808 -1849 0
1717 1810 -1851 0
1717 1812 -1853 0
1717 1814 -1855 0
1717 1816 -1857 0
1717 1818 -1859 0
1717 1820 -1861 0
1717 1822 -1863 0
1717 1824 -1865 0
1717 1826 -1867 0
1717 1828 -1869 0
1717 1830 -1871 0
1717 1832 -1873 0
1719 -1843 0
1719 1803 -1845 0
1719 1804 -1847 0
1719 1806 -1849 0
1719 1808 -1851 0
1719 1810 -1853 0
1719 1812 -1855 0
1719 1814 -1857 0
1719 1816 -1859 0
1719 1818 -1861 0
1719 1820 -1863 0
1719 1822 -1865 0
1719 1824 -1867 0
1719 1826 -1869 0
1719 1828 -1871 0
1719 1830 -1873 0
1719 1832 -1875 0
1721 -1845 0
1721 1803 -1847 0
1721 1804 -1849 0
1721 1806 -1851 0
1721 1808 -1853 0
1721 1810 -1855 0
1721 1812 -1857 0
1721 1814 -1859 0
1721 1816 -1861 0
1721 1818 -1863 0
1721 1820 -1865 0
1721 1822 -1867 0
1721 1824 -1869 0
1721 1826 -1871 0
1721 1828 -1873 0
1721 1830 -1875 0
1721 1832 -1877 0
1723 -1847 0
1723 1803 -1849 0
1723 1804 -1851 0
1723 1806 -1853 0
1723 1808 -1855 0
1723 1810 -1857 0
1723 1812 -1859 0
1723 1814 -1861 0
1723 1816 -1863 0
1723 1818 -1865 0
1723 1820 -1867 0
1723 1822 -1869 0
1723 1824 -1871 0
1723 1826 -1873 0
1723 1828 -1875 0
1723 1830 -1877 0
1723 1832 -1879 0
1725 -1849 0
1725 1803 -1851 0
1725 1804 -1853 0
1725 1806 -1855 0
1725 1808 -1857 0
1725 1810 -1859 0
1725 1812 -1861 0
1725 1814 -1863 0
1725 1816 -1865 0
1725 1818 -1867 0
1725 1820 -1869 0
1725 1822 -1871 0
1725 1824 -1873 0
1725 1826 -1875 0
1725 1828 -1877 0
1725 1830 -1879 0
1725 1832 -1881 0
1727 -1851 0
1727 1803 -1853 0
1727 1804 -1855 0
1727 1806 -1857 0
1727 1808 -1859 0
1727 1810 -1861 0
1727 1812 -1863 0
1727 1814 -1865 0
1727 1816 -1867 0
1727 1818 -1869 0
1727 1820 -1871 0
1727 1822 -1873 0
1727 1824 -1875 0
1727 1826 -1877 0
1727 1828 -1879 0
1727 1830 -1881 0
1727 1832 -1883 0
1729 -1853 0
1729 1803 -1855 0
1729 1804 -1857 0
1729 1806 -1859 0
1729 1808 -1861 0
1729 1810 -1863 0
1729 1812 -1865 0
1729 1814 -1867 0
1729 1816 -1869 0
1729 1818 -1871 0
1729 1820 -1873 0
1729 1822 -1875 0
1729 1824 -1877 0
1729 1826 -1879 0
1729 1828 -1881 0
1729 1830 -1883 0
1729 1832 -1885 0
1731 -1855 0
1731 1803 -1857 0
1731 1804 -1859 0
1731 1806 -1861 0
1731 1808 -1863 0
1731 1810 -1865 0
1731 1812 -1867 0
1731 1814 -1869 0
1731 1816 -1871 0
1731 1818 -1873 0
1731 1820 -1875 0
1731 1822 -1877 0
1731 1824 -1879 0
1731 1826 -1881 0
1731 1828 -1883 0
1731 1830 -1885 0
1731 1832 -1887 0
1733 -1857 0
1733 1803 -1859 0
1733 1804 -1861 0
1733 1806 -1863 0
1733 1808 -1865 0
1733 1810 -1867 0
1733 1812 -1869 0
1733 1814 -1871 0
1733 1816 -1873 0
1733 1818 -1875 0
1733 1820 -1877 0
1733 1822 -1879 0
1733 1824 -1881 0
1733 1826 -1883 0
1733 1828 -1885 0
1733 1830 -1887 0
1733 1832 -1889 0
1735 -1859 0
1735 1803 -1861 0
1735 1804 -1863 0
1735 1806 -1865 0
1735 1808 -1867 0
1735 1810 -1869 0
1735 1812 -1871 0
1735 1814 -1873 0
1735 1816 -1875 0
1735 1818 -1877 0
1735 1820 -1879 0
1735 1822 -1881 0
1735 1824 -1883 0
1735 1826 -1885 0
1735 1828 -1887 0
1735 1830 -1889 0
1735 1832 -1891 0
1737 -1861 0
1737 1803 -1863 0
1737 1804 -1865 0
1737 1806 -1867 0
1737 1808 -1869 0
1737 1810 -1871 0
1737 1812 -1873 0
1737 1814 -1875 0
1737 1816 -1877 0
1737 1818 -1879 0
1737 1820 -1881 0
1737 1822 -1883 0
1737 1824 -1885 0
1737 1826 -1887 0
1737 1828 -1889 0
1737 1830 -1891 0
1737 1832 -1893 0
1739 -1863 0
1739 1803 -1865 0
1739 1804 -1867 0
1739 1806 -1869 0
1739 1808 -1871 0
1739 1810 -1873 0
1739 1812 -1875 0
1739 1814 -1877 0
1739 1816 -1879 0
1739 1818 -1881 0
1739 1820 -1883 0
1739 1822 -1885 0
1739 1824 -1887 0
1739 1826 -1889 0
1739 1828 -1891 0
1739 1830 -1893 0
1739 1832 -1895 0
c (0<=(aux388 + aux391 - aux392))
-1832 1895 0
-1830 1893 0
-1828 1891 0
-1826 1889 0
-1824 1887 0
-1822 1885 0
-1820 1883 0
-1818 1881 0
-1816 1879 0
-1814 1877 0
-1812 1875 0
-1810 1873 0
-1808 1871 0
-1806 1869 0
-1804 1867 0
-1803 1865 0
-1739 1895 0
-1739 -1832 1893 0
-1739 -1830 1891 0
-1739 -1828 1889 0
-1739 -1826 1887 0
-1739 -1824 1885 0
-1739 -1822 1883 0
-1739 -1820 1881 0
-1739 -1818 1879 0
-1739 -1816 1877 0
-1739 -1814 1875 0
-1739 -1812 1873 0
-1739 -1810 1871 0
-1739 -1808 1869 0
-1739 -1806 1867 0
-1739 -1804 1865 0
-1739 -1803 1863 0
-1737 1893 0
-1737 -1832 1891 0
-1737 -1830 1889 0
-1737 -1828 1887 0
-1737 -1826 1885 0
-1737 -1824 1883 0
-1737 -1822 1881 0
-1737 -1820 1879 0
-1737 -1818 1877 0
-1737 -1816 1875 0
-1737 -1814 1873 0
-1737 -1812 1871 0
-1737 -1810 1869 0
-1737 -1808 1867 0
-1737 -1806 1865 0
-1737 -1804 1863 0
-1737 -1803 1861 0
-1735 1891 0
-1735 -1832 1889 0
-1735 -1830 1887 0
-1735 -1828 1885 0
-1735 -1826 1883 0
-1735 -1824 1881 0
-1735 -1822 1879 0
-1735 -1820 1877 0
-1735 -1818 1875 0
-1735 -1816 1873 0
-1735 -1814 1871 0
-1735 -1812 1869 0
-1735 -1810 1867 0
-1735 -1808 1865 0
-1735 -1806 1863 0
-1735 -1804 1861 0
-1735 -1803 1859 0
-1733 1889 0
-1733 -1832 1887 0
-1733 -1830 1885 0
-1733 -1828 1883 0
-1733 -1826 1881 0
-1733 -1824 1879 0
-1733 -1822 1877 0
-1733 -1820 1875 0
-1733 -1818 1873 0
-1733 -1816 1871 0
-1733 -1814 1869 0
-1733 -1812 1867 0
-1733 -1810 1865 0
-1733 -1808 1863 0
-1733 -1806 1861 0
-1733 -1804 1859 0
-1733 -1803 1857 0
-1731 1887 0
-1731 -1832 1885 0
-1731 -1830 1883 0
-1731 -1828 1881 0
-1731 -1826 1879 0
-1731 -1824 1877 0
-1731 -1822 1875 0
-1731 -1820 1873 0
-1731 -1818 1871 0
-1731 -1816 1869 0
-1731 -1814 1867 0
-1731 -1812 1865 0
-1731 -1810 1863 0
-1731 -1808 1861 0
-1731 -1806 1859 0
-1731 -1804 1857 0
-1731 -1803 1855 0
-1729 1885 0
-1729 -1832 1883 0
-1729 -1830 1881 0
-1729 -1828 1879 0
-1729 -1826 1877 0
-1729 -1824 1875 0
-1729 -1822 1873 0
-1729 -1820 1871 0
-1729 -1818 1869 0
-1729 -1816 1867 0
-1729 -1814 1865 0
-1729 -1812 1863 0
-1729 -1810 1861 0
-1729 -1808 1859 0
-1729 -1806 1857 0
-1729 -1804 1855 0
-1729 -1803 1853 0
-1727 1883 0
-1727 -1832 1881 0
-1727 -1830 1879 0
-1727 -1828 1877 0
-1727 -1826 1875 0
-1727 -1824 1873 0
-1727 -1822 1871 0
-1727 -1820 1869 0
-1727 -1818 1867 0
-1727 -1816 1865 0
-1727 -1814 1863 0
-1727 -1812 1861 0
-1727 -1810 1859 0
-1727 -1808 1857 0
-1727 -1806 1855 0
-1727 -1804 1853 0
-1727 -1803 1851 0
-1725 1881 0
-1725 -1832 1879 0
-1725 -1830 1877 0
-1725 -1828 1875 0
-1725 -1826 1873 0
-1725 -1824 1871 0
-1725 -1822 1869 0
-1725 -1820 1867 0
-1725 -1818 1865 0
-1725 -1816 1863 0
-1725 -1814 1861 0
-1725 -1812 1859 0
-1725 -1810 1857 0
-1725 -1808 1855 0
-1725 -1806 1853 0
-1725 -1804 1851 0
-1725 -1803 1849 0
-1723 1879 0
-1723 -1832 1877 0
-1723 -1830 1875 0
-1723 -1828 1873 0
-1723 -1826 1871 0
-1723 -1824 1869 0
-1723 -1822 1867 0
-1723 -1820 1865 0
-1723 -1818 1863 0
-1723 -1816 1861 0
-1723 -1814 1859 0
-1723 -1812 1857 0
-1723 -1810 1855 0
-1723 -1808 1853 0
-1723 -1806 1851 0
-1723 -1804 1849 0
-1723 -1803 1847 0
-1721 1877 0
-1721 -1832 1875 0
-1721 -1830 1873 0
-1721 -1828 1871 0
-1721 -1826 1869 0
-1721 -1824 1867 0
-1721 -1822 1865 0
-1721 -1820 1863 0
-1721 -1818 1861 0
-1721 -1816 1859 0
-1721 -1814 1857 0
-1721 -1812 1855 0
-1721 -1810 1853 0
-1721 -1808 1851 0
-1721 -1806 1849 0
-1721 -1804 1847 0
-1721 -1803 1845 0
-1719 1875 0
-1719 -1832 1873 0
-1719 -1830 1871 0
-1719 -1828 1869 0
-1719 -1826 1867 0
-1719 -1824 1865 0
-1719 -1822 1863 0
-1719 -1820 1861 0
-1719 -1818 1859 0
-1719 -1816 1857 0
-1719 -1814 1855 0
-1719 -1812 1853 0
-1719 -1810 1851 0
-1719 -1808 1849 0
-1719 -1806 1847 0
-1719 -1804 1845 0
-1719 -1803 1843 0
-1717 1873 0
-1717 -1832 1871 0
-1717 -1830 1869 0
-1717 -1828 1867 0
-1717 -1826 1865 0
-1717 -1824 1863 0
-1717 -1822 1861 0
-1717 -1820 1859 0
-1717 -1818 1857 0
-1717 -1816 1855 0
-1717 -1814 1853 0
-1717 -1812 1851 0
-1717 -1810 1849 0
-1717 -1808 1847 0
-1717 -1806 1845 0
-1717 -1804 1843 0
-1717 -1803 1841 0
-1715 1871 0
-1715 -1832 1869 0
-1715 -1830 1867 0
-1715 -1828 1865 0
-1715 -1826 1863 0
-1715 -1824 1861 0
-1715 -1822 1859 0
-1715 -1820 1857 0
-1715 -1818 1855 0
-1715 -1816 1853 0
-1715 -1814 1851 0
-1715 -1812 1849 0
-1715 -1810 1847 0
-1715 -1808 1845 0
-1715 -1806 1843 0
-1715 -1804 1841 0
-1715 -1803 1839 0
-1713 1869 0
-1713 -1832 1867 0
-1713 -1830 1865 0
-1713 -1828 1863 0
-1713 -1826 1861 0
-1713 -1824 1859 0
-1713 -1822 1857 0
-1713 -1820 1855 0
-1713 -1818 1853 0
-1713 -1816 1851 0
-1713 -1814 1849 0
-1713 -1812 1847 0
-1713 -1810 1845 0
-1713 -1808 1843 0
-1713 -1806 1841 0
-1713 -1804 1839 0
-1713 -1803 1837 0
-1711 1867 0
-1711 -1832 1865 0
-1711 -1830 1863 0
-1711 -1828 1861 0
-1711 -1826 1859 0
-1711 -1824 1857 0
-1711 -1822 1855 0
-1711 -1820 1853 0
-1711 -1818 1851 0
-1711 -1816 1849 0
-1711 -1814 1847 0
-1711 -1812 1845 0
-1711 -1810 1843 0
-1711 -1808 1841 0
-1711 -1806 1839 0
-1711 -1804 1837 0
-1711 -1803 1835 0
-1710 1865 0
-1710 -1832 1863 0
-1710 -1830 1861 0
-1710 -1828 1859 0
-1710 -1826 1857 0
-1710 -1824 1855 0
-1710 -1822 1853 0
-1710 -1820 1851 0
-1710 -1818 1849 0
-1710 -1816 1847 0
-1710 -1814 1845 0
-1710 -1812 1843 0
-1710 -1810 1841 0
-1710 -1808 1839 0
-1710 -1806 1837 0
-1710 -1804 1835 0
-1710 -1803 1834 0
c (( - aux393 + shift(x_00004_00004, -1) + shift(x_00002_00003, -1))<=0)
167 -1897 0
168 -1898 0
170 -1900 0
172 -1902 0
174 -1904 0
176 -1906 0
178 -1908 0
180 -1910 0
452 -1897 0
452 167 -1898 0
452 168 -1900 0
452 170 -1902 0
452 172 -1904 0
452 174 -1906 0
452 176 -1908 0
452 178 -1910 0
452 180 -1912 0
453 -1898 0
453 167 -1900 0
453 168 -1902 0
453 170 -1904 0
453 172 -1906 0
453 174 -1908 0
453 176 -1910 0
453 178 -1912 0
453 180 -1914 0
455 -1900 0
455 167 -1902 0
455 168 -1904 0
455 170 -1906 0
455 172 -1908 0
455 174 -1910 0
455 176 -1912 0
455 178 -1914 0
455 180 -1916 0
457 -1902 0
457 167 -1904 0
457 168 -1906 0
457 170 -1908 0
457 172 -1910 0
457 174 -1912 0
457 176 -1914 0
457 178 -1916 0
457 180 -1918 0
459 -1904 0
459 167 -1906 0
459 168 -1908 0
459 170 -1910 0
459 172 -1912 0
459 174 -1914 0
459 176 -1916 0
459 178 -1918 0
459 180 -1920 0
461 -1906 0
461 167 -1908 0
461 168 -1910 0
461 170 -1912 0
461 172 -1914 0
461 174 -1916 0
461 176 -1918 0
461 178 -1920 0
461 180 -1922 0
463 -1908 0
463 167 -1910 0
463 168 -1912 0
463 170 -1914 0
463 172 -1916 0
463 174 -1918 0
463 176 -1920 0
463 178 -1922 0
463 180 -1924 0
465 -1910 0
465 167 -1912 0
465 168 -1914 0
465 170 -1916 0
465 172 -1918 0
465 174 -1920 0
465 176 -1922 0
465 178 -1924 0
465 180 -1926 0
c (0<=( - aux393 + shift(x_00004_00004, -1) + shift(x_00002_00003, -1)))
-180 1926 0
-178 1924 0
-176 1922 0
-174 1920 0
-172 1918 0
-170 1916 0
-168 1914 0
-167 1912 0
-465 1926 0
-465 -180 1924 0
-465 -178 1922 0
-465 -176 1920 0
-465 -174 1918 0
-465 -172 1916 0
-465 -170 1914 0
-465 -168 1912 0
-465 -167 1910 0
-463 1924 0
-463 -180 1922 0
-463 -178 1920 0
-463 -176 1918 0
-463 -174 1916 0
-463 -172 1914 0
-463 -170 1912 0
-463 -168 1910 0
-463 -167 1908 0
-461 1922 0
-461 -180 1920 0
-461 -178 1918 0
-461 -176 1916 0
-461 -174 1914 0
-461 -172 1912 0
-461 -170 1910 0
-461 -168 1908 0
-461 -167 1906 0
-459 1920 0
-459 -180 1918 0
-459 -178 1916 0
-459 -176 1914 0
-459 -174 1912 0
-459 -172 1910 0
-459 -170 1908 0
-459 -168 1906 0
-459 -167 1904 0
-457 1918 0
-457 -180 1916 0
-457 -178 1914 0
-457 -176 1912 0
-457 -174 1910 0
-457 -172 1908 0
-457 -170 1906 0
-457 -168 1904 0
-457 -167 1902 0
-455 1916 0
-455 -180 1914 0
-455 -178 1912 0
-455 -176 1910 0
-455 -174 1908 0
-455 -172 1906 0
-455 -170 1904 0
-455 -168 1902 0
-455 -167 1900 0
-453 1914 0
-453 -180 1912 0
-453 -178 1910 0
-453 -176 1908 0
-453 -174 1906 0
-453 -172 1904 0
-453 -170 1902 0
-453 -168 1900 0
-453 -167 1898 0
-452 1912 0
-452 -180 1910 0
-452 -178 1908 0
-452 -176 1906 0
-452 -174 1904 0
-452 -172 1902 0
-452 -170 1900 0
-452 -168 1898 0
-452 -167 1897 0
c (( - aux394 + shift(x_00003_00004, -1) + shift(x_00002_00004, -1))<=0)
182 -1928 0
183 -1929 0
185 -1931 0
187 -1933 0
189 -1935 0
191 -1937 0
193 -1939 0
195 -1941 0
317 -1928 0
317 182 -1929 0
317 183 -1931 0
317 185 -1933 0
317 187 -1935 0
317 189 -1937 0
317 191 -1939 0
317 193 -1941 0
317 195 -1943 0
318 -1929 0
318 182 -1931 0
318 183 -1933 0
318 185 -1935 0
318 187 -1937 0
318 189 -1939 0
318 191 -1941 0
318 193 -1943 0
318 195 -1945 0
320 -1931 0
320 182 -1933 0
320 183 -1935 0
320 185 -1937 0
320 187 -1939 0
320 189 -1941 0
320 191 -1943 0
320 193 -1945 0
320 195 -1947 0
322 -1933 0
322 182 -1935 0
322 183 -1937 0
322 185 -1939 0
322 187 -1941 0
322 189 -1943 0
322 191 -1945 0
322 193 -1947 0
322 195 -1949 0
324 -1935 0
324 182 -1937 0
324 183 -1939 0
324 185 -1941 0
324 187 -1943 0
324 189 -1945 0
324 191 -1947 0
324 193 -1949 0
324 195 -1951 0
326 -1937 0
326 182 -1939 0
326 183 -1941 0
326 185 -1943 0
326 187 -1945 0
326 189 -1947 0
326 191 -1949 0
326 193 -1951 0
326 195 -1953 0
328 -1939 0
328 182 -1941 0
328 183 -1943 0
328 185 -1945 0
328 187 -1947 0
328 189 -1949 0
328 191 -1951 0
328 193 -1953 0
328 195 -1955 0
330 -1941 0
330 182 -1943 0
330 183 -1945 0
330 185 -1947 0
330 187 -1949 0
330 189 -1951 0
330 191 -1953 0
330 193 -1955 0
330 195 -1957 0
c (0<=( - aux394 + shift(x_00003_00004, -1) + shift(x_00002_00004, -1)))
-195 1957 0
-193 1955 0
-191 1953 0
-189 1951 0
-187 1949 0
-185 1947 0
-183 1945 0
-182 1943 0
-330 1957 0
-330 -195 1955 0
-330 -193 1953 0
-330 -191 1951 0
-330 -189 1949 0
-330 -187 1947 0
-330 -185 1945 0
-330 -183 1943 0
-330 -182 1941 0
-328 1955 0
-328 -195 1953 0
-328 -193 1951 0
-328 -191 1949 0
-328 -189 1947 0
-328 -187 1945 0
-328 -185 1943 0
-328 -183 1941 0
-328 -182 1939 0
-326 1953 0
-326 -195 1951 0
-326 -193 1949 0
-326 -191 1947 0
-326 -189 1945 0
-326 -187 1943 0
-326 -185 1941 0
-326 -183 1939 0
-326 -182 1937 0
-324 1951 0
-324 -195 1949 0
-324 -193 1947 0
-324 -191 1945 0
-324 -189 1943 0
-324 -187 1941 0
-324 -185 1939 0
-324 -183 1937 0
-324 -182 1935 0
-322 1949 0
-322 -195 1947 0
-322 -193 1945 0
-322 -191 1943 0
-322 -189 1941 0
-322 -187 1939 0
-322 -185 1937 0
-322 -183 1935 0
-322 -182 1933 0
-320 1947 0
-320 -195 1945 0
-320 -193 1943 0
-320 -191 1941 0
-320 -189 1939 0
-320 -187 1937 0
-320 -185 1935 0
-320 -183 1933 0
-320 -182 1931 0
-318 1945 0
-318 -195 1943 0
-318 -193 1941 0
-318 -191 1939 0
-318 -189 1937 0
-318 -187 1935 0
-318 -185 1933 0
-318 -183 1931 0
-318 -182 1929 0
-317 1943 0
-317 -195 1941 0
-317 -193 1939 0
-317 -191 1937 0
-317 -189 1935 0
-317 -187 1933 0
-317 -185 1931 0
-317 -183 1929 0
-317 -182 1928 0
c (( - aux395 + shift(x_00005_00007, -1) + shift(x_00003_00005, -1))<=0)
332 -1959 0
333 -1960 0
335 -1962 0
337 -1964 0
339 -1966 0
341 -1968 0
343 -1970 0
345 -1972 0
632 -1959 0
632 332 -1960 0
632 333 -1962 0
632 335 -1964 0
632 337 -1966 0
632 339 -1968 0
632 341 -1970 0
632 343 -1972 0
632 345 -1974 0
633 -1960 0
633 332 -1962 0
633 333 -1964 0
633 335 -1966 0
633 337 -1968 0
633 339 -1970 0
633 341 -1972 0
633 343 -1974 0
633 345 -1976 0
635 -1962 0
635 332 -1964 0
635 333 -1966 0
635 335 -1968 0
635 337 -1970 0
635 339 -1972 0
635 341 -1974 0
635 343 -1976 0
635 345 -1978 0
637 -1964 0
637 332 -1966 0
637 333 -1968 0
637 335 -1970 0
637 337 -1972 0
637 339 -1974 0
637 341 -1976 0
637 343 -1978 0
637 345 -1980 0
639 -1966 0
639 332 -1968 0
639 333 -1970 0
639 335 -1972 0
639 337 -1974 0
639 339 -1976 0
639 341 -1978 0
639 343 -1980 0
639 345 -1982 0
641 -1968 0
641 332 -1970 0
641 333 -1972 0
641 335 -1974 0
641 337 -1976 0
641 339 -1978 0
641 341 -1980 0
641 343 -1982 0
641 345 -1984 0
643 -1970 0
643 332 -1972 0
643 333 -1974 0
643 335 -1976 0
643 337 -1978 0
643 339 -1980 0
643 341 -1982 0
643 343 -1984 0
643 345 -1986 0
645 -1972 0
645 332 -1974 0
645 333 -1976 0
645 335 -1978 0
645 337 -1980 0
645 339 -1982 0
645 341 -1984 0
645 343 -1986 0
645 345 -1988 0
c (0<=( - aux395 + shift(x_00005_00007, -1) + shift(x_00003_00005, -1)))
-345 1988 0
-343 1986 0
-341 1984 0
-339 1982 0
-337 1980 0
-335 1978 0
-333 1976 0
-332 1974 0
-645 1988 0
-645 -345 1986 0
-645 -343 1984 0
-645 -341 1982 0
-645 -339 1980 0
-645 -337 1978 0
-645 -335 1976 0
-645 -333 1974 0
-645 -332 1972 0
-643 1986 0
-643 -345 1984 0
-643 -343 1982 0
-643 -341 1980 0
-643 -339 1978 0
-643 -337 1976 0
-643 -335 1974 0
-643 -333 1972 0
-643 -332 1970 0
-641 1984 0
-641 -345 1982 0
-641 -343 1980 0
-641 -341 1978 0
-641 -339 1976 0
-641 -337 1974 0
-641 -335 1972 0
-641 -333 1970 0
-641 -332 1968 0
-639 1982 0
-639 -345 1980 0
-639 -343 1978 0
-639 -341 1976 0
-639 -339 1974 0
-639 -337 1972 0
-639 -335 1970 0
-639 -333 1968 0
-639 -332 1966 0
-637 1980 0
-637 -345 1978 0
-637 -343 1976 0
-637 -341 1974 0
-637 -339 1972 0
-637 -337 1970 0
-637 -335 1968 0
-637 -333 1966 0
-637 -332 1964 0
-635 1978 0
-635 -345 1976 0
-635 -343 1974 0
-635 -341 1972 0
-635 -339 1970 0
-635 -337 1968 0
-635 -335 1966 0
-635 -333 1964 0
-635 -332 1962 0
-633 1976 0
-633 -345 1974 0
-633 -343 1972 0
-633 -341 1970 0
-633 -339 1968 0
-633 -337 1966 0
-633 -335 1964 0
-633 -333 1962 0
-633 -332 1960 0
-632 1974 0
-632 -345 1972 0
-632 -343 1970 0
-632 -341 1968 0
-632 -339 1966 0
-632 -337 1964 0
-632 -335 1962 0
-632 -333 1960 0
-632 -332 1959 0
c (( - aux396 + shift(x_00005_00006, -1) + shift(x_00004_00005, -1))<=0)
467 -1990 0
468 -1991 0
470 -1993 0
472 -1995 0
474 -1997 0
476 -1999 0
478 -2001 0
480 -2003 0
617 -1990 0
617 467 -1991 0
617 468 -1993 0
617 470 -1995 0
617 472 -1997 0
617 474 -1999 0
617 476 -2001 0
617 478 -2003 0
617 480 -2005 0
618 -1991 0
618 467 -1993 0
618 468 -1995 0
618 470 -1997 0
618 472 -1999 0
618 474 -2001 0
618 476 -2003 0
618 478 -2005 0
618 480 -2007 0
620 -1993 0
620 467 -1995 0
620 468 -1997 0
620 470 -1999 0
620 472 -2001 0
620 474 -2003 0
620 476 -2005 0
620 478 -2007 0
620 480 -2009 0
622 -1995 0
622 467 -1997 0
622 468 -1999 0
622 470 -2001 0
622 472 -2003 0
622 474 -2005 0
622 476 -2007 0
622 478 -2009 0
622 480 -2011 0
624 -1997 0
624 467 -1999 0
624 468 -2001 0
624 470 -2003 0
624 472 -2005 0
624 474 -2007 0
624 476 -2009 0
624 478 -2011 0
624 480 -2013 0
626 -1999 0
626 467 -2001 0
626 468 -2003 0
626 470 -2005 0
626 472 -2007 0
626 474 -2009 0
626 476 -2011 0
626 478 -2013 0
626 480 -2015 0
628 -2001 0
628 467 -2003 0
628 468 -2005 0
628 470 -2007 0
628 472 -2009 0
628 474 -2011 0
628 476 -2013 0
628 478 -2015 0
628 480 -2017 0
630 -2003 0
630 467 -2005 0
630 468 -2007 0
630 470 -2009 0
630 472 -2011 0
630 474 -2013 0
630 476 -2015 0
630 478 -2017 0
630 480 -2019 0
c (0<=( - aux396 + shift(x_00005_00006, -1) + shift(x_00004_00005, -1)))
-480 2019 0
-478 2017 0
-476 2015 0
-474 2013 0
-472 2011 0
-470 2009 0
-468 2007 0
-467 2005 0
-630 2019 0
-630 -480 2017 0
-630 -478 2015 0
-630 -476 2013 0
-630 -474 2011 0
-630 -472 2009 0
-630 -470 2007 0
-630 -468 2005 0
-630 -467 2003 0
-628 2017 0
-628 -480 2015 0
-628 -478 2013 0
-628 -476 2011 0
-628 -474 2009 0
-628 -472 2007 0
-628 -470 2005 0
-628 -468 2003 0
-628 -467 2001 0
-626 2015 0
-626 -480 2013 0
-626 -478 2011 0
-626 -476 2009 0
-626 -474 2007 0
-626 -472 2005 0
-626 -470 2003 0
-626 -468 2001 0
-626 -467 1999 0
-624 2013 0
-624 -480 2011 0
-624 -478 2009 0
-624 -476 2007 0
-624 -474 2005 0
-624 -472 2003 0
-624 -470 2001 0
-624 -468 1999 0
-624 -467 1997 0
-622 2011 0
-622 -480 2009 0
-622 -478 2007 0
-622 -476 2005 0
-622 -474 2003 0
-622 -472 2001 0
-622 -470 1999 0
-622 -468 1997 0
-622 -467 1995 0
-620 2009 0
-620 -480 2007 0
-620 -478 2005 0
-620 -476 2003 0
-620 -474 2001 0
-620 -472 1999 0
-620 -470 1997 0
-620 -468 1995 0
-620 -467 1993 0
-618 2007 0
-618 -480 2005 0
-618 -478 2003 0
-618 -476 2001 0
-618 -474 1999 0
-618 -472 1997 0
-618 -470 1995 0
-618 -468 1993 0
-618 -467 1991 0
-617 2005 0
-617 -480 2003 0
-617 -478 2001 0
-617 -476 1999 0
-617 -474 1997 0
-617 -472 1995 0
-617 -470 1993 0
-617 -468 1991 0
-617 -467 1990 0
c ((shift(x_00007_00005, -1) - aux398 + shift(x_00006_00005, -1))<=0)
737 -2052 0
738 -2053 0
740 -2055 0
742 -2057 0
744 -2059 0
746 -2061 0
748 -2063 0
750 -2065 0
872 -2052 0
872 737 -2053 0
872 738 -2055 0
872 740 -2057 0
872 742 -2059 0
872 744 -2061 0
872 746 -2063 0
872 748 -2065 0
872 750 -2067 0
873 -2053 0
873 737 -2055 0
873 738 -2057 0
873 740 -2059 0
873 742 -2061 0
873 744 -2063 0
873 746 -2065 0
873 748 -2067 0
873 750 -2069 0
875 -2055 0
875 737 -2057 0
875 738 -2059 0
875 740 -2061 0
875 742 -2063 0
875 744 -2065 0
875 746 -2067 0
875 748 -2069 0
875 750 -2071 0
877 -2057 0
877 737 -2059 0
877 738 -2061 0
877 740 -2063 0
877 742 -2065 0
877 744 -2067 0
877 746 -2069 0
877 748 -2071 0
877 750 -2073 0
879 -2059 0
879 737 -2061 0
879 738 -2063 0
879 740 -2065 0
879 742 -2067 0
879 744 -2069 0
879 746 -2071 0
879 748 -2073 0
879 750 -2075 0
881 -2061 0
881 737 -2063 0
881 738 -2065 0
881 740 -2067 0
881 742 -2069 0
881 744 -2071 0
881 746 -2073 0
881 748 -2075 0
881 750 -2077 0
883 -2063 0
883 737 -2065 0
883 738 -2067 0
883 740 -2069 0
883 742 -2071 0
883 744 -2073 0
883 746 -2075 0
883 748 -2077 0
883 750 -2079 0
885 -2065 0
885 737 -2067 0
885 738 -2069 0
885 740 -2071 0
885 742 -2073 0
885 744 -2075 0
885 746 -2077 0
885 748 -2079 0
885 750 -2081 0
c (0<=(shift(x_00007_00005, -1) - aux398 + shift(x_00006_00005, -1)))
-750 2081 0
-748 2079 0
-746 2077 0
-744 2075 0
-742 2073 0
-740 2071 0
-738 2069 0
-737 2067 0
-885 2081 0
-885 -750 2079 0
-885 -748 2077 0
-885 -746 2075 0
-885 -744 2073 0
-885 -742 2071 0
-885 -740 2069 0
-885 -738 2067 0
-885 -737 2065 0
-883 2079 0
-883 -750 2077 0
-883 -748 2075 0
-883 -746 2073 0
-883 -744 2071 0
-883 -742 2069 0
-883 -740 2067 0
-883 -738 2065 0
-883 -737 2063 0
-881 2077 0
-881 -750 2075 0
-881 -748 2073 0
-881 -746 2071 0
-881 -744 2069 0
-881 -742 2067 0
-881 -740 2065 0
-881 -738 2063 0
-881 -737 2061 0
-879 2075 0
-879 -750 2073 0
-879 -748 2071 0
-879 -746 2069 0
-879 -744 2067 0
-879 -742 2065 0
-879 -740 2063 0
-879 -738 2061 0
-879 -737 2059 0
-877 2073 0
-877 -750 2071 0
-877 -748 2069 0
-877 -746 2067 0
-877 -744 2065 0
-877 -742 2063 0
-877 -740 2061 0
-877 -738 2059 0
-877 -737 2057 0
-875 2071 0
-875 -750 2069 0
-875 -748 2067 0
-875 -746 2065 0
-875 -744 2063 0
-875 -742 2061 0
-875 -740 2059 0
-875 -738 2057 0
-875 -737 2055 0
-873 2069 0
-873 -750 2067 0
-873 -748 2065 0
-873 -746 2063 0
-873 -744 2061 0
-873 -742 2059 0
-873 -740 2057 0
-873 -738 2055 0
-873 -737 2053 0
-872 2067 0
-872 -750 2065 0
-872 -748 2063 0
-872 -746 2061 0
-872 -744 2059 0
-872 -742 2057 0
-872 -740 2055 0
-872 -738 2053 0
-872 -737 2052 0
c (( - aux399 + shift(x_00005_00003, -1) + shift(x_00005_00005, -1))<=0)
602 -2083 0
603 -2084 0
605 -2086 0
607 -2088 0
609 -2090 0
611 -2092 0
613 -2094 0
615 -2096 0
572 -2083 0
572 602 -2084 0
572 603 -2086 0
572 605 -2088 0
572 607 -2090 0
572 609 -2092 0
572 611 -2094 0
572 613 -2096 0
572 615 -2098 0
573 -2084 0
573 602 -2086 0
573 603 -2088 0
573 605 -2090 0
573 607 -2092 0
573 609 -2094 0
573 611 -2096 0
573 613 -2098 0
573 615 -2100 0
575 -2086 0
575 602 -2088 0
575 603 -2090 0
575 605 -2092 0
575 607 -2094 0
575 609 -2096 0
575 611 -2098 0
575 613 -2100 0
575 615 -2102 0
577 -2088 0
577 602 -2090 0
577 603 -2092 0
577 605 -2094 0
577 607 -2096 0
577 609 -2098 0
577 611 -2100 0
577 613 -2102 0
577 615 -2104 0
579 -2090 0
579 602 -2092 0
579 603 -2094 0
579 605 -2096 0
579 607 -2098 0
579 609 -2100 0
579 611 -2102 0
579 613 -2104 0
579 615 -2106 0
581 -2092 0
581 602 -2094 0
581 603 -2096 0
581 605 -2098 0
581 607 -2100 0
581 609 -2102 0
581 611 -2104 0
581 613 -2106 0
581 615 -2108 0
583 -2094 0
583 602 -2096 0
583 603 -2098 0
583 605 -2100 0
583 607 -2102 0
583 609 -2104 0
583 611 -2106 0
583 613 -2108 0
583 615 -2110 0
585 -2096 0
585 602 -2098 0
585 603 -2100 0
585 605 -2102 0
585 607 -2104 0
585 609 -2106 0
585 611 -2108 0
585 613 -2110 0
585 615 -2112 0
c (0<=( - aux399 + shift(x_00005_00003, -1) + shift(x_00005_00005, -1)))
-615 2112 0
-613 2110 0
-611 2108 0
-609 2106 0
-607 2104 0
-605 2102 0
-603 2100 0
-602 2098 0
-585 2112 0
-585 -615 2110 0
-585 -613 2108 0
-585 -611 2106 0
-585 -609 2104 0
-585 -607 2102 0
-585 -605 2100 0
-585 -603 2098 0
-585 -602 2096 0
-583 2110 0
-583 -615 2108 0
-583 -613 2106 0
-583 -611 2104 0
-583 -609 2102 0
-583 -607 2100 0
-583 -605 2098 0
-583 -603 2096 0
-583 -602 2094 0
-581 2108 0
-581 -615 2106 0
-581 -613 2104 0
-581 -611 2102 0
-581 -609 2100 0
-581 -607 2098 0
-581 -605 2096 0
-581 -603 2094 0
-581 -602 2092 0
-579 2106 0
-579 -615 2104 0
-579 -613 2102 0
-579 -611 2100 0
-579 -609 2098 0
-579 -607 2096 0
-579 -605 2094 0
-579 -603 2092 0
-579 -602 2090 0
-577 2104 0
-577 -615 2102 0
-577 -613 2100 0
-577 -611 2098 0
-577 -609 2096 0
-577 -607 2094 0
-577 -605 2092 0
-577 -603 2090 0
-577 -602 2088 0
-575 2102 0
-575 -615 2100 0
-575 -613 2098 0
-575 -611 2096 0
-575 -609 2094 0
-575 -607 2092 0
-575 -605 2090 0
-575 -603 2088 0
-575 -602 2086 0
-573 2100 0
-573 -615 2098 0
-573 -613 2096 0
-573 -611 2094 0
-573 -609 2092 0
-573 -607 2090 0
-573 -605 2088 0
-573 -603 2086 0
-573 -602 2084 0
-572 2098 0
-572 -615 2096 0
-572 -613 2094 0
-572 -611 2092 0
-572 -609 2090 0
-572 -607 2088 0
-572 -605 2086 0
-572 -603 2084 0
-572 -602 2083 0
c ((shift(x_00007_00007, -1) - aux401 + shift(x_00006_00008, -1))<=0)
782 -2145 0
783 -2146 0
785 -2148 0
787 -2150 0
789 -2152 0
791 -2154 0
793 -2156 0
795 -2158 0
902 -2145 0
902 782 -2146 0
902 783 -2148 0
902 785 -2150 0
902 787 -2152 0
902 789 -2154 0
902 791 -2156 0
902 793 -2158 0
902 795 -2160 0
903 -2146 0
903 782 -2148 0
903 783 -2150 0
903 785 -2152 0
903 787 -2154 0
903 789 -2156 0
903 791 -2158 0
903 793 -2160 0
903 795 -2162 0
905 -2148 0
905 782 -2150 0
905 783 -2152 0
905 785 -2154 0
905 787 -2156 0
905 789 -2158 0
905 791 -2160 0
905 793 -2162 0
905 795 -2164 0
907 -2150 0
907 782 -2152 0
907 783 -2154 0
907 785 -2156 0
907 787 -2158 0
907 789 -2160 0
907 791 -2162 0
907 793 -2164 0
907 795 -2166 0
909 -2152 0
909 782 -2154 0
909 783 -2156 0
909 785 -2158 0
909 787 -2160 0
909 789 -2162 0
909 791 -2164 0
909 793 -2166 0
909 795 -2168 0
911 -2154 0
911 782 -2156 0
911 783 -2158 0
911 785 -2160 0
911 787 -2162 0
911 789 -2164 0
911 791 -2166 0
911 793 -2168 0
911 795 -2170 0
913 -2156 0
913 782 -2158 0
913 783 -2160 0
913 785 -2162 0
913 787 -2164 0
913 789 -2166 0
913 791 -2168 0
913 793 -2170 0
913 795 -2172 0
915 -2158 0
915 782 -2160 0
915 783 -2162 0
915 785 -2164 0
915 787 -2166 0
915 789 -2168 0
915 791 -2170 0
915 793 -2172 0
915 795 -2174 0
c (0<=(shift(x_00007_00007, -1) - aux401 + shift(x_00006_00008, -1)))
-795 2174 0
-793 2172 0
-791 2170 0
-789 2168 0
-787 2166 0
-785 2164 0
-783 2162 0
-782 2160 0
-915 2174 0
-915 -795 2172 0
-915 -793 2170 0
-915 -791 2168 0
-915 -789 2166 0
-915 -787 2164 0
-915 -785 2162 0
-915 -783 2160 0
-915 -782 2158 0
-913 2172 0
-913 -795 2170 0
-913 -793 2168 0
-913 -791 2166 0
-913 -789 2164 0
-913 -787 2162 0
-913 -785 2160 0
-913 -783 2158 0
-913 -782 2156 0
-911 2170 0
-911 -795 2168 0
-911 -793 2166 0
-911 -791 2164 0
-911 -789 2162 0
-911 -787 2160 0
-911 -785 2158 0
-911 -783 2156 0
-911 -782 2154 0
-909 2168 0
-909 -795 2166 0
-909 -793 2164 0
-909 -791 2162 0
-909 -789 2160 0
-909 -787 2158 0
-909 -785 2156 0
-909 -783 2154 0
-909 -782 2152 0
-907 2166 0
-907 -795 2164 0
-907 -793 2162 0
-907 -791 2160 0
-907 -789 2158 0
-907 -787 2156 0
-907 -785 2154 0
-907 -783 2152 0
-907 -782 2150 0
-905 2164 0
-905 -795 2162 0
-905 -793 2160 0
-905 -791 2158 0
-905 -789 2156 0
-905 -787 2154 0
-905 -785 2152 0
-905 -783 2150 0
-905 -782 2148 0
-903 2162 0
-903 -795 2160 0
-903 -793 2158 0
-903 -791 2156 0
-903 -789 2154 0
-903 -787 2152 0
-903 -785 2150 0
-903 -783 2148 0
-903 -782 2146 0
-902 2160 0
-902 -795 2158 0
-902 -793 2156 0
-902 -791 2154 0
-902 -789 2152 0
-902 -787 2150 0
-902 -785 2148 0
-902 -783 2146 0
-902 -782 2145 0
c ((shift(x_00007_00008, -1) - aux402 + shift(x_00006_00007, -1))<=0)
767 -2176 0
768 -2177 0
770 -2179 0
772 -2181 0
774 -2183 0
776 -2185 0
778 -2187 0
780 -2189 0
917 -2176 0
917 767 -2177 0
917 768 -2179 0
917 770 -2181 0
917 772 -2183 0
917 774 -2185 0
917 776 -2187 0
917 778 -2189 0
917 780 -2191 0
918 -2177 0
918 767 -2179 0
918 768 -2181 0
918 770 -2183 0
918 772 -2185 0
918 774 -2187 0
918 776 -2189 0
918 778 -2191 0
918 780 -2193 0
920 -2179 0
920 767 -2181 0
920 768 -2183 0
920 770 -2185 0
920 772 -2187 0
920 774 -2189 0
920 776 -2191 0
920 778 -2193 0
920 780 -2195 0
922 -2181 0
922 767 -2183 0
922 768 -2185 0
922 770 -2187 0
922 772 -2189 0
922 774 -2191 0
922 776 -2193 0
922 778 -2195 0
922 780 -2197 0
924 -2183 0
924 767 -2185 0
924 768 -2187 0
924 770 -2189 0
924 772 -2191 0
924 774 -2193 0
924 776 -2195 0
924 778 -2197 0
924 780 -2199 0
926 -2185 0
926 767 -2187 0
926 768 -2189 0
926 770 -2191 0
926 772 -2193 0
926 774 -2195 0
926 776 -2197 0
926 778 -2199 0
926 780 -2201 0
928 -2187 0
928 767 -2189 0
928 768 -2191 0
928 770 -2193 0
928 772 -2195 0
928 774 -2197 0
928 776 -2199 0
928 778 -2201 0
928 780 -2203 0
930 -2189 0
930 767 -2191 0
930 768 -2193 0
930 770 -2195 0
930 772 -2197 0
930 774 -2199 0
930 776 -2201 0
930 778 -2203 0
930 780 -2205 0
c (0<=(shift(x_00007_00008, -1) - aux402 + shift(x_00006_00007, -1)))
-780 2205 0
-778 2203 0
-776 2201 0
-774 2199 0
-772 2197 0
-770 2195 0
-768 2193 0
-767 2191 0
-930 2205 0
-930 -780 2203 0
-930 -778 2201 0
-930 -776 2199 0
-930 -774 2197 0
-930 -772 2195 0
-930 -770 2193 0
-930 -768 2191 0
-930 -767 2189 0
-928 2203 0
-928 -780 2201 0
-928 -778 2199 0
-928 -776 2197 0
-928 -774 2195 0
-928 -772 2193 0
-928 -770 2191 0
-928 -768 2189 0
-928 -767 2187 0
-926 2201 0
-926 -780 2199 0
-926 -778 2197 0
-926 -776 2195 0
-926 -774 2193 0
-926 -772 2191 0
-926 -770 2189 0
-926 -768 2187 0
-926 -767 2185 0
-924 2199 0
-924 -780 2197 0
-924 -778 2195 0
-924 -776 2193 0
-924 -774 2191 0
-924 -772 2189 0
-924 -770 2187 0
-924 -768 2185 0
-924 -767 2183 0
-922 2197 0
-922 -780 2195 0
-922 -778 2193 0
-922 -776 2191 0
-922 -774 2189 0
-922 -772 2187 0
-922 -770 2185 0
-922 -768 2183 0
-922 -767 2181 0
-920 2195 0
-920 -780 2193 0
-920 -778 2191 0
-920 -776 2189 0
-920 -774 2187 0
-920 -772 2185 0
-920 -770 2183 0
-920 -768 2181 0
-920 -767 2179 0
-918 2193 0
-918 -780 2191 0
-918 -778 2189 0
-918 -776 2187 0
-918 -774 2185 0
-918 -772 2183 0
-918 -770 2181 0
-918 -768 2179 0
-918 -767 2177 0
-917 2191 0
-917 -780 2189 0
-917 -778 2187 0
-917 -776 2185 0
-917 -774 2183 0
-917 -772 2181 0
-917 -770 2179 0
-917 -768 2177 0
-917 -767 2176 0
c ((shift(x_00007_00002, -1) - aux403 + shift(x_00009_00002, -1))<=0)
1097 -2207 0
1098 -2208 0
1100 -2210 0
1102 -2212 0
1104 -2214 0
1106 -2216 0
1108 -2218 0
1110 -2220 0
827 -2207 0
827 1097 -2208 0
827 1098 -2210 0
827 1100 -2212 0
827 1102 -2214 0
827 1104 -2216 0
827 1106 -2218 0
827 1108 -2220 0
827 1110 -2222 0
828 -2208 0
828 1097 -2210 0
828 1098 -2212 0
828 1100 -2214 0
828 1102 -2216 0
828 1104 -2218 0
828 1106 -2220 0
828 1108 -2222 0
828 1110 -2224 0
830 -2210 0
830 1097 -2212 0
830 1098 -2214 0
830 1100 -2216 0
830 1102 -2218 0
830 1104 -2220 0
830 1106 -2222 0
830 1108 -2224 0
830 1110 -2226 0
832 -2212 0
832 1097 -2214 0
832 1098 -2216 0
832 1100 -2218 0
832 1102 -2220 0
832 1104 -2222 0
832 1106 -2224 0
832 1108 -2226 0
832 1110 -2228 0
834 -2214 0
834 1097 -2216 0
834 1098 -2218 0
834 1100 -2220 0
834 1102 -2222 0
834 1104 -2224 0
834 1106 -2226 0
834 1108 -2228 0
834 1110 -2230 0
836 -2216 0
836 1097 -2218 0
836 1098 -2220 0
836 1100 -2222 0
836 1102 -2224 0
836 1104 -2226 0
836 1106 -2228 0
836 1108 -2230 0
836 1110 -2232 0
838 -2218 0
838 1097 -2220 0
838 1098 -2222 0
838 1100 -2224 0
838 1102 -2226 0
838 1104 -2228 0
838 1106 -2230 0
838 1108 -2232 0
838 1110 -2234 0
840 -2220 0
840 1097 -2222 0
840 1098 -2224 0
840 1100 -2226 0
840 1102 -2228 0
840 1104 -2230 0
840 1106 -2232 0
840 1108 -2234 0
840 1110 -2236 0
c (0<=(shift(x_00007_00002, -1) - aux403 + shift(x_00009_00002, -1)))
-1110 2236 0
-1108 2234 0
-1106 2232 0
-1104 2230 0
-1102 2228 0
-1100 2226 0
-1098 2224 0
-1097 2222 0
-840 2236 0
-840 -1110 2234 0
-840 -1108 2232 0
-840 -1106 2230 0
-840 -1104 2228 0
-840 -1102 2226 0
-840 -1100 2224 0
-840 -1098 2222 0
-840 -1097 2220 0
-838 2234 0
-838 -1110 2232 0
-838 -1108 2230 0
-838 -1106 2228 0
-838 -1104 2226 0
-838 -1102 2224 0
-838 -1100 2222 0
-838 -1098 2220 0
-838 -1097 2218 0
-836 2232 0
-836 -1110 2230 0
-836 -1108 2228 0
-836 -1106 2226 0
-836 -1104 2224 0
-836 -1102 2222 0
-836 -1100 2220 0
-836 -1098 2218 0
-836 -1097 2216 0
-834 2230 0
-834 -1110 2228 0
-834 -1108 2226 0
-834 -1106 2224 0
-834 -1104 2222 0
-834 -1102 2220 0
-834 -1100 2218 0
-834 -1098 2216 0
-834 -1097 2214 0
-832 2228 0
-832 -1110 2226 0
-832 -1108 2224 0
-832 -1106 2222 0
-832 -1104 2220 0
-832 -1102 2218 0
-832 -1100 2216 0
-832 -1098 2214 0
-832 -1097 2212 0
-830 2226 0
-830 -1110 2224 0
-830 -1108 2222 0
-830 -1106 2220 0
-830 -1104 2218 0
-830 -1102 2216 0
-830 -1100 2214 0
-830 -1098 2212 0
-830 -1097 2210 0
-828 2224 0
-828 -1110 2222 0
-828 -1108 2220 0
-828 -1106 2218 0
-828 -1104 2216 0
-828 -1102 2214 0
-828 -1100 2212 0
-828 -1098 2210 0
-828 -1097 2208 0
-827 2222 0
-827 -1110 2220 0
-827 -1108 2218 0
-827 -1106 2216 0
-827 -1104 2214 0
-827 -1102 2212 0
-827 -1100 2210 0
-827 -1098 2208 0
-827 -1097 2207 0
c (( - aux404 + shift(x_00008_00001, -1) + shift(x_00009_00001, -1))<=0)
1082 -2238 0
1083 -2239 0
1085 -2241 0
1087 -2243 0
1089 -2245 0
1091 -2247 0
1093 -2249 0
1095 -2251 0
947 -2238 0
947 1082 -2239 0
947 1083 -2241 0
947 1085 -2243 0
947 1087 -2245 0
947 1089 -2247 0
947 1091 -2249 0
947 1093 -2251 0
947 1095 -2253 0
948 -2239 0
948 1082 -2241 0
948 1083 -2243 0
948 1085 -2245 0
948 1087 -2247 0
948 1089 -2249 0
948 1091 -2251 0
948 1093 -2253 0
948 1095 -2255 0
950 -2241 0
950 1082 -2243 0
950 1083 -2245 0
950 1085 -2247 0
950 1087 -2249 0
950 1089 -2251 0
950 1091 -2253 0
950 1093 -2255 0
950 1095 -2257 0
952 -2243 0
952 1082 -2245 0
952 1083 -2247 0
952 1085 -2249 0
952 1087 -2251 0
952 1089 -2253 0
952 1091 -2255 0
952 1093 -2257 0
952 1095 -2259 0
954 -2245 0
954 1082 -2247 0
954 1083 -2249 0
954 1085 -2251 0
954 1087 -2253 0
954 1089 -2255 0
954 1091 -2257 0
954 1093 -2259 0
954 1095 -2261 0
956 -2247 0
956 1082 -2249 0
956 1083 -2251 0
956 1085 -2253 0
956 1087 -2255 0
956 1089 -2257 0
956 1091 -2259 0
956 1093 -2261 0
956 1095 -2263 0
958 -2249 0
958 1082 -2251 0
958 1083 -2253 0
958 1085 -2255 0
958 1087 -2257 0
958 1089 -2259 0
958 1091 -2261 0
958 1093 -2263 0
958 1095 -2265 0
960 -2251 0
960 1082 -2253 0
960 1083 -2255 0
960 1085 -2257 0
960 1087 -2259 0
960 1089 -2261 0
960 1091 -2263 0
960 1093 -2265 0
960 1095 -2267 0
c (0<=( - aux404 + shift(x_00008_00001, -1) + shift(x_00009_00001, -1)))
-1095 2267 0
-1093 2265 0
-1091 2263 0
-1089 2261 0
-1087 2259 0
-1085 2257 0
-1083 2255 0
-1082 2253 0
-960 2267 0
-960 -1095 2265 0
-960 -1093 2263 0
-960 -1091 2261 0
-960 -1089 2259 0
-960 -1087 2257 0
-960 -1085 2255 0
-960 -1083 2253 0
-960 -1082 2251 0
-958 2265 0
-958 -1095 2263 0
-958 -1093 2261 0
-958 -1091 2259 0
-958 -1089 2257 0
-958 -1087 2255 0
-958 -1085 2253 0
-958 -1083 2251 0
-958 -1082 2249 0
-956 2263 0
-956 -1095 2261 0
-956 -1093 2259 0
-956 -1091 2257 0
-956 -1089 2255 0
-956 -1087 2253 0
-956 -1085 2251 0
-956 -1083 2249 0
-956 -1082 2247 0
-954 2261 0
-954 -1095 2259 0
-954 -1093 2257 0
-954 -1091 2255 0
-954 -1089 2253 0
-954 -1087 2251 0
-954 -1085 2249 0
-954 -1083 2247 0
-954 -1082 2245 0
-952 2259 0
-952 -1095 2257 0
-952 -1093 2255 0
-952 -1091 2253 0
-952 -1089 2251 0
-952 -1087 2249 0
-952 -1085 2247 0
-952 -1083 2245 0
-952 -1082 2243 0
-950 2257 0
-950 -1095 2255 0
-950 -1093 2253 0
-950 -1091 2251 0
-950 -1089 2249 0
-950 -1087 2247 0
-950 -1085 2245 0
-950 -1083 2243 0
-950 -1082 2241 0
-948 2255 0
-948 -1095 2253 0
-948 -1093 2251 0
-948 -1091 2249 0
-948 -1089 2247 0
-948 -1087 2245 0
-948 -1085 2243 0
-948 -1083 2241 0
-948 -1082 2239 0
-947 2253 0
-947 -1095 2251 0
-947 -1093 2249 0
-947 -1091 2247 0
-947 -1089 2245 0
-947 -1087 2243 0
-947 -1085 2241 0
-947 -1083 2239 0
-947 -1082 2238 0
c (( - aux405 + shift(x_00008_00002, -1) + shift(x_00008_00003, -1))<=0)
977 -2269 0
978 -2270 0
980 -2272 0
982 -2274 0
984 -2276 0
986 -2278 0
988 -2280 0
990 -2282 0
962 -2269 0
962 977 -2270 0
962 978 -2272 0
962 980 -2274 0
962 982 -2276 0
962 984 -2278 0
962 986 -2280 0
962 988 -2282 0
962 990 -2284 0
963 -2270 0
963 977 -2272 0
963 978 -2274 0
963 980 -2276 0
963 982 -2278 0
963 984 -2280 0
963 986 -2282 0
963 988 -2284 0
963 990 -2286 0
965 -2272 0
965 977 -2274 0
965 978 -2276 0
965 980 -2278 0
965 982 -2280 0
965 984 -2282 0
965 986 -2284 0
965 988 -2286 0
965 990 -2288 0
967 -2274 0
967 977 -2276 0
967 978 -2278 0
967 980 -2280 0
967 982 -2282 0
967 984 -2284 0
967 986 -2286 0
967 988 -2288 0
967 990 -2290 0
969 -2276 0
969 977 -2278 0
969 978 -2280 0
969 980 -2282 0
969 982 -2284 0
969 984 -2286 0
969 986 -2288 0
969 988 -2290 0
969 990 -2292 0
971 -2278 0
971 977 -2280 0
971 978 -2282 0
971 980 -2284 0
971 982 -2286 0
971 984 -2288 0
971 986 -2290 0
971 988 -2292 0
971 990 -2294 0
973 -2280 0
973 977 -2282 0
973 978 -2284 0
973 980 -2286 0
973 982 -2288 0
973 984 -2290 0
973 986 -2292 0
973 988 -2294 0
973 990 -2296 0
975 -2282 0
975 977 -2284 0
975 978 -2286 0
975 980 -2288 0
975 982 -2290 0
975 984 -2292 0
975 986 -2294 0
975 988 -2296 0
975 990 -2298 0
c (0<=( - aux405 + shift(x_00008_00002, -1) + shift(x_00008_00003, -1)))
-990 2298 0
-988 2296 0
-986 2294 0
-984 2292 0
-982 2290 0
-980 2288 0
-978 2286 0
-977 2284 0
-975 2298 0
-975 -990 2296 0
-975 -988 2294 0
-975 -986 2292 0
-975 -984 2290 0
-975 -982 2288 0
-975 -980 2286 0
-975 -978 2284 0
-975 -977 2282 0
-973 2296 0
-973 -990 2294 0
-973 -988 2292 0
-973 -986 2290 0
-973 -984 2288 0
-973 -982 2286 0
-973 -980 2284 0
-973 -978 2282 0
-973 -977 2280 0
-971 2294 0
-971 -990 2292 0
-971 -988 2290 0
-971 -986 2288 0
-971 -984 2286 0
-971 -982 2284 0
-971 -980 2282 0
-971 -978 2280 0
-971 -977 2278 0
-969 2292 0
-969 -990 2290 0
-969 -988 2288 0
-969 -986 2286 0
-969 -984 2284 0
-969 -982 2282 0
-969 -980 2280 0
-969 -978 2278 0
-969 -977 2276 0
-967 2290 0
-967 -990 2288 0
-967 -988 2286 0
-967 -986 2284 0
-967 -984 2282 0
-967 -982 2280 0
-967 -980 2278 0
-967 -978 2276 0
-967 -977 2274 0
-965 2288 0
-965 -990 2286 0
-965 -988 2284 0
-965 -986 2282 0
-965 -984 2280 0
-965 -982 2278 0
-965 -980 2276 0
-965 -978 2274 0
-965 -977 2272 0
-963 2286 0
-963 -990 2284 0
-963 -988 2282 0
-963 -986 2280 0
-963 -984 2278 0
-963 -982 2276 0
-963 -980 2274 0
-963 -978 2272 0
-963 -977 2270 0
-962 2284 0
-962 -990 2282 0
-962 -988 2280 0
-962 -986 2278 0
-962 -984 2276 0
-962 -982 2274 0
-962 -980 2272 0
-962 -978 2270 0
-962 -977 2269 0
c ((SATLiteral(272) - aux408 + SATLiteral(542))<=0)
-542 -2362 0
-272 -2362 0
-272 -542 -2363 0
c (0<=(SATLiteral(272) - aux408 + SATLiteral(542)))
542 2363 0
272 2363 0
272 542 2362 0
c ((SATLiteral(947) - aux409 + SATLiteral(812))<=0)
-812 -2365 0
-947 -2365 0
-947 -812 -2366 0
c (0<=(SATLiteral(947) - aux409 + SATLiteral(812)))
812 2366 0
947 2366 0
947 812 2365 0
c (( - aux410 + SATLiteral(677) + SATLiteral(137))<=0)
-137 -2368 0
-677 -2368 0
-677 -137 -2369 0
c (0<=( - aux410 + SATLiteral(677) + SATLiteral(137)))
137 2369 0
677 2369 0
677 137 2368 0
c (( - aux411 + SATLiteral(407) + SATLiteral(1082))<=0)
-1082 -2371 0
-407 -2371 0
-407 -1082 -2372 0
c (0<=( - aux411 + SATLiteral(407) + SATLiteral(1082)))
1082 2372 0
407 2372 0
407 1082 2371 0
c ((aux411 - aux412 + SATLiteral(2))<=0)
2371 -2374 0
2372 -2375 0
-2 -2374 0
-2 2371 -2375 0
-2 2372 -2377 0
c (0<=(aux411 - aux412 + SATLiteral(2)))
-2372 2377 0
-2371 2375 0
2 2377 0
2 -2372 2375 0
2 -2371 2374 0
c ((aux408 + aux410 - aux413)<=0)
2368 -2379 0
2369 -2380 0
2362 -2379 0
2362 2368 -2380 0
2362 2369 -2382 0
2363 -2380 0
2363 2368 -2382 0
2363 2369 -2384 0
c (0<=(aux408 + aux410 - aux413))
-2369 2384 0
-2368 2382 0
-2363 2384 0
-2363 -2369 2382 0
-2363 -2368 2380 0
-2362 2382 0
-2362 -2369 2380 0
-2362 -2368 2379 0
c ((SATLiteral(274) - aux414 + SATLiteral(544))<=0)
-544 -2386 0
-274 -2386 0
-274 -544 -2387 0
c (0<=(SATLiteral(274) - aux414 + SATLiteral(544)))
544 2387 0
274 2387 0
274 544 2386 0
c ((SATLiteral(949) - aux415 + SATLiteral(814))<=0)
-814 -2389 0
-949 -2389 0
-949 -814 -2390 0
c (0<=(SATLiteral(949) - aux415 + SATLiteral(814)))
814 2390 0
949 2390 0
949 814 2389 0
c (( - aux416 + SATLiteral(679) + SATLiteral(139))<=0)
-139 -2392 0
-679 -2392 0
-679 -139 -2393 0
c (0<=( - aux416 + SATLiteral(679) + SATLiteral(139)))
139 2393 0
679 2393 0
679 139 2392 0
c (( - aux417 + SATLiteral(409) + SATLiteral(1084))<=0)
-1084 -2395 0
-409 -2395 0
-409 -1084 -2396 0
c (0<=( - aux417 + SATLiteral(409) + SATLiteral(1084)))
1084 2396 0
409 2396 0
409 1084 2395 0
c ((aux417 - aux418 + SATLiteral(4))<=0)
2395 -2398 0
2396 -2399 0
-4 -2398 0
-4 2395 -2399 0
-4 2396 -2401 0
c (0<=(aux417 - aux418 + SATLiteral(4)))
-2396 2401 0
-2395 2399 0
4 2401 0
4 -2396 2399 0
4 -2395 2398 0
c ((aux414 + aux416 - aux419)<=0)
2392 -2403 0
2393 -2404 0
2386 -2403 0
2386 2392 -2404 0
2386 2393 -2406 0
2387 -2404 0
2387 2392 -2406 0
2387 2393 -2408 0
c (0<=(aux414 + aux416 - aux419))
-2393 2408 0
-2392 2406 0
-2387 2408 0
-2387 -2393 2406 0
-2387 -2392 2404 0
-2386 2406 0
-2386 -2393 2404 0
-2386 -2392 2403 0
c ((SATLiteral(276) - aux420 + SATLiteral(546))<=0)
-546 -2410 0
-276 -2410 0
-276 -546 -2411 0
c (0<=(SATLiteral(276) - aux420 + SATLiteral(546)))
546 2411 0
276 2411 0
276 546 2410 0
c ((SATLiteral(951) - aux421 + SATLiteral(816))<=0)
-816 -2413 0
-951 -2413 0
-951 -816 -2414 0
c (0<=(SATLiteral(951) - aux421 + SATLiteral(816)))
816 2414 0
951 2414 0
951 816 2413 0
c (( - aux422 + SATLiteral(681) + SATLiteral(141))<=0)
-141 -2416 0
-681 -2416 0
-681 -141 -2417 0
c (0<=( - aux422 + SATLiteral(681) + SATLiteral(141)))
141 2417 0
681 2417 0
681 141 2416 0
c (( - aux423 + SATLiteral(411) + SATLiteral(1086))<=0)
-1086 -2419 0
-411 -2419 0
-411 -1086 -2420 0
c (0<=( - aux423 + SATLiteral(411) + SATLiteral(1086)))
1086 2420 0
411 2420 0
411 1086 2419 0
c ((aux423 - aux424 + SATLiteral(6))<=0)
2419 -2422 0
2420 -2423 0
-6 -2422 0
-6 2419 -2423 0
-6 2420 -2425 0
c (0<=(aux423 - aux424 + SATLiteral(6)))
-2420 2425 0
-2419 2423 0
6 2425 0
6 -2420 2423 0
6 -2419 2422 0
c ((aux420 + aux422 - aux425)<=0)
2416 -2427 0
2417 -2428 0
2410 -2427 0
2410 2416 -2428 0
2410 2417 -2430 0
2411 -2428 0
2411 2416 -2430 0
2411 2417 -2432 0
c (0<=(aux420 + aux422 - aux425))
-2417 2432 0
-2416 2430 0
-2411 2432 0
-2411 -2417 2430 0
-2411 -2416 2428 0
-2410 2430 0
-2410 -2417 2428 0
-2410 -2416 2427 0
c ((SATLiteral(278) - aux426 + SATLiteral(548))<=0)
-548 -2434 0
-278 -2434 0
-278 -548 -2435 0
c (0<=(SATLiteral(278) - aux426 + SATLiteral(548)))
548 2435 0
278 2435 0
278 548 2434 0
c ((SATLiteral(953) - aux427 + SATLiteral(818))<=0)
-818 -2437 0
-953 -2437 0
-953 -818 -2438 0
c (0<=(SATLiteral(953) - aux427 + SATLiteral(818)))
818 2438 0
953 2438 0
953 818 2437 0
c (( - aux428 + SATLiteral(683) + SATLiteral(143))<=0)
-143 -2440 0
-683 -2440 0
-683 -143 -2441 0
c (0<=( - aux428 + SATLiteral(683) + SATLiteral(143)))
143 2441 0
683 2441 0
683 143 2440 0
c (( - aux429 + SATLiteral(413) + SATLiteral(1088))<=0)
-1088 -2443 0
-413 -2443 0
-413 -1088 -2444 0
c (0<=( - aux429 + SATLiteral(413) + SATLiteral(1088)))
1088 2444 0
413 2444 0
413 1088 2443 0
c ((aux429 - aux430 + SATLiteral(8))<=0)
2443 -2446 0
2444 -2447 0
-8 -2446 0
-8 2443 -2447 0
-8 2444 -2449 0
c (0<=(aux429 - aux430 + SATLiteral(8)))
-2444 2449 0
-2443 2447 0
8 2449 0
8 -2444 2447 0
8 -2443 2446 0
c ((aux426 + aux428 - aux431)<=0)
2440 -2451 0
2441 -2452 0
2434 -2451 0
2434 2440 -2452 0
2434 2441 -2454 0
2435 -2452 0
2435 2440 -2454 0
2435 2441 -2456 0
c (0<=(aux426 + aux428 - aux431))
-2441 2456 0
-2440 2454 0
-2435 2456 0
-2435 -2441 2454 0
-2435 -2440 2452 0
-2434 2454 0
-2434 -2441 2452 0
-2434 -2440 2451 0
c ((SATLiteral(280) - aux432 + SATLiteral(550))<=0)
-550 -2458 0
-280 -2458 0
-280 -550 -2459 0
c (0<=(SATLiteral(280) - aux432 + SATLiteral(550)))
550 2459 0
280 2459 0
280 550 2458 0
c ((SATLiteral(955) - aux433 + SATLiteral(820))<=0)
-820 -2461 0
-955 -2461 0
-955 -820 -2462 0
c (0<=(SATLiteral(955) - aux433 + SATLiteral(820)))
820 2462 0
955 2462 0
955 820 2461 0
c (( - aux434 + SATLiteral(685) + SATLiteral(145))<=0)
-145 -2464 0
-685 -2464 0
-685 -145 -2465 0
c (0<=( - aux434 + SATLiteral(685) + SATLiteral(145)))
145 2465 0
685 2465 0
685 145 2464 0
c (( - aux435 + SATLiteral(415) + SATLiteral(1090))<=0)
-1090 -2467 0
-415 -2467 0
-415 -1090 -2468 0
c (0<=( - aux435 + SATLiteral(415) + SATLiteral(1090)))
1090 2468 0
415 2468 0
415 1090 2467 0
c ((aux435 - aux436 + SATLiteral(10))<=0)
2467 -2470 0
2468 -2471 0
-10 -2470 0
-10 2467 -2471 0
-10 2468 -2473 0
c (0<=(aux435 - aux436 + SATLiteral(10)))
-2468 2473 0
-2467 2471 0
10 2473 0
10 -2468 2471 0
10 -2467 2470 0
c ((aux432 + aux434 - aux437)<=0)
2464 -2475 0
2465 -2476 0
2458 -2475 0
2458 2464 -2476 0
2458 2465 -2478 0
2459 -2476 0
2459 2464 -2478 0
2459 2465 -2480 0
c (0<=(aux432 + aux434 - aux437))
-2465 2480 0
-2464 2478 0
-2459 2480 0
-2459 -2465 2478 0
-2459 -2464 2476 0
-2458 2478 0
-2458 -2465 2476 0
-2458 -2464 2475 0
c ((SATLiteral(282) - aux438 + SATLiteral(552))<=0)
-552 -2482 0
-282 -2482 0
-282 -552 -2483 0
c (0<=(SATLiteral(282) - aux438 + SATLiteral(552)))
552 2483 0
282 2483 0
282 552 2482 0
c ((SATLiteral(957) - aux439 + SATLiteral(822))<=0)
-822 -2485 0
-957 -2485 0
-957 -822 -2486 0
c (0<=(SATLiteral(957) - aux439 + SATLiteral(822)))
822 2486 0
957 2486 0
957 822 2485 0
c (( - aux440 + SATLiteral(687) + SATLiteral(147))<=0)
-147 -2488 0
-687 -2488 0
-687 -147 -2489 0
c (0<=( - aux440 + SATLiteral(687) + SATLiteral(147)))
147 2489 0
687 2489 0
687 147 2488 0
c (( - aux441 + SATLiteral(417) + SATLiteral(1092))<=0)
-1092 -2491 0
-417 -2491 0
-417 -1092 -2492 0
c (0<=( - aux441 + SATLiteral(417) + SATLiteral(1092)))
1092 2492 0
417 2492 0
417 1092 2491 0
c ((aux441 - aux442 + SATLiteral(12))<=0)
2491 -2494 0
2492 -2495 0
-12 -2494 0
-12 2491 -2495 0
-12 2492 -2497 0
c (0<=(aux441 - aux442 + SATLiteral(12)))
-2492 2497 0
-2491 2495 0
12 2497 0
12 -2492 2495 0
12 -2491 2494 0
c ((aux438 + aux440 - aux443)<=0)
2488 -2499 0
2489 -2500 0
2482 -2499 0
2482 2488 -2500 0
2482 2489 -2502 0
2483 -2500 0
2483 2488 -2502 0
2483 2489 -2504 0
c (0<=(aux438 + aux440 - aux443))
-2489 2504 0
-2488 2502 0
-2483 2504 0
-2483 -2489 2502 0
-2483 -2488 2500 0
-2482 2502 0
-2482 -2489 2500 0
-2482 -2488 2499 0
c ((SATLiteral(284) - aux444 + SATLiteral(554))<=0)
-554 -2506 0
-284 -2506 0
-284 -554 -2507 0
c (0<=(SATLiteral(284) - aux444 + SATLiteral(554)))
554 2507 0
284 2507 0
284 554 2506 0
c ((SATLiteral(959) - aux445 + SATLiteral(824))<=0)
-824 -2509 0
-959 -2509 0
-959 -824 -2510 0
c (0<=(SATLiteral(959) - aux445 + SATLiteral(824)))
824 2510 0
959 2510 0
959 824 2509 0
c (( - aux446 + SATLiteral(689) + SATLiteral(149))<=0)
-149 -2512 0
-689 -2512 0
-689 -149 -2513 0
c (0<=( - aux446 + SATLiteral(689) + SATLiteral(149)))
149 2513 0
689 2513 0
689 149 2512 0
c (( - aux447 + SATLiteral(419) + SATLiteral(1094))<=0)
-1094 -2515 0
-419 -2515 0
-419 -1094 -2516 0
c (0<=( - aux447 + SATLiteral(419) + SATLiteral(1094)))
1094 2516 0
419 2516 0
419 1094 2515 0
c ((aux447 - aux448 + SATLiteral(14))<=0)
2515 -2518 0
2516 -2519 0
-14 -2518 0
-14 2515 -2519 0
-14 2516 -2521 0
c (0<=(aux447 - aux448 + SATLiteral(14)))
-2516 2521 0
-2515 2519 0
14 2521 0
14 -2516 2519 0
14 -2515 2518 0
c ((aux444 + aux446 - aux449)<=0)
2512 -2523 0
2513 -2524 0
2506 -2523 0
2506 2512 -2524 0
2506 2513 -2526 0
2507 -2524 0
2507 2512 -2526 0
2507 2513 -2528 0
c (0<=(aux444 + aux446 - aux449))
-2513 2528 0
-2512 2526 0
-2507 2528 0
-2507 -2513 2526 0
-2507 -2512 2524 0
-2506 2526 0
-2506 -2513 2524 0
-2506 -2512 2523 0
c ((SATLiteral(286) - aux450 + SATLiteral(556))<=0)
-556 -2530 0
-286 -2530 0
-286 -556 -2531 0
c (0<=(SATLiteral(286) - aux450 + SATLiteral(556)))
556 2531 0
286 2531 0
286 556 2530 0
c ((SATLiteral(961) - aux451 + SATLiteral(826))<=0)
-826 -2533 0
-961 -2533 0
-961 -826 -2534 0
c (0<=(SATLiteral(961) - aux451 + SATLiteral(826)))
826 2534 0
961 2534 0
961 826 2533 0
c (( - aux452 + SATLiteral(691) + SATLiteral(151))<=0)
-151 -2536 0
-691 -2536 0
-691 -151 -2537 0
c (0<=( - aux452 + SATLiteral(691) + SATLiteral(151)))
151 2537 0
691 2537 0
691 151 2536 0
c (( - aux453 + SATLiteral(421) + SATLiteral(1096))<=0)
-1096 -2539 0
-421 -2539 0
-421 -1096 -2540 0
c (0<=( - aux453 + SATLiteral(421) + SATLiteral(1096)))
1096 2540 0
421 2540 0
421 1096 2539 0
c ((aux453 - aux454 + SATLiteral(16))<=0)
2539 -2542 0
2540 -2543 0
-16 -2542 0
-16 2539 -2543 0
-16 2540 -2545 0
c (0<=(aux453 - aux454 + SATLiteral(16)))
-2540 2545 0
-2539 2543 0
16 2545 0
16 -2540 2543 0
16 -2539 2542 0
c ((aux450 + aux452 - aux455)<=0)
2536 -2547 0
2537 -2548 0
2530 -2547 0
2530 2536 -2548 0
2530 2537 -2550 0
2531 -2548 0
2531 2536 -2550 0
2531 2537 -2552 0
c (0<=(aux450 + aux452 - aux455))
-2537 2552 0
-2536 2550 0
-2531 2552 0
-2531 -2537 2550 0
-2531 -2536 2548 0
-2530 2550 0
-2530 -2537 2548 0
-2530 -2536 2547 0
c ((SATLiteral(-285) - aux456 + SATLiteral(-555))<=0)
555 -2554 0
285 -2554 0
285 555 -2555 0
c (0<=(SATLiteral(-285) - aux456 + SATLiteral(-555)))
-555 2555 0
-285 2555 0
-285 -555 2554 0
c ((SATLiteral(-960) - aux457 + SATLiteral(-825))<=0)
825 -2557 0
960 -2557 0
960 825 -2558 0
c (0<=(SATLiteral(-960) - aux457 + SATLiteral(-825)))
-825 2558 0
-960 2558 0
-960 -825 2557 0
c (( - aux458 + SATLiteral(-690) + SATLiteral(-150))<=0)
150 -2560 0
690 -2560 0
690 150 -2561 0
c (0<=( - aux458 + SATLiteral(-690) + SATLiteral(-150)))
-150 2561 0
-690 2561 0
-690 -150 2560 0
c (( - aux459 + SATLiteral(-420) + SATLiteral(-1095))<=0)
1095 -2563 0
420 -2563 0
420 1095 -2564 0
c (0<=( - aux459 + SATLiteral(-420) + SATLiteral(-1095)))
-1095 2564 0
-420 2564 0
-420 -1095 2563 0
c ((aux459 - aux460 + SATLiteral(-15))<=0)
2563 -2566 0
2564 -2567 0
15 -2566 0
15 2563 -2567 0
15 2564 -2569 0
c (0<=(aux459 - aux460 + SATLiteral(-15)))
-2564 2569 0
-2563 2567 0
-15 2569 0
-15 -2564 2567 0
-15 -2563 2566 0
c ((aux456 + aux458 - aux461)<=0)
2560 -2571 0
2561 -2572 0
2554 -2571 0
2554 2560 -2572 0
2554 2561 -2574 0
2555 -2572 0
2555 2560 -2574 0
2555 2561 -2576 0
c (0<=(aux456 + aux458 - aux461))
-2561 2576 0
-2560 2574 0
-2555 2576 0
-2555 -2561 2574 0
-2555 -2560 2572 0
-2554 2574 0
-2554 -2561 2572 0
-2554 -2560 2571 0
c ((SATLiteral(287) - aux462 + SATLiteral(557))<=0)
-557 -2578 0
-287 -2578 0
-287 -557 -2579 0
c (0<=(SATLiteral(287) - aux462 + SATLiteral(557)))
557 2579 0
287 2579 0
287 557 2578 0
c ((SATLiteral(962) - aux463 + SATLiteral(827))<=0)
-827 -2581 0
-962 -2581 0
-962 -827 -2582 0
c (0<=(SATLiteral(962) - aux463 + SATLiteral(827)))
827 2582 0
962 2582 0
962 827 2581 0
c (( - aux464 + SATLiteral(692) + SATLiteral(152))<=0)
-152 -2584 0
-692 -2584 0
-692 -152 -2585 0
c (0<=( - aux464 + SATLiteral(692) + SATLiteral(152)))
152 2585 0
692 2585 0
692 152 2584 0
c (( - aux465 + SATLiteral(422) + SATLiteral(1097))<=0)
-1097 -2587 0
-422 -2587 0
-422 -1097 -2588 0
c (0<=( - aux465 + SATLiteral(422) + SATLiteral(1097)))
1097 2588 0
422 2588 0
422 1097 2587 0
c ((aux465 - aux466 + SATLiteral(17))<=0)
2587 -2590 0
2588 -2591 0
-17 -2590 0
-17 2587 -2591 0
-17 2588 -2593 0
c (0<=(aux465 - aux466 + SATLiteral(17)))
-2588 2593 0
-2587 2591 0
17 2593 0
17 -2588 2591 0
17 -2587 2590 0
c ((aux462 + aux464 - aux467)<=0)
2584 -2595 0
2585 -2596 0
2578 -2595 0
2578 2584 -2596 0
2578 2585 -2598 0
2579 -2596 0
2579 2584 -2598 0
2579 2585 -2600 0
c (0<=(aux462 + aux464 - aux467))
-2585 2600 0
-2584 2598 0
-2579 2600 0
-2579 -2585 2598 0
-2579 -2584 2596 0
-2578 2598 0
-2578 -2585 2596 0
-2578 -2584 2595 0
c ((SATLiteral(289) - aux468 + SATLiteral(559))<=0)
-559 -2602 0
-289 -2602 0
-289 -559 -2603 0
c (0<=(SATLiteral(289) - aux468 + SATLiteral(559)))
559 2603 0
289 2603 0
289 559 2602 0
c ((SATLiteral(964) - aux469 + SATLiteral(829))<=0)
-829 -2605 0
-964 -2605 0
-964 -829 -2606 0
c (0<=(SATLiteral(964) - aux469 + SATLiteral(829)))
829 2606 0
964 2606 0
964 829 2605 0
c (( - aux470 + SATLiteral(694) + SATLiteral(154))<=0)
-154 -2608 0
-694 -2608 0
-694 -154 -2609 0
c (0<=( - aux470 + SATLiteral(694) + SATLiteral(154)))
154 2609 0
694 2609 0
694 154 2608 0
c (( - aux471 + SATLiteral(424) + SATLiteral(1099))<=0)
-1099 -2611 0
-424 -2611 0
-424 -1099 -2612 0
c (0<=( - aux471 + SATLiteral(424) + SATLiteral(1099)))
1099 2612 0
424 2612 0
424 1099 2611 0
c ((aux471 - aux472 + SATLiteral(19))<=0)
2611 -2614 0
2612 -2615 0
-19 -2614 0
-19 2611 -2615 0
-19 2612 -2617 0
c (0<=(aux471 - aux472 + SATLiteral(19)))
-2612 2617 0
-2611 2615 0
19 2617 0
19 -2612 2615 0
19 -2611 2614 0
c ((aux468 + aux470 - aux473)<=0)
2608 -2619 0
2609 -2620 0
2602 -2619 0
2602 2608 -2620 0
2602 2609 -2622 0
2603 -2620 0
2603 2608 -2622 0
2603 2609 -2624 0
c (0<=(aux468 + aux470 - aux473))
-2609 2624 0
-2608 2622 0
-2603 2624 0
-2603 -2609 2622 0
-2603 -2608 2620 0
-2602 2622 0
-2602 -2609 2620 0
-2602 -2608 2619 0
c ((SATLiteral(291) - aux474 + SATLiteral(561))<=0)
-561 -2626 0
-291 -2626 0
-291 -561 -2627 0
c (0<=(SATLiteral(291) - aux474 + SATLiteral(561)))
561 2627 0
291 2627 0
291 561 2626 0
c ((SATLiteral(966) - aux475 + SATLiteral(831))<=0)
-831 -2629 0
-966 -2629 0
-966 -831 -2630 0
c (0<=(SATLiteral(966) - aux475 + SATLiteral(831)))
831 2630 0
966 2630 0
966 831 2629 0
c (( - aux476 + SATLiteral(696) + SATLiteral(156))<=0)
-156 -2632 0
-696 -2632 0
-696 -156 -2633 0
c (0<=( - aux476 + SATLiteral(696) + SATLiteral(156)))
156 2633 0
696 2633 0
696 156 2632 0
c (( - aux477 + SATLiteral(426) + SATLiteral(1101))<=0)
-1101 -2635 0
-426 -2635 0
-426 -1101 -2636 0
c (0<=( - aux477 + SATLiteral(426) + SATLiteral(1101)))
1101 2636 0
426 2636 0
426 1101 2635 0
c ((aux477 - aux478 + SATLiteral(21))<=0)
2635 -2638 0
2636 -2639 0
-21 -2638 0
-21 2635 -2639 0
-21 2636 -2641 0
c (0<=(aux477 - aux478 + SATLiteral(21)))
-2636 2641 0
-2635 2639 0
21 2641 0
21 -2636 2639 0
21 -2635 2638 0
c ((aux474 + aux476 - aux479)<=0)
2632 -2643 0
2633 -2644 0
2626 -2643 0
2626 2632 -2644 0
2626 2633 -2646 0
2627 -2644 0
2627 2632 -2646 0
2627 2633 -2648 0
c (0<=(aux474 + aux476 - aux479))
-2633 2648 0
-2632 2646 0
-2627 2648 0
-2627 -2633 2646 0
-2627 -2632 2644 0
-2626 2646 0
-2626 -2633 2644 0
-2626 -2632 2643 0
c ((SATLiteral(293) - aux480 + SATLiteral(563))<=0)
-563 -2650 0
-293 -2650 0
-293 -563 -2651 0
c (0<=(SATLiteral(293) - aux480 + SATLiteral(563)))
563 2651 0
293 2651 0
293 563 2650 0
c ((SATLiteral(968) - aux481 + SATLiteral(833))<=0)
-833 -2653 0
-968 -2653 0
-968 -833 -2654 0
c (0<=(SATLiteral(968) - aux481 + SATLiteral(833)))
833 2654 0
968 2654 0
968 833 2653 0
c (( - aux482 + SATLiteral(698) + SATLiteral(158))<=0)
-158 -2656 0
-698 -2656 0
-698 -158 -2657 0
c (0<=( - aux482 + SATLiteral(698) + SATLiteral(158)))
158 2657 0
698 2657 0
698 158 2656 0
c (( - aux483 + SATLiteral(428) + SATLiteral(1103))<=0)
-1103 -2659 0
-428 -2659 0
-428 -1103 -2660 0
c (0<=( - aux483 + SATLiteral(428) + SATLiteral(1103)))
1103 2660 0
428 2660 0
428 1103 2659 0
c ((aux483 - aux484 + SATLiteral(23))<=0)
2659 -2662 0
2660 -2663 0
-23 -2662 0
-23 2659 -2663 0
-23 2660 -2665 0
c (0<=(aux483 - aux484 + SATLiteral(23)))
-2660 2665 0
-2659 2663 0
23 2665 0
23 -2660 2663 0
23 -2659 2662 0
c ((aux480 + aux482 - aux485)<=0)
2656 -2667 0
2657 -2668 0
2650 -2667 0
2650 2656 -2668 0
2650 2657 -2670 0
2651 -2668 0
2651 2656 -2670 0
2651 2657 -2672 0
c (0<=(aux480 + aux482 - aux485))
-2657 2672 0
-2656 2670 0
-2651 2672 0
-2651 -2657 2670 0
-2651 -2656 2668 0
-2650 2670 0
-2650 -2657 2668 0
-2650 -2656 2667 0
c ((SATLiteral(295) - aux486 + SATLiteral(565))<=0)
-565 -2674 0
-295 -2674 0
-295 -565 -2675 0
c (0<=(SATLiteral(295) - aux486 + SATLiteral(565)))
565 2675 0
295 2675 0
295 565 2674 0
c ((SATLiteral(970) - aux487 + SATLiteral(835))<=0)
-835 -2677 0
-970 -2677 0
-970 -835 -2678 0
c (0<=(SATLiteral(970) - aux487 + SATLiteral(835)))
835 2678 0
970 2678 0
970 835 2677 0
c (( - aux488 + SATLiteral(700) + SATLiteral(160))<=0)
-160 -2680 0
-700 -2680 0
-700 -160 -2681 0
c (0<=( - aux488 + SATLiteral(700) + SATLiteral(160)))
160 2681 0
700 2681 0
700 160 2680 0
c (( - aux489 + SATLiteral(430) + SATLiteral(1105))<=0)
-1105 -2683 0
-430 -2683 0
-430 -1105 -2684 0
c (0<=( - aux489 + SATLiteral(430) + SATLiteral(1105)))
1105 2684 0
430 2684 0
430 1105 2683 0
c ((aux489 - aux490 + SATLiteral(25))<=0)
2683 -2686 0
2684 -2687 0
-25 -2686 0
-25 2683 -2687 0
-25 2684 -2689 0
c (0<=(aux489 - aux490 + SATLiteral(25)))
-2684 2689 0
-2683 2687 0
25 2689 0
25 -2684 2687 0
25 -2683 2686 0
c ((aux486 + aux488 - aux491)<=0)
2680 -2691 0
2681 -2692 0
2674 -2691 0
2674 2680 -2692 0
2674 2681 -2694 0
2675 -2692 0
2675 2680 -2694 0
2675 2681 -2696 0
c (0<=(aux486 + aux488 - aux491))
-2681 2696 0
-2680 2694 0
-2675 2696 0
-2675 -2681 2694 0
-2675 -2680 2692 0
-2674 2694 0
-2674 -2681 2692 0
-2674 -2680 2691 0
c ((SATLiteral(297) - aux492 + SATLiteral(567))<=0)
-567 -2698 0
-297 -2698 0
-297 -567 -2699 0
c (0<=(SATLiteral(297) - aux492 + SATLiteral(567)))
567 2699 0
297 2699 0
297 567 2698 0
c ((SATLiteral(972) - aux493 + SATLiteral(837))<=0)
-837 -2701 0
-972 -2701 0
-972 -837 -2702 0
c (0<=(SATLiteral(972) - aux493 + SATLiteral(837)))
837 2702 0
972 2702 0
972 837 2701 0
c (( - aux494 + SATLiteral(702) + SATLiteral(162))<=0)
-162 -2704 0
-702 -2704 0
-702 -162 -2705 0
c (0<=( - aux494 + SATLiteral(702) + SATLiteral(162)))
162 2705 0
702 2705 0
702 162 2704 0
c (( - aux495 + SATLiteral(432) + SATLiteral(1107))<=0)
-1107 -2707 0
-432 -2707 0
-432 -1107 -2708 0
c (0<=( - aux495 + SATLiteral(432) + SATLiteral(1107)))
1107 2708 0
432 2708 0
432 1107 2707 0
c ((aux495 - aux496 + SATLiteral(27))<=0)
2707 -2710 0
2708 -2711 0
-27 -2710 0
-27 2707 -2711 0
-27 2708 -2713 0
c (0<=(aux495 - aux496 + SATLiteral(27)))
-2708 2713 0
-2707 2711 0
27 2713 0
27 -2708 2711 0
27 -2707 2710 0
c ((aux492 + aux494 - aux497)<=0)
2704 -2715 0
2705 -2716 0
2698 -2715 0
2698 2704 -2716 0
2698 2705 -2718 0
2699 -2716 0
2699 2704 -2718 0
2699 2705 -2720 0
c (0<=(aux492 + aux494 - aux497))
-2705 2720 0
-2704 2718 0
-2699 2720 0
-2699 -2705 2718 0
-2699 -2704 2716 0
-2698 2718 0
-2698 -2705 2716 0
-2698 -2704 2715 0
c ((SATLiteral(299) - aux498 + SATLiteral(569))<=0)
-569 -2722 0
-299 -2722 0
-299 -569 -2723 0
c (0<=(SATLiteral(299) - aux498 + SATLiteral(569)))
569 2723 0
299 2723 0
299 569 2722 0
c ((SATLiteral(974) - aux499 + SATLiteral(839))<=0)
-839 -2725 0
-974 -2725 0
-974 -839 -2726 0
c (0<=(SATLiteral(974) - aux499 + SATLiteral(839)))
839 2726 0
974 2726 0
974 839 2725 0
c (( - aux500 + SATLiteral(704) + SATLiteral(164))<=0)
-164 -2728 0
-704 -2728 0
-704 -164 -2729 0
c (0<=( - aux500 + SATLiteral(704) + SATLiteral(164)))
164 2729 0
704 2729 0
704 164 2728 0
c (( - aux501 + SATLiteral(434) + SATLiteral(1109))<=0)
-1109 -2731 0
-434 -2731 0
-434 -1109 -2732 0
c (0<=( - aux501 + SATLiteral(434) + SATLiteral(1109)))
1109 2732 0
434 2732 0
434 1109 2731 0
c ((aux501 - aux502 + SATLiteral(29))<=0)
2731 -2734 0
2732 -2735 0
-29 -2734 0
-29 2731 -2735 0
-29 2732 -2737 0
c (0<=(aux501 - aux502 + SATLiteral(29)))
-2732 2737 0
-2731 2735 0
29 2737 0
29 -2732 2735 0
29 -2731 2734 0
c ((aux498 + aux500 - aux503)<=0)
2728 -2739 0
2729 -2740 0
2722 -2739 0
2722 2728 -2740 0
2722 2729 -2742 0
2723 -2740 0
2723 2728 -2742 0
2723 2729 -2744 0
c (0<=(aux498 + aux500 - aux503))
-2729 2744 0
-2728 2742 0
-2723 2744 0
-2723 -2729 2742 0
-2723 -2728 2740 0
-2722 2742 0
-2722 -2729 2740 0
-2722 -2728 2739 0
c ((SATLiteral(301) - aux504 + SATLiteral(571))<=0)
-571 -2746 0
-301 -2746 0
-301 -571 -2747 0
c (0<=(SATLiteral(301) - aux504 + SATLiteral(571)))
571 2747 0
301 2747 0
301 571 2746 0
c ((SATLiteral(976) - aux505 + SATLiteral(841))<=0)
-841 -2749 0
-976 -2749 0
-976 -841 -2750 0
c (0<=(SATLiteral(976) - aux505 + SATLiteral(841)))
841 2750 0
976 2750 0
976 841 2749 0
c (( - aux506 + SATLiteral(706) + SATLiteral(166))<=0)
-166 -2752 0
-706 -2752 0
-706 -166 -2753 0
c (0<=( - aux506 + SATLiteral(706) + SATLiteral(166)))
166 2753 0
706 2753 0
706 166 2752 0
c (( - aux507 + SATLiteral(436) + SATLiteral(1111))<=0)
-1111 -2755 0
-436 -2755 0
-436 -1111 -2756 0
c (0<=( - aux507 + SATLiteral(436) + SATLiteral(1111)))
1111 2756 0
436 2756 0
436 1111 2755 0
c ((aux507 - aux508 + SATLiteral(31))<=0)
2755 -2758 0
2756 -2759 0
-31 -2758 0
-31 2755 -2759 0
-31 2756 -2761 0
c (0<=(aux507 - aux508 + SATLiteral(31)))
-2756 2761 0
-2755 2759 0
31 2761 0
31 -2756 2759 0
31 -2755 2758 0
c ((aux504 + aux506 - aux509)<=0)
2752 -2763 0
2753 -2764 0
2746 -2763 0
2746 2752 -2764 0
2746 2753 -2766 0
2747 -2764 0
2747 2752 -2766 0
2747 2753 -2768 0
c (0<=(aux504 + aux506 - aux509))
-2753 2768 0
-2752 2766 0
-2747 2768 0
-2747 -2753 2766 0
-2747 -2752 2764 0
-2746 2766 0
-2746 -2753 2764 0
-2746 -2752 2763 0
c ((SATLiteral(-300) - aux510 + SATLiteral(-570))<=0)
570 -2770 0
300 -2770 0
300 570 -2771 0
c (0<=(SATLiteral(-300) - aux510 + SATLiteral(-570)))
-570 2771 0
-300 2771 0
-300 -570 2770 0
c ((SATLiteral(-975) - aux511 + SATLiteral(-840))<=0)
840 -2773 0
975 -2773 0
975 840 -2774 0
c (0<=(SATLiteral(-975) - aux511 + SATLiteral(-840)))
-840 2774 0
-975 2774 0
-975 -840 2773 0
c (( - aux512 + SATLiteral(-705) + SATLiteral(-165))<=0)
165 -2776 0
705 -2776 0
705 165 -2777 0
c (0<=( - aux512 + SATLiteral(-705) + SATLiteral(-165)))
-165 2777 0
-705 2777 0
-705 -165 2776 0
c (( - aux513 + SATLiteral(-435) + SATLiteral(-1110))<=0)
1110 -2779 0
435 -2779 0
435 1110 -2780 0
c (0<=( - aux513 + SATLiteral(-435) + SATLiteral(-1110)))
-1110 2780 0
-435 2780 0
-435 -1110 2779 0
c ((aux513 - aux514 + SATLiteral(-30))<=0)
2779 -2782 0
2780 -2783 0
30 -2782 0
30 2779 -2783 0
30 2780 -2785 0
c (0<=(aux513 - aux514 + SATLiteral(-30)))
-2780 2785 0
-2779 2783 0
-30 2785 0
-30 -2780 2783 0
-30 -2779 2782 0
c ((aux510 + aux512 - aux515)<=0)
2776 -2787 0
2777 -2788 0
2770 -2787 0
2770 2776 -2788 0
2770 2777 -2790 0
2771 -2788 0
2771 2776 -2790 0
2771 2777 -2792 0
c (0<=(aux510 + aux512 - aux515))
-2777 2792 0
-2776 2790 0
-2771 2792 0
-2771 -2777 2790 0
-2771 -2776 2788 0
-2770 2790 0
-2770 -2777 2788 0
-2770 -2776 2787 0
c ((SATLiteral(302) - aux516 + SATLiteral(572))<=0)
-572 -2794 0
-302 -2794 0
-302 -572 -2795 0
c (0<=(SATLiteral(302) - aux516 + SATLiteral(572)))
572 2795 0
302 2795 0
302 572 2794 0
c ((SATLiteral(977) - aux517 + SATLiteral(842))<=0)
-842 -2797 0
-977 -2797 0
-977 -842 -2798 0
c (0<=(SATLiteral(977) - aux517 + SATLiteral(842)))
842 2798 0
977 2798 0
977 842 2797 0
c (( - aux518 + SATLiteral(707) + SATLiteral(167))<=0)
-167 -2800 0
-707 -2800 0
-707 -167 -2801 0
c (0<=( - aux518 + SATLiteral(707) + SATLiteral(167)))
167 2801 0
707 2801 0
707 167 2800 0
c (( - aux519 + SATLiteral(437) + SATLiteral(1112))<=0)
-1112 -2803 0
-437 -2803 0
-437 -1112 -2804 0
c (0<=( - aux519 + SATLiteral(437) + SATLiteral(1112)))
1112 2804 0
437 2804 0
437 1112 2803 0
c ((aux519 - aux520 + SATLiteral(32))<=0)
2803 -2806 0
2804 -2807 0
-32 -2806 0
-32 2803 -2807 0
-32 2804 -2809 0
c (0<=(aux519 - aux520 + SATLiteral(32)))
-2804 2809 0
-2803 2807 0
32 2809 0
32 -2804 2807 0
32 -2803 2806 0
c ((aux516 + aux518 - aux521)<=0)
2800 -2811 0
2801 -2812 0
2794 -2811 0
2794 2800 -2812 0
2794 2801 -2814 0
2795 -2812 0
2795 2800 -2814 0
2795 2801 -2816 0
c (0<=(aux516 + aux518 - aux521))
-2801 2816 0
-2800 2814 0
-2795 2816 0
-2795 -2801 2814 0
-2795 -2800 2812 0
-2794 2814 0
-2794 -2801 2812 0
-2794 -2800 2811 0
c ((SATLiteral(304) - aux522 + SATLiteral(574))<=0)
-574 -2818 0
-304 -2818 0
-304 -574 -2819 0
c (0<=(SATLiteral(304) - aux522 + SATLiteral(574)))
574 2819 0
304 2819 0
304 574 2818 0
c ((SATLiteral(979) - aux523 + SATLiteral(844))<=0)
-844 -2821 0
-979 -2821 0
-979 -844 -2822 0
c (0<=(SATLiteral(979) - aux523 + SATLiteral(844)))
844 2822 0
979 2822 0
979 844 2821 0
c (( - aux524 + SATLiteral(709) + SATLiteral(169))<=0)
-169 -2824 0
-709 -2824 0
-709 -169 -2825 0
c (0<=( - aux524 + SATLiteral(709) + SATLiteral(169)))
169 2825 0
709 2825 0
709 169 2824 0
c (( - aux525 + SATLiteral(439) + SATLiteral(1114))<=0)
-1114 -2827 0
-439 -2827 0
-439 -1114 -2828 0
c (0<=( - aux525 + SATLiteral(439) + SATLiteral(1114)))
1114 2828 0
439 2828 0
439 1114 2827 0
c ((aux525 - aux526 + SATLiteral(34))<=0)
2827 -2830 0
2828 -2831 0
-34 -2830 0
-34 2827 -2831 0
-34 2828 -2833 0
c (0<=(aux525 - aux526 + SATLiteral(34)))
-2828 2833 0
-2827 2831 0
34 2833 0
34 -2828 2831 0
34 -2827 2830 0
c ((aux522 + aux524 - aux527)<=0)
2824 -2835 0
2825 -2836 0
2818 -2835 0
2818 2824 -2836 0
2818 2825 -2838 0
2819 -2836 0
2819 2824 -2838 0
2819 2825 -2840 0
c (0<=(aux522 + aux524 - aux527))
-2825 2840 0
-2824 2838 0
-2819 2840 0
-2819 -2825 2838 0
-2819 -2824 2836 0
-2818 2838 0
-2818 -2825 2836 0
-2818 -2824 2835 0
c ((SATLiteral(306) - aux528 + SATLiteral(576))<=0)
-576 -2842 0
-306 -2842 0
-306 -576 -2843 0
c (0<=(SATLiteral(306) - aux528 + SATLiteral(576)))
576 2843 0
306 2843 0
306 576 2842 0
c ((SATLiteral(981) - aux529 + SATLiteral(846))<=0)
-846 -2845 0
-981 -2845 0
-981 -846 -2846 0
c (0<=(SATLiteral(981) - aux529 + SATLiteral(846)))
846 2846 0
981 2846 0
981 846 2845 0
c (( - aux530 + SATLiteral(711) + SATLiteral(171))<=0)
-171 -2848 0
-711 -2848 0
-711 -171 -2849 0
c (0<=( - aux530 + SATLiteral(711) + SATLiteral(171)))
171 2849 0
711 2849 0
711 171 2848 0
c (( - aux531 + SATLiteral(441) + SATLiteral(1116))<=0)
-1116 -2851 0
-441 -2851 0
-441 -1116 -2852 0
c (0<=( - aux531 + SATLiteral(441) + SATLiteral(1116)))
1116 2852 0
441 2852 0
441 1116 2851 0
c ((aux531 - aux532 + SATLiteral(36))<=0)
2851 -2854 0
2852 -2855 0
-36 -2854 0
-36 2851 -2855 0
-36 2852 -2857 0
c (0<=(aux531 - aux532 + SATLiteral(36)))
-2852 2857 0
-2851 2855 0
36 2857 0
36 -2852 2855 0
36 -2851 2854 0
c ((aux528 + aux530 - aux533)<=0)
2848 -2859 0
2849 -2860 0
2842 -2859 0
2842 2848 -2860 0
2842 2849 -2862 0
2843 -2860 0
2843 2848 -2862 0
2843 2849 -2864 0
c (0<=(aux528 + aux530 - aux533))
-2849 2864 0
-2848 2862 0
-2843 2864 0
-2843 -2849 2862 0
-2843 -2848 2860 0
-2842 2862 0
-2842 -2849 2860 0
-2842 -2848 2859 0
c ((SATLiteral(308) - aux534 + SATLiteral(578))<=0)
-578 -2866 0
-308 -2866 0
-308 -578 -2867 0
c (0<=(SATLiteral(308) - aux534 + SATLiteral(578)))
578 2867 0
308 2867 0
308 578 2866 0
c ((SATLiteral(983) - aux535 + SATLiteral(848))<=0)
-848 -2869 0
-983 -2869 0
-983 -848 -2870 0
c (0<=(SATLiteral(983) - aux535 + SATLiteral(848)))
848 2870 0
983 2870 0
983 848 2869 0
c (( - aux536 + SATLiteral(713) + SATLiteral(173))<=0)
-173 -2872 0
-713 -2872 0
-713 -173 -2873 0
c (0<=( - aux536 + SATLiteral(713) + SATLiteral(173)))
173 2873 0
713 2873 0
713 173 2872 0
c (( - aux537 + SATLiteral(443) + SATLiteral(1118))<=0)
-1118 -2875 0
-443 -2875 0
-443 -1118 -2876 0
c (0<=( - aux537 + SATLiteral(443) + SATLiteral(1118)))
1118 2876 0
443 2876 0
443 1118 2875 0
c ((aux537 - aux538 + SATLiteral(38))<=0)
2875 -2878 0
2876 -2879 0
-38 -2878 0
-38 2875 -2879 0
-38 2876 -2881 0
c (0<=(aux537 - aux538 + SATLiteral(38)))
-2876 2881 0
-2875 2879 0
38 2881 0
38 -2876 2879 0
38 -2875 2878 0
c ((aux534 + aux536 - aux539)<=0)
2872 -2883 0
2873 -2884 0
2866 -2883 0
2866 2872 -2884 0
2866 2873 -2886 0
2867 -2884 0
2867 2872 -2886 0
2867 2873 -2888 0
c (0<=(aux534 + aux536 - aux539))
-2873 2888 0
-2872 2886 0
-2867 2888 0
-2867 -2873 2886 0
-2867 -2872 2884 0
-2866 2886 0
-2866 -2873 2884 0
-2866 -2872 2883 0
c ((SATLiteral(310) - aux540 + SATLiteral(580))<=0)
-580 -2890 0
-310 -2890 0
-310 -580 -2891 0
c (0<=(SATLiteral(310) - aux540 + SATLiteral(580)))
580 2891 0
310 2891 0
310 580 2890 0
c ((SATLiteral(985) - aux541 + SATLiteral(850))<=0)
-850 -2893 0
-985 -2893 0
-985 -850 -2894 0
c (0<=(SATLiteral(985) - aux541 + SATLiteral(850)))
850 2894 0
985 2894 0
985 850 2893 0
c (( - aux542 + SATLiteral(715) + SATLiteral(175))<=0)
-175 -2896 0
-715 -2896 0
-715 -175 -2897 0
c (0<=( - aux542 + SATLiteral(715) + SATLiteral(175)))
175 2897 0
715 2897 0
715 175 2896 0
c (( - aux543 + SATLiteral(445) + SATLiteral(1120))<=0)
-1120 -2899 0
-445 -2899 0
-445 -1120 -2900 0
c (0<=( - aux543 + SATLiteral(445) + SATLiteral(1120)))
1120 2900 0
445 2900 0
445 1120 2899 0
c ((aux543 - aux544 + SATLiteral(40))<=0)
2899 -2902 0
2900 -2903 0
-40 -2902 0
-40 2899 -2903 0
-40 2900 -2905 0
c (0<=(aux543 - aux544 + SATLiteral(40)))
-2900 2905 0
-2899 2903 0
40 2905 0
40 -2900 2903 0
40 -2899 2902 0
c ((aux540 + aux542 - aux545)<=0)
2896 -2907 0
2897 -2908 0
2890 -2907 0
2890 2896 -2908 0
2890 2897 -2910 0
2891 -2908 0
2891 2896 -2910 0
2891 2897 -2912 0
c (0<=(aux540 + aux542 - aux545))
-2897 2912 0
-2896 2910 0
-2891 2912 0
-2891 -2897 2910 0
-2891 -2896 2908 0
-2890 2910 0
-2890 -2897 2908 0
-2890 -2896 2907 0
c ((SATLiteral(312) - aux546 + SATLiteral(582))<=0)
-582 -2914 0
-312 -2914 0
-312 -582 -2915 0
c (0<=(SATLiteral(312) - aux546 + SATLiteral(582)))
582 2915 0
312 2915 0
312 582 2914 0
c ((SATLiteral(987) - aux547 + SATLiteral(852))<=0)
-852 -2917 0
-987 -2917 0
-987 -852 -2918 0
c (0<=(SATLiteral(987) - aux547 + SATLiteral(852)))
852 2918 0
987 2918 0
987 852 2917 0
c (( - aux548 + SATLiteral(717) + SATLiteral(177))<=0)
-177 -2920 0
-717 -2920 0
-717 -177 -2921 0
c (0<=( - aux548 + SATLiteral(717) + SATLiteral(177)))
177 2921 0
717 2921 0
717 177 2920 0
c (( - aux549 + SATLiteral(447) + SATLiteral(1122))<=0)
-1122 -2923 0
-447 -2923 0
-447 -1122 -2924 0
c (0<=( - aux549 + SATLiteral(447) + SATLiteral(1122)))
1122 2924 0
447 2924 0
447 1122 2923 0
c ((aux549 - aux550 + SATLiteral(42))<=0)
2923 -2926 0
2924 -2927 0
-42 -2926 0
-42 2923 -2927 0
-42 2924 -2929 0
c (0<=(aux549 - aux550 + SATLiteral(42)))
-2924 2929 0
-2923 2927 0
42 2929 0
42 -2924 2927 0
42 -2923 2926 0
c ((aux546 + aux548 - aux551)<=0)
2920 -2931 0
2921 -2932 0
2914 -2931 0
2914 2920 -2932 0
2914 2921 -2934 0
2915 -2932 0
2915 2920 -2934 0
2915 2921 -2936 0
c (0<=(aux546 + aux548 - aux551))
-2921 2936 0
-2920 2934 0
-2915 2936 0
-2915 -2921 2934 0
-2915 -2920 2932 0
-2914 2934 0
-2914 -2921 2932 0
-2914 -2920 2931 0
c ((SATLiteral(314) - aux552 + SATLiteral(584))<=0)
-584 -2938 0
-314 -2938 0
-314 -584 -2939 0
c (0<=(SATLiteral(314) - aux552 + SATLiteral(584)))
584 2939 0
314 2939 0
314 584 2938 0
c ((SATLiteral(989) - aux553 + SATLiteral(854))<=0)
-854 -2941 0
-989 -2941 0
-989 -854 -2942 0
c (0<=(SATLiteral(989) - aux553 + SATLiteral(854)))
854 2942 0
989 2942 0
989 854 2941 0
c (( - aux554 + SATLiteral(719) + SATLiteral(179))<=0)
-179 -2944 0
-719 -2944 0
-719 -179 -2945 0
c (0<=( - aux554 + SATLiteral(719) + SATLiteral(179)))
179 2945 0
719 2945 0
719 179 2944 0
c (( - aux555 + SATLiteral(449) + SATLiteral(1124))<=0)
-1124 -2947 0
-449 -2947 0
-449 -1124 -2948 0
c (0<=( - aux555 + SATLiteral(449) + SATLiteral(1124)))
1124 2948 0
449 2948 0
449 1124 2947 0
c ((aux555 - aux556 + SATLiteral(44))<=0)
2947 -2950 0
2948 -2951 0
-44 -2950 0
-44 2947 -2951 0
-44 2948 -2953 0
c (0<=(aux555 - aux556 + SATLiteral(44)))
-2948 2953 0
-2947 2951 0
44 2953 0
44 -2948 2951 0
44 -2947 2950 0
c ((aux552 + aux554 - aux557)<=0)
2944 -2955 0
2945 -2956 0
2938 -2955 0
2938 2944 -2956 0
2938 2945 -2958 0
2939 -2956 0
2939 2944 -2958 0
2939 2945 -2960 0
c (0<=(aux552 + aux554 - aux557))
-2945 2960 0
-2944 2958 0
-2939 2960 0
-2939 -2945 2958 0
-2939 -2944 2956 0
-2938 2958 0
-2938 -2945 2956 0
-2938 -2944 2955 0
c ((SATLiteral(316) - aux558 + SATLiteral(586))<=0)
-586 -2962 0
-316 -2962 0
-316 -586 -2963 0
c (0<=(SATLiteral(316) - aux558 + SATLiteral(586)))
586 2963 0
316 2963 0
316 586 2962 0
c ((SATLiteral(991) - aux559 + SATLiteral(856))<=0)
-856 -2965 0
-991 -2965 0
-991 -856 -2966 0
c (0<=(SATLiteral(991) - aux559 + SATLiteral(856)))
856 2966 0
991 2966 0
991 856 2965 0
c (( - aux560 + SATLiteral(721) + SATLiteral(181))<=0)
-181 -2968 0
-721 -2968 0
-721 -181 -2969 0
c (0<=( - aux560 + SATLiteral(721) + SATLiteral(181)))
181 2969 0
721 2969 0
721 181 2968 0
c (( - aux561 + SATLiteral(451) + SATLiteral(1126))<=0)
-1126 -2971 0
-451 -2971 0
-451 -1126 -2972 0
c (0<=( - aux561 + SATLiteral(451) + SATLiteral(1126)))
1126 2972 0
451 2972 0
451 1126 2971 0
c ((aux561 - aux562 + SATLiteral(46))<=0)
2971 -2974 0
2972 -2975 0
-46 -2974 0
-46 2971 -2975 0
-46 2972 -2977 0
c (0<=(aux561 - aux562 + SATLiteral(46)))
-2972 2977 0
-2971 2975 0
46 2977 0
46 -2972 2975 0
46 -2971 2974 0
c ((aux558 + aux560 - aux563)<=0)
2968 -2979 0
2969 -2980 0
2962 -2979 0
2962 2968 -2980 0
2962 2969 -2982 0
2963 -2980 0
2963 2968 -2982 0
2963 2969 -2984 0
c (0<=(aux558 + aux560 - aux563))
-2969 2984 0
-2968 2982 0
-2963 2984 0
-2963 -2969 2982 0
-2963 -2968 2980 0
-2962 2982 0
-2962 -2969 2980 0
-2962 -2968 2979 0
c ((SATLiteral(-315) - aux564 + SATLiteral(-585))<=0)
585 -2986 0
315 -2986 0
315 585 -2987 0
c (0<=(SATLiteral(-315) - aux564 + SATLiteral(-585)))
-585 2987 0
-315 2987 0
-315 -585 2986 0
c ((SATLiteral(-990) - aux565 + SATLiteral(-855))<=0)
855 -2989 0
990 -2989 0
990 855 -2990 0
c (0<=(SATLiteral(-990) - aux565 + SATLiteral(-855)))
-855 2990 0
-990 2990 0
-990 -855 2989 0
c (( - aux566 + SATLiteral(-720) + SATLiteral(-180))<=0)
180 -2992 0
720 -2992 0
720 180 -2993 0
c (0<=( - aux566 + SATLiteral(-720) + SATLiteral(-180)))
-180 2993 0
-720 2993 0
-720 -180 2992 0
c (( - aux567 + SATLiteral(-450) + SATLiteral(-1125))<=0)
1125 -2995 0
450 -2995 0
450 1125 -2996 0
c (0<=( - aux567 + SATLiteral(-450) + SATLiteral(-1125)))
-1125 2996 0
-450 2996 0
-450 -1125 2995 0
c ((aux567 - aux568 + SATLiteral(-45))<=0)
2995 -2998 0
2996 -2999 0
45 -2998 0
45 2995 -2999 0
45 2996 -3001 0
c (0<=(aux567 - aux568 + SATLiteral(-45)))
-2996 3001 0
-2995 2999 0
-45 3001 0
-45 -2996 2999 0
-45 -2995 2998 0
c ((aux564 + aux566 - aux569)<=0)
2992 -3003 0
2993 -3004 0
2986 -3003 0
2986 2992 -3004 0
2986 2993 -3006 0
2987 -3004 0
2987 2992 -3006 0
2987 2993 -3008 0
c (0<=(aux564 + aux566 - aux569))
-2993 3008 0
-2992 3006 0
-2987 3008 0
-2987 -2993 3006 0
-2987 -2992 3004 0
-2986 3006 0
-2986 -2993 3004 0
-2986 -2992 3003 0
c ((SATLiteral(317) - aux570 + SATLiteral(587))<=0)
-587 -3010 0
-317 -3010 0
-317 -587 -3011 0
c (0<=(SATLiteral(317) - aux570 + SATLiteral(587)))
587 3011 0
317 3011 0
317 587 3010 0
c ((SATLiteral(992) - aux571 + SATLiteral(857))<=0)
-857 -3013 0
-992 -3013 0
-992 -857 -3014 0
c (0<=(SATLiteral(992) - aux571 + SATLiteral(857)))
857 3014 0
992 3014 0
992 857 3013 0
c (( - aux572 + SATLiteral(722) + SATLiteral(182))<=0)
-182 -3016 0
-722 -3016 0
-722 -182 -3017 0
c (0<=( - aux572 + SATLiteral(722) + SATLiteral(182)))
182 3017 0
722 3017 0
722 182 3016 0
c (( - aux573 + SATLiteral(452) + SATLiteral(1127))<=0)
-1127 -3019 0
-452 -3019 0
-452 -1127 -3020 0
c (0<=( - aux573 + SATLiteral(452) + SATLiteral(1127)))
1127 3020 0
452 3020 0
452 1127 3019 0
c ((aux573 - aux574 + SATLiteral(47))<=0)
3019 -3022 0
3020 -3023 0
-47 -3022 0
-47 3019 -3023 0
-47 3020 -3025 0
c (0<=(aux573 - aux574 + SATLiteral(47)))
-3020 3025 0
-3019 3023 0
47 3025 0
47 -3020 3023 0
47 -3019 3022 0
c ((aux570 + aux572 - aux575)<=0)
3016 -3027 0
3017 -3028 0
3010 -3027 0
3010 3016 -3028 0
3010 3017 -3030 0
3011 -3028 0
3011 3016 -3030 0
3011 3017 -3032 0
c (0<=(aux570 + aux572 - aux575))
-3017 3032 0
-3016 3030 0
-3011 3032 0
-3011 -3017 3030 0
-3011 -3016 3028 0
-3010 3030 0
-3010 -3017 3028 0
-3010 -3016 3027 0
c ((SATLiteral(319) - aux576 + SATLiteral(589))<=0)
-589 -3034 0
-319 -3034 0
-319 -589 -3035 0
c (0<=(SATLiteral(319) - aux576 + SATLiteral(589)))
589 3035 0
319 3035 0
319 589 3034 0
c ((SATLiteral(994) - aux577 + SATLiteral(859))<=0)
-859 -3037 0
-994 -3037 0
-994 -859 -3038 0
c (0<=(SATLiteral(994) - aux577 + SATLiteral(859)))
859 3038 0
994 3038 0
994 859 3037 0
c (( - aux578 + SATLiteral(724) + SATLiteral(184))<=0)
-184 -3040 0
-724 -3040 0
-724 -184 -3041 0
c (0<=( - aux578 + SATLiteral(724) + SATLiteral(184)))
184 3041 0
724 3041 0
724 184 3040 0
c (( - aux579 + SATLiteral(454) + SATLiteral(1129))<=0)
-1129 -3043 0
-454 -3043 0
-454 -1129 -3044 0
c (0<=( - aux579 + SATLiteral(454) + SATLiteral(1129)))
1129 3044 0
454 3044 0
454 1129 3043 0
c ((aux579 - aux580 + SATLiteral(49))<=0)
3043 -3046 0
3044 -3047 0
-49 -3046 0
-49 3043 -3047 0
-49 3044 -3049 0
c (0<=(aux579 - aux580 + SATLiteral(49)))
-3044 3049 0
-3043 3047 0
49 3049 0
49 -3044 3047 0
49 -3043 3046 0
c ((aux576 + aux578 - aux581)<=0)
3040 -3051 0
3041 -3052 0
3034 -3051 0
3034 3040 -3052 0
3034 3041 -3054 0
3035 -3052 0
3035 3040 -3054 0
3035 3041 -3056 0
c (0<=(aux576 + aux578 - aux581))
-3041 3056 0
-3040 3054 0
-3035 3056 0
-3035 -3041 3054 0
-3035 -3040 3052 0
-3034 3054 0
-3034 -3041 3052 0
-3034 -3040 3051 0
c ((SATLiteral(321) - aux582 + SATLiteral(591))<=0)
-591 -3058 0
-321 -3058 0
-321 -591 -3059 0
c (0<=(SATLiteral(321) - aux582 + SATLiteral(591)))
591 3059 0
321 3059 0
321 591 3058 0
c ((SATLiteral(996) - aux583 + SATLiteral(861))<=0)
-861 -3061 0
-996 -3061 0
-996 -861 -3062 0
c (0<=(SATLiteral(996) - aux583 + SATLiteral(861)))
861 3062 0
996 3062 0
996 861 3061 0
c (( - aux584 + SATLiteral(726) + SATLiteral(186))<=0)
-186 -3064 0
-726 -3064 0
-726 -186 -3065 0
c (0<=( - aux584 + SATLiteral(726) + SATLiteral(186)))
186 3065 0
726 3065 0
726 186 3064 0
c (( - aux585 + SATLiteral(456) + SATLiteral(1131))<=0)
-1131 -3067 0
-456 -3067 0
-456 -1131 -3068 0
c (0<=( - aux585 + SATLiteral(456) + SATLiteral(1131)))
1131 3068 0
456 3068 0
456 1131 3067 0
c ((aux585 - aux586 + SATLiteral(51))<=0)
3067 -3070 0
3068 -3071 0
-51 -3070 0
-51 3067 -3071 0
-51 3068 -3073 0
c (0<=(aux585 - aux586 + SATLiteral(51)))
-3068 3073 0
-3067 3071 0
51 3073 0
51 -3068 3071 0
51 -3067 3070 0
c ((aux582 + aux584 - aux587)<=0)
3064 -3075 0
3065 -3076 0
3058 -3075 0
3058 3064 -3076 0
3058 3065 -3078 0
3059 -3076 0
3059 3064 -3078 0
3059 3065 -3080 0
c (0<=(aux582 + aux584 - aux587))
-3065 3080 0
-3064 3078 0
-3059 3080 0
-3059 -3065 3078 0
-3059 -3064 3076 0
-3058 3078 0
-3058 -3065 3076 0
-3058 -3064 3075 0
c ((SATLiteral(323) - aux588 + SATLiteral(593))<=0)
-593 -3082 0
-323 -3082 0
-323 -593 -3083 0
c (0<=(SATLiteral(323) - aux588 + SATLiteral(593)))
593 3083 0
323 3083 0
323 593 3082 0
c ((SATLiteral(998) - aux589 + SATLiteral(863))<=0)
-863 -3085 0
-998 -3085 0
-998 -863 -3086 0
c (0<=(SATLiteral(998) - aux589 + SATLiteral(863)))
863 3086 0
998 3086 0
998 863 3085 0
c (( - aux590 + SATLiteral(728) + SATLiteral(188))<=0)
-188 -3088 0
-728 -3088 0
-728 -188 -3089 0
c (0<=( - aux590 + SATLiteral(728) + SATLiteral(188)))
188 3089 0
728 3089 0
728 188 3088 0
c (( - aux591 + SATLiteral(458) + SATLiteral(1133))<=0)
-1133 -3091 0
-458 -3091 0
-458 -1133 -3092 0
c (0<=( - aux591 + SATLiteral(458) + SATLiteral(1133)))
1133 3092 0
458 3092 0
458 1133 3091 0
c ((aux591 - aux592 + SATLiteral(53))<=0)
3091 -3094 0
3092 -3095 0
-53 -3094 0
-53 3091 -3095 0
-53 3092 -3097 0
c (0<=(aux591 - aux592 + SATLiteral(53)))
-3092 3097 0
-3091 3095 0
53 3097 0
53 -3092 3095 0
53 -3091 3094 0
c ((aux588 + aux590 - aux593)<=0)
3088 -3099 0
3089 -3100 0
3082 -3099 0
3082 3088 -3100 0
3082 3089 -3102 0
3083 -3100 0
3083 3088 -3102 0
3083 3089 -3104 0
c (0<=(aux588 + aux590 - aux593))
-3089 3104 0
-3088 3102 0
-3083 3104 0
-3083 -3089 3102 0
-3083 -3088 3100 0
-3082 3102 0
-3082 -3089 3100 0
-3082 -3088 3099 0
c ((SATLiteral(325) - aux594 + SATLiteral(595))<=0)
-595 -3106 0
-325 -3106 0
-325 -595 -3107 0
c (0<=(SATLiteral(325) - aux594 + SATLiteral(595)))
595 3107 0
325 3107 0
325 595 3106 0
c ((SATLiteral(1000) - aux595 + SATLiteral(865))<=0)
-865 -3109 0
-1000 -3109 0
-1000 -865 -3110 0
c (0<=(SATLiteral(1000) - aux595 + SATLiteral(865)))
865 3110 0
1000 3110 0
1000 865 3109 0
c (( - aux596 + SATLiteral(730) + SATLiteral(190))<=0)
-190 -3112 0
-730 -3112 0
-730 -190 -3113 0
c (0<=( - aux596 + SATLiteral(730) + SATLiteral(190)))
190 3113 0
730 3113 0
730 190 3112 0
c (( - aux597 + SATLiteral(460) + SATLiteral(1135))<=0)
-1135 -3115 0
-460 -3115 0
-460 -1135 -3116 0
c (0<=( - aux597 + SATLiteral(460) + SATLiteral(1135)))
1135 3116 0
460 3116 0
460 1135 3115 0
c ((aux597 - aux598 + SATLiteral(55))<=0)
3115 -3118 0
3116 -3119 0
-55 -3118 0
-55 3115 -3119 0
-55 3116 -3121 0
c (0<=(aux597 - aux598 + SATLiteral(55)))
-3116 3121 0
-3115 3119 0
55 3121 0
55 -3116 3119 0
55 -3115 3118 0
c ((aux594 + aux596 - aux599)<=0)
3112 -3123 0
3113 -3124 0
3106 -3123 0
3106 3112 -3124 0
3106 3113 -3126 0
3107 -3124 0
3107 3112 -3126 0
3107 3113 -3128 0
c (0<=(aux594 + aux596 - aux599))
-3113 3128 0
-3112 3126 0
-3107 3128 0
-3107 -3113 3126 0
-3107 -3112 3124 0
-3106 3126 0
-3106 -3113 3124 0
-3106 -3112 3123 0
c ((SATLiteral(327) - aux600 + SATLiteral(597))<=0)
-597 -3130 0
-327 -3130 0
-327 -597 -3131 0
c (0<=(SATLiteral(327) - aux600 + SATLiteral(597)))
597 3131 0
327 3131 0
327 597 3130 0
c ((SATLiteral(1002) - aux601 + SATLiteral(867))<=0)
-867 -3133 0
-1002 -3133 0
-1002 -867 -3134 0
c (0<=(SATLiteral(1002) - aux601 + SATLiteral(867)))
867 3134 0
1002 3134 0
1002 867 3133 0
c (( - aux602 + SATLiteral(732) + SATLiteral(192))<=0)
-192 -3136 0
-732 -3136 0
-732 -192 -3137 0
c (0<=( - aux602 + SATLiteral(732) + SATLiteral(192)))
192 3137 0
732 3137 0
732 192 3136 0
c (( - aux603 + SATLiteral(462) + SATLiteral(1137))<=0)
-1137 -3139 0
-462 -3139 0
-462 -1137 -3140 0
c (0<=( - aux603 + SATLiteral(462) + SATLiteral(1137)))
1137 3140 0
462 3140 0
462 1137 3139 0
c ((aux603 - aux604 + SATLiteral(57))<=0)
3139 -3142 0
3140 -3143 0
-57 -3142 0
-57 3139 -3143 0
-57 3140 -3145 0
c (0<=(aux603 - aux604 + SATLiteral(57)))
-3140 3145 0
-3139 3143 0
57 3145 0
57 -3140 3143 0
57 -3139 3142 0
c ((aux600 + aux602 - aux605)<=0)
3136 -3147 0
3137 -3148 0
3130 -3147 0
3130 3136 -3148 0
3130 3137 -3150 0
3131 -3148 0
3131 3136 -3150 0
3131 3137 -3152 0
c (0<=(aux600 + aux602 - aux605))
-3137 3152 0
-3136 3150 0
-3131 3152 0
-3131 -3137 3150 0
-3131 -3136 3148 0
-3130 3150 0
-3130 -3137 3148 0
-3130 -3136 3147 0
c ((SATLiteral(329) - aux606 + SATLiteral(599))<=0)
-599 -3154 0
-329 -3154 0
-329 -599 -3155 0
c (0<=(SATLiteral(329) - aux606 + SATLiteral(599)))
599 3155 0
329 3155 0
329 599 3154 0
c ((SATLiteral(1004) - aux607 + SATLiteral(869))<=0)
-869 -3157 0
-1004 -3157 0
-1004 -869 -3158 0
c (0<=(SATLiteral(1004) - aux607 + SATLiteral(869)))
869 3158 0
1004 3158 0
1004 869 3157 0
c (( - aux608 + SATLiteral(734) + SATLiteral(194))<=0)
-194 -3160 0
-734 -3160 0
-734 -194 -3161 0
c (0<=( - aux608 + SATLiteral(734) + SATLiteral(194)))
194 3161 0
734 3161 0
734 194 3160 0
c (( - aux609 + SATLiteral(464) + SATLiteral(1139))<=0)
-1139 -3163 0
-464 -3163 0
-464 -1139 -3164 0
c (0<=( - aux609 + SATLiteral(464) + SATLiteral(1139)))
1139 3164 0
464 3164 0
464 1139 3163 0
c ((aux609 - aux610 + SATLiteral(59))<=0)
3163 -3166 0
3164 -3167 0
-59 -3166 0
-59 3163 -3167 0
-59 3164 -3169 0
c (0<=(aux609 - aux610 + SATLiteral(59)))
-3164 3169 0
-3163 3167 0
59 3169 0
59 -3164 3167 0
59 -3163 3166 0
c ((aux606 + aux608 - aux611)<=0)
3160 -3171 0
3161 -3172 0
3154 -3171 0
3154 3160 -3172 0
3154 3161 -3174 0
3155 -3172 0
3155 3160 -3174 0
3155 3161 -3176 0
c (0<=(aux606 + aux608 - aux611))
-3161 3176 0
-3160 3174 0
-3155 3176 0
-3155 -3161 3174 0
-3155 -3160 3172 0
-3154 3174 0
-3154 -3161 3172 0
-3154 -3160 3171 0
c ((SATLiteral(331) - aux612 + SATLiteral(601))<=0)
-601 -3178 0
-331 -3178 0
-331 -601 -3179 0
c (0<=(SATLiteral(331) - aux612 + SATLiteral(601)))
601 3179 0
331 3179 0
331 601 3178 0
c ((SATLiteral(1006) - aux613 + SATLiteral(871))<=0)
-871 -3181 0
-1006 -3181 0
-1006 -871 -3182 0
c (0<=(SATLiteral(1006) - aux613 + SATLiteral(871)))
871 3182 0
1006 3182 0
1006 871 3181 0
c (( - aux614 + SATLiteral(736) + SATLiteral(196))<=0)
-196 -3184 0
-736 -3184 0
-736 -196 -3185 0
c (0<=( - aux614 + SATLiteral(736) + SATLiteral(196)))
196 3185 0
736 3185 0
736 196 3184 0
c (( - aux615 + SATLiteral(466) + SATLiteral(1141))<=0)
-1141 -3187 0
-466 -3187 0
-466 -1141 -3188 0
c (0<=( - aux615 + SATLiteral(466) + SATLiteral(1141)))
1141 3188 0
466 3188 0
466 1141 3187 0
c ((aux615 - aux616 + SATLiteral(61))<=0)
3187 -3190 0
3188 -3191 0
-61 -3190 0
-61 3187 -3191 0
-61 3188 -3193 0
c (0<=(aux615 - aux616 + SATLiteral(61)))
-3188 3193 0
-3187 3191 0
61 3193 0
61 -3188 3191 0
61 -3187 3190 0
c ((aux612 + aux614 - aux617)<=0)
3184 -3195 0
3185 -3196 0
3178 -3195 0
3178 3184 -3196 0
3178 3185 -3198 0
3179 -3196 0
3179 3184 -3198 0
3179 3185 -3200 0
c (0<=(aux612 + aux614 - aux617))
-3185 3200 0
-3184 3198 0
-3179 3200 0
-3179 -3185 3198 0
-3179 -3184 3196 0
-3178 3198 0
-3178 -3185 3196 0
-3178 -3184 3195 0
c ((SATLiteral(-330) - aux618 + SATLiteral(-600))<=0)
600 -3202 0
330 -3202 0
330 600 -3203 0
c (0<=(SATLiteral(-330) - aux618 + SATLiteral(-600)))
-600 3203 0
-330 3203 0
-330 -600 3202 0
c ((SATLiteral(-1005) - aux619 + SATLiteral(-870))<=0)
870 -3205 0
1005 -3205 0
1005 870 -3206 0
c (0<=(SATLiteral(-1005) - aux619 + SATLiteral(-870)))
-870 3206 0
-1005 3206 0
-1005 -870 3205 0
c (( - aux620 + SATLiteral(-735) + SATLiteral(-195))<=0)
195 -3208 0
735 -3208 0
735 195 -3209 0
c (0<=( - aux620 + SATLiteral(-735) + SATLiteral(-195)))
-195 3209 0
-735 3209 0
-735 -195 3208 0
c (( - aux621 + SATLiteral(-465) + SATLiteral(-1140))<=0)
1140 -3211 0
465 -3211 0
465 1140 -3212 0
c (0<=( - aux621 + SATLiteral(-465) + SATLiteral(-1140)))
-1140 3212 0
-465 3212 0
-465 -1140 3211 0
c ((aux621 - aux622 + SATLiteral(-60))<=0)
3211 -3214 0
3212 -3215 0
60 -3214 0
60 3211 -3215 0
60 3212 -3217 0
c (0<=(aux621 - aux622 + SATLiteral(-60)))
-3212 3217 0
-3211 3215 0
-60 3217 0
-60 -3212 3215 0
-60 -3211 3214 0
c ((aux618 + aux620 - aux623)<=0)
3208 -3219 0
3209 -3220 0
3202 -3219 0
3202 3208 -3220 0
3202 3209 -3222 0
3203 -3220 0
3203 3208 -3222 0
3203 3209 -3224 0
c (0<=(aux618 + aux620 - aux623))
-3209 3224 0
-3208 3222 0
-3203 3224 0
-3203 -3209 3222 0
-3203 -3208 3220 0
-3202 3222 0
-3202 -3209 3220 0
-3202 -3208 3219 0
c ((SATLiteral(332) - aux624 + SATLiteral(602))<=0)
-602 -3226 0
-332 -3226 0
-332 -602 -3227 0
c (0<=(SATLiteral(332) - aux624 + SATLiteral(602)))
602 3227 0
332 3227 0
332 602 3226 0
c ((SATLiteral(1007) - aux625 + SATLiteral(872))<=0)
-872 -3229 0
-1007 -3229 0
-1007 -872 -3230 0
c (0<=(SATLiteral(1007) - aux625 + SATLiteral(872)))
872 3230 0
1007 3230 0
1007 872 3229 0
c (( - aux626 + SATLiteral(737) + SATLiteral(197))<=0)
-197 -3232 0
-737 -3232 0
-737 -197 -3233 0
c (0<=( - aux626 + SATLiteral(737) + SATLiteral(197)))
197 3233 0
737 3233 0
737 197 3232 0
c (( - aux627 + SATLiteral(467) + SATLiteral(1142))<=0)
-1142 -3235 0
-467 -3235 0
-467 -1142 -3236 0
c (0<=( - aux627 + SATLiteral(467) + SATLiteral(1142)))
1142 3236 0
467 3236 0
467 1142 3235 0
c ((aux627 - aux628 + SATLiteral(62))<=0)
3235 -3238 0
3236 -3239 0
-62 -3238 0
-62 3235 -3239 0
-62 3236 -3241 0
c (0<=(aux627 - aux628 + SATLiteral(62)))
-3236 3241 0
-3235 3239 0
62 3241 0
62 -3236 3239 0
62 -3235 3238 0
c ((aux624 + aux626 - aux629)<=0)
3232 -3243 0
3233 -3244 0
3226 -3243 0
3226 3232 -3244 0
3226 3233 -3246 0
3227 -3244 0
3227 3232 -3246 0
3227 3233 -3248 0
c (0<=(aux624 + aux626 - aux629))
-3233 3248 0
-3232 3246 0
-3227 3248 0
-3227 -3233 3246 0
-3227 -3232 3244 0
-3226 3246 0
-3226 -3233 3244 0
-3226 -3232 3243 0
c ((SATLiteral(334) - aux630 + SATLiteral(604))<=0)
-604 -3250 0
-334 -3250 0
-334 -604 -3251 0
c (0<=(SATLiteral(334) - aux630 + SATLiteral(604)))
604 3251 0
334 3251 0
334 604 3250 0
c ((SATLiteral(1009) - aux631 + SATLiteral(874))<=0)
-874 -3253 0
-1009 -3253 0
-1009 -874 -3254 0
c (0<=(SATLiteral(1009) - aux631 + SATLiteral(874)))
874 3254 0
1009 3254 0
1009 874 3253 0
c (( - aux632 + SATLiteral(739) + SATLiteral(199))<=0)
-199 -3256 0
-739 -3256 0
-739 -199 -3257 0
c (0<=( - aux632 + SATLiteral(739) + SATLiteral(199)))
199 3257 0
739 3257 0
739 199 3256 0
c (( - aux633 + SATLiteral(469) + SATLiteral(1144))<=0)
-1144 -3259 0
-469 -3259 0
-469 -1144 -3260 0
c (0<=( - aux633 + SATLiteral(469) + SATLiteral(1144)))
1144 3260 0
469 3260 0
469 1144 3259 0
c ((aux633 - aux634 + SATLiteral(64))<=0)
3259 -3262 0
3260 -3263 0
-64 -3262 0
-64 3259 -3263 0
-64 3260 -3265 0
c (0<=(aux633 - aux634 + SATLiteral(64)))
-3260 3265 0
-3259 3263 0
64 3265 0
64 -3260 3263 0
64 -3259 3262 0
c ((aux630 + aux632 - aux635)<=0)
3256 -3267 0
3257 -3268 0
3250 -3267 0
3250 3256 -3268 0
3250 3257 -3270 0
3251 -3268 0
3251 3256 -3270 0
3251 3257 -3272 0
c (0<=(aux630 + aux632 - aux635))
-3257 3272 0
-3256 3270 0
-3251 3272 0
-3251 -3257 3270 0
-3251 -3256 3268 0
-3250 3270 0
-3250 -3257 3268 0
-3250 -3256 3267 0
c ((SATLiteral(336) - aux636 + SATLiteral(606))<=0)
-606 -3274 0
-336 -3274 0
-336 -606 -3275 0
c (0<=(SATLiteral(336) - aux636 + SATLiteral(606)))
606 3275 0
336 3275 0
336 606 3274 0
c ((SATLiteral(1011) - aux637 + SATLiteral(876))<=0)
-876 -3277 0
-1011 -3277 0
-1011 -876 -3278 0
c (0<=(SATLiteral(1011) - aux637 + SATLiteral(876)))
876 3278 0
1011 3278 0
1011 876 3277 0
c (( - aux638 + SATLiteral(741) + SATLiteral(201))<=0)
-201 -3280 0
-741 -3280 0
-741 -201 -3281 0
c (0<=( - aux638 + SATLiteral(741) + SATLiteral(201)))
201 3281 0
741 3281 0
741 201 3280 0
c (( - aux639 + SATLiteral(471) + SATLiteral(1146))<=0)
-1146 -3283 0
-471 -3283 0
-471 -1146 -3284 0
c (0<=( - aux639 + SATLiteral(471) + SATLiteral(1146)))
1146 3284 0
471 3284 0
471 1146 3283 0
c ((aux639 - aux640 + SATLiteral(66))<=0)
3283 -3286 0
3284 -3287 0
-66 -3286 0
-66 3283 -3287 0
-66 3284 -3289 0
c (0<=(aux639 - aux640 + SATLiteral(66)))
-3284 3289 0
-3283 3287 0
66 3289 0
66 -3284 3287 0
66 -3283 3286 0
c ((aux636 + aux638 - aux641)<=0)
3280 -3291 0
3281 -3292 0
3274 -3291 0
3274 3280 -3292 0
3274 3281 -3294 0
3275 -3292 0
3275 3280 -3294 0
3275 3281 -3296 0
c (0<=(aux636 + aux638 - aux641))
-3281 3296 0
-3280 3294 0
-3275 3296 0
-3275 -3281 3294 0
-3275 -3280 3292 0
-3274 3294 0
-3274 -3281 3292 0
-3274 -3280 3291 0
c ((SATLiteral(338) - aux642 + SATLiteral(608))<=0)
-608 -3298 0
-338 -3298 0
-338 -608 -3299 0
c (0<=(SATLiteral(338) - aux642 + SATLiteral(608)))
608 3299 0
338 3299 0
338 608 3298 0
c ((SATLiteral(1013) - aux643 + SATLiteral(878))<=0)
-878 -3301 0
-1013 -3301 0
-1013 -878 -3302 0
c (0<=(SATLiteral(1013) - aux643 + SATLiteral(878)))
878 3302 0
1013 3302 0
1013 878 3301 0
c (( - aux644 + SATLiteral(743) + SATLiteral(203))<=0)
-203 -3304 0
-743 -3304 0
-743 -203 -3305 0
c (0<=( - aux644 + SATLiteral(743) + SATLiteral(203)))
203 3305 0
743 3305 0
743 203 3304 0
c (( - aux645 + SATLiteral(473) + SATLiteral(1148))<=0)
-1148 -3307 0
-473 -3307 0
-473 -1148 -3308 0
c (0<=( - aux645 + SATLiteral(473) + SATLiteral(1148)))
1148 3308 0
473 3308 0
473 1148 3307 0
c ((aux645 - aux646 + SATLiteral(68))<=0)
3307 -3310 0
3308 -3311 0
-68 -3310 0
-68 3307 -3311 0
-68 3308 -3313 0
c (0<=(aux645 - aux646 + SATLiteral(68)))
-3308 3313 0
-3307 3311 0
68 3313 0
68 -3308 3311 0
68 -3307 3310 0
c ((aux642 + aux644 - aux647)<=0)
3304 -3315 0
3305 -3316 0
3298 -3315 0
3298 3304 -3316 0
3298 3305 -3318 0
3299 -3316 0
3299 3304 -3318 0
3299 3305 -3320 0
c (0<=(aux642 + aux644 - aux647))
-3305 3320 0
-3304 3318 0
-3299 3320 0
-3299 -3305 3318 0
-3299 -3304 3316 0
-3298 3318 0
-3298 -3305 3316 0
-3298 -3304 3315 0
c ((SATLiteral(340) - aux648 + SATLiteral(610))<=0)
-610 -3322 0
-340 -3322 0
-340 -610 -3323 0
c (0<=(SATLiteral(340) - aux648 + SATLiteral(610)))
610 3323 0
340 3323 0
340 610 3322 0
c ((SATLiteral(1015) - aux649 + SATLiteral(880))<=0)
-880 -3325 0
-1015 -3325 0
-1015 -880 -3326 0
c (0<=(SATLiteral(1015) - aux649 + SATLiteral(880)))
880 3326 0
1015 3326 0
1015 880 3325 0
c (( - aux650 + SATLiteral(745) + SATLiteral(205))<=0)
-205 -3328 0
-745 -3328 0
-745 -205 -3329 0
c (0<=( - aux650 + SATLiteral(745) + SATLiteral(205)))
205 3329 0
745 3329 0
745 205 3328 0
c (( - aux651 + SATLiteral(475) + SATLiteral(1150))<=0)
-1150 -3331 0
-475 -3331 0
-475 -1150 -3332 0
c (0<=( - aux651 + SATLiteral(475) + SATLiteral(1150)))
1150 3332 0
475 3332 0
475 1150 3331 0
c ((aux651 - aux652 + SATLiteral(70))<=0)
3331 -3334 0
3332 -3335 0
-70 -3334 0
-70 3331 -3335 0
-70 3332 -3337 0
c (0<=(aux651 - aux652 + SATLiteral(70)))
-3332 3337 0
-3331 3335 0
70 3337 0
70 -3332 3335 0
70 -3331 3334 0
c ((aux648 + aux650 - aux653)<=0)
3328 -3339 0
3329 -3340 0
3322 -3339 0
3322 3328 -3340 0
3322 3329 -3342 0
3323 -3340 0
3323 3328 -3342 0
3323 3329 -3344 0
c (0<=(aux648 + aux650 - aux653))
-3329 3344 0
-3328 3342 0
-3323 3344 0
-3323 -3329 3342 0
-3323 -3328 3340 0
-3322 3342 0
-3322 -3329 3340 0
-3322 -3328 3339 0
c ((SATLiteral(342) - aux654 + SATLiteral(612))<=0)
-612 -3346 0
-342 -3346 0
-342 -612 -3347 0
c (0<=(SATLiteral(342) - aux654 + SATLiteral(612)))
612 3347 0
342 3347 0
342 612 3346 0
c ((SATLiteral(1017) - aux655 + SATLiteral(882))<=0)
-882 -3349 0
-1017 -3349 0
-1017 -882 -3350 0
c (0<=(SATLiteral(1017) - aux655 + SATLiteral(882)))
882 3350 0
1017 3350 0
1017 882 3349 0
c (( - aux656 + SATLiteral(747) + SATLiteral(207))<=0)
-207 -3352 0
-747 -3352 0
-747 -207 -3353 0
c (0<=( - aux656 + SATLiteral(747) + SATLiteral(207)))
207 3353 0
747 3353 0
747 207 3352 0
c (( - aux657 + SATLiteral(477) + SATLiteral(1152))<=0)
-1152 -3355 0
-477 -3355 0
-477 -1152 -3356 0
c (0<=( - aux657 + SATLiteral(477) + SATLiteral(1152)))
1152 3356 0
477 3356 0
477 1152 3355 0
c ((aux657 - aux658 + SATLiteral(72))<=0)
3355 -3358 0
3356 -3359 0
-72 -3358 0
-72 3355 -3359 0
-72 3356 -3361 0
c (0<=(aux657 - aux658 + SATLiteral(72)))
-3356 3361 0
-3355 3359 0
72 3361 0
72 -3356 3359 0
72 -3355 3358 0
c ((aux654 + aux656 - aux659)<=0)
3352 -3363 0
3353 -3364 0
3346 -3363 0
3346 3352 -3364 0
3346 3353 -3366 0
3347 -3364 0
3347 3352 -3366 0
3347 3353 -3368 0
c (0<=(aux654 + aux656 - aux659))
-3353 3368 0
-3352 3366 0
-3347 3368 0
-3347 -3353 3366 0
-3347 -3352 3364 0
-3346 3366 0
-3346 -3353 3364 0
-3346 -3352 3363 0
c ((SATLiteral(344) - aux660 + SATLiteral(614))<=0)
-614 -3370 0
-344 -3370 0
-344 -614 -3371 0
c (0<=(SATLiteral(344) - aux660 + SATLiteral(614)))
614 3371 0
344 3371 0
344 614 3370 0
c ((SATLiteral(1019) - aux661 + SATLiteral(884))<=0)
-884 -3373 0
-1019 -3373 0
-1019 -884 -3374 0
c (0<=(SATLiteral(1019) - aux661 + SATLiteral(884)))
884 3374 0
1019 3374 0
1019 884 3373 0
c (( - aux662 + SATLiteral(749) + SATLiteral(209))<=0)
-209 -3376 0
-749 -3376 0
-749 -209 -3377 0
c (0<=( - aux662 + SATLiteral(749) + SATLiteral(209)))
209 3377 0
749 3377 0
749 209 3376 0
c (( - aux663 + SATLiteral(479) + SATLiteral(1154))<=0)
-1154 -3379 0
-479 -3379 0
-479 -1154 -3380 0
c (0<=( - aux663 + SATLiteral(479) + SATLiteral(1154)))
1154 3380 0
479 3380 0
479 1154 3379 0
c ((aux663 - aux664 + SATLiteral(74))<=0)
3379 -3382 0
3380 -3383 0
-74 -3382 0
-74 3379 -3383 0
-74 3380 -3385 0
c (0<=(aux663 - aux664 + SATLiteral(74)))
-3380 3385 0
-3379 3383 0
74 3385 0
74 -3380 3383 0
74 -3379 3382 0
c ((aux660 + aux662 - aux665)<=0)
3376 -3387 0
3377 -3388 0
3370 -3387 0
3370 3376 -3388 0
3370 3377 -3390 0
3371 -3388 0
3371 3376 -3390 0
3371 3377 -3392 0
c (0<=(aux660 + aux662 - aux665))
-3377 3392 0
-3376 3390 0
-3371 3392 0
-3371 -3377 3390 0
-3371 -3376 3388 0
-3370 3390 0
-3370 -3377 3388 0
-3370 -3376 3387 0
c ((SATLiteral(346) - aux666 + SATLiteral(616))<=0)
-616 -3394 0
-346 -3394 0
-346 -616 -3395 0
c (0<=(SATLiteral(346) - aux666 + SATLiteral(616)))
616 3395 0
346 3395 0
346 616 3394 0
c ((SATLiteral(1021) - aux667 + SATLiteral(886))<=0)
-886 -3397 0
-1021 -3397 0
-1021 -886 -3398 0
c (0<=(SATLiteral(1021) - aux667 + SATLiteral(886)))
886 3398 0
1021 3398 0
1021 886 3397 0
c (( - aux668 + SATLiteral(751) + SATLiteral(211))<=0)
-211 -3400 0
-751 -3400 0
-751 -211 -3401 0
c (0<=( - aux668 + SATLiteral(751) + SATLiteral(211)))
211 3401 0
751 3401 0
751 211 3400 0
c (( - aux669 + SATLiteral(481) + SATLiteral(1156))<=0)
-1156 -3403 0
-481 -3403 0
-481 -1156 -3404 0
c (0<=( - aux669 + SATLiteral(481) + SATLiteral(1156)))
1156 3404 0
481 3404 0
481 1156 3403 0
c ((aux669 - aux670 + SATLiteral(76))<=0)
3403 -3406 0
3404 -3407 0
-76 -3406 0
-76 3403 -3407 0
-76 3404 -3409 0
c (0<=(aux669 - aux670 + SATLiteral(76)))
-3404 3409 0
-3403 3407 0
76 3409 0
76 -3404 3407 0
76 -3403 3406 0
c ((aux666 + aux668 - aux671)<=0)
3400 -3411 0
3401 -3412 0
3394 -3411 0
3394 3400 -3412 0
3394 3401 -3414 0
3395 -3412 0
3395 3400 -3414 0
3395 3401 -3416 0
c (0<=(aux666 + aux668 - aux671))
-3401 3416 0
-3400 3414 0
-3395 3416 0
-3395 -3401 3414 0
-3395 -3400 3412 0
-3394 3414 0
-3394 -3401 3412 0
-3394 -3400 3411 0
c ((SATLiteral(-345) - aux672 + SATLiteral(-615))<=0)
615 -3418 0
345 -3418 0
345 615 -3419 0
c (0<=(SATLiteral(-345) - aux672 + SATLiteral(-615)))
-615 3419 0
-345 3419 0
-345 -615 3418 0
c ((SATLiteral(-1020) - aux673 + SATLiteral(-885))<=0)
885 -3421 0
1020 -3421 0
1020 885 -3422 0
c (0<=(SATLiteral(-1020) - aux673 + SATLiteral(-885)))
-885 3422 0
-1020 3422 0
-1020 -885 3421 0
c (( - aux674 + SATLiteral(-750) + SATLiteral(-210))<=0)
210 -3424 0
750 -3424 0
750 210 -3425 0
c (0<=( - aux674 + SATLiteral(-750) + SATLiteral(-210)))
-210 3425 0
-750 3425 0
-750 -210 3424 0
c (( - aux675 + SATLiteral(-480) + SATLiteral(-1155))<=0)
1155 -3427 0
480 -3427 0
480 1155 -3428 0
c (0<=( - aux675 + SATLiteral(-480) + SATLiteral(-1155)))
-1155 3428 0
-480 3428 0
-480 -1155 3427 0
c ((aux675 - aux676 + SATLiteral(-75))<=0)
3427 -3430 0
3428 -3431 0
75 -3430 0
75 3427 -3431 0
75 3428 -3433 0
c (0<=(aux675 - aux676 + SATLiteral(-75)))
-3428 3433 0
-3427 3431 0
-75 3433 0
-75 -3428 3431 0
-75 -3427 3430 0
c ((aux672 + aux674 - aux677)<=0)
3424 -3435 0
3425 -3436 0
3418 -3435 0
3418 3424 -3436 0
3418 3425 -3438 0
3419 -3436 0
3419 3424 -3438 0
3419 3425 -3440 0
c (0<=(aux672 + aux674 - aux677))
-3425 3440 0
-3424 3438 0
-3419 3440 0
-3419 -3425 3438 0
-3419 -3424 3436 0
-3418 3438 0
-3418 -3425 3436 0
-3418 -3424 3435 0
c ((SATLiteral(347) - aux678 + SATLiteral(617))<=0)
-617 -3442 0
-347 -3442 0
-347 -617 -3443 0
c (0<=(SATLiteral(347) - aux678 + SATLiteral(617)))
617 3443 0
347 3443 0
347 617 3442 0
c ((SATLiteral(1022) - aux679 + SATLiteral(887))<=0)
-887 -3445 0
-1022 -3445 0
-1022 -887 -3446 0
c (0<=(SATLiteral(1022) - aux679 + SATLiteral(887)))
887 3446 0
1022 3446 0
1022 887 3445 0
c (( - aux680 + SATLiteral(752) + SATLiteral(212))<=0)
-212 -3448 0
-752 -3448 0
-752 -212 -3449 0
c (0<=( - aux680 + SATLiteral(752) + SATLiteral(212)))
212 3449 0
752 3449 0
752 212 3448 0
c (( - aux681 + SATLiteral(482) + SATLiteral(1157))<=0)
-1157 -3451 0
-482 -3451 0
-482 -1157 -3452 0
c (0<=( - aux681 + SATLiteral(482) + SATLiteral(1157)))
1157 3452 0
482 3452 0
482 1157 3451 0
c ((aux681 - aux682 + SATLiteral(77))<=0)
3451 -3454 0
3452 -3455 0
-77 -3454 0
-77 3451 -3455 0
-77 3452 -3457 0
c (0<=(aux681 - aux682 + SATLiteral(77)))
-3452 3457 0
-3451 3455 0
77 3457 0
77 -3452 3455 0
77 -3451 3454 0
c ((aux678 + aux680 - aux683)<=0)
3448 -3459 0
3449 -3460 0
3442 -3459 0
3442 3448 -3460 0
3442 3449 -3462 0
3443 -3460 0
3443 3448 -3462 0
3443 3449 -3464 0
c (0<=(aux678 + aux680 - aux683))
-3449 3464 0
-3448 3462 0
-3443 3464 0
-3443 -3449 3462 0
-3443 -3448 3460 0
-3442 3462 0
-3442 -3449 3460 0
-3442 -3448 3459 0
c ((SATLiteral(349) - aux684 + SATLiteral(619))<=0)
-619 -3466 0
-349 -3466 0
-349 -619 -3467 0
c (0<=(SATLiteral(349) - aux684 + SATLiteral(619)))
619 3467 0
349 3467 0
349 619 3466 0
c ((SATLiteral(1024) - aux685 + SATLiteral(889))<=0)
-889 -3469 0
-1024 -3469 0
-1024 -889 -3470 0
c (0<=(SATLiteral(1024) - aux685 + SATLiteral(889)))
889 3470 0
1024 3470 0
1024 889 3469 0
c (( - aux686 + SATLiteral(754) + SATLiteral(214))<=0)
-214 -3472 0
-754 -3472 0
-754 -214 -3473 0
c (0<=( - aux686 + SATLiteral(754) + SATLiteral(214)))
214 3473 0
754 3473 0
754 214 3472 0
c (( - aux687 + SATLiteral(484) + SATLiteral(1159))<=0)
-1159 -3475 0
-484 -3475 0
-484 -1159 -3476 0
c (0<=( - aux687 + SATLiteral(484) + SATLiteral(1159)))
1159 3476 0
484 3476 0
484 1159 3475 0
c ((aux687 - aux688 + SATLiteral(79))<=0)
3475 -3478 0
3476 -3479 0
-79 -3478 0
-79 3475 -3479 0
-79 3476 -3481 0
c (0<=(aux687 - aux688 + SATLiteral(79)))
-3476 3481 0
-3475 3479 0
79 3481 0
79 -3476 3479 0
79 -3475 3478 0
c ((aux684 + aux686 - aux689)<=0)
3472 -3483 0
3473 -3484 0
3466 -3483 0
3466 3472 -3484 0
3466 3473 -3486 0
3467 -3484 0
3467 3472 -3486 0
3467 3473 -3488 0
c (0<=(aux684 + aux686 - aux689))
-3473 3488 0
-3472 3486 0
-3467 3488 0
-3467 -3473 3486 0
-3467 -3472 3484 0
-3466 3486 0
-3466 -3473 3484 0
-3466 -3472 3483 0
c ((SATLiteral(351) - aux690 + SATLiteral(621))<=0)
-621 -3490 0
-351 -3490 0
-351 -621 -3491 0
c (0<=(SATLiteral(351) - aux690 + SATLiteral(621)))
621 3491 0
351 3491 0
351 621 3490 0
c ((SATLiteral(1026) - aux691 + SATLiteral(891))<=0)
-891 -3493 0
-1026 -3493 0
-1026 -891 -3494 0
c (0<=(SATLiteral(1026) - aux691 + SATLiteral(891)))
891 3494 0
1026 3494 0
1026 891 3493 0
c (( - aux692 + SATLiteral(756) + SATLiteral(216))<=0)
-216 -3496 0
-756 -3496 0
-756 -216 -3497 0
c (0<=( - aux692 + SATLiteral(756) + SATLiteral(216)))
216 3497 0
756 3497 0
756 216 3496 0
c (( - aux693 + SATLiteral(486) + SATLiteral(1161))<=0)
-1161 -3499 0
-486 -3499 0
-486 -1161 -3500 0
c (0<=( - aux693 + SATLiteral(486) + SATLiteral(1161)))
1161 3500 0
486 3500 0
486 1161 3499 0
c ((aux693 - aux694 + SATLiteral(81))<=0)
3499 -3502 0
3500 -3503 0
-81 -3502 0
-81 3499 -3503 0
-81 3500 -3505 0
c (0<=(aux693 - aux694 + SATLiteral(81)))
-3500 3505 0
-3499 3503 0
81 3505 0
81 -3500 3503 0
81 -3499 3502 0
c ((aux690 + aux692 - aux695)<=0)
3496 -3507 0
3497 -3508 0
3490 -3507 0
3490 3496 -3508 0
3490 3497 -3510 0
3491 -3508 0
3491 3496 -3510 0
3491 3497 -3512 0
c (0<=(aux690 + aux692 - aux695))
-3497 3512 0
-3496 3510 0
-3491 3512 0
-3491 -3497 3510 0
-3491 -3496 3508 0
-3490 3510 0
-3490 -3497 3508 0
-3490 -3496 3507 0
c ((SATLiteral(353) - aux696 + SATLiteral(623))<=0)
-623 -3514 0
-353 -3514 0
-353 -623 -3515 0
c (0<=(SATLiteral(353) - aux696 + SATLiteral(623)))
623 3515 0
353 3515 0
353 623 3514 0
c ((SATLiteral(1028) - aux697 + SATLiteral(893))<=0)
-893 -3517 0
-1028 -3517 0
-1028 -893 -3518 0
c (0<=(SATLiteral(1028) - aux697 + SATLiteral(893)))
893 3518 0
1028 3518 0
1028 893 3517 0
c (( - aux698 + SATLiteral(758) + SATLiteral(218))<=0)
-218 -3520 0
-758 -3520 0
-758 -218 -3521 0
c (0<=( - aux698 + SATLiteral(758) + SATLiteral(218)))
218 3521 0
758 3521 0
758 218 3520 0
c (( - aux699 + SATLiteral(488) + SATLiteral(1163))<=0)
-1163 -3523 0
-488 -3523 0
-488 -1163 -3524 0
c (0<=( - aux699 + SATLiteral(488) + SATLiteral(1163)))
1163 3524 0
488 3524 0
488 1163 3523 0
c ((aux699 - aux700 + SATLiteral(83))<=0)
3523 -3526 0
3524 -3527 0
-83 -3526 0
-83 3523 -3527 0
-83 3524 -3529 0
c (0<=(aux699 - aux700 + SATLiteral(83)))
-3524 3529 0
-3523 3527 0
83 3529 0
83 -3524 3527 0
83 -3523 3526 0
c ((aux696 + aux698 - aux701)<=0)
3520 -3531 0
3521 -3532 0
3514 -3531 0
3514 3520 -3532 0
3514 3521 -3534 0
3515 -3532 0
3515 3520 -3534 0
3515 3521 -3536 0
c (0<=(aux696 + aux698 - aux701))
-3521 3536 0
-3520 3534 0
-3515 3536 0
-3515 -3521 3534 0
-3515 -3520 3532 0
-3514 3534 0
-3514 -3521 3532 0
-3514 -3520 3531 0
c ((SATLiteral(355) - aux702 + SATLiteral(625))<=0)
-625 -3538 0
-355 -3538 0
-355 -625 -3539 0
c (0<=(SATLiteral(355) - aux702 + SATLiteral(625)))
625 3539 0
355 3539 0
355 625 3538 0
c ((SATLiteral(1030) - aux703 + SATLiteral(895))<=0)
-895 -3541 0
-1030 -3541 0
-1030 -895 -3542 0
c (0<=(SATLiteral(1030) - aux703 + SATLiteral(895)))
895 3542 0
1030 3542 0
1030 895 3541 0
c (( - aux704 + SATLiteral(760) + SATLiteral(220))<=0)
-220 -3544 0
-760 -3544 0
-760 -220 -3545 0
c (0<=( - aux704 + SATLiteral(760) + SATLiteral(220)))
220 3545 0
760 3545 0
760 220 3544 0
c (( - aux705 + SATLiteral(490) + SATLiteral(1165))<=0)
-1165 -3547 0
-490 -3547 0
-490 -1165 -3548 0
c (0<=( - aux705 + SATLiteral(490) + SATLiteral(1165)))
1165 3548 0
490 3548 0
490 1165 3547 0
c ((aux705 - aux706 + SATLiteral(85))<=0)
3547 -3550 0
3548 -3551 0
-85 -3550 0
-85 3547 -3551 0
-85 3548 -3553 0
c (0<=(aux705 - aux706 + SATLiteral(85)))
-3548 3553 0
-3547 3551 0
85 3553 0
85 -3548 3551 0
85 -3547 3550 0
c ((aux702 + aux704 - aux707)<=0)
3544 -3555 0
3545 -3556 0
3538 -3555 0
3538 3544 -3556 0
3538 3545 -3558 0
3539 -3556 0
3539 3544 -3558 0
3539 3545 -3560 0
c (0<=(aux702 + aux704 - aux707))
-3545 3560 0
-3544 3558 0
-3539 3560 0
-3539 -3545 3558 0
-3539 -3544 3556 0
-3538 3558 0
-3538 -3545 3556 0
-3538 -3544 3555 0
c ((SATLiteral(357) - aux708 + SATLiteral(627))<=0)
-627 -3562 0
-357 -3562 0
-357 -627 -3563 0
c (0<=(SATLiteral(357) - aux708 + SATLiteral(627)))
627 3563 0
357 3563 0
357 627 3562 0
c ((SATLiteral(1032) - aux709 + SATLiteral(897))<=0)
-897 -3565 0
-1032 -3565 0
-1032 -897 -3566 0
c (0<=(SATLiteral(1032) - aux709 + SATLiteral(897)))
897 3566 0
1032 3566 0
1032 897 3565 0
c (( - aux710 + SATLiteral(762) + SATLiteral(222))<=0)
-222 -3568 0
-762 -3568 0
-762 -222 -3569 0
c (0<=( - aux710 + SATLiteral(762) + SATLiteral(222)))
222 3569 0
762 3569 0
762 222 3568 0
c (( - aux711 + SATLiteral(492) + SATLiteral(1167))<=0)
-1167 -3571 0
-492 -3571 0
-492 -1167 -3572 0
c (0<=( - aux711 + SATLiteral(492) + SATLiteral(1167)))
1167 3572 0
492 3572 0
492 1167 3571 0
c ((aux711 - aux712 + SATLiteral(87))<=0)
3571 -3574 0
3572 -3575 0
-87 -3574 0
-87 3571 -3575 0
-87 3572 -3577 0
c (0<=(aux711 - aux712 + SATLiteral(87)))
-3572 3577 0
-3571 3575 0
87 3577 0
87 -3572 3575 0
87 -3571 3574 0
c ((aux708 + aux710 - aux713)<=0)
3568 -3579 0
3569 -3580 0
3562 -3579 0
3562 3568 -3580 0
3562 3569 -3582 0
3563 -3580 0
3563 3568 -3582 0
3563 3569 -3584 0
c (0<=(aux708 + aux710 - aux713))
-3569 3584 0
-3568 3582 0
-3563 3584 0
-3563 -3569 3582 0
-3563 -3568 3580 0
-3562 3582 0
-3562 -3569 3580 0
-3562 -3568 3579 0
c ((SATLiteral(359) - aux714 + SATLiteral(629))<=0)
-629 -3586 0
-359 -3586 0
-359 -629 -3587 0
c (0<=(SATLiteral(359) - aux714 + SATLiteral(629)))
629 3587 0
359 3587 0
359 629 3586 0
c ((SATLiteral(1034) - aux715 + SATLiteral(899))<=0)
-899 -3589 0
-1034 -3589 0
-1034 -899 -3590 0
c (0<=(SATLiteral(1034) - aux715 + SATLiteral(899)))
899 3590 0
1034 3590 0
1034 899 3589 0
c (( - aux716 + SATLiteral(764) + SATLiteral(224))<=0)
-224 -3592 0
-764 -3592 0
-764 -224 -3593 0
c (0<=( - aux716 + SATLiteral(764) + SATLiteral(224)))
224 3593 0
764 3593 0
764 224 3592 0
c (( - aux717 + SATLiteral(494) + SATLiteral(1169))<=0)
-1169 -3595 0
-494 -3595 0
-494 -1169 -3596 0
c (0<=( - aux717 + SATLiteral(494) + SATLiteral(1169)))
1169 3596 0
494 3596 0
494 1169 3595 0
c ((aux717 - aux718 + SATLiteral(89))<=0)
3595 -3598 0
3596 -3599 0
-89 -3598 0
-89 3595 -3599 0
-89 3596 -3601 0
c (0<=(aux717 - aux718 + SATLiteral(89)))
-3596 3601 0
-3595 3599 0
89 3601 0
89 -3596 3599 0
89 -3595 3598 0
c ((aux714 + aux716 - aux719)<=0)
3592 -3603 0
3593 -3604 0
3586 -3603 0
3586 3592 -3604 0
3586 3593 -3606 0
3587 -3604 0
3587 3592 -3606 0
3587 3593 -3608 0
c (0<=(aux714 + aux716 - aux719))
-3593 3608 0
-3592 3606 0
-3587 3608 0
-3587 -3593 3606 0
-3587 -3592 3604 0
-3586 3606 0
-3586 -3593 3604 0
-3586 -3592 3603 0
c ((SATLiteral(361) - aux720 + SATLiteral(631))<=0)
-631 -3610 0
-361 -3610 0
-361 -631 -3611 0
c (0<=(SATLiteral(361) - aux720 + SATLiteral(631)))
631 3611 0
361 3611 0
361 631 3610 0
c ((SATLiteral(1036) - aux721 + SATLiteral(901))<=0)
-901 -3613 0
-1036 -3613 0
-1036 -901 -3614 0
c (0<=(SATLiteral(1036) - aux721 + SATLiteral(901)))
901 3614 0
1036 3614 0
1036 901 3613 0
c (( - aux722 + SATLiteral(766) + SATLiteral(226))<=0)
-226 -3616 0
-766 -3616 0
-766 -226 -3617 0
c (0<=( - aux722 + SATLiteral(766) + SATLiteral(226)))
226 3617 0
766 3617 0
766 226 3616 0
c (( - aux723 + SATLiteral(496) + SATLiteral(1171))<=0)
-1171 -3619 0
-496 -3619 0
-496 -1171 -3620 0
c (0<=( - aux723 + SATLiteral(496) + SATLiteral(1171)))
1171 3620 0
496 3620 0
496 1171 3619 0
c ((aux723 - aux724 + SATLiteral(91))<=0)
3619 -3622 0
3620 -3623 0
-91 -3622 0
-91 3619 -3623 0
-91 3620 -3625 0
c (0<=(aux723 - aux724 + SATLiteral(91)))
-3620 3625 0
-3619 3623 0
91 3625 0
91 -3620 3623 0
91 -3619 3622 0
c ((aux720 + aux722 - aux725)<=0)
3616 -3627 0
3617 -3628 0
3610 -3627 0
3610 3616 -3628 0
3610 3617 -3630 0
3611 -3628 0
3611 3616 -3630 0
3611 3617 -3632 0
c (0<=(aux720 + aux722 - aux725))
-3617 3632 0
-3616 3630 0
-3611 3632 0
-3611 -3617 3630 0
-3611 -3616 3628 0
-3610 3630 0
-3610 -3617 3628 0
-3610 -3616 3627 0
c ((SATLiteral(-360) - aux726 + SATLiteral(-630))<=0)
630 -3634 0
360 -3634 0
360 630 -3635 0
c (0<=(SATLiteral(-360) - aux726 + SATLiteral(-630)))
-630 3635 0
-360 3635 0
-360 -630 3634 0
c ((SATLiteral(-1035) - aux727 + SATLiteral(-900))<=0)
900 -3637 0
1035 -3637 0
1035 900 -3638 0
c (0<=(SATLiteral(-1035) - aux727 + SATLiteral(-900)))
-900 3638 0
-1035 3638 0
-1035 -900 3637 0
c (( - aux728 + SATLiteral(-765) + SATLiteral(-225))<=0)
225 -3640 0
765 -3640 0
765 225 -3641 0
c (0<=( - aux728 + SATLiteral(-765) + SATLiteral(-225)))
-225 3641 0
-765 3641 0
-765 -225 3640 0
c (( - aux729 + SATLiteral(-495) + SATLiteral(-1170))<=0)
1170 -3643 0
495 -3643 0
495 1170 -3644 0
c (0<=( - aux729 + SATLiteral(-495) + SATLiteral(-1170)))
-1170 3644 0
-495 3644 0
-495 -1170 3643 0
c ((aux729 - aux730 + SATLiteral(-90))<=0)
3643 -3646 0
3644 -3647 0
90 -3646 0
90 3643 -3647 0
90 3644 -3649 0
c (0<=(aux729 - aux730 + SATLiteral(-90)))
-3644 3649 0
-3643 3647 0
-90 3649 0
-90 -3644 3647 0
-90 -3643 3646 0
c ((aux726 + aux728 - aux731)<=0)
3640 -3651 0
3641 -3652 0
3634 -3651 0
3634 3640 -3652 0
3634 3641 -3654 0
3635 -3652 0
3635 3640 -3654 0
3635 3641 -3656 0
c (0<=(aux726 + aux728 - aux731))
-3641 3656 0
-3640 3654 0
-3635 3656 0
-3635 -3641 3654 0
-3635 -3640 3652 0
-3634 3654 0
-3634 -3641 3652 0
-3634 -3640 3651 0
c ((SATLiteral(362) - aux732 + SATLiteral(632))<=0)
-632 -3658 0
-362 -3658 0
-362 -632 -3659 0
c (0<=(SATLiteral(362) - aux732 + SATLiteral(632)))
632 3659 0
362 3659 0
362 632 3658 0
c ((SATLiteral(1037) - aux733 + SATLiteral(902))<=0)
-902 -3661 0
-1037 -3661 0
-1037 -902 -3662 0
c (0<=(SATLiteral(1037) - aux733 + SATLiteral(902)))
902 3662 0
1037 3662 0
1037 902 3661 0
c (( - aux734 + SATLiteral(767) + SATLiteral(227))<=0)
-227 -3664 0
-767 -3664 0
-767 -227 -3665 0
c (0<=( - aux734 + SATLiteral(767) + SATLiteral(227)))
227 3665 0
767 3665 0
767 227 3664 0
c (( - aux735 + SATLiteral(497) + SATLiteral(1172))<=0)
-1172 -3667 0
-497 -3667 0
-497 -1172 -3668 0
c (0<=( - aux735 + SATLiteral(497) + SATLiteral(1172)))
1172 3668 0
497 3668 0
497 1172 3667 0
c ((aux735 - aux736 + SATLiteral(92))<=0)
3667 -3670 0
3668 -3671 0
-92 -3670 0
-92 3667 -3671 0
-92 3668 -3673 0
c (0<=(aux735 - aux736 + SATLiteral(92)))
-3668 3673 0
-3667 3671 0
92 3673 0
92 -3668 3671 0
92 -3667 3670 0
c ((aux732 + aux734 - aux737)<=0)
3664 -3675 0
3665 -3676 0
3658 -3675 0
3658 3664 -3676 0
3658 3665 -3678 0
3659 -3676 0
3659 3664 -3678 0
3659 3665 -3680 0
c (0<=(aux732 + aux734 - aux737))
-3665 3680 0
-3664 3678 0
-3659 3680 0
-3659 -3665 3678 0
-3659 -3664 3676 0
-3658 3678 0
-3658 -3665 3676 0
-3658 -3664 3675 0
c ((SATLiteral(364) - aux738 + SATLiteral(634))<=0)
-634 -3682 0
-364 -3682 0
-364 -634 -3683 0
c (0<=(SATLiteral(364) - aux738 + SATLiteral(634)))
634 3683 0
364 3683 0
364 634 3682 0
c ((SATLiteral(1039) - aux739 + SATLiteral(904))<=0)
-904 -3685 0
-1039 -3685 0
-1039 -904 -3686 0
c (0<=(SATLiteral(1039) - aux739 + SATLiteral(904)))
904 3686 0
1039 3686 0
1039 904 3685 0
c (( - aux740 + SATLiteral(769) + SATLiteral(229))<=0)
-229 -3688 0
-769 -3688 0
-769 -229 -3689 0
c (0<=( - aux740 + SATLiteral(769) + SATLiteral(229)))
229 3689 0
769 3689 0
769 229 3688 0
c (( - aux741 + SATLiteral(499) + SATLiteral(1174))<=0)
-1174 -3691 0
-499 -3691 0
-499 -1174 -3692 0
c (0<=( - aux741 + SATLiteral(499) + SATLiteral(1174)))
1174 3692 0
499 3692 0
499 1174 3691 0
c ((aux741 - aux742 + SATLiteral(94))<=0)
3691 -3694 0
3692 -3695 0
-94 -3694 0
-94 3691 -3695 0
-94 3692 -3697 0
c (0<=(aux741 - aux742 + SATLiteral(94)))
-3692 3697 0
-3691 3695 0
94 3697 0
94 -3692 3695 0
94 -3691 3694 0
c ((aux738 + aux740 - aux743)<=0)
3688 -3699 0
3689 -3700 0
3682 -3699 0
3682 3688 -3700 0
3682 3689 -3702 0
3683 -3700 0
3683 3688 -3702 0
3683 3689 -3704 0
c (0<=(aux738 + aux740 - aux743))
-3689 3704 0
-3688 3702 0
-3683 3704 0
-3683 -3689 3702 0
-3683 -3688 3700 0
-3682 3702 0
-3682 -3689 3700 0
-3682 -3688 3699 0
c ((SATLiteral(366) - aux744 + SATLiteral(636))<=0)
-636 -3706 0
-366 -3706 0
-366 -636 -3707 0
c (0<=(SATLiteral(366) - aux744 + SATLiteral(636)))
636 3707 0
366 3707 0
366 636 3706 0
c ((SATLiteral(1041) - aux745 + SATLiteral(906))<=0)
-906 -3709 0
-1041 -3709 0
-1041 -906 -3710 0
c (0<=(SATLiteral(1041) - aux745 + SATLiteral(906)))
906 3710 0
1041 3710 0
1041 906 3709 0
c (( - aux746 + SATLiteral(771) + SATLiteral(231))<=0)
-231 -3712 0
-771 -3712 0
-771 -231 -3713 0
c (0<=( - aux746 + SATLiteral(771) + SATLiteral(231)))
231 3713 0
771 3713 0
771 231 3712 0
c (( - aux747 + SATLiteral(501) + SATLiteral(1176))<=0)
-1176 -3715 0
-501 -3715 0
-501 -1176 -3716 0
c (0<=( - aux747 + SATLiteral(501) + SATLiteral(1176)))
1176 3716 0
501 3716 0
501 1176 3715 0
c ((aux747 - aux748 + SATLiteral(96))<=0)
3715 -3718 0
3716 -3719 0
-96 -3718 0
-96 3715 -3719 0
-96 3716 -3721 0
c (0<=(aux747 - aux748 + SATLiteral(96)))
-3716 3721 0
-3715 3719 0
96 3721 0
96 -3716 3719 0
96 -3715 3718 0
c ((aux744 + aux746 - aux749)<=0)
3712 -3723 0
3713 -3724 0
3706 -3723 0
3706 3712 -3724 0
3706 3713 -3726 0
3707 -3724 0
3707 3712 -3726 0
3707 3713 -3728 0
c (0<=(aux744 + aux746 - aux749))
-3713 3728 0
-3712 3726 0
-3707 3728 0
-3707 -3713 3726 0
-3707 -3712 3724 0
-3706 3726 0
-3706 -3713 3724 0
-3706 -3712 3723 0
c ((SATLiteral(368) - aux750 + SATLiteral(638))<=0)
-638 -3730 0
-368 -3730 0
-368 -638 -3731 0
c (0<=(SATLiteral(368) - aux750 + SATLiteral(638)))
638 3731 0
368 3731 0
368 638 3730 0
c ((SATLiteral(1043) - aux751 + SATLiteral(908))<=0)
-908 -3733 0
-1043 -3733 0
-1043 -908 -3734 0
c (0<=(SATLiteral(1043) - aux751 + SATLiteral(908)))
908 3734 0
1043 3734 0
1043 908 3733 0
c (( - aux752 + SATLiteral(773) + SATLiteral(233))<=0)
-233 -3736 0
-773 -3736 0
-773 -233 -3737 0
c (0<=( - aux752 + SATLiteral(773) + SATLiteral(233)))
233 3737 0
773 3737 0
773 233 3736 0
c (( - aux753 + SATLiteral(503) + SATLiteral(1178))<=0)
-1178 -3739 0
-503 -3739 0
-503 -1178 -3740 0
c (0<=( - aux753 + SATLiteral(503) + SATLiteral(1178)))
1178 3740 0
503 3740 0
503 1178 3739 0
c ((aux753 - aux754 + SATLiteral(98))<=0)
3739 -3742 0
3740 -3743 0
-98 -3742 0
-98 3739 -3743 0
-98 3740 -3745 0
c (0<=(aux753 - aux754 + SATLiteral(98)))
-3740 3745 0
-3739 3743 0
98 3745 0
98 -3740 3743 0
98 -3739 3742 0
c ((aux750 + aux752 - aux755)<=0)
3736 -3747 0
3737 -3748 0
3730 -3747 0
3730 3736 -3748 0
3730 3737 -3750 0
3731 -3748 0
3731 3736 -3750 0
3731 3737 -3752 0
c (0<=(aux750 + aux752 - aux755))
-3737 3752 0
-3736 3750 0
-3731 3752 0
-3731 -3737 3750 0
-3731 -3736 3748 0
-3730 3750 0
-3730 -3737 3748 0
-3730 -3736 3747 0
c ((SATLiteral(370) - aux756 + SATLiteral(640))<=0)
-640 -3754 0
-370 -3754 0
-370 -640 -3755 0
c (0<=(SATLiteral(370) - aux756 + SATLiteral(640)))
640 3755 0
370 3755 0
370 640 3754 0
c ((SATLiteral(1045) - aux757 + SATLiteral(910))<=0)
-910 -3757 0
-1045 -3757 0
-1045 -910 -3758 0
c (0<=(SATLiteral(1045) - aux757 + SATLiteral(910)))
910 3758 0
1045 3758 0
1045 910 3757 0
c (( - aux758 + SATLiteral(775) + SATLiteral(235))<=0)
-235 -3760 0
-775 -3760 0
-775 -235 -3761 0
c (0<=( - aux758 + SATLiteral(775) + SATLiteral(235)))
235 3761 0
775 3761 0
775 235 3760 0
c (( - aux759 + SATLiteral(505) + SATLiteral(1180))<=0)
-1180 -3763 0
-505 -3763 0
-505 -1180 -3764 0
c (0<=( - aux759 + SATLiteral(505) + SATLiteral(1180)))
1180 3764 0
505 3764 0
505 1180 3763 0
c ((aux759 - aux760 + SATLiteral(100))<=0)
3763 -3766 0
3764 -3767 0
-100 -3766 0
-100 3763 -3767 0
-100 3764 -3769 0
c (0<=(aux759 - aux760 + SATLiteral(100)))
-3764 3769 0
-3763 3767 0
100 3769 0
100 -3764 3767 0
100 -3763 3766 0
c ((aux756 + aux758 - aux761)<=0)
3760 -3771 0
3761 -3772 0
3754 -3771 0
3754 3760 -3772 0
3754 3761 -3774 0
3755 -3772 0
3755 3760 -3774 0
3755 3761 -3776 0
c (0<=(aux756 + aux758 - aux761))
-3761 3776 0
-3760 3774 0
-3755 3776 0
-3755 -3761 3774 0
-3755 -3760 3772 0
-3754 3774 0
-3754 -3761 3772 0
-3754 -3760 3771 0
c ((SATLiteral(372) - aux762 + SATLiteral(642))<=0)
-642 -3778 0
-372 -3778 0
-372 -642 -3779 0
c (0<=(SATLiteral(372) - aux762 + SATLiteral(642)))
642 3779 0
372 3779 0
372 642 3778 0
c ((SATLiteral(1047) - aux763 + SATLiteral(912))<=0)
-912 -3781 0
-1047 -3781 0
-1047 -912 -3782 0
c (0<=(SATLiteral(1047) - aux763 + SATLiteral(912)))
912 3782 0
1047 3782 0
1047 912 3781 0
c (( - aux764 + SATLiteral(777) + SATLiteral(237))<=0)
-237 -3784 0
-777 -3784 0
-777 -237 -3785 0
c (0<=( - aux764 + SATLiteral(777) + SATLiteral(237)))
237 3785 0
777 3785 0
777 237 3784 0
c (( - aux765 + SATLiteral(507) + SATLiteral(1182))<=0)
-1182 -3787 0
-507 -3787 0
-507 -1182 -3788 0
c (0<=( - aux765 + SATLiteral(507) + SATLiteral(1182)))
1182 3788 0
507 3788 0
507 1182 3787 0
c ((aux765 - aux766 + SATLiteral(102))<=0)
3787 -3790 0
3788 -3791 0
-102 -3790 0
-102 3787 -3791 0
-102 3788 -3793 0
c (0<=(aux765 - aux766 + SATLiteral(102)))
-3788 3793 0
-3787 3791 0
102 3793 0
102 -3788 3791 0
102 -3787 3790 0
c ((aux762 + aux764 - aux767)<=0)
3784 -3795 0
3785 -3796 0
3778 -3795 0
3778 3784 -3796 0
3778 3785 -3798 0
3779 -3796 0
3779 3784 -3798 0
3779 3785 -3800 0
c (0<=(aux762 + aux764 - aux767))
-3785 3800 0
-3784 3798 0
-3779 3800 0
-3779 -3785 3798 0
-3779 -3784 3796 0
-3778 3798 0
-3778 -3785 3796 0
-3778 -3784 3795 0
c ((SATLiteral(374) - aux768 + SATLiteral(644))<=0)
-644 -3802 0
-374 -3802 0
-374 -644 -3803 0
c (0<=(SATLiteral(374) - aux768 + SATLiteral(644)))
644 3803 0
374 3803 0
374 644 3802 0
c ((SATLiteral(1049) - aux769 + SATLiteral(914))<=0)
-914 -3805 0
-1049 -3805 0
-1049 -914 -3806 0
c (0<=(SATLiteral(1049) - aux769 + SATLiteral(914)))
914 3806 0
1049 3806 0
1049 914 3805 0
c (( - aux770 + SATLiteral(779) + SATLiteral(239))<=0)
-239 -3808 0
-779 -3808 0
-779 -239 -3809 0
c (0<=( - aux770 + SATLiteral(779) + SATLiteral(239)))
239 3809 0
779 3809 0
779 239 3808 0
c (( - aux771 + SATLiteral(509) + SATLiteral(1184))<=0)
-1184 -3811 0
-509 -3811 0
-509 -1184 -3812 0
c (0<=( - aux771 + SATLiteral(509) + SATLiteral(1184)))
1184 3812 0
509 3812 0
509 1184 3811 0
c ((aux771 - aux772 + SATLiteral(104))<=0)
3811 -3814 0
3812 -3815 0
-104 -3814 0
-104 3811 -3815 0
-104 3812 -3817 0
c (0<=(aux771 - aux772 + SATLiteral(104)))
-3812 3817 0
-3811 3815 0
104 3817 0
104 -3812 3815 0
104 -3811 3814 0
c ((aux768 + aux770 - aux773)<=0)
3808 -3819 0
3809 -3820 0
3802 -3819 0
3802 3808 -3820 0
3802 3809 -3822 0
3803 -3820 0
3803 3808 -3822 0
3803 3809 -3824 0
c (0<=(aux768 + aux770 - aux773))
-3809 3824 0
-3808 3822 0
-3803 3824 0
-3803 -3809 3822 0
-3803 -3808 3820 0
-3802 3822 0
-3802 -3809 3820 0
-3802 -3808 3819 0
c ((SATLiteral(376) - aux774 + SATLiteral(646))<=0)
-646 -3826 0
-376 -3826 0
-376 -646 -3827 0
c (0<=(SATLiteral(376) - aux774 + SATLiteral(646)))
646 3827 0
376 3827 0
376 646 3826 0
c ((SATLiteral(1051) - aux775 + SATLiteral(916))<=0)
-916 -3829 0
-1051 -3829 0
-1051 -916 -3830 0
c (0<=(SATLiteral(1051) - aux775 + SATLiteral(916)))
916 3830 0
1051 3830 0
1051 916 3829 0
c (( - aux776 + SATLiteral(781) + SATLiteral(241))<=0)
-241 -3832 0
-781 -3832 0
-781 -241 -3833 0
c (0<=( - aux776 + SATLiteral(781) + SATLiteral(241)))
241 3833 0
781 3833 0
781 241 3832 0
c (( - aux777 + SATLiteral(511) + SATLiteral(1186))<=0)
-1186 -3835 0
-511 -3835 0
-511 -1186 -3836 0
c (0<=( - aux777 + SATLiteral(511) + SATLiteral(1186)))
1186 3836 0
511 3836 0
511 1186 3835 0
c ((aux777 - aux778 + SATLiteral(106))<=0)
3835 -3838 0
3836 -3839 0
-106 -3838 0
-106 3835 -3839 0
-106 3836 -3841 0
c (0<=(aux777 - aux778 + SATLiteral(106)))
-3836 3841 0
-3835 3839 0
106 3841 0
106 -3836 3839 0
106 -3835 3838 0
c ((aux774 + aux776 - aux779)<=0)
3832 -3843 0
3833 -3844 0
3826 -3843 0
3826 3832 -3844 0
3826 3833 -3846 0
3827 -3844 0
3827 3832 -3846 0
3827 3833 -3848 0
c (0<=(aux774 + aux776 - aux779))
-3833 3848 0
-3832 3846 0
-3827 3848 0
-3827 -3833 3846 0
-3827 -3832 3844 0
-3826 3846 0
-3826 -3833 3844 0
-3826 -3832 3843 0
c ((SATLiteral(-375) - aux780 + SATLiteral(-645))<=0)
645 -3850 0
375 -3850 0
375 645 -3851 0
c (0<=(SATLiteral(-375) - aux780 + SATLiteral(-645)))
-645 3851 0
-375 3851 0
-375 -645 3850 0
c ((SATLiteral(-1050) - aux781 + SATLiteral(-915))<=0)
915 -3853 0
1050 -3853 0
1050 915 -3854 0
c (0<=(SATLiteral(-1050) - aux781 + SATLiteral(-915)))
-915 3854 0
-1050 3854 0
-1050 -915 3853 0
c (( - aux782 + SATLiteral(-780) + SATLiteral(-240))<=0)
240 -3856 0
780 -3856 0
780 240 -3857 0
c (0<=( - aux782 + SATLiteral(-780) + SATLiteral(-240)))
-240 3857 0
-780 3857 0
-780 -240 3856 0
c (( - aux783 + SATLiteral(-510) + SATLiteral(-1185))<=0)
1185 -3859 0
510 -3859 0
510 1185 -3860 0
c (0<=( - aux783 + SATLiteral(-510) + SATLiteral(-1185)))
-1185 3860 0
-510 3860 0
-510 -1185 3859 0
c ((aux783 - aux784 + SATLiteral(-105))<=0)
3859 -3862 0
3860 -3863 0
105 -3862 0
105 3859 -3863 0
105 3860 -3865 0
c (0<=(aux783 - aux784 + SATLiteral(-105)))
-3860 3865 0
-3859 3863 0
-105 3865 0
-105 -3860 3863 0
-105 -3859 3862 0
c ((aux780 + aux782 - aux785)<=0)
3856 -3867 0
3857 -3868 0
3850 -3867 0
3850 3856 -3868 0
3850 3857 -3870 0
3851 -3868 0
3851 3856 -3870 0
3851 3857 -3872 0
c (0<=(aux780 + aux782 - aux785))
-3857 3872 0
-3856 3870 0
-3851 3872 0
-3851 -3857 3870 0
-3851 -3856 3868 0
-3850 3870 0
-3850 -3857 3868 0
-3850 -3856 3867 0
c ((SATLiteral(377) - aux786 + SATLiteral(647))<=0)
-647 -3874 0
-377 -3874 0
-377 -647 -3875 0
c (0<=(SATLiteral(377) - aux786 + SATLiteral(647)))
647 3875 0
377 3875 0
377 647 3874 0
c ((SATLiteral(1052) - aux787 + SATLiteral(917))<=0)
-917 -3877 0
-1052 -3877 0
-1052 -917 -3878 0
c (0<=(SATLiteral(1052) - aux787 + SATLiteral(917)))
917 3878 0
1052 3878 0
1052 917 3877 0
c (( - aux788 + SATLiteral(782) + SATLiteral(242))<=0)
-242 -3880 0
-782 -3880 0
-782 -242 -3881 0
c (0<=( - aux788 + SATLiteral(782) + SATLiteral(242)))
242 3881 0
782 3881 0
782 242 3880 0
c (( - aux789 + SATLiteral(512) + SATLiteral(1187))<=0)
-1187 -3883 0
-512 -3883 0
-512 -1187 -3884 0
c (0<=( - aux789 + SATLiteral(512) + SATLiteral(1187)))
1187 3884 0
512 3884 0
512 1187 3883 0
c ((aux789 - aux790 + SATLiteral(107))<=0)
3883 -3886 0
3884 -3887 0
-107 -3886 0
-107 3883 -3887 0
-107 3884 -3889 0
c (0<=(aux789 - aux790 + SATLiteral(107)))
-3884 3889 0
-3883 3887 0
107 3889 0
107 -3884 3887 0
107 -3883 3886 0
c ((aux786 + aux788 - aux791)<=0)
3880 -3891 0
3881 -3892 0
3874 -3891 0
3874 3880 -3892 0
3874 3881 -3894 0
3875 -3892 0
3875 3880 -3894 0
3875 3881 -3896 0
c (0<=(aux786 + aux788 - aux791))
-3881 3896 0
-3880 3894 0
-3875 3896 0
-3875 -3881 3894 0
-3875 -3880 3892 0
-3874 3894 0
-3874 -3881 3892 0
-3874 -3880 3891 0
c ((SATLiteral(379) - aux792 + SATLiteral(649))<=0)
-649 -3898 0
-379 -3898 0
-379 -649 -3899 0
c (0<=(SATLiteral(379) - aux792 + SATLiteral(649)))
649 3899 0
379 3899 0
379 649 3898 0
c ((SATLiteral(1054) - aux793 + SATLiteral(919))<=0)
-919 -3901 0
-1054 -3901 0
-1054 -919 -3902 0
c (0<=(SATLiteral(1054) - aux793 + SATLiteral(919)))
919 3902 0
1054 3902 0
1054 919 3901 0
c (( - aux794 + SATLiteral(784) + SATLiteral(244))<=0)
-244 -3904 0
-784 -3904 0
-784 -244 -3905 0
c (0<=( - aux794 + SATLiteral(784) + SATLiteral(244)))
244 3905 0
784 3905 0
784 244 3904 0
c (( - aux795 + SATLiteral(514) + SATLiteral(1189))<=0)
-1189 -3907 0
-514 -3907 0
-514 -1189 -3908 0
c (0<=( - aux795 + SATLiteral(514) + SATLiteral(1189)))
1189 3908 0
514 3908 0
514 1189 3907 0
c ((aux795 - aux796 + SATLiteral(109))<=0)
3907 -3910 0
3908 -3911 0
-109 -3910 0
-109 3907 -3911 0
-109 3908 -3913 0
c (0<=(aux795 - aux796 + SATLiteral(109)))
-3908 3913 0
-3907 3911 0
109 3913 0
109 -3908 3911 0
109 -3907 3910 0
c ((aux792 + aux794 - aux797)<=0)
3904 -3915 0
3905 -3916 0
3898 -3915 0
3898 3904 -3916 0
3898 3905 -3918 0
3899 -3916 0
3899 3904 -3918 0
3899 3905 -3920 0
c (0<=(aux792 + aux794 - aux797))
-3905 3920 0
-3904 3918 0
-3899 3920 0
-3899 -3905 3918 0
-3899 -3904 3916 0
-3898 3918 0
-3898 -3905 3916 0
-3898 -3904 3915 0
c ((SATLiteral(381) - aux798 + SATLiteral(651))<=0)
-651 -3922 0
-381 -3922 0
-381 -651 -3923 0
c (0<=(SATLiteral(381) - aux798 + SATLiteral(651)))
651 3923 0
381 3923 0
381 651 3922 0
c ((SATLiteral(1056) - aux799 + SATLiteral(921))<=0)
-921 -3925 0
-1056 -3925 0
-1056 -921 -3926 0
c (0<=(SATLiteral(1056) - aux799 + SATLiteral(921)))
921 3926 0
1056 3926 0
1056 921 3925 0
c (( - aux800 + SATLiteral(786) + SATLiteral(246))<=0)
-246 -3928 0
-786 -3928 0
-786 -246 -3929 0
c (0<=( - aux800 + SATLiteral(786) + SATLiteral(246)))
246 3929 0
786 3929 0
786 246 3928 0
c (( - aux801 + SATLiteral(516) + SATLiteral(1191))<=0)
-1191 -3931 0
-516 -3931 0
-516 -1191 -3932 0
c (0<=( - aux801 + SATLiteral(516) + SATLiteral(1191)))
1191 3932 0
516 3932 0
516 1191 3931 0
c ((aux801 - aux802 + SATLiteral(111))<=0)
3931 -3934 0
3932 -3935 0
-111 -3934 0
-111 3931 -3935 0
-111 3932 -3937 0
c (0<=(aux801 - aux802 + SATLiteral(111)))
-3932 3937 0
-3931 3935 0
111 3937 0
111 -3932 3935 0
111 -3931 3934 0
c ((aux798 + aux800 - aux803)<=0)
3928 -3939 0
3929 -3940 0
3922 -3939 0
3922 3928 -3940 0
3922 3929 -3942 0
3923 -3940 0
3923 3928 -3942 0
3923 3929 -3944 0
c (0<=(aux798 + aux800 - aux803))
-3929 3944 0
-3928 3942 0
-3923 3944 0
-3923 -3929 3942 0
-3923 -3928 3940 0
-3922 3942 0
-3922 -3929 3940 0
-3922 -3928 3939 0
c ((SATLiteral(383) - aux804 + SATLiteral(653))<=0)
-653 -3946 0
-383 -3946 0
-383 -653 -3947 0
c (0<=(SATLiteral(383) - aux804 + SATLiteral(653)))
653 3947 0
383 3947 0
383 653 3946 0
c ((SATLiteral(1058) - aux805 + SATLiteral(923))<=0)
-923 -3949 0
-1058 -3949 0
-1058 -923 -3950 0
c (0<=(SATLiteral(1058) - aux805 + SATLiteral(923)))
923 3950 0
1058 3950 0
1058 923 3949 0
c (( - aux806 + SATLiteral(788) + SATLiteral(248))<=0)
-248 -3952 0
-788 -3952 0
-788 -248 -3953 0
c (0<=( - aux806 + SATLiteral(788) + SATLiteral(248)))
248 3953 0
788 3953 0
788 248 3952 0
c (( - aux807 + SATLiteral(518) + SATLiteral(1193))<=0)
-1193 -3955 0
-518 -3955 0
-518 -1193 -3956 0
c (0<=( - aux807 + SATLiteral(518) + SATLiteral(1193)))
1193 3956 0
518 3956 0
518 1193 3955 0
c ((aux807 - aux808 + SATLiteral(113))<=0)
3955 -3958 0
3956 -3959 0
-113 -3958 0
-113 3955 -3959 0
-113 3956 -3961 0
c (0<=(aux807 - aux808 + SATLiteral(113)))
-3956 3961 0
-3955 3959 0
113 3961 0
113 -3956 3959 0
113 -3955 3958 0
c ((aux804 + aux806 - aux809)<=0)
3952 -3963 0
3953 -3964 0
3946 -3963 0
3946 3952 -3964 0
3946 3953 -3966 0
3947 -3964 0
3947 3952 -3966 0
3947 3953 -3968 0
c (0<=(aux804 + aux806 - aux809))
-3953 3968 0
-3952 3966 0
-3947 3968 0
-3947 -3953 3966 0
-3947 -3952 3964 0
-3946 3966 0
-3946 -3953 3964 0
-3946 -3952 3963 0
c ((SATLiteral(385) - aux810 + SATLiteral(655))<=0)
-655 -3970 0
-385 -3970 0
-385 -655 -3971 0
c (0<=(SATLiteral(385) - aux810 + SATLiteral(655)))
655 3971 0
385 3971 0
385 655 3970 0
c ((SATLiteral(1060) - aux811 + SATLiteral(925))<=0)
-925 -3973 0
-1060 -3973 0
-1060 -925 -3974 0
c (0<=(SATLiteral(1060) - aux811 + SATLiteral(925)))
925 3974 0
1060 3974 0
1060 925 3973 0
c (( - aux812 + SATLiteral(790) + SATLiteral(250))<=0)
-250 -3976 0
-790 -3976 0
-790 -250 -3977 0
c (0<=( - aux812 + SATLiteral(790) + SATLiteral(250)))
250 3977 0
790 3977 0
790 250 3976 0
c (( - aux813 + SATLiteral(520) + SATLiteral(1195))<=0)
-1195 -3979 0
-520 -3979 0
-520 -1195 -3980 0
c (0<=( - aux813 + SATLiteral(520) + SATLiteral(1195)))
1195 3980 0
520 3980 0
520 1195 3979 0
c ((aux813 - aux814 + SATLiteral(115))<=0)
3979 -3982 0
3980 -3983 0
-115 -3982 0
-115 3979 -3983 0
-115 3980 -3985 0
c (0<=(aux813 - aux814 + SATLiteral(115)))
-3980 3985 0
-3979 3983 0
115 3985 0
115 -3980 3983 0
115 -3979 3982 0
c ((aux810 + aux812 - aux815)<=0)
3976 -3987 0
3977 -3988 0
3970 -3987 0
3970 3976 -3988 0
3970 3977 -3990 0
3971 -3988 0
3971 3976 -3990 0
3971 3977 -3992 0
c (0<=(aux810 + aux812 - aux815))
-3977 3992 0
-3976 3990 0
-3971 3992 0
-3971 -3977 3990 0
-3971 -3976 3988 0
-3970 3990 0
-3970 -3977 3988 0
-3970 -3976 3987 0
c ((SATLiteral(387) - aux816 + SATLiteral(657))<=0)
-657 -3994 0
-387 -3994 0
-387 -657 -3995 0
c (0<=(SATLiteral(387) - aux816 + SATLiteral(657)))
657 3995 0
387 3995 0
387 657 3994 0
c ((SATLiteral(1062) - aux817 + SATLiteral(927))<=0)
-927 -3997 0
-1062 -3997 0
-1062 -927 -3998 0
c (0<=(SATLiteral(1062) - aux817 + SATLiteral(927)))
927 3998 0
1062 3998 0
1062 927 3997 0
c (( - aux818 + SATLiteral(792) + SATLiteral(252))<=0)
-252 -4000 0
-792 -4000 0
-792 -252 -4001 0
c (0<=( - aux818 + SATLiteral(792) + SATLiteral(252)))
252 4001 0
792 4001 0
792 252 4000 0
c (( - aux819 + SATLiteral(522) + SATLiteral(1197))<=0)
-1197 -4003 0
-522 -4003 0
-522 -1197 -4004 0
c (0<=( - aux819 + SATLiteral(522) + SATLiteral(1197)))
1197 4004 0
522 4004 0
522 1197 4003 0
c ((aux819 - aux820 + SATLiteral(117))<=0)
4003 -4006 0
4004 -4007 0
-117 -4006 0
-117 4003 -4007 0
-117 4004 -4009 0
c (0<=(aux819 - aux820 + SATLiteral(117)))
-4004 4009 0
-4003 4007 0
117 4009 0
117 -4004 4007 0
117 -4003 4006 0
c ((aux816 + aux818 - aux821)<=0)
4000 -4011 0
4001 -4012 0
3994 -4011 0
3994 4000 -4012 0
3994 4001 -4014 0
3995 -4012 0
3995 4000 -4014 0
3995 4001 -4016 0
c (0<=(aux816 + aux818 - aux821))
-4001 4016 0
-4000 4014 0
-3995 4016 0
-3995 -4001 4014 0
-3995 -4000 4012 0
-3994 4014 0
-3994 -4001 4012 0
-3994 -4000 4011 0
c ((SATLiteral(389) - aux822 + SATLiteral(659))<=0)
-659 -4018 0
-389 -4018 0
-389 -659 -4019 0
c (0<=(SATLiteral(389) - aux822 + SATLiteral(659)))
659 4019 0
389 4019 0
389 659 4018 0
c ((SATLiteral(1064) - aux823 + SATLiteral(929))<=0)
-929 -4021 0
-1064 -4021 0
-1064 -929 -4022 0
c (0<=(SATLiteral(1064) - aux823 + SATLiteral(929)))
929 4022 0
1064 4022 0
1064 929 4021 0
c (( - aux824 + SATLiteral(794) + SATLiteral(254))<=0)
-254 -4024 0
-794 -4024 0
-794 -254 -4025 0
c (0<=( - aux824 + SATLiteral(794) + SATLiteral(254)))
254 4025 0
794 4025 0
794 254 4024 0
c (( - aux825 + SATLiteral(524) + SATLiteral(1199))<=0)
-1199 -4027 0
-524 -4027 0
-524 -1199 -4028 0
c (0<=( - aux825 + SATLiteral(524) + SATLiteral(1199)))
1199 4028 0
524 4028 0
524 1199 4027 0
c ((aux825 - aux826 + SATLiteral(119))<=0)
4027 -4030 0
4028 -4031 0
-119 -4030 0
-119 4027 -4031 0
-119 4028 -4033 0
c (0<=(aux825 - aux826 + SATLiteral(119)))
-4028 4033 0
-4027 4031 0
119 4033 0
119 -4028 4031 0
119 -4027 4030 0
c ((aux822 + aux824 - aux827)<=0)
4024 -4035 0
4025 -4036 0
4018 -4035 0
4018 4024 -4036 0
4018 4025 -4038 0
4019 -4036 0
4019 4024 -4038 0
4019 4025 -4040 0
c (0<=(aux822 + aux824 - aux827))
-4025 4040 0
-4024 4038 0
-4019 4040 0
-4019 -4025 4038 0
-4019 -4024 4036 0
-4018 4038 0
-4018 -4025 4036 0
-4018 -4024 4035 0
c ((SATLiteral(391) - aux828 + SATLiteral(661))<=0)
-661 -4042 0
-391 -4042 0
-391 -661 -4043 0
c (0<=(SATLiteral(391) - aux828 + SATLiteral(661)))
661 4043 0
391 4043 0
391 661 4042 0
c ((SATLiteral(1066) - aux829 + SATLiteral(931))<=0)
-931 -4045 0
-1066 -4045 0
-1066 -931 -4046 0
c (0<=(SATLiteral(1066) - aux829 + SATLiteral(931)))
931 4046 0
1066 4046 0
1066 931 4045 0
c (( - aux830 + SATLiteral(796) + SATLiteral(256))<=0)
-256 -4048 0
-796 -4048 0
-796 -256 -4049 0
c (0<=( - aux830 + SATLiteral(796) + SATLiteral(256)))
256 4049 0
796 4049 0
796 256 4048 0
c (( - aux831 + SATLiteral(526) + SATLiteral(1201))<=0)
-1201 -4051 0
-526 -4051 0
-526 -1201 -4052 0
c (0<=( - aux831 + SATLiteral(526) + SATLiteral(1201)))
1201 4052 0
526 4052 0
526 1201 4051 0
c ((aux831 - aux832 + SATLiteral(121))<=0)
4051 -4054 0
4052 -4055 0
-121 -4054 0
-121 4051 -4055 0
-121 4052 -4057 0
c (0<=(aux831 - aux832 + SATLiteral(121)))
-4052 4057 0
-4051 4055 0
121 4057 0
121 -4052 4055 0
121 -4051 4054 0
c ((aux828 + aux830 - aux833)<=0)
4048 -4059 0
4049 -4060 0
4042 -4059 0
4042 4048 -4060 0
4042 4049 -4062 0
4043 -4060 0
4043 4048 -4062 0
4043 4049 -4064 0
c (0<=(aux828 + aux830 - aux833))
-4049 4064 0
-4048 4062 0
-4043 4064 0
-4043 -4049 4062 0
-4043 -4048 4060 0
-4042 4062 0
-4042 -4049 4060 0
-4042 -4048 4059 0
c ((SATLiteral(-390) - aux834 + SATLiteral(-660))<=0)
660 -4066 0
390 -4066 0
390 660 -4067 0
c (0<=(SATLiteral(-390) - aux834 + SATLiteral(-660)))
-660 4067 0
-390 4067 0
-390 -660 4066 0
c ((SATLiteral(-1065) - aux835 + SATLiteral(-930))<=0)
930 -4069 0
1065 -4069 0
1065 930 -4070 0
c (0<=(SATLiteral(-1065) - aux835 + SATLiteral(-930)))
-930 4070 0
-1065 4070 0
-1065 -930 4069 0
c (( - aux836 + SATLiteral(-795) + SATLiteral(-255))<=0)
255 -4072 0
795 -4072 0
795 255 -4073 0
c (0<=( - aux836 + SATLiteral(-795) + SATLiteral(-255)))
-255 4073 0
-795 4073 0
-795 -255 4072 0
c (( - aux837 + SATLiteral(-525) + SATLiteral(-1200))<=0)
1200 -4075 0
525 -4075 0
525 1200 -4076 0
c (0<=( - aux837 + SATLiteral(-525) + SATLiteral(-1200)))
-1200 4076 0
-525 4076 0
-525 -1200 4075 0
c ((aux837 - aux838 + SATLiteral(-120))<=0)
4075 -4078 0
4076 -4079 0
120 -4078 0
120 4075 -4079 0
120 4076 -4081 0
c (0<=(aux837 - aux838 + SATLiteral(-120)))
-4076 4081 0
-4075 4079 0
-120 4081 0
-120 -4076 4079 0
-120 -4075 4078 0
c ((aux834 + aux836 - aux839)<=0)
4072 -4083 0
4073 -4084 0
4066 -4083 0
4066 4072 -4084 0
4066 4073 -4086 0
4067 -4084 0
4067 4072 -4086 0
4067 4073 -4088 0
c (0<=(aux834 + aux836 - aux839))
-4073 4088 0
-4072 4086 0
-4067 4088 0
-4067 -4073 4086 0
-4067 -4072 4084 0
-4066 4086 0
-4066 -4073 4084 0
-4066 -4072 4083 0
c ((SATLiteral(392) - aux840 + SATLiteral(662))<=0)
-662 -4090 0
-392 -4090 0
-392 -662 -4091 0
c (0<=(SATLiteral(392) - aux840 + SATLiteral(662)))
662 4091 0
392 4091 0
392 662 4090 0
c ((SATLiteral(1067) - aux841 + SATLiteral(932))<=0)
-932 -4093 0
-1067 -4093 0
-1067 -932 -4094 0
c (0<=(SATLiteral(1067) - aux841 + SATLiteral(932)))
932 4094 0
1067 4094 0
1067 932 4093 0
c (( - aux842 + SATLiteral(797) + SATLiteral(257))<=0)
-257 -4096 0
-797 -4096 0
-797 -257 -4097 0
c (0<=( - aux842 + SATLiteral(797) + SATLiteral(257)))
257 4097 0
797 4097 0
797 257 4096 0
c (( - aux843 + SATLiteral(527) + SATLiteral(1202))<=0)
-1202 -4099 0
-527 -4099 0
-527 -1202 -4100 0
c (0<=( - aux843 + SATLiteral(527) + SATLiteral(1202)))
1202 4100 0
527 4100 0
527 1202 4099 0
c ((aux843 - aux844 + SATLiteral(122))<=0)
4099 -4102 0
4100 -4103 0
-122 -4102 0
-122 4099 -4103 0
-122 4100 -4105 0
c (0<=(aux843 - aux844 + SATLiteral(122)))
-4100 4105 0
-4099 4103 0
122 4105 0
122 -4100 4103 0
122 -4099 4102 0
c ((aux840 + aux842 - aux845)<=0)
4096 -4107 0
4097 -4108 0
4090 -4107 0
4090 4096 -4108 0
4090 4097 -4110 0
4091 -4108 0
4091 4096 -4110 0
4091 4097 -4112 0
c (0<=(aux840 + aux842 - aux845))
-4097 4112 0
-4096 4110 0
-4091 4112 0
-4091 -4097 4110 0
-4091 -4096 4108 0
-4090 4110 0
-4090 -4097 4108 0
-4090 -4096 4107 0
c ((SATLiteral(394) - aux846 + SATLiteral(664))<=0)
-664 -4114 0
-394 -4114 0
-394 -664 -4115 0
c (0<=(SATLiteral(394) - aux846 + SATLiteral(664)))
664 4115 0
394 4115 0
394 664 4114 0
c ((SATLiteral(1069) - aux847 + SATLiteral(934))<=0)
-934 -4117 0
-1069 -4117 0
-1069 -934 -4118 0
c (0<=(SATLiteral(1069) - aux847 + SATLiteral(934)))
934 4118 0
1069 4118 0
1069 934 4117 0
c (( - aux848 + SATLiteral(799) + SATLiteral(259))<=0)
-259 -4120 0
-799 -4120 0
-799 -259 -4121 0
c (0<=( - aux848 + SATLiteral(799) + SATLiteral(259)))
259 4121 0
799 4121 0
799 259 4120 0
c (( - aux849 + SATLiteral(529) + SATLiteral(1204))<=0)
-1204 -4123 0
-529 -4123 0
-529 -1204 -4124 0
c (0<=( - aux849 + SATLiteral(529) + SATLiteral(1204)))
1204 4124 0
529 4124 0
529 1204 4123 0
c ((aux849 - aux850 + SATLiteral(124))<=0)
4123 -4126 0
4124 -4127 0
-124 -4126 0
-124 4123 -4127 0
-124 4124 -4129 0
c (0<=(aux849 - aux850 + SATLiteral(124)))
-4124 4129 0
-4123 4127 0
124 4129 0
124 -4124 4127 0
124 -4123 4126 0
c ((aux846 + aux848 - aux851)<=0)
4120 -4131 0
4121 -4132 0
4114 -4131 0
4114 4120 -4132 0
4114 4121 -4134 0
4115 -4132 0
4115 4120 -4134 0
4115 4121 -4136 0
c (0<=(aux846 + aux848 - aux851))
-4121 4136 0
-4120 4134 0
-4115 4136 0
-4115 -4121 4134 0
-4115 -4120 4132 0
-4114 4134 0
-4114 -4121 4132 0
-4114 -4120 4131 0
c ((SATLiteral(396) - aux852 + SATLiteral(666))<=0)
-666 -4138 0
-396 -4138 0
-396 -666 -4139 0
c (0<=(SATLiteral(396) - aux852 + SATLiteral(666)))
666 4139 0
396 4139 0
396 666 4138 0
c ((SATLiteral(1071) - aux853 + SATLiteral(936))<=0)
-936 -4141 0
-1071 -4141 0
-1071 -936 -4142 0
c (0<=(SATLiteral(1071) - aux853 + SATLiteral(936)))
936 4142 0
1071 4142 0
1071 936 4141 0
c (( - aux854 + SATLiteral(801) + SATLiteral(261))<=0)
-261 -4144 0
-801 -4144 0
-801 -261 -4145 0
c (0<=( - aux854 + SATLiteral(801) + SATLiteral(261)))
261 4145 0
801 4145 0
801 261 4144 0
c (( - aux855 + SATLiteral(531) + SATLiteral(1206))<=0)
-1206 -4147 0
-531 -4147 0
-531 -1206 -4148 0
c (0<=( - aux855 + SATLiteral(531) + SATLiteral(1206)))
1206 4148 0
531 4148 0
531 1206 4147 0
c ((aux855 - aux856 + SATLiteral(126))<=0)
4147 -4150 0
4148 -4151 0
-126 -4150 0
-126 4147 -4151 0
-126 4148 -4153 0
c (0<=(aux855 - aux856 + SATLiteral(126)))
-4148 4153 0
-4147 4151 0
126 4153 0
126 -4148 4151 0
126 -4147 4150 0
c ((aux852 + aux854 - aux857)<=0)
4144 -4155 0
4145 -4156 0
4138 -4155 0
4138 4144 -4156 0
4138 4145 -4158 0
4139 -4156 0
4139 4144 -4158 0
4139 4145 -4160 0
c (0<=(aux852 + aux854 - aux857))
-4145 4160 0
-4144 4158 0
-4139 4160 0
-4139 -4145 4158 0
-4139 -4144 4156 0
-4138 4158 0
-4138 -4145 4156 0
-4138 -4144 4155 0
c ((SATLiteral(398) - aux858 + SATLiteral(668))<=0)
-668 -4162 0
-398 -4162 0
-398 -668 -4163 0
c (0<=(SATLiteral(398) - aux858 + SATLiteral(668)))
668 4163 0
398 4163 0
398 668 4162 0
c ((SATLiteral(1073) - aux859 + SATLiteral(938))<=0)
-938 -4165 0
-1073 -4165 0
-1073 -938 -4166 0
c (0<=(SATLiteral(1073) - aux859 + SATLiteral(938)))
938 4166 0
1073 4166 0
1073 938 4165 0
c (( - aux860 + SATLiteral(803) + SATLiteral(263))<=0)
-263 -4168 0
-803 -4168 0
-803 -263 -4169 0
c (0<=( - aux860 + SATLiteral(803) + SATLiteral(263)))
263 4169 0
803 4169 0
803 263 4168 0
c (( - aux861 + SATLiteral(533) + SATLiteral(1208))<=0)
-1208 -4171 0
-533 -4171 0
-533 -1208 -4172 0
c (0<=( - aux861 + SATLiteral(533) + SATLiteral(1208)))
1208 4172 0
533 4172 0
533 1208 4171 0
c ((aux861 - aux862 + SATLiteral(128))<=0)
4171 -4174 0
4172 -4175 0
-128 -4174 0
-128 4171 -4175 0
-128 4172 -4177 0
c (0<=(aux861 - aux862 + SATLiteral(128)))
-4172 4177 0
-4171 4175 0
128 4177 0
128 -4172 4175 0
128 -4171 4174 0
c ((aux858 + aux860 - aux863)<=0)
4168 -4179 0
4169 -4180 0
4162 -4179 0
4162 4168 -4180 0
4162 4169 -4182 0
4163 -4180 0
4163 4168 -4182 0
4163 4169 -4184 0
c (0<=(aux858 + aux860 - aux863))
-4169 4184 0
-4168 4182 0
-4163 4184 0
-4163 -4169 4182 0
-4163 -4168 4180 0
-4162 4182 0
-4162 -4169 4180 0
-4162 -4168 4179 0
c ((SATLiteral(400) - aux864 + SATLiteral(670))<=0)
-670 -4186 0
-400 -4186 0
-400 -670 -4187 0
c (0<=(SATLiteral(400) - aux864 + SATLiteral(670)))
670 4187 0
400 4187 0
400 670 4186 0
c ((SATLiteral(1075) - aux865 + SATLiteral(940))<=0)
-940 -4189 0
-1075 -4189 0
-1075 -940 -4190 0
c (0<=(SATLiteral(1075) - aux865 + SATLiteral(940)))
940 4190 0
1075 4190 0
1075 940 4189 0
c (( - aux866 + SATLiteral(805) + SATLiteral(265))<=0)
-265 -4192 0
-805 -4192 0
-805 -265 -4193 0
c (0<=( - aux866 + SATLiteral(805) + SATLiteral(265)))
265 4193 0
805 4193 0
805 265 4192 0
c (( - aux867 + SATLiteral(535) + SATLiteral(1210))<=0)
-1210 -4195 0
-535 -4195 0
-535 -1210 -4196 0
c (0<=( - aux867 + SATLiteral(535) + SATLiteral(1210)))
1210 4196 0
535 4196 0
535 1210 4195 0
c ((aux867 - aux868 + SATLiteral(130))<=0)
4195 -4198 0
4196 -4199 0
-130 -4198 0
-130 4195 -4199 0
-130 4196 -4201 0
c (0<=(aux867 - aux868 + SATLiteral(130)))
-4196 4201 0
-4195 4199 0
130 4201 0
130 -4196 4199 0
130 -4195 4198 0
c ((aux864 + aux866 - aux869)<=0)
4192 -4203 0
4193 -4204 0
4186 -4203 0
4186 4192 -4204 0
4186 4193 -4206 0
4187 -4204 0
4187 4192 -4206 0
4187 4193 -4208 0
c (0<=(aux864 + aux866 - aux869))
-4193 4208 0
-4192 4206 0
-4187 4208 0
-4187 -4193 4206 0
-4187 -4192 4204 0
-4186 4206 0
-4186 -4193 4204 0
-4186 -4192 4203 0
c ((SATLiteral(402) - aux870 + SATLiteral(672))<=0)
-672 -4210 0
-402 -4210 0
-402 -672 -4211 0
c (0<=(SATLiteral(402) - aux870 + SATLiteral(672)))
672 4211 0
402 4211 0
402 672 4210 0
c ((SATLiteral(1077) - aux871 + SATLiteral(942))<=0)
-942 -4213 0
-1077 -4213 0
-1077 -942 -4214 0
c (0<=(SATLiteral(1077) - aux871 + SATLiteral(942)))
942 4214 0
1077 4214 0
1077 942 4213 0
c (( - aux872 + SATLiteral(807) + SATLiteral(267))<=0)
-267 -4216 0
-807 -4216 0
-807 -267 -4217 0
c (0<=( - aux872 + SATLiteral(807) + SATLiteral(267)))
267 4217 0
807 4217 0
807 267 4216 0
c (( - aux873 + SATLiteral(537) + SATLiteral(1212))<=0)
-1212 -4219 0
-537 -4219 0
-537 -1212 -4220 0
c (0<=( - aux873 + SATLiteral(537) + SATLiteral(1212)))
1212 4220 0
537 4220 0
537 1212 4219 0
c ((aux873 - aux874 + SATLiteral(132))<=0)
4219 -4222 0
4220 -4223 0
-132 -4222 0
-132 4219 -4223 0
-132 4220 -4225 0
c (0<=(aux873 - aux874 + SATLiteral(132)))
-4220 4225 0
-4219 4223 0
132 4225 0
132 -4220 4223 0
132 -4219 4222 0
c ((aux870 + aux872 - aux875)<=0)
4216 -4227 0
4217 -4228 0
4210 -4227 0
4210 4216 -4228 0
4210 4217 -4230 0
4211 -4228 0
4211 4216 -4230 0
4211 4217 -4232 0
c (0<=(aux870 + aux872 - aux875))
-4217 4232 0
-4216 4230 0
-4211 4232 0
-4211 -4217 4230 0
-4211 -4216 4228 0
-4210 4230 0
-4210 -4217 4228 0
-4210 -4216 4227 0
c ((SATLiteral(404) - aux876 + SATLiteral(674))<=0)
-674 -4234 0
-404 -4234 0
-404 -674 -4235 0
c (0<=(SATLiteral(404) - aux876 + SATLiteral(674)))
674 4235 0
404 4235 0
404 674 4234 0
c ((SATLiteral(1079) - aux877 + SATLiteral(944))<=0)
-944 -4237 0
-1079 -4237 0
-1079 -944 -4238 0
c (0<=(SATLiteral(1079) - aux877 + SATLiteral(944)))
944 4238 0
1079 4238 0
1079 944 4237 0
c (( - aux878 + SATLiteral(809) + SATLiteral(269))<=0)
-269 -4240 0
-809 -4240 0
-809 -269 -4241 0
c (0<=( - aux878 + SATLiteral(809) + SATLiteral(269)))
269 4241 0
809 4241 0
809 269 4240 0
c (( - aux879 + SATLiteral(539) + SATLiteral(1214))<=0)
-1214 -4243 0
-539 -4243 0
-539 -1214 -4244 0
c (0<=( - aux879 + SATLiteral(539) + SATLiteral(1214)))
1214 4244 0
539 4244 0
539 1214 4243 0
c ((aux879 - aux880 + SATLiteral(134))<=0)
4243 -4246 0
4244 -4247 0
-134 -4246 0
-134 4243 -4247 0
-134 4244 -4249 0
c (0<=(aux879 - aux880 + SATLiteral(134)))
-4244 4249 0
-4243 4247 0
134 4249 0
134 -4244 4247 0
134 -4243 4246 0
c ((aux876 + aux878 - aux881)<=0)
4240 -4251 0
4241 -4252 0
4234 -4251 0
4234 4240 -4252 0
4234 4241 -4254 0
4235 -4252 0
4235 4240 -4254 0
4235 4241 -4256 0
c (0<=(aux876 + aux878 - aux881))
-4241 4256 0
-4240 4254 0
-4235 4256 0
-4235 -4241 4254 0
-4235 -4240 4252 0
-4234 4254 0
-4234 -4241 4252 0
-4234 -4240 4251 0
c ((SATLiteral(406) - aux882 + SATLiteral(676))<=0)
-676 -4258 0
-406 -4258 0
-406 -676 -4259 0
c (0<=(SATLiteral(406) - aux882 + SATLiteral(676)))
676 4259 0
406 4259 0
406 676 4258 0
c ((SATLiteral(1081) - aux883 + SATLiteral(946))<=0)
-946 -4261 0
-1081 -4261 0
-1081 -946 -4262 0
c (0<=(SATLiteral(1081) - aux883 + SATLiteral(946)))
946 4262 0
1081 4262 0
1081 946 4261 0
c (( - aux884 + SATLiteral(811) + SATLiteral(271))<=0)
-271 -4264 0
-811 -4264 0
-811 -271 -4265 0
c (0<=( - aux884 + SATLiteral(811) + SATLiteral(271)))
271 4265 0
811 4265 0
811 271 4264 0
c (( - aux885 + SATLiteral(541) + SATLiteral(1216))<=0)
-1216 -4267 0
-541 -4267 0
-541 -1216 -4268 0
c (0<=( - aux885 + SATLiteral(541) + SATLiteral(1216)))
1216 4268 0
541 4268 0
541 1216 4267 0
c ((aux885 - aux886 + SATLiteral(136))<=0)
4267 -4270 0
4268 -4271 0
-136 -4270 0
-136 4267 -4271 0
-136 4268 -4273 0
c (0<=(aux885 - aux886 + SATLiteral(136)))
-4268 4273 0
-4267 4271 0
136 4273 0
136 -4268 4271 0
136 -4267 4270 0
c ((aux882 + aux884 - aux887)<=0)
4264 -4275 0
4265 -4276 0
4258 -4275 0
4258 4264 -4276 0
4258 4265 -4278 0
4259 -4276 0
4259 4264 -4278 0
4259 4265 -4280 0
c (0<=(aux882 + aux884 - aux887))
-4265 4280 0
-4264 4278 0
-4259 4280 0
-4259 -4265 4278 0
-4259 -4264 4276 0
-4258 4278 0
-4258 -4265 4276 0
-4258 -4264 4275 0
c ((SATLiteral(-405) - aux888 + SATLiteral(-675))<=0)
675 -4282 0
405 -4282 0
405 675 -4283 0
c (0<=(SATLiteral(-405) - aux888 + SATLiteral(-675)))
-675 4283 0
-405 4283 0
-405 -675 4282 0
c ((SATLiteral(-1080) - aux889 + SATLiteral(-945))<=0)
945 -4285 0
1080 -4285 0
1080 945 -4286 0
c (0<=(SATLiteral(-1080) - aux889 + SATLiteral(-945)))
-945 4286 0
-1080 4286 0
-1080 -945 4285 0
c (( - aux890 + SATLiteral(-810) + SATLiteral(-270))<=0)
270 -4288 0
810 -4288 0
810 270 -4289 0
c (0<=( - aux890 + SATLiteral(-810) + SATLiteral(-270)))
-270 4289 0
-810 4289 0
-810 -270 4288 0
c (( - aux891 + SATLiteral(-540) + SATLiteral(-1215))<=0)
1215 -4291 0
540 -4291 0
540 1215 -4292 0
c (0<=( - aux891 + SATLiteral(-540) + SATLiteral(-1215)))
-1215 4292 0
-540 4292 0
-540 -1215 4291 0
c ((aux891 - aux892 + SATLiteral(-135))<=0)
4291 -4294 0
4292 -4295 0
135 -4294 0
135 4291 -4295 0
135 4292 -4297 0
c (0<=(aux891 - aux892 + SATLiteral(-135)))
-4292 4297 0
-4291 4295 0
-135 4297 0
-135 -4292 4295 0
-135 -4291 4294 0
c ((aux888 + aux890 - aux893)<=0)
4288 -4299 0
4289 -4300 0
4282 -4299 0
4282 4288 -4300 0
4282 4289 -4302 0
4283 -4300 0
4283 4288 -4302 0
4283 4289 -4304 0
c (0<=(aux888 + aux890 - aux893))
-4289 4304 0
-4288 4302 0
-4283 4304 0
-4283 -4289 4302 0
-4283 -4288 4300 0
-4282 4302 0
-4282 -4289 4300 0
-4282 -4288 4299 0
c (( - aux894 + SATLiteral(2) + SATLiteral(122))<=0)
-122 -4306 0
-2 -4306 0
-2 -122 -4307 0
c (0<=( - aux894 + SATLiteral(2) + SATLiteral(122)))
122 4307 0
2 4307 0
2 122 4306 0
c (( - aux895 + SATLiteral(17) + SATLiteral(107))<=0)
-107 -4309 0
-17 -4309 0
-17 -107 -4310 0
c (0<=( - aux895 + SATLiteral(17) + SATLiteral(107)))
107 4310 0
17 4310 0
17 107 4309 0
c (( - aux896 + SATLiteral(47) + SATLiteral(92))<=0)
-92 -4312 0
-47 -4312 0
-47 -92 -4313 0
c (0<=( - aux896 + SATLiteral(47) + SATLiteral(92)))
92 4313 0
47 4313 0
47 92 4312 0
c (( - aux897 + SATLiteral(62) + SATLiteral(77))<=0)
-77 -4315 0
-62 -4315 0
-62 -77 -4316 0
c (0<=( - aux897 + SATLiteral(62) + SATLiteral(77)))
77 4316 0
62 4316 0
62 77 4315 0
c ((aux897 - aux898 + SATLiteral(32))<=0)
4315 -4318 0
4316 -4319 0
-32 -4318 0
-32 4315 -4319 0
-32 4316 -4321 0
c (0<=(aux897 - aux898 + SATLiteral(32)))
-4316 4321 0
-4315 4319 0
32 4321 0
32 -4316 4319 0
32 -4315 4318 0
c ((aux894 + aux896 - aux899)<=0)
4312 -4323 0
4313 -4324 0
4306 -4323 0
4306 4312 -4324 0
4306 4313 -4326 0
4307 -4324 0
4307 4312 -4326 0
4307 4313 -4328 0
c (0<=(aux894 + aux896 - aux899))
-4313 4328 0
-4312 4326 0
-4307 4328 0
-4307 -4313 4326 0
-4307 -4312 4324 0
-4306 4326 0
-4306 -4313 4324 0
-4306 -4312 4323 0
c (( - aux900 + SATLiteral(4) + SATLiteral(124))<=0)
-124 -4330 0
-4 -4330 0
-4 -124 -4331 0
c (0<=( - aux900 + SATLiteral(4) + SATLiteral(124)))
124 4331 0
4 4331 0
4 124 4330 0
c (( - aux901 + SATLiteral(19) + SATLiteral(109))<=0)
-109 -4333 0
-19 -4333 0
-19 -109 -4334 0
c (0<=( - aux901 + SATLiteral(19) + SATLiteral(109)))
109 4334 0
19 4334 0
19 109 4333 0
c (( - aux902 + SATLiteral(49) + SATLiteral(94))<=0)
-94 -4336 0
-49 -4336 0
-49 -94 -4337 0
c (0<=( - aux902 + SATLiteral(49) + SATLiteral(94)))
94 4337 0
49 4337 0
49 94 4336 0
c (( - aux903 + SATLiteral(64) + SATLiteral(79))<=0)
-79 -4339 0
-64 -4339 0
-64 -79 -4340 0
c (0<=( - aux903 + SATLiteral(64) + SATLiteral(79)))
79 4340 0
64 4340 0
64 79 4339 0
c ((aux903 - aux904 + SATLiteral(34))<=0)
4339 -4342 0
4340 -4343 0
-34 -4342 0
-34 4339 -4343 0
-34 4340 -4345 0
c (0<=(aux903 - aux904 + SATLiteral(34)))
-4340 4345 0
-4339 4343 0
34 4345 0
34 -4340 4343 0
34 -4339 4342 0
c ((aux900 + aux902 - aux905)<=0)
4336 -4347 0
4337 -4348 0
4330 -4347 0
4330 4336 -4348 0
4330 4337 -4350 0
4331 -4348 0
4331 4336 -4350 0
4331 4337 -4352 0
c (0<=(aux900 + aux902 - aux905))
-4337 4352 0
-4336 4350 0
-4331 4352 0
-4331 -4337 4350 0
-4331 -4336 4348 0
-4330 4350 0
-4330 -4337 4348 0
-4330 -4336 4347 0
c (( - aux906 + SATLiteral(6) + SATLiteral(126))<=0)
-126 -4354 0
-6 -4354 0
-6 -126 -4355 0
c (0<=( - aux906 + SATLiteral(6) + SATLiteral(126)))
126 4355 0
6 4355 0
6 126 4354 0
c (( - aux907 + SATLiteral(21) + SATLiteral(111))<=0)
-111 -4357 0
-21 -4357 0
-21 -111 -4358 0
c (0<=( - aux907 + SATLiteral(21) + SATLiteral(111)))
111 4358 0
21 4358 0
21 111 4357 0
c (( - aux908 + SATLiteral(51) + SATLiteral(96))<=0)
-96 -4360 0
-51 -4360 0
-51 -96 -4361 0
c (0<=( - aux908 + SATLiteral(51) + SATLiteral(96)))
96 4361 0
51 4361 0
51 96 4360 0
c (( - aux909 + SATLiteral(66) + SATLiteral(81))<=0)
-81 -4363 0
-66 -4363 0
-66 -81 -4364 0
c (0<=( - aux909 + SATLiteral(66) + SATLiteral(81)))
81 4364 0
66 4364 0
66 81 4363 0
c ((aux909 - aux910 + SATLiteral(36))<=0)
4363 -4366 0
4364 -4367 0
-36 -4366 0
-36 4363 -4367 0
-36 4364 -4369 0
c (0<=(aux909 - aux910 + SATLiteral(36)))
-4364 4369 0
-4363 4367 0
36 4369 0
36 -4364 4367 0
36 -4363 4366 0
c ((aux906 + aux908 - aux911)<=0)
4360 -4371 0
4361 -4372 0
4354 -4371 0
4354 4360 -4372 0
4354 4361 -4374 0
4355 -4372 0
4355 4360 -4374 0
4355 4361 -4376 0
c (0<=(aux906 + aux908 - aux911))
-4361 4376 0
-4360 4374 0
-4355 4376 0
-4355 -4361 4374 0
-4355 -4360 4372 0
-4354 4374 0
-4354 -4361 4372 0
-4354 -4360 4371 0
c (( - aux912 + SATLiteral(8) + SATLiteral(128))<=0)
-128 -4378 0
-8 -4378 0
-8 -128 -4379 0
c (0<=( - aux912 + SATLiteral(8) + SATLiteral(128)))
128 4379 0
8 4379 0
8 128 4378 0
c (( - aux913 + SATLiteral(23) + SATLiteral(113))<=0)
-113 -4381 0
-23 -4381 0
-23 -113 -4382 0
c (0<=( - aux913 + SATLiteral(23) + SATLiteral(113)))
113 4382 0
23 4382 0
23 113 4381 0
c (( - aux914 + SATLiteral(53) + SATLiteral(98))<=0)
-98 -4384 0
-53 -4384 0
-53 -98 -4385 0
c (0<=( - aux914 + SATLiteral(53) + SATLiteral(98)))
98 4385 0
53 4385 0
53 98 4384 0
c (( - aux915 + SATLiteral(68) + SATLiteral(83))<=0)
-83 -4387 0
-68 -4387 0
-68 -83 -4388 0
c (0<=( - aux915 + SATLiteral(68) + SATLiteral(83)))
83 4388 0
68 4388 0
68 83 4387 0
c ((aux915 - aux916 + SATLiteral(38))<=0)
4387 -4390 0
4388 -4391 0
-38 -4390 0
-38 4387 -4391 0
-38 4388 -4393 0
c (0<=(aux915 - aux916 + SATLiteral(38)))
-4388 4393 0
-4387 4391 0
38 4393 0
38 -4388 4391 0
38 -4387 4390 0
c ((aux912 + aux914 - aux917)<=0)
4384 -4395 0
4385 -4396 0
4378 -4395 0
4378 4384 -4396 0
4378 4385 -4398 0
4379 -4396 0
4379 4384 -4398 0
4379 4385 -4400 0
c (0<=(aux912 + aux914 - aux917))
-4385 4400 0
-4384 4398 0
-4379 4400 0
-4379 -4385 4398 0
-4379 -4384 4396 0
-4378 4398 0
-4378 -4385 4396 0
-4378 -4384 4395 0
c (( - aux918 + SATLiteral(10) + SATLiteral(130))<=0)
-130 -4402 0
-10 -4402 0
-10 -130 -4403 0
c (0<=( - aux918 + SATLiteral(10) + SATLiteral(130)))
130 4403 0
10 4403 0
10 130 4402 0
c (( - aux919 + SATLiteral(25) + SATLiteral(115))<=0)
-115 -4405 0
-25 -4405 0
-25 -115 -4406 0
c (0<=( - aux919 + SATLiteral(25) + SATLiteral(115)))
115 4406 0
25 4406 0
25 115 4405 0
c (( - aux920 + SATLiteral(55) + SATLiteral(100))<=0)
-100 -4408 0
-55 -4408 0
-55 -100 -4409 0
c (0<=( - aux920 + SATLiteral(55) + SATLiteral(100)))
100 4409 0
55 4409 0
55 100 4408 0
c (( - aux921 + SATLiteral(70) + SATLiteral(85))<=0)
-85 -4411 0
-70 -4411 0
-70 -85 -4412 0
c (0<=( - aux921 + SATLiteral(70) + SATLiteral(85)))
85 4412 0
70 4412 0
70 85 4411 0
c ((aux921 - aux922 + SATLiteral(40))<=0)
4411 -4414 0
4412 -4415 0
-40 -4414 0
-40 4411 -4415 0
-40 4412 -4417 0
c (0<=(aux921 - aux922 + SATLiteral(40)))
-4412 4417 0
-4411 4415 0
40 4417 0
40 -4412 4415 0
40 -4411 4414 0
c ((aux918 + aux920 - aux923)<=0)
4408 -4419 0
4409 -4420 0
4402 -4419 0
4402 4408 -4420 0
4402 4409 -4422 0
4403 -4420 0
4403 4408 -4422 0
4403 4409 -4424 0
c (0<=(aux918 + aux920 - aux923))
-4409 4424 0
-4408 4422 0
-4403 4424 0
-4403 -4409 4422 0
-4403 -4408 4420 0
-4402 4422 0
-4402 -4409 4420 0
-4402 -4408 4419 0
c (( - aux924 + SATLiteral(12) + SATLiteral(132))<=0)
-132 -4426 0
-12 -4426 0
-12 -132 -4427 0
c (0<=( - aux924 + SATLiteral(12) + SATLiteral(132)))
132 4427 0
12 4427 0
12 132 4426 0
c (( - aux925 + SATLiteral(27) + SATLiteral(117))<=0)
-117 -4429 0
-27 -4429 0
-27 -117 -4430 0
c (0<=( - aux925 + SATLiteral(27) + SATLiteral(117)))
117 4430 0
27 4430 0
27 117 4429 0
c (( - aux926 + SATLiteral(57) + SATLiteral(102))<=0)
-102 -4432 0
-57 -4432 0
-57 -102 -4433 0
c (0<=( - aux926 + SATLiteral(57) + SATLiteral(102)))
102 4433 0
57 4433 0
57 102 4432 0
c (( - aux927 + SATLiteral(72) + SATLiteral(87))<=0)
-87 -4435 0
-72 -4435 0
-72 -87 -4436 0
c (0<=( - aux927 + SATLiteral(72) + SATLiteral(87)))
87 4436 0
72 4436 0
72 87 4435 0
c ((aux927 - aux928 + SATLiteral(42))<=0)
4435 -4438 0
4436 -4439 0
-42 -4438 0
-42 4435 -4439 0
-42 4436 -4441 0
c (0<=(aux927 - aux928 + SATLiteral(42)))
-4436 4441 0
-4435 4439 0
42 4441 0
42 -4436 4439 0
42 -4435 4438 0
c ((aux924 + aux926 - aux929)<=0)
4432 -4443 0
4433 -4444 0
4426 -4443 0
4426 4432 -4444 0
4426 4433 -4446 0
4427 -4444 0
4427 4432 -4446 0
4427 4433 -4448 0
c (0<=(aux924 + aux926 - aux929))
-4433 4448 0
-4432 4446 0
-4427 4448 0
-4427 -4433 4446 0
-4427 -4432 4444 0
-4426 4446 0
-4426 -4433 4444 0
-4426 -4432 4443 0
c (( - aux930 + SATLiteral(14) + SATLiteral(134))<=0)
-134 -4450 0
-14 -4450 0
-14 -134 -4451 0
c (0<=( - aux930 + SATLiteral(14) + SATLiteral(134)))
134 4451 0
14 4451 0
14 134 4450 0
c (( - aux931 + SATLiteral(29) + SATLiteral(119))<=0)
-119 -4453 0
-29 -4453 0
-29 -119 -4454 0
c (0<=( - aux931 + SATLiteral(29) + SATLiteral(119)))
119 4454 0
29 4454 0
29 119 4453 0
c (( - aux932 + SATLiteral(59) + SATLiteral(104))<=0)
-104 -4456 0
-59 -4456 0
-59 -104 -4457 0
c (0<=( - aux932 + SATLiteral(59) + SATLiteral(104)))
104 4457 0
59 4457 0
59 104 4456 0
c (( - aux933 + SATLiteral(74) + SATLiteral(89))<=0)
-89 -4459 0
-74 -4459 0
-74 -89 -4460 0
c (0<=( - aux933 + SATLiteral(74) + SATLiteral(89)))
89 4460 0
74 4460 0
74 89 4459 0
c ((aux933 - aux934 + SATLiteral(44))<=0)
4459 -4462 0
4460 -4463 0
-44 -4462 0
-44 4459 -4463 0
-44 4460 -4465 0
c (0<=(aux933 - aux934 + SATLiteral(44)))
-4460 4465 0
-4459 4463 0
44 4465 0
44 -4460 4463 0
44 -4459 4462 0
c ((aux930 + aux932 - aux935)<=0)
4456 -4467 0
4457 -4468 0
4450 -4467 0
4450 4456 -4468 0
4450 4457 -4470 0
4451 -4468 0
4451 4456 -4470 0
4451 4457 -4472 0
c (0<=(aux930 + aux932 - aux935))
-4457 4472 0
-4456 4470 0
-4451 4472 0
-4451 -4457 4470 0
-4451 -4456 4468 0
-4450 4470 0
-4450 -4457 4468 0
-4450 -4456 4467 0
c (( - aux936 + SATLiteral(16) + SATLiteral(136))<=0)
-136 -4474 0
-16 -4474 0
-16 -136 -4475 0
c (0<=( - aux936 + SATLiteral(16) + SATLiteral(136)))
136 4475 0
16 4475 0
16 136 4474 0
c (( - aux937 + SATLiteral(31) + SATLiteral(121))<=0)
-121 -4477 0
-31 -4477 0
-31 -121 -4478 0
c (0<=( - aux937 + SATLiteral(31) + SATLiteral(121)))
121 4478 0
31 4478 0
31 121 4477 0
c (( - aux938 + SATLiteral(61) + SATLiteral(106))<=0)
-106 -4480 0
-61 -4480 0
-61 -106 -4481 0
c (0<=( - aux938 + SATLiteral(61) + SATLiteral(106)))
106 4481 0
61 4481 0
61 106 4480 0
c (( - aux939 + SATLiteral(76) + SATLiteral(91))<=0)
-91 -4483 0
-76 -4483 0
-76 -91 -4484 0
c (0<=( - aux939 + SATLiteral(76) + SATLiteral(91)))
91 4484 0
76 4484 0
76 91 4483 0
c ((aux939 - aux940 + SATLiteral(46))<=0)
4483 -4486 0
4484 -4487 0
-46 -4486 0
-46 4483 -4487 0
-46 4484 -4489 0
c (0<=(aux939 - aux940 + SATLiteral(46)))
-4484 4489 0
-4483 4487 0
46 4489 0
46 -4484 4487 0
46 -4483 4486 0
c ((aux936 + aux938 - aux941)<=0)
4480 -4491 0
4481 -4492 0
4474 -4491 0
4474 4480 -4492 0
4474 4481 -4494 0
4475 -4492 0
4475 4480 -4494 0
4475 4481 -4496 0
c (0<=(aux936 + aux938 - aux941))
-4481 4496 0
-4480 4494 0
-4475 4496 0
-4475 -4481 4494 0
-4475 -4480 4492 0
-4474 4494 0
-4474 -4481 4492 0
-4474 -4480 4491 0
c (( - aux942 + SATLiteral(-15) + SATLiteral(-135))<=0)
135 -4498 0
15 -4498 0
15 135 -4499 0
c (0<=( - aux942 + SATLiteral(-15) + SATLiteral(-135)))
-135 4499 0
-15 4499 0
-15 -135 4498 0
c (( - aux943 + SATLiteral(-30) + SATLiteral(-120))<=0)
120 -4501 0
30 -4501 0
30 120 -4502 0
c (0<=( - aux943 + SATLiteral(-30) + SATLiteral(-120)))
-120 4502 0
-30 4502 0
-30 -120 4501 0
c (( - aux944 + SATLiteral(-60) + SATLiteral(-105))<=0)
105 -4504 0
60 -4504 0
60 105 -4505 0
c (0<=( - aux944 + SATLiteral(-60) + SATLiteral(-105)))
-105 4505 0
-60 4505 0
-60 -105 4504 0
c (( - aux945 + SATLiteral(-75) + SATLiteral(-90))<=0)
90 -4507 0
75 -4507 0
75 90 -4508 0
c (0<=( - aux945 + SATLiteral(-75) + SATLiteral(-90)))
-90 4508 0
-75 4508 0
-75 -90 4507 0
c ((aux945 - aux946 + SATLiteral(-45))<=0)
4507 -4510 0
4508 -4511 0
45 -4510 0
45 4507 -4511 0
45 4508 -4513 0
c (0<=(aux945 - aux946 + SATLiteral(-45)))
-4508 4513 0
-4507 4511 0
-45 4513 0
-45 -4508 4511 0
-45 -4507 4510 0
c ((aux942 + aux944 - aux947)<=0)
4504 -4515 0
4505 -4516 0
4498 -4515 0
4498 4504 -4516 0
4498 4505 -4518 0
4499 -4516 0
4499 4504 -4518 0
4499 4505 -4520 0
c (0<=(aux942 + aux944 - aux947))
-4505 4520 0
-4504 4518 0
-4499 4520 0
-4499 -4505 4518 0
-4499 -4504 4516 0
-4498 4518 0
-4498 -4505 4516 0
-4498 -4504 4515 0
c (( - aux948 + SATLiteral(137) + SATLiteral(257))<=0)
-257 -4522 0
-137 -4522 0
-137 -257 -4523 0
c (0<=( - aux948 + SATLiteral(137) + SATLiteral(257)))
257 4523 0
137 4523 0
137 257 4522 0
c (( - aux949 + SATLiteral(152) + SATLiteral(242))<=0)
-242 -4525 0
-152 -4525 0
-152 -242 -4526 0
c (0<=( - aux949 + SATLiteral(152) + SATLiteral(242)))
242 4526 0
152 4526 0
152 242 4525 0
c (( - aux950 + SATLiteral(182) + SATLiteral(227))<=0)
-227 -4528 0
-182 -4528 0
-182 -227 -4529 0
c (0<=( - aux950 + SATLiteral(182) + SATLiteral(227)))
227 4529 0
182 4529 0
182 227 4528 0
c (( - aux951 + SATLiteral(197) + SATLiteral(212))<=0)
-212 -4531 0
-197 -4531 0
-197 -212 -4532 0
c (0<=( - aux951 + SATLiteral(197) + SATLiteral(212)))
212 4532 0
197 4532 0
197 212 4531 0
c ((aux951 - aux952 + SATLiteral(167))<=0)
4531 -4534 0
4532 -4535 0
-167 -4534 0
-167 4531 -4535 0
-167 4532 -4537 0
c (0<=(aux951 - aux952 + SATLiteral(167)))
-4532 4537 0
-4531 4535 0
167 4537 0
167 -4532 4535 0
167 -4531 4534 0
c ((aux948 + aux950 - aux953)<=0)
4528 -4539 0
4529 -4540 0
4522 -4539 0
4522 4528 -4540 0
4522 4529 -4542 0
4523 -4540 0
4523 4528 -4542 0
4523 4529 -4544 0
c (0<=(aux948 + aux950 - aux953))
-4529 4544 0
-4528 4542 0
-4523 4544 0
-4523 -4529 4542 0
-4523 -4528 4540 0
-4522 4542 0
-4522 -4529 4540 0
-4522 -4528 4539 0
c (( - aux954 + SATLiteral(139) + SATLiteral(259))<=0)
-259 -4546 0
-139 -4546 0
-139 -259 -4547 0
c (0<=( - aux954 + SATLiteral(139) + SATLiteral(259)))
259 4547 0
139 4547 0
139 259 4546 0
c (( - aux955 + SATLiteral(154) + SATLiteral(244))<=0)
-244 -4549 0
-154 -4549 0
-154 -244 -4550 0
c (0<=( - aux955 + SATLiteral(154) + SATLiteral(244)))
244 4550 0
154 4550 0
154 244 4549 0
c (( - aux956 + SATLiteral(184) + SATLiteral(229))<=0)
-229 -4552 0
-184 -4552 0
-184 -229 -4553 0
c (0<=( - aux956 + SATLiteral(184) + SATLiteral(229)))
229 4553 0
184 4553 0
184 229 4552 0
c (( - aux957 + SATLiteral(199) + SATLiteral(214))<=0)
-214 -4555 0
-199 -4555 0
-199 -214 -4556 0
c (0<=( - aux957 + SATLiteral(199) + SATLiteral(214)))
214 4556 0
199 4556 0
199 214 4555 0
c ((aux957 - aux958 + SATLiteral(169))<=0)
4555 -4558 0
4556 -4559 0
-169 -4558 0
-169 4555 -4559 0
-169 4556 -4561 0
c (0<=(aux957 - aux958 + SATLiteral(169)))
-4556 4561 0
-4555 4559 0
169 4561 0
169 -4556 4559 0
169 -4555 4558 0
c ((aux954 + aux956 - aux959)<=0)
4552 -4563 0
4553 -4564 0
4546 -4563 0
4546 4552 -4564 0
4546 4553 -4566 0
4547 -4564 0
4547 4552 -4566 0
4547 4553 -4568 0
c (0<=(aux954 + aux956 - aux959))
-4553 4568 0
-4552 4566 0
-4547 4568 0
-4547 -4553 4566 0
-4547 -4552 4564 0
-4546 4566 0
-4546 -4553 4564 0
-4546 -4552 4563 0
c (( - aux960 + SATLiteral(141) + SATLiteral(261))<=0)
-261 -4570 0
-141 -4570 0
-141 -261 -4571 0
c (0<=( - aux960 + SATLiteral(141) + SATLiteral(261)))
261 4571 0
141 4571 0
141 261 4570 0
c (( - aux961 + SATLiteral(156) + SATLiteral(246))<=0)
-246 -4573 0
-156 -4573 0
-156 -246 -4574 0
c (0<=( - aux961 + SATLiteral(156) + SATLiteral(246)))
246 4574 0
156 4574 0
156 246 4573 0
c (( - aux962 + SATLiteral(186) + SATLiteral(231))<=0)
-231 -4576 0
-186 -4576 0
-186 -231 -4577 0
c (0<=( - aux962 + SATLiteral(186) + SATLiteral(231)))
231 4577 0
186 4577 0
186 231 4576 0
c (( - aux963 + SATLiteral(201) + SATLiteral(216))<=0)
-216 -4579 0
-201 -4579 0
-201 -216 -4580 0
c (0<=( - aux963 + SATLiteral(201) + SATLiteral(216)))
216 4580 0
201 4580 0
201 216 4579 0
c ((aux963 - aux964 + SATLiteral(171))<=0)
4579 -4582 0
4580 -4583 0
-171 -4582 0
-171 4579 -4583 0
-171 4580 -4585 0
c (0<=(aux963 - aux964 + SATLiteral(171)))
-4580 4585 0
-4579 4583 0
171 4585 0
171 -4580 4583 0
171 -4579 4582 0
c ((aux960 + aux962 - aux965)<=0)
4576 -4587 0
4577 -4588 0
4570 -4587 0
4570 4576 -4588 0
4570 4577 -4590 0
4571 -4588 0
4571 4576 -4590 0
4571 4577 -4592 0
c (0<=(aux960 + aux962 - aux965))
-4577 4592 0
-4576 4590 0
-4571 4592 0
-4571 -4577 4590 0
-4571 -4576 4588 0
-4570 4590 0
-4570 -4577 4588 0
-4570 -4576 4587 0
c (( - aux966 + SATLiteral(143) + SATLiteral(263))<=0)
-263 -4594 0
-143 -4594 0
-143 -263 -4595 0
c (0<=( - aux966 + SATLiteral(143) + SATLiteral(263)))
263 4595 0
143 4595 0
143 263 4594 0
c (( - aux967 + SATLiteral(158) + SATLiteral(248))<=0)
-248 -4597 0
-158 -4597 0
-158 -248 -4598 0
c (0<=( - aux967 + SATLiteral(158) + SATLiteral(248)))
248 4598 0
158 4598 0
158 248 4597 0
c (( - aux968 + SATLiteral(188) + SATLiteral(233))<=0)
-233 -4600 0
-188 -4600 0
-188 -233 -4601 0
c (0<=( - aux968 + SATLiteral(188) + SATLiteral(233)))
233 4601 0
188 4601 0
188 233 4600 0
c (( - aux969 + SATLiteral(203) + SATLiteral(218))<=0)
-218 -4603 0
-203 -4603 0
-203 -218 -4604 0
c (0<=( - aux969 + SATLiteral(203) + SATLiteral(218)))
218 4604 0
203 4604 0
203 218 4603 0
c ((aux969 - aux970 + SATLiteral(173))<=0)
4603 -4606 0
4604 -4607 0
-173 -4606 0
-173 4603 -4607 0
-173 4604 -4609 0
c (0<=(aux969 - aux970 + SATLiteral(173)))
-4604 4609 0
-4603 4607 0
173 4609 0
173 -4604 4607 0
173 -4603 4606 0
c ((aux966 + aux968 - aux971)<=0)
4600 -4611 0
4601 -4612 0
4594 -4611 0
4594 4600 -4612 0
4594 4601 -4614 0
4595 -4612 0
4595 4600 -4614 0
4595 4601 -4616 0
c (0<=(aux966 + aux968 - aux971))
-4601 4616 0
-4600 4614 0
-4595 4616 0
-4595 -4601 4614 0
-4595 -4600 4612 0
-4594 4614 0
-4594 -4601 4612 0
-4594 -4600 4611 0
c (( - aux972 + SATLiteral(145) + SATLiteral(265))<=0)
-265 -4618 0
-145 -4618 0
-145 -265 -4619 0
c (0<=( - aux972 + SATLiteral(145) + SATLiteral(265)))
265 4619 0
145 4619 0
145 265 4618 0
c (( - aux973 + SATLiteral(160) + SATLiteral(250))<=0)
-250 -4621 0
-160 -4621 0
-160 -250 -4622 0
c (0<=( - aux973 + SATLiteral(160) + SATLiteral(250)))
250 4622 0
160 4622 0
160 250 4621 0
c (( - aux974 + SATLiteral(190) + SATLiteral(235))<=0)
-235 -4624 0
-190 -4624 0
-190 -235 -4625 0
c (0<=( - aux974 + SATLiteral(190) + SATLiteral(235)))
235 4625 0
190 4625 0
190 235 4624 0
c (( - aux975 + SATLiteral(205) + SATLiteral(220))<=0)
-220 -4627 0
-205 -4627 0
-205 -220 -4628 0
c (0<=( - aux975 + SATLiteral(205) + SATLiteral(220)))
220 4628 0
205 4628 0
205 220 4627 0
c ((aux975 - aux976 + SATLiteral(175))<=0)
4627 -4630 0
4628 -4631 0
-175 -4630 0
-175 4627 -4631 0
-175 4628 -4633 0
c (0<=(aux975 - aux976 + SATLiteral(175)))
-4628 4633 0
-4627 4631 0
175 4633 0
175 -4628 4631 0
175 -4627 4630 0
c ((aux972 + aux974 - aux977)<=0)
4624 -4635 0
4625 -4636 0
4618 -4635 0
4618 4624 -4636 0
4618 4625 -4638 0
4619 -4636 0
4619 4624 -4638 0
4619 4625 -4640 0
c (0<=(aux972 + aux974 - aux977))
-4625 4640 0
-4624 4638 0
-4619 4640 0
-4619 -4625 4638 0
-4619 -4624 4636 0
-4618 4638 0
-4618 -4625 4636 0
-4618 -4624 4635 0
c (( - aux978 + SATLiteral(147) + SATLiteral(267))<=0)
-267 -4642 0
-147 -4642 0
-147 -267 -4643 0
c (0<=( - aux978 + SATLiteral(147) + SATLiteral(267)))
267 4643 0
147 4643 0
147 267 4642 0
c (( - aux979 + SATLiteral(162) + SATLiteral(252))<=0)
-252 -4645 0
-162 -4645 0
-162 -252 -4646 0
c (0<=( - aux979 + SATLiteral(162) + SATLiteral(252)))
252 4646 0
162 4646 0
162 252 4645 0
c (( - aux980 + SATLiteral(192) + SATLiteral(237))<=0)
-237 -4648 0
-192 -4648 0
-192 -237 -4649 0
c (0<=( - aux980 + SATLiteral(192) + SATLiteral(237)))
237 4649 0
192 4649 0
192 237 4648 0
c (( - aux981 + SATLiteral(207) + SATLiteral(222))<=0)
-222 -4651 0
-207 -4651 0
-207 -222 -4652 0
c (0<=( - aux981 + SATLiteral(207) + SATLiteral(222)))
222 4652 0
207 4652 0
207 222 4651 0
c ((aux981 - aux982 + SATLiteral(177))<=0)
4651 -4654 0
4652 -4655 0
-177 -4654 0
-177 4651 -4655 0
-177 4652 -4657 0
c (0<=(aux981 - aux982 + SATLiteral(177)))
-4652 4657 0
-4651 4655 0
177 4657 0
177 -4652 4655 0
177 -4651 4654 0
c ((aux978 + aux980 - aux983)<=0)
4648 -4659 0
4649 -4660 0
4642 -4659 0
4642 4648 -4660 0
4642 4649 -4662 0
4643 -4660 0
4643 4648 -4662 0
4643 4649 -4664 0
c (0<=(aux978 + aux980 - aux983))
-4649 4664 0
-4648 4662 0
-4643 4664 0
-4643 -4649 4662 0
-4643 -4648 4660 0
-4642 4662 0
-4642 -4649 4660 0
-4642 -4648 4659 0
c (( - aux984 + SATLiteral(149) + SATLiteral(269))<=0)
-269 -4666 0
-149 -4666 0
-149 -269 -4667 0
c (0<=( - aux984 + SATLiteral(149) + SATLiteral(269)))
269 4667 0
149 4667 0
149 269 4666 0
c (( - aux985 + SATLiteral(164) + SATLiteral(254))<=0)
-254 -4669 0
-164 -4669 0
-164 -254 -4670 0
c (0<=( - aux985 + SATLiteral(164) + SATLiteral(254)))
254 4670 0
164 4670 0
164 254 4669 0
c (( - aux986 + SATLiteral(194) + SATLiteral(239))<=0)
-239 -4672 0
-194 -4672 0
-194 -239 -4673 0
c (0<=( - aux986 + SATLiteral(194) + SATLiteral(239)))
239 4673 0
194 4673 0
194 239 4672 0
c (( - aux987 + SATLiteral(209) + SATLiteral(224))<=0)
-224 -4675 0
-209 -4675 0
-209 -224 -4676 0
c (0<=( - aux987 + SATLiteral(209) + SATLiteral(224)))
224 4676 0
209 4676 0
209 224 4675 0
c ((aux987 - aux988 + SATLiteral(179))<=0)
4675 -4678 0
4676 -4679 0
-179 -4678 0
-179 4675 -4679 0
-179 4676 -4681 0
c (0<=(aux987 - aux988 + SATLiteral(179)))
-4676 4681 0
-4675 4679 0
179 4681 0
179 -4676 4679 0
179 -4675 4678 0
c ((aux984 + aux986 - aux989)<=0)
4672 -4683 0
4673 -4684 0
4666 -4683 0
4666 4672 -4684 0
4666 4673 -4686 0
4667 -4684 0
4667 4672 -4686 0
4667 4673 -4688 0
c (0<=(aux984 + aux986 - aux989))
-4673 4688 0
-4672 4686 0
-4667 4688 0
-4667 -4673 4686 0
-4667 -4672 4684 0
-4666 4686 0
-4666 -4673 4684 0
-4666 -4672 4683 0
c (( - aux990 + SATLiteral(151) + SATLiteral(271))<=0)
-271 -4690 0
-151 -4690 0
-151 -271 -4691 0
c (0<=( - aux990 + SATLiteral(151) + SATLiteral(271)))
271 4691 0
151 4691 0
151 271 4690 0
c (( - aux991 + SATLiteral(166) + SATLiteral(256))<=0)
-256 -4693 0
-166 -4693 0
-166 -256 -4694 0
c (0<=( - aux991 + SATLiteral(166) + SATLiteral(256)))
256 4694 0
166 4694 0
166 256 4693 0
c (( - aux992 + SATLiteral(196) + SATLiteral(241))<=0)
-241 -4696 0
-196 -4696 0
-196 -241 -4697 0
c (0<=( - aux992 + SATLiteral(196) + SATLiteral(241)))
241 4697 0
196 4697 0
196 241 4696 0
c (( - aux993 + SATLiteral(211) + SATLiteral(226))<=0)
-226 -4699 0
-211 -4699 0
-211 -226 -4700 0
c (0<=( - aux993 + SATLiteral(211) + SATLiteral(226)))
226 4700 0
211 4700 0
211 226 4699 0
c ((aux993 - aux994 + SATLiteral(181))<=0)
4699 -4702 0
4700 -4703 0
-181 -4702 0
-181 4699 -4703 0
-181 4700 -4705 0
c (0<=(aux993 - aux994 + SATLiteral(181)))
-4700 4705 0
-4699 4703 0
181 4705 0
181 -4700 4703 0
181 -4699 4702 0
c ((aux990 + aux992 - aux995)<=0)
4696 -4707 0
4697 -4708 0
4690 -4707 0
4690 4696 -4708 0
4690 4697 -4710 0
4691 -4708 0
4691 4696 -4710 0
4691 4697 -4712 0
c (0<=(aux990 + aux992 - aux995))
-4697 4712 0
-4696 4710 0
-4691 4712 0
-4691 -4697 4710 0
-4691 -4696 4708 0
-4690 4710 0
-4690 -4697 4708 0
-4690 -4696 4707 0
c (( - aux996 + SATLiteral(-150) + SATLiteral(-270))<=0)
270 -4714 0
150 -4714 0
150 270 -4715 0
c (0<=( - aux996 + SATLiteral(-150) + SATLiteral(-270)))
-270 4715 0
-150 4715 0
-150 -270 4714 0
c (( - aux997 + SATLiteral(-165) + SATLiteral(-255))<=0)
255 -4717 0
165 -4717 0
165 255 -4718 0
c (0<=( - aux997 + SATLiteral(-165) + SATLiteral(-255)))
-255 4718 0
-165 4718 0
-165 -255 4717 0
c (( - aux998 + SATLiteral(-195) + SATLiteral(-240))<=0)
240 -4720 0
195 -4720 0
195 240 -4721 0
c (0<=( - aux998 + SATLiteral(-195) + SATLiteral(-240)))
-240 4721 0
-195 4721 0
-195 -240 4720 0
c (( - aux999 + SATLiteral(-210) + SATLiteral(-225))<=0)
225 -4723 0
210 -4723 0
210 225 -4724 0
c (0<=( - aux999 + SATLiteral(-210) + SATLiteral(-225)))
-225 4724 0
-210 4724 0
-210 -225 4723 0
c ((aux999 - aux1000 + SATLiteral(-180))<=0)
4723 -4726 0
4724 -4727 0
180 -4726 0
180 4723 -4727 0
180 4724 -4729 0
c (0<=(aux999 - aux1000 + SATLiteral(-180)))
-4724 4729 0
-4723 4727 0
-180 4729 0
-180 -4724 4727 0
-180 -4723 4726 0
c ((aux996 + aux998 - aux1001)<=0)
4720 -4731 0
4721 -4732 0
4714 -4731 0
4714 4720 -4732 0
4714 4721 -4734 0
4715 -4732 0
4715 4720 -4734 0
4715 4721 -4736 0
c (0<=(aux996 + aux998 - aux1001))
-4721 4736 0
-4720 4734 0
-4715 4736 0
-4715 -4721 4734 0
-4715 -4720 4732 0
-4714 4734 0
-4714 -4721 4732 0
-4714 -4720 4731 0
c ((SATLiteral(272) + SATLiteral(392) - aux1002)<=0)
-392 -4738 0
-272 -4738 0
-272 -392 -4739 0
c (0<=(SATLiteral(272) + SATLiteral(392) - aux1002))
392 4739 0
272 4739 0
272 392 4738 0
c ((SATLiteral(287) + SATLiteral(377) - aux1003)<=0)
-377 -4741 0
-287 -4741 0
-287 -377 -4742 0
c (0<=(SATLiteral(287) + SATLiteral(377) - aux1003))
377 4742 0
287 4742 0
287 377 4741 0
c ((SATLiteral(317) + SATLiteral(362) - aux1004)<=0)
-362 -4744 0
-317 -4744 0
-317 -362 -4745 0
c (0<=(SATLiteral(317) + SATLiteral(362) - aux1004))
362 4745 0
317 4745 0
317 362 4744 0
c ((SATLiteral(332) + SATLiteral(347) - aux1005)<=0)
-347 -4747 0
-332 -4747 0
-332 -347 -4748 0
c (0<=(SATLiteral(332) + SATLiteral(347) - aux1005))
347 4748 0
332 4748 0
332 347 4747 0
c ((SATLiteral(302) + aux1005 - aux1006)<=0)
4747 -4750 0
4748 -4751 0
-302 -4750 0
-302 4747 -4751 0
-302 4748 -4753 0
c (0<=(SATLiteral(302) + aux1005 - aux1006))
-4748 4753 0
-4747 4751 0
302 4753 0
302 -4748 4751 0
302 -4747 4750 0
c ((aux1002 + aux1004 - aux1007)<=0)
4744 -4755 0
4745 -4756 0
4738 -4755 0
4738 4744 -4756 0
4738 4745 -4758 0
4739 -4756 0
4739 4744 -4758 0
4739 4745 -4760 0
c (0<=(aux1002 + aux1004 - aux1007))
-4745 4760 0
-4744 4758 0
-4739 4760 0
-4739 -4745 4758 0
-4739 -4744 4756 0
-4738 4758 0
-4738 -4745 4756 0
-4738 -4744 4755 0
c ((SATLiteral(274) + SATLiteral(394) - aux1008)<=0)
-394 -4762 0
-274 -4762 0
-274 -394 -4763 0
c (0<=(SATLiteral(274) + SATLiteral(394) - aux1008))
394 4763 0
274 4763 0
274 394 4762 0
c ((SATLiteral(289) + SATLiteral(379) - aux1009)<=0)
-379 -4765 0
-289 -4765 0
-289 -379 -4766 0
c (0<=(SATLiteral(289) + SATLiteral(379) - aux1009))
379 4766 0
289 4766 0
289 379 4765 0
c ((SATLiteral(319) + SATLiteral(364) - aux1010)<=0)
-364 -4768 0
-319 -4768 0
-319 -364 -4769 0
c (0<=(SATLiteral(319) + SATLiteral(364) - aux1010))
364 4769 0
319 4769 0
319 364 4768 0
c ((SATLiteral(334) + SATLiteral(349) - aux1011)<=0)
-349 -4771 0
-334 -4771 0
-334 -349 -4772 0
c (0<=(SATLiteral(334) + SATLiteral(349) - aux1011))
349 4772 0
334 4772 0
334 349 4771 0
c ((SATLiteral(304) + aux1011 - aux1012)<=0)
4771 -4774 0
4772 -4775 0
-304 -4774 0
-304 4771 -4775 0
-304 4772 -4777 0
c (0<=(SATLiteral(304) + aux1011 - aux1012))
-4772 4777 0
-4771 4775 0
304 4777 0
304 -4772 4775 0
304 -4771 4774 0
c ((aux1008 + aux1010 - aux1013)<=0)
4768 -4779 0
4769 -4780 0
4762 -4779 0
4762 4768 -4780 0
4762 4769 -4782 0
4763 -4780 0
4763 4768 -4782 0
4763 4769 -4784 0
c (0<=(aux1008 + aux1010 - aux1013))
-4769 4784 0
-4768 4782 0
-4763 4784 0
-4763 -4769 4782 0
-4763 -4768 4780 0
-4762 4782 0
-4762 -4769 4780 0
-4762 -4768 4779 0
c ((SATLiteral(276) + SATLiteral(396) - aux1014)<=0)
-396 -4786 0
-276 -4786 0
-276 -396 -4787 0
c (0<=(SATLiteral(276) + SATLiteral(396) - aux1014))
396 4787 0
276 4787 0
276 396 4786 0
c ((SATLiteral(291) + SATLiteral(381) - aux1015)<=0)
-381 -4789 0
-291 -4789 0
-291 -381 -4790 0
c (0<=(SATLiteral(291) + SATLiteral(381) - aux1015))
381 4790 0
291 4790 0
291 381 4789 0
c ((SATLiteral(321) + SATLiteral(366) - aux1016)<=0)
-366 -4792 0
-321 -4792 0
-321 -366 -4793 0
c (0<=(SATLiteral(321) + SATLiteral(366) - aux1016))
366 4793 0
321 4793 0
321 366 4792 0
c ((SATLiteral(336) + SATLiteral(351) - aux1017)<=0)
-351 -4795 0
-336 -4795 0
-336 -351 -4796 0
c (0<=(SATLiteral(336) + SATLiteral(351) - aux1017))
351 4796 0
336 4796 0
336 351 4795 0
c ((SATLiteral(306) + aux1017 - aux1018)<=0)
4795 -4798 0
4796 -4799 0
-306 -4798 0
-306 4795 -4799 0
-306 4796 -4801 0
c (0<=(SATLiteral(306) + aux1017 - aux1018))
-4796 4801 0
-4795 4799 0
306 4801 0
306 -4796 4799 0
306 -4795 4798 0
c ((aux1014 + aux1016 - aux1019)<=0)
4792 -4803 0
4793 -4804 0
4786 -4803 0
4786 4792 -4804 0
4786 4793 -4806 0
4787 -4804 0
4787 4792 -4806 0
4787 4793 -4808 0
c (0<=(aux1014 + aux1016 - aux1019))
-4793 4808 0
-4792 4806 0
-4787 4808 0
-4787 -4793 4806 0
-4787 -4792 4804 0
-4786 4806 0
-4786 -4793 4804 0
-4786 -4792 4803 0
c ((SATLiteral(278) + SATLiteral(398) - aux1020)<=0)
-398 -4810 0
-278 -4810 0
-278 -398 -4811 0
c (0<=(SATLiteral(278) + SATLiteral(398) - aux1020))
398 4811 0
278 4811 0
278 398 4810 0
c ((SATLiteral(293) + SATLiteral(383) - aux1021)<=0)
-383 -4813 0
-293 -4813 0
-293 -383 -4814 0
c (0<=(SATLiteral(293) + SATLiteral(383) - aux1021))
383 4814 0
293 4814 0
293 383 4813 0
c ((SATLiteral(323) + SATLiteral(368) - aux1022)<=0)
-368 -4816 0
-323 -4816 0
-323 -368 -4817 0
c (0<=(SATLiteral(323) + SATLiteral(368) - aux1022))
368 4817 0
323 4817 0
323 368 4816 0
c ((SATLiteral(338) + SATLiteral(353) - aux1023)<=0)
-353 -4819 0
-338 -4819 0
-338 -353 -4820 0
c (0<=(SATLiteral(338) + SATLiteral(353) - aux1023))
353 4820 0
338 4820 0
338 353 4819 0
c ((SATLiteral(308) + aux1023 - aux1024)<=0)
4819 -4822 0
4820 -4823 0
-308 -4822 0
-308 4819 -4823 0
-308 4820 -4825 0
c (0<=(SATLiteral(308) + aux1023 - aux1024))
-4820 4825 0
-4819 4823 0
308 4825 0
308 -4820 4823 0
308 -4819 4822 0
c ((aux1020 + aux1022 - aux1025)<=0)
4816 -4827 0
4817 -4828 0
4810 -4827 0
4810 4816 -4828 0
4810 4817 -4830 0
4811 -4828 0
4811 4816 -4830 0
4811 4817 -4832 0
c (0<=(aux1020 + aux1022 - aux1025))
-4817 4832 0
-4816 4830 0
-4811 4832 0
-4811 -4817 4830 0
-4811 -4816 4828 0
-4810 4830 0
-4810 -4817 4828 0
-4810 -4816 4827 0
c ((SATLiteral(280) + SATLiteral(400) - aux1026)<=0)
-400 -4834 0
-280 -4834 0
-280 -400 -4835 0
c (0<=(SATLiteral(280) + SATLiteral(400) - aux1026))
400 4835 0
280 4835 0
280 400 4834 0
c ((SATLiteral(295) + SATLiteral(385) - aux1027)<=0)
-385 -4837 0
-295 -4837 0
-295 -385 -4838 0
c (0<=(SATLiteral(295) + SATLiteral(385) - aux1027))
385 4838 0
295 4838 0
295 385 4837 0
c ((SATLiteral(325) + SATLiteral(370) - aux1028)<=0)
-370 -4840 0
-325 -4840 0
-325 -370 -4841 0
c (0<=(SATLiteral(325) + SATLiteral(370) - aux1028))
370 4841 0
325 4841 0
325 370 4840 0
c ((SATLiteral(340) + SATLiteral(355) - aux1029)<=0)
-355 -4843 0
-340 -4843 0
-340 -355 -4844 0
c (0<=(SATLiteral(340) + SATLiteral(355) - aux1029))
355 4844 0
340 4844 0
340 355 4843 0
c ((SATLiteral(310) + aux1029 - aux1030)<=0)
4843 -4846 0
4844 -4847 0
-310 -4846 0
-310 4843 -4847 0
-310 4844 -4849 0
c (0<=(SATLiteral(310) + aux1029 - aux1030))
-4844 4849 0
-4843 4847 0
310 4849 0
310 -4844 4847 0
310 -4843 4846 0
c ((aux1026 + aux1028 - aux1031)<=0)
4840 -4851 0
4841 -4852 0
4834 -4851 0
4834 4840 -4852 0
4834 4841 -4854 0
4835 -4852 0
4835 4840 -4854 0
4835 4841 -4856 0
c (0<=(aux1026 + aux1028 - aux1031))
-4841 4856 0
-4840 4854 0
-4835 4856 0
-4835 -4841 4854 0
-4835 -4840 4852 0
-4834 4854 0
-4834 -4841 4852 0
-4834 -4840 4851 0
c ((SATLiteral(282) + SATLiteral(402) - aux1032)<=0)
-402 -4858 0
-282 -4858 0
-282 -402 -4859 0
c (0<=(SATLiteral(282) + SATLiteral(402) - aux1032))
402 4859 0
282 4859 0
282 402 4858 0
c ((SATLiteral(297) + SATLiteral(387) - aux1033)<=0)
-387 -4861 0
-297 -4861 0
-297 -387 -4862 0
c (0<=(SATLiteral(297) + SATLiteral(387) - aux1033))
387 4862 0
297 4862 0
297 387 4861 0
c ((SATLiteral(327) + SATLiteral(372) - aux1034)<=0)
-372 -4864 0
-327 -4864 0
-327 -372 -4865 0
c (0<=(SATLiteral(327) + SATLiteral(372) - aux1034))
372 4865 0
327 4865 0
327 372 4864 0
c ((SATLiteral(342) + SATLiteral(357) - aux1035)<=0)
-357 -4867 0
-342 -4867 0
-342 -357 -4868 0
c (0<=(SATLiteral(342) + SATLiteral(357) - aux1035))
357 4868 0
342 4868 0
342 357 4867 0
c ((SATLiteral(312) + aux1035 - aux1036)<=0)
4867 -4870 0
4868 -4871 0
-312 -4870 0
-312 4867 -4871 0
-312 4868 -4873 0
c (0<=(SATLiteral(312) + aux1035 - aux1036))
-4868 4873 0
-4867 4871 0
312 4873 0
312 -4868 4871 0
312 -4867 4870 0
c ((aux1032 + aux1034 - aux1037)<=0)
4864 -4875 0
4865 -4876 0
4858 -4875 0
4858 4864 -4876 0
4858 4865 -4878 0
4859 -4876 0
4859 4864 -4878 0
4859 4865 -4880 0
c (0<=(aux1032 + aux1034 - aux1037))
-4865 4880 0
-4864 4878 0
-4859 4880 0
-4859 -4865 4878 0
-4859 -4864 4876 0
-4858 4878 0
-4858 -4865 4876 0
-4858 -4864 4875 0
c ((SATLiteral(284) + SATLiteral(404) - aux1038)<=0)
-404 -4882 0
-284 -4882 0
-284 -404 -4883 0
c (0<=(SATLiteral(284) + SATLiteral(404) - aux1038))
404 4883 0
284 4883 0
284 404 4882 0
c ((SATLiteral(299) + SATLiteral(389) - aux1039)<=0)
-389 -4885 0
-299 -4885 0
-299 -389 -4886 0
c (0<=(SATLiteral(299) + SATLiteral(389) - aux1039))
389 4886 0
299 4886 0
299 389 4885 0
c ((SATLiteral(329) + SATLiteral(374) - aux1040)<=0)
-374 -4888 0
-329 -4888 0
-329 -374 -4889 0
c (0<=(SATLiteral(329) + SATLiteral(374) - aux1040))
374 4889 0
329 4889 0
329 374 4888 0
c ((SATLiteral(344) + SATLiteral(359) - aux1041)<=0)
-359 -4891 0
-344 -4891 0
-344 -359 -4892 0
c (0<=(SATLiteral(344) + SATLiteral(359) - aux1041))
359 4892 0
344 4892 0
344 359 4891 0
c ((SATLiteral(314) + aux1041 - aux1042)<=0)
4891 -4894 0
4892 -4895 0
-314 -4894 0
-314 4891 -4895 0
-314 4892 -4897 0
c (0<=(SATLiteral(314) + aux1041 - aux1042))
-4892 4897 0
-4891 4895 0
314 4897 0
314 -4892 4895 0
314 -4891 4894 0
c ((aux1038 + aux1040 - aux1043)<=0)
4888 -4899 0
4889 -4900 0
4882 -4899 0
4882 4888 -4900 0
4882 4889 -4902 0
4883 -4900 0
4883 4888 -4902 0
4883 4889 -4904 0
c (0<=(aux1038 + aux1040 - aux1043))
-4889 4904 0
-4888 4902 0
-4883 4904 0
-4883 -4889 4902 0
-4883 -4888 4900 0
-4882 4902 0
-4882 -4889 4900 0
-4882 -4888 4899 0
c ((SATLiteral(286) + SATLiteral(406) - aux1044)<=0)
-406 -4906 0
-286 -4906 0
-286 -406 -4907 0
c (0<=(SATLiteral(286) + SATLiteral(406) - aux1044))
406 4907 0
286 4907 0
286 406 4906 0
c ((SATLiteral(301) + SATLiteral(391) - aux1045)<=0)
-391 -4909 0
-301 -4909 0
-301 -391 -4910 0
c (0<=(SATLiteral(301) + SATLiteral(391) - aux1045))
391 4910 0
301 4910 0
301 391 4909 0
c ((SATLiteral(331) + SATLiteral(376) - aux1046)<=0)
-376 -4912 0
-331 -4912 0
-331 -376 -4913 0
c (0<=(SATLiteral(331) + SATLiteral(376) - aux1046))
376 4913 0
331 4913 0
331 376 4912 0
c ((SATLiteral(346) + SATLiteral(361) - aux1047)<=0)
-361 -4915 0
-346 -4915 0
-346 -361 -4916 0
c (0<=(SATLiteral(346) + SATLiteral(361) - aux1047))
361 4916 0
346 4916 0
346 361 4915 0
c ((SATLiteral(316) + aux1047 - aux1048)<=0)
4915 -4918 0
4916 -4919 0
-316 -4918 0
-316 4915 -4919 0
-316 4916 -4921 0
c (0<=(SATLiteral(316) + aux1047 - aux1048))
-4916 4921 0
-4915 4919 0
316 4921 0
316 -4916 4919 0
316 -4915 4918 0
c ((aux1044 + aux1046 - aux1049)<=0)
4912 -4923 0
4913 -4924 0
4906 -4923 0
4906 4912 -4924 0
4906 4913 -4926 0
4907 -4924 0
4907 4912 -4926 0
4907 4913 -4928 0
c (0<=(aux1044 + aux1046 - aux1049))
-4913 4928 0
-4912 4926 0
-4907 4928 0
-4907 -4913 4926 0
-4907 -4912 4924 0
-4906 4926 0
-4906 -4913 4924 0
-4906 -4912 4923 0
c ((SATLiteral(-285) + SATLiteral(-405) - aux1050)<=0)
405 -4930 0
285 -4930 0
285 405 -4931 0
c (0<=(SATLiteral(-285) + SATLiteral(-405) - aux1050))
-405 4931 0
-285 4931 0
-285 -405 4930 0
c ((SATLiteral(-300) + SATLiteral(-390) - aux1051)<=0)
390 -4933 0
300 -4933 0
300 390 -4934 0
c (0<=(SATLiteral(-300) + SATLiteral(-390) - aux1051))
-390 4934 0
-300 4934 0
-300 -390 4933 0
c ((SATLiteral(-330) + SATLiteral(-375) - aux1052)<=0)
375 -4936 0
330 -4936 0
330 375 -4937 0
c (0<=(SATLiteral(-330) + SATLiteral(-375) - aux1052))
-375 4937 0
-330 4937 0
-330 -375 4936 0
c ((SATLiteral(-345) + SATLiteral(-360) - aux1053)<=0)
360 -4939 0
345 -4939 0
345 360 -4940 0
c (0<=(SATLiteral(-345) + SATLiteral(-360) - aux1053))
-360 4940 0
-345 4940 0
-345 -360 4939 0
c ((SATLiteral(-315) + aux1053 - aux1054)<=0)
4939 -4942 0
4940 -4943 0
315 -4942 0
315 4939 -4943 0
315 4940 -4945 0
c (0<=(SATLiteral(-315) + aux1053 - aux1054))
-4940 4945 0
-4939 4943 0
-315 4945 0
-315 -4940 4943 0
-315 -4939 4942 0
c ((aux1050 + aux1052 - aux1055)<=0)
4936 -4947 0
4937 -4948 0
4930 -4947 0
4930 4936 -4948 0
4930 4937 -4950 0
4931 -4948 0
4931 4936 -4950 0
4931 4937 -4952 0
c (0<=(aux1050 + aux1052 - aux1055))
-4937 4952 0
-4936 4950 0
-4931 4952 0
-4931 -4937 4950 0
-4931 -4936 4948 0
-4930 4950 0
-4930 -4937 4948 0
-4930 -4936 4947 0
c (( - aux1056 + SATLiteral(407) + SATLiteral(527))<=0)
-527 -4954 0
-407 -4954 0
-407 -527 -4955 0
c (0<=( - aux1056 + SATLiteral(407) + SATLiteral(527)))
527 4955 0
407 4955 0
407 527 4954 0
c (( - aux1057 + SATLiteral(422) + SATLiteral(512))<=0)
-512 -4957 0
-422 -4957 0
-422 -512 -4958 0
c (0<=( - aux1057 + SATLiteral(422) + SATLiteral(512)))
512 4958 0
422 4958 0
422 512 4957 0
c (( - aux1058 + SATLiteral(452) + SATLiteral(497))<=0)
-497 -4960 0
-452 -4960 0
-452 -497 -4961 0
c (0<=( - aux1058 + SATLiteral(452) + SATLiteral(497)))
497 4961 0
452 4961 0
452 497 4960 0
c (( - aux1059 + SATLiteral(467) + SATLiteral(482))<=0)
-482 -4963 0
-467 -4963 0
-467 -482 -4964 0
c (0<=( - aux1059 + SATLiteral(467) + SATLiteral(482)))
482 4964 0
467 4964 0
467 482 4963 0
c ((aux1059 - aux1060 + SATLiteral(437))<=0)
4963 -4966 0
4964 -4967 0
-437 -4966 0
-437 4963 -4967 0
-437 4964 -4969 0
c (0<=(aux1059 - aux1060 + SATLiteral(437)))
-4964 4969 0
-4963 4967 0
437 4969 0
437 -4964 4967 0
437 -4963 4966 0
c ((aux1056 + aux1058 - aux1061)<=0)
4960 -4971 0
4961 -4972 0
4954 -4971 0
4954 4960 -4972 0
4954 4961 -4974 0
4955 -4972 0
4955 4960 -4974 0
4955 4961 -4976 0
c (0<=(aux1056 + aux1058 - aux1061))
-4961 4976 0
-4960 4974 0
-4955 4976 0
-4955 -4961 4974 0
-4955 -4960 4972 0
-4954 4974 0
-4954 -4961 4972 0
-4954 -4960 4971 0
c (( - aux1062 + SATLiteral(409) + SATLiteral(529))<=0)
-529 -4978 0
-409 -4978 0
-409 -529 -4979 0
c (0<=( - aux1062 + SATLiteral(409) + SATLiteral(529)))
529 4979 0
409 4979 0
409 529 4978 0
c (( - aux1063 + SATLiteral(424) + SATLiteral(514))<=0)
-514 -4981 0
-424 -4981 0
-424 -514 -4982 0
c (0<=( - aux1063 + SATLiteral(424) + SATLiteral(514)))
514 4982 0
424 4982 0
424 514 4981 0
c (( - aux1064 + SATLiteral(454) + SATLiteral(499))<=0)
-499 -4984 0
-454 -4984 0
-454 -499 -4985 0
c (0<=( - aux1064 + SATLiteral(454) + SATLiteral(499)))
499 4985 0
454 4985 0
454 499 4984 0
c (( - aux1065 + SATLiteral(469) + SATLiteral(484))<=0)
-484 -4987 0
-469 -4987 0
-469 -484 -4988 0
c (0<=( - aux1065 + SATLiteral(469) + SATLiteral(484)))
484 4988 0
469 4988 0
469 484 4987 0
c ((aux1065 - aux1066 + SATLiteral(439))<=0)
4987 -4990 0
4988 -4991 0
-439 -4990 0
-439 4987 -4991 0
-439 4988 -4993 0
c (0<=(aux1065 - aux1066 + SATLiteral(439)))
-4988 4993 0
-4987 4991 0
439 4993 0
439 -4988 4991 0
439 -4987 4990 0
c ((aux1062 + aux1064 - aux1067)<=0)
4984 -4995 0
4985 -4996 0
4978 -4995 0
4978 4984 -4996 0
4978 4985 -4998 0
4979 -4996 0
4979 4984 -4998 0
4979 4985 -5000 0
c (0<=(aux1062 + aux1064 - aux1067))
-4985 5000 0
-4984 4998 0
-4979 5000 0
-4979 -4985 4998 0
-4979 -4984 4996 0
-4978 4998 0
-4978 -4985 4996 0
-4978 -4984 4995 0
c (( - aux1068 + SATLiteral(411) + SATLiteral(531))<=0)
-531 -5002 0
-411 -5002 0
-411 -531 -5003 0
c (0<=( - aux1068 + SATLiteral(411) + SATLiteral(531)))
531 5003 0
411 5003 0
411 531 5002 0
c (( - aux1069 + SATLiteral(426) + SATLiteral(516))<=0)
-516 -5005 0
-426 -5005 0
-426 -516 -5006 0
c (0<=( - aux1069 + SATLiteral(426) + SATLiteral(516)))
516 5006 0
426 5006 0
426 516 5005 0
c (( - aux1070 + SATLiteral(456) + SATLiteral(501))<=0)
-501 -5008 0
-456 -5008 0
-456 -501 -5009 0
c (0<=( - aux1070 + SATLiteral(456) + SATLiteral(501)))
501 5009 0
456 5009 0
456 501 5008 0
c (( - aux1071 + SATLiteral(471) + SATLiteral(486))<=0)
-486 -5011 0
-471 -5011 0
-471 -486 -5012 0
c (0<=( - aux1071 + SATLiteral(471) + SATLiteral(486)))
486 5012 0
471 5012 0
471 486 5011 0
c ((aux1071 - aux1072 + SATLiteral(441))<=0)
5011 -5014 0
5012 -5015 0
-441 -5014 0
-441 5011 -5015 0
-441 5012 -5017 0
c (0<=(aux1071 - aux1072 + SATLiteral(441)))
-5012 5017 0
-5011 5015 0
441 5017 0
441 -5012 5015 0
441 -5011 5014 0
c ((aux1068 + aux1070 - aux1073)<=0)
5008 -5019 0
5009 -5020 0
5002 -5019 0
5002 5008 -5020 0
5002 5009 -5022 0
5003 -5020 0
5003 5008 -5022 0
5003 5009 -5024 0
c (0<=(aux1068 + aux1070 - aux1073))
-5009 5024 0
-5008 5022 0
-5003 5024 0
-5003 -5009 5022 0
-5003 -5008 5020 0
-5002 5022 0
-5002 -5009 5020 0
-5002 -5008 5019 0
c (( - aux1074 + SATLiteral(413) + SATLiteral(533))<=0)
-533 -5026 0
-413 -5026 0
-413 -533 -5027 0
c (0<=( - aux1074 + SATLiteral(413) + SATLiteral(533)))
533 5027 0
413 5027 0
413 533 5026 0
c (( - aux1075 + SATLiteral(428) + SATLiteral(518))<=0)
-518 -5029 0
-428 -5029 0
-428 -518 -5030 0
c (0<=( - aux1075 + SATLiteral(428) + SATLiteral(518)))
518 5030 0
428 5030 0
428 518 5029 0
c (( - aux1076 + SATLiteral(458) + SATLiteral(503))<=0)
-503 -5032 0
-458 -5032 0
-458 -503 -5033 0
c (0<=( - aux1076 + SATLiteral(458) + SATLiteral(503)))
503 5033 0
458 5033 0
458 503 5032 0
c (( - aux1077 + SATLiteral(473) + SATLiteral(488))<=0)
-488 -5035 0
-473 -5035 0
-473 -488 -5036 0
c (0<=( - aux1077 + SATLiteral(473) + SATLiteral(488)))
488 5036 0
473 5036 0
473 488 5035 0
c ((aux1077 - aux1078 + SATLiteral(443))<=0)
5035 -5038 0
5036 -5039 0
-443 -5038 0
-443 5035 -5039 0
-443 5036 -5041 0
c (0<=(aux1077 - aux1078 + SATLiteral(443)))
-5036 5041 0
-5035 5039 0
443 5041 0
443 -5036 5039 0
443 -5035 5038 0
c ((aux1074 + aux1076 - aux1079)<=0)
5032 -5043 0
5033 -5044 0
5026 -5043 0
5026 5032 -5044 0
5026 5033 -5046 0
5027 -5044 0
5027 5032 -5046 0
5027 5033 -5048 0
c (0<=(aux1074 + aux1076 - aux1079))
-5033 5048 0
-5032 5046 0
-5027 5048 0
-5027 -5033 5046 0
-5027 -5032 5044 0
-5026 5046 0
-5026 -5033 5044 0
-5026 -5032 5043 0
c (( - aux1080 + SATLiteral(415) + SATLiteral(535))<=0)
-535 -5050 0
-415 -5050 0
-415 -535 -5051 0
c (0<=( - aux1080 + SATLiteral(415) + SATLiteral(535)))
535 5051 0
415 5051 0
415 535 5050 0
c (( - aux1081 + SATLiteral(430) + SATLiteral(520))<=0)
-520 -5053 0
-430 -5053 0
-430 -520 -5054 0
c (0<=( - aux1081 + SATLiteral(430) + SATLiteral(520)))
520 5054 0
430 5054 0
430 520 5053 0
c (( - aux1082 + SATLiteral(460) + SATLiteral(505))<=0)
-505 -5056 0
-460 -5056 0
-460 -505 -5057 0
c (0<=( - aux1082 + SATLiteral(460) + SATLiteral(505)))
505 5057 0
460 5057 0
460 505 5056 0
c (( - aux1083 + SATLiteral(475) + SATLiteral(490))<=0)
-490 -5059 0
-475 -5059 0
-475 -490 -5060 0
c (0<=( - aux1083 + SATLiteral(475) + SATLiteral(490)))
490 5060 0
475 5060 0
475 490 5059 0
c ((aux1083 - aux1084 + SATLiteral(445))<=0)
5059 -5062 0
5060 -5063 0
-445 -5062 0
-445 5059 -5063 0
-445 5060 -5065 0
c (0<=(aux1083 - aux1084 + SATLiteral(445)))
-5060 5065 0
-5059 5063 0
445 5065 0
445 -5060 5063 0
445 -5059 5062 0
c ((aux1080 + aux1082 - aux1085)<=0)
5056 -5067 0
5057 -5068 0
5050 -5067 0
5050 5056 -5068 0
5050 5057 -5070 0
5051 -5068 0
5051 5056 -5070 0
5051 5057 -5072 0
c (0<=(aux1080 + aux1082 - aux1085))
-5057 5072 0
-5056 5070 0
-5051 5072 0
-5051 -5057 5070 0
-5051 -5056 5068 0
-5050 5070 0
-5050 -5057 5068 0
-5050 -5056 5067 0
c (( - aux1086 + SATLiteral(417) + SATLiteral(537))<=0)
-537 -5074 0
-417 -5074 0
-417 -537 -5075 0
c (0<=( - aux1086 + SATLiteral(417) + SATLiteral(537)))
537 5075 0
417 5075 0
417 537 5074 0
c (( - aux1087 + SATLiteral(432) + SATLiteral(522))<=0)
-522 -5077 0
-432 -5077 0
-432 -522 -5078 0
c (0<=( - aux1087 + SATLiteral(432) + SATLiteral(522)))
522 5078 0
432 5078 0
432 522 5077 0
c (( - aux1088 + SATLiteral(462) + SATLiteral(507))<=0)
-507 -5080 0
-462 -5080 0
-462 -507 -5081 0
c (0<=( - aux1088 + SATLiteral(462) + SATLiteral(507)))
507 5081 0
462 5081 0
462 507 5080 0
c (( - aux1089 + SATLiteral(477) + SATLiteral(492))<=0)
-492 -5083 0
-477 -5083 0
-477 -492 -5084 0
c (0<=( - aux1089 + SATLiteral(477) + SATLiteral(492)))
492 5084 0
477 5084 0
477 492 5083 0
c ((aux1089 - aux1090 + SATLiteral(447))<=0)
5083 -5086 0
5084 -5087 0
-447 -5086 0
-447 5083 -5087 0
-447 5084 -5089 0
c (0<=(aux1089 - aux1090 + SATLiteral(447)))
-5084 5089 0
-5083 5087 0
447 5089 0
447 -5084 5087 0
447 -5083 5086 0
c ((aux1086 + aux1088 - aux1091)<=0)
5080 -5091 0
5081 -5092 0
5074 -5091 0
5074 5080 -5092 0
5074 5081 -5094 0
5075 -5092 0
5075 5080 -5094 0
5075 5081 -5096 0
c (0<=(aux1086 + aux1088 - aux1091))
-5081 5096 0
-5080 5094 0
-5075 5096 0
-5075 -5081 5094 0
-5075 -5080 5092 0
-5074 5094 0
-5074 -5081 5092 0
-5074 -5080 5091 0
c (( - aux1092 + SATLiteral(419) + SATLiteral(539))<=0)
-539 -5098 0
-419 -5098 0
-419 -539 -5099 0
c (0<=( - aux1092 + SATLiteral(419) + SATLiteral(539)))
539 5099 0
419 5099 0
419 539 5098 0
c (( - aux1093 + SATLiteral(434) + SATLiteral(524))<=0)
-524 -5101 0
-434 -5101 0
-434 -524 -5102 0
c (0<=( - aux1093 + SATLiteral(434) + SATLiteral(524)))
524 5102 0
434 5102 0
434 524 5101 0
c (( - aux1094 + SATLiteral(464) + SATLiteral(509))<=0)
-509 -5104 0
-464 -5104 0
-464 -509 -5105 0
c (0<=( - aux1094 + SATLiteral(464) + SATLiteral(509)))
509 5105 0
464 5105 0
464 509 5104 0
c (( - aux1095 + SATLiteral(479) + SATLiteral(494))<=0)
-494 -5107 0
-479 -5107 0
-479 -494 -5108 0
c (0<=( - aux1095 + SATLiteral(479) + SATLiteral(494)))
494 5108 0
479 5108 0
479 494 5107 0
c ((aux1095 - aux1096 + SATLiteral(449))<=0)
5107 -5110 0
5108 -5111 0
-449 -5110 0
-449 5107 -5111 0
-449 5108 -5113 0
c (0<=(aux1095 - aux1096 + SATLiteral(449)))
-5108 5113 0
-5107 5111 0
449 5113 0
449 -5108 5111 0
449 -5107 5110 0
c ((aux1092 + aux1094 - aux1097)<=0)
5104 -5115 0
5105 -5116 0
5098 -5115 0
5098 5104 -5116 0
5098 5105 -5118 0
5099 -5116 0
5099 5104 -5118 0
5099 5105 -5120 0
c (0<=(aux1092 + aux1094 - aux1097))
-5105 5120 0
-5104 5118 0
-5099 5120 0
-5099 -5105 5118 0
-5099 -5104 5116 0
-5098 5118 0
-5098 -5105 5116 0
-5098 -5104 5115 0
c (( - aux1098 + SATLiteral(421) + SATLiteral(541))<=0)
-541 -5122 0
-421 -5122 0
-421 -541 -5123 0
c (0<=( - aux1098 + SATLiteral(421) + SATLiteral(541)))
541 5123 0
421 5123 0
421 541 5122 0
c (( - aux1099 + SATLiteral(436) + SATLiteral(526))<=0)
-526 -5125 0
-436 -5125 0
-436 -526 -5126 0
c (0<=( - aux1099 + SATLiteral(436) + SATLiteral(526)))
526 5126 0
436 5126 0
436 526 5125 0
c (( - aux1100 + SATLiteral(466) + SATLiteral(511))<=0)
-511 -5128 0
-466 -5128 0
-466 -511 -5129 0
c (0<=( - aux1100 + SATLiteral(466) + SATLiteral(511)))
511 5129 0
466 5129 0
466 511 5128 0
c (( - aux1101 + SATLiteral(481) + SATLiteral(496))<=0)
-496 -5131 0
-481 -5131 0
-481 -496 -5132 0
c (0<=( - aux1101 + SATLiteral(481) + SATLiteral(496)))
496 5132 0
481 5132 0
481 496 5131 0
c ((aux1101 - aux1102 + SATLiteral(451))<=0)
5131 -5134 0
5132 -5135 0
-451 -5134 0
-451 5131 -5135 0
-451 5132 -5137 0
c (0<=(aux1101 - aux1102 + SATLiteral(451)))
-5132 5137 0
-5131 5135 0
451 5137 0
451 -5132 5135 0
451 -5131 5134 0
c ((aux1098 + aux1100 - aux1103)<=0)
5128 -5139 0
5129 -5140 0
5122 -5139 0
5122 5128 -5140 0
5122 5129 -5142 0
5123 -5140 0
5123 5128 -5142 0
5123 5129 -5144 0
c (0<=(aux1098 + aux1100 - aux1103))
-5129 5144 0
-5128 5142 0
-5123 5144 0
-5123 -5129 5142 0
-5123 -5128 5140 0
-5122 5142 0
-5122 -5129 5140 0
-5122 -5128 5139 0
c (( - aux1104 + SATLiteral(-420) + SATLiteral(-540))<=0)
540 -5146 0
420 -5146 0
420 540 -5147 0
c (0<=( - aux1104 + SATLiteral(-420) + SATLiteral(-540)))
-540 5147 0
-420 5147 0
-420 -540 5146 0
c (( - aux1105 + SATLiteral(-435) + SATLiteral(-525))<=0)
525 -5149 0
435 -5149 0
435 525 -5150 0
c (0<=( - aux1105 + SATLiteral(-435) + SATLiteral(-525)))
-525 5150 0
-435 5150 0
-435 -525 5149 0
c (( - aux1106 + SATLiteral(-465) + SATLiteral(-510))<=0)
510 -5152 0
465 -5152 0
465 510 -5153 0
c (0<=( - aux1106 + SATLiteral(-465) + SATLiteral(-510)))
-510 5153 0
-465 5153 0
-465 -510 5152 0
c (( - aux1107 + SATLiteral(-480) + SATLiteral(-495))<=0)
495 -5155 0
480 -5155 0
480 495 -5156 0
c (0<=( - aux1107 + SATLiteral(-480) + SATLiteral(-495)))
-495 5156 0
-480 5156 0
-480 -495 5155 0
c ((aux1107 - aux1108 + SATLiteral(-450))<=0)
5155 -5158 0
5156 -5159 0
450 -5158 0
450 5155 -5159 0
450 5156 -5161 0
c (0<=(aux1107 - aux1108 + SATLiteral(-450)))
-5156 5161 0
-5155 5159 0
-450 5161 0
-450 -5156 5159 0
-450 -5155 5158 0
c ((aux1104 + aux1106 - aux1109)<=0)
5152 -5163 0
5153 -5164 0
5146 -5163 0
5146 5152 -5164 0
5146 5153 -5166 0
5147 -5164 0
5147 5152 -5166 0
5147 5153 -5168 0
c (0<=(aux1104 + aux1106 - aux1109))
-5153 5168 0
-5152 5166 0
-5147 5168 0
-5147 -5153 5166 0
-5147 -5152 5164 0
-5146 5166 0
-5146 -5153 5164 0
-5146 -5152 5163 0
c (( - aux1110 + SATLiteral(542) + SATLiteral(662))<=0)
-662 -5170 0
-542 -5170 0
-542 -662 -5171 0
c (0<=( - aux1110 + SATLiteral(542) + SATLiteral(662)))
662 5171 0
542 5171 0
542 662 5170 0
c (( - aux1111 + SATLiteral(557) + SATLiteral(647))<=0)
-647 -5173 0
-557 -5173 0
-557 -647 -5174 0
c (0<=( - aux1111 + SATLiteral(557) + SATLiteral(647)))
647 5174 0
557 5174 0
557 647 5173 0
c (( - aux1112 + SATLiteral(587) + SATLiteral(632))<=0)
-632 -5176 0
-587 -5176 0
-587 -632 -5177 0
c (0<=( - aux1112 + SATLiteral(587) + SATLiteral(632)))
632 5177 0
587 5177 0
587 632 5176 0
c (( - aux1113 + SATLiteral(602) + SATLiteral(617))<=0)
-617 -5179 0
-602 -5179 0
-602 -617 -5180 0
c (0<=( - aux1113 + SATLiteral(602) + SATLiteral(617)))
617 5180 0
602 5180 0
602 617 5179 0
c ((aux1113 - aux1114 + SATLiteral(572))<=0)
5179 -5182 0
5180 -5183 0
-572 -5182 0
-572 5179 -5183 0
-572 5180 -5185 0
c (0<=(aux1113 - aux1114 + SATLiteral(572)))
-5180 5185 0
-5179 5183 0
572 5185 0
572 -5180 5183 0
572 -5179 5182 0
c ((aux1110 + aux1112 - aux1115)<=0)
5176 -5187 0
5177 -5188 0
5170 -5187 0
5170 5176 -5188 0
5170 5177 -5190 0
5171 -5188 0
5171 5176 -5190 0
5171 5177 -5192 0
c (0<=(aux1110 + aux1112 - aux1115))
-5177 5192 0
-5176 5190 0
-5171 5192 0
-5171 -5177 5190 0
-5171 -5176 5188 0
-5170 5190 0
-5170 -5177 5188 0
-5170 -5176 5187 0
c (( - aux1116 + SATLiteral(544) + SATLiteral(664))<=0)
-664 -5194 0
-544 -5194 0
-544 -664 -5195 0
c (0<=( - aux1116 + SATLiteral(544) + SATLiteral(664)))
664 5195 0
544 5195 0
544 664 5194 0
c (( - aux1117 + SATLiteral(559) + SATLiteral(649))<=0)
-649 -5197 0
-559 -5197 0
-559 -649 -5198 0
c (0<=( - aux1117 + SATLiteral(559) + SATLiteral(649)))
649 5198 0
559 5198 0
559 649 5197 0
c (( - aux1118 + SATLiteral(589) + SATLiteral(634))<=0)
-634 -5200 0
-589 -5200 0
-589 -634 -5201 0
c (0<=( - aux1118 + SATLiteral(589) + SATLiteral(634)))
634 5201 0
589 5201 0
589 634 5200 0
c (( - aux1119 + SATLiteral(604) + SATLiteral(619))<=0)
-619 -5203 0
-604 -5203 0
-604 -619 -5204 0
c (0<=( - aux1119 + SATLiteral(604) + SATLiteral(619)))
619 5204 0
604 5204 0
604 619 5203 0
c ((aux1119 - aux1120 + SATLiteral(574))<=0)
5203 -5206 0
5204 -5207 0
-574 -5206 0
-574 5203 -5207 0
-574 5204 -5209 0
c (0<=(aux1119 - aux1120 + SATLiteral(574)))
-5204 5209 0
-5203 5207 0
574 5209 0
574 -5204 5207 0
574 -5203 5206 0
c ((aux1116 + aux1118 - aux1121)<=0)
5200 -5211 0
5201 -5212 0
5194 -5211 0
5194 5200 -5212 0
5194 5201 -5214 0
5195 -5212 0
5195 5200 -5214 0
5195 5201 -5216 0
c (0<=(aux1116 + aux1118 - aux1121))
-5201 5216 0
-5200 5214 0
-5195 5216 0
-5195 -5201 5214 0
-5195 -5200 5212 0
-5194 5214 0
-5194 -5201 5212 0
-5194 -5200 5211 0
c (( - aux1122 + SATLiteral(546) + SATLiteral(666))<=0)
-666 -5218 0
-546 -5218 0
-546 -666 -5219 0
c (0<=( - aux1122 + SATLiteral(546) + SATLiteral(666)))
666 5219 0
546 5219 0
546 666 5218 0
c (( - aux1123 + SATLiteral(561) + SATLiteral(651))<=0)
-651 -5221 0
-561 -5221 0
-561 -651 -5222 0
c (0<=( - aux1123 + SATLiteral(561) + SATLiteral(651)))
651 5222 0
561 5222 0
561 651 5221 0
c (( - aux1124 + SATLiteral(591) + SATLiteral(636))<=0)
-636 -5224 0
-591 -5224 0
-591 -636 -5225 0
c (0<=( - aux1124 + SATLiteral(591) + SATLiteral(636)))
636 5225 0
591 5225 0
591 636 5224 0
c (( - aux1125 + SATLiteral(606) + SATLiteral(621))<=0)
-621 -5227 0
-606 -5227 0
-606 -621 -5228 0
c (0<=( - aux1125 + SATLiteral(606) + SATLiteral(621)))
621 5228 0
606 5228 0
606 621 5227 0
c ((aux1125 - aux1126 + SATLiteral(576))<=0)
5227 -5230 0
5228 -5231 0
-576 -5230 0
-576 5227 -5231 0
-576 5228 -5233 0
c (0<=(aux1125 - aux1126 + SATLiteral(576)))
-5228 5233 0
-5227 5231 0
576 5233 0
576 -5228 5231 0
576 -5227 5230 0
c ((aux1122 + aux1124 - aux1127)<=0)
5224 -5235 0
5225 -5236 0
5218 -5235 0
5218 5224 -5236 0
5218 5225 -5238 0
5219 -5236 0
5219 5224 -5238 0
5219 5225 -5240 0
c (0<=(aux1122 + aux1124 - aux1127))
-5225 5240 0
-5224 5238 0
-5219 5240 0
-5219 -5225 5238 0
-5219 -5224 5236 0
-5218 5238 0
-5218 -5225 5236 0
-5218 -5224 5235 0
c (( - aux1128 + SATLiteral(548) + SATLiteral(668))<=0)
-668 -5242 0
-548 -5242 0
-548 -668 -5243 0
c (0<=( - aux1128 + SATLiteral(548) + SATLiteral(668)))
668 5243 0
548 5243 0
548 668 5242 0
c (( - aux1129 + SATLiteral(563) + SATLiteral(653))<=0)
-653 -5245 0
-563 -5245 0
-563 -653 -5246 0
c (0<=( - aux1129 + SATLiteral(563) + SATLiteral(653)))
653 5246 0
563 5246 0
563 653 5245 0
c (( - aux1130 + SATLiteral(593) + SATLiteral(638))<=0)
-638 -5248 0
-593 -5248 0
-593 -638 -5249 0
c (0<=( - aux1130 + SATLiteral(593) + SATLiteral(638)))
638 5249 0
593 5249 0
593 638 5248 0
c (( - aux1131 + SATLiteral(608) + SATLiteral(623))<=0)
-623 -5251 0
-608 -5251 0
-608 -623 -5252 0
c (0<=( - aux1131 + SATLiteral(608) + SATLiteral(623)))
623 5252 0
608 5252 0
608 623 5251 0
c ((aux1131 - aux1132 + SATLiteral(578))<=0)
5251 -5254 0
5252 -5255 0
-578 -5254 0
-578 5251 -5255 0
-578 5252 -5257 0
c (0<=(aux1131 - aux1132 + SATLiteral(578)))
-5252 5257 0
-5251 5255 0
578 5257 0
578 -5252 5255 0
578 -5251 5254 0
c ((aux1128 + aux1130 - aux1133)<=0)
5248 -5259 0
5249 -5260 0
5242 -5259 0
5242 5248 -5260 0
5242 5249 -5262 0
5243 -5260 0
5243 5248 -5262 0
5243 5249 -5264 0
c (0<=(aux1128 + aux1130 - aux1133))
-5249 5264 0
-5248 5262 0
-5243 5264 0
-5243 -5249 5262 0
-5243 -5248 5260 0
-5242 5262 0
-5242 -5249 5260 0
-5242 -5248 5259 0
c (( - aux1134 + SATLiteral(550) + SATLiteral(670))<=0)
-670 -5266 0
-550 -5266 0
-550 -670 -5267 0
c (0<=( - aux1134 + SATLiteral(550) + SATLiteral(670)))
670 5267 0
550 5267 0
550 670 5266 0
c (( - aux1135 + SATLiteral(565) + SATLiteral(655))<=0)
-655 -5269 0
-565 -5269 0
-565 -655 -5270 0
c (0<=( - aux1135 + SATLiteral(565) + SATLiteral(655)))
655 5270 0
565 5270 0
565 655 5269 0
c (( - aux1136 + SATLiteral(595) + SATLiteral(640))<=0)
-640 -5272 0
-595 -5272 0
-595 -640 -5273 0
c (0<=( - aux1136 + SATLiteral(595) + SATLiteral(640)))
640 5273 0
595 5273 0
595 640 5272 0
c (( - aux1137 + SATLiteral(610) + SATLiteral(625))<=0)
-625 -5275 0
-610 -5275 0
-610 -625 -5276 0
c (0<=( - aux1137 + SATLiteral(610) + SATLiteral(625)))
625 5276 0
610 5276 0
610 625 5275 0
c ((aux1137 - aux1138 + SATLiteral(580))<=0)
5275 -5278 0
5276 -5279 0
-580 -5278 0
-580 5275 -5279 0
-580 5276 -5281 0
c (0<=(aux1137 - aux1138 + SATLiteral(580)))
-5276 5281 0
-5275 5279 0
580 5281 0
580 -5276 5279 0
580 -5275 5278 0
c ((aux1134 + aux1136 - aux1139)<=0)
5272 -5283 0
5273 -5284 0
5266 -5283 0
5266 5272 -5284 0
5266 5273 -5286 0
5267 -5284 0
5267 5272 -5286 0
5267 5273 -5288 0
c (0<=(aux1134 + aux1136 - aux1139))
-5273 5288 0
-5272 5286 0
-5267 5288 0
-5267 -5273 5286 0
-5267 -5272 5284 0
-5266 5286 0
-5266 -5273 5284 0
-5266 -5272 5283 0
c (( - aux1140 + SATLiteral(552) + SATLiteral(672))<=0)
-672 -5290 0
-552 -5290 0
-552 -672 -5291 0
c (0<=( - aux1140 + SATLiteral(552) + SATLiteral(672)))
672 5291 0
552 5291 0
552 672 5290 0
c (( - aux1141 + SATLiteral(567) + SATLiteral(657))<=0)
-657 -5293 0
-567 -5293 0
-567 -657 -5294 0
c (0<=( - aux1141 + SATLiteral(567) + SATLiteral(657)))
657 5294 0
567 5294 0
567 657 5293 0
c (( - aux1142 + SATLiteral(597) + SATLiteral(642))<=0)
-642 -5296 0
-597 -5296 0
-597 -642 -5297 0
c (0<=( - aux1142 + SATLiteral(597) + SATLiteral(642)))
642 5297 0
597 5297 0
597 642 5296 0
c (( - aux1143 + SATLiteral(612) + SATLiteral(627))<=0)
-627 -5299 0
-612 -5299 0
-612 -627 -5300 0
c (0<=( - aux1143 + SATLiteral(612) + SATLiteral(627)))
627 5300 0
612 5300 0
612 627 5299 0
c ((aux1143 - aux1144 + SATLiteral(582))<=0)
5299 -5302 0
5300 -5303 0
-582 -5302 0
-582 5299 -5303 0
-582 5300 -5305 0
c (0<=(aux1143 - aux1144 + SATLiteral(582)))
-5300 5305 0
-5299 5303 0
582 5305 0
582 -5300 5303 0
582 -5299 5302 0
c ((aux1140 + aux1142 - aux1145)<=0)
5296 -5307 0
5297 -5308 0
5290 -5307 0
5290 5296 -5308 0
5290 5297 -5310 0
5291 -5308 0
5291 5296 -5310 0
5291 5297 -5312 0
c (0<=(aux1140 + aux1142 - aux1145))
-5297 5312 0
-5296 5310 0
-5291 5312 0
-5291 -5297 5310 0
-5291 -5296 5308 0
-5290 5310 0
-5290 -5297 5308 0
-5290 -5296 5307 0
c (( - aux1146 + SATLiteral(554) + SATLiteral(674))<=0)
-674 -5314 0
-554 -5314 0
-554 -674 -5315 0
c (0<=( - aux1146 + SATLiteral(554) + SATLiteral(674)))
674 5315 0
554 5315 0
554 674 5314 0
c (( - aux1147 + SATLiteral(569) + SATLiteral(659))<=0)
-659 -5317 0
-569 -5317 0
-569 -659 -5318 0
c (0<=( - aux1147 + SATLiteral(569) + SATLiteral(659)))
659 5318 0
569 5318 0
569 659 5317 0
c (( - aux1148 + SATLiteral(599) + SATLiteral(644))<=0)
-644 -5320 0
-599 -5320 0
-599 -644 -5321 0
c (0<=( - aux1148 + SATLiteral(599) + SATLiteral(644)))
644 5321 0
599 5321 0
599 644 5320 0
c (( - aux1149 + SATLiteral(614) + SATLiteral(629))<=0)
-629 -5323 0
-614 -5323 0
-614 -629 -5324 0
c (0<=( - aux1149 + SATLiteral(614) + SATLiteral(629)))
629 5324 0
614 5324 0
614 629 5323 0
c ((aux1149 - aux1150 + SATLiteral(584))<=0)
5323 -5326 0
5324 -5327 0
-584 -5326 0
-584 5323 -5327 0
-584 5324 -5329 0
c (0<=(aux1149 - aux1150 + SATLiteral(584)))
-5324 5329 0
-5323 5327 0
584 5329 0
584 -5324 5327 0
584 -5323 5326 0
c ((aux1146 + aux1148 - aux1151)<=0)
5320 -5331 0
5321 -5332 0
5314 -5331 0
5314 5320 -5332 0
5314 5321 -5334 0
5315 -5332 0
5315 5320 -5334 0
5315 5321 -5336 0
c (0<=(aux1146 + aux1148 - aux1151))
-5321 5336 0
-5320 5334 0
-5315 5336 0
-5315 -5321 5334 0
-5315 -5320 5332 0
-5314 5334 0
-5314 -5321 5332 0
-5314 -5320 5331 0
c (( - aux1152 + SATLiteral(556) + SATLiteral(676))<=0)
-676 -5338 0
-556 -5338 0
-556 -676 -5339 0
c (0<=( - aux1152 + SATLiteral(556) + SATLiteral(676)))
676 5339 0
556 5339 0
556 676 5338 0
c (( - aux1153 + SATLiteral(571) + SATLiteral(661))<=0)
-661 -5341 0
-571 -5341 0
-571 -661 -5342 0
c (0<=( - aux1153 + SATLiteral(571) + SATLiteral(661)))
661 5342 0
571 5342 0
571 661 5341 0
c (( - aux1154 + SATLiteral(601) + SATLiteral(646))<=0)
-646 -5344 0
-601 -5344 0
-601 -646 -5345 0
c (0<=( - aux1154 + SATLiteral(601) + SATLiteral(646)))
646 5345 0
601 5345 0
601 646 5344 0
c (( - aux1155 + SATLiteral(616) + SATLiteral(631))<=0)
-631 -5347 0
-616 -5347 0
-616 -631 -5348 0
c (0<=( - aux1155 + SATLiteral(616) + SATLiteral(631)))
631 5348 0
616 5348 0
616 631 5347 0
c ((aux1155 - aux1156 + SATLiteral(586))<=0)
5347 -5350 0
5348 -5351 0
-586 -5350 0
-586 5347 -5351 0
-586 5348 -5353 0
c (0<=(aux1155 - aux1156 + SATLiteral(586)))
-5348 5353 0
-5347 5351 0
586 5353 0
586 -5348 5351 0
586 -5347 5350 0
c ((aux1152 + aux1154 - aux1157)<=0)
5344 -5355 0
5345 -5356 0
5338 -5355 0
5338 5344 -5356 0
5338 5345 -5358 0
5339 -5356 0
5339 5344 -5358 0
5339 5345 -5360 0
c (0<=(aux1152 + aux1154 - aux1157))
-5345 5360 0
-5344 5358 0
-5339 5360 0
-5339 -5345 5358 0
-5339 -5344 5356 0
-5338 5358 0
-5338 -5345 5356 0
-5338 -5344 5355 0
c (( - aux1158 + SATLiteral(-555) + SATLiteral(-675))<=0)
675 -5362 0
555 -5362 0
555 675 -5363 0
c (0<=( - aux1158 + SATLiteral(-555) + SATLiteral(-675)))
-675 5363 0
-555 5363 0
-555 -675 5362 0
c (( - aux1159 + SATLiteral(-570) + SATLiteral(-660))<=0)
660 -5365 0
570 -5365 0
570 660 -5366 0
c (0<=( - aux1159 + SATLiteral(-570) + SATLiteral(-660)))
-660 5366 0
-570 5366 0
-570 -660 5365 0
c (( - aux1160 + SATLiteral(-600) + SATLiteral(-645))<=0)
645 -5368 0
600 -5368 0
600 645 -5369 0
c (0<=( - aux1160 + SATLiteral(-600) + SATLiteral(-645)))
-645 5369 0
-600 5369 0
-600 -645 5368 0
c (( - aux1161 + SATLiteral(-615) + SATLiteral(-630))<=0)
630 -5371 0
615 -5371 0
615 630 -5372 0
c (0<=( - aux1161 + SATLiteral(-615) + SATLiteral(-630)))
-630 5372 0
-615 5372 0
-615 -630 5371 0
c ((aux1161 - aux1162 + SATLiteral(-585))<=0)
5371 -5374 0
5372 -5375 0
585 -5374 0
585 5371 -5375 0
585 5372 -5377 0
c (0<=(aux1161 - aux1162 + SATLiteral(-585)))
-5372 5377 0
-5371 5375 0
-585 5377 0
-585 -5372 5375 0
-585 -5371 5374 0
c ((aux1158 + aux1160 - aux1163)<=0)
5368 -5379 0
5369 -5380 0
5362 -5379 0
5362 5368 -5380 0
5362 5369 -5382 0
5363 -5380 0
5363 5368 -5382 0
5363 5369 -5384 0
c (0<=(aux1158 + aux1160 - aux1163))
-5369 5384 0
-5368 5382 0
-5363 5384 0
-5363 -5369 5382 0
-5363 -5368 5380 0
-5362 5382 0
-5362 -5369 5380 0
-5362 -5368 5379 0
c ((SATLiteral(677) + SATLiteral(797) - aux1164)<=0)
-797 -5386 0
-677 -5386 0
-677 -797 -5387 0
c (0<=(SATLiteral(677) + SATLiteral(797) - aux1164))
797 5387 0
677 5387 0
677 797 5386 0
c ((SATLiteral(692) + SATLiteral(782) - aux1165)<=0)
-782 -5389 0
-692 -5389 0
-692 -782 -5390 0
c (0<=(SATLiteral(692) + SATLiteral(782) - aux1165))
782 5390 0
692 5390 0
692 782 5389 0
c ((SATLiteral(722) + SATLiteral(767) - aux1166)<=0)
-767 -5392 0
-722 -5392 0
-722 -767 -5393 0
c (0<=(SATLiteral(722) + SATLiteral(767) - aux1166))
767 5393 0
722 5393 0
722 767 5392 0
c ((SATLiteral(737) + SATLiteral(752) - aux1167)<=0)
-752 -5395 0
-737 -5395 0
-737 -752 -5396 0
c (0<=(SATLiteral(737) + SATLiteral(752) - aux1167))
752 5396 0
737 5396 0
737 752 5395 0
c ((SATLiteral(707) + aux1167 - aux1168)<=0)
5395 -5398 0
5396 -5399 0
-707 -5398 0
-707 5395 -5399 0
-707 5396 -5401 0
c (0<=(SATLiteral(707) + aux1167 - aux1168))
-5396 5401 0
-5395 5399 0
707 5401 0
707 -5396 5399 0
707 -5395 5398 0
c ((aux1164 + aux1166 - aux1169)<=0)
5392 -5403 0
5393 -5404 0
5386 -5403 0
5386 5392 -5404 0
5386 5393 -5406 0
5387 -5404 0
5387 5392 -5406 0
5387 5393 -5408 0
c (0<=(aux1164 + aux1166 - aux1169))
-5393 5408 0
-5392 5406 0
-5387 5408 0
-5387 -5393 5406 0
-5387 -5392 5404 0
-5386 5406 0
-5386 -5393 5404 0
-5386 -5392 5403 0
c ((SATLiteral(679) + SATLiteral(799) - aux1170)<=0)
-799 -5410 0
-679 -5410 0
-679 -799 -5411 0
c (0<=(SATLiteral(679) + SATLiteral(799) - aux1170))
799 5411 0
679 5411 0
679 799 5410 0
c ((SATLiteral(694) + SATLiteral(784) - aux1171)<=0)
-784 -5413 0
-694 -5413 0
-694 -784 -5414 0
c (0<=(SATLiteral(694) + SATLiteral(784) - aux1171))
784 5414 0
694 5414 0
694 784 5413 0
c ((SATLiteral(724) + SATLiteral(769) - aux1172)<=0)
-769 -5416 0
-724 -5416 0
-724 -769 -5417 0
c (0<=(SATLiteral(724) + SATLiteral(769) - aux1172))
769 5417 0
724 5417 0
724 769 5416 0
c ((SATLiteral(739) + SATLiteral(754) - aux1173)<=0)
-754 -5419 0
-739 -5419 0
-739 -754 -5420 0
c (0<=(SATLiteral(739) + SATLiteral(754) - aux1173))
754 5420 0
739 5420 0
739 754 5419 0
c ((SATLiteral(709) + aux1173 - aux1174)<=0)
5419 -5422 0
5420 -5423 0
-709 -5422 0
-709 5419 -5423 0
-709 5420 -5425 0
c (0<=(SATLiteral(709) + aux1173 - aux1174))
-5420 5425 0
-5419 5423 0
709 5425 0
709 -5420 5423 0
709 -5419 5422 0
c ((aux1170 + aux1172 - aux1175)<=0)
5416 -5427 0
5417 -5428 0
5410 -5427 0
5410 5416 -5428 0
5410 5417 -5430 0
5411 -5428 0
5411 5416 -5430 0
5411 5417 -5432 0
c (0<=(aux1170 + aux1172 - aux1175))
-5417 5432 0
-5416 5430 0
-5411 5432 0
-5411 -5417 5430 0
-5411 -5416 5428 0
-5410 5430 0
-5410 -5417 5428 0
-5410 -5416 5427 0
c ((SATLiteral(681) + SATLiteral(801) - aux1176)<=0)
-801 -5434 0
-681 -5434 0
-681 -801 -5435 0
c (0<=(SATLiteral(681) + SATLiteral(801) - aux1176))
801 5435 0
681 5435 0
681 801 5434 0
c ((SATLiteral(696) + SATLiteral(786) - aux1177)<=0)
-786 -5437 0
-696 -5437 0
-696 -786 -5438 0
c (0<=(SATLiteral(696) + SATLiteral(786) - aux1177))
786 5438 0
696 5438 0
696 786 5437 0
c ((SATLiteral(726) + SATLiteral(771) - aux1178)<=0)
-771 -5440 0
-726 -5440 0
-726 -771 -5441 0
c (0<=(SATLiteral(726) + SATLiteral(771) - aux1178))
771 5441 0
726 5441 0
726 771 5440 0
c ((SATLiteral(741) + SATLiteral(756) - aux1179)<=0)
-756 -5443 0
-741 -5443 0
-741 -756 -5444 0
c (0<=(SATLiteral(741) + SATLiteral(756) - aux1179))
756 5444 0
741 5444 0
741 756 5443 0
c ((SATLiteral(711) + aux1179 - aux1180)<=0)
5443 -5446 0
5444 -5447 0
-711 -5446 0
-711 5443 -5447 0
-711 5444 -5449 0
c (0<=(SATLiteral(711) + aux1179 - aux1180))
-5444 5449 0
-5443 5447 0
711 5449 0
711 -5444 5447 0
711 -5443 5446 0
c ((aux1176 + aux1178 - aux1181)<=0)
5440 -5451 0
5441 -5452 0
5434 -5451 0
5434 5440 -5452 0
5434 5441 -5454 0
5435 -5452 0
5435 5440 -5454 0
5435 5441 -5456 0
c (0<=(aux1176 + aux1178 - aux1181))
-5441 5456 0
-5440 5454 0
-5435 5456 0
-5435 -5441 5454 0
-5435 -5440 5452 0
-5434 5454 0
-5434 -5441 5452 0
-5434 -5440 5451 0
c ((SATLiteral(683) + SATLiteral(803) - aux1182)<=0)
-803 -5458 0
-683 -5458 0
-683 -803 -5459 0
c (0<=(SATLiteral(683) + SATLiteral(803) - aux1182))
803 5459 0
683 5459 0
683 803 5458 0
c ((SATLiteral(698) + SATLiteral(788) - aux1183)<=0)
-788 -5461 0
-698 -5461 0
-698 -788 -5462 0
c (0<=(SATLiteral(698) + SATLiteral(788) - aux1183))
788 5462 0
698 5462 0
698 788 5461 0
c ((SATLiteral(728) + SATLiteral(773) - aux1184)<=0)
-773 -5464 0
-728 -5464 0
-728 -773 -5465 0
c (0<=(SATLiteral(728) + SATLiteral(773) - aux1184))
773 5465 0
728 5465 0
728 773 5464 0
c ((SATLiteral(743) + SATLiteral(758) - aux1185)<=0)
-758 -5467 0
-743 -5467 0
-743 -758 -5468 0
c (0<=(SATLiteral(743) + SATLiteral(758) - aux1185))
758 5468 0
743 5468 0
743 758 5467 0
c ((SATLiteral(713) + aux1185 - aux1186)<=0)
5467 -5470 0
5468 -5471 0
-713 -5470 0
-713 5467 -5471 0
-713 5468 -5473 0
c (0<=(SATLiteral(713) + aux1185 - aux1186))
-5468 5473 0
-5467 5471 0
713 5473 0
713 -5468 5471 0
713 -5467 5470 0
c ((aux1182 + aux1184 - aux1187)<=0)
5464 -5475 0
5465 -5476 0
5458 -5475 0
5458 5464 -5476 0
5458 5465 -5478 0
5459 -5476 0
5459 5464 -5478 0
5459 5465 -5480 0
c (0<=(aux1182 + aux1184 - aux1187))
-5465 5480 0
-5464 5478 0
-5459 5480 0
-5459 -5465 5478 0
-5459 -5464 5476 0
-5458 5478 0
-5458 -5465 5476 0
-5458 -5464 5475 0
c ((SATLiteral(685) + SATLiteral(805) - aux1188)<=0)
-805 -5482 0
-685 -5482 0
-685 -805 -5483 0
c (0<=(SATLiteral(685) + SATLiteral(805) - aux1188))
805 5483 0
685 5483 0
685 805 5482 0
c ((SATLiteral(700) + SATLiteral(790) - aux1189)<=0)
-790 -5485 0
-700 -5485 0
-700 -790 -5486 0
c (0<=(SATLiteral(700) + SATLiteral(790) - aux1189))
790 5486 0
700 5486 0
700 790 5485 0
c ((SATLiteral(730) + SATLiteral(775) - aux1190)<=0)
-775 -5488 0
-730 -5488 0
-730 -775 -5489 0
c (0<=(SATLiteral(730) + SATLiteral(775) - aux1190))
775 5489 0
730 5489 0
730 775 5488 0
c ((SATLiteral(745) + SATLiteral(760) - aux1191)<=0)
-760 -5491 0
-745 -5491 0
-745 -760 -5492 0
c (0<=(SATLiteral(745) + SATLiteral(760) - aux1191))
760 5492 0
745 5492 0
745 760 5491 0
c ((SATLiteral(715) + aux1191 - aux1192)<=0)
5491 -5494 0
5492 -5495 0
-715 -5494 0
-715 5491 -5495 0
-715 5492 -5497 0
c (0<=(SATLiteral(715) + aux1191 - aux1192))
-5492 5497 0
-5491 5495 0
715 5497 0
715 -5492 5495 0
715 -5491 5494 0
c ((aux1188 + aux1190 - aux1193)<=0)
5488 -5499 0
5489 -5500 0
5482 -5499 0
5482 5488 -5500 0
5482 5489 -5502 0
5483 -5500 0
5483 5488 -5502 0
5483 5489 -5504 0
c (0<=(aux1188 + aux1190 - aux1193))
-5489 5504 0
-5488 5502 0
-5483 5504 0
-5483 -5489 5502 0
-5483 -5488 5500 0
-5482 5502 0
-5482 -5489 5500 0
-5482 -5488 5499 0
c ((SATLiteral(687) + SATLiteral(807) - aux1194)<=0)
-807 -5506 0
-687 -5506 0
-687 -807 -5507 0
c (0<=(SATLiteral(687) + SATLiteral(807) - aux1194))
807 5507 0
687 5507 0
687 807 5506 0
c ((SATLiteral(702) + SATLiteral(792) - aux1195)<=0)
-792 -5509 0
-702 -5509 0
-702 -792 -5510 0
c (0<=(SATLiteral(702) + SATLiteral(792) - aux1195))
792 5510 0
702 5510 0
702 792 5509 0
c ((SATLiteral(732) + SATLiteral(777) - aux1196)<=0)
-777 -5512 0
-732 -5512 0
-732 -777 -5513 0
c (0<=(SATLiteral(732) + SATLiteral(777) - aux1196))
777 5513 0
732 5513 0
732 777 5512 0
c ((SATLiteral(747) + SATLiteral(762) - aux1197)<=0)
-762 -5515 0
-747 -5515 0
-747 -762 -5516 0
c (0<=(SATLiteral(747) + SATLiteral(762) - aux1197))
762 5516 0
747 5516 0
747 762 5515 0
c ((SATLiteral(717) + aux1197 - aux1198)<=0)
5515 -5518 0
5516 -5519 0
-717 -5518 0
-717 5515 -5519 0
-717 5516 -5521 0
c (0<=(SATLiteral(717) + aux1197 - aux1198))
-5516 5521 0
-5515 5519 0
717 5521 0
717 -5516 5519 0
717 -5515 5518 0
c ((aux1194 + aux1196 - aux1199)<=0)
5512 -5523 0
5513 -5524 0
5506 -5523 0
5506 5512 -5524 0
5506 5513 -5526 0
5507 -5524 0
5507 5512 -5526 0
5507 5513 -5528 0
c (0<=(aux1194 + aux1196 - aux1199))
-5513 5528 0
-5512 5526 0
-5507 5528 0
-5507 -5513 5526 0
-5507 -5512 5524 0
-5506 5526 0
-5506 -5513 5524 0
-5506 -5512 5523 0
c ((SATLiteral(689) + SATLiteral(809) - aux1200)<=0)
-809 -5530 0
-689 -5530 0
-689 -809 -5531 0
c (0<=(SATLiteral(689) + SATLiteral(809) - aux1200))
809 5531 0
689 5531 0
689 809 5530 0
c ((SATLiteral(704) + SATLiteral(794) - aux1201)<=0)
-794 -5533 0
-704 -5533 0
-704 -794 -5534 0
c (0<=(SATLiteral(704) + SATLiteral(794) - aux1201))
794 5534 0
704 5534 0
704 794 5533 0
c ((SATLiteral(734) + SATLiteral(779) - aux1202)<=0)
-779 -5536 0
-734 -5536 0
-734 -779 -5537 0
c (0<=(SATLiteral(734) + SATLiteral(779) - aux1202))
779 5537 0
734 5537 0
734 779 5536 0
c ((SATLiteral(749) + SATLiteral(764) - aux1203)<=0)
-764 -5539 0
-749 -5539 0
-749 -764 -5540 0
c (0<=(SATLiteral(749) + SATLiteral(764) - aux1203))
764 5540 0
749 5540 0
749 764 5539 0
c ((SATLiteral(719) + aux1203 - aux1204)<=0)
5539 -5542 0
5540 -5543 0
-719 -5542 0
-719 5539 -5543 0
-719 5540 -5545 0
c (0<=(SATLiteral(719) + aux1203 - aux1204))
-5540 5545 0
-5539 5543 0
719 5545 0
719 -5540 5543 0
719 -5539 5542 0
c ((aux1200 + aux1202 - aux1205)<=0)
5536 -5547 0
5537 -5548 0
5530 -5547 0
5530 5536 -5548 0
5530 5537 -5550 0
5531 -5548 0
5531 5536 -5550 0
5531 5537 -5552 0
c (0<=(aux1200 + aux1202 - aux1205))
-5537 5552 0
-5536 5550 0
-5531 5552 0
-5531 -5537 5550 0
-5531 -5536 5548 0
-5530 5550 0
-5530 -5537 5548 0
-5530 -5536 5547 0
c ((SATLiteral(691) + SATLiteral(811) - aux1206)<=0)
-811 -5554 0
-691 -5554 0
-691 -811 -5555 0
c (0<=(SATLiteral(691) + SATLiteral(811) - aux1206))
811 5555 0
691 5555 0
691 811 5554 0
c ((SATLiteral(706) + SATLiteral(796) - aux1207)<=0)
-796 -5557 0
-706 -5557 0
-706 -796 -5558 0
c (0<=(SATLiteral(706) + SATLiteral(796) - aux1207))
796 5558 0
706 5558 0
706 796 5557 0
c ((SATLiteral(736) + SATLiteral(781) - aux1208)<=0)
-781 -5560 0
-736 -5560 0
-736 -781 -5561 0
c (0<=(SATLiteral(736) + SATLiteral(781) - aux1208))
781 5561 0
736 5561 0
736 781 5560 0
c ((SATLiteral(751) + SATLiteral(766) - aux1209)<=0)
-766 -5563 0
-751 -5563 0
-751 -766 -5564 0
c (0<=(SATLiteral(751) + SATLiteral(766) - aux1209))
766 5564 0
751 5564 0
751 766 5563 0
c ((SATLiteral(721) + aux1209 - aux1210)<=0)
5563 -5566 0
5564 -5567 0
-721 -5566 0
-721 5563 -5567 0
-721 5564 -5569 0
c (0<=(SATLiteral(721) + aux1209 - aux1210))
-5564 5569 0
-5563 5567 0
721 5569 0
721 -5564 5567 0
721 -5563 5566 0
c ((aux1206 + aux1208 - aux1211)<=0)
5560 -5571 0
5561 -5572 0
5554 -5571 0
5554 5560 -5572 0
5554 5561 -5574 0
5555 -5572 0
5555 5560 -5574 0
5555 5561 -5576 0
c (0<=(aux1206 + aux1208 - aux1211))
-5561 5576 0
-5560 5574 0
-5555 5576 0
-5555 -5561 5574 0
-5555 -5560 5572 0
-5554 5574 0
-5554 -5561 5572 0
-5554 -5560 5571 0
c ((SATLiteral(-690) + SATLiteral(-810) - aux1212)<=0)
810 -5578 0
690 -5578 0
690 810 -5579 0
c (0<=(SATLiteral(-690) + SATLiteral(-810) - aux1212))
-810 5579 0
-690 5579 0
-690 -810 5578 0
c ((SATLiteral(-705) + SATLiteral(-795) - aux1213)<=0)
795 -5581 0
705 -5581 0
705 795 -5582 0
c (0<=(SATLiteral(-705) + SATLiteral(-795) - aux1213))
-795 5582 0
-705 5582 0
-705 -795 5581 0
c ((SATLiteral(-735) + SATLiteral(-780) - aux1214)<=0)
780 -5584 0
735 -5584 0
735 780 -5585 0
c (0<=(SATLiteral(-735) + SATLiteral(-780) - aux1214))
-780 5585 0
-735 5585 0
-735 -780 5584 0
c ((SATLiteral(-750) + SATLiteral(-765) - aux1215)<=0)
765 -5587 0
750 -5587 0
750 765 -5588 0
c (0<=(SATLiteral(-750) + SATLiteral(-765) - aux1215))
-765 5588 0
-750 5588 0
-750 -765 5587 0
c ((SATLiteral(-720) + aux1215 - aux1216)<=0)
5587 -5590 0
5588 -5591 0
720 -5590 0
720 5587 -5591 0
720 5588 -5593 0
c (0<=(SATLiteral(-720) + aux1215 - aux1216))
-5588 5593 0
-5587 5591 0
-720 5593 0
-720 -5588 5591 0
-720 -5587 5590 0
c ((aux1212 + aux1214 - aux1217)<=0)
5584 -5595 0
5585 -5596 0
5578 -5595 0
5578 5584 -5596 0
5578 5585 -5598 0
5579 -5596 0
5579 5584 -5598 0
5579 5585 -5600 0
c (0<=(aux1212 + aux1214 - aux1217))
-5585 5600 0
-5584 5598 0
-5579 5600 0
-5579 -5585 5598 0
-5579 -5584 5596 0
-5578 5598 0
-5578 -5585 5596 0
-5578 -5584 5595 0
c (( - aux1218 + SATLiteral(812) + SATLiteral(932))<=0)
-932 -5602 0
-812 -5602 0
-812 -932 -5603 0
c (0<=( - aux1218 + SATLiteral(812) + SATLiteral(932)))
932 5603 0
812 5603 0
812 932 5602 0
c (( - aux1219 + SATLiteral(827) + SATLiteral(917))<=0)
-917 -5605 0
-827 -5605 0
-827 -917 -5606 0
c (0<=( - aux1219 + SATLiteral(827) + SATLiteral(917)))
917 5606 0
827 5606 0
827 917 5605 0
c (( - aux1220 + SATLiteral(857) + SATLiteral(902))<=0)
-902 -5608 0
-857 -5608 0
-857 -902 -5609 0
c (0<=( - aux1220 + SATLiteral(857) + SATLiteral(902)))
902 5609 0
857 5609 0
857 902 5608 0
c (( - aux1221 + SATLiteral(872) + SATLiteral(887))<=0)
-887 -5611 0
-872 -5611 0
-872 -887 -5612 0
c (0<=( - aux1221 + SATLiteral(872) + SATLiteral(887)))
887 5612 0
872 5612 0
872 887 5611 0
c ((aux1221 - aux1222 + SATLiteral(842))<=0)
5611 -5614 0
5612 -5615 0
-842 -5614 0
-842 5611 -5615 0
-842 5612 -5617 0
c (0<=(aux1221 - aux1222 + SATLiteral(842)))
-5612 5617 0
-5611 5615 0
842 5617 0
842 -5612 5615 0
842 -5611 5614 0
c ((aux1218 + aux1220 - aux1223)<=0)
5608 -5619 0
5609 -5620 0
5602 -5619 0
5602 5608 -5620 0
5602 5609 -5622 0
5603 -5620 0
5603 5608 -5622 0
5603 5609 -5624 0
c (0<=(aux1218 + aux1220 - aux1223))
-5609 5624 0
-5608 5622 0
-5603 5624 0
-5603 -5609 5622 0
-5603 -5608 5620 0
-5602 5622 0
-5602 -5609 5620 0
-5602 -5608 5619 0
c (( - aux1224 + SATLiteral(814) + SATLiteral(934))<=0)
-934 -5626 0
-814 -5626 0
-814 -934 -5627 0
c (0<=( - aux1224 + SATLiteral(814) + SATLiteral(934)))
934 5627 0
814 5627 0
814 934 5626 0
c (( - aux1225 + SATLiteral(829) + SATLiteral(919))<=0)
-919 -5629 0
-829 -5629 0
-829 -919 -5630 0
c (0<=( - aux1225 + SATLiteral(829) + SATLiteral(919)))
919 5630 0
829 5630 0
829 919 5629 0
c (( - aux1226 + SATLiteral(859) + SATLiteral(904))<=0)
-904 -5632 0
-859 -5632 0
-859 -904 -5633 0
c (0<=( - aux1226 + SATLiteral(859) + SATLiteral(904)))
904 5633 0
859 5633 0
859 904 5632 0
c (( - aux1227 + SATLiteral(874) + SATLiteral(889))<=0)
-889 -5635 0
-874 -5635 0
-874 -889 -5636 0
c (0<=( - aux1227 + SATLiteral(874) + SATLiteral(889)))
889 5636 0
874 5636 0
874 889 5635 0
c ((aux1227 - aux1228 + SATLiteral(844))<=0)
5635 -5638 0
5636 -5639 0
-844 -5638 0
-844 5635 -5639 0
-844 5636 -5641 0
c (0<=(aux1227 - aux1228 + SATLiteral(844)))
-5636 5641 0
-5635 5639 0
844 5641 0
844 -5636 5639 0
844 -5635 5638 0
c ((aux1224 + aux1226 - aux1229)<=0)
5632 -5643 0
5633 -5644 0
5626 -5643 0
5626 5632 -5644 0
5626 5633 -5646 0
5627 -5644 0
5627 5632 -5646 0
5627 5633 -5648 0
c (0<=(aux1224 + aux1226 - aux1229))
-5633 5648 0
-5632 5646 0
-5627 5648 0
-5627 -5633 5646 0
-5627 -5632 5644 0
-5626 5646 0
-5626 -5633 5644 0
-5626 -5632 5643 0
c (( - aux1230 + SATLiteral(816) + SATLiteral(936))<=0)
-936 -5650 0
-816 -5650 0
-816 -936 -5651 0
c (0<=( - aux1230 + SATLiteral(816) + SATLiteral(936)))
936 5651 0
816 5651 0
816 936 5650 0
c (( - aux1231 + SATLiteral(831) + SATLiteral(921))<=0)
-921 -5653 0
-831 -5653 0
-831 -921 -5654 0
c (0<=( - aux1231 + SATLiteral(831) + SATLiteral(921)))
921 5654 0
831 5654 0
831 921 5653 0
c (( - aux1232 + SATLiteral(861) + SATLiteral(906))<=0)
-906 -5656 0
-861 -5656 0
-861 -906 -5657 0
c (0<=( - aux1232 + SATLiteral(861) + SATLiteral(906)))
906 5657 0
861 5657 0
861 906 5656 0
c (( - aux1233 + SATLiteral(876) + SATLiteral(891))<=0)
-891 -5659 0
-876 -5659 0
-876 -891 -5660 0
c (0<=( - aux1233 + SATLiteral(876) + SATLiteral(891)))
891 5660 0
876 5660 0
876 891 5659 0
c ((aux1233 - aux1234 + SATLiteral(846))<=0)
5659 -5662 0
5660 -5663 0
-846 -5662 0
-846 5659 -5663 0
-846 5660 -5665 0
c (0<=(aux1233 - aux1234 + SATLiteral(846)))
-5660 5665 0
-5659 5663 0
846 5665 0
846 -5660 5663 0
846 -5659 5662 0
c ((aux1230 + aux1232 - aux1235)<=0)
5656 -5667 0
5657 -5668 0
5650 -5667 0
5650 5656 -5668 0
5650 5657 -5670 0
5651 -5668 0
5651 5656 -5670 0
5651 5657 -5672 0
c (0<=(aux1230 + aux1232 - aux1235))
-5657 5672 0
-5656 5670 0
-5651 5672 0
-5651 -5657 5670 0
-5651 -5656 5668 0
-5650 5670 0
-5650 -5657 5668 0
-5650 -5656 5667 0
c (( - aux1236 + SATLiteral(818) + SATLiteral(938))<=0)
-938 -5674 0
-818 -5674 0
-818 -938 -5675 0
c (0<=( - aux1236 + SATLiteral(818) + SATLiteral(938)))
938 5675 0
818 5675 0
818 938 5674 0
c (( - aux1237 + SATLiteral(833) + SATLiteral(923))<=0)
-923 -5677 0
-833 -5677 0
-833 -923 -5678 0
c (0<=( - aux1237 + SATLiteral(833) + SATLiteral(923)))
923 5678 0
833 5678 0
833 923 5677 0
c (( - aux1238 + SATLiteral(863) + SATLiteral(908))<=0)
-908 -5680 0
-863 -5680 0
-863 -908 -5681 0
c (0<=( - aux1238 + SATLiteral(863) + SATLiteral(908)))
908 5681 0
863 5681 0
863 908 5680 0
c (( - aux1239 + SATLiteral(878) + SATLiteral(893))<=0)
-893 -5683 0
-878 -5683 0
-878 -893 -5684 0
c (0<=( - aux1239 + SATLiteral(878) + SATLiteral(893)))
893 5684 0
878 5684 0
878 893 5683 0
c ((aux1239 - aux1240 + SATLiteral(848))<=0)
5683 -5686 0
5684 -5687 0
-848 -5686 0
-848 5683 -5687 0
-848 5684 -5689 0
c (0<=(aux1239 - aux1240 + SATLiteral(848)))
-5684 5689 0
-5683 5687 0
848 5689 0
848 -5684 5687 0
848 -5683 5686 0
c ((aux1236 + aux1238 - aux1241)<=0)
5680 -5691 0
5681 -5692 0
5674 -5691 0
5674 5680 -5692 0
5674 5681 -5694 0
5675 -5692 0
5675 5680 -5694 0
5675 5681 -5696 0
c (0<=(aux1236 + aux1238 - aux1241))
-5681 5696 0
-5680 5694 0
-5675 5696 0
-5675 -5681 5694 0
-5675 -5680 5692 0
-5674 5694 0
-5674 -5681 5692 0
-5674 -5680 5691 0
c (( - aux1242 + SATLiteral(820) + SATLiteral(940))<=0)
-940 -5698 0
-820 -5698 0
-820 -940 -5699 0
c (0<=( - aux1242 + SATLiteral(820) + SATLiteral(940)))
940 5699 0
820 5699 0
820 940 5698 0
c (( - aux1243 + SATLiteral(835) + SATLiteral(925))<=0)
-925 -5701 0
-835 -5701 0
-835 -925 -5702 0
c (0<=( - aux1243 + SATLiteral(835) + SATLiteral(925)))
925 5702 0
835 5702 0
835 925 5701 0
c (( - aux1244 + SATLiteral(865) + SATLiteral(910))<=0)
-910 -5704 0
-865 -5704 0
-865 -910 -5705 0
c (0<=( - aux1244 + SATLiteral(865) + SATLiteral(910)))
910 5705 0
865 5705 0
865 910 5704 0
c (( - aux1245 + SATLiteral(880) + SATLiteral(895))<=0)
-895 -5707 0
-880 -5707 0
-880 -895 -5708 0
c (0<=( - aux1245 + SATLiteral(880) + SATLiteral(895)))
895 5708 0
880 5708 0
880 895 5707 0
c ((aux1245 - aux1246 + SATLiteral(850))<=0)
5707 -5710 0
5708 -5711 0
-850 -5710 0
-850 5707 -5711 0
-850 5708 -5713 0
c (0<=(aux1245 - aux1246 + SATLiteral(850)))
-5708 5713 0
-5707 5711 0
850 5713 0
850 -5708 5711 0
850 -5707 5710 0
c ((aux1242 + aux1244 - aux1247)<=0)
5704 -5715 0
5705 -5716 0
5698 -5715 0
5698 5704 -5716 0
5698 5705 -5718 0
5699 -5716 0
5699 5704 -5718 0
5699 5705 -5720 0
c (0<=(aux1242 + aux1244 - aux1247))
-5705 5720 0
-5704 5718 0
-5699 5720 0
-5699 -5705 5718 0
-5699 -5704 5716 0
-5698 5718 0
-5698 -5705 5716 0
-5698 -5704 5715 0
c (( - aux1248 + SATLiteral(822) + SATLiteral(942))<=0)
-942 -5722 0
-822 -5722 0
-822 -942 -5723 0
c (0<=( - aux1248 + SATLiteral(822) + SATLiteral(942)))
942 5723 0
822 5723 0
822 942 5722 0
c (( - aux1249 + SATLiteral(837) + SATLiteral(927))<=0)
-927 -5725 0
-837 -5725 0
-837 -927 -5726 0
c (0<=( - aux1249 + SATLiteral(837) + SATLiteral(927)))
927 5726 0
837 5726 0
837 927 5725 0
c (( - aux1250 + SATLiteral(867) + SATLiteral(912))<=0)
-912 -5728 0
-867 -5728 0
-867 -912 -5729 0
c (0<=( - aux1250 + SATLiteral(867) + SATLiteral(912)))
912 5729 0
867 5729 0
867 912 5728 0
c (( - aux1251 + SATLiteral(882) + SATLiteral(897))<=0)
-897 -5731 0
-882 -5731 0
-882 -897 -5732 0
c (0<=( - aux1251 + SATLiteral(882) + SATLiteral(897)))
897 5732 0
882 5732 0
882 897 5731 0
c ((aux1251 - aux1252 + SATLiteral(852))<=0)
5731 -5734 0
5732 -5735 0
-852 -5734 0
-852 5731 -5735 0
-852 5732 -5737 0
c (0<=(aux1251 - aux1252 + SATLiteral(852)))
-5732 5737 0
-5731 5735 0
852 5737 0
852 -5732 5735 0
852 -5731 5734 0
c ((aux1248 + aux1250 - aux1253)<=0)
5728 -5739 0
5729 -5740 0
5722 -5739 0
5722 5728 -5740 0
5722 5729 -5742 0
5723 -5740 0
5723 5728 -5742 0
5723 5729 -5744 0
c (0<=(aux1248 + aux1250 - aux1253))
-5729 5744 0
-5728 5742 0
-5723 5744 0
-5723 -5729 5742 0
-5723 -5728 5740 0
-5722 5742 0
-5722 -5729 5740 0
-5722 -5728 5739 0
c (( - aux1254 + SATLiteral(824) + SATLiteral(944))<=0)
-944 -5746 0
-824 -5746 0
-824 -944 -5747 0
c (0<=( - aux1254 + SATLiteral(824) + SATLiteral(944)))
944 5747 0
824 5747 0
824 944 5746 0
c (( - aux1255 + SATLiteral(839) + SATLiteral(929))<=0)
-929 -5749 0
-839 -5749 0
-839 -929 -5750 0
c (0<=( - aux1255 + SATLiteral(839) + SATLiteral(929)))
929 5750 0
839 5750 0
839 929 5749 0
c (( - aux1256 + SATLiteral(869) + SATLiteral(914))<=0)
-914 -5752 0
-869 -5752 0
-869 -914 -5753 0
c (0<=( - aux1256 + SATLiteral(869) + SATLiteral(914)))
914 5753 0
869 5753 0
869 914 5752 0
c (( - aux1257 + SATLiteral(884) + SATLiteral(899))<=0)
-899 -5755 0
-884 -5755 0
-884 -899 -5756 0
c (0<=( - aux1257 + SATLiteral(884) + SATLiteral(899)))
899 5756 0
884 5756 0
884 899 5755 0
c ((aux1257 - aux1258 + SATLiteral(854))<=0)
5755 -5758 0
5756 -5759 0
-854 -5758 0
-854 5755 -5759 0
-854 5756 -5761 0
c (0<=(aux1257 - aux1258 + SATLiteral(854)))
-5756 5761 0
-5755 5759 0
854 5761 0
854 -5756 5759 0
854 -5755 5758 0
c ((aux1254 + aux1256 - aux1259)<=0)
5752 -5763 0
5753 -5764 0
5746 -5763 0
5746 5752 -5764 0
5746 5753 -5766 0
5747 -5764 0
5747 5752 -5766 0
5747 5753 -5768 0
c (0<=(aux1254 + aux1256 - aux1259))
-5753 5768 0
-5752 5766 0
-5747 5768 0
-5747 -5753 5766 0
-5747 -5752 5764 0
-5746 5766 0
-5746 -5753 5764 0
-5746 -5752 5763 0
c (( - aux1260 + SATLiteral(826) + SATLiteral(946))<=0)
-946 -5770 0
-826 -5770 0
-826 -946 -5771 0
c (0<=( - aux1260 + SATLiteral(826) + SATLiteral(946)))
946 5771 0
826 5771 0
826 946 5770 0
c (( - aux1261 + SATLiteral(841) + SATLiteral(931))<=0)
-931 -5773 0
-841 -5773 0
-841 -931 -5774 0
c (0<=( - aux1261 + SATLiteral(841) + SATLiteral(931)))
931 5774 0
841 5774 0
841 931 5773 0
c (( - aux1262 + SATLiteral(871) + SATLiteral(916))<=0)
-916 -5776 0
-871 -5776 0
-871 -916 -5777 0
c (0<=( - aux1262 + SATLiteral(871) + SATLiteral(916)))
916 5777 0
871 5777 0
871 916 5776 0
c (( - aux1263 + SATLiteral(886) + SATLiteral(901))<=0)
-901 -5779 0
-886 -5779 0
-886 -901 -5780 0
c (0<=( - aux1263 + SATLiteral(886) + SATLiteral(901)))
901 5780 0
886 5780 0
886 901 5779 0
c ((aux1263 - aux1264 + SATLiteral(856))<=0)
5779 -5782 0
5780 -5783 0
-856 -5782 0
-856 5779 -5783 0
-856 5780 -5785 0
c (0<=(aux1263 - aux1264 + SATLiteral(856)))
-5780 5785 0
-5779 5783 0
856 5785 0
856 -5780 5783 0
856 -5779 5782 0
c ((aux1260 + aux1262 - aux1265)<=0)
5776 -5787 0
5777 -5788 0
5770 -5787 0
5770 5776 -5788 0
5770 5777 -5790 0
5771 -5788 0
5771 5776 -5790 0
5771 5777 -5792 0
c (0<=(aux1260 + aux1262 - aux1265))
-5777 5792 0
-5776 5790 0
-5771 5792 0
-5771 -5777 5790 0
-5771 -5776 5788 0
-5770 5790 0
-5770 -5777 5788 0
-5770 -5776 5787 0
c (( - aux1266 + SATLiteral(-825) + SATLiteral(-945))<=0)
945 -5794 0
825 -5794 0
825 945 -5795 0
c (0<=( - aux1266 + SATLiteral(-825) + SATLiteral(-945)))
-945 5795 0
-825 5795 0
-825 -945 5794 0
c (( - aux1267 + SATLiteral(-840) + SATLiteral(-930))<=0)
930 -5797 0
840 -5797 0
840 930 -5798 0
c (0<=( - aux1267 + SATLiteral(-840) + SATLiteral(-930)))
-930 5798 0
-840 5798 0
-840 -930 5797 0
c (( - aux1268 + SATLiteral(-870) + SATLiteral(-915))<=0)
915 -5800 0
870 -5800 0
870 915 -5801 0
c (0<=( - aux1268 + SATLiteral(-870) + SATLiteral(-915)))
-915 5801 0
-870 5801 0
-870 -915 5800 0
c (( - aux1269 + SATLiteral(-885) + SATLiteral(-900))<=0)
900 -5803 0
885 -5803 0
885 900 -5804 0
c (0<=( - aux1269 + SATLiteral(-885) + SATLiteral(-900)))
-900 5804 0
-885 5804 0
-885 -900 5803 0
c ((aux1269 - aux1270 + SATLiteral(-855))<=0)
5803 -5806 0
5804 -5807 0
855 -5806 0
855 5803 -5807 0
855 5804 -5809 0
c (0<=(aux1269 - aux1270 + SATLiteral(-855)))
-5804 5809 0
-5803 5807 0
-855 5809 0
-855 -5804 5807 0
-855 -5803 5806 0
c ((aux1266 + aux1268 - aux1271)<=0)
5800 -5811 0
5801 -5812 0
5794 -5811 0
5794 5800 -5812 0
5794 5801 -5814 0
5795 -5812 0
5795 5800 -5814 0
5795 5801 -5816 0
c (0<=(aux1266 + aux1268 - aux1271))
-5801 5816 0
-5800 5814 0
-5795 5816 0
-5795 -5801 5814 0
-5795 -5800 5812 0
-5794 5814 0
-5794 -5801 5812 0
-5794 -5800 5811 0
c ((SATLiteral(947) + SATLiteral(1067) - aux1272)<=0)
-1067 -5818 0
-947 -5818 0
-947 -1067 -5819 0
c (0<=(SATLiteral(947) + SATLiteral(1067) - aux1272))
1067 5819 0
947 5819 0
947 1067 5818 0
c ((SATLiteral(962) + SATLiteral(1052) - aux1273)<=0)
-1052 -5821 0
-962 -5821 0
-962 -1052 -5822 0
c (0<=(SATLiteral(962) + SATLiteral(1052) - aux1273))
1052 5822 0
962 5822 0
962 1052 5821 0
c ((SATLiteral(992) + SATLiteral(1037) - aux1274)<=0)
-1037 -5824 0
-992 -5824 0
-992 -1037 -5825 0
c (0<=(SATLiteral(992) + SATLiteral(1037) - aux1274))
1037 5825 0
992 5825 0
992 1037 5824 0
c ((SATLiteral(1007) + SATLiteral(1022) - aux1275)<=0)
-1022 -5827 0
-1007 -5827 0
-1007 -1022 -5828 0
c (0<=(SATLiteral(1007) + SATLiteral(1022) - aux1275))
1022 5828 0
1007 5828 0
1007 1022 5827 0
c ((SATLiteral(977) + aux1275 - aux1276)<=0)
5827 -5830 0
5828 -5831 0
-977 -5830 0
-977 5827 -5831 0
-977 5828 -5833 0
c (0<=(SATLiteral(977) + aux1275 - aux1276))
-5828 5833 0
-5827 5831 0
977 5833 0
977 -5828 5831 0
977 -5827 5830 0
c ((aux1272 + aux1274 - aux1277)<=0)
5824 -5835 0
5825 -5836 0
5818 -5835 0
5818 5824 -5836 0
5818 5825 -5838 0
5819 -5836 0
5819 5824 -5838 0
5819 5825 -5840 0
c (0<=(aux1272 + aux1274 - aux1277))
-5825 5840 0
-5824 5838 0
-5819 5840 0
-5819 -5825 5838 0
-5819 -5824 5836 0
-5818 5838 0
-5818 -5825 5836 0
-5818 -5824 5835 0
c ((SATLiteral(949) + SATLiteral(1069) - aux1278)<=0)
-1069 -5842 0
-949 -5842 0
-949 -1069 -5843 0
c (0<=(SATLiteral(949) + SATLiteral(1069) - aux1278))
1069 5843 0
949 5843 0
949 1069 5842 0
c ((SATLiteral(964) + SATLiteral(1054) - aux1279)<=0)
-1054 -5845 0
-964 -5845 0
-964 -1054 -5846 0
c (0<=(SATLiteral(964) + SATLiteral(1054) - aux1279))
1054 5846 0
964 5846 0
964 1054 5845 0
c ((SATLiteral(994) + SATLiteral(1039) - aux1280)<=0)
-1039 -5848 0
-994 -5848 0
-994 -1039 -5849 0
c (0<=(SATLiteral(994) + SATLiteral(1039) - aux1280))
1039 5849 0
994 5849 0
994 1039 5848 0
c ((SATLiteral(1009) + SATLiteral(1024) - aux1281)<=0)
-1024 -5851 0
-1009 -5851 0
-1009 -1024 -5852 0
c (0<=(SATLiteral(1009) + SATLiteral(1024) - aux1281))
1024 5852 0
1009 5852 0
1009 1024 5851 0
c ((SATLiteral(979) + aux1281 - aux1282)<=0)
5851 -5854 0
5852 -5855 0
-979 -5854 0
-979 5851 -5855 0
-979 5852 -5857 0
c (0<=(SATLiteral(979) + aux1281 - aux1282))
-5852 5857 0
-5851 5855 0
979 5857 0
979 -5852 5855 0
979 -5851 5854 0
c ((aux1278 + aux1280 - aux1283)<=0)
5848 -5859 0
5849 -5860 0
5842 -5859 0
5842 5848 -5860 0
5842 5849 -5862 0
5843 -5860 0
5843 5848 -5862 0
5843 5849 -5864 0
c (0<=(aux1278 + aux1280 - aux1283))
-5849 5864 0
-5848 5862 0
-5843 5864 0
-5843 -5849 5862 0
-5843 -5848 5860 0
-5842 5862 0
-5842 -5849 5860 0
-5842 -5848 5859 0
c ((SATLiteral(951) + SATLiteral(1071) - aux1284)<=0)
-1071 -5866 0
-951 -5866 0
-951 -1071 -5867 0
c (0<=(SATLiteral(951) + SATLiteral(1071) - aux1284))
1071 5867 0
951 5867 0
951 1071 5866 0
c ((SATLiteral(966) + SATLiteral(1056) - aux1285)<=0)
-1056 -5869 0
-966 -5869 0
-966 -1056 -5870 0
c (0<=(SATLiteral(966) + SATLiteral(1056) - aux1285))
1056 5870 0
966 5870 0
966 1056 5869 0
c ((SATLiteral(996) + SATLiteral(1041) - aux1286)<=0)
-1041 -5872 0
-996 -5872 0
-996 -1041 -5873 0
c (0<=(SATLiteral(996) + SATLiteral(1041) - aux1286))
1041 5873 0
996 5873 0
996 1041 5872 0
c ((SATLiteral(1011) + SATLiteral(1026) - aux1287)<=0)
-1026 -5875 0
-1011 -5875 0
-1011 -1026 -5876 0
c (0<=(SATLiteral(1011) + SATLiteral(1026) - aux1287))
1026 5876 0
1011 5876 0
1011 1026 5875 0
c ((SATLiteral(981) + aux1287 - aux1288)<=0)
5875 -5878 0
5876 -5879 0
-981 -5878 0
-981 5875 -5879 0
-981 5876 -5881 0
c (0<=(SATLiteral(981) + aux1287 - aux1288))
-5876 5881 0
-5875 5879 0
981 5881 0
981 -5876 5879 0
981 -5875 5878 0
c ((aux1284 + aux1286 - aux1289)<=0)
5872 -5883 0
5873 -5884 0
5866 -5883 0
5866 5872 -5884 0
5866 5873 -5886 0
5867 -5884 0
5867 5872 -5886 0
5867 5873 -5888 0
c (0<=(aux1284 + aux1286 - aux1289))
-5873 5888 0
-5872 5886 0
-5867 5888 0
-5867 -5873 5886 0
-5867 -5872 5884 0
-5866 5886 0
-5866 -5873 5884 0
-5866 -5872 5883 0
c ((SATLiteral(953) + SATLiteral(1073) - aux1290)<=0)
-1073 -5890 0
-953 -5890 0
-953 -1073 -5891 0
c (0<=(SATLiteral(953) + SATLiteral(1073) - aux1290))
1073 5891 0
953 5891 0
953 1073 5890 0
c ((SATLiteral(968) + SATLiteral(1058) - aux1291)<=0)
-1058 -5893 0
-968 -5893 0
-968 -1058 -5894 0
c (0<=(SATLiteral(968) + SATLiteral(1058) - aux1291))
1058 5894 0
968 5894 0
968 1058 5893 0
c ((SATLiteral(998) + SATLiteral(1043) - aux1292)<=0)
-1043 -5896 0
-998 -5896 0
-998 -1043 -5897 0
c (0<=(SATLiteral(998) + SATLiteral(1043) - aux1292))
1043 5897 0
998 5897 0
998 1043 5896 0
c ((SATLiteral(1013) + SATLiteral(1028) - aux1293)<=0)
-1028 -5899 0
-1013 -5899 0
-1013 -1028 -5900 0
c (0<=(SATLiteral(1013) + SATLiteral(1028) - aux1293))
1028 5900 0
1013 5900 0
1013 1028 5899 0
c ((SATLiteral(983) + aux1293 - aux1294)<=0)
5899 -5902 0
5900 -5903 0
-983 -5902 0
-983 5899 -5903 0
-983 5900 -5905 0
c (0<=(SATLiteral(983) + aux1293 - aux1294))
-5900 5905 0
-5899 5903 0
983 5905 0
983 -5900 5903 0
983 -5899 5902 0
c ((aux1290 + aux1292 - aux1295)<=0)
5896 -5907 0
5897 -5908 0
5890 -5907 0
5890 5896 -5908 0
5890 5897 -5910 0
5891 -5908 0
5891 5896 -5910 0
5891 5897 -5912 0
c (0<=(aux1290 + aux1292 - aux1295))
-5897 5912 0
-5896 5910 0
-5891 5912 0
-5891 -5897 5910 0
-5891 -5896 5908 0
-5890 5910 0
-5890 -5897 5908 0
-5890 -5896 5907 0
c ((SATLiteral(955) + SATLiteral(1075) - aux1296)<=0)
-1075 -5914 0
-955 -5914 0
-955 -1075 -5915 0
c (0<=(SATLiteral(955) + SATLiteral(1075) - aux1296))
1075 5915 0
955 5915 0
955 1075 5914 0
c ((SATLiteral(970) + SATLiteral(1060) - aux1297)<=0)
-1060 -5917 0
-970 -5917 0
-970 -1060 -5918 0
c (0<=(SATLiteral(970) + SATLiteral(1060) - aux1297))
1060 5918 0
970 5918 0
970 1060 5917 0
c ((SATLiteral(1000) + SATLiteral(1045) - aux1298)<=0)
-1045 -5920 0
-1000 -5920 0
-1000 -1045 -5921 0
c (0<=(SATLiteral(1000) + SATLiteral(1045) - aux1298))
1045 5921 0
1000 5921 0
1000 1045 5920 0
c ((SATLiteral(1015) + SATLiteral(1030) - aux1299)<=0)
-1030 -5923 0
-1015 -5923 0
-1015 -1030 -5924 0
c (0<=(SATLiteral(1015) + SATLiteral(1030) - aux1299))
1030 5924 0
1015 5924 0
1015 1030 5923 0
c ((SATLiteral(985) + aux1299 - aux1300)<=0)
5923 -5926 0
5924 -5927 0
-985 -5926 0
-985 5923 -5927 0
-985 5924 -5929 0
c (0<=(SATLiteral(985) + aux1299 - aux1300))
-5924 5929 0
-5923 5927 0
985 5929 0
985 -5924 5927 0
985 -5923 5926 0
c ((aux1296 + aux1298 - aux1301)<=0)
5920 -5931 0
5921 -5932 0
5914 -5931 0
5914 5920 -5932 0
5914 5921 -5934 0
5915 -5932 0
5915 5920 -5934 0
5915 5921 -5936 0
c (0<=(aux1296 + aux1298 - aux1301))
-5921 5936 0
-5920 5934 0
-5915 5936 0
-5915 -5921 5934 0
-5915 -5920 5932 0
-5914 5934 0
-5914 -5921 5932 0
-5914 -5920 5931 0
c ((SATLiteral(957) + SATLiteral(1077) - aux1302)<=0)
-1077 -5938 0
-957 -5938 0
-957 -1077 -5939 0
c (0<=(SATLiteral(957) + SATLiteral(1077) - aux1302))
1077 5939 0
957 5939 0
957 1077 5938 0
c ((SATLiteral(972) + SATLiteral(1062) - aux1303)<=0)
-1062 -5941 0
-972 -5941 0
-972 -1062 -5942 0
c (0<=(SATLiteral(972) + SATLiteral(1062) - aux1303))
1062 5942 0
972 5942 0
972 1062 5941 0
c ((SATLiteral(1002) + SATLiteral(1047) - aux1304)<=0)
-1047 -5944 0
-1002 -5944 0
-1002 -1047 -5945 0
c (0<=(SATLiteral(1002) + SATLiteral(1047) - aux1304))
1047 5945 0
1002 5945 0
1002 1047 5944 0
c ((SATLiteral(1017) + SATLiteral(1032) - aux1305)<=0)
-1032 -5947 0
-1017 -5947 0
-1017 -1032 -5948 0
c (0<=(SATLiteral(1017) + SATLiteral(1032) - aux1305))
1032 5948 0
1017 5948 0
1017 1032 5947 0
c ((SATLiteral(987) + aux1305 - aux1306)<=0)
5947 -5950 0
5948 -5951 0
-987 -5950 0
-987 5947 -5951 0
-987 5948 -5953 0
c (0<=(SATLiteral(987) + aux1305 - aux1306))
-5948 5953 0
-5947 5951 0
987 5953 0
987 -5948 5951 0
987 -5947 5950 0
c ((aux1302 + aux1304 - aux1307)<=0)
5944 -5955 0
5945 -5956 0
5938 -5955 0
5938 5944 -5956 0
5938 5945 -5958 0
5939 -5956 0
5939 5944 -5958 0
5939 5945 -5960 0
c (0<=(aux1302 + aux1304 - aux1307))
-5945 5960 0
-5944 5958 0
-5939 5960 0
-5939 -5945 5958 0
-5939 -5944 5956 0
-5938 5958 0
-5938 -5945 5956 0
-5938 -5944 5955 0
c ((SATLiteral(959) + SATLiteral(1079) - aux1308)<=0)
-1079 -5962 0
-959 -5962 0
-959 -1079 -5963 0
c (0<=(SATLiteral(959) + SATLiteral(1079) - aux1308))
1079 5963 0
959 5963 0
959 1079 5962 0
c ((SATLiteral(974) + SATLiteral(1064) - aux1309)<=0)
-1064 -5965 0
-974 -5965 0
-974 -1064 -5966 0
c (0<=(SATLiteral(974) + SATLiteral(1064) - aux1309))
1064 5966 0
974 5966 0
974 1064 5965 0
c ((SATLiteral(1004) + SATLiteral(1049) - aux1310)<=0)
-1049 -5968 0
-1004 -5968 0
-1004 -1049 -5969 0
c (0<=(SATLiteral(1004) + SATLiteral(1049) - aux1310))
1049 5969 0
1004 5969 0
1004 1049 5968 0
c ((SATLiteral(1019) + SATLiteral(1034) - aux1311)<=0)
-1034 -5971 0
-1019 -5971 0
-1019 -1034 -5972 0
c (0<=(SATLiteral(1019) + SATLiteral(1034) - aux1311))
1034 5972 0
1019 5972 0
1019 1034 5971 0
c ((SATLiteral(989) + aux1311 - aux1312)<=0)
5971 -5974 0
5972 -5975 0
-989 -5974 0
-989 5971 -5975 0
-989 5972 -5977 0
c (0<=(SATLiteral(989) + aux1311 - aux1312))
-5972 5977 0
-5971 5975 0
989 5977 0
989 -5972 5975 0
989 -5971 5974 0
c ((aux1308 + aux1310 - aux1313)<=0)
5968 -5979 0
5969 -5980 0
5962 -5979 0
5962 5968 -5980 0
5962 5969 -5982 0
5963 -5980 0
5963 5968 -5982 0
5963 5969 -5984 0
c (0<=(aux1308 + aux1310 - aux1313))
-5969 5984 0
-5968 5982 0
-5963 5984 0
-5963 -5969 5982 0
-5963 -5968 5980 0
-5962 5982 0
-5962 -5969 5980 0
-5962 -5968 5979 0
c ((SATLiteral(961) + SATLiteral(1081) - aux1314)<=0)
-1081 -5986 0
-961 -5986 0
-961 -1081 -5987 0
c (0<=(SATLiteral(961) + SATLiteral(1081) - aux1314))
1081 5987 0
961 5987 0
961 1081 5986 0
c ((SATLiteral(976) + SATLiteral(1066) - aux1315)<=0)
-1066 -5989 0
-976 -5989 0
-976 -1066 -5990 0
c (0<=(SATLiteral(976) + SATLiteral(1066) - aux1315))
1066 5990 0
976 5990 0
976 1066 5989 0
c ((SATLiteral(1006) + SATLiteral(1051) - aux1316)<=0)
-1051 -5992 0
-1006 -5992 0
-1006 -1051 -5993 0
c (0<=(SATLiteral(1006) + SATLiteral(1051) - aux1316))
1051 5993 0
1006 5993 0
1006 1051 5992 0
c ((SATLiteral(1021) + SATLiteral(1036) - aux1317)<=0)
-1036 -5995 0
-1021 -5995 0
-1021 -1036 -5996 0
c (0<=(SATLiteral(1021) + SATLiteral(1036) - aux1317))
1036 5996 0
1021 5996 0
1021 1036 5995 0
c ((SATLiteral(991) + aux1317 - aux1318)<=0)
5995 -5998 0
5996 -5999 0
-991 -5998 0
-991 5995 -5999 0
-991 5996 -6001 0
c (0<=(SATLiteral(991) + aux1317 - aux1318))
-5996 6001 0
-5995 5999 0
991 6001 0
991 -5996 5999 0
991 -5995 5998 0
c ((aux1314 + aux1316 - aux1319)<=0)
5992 -6003 0
5993 -6004 0
5986 -6003 0
5986 5992 -6004 0
5986 5993 -6006 0
5987 -6004 0
5987 5992 -6006 0
5987 5993 -6008 0
c (0<=(aux1314 + aux1316 - aux1319))
-5993 6008 0
-5992 6006 0
-5987 6008 0
-5987 -5993 6006 0
-5987 -5992 6004 0
-5986 6006 0
-5986 -5993 6004 0
-5986 -5992 6003 0
c ((SATLiteral(-960) + SATLiteral(-1080) - aux1320)<=0)
1080 -6010 0
960 -6010 0
960 1080 -6011 0
c (0<=(SATLiteral(-960) + SATLiteral(-1080) - aux1320))
-1080 6011 0
-960 6011 0
-960 -1080 6010 0
c ((SATLiteral(-975) + SATLiteral(-1065) - aux1321)<=0)
1065 -6013 0
975 -6013 0
975 1065 -6014 0
c (0<=(SATLiteral(-975) + SATLiteral(-1065) - aux1321))
-1065 6014 0
-975 6014 0
-975 -1065 6013 0
c ((SATLiteral(-1005) + SATLiteral(-1050) - aux1322)<=0)
1050 -6016 0
1005 -6016 0
1005 1050 -6017 0
c (0<=(SATLiteral(-1005) + SATLiteral(-1050) - aux1322))
-1050 6017 0
-1005 6017 0
-1005 -1050 6016 0
c ((SATLiteral(-1020) + SATLiteral(-1035) - aux1323)<=0)
1035 -6019 0
1020 -6019 0
1020 1035 -6020 0
c (0<=(SATLiteral(-1020) + SATLiteral(-1035) - aux1323))
-1035 6020 0
-1020 6020 0
-1020 -1035 6019 0
c ((SATLiteral(-990) + aux1323 - aux1324)<=0)
6019 -6022 0
6020 -6023 0
990 -6022 0
990 6019 -6023 0
990 6020 -6025 0
c (0<=(SATLiteral(-990) + aux1323 - aux1324))
-6020 6025 0
-6019 6023 0
-990 6025 0
-990 -6020 6023 0
-990 -6019 6022 0
c ((aux1320 + aux1322 - aux1325)<=0)
6016 -6027 0
6017 -6028 0
6010 -6027 0
6010 6016 -6028 0
6010 6017 -6030 0
6011 -6028 0
6011 6016 -6030 0
6011 6017 -6032 0
c (0<=(aux1320 + aux1322 - aux1325))
-6017 6032 0
-6016 6030 0
-6011 6032 0
-6011 -6017 6030 0
-6011 -6016 6028 0
-6010 6030 0
-6010 -6017 6028 0
-6010 -6016 6027 0
c (( - aux1326 + SATLiteral(1082) + SATLiteral(1202))<=0)
-1202 -6034 0
-1082 -6034 0
-1082 -1202 -6035 0
c (0<=( - aux1326 + SATLiteral(1082) + SATLiteral(1202)))
1202 6035 0
1082 6035 0
1082 1202 6034 0
c (( - aux1327 + SATLiteral(1097) + SATLiteral(1187))<=0)
-1187 -6037 0
-1097 -6037 0
-1097 -1187 -6038 0
c (0<=( - aux1327 + SATLiteral(1097) + SATLiteral(1187)))
1187 6038 0
1097 6038 0
1097 1187 6037 0
c (( - aux1328 + SATLiteral(1127) + SATLiteral(1172))<=0)
-1172 -6040 0
-1127 -6040 0
-1127 -1172 -6041 0
c (0<=( - aux1328 + SATLiteral(1127) + SATLiteral(1172)))
1172 6041 0
1127 6041 0
1127 1172 6040 0
c (( - aux1329 + SATLiteral(1142) + SATLiteral(1157))<=0)
-1157 -6043 0
-1142 -6043 0
-1142 -1157 -6044 0
c (0<=( - aux1329 + SATLiteral(1142) + SATLiteral(1157)))
1157 6044 0
1142 6044 0
1142 1157 6043 0
c ((aux1329 - aux1330 + SATLiteral(1112))<=0)
6043 -6046 0
6044 -6047 0
-1112 -6046 0
-1112 6043 -6047 0
-1112 6044 -6049 0
c (0<=(aux1329 - aux1330 + SATLiteral(1112)))
-6044 6049 0
-6043 6047 0
1112 6049 0
1112 -6044 6047 0
1112 -6043 6046 0
c ((aux1326 + aux1328 - aux1331)<=0)
6040 -6051 0
6041 -6052 0
6034 -6051 0
6034 6040 -6052 0
6034 6041 -6054 0
6035 -6052 0
6035 6040 -6054 0
6035 6041 -6056 0
c (0<=(aux1326 + aux1328 - aux1331))
-6041 6056 0
-6040 6054 0
-6035 6056 0
-6035 -6041 6054 0
-6035 -6040 6052 0
-6034 6054 0
-6034 -6041 6052 0
-6034 -6040 6051 0
c (( - aux1332 + SATLiteral(1084) + SATLiteral(1204))<=0)
-1204 -6058 0
-1084 -6058 0
-1084 -1204 -6059 0
c (0<=( - aux1332 + SATLiteral(1084) + SATLiteral(1204)))
1204 6059 0
1084 6059 0
1084 1204 6058 0
c (( - aux1333 + SATLiteral(1099) + SATLiteral(1189))<=0)
-1189 -6061 0
-1099 -6061 0
-1099 -1189 -6062 0
c (0<=( - aux1333 + SATLiteral(1099) + SATLiteral(1189)))
1189 6062 0
1099 6062 0
1099 1189 6061 0
c (( - aux1334 + SATLiteral(1129) + SATLiteral(1174))<=0)
-1174 -6064 0
-1129 -6064 0
-1129 -1174 -6065 0
c (0<=( - aux1334 + SATLiteral(1129) + SATLiteral(1174)))
1174 6065 0
1129 6065 0
1129 1174 6064 0
c (( - aux1335 + SATLiteral(1144) + SATLiteral(1159))<=0)
-1159 -6067 0
-1144 -6067 0
-1144 -1159 -6068 0
c (0<=( - aux1335 + SATLiteral(1144) + SATLiteral(1159)))
1159 6068 0
1144 6068 0
1144 1159 6067 0
c ((aux1335 - aux1336 + SATLiteral(1114))<=0)
6067 -6070 0
6068 -6071 0
-1114 -6070 0
-1114 6067 -6071 0
-1114 6068 -6073 0
c (0<=(aux1335 - aux1336 + SATLiteral(1114)))
-6068 6073 0
-6067 6071 0
1114 6073 0
1114 -6068 6071 0
1114 -6067 6070 0
c ((aux1332 + aux1334 - aux1337)<=0)
6064 -6075 0
6065 -6076 0
6058 -6075 0
6058 6064 -6076 0
6058 6065 -6078 0
6059 -6076 0
6059 6064 -6078 0
6059 6065 -6080 0
c (0<=(aux1332 + aux1334 - aux1337))
-6065 6080 0
-6064 6078 0
-6059 6080 0
-6059 -6065 6078 0
-6059 -6064 6076 0
-6058 6078 0
-6058 -6065 6076 0
-6058 -6064 6075 0
c (( - aux1338 + SATLiteral(1086) + SATLiteral(1206))<=0)
-1206 -6082 0
-1086 -6082 0
-1086 -1206 -6083 0
c (0<=( - aux1338 + SATLiteral(1086) + SATLiteral(1206)))
1206 6083 0
1086 6083 0
1086 1206 6082 0
c (( - aux1339 + SATLiteral(1101) + SATLiteral(1191))<=0)
-1191 -6085 0
-1101 -6085 0
-1101 -1191 -6086 0
c (0<=( - aux1339 + SATLiteral(1101) + SATLiteral(1191)))
1191 6086 0
1101 6086 0
1101 1191 6085 0
c (( - aux1340 + SATLiteral(1131) + SATLiteral(1176))<=0)
-1176 -6088 0
-1131 -6088 0
-1131 -1176 -6089 0
c (0<=( - aux1340 + SATLiteral(1131) + SATLiteral(1176)))
1176 6089 0
1131 6089 0
1131 1176 6088 0
c (( - aux1341 + SATLiteral(1146) + SATLiteral(1161))<=0)
-1161 -6091 0
-1146 -6091 0
-1146 -1161 -6092 0
c (0<=( - aux1341 + SATLiteral(1146) + SATLiteral(1161)))
1161 6092 0
1146 6092 0
1146 1161 6091 0
c ((aux1341 - aux1342 + SATLiteral(1116))<=0)
6091 -6094 0
6092 -6095 0
-1116 -6094 0
-1116 6091 -6095 0
-1116 6092 -6097 0
c (0<=(aux1341 - aux1342 + SATLiteral(1116)))
-6092 6097 0
-6091 6095 0
1116 6097 0
1116 -6092 6095 0
1116 -6091 6094 0
c ((aux1338 + aux1340 - aux1343)<=0)
6088 -6099 0
6089 -6100 0
6082 -6099 0
6082 6088 -6100 0
6082 6089 -6102 0
6083 -6100 0
6083 6088 -6102 0
6083 6089 -6104 0
c (0<=(aux1338 + aux1340 - aux1343))
-6089 6104 0
-6088 6102 0
-6083 6104 0
-6083 -6089 6102 0
-6083 -6088 6100 0
-6082 6102 0
-6082 -6089 6100 0
-6082 -6088 6099 0
c (( - aux1344 + SATLiteral(1088) + SATLiteral(1208))<=0)
-1208 -6106 0
-1088 -6106 0
-1088 -1208 -6107 0
c (0<=( - aux1344 + SATLiteral(1088) + SATLiteral(1208)))
1208 6107 0
1088 6107 0
1088 1208 6106 0
c (( - aux1345 + SATLiteral(1103) + SATLiteral(1193))<=0)
-1193 -6109 0
-1103 -6109 0
-1103 -1193 -6110 0
c (0<=( - aux1345 + SATLiteral(1103) + SATLiteral(1193)))
1193 6110 0
1103 6110 0
1103 1193 6109 0
c (( - aux1346 + SATLiteral(1133) + SATLiteral(1178))<=0)
-1178 -6112 0
-1133 -6112 0
-1133 -1178 -6113 0
c (0<=( - aux1346 + SATLiteral(1133) + SATLiteral(1178)))
1178 6113 0
1133 6113 0
1133 1178 6112 0
c (( - aux1347 + SATLiteral(1148) + SATLiteral(1163))<=0)
-1163 -6115 0
-1148 -6115 0
-1148 -1163 -6116 0
c (0<=( - aux1347 + SATLiteral(1148) + SATLiteral(1163)))
1163 6116 0
1148 6116 0
1148 1163 6115 0
c ((aux1347 - aux1348 + SATLiteral(1118))<=0)
6115 -6118 0
6116 -6119 0
-1118 -6118 0
-1118 6115 -6119 0
-1118 6116 -6121 0
c (0<=(aux1347 - aux1348 + SATLiteral(1118)))
-6116 6121 0
-6115 6119 0
1118 6121 0
1118 -6116 6119 0
1118 -6115 6118 0
c ((aux1344 + aux1346 - aux1349)<=0)
6112 -6123 0
6113 -6124 0
6106 -6123 0
6106 6112 -6124 0
6106 6113 -6126 0
6107 -6124 0
6107 6112 -6126 0
6107 6113 -6128 0
c (0<=(aux1344 + aux1346 - aux1349))
-6113 6128 0
-6112 6126 0
-6107 6128 0
-6107 -6113 6126 0
-6107 -6112 6124 0
-6106 6126 0
-6106 -6113 6124 0
-6106 -6112 6123 0
c (( - aux1350 + SATLiteral(1090) + SATLiteral(1210))<=0)
-1210 -6130 0
-1090 -6130 0
-1090 -1210 -6131 0
c (0<=( - aux1350 + SATLiteral(1090) + SATLiteral(1210)))
1210 6131 0
1090 6131 0
1090 1210 6130 0
c (( - aux1351 + SATLiteral(1105) + SATLiteral(1195))<=0)
-1195 -6133 0
-1105 -6133 0
-1105 -1195 -6134 0
c (0<=( - aux1351 + SATLiteral(1105) + SATLiteral(1195)))
1195 6134 0
1105 6134 0
1105 1195 6133 0
c (( - aux1352 + SATLiteral(1135) + SATLiteral(1180))<=0)
-1180 -6136 0
-1135 -6136 0
-1135 -1180 -6137 0
c (0<=( - aux1352 + SATLiteral(1135) + SATLiteral(1180)))
1180 6137 0
1135 6137 0
1135 1180 6136 0
c (( - aux1353 + SATLiteral(1150) + SATLiteral(1165))<=0)
-1165 -6139 0
-1150 -6139 0
-1150 -1165 -6140 0
c (0<=( - aux1353 + SATLiteral(1150) + SATLiteral(1165)))
1165 6140 0
1150 6140 0
1150 1165 6139 0
c ((aux1353 - aux1354 + SATLiteral(1120))<=0)
6139 -6142 0
6140 -6143 0
-1120 -6142 0
-1120 6139 -6143 0
-1120 6140 -6145 0
c (0<=(aux1353 - aux1354 + SATLiteral(1120)))
-6140 6145 0
-6139 6143 0
1120 6145 0
1120 -6140 6143 0
1120 -6139 6142 0
c ((aux1350 + aux1352 - aux1355)<=0)
6136 -6147 0
6137 -6148 0
6130 -6147 0
6130 6136 -6148 0
6130 6137 -6150 0
6131 -6148 0
6131 6136 -6150 0
6131 6137 -6152 0
c (0<=(aux1350 + aux1352 - aux1355))
-6137 6152 0
-6136 6150 0
-6131 6152 0
-6131 -6137 6150 0
-6131 -6136 6148 0
-6130 6150 0
-6130 -6137 6148 0
-6130 -6136 6147 0
c (( - aux1356 + SATLiteral(1092) + SATLiteral(1212))<=0)
-1212 -6154 0
-1092 -6154 0
-1092 -1212 -6155 0
c (0<=( - aux1356 + SATLiteral(1092) + SATLiteral(1212)))
1212 6155 0
1092 6155 0
1092 1212 6154 0
c (( - aux1357 + SATLiteral(1107) + SATLiteral(1197))<=0)
-1197 -6157 0
-1107 -6157 0
-1107 -1197 -6158 0
c (0<=( - aux1357 + SATLiteral(1107) + SATLiteral(1197)))
1197 6158 0
1107 6158 0
1107 1197 6157 0
c (( - aux1358 + SATLiteral(1137) + SATLiteral(1182))<=0)
-1182 -6160 0
-1137 -6160 0
-1137 -1182 -6161 0
c (0<=( - aux1358 + SATLiteral(1137) + SATLiteral(1182)))
1182 6161 0
1137 6161 0
1137 1182 6160 0
c (( - aux1359 + SATLiteral(1152) + SATLiteral(1167))<=0)
-1167 -6163 0
-1152 -6163 0
-1152 -1167 -6164 0
c (0<=( - aux1359 + SATLiteral(1152) + SATLiteral(1167)))
1167 6164 0
1152 6164 0
1152 1167 6163 0
c ((aux1359 - aux1360 + SATLiteral(1122))<=0)
6163 -6166 0
6164 -6167 0
-1122 -6166 0
-1122 6163 -6167 0
-1122 6164 -6169 0
c (0<=(aux1359 - aux1360 + SATLiteral(1122)))
-6164 6169 0
-6163 6167 0
1122 6169 0
1122 -6164 6167 0
1122 -6163 6166 0
c ((aux1356 + aux1358 - aux1361)<=0)
6160 -6171 0
6161 -6172 0
6154 -6171 0
6154 6160 -6172 0
6154 6161 -6174 0
6155 -6172 0
6155 6160 -6174 0
6155 6161 -6176 0
c (0<=(aux1356 + aux1358 - aux1361))
-6161 6176 0
-6160 6174 0
-6155 6176 0
-6155 -6161 6174 0
-6155 -6160 6172 0
-6154 6174 0
-6154 -6161 6172 0
-6154 -6160 6171 0
c (( - aux1362 + SATLiteral(1094) + SATLiteral(1214))<=0)
-1214 -6178 0
-1094 -6178 0
-1094 -1214 -6179 0
c (0<=( - aux1362 + SATLiteral(1094) + SATLiteral(1214)))
1214 6179 0
1094 6179 0
1094 1214 6178 0
c (( - aux1363 + SATLiteral(1109) + SATLiteral(1199))<=0)
-1199 -6181 0
-1109 -6181 0
-1109 -1199 -6182 0
c (0<=( - aux1363 + SATLiteral(1109) + SATLiteral(1199)))
1199 6182 0
1109 6182 0
1109 1199 6181 0
c (( - aux1364 + SATLiteral(1139) + SATLiteral(1184))<=0)
-1184 -6184 0
-1139 -6184 0
-1139 -1184 -6185 0
c (0<=( - aux1364 + SATLiteral(1139) + SATLiteral(1184)))
1184 6185 0
1139 6185 0
1139 1184 6184 0
c (( - aux1365 + SATLiteral(1154) + SATLiteral(1169))<=0)
-1169 -6187 0
-1154 -6187 0
-1154 -1169 -6188 0
c (0<=( - aux1365 + SATLiteral(1154) + SATLiteral(1169)))
1169 6188 0
1154 6188 0
1154 1169 6187 0
c ((aux1365 - aux1366 + SATLiteral(1124))<=0)
6187 -6190 0
6188 -6191 0
-1124 -6190 0
-1124 6187 -6191 0
-1124 6188 -6193 0
c (0<=(aux1365 - aux1366 + SATLiteral(1124)))
-6188 6193 0
-6187 6191 0
1124 6193 0
1124 -6188 6191 0
1124 -6187 6190 0
c ((aux1362 + aux1364 - aux1367)<=0)
6184 -6195 0
6185 -6196 0
6178 -6195 0
6178 6184 -6196 0
6178 6185 -6198 0
6179 -6196 0
6179 6184 -6198 0
6179 6185 -6200 0
c (0<=(aux1362 + aux1364 - aux1367))
-6185 6200 0
-6184 6198 0
-6179 6200 0
-6179 -6185 6198 0
-6179 -6184 6196 0
-6178 6198 0
-6178 -6185 6196 0
-6178 -6184 6195 0
c (( - aux1368 + SATLiteral(1096) + SATLiteral(1216))<=0)
-1216 -6202 0
-1096 -6202 0
-1096 -1216 -6203 0
c (0<=( - aux1368 + SATLiteral(1096) + SATLiteral(1216)))
1216 6203 0
1096 6203 0
1096 1216 6202 0
c (( - aux1369 + SATLiteral(1111) + SATLiteral(1201))<=0)
-1201 -6205 0
-1111 -6205 0
-1111 -1201 -6206 0
c (0<=( - aux1369 + SATLiteral(1111) + SATLiteral(1201)))
1201 6206 0
1111 6206 0
1111 1201 6205 0
c (( - aux1370 + SATLiteral(1141) + SATLiteral(1186))<=0)
-1186 -6208 0
-1141 -6208 0
-1141 -1186 -6209 0
c (0<=( - aux1370 + SATLiteral(1141) + SATLiteral(1186)))
1186 6209 0
1141 6209 0
1141 1186 6208 0
c (( - aux1371 + SATLiteral(1156) + SATLiteral(1171))<=0)
-1171 -6211 0
-1156 -6211 0
-1156 -1171 -6212 0
c (0<=( - aux1371 + SATLiteral(1156) + SATLiteral(1171)))
1171 6212 0
1156 6212 0
1156 1171 6211 0
c ((aux1371 - aux1372 + SATLiteral(1126))<=0)
6211 -6214 0
6212 -6215 0
-1126 -6214 0
-1126 6211 -6215 0
-1126 6212 -6217 0
c (0<=(aux1371 - aux1372 + SATLiteral(1126)))
-6212 6217 0
-6211 6215 0
1126 6217 0
1126 -6212 6215 0
1126 -6211 6214 0
c ((aux1368 + aux1370 - aux1373)<=0)
6208 -6219 0
6209 -6220 0
6202 -6219 0
6202 6208 -6220 0
6202 6209 -6222 0
6203 -6220 0
6203 6208 -6222 0
6203 6209 -6224 0
c (0<=(aux1368 + aux1370 - aux1373))
-6209 6224 0
-6208 6222 0
-6203 6224 0
-6203 -6209 6222 0
-6203 -6208 6220 0
-6202 6222 0
-6202 -6209 6220 0
-6202 -6208 6219 0
c (( - aux1374 + SATLiteral(-1095) + SATLiteral(-1215))<=0)
1215 -6226 0
1095 -6226 0
1095 1215 -6227 0
c (0<=( - aux1374 + SATLiteral(-1095) + SATLiteral(-1215)))
-1215 6227 0
-1095 6227 0
-1095 -1215 6226 0
c (( - aux1375 + SATLiteral(-1110) + SATLiteral(-1200))<=0)
1200 -6229 0
1110 -6229 0
1110 1200 -6230 0
c (0<=( - aux1375 + SATLiteral(-1110) + SATLiteral(-1200)))
-1200 6230 0
-1110 6230 0
-1110 -1200 6229 0
c (( - aux1376 + SATLiteral(-1140) + SATLiteral(-1185))<=0)
1185 -6232 0
1140 -6232 0
1140 1185 -6233 0
c (0<=( - aux1376 + SATLiteral(-1140) + SATLiteral(-1185)))
-1185 6233 0
-1140 6233 0
-1140 -1185 6232 0
c (( - aux1377 + SATLiteral(-1155) + SATLiteral(-1170))<=0)
1170 -6235 0
1155 -6235 0
1155 1170 -6236 0
c (0<=( - aux1377 + SATLiteral(-1155) + SATLiteral(-1170)))
-1170 6236 0
-1155 6236 0
-1155 -1170 6235 0
c ((aux1377 - aux1378 + SATLiteral(-1125))<=0)
6235 -6238 0
6236 -6239 0
1125 -6238 0
1125 6235 -6239 0
1125 6236 -6241 0
c (0<=(aux1377 - aux1378 + SATLiteral(-1125)))
-6236 6241 0
-6235 6239 0
-1125 6241 0
-1125 -6236 6239 0
-1125 -6235 6238 0
c ((aux1374 + aux1376 - aux1379)<=0)
6232 -6243 0
6233 -6244 0
6226 -6243 0
6226 6232 -6244 0
6226 6233 -6246 0
6227 -6244 0
6227 6232 -6246 0
6227 6233 -6248 0
c (0<=(aux1374 + aux1376 - aux1379))
-6233 6248 0
-6232 6246 0
-6227 6248 0
-6227 -6233 6246 0
-6227 -6232 6244 0
-6226 6246 0
-6226 -6233 6244 0
-6226 -6232 6243 0
c ((SATLiteral(272) - aux1380 + SATLiteral(167))<=0)
-167 -6250 0
-272 -6250 0
-272 -167 -6251 0
c (0<=(SATLiteral(272) - aux1380 + SATLiteral(167)))
167 6251 0
272 6251 0
272 167 6250 0
c ((SATLiteral(287) - aux1381 + SATLiteral(152))<=0)
-152 -6253 0
-287 -6253 0
-287 -152 -6254 0
c (0<=(SATLiteral(287) - aux1381 + SATLiteral(152)))
152 6254 0
287 6254 0
287 152 6253 0
c ((SATLiteral(2) - aux1382 + SATLiteral(137))<=0)
-137 -6256 0
-2 -6256 0
-2 -137 -6257 0
c (0<=(SATLiteral(2) - aux1382 + SATLiteral(137)))
137 6257 0
2 6257 0
2 137 6256 0
c ((SATLiteral(17) + SATLiteral(32) - aux1383)<=0)
-32 -6259 0
-17 -6259 0
-17 -32 -6260 0
c (0<=(SATLiteral(17) + SATLiteral(32) - aux1383))
32 6260 0
17 6260 0
17 32 6259 0
c ((SATLiteral(302) + aux1383 - aux1384)<=0)
6259 -6262 0
6260 -6263 0
-302 -6262 0
-302 6259 -6263 0
-302 6260 -6265 0
c (0<=(SATLiteral(302) + aux1383 - aux1384))
-6260 6265 0
-6259 6263 0
302 6265 0
302 -6260 6263 0
302 -6259 6262 0
c ((aux1380 + aux1382 - aux1385)<=0)
6256 -6267 0
6257 -6268 0
6250 -6267 0
6250 6256 -6268 0
6250 6257 -6270 0
6251 -6268 0
6251 6256 -6270 0
6251 6257 -6272 0
c (0<=(aux1380 + aux1382 - aux1385))
-6257 6272 0
-6256 6270 0
-6251 6272 0
-6251 -6257 6270 0
-6251 -6256 6268 0
-6250 6270 0
-6250 -6257 6268 0
-6250 -6256 6267 0
c ((SATLiteral(274) - aux1386 + SATLiteral(169))<=0)
-169 -6274 0
-274 -6274 0
-274 -169 -6275 0
c (0<=(SATLiteral(274) - aux1386 + SATLiteral(169)))
169 6275 0
274 6275 0
274 169 6274 0
c ((SATLiteral(289) - aux1387 + SATLiteral(154))<=0)
-154 -6277 0
-289 -6277 0
-289 -154 -6278 0
c (0<=(SATLiteral(289) - aux1387 + SATLiteral(154)))
154 6278 0
289 6278 0
289 154 6277 0
c ((SATLiteral(4) - aux1388 + SATLiteral(139))<=0)
-139 -6280 0
-4 -6280 0
-4 -139 -6281 0
c (0<=(SATLiteral(4) - aux1388 + SATLiteral(139)))
139 6281 0
4 6281 0
4 139 6280 0
c ((SATLiteral(19) + SATLiteral(34) - aux1389)<=0)
-34 -6283 0
-19 -6283 0
-19 -34 -6284 0
c (0<=(SATLiteral(19) + SATLiteral(34) - aux1389))
34 6284 0
19 6284 0
19 34 6283 0
c ((SATLiteral(304) + aux1389 - aux1390)<=0)
6283 -6286 0
6284 -6287 0
-304 -6286 0
-304 6283 -6287 0
-304 6284 -6289 0
c (0<=(SATLiteral(304) + aux1389 - aux1390))
-6284 6289 0
-6283 6287 0
304 6289 0
304 -6284 6287 0
304 -6283 6286 0
c ((aux1386 + aux1388 - aux1391)<=0)
6280 -6291 0
6281 -6292 0
6274 -6291 0
6274 6280 -6292 0
6274 6281 -6294 0
6275 -6292 0
6275 6280 -6294 0
6275 6281 -6296 0
c (0<=(aux1386 + aux1388 - aux1391))
-6281 6296 0
-6280 6294 0
-6275 6296 0
-6275 -6281 6294 0
-6275 -6280 6292 0
-6274 6294 0
-6274 -6281 6292 0
-6274 -6280 6291 0
c ((SATLiteral(276) - aux1392 + SATLiteral(171))<=0)
-171 -6298 0
-276 -6298 0
-276 -171 -6299 0
c (0<=(SATLiteral(276) - aux1392 + SATLiteral(171)))
171 6299 0
276 6299 0
276 171 6298 0
c ((SATLiteral(291) - aux1393 + SATLiteral(156))<=0)
-156 -6301 0
-291 -6301 0
-291 -156 -6302 0
c (0<=(SATLiteral(291) - aux1393 + SATLiteral(156)))
156 6302 0
291 6302 0
291 156 6301 0
c ((SATLiteral(6) - aux1394 + SATLiteral(141))<=0)
-141 -6304 0
-6 -6304 0
-6 -141 -6305 0
c (0<=(SATLiteral(6) - aux1394 + SATLiteral(141)))
141 6305 0
6 6305 0
6 141 6304 0
c ((SATLiteral(21) + SATLiteral(36) - aux1395)<=0)
-36 -6307 0
-21 -6307 0
-21 -36 -6308 0
c (0<=(SATLiteral(21) + SATLiteral(36) - aux1395))
36 6308 0
21 6308 0
21 36 6307 0
c ((SATLiteral(306) + aux1395 - aux1396)<=0)
6307 -6310 0
6308 -6311 0
-306 -6310 0
-306 6307 -6311 0
-306 6308 -6313 0
c (0<=(SATLiteral(306) + aux1395 - aux1396))
-6308 6313 0
-6307 6311 0
306 6313 0
306 -6308 6311 0
306 -6307 6310 0
c ((aux1392 + aux1394 - aux1397)<=0)
6304 -6315 0
6305 -6316 0
6298 -6315 0
6298 6304 -6316 0
6298 6305 -6318 0
6299 -6316 0
6299 6304 -6318 0
6299 6305 -6320 0
c (0<=(aux1392 + aux1394 - aux1397))
-6305 6320 0
-6304 6318 0
-6299 6320 0
-6299 -6305 6318 0
-6299 -6304 6316 0
-6298 6318 0
-6298 -6305 6316 0
-6298 -6304 6315 0
c ((SATLiteral(278) - aux1398 + SATLiteral(173))<=0)
-173 -6322 0
-278 -6322 0
-278 -173 -6323 0
c (0<=(SATLiteral(278) - aux1398 + SATLiteral(173)))
173 6323 0
278 6323 0
278 173 6322 0
c ((SATLiteral(293) - aux1399 + SATLiteral(158))<=0)
-158 -6325 0
-293 -6325 0
-293 -158 -6326 0
c (0<=(SATLiteral(293) - aux1399 + SATLiteral(158)))
158 6326 0
293 6326 0
293 158 6325 0
c ((SATLiteral(8) - aux1400 + SATLiteral(143))<=0)
-143 -6328 0
-8 -6328 0
-8 -143 -6329 0
c (0<=(SATLiteral(8) - aux1400 + SATLiteral(143)))
143 6329 0
8 6329 0
8 143 6328 0
c ((SATLiteral(23) + SATLiteral(38) - aux1401)<=0)
-38 -6331 0
-23 -6331 0
-23 -38 -6332 0
c (0<=(SATLiteral(23) + SATLiteral(38) - aux1401))
38 6332 0
23 6332 0
23 38 6331 0
c ((SATLiteral(308) + aux1401 - aux1402)<=0)
6331 -6334 0
6332 -6335 0
-308 -6334 0
-308 6331 -6335 0
-308 6332 -6337 0
c (0<=(SATLiteral(308) + aux1401 - aux1402))
-6332 6337 0
-6331 6335 0
308 6337 0
308 -6332 6335 0
308 -6331 6334 0
c ((aux1398 + aux1400 - aux1403)<=0)
6328 -6339 0
6329 -6340 0
6322 -6339 0
6322 6328 -6340 0
6322 6329 -6342 0
6323 -6340 0
6323 6328 -6342 0
6323 6329 -6344 0
c (0<=(aux1398 + aux1400 - aux1403))
-6329 6344 0
-6328 6342 0
-6323 6344 0
-6323 -6329 6342 0
-6323 -6328 6340 0
-6322 6342 0
-6322 -6329 6340 0
-6322 -6328 6339 0
c ((SATLiteral(280) - aux1404 + SATLiteral(175))<=0)
-175 -6346 0
-280 -6346 0
-280 -175 -6347 0
c (0<=(SATLiteral(280) - aux1404 + SATLiteral(175)))
175 6347 0
280 6347 0
280 175 6346 0
c ((SATLiteral(295) - aux1405 + SATLiteral(160))<=0)
-160 -6349 0
-295 -6349 0
-295 -160 -6350 0
c (0<=(SATLiteral(295) - aux1405 + SATLiteral(160)))
160 6350 0
295 6350 0
295 160 6349 0
c ((SATLiteral(10) - aux1406 + SATLiteral(145))<=0)
-145 -6352 0
-10 -6352 0
-10 -145 -6353 0
c (0<=(SATLiteral(10) - aux1406 + SATLiteral(145)))
145 6353 0
10 6353 0
10 145 6352 0
c ((SATLiteral(25) + SATLiteral(40) - aux1407)<=0)
-40 -6355 0
-25 -6355 0
-25 -40 -6356 0
c (0<=(SATLiteral(25) + SATLiteral(40) - aux1407))
40 6356 0
25 6356 0
25 40 6355 0
c ((SATLiteral(310) + aux1407 - aux1408)<=0)
6355 -6358 0
6356 -6359 0
-310 -6358 0
-310 6355 -6359 0
-310 6356 -6361 0
c (0<=(SATLiteral(310) + aux1407 - aux1408))
-6356 6361 0
-6355 6359 0
310 6361 0
310 -6356 6359 0
310 -6355 6358 0
c ((aux1404 + aux1406 - aux1409)<=0)
6352 -6363 0
6353 -6364 0
6346 -6363 0
6346 6352 -6364 0
6346 6353 -6366 0
6347 -6364 0
6347 6352 -6366 0
6347 6353 -6368 0
c (0<=(aux1404 + aux1406 - aux1409))
-6353 6368 0
-6352 6366 0
-6347 6368 0
-6347 -6353 6366 0
-6347 -6352 6364 0
-6346 6366 0
-6346 -6353 6364 0
-6346 -6352 6363 0
c ((SATLiteral(282) - aux1410 + SATLiteral(177))<=0)
-177 -6370 0
-282 -6370 0
-282 -177 -6371 0
c (0<=(SATLiteral(282) - aux1410 + SATLiteral(177)))
177 6371 0
282 6371 0
282 177 6370 0
c ((SATLiteral(297) - aux1411 + SATLiteral(162))<=0)
-162 -6373 0
-297 -6373 0
-297 -162 -6374 0
c (0<=(SATLiteral(297) - aux1411 + SATLiteral(162)))
162 6374 0
297 6374 0
297 162 6373 0
c ((SATLiteral(12) - aux1412 + SATLiteral(147))<=0)
-147 -6376 0
-12 -6376 0
-12 -147 -6377 0
c (0<=(SATLiteral(12) - aux1412 + SATLiteral(147)))
147 6377 0
12 6377 0
12 147 6376 0
c ((SATLiteral(27) + SATLiteral(42) - aux1413)<=0)
-42 -6379 0
-27 -6379 0
-27 -42 -6380 0
c (0<=(SATLiteral(27) + SATLiteral(42) - aux1413))
42 6380 0
27 6380 0
27 42 6379 0
c ((SATLiteral(312) + aux1413 - aux1414)<=0)
6379 -6382 0
6380 -6383 0
-312 -6382 0
-312 6379 -6383 0
-312 6380 -6385 0
c (0<=(SATLiteral(312) + aux1413 - aux1414))
-6380 6385 0
-6379 6383 0
312 6385 0
312 -6380 6383 0
312 -6379 6382 0
c ((aux1410 + aux1412 - aux1415)<=0)
6376 -6387 0
6377 -6388 0
6370 -6387 0
6370 6376 -6388 0
6370 6377 -6390 0
6371 -6388 0
6371 6376 -6390 0
6371 6377 -6392 0
c (0<=(aux1410 + aux1412 - aux1415))
-6377 6392 0
-6376 6390 0
-6371 6392 0
-6371 -6377 6390 0
-6371 -6376 6388 0
-6370 6390 0
-6370 -6377 6388 0
-6370 -6376 6387 0
c ((SATLiteral(284) - aux1416 + SATLiteral(179))<=0)
-179 -6394 0
-284 -6394 0
-284 -179 -6395 0
c (0<=(SATLiteral(284) - aux1416 + SATLiteral(179)))
179 6395 0
284 6395 0
284 179 6394 0
c ((SATLiteral(299) - aux1417 + SATLiteral(164))<=0)
-164 -6397 0
-299 -6397 0
-299 -164 -6398 0
c (0<=(SATLiteral(299) - aux1417 + SATLiteral(164)))
164 6398 0
299 6398 0
299 164 6397 0
c ((SATLiteral(14) - aux1418 + SATLiteral(149))<=0)
-149 -6400 0
-14 -6400 0
-14 -149 -6401 0
c (0<=(SATLiteral(14) - aux1418 + SATLiteral(149)))
149 6401 0
14 6401 0
14 149 6400 0
c ((SATLiteral(29) + SATLiteral(44) - aux1419)<=0)
-44 -6403 0
-29 -6403 0
-29 -44 -6404 0
c (0<=(SATLiteral(29) + SATLiteral(44) - aux1419))
44 6404 0
29 6404 0
29 44 6403 0
c ((SATLiteral(314) + aux1419 - aux1420)<=0)
6403 -6406 0
6404 -6407 0
-314 -6406 0
-314 6403 -6407 0
-314 6404 -6409 0
c (0<=(SATLiteral(314) + aux1419 - aux1420))
-6404 6409 0
-6403 6407 0
314 6409 0
314 -6404 6407 0
314 -6403 6406 0
c ((aux1416 + aux1418 - aux1421)<=0)
6400 -6411 0
6401 -6412 0
6394 -6411 0
6394 6400 -6412 0
6394 6401 -6414 0
6395 -6412 0
6395 6400 -6414 0
6395 6401 -6416 0
c (0<=(aux1416 + aux1418 - aux1421))
-6401 6416 0
-6400 6414 0
-6395 6416 0
-6395 -6401 6414 0
-6395 -6400 6412 0
-6394 6414 0
-6394 -6401 6412 0
-6394 -6400 6411 0
c ((SATLiteral(286) - aux1422 + SATLiteral(181))<=0)
-181 -6418 0
-286 -6418 0
-286 -181 -6419 0
c (0<=(SATLiteral(286) - aux1422 + SATLiteral(181)))
181 6419 0
286 6419 0
286 181 6418 0
c ((SATLiteral(301) - aux1423 + SATLiteral(166))<=0)
-166 -6421 0
-301 -6421 0
-301 -166 -6422 0
c (0<=(SATLiteral(301) - aux1423 + SATLiteral(166)))
166 6422 0
301 6422 0
301 166 6421 0
c ((SATLiteral(16) - aux1424 + SATLiteral(151))<=0)
-151 -6424 0
-16 -6424 0
-16 -151 -6425 0
c (0<=(SATLiteral(16) - aux1424 + SATLiteral(151)))
151 6425 0
16 6425 0
16 151 6424 0
c ((SATLiteral(31) + SATLiteral(46) - aux1425)<=0)
-46 -6427 0
-31 -6427 0
-31 -46 -6428 0
c (0<=(SATLiteral(31) + SATLiteral(46) - aux1425))
46 6428 0
31 6428 0
31 46 6427 0
c ((SATLiteral(316) + aux1425 - aux1426)<=0)
6427 -6430 0
6428 -6431 0
-316 -6430 0
-316 6427 -6431 0
-316 6428 -6433 0
c (0<=(SATLiteral(316) + aux1425 - aux1426))
-6428 6433 0
-6427 6431 0
316 6433 0
316 -6428 6431 0
316 -6427 6430 0
c ((aux1422 + aux1424 - aux1427)<=0)
6424 -6435 0
6425 -6436 0
6418 -6435 0
6418 6424 -6436 0
6418 6425 -6438 0
6419 -6436 0
6419 6424 -6438 0
6419 6425 -6440 0
c (0<=(aux1422 + aux1424 - aux1427))
-6425 6440 0
-6424 6438 0
-6419 6440 0
-6419 -6425 6438 0
-6419 -6424 6436 0
-6418 6438 0
-6418 -6425 6436 0
-6418 -6424 6435 0
c ((SATLiteral(-285) - aux1428 + SATLiteral(-180))<=0)
180 -6442 0
285 -6442 0
285 180 -6443 0
c (0<=(SATLiteral(-285) - aux1428 + SATLiteral(-180)))
-180 6443 0
-285 6443 0
-285 -180 6442 0
c ((SATLiteral(-300) - aux1429 + SATLiteral(-165))<=0)
165 -6445 0
300 -6445 0
300 165 -6446 0
c (0<=(SATLiteral(-300) - aux1429 + SATLiteral(-165)))
-165 6446 0
-300 6446 0
-300 -165 6445 0
c ((SATLiteral(-15) - aux1430 + SATLiteral(-150))<=0)
150 -6448 0
15 -6448 0
15 150 -6449 0
c (0<=(SATLiteral(-15) - aux1430 + SATLiteral(-150)))
-150 6449 0
-15 6449 0
-15 -150 6448 0
c ((SATLiteral(-30) + SATLiteral(-45) - aux1431)<=0)
45 -6451 0
30 -6451 0
30 45 -6452 0
c (0<=(SATLiteral(-30) + SATLiteral(-45) - aux1431))
-45 6452 0
-30 6452 0
-30 -45 6451 0
c ((SATLiteral(-315) + aux1431 - aux1432)<=0)
6451 -6454 0
6452 -6455 0
315 -6454 0
315 6451 -6455 0
315 6452 -6457 0
c (0<=(SATLiteral(-315) + aux1431 - aux1432))
-6452 6457 0
-6451 6455 0
-315 6457 0
-315 -6452 6455 0
-315 -6451 6454 0
c ((aux1428 + aux1430 - aux1433)<=0)
6448 -6459 0
6449 -6460 0
6442 -6459 0
6442 6448 -6460 0
6442 6449 -6462 0
6443 -6460 0
6443 6448 -6462 0
6443 6449 -6464 0
c (0<=(aux1428 + aux1430 - aux1433))
-6449 6464 0
-6448 6462 0
-6443 6464 0
-6443 -6449 6462 0
-6443 -6448 6460 0
-6442 6462 0
-6442 -6449 6460 0
-6442 -6448 6459 0
c ((SATLiteral(317) - aux1434 + SATLiteral(212))<=0)
-212 -6466 0
-317 -6466 0
-317 -212 -6467 0
c (0<=(SATLiteral(317) - aux1434 + SATLiteral(212)))
212 6467 0
317 6467 0
317 212 6466 0
c ((SATLiteral(332) - aux1435 + SATLiteral(197))<=0)
-197 -6469 0
-332 -6469 0
-332 -197 -6470 0
c (0<=(SATLiteral(332) - aux1435 + SATLiteral(197)))
197 6470 0
332 6470 0
332 197 6469 0
c ((SATLiteral(47) - aux1436 + SATLiteral(182))<=0)
-182 -6472 0
-47 -6472 0
-47 -182 -6473 0
c (0<=(SATLiteral(47) - aux1436 + SATLiteral(182)))
182 6473 0
47 6473 0
47 182 6472 0
c ((SATLiteral(62) + SATLiteral(77) - aux1437)<=0)
-77 -6475 0
-62 -6475 0
-62 -77 -6476 0
c (0<=(SATLiteral(62) + SATLiteral(77) - aux1437))
77 6476 0
62 6476 0
62 77 6475 0
c ((SATLiteral(347) + aux1437 - aux1438)<=0)
6475 -6478 0
6476 -6479 0
-347 -6478 0
-347 6475 -6479 0
-347 6476 -6481 0
c (0<=(SATLiteral(347) + aux1437 - aux1438))
-6476 6481 0
-6475 6479 0
347 6481 0
347 -6476 6479 0
347 -6475 6478 0
c ((aux1434 + aux1436 - aux1439)<=0)
6472 -6483 0
6473 -6484 0
6466 -6483 0
6466 6472 -6484 0
6466 6473 -6486 0
6467 -6484 0
6467 6472 -6486 0
6467 6473 -6488 0
c (0<=(aux1434 + aux1436 - aux1439))
-6473 6488 0
-6472 6486 0
-6467 6488 0
-6467 -6473 6486 0
-6467 -6472 6484 0
-6466 6486 0
-6466 -6473 6484 0
-6466 -6472 6483 0
c ((SATLiteral(319) - aux1440 + SATLiteral(214))<=0)
-214 -6490 0
-319 -6490 0
-319 -214 -6491 0
c (0<=(SATLiteral(319) - aux1440 + SATLiteral(214)))
214 6491 0
319 6491 0
319 214 6490 0
c ((SATLiteral(334) - aux1441 + SATLiteral(199))<=0)
-199 -6493 0
-334 -6493 0
-334 -199 -6494 0
c (0<=(SATLiteral(334) - aux1441 + SATLiteral(199)))
199 6494 0
334 6494 0
334 199 6493 0
c ((SATLiteral(49) - aux1442 + SATLiteral(184))<=0)
-184 -6496 0
-49 -6496 0
-49 -184 -6497 0
c (0<=(SATLiteral(49) - aux1442 + SATLiteral(184)))
184 6497 0
49 6497 0
49 184 6496 0
c ((SATLiteral(64) + SATLiteral(79) - aux1443)<=0)
-79 -6499 0
-64 -6499 0
-64 -79 -6500 0
c (0<=(SATLiteral(64) + SATLiteral(79) - aux1443))
79 6500 0
64 6500 0
64 79 6499 0
c ((SATLiteral(349) + aux1443 - aux1444)<=0)
6499 -6502 0
6500 -6503 0
-349 -6502 0
-349 6499 -6503 0
-349 6500 -6505 0
c (0<=(SATLiteral(349) + aux1443 - aux1444))
-6500 6505 0
-6499 6503 0
349 6505 0
349 -6500 6503 0
349 -6499 6502 0
c ((aux1440 + aux1442 - aux1445)<=0)
6496 -6507 0
6497 -6508 0
6490 -6507 0
6490 6496 -6508 0
6490 6497 -6510 0
6491 -6508 0
6491 6496 -6510 0
6491 6497 -6512 0
c (0<=(aux1440 + aux1442 - aux1445))
-6497 6512 0
-6496 6510 0
-6491 6512 0
-6491 -6497 6510 0
-6491 -6496 6508 0
-6490 6510 0
-6490 -6497 6508 0
-6490 -6496 6507 0
c ((SATLiteral(321) - aux1446 + SATLiteral(216))<=0)
-216 -6514 0
-321 -6514 0
-321 -216 -6515 0
c (0<=(SATLiteral(321) - aux1446 + SATLiteral(216)))
216 6515 0
321 6515 0
321 216 6514 0
c ((SATLiteral(336) - aux1447 + SATLiteral(201))<=0)
-201 -6517 0
-336 -6517 0
-336 -201 -6518 0
c (0<=(SATLiteral(336) - aux1447 + SATLiteral(201)))
201 6518 0
336 6518 0
336 201 6517 0
c ((SATLiteral(51) - aux1448 + SATLiteral(186))<=0)
-186 -6520 0
-51 -6520 0
-51 -186 -6521 0
c (0<=(SATLiteral(51) - aux1448 + SATLiteral(186)))
186 6521 0
51 6521 0
51 186 6520 0
c ((SATLiteral(66) + SATLiteral(81) - aux1449)<=0)
-81 -6523 0
-66 -6523 0
-66 -81 -6524 0
c (0<=(SATLiteral(66) + SATLiteral(81) - aux1449))
81 6524 0
66 6524 0
66 81 6523 0
c ((SATLiteral(351) + aux1449 - aux1450)<=0)
6523 -6526 0
6524 -6527 0
-351 -6526 0
-351 6523 -6527 0
-351 6524 -6529 0
c (0<=(SATLiteral(351) + aux1449 - aux1450))
-6524 6529 0
-6523 6527 0
351 6529 0
351 -6524 6527 0
351 -6523 6526 0
c ((aux1446 + aux1448 - aux1451)<=0)
6520 -6531 0
6521 -6532 0
6514 -6531 0
6514 6520 -6532 0
6514 6521 -6534 0
6515 -6532 0
6515 6520 -6534 0
6515 6521 -6536 0
c (0<=(aux1446 + aux1448 - aux1451))
-6521 6536 0
-6520 6534 0
-6515 6536 0
-6515 -6521 6534 0
-6515 -6520 6532 0
-6514 6534 0
-6514 -6521 6532 0
-6514 -6520 6531 0
c ((SATLiteral(323) - aux1452 + SATLiteral(218))<=0)
-218 -6538 0
-323 -6538 0
-323 -218 -6539 0
c (0<=(SATLiteral(323) - aux1452 + SATLiteral(218)))
218 6539 0
323 6539 0
323 218 6538 0
c ((SATLiteral(338) - aux1453 + SATLiteral(203))<=0)
-203 -6541 0
-338 -6541 0
-338 -203 -6542 0
c (0<=(SATLiteral(338) - aux1453 + SATLiteral(203)))
203 6542 0
338 6542 0
338 203 6541 0
c ((SATLiteral(53) - aux1454 + SATLiteral(188))<=0)
-188 -6544 0
-53 -6544 0
-53 -188 -6545 0
c (0<=(SATLiteral(53) - aux1454 + SATLiteral(188)))
188 6545 0
53 6545 0
53 188 6544 0
c ((SATLiteral(68) + SATLiteral(83) - aux1455)<=0)
-83 -6547 0
-68 -6547 0
-68 -83 -6548 0
c (0<=(SATLiteral(68) + SATLiteral(83) - aux1455))
83 6548 0
68 6548 0
68 83 6547 0
c ((SATLiteral(353) + aux1455 - aux1456)<=0)
6547 -6550 0
6548 -6551 0
-353 -6550 0
-353 6547 -6551 0
-353 6548 -6553 0
c (0<=(SATLiteral(353) + aux1455 - aux1456))
-6548 6553 0
-6547 6551 0
353 6553 0
353 -6548 6551 0
353 -6547 6550 0
c ((aux1452 + aux1454 - aux1457)<=0)
6544 -6555 0
6545 -6556 0
6538 -6555 0
6538 6544 -6556 0
6538 6545 -6558 0
6539 -6556 0
6539 6544 -6558 0
6539 6545 -6560 0
c (0<=(aux1452 + aux1454 - aux1457))
-6545 6560 0
-6544 6558 0
-6539 6560 0
-6539 -6545 6558 0
-6539 -6544 6556 0
-6538 6558 0
-6538 -6545 6556 0
-6538 -6544 6555 0
c ((SATLiteral(325) - aux1458 + SATLiteral(220))<=0)
-220 -6562 0
-325 -6562 0
-325 -220 -6563 0
c (0<=(SATLiteral(325) - aux1458 + SATLiteral(220)))
220 6563 0
325 6563 0
325 220 6562 0
c ((SATLiteral(340) - aux1459 + SATLiteral(205))<=0)
-205 -6565 0
-340 -6565 0
-340 -205 -6566 0
c (0<=(SATLiteral(340) - aux1459 + SATLiteral(205)))
205 6566 0
340 6566 0
340 205 6565 0
c ((SATLiteral(55) - aux1460 + SATLiteral(190))<=0)
-190 -6568 0
-55 -6568 0
-55 -190 -6569 0
c (0<=(SATLiteral(55) - aux1460 + SATLiteral(190)))
190 6569 0
55 6569 0
55 190 6568 0
c ((SATLiteral(70) + SATLiteral(85) - aux1461)<=0)
-85 -6571 0
-70 -6571 0
-70 -85 -6572 0
c (0<=(SATLiteral(70) + SATLiteral(85) - aux1461))
85 6572 0
70 6572 0
70 85 6571 0
c ((SATLiteral(355) + aux1461 - aux1462)<=0)
6571 -6574 0
6572 -6575 0
-355 -6574 0
-355 6571 -6575 0
-355 6572 -6577 0
c (0<=(SATLiteral(355) + aux1461 - aux1462))
-6572 6577 0
-6571 6575 0
355 6577 0
355 -6572 6575 0
355 -6571 6574 0
c ((aux1458 + aux1460 - aux1463)<=0)
6568 -6579 0
6569 -6580 0
6562 -6579 0
6562 6568 -6580 0
6562 6569 -6582 0
6563 -6580 0
6563 6568 -6582 0
6563 6569 -6584 0
c (0<=(aux1458 + aux1460 - aux1463))
-6569 6584 0
-6568 6582 0
-6563 6584 0
-6563 -6569 6582 0
-6563 -6568 6580 0
-6562 6582 0
-6562 -6569 6580 0
-6562 -6568 6579 0
c ((SATLiteral(327) - aux1464 + SATLiteral(222))<=0)
-222 -6586 0
-327 -6586 0
-327 -222 -6587 0
c (0<=(SATLiteral(327) - aux1464 + SATLiteral(222)))
222 6587 0
327 6587 0
327 222 6586 0
c ((SATLiteral(342) - aux1465 + SATLiteral(207))<=0)
-207 -6589 0
-342 -6589 0
-342 -207 -6590 0
c (0<=(SATLiteral(342) - aux1465 + SATLiteral(207)))
207 6590 0
342 6590 0
342 207 6589 0
c ((SATLiteral(57) - aux1466 + SATLiteral(192))<=0)
-192 -6592 0
-57 -6592 0
-57 -192 -6593 0
c (0<=(SATLiteral(57) - aux1466 + SATLiteral(192)))
192 6593 0
57 6593 0
57 192 6592 0
c ((SATLiteral(72) + SATLiteral(87) - aux1467)<=0)
-87 -6595 0
-72 -6595 0
-72 -87 -6596 0
c (0<=(SATLiteral(72) + SATLiteral(87) - aux1467))
87 6596 0
72 6596 0
72 87 6595 0
c ((SATLiteral(357) + aux1467 - aux1468)<=0)
6595 -6598 0
6596 -6599 0
-357 -6598 0
-357 6595 -6599 0
-357 6596 -6601 0
c (0<=(SATLiteral(357) + aux1467 - aux1468))
-6596 6601 0
-6595 6599 0
357 6601 0
357 -6596 6599 0
357 -6595 6598 0
c ((aux1464 + aux1466 - aux1469)<=0)
6592 -6603 0
6593 -6604 0
6586 -6603 0
6586 6592 -6604 0
6586 6593 -6606 0
6587 -6604 0
6587 6592 -6606 0
6587 6593 -6608 0
c (0<=(aux1464 + aux1466 - aux1469))
-6593 6608 0
-6592 6606 0
-6587 6608 0
-6587 -6593 6606 0
-6587 -6592 6604 0
-6586 6606 0
-6586 -6593 6604 0
-6586 -6592 6603 0
c ((SATLiteral(329) - aux1470 + SATLiteral(224))<=0)
-224 -6610 0
-329 -6610 0
-329 -224 -6611 0
c (0<=(SATLiteral(329) - aux1470 + SATLiteral(224)))
224 6611 0
329 6611 0
329 224 6610 0
c ((SATLiteral(344) - aux1471 + SATLiteral(209))<=0)
-209 -6613 0
-344 -6613 0
-344 -209 -6614 0
c (0<=(SATLiteral(344) - aux1471 + SATLiteral(209)))
209 6614 0
344 6614 0
344 209 6613 0
c ((SATLiteral(59) - aux1472 + SATLiteral(194))<=0)
-194 -6616 0
-59 -6616 0
-59 -194 -6617 0
c (0<=(SATLiteral(59) - aux1472 + SATLiteral(194)))
194 6617 0
59 6617 0
59 194 6616 0
c ((SATLiteral(74) + SATLiteral(89) - aux1473)<=0)
-89 -6619 0
-74 -6619 0
-74 -89 -6620 0
c (0<=(SATLiteral(74) + SATLiteral(89) - aux1473))
89 6620 0
74 6620 0
74 89 6619 0
c ((SATLiteral(359) + aux1473 - aux1474)<=0)
6619 -6622 0
6620 -6623 0
-359 -6622 0
-359 6619 -6623 0
-359 6620 -6625 0
c (0<=(SATLiteral(359) + aux1473 - aux1474))
-6620 6625 0
-6619 6623 0
359 6625 0
359 -6620 6623 0
359 -6619 6622 0
c ((aux1470 + aux1472 - aux1475)<=0)
6616 -6627 0
6617 -6628 0
6610 -6627 0
6610 6616 -6628 0
6610 6617 -6630 0
6611 -6628 0
6611 6616 -6630 0
6611 6617 -6632 0
c (0<=(aux1470 + aux1472 - aux1475))
-6617 6632 0
-6616 6630 0
-6611 6632 0
-6611 -6617 6630 0
-6611 -6616 6628 0
-6610 6630 0
-6610 -6617 6628 0
-6610 -6616 6627 0
c ((SATLiteral(331) - aux1476 + SATLiteral(226))<=0)
-226 -6634 0
-331 -6634 0
-331 -226 -6635 0
c (0<=(SATLiteral(331) - aux1476 + SATLiteral(226)))
226 6635 0
331 6635 0
331 226 6634 0
c ((SATLiteral(346) - aux1477 + SATLiteral(211))<=0)
-211 -6637 0
-346 -6637 0
-346 -211 -6638 0
c (0<=(SATLiteral(346) - aux1477 + SATLiteral(211)))
211 6638 0
346 6638 0
346 211 6637 0
c ((SATLiteral(61) - aux1478 + SATLiteral(196))<=0)
-196 -6640 0
-61 -6640 0
-61 -196 -6641 0
c (0<=(SATLiteral(61) - aux1478 + SATLiteral(196)))
196 6641 0
61 6641 0
61 196 6640 0
c ((SATLiteral(76) + SATLiteral(91) - aux1479)<=0)
-91 -6643 0
-76 -6643 0
-76 -91 -6644 0
c (0<=(SATLiteral(76) + SATLiteral(91) - aux1479))
91 6644 0
76 6644 0
76 91 6643 0
c ((SATLiteral(361) + aux1479 - aux1480)<=0)
6643 -6646 0
6644 -6647 0
-361 -6646 0
-361 6643 -6647 0
-361 6644 -6649 0
c (0<=(SATLiteral(361) + aux1479 - aux1480))
-6644 6649 0
-6643 6647 0
361 6649 0
361 -6644 6647 0
361 -6643 6646 0
c ((aux1476 + aux1478 - aux1481)<=0)
6640 -6651 0
6641 -6652 0
6634 -6651 0
6634 6640 -6652 0
6634 6641 -6654 0
6635 -6652 0
6635 6640 -6654 0
6635 6641 -6656 0
c (0<=(aux1476 + aux1478 - aux1481))
-6641 6656 0
-6640 6654 0
-6635 6656 0
-6635 -6641 6654 0
-6635 -6640 6652 0
-6634 6654 0
-6634 -6641 6652 0
-6634 -6640 6651 0
c ((SATLiteral(-330) - aux1482 + SATLiteral(-225))<=0)
225 -6658 0
330 -6658 0
330 225 -6659 0
c (0<=(SATLiteral(-330) - aux1482 + SATLiteral(-225)))
-225 6659 0
-330 6659 0
-330 -225 6658 0
c ((SATLiteral(-345) - aux1483 + SATLiteral(-210))<=0)
210 -6661 0
345 -6661 0
345 210 -6662 0
c (0<=(SATLiteral(-345) - aux1483 + SATLiteral(-210)))
-210 6662 0
-345 6662 0
-345 -210 6661 0
c ((SATLiteral(-60) - aux1484 + SATLiteral(-195))<=0)
195 -6664 0
60 -6664 0
60 195 -6665 0
c (0<=(SATLiteral(-60) - aux1484 + SATLiteral(-195)))
-195 6665 0
-60 6665 0
-60 -195 6664 0
c ((SATLiteral(-75) + SATLiteral(-90) - aux1485)<=0)
90 -6667 0
75 -6667 0
75 90 -6668 0
c (0<=(SATLiteral(-75) + SATLiteral(-90) - aux1485))
-90 6668 0
-75 6668 0
-75 -90 6667 0
c ((SATLiteral(-360) + aux1485 - aux1486)<=0)
6667 -6670 0
6668 -6671 0
360 -6670 0
360 6667 -6671 0
360 6668 -6673 0
c (0<=(SATLiteral(-360) + aux1485 - aux1486))
-6668 6673 0
-6667 6671 0
-360 6673 0
-360 -6668 6671 0
-360 -6667 6670 0
c ((aux1482 + aux1484 - aux1487)<=0)
6664 -6675 0
6665 -6676 0
6658 -6675 0
6658 6664 -6676 0
6658 6665 -6678 0
6659 -6676 0
6659 6664 -6678 0
6659 6665 -6680 0
c (0<=(aux1482 + aux1484 - aux1487))
-6665 6680 0
-6664 6678 0
-6659 6680 0
-6659 -6665 6678 0
-6659 -6664 6676 0
-6658 6678 0
-6658 -6665 6676 0
-6658 -6664 6675 0
c ((SATLiteral(362) - aux1488 + SATLiteral(257))<=0)
-257 -6682 0
-362 -6682 0
-362 -257 -6683 0
c (0<=(SATLiteral(362) - aux1488 + SATLiteral(257)))
257 6683 0
362 6683 0
362 257 6682 0
c ((SATLiteral(377) - aux1489 + SATLiteral(242))<=0)
-242 -6685 0
-377 -6685 0
-377 -242 -6686 0
c (0<=(SATLiteral(377) - aux1489 + SATLiteral(242)))
242 6686 0
377 6686 0
377 242 6685 0
c ((SATLiteral(92) - aux1490 + SATLiteral(227))<=0)
-227 -6688 0
-92 -6688 0
-92 -227 -6689 0
c (0<=(SATLiteral(92) - aux1490 + SATLiteral(227)))
227 6689 0
92 6689 0
92 227 6688 0
c ((SATLiteral(107) + SATLiteral(122) - aux1491)<=0)
-122 -6691 0
-107 -6691 0
-107 -122 -6692 0
c (0<=(SATLiteral(107) + SATLiteral(122) - aux1491))
122 6692 0
107 6692 0
107 122 6691 0
c ((SATLiteral(392) + aux1491 - aux1492)<=0)
6691 -6694 0
6692 -6695 0
-392 -6694 0
-392 6691 -6695 0
-392 6692 -6697 0
c (0<=(SATLiteral(392) + aux1491 - aux1492))
-6692 6697 0
-6691 6695 0
392 6697 0
392 -6692 6695 0
392 -6691 6694 0
c ((aux1488 + aux1490 - aux1493)<=0)
6688 -6699 0
6689 -6700 0
6682 -6699 0
6682 6688 -6700 0
6682 6689 -6702 0
6683 -6700 0
6683 6688 -6702 0
6683 6689 -6704 0
c (0<=(aux1488 + aux1490 - aux1493))
-6689 6704 0
-6688 6702 0
-6683 6704 0
-6683 -6689 6702 0
-6683 -6688 6700 0
-6682 6702 0
-6682 -6689 6700 0
-6682 -6688 6699 0
c ((SATLiteral(364) - aux1494 + SATLiteral(259))<=0)
-259 -6706 0
-364 -6706 0
-364 -259 -6707 0
c (0<=(SATLiteral(364) - aux1494 + SATLiteral(259)))
259 6707 0
364 6707 0
364 259 6706 0
c ((SATLiteral(379) - aux1495 + SATLiteral(244))<=0)
-244 -6709 0
-379 -6709 0
-379 -244 -6710 0
c (0<=(SATLiteral(379) - aux1495 + SATLiteral(244)))
244 6710 0
379 6710 0
379 244 6709 0
c ((SATLiteral(94) - aux1496 + SATLiteral(229))<=0)
-229 -6712 0
-94 -6712 0
-94 -229 -6713 0
c (0<=(SATLiteral(94) - aux1496 + SATLiteral(229)))
229 6713 0
94 6713 0
94 229 6712 0
c ((SATLiteral(109) + SATLiteral(124) - aux1497)<=0)
-124 -6715 0
-109 -6715 0
-109 -124 -6716 0
c (0<=(SATLiteral(109) + SATLiteral(124) - aux1497))
124 6716 0
109 6716 0
109 124 6715 0
c ((SATLiteral(394) + aux1497 - aux1498)<=0)
6715 -6718 0
6716 -6719 0
-394 -6718 0
-394 6715 -6719 0
-394 6716 -6721 0
c (0<=(SATLiteral(394) + aux1497 - aux1498))
-6716 6721 0
-6715 6719 0
394 6721 0
394 -6716 6719 0
394 -6715 6718 0
c ((aux1494 + aux1496 - aux1499)<=0)
6712 -6723 0
6713 -6724 0
6706 -6723 0
6706 6712 -6724 0
6706 6713 -6726 0
6707 -6724 0
6707 6712 -6726 0
6707 6713 -6728 0
c (0<=(aux1494 + aux1496 - aux1499))
-6713 6728 0
-6712 6726 0
-6707 6728 0
-6707 -6713 6726 0
-6707 -6712 6724 0
-6706 6726 0
-6706 -6713 6724 0
-6706 -6712 6723 0
c ((SATLiteral(366) - aux1500 + SATLiteral(261))<=0)
-261 -6730 0
-366 -6730 0
-366 -261 -6731 0
c (0<=(SATLiteral(366) - aux1500 + SATLiteral(261)))
261 6731 0
366 6731 0
366 261 6730 0
c ((SATLiteral(381) - aux1501 + SATLiteral(246))<=0)
-246 -6733 0
-381 -6733 0
-381 -246 -6734 0
c (0<=(SATLiteral(381) - aux1501 + SATLiteral(246)))
246 6734 0
381 6734 0
381 246 6733 0
c ((SATLiteral(96) - aux1502 + SATLiteral(231))<=0)
-231 -6736 0
-96 -6736 0
-96 -231 -6737 0
c (0<=(SATLiteral(96) - aux1502 + SATLiteral(231)))
231 6737 0
96 6737 0
96 231 6736 0
c ((SATLiteral(111) + SATLiteral(126) - aux1503)<=0)
-126 -6739 0
-111 -6739 0
-111 -126 -6740 0
c (0<=(SATLiteral(111) + SATLiteral(126) - aux1503))
126 6740 0
111 6740 0
111 126 6739 0
c ((SATLiteral(396) + aux1503 - aux1504)<=0)
6739 -6742 0
6740 -6743 0
-396 -6742 0
-396 6739 -6743 0
-396 6740 -6745 0
c (0<=(SATLiteral(396) + aux1503 - aux1504))
-6740 6745 0
-6739 6743 0
396 6745 0
396 -6740 6743 0
396 -6739 6742 0
c ((aux1500 + aux1502 - aux1505)<=0)
6736 -6747 0
6737 -6748 0
6730 -6747 0
6730 6736 -6748 0
6730 6737 -6750 0
6731 -6748 0
6731 6736 -6750 0
6731 6737 -6752 0
c (0<=(aux1500 + aux1502 - aux1505))
-6737 6752 0
-6736 6750 0
-6731 6752 0
-6731 -6737 6750 0
-6731 -6736 6748 0
-6730 6750 0
-6730 -6737 6748 0
-6730 -6736 6747 0
c ((SATLiteral(368) - aux1506 + SATLiteral(263))<=0)
-263 -6754 0
-368 -6754 0
-368 -263 -6755 0
c (0<=(SATLiteral(368) - aux1506 + SATLiteral(263)))
263 6755 0
368 6755 0
368 263 6754 0
c ((SATLiteral(383) - aux1507 + SATLiteral(248))<=0)
-248 -6757 0
-383 -6757 0
-383 -248 -6758 0
c (0<=(SATLiteral(383) - aux1507 + SATLiteral(248)))
248 6758 0
383 6758 0
383 248 6757 0
c ((SATLiteral(98) - aux1508 + SATLiteral(233))<=0)
-233 -6760 0
-98 -6760 0
-98 -233 -6761 0
c (0<=(SATLiteral(98) - aux1508 + SATLiteral(233)))
233 6761 0
98 6761 0
98 233 6760 0
c ((SATLiteral(113) + SATLiteral(128) - aux1509)<=0)
-128 -6763 0
-113 -6763 0
-113 -128 -6764 0
c (0<=(SATLiteral(113) + SATLiteral(128) - aux1509))
128 6764 0
113 6764 0
113 128 6763 0
c ((SATLiteral(398) + aux1509 - aux1510)<=0)
6763 -6766 0
6764 -6767 0
-398 -6766 0
-398 6763 -6767 0
-398 6764 -6769 0
c (0<=(SATLiteral(398) + aux1509 - aux1510))
-6764 6769 0
-6763 6767 0
398 6769 0
398 -6764 6767 0
398 -6763 6766 0
c ((aux1506 + aux1508 - aux1511)<=0)
6760 -6771 0
6761 -6772 0
6754 -6771 0
6754 6760 -6772 0
6754 6761 -6774 0
6755 -6772 0
6755 6760 -6774 0
6755 6761 -6776 0
c (0<=(aux1506 + aux1508 - aux1511))
-6761 6776 0
-6760 6774 0
-6755 6776 0
-6755 -6761 6774 0
-6755 -6760 6772 0
-6754 6774 0
-6754 -6761 6772 0
-6754 -6760 6771 0
c ((SATLiteral(370) - aux1512 + SATLiteral(265))<=0)
-265 -6778 0
-370 -6778 0
-370 -265 -6779 0
c (0<=(SATLiteral(370) - aux1512 + SATLiteral(265)))
265 6779 0
370 6779 0
370 265 6778 0
c ((SATLiteral(385) - aux1513 + SATLiteral(250))<=0)
-250 -6781 0
-385 -6781 0
-385 -250 -6782 0
c (0<=(SATLiteral(385) - aux1513 + SATLiteral(250)))
250 6782 0
385 6782 0
385 250 6781 0
c ((SATLiteral(100) - aux1514 + SATLiteral(235))<=0)
-235 -6784 0
-100 -6784 0
-100 -235 -6785 0
c (0<=(SATLiteral(100) - aux1514 + SATLiteral(235)))
235 6785 0
100 6785 0
100 235 6784 0
c ((SATLiteral(115) + SATLiteral(130) - aux1515)<=0)
-130 -6787 0
-115 -6787 0
-115 -130 -6788 0
c (0<=(SATLiteral(115) + SATLiteral(130) - aux1515))
130 6788 0
115 6788 0
115 130 6787 0
c ((SATLiteral(400) + aux1515 - aux1516)<=0)
6787 -6790 0
6788 -6791 0
-400 -6790 0
-400 6787 -6791 0
-400 6788 -6793 0
c (0<=(SATLiteral(400) + aux1515 - aux1516))
-6788 6793 0
-6787 6791 0
400 6793 0
400 -6788 6791 0
400 -6787 6790 0
c ((aux1512 + aux1514 - aux1517)<=0)
6784 -6795 0
6785 -6796 0
6778 -6795 0
6778 6784 -6796 0
6778 6785 -6798 0
6779 -6796 0
6779 6784 -6798 0
6779 6785 -6800 0
c (0<=(aux1512 + aux1514 - aux1517))
-6785 6800 0
-6784 6798 0
-6779 6800 0
-6779 -6785 6798 0
-6779 -6784 6796 0
-6778 6798 0
-6778 -6785 6796 0
-6778 -6784 6795 0
c ((SATLiteral(372) - aux1518 + SATLiteral(267))<=0)
-267 -6802 0
-372 -6802 0
-372 -267 -6803 0
c (0<=(SATLiteral(372) - aux1518 + SATLiteral(267)))
267 6803 0
372 6803 0
372 267 6802 0
c ((SATLiteral(387) - aux1519 + SATLiteral(252))<=0)
-252 -6805 0
-387 -6805 0
-387 -252 -6806 0
c (0<=(SATLiteral(387) - aux1519 + SATLiteral(252)))
252 6806 0
387 6806 0
387 252 6805 0
c ((SATLiteral(102) - aux1520 + SATLiteral(237))<=0)
-237 -6808 0
-102 -6808 0
-102 -237 -6809 0
c (0<=(SATLiteral(102) - aux1520 + SATLiteral(237)))
237 6809 0
102 6809 0
102 237 6808 0
c ((SATLiteral(117) + SATLiteral(132) - aux1521)<=0)
-132 -6811 0
-117 -6811 0
-117 -132 -6812 0
c (0<=(SATLiteral(117) + SATLiteral(132) - aux1521))
132 6812 0
117 6812 0
117 132 6811 0
c ((SATLiteral(402) + aux1521 - aux1522)<=0)
6811 -6814 0
6812 -6815 0
-402 -6814 0
-402 6811 -6815 0
-402 6812 -6817 0
c (0<=(SATLiteral(402) + aux1521 - aux1522))
-6812 6817 0
-6811 6815 0
402 6817 0
402 -6812 6815 0
402 -6811 6814 0
c ((aux1518 + aux1520 - aux1523)<=0)
6808 -6819 0
6809 -6820 0
6802 -6819 0
6802 6808 -6820 0
6802 6809 -6822 0
6803 -6820 0
6803 6808 -6822 0
6803 6809 -6824 0
c (0<=(aux1518 + aux1520 - aux1523))
-6809 6824 0
-6808 6822 0
-6803 6824 0
-6803 -6809 6822 0
-6803 -6808 6820 0
-6802 6822 0
-6802 -6809 6820 0
-6802 -6808 6819 0
c ((SATLiteral(374) - aux1524 + SATLiteral(269))<=0)
-269 -6826 0
-374 -6826 0
-374 -269 -6827 0
c (0<=(SATLiteral(374) - aux1524 + SATLiteral(269)))
269 6827 0
374 6827 0
374 269 6826 0
c ((SATLiteral(389) - aux1525 + SATLiteral(254))<=0)
-254 -6829 0
-389 -6829 0
-389 -254 -6830 0
c (0<=(SATLiteral(389) - aux1525 + SATLiteral(254)))
254 6830 0
389 6830 0
389 254 6829 0
c ((SATLiteral(104) - aux1526 + SATLiteral(239))<=0)
-239 -6832 0
-104 -6832 0
-104 -239 -6833 0
c (0<=(SATLiteral(104) - aux1526 + SATLiteral(239)))
239 6833 0
104 6833 0
104 239 6832 0
c ((SATLiteral(119) + SATLiteral(134) - aux1527)<=0)
-134 -6835 0
-119 -6835 0
-119 -134 -6836 0
c (0<=(SATLiteral(119) + SATLiteral(134) - aux1527))
134 6836 0
119 6836 0
119 134 6835 0
c ((SATLiteral(404) + aux1527 - aux1528)<=0)
6835 -6838 0
6836 -6839 0
-404 -6838 0
-404 6835 -6839 0
-404 6836 -6841 0
c (0<=(SATLiteral(404) + aux1527 - aux1528))
-6836 6841 0
-6835 6839 0
404 6841 0
404 -6836 6839 0
404 -6835 6838 0
c ((aux1524 + aux1526 - aux1529)<=0)
6832 -6843 0
6833 -6844 0
6826 -6843 0
6826 6832 -6844 0
6826 6833 -6846 0
6827 -6844 0
6827 6832 -6846 0
6827 6833 -6848 0
c (0<=(aux1524 + aux1526 - aux1529))
-6833 6848 0
-6832 6846 0
-6827 6848 0
-6827 -6833 6846 0
-6827 -6832 6844 0
-6826 6846 0
-6826 -6833 6844 0
-6826 -6832 6843 0
c ((SATLiteral(376) - aux1530 + SATLiteral(271))<=0)
-271 -6850 0
-376 -6850 0
-376 -271 -6851 0
c (0<=(SATLiteral(376) - aux1530 + SATLiteral(271)))
271 6851 0
376 6851 0
376 271 6850 0
c ((SATLiteral(391) - aux1531 + SATLiteral(256))<=0)
-256 -6853 0
-391 -6853 0
-391 -256 -6854 0
c (0<=(SATLiteral(391) - aux1531 + SATLiteral(256)))
256 6854 0
391 6854 0
391 256 6853 0
c ((SATLiteral(106) - aux1532 + SATLiteral(241))<=0)
-241 -6856 0
-106 -6856 0
-106 -241 -6857 0
c (0<=(SATLiteral(106) - aux1532 + SATLiteral(241)))
241 6857 0
106 6857 0
106 241 6856 0
c ((SATLiteral(121) + SATLiteral(136) - aux1533)<=0)
-136 -6859 0
-121 -6859 0
-121 -136 -6860 0
c (0<=(SATLiteral(121) + SATLiteral(136) - aux1533))
136 6860 0
121 6860 0
121 136 6859 0
c ((SATLiteral(406) + aux1533 - aux1534)<=0)
6859 -6862 0
6860 -6863 0
-406 -6862 0
-406 6859 -6863 0
-406 6860 -6865 0
c (0<=(SATLiteral(406) + aux1533 - aux1534))
-6860 6865 0
-6859 6863 0
406 6865 0
406 -6860 6863 0
406 -6859 6862 0
c ((aux1530 + aux1532 - aux1535)<=0)
6856 -6867 0
6857 -6868 0
6850 -6867 0
6850 6856 -6868 0
6850 6857 -6870 0
6851 -6868 0
6851 6856 -6870 0
6851 6857 -6872 0
c (0<=(aux1530 + aux1532 - aux1535))
-6857 6872 0
-6856 6870 0
-6851 6872 0
-6851 -6857 6870 0
-6851 -6856 6868 0
-6850 6870 0
-6850 -6857 6868 0
-6850 -6856 6867 0
c ((SATLiteral(-375) - aux1536 + SATLiteral(-270))<=0)
270 -6874 0
375 -6874 0
375 270 -6875 0
c (0<=(SATLiteral(-375) - aux1536 + SATLiteral(-270)))
-270 6875 0
-375 6875 0
-375 -270 6874 0
c ((SATLiteral(-390) - aux1537 + SATLiteral(-255))<=0)
255 -6877 0
390 -6877 0
390 255 -6878 0
c (0<=(SATLiteral(-390) - aux1537 + SATLiteral(-255)))
-255 6878 0
-390 6878 0
-390 -255 6877 0
c ((SATLiteral(-105) - aux1538 + SATLiteral(-240))<=0)
240 -6880 0
105 -6880 0
105 240 -6881 0
c (0<=(SATLiteral(-105) - aux1538 + SATLiteral(-240)))
-240 6881 0
-105 6881 0
-105 -240 6880 0
c ((SATLiteral(-120) + SATLiteral(-135) - aux1539)<=0)
135 -6883 0
120 -6883 0
120 135 -6884 0
c (0<=(SATLiteral(-120) + SATLiteral(-135) - aux1539))
-135 6884 0
-120 6884 0
-120 -135 6883 0
c ((SATLiteral(-405) + aux1539 - aux1540)<=0)
6883 -6886 0
6884 -6887 0
405 -6886 0
405 6883 -6887 0
405 6884 -6889 0
c (0<=(SATLiteral(-405) + aux1539 - aux1540))
-6884 6889 0
-6883 6887 0
-405 6889 0
-405 -6884 6887 0
-405 -6883 6886 0
c ((aux1536 + aux1538 - aux1541)<=0)
6880 -6891 0
6881 -6892 0
6874 -6891 0
6874 6880 -6892 0
6874 6881 -6894 0
6875 -6892 0
6875 6880 -6894 0
6875 6881 -6896 0
c (0<=(aux1536 + aux1538 - aux1541))
-6881 6896 0
-6880 6894 0
-6875 6896 0
-6875 -6881 6894 0
-6875 -6880 6892 0
-6874 6894 0
-6874 -6881 6892 0
-6874 -6880 6891 0
c ((SATLiteral(677) - aux1542 + SATLiteral(572))<=0)
-572 -6898 0
-677 -6898 0
-677 -572 -6899 0
c (0<=(SATLiteral(677) - aux1542 + SATLiteral(572)))
572 6899 0
677 6899 0
677 572 6898 0
c ((SATLiteral(692) - aux1543 + SATLiteral(557))<=0)
-557 -6901 0
-692 -6901 0
-692 -557 -6902 0
c (0<=(SATLiteral(692) - aux1543 + SATLiteral(557)))
557 6902 0
692 6902 0
692 557 6901 0
c (( - aux1544 + SATLiteral(407) + SATLiteral(542))<=0)
-542 -6904 0
-407 -6904 0
-407 -542 -6905 0
c (0<=( - aux1544 + SATLiteral(407) + SATLiteral(542)))
542 6905 0
407 6905 0
407 542 6904 0
c (( - aux1545 + SATLiteral(422) + SATLiteral(437))<=0)
-437 -6907 0
-422 -6907 0
-422 -437 -6908 0
c (0<=( - aux1545 + SATLiteral(422) + SATLiteral(437)))
437 6908 0
422 6908 0
422 437 6907 0
c ((SATLiteral(707) + aux1545 - aux1546)<=0)
6907 -6910 0
6908 -6911 0
-707 -6910 0
-707 6907 -6911 0
-707 6908 -6913 0
c (0<=(SATLiteral(707) + aux1545 - aux1546))
-6908 6913 0
-6907 6911 0
707 6913 0
707 -6908 6911 0
707 -6907 6910 0
c ((aux1542 + aux1544 - aux1547)<=0)
6904 -6915 0
6905 -6916 0
6898 -6915 0
6898 6904 -6916 0
6898 6905 -6918 0
6899 -6916 0
6899 6904 -6918 0
6899 6905 -6920 0
c (0<=(aux1542 + aux1544 - aux1547))
-6905 6920 0
-6904 6918 0
-6899 6920 0
-6899 -6905 6918 0
-6899 -6904 6916 0
-6898 6918 0
-6898 -6905 6916 0
-6898 -6904 6915 0
c ((SATLiteral(679) - aux1548 + SATLiteral(574))<=0)
-574 -6922 0
-679 -6922 0
-679 -574 -6923 0
c (0<=(SATLiteral(679) - aux1548 + SATLiteral(574)))
574 6923 0
679 6923 0
679 574 6922 0
c ((SATLiteral(694) - aux1549 + SATLiteral(559))<=0)
-559 -6925 0
-694 -6925 0
-694 -559 -6926 0
c (0<=(SATLiteral(694) - aux1549 + SATLiteral(559)))
559 6926 0
694 6926 0
694 559 6925 0
c (( - aux1550 + SATLiteral(409) + SATLiteral(544))<=0)
-544 -6928 0
-409 -6928 0
-409 -544 -6929 0
c (0<=( - aux1550 + SATLiteral(409) + SATLiteral(544)))
544 6929 0
409 6929 0
409 544 6928 0
c (( - aux1551 + SATLiteral(424) + SATLiteral(439))<=0)
-439 -6931 0
-424 -6931 0
-424 -439 -6932 0
c (0<=( - aux1551 + SATLiteral(424) + SATLiteral(439)))
439 6932 0
424 6932 0
424 439 6931 0
c ((SATLiteral(709) + aux1551 - aux1552)<=0)
6931 -6934 0
6932 -6935 0
-709 -6934 0
-709 6931 -6935 0
-709 6932 -6937 0
c (0<=(SATLiteral(709) + aux1551 - aux1552))
-6932 6937 0
-6931 6935 0
709 6937 0
709 -6932 6935 0
709 -6931 6934 0
c ((aux1548 + aux1550 - aux1553)<=0)
6928 -6939 0
6929 -6940 0
6922 -6939 0
6922 6928 -6940 0
6922 6929 -6942 0
6923 -6940 0
6923 6928 -6942 0
6923 6929 -6944 0
c (0<=(aux1548 + aux1550 - aux1553))
-6929 6944 0
-6928 6942 0
-6923 6944 0
-6923 -6929 6942 0
-6923 -6928 6940 0
-6922 6942 0
-6922 -6929 6940 0
-6922 -6928 6939 0
c ((SATLiteral(681) - aux1554 + SATLiteral(576))<=0)
-576 -6946 0
-681 -6946 0
-681 -576 -6947 0
c (0<=(SATLiteral(681) - aux1554 + SATLiteral(576)))
576 6947 0
681 6947 0
681 576 6946 0
c ((SATLiteral(696) - aux1555 + SATLiteral(561))<=0)
-561 -6949 0
-696 -6949 0
-696 -561 -6950 0
c (0<=(SATLiteral(696) - aux1555 + SATLiteral(561)))
561 6950 0
696 6950 0
696 561 6949 0
c (( - aux1556 + SATLiteral(411) + SATLiteral(546))<=0)
-546 -6952 0
-411 -6952 0
-411 -546 -6953 0
c (0<=( - aux1556 + SATLiteral(411) + SATLiteral(546)))
546 6953 0
411 6953 0
411 546 6952 0
c (( - aux1557 + SATLiteral(426) + SATLiteral(441))<=0)
-441 -6955 0
-426 -6955 0
-426 -441 -6956 0
c (0<=( - aux1557 + SATLiteral(426) + SATLiteral(441)))
441 6956 0
426 6956 0
426 441 6955 0
c ((SATLiteral(711) + aux1557 - aux1558)<=0)
6955 -6958 0
6956 -6959 0
-711 -6958 0
-711 6955 -6959 0
-711 6956 -6961 0
c (0<=(SATLiteral(711) + aux1557 - aux1558))
-6956 6961 0
-6955 6959 0
711 6961 0
711 -6956 6959 0
711 -6955 6958 0
c ((aux1554 + aux1556 - aux1559)<=0)
6952 -6963 0
6953 -6964 0
6946 -6963 0
6946 6952 -6964 0
6946 6953 -6966 0
6947 -6964 0
6947 6952 -6966 0
6947 6953 -6968 0
c (0<=(aux1554 + aux1556 - aux1559))
-6953 6968 0
-6952 6966 0
-6947 6968 0
-6947 -6953 6966 0
-6947 -6952 6964 0
-6946 6966 0
-6946 -6953 6964 0
-6946 -6952 6963 0
c ((SATLiteral(683) - aux1560 + SATLiteral(578))<=0)
-578 -6970 0
-683 -6970 0
-683 -578 -6971 0
c (0<=(SATLiteral(683) - aux1560 + SATLiteral(578)))
578 6971 0
683 6971 0
683 578 6970 0
c ((SATLiteral(698) - aux1561 + SATLiteral(563))<=0)
-563 -6973 0
-698 -6973 0
-698 -563 -6974 0
c (0<=(SATLiteral(698) - aux1561 + SATLiteral(563)))
563 6974 0
698 6974 0
698 563 6973 0
c (( - aux1562 + SATLiteral(413) + SATLiteral(548))<=0)
-548 -6976 0
-413 -6976 0
-413 -548 -6977 0
c (0<=( - aux1562 + SATLiteral(413) + SATLiteral(548)))
548 6977 0
413 6977 0
413 548 6976 0
c (( - aux1563 + SATLiteral(428) + SATLiteral(443))<=0)
-443 -6979 0
-428 -6979 0
-428 -443 -6980 0
c (0<=( - aux1563 + SATLiteral(428) + SATLiteral(443)))
443 6980 0
428 6980 0
428 443 6979 0
c ((SATLiteral(713) + aux1563 - aux1564)<=0)
6979 -6982 0
6980 -6983 0
-713 -6982 0
-713 6979 -6983 0
-713 6980 -6985 0
c (0<=(SATLiteral(713) + aux1563 - aux1564))
-6980 6985 0
-6979 6983 0
713 6985 0
713 -6980 6983 0
713 -6979 6982 0
c ((aux1560 + aux1562 - aux1565)<=0)
6976 -6987 0
6977 -6988 0
6970 -6987 0
6970 6976 -6988 0
6970 6977 -6990 0
6971 -6988 0
6971 6976 -6990 0
6971 6977 -6992 0
c (0<=(aux1560 + aux1562 - aux1565))
-6977 6992 0
-6976 6990 0
-6971 6992 0
-6971 -6977 6990 0
-6971 -6976 6988 0
-6970 6990 0
-6970 -6977 6988 0
-6970 -6976 6987 0
c ((SATLiteral(685) - aux1566 + SATLiteral(580))<=0)
-580 -6994 0
-685 -6994 0
-685 -580 -6995 0
c (0<=(SATLiteral(685) - aux1566 + SATLiteral(580)))
580 6995 0
685 6995 0
685 580 6994 0
c ((SATLiteral(700) - aux1567 + SATLiteral(565))<=0)
-565 -6997 0
-700 -6997 0
-700 -565 -6998 0
c (0<=(SATLiteral(700) - aux1567 + SATLiteral(565)))
565 6998 0
700 6998 0
700 565 6997 0
c (( - aux1568 + SATLiteral(415) + SATLiteral(550))<=0)
-550 -7000 0
-415 -7000 0
-415 -550 -7001 0
c (0<=( - aux1568 + SATLiteral(415) + SATLiteral(550)))
550 7001 0
415 7001 0
415 550 7000 0
c (( - aux1569 + SATLiteral(430) + SATLiteral(445))<=0)
-445 -7003 0
-430 -7003 0
-430 -445 -7004 0
c (0<=( - aux1569 + SATLiteral(430) + SATLiteral(445)))
445 7004 0
430 7004 0
430 445 7003 0
c ((SATLiteral(715) + aux1569 - aux1570)<=0)
7003 -7006 0
7004 -7007 0
-715 -7006 0
-715 7003 -7007 0
-715 7004 -7009 0
c (0<=(SATLiteral(715) + aux1569 - aux1570))
-7004 7009 0
-7003 7007 0
715 7009 0
715 -7004 7007 0
715 -7003 7006 0
c ((aux1566 + aux1568 - aux1571)<=0)
7000 -7011 0
7001 -7012 0
6994 -7011 0
6994 7000 -7012 0
6994 7001 -7014 0
6995 -7012 0
6995 7000 -7014 0
6995 7001 -7016 0
c (0<=(aux1566 + aux1568 - aux1571))
-7001 7016 0
-7000 7014 0
-6995 7016 0
-6995 -7001 7014 0
-6995 -7000 7012 0
-6994 7014 0
-6994 -7001 7012 0
-6994 -7000 7011 0
c ((SATLiteral(687) - aux1572 + SATLiteral(582))<=0)
-582 -7018 0
-687 -7018 0
-687 -582 -7019 0
c (0<=(SATLiteral(687) - aux1572 + SATLiteral(582)))
582 7019 0
687 7019 0
687 582 7018 0
c ((SATLiteral(702) - aux1573 + SATLiteral(567))<=0)
-567 -7021 0
-702 -7021 0
-702 -567 -7022 0
c (0<=(SATLiteral(702) - aux1573 + SATLiteral(567)))
567 7022 0
702 7022 0
702 567 7021 0
c (( - aux1574 + SATLiteral(417) + SATLiteral(552))<=0)
-552 -7024 0
-417 -7024 0
-417 -552 -7025 0
c (0<=( - aux1574 + SATLiteral(417) + SATLiteral(552)))
552 7025 0
417 7025 0
417 552 7024 0
c (( - aux1575 + SATLiteral(432) + SATLiteral(447))<=0)
-447 -7027 0
-432 -7027 0
-432 -447 -7028 0
c (0<=( - aux1575 + SATLiteral(432) + SATLiteral(447)))
447 7028 0
432 7028 0
432 447 7027 0
c ((SATLiteral(717) + aux1575 - aux1576)<=0)
7027 -7030 0
7028 -7031 0
-717 -7030 0
-717 7027 -7031 0
-717 7028 -7033 0
c (0<=(SATLiteral(717) + aux1575 - aux1576))
-7028 7033 0
-7027 7031 0
717 7033 0
717 -7028 7031 0
717 -7027 7030 0
c ((aux1572 + aux1574 - aux1577)<=0)
7024 -7035 0
7025 -7036 0
7018 -7035 0
7018 7024 -7036 0
7018 7025 -7038 0
7019 -7036 0
7019 7024 -7038 0
7019 7025 -7040 0
c (0<=(aux1572 + aux1574 - aux1577))
-7025 7040 0
-7024 7038 0
-7019 7040 0
-7019 -7025 7038 0
-7019 -7024 7036 0
-7018 7038 0
-7018 -7025 7036 0
-7018 -7024 7035 0
c ((SATLiteral(689) - aux1578 + SATLiteral(584))<=0)
-584 -7042 0
-689 -7042 0
-689 -584 -7043 0
c (0<=(SATLiteral(689) - aux1578 + SATLiteral(584)))
584 7043 0
689 7043 0
689 584 7042 0
c ((SATLiteral(704) - aux1579 + SATLiteral(569))<=0)
-569 -7045 0
-704 -7045 0
-704 -569 -7046 0
c (0<=(SATLiteral(704) - aux1579 + SATLiteral(569)))
569 7046 0
704 7046 0
704 569 7045 0
c (( - aux1580 + SATLiteral(419) + SATLiteral(554))<=0)
-554 -7048 0
-419 -7048 0
-419 -554 -7049 0
c (0<=( - aux1580 + SATLiteral(419) + SATLiteral(554)))
554 7049 0
419 7049 0
419 554 7048 0
c (( - aux1581 + SATLiteral(434) + SATLiteral(449))<=0)
-449 -7051 0
-434 -7051 0
-434 -449 -7052 0
c (0<=( - aux1581 + SATLiteral(434) + SATLiteral(449)))
449 7052 0
434 7052 0
434 449 7051 0
c ((SATLiteral(719) + aux1581 - aux1582)<=0)
7051 -7054 0
7052 -7055 0
-719 -7054 0
-719 7051 -7055 0
-719 7052 -7057 0
c (0<=(SATLiteral(719) + aux1581 - aux1582))
-7052 7057 0
-7051 7055 0
719 7057 0
719 -7052 7055 0
719 -7051 7054 0
c ((aux1578 + aux1580 - aux1583)<=0)
7048 -7059 0
7049 -7060 0
7042 -7059 0
7042 7048 -7060 0
7042 7049 -7062 0
7043 -7060 0
7043 7048 -7062 0
7043 7049 -7064 0
c (0<=(aux1578 + aux1580 - aux1583))
-7049 7064 0
-7048 7062 0
-7043 7064 0
-7043 -7049 7062 0
-7043 -7048 7060 0
-7042 7062 0
-7042 -7049 7060 0
-7042 -7048 7059 0
c ((SATLiteral(691) - aux1584 + SATLiteral(586))<=0)
-586 -7066 0
-691 -7066 0
-691 -586 -7067 0
c (0<=(SATLiteral(691) - aux1584 + SATLiteral(586)))
586 7067 0
691 7067 0
691 586 7066 0
c ((SATLiteral(706) - aux1585 + SATLiteral(571))<=0)
-571 -7069 0
-706 -7069 0
-706 -571 -7070 0
c (0<=(SATLiteral(706) - aux1585 + SATLiteral(571)))
571 7070 0
706 7070 0
706 571 7069 0
c (( - aux1586 + SATLiteral(421) + SATLiteral(556))<=0)
-556 -7072 0
-421 -7072 0
-421 -556 -7073 0
c (0<=( - aux1586 + SATLiteral(421) + SATLiteral(556)))
556 7073 0
421 7073 0
421 556 7072 0
c (( - aux1587 + SATLiteral(436) + SATLiteral(451))<=0)
-451 -7075 0
-436 -7075 0
-436 -451 -7076 0
c (0<=( - aux1587 + SATLiteral(436) + SATLiteral(451)))
451 7076 0
436 7076 0
436 451 7075 0
c ((SATLiteral(721) + aux1587 - aux1588)<=0)
7075 -7078 0
7076 -7079 0
-721 -7078 0
-721 7075 -7079 0
-721 7076 -7081 0
c (0<=(SATLiteral(721) + aux1587 - aux1588))
-7076 7081 0
-7075 7079 0
721 7081 0
721 -7076 7079 0
721 -7075 7078 0
c ((aux1584 + aux1586 - aux1589)<=0)
7072 -7083 0
7073 -7084 0
7066 -7083 0
7066 7072 -7084 0
7066 7073 -7086 0
7067 -7084 0
7067 7072 -7086 0
7067 7073 -7088 0
c (0<=(aux1584 + aux1586 - aux1589))
-7073 7088 0
-7072 7086 0
-7067 7088 0
-7067 -7073 7086 0
-7067 -7072 7084 0
-7066 7086 0
-7066 -7073 7084 0
-7066 -7072 7083 0
c ((SATLiteral(-690) - aux1590 + SATLiteral(-585))<=0)
585 -7090 0
690 -7090 0
690 585 -7091 0
c (0<=(SATLiteral(-690) - aux1590 + SATLiteral(-585)))
-585 7091 0
-690 7091 0
-690 -585 7090 0
c ((SATLiteral(-705) - aux1591 + SATLiteral(-570))<=0)
570 -7093 0
705 -7093 0
705 570 -7094 0
c (0<=(SATLiteral(-705) - aux1591 + SATLiteral(-570)))
-570 7094 0
-705 7094 0
-705 -570 7093 0
c (( - aux1592 + SATLiteral(-420) + SATLiteral(-555))<=0)
555 -7096 0
420 -7096 0
420 555 -7097 0
c (0<=( - aux1592 + SATLiteral(-420) + SATLiteral(-555)))
-555 7097 0
-420 7097 0
-420 -555 7096 0
c (( - aux1593 + SATLiteral(-435) + SATLiteral(-450))<=0)
450 -7099 0
435 -7099 0
435 450 -7100 0
c (0<=( - aux1593 + SATLiteral(-435) + SATLiteral(-450)))
-450 7100 0
-435 7100 0
-435 -450 7099 0
c ((SATLiteral(-720) + aux1593 - aux1594)<=0)
7099 -7102 0
7100 -7103 0
720 -7102 0
720 7099 -7103 0
720 7100 -7105 0
c (0<=(SATLiteral(-720) + aux1593 - aux1594))
-7100 7105 0
-7099 7103 0
-720 7105 0
-720 -7100 7103 0
-720 -7099 7102 0
c ((aux1590 + aux1592 - aux1595)<=0)
7096 -7107 0
7097 -7108 0
7090 -7107 0
7090 7096 -7108 0
7090 7097 -7110 0
7091 -7108 0
7091 7096 -7110 0
7091 7097 -7112 0
c (0<=(aux1590 + aux1592 - aux1595))
-7097 7112 0
-7096 7110 0
-7091 7112 0
-7091 -7097 7110 0
-7091 -7096 7108 0
-7090 7110 0
-7090 -7097 7108 0
-7090 -7096 7107 0
c ((SATLiteral(722) - aux1596 + SATLiteral(617))<=0)
-617 -7114 0
-722 -7114 0
-722 -617 -7115 0
c (0<=(SATLiteral(722) - aux1596 + SATLiteral(617)))
617 7115 0
722 7115 0
722 617 7114 0
c ((SATLiteral(737) - aux1597 + SATLiteral(602))<=0)
-602 -7117 0
-737 -7117 0
-737 -602 -7118 0
c (0<=(SATLiteral(737) - aux1597 + SATLiteral(602)))
602 7118 0
737 7118 0
737 602 7117 0
c (( - aux1598 + SATLiteral(452) + SATLiteral(587))<=0)
-587 -7120 0
-452 -7120 0
-452 -587 -7121 0
c (0<=( - aux1598 + SATLiteral(452) + SATLiteral(587)))
587 7121 0
452 7121 0
452 587 7120 0
c (( - aux1599 + SATLiteral(467) + SATLiteral(482))<=0)
-482 -7123 0
-467 -7123 0
-467 -482 -7124 0
c (0<=( - aux1599 + SATLiteral(467) + SATLiteral(482)))
482 7124 0
467 7124 0
467 482 7123 0
c ((SATLiteral(752) + aux1599 - aux1600)<=0)
7123 -7126 0
7124 -7127 0
-752 -7126 0
-752 7123 -7127 0
-752 7124 -7129 0
c (0<=(SATLiteral(752) + aux1599 - aux1600))
-7124 7129 0
-7123 7127 0
752 7129 0
752 -7124 7127 0
752 -7123 7126 0
c ((aux1596 + aux1598 - aux1601)<=0)
7120 -7131 0
7121 -7132 0
7114 -7131 0
7114 7120 -7132 0
7114 7121 -7134 0
7115 -7132 0
7115 7120 -7134 0
7115 7121 -7136 0
c (0<=(aux1596 + aux1598 - aux1601))
-7121 7136 0
-7120 7134 0
-7115 7136 0
-7115 -7121 7134 0
-7115 -7120 7132 0
-7114 7134 0
-7114 -7121 7132 0
-7114 -7120 7131 0
c ((SATLiteral(724) - aux1602 + SATLiteral(619))<=0)
-619 -7138 0
-724 -7138 0
-724 -619 -7139 0
c (0<=(SATLiteral(724) - aux1602 + SATLiteral(619)))
619 7139 0
724 7139 0
724 619 7138 0
c ((SATLiteral(739) - aux1603 + SATLiteral(604))<=0)
-604 -7141 0
-739 -7141 0
-739 -604 -7142 0
c (0<=(SATLiteral(739) - aux1603 + SATLiteral(604)))
604 7142 0
739 7142 0
739 604 7141 0
c (( - aux1604 + SATLiteral(454) + SATLiteral(589))<=0)
-589 -7144 0
-454 -7144 0
-454 -589 -7145 0
c (0<=( - aux1604 + SATLiteral(454) + SATLiteral(589)))
589 7145 0
454 7145 0
454 589 7144 0
c (( - aux1605 + SATLiteral(469) + SATLiteral(484))<=0)
-484 -7147 0
-469 -7147 0
-469 -484 -7148 0
c (0<=( - aux1605 + SATLiteral(469) + SATLiteral(484)))
484 7148 0
469 7148 0
469 484 7147 0
c ((SATLiteral(754) + aux1605 - aux1606)<=0)
7147 -7150 0
7148 -7151 0
-754 -7150 0
-754 7147 -7151 0
-754 7148 -7153 0
c (0<=(SATLiteral(754) + aux1605 - aux1606))
-7148 7153 0
-7147 7151 0
754 7153 0
754 -7148 7151 0
754 -7147 7150 0
c ((aux1602 + aux1604 - aux1607)<=0)
7144 -7155 0
7145 -7156 0
7138 -7155 0
7138 7144 -7156 0
7138 7145 -7158 0
7139 -7156 0
7139 7144 -7158 0
7139 7145 -7160 0
c (0<=(aux1602 + aux1604 - aux1607))
-7145 7160 0
-7144 7158 0
-7139 7160 0
-7139 -7145 7158 0
-7139 -7144 7156 0
-7138 7158 0
-7138 -7145 7156 0
-7138 -7144 7155 0
c ((SATLiteral(726) - aux1608 + SATLiteral(621))<=0)
-621 -7162 0
-726 -7162 0
-726 -621 -7163 0
c (0<=(SATLiteral(726) - aux1608 + SATLiteral(621)))
621 7163 0
726 7163 0
726 621 7162 0
c ((SATLiteral(741) - aux1609 + SATLiteral(606))<=0)
-606 -7165 0
-741 -7165 0
-741 -606 -7166 0
c (0<=(SATLiteral(741) - aux1609 + SATLiteral(606)))
606 7166 0
741 7166 0
741 606 7165 0
c (( - aux1610 + SATLiteral(456) + SATLiteral(591))<=0)
-591 -7168 0
-456 -7168 0
-456 -591 -7169 0
c (0<=( - aux1610 + SATLiteral(456) + SATLiteral(591)))
591 7169 0
456 7169 0
456 591 7168 0
c (( - aux1611 + SATLiteral(471) + SATLiteral(486))<=0)
-486 -7171 0
-471 -7171 0
-471 -486 -7172 0
c (0<=( - aux1611 + SATLiteral(471) + SATLiteral(486)))
486 7172 0
471 7172 0
471 486 7171 0
c ((SATLiteral(756) + aux1611 - aux1612)<=0)
7171 -7174 0
7172 -7175 0
-756 -7174 0
-756 7171 -7175 0
-756 7172 -7177 0
c (0<=(SATLiteral(756) + aux1611 - aux1612))
-7172 7177 0
-7171 7175 0
756 7177 0
756 -7172 7175 0
756 -7171 7174 0
c ((aux1608 + aux1610 - aux1613)<=0)
7168 -7179 0
7169 -7180 0
7162 -7179 0
7162 7168 -7180 0
7162 7169 -7182 0
7163 -7180 0
7163 7168 -7182 0
7163 7169 -7184 0
c (0<=(aux1608 + aux1610 - aux1613))
-7169 7184 0
-7168 7182 0
-7163 7184 0
-7163 -7169 7182 0
-7163 -7168 7180 0
-7162 7182 0
-7162 -7169 7180 0
-7162 -7168 7179 0
c ((SATLiteral(728) - aux1614 + SATLiteral(623))<=0)
-623 -7186 0
-728 -7186 0
-728 -623 -7187 0
c (0<=(SATLiteral(728) - aux1614 + SATLiteral(623)))
623 7187 0
728 7187 0
728 623 7186 0
c ((SATLiteral(743) - aux1615 + SATLiteral(608))<=0)
-608 -7189 0
-743 -7189 0
-743 -608 -7190 0
c (0<=(SATLiteral(743) - aux1615 + SATLiteral(608)))
608 7190 0
743 7190 0
743 608 7189 0
c (( - aux1616 + SATLiteral(458) + SATLiteral(593))<=0)
-593 -7192 0
-458 -7192 0
-458 -593 -7193 0
c (0<=( - aux1616 + SATLiteral(458) + SATLiteral(593)))
593 7193 0
458 7193 0
458 593 7192 0
c (( - aux1617 + SATLiteral(473) + SATLiteral(488))<=0)
-488 -7195 0
-473 -7195 0
-473 -488 -7196 0
c (0<=( - aux1617 + SATLiteral(473) + SATLiteral(488)))
488 7196 0
473 7196 0
473 488 7195 0
c ((SATLiteral(758) + aux1617 - aux1618)<=0)
7195 -7198 0
7196 -7199 0
-758 -7198 0
-758 7195 -7199 0
-758 7196 -7201 0
c (0<=(SATLiteral(758) + aux1617 - aux1618))
-7196 7201 0
-7195 7199 0
758 7201 0
758 -7196 7199 0
758 -7195 7198 0
c ((aux1614 + aux1616 - aux1619)<=0)
7192 -7203 0
7193 -7204 0
7186 -7203 0
7186 7192 -7204 0
7186 7193 -7206 0
7187 -7204 0
7187 7192 -7206 0
7187 7193 -7208 0
c (0<=(aux1614 + aux1616 - aux1619))
-7193 7208 0
-7192 7206 0
-7187 7208 0
-7187 -7193 7206 0
-7187 -7192 7204 0
-7186 7206 0
-7186 -7193 7204 0
-7186 -7192 7203 0
c ((SATLiteral(730) - aux1620 + SATLiteral(625))<=0)
-625 -7210 0
-730 -7210 0
-730 -625 -7211 0
c (0<=(SATLiteral(730) - aux1620 + SATLiteral(625)))
625 7211 0
730 7211 0
730 625 7210 0
c ((SATLiteral(745) - aux1621 + SATLiteral(610))<=0)
-610 -7213 0
-745 -7213 0
-745 -610 -7214 0
c (0<=(SATLiteral(745) - aux1621 + SATLiteral(610)))
610 7214 0
745 7214 0
745 610 7213 0
c (( - aux1622 + SATLiteral(460) + SATLiteral(595))<=0)
-595 -7216 0
-460 -7216 0
-460 -595 -7217 0
c (0<=( - aux1622 + SATLiteral(460) + SATLiteral(595)))
595 7217 0
460 7217 0
460 595 7216 0
c (( - aux1623 + SATLiteral(475) + SATLiteral(490))<=0)
-490 -7219 0
-475 -7219 0
-475 -490 -7220 0
c (0<=( - aux1623 + SATLiteral(475) + SATLiteral(490)))
490 7220 0
475 7220 0
475 490 7219 0
c ((SATLiteral(760) + aux1623 - aux1624)<=0)
7219 -7222 0
7220 -7223 0
-760 -7222 0
-760 7219 -7223 0
-760 7220 -7225 0
c (0<=(SATLiteral(760) + aux1623 - aux1624))
-7220 7225 0
-7219 7223 0
760 7225 0
760 -7220 7223 0
760 -7219 7222 0
c ((aux1620 + aux1622 - aux1625)<=0)
7216 -7227 0
7217 -7228 0
7210 -7227 0
7210 7216 -7228 0
7210 7217 -7230 0
7211 -7228 0
7211 7216 -7230 0
7211 7217 -7232 0
c (0<=(aux1620 + aux1622 - aux1625))
-7217 7232 0
-7216 7230 0
-7211 7232 0
-7211 -7217 7230 0
-7211 -7216 7228 0
-7210 7230 0
-7210 -7217 7228 0
-7210 -7216 7227 0
c ((SATLiteral(732) - aux1626 + SATLiteral(627))<=0)
-627 -7234 0
-732 -7234 0
-732 -627 -7235 0
c (0<=(SATLiteral(732) - aux1626 + SATLiteral(627)))
627 7235 0
732 7235 0
732 627 7234 0
c ((SATLiteral(747) - aux1627 + SATLiteral(612))<=0)
-612 -7237 0
-747 -7237 0
-747 -612 -7238 0
c (0<=(SATLiteral(747) - aux1627 + SATLiteral(612)))
612 7238 0
747 7238 0
747 612 7237 0
c (( - aux1628 + SATLiteral(462) + SATLiteral(597))<=0)
-597 -7240 0
-462 -7240 0
-462 -597 -7241 0
c (0<=( - aux1628 + SATLiteral(462) + SATLiteral(597)))
597 7241 0
462 7241 0
462 597 7240 0
c (( - aux1629 + SATLiteral(477) + SATLiteral(492))<=0)
-492 -7243 0
-477 -7243 0
-477 -492 -7244 0
c (0<=( - aux1629 + SATLiteral(477) + SATLiteral(492)))
492 7244 0
477 7244 0
477 492 7243 0
c ((SATLiteral(762) + aux1629 - aux1630)<=0)
7243 -7246 0
7244 -7247 0
-762 -7246 0
-762 7243 -7247 0
-762 7244 -7249 0
c (0<=(SATLiteral(762) + aux1629 - aux1630))
-7244 7249 0
-7243 7247 0
762 7249 0
762 -7244 7247 0
762 -7243 7246 0
c ((aux1626 + aux1628 - aux1631)<=0)
7240 -7251 0
7241 -7252 0
7234 -7251 0
7234 7240 -7252 0
7234 7241 -7254 0
7235 -7252 0
7235 7240 -7254 0
7235 7241 -7256 0
c (0<=(aux1626 + aux1628 - aux1631))
-7241 7256 0
-7240 7254 0
-7235 7256 0
-7235 -7241 7254 0
-7235 -7240 7252 0
-7234 7254 0
-7234 -7241 7252 0
-7234 -7240 7251 0
c ((SATLiteral(734) - aux1632 + SATLiteral(629))<=0)
-629 -7258 0
-734 -7258 0
-734 -629 -7259 0
c (0<=(SATLiteral(734) - aux1632 + SATLiteral(629)))
629 7259 0
734 7259 0
734 629 7258 0
c ((SATLiteral(749) - aux1633 + SATLiteral(614))<=0)
-614 -7261 0
-749 -7261 0
-749 -614 -7262 0
c (0<=(SATLiteral(749) - aux1633 + SATLiteral(614)))
614 7262 0
749 7262 0
749 614 7261 0
c (( - aux1634 + SATLiteral(464) + SATLiteral(599))<=0)
-599 -7264 0
-464 -7264 0
-464 -599 -7265 0
c (0<=( - aux1634 + SATLiteral(464) + SATLiteral(599)))
599 7265 0
464 7265 0
464 599 7264 0
c (( - aux1635 + SATLiteral(479) + SATLiteral(494))<=0)
-494 -7267 0
-479 -7267 0
-479 -494 -7268 0
c (0<=( - aux1635 + SATLiteral(479) + SATLiteral(494)))
494 7268 0
479 7268 0
479 494 7267 0
c ((SATLiteral(764) + aux1635 - aux1636)<=0)
7267 -7270 0
7268 -7271 0
-764 -7270 0
-764 7267 -7271 0
-764 7268 -7273 0
c (0<=(SATLiteral(764) + aux1635 - aux1636))
-7268 7273 0
-7267 7271 0
764 7273 0
764 -7268 7271 0
764 -7267 7270 0
c ((aux1632 + aux1634 - aux1637)<=0)
7264 -7275 0
7265 -7276 0
7258 -7275 0
7258 7264 -7276 0
7258 7265 -7278 0
7259 -7276 0
7259 7264 -7278 0
7259 7265 -7280 0
c (0<=(aux1632 + aux1634 - aux1637))
-7265 7280 0
-7264 7278 0
-7259 7280 0
-7259 -7265 7278 0
-7259 -7264 7276 0
-7258 7278 0
-7258 -7265 7276 0
-7258 -7264 7275 0
c ((SATLiteral(736) - aux1638 + SATLiteral(631))<=0)
-631 -7282 0
-736 -7282 0
-736 -631 -7283 0
c (0<=(SATLiteral(736) - aux1638 + SATLiteral(631)))
631 7283 0
736 7283 0
736 631 7282 0
c ((SATLiteral(751) - aux1639 + SATLiteral(616))<=0)
-616 -7285 0
-751 -7285 0
-751 -616 -7286 0
c (0<=(SATLiteral(751) - aux1639 + SATLiteral(616)))
616 7286 0
751 7286 0
751 616 7285 0
c (( - aux1640 + SATLiteral(466) + SATLiteral(601))<=0)
-601 -7288 0
-466 -7288 0
-466 -601 -7289 0
c (0<=( - aux1640 + SATLiteral(466) + SATLiteral(601)))
601 7289 0
466 7289 0
466 601 7288 0
c (( - aux1641 + SATLiteral(481) + SATLiteral(496))<=0)
-496 -7291 0
-481 -7291 0
-481 -496 -7292 0
c (0<=( - aux1641 + SATLiteral(481) + SATLiteral(496)))
496 7292 0
481 7292 0
481 496 7291 0
c ((SATLiteral(766) + aux1641 - aux1642)<=0)
7291 -7294 0
7292 -7295 0
-766 -7294 0
-766 7291 -7295 0
-766 7292 -7297 0
c (0<=(SATLiteral(766) + aux1641 - aux1642))
-7292 7297 0
-7291 7295 0
766 7297 0
766 -7292 7295 0
766 -7291 7294 0
c ((aux1638 + aux1640 - aux1643)<=0)
7288 -7299 0
7289 -7300 0
7282 -7299 0
7282 7288 -7300 0
7282 7289 -7302 0
7283 -7300 0
7283 7288 -7302 0
7283 7289 -7304 0
c (0<=(aux1638 + aux1640 - aux1643))
-7289 7304 0
-7288 7302 0
-7283 7304 0
-7283 -7289 7302 0
-7283 -7288 7300 0
-7282 7302 0
-7282 -7289 7300 0
-7282 -7288 7299 0
c ((SATLiteral(-735) - aux1644 + SATLiteral(-630))<=0)
630 -7306 0
735 -7306 0
735 630 -7307 0
c (0<=(SATLiteral(-735) - aux1644 + SATLiteral(-630)))
-630 7307 0
-735 7307 0
-735 -630 7306 0
c ((SATLiteral(-750) - aux1645 + SATLiteral(-615))<=0)
615 -7309 0
750 -7309 0
750 615 -7310 0
c (0<=(SATLiteral(-750) - aux1645 + SATLiteral(-615)))
-615 7310 0
-750 7310 0
-750 -615 7309 0
c (( - aux1646 + SATLiteral(-465) + SATLiteral(-600))<=0)
600 -7312 0
465 -7312 0
465 600 -7313 0
c (0<=( - aux1646 + SATLiteral(-465) + SATLiteral(-600)))
-600 7313 0
-465 7313 0
-465 -600 7312 0
c (( - aux1647 + SATLiteral(-480) + SATLiteral(-495))<=0)
495 -7315 0
480 -7315 0
480 495 -7316 0
c (0<=( - aux1647 + SATLiteral(-480) + SATLiteral(-495)))
-495 7316 0
-480 7316 0
-480 -495 7315 0
c ((SATLiteral(-765) + aux1647 - aux1648)<=0)
7315 -7318 0
7316 -7319 0
765 -7318 0
765 7315 -7319 0
765 7316 -7321 0
c (0<=(SATLiteral(-765) + aux1647 - aux1648))
-7316 7321 0
-7315 7319 0
-765 7321 0
-765 -7316 7319 0
-765 -7315 7318 0
c ((aux1644 + aux1646 - aux1649)<=0)
7312 -7323 0
7313 -7324 0
7306 -7323 0
7306 7312 -7324 0
7306 7313 -7326 0
7307 -7324 0
7307 7312 -7326 0
7307 7313 -7328 0
c (0<=(aux1644 + aux1646 - aux1649))
-7313 7328 0
-7312 7326 0
-7307 7328 0
-7307 -7313 7326 0
-7307 -7312 7324 0
-7306 7326 0
-7306 -7313 7324 0
-7306 -7312 7323 0
c ((SATLiteral(767) - aux1650 + SATLiteral(662))<=0)
-662 -7330 0
-767 -7330 0
-767 -662 -7331 0
c (0<=(SATLiteral(767) - aux1650 + SATLiteral(662)))
662 7331 0
767 7331 0
767 662 7330 0
c ((SATLiteral(782) - aux1651 + SATLiteral(647))<=0)
-647 -7333 0
-782 -7333 0
-782 -647 -7334 0
c (0<=(SATLiteral(782) - aux1651 + SATLiteral(647)))
647 7334 0
782 7334 0
782 647 7333 0
c (( - aux1652 + SATLiteral(497) + SATLiteral(632))<=0)
-632 -7336 0
-497 -7336 0
-497 -632 -7337 0
c (0<=( - aux1652 + SATLiteral(497) + SATLiteral(632)))
632 7337 0
497 7337 0
497 632 7336 0
c (( - aux1653 + SATLiteral(512) + SATLiteral(527))<=0)
-527 -7339 0
-512 -7339 0
-512 -527 -7340 0
c (0<=( - aux1653 + SATLiteral(512) + SATLiteral(527)))
527 7340 0
512 7340 0
512 527 7339 0
c ((SATLiteral(797) + aux1653 - aux1654)<=0)
7339 -7342 0
7340 -7343 0
-797 -7342 0
-797 7339 -7343 0
-797 7340 -7345 0
c (0<=(SATLiteral(797) + aux1653 - aux1654))
-7340 7345 0
-7339 7343 0
797 7345 0
797 -7340 7343 0
797 -7339 7342 0
c ((aux1650 + aux1652 - aux1655)<=0)
7336 -7347 0
7337 -7348 0
7330 -7347 0
7330 7336 -7348 0
7330 7337 -7350 0
7331 -7348 0
7331 7336 -7350 0
7331 7337 -7352 0
c (0<=(aux1650 + aux1652 - aux1655))
-7337 7352 0
-7336 7350 0
-7331 7352 0
-7331 -7337 7350 0
-7331 -7336 7348 0
-7330 7350 0
-7330 -7337 7348 0
-7330 -7336 7347 0
c ((SATLiteral(769) - aux1656 + SATLiteral(664))<=0)
-664 -7354 0
-769 -7354 0
-769 -664 -7355 0
c (0<=(SATLiteral(769) - aux1656 + SATLiteral(664)))
664 7355 0
769 7355 0
769 664 7354 0
c ((SATLiteral(784) - aux1657 + SATLiteral(649))<=0)
-649 -7357 0
-784 -7357 0
-784 -649 -7358 0
c (0<=(SATLiteral(784) - aux1657 + SATLiteral(649)))
649 7358 0
784 7358 0
784 649 7357 0
c (( - aux1658 + SATLiteral(499) + SATLiteral(634))<=0)
-634 -7360 0
-499 -7360 0
-499 -634 -7361 0
c (0<=( - aux1658 + SATLiteral(499) + SATLiteral(634)))
634 7361 0
499 7361 0
499 634 7360 0
c (( - aux1659 + SATLiteral(514) + SATLiteral(529))<=0)
-529 -7363 0
-514 -7363 0
-514 -529 -7364 0
c (0<=( - aux1659 + SATLiteral(514) + SATLiteral(529)))
529 7364 0
514 7364 0
514 529 7363 0
c ((SATLiteral(799) + aux1659 - aux1660)<=0)
7363 -7366 0
7364 -7367 0
-799 -7366 0
-799 7363 -7367 0
-799 7364 -7369 0
c (0<=(SATLiteral(799) + aux1659 - aux1660))
-7364 7369 0
-7363 7367 0
799 7369 0
799 -7364 7367 0
799 -7363 7366 0
c ((aux1656 + aux1658 - aux1661)<=0)
7360 -7371 0
7361 -7372 0
7354 -7371 0
7354 7360 -7372 0
7354 7361 -7374 0
7355 -7372 0
7355 7360 -7374 0
7355 7361 -7376 0
c (0<=(aux1656 + aux1658 - aux1661))
-7361 7376 0
-7360 7374 0
-7355 7376 0
-7355 -7361 7374 0
-7355 -7360 7372 0
-7354 7374 0
-7354 -7361 7372 0
-7354 -7360 7371 0
c ((SATLiteral(771) - aux1662 + SATLiteral(666))<=0)
-666 -7378 0
-771 -7378 0
-771 -666 -7379 0
c (0<=(SATLiteral(771) - aux1662 + SATLiteral(666)))
666 7379 0
771 7379 0
771 666 7378 0
c ((SATLiteral(786) - aux1663 + SATLiteral(651))<=0)
-651 -7381 0
-786 -7381 0
-786 -651 -7382 0
c (0<=(SATLiteral(786) - aux1663 + SATLiteral(651)))
651 7382 0
786 7382 0
786 651 7381 0
c (( - aux1664 + SATLiteral(501) + SATLiteral(636))<=0)
-636 -7384 0
-501 -7384 0
-501 -636 -7385 0
c (0<=( - aux1664 + SATLiteral(501) + SATLiteral(636)))
636 7385 0
501 7385 0
501 636 7384 0
c (( - aux1665 + SATLiteral(516) + SATLiteral(531))<=0)
-531 -7387 0
-516 -7387 0
-516 -531 -7388 0
c (0<=( - aux1665 + SATLiteral(516) + SATLiteral(531)))
531 7388 0
516 7388 0
516 531 7387 0
c ((SATLiteral(801) + aux1665 - aux1666)<=0)
7387 -7390 0
7388 -7391 0
-801 -7390 0
-801 7387 -7391 0
-801 7388 -7393 0
c (0<=(SATLiteral(801) + aux1665 - aux1666))
-7388 7393 0
-7387 7391 0
801 7393 0
801 -7388 7391 0
801 -7387 7390 0
c ((aux1662 + aux1664 - aux1667)<=0)
7384 -7395 0
7385 -7396 0
7378 -7395 0
7378 7384 -7396 0
7378 7385 -7398 0
7379 -7396 0
7379 7384 -7398 0
7379 7385 -7400 0
c (0<=(aux1662 + aux1664 - aux1667))
-7385 7400 0
-7384 7398 0
-7379 7400 0
-7379 -7385 7398 0
-7379 -7384 7396 0
-7378 7398 0
-7378 -7385 7396 0
-7378 -7384 7395 0
c ((SATLiteral(773) - aux1668 + SATLiteral(668))<=0)
-668 -7402 0
-773 -7402 0
-773 -668 -7403 0
c (0<=(SATLiteral(773) - aux1668 + SATLiteral(668)))
668 7403 0
773 7403 0
773 668 7402 0
c ((SATLiteral(788) - aux1669 + SATLiteral(653))<=0)
-653 -7405 0
-788 -7405 0
-788 -653 -7406 0
c (0<=(SATLiteral(788) - aux1669 + SATLiteral(653)))
653 7406 0
788 7406 0
788 653 7405 0
c (( - aux1670 + SATLiteral(503) + SATLiteral(638))<=0)
-638 -7408 0
-503 -7408 0
-503 -638 -7409 0
c (0<=( - aux1670 + SATLiteral(503) + SATLiteral(638)))
638 7409 0
503 7409 0
503 638 7408 0
c (( - aux1671 + SATLiteral(518) + SATLiteral(533))<=0)
-533 -7411 0
-518 -7411 0
-518 -533 -7412 0
c (0<=( - aux1671 + SATLiteral(518) + SATLiteral(533)))
533 7412 0
518 7412 0
518 533 7411 0
c ((SATLiteral(803) + aux1671 - aux1672)<=0)
7411 -7414 0
7412 -7415 0
-803 -7414 0
-803 7411 -7415 0
-803 7412 -7417 0
c (0<=(SATLiteral(803) + aux1671 - aux1672))
-7412 7417 0
-7411 7415 0
803 7417 0
803 -7412 7415 0
803 -7411 7414 0
c ((aux1668 + aux1670 - aux1673)<=0)
7408 -7419 0
7409 -7420 0
7402 -7419 0
7402 7408 -7420 0
7402 7409 -7422 0
7403 -7420 0
7403 7408 -7422 0
7403 7409 -7424 0
c (0<=(aux1668 + aux1670 - aux1673))
-7409 7424 0
-7408 7422 0
-7403 7424 0
-7403 -7409 7422 0
-7403 -7408 7420 0
-7402 7422 0
-7402 -7409 7420 0
-7402 -7408 7419 0
c ((SATLiteral(775) - aux1674 + SATLiteral(670))<=0)
-670 -7426 0
-775 -7426 0
-775 -670 -7427 0
c (0<=(SATLiteral(775) - aux1674 + SATLiteral(670)))
670 7427 0
775 7427 0
775 670 7426 0
c ((SATLiteral(790) - aux1675 + SATLiteral(655))<=0)
-655 -7429 0
-790 -7429 0
-790 -655 -7430 0
c (0<=(SATLiteral(790) - aux1675 + SATLiteral(655)))
655 7430 0
790 7430 0
790 655 7429 0
c (( - aux1676 + SATLiteral(505) + SATLiteral(640))<=0)
-640 -7432 0
-505 -7432 0
-505 -640 -7433 0
c (0<=( - aux1676 + SATLiteral(505) + SATLiteral(640)))
640 7433 0
505 7433 0
505 640 7432 0
c (( - aux1677 + SATLiteral(520) + SATLiteral(535))<=0)
-535 -7435 0
-520 -7435 0
-520 -535 -7436 0
c (0<=( - aux1677 + SATLiteral(520) + SATLiteral(535)))
535 7436 0
520 7436 0
520 535 7435 0
c ((SATLiteral(805) + aux1677 - aux1678)<=0)
7435 -7438 0
7436 -7439 0
-805 -7438 0
-805 7435 -7439 0
-805 7436 -7441 0
c (0<=(SATLiteral(805) + aux1677 - aux1678))
-7436 7441 0
-7435 7439 0
805 7441 0
805 -7436 7439 0
805 -7435 7438 0
c ((aux1674 + aux1676 - aux1679)<=0)
7432 -7443 0
7433 -7444 0
7426 -7443 0
7426 7432 -7444 0
7426 7433 -7446 0
7427 -7444 0
7427 7432 -7446 0
7427 7433 -7448 0
c (0<=(aux1674 + aux1676 - aux1679))
-7433 7448 0
-7432 7446 0
-7427 7448 0
-7427 -7433 7446 0
-7427 -7432 7444 0
-7426 7446 0
-7426 -7433 7444 0
-7426 -7432 7443 0
c ((SATLiteral(777) - aux1680 + SATLiteral(672))<=0)
-672 -7450 0
-777 -7450 0
-777 -672 -7451 0
c (0<=(SATLiteral(777) - aux1680 + SATLiteral(672)))
672 7451 0
777 7451 0
777 672 7450 0
c ((SATLiteral(792) - aux1681 + SATLiteral(657))<=0)
-657 -7453 0
-792 -7453 0
-792 -657 -7454 0
c (0<=(SATLiteral(792) - aux1681 + SATLiteral(657)))
657 7454 0
792 7454 0
792 657 7453 0
c (( - aux1682 + SATLiteral(507) + SATLiteral(642))<=0)
-642 -7456 0
-507 -7456 0
-507 -642 -7457 0
c (0<=( - aux1682 + SATLiteral(507) + SATLiteral(642)))
642 7457 0
507 7457 0
507 642 7456 0
c (( - aux1683 + SATLiteral(522) + SATLiteral(537))<=0)
-537 -7459 0
-522 -7459 0
-522 -537 -7460 0
c (0<=( - aux1683 + SATLiteral(522) + SATLiteral(537)))
537 7460 0
522 7460 0
522 537 7459 0
c ((SATLiteral(807) + aux1683 - aux1684)<=0)
7459 -7462 0
7460 -7463 0
-807 -7462 0
-807 7459 -7463 0
-807 7460 -7465 0
c (0<=(SATLiteral(807) + aux1683 - aux1684))
-7460 7465 0
-7459 7463 0
807 7465 0
807 -7460 7463 0
807 -7459 7462 0
c ((aux1680 + aux1682 - aux1685)<=0)
7456 -7467 0
7457 -7468 0
7450 -7467 0
7450 7456 -7468 0
7450 7457 -7470 0
7451 -7468 0
7451 7456 -7470 0
7451 7457 -7472 0
c (0<=(aux1680 + aux1682 - aux1685))
-7457 7472 0
-7456 7470 0
-7451 7472 0
-7451 -7457 7470 0
-7451 -7456 7468 0
-7450 7470 0
-7450 -7457 7468 0
-7450 -7456 7467 0
c ((SATLiteral(779) - aux1686 + SATLiteral(674))<=0)
-674 -7474 0
-779 -7474 0
-779 -674 -7475 0
c (0<=(SATLiteral(779) - aux1686 + SATLiteral(674)))
674 7475 0
779 7475 0
779 674 7474 0
c ((SATLiteral(794) - aux1687 + SATLiteral(659))<=0)
-659 -7477 0
-794 -7477 0
-794 -659 -7478 0
c (0<=(SATLiteral(794) - aux1687 + SATLiteral(659)))
659 7478 0
794 7478 0
794 659 7477 0
c (( - aux1688 + SATLiteral(509) + SATLiteral(644))<=0)
-644 -7480 0
-509 -7480 0
-509 -644 -7481 0
c (0<=( - aux1688 + SATLiteral(509) + SATLiteral(644)))
644 7481 0
509 7481 0
509 644 7480 0
c (( - aux1689 + SATLiteral(524) + SATLiteral(539))<=0)
-539 -7483 0
-524 -7483 0
-524 -539 -7484 0
c (0<=( - aux1689 + SATLiteral(524) + SATLiteral(539)))
539 7484 0
524 7484 0
524 539 7483 0
c ((SATLiteral(809) + aux1689 - aux1690)<=0)
7483 -7486 0
7484 -7487 0
-809 -7486 0
-809 7483 -7487 0
-809 7484 -7489 0
c (0<=(SATLiteral(809) + aux1689 - aux1690))
-7484 7489 0
-7483 7487 0
809 7489 0
809 -7484 7487 0
809 -7483 7486 0
c ((aux1686 + aux1688 - aux1691)<=0)
7480 -7491 0
7481 -7492 0
7474 -7491 0
7474 7480 -7492 0
7474 7481 -7494 0
7475 -7492 0
7475 7480 -7494 0
7475 7481 -7496 0
c (0<=(aux1686 + aux1688 - aux1691))
-7481 7496 0
-7480 7494 0
-7475 7496 0
-7475 -7481 7494 0
-7475 -7480 7492 0
-7474 7494 0
-7474 -7481 7492 0
-7474 -7480 7491 0
c ((SATLiteral(781) - aux1692 + SATLiteral(676))<=0)
-676 -7498 0
-781 -7498 0
-781 -676 -7499 0
c (0<=(SATLiteral(781) - aux1692 + SATLiteral(676)))
676 7499 0
781 7499 0
781 676 7498 0
c ((SATLiteral(796) - aux1693 + SATLiteral(661))<=0)
-661 -7501 0
-796 -7501 0
-796 -661 -7502 0
c (0<=(SATLiteral(796) - aux1693 + SATLiteral(661)))
661 7502 0
796 7502 0
796 661 7501 0
c (( - aux1694 + SATLiteral(511) + SATLiteral(646))<=0)
-646 -7504 0
-511 -7504 0
-511 -646 -7505 0
c (0<=( - aux1694 + SATLiteral(511) + SATLiteral(646)))
646 7505 0
511 7505 0
511 646 7504 0
c (( - aux1695 + SATLiteral(526) + SATLiteral(541))<=0)
-541 -7507 0
-526 -7507 0
-526 -541 -7508 0
c (0<=( - aux1695 + SATLiteral(526) + SATLiteral(541)))
541 7508 0
526 7508 0
526 541 7507 0
c ((SATLiteral(811) + aux1695 - aux1696)<=0)
7507 -7510 0
7508 -7511 0
-811 -7510 0
-811 7507 -7511 0
-811 7508 -7513 0
c (0<=(SATLiteral(811) + aux1695 - aux1696))
-7508 7513 0
-7507 7511 0
811 7513 0
811 -7508 7511 0
811 -7507 7510 0
c ((aux1692 + aux1694 - aux1697)<=0)
7504 -7515 0
7505 -7516 0
7498 -7515 0
7498 7504 -7516 0
7498 7505 -7518 0
7499 -7516 0
7499 7504 -7518 0
7499 7505 -7520 0
c (0<=(aux1692 + aux1694 - aux1697))
-7505 7520 0
-7504 7518 0
-7499 7520 0
-7499 -7505 7518 0
-7499 -7504 7516 0
-7498 7518 0
-7498 -7505 7516 0
-7498 -7504 7515 0
c ((SATLiteral(-780) - aux1698 + SATLiteral(-675))<=0)
675 -7522 0
780 -7522 0
780 675 -7523 0
c (0<=(SATLiteral(-780) - aux1698 + SATLiteral(-675)))
-675 7523 0
-780 7523 0
-780 -675 7522 0
c ((SATLiteral(-795) - aux1699 + SATLiteral(-660))<=0)
660 -7525 0
795 -7525 0
795 660 -7526 0
c (0<=(SATLiteral(-795) - aux1699 + SATLiteral(-660)))
-660 7526 0
-795 7526 0
-795 -660 7525 0
c (( - aux1700 + SATLiteral(-510) + SATLiteral(-645))<=0)
645 -7528 0
510 -7528 0
510 645 -7529 0
c (0<=( - aux1700 + SATLiteral(-510) + SATLiteral(-645)))
-645 7529 0
-510 7529 0
-510 -645 7528 0
c (( - aux1701 + SATLiteral(-525) + SATLiteral(-540))<=0)
540 -7531 0
525 -7531 0
525 540 -7532 0
c (0<=( - aux1701 + SATLiteral(-525) + SATLiteral(-540)))
-540 7532 0
-525 7532 0
-525 -540 7531 0
c ((SATLiteral(-810) + aux1701 - aux1702)<=0)
7531 -7534 0
7532 -7535 0
810 -7534 0
810 7531 -7535 0
810 7532 -7537 0
c (0<=(SATLiteral(-810) + aux1701 - aux1702))
-7532 7537 0
-7531 7535 0
-810 7537 0
-810 -7532 7535 0
-810 -7531 7534 0
c ((aux1698 + aux1700 - aux1703)<=0)
7528 -7539 0
7529 -7540 0
7522 -7539 0
7522 7528 -7540 0
7522 7529 -7542 0
7523 -7540 0
7523 7528 -7542 0
7523 7529 -7544 0
c (0<=(aux1698 + aux1700 - aux1703))
-7529 7544 0
-7528 7542 0
-7523 7544 0
-7523 -7529 7542 0
-7523 -7528 7540 0
-7522 7542 0
-7522 -7529 7540 0
-7522 -7528 7539 0
c ((SATLiteral(947) - aux1704 + SATLiteral(842))<=0)
-842 -7546 0
-947 -7546 0
-947 -842 -7547 0
c (0<=(SATLiteral(947) - aux1704 + SATLiteral(842)))
842 7547 0
947 7547 0
947 842 7546 0
c ((SATLiteral(962) - aux1705 + SATLiteral(827))<=0)
-827 -7549 0
-962 -7549 0
-962 -827 -7550 0
c (0<=(SATLiteral(962) - aux1705 + SATLiteral(827)))
827 7550 0
962 7550 0
962 827 7549 0
c (( - aux1706 + SATLiteral(1082) + SATLiteral(812))<=0)
-812 -7552 0
-1082 -7552 0
-1082 -812 -7553 0
c (0<=( - aux1706 + SATLiteral(1082) + SATLiteral(812)))
812 7553 0
1082 7553 0
1082 812 7552 0
c (( - aux1707 + SATLiteral(1097) + SATLiteral(1112))<=0)
-1112 -7555 0
-1097 -7555 0
-1097 -1112 -7556 0
c (0<=( - aux1707 + SATLiteral(1097) + SATLiteral(1112)))
1112 7556 0
1097 7556 0
1097 1112 7555 0
c ((SATLiteral(977) + aux1707 - aux1708)<=0)
7555 -7558 0
7556 -7559 0
-977 -7558 0
-977 7555 -7559 0
-977 7556 -7561 0
c (0<=(SATLiteral(977) + aux1707 - aux1708))
-7556 7561 0
-7555 7559 0
977 7561 0
977 -7556 7559 0
977 -7555 7558 0
c ((aux1704 + aux1706 - aux1709)<=0)
7552 -7563 0
7553 -7564 0
7546 -7563 0
7546 7552 -7564 0
7546 7553 -7566 0
7547 -7564 0
7547 7552 -7566 0
7547 7553 -7568 0
c (0<=(aux1704 + aux1706 - aux1709))
-7553 7568 0
-7552 7566 0
-7547 7568 0
-7547 -7553 7566 0
-7547 -7552 7564 0
-7546 7566 0
-7546 -7553 7564 0
-7546 -7552 7563 0
c ((SATLiteral(949) - aux1710 + SATLiteral(844))<=0)
-844 -7570 0
-949 -7570 0
-949 -844 -7571 0
c (0<=(SATLiteral(949) - aux1710 + SATLiteral(844)))
844 7571 0
949 7571 0
949 844 7570 0
c ((SATLiteral(964) - aux1711 + SATLiteral(829))<=0)
-829 -7573 0
-964 -7573 0
-964 -829 -7574 0
c (0<=(SATLiteral(964) - aux1711 + SATLiteral(829)))
829 7574 0
964 7574 0
964 829 7573 0
c (( - aux1712 + SATLiteral(1084) + SATLiteral(814))<=0)
-814 -7576 0
-1084 -7576 0
-1084 -814 -7577 0
c (0<=( - aux1712 + SATLiteral(1084) + SATLiteral(814)))
814 7577 0
1084 7577 0
1084 814 7576 0
c (( - aux1713 + SATLiteral(1099) + SATLiteral(1114))<=0)
-1114 -7579 0
-1099 -7579 0
-1099 -1114 -7580 0
c (0<=( - aux1713 + SATLiteral(1099) + SATLiteral(1114)))
1114 7580 0
1099 7580 0
1099 1114 7579 0
c ((SATLiteral(979) + aux1713 - aux1714)<=0)
7579 -7582 0
7580 -7583 0
-979 -7582 0
-979 7579 -7583 0
-979 7580 -7585 0
c (0<=(SATLiteral(979) + aux1713 - aux1714))
-7580 7585 0
-7579 7583 0
979 7585 0
979 -7580 7583 0
979 -7579 7582 0
c ((aux1710 + aux1712 - aux1715)<=0)
7576 -7587 0
7577 -7588 0
7570 -7587 0
7570 7576 -7588 0
7570 7577 -7590 0
7571 -7588 0
7571 7576 -7590 0
7571 7577 -7592 0
c (0<=(aux1710 + aux1712 - aux1715))
-7577 7592 0
-7576 7590 0
-7571 7592 0
-7571 -7577 7590 0
-7571 -7576 7588 0
-7570 7590 0
-7570 -7577 7588 0
-7570 -7576 7587 0
c ((SATLiteral(951) - aux1716 + SATLiteral(846))<=0)
-846 -7594 0
-951 -7594 0
-951 -846 -7595 0
c (0<=(SATLiteral(951) - aux1716 + SATLiteral(846)))
846 7595 0
951 7595 0
951 846 7594 0
c ((SATLiteral(966) - aux1717 + SATLiteral(831))<=0)
-831 -7597 0
-966 -7597 0
-966 -831 -7598 0
c (0<=(SATLiteral(966) - aux1717 + SATLiteral(831)))
831 7598 0
966 7598 0
966 831 7597 0
c (( - aux1718 + SATLiteral(1086) + SATLiteral(816))<=0)
-816 -7600 0
-1086 -7600 0
-1086 -816 -7601 0
c (0<=( - aux1718 + SATLiteral(1086) + SATLiteral(816)))
816 7601 0
1086 7601 0
1086 816 7600 0
c (( - aux1719 + SATLiteral(1101) + SATLiteral(1116))<=0)
-1116 -7603 0
-1101 -7603 0
-1101 -1116 -7604 0
c (0<=( - aux1719 + SATLiteral(1101) + SATLiteral(1116)))
1116 7604 0
1101 7604 0
1101 1116 7603 0
c ((SATLiteral(981) + aux1719 - aux1720)<=0)
7603 -7606 0
7604 -7607 0
-981 -7606 0
-981 7603 -7607 0
-981 7604 -7609 0
c (0<=(SATLiteral(981) + aux1719 - aux1720))
-7604 7609 0
-7603 7607 0
981 7609 0
981 -7604 7607 0
981 -7603 7606 0
c ((aux1716 + aux1718 - aux1721)<=0)
7600 -7611 0
7601 -7612 0
7594 -7611 0
7594 7600 -7612 0
7594 7601 -7614 0
7595 -7612 0
7595 7600 -7614 0
7595 7601 -7616 0
c (0<=(aux1716 + aux1718 - aux1721))
-7601 7616 0
-7600 7614 0
-7595 7616 0
-7595 -7601 7614 0
-7595 -7600 7612 0
-7594 7614 0
-7594 -7601 7612 0
-7594 -7600 7611 0
c ((SATLiteral(953) - aux1722 + SATLiteral(848))<=0)
-848 -7618 0
-953 -7618 0
-953 -848 -7619 0
c (0<=(SATLiteral(953) - aux1722 + SATLiteral(848)))
848 7619 0
953 7619 0
953 848 7618 0
c ((SATLiteral(968) - aux1723 + SATLiteral(833))<=0)
-833 -7621 0
-968 -7621 0
-968 -833 -7622 0
c (0<=(SATLiteral(968) - aux1723 + SATLiteral(833)))
833 7622 0
968 7622 0
968 833 7621 0
c (( - aux1724 + SATLiteral(1088) + SATLiteral(818))<=0)
-818 -7624 0
-1088 -7624 0
-1088 -818 -7625 0
c (0<=( - aux1724 + SATLiteral(1088) + SATLiteral(818)))
818 7625 0
1088 7625 0
1088 818 7624 0
c (( - aux1725 + SATLiteral(1103) + SATLiteral(1118))<=0)
-1118 -7627 0
-1103 -7627 0
-1103 -1118 -7628 0
c (0<=( - aux1725 + SATLiteral(1103) + SATLiteral(1118)))
1118 7628 0
1103 7628 0
1103 1118 7627 0
c ((SATLiteral(983) + aux1725 - aux1726)<=0)
7627 -7630 0
7628 -7631 0
-983 -7630 0
-983 7627 -7631 0
-983 7628 -7633 0
c (0<=(SATLiteral(983) + aux1725 - aux1726))
-7628 7633 0
-7627 7631 0
983 7633 0
983 -7628 7631 0
983 -7627 7630 0
c ((aux1722 + aux1724 - aux1727)<=0)
7624 -7635 0
7625 -7636 0
7618 -7635 0
7618 7624 -7636 0
7618 7625 -7638 0
7619 -7636 0
7619 7624 -7638 0
7619 7625 -7640 0
c (0<=(aux1722 + aux1724 - aux1727))
-7625 7640 0
-7624 7638 0
-7619 7640 0
-7619 -7625 7638 0
-7619 -7624 7636 0
-7618 7638 0
-7618 -7625 7636 0
-7618 -7624 7635 0
c ((SATLiteral(955) - aux1728 + SATLiteral(850))<=0)
-850 -7642 0
-955 -7642 0
-955 -850 -7643 0
c (0<=(SATLiteral(955) - aux1728 + SATLiteral(850)))
850 7643 0
955 7643 0
955 850 7642 0
c ((SATLiteral(970) - aux1729 + SATLiteral(835))<=0)
-835 -7645 0
-970 -7645 0
-970 -835 -7646 0
c (0<=(SATLiteral(970) - aux1729 + SATLiteral(835)))
835 7646 0
970 7646 0
970 835 7645 0
c (( - aux1730 + SATLiteral(1090) + SATLiteral(820))<=0)
-820 -7648 0
-1090 -7648 0
-1090 -820 -7649 0
c (0<=( - aux1730 + SATLiteral(1090) + SATLiteral(820)))
820 7649 0
1090 7649 0
1090 820 7648 0
c (( - aux1731 + SATLiteral(1105) + SATLiteral(1120))<=0)
-1120 -7651 0
-1105 -7651 0
-1105 -1120 -7652 0
c (0<=( - aux1731 + SATLiteral(1105) + SATLiteral(1120)))
1120 7652 0
1105 7652 0
1105 1120 7651 0
c ((SATLiteral(985) + aux1731 - aux1732)<=0)
7651 -7654 0
7652 -7655 0
-985 -7654 0
-985 7651 -7655 0
-985 7652 -7657 0
c (0<=(SATLiteral(985) + aux1731 - aux1732))
-7652 7657 0
-7651 7655 0
985 7657 0
985 -7652 7655 0
985 -7651 7654 0
c ((aux1728 + aux1730 - aux1733)<=0)
7648 -7659 0
7649 -7660 0
7642 -7659 0
7642 7648 -7660 0
7642 7649 -7662 0
7643 -7660 0
7643 7648 -7662 0
7643 7649 -7664 0
c (0<=(aux1728 + aux1730 - aux1733))
-7649 7664 0
-7648 7662 0
-7643 7664 0
-7643 -7649 7662 0
-7643 -7648 7660 0
-7642 7662 0
-7642 -7649 7660 0
-7642 -7648 7659 0
c ((SATLiteral(957) - aux1734 + SATLiteral(852))<=0)
-852 -7666 0
-957 -7666 0
-957 -852 -7667 0
c (0<=(SATLiteral(957) - aux1734 + SATLiteral(852)))
852 7667 0
957 7667 0
957 852 7666 0
c ((SATLiteral(972) - aux1735 + SATLiteral(837))<=0)
-837 -7669 0
-972 -7669 0
-972 -837 -7670 0
c (0<=(SATLiteral(972) - aux1735 + SATLiteral(837)))
837 7670 0
972 7670 0
972 837 7669 0
c (( - aux1736 + SATLiteral(1092) + SATLiteral(822))<=0)
-822 -7672 0
-1092 -7672 0
-1092 -822 -7673 0
c (0<=( - aux1736 + SATLiteral(1092) + SATLiteral(822)))
822 7673 0
1092 7673 0
1092 822 7672 0
c (( - aux1737 + SATLiteral(1107) + SATLiteral(1122))<=0)
-1122 -7675 0
-1107 -7675 0
-1107 -1122 -7676 0
c (0<=( - aux1737 + SATLiteral(1107) + SATLiteral(1122)))
1122 7676 0
1107 7676 0
1107 1122 7675 0
c ((SATLiteral(987) + aux1737 - aux1738)<=0)
7675 -7678 0
7676 -7679 0
-987 -7678 0
-987 7675 -7679 0
-987 7676 -7681 0
c (0<=(SATLiteral(987) + aux1737 - aux1738))
-7676 7681 0
-7675 7679 0
987 7681 0
987 -7676 7679 0
987 -7675 7678 0
c ((aux1734 + aux1736 - aux1739)<=0)
7672 -7683 0
7673 -7684 0
7666 -7683 0
7666 7672 -7684 0
7666 7673 -7686 0
7667 -7684 0
7667 7672 -7686 0
7667 7673 -7688 0
c (0<=(aux1734 + aux1736 - aux1739))
-7673 7688 0
-7672 7686 0
-7667 7688 0
-7667 -7673 7686 0
-7667 -7672 7684 0
-7666 7686 0
-7666 -7673 7684 0
-7666 -7672 7683 0
c ((SATLiteral(959) - aux1740 + SATLiteral(854))<=0)
-854 -7690 0
-959 -7690 0
-959 -854 -7691 0
c (0<=(SATLiteral(959) - aux1740 + SATLiteral(854)))
854 7691 0
959 7691 0
959 854 7690 0
c ((SATLiteral(974) - aux1741 + SATLiteral(839))<=0)
-839 -7693 0
-974 -7693 0
-974 -839 -7694 0
c (0<=(SATLiteral(974) - aux1741 + SATLiteral(839)))
839 7694 0
974 7694 0
974 839 7693 0
c (( - aux1742 + SATLiteral(1094) + SATLiteral(824))<=0)
-824 -7696 0
-1094 -7696 0
-1094 -824 -7697 0
c (0<=( - aux1742 + SATLiteral(1094) + SATLiteral(824)))
824 7697 0
1094 7697 0
1094 824 7696 0
c (( - aux1743 + SATLiteral(1109) + SATLiteral(1124))<=0)
-1124 -7699 0
-1109 -7699 0
-1109 -1124 -7700 0
c (0<=( - aux1743 + SATLiteral(1109) + SATLiteral(1124)))
1124 7700 0
1109 7700 0
1109 1124 7699 0
c ((SATLiteral(989) + aux1743 - aux1744)<=0)
7699 -7702 0
7700 -7703 0
-989 -7702 0
-989 7699 -7703 0
-989 7700 -7705 0
c (0<=(SATLiteral(989) + aux1743 - aux1744))
-7700 7705 0
-7699 7703 0
989 7705 0
989 -7700 7703 0
989 -7699 7702 0
c ((aux1740 + aux1742 - aux1745)<=0)
7696 -7707 0
7697 -7708 0
7690 -7707 0
7690 7696 -7708 0
7690 7697 -7710 0
7691 -7708 0
7691 7696 -7710 0
7691 7697 -7712 0
c (0<=(aux1740 + aux1742 - aux1745))
-7697 7712 0
-7696 7710 0
-7691 7712 0
-7691 -7697 7710 0
-7691 -7696 7708 0
-7690 7710 0
-7690 -7697 7708 0
-7690 -7696 7707 0
c ((SATLiteral(961) - aux1746 + SATLiteral(856))<=0)
-856 -7714 0
-961 -7714 0
-961 -856 -7715 0
c (0<=(SATLiteral(961) - aux1746 + SATLiteral(856)))
856 7715 0
961 7715 0
961 856 7714 0
c ((SATLiteral(976) - aux1747 + SATLiteral(841))<=0)
-841 -7717 0
-976 -7717 0
-976 -841 -7718 0
c (0<=(SATLiteral(976) - aux1747 + SATLiteral(841)))
841 7718 0
976 7718 0
976 841 7717 0
c (( - aux1748 + SATLiteral(1096) + SATLiteral(826))<=0)
-826 -7720 0
-1096 -7720 0
-1096 -826 -7721 0
c (0<=( - aux1748 + SATLiteral(1096) + SATLiteral(826)))
826 7721 0
1096 7721 0
1096 826 7720 0
c (( - aux1749 + SATLiteral(1111) + SATLiteral(1126))<=0)
-1126 -7723 0
-1111 -7723 0
-1111 -1126 -7724 0
c (0<=( - aux1749 + SATLiteral(1111) + SATLiteral(1126)))
1126 7724 0
1111 7724 0
1111 1126 7723 0
c ((SATLiteral(991) + aux1749 - aux1750)<=0)
7723 -7726 0
7724 -7727 0
-991 -7726 0
-991 7723 -7727 0
-991 7724 -7729 0
c (0<=(SATLiteral(991) + aux1749 - aux1750))
-7724 7729 0
-7723 7727 0
991 7729 0
991 -7724 7727 0
991 -7723 7726 0
c ((aux1746 + aux1748 - aux1751)<=0)
7720 -7731 0
7721 -7732 0
7714 -7731 0
7714 7720 -7732 0
7714 7721 -7734 0
7715 -7732 0
7715 7720 -7734 0
7715 7721 -7736 0
c (0<=(aux1746 + aux1748 - aux1751))
-7721 7736 0
-7720 7734 0
-7715 7736 0
-7715 -7721 7734 0
-7715 -7720 7732 0
-7714 7734 0
-7714 -7721 7732 0
-7714 -7720 7731 0
c ((SATLiteral(-960) - aux1752 + SATLiteral(-855))<=0)
855 -7738 0
960 -7738 0
960 855 -7739 0
c (0<=(SATLiteral(-960) - aux1752 + SATLiteral(-855)))
-855 7739 0
-960 7739 0
-960 -855 7738 0
c ((SATLiteral(-975) - aux1753 + SATLiteral(-840))<=0)
840 -7741 0
975 -7741 0
975 840 -7742 0
c (0<=(SATLiteral(-975) - aux1753 + SATLiteral(-840)))
-840 7742 0
-975 7742 0
-975 -840 7741 0
c (( - aux1754 + SATLiteral(-1095) + SATLiteral(-825))<=0)
825 -7744 0
1095 -7744 0
1095 825 -7745 0
c (0<=( - aux1754 + SATLiteral(-1095) + SATLiteral(-825)))
-825 7745 0
-1095 7745 0
-1095 -825 7744 0
c (( - aux1755 + SATLiteral(-1110) + SATLiteral(-1125))<=0)
1125 -7747 0
1110 -7747 0
1110 1125 -7748 0
c (0<=( - aux1755 + SATLiteral(-1110) + SATLiteral(-1125)))
-1125 7748 0
-1110 7748 0
-1110 -1125 7747 0
c ((SATLiteral(-990) + aux1755 - aux1756)<=0)
7747 -7750 0
7748 -7751 0
990 -7750 0
990 7747 -7751 0
990 7748 -7753 0
c (0<=(SATLiteral(-990) + aux1755 - aux1756))
-7748 7753 0
-7747 7751 0
-990 7753 0
-990 -7748 7751 0
-990 -7747 7750 0
c ((aux1752 + aux1754 - aux1757)<=0)
7744 -7755 0
7745 -7756 0
7738 -7755 0
7738 7744 -7756 0
7738 7745 -7758 0
7739 -7756 0
7739 7744 -7758 0
7739 7745 -7760 0
c (0<=(aux1752 + aux1754 - aux1757))
-7745 7760 0
-7744 7758 0
-7739 7760 0
-7739 -7745 7758 0
-7739 -7744 7756 0
-7738 7758 0
-7738 -7745 7756 0
-7738 -7744 7755 0
c ((SATLiteral(992) - aux1758 + SATLiteral(887))<=0)
-887 -7762 0
-992 -7762 0
-992 -887 -7763 0
c (0<=(SATLiteral(992) - aux1758 + SATLiteral(887)))
887 7763 0
992 7763 0
992 887 7762 0
c ((SATLiteral(1007) - aux1759 + SATLiteral(872))<=0)
-872 -7765 0
-1007 -7765 0
-1007 -872 -7766 0
c (0<=(SATLiteral(1007) - aux1759 + SATLiteral(872)))
872 7766 0
1007 7766 0
1007 872 7765 0
c (( - aux1760 + SATLiteral(1127) + SATLiteral(857))<=0)
-857 -7768 0
-1127 -7768 0
-1127 -857 -7769 0
c (0<=( - aux1760 + SATLiteral(1127) + SATLiteral(857)))
857 7769 0
1127 7769 0
1127 857 7768 0
c (( - aux1761 + SATLiteral(1142) + SATLiteral(1157))<=0)
-1157 -7771 0
-1142 -7771 0
-1142 -1157 -7772 0
c (0<=( - aux1761 + SATLiteral(1142) + SATLiteral(1157)))
1157 7772 0
1142 7772 0
1142 1157 7771 0
c ((SATLiteral(1022) + aux1761 - aux1762)<=0)
7771 -7774 0
7772 -7775 0
-1022 -7774 0
-1022 7771 -7775 0
-1022 7772 -7777 0
c (0<=(SATLiteral(1022) + aux1761 - aux1762))
-7772 7777 0
-7771 7775 0
1022 7777 0
1022 -7772 7775 0
1022 -7771 7774 0
c ((aux1758 + aux1760 - aux1763)<=0)
7768 -7779 0
7769 -7780 0
7762 -7779 0
7762 7768 -7780 0
7762 7769 -7782 0
7763 -7780 0
7763 7768 -7782 0
7763 7769 -7784 0
c (0<=(aux1758 + aux1760 - aux1763))
-7769 7784 0
-7768 7782 0
-7763 7784 0
-7763 -7769 7782 0
-7763 -7768 7780 0
-7762 7782 0
-7762 -7769 7780 0
-7762 -7768 7779 0
c ((SATLiteral(994) - aux1764 + SATLiteral(889))<=0)
-889 -7786 0
-994 -7786 0
-994 -889 -7787 0
c (0<=(SATLiteral(994) - aux1764 + SATLiteral(889)))
889 7787 0
994 7787 0
994 889 7786 0
c ((SATLiteral(1009) - aux1765 + SATLiteral(874))<=0)
-874 -7789 0
-1009 -7789 0
-1009 -874 -7790 0
c (0<=(SATLiteral(1009) - aux1765 + SATLiteral(874)))
874 7790 0
1009 7790 0
1009 874 7789 0
c (( - aux1766 + SATLiteral(1129) + SATLiteral(859))<=0)
-859 -7792 0
-1129 -7792 0
-1129 -859 -7793 0
c (0<=( - aux1766 + SATLiteral(1129) + SATLiteral(859)))
859 7793 0
1129 7793 0
1129 859 7792 0
c (( - aux1767 + SATLiteral(1144) + SATLiteral(1159))<=0)
-1159 -7795 0
-1144 -7795 0
-1144 -1159 -7796 0
c (0<=( - aux1767 + SATLiteral(1144) + SATLiteral(1159)))
1159 7796 0
1144 7796 0
1144 1159 7795 0
c ((SATLiteral(1024) + aux1767 - aux1768)<=0)
7795 -7798 0
7796 -7799 0
-1024 -7798 0
-1024 7795 -7799 0
-1024 7796 -7801 0
c (0<=(SATLiteral(1024) + aux1767 - aux1768))
-7796 7801 0
-7795 7799 0
1024 7801 0
1024 -7796 7799 0
1024 -7795 7798 0
c ((aux1764 + aux1766 - aux1769)<=0)
7792 -7803 0
7793 -7804 0
7786 -7803 0
7786 7792 -7804 0
7786 7793 -7806 0
7787 -7804 0
7787 7792 -7806 0
7787 7793 -7808 0
c (0<=(aux1764 + aux1766 - aux1769))
-7793 7808 0
-7792 7806 0
-7787 7808 0
-7787 -7793 7806 0
-7787 -7792 7804 0
-7786 7806 0
-7786 -7793 7804 0
-7786 -7792 7803 0
c ((SATLiteral(996) - aux1770 + SATLiteral(891))<=0)
-891 -7810 0
-996 -7810 0
-996 -891 -7811 0
c (0<=(SATLiteral(996) - aux1770 + SATLiteral(891)))
891 7811 0
996 7811 0
996 891 7810 0
c ((SATLiteral(1011) - aux1771 + SATLiteral(876))<=0)
-876 -7813 0
-1011 -7813 0
-1011 -876 -7814 0
c (0<=(SATLiteral(1011) - aux1771 + SATLiteral(876)))
876 7814 0
1011 7814 0
1011 876 7813 0
c (( - aux1772 + SATLiteral(1131) + SATLiteral(861))<=0)
-861 -7816 0
-1131 -7816 0
-1131 -861 -7817 0
c (0<=( - aux1772 + SATLiteral(1131) + SATLiteral(861)))
861 7817 0
1131 7817 0
1131 861 7816 0
c (( - aux1773 + SATLiteral(1146) + SATLiteral(1161))<=0)
-1161 -7819 0
-1146 -7819 0
-1146 -1161 -7820 0
c (0<=( - aux1773 + SATLiteral(1146) + SATLiteral(1161)))
1161 7820 0
1146 7820 0
1146 1161 7819 0
c ((SATLiteral(1026) + aux1773 - aux1774)<=0)
7819 -7822 0
7820 -7823 0
-1026 -7822 0
-1026 7819 -7823 0
-1026 7820 -7825 0
c (0<=(SATLiteral(1026) + aux1773 - aux1774))
-7820 7825 0
-7819 7823 0
1026 7825 0
1026 -7820 7823 0
1026 -7819 7822 0
c ((aux1770 + aux1772 - aux1775)<=0)
7816 -7827 0
7817 -7828 0
7810 -7827 0
7810 7816 -7828 0
7810 7817 -7830 0
7811 -7828 0
7811 7816 -7830 0
7811 7817 -7832 0
c (0<=(aux1770 + aux1772 - aux1775))
-7817 7832 0
-7816 7830 0
-7811 7832 0
-7811 -7817 7830 0
-7811 -7816 7828 0
-7810 7830 0
-7810 -7817 7828 0
-7810 -7816 7827 0
c ((SATLiteral(998) - aux1776 + SATLiteral(893))<=0)
-893 -7834 0
-998 -7834 0
-998 -893 -7835 0
c (0<=(SATLiteral(998) - aux1776 + SATLiteral(893)))
893 7835 0
998 7835 0
998 893 7834 0
c ((SATLiteral(1013) - aux1777 + SATLiteral(878))<=0)
-878 -7837 0
-1013 -7837 0
-1013 -878 -7838 0
c (0<=(SATLiteral(1013) - aux1777 + SATLiteral(878)))
878 7838 0
1013 7838 0
1013 878 7837 0
c (( - aux1778 + SATLiteral(1133) + SATLiteral(863))<=0)
-863 -7840 0
-1133 -7840 0
-1133 -863 -7841 0
c (0<=( - aux1778 + SATLiteral(1133) + SATLiteral(863)))
863 7841 0
1133 7841 0
1133 863 7840 0
c (( - aux1779 + SATLiteral(1148) + SATLiteral(1163))<=0)
-1163 -7843 0
-1148 -7843 0
-1148 -1163 -7844 0
c (0<=( - aux1779 + SATLiteral(1148) + SATLiteral(1163)))
1163 7844 0
1148 7844 0
1148 1163 7843 0
c ((SATLiteral(1028) + aux1779 - aux1780)<=0)
7843 -7846 0
7844 -7847 0
-1028 -7846 0
-1028 7843 -7847 0
-1028 7844 -7849 0
c (0<=(SATLiteral(1028) + aux1779 - aux1780))
-7844 7849 0
-7843 7847 0
1028 7849 0
1028 -7844 7847 0
1028 -7843 7846 0
c ((aux1776 + aux1778 - aux1781)<=0)
7840 -7851 0
7841 -7852 0
7834 -7851 0
7834 7840 -7852 0
7834 7841 -7854 0
7835 -7852 0
7835 7840 -7854 0
7835 7841 -7856 0
c (0<=(aux1776 + aux1778 - aux1781))
-7841 7856 0
-7840 7854 0
-7835 7856 0
-7835 -7841 7854 0
-7835 -7840 7852 0
-7834 7854 0
-7834 -7841 7852 0
-7834 -7840 7851 0
c ((SATLiteral(1000) - aux1782 + SATLiteral(895))<=0)
-895 -7858 0
-1000 -7858 0
-1000 -895 -7859 0
c (0<=(SATLiteral(1000) - aux1782 + SATLiteral(895)))
895 7859 0
1000 7859 0
1000 895 7858 0
c ((SATLiteral(1015) - aux1783 + SATLiteral(880))<=0)
-880 -7861 0
-1015 -7861 0
-1015 -880 -7862 0
c (0<=(SATLiteral(1015) - aux1783 + SATLiteral(880)))
880 7862 0
1015 7862 0
1015 880 7861 0
c (( - aux1784 + SATLiteral(1135) + SATLiteral(865))<=0)
-865 -7864 0
-1135 -7864 0
-1135 -865 -7865 0
c (0<=( - aux1784 + SATLiteral(1135) + SATLiteral(865)))
865 7865 0
1135 7865 0
1135 865 7864 0
c (( - aux1785 + SATLiteral(1150) + SATLiteral(1165))<=0)
-1165 -7867 0
-1150 -7867 0
-1150 -1165 -7868 0
c (0<=( - aux1785 + SATLiteral(1150) + SATLiteral(1165)))
1165 7868 0
1150 7868 0
1150 1165 7867 0
c ((SATLiteral(1030) + aux1785 - aux1786)<=0)
7867 -7870 0
7868 -7871 0
-1030 -7870 0
-1030 7867 -7871 0
-1030 7868 -7873 0
c (0<=(SATLiteral(1030) + aux1785 - aux1786))
-7868 7873 0
-7867 7871 0
1030 7873 0
1030 -7868 7871 0
1030 -7867 7870 0
c ((aux1782 + aux1784 - aux1787)<=0)
7864 -7875 0
7865 -7876 0
7858 -7875 0
7858 7864 -7876 0
7858 7865 -7878 0
7859 -7876 0
7859 7864 -7878 0
7859 7865 -7880 0
c (0<=(aux1782 + aux1784 - aux1787))
-7865 7880 0
-7864 7878 0
-7859 7880 0
-7859 -7865 7878 0
-7859 -7864 7876 0
-7858 7878 0
-7858 -7865 7876 0
-7858 -7864 7875 0
c ((SATLiteral(1002) - aux1788 + SATLiteral(897))<=0)
-897 -7882 0
-1002 -7882 0
-1002 -897 -7883 0
c (0<=(SATLiteral(1002) - aux1788 + SATLiteral(897)))
897 7883 0
1002 7883 0
1002 897 7882 0
c ((SATLiteral(1017) - aux1789 + SATLiteral(882))<=0)
-882 -7885 0
-1017 -7885 0
-1017 -882 -7886 0
c (0<=(SATLiteral(1017) - aux1789 + SATLiteral(882)))
882 7886 0
1017 7886 0
1017 882 7885 0
c (( - aux1790 + SATLiteral(1137) + SATLiteral(867))<=0)
-867 -7888 0
-1137 -7888 0
-1137 -867 -7889 0
c (0<=( - aux1790 + SATLiteral(1137) + SATLiteral(867)))
867 7889 0
1137 7889 0
1137 867 7888 0
c (( - aux1791 + SATLiteral(1152) + SATLiteral(1167))<=0)
-1167 -7891 0
-1152 -7891 0
-1152 -1167 -7892 0
c (0<=( - aux1791 + SATLiteral(1152) + SATLiteral(1167)))
1167 7892 0
1152 7892 0
1152 1167 7891 0
c ((SATLiteral(1032) + aux1791 - aux1792)<=0)
7891 -7894 0
7892 -7895 0
-1032 -7894 0
-1032 7891 -7895 0
-1032 7892 -7897 0
c (0<=(SATLiteral(1032) + aux1791 - aux1792))
-7892 7897 0
-7891 7895 0
1032 7897 0
1032 -7892 7895 0
1032 -7891 7894 0
c ((aux1788 + aux1790 - aux1793)<=0)
7888 -7899 0
7889 -7900 0
7882 -7899 0
7882 7888 -7900 0
7882 7889 -7902 0
7883 -7900 0
7883 7888 -7902 0
7883 7889 -7904 0
c (0<=(aux1788 + aux1790 - aux1793))
-7889 7904 0
-7888 7902 0
-7883 7904 0
-7883 -7889 7902 0
-7883 -7888 7900 0
-7882 7902 0
-7882 -7889 7900 0
-7882 -7888 7899 0
c ((SATLiteral(1004) - aux1794 + SATLiteral(899))<=0)
-899 -7906 0
-1004 -7906 0
-1004 -899 -7907 0
c (0<=(SATLiteral(1004) - aux1794 + SATLiteral(899)))
899 7907 0
1004 7907 0
1004 899 7906 0
c ((SATLiteral(1019) - aux1795 + SATLiteral(884))<=0)
-884 -7909 0
-1019 -7909 0
-1019 -884 -7910 0
c (0<=(SATLiteral(1019) - aux1795 + SATLiteral(884)))
884 7910 0
1019 7910 0
1019 884 7909 0
c (( - aux1796 + SATLiteral(1139) + SATLiteral(869))<=0)
-869 -7912 0
-1139 -7912 0
-1139 -869 -7913 0
c (0<=( - aux1796 + SATLiteral(1139) + SATLiteral(869)))
869 7913 0
1139 7913 0
1139 869 7912 0
c (( - aux1797 + SATLiteral(1154) + SATLiteral(1169))<=0)
-1169 -7915 0
-1154 -7915 0
-1154 -1169 -7916 0
c (0<=( - aux1797 + SATLiteral(1154) + SATLiteral(1169)))
1169 7916 0
1154 7916 0
1154 1169 7915 0
c ((SATLiteral(1034) + aux1797 - aux1798)<=0)
7915 -7918 0
7916 -7919 0
-1034 -7918 0
-1034 7915 -7919 0
-1034 7916 -7921 0
c (0<=(SATLiteral(1034) + aux1797 - aux1798))
-7916 7921 0
-7915 7919 0
1034 7921 0
1034 -7916 7919 0
1034 -7915 7918 0
c ((aux1794 + aux1796 - aux1799)<=0)
7912 -7923 0
7913 -7924 0
7906 -7923 0
7906 7912 -7924 0
7906 7913 -7926 0
7907 -7924 0
7907 7912 -7926 0
7907 7913 -7928 0
c (0<=(aux1794 + aux1796 - aux1799))
-7913 7928 0
-7912 7926 0
-7907 7928 0
-7907 -7913 7926 0
-7907 -7912 7924 0
-7906 7926 0
-7906 -7913 7924 0
-7906 -7912 7923 0
c ((SATLiteral(1006) - aux1800 + SATLiteral(901))<=0)
-901 -7930 0
-1006 -7930 0
-1006 -901 -7931 0
c (0<=(SATLiteral(1006) - aux1800 + SATLiteral(901)))
901 7931 0
1006 7931 0
1006 901 7930 0
c ((SATLiteral(1021) - aux1801 + SATLiteral(886))<=0)
-886 -7933 0
-1021 -7933 0
-1021 -886 -7934 0
c (0<=(SATLiteral(1021) - aux1801 + SATLiteral(886)))
886 7934 0
1021 7934 0
1021 886 7933 0
c (( - aux1802 + SATLiteral(1141) + SATLiteral(871))<=0)
-871 -7936 0
-1141 -7936 0
-1141 -871 -7937 0
c (0<=( - aux1802 + SATLiteral(1141) + SATLiteral(871)))
871 7937 0
1141 7937 0
1141 871 7936 0
c (( - aux1803 + SATLiteral(1156) + SATLiteral(1171))<=0)
-1171 -7939 0
-1156 -7939 0
-1156 -1171 -7940 0
c (0<=( - aux1803 + SATLiteral(1156) + SATLiteral(1171)))
1171 7940 0
1156 7940 0
1156 1171 7939 0
c ((SATLiteral(1036) + aux1803 - aux1804)<=0)
7939 -7942 0
7940 -7943 0
-1036 -7942 0
-1036 7939 -7943 0
-1036 7940 -7945 0
c (0<=(SATLiteral(1036) + aux1803 - aux1804))
-7940 7945 0
-7939 7943 0
1036 7945 0
1036 -7940 7943 0
1036 -7939 7942 0
c ((aux1800 + aux1802 - aux1805)<=0)
7936 -7947 0
7937 -7948 0
7930 -7947 0
7930 7936 -7948 0
7930 7937 -7950 0
7931 -7948 0
7931 7936 -7950 0
7931 7937 -7952 0
c (0<=(aux1800 + aux1802 - aux1805))
-7937 7952 0
-7936 7950 0
-7931 7952 0
-7931 -7937 7950 0
-7931 -7936 7948 0
-7930 7950 0
-7930 -7937 7948 0
-7930 -7936 7947 0
c ((SATLiteral(-1005) - aux1806 + SATLiteral(-900))<=0)
900 -7954 0
1005 -7954 0
1005 900 -7955 0
c (0<=(SATLiteral(-1005) - aux1806 + SATLiteral(-900)))
-900 7955 0
-1005 7955 0
-1005 -900 7954 0
c ((SATLiteral(-1020) - aux1807 + SATLiteral(-885))<=0)
885 -7957 0
1020 -7957 0
1020 885 -7958 0
c (0<=(SATLiteral(-1020) - aux1807 + SATLiteral(-885)))
-885 7958 0
-1020 7958 0
-1020 -885 7957 0
c (( - aux1808 + SATLiteral(-1140) + SATLiteral(-870))<=0)
870 -7960 0
1140 -7960 0
1140 870 -7961 0
c (0<=( - aux1808 + SATLiteral(-1140) + SATLiteral(-870)))
-870 7961 0
-1140 7961 0
-1140 -870 7960 0
c (( - aux1809 + SATLiteral(-1155) + SATLiteral(-1170))<=0)
1170 -7963 0
1155 -7963 0
1155 1170 -7964 0
c (0<=( - aux1809 + SATLiteral(-1155) + SATLiteral(-1170)))
-1170 7964 0
-1155 7964 0
-1155 -1170 7963 0
c ((SATLiteral(-1035) + aux1809 - aux1810)<=0)
7963 -7966 0
7964 -7967 0
1035 -7966 0
1035 7963 -7967 0
1035 7964 -7969 0
c (0<=(SATLiteral(-1035) + aux1809 - aux1810))
-7964 7969 0
-7963 7967 0
-1035 7969 0
-1035 -7964 7967 0
-1035 -7963 7966 0
c ((aux1806 + aux1808 - aux1811)<=0)
7960 -7971 0
7961 -7972 0
7954 -7971 0
7954 7960 -7972 0
7954 7961 -7974 0
7955 -7972 0
7955 7960 -7974 0
7955 7961 -7976 0
c (0<=(aux1806 + aux1808 - aux1811))
-7961 7976 0
-7960 7974 0
-7955 7976 0
-7955 -7961 7974 0
-7955 -7960 7972 0
-7954 7974 0
-7954 -7961 7972 0
-7954 -7960 7971 0
c ((SATLiteral(1037) - aux1812 + SATLiteral(932))<=0)
-932 -7978 0
-1037 -7978 0
-1037 -932 -7979 0
c (0<=(SATLiteral(1037) - aux1812 + SATLiteral(932)))
932 7979 0
1037 7979 0
1037 932 7978 0
c ((SATLiteral(1052) - aux1813 + SATLiteral(917))<=0)
-917 -7981 0
-1052 -7981 0
-1052 -917 -7982 0
c (0<=(SATLiteral(1052) - aux1813 + SATLiteral(917)))
917 7982 0
1052 7982 0
1052 917 7981 0
c (( - aux1814 + SATLiteral(1172) + SATLiteral(902))<=0)
-902 -7984 0
-1172 -7984 0
-1172 -902 -7985 0
c (0<=( - aux1814 + SATLiteral(1172) + SATLiteral(902)))
902 7985 0
1172 7985 0
1172 902 7984 0
c (( - aux1815 + SATLiteral(1187) + SATLiteral(1202))<=0)
-1202 -7987 0
-1187 -7987 0
-1187 -1202 -7988 0
c (0<=( - aux1815 + SATLiteral(1187) + SATLiteral(1202)))
1202 7988 0
1187 7988 0
1187 1202 7987 0
c ((SATLiteral(1067) + aux1815 - aux1816)<=0)
7987 -7990 0
7988 -7991 0
-1067 -7990 0
-1067 7987 -7991 0
-1067 7988 -7993 0
c (0<=(SATLiteral(1067) + aux1815 - aux1816))
-7988 7993 0
-7987 7991 0
1067 7993 0
1067 -7988 7991 0
1067 -7987 7990 0
c ((aux1812 + aux1814 - aux1817)<=0)
7984 -7995 0
7985 -7996 0
7978 -7995 0
7978 7984 -7996 0
7978 7985 -7998 0
7979 -7996 0
7979 7984 -7998 0
7979 7985 -8000 0
c (0<=(aux1812 + aux1814 - aux1817))
-7985 8000 0
-7984 7998 0
-7979 8000 0
-7979 -7985 7998 0
-7979 -7984 7996 0
-7978 7998 0
-7978 -7985 7996 0
-7978 -7984 7995 0
c ((SATLiteral(1039) - aux1818 + SATLiteral(934))<=0)
-934 -8002 0
-1039 -8002 0
-1039 -934 -8003 0
c (0<=(SATLiteral(1039) - aux1818 + SATLiteral(934)))
934 8003 0
1039 8003 0
1039 934 8002 0
c ((SATLiteral(1054) - aux1819 + SATLiteral(919))<=0)
-919 -8005 0
-1054 -8005 0
-1054 -919 -8006 0
c (0<=(SATLiteral(1054) - aux1819 + SATLiteral(919)))
919 8006 0
1054 8006 0
1054 919 8005 0
c (( - aux1820 + SATLiteral(1174) + SATLiteral(904))<=0)
-904 -8008 0
-1174 -8008 0
-1174 -904 -8009 0
c (0<=( - aux1820 + SATLiteral(1174) + SATLiteral(904)))
904 8009 0
1174 8009 0
1174 904 8008 0
c (( - aux1821 + SATLiteral(1189) + SATLiteral(1204))<=0)
-1204 -8011 0
-1189 -8011 0
-1189 -1204 -8012 0
c (0<=( - aux1821 + SATLiteral(1189) + SATLiteral(1204)))
1204 8012 0
1189 8012 0
1189 1204 8011 0
c ((SATLiteral(1069) + aux1821 - aux1822)<=0)
8011 -8014 0
8012 -8015 0
-1069 -8014 0
-1069 8011 -8015 0
-1069 8012 -8017 0
c (0<=(SATLiteral(1069) + aux1821 - aux1822))
-8012 8017 0
-8011 8015 0
1069 8017 0
1069 -8012 8015 0
1069 -8011 8014 0
c ((aux1818 + aux1820 - aux1823)<=0)
8008 -8019 0
8009 -8020 0
8002 -8019 0
8002 8008 -8020 0
8002 8009 -8022 0
8003 -8020 0
8003 8008 -8022 0
8003 8009 -8024 0
c (0<=(aux1818 + aux1820 - aux1823))
-8009 8024 0
-8008 8022 0
-8003 8024 0
-8003 -8009 8022 0
-8003 -8008 8020 0
-8002 8022 0
-8002 -8009 8020 0
-8002 -8008 8019 0
c ((SATLiteral(1041) - aux1824 + SATLiteral(936))<=0)
-936 -8026 0
-1041 -8026 0
-1041 -936 -8027 0
c (0<=(SATLiteral(1041) - aux1824 + SATLiteral(936)))
936 8027 0
1041 8027 0
1041 936 8026 0
c ((SATLiteral(1056) - aux1825 + SATLiteral(921))<=0)
-921 -8029 0
-1056 -8029 0
-1056 -921 -8030 0
c (0<=(SATLiteral(1056) - aux1825 + SATLiteral(921)))
921 8030 0
1056 8030 0
1056 921 8029 0
c (( - aux1826 + SATLiteral(1176) + SATLiteral(906))<=0)
-906 -8032 0
-1176 -8032 0
-1176 -906 -8033 0
c (0<=( - aux1826 + SATLiteral(1176) + SATLiteral(906)))
906 8033 0
1176 8033 0
1176 906 8032 0
c (( - aux1827 + SATLiteral(1191) + SATLiteral(1206))<=0)
-1206 -8035 0
-1191 -8035 0
-1191 -1206 -8036 0
c (0<=( - aux1827 + SATLiteral(1191) + SATLiteral(1206)))
1206 8036 0
1191 8036 0
1191 1206 8035 0
c ((SATLiteral(1071) + aux1827 - aux1828)<=0)
8035 -8038 0
8036 -8039 0
-1071 -8038 0
-1071 8035 -8039 0
-1071 8036 -8041 0
c (0<=(SATLiteral(1071) + aux1827 - aux1828))
-8036 8041 0
-8035 8039 0
1071 8041 0
1071 -8036 8039 0
1071 -8035 8038 0
c ((aux1824 + aux1826 - aux1829)<=0)
8032 -8043 0
8033 -8044 0
8026 -8043 0
8026 8032 -8044 0
8026 8033 -8046 0
8027 -8044 0
8027 8032 -8046 0
8027 8033 -8048 0
c (0<=(aux1824 + aux1826 - aux1829))
-8033 8048 0
-8032 8046 0
-8027 8048 0
-8027 -8033 8046 0
-8027 -8032 8044 0
-8026 8046 0
-8026 -8033 8044 0
-8026 -8032 8043 0
c ((SATLiteral(1043) - aux1830 + SATLiteral(938))<=0)
-938 -8050 0
-1043 -8050 0
-1043 -938 -8051 0
c (0<=(SATLiteral(1043) - aux1830 + SATLiteral(938)))
938 8051 0
1043 8051 0
1043 938 8050 0
c ((SATLiteral(1058) - aux1831 + SATLiteral(923))<=0)
-923 -8053 0
-1058 -8053 0
-1058 -923 -8054 0
c (0<=(SATLiteral(1058) - aux1831 + SATLiteral(923)))
923 8054 0
1058 8054 0
1058 923 8053 0
c (( - aux1832 + SATLiteral(1178) + SATLiteral(908))<=0)
-908 -8056 0
-1178 -8056 0
-1178 -908 -8057 0
c (0<=( - aux1832 + SATLiteral(1178) + SATLiteral(908)))
908 8057 0
1178 8057 0
1178 908 8056 0
c (( - aux1833 + SATLiteral(1193) + SATLiteral(1208))<=0)
-1208 -8059 0
-1193 -8059 0
-1193 -1208 -8060 0
c (0<=( - aux1833 + SATLiteral(1193) + SATLiteral(1208)))
1208 8060 0
1193 8060 0
1193 1208 8059 0
c ((SATLiteral(1073) + aux1833 - aux1834)<=0)
8059 -8062 0
8060 -8063 0
-1073 -8062 0
-1073 8059 -8063 0
-1073 8060 -8065 0
c (0<=(SATLiteral(1073) + aux1833 - aux1834))
-8060 8065 0
-8059 8063 0
1073 8065 0
1073 -8060 8063 0
1073 -8059 8062 0
c ((aux1830 + aux1832 - aux1835)<=0)
8056 -8067 0
8057 -8068 0
8050 -8067 0
8050 8056 -8068 0
8050 8057 -8070 0
8051 -8068 0
8051 8056 -8070 0
8051 8057 -8072 0
c (0<=(aux1830 + aux1832 - aux1835))
-8057 8072 0
-8056 8070 0
-8051 8072 0
-8051 -8057 8070 0
-8051 -8056 8068 0
-8050 8070 0
-8050 -8057 8068 0
-8050 -8056 8067 0
c ((SATLiteral(1045) - aux1836 + SATLiteral(940))<=0)
-940 -8074 0
-1045 -8074 0
-1045 -940 -8075 0
c (0<=(SATLiteral(1045) - aux1836 + SATLiteral(940)))
940 8075 0
1045 8075 0
1045 940 8074 0
c ((SATLiteral(1060) - aux1837 + SATLiteral(925))<=0)
-925 -8077 0
-1060 -8077 0
-1060 -925 -8078 0
c (0<=(SATLiteral(1060) - aux1837 + SATLiteral(925)))
925 8078 0
1060 8078 0
1060 925 8077 0
c (( - aux1838 + SATLiteral(1180) + SATLiteral(910))<=0)
-910 -8080 0
-1180 -8080 0
-1180 -910 -8081 0
c (0<=( - aux1838 + SATLiteral(1180) + SATLiteral(910)))
910 8081 0
1180 8081 0
1180 910 8080 0
c (( - aux1839 + SATLiteral(1195) + SATLiteral(1210))<=0)
-1210 -8083 0
-1195 -8083 0
-1195 -1210 -8084 0
c (0<=( - aux1839 + SATLiteral(1195) + SATLiteral(1210)))
1210 8084 0
1195 8084 0
1195 1210 8083 0
c ((SATLiteral(1075) + aux1839 - aux1840)<=0)
8083 -8086 0
8084 -8087 0
-1075 -8086 0
-1075 8083 -8087 0
-1075 8084 -8089 0
c (0<=(SATLiteral(1075) + aux1839 - aux1840))
-8084 8089 0
-8083 8087 0
1075 8089 0
1075 -8084 8087 0
1075 -8083 8086 0
c ((aux1836 + aux1838 - aux1841)<=0)
8080 -8091 0
8081 -8092 0
8074 -8091 0
8074 8080 -8092 0
8074 8081 -8094 0
8075 -8092 0
8075 8080 -8094 0
8075 8081 -8096 0
c (0<=(aux1836 + aux1838 - aux1841))
-8081 8096 0
-8080 8094 0
-8075 8096 0
-8075 -8081 8094 0
-8075 -8080 8092 0
-8074 8094 0
-8074 -8081 8092 0
-8074 -8080 8091 0
c ((SATLiteral(1047) - aux1842 + SATLiteral(942))<=0)
-942 -8098 0
-1047 -8098 0
-1047 -942 -8099 0
c (0<=(SATLiteral(1047) - aux1842 + SATLiteral(942)))
942 8099 0
1047 8099 0
1047 942 8098 0
c ((SATLiteral(1062) - aux1843 + SATLiteral(927))<=0)
-927 -8101 0
-1062 -8101 0
-1062 -927 -8102 0
c (0<=(SATLiteral(1062) - aux1843 + SATLiteral(927)))
927 8102 0
1062 8102 0
1062 927 8101 0
c (( - aux1844 + SATLiteral(1182) + SATLiteral(912))<=0)
-912 -8104 0
-1182 -8104 0
-1182 -912 -8105 0
c (0<=( - aux1844 + SATLiteral(1182) + SATLiteral(912)))
912 8105 0
1182 8105 0
1182 912 8104 0
c (( - aux1845 + SATLiteral(1197) + SATLiteral(1212))<=0)
-1212 -8107 0
-1197 -8107 0
-1197 -1212 -8108 0
c (0<=( - aux1845 + SATLiteral(1197) + SATLiteral(1212)))
1212 8108 0
1197 8108 0
1197 1212 8107 0
c ((SATLiteral(1077) + aux1845 - aux1846)<=0)
8107 -8110 0
8108 -8111 0
-1077 -8110 0
-1077 8107 -8111 0
-1077 8108 -8113 0
c (0<=(SATLiteral(1077) + aux1845 - aux1846))
-8108 8113 0
-8107 8111 0
1077 8113 0
1077 -8108 8111 0
1077 -8107 8110 0
c ((aux1842 + aux1844 - aux1847)<=0)
8104 -8115 0
8105 -8116 0
8098 -8115 0
8098 8104 -8116 0
8098 8105 -8118 0
8099 -8116 0
8099 8104 -8118 0
8099 8105 -8120 0
c (0<=(aux1842 + aux1844 - aux1847))
-8105 8120 0
-8104 8118 0
-8099 8120 0
-8099 -8105 8118 0
-8099 -8104 8116 0
-8098 8118 0
-8098 -8105 8116 0
-8098 -8104 8115 0
c ((SATLiteral(1049) - aux1848 + SATLiteral(944))<=0)
-944 -8122 0
-1049 -8122 0
-1049 -944 -8123 0
c (0<=(SATLiteral(1049) - aux1848 + SATLiteral(944)))
944 8123 0
1049 8123 0
1049 944 8122 0
c ((SATLiteral(1064) - aux1849 + SATLiteral(929))<=0)
-929 -8125 0
-1064 -8125 0
-1064 -929 -8126 0
c (0<=(SATLiteral(1064) - aux1849 + SATLiteral(929)))
929 8126 0
1064 8126 0
1064 929 8125 0
c (( - aux1850 + SATLiteral(1184) + SATLiteral(914))<=0)
-914 -8128 0
-1184 -8128 0
-1184 -914 -8129 0
c (0<=( - aux1850 + SATLiteral(1184) + SATLiteral(914)))
914 8129 0
1184 8129 0
1184 914 8128 0
c (( - aux1851 + SATLiteral(1199) + SATLiteral(1214))<=0)
-1214 -8131 0
-1199 -8131 0
-1199 -1214 -8132 0
c (0<=( - aux1851 + SATLiteral(1199) + SATLiteral(1214)))
1214 8132 0
1199 8132 0
1199 1214 8131 0
c ((SATLiteral(1079) + aux1851 - aux1852)<=0)
8131 -8134 0
8132 -8135 0
-1079 -8134 0
-1079 8131 -8135 0
-1079 8132 -8137 0
c (0<=(SATLiteral(1079) + aux1851 - aux1852))
-8132 8137 0
-8131 8135 0
1079 8137 0
1079 -8132 8135 0
1079 -8131 8134 0
c ((aux1848 + aux1850 - aux1853)<=0)
8128 -8139 0
8129 -8140 0
8122 -8139 0
8122 8128 -8140 0
8122 8129 -8142 0
8123 -8140 0
8123 8128 -8142 0
8123 8129 -8144 0
c (0<=(aux1848 + aux1850 - aux1853))
-8129 8144 0
-8128 8142 0
-8123 8144 0
-8123 -8129 8142 0
-8123 -8128 8140 0
-8122 8142 0
-8122 -8129 8140 0
-8122 -8128 8139 0
c ((SATLiteral(1051) - aux1854 + SATLiteral(946))<=0)
-946 -8146 0
-1051 -8146 0
-1051 -946 -8147 0
c (0<=(SATLiteral(1051) - aux1854 + SATLiteral(946)))
946 8147 0
1051 8147 0
1051 946 8146 0
c ((SATLiteral(1066) - aux1855 + SATLiteral(931))<=0)
-931 -8149 0
-1066 -8149 0
-1066 -931 -8150 0
c (0<=(SATLiteral(1066) - aux1855 + SATLiteral(931)))
931 8150 0
1066 8150 0
1066 931 8149 0
c (( - aux1856 + SATLiteral(1186) + SATLiteral(916))<=0)
-916 -8152 0
-1186 -8152 0
-1186 -916 -8153 0
c (0<=( - aux1856 + SATLiteral(1186) + SATLiteral(916)))
916 8153 0
1186 8153 0
1186 916 8152 0
c (( - aux1857 + SATLiteral(1201) + SATLiteral(1216))<=0)
-1216 -8155 0
-1201 -8155 0
-1201 -1216 -8156 0
c (0<=( - aux1857 + SATLiteral(1201) + SATLiteral(1216)))
1216 8156 0
1201 8156 0
1201 1216 8155 0
c ((SATLiteral(1081) + aux1857 - aux1858)<=0)
8155 -8158 0
8156 -8159 0
-1081 -8158 0
-1081 8155 -8159 0
-1081 8156 -8161 0
c (0<=(SATLiteral(1081) + aux1857 - aux1858))
-8156 8161 0
-8155 8159 0
1081 8161 0
1081 -8156 8159 0
1081 -8155 8158 0
c ((aux1854 + aux1856 - aux1859)<=0)
8152 -8163 0
8153 -8164 0
8146 -8163 0
8146 8152 -8164 0
8146 8153 -8166 0
8147 -8164 0
8147 8152 -8166 0
8147 8153 -8168 0
c (0<=(aux1854 + aux1856 - aux1859))
-8153 8168 0
-8152 8166 0
-8147 8168 0
-8147 -8153 8166 0
-8147 -8152 8164 0
-8146 8166 0
-8146 -8153 8164 0
-8146 -8152 8163 0
c ((SATLiteral(-1050) - aux1860 + SATLiteral(-945))<=0)
945 -8170 0
1050 -8170 0
1050 945 -8171 0
c (0<=(SATLiteral(-1050) - aux1860 + SATLiteral(-945)))
-945 8171 0
-1050 8171 0
-1050 -945 8170 0
c ((SATLiteral(-1065) - aux1861 + SATLiteral(-930))<=0)
930 -8173 0
1065 -8173 0
1065 930 -8174 0
c (0<=(SATLiteral(-1065) - aux1861 + SATLiteral(-930)))
-930 8174 0
-1065 8174 0
-1065 -930 8173 0
c (( - aux1862 + SATLiteral(-1185) + SATLiteral(-915))<=0)
915 -8176 0
1185 -8176 0
1185 915 -8177 0
c (0<=( - aux1862 + SATLiteral(-1185) + SATLiteral(-915)))
-915 8177 0
-1185 8177 0
-1185 -915 8176 0
c (( - aux1863 + SATLiteral(-1200) + SATLiteral(-1215))<=0)
1215 -8179 0
1200 -8179 0
1200 1215 -8180 0
c (0<=( - aux1863 + SATLiteral(-1200) + SATLiteral(-1215)))
-1215 8180 0
-1200 8180 0
-1200 -1215 8179 0
c ((SATLiteral(-1080) + aux1863 - aux1864)<=0)
8179 -8182 0
8180 -8183 0
1080 -8182 0
1080 8179 -8183 0
1080 8180 -8185 0
c (0<=(SATLiteral(-1080) + aux1863 - aux1864))
-8180 8185 0
-8179 8183 0
-1080 8185 0
-1080 -8180 8183 0
-1080 -8179 8182 0
c ((aux1860 + aux1862 - aux1865)<=0)
8176 -8187 0
8177 -8188 0
8170 -8187 0
8170 8176 -8188 0
8170 8177 -8190 0
8171 -8188 0
8171 8176 -8190 0
8171 8177 -8192 0
c (0<=(aux1860 + aux1862 - aux1865))
-8177 8192 0
-8176 8190 0
-8171 8192 0
-8171 -8177 8190 0
-8171 -8176 8188 0
-8170 8190 0
-8170 -8177 8188 0
-8170 -8176 8187 0
c ((SATLiteral(377) - aux1875 + SATLiteral(257))<=0)
-257 -8221 0
-377 -8221 0
-377 -257 -8222 0
c (0<=(SATLiteral(377) - aux1875 + SATLiteral(257)))
257 8222 0
377 8222 0
377 257 8221 0
c ((SATLiteral(392) - aux1876 + SATLiteral(242))<=0)
-242 -8224 0
-392 -8224 0
-392 -242 -8225 0
c (0<=(SATLiteral(392) - aux1876 + SATLiteral(242)))
242 8225 0
392 8225 0
392 242 8224 0
c ((SATLiteral(107) - aux1877 + SATLiteral(227))<=0)
-227 -8227 0
-107 -8227 0
-107 -227 -8228 0
c (0<=(SATLiteral(107) - aux1877 + SATLiteral(227)))
227 8228 0
107 8228 0
107 227 8227 0
c ((SATLiteral(92) + SATLiteral(122) - aux1878)<=0)
-122 -8230 0
-92 -8230 0
-92 -122 -8231 0
c (0<=(SATLiteral(92) + SATLiteral(122) - aux1878))
122 8231 0
92 8231 0
92 122 8230 0
c ((aux1875 + aux1878 - aux1879)<=0)
8230 -8233 0
8231 -8234 0
8221 -8233 0
8221 8230 -8234 0
8221 8231 -8236 0
8222 -8234 0
8222 8230 -8236 0
8222 8231 -8238 0
c (0<=(aux1875 + aux1878 - aux1879))
-8231 8238 0
-8230 8236 0
-8222 8238 0
-8222 -8231 8236 0
-8222 -8230 8234 0
-8221 8236 0
-8221 -8231 8234 0
-8221 -8230 8233 0
c ((SATLiteral(379) - aux1880 + SATLiteral(259))<=0)
-259 -8240 0
-379 -8240 0
-379 -259 -8241 0
c (0<=(SATLiteral(379) - aux1880 + SATLiteral(259)))
259 8241 0
379 8241 0
379 259 8240 0
c ((SATLiteral(394) - aux1881 + SATLiteral(244))<=0)
-244 -8243 0
-394 -8243 0
-394 -244 -8244 0
c (0<=(SATLiteral(394) - aux1881 + SATLiteral(244)))
244 8244 0
394 8244 0
394 244 8243 0
c ((SATLiteral(109) - aux1882 + SATLiteral(229))<=0)
-229 -8246 0
-109 -8246 0
-109 -229 -8247 0
c (0<=(SATLiteral(109) - aux1882 + SATLiteral(229)))
229 8247 0
109 8247 0
109 229 8246 0
c ((SATLiteral(94) + SATLiteral(124) - aux1883)<=0)
-124 -8249 0
-94 -8249 0
-94 -124 -8250 0
c (0<=(SATLiteral(94) + SATLiteral(124) - aux1883))
124 8250 0
94 8250 0
94 124 8249 0
c ((aux1880 + aux1883 - aux1884)<=0)
8249 -8252 0
8250 -8253 0
8240 -8252 0
8240 8249 -8253 0
8240 8250 -8255 0
8241 -8253 0
8241 8249 -8255 0
8241 8250 -8257 0
c (0<=(aux1880 + aux1883 - aux1884))
-8250 8257 0
-8249 8255 0
-8241 8257 0
-8241 -8250 8255 0
-8241 -8249 8253 0
-8240 8255 0
-8240 -8250 8253 0
-8240 -8249 8252 0
c ((SATLiteral(381) - aux1885 + SATLiteral(261))<=0)
-261 -8259 0
-381 -8259 0
-381 -261 -8260 0
c (0<=(SATLiteral(381) - aux1885 + SATLiteral(261)))
261 8260 0
381 8260 0
381 261 8259 0
c ((SATLiteral(396) - aux1886 + SATLiteral(246))<=0)
-246 -8262 0
-396 -8262 0
-396 -246 -8263 0
c (0<=(SATLiteral(396) - aux1886 + SATLiteral(246)))
246 8263 0
396 8263 0
396 246 8262 0
c ((SATLiteral(111) - aux1887 + SATLiteral(231))<=0)
-231 -8265 0
-111 -8265 0
-111 -231 -8266 0
c (0<=(SATLiteral(111) - aux1887 + SATLiteral(231)))
231 8266 0
111 8266 0
111 231 8265 0
c ((SATLiteral(96) + SATLiteral(126) - aux1888)<=0)
-126 -8268 0
-96 -8268 0
-96 -126 -8269 0
c (0<=(SATLiteral(96) + SATLiteral(126) - aux1888))
126 8269 0
96 8269 0
96 126 8268 0
c ((aux1885 + aux1888 - aux1889)<=0)
8268 -8271 0
8269 -8272 0
8259 -8271 0
8259 8268 -8272 0
8259 8269 -8274 0
8260 -8272 0
8260 8268 -8274 0
8260 8269 -8276 0
c (0<=(aux1885 + aux1888 - aux1889))
-8269 8276 0
-8268 8274 0
-8260 8276 0
-8260 -8269 8274 0
-8260 -8268 8272 0
-8259 8274 0
-8259 -8269 8272 0
-8259 -8268 8271 0
c ((SATLiteral(383) - aux1890 + SATLiteral(263))<=0)
-263 -8278 0
-383 -8278 0
-383 -263 -8279 0
c (0<=(SATLiteral(383) - aux1890 + SATLiteral(263)))
263 8279 0
383 8279 0
383 263 8278 0
c ((SATLiteral(398) - aux1891 + SATLiteral(248))<=0)
-248 -8281 0
-398 -8281 0
-398 -248 -8282 0
c (0<=(SATLiteral(398) - aux1891 + SATLiteral(248)))
248 8282 0
398 8282 0
398 248 8281 0
c ((SATLiteral(113) - aux1892 + SATLiteral(233))<=0)
-233 -8284 0
-113 -8284 0
-113 -233 -8285 0
c (0<=(SATLiteral(113) - aux1892 + SATLiteral(233)))
233 8285 0
113 8285 0
113 233 8284 0
c ((SATLiteral(98) + SATLiteral(128) - aux1893)<=0)
-128 -8287 0
-98 -8287 0
-98 -128 -8288 0
c (0<=(SATLiteral(98) + SATLiteral(128) - aux1893))
128 8288 0
98 8288 0
98 128 8287 0
c ((aux1890 + aux1893 - aux1894)<=0)
8287 -8290 0
8288 -8291 0
8278 -8290 0
8278 8287 -8291 0
8278 8288 -8293 0
8279 -8291 0
8279 8287 -8293 0
8279 8288 -8295 0
c (0<=(aux1890 + aux1893 - aux1894))
-8288 8295 0
-8287 8293 0
-8279 8295 0
-8279 -8288 8293 0
-8279 -8287 8291 0
-8278 8293 0
-8278 -8288 8291 0
-8278 -8287 8290 0
c ((SATLiteral(385) - aux1895 + SATLiteral(265))<=0)
-265 -8297 0
-385 -8297 0
-385 -265 -8298 0
c (0<=(SATLiteral(385) - aux1895 + SATLiteral(265)))
265 8298 0
385 8298 0
385 265 8297 0
c ((SATLiteral(400) - aux1896 + SATLiteral(250))<=0)
-250 -8300 0
-400 -8300 0
-400 -250 -8301 0
c (0<=(SATLiteral(400) - aux1896 + SATLiteral(250)))
250 8301 0
400 8301 0
400 250 8300 0
c ((SATLiteral(115) - aux1897 + SATLiteral(235))<=0)
-235 -8303 0
-115 -8303 0
-115 -235 -8304 0
c (0<=(SATLiteral(115) - aux1897 + SATLiteral(235)))
235 8304 0
115 8304 0
115 235 8303 0
c ((SATLiteral(100) + SATLiteral(130) - aux1898)<=0)
-130 -8306 0
-100 -8306 0
-100 -130 -8307 0
c (0<=(SATLiteral(100) + SATLiteral(130) - aux1898))
130 8307 0
100 8307 0
100 130 8306 0
c ((aux1895 + aux1898 - aux1899)<=0)
8306 -8309 0
8307 -8310 0
8297 -8309 0
8297 8306 -8310 0
8297 8307 -8312 0
8298 -8310 0
8298 8306 -8312 0
8298 8307 -8314 0
c (0<=(aux1895 + aux1898 - aux1899))
-8307 8314 0
-8306 8312 0
-8298 8314 0
-8298 -8307 8312 0
-8298 -8306 8310 0
-8297 8312 0
-8297 -8307 8310 0
-8297 -8306 8309 0
c ((SATLiteral(387) - aux1900 + SATLiteral(267))<=0)
-267 -8316 0
-387 -8316 0
-387 -267 -8317 0
c (0<=(SATLiteral(387) - aux1900 + SATLiteral(267)))
267 8317 0
387 8317 0
387 267 8316 0
c ((SATLiteral(402) - aux1901 + SATLiteral(252))<=0)
-252 -8319 0
-402 -8319 0
-402 -252 -8320 0
c (0<=(SATLiteral(402) - aux1901 + SATLiteral(252)))
252 8320 0
402 8320 0
402 252 8319 0
c ((SATLiteral(117) - aux1902 + SATLiteral(237))<=0)
-237 -8322 0
-117 -8322 0
-117 -237 -8323 0
c (0<=(SATLiteral(117) - aux1902 + SATLiteral(237)))
237 8323 0
117 8323 0
117 237 8322 0
c ((SATLiteral(102) + SATLiteral(132) - aux1903)<=0)
-132 -8325 0
-102 -8325 0
-102 -132 -8326 0
c (0<=(SATLiteral(102) + SATLiteral(132) - aux1903))
132 8326 0
102 8326 0
102 132 8325 0
c ((aux1900 + aux1903 - aux1904)<=0)
8325 -8328 0
8326 -8329 0
8316 -8328 0
8316 8325 -8329 0
8316 8326 -8331 0
8317 -8329 0
8317 8325 -8331 0
8317 8326 -8333 0
c (0<=(aux1900 + aux1903 - aux1904))
-8326 8333 0
-8325 8331 0
-8317 8333 0
-8317 -8326 8331 0
-8317 -8325 8329 0
-8316 8331 0
-8316 -8326 8329 0
-8316 -8325 8328 0
c ((SATLiteral(389) - aux1905 + SATLiteral(269))<=0)
-269 -8335 0
-389 -8335 0
-389 -269 -8336 0
c (0<=(SATLiteral(389) - aux1905 + SATLiteral(269)))
269 8336 0
389 8336 0
389 269 8335 0
c ((SATLiteral(404) - aux1906 + SATLiteral(254))<=0)
-254 -8338 0
-404 -8338 0
-404 -254 -8339 0
c (0<=(SATLiteral(404) - aux1906 + SATLiteral(254)))
254 8339 0
404 8339 0
404 254 8338 0
c ((SATLiteral(119) - aux1907 + SATLiteral(239))<=0)
-239 -8341 0
-119 -8341 0
-119 -239 -8342 0
c (0<=(SATLiteral(119) - aux1907 + SATLiteral(239)))
239 8342 0
119 8342 0
119 239 8341 0
c ((SATLiteral(104) + SATLiteral(134) - aux1908)<=0)
-134 -8344 0
-104 -8344 0
-104 -134 -8345 0
c (0<=(SATLiteral(104) + SATLiteral(134) - aux1908))
134 8345 0
104 8345 0
104 134 8344 0
c ((aux1905 + aux1908 - aux1909)<=0)
8344 -8347 0
8345 -8348 0
8335 -8347 0
8335 8344 -8348 0
8335 8345 -8350 0
8336 -8348 0
8336 8344 -8350 0
8336 8345 -8352 0
c (0<=(aux1905 + aux1908 - aux1909))
-8345 8352 0
-8344 8350 0
-8336 8352 0
-8336 -8345 8350 0
-8336 -8344 8348 0
-8335 8350 0
-8335 -8345 8348 0
-8335 -8344 8347 0
c ((SATLiteral(391) - aux1910 + SATLiteral(271))<=0)
-271 -8354 0
-391 -8354 0
-391 -271 -8355 0
c (0<=(SATLiteral(391) - aux1910 + SATLiteral(271)))
271 8355 0
391 8355 0
391 271 8354 0
c ((SATLiteral(406) - aux1911 + SATLiteral(256))<=0)
-256 -8357 0
-406 -8357 0
-406 -256 -8358 0
c (0<=(SATLiteral(406) - aux1911 + SATLiteral(256)))
256 8358 0
406 8358 0
406 256 8357 0
c ((SATLiteral(121) - aux1912 + SATLiteral(241))<=0)
-241 -8360 0
-121 -8360 0
-121 -241 -8361 0
c (0<=(SATLiteral(121) - aux1912 + SATLiteral(241)))
241 8361 0
121 8361 0
121 241 8360 0
c ((SATLiteral(106) + SATLiteral(136) - aux1913)<=0)
-136 -8363 0
-106 -8363 0
-106 -136 -8364 0
c (0<=(SATLiteral(106) + SATLiteral(136) - aux1913))
136 8364 0
106 8364 0
106 136 8363 0
c ((aux1910 + aux1913 - aux1914)<=0)
8363 -8366 0
8364 -8367 0
8354 -8366 0
8354 8363 -8367 0
8354 8364 -8369 0
8355 -8367 0
8355 8363 -8369 0
8355 8364 -8371 0
c (0<=(aux1910 + aux1913 - aux1914))
-8364 8371 0
-8363 8369 0
-8355 8371 0
-8355 -8364 8369 0
-8355 -8363 8367 0
-8354 8369 0
-8354 -8364 8367 0
-8354 -8363 8366 0
c ((SATLiteral(-390) - aux1915 + SATLiteral(-270))<=0)
270 -8373 0
390 -8373 0
390 270 -8374 0
c (0<=(SATLiteral(-390) - aux1915 + SATLiteral(-270)))
-270 8374 0
-390 8374 0
-390 -270 8373 0
c ((SATLiteral(-405) - aux1916 + SATLiteral(-255))<=0)
255 -8376 0
405 -8376 0
405 255 -8377 0
c (0<=(SATLiteral(-405) - aux1916 + SATLiteral(-255)))
-255 8377 0
-405 8377 0
-405 -255 8376 0
c ((SATLiteral(-120) - aux1917 + SATLiteral(-240))<=0)
240 -8379 0
120 -8379 0
120 240 -8380 0
c (0<=(SATLiteral(-120) - aux1917 + SATLiteral(-240)))
-240 8380 0
-120 8380 0
-120 -240 8379 0
c ((SATLiteral(-105) + SATLiteral(-135) - aux1918)<=0)
135 -8382 0
105 -8382 0
105 135 -8383 0
c (0<=(SATLiteral(-105) + SATLiteral(-135) - aux1918))
-135 8383 0
-105 8383 0
-105 -135 8382 0
c ((aux1915 + aux1918 - aux1919)<=0)
8382 -8385 0
8383 -8386 0
8373 -8385 0
8373 8382 -8386 0
8373 8383 -8388 0
8374 -8386 0
8374 8382 -8388 0
8374 8383 -8390 0
c (0<=(aux1915 + aux1918 - aux1919))
-8383 8390 0
-8382 8388 0
-8374 8390 0
-8374 -8383 8388 0
-8374 -8382 8386 0
-8373 8388 0
-8373 -8383 8386 0
-8373 -8382 8385 0
c ((SATLiteral(302) - aux1920 + SATLiteral(182))<=0)
-182 -8392 0
-302 -8392 0
-302 -182 -8393 0
c (0<=(SATLiteral(302) - aux1920 + SATLiteral(182)))
182 8393 0
302 8393 0
302 182 8392 0
c ((SATLiteral(317) - aux1921 + SATLiteral(167))<=0)
-167 -8395 0
-317 -8395 0
-317 -167 -8396 0
c (0<=(SATLiteral(317) - aux1921 + SATLiteral(167)))
167 8396 0
317 8396 0
317 167 8395 0
c ((SATLiteral(304) - aux1922 + SATLiteral(184))<=0)
-184 -8398 0
-304 -8398 0
-304 -184 -8399 0
c (0<=(SATLiteral(304) - aux1922 + SATLiteral(184)))
184 8399 0
304 8399 0
304 184 8398 0
c ((SATLiteral(319) - aux1923 + SATLiteral(169))<=0)
-169 -8401 0
-319 -8401 0
-319 -169 -8402 0
c (0<=(SATLiteral(319) - aux1923 + SATLiteral(169)))
169 8402 0
319 8402 0
319 169 8401 0
c ((SATLiteral(306) - aux1924 + SATLiteral(186))<=0)
-186 -8404 0
-306 -8404 0
-306 -186 -8405 0
c (0<=(SATLiteral(306) - aux1924 + SATLiteral(186)))
186 8405 0
306 8405 0
306 186 8404 0
c ((SATLiteral(321) - aux1925 + SATLiteral(171))<=0)
-171 -8407 0
-321 -8407 0
-321 -171 -8408 0
c (0<=(SATLiteral(321) - aux1925 + SATLiteral(171)))
171 8408 0
321 8408 0
321 171 8407 0
c ((SATLiteral(308) - aux1926 + SATLiteral(188))<=0)
-188 -8410 0
-308 -8410 0
-308 -188 -8411 0
c (0<=(SATLiteral(308) - aux1926 + SATLiteral(188)))
188 8411 0
308 8411 0
308 188 8410 0
c ((SATLiteral(323) - aux1927 + SATLiteral(173))<=0)
-173 -8413 0
-323 -8413 0
-323 -173 -8414 0
c (0<=(SATLiteral(323) - aux1927 + SATLiteral(173)))
173 8414 0
323 8414 0
323 173 8413 0
c ((SATLiteral(310) - aux1928 + SATLiteral(190))<=0)
-190 -8416 0
-310 -8416 0
-310 -190 -8417 0
c (0<=(SATLiteral(310) - aux1928 + SATLiteral(190)))
190 8417 0
310 8417 0
310 190 8416 0
c ((SATLiteral(325) - aux1929 + SATLiteral(175))<=0)
-175 -8419 0
-325 -8419 0
-325 -175 -8420 0
c (0<=(SATLiteral(325) - aux1929 + SATLiteral(175)))
175 8420 0
325 8420 0
325 175 8419 0
c ((SATLiteral(312) - aux1930 + SATLiteral(192))<=0)
-192 -8422 0
-312 -8422 0
-312 -192 -8423 0
c (0<=(SATLiteral(312) - aux1930 + SATLiteral(192)))
192 8423 0
312 8423 0
312 192 8422 0
c ((SATLiteral(327) - aux1931 + SATLiteral(177))<=0)
-177 -8425 0
-327 -8425 0
-327 -177 -8426 0
c (0<=(SATLiteral(327) - aux1931 + SATLiteral(177)))
177 8426 0
327 8426 0
327 177 8425 0
c ((SATLiteral(314) - aux1932 + SATLiteral(194))<=0)
-194 -8428 0
-314 -8428 0
-314 -194 -8429 0
c (0<=(SATLiteral(314) - aux1932 + SATLiteral(194)))
194 8429 0
314 8429 0
314 194 8428 0
c ((SATLiteral(329) - aux1933 + SATLiteral(179))<=0)
-179 -8431 0
-329 -8431 0
-329 -179 -8432 0
c (0<=(SATLiteral(329) - aux1933 + SATLiteral(179)))
179 8432 0
329 8432 0
329 179 8431 0
c ((SATLiteral(316) - aux1934 + SATLiteral(196))<=0)
-196 -8434 0
-316 -8434 0
-316 -196 -8435 0
c (0<=(SATLiteral(316) - aux1934 + SATLiteral(196)))
196 8435 0
316 8435 0
316 196 8434 0
c ((SATLiteral(331) - aux1935 + SATLiteral(181))<=0)
-181 -8437 0
-331 -8437 0
-331 -181 -8438 0
c (0<=(SATLiteral(331) - aux1935 + SATLiteral(181)))
181 8438 0
331 8438 0
331 181 8437 0
c ((SATLiteral(-315) - aux1936 + SATLiteral(-195))<=0)
195 -8440 0
315 -8440 0
315 195 -8441 0
c (0<=(SATLiteral(-315) - aux1936 + SATLiteral(-195)))
-195 8441 0
-315 8441 0
-315 -195 8440 0
c ((SATLiteral(-330) - aux1937 + SATLiteral(-180))<=0)
180 -8443 0
330 -8443 0
330 180 -8444 0
c (0<=(SATLiteral(-330) - aux1937 + SATLiteral(-180)))
-180 8444 0
-330 8444 0
-330 -180 8443 0
c ((SATLiteral(332) - aux1938 + SATLiteral(632))<=0)
-632 -8446 0
-332 -8446 0
-332 -632 -8447 0
c (0<=(SATLiteral(332) - aux1938 + SATLiteral(632)))
632 8447 0
332 8447 0
332 632 8446 0
c (( - aux1939 + SATLiteral(467) + SATLiteral(617))<=0)
-617 -8449 0
-467 -8449 0
-467 -617 -8450 0
c (0<=( - aux1939 + SATLiteral(467) + SATLiteral(617)))
617 8450 0
467 8450 0
467 617 8449 0
c ((SATLiteral(334) - aux1940 + SATLiteral(634))<=0)
-634 -8452 0
-334 -8452 0
-334 -634 -8453 0
c (0<=(SATLiteral(334) - aux1940 + SATLiteral(634)))
634 8453 0
334 8453 0
334 634 8452 0
c (( - aux1941 + SATLiteral(469) + SATLiteral(619))<=0)
-619 -8455 0
-469 -8455 0
-469 -619 -8456 0
c (0<=( - aux1941 + SATLiteral(469) + SATLiteral(619)))
619 8456 0
469 8456 0
469 619 8455 0
c ((SATLiteral(336) - aux1942 + SATLiteral(636))<=0)
-636 -8458 0
-336 -8458 0
-336 -636 -8459 0
c (0<=(SATLiteral(336) - aux1942 + SATLiteral(636)))
636 8459 0
336 8459 0
336 636 8458 0
c (( - aux1943 + SATLiteral(471) + SATLiteral(621))<=0)
-621 -8461 0
-471 -8461 0
-471 -621 -8462 0
c (0<=( - aux1943 + SATLiteral(471) + SATLiteral(621)))
621 8462 0
471 8462 0
471 621 8461 0
c ((SATLiteral(338) - aux1944 + SATLiteral(638))<=0)
-638 -8464 0
-338 -8464 0
-338 -638 -8465 0
c (0<=(SATLiteral(338) - aux1944 + SATLiteral(638)))
638 8465 0
338 8465 0
338 638 8464 0
c (( - aux1945 + SATLiteral(473) + SATLiteral(623))<=0)
-623 -8467 0
-473 -8467 0
-473 -623 -8468 0
c (0<=( - aux1945 + SATLiteral(473) + SATLiteral(623)))
623 8468 0
473 8468 0
473 623 8467 0
c ((SATLiteral(340) - aux1946 + SATLiteral(640))<=0)
-640 -8470 0
-340 -8470 0
-340 -640 -8471 0
c (0<=(SATLiteral(340) - aux1946 + SATLiteral(640)))
640 8471 0
340 8471 0
340 640 8470 0
c (( - aux1947 + SATLiteral(475) + SATLiteral(625))<=0)
-625 -8473 0
-475 -8473 0
-475 -625 -8474 0
c (0<=( - aux1947 + SATLiteral(475) + SATLiteral(625)))
625 8474 0
475 8474 0
475 625 8473 0
c ((SATLiteral(342) - aux1948 + SATLiteral(642))<=0)
-642 -8476 0
-342 -8476 0
-342 -642 -8477 0
c (0<=(SATLiteral(342) - aux1948 + SATLiteral(642)))
642 8477 0
342 8477 0
342 642 8476 0
c (( - aux1949 + SATLiteral(477) + SATLiteral(627))<=0)
-627 -8479 0
-477 -8479 0
-477 -627 -8480 0
c (0<=( - aux1949 + SATLiteral(477) + SATLiteral(627)))
627 8480 0
477 8480 0
477 627 8479 0
c ((SATLiteral(344) - aux1950 + SATLiteral(644))<=0)
-644 -8482 0
-344 -8482 0
-344 -644 -8483 0
c (0<=(SATLiteral(344) - aux1950 + SATLiteral(644)))
644 8483 0
344 8483 0
344 644 8482 0
c (( - aux1951 + SATLiteral(479) + SATLiteral(629))<=0)
-629 -8485 0
-479 -8485 0
-479 -629 -8486 0
c (0<=( - aux1951 + SATLiteral(479) + SATLiteral(629)))
629 8486 0
479 8486 0
479 629 8485 0
c ((SATLiteral(346) - aux1952 + SATLiteral(646))<=0)
-646 -8488 0
-346 -8488 0
-346 -646 -8489 0
c (0<=(SATLiteral(346) - aux1952 + SATLiteral(646)))
646 8489 0
346 8489 0
346 646 8488 0
c (( - aux1953 + SATLiteral(481) + SATLiteral(631))<=0)
-631 -8491 0
-481 -8491 0
-481 -631 -8492 0
c (0<=( - aux1953 + SATLiteral(481) + SATLiteral(631)))
631 8492 0
481 8492 0
481 631 8491 0
c ((SATLiteral(-345) - aux1954 + SATLiteral(-645))<=0)
645 -8494 0
345 -8494 0
345 645 -8495 0
c (0<=(SATLiteral(-345) - aux1954 + SATLiteral(-645)))
-645 8495 0
-345 8495 0
-345 -645 8494 0
c (( - aux1955 + SATLiteral(-480) + SATLiteral(-630))<=0)
630 -8497 0
480 -8497 0
480 630 -8498 0
c (0<=( - aux1955 + SATLiteral(-480) + SATLiteral(-630)))
-630 8498 0
-480 8498 0
-480 -630 8497 0
c ((SATLiteral(737) - aux1965 + SATLiteral(602))<=0)
-602 -8527 0
-737 -8527 0
-737 -602 -8528 0
c (0<=(SATLiteral(737) - aux1965 + SATLiteral(602)))
602 8528 0
737 8528 0
737 602 8527 0
c (( - aux1966 + SATLiteral(872) + SATLiteral(587))<=0)
-587 -8530 0
-872 -8530 0
-872 -587 -8531 0
c (0<=( - aux1966 + SATLiteral(872) + SATLiteral(587)))
587 8531 0
872 8531 0
872 587 8530 0
c ((SATLiteral(739) - aux1967 + SATLiteral(604))<=0)
-604 -8533 0
-739 -8533 0
-739 -604 -8534 0
c (0<=(SATLiteral(739) - aux1967 + SATLiteral(604)))
604 8534 0
739 8534 0
739 604 8533 0
c (( - aux1968 + SATLiteral(874) + SATLiteral(589))<=0)
-589 -8536 0
-874 -8536 0
-874 -589 -8537 0
c (0<=( - aux1968 + SATLiteral(874) + SATLiteral(589)))
589 8537 0
874 8537 0
874 589 8536 0
c ((SATLiteral(741) - aux1969 + SATLiteral(606))<=0)
-606 -8539 0
-741 -8539 0
-741 -606 -8540 0
c (0<=(SATLiteral(741) - aux1969 + SATLiteral(606)))
606 8540 0
741 8540 0
741 606 8539 0
c (( - aux1970 + SATLiteral(876) + SATLiteral(591))<=0)
-591 -8542 0
-876 -8542 0
-876 -591 -8543 0
c (0<=( - aux1970 + SATLiteral(876) + SATLiteral(591)))
591 8543 0
876 8543 0
876 591 8542 0
c ((SATLiteral(743) - aux1971 + SATLiteral(608))<=0)
-608 -8545 0
-743 -8545 0
-743 -608 -8546 0
c (0<=(SATLiteral(743) - aux1971 + SATLiteral(608)))
608 8546 0
743 8546 0
743 608 8545 0
c (( - aux1972 + SATLiteral(878) + SATLiteral(593))<=0)
-593 -8548 0
-878 -8548 0
-878 -593 -8549 0
c (0<=( - aux1972 + SATLiteral(878) + SATLiteral(593)))
593 8549 0
878 8549 0
878 593 8548 0
c ((SATLiteral(745) - aux1973 + SATLiteral(610))<=0)
-610 -8551 0
-745 -8551 0
-745 -610 -8552 0
c (0<=(SATLiteral(745) - aux1973 + SATLiteral(610)))
610 8552 0
745 8552 0
745 610 8551 0
c (( - aux1974 + SATLiteral(880) + SATLiteral(595))<=0)
-595 -8554 0
-880 -8554 0
-880 -595 -8555 0
c (0<=( - aux1974 + SATLiteral(880) + SATLiteral(595)))
595 8555 0
880 8555 0
880 595 8554 0
c ((SATLiteral(747) - aux1975 + SATLiteral(612))<=0)
-612 -8557 0
-747 -8557 0
-747 -612 -8558 0
c (0<=(SATLiteral(747) - aux1975 + SATLiteral(612)))
612 8558 0
747 8558 0
747 612 8557 0
c (( - aux1976 + SATLiteral(882) + SATLiteral(597))<=0)
-597 -8560 0
-882 -8560 0
-882 -597 -8561 0
c (0<=( - aux1976 + SATLiteral(882) + SATLiteral(597)))
597 8561 0
882 8561 0
882 597 8560 0
c ((SATLiteral(749) - aux1977 + SATLiteral(614))<=0)
-614 -8563 0
-749 -8563 0
-749 -614 -8564 0
c (0<=(SATLiteral(749) - aux1977 + SATLiteral(614)))
614 8564 0
749 8564 0
749 614 8563 0
c (( - aux1978 + SATLiteral(884) + SATLiteral(599))<=0)
-599 -8566 0
-884 -8566 0
-884 -599 -8567 0
c (0<=( - aux1978 + SATLiteral(884) + SATLiteral(599)))
599 8567 0
884 8567 0
884 599 8566 0
c ((SATLiteral(751) - aux1979 + SATLiteral(616))<=0)
-616 -8569 0
-751 -8569 0
-751 -616 -8570 0
c (0<=(SATLiteral(751) - aux1979 + SATLiteral(616)))
616 8570 0
751 8570 0
751 616 8569 0
c (( - aux1980 + SATLiteral(886) + SATLiteral(601))<=0)
-601 -8572 0
-886 -8572 0
-886 -601 -8573 0
c (0<=( - aux1980 + SATLiteral(886) + SATLiteral(601)))
601 8573 0
886 8573 0
886 601 8572 0
c ((SATLiteral(-750) - aux1981 + SATLiteral(-615))<=0)
615 -8575 0
750 -8575 0
750 615 -8576 0
c (0<=(SATLiteral(-750) - aux1981 + SATLiteral(-615)))
-615 8576 0
-750 8576 0
-750 -615 8575 0
c (( - aux1982 + SATLiteral(-885) + SATLiteral(-600))<=0)
600 -8578 0
885 -8578 0
885 600 -8579 0
c (0<=( - aux1982 + SATLiteral(-885) + SATLiteral(-600)))
-600 8579 0
-885 8579 0
-885 -600 8578 0
c ((SATLiteral(752) - aux1992 + SATLiteral(917))<=0)
-917 -8608 0
-752 -8608 0
-752 -917 -8609 0
c (0<=(SATLiteral(752) - aux1992 + SATLiteral(917)))
917 8609 0
752 8609 0
752 917 8608 0
c ((SATLiteral(767) - aux1993 + SATLiteral(902))<=0)
-902 -8611 0
-767 -8611 0
-767 -902 -8612 0
c (0<=(SATLiteral(767) - aux1993 + SATLiteral(902)))
902 8612 0
767 8612 0
767 902 8611 0
c ((SATLiteral(754) - aux1994 + SATLiteral(919))<=0)
-919 -8614 0
-754 -8614 0
-754 -919 -8615 0
c (0<=(SATLiteral(754) - aux1994 + SATLiteral(919)))
919 8615 0
754 8615 0
754 919 8614 0
c ((SATLiteral(769) - aux1995 + SATLiteral(904))<=0)
-904 -8617 0
-769 -8617 0
-769 -904 -8618 0
c (0<=(SATLiteral(769) - aux1995 + SATLiteral(904)))
904 8618 0
769 8618 0
769 904 8617 0
c ((SATLiteral(756) - aux1996 + SATLiteral(921))<=0)
-921 -8620 0
-756 -8620 0
-756 -921 -8621 0
c (0<=(SATLiteral(756) - aux1996 + SATLiteral(921)))
921 8621 0
756 8621 0
756 921 8620 0
c ((SATLiteral(771) - aux1997 + SATLiteral(906))<=0)
-906 -8623 0
-771 -8623 0
-771 -906 -8624 0
c (0<=(SATLiteral(771) - aux1997 + SATLiteral(906)))
906 8624 0
771 8624 0
771 906 8623 0
c ((SATLiteral(758) - aux1998 + SATLiteral(923))<=0)
-923 -8626 0
-758 -8626 0
-758 -923 -8627 0
c (0<=(SATLiteral(758) - aux1998 + SATLiteral(923)))
923 8627 0
758 8627 0
758 923 8626 0
c ((SATLiteral(773) - aux1999 + SATLiteral(908))<=0)
-908 -8629 0
-773 -8629 0
-773 -908 -8630 0
c (0<=(SATLiteral(773) - aux1999 + SATLiteral(908)))
908 8630 0
773 8630 0
773 908 8629 0
c ((SATLiteral(760) - aux2000 + SATLiteral(925))<=0)
-925 -8632 0
-760 -8632 0
-760 -925 -8633 0
c (0<=(SATLiteral(760) - aux2000 + SATLiteral(925)))
925 8633 0
760 8633 0
760 925 8632 0
c ((SATLiteral(775) - aux2001 + SATLiteral(910))<=0)
-910 -8635 0
-775 -8635 0
-775 -910 -8636 0
c (0<=(SATLiteral(775) - aux2001 + SATLiteral(910)))
910 8636 0
775 8636 0
775 910 8635 0
c ((SATLiteral(762) - aux2002 + SATLiteral(927))<=0)
-927 -8638 0
-762 -8638 0
-762 -927 -8639 0
c (0<=(SATLiteral(762) - aux2002 + SATLiteral(927)))
927 8639 0
762 8639 0
762 927 8638 0
c ((SATLiteral(777) - aux2003 + SATLiteral(912))<=0)
-912 -8641 0
-777 -8641 0
-777 -912 -8642 0
c (0<=(SATLiteral(777) - aux2003 + SATLiteral(912)))
912 8642 0
777 8642 0
777 912 8641 0
c ((SATLiteral(764) - aux2004 + SATLiteral(929))<=0)
-929 -8644 0
-764 -8644 0
-764 -929 -8645 0
c (0<=(SATLiteral(764) - aux2004 + SATLiteral(929)))
929 8645 0
764 8645 0
764 929 8644 0
c ((SATLiteral(779) - aux2005 + SATLiteral(914))<=0)
-914 -8647 0
-779 -8647 0
-779 -914 -8648 0
c (0<=(SATLiteral(779) - aux2005 + SATLiteral(914)))
914 8648 0
779 8648 0
779 914 8647 0
c ((SATLiteral(766) - aux2006 + SATLiteral(931))<=0)
-931 -8650 0
-766 -8650 0
-766 -931 -8651 0
c (0<=(SATLiteral(766) - aux2006 + SATLiteral(931)))
931 8651 0
766 8651 0
766 931 8650 0
c ((SATLiteral(781) - aux2007 + SATLiteral(916))<=0)
-916 -8653 0
-781 -8653 0
-781 -916 -8654 0
c (0<=(SATLiteral(781) - aux2007 + SATLiteral(916)))
916 8654 0
781 8654 0
781 916 8653 0
c ((SATLiteral(-765) - aux2008 + SATLiteral(-930))<=0)
930 -8656 0
765 -8656 0
765 930 -8657 0
c (0<=(SATLiteral(-765) - aux2008 + SATLiteral(-930)))
-930 8657 0
-765 8657 0
-765 -930 8656 0
c ((SATLiteral(-780) - aux2009 + SATLiteral(-915))<=0)
915 -8659 0
780 -8659 0
780 915 -8660 0
c (0<=(SATLiteral(-780) - aux2009 + SATLiteral(-915)))
-915 8660 0
-780 8660 0
-780 -915 8659 0
c ((SATLiteral(947) - aux2010 + SATLiteral(827))<=0)
-827 -8662 0
-947 -8662 0
-947 -827 -8663 0
c (0<=(SATLiteral(947) - aux2010 + SATLiteral(827)))
827 8663 0
947 8663 0
947 827 8662 0
c ((SATLiteral(962) - aux2011 + SATLiteral(1097))<=0)
-1097 -8665 0
-962 -8665 0
-962 -1097 -8666 0
c (0<=(SATLiteral(962) - aux2011 + SATLiteral(1097)))
1097 8666 0
962 8666 0
962 1097 8665 0
c ((SATLiteral(977) - aux2012 + SATLiteral(1082))<=0)
-1082 -8668 0
-977 -8668 0
-977 -1082 -8669 0
c (0<=(SATLiteral(977) - aux2012 + SATLiteral(1082)))
1082 8669 0
977 8669 0
977 1082 8668 0
c ((SATLiteral(949) - aux2013 + SATLiteral(829))<=0)
-829 -8671 0
-949 -8671 0
-949 -829 -8672 0
c (0<=(SATLiteral(949) - aux2013 + SATLiteral(829)))
829 8672 0
949 8672 0
949 829 8671 0
c ((SATLiteral(964) - aux2014 + SATLiteral(1099))<=0)
-1099 -8674 0
-964 -8674 0
-964 -1099 -8675 0
c (0<=(SATLiteral(964) - aux2014 + SATLiteral(1099)))
1099 8675 0
964 8675 0
964 1099 8674 0
c ((SATLiteral(979) - aux2015 + SATLiteral(1084))<=0)
-1084 -8677 0
-979 -8677 0
-979 -1084 -8678 0
c (0<=(SATLiteral(979) - aux2015 + SATLiteral(1084)))
1084 8678 0
979 8678 0
979 1084 8677 0
c ((SATLiteral(951) - aux2016 + SATLiteral(831))<=0)
-831 -8680 0
-951 -8680 0
-951 -831 -8681 0
c (0<=(SATLiteral(951) - aux2016 + SATLiteral(831)))
831 8681 0
951 8681 0
951 831 8680 0
c ((SATLiteral(966) - aux2017 + SATLiteral(1101))<=0)
-1101 -8683 0
-966 -8683 0
-966 -1101 -8684 0
c (0<=(SATLiteral(966) - aux2017 + SATLiteral(1101)))
1101 8684 0
966 8684 0
966 1101 8683 0
c ((SATLiteral(981) - aux2018 + SATLiteral(1086))<=0)
-1086 -8686 0
-981 -8686 0
-981 -1086 -8687 0
c (0<=(SATLiteral(981) - aux2018 + SATLiteral(1086)))
1086 8687 0
981 8687 0
981 1086 8686 0
c ((SATLiteral(953) - aux2019 + SATLiteral(833))<=0)
-833 -8689 0
-953 -8689 0
-953 -833 -8690 0
c (0<=(SATLiteral(953) - aux2019 + SATLiteral(833)))
833 8690 0
953 8690 0
953 833 8689 0
c ((SATLiteral(968) - aux2020 + SATLiteral(1103))<=0)
-1103 -8692 0
-968 -8692 0
-968 -1103 -8693 0
c (0<=(SATLiteral(968) - aux2020 + SATLiteral(1103)))
1103 8693 0
968 8693 0
968 1103 8692 0
c ((SATLiteral(983) - aux2021 + SATLiteral(1088))<=0)
-1088 -8695 0
-983 -8695 0
-983 -1088 -8696 0
c (0<=(SATLiteral(983) - aux2021 + SATLiteral(1088)))
1088 8696 0
983 8696 0
983 1088 8695 0
c ((SATLiteral(955) - aux2022 + SATLiteral(835))<=0)
-835 -8698 0
-955 -8698 0
-955 -835 -8699 0
c (0<=(SATLiteral(955) - aux2022 + SATLiteral(835)))
835 8699 0
955 8699 0
955 835 8698 0
c ((SATLiteral(970) - aux2023 + SATLiteral(1105))<=0)
-1105 -8701 0
-970 -8701 0
-970 -1105 -8702 0
c (0<=(SATLiteral(970) - aux2023 + SATLiteral(1105)))
1105 8702 0
970 8702 0
970 1105 8701 0
c ((SATLiteral(985) - aux2024 + SATLiteral(1090))<=0)
-1090 -8704 0
-985 -8704 0
-985 -1090 -8705 0
c (0<=(SATLiteral(985) - aux2024 + SATLiteral(1090)))
1090 8705 0
985 8705 0
985 1090 8704 0
c ((SATLiteral(957) - aux2025 + SATLiteral(837))<=0)
-837 -8707 0
-957 -8707 0
-957 -837 -8708 0
c (0<=(SATLiteral(957) - aux2025 + SATLiteral(837)))
837 8708 0
957 8708 0
957 837 8707 0
c ((SATLiteral(972) - aux2026 + SATLiteral(1107))<=0)
-1107 -8710 0
-972 -8710 0
-972 -1107 -8711 0
c (0<=(SATLiteral(972) - aux2026 + SATLiteral(1107)))
1107 8711 0
972 8711 0
972 1107 8710 0
c ((SATLiteral(987) - aux2027 + SATLiteral(1092))<=0)
-1092 -8713 0
-987 -8713 0
-987 -1092 -8714 0
c (0<=(SATLiteral(987) - aux2027 + SATLiteral(1092)))
1092 8714 0
987 8714 0
987 1092 8713 0
c ((SATLiteral(959) - aux2028 + SATLiteral(839))<=0)
-839 -8716 0
-959 -8716 0
-959 -839 -8717 0
c (0<=(SATLiteral(959) - aux2028 + SATLiteral(839)))
839 8717 0
959 8717 0
959 839 8716 0
c ((SATLiteral(974) - aux2029 + SATLiteral(1109))<=0)
-1109 -8719 0
-974 -8719 0
-974 -1109 -8720 0
c (0<=(SATLiteral(974) - aux2029 + SATLiteral(1109)))
1109 8720 0
974 8720 0
974 1109 8719 0
c ((SATLiteral(989) - aux2030 + SATLiteral(1094))<=0)
-1094 -8722 0
-989 -8722 0
-989 -1094 -8723 0
c (0<=(SATLiteral(989) - aux2030 + SATLiteral(1094)))
1094 8723 0
989 8723 0
989 1094 8722 0
c ((SATLiteral(961) - aux2031 + SATLiteral(841))<=0)
-841 -8725 0
-961 -8725 0
-961 -841 -8726 0
c (0<=(SATLiteral(961) - aux2031 + SATLiteral(841)))
841 8726 0
961 8726 0
961 841 8725 0
c ((SATLiteral(976) - aux2032 + SATLiteral(1111))<=0)
-1111 -8728 0
-976 -8728 0
-976 -1111 -8729 0
c (0<=(SATLiteral(976) - aux2032 + SATLiteral(1111)))
1111 8729 0
976 8729 0
976 1111 8728 0
c ((SATLiteral(991) - aux2033 + SATLiteral(1096))<=0)
-1096 -8731 0
-991 -8731 0
-991 -1096 -8732 0
c (0<=(SATLiteral(991) - aux2033 + SATLiteral(1096)))
1096 8732 0
991 8732 0
991 1096 8731 0
c ((SATLiteral(-960) - aux2034 + SATLiteral(-840))<=0)
840 -8734 0
960 -8734 0
960 840 -8735 0
c (0<=(SATLiteral(-960) - aux2034 + SATLiteral(-840)))
-840 8735 0
-960 8735 0
-960 -840 8734 0
c ((SATLiteral(-975) - aux2035 + SATLiteral(-1110))<=0)
1110 -8737 0
975 -8737 0
975 1110 -8738 0
c (0<=(SATLiteral(-975) - aux2035 + SATLiteral(-1110)))
-1110 8738 0
-975 8738 0
-975 -1110 8737 0
c ((SATLiteral(-990) - aux2036 + SATLiteral(-1095))<=0)
1095 -8740 0
990 -8740 0
990 1095 -8741 0
c (0<=(SATLiteral(-990) - aux2036 + SATLiteral(-1095)))
-1095 8741 0
-990 8741 0
-990 -1095 8740 0
