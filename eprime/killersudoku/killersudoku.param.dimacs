p cnf 8462 40519                                                                                    

1 0
c Encoding variable: x_00001_00001 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00001_00001' order represents '1' with '2'
c Var 'x_00001_00001' direct represents '1' with '2'
c Var 'x_00001_00001' order represents '2' with '3'
-2 3 0
c Var 'x_00001_00001' direct represents '2' with '4'
2 -3 4 0
-4 3 0
-4 -2 0
c Var 'x_00001_00001' order represents '3' with '5'
-3 5 0
c Var 'x_00001_00001' direct represents '3' with '6'
3 -5 6 0
-6 5 0
-6 -3 0
c Var 'x_00001_00001' order represents '4' with '7'
-5 7 0
c Var 'x_00001_00001' direct represents '4' with '8'
5 -7 8 0
-8 7 0
-8 -5 0
c Var 'x_00001_00001' order represents '5' with '9'
-7 9 0
c Var 'x_00001_00001' direct represents '5' with '10'
7 -9 10 0
-10 9 0
-10 -7 0
c Var 'x_00001_00001' order represents '6' with '11'
-9 11 0
c Var 'x_00001_00001' direct represents '6' with '12'
9 -11 12 0
-12 11 0
-12 -9 0
c Var 'x_00001_00001' order represents '7' with '13'
-11 13 0
c Var 'x_00001_00001' direct represents '7' with '14'
11 -13 14 0
-14 13 0
-14 -11 0
c Var 'x_00001_00001' order represents '8' with '15'
-13 15 0
c Var 'x_00001_00001' direct represents '8' with '16'
13 -15 16 0
-16 15 0
-16 -13 0
c Var 'x_00001_00001' direct represents '9' with '-15'
2 4 6 8 10 12 14 16 -15 0
c Encoding variable: x_00001_00002 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00001_00002' order represents '1' with '17'
c Var 'x_00001_00002' direct represents '1' with '17'
c Var 'x_00001_00002' order represents '2' with '18'
-17 18 0
c Var 'x_00001_00002' direct represents '2' with '19'
17 -18 19 0
-19 18 0
-19 -17 0
c Var 'x_00001_00002' order represents '3' with '20'
-18 20 0
c Var 'x_00001_00002' direct represents '3' with '21'
18 -20 21 0
-21 20 0
-21 -18 0
c Var 'x_00001_00002' order represents '4' with '22'
-20 22 0
c Var 'x_00001_00002' direct represents '4' with '23'
20 -22 23 0
-23 22 0
-23 -20 0
c Var 'x_00001_00002' order represents '5' with '24'
-22 24 0
c Var 'x_00001_00002' direct represents '5' with '25'
22 -24 25 0
-25 24 0
-25 -22 0
c Var 'x_00001_00002' order represents '6' with '26'
-24 26 0
c Var 'x_00001_00002' direct represents '6' with '27'
24 -26 27 0
-27 26 0
-27 -24 0
c Var 'x_00001_00002' order represents '7' with '28'
-26 28 0
c Var 'x_00001_00002' direct represents '7' with '29'
26 -28 29 0
-29 28 0
-29 -26 0
c Var 'x_00001_00002' order represents '8' with '30'
-28 30 0
c Var 'x_00001_00002' direct represents '8' with '31'
28 -30 31 0
-31 30 0
-31 -28 0
c Var 'x_00001_00002' direct represents '9' with '-30'
17 19 21 23 25 27 29 31 -30 0
c Encoding variable: x_00001_00003 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00001_00003' order represents '1' with '32'
c Var 'x_00001_00003' direct represents '1' with '32'
c Var 'x_00001_00003' order represents '2' with '33'
-32 33 0
c Var 'x_00001_00003' direct represents '2' with '34'
32 -33 34 0
-34 33 0
-34 -32 0
c Var 'x_00001_00003' order represents '3' with '35'
-33 35 0
c Var 'x_00001_00003' direct represents '3' with '36'
33 -35 36 0
-36 35 0
-36 -33 0
c Var 'x_00001_00003' order represents '4' with '37'
-35 37 0
c Var 'x_00001_00003' direct represents '4' with '38'
35 -37 38 0
-38 37 0
-38 -35 0
c Var 'x_00001_00003' order represents '5' with '39'
-37 39 0
c Var 'x_00001_00003' direct represents '5' with '40'
37 -39 40 0
-40 39 0
-40 -37 0
c Var 'x_00001_00003' order represents '6' with '41'
-39 41 0
c Var 'x_00001_00003' direct represents '6' with '42'
39 -41 42 0
-42 41 0
-42 -39 0
c Var 'x_00001_00003' order represents '7' with '43'
-41 43 0
c Var 'x_00001_00003' direct represents '7' with '44'
41 -43 44 0
-44 43 0
-44 -41 0
c Var 'x_00001_00003' order represents '8' with '45'
-43 45 0
c Var 'x_00001_00003' direct represents '8' with '46'
43 -45 46 0
-46 45 0
-46 -43 0
c Var 'x_00001_00003' direct represents '9' with '-45'
32 34 36 38 40 42 44 46 -45 0
c Encoding variable: x_00001_00004 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00001_00004' order represents '1' with '47'
c Var 'x_00001_00004' direct represents '1' with '47'
c Var 'x_00001_00004' order represents '2' with '48'
-47 48 0
c Var 'x_00001_00004' direct represents '2' with '49'
47 -48 49 0
-49 48 0
-49 -47 0
c Var 'x_00001_00004' order represents '3' with '50'
-48 50 0
c Var 'x_00001_00004' direct represents '3' with '51'
48 -50 51 0
-51 50 0
-51 -48 0
c Var 'x_00001_00004' order represents '4' with '52'
-50 52 0
c Var 'x_00001_00004' direct represents '4' with '53'
50 -52 53 0
-53 52 0
-53 -50 0
c Var 'x_00001_00004' order represents '5' with '54'
-52 54 0
c Var 'x_00001_00004' direct represents '5' with '55'
52 -54 55 0
-55 54 0
-55 -52 0
c Var 'x_00001_00004' order represents '6' with '56'
-54 56 0
c Var 'x_00001_00004' direct represents '6' with '57'
54 -56 57 0
-57 56 0
-57 -54 0
c Var 'x_00001_00004' order represents '7' with '58'
-56 58 0
c Var 'x_00001_00004' direct represents '7' with '59'
56 -58 59 0
-59 58 0
-59 -56 0
c Var 'x_00001_00004' order represents '8' with '60'
-58 60 0
c Var 'x_00001_00004' direct represents '8' with '61'
58 -60 61 0
-61 60 0
-61 -58 0
c Var 'x_00001_00004' direct represents '9' with '-60'
47 49 51 53 55 57 59 61 -60 0
c Encoding variable: x_00001_00005 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00001_00005' order represents '1' with '62'
c Var 'x_00001_00005' direct represents '1' with '62'
c Var 'x_00001_00005' order represents '2' with '63'
-62 63 0
c Var 'x_00001_00005' direct represents '2' with '64'
62 -63 64 0
-64 63 0
-64 -62 0
c Var 'x_00001_00005' order represents '3' with '65'
-63 65 0
c Var 'x_00001_00005' direct represents '3' with '66'
63 -65 66 0
-66 65 0
-66 -63 0
c Var 'x_00001_00005' order represents '4' with '67'
-65 67 0
c Var 'x_00001_00005' direct represents '4' with '68'
65 -67 68 0
-68 67 0
-68 -65 0
c Var 'x_00001_00005' order represents '5' with '69'
-67 69 0
c Var 'x_00001_00005' direct represents '5' with '70'
67 -69 70 0
-70 69 0
-70 -67 0
c Var 'x_00001_00005' order represents '6' with '71'
-69 71 0
c Var 'x_00001_00005' direct represents '6' with '72'
69 -71 72 0
-72 71 0
-72 -69 0
c Var 'x_00001_00005' order represents '7' with '73'
-71 73 0
c Var 'x_00001_00005' direct represents '7' with '74'
71 -73 74 0
-74 73 0
-74 -71 0
c Var 'x_00001_00005' order represents '8' with '75'
-73 75 0
c Var 'x_00001_00005' direct represents '8' with '76'
73 -75 76 0
-76 75 0
-76 -73 0
c Var 'x_00001_00005' direct represents '9' with '-75'
62 64 66 68 70 72 74 76 -75 0
c Encoding variable: x_00001_00006 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00001_00006' order represents '1' with '77'
c Var 'x_00001_00006' direct represents '1' with '77'
c Var 'x_00001_00006' order represents '2' with '78'
-77 78 0
c Var 'x_00001_00006' direct represents '2' with '79'
77 -78 79 0
-79 78 0
-79 -77 0
c Var 'x_00001_00006' order represents '3' with '80'
-78 80 0
c Var 'x_00001_00006' direct represents '3' with '81'
78 -80 81 0
-81 80 0
-81 -78 0
c Var 'x_00001_00006' order represents '4' with '82'
-80 82 0
c Var 'x_00001_00006' direct represents '4' with '83'
80 -82 83 0
-83 82 0
-83 -80 0
c Var 'x_00001_00006' order represents '5' with '84'
-82 84 0
c Var 'x_00001_00006' direct represents '5' with '85'
82 -84 85 0
-85 84 0
-85 -82 0
c Var 'x_00001_00006' order represents '6' with '86'
-84 86 0
c Var 'x_00001_00006' direct represents '6' with '87'
84 -86 87 0
-87 86 0
-87 -84 0
c Var 'x_00001_00006' order represents '7' with '88'
-86 88 0
c Var 'x_00001_00006' direct represents '7' with '89'
86 -88 89 0
-89 88 0
-89 -86 0
c Var 'x_00001_00006' order represents '8' with '90'
-88 90 0
c Var 'x_00001_00006' direct represents '8' with '91'
88 -90 91 0
-91 90 0
-91 -88 0
c Var 'x_00001_00006' direct represents '9' with '-90'
77 79 81 83 85 87 89 91 -90 0
c Encoding variable: x_00001_00007 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00001_00007' order represents '1' with '92'
c Var 'x_00001_00007' direct represents '1' with '92'
c Var 'x_00001_00007' order represents '2' with '93'
-92 93 0
c Var 'x_00001_00007' direct represents '2' with '94'
92 -93 94 0
-94 93 0
-94 -92 0
c Var 'x_00001_00007' order represents '3' with '95'
-93 95 0
c Var 'x_00001_00007' direct represents '3' with '96'
93 -95 96 0
-96 95 0
-96 -93 0
c Var 'x_00001_00007' order represents '4' with '97'
-95 97 0
c Var 'x_00001_00007' direct represents '4' with '98'
95 -97 98 0
-98 97 0
-98 -95 0
c Var 'x_00001_00007' order represents '5' with '99'
-97 99 0
c Var 'x_00001_00007' direct represents '5' with '100'
97 -99 100 0
-100 99 0
-100 -97 0
c Var 'x_00001_00007' order represents '6' with '101'
-99 101 0
c Var 'x_00001_00007' direct represents '6' with '102'
99 -101 102 0
-102 101 0
-102 -99 0
c Var 'x_00001_00007' order represents '7' with '103'
-101 103 0
c Var 'x_00001_00007' direct represents '7' with '104'
101 -103 104 0
-104 103 0
-104 -101 0
c Var 'x_00001_00007' order represents '8' with '105'
-103 105 0
c Var 'x_00001_00007' direct represents '8' with '106'
103 -105 106 0
-106 105 0
-106 -103 0
c Var 'x_00001_00007' direct represents '9' with '-105'
92 94 96 98 100 102 104 106 -105 0
c Encoding variable: x_00001_00008 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00001_00008' order represents '1' with '107'
c Var 'x_00001_00008' direct represents '1' with '107'
c Var 'x_00001_00008' order represents '2' with '108'
-107 108 0
c Var 'x_00001_00008' direct represents '2' with '109'
107 -108 109 0
-109 108 0
-109 -107 0
c Var 'x_00001_00008' order represents '3' with '110'
-108 110 0
c Var 'x_00001_00008' direct represents '3' with '111'
108 -110 111 0
-111 110 0
-111 -108 0
c Var 'x_00001_00008' order represents '4' with '112'
-110 112 0
c Var 'x_00001_00008' direct represents '4' with '113'
110 -112 113 0
-113 112 0
-113 -110 0
c Var 'x_00001_00008' order represents '5' with '114'
-112 114 0
c Var 'x_00001_00008' direct represents '5' with '115'
112 -114 115 0
-115 114 0
-115 -112 0
c Var 'x_00001_00008' order represents '6' with '116'
-114 116 0
c Var 'x_00001_00008' direct represents '6' with '117'
114 -116 117 0
-117 116 0
-117 -114 0
c Var 'x_00001_00008' order represents '7' with '118'
-116 118 0
c Var 'x_00001_00008' direct represents '7' with '119'
116 -118 119 0
-119 118 0
-119 -116 0
c Var 'x_00001_00008' order represents '8' with '120'
-118 120 0
c Var 'x_00001_00008' direct represents '8' with '121'
118 -120 121 0
-121 120 0
-121 -118 0
c Var 'x_00001_00008' direct represents '9' with '-120'
107 109 111 113 115 117 119 121 -120 0
c Encoding variable: x_00001_00009 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00001_00009' order represents '1' with '122'
c Var 'x_00001_00009' direct represents '1' with '122'
c Var 'x_00001_00009' order represents '2' with '123'
-122 123 0
c Var 'x_00001_00009' direct represents '2' with '124'
122 -123 124 0
-124 123 0
-124 -122 0
c Var 'x_00001_00009' order represents '3' with '125'
-123 125 0
c Var 'x_00001_00009' direct represents '3' with '126'
123 -125 126 0
-126 125 0
-126 -123 0
c Var 'x_00001_00009' order represents '4' with '127'
-125 127 0
c Var 'x_00001_00009' direct represents '4' with '128'
125 -127 128 0
-128 127 0
-128 -125 0
c Var 'x_00001_00009' order represents '5' with '129'
-127 129 0
c Var 'x_00001_00009' direct represents '5' with '130'
127 -129 130 0
-130 129 0
-130 -127 0
c Var 'x_00001_00009' order represents '6' with '131'
-129 131 0
c Var 'x_00001_00009' direct represents '6' with '132'
129 -131 132 0
-132 131 0
-132 -129 0
c Var 'x_00001_00009' order represents '7' with '133'
-131 133 0
c Var 'x_00001_00009' direct represents '7' with '134'
131 -133 134 0
-134 133 0
-134 -131 0
c Var 'x_00001_00009' order represents '8' with '135'
-133 135 0
c Var 'x_00001_00009' direct represents '8' with '136'
133 -135 136 0
-136 135 0
-136 -133 0
c Var 'x_00001_00009' direct represents '9' with '-135'
122 124 126 128 130 132 134 136 -135 0
c Encoding variable: x_00002_00001 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00002_00001' order represents '1' with '137'
c Var 'x_00002_00001' direct represents '1' with '137'
c Var 'x_00002_00001' order represents '2' with '138'
-137 138 0
c Var 'x_00002_00001' direct represents '2' with '139'
137 -138 139 0
-139 138 0
-139 -137 0
c Var 'x_00002_00001' order represents '3' with '140'
-138 140 0
c Var 'x_00002_00001' direct represents '3' with '141'
138 -140 141 0
-141 140 0
-141 -138 0
c Var 'x_00002_00001' order represents '4' with '142'
-140 142 0
c Var 'x_00002_00001' direct represents '4' with '143'
140 -142 143 0
-143 142 0
-143 -140 0
c Var 'x_00002_00001' order represents '5' with '144'
-142 144 0
c Var 'x_00002_00001' direct represents '5' with '145'
142 -144 145 0
-145 144 0
-145 -142 0
c Var 'x_00002_00001' order represents '6' with '146'
-144 146 0
c Var 'x_00002_00001' direct represents '6' with '147'
144 -146 147 0
-147 146 0
-147 -144 0
c Var 'x_00002_00001' order represents '7' with '148'
-146 148 0
c Var 'x_00002_00001' direct represents '7' with '149'
146 -148 149 0
-149 148 0
-149 -146 0
c Var 'x_00002_00001' order represents '8' with '150'
-148 150 0
c Var 'x_00002_00001' direct represents '8' with '151'
148 -150 151 0
-151 150 0
-151 -148 0
c Var 'x_00002_00001' direct represents '9' with '-150'
137 139 141 143 145 147 149 151 -150 0
c Encoding variable: x_00002_00002 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00002_00002' order represents '1' with '152'
c Var 'x_00002_00002' direct represents '1' with '152'
c Var 'x_00002_00002' order represents '2' with '153'
-152 153 0
c Var 'x_00002_00002' direct represents '2' with '154'
152 -153 154 0
-154 153 0
-154 -152 0
c Var 'x_00002_00002' order represents '3' with '155'
-153 155 0
c Var 'x_00002_00002' direct represents '3' with '156'
153 -155 156 0
-156 155 0
-156 -153 0
c Var 'x_00002_00002' order represents '4' with '157'
-155 157 0
c Var 'x_00002_00002' direct represents '4' with '158'
155 -157 158 0
-158 157 0
-158 -155 0
c Var 'x_00002_00002' order represents '5' with '159'
-157 159 0
c Var 'x_00002_00002' direct represents '5' with '160'
157 -159 160 0
-160 159 0
-160 -157 0
c Var 'x_00002_00002' order represents '6' with '161'
-159 161 0
c Var 'x_00002_00002' direct represents '6' with '162'
159 -161 162 0
-162 161 0
-162 -159 0
c Var 'x_00002_00002' order represents '7' with '163'
-161 163 0
c Var 'x_00002_00002' direct represents '7' with '164'
161 -163 164 0
-164 163 0
-164 -161 0
c Var 'x_00002_00002' order represents '8' with '165'
-163 165 0
c Var 'x_00002_00002' direct represents '8' with '166'
163 -165 166 0
-166 165 0
-166 -163 0
c Var 'x_00002_00002' direct represents '9' with '-165'
152 154 156 158 160 162 164 166 -165 0
c Encoding variable: x_00002_00003 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00002_00003' order represents '1' with '167'
c Var 'x_00002_00003' direct represents '1' with '167'
c Var 'x_00002_00003' order represents '2' with '168'
-167 168 0
c Var 'x_00002_00003' direct represents '2' with '169'
167 -168 169 0
-169 168 0
-169 -167 0
c Var 'x_00002_00003' order represents '3' with '170'
-168 170 0
c Var 'x_00002_00003' direct represents '3' with '171'
168 -170 171 0
-171 170 0
-171 -168 0
c Var 'x_00002_00003' order represents '4' with '172'
-170 172 0
c Var 'x_00002_00003' direct represents '4' with '173'
170 -172 173 0
-173 172 0
-173 -170 0
c Var 'x_00002_00003' order represents '5' with '174'
-172 174 0
c Var 'x_00002_00003' direct represents '5' with '175'
172 -174 175 0
-175 174 0
-175 -172 0
c Var 'x_00002_00003' order represents '6' with '176'
-174 176 0
c Var 'x_00002_00003' direct represents '6' with '177'
174 -176 177 0
-177 176 0
-177 -174 0
c Var 'x_00002_00003' order represents '7' with '178'
-176 178 0
c Var 'x_00002_00003' direct represents '7' with '179'
176 -178 179 0
-179 178 0
-179 -176 0
c Var 'x_00002_00003' order represents '8' with '180'
-178 180 0
c Var 'x_00002_00003' direct represents '8' with '181'
178 -180 181 0
-181 180 0
-181 -178 0
c Var 'x_00002_00003' direct represents '9' with '-180'
167 169 171 173 175 177 179 181 -180 0
c Encoding variable: x_00002_00004 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00002_00004' order represents '1' with '182'
c Var 'x_00002_00004' direct represents '1' with '182'
c Var 'x_00002_00004' order represents '2' with '183'
-182 183 0
c Var 'x_00002_00004' direct represents '2' with '184'
182 -183 184 0
-184 183 0
-184 -182 0
c Var 'x_00002_00004' order represents '3' with '185'
-183 185 0
c Var 'x_00002_00004' direct represents '3' with '186'
183 -185 186 0
-186 185 0
-186 -183 0
c Var 'x_00002_00004' order represents '4' with '187'
-185 187 0
c Var 'x_00002_00004' direct represents '4' with '188'
185 -187 188 0
-188 187 0
-188 -185 0
c Var 'x_00002_00004' order represents '5' with '189'
-187 189 0
c Var 'x_00002_00004' direct represents '5' with '190'
187 -189 190 0
-190 189 0
-190 -187 0
c Var 'x_00002_00004' order represents '6' with '191'
-189 191 0
c Var 'x_00002_00004' direct represents '6' with '192'
189 -191 192 0
-192 191 0
-192 -189 0
c Var 'x_00002_00004' order represents '7' with '193'
-191 193 0
c Var 'x_00002_00004' direct represents '7' with '194'
191 -193 194 0
-194 193 0
-194 -191 0
c Var 'x_00002_00004' order represents '8' with '195'
-193 195 0
c Var 'x_00002_00004' direct represents '8' with '196'
193 -195 196 0
-196 195 0
-196 -193 0
c Var 'x_00002_00004' direct represents '9' with '-195'
182 184 186 188 190 192 194 196 -195 0
c Encoding variable: x_00002_00005 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00002_00005' order represents '1' with '197'
c Var 'x_00002_00005' direct represents '1' with '197'
c Var 'x_00002_00005' order represents '2' with '198'
-197 198 0
c Var 'x_00002_00005' direct represents '2' with '199'
197 -198 199 0
-199 198 0
-199 -197 0
c Var 'x_00002_00005' order represents '3' with '200'
-198 200 0
c Var 'x_00002_00005' direct represents '3' with '201'
198 -200 201 0
-201 200 0
-201 -198 0
c Var 'x_00002_00005' order represents '4' with '202'
-200 202 0
c Var 'x_00002_00005' direct represents '4' with '203'
200 -202 203 0
-203 202 0
-203 -200 0
c Var 'x_00002_00005' order represents '5' with '204'
-202 204 0
c Var 'x_00002_00005' direct represents '5' with '205'
202 -204 205 0
-205 204 0
-205 -202 0
c Var 'x_00002_00005' order represents '6' with '206'
-204 206 0
c Var 'x_00002_00005' direct represents '6' with '207'
204 -206 207 0
-207 206 0
-207 -204 0
c Var 'x_00002_00005' order represents '7' with '208'
-206 208 0
c Var 'x_00002_00005' direct represents '7' with '209'
206 -208 209 0
-209 208 0
-209 -206 0
c Var 'x_00002_00005' order represents '8' with '210'
-208 210 0
c Var 'x_00002_00005' direct represents '8' with '211'
208 -210 211 0
-211 210 0
-211 -208 0
c Var 'x_00002_00005' direct represents '9' with '-210'
197 199 201 203 205 207 209 211 -210 0
c Encoding variable: x_00002_00006 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00002_00006' order represents '1' with '212'
c Var 'x_00002_00006' direct represents '1' with '212'
c Var 'x_00002_00006' order represents '2' with '213'
-212 213 0
c Var 'x_00002_00006' direct represents '2' with '214'
212 -213 214 0
-214 213 0
-214 -212 0
c Var 'x_00002_00006' order represents '3' with '215'
-213 215 0
c Var 'x_00002_00006' direct represents '3' with '216'
213 -215 216 0
-216 215 0
-216 -213 0
c Var 'x_00002_00006' order represents '4' with '217'
-215 217 0
c Var 'x_00002_00006' direct represents '4' with '218'
215 -217 218 0
-218 217 0
-218 -215 0
c Var 'x_00002_00006' order represents '5' with '219'
-217 219 0
c Var 'x_00002_00006' direct represents '5' with '220'
217 -219 220 0
-220 219 0
-220 -217 0
c Var 'x_00002_00006' order represents '6' with '221'
-219 221 0
c Var 'x_00002_00006' direct represents '6' with '222'
219 -221 222 0
-222 221 0
-222 -219 0
c Var 'x_00002_00006' order represents '7' with '223'
-221 223 0
c Var 'x_00002_00006' direct represents '7' with '224'
221 -223 224 0
-224 223 0
-224 -221 0
c Var 'x_00002_00006' order represents '8' with '225'
-223 225 0
c Var 'x_00002_00006' direct represents '8' with '226'
223 -225 226 0
-226 225 0
-226 -223 0
c Var 'x_00002_00006' direct represents '9' with '-225'
212 214 216 218 220 222 224 226 -225 0
c Encoding variable: x_00002_00007 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00002_00007' order represents '1' with '227'
c Var 'x_00002_00007' direct represents '1' with '227'
c Var 'x_00002_00007' order represents '2' with '228'
-227 228 0
c Var 'x_00002_00007' direct represents '2' with '229'
227 -228 229 0
-229 228 0
-229 -227 0
c Var 'x_00002_00007' order represents '3' with '230'
-228 230 0
c Var 'x_00002_00007' direct represents '3' with '231'
228 -230 231 0
-231 230 0
-231 -228 0
c Var 'x_00002_00007' order represents '4' with '232'
-230 232 0
c Var 'x_00002_00007' direct represents '4' with '233'
230 -232 233 0
-233 232 0
-233 -230 0
c Var 'x_00002_00007' order represents '5' with '234'
-232 234 0
c Var 'x_00002_00007' direct represents '5' with '235'
232 -234 235 0
-235 234 0
-235 -232 0
c Var 'x_00002_00007' order represents '6' with '236'
-234 236 0
c Var 'x_00002_00007' direct represents '6' with '237'
234 -236 237 0
-237 236 0
-237 -234 0
c Var 'x_00002_00007' order represents '7' with '238'
-236 238 0
c Var 'x_00002_00007' direct represents '7' with '239'
236 -238 239 0
-239 238 0
-239 -236 0
c Var 'x_00002_00007' order represents '8' with '240'
-238 240 0
c Var 'x_00002_00007' direct represents '8' with '241'
238 -240 241 0
-241 240 0
-241 -238 0
c Var 'x_00002_00007' direct represents '9' with '-240'
227 229 231 233 235 237 239 241 -240 0
c Encoding variable: x_00002_00008 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00002_00008' order represents '1' with '242'
c Var 'x_00002_00008' direct represents '1' with '242'
c Var 'x_00002_00008' order represents '2' with '243'
-242 243 0
c Var 'x_00002_00008' direct represents '2' with '244'
242 -243 244 0
-244 243 0
-244 -242 0
c Var 'x_00002_00008' order represents '3' with '245'
-243 245 0
c Var 'x_00002_00008' direct represents '3' with '246'
243 -245 246 0
-246 245 0
-246 -243 0
c Var 'x_00002_00008' order represents '4' with '247'
-245 247 0
c Var 'x_00002_00008' direct represents '4' with '248'
245 -247 248 0
-248 247 0
-248 -245 0
c Var 'x_00002_00008' order represents '5' with '249'
-247 249 0
c Var 'x_00002_00008' direct represents '5' with '250'
247 -249 250 0
-250 249 0
-250 -247 0
c Var 'x_00002_00008' order represents '6' with '251'
-249 251 0
c Var 'x_00002_00008' direct represents '6' with '252'
249 -251 252 0
-252 251 0
-252 -249 0
c Var 'x_00002_00008' order represents '7' with '253'
-251 253 0
c Var 'x_00002_00008' direct represents '7' with '254'
251 -253 254 0
-254 253 0
-254 -251 0
c Var 'x_00002_00008' order represents '8' with '255'
-253 255 0
c Var 'x_00002_00008' direct represents '8' with '256'
253 -255 256 0
-256 255 0
-256 -253 0
c Var 'x_00002_00008' direct represents '9' with '-255'
242 244 246 248 250 252 254 256 -255 0
c Encoding variable: x_00002_00009 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00002_00009' order represents '1' with '257'
c Var 'x_00002_00009' direct represents '1' with '257'
c Var 'x_00002_00009' order represents '2' with '258'
-257 258 0
c Var 'x_00002_00009' direct represents '2' with '259'
257 -258 259 0
-259 258 0
-259 -257 0
c Var 'x_00002_00009' order represents '3' with '260'
-258 260 0
c Var 'x_00002_00009' direct represents '3' with '261'
258 -260 261 0
-261 260 0
-261 -258 0
c Var 'x_00002_00009' order represents '4' with '262'
-260 262 0
c Var 'x_00002_00009' direct represents '4' with '263'
260 -262 263 0
-263 262 0
-263 -260 0
c Var 'x_00002_00009' order represents '5' with '264'
-262 264 0
c Var 'x_00002_00009' direct represents '5' with '265'
262 -264 265 0
-265 264 0
-265 -262 0
c Var 'x_00002_00009' order represents '6' with '266'
-264 266 0
c Var 'x_00002_00009' direct represents '6' with '267'
264 -266 267 0
-267 266 0
-267 -264 0
c Var 'x_00002_00009' order represents '7' with '268'
-266 268 0
c Var 'x_00002_00009' direct represents '7' with '269'
266 -268 269 0
-269 268 0
-269 -266 0
c Var 'x_00002_00009' order represents '8' with '270'
-268 270 0
c Var 'x_00002_00009' direct represents '8' with '271'
268 -270 271 0
-271 270 0
-271 -268 0
c Var 'x_00002_00009' direct represents '9' with '-270'
257 259 261 263 265 267 269 271 -270 0
c Encoding variable: x_00003_00001 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00003_00001' order represents '1' with '272'
c Var 'x_00003_00001' direct represents '1' with '272'
c Var 'x_00003_00001' order represents '2' with '273'
-272 273 0
c Var 'x_00003_00001' direct represents '2' with '274'
272 -273 274 0
-274 273 0
-274 -272 0
c Var 'x_00003_00001' order represents '3' with '275'
-273 275 0
c Var 'x_00003_00001' direct represents '3' with '276'
273 -275 276 0
-276 275 0
-276 -273 0
c Var 'x_00003_00001' order represents '4' with '277'
-275 277 0
c Var 'x_00003_00001' direct represents '4' with '278'
275 -277 278 0
-278 277 0
-278 -275 0
c Var 'x_00003_00001' order represents '5' with '279'
-277 279 0
c Var 'x_00003_00001' direct represents '5' with '280'
277 -279 280 0
-280 279 0
-280 -277 0
c Var 'x_00003_00001' order represents '6' with '281'
-279 281 0
c Var 'x_00003_00001' direct represents '6' with '282'
279 -281 282 0
-282 281 0
-282 -279 0
c Var 'x_00003_00001' order represents '7' with '283'
-281 283 0
c Var 'x_00003_00001' direct represents '7' with '284'
281 -283 284 0
-284 283 0
-284 -281 0
c Var 'x_00003_00001' order represents '8' with '285'
-283 285 0
c Var 'x_00003_00001' direct represents '8' with '286'
283 -285 286 0
-286 285 0
-286 -283 0
c Var 'x_00003_00001' direct represents '9' with '-285'
272 274 276 278 280 282 284 286 -285 0
c Encoding variable: x_00003_00002 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00003_00002' order represents '1' with '287'
c Var 'x_00003_00002' direct represents '1' with '287'
c Var 'x_00003_00002' order represents '2' with '288'
-287 288 0
c Var 'x_00003_00002' direct represents '2' with '289'
287 -288 289 0
-289 288 0
-289 -287 0
c Var 'x_00003_00002' order represents '3' with '290'
-288 290 0
c Var 'x_00003_00002' direct represents '3' with '291'
288 -290 291 0
-291 290 0
-291 -288 0
c Var 'x_00003_00002' order represents '4' with '292'
-290 292 0
c Var 'x_00003_00002' direct represents '4' with '293'
290 -292 293 0
-293 292 0
-293 -290 0
c Var 'x_00003_00002' order represents '5' with '294'
-292 294 0
c Var 'x_00003_00002' direct represents '5' with '295'
292 -294 295 0
-295 294 0
-295 -292 0
c Var 'x_00003_00002' order represents '6' with '296'
-294 296 0
c Var 'x_00003_00002' direct represents '6' with '297'
294 -296 297 0
-297 296 0
-297 -294 0
c Var 'x_00003_00002' order represents '7' with '298'
-296 298 0
c Var 'x_00003_00002' direct represents '7' with '299'
296 -298 299 0
-299 298 0
-299 -296 0
c Var 'x_00003_00002' order represents '8' with '300'
-298 300 0
c Var 'x_00003_00002' direct represents '8' with '301'
298 -300 301 0
-301 300 0
-301 -298 0
c Var 'x_00003_00002' direct represents '9' with '-300'
287 289 291 293 295 297 299 301 -300 0
c Encoding variable: x_00003_00003 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00003_00003' order represents '1' with '302'
c Var 'x_00003_00003' direct represents '1' with '302'
c Var 'x_00003_00003' order represents '2' with '303'
-302 303 0
c Var 'x_00003_00003' direct represents '2' with '304'
302 -303 304 0
-304 303 0
-304 -302 0
c Var 'x_00003_00003' order represents '3' with '305'
-303 305 0
c Var 'x_00003_00003' direct represents '3' with '306'
303 -305 306 0
-306 305 0
-306 -303 0
c Var 'x_00003_00003' order represents '4' with '307'
-305 307 0
c Var 'x_00003_00003' direct represents '4' with '308'
305 -307 308 0
-308 307 0
-308 -305 0
c Var 'x_00003_00003' order represents '5' with '309'
-307 309 0
c Var 'x_00003_00003' direct represents '5' with '310'
307 -309 310 0
-310 309 0
-310 -307 0
c Var 'x_00003_00003' order represents '6' with '311'
-309 311 0
c Var 'x_00003_00003' direct represents '6' with '312'
309 -311 312 0
-312 311 0
-312 -309 0
c Var 'x_00003_00003' order represents '7' with '313'
-311 313 0
c Var 'x_00003_00003' direct represents '7' with '314'
311 -313 314 0
-314 313 0
-314 -311 0
c Var 'x_00003_00003' order represents '8' with '315'
-313 315 0
c Var 'x_00003_00003' direct represents '8' with '316'
313 -315 316 0
-316 315 0
-316 -313 0
c Var 'x_00003_00003' direct represents '9' with '-315'
302 304 306 308 310 312 314 316 -315 0
c Encoding variable: x_00003_00004 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00003_00004' order represents '1' with '317'
c Var 'x_00003_00004' direct represents '1' with '317'
c Var 'x_00003_00004' order represents '2' with '318'
-317 318 0
c Var 'x_00003_00004' direct represents '2' with '319'
317 -318 319 0
-319 318 0
-319 -317 0
c Var 'x_00003_00004' order represents '3' with '320'
-318 320 0
c Var 'x_00003_00004' direct represents '3' with '321'
318 -320 321 0
-321 320 0
-321 -318 0
c Var 'x_00003_00004' order represents '4' with '322'
-320 322 0
c Var 'x_00003_00004' direct represents '4' with '323'
320 -322 323 0
-323 322 0
-323 -320 0
c Var 'x_00003_00004' order represents '5' with '324'
-322 324 0
c Var 'x_00003_00004' direct represents '5' with '325'
322 -324 325 0
-325 324 0
-325 -322 0
c Var 'x_00003_00004' order represents '6' with '326'
-324 326 0
c Var 'x_00003_00004' direct represents '6' with '327'
324 -326 327 0
-327 326 0
-327 -324 0
c Var 'x_00003_00004' order represents '7' with '328'
-326 328 0
c Var 'x_00003_00004' direct represents '7' with '329'
326 -328 329 0
-329 328 0
-329 -326 0
c Var 'x_00003_00004' order represents '8' with '330'
-328 330 0
c Var 'x_00003_00004' direct represents '8' with '331'
328 -330 331 0
-331 330 0
-331 -328 0
c Var 'x_00003_00004' direct represents '9' with '-330'
317 319 321 323 325 327 329 331 -330 0
c Encoding variable: x_00003_00005 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00003_00005' order represents '1' with '332'
c Var 'x_00003_00005' direct represents '1' with '332'
c Var 'x_00003_00005' order represents '2' with '333'
-332 333 0
c Var 'x_00003_00005' direct represents '2' with '334'
332 -333 334 0
-334 333 0
-334 -332 0
c Var 'x_00003_00005' order represents '3' with '335'
-333 335 0
c Var 'x_00003_00005' direct represents '3' with '336'
333 -335 336 0
-336 335 0
-336 -333 0
c Var 'x_00003_00005' order represents '4' with '337'
-335 337 0
c Var 'x_00003_00005' direct represents '4' with '338'
335 -337 338 0
-338 337 0
-338 -335 0
c Var 'x_00003_00005' order represents '5' with '339'
-337 339 0
c Var 'x_00003_00005' direct represents '5' with '340'
337 -339 340 0
-340 339 0
-340 -337 0
c Var 'x_00003_00005' order represents '6' with '341'
-339 341 0
c Var 'x_00003_00005' direct represents '6' with '342'
339 -341 342 0
-342 341 0
-342 -339 0
c Var 'x_00003_00005' order represents '7' with '343'
-341 343 0
c Var 'x_00003_00005' direct represents '7' with '344'
341 -343 344 0
-344 343 0
-344 -341 0
c Var 'x_00003_00005' order represents '8' with '345'
-343 345 0
c Var 'x_00003_00005' direct represents '8' with '346'
343 -345 346 0
-346 345 0
-346 -343 0
c Var 'x_00003_00005' direct represents '9' with '-345'
332 334 336 338 340 342 344 346 -345 0
c Encoding variable: x_00003_00006 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00003_00006' order represents '1' with '347'
c Var 'x_00003_00006' direct represents '1' with '347'
c Var 'x_00003_00006' order represents '2' with '348'
-347 348 0
c Var 'x_00003_00006' direct represents '2' with '349'
347 -348 349 0
-349 348 0
-349 -347 0
c Var 'x_00003_00006' order represents '3' with '350'
-348 350 0
c Var 'x_00003_00006' direct represents '3' with '351'
348 -350 351 0
-351 350 0
-351 -348 0
c Var 'x_00003_00006' order represents '4' with '352'
-350 352 0
c Var 'x_00003_00006' direct represents '4' with '353'
350 -352 353 0
-353 352 0
-353 -350 0
c Var 'x_00003_00006' order represents '5' with '354'
-352 354 0
c Var 'x_00003_00006' direct represents '5' with '355'
352 -354 355 0
-355 354 0
-355 -352 0
c Var 'x_00003_00006' order represents '6' with '356'
-354 356 0
c Var 'x_00003_00006' direct represents '6' with '357'
354 -356 357 0
-357 356 0
-357 -354 0
c Var 'x_00003_00006' order represents '7' with '358'
-356 358 0
c Var 'x_00003_00006' direct represents '7' with '359'
356 -358 359 0
-359 358 0
-359 -356 0
c Var 'x_00003_00006' order represents '8' with '360'
-358 360 0
c Var 'x_00003_00006' direct represents '8' with '361'
358 -360 361 0
-361 360 0
-361 -358 0
c Var 'x_00003_00006' direct represents '9' with '-360'
347 349 351 353 355 357 359 361 -360 0
c Encoding variable: x_00003_00007 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00003_00007' order represents '1' with '362'
c Var 'x_00003_00007' direct represents '1' with '362'
c Var 'x_00003_00007' order represents '2' with '363'
-362 363 0
c Var 'x_00003_00007' direct represents '2' with '364'
362 -363 364 0
-364 363 0
-364 -362 0
c Var 'x_00003_00007' order represents '3' with '365'
-363 365 0
c Var 'x_00003_00007' direct represents '3' with '366'
363 -365 366 0
-366 365 0
-366 -363 0
c Var 'x_00003_00007' order represents '4' with '367'
-365 367 0
c Var 'x_00003_00007' direct represents '4' with '368'
365 -367 368 0
-368 367 0
-368 -365 0
c Var 'x_00003_00007' order represents '5' with '369'
-367 369 0
c Var 'x_00003_00007' direct represents '5' with '370'
367 -369 370 0
-370 369 0
-370 -367 0
c Var 'x_00003_00007' order represents '6' with '371'
-369 371 0
c Var 'x_00003_00007' direct represents '6' with '372'
369 -371 372 0
-372 371 0
-372 -369 0
c Var 'x_00003_00007' order represents '7' with '373'
-371 373 0
c Var 'x_00003_00007' direct represents '7' with '374'
371 -373 374 0
-374 373 0
-374 -371 0
c Var 'x_00003_00007' order represents '8' with '375'
-373 375 0
c Var 'x_00003_00007' direct represents '8' with '376'
373 -375 376 0
-376 375 0
-376 -373 0
c Var 'x_00003_00007' direct represents '9' with '-375'
362 364 366 368 370 372 374 376 -375 0
c Encoding variable: x_00003_00008 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00003_00008' order represents '1' with '377'
c Var 'x_00003_00008' direct represents '1' with '377'
c Var 'x_00003_00008' order represents '2' with '378'
-377 378 0
c Var 'x_00003_00008' direct represents '2' with '379'
377 -378 379 0
-379 378 0
-379 -377 0
c Var 'x_00003_00008' order represents '3' with '380'
-378 380 0
c Var 'x_00003_00008' direct represents '3' with '381'
378 -380 381 0
-381 380 0
-381 -378 0
c Var 'x_00003_00008' order represents '4' with '382'
-380 382 0
c Var 'x_00003_00008' direct represents '4' with '383'
380 -382 383 0
-383 382 0
-383 -380 0
c Var 'x_00003_00008' order represents '5' with '384'
-382 384 0
c Var 'x_00003_00008' direct represents '5' with '385'
382 -384 385 0
-385 384 0
-385 -382 0
c Var 'x_00003_00008' order represents '6' with '386'
-384 386 0
c Var 'x_00003_00008' direct represents '6' with '387'
384 -386 387 0
-387 386 0
-387 -384 0
c Var 'x_00003_00008' order represents '7' with '388'
-386 388 0
c Var 'x_00003_00008' direct represents '7' with '389'
386 -388 389 0
-389 388 0
-389 -386 0
c Var 'x_00003_00008' order represents '8' with '390'
-388 390 0
c Var 'x_00003_00008' direct represents '8' with '391'
388 -390 391 0
-391 390 0
-391 -388 0
c Var 'x_00003_00008' direct represents '9' with '-390'
377 379 381 383 385 387 389 391 -390 0
c Encoding variable: x_00003_00009 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00003_00009' order represents '1' with '392'
c Var 'x_00003_00009' direct represents '1' with '392'
c Var 'x_00003_00009' order represents '2' with '393'
-392 393 0
c Var 'x_00003_00009' direct represents '2' with '394'
392 -393 394 0
-394 393 0
-394 -392 0
c Var 'x_00003_00009' order represents '3' with '395'
-393 395 0
c Var 'x_00003_00009' direct represents '3' with '396'
393 -395 396 0
-396 395 0
-396 -393 0
c Var 'x_00003_00009' order represents '4' with '397'
-395 397 0
c Var 'x_00003_00009' direct represents '4' with '398'
395 -397 398 0
-398 397 0
-398 -395 0
c Var 'x_00003_00009' order represents '5' with '399'
-397 399 0
c Var 'x_00003_00009' direct represents '5' with '400'
397 -399 400 0
-400 399 0
-400 -397 0
c Var 'x_00003_00009' order represents '6' with '401'
-399 401 0
c Var 'x_00003_00009' direct represents '6' with '402'
399 -401 402 0
-402 401 0
-402 -399 0
c Var 'x_00003_00009' order represents '7' with '403'
-401 403 0
c Var 'x_00003_00009' direct represents '7' with '404'
401 -403 404 0
-404 403 0
-404 -401 0
c Var 'x_00003_00009' order represents '8' with '405'
-403 405 0
c Var 'x_00003_00009' direct represents '8' with '406'
403 -405 406 0
-406 405 0
-406 -403 0
c Var 'x_00003_00009' direct represents '9' with '-405'
392 394 396 398 400 402 404 406 -405 0
c Encoding variable: x_00004_00001 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00004_00001' order represents '1' with '407'
c Var 'x_00004_00001' direct represents '1' with '407'
c Var 'x_00004_00001' order represents '2' with '408'
-407 408 0
c Var 'x_00004_00001' direct represents '2' with '409'
407 -408 409 0
-409 408 0
-409 -407 0
c Var 'x_00004_00001' order represents '3' with '410'
-408 410 0
c Var 'x_00004_00001' direct represents '3' with '411'
408 -410 411 0
-411 410 0
-411 -408 0
c Var 'x_00004_00001' order represents '4' with '412'
-410 412 0
c Var 'x_00004_00001' direct represents '4' with '413'
410 -412 413 0
-413 412 0
-413 -410 0
c Var 'x_00004_00001' order represents '5' with '414'
-412 414 0
c Var 'x_00004_00001' direct represents '5' with '415'
412 -414 415 0
-415 414 0
-415 -412 0
c Var 'x_00004_00001' order represents '6' with '416'
-414 416 0
c Var 'x_00004_00001' direct represents '6' with '417'
414 -416 417 0
-417 416 0
-417 -414 0
c Var 'x_00004_00001' order represents '7' with '418'
-416 418 0
c Var 'x_00004_00001' direct represents '7' with '419'
416 -418 419 0
-419 418 0
-419 -416 0
c Var 'x_00004_00001' order represents '8' with '420'
-418 420 0
c Var 'x_00004_00001' direct represents '8' with '421'
418 -420 421 0
-421 420 0
-421 -418 0
c Var 'x_00004_00001' direct represents '9' with '-420'
407 409 411 413 415 417 419 421 -420 0
c Encoding variable: x_00004_00002 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00004_00002' order represents '1' with '422'
c Var 'x_00004_00002' direct represents '1' with '422'
c Var 'x_00004_00002' order represents '2' with '423'
-422 423 0
c Var 'x_00004_00002' direct represents '2' with '424'
422 -423 424 0
-424 423 0
-424 -422 0
c Var 'x_00004_00002' order represents '3' with '425'
-423 425 0
c Var 'x_00004_00002' direct represents '3' with '426'
423 -425 426 0
-426 425 0
-426 -423 0
c Var 'x_00004_00002' order represents '4' with '427'
-425 427 0
c Var 'x_00004_00002' direct represents '4' with '428'
425 -427 428 0
-428 427 0
-428 -425 0
c Var 'x_00004_00002' order represents '5' with '429'
-427 429 0
c Var 'x_00004_00002' direct represents '5' with '430'
427 -429 430 0
-430 429 0
-430 -427 0
c Var 'x_00004_00002' order represents '6' with '431'
-429 431 0
c Var 'x_00004_00002' direct represents '6' with '432'
429 -431 432 0
-432 431 0
-432 -429 0
c Var 'x_00004_00002' order represents '7' with '433'
-431 433 0
c Var 'x_00004_00002' direct represents '7' with '434'
431 -433 434 0
-434 433 0
-434 -431 0
c Var 'x_00004_00002' order represents '8' with '435'
-433 435 0
c Var 'x_00004_00002' direct represents '8' with '436'
433 -435 436 0
-436 435 0
-436 -433 0
c Var 'x_00004_00002' direct represents '9' with '-435'
422 424 426 428 430 432 434 436 -435 0
c Encoding variable: x_00004_00003 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00004_00003' order represents '1' with '437'
c Var 'x_00004_00003' direct represents '1' with '437'
c Var 'x_00004_00003' order represents '2' with '438'
-437 438 0
c Var 'x_00004_00003' direct represents '2' with '439'
437 -438 439 0
-439 438 0
-439 -437 0
c Var 'x_00004_00003' order represents '3' with '440'
-438 440 0
c Var 'x_00004_00003' direct represents '3' with '441'
438 -440 441 0
-441 440 0
-441 -438 0
c Var 'x_00004_00003' order represents '4' with '442'
-440 442 0
c Var 'x_00004_00003' direct represents '4' with '443'
440 -442 443 0
-443 442 0
-443 -440 0
c Var 'x_00004_00003' order represents '5' with '444'
-442 444 0
c Var 'x_00004_00003' direct represents '5' with '445'
442 -444 445 0
-445 444 0
-445 -442 0
c Var 'x_00004_00003' order represents '6' with '446'
-444 446 0
c Var 'x_00004_00003' direct represents '6' with '447'
444 -446 447 0
-447 446 0
-447 -444 0
c Var 'x_00004_00003' order represents '7' with '448'
-446 448 0
c Var 'x_00004_00003' direct represents '7' with '449'
446 -448 449 0
-449 448 0
-449 -446 0
c Var 'x_00004_00003' order represents '8' with '450'
-448 450 0
c Var 'x_00004_00003' direct represents '8' with '451'
448 -450 451 0
-451 450 0
-451 -448 0
c Var 'x_00004_00003' direct represents '9' with '-450'
437 439 441 443 445 447 449 451 -450 0
c Encoding variable: x_00004_00004 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00004_00004' order represents '1' with '452'
c Var 'x_00004_00004' direct represents '1' with '452'
c Var 'x_00004_00004' order represents '2' with '453'
-452 453 0
c Var 'x_00004_00004' direct represents '2' with '454'
452 -453 454 0
-454 453 0
-454 -452 0
c Var 'x_00004_00004' order represents '3' with '455'
-453 455 0
c Var 'x_00004_00004' direct represents '3' with '456'
453 -455 456 0
-456 455 0
-456 -453 0
c Var 'x_00004_00004' order represents '4' with '457'
-455 457 0
c Var 'x_00004_00004' direct represents '4' with '458'
455 -457 458 0
-458 457 0
-458 -455 0
c Var 'x_00004_00004' order represents '5' with '459'
-457 459 0
c Var 'x_00004_00004' direct represents '5' with '460'
457 -459 460 0
-460 459 0
-460 -457 0
c Var 'x_00004_00004' order represents '6' with '461'
-459 461 0
c Var 'x_00004_00004' direct represents '6' with '462'
459 -461 462 0
-462 461 0
-462 -459 0
c Var 'x_00004_00004' order represents '7' with '463'
-461 463 0
c Var 'x_00004_00004' direct represents '7' with '464'
461 -463 464 0
-464 463 0
-464 -461 0
c Var 'x_00004_00004' order represents '8' with '465'
-463 465 0
c Var 'x_00004_00004' direct represents '8' with '466'
463 -465 466 0
-466 465 0
-466 -463 0
c Var 'x_00004_00004' direct represents '9' with '-465'
452 454 456 458 460 462 464 466 -465 0
c Encoding variable: x_00004_00005 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00004_00005' order represents '1' with '467'
c Var 'x_00004_00005' direct represents '1' with '467'
c Var 'x_00004_00005' order represents '2' with '468'
-467 468 0
c Var 'x_00004_00005' direct represents '2' with '469'
467 -468 469 0
-469 468 0
-469 -467 0
c Var 'x_00004_00005' order represents '3' with '470'
-468 470 0
c Var 'x_00004_00005' direct represents '3' with '471'
468 -470 471 0
-471 470 0
-471 -468 0
c Var 'x_00004_00005' order represents '4' with '472'
-470 472 0
c Var 'x_00004_00005' direct represents '4' with '473'
470 -472 473 0
-473 472 0
-473 -470 0
c Var 'x_00004_00005' order represents '5' with '474'
-472 474 0
c Var 'x_00004_00005' direct represents '5' with '475'
472 -474 475 0
-475 474 0
-475 -472 0
c Var 'x_00004_00005' order represents '6' with '476'
-474 476 0
c Var 'x_00004_00005' direct represents '6' with '477'
474 -476 477 0
-477 476 0
-477 -474 0
c Var 'x_00004_00005' order represents '7' with '478'
-476 478 0
c Var 'x_00004_00005' direct represents '7' with '479'
476 -478 479 0
-479 478 0
-479 -476 0
c Var 'x_00004_00005' order represents '8' with '480'
-478 480 0
c Var 'x_00004_00005' direct represents '8' with '481'
478 -480 481 0
-481 480 0
-481 -478 0
c Var 'x_00004_00005' direct represents '9' with '-480'
467 469 471 473 475 477 479 481 -480 0
c Encoding variable: x_00004_00006 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00004_00006' order represents '1' with '482'
c Var 'x_00004_00006' direct represents '1' with '482'
c Var 'x_00004_00006' order represents '2' with '483'
-482 483 0
c Var 'x_00004_00006' direct represents '2' with '484'
482 -483 484 0
-484 483 0
-484 -482 0
c Var 'x_00004_00006' order represents '3' with '485'
-483 485 0
c Var 'x_00004_00006' direct represents '3' with '486'
483 -485 486 0
-486 485 0
-486 -483 0
c Var 'x_00004_00006' order represents '4' with '487'
-485 487 0
c Var 'x_00004_00006' direct represents '4' with '488'
485 -487 488 0
-488 487 0
-488 -485 0
c Var 'x_00004_00006' order represents '5' with '489'
-487 489 0
c Var 'x_00004_00006' direct represents '5' with '490'
487 -489 490 0
-490 489 0
-490 -487 0
c Var 'x_00004_00006' order represents '6' with '491'
-489 491 0
c Var 'x_00004_00006' direct represents '6' with '492'
489 -491 492 0
-492 491 0
-492 -489 0
c Var 'x_00004_00006' order represents '7' with '493'
-491 493 0
c Var 'x_00004_00006' direct represents '7' with '494'
491 -493 494 0
-494 493 0
-494 -491 0
c Var 'x_00004_00006' order represents '8' with '495'
-493 495 0
c Var 'x_00004_00006' direct represents '8' with '496'
493 -495 496 0
-496 495 0
-496 -493 0
c Var 'x_00004_00006' direct represents '9' with '-495'
482 484 486 488 490 492 494 496 -495 0
c Encoding variable: x_00004_00007 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00004_00007' order represents '1' with '497'
c Var 'x_00004_00007' direct represents '1' with '497'
c Var 'x_00004_00007' order represents '2' with '498'
-497 498 0
c Var 'x_00004_00007' direct represents '2' with '499'
497 -498 499 0
-499 498 0
-499 -497 0
c Var 'x_00004_00007' order represents '3' with '500'
-498 500 0
c Var 'x_00004_00007' direct represents '3' with '501'
498 -500 501 0
-501 500 0
-501 -498 0
c Var 'x_00004_00007' order represents '4' with '502'
-500 502 0
c Var 'x_00004_00007' direct represents '4' with '503'
500 -502 503 0
-503 502 0
-503 -500 0
c Var 'x_00004_00007' order represents '5' with '504'
-502 504 0
c Var 'x_00004_00007' direct represents '5' with '505'
502 -504 505 0
-505 504 0
-505 -502 0
c Var 'x_00004_00007' order represents '6' with '506'
-504 506 0
c Var 'x_00004_00007' direct represents '6' with '507'
504 -506 507 0
-507 506 0
-507 -504 0
c Var 'x_00004_00007' order represents '7' with '508'
-506 508 0
c Var 'x_00004_00007' direct represents '7' with '509'
506 -508 509 0
-509 508 0
-509 -506 0
c Var 'x_00004_00007' order represents '8' with '510'
-508 510 0
c Var 'x_00004_00007' direct represents '8' with '511'
508 -510 511 0
-511 510 0
-511 -508 0
c Var 'x_00004_00007' direct represents '9' with '-510'
497 499 501 503 505 507 509 511 -510 0
c Encoding variable: x_00004_00008 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00004_00008' order represents '1' with '512'
c Var 'x_00004_00008' direct represents '1' with '512'
c Var 'x_00004_00008' order represents '2' with '513'
-512 513 0
c Var 'x_00004_00008' direct represents '2' with '514'
512 -513 514 0
-514 513 0
-514 -512 0
c Var 'x_00004_00008' order represents '3' with '515'
-513 515 0
c Var 'x_00004_00008' direct represents '3' with '516'
513 -515 516 0
-516 515 0
-516 -513 0
c Var 'x_00004_00008' order represents '4' with '517'
-515 517 0
c Var 'x_00004_00008' direct represents '4' with '518'
515 -517 518 0
-518 517 0
-518 -515 0
c Var 'x_00004_00008' order represents '5' with '519'
-517 519 0
c Var 'x_00004_00008' direct represents '5' with '520'
517 -519 520 0
-520 519 0
-520 -517 0
c Var 'x_00004_00008' order represents '6' with '521'
-519 521 0
c Var 'x_00004_00008' direct represents '6' with '522'
519 -521 522 0
-522 521 0
-522 -519 0
c Var 'x_00004_00008' order represents '7' with '523'
-521 523 0
c Var 'x_00004_00008' direct represents '7' with '524'
521 -523 524 0
-524 523 0
-524 -521 0
c Var 'x_00004_00008' order represents '8' with '525'
-523 525 0
c Var 'x_00004_00008' direct represents '8' with '526'
523 -525 526 0
-526 525 0
-526 -523 0
c Var 'x_00004_00008' direct represents '9' with '-525'
512 514 516 518 520 522 524 526 -525 0
c Encoding variable: x_00004_00009 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00004_00009' order represents '1' with '527'
c Var 'x_00004_00009' direct represents '1' with '527'
c Var 'x_00004_00009' order represents '2' with '528'
-527 528 0
c Var 'x_00004_00009' direct represents '2' with '529'
527 -528 529 0
-529 528 0
-529 -527 0
c Var 'x_00004_00009' order represents '3' with '530'
-528 530 0
c Var 'x_00004_00009' direct represents '3' with '531'
528 -530 531 0
-531 530 0
-531 -528 0
c Var 'x_00004_00009' order represents '4' with '532'
-530 532 0
c Var 'x_00004_00009' direct represents '4' with '533'
530 -532 533 0
-533 532 0
-533 -530 0
c Var 'x_00004_00009' order represents '5' with '534'
-532 534 0
c Var 'x_00004_00009' direct represents '5' with '535'
532 -534 535 0
-535 534 0
-535 -532 0
c Var 'x_00004_00009' order represents '6' with '536'
-534 536 0
c Var 'x_00004_00009' direct represents '6' with '537'
534 -536 537 0
-537 536 0
-537 -534 0
c Var 'x_00004_00009' order represents '7' with '538'
-536 538 0
c Var 'x_00004_00009' direct represents '7' with '539'
536 -538 539 0
-539 538 0
-539 -536 0
c Var 'x_00004_00009' order represents '8' with '540'
-538 540 0
c Var 'x_00004_00009' direct represents '8' with '541'
538 -540 541 0
-541 540 0
-541 -538 0
c Var 'x_00004_00009' direct represents '9' with '-540'
527 529 531 533 535 537 539 541 -540 0
c Encoding variable: x_00005_00001 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00005_00001' order represents '1' with '542'
c Var 'x_00005_00001' direct represents '1' with '542'
c Var 'x_00005_00001' order represents '2' with '543'
-542 543 0
c Var 'x_00005_00001' direct represents '2' with '544'
542 -543 544 0
-544 543 0
-544 -542 0
c Var 'x_00005_00001' order represents '3' with '545'
-543 545 0
c Var 'x_00005_00001' direct represents '3' with '546'
543 -545 546 0
-546 545 0
-546 -543 0
c Var 'x_00005_00001' order represents '4' with '547'
-545 547 0
c Var 'x_00005_00001' direct represents '4' with '548'
545 -547 548 0
-548 547 0
-548 -545 0
c Var 'x_00005_00001' order represents '5' with '549'
-547 549 0
c Var 'x_00005_00001' direct represents '5' with '550'
547 -549 550 0
-550 549 0
-550 -547 0
c Var 'x_00005_00001' order represents '6' with '551'
-549 551 0
c Var 'x_00005_00001' direct represents '6' with '552'
549 -551 552 0
-552 551 0
-552 -549 0
c Var 'x_00005_00001' order represents '7' with '553'
-551 553 0
c Var 'x_00005_00001' direct represents '7' with '554'
551 -553 554 0
-554 553 0
-554 -551 0
c Var 'x_00005_00001' order represents '8' with '555'
-553 555 0
c Var 'x_00005_00001' direct represents '8' with '556'
553 -555 556 0
-556 555 0
-556 -553 0
c Var 'x_00005_00001' direct represents '9' with '-555'
542 544 546 548 550 552 554 556 -555 0
c Encoding variable: x_00005_00002 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00005_00002' order represents '1' with '557'
c Var 'x_00005_00002' direct represents '1' with '557'
c Var 'x_00005_00002' order represents '2' with '558'
-557 558 0
c Var 'x_00005_00002' direct represents '2' with '559'
557 -558 559 0
-559 558 0
-559 -557 0
c Var 'x_00005_00002' order represents '3' with '560'
-558 560 0
c Var 'x_00005_00002' direct represents '3' with '561'
558 -560 561 0
-561 560 0
-561 -558 0
c Var 'x_00005_00002' order represents '4' with '562'
-560 562 0
c Var 'x_00005_00002' direct represents '4' with '563'
560 -562 563 0
-563 562 0
-563 -560 0
c Var 'x_00005_00002' order represents '5' with '564'
-562 564 0
c Var 'x_00005_00002' direct represents '5' with '565'
562 -564 565 0
-565 564 0
-565 -562 0
c Var 'x_00005_00002' order represents '6' with '566'
-564 566 0
c Var 'x_00005_00002' direct represents '6' with '567'
564 -566 567 0
-567 566 0
-567 -564 0
c Var 'x_00005_00002' order represents '7' with '568'
-566 568 0
c Var 'x_00005_00002' direct represents '7' with '569'
566 -568 569 0
-569 568 0
-569 -566 0
c Var 'x_00005_00002' order represents '8' with '570'
-568 570 0
c Var 'x_00005_00002' direct represents '8' with '571'
568 -570 571 0
-571 570 0
-571 -568 0
c Var 'x_00005_00002' direct represents '9' with '-570'
557 559 561 563 565 567 569 571 -570 0
c Encoding variable: x_00005_00003 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00005_00003' order represents '1' with '572'
c Var 'x_00005_00003' direct represents '1' with '572'
c Var 'x_00005_00003' order represents '2' with '573'
-572 573 0
c Var 'x_00005_00003' direct represents '2' with '574'
572 -573 574 0
-574 573 0
-574 -572 0
c Var 'x_00005_00003' order represents '3' with '575'
-573 575 0
c Var 'x_00005_00003' direct represents '3' with '576'
573 -575 576 0
-576 575 0
-576 -573 0
c Var 'x_00005_00003' order represents '4' with '577'
-575 577 0
c Var 'x_00005_00003' direct represents '4' with '578'
575 -577 578 0
-578 577 0
-578 -575 0
c Var 'x_00005_00003' order represents '5' with '579'
-577 579 0
c Var 'x_00005_00003' direct represents '5' with '580'
577 -579 580 0
-580 579 0
-580 -577 0
c Var 'x_00005_00003' order represents '6' with '581'
-579 581 0
c Var 'x_00005_00003' direct represents '6' with '582'
579 -581 582 0
-582 581 0
-582 -579 0
c Var 'x_00005_00003' order represents '7' with '583'
-581 583 0
c Var 'x_00005_00003' direct represents '7' with '584'
581 -583 584 0
-584 583 0
-584 -581 0
c Var 'x_00005_00003' order represents '8' with '585'
-583 585 0
c Var 'x_00005_00003' direct represents '8' with '586'
583 -585 586 0
-586 585 0
-586 -583 0
c Var 'x_00005_00003' direct represents '9' with '-585'
572 574 576 578 580 582 584 586 -585 0
c Encoding variable: x_00005_00004 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00005_00004' order represents '1' with '587'
c Var 'x_00005_00004' direct represents '1' with '587'
c Var 'x_00005_00004' order represents '2' with '588'
-587 588 0
c Var 'x_00005_00004' direct represents '2' with '589'
587 -588 589 0
-589 588 0
-589 -587 0
c Var 'x_00005_00004' order represents '3' with '590'
-588 590 0
c Var 'x_00005_00004' direct represents '3' with '591'
588 -590 591 0
-591 590 0
-591 -588 0
c Var 'x_00005_00004' order represents '4' with '592'
-590 592 0
c Var 'x_00005_00004' direct represents '4' with '593'
590 -592 593 0
-593 592 0
-593 -590 0
c Var 'x_00005_00004' order represents '5' with '594'
-592 594 0
c Var 'x_00005_00004' direct represents '5' with '595'
592 -594 595 0
-595 594 0
-595 -592 0
c Var 'x_00005_00004' order represents '6' with '596'
-594 596 0
c Var 'x_00005_00004' direct represents '6' with '597'
594 -596 597 0
-597 596 0
-597 -594 0
c Var 'x_00005_00004' order represents '7' with '598'
-596 598 0
c Var 'x_00005_00004' direct represents '7' with '599'
596 -598 599 0
-599 598 0
-599 -596 0
c Var 'x_00005_00004' order represents '8' with '600'
-598 600 0
c Var 'x_00005_00004' direct represents '8' with '601'
598 -600 601 0
-601 600 0
-601 -598 0
c Var 'x_00005_00004' direct represents '9' with '-600'
587 589 591 593 595 597 599 601 -600 0
c Encoding variable: x_00005_00005 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00005_00005' order represents '1' with '602'
c Var 'x_00005_00005' direct represents '1' with '602'
c Var 'x_00005_00005' order represents '2' with '603'
-602 603 0
c Var 'x_00005_00005' direct represents '2' with '604'
602 -603 604 0
-604 603 0
-604 -602 0
c Var 'x_00005_00005' order represents '3' with '605'
-603 605 0
c Var 'x_00005_00005' direct represents '3' with '606'
603 -605 606 0
-606 605 0
-606 -603 0
c Var 'x_00005_00005' order represents '4' with '607'
-605 607 0
c Var 'x_00005_00005' direct represents '4' with '608'
605 -607 608 0
-608 607 0
-608 -605 0
c Var 'x_00005_00005' order represents '5' with '609'
-607 609 0
c Var 'x_00005_00005' direct represents '5' with '610'
607 -609 610 0
-610 609 0
-610 -607 0
c Var 'x_00005_00005' order represents '6' with '611'
-609 611 0
c Var 'x_00005_00005' direct represents '6' with '612'
609 -611 612 0
-612 611 0
-612 -609 0
c Var 'x_00005_00005' order represents '7' with '613'
-611 613 0
c Var 'x_00005_00005' direct represents '7' with '614'
611 -613 614 0
-614 613 0
-614 -611 0
c Var 'x_00005_00005' order represents '8' with '615'
-613 615 0
c Var 'x_00005_00005' direct represents '8' with '616'
613 -615 616 0
-616 615 0
-616 -613 0
c Var 'x_00005_00005' direct represents '9' with '-615'
602 604 606 608 610 612 614 616 -615 0
c Encoding variable: x_00005_00006 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00005_00006' order represents '1' with '617'
c Var 'x_00005_00006' direct represents '1' with '617'
c Var 'x_00005_00006' order represents '2' with '618'
-617 618 0
c Var 'x_00005_00006' direct represents '2' with '619'
617 -618 619 0
-619 618 0
-619 -617 0
c Var 'x_00005_00006' order represents '3' with '620'
-618 620 0
c Var 'x_00005_00006' direct represents '3' with '621'
618 -620 621 0
-621 620 0
-621 -618 0
c Var 'x_00005_00006' order represents '4' with '622'
-620 622 0
c Var 'x_00005_00006' direct represents '4' with '623'
620 -622 623 0
-623 622 0
-623 -620 0
c Var 'x_00005_00006' order represents '5' with '624'
-622 624 0
c Var 'x_00005_00006' direct represents '5' with '625'
622 -624 625 0
-625 624 0
-625 -622 0
c Var 'x_00005_00006' order represents '6' with '626'
-624 626 0
c Var 'x_00005_00006' direct represents '6' with '627'
624 -626 627 0
-627 626 0
-627 -624 0
c Var 'x_00005_00006' order represents '7' with '628'
-626 628 0
c Var 'x_00005_00006' direct represents '7' with '629'
626 -628 629 0
-629 628 0
-629 -626 0
c Var 'x_00005_00006' order represents '8' with '630'
-628 630 0
c Var 'x_00005_00006' direct represents '8' with '631'
628 -630 631 0
-631 630 0
-631 -628 0
c Var 'x_00005_00006' direct represents '9' with '-630'
617 619 621 623 625 627 629 631 -630 0
c Encoding variable: x_00005_00007 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00005_00007' order represents '1' with '632'
c Var 'x_00005_00007' direct represents '1' with '632'
c Var 'x_00005_00007' order represents '2' with '633'
-632 633 0
c Var 'x_00005_00007' direct represents '2' with '634'
632 -633 634 0
-634 633 0
-634 -632 0
c Var 'x_00005_00007' order represents '3' with '635'
-633 635 0
c Var 'x_00005_00007' direct represents '3' with '636'
633 -635 636 0
-636 635 0
-636 -633 0
c Var 'x_00005_00007' order represents '4' with '637'
-635 637 0
c Var 'x_00005_00007' direct represents '4' with '638'
635 -637 638 0
-638 637 0
-638 -635 0
c Var 'x_00005_00007' order represents '5' with '639'
-637 639 0
c Var 'x_00005_00007' direct represents '5' with '640'
637 -639 640 0
-640 639 0
-640 -637 0
c Var 'x_00005_00007' order represents '6' with '641'
-639 641 0
c Var 'x_00005_00007' direct represents '6' with '642'
639 -641 642 0
-642 641 0
-642 -639 0
c Var 'x_00005_00007' order represents '7' with '643'
-641 643 0
c Var 'x_00005_00007' direct represents '7' with '644'
641 -643 644 0
-644 643 0
-644 -641 0
c Var 'x_00005_00007' order represents '8' with '645'
-643 645 0
c Var 'x_00005_00007' direct represents '8' with '646'
643 -645 646 0
-646 645 0
-646 -643 0
c Var 'x_00005_00007' direct represents '9' with '-645'
632 634 636 638 640 642 644 646 -645 0
c Encoding variable: x_00005_00008 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00005_00008' order represents '1' with '647'
c Var 'x_00005_00008' direct represents '1' with '647'
c Var 'x_00005_00008' order represents '2' with '648'
-647 648 0
c Var 'x_00005_00008' direct represents '2' with '649'
647 -648 649 0
-649 648 0
-649 -647 0
c Var 'x_00005_00008' order represents '3' with '650'
-648 650 0
c Var 'x_00005_00008' direct represents '3' with '651'
648 -650 651 0
-651 650 0
-651 -648 0
c Var 'x_00005_00008' order represents '4' with '652'
-650 652 0
c Var 'x_00005_00008' direct represents '4' with '653'
650 -652 653 0
-653 652 0
-653 -650 0
c Var 'x_00005_00008' order represents '5' with '654'
-652 654 0
c Var 'x_00005_00008' direct represents '5' with '655'
652 -654 655 0
-655 654 0
-655 -652 0
c Var 'x_00005_00008' order represents '6' with '656'
-654 656 0
c Var 'x_00005_00008' direct represents '6' with '657'
654 -656 657 0
-657 656 0
-657 -654 0
c Var 'x_00005_00008' order represents '7' with '658'
-656 658 0
c Var 'x_00005_00008' direct represents '7' with '659'
656 -658 659 0
-659 658 0
-659 -656 0
c Var 'x_00005_00008' order represents '8' with '660'
-658 660 0
c Var 'x_00005_00008' direct represents '8' with '661'
658 -660 661 0
-661 660 0
-661 -658 0
c Var 'x_00005_00008' direct represents '9' with '-660'
647 649 651 653 655 657 659 661 -660 0
c Encoding variable: x_00005_00009 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00005_00009' order represents '1' with '662'
c Var 'x_00005_00009' direct represents '1' with '662'
c Var 'x_00005_00009' order represents '2' with '663'
-662 663 0
c Var 'x_00005_00009' direct represents '2' with '664'
662 -663 664 0
-664 663 0
-664 -662 0
c Var 'x_00005_00009' order represents '3' with '665'
-663 665 0
c Var 'x_00005_00009' direct represents '3' with '666'
663 -665 666 0
-666 665 0
-666 -663 0
c Var 'x_00005_00009' order represents '4' with '667'
-665 667 0
c Var 'x_00005_00009' direct represents '4' with '668'
665 -667 668 0
-668 667 0
-668 -665 0
c Var 'x_00005_00009' order represents '5' with '669'
-667 669 0
c Var 'x_00005_00009' direct represents '5' with '670'
667 -669 670 0
-670 669 0
-670 -667 0
c Var 'x_00005_00009' order represents '6' with '671'
-669 671 0
c Var 'x_00005_00009' direct represents '6' with '672'
669 -671 672 0
-672 671 0
-672 -669 0
c Var 'x_00005_00009' order represents '7' with '673'
-671 673 0
c Var 'x_00005_00009' direct represents '7' with '674'
671 -673 674 0
-674 673 0
-674 -671 0
c Var 'x_00005_00009' order represents '8' with '675'
-673 675 0
c Var 'x_00005_00009' direct represents '8' with '676'
673 -675 676 0
-676 675 0
-676 -673 0
c Var 'x_00005_00009' direct represents '9' with '-675'
662 664 666 668 670 672 674 676 -675 0
c Encoding variable: x_00006_00001 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00006_00001' order represents '1' with '677'
c Var 'x_00006_00001' direct represents '1' with '677'
c Var 'x_00006_00001' order represents '2' with '678'
-677 678 0
c Var 'x_00006_00001' direct represents '2' with '679'
677 -678 679 0
-679 678 0
-679 -677 0
c Var 'x_00006_00001' order represents '3' with '680'
-678 680 0
c Var 'x_00006_00001' direct represents '3' with '681'
678 -680 681 0
-681 680 0
-681 -678 0
c Var 'x_00006_00001' order represents '4' with '682'
-680 682 0
c Var 'x_00006_00001' direct represents '4' with '683'
680 -682 683 0
-683 682 0
-683 -680 0
c Var 'x_00006_00001' order represents '5' with '684'
-682 684 0
c Var 'x_00006_00001' direct represents '5' with '685'
682 -684 685 0
-685 684 0
-685 -682 0
c Var 'x_00006_00001' order represents '6' with '686'
-684 686 0
c Var 'x_00006_00001' direct represents '6' with '687'
684 -686 687 0
-687 686 0
-687 -684 0
c Var 'x_00006_00001' order represents '7' with '688'
-686 688 0
c Var 'x_00006_00001' direct represents '7' with '689'
686 -688 689 0
-689 688 0
-689 -686 0
c Var 'x_00006_00001' order represents '8' with '690'
-688 690 0
c Var 'x_00006_00001' direct represents '8' with '691'
688 -690 691 0
-691 690 0
-691 -688 0
c Var 'x_00006_00001' direct represents '9' with '-690'
677 679 681 683 685 687 689 691 -690 0
c Encoding variable: x_00006_00002 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00006_00002' order represents '1' with '692'
c Var 'x_00006_00002' direct represents '1' with '692'
c Var 'x_00006_00002' order represents '2' with '693'
-692 693 0
c Var 'x_00006_00002' direct represents '2' with '694'
692 -693 694 0
-694 693 0
-694 -692 0
c Var 'x_00006_00002' order represents '3' with '695'
-693 695 0
c Var 'x_00006_00002' direct represents '3' with '696'
693 -695 696 0
-696 695 0
-696 -693 0
c Var 'x_00006_00002' order represents '4' with '697'
-695 697 0
c Var 'x_00006_00002' direct represents '4' with '698'
695 -697 698 0
-698 697 0
-698 -695 0
c Var 'x_00006_00002' order represents '5' with '699'
-697 699 0
c Var 'x_00006_00002' direct represents '5' with '700'
697 -699 700 0
-700 699 0
-700 -697 0
c Var 'x_00006_00002' order represents '6' with '701'
-699 701 0
c Var 'x_00006_00002' direct represents '6' with '702'
699 -701 702 0
-702 701 0
-702 -699 0
c Var 'x_00006_00002' order represents '7' with '703'
-701 703 0
c Var 'x_00006_00002' direct represents '7' with '704'
701 -703 704 0
-704 703 0
-704 -701 0
c Var 'x_00006_00002' order represents '8' with '705'
-703 705 0
c Var 'x_00006_00002' direct represents '8' with '706'
703 -705 706 0
-706 705 0
-706 -703 0
c Var 'x_00006_00002' direct represents '9' with '-705'
692 694 696 698 700 702 704 706 -705 0
c Encoding variable: x_00006_00003 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00006_00003' order represents '1' with '707'
c Var 'x_00006_00003' direct represents '1' with '707'
c Var 'x_00006_00003' order represents '2' with '708'
-707 708 0
c Var 'x_00006_00003' direct represents '2' with '709'
707 -708 709 0
-709 708 0
-709 -707 0
c Var 'x_00006_00003' order represents '3' with '710'
-708 710 0
c Var 'x_00006_00003' direct represents '3' with '711'
708 -710 711 0
-711 710 0
-711 -708 0
c Var 'x_00006_00003' order represents '4' with '712'
-710 712 0
c Var 'x_00006_00003' direct represents '4' with '713'
710 -712 713 0
-713 712 0
-713 -710 0
c Var 'x_00006_00003' order represents '5' with '714'
-712 714 0
c Var 'x_00006_00003' direct represents '5' with '715'
712 -714 715 0
-715 714 0
-715 -712 0
c Var 'x_00006_00003' order represents '6' with '716'
-714 716 0
c Var 'x_00006_00003' direct represents '6' with '717'
714 -716 717 0
-717 716 0
-717 -714 0
c Var 'x_00006_00003' order represents '7' with '718'
-716 718 0
c Var 'x_00006_00003' direct represents '7' with '719'
716 -718 719 0
-719 718 0
-719 -716 0
c Var 'x_00006_00003' order represents '8' with '720'
-718 720 0
c Var 'x_00006_00003' direct represents '8' with '721'
718 -720 721 0
-721 720 0
-721 -718 0
c Var 'x_00006_00003' direct represents '9' with '-720'
707 709 711 713 715 717 719 721 -720 0
c Encoding variable: x_00006_00004 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00006_00004' order represents '1' with '722'
c Var 'x_00006_00004' direct represents '1' with '722'
c Var 'x_00006_00004' order represents '2' with '723'
-722 723 0
c Var 'x_00006_00004' direct represents '2' with '724'
722 -723 724 0
-724 723 0
-724 -722 0
c Var 'x_00006_00004' order represents '3' with '725'
-723 725 0
c Var 'x_00006_00004' direct represents '3' with '726'
723 -725 726 0
-726 725 0
-726 -723 0
c Var 'x_00006_00004' order represents '4' with '727'
-725 727 0
c Var 'x_00006_00004' direct represents '4' with '728'
725 -727 728 0
-728 727 0
-728 -725 0
c Var 'x_00006_00004' order represents '5' with '729'
-727 729 0
c Var 'x_00006_00004' direct represents '5' with '730'
727 -729 730 0
-730 729 0
-730 -727 0
c Var 'x_00006_00004' order represents '6' with '731'
-729 731 0
c Var 'x_00006_00004' direct represents '6' with '732'
729 -731 732 0
-732 731 0
-732 -729 0
c Var 'x_00006_00004' order represents '7' with '733'
-731 733 0
c Var 'x_00006_00004' direct represents '7' with '734'
731 -733 734 0
-734 733 0
-734 -731 0
c Var 'x_00006_00004' order represents '8' with '735'
-733 735 0
c Var 'x_00006_00004' direct represents '8' with '736'
733 -735 736 0
-736 735 0
-736 -733 0
c Var 'x_00006_00004' direct represents '9' with '-735'
722 724 726 728 730 732 734 736 -735 0
c Encoding variable: x_00006_00005 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00006_00005' order represents '1' with '737'
c Var 'x_00006_00005' direct represents '1' with '737'
c Var 'x_00006_00005' order represents '2' with '738'
-737 738 0
c Var 'x_00006_00005' direct represents '2' with '739'
737 -738 739 0
-739 738 0
-739 -737 0
c Var 'x_00006_00005' order represents '3' with '740'
-738 740 0
c Var 'x_00006_00005' direct represents '3' with '741'
738 -740 741 0
-741 740 0
-741 -738 0
c Var 'x_00006_00005' order represents '4' with '742'
-740 742 0
c Var 'x_00006_00005' direct represents '4' with '743'
740 -742 743 0
-743 742 0
-743 -740 0
c Var 'x_00006_00005' order represents '5' with '744'
-742 744 0
c Var 'x_00006_00005' direct represents '5' with '745'
742 -744 745 0
-745 744 0
-745 -742 0
c Var 'x_00006_00005' order represents '6' with '746'
-744 746 0
c Var 'x_00006_00005' direct represents '6' with '747'
744 -746 747 0
-747 746 0
-747 -744 0
c Var 'x_00006_00005' order represents '7' with '748'
-746 748 0
c Var 'x_00006_00005' direct represents '7' with '749'
746 -748 749 0
-749 748 0
-749 -746 0
c Var 'x_00006_00005' order represents '8' with '750'
-748 750 0
c Var 'x_00006_00005' direct represents '8' with '751'
748 -750 751 0
-751 750 0
-751 -748 0
c Var 'x_00006_00005' direct represents '9' with '-750'
737 739 741 743 745 747 749 751 -750 0
c Encoding variable: x_00006_00006 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00006_00006' order represents '1' with '752'
c Var 'x_00006_00006' direct represents '1' with '752'
c Var 'x_00006_00006' order represents '2' with '753'
-752 753 0
c Var 'x_00006_00006' direct represents '2' with '754'
752 -753 754 0
-754 753 0
-754 -752 0
c Var 'x_00006_00006' order represents '3' with '755'
-753 755 0
c Var 'x_00006_00006' direct represents '3' with '756'
753 -755 756 0
-756 755 0
-756 -753 0
c Var 'x_00006_00006' order represents '4' with '757'
-755 757 0
c Var 'x_00006_00006' direct represents '4' with '758'
755 -757 758 0
-758 757 0
-758 -755 0
c Var 'x_00006_00006' order represents '5' with '759'
-757 759 0
c Var 'x_00006_00006' direct represents '5' with '760'
757 -759 760 0
-760 759 0
-760 -757 0
c Var 'x_00006_00006' order represents '6' with '761'
-759 761 0
c Var 'x_00006_00006' direct represents '6' with '762'
759 -761 762 0
-762 761 0
-762 -759 0
c Var 'x_00006_00006' order represents '7' with '763'
-761 763 0
c Var 'x_00006_00006' direct represents '7' with '764'
761 -763 764 0
-764 763 0
-764 -761 0
c Var 'x_00006_00006' order represents '8' with '765'
-763 765 0
c Var 'x_00006_00006' direct represents '8' with '766'
763 -765 766 0
-766 765 0
-766 -763 0
c Var 'x_00006_00006' direct represents '9' with '-765'
752 754 756 758 760 762 764 766 -765 0
c Encoding variable: x_00006_00007 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00006_00007' order represents '1' with '767'
c Var 'x_00006_00007' direct represents '1' with '767'
c Var 'x_00006_00007' order represents '2' with '768'
-767 768 0
c Var 'x_00006_00007' direct represents '2' with '769'
767 -768 769 0
-769 768 0
-769 -767 0
c Var 'x_00006_00007' order represents '3' with '770'
-768 770 0
c Var 'x_00006_00007' direct represents '3' with '771'
768 -770 771 0
-771 770 0
-771 -768 0
c Var 'x_00006_00007' order represents '4' with '772'
-770 772 0
c Var 'x_00006_00007' direct represents '4' with '773'
770 -772 773 0
-773 772 0
-773 -770 0
c Var 'x_00006_00007' order represents '5' with '774'
-772 774 0
c Var 'x_00006_00007' direct represents '5' with '775'
772 -774 775 0
-775 774 0
-775 -772 0
c Var 'x_00006_00007' order represents '6' with '776'
-774 776 0
c Var 'x_00006_00007' direct represents '6' with '777'
774 -776 777 0
-777 776 0
-777 -774 0
c Var 'x_00006_00007' order represents '7' with '778'
-776 778 0
c Var 'x_00006_00007' direct represents '7' with '779'
776 -778 779 0
-779 778 0
-779 -776 0
c Var 'x_00006_00007' order represents '8' with '780'
-778 780 0
c Var 'x_00006_00007' direct represents '8' with '781'
778 -780 781 0
-781 780 0
-781 -778 0
c Var 'x_00006_00007' direct represents '9' with '-780'
767 769 771 773 775 777 779 781 -780 0
c Encoding variable: x_00006_00008 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00006_00008' order represents '1' with '782'
c Var 'x_00006_00008' direct represents '1' with '782'
c Var 'x_00006_00008' order represents '2' with '783'
-782 783 0
c Var 'x_00006_00008' direct represents '2' with '784'
782 -783 784 0
-784 783 0
-784 -782 0
c Var 'x_00006_00008' order represents '3' with '785'
-783 785 0
c Var 'x_00006_00008' direct represents '3' with '786'
783 -785 786 0
-786 785 0
-786 -783 0
c Var 'x_00006_00008' order represents '4' with '787'
-785 787 0
c Var 'x_00006_00008' direct represents '4' with '788'
785 -787 788 0
-788 787 0
-788 -785 0
c Var 'x_00006_00008' order represents '5' with '789'
-787 789 0
c Var 'x_00006_00008' direct represents '5' with '790'
787 -789 790 0
-790 789 0
-790 -787 0
c Var 'x_00006_00008' order represents '6' with '791'
-789 791 0
c Var 'x_00006_00008' direct represents '6' with '792'
789 -791 792 0
-792 791 0
-792 -789 0
c Var 'x_00006_00008' order represents '7' with '793'
-791 793 0
c Var 'x_00006_00008' direct represents '7' with '794'
791 -793 794 0
-794 793 0
-794 -791 0
c Var 'x_00006_00008' order represents '8' with '795'
-793 795 0
c Var 'x_00006_00008' direct represents '8' with '796'
793 -795 796 0
-796 795 0
-796 -793 0
c Var 'x_00006_00008' direct represents '9' with '-795'
782 784 786 788 790 792 794 796 -795 0
c Encoding variable: x_00006_00009 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00006_00009' order represents '1' with '797'
c Var 'x_00006_00009' direct represents '1' with '797'
c Var 'x_00006_00009' order represents '2' with '798'
-797 798 0
c Var 'x_00006_00009' direct represents '2' with '799'
797 -798 799 0
-799 798 0
-799 -797 0
c Var 'x_00006_00009' order represents '3' with '800'
-798 800 0
c Var 'x_00006_00009' direct represents '3' with '801'
798 -800 801 0
-801 800 0
-801 -798 0
c Var 'x_00006_00009' order represents '4' with '802'
-800 802 0
c Var 'x_00006_00009' direct represents '4' with '803'
800 -802 803 0
-803 802 0
-803 -800 0
c Var 'x_00006_00009' order represents '5' with '804'
-802 804 0
c Var 'x_00006_00009' direct represents '5' with '805'
802 -804 805 0
-805 804 0
-805 -802 0
c Var 'x_00006_00009' order represents '6' with '806'
-804 806 0
c Var 'x_00006_00009' direct represents '6' with '807'
804 -806 807 0
-807 806 0
-807 -804 0
c Var 'x_00006_00009' order represents '7' with '808'
-806 808 0
c Var 'x_00006_00009' direct represents '7' with '809'
806 -808 809 0
-809 808 0
-809 -806 0
c Var 'x_00006_00009' order represents '8' with '810'
-808 810 0
c Var 'x_00006_00009' direct represents '8' with '811'
808 -810 811 0
-811 810 0
-811 -808 0
c Var 'x_00006_00009' direct represents '9' with '-810'
797 799 801 803 805 807 809 811 -810 0
c Encoding variable: x_00007_00001 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00007_00001' order represents '1' with '812'
c Var 'x_00007_00001' direct represents '1' with '812'
c Var 'x_00007_00001' order represents '2' with '813'
-812 813 0
c Var 'x_00007_00001' direct represents '2' with '814'
812 -813 814 0
-814 813 0
-814 -812 0
c Var 'x_00007_00001' order represents '3' with '815'
-813 815 0
c Var 'x_00007_00001' direct represents '3' with '816'
813 -815 816 0
-816 815 0
-816 -813 0
c Var 'x_00007_00001' order represents '4' with '817'
-815 817 0
c Var 'x_00007_00001' direct represents '4' with '818'
815 -817 818 0
-818 817 0
-818 -815 0
c Var 'x_00007_00001' order represents '5' with '819'
-817 819 0
c Var 'x_00007_00001' direct represents '5' with '820'
817 -819 820 0
-820 819 0
-820 -817 0
c Var 'x_00007_00001' order represents '6' with '821'
-819 821 0
c Var 'x_00007_00001' direct represents '6' with '822'
819 -821 822 0
-822 821 0
-822 -819 0
c Var 'x_00007_00001' order represents '7' with '823'
-821 823 0
c Var 'x_00007_00001' direct represents '7' with '824'
821 -823 824 0
-824 823 0
-824 -821 0
c Var 'x_00007_00001' order represents '8' with '825'
-823 825 0
c Var 'x_00007_00001' direct represents '8' with '826'
823 -825 826 0
-826 825 0
-826 -823 0
c Var 'x_00007_00001' direct represents '9' with '-825'
812 814 816 818 820 822 824 826 -825 0
c Encoding variable: x_00007_00002 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00007_00002' order represents '1' with '827'
c Var 'x_00007_00002' direct represents '1' with '827'
c Var 'x_00007_00002' order represents '2' with '828'
-827 828 0
c Var 'x_00007_00002' direct represents '2' with '829'
827 -828 829 0
-829 828 0
-829 -827 0
c Var 'x_00007_00002' order represents '3' with '830'
-828 830 0
c Var 'x_00007_00002' direct represents '3' with '831'
828 -830 831 0
-831 830 0
-831 -828 0
c Var 'x_00007_00002' order represents '4' with '832'
-830 832 0
c Var 'x_00007_00002' direct represents '4' with '833'
830 -832 833 0
-833 832 0
-833 -830 0
c Var 'x_00007_00002' order represents '5' with '834'
-832 834 0
c Var 'x_00007_00002' direct represents '5' with '835'
832 -834 835 0
-835 834 0
-835 -832 0
c Var 'x_00007_00002' order represents '6' with '836'
-834 836 0
c Var 'x_00007_00002' direct represents '6' with '837'
834 -836 837 0
-837 836 0
-837 -834 0
c Var 'x_00007_00002' order represents '7' with '838'
-836 838 0
c Var 'x_00007_00002' direct represents '7' with '839'
836 -838 839 0
-839 838 0
-839 -836 0
c Var 'x_00007_00002' order represents '8' with '840'
-838 840 0
c Var 'x_00007_00002' direct represents '8' with '841'
838 -840 841 0
-841 840 0
-841 -838 0
c Var 'x_00007_00002' direct represents '9' with '-840'
827 829 831 833 835 837 839 841 -840 0
c Encoding variable: x_00007_00003 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00007_00003' order represents '1' with '842'
c Var 'x_00007_00003' direct represents '1' with '842'
c Var 'x_00007_00003' order represents '2' with '843'
-842 843 0
c Var 'x_00007_00003' direct represents '2' with '844'
842 -843 844 0
-844 843 0
-844 -842 0
c Var 'x_00007_00003' order represents '3' with '845'
-843 845 0
c Var 'x_00007_00003' direct represents '3' with '846'
843 -845 846 0
-846 845 0
-846 -843 0
c Var 'x_00007_00003' order represents '4' with '847'
-845 847 0
c Var 'x_00007_00003' direct represents '4' with '848'
845 -847 848 0
-848 847 0
-848 -845 0
c Var 'x_00007_00003' order represents '5' with '849'
-847 849 0
c Var 'x_00007_00003' direct represents '5' with '850'
847 -849 850 0
-850 849 0
-850 -847 0
c Var 'x_00007_00003' order represents '6' with '851'
-849 851 0
c Var 'x_00007_00003' direct represents '6' with '852'
849 -851 852 0
-852 851 0
-852 -849 0
c Var 'x_00007_00003' order represents '7' with '853'
-851 853 0
c Var 'x_00007_00003' direct represents '7' with '854'
851 -853 854 0
-854 853 0
-854 -851 0
c Var 'x_00007_00003' order represents '8' with '855'
-853 855 0
c Var 'x_00007_00003' direct represents '8' with '856'
853 -855 856 0
-856 855 0
-856 -853 0
c Var 'x_00007_00003' direct represents '9' with '-855'
842 844 846 848 850 852 854 856 -855 0
c Encoding variable: x_00007_00004 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00007_00004' order represents '1' with '857'
c Var 'x_00007_00004' direct represents '1' with '857'
c Var 'x_00007_00004' order represents '2' with '858'
-857 858 0
c Var 'x_00007_00004' direct represents '2' with '859'
857 -858 859 0
-859 858 0
-859 -857 0
c Var 'x_00007_00004' order represents '3' with '860'
-858 860 0
c Var 'x_00007_00004' direct represents '3' with '861'
858 -860 861 0
-861 860 0
-861 -858 0
c Var 'x_00007_00004' order represents '4' with '862'
-860 862 0
c Var 'x_00007_00004' direct represents '4' with '863'
860 -862 863 0
-863 862 0
-863 -860 0
c Var 'x_00007_00004' order represents '5' with '864'
-862 864 0
c Var 'x_00007_00004' direct represents '5' with '865'
862 -864 865 0
-865 864 0
-865 -862 0
c Var 'x_00007_00004' order represents '6' with '866'
-864 866 0
c Var 'x_00007_00004' direct represents '6' with '867'
864 -866 867 0
-867 866 0
-867 -864 0
c Var 'x_00007_00004' order represents '7' with '868'
-866 868 0
c Var 'x_00007_00004' direct represents '7' with '869'
866 -868 869 0
-869 868 0
-869 -866 0
c Var 'x_00007_00004' order represents '8' with '870'
-868 870 0
c Var 'x_00007_00004' direct represents '8' with '871'
868 -870 871 0
-871 870 0
-871 -868 0
c Var 'x_00007_00004' direct represents '9' with '-870'
857 859 861 863 865 867 869 871 -870 0
c Encoding variable: x_00007_00005 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00007_00005' order represents '1' with '872'
c Var 'x_00007_00005' direct represents '1' with '872'
c Var 'x_00007_00005' order represents '2' with '873'
-872 873 0
c Var 'x_00007_00005' direct represents '2' with '874'
872 -873 874 0
-874 873 0
-874 -872 0
c Var 'x_00007_00005' order represents '3' with '875'
-873 875 0
c Var 'x_00007_00005' direct represents '3' with '876'
873 -875 876 0
-876 875 0
-876 -873 0
c Var 'x_00007_00005' order represents '4' with '877'
-875 877 0
c Var 'x_00007_00005' direct represents '4' with '878'
875 -877 878 0
-878 877 0
-878 -875 0
c Var 'x_00007_00005' order represents '5' with '879'
-877 879 0
c Var 'x_00007_00005' direct represents '5' with '880'
877 -879 880 0
-880 879 0
-880 -877 0
c Var 'x_00007_00005' order represents '6' with '881'
-879 881 0
c Var 'x_00007_00005' direct represents '6' with '882'
879 -881 882 0
-882 881 0
-882 -879 0
c Var 'x_00007_00005' order represents '7' with '883'
-881 883 0
c Var 'x_00007_00005' direct represents '7' with '884'
881 -883 884 0
-884 883 0
-884 -881 0
c Var 'x_00007_00005' order represents '8' with '885'
-883 885 0
c Var 'x_00007_00005' direct represents '8' with '886'
883 -885 886 0
-886 885 0
-886 -883 0
c Var 'x_00007_00005' direct represents '9' with '-885'
872 874 876 878 880 882 884 886 -885 0
c Encoding variable: x_00007_00006 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00007_00006' order represents '1' with '887'
c Var 'x_00007_00006' direct represents '1' with '887'
c Var 'x_00007_00006' order represents '2' with '888'
-887 888 0
c Var 'x_00007_00006' direct represents '2' with '889'
887 -888 889 0
-889 888 0
-889 -887 0
c Var 'x_00007_00006' order represents '3' with '890'
-888 890 0
c Var 'x_00007_00006' direct represents '3' with '891'
888 -890 891 0
-891 890 0
-891 -888 0
c Var 'x_00007_00006' order represents '4' with '892'
-890 892 0
c Var 'x_00007_00006' direct represents '4' with '893'
890 -892 893 0
-893 892 0
-893 -890 0
c Var 'x_00007_00006' order represents '5' with '894'
-892 894 0
c Var 'x_00007_00006' direct represents '5' with '895'
892 -894 895 0
-895 894 0
-895 -892 0
c Var 'x_00007_00006' order represents '6' with '896'
-894 896 0
c Var 'x_00007_00006' direct represents '6' with '897'
894 -896 897 0
-897 896 0
-897 -894 0
c Var 'x_00007_00006' order represents '7' with '898'
-896 898 0
c Var 'x_00007_00006' direct represents '7' with '899'
896 -898 899 0
-899 898 0
-899 -896 0
c Var 'x_00007_00006' order represents '8' with '900'
-898 900 0
c Var 'x_00007_00006' direct represents '8' with '901'
898 -900 901 0
-901 900 0
-901 -898 0
c Var 'x_00007_00006' direct represents '9' with '-900'
887 889 891 893 895 897 899 901 -900 0
c Encoding variable: x_00007_00007 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00007_00007' order represents '1' with '902'
c Var 'x_00007_00007' direct represents '1' with '902'
c Var 'x_00007_00007' order represents '2' with '903'
-902 903 0
c Var 'x_00007_00007' direct represents '2' with '904'
902 -903 904 0
-904 903 0
-904 -902 0
c Var 'x_00007_00007' order represents '3' with '905'
-903 905 0
c Var 'x_00007_00007' direct represents '3' with '906'
903 -905 906 0
-906 905 0
-906 -903 0
c Var 'x_00007_00007' order represents '4' with '907'
-905 907 0
c Var 'x_00007_00007' direct represents '4' with '908'
905 -907 908 0
-908 907 0
-908 -905 0
c Var 'x_00007_00007' order represents '5' with '909'
-907 909 0
c Var 'x_00007_00007' direct represents '5' with '910'
907 -909 910 0
-910 909 0
-910 -907 0
c Var 'x_00007_00007' order represents '6' with '911'
-909 911 0
c Var 'x_00007_00007' direct represents '6' with '912'
909 -911 912 0
-912 911 0
-912 -909 0
c Var 'x_00007_00007' order represents '7' with '913'
-911 913 0
c Var 'x_00007_00007' direct represents '7' with '914'
911 -913 914 0
-914 913 0
-914 -911 0
c Var 'x_00007_00007' order represents '8' with '915'
-913 915 0
c Var 'x_00007_00007' direct represents '8' with '916'
913 -915 916 0
-916 915 0
-916 -913 0
c Var 'x_00007_00007' direct represents '9' with '-915'
902 904 906 908 910 912 914 916 -915 0
c Encoding variable: x_00007_00008 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00007_00008' order represents '1' with '917'
c Var 'x_00007_00008' direct represents '1' with '917'
c Var 'x_00007_00008' order represents '2' with '918'
-917 918 0
c Var 'x_00007_00008' direct represents '2' with '919'
917 -918 919 0
-919 918 0
-919 -917 0
c Var 'x_00007_00008' order represents '3' with '920'
-918 920 0
c Var 'x_00007_00008' direct represents '3' with '921'
918 -920 921 0
-921 920 0
-921 -918 0
c Var 'x_00007_00008' order represents '4' with '922'
-920 922 0
c Var 'x_00007_00008' direct represents '4' with '923'
920 -922 923 0
-923 922 0
-923 -920 0
c Var 'x_00007_00008' order represents '5' with '924'
-922 924 0
c Var 'x_00007_00008' direct represents '5' with '925'
922 -924 925 0
-925 924 0
-925 -922 0
c Var 'x_00007_00008' order represents '6' with '926'
-924 926 0
c Var 'x_00007_00008' direct represents '6' with '927'
924 -926 927 0
-927 926 0
-927 -924 0
c Var 'x_00007_00008' order represents '7' with '928'
-926 928 0
c Var 'x_00007_00008' direct represents '7' with '929'
926 -928 929 0
-929 928 0
-929 -926 0
c Var 'x_00007_00008' order represents '8' with '930'
-928 930 0
c Var 'x_00007_00008' direct represents '8' with '931'
928 -930 931 0
-931 930 0
-931 -928 0
c Var 'x_00007_00008' direct represents '9' with '-930'
917 919 921 923 925 927 929 931 -930 0
c Encoding variable: x_00007_00009 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00007_00009' order represents '1' with '932'
c Var 'x_00007_00009' direct represents '1' with '932'
c Var 'x_00007_00009' order represents '2' with '933'
-932 933 0
c Var 'x_00007_00009' direct represents '2' with '934'
932 -933 934 0
-934 933 0
-934 -932 0
c Var 'x_00007_00009' order represents '3' with '935'
-933 935 0
c Var 'x_00007_00009' direct represents '3' with '936'
933 -935 936 0
-936 935 0
-936 -933 0
c Var 'x_00007_00009' order represents '4' with '937'
-935 937 0
c Var 'x_00007_00009' direct represents '4' with '938'
935 -937 938 0
-938 937 0
-938 -935 0
c Var 'x_00007_00009' order represents '5' with '939'
-937 939 0
c Var 'x_00007_00009' direct represents '5' with '940'
937 -939 940 0
-940 939 0
-940 -937 0
c Var 'x_00007_00009' order represents '6' with '941'
-939 941 0
c Var 'x_00007_00009' direct represents '6' with '942'
939 -941 942 0
-942 941 0
-942 -939 0
c Var 'x_00007_00009' order represents '7' with '943'
-941 943 0
c Var 'x_00007_00009' direct represents '7' with '944'
941 -943 944 0
-944 943 0
-944 -941 0
c Var 'x_00007_00009' order represents '8' with '945'
-943 945 0
c Var 'x_00007_00009' direct represents '8' with '946'
943 -945 946 0
-946 945 0
-946 -943 0
c Var 'x_00007_00009' direct represents '9' with '-945'
932 934 936 938 940 942 944 946 -945 0
c Encoding variable: x_00008_00001 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00008_00001' order represents '1' with '947'
c Var 'x_00008_00001' direct represents '1' with '947'
c Var 'x_00008_00001' order represents '2' with '948'
-947 948 0
c Var 'x_00008_00001' direct represents '2' with '949'
947 -948 949 0
-949 948 0
-949 -947 0
c Var 'x_00008_00001' order represents '3' with '950'
-948 950 0
c Var 'x_00008_00001' direct represents '3' with '951'
948 -950 951 0
-951 950 0
-951 -948 0
c Var 'x_00008_00001' order represents '4' with '952'
-950 952 0
c Var 'x_00008_00001' direct represents '4' with '953'
950 -952 953 0
-953 952 0
-953 -950 0
c Var 'x_00008_00001' order represents '5' with '954'
-952 954 0
c Var 'x_00008_00001' direct represents '5' with '955'
952 -954 955 0
-955 954 0
-955 -952 0
c Var 'x_00008_00001' order represents '6' with '956'
-954 956 0
c Var 'x_00008_00001' direct represents '6' with '957'
954 -956 957 0
-957 956 0
-957 -954 0
c Var 'x_00008_00001' order represents '7' with '958'
-956 958 0
c Var 'x_00008_00001' direct represents '7' with '959'
956 -958 959 0
-959 958 0
-959 -956 0
c Var 'x_00008_00001' order represents '8' with '960'
-958 960 0
c Var 'x_00008_00001' direct represents '8' with '961'
958 -960 961 0
-961 960 0
-961 -958 0
c Var 'x_00008_00001' direct represents '9' with '-960'
947 949 951 953 955 957 959 961 -960 0
c Encoding variable: x_00008_00002 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00008_00002' order represents '1' with '962'
c Var 'x_00008_00002' direct represents '1' with '962'
c Var 'x_00008_00002' order represents '2' with '963'
-962 963 0
c Var 'x_00008_00002' direct represents '2' with '964'
962 -963 964 0
-964 963 0
-964 -962 0
c Var 'x_00008_00002' order represents '3' with '965'
-963 965 0
c Var 'x_00008_00002' direct represents '3' with '966'
963 -965 966 0
-966 965 0
-966 -963 0
c Var 'x_00008_00002' order represents '4' with '967'
-965 967 0
c Var 'x_00008_00002' direct represents '4' with '968'
965 -967 968 0
-968 967 0
-968 -965 0
c Var 'x_00008_00002' order represents '5' with '969'
-967 969 0
c Var 'x_00008_00002' direct represents '5' with '970'
967 -969 970 0
-970 969 0
-970 -967 0
c Var 'x_00008_00002' order represents '6' with '971'
-969 971 0
c Var 'x_00008_00002' direct represents '6' with '972'
969 -971 972 0
-972 971 0
-972 -969 0
c Var 'x_00008_00002' order represents '7' with '973'
-971 973 0
c Var 'x_00008_00002' direct represents '7' with '974'
971 -973 974 0
-974 973 0
-974 -971 0
c Var 'x_00008_00002' order represents '8' with '975'
-973 975 0
c Var 'x_00008_00002' direct represents '8' with '976'
973 -975 976 0
-976 975 0
-976 -973 0
c Var 'x_00008_00002' direct represents '9' with '-975'
962 964 966 968 970 972 974 976 -975 0
c Encoding variable: x_00008_00003 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00008_00003' order represents '1' with '977'
c Var 'x_00008_00003' direct represents '1' with '977'
c Var 'x_00008_00003' order represents '2' with '978'
-977 978 0
c Var 'x_00008_00003' direct represents '2' with '979'
977 -978 979 0
-979 978 0
-979 -977 0
c Var 'x_00008_00003' order represents '3' with '980'
-978 980 0
c Var 'x_00008_00003' direct represents '3' with '981'
978 -980 981 0
-981 980 0
-981 -978 0
c Var 'x_00008_00003' order represents '4' with '982'
-980 982 0
c Var 'x_00008_00003' direct represents '4' with '983'
980 -982 983 0
-983 982 0
-983 -980 0
c Var 'x_00008_00003' order represents '5' with '984'
-982 984 0
c Var 'x_00008_00003' direct represents '5' with '985'
982 -984 985 0
-985 984 0
-985 -982 0
c Var 'x_00008_00003' order represents '6' with '986'
-984 986 0
c Var 'x_00008_00003' direct represents '6' with '987'
984 -986 987 0
-987 986 0
-987 -984 0
c Var 'x_00008_00003' order represents '7' with '988'
-986 988 0
c Var 'x_00008_00003' direct represents '7' with '989'
986 -988 989 0
-989 988 0
-989 -986 0
c Var 'x_00008_00003' order represents '8' with '990'
-988 990 0
c Var 'x_00008_00003' direct represents '8' with '991'
988 -990 991 0
-991 990 0
-991 -988 0
c Var 'x_00008_00003' direct represents '9' with '-990'
977 979 981 983 985 987 989 991 -990 0
c Encoding variable: x_00008_00004 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00008_00004' order represents '1' with '992'
c Var 'x_00008_00004' direct represents '1' with '992'
c Var 'x_00008_00004' order represents '2' with '993'
-992 993 0
c Var 'x_00008_00004' direct represents '2' with '994'
992 -993 994 0
-994 993 0
-994 -992 0
c Var 'x_00008_00004' order represents '3' with '995'
-993 995 0
c Var 'x_00008_00004' direct represents '3' with '996'
993 -995 996 0
-996 995 0
-996 -993 0
c Var 'x_00008_00004' order represents '4' with '997'
-995 997 0
c Var 'x_00008_00004' direct represents '4' with '998'
995 -997 998 0
-998 997 0
-998 -995 0
c Var 'x_00008_00004' order represents '5' with '999'
-997 999 0
c Var 'x_00008_00004' direct represents '5' with '1000'
997 -999 1000 0
-1000 999 0
-1000 -997 0
c Var 'x_00008_00004' order represents '6' with '1001'
-999 1001 0
c Var 'x_00008_00004' direct represents '6' with '1002'
999 -1001 1002 0
-1002 1001 0
-1002 -999 0
c Var 'x_00008_00004' order represents '7' with '1003'
-1001 1003 0
c Var 'x_00008_00004' direct represents '7' with '1004'
1001 -1003 1004 0
-1004 1003 0
-1004 -1001 0
c Var 'x_00008_00004' order represents '8' with '1005'
-1003 1005 0
c Var 'x_00008_00004' direct represents '8' with '1006'
1003 -1005 1006 0
-1006 1005 0
-1006 -1003 0
c Var 'x_00008_00004' direct represents '9' with '-1005'
992 994 996 998 1000 1002 1004 1006 -1005 0
c Encoding variable: x_00008_00005 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00008_00005' order represents '1' with '1007'
c Var 'x_00008_00005' direct represents '1' with '1007'
c Var 'x_00008_00005' order represents '2' with '1008'
-1007 1008 0
c Var 'x_00008_00005' direct represents '2' with '1009'
1007 -1008 1009 0
-1009 1008 0
-1009 -1007 0
c Var 'x_00008_00005' order represents '3' with '1010'
-1008 1010 0
c Var 'x_00008_00005' direct represents '3' with '1011'
1008 -1010 1011 0
-1011 1010 0
-1011 -1008 0
c Var 'x_00008_00005' order represents '4' with '1012'
-1010 1012 0
c Var 'x_00008_00005' direct represents '4' with '1013'
1010 -1012 1013 0
-1013 1012 0
-1013 -1010 0
c Var 'x_00008_00005' order represents '5' with '1014'
-1012 1014 0
c Var 'x_00008_00005' direct represents '5' with '1015'
1012 -1014 1015 0
-1015 1014 0
-1015 -1012 0
c Var 'x_00008_00005' order represents '6' with '1016'
-1014 1016 0
c Var 'x_00008_00005' direct represents '6' with '1017'
1014 -1016 1017 0
-1017 1016 0
-1017 -1014 0
c Var 'x_00008_00005' order represents '7' with '1018'
-1016 1018 0
c Var 'x_00008_00005' direct represents '7' with '1019'
1016 -1018 1019 0
-1019 1018 0
-1019 -1016 0
c Var 'x_00008_00005' order represents '8' with '1020'
-1018 1020 0
c Var 'x_00008_00005' direct represents '8' with '1021'
1018 -1020 1021 0
-1021 1020 0
-1021 -1018 0
c Var 'x_00008_00005' direct represents '9' with '-1020'
1007 1009 1011 1013 1015 1017 1019 1021 -1020 0
c Encoding variable: x_00008_00006 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00008_00006' order represents '1' with '1022'
c Var 'x_00008_00006' direct represents '1' with '1022'
c Var 'x_00008_00006' order represents '2' with '1023'
-1022 1023 0
c Var 'x_00008_00006' direct represents '2' with '1024'
1022 -1023 1024 0
-1024 1023 0
-1024 -1022 0
c Var 'x_00008_00006' order represents '3' with '1025'
-1023 1025 0
c Var 'x_00008_00006' direct represents '3' with '1026'
1023 -1025 1026 0
-1026 1025 0
-1026 -1023 0
c Var 'x_00008_00006' order represents '4' with '1027'
-1025 1027 0
c Var 'x_00008_00006' direct represents '4' with '1028'
1025 -1027 1028 0
-1028 1027 0
-1028 -1025 0
c Var 'x_00008_00006' order represents '5' with '1029'
-1027 1029 0
c Var 'x_00008_00006' direct represents '5' with '1030'
1027 -1029 1030 0
-1030 1029 0
-1030 -1027 0
c Var 'x_00008_00006' order represents '6' with '1031'
-1029 1031 0
c Var 'x_00008_00006' direct represents '6' with '1032'
1029 -1031 1032 0
-1032 1031 0
-1032 -1029 0
c Var 'x_00008_00006' order represents '7' with '1033'
-1031 1033 0
c Var 'x_00008_00006' direct represents '7' with '1034'
1031 -1033 1034 0
-1034 1033 0
-1034 -1031 0
c Var 'x_00008_00006' order represents '8' with '1035'
-1033 1035 0
c Var 'x_00008_00006' direct represents '8' with '1036'
1033 -1035 1036 0
-1036 1035 0
-1036 -1033 0
c Var 'x_00008_00006' direct represents '9' with '-1035'
1022 1024 1026 1028 1030 1032 1034 1036 -1035 0
c Encoding variable: x_00008_00007 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00008_00007' order represents '1' with '1037'
c Var 'x_00008_00007' direct represents '1' with '1037'
c Var 'x_00008_00007' order represents '2' with '1038'
-1037 1038 0
c Var 'x_00008_00007' direct represents '2' with '1039'
1037 -1038 1039 0
-1039 1038 0
-1039 -1037 0
c Var 'x_00008_00007' order represents '3' with '1040'
-1038 1040 0
c Var 'x_00008_00007' direct represents '3' with '1041'
1038 -1040 1041 0
-1041 1040 0
-1041 -1038 0
c Var 'x_00008_00007' order represents '4' with '1042'
-1040 1042 0
c Var 'x_00008_00007' direct represents '4' with '1043'
1040 -1042 1043 0
-1043 1042 0
-1043 -1040 0
c Var 'x_00008_00007' order represents '5' with '1044'
-1042 1044 0
c Var 'x_00008_00007' direct represents '5' with '1045'
1042 -1044 1045 0
-1045 1044 0
-1045 -1042 0
c Var 'x_00008_00007' order represents '6' with '1046'
-1044 1046 0
c Var 'x_00008_00007' direct represents '6' with '1047'
1044 -1046 1047 0
-1047 1046 0
-1047 -1044 0
c Var 'x_00008_00007' order represents '7' with '1048'
-1046 1048 0
c Var 'x_00008_00007' direct represents '7' with '1049'
1046 -1048 1049 0
-1049 1048 0
-1049 -1046 0
c Var 'x_00008_00007' order represents '8' with '1050'
-1048 1050 0
c Var 'x_00008_00007' direct represents '8' with '1051'
1048 -1050 1051 0
-1051 1050 0
-1051 -1048 0
c Var 'x_00008_00007' direct represents '9' with '-1050'
1037 1039 1041 1043 1045 1047 1049 1051 -1050 0
c Encoding variable: x_00008_00008 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00008_00008' order represents '1' with '1052'
c Var 'x_00008_00008' direct represents '1' with '1052'
c Var 'x_00008_00008' order represents '2' with '1053'
-1052 1053 0
c Var 'x_00008_00008' direct represents '2' with '1054'
1052 -1053 1054 0
-1054 1053 0
-1054 -1052 0
c Var 'x_00008_00008' order represents '3' with '1055'
-1053 1055 0
c Var 'x_00008_00008' direct represents '3' with '1056'
1053 -1055 1056 0
-1056 1055 0
-1056 -1053 0
c Var 'x_00008_00008' order represents '4' with '1057'
-1055 1057 0
c Var 'x_00008_00008' direct represents '4' with '1058'
1055 -1057 1058 0
-1058 1057 0
-1058 -1055 0
c Var 'x_00008_00008' order represents '5' with '1059'
-1057 1059 0
c Var 'x_00008_00008' direct represents '5' with '1060'
1057 -1059 1060 0
-1060 1059 0
-1060 -1057 0
c Var 'x_00008_00008' order represents '6' with '1061'
-1059 1061 0
c Var 'x_00008_00008' direct represents '6' with '1062'
1059 -1061 1062 0
-1062 1061 0
-1062 -1059 0
c Var 'x_00008_00008' order represents '7' with '1063'
-1061 1063 0
c Var 'x_00008_00008' direct represents '7' with '1064'
1061 -1063 1064 0
-1064 1063 0
-1064 -1061 0
c Var 'x_00008_00008' order represents '8' with '1065'
-1063 1065 0
c Var 'x_00008_00008' direct represents '8' with '1066'
1063 -1065 1066 0
-1066 1065 0
-1066 -1063 0
c Var 'x_00008_00008' direct represents '9' with '-1065'
1052 1054 1056 1058 1060 1062 1064 1066 -1065 0
c Encoding variable: x_00008_00009 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00008_00009' order represents '1' with '1067'
c Var 'x_00008_00009' direct represents '1' with '1067'
c Var 'x_00008_00009' order represents '2' with '1068'
-1067 1068 0
c Var 'x_00008_00009' direct represents '2' with '1069'
1067 -1068 1069 0
-1069 1068 0
-1069 -1067 0
c Var 'x_00008_00009' order represents '3' with '1070'
-1068 1070 0
c Var 'x_00008_00009' direct represents '3' with '1071'
1068 -1070 1071 0
-1071 1070 0
-1071 -1068 0
c Var 'x_00008_00009' order represents '4' with '1072'
-1070 1072 0
c Var 'x_00008_00009' direct represents '4' with '1073'
1070 -1072 1073 0
-1073 1072 0
-1073 -1070 0
c Var 'x_00008_00009' order represents '5' with '1074'
-1072 1074 0
c Var 'x_00008_00009' direct represents '5' with '1075'
1072 -1074 1075 0
-1075 1074 0
-1075 -1072 0
c Var 'x_00008_00009' order represents '6' with '1076'
-1074 1076 0
c Var 'x_00008_00009' direct represents '6' with '1077'
1074 -1076 1077 0
-1077 1076 0
-1077 -1074 0
c Var 'x_00008_00009' order represents '7' with '1078'
-1076 1078 0
c Var 'x_00008_00009' direct represents '7' with '1079'
1076 -1078 1079 0
-1079 1078 0
-1079 -1076 0
c Var 'x_00008_00009' order represents '8' with '1080'
-1078 1080 0
c Var 'x_00008_00009' direct represents '8' with '1081'
1078 -1080 1081 0
-1081 1080 0
-1081 -1078 0
c Var 'x_00008_00009' direct represents '9' with '-1080'
1067 1069 1071 1073 1075 1077 1079 1081 -1080 0
c Encoding variable: x_00009_00001 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00009_00001' order represents '1' with '1082'
c Var 'x_00009_00001' direct represents '1' with '1082'
c Var 'x_00009_00001' order represents '2' with '1083'
-1082 1083 0
c Var 'x_00009_00001' direct represents '2' with '1084'
1082 -1083 1084 0
-1084 1083 0
-1084 -1082 0
c Var 'x_00009_00001' order represents '3' with '1085'
-1083 1085 0
c Var 'x_00009_00001' direct represents '3' with '1086'
1083 -1085 1086 0
-1086 1085 0
-1086 -1083 0
c Var 'x_00009_00001' order represents '4' with '1087'
-1085 1087 0
c Var 'x_00009_00001' direct represents '4' with '1088'
1085 -1087 1088 0
-1088 1087 0
-1088 -1085 0
c Var 'x_00009_00001' order represents '5' with '1089'
-1087 1089 0
c Var 'x_00009_00001' direct represents '5' with '1090'
1087 -1089 1090 0
-1090 1089 0
-1090 -1087 0
c Var 'x_00009_00001' order represents '6' with '1091'
-1089 1091 0
c Var 'x_00009_00001' direct represents '6' with '1092'
1089 -1091 1092 0
-1092 1091 0
-1092 -1089 0
c Var 'x_00009_00001' order represents '7' with '1093'
-1091 1093 0
c Var 'x_00009_00001' direct represents '7' with '1094'
1091 -1093 1094 0
-1094 1093 0
-1094 -1091 0
c Var 'x_00009_00001' order represents '8' with '1095'
-1093 1095 0
c Var 'x_00009_00001' direct represents '8' with '1096'
1093 -1095 1096 0
-1096 1095 0
-1096 -1093 0
c Var 'x_00009_00001' direct represents '9' with '-1095'
1082 1084 1086 1088 1090 1092 1094 1096 -1095 0
c Encoding variable: x_00009_00002 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00009_00002' order represents '1' with '1097'
c Var 'x_00009_00002' direct represents '1' with '1097'
c Var 'x_00009_00002' order represents '2' with '1098'
-1097 1098 0
c Var 'x_00009_00002' direct represents '2' with '1099'
1097 -1098 1099 0
-1099 1098 0
-1099 -1097 0
c Var 'x_00009_00002' order represents '3' with '1100'
-1098 1100 0
c Var 'x_00009_00002' direct represents '3' with '1101'
1098 -1100 1101 0
-1101 1100 0
-1101 -1098 0
c Var 'x_00009_00002' order represents '4' with '1102'
-1100 1102 0
c Var 'x_00009_00002' direct represents '4' with '1103'
1100 -1102 1103 0
-1103 1102 0
-1103 -1100 0
c Var 'x_00009_00002' order represents '5' with '1104'
-1102 1104 0
c Var 'x_00009_00002' direct represents '5' with '1105'
1102 -1104 1105 0
-1105 1104 0
-1105 -1102 0
c Var 'x_00009_00002' order represents '6' with '1106'
-1104 1106 0
c Var 'x_00009_00002' direct represents '6' with '1107'
1104 -1106 1107 0
-1107 1106 0
-1107 -1104 0
c Var 'x_00009_00002' order represents '7' with '1108'
-1106 1108 0
c Var 'x_00009_00002' direct represents '7' with '1109'
1106 -1108 1109 0
-1109 1108 0
-1109 -1106 0
c Var 'x_00009_00002' order represents '8' with '1110'
-1108 1110 0
c Var 'x_00009_00002' direct represents '8' with '1111'
1108 -1110 1111 0
-1111 1110 0
-1111 -1108 0
c Var 'x_00009_00002' direct represents '9' with '-1110'
1097 1099 1101 1103 1105 1107 1109 1111 -1110 0
c Encoding variable: x_00009_00003 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00009_00003' order represents '1' with '1112'
c Var 'x_00009_00003' direct represents '1' with '1112'
c Var 'x_00009_00003' order represents '2' with '1113'
-1112 1113 0
c Var 'x_00009_00003' direct represents '2' with '1114'
1112 -1113 1114 0
-1114 1113 0
-1114 -1112 0
c Var 'x_00009_00003' order represents '3' with '1115'
-1113 1115 0
c Var 'x_00009_00003' direct represents '3' with '1116'
1113 -1115 1116 0
-1116 1115 0
-1116 -1113 0
c Var 'x_00009_00003' order represents '4' with '1117'
-1115 1117 0
c Var 'x_00009_00003' direct represents '4' with '1118'
1115 -1117 1118 0
-1118 1117 0
-1118 -1115 0
c Var 'x_00009_00003' order represents '5' with '1119'
-1117 1119 0
c Var 'x_00009_00003' direct represents '5' with '1120'
1117 -1119 1120 0
-1120 1119 0
-1120 -1117 0
c Var 'x_00009_00003' order represents '6' with '1121'
-1119 1121 0
c Var 'x_00009_00003' direct represents '6' with '1122'
1119 -1121 1122 0
-1122 1121 0
-1122 -1119 0
c Var 'x_00009_00003' order represents '7' with '1123'
-1121 1123 0
c Var 'x_00009_00003' direct represents '7' with '1124'
1121 -1123 1124 0
-1124 1123 0
-1124 -1121 0
c Var 'x_00009_00003' order represents '8' with '1125'
-1123 1125 0
c Var 'x_00009_00003' direct represents '8' with '1126'
1123 -1125 1126 0
-1126 1125 0
-1126 -1123 0
c Var 'x_00009_00003' direct represents '9' with '-1125'
1112 1114 1116 1118 1120 1122 1124 1126 -1125 0
c Encoding variable: x_00009_00004 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00009_00004' order represents '1' with '1127'
c Var 'x_00009_00004' direct represents '1' with '1127'
c Var 'x_00009_00004' order represents '2' with '1128'
-1127 1128 0
c Var 'x_00009_00004' direct represents '2' with '1129'
1127 -1128 1129 0
-1129 1128 0
-1129 -1127 0
c Var 'x_00009_00004' order represents '3' with '1130'
-1128 1130 0
c Var 'x_00009_00004' direct represents '3' with '1131'
1128 -1130 1131 0
-1131 1130 0
-1131 -1128 0
c Var 'x_00009_00004' order represents '4' with '1132'
-1130 1132 0
c Var 'x_00009_00004' direct represents '4' with '1133'
1130 -1132 1133 0
-1133 1132 0
-1133 -1130 0
c Var 'x_00009_00004' order represents '5' with '1134'
-1132 1134 0
c Var 'x_00009_00004' direct represents '5' with '1135'
1132 -1134 1135 0
-1135 1134 0
-1135 -1132 0
c Var 'x_00009_00004' order represents '6' with '1136'
-1134 1136 0
c Var 'x_00009_00004' direct represents '6' with '1137'
1134 -1136 1137 0
-1137 1136 0
-1137 -1134 0
c Var 'x_00009_00004' order represents '7' with '1138'
-1136 1138 0
c Var 'x_00009_00004' direct represents '7' with '1139'
1136 -1138 1139 0
-1139 1138 0
-1139 -1136 0
c Var 'x_00009_00004' order represents '8' with '1140'
-1138 1140 0
c Var 'x_00009_00004' direct represents '8' with '1141'
1138 -1140 1141 0
-1141 1140 0
-1141 -1138 0
c Var 'x_00009_00004' direct represents '9' with '-1140'
1127 1129 1131 1133 1135 1137 1139 1141 -1140 0
c Encoding variable: x_00009_00005 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00009_00005' order represents '1' with '1142'
c Var 'x_00009_00005' direct represents '1' with '1142'
c Var 'x_00009_00005' order represents '2' with '1143'
-1142 1143 0
c Var 'x_00009_00005' direct represents '2' with '1144'
1142 -1143 1144 0
-1144 1143 0
-1144 -1142 0
c Var 'x_00009_00005' order represents '3' with '1145'
-1143 1145 0
c Var 'x_00009_00005' direct represents '3' with '1146'
1143 -1145 1146 0
-1146 1145 0
-1146 -1143 0
c Var 'x_00009_00005' order represents '4' with '1147'
-1145 1147 0
c Var 'x_00009_00005' direct represents '4' with '1148'
1145 -1147 1148 0
-1148 1147 0
-1148 -1145 0
c Var 'x_00009_00005' order represents '5' with '1149'
-1147 1149 0
c Var 'x_00009_00005' direct represents '5' with '1150'
1147 -1149 1150 0
-1150 1149 0
-1150 -1147 0
c Var 'x_00009_00005' order represents '6' with '1151'
-1149 1151 0
c Var 'x_00009_00005' direct represents '6' with '1152'
1149 -1151 1152 0
-1152 1151 0
-1152 -1149 0
c Var 'x_00009_00005' order represents '7' with '1153'
-1151 1153 0
c Var 'x_00009_00005' direct represents '7' with '1154'
1151 -1153 1154 0
-1154 1153 0
-1154 -1151 0
c Var 'x_00009_00005' order represents '8' with '1155'
-1153 1155 0
c Var 'x_00009_00005' direct represents '8' with '1156'
1153 -1155 1156 0
-1156 1155 0
-1156 -1153 0
c Var 'x_00009_00005' direct represents '9' with '-1155'
1142 1144 1146 1148 1150 1152 1154 1156 -1155 0
c Encoding variable: x_00009_00006 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00009_00006' order represents '1' with '1157'
c Var 'x_00009_00006' direct represents '1' with '1157'
c Var 'x_00009_00006' order represents '2' with '1158'
-1157 1158 0
c Var 'x_00009_00006' direct represents '2' with '1159'
1157 -1158 1159 0
-1159 1158 0
-1159 -1157 0
c Var 'x_00009_00006' order represents '3' with '1160'
-1158 1160 0
c Var 'x_00009_00006' direct represents '3' with '1161'
1158 -1160 1161 0
-1161 1160 0
-1161 -1158 0
c Var 'x_00009_00006' order represents '4' with '1162'
-1160 1162 0
c Var 'x_00009_00006' direct represents '4' with '1163'
1160 -1162 1163 0
-1163 1162 0
-1163 -1160 0
c Var 'x_00009_00006' order represents '5' with '1164'
-1162 1164 0
c Var 'x_00009_00006' direct represents '5' with '1165'
1162 -1164 1165 0
-1165 1164 0
-1165 -1162 0
c Var 'x_00009_00006' order represents '6' with '1166'
-1164 1166 0
c Var 'x_00009_00006' direct represents '6' with '1167'
1164 -1166 1167 0
-1167 1166 0
-1167 -1164 0
c Var 'x_00009_00006' order represents '7' with '1168'
-1166 1168 0
c Var 'x_00009_00006' direct represents '7' with '1169'
1166 -1168 1169 0
-1169 1168 0
-1169 -1166 0
c Var 'x_00009_00006' order represents '8' with '1170'
-1168 1170 0
c Var 'x_00009_00006' direct represents '8' with '1171'
1168 -1170 1171 0
-1171 1170 0
-1171 -1168 0
c Var 'x_00009_00006' direct represents '9' with '-1170'
1157 1159 1161 1163 1165 1167 1169 1171 -1170 0
c Encoding variable: x_00009_00007 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00009_00007' order represents '1' with '1172'
c Var 'x_00009_00007' direct represents '1' with '1172'
c Var 'x_00009_00007' order represents '2' with '1173'
-1172 1173 0
c Var 'x_00009_00007' direct represents '2' with '1174'
1172 -1173 1174 0
-1174 1173 0
-1174 -1172 0
c Var 'x_00009_00007' order represents '3' with '1175'
-1173 1175 0
c Var 'x_00009_00007' direct represents '3' with '1176'
1173 -1175 1176 0
-1176 1175 0
-1176 -1173 0
c Var 'x_00009_00007' order represents '4' with '1177'
-1175 1177 0
c Var 'x_00009_00007' direct represents '4' with '1178'
1175 -1177 1178 0
-1178 1177 0
-1178 -1175 0
c Var 'x_00009_00007' order represents '5' with '1179'
-1177 1179 0
c Var 'x_00009_00007' direct represents '5' with '1180'
1177 -1179 1180 0
-1180 1179 0
-1180 -1177 0
c Var 'x_00009_00007' order represents '6' with '1181'
-1179 1181 0
c Var 'x_00009_00007' direct represents '6' with '1182'
1179 -1181 1182 0
-1182 1181 0
-1182 -1179 0
c Var 'x_00009_00007' order represents '7' with '1183'
-1181 1183 0
c Var 'x_00009_00007' direct represents '7' with '1184'
1181 -1183 1184 0
-1184 1183 0
-1184 -1181 0
c Var 'x_00009_00007' order represents '8' with '1185'
-1183 1185 0
c Var 'x_00009_00007' direct represents '8' with '1186'
1183 -1185 1186 0
-1186 1185 0
-1186 -1183 0
c Var 'x_00009_00007' direct represents '9' with '-1185'
1172 1174 1176 1178 1180 1182 1184 1186 -1185 0
c Encoding variable: x_00009_00008 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00009_00008' order represents '1' with '1187'
c Var 'x_00009_00008' direct represents '1' with '1187'
c Var 'x_00009_00008' order represents '2' with '1188'
-1187 1188 0
c Var 'x_00009_00008' direct represents '2' with '1189'
1187 -1188 1189 0
-1189 1188 0
-1189 -1187 0
c Var 'x_00009_00008' order represents '3' with '1190'
-1188 1190 0
c Var 'x_00009_00008' direct represents '3' with '1191'
1188 -1190 1191 0
-1191 1190 0
-1191 -1188 0
c Var 'x_00009_00008' order represents '4' with '1192'
-1190 1192 0
c Var 'x_00009_00008' direct represents '4' with '1193'
1190 -1192 1193 0
-1193 1192 0
-1193 -1190 0
c Var 'x_00009_00008' order represents '5' with '1194'
-1192 1194 0
c Var 'x_00009_00008' direct represents '5' with '1195'
1192 -1194 1195 0
-1195 1194 0
-1195 -1192 0
c Var 'x_00009_00008' order represents '6' with '1196'
-1194 1196 0
c Var 'x_00009_00008' direct represents '6' with '1197'
1194 -1196 1197 0
-1197 1196 0
-1197 -1194 0
c Var 'x_00009_00008' order represents '7' with '1198'
-1196 1198 0
c Var 'x_00009_00008' direct represents '7' with '1199'
1196 -1198 1199 0
-1199 1198 0
-1199 -1196 0
c Var 'x_00009_00008' order represents '8' with '1200'
-1198 1200 0
c Var 'x_00009_00008' direct represents '8' with '1201'
1198 -1200 1201 0
-1201 1200 0
-1201 -1198 0
c Var 'x_00009_00008' direct represents '9' with '-1200'
1187 1189 1191 1193 1195 1197 1199 1201 -1200 0
c Encoding variable: x_00009_00009 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00009_00009' order represents '1' with '1202'
c Var 'x_00009_00009' direct represents '1' with '1202'
c Var 'x_00009_00009' order represents '2' with '1203'
-1202 1203 0
c Var 'x_00009_00009' direct represents '2' with '1204'
1202 -1203 1204 0
-1204 1203 0
-1204 -1202 0
c Var 'x_00009_00009' order represents '3' with '1205'
-1203 1205 0
c Var 'x_00009_00009' direct represents '3' with '1206'
1203 -1205 1206 0
-1206 1205 0
-1206 -1203 0
c Var 'x_00009_00009' order represents '4' with '1207'
-1205 1207 0
c Var 'x_00009_00009' direct represents '4' with '1208'
1205 -1207 1208 0
-1208 1207 0
-1208 -1205 0
c Var 'x_00009_00009' order represents '5' with '1209'
-1207 1209 0
c Var 'x_00009_00009' direct represents '5' with '1210'
1207 -1209 1210 0
-1210 1209 0
-1210 -1207 0
c Var 'x_00009_00009' order represents '6' with '1211'
-1209 1211 0
c Var 'x_00009_00009' direct represents '6' with '1212'
1209 -1211 1212 0
-1212 1211 0
-1212 -1209 0
c Var 'x_00009_00009' order represents '7' with '1213'
-1211 1213 0
c Var 'x_00009_00009' direct represents '7' with '1214'
1211 -1213 1214 0
-1214 1213 0
-1214 -1211 0
c Var 'x_00009_00009' order represents '8' with '1215'
-1213 1215 0
c Var 'x_00009_00009' direct represents '8' with '1216'
1213 -1215 1216 0
-1216 1215 0
-1216 -1213 0
c Var 'x_00009_00009' direct represents '9' with '-1215'
1202 1204 1206 1208 1210 1212 1214 1216 -1215 0
c Encoding variable: alldiff_row_00001 with domain: bool (representing constraint )
c Var 'alldiff_row_00001' direct represents '0' with '-1217'
c Var 'alldiff_row_00001' direct represents '1' with '1217'
c Var 'alldiff_row_00001' order represents '1' with '1'
c Var 'alldiff_row_00001' order represents '0' with '-1217'
c Encoding variable: alldiff_row_00002 with domain: bool (representing constraint )
c Var 'alldiff_row_00002' direct represents '0' with '-1218'
c Var 'alldiff_row_00002' direct represents '1' with '1218'
c Var 'alldiff_row_00002' order represents '1' with '1'
c Var 'alldiff_row_00002' order represents '0' with '-1218'
c Encoding variable: alldiff_row_00003 with domain: bool (representing constraint )
c Var 'alldiff_row_00003' direct represents '0' with '-1219'
c Var 'alldiff_row_00003' direct represents '1' with '1219'
c Var 'alldiff_row_00003' order represents '1' with '1'
c Var 'alldiff_row_00003' order represents '0' with '-1219'
c Encoding variable: alldiff_row_00004 with domain: bool (representing constraint )
c Var 'alldiff_row_00004' direct represents '0' with '-1220'
c Var 'alldiff_row_00004' direct represents '1' with '1220'
c Var 'alldiff_row_00004' order represents '1' with '1'
c Var 'alldiff_row_00004' order represents '0' with '-1220'
c Encoding variable: alldiff_row_00005 with domain: bool (representing constraint )
c Var 'alldiff_row_00005' direct represents '0' with '-1221'
c Var 'alldiff_row_00005' direct represents '1' with '1221'
c Var 'alldiff_row_00005' order represents '1' with '1'
c Var 'alldiff_row_00005' order represents '0' with '-1221'
c Encoding variable: alldiff_row_00006 with domain: bool (representing constraint )
c Var 'alldiff_row_00006' direct represents '0' with '-1222'
c Var 'alldiff_row_00006' direct represents '1' with '1222'
c Var 'alldiff_row_00006' order represents '1' with '1'
c Var 'alldiff_row_00006' order represents '0' with '-1222'
c Encoding variable: alldiff_row_00007 with domain: bool (representing constraint )
c Var 'alldiff_row_00007' direct represents '0' with '-1223'
c Var 'alldiff_row_00007' direct represents '1' with '1223'
c Var 'alldiff_row_00007' order represents '1' with '1'
c Var 'alldiff_row_00007' order represents '0' with '-1223'
c Encoding variable: alldiff_row_00008 with domain: bool (representing constraint )
c Var 'alldiff_row_00008' direct represents '0' with '-1224'
c Var 'alldiff_row_00008' direct represents '1' with '1224'
c Var 'alldiff_row_00008' order represents '1' with '1'
c Var 'alldiff_row_00008' order represents '0' with '-1224'
c Encoding variable: alldiff_row_00009 with domain: bool (representing constraint )
c Var 'alldiff_row_00009' direct represents '0' with '-1225'
c Var 'alldiff_row_00009' direct represents '1' with '1225'
c Var 'alldiff_row_00009' order represents '1' with '1'
c Var 'alldiff_row_00009' order represents '0' with '-1225'
c Encoding variable: alldiff_col_00001 with domain: bool (representing constraint )
c Var 'alldiff_col_00001' direct represents '0' with '-1226'
c Var 'alldiff_col_00001' direct represents '1' with '1226'
c Var 'alldiff_col_00001' order represents '1' with '1'
c Var 'alldiff_col_00001' order represents '0' with '-1226'
c Encoding variable: alldiff_col_00002 with domain: bool (representing constraint )
c Var 'alldiff_col_00002' direct represents '0' with '-1227'
c Var 'alldiff_col_00002' direct represents '1' with '1227'
c Var 'alldiff_col_00002' order represents '1' with '1'
c Var 'alldiff_col_00002' order represents '0' with '-1227'
c Encoding variable: alldiff_col_00003 with domain: bool (representing constraint )
c Var 'alldiff_col_00003' direct represents '0' with '-1228'
c Var 'alldiff_col_00003' direct represents '1' with '1228'
c Var 'alldiff_col_00003' order represents '1' with '1'
c Var 'alldiff_col_00003' order represents '0' with '-1228'
c Encoding variable: alldiff_col_00004 with domain: bool (representing constraint )
c Var 'alldiff_col_00004' direct represents '0' with '-1229'
c Var 'alldiff_col_00004' direct represents '1' with '1229'
c Var 'alldiff_col_00004' order represents '1' with '1'
c Var 'alldiff_col_00004' order represents '0' with '-1229'
c Encoding variable: alldiff_col_00005 with domain: bool (representing constraint )
c Var 'alldiff_col_00005' direct represents '0' with '-1230'
c Var 'alldiff_col_00005' direct represents '1' with '1230'
c Var 'alldiff_col_00005' order represents '1' with '1'
c Var 'alldiff_col_00005' order represents '0' with '-1230'
c Encoding variable: alldiff_col_00006 with domain: bool (representing constraint )
c Var 'alldiff_col_00006' direct represents '0' with '-1231'
c Var 'alldiff_col_00006' direct represents '1' with '1231'
c Var 'alldiff_col_00006' order represents '1' with '1'
c Var 'alldiff_col_00006' order represents '0' with '-1231'
c Encoding variable: alldiff_col_00007 with domain: bool (representing constraint )
c Var 'alldiff_col_00007' direct represents '0' with '-1232'
c Var 'alldiff_col_00007' direct represents '1' with '1232'
c Var 'alldiff_col_00007' order represents '1' with '1'
c Var 'alldiff_col_00007' order represents '0' with '-1232'
c Encoding variable: alldiff_col_00008 with domain: bool (representing constraint )
c Var 'alldiff_col_00008' direct represents '0' with '-1233'
c Var 'alldiff_col_00008' direct represents '1' with '1233'
c Var 'alldiff_col_00008' order represents '1' with '1'
c Var 'alldiff_col_00008' order represents '0' with '-1233'
c Encoding variable: alldiff_col_00009 with domain: bool (representing constraint )
c Var 'alldiff_col_00009' direct represents '0' with '-1234'
c Var 'alldiff_col_00009' direct represents '1' with '1234'
c Var 'alldiff_col_00009' order represents '1' with '1'
c Var 'alldiff_col_00009' order represents '0' with '-1234'
c Encoding variable: alldiff_box_00001 with domain: bool (representing constraint )
c Var 'alldiff_box_00001' direct represents '0' with '-1235'
c Var 'alldiff_box_00001' direct represents '1' with '1235'
c Var 'alldiff_box_00001' order represents '1' with '1'
c Var 'alldiff_box_00001' order represents '0' with '-1235'
c Encoding variable: alldiff_box_00002 with domain: bool (representing constraint )
c Var 'alldiff_box_00002' direct represents '0' with '-1236'
c Var 'alldiff_box_00002' direct represents '1' with '1236'
c Var 'alldiff_box_00002' order represents '1' with '1'
c Var 'alldiff_box_00002' order represents '0' with '-1236'
c Encoding variable: alldiff_box_00003 with domain: bool (representing constraint )
c Var 'alldiff_box_00003' direct represents '0' with '-1237'
c Var 'alldiff_box_00003' direct represents '1' with '1237'
c Var 'alldiff_box_00003' order represents '1' with '1'
c Var 'alldiff_box_00003' order represents '0' with '-1237'
c Encoding variable: alldiff_box_00004 with domain: bool (representing constraint )
c Var 'alldiff_box_00004' direct represents '0' with '-1238'
c Var 'alldiff_box_00004' direct represents '1' with '1238'
c Var 'alldiff_box_00004' order represents '1' with '1'
c Var 'alldiff_box_00004' order represents '0' with '-1238'
c Encoding variable: alldiff_box_00005 with domain: bool (representing constraint )
c Var 'alldiff_box_00005' direct represents '0' with '-1239'
c Var 'alldiff_box_00005' direct represents '1' with '1239'
c Var 'alldiff_box_00005' order represents '1' with '1'
c Var 'alldiff_box_00005' order represents '0' with '-1239'
c Encoding variable: alldiff_box_00006 with domain: bool (representing constraint )
c Var 'alldiff_box_00006' direct represents '0' with '-1240'
c Var 'alldiff_box_00006' direct represents '1' with '1240'
c Var 'alldiff_box_00006' order represents '1' with '1'
c Var 'alldiff_box_00006' order represents '0' with '-1240'
c Encoding variable: alldiff_box_00007 with domain: bool (representing constraint )
c Var 'alldiff_box_00007' direct represents '0' with '-1241'
c Var 'alldiff_box_00007' direct represents '1' with '1241'
c Var 'alldiff_box_00007' order represents '1' with '1'
c Var 'alldiff_box_00007' order represents '0' with '-1241'
c Encoding variable: alldiff_box_00008 with domain: bool (representing constraint )
c Var 'alldiff_box_00008' direct represents '0' with '-1242'
c Var 'alldiff_box_00008' direct represents '1' with '1242'
c Var 'alldiff_box_00008' order represents '1' with '1'
c Var 'alldiff_box_00008' order represents '0' with '-1242'
c Encoding variable: alldiff_box_00009 with domain: bool (representing constraint )
c Var 'alldiff_box_00009' direct represents '0' with '-1243'
c Var 'alldiff_box_00009' direct represents '1' with '1243'
c Var 'alldiff_box_00009' order represents '1' with '1'
c Var 'alldiff_box_00009' order represents '0' with '-1243'
c Encoding variable: alldiff_hint_00001 with domain: bool (representing constraint )
c Var 'alldiff_hint_00001' direct represents '0' with '-1244'
c Var 'alldiff_hint_00001' direct represents '1' with '1244'
c Var 'alldiff_hint_00001' order represents '1' with '1'
c Var 'alldiff_hint_00001' order represents '0' with '-1244'
c Encoding variable: alldiff_hint_00002 with domain: bool (representing constraint )
c Var 'alldiff_hint_00002' direct represents '0' with '-1245'
c Var 'alldiff_hint_00002' direct represents '1' with '1245'
c Var 'alldiff_hint_00002' order represents '1' with '1'
c Var 'alldiff_hint_00002' order represents '0' with '-1245'
c Encoding variable: alldiff_hint_00003 with domain: bool (representing constraint )
c Var 'alldiff_hint_00003' direct represents '0' with '-1246'
c Var 'alldiff_hint_00003' direct represents '1' with '1246'
c Var 'alldiff_hint_00003' order represents '1' with '1'
c Var 'alldiff_hint_00003' order represents '0' with '-1246'
c Encoding variable: alldiff_hint_00004 with domain: bool (representing constraint )
c Var 'alldiff_hint_00004' direct represents '0' with '-1247'
c Var 'alldiff_hint_00004' direct represents '1' with '1247'
c Var 'alldiff_hint_00004' order represents '1' with '1'
c Var 'alldiff_hint_00004' order represents '0' with '-1247'
c Encoding variable: alldiff_hint_00005 with domain: bool (representing constraint )
c Var 'alldiff_hint_00005' direct represents '0' with '-1248'
c Var 'alldiff_hint_00005' direct represents '1' with '1248'
c Var 'alldiff_hint_00005' order represents '1' with '1'
c Var 'alldiff_hint_00005' order represents '0' with '-1248'
c Encoding variable: alldiff_hint_00006 with domain: bool (representing constraint )
c Var 'alldiff_hint_00006' direct represents '0' with '-1249'
c Var 'alldiff_hint_00006' direct represents '1' with '1249'
c Var 'alldiff_hint_00006' order represents '1' with '1'
c Var 'alldiff_hint_00006' order represents '0' with '-1249'
c Encoding variable: alldiff_hint_00007 with domain: bool (representing constraint )
c Var 'alldiff_hint_00007' direct represents '0' with '-1250'
c Var 'alldiff_hint_00007' direct represents '1' with '1250'
c Var 'alldiff_hint_00007' order represents '1' with '1'
c Var 'alldiff_hint_00007' order represents '0' with '-1250'
c Encoding variable: alldiff_hint_00008 with domain: bool (representing constraint )
c Var 'alldiff_hint_00008' direct represents '0' with '-1251'
c Var 'alldiff_hint_00008' direct represents '1' with '1251'
c Var 'alldiff_hint_00008' order represents '1' with '1'
c Var 'alldiff_hint_00008' order represents '0' with '-1251'
c Encoding variable: alldiff_hint_00009 with domain: bool (representing constraint )
c Var 'alldiff_hint_00009' direct represents '0' with '-1252'
c Var 'alldiff_hint_00009' direct represents '1' with '1252'
c Var 'alldiff_hint_00009' order represents '1' with '1'
c Var 'alldiff_hint_00009' order represents '0' with '-1252'
c Encoding variable: alldiff_hint_00010 with domain: bool (representing constraint )
c Var 'alldiff_hint_00010' direct represents '0' with '-1253'
c Var 'alldiff_hint_00010' direct represents '1' with '1253'
c Var 'alldiff_hint_00010' order represents '1' with '1'
c Var 'alldiff_hint_00010' order represents '0' with '-1253'
c Encoding variable: alldiff_hint_00011 with domain: bool (representing constraint )
c Var 'alldiff_hint_00011' direct represents '0' with '-1254'
c Var 'alldiff_hint_00011' direct represents '1' with '1254'
c Var 'alldiff_hint_00011' order represents '1' with '1'
c Var 'alldiff_hint_00011' order represents '0' with '-1254'
c Encoding variable: alldiff_hint_00012 with domain: bool (representing constraint )
c Var 'alldiff_hint_00012' direct represents '0' with '-1255'
c Var 'alldiff_hint_00012' direct represents '1' with '1255'
c Var 'alldiff_hint_00012' order represents '1' with '1'
c Var 'alldiff_hint_00012' order represents '0' with '-1255'
c Encoding variable: alldiff_hint_00013 with domain: bool (representing constraint )
c Var 'alldiff_hint_00013' direct represents '0' with '-1256'
c Var 'alldiff_hint_00013' direct represents '1' with '1256'
c Var 'alldiff_hint_00013' order represents '1' with '1'
c Var 'alldiff_hint_00013' order represents '0' with '-1256'
c Encoding variable: alldiff_hint_00014 with domain: bool (representing constraint )
c Var 'alldiff_hint_00014' direct represents '0' with '-1257'
c Var 'alldiff_hint_00014' direct represents '1' with '1257'
c Var 'alldiff_hint_00014' order represents '1' with '1'
c Var 'alldiff_hint_00014' order represents '0' with '-1257'
c Encoding variable: alldiff_hint_00015 with domain: bool (representing constraint )
c Var 'alldiff_hint_00015' direct represents '0' with '-1258'
c Var 'alldiff_hint_00015' direct represents '1' with '1258'
c Var 'alldiff_hint_00015' order represents '1' with '1'
c Var 'alldiff_hint_00015' order represents '0' with '-1258'
c Encoding variable: alldiff_hint_00016 with domain: bool (representing constraint )
c Var 'alldiff_hint_00016' direct represents '0' with '-1259'
c Var 'alldiff_hint_00016' direct represents '1' with '1259'
c Var 'alldiff_hint_00016' order represents '1' with '1'
c Var 'alldiff_hint_00016' order represents '0' with '-1259'
c Encoding variable: alldiff_hint_00017 with domain: bool (representing constraint )
c Var 'alldiff_hint_00017' direct represents '0' with '-1260'
c Var 'alldiff_hint_00017' direct represents '1' with '1260'
c Var 'alldiff_hint_00017' order represents '1' with '1'
c Var 'alldiff_hint_00017' order represents '0' with '-1260'
c Encoding variable: alldiff_hint_00018 with domain: bool (representing constraint )
c Var 'alldiff_hint_00018' direct represents '0' with '-1261'
c Var 'alldiff_hint_00018' direct represents '1' with '1261'
c Var 'alldiff_hint_00018' order represents '1' with '1'
c Var 'alldiff_hint_00018' order represents '0' with '-1261'
c Encoding variable: alldiff_hint_00019 with domain: bool (representing constraint )
c Var 'alldiff_hint_00019' direct represents '0' with '-1262'
c Var 'alldiff_hint_00019' direct represents '1' with '1262'
c Var 'alldiff_hint_00019' order represents '1' with '1'
c Var 'alldiff_hint_00019' order represents '0' with '-1262'
c Encoding variable: alldiff_hint_00020 with domain: bool (representing constraint )
c Var 'alldiff_hint_00020' direct represents '0' with '-1263'
c Var 'alldiff_hint_00020' direct represents '1' with '1263'
c Var 'alldiff_hint_00020' order represents '1' with '1'
c Var 'alldiff_hint_00020' order represents '0' with '-1263'
c Encoding variable: alldiff_hint_00021 with domain: bool (representing constraint )
c Var 'alldiff_hint_00021' direct represents '0' with '-1264'
c Var 'alldiff_hint_00021' direct represents '1' with '1264'
c Var 'alldiff_hint_00021' order represents '1' with '1'
c Var 'alldiff_hint_00021' order represents '0' with '-1264'
c Encoding variable: alldiff_hint_00022 with domain: bool (representing constraint )
c Var 'alldiff_hint_00022' direct represents '0' with '-1265'
c Var 'alldiff_hint_00022' direct represents '1' with '1265'
c Var 'alldiff_hint_00022' order represents '1' with '1'
c Var 'alldiff_hint_00022' order represents '0' with '-1265'
c Encoding variable: alldiff_hint_00023 with domain: bool (representing constraint )
c Var 'alldiff_hint_00023' direct represents '0' with '-1266'
c Var 'alldiff_hint_00023' direct represents '1' with '1266'
c Var 'alldiff_hint_00023' order represents '1' with '1'
c Var 'alldiff_hint_00023' order represents '0' with '-1266'
c Encoding variable: alldiff_hint_00024 with domain: bool (representing constraint )
c Var 'alldiff_hint_00024' direct represents '0' with '-1267'
c Var 'alldiff_hint_00024' direct represents '1' with '1267'
c Var 'alldiff_hint_00024' order represents '1' with '1'
c Var 'alldiff_hint_00024' order represents '0' with '-1267'
c Encoding variable: alldiff_hint_00025 with domain: bool (representing constraint )
c Var 'alldiff_hint_00025' direct represents '0' with '-1268'
c Var 'alldiff_hint_00025' direct represents '1' with '1268'
c Var 'alldiff_hint_00025' order represents '1' with '1'
c Var 'alldiff_hint_00025' order represents '0' with '-1268'
c Encoding variable: alldiff_hint_00026 with domain: bool (representing constraint )
c Var 'alldiff_hint_00026' direct represents '0' with '-1269'
c Var 'alldiff_hint_00026' direct represents '1' with '1269'
c Var 'alldiff_hint_00026' order represents '1' with '1'
c Var 'alldiff_hint_00026' order represents '0' with '-1269'
c Encoding variable: alldiff_hint_00027 with domain: bool (representing constraint )
c Var 'alldiff_hint_00027' direct represents '0' with '-1270'
c Var 'alldiff_hint_00027' direct represents '1' with '1270'
c Var 'alldiff_hint_00027' order represents '1' with '1'
c Var 'alldiff_hint_00027' order represents '0' with '-1270'
c Encoding variable: alldiff_hint_00028 with domain: bool (representing constraint )
c Var 'alldiff_hint_00028' direct represents '0' with '-1271'
c Var 'alldiff_hint_00028' direct represents '1' with '1271'
c Var 'alldiff_hint_00028' order represents '1' with '1'
c Var 'alldiff_hint_00028' order represents '0' with '-1271'
c Encoding variable: alldiff_hint_00029 with domain: bool (representing constraint )
c Var 'alldiff_hint_00029' direct represents '0' with '-1272'
c Var 'alldiff_hint_00029' direct represents '1' with '1272'
c Var 'alldiff_hint_00029' order represents '1' with '1'
c Var 'alldiff_hint_00029' order represents '0' with '-1272'
c Encoding variable: sum_hint_00001 with domain: bool (representing constraint )
c Var 'sum_hint_00001' direct represents '0' with '-1273'
c Var 'sum_hint_00001' direct represents '1' with '1273'
c Var 'sum_hint_00001' order represents '1' with '1'
c Var 'sum_hint_00001' order represents '0' with '-1273'
c Encoding variable: sum_hint_00002 with domain: bool (representing constraint )
c Var 'sum_hint_00002' direct represents '0' with '-1274'
c Var 'sum_hint_00002' direct represents '1' with '1274'
c Var 'sum_hint_00002' order represents '1' with '1'
c Var 'sum_hint_00002' order represents '0' with '-1274'
c Encoding variable: sum_hint_00003 with domain: bool (representing constraint )
c Var 'sum_hint_00003' direct represents '0' with '-1275'
c Var 'sum_hint_00003' direct represents '1' with '1275'
c Var 'sum_hint_00003' order represents '1' with '1'
c Var 'sum_hint_00003' order represents '0' with '-1275'
c Encoding variable: sum_hint_00004 with domain: bool (representing constraint )
c Var 'sum_hint_00004' direct represents '0' with '-1276'
c Var 'sum_hint_00004' direct represents '1' with '1276'
c Var 'sum_hint_00004' order represents '1' with '1'
c Var 'sum_hint_00004' order represents '0' with '-1276'
c Encoding variable: sum_hint_00005 with domain: bool (representing constraint )
c Var 'sum_hint_00005' direct represents '0' with '-1277'
c Var 'sum_hint_00005' direct represents '1' with '1277'
c Var 'sum_hint_00005' order represents '1' with '1'
c Var 'sum_hint_00005' order represents '0' with '-1277'
c Encoding variable: sum_hint_00006 with domain: bool (representing constraint )
c Var 'sum_hint_00006' direct represents '0' with '-1278'
c Var 'sum_hint_00006' direct represents '1' with '1278'
c Var 'sum_hint_00006' order represents '1' with '1'
c Var 'sum_hint_00006' order represents '0' with '-1278'
c Encoding variable: sum_hint_00007 with domain: bool (representing constraint )
c Var 'sum_hint_00007' direct represents '0' with '-1279'
c Var 'sum_hint_00007' direct represents '1' with '1279'
c Var 'sum_hint_00007' order represents '1' with '1'
c Var 'sum_hint_00007' order represents '0' with '-1279'
c Encoding variable: sum_hint_00008 with domain: bool (representing constraint )
c Var 'sum_hint_00008' direct represents '0' with '-1280'
c Var 'sum_hint_00008' direct represents '1' with '1280'
c Var 'sum_hint_00008' order represents '1' with '1'
c Var 'sum_hint_00008' order represents '0' with '-1280'
c Encoding variable: sum_hint_00009 with domain: bool (representing constraint )
c Var 'sum_hint_00009' direct represents '0' with '-1281'
c Var 'sum_hint_00009' direct represents '1' with '1281'
c Var 'sum_hint_00009' order represents '1' with '1'
c Var 'sum_hint_00009' order represents '0' with '-1281'
c Encoding variable: sum_hint_00010 with domain: bool (representing constraint )
c Var 'sum_hint_00010' direct represents '0' with '-1282'
c Var 'sum_hint_00010' direct represents '1' with '1282'
c Var 'sum_hint_00010' order represents '1' with '1'
c Var 'sum_hint_00010' order represents '0' with '-1282'
c Encoding variable: sum_hint_00011 with domain: bool (representing constraint )
c Var 'sum_hint_00011' direct represents '0' with '-1283'
c Var 'sum_hint_00011' direct represents '1' with '1283'
c Var 'sum_hint_00011' order represents '1' with '1'
c Var 'sum_hint_00011' order represents '0' with '-1283'
c Encoding variable: sum_hint_00012 with domain: bool (representing constraint )
c Var 'sum_hint_00012' direct represents '0' with '-1284'
c Var 'sum_hint_00012' direct represents '1' with '1284'
c Var 'sum_hint_00012' order represents '1' with '1'
c Var 'sum_hint_00012' order represents '0' with '-1284'
c Encoding variable: sum_hint_00013 with domain: bool (representing constraint )
c Var 'sum_hint_00013' direct represents '0' with '-1285'
c Var 'sum_hint_00013' direct represents '1' with '1285'
c Var 'sum_hint_00013' order represents '1' with '1'
c Var 'sum_hint_00013' order represents '0' with '-1285'
c Encoding variable: sum_hint_00014 with domain: bool (representing constraint )
c Var 'sum_hint_00014' direct represents '0' with '-1286'
c Var 'sum_hint_00014' direct represents '1' with '1286'
c Var 'sum_hint_00014' order represents '1' with '1'
c Var 'sum_hint_00014' order represents '0' with '-1286'
c Encoding variable: sum_hint_00015 with domain: bool (representing constraint )
c Var 'sum_hint_00015' direct represents '0' with '-1287'
c Var 'sum_hint_00015' direct represents '1' with '1287'
c Var 'sum_hint_00015' order represents '1' with '1'
c Var 'sum_hint_00015' order represents '0' with '-1287'
c Encoding variable: sum_hint_00016 with domain: bool (representing constraint )
c Var 'sum_hint_00016' direct represents '0' with '-1288'
c Var 'sum_hint_00016' direct represents '1' with '1288'
c Var 'sum_hint_00016' order represents '1' with '1'
c Var 'sum_hint_00016' order represents '0' with '-1288'
c Encoding variable: sum_hint_00017 with domain: bool (representing constraint )
c Var 'sum_hint_00017' direct represents '0' with '-1289'
c Var 'sum_hint_00017' direct represents '1' with '1289'
c Var 'sum_hint_00017' order represents '1' with '1'
c Var 'sum_hint_00017' order represents '0' with '-1289'
c Encoding variable: sum_hint_00018 with domain: bool (representing constraint )
c Var 'sum_hint_00018' direct represents '0' with '-1290'
c Var 'sum_hint_00018' direct represents '1' with '1290'
c Var 'sum_hint_00018' order represents '1' with '1'
c Var 'sum_hint_00018' order represents '0' with '-1290'
c Encoding variable: sum_hint_00019 with domain: bool (representing constraint )
c Var 'sum_hint_00019' direct represents '0' with '-1291'
c Var 'sum_hint_00019' direct represents '1' with '1291'
c Var 'sum_hint_00019' order represents '1' with '1'
c Var 'sum_hint_00019' order represents '0' with '-1291'
c Encoding variable: sum_hint_00020 with domain: bool (representing constraint )
c Var 'sum_hint_00020' direct represents '0' with '-1292'
c Var 'sum_hint_00020' direct represents '1' with '1292'
c Var 'sum_hint_00020' order represents '1' with '1'
c Var 'sum_hint_00020' order represents '0' with '-1292'
c Encoding variable: sum_hint_00021 with domain: bool (representing constraint )
c Var 'sum_hint_00021' direct represents '0' with '-1293'
c Var 'sum_hint_00021' direct represents '1' with '1293'
c Var 'sum_hint_00021' order represents '1' with '1'
c Var 'sum_hint_00021' order represents '0' with '-1293'
c Encoding variable: sum_hint_00022 with domain: bool (representing constraint )
c Var 'sum_hint_00022' direct represents '0' with '-1294'
c Var 'sum_hint_00022' direct represents '1' with '1294'
c Var 'sum_hint_00022' order represents '1' with '1'
c Var 'sum_hint_00022' order represents '0' with '-1294'
c Encoding variable: sum_hint_00023 with domain: bool (representing constraint )
c Var 'sum_hint_00023' direct represents '0' with '-1295'
c Var 'sum_hint_00023' direct represents '1' with '1295'
c Var 'sum_hint_00023' order represents '1' with '1'
c Var 'sum_hint_00023' order represents '0' with '-1295'
c Encoding variable: sum_hint_00024 with domain: bool (representing constraint )
c Var 'sum_hint_00024' direct represents '0' with '-1296'
c Var 'sum_hint_00024' direct represents '1' with '1296'
c Var 'sum_hint_00024' order represents '1' with '1'
c Var 'sum_hint_00024' order represents '0' with '-1296'
c Encoding variable: sum_hint_00025 with domain: bool (representing constraint )
c Var 'sum_hint_00025' direct represents '0' with '-1297'
c Var 'sum_hint_00025' direct represents '1' with '1297'
c Var 'sum_hint_00025' order represents '1' with '1'
c Var 'sum_hint_00025' order represents '0' with '-1297'
c Encoding variable: sum_hint_00026 with domain: bool (representing constraint )
c Var 'sum_hint_00026' direct represents '0' with '-1298'
c Var 'sum_hint_00026' direct represents '1' with '1298'
c Var 'sum_hint_00026' order represents '1' with '1'
c Var 'sum_hint_00026' order represents '0' with '-1298'
c Encoding variable: sum_hint_00027 with domain: bool (representing constraint )
c Var 'sum_hint_00027' direct represents '0' with '-1299'
c Var 'sum_hint_00027' direct represents '1' with '1299'
c Var 'sum_hint_00027' order represents '1' with '1'
c Var 'sum_hint_00027' order represents '0' with '-1299'
c Encoding variable: sum_hint_00028 with domain: bool (representing constraint )
c Var 'sum_hint_00028' direct represents '0' with '-1300'
c Var 'sum_hint_00028' direct represents '1' with '1300'
c Var 'sum_hint_00028' order represents '1' with '1'
c Var 'sum_hint_00028' order represents '0' with '-1300'
c Encoding variable: sum_hint_00029 with domain: bool (representing constraint )
c Var 'sum_hint_00029' direct represents '0' with '-1301'
c Var 'sum_hint_00029' direct represents '1' with '1301'
c Var 'sum_hint_00029' order represents '1' with '1'
c Var 'sum_hint_00029' order represents '0' with '-1301'
c Encoding variable: aux0 with domain: bool (representing constraint ((x_00001_00001 + x_00001_00002)=tv=3))
c Var 'aux0' direct represents '0' with '-1302'
c Var 'aux0' direct represents '1' with '1302'
c Var 'aux0' order represents '1' with '1'
c Var 'aux0' order represents '0' with '-1302'
c Encoding variable: aux1 with domain: bool (representing constraint ((x_00001_00003 + x_00001_00004 + x_00001_00005)=tv=15))
c Var 'aux1' direct represents '0' with '-1303'
c Var 'aux1' direct represents '1' with '1303'
c Var 'aux1' order represents '1' with '1'
c Var 'aux1' order represents '0' with '-1303'
c Encoding variable: aux2 with domain: bool (representing constraint ((x_00002_00005 + x_00002_00006 + x_00003_00005 + x_00001_00006)=tv=22))
c Var 'aux2' direct represents '0' with '-1304'
c Var 'aux2' direct represents '1' with '1304'
c Var 'aux2' order represents '1' with '1'
c Var 'aux2' order represents '0' with '-1304'
c Encoding variable: aux3 with domain: bool (representing constraint ((x_00002_00007 + x_00001_00007)=tv=4))
c Var 'aux3' direct represents '0' with '-1305'
c Var 'aux3' direct represents '1' with '1305'
c Var 'aux3' order represents '1' with '1'
c Var 'aux3' order represents '0' with '-1305'
c Encoding variable: aux4 with domain: bool (representing constraint ((x_00002_00008 + x_00001_00008)=tv=16))
c Var 'aux4' direct represents '0' with '-1306'
c Var 'aux4' direct represents '1' with '1306'
c Var 'aux4' order represents '1' with '1'
c Var 'aux4' order represents '0' with '-1306'
c Encoding variable: aux5 with domain: bool (representing constraint ((x_00002_00009 + x_00003_00009 + x_00004_00009 + x_00001_00009)=tv=15))
c Var 'aux5' direct represents '0' with '-1307'
c Var 'aux5' direct represents '1' with '1307'
c Var 'aux5' order represents '1' with '1'
c Var 'aux5' order represents '0' with '-1307'
c Encoding variable: aux6 with domain: bool (representing constraint ((x_00002_00001 + x_00002_00002 + x_00003_00001 + x_00003_00002)=tv=25))
c Var 'aux6' direct represents '0' with '-1308'
c Var 'aux6' direct represents '1' with '1308'
c Var 'aux6' order represents '1' with '1'
c Var 'aux6' order represents '0' with '-1308'
c Encoding variable: aux7 with domain: bool (representing constraint ((x_00002_00003 + x_00002_00004)=tv=17))
c Var 'aux7' direct represents '0' with '-1309'
c Var 'aux7' direct represents '1' with '1309'
c Var 'aux7' order represents '1' with '1'
c Var 'aux7' order represents '0' with '-1309'
c Encoding variable: aux8 with domain: bool (representing constraint ((x_00003_00003 + x_00003_00004 + x_00004_00004)=tv=9))
c Var 'aux8' direct represents '0' with '-1310'
c Var 'aux8' direct represents '1' with '1310'
c Var 'aux8' order represents '1' with '1'
c Var 'aux8' order represents '0' with '-1310'
c Encoding variable: aux9 with domain: bool (representing constraint ((x_00003_00006 + x_00004_00006 + x_00005_00006)=tv=8))
c Var 'aux9' direct represents '0' with '-1311'
c Var 'aux9' direct represents '1' with '1311'
c Var 'aux9' order represents '1' with '1'
c Var 'aux9' order represents '0' with '-1311'
c Encoding variable: aux10 with domain: bool (representing constraint ((x_00003_00007 + x_00003_00008 + x_00004_00007)=tv=20))
c Var 'aux10' direct represents '0' with '-1312'
c Var 'aux10' direct represents '1' with '1312'
c Var 'aux10' order represents '1' with '1'
c Var 'aux10' order represents '0' with '-1312'
c Encoding variable: aux11 with domain: bool (representing constraint ((x_00004_00001 + x_00005_00001)=tv=6))
c Var 'aux11' direct represents '0' with '-1313'
c Var 'aux11' direct represents '1' with '1313'
c Var 'aux11' order represents '1' with '1'
c Var 'aux11' order represents '0' with '-1313'
c Encoding variable: aux12 with domain: bool (representing constraint ((x_00004_00002 + x_00004_00003)=tv=14))
c Var 'aux12' direct represents '0' with '-1314'
c Var 'aux12' direct represents '1' with '1314'
c Var 'aux12' order represents '1' with '1'
c Var 'aux12' order represents '0' with '-1314'
c Encoding variable: aux13 with domain: bool (representing constraint ((x_00004_00005 + x_00005_00005 + x_00006_00005)=tv=17))
c Var 'aux13' direct represents '0' with '-1315'
c Var 'aux13' direct represents '1' with '1315'
c Var 'aux13' order represents '1' with '1'
c Var 'aux13' order represents '0' with '-1315'
c Encoding variable: aux14 with domain: bool (representing constraint ((x_00004_00008 + x_00005_00007 + x_00005_00008)=tv=17))
c Var 'aux14' direct represents '0' with '-1316'
c Var 'aux14' direct represents '1' with '1316'
c Var 'aux14' order represents '1' with '1'
c Var 'aux14' order represents '0' with '-1316'
c Encoding variable: aux15 with domain: bool (representing constraint ((x_00005_00002 + x_00005_00003 + x_00006_00002)=tv=13))
c Var 'aux15' direct represents '0' with '-1317'
c Var 'aux15' direct represents '1' with '1317'
c Var 'aux15' order represents '1' with '1'
c Var 'aux15' order represents '0' with '-1317'
c Encoding variable: aux16 with domain: bool (representing constraint ((x_00007_00004 + x_00005_00004 + x_00006_00004)=tv=20))
c Var 'aux16' direct represents '0' with '-1318'
c Var 'aux16' direct represents '1' with '1318'
c Var 'aux16' order represents '1' with '1'
c Var 'aux16' order represents '0' with '-1318'
c Encoding variable: aux17 with domain: bool (representing constraint ((x_00005_00009 + x_00006_00009)=tv=12))
c Var 'aux17' direct represents '0' with '-1319'
c Var 'aux17' direct represents '1' with '1319'
c Var 'aux17' order represents '1' with '1'
c Var 'aux17' order represents '0' with '-1319'
c Encoding variable: aux18 with domain: bool (representing constraint ((x_00007_00001 + x_00008_00001 + x_00009_00001 + x_00006_00001)=tv=27))
c Var 'aux18' direct represents '0' with '-1320'
c Var 'aux18' direct represents '1' with '1320'
c Var 'aux18' order represents '1' with '1'
c Var 'aux18' order represents '0' with '-1320'
c Encoding variable: aux19 with domain: bool (representing constraint ((x_00007_00002 + x_00007_00003 + x_00006_00003)=tv=6))
c Var 'aux19' direct represents '0' with '-1321'
c Var 'aux19' direct represents '1' with '1321'
c Var 'aux19' order represents '1' with '1'
c Var 'aux19' order represents '0' with '-1321'
c Encoding variable: aux20 with domain: bool (representing constraint ((x_00007_00006 + x_00007_00007 + x_00006_00006)=tv=20))
c Var 'aux20' direct represents '0' with '-1322'
c Var 'aux20' direct represents '1' with '1322'
c Var 'aux20' order represents '1' with '1'
c Var 'aux20' order represents '0' with '-1322'
c Encoding variable: aux21 with domain: bool (representing constraint ((x_00006_00007 + x_00006_00008)=tv=6))
c Var 'aux21' direct represents '0' with '-1323'
c Var 'aux21' direct represents '1' with '1323'
c Var 'aux21' order represents '1' with '1'
c Var 'aux21' order represents '0' with '-1323'
c Encoding variable: aux22 with domain: bool (representing constraint ((x_00007_00005 + x_00008_00004 + x_00008_00005 + x_00009_00004)=tv=10))
c Var 'aux22' direct represents '0' with '-1324'
c Var 'aux22' direct represents '1' with '1324'
c Var 'aux22' order represents '1' with '1'
c Var 'aux22' order represents '0' with '-1324'
c Encoding variable: aux23 with domain: bool (representing constraint ((x_00007_00008 + x_00007_00009 + x_00008_00008 + x_00008_00009)=tv=14))
c Var 'aux23' direct represents '0' with '-1325'
c Var 'aux23' direct represents '1' with '1325'
c Var 'aux23' order represents '1' with '1'
c Var 'aux23' order represents '0' with '-1325'
c Encoding variable: aux24 with domain: bool (representing constraint ((x_00008_00002 + x_00009_00002)=tv=8))
c Var 'aux24' direct represents '0' with '-1326'
c Var 'aux24' direct represents '1' with '1326'
c Var 'aux24' order represents '1' with '1'
c Var 'aux24' order represents '0' with '-1326'
c Encoding variable: aux25 with domain: bool (representing constraint ((x_00008_00003 + x_00009_00003)=tv=16))
c Var 'aux25' direct represents '0' with '-1327'
c Var 'aux25' direct represents '1' with '1327'
c Var 'aux25' order represents '1' with '1'
c Var 'aux25' order represents '0' with '-1327'
c Encoding variable: aux26 with domain: bool (representing constraint ((x_00008_00006 + x_00008_00007)=tv=15))
c Var 'aux26' direct represents '0' with '-1328'
c Var 'aux26' direct represents '1' with '1328'
c Var 'aux26' order represents '1' with '1'
c Var 'aux26' order represents '0' with '-1328'
c Encoding variable: aux27 with domain: bool (representing constraint ((x_00009_00005 + x_00009_00006 + x_00009_00007)=tv=13))
c Var 'aux27' direct represents '0' with '-1329'
c Var 'aux27' direct represents '1' with '1329'
c Var 'aux27' order represents '1' with '1'
c Var 'aux27' order represents '0' with '-1329'
c Encoding variable: aux28 with domain: bool (representing constraint ((x_00009_00008 + x_00009_00009)=tv=17))
c Var 'aux28' direct represents '0' with '-1330'
c Var 'aux28' direct represents '1' with '1330'
c Var 'aux28' order represents '1' with '1'
c Var 'aux28' order represents '0' with '-1330'
c Encoding variable: aux29 with domain: bool (representing constraint (x_00001_00001 != x_00001_00002))
c Var 'aux29' direct represents '0' with '-1331'
c Var 'aux29' direct represents '1' with '1331'
c Var 'aux29' order represents '1' with '1'
c Var 'aux29' order represents '0' with '-1331'
c Encoding variable: aux30 with domain: bool (representing constraint (x_00002_00007 != x_00001_00007))
c Var 'aux30' direct represents '0' with '-1332'
c Var 'aux30' direct represents '1' with '1332'
c Var 'aux30' order represents '1' with '1'
c Var 'aux30' order represents '0' with '-1332'
c Encoding variable: aux31 with domain: bool (representing constraint (x_00002_00008 != x_00001_00008))
c Var 'aux31' direct represents '0' with '-1333'
c Var 'aux31' direct represents '1' with '1333'
c Var 'aux31' order represents '1' with '1'
c Var 'aux31' order represents '0' with '-1333'
c Encoding variable: aux32 with domain: bool (representing constraint (x_00002_00003 != x_00002_00004))
c Var 'aux32' direct represents '0' with '-1334'
c Var 'aux32' direct represents '1' with '1334'
c Var 'aux32' order represents '1' with '1'
c Var 'aux32' order represents '0' with '-1334'
c Encoding variable: aux33 with domain: bool (representing constraint (x_00004_00001 != x_00005_00001))
c Var 'aux33' direct represents '0' with '-1335'
c Var 'aux33' direct represents '1' with '1335'
c Var 'aux33' order represents '1' with '1'
c Var 'aux33' order represents '0' with '-1335'
c Encoding variable: aux34 with domain: bool (representing constraint (x_00004_00002 != x_00004_00003))
c Var 'aux34' direct represents '0' with '-1336'
c Var 'aux34' direct represents '1' with '1336'
c Var 'aux34' order represents '1' with '1'
c Var 'aux34' order represents '0' with '-1336'
c Encoding variable: aux35 with domain: bool (representing constraint (x_00005_00009 != x_00006_00009))
c Var 'aux35' direct represents '0' with '-1337'
c Var 'aux35' direct represents '1' with '1337'
c Var 'aux35' order represents '1' with '1'
c Var 'aux35' order represents '0' with '-1337'
c Encoding variable: aux36 with domain: bool (representing constraint (x_00006_00007 != x_00006_00008))
c Var 'aux36' direct represents '0' with '-1338'
c Var 'aux36' direct represents '1' with '1338'
c Var 'aux36' order represents '1' with '1'
c Var 'aux36' order represents '0' with '-1338'
c Encoding variable: aux37 with domain: bool (representing constraint (x_00008_00002 != x_00009_00002))
c Var 'aux37' direct represents '0' with '-1339'
c Var 'aux37' direct represents '1' with '1339'
c Var 'aux37' order represents '1' with '1'
c Var 'aux37' order represents '0' with '-1339'
c Encoding variable: aux38 with domain: bool (representing constraint (x_00008_00003 != x_00009_00003))
c Var 'aux38' direct represents '0' with '-1340'
c Var 'aux38' direct represents '1' with '1340'
c Var 'aux38' order represents '1' with '1'
c Var 'aux38' order represents '0' with '-1340'
c Encoding variable: aux39 with domain: bool (representing constraint (x_00008_00006 != x_00008_00007))
c Var 'aux39' direct represents '0' with '-1341'
c Var 'aux39' direct represents '1' with '1341'
c Var 'aux39' order represents '1' with '1'
c Var 'aux39' order represents '0' with '-1341'
c Encoding variable: aux40 with domain: bool (representing constraint (x_00009_00008 != x_00009_00009))
c Var 'aux40' direct represents '0' with '-1342'
c Var 'aux40' direct represents '1' with '1342'
c Var 'aux40' order represents '1' with '1'
c Var 'aux40' order represents '0' with '-1342'
c Encoding variable: aux41 with domain: bool (representing constraint (((x_00003_00001=1) + (x_00008_00001=1) + (x_00001_00001=1) + (x_00006_00001=1) + (x_00004_00001=1) + (x_00009_00001=1) + (x_00002_00001=1) + (x_00007_00001=1) + (x_00005_00001=1))=tv=1))
c Var 'aux41' direct represents '0' with '-1343'
c Var 'aux41' direct represents '1' with '1343'
c Var 'aux41' order represents '1' with '1'
c Var 'aux41' order represents '0' with '-1343'
c Encoding variable: aux42 with domain: bool (representing constraint (((x_00003_00001=2) + (x_00008_00001=2) + (x_00001_00001=2) + (x_00006_00001=2) + (x_00004_00001=2) + (x_00009_00001=2) + (x_00002_00001=2) + (x_00007_00001=2) + (x_00005_00001=2))=tv=1))
c Var 'aux42' direct represents '0' with '-1344'
c Var 'aux42' direct represents '1' with '1344'
c Var 'aux42' order represents '1' with '1'
c Var 'aux42' order represents '0' with '-1344'
c Encoding variable: aux43 with domain: bool (representing constraint (((x_00003_00001=3) + (x_00008_00001=3) + (x_00001_00001=3) + (x_00006_00001=3) + (x_00004_00001=3) + (x_00009_00001=3) + (x_00002_00001=3) + (x_00007_00001=3) + (x_00005_00001=3))=tv=1))
c Var 'aux43' direct represents '0' with '-1345'
c Var 'aux43' direct represents '1' with '1345'
c Var 'aux43' order represents '1' with '1'
c Var 'aux43' order represents '0' with '-1345'
c Encoding variable: aux44 with domain: bool (representing constraint (((x_00003_00001=4) + (x_00008_00001=4) + (x_00001_00001=4) + (x_00006_00001=4) + (x_00004_00001=4) + (x_00009_00001=4) + (x_00002_00001=4) + (x_00007_00001=4) + (x_00005_00001=4))=tv=1))
c Var 'aux44' direct represents '0' with '-1346'
c Var 'aux44' direct represents '1' with '1346'
c Var 'aux44' order represents '1' with '1'
c Var 'aux44' order represents '0' with '-1346'
c Encoding variable: aux45 with domain: bool (representing constraint (((x_00003_00001=5) + (x_00008_00001=5) + (x_00001_00001=5) + (x_00006_00001=5) + (x_00004_00001=5) + (x_00009_00001=5) + (x_00002_00001=5) + (x_00007_00001=5) + (x_00005_00001=5))=tv=1))
c Var 'aux45' direct represents '0' with '-1347'
c Var 'aux45' direct represents '1' with '1347'
c Var 'aux45' order represents '1' with '1'
c Var 'aux45' order represents '0' with '-1347'
c Encoding variable: aux46 with domain: bool (representing constraint (((x_00003_00001=6) + (x_00008_00001=6) + (x_00001_00001=6) + (x_00006_00001=6) + (x_00004_00001=6) + (x_00009_00001=6) + (x_00002_00001=6) + (x_00007_00001=6) + (x_00005_00001=6))=tv=1))
c Var 'aux46' direct represents '0' with '-1348'
c Var 'aux46' direct represents '1' with '1348'
c Var 'aux46' order represents '1' with '1'
c Var 'aux46' order represents '0' with '-1348'
c Encoding variable: aux47 with domain: bool (representing constraint (((x_00003_00001=7) + (x_00008_00001=7) + (x_00001_00001=7) + (x_00006_00001=7) + (x_00004_00001=7) + (x_00009_00001=7) + (x_00002_00001=7) + (x_00007_00001=7) + (x_00005_00001=7))=tv=1))
c Var 'aux47' direct represents '0' with '-1349'
c Var 'aux47' direct represents '1' with '1349'
c Var 'aux47' order represents '1' with '1'
c Var 'aux47' order represents '0' with '-1349'
c Encoding variable: aux48 with domain: bool (representing constraint (((x_00003_00001=8) + (x_00008_00001=8) + (x_00001_00001=8) + (x_00006_00001=8) + (x_00004_00001=8) + (x_00009_00001=8) + (x_00002_00001=8) + (x_00007_00001=8) + (x_00005_00001=8))=tv=1))
c Var 'aux48' direct represents '0' with '-1350'
c Var 'aux48' direct represents '1' with '1350'
c Var 'aux48' order represents '1' with '1'
c Var 'aux48' order represents '0' with '-1350'
c Encoding variable: aux49 with domain: bool (representing constraint (((x_00003_00001=9) + (x_00008_00001=9) + (x_00001_00001=9) + (x_00006_00001=9) + (x_00004_00001=9) + (x_00009_00001=9) + (x_00002_00001=9) + (x_00007_00001=9) + (x_00005_00001=9))=tv=1))
c Var 'aux49' direct represents '0' with '-1351'
c Var 'aux49' direct represents '1' with '1351'
c Var 'aux49' order represents '1' with '1'
c Var 'aux49' order represents '0' with '-1351'
c Encoding variable: aux50 with domain: bool (representing constraint (((x_00003_00002=1) + (x_00008_00002=1) + (x_00001_00002=1) + (x_00006_00002=1) + (x_00004_00002=1) + (x_00009_00002=1) + (x_00002_00002=1) + (x_00007_00002=1) + (x_00005_00002=1))=tv=1))
c Var 'aux50' direct represents '0' with '-1352'
c Var 'aux50' direct represents '1' with '1352'
c Var 'aux50' order represents '1' with '1'
c Var 'aux50' order represents '0' with '-1352'
c Encoding variable: aux51 with domain: bool (representing constraint (((x_00003_00002=2) + (x_00008_00002=2) + (x_00001_00002=2) + (x_00006_00002=2) + (x_00004_00002=2) + (x_00009_00002=2) + (x_00002_00002=2) + (x_00007_00002=2) + (x_00005_00002=2))=tv=1))
c Var 'aux51' direct represents '0' with '-1353'
c Var 'aux51' direct represents '1' with '1353'
c Var 'aux51' order represents '1' with '1'
c Var 'aux51' order represents '0' with '-1353'
c Encoding variable: aux52 with domain: bool (representing constraint (((x_00003_00002=3) + (x_00008_00002=3) + (x_00001_00002=3) + (x_00006_00002=3) + (x_00004_00002=3) + (x_00009_00002=3) + (x_00002_00002=3) + (x_00007_00002=3) + (x_00005_00002=3))=tv=1))
c Var 'aux52' direct represents '0' with '-1354'
c Var 'aux52' direct represents '1' with '1354'
c Var 'aux52' order represents '1' with '1'
c Var 'aux52' order represents '0' with '-1354'
c Encoding variable: aux53 with domain: bool (representing constraint (((x_00003_00002=4) + (x_00008_00002=4) + (x_00001_00002=4) + (x_00006_00002=4) + (x_00004_00002=4) + (x_00009_00002=4) + (x_00002_00002=4) + (x_00007_00002=4) + (x_00005_00002=4))=tv=1))
c Var 'aux53' direct represents '0' with '-1355'
c Var 'aux53' direct represents '1' with '1355'
c Var 'aux53' order represents '1' with '1'
c Var 'aux53' order represents '0' with '-1355'
c Encoding variable: aux54 with domain: bool (representing constraint (((x_00003_00002=5) + (x_00008_00002=5) + (x_00001_00002=5) + (x_00006_00002=5) + (x_00004_00002=5) + (x_00009_00002=5) + (x_00002_00002=5) + (x_00007_00002=5) + (x_00005_00002=5))=tv=1))
c Var 'aux54' direct represents '0' with '-1356'
c Var 'aux54' direct represents '1' with '1356'
c Var 'aux54' order represents '1' with '1'
c Var 'aux54' order represents '0' with '-1356'
c Encoding variable: aux55 with domain: bool (representing constraint (((x_00003_00002=6) + (x_00008_00002=6) + (x_00001_00002=6) + (x_00006_00002=6) + (x_00004_00002=6) + (x_00009_00002=6) + (x_00002_00002=6) + (x_00007_00002=6) + (x_00005_00002=6))=tv=1))
c Var 'aux55' direct represents '0' with '-1357'
c Var 'aux55' direct represents '1' with '1357'
c Var 'aux55' order represents '1' with '1'
c Var 'aux55' order represents '0' with '-1357'
c Encoding variable: aux56 with domain: bool (representing constraint (((x_00003_00002=7) + (x_00008_00002=7) + (x_00001_00002=7) + (x_00006_00002=7) + (x_00004_00002=7) + (x_00009_00002=7) + (x_00002_00002=7) + (x_00007_00002=7) + (x_00005_00002=7))=tv=1))
c Var 'aux56' direct represents '0' with '-1358'
c Var 'aux56' direct represents '1' with '1358'
c Var 'aux56' order represents '1' with '1'
c Var 'aux56' order represents '0' with '-1358'
c Encoding variable: aux57 with domain: bool (representing constraint (((x_00003_00002=8) + (x_00008_00002=8) + (x_00001_00002=8) + (x_00006_00002=8) + (x_00004_00002=8) + (x_00009_00002=8) + (x_00002_00002=8) + (x_00007_00002=8) + (x_00005_00002=8))=tv=1))
c Var 'aux57' direct represents '0' with '-1359'
c Var 'aux57' direct represents '1' with '1359'
c Var 'aux57' order represents '1' with '1'
c Var 'aux57' order represents '0' with '-1359'
c Encoding variable: aux58 with domain: bool (representing constraint (((x_00003_00002=9) + (x_00008_00002=9) + (x_00001_00002=9) + (x_00006_00002=9) + (x_00004_00002=9) + (x_00009_00002=9) + (x_00002_00002=9) + (x_00007_00002=9) + (x_00005_00002=9))=tv=1))
c Var 'aux58' direct represents '0' with '-1360'
c Var 'aux58' direct represents '1' with '1360'
c Var 'aux58' order represents '1' with '1'
c Var 'aux58' order represents '0' with '-1360'
c Encoding variable: aux59 with domain: bool (representing constraint (((x_00003_00003=1) + (x_00008_00003=1) + (x_00001_00003=1) + (x_00006_00003=1) + (x_00004_00003=1) + (x_00009_00003=1) + (x_00002_00003=1) + (x_00007_00003=1) + (x_00005_00003=1))=tv=1))
c Var 'aux59' direct represents '0' with '-1361'
c Var 'aux59' direct represents '1' with '1361'
c Var 'aux59' order represents '1' with '1'
c Var 'aux59' order represents '0' with '-1361'
c Encoding variable: aux60 with domain: bool (representing constraint (((x_00003_00003=2) + (x_00008_00003=2) + (x_00001_00003=2) + (x_00006_00003=2) + (x_00004_00003=2) + (x_00009_00003=2) + (x_00002_00003=2) + (x_00007_00003=2) + (x_00005_00003=2))=tv=1))
c Var 'aux60' direct represents '0' with '-1362'
c Var 'aux60' direct represents '1' with '1362'
c Var 'aux60' order represents '1' with '1'
c Var 'aux60' order represents '0' with '-1362'
c Encoding variable: aux61 with domain: bool (representing constraint (((x_00003_00003=3) + (x_00008_00003=3) + (x_00001_00003=3) + (x_00006_00003=3) + (x_00004_00003=3) + (x_00009_00003=3) + (x_00002_00003=3) + (x_00007_00003=3) + (x_00005_00003=3))=tv=1))
c Var 'aux61' direct represents '0' with '-1363'
c Var 'aux61' direct represents '1' with '1363'
c Var 'aux61' order represents '1' with '1'
c Var 'aux61' order represents '0' with '-1363'
c Encoding variable: aux62 with domain: bool (representing constraint (((x_00003_00003=4) + (x_00008_00003=4) + (x_00001_00003=4) + (x_00006_00003=4) + (x_00004_00003=4) + (x_00009_00003=4) + (x_00002_00003=4) + (x_00007_00003=4) + (x_00005_00003=4))=tv=1))
c Var 'aux62' direct represents '0' with '-1364'
c Var 'aux62' direct represents '1' with '1364'
c Var 'aux62' order represents '1' with '1'
c Var 'aux62' order represents '0' with '-1364'
c Encoding variable: aux63 with domain: bool (representing constraint (((x_00003_00003=5) + (x_00008_00003=5) + (x_00001_00003=5) + (x_00006_00003=5) + (x_00004_00003=5) + (x_00009_00003=5) + (x_00002_00003=5) + (x_00007_00003=5) + (x_00005_00003=5))=tv=1))
c Var 'aux63' direct represents '0' with '-1365'
c Var 'aux63' direct represents '1' with '1365'
c Var 'aux63' order represents '1' with '1'
c Var 'aux63' order represents '0' with '-1365'
c Encoding variable: aux64 with domain: bool (representing constraint (((x_00003_00003=6) + (x_00008_00003=6) + (x_00001_00003=6) + (x_00006_00003=6) + (x_00004_00003=6) + (x_00009_00003=6) + (x_00002_00003=6) + (x_00007_00003=6) + (x_00005_00003=6))=tv=1))
c Var 'aux64' direct represents '0' with '-1366'
c Var 'aux64' direct represents '1' with '1366'
c Var 'aux64' order represents '1' with '1'
c Var 'aux64' order represents '0' with '-1366'
c Encoding variable: aux65 with domain: bool (representing constraint (((x_00003_00003=7) + (x_00008_00003=7) + (x_00001_00003=7) + (x_00006_00003=7) + (x_00004_00003=7) + (x_00009_00003=7) + (x_00002_00003=7) + (x_00007_00003=7) + (x_00005_00003=7))=tv=1))
c Var 'aux65' direct represents '0' with '-1367'
c Var 'aux65' direct represents '1' with '1367'
c Var 'aux65' order represents '1' with '1'
c Var 'aux65' order represents '0' with '-1367'
c Encoding variable: aux66 with domain: bool (representing constraint (((x_00003_00003=8) + (x_00008_00003=8) + (x_00001_00003=8) + (x_00006_00003=8) + (x_00004_00003=8) + (x_00009_00003=8) + (x_00002_00003=8) + (x_00007_00003=8) + (x_00005_00003=8))=tv=1))
c Var 'aux66' direct represents '0' with '-1368'
c Var 'aux66' direct represents '1' with '1368'
c Var 'aux66' order represents '1' with '1'
c Var 'aux66' order represents '0' with '-1368'
c Encoding variable: aux67 with domain: bool (representing constraint (((x_00003_00003=9) + (x_00008_00003=9) + (x_00001_00003=9) + (x_00006_00003=9) + (x_00004_00003=9) + (x_00009_00003=9) + (x_00002_00003=9) + (x_00007_00003=9) + (x_00005_00003=9))=tv=1))
c Var 'aux67' direct represents '0' with '-1369'
c Var 'aux67' direct represents '1' with '1369'
c Var 'aux67' order represents '1' with '1'
c Var 'aux67' order represents '0' with '-1369'
c Encoding variable: aux68 with domain: bool (representing constraint (((x_00003_00004=1) + (x_00008_00004=1) + (x_00001_00004=1) + (x_00006_00004=1) + (x_00004_00004=1) + (x_00009_00004=1) + (x_00002_00004=1) + (x_00007_00004=1) + (x_00005_00004=1))=tv=1))
c Var 'aux68' direct represents '0' with '-1370'
c Var 'aux68' direct represents '1' with '1370'
c Var 'aux68' order represents '1' with '1'
c Var 'aux68' order represents '0' with '-1370'
c Encoding variable: aux69 with domain: bool (representing constraint (((x_00003_00004=2) + (x_00008_00004=2) + (x_00001_00004=2) + (x_00006_00004=2) + (x_00004_00004=2) + (x_00009_00004=2) + (x_00002_00004=2) + (x_00007_00004=2) + (x_00005_00004=2))=tv=1))
c Var 'aux69' direct represents '0' with '-1371'
c Var 'aux69' direct represents '1' with '1371'
c Var 'aux69' order represents '1' with '1'
c Var 'aux69' order represents '0' with '-1371'
c Encoding variable: aux70 with domain: bool (representing constraint (((x_00003_00004=3) + (x_00008_00004=3) + (x_00001_00004=3) + (x_00006_00004=3) + (x_00004_00004=3) + (x_00009_00004=3) + (x_00002_00004=3) + (x_00007_00004=3) + (x_00005_00004=3))=tv=1))
c Var 'aux70' direct represents '0' with '-1372'
c Var 'aux70' direct represents '1' with '1372'
c Var 'aux70' order represents '1' with '1'
c Var 'aux70' order represents '0' with '-1372'
c Encoding variable: aux71 with domain: bool (representing constraint (((x_00003_00004=4) + (x_00008_00004=4) + (x_00001_00004=4) + (x_00006_00004=4) + (x_00004_00004=4) + (x_00009_00004=4) + (x_00002_00004=4) + (x_00007_00004=4) + (x_00005_00004=4))=tv=1))
c Var 'aux71' direct represents '0' with '-1373'
c Var 'aux71' direct represents '1' with '1373'
c Var 'aux71' order represents '1' with '1'
c Var 'aux71' order represents '0' with '-1373'
c Encoding variable: aux72 with domain: bool (representing constraint (((x_00003_00004=5) + (x_00008_00004=5) + (x_00001_00004=5) + (x_00006_00004=5) + (x_00004_00004=5) + (x_00009_00004=5) + (x_00002_00004=5) + (x_00007_00004=5) + (x_00005_00004=5))=tv=1))
c Var 'aux72' direct represents '0' with '-1374'
c Var 'aux72' direct represents '1' with '1374'
c Var 'aux72' order represents '1' with '1'
c Var 'aux72' order represents '0' with '-1374'
c Encoding variable: aux73 with domain: bool (representing constraint (((x_00003_00004=6) + (x_00008_00004=6) + (x_00001_00004=6) + (x_00006_00004=6) + (x_00004_00004=6) + (x_00009_00004=6) + (x_00002_00004=6) + (x_00007_00004=6) + (x_00005_00004=6))=tv=1))
c Var 'aux73' direct represents '0' with '-1375'
c Var 'aux73' direct represents '1' with '1375'
c Var 'aux73' order represents '1' with '1'
c Var 'aux73' order represents '0' with '-1375'
c Encoding variable: aux74 with domain: bool (representing constraint (((x_00003_00004=7) + (x_00008_00004=7) + (x_00001_00004=7) + (x_00006_00004=7) + (x_00004_00004=7) + (x_00009_00004=7) + (x_00002_00004=7) + (x_00007_00004=7) + (x_00005_00004=7))=tv=1))
c Var 'aux74' direct represents '0' with '-1376'
c Var 'aux74' direct represents '1' with '1376'
c Var 'aux74' order represents '1' with '1'
c Var 'aux74' order represents '0' with '-1376'
c Encoding variable: aux75 with domain: bool (representing constraint (((x_00003_00004=8) + (x_00008_00004=8) + (x_00001_00004=8) + (x_00006_00004=8) + (x_00004_00004=8) + (x_00009_00004=8) + (x_00002_00004=8) + (x_00007_00004=8) + (x_00005_00004=8))=tv=1))
c Var 'aux75' direct represents '0' with '-1377'
c Var 'aux75' direct represents '1' with '1377'
c Var 'aux75' order represents '1' with '1'
c Var 'aux75' order represents '0' with '-1377'
c Encoding variable: aux76 with domain: bool (representing constraint (((x_00003_00004=9) + (x_00008_00004=9) + (x_00001_00004=9) + (x_00006_00004=9) + (x_00004_00004=9) + (x_00009_00004=9) + (x_00002_00004=9) + (x_00007_00004=9) + (x_00005_00004=9))=tv=1))
c Var 'aux76' direct represents '0' with '-1378'
c Var 'aux76' direct represents '1' with '1378'
c Var 'aux76' order represents '1' with '1'
c Var 'aux76' order represents '0' with '-1378'
c Encoding variable: aux77 with domain: bool (representing constraint (((x_00003_00005=1) + (x_00008_00005=1) + (x_00001_00005=1) + (x_00006_00005=1) + (x_00004_00005=1) + (x_00009_00005=1) + (x_00002_00005=1) + (x_00007_00005=1) + (x_00005_00005=1))=tv=1))
c Var 'aux77' direct represents '0' with '-1379'
c Var 'aux77' direct represents '1' with '1379'
c Var 'aux77' order represents '1' with '1'
c Var 'aux77' order represents '0' with '-1379'
c Encoding variable: aux78 with domain: bool (representing constraint (((x_00003_00005=2) + (x_00008_00005=2) + (x_00001_00005=2) + (x_00006_00005=2) + (x_00004_00005=2) + (x_00009_00005=2) + (x_00002_00005=2) + (x_00007_00005=2) + (x_00005_00005=2))=tv=1))
c Var 'aux78' direct represents '0' with '-1380'
c Var 'aux78' direct represents '1' with '1380'
c Var 'aux78' order represents '1' with '1'
c Var 'aux78' order represents '0' with '-1380'
c Encoding variable: aux79 with domain: bool (representing constraint (((x_00003_00005=3) + (x_00008_00005=3) + (x_00001_00005=3) + (x_00006_00005=3) + (x_00004_00005=3) + (x_00009_00005=3) + (x_00002_00005=3) + (x_00007_00005=3) + (x_00005_00005=3))=tv=1))
c Var 'aux79' direct represents '0' with '-1381'
c Var 'aux79' direct represents '1' with '1381'
c Var 'aux79' order represents '1' with '1'
c Var 'aux79' order represents '0' with '-1381'
c Encoding variable: aux80 with domain: bool (representing constraint (((x_00003_00005=4) + (x_00008_00005=4) + (x_00001_00005=4) + (x_00006_00005=4) + (x_00004_00005=4) + (x_00009_00005=4) + (x_00002_00005=4) + (x_00007_00005=4) + (x_00005_00005=4))=tv=1))
c Var 'aux80' direct represents '0' with '-1382'
c Var 'aux80' direct represents '1' with '1382'
c Var 'aux80' order represents '1' with '1'
c Var 'aux80' order represents '0' with '-1382'
c Encoding variable: aux81 with domain: bool (representing constraint (((x_00003_00005=5) + (x_00008_00005=5) + (x_00001_00005=5) + (x_00006_00005=5) + (x_00004_00005=5) + (x_00009_00005=5) + (x_00002_00005=5) + (x_00007_00005=5) + (x_00005_00005=5))=tv=1))
c Var 'aux81' direct represents '0' with '-1383'
c Var 'aux81' direct represents '1' with '1383'
c Var 'aux81' order represents '1' with '1'
c Var 'aux81' order represents '0' with '-1383'
c Encoding variable: aux82 with domain: bool (representing constraint (((x_00003_00005=6) + (x_00008_00005=6) + (x_00001_00005=6) + (x_00006_00005=6) + (x_00004_00005=6) + (x_00009_00005=6) + (x_00002_00005=6) + (x_00007_00005=6) + (x_00005_00005=6))=tv=1))
c Var 'aux82' direct represents '0' with '-1384'
c Var 'aux82' direct represents '1' with '1384'
c Var 'aux82' order represents '1' with '1'
c Var 'aux82' order represents '0' with '-1384'
c Encoding variable: aux83 with domain: bool (representing constraint (((x_00003_00005=7) + (x_00008_00005=7) + (x_00001_00005=7) + (x_00006_00005=7) + (x_00004_00005=7) + (x_00009_00005=7) + (x_00002_00005=7) + (x_00007_00005=7) + (x_00005_00005=7))=tv=1))
c Var 'aux83' direct represents '0' with '-1385'
c Var 'aux83' direct represents '1' with '1385'
c Var 'aux83' order represents '1' with '1'
c Var 'aux83' order represents '0' with '-1385'
c Encoding variable: aux84 with domain: bool (representing constraint (((x_00003_00005=8) + (x_00008_00005=8) + (x_00001_00005=8) + (x_00006_00005=8) + (x_00004_00005=8) + (x_00009_00005=8) + (x_00002_00005=8) + (x_00007_00005=8) + (x_00005_00005=8))=tv=1))
c Var 'aux84' direct represents '0' with '-1386'
c Var 'aux84' direct represents '1' with '1386'
c Var 'aux84' order represents '1' with '1'
c Var 'aux84' order represents '0' with '-1386'
c Encoding variable: aux85 with domain: bool (representing constraint (((x_00003_00005=9) + (x_00008_00005=9) + (x_00001_00005=9) + (x_00006_00005=9) + (x_00004_00005=9) + (x_00009_00005=9) + (x_00002_00005=9) + (x_00007_00005=9) + (x_00005_00005=9))=tv=1))
c Var 'aux85' direct represents '0' with '-1387'
c Var 'aux85' direct represents '1' with '1387'
c Var 'aux85' order represents '1' with '1'
c Var 'aux85' order represents '0' with '-1387'
c Encoding variable: aux86 with domain: bool (representing constraint (((x_00003_00006=1) + (x_00008_00006=1) + (x_00001_00006=1) + (x_00006_00006=1) + (x_00004_00006=1) + (x_00009_00006=1) + (x_00002_00006=1) + (x_00007_00006=1) + (x_00005_00006=1))=tv=1))
c Var 'aux86' direct represents '0' with '-1388'
c Var 'aux86' direct represents '1' with '1388'
c Var 'aux86' order represents '1' with '1'
c Var 'aux86' order represents '0' with '-1388'
c Encoding variable: aux87 with domain: bool (representing constraint (((x_00003_00006=2) + (x_00008_00006=2) + (x_00001_00006=2) + (x_00006_00006=2) + (x_00004_00006=2) + (x_00009_00006=2) + (x_00002_00006=2) + (x_00007_00006=2) + (x_00005_00006=2))=tv=1))
c Var 'aux87' direct represents '0' with '-1389'
c Var 'aux87' direct represents '1' with '1389'
c Var 'aux87' order represents '1' with '1'
c Var 'aux87' order represents '0' with '-1389'
c Encoding variable: aux88 with domain: bool (representing constraint (((x_00003_00006=3) + (x_00008_00006=3) + (x_00001_00006=3) + (x_00006_00006=3) + (x_00004_00006=3) + (x_00009_00006=3) + (x_00002_00006=3) + (x_00007_00006=3) + (x_00005_00006=3))=tv=1))
c Var 'aux88' direct represents '0' with '-1390'
c Var 'aux88' direct represents '1' with '1390'
c Var 'aux88' order represents '1' with '1'
c Var 'aux88' order represents '0' with '-1390'
c Encoding variable: aux89 with domain: bool (representing constraint (((x_00003_00006=4) + (x_00008_00006=4) + (x_00001_00006=4) + (x_00006_00006=4) + (x_00004_00006=4) + (x_00009_00006=4) + (x_00002_00006=4) + (x_00007_00006=4) + (x_00005_00006=4))=tv=1))
c Var 'aux89' direct represents '0' with '-1391'
c Var 'aux89' direct represents '1' with '1391'
c Var 'aux89' order represents '1' with '1'
c Var 'aux89' order represents '0' with '-1391'
c Encoding variable: aux90 with domain: bool (representing constraint (((x_00003_00006=5) + (x_00008_00006=5) + (x_00001_00006=5) + (x_00006_00006=5) + (x_00004_00006=5) + (x_00009_00006=5) + (x_00002_00006=5) + (x_00007_00006=5) + (x_00005_00006=5))=tv=1))
c Var 'aux90' direct represents '0' with '-1392'
c Var 'aux90' direct represents '1' with '1392'
c Var 'aux90' order represents '1' with '1'
c Var 'aux90' order represents '0' with '-1392'
c Encoding variable: aux91 with domain: bool (representing constraint (((x_00003_00006=6) + (x_00008_00006=6) + (x_00001_00006=6) + (x_00006_00006=6) + (x_00004_00006=6) + (x_00009_00006=6) + (x_00002_00006=6) + (x_00007_00006=6) + (x_00005_00006=6))=tv=1))
c Var 'aux91' direct represents '0' with '-1393'
c Var 'aux91' direct represents '1' with '1393'
c Var 'aux91' order represents '1' with '1'
c Var 'aux91' order represents '0' with '-1393'
c Encoding variable: aux92 with domain: bool (representing constraint (((x_00003_00006=7) + (x_00008_00006=7) + (x_00001_00006=7) + (x_00006_00006=7) + (x_00004_00006=7) + (x_00009_00006=7) + (x_00002_00006=7) + (x_00007_00006=7) + (x_00005_00006=7))=tv=1))
c Var 'aux92' direct represents '0' with '-1394'
c Var 'aux92' direct represents '1' with '1394'
c Var 'aux92' order represents '1' with '1'
c Var 'aux92' order represents '0' with '-1394'
c Encoding variable: aux93 with domain: bool (representing constraint (((x_00003_00006=8) + (x_00008_00006=8) + (x_00001_00006=8) + (x_00006_00006=8) + (x_00004_00006=8) + (x_00009_00006=8) + (x_00002_00006=8) + (x_00007_00006=8) + (x_00005_00006=8))=tv=1))
c Var 'aux93' direct represents '0' with '-1395'
c Var 'aux93' direct represents '1' with '1395'
c Var 'aux93' order represents '1' with '1'
c Var 'aux93' order represents '0' with '-1395'
c Encoding variable: aux94 with domain: bool (representing constraint (((x_00003_00006=9) + (x_00008_00006=9) + (x_00001_00006=9) + (x_00006_00006=9) + (x_00004_00006=9) + (x_00009_00006=9) + (x_00002_00006=9) + (x_00007_00006=9) + (x_00005_00006=9))=tv=1))
c Var 'aux94' direct represents '0' with '-1396'
c Var 'aux94' direct represents '1' with '1396'
c Var 'aux94' order represents '1' with '1'
c Var 'aux94' order represents '0' with '-1396'
c Encoding variable: aux95 with domain: bool (representing constraint (((x_00003_00007=1) + (x_00008_00007=1) + (x_00001_00007=1) + (x_00006_00007=1) + (x_00004_00007=1) + (x_00009_00007=1) + (x_00002_00007=1) + (x_00007_00007=1) + (x_00005_00007=1))=tv=1))
c Var 'aux95' direct represents '0' with '-1397'
c Var 'aux95' direct represents '1' with '1397'
c Var 'aux95' order represents '1' with '1'
c Var 'aux95' order represents '0' with '-1397'
c Encoding variable: aux96 with domain: bool (representing constraint (((x_00003_00007=2) + (x_00008_00007=2) + (x_00001_00007=2) + (x_00006_00007=2) + (x_00004_00007=2) + (x_00009_00007=2) + (x_00002_00007=2) + (x_00007_00007=2) + (x_00005_00007=2))=tv=1))
c Var 'aux96' direct represents '0' with '-1398'
c Var 'aux96' direct represents '1' with '1398'
c Var 'aux96' order represents '1' with '1'
c Var 'aux96' order represents '0' with '-1398'
c Encoding variable: aux97 with domain: bool (representing constraint (((x_00003_00007=3) + (x_00008_00007=3) + (x_00001_00007=3) + (x_00006_00007=3) + (x_00004_00007=3) + (x_00009_00007=3) + (x_00002_00007=3) + (x_00007_00007=3) + (x_00005_00007=3))=tv=1))
c Var 'aux97' direct represents '0' with '-1399'
c Var 'aux97' direct represents '1' with '1399'
c Var 'aux97' order represents '1' with '1'
c Var 'aux97' order represents '0' with '-1399'
c Encoding variable: aux98 with domain: bool (representing constraint (((x_00003_00007=4) + (x_00008_00007=4) + (x_00001_00007=4) + (x_00006_00007=4) + (x_00004_00007=4) + (x_00009_00007=4) + (x_00002_00007=4) + (x_00007_00007=4) + (x_00005_00007=4))=tv=1))
c Var 'aux98' direct represents '0' with '-1400'
c Var 'aux98' direct represents '1' with '1400'
c Var 'aux98' order represents '1' with '1'
c Var 'aux98' order represents '0' with '-1400'
c Encoding variable: aux99 with domain: bool (representing constraint (((x_00003_00007=5) + (x_00008_00007=5) + (x_00001_00007=5) + (x_00006_00007=5) + (x_00004_00007=5) + (x_00009_00007=5) + (x_00002_00007=5) + (x_00007_00007=5) + (x_00005_00007=5))=tv=1))
c Var 'aux99' direct represents '0' with '-1401'
c Var 'aux99' direct represents '1' with '1401'
c Var 'aux99' order represents '1' with '1'
c Var 'aux99' order represents '0' with '-1401'
c Encoding variable: aux100 with domain: bool (representing constraint (((x_00003_00007=6) + (x_00008_00007=6) + (x_00001_00007=6) + (x_00006_00007=6) + (x_00004_00007=6) + (x_00009_00007=6) + (x_00002_00007=6) + (x_00007_00007=6) + (x_00005_00007=6))=tv=1))
c Var 'aux100' direct represents '0' with '-1402'
c Var 'aux100' direct represents '1' with '1402'
c Var 'aux100' order represents '1' with '1'
c Var 'aux100' order represents '0' with '-1402'
c Encoding variable: aux101 with domain: bool (representing constraint (((x_00003_00007=7) + (x_00008_00007=7) + (x_00001_00007=7) + (x_00006_00007=7) + (x_00004_00007=7) + (x_00009_00007=7) + (x_00002_00007=7) + (x_00007_00007=7) + (x_00005_00007=7))=tv=1))
c Var 'aux101' direct represents '0' with '-1403'
c Var 'aux101' direct represents '1' with '1403'
c Var 'aux101' order represents '1' with '1'
c Var 'aux101' order represents '0' with '-1403'
c Encoding variable: aux102 with domain: bool (representing constraint (((x_00003_00007=8) + (x_00008_00007=8) + (x_00001_00007=8) + (x_00006_00007=8) + (x_00004_00007=8) + (x_00009_00007=8) + (x_00002_00007=8) + (x_00007_00007=8) + (x_00005_00007=8))=tv=1))
c Var 'aux102' direct represents '0' with '-1404'
c Var 'aux102' direct represents '1' with '1404'
c Var 'aux102' order represents '1' with '1'
c Var 'aux102' order represents '0' with '-1404'
c Encoding variable: aux103 with domain: bool (representing constraint (((x_00003_00007=9) + (x_00008_00007=9) + (x_00001_00007=9) + (x_00006_00007=9) + (x_00004_00007=9) + (x_00009_00007=9) + (x_00002_00007=9) + (x_00007_00007=9) + (x_00005_00007=9))=tv=1))
c Var 'aux103' direct represents '0' with '-1405'
c Var 'aux103' direct represents '1' with '1405'
c Var 'aux103' order represents '1' with '1'
c Var 'aux103' order represents '0' with '-1405'
c Encoding variable: aux104 with domain: bool (representing constraint (((x_00003_00008=1) + (x_00008_00008=1) + (x_00001_00008=1) + (x_00006_00008=1) + (x_00004_00008=1) + (x_00009_00008=1) + (x_00002_00008=1) + (x_00007_00008=1) + (x_00005_00008=1))=tv=1))
c Var 'aux104' direct represents '0' with '-1406'
c Var 'aux104' direct represents '1' with '1406'
c Var 'aux104' order represents '1' with '1'
c Var 'aux104' order represents '0' with '-1406'
c Encoding variable: aux105 with domain: bool (representing constraint (((x_00003_00008=2) + (x_00008_00008=2) + (x_00001_00008=2) + (x_00006_00008=2) + (x_00004_00008=2) + (x_00009_00008=2) + (x_00002_00008=2) + (x_00007_00008=2) + (x_00005_00008=2))=tv=1))
c Var 'aux105' direct represents '0' with '-1407'
c Var 'aux105' direct represents '1' with '1407'
c Var 'aux105' order represents '1' with '1'
c Var 'aux105' order represents '0' with '-1407'
c Encoding variable: aux106 with domain: bool (representing constraint (((x_00003_00008=3) + (x_00008_00008=3) + (x_00001_00008=3) + (x_00006_00008=3) + (x_00004_00008=3) + (x_00009_00008=3) + (x_00002_00008=3) + (x_00007_00008=3) + (x_00005_00008=3))=tv=1))
c Var 'aux106' direct represents '0' with '-1408'
c Var 'aux106' direct represents '1' with '1408'
c Var 'aux106' order represents '1' with '1'
c Var 'aux106' order represents '0' with '-1408'
c Encoding variable: aux107 with domain: bool (representing constraint (((x_00003_00008=4) + (x_00008_00008=4) + (x_00001_00008=4) + (x_00006_00008=4) + (x_00004_00008=4) + (x_00009_00008=4) + (x_00002_00008=4) + (x_00007_00008=4) + (x_00005_00008=4))=tv=1))
c Var 'aux107' direct represents '0' with '-1409'
c Var 'aux107' direct represents '1' with '1409'
c Var 'aux107' order represents '1' with '1'
c Var 'aux107' order represents '0' with '-1409'
c Encoding variable: aux108 with domain: bool (representing constraint (((x_00003_00008=5) + (x_00008_00008=5) + (x_00001_00008=5) + (x_00006_00008=5) + (x_00004_00008=5) + (x_00009_00008=5) + (x_00002_00008=5) + (x_00007_00008=5) + (x_00005_00008=5))=tv=1))
c Var 'aux108' direct represents '0' with '-1410'
c Var 'aux108' direct represents '1' with '1410'
c Var 'aux108' order represents '1' with '1'
c Var 'aux108' order represents '0' with '-1410'
c Encoding variable: aux109 with domain: bool (representing constraint (((x_00003_00008=6) + (x_00008_00008=6) + (x_00001_00008=6) + (x_00006_00008=6) + (x_00004_00008=6) + (x_00009_00008=6) + (x_00002_00008=6) + (x_00007_00008=6) + (x_00005_00008=6))=tv=1))
c Var 'aux109' direct represents '0' with '-1411'
c Var 'aux109' direct represents '1' with '1411'
c Var 'aux109' order represents '1' with '1'
c Var 'aux109' order represents '0' with '-1411'
c Encoding variable: aux110 with domain: bool (representing constraint (((x_00003_00008=7) + (x_00008_00008=7) + (x_00001_00008=7) + (x_00006_00008=7) + (x_00004_00008=7) + (x_00009_00008=7) + (x_00002_00008=7) + (x_00007_00008=7) + (x_00005_00008=7))=tv=1))
c Var 'aux110' direct represents '0' with '-1412'
c Var 'aux110' direct represents '1' with '1412'
c Var 'aux110' order represents '1' with '1'
c Var 'aux110' order represents '0' with '-1412'
c Encoding variable: aux111 with domain: bool (representing constraint (((x_00003_00008=8) + (x_00008_00008=8) + (x_00001_00008=8) + (x_00006_00008=8) + (x_00004_00008=8) + (x_00009_00008=8) + (x_00002_00008=8) + (x_00007_00008=8) + (x_00005_00008=8))=tv=1))
c Var 'aux111' direct represents '0' with '-1413'
c Var 'aux111' direct represents '1' with '1413'
c Var 'aux111' order represents '1' with '1'
c Var 'aux111' order represents '0' with '-1413'
c Encoding variable: aux112 with domain: bool (representing constraint (((x_00003_00008=9) + (x_00008_00008=9) + (x_00001_00008=9) + (x_00006_00008=9) + (x_00004_00008=9) + (x_00009_00008=9) + (x_00002_00008=9) + (x_00007_00008=9) + (x_00005_00008=9))=tv=1))
c Var 'aux112' direct represents '0' with '-1414'
c Var 'aux112' direct represents '1' with '1414'
c Var 'aux112' order represents '1' with '1'
c Var 'aux112' order represents '0' with '-1414'
c Encoding variable: aux113 with domain: bool (representing constraint (((x_00003_00009=1) + (x_00008_00009=1) + (x_00001_00009=1) + (x_00006_00009=1) + (x_00004_00009=1) + (x_00009_00009=1) + (x_00002_00009=1) + (x_00007_00009=1) + (x_00005_00009=1))=tv=1))
c Var 'aux113' direct represents '0' with '-1415'
c Var 'aux113' direct represents '1' with '1415'
c Var 'aux113' order represents '1' with '1'
c Var 'aux113' order represents '0' with '-1415'
c Encoding variable: aux114 with domain: bool (representing constraint (((x_00003_00009=2) + (x_00008_00009=2) + (x_00001_00009=2) + (x_00006_00009=2) + (x_00004_00009=2) + (x_00009_00009=2) + (x_00002_00009=2) + (x_00007_00009=2) + (x_00005_00009=2))=tv=1))
c Var 'aux114' direct represents '0' with '-1416'
c Var 'aux114' direct represents '1' with '1416'
c Var 'aux114' order represents '1' with '1'
c Var 'aux114' order represents '0' with '-1416'
c Encoding variable: aux115 with domain: bool (representing constraint (((x_00003_00009=3) + (x_00008_00009=3) + (x_00001_00009=3) + (x_00006_00009=3) + (x_00004_00009=3) + (x_00009_00009=3) + (x_00002_00009=3) + (x_00007_00009=3) + (x_00005_00009=3))=tv=1))
c Var 'aux115' direct represents '0' with '-1417'
c Var 'aux115' direct represents '1' with '1417'
c Var 'aux115' order represents '1' with '1'
c Var 'aux115' order represents '0' with '-1417'
c Encoding variable: aux116 with domain: bool (representing constraint (((x_00003_00009=4) + (x_00008_00009=4) + (x_00001_00009=4) + (x_00006_00009=4) + (x_00004_00009=4) + (x_00009_00009=4) + (x_00002_00009=4) + (x_00007_00009=4) + (x_00005_00009=4))=tv=1))
c Var 'aux116' direct represents '0' with '-1418'
c Var 'aux116' direct represents '1' with '1418'
c Var 'aux116' order represents '1' with '1'
c Var 'aux116' order represents '0' with '-1418'
c Encoding variable: aux117 with domain: bool (representing constraint (((x_00003_00009=5) + (x_00008_00009=5) + (x_00001_00009=5) + (x_00006_00009=5) + (x_00004_00009=5) + (x_00009_00009=5) + (x_00002_00009=5) + (x_00007_00009=5) + (x_00005_00009=5))=tv=1))
c Var 'aux117' direct represents '0' with '-1419'
c Var 'aux117' direct represents '1' with '1419'
c Var 'aux117' order represents '1' with '1'
c Var 'aux117' order represents '0' with '-1419'
c Encoding variable: aux118 with domain: bool (representing constraint (((x_00003_00009=6) + (x_00008_00009=6) + (x_00001_00009=6) + (x_00006_00009=6) + (x_00004_00009=6) + (x_00009_00009=6) + (x_00002_00009=6) + (x_00007_00009=6) + (x_00005_00009=6))=tv=1))
c Var 'aux118' direct represents '0' with '-1420'
c Var 'aux118' direct represents '1' with '1420'
c Var 'aux118' order represents '1' with '1'
c Var 'aux118' order represents '0' with '-1420'
c Encoding variable: aux119 with domain: bool (representing constraint (((x_00003_00009=7) + (x_00008_00009=7) + (x_00001_00009=7) + (x_00006_00009=7) + (x_00004_00009=7) + (x_00009_00009=7) + (x_00002_00009=7) + (x_00007_00009=7) + (x_00005_00009=7))=tv=1))
c Var 'aux119' direct represents '0' with '-1421'
c Var 'aux119' direct represents '1' with '1421'
c Var 'aux119' order represents '1' with '1'
c Var 'aux119' order represents '0' with '-1421'
c Encoding variable: aux120 with domain: bool (representing constraint (((x_00003_00009=8) + (x_00008_00009=8) + (x_00001_00009=8) + (x_00006_00009=8) + (x_00004_00009=8) + (x_00009_00009=8) + (x_00002_00009=8) + (x_00007_00009=8) + (x_00005_00009=8))=tv=1))
c Var 'aux120' direct represents '0' with '-1422'
c Var 'aux120' direct represents '1' with '1422'
c Var 'aux120' order represents '1' with '1'
c Var 'aux120' order represents '0' with '-1422'
c Encoding variable: aux121 with domain: bool (representing constraint (((x_00003_00009=9) + (x_00008_00009=9) + (x_00001_00009=9) + (x_00006_00009=9) + (x_00004_00009=9) + (x_00009_00009=9) + (x_00002_00009=9) + (x_00007_00009=9) + (x_00005_00009=9))=tv=1))
c Var 'aux121' direct represents '0' with '-1423'
c Var 'aux121' direct represents '1' with '1423'
c Var 'aux121' order represents '1' with '1'
c Var 'aux121' order represents '0' with '-1423'
c Encoding variable: aux122 with domain: bool (representing constraint (((x_00001_00001=1) + (x_00001_00002=1) + (x_00001_00003=1) + (x_00001_00004=1) + (x_00001_00005=1) + (x_00001_00006=1) + (x_00001_00007=1) + (x_00001_00008=1) + (x_00001_00009=1))=tv=1))
c Var 'aux122' direct represents '0' with '-1424'
c Var 'aux122' direct represents '1' with '1424'
c Var 'aux122' order represents '1' with '1'
c Var 'aux122' order represents '0' with '-1424'
c Encoding variable: aux123 with domain: bool (representing constraint (((x_00001_00001=2) + (x_00001_00002=2) + (x_00001_00003=2) + (x_00001_00004=2) + (x_00001_00005=2) + (x_00001_00006=2) + (x_00001_00007=2) + (x_00001_00008=2) + (x_00001_00009=2))=tv=1))
c Var 'aux123' direct represents '0' with '-1425'
c Var 'aux123' direct represents '1' with '1425'
c Var 'aux123' order represents '1' with '1'
c Var 'aux123' order represents '0' with '-1425'
c Encoding variable: aux124 with domain: bool (representing constraint (((x_00001_00001=3) + (x_00001_00002=3) + (x_00001_00003=3) + (x_00001_00004=3) + (x_00001_00005=3) + (x_00001_00006=3) + (x_00001_00007=3) + (x_00001_00008=3) + (x_00001_00009=3))=tv=1))
c Var 'aux124' direct represents '0' with '-1426'
c Var 'aux124' direct represents '1' with '1426'
c Var 'aux124' order represents '1' with '1'
c Var 'aux124' order represents '0' with '-1426'
c Encoding variable: aux125 with domain: bool (representing constraint (((x_00001_00001=4) + (x_00001_00002=4) + (x_00001_00003=4) + (x_00001_00004=4) + (x_00001_00005=4) + (x_00001_00006=4) + (x_00001_00007=4) + (x_00001_00008=4) + (x_00001_00009=4))=tv=1))
c Var 'aux125' direct represents '0' with '-1427'
c Var 'aux125' direct represents '1' with '1427'
c Var 'aux125' order represents '1' with '1'
c Var 'aux125' order represents '0' with '-1427'
c Encoding variable: aux126 with domain: bool (representing constraint (((x_00001_00001=5) + (x_00001_00002=5) + (x_00001_00003=5) + (x_00001_00004=5) + (x_00001_00005=5) + (x_00001_00006=5) + (x_00001_00007=5) + (x_00001_00008=5) + (x_00001_00009=5))=tv=1))
c Var 'aux126' direct represents '0' with '-1428'
c Var 'aux126' direct represents '1' with '1428'
c Var 'aux126' order represents '1' with '1'
c Var 'aux126' order represents '0' with '-1428'
c Encoding variable: aux127 with domain: bool (representing constraint (((x_00001_00001=6) + (x_00001_00002=6) + (x_00001_00003=6) + (x_00001_00004=6) + (x_00001_00005=6) + (x_00001_00006=6) + (x_00001_00007=6) + (x_00001_00008=6) + (x_00001_00009=6))=tv=1))
c Var 'aux127' direct represents '0' with '-1429'
c Var 'aux127' direct represents '1' with '1429'
c Var 'aux127' order represents '1' with '1'
c Var 'aux127' order represents '0' with '-1429'
c Encoding variable: aux128 with domain: bool (representing constraint (((x_00001_00001=7) + (x_00001_00002=7) + (x_00001_00003=7) + (x_00001_00004=7) + (x_00001_00005=7) + (x_00001_00006=7) + (x_00001_00007=7) + (x_00001_00008=7) + (x_00001_00009=7))=tv=1))
c Var 'aux128' direct represents '0' with '-1430'
c Var 'aux128' direct represents '1' with '1430'
c Var 'aux128' order represents '1' with '1'
c Var 'aux128' order represents '0' with '-1430'
c Encoding variable: aux129 with domain: bool (representing constraint (((x_00001_00001=8) + (x_00001_00002=8) + (x_00001_00003=8) + (x_00001_00004=8) + (x_00001_00005=8) + (x_00001_00006=8) + (x_00001_00007=8) + (x_00001_00008=8) + (x_00001_00009=8))=tv=1))
c Var 'aux129' direct represents '0' with '-1431'
c Var 'aux129' direct represents '1' with '1431'
c Var 'aux129' order represents '1' with '1'
c Var 'aux129' order represents '0' with '-1431'
c Encoding variable: aux130 with domain: bool (representing constraint (((x_00001_00001=9) + (x_00001_00002=9) + (x_00001_00003=9) + (x_00001_00004=9) + (x_00001_00005=9) + (x_00001_00006=9) + (x_00001_00007=9) + (x_00001_00008=9) + (x_00001_00009=9))=tv=1))
c Var 'aux130' direct represents '0' with '-1432'
c Var 'aux130' direct represents '1' with '1432'
c Var 'aux130' order represents '1' with '1'
c Var 'aux130' order represents '0' with '-1432'
c Encoding variable: aux131 with domain: bool (representing constraint (((x_00002_00001=1) + (x_00002_00002=1) + (x_00002_00003=1) + (x_00002_00004=1) + (x_00002_00005=1) + (x_00002_00006=1) + (x_00002_00007=1) + (x_00002_00008=1) + (x_00002_00009=1))=tv=1))
c Var 'aux131' direct represents '0' with '-1433'
c Var 'aux131' direct represents '1' with '1433'
c Var 'aux131' order represents '1' with '1'
c Var 'aux131' order represents '0' with '-1433'
c Encoding variable: aux132 with domain: bool (representing constraint (((x_00002_00001=2) + (x_00002_00002=2) + (x_00002_00003=2) + (x_00002_00004=2) + (x_00002_00005=2) + (x_00002_00006=2) + (x_00002_00007=2) + (x_00002_00008=2) + (x_00002_00009=2))=tv=1))
c Var 'aux132' direct represents '0' with '-1434'
c Var 'aux132' direct represents '1' with '1434'
c Var 'aux132' order represents '1' with '1'
c Var 'aux132' order represents '0' with '-1434'
c Encoding variable: aux133 with domain: bool (representing constraint (((x_00002_00001=3) + (x_00002_00002=3) + (x_00002_00003=3) + (x_00002_00004=3) + (x_00002_00005=3) + (x_00002_00006=3) + (x_00002_00007=3) + (x_00002_00008=3) + (x_00002_00009=3))=tv=1))
c Var 'aux133' direct represents '0' with '-1435'
c Var 'aux133' direct represents '1' with '1435'
c Var 'aux133' order represents '1' with '1'
c Var 'aux133' order represents '0' with '-1435'
c Encoding variable: aux134 with domain: bool (representing constraint (((x_00002_00001=4) + (x_00002_00002=4) + (x_00002_00003=4) + (x_00002_00004=4) + (x_00002_00005=4) + (x_00002_00006=4) + (x_00002_00007=4) + (x_00002_00008=4) + (x_00002_00009=4))=tv=1))
c Var 'aux134' direct represents '0' with '-1436'
c Var 'aux134' direct represents '1' with '1436'
c Var 'aux134' order represents '1' with '1'
c Var 'aux134' order represents '0' with '-1436'
c Encoding variable: aux135 with domain: bool (representing constraint (((x_00002_00001=5) + (x_00002_00002=5) + (x_00002_00003=5) + (x_00002_00004=5) + (x_00002_00005=5) + (x_00002_00006=5) + (x_00002_00007=5) + (x_00002_00008=5) + (x_00002_00009=5))=tv=1))
c Var 'aux135' direct represents '0' with '-1437'
c Var 'aux135' direct represents '1' with '1437'
c Var 'aux135' order represents '1' with '1'
c Var 'aux135' order represents '0' with '-1437'
c Encoding variable: aux136 with domain: bool (representing constraint (((x_00002_00001=6) + (x_00002_00002=6) + (x_00002_00003=6) + (x_00002_00004=6) + (x_00002_00005=6) + (x_00002_00006=6) + (x_00002_00007=6) + (x_00002_00008=6) + (x_00002_00009=6))=tv=1))
c Var 'aux136' direct represents '0' with '-1438'
c Var 'aux136' direct represents '1' with '1438'
c Var 'aux136' order represents '1' with '1'
c Var 'aux136' order represents '0' with '-1438'
c Encoding variable: aux137 with domain: bool (representing constraint (((x_00002_00001=7) + (x_00002_00002=7) + (x_00002_00003=7) + (x_00002_00004=7) + (x_00002_00005=7) + (x_00002_00006=7) + (x_00002_00007=7) + (x_00002_00008=7) + (x_00002_00009=7))=tv=1))
c Var 'aux137' direct represents '0' with '-1439'
c Var 'aux137' direct represents '1' with '1439'
c Var 'aux137' order represents '1' with '1'
c Var 'aux137' order represents '0' with '-1439'
c Encoding variable: aux138 with domain: bool (representing constraint (((x_00002_00001=8) + (x_00002_00002=8) + (x_00002_00003=8) + (x_00002_00004=8) + (x_00002_00005=8) + (x_00002_00006=8) + (x_00002_00007=8) + (x_00002_00008=8) + (x_00002_00009=8))=tv=1))
c Var 'aux138' direct represents '0' with '-1440'
c Var 'aux138' direct represents '1' with '1440'
c Var 'aux138' order represents '1' with '1'
c Var 'aux138' order represents '0' with '-1440'
c Encoding variable: aux139 with domain: bool (representing constraint (((x_00002_00001=9) + (x_00002_00002=9) + (x_00002_00003=9) + (x_00002_00004=9) + (x_00002_00005=9) + (x_00002_00006=9) + (x_00002_00007=9) + (x_00002_00008=9) + (x_00002_00009=9))=tv=1))
c Var 'aux139' direct represents '0' with '-1441'
c Var 'aux139' direct represents '1' with '1441'
c Var 'aux139' order represents '1' with '1'
c Var 'aux139' order represents '0' with '-1441'
c Encoding variable: aux140 with domain: bool (representing constraint (((x_00003_00001=1) + (x_00003_00002=1) + (x_00003_00003=1) + (x_00003_00004=1) + (x_00003_00005=1) + (x_00003_00006=1) + (x_00003_00007=1) + (x_00003_00008=1) + (x_00003_00009=1))=tv=1))
c Var 'aux140' direct represents '0' with '-1442'
c Var 'aux140' direct represents '1' with '1442'
c Var 'aux140' order represents '1' with '1'
c Var 'aux140' order represents '0' with '-1442'
c Encoding variable: aux141 with domain: bool (representing constraint (((x_00003_00001=2) + (x_00003_00002=2) + (x_00003_00003=2) + (x_00003_00004=2) + (x_00003_00005=2) + (x_00003_00006=2) + (x_00003_00007=2) + (x_00003_00008=2) + (x_00003_00009=2))=tv=1))
c Var 'aux141' direct represents '0' with '-1443'
c Var 'aux141' direct represents '1' with '1443'
c Var 'aux141' order represents '1' with '1'
c Var 'aux141' order represents '0' with '-1443'
c Encoding variable: aux142 with domain: bool (representing constraint (((x_00003_00001=3) + (x_00003_00002=3) + (x_00003_00003=3) + (x_00003_00004=3) + (x_00003_00005=3) + (x_00003_00006=3) + (x_00003_00007=3) + (x_00003_00008=3) + (x_00003_00009=3))=tv=1))
c Var 'aux142' direct represents '0' with '-1444'
c Var 'aux142' direct represents '1' with '1444'
c Var 'aux142' order represents '1' with '1'
c Var 'aux142' order represents '0' with '-1444'
c Encoding variable: aux143 with domain: bool (representing constraint (((x_00003_00001=4) + (x_00003_00002=4) + (x_00003_00003=4) + (x_00003_00004=4) + (x_00003_00005=4) + (x_00003_00006=4) + (x_00003_00007=4) + (x_00003_00008=4) + (x_00003_00009=4))=tv=1))
c Var 'aux143' direct represents '0' with '-1445'
c Var 'aux143' direct represents '1' with '1445'
c Var 'aux143' order represents '1' with '1'
c Var 'aux143' order represents '0' with '-1445'
c Encoding variable: aux144 with domain: bool (representing constraint (((x_00003_00001=5) + (x_00003_00002=5) + (x_00003_00003=5) + (x_00003_00004=5) + (x_00003_00005=5) + (x_00003_00006=5) + (x_00003_00007=5) + (x_00003_00008=5) + (x_00003_00009=5))=tv=1))
c Var 'aux144' direct represents '0' with '-1446'
c Var 'aux144' direct represents '1' with '1446'
c Var 'aux144' order represents '1' with '1'
c Var 'aux144' order represents '0' with '-1446'
c Encoding variable: aux145 with domain: bool (representing constraint (((x_00003_00001=6) + (x_00003_00002=6) + (x_00003_00003=6) + (x_00003_00004=6) + (x_00003_00005=6) + (x_00003_00006=6) + (x_00003_00007=6) + (x_00003_00008=6) + (x_00003_00009=6))=tv=1))
c Var 'aux145' direct represents '0' with '-1447'
c Var 'aux145' direct represents '1' with '1447'
c Var 'aux145' order represents '1' with '1'
c Var 'aux145' order represents '0' with '-1447'
c Encoding variable: aux146 with domain: bool (representing constraint (((x_00003_00001=7) + (x_00003_00002=7) + (x_00003_00003=7) + (x_00003_00004=7) + (x_00003_00005=7) + (x_00003_00006=7) + (x_00003_00007=7) + (x_00003_00008=7) + (x_00003_00009=7))=tv=1))
c Var 'aux146' direct represents '0' with '-1448'
c Var 'aux146' direct represents '1' with '1448'
c Var 'aux146' order represents '1' with '1'
c Var 'aux146' order represents '0' with '-1448'
c Encoding variable: aux147 with domain: bool (representing constraint (((x_00003_00001=8) + (x_00003_00002=8) + (x_00003_00003=8) + (x_00003_00004=8) + (x_00003_00005=8) + (x_00003_00006=8) + (x_00003_00007=8) + (x_00003_00008=8) + (x_00003_00009=8))=tv=1))
c Var 'aux147' direct represents '0' with '-1449'
c Var 'aux147' direct represents '1' with '1449'
c Var 'aux147' order represents '1' with '1'
c Var 'aux147' order represents '0' with '-1449'
c Encoding variable: aux148 with domain: bool (representing constraint (((x_00003_00001=9) + (x_00003_00002=9) + (x_00003_00003=9) + (x_00003_00004=9) + (x_00003_00005=9) + (x_00003_00006=9) + (x_00003_00007=9) + (x_00003_00008=9) + (x_00003_00009=9))=tv=1))
c Var 'aux148' direct represents '0' with '-1450'
c Var 'aux148' direct represents '1' with '1450'
c Var 'aux148' order represents '1' with '1'
c Var 'aux148' order represents '0' with '-1450'
c Encoding variable: aux149 with domain: bool (representing constraint (((x_00004_00001=1) + (x_00004_00002=1) + (x_00004_00003=1) + (x_00004_00004=1) + (x_00004_00005=1) + (x_00004_00006=1) + (x_00004_00007=1) + (x_00004_00008=1) + (x_00004_00009=1))=tv=1))
c Var 'aux149' direct represents '0' with '-1451'
c Var 'aux149' direct represents '1' with '1451'
c Var 'aux149' order represents '1' with '1'
c Var 'aux149' order represents '0' with '-1451'
c Encoding variable: aux150 with domain: bool (representing constraint (((x_00004_00001=2) + (x_00004_00002=2) + (x_00004_00003=2) + (x_00004_00004=2) + (x_00004_00005=2) + (x_00004_00006=2) + (x_00004_00007=2) + (x_00004_00008=2) + (x_00004_00009=2))=tv=1))
c Var 'aux150' direct represents '0' with '-1452'
c Var 'aux150' direct represents '1' with '1452'
c Var 'aux150' order represents '1' with '1'
c Var 'aux150' order represents '0' with '-1452'
c Encoding variable: aux151 with domain: bool (representing constraint (((x_00004_00001=3) + (x_00004_00002=3) + (x_00004_00003=3) + (x_00004_00004=3) + (x_00004_00005=3) + (x_00004_00006=3) + (x_00004_00007=3) + (x_00004_00008=3) + (x_00004_00009=3))=tv=1))
c Var 'aux151' direct represents '0' with '-1453'
c Var 'aux151' direct represents '1' with '1453'
c Var 'aux151' order represents '1' with '1'
c Var 'aux151' order represents '0' with '-1453'
c Encoding variable: aux152 with domain: bool (representing constraint (((x_00004_00001=4) + (x_00004_00002=4) + (x_00004_00003=4) + (x_00004_00004=4) + (x_00004_00005=4) + (x_00004_00006=4) + (x_00004_00007=4) + (x_00004_00008=4) + (x_00004_00009=4))=tv=1))
c Var 'aux152' direct represents '0' with '-1454'
c Var 'aux152' direct represents '1' with '1454'
c Var 'aux152' order represents '1' with '1'
c Var 'aux152' order represents '0' with '-1454'
c Encoding variable: aux153 with domain: bool (representing constraint (((x_00004_00001=5) + (x_00004_00002=5) + (x_00004_00003=5) + (x_00004_00004=5) + (x_00004_00005=5) + (x_00004_00006=5) + (x_00004_00007=5) + (x_00004_00008=5) + (x_00004_00009=5))=tv=1))
c Var 'aux153' direct represents '0' with '-1455'
c Var 'aux153' direct represents '1' with '1455'
c Var 'aux153' order represents '1' with '1'
c Var 'aux153' order represents '0' with '-1455'
c Encoding variable: aux154 with domain: bool (representing constraint (((x_00004_00001=6) + (x_00004_00002=6) + (x_00004_00003=6) + (x_00004_00004=6) + (x_00004_00005=6) + (x_00004_00006=6) + (x_00004_00007=6) + (x_00004_00008=6) + (x_00004_00009=6))=tv=1))
c Var 'aux154' direct represents '0' with '-1456'
c Var 'aux154' direct represents '1' with '1456'
c Var 'aux154' order represents '1' with '1'
c Var 'aux154' order represents '0' with '-1456'
c Encoding variable: aux155 with domain: bool (representing constraint (((x_00004_00001=7) + (x_00004_00002=7) + (x_00004_00003=7) + (x_00004_00004=7) + (x_00004_00005=7) + (x_00004_00006=7) + (x_00004_00007=7) + (x_00004_00008=7) + (x_00004_00009=7))=tv=1))
c Var 'aux155' direct represents '0' with '-1457'
c Var 'aux155' direct represents '1' with '1457'
c Var 'aux155' order represents '1' with '1'
c Var 'aux155' order represents '0' with '-1457'
c Encoding variable: aux156 with domain: bool (representing constraint (((x_00004_00001=8) + (x_00004_00002=8) + (x_00004_00003=8) + (x_00004_00004=8) + (x_00004_00005=8) + (x_00004_00006=8) + (x_00004_00007=8) + (x_00004_00008=8) + (x_00004_00009=8))=tv=1))
c Var 'aux156' direct represents '0' with '-1458'
c Var 'aux156' direct represents '1' with '1458'
c Var 'aux156' order represents '1' with '1'
c Var 'aux156' order represents '0' with '-1458'
c Encoding variable: aux157 with domain: bool (representing constraint (((x_00004_00001=9) + (x_00004_00002=9) + (x_00004_00003=9) + (x_00004_00004=9) + (x_00004_00005=9) + (x_00004_00006=9) + (x_00004_00007=9) + (x_00004_00008=9) + (x_00004_00009=9))=tv=1))
c Var 'aux157' direct represents '0' with '-1459'
c Var 'aux157' direct represents '1' with '1459'
c Var 'aux157' order represents '1' with '1'
c Var 'aux157' order represents '0' with '-1459'
c Encoding variable: aux158 with domain: bool (representing constraint (((x_00005_00001=1) + (x_00005_00002=1) + (x_00005_00003=1) + (x_00005_00004=1) + (x_00005_00005=1) + (x_00005_00006=1) + (x_00005_00007=1) + (x_00005_00008=1) + (x_00005_00009=1))=tv=1))
c Var 'aux158' direct represents '0' with '-1460'
c Var 'aux158' direct represents '1' with '1460'
c Var 'aux158' order represents '1' with '1'
c Var 'aux158' order represents '0' with '-1460'
c Encoding variable: aux159 with domain: bool (representing constraint (((x_00005_00001=2) + (x_00005_00002=2) + (x_00005_00003=2) + (x_00005_00004=2) + (x_00005_00005=2) + (x_00005_00006=2) + (x_00005_00007=2) + (x_00005_00008=2) + (x_00005_00009=2))=tv=1))
c Var 'aux159' direct represents '0' with '-1461'
c Var 'aux159' direct represents '1' with '1461'
c Var 'aux159' order represents '1' with '1'
c Var 'aux159' order represents '0' with '-1461'
c Encoding variable: aux160 with domain: bool (representing constraint (((x_00005_00001=3) + (x_00005_00002=3) + (x_00005_00003=3) + (x_00005_00004=3) + (x_00005_00005=3) + (x_00005_00006=3) + (x_00005_00007=3) + (x_00005_00008=3) + (x_00005_00009=3))=tv=1))
c Var 'aux160' direct represents '0' with '-1462'
c Var 'aux160' direct represents '1' with '1462'
c Var 'aux160' order represents '1' with '1'
c Var 'aux160' order represents '0' with '-1462'
c Encoding variable: aux161 with domain: bool (representing constraint (((x_00005_00001=4) + (x_00005_00002=4) + (x_00005_00003=4) + (x_00005_00004=4) + (x_00005_00005=4) + (x_00005_00006=4) + (x_00005_00007=4) + (x_00005_00008=4) + (x_00005_00009=4))=tv=1))
c Var 'aux161' direct represents '0' with '-1463'
c Var 'aux161' direct represents '1' with '1463'
c Var 'aux161' order represents '1' with '1'
c Var 'aux161' order represents '0' with '-1463'
c Encoding variable: aux162 with domain: bool (representing constraint (((x_00005_00001=5) + (x_00005_00002=5) + (x_00005_00003=5) + (x_00005_00004=5) + (x_00005_00005=5) + (x_00005_00006=5) + (x_00005_00007=5) + (x_00005_00008=5) + (x_00005_00009=5))=tv=1))
c Var 'aux162' direct represents '0' with '-1464'
c Var 'aux162' direct represents '1' with '1464'
c Var 'aux162' order represents '1' with '1'
c Var 'aux162' order represents '0' with '-1464'
c Encoding variable: aux163 with domain: bool (representing constraint (((x_00005_00001=6) + (x_00005_00002=6) + (x_00005_00003=6) + (x_00005_00004=6) + (x_00005_00005=6) + (x_00005_00006=6) + (x_00005_00007=6) + (x_00005_00008=6) + (x_00005_00009=6))=tv=1))
c Var 'aux163' direct represents '0' with '-1465'
c Var 'aux163' direct represents '1' with '1465'
c Var 'aux163' order represents '1' with '1'
c Var 'aux163' order represents '0' with '-1465'
c Encoding variable: aux164 with domain: bool (representing constraint (((x_00005_00001=7) + (x_00005_00002=7) + (x_00005_00003=7) + (x_00005_00004=7) + (x_00005_00005=7) + (x_00005_00006=7) + (x_00005_00007=7) + (x_00005_00008=7) + (x_00005_00009=7))=tv=1))
c Var 'aux164' direct represents '0' with '-1466'
c Var 'aux164' direct represents '1' with '1466'
c Var 'aux164' order represents '1' with '1'
c Var 'aux164' order represents '0' with '-1466'
c Encoding variable: aux165 with domain: bool (representing constraint (((x_00005_00001=8) + (x_00005_00002=8) + (x_00005_00003=8) + (x_00005_00004=8) + (x_00005_00005=8) + (x_00005_00006=8) + (x_00005_00007=8) + (x_00005_00008=8) + (x_00005_00009=8))=tv=1))
c Var 'aux165' direct represents '0' with '-1467'
c Var 'aux165' direct represents '1' with '1467'
c Var 'aux165' order represents '1' with '1'
c Var 'aux165' order represents '0' with '-1467'
c Encoding variable: aux166 with domain: bool (representing constraint (((x_00005_00001=9) + (x_00005_00002=9) + (x_00005_00003=9) + (x_00005_00004=9) + (x_00005_00005=9) + (x_00005_00006=9) + (x_00005_00007=9) + (x_00005_00008=9) + (x_00005_00009=9))=tv=1))
c Var 'aux166' direct represents '0' with '-1468'
c Var 'aux166' direct represents '1' with '1468'
c Var 'aux166' order represents '1' with '1'
c Var 'aux166' order represents '0' with '-1468'
c Encoding variable: aux167 with domain: bool (representing constraint (((x_00006_00001=1) + (x_00006_00002=1) + (x_00006_00003=1) + (x_00006_00004=1) + (x_00006_00005=1) + (x_00006_00006=1) + (x_00006_00007=1) + (x_00006_00008=1) + (x_00006_00009=1))=tv=1))
c Var 'aux167' direct represents '0' with '-1469'
c Var 'aux167' direct represents '1' with '1469'
c Var 'aux167' order represents '1' with '1'
c Var 'aux167' order represents '0' with '-1469'
c Encoding variable: aux168 with domain: bool (representing constraint (((x_00006_00001=2) + (x_00006_00002=2) + (x_00006_00003=2) + (x_00006_00004=2) + (x_00006_00005=2) + (x_00006_00006=2) + (x_00006_00007=2) + (x_00006_00008=2) + (x_00006_00009=2))=tv=1))
c Var 'aux168' direct represents '0' with '-1470'
c Var 'aux168' direct represents '1' with '1470'
c Var 'aux168' order represents '1' with '1'
c Var 'aux168' order represents '0' with '-1470'
c Encoding variable: aux169 with domain: bool (representing constraint (((x_00006_00001=3) + (x_00006_00002=3) + (x_00006_00003=3) + (x_00006_00004=3) + (x_00006_00005=3) + (x_00006_00006=3) + (x_00006_00007=3) + (x_00006_00008=3) + (x_00006_00009=3))=tv=1))
c Var 'aux169' direct represents '0' with '-1471'
c Var 'aux169' direct represents '1' with '1471'
c Var 'aux169' order represents '1' with '1'
c Var 'aux169' order represents '0' with '-1471'
c Encoding variable: aux170 with domain: bool (representing constraint (((x_00006_00001=4) + (x_00006_00002=4) + (x_00006_00003=4) + (x_00006_00004=4) + (x_00006_00005=4) + (x_00006_00006=4) + (x_00006_00007=4) + (x_00006_00008=4) + (x_00006_00009=4))=tv=1))
c Var 'aux170' direct represents '0' with '-1472'
c Var 'aux170' direct represents '1' with '1472'
c Var 'aux170' order represents '1' with '1'
c Var 'aux170' order represents '0' with '-1472'
c Encoding variable: aux171 with domain: bool (representing constraint (((x_00006_00001=5) + (x_00006_00002=5) + (x_00006_00003=5) + (x_00006_00004=5) + (x_00006_00005=5) + (x_00006_00006=5) + (x_00006_00007=5) + (x_00006_00008=5) + (x_00006_00009=5))=tv=1))
c Var 'aux171' direct represents '0' with '-1473'
c Var 'aux171' direct represents '1' with '1473'
c Var 'aux171' order represents '1' with '1'
c Var 'aux171' order represents '0' with '-1473'
c Encoding variable: aux172 with domain: bool (representing constraint (((x_00006_00001=6) + (x_00006_00002=6) + (x_00006_00003=6) + (x_00006_00004=6) + (x_00006_00005=6) + (x_00006_00006=6) + (x_00006_00007=6) + (x_00006_00008=6) + (x_00006_00009=6))=tv=1))
c Var 'aux172' direct represents '0' with '-1474'
c Var 'aux172' direct represents '1' with '1474'
c Var 'aux172' order represents '1' with '1'
c Var 'aux172' order represents '0' with '-1474'
c Encoding variable: aux173 with domain: bool (representing constraint (((x_00006_00001=7) + (x_00006_00002=7) + (x_00006_00003=7) + (x_00006_00004=7) + (x_00006_00005=7) + (x_00006_00006=7) + (x_00006_00007=7) + (x_00006_00008=7) + (x_00006_00009=7))=tv=1))
c Var 'aux173' direct represents '0' with '-1475'
c Var 'aux173' direct represents '1' with '1475'
c Var 'aux173' order represents '1' with '1'
c Var 'aux173' order represents '0' with '-1475'
c Encoding variable: aux174 with domain: bool (representing constraint (((x_00006_00001=8) + (x_00006_00002=8) + (x_00006_00003=8) + (x_00006_00004=8) + (x_00006_00005=8) + (x_00006_00006=8) + (x_00006_00007=8) + (x_00006_00008=8) + (x_00006_00009=8))=tv=1))
c Var 'aux174' direct represents '0' with '-1476'
c Var 'aux174' direct represents '1' with '1476'
c Var 'aux174' order represents '1' with '1'
c Var 'aux174' order represents '0' with '-1476'
c Encoding variable: aux175 with domain: bool (representing constraint (((x_00006_00001=9) + (x_00006_00002=9) + (x_00006_00003=9) + (x_00006_00004=9) + (x_00006_00005=9) + (x_00006_00006=9) + (x_00006_00007=9) + (x_00006_00008=9) + (x_00006_00009=9))=tv=1))
c Var 'aux175' direct represents '0' with '-1477'
c Var 'aux175' direct represents '1' with '1477'
c Var 'aux175' order represents '1' with '1'
c Var 'aux175' order represents '0' with '-1477'
c Encoding variable: aux176 with domain: bool (representing constraint (((x_00007_00001=1) + (x_00007_00002=1) + (x_00007_00003=1) + (x_00007_00004=1) + (x_00007_00005=1) + (x_00007_00006=1) + (x_00007_00007=1) + (x_00007_00008=1) + (x_00007_00009=1))=tv=1))
c Var 'aux176' direct represents '0' with '-1478'
c Var 'aux176' direct represents '1' with '1478'
c Var 'aux176' order represents '1' with '1'
c Var 'aux176' order represents '0' with '-1478'
c Encoding variable: aux177 with domain: bool (representing constraint (((x_00007_00001=2) + (x_00007_00002=2) + (x_00007_00003=2) + (x_00007_00004=2) + (x_00007_00005=2) + (x_00007_00006=2) + (x_00007_00007=2) + (x_00007_00008=2) + (x_00007_00009=2))=tv=1))
c Var 'aux177' direct represents '0' with '-1479'
c Var 'aux177' direct represents '1' with '1479'
c Var 'aux177' order represents '1' with '1'
c Var 'aux177' order represents '0' with '-1479'
c Encoding variable: aux178 with domain: bool (representing constraint (((x_00007_00001=3) + (x_00007_00002=3) + (x_00007_00003=3) + (x_00007_00004=3) + (x_00007_00005=3) + (x_00007_00006=3) + (x_00007_00007=3) + (x_00007_00008=3) + (x_00007_00009=3))=tv=1))
c Var 'aux178' direct represents '0' with '-1480'
c Var 'aux178' direct represents '1' with '1480'
c Var 'aux178' order represents '1' with '1'
c Var 'aux178' order represents '0' with '-1480'
c Encoding variable: aux179 with domain: bool (representing constraint (((x_00007_00001=4) + (x_00007_00002=4) + (x_00007_00003=4) + (x_00007_00004=4) + (x_00007_00005=4) + (x_00007_00006=4) + (x_00007_00007=4) + (x_00007_00008=4) + (x_00007_00009=4))=tv=1))
c Var 'aux179' direct represents '0' with '-1481'
c Var 'aux179' direct represents '1' with '1481'
c Var 'aux179' order represents '1' with '1'
c Var 'aux179' order represents '0' with '-1481'
c Encoding variable: aux180 with domain: bool (representing constraint (((x_00007_00001=5) + (x_00007_00002=5) + (x_00007_00003=5) + (x_00007_00004=5) + (x_00007_00005=5) + (x_00007_00006=5) + (x_00007_00007=5) + (x_00007_00008=5) + (x_00007_00009=5))=tv=1))
c Var 'aux180' direct represents '0' with '-1482'
c Var 'aux180' direct represents '1' with '1482'
c Var 'aux180' order represents '1' with '1'
c Var 'aux180' order represents '0' with '-1482'
c Encoding variable: aux181 with domain: bool (representing constraint (((x_00007_00001=6) + (x_00007_00002=6) + (x_00007_00003=6) + (x_00007_00004=6) + (x_00007_00005=6) + (x_00007_00006=6) + (x_00007_00007=6) + (x_00007_00008=6) + (x_00007_00009=6))=tv=1))
c Var 'aux181' direct represents '0' with '-1483'
c Var 'aux181' direct represents '1' with '1483'
c Var 'aux181' order represents '1' with '1'
c Var 'aux181' order represents '0' with '-1483'
c Encoding variable: aux182 with domain: bool (representing constraint (((x_00007_00001=7) + (x_00007_00002=7) + (x_00007_00003=7) + (x_00007_00004=7) + (x_00007_00005=7) + (x_00007_00006=7) + (x_00007_00007=7) + (x_00007_00008=7) + (x_00007_00009=7))=tv=1))
c Var 'aux182' direct represents '0' with '-1484'
c Var 'aux182' direct represents '1' with '1484'
c Var 'aux182' order represents '1' with '1'
c Var 'aux182' order represents '0' with '-1484'
c Encoding variable: aux183 with domain: bool (representing constraint (((x_00007_00001=8) + (x_00007_00002=8) + (x_00007_00003=8) + (x_00007_00004=8) + (x_00007_00005=8) + (x_00007_00006=8) + (x_00007_00007=8) + (x_00007_00008=8) + (x_00007_00009=8))=tv=1))
c Var 'aux183' direct represents '0' with '-1485'
c Var 'aux183' direct represents '1' with '1485'
c Var 'aux183' order represents '1' with '1'
c Var 'aux183' order represents '0' with '-1485'
c Encoding variable: aux184 with domain: bool (representing constraint (((x_00007_00001=9) + (x_00007_00002=9) + (x_00007_00003=9) + (x_00007_00004=9) + (x_00007_00005=9) + (x_00007_00006=9) + (x_00007_00007=9) + (x_00007_00008=9) + (x_00007_00009=9))=tv=1))
c Var 'aux184' direct represents '0' with '-1486'
c Var 'aux184' direct represents '1' with '1486'
c Var 'aux184' order represents '1' with '1'
c Var 'aux184' order represents '0' with '-1486'
c Encoding variable: aux185 with domain: bool (representing constraint (((x_00008_00001=1) + (x_00008_00002=1) + (x_00008_00003=1) + (x_00008_00004=1) + (x_00008_00005=1) + (x_00008_00006=1) + (x_00008_00007=1) + (x_00008_00008=1) + (x_00008_00009=1))=tv=1))
c Var 'aux185' direct represents '0' with '-1487'
c Var 'aux185' direct represents '1' with '1487'
c Var 'aux185' order represents '1' with '1'
c Var 'aux185' order represents '0' with '-1487'
c Encoding variable: aux186 with domain: bool (representing constraint (((x_00008_00001=2) + (x_00008_00002=2) + (x_00008_00003=2) + (x_00008_00004=2) + (x_00008_00005=2) + (x_00008_00006=2) + (x_00008_00007=2) + (x_00008_00008=2) + (x_00008_00009=2))=tv=1))
c Var 'aux186' direct represents '0' with '-1488'
c Var 'aux186' direct represents '1' with '1488'
c Var 'aux186' order represents '1' with '1'
c Var 'aux186' order represents '0' with '-1488'
c Encoding variable: aux187 with domain: bool (representing constraint (((x_00008_00001=3) + (x_00008_00002=3) + (x_00008_00003=3) + (x_00008_00004=3) + (x_00008_00005=3) + (x_00008_00006=3) + (x_00008_00007=3) + (x_00008_00008=3) + (x_00008_00009=3))=tv=1))
c Var 'aux187' direct represents '0' with '-1489'
c Var 'aux187' direct represents '1' with '1489'
c Var 'aux187' order represents '1' with '1'
c Var 'aux187' order represents '0' with '-1489'
c Encoding variable: aux188 with domain: bool (representing constraint (((x_00008_00001=4) + (x_00008_00002=4) + (x_00008_00003=4) + (x_00008_00004=4) + (x_00008_00005=4) + (x_00008_00006=4) + (x_00008_00007=4) + (x_00008_00008=4) + (x_00008_00009=4))=tv=1))
c Var 'aux188' direct represents '0' with '-1490'
c Var 'aux188' direct represents '1' with '1490'
c Var 'aux188' order represents '1' with '1'
c Var 'aux188' order represents '0' with '-1490'
c Encoding variable: aux189 with domain: bool (representing constraint (((x_00008_00001=5) + (x_00008_00002=5) + (x_00008_00003=5) + (x_00008_00004=5) + (x_00008_00005=5) + (x_00008_00006=5) + (x_00008_00007=5) + (x_00008_00008=5) + (x_00008_00009=5))=tv=1))
c Var 'aux189' direct represents '0' with '-1491'
c Var 'aux189' direct represents '1' with '1491'
c Var 'aux189' order represents '1' with '1'
c Var 'aux189' order represents '0' with '-1491'
c Encoding variable: aux190 with domain: bool (representing constraint (((x_00008_00001=6) + (x_00008_00002=6) + (x_00008_00003=6) + (x_00008_00004=6) + (x_00008_00005=6) + (x_00008_00006=6) + (x_00008_00007=6) + (x_00008_00008=6) + (x_00008_00009=6))=tv=1))
c Var 'aux190' direct represents '0' with '-1492'
c Var 'aux190' direct represents '1' with '1492'
c Var 'aux190' order represents '1' with '1'
c Var 'aux190' order represents '0' with '-1492'
c Encoding variable: aux191 with domain: bool (representing constraint (((x_00008_00001=7) + (x_00008_00002=7) + (x_00008_00003=7) + (x_00008_00004=7) + (x_00008_00005=7) + (x_00008_00006=7) + (x_00008_00007=7) + (x_00008_00008=7) + (x_00008_00009=7))=tv=1))
c Var 'aux191' direct represents '0' with '-1493'
c Var 'aux191' direct represents '1' with '1493'
c Var 'aux191' order represents '1' with '1'
c Var 'aux191' order represents '0' with '-1493'
c Encoding variable: aux192 with domain: bool (representing constraint (((x_00008_00001=8) + (x_00008_00002=8) + (x_00008_00003=8) + (x_00008_00004=8) + (x_00008_00005=8) + (x_00008_00006=8) + (x_00008_00007=8) + (x_00008_00008=8) + (x_00008_00009=8))=tv=1))
c Var 'aux192' direct represents '0' with '-1494'
c Var 'aux192' direct represents '1' with '1494'
c Var 'aux192' order represents '1' with '1'
c Var 'aux192' order represents '0' with '-1494'
c Encoding variable: aux193 with domain: bool (representing constraint (((x_00008_00001=9) + (x_00008_00002=9) + (x_00008_00003=9) + (x_00008_00004=9) + (x_00008_00005=9) + (x_00008_00006=9) + (x_00008_00007=9) + (x_00008_00008=9) + (x_00008_00009=9))=tv=1))
c Var 'aux193' direct represents '0' with '-1495'
c Var 'aux193' direct represents '1' with '1495'
c Var 'aux193' order represents '1' with '1'
c Var 'aux193' order represents '0' with '-1495'
c Encoding variable: aux194 with domain: bool (representing constraint (((x_00009_00001=1) + (x_00009_00002=1) + (x_00009_00003=1) + (x_00009_00004=1) + (x_00009_00005=1) + (x_00009_00006=1) + (x_00009_00007=1) + (x_00009_00008=1) + (x_00009_00009=1))=tv=1))
c Var 'aux194' direct represents '0' with '-1496'
c Var 'aux194' direct represents '1' with '1496'
c Var 'aux194' order represents '1' with '1'
c Var 'aux194' order represents '0' with '-1496'
c Encoding variable: aux195 with domain: bool (representing constraint (((x_00009_00001=2) + (x_00009_00002=2) + (x_00009_00003=2) + (x_00009_00004=2) + (x_00009_00005=2) + (x_00009_00006=2) + (x_00009_00007=2) + (x_00009_00008=2) + (x_00009_00009=2))=tv=1))
c Var 'aux195' direct represents '0' with '-1497'
c Var 'aux195' direct represents '1' with '1497'
c Var 'aux195' order represents '1' with '1'
c Var 'aux195' order represents '0' with '-1497'
c Encoding variable: aux196 with domain: bool (representing constraint (((x_00009_00001=3) + (x_00009_00002=3) + (x_00009_00003=3) + (x_00009_00004=3) + (x_00009_00005=3) + (x_00009_00006=3) + (x_00009_00007=3) + (x_00009_00008=3) + (x_00009_00009=3))=tv=1))
c Var 'aux196' direct represents '0' with '-1498'
c Var 'aux196' direct represents '1' with '1498'
c Var 'aux196' order represents '1' with '1'
c Var 'aux196' order represents '0' with '-1498'
c Encoding variable: aux197 with domain: bool (representing constraint (((x_00009_00001=4) + (x_00009_00002=4) + (x_00009_00003=4) + (x_00009_00004=4) + (x_00009_00005=4) + (x_00009_00006=4) + (x_00009_00007=4) + (x_00009_00008=4) + (x_00009_00009=4))=tv=1))
c Var 'aux197' direct represents '0' with '-1499'
c Var 'aux197' direct represents '1' with '1499'
c Var 'aux197' order represents '1' with '1'
c Var 'aux197' order represents '0' with '-1499'
c Encoding variable: aux198 with domain: bool (representing constraint (((x_00009_00001=5) + (x_00009_00002=5) + (x_00009_00003=5) + (x_00009_00004=5) + (x_00009_00005=5) + (x_00009_00006=5) + (x_00009_00007=5) + (x_00009_00008=5) + (x_00009_00009=5))=tv=1))
c Var 'aux198' direct represents '0' with '-1500'
c Var 'aux198' direct represents '1' with '1500'
c Var 'aux198' order represents '1' with '1'
c Var 'aux198' order represents '0' with '-1500'
c Encoding variable: aux199 with domain: bool (representing constraint (((x_00009_00001=6) + (x_00009_00002=6) + (x_00009_00003=6) + (x_00009_00004=6) + (x_00009_00005=6) + (x_00009_00006=6) + (x_00009_00007=6) + (x_00009_00008=6) + (x_00009_00009=6))=tv=1))
c Var 'aux199' direct represents '0' with '-1501'
c Var 'aux199' direct represents '1' with '1501'
c Var 'aux199' order represents '1' with '1'
c Var 'aux199' order represents '0' with '-1501'
c Encoding variable: aux200 with domain: bool (representing constraint (((x_00009_00001=7) + (x_00009_00002=7) + (x_00009_00003=7) + (x_00009_00004=7) + (x_00009_00005=7) + (x_00009_00006=7) + (x_00009_00007=7) + (x_00009_00008=7) + (x_00009_00009=7))=tv=1))
c Var 'aux200' direct represents '0' with '-1502'
c Var 'aux200' direct represents '1' with '1502'
c Var 'aux200' order represents '1' with '1'
c Var 'aux200' order represents '0' with '-1502'
c Encoding variable: aux201 with domain: bool (representing constraint (((x_00009_00001=8) + (x_00009_00002=8) + (x_00009_00003=8) + (x_00009_00004=8) + (x_00009_00005=8) + (x_00009_00006=8) + (x_00009_00007=8) + (x_00009_00008=8) + (x_00009_00009=8))=tv=1))
c Var 'aux201' direct represents '0' with '-1503'
c Var 'aux201' direct represents '1' with '1503'
c Var 'aux201' order represents '1' with '1'
c Var 'aux201' order represents '0' with '-1503'
c Encoding variable: aux202 with domain: bool (representing constraint (((x_00009_00001=9) + (x_00009_00002=9) + (x_00009_00003=9) + (x_00009_00004=9) + (x_00009_00005=9) + (x_00009_00006=9) + (x_00009_00007=9) + (x_00009_00008=9) + (x_00009_00009=9))=tv=1))
c Var 'aux202' direct represents '0' with '-1504'
c Var 'aux202' direct represents '1' with '1504'
c Var 'aux202' order represents '1' with '1'
c Var 'aux202' order represents '0' with '-1504'
c Encoding variable: aux203 with domain: bool (representing constraint (((x_00003_00001=1) + (x_00003_00002=1) + (x_00003_00003=1) + (x_00001_00001=1) + (x_00001_00002=1) + (x_00001_00003=1) + (x_00002_00001=1) + (x_00002_00002=1) + (x_00002_00003=1))=tv=1))
c Var 'aux203' direct represents '0' with '-1505'
c Var 'aux203' direct represents '1' with '1505'
c Var 'aux203' order represents '1' with '1'
c Var 'aux203' order represents '0' with '-1505'
c Encoding variable: aux204 with domain: bool (representing constraint (((x_00003_00001=2) + (x_00003_00002=2) + (x_00003_00003=2) + (x_00001_00001=2) + (x_00001_00002=2) + (x_00001_00003=2) + (x_00002_00001=2) + (x_00002_00002=2) + (x_00002_00003=2))=tv=1))
c Var 'aux204' direct represents '0' with '-1506'
c Var 'aux204' direct represents '1' with '1506'
c Var 'aux204' order represents '1' with '1'
c Var 'aux204' order represents '0' with '-1506'
c Encoding variable: aux205 with domain: bool (representing constraint (((x_00003_00001=3) + (x_00003_00002=3) + (x_00003_00003=3) + (x_00001_00001=3) + (x_00001_00002=3) + (x_00001_00003=3) + (x_00002_00001=3) + (x_00002_00002=3) + (x_00002_00003=3))=tv=1))
c Var 'aux205' direct represents '0' with '-1507'
c Var 'aux205' direct represents '1' with '1507'
c Var 'aux205' order represents '1' with '1'
c Var 'aux205' order represents '0' with '-1507'
c Encoding variable: aux206 with domain: bool (representing constraint (((x_00003_00001=4) + (x_00003_00002=4) + (x_00003_00003=4) + (x_00001_00001=4) + (x_00001_00002=4) + (x_00001_00003=4) + (x_00002_00001=4) + (x_00002_00002=4) + (x_00002_00003=4))=tv=1))
c Var 'aux206' direct represents '0' with '-1508'
c Var 'aux206' direct represents '1' with '1508'
c Var 'aux206' order represents '1' with '1'
c Var 'aux206' order represents '0' with '-1508'
c Encoding variable: aux207 with domain: bool (representing constraint (((x_00003_00001=5) + (x_00003_00002=5) + (x_00003_00003=5) + (x_00001_00001=5) + (x_00001_00002=5) + (x_00001_00003=5) + (x_00002_00001=5) + (x_00002_00002=5) + (x_00002_00003=5))=tv=1))
c Var 'aux207' direct represents '0' with '-1509'
c Var 'aux207' direct represents '1' with '1509'
c Var 'aux207' order represents '1' with '1'
c Var 'aux207' order represents '0' with '-1509'
c Encoding variable: aux208 with domain: bool (representing constraint (((x_00003_00001=6) + (x_00003_00002=6) + (x_00003_00003=6) + (x_00001_00001=6) + (x_00001_00002=6) + (x_00001_00003=6) + (x_00002_00001=6) + (x_00002_00002=6) + (x_00002_00003=6))=tv=1))
c Var 'aux208' direct represents '0' with '-1510'
c Var 'aux208' direct represents '1' with '1510'
c Var 'aux208' order represents '1' with '1'
c Var 'aux208' order represents '0' with '-1510'
c Encoding variable: aux209 with domain: bool (representing constraint (((x_00003_00001=7) + (x_00003_00002=7) + (x_00003_00003=7) + (x_00001_00001=7) + (x_00001_00002=7) + (x_00001_00003=7) + (x_00002_00001=7) + (x_00002_00002=7) + (x_00002_00003=7))=tv=1))
c Var 'aux209' direct represents '0' with '-1511'
c Var 'aux209' direct represents '1' with '1511'
c Var 'aux209' order represents '1' with '1'
c Var 'aux209' order represents '0' with '-1511'
c Encoding variable: aux210 with domain: bool (representing constraint (((x_00003_00001=8) + (x_00003_00002=8) + (x_00003_00003=8) + (x_00001_00001=8) + (x_00001_00002=8) + (x_00001_00003=8) + (x_00002_00001=8) + (x_00002_00002=8) + (x_00002_00003=8))=tv=1))
c Var 'aux210' direct represents '0' with '-1512'
c Var 'aux210' direct represents '1' with '1512'
c Var 'aux210' order represents '1' with '1'
c Var 'aux210' order represents '0' with '-1512'
c Encoding variable: aux211 with domain: bool (representing constraint (((x_00003_00001=9) + (x_00003_00002=9) + (x_00003_00003=9) + (x_00001_00001=9) + (x_00001_00002=9) + (x_00001_00003=9) + (x_00002_00001=9) + (x_00002_00002=9) + (x_00002_00003=9))=tv=1))
c Var 'aux211' direct represents '0' with '-1513'
c Var 'aux211' direct represents '1' with '1513'
c Var 'aux211' order represents '1' with '1'
c Var 'aux211' order represents '0' with '-1513'
c Encoding variable: aux212 with domain: bool (representing constraint (((x_00003_00004=1) + (x_00003_00005=1) + (x_00003_00006=1) + (x_00001_00004=1) + (x_00001_00005=1) + (x_00001_00006=1) + (x_00002_00004=1) + (x_00002_00005=1) + (x_00002_00006=1))=tv=1))
c Var 'aux212' direct represents '0' with '-1514'
c Var 'aux212' direct represents '1' with '1514'
c Var 'aux212' order represents '1' with '1'
c Var 'aux212' order represents '0' with '-1514'
c Encoding variable: aux213 with domain: bool (representing constraint (((x_00003_00004=2) + (x_00003_00005=2) + (x_00003_00006=2) + (x_00001_00004=2) + (x_00001_00005=2) + (x_00001_00006=2) + (x_00002_00004=2) + (x_00002_00005=2) + (x_00002_00006=2))=tv=1))
c Var 'aux213' direct represents '0' with '-1515'
c Var 'aux213' direct represents '1' with '1515'
c Var 'aux213' order represents '1' with '1'
c Var 'aux213' order represents '0' with '-1515'
c Encoding variable: aux214 with domain: bool (representing constraint (((x_00003_00004=3) + (x_00003_00005=3) + (x_00003_00006=3) + (x_00001_00004=3) + (x_00001_00005=3) + (x_00001_00006=3) + (x_00002_00004=3) + (x_00002_00005=3) + (x_00002_00006=3))=tv=1))
c Var 'aux214' direct represents '0' with '-1516'
c Var 'aux214' direct represents '1' with '1516'
c Var 'aux214' order represents '1' with '1'
c Var 'aux214' order represents '0' with '-1516'
c Encoding variable: aux215 with domain: bool (representing constraint (((x_00003_00004=4) + (x_00003_00005=4) + (x_00003_00006=4) + (x_00001_00004=4) + (x_00001_00005=4) + (x_00001_00006=4) + (x_00002_00004=4) + (x_00002_00005=4) + (x_00002_00006=4))=tv=1))
c Var 'aux215' direct represents '0' with '-1517'
c Var 'aux215' direct represents '1' with '1517'
c Var 'aux215' order represents '1' with '1'
c Var 'aux215' order represents '0' with '-1517'
c Encoding variable: aux216 with domain: bool (representing constraint (((x_00003_00004=5) + (x_00003_00005=5) + (x_00003_00006=5) + (x_00001_00004=5) + (x_00001_00005=5) + (x_00001_00006=5) + (x_00002_00004=5) + (x_00002_00005=5) + (x_00002_00006=5))=tv=1))
c Var 'aux216' direct represents '0' with '-1518'
c Var 'aux216' direct represents '1' with '1518'
c Var 'aux216' order represents '1' with '1'
c Var 'aux216' order represents '0' with '-1518'
c Encoding variable: aux217 with domain: bool (representing constraint (((x_00003_00004=6) + (x_00003_00005=6) + (x_00003_00006=6) + (x_00001_00004=6) + (x_00001_00005=6) + (x_00001_00006=6) + (x_00002_00004=6) + (x_00002_00005=6) + (x_00002_00006=6))=tv=1))
c Var 'aux217' direct represents '0' with '-1519'
c Var 'aux217' direct represents '1' with '1519'
c Var 'aux217' order represents '1' with '1'
c Var 'aux217' order represents '0' with '-1519'
c Encoding variable: aux218 with domain: bool (representing constraint (((x_00003_00004=7) + (x_00003_00005=7) + (x_00003_00006=7) + (x_00001_00004=7) + (x_00001_00005=7) + (x_00001_00006=7) + (x_00002_00004=7) + (x_00002_00005=7) + (x_00002_00006=7))=tv=1))
c Var 'aux218' direct represents '0' with '-1520'
c Var 'aux218' direct represents '1' with '1520'
c Var 'aux218' order represents '1' with '1'
c Var 'aux218' order represents '0' with '-1520'
c Encoding variable: aux219 with domain: bool (representing constraint (((x_00003_00004=8) + (x_00003_00005=8) + (x_00003_00006=8) + (x_00001_00004=8) + (x_00001_00005=8) + (x_00001_00006=8) + (x_00002_00004=8) + (x_00002_00005=8) + (x_00002_00006=8))=tv=1))
c Var 'aux219' direct represents '0' with '-1521'
c Var 'aux219' direct represents '1' with '1521'
c Var 'aux219' order represents '1' with '1'
c Var 'aux219' order represents '0' with '-1521'
c Encoding variable: aux220 with domain: bool (representing constraint (((x_00003_00004=9) + (x_00003_00005=9) + (x_00003_00006=9) + (x_00001_00004=9) + (x_00001_00005=9) + (x_00001_00006=9) + (x_00002_00004=9) + (x_00002_00005=9) + (x_00002_00006=9))=tv=1))
c Var 'aux220' direct represents '0' with '-1522'
c Var 'aux220' direct represents '1' with '1522'
c Var 'aux220' order represents '1' with '1'
c Var 'aux220' order represents '0' with '-1522'
c Encoding variable: aux221 with domain: bool (representing constraint (((x_00003_00007=1) + (x_00003_00008=1) + (x_00003_00009=1) + (x_00001_00007=1) + (x_00001_00008=1) + (x_00001_00009=1) + (x_00002_00007=1) + (x_00002_00008=1) + (x_00002_00009=1))=tv=1))
c Var 'aux221' direct represents '0' with '-1523'
c Var 'aux221' direct represents '1' with '1523'
c Var 'aux221' order represents '1' with '1'
c Var 'aux221' order represents '0' with '-1523'
c Encoding variable: aux222 with domain: bool (representing constraint (((x_00003_00007=2) + (x_00003_00008=2) + (x_00003_00009=2) + (x_00001_00007=2) + (x_00001_00008=2) + (x_00001_00009=2) + (x_00002_00007=2) + (x_00002_00008=2) + (x_00002_00009=2))=tv=1))
c Var 'aux222' direct represents '0' with '-1524'
c Var 'aux222' direct represents '1' with '1524'
c Var 'aux222' order represents '1' with '1'
c Var 'aux222' order represents '0' with '-1524'
c Encoding variable: aux223 with domain: bool (representing constraint (((x_00003_00007=3) + (x_00003_00008=3) + (x_00003_00009=3) + (x_00001_00007=3) + (x_00001_00008=3) + (x_00001_00009=3) + (x_00002_00007=3) + (x_00002_00008=3) + (x_00002_00009=3))=tv=1))
c Var 'aux223' direct represents '0' with '-1525'
c Var 'aux223' direct represents '1' with '1525'
c Var 'aux223' order represents '1' with '1'
c Var 'aux223' order represents '0' with '-1525'
c Encoding variable: aux224 with domain: bool (representing constraint (((x_00003_00007=4) + (x_00003_00008=4) + (x_00003_00009=4) + (x_00001_00007=4) + (x_00001_00008=4) + (x_00001_00009=4) + (x_00002_00007=4) + (x_00002_00008=4) + (x_00002_00009=4))=tv=1))
c Var 'aux224' direct represents '0' with '-1526'
c Var 'aux224' direct represents '1' with '1526'
c Var 'aux224' order represents '1' with '1'
c Var 'aux224' order represents '0' with '-1526'
c Encoding variable: aux225 with domain: bool (representing constraint (((x_00003_00007=5) + (x_00003_00008=5) + (x_00003_00009=5) + (x_00001_00007=5) + (x_00001_00008=5) + (x_00001_00009=5) + (x_00002_00007=5) + (x_00002_00008=5) + (x_00002_00009=5))=tv=1))
c Var 'aux225' direct represents '0' with '-1527'
c Var 'aux225' direct represents '1' with '1527'
c Var 'aux225' order represents '1' with '1'
c Var 'aux225' order represents '0' with '-1527'
c Encoding variable: aux226 with domain: bool (representing constraint (((x_00003_00007=6) + (x_00003_00008=6) + (x_00003_00009=6) + (x_00001_00007=6) + (x_00001_00008=6) + (x_00001_00009=6) + (x_00002_00007=6) + (x_00002_00008=6) + (x_00002_00009=6))=tv=1))
c Var 'aux226' direct represents '0' with '-1528'
c Var 'aux226' direct represents '1' with '1528'
c Var 'aux226' order represents '1' with '1'
c Var 'aux226' order represents '0' with '-1528'
c Encoding variable: aux227 with domain: bool (representing constraint (((x_00003_00007=7) + (x_00003_00008=7) + (x_00003_00009=7) + (x_00001_00007=7) + (x_00001_00008=7) + (x_00001_00009=7) + (x_00002_00007=7) + (x_00002_00008=7) + (x_00002_00009=7))=tv=1))
c Var 'aux227' direct represents '0' with '-1529'
c Var 'aux227' direct represents '1' with '1529'
c Var 'aux227' order represents '1' with '1'
c Var 'aux227' order represents '0' with '-1529'
c Encoding variable: aux228 with domain: bool (representing constraint (((x_00003_00007=8) + (x_00003_00008=8) + (x_00003_00009=8) + (x_00001_00007=8) + (x_00001_00008=8) + (x_00001_00009=8) + (x_00002_00007=8) + (x_00002_00008=8) + (x_00002_00009=8))=tv=1))
c Var 'aux228' direct represents '0' with '-1530'
c Var 'aux228' direct represents '1' with '1530'
c Var 'aux228' order represents '1' with '1'
c Var 'aux228' order represents '0' with '-1530'
c Encoding variable: aux229 with domain: bool (representing constraint (((x_00003_00007=9) + (x_00003_00008=9) + (x_00003_00009=9) + (x_00001_00007=9) + (x_00001_00008=9) + (x_00001_00009=9) + (x_00002_00007=9) + (x_00002_00008=9) + (x_00002_00009=9))=tv=1))
c Var 'aux229' direct represents '0' with '-1531'
c Var 'aux229' direct represents '1' with '1531'
c Var 'aux229' order represents '1' with '1'
c Var 'aux229' order represents '0' with '-1531'
c Encoding variable: aux230 with domain: bool (representing constraint (((x_00006_00001=1) + (x_00006_00002=1) + (x_00006_00003=1) + (x_00004_00001=1) + (x_00004_00002=1) + (x_00004_00003=1) + (x_00005_00001=1) + (x_00005_00002=1) + (x_00005_00003=1))=tv=1))
c Var 'aux230' direct represents '0' with '-1532'
c Var 'aux230' direct represents '1' with '1532'
c Var 'aux230' order represents '1' with '1'
c Var 'aux230' order represents '0' with '-1532'
c Encoding variable: aux231 with domain: bool (representing constraint (((x_00006_00001=2) + (x_00006_00002=2) + (x_00006_00003=2) + (x_00004_00001=2) + (x_00004_00002=2) + (x_00004_00003=2) + (x_00005_00001=2) + (x_00005_00002=2) + (x_00005_00003=2))=tv=1))
c Var 'aux231' direct represents '0' with '-1533'
c Var 'aux231' direct represents '1' with '1533'
c Var 'aux231' order represents '1' with '1'
c Var 'aux231' order represents '0' with '-1533'
c Encoding variable: aux232 with domain: bool (representing constraint (((x_00006_00001=3) + (x_00006_00002=3) + (x_00006_00003=3) + (x_00004_00001=3) + (x_00004_00002=3) + (x_00004_00003=3) + (x_00005_00001=3) + (x_00005_00002=3) + (x_00005_00003=3))=tv=1))
c Var 'aux232' direct represents '0' with '-1534'
c Var 'aux232' direct represents '1' with '1534'
c Var 'aux232' order represents '1' with '1'
c Var 'aux232' order represents '0' with '-1534'
c Encoding variable: aux233 with domain: bool (representing constraint (((x_00006_00001=4) + (x_00006_00002=4) + (x_00006_00003=4) + (x_00004_00001=4) + (x_00004_00002=4) + (x_00004_00003=4) + (x_00005_00001=4) + (x_00005_00002=4) + (x_00005_00003=4))=tv=1))
c Var 'aux233' direct represents '0' with '-1535'
c Var 'aux233' direct represents '1' with '1535'
c Var 'aux233' order represents '1' with '1'
c Var 'aux233' order represents '0' with '-1535'
c Encoding variable: aux234 with domain: bool (representing constraint (((x_00006_00001=5) + (x_00006_00002=5) + (x_00006_00003=5) + (x_00004_00001=5) + (x_00004_00002=5) + (x_00004_00003=5) + (x_00005_00001=5) + (x_00005_00002=5) + (x_00005_00003=5))=tv=1))
c Var 'aux234' direct represents '0' with '-1536'
c Var 'aux234' direct represents '1' with '1536'
c Var 'aux234' order represents '1' with '1'
c Var 'aux234' order represents '0' with '-1536'
c Encoding variable: aux235 with domain: bool (representing constraint (((x_00006_00001=6) + (x_00006_00002=6) + (x_00006_00003=6) + (x_00004_00001=6) + (x_00004_00002=6) + (x_00004_00003=6) + (x_00005_00001=6) + (x_00005_00002=6) + (x_00005_00003=6))=tv=1))
c Var 'aux235' direct represents '0' with '-1537'
c Var 'aux235' direct represents '1' with '1537'
c Var 'aux235' order represents '1' with '1'
c Var 'aux235' order represents '0' with '-1537'
c Encoding variable: aux236 with domain: bool (representing constraint (((x_00006_00001=7) + (x_00006_00002=7) + (x_00006_00003=7) + (x_00004_00001=7) + (x_00004_00002=7) + (x_00004_00003=7) + (x_00005_00001=7) + (x_00005_00002=7) + (x_00005_00003=7))=tv=1))
c Var 'aux236' direct represents '0' with '-1538'
c Var 'aux236' direct represents '1' with '1538'
c Var 'aux236' order represents '1' with '1'
c Var 'aux236' order represents '0' with '-1538'
c Encoding variable: aux237 with domain: bool (representing constraint (((x_00006_00001=8) + (x_00006_00002=8) + (x_00006_00003=8) + (x_00004_00001=8) + (x_00004_00002=8) + (x_00004_00003=8) + (x_00005_00001=8) + (x_00005_00002=8) + (x_00005_00003=8))=tv=1))
c Var 'aux237' direct represents '0' with '-1539'
c Var 'aux237' direct represents '1' with '1539'
c Var 'aux237' order represents '1' with '1'
c Var 'aux237' order represents '0' with '-1539'
c Encoding variable: aux238 with domain: bool (representing constraint (((x_00006_00001=9) + (x_00006_00002=9) + (x_00006_00003=9) + (x_00004_00001=9) + (x_00004_00002=9) + (x_00004_00003=9) + (x_00005_00001=9) + (x_00005_00002=9) + (x_00005_00003=9))=tv=1))
c Var 'aux238' direct represents '0' with '-1540'
c Var 'aux238' direct represents '1' with '1540'
c Var 'aux238' order represents '1' with '1'
c Var 'aux238' order represents '0' with '-1540'
c Encoding variable: aux239 with domain: bool (representing constraint (((x_00006_00004=1) + (x_00006_00005=1) + (x_00006_00006=1) + (x_00004_00004=1) + (x_00004_00005=1) + (x_00004_00006=1) + (x_00005_00004=1) + (x_00005_00005=1) + (x_00005_00006=1))=tv=1))
c Var 'aux239' direct represents '0' with '-1541'
c Var 'aux239' direct represents '1' with '1541'
c Var 'aux239' order represents '1' with '1'
c Var 'aux239' order represents '0' with '-1541'
c Encoding variable: aux240 with domain: bool (representing constraint (((x_00006_00004=2) + (x_00006_00005=2) + (x_00006_00006=2) + (x_00004_00004=2) + (x_00004_00005=2) + (x_00004_00006=2) + (x_00005_00004=2) + (x_00005_00005=2) + (x_00005_00006=2))=tv=1))
c Var 'aux240' direct represents '0' with '-1542'
c Var 'aux240' direct represents '1' with '1542'
c Var 'aux240' order represents '1' with '1'
c Var 'aux240' order represents '0' with '-1542'
c Encoding variable: aux241 with domain: bool (representing constraint (((x_00006_00004=3) + (x_00006_00005=3) + (x_00006_00006=3) + (x_00004_00004=3) + (x_00004_00005=3) + (x_00004_00006=3) + (x_00005_00004=3) + (x_00005_00005=3) + (x_00005_00006=3))=tv=1))
c Var 'aux241' direct represents '0' with '-1543'
c Var 'aux241' direct represents '1' with '1543'
c Var 'aux241' order represents '1' with '1'
c Var 'aux241' order represents '0' with '-1543'
c Encoding variable: aux242 with domain: bool (representing constraint (((x_00006_00004=4) + (x_00006_00005=4) + (x_00006_00006=4) + (x_00004_00004=4) + (x_00004_00005=4) + (x_00004_00006=4) + (x_00005_00004=4) + (x_00005_00005=4) + (x_00005_00006=4))=tv=1))
c Var 'aux242' direct represents '0' with '-1544'
c Var 'aux242' direct represents '1' with '1544'
c Var 'aux242' order represents '1' with '1'
c Var 'aux242' order represents '0' with '-1544'
c Encoding variable: aux243 with domain: bool (representing constraint (((x_00006_00004=5) + (x_00006_00005=5) + (x_00006_00006=5) + (x_00004_00004=5) + (x_00004_00005=5) + (x_00004_00006=5) + (x_00005_00004=5) + (x_00005_00005=5) + (x_00005_00006=5))=tv=1))
c Var 'aux243' direct represents '0' with '-1545'
c Var 'aux243' direct represents '1' with '1545'
c Var 'aux243' order represents '1' with '1'
c Var 'aux243' order represents '0' with '-1545'
c Encoding variable: aux244 with domain: bool (representing constraint (((x_00006_00004=6) + (x_00006_00005=6) + (x_00006_00006=6) + (x_00004_00004=6) + (x_00004_00005=6) + (x_00004_00006=6) + (x_00005_00004=6) + (x_00005_00005=6) + (x_00005_00006=6))=tv=1))
c Var 'aux244' direct represents '0' with '-1546'
c Var 'aux244' direct represents '1' with '1546'
c Var 'aux244' order represents '1' with '1'
c Var 'aux244' order represents '0' with '-1546'
c Encoding variable: aux245 with domain: bool (representing constraint (((x_00006_00004=7) + (x_00006_00005=7) + (x_00006_00006=7) + (x_00004_00004=7) + (x_00004_00005=7) + (x_00004_00006=7) + (x_00005_00004=7) + (x_00005_00005=7) + (x_00005_00006=7))=tv=1))
c Var 'aux245' direct represents '0' with '-1547'
c Var 'aux245' direct represents '1' with '1547'
c Var 'aux245' order represents '1' with '1'
c Var 'aux245' order represents '0' with '-1547'
c Encoding variable: aux246 with domain: bool (representing constraint (((x_00006_00004=8) + (x_00006_00005=8) + (x_00006_00006=8) + (x_00004_00004=8) + (x_00004_00005=8) + (x_00004_00006=8) + (x_00005_00004=8) + (x_00005_00005=8) + (x_00005_00006=8))=tv=1))
c Var 'aux246' direct represents '0' with '-1548'
c Var 'aux246' direct represents '1' with '1548'
c Var 'aux246' order represents '1' with '1'
c Var 'aux246' order represents '0' with '-1548'
c Encoding variable: aux247 with domain: bool (representing constraint (((x_00006_00004=9) + (x_00006_00005=9) + (x_00006_00006=9) + (x_00004_00004=9) + (x_00004_00005=9) + (x_00004_00006=9) + (x_00005_00004=9) + (x_00005_00005=9) + (x_00005_00006=9))=tv=1))
c Var 'aux247' direct represents '0' with '-1549'
c Var 'aux247' direct represents '1' with '1549'
c Var 'aux247' order represents '1' with '1'
c Var 'aux247' order represents '0' with '-1549'
c Encoding variable: aux248 with domain: bool (representing constraint (((x_00006_00007=1) + (x_00006_00008=1) + (x_00006_00009=1) + (x_00004_00007=1) + (x_00004_00008=1) + (x_00004_00009=1) + (x_00005_00007=1) + (x_00005_00008=1) + (x_00005_00009=1))=tv=1))
c Var 'aux248' direct represents '0' with '-1550'
c Var 'aux248' direct represents '1' with '1550'
c Var 'aux248' order represents '1' with '1'
c Var 'aux248' order represents '0' with '-1550'
c Encoding variable: aux249 with domain: bool (representing constraint (((x_00006_00007=2) + (x_00006_00008=2) + (x_00006_00009=2) + (x_00004_00007=2) + (x_00004_00008=2) + (x_00004_00009=2) + (x_00005_00007=2) + (x_00005_00008=2) + (x_00005_00009=2))=tv=1))
c Var 'aux249' direct represents '0' with '-1551'
c Var 'aux249' direct represents '1' with '1551'
c Var 'aux249' order represents '1' with '1'
c Var 'aux249' order represents '0' with '-1551'
c Encoding variable: aux250 with domain: bool (representing constraint (((x_00006_00007=3) + (x_00006_00008=3) + (x_00006_00009=3) + (x_00004_00007=3) + (x_00004_00008=3) + (x_00004_00009=3) + (x_00005_00007=3) + (x_00005_00008=3) + (x_00005_00009=3))=tv=1))
c Var 'aux250' direct represents '0' with '-1552'
c Var 'aux250' direct represents '1' with '1552'
c Var 'aux250' order represents '1' with '1'
c Var 'aux250' order represents '0' with '-1552'
c Encoding variable: aux251 with domain: bool (representing constraint (((x_00006_00007=4) + (x_00006_00008=4) + (x_00006_00009=4) + (x_00004_00007=4) + (x_00004_00008=4) + (x_00004_00009=4) + (x_00005_00007=4) + (x_00005_00008=4) + (x_00005_00009=4))=tv=1))
c Var 'aux251' direct represents '0' with '-1553'
c Var 'aux251' direct represents '1' with '1553'
c Var 'aux251' order represents '1' with '1'
c Var 'aux251' order represents '0' with '-1553'
c Encoding variable: aux252 with domain: bool (representing constraint (((x_00006_00007=5) + (x_00006_00008=5) + (x_00006_00009=5) + (x_00004_00007=5) + (x_00004_00008=5) + (x_00004_00009=5) + (x_00005_00007=5) + (x_00005_00008=5) + (x_00005_00009=5))=tv=1))
c Var 'aux252' direct represents '0' with '-1554'
c Var 'aux252' direct represents '1' with '1554'
c Var 'aux252' order represents '1' with '1'
c Var 'aux252' order represents '0' with '-1554'
c Encoding variable: aux253 with domain: bool (representing constraint (((x_00006_00007=6) + (x_00006_00008=6) + (x_00006_00009=6) + (x_00004_00007=6) + (x_00004_00008=6) + (x_00004_00009=6) + (x_00005_00007=6) + (x_00005_00008=6) + (x_00005_00009=6))=tv=1))
c Var 'aux253' direct represents '0' with '-1555'
c Var 'aux253' direct represents '1' with '1555'
c Var 'aux253' order represents '1' with '1'
c Var 'aux253' order represents '0' with '-1555'
c Encoding variable: aux254 with domain: bool (representing constraint (((x_00006_00007=7) + (x_00006_00008=7) + (x_00006_00009=7) + (x_00004_00007=7) + (x_00004_00008=7) + (x_00004_00009=7) + (x_00005_00007=7) + (x_00005_00008=7) + (x_00005_00009=7))=tv=1))
c Var 'aux254' direct represents '0' with '-1556'
c Var 'aux254' direct represents '1' with '1556'
c Var 'aux254' order represents '1' with '1'
c Var 'aux254' order represents '0' with '-1556'
c Encoding variable: aux255 with domain: bool (representing constraint (((x_00006_00007=8) + (x_00006_00008=8) + (x_00006_00009=8) + (x_00004_00007=8) + (x_00004_00008=8) + (x_00004_00009=8) + (x_00005_00007=8) + (x_00005_00008=8) + (x_00005_00009=8))=tv=1))
c Var 'aux255' direct represents '0' with '-1557'
c Var 'aux255' direct represents '1' with '1557'
c Var 'aux255' order represents '1' with '1'
c Var 'aux255' order represents '0' with '-1557'
c Encoding variable: aux256 with domain: bool (representing constraint (((x_00006_00007=9) + (x_00006_00008=9) + (x_00006_00009=9) + (x_00004_00007=9) + (x_00004_00008=9) + (x_00004_00009=9) + (x_00005_00007=9) + (x_00005_00008=9) + (x_00005_00009=9))=tv=1))
c Var 'aux256' direct represents '0' with '-1558'
c Var 'aux256' direct represents '1' with '1558'
c Var 'aux256' order represents '1' with '1'
c Var 'aux256' order represents '0' with '-1558'
c Encoding variable: aux257 with domain: bool (representing constraint (((x_00008_00001=1) + (x_00008_00002=1) + (x_00008_00003=1) + (x_00009_00001=1) + (x_00009_00002=1) + (x_00009_00003=1) + (x_00007_00001=1) + (x_00007_00002=1) + (x_00007_00003=1))=tv=1))
c Var 'aux257' direct represents '0' with '-1559'
c Var 'aux257' direct represents '1' with '1559'
c Var 'aux257' order represents '1' with '1'
c Var 'aux257' order represents '0' with '-1559'
c Encoding variable: aux258 with domain: bool (representing constraint (((x_00008_00001=2) + (x_00008_00002=2) + (x_00008_00003=2) + (x_00009_00001=2) + (x_00009_00002=2) + (x_00009_00003=2) + (x_00007_00001=2) + (x_00007_00002=2) + (x_00007_00003=2))=tv=1))
c Var 'aux258' direct represents '0' with '-1560'
c Var 'aux258' direct represents '1' with '1560'
c Var 'aux258' order represents '1' with '1'
c Var 'aux258' order represents '0' with '-1560'
c Encoding variable: aux259 with domain: bool (representing constraint (((x_00008_00001=3) + (x_00008_00002=3) + (x_00008_00003=3) + (x_00009_00001=3) + (x_00009_00002=3) + (x_00009_00003=3) + (x_00007_00001=3) + (x_00007_00002=3) + (x_00007_00003=3))=tv=1))
c Var 'aux259' direct represents '0' with '-1561'
c Var 'aux259' direct represents '1' with '1561'
c Var 'aux259' order represents '1' with '1'
c Var 'aux259' order represents '0' with '-1561'
c Encoding variable: aux260 with domain: bool (representing constraint (((x_00008_00001=4) + (x_00008_00002=4) + (x_00008_00003=4) + (x_00009_00001=4) + (x_00009_00002=4) + (x_00009_00003=4) + (x_00007_00001=4) + (x_00007_00002=4) + (x_00007_00003=4))=tv=1))
c Var 'aux260' direct represents '0' with '-1562'
c Var 'aux260' direct represents '1' with '1562'
c Var 'aux260' order represents '1' with '1'
c Var 'aux260' order represents '0' with '-1562'
c Encoding variable: aux261 with domain: bool (representing constraint (((x_00008_00001=5) + (x_00008_00002=5) + (x_00008_00003=5) + (x_00009_00001=5) + (x_00009_00002=5) + (x_00009_00003=5) + (x_00007_00001=5) + (x_00007_00002=5) + (x_00007_00003=5))=tv=1))
c Var 'aux261' direct represents '0' with '-1563'
c Var 'aux261' direct represents '1' with '1563'
c Var 'aux261' order represents '1' with '1'
c Var 'aux261' order represents '0' with '-1563'
c Encoding variable: aux262 with domain: bool (representing constraint (((x_00008_00001=6) + (x_00008_00002=6) + (x_00008_00003=6) + (x_00009_00001=6) + (x_00009_00002=6) + (x_00009_00003=6) + (x_00007_00001=6) + (x_00007_00002=6) + (x_00007_00003=6))=tv=1))
c Var 'aux262' direct represents '0' with '-1564'
c Var 'aux262' direct represents '1' with '1564'
c Var 'aux262' order represents '1' with '1'
c Var 'aux262' order represents '0' with '-1564'
c Encoding variable: aux263 with domain: bool (representing constraint (((x_00008_00001=7) + (x_00008_00002=7) + (x_00008_00003=7) + (x_00009_00001=7) + (x_00009_00002=7) + (x_00009_00003=7) + (x_00007_00001=7) + (x_00007_00002=7) + (x_00007_00003=7))=tv=1))
c Var 'aux263' direct represents '0' with '-1565'
c Var 'aux263' direct represents '1' with '1565'
c Var 'aux263' order represents '1' with '1'
c Var 'aux263' order represents '0' with '-1565'
c Encoding variable: aux264 with domain: bool (representing constraint (((x_00008_00001=8) + (x_00008_00002=8) + (x_00008_00003=8) + (x_00009_00001=8) + (x_00009_00002=8) + (x_00009_00003=8) + (x_00007_00001=8) + (x_00007_00002=8) + (x_00007_00003=8))=tv=1))
c Var 'aux264' direct represents '0' with '-1566'
c Var 'aux264' direct represents '1' with '1566'
c Var 'aux264' order represents '1' with '1'
c Var 'aux264' order represents '0' with '-1566'
c Encoding variable: aux265 with domain: bool (representing constraint (((x_00008_00001=9) + (x_00008_00002=9) + (x_00008_00003=9) + (x_00009_00001=9) + (x_00009_00002=9) + (x_00009_00003=9) + (x_00007_00001=9) + (x_00007_00002=9) + (x_00007_00003=9))=tv=1))
c Var 'aux265' direct represents '0' with '-1567'
c Var 'aux265' direct represents '1' with '1567'
c Var 'aux265' order represents '1' with '1'
c Var 'aux265' order represents '0' with '-1567'
c Encoding variable: aux266 with domain: bool (representing constraint (((x_00008_00004=1) + (x_00008_00005=1) + (x_00008_00006=1) + (x_00009_00004=1) + (x_00009_00005=1) + (x_00009_00006=1) + (x_00007_00004=1) + (x_00007_00005=1) + (x_00007_00006=1))=tv=1))
c Var 'aux266' direct represents '0' with '-1568'
c Var 'aux266' direct represents '1' with '1568'
c Var 'aux266' order represents '1' with '1'
c Var 'aux266' order represents '0' with '-1568'
c Encoding variable: aux267 with domain: bool (representing constraint (((x_00008_00004=2) + (x_00008_00005=2) + (x_00008_00006=2) + (x_00009_00004=2) + (x_00009_00005=2) + (x_00009_00006=2) + (x_00007_00004=2) + (x_00007_00005=2) + (x_00007_00006=2))=tv=1))
c Var 'aux267' direct represents '0' with '-1569'
c Var 'aux267' direct represents '1' with '1569'
c Var 'aux267' order represents '1' with '1'
c Var 'aux267' order represents '0' with '-1569'
c Encoding variable: aux268 with domain: bool (representing constraint (((x_00008_00004=3) + (x_00008_00005=3) + (x_00008_00006=3) + (x_00009_00004=3) + (x_00009_00005=3) + (x_00009_00006=3) + (x_00007_00004=3) + (x_00007_00005=3) + (x_00007_00006=3))=tv=1))
c Var 'aux268' direct represents '0' with '-1570'
c Var 'aux268' direct represents '1' with '1570'
c Var 'aux268' order represents '1' with '1'
c Var 'aux268' order represents '0' with '-1570'
c Encoding variable: aux269 with domain: bool (representing constraint (((x_00008_00004=4) + (x_00008_00005=4) + (x_00008_00006=4) + (x_00009_00004=4) + (x_00009_00005=4) + (x_00009_00006=4) + (x_00007_00004=4) + (x_00007_00005=4) + (x_00007_00006=4))=tv=1))
c Var 'aux269' direct represents '0' with '-1571'
c Var 'aux269' direct represents '1' with '1571'
c Var 'aux269' order represents '1' with '1'
c Var 'aux269' order represents '0' with '-1571'
c Encoding variable: aux270 with domain: bool (representing constraint (((x_00008_00004=5) + (x_00008_00005=5) + (x_00008_00006=5) + (x_00009_00004=5) + (x_00009_00005=5) + (x_00009_00006=5) + (x_00007_00004=5) + (x_00007_00005=5) + (x_00007_00006=5))=tv=1))
c Var 'aux270' direct represents '0' with '-1572'
c Var 'aux270' direct represents '1' with '1572'
c Var 'aux270' order represents '1' with '1'
c Var 'aux270' order represents '0' with '-1572'
c Encoding variable: aux271 with domain: bool (representing constraint (((x_00008_00004=6) + (x_00008_00005=6) + (x_00008_00006=6) + (x_00009_00004=6) + (x_00009_00005=6) + (x_00009_00006=6) + (x_00007_00004=6) + (x_00007_00005=6) + (x_00007_00006=6))=tv=1))
c Var 'aux271' direct represents '0' with '-1573'
c Var 'aux271' direct represents '1' with '1573'
c Var 'aux271' order represents '1' with '1'
c Var 'aux271' order represents '0' with '-1573'
c Encoding variable: aux272 with domain: bool (representing constraint (((x_00008_00004=7) + (x_00008_00005=7) + (x_00008_00006=7) + (x_00009_00004=7) + (x_00009_00005=7) + (x_00009_00006=7) + (x_00007_00004=7) + (x_00007_00005=7) + (x_00007_00006=7))=tv=1))
c Var 'aux272' direct represents '0' with '-1574'
c Var 'aux272' direct represents '1' with '1574'
c Var 'aux272' order represents '1' with '1'
c Var 'aux272' order represents '0' with '-1574'
c Encoding variable: aux273 with domain: bool (representing constraint (((x_00008_00004=8) + (x_00008_00005=8) + (x_00008_00006=8) + (x_00009_00004=8) + (x_00009_00005=8) + (x_00009_00006=8) + (x_00007_00004=8) + (x_00007_00005=8) + (x_00007_00006=8))=tv=1))
c Var 'aux273' direct represents '0' with '-1575'
c Var 'aux273' direct represents '1' with '1575'
c Var 'aux273' order represents '1' with '1'
c Var 'aux273' order represents '0' with '-1575'
c Encoding variable: aux274 with domain: bool (representing constraint (((x_00008_00004=9) + (x_00008_00005=9) + (x_00008_00006=9) + (x_00009_00004=9) + (x_00009_00005=9) + (x_00009_00006=9) + (x_00007_00004=9) + (x_00007_00005=9) + (x_00007_00006=9))=tv=1))
c Var 'aux274' direct represents '0' with '-1576'
c Var 'aux274' direct represents '1' with '1576'
c Var 'aux274' order represents '1' with '1'
c Var 'aux274' order represents '0' with '-1576'
c Encoding variable: aux275 with domain: bool (representing constraint (((x_00008_00007=1) + (x_00008_00008=1) + (x_00008_00009=1) + (x_00009_00007=1) + (x_00009_00008=1) + (x_00009_00009=1) + (x_00007_00007=1) + (x_00007_00008=1) + (x_00007_00009=1))=tv=1))
c Var 'aux275' direct represents '0' with '-1577'
c Var 'aux275' direct represents '1' with '1577'
c Var 'aux275' order represents '1' with '1'
c Var 'aux275' order represents '0' with '-1577'
c Encoding variable: aux276 with domain: bool (representing constraint (((x_00008_00007=2) + (x_00008_00008=2) + (x_00008_00009=2) + (x_00009_00007=2) + (x_00009_00008=2) + (x_00009_00009=2) + (x_00007_00007=2) + (x_00007_00008=2) + (x_00007_00009=2))=tv=1))
c Var 'aux276' direct represents '0' with '-1578'
c Var 'aux276' direct represents '1' with '1578'
c Var 'aux276' order represents '1' with '1'
c Var 'aux276' order represents '0' with '-1578'
c Encoding variable: aux277 with domain: bool (representing constraint (((x_00008_00007=3) + (x_00008_00008=3) + (x_00008_00009=3) + (x_00009_00007=3) + (x_00009_00008=3) + (x_00009_00009=3) + (x_00007_00007=3) + (x_00007_00008=3) + (x_00007_00009=3))=tv=1))
c Var 'aux277' direct represents '0' with '-1579'
c Var 'aux277' direct represents '1' with '1579'
c Var 'aux277' order represents '1' with '1'
c Var 'aux277' order represents '0' with '-1579'
c Encoding variable: aux278 with domain: bool (representing constraint (((x_00008_00007=4) + (x_00008_00008=4) + (x_00008_00009=4) + (x_00009_00007=4) + (x_00009_00008=4) + (x_00009_00009=4) + (x_00007_00007=4) + (x_00007_00008=4) + (x_00007_00009=4))=tv=1))
c Var 'aux278' direct represents '0' with '-1580'
c Var 'aux278' direct represents '1' with '1580'
c Var 'aux278' order represents '1' with '1'
c Var 'aux278' order represents '0' with '-1580'
c Encoding variable: aux279 with domain: bool (representing constraint (((x_00008_00007=5) + (x_00008_00008=5) + (x_00008_00009=5) + (x_00009_00007=5) + (x_00009_00008=5) + (x_00009_00009=5) + (x_00007_00007=5) + (x_00007_00008=5) + (x_00007_00009=5))=tv=1))
c Var 'aux279' direct represents '0' with '-1581'
c Var 'aux279' direct represents '1' with '1581'
c Var 'aux279' order represents '1' with '1'
c Var 'aux279' order represents '0' with '-1581'
c Encoding variable: aux280 with domain: bool (representing constraint (((x_00008_00007=6) + (x_00008_00008=6) + (x_00008_00009=6) + (x_00009_00007=6) + (x_00009_00008=6) + (x_00009_00009=6) + (x_00007_00007=6) + (x_00007_00008=6) + (x_00007_00009=6))=tv=1))
c Var 'aux280' direct represents '0' with '-1582'
c Var 'aux280' direct represents '1' with '1582'
c Var 'aux280' order represents '1' with '1'
c Var 'aux280' order represents '0' with '-1582'
c Encoding variable: aux281 with domain: bool (representing constraint (((x_00008_00007=7) + (x_00008_00008=7) + (x_00008_00009=7) + (x_00009_00007=7) + (x_00009_00008=7) + (x_00009_00009=7) + (x_00007_00007=7) + (x_00007_00008=7) + (x_00007_00009=7))=tv=1))
c Var 'aux281' direct represents '0' with '-1583'
c Var 'aux281' direct represents '1' with '1583'
c Var 'aux281' order represents '1' with '1'
c Var 'aux281' order represents '0' with '-1583'
c Encoding variable: aux282 with domain: bool (representing constraint (((x_00008_00007=8) + (x_00008_00008=8) + (x_00008_00009=8) + (x_00009_00007=8) + (x_00009_00008=8) + (x_00009_00009=8) + (x_00007_00007=8) + (x_00007_00008=8) + (x_00007_00009=8))=tv=1))
c Var 'aux282' direct represents '0' with '-1584'
c Var 'aux282' direct represents '1' with '1584'
c Var 'aux282' order represents '1' with '1'
c Var 'aux282' order represents '0' with '-1584'
c Encoding variable: aux283 with domain: bool (representing constraint (((x_00008_00007=9) + (x_00008_00008=9) + (x_00008_00009=9) + (x_00009_00007=9) + (x_00009_00008=9) + (x_00009_00009=9) + (x_00007_00007=9) + (x_00007_00008=9) + (x_00007_00009=9))=tv=1))
c Var 'aux283' direct represents '0' with '-1585'
c Var 'aux283' direct represents '1' with '1585'
c Var 'aux283' order represents '1' with '1'
c Var 'aux283' order represents '0' with '-1585'
c Encoding variable: aux284 with domain: bool (representing constraint (((x_00001_00003=1) + (x_00001_00004=1) + (x_00001_00005=1))<=1))
c Var 'aux284' direct represents '0' with '-1586'
c Var 'aux284' direct represents '1' with '1586'
c Var 'aux284' order represents '1' with '1'
c Var 'aux284' order represents '0' with '-1586'
c Encoding variable: aux285 with domain: bool (representing constraint (((x_00001_00003=2) + (x_00001_00004=2) + (x_00001_00005=2))<=1))
c Var 'aux285' direct represents '0' with '-1587'
c Var 'aux285' direct represents '1' with '1587'
c Var 'aux285' order represents '1' with '1'
c Var 'aux285' order represents '0' with '-1587'
c Encoding variable: aux286 with domain: bool (representing constraint (((x_00001_00003=3) + (x_00001_00004=3) + (x_00001_00005=3))<=1))
c Var 'aux286' direct represents '0' with '-1588'
c Var 'aux286' direct represents '1' with '1588'
c Var 'aux286' order represents '1' with '1'
c Var 'aux286' order represents '0' with '-1588'
c Encoding variable: aux287 with domain: bool (representing constraint (((x_00001_00003=4) + (x_00001_00004=4) + (x_00001_00005=4))<=1))
c Var 'aux287' direct represents '0' with '-1589'
c Var 'aux287' direct represents '1' with '1589'
c Var 'aux287' order represents '1' with '1'
c Var 'aux287' order represents '0' with '-1589'
c Encoding variable: aux288 with domain: bool (representing constraint (((x_00001_00003=5) + (x_00001_00004=5) + (x_00001_00005=5))<=1))
c Var 'aux288' direct represents '0' with '-1590'
c Var 'aux288' direct represents '1' with '1590'
c Var 'aux288' order represents '1' with '1'
c Var 'aux288' order represents '0' with '-1590'
c Encoding variable: aux289 with domain: bool (representing constraint (((x_00001_00003=6) + (x_00001_00004=6) + (x_00001_00005=6))<=1))
c Var 'aux289' direct represents '0' with '-1591'
c Var 'aux289' direct represents '1' with '1591'
c Var 'aux289' order represents '1' with '1'
c Var 'aux289' order represents '0' with '-1591'
c Encoding variable: aux290 with domain: bool (representing constraint (((x_00001_00003=7) + (x_00001_00004=7) + (x_00001_00005=7))<=1))
c Var 'aux290' direct represents '0' with '-1592'
c Var 'aux290' direct represents '1' with '1592'
c Var 'aux290' order represents '1' with '1'
c Var 'aux290' order represents '0' with '-1592'
c Encoding variable: aux291 with domain: bool (representing constraint (((x_00001_00003=8) + (x_00001_00004=8) + (x_00001_00005=8))<=1))
c Var 'aux291' direct represents '0' with '-1593'
c Var 'aux291' direct represents '1' with '1593'
c Var 'aux291' order represents '1' with '1'
c Var 'aux291' order represents '0' with '-1593'
c Encoding variable: aux292 with domain: bool (representing constraint (((x_00001_00003=9) + (x_00001_00004=9) + (x_00001_00005=9))<=1))
c Var 'aux292' direct represents '0' with '-1594'
c Var 'aux292' direct represents '1' with '1594'
c Var 'aux292' order represents '1' with '1'
c Var 'aux292' order represents '0' with '-1594'
c Encoding variable: aux293 with domain: bool (representing constraint (((x_00003_00005=1) + (x_00001_00006=1) + (x_00002_00005=1) + (x_00002_00006=1))<=1))
c Var 'aux293' direct represents '0' with '-1595'
c Var 'aux293' direct represents '1' with '1595'
c Var 'aux293' order represents '1' with '1'
c Var 'aux293' order represents '0' with '-1595'
c Encoding variable: aux294 with domain: bool (representing constraint (((x_00003_00005=2) + (x_00001_00006=2) + (x_00002_00005=2) + (x_00002_00006=2))<=1))
c Var 'aux294' direct represents '0' with '-1596'
c Var 'aux294' direct represents '1' with '1596'
c Var 'aux294' order represents '1' with '1'
c Var 'aux294' order represents '0' with '-1596'
c Encoding variable: aux295 with domain: bool (representing constraint (((x_00003_00005=3) + (x_00001_00006=3) + (x_00002_00005=3) + (x_00002_00006=3))<=1))
c Var 'aux295' direct represents '0' with '-1597'
c Var 'aux295' direct represents '1' with '1597'
c Var 'aux295' order represents '1' with '1'
c Var 'aux295' order represents '0' with '-1597'
c Encoding variable: aux296 with domain: bool (representing constraint (((x_00003_00005=4) + (x_00001_00006=4) + (x_00002_00005=4) + (x_00002_00006=4))<=1))
c Var 'aux296' direct represents '0' with '-1598'
c Var 'aux296' direct represents '1' with '1598'
c Var 'aux296' order represents '1' with '1'
c Var 'aux296' order represents '0' with '-1598'
c Encoding variable: aux297 with domain: bool (representing constraint (((x_00003_00005=5) + (x_00001_00006=5) + (x_00002_00005=5) + (x_00002_00006=5))<=1))
c Var 'aux297' direct represents '0' with '-1599'
c Var 'aux297' direct represents '1' with '1599'
c Var 'aux297' order represents '1' with '1'
c Var 'aux297' order represents '0' with '-1599'
c Encoding variable: aux298 with domain: bool (representing constraint (((x_00003_00005=6) + (x_00001_00006=6) + (x_00002_00005=6) + (x_00002_00006=6))<=1))
c Var 'aux298' direct represents '0' with '-1600'
c Var 'aux298' direct represents '1' with '1600'
c Var 'aux298' order represents '1' with '1'
c Var 'aux298' order represents '0' with '-1600'
c Encoding variable: aux299 with domain: bool (representing constraint (((x_00003_00005=7) + (x_00001_00006=7) + (x_00002_00005=7) + (x_00002_00006=7))<=1))
c Var 'aux299' direct represents '0' with '-1601'
c Var 'aux299' direct represents '1' with '1601'
c Var 'aux299' order represents '1' with '1'
c Var 'aux299' order represents '0' with '-1601'
c Encoding variable: aux300 with domain: bool (representing constraint (((x_00003_00005=8) + (x_00001_00006=8) + (x_00002_00005=8) + (x_00002_00006=8))<=1))
c Var 'aux300' direct represents '0' with '-1602'
c Var 'aux300' direct represents '1' with '1602'
c Var 'aux300' order represents '1' with '1'
c Var 'aux300' order represents '0' with '-1602'
c Encoding variable: aux301 with domain: bool (representing constraint (((x_00003_00005=9) + (x_00001_00006=9) + (x_00002_00005=9) + (x_00002_00006=9))<=1))
c Var 'aux301' direct represents '0' with '-1603'
c Var 'aux301' direct represents '1' with '1603'
c Var 'aux301' order represents '1' with '1'
c Var 'aux301' order represents '0' with '-1603'
c Encoding variable: aux302 with domain: bool (representing constraint (((x_00003_00009=1) + (x_00001_00009=1) + (x_00004_00009=1) + (x_00002_00009=1))<=1))
c Var 'aux302' direct represents '0' with '-1604'
c Var 'aux302' direct represents '1' with '1604'
c Var 'aux302' order represents '1' with '1'
c Var 'aux302' order represents '0' with '-1604'
c Encoding variable: aux303 with domain: bool (representing constraint (((x_00003_00009=2) + (x_00001_00009=2) + (x_00004_00009=2) + (x_00002_00009=2))<=1))
c Var 'aux303' direct represents '0' with '-1605'
c Var 'aux303' direct represents '1' with '1605'
c Var 'aux303' order represents '1' with '1'
c Var 'aux303' order represents '0' with '-1605'
c Encoding variable: aux304 with domain: bool (representing constraint (((x_00003_00009=3) + (x_00001_00009=3) + (x_00004_00009=3) + (x_00002_00009=3))<=1))
c Var 'aux304' direct represents '0' with '-1606'
c Var 'aux304' direct represents '1' with '1606'
c Var 'aux304' order represents '1' with '1'
c Var 'aux304' order represents '0' with '-1606'
c Encoding variable: aux305 with domain: bool (representing constraint (((x_00003_00009=4) + (x_00001_00009=4) + (x_00004_00009=4) + (x_00002_00009=4))<=1))
c Var 'aux305' direct represents '0' with '-1607'
c Var 'aux305' direct represents '1' with '1607'
c Var 'aux305' order represents '1' with '1'
c Var 'aux305' order represents '0' with '-1607'
c Encoding variable: aux306 with domain: bool (representing constraint (((x_00003_00009=5) + (x_00001_00009=5) + (x_00004_00009=5) + (x_00002_00009=5))<=1))
c Var 'aux306' direct represents '0' with '-1608'
c Var 'aux306' direct represents '1' with '1608'
c Var 'aux306' order represents '1' with '1'
c Var 'aux306' order represents '0' with '-1608'
c Encoding variable: aux307 with domain: bool (representing constraint (((x_00003_00009=6) + (x_00001_00009=6) + (x_00004_00009=6) + (x_00002_00009=6))<=1))
c Var 'aux307' direct represents '0' with '-1609'
c Var 'aux307' direct represents '1' with '1609'
c Var 'aux307' order represents '1' with '1'
c Var 'aux307' order represents '0' with '-1609'
c Encoding variable: aux308 with domain: bool (representing constraint (((x_00003_00009=7) + (x_00001_00009=7) + (x_00004_00009=7) + (x_00002_00009=7))<=1))
c Var 'aux308' direct represents '0' with '-1610'
c Var 'aux308' direct represents '1' with '1610'
c Var 'aux308' order represents '1' with '1'
c Var 'aux308' order represents '0' with '-1610'
c Encoding variable: aux309 with domain: bool (representing constraint (((x_00003_00009=8) + (x_00001_00009=8) + (x_00004_00009=8) + (x_00002_00009=8))<=1))
c Var 'aux309' direct represents '0' with '-1611'
c Var 'aux309' direct represents '1' with '1611'
c Var 'aux309' order represents '1' with '1'
c Var 'aux309' order represents '0' with '-1611'
c Encoding variable: aux310 with domain: bool (representing constraint (((x_00003_00009=9) + (x_00001_00009=9) + (x_00004_00009=9) + (x_00002_00009=9))<=1))
c Var 'aux310' direct represents '0' with '-1612'
c Var 'aux310' direct represents '1' with '1612'
c Var 'aux310' order represents '1' with '1'
c Var 'aux310' order represents '0' with '-1612'
c Encoding variable: aux311 with domain: bool (representing constraint (((x_00003_00001=1) + (x_00003_00002=1) + (x_00002_00001=1) + (x_00002_00002=1))<=1))
c Var 'aux311' direct represents '0' with '-1613'
c Var 'aux311' direct represents '1' with '1613'
c Var 'aux311' order represents '1' with '1'
c Var 'aux311' order represents '0' with '-1613'
c Encoding variable: aux312 with domain: bool (representing constraint (((x_00003_00001=2) + (x_00003_00002=2) + (x_00002_00001=2) + (x_00002_00002=2))<=1))
c Var 'aux312' direct represents '0' with '-1614'
c Var 'aux312' direct represents '1' with '1614'
c Var 'aux312' order represents '1' with '1'
c Var 'aux312' order represents '0' with '-1614'
c Encoding variable: aux313 with domain: bool (representing constraint (((x_00003_00001=3) + (x_00003_00002=3) + (x_00002_00001=3) + (x_00002_00002=3))<=1))
c Var 'aux313' direct represents '0' with '-1615'
c Var 'aux313' direct represents '1' with '1615'
c Var 'aux313' order represents '1' with '1'
c Var 'aux313' order represents '0' with '-1615'
c Encoding variable: aux314 with domain: bool (representing constraint (((x_00003_00001=4) + (x_00003_00002=4) + (x_00002_00001=4) + (x_00002_00002=4))<=1))
c Var 'aux314' direct represents '0' with '-1616'
c Var 'aux314' direct represents '1' with '1616'
c Var 'aux314' order represents '1' with '1'
c Var 'aux314' order represents '0' with '-1616'
c Encoding variable: aux315 with domain: bool (representing constraint (((x_00003_00001=5) + (x_00003_00002=5) + (x_00002_00001=5) + (x_00002_00002=5))<=1))
c Var 'aux315' direct represents '0' with '-1617'
c Var 'aux315' direct represents '1' with '1617'
c Var 'aux315' order represents '1' with '1'
c Var 'aux315' order represents '0' with '-1617'
c Encoding variable: aux316 with domain: bool (representing constraint (((x_00003_00001=6) + (x_00003_00002=6) + (x_00002_00001=6) + (x_00002_00002=6))<=1))
c Var 'aux316' direct represents '0' with '-1618'
c Var 'aux316' direct represents '1' with '1618'
c Var 'aux316' order represents '1' with '1'
c Var 'aux316' order represents '0' with '-1618'
c Encoding variable: aux317 with domain: bool (representing constraint (((x_00003_00001=7) + (x_00003_00002=7) + (x_00002_00001=7) + (x_00002_00002=7))<=1))
c Var 'aux317' direct represents '0' with '-1619'
c Var 'aux317' direct represents '1' with '1619'
c Var 'aux317' order represents '1' with '1'
c Var 'aux317' order represents '0' with '-1619'
c Encoding variable: aux318 with domain: bool (representing constraint (((x_00003_00001=8) + (x_00003_00002=8) + (x_00002_00001=8) + (x_00002_00002=8))<=1))
c Var 'aux318' direct represents '0' with '-1620'
c Var 'aux318' direct represents '1' with '1620'
c Var 'aux318' order represents '1' with '1'
c Var 'aux318' order represents '0' with '-1620'
c Encoding variable: aux319 with domain: bool (representing constraint (((x_00003_00001=9) + (x_00003_00002=9) + (x_00002_00001=9) + (x_00002_00002=9))<=1))
c Var 'aux319' direct represents '0' with '-1621'
c Var 'aux319' direct represents '1' with '1621'
c Var 'aux319' order represents '1' with '1'
c Var 'aux319' order represents '0' with '-1621'
c Encoding variable: aux320 with domain: bool (representing constraint (((x_00003_00003=1) + (x_00003_00004=1) + (x_00004_00004=1))<=1))
c Var 'aux320' direct represents '0' with '-1622'
c Var 'aux320' direct represents '1' with '1622'
c Var 'aux320' order represents '1' with '1'
c Var 'aux320' order represents '0' with '-1622'
c Encoding variable: aux321 with domain: bool (representing constraint (((x_00003_00003=2) + (x_00003_00004=2) + (x_00004_00004=2))<=1))
c Var 'aux321' direct represents '0' with '-1623'
c Var 'aux321' direct represents '1' with '1623'
c Var 'aux321' order represents '1' with '1'
c Var 'aux321' order represents '0' with '-1623'
c Encoding variable: aux322 with domain: bool (representing constraint (((x_00003_00003=3) + (x_00003_00004=3) + (x_00004_00004=3))<=1))
c Var 'aux322' direct represents '0' with '-1624'
c Var 'aux322' direct represents '1' with '1624'
c Var 'aux322' order represents '1' with '1'
c Var 'aux322' order represents '0' with '-1624'
c Encoding variable: aux323 with domain: bool (representing constraint (((x_00003_00003=4) + (x_00003_00004=4) + (x_00004_00004=4))<=1))
c Var 'aux323' direct represents '0' with '-1625'
c Var 'aux323' direct represents '1' with '1625'
c Var 'aux323' order represents '1' with '1'
c Var 'aux323' order represents '0' with '-1625'
c Encoding variable: aux324 with domain: bool (representing constraint (((x_00003_00003=5) + (x_00003_00004=5) + (x_00004_00004=5))<=1))
c Var 'aux324' direct represents '0' with '-1626'
c Var 'aux324' direct represents '1' with '1626'
c Var 'aux324' order represents '1' with '1'
c Var 'aux324' order represents '0' with '-1626'
c Encoding variable: aux325 with domain: bool (representing constraint (((x_00003_00003=6) + (x_00003_00004=6) + (x_00004_00004=6))<=1))
c Var 'aux325' direct represents '0' with '-1627'
c Var 'aux325' direct represents '1' with '1627'
c Var 'aux325' order represents '1' with '1'
c Var 'aux325' order represents '0' with '-1627'
c Encoding variable: aux326 with domain: bool (representing constraint (((x_00003_00003=7) + (x_00003_00004=7) + (x_00004_00004=7))<=1))
c Var 'aux326' direct represents '0' with '-1628'
c Var 'aux326' direct represents '1' with '1628'
c Var 'aux326' order represents '1' with '1'
c Var 'aux326' order represents '0' with '-1628'
c Encoding variable: aux327 with domain: bool (representing constraint (((x_00003_00003=8) + (x_00003_00004=8) + (x_00004_00004=8))<=1))
c Var 'aux327' direct represents '0' with '-1629'
c Var 'aux327' direct represents '1' with '1629'
c Var 'aux327' order represents '1' with '1'
c Var 'aux327' order represents '0' with '-1629'
c Encoding variable: aux328 with domain: bool (representing constraint (((x_00003_00003=9) + (x_00003_00004=9) + (x_00004_00004=9))<=1))
c Var 'aux328' direct represents '0' with '-1630'
c Var 'aux328' direct represents '1' with '1630'
c Var 'aux328' order represents '1' with '1'
c Var 'aux328' order represents '0' with '-1630'
c Encoding variable: aux329 with domain: bool (representing constraint (((x_00003_00006=1) + (x_00004_00006=1) + (x_00005_00006=1))<=1))
c Var 'aux329' direct represents '0' with '-1631'
c Var 'aux329' direct represents '1' with '1631'
c Var 'aux329' order represents '1' with '1'
c Var 'aux329' order represents '0' with '-1631'
c Encoding variable: aux330 with domain: bool (representing constraint (((x_00003_00006=2) + (x_00004_00006=2) + (x_00005_00006=2))<=1))
c Var 'aux330' direct represents '0' with '-1632'
c Var 'aux330' direct represents '1' with '1632'
c Var 'aux330' order represents '1' with '1'
c Var 'aux330' order represents '0' with '-1632'
c Encoding variable: aux331 with domain: bool (representing constraint (((x_00003_00006=3) + (x_00004_00006=3) + (x_00005_00006=3))<=1))
c Var 'aux331' direct represents '0' with '-1633'
c Var 'aux331' direct represents '1' with '1633'
c Var 'aux331' order represents '1' with '1'
c Var 'aux331' order represents '0' with '-1633'
c Encoding variable: aux332 with domain: bool (representing constraint (((x_00003_00006=4) + (x_00004_00006=4) + (x_00005_00006=4))<=1))
c Var 'aux332' direct represents '0' with '-1634'
c Var 'aux332' direct represents '1' with '1634'
c Var 'aux332' order represents '1' with '1'
c Var 'aux332' order represents '0' with '-1634'
c Encoding variable: aux333 with domain: bool (representing constraint (((x_00003_00006=5) + (x_00004_00006=5) + (x_00005_00006=5))<=1))
c Var 'aux333' direct represents '0' with '-1635'
c Var 'aux333' direct represents '1' with '1635'
c Var 'aux333' order represents '1' with '1'
c Var 'aux333' order represents '0' with '-1635'
c Encoding variable: aux334 with domain: bool (representing constraint (((x_00003_00006=6) + (x_00004_00006=6) + (x_00005_00006=6))<=1))
c Var 'aux334' direct represents '0' with '-1636'
c Var 'aux334' direct represents '1' with '1636'
c Var 'aux334' order represents '1' with '1'
c Var 'aux334' order represents '0' with '-1636'
c Encoding variable: aux335 with domain: bool (representing constraint (((x_00003_00006=7) + (x_00004_00006=7) + (x_00005_00006=7))<=1))
c Var 'aux335' direct represents '0' with '-1637'
c Var 'aux335' direct represents '1' with '1637'
c Var 'aux335' order represents '1' with '1'
c Var 'aux335' order represents '0' with '-1637'
c Encoding variable: aux336 with domain: bool (representing constraint (((x_00003_00006=8) + (x_00004_00006=8) + (x_00005_00006=8))<=1))
c Var 'aux336' direct represents '0' with '-1638'
c Var 'aux336' direct represents '1' with '1638'
c Var 'aux336' order represents '1' with '1'
c Var 'aux336' order represents '0' with '-1638'
c Encoding variable: aux337 with domain: bool (representing constraint (((x_00003_00006=9) + (x_00004_00006=9) + (x_00005_00006=9))<=1))
c Var 'aux337' direct represents '0' with '-1639'
c Var 'aux337' direct represents '1' with '1639'
c Var 'aux337' order represents '1' with '1'
c Var 'aux337' order represents '0' with '-1639'
c Encoding variable: aux338 with domain: bool (representing constraint (((x_00003_00007=1) + (x_00003_00008=1) + (x_00004_00007=1))<=1))
c Var 'aux338' direct represents '0' with '-1640'
c Var 'aux338' direct represents '1' with '1640'
c Var 'aux338' order represents '1' with '1'
c Var 'aux338' order represents '0' with '-1640'
c Encoding variable: aux339 with domain: bool (representing constraint (((x_00003_00007=2) + (x_00003_00008=2) + (x_00004_00007=2))<=1))
c Var 'aux339' direct represents '0' with '-1641'
c Var 'aux339' direct represents '1' with '1641'
c Var 'aux339' order represents '1' with '1'
c Var 'aux339' order represents '0' with '-1641'
c Encoding variable: aux340 with domain: bool (representing constraint (((x_00003_00007=3) + (x_00003_00008=3) + (x_00004_00007=3))<=1))
c Var 'aux340' direct represents '0' with '-1642'
c Var 'aux340' direct represents '1' with '1642'
c Var 'aux340' order represents '1' with '1'
c Var 'aux340' order represents '0' with '-1642'
c Encoding variable: aux341 with domain: bool (representing constraint (((x_00003_00007=4) + (x_00003_00008=4) + (x_00004_00007=4))<=1))
c Var 'aux341' direct represents '0' with '-1643'
c Var 'aux341' direct represents '1' with '1643'
c Var 'aux341' order represents '1' with '1'
c Var 'aux341' order represents '0' with '-1643'
c Encoding variable: aux342 with domain: bool (representing constraint (((x_00003_00007=5) + (x_00003_00008=5) + (x_00004_00007=5))<=1))
c Var 'aux342' direct represents '0' with '-1644'
c Var 'aux342' direct represents '1' with '1644'
c Var 'aux342' order represents '1' with '1'
c Var 'aux342' order represents '0' with '-1644'
c Encoding variable: aux343 with domain: bool (representing constraint (((x_00003_00007=6) + (x_00003_00008=6) + (x_00004_00007=6))<=1))
c Var 'aux343' direct represents '0' with '-1645'
c Var 'aux343' direct represents '1' with '1645'
c Var 'aux343' order represents '1' with '1'
c Var 'aux343' order represents '0' with '-1645'
c Encoding variable: aux344 with domain: bool (representing constraint (((x_00003_00007=7) + (x_00003_00008=7) + (x_00004_00007=7))<=1))
c Var 'aux344' direct represents '0' with '-1646'
c Var 'aux344' direct represents '1' with '1646'
c Var 'aux344' order represents '1' with '1'
c Var 'aux344' order represents '0' with '-1646'
c Encoding variable: aux345 with domain: bool (representing constraint (((x_00003_00007=8) + (x_00003_00008=8) + (x_00004_00007=8))<=1))
c Var 'aux345' direct represents '0' with '-1647'
c Var 'aux345' direct represents '1' with '1647'
c Var 'aux345' order represents '1' with '1'
c Var 'aux345' order represents '0' with '-1647'
c Encoding variable: aux346 with domain: bool (representing constraint (((x_00003_00007=9) + (x_00003_00008=9) + (x_00004_00007=9))<=1))
c Var 'aux346' direct represents '0' with '-1648'
c Var 'aux346' direct represents '1' with '1648'
c Var 'aux346' order represents '1' with '1'
c Var 'aux346' order represents '0' with '-1648'
c Encoding variable: aux347 with domain: bool (representing constraint (((x_00006_00005=1) + (x_00004_00005=1) + (x_00005_00005=1))<=1))
c Var 'aux347' direct represents '0' with '-1649'
c Var 'aux347' direct represents '1' with '1649'
c Var 'aux347' order represents '1' with '1'
c Var 'aux347' order represents '0' with '-1649'
c Encoding variable: aux348 with domain: bool (representing constraint (((x_00006_00005=2) + (x_00004_00005=2) + (x_00005_00005=2))<=1))
c Var 'aux348' direct represents '0' with '-1650'
c Var 'aux348' direct represents '1' with '1650'
c Var 'aux348' order represents '1' with '1'
c Var 'aux348' order represents '0' with '-1650'
c Encoding variable: aux349 with domain: bool (representing constraint (((x_00006_00005=3) + (x_00004_00005=3) + (x_00005_00005=3))<=1))
c Var 'aux349' direct represents '0' with '-1651'
c Var 'aux349' direct represents '1' with '1651'
c Var 'aux349' order represents '1' with '1'
c Var 'aux349' order represents '0' with '-1651'
c Encoding variable: aux350 with domain: bool (representing constraint (((x_00006_00005=4) + (x_00004_00005=4) + (x_00005_00005=4))<=1))
c Var 'aux350' direct represents '0' with '-1652'
c Var 'aux350' direct represents '1' with '1652'
c Var 'aux350' order represents '1' with '1'
c Var 'aux350' order represents '0' with '-1652'
c Encoding variable: aux351 with domain: bool (representing constraint (((x_00006_00005=5) + (x_00004_00005=5) + (x_00005_00005=5))<=1))
c Var 'aux351' direct represents '0' with '-1653'
c Var 'aux351' direct represents '1' with '1653'
c Var 'aux351' order represents '1' with '1'
c Var 'aux351' order represents '0' with '-1653'
c Encoding variable: aux352 with domain: bool (representing constraint (((x_00006_00005=6) + (x_00004_00005=6) + (x_00005_00005=6))<=1))
c Var 'aux352' direct represents '0' with '-1654'
c Var 'aux352' direct represents '1' with '1654'
c Var 'aux352' order represents '1' with '1'
c Var 'aux352' order represents '0' with '-1654'
c Encoding variable: aux353 with domain: bool (representing constraint (((x_00006_00005=7) + (x_00004_00005=7) + (x_00005_00005=7))<=1))
c Var 'aux353' direct represents '0' with '-1655'
c Var 'aux353' direct represents '1' with '1655'
c Var 'aux353' order represents '1' with '1'
c Var 'aux353' order represents '0' with '-1655'
c Encoding variable: aux354 with domain: bool (representing constraint (((x_00006_00005=8) + (x_00004_00005=8) + (x_00005_00005=8))<=1))
c Var 'aux354' direct represents '0' with '-1656'
c Var 'aux354' direct represents '1' with '1656'
c Var 'aux354' order represents '1' with '1'
c Var 'aux354' order represents '0' with '-1656'
c Encoding variable: aux355 with domain: bool (representing constraint (((x_00006_00005=9) + (x_00004_00005=9) + (x_00005_00005=9))<=1))
c Var 'aux355' direct represents '0' with '-1657'
c Var 'aux355' direct represents '1' with '1657'
c Var 'aux355' order represents '1' with '1'
c Var 'aux355' order represents '0' with '-1657'
c Encoding variable: aux356 with domain: bool (representing constraint (((x_00004_00008=1) + (x_00005_00007=1) + (x_00005_00008=1))<=1))
c Var 'aux356' direct represents '0' with '-1658'
c Var 'aux356' direct represents '1' with '1658'
c Var 'aux356' order represents '1' with '1'
c Var 'aux356' order represents '0' with '-1658'
c Encoding variable: aux357 with domain: bool (representing constraint (((x_00004_00008=2) + (x_00005_00007=2) + (x_00005_00008=2))<=1))
c Var 'aux357' direct represents '0' with '-1659'
c Var 'aux357' direct represents '1' with '1659'
c Var 'aux357' order represents '1' with '1'
c Var 'aux357' order represents '0' with '-1659'
c Encoding variable: aux358 with domain: bool (representing constraint (((x_00004_00008=3) + (x_00005_00007=3) + (x_00005_00008=3))<=1))
c Var 'aux358' direct represents '0' with '-1660'
c Var 'aux358' direct represents '1' with '1660'
c Var 'aux358' order represents '1' with '1'
c Var 'aux358' order represents '0' with '-1660'
c Encoding variable: aux359 with domain: bool (representing constraint (((x_00004_00008=4) + (x_00005_00007=4) + (x_00005_00008=4))<=1))
c Var 'aux359' direct represents '0' with '-1661'
c Var 'aux359' direct represents '1' with '1661'
c Var 'aux359' order represents '1' with '1'
c Var 'aux359' order represents '0' with '-1661'
c Encoding variable: aux360 with domain: bool (representing constraint (((x_00004_00008=5) + (x_00005_00007=5) + (x_00005_00008=5))<=1))
c Var 'aux360' direct represents '0' with '-1662'
c Var 'aux360' direct represents '1' with '1662'
c Var 'aux360' order represents '1' with '1'
c Var 'aux360' order represents '0' with '-1662'
c Encoding variable: aux361 with domain: bool (representing constraint (((x_00004_00008=6) + (x_00005_00007=6) + (x_00005_00008=6))<=1))
c Var 'aux361' direct represents '0' with '-1663'
c Var 'aux361' direct represents '1' with '1663'
c Var 'aux361' order represents '1' with '1'
c Var 'aux361' order represents '0' with '-1663'
c Encoding variable: aux362 with domain: bool (representing constraint (((x_00004_00008=7) + (x_00005_00007=7) + (x_00005_00008=7))<=1))
c Var 'aux362' direct represents '0' with '-1664'
c Var 'aux362' direct represents '1' with '1664'
c Var 'aux362' order represents '1' with '1'
c Var 'aux362' order represents '0' with '-1664'
c Encoding variable: aux363 with domain: bool (representing constraint (((x_00004_00008=8) + (x_00005_00007=8) + (x_00005_00008=8))<=1))
c Var 'aux363' direct represents '0' with '-1665'
c Var 'aux363' direct represents '1' with '1665'
c Var 'aux363' order represents '1' with '1'
c Var 'aux363' order represents '0' with '-1665'
c Encoding variable: aux364 with domain: bool (representing constraint (((x_00004_00008=9) + (x_00005_00007=9) + (x_00005_00008=9))<=1))
c Var 'aux364' direct represents '0' with '-1666'
c Var 'aux364' direct represents '1' with '1666'
c Var 'aux364' order represents '1' with '1'
c Var 'aux364' order represents '0' with '-1666'
c Encoding variable: aux365 with domain: bool (representing constraint (((x_00006_00002=1) + (x_00005_00002=1) + (x_00005_00003=1))<=1))
c Var 'aux365' direct represents '0' with '-1667'
c Var 'aux365' direct represents '1' with '1667'
c Var 'aux365' order represents '1' with '1'
c Var 'aux365' order represents '0' with '-1667'
c Encoding variable: aux366 with domain: bool (representing constraint (((x_00006_00002=2) + (x_00005_00002=2) + (x_00005_00003=2))<=1))
c Var 'aux366' direct represents '0' with '-1668'
c Var 'aux366' direct represents '1' with '1668'
c Var 'aux366' order represents '1' with '1'
c Var 'aux366' order represents '0' with '-1668'
c Encoding variable: aux367 with domain: bool (representing constraint (((x_00006_00002=3) + (x_00005_00002=3) + (x_00005_00003=3))<=1))
c Var 'aux367' direct represents '0' with '-1669'
c Var 'aux367' direct represents '1' with '1669'
c Var 'aux367' order represents '1' with '1'
c Var 'aux367' order represents '0' with '-1669'
c Encoding variable: aux368 with domain: bool (representing constraint (((x_00006_00002=4) + (x_00005_00002=4) + (x_00005_00003=4))<=1))
c Var 'aux368' direct represents '0' with '-1670'
c Var 'aux368' direct represents '1' with '1670'
c Var 'aux368' order represents '1' with '1'
c Var 'aux368' order represents '0' with '-1670'
c Encoding variable: aux369 with domain: bool (representing constraint (((x_00006_00002=5) + (x_00005_00002=5) + (x_00005_00003=5))<=1))
c Var 'aux369' direct represents '0' with '-1671'
c Var 'aux369' direct represents '1' with '1671'
c Var 'aux369' order represents '1' with '1'
c Var 'aux369' order represents '0' with '-1671'
c Encoding variable: aux370 with domain: bool (representing constraint (((x_00006_00002=6) + (x_00005_00002=6) + (x_00005_00003=6))<=1))
c Var 'aux370' direct represents '0' with '-1672'
c Var 'aux370' direct represents '1' with '1672'
c Var 'aux370' order represents '1' with '1'
c Var 'aux370' order represents '0' with '-1672'
c Encoding variable: aux371 with domain: bool (representing constraint (((x_00006_00002=7) + (x_00005_00002=7) + (x_00005_00003=7))<=1))
c Var 'aux371' direct represents '0' with '-1673'
c Var 'aux371' direct represents '1' with '1673'
c Var 'aux371' order represents '1' with '1'
c Var 'aux371' order represents '0' with '-1673'
c Encoding variable: aux372 with domain: bool (representing constraint (((x_00006_00002=8) + (x_00005_00002=8) + (x_00005_00003=8))<=1))
c Var 'aux372' direct represents '0' with '-1674'
c Var 'aux372' direct represents '1' with '1674'
c Var 'aux372' order represents '1' with '1'
c Var 'aux372' order represents '0' with '-1674'
c Encoding variable: aux373 with domain: bool (representing constraint (((x_00006_00002=9) + (x_00005_00002=9) + (x_00005_00003=9))<=1))
c Var 'aux373' direct represents '0' with '-1675'
c Var 'aux373' direct represents '1' with '1675'
c Var 'aux373' order represents '1' with '1'
c Var 'aux373' order represents '0' with '-1675'
c Encoding variable: aux374 with domain: bool (representing constraint (((x_00006_00004=1) + (x_00007_00004=1) + (x_00005_00004=1))<=1))
c Var 'aux374' direct represents '0' with '-1676'
c Var 'aux374' direct represents '1' with '1676'
c Var 'aux374' order represents '1' with '1'
c Var 'aux374' order represents '0' with '-1676'
c Encoding variable: aux375 with domain: bool (representing constraint (((x_00006_00004=2) + (x_00007_00004=2) + (x_00005_00004=2))<=1))
c Var 'aux375' direct represents '0' with '-1677'
c Var 'aux375' direct represents '1' with '1677'
c Var 'aux375' order represents '1' with '1'
c Var 'aux375' order represents '0' with '-1677'
c Encoding variable: aux376 with domain: bool (representing constraint (((x_00006_00004=3) + (x_00007_00004=3) + (x_00005_00004=3))<=1))
c Var 'aux376' direct represents '0' with '-1678'
c Var 'aux376' direct represents '1' with '1678'
c Var 'aux376' order represents '1' with '1'
c Var 'aux376' order represents '0' with '-1678'
c Encoding variable: aux377 with domain: bool (representing constraint (((x_00006_00004=4) + (x_00007_00004=4) + (x_00005_00004=4))<=1))
c Var 'aux377' direct represents '0' with '-1679'
c Var 'aux377' direct represents '1' with '1679'
c Var 'aux377' order represents '1' with '1'
c Var 'aux377' order represents '0' with '-1679'
c Encoding variable: aux378 with domain: bool (representing constraint (((x_00006_00004=5) + (x_00007_00004=5) + (x_00005_00004=5))<=1))
c Var 'aux378' direct represents '0' with '-1680'
c Var 'aux378' direct represents '1' with '1680'
c Var 'aux378' order represents '1' with '1'
c Var 'aux378' order represents '0' with '-1680'
c Encoding variable: aux379 with domain: bool (representing constraint (((x_00006_00004=6) + (x_00007_00004=6) + (x_00005_00004=6))<=1))
c Var 'aux379' direct represents '0' with '-1681'
c Var 'aux379' direct represents '1' with '1681'
c Var 'aux379' order represents '1' with '1'
c Var 'aux379' order represents '0' with '-1681'
c Encoding variable: aux380 with domain: bool (representing constraint (((x_00006_00004=7) + (x_00007_00004=7) + (x_00005_00004=7))<=1))
c Var 'aux380' direct represents '0' with '-1682'
c Var 'aux380' direct represents '1' with '1682'
c Var 'aux380' order represents '1' with '1'
c Var 'aux380' order represents '0' with '-1682'
c Encoding variable: aux381 with domain: bool (representing constraint (((x_00006_00004=8) + (x_00007_00004=8) + (x_00005_00004=8))<=1))
c Var 'aux381' direct represents '0' with '-1683'
c Var 'aux381' direct represents '1' with '1683'
c Var 'aux381' order represents '1' with '1'
c Var 'aux381' order represents '0' with '-1683'
c Encoding variable: aux382 with domain: bool (representing constraint (((x_00006_00004=9) + (x_00007_00004=9) + (x_00005_00004=9))<=1))
c Var 'aux382' direct represents '0' with '-1684'
c Var 'aux382' direct represents '1' with '1684'
c Var 'aux382' order represents '1' with '1'
c Var 'aux382' order represents '0' with '-1684'
c Encoding variable: aux383 with domain: bool (representing constraint (((x_00008_00001=1) + (x_00006_00001=1) + (x_00009_00001=1) + (x_00007_00001=1))<=1))
c Var 'aux383' direct represents '0' with '-1685'
c Var 'aux383' direct represents '1' with '1685'
c Var 'aux383' order represents '1' with '1'
c Var 'aux383' order represents '0' with '-1685'
c Encoding variable: aux384 with domain: bool (representing constraint (((x_00008_00001=2) + (x_00006_00001=2) + (x_00009_00001=2) + (x_00007_00001=2))<=1))
c Var 'aux384' direct represents '0' with '-1686'
c Var 'aux384' direct represents '1' with '1686'
c Var 'aux384' order represents '1' with '1'
c Var 'aux384' order represents '0' with '-1686'
c Encoding variable: aux385 with domain: bool (representing constraint (((x_00008_00001=3) + (x_00006_00001=3) + (x_00009_00001=3) + (x_00007_00001=3))<=1))
c Var 'aux385' direct represents '0' with '-1687'
c Var 'aux385' direct represents '1' with '1687'
c Var 'aux385' order represents '1' with '1'
c Var 'aux385' order represents '0' with '-1687'
c Encoding variable: aux386 with domain: bool (representing constraint (((x_00008_00001=4) + (x_00006_00001=4) + (x_00009_00001=4) + (x_00007_00001=4))<=1))
c Var 'aux386' direct represents '0' with '-1688'
c Var 'aux386' direct represents '1' with '1688'
c Var 'aux386' order represents '1' with '1'
c Var 'aux386' order represents '0' with '-1688'
c Encoding variable: aux387 with domain: bool (representing constraint (((x_00008_00001=5) + (x_00006_00001=5) + (x_00009_00001=5) + (x_00007_00001=5))<=1))
c Var 'aux387' direct represents '0' with '-1689'
c Var 'aux387' direct represents '1' with '1689'
c Var 'aux387' order represents '1' with '1'
c Var 'aux387' order represents '0' with '-1689'
c Encoding variable: aux388 with domain: bool (representing constraint (((x_00008_00001=6) + (x_00006_00001=6) + (x_00009_00001=6) + (x_00007_00001=6))<=1))
c Var 'aux388' direct represents '0' with '-1690'
c Var 'aux388' direct represents '1' with '1690'
c Var 'aux388' order represents '1' with '1'
c Var 'aux388' order represents '0' with '-1690'
c Encoding variable: aux389 with domain: bool (representing constraint (((x_00008_00001=7) + (x_00006_00001=7) + (x_00009_00001=7) + (x_00007_00001=7))<=1))
c Var 'aux389' direct represents '0' with '-1691'
c Var 'aux389' direct represents '1' with '1691'
c Var 'aux389' order represents '1' with '1'
c Var 'aux389' order represents '0' with '-1691'
c Encoding variable: aux390 with domain: bool (representing constraint (((x_00008_00001=8) + (x_00006_00001=8) + (x_00009_00001=8) + (x_00007_00001=8))<=1))
c Var 'aux390' direct represents '0' with '-1692'
c Var 'aux390' direct represents '1' with '1692'
c Var 'aux390' order represents '1' with '1'
c Var 'aux390' order represents '0' with '-1692'
c Encoding variable: aux391 with domain: bool (representing constraint (((x_00008_00001=9) + (x_00006_00001=9) + (x_00009_00001=9) + (x_00007_00001=9))<=1))
c Var 'aux391' direct represents '0' with '-1693'
c Var 'aux391' direct represents '1' with '1693'
c Var 'aux391' order represents '1' with '1'
c Var 'aux391' order represents '0' with '-1693'
c Encoding variable: aux392 with domain: bool (representing constraint (((x_00006_00003=1) + (x_00007_00002=1) + (x_00007_00003=1))<=1))
c Var 'aux392' direct represents '0' with '-1694'
c Var 'aux392' direct represents '1' with '1694'
c Var 'aux392' order represents '1' with '1'
c Var 'aux392' order represents '0' with '-1694'
c Encoding variable: aux393 with domain: bool (representing constraint (((x_00006_00003=2) + (x_00007_00002=2) + (x_00007_00003=2))<=1))
c Var 'aux393' direct represents '0' with '-1695'
c Var 'aux393' direct represents '1' with '1695'
c Var 'aux393' order represents '1' with '1'
c Var 'aux393' order represents '0' with '-1695'
c Encoding variable: aux394 with domain: bool (representing constraint (((x_00006_00003=3) + (x_00007_00002=3) + (x_00007_00003=3))<=1))
c Var 'aux394' direct represents '0' with '-1696'
c Var 'aux394' direct represents '1' with '1696'
c Var 'aux394' order represents '1' with '1'
c Var 'aux394' order represents '0' with '-1696'
c Encoding variable: aux395 with domain: bool (representing constraint (((x_00006_00003=4) + (x_00007_00002=4) + (x_00007_00003=4))<=1))
c Var 'aux395' direct represents '0' with '-1697'
c Var 'aux395' direct represents '1' with '1697'
c Var 'aux395' order represents '1' with '1'
c Var 'aux395' order represents '0' with '-1697'
c Encoding variable: aux396 with domain: bool (representing constraint (((x_00006_00003=5) + (x_00007_00002=5) + (x_00007_00003=5))<=1))
c Var 'aux396' direct represents '0' with '-1698'
c Var 'aux396' direct represents '1' with '1698'
c Var 'aux396' order represents '1' with '1'
c Var 'aux396' order represents '0' with '-1698'
c Encoding variable: aux397 with domain: bool (representing constraint (((x_00006_00003=6) + (x_00007_00002=6) + (x_00007_00003=6))<=1))
c Var 'aux397' direct represents '0' with '-1699'
c Var 'aux397' direct represents '1' with '1699'
c Var 'aux397' order represents '1' with '1'
c Var 'aux397' order represents '0' with '-1699'
c Encoding variable: aux398 with domain: bool (representing constraint (((x_00006_00003=7) + (x_00007_00002=7) + (x_00007_00003=7))<=1))
c Var 'aux398' direct represents '0' with '-1700'
c Var 'aux398' direct represents '1' with '1700'
c Var 'aux398' order represents '1' with '1'
c Var 'aux398' order represents '0' with '-1700'
c Encoding variable: aux399 with domain: bool (representing constraint (((x_00006_00003=8) + (x_00007_00002=8) + (x_00007_00003=8))<=1))
c Var 'aux399' direct represents '0' with '-1701'
c Var 'aux399' direct represents '1' with '1701'
c Var 'aux399' order represents '1' with '1'
c Var 'aux399' order represents '0' with '-1701'
c Encoding variable: aux400 with domain: bool (representing constraint (((x_00006_00003=9) + (x_00007_00002=9) + (x_00007_00003=9))<=1))
c Var 'aux400' direct represents '0' with '-1702'
c Var 'aux400' direct represents '1' with '1702'
c Var 'aux400' order represents '1' with '1'
c Var 'aux400' order represents '0' with '-1702'
c Encoding variable: aux401 with domain: bool (representing constraint (((x_00006_00006=1) + (x_00007_00006=1) + (x_00007_00007=1))<=1))
c Var 'aux401' direct represents '0' with '-1703'
c Var 'aux401' direct represents '1' with '1703'
c Var 'aux401' order represents '1' with '1'
c Var 'aux401' order represents '0' with '-1703'
c Encoding variable: aux402 with domain: bool (representing constraint (((x_00006_00006=2) + (x_00007_00006=2) + (x_00007_00007=2))<=1))
c Var 'aux402' direct represents '0' with '-1704'
c Var 'aux402' direct represents '1' with '1704'
c Var 'aux402' order represents '1' with '1'
c Var 'aux402' order represents '0' with '-1704'
c Encoding variable: aux403 with domain: bool (representing constraint (((x_00006_00006=3) + (x_00007_00006=3) + (x_00007_00007=3))<=1))
c Var 'aux403' direct represents '0' with '-1705'
c Var 'aux403' direct represents '1' with '1705'
c Var 'aux403' order represents '1' with '1'
c Var 'aux403' order represents '0' with '-1705'
c Encoding variable: aux404 with domain: bool (representing constraint (((x_00006_00006=4) + (x_00007_00006=4) + (x_00007_00007=4))<=1))
c Var 'aux404' direct represents '0' with '-1706'
c Var 'aux404' direct represents '1' with '1706'
c Var 'aux404' order represents '1' with '1'
c Var 'aux404' order represents '0' with '-1706'
c Encoding variable: aux405 with domain: bool (representing constraint (((x_00006_00006=5) + (x_00007_00006=5) + (x_00007_00007=5))<=1))
c Var 'aux405' direct represents '0' with '-1707'
c Var 'aux405' direct represents '1' with '1707'
c Var 'aux405' order represents '1' with '1'
c Var 'aux405' order represents '0' with '-1707'
c Encoding variable: aux406 with domain: bool (representing constraint (((x_00006_00006=6) + (x_00007_00006=6) + (x_00007_00007=6))<=1))
c Var 'aux406' direct represents '0' with '-1708'
c Var 'aux406' direct represents '1' with '1708'
c Var 'aux406' order represents '1' with '1'
c Var 'aux406' order represents '0' with '-1708'
c Encoding variable: aux407 with domain: bool (representing constraint (((x_00006_00006=7) + (x_00007_00006=7) + (x_00007_00007=7))<=1))
c Var 'aux407' direct represents '0' with '-1709'
c Var 'aux407' direct represents '1' with '1709'
c Var 'aux407' order represents '1' with '1'
c Var 'aux407' order represents '0' with '-1709'
c Encoding variable: aux408 with domain: bool (representing constraint (((x_00006_00006=8) + (x_00007_00006=8) + (x_00007_00007=8))<=1))
c Var 'aux408' direct represents '0' with '-1710'
c Var 'aux408' direct represents '1' with '1710'
c Var 'aux408' order represents '1' with '1'
c Var 'aux408' order represents '0' with '-1710'
c Encoding variable: aux409 with domain: bool (representing constraint (((x_00006_00006=9) + (x_00007_00006=9) + (x_00007_00007=9))<=1))
c Var 'aux409' direct represents '0' with '-1711'
c Var 'aux409' direct represents '1' with '1711'
c Var 'aux409' order represents '1' with '1'
c Var 'aux409' order represents '0' with '-1711'
c Encoding variable: aux410 with domain: bool (representing constraint (((x_00008_00004=1) + (x_00008_00005=1) + (x_00009_00004=1) + (x_00007_00005=1))<=1))
c Var 'aux410' direct represents '0' with '-1712'
c Var 'aux410' direct represents '1' with '1712'
c Var 'aux410' order represents '1' with '1'
c Var 'aux410' order represents '0' with '-1712'
c Encoding variable: aux411 with domain: bool (representing constraint (((x_00008_00004=2) + (x_00008_00005=2) + (x_00009_00004=2) + (x_00007_00005=2))<=1))
c Var 'aux411' direct represents '0' with '-1713'
c Var 'aux411' direct represents '1' with '1713'
c Var 'aux411' order represents '1' with '1'
c Var 'aux411' order represents '0' with '-1713'
c Encoding variable: aux412 with domain: bool (representing constraint (((x_00008_00004=3) + (x_00008_00005=3) + (x_00009_00004=3) + (x_00007_00005=3))<=1))
c Var 'aux412' direct represents '0' with '-1714'
c Var 'aux412' direct represents '1' with '1714'
c Var 'aux412' order represents '1' with '1'
c Var 'aux412' order represents '0' with '-1714'
c Encoding variable: aux413 with domain: bool (representing constraint (((x_00008_00004=4) + (x_00008_00005=4) + (x_00009_00004=4) + (x_00007_00005=4))<=1))
c Var 'aux413' direct represents '0' with '-1715'
c Var 'aux413' direct represents '1' with '1715'
c Var 'aux413' order represents '1' with '1'
c Var 'aux413' order represents '0' with '-1715'
c Encoding variable: aux414 with domain: bool (representing constraint (((x_00008_00004=5) + (x_00008_00005=5) + (x_00009_00004=5) + (x_00007_00005=5))<=1))
c Var 'aux414' direct represents '0' with '-1716'
c Var 'aux414' direct represents '1' with '1716'
c Var 'aux414' order represents '1' with '1'
c Var 'aux414' order represents '0' with '-1716'
c Encoding variable: aux415 with domain: bool (representing constraint (((x_00008_00004=6) + (x_00008_00005=6) + (x_00009_00004=6) + (x_00007_00005=6))<=1))
c Var 'aux415' direct represents '0' with '-1717'
c Var 'aux415' direct represents '1' with '1717'
c Var 'aux415' order represents '1' with '1'
c Var 'aux415' order represents '0' with '-1717'
c Encoding variable: aux416 with domain: bool (representing constraint (((x_00008_00004=7) + (x_00008_00005=7) + (x_00009_00004=7) + (x_00007_00005=7))<=1))
c Var 'aux416' direct represents '0' with '-1718'
c Var 'aux416' direct represents '1' with '1718'
c Var 'aux416' order represents '1' with '1'
c Var 'aux416' order represents '0' with '-1718'
c Encoding variable: aux417 with domain: bool (representing constraint (((x_00008_00004=8) + (x_00008_00005=8) + (x_00009_00004=8) + (x_00007_00005=8))<=1))
c Var 'aux417' direct represents '0' with '-1719'
c Var 'aux417' direct represents '1' with '1719'
c Var 'aux417' order represents '1' with '1'
c Var 'aux417' order represents '0' with '-1719'
c Encoding variable: aux418 with domain: bool (representing constraint (((x_00008_00004=9) + (x_00008_00005=9) + (x_00009_00004=9) + (x_00007_00005=9))<=1))
c Var 'aux418' direct represents '0' with '-1720'
c Var 'aux418' direct represents '1' with '1720'
c Var 'aux418' order represents '1' with '1'
c Var 'aux418' order represents '0' with '-1720'
c Encoding variable: aux419 with domain: bool (representing constraint (((x_00008_00008=1) + (x_00008_00009=1) + (x_00007_00008=1) + (x_00007_00009=1))<=1))
c Var 'aux419' direct represents '0' with '-1721'
c Var 'aux419' direct represents '1' with '1721'
c Var 'aux419' order represents '1' with '1'
c Var 'aux419' order represents '0' with '-1721'
c Encoding variable: aux420 with domain: bool (representing constraint (((x_00008_00008=2) + (x_00008_00009=2) + (x_00007_00008=2) + (x_00007_00009=2))<=1))
c Var 'aux420' direct represents '0' with '-1722'
c Var 'aux420' direct represents '1' with '1722'
c Var 'aux420' order represents '1' with '1'
c Var 'aux420' order represents '0' with '-1722'
c Encoding variable: aux421 with domain: bool (representing constraint (((x_00008_00008=3) + (x_00008_00009=3) + (x_00007_00008=3) + (x_00007_00009=3))<=1))
c Var 'aux421' direct represents '0' with '-1723'
c Var 'aux421' direct represents '1' with '1723'
c Var 'aux421' order represents '1' with '1'
c Var 'aux421' order represents '0' with '-1723'
c Encoding variable: aux422 with domain: bool (representing constraint (((x_00008_00008=4) + (x_00008_00009=4) + (x_00007_00008=4) + (x_00007_00009=4))<=1))
c Var 'aux422' direct represents '0' with '-1724'
c Var 'aux422' direct represents '1' with '1724'
c Var 'aux422' order represents '1' with '1'
c Var 'aux422' order represents '0' with '-1724'
c Encoding variable: aux423 with domain: bool (representing constraint (((x_00008_00008=5) + (x_00008_00009=5) + (x_00007_00008=5) + (x_00007_00009=5))<=1))
c Var 'aux423' direct represents '0' with '-1725'
c Var 'aux423' direct represents '1' with '1725'
c Var 'aux423' order represents '1' with '1'
c Var 'aux423' order represents '0' with '-1725'
c Encoding variable: aux424 with domain: bool (representing constraint (((x_00008_00008=6) + (x_00008_00009=6) + (x_00007_00008=6) + (x_00007_00009=6))<=1))
c Var 'aux424' direct represents '0' with '-1726'
c Var 'aux424' direct represents '1' with '1726'
c Var 'aux424' order represents '1' with '1'
c Var 'aux424' order represents '0' with '-1726'
c Encoding variable: aux425 with domain: bool (representing constraint (((x_00008_00008=7) + (x_00008_00009=7) + (x_00007_00008=7) + (x_00007_00009=7))<=1))
c Var 'aux425' direct represents '0' with '-1727'
c Var 'aux425' direct represents '1' with '1727'
c Var 'aux425' order represents '1' with '1'
c Var 'aux425' order represents '0' with '-1727'
c Encoding variable: aux426 with domain: bool (representing constraint (((x_00008_00008=8) + (x_00008_00009=8) + (x_00007_00008=8) + (x_00007_00009=8))<=1))
c Var 'aux426' direct represents '0' with '-1728'
c Var 'aux426' direct represents '1' with '1728'
c Var 'aux426' order represents '1' with '1'
c Var 'aux426' order represents '0' with '-1728'
c Encoding variable: aux427 with domain: bool (representing constraint (((x_00008_00008=9) + (x_00008_00009=9) + (x_00007_00008=9) + (x_00007_00009=9))<=1))
c Var 'aux427' direct represents '0' with '-1729'
c Var 'aux427' direct represents '1' with '1729'
c Var 'aux427' order represents '1' with '1'
c Var 'aux427' order represents '0' with '-1729'
c Encoding variable: aux428 with domain: bool (representing constraint (((x_00009_00005=1) + (x_00009_00006=1) + (x_00009_00007=1))<=1))
c Var 'aux428' direct represents '0' with '-1730'
c Var 'aux428' direct represents '1' with '1730'
c Var 'aux428' order represents '1' with '1'
c Var 'aux428' order represents '0' with '-1730'
c Encoding variable: aux429 with domain: bool (representing constraint (((x_00009_00005=2) + (x_00009_00006=2) + (x_00009_00007=2))<=1))
c Var 'aux429' direct represents '0' with '-1731'
c Var 'aux429' direct represents '1' with '1731'
c Var 'aux429' order represents '1' with '1'
c Var 'aux429' order represents '0' with '-1731'
c Encoding variable: aux430 with domain: bool (representing constraint (((x_00009_00005=3) + (x_00009_00006=3) + (x_00009_00007=3))<=1))
c Var 'aux430' direct represents '0' with '-1732'
c Var 'aux430' direct represents '1' with '1732'
c Var 'aux430' order represents '1' with '1'
c Var 'aux430' order represents '0' with '-1732'
c Encoding variable: aux431 with domain: bool (representing constraint (((x_00009_00005=4) + (x_00009_00006=4) + (x_00009_00007=4))<=1))
c Var 'aux431' direct represents '0' with '-1733'
c Var 'aux431' direct represents '1' with '1733'
c Var 'aux431' order represents '1' with '1'
c Var 'aux431' order represents '0' with '-1733'
c Encoding variable: aux432 with domain: bool (representing constraint (((x_00009_00005=5) + (x_00009_00006=5) + (x_00009_00007=5))<=1))
c Var 'aux432' direct represents '0' with '-1734'
c Var 'aux432' direct represents '1' with '1734'
c Var 'aux432' order represents '1' with '1'
c Var 'aux432' order represents '0' with '-1734'
c Encoding variable: aux433 with domain: bool (representing constraint (((x_00009_00005=6) + (x_00009_00006=6) + (x_00009_00007=6))<=1))
c Var 'aux433' direct represents '0' with '-1735'
c Var 'aux433' direct represents '1' with '1735'
c Var 'aux433' order represents '1' with '1'
c Var 'aux433' order represents '0' with '-1735'
c Encoding variable: aux434 with domain: bool (representing constraint (((x_00009_00005=7) + (x_00009_00006=7) + (x_00009_00007=7))<=1))
c Var 'aux434' direct represents '0' with '-1736'
c Var 'aux434' direct represents '1' with '1736'
c Var 'aux434' order represents '1' with '1'
c Var 'aux434' order represents '0' with '-1736'
c Encoding variable: aux435 with domain: bool (representing constraint (((x_00009_00005=8) + (x_00009_00006=8) + (x_00009_00007=8))<=1))
c Var 'aux435' direct represents '0' with '-1737'
c Var 'aux435' direct represents '1' with '1737'
c Var 'aux435' order represents '1' with '1'
c Var 'aux435' order represents '0' with '-1737'
c Encoding variable: aux436 with domain: bool (representing constraint (((x_00009_00005=9) + (x_00009_00006=9) + (x_00009_00007=9))<=1))
c Var 'aux436' direct represents '0' with '-1738'
c Var 'aux436' direct represents '1' with '1738'
c Var 'aux436' order represents '1' with '1'
c Var 'aux436' order represents '0' with '-1738'
c Encoding variable: aux437 with domain: int(0..16) (representing constraint (shift(x_00002_00005, -1) + shift(x_00001_00006, -1)))
c Both direct and order encoding.
c Var 'aux437' order represents '0' with '1739'
c Var 'aux437' direct represents '0' with '1739'
c Var 'aux437' order represents '1' with '1740'
-1739 1740 0
c Var 'aux437' direct represents '1' with '1741'
1739 -1740 1741 0
-1741 1740 0
-1741 -1739 0
c Var 'aux437' order represents '2' with '1742'
-1740 1742 0
c Var 'aux437' direct represents '2' with '1743'
1740 -1742 1743 0
-1743 1742 0
-1743 -1740 0
c Var 'aux437' order represents '3' with '1744'
-1742 1744 0
c Var 'aux437' direct represents '3' with '1745'
1742 -1744 1745 0
-1745 1744 0
-1745 -1742 0
c Var 'aux437' order represents '4' with '1746'
-1744 1746 0
c Var 'aux437' direct represents '4' with '1747'
1744 -1746 1747 0
-1747 1746 0
-1747 -1744 0
c Var 'aux437' order represents '5' with '1748'
-1746 1748 0
c Var 'aux437' direct represents '5' with '1749'
1746 -1748 1749 0
-1749 1748 0
-1749 -1746 0
c Var 'aux437' order represents '6' with '1750'
-1748 1750 0
c Var 'aux437' direct represents '6' with '1751'
1748 -1750 1751 0
-1751 1750 0
-1751 -1748 0
c Var 'aux437' order represents '7' with '1752'
-1750 1752 0
c Var 'aux437' direct represents '7' with '1753'
1750 -1752 1753 0
-1753 1752 0
-1753 -1750 0
c Var 'aux437' order represents '8' with '1754'
-1752 1754 0
c Var 'aux437' direct represents '8' with '1755'
1752 -1754 1755 0
-1755 1754 0
-1755 -1752 0
c Var 'aux437' order represents '9' with '1756'
-1754 1756 0
c Var 'aux437' direct represents '9' with '1757'
1754 -1756 1757 0
-1757 1756 0
-1757 -1754 0
c Var 'aux437' order represents '10' with '1758'
-1756 1758 0
c Var 'aux437' direct represents '10' with '1759'
1756 -1758 1759 0
-1759 1758 0
-1759 -1756 0
c Var 'aux437' order represents '11' with '1760'
-1758 1760 0
c Var 'aux437' direct represents '11' with '1761'
1758 -1760 1761 0
-1761 1760 0
-1761 -1758 0
c Var 'aux437' order represents '12' with '1762'
-1760 1762 0
c Var 'aux437' direct represents '12' with '1763'
1760 -1762 1763 0
-1763 1762 0
-1763 -1760 0
c Var 'aux437' order represents '13' with '1764'
-1762 1764 0
c Var 'aux437' direct represents '13' with '1765'
1762 -1764 1765 0
-1765 1764 0
-1765 -1762 0
c Var 'aux437' order represents '14' with '1766'
-1764 1766 0
c Var 'aux437' direct represents '14' with '1767'
1764 -1766 1767 0
-1767 1766 0
-1767 -1764 0
c Var 'aux437' order represents '15' with '1768'
-1766 1768 0
c Var 'aux437' direct represents '15' with '1769'
1766 -1768 1769 0
-1769 1768 0
-1769 -1766 0
c Var 'aux437' direct represents '16' with '-1768'
1739 1741 1743 1745 1747 1749 1751 1753 1755 1757 1759 1761 1763 1765 1767 1769 -1768 0
c Encoding variable: aux438 with domain: int(0..16) (representing constraint (shift(x_00002_00009, -1) + shift(x_00001_00009, -1)))
c Both direct and order encoding.
c Var 'aux438' order represents '0' with '1770'
c Var 'aux438' direct represents '0' with '1770'
c Var 'aux438' order represents '1' with '1771'
-1770 1771 0
c Var 'aux438' direct represents '1' with '1772'
1770 -1771 1772 0
-1772 1771 0
-1772 -1770 0
c Var 'aux438' order represents '2' with '1773'
-1771 1773 0
c Var 'aux438' direct represents '2' with '1774'
1771 -1773 1774 0
-1774 1773 0
-1774 -1771 0
c Var 'aux438' order represents '3' with '1775'
-1773 1775 0
c Var 'aux438' direct represents '3' with '1776'
1773 -1775 1776 0
-1776 1775 0
-1776 -1773 0
c Var 'aux438' order represents '4' with '1777'
-1775 1777 0
c Var 'aux438' direct represents '4' with '1778'
1775 -1777 1778 0
-1778 1777 0
-1778 -1775 0
c Var 'aux438' order represents '5' with '1779'
-1777 1779 0
c Var 'aux438' direct represents '5' with '1780'
1777 -1779 1780 0
-1780 1779 0
-1780 -1777 0
c Var 'aux438' order represents '6' with '1781'
-1779 1781 0
c Var 'aux438' direct represents '6' with '1782'
1779 -1781 1782 0
-1782 1781 0
-1782 -1779 0
c Var 'aux438' order represents '7' with '1783'
-1781 1783 0
c Var 'aux438' direct represents '7' with '1784'
1781 -1783 1784 0
-1784 1783 0
-1784 -1781 0
c Var 'aux438' order represents '8' with '1785'
-1783 1785 0
c Var 'aux438' direct represents '8' with '1786'
1783 -1785 1786 0
-1786 1785 0
-1786 -1783 0
c Var 'aux438' order represents '9' with '1787'
-1785 1787 0
c Var 'aux438' direct represents '9' with '1788'
1785 -1787 1788 0
-1788 1787 0
-1788 -1785 0
c Var 'aux438' order represents '10' with '1789'
-1787 1789 0
c Var 'aux438' direct represents '10' with '1790'
1787 -1789 1790 0
-1790 1789 0
-1790 -1787 0
c Var 'aux438' order represents '11' with '1791'
-1789 1791 0
c Var 'aux438' direct represents '11' with '1792'
1789 -1791 1792 0
-1792 1791 0
-1792 -1789 0
c Var 'aux438' order represents '12' with '1793'
-1791 1793 0
c Var 'aux438' direct represents '12' with '1794'
1791 -1793 1794 0
-1794 1793 0
-1794 -1791 0
c Var 'aux438' order represents '13' with '1795'
-1793 1795 0
c Var 'aux438' direct represents '13' with '1796'
1793 -1795 1796 0
-1796 1795 0
-1796 -1793 0
c Var 'aux438' order represents '14' with '1797'
-1795 1797 0
c Var 'aux438' direct represents '14' with '1798'
1795 -1797 1798 0
-1798 1797 0
-1798 -1795 0
c Var 'aux438' order represents '15' with '1799'
-1797 1799 0
c Var 'aux438' direct represents '15' with '1800'
1797 -1799 1800 0
-1800 1799 0
-1800 -1797 0
c Var 'aux438' direct represents '16' with '-1799'
1770 1772 1774 1776 1778 1780 1782 1784 1786 1788 1790 1792 1794 1796 1798 1800 -1799 0
c Encoding variable: aux439 with domain: int(0..16) (representing constraint (shift(x_00002_00001, -1) + shift(x_00003_00002, -1)))
c Both direct and order encoding.
c Var 'aux439' order represents '0' with '1801'
c Var 'aux439' direct represents '0' with '1801'
c Var 'aux439' order represents '1' with '1802'
-1801 1802 0
c Var 'aux439' direct represents '1' with '1803'
1801 -1802 1803 0
-1803 1802 0
-1803 -1801 0
c Var 'aux439' order represents '2' with '1804'
-1802 1804 0
c Var 'aux439' direct represents '2' with '1805'
1802 -1804 1805 0
-1805 1804 0
-1805 -1802 0
c Var 'aux439' order represents '3' with '1806'
-1804 1806 0
c Var 'aux439' direct represents '3' with '1807'
1804 -1806 1807 0
-1807 1806 0
-1807 -1804 0
c Var 'aux439' order represents '4' with '1808'
-1806 1808 0
c Var 'aux439' direct represents '4' with '1809'
1806 -1808 1809 0
-1809 1808 0
-1809 -1806 0
c Var 'aux439' order represents '5' with '1810'
-1808 1810 0
c Var 'aux439' direct represents '5' with '1811'
1808 -1810 1811 0
-1811 1810 0
-1811 -1808 0
c Var 'aux439' order represents '6' with '1812'
-1810 1812 0
c Var 'aux439' direct represents '6' with '1813'
1810 -1812 1813 0
-1813 1812 0
-1813 -1810 0
c Var 'aux439' order represents '7' with '1814'
-1812 1814 0
c Var 'aux439' direct represents '7' with '1815'
1812 -1814 1815 0
-1815 1814 0
-1815 -1812 0
c Var 'aux439' order represents '8' with '1816'
-1814 1816 0
c Var 'aux439' direct represents '8' with '1817'
1814 -1816 1817 0
-1817 1816 0
-1817 -1814 0
c Var 'aux439' order represents '9' with '1818'
-1816 1818 0
c Var 'aux439' direct represents '9' with '1819'
1816 -1818 1819 0
-1819 1818 0
-1819 -1816 0
c Var 'aux439' order represents '10' with '1820'
-1818 1820 0
c Var 'aux439' direct represents '10' with '1821'
1818 -1820 1821 0
-1821 1820 0
-1821 -1818 0
c Var 'aux439' order represents '11' with '1822'
-1820 1822 0
c Var 'aux439' direct represents '11' with '1823'
1820 -1822 1823 0
-1823 1822 0
-1823 -1820 0
c Var 'aux439' order represents '12' with '1824'
-1822 1824 0
c Var 'aux439' direct represents '12' with '1825'
1822 -1824 1825 0
-1825 1824 0
-1825 -1822 0
c Var 'aux439' order represents '13' with '1826'
-1824 1826 0
c Var 'aux439' direct represents '13' with '1827'
1824 -1826 1827 0
-1827 1826 0
-1827 -1824 0
c Var 'aux439' order represents '14' with '1828'
-1826 1828 0
c Var 'aux439' direct represents '14' with '1829'
1826 -1828 1829 0
-1829 1828 0
-1829 -1826 0
c Var 'aux439' order represents '15' with '1830'
-1828 1830 0
c Var 'aux439' direct represents '15' with '1831'
1828 -1830 1831 0
-1831 1830 0
-1831 -1828 0
c Var 'aux439' direct represents '16' with '-1830'
1801 1803 1805 1807 1809 1811 1813 1815 1817 1819 1821 1823 1825 1827 1829 1831 -1830 0
c Encoding variable: aux440 with domain: int(0..16) (representing constraint (shift(x_00007_00001, -1) + shift(x_00006_00001, -1)))
c Both direct and order encoding.
c Var 'aux440' order represents '0' with '1832'
c Var 'aux440' direct represents '0' with '1832'
c Var 'aux440' order represents '1' with '1833'
-1832 1833 0
c Var 'aux440' direct represents '1' with '1834'
1832 -1833 1834 0
-1834 1833 0
-1834 -1832 0
c Var 'aux440' order represents '2' with '1835'
-1833 1835 0
c Var 'aux440' direct represents '2' with '1836'
1833 -1835 1836 0
-1836 1835 0
-1836 -1833 0
c Var 'aux440' order represents '3' with '1837'
-1835 1837 0
c Var 'aux440' direct represents '3' with '1838'
1835 -1837 1838 0
-1838 1837 0
-1838 -1835 0
c Var 'aux440' order represents '4' with '1839'
-1837 1839 0
c Var 'aux440' direct represents '4' with '1840'
1837 -1839 1840 0
-1840 1839 0
-1840 -1837 0
c Var 'aux440' order represents '5' with '1841'
-1839 1841 0
c Var 'aux440' direct represents '5' with '1842'
1839 -1841 1842 0
-1842 1841 0
-1842 -1839 0
c Var 'aux440' order represents '6' with '1843'
-1841 1843 0
c Var 'aux440' direct represents '6' with '1844'
1841 -1843 1844 0
-1844 1843 0
-1844 -1841 0
c Var 'aux440' order represents '7' with '1845'
-1843 1845 0
c Var 'aux440' direct represents '7' with '1846'
1843 -1845 1846 0
-1846 1845 0
-1846 -1843 0
c Var 'aux440' order represents '8' with '1847'
-1845 1847 0
c Var 'aux440' direct represents '8' with '1848'
1845 -1847 1848 0
-1848 1847 0
-1848 -1845 0
c Var 'aux440' order represents '9' with '1849'
-1847 1849 0
c Var 'aux440' direct represents '9' with '1850'
1847 -1849 1850 0
-1850 1849 0
-1850 -1847 0
c Var 'aux440' order represents '10' with '1851'
-1849 1851 0
c Var 'aux440' direct represents '10' with '1852'
1849 -1851 1852 0
-1852 1851 0
-1852 -1849 0
c Var 'aux440' order represents '11' with '1853'
-1851 1853 0
c Var 'aux440' direct represents '11' with '1854'
1851 -1853 1854 0
-1854 1853 0
-1854 -1851 0
c Var 'aux440' order represents '12' with '1855'
-1853 1855 0
c Var 'aux440' direct represents '12' with '1856'
1853 -1855 1856 0
-1856 1855 0
-1856 -1853 0
c Var 'aux440' order represents '13' with '1857'
-1855 1857 0
c Var 'aux440' direct represents '13' with '1858'
1855 -1857 1858 0
-1858 1857 0
-1858 -1855 0
c Var 'aux440' order represents '14' with '1859'
-1857 1859 0
c Var 'aux440' direct represents '14' with '1860'
1857 -1859 1860 0
-1860 1859 0
-1860 -1857 0
c Var 'aux440' order represents '15' with '1861'
-1859 1861 0
c Var 'aux440' direct represents '15' with '1862'
1859 -1861 1862 0
-1862 1861 0
-1862 -1859 0
c Var 'aux440' direct represents '16' with '-1861'
1832 1834 1836 1838 1840 1842 1844 1846 1848 1850 1852 1854 1856 1858 1860 1862 -1861 0
c Encoding variable: aux441 with domain: int(0..16) (representing constraint (shift(x_00007_00005, -1) + shift(x_00009_00004, -1)))
c Both direct and order encoding.
c Var 'aux441' order represents '0' with '1863'
c Var 'aux441' direct represents '0' with '1863'
c Var 'aux441' order represents '1' with '1864'
-1863 1864 0
c Var 'aux441' direct represents '1' with '1865'
1863 -1864 1865 0
-1865 1864 0
-1865 -1863 0
c Var 'aux441' order represents '2' with '1866'
-1864 1866 0
c Var 'aux441' direct represents '2' with '1867'
1864 -1866 1867 0
-1867 1866 0
-1867 -1864 0
c Var 'aux441' order represents '3' with '1868'
-1866 1868 0
c Var 'aux441' direct represents '3' with '1869'
1866 -1868 1869 0
-1869 1868 0
-1869 -1866 0
c Var 'aux441' order represents '4' with '1870'
-1868 1870 0
c Var 'aux441' direct represents '4' with '1871'
1868 -1870 1871 0
-1871 1870 0
-1871 -1868 0
c Var 'aux441' order represents '5' with '1872'
-1870 1872 0
c Var 'aux441' direct represents '5' with '1873'
1870 -1872 1873 0
-1873 1872 0
-1873 -1870 0
c Var 'aux441' order represents '6' with '1874'
-1872 1874 0
c Var 'aux441' direct represents '6' with '1875'
1872 -1874 1875 0
-1875 1874 0
-1875 -1872 0
c Var 'aux441' order represents '7' with '1876'
-1874 1876 0
c Var 'aux441' direct represents '7' with '1877'
1874 -1876 1877 0
-1877 1876 0
-1877 -1874 0
c Var 'aux441' order represents '8' with '1878'
-1876 1878 0
c Var 'aux441' direct represents '8' with '1879'
1876 -1878 1879 0
-1879 1878 0
-1879 -1876 0
c Var 'aux441' order represents '9' with '1880'
-1878 1880 0
c Var 'aux441' direct represents '9' with '1881'
1878 -1880 1881 0
-1881 1880 0
-1881 -1878 0
c Var 'aux441' order represents '10' with '1882'
-1880 1882 0
c Var 'aux441' direct represents '10' with '1883'
1880 -1882 1883 0
-1883 1882 0
-1883 -1880 0
c Var 'aux441' order represents '11' with '1884'
-1882 1884 0
c Var 'aux441' direct represents '11' with '1885'
1882 -1884 1885 0
-1885 1884 0
-1885 -1882 0
c Var 'aux441' order represents '12' with '1886'
-1884 1886 0
c Var 'aux441' direct represents '12' with '1887'
1884 -1886 1887 0
-1887 1886 0
-1887 -1884 0
c Var 'aux441' order represents '13' with '1888'
-1886 1888 0
c Var 'aux441' direct represents '13' with '1889'
1886 -1888 1889 0
-1889 1888 0
-1889 -1886 0
c Var 'aux441' order represents '14' with '1890'
-1888 1890 0
c Var 'aux441' direct represents '14' with '1891'
1888 -1890 1891 0
-1891 1890 0
-1891 -1888 0
c Var 'aux441' order represents '15' with '1892'
-1890 1892 0
c Var 'aux441' direct represents '15' with '1893'
1890 -1892 1893 0
-1893 1892 0
-1893 -1890 0
c Var 'aux441' direct represents '16' with '-1892'
1863 1865 1867 1869 1871 1873 1875 1877 1879 1881 1883 1885 1887 1889 1891 1893 -1892 0
c Encoding variable: aux442 with domain: int(0..16) (representing constraint (shift(x_00007_00008, -1) + shift(x_00008_00009, -1)))
c Both direct and order encoding.
c Var 'aux442' order represents '0' with '1894'
c Var 'aux442' direct represents '0' with '1894'
c Var 'aux442' order represents '1' with '1895'
-1894 1895 0
c Var 'aux442' direct represents '1' with '1896'
1894 -1895 1896 0
-1896 1895 0
-1896 -1894 0
c Var 'aux442' order represents '2' with '1897'
-1895 1897 0
c Var 'aux442' direct represents '2' with '1898'
1895 -1897 1898 0
-1898 1897 0
-1898 -1895 0
c Var 'aux442' order represents '3' with '1899'
-1897 1899 0
c Var 'aux442' direct represents '3' with '1900'
1897 -1899 1900 0
-1900 1899 0
-1900 -1897 0
c Var 'aux442' order represents '4' with '1901'
-1899 1901 0
c Var 'aux442' direct represents '4' with '1902'
1899 -1901 1902 0
-1902 1901 0
-1902 -1899 0
c Var 'aux442' order represents '5' with '1903'
-1901 1903 0
c Var 'aux442' direct represents '5' with '1904'
1901 -1903 1904 0
-1904 1903 0
-1904 -1901 0
c Var 'aux442' order represents '6' with '1905'
-1903 1905 0
c Var 'aux442' direct represents '6' with '1906'
1903 -1905 1906 0
-1906 1905 0
-1906 -1903 0
c Var 'aux442' order represents '7' with '1907'
-1905 1907 0
c Var 'aux442' direct represents '7' with '1908'
1905 -1907 1908 0
-1908 1907 0
-1908 -1905 0
c Var 'aux442' order represents '8' with '1909'
-1907 1909 0
c Var 'aux442' direct represents '8' with '1910'
1907 -1909 1910 0
-1910 1909 0
-1910 -1907 0
c Var 'aux442' order represents '9' with '1911'
-1909 1911 0
c Var 'aux442' direct represents '9' with '1912'
1909 -1911 1912 0
-1912 1911 0
-1912 -1909 0
c Var 'aux442' order represents '10' with '1913'
-1911 1913 0
c Var 'aux442' direct represents '10' with '1914'
1911 -1913 1914 0
-1914 1913 0
-1914 -1911 0
c Var 'aux442' order represents '11' with '1915'
-1913 1915 0
c Var 'aux442' direct represents '11' with '1916'
1913 -1915 1916 0
-1916 1915 0
-1916 -1913 0
c Var 'aux442' order represents '12' with '1917'
-1915 1917 0
c Var 'aux442' direct represents '12' with '1918'
1915 -1917 1918 0
-1918 1917 0
-1918 -1915 0
c Var 'aux442' order represents '13' with '1919'
-1917 1919 0
c Var 'aux442' direct represents '13' with '1920'
1917 -1919 1920 0
-1920 1919 0
-1920 -1917 0
c Var 'aux442' order represents '14' with '1921'
-1919 1921 0
c Var 'aux442' direct represents '14' with '1922'
1919 -1921 1922 0
-1922 1921 0
-1922 -1919 0
c Var 'aux442' order represents '15' with '1923'
-1921 1923 0
c Var 'aux442' direct represents '15' with '1924'
1921 -1923 1924 0
-1924 1923 0
-1924 -1921 0
c Var 'aux442' direct represents '16' with '-1923'
1894 1896 1898 1900 1902 1904 1906 1908 1910 1912 1914 1916 1918 1920 1922 1924 -1923 0
c Encoding variable: aux443 with domain: int(0..2) (representing constraint ((x_00003_00001=1) + (x_00005_00001=1)))
c Both direct and order encoding.
c Var 'aux443' order represents '0' with '1925'
c Var 'aux443' direct represents '0' with '1925'
c Var 'aux443' order represents '1' with '1926'
-1925 1926 0
c Var 'aux443' direct represents '1' with '1927'
1925 -1926 1927 0
-1927 1926 0
-1927 -1925 0
c Var 'aux443' direct represents '2' with '-1926'
1925 1927 -1926 0
c Encoding variable: aux444 with domain: int(0..2) (representing constraint ((x_00007_00001=1) + (x_00008_00001=1)))
c Both direct and order encoding.
c Var 'aux444' order represents '0' with '1928'
c Var 'aux444' direct represents '0' with '1928'
c Var 'aux444' order represents '1' with '1929'
-1928 1929 0
c Var 'aux444' direct represents '1' with '1930'
1928 -1929 1930 0
-1930 1929 0
-1930 -1928 0
c Var 'aux444' direct represents '2' with '-1929'
1928 1930 -1929 0
c Encoding variable: aux445 with domain: int(0..2) (representing constraint ((x_00002_00001=1) + (x_00006_00001=1)))
c Both direct and order encoding.
c Var 'aux445' order represents '0' with '1931'
c Var 'aux445' direct represents '0' with '1931'
c Var 'aux445' order represents '1' with '1932'
-1931 1932 0
c Var 'aux445' direct represents '1' with '1933'
1931 -1932 1933 0
-1933 1932 0
-1933 -1931 0
c Var 'aux445' direct represents '2' with '-1932'
1931 1933 -1932 0
c Encoding variable: aux446 with domain: int(0..2) (representing constraint ((x_00009_00001=1) + (x_00004_00001=1)))
c Both direct and order encoding.
c Var 'aux446' order represents '0' with '1934'
c Var 'aux446' direct represents '0' with '1934'
c Var 'aux446' order represents '1' with '1935'
-1934 1935 0
c Var 'aux446' direct represents '1' with '1936'
1934 -1935 1936 0
-1936 1935 0
-1936 -1934 0
c Var 'aux446' direct represents '2' with '-1935'
1934 1936 -1935 0
c Encoding variable: aux447 with domain: int(0..3) (representing constraint ((x_00001_00001=1) + aux446))
c Both direct and order encoding.
c Var 'aux447' order represents '0' with '1937'
c Var 'aux447' direct represents '0' with '1937'
c Var 'aux447' order represents '1' with '1938'
-1937 1938 0
c Var 'aux447' direct represents '1' with '1939'
1937 -1938 1939 0
-1939 1938 0
-1939 -1937 0
c Var 'aux447' order represents '2' with '1940'
-1938 1940 0
c Var 'aux447' direct represents '2' with '1941'
1938 -1940 1941 0
-1941 1940 0
-1941 -1938 0
c Var 'aux447' direct represents '3' with '-1940'
1937 1939 1941 -1940 0
c Encoding variable: aux448 with domain: int(0..4) (representing constraint (aux443 + aux445))
c Both direct and order encoding.
c Var 'aux448' order represents '0' with '1942'
c Var 'aux448' direct represents '0' with '1942'
c Var 'aux448' order represents '1' with '1943'
-1942 1943 0
c Var 'aux448' direct represents '1' with '1944'
1942 -1943 1944 0
-1944 1943 0
-1944 -1942 0
c Var 'aux448' order represents '2' with '1945'
-1943 1945 0
c Var 'aux448' direct represents '2' with '1946'
1943 -1945 1946 0
-1946 1945 0
-1946 -1943 0
c Var 'aux448' order represents '3' with '1947'
-1945 1947 0
c Var 'aux448' direct represents '3' with '1948'
1945 -1947 1948 0
-1948 1947 0
-1948 -1945 0
c Var 'aux448' direct represents '4' with '-1947'
1942 1944 1946 1948 -1947 0
c Encoding variable: aux449 with domain: int(0..2) (representing constraint ((x_00003_00001=2) + (x_00005_00001=2)))
c Both direct and order encoding.
c Var 'aux449' order represents '0' with '1949'
c Var 'aux449' direct represents '0' with '1949'
c Var 'aux449' order represents '1' with '1950'
-1949 1950 0
c Var 'aux449' direct represents '1' with '1951'
1949 -1950 1951 0
-1951 1950 0
-1951 -1949 0
c Var 'aux449' direct represents '2' with '-1950'
1949 1951 -1950 0
c Encoding variable: aux450 with domain: int(0..2) (representing constraint ((x_00007_00001=2) + (x_00008_00001=2)))
c Both direct and order encoding.
c Var 'aux450' order represents '0' with '1952'
c Var 'aux450' direct represents '0' with '1952'
c Var 'aux450' order represents '1' with '1953'
-1952 1953 0
c Var 'aux450' direct represents '1' with '1954'
1952 -1953 1954 0
-1954 1953 0
-1954 -1952 0
c Var 'aux450' direct represents '2' with '-1953'
1952 1954 -1953 0
c Encoding variable: aux451 with domain: int(0..2) (representing constraint ((x_00002_00001=2) + (x_00006_00001=2)))
c Both direct and order encoding.
c Var 'aux451' order represents '0' with '1955'
c Var 'aux451' direct represents '0' with '1955'
c Var 'aux451' order represents '1' with '1956'
-1955 1956 0
c Var 'aux451' direct represents '1' with '1957'
1955 -1956 1957 0
-1957 1956 0
-1957 -1955 0
c Var 'aux451' direct represents '2' with '-1956'
1955 1957 -1956 0
c Encoding variable: aux452 with domain: int(0..2) (representing constraint ((x_00009_00001=2) + (x_00004_00001=2)))
c Both direct and order encoding.
c Var 'aux452' order represents '0' with '1958'
c Var 'aux452' direct represents '0' with '1958'
c Var 'aux452' order represents '1' with '1959'
-1958 1959 0
c Var 'aux452' direct represents '1' with '1960'
1958 -1959 1960 0
-1960 1959 0
-1960 -1958 0
c Var 'aux452' direct represents '2' with '-1959'
1958 1960 -1959 0
c Encoding variable: aux453 with domain: int(0..3) (representing constraint ((x_00001_00001=2) + aux452))
c Both direct and order encoding.
c Var 'aux453' order represents '0' with '1961'
c Var 'aux453' direct represents '0' with '1961'
c Var 'aux453' order represents '1' with '1962'
-1961 1962 0
c Var 'aux453' direct represents '1' with '1963'
1961 -1962 1963 0
-1963 1962 0
-1963 -1961 0
c Var 'aux453' order represents '2' with '1964'
-1962 1964 0
c Var 'aux453' direct represents '2' with '1965'
1962 -1964 1965 0
-1965 1964 0
-1965 -1962 0
c Var 'aux453' direct represents '3' with '-1964'
1961 1963 1965 -1964 0
c Encoding variable: aux454 with domain: int(0..4) (representing constraint (aux449 + aux451))
c Both direct and order encoding.
c Var 'aux454' order represents '0' with '1966'
c Var 'aux454' direct represents '0' with '1966'
c Var 'aux454' order represents '1' with '1967'
-1966 1967 0
c Var 'aux454' direct represents '1' with '1968'
1966 -1967 1968 0
-1968 1967 0
-1968 -1966 0
c Var 'aux454' order represents '2' with '1969'
-1967 1969 0
c Var 'aux454' direct represents '2' with '1970'
1967 -1969 1970 0
-1970 1969 0
-1970 -1967 0
c Var 'aux454' order represents '3' with '1971'
-1969 1971 0
c Var 'aux454' direct represents '3' with '1972'
1969 -1971 1972 0
-1972 1971 0
-1972 -1969 0
c Var 'aux454' direct represents '4' with '-1971'
1966 1968 1970 1972 -1971 0
c Encoding variable: aux455 with domain: int(0..2) (representing constraint ((x_00003_00001=3) + (x_00005_00001=3)))
c Both direct and order encoding.
c Var 'aux455' order represents '0' with '1973'
c Var 'aux455' direct represents '0' with '1973'
c Var 'aux455' order represents '1' with '1974'
-1973 1974 0
c Var 'aux455' direct represents '1' with '1975'
1973 -1974 1975 0
-1975 1974 0
-1975 -1973 0
c Var 'aux455' direct represents '2' with '-1974'
1973 1975 -1974 0
c Encoding variable: aux456 with domain: int(0..2) (representing constraint ((x_00007_00001=3) + (x_00008_00001=3)))
c Both direct and order encoding.
c Var 'aux456' order represents '0' with '1976'
c Var 'aux456' direct represents '0' with '1976'
c Var 'aux456' order represents '1' with '1977'
-1976 1977 0
c Var 'aux456' direct represents '1' with '1978'
1976 -1977 1978 0
-1978 1977 0
-1978 -1976 0
c Var 'aux456' direct represents '2' with '-1977'
1976 1978 -1977 0
c Encoding variable: aux457 with domain: int(0..2) (representing constraint ((x_00002_00001=3) + (x_00006_00001=3)))
c Both direct and order encoding.
c Var 'aux457' order represents '0' with '1979'
c Var 'aux457' direct represents '0' with '1979'
c Var 'aux457' order represents '1' with '1980'
-1979 1980 0
c Var 'aux457' direct represents '1' with '1981'
1979 -1980 1981 0
-1981 1980 0
-1981 -1979 0
c Var 'aux457' direct represents '2' with '-1980'
1979 1981 -1980 0
c Encoding variable: aux458 with domain: int(0..2) (representing constraint ((x_00009_00001=3) + (x_00004_00001=3)))
c Both direct and order encoding.
c Var 'aux458' order represents '0' with '1982'
c Var 'aux458' direct represents '0' with '1982'
c Var 'aux458' order represents '1' with '1983'
-1982 1983 0
c Var 'aux458' direct represents '1' with '1984'
1982 -1983 1984 0
-1984 1983 0
-1984 -1982 0
c Var 'aux458' direct represents '2' with '-1983'
1982 1984 -1983 0
c Encoding variable: aux459 with domain: int(0..3) (representing constraint ((x_00001_00001=3) + aux458))
c Both direct and order encoding.
c Var 'aux459' order represents '0' with '1985'
c Var 'aux459' direct represents '0' with '1985'
c Var 'aux459' order represents '1' with '1986'
-1985 1986 0
c Var 'aux459' direct represents '1' with '1987'
1985 -1986 1987 0
-1987 1986 0
-1987 -1985 0
c Var 'aux459' order represents '2' with '1988'
-1986 1988 0
c Var 'aux459' direct represents '2' with '1989'
1986 -1988 1989 0
-1989 1988 0
-1989 -1986 0
c Var 'aux459' direct represents '3' with '-1988'
1985 1987 1989 -1988 0
c Encoding variable: aux460 with domain: int(0..4) (representing constraint (aux455 + aux457))
c Both direct and order encoding.
c Var 'aux460' order represents '0' with '1990'
c Var 'aux460' direct represents '0' with '1990'
c Var 'aux460' order represents '1' with '1991'
-1990 1991 0
c Var 'aux460' direct represents '1' with '1992'
1990 -1991 1992 0
-1992 1991 0
-1992 -1990 0
c Var 'aux460' order represents '2' with '1993'
-1991 1993 0
c Var 'aux460' direct represents '2' with '1994'
1991 -1993 1994 0
-1994 1993 0
-1994 -1991 0
c Var 'aux460' order represents '3' with '1995'
-1993 1995 0
c Var 'aux460' direct represents '3' with '1996'
1993 -1995 1996 0
-1996 1995 0
-1996 -1993 0
c Var 'aux460' direct represents '4' with '-1995'
1990 1992 1994 1996 -1995 0
c Encoding variable: aux461 with domain: int(0..2) (representing constraint ((x_00003_00001=4) + (x_00005_00001=4)))
c Both direct and order encoding.
c Var 'aux461' order represents '0' with '1997'
c Var 'aux461' direct represents '0' with '1997'
c Var 'aux461' order represents '1' with '1998'
-1997 1998 0
c Var 'aux461' direct represents '1' with '1999'
1997 -1998 1999 0
-1999 1998 0
-1999 -1997 0
c Var 'aux461' direct represents '2' with '-1998'
1997 1999 -1998 0
c Encoding variable: aux462 with domain: int(0..2) (representing constraint ((x_00007_00001=4) + (x_00008_00001=4)))
c Both direct and order encoding.
c Var 'aux462' order represents '0' with '2000'
c Var 'aux462' direct represents '0' with '2000'
c Var 'aux462' order represents '1' with '2001'
-2000 2001 0
c Var 'aux462' direct represents '1' with '2002'
2000 -2001 2002 0
-2002 2001 0
-2002 -2000 0
c Var 'aux462' direct represents '2' with '-2001'
2000 2002 -2001 0
c Encoding variable: aux463 with domain: int(0..2) (representing constraint ((x_00002_00001=4) + (x_00006_00001=4)))
c Both direct and order encoding.
c Var 'aux463' order represents '0' with '2003'
c Var 'aux463' direct represents '0' with '2003'
c Var 'aux463' order represents '1' with '2004'
-2003 2004 0
c Var 'aux463' direct represents '1' with '2005'
2003 -2004 2005 0
-2005 2004 0
-2005 -2003 0
c Var 'aux463' direct represents '2' with '-2004'
2003 2005 -2004 0
c Encoding variable: aux464 with domain: int(0..2) (representing constraint ((x_00009_00001=4) + (x_00004_00001=4)))
c Both direct and order encoding.
c Var 'aux464' order represents '0' with '2006'
c Var 'aux464' direct represents '0' with '2006'
c Var 'aux464' order represents '1' with '2007'
-2006 2007 0
c Var 'aux464' direct represents '1' with '2008'
2006 -2007 2008 0
-2008 2007 0
-2008 -2006 0
c Var 'aux464' direct represents '2' with '-2007'
2006 2008 -2007 0
c Encoding variable: aux465 with domain: int(0..3) (representing constraint ((x_00001_00001=4) + aux464))
c Both direct and order encoding.
c Var 'aux465' order represents '0' with '2009'
c Var 'aux465' direct represents '0' with '2009'
c Var 'aux465' order represents '1' with '2010'
-2009 2010 0
c Var 'aux465' direct represents '1' with '2011'
2009 -2010 2011 0
-2011 2010 0
-2011 -2009 0
c Var 'aux465' order represents '2' with '2012'
-2010 2012 0
c Var 'aux465' direct represents '2' with '2013'
2010 -2012 2013 0
-2013 2012 0
-2013 -2010 0
c Var 'aux465' direct represents '3' with '-2012'
2009 2011 2013 -2012 0
c Encoding variable: aux466 with domain: int(0..4) (representing constraint (aux461 + aux463))
c Both direct and order encoding.
c Var 'aux466' order represents '0' with '2014'
c Var 'aux466' direct represents '0' with '2014'
c Var 'aux466' order represents '1' with '2015'
-2014 2015 0
c Var 'aux466' direct represents '1' with '2016'
2014 -2015 2016 0
-2016 2015 0
-2016 -2014 0
c Var 'aux466' order represents '2' with '2017'
-2015 2017 0
c Var 'aux466' direct represents '2' with '2018'
2015 -2017 2018 0
-2018 2017 0
-2018 -2015 0
c Var 'aux466' order represents '3' with '2019'
-2017 2019 0
c Var 'aux466' direct represents '3' with '2020'
2017 -2019 2020 0
-2020 2019 0
-2020 -2017 0
c Var 'aux466' direct represents '4' with '-2019'
2014 2016 2018 2020 -2019 0
c Encoding variable: aux467 with domain: int(0..2) (representing constraint ((x_00003_00001=5) + (x_00005_00001=5)))
c Both direct and order encoding.
c Var 'aux467' order represents '0' with '2021'
c Var 'aux467' direct represents '0' with '2021'
c Var 'aux467' order represents '1' with '2022'
-2021 2022 0
c Var 'aux467' direct represents '1' with '2023'
2021 -2022 2023 0
-2023 2022 0
-2023 -2021 0
c Var 'aux467' direct represents '2' with '-2022'
2021 2023 -2022 0
c Encoding variable: aux468 with domain: int(0..2) (representing constraint ((x_00007_00001=5) + (x_00008_00001=5)))
c Both direct and order encoding.
c Var 'aux468' order represents '0' with '2024'
c Var 'aux468' direct represents '0' with '2024'
c Var 'aux468' order represents '1' with '2025'
-2024 2025 0
c Var 'aux468' direct represents '1' with '2026'
2024 -2025 2026 0
-2026 2025 0
-2026 -2024 0
c Var 'aux468' direct represents '2' with '-2025'
2024 2026 -2025 0
c Encoding variable: aux469 with domain: int(0..2) (representing constraint ((x_00002_00001=5) + (x_00006_00001=5)))
c Both direct and order encoding.
c Var 'aux469' order represents '0' with '2027'
c Var 'aux469' direct represents '0' with '2027'
c Var 'aux469' order represents '1' with '2028'
-2027 2028 0
c Var 'aux469' direct represents '1' with '2029'
2027 -2028 2029 0
-2029 2028 0
-2029 -2027 0
c Var 'aux469' direct represents '2' with '-2028'
2027 2029 -2028 0
c Encoding variable: aux470 with domain: int(0..2) (representing constraint ((x_00009_00001=5) + (x_00004_00001=5)))
c Both direct and order encoding.
c Var 'aux470' order represents '0' with '2030'
c Var 'aux470' direct represents '0' with '2030'
c Var 'aux470' order represents '1' with '2031'
-2030 2031 0
c Var 'aux470' direct represents '1' with '2032'
2030 -2031 2032 0
-2032 2031 0
-2032 -2030 0
c Var 'aux470' direct represents '2' with '-2031'
2030 2032 -2031 0
c Encoding variable: aux471 with domain: int(0..3) (representing constraint ((x_00001_00001=5) + aux470))
c Both direct and order encoding.
c Var 'aux471' order represents '0' with '2033'
c Var 'aux471' direct represents '0' with '2033'
c Var 'aux471' order represents '1' with '2034'
-2033 2034 0
c Var 'aux471' direct represents '1' with '2035'
2033 -2034 2035 0
-2035 2034 0
-2035 -2033 0
c Var 'aux471' order represents '2' with '2036'
-2034 2036 0
c Var 'aux471' direct represents '2' with '2037'
2034 -2036 2037 0
-2037 2036 0
-2037 -2034 0
c Var 'aux471' direct represents '3' with '-2036'
2033 2035 2037 -2036 0
c Encoding variable: aux472 with domain: int(0..4) (representing constraint (aux467 + aux469))
c Both direct and order encoding.
c Var 'aux472' order represents '0' with '2038'
c Var 'aux472' direct represents '0' with '2038'
c Var 'aux472' order represents '1' with '2039'
-2038 2039 0
c Var 'aux472' direct represents '1' with '2040'
2038 -2039 2040 0
-2040 2039 0
-2040 -2038 0
c Var 'aux472' order represents '2' with '2041'
-2039 2041 0
c Var 'aux472' direct represents '2' with '2042'
2039 -2041 2042 0
-2042 2041 0
-2042 -2039 0
c Var 'aux472' order represents '3' with '2043'
-2041 2043 0
c Var 'aux472' direct represents '3' with '2044'
2041 -2043 2044 0
-2044 2043 0
-2044 -2041 0
c Var 'aux472' direct represents '4' with '-2043'
2038 2040 2042 2044 -2043 0
c Encoding variable: aux473 with domain: int(0..2) (representing constraint ((x_00003_00001=6) + (x_00005_00001=6)))
c Both direct and order encoding.
c Var 'aux473' order represents '0' with '2045'
c Var 'aux473' direct represents '0' with '2045'
c Var 'aux473' order represents '1' with '2046'
-2045 2046 0
c Var 'aux473' direct represents '1' with '2047'
2045 -2046 2047 0
-2047 2046 0
-2047 -2045 0
c Var 'aux473' direct represents '2' with '-2046'
2045 2047 -2046 0
c Encoding variable: aux474 with domain: int(0..2) (representing constraint ((x_00007_00001=6) + (x_00008_00001=6)))
c Both direct and order encoding.
c Var 'aux474' order represents '0' with '2048'
c Var 'aux474' direct represents '0' with '2048'
c Var 'aux474' order represents '1' with '2049'
-2048 2049 0
c Var 'aux474' direct represents '1' with '2050'
2048 -2049 2050 0
-2050 2049 0
-2050 -2048 0
c Var 'aux474' direct represents '2' with '-2049'
2048 2050 -2049 0
c Encoding variable: aux475 with domain: int(0..2) (representing constraint ((x_00002_00001=6) + (x_00006_00001=6)))
c Both direct and order encoding.
c Var 'aux475' order represents '0' with '2051'
c Var 'aux475' direct represents '0' with '2051'
c Var 'aux475' order represents '1' with '2052'
-2051 2052 0
c Var 'aux475' direct represents '1' with '2053'
2051 -2052 2053 0
-2053 2052 0
-2053 -2051 0
c Var 'aux475' direct represents '2' with '-2052'
2051 2053 -2052 0
c Encoding variable: aux476 with domain: int(0..2) (representing constraint ((x_00009_00001=6) + (x_00004_00001=6)))
c Both direct and order encoding.
c Var 'aux476' order represents '0' with '2054'
c Var 'aux476' direct represents '0' with '2054'
c Var 'aux476' order represents '1' with '2055'
-2054 2055 0
c Var 'aux476' direct represents '1' with '2056'
2054 -2055 2056 0
-2056 2055 0
-2056 -2054 0
c Var 'aux476' direct represents '2' with '-2055'
2054 2056 -2055 0
c Encoding variable: aux477 with domain: int(0..3) (representing constraint ((x_00001_00001=6) + aux476))
c Both direct and order encoding.
c Var 'aux477' order represents '0' with '2057'
c Var 'aux477' direct represents '0' with '2057'
c Var 'aux477' order represents '1' with '2058'
-2057 2058 0
c Var 'aux477' direct represents '1' with '2059'
2057 -2058 2059 0
-2059 2058 0
-2059 -2057 0
c Var 'aux477' order represents '2' with '2060'
-2058 2060 0
c Var 'aux477' direct represents '2' with '2061'
2058 -2060 2061 0
-2061 2060 0
-2061 -2058 0
c Var 'aux477' direct represents '3' with '-2060'
2057 2059 2061 -2060 0
c Encoding variable: aux478 with domain: int(0..4) (representing constraint (aux473 + aux475))
c Both direct and order encoding.
c Var 'aux478' order represents '0' with '2062'
c Var 'aux478' direct represents '0' with '2062'
c Var 'aux478' order represents '1' with '2063'
-2062 2063 0
c Var 'aux478' direct represents '1' with '2064'
2062 -2063 2064 0
-2064 2063 0
-2064 -2062 0
c Var 'aux478' order represents '2' with '2065'
-2063 2065 0
c Var 'aux478' direct represents '2' with '2066'
2063 -2065 2066 0
-2066 2065 0
-2066 -2063 0
c Var 'aux478' order represents '3' with '2067'
-2065 2067 0
c Var 'aux478' direct represents '3' with '2068'
2065 -2067 2068 0
-2068 2067 0
-2068 -2065 0
c Var 'aux478' direct represents '4' with '-2067'
2062 2064 2066 2068 -2067 0
c Encoding variable: aux479 with domain: int(0..2) (representing constraint ((x_00003_00001=7) + (x_00005_00001=7)))
c Both direct and order encoding.
c Var 'aux479' order represents '0' with '2069'
c Var 'aux479' direct represents '0' with '2069'
c Var 'aux479' order represents '1' with '2070'
-2069 2070 0
c Var 'aux479' direct represents '1' with '2071'
2069 -2070 2071 0
-2071 2070 0
-2071 -2069 0
c Var 'aux479' direct represents '2' with '-2070'
2069 2071 -2070 0
c Encoding variable: aux480 with domain: int(0..2) (representing constraint ((x_00007_00001=7) + (x_00008_00001=7)))
c Both direct and order encoding.
c Var 'aux480' order represents '0' with '2072'
c Var 'aux480' direct represents '0' with '2072'
c Var 'aux480' order represents '1' with '2073'
-2072 2073 0
c Var 'aux480' direct represents '1' with '2074'
2072 -2073 2074 0
-2074 2073 0
-2074 -2072 0
c Var 'aux480' direct represents '2' with '-2073'
2072 2074 -2073 0
c Encoding variable: aux481 with domain: int(0..2) (representing constraint ((x_00002_00001=7) + (x_00006_00001=7)))
c Both direct and order encoding.
c Var 'aux481' order represents '0' with '2075'
c Var 'aux481' direct represents '0' with '2075'
c Var 'aux481' order represents '1' with '2076'
-2075 2076 0
c Var 'aux481' direct represents '1' with '2077'
2075 -2076 2077 0
-2077 2076 0
-2077 -2075 0
c Var 'aux481' direct represents '2' with '-2076'
2075 2077 -2076 0
c Encoding variable: aux482 with domain: int(0..2) (representing constraint ((x_00009_00001=7) + (x_00004_00001=7)))
c Both direct and order encoding.
c Var 'aux482' order represents '0' with '2078'
c Var 'aux482' direct represents '0' with '2078'
c Var 'aux482' order represents '1' with '2079'
-2078 2079 0
c Var 'aux482' direct represents '1' with '2080'
2078 -2079 2080 0
-2080 2079 0
-2080 -2078 0
c Var 'aux482' direct represents '2' with '-2079'
2078 2080 -2079 0
c Encoding variable: aux483 with domain: int(0..3) (representing constraint ((x_00001_00001=7) + aux482))
c Both direct and order encoding.
c Var 'aux483' order represents '0' with '2081'
c Var 'aux483' direct represents '0' with '2081'
c Var 'aux483' order represents '1' with '2082'
-2081 2082 0
c Var 'aux483' direct represents '1' with '2083'
2081 -2082 2083 0
-2083 2082 0
-2083 -2081 0
c Var 'aux483' order represents '2' with '2084'
-2082 2084 0
c Var 'aux483' direct represents '2' with '2085'
2082 -2084 2085 0
-2085 2084 0
-2085 -2082 0
c Var 'aux483' direct represents '3' with '-2084'
2081 2083 2085 -2084 0
c Encoding variable: aux484 with domain: int(0..4) (representing constraint (aux479 + aux481))
c Both direct and order encoding.
c Var 'aux484' order represents '0' with '2086'
c Var 'aux484' direct represents '0' with '2086'
c Var 'aux484' order represents '1' with '2087'
-2086 2087 0
c Var 'aux484' direct represents '1' with '2088'
2086 -2087 2088 0
-2088 2087 0
-2088 -2086 0
c Var 'aux484' order represents '2' with '2089'
-2087 2089 0
c Var 'aux484' direct represents '2' with '2090'
2087 -2089 2090 0
-2090 2089 0
-2090 -2087 0
c Var 'aux484' order represents '3' with '2091'
-2089 2091 0
c Var 'aux484' direct represents '3' with '2092'
2089 -2091 2092 0
-2092 2091 0
-2092 -2089 0
c Var 'aux484' direct represents '4' with '-2091'
2086 2088 2090 2092 -2091 0
c Encoding variable: aux485 with domain: int(0..2) (representing constraint ((x_00003_00001=8) + (x_00005_00001=8)))
c Both direct and order encoding.
c Var 'aux485' order represents '0' with '2093'
c Var 'aux485' direct represents '0' with '2093'
c Var 'aux485' order represents '1' with '2094'
-2093 2094 0
c Var 'aux485' direct represents '1' with '2095'
2093 -2094 2095 0
-2095 2094 0
-2095 -2093 0
c Var 'aux485' direct represents '2' with '-2094'
2093 2095 -2094 0
c Encoding variable: aux486 with domain: int(0..2) (representing constraint ((x_00007_00001=8) + (x_00008_00001=8)))
c Both direct and order encoding.
c Var 'aux486' order represents '0' with '2096'
c Var 'aux486' direct represents '0' with '2096'
c Var 'aux486' order represents '1' with '2097'
-2096 2097 0
c Var 'aux486' direct represents '1' with '2098'
2096 -2097 2098 0
-2098 2097 0
-2098 -2096 0
c Var 'aux486' direct represents '2' with '-2097'
2096 2098 -2097 0
c Encoding variable: aux487 with domain: int(0..2) (representing constraint ((x_00002_00001=8) + (x_00006_00001=8)))
c Both direct and order encoding.
c Var 'aux487' order represents '0' with '2099'
c Var 'aux487' direct represents '0' with '2099'
c Var 'aux487' order represents '1' with '2100'
-2099 2100 0
c Var 'aux487' direct represents '1' with '2101'
2099 -2100 2101 0
-2101 2100 0
-2101 -2099 0
c Var 'aux487' direct represents '2' with '-2100'
2099 2101 -2100 0
c Encoding variable: aux488 with domain: int(0..2) (representing constraint ((x_00009_00001=8) + (x_00004_00001=8)))
c Both direct and order encoding.
c Var 'aux488' order represents '0' with '2102'
c Var 'aux488' direct represents '0' with '2102'
c Var 'aux488' order represents '1' with '2103'
-2102 2103 0
c Var 'aux488' direct represents '1' with '2104'
2102 -2103 2104 0
-2104 2103 0
-2104 -2102 0
c Var 'aux488' direct represents '2' with '-2103'
2102 2104 -2103 0
c Encoding variable: aux489 with domain: int(0..3) (representing constraint ((x_00001_00001=8) + aux488))
c Both direct and order encoding.
c Var 'aux489' order represents '0' with '2105'
c Var 'aux489' direct represents '0' with '2105'
c Var 'aux489' order represents '1' with '2106'
-2105 2106 0
c Var 'aux489' direct represents '1' with '2107'
2105 -2106 2107 0
-2107 2106 0
-2107 -2105 0
c Var 'aux489' order represents '2' with '2108'
-2106 2108 0
c Var 'aux489' direct represents '2' with '2109'
2106 -2108 2109 0
-2109 2108 0
-2109 -2106 0
c Var 'aux489' direct represents '3' with '-2108'
2105 2107 2109 -2108 0
c Encoding variable: aux490 with domain: int(0..4) (representing constraint (aux485 + aux487))
c Both direct and order encoding.
c Var 'aux490' order represents '0' with '2110'
c Var 'aux490' direct represents '0' with '2110'
c Var 'aux490' order represents '1' with '2111'
-2110 2111 0
c Var 'aux490' direct represents '1' with '2112'
2110 -2111 2112 0
-2112 2111 0
-2112 -2110 0
c Var 'aux490' order represents '2' with '2113'
-2111 2113 0
c Var 'aux490' direct represents '2' with '2114'
2111 -2113 2114 0
-2114 2113 0
-2114 -2111 0
c Var 'aux490' order represents '3' with '2115'
-2113 2115 0
c Var 'aux490' direct represents '3' with '2116'
2113 -2115 2116 0
-2116 2115 0
-2116 -2113 0
c Var 'aux490' direct represents '4' with '-2115'
2110 2112 2114 2116 -2115 0
c Encoding variable: aux491 with domain: int(0..2) (representing constraint ((x_00003_00001=9) + (x_00005_00001=9)))
c Both direct and order encoding.
c Var 'aux491' order represents '0' with '2117'
c Var 'aux491' direct represents '0' with '2117'
c Var 'aux491' order represents '1' with '2118'
-2117 2118 0
c Var 'aux491' direct represents '1' with '2119'
2117 -2118 2119 0
-2119 2118 0
-2119 -2117 0
c Var 'aux491' direct represents '2' with '-2118'
2117 2119 -2118 0
c Encoding variable: aux492 with domain: int(0..2) (representing constraint ((x_00007_00001=9) + (x_00008_00001=9)))
c Both direct and order encoding.
c Var 'aux492' order represents '0' with '2120'
c Var 'aux492' direct represents '0' with '2120'
c Var 'aux492' order represents '1' with '2121'
-2120 2121 0
c Var 'aux492' direct represents '1' with '2122'
2120 -2121 2122 0
-2122 2121 0
-2122 -2120 0
c Var 'aux492' direct represents '2' with '-2121'
2120 2122 -2121 0
c Encoding variable: aux493 with domain: int(0..2) (representing constraint ((x_00002_00001=9) + (x_00006_00001=9)))
c Both direct and order encoding.
c Var 'aux493' order represents '0' with '2123'
c Var 'aux493' direct represents '0' with '2123'
c Var 'aux493' order represents '1' with '2124'
-2123 2124 0
c Var 'aux493' direct represents '1' with '2125'
2123 -2124 2125 0
-2125 2124 0
-2125 -2123 0
c Var 'aux493' direct represents '2' with '-2124'
2123 2125 -2124 0
c Encoding variable: aux494 with domain: int(0..2) (representing constraint ((x_00009_00001=9) + (x_00004_00001=9)))
c Both direct and order encoding.
c Var 'aux494' order represents '0' with '2126'
c Var 'aux494' direct represents '0' with '2126'
c Var 'aux494' order represents '1' with '2127'
-2126 2127 0
c Var 'aux494' direct represents '1' with '2128'
2126 -2127 2128 0
-2128 2127 0
-2128 -2126 0
c Var 'aux494' direct represents '2' with '-2127'
2126 2128 -2127 0
c Encoding variable: aux495 with domain: int(0..3) (representing constraint ((x_00001_00001=9) + aux494))
c Both direct and order encoding.
c Var 'aux495' order represents '0' with '2129'
c Var 'aux495' direct represents '0' with '2129'
c Var 'aux495' order represents '1' with '2130'
-2129 2130 0
c Var 'aux495' direct represents '1' with '2131'
2129 -2130 2131 0
-2131 2130 0
-2131 -2129 0
c Var 'aux495' order represents '2' with '2132'
-2130 2132 0
c Var 'aux495' direct represents '2' with '2133'
2130 -2132 2133 0
-2133 2132 0
-2133 -2130 0
c Var 'aux495' direct represents '3' with '-2132'
2129 2131 2133 -2132 0
c Encoding variable: aux496 with domain: int(0..4) (representing constraint (aux491 + aux493))
c Both direct and order encoding.
c Var 'aux496' order represents '0' with '2134'
c Var 'aux496' direct represents '0' with '2134'
c Var 'aux496' order represents '1' with '2135'
-2134 2135 0
c Var 'aux496' direct represents '1' with '2136'
2134 -2135 2136 0
-2136 2135 0
-2136 -2134 0
c Var 'aux496' order represents '2' with '2137'
-2135 2137 0
c Var 'aux496' direct represents '2' with '2138'
2135 -2137 2138 0
-2138 2137 0
-2138 -2135 0
c Var 'aux496' order represents '3' with '2139'
-2137 2139 0
c Var 'aux496' direct represents '3' with '2140'
2137 -2139 2140 0
-2140 2139 0
-2140 -2137 0
c Var 'aux496' direct represents '4' with '-2139'
2134 2136 2138 2140 -2139 0
c Encoding variable: aux497 with domain: int(0..2) (representing constraint ((x_00003_00002=1) + (x_00005_00002=1)))
c Both direct and order encoding.
c Var 'aux497' order represents '0' with '2141'
c Var 'aux497' direct represents '0' with '2141'
c Var 'aux497' order represents '1' with '2142'
-2141 2142 0
c Var 'aux497' direct represents '1' with '2143'
2141 -2142 2143 0
-2143 2142 0
-2143 -2141 0
c Var 'aux497' direct represents '2' with '-2142'
2141 2143 -2142 0
c Encoding variable: aux498 with domain: int(0..2) (representing constraint ((x_00007_00002=1) + (x_00008_00002=1)))
c Both direct and order encoding.
c Var 'aux498' order represents '0' with '2144'
c Var 'aux498' direct represents '0' with '2144'
c Var 'aux498' order represents '1' with '2145'
-2144 2145 0
c Var 'aux498' direct represents '1' with '2146'
2144 -2145 2146 0
-2146 2145 0
-2146 -2144 0
c Var 'aux498' direct represents '2' with '-2145'
2144 2146 -2145 0
c Encoding variable: aux499 with domain: int(0..2) (representing constraint ((x_00002_00002=1) + (x_00006_00002=1)))
c Both direct and order encoding.
c Var 'aux499' order represents '0' with '2147'
c Var 'aux499' direct represents '0' with '2147'
c Var 'aux499' order represents '1' with '2148'
-2147 2148 0
c Var 'aux499' direct represents '1' with '2149'
2147 -2148 2149 0
-2149 2148 0
-2149 -2147 0
c Var 'aux499' direct represents '2' with '-2148'
2147 2149 -2148 0
c Encoding variable: aux500 with domain: int(0..2) (representing constraint ((x_00009_00002=1) + (x_00004_00002=1)))
c Both direct and order encoding.
c Var 'aux500' order represents '0' with '2150'
c Var 'aux500' direct represents '0' with '2150'
c Var 'aux500' order represents '1' with '2151'
-2150 2151 0
c Var 'aux500' direct represents '1' with '2152'
2150 -2151 2152 0
-2152 2151 0
-2152 -2150 0
c Var 'aux500' direct represents '2' with '-2151'
2150 2152 -2151 0
c Encoding variable: aux501 with domain: int(0..3) (representing constraint ((x_00001_00002=1) + aux500))
c Both direct and order encoding.
c Var 'aux501' order represents '0' with '2153'
c Var 'aux501' direct represents '0' with '2153'
c Var 'aux501' order represents '1' with '2154'
-2153 2154 0
c Var 'aux501' direct represents '1' with '2155'
2153 -2154 2155 0
-2155 2154 0
-2155 -2153 0
c Var 'aux501' order represents '2' with '2156'
-2154 2156 0
c Var 'aux501' direct represents '2' with '2157'
2154 -2156 2157 0
-2157 2156 0
-2157 -2154 0
c Var 'aux501' direct represents '3' with '-2156'
2153 2155 2157 -2156 0
c Encoding variable: aux502 with domain: int(0..4) (representing constraint (aux497 + aux499))
c Both direct and order encoding.
c Var 'aux502' order represents '0' with '2158'
c Var 'aux502' direct represents '0' with '2158'
c Var 'aux502' order represents '1' with '2159'
-2158 2159 0
c Var 'aux502' direct represents '1' with '2160'
2158 -2159 2160 0
-2160 2159 0
-2160 -2158 0
c Var 'aux502' order represents '2' with '2161'
-2159 2161 0
c Var 'aux502' direct represents '2' with '2162'
2159 -2161 2162 0
-2162 2161 0
-2162 -2159 0
c Var 'aux502' order represents '3' with '2163'
-2161 2163 0
c Var 'aux502' direct represents '3' with '2164'
2161 -2163 2164 0
-2164 2163 0
-2164 -2161 0
c Var 'aux502' direct represents '4' with '-2163'
2158 2160 2162 2164 -2163 0
c Encoding variable: aux503 with domain: int(0..2) (representing constraint ((x_00003_00002=2) + (x_00005_00002=2)))
c Both direct and order encoding.
c Var 'aux503' order represents '0' with '2165'
c Var 'aux503' direct represents '0' with '2165'
c Var 'aux503' order represents '1' with '2166'
-2165 2166 0
c Var 'aux503' direct represents '1' with '2167'
2165 -2166 2167 0
-2167 2166 0
-2167 -2165 0
c Var 'aux503' direct represents '2' with '-2166'
2165 2167 -2166 0
c Encoding variable: aux504 with domain: int(0..2) (representing constraint ((x_00007_00002=2) + (x_00008_00002=2)))
c Both direct and order encoding.
c Var 'aux504' order represents '0' with '2168'
c Var 'aux504' direct represents '0' with '2168'
c Var 'aux504' order represents '1' with '2169'
-2168 2169 0
c Var 'aux504' direct represents '1' with '2170'
2168 -2169 2170 0
-2170 2169 0
-2170 -2168 0
c Var 'aux504' direct represents '2' with '-2169'
2168 2170 -2169 0
c Encoding variable: aux505 with domain: int(0..2) (representing constraint ((x_00002_00002=2) + (x_00006_00002=2)))
c Both direct and order encoding.
c Var 'aux505' order represents '0' with '2171'
c Var 'aux505' direct represents '0' with '2171'
c Var 'aux505' order represents '1' with '2172'
-2171 2172 0
c Var 'aux505' direct represents '1' with '2173'
2171 -2172 2173 0
-2173 2172 0
-2173 -2171 0
c Var 'aux505' direct represents '2' with '-2172'
2171 2173 -2172 0
c Encoding variable: aux506 with domain: int(0..2) (representing constraint ((x_00009_00002=2) + (x_00004_00002=2)))
c Both direct and order encoding.
c Var 'aux506' order represents '0' with '2174'
c Var 'aux506' direct represents '0' with '2174'
c Var 'aux506' order represents '1' with '2175'
-2174 2175 0
c Var 'aux506' direct represents '1' with '2176'
2174 -2175 2176 0
-2176 2175 0
-2176 -2174 0
c Var 'aux506' direct represents '2' with '-2175'
2174 2176 -2175 0
c Encoding variable: aux507 with domain: int(0..3) (representing constraint ((x_00001_00002=2) + aux506))
c Both direct and order encoding.
c Var 'aux507' order represents '0' with '2177'
c Var 'aux507' direct represents '0' with '2177'
c Var 'aux507' order represents '1' with '2178'
-2177 2178 0
c Var 'aux507' direct represents '1' with '2179'
2177 -2178 2179 0
-2179 2178 0
-2179 -2177 0
c Var 'aux507' order represents '2' with '2180'
-2178 2180 0
c Var 'aux507' direct represents '2' with '2181'
2178 -2180 2181 0
-2181 2180 0
-2181 -2178 0
c Var 'aux507' direct represents '3' with '-2180'
2177 2179 2181 -2180 0
c Encoding variable: aux508 with domain: int(0..4) (representing constraint (aux503 + aux505))
c Both direct and order encoding.
c Var 'aux508' order represents '0' with '2182'
c Var 'aux508' direct represents '0' with '2182'
c Var 'aux508' order represents '1' with '2183'
-2182 2183 0
c Var 'aux508' direct represents '1' with '2184'
2182 -2183 2184 0
-2184 2183 0
-2184 -2182 0
c Var 'aux508' order represents '2' with '2185'
-2183 2185 0
c Var 'aux508' direct represents '2' with '2186'
2183 -2185 2186 0
-2186 2185 0
-2186 -2183 0
c Var 'aux508' order represents '3' with '2187'
-2185 2187 0
c Var 'aux508' direct represents '3' with '2188'
2185 -2187 2188 0
-2188 2187 0
-2188 -2185 0
c Var 'aux508' direct represents '4' with '-2187'
2182 2184 2186 2188 -2187 0
c Encoding variable: aux509 with domain: int(0..2) (representing constraint ((x_00003_00002=3) + (x_00005_00002=3)))
c Both direct and order encoding.
c Var 'aux509' order represents '0' with '2189'
c Var 'aux509' direct represents '0' with '2189'
c Var 'aux509' order represents '1' with '2190'
-2189 2190 0
c Var 'aux509' direct represents '1' with '2191'
2189 -2190 2191 0
-2191 2190 0
-2191 -2189 0
c Var 'aux509' direct represents '2' with '-2190'
2189 2191 -2190 0
c Encoding variable: aux510 with domain: int(0..2) (representing constraint ((x_00007_00002=3) + (x_00008_00002=3)))
c Both direct and order encoding.
c Var 'aux510' order represents '0' with '2192'
c Var 'aux510' direct represents '0' with '2192'
c Var 'aux510' order represents '1' with '2193'
-2192 2193 0
c Var 'aux510' direct represents '1' with '2194'
2192 -2193 2194 0
-2194 2193 0
-2194 -2192 0
c Var 'aux510' direct represents '2' with '-2193'
2192 2194 -2193 0
c Encoding variable: aux511 with domain: int(0..2) (representing constraint ((x_00002_00002=3) + (x_00006_00002=3)))
c Both direct and order encoding.
c Var 'aux511' order represents '0' with '2195'
c Var 'aux511' direct represents '0' with '2195'
c Var 'aux511' order represents '1' with '2196'
-2195 2196 0
c Var 'aux511' direct represents '1' with '2197'
2195 -2196 2197 0
-2197 2196 0
-2197 -2195 0
c Var 'aux511' direct represents '2' with '-2196'
2195 2197 -2196 0
c Encoding variable: aux512 with domain: int(0..2) (representing constraint ((x_00009_00002=3) + (x_00004_00002=3)))
c Both direct and order encoding.
c Var 'aux512' order represents '0' with '2198'
c Var 'aux512' direct represents '0' with '2198'
c Var 'aux512' order represents '1' with '2199'
-2198 2199 0
c Var 'aux512' direct represents '1' with '2200'
2198 -2199 2200 0
-2200 2199 0
-2200 -2198 0
c Var 'aux512' direct represents '2' with '-2199'
2198 2200 -2199 0
c Encoding variable: aux513 with domain: int(0..3) (representing constraint ((x_00001_00002=3) + aux512))
c Both direct and order encoding.
c Var 'aux513' order represents '0' with '2201'
c Var 'aux513' direct represents '0' with '2201'
c Var 'aux513' order represents '1' with '2202'
-2201 2202 0
c Var 'aux513' direct represents '1' with '2203'
2201 -2202 2203 0
-2203 2202 0
-2203 -2201 0
c Var 'aux513' order represents '2' with '2204'
-2202 2204 0
c Var 'aux513' direct represents '2' with '2205'
2202 -2204 2205 0
-2205 2204 0
-2205 -2202 0
c Var 'aux513' direct represents '3' with '-2204'
2201 2203 2205 -2204 0
c Encoding variable: aux514 with domain: int(0..4) (representing constraint (aux509 + aux511))
c Both direct and order encoding.
c Var 'aux514' order represents '0' with '2206'
c Var 'aux514' direct represents '0' with '2206'
c Var 'aux514' order represents '1' with '2207'
-2206 2207 0
c Var 'aux514' direct represents '1' with '2208'
2206 -2207 2208 0
-2208 2207 0
-2208 -2206 0
c Var 'aux514' order represents '2' with '2209'
-2207 2209 0
c Var 'aux514' direct represents '2' with '2210'
2207 -2209 2210 0
-2210 2209 0
-2210 -2207 0
c Var 'aux514' order represents '3' with '2211'
-2209 2211 0
c Var 'aux514' direct represents '3' with '2212'
2209 -2211 2212 0
-2212 2211 0
-2212 -2209 0
c Var 'aux514' direct represents '4' with '-2211'
2206 2208 2210 2212 -2211 0
c Encoding variable: aux515 with domain: int(0..2) (representing constraint ((x_00003_00002=4) + (x_00005_00002=4)))
c Both direct and order encoding.
c Var 'aux515' order represents '0' with '2213'
c Var 'aux515' direct represents '0' with '2213'
c Var 'aux515' order represents '1' with '2214'
-2213 2214 0
c Var 'aux515' direct represents '1' with '2215'
2213 -2214 2215 0
-2215 2214 0
-2215 -2213 0
c Var 'aux515' direct represents '2' with '-2214'
2213 2215 -2214 0
c Encoding variable: aux516 with domain: int(0..2) (representing constraint ((x_00007_00002=4) + (x_00008_00002=4)))
c Both direct and order encoding.
c Var 'aux516' order represents '0' with '2216'
c Var 'aux516' direct represents '0' with '2216'
c Var 'aux516' order represents '1' with '2217'
-2216 2217 0
c Var 'aux516' direct represents '1' with '2218'
2216 -2217 2218 0
-2218 2217 0
-2218 -2216 0
c Var 'aux516' direct represents '2' with '-2217'
2216 2218 -2217 0
c Encoding variable: aux517 with domain: int(0..2) (representing constraint ((x_00002_00002=4) + (x_00006_00002=4)))
c Both direct and order encoding.
c Var 'aux517' order represents '0' with '2219'
c Var 'aux517' direct represents '0' with '2219'
c Var 'aux517' order represents '1' with '2220'
-2219 2220 0
c Var 'aux517' direct represents '1' with '2221'
2219 -2220 2221 0
-2221 2220 0
-2221 -2219 0
c Var 'aux517' direct represents '2' with '-2220'
2219 2221 -2220 0
c Encoding variable: aux518 with domain: int(0..2) (representing constraint ((x_00009_00002=4) + (x_00004_00002=4)))
c Both direct and order encoding.
c Var 'aux518' order represents '0' with '2222'
c Var 'aux518' direct represents '0' with '2222'
c Var 'aux518' order represents '1' with '2223'
-2222 2223 0
c Var 'aux518' direct represents '1' with '2224'
2222 -2223 2224 0
-2224 2223 0
-2224 -2222 0
c Var 'aux518' direct represents '2' with '-2223'
2222 2224 -2223 0
c Encoding variable: aux519 with domain: int(0..3) (representing constraint ((x_00001_00002=4) + aux518))
c Both direct and order encoding.
c Var 'aux519' order represents '0' with '2225'
c Var 'aux519' direct represents '0' with '2225'
c Var 'aux519' order represents '1' with '2226'
-2225 2226 0
c Var 'aux519' direct represents '1' with '2227'
2225 -2226 2227 0
-2227 2226 0
-2227 -2225 0
c Var 'aux519' order represents '2' with '2228'
-2226 2228 0
c Var 'aux519' direct represents '2' with '2229'
2226 -2228 2229 0
-2229 2228 0
-2229 -2226 0
c Var 'aux519' direct represents '3' with '-2228'
2225 2227 2229 -2228 0
c Encoding variable: aux520 with domain: int(0..4) (representing constraint (aux515 + aux517))
c Both direct and order encoding.
c Var 'aux520' order represents '0' with '2230'
c Var 'aux520' direct represents '0' with '2230'
c Var 'aux520' order represents '1' with '2231'
-2230 2231 0
c Var 'aux520' direct represents '1' with '2232'
2230 -2231 2232 0
-2232 2231 0
-2232 -2230 0
c Var 'aux520' order represents '2' with '2233'
-2231 2233 0
c Var 'aux520' direct represents '2' with '2234'
2231 -2233 2234 0
-2234 2233 0
-2234 -2231 0
c Var 'aux520' order represents '3' with '2235'
-2233 2235 0
c Var 'aux520' direct represents '3' with '2236'
2233 -2235 2236 0
-2236 2235 0
-2236 -2233 0
c Var 'aux520' direct represents '4' with '-2235'
2230 2232 2234 2236 -2235 0
c Encoding variable: aux521 with domain: int(0..2) (representing constraint ((x_00003_00002=5) + (x_00005_00002=5)))
c Both direct and order encoding.
c Var 'aux521' order represents '0' with '2237'
c Var 'aux521' direct represents '0' with '2237'
c Var 'aux521' order represents '1' with '2238'
-2237 2238 0
c Var 'aux521' direct represents '1' with '2239'
2237 -2238 2239 0
-2239 2238 0
-2239 -2237 0
c Var 'aux521' direct represents '2' with '-2238'
2237 2239 -2238 0
c Encoding variable: aux522 with domain: int(0..2) (representing constraint ((x_00007_00002=5) + (x_00008_00002=5)))
c Both direct and order encoding.
c Var 'aux522' order represents '0' with '2240'
c Var 'aux522' direct represents '0' with '2240'
c Var 'aux522' order represents '1' with '2241'
-2240 2241 0
c Var 'aux522' direct represents '1' with '2242'
2240 -2241 2242 0
-2242 2241 0
-2242 -2240 0
c Var 'aux522' direct represents '2' with '-2241'
2240 2242 -2241 0
c Encoding variable: aux523 with domain: int(0..2) (representing constraint ((x_00002_00002=5) + (x_00006_00002=5)))
c Both direct and order encoding.
c Var 'aux523' order represents '0' with '2243'
c Var 'aux523' direct represents '0' with '2243'
c Var 'aux523' order represents '1' with '2244'
-2243 2244 0
c Var 'aux523' direct represents '1' with '2245'
2243 -2244 2245 0
-2245 2244 0
-2245 -2243 0
c Var 'aux523' direct represents '2' with '-2244'
2243 2245 -2244 0
c Encoding variable: aux524 with domain: int(0..2) (representing constraint ((x_00009_00002=5) + (x_00004_00002=5)))
c Both direct and order encoding.
c Var 'aux524' order represents '0' with '2246'
c Var 'aux524' direct represents '0' with '2246'
c Var 'aux524' order represents '1' with '2247'
-2246 2247 0
c Var 'aux524' direct represents '1' with '2248'
2246 -2247 2248 0
-2248 2247 0
-2248 -2246 0
c Var 'aux524' direct represents '2' with '-2247'
2246 2248 -2247 0
c Encoding variable: aux525 with domain: int(0..3) (representing constraint ((x_00001_00002=5) + aux524))
c Both direct and order encoding.
c Var 'aux525' order represents '0' with '2249'
c Var 'aux525' direct represents '0' with '2249'
c Var 'aux525' order represents '1' with '2250'
-2249 2250 0
c Var 'aux525' direct represents '1' with '2251'
2249 -2250 2251 0
-2251 2250 0
-2251 -2249 0
c Var 'aux525' order represents '2' with '2252'
-2250 2252 0
c Var 'aux525' direct represents '2' with '2253'
2250 -2252 2253 0
-2253 2252 0
-2253 -2250 0
c Var 'aux525' direct represents '3' with '-2252'
2249 2251 2253 -2252 0
c Encoding variable: aux526 with domain: int(0..4) (representing constraint (aux521 + aux523))
c Both direct and order encoding.
c Var 'aux526' order represents '0' with '2254'
c Var 'aux526' direct represents '0' with '2254'
c Var 'aux526' order represents '1' with '2255'
-2254 2255 0
c Var 'aux526' direct represents '1' with '2256'
2254 -2255 2256 0
-2256 2255 0
-2256 -2254 0
c Var 'aux526' order represents '2' with '2257'
-2255 2257 0
c Var 'aux526' direct represents '2' with '2258'
2255 -2257 2258 0
-2258 2257 0
-2258 -2255 0
c Var 'aux526' order represents '3' with '2259'
-2257 2259 0
c Var 'aux526' direct represents '3' with '2260'
2257 -2259 2260 0
-2260 2259 0
-2260 -2257 0
c Var 'aux526' direct represents '4' with '-2259'
2254 2256 2258 2260 -2259 0
c Encoding variable: aux527 with domain: int(0..2) (representing constraint ((x_00003_00002=6) + (x_00005_00002=6)))
c Both direct and order encoding.
c Var 'aux527' order represents '0' with '2261'
c Var 'aux527' direct represents '0' with '2261'
c Var 'aux527' order represents '1' with '2262'
-2261 2262 0
c Var 'aux527' direct represents '1' with '2263'
2261 -2262 2263 0
-2263 2262 0
-2263 -2261 0
c Var 'aux527' direct represents '2' with '-2262'
2261 2263 -2262 0
c Encoding variable: aux528 with domain: int(0..2) (representing constraint ((x_00007_00002=6) + (x_00008_00002=6)))
c Both direct and order encoding.
c Var 'aux528' order represents '0' with '2264'
c Var 'aux528' direct represents '0' with '2264'
c Var 'aux528' order represents '1' with '2265'
-2264 2265 0
c Var 'aux528' direct represents '1' with '2266'
2264 -2265 2266 0
-2266 2265 0
-2266 -2264 0
c Var 'aux528' direct represents '2' with '-2265'
2264 2266 -2265 0
c Encoding variable: aux529 with domain: int(0..2) (representing constraint ((x_00002_00002=6) + (x_00006_00002=6)))
c Both direct and order encoding.
c Var 'aux529' order represents '0' with '2267'
c Var 'aux529' direct represents '0' with '2267'
c Var 'aux529' order represents '1' with '2268'
-2267 2268 0
c Var 'aux529' direct represents '1' with '2269'
2267 -2268 2269 0
-2269 2268 0
-2269 -2267 0
c Var 'aux529' direct represents '2' with '-2268'
2267 2269 -2268 0
c Encoding variable: aux530 with domain: int(0..2) (representing constraint ((x_00009_00002=6) + (x_00004_00002=6)))
c Both direct and order encoding.
c Var 'aux530' order represents '0' with '2270'
c Var 'aux530' direct represents '0' with '2270'
c Var 'aux530' order represents '1' with '2271'
-2270 2271 0
c Var 'aux530' direct represents '1' with '2272'
2270 -2271 2272 0
-2272 2271 0
-2272 -2270 0
c Var 'aux530' direct represents '2' with '-2271'
2270 2272 -2271 0
c Encoding variable: aux531 with domain: int(0..3) (representing constraint ((x_00001_00002=6) + aux530))
c Both direct and order encoding.
c Var 'aux531' order represents '0' with '2273'
c Var 'aux531' direct represents '0' with '2273'
c Var 'aux531' order represents '1' with '2274'
-2273 2274 0
c Var 'aux531' direct represents '1' with '2275'
2273 -2274 2275 0
-2275 2274 0
-2275 -2273 0
c Var 'aux531' order represents '2' with '2276'
-2274 2276 0
c Var 'aux531' direct represents '2' with '2277'
2274 -2276 2277 0
-2277 2276 0
-2277 -2274 0
c Var 'aux531' direct represents '3' with '-2276'
2273 2275 2277 -2276 0
c Encoding variable: aux532 with domain: int(0..4) (representing constraint (aux527 + aux529))
c Both direct and order encoding.
c Var 'aux532' order represents '0' with '2278'
c Var 'aux532' direct represents '0' with '2278'
c Var 'aux532' order represents '1' with '2279'
-2278 2279 0
c Var 'aux532' direct represents '1' with '2280'
2278 -2279 2280 0
-2280 2279 0
-2280 -2278 0
c Var 'aux532' order represents '2' with '2281'
-2279 2281 0
c Var 'aux532' direct represents '2' with '2282'
2279 -2281 2282 0
-2282 2281 0
-2282 -2279 0
c Var 'aux532' order represents '3' with '2283'
-2281 2283 0
c Var 'aux532' direct represents '3' with '2284'
2281 -2283 2284 0
-2284 2283 0
-2284 -2281 0
c Var 'aux532' direct represents '4' with '-2283'
2278 2280 2282 2284 -2283 0
c Encoding variable: aux533 with domain: int(0..2) (representing constraint ((x_00003_00002=7) + (x_00005_00002=7)))
c Both direct and order encoding.
c Var 'aux533' order represents '0' with '2285'
c Var 'aux533' direct represents '0' with '2285'
c Var 'aux533' order represents '1' with '2286'
-2285 2286 0
c Var 'aux533' direct represents '1' with '2287'
2285 -2286 2287 0
-2287 2286 0
-2287 -2285 0
c Var 'aux533' direct represents '2' with '-2286'
2285 2287 -2286 0
c Encoding variable: aux534 with domain: int(0..2) (representing constraint ((x_00007_00002=7) + (x_00008_00002=7)))
c Both direct and order encoding.
c Var 'aux534' order represents '0' with '2288'
c Var 'aux534' direct represents '0' with '2288'
c Var 'aux534' order represents '1' with '2289'
-2288 2289 0
c Var 'aux534' direct represents '1' with '2290'
2288 -2289 2290 0
-2290 2289 0
-2290 -2288 0
c Var 'aux534' direct represents '2' with '-2289'
2288 2290 -2289 0
c Encoding variable: aux535 with domain: int(0..2) (representing constraint ((x_00002_00002=7) + (x_00006_00002=7)))
c Both direct and order encoding.
c Var 'aux535' order represents '0' with '2291'
c Var 'aux535' direct represents '0' with '2291'
c Var 'aux535' order represents '1' with '2292'
-2291 2292 0
c Var 'aux535' direct represents '1' with '2293'
2291 -2292 2293 0
-2293 2292 0
-2293 -2291 0
c Var 'aux535' direct represents '2' with '-2292'
2291 2293 -2292 0
c Encoding variable: aux536 with domain: int(0..2) (representing constraint ((x_00009_00002=7) + (x_00004_00002=7)))
c Both direct and order encoding.
c Var 'aux536' order represents '0' with '2294'
c Var 'aux536' direct represents '0' with '2294'
c Var 'aux536' order represents '1' with '2295'
-2294 2295 0
c Var 'aux536' direct represents '1' with '2296'
2294 -2295 2296 0
-2296 2295 0
-2296 -2294 0
c Var 'aux536' direct represents '2' with '-2295'
2294 2296 -2295 0
c Encoding variable: aux537 with domain: int(0..3) (representing constraint ((x_00001_00002=7) + aux536))
c Both direct and order encoding.
c Var 'aux537' order represents '0' with '2297'
c Var 'aux537' direct represents '0' with '2297'
c Var 'aux537' order represents '1' with '2298'
-2297 2298 0
c Var 'aux537' direct represents '1' with '2299'
2297 -2298 2299 0
-2299 2298 0
-2299 -2297 0
c Var 'aux537' order represents '2' with '2300'
-2298 2300 0
c Var 'aux537' direct represents '2' with '2301'
2298 -2300 2301 0
-2301 2300 0
-2301 -2298 0
c Var 'aux537' direct represents '3' with '-2300'
2297 2299 2301 -2300 0
c Encoding variable: aux538 with domain: int(0..4) (representing constraint (aux533 + aux535))
c Both direct and order encoding.
c Var 'aux538' order represents '0' with '2302'
c Var 'aux538' direct represents '0' with '2302'
c Var 'aux538' order represents '1' with '2303'
-2302 2303 0
c Var 'aux538' direct represents '1' with '2304'
2302 -2303 2304 0
-2304 2303 0
-2304 -2302 0
c Var 'aux538' order represents '2' with '2305'
-2303 2305 0
c Var 'aux538' direct represents '2' with '2306'
2303 -2305 2306 0
-2306 2305 0
-2306 -2303 0
c Var 'aux538' order represents '3' with '2307'
-2305 2307 0
c Var 'aux538' direct represents '3' with '2308'
2305 -2307 2308 0
-2308 2307 0
-2308 -2305 0
c Var 'aux538' direct represents '4' with '-2307'
2302 2304 2306 2308 -2307 0
c Encoding variable: aux539 with domain: int(0..2) (representing constraint ((x_00003_00002=8) + (x_00005_00002=8)))
c Both direct and order encoding.
c Var 'aux539' order represents '0' with '2309'
c Var 'aux539' direct represents '0' with '2309'
c Var 'aux539' order represents '1' with '2310'
-2309 2310 0
c Var 'aux539' direct represents '1' with '2311'
2309 -2310 2311 0
-2311 2310 0
-2311 -2309 0
c Var 'aux539' direct represents '2' with '-2310'
2309 2311 -2310 0
c Encoding variable: aux540 with domain: int(0..2) (representing constraint ((x_00007_00002=8) + (x_00008_00002=8)))
c Both direct and order encoding.
c Var 'aux540' order represents '0' with '2312'
c Var 'aux540' direct represents '0' with '2312'
c Var 'aux540' order represents '1' with '2313'
-2312 2313 0
c Var 'aux540' direct represents '1' with '2314'
2312 -2313 2314 0
-2314 2313 0
-2314 -2312 0
c Var 'aux540' direct represents '2' with '-2313'
2312 2314 -2313 0
c Encoding variable: aux541 with domain: int(0..2) (representing constraint ((x_00002_00002=8) + (x_00006_00002=8)))
c Both direct and order encoding.
c Var 'aux541' order represents '0' with '2315'
c Var 'aux541' direct represents '0' with '2315'
c Var 'aux541' order represents '1' with '2316'
-2315 2316 0
c Var 'aux541' direct represents '1' with '2317'
2315 -2316 2317 0
-2317 2316 0
-2317 -2315 0
c Var 'aux541' direct represents '2' with '-2316'
2315 2317 -2316 0
c Encoding variable: aux542 with domain: int(0..2) (representing constraint ((x_00009_00002=8) + (x_00004_00002=8)))
c Both direct and order encoding.
c Var 'aux542' order represents '0' with '2318'
c Var 'aux542' direct represents '0' with '2318'
c Var 'aux542' order represents '1' with '2319'
-2318 2319 0
c Var 'aux542' direct represents '1' with '2320'
2318 -2319 2320 0
-2320 2319 0
-2320 -2318 0
c Var 'aux542' direct represents '2' with '-2319'
2318 2320 -2319 0
c Encoding variable: aux543 with domain: int(0..3) (representing constraint ((x_00001_00002=8) + aux542))
c Both direct and order encoding.
c Var 'aux543' order represents '0' with '2321'
c Var 'aux543' direct represents '0' with '2321'
c Var 'aux543' order represents '1' with '2322'
-2321 2322 0
c Var 'aux543' direct represents '1' with '2323'
2321 -2322 2323 0
-2323 2322 0
-2323 -2321 0
c Var 'aux543' order represents '2' with '2324'
-2322 2324 0
c Var 'aux543' direct represents '2' with '2325'
2322 -2324 2325 0
-2325 2324 0
-2325 -2322 0
c Var 'aux543' direct represents '3' with '-2324'
2321 2323 2325 -2324 0
c Encoding variable: aux544 with domain: int(0..4) (representing constraint (aux539 + aux541))
c Both direct and order encoding.
c Var 'aux544' order represents '0' with '2326'
c Var 'aux544' direct represents '0' with '2326'
c Var 'aux544' order represents '1' with '2327'
-2326 2327 0
c Var 'aux544' direct represents '1' with '2328'
2326 -2327 2328 0
-2328 2327 0
-2328 -2326 0
c Var 'aux544' order represents '2' with '2329'
-2327 2329 0
c Var 'aux544' direct represents '2' with '2330'
2327 -2329 2330 0
-2330 2329 0
-2330 -2327 0
c Var 'aux544' order represents '3' with '2331'
-2329 2331 0
c Var 'aux544' direct represents '3' with '2332'
2329 -2331 2332 0
-2332 2331 0
-2332 -2329 0
c Var 'aux544' direct represents '4' with '-2331'
2326 2328 2330 2332 -2331 0
c Encoding variable: aux545 with domain: int(0..2) (representing constraint ((x_00003_00002=9) + (x_00005_00002=9)))
c Both direct and order encoding.
c Var 'aux545' order represents '0' with '2333'
c Var 'aux545' direct represents '0' with '2333'
c Var 'aux545' order represents '1' with '2334'
-2333 2334 0
c Var 'aux545' direct represents '1' with '2335'
2333 -2334 2335 0
-2335 2334 0
-2335 -2333 0
c Var 'aux545' direct represents '2' with '-2334'
2333 2335 -2334 0
c Encoding variable: aux546 with domain: int(0..2) (representing constraint ((x_00007_00002=9) + (x_00008_00002=9)))
c Both direct and order encoding.
c Var 'aux546' order represents '0' with '2336'
c Var 'aux546' direct represents '0' with '2336'
c Var 'aux546' order represents '1' with '2337'
-2336 2337 0
c Var 'aux546' direct represents '1' with '2338'
2336 -2337 2338 0
-2338 2337 0
-2338 -2336 0
c Var 'aux546' direct represents '2' with '-2337'
2336 2338 -2337 0
c Encoding variable: aux547 with domain: int(0..2) (representing constraint ((x_00002_00002=9) + (x_00006_00002=9)))
c Both direct and order encoding.
c Var 'aux547' order represents '0' with '2339'
c Var 'aux547' direct represents '0' with '2339'
c Var 'aux547' order represents '1' with '2340'
-2339 2340 0
c Var 'aux547' direct represents '1' with '2341'
2339 -2340 2341 0
-2341 2340 0
-2341 -2339 0
c Var 'aux547' direct represents '2' with '-2340'
2339 2341 -2340 0
c Encoding variable: aux548 with domain: int(0..2) (representing constraint ((x_00009_00002=9) + (x_00004_00002=9)))
c Both direct and order encoding.
c Var 'aux548' order represents '0' with '2342'
c Var 'aux548' direct represents '0' with '2342'
c Var 'aux548' order represents '1' with '2343'
-2342 2343 0
c Var 'aux548' direct represents '1' with '2344'
2342 -2343 2344 0
-2344 2343 0
-2344 -2342 0
c Var 'aux548' direct represents '2' with '-2343'
2342 2344 -2343 0
c Encoding variable: aux549 with domain: int(0..3) (representing constraint ((x_00001_00002=9) + aux548))
c Both direct and order encoding.
c Var 'aux549' order represents '0' with '2345'
c Var 'aux549' direct represents '0' with '2345'
c Var 'aux549' order represents '1' with '2346'
-2345 2346 0
c Var 'aux549' direct represents '1' with '2347'
2345 -2346 2347 0
-2347 2346 0
-2347 -2345 0
c Var 'aux549' order represents '2' with '2348'
-2346 2348 0
c Var 'aux549' direct represents '2' with '2349'
2346 -2348 2349 0
-2349 2348 0
-2349 -2346 0
c Var 'aux549' direct represents '3' with '-2348'
2345 2347 2349 -2348 0
c Encoding variable: aux550 with domain: int(0..4) (representing constraint (aux545 + aux547))
c Both direct and order encoding.
c Var 'aux550' order represents '0' with '2350'
c Var 'aux550' direct represents '0' with '2350'
c Var 'aux550' order represents '1' with '2351'
-2350 2351 0
c Var 'aux550' direct represents '1' with '2352'
2350 -2351 2352 0
-2352 2351 0
-2352 -2350 0
c Var 'aux550' order represents '2' with '2353'
-2351 2353 0
c Var 'aux550' direct represents '2' with '2354'
2351 -2353 2354 0
-2354 2353 0
-2354 -2351 0
c Var 'aux550' order represents '3' with '2355'
-2353 2355 0
c Var 'aux550' direct represents '3' with '2356'
2353 -2355 2356 0
-2356 2355 0
-2356 -2353 0
c Var 'aux550' direct represents '4' with '-2355'
2350 2352 2354 2356 -2355 0
c Encoding variable: aux551 with domain: int(0..2) (representing constraint ((x_00003_00003=1) + (x_00005_00003=1)))
c Both direct and order encoding.
c Var 'aux551' order represents '0' with '2357'
c Var 'aux551' direct represents '0' with '2357'
c Var 'aux551' order represents '1' with '2358'
-2357 2358 0
c Var 'aux551' direct represents '1' with '2359'
2357 -2358 2359 0
-2359 2358 0
-2359 -2357 0
c Var 'aux551' direct represents '2' with '-2358'
2357 2359 -2358 0
c Encoding variable: aux552 with domain: int(0..2) (representing constraint ((x_00007_00003=1) + (x_00008_00003=1)))
c Both direct and order encoding.
c Var 'aux552' order represents '0' with '2360'
c Var 'aux552' direct represents '0' with '2360'
c Var 'aux552' order represents '1' with '2361'
-2360 2361 0
c Var 'aux552' direct represents '1' with '2362'
2360 -2361 2362 0
-2362 2361 0
-2362 -2360 0
c Var 'aux552' direct represents '2' with '-2361'
2360 2362 -2361 0
c Encoding variable: aux553 with domain: int(0..2) (representing constraint ((x_00002_00003=1) + (x_00006_00003=1)))
c Both direct and order encoding.
c Var 'aux553' order represents '0' with '2363'
c Var 'aux553' direct represents '0' with '2363'
c Var 'aux553' order represents '1' with '2364'
-2363 2364 0
c Var 'aux553' direct represents '1' with '2365'
2363 -2364 2365 0
-2365 2364 0
-2365 -2363 0
c Var 'aux553' direct represents '2' with '-2364'
2363 2365 -2364 0
c Encoding variable: aux554 with domain: int(0..2) (representing constraint ((x_00009_00003=1) + (x_00004_00003=1)))
c Both direct and order encoding.
c Var 'aux554' order represents '0' with '2366'
c Var 'aux554' direct represents '0' with '2366'
c Var 'aux554' order represents '1' with '2367'
-2366 2367 0
c Var 'aux554' direct represents '1' with '2368'
2366 -2367 2368 0
-2368 2367 0
-2368 -2366 0
c Var 'aux554' direct represents '2' with '-2367'
2366 2368 -2367 0
c Encoding variable: aux555 with domain: int(0..3) (representing constraint ((x_00001_00003=1) + aux554))
c Both direct and order encoding.
c Var 'aux555' order represents '0' with '2369'
c Var 'aux555' direct represents '0' with '2369'
c Var 'aux555' order represents '1' with '2370'
-2369 2370 0
c Var 'aux555' direct represents '1' with '2371'
2369 -2370 2371 0
-2371 2370 0
-2371 -2369 0
c Var 'aux555' order represents '2' with '2372'
-2370 2372 0
c Var 'aux555' direct represents '2' with '2373'
2370 -2372 2373 0
-2373 2372 0
-2373 -2370 0
c Var 'aux555' direct represents '3' with '-2372'
2369 2371 2373 -2372 0
c Encoding variable: aux556 with domain: int(0..4) (representing constraint (aux551 + aux553))
c Both direct and order encoding.
c Var 'aux556' order represents '0' with '2374'
c Var 'aux556' direct represents '0' with '2374'
c Var 'aux556' order represents '1' with '2375'
-2374 2375 0
c Var 'aux556' direct represents '1' with '2376'
2374 -2375 2376 0
-2376 2375 0
-2376 -2374 0
c Var 'aux556' order represents '2' with '2377'
-2375 2377 0
c Var 'aux556' direct represents '2' with '2378'
2375 -2377 2378 0
-2378 2377 0
-2378 -2375 0
c Var 'aux556' order represents '3' with '2379'
-2377 2379 0
c Var 'aux556' direct represents '3' with '2380'
2377 -2379 2380 0
-2380 2379 0
-2380 -2377 0
c Var 'aux556' direct represents '4' with '-2379'
2374 2376 2378 2380 -2379 0
c Encoding variable: aux557 with domain: int(0..2) (representing constraint ((x_00003_00003=2) + (x_00005_00003=2)))
c Both direct and order encoding.
c Var 'aux557' order represents '0' with '2381'
c Var 'aux557' direct represents '0' with '2381'
c Var 'aux557' order represents '1' with '2382'
-2381 2382 0
c Var 'aux557' direct represents '1' with '2383'
2381 -2382 2383 0
-2383 2382 0
-2383 -2381 0
c Var 'aux557' direct represents '2' with '-2382'
2381 2383 -2382 0
c Encoding variable: aux558 with domain: int(0..2) (representing constraint ((x_00007_00003=2) + (x_00008_00003=2)))
c Both direct and order encoding.
c Var 'aux558' order represents '0' with '2384'
c Var 'aux558' direct represents '0' with '2384'
c Var 'aux558' order represents '1' with '2385'
-2384 2385 0
c Var 'aux558' direct represents '1' with '2386'
2384 -2385 2386 0
-2386 2385 0
-2386 -2384 0
c Var 'aux558' direct represents '2' with '-2385'
2384 2386 -2385 0
c Encoding variable: aux559 with domain: int(0..2) (representing constraint ((x_00002_00003=2) + (x_00006_00003=2)))
c Both direct and order encoding.
c Var 'aux559' order represents '0' with '2387'
c Var 'aux559' direct represents '0' with '2387'
c Var 'aux559' order represents '1' with '2388'
-2387 2388 0
c Var 'aux559' direct represents '1' with '2389'
2387 -2388 2389 0
-2389 2388 0
-2389 -2387 0
c Var 'aux559' direct represents '2' with '-2388'
2387 2389 -2388 0
c Encoding variable: aux560 with domain: int(0..2) (representing constraint ((x_00009_00003=2) + (x_00004_00003=2)))
c Both direct and order encoding.
c Var 'aux560' order represents '0' with '2390'
c Var 'aux560' direct represents '0' with '2390'
c Var 'aux560' order represents '1' with '2391'
-2390 2391 0
c Var 'aux560' direct represents '1' with '2392'
2390 -2391 2392 0
-2392 2391 0
-2392 -2390 0
c Var 'aux560' direct represents '2' with '-2391'
2390 2392 -2391 0
c Encoding variable: aux561 with domain: int(0..3) (representing constraint ((x_00001_00003=2) + aux560))
c Both direct and order encoding.
c Var 'aux561' order represents '0' with '2393'
c Var 'aux561' direct represents '0' with '2393'
c Var 'aux561' order represents '1' with '2394'
-2393 2394 0
c Var 'aux561' direct represents '1' with '2395'
2393 -2394 2395 0
-2395 2394 0
-2395 -2393 0
c Var 'aux561' order represents '2' with '2396'
-2394 2396 0
c Var 'aux561' direct represents '2' with '2397'
2394 -2396 2397 0
-2397 2396 0
-2397 -2394 0
c Var 'aux561' direct represents '3' with '-2396'
2393 2395 2397 -2396 0
c Encoding variable: aux562 with domain: int(0..4) (representing constraint (aux557 + aux559))
c Both direct and order encoding.
c Var 'aux562' order represents '0' with '2398'
c Var 'aux562' direct represents '0' with '2398'
c Var 'aux562' order represents '1' with '2399'
-2398 2399 0
c Var 'aux562' direct represents '1' with '2400'
2398 -2399 2400 0
-2400 2399 0
-2400 -2398 0
c Var 'aux562' order represents '2' with '2401'
-2399 2401 0
c Var 'aux562' direct represents '2' with '2402'
2399 -2401 2402 0
-2402 2401 0
-2402 -2399 0
c Var 'aux562' order represents '3' with '2403'
-2401 2403 0
c Var 'aux562' direct represents '3' with '2404'
2401 -2403 2404 0
-2404 2403 0
-2404 -2401 0
c Var 'aux562' direct represents '4' with '-2403'
2398 2400 2402 2404 -2403 0
c Encoding variable: aux563 with domain: int(0..2) (representing constraint ((x_00003_00003=3) + (x_00005_00003=3)))
c Both direct and order encoding.
c Var 'aux563' order represents '0' with '2405'
c Var 'aux563' direct represents '0' with '2405'
c Var 'aux563' order represents '1' with '2406'
-2405 2406 0
c Var 'aux563' direct represents '1' with '2407'
2405 -2406 2407 0
-2407 2406 0
-2407 -2405 0
c Var 'aux563' direct represents '2' with '-2406'
2405 2407 -2406 0
c Encoding variable: aux564 with domain: int(0..2) (representing constraint ((x_00007_00003=3) + (x_00008_00003=3)))
c Both direct and order encoding.
c Var 'aux564' order represents '0' with '2408'
c Var 'aux564' direct represents '0' with '2408'
c Var 'aux564' order represents '1' with '2409'
-2408 2409 0
c Var 'aux564' direct represents '1' with '2410'
2408 -2409 2410 0
-2410 2409 0
-2410 -2408 0
c Var 'aux564' direct represents '2' with '-2409'
2408 2410 -2409 0
c Encoding variable: aux565 with domain: int(0..2) (representing constraint ((x_00002_00003=3) + (x_00006_00003=3)))
c Both direct and order encoding.
c Var 'aux565' order represents '0' with '2411'
c Var 'aux565' direct represents '0' with '2411'
c Var 'aux565' order represents '1' with '2412'
-2411 2412 0
c Var 'aux565' direct represents '1' with '2413'
2411 -2412 2413 0
-2413 2412 0
-2413 -2411 0
c Var 'aux565' direct represents '2' with '-2412'
2411 2413 -2412 0
c Encoding variable: aux566 with domain: int(0..2) (representing constraint ((x_00009_00003=3) + (x_00004_00003=3)))
c Both direct and order encoding.
c Var 'aux566' order represents '0' with '2414'
c Var 'aux566' direct represents '0' with '2414'
c Var 'aux566' order represents '1' with '2415'
-2414 2415 0
c Var 'aux566' direct represents '1' with '2416'
2414 -2415 2416 0
-2416 2415 0
-2416 -2414 0
c Var 'aux566' direct represents '2' with '-2415'
2414 2416 -2415 0
c Encoding variable: aux567 with domain: int(0..3) (representing constraint ((x_00001_00003=3) + aux566))
c Both direct and order encoding.
c Var 'aux567' order represents '0' with '2417'
c Var 'aux567' direct represents '0' with '2417'
c Var 'aux567' order represents '1' with '2418'
-2417 2418 0
c Var 'aux567' direct represents '1' with '2419'
2417 -2418 2419 0
-2419 2418 0
-2419 -2417 0
c Var 'aux567' order represents '2' with '2420'
-2418 2420 0
c Var 'aux567' direct represents '2' with '2421'
2418 -2420 2421 0
-2421 2420 0
-2421 -2418 0
c Var 'aux567' direct represents '3' with '-2420'
2417 2419 2421 -2420 0
c Encoding variable: aux568 with domain: int(0..4) (representing constraint (aux563 + aux565))
c Both direct and order encoding.
c Var 'aux568' order represents '0' with '2422'
c Var 'aux568' direct represents '0' with '2422'
c Var 'aux568' order represents '1' with '2423'
-2422 2423 0
c Var 'aux568' direct represents '1' with '2424'
2422 -2423 2424 0
-2424 2423 0
-2424 -2422 0
c Var 'aux568' order represents '2' with '2425'
-2423 2425 0
c Var 'aux568' direct represents '2' with '2426'
2423 -2425 2426 0
-2426 2425 0
-2426 -2423 0
c Var 'aux568' order represents '3' with '2427'
-2425 2427 0
c Var 'aux568' direct represents '3' with '2428'
2425 -2427 2428 0
-2428 2427 0
-2428 -2425 0
c Var 'aux568' direct represents '4' with '-2427'
2422 2424 2426 2428 -2427 0
c Encoding variable: aux569 with domain: int(0..2) (representing constraint ((x_00003_00003=4) + (x_00005_00003=4)))
c Both direct and order encoding.
c Var 'aux569' order represents '0' with '2429'
c Var 'aux569' direct represents '0' with '2429'
c Var 'aux569' order represents '1' with '2430'
-2429 2430 0
c Var 'aux569' direct represents '1' with '2431'
2429 -2430 2431 0
-2431 2430 0
-2431 -2429 0
c Var 'aux569' direct represents '2' with '-2430'
2429 2431 -2430 0
c Encoding variable: aux570 with domain: int(0..2) (representing constraint ((x_00007_00003=4) + (x_00008_00003=4)))
c Both direct and order encoding.
c Var 'aux570' order represents '0' with '2432'
c Var 'aux570' direct represents '0' with '2432'
c Var 'aux570' order represents '1' with '2433'
-2432 2433 0
c Var 'aux570' direct represents '1' with '2434'
2432 -2433 2434 0
-2434 2433 0
-2434 -2432 0
c Var 'aux570' direct represents '2' with '-2433'
2432 2434 -2433 0
c Encoding variable: aux571 with domain: int(0..2) (representing constraint ((x_00002_00003=4) + (x_00006_00003=4)))
c Both direct and order encoding.
c Var 'aux571' order represents '0' with '2435'
c Var 'aux571' direct represents '0' with '2435'
c Var 'aux571' order represents '1' with '2436'
-2435 2436 0
c Var 'aux571' direct represents '1' with '2437'
2435 -2436 2437 0
-2437 2436 0
-2437 -2435 0
c Var 'aux571' direct represents '2' with '-2436'
2435 2437 -2436 0
c Encoding variable: aux572 with domain: int(0..2) (representing constraint ((x_00009_00003=4) + (x_00004_00003=4)))
c Both direct and order encoding.
c Var 'aux572' order represents '0' with '2438'
c Var 'aux572' direct represents '0' with '2438'
c Var 'aux572' order represents '1' with '2439'
-2438 2439 0
c Var 'aux572' direct represents '1' with '2440'
2438 -2439 2440 0
-2440 2439 0
-2440 -2438 0
c Var 'aux572' direct represents '2' with '-2439'
2438 2440 -2439 0
c Encoding variable: aux573 with domain: int(0..3) (representing constraint ((x_00001_00003=4) + aux572))
c Both direct and order encoding.
c Var 'aux573' order represents '0' with '2441'
c Var 'aux573' direct represents '0' with '2441'
c Var 'aux573' order represents '1' with '2442'
-2441 2442 0
c Var 'aux573' direct represents '1' with '2443'
2441 -2442 2443 0
-2443 2442 0
-2443 -2441 0
c Var 'aux573' order represents '2' with '2444'
-2442 2444 0
c Var 'aux573' direct represents '2' with '2445'
2442 -2444 2445 0
-2445 2444 0
-2445 -2442 0
c Var 'aux573' direct represents '3' with '-2444'
2441 2443 2445 -2444 0
c Encoding variable: aux574 with domain: int(0..4) (representing constraint (aux569 + aux571))
c Both direct and order encoding.
c Var 'aux574' order represents '0' with '2446'
c Var 'aux574' direct represents '0' with '2446'
c Var 'aux574' order represents '1' with '2447'
-2446 2447 0
c Var 'aux574' direct represents '1' with '2448'
2446 -2447 2448 0
-2448 2447 0
-2448 -2446 0
c Var 'aux574' order represents '2' with '2449'
-2447 2449 0
c Var 'aux574' direct represents '2' with '2450'
2447 -2449 2450 0
-2450 2449 0
-2450 -2447 0
c Var 'aux574' order represents '3' with '2451'
-2449 2451 0
c Var 'aux574' direct represents '3' with '2452'
2449 -2451 2452 0
-2452 2451 0
-2452 -2449 0
c Var 'aux574' direct represents '4' with '-2451'
2446 2448 2450 2452 -2451 0
c Encoding variable: aux575 with domain: int(0..2) (representing constraint ((x_00003_00003=5) + (x_00005_00003=5)))
c Both direct and order encoding.
c Var 'aux575' order represents '0' with '2453'
c Var 'aux575' direct represents '0' with '2453'
c Var 'aux575' order represents '1' with '2454'
-2453 2454 0
c Var 'aux575' direct represents '1' with '2455'
2453 -2454 2455 0
-2455 2454 0
-2455 -2453 0
c Var 'aux575' direct represents '2' with '-2454'
2453 2455 -2454 0
c Encoding variable: aux576 with domain: int(0..2) (representing constraint ((x_00007_00003=5) + (x_00008_00003=5)))
c Both direct and order encoding.
c Var 'aux576' order represents '0' with '2456'
c Var 'aux576' direct represents '0' with '2456'
c Var 'aux576' order represents '1' with '2457'
-2456 2457 0
c Var 'aux576' direct represents '1' with '2458'
2456 -2457 2458 0
-2458 2457 0
-2458 -2456 0
c Var 'aux576' direct represents '2' with '-2457'
2456 2458 -2457 0
c Encoding variable: aux577 with domain: int(0..2) (representing constraint ((x_00002_00003=5) + (x_00006_00003=5)))
c Both direct and order encoding.
c Var 'aux577' order represents '0' with '2459'
c Var 'aux577' direct represents '0' with '2459'
c Var 'aux577' order represents '1' with '2460'
-2459 2460 0
c Var 'aux577' direct represents '1' with '2461'
2459 -2460 2461 0
-2461 2460 0
-2461 -2459 0
c Var 'aux577' direct represents '2' with '-2460'
2459 2461 -2460 0
c Encoding variable: aux578 with domain: int(0..2) (representing constraint ((x_00009_00003=5) + (x_00004_00003=5)))
c Both direct and order encoding.
c Var 'aux578' order represents '0' with '2462'
c Var 'aux578' direct represents '0' with '2462'
c Var 'aux578' order represents '1' with '2463'
-2462 2463 0
c Var 'aux578' direct represents '1' with '2464'
2462 -2463 2464 0
-2464 2463 0
-2464 -2462 0
c Var 'aux578' direct represents '2' with '-2463'
2462 2464 -2463 0
c Encoding variable: aux579 with domain: int(0..3) (representing constraint ((x_00001_00003=5) + aux578))
c Both direct and order encoding.
c Var 'aux579' order represents '0' with '2465'
c Var 'aux579' direct represents '0' with '2465'
c Var 'aux579' order represents '1' with '2466'
-2465 2466 0
c Var 'aux579' direct represents '1' with '2467'
2465 -2466 2467 0
-2467 2466 0
-2467 -2465 0
c Var 'aux579' order represents '2' with '2468'
-2466 2468 0
c Var 'aux579' direct represents '2' with '2469'
2466 -2468 2469 0
-2469 2468 0
-2469 -2466 0
c Var 'aux579' direct represents '3' with '-2468'
2465 2467 2469 -2468 0
c Encoding variable: aux580 with domain: int(0..4) (representing constraint (aux575 + aux577))
c Both direct and order encoding.
c Var 'aux580' order represents '0' with '2470'
c Var 'aux580' direct represents '0' with '2470'
c Var 'aux580' order represents '1' with '2471'
-2470 2471 0
c Var 'aux580' direct represents '1' with '2472'
2470 -2471 2472 0
-2472 2471 0
-2472 -2470 0
c Var 'aux580' order represents '2' with '2473'
-2471 2473 0
c Var 'aux580' direct represents '2' with '2474'
2471 -2473 2474 0
-2474 2473 0
-2474 -2471 0
c Var 'aux580' order represents '3' with '2475'
-2473 2475 0
c Var 'aux580' direct represents '3' with '2476'
2473 -2475 2476 0
-2476 2475 0
-2476 -2473 0
c Var 'aux580' direct represents '4' with '-2475'
2470 2472 2474 2476 -2475 0
c Encoding variable: aux581 with domain: int(0..2) (representing constraint ((x_00003_00003=6) + (x_00005_00003=6)))
c Both direct and order encoding.
c Var 'aux581' order represents '0' with '2477'
c Var 'aux581' direct represents '0' with '2477'
c Var 'aux581' order represents '1' with '2478'
-2477 2478 0
c Var 'aux581' direct represents '1' with '2479'
2477 -2478 2479 0
-2479 2478 0
-2479 -2477 0
c Var 'aux581' direct represents '2' with '-2478'
2477 2479 -2478 0
c Encoding variable: aux582 with domain: int(0..2) (representing constraint ((x_00007_00003=6) + (x_00008_00003=6)))
c Both direct and order encoding.
c Var 'aux582' order represents '0' with '2480'
c Var 'aux582' direct represents '0' with '2480'
c Var 'aux582' order represents '1' with '2481'
-2480 2481 0
c Var 'aux582' direct represents '1' with '2482'
2480 -2481 2482 0
-2482 2481 0
-2482 -2480 0
c Var 'aux582' direct represents '2' with '-2481'
2480 2482 -2481 0
c Encoding variable: aux583 with domain: int(0..2) (representing constraint ((x_00002_00003=6) + (x_00006_00003=6)))
c Both direct and order encoding.
c Var 'aux583' order represents '0' with '2483'
c Var 'aux583' direct represents '0' with '2483'
c Var 'aux583' order represents '1' with '2484'
-2483 2484 0
c Var 'aux583' direct represents '1' with '2485'
2483 -2484 2485 0
-2485 2484 0
-2485 -2483 0
c Var 'aux583' direct represents '2' with '-2484'
2483 2485 -2484 0
c Encoding variable: aux584 with domain: int(0..2) (representing constraint ((x_00009_00003=6) + (x_00004_00003=6)))
c Both direct and order encoding.
c Var 'aux584' order represents '0' with '2486'
c Var 'aux584' direct represents '0' with '2486'
c Var 'aux584' order represents '1' with '2487'
-2486 2487 0
c Var 'aux584' direct represents '1' with '2488'
2486 -2487 2488 0
-2488 2487 0
-2488 -2486 0
c Var 'aux584' direct represents '2' with '-2487'
2486 2488 -2487 0
c Encoding variable: aux585 with domain: int(0..3) (representing constraint ((x_00001_00003=6) + aux584))
c Both direct and order encoding.
c Var 'aux585' order represents '0' with '2489'
c Var 'aux585' direct represents '0' with '2489'
c Var 'aux585' order represents '1' with '2490'
-2489 2490 0
c Var 'aux585' direct represents '1' with '2491'
2489 -2490 2491 0
-2491 2490 0
-2491 -2489 0
c Var 'aux585' order represents '2' with '2492'
-2490 2492 0
c Var 'aux585' direct represents '2' with '2493'
2490 -2492 2493 0
-2493 2492 0
-2493 -2490 0
c Var 'aux585' direct represents '3' with '-2492'
2489 2491 2493 -2492 0
c Encoding variable: aux586 with domain: int(0..4) (representing constraint (aux581 + aux583))
c Both direct and order encoding.
c Var 'aux586' order represents '0' with '2494'
c Var 'aux586' direct represents '0' with '2494'
c Var 'aux586' order represents '1' with '2495'
-2494 2495 0
c Var 'aux586' direct represents '1' with '2496'
2494 -2495 2496 0
-2496 2495 0
-2496 -2494 0
c Var 'aux586' order represents '2' with '2497'
-2495 2497 0
c Var 'aux586' direct represents '2' with '2498'
2495 -2497 2498 0
-2498 2497 0
-2498 -2495 0
c Var 'aux586' order represents '3' with '2499'
-2497 2499 0
c Var 'aux586' direct represents '3' with '2500'
2497 -2499 2500 0
-2500 2499 0
-2500 -2497 0
c Var 'aux586' direct represents '4' with '-2499'
2494 2496 2498 2500 -2499 0
c Encoding variable: aux587 with domain: int(0..2) (representing constraint ((x_00003_00003=7) + (x_00005_00003=7)))
c Both direct and order encoding.
c Var 'aux587' order represents '0' with '2501'
c Var 'aux587' direct represents '0' with '2501'
c Var 'aux587' order represents '1' with '2502'
-2501 2502 0
c Var 'aux587' direct represents '1' with '2503'
2501 -2502 2503 0
-2503 2502 0
-2503 -2501 0
c Var 'aux587' direct represents '2' with '-2502'
2501 2503 -2502 0
c Encoding variable: aux588 with domain: int(0..2) (representing constraint ((x_00007_00003=7) + (x_00008_00003=7)))
c Both direct and order encoding.
c Var 'aux588' order represents '0' with '2504'
c Var 'aux588' direct represents '0' with '2504'
c Var 'aux588' order represents '1' with '2505'
-2504 2505 0
c Var 'aux588' direct represents '1' with '2506'
2504 -2505 2506 0
-2506 2505 0
-2506 -2504 0
c Var 'aux588' direct represents '2' with '-2505'
2504 2506 -2505 0
c Encoding variable: aux589 with domain: int(0..2) (representing constraint ((x_00002_00003=7) + (x_00006_00003=7)))
c Both direct and order encoding.
c Var 'aux589' order represents '0' with '2507'
c Var 'aux589' direct represents '0' with '2507'
c Var 'aux589' order represents '1' with '2508'
-2507 2508 0
c Var 'aux589' direct represents '1' with '2509'
2507 -2508 2509 0
-2509 2508 0
-2509 -2507 0
c Var 'aux589' direct represents '2' with '-2508'
2507 2509 -2508 0
c Encoding variable: aux590 with domain: int(0..2) (representing constraint ((x_00009_00003=7) + (x_00004_00003=7)))
c Both direct and order encoding.
c Var 'aux590' order represents '0' with '2510'
c Var 'aux590' direct represents '0' with '2510'
c Var 'aux590' order represents '1' with '2511'
-2510 2511 0
c Var 'aux590' direct represents '1' with '2512'
2510 -2511 2512 0
-2512 2511 0
-2512 -2510 0
c Var 'aux590' direct represents '2' with '-2511'
2510 2512 -2511 0
c Encoding variable: aux591 with domain: int(0..3) (representing constraint ((x_00001_00003=7) + aux590))
c Both direct and order encoding.
c Var 'aux591' order represents '0' with '2513'
c Var 'aux591' direct represents '0' with '2513'
c Var 'aux591' order represents '1' with '2514'
-2513 2514 0
c Var 'aux591' direct represents '1' with '2515'
2513 -2514 2515 0
-2515 2514 0
-2515 -2513 0
c Var 'aux591' order represents '2' with '2516'
-2514 2516 0
c Var 'aux591' direct represents '2' with '2517'
2514 -2516 2517 0
-2517 2516 0
-2517 -2514 0
c Var 'aux591' direct represents '3' with '-2516'
2513 2515 2517 -2516 0
c Encoding variable: aux592 with domain: int(0..4) (representing constraint (aux587 + aux589))
c Both direct and order encoding.
c Var 'aux592' order represents '0' with '2518'
c Var 'aux592' direct represents '0' with '2518'
c Var 'aux592' order represents '1' with '2519'
-2518 2519 0
c Var 'aux592' direct represents '1' with '2520'
2518 -2519 2520 0
-2520 2519 0
-2520 -2518 0
c Var 'aux592' order represents '2' with '2521'
-2519 2521 0
c Var 'aux592' direct represents '2' with '2522'
2519 -2521 2522 0
-2522 2521 0
-2522 -2519 0
c Var 'aux592' order represents '3' with '2523'
-2521 2523 0
c Var 'aux592' direct represents '3' with '2524'
2521 -2523 2524 0
-2524 2523 0
-2524 -2521 0
c Var 'aux592' direct represents '4' with '-2523'
2518 2520 2522 2524 -2523 0
c Encoding variable: aux593 with domain: int(0..2) (representing constraint ((x_00003_00003=8) + (x_00005_00003=8)))
c Both direct and order encoding.
c Var 'aux593' order represents '0' with '2525'
c Var 'aux593' direct represents '0' with '2525'
c Var 'aux593' order represents '1' with '2526'
-2525 2526 0
c Var 'aux593' direct represents '1' with '2527'
2525 -2526 2527 0
-2527 2526 0
-2527 -2525 0
c Var 'aux593' direct represents '2' with '-2526'
2525 2527 -2526 0
c Encoding variable: aux594 with domain: int(0..2) (representing constraint ((x_00007_00003=8) + (x_00008_00003=8)))
c Both direct and order encoding.
c Var 'aux594' order represents '0' with '2528'
c Var 'aux594' direct represents '0' with '2528'
c Var 'aux594' order represents '1' with '2529'
-2528 2529 0
c Var 'aux594' direct represents '1' with '2530'
2528 -2529 2530 0
-2530 2529 0
-2530 -2528 0
c Var 'aux594' direct represents '2' with '-2529'
2528 2530 -2529 0
c Encoding variable: aux595 with domain: int(0..2) (representing constraint ((x_00002_00003=8) + (x_00006_00003=8)))
c Both direct and order encoding.
c Var 'aux595' order represents '0' with '2531'
c Var 'aux595' direct represents '0' with '2531'
c Var 'aux595' order represents '1' with '2532'
-2531 2532 0
c Var 'aux595' direct represents '1' with '2533'
2531 -2532 2533 0
-2533 2532 0
-2533 -2531 0
c Var 'aux595' direct represents '2' with '-2532'
2531 2533 -2532 0
c Encoding variable: aux596 with domain: int(0..2) (representing constraint ((x_00009_00003=8) + (x_00004_00003=8)))
c Both direct and order encoding.
c Var 'aux596' order represents '0' with '2534'
c Var 'aux596' direct represents '0' with '2534'
c Var 'aux596' order represents '1' with '2535'
-2534 2535 0
c Var 'aux596' direct represents '1' with '2536'
2534 -2535 2536 0
-2536 2535 0
-2536 -2534 0
c Var 'aux596' direct represents '2' with '-2535'
2534 2536 -2535 0
c Encoding variable: aux597 with domain: int(0..3) (representing constraint ((x_00001_00003=8) + aux596))
c Both direct and order encoding.
c Var 'aux597' order represents '0' with '2537'
c Var 'aux597' direct represents '0' with '2537'
c Var 'aux597' order represents '1' with '2538'
-2537 2538 0
c Var 'aux597' direct represents '1' with '2539'
2537 -2538 2539 0
-2539 2538 0
-2539 -2537 0
c Var 'aux597' order represents '2' with '2540'
-2538 2540 0
c Var 'aux597' direct represents '2' with '2541'
2538 -2540 2541 0
-2541 2540 0
-2541 -2538 0
c Var 'aux597' direct represents '3' with '-2540'
2537 2539 2541 -2540 0
c Encoding variable: aux598 with domain: int(0..4) (representing constraint (aux593 + aux595))
c Both direct and order encoding.
c Var 'aux598' order represents '0' with '2542'
c Var 'aux598' direct represents '0' with '2542'
c Var 'aux598' order represents '1' with '2543'
-2542 2543 0
c Var 'aux598' direct represents '1' with '2544'
2542 -2543 2544 0
-2544 2543 0
-2544 -2542 0
c Var 'aux598' order represents '2' with '2545'
-2543 2545 0
c Var 'aux598' direct represents '2' with '2546'
2543 -2545 2546 0
-2546 2545 0
-2546 -2543 0
c Var 'aux598' order represents '3' with '2547'
-2545 2547 0
c Var 'aux598' direct represents '3' with '2548'
2545 -2547 2548 0
-2548 2547 0
-2548 -2545 0
c Var 'aux598' direct represents '4' with '-2547'
2542 2544 2546 2548 -2547 0
c Encoding variable: aux599 with domain: int(0..2) (representing constraint ((x_00003_00003=9) + (x_00005_00003=9)))
c Both direct and order encoding.
c Var 'aux599' order represents '0' with '2549'
c Var 'aux599' direct represents '0' with '2549'
c Var 'aux599' order represents '1' with '2550'
-2549 2550 0
c Var 'aux599' direct represents '1' with '2551'
2549 -2550 2551 0
-2551 2550 0
-2551 -2549 0
c Var 'aux599' direct represents '2' with '-2550'
2549 2551 -2550 0
c Encoding variable: aux600 with domain: int(0..2) (representing constraint ((x_00007_00003=9) + (x_00008_00003=9)))
c Both direct and order encoding.
c Var 'aux600' order represents '0' with '2552'
c Var 'aux600' direct represents '0' with '2552'
c Var 'aux600' order represents '1' with '2553'
-2552 2553 0
c Var 'aux600' direct represents '1' with '2554'
2552 -2553 2554 0
-2554 2553 0
-2554 -2552 0
c Var 'aux600' direct represents '2' with '-2553'
2552 2554 -2553 0
c Encoding variable: aux601 with domain: int(0..2) (representing constraint ((x_00002_00003=9) + (x_00006_00003=9)))
c Both direct and order encoding.
c Var 'aux601' order represents '0' with '2555'
c Var 'aux601' direct represents '0' with '2555'
c Var 'aux601' order represents '1' with '2556'
-2555 2556 0
c Var 'aux601' direct represents '1' with '2557'
2555 -2556 2557 0
-2557 2556 0
-2557 -2555 0
c Var 'aux601' direct represents '2' with '-2556'
2555 2557 -2556 0
c Encoding variable: aux602 with domain: int(0..2) (representing constraint ((x_00009_00003=9) + (x_00004_00003=9)))
c Both direct and order encoding.
c Var 'aux602' order represents '0' with '2558'
c Var 'aux602' direct represents '0' with '2558'
c Var 'aux602' order represents '1' with '2559'
-2558 2559 0
c Var 'aux602' direct represents '1' with '2560'
2558 -2559 2560 0
-2560 2559 0
-2560 -2558 0
c Var 'aux602' direct represents '2' with '-2559'
2558 2560 -2559 0
c Encoding variable: aux603 with domain: int(0..3) (representing constraint ((x_00001_00003=9) + aux602))
c Both direct and order encoding.
c Var 'aux603' order represents '0' with '2561'
c Var 'aux603' direct represents '0' with '2561'
c Var 'aux603' order represents '1' with '2562'
-2561 2562 0
c Var 'aux603' direct represents '1' with '2563'
2561 -2562 2563 0
-2563 2562 0
-2563 -2561 0
c Var 'aux603' order represents '2' with '2564'
-2562 2564 0
c Var 'aux603' direct represents '2' with '2565'
2562 -2564 2565 0
-2565 2564 0
-2565 -2562 0
c Var 'aux603' direct represents '3' with '-2564'
2561 2563 2565 -2564 0
c Encoding variable: aux604 with domain: int(0..4) (representing constraint (aux599 + aux601))
c Both direct and order encoding.
c Var 'aux604' order represents '0' with '2566'
c Var 'aux604' direct represents '0' with '2566'
c Var 'aux604' order represents '1' with '2567'
-2566 2567 0
c Var 'aux604' direct represents '1' with '2568'
2566 -2567 2568 0
-2568 2567 0
-2568 -2566 0
c Var 'aux604' order represents '2' with '2569'
-2567 2569 0
c Var 'aux604' direct represents '2' with '2570'
2567 -2569 2570 0
-2570 2569 0
-2570 -2567 0
c Var 'aux604' order represents '3' with '2571'
-2569 2571 0
c Var 'aux604' direct represents '3' with '2572'
2569 -2571 2572 0
-2572 2571 0
-2572 -2569 0
c Var 'aux604' direct represents '4' with '-2571'
2566 2568 2570 2572 -2571 0
c Encoding variable: aux605 with domain: int(0..2) (representing constraint ((x_00003_00004=1) + (x_00005_00004=1)))
c Both direct and order encoding.
c Var 'aux605' order represents '0' with '2573'
c Var 'aux605' direct represents '0' with '2573'
c Var 'aux605' order represents '1' with '2574'
-2573 2574 0
c Var 'aux605' direct represents '1' with '2575'
2573 -2574 2575 0
-2575 2574 0
-2575 -2573 0
c Var 'aux605' direct represents '2' with '-2574'
2573 2575 -2574 0
c Encoding variable: aux606 with domain: int(0..2) (representing constraint ((x_00007_00004=1) + (x_00008_00004=1)))
c Both direct and order encoding.
c Var 'aux606' order represents '0' with '2576'
c Var 'aux606' direct represents '0' with '2576'
c Var 'aux606' order represents '1' with '2577'
-2576 2577 0
c Var 'aux606' direct represents '1' with '2578'
2576 -2577 2578 0
-2578 2577 0
-2578 -2576 0
c Var 'aux606' direct represents '2' with '-2577'
2576 2578 -2577 0
c Encoding variable: aux607 with domain: int(0..2) (representing constraint ((x_00002_00004=1) + (x_00006_00004=1)))
c Both direct and order encoding.
c Var 'aux607' order represents '0' with '2579'
c Var 'aux607' direct represents '0' with '2579'
c Var 'aux607' order represents '1' with '2580'
-2579 2580 0
c Var 'aux607' direct represents '1' with '2581'
2579 -2580 2581 0
-2581 2580 0
-2581 -2579 0
c Var 'aux607' direct represents '2' with '-2580'
2579 2581 -2580 0
c Encoding variable: aux608 with domain: int(0..2) (representing constraint ((x_00009_00004=1) + (x_00004_00004=1)))
c Both direct and order encoding.
c Var 'aux608' order represents '0' with '2582'
c Var 'aux608' direct represents '0' with '2582'
c Var 'aux608' order represents '1' with '2583'
-2582 2583 0
c Var 'aux608' direct represents '1' with '2584'
2582 -2583 2584 0
-2584 2583 0
-2584 -2582 0
c Var 'aux608' direct represents '2' with '-2583'
2582 2584 -2583 0
c Encoding variable: aux609 with domain: int(0..3) (representing constraint ((x_00001_00004=1) + aux608))
c Both direct and order encoding.
c Var 'aux609' order represents '0' with '2585'
c Var 'aux609' direct represents '0' with '2585'
c Var 'aux609' order represents '1' with '2586'
-2585 2586 0
c Var 'aux609' direct represents '1' with '2587'
2585 -2586 2587 0
-2587 2586 0
-2587 -2585 0
c Var 'aux609' order represents '2' with '2588'
-2586 2588 0
c Var 'aux609' direct represents '2' with '2589'
2586 -2588 2589 0
-2589 2588 0
-2589 -2586 0
c Var 'aux609' direct represents '3' with '-2588'
2585 2587 2589 -2588 0
c Encoding variable: aux610 with domain: int(0..4) (representing constraint (aux605 + aux607))
c Both direct and order encoding.
c Var 'aux610' order represents '0' with '2590'
c Var 'aux610' direct represents '0' with '2590'
c Var 'aux610' order represents '1' with '2591'
-2590 2591 0
c Var 'aux610' direct represents '1' with '2592'
2590 -2591 2592 0
-2592 2591 0
-2592 -2590 0
c Var 'aux610' order represents '2' with '2593'
-2591 2593 0
c Var 'aux610' direct represents '2' with '2594'
2591 -2593 2594 0
-2594 2593 0
-2594 -2591 0
c Var 'aux610' order represents '3' with '2595'
-2593 2595 0
c Var 'aux610' direct represents '3' with '2596'
2593 -2595 2596 0
-2596 2595 0
-2596 -2593 0
c Var 'aux610' direct represents '4' with '-2595'
2590 2592 2594 2596 -2595 0
c Encoding variable: aux611 with domain: int(0..2) (representing constraint ((x_00003_00004=2) + (x_00005_00004=2)))
c Both direct and order encoding.
c Var 'aux611' order represents '0' with '2597'
c Var 'aux611' direct represents '0' with '2597'
c Var 'aux611' order represents '1' with '2598'
-2597 2598 0
c Var 'aux611' direct represents '1' with '2599'
2597 -2598 2599 0
-2599 2598 0
-2599 -2597 0
c Var 'aux611' direct represents '2' with '-2598'
2597 2599 -2598 0
c Encoding variable: aux612 with domain: int(0..2) (representing constraint ((x_00007_00004=2) + (x_00008_00004=2)))
c Both direct and order encoding.
c Var 'aux612' order represents '0' with '2600'
c Var 'aux612' direct represents '0' with '2600'
c Var 'aux612' order represents '1' with '2601'
-2600 2601 0
c Var 'aux612' direct represents '1' with '2602'
2600 -2601 2602 0
-2602 2601 0
-2602 -2600 0
c Var 'aux612' direct represents '2' with '-2601'
2600 2602 -2601 0
c Encoding variable: aux613 with domain: int(0..2) (representing constraint ((x_00002_00004=2) + (x_00006_00004=2)))
c Both direct and order encoding.
c Var 'aux613' order represents '0' with '2603'
c Var 'aux613' direct represents '0' with '2603'
c Var 'aux613' order represents '1' with '2604'
-2603 2604 0
c Var 'aux613' direct represents '1' with '2605'
2603 -2604 2605 0
-2605 2604 0
-2605 -2603 0
c Var 'aux613' direct represents '2' with '-2604'
2603 2605 -2604 0
c Encoding variable: aux614 with domain: int(0..2) (representing constraint ((x_00009_00004=2) + (x_00004_00004=2)))
c Both direct and order encoding.
c Var 'aux614' order represents '0' with '2606'
c Var 'aux614' direct represents '0' with '2606'
c Var 'aux614' order represents '1' with '2607'
-2606 2607 0
c Var 'aux614' direct represents '1' with '2608'
2606 -2607 2608 0
-2608 2607 0
-2608 -2606 0
c Var 'aux614' direct represents '2' with '-2607'
2606 2608 -2607 0
c Encoding variable: aux615 with domain: int(0..3) (representing constraint ((x_00001_00004=2) + aux614))
c Both direct and order encoding.
c Var 'aux615' order represents '0' with '2609'
c Var 'aux615' direct represents '0' with '2609'
c Var 'aux615' order represents '1' with '2610'
-2609 2610 0
c Var 'aux615' direct represents '1' with '2611'
2609 -2610 2611 0
-2611 2610 0
-2611 -2609 0
c Var 'aux615' order represents '2' with '2612'
-2610 2612 0
c Var 'aux615' direct represents '2' with '2613'
2610 -2612 2613 0
-2613 2612 0
-2613 -2610 0
c Var 'aux615' direct represents '3' with '-2612'
2609 2611 2613 -2612 0
c Encoding variable: aux616 with domain: int(0..4) (representing constraint (aux611 + aux613))
c Both direct and order encoding.
c Var 'aux616' order represents '0' with '2614'
c Var 'aux616' direct represents '0' with '2614'
c Var 'aux616' order represents '1' with '2615'
-2614 2615 0
c Var 'aux616' direct represents '1' with '2616'
2614 -2615 2616 0
-2616 2615 0
-2616 -2614 0
c Var 'aux616' order represents '2' with '2617'
-2615 2617 0
c Var 'aux616' direct represents '2' with '2618'
2615 -2617 2618 0
-2618 2617 0
-2618 -2615 0
c Var 'aux616' order represents '3' with '2619'
-2617 2619 0
c Var 'aux616' direct represents '3' with '2620'
2617 -2619 2620 0
-2620 2619 0
-2620 -2617 0
c Var 'aux616' direct represents '4' with '-2619'
2614 2616 2618 2620 -2619 0
c Encoding variable: aux617 with domain: int(0..2) (representing constraint ((x_00003_00004=3) + (x_00005_00004=3)))
c Both direct and order encoding.
c Var 'aux617' order represents '0' with '2621'
c Var 'aux617' direct represents '0' with '2621'
c Var 'aux617' order represents '1' with '2622'
-2621 2622 0
c Var 'aux617' direct represents '1' with '2623'
2621 -2622 2623 0
-2623 2622 0
-2623 -2621 0
c Var 'aux617' direct represents '2' with '-2622'
2621 2623 -2622 0
c Encoding variable: aux618 with domain: int(0..2) (representing constraint ((x_00007_00004=3) + (x_00008_00004=3)))
c Both direct and order encoding.
c Var 'aux618' order represents '0' with '2624'
c Var 'aux618' direct represents '0' with '2624'
c Var 'aux618' order represents '1' with '2625'
-2624 2625 0
c Var 'aux618' direct represents '1' with '2626'
2624 -2625 2626 0
-2626 2625 0
-2626 -2624 0
c Var 'aux618' direct represents '2' with '-2625'
2624 2626 -2625 0
c Encoding variable: aux619 with domain: int(0..2) (representing constraint ((x_00002_00004=3) + (x_00006_00004=3)))
c Both direct and order encoding.
c Var 'aux619' order represents '0' with '2627'
c Var 'aux619' direct represents '0' with '2627'
c Var 'aux619' order represents '1' with '2628'
-2627 2628 0
c Var 'aux619' direct represents '1' with '2629'
2627 -2628 2629 0
-2629 2628 0
-2629 -2627 0
c Var 'aux619' direct represents '2' with '-2628'
2627 2629 -2628 0
c Encoding variable: aux620 with domain: int(0..2) (representing constraint ((x_00009_00004=3) + (x_00004_00004=3)))
c Both direct and order encoding.
c Var 'aux620' order represents '0' with '2630'
c Var 'aux620' direct represents '0' with '2630'
c Var 'aux620' order represents '1' with '2631'
-2630 2631 0
c Var 'aux620' direct represents '1' with '2632'
2630 -2631 2632 0
-2632 2631 0
-2632 -2630 0
c Var 'aux620' direct represents '2' with '-2631'
2630 2632 -2631 0
c Encoding variable: aux621 with domain: int(0..3) (representing constraint ((x_00001_00004=3) + aux620))
c Both direct and order encoding.
c Var 'aux621' order represents '0' with '2633'
c Var 'aux621' direct represents '0' with '2633'
c Var 'aux621' order represents '1' with '2634'
-2633 2634 0
c Var 'aux621' direct represents '1' with '2635'
2633 -2634 2635 0
-2635 2634 0
-2635 -2633 0
c Var 'aux621' order represents '2' with '2636'
-2634 2636 0
c Var 'aux621' direct represents '2' with '2637'
2634 -2636 2637 0
-2637 2636 0
-2637 -2634 0
c Var 'aux621' direct represents '3' with '-2636'
2633 2635 2637 -2636 0
c Encoding variable: aux622 with domain: int(0..4) (representing constraint (aux617 + aux619))
c Both direct and order encoding.
c Var 'aux622' order represents '0' with '2638'
c Var 'aux622' direct represents '0' with '2638'
c Var 'aux622' order represents '1' with '2639'
-2638 2639 0
c Var 'aux622' direct represents '1' with '2640'
2638 -2639 2640 0
-2640 2639 0
-2640 -2638 0
c Var 'aux622' order represents '2' with '2641'
-2639 2641 0
c Var 'aux622' direct represents '2' with '2642'
2639 -2641 2642 0
-2642 2641 0
-2642 -2639 0
c Var 'aux622' order represents '3' with '2643'
-2641 2643 0
c Var 'aux622' direct represents '3' with '2644'
2641 -2643 2644 0
-2644 2643 0
-2644 -2641 0
c Var 'aux622' direct represents '4' with '-2643'
2638 2640 2642 2644 -2643 0
c Encoding variable: aux623 with domain: int(0..2) (representing constraint ((x_00003_00004=4) + (x_00005_00004=4)))
c Both direct and order encoding.
c Var 'aux623' order represents '0' with '2645'
c Var 'aux623' direct represents '0' with '2645'
c Var 'aux623' order represents '1' with '2646'
-2645 2646 0
c Var 'aux623' direct represents '1' with '2647'
2645 -2646 2647 0
-2647 2646 0
-2647 -2645 0
c Var 'aux623' direct represents '2' with '-2646'
2645 2647 -2646 0
c Encoding variable: aux624 with domain: int(0..2) (representing constraint ((x_00007_00004=4) + (x_00008_00004=4)))
c Both direct and order encoding.
c Var 'aux624' order represents '0' with '2648'
c Var 'aux624' direct represents '0' with '2648'
c Var 'aux624' order represents '1' with '2649'
-2648 2649 0
c Var 'aux624' direct represents '1' with '2650'
2648 -2649 2650 0
-2650 2649 0
-2650 -2648 0
c Var 'aux624' direct represents '2' with '-2649'
2648 2650 -2649 0
c Encoding variable: aux625 with domain: int(0..2) (representing constraint ((x_00002_00004=4) + (x_00006_00004=4)))
c Both direct and order encoding.
c Var 'aux625' order represents '0' with '2651'
c Var 'aux625' direct represents '0' with '2651'
c Var 'aux625' order represents '1' with '2652'
-2651 2652 0
c Var 'aux625' direct represents '1' with '2653'
2651 -2652 2653 0
-2653 2652 0
-2653 -2651 0
c Var 'aux625' direct represents '2' with '-2652'
2651 2653 -2652 0
c Encoding variable: aux626 with domain: int(0..2) (representing constraint ((x_00009_00004=4) + (x_00004_00004=4)))
c Both direct and order encoding.
c Var 'aux626' order represents '0' with '2654'
c Var 'aux626' direct represents '0' with '2654'
c Var 'aux626' order represents '1' with '2655'
-2654 2655 0
c Var 'aux626' direct represents '1' with '2656'
2654 -2655 2656 0
-2656 2655 0
-2656 -2654 0
c Var 'aux626' direct represents '2' with '-2655'
2654 2656 -2655 0
c Encoding variable: aux627 with domain: int(0..3) (representing constraint ((x_00001_00004=4) + aux626))
c Both direct and order encoding.
c Var 'aux627' order represents '0' with '2657'
c Var 'aux627' direct represents '0' with '2657'
c Var 'aux627' order represents '1' with '2658'
-2657 2658 0
c Var 'aux627' direct represents '1' with '2659'
2657 -2658 2659 0
-2659 2658 0
-2659 -2657 0
c Var 'aux627' order represents '2' with '2660'
-2658 2660 0
c Var 'aux627' direct represents '2' with '2661'
2658 -2660 2661 0
-2661 2660 0
-2661 -2658 0
c Var 'aux627' direct represents '3' with '-2660'
2657 2659 2661 -2660 0
c Encoding variable: aux628 with domain: int(0..4) (representing constraint (aux623 + aux625))
c Both direct and order encoding.
c Var 'aux628' order represents '0' with '2662'
c Var 'aux628' direct represents '0' with '2662'
c Var 'aux628' order represents '1' with '2663'
-2662 2663 0
c Var 'aux628' direct represents '1' with '2664'
2662 -2663 2664 0
-2664 2663 0
-2664 -2662 0
c Var 'aux628' order represents '2' with '2665'
-2663 2665 0
c Var 'aux628' direct represents '2' with '2666'
2663 -2665 2666 0
-2666 2665 0
-2666 -2663 0
c Var 'aux628' order represents '3' with '2667'
-2665 2667 0
c Var 'aux628' direct represents '3' with '2668'
2665 -2667 2668 0
-2668 2667 0
-2668 -2665 0
c Var 'aux628' direct represents '4' with '-2667'
2662 2664 2666 2668 -2667 0
c Encoding variable: aux629 with domain: int(0..2) (representing constraint ((x_00003_00004=5) + (x_00005_00004=5)))
c Both direct and order encoding.
c Var 'aux629' order represents '0' with '2669'
c Var 'aux629' direct represents '0' with '2669'
c Var 'aux629' order represents '1' with '2670'
-2669 2670 0
c Var 'aux629' direct represents '1' with '2671'
2669 -2670 2671 0
-2671 2670 0
-2671 -2669 0
c Var 'aux629' direct represents '2' with '-2670'
2669 2671 -2670 0
c Encoding variable: aux630 with domain: int(0..2) (representing constraint ((x_00007_00004=5) + (x_00008_00004=5)))
c Both direct and order encoding.
c Var 'aux630' order represents '0' with '2672'
c Var 'aux630' direct represents '0' with '2672'
c Var 'aux630' order represents '1' with '2673'
-2672 2673 0
c Var 'aux630' direct represents '1' with '2674'
2672 -2673 2674 0
-2674 2673 0
-2674 -2672 0
c Var 'aux630' direct represents '2' with '-2673'
2672 2674 -2673 0
c Encoding variable: aux631 with domain: int(0..2) (representing constraint ((x_00002_00004=5) + (x_00006_00004=5)))
c Both direct and order encoding.
c Var 'aux631' order represents '0' with '2675'
c Var 'aux631' direct represents '0' with '2675'
c Var 'aux631' order represents '1' with '2676'
-2675 2676 0
c Var 'aux631' direct represents '1' with '2677'
2675 -2676 2677 0
-2677 2676 0
-2677 -2675 0
c Var 'aux631' direct represents '2' with '-2676'
2675 2677 -2676 0
c Encoding variable: aux632 with domain: int(0..2) (representing constraint ((x_00009_00004=5) + (x_00004_00004=5)))
c Both direct and order encoding.
c Var 'aux632' order represents '0' with '2678'
c Var 'aux632' direct represents '0' with '2678'
c Var 'aux632' order represents '1' with '2679'
-2678 2679 0
c Var 'aux632' direct represents '1' with '2680'
2678 -2679 2680 0
-2680 2679 0
-2680 -2678 0
c Var 'aux632' direct represents '2' with '-2679'
2678 2680 -2679 0
c Encoding variable: aux633 with domain: int(0..3) (representing constraint ((x_00001_00004=5) + aux632))
c Both direct and order encoding.
c Var 'aux633' order represents '0' with '2681'
c Var 'aux633' direct represents '0' with '2681'
c Var 'aux633' order represents '1' with '2682'
-2681 2682 0
c Var 'aux633' direct represents '1' with '2683'
2681 -2682 2683 0
-2683 2682 0
-2683 -2681 0
c Var 'aux633' order represents '2' with '2684'
-2682 2684 0
c Var 'aux633' direct represents '2' with '2685'
2682 -2684 2685 0
-2685 2684 0
-2685 -2682 0
c Var 'aux633' direct represents '3' with '-2684'
2681 2683 2685 -2684 0
c Encoding variable: aux634 with domain: int(0..4) (representing constraint (aux629 + aux631))
c Both direct and order encoding.
c Var 'aux634' order represents '0' with '2686'
c Var 'aux634' direct represents '0' with '2686'
c Var 'aux634' order represents '1' with '2687'
-2686 2687 0
c Var 'aux634' direct represents '1' with '2688'
2686 -2687 2688 0
-2688 2687 0
-2688 -2686 0
c Var 'aux634' order represents '2' with '2689'
-2687 2689 0
c Var 'aux634' direct represents '2' with '2690'
2687 -2689 2690 0
-2690 2689 0
-2690 -2687 0
c Var 'aux634' order represents '3' with '2691'
-2689 2691 0
c Var 'aux634' direct represents '3' with '2692'
2689 -2691 2692 0
-2692 2691 0
-2692 -2689 0
c Var 'aux634' direct represents '4' with '-2691'
2686 2688 2690 2692 -2691 0
c Encoding variable: aux635 with domain: int(0..2) (representing constraint ((x_00003_00004=6) + (x_00005_00004=6)))
c Both direct and order encoding.
c Var 'aux635' order represents '0' with '2693'
c Var 'aux635' direct represents '0' with '2693'
c Var 'aux635' order represents '1' with '2694'
-2693 2694 0
c Var 'aux635' direct represents '1' with '2695'
2693 -2694 2695 0
-2695 2694 0
-2695 -2693 0
c Var 'aux635' direct represents '2' with '-2694'
2693 2695 -2694 0
c Encoding variable: aux636 with domain: int(0..2) (representing constraint ((x_00007_00004=6) + (x_00008_00004=6)))
c Both direct and order encoding.
c Var 'aux636' order represents '0' with '2696'
c Var 'aux636' direct represents '0' with '2696'
c Var 'aux636' order represents '1' with '2697'
-2696 2697 0
c Var 'aux636' direct represents '1' with '2698'
2696 -2697 2698 0
-2698 2697 0
-2698 -2696 0
c Var 'aux636' direct represents '2' with '-2697'
2696 2698 -2697 0
c Encoding variable: aux637 with domain: int(0..2) (representing constraint ((x_00002_00004=6) + (x_00006_00004=6)))
c Both direct and order encoding.
c Var 'aux637' order represents '0' with '2699'
c Var 'aux637' direct represents '0' with '2699'
c Var 'aux637' order represents '1' with '2700'
-2699 2700 0
c Var 'aux637' direct represents '1' with '2701'
2699 -2700 2701 0
-2701 2700 0
-2701 -2699 0
c Var 'aux637' direct represents '2' with '-2700'
2699 2701 -2700 0
c Encoding variable: aux638 with domain: int(0..2) (representing constraint ((x_00009_00004=6) + (x_00004_00004=6)))
c Both direct and order encoding.
c Var 'aux638' order represents '0' with '2702'
c Var 'aux638' direct represents '0' with '2702'
c Var 'aux638' order represents '1' with '2703'
-2702 2703 0
c Var 'aux638' direct represents '1' with '2704'
2702 -2703 2704 0
-2704 2703 0
-2704 -2702 0
c Var 'aux638' direct represents '2' with '-2703'
2702 2704 -2703 0
c Encoding variable: aux639 with domain: int(0..3) (representing constraint ((x_00001_00004=6) + aux638))
c Both direct and order encoding.
c Var 'aux639' order represents '0' with '2705'
c Var 'aux639' direct represents '0' with '2705'
c Var 'aux639' order represents '1' with '2706'
-2705 2706 0
c Var 'aux639' direct represents '1' with '2707'
2705 -2706 2707 0
-2707 2706 0
-2707 -2705 0
c Var 'aux639' order represents '2' with '2708'
-2706 2708 0
c Var 'aux639' direct represents '2' with '2709'
2706 -2708 2709 0
-2709 2708 0
-2709 -2706 0
c Var 'aux639' direct represents '3' with '-2708'
2705 2707 2709 -2708 0
c Encoding variable: aux640 with domain: int(0..4) (representing constraint (aux635 + aux637))
c Both direct and order encoding.
c Var 'aux640' order represents '0' with '2710'
c Var 'aux640' direct represents '0' with '2710'
c Var 'aux640' order represents '1' with '2711'
-2710 2711 0
c Var 'aux640' direct represents '1' with '2712'
2710 -2711 2712 0
-2712 2711 0
-2712 -2710 0
c Var 'aux640' order represents '2' with '2713'
-2711 2713 0
c Var 'aux640' direct represents '2' with '2714'
2711 -2713 2714 0
-2714 2713 0
-2714 -2711 0
c Var 'aux640' order represents '3' with '2715'
-2713 2715 0
c Var 'aux640' direct represents '3' with '2716'
2713 -2715 2716 0
-2716 2715 0
-2716 -2713 0
c Var 'aux640' direct represents '4' with '-2715'
2710 2712 2714 2716 -2715 0
c Encoding variable: aux641 with domain: int(0..2) (representing constraint ((x_00003_00004=7) + (x_00005_00004=7)))
c Both direct and order encoding.
c Var 'aux641' order represents '0' with '2717'
c Var 'aux641' direct represents '0' with '2717'
c Var 'aux641' order represents '1' with '2718'
-2717 2718 0
c Var 'aux641' direct represents '1' with '2719'
2717 -2718 2719 0
-2719 2718 0
-2719 -2717 0
c Var 'aux641' direct represents '2' with '-2718'
2717 2719 -2718 0
c Encoding variable: aux642 with domain: int(0..2) (representing constraint ((x_00007_00004=7) + (x_00008_00004=7)))
c Both direct and order encoding.
c Var 'aux642' order represents '0' with '2720'
c Var 'aux642' direct represents '0' with '2720'
c Var 'aux642' order represents '1' with '2721'
-2720 2721 0
c Var 'aux642' direct represents '1' with '2722'
2720 -2721 2722 0
-2722 2721 0
-2722 -2720 0
c Var 'aux642' direct represents '2' with '-2721'
2720 2722 -2721 0
c Encoding variable: aux643 with domain: int(0..2) (representing constraint ((x_00002_00004=7) + (x_00006_00004=7)))
c Both direct and order encoding.
c Var 'aux643' order represents '0' with '2723'
c Var 'aux643' direct represents '0' with '2723'
c Var 'aux643' order represents '1' with '2724'
-2723 2724 0
c Var 'aux643' direct represents '1' with '2725'
2723 -2724 2725 0
-2725 2724 0
-2725 -2723 0
c Var 'aux643' direct represents '2' with '-2724'
2723 2725 -2724 0
c Encoding variable: aux644 with domain: int(0..2) (representing constraint ((x_00009_00004=7) + (x_00004_00004=7)))
c Both direct and order encoding.
c Var 'aux644' order represents '0' with '2726'
c Var 'aux644' direct represents '0' with '2726'
c Var 'aux644' order represents '1' with '2727'
-2726 2727 0
c Var 'aux644' direct represents '1' with '2728'
2726 -2727 2728 0
-2728 2727 0
-2728 -2726 0
c Var 'aux644' direct represents '2' with '-2727'
2726 2728 -2727 0
c Encoding variable: aux645 with domain: int(0..3) (representing constraint ((x_00001_00004=7) + aux644))
c Both direct and order encoding.
c Var 'aux645' order represents '0' with '2729'
c Var 'aux645' direct represents '0' with '2729'
c Var 'aux645' order represents '1' with '2730'
-2729 2730 0
c Var 'aux645' direct represents '1' with '2731'
2729 -2730 2731 0
-2731 2730 0
-2731 -2729 0
c Var 'aux645' order represents '2' with '2732'
-2730 2732 0
c Var 'aux645' direct represents '2' with '2733'
2730 -2732 2733 0
-2733 2732 0
-2733 -2730 0
c Var 'aux645' direct represents '3' with '-2732'
2729 2731 2733 -2732 0
c Encoding variable: aux646 with domain: int(0..4) (representing constraint (aux641 + aux643))
c Both direct and order encoding.
c Var 'aux646' order represents '0' with '2734'
c Var 'aux646' direct represents '0' with '2734'
c Var 'aux646' order represents '1' with '2735'
-2734 2735 0
c Var 'aux646' direct represents '1' with '2736'
2734 -2735 2736 0
-2736 2735 0
-2736 -2734 0
c Var 'aux646' order represents '2' with '2737'
-2735 2737 0
c Var 'aux646' direct represents '2' with '2738'
2735 -2737 2738 0
-2738 2737 0
-2738 -2735 0
c Var 'aux646' order represents '3' with '2739'
-2737 2739 0
c Var 'aux646' direct represents '3' with '2740'
2737 -2739 2740 0
-2740 2739 0
-2740 -2737 0
c Var 'aux646' direct represents '4' with '-2739'
2734 2736 2738 2740 -2739 0
c Encoding variable: aux647 with domain: int(0..2) (representing constraint ((x_00003_00004=8) + (x_00005_00004=8)))
c Both direct and order encoding.
c Var 'aux647' order represents '0' with '2741'
c Var 'aux647' direct represents '0' with '2741'
c Var 'aux647' order represents '1' with '2742'
-2741 2742 0
c Var 'aux647' direct represents '1' with '2743'
2741 -2742 2743 0
-2743 2742 0
-2743 -2741 0
c Var 'aux647' direct represents '2' with '-2742'
2741 2743 -2742 0
c Encoding variable: aux648 with domain: int(0..2) (representing constraint ((x_00007_00004=8) + (x_00008_00004=8)))
c Both direct and order encoding.
c Var 'aux648' order represents '0' with '2744'
c Var 'aux648' direct represents '0' with '2744'
c Var 'aux648' order represents '1' with '2745'
-2744 2745 0
c Var 'aux648' direct represents '1' with '2746'
2744 -2745 2746 0
-2746 2745 0
-2746 -2744 0
c Var 'aux648' direct represents '2' with '-2745'
2744 2746 -2745 0
c Encoding variable: aux649 with domain: int(0..2) (representing constraint ((x_00002_00004=8) + (x_00006_00004=8)))
c Both direct and order encoding.
c Var 'aux649' order represents '0' with '2747'
c Var 'aux649' direct represents '0' with '2747'
c Var 'aux649' order represents '1' with '2748'
-2747 2748 0
c Var 'aux649' direct represents '1' with '2749'
2747 -2748 2749 0
-2749 2748 0
-2749 -2747 0
c Var 'aux649' direct represents '2' with '-2748'
2747 2749 -2748 0
c Encoding variable: aux650 with domain: int(0..2) (representing constraint ((x_00009_00004=8) + (x_00004_00004=8)))
c Both direct and order encoding.
c Var 'aux650' order represents '0' with '2750'
c Var 'aux650' direct represents '0' with '2750'
c Var 'aux650' order represents '1' with '2751'
-2750 2751 0
c Var 'aux650' direct represents '1' with '2752'
2750 -2751 2752 0
-2752 2751 0
-2752 -2750 0
c Var 'aux650' direct represents '2' with '-2751'
2750 2752 -2751 0
c Encoding variable: aux651 with domain: int(0..3) (representing constraint ((x_00001_00004=8) + aux650))
c Both direct and order encoding.
c Var 'aux651' order represents '0' with '2753'
c Var 'aux651' direct represents '0' with '2753'
c Var 'aux651' order represents '1' with '2754'
-2753 2754 0
c Var 'aux651' direct represents '1' with '2755'
2753 -2754 2755 0
-2755 2754 0
-2755 -2753 0
c Var 'aux651' order represents '2' with '2756'
-2754 2756 0
c Var 'aux651' direct represents '2' with '2757'
2754 -2756 2757 0
-2757 2756 0
-2757 -2754 0
c Var 'aux651' direct represents '3' with '-2756'
2753 2755 2757 -2756 0
c Encoding variable: aux652 with domain: int(0..4) (representing constraint (aux647 + aux649))
c Both direct and order encoding.
c Var 'aux652' order represents '0' with '2758'
c Var 'aux652' direct represents '0' with '2758'
c Var 'aux652' order represents '1' with '2759'
-2758 2759 0
c Var 'aux652' direct represents '1' with '2760'
2758 -2759 2760 0
-2760 2759 0
-2760 -2758 0
c Var 'aux652' order represents '2' with '2761'
-2759 2761 0
c Var 'aux652' direct represents '2' with '2762'
2759 -2761 2762 0
-2762 2761 0
-2762 -2759 0
c Var 'aux652' order represents '3' with '2763'
-2761 2763 0
c Var 'aux652' direct represents '3' with '2764'
2761 -2763 2764 0
-2764 2763 0
-2764 -2761 0
c Var 'aux652' direct represents '4' with '-2763'
2758 2760 2762 2764 -2763 0
c Encoding variable: aux653 with domain: int(0..2) (representing constraint ((x_00003_00004=9) + (x_00005_00004=9)))
c Both direct and order encoding.
c Var 'aux653' order represents '0' with '2765'
c Var 'aux653' direct represents '0' with '2765'
c Var 'aux653' order represents '1' with '2766'
-2765 2766 0
c Var 'aux653' direct represents '1' with '2767'
2765 -2766 2767 0
-2767 2766 0
-2767 -2765 0
c Var 'aux653' direct represents '2' with '-2766'
2765 2767 -2766 0
c Encoding variable: aux654 with domain: int(0..2) (representing constraint ((x_00007_00004=9) + (x_00008_00004=9)))
c Both direct and order encoding.
c Var 'aux654' order represents '0' with '2768'
c Var 'aux654' direct represents '0' with '2768'
c Var 'aux654' order represents '1' with '2769'
-2768 2769 0
c Var 'aux654' direct represents '1' with '2770'
2768 -2769 2770 0
-2770 2769 0
-2770 -2768 0
c Var 'aux654' direct represents '2' with '-2769'
2768 2770 -2769 0
c Encoding variable: aux655 with domain: int(0..2) (representing constraint ((x_00002_00004=9) + (x_00006_00004=9)))
c Both direct and order encoding.
c Var 'aux655' order represents '0' with '2771'
c Var 'aux655' direct represents '0' with '2771'
c Var 'aux655' order represents '1' with '2772'
-2771 2772 0
c Var 'aux655' direct represents '1' with '2773'
2771 -2772 2773 0
-2773 2772 0
-2773 -2771 0
c Var 'aux655' direct represents '2' with '-2772'
2771 2773 -2772 0
c Encoding variable: aux656 with domain: int(0..2) (representing constraint ((x_00009_00004=9) + (x_00004_00004=9)))
c Both direct and order encoding.
c Var 'aux656' order represents '0' with '2774'
c Var 'aux656' direct represents '0' with '2774'
c Var 'aux656' order represents '1' with '2775'
-2774 2775 0
c Var 'aux656' direct represents '1' with '2776'
2774 -2775 2776 0
-2776 2775 0
-2776 -2774 0
c Var 'aux656' direct represents '2' with '-2775'
2774 2776 -2775 0
c Encoding variable: aux657 with domain: int(0..3) (representing constraint ((x_00001_00004=9) + aux656))
c Both direct and order encoding.
c Var 'aux657' order represents '0' with '2777'
c Var 'aux657' direct represents '0' with '2777'
c Var 'aux657' order represents '1' with '2778'
-2777 2778 0
c Var 'aux657' direct represents '1' with '2779'
2777 -2778 2779 0
-2779 2778 0
-2779 -2777 0
c Var 'aux657' order represents '2' with '2780'
-2778 2780 0
c Var 'aux657' direct represents '2' with '2781'
2778 -2780 2781 0
-2781 2780 0
-2781 -2778 0
c Var 'aux657' direct represents '3' with '-2780'
2777 2779 2781 -2780 0
c Encoding variable: aux658 with domain: int(0..4) (representing constraint (aux653 + aux655))
c Both direct and order encoding.
c Var 'aux658' order represents '0' with '2782'
c Var 'aux658' direct represents '0' with '2782'
c Var 'aux658' order represents '1' with '2783'
-2782 2783 0
c Var 'aux658' direct represents '1' with '2784'
2782 -2783 2784 0
-2784 2783 0
-2784 -2782 0
c Var 'aux658' order represents '2' with '2785'
-2783 2785 0
c Var 'aux658' direct represents '2' with '2786'
2783 -2785 2786 0
-2786 2785 0
-2786 -2783 0
c Var 'aux658' order represents '3' with '2787'
-2785 2787 0
c Var 'aux658' direct represents '3' with '2788'
2785 -2787 2788 0
-2788 2787 0
-2788 -2785 0
c Var 'aux658' direct represents '4' with '-2787'
2782 2784 2786 2788 -2787 0
c Encoding variable: aux659 with domain: int(0..2) (representing constraint ((x_00003_00005=1) + (x_00005_00005=1)))
c Both direct and order encoding.
c Var 'aux659' order represents '0' with '2789'
c Var 'aux659' direct represents '0' with '2789'
c Var 'aux659' order represents '1' with '2790'
-2789 2790 0
c Var 'aux659' direct represents '1' with '2791'
2789 -2790 2791 0
-2791 2790 0
-2791 -2789 0
c Var 'aux659' direct represents '2' with '-2790'
2789 2791 -2790 0
c Encoding variable: aux660 with domain: int(0..2) (representing constraint ((x_00007_00005=1) + (x_00008_00005=1)))
c Both direct and order encoding.
c Var 'aux660' order represents '0' with '2792'
c Var 'aux660' direct represents '0' with '2792'
c Var 'aux660' order represents '1' with '2793'
-2792 2793 0
c Var 'aux660' direct represents '1' with '2794'
2792 -2793 2794 0
-2794 2793 0
-2794 -2792 0
c Var 'aux660' direct represents '2' with '-2793'
2792 2794 -2793 0
c Encoding variable: aux661 with domain: int(0..2) (representing constraint ((x_00002_00005=1) + (x_00006_00005=1)))
c Both direct and order encoding.
c Var 'aux661' order represents '0' with '2795'
c Var 'aux661' direct represents '0' with '2795'
c Var 'aux661' order represents '1' with '2796'
-2795 2796 0
c Var 'aux661' direct represents '1' with '2797'
2795 -2796 2797 0
-2797 2796 0
-2797 -2795 0
c Var 'aux661' direct represents '2' with '-2796'
2795 2797 -2796 0
c Encoding variable: aux662 with domain: int(0..2) (representing constraint ((x_00009_00005=1) + (x_00004_00005=1)))
c Both direct and order encoding.
c Var 'aux662' order represents '0' with '2798'
c Var 'aux662' direct represents '0' with '2798'
c Var 'aux662' order represents '1' with '2799'
-2798 2799 0
c Var 'aux662' direct represents '1' with '2800'
2798 -2799 2800 0
-2800 2799 0
-2800 -2798 0
c Var 'aux662' direct represents '2' with '-2799'
2798 2800 -2799 0
c Encoding variable: aux663 with domain: int(0..3) (representing constraint ((x_00001_00005=1) + aux662))
c Both direct and order encoding.
c Var 'aux663' order represents '0' with '2801'
c Var 'aux663' direct represents '0' with '2801'
c Var 'aux663' order represents '1' with '2802'
-2801 2802 0
c Var 'aux663' direct represents '1' with '2803'
2801 -2802 2803 0
-2803 2802 0
-2803 -2801 0
c Var 'aux663' order represents '2' with '2804'
-2802 2804 0
c Var 'aux663' direct represents '2' with '2805'
2802 -2804 2805 0
-2805 2804 0
-2805 -2802 0
c Var 'aux663' direct represents '3' with '-2804'
2801 2803 2805 -2804 0
c Encoding variable: aux664 with domain: int(0..4) (representing constraint (aux659 + aux661))
c Both direct and order encoding.
c Var 'aux664' order represents '0' with '2806'
c Var 'aux664' direct represents '0' with '2806'
c Var 'aux664' order represents '1' with '2807'
-2806 2807 0
c Var 'aux664' direct represents '1' with '2808'
2806 -2807 2808 0
-2808 2807 0
-2808 -2806 0
c Var 'aux664' order represents '2' with '2809'
-2807 2809 0
c Var 'aux664' direct represents '2' with '2810'
2807 -2809 2810 0
-2810 2809 0
-2810 -2807 0
c Var 'aux664' order represents '3' with '2811'
-2809 2811 0
c Var 'aux664' direct represents '3' with '2812'
2809 -2811 2812 0
-2812 2811 0
-2812 -2809 0
c Var 'aux664' direct represents '4' with '-2811'
2806 2808 2810 2812 -2811 0
c Encoding variable: aux665 with domain: int(0..2) (representing constraint ((x_00003_00005=2) + (x_00005_00005=2)))
c Both direct and order encoding.
c Var 'aux665' order represents '0' with '2813'
c Var 'aux665' direct represents '0' with '2813'
c Var 'aux665' order represents '1' with '2814'
-2813 2814 0
c Var 'aux665' direct represents '1' with '2815'
2813 -2814 2815 0
-2815 2814 0
-2815 -2813 0
c Var 'aux665' direct represents '2' with '-2814'
2813 2815 -2814 0
c Encoding variable: aux666 with domain: int(0..2) (representing constraint ((x_00007_00005=2) + (x_00008_00005=2)))
c Both direct and order encoding.
c Var 'aux666' order represents '0' with '2816'
c Var 'aux666' direct represents '0' with '2816'
c Var 'aux666' order represents '1' with '2817'
-2816 2817 0
c Var 'aux666' direct represents '1' with '2818'
2816 -2817 2818 0
-2818 2817 0
-2818 -2816 0
c Var 'aux666' direct represents '2' with '-2817'
2816 2818 -2817 0
c Encoding variable: aux667 with domain: int(0..2) (representing constraint ((x_00002_00005=2) + (x_00006_00005=2)))
c Both direct and order encoding.
c Var 'aux667' order represents '0' with '2819'
c Var 'aux667' direct represents '0' with '2819'
c Var 'aux667' order represents '1' with '2820'
-2819 2820 0
c Var 'aux667' direct represents '1' with '2821'
2819 -2820 2821 0
-2821 2820 0
-2821 -2819 0
c Var 'aux667' direct represents '2' with '-2820'
2819 2821 -2820 0
c Encoding variable: aux668 with domain: int(0..2) (representing constraint ((x_00009_00005=2) + (x_00004_00005=2)))
c Both direct and order encoding.
c Var 'aux668' order represents '0' with '2822'
c Var 'aux668' direct represents '0' with '2822'
c Var 'aux668' order represents '1' with '2823'
-2822 2823 0
c Var 'aux668' direct represents '1' with '2824'
2822 -2823 2824 0
-2824 2823 0
-2824 -2822 0
c Var 'aux668' direct represents '2' with '-2823'
2822 2824 -2823 0
c Encoding variable: aux669 with domain: int(0..3) (representing constraint ((x_00001_00005=2) + aux668))
c Both direct and order encoding.
c Var 'aux669' order represents '0' with '2825'
c Var 'aux669' direct represents '0' with '2825'
c Var 'aux669' order represents '1' with '2826'
-2825 2826 0
c Var 'aux669' direct represents '1' with '2827'
2825 -2826 2827 0
-2827 2826 0
-2827 -2825 0
c Var 'aux669' order represents '2' with '2828'
-2826 2828 0
c Var 'aux669' direct represents '2' with '2829'
2826 -2828 2829 0
-2829 2828 0
-2829 -2826 0
c Var 'aux669' direct represents '3' with '-2828'
2825 2827 2829 -2828 0
c Encoding variable: aux670 with domain: int(0..4) (representing constraint (aux665 + aux667))
c Both direct and order encoding.
c Var 'aux670' order represents '0' with '2830'
c Var 'aux670' direct represents '0' with '2830'
c Var 'aux670' order represents '1' with '2831'
-2830 2831 0
c Var 'aux670' direct represents '1' with '2832'
2830 -2831 2832 0
-2832 2831 0
-2832 -2830 0
c Var 'aux670' order represents '2' with '2833'
-2831 2833 0
c Var 'aux670' direct represents '2' with '2834'
2831 -2833 2834 0
-2834 2833 0
-2834 -2831 0
c Var 'aux670' order represents '3' with '2835'
-2833 2835 0
c Var 'aux670' direct represents '3' with '2836'
2833 -2835 2836 0
-2836 2835 0
-2836 -2833 0
c Var 'aux670' direct represents '4' with '-2835'
2830 2832 2834 2836 -2835 0
c Encoding variable: aux671 with domain: int(0..2) (representing constraint ((x_00003_00005=3) + (x_00005_00005=3)))
c Both direct and order encoding.
c Var 'aux671' order represents '0' with '2837'
c Var 'aux671' direct represents '0' with '2837'
c Var 'aux671' order represents '1' with '2838'
-2837 2838 0
c Var 'aux671' direct represents '1' with '2839'
2837 -2838 2839 0
-2839 2838 0
-2839 -2837 0
c Var 'aux671' direct represents '2' with '-2838'
2837 2839 -2838 0
c Encoding variable: aux672 with domain: int(0..2) (representing constraint ((x_00007_00005=3) + (x_00008_00005=3)))
c Both direct and order encoding.
c Var 'aux672' order represents '0' with '2840'
c Var 'aux672' direct represents '0' with '2840'
c Var 'aux672' order represents '1' with '2841'
-2840 2841 0
c Var 'aux672' direct represents '1' with '2842'
2840 -2841 2842 0
-2842 2841 0
-2842 -2840 0
c Var 'aux672' direct represents '2' with '-2841'
2840 2842 -2841 0
c Encoding variable: aux673 with domain: int(0..2) (representing constraint ((x_00002_00005=3) + (x_00006_00005=3)))
c Both direct and order encoding.
c Var 'aux673' order represents '0' with '2843'
c Var 'aux673' direct represents '0' with '2843'
c Var 'aux673' order represents '1' with '2844'
-2843 2844 0
c Var 'aux673' direct represents '1' with '2845'
2843 -2844 2845 0
-2845 2844 0
-2845 -2843 0
c Var 'aux673' direct represents '2' with '-2844'
2843 2845 -2844 0
c Encoding variable: aux674 with domain: int(0..2) (representing constraint ((x_00009_00005=3) + (x_00004_00005=3)))
c Both direct and order encoding.
c Var 'aux674' order represents '0' with '2846'
c Var 'aux674' direct represents '0' with '2846'
c Var 'aux674' order represents '1' with '2847'
-2846 2847 0
c Var 'aux674' direct represents '1' with '2848'
2846 -2847 2848 0
-2848 2847 0
-2848 -2846 0
c Var 'aux674' direct represents '2' with '-2847'
2846 2848 -2847 0
c Encoding variable: aux675 with domain: int(0..3) (representing constraint ((x_00001_00005=3) + aux674))
c Both direct and order encoding.
c Var 'aux675' order represents '0' with '2849'
c Var 'aux675' direct represents '0' with '2849'
c Var 'aux675' order represents '1' with '2850'
-2849 2850 0
c Var 'aux675' direct represents '1' with '2851'
2849 -2850 2851 0
-2851 2850 0
-2851 -2849 0
c Var 'aux675' order represents '2' with '2852'
-2850 2852 0
c Var 'aux675' direct represents '2' with '2853'
2850 -2852 2853 0
-2853 2852 0
-2853 -2850 0
c Var 'aux675' direct represents '3' with '-2852'
2849 2851 2853 -2852 0
c Encoding variable: aux676 with domain: int(0..4) (representing constraint (aux671 + aux673))
c Both direct and order encoding.
c Var 'aux676' order represents '0' with '2854'
c Var 'aux676' direct represents '0' with '2854'
c Var 'aux676' order represents '1' with '2855'
-2854 2855 0
c Var 'aux676' direct represents '1' with '2856'
2854 -2855 2856 0
-2856 2855 0
-2856 -2854 0
c Var 'aux676' order represents '2' with '2857'
-2855 2857 0
c Var 'aux676' direct represents '2' with '2858'
2855 -2857 2858 0
-2858 2857 0
-2858 -2855 0
c Var 'aux676' order represents '3' with '2859'
-2857 2859 0
c Var 'aux676' direct represents '3' with '2860'
2857 -2859 2860 0
-2860 2859 0
-2860 -2857 0
c Var 'aux676' direct represents '4' with '-2859'
2854 2856 2858 2860 -2859 0
c Encoding variable: aux677 with domain: int(0..2) (representing constraint ((x_00003_00005=4) + (x_00005_00005=4)))
c Both direct and order encoding.
c Var 'aux677' order represents '0' with '2861'
c Var 'aux677' direct represents '0' with '2861'
c Var 'aux677' order represents '1' with '2862'
-2861 2862 0
c Var 'aux677' direct represents '1' with '2863'
2861 -2862 2863 0
-2863 2862 0
-2863 -2861 0
c Var 'aux677' direct represents '2' with '-2862'
2861 2863 -2862 0
c Encoding variable: aux678 with domain: int(0..2) (representing constraint ((x_00007_00005=4) + (x_00008_00005=4)))
c Both direct and order encoding.
c Var 'aux678' order represents '0' with '2864'
c Var 'aux678' direct represents '0' with '2864'
c Var 'aux678' order represents '1' with '2865'
-2864 2865 0
c Var 'aux678' direct represents '1' with '2866'
2864 -2865 2866 0
-2866 2865 0
-2866 -2864 0
c Var 'aux678' direct represents '2' with '-2865'
2864 2866 -2865 0
c Encoding variable: aux679 with domain: int(0..2) (representing constraint ((x_00002_00005=4) + (x_00006_00005=4)))
c Both direct and order encoding.
c Var 'aux679' order represents '0' with '2867'
c Var 'aux679' direct represents '0' with '2867'
c Var 'aux679' order represents '1' with '2868'
-2867 2868 0
c Var 'aux679' direct represents '1' with '2869'
2867 -2868 2869 0
-2869 2868 0
-2869 -2867 0
c Var 'aux679' direct represents '2' with '-2868'
2867 2869 -2868 0
c Encoding variable: aux680 with domain: int(0..2) (representing constraint ((x_00009_00005=4) + (x_00004_00005=4)))
c Both direct and order encoding.
c Var 'aux680' order represents '0' with '2870'
c Var 'aux680' direct represents '0' with '2870'
c Var 'aux680' order represents '1' with '2871'
-2870 2871 0
c Var 'aux680' direct represents '1' with '2872'
2870 -2871 2872 0
-2872 2871 0
-2872 -2870 0
c Var 'aux680' direct represents '2' with '-2871'
2870 2872 -2871 0
c Encoding variable: aux681 with domain: int(0..3) (representing constraint ((x_00001_00005=4) + aux680))
c Both direct and order encoding.
c Var 'aux681' order represents '0' with '2873'
c Var 'aux681' direct represents '0' with '2873'
c Var 'aux681' order represents '1' with '2874'
-2873 2874 0
c Var 'aux681' direct represents '1' with '2875'
2873 -2874 2875 0
-2875 2874 0
-2875 -2873 0
c Var 'aux681' order represents '2' with '2876'
-2874 2876 0
c Var 'aux681' direct represents '2' with '2877'
2874 -2876 2877 0
-2877 2876 0
-2877 -2874 0
c Var 'aux681' direct represents '3' with '-2876'
2873 2875 2877 -2876 0
c Encoding variable: aux682 with domain: int(0..4) (representing constraint (aux677 + aux679))
c Both direct and order encoding.
c Var 'aux682' order represents '0' with '2878'
c Var 'aux682' direct represents '0' with '2878'
c Var 'aux682' order represents '1' with '2879'
-2878 2879 0
c Var 'aux682' direct represents '1' with '2880'
2878 -2879 2880 0
-2880 2879 0
-2880 -2878 0
c Var 'aux682' order represents '2' with '2881'
-2879 2881 0
c Var 'aux682' direct represents '2' with '2882'
2879 -2881 2882 0
-2882 2881 0
-2882 -2879 0
c Var 'aux682' order represents '3' with '2883'
-2881 2883 0
c Var 'aux682' direct represents '3' with '2884'
2881 -2883 2884 0
-2884 2883 0
-2884 -2881 0
c Var 'aux682' direct represents '4' with '-2883'
2878 2880 2882 2884 -2883 0
c Encoding variable: aux683 with domain: int(0..2) (representing constraint ((x_00003_00005=5) + (x_00005_00005=5)))
c Both direct and order encoding.
c Var 'aux683' order represents '0' with '2885'
c Var 'aux683' direct represents '0' with '2885'
c Var 'aux683' order represents '1' with '2886'
-2885 2886 0
c Var 'aux683' direct represents '1' with '2887'
2885 -2886 2887 0
-2887 2886 0
-2887 -2885 0
c Var 'aux683' direct represents '2' with '-2886'
2885 2887 -2886 0
c Encoding variable: aux684 with domain: int(0..2) (representing constraint ((x_00007_00005=5) + (x_00008_00005=5)))
c Both direct and order encoding.
c Var 'aux684' order represents '0' with '2888'
c Var 'aux684' direct represents '0' with '2888'
c Var 'aux684' order represents '1' with '2889'
-2888 2889 0
c Var 'aux684' direct represents '1' with '2890'
2888 -2889 2890 0
-2890 2889 0
-2890 -2888 0
c Var 'aux684' direct represents '2' with '-2889'
2888 2890 -2889 0
c Encoding variable: aux685 with domain: int(0..2) (representing constraint ((x_00002_00005=5) + (x_00006_00005=5)))
c Both direct and order encoding.
c Var 'aux685' order represents '0' with '2891'
c Var 'aux685' direct represents '0' with '2891'
c Var 'aux685' order represents '1' with '2892'
-2891 2892 0
c Var 'aux685' direct represents '1' with '2893'
2891 -2892 2893 0
-2893 2892 0
-2893 -2891 0
c Var 'aux685' direct represents '2' with '-2892'
2891 2893 -2892 0
c Encoding variable: aux686 with domain: int(0..2) (representing constraint ((x_00009_00005=5) + (x_00004_00005=5)))
c Both direct and order encoding.
c Var 'aux686' order represents '0' with '2894'
c Var 'aux686' direct represents '0' with '2894'
c Var 'aux686' order represents '1' with '2895'
-2894 2895 0
c Var 'aux686' direct represents '1' with '2896'
2894 -2895 2896 0
-2896 2895 0
-2896 -2894 0
c Var 'aux686' direct represents '2' with '-2895'
2894 2896 -2895 0
c Encoding variable: aux687 with domain: int(0..3) (representing constraint ((x_00001_00005=5) + aux686))
c Both direct and order encoding.
c Var 'aux687' order represents '0' with '2897'
c Var 'aux687' direct represents '0' with '2897'
c Var 'aux687' order represents '1' with '2898'
-2897 2898 0
c Var 'aux687' direct represents '1' with '2899'
2897 -2898 2899 0
-2899 2898 0
-2899 -2897 0
c Var 'aux687' order represents '2' with '2900'
-2898 2900 0
c Var 'aux687' direct represents '2' with '2901'
2898 -2900 2901 0
-2901 2900 0
-2901 -2898 0
c Var 'aux687' direct represents '3' with '-2900'
2897 2899 2901 -2900 0
c Encoding variable: aux688 with domain: int(0..4) (representing constraint (aux683 + aux685))
c Both direct and order encoding.
c Var 'aux688' order represents '0' with '2902'
c Var 'aux688' direct represents '0' with '2902'
c Var 'aux688' order represents '1' with '2903'
-2902 2903 0
c Var 'aux688' direct represents '1' with '2904'
2902 -2903 2904 0
-2904 2903 0
-2904 -2902 0
c Var 'aux688' order represents '2' with '2905'
-2903 2905 0
c Var 'aux688' direct represents '2' with '2906'
2903 -2905 2906 0
-2906 2905 0
-2906 -2903 0
c Var 'aux688' order represents '3' with '2907'
-2905 2907 0
c Var 'aux688' direct represents '3' with '2908'
2905 -2907 2908 0
-2908 2907 0
-2908 -2905 0
c Var 'aux688' direct represents '4' with '-2907'
2902 2904 2906 2908 -2907 0
c Encoding variable: aux689 with domain: int(0..2) (representing constraint ((x_00003_00005=6) + (x_00005_00005=6)))
c Both direct and order encoding.
c Var 'aux689' order represents '0' with '2909'
c Var 'aux689' direct represents '0' with '2909'
c Var 'aux689' order represents '1' with '2910'
-2909 2910 0
c Var 'aux689' direct represents '1' with '2911'
2909 -2910 2911 0
-2911 2910 0
-2911 -2909 0
c Var 'aux689' direct represents '2' with '-2910'
2909 2911 -2910 0
c Encoding variable: aux690 with domain: int(0..2) (representing constraint ((x_00007_00005=6) + (x_00008_00005=6)))
c Both direct and order encoding.
c Var 'aux690' order represents '0' with '2912'
c Var 'aux690' direct represents '0' with '2912'
c Var 'aux690' order represents '1' with '2913'
-2912 2913 0
c Var 'aux690' direct represents '1' with '2914'
2912 -2913 2914 0
-2914 2913 0
-2914 -2912 0
c Var 'aux690' direct represents '2' with '-2913'
2912 2914 -2913 0
c Encoding variable: aux691 with domain: int(0..2) (representing constraint ((x_00002_00005=6) + (x_00006_00005=6)))
c Both direct and order encoding.
c Var 'aux691' order represents '0' with '2915'
c Var 'aux691' direct represents '0' with '2915'
c Var 'aux691' order represents '1' with '2916'
-2915 2916 0
c Var 'aux691' direct represents '1' with '2917'
2915 -2916 2917 0
-2917 2916 0
-2917 -2915 0
c Var 'aux691' direct represents '2' with '-2916'
2915 2917 -2916 0
c Encoding variable: aux692 with domain: int(0..2) (representing constraint ((x_00009_00005=6) + (x_00004_00005=6)))
c Both direct and order encoding.
c Var 'aux692' order represents '0' with '2918'
c Var 'aux692' direct represents '0' with '2918'
c Var 'aux692' order represents '1' with '2919'
-2918 2919 0
c Var 'aux692' direct represents '1' with '2920'
2918 -2919 2920 0
-2920 2919 0
-2920 -2918 0
c Var 'aux692' direct represents '2' with '-2919'
2918 2920 -2919 0
c Encoding variable: aux693 with domain: int(0..3) (representing constraint ((x_00001_00005=6) + aux692))
c Both direct and order encoding.
c Var 'aux693' order represents '0' with '2921'
c Var 'aux693' direct represents '0' with '2921'
c Var 'aux693' order represents '1' with '2922'
-2921 2922 0
c Var 'aux693' direct represents '1' with '2923'
2921 -2922 2923 0
-2923 2922 0
-2923 -2921 0
c Var 'aux693' order represents '2' with '2924'
-2922 2924 0
c Var 'aux693' direct represents '2' with '2925'
2922 -2924 2925 0
-2925 2924 0
-2925 -2922 0
c Var 'aux693' direct represents '3' with '-2924'
2921 2923 2925 -2924 0
c Encoding variable: aux694 with domain: int(0..4) (representing constraint (aux689 + aux691))
c Both direct and order encoding.
c Var 'aux694' order represents '0' with '2926'
c Var 'aux694' direct represents '0' with '2926'
c Var 'aux694' order represents '1' with '2927'
-2926 2927 0
c Var 'aux694' direct represents '1' with '2928'
2926 -2927 2928 0
-2928 2927 0
-2928 -2926 0
c Var 'aux694' order represents '2' with '2929'
-2927 2929 0
c Var 'aux694' direct represents '2' with '2930'
2927 -2929 2930 0
-2930 2929 0
-2930 -2927 0
c Var 'aux694' order represents '3' with '2931'
-2929 2931 0
c Var 'aux694' direct represents '3' with '2932'
2929 -2931 2932 0
-2932 2931 0
-2932 -2929 0
c Var 'aux694' direct represents '4' with '-2931'
2926 2928 2930 2932 -2931 0
c Encoding variable: aux695 with domain: int(0..2) (representing constraint ((x_00003_00005=7) + (x_00005_00005=7)))
c Both direct and order encoding.
c Var 'aux695' order represents '0' with '2933'
c Var 'aux695' direct represents '0' with '2933'
c Var 'aux695' order represents '1' with '2934'
-2933 2934 0
c Var 'aux695' direct represents '1' with '2935'
2933 -2934 2935 0
-2935 2934 0
-2935 -2933 0
c Var 'aux695' direct represents '2' with '-2934'
2933 2935 -2934 0
c Encoding variable: aux696 with domain: int(0..2) (representing constraint ((x_00007_00005=7) + (x_00008_00005=7)))
c Both direct and order encoding.
c Var 'aux696' order represents '0' with '2936'
c Var 'aux696' direct represents '0' with '2936'
c Var 'aux696' order represents '1' with '2937'
-2936 2937 0
c Var 'aux696' direct represents '1' with '2938'
2936 -2937 2938 0
-2938 2937 0
-2938 -2936 0
c Var 'aux696' direct represents '2' with '-2937'
2936 2938 -2937 0
c Encoding variable: aux697 with domain: int(0..2) (representing constraint ((x_00002_00005=7) + (x_00006_00005=7)))
c Both direct and order encoding.
c Var 'aux697' order represents '0' with '2939'
c Var 'aux697' direct represents '0' with '2939'
c Var 'aux697' order represents '1' with '2940'
-2939 2940 0
c Var 'aux697' direct represents '1' with '2941'
2939 -2940 2941 0
-2941 2940 0
-2941 -2939 0
c Var 'aux697' direct represents '2' with '-2940'
2939 2941 -2940 0
c Encoding variable: aux698 with domain: int(0..2) (representing constraint ((x_00009_00005=7) + (x_00004_00005=7)))
c Both direct and order encoding.
c Var 'aux698' order represents '0' with '2942'
c Var 'aux698' direct represents '0' with '2942'
c Var 'aux698' order represents '1' with '2943'
-2942 2943 0
c Var 'aux698' direct represents '1' with '2944'
2942 -2943 2944 0
-2944 2943 0
-2944 -2942 0
c Var 'aux698' direct represents '2' with '-2943'
2942 2944 -2943 0
c Encoding variable: aux699 with domain: int(0..3) (representing constraint ((x_00001_00005=7) + aux698))
c Both direct and order encoding.
c Var 'aux699' order represents '0' with '2945'
c Var 'aux699' direct represents '0' with '2945'
c Var 'aux699' order represents '1' with '2946'
-2945 2946 0
c Var 'aux699' direct represents '1' with '2947'
2945 -2946 2947 0
-2947 2946 0
-2947 -2945 0
c Var 'aux699' order represents '2' with '2948'
-2946 2948 0
c Var 'aux699' direct represents '2' with '2949'
2946 -2948 2949 0
-2949 2948 0
-2949 -2946 0
c Var 'aux699' direct represents '3' with '-2948'
2945 2947 2949 -2948 0
c Encoding variable: aux700 with domain: int(0..4) (representing constraint (aux695 + aux697))
c Both direct and order encoding.
c Var 'aux700' order represents '0' with '2950'
c Var 'aux700' direct represents '0' with '2950'
c Var 'aux700' order represents '1' with '2951'
-2950 2951 0
c Var 'aux700' direct represents '1' with '2952'
2950 -2951 2952 0
-2952 2951 0
-2952 -2950 0
c Var 'aux700' order represents '2' with '2953'
-2951 2953 0
c Var 'aux700' direct represents '2' with '2954'
2951 -2953 2954 0
-2954 2953 0
-2954 -2951 0
c Var 'aux700' order represents '3' with '2955'
-2953 2955 0
c Var 'aux700' direct represents '3' with '2956'
2953 -2955 2956 0
-2956 2955 0
-2956 -2953 0
c Var 'aux700' direct represents '4' with '-2955'
2950 2952 2954 2956 -2955 0
c Encoding variable: aux701 with domain: int(0..2) (representing constraint ((x_00003_00005=8) + (x_00005_00005=8)))
c Both direct and order encoding.
c Var 'aux701' order represents '0' with '2957'
c Var 'aux701' direct represents '0' with '2957'
c Var 'aux701' order represents '1' with '2958'
-2957 2958 0
c Var 'aux701' direct represents '1' with '2959'
2957 -2958 2959 0
-2959 2958 0
-2959 -2957 0
c Var 'aux701' direct represents '2' with '-2958'
2957 2959 -2958 0
c Encoding variable: aux702 with domain: int(0..2) (representing constraint ((x_00007_00005=8) + (x_00008_00005=8)))
c Both direct and order encoding.
c Var 'aux702' order represents '0' with '2960'
c Var 'aux702' direct represents '0' with '2960'
c Var 'aux702' order represents '1' with '2961'
-2960 2961 0
c Var 'aux702' direct represents '1' with '2962'
2960 -2961 2962 0
-2962 2961 0
-2962 -2960 0
c Var 'aux702' direct represents '2' with '-2961'
2960 2962 -2961 0
c Encoding variable: aux703 with domain: int(0..2) (representing constraint ((x_00002_00005=8) + (x_00006_00005=8)))
c Both direct and order encoding.
c Var 'aux703' order represents '0' with '2963'
c Var 'aux703' direct represents '0' with '2963'
c Var 'aux703' order represents '1' with '2964'
-2963 2964 0
c Var 'aux703' direct represents '1' with '2965'
2963 -2964 2965 0
-2965 2964 0
-2965 -2963 0
c Var 'aux703' direct represents '2' with '-2964'
2963 2965 -2964 0
c Encoding variable: aux704 with domain: int(0..2) (representing constraint ((x_00009_00005=8) + (x_00004_00005=8)))
c Both direct and order encoding.
c Var 'aux704' order represents '0' with '2966'
c Var 'aux704' direct represents '0' with '2966'
c Var 'aux704' order represents '1' with '2967'
-2966 2967 0
c Var 'aux704' direct represents '1' with '2968'
2966 -2967 2968 0
-2968 2967 0
-2968 -2966 0
c Var 'aux704' direct represents '2' with '-2967'
2966 2968 -2967 0
c Encoding variable: aux705 with domain: int(0..3) (representing constraint ((x_00001_00005=8) + aux704))
c Both direct and order encoding.
c Var 'aux705' order represents '0' with '2969'
c Var 'aux705' direct represents '0' with '2969'
c Var 'aux705' order represents '1' with '2970'
-2969 2970 0
c Var 'aux705' direct represents '1' with '2971'
2969 -2970 2971 0
-2971 2970 0
-2971 -2969 0
c Var 'aux705' order represents '2' with '2972'
-2970 2972 0
c Var 'aux705' direct represents '2' with '2973'
2970 -2972 2973 0
-2973 2972 0
-2973 -2970 0
c Var 'aux705' direct represents '3' with '-2972'
2969 2971 2973 -2972 0
c Encoding variable: aux706 with domain: int(0..4) (representing constraint (aux701 + aux703))
c Both direct and order encoding.
c Var 'aux706' order represents '0' with '2974'
c Var 'aux706' direct represents '0' with '2974'
c Var 'aux706' order represents '1' with '2975'
-2974 2975 0
c Var 'aux706' direct represents '1' with '2976'
2974 -2975 2976 0
-2976 2975 0
-2976 -2974 0
c Var 'aux706' order represents '2' with '2977'
-2975 2977 0
c Var 'aux706' direct represents '2' with '2978'
2975 -2977 2978 0
-2978 2977 0
-2978 -2975 0
c Var 'aux706' order represents '3' with '2979'
-2977 2979 0
c Var 'aux706' direct represents '3' with '2980'
2977 -2979 2980 0
-2980 2979 0
-2980 -2977 0
c Var 'aux706' direct represents '4' with '-2979'
2974 2976 2978 2980 -2979 0
c Encoding variable: aux707 with domain: int(0..2) (representing constraint ((x_00003_00005=9) + (x_00005_00005=9)))
c Both direct and order encoding.
c Var 'aux707' order represents '0' with '2981'
c Var 'aux707' direct represents '0' with '2981'
c Var 'aux707' order represents '1' with '2982'
-2981 2982 0
c Var 'aux707' direct represents '1' with '2983'
2981 -2982 2983 0
-2983 2982 0
-2983 -2981 0
c Var 'aux707' direct represents '2' with '-2982'
2981 2983 -2982 0
c Encoding variable: aux708 with domain: int(0..2) (representing constraint ((x_00007_00005=9) + (x_00008_00005=9)))
c Both direct and order encoding.
c Var 'aux708' order represents '0' with '2984'
c Var 'aux708' direct represents '0' with '2984'
c Var 'aux708' order represents '1' with '2985'
-2984 2985 0
c Var 'aux708' direct represents '1' with '2986'
2984 -2985 2986 0
-2986 2985 0
-2986 -2984 0
c Var 'aux708' direct represents '2' with '-2985'
2984 2986 -2985 0
c Encoding variable: aux709 with domain: int(0..2) (representing constraint ((x_00002_00005=9) + (x_00006_00005=9)))
c Both direct and order encoding.
c Var 'aux709' order represents '0' with '2987'
c Var 'aux709' direct represents '0' with '2987'
c Var 'aux709' order represents '1' with '2988'
-2987 2988 0
c Var 'aux709' direct represents '1' with '2989'
2987 -2988 2989 0
-2989 2988 0
-2989 -2987 0
c Var 'aux709' direct represents '2' with '-2988'
2987 2989 -2988 0
c Encoding variable: aux710 with domain: int(0..2) (representing constraint ((x_00009_00005=9) + (x_00004_00005=9)))
c Both direct and order encoding.
c Var 'aux710' order represents '0' with '2990'
c Var 'aux710' direct represents '0' with '2990'
c Var 'aux710' order represents '1' with '2991'
-2990 2991 0
c Var 'aux710' direct represents '1' with '2992'
2990 -2991 2992 0
-2992 2991 0
-2992 -2990 0
c Var 'aux710' direct represents '2' with '-2991'
2990 2992 -2991 0
c Encoding variable: aux711 with domain: int(0..3) (representing constraint ((x_00001_00005=9) + aux710))
c Both direct and order encoding.
c Var 'aux711' order represents '0' with '2993'
c Var 'aux711' direct represents '0' with '2993'
c Var 'aux711' order represents '1' with '2994'
-2993 2994 0
c Var 'aux711' direct represents '1' with '2995'
2993 -2994 2995 0
-2995 2994 0
-2995 -2993 0
c Var 'aux711' order represents '2' with '2996'
-2994 2996 0
c Var 'aux711' direct represents '2' with '2997'
2994 -2996 2997 0
-2997 2996 0
-2997 -2994 0
c Var 'aux711' direct represents '3' with '-2996'
2993 2995 2997 -2996 0
c Encoding variable: aux712 with domain: int(0..4) (representing constraint (aux707 + aux709))
c Both direct and order encoding.
c Var 'aux712' order represents '0' with '2998'
c Var 'aux712' direct represents '0' with '2998'
c Var 'aux712' order represents '1' with '2999'
-2998 2999 0
c Var 'aux712' direct represents '1' with '3000'
2998 -2999 3000 0
-3000 2999 0
-3000 -2998 0
c Var 'aux712' order represents '2' with '3001'
-2999 3001 0
c Var 'aux712' direct represents '2' with '3002'
2999 -3001 3002 0
-3002 3001 0
-3002 -2999 0
c Var 'aux712' order represents '3' with '3003'
-3001 3003 0
c Var 'aux712' direct represents '3' with '3004'
3001 -3003 3004 0
-3004 3003 0
-3004 -3001 0
c Var 'aux712' direct represents '4' with '-3003'
2998 3000 3002 3004 -3003 0
c Encoding variable: aux713 with domain: int(0..2) (representing constraint ((x_00003_00006=1) + (x_00005_00006=1)))
c Both direct and order encoding.
c Var 'aux713' order represents '0' with '3005'
c Var 'aux713' direct represents '0' with '3005'
c Var 'aux713' order represents '1' with '3006'
-3005 3006 0
c Var 'aux713' direct represents '1' with '3007'
3005 -3006 3007 0
-3007 3006 0
-3007 -3005 0
c Var 'aux713' direct represents '2' with '-3006'
3005 3007 -3006 0
c Encoding variable: aux714 with domain: int(0..2) (representing constraint ((x_00007_00006=1) + (x_00008_00006=1)))
c Both direct and order encoding.
c Var 'aux714' order represents '0' with '3008'
c Var 'aux714' direct represents '0' with '3008'
c Var 'aux714' order represents '1' with '3009'
-3008 3009 0
c Var 'aux714' direct represents '1' with '3010'
3008 -3009 3010 0
-3010 3009 0
-3010 -3008 0
c Var 'aux714' direct represents '2' with '-3009'
3008 3010 -3009 0
c Encoding variable: aux715 with domain: int(0..2) (representing constraint ((x_00002_00006=1) + (x_00006_00006=1)))
c Both direct and order encoding.
c Var 'aux715' order represents '0' with '3011'
c Var 'aux715' direct represents '0' with '3011'
c Var 'aux715' order represents '1' with '3012'
-3011 3012 0
c Var 'aux715' direct represents '1' with '3013'
3011 -3012 3013 0
-3013 3012 0
-3013 -3011 0
c Var 'aux715' direct represents '2' with '-3012'
3011 3013 -3012 0
c Encoding variable: aux716 with domain: int(0..2) (representing constraint ((x_00009_00006=1) + (x_00004_00006=1)))
c Both direct and order encoding.
c Var 'aux716' order represents '0' with '3014'
c Var 'aux716' direct represents '0' with '3014'
c Var 'aux716' order represents '1' with '3015'
-3014 3015 0
c Var 'aux716' direct represents '1' with '3016'
3014 -3015 3016 0
-3016 3015 0
-3016 -3014 0
c Var 'aux716' direct represents '2' with '-3015'
3014 3016 -3015 0
c Encoding variable: aux717 with domain: int(0..3) (representing constraint ((x_00001_00006=1) + aux716))
c Both direct and order encoding.
c Var 'aux717' order represents '0' with '3017'
c Var 'aux717' direct represents '0' with '3017'
c Var 'aux717' order represents '1' with '3018'
-3017 3018 0
c Var 'aux717' direct represents '1' with '3019'
3017 -3018 3019 0
-3019 3018 0
-3019 -3017 0
c Var 'aux717' order represents '2' with '3020'
-3018 3020 0
c Var 'aux717' direct represents '2' with '3021'
3018 -3020 3021 0
-3021 3020 0
-3021 -3018 0
c Var 'aux717' direct represents '3' with '-3020'
3017 3019 3021 -3020 0
c Encoding variable: aux718 with domain: int(0..4) (representing constraint (aux713 + aux715))
c Both direct and order encoding.
c Var 'aux718' order represents '0' with '3022'
c Var 'aux718' direct represents '0' with '3022'
c Var 'aux718' order represents '1' with '3023'
-3022 3023 0
c Var 'aux718' direct represents '1' with '3024'
3022 -3023 3024 0
-3024 3023 0
-3024 -3022 0
c Var 'aux718' order represents '2' with '3025'
-3023 3025 0
c Var 'aux718' direct represents '2' with '3026'
3023 -3025 3026 0
-3026 3025 0
-3026 -3023 0
c Var 'aux718' order represents '3' with '3027'
-3025 3027 0
c Var 'aux718' direct represents '3' with '3028'
3025 -3027 3028 0
-3028 3027 0
-3028 -3025 0
c Var 'aux718' direct represents '4' with '-3027'
3022 3024 3026 3028 -3027 0
c Encoding variable: aux719 with domain: int(0..2) (representing constraint ((x_00003_00006=2) + (x_00005_00006=2)))
c Both direct and order encoding.
c Var 'aux719' order represents '0' with '3029'
c Var 'aux719' direct represents '0' with '3029'
c Var 'aux719' order represents '1' with '3030'
-3029 3030 0
c Var 'aux719' direct represents '1' with '3031'
3029 -3030 3031 0
-3031 3030 0
-3031 -3029 0
c Var 'aux719' direct represents '2' with '-3030'
3029 3031 -3030 0
c Encoding variable: aux720 with domain: int(0..2) (representing constraint ((x_00007_00006=2) + (x_00008_00006=2)))
c Both direct and order encoding.
c Var 'aux720' order represents '0' with '3032'
c Var 'aux720' direct represents '0' with '3032'
c Var 'aux720' order represents '1' with '3033'
-3032 3033 0
c Var 'aux720' direct represents '1' with '3034'
3032 -3033 3034 0
-3034 3033 0
-3034 -3032 0
c Var 'aux720' direct represents '2' with '-3033'
3032 3034 -3033 0
c Encoding variable: aux721 with domain: int(0..2) (representing constraint ((x_00002_00006=2) + (x_00006_00006=2)))
c Both direct and order encoding.
c Var 'aux721' order represents '0' with '3035'
c Var 'aux721' direct represents '0' with '3035'
c Var 'aux721' order represents '1' with '3036'
-3035 3036 0
c Var 'aux721' direct represents '1' with '3037'
3035 -3036 3037 0
-3037 3036 0
-3037 -3035 0
c Var 'aux721' direct represents '2' with '-3036'
3035 3037 -3036 0
c Encoding variable: aux722 with domain: int(0..2) (representing constraint ((x_00009_00006=2) + (x_00004_00006=2)))
c Both direct and order encoding.
c Var 'aux722' order represents '0' with '3038'
c Var 'aux722' direct represents '0' with '3038'
c Var 'aux722' order represents '1' with '3039'
-3038 3039 0
c Var 'aux722' direct represents '1' with '3040'
3038 -3039 3040 0
-3040 3039 0
-3040 -3038 0
c Var 'aux722' direct represents '2' with '-3039'
3038 3040 -3039 0
c Encoding variable: aux723 with domain: int(0..3) (representing constraint ((x_00001_00006=2) + aux722))
c Both direct and order encoding.
c Var 'aux723' order represents '0' with '3041'
c Var 'aux723' direct represents '0' with '3041'
c Var 'aux723' order represents '1' with '3042'
-3041 3042 0
c Var 'aux723' direct represents '1' with '3043'
3041 -3042 3043 0
-3043 3042 0
-3043 -3041 0
c Var 'aux723' order represents '2' with '3044'
-3042 3044 0
c Var 'aux723' direct represents '2' with '3045'
3042 -3044 3045 0
-3045 3044 0
-3045 -3042 0
c Var 'aux723' direct represents '3' with '-3044'
3041 3043 3045 -3044 0
c Encoding variable: aux724 with domain: int(0..4) (representing constraint (aux719 + aux721))
c Both direct and order encoding.
c Var 'aux724' order represents '0' with '3046'
c Var 'aux724' direct represents '0' with '3046'
c Var 'aux724' order represents '1' with '3047'
-3046 3047 0
c Var 'aux724' direct represents '1' with '3048'
3046 -3047 3048 0
-3048 3047 0
-3048 -3046 0
c Var 'aux724' order represents '2' with '3049'
-3047 3049 0
c Var 'aux724' direct represents '2' with '3050'
3047 -3049 3050 0
-3050 3049 0
-3050 -3047 0
c Var 'aux724' order represents '3' with '3051'
-3049 3051 0
c Var 'aux724' direct represents '3' with '3052'
3049 -3051 3052 0
-3052 3051 0
-3052 -3049 0
c Var 'aux724' direct represents '4' with '-3051'
3046 3048 3050 3052 -3051 0
c Encoding variable: aux725 with domain: int(0..2) (representing constraint ((x_00003_00006=3) + (x_00005_00006=3)))
c Both direct and order encoding.
c Var 'aux725' order represents '0' with '3053'
c Var 'aux725' direct represents '0' with '3053'
c Var 'aux725' order represents '1' with '3054'
-3053 3054 0
c Var 'aux725' direct represents '1' with '3055'
3053 -3054 3055 0
-3055 3054 0
-3055 -3053 0
c Var 'aux725' direct represents '2' with '-3054'
3053 3055 -3054 0
c Encoding variable: aux726 with domain: int(0..2) (representing constraint ((x_00007_00006=3) + (x_00008_00006=3)))
c Both direct and order encoding.
c Var 'aux726' order represents '0' with '3056'
c Var 'aux726' direct represents '0' with '3056'
c Var 'aux726' order represents '1' with '3057'
-3056 3057 0
c Var 'aux726' direct represents '1' with '3058'
3056 -3057 3058 0
-3058 3057 0
-3058 -3056 0
c Var 'aux726' direct represents '2' with '-3057'
3056 3058 -3057 0
c Encoding variable: aux727 with domain: int(0..2) (representing constraint ((x_00002_00006=3) + (x_00006_00006=3)))
c Both direct and order encoding.
c Var 'aux727' order represents '0' with '3059'
c Var 'aux727' direct represents '0' with '3059'
c Var 'aux727' order represents '1' with '3060'
-3059 3060 0
c Var 'aux727' direct represents '1' with '3061'
3059 -3060 3061 0
-3061 3060 0
-3061 -3059 0
c Var 'aux727' direct represents '2' with '-3060'
3059 3061 -3060 0
c Encoding variable: aux728 with domain: int(0..2) (representing constraint ((x_00009_00006=3) + (x_00004_00006=3)))
c Both direct and order encoding.
c Var 'aux728' order represents '0' with '3062'
c Var 'aux728' direct represents '0' with '3062'
c Var 'aux728' order represents '1' with '3063'
-3062 3063 0
c Var 'aux728' direct represents '1' with '3064'
3062 -3063 3064 0
-3064 3063 0
-3064 -3062 0
c Var 'aux728' direct represents '2' with '-3063'
3062 3064 -3063 0
c Encoding variable: aux729 with domain: int(0..3) (representing constraint ((x_00001_00006=3) + aux728))
c Both direct and order encoding.
c Var 'aux729' order represents '0' with '3065'
c Var 'aux729' direct represents '0' with '3065'
c Var 'aux729' order represents '1' with '3066'
-3065 3066 0
c Var 'aux729' direct represents '1' with '3067'
3065 -3066 3067 0
-3067 3066 0
-3067 -3065 0
c Var 'aux729' order represents '2' with '3068'
-3066 3068 0
c Var 'aux729' direct represents '2' with '3069'
3066 -3068 3069 0
-3069 3068 0
-3069 -3066 0
c Var 'aux729' direct represents '3' with '-3068'
3065 3067 3069 -3068 0
c Encoding variable: aux730 with domain: int(0..4) (representing constraint (aux725 + aux727))
c Both direct and order encoding.
c Var 'aux730' order represents '0' with '3070'
c Var 'aux730' direct represents '0' with '3070'
c Var 'aux730' order represents '1' with '3071'
-3070 3071 0
c Var 'aux730' direct represents '1' with '3072'
3070 -3071 3072 0
-3072 3071 0
-3072 -3070 0
c Var 'aux730' order represents '2' with '3073'
-3071 3073 0
c Var 'aux730' direct represents '2' with '3074'
3071 -3073 3074 0
-3074 3073 0
-3074 -3071 0
c Var 'aux730' order represents '3' with '3075'
-3073 3075 0
c Var 'aux730' direct represents '3' with '3076'
3073 -3075 3076 0
-3076 3075 0
-3076 -3073 0
c Var 'aux730' direct represents '4' with '-3075'
3070 3072 3074 3076 -3075 0
c Encoding variable: aux731 with domain: int(0..2) (representing constraint ((x_00003_00006=4) + (x_00005_00006=4)))
c Both direct and order encoding.
c Var 'aux731' order represents '0' with '3077'
c Var 'aux731' direct represents '0' with '3077'
c Var 'aux731' order represents '1' with '3078'
-3077 3078 0
c Var 'aux731' direct represents '1' with '3079'
3077 -3078 3079 0
-3079 3078 0
-3079 -3077 0
c Var 'aux731' direct represents '2' with '-3078'
3077 3079 -3078 0
c Encoding variable: aux732 with domain: int(0..2) (representing constraint ((x_00007_00006=4) + (x_00008_00006=4)))
c Both direct and order encoding.
c Var 'aux732' order represents '0' with '3080'
c Var 'aux732' direct represents '0' with '3080'
c Var 'aux732' order represents '1' with '3081'
-3080 3081 0
c Var 'aux732' direct represents '1' with '3082'
3080 -3081 3082 0
-3082 3081 0
-3082 -3080 0
c Var 'aux732' direct represents '2' with '-3081'
3080 3082 -3081 0
c Encoding variable: aux733 with domain: int(0..2) (representing constraint ((x_00002_00006=4) + (x_00006_00006=4)))
c Both direct and order encoding.
c Var 'aux733' order represents '0' with '3083'
c Var 'aux733' direct represents '0' with '3083'
c Var 'aux733' order represents '1' with '3084'
-3083 3084 0
c Var 'aux733' direct represents '1' with '3085'
3083 -3084 3085 0
-3085 3084 0
-3085 -3083 0
c Var 'aux733' direct represents '2' with '-3084'
3083 3085 -3084 0
c Encoding variable: aux734 with domain: int(0..2) (representing constraint ((x_00009_00006=4) + (x_00004_00006=4)))
c Both direct and order encoding.
c Var 'aux734' order represents '0' with '3086'
c Var 'aux734' direct represents '0' with '3086'
c Var 'aux734' order represents '1' with '3087'
-3086 3087 0
c Var 'aux734' direct represents '1' with '3088'
3086 -3087 3088 0
-3088 3087 0
-3088 -3086 0
c Var 'aux734' direct represents '2' with '-3087'
3086 3088 -3087 0
c Encoding variable: aux735 with domain: int(0..3) (representing constraint ((x_00001_00006=4) + aux734))
c Both direct and order encoding.
c Var 'aux735' order represents '0' with '3089'
c Var 'aux735' direct represents '0' with '3089'
c Var 'aux735' order represents '1' with '3090'
-3089 3090 0
c Var 'aux735' direct represents '1' with '3091'
3089 -3090 3091 0
-3091 3090 0
-3091 -3089 0
c Var 'aux735' order represents '2' with '3092'
-3090 3092 0
c Var 'aux735' direct represents '2' with '3093'
3090 -3092 3093 0
-3093 3092 0
-3093 -3090 0
c Var 'aux735' direct represents '3' with '-3092'
3089 3091 3093 -3092 0
c Encoding variable: aux736 with domain: int(0..4) (representing constraint (aux731 + aux733))
c Both direct and order encoding.
c Var 'aux736' order represents '0' with '3094'
c Var 'aux736' direct represents '0' with '3094'
c Var 'aux736' order represents '1' with '3095'
-3094 3095 0
c Var 'aux736' direct represents '1' with '3096'
3094 -3095 3096 0
-3096 3095 0
-3096 -3094 0
c Var 'aux736' order represents '2' with '3097'
-3095 3097 0
c Var 'aux736' direct represents '2' with '3098'
3095 -3097 3098 0
-3098 3097 0
-3098 -3095 0
c Var 'aux736' order represents '3' with '3099'
-3097 3099 0
c Var 'aux736' direct represents '3' with '3100'
3097 -3099 3100 0
-3100 3099 0
-3100 -3097 0
c Var 'aux736' direct represents '4' with '-3099'
3094 3096 3098 3100 -3099 0
c Encoding variable: aux737 with domain: int(0..2) (representing constraint ((x_00003_00006=5) + (x_00005_00006=5)))
c Both direct and order encoding.
c Var 'aux737' order represents '0' with '3101'
c Var 'aux737' direct represents '0' with '3101'
c Var 'aux737' order represents '1' with '3102'
-3101 3102 0
c Var 'aux737' direct represents '1' with '3103'
3101 -3102 3103 0
-3103 3102 0
-3103 -3101 0
c Var 'aux737' direct represents '2' with '-3102'
3101 3103 -3102 0
c Encoding variable: aux738 with domain: int(0..2) (representing constraint ((x_00007_00006=5) + (x_00008_00006=5)))
c Both direct and order encoding.
c Var 'aux738' order represents '0' with '3104'
c Var 'aux738' direct represents '0' with '3104'
c Var 'aux738' order represents '1' with '3105'
-3104 3105 0
c Var 'aux738' direct represents '1' with '3106'
3104 -3105 3106 0
-3106 3105 0
-3106 -3104 0
c Var 'aux738' direct represents '2' with '-3105'
3104 3106 -3105 0
c Encoding variable: aux739 with domain: int(0..2) (representing constraint ((x_00002_00006=5) + (x_00006_00006=5)))
c Both direct and order encoding.
c Var 'aux739' order represents '0' with '3107'
c Var 'aux739' direct represents '0' with '3107'
c Var 'aux739' order represents '1' with '3108'
-3107 3108 0
c Var 'aux739' direct represents '1' with '3109'
3107 -3108 3109 0
-3109 3108 0
-3109 -3107 0
c Var 'aux739' direct represents '2' with '-3108'
3107 3109 -3108 0
c Encoding variable: aux740 with domain: int(0..2) (representing constraint ((x_00009_00006=5) + (x_00004_00006=5)))
c Both direct and order encoding.
c Var 'aux740' order represents '0' with '3110'
c Var 'aux740' direct represents '0' with '3110'
c Var 'aux740' order represents '1' with '3111'
-3110 3111 0
c Var 'aux740' direct represents '1' with '3112'
3110 -3111 3112 0
-3112 3111 0
-3112 -3110 0
c Var 'aux740' direct represents '2' with '-3111'
3110 3112 -3111 0
c Encoding variable: aux741 with domain: int(0..3) (representing constraint ((x_00001_00006=5) + aux740))
c Both direct and order encoding.
c Var 'aux741' order represents '0' with '3113'
c Var 'aux741' direct represents '0' with '3113'
c Var 'aux741' order represents '1' with '3114'
-3113 3114 0
c Var 'aux741' direct represents '1' with '3115'
3113 -3114 3115 0
-3115 3114 0
-3115 -3113 0
c Var 'aux741' order represents '2' with '3116'
-3114 3116 0
c Var 'aux741' direct represents '2' with '3117'
3114 -3116 3117 0
-3117 3116 0
-3117 -3114 0
c Var 'aux741' direct represents '3' with '-3116'
3113 3115 3117 -3116 0
c Encoding variable: aux742 with domain: int(0..4) (representing constraint (aux737 + aux739))
c Both direct and order encoding.
c Var 'aux742' order represents '0' with '3118'
c Var 'aux742' direct represents '0' with '3118'
c Var 'aux742' order represents '1' with '3119'
-3118 3119 0
c Var 'aux742' direct represents '1' with '3120'
3118 -3119 3120 0
-3120 3119 0
-3120 -3118 0
c Var 'aux742' order represents '2' with '3121'
-3119 3121 0
c Var 'aux742' direct represents '2' with '3122'
3119 -3121 3122 0
-3122 3121 0
-3122 -3119 0
c Var 'aux742' order represents '3' with '3123'
-3121 3123 0
c Var 'aux742' direct represents '3' with '3124'
3121 -3123 3124 0
-3124 3123 0
-3124 -3121 0
c Var 'aux742' direct represents '4' with '-3123'
3118 3120 3122 3124 -3123 0
c Encoding variable: aux743 with domain: int(0..2) (representing constraint ((x_00003_00006=6) + (x_00005_00006=6)))
c Both direct and order encoding.
c Var 'aux743' order represents '0' with '3125'
c Var 'aux743' direct represents '0' with '3125'
c Var 'aux743' order represents '1' with '3126'
-3125 3126 0
c Var 'aux743' direct represents '1' with '3127'
3125 -3126 3127 0
-3127 3126 0
-3127 -3125 0
c Var 'aux743' direct represents '2' with '-3126'
3125 3127 -3126 0
c Encoding variable: aux744 with domain: int(0..2) (representing constraint ((x_00007_00006=6) + (x_00008_00006=6)))
c Both direct and order encoding.
c Var 'aux744' order represents '0' with '3128'
c Var 'aux744' direct represents '0' with '3128'
c Var 'aux744' order represents '1' with '3129'
-3128 3129 0
c Var 'aux744' direct represents '1' with '3130'
3128 -3129 3130 0
-3130 3129 0
-3130 -3128 0
c Var 'aux744' direct represents '2' with '-3129'
3128 3130 -3129 0
c Encoding variable: aux745 with domain: int(0..2) (representing constraint ((x_00002_00006=6) + (x_00006_00006=6)))
c Both direct and order encoding.
c Var 'aux745' order represents '0' with '3131'
c Var 'aux745' direct represents '0' with '3131'
c Var 'aux745' order represents '1' with '3132'
-3131 3132 0
c Var 'aux745' direct represents '1' with '3133'
3131 -3132 3133 0
-3133 3132 0
-3133 -3131 0
c Var 'aux745' direct represents '2' with '-3132'
3131 3133 -3132 0
c Encoding variable: aux746 with domain: int(0..2) (representing constraint ((x_00009_00006=6) + (x_00004_00006=6)))
c Both direct and order encoding.
c Var 'aux746' order represents '0' with '3134'
c Var 'aux746' direct represents '0' with '3134'
c Var 'aux746' order represents '1' with '3135'
-3134 3135 0
c Var 'aux746' direct represents '1' with '3136'
3134 -3135 3136 0
-3136 3135 0
-3136 -3134 0
c Var 'aux746' direct represents '2' with '-3135'
3134 3136 -3135 0
c Encoding variable: aux747 with domain: int(0..3) (representing constraint ((x_00001_00006=6) + aux746))
c Both direct and order encoding.
c Var 'aux747' order represents '0' with '3137'
c Var 'aux747' direct represents '0' with '3137'
c Var 'aux747' order represents '1' with '3138'
-3137 3138 0
c Var 'aux747' direct represents '1' with '3139'
3137 -3138 3139 0
-3139 3138 0
-3139 -3137 0
c Var 'aux747' order represents '2' with '3140'
-3138 3140 0
c Var 'aux747' direct represents '2' with '3141'
3138 -3140 3141 0
-3141 3140 0
-3141 -3138 0
c Var 'aux747' direct represents '3' with '-3140'
3137 3139 3141 -3140 0
c Encoding variable: aux748 with domain: int(0..4) (representing constraint (aux743 + aux745))
c Both direct and order encoding.
c Var 'aux748' order represents '0' with '3142'
c Var 'aux748' direct represents '0' with '3142'
c Var 'aux748' order represents '1' with '3143'
-3142 3143 0
c Var 'aux748' direct represents '1' with '3144'
3142 -3143 3144 0
-3144 3143 0
-3144 -3142 0
c Var 'aux748' order represents '2' with '3145'
-3143 3145 0
c Var 'aux748' direct represents '2' with '3146'
3143 -3145 3146 0
-3146 3145 0
-3146 -3143 0
c Var 'aux748' order represents '3' with '3147'
-3145 3147 0
c Var 'aux748' direct represents '3' with '3148'
3145 -3147 3148 0
-3148 3147 0
-3148 -3145 0
c Var 'aux748' direct represents '4' with '-3147'
3142 3144 3146 3148 -3147 0
c Encoding variable: aux749 with domain: int(0..2) (representing constraint ((x_00003_00006=7) + (x_00005_00006=7)))
c Both direct and order encoding.
c Var 'aux749' order represents '0' with '3149'
c Var 'aux749' direct represents '0' with '3149'
c Var 'aux749' order represents '1' with '3150'
-3149 3150 0
c Var 'aux749' direct represents '1' with '3151'
3149 -3150 3151 0
-3151 3150 0
-3151 -3149 0
c Var 'aux749' direct represents '2' with '-3150'
3149 3151 -3150 0
c Encoding variable: aux750 with domain: int(0..2) (representing constraint ((x_00007_00006=7) + (x_00008_00006=7)))
c Both direct and order encoding.
c Var 'aux750' order represents '0' with '3152'
c Var 'aux750' direct represents '0' with '3152'
c Var 'aux750' order represents '1' with '3153'
-3152 3153 0
c Var 'aux750' direct represents '1' with '3154'
3152 -3153 3154 0
-3154 3153 0
-3154 -3152 0
c Var 'aux750' direct represents '2' with '-3153'
3152 3154 -3153 0
c Encoding variable: aux751 with domain: int(0..2) (representing constraint ((x_00002_00006=7) + (x_00006_00006=7)))
c Both direct and order encoding.
c Var 'aux751' order represents '0' with '3155'
c Var 'aux751' direct represents '0' with '3155'
c Var 'aux751' order represents '1' with '3156'
-3155 3156 0
c Var 'aux751' direct represents '1' with '3157'
3155 -3156 3157 0
-3157 3156 0
-3157 -3155 0
c Var 'aux751' direct represents '2' with '-3156'
3155 3157 -3156 0
c Encoding variable: aux752 with domain: int(0..2) (representing constraint ((x_00009_00006=7) + (x_00004_00006=7)))
c Both direct and order encoding.
c Var 'aux752' order represents '0' with '3158'
c Var 'aux752' direct represents '0' with '3158'
c Var 'aux752' order represents '1' with '3159'
-3158 3159 0
c Var 'aux752' direct represents '1' with '3160'
3158 -3159 3160 0
-3160 3159 0
-3160 -3158 0
c Var 'aux752' direct represents '2' with '-3159'
3158 3160 -3159 0
c Encoding variable: aux753 with domain: int(0..3) (representing constraint ((x_00001_00006=7) + aux752))
c Both direct and order encoding.
c Var 'aux753' order represents '0' with '3161'
c Var 'aux753' direct represents '0' with '3161'
c Var 'aux753' order represents '1' with '3162'
-3161 3162 0
c Var 'aux753' direct represents '1' with '3163'
3161 -3162 3163 0
-3163 3162 0
-3163 -3161 0
c Var 'aux753' order represents '2' with '3164'
-3162 3164 0
c Var 'aux753' direct represents '2' with '3165'
3162 -3164 3165 0
-3165 3164 0
-3165 -3162 0
c Var 'aux753' direct represents '3' with '-3164'
3161 3163 3165 -3164 0
c Encoding variable: aux754 with domain: int(0..4) (representing constraint (aux749 + aux751))
c Both direct and order encoding.
c Var 'aux754' order represents '0' with '3166'
c Var 'aux754' direct represents '0' with '3166'
c Var 'aux754' order represents '1' with '3167'
-3166 3167 0
c Var 'aux754' direct represents '1' with '3168'
3166 -3167 3168 0
-3168 3167 0
-3168 -3166 0
c Var 'aux754' order represents '2' with '3169'
-3167 3169 0
c Var 'aux754' direct represents '2' with '3170'
3167 -3169 3170 0
-3170 3169 0
-3170 -3167 0
c Var 'aux754' order represents '3' with '3171'
-3169 3171 0
c Var 'aux754' direct represents '3' with '3172'
3169 -3171 3172 0
-3172 3171 0
-3172 -3169 0
c Var 'aux754' direct represents '4' with '-3171'
3166 3168 3170 3172 -3171 0
c Encoding variable: aux755 with domain: int(0..2) (representing constraint ((x_00003_00006=8) + (x_00005_00006=8)))
c Both direct and order encoding.
c Var 'aux755' order represents '0' with '3173'
c Var 'aux755' direct represents '0' with '3173'
c Var 'aux755' order represents '1' with '3174'
-3173 3174 0
c Var 'aux755' direct represents '1' with '3175'
3173 -3174 3175 0
-3175 3174 0
-3175 -3173 0
c Var 'aux755' direct represents '2' with '-3174'
3173 3175 -3174 0
c Encoding variable: aux756 with domain: int(0..2) (representing constraint ((x_00007_00006=8) + (x_00008_00006=8)))
c Both direct and order encoding.
c Var 'aux756' order represents '0' with '3176'
c Var 'aux756' direct represents '0' with '3176'
c Var 'aux756' order represents '1' with '3177'
-3176 3177 0
c Var 'aux756' direct represents '1' with '3178'
3176 -3177 3178 0
-3178 3177 0
-3178 -3176 0
c Var 'aux756' direct represents '2' with '-3177'
3176 3178 -3177 0
c Encoding variable: aux757 with domain: int(0..2) (representing constraint ((x_00002_00006=8) + (x_00006_00006=8)))
c Both direct and order encoding.
c Var 'aux757' order represents '0' with '3179'
c Var 'aux757' direct represents '0' with '3179'
c Var 'aux757' order represents '1' with '3180'
-3179 3180 0
c Var 'aux757' direct represents '1' with '3181'
3179 -3180 3181 0
-3181 3180 0
-3181 -3179 0
c Var 'aux757' direct represents '2' with '-3180'
3179 3181 -3180 0
c Encoding variable: aux758 with domain: int(0..2) (representing constraint ((x_00009_00006=8) + (x_00004_00006=8)))
c Both direct and order encoding.
c Var 'aux758' order represents '0' with '3182'
c Var 'aux758' direct represents '0' with '3182'
c Var 'aux758' order represents '1' with '3183'
-3182 3183 0
c Var 'aux758' direct represents '1' with '3184'
3182 -3183 3184 0
-3184 3183 0
-3184 -3182 0
c Var 'aux758' direct represents '2' with '-3183'
3182 3184 -3183 0
c Encoding variable: aux759 with domain: int(0..3) (representing constraint ((x_00001_00006=8) + aux758))
c Both direct and order encoding.
c Var 'aux759' order represents '0' with '3185'
c Var 'aux759' direct represents '0' with '3185'
c Var 'aux759' order represents '1' with '3186'
-3185 3186 0
c Var 'aux759' direct represents '1' with '3187'
3185 -3186 3187 0
-3187 3186 0
-3187 -3185 0
c Var 'aux759' order represents '2' with '3188'
-3186 3188 0
c Var 'aux759' direct represents '2' with '3189'
3186 -3188 3189 0
-3189 3188 0
-3189 -3186 0
c Var 'aux759' direct represents '3' with '-3188'
3185 3187 3189 -3188 0
c Encoding variable: aux760 with domain: int(0..4) (representing constraint (aux755 + aux757))
c Both direct and order encoding.
c Var 'aux760' order represents '0' with '3190'
c Var 'aux760' direct represents '0' with '3190'
c Var 'aux760' order represents '1' with '3191'
-3190 3191 0
c Var 'aux760' direct represents '1' with '3192'
3190 -3191 3192 0
-3192 3191 0
-3192 -3190 0
c Var 'aux760' order represents '2' with '3193'
-3191 3193 0
c Var 'aux760' direct represents '2' with '3194'
3191 -3193 3194 0
-3194 3193 0
-3194 -3191 0
c Var 'aux760' order represents '3' with '3195'
-3193 3195 0
c Var 'aux760' direct represents '3' with '3196'
3193 -3195 3196 0
-3196 3195 0
-3196 -3193 0
c Var 'aux760' direct represents '4' with '-3195'
3190 3192 3194 3196 -3195 0
c Encoding variable: aux761 with domain: int(0..2) (representing constraint ((x_00003_00006=9) + (x_00005_00006=9)))
c Both direct and order encoding.
c Var 'aux761' order represents '0' with '3197'
c Var 'aux761' direct represents '0' with '3197'
c Var 'aux761' order represents '1' with '3198'
-3197 3198 0
c Var 'aux761' direct represents '1' with '3199'
3197 -3198 3199 0
-3199 3198 0
-3199 -3197 0
c Var 'aux761' direct represents '2' with '-3198'
3197 3199 -3198 0
c Encoding variable: aux762 with domain: int(0..2) (representing constraint ((x_00007_00006=9) + (x_00008_00006=9)))
c Both direct and order encoding.
c Var 'aux762' order represents '0' with '3200'
c Var 'aux762' direct represents '0' with '3200'
c Var 'aux762' order represents '1' with '3201'
-3200 3201 0
c Var 'aux762' direct represents '1' with '3202'
3200 -3201 3202 0
-3202 3201 0
-3202 -3200 0
c Var 'aux762' direct represents '2' with '-3201'
3200 3202 -3201 0
c Encoding variable: aux763 with domain: int(0..2) (representing constraint ((x_00002_00006=9) + (x_00006_00006=9)))
c Both direct and order encoding.
c Var 'aux763' order represents '0' with '3203'
c Var 'aux763' direct represents '0' with '3203'
c Var 'aux763' order represents '1' with '3204'
-3203 3204 0
c Var 'aux763' direct represents '1' with '3205'
3203 -3204 3205 0
-3205 3204 0
-3205 -3203 0
c Var 'aux763' direct represents '2' with '-3204'
3203 3205 -3204 0
c Encoding variable: aux764 with domain: int(0..2) (representing constraint ((x_00009_00006=9) + (x_00004_00006=9)))
c Both direct and order encoding.
c Var 'aux764' order represents '0' with '3206'
c Var 'aux764' direct represents '0' with '3206'
c Var 'aux764' order represents '1' with '3207'
-3206 3207 0
c Var 'aux764' direct represents '1' with '3208'
3206 -3207 3208 0
-3208 3207 0
-3208 -3206 0
c Var 'aux764' direct represents '2' with '-3207'
3206 3208 -3207 0
c Encoding variable: aux765 with domain: int(0..3) (representing constraint ((x_00001_00006=9) + aux764))
c Both direct and order encoding.
c Var 'aux765' order represents '0' with '3209'
c Var 'aux765' direct represents '0' with '3209'
c Var 'aux765' order represents '1' with '3210'
-3209 3210 0
c Var 'aux765' direct represents '1' with '3211'
3209 -3210 3211 0
-3211 3210 0
-3211 -3209 0
c Var 'aux765' order represents '2' with '3212'
-3210 3212 0
c Var 'aux765' direct represents '2' with '3213'
3210 -3212 3213 0
-3213 3212 0
-3213 -3210 0
c Var 'aux765' direct represents '3' with '-3212'
3209 3211 3213 -3212 0
c Encoding variable: aux766 with domain: int(0..4) (representing constraint (aux761 + aux763))
c Both direct and order encoding.
c Var 'aux766' order represents '0' with '3214'
c Var 'aux766' direct represents '0' with '3214'
c Var 'aux766' order represents '1' with '3215'
-3214 3215 0
c Var 'aux766' direct represents '1' with '3216'
3214 -3215 3216 0
-3216 3215 0
-3216 -3214 0
c Var 'aux766' order represents '2' with '3217'
-3215 3217 0
c Var 'aux766' direct represents '2' with '3218'
3215 -3217 3218 0
-3218 3217 0
-3218 -3215 0
c Var 'aux766' order represents '3' with '3219'
-3217 3219 0
c Var 'aux766' direct represents '3' with '3220'
3217 -3219 3220 0
-3220 3219 0
-3220 -3217 0
c Var 'aux766' direct represents '4' with '-3219'
3214 3216 3218 3220 -3219 0
c Encoding variable: aux767 with domain: int(0..2) (representing constraint ((x_00003_00007=1) + (x_00005_00007=1)))
c Both direct and order encoding.
c Var 'aux767' order represents '0' with '3221'
c Var 'aux767' direct represents '0' with '3221'
c Var 'aux767' order represents '1' with '3222'
-3221 3222 0
c Var 'aux767' direct represents '1' with '3223'
3221 -3222 3223 0
-3223 3222 0
-3223 -3221 0
c Var 'aux767' direct represents '2' with '-3222'
3221 3223 -3222 0
c Encoding variable: aux768 with domain: int(0..2) (representing constraint ((x_00007_00007=1) + (x_00008_00007=1)))
c Both direct and order encoding.
c Var 'aux768' order represents '0' with '3224'
c Var 'aux768' direct represents '0' with '3224'
c Var 'aux768' order represents '1' with '3225'
-3224 3225 0
c Var 'aux768' direct represents '1' with '3226'
3224 -3225 3226 0
-3226 3225 0
-3226 -3224 0
c Var 'aux768' direct represents '2' with '-3225'
3224 3226 -3225 0
c Encoding variable: aux769 with domain: int(0..2) (representing constraint ((x_00002_00007=1) + (x_00006_00007=1)))
c Both direct and order encoding.
c Var 'aux769' order represents '0' with '3227'
c Var 'aux769' direct represents '0' with '3227'
c Var 'aux769' order represents '1' with '3228'
-3227 3228 0
c Var 'aux769' direct represents '1' with '3229'
3227 -3228 3229 0
-3229 3228 0
-3229 -3227 0
c Var 'aux769' direct represents '2' with '-3228'
3227 3229 -3228 0
c Encoding variable: aux770 with domain: int(0..2) (representing constraint ((x_00009_00007=1) + (x_00004_00007=1)))
c Both direct and order encoding.
c Var 'aux770' order represents '0' with '3230'
c Var 'aux770' direct represents '0' with '3230'
c Var 'aux770' order represents '1' with '3231'
-3230 3231 0
c Var 'aux770' direct represents '1' with '3232'
3230 -3231 3232 0
-3232 3231 0
-3232 -3230 0
c Var 'aux770' direct represents '2' with '-3231'
3230 3232 -3231 0
c Encoding variable: aux771 with domain: int(0..3) (representing constraint ((x_00001_00007=1) + aux770))
c Both direct and order encoding.
c Var 'aux771' order represents '0' with '3233'
c Var 'aux771' direct represents '0' with '3233'
c Var 'aux771' order represents '1' with '3234'
-3233 3234 0
c Var 'aux771' direct represents '1' with '3235'
3233 -3234 3235 0
-3235 3234 0
-3235 -3233 0
c Var 'aux771' order represents '2' with '3236'
-3234 3236 0
c Var 'aux771' direct represents '2' with '3237'
3234 -3236 3237 0
-3237 3236 0
-3237 -3234 0
c Var 'aux771' direct represents '3' with '-3236'
3233 3235 3237 -3236 0
c Encoding variable: aux772 with domain: int(0..4) (representing constraint (aux767 + aux769))
c Both direct and order encoding.
c Var 'aux772' order represents '0' with '3238'
c Var 'aux772' direct represents '0' with '3238'
c Var 'aux772' order represents '1' with '3239'
-3238 3239 0
c Var 'aux772' direct represents '1' with '3240'
3238 -3239 3240 0
-3240 3239 0
-3240 -3238 0
c Var 'aux772' order represents '2' with '3241'
-3239 3241 0
c Var 'aux772' direct represents '2' with '3242'
3239 -3241 3242 0
-3242 3241 0
-3242 -3239 0
c Var 'aux772' order represents '3' with '3243'
-3241 3243 0
c Var 'aux772' direct represents '3' with '3244'
3241 -3243 3244 0
-3244 3243 0
-3244 -3241 0
c Var 'aux772' direct represents '4' with '-3243'
3238 3240 3242 3244 -3243 0
c Encoding variable: aux773 with domain: int(0..2) (representing constraint ((x_00003_00007=2) + (x_00005_00007=2)))
c Both direct and order encoding.
c Var 'aux773' order represents '0' with '3245'
c Var 'aux773' direct represents '0' with '3245'
c Var 'aux773' order represents '1' with '3246'
-3245 3246 0
c Var 'aux773' direct represents '1' with '3247'
3245 -3246 3247 0
-3247 3246 0
-3247 -3245 0
c Var 'aux773' direct represents '2' with '-3246'
3245 3247 -3246 0
c Encoding variable: aux774 with domain: int(0..2) (representing constraint ((x_00007_00007=2) + (x_00008_00007=2)))
c Both direct and order encoding.
c Var 'aux774' order represents '0' with '3248'
c Var 'aux774' direct represents '0' with '3248'
c Var 'aux774' order represents '1' with '3249'
-3248 3249 0
c Var 'aux774' direct represents '1' with '3250'
3248 -3249 3250 0
-3250 3249 0
-3250 -3248 0
c Var 'aux774' direct represents '2' with '-3249'
3248 3250 -3249 0
c Encoding variable: aux775 with domain: int(0..2) (representing constraint ((x_00002_00007=2) + (x_00006_00007=2)))
c Both direct and order encoding.
c Var 'aux775' order represents '0' with '3251'
c Var 'aux775' direct represents '0' with '3251'
c Var 'aux775' order represents '1' with '3252'
-3251 3252 0
c Var 'aux775' direct represents '1' with '3253'
3251 -3252 3253 0
-3253 3252 0
-3253 -3251 0
c Var 'aux775' direct represents '2' with '-3252'
3251 3253 -3252 0
c Encoding variable: aux776 with domain: int(0..2) (representing constraint ((x_00009_00007=2) + (x_00004_00007=2)))
c Both direct and order encoding.
c Var 'aux776' order represents '0' with '3254'
c Var 'aux776' direct represents '0' with '3254'
c Var 'aux776' order represents '1' with '3255'
-3254 3255 0
c Var 'aux776' direct represents '1' with '3256'
3254 -3255 3256 0
-3256 3255 0
-3256 -3254 0
c Var 'aux776' direct represents '2' with '-3255'
3254 3256 -3255 0
c Encoding variable: aux777 with domain: int(0..3) (representing constraint ((x_00001_00007=2) + aux776))
c Both direct and order encoding.
c Var 'aux777' order represents '0' with '3257'
c Var 'aux777' direct represents '0' with '3257'
c Var 'aux777' order represents '1' with '3258'
-3257 3258 0
c Var 'aux777' direct represents '1' with '3259'
3257 -3258 3259 0
-3259 3258 0
-3259 -3257 0
c Var 'aux777' order represents '2' with '3260'
-3258 3260 0
c Var 'aux777' direct represents '2' with '3261'
3258 -3260 3261 0
-3261 3260 0
-3261 -3258 0
c Var 'aux777' direct represents '3' with '-3260'
3257 3259 3261 -3260 0
c Encoding variable: aux778 with domain: int(0..4) (representing constraint (aux773 + aux775))
c Both direct and order encoding.
c Var 'aux778' order represents '0' with '3262'
c Var 'aux778' direct represents '0' with '3262'
c Var 'aux778' order represents '1' with '3263'
-3262 3263 0
c Var 'aux778' direct represents '1' with '3264'
3262 -3263 3264 0
-3264 3263 0
-3264 -3262 0
c Var 'aux778' order represents '2' with '3265'
-3263 3265 0
c Var 'aux778' direct represents '2' with '3266'
3263 -3265 3266 0
-3266 3265 0
-3266 -3263 0
c Var 'aux778' order represents '3' with '3267'
-3265 3267 0
c Var 'aux778' direct represents '3' with '3268'
3265 -3267 3268 0
-3268 3267 0
-3268 -3265 0
c Var 'aux778' direct represents '4' with '-3267'
3262 3264 3266 3268 -3267 0
c Encoding variable: aux779 with domain: int(0..2) (representing constraint ((x_00003_00007=3) + (x_00005_00007=3)))
c Both direct and order encoding.
c Var 'aux779' order represents '0' with '3269'
c Var 'aux779' direct represents '0' with '3269'
c Var 'aux779' order represents '1' with '3270'
-3269 3270 0
c Var 'aux779' direct represents '1' with '3271'
3269 -3270 3271 0
-3271 3270 0
-3271 -3269 0
c Var 'aux779' direct represents '2' with '-3270'
3269 3271 -3270 0
c Encoding variable: aux780 with domain: int(0..2) (representing constraint ((x_00007_00007=3) + (x_00008_00007=3)))
c Both direct and order encoding.
c Var 'aux780' order represents '0' with '3272'
c Var 'aux780' direct represents '0' with '3272'
c Var 'aux780' order represents '1' with '3273'
-3272 3273 0
c Var 'aux780' direct represents '1' with '3274'
3272 -3273 3274 0
-3274 3273 0
-3274 -3272 0
c Var 'aux780' direct represents '2' with '-3273'
3272 3274 -3273 0
c Encoding variable: aux781 with domain: int(0..2) (representing constraint ((x_00002_00007=3) + (x_00006_00007=3)))
c Both direct and order encoding.
c Var 'aux781' order represents '0' with '3275'
c Var 'aux781' direct represents '0' with '3275'
c Var 'aux781' order represents '1' with '3276'
-3275 3276 0
c Var 'aux781' direct represents '1' with '3277'
3275 -3276 3277 0
-3277 3276 0
-3277 -3275 0
c Var 'aux781' direct represents '2' with '-3276'
3275 3277 -3276 0
c Encoding variable: aux782 with domain: int(0..2) (representing constraint ((x_00009_00007=3) + (x_00004_00007=3)))
c Both direct and order encoding.
c Var 'aux782' order represents '0' with '3278'
c Var 'aux782' direct represents '0' with '3278'
c Var 'aux782' order represents '1' with '3279'
-3278 3279 0
c Var 'aux782' direct represents '1' with '3280'
3278 -3279 3280 0
-3280 3279 0
-3280 -3278 0
c Var 'aux782' direct represents '2' with '-3279'
3278 3280 -3279 0
c Encoding variable: aux783 with domain: int(0..3) (representing constraint ((x_00001_00007=3) + aux782))
c Both direct and order encoding.
c Var 'aux783' order represents '0' with '3281'
c Var 'aux783' direct represents '0' with '3281'
c Var 'aux783' order represents '1' with '3282'
-3281 3282 0
c Var 'aux783' direct represents '1' with '3283'
3281 -3282 3283 0
-3283 3282 0
-3283 -3281 0
c Var 'aux783' order represents '2' with '3284'
-3282 3284 0
c Var 'aux783' direct represents '2' with '3285'
3282 -3284 3285 0
-3285 3284 0
-3285 -3282 0
c Var 'aux783' direct represents '3' with '-3284'
3281 3283 3285 -3284 0
c Encoding variable: aux784 with domain: int(0..4) (representing constraint (aux779 + aux781))
c Both direct and order encoding.
c Var 'aux784' order represents '0' with '3286'
c Var 'aux784' direct represents '0' with '3286'
c Var 'aux784' order represents '1' with '3287'
-3286 3287 0
c Var 'aux784' direct represents '1' with '3288'
3286 -3287 3288 0
-3288 3287 0
-3288 -3286 0
c Var 'aux784' order represents '2' with '3289'
-3287 3289 0
c Var 'aux784' direct represents '2' with '3290'
3287 -3289 3290 0
-3290 3289 0
-3290 -3287 0
c Var 'aux784' order represents '3' with '3291'
-3289 3291 0
c Var 'aux784' direct represents '3' with '3292'
3289 -3291 3292 0
-3292 3291 0
-3292 -3289 0
c Var 'aux784' direct represents '4' with '-3291'
3286 3288 3290 3292 -3291 0
c Encoding variable: aux785 with domain: int(0..2) (representing constraint ((x_00003_00007=4) + (x_00005_00007=4)))
c Both direct and order encoding.
c Var 'aux785' order represents '0' with '3293'
c Var 'aux785' direct represents '0' with '3293'
c Var 'aux785' order represents '1' with '3294'
-3293 3294 0
c Var 'aux785' direct represents '1' with '3295'
3293 -3294 3295 0
-3295 3294 0
-3295 -3293 0
c Var 'aux785' direct represents '2' with '-3294'
3293 3295 -3294 0
c Encoding variable: aux786 with domain: int(0..2) (representing constraint ((x_00007_00007=4) + (x_00008_00007=4)))
c Both direct and order encoding.
c Var 'aux786' order represents '0' with '3296'
c Var 'aux786' direct represents '0' with '3296'
c Var 'aux786' order represents '1' with '3297'
-3296 3297 0
c Var 'aux786' direct represents '1' with '3298'
3296 -3297 3298 0
-3298 3297 0
-3298 -3296 0
c Var 'aux786' direct represents '2' with '-3297'
3296 3298 -3297 0
c Encoding variable: aux787 with domain: int(0..2) (representing constraint ((x_00002_00007=4) + (x_00006_00007=4)))
c Both direct and order encoding.
c Var 'aux787' order represents '0' with '3299'
c Var 'aux787' direct represents '0' with '3299'
c Var 'aux787' order represents '1' with '3300'
-3299 3300 0
c Var 'aux787' direct represents '1' with '3301'
3299 -3300 3301 0
-3301 3300 0
-3301 -3299 0
c Var 'aux787' direct represents '2' with '-3300'
3299 3301 -3300 0
c Encoding variable: aux788 with domain: int(0..2) (representing constraint ((x_00009_00007=4) + (x_00004_00007=4)))
c Both direct and order encoding.
c Var 'aux788' order represents '0' with '3302'
c Var 'aux788' direct represents '0' with '3302'
c Var 'aux788' order represents '1' with '3303'
-3302 3303 0
c Var 'aux788' direct represents '1' with '3304'
3302 -3303 3304 0
-3304 3303 0
-3304 -3302 0
c Var 'aux788' direct represents '2' with '-3303'
3302 3304 -3303 0
c Encoding variable: aux789 with domain: int(0..3) (representing constraint ((x_00001_00007=4) + aux788))
c Both direct and order encoding.
c Var 'aux789' order represents '0' with '3305'
c Var 'aux789' direct represents '0' with '3305'
c Var 'aux789' order represents '1' with '3306'
-3305 3306 0
c Var 'aux789' direct represents '1' with '3307'
3305 -3306 3307 0
-3307 3306 0
-3307 -3305 0
c Var 'aux789' order represents '2' with '3308'
-3306 3308 0
c Var 'aux789' direct represents '2' with '3309'
3306 -3308 3309 0
-3309 3308 0
-3309 -3306 0
c Var 'aux789' direct represents '3' with '-3308'
3305 3307 3309 -3308 0
c Encoding variable: aux790 with domain: int(0..4) (representing constraint (aux785 + aux787))
c Both direct and order encoding.
c Var 'aux790' order represents '0' with '3310'
c Var 'aux790' direct represents '0' with '3310'
c Var 'aux790' order represents '1' with '3311'
-3310 3311 0
c Var 'aux790' direct represents '1' with '3312'
3310 -3311 3312 0
-3312 3311 0
-3312 -3310 0
c Var 'aux790' order represents '2' with '3313'
-3311 3313 0
c Var 'aux790' direct represents '2' with '3314'
3311 -3313 3314 0
-3314 3313 0
-3314 -3311 0
c Var 'aux790' order represents '3' with '3315'
-3313 3315 0
c Var 'aux790' direct represents '3' with '3316'
3313 -3315 3316 0
-3316 3315 0
-3316 -3313 0
c Var 'aux790' direct represents '4' with '-3315'
3310 3312 3314 3316 -3315 0
c Encoding variable: aux791 with domain: int(0..2) (representing constraint ((x_00003_00007=5) + (x_00005_00007=5)))
c Both direct and order encoding.
c Var 'aux791' order represents '0' with '3317'
c Var 'aux791' direct represents '0' with '3317'
c Var 'aux791' order represents '1' with '3318'
-3317 3318 0
c Var 'aux791' direct represents '1' with '3319'
3317 -3318 3319 0
-3319 3318 0
-3319 -3317 0
c Var 'aux791' direct represents '2' with '-3318'
3317 3319 -3318 0
c Encoding variable: aux792 with domain: int(0..2) (representing constraint ((x_00007_00007=5) + (x_00008_00007=5)))
c Both direct and order encoding.
c Var 'aux792' order represents '0' with '3320'
c Var 'aux792' direct represents '0' with '3320'
c Var 'aux792' order represents '1' with '3321'
-3320 3321 0
c Var 'aux792' direct represents '1' with '3322'
3320 -3321 3322 0
-3322 3321 0
-3322 -3320 0
c Var 'aux792' direct represents '2' with '-3321'
3320 3322 -3321 0
c Encoding variable: aux793 with domain: int(0..2) (representing constraint ((x_00002_00007=5) + (x_00006_00007=5)))
c Both direct and order encoding.
c Var 'aux793' order represents '0' with '3323'
c Var 'aux793' direct represents '0' with '3323'
c Var 'aux793' order represents '1' with '3324'
-3323 3324 0
c Var 'aux793' direct represents '1' with '3325'
3323 -3324 3325 0
-3325 3324 0
-3325 -3323 0
c Var 'aux793' direct represents '2' with '-3324'
3323 3325 -3324 0
c Encoding variable: aux794 with domain: int(0..2) (representing constraint ((x_00009_00007=5) + (x_00004_00007=5)))
c Both direct and order encoding.
c Var 'aux794' order represents '0' with '3326'
c Var 'aux794' direct represents '0' with '3326'
c Var 'aux794' order represents '1' with '3327'
-3326 3327 0
c Var 'aux794' direct represents '1' with '3328'
3326 -3327 3328 0
-3328 3327 0
-3328 -3326 0
c Var 'aux794' direct represents '2' with '-3327'
3326 3328 -3327 0
c Encoding variable: aux795 with domain: int(0..3) (representing constraint ((x_00001_00007=5) + aux794))
c Both direct and order encoding.
c Var 'aux795' order represents '0' with '3329'
c Var 'aux795' direct represents '0' with '3329'
c Var 'aux795' order represents '1' with '3330'
-3329 3330 0
c Var 'aux795' direct represents '1' with '3331'
3329 -3330 3331 0
-3331 3330 0
-3331 -3329 0
c Var 'aux795' order represents '2' with '3332'
-3330 3332 0
c Var 'aux795' direct represents '2' with '3333'
3330 -3332 3333 0
-3333 3332 0
-3333 -3330 0
c Var 'aux795' direct represents '3' with '-3332'
3329 3331 3333 -3332 0
c Encoding variable: aux796 with domain: int(0..4) (representing constraint (aux791 + aux793))
c Both direct and order encoding.
c Var 'aux796' order represents '0' with '3334'
c Var 'aux796' direct represents '0' with '3334'
c Var 'aux796' order represents '1' with '3335'
-3334 3335 0
c Var 'aux796' direct represents '1' with '3336'
3334 -3335 3336 0
-3336 3335 0
-3336 -3334 0
c Var 'aux796' order represents '2' with '3337'
-3335 3337 0
c Var 'aux796' direct represents '2' with '3338'
3335 -3337 3338 0
-3338 3337 0
-3338 -3335 0
c Var 'aux796' order represents '3' with '3339'
-3337 3339 0
c Var 'aux796' direct represents '3' with '3340'
3337 -3339 3340 0
-3340 3339 0
-3340 -3337 0
c Var 'aux796' direct represents '4' with '-3339'
3334 3336 3338 3340 -3339 0
c Encoding variable: aux797 with domain: int(0..2) (representing constraint ((x_00003_00007=6) + (x_00005_00007=6)))
c Both direct and order encoding.
c Var 'aux797' order represents '0' with '3341'
c Var 'aux797' direct represents '0' with '3341'
c Var 'aux797' order represents '1' with '3342'
-3341 3342 0
c Var 'aux797' direct represents '1' with '3343'
3341 -3342 3343 0
-3343 3342 0
-3343 -3341 0
c Var 'aux797' direct represents '2' with '-3342'
3341 3343 -3342 0
c Encoding variable: aux798 with domain: int(0..2) (representing constraint ((x_00007_00007=6) + (x_00008_00007=6)))
c Both direct and order encoding.
c Var 'aux798' order represents '0' with '3344'
c Var 'aux798' direct represents '0' with '3344'
c Var 'aux798' order represents '1' with '3345'
-3344 3345 0
c Var 'aux798' direct represents '1' with '3346'
3344 -3345 3346 0
-3346 3345 0
-3346 -3344 0
c Var 'aux798' direct represents '2' with '-3345'
3344 3346 -3345 0
c Encoding variable: aux799 with domain: int(0..2) (representing constraint ((x_00002_00007=6) + (x_00006_00007=6)))
c Both direct and order encoding.
c Var 'aux799' order represents '0' with '3347'
c Var 'aux799' direct represents '0' with '3347'
c Var 'aux799' order represents '1' with '3348'
-3347 3348 0
c Var 'aux799' direct represents '1' with '3349'
3347 -3348 3349 0
-3349 3348 0
-3349 -3347 0
c Var 'aux799' direct represents '2' with '-3348'
3347 3349 -3348 0
c Encoding variable: aux800 with domain: int(0..2) (representing constraint ((x_00009_00007=6) + (x_00004_00007=6)))
c Both direct and order encoding.
c Var 'aux800' order represents '0' with '3350'
c Var 'aux800' direct represents '0' with '3350'
c Var 'aux800' order represents '1' with '3351'
-3350 3351 0
c Var 'aux800' direct represents '1' with '3352'
3350 -3351 3352 0
-3352 3351 0
-3352 -3350 0
c Var 'aux800' direct represents '2' with '-3351'
3350 3352 -3351 0
c Encoding variable: aux801 with domain: int(0..3) (representing constraint ((x_00001_00007=6) + aux800))
c Both direct and order encoding.
c Var 'aux801' order represents '0' with '3353'
c Var 'aux801' direct represents '0' with '3353'
c Var 'aux801' order represents '1' with '3354'
-3353 3354 0
c Var 'aux801' direct represents '1' with '3355'
3353 -3354 3355 0
-3355 3354 0
-3355 -3353 0
c Var 'aux801' order represents '2' with '3356'
-3354 3356 0
c Var 'aux801' direct represents '2' with '3357'
3354 -3356 3357 0
-3357 3356 0
-3357 -3354 0
c Var 'aux801' direct represents '3' with '-3356'
3353 3355 3357 -3356 0
c Encoding variable: aux802 with domain: int(0..4) (representing constraint (aux797 + aux799))
c Both direct and order encoding.
c Var 'aux802' order represents '0' with '3358'
c Var 'aux802' direct represents '0' with '3358'
c Var 'aux802' order represents '1' with '3359'
-3358 3359 0
c Var 'aux802' direct represents '1' with '3360'
3358 -3359 3360 0
-3360 3359 0
-3360 -3358 0
c Var 'aux802' order represents '2' with '3361'
-3359 3361 0
c Var 'aux802' direct represents '2' with '3362'
3359 -3361 3362 0
-3362 3361 0
-3362 -3359 0
c Var 'aux802' order represents '3' with '3363'
-3361 3363 0
c Var 'aux802' direct represents '3' with '3364'
3361 -3363 3364 0
-3364 3363 0
-3364 -3361 0
c Var 'aux802' direct represents '4' with '-3363'
3358 3360 3362 3364 -3363 0
c Encoding variable: aux803 with domain: int(0..2) (representing constraint ((x_00003_00007=7) + (x_00005_00007=7)))
c Both direct and order encoding.
c Var 'aux803' order represents '0' with '3365'
c Var 'aux803' direct represents '0' with '3365'
c Var 'aux803' order represents '1' with '3366'
-3365 3366 0
c Var 'aux803' direct represents '1' with '3367'
3365 -3366 3367 0
-3367 3366 0
-3367 -3365 0
c Var 'aux803' direct represents '2' with '-3366'
3365 3367 -3366 0
c Encoding variable: aux804 with domain: int(0..2) (representing constraint ((x_00007_00007=7) + (x_00008_00007=7)))
c Both direct and order encoding.
c Var 'aux804' order represents '0' with '3368'
c Var 'aux804' direct represents '0' with '3368'
c Var 'aux804' order represents '1' with '3369'
-3368 3369 0
c Var 'aux804' direct represents '1' with '3370'
3368 -3369 3370 0
-3370 3369 0
-3370 -3368 0
c Var 'aux804' direct represents '2' with '-3369'
3368 3370 -3369 0
c Encoding variable: aux805 with domain: int(0..2) (representing constraint ((x_00002_00007=7) + (x_00006_00007=7)))
c Both direct and order encoding.
c Var 'aux805' order represents '0' with '3371'
c Var 'aux805' direct represents '0' with '3371'
c Var 'aux805' order represents '1' with '3372'
-3371 3372 0
c Var 'aux805' direct represents '1' with '3373'
3371 -3372 3373 0
-3373 3372 0
-3373 -3371 0
c Var 'aux805' direct represents '2' with '-3372'
3371 3373 -3372 0
c Encoding variable: aux806 with domain: int(0..2) (representing constraint ((x_00009_00007=7) + (x_00004_00007=7)))
c Both direct and order encoding.
c Var 'aux806' order represents '0' with '3374'
c Var 'aux806' direct represents '0' with '3374'
c Var 'aux806' order represents '1' with '3375'
-3374 3375 0
c Var 'aux806' direct represents '1' with '3376'
3374 -3375 3376 0
-3376 3375 0
-3376 -3374 0
c Var 'aux806' direct represents '2' with '-3375'
3374 3376 -3375 0
c Encoding variable: aux807 with domain: int(0..3) (representing constraint ((x_00001_00007=7) + aux806))
c Both direct and order encoding.
c Var 'aux807' order represents '0' with '3377'
c Var 'aux807' direct represents '0' with '3377'
c Var 'aux807' order represents '1' with '3378'
-3377 3378 0
c Var 'aux807' direct represents '1' with '3379'
3377 -3378 3379 0
-3379 3378 0
-3379 -3377 0
c Var 'aux807' order represents '2' with '3380'
-3378 3380 0
c Var 'aux807' direct represents '2' with '3381'
3378 -3380 3381 0
-3381 3380 0
-3381 -3378 0
c Var 'aux807' direct represents '3' with '-3380'
3377 3379 3381 -3380 0
c Encoding variable: aux808 with domain: int(0..4) (representing constraint (aux803 + aux805))
c Both direct and order encoding.
c Var 'aux808' order represents '0' with '3382'
c Var 'aux808' direct represents '0' with '3382'
c Var 'aux808' order represents '1' with '3383'
-3382 3383 0
c Var 'aux808' direct represents '1' with '3384'
3382 -3383 3384 0
-3384 3383 0
-3384 -3382 0
c Var 'aux808' order represents '2' with '3385'
-3383 3385 0
c Var 'aux808' direct represents '2' with '3386'
3383 -3385 3386 0
-3386 3385 0
-3386 -3383 0
c Var 'aux808' order represents '3' with '3387'
-3385 3387 0
c Var 'aux808' direct represents '3' with '3388'
3385 -3387 3388 0
-3388 3387 0
-3388 -3385 0
c Var 'aux808' direct represents '4' with '-3387'
3382 3384 3386 3388 -3387 0
c Encoding variable: aux809 with domain: int(0..2) (representing constraint ((x_00003_00007=8) + (x_00005_00007=8)))
c Both direct and order encoding.
c Var 'aux809' order represents '0' with '3389'
c Var 'aux809' direct represents '0' with '3389'
c Var 'aux809' order represents '1' with '3390'
-3389 3390 0
c Var 'aux809' direct represents '1' with '3391'
3389 -3390 3391 0
-3391 3390 0
-3391 -3389 0
c Var 'aux809' direct represents '2' with '-3390'
3389 3391 -3390 0
c Encoding variable: aux810 with domain: int(0..2) (representing constraint ((x_00007_00007=8) + (x_00008_00007=8)))
c Both direct and order encoding.
c Var 'aux810' order represents '0' with '3392'
c Var 'aux810' direct represents '0' with '3392'
c Var 'aux810' order represents '1' with '3393'
-3392 3393 0
c Var 'aux810' direct represents '1' with '3394'
3392 -3393 3394 0
-3394 3393 0
-3394 -3392 0
c Var 'aux810' direct represents '2' with '-3393'
3392 3394 -3393 0
c Encoding variable: aux811 with domain: int(0..2) (representing constraint ((x_00002_00007=8) + (x_00006_00007=8)))
c Both direct and order encoding.
c Var 'aux811' order represents '0' with '3395'
c Var 'aux811' direct represents '0' with '3395'
c Var 'aux811' order represents '1' with '3396'
-3395 3396 0
c Var 'aux811' direct represents '1' with '3397'
3395 -3396 3397 0
-3397 3396 0
-3397 -3395 0
c Var 'aux811' direct represents '2' with '-3396'
3395 3397 -3396 0
c Encoding variable: aux812 with domain: int(0..2) (representing constraint ((x_00009_00007=8) + (x_00004_00007=8)))
c Both direct and order encoding.
c Var 'aux812' order represents '0' with '3398'
c Var 'aux812' direct represents '0' with '3398'
c Var 'aux812' order represents '1' with '3399'
-3398 3399 0
c Var 'aux812' direct represents '1' with '3400'
3398 -3399 3400 0
-3400 3399 0
-3400 -3398 0
c Var 'aux812' direct represents '2' with '-3399'
3398 3400 -3399 0
c Encoding variable: aux813 with domain: int(0..3) (representing constraint ((x_00001_00007=8) + aux812))
c Both direct and order encoding.
c Var 'aux813' order represents '0' with '3401'
c Var 'aux813' direct represents '0' with '3401'
c Var 'aux813' order represents '1' with '3402'
-3401 3402 0
c Var 'aux813' direct represents '1' with '3403'
3401 -3402 3403 0
-3403 3402 0
-3403 -3401 0
c Var 'aux813' order represents '2' with '3404'
-3402 3404 0
c Var 'aux813' direct represents '2' with '3405'
3402 -3404 3405 0
-3405 3404 0
-3405 -3402 0
c Var 'aux813' direct represents '3' with '-3404'
3401 3403 3405 -3404 0
c Encoding variable: aux814 with domain: int(0..4) (representing constraint (aux809 + aux811))
c Both direct and order encoding.
c Var 'aux814' order represents '0' with '3406'
c Var 'aux814' direct represents '0' with '3406'
c Var 'aux814' order represents '1' with '3407'
-3406 3407 0
c Var 'aux814' direct represents '1' with '3408'
3406 -3407 3408 0
-3408 3407 0
-3408 -3406 0
c Var 'aux814' order represents '2' with '3409'
-3407 3409 0
c Var 'aux814' direct represents '2' with '3410'
3407 -3409 3410 0
-3410 3409 0
-3410 -3407 0
c Var 'aux814' order represents '3' with '3411'
-3409 3411 0
c Var 'aux814' direct represents '3' with '3412'
3409 -3411 3412 0
-3412 3411 0
-3412 -3409 0
c Var 'aux814' direct represents '4' with '-3411'
3406 3408 3410 3412 -3411 0
c Encoding variable: aux815 with domain: int(0..2) (representing constraint ((x_00003_00007=9) + (x_00005_00007=9)))
c Both direct and order encoding.
c Var 'aux815' order represents '0' with '3413'
c Var 'aux815' direct represents '0' with '3413'
c Var 'aux815' order represents '1' with '3414'
-3413 3414 0
c Var 'aux815' direct represents '1' with '3415'
3413 -3414 3415 0
-3415 3414 0
-3415 -3413 0
c Var 'aux815' direct represents '2' with '-3414'
3413 3415 -3414 0
c Encoding variable: aux816 with domain: int(0..2) (representing constraint ((x_00007_00007=9) + (x_00008_00007=9)))
c Both direct and order encoding.
c Var 'aux816' order represents '0' with '3416'
c Var 'aux816' direct represents '0' with '3416'
c Var 'aux816' order represents '1' with '3417'
-3416 3417 0
c Var 'aux816' direct represents '1' with '3418'
3416 -3417 3418 0
-3418 3417 0
-3418 -3416 0
c Var 'aux816' direct represents '2' with '-3417'
3416 3418 -3417 0
c Encoding variable: aux817 with domain: int(0..2) (representing constraint ((x_00002_00007=9) + (x_00006_00007=9)))
c Both direct and order encoding.
c Var 'aux817' order represents '0' with '3419'
c Var 'aux817' direct represents '0' with '3419'
c Var 'aux817' order represents '1' with '3420'
-3419 3420 0
c Var 'aux817' direct represents '1' with '3421'
3419 -3420 3421 0
-3421 3420 0
-3421 -3419 0
c Var 'aux817' direct represents '2' with '-3420'
3419 3421 -3420 0
c Encoding variable: aux818 with domain: int(0..2) (representing constraint ((x_00009_00007=9) + (x_00004_00007=9)))
c Both direct and order encoding.
c Var 'aux818' order represents '0' with '3422'
c Var 'aux818' direct represents '0' with '3422'
c Var 'aux818' order represents '1' with '3423'
-3422 3423 0
c Var 'aux818' direct represents '1' with '3424'
3422 -3423 3424 0
-3424 3423 0
-3424 -3422 0
c Var 'aux818' direct represents '2' with '-3423'
3422 3424 -3423 0
c Encoding variable: aux819 with domain: int(0..3) (representing constraint ((x_00001_00007=9) + aux818))
c Both direct and order encoding.
c Var 'aux819' order represents '0' with '3425'
c Var 'aux819' direct represents '0' with '3425'
c Var 'aux819' order represents '1' with '3426'
-3425 3426 0
c Var 'aux819' direct represents '1' with '3427'
3425 -3426 3427 0
-3427 3426 0
-3427 -3425 0
c Var 'aux819' order represents '2' with '3428'
-3426 3428 0
c Var 'aux819' direct represents '2' with '3429'
3426 -3428 3429 0
-3429 3428 0
-3429 -3426 0
c Var 'aux819' direct represents '3' with '-3428'
3425 3427 3429 -3428 0
c Encoding variable: aux820 with domain: int(0..4) (representing constraint (aux815 + aux817))
c Both direct and order encoding.
c Var 'aux820' order represents '0' with '3430'
c Var 'aux820' direct represents '0' with '3430'
c Var 'aux820' order represents '1' with '3431'
-3430 3431 0
c Var 'aux820' direct represents '1' with '3432'
3430 -3431 3432 0
-3432 3431 0
-3432 -3430 0
c Var 'aux820' order represents '2' with '3433'
-3431 3433 0
c Var 'aux820' direct represents '2' with '3434'
3431 -3433 3434 0
-3434 3433 0
-3434 -3431 0
c Var 'aux820' order represents '3' with '3435'
-3433 3435 0
c Var 'aux820' direct represents '3' with '3436'
3433 -3435 3436 0
-3436 3435 0
-3436 -3433 0
c Var 'aux820' direct represents '4' with '-3435'
3430 3432 3434 3436 -3435 0
c Encoding variable: aux821 with domain: int(0..2) (representing constraint ((x_00003_00008=1) + (x_00005_00008=1)))
c Both direct and order encoding.
c Var 'aux821' order represents '0' with '3437'
c Var 'aux821' direct represents '0' with '3437'
c Var 'aux821' order represents '1' with '3438'
-3437 3438 0
c Var 'aux821' direct represents '1' with '3439'
3437 -3438 3439 0
-3439 3438 0
-3439 -3437 0
c Var 'aux821' direct represents '2' with '-3438'
3437 3439 -3438 0
c Encoding variable: aux822 with domain: int(0..2) (representing constraint ((x_00007_00008=1) + (x_00008_00008=1)))
c Both direct and order encoding.
c Var 'aux822' order represents '0' with '3440'
c Var 'aux822' direct represents '0' with '3440'
c Var 'aux822' order represents '1' with '3441'
-3440 3441 0
c Var 'aux822' direct represents '1' with '3442'
3440 -3441 3442 0
-3442 3441 0
-3442 -3440 0
c Var 'aux822' direct represents '2' with '-3441'
3440 3442 -3441 0
c Encoding variable: aux823 with domain: int(0..2) (representing constraint ((x_00002_00008=1) + (x_00006_00008=1)))
c Both direct and order encoding.
c Var 'aux823' order represents '0' with '3443'
c Var 'aux823' direct represents '0' with '3443'
c Var 'aux823' order represents '1' with '3444'
-3443 3444 0
c Var 'aux823' direct represents '1' with '3445'
3443 -3444 3445 0
-3445 3444 0
-3445 -3443 0
c Var 'aux823' direct represents '2' with '-3444'
3443 3445 -3444 0
c Encoding variable: aux824 with domain: int(0..2) (representing constraint ((x_00009_00008=1) + (x_00004_00008=1)))
c Both direct and order encoding.
c Var 'aux824' order represents '0' with '3446'
c Var 'aux824' direct represents '0' with '3446'
c Var 'aux824' order represents '1' with '3447'
-3446 3447 0
c Var 'aux824' direct represents '1' with '3448'
3446 -3447 3448 0
-3448 3447 0
-3448 -3446 0
c Var 'aux824' direct represents '2' with '-3447'
3446 3448 -3447 0
c Encoding variable: aux825 with domain: int(0..3) (representing constraint ((x_00001_00008=1) + aux824))
c Both direct and order encoding.
c Var 'aux825' order represents '0' with '3449'
c Var 'aux825' direct represents '0' with '3449'
c Var 'aux825' order represents '1' with '3450'
-3449 3450 0
c Var 'aux825' direct represents '1' with '3451'
3449 -3450 3451 0
-3451 3450 0
-3451 -3449 0
c Var 'aux825' order represents '2' with '3452'
-3450 3452 0
c Var 'aux825' direct represents '2' with '3453'
3450 -3452 3453 0
-3453 3452 0
-3453 -3450 0
c Var 'aux825' direct represents '3' with '-3452'
3449 3451 3453 -3452 0
c Encoding variable: aux826 with domain: int(0..4) (representing constraint (aux821 + aux823))
c Both direct and order encoding.
c Var 'aux826' order represents '0' with '3454'
c Var 'aux826' direct represents '0' with '3454'
c Var 'aux826' order represents '1' with '3455'
-3454 3455 0
c Var 'aux826' direct represents '1' with '3456'
3454 -3455 3456 0
-3456 3455 0
-3456 -3454 0
c Var 'aux826' order represents '2' with '3457'
-3455 3457 0
c Var 'aux826' direct represents '2' with '3458'
3455 -3457 3458 0
-3458 3457 0
-3458 -3455 0
c Var 'aux826' order represents '3' with '3459'
-3457 3459 0
c Var 'aux826' direct represents '3' with '3460'
3457 -3459 3460 0
-3460 3459 0
-3460 -3457 0
c Var 'aux826' direct represents '4' with '-3459'
3454 3456 3458 3460 -3459 0
c Encoding variable: aux827 with domain: int(0..2) (representing constraint ((x_00003_00008=2) + (x_00005_00008=2)))
c Both direct and order encoding.
c Var 'aux827' order represents '0' with '3461'
c Var 'aux827' direct represents '0' with '3461'
c Var 'aux827' order represents '1' with '3462'
-3461 3462 0
c Var 'aux827' direct represents '1' with '3463'
3461 -3462 3463 0
-3463 3462 0
-3463 -3461 0
c Var 'aux827' direct represents '2' with '-3462'
3461 3463 -3462 0
c Encoding variable: aux828 with domain: int(0..2) (representing constraint ((x_00007_00008=2) + (x_00008_00008=2)))
c Both direct and order encoding.
c Var 'aux828' order represents '0' with '3464'
c Var 'aux828' direct represents '0' with '3464'
c Var 'aux828' order represents '1' with '3465'
-3464 3465 0
c Var 'aux828' direct represents '1' with '3466'
3464 -3465 3466 0
-3466 3465 0
-3466 -3464 0
c Var 'aux828' direct represents '2' with '-3465'
3464 3466 -3465 0
c Encoding variable: aux829 with domain: int(0..2) (representing constraint ((x_00002_00008=2) + (x_00006_00008=2)))
c Both direct and order encoding.
c Var 'aux829' order represents '0' with '3467'
c Var 'aux829' direct represents '0' with '3467'
c Var 'aux829' order represents '1' with '3468'
-3467 3468 0
c Var 'aux829' direct represents '1' with '3469'
3467 -3468 3469 0
-3469 3468 0
-3469 -3467 0
c Var 'aux829' direct represents '2' with '-3468'
3467 3469 -3468 0
c Encoding variable: aux830 with domain: int(0..2) (representing constraint ((x_00009_00008=2) + (x_00004_00008=2)))
c Both direct and order encoding.
c Var 'aux830' order represents '0' with '3470'
c Var 'aux830' direct represents '0' with '3470'
c Var 'aux830' order represents '1' with '3471'
-3470 3471 0
c Var 'aux830' direct represents '1' with '3472'
3470 -3471 3472 0
-3472 3471 0
-3472 -3470 0
c Var 'aux830' direct represents '2' with '-3471'
3470 3472 -3471 0
c Encoding variable: aux831 with domain: int(0..3) (representing constraint ((x_00001_00008=2) + aux830))
c Both direct and order encoding.
c Var 'aux831' order represents '0' with '3473'
c Var 'aux831' direct represents '0' with '3473'
c Var 'aux831' order represents '1' with '3474'
-3473 3474 0
c Var 'aux831' direct represents '1' with '3475'
3473 -3474 3475 0
-3475 3474 0
-3475 -3473 0
c Var 'aux831' order represents '2' with '3476'
-3474 3476 0
c Var 'aux831' direct represents '2' with '3477'
3474 -3476 3477 0
-3477 3476 0
-3477 -3474 0
c Var 'aux831' direct represents '3' with '-3476'
3473 3475 3477 -3476 0
c Encoding variable: aux832 with domain: int(0..4) (representing constraint (aux827 + aux829))
c Both direct and order encoding.
c Var 'aux832' order represents '0' with '3478'
c Var 'aux832' direct represents '0' with '3478'
c Var 'aux832' order represents '1' with '3479'
-3478 3479 0
c Var 'aux832' direct represents '1' with '3480'
3478 -3479 3480 0
-3480 3479 0
-3480 -3478 0
c Var 'aux832' order represents '2' with '3481'
-3479 3481 0
c Var 'aux832' direct represents '2' with '3482'
3479 -3481 3482 0
-3482 3481 0
-3482 -3479 0
c Var 'aux832' order represents '3' with '3483'
-3481 3483 0
c Var 'aux832' direct represents '3' with '3484'
3481 -3483 3484 0
-3484 3483 0
-3484 -3481 0
c Var 'aux832' direct represents '4' with '-3483'
3478 3480 3482 3484 -3483 0
c Encoding variable: aux833 with domain: int(0..2) (representing constraint ((x_00003_00008=3) + (x_00005_00008=3)))
c Both direct and order encoding.
c Var 'aux833' order represents '0' with '3485'
c Var 'aux833' direct represents '0' with '3485'
c Var 'aux833' order represents '1' with '3486'
-3485 3486 0
c Var 'aux833' direct represents '1' with '3487'
3485 -3486 3487 0
-3487 3486 0
-3487 -3485 0
c Var 'aux833' direct represents '2' with '-3486'
3485 3487 -3486 0
c Encoding variable: aux834 with domain: int(0..2) (representing constraint ((x_00007_00008=3) + (x_00008_00008=3)))
c Both direct and order encoding.
c Var 'aux834' order represents '0' with '3488'
c Var 'aux834' direct represents '0' with '3488'
c Var 'aux834' order represents '1' with '3489'
-3488 3489 0
c Var 'aux834' direct represents '1' with '3490'
3488 -3489 3490 0
-3490 3489 0
-3490 -3488 0
c Var 'aux834' direct represents '2' with '-3489'
3488 3490 -3489 0
c Encoding variable: aux835 with domain: int(0..2) (representing constraint ((x_00002_00008=3) + (x_00006_00008=3)))
c Both direct and order encoding.
c Var 'aux835' order represents '0' with '3491'
c Var 'aux835' direct represents '0' with '3491'
c Var 'aux835' order represents '1' with '3492'
-3491 3492 0
c Var 'aux835' direct represents '1' with '3493'
3491 -3492 3493 0
-3493 3492 0
-3493 -3491 0
c Var 'aux835' direct represents '2' with '-3492'
3491 3493 -3492 0
c Encoding variable: aux836 with domain: int(0..2) (representing constraint ((x_00009_00008=3) + (x_00004_00008=3)))
c Both direct and order encoding.
c Var 'aux836' order represents '0' with '3494'
c Var 'aux836' direct represents '0' with '3494'
c Var 'aux836' order represents '1' with '3495'
-3494 3495 0
c Var 'aux836' direct represents '1' with '3496'
3494 -3495 3496 0
-3496 3495 0
-3496 -3494 0
c Var 'aux836' direct represents '2' with '-3495'
3494 3496 -3495 0
c Encoding variable: aux837 with domain: int(0..3) (representing constraint ((x_00001_00008=3) + aux836))
c Both direct and order encoding.
c Var 'aux837' order represents '0' with '3497'
c Var 'aux837' direct represents '0' with '3497'
c Var 'aux837' order represents '1' with '3498'
-3497 3498 0
c Var 'aux837' direct represents '1' with '3499'
3497 -3498 3499 0
-3499 3498 0
-3499 -3497 0
c Var 'aux837' order represents '2' with '3500'
-3498 3500 0
c Var 'aux837' direct represents '2' with '3501'
3498 -3500 3501 0
-3501 3500 0
-3501 -3498 0
c Var 'aux837' direct represents '3' with '-3500'
3497 3499 3501 -3500 0
c Encoding variable: aux838 with domain: int(0..4) (representing constraint (aux833 + aux835))
c Both direct and order encoding.
c Var 'aux838' order represents '0' with '3502'
c Var 'aux838' direct represents '0' with '3502'
c Var 'aux838' order represents '1' with '3503'
-3502 3503 0
c Var 'aux838' direct represents '1' with '3504'
3502 -3503 3504 0
-3504 3503 0
-3504 -3502 0
c Var 'aux838' order represents '2' with '3505'
-3503 3505 0
c Var 'aux838' direct represents '2' with '3506'
3503 -3505 3506 0
-3506 3505 0
-3506 -3503 0
c Var 'aux838' order represents '3' with '3507'
-3505 3507 0
c Var 'aux838' direct represents '3' with '3508'
3505 -3507 3508 0
-3508 3507 0
-3508 -3505 0
c Var 'aux838' direct represents '4' with '-3507'
3502 3504 3506 3508 -3507 0
c Encoding variable: aux839 with domain: int(0..2) (representing constraint ((x_00003_00008=4) + (x_00005_00008=4)))
c Both direct and order encoding.
c Var 'aux839' order represents '0' with '3509'
c Var 'aux839' direct represents '0' with '3509'
c Var 'aux839' order represents '1' with '3510'
-3509 3510 0
c Var 'aux839' direct represents '1' with '3511'
3509 -3510 3511 0
-3511 3510 0
-3511 -3509 0
c Var 'aux839' direct represents '2' with '-3510'
3509 3511 -3510 0
c Encoding variable: aux840 with domain: int(0..2) (representing constraint ((x_00007_00008=4) + (x_00008_00008=4)))
c Both direct and order encoding.
c Var 'aux840' order represents '0' with '3512'
c Var 'aux840' direct represents '0' with '3512'
c Var 'aux840' order represents '1' with '3513'
-3512 3513 0
c Var 'aux840' direct represents '1' with '3514'
3512 -3513 3514 0
-3514 3513 0
-3514 -3512 0
c Var 'aux840' direct represents '2' with '-3513'
3512 3514 -3513 0
c Encoding variable: aux841 with domain: int(0..2) (representing constraint ((x_00002_00008=4) + (x_00006_00008=4)))
c Both direct and order encoding.
c Var 'aux841' order represents '0' with '3515'
c Var 'aux841' direct represents '0' with '3515'
c Var 'aux841' order represents '1' with '3516'
-3515 3516 0
c Var 'aux841' direct represents '1' with '3517'
3515 -3516 3517 0
-3517 3516 0
-3517 -3515 0
c Var 'aux841' direct represents '2' with '-3516'
3515 3517 -3516 0
c Encoding variable: aux842 with domain: int(0..2) (representing constraint ((x_00009_00008=4) + (x_00004_00008=4)))
c Both direct and order encoding.
c Var 'aux842' order represents '0' with '3518'
c Var 'aux842' direct represents '0' with '3518'
c Var 'aux842' order represents '1' with '3519'
-3518 3519 0
c Var 'aux842' direct represents '1' with '3520'
3518 -3519 3520 0
-3520 3519 0
-3520 -3518 0
c Var 'aux842' direct represents '2' with '-3519'
3518 3520 -3519 0
c Encoding variable: aux843 with domain: int(0..3) (representing constraint ((x_00001_00008=4) + aux842))
c Both direct and order encoding.
c Var 'aux843' order represents '0' with '3521'
c Var 'aux843' direct represents '0' with '3521'
c Var 'aux843' order represents '1' with '3522'
-3521 3522 0
c Var 'aux843' direct represents '1' with '3523'
3521 -3522 3523 0
-3523 3522 0
-3523 -3521 0
c Var 'aux843' order represents '2' with '3524'
-3522 3524 0
c Var 'aux843' direct represents '2' with '3525'
3522 -3524 3525 0
-3525 3524 0
-3525 -3522 0
c Var 'aux843' direct represents '3' with '-3524'
3521 3523 3525 -3524 0
c Encoding variable: aux844 with domain: int(0..4) (representing constraint (aux839 + aux841))
c Both direct and order encoding.
c Var 'aux844' order represents '0' with '3526'
c Var 'aux844' direct represents '0' with '3526'
c Var 'aux844' order represents '1' with '3527'
-3526 3527 0
c Var 'aux844' direct represents '1' with '3528'
3526 -3527 3528 0
-3528 3527 0
-3528 -3526 0
c Var 'aux844' order represents '2' with '3529'
-3527 3529 0
c Var 'aux844' direct represents '2' with '3530'
3527 -3529 3530 0
-3530 3529 0
-3530 -3527 0
c Var 'aux844' order represents '3' with '3531'
-3529 3531 0
c Var 'aux844' direct represents '3' with '3532'
3529 -3531 3532 0
-3532 3531 0
-3532 -3529 0
c Var 'aux844' direct represents '4' with '-3531'
3526 3528 3530 3532 -3531 0
c Encoding variable: aux845 with domain: int(0..2) (representing constraint ((x_00003_00008=5) + (x_00005_00008=5)))
c Both direct and order encoding.
c Var 'aux845' order represents '0' with '3533'
c Var 'aux845' direct represents '0' with '3533'
c Var 'aux845' order represents '1' with '3534'
-3533 3534 0
c Var 'aux845' direct represents '1' with '3535'
3533 -3534 3535 0
-3535 3534 0
-3535 -3533 0
c Var 'aux845' direct represents '2' with '-3534'
3533 3535 -3534 0
c Encoding variable: aux846 with domain: int(0..2) (representing constraint ((x_00007_00008=5) + (x_00008_00008=5)))
c Both direct and order encoding.
c Var 'aux846' order represents '0' with '3536'
c Var 'aux846' direct represents '0' with '3536'
c Var 'aux846' order represents '1' with '3537'
-3536 3537 0
c Var 'aux846' direct represents '1' with '3538'
3536 -3537 3538 0
-3538 3537 0
-3538 -3536 0
c Var 'aux846' direct represents '2' with '-3537'
3536 3538 -3537 0
c Encoding variable: aux847 with domain: int(0..2) (representing constraint ((x_00002_00008=5) + (x_00006_00008=5)))
c Both direct and order encoding.
c Var 'aux847' order represents '0' with '3539'
c Var 'aux847' direct represents '0' with '3539'
c Var 'aux847' order represents '1' with '3540'
-3539 3540 0
c Var 'aux847' direct represents '1' with '3541'
3539 -3540 3541 0
-3541 3540 0
-3541 -3539 0
c Var 'aux847' direct represents '2' with '-3540'
3539 3541 -3540 0
c Encoding variable: aux848 with domain: int(0..2) (representing constraint ((x_00009_00008=5) + (x_00004_00008=5)))
c Both direct and order encoding.
c Var 'aux848' order represents '0' with '3542'
c Var 'aux848' direct represents '0' with '3542'
c Var 'aux848' order represents '1' with '3543'
-3542 3543 0
c Var 'aux848' direct represents '1' with '3544'
3542 -3543 3544 0
-3544 3543 0
-3544 -3542 0
c Var 'aux848' direct represents '2' with '-3543'
3542 3544 -3543 0
c Encoding variable: aux849 with domain: int(0..3) (representing constraint ((x_00001_00008=5) + aux848))
c Both direct and order encoding.
c Var 'aux849' order represents '0' with '3545'
c Var 'aux849' direct represents '0' with '3545'
c Var 'aux849' order represents '1' with '3546'
-3545 3546 0
c Var 'aux849' direct represents '1' with '3547'
3545 -3546 3547 0
-3547 3546 0
-3547 -3545 0
c Var 'aux849' order represents '2' with '3548'
-3546 3548 0
c Var 'aux849' direct represents '2' with '3549'
3546 -3548 3549 0
-3549 3548 0
-3549 -3546 0
c Var 'aux849' direct represents '3' with '-3548'
3545 3547 3549 -3548 0
c Encoding variable: aux850 with domain: int(0..4) (representing constraint (aux845 + aux847))
c Both direct and order encoding.
c Var 'aux850' order represents '0' with '3550'
c Var 'aux850' direct represents '0' with '3550'
c Var 'aux850' order represents '1' with '3551'
-3550 3551 0
c Var 'aux850' direct represents '1' with '3552'
3550 -3551 3552 0
-3552 3551 0
-3552 -3550 0
c Var 'aux850' order represents '2' with '3553'
-3551 3553 0
c Var 'aux850' direct represents '2' with '3554'
3551 -3553 3554 0
-3554 3553 0
-3554 -3551 0
c Var 'aux850' order represents '3' with '3555'
-3553 3555 0
c Var 'aux850' direct represents '3' with '3556'
3553 -3555 3556 0
-3556 3555 0
-3556 -3553 0
c Var 'aux850' direct represents '4' with '-3555'
3550 3552 3554 3556 -3555 0
c Encoding variable: aux851 with domain: int(0..2) (representing constraint ((x_00003_00008=6) + (x_00005_00008=6)))
c Both direct and order encoding.
c Var 'aux851' order represents '0' with '3557'
c Var 'aux851' direct represents '0' with '3557'
c Var 'aux851' order represents '1' with '3558'
-3557 3558 0
c Var 'aux851' direct represents '1' with '3559'
3557 -3558 3559 0
-3559 3558 0
-3559 -3557 0
c Var 'aux851' direct represents '2' with '-3558'
3557 3559 -3558 0
c Encoding variable: aux852 with domain: int(0..2) (representing constraint ((x_00007_00008=6) + (x_00008_00008=6)))
c Both direct and order encoding.
c Var 'aux852' order represents '0' with '3560'
c Var 'aux852' direct represents '0' with '3560'
c Var 'aux852' order represents '1' with '3561'
-3560 3561 0
c Var 'aux852' direct represents '1' with '3562'
3560 -3561 3562 0
-3562 3561 0
-3562 -3560 0
c Var 'aux852' direct represents '2' with '-3561'
3560 3562 -3561 0
c Encoding variable: aux853 with domain: int(0..2) (representing constraint ((x_00002_00008=6) + (x_00006_00008=6)))
c Both direct and order encoding.
c Var 'aux853' order represents '0' with '3563'
c Var 'aux853' direct represents '0' with '3563'
c Var 'aux853' order represents '1' with '3564'
-3563 3564 0
c Var 'aux853' direct represents '1' with '3565'
3563 -3564 3565 0
-3565 3564 0
-3565 -3563 0
c Var 'aux853' direct represents '2' with '-3564'
3563 3565 -3564 0
c Encoding variable: aux854 with domain: int(0..2) (representing constraint ((x_00009_00008=6) + (x_00004_00008=6)))
c Both direct and order encoding.
c Var 'aux854' order represents '0' with '3566'
c Var 'aux854' direct represents '0' with '3566'
c Var 'aux854' order represents '1' with '3567'
-3566 3567 0
c Var 'aux854' direct represents '1' with '3568'
3566 -3567 3568 0
-3568 3567 0
-3568 -3566 0
c Var 'aux854' direct represents '2' with '-3567'
3566 3568 -3567 0
c Encoding variable: aux855 with domain: int(0..3) (representing constraint ((x_00001_00008=6) + aux854))
c Both direct and order encoding.
c Var 'aux855' order represents '0' with '3569'
c Var 'aux855' direct represents '0' with '3569'
c Var 'aux855' order represents '1' with '3570'
-3569 3570 0
c Var 'aux855' direct represents '1' with '3571'
3569 -3570 3571 0
-3571 3570 0
-3571 -3569 0
c Var 'aux855' order represents '2' with '3572'
-3570 3572 0
c Var 'aux855' direct represents '2' with '3573'
3570 -3572 3573 0
-3573 3572 0
-3573 -3570 0
c Var 'aux855' direct represents '3' with '-3572'
3569 3571 3573 -3572 0
c Encoding variable: aux856 with domain: int(0..4) (representing constraint (aux851 + aux853))
c Both direct and order encoding.
c Var 'aux856' order represents '0' with '3574'
c Var 'aux856' direct represents '0' with '3574'
c Var 'aux856' order represents '1' with '3575'
-3574 3575 0
c Var 'aux856' direct represents '1' with '3576'
3574 -3575 3576 0
-3576 3575 0
-3576 -3574 0
c Var 'aux856' order represents '2' with '3577'
-3575 3577 0
c Var 'aux856' direct represents '2' with '3578'
3575 -3577 3578 0
-3578 3577 0
-3578 -3575 0
c Var 'aux856' order represents '3' with '3579'
-3577 3579 0
c Var 'aux856' direct represents '3' with '3580'
3577 -3579 3580 0
-3580 3579 0
-3580 -3577 0
c Var 'aux856' direct represents '4' with '-3579'
3574 3576 3578 3580 -3579 0
c Encoding variable: aux857 with domain: int(0..2) (representing constraint ((x_00003_00008=7) + (x_00005_00008=7)))
c Both direct and order encoding.
c Var 'aux857' order represents '0' with '3581'
c Var 'aux857' direct represents '0' with '3581'
c Var 'aux857' order represents '1' with '3582'
-3581 3582 0
c Var 'aux857' direct represents '1' with '3583'
3581 -3582 3583 0
-3583 3582 0
-3583 -3581 0
c Var 'aux857' direct represents '2' with '-3582'
3581 3583 -3582 0
c Encoding variable: aux858 with domain: int(0..2) (representing constraint ((x_00007_00008=7) + (x_00008_00008=7)))
c Both direct and order encoding.
c Var 'aux858' order represents '0' with '3584'
c Var 'aux858' direct represents '0' with '3584'
c Var 'aux858' order represents '1' with '3585'
-3584 3585 0
c Var 'aux858' direct represents '1' with '3586'
3584 -3585 3586 0
-3586 3585 0
-3586 -3584 0
c Var 'aux858' direct represents '2' with '-3585'
3584 3586 -3585 0
c Encoding variable: aux859 with domain: int(0..2) (representing constraint ((x_00002_00008=7) + (x_00006_00008=7)))
c Both direct and order encoding.
c Var 'aux859' order represents '0' with '3587'
c Var 'aux859' direct represents '0' with '3587'
c Var 'aux859' order represents '1' with '3588'
-3587 3588 0
c Var 'aux859' direct represents '1' with '3589'
3587 -3588 3589 0
-3589 3588 0
-3589 -3587 0
c Var 'aux859' direct represents '2' with '-3588'
3587 3589 -3588 0
c Encoding variable: aux860 with domain: int(0..2) (representing constraint ((x_00009_00008=7) + (x_00004_00008=7)))
c Both direct and order encoding.
c Var 'aux860' order represents '0' with '3590'
c Var 'aux860' direct represents '0' with '3590'
c Var 'aux860' order represents '1' with '3591'
-3590 3591 0
c Var 'aux860' direct represents '1' with '3592'
3590 -3591 3592 0
-3592 3591 0
-3592 -3590 0
c Var 'aux860' direct represents '2' with '-3591'
3590 3592 -3591 0
c Encoding variable: aux861 with domain: int(0..3) (representing constraint ((x_00001_00008=7) + aux860))
c Both direct and order encoding.
c Var 'aux861' order represents '0' with '3593'
c Var 'aux861' direct represents '0' with '3593'
c Var 'aux861' order represents '1' with '3594'
-3593 3594 0
c Var 'aux861' direct represents '1' with '3595'
3593 -3594 3595 0
-3595 3594 0
-3595 -3593 0
c Var 'aux861' order represents '2' with '3596'
-3594 3596 0
c Var 'aux861' direct represents '2' with '3597'
3594 -3596 3597 0
-3597 3596 0
-3597 -3594 0
c Var 'aux861' direct represents '3' with '-3596'
3593 3595 3597 -3596 0
c Encoding variable: aux862 with domain: int(0..4) (representing constraint (aux857 + aux859))
c Both direct and order encoding.
c Var 'aux862' order represents '0' with '3598'
c Var 'aux862' direct represents '0' with '3598'
c Var 'aux862' order represents '1' with '3599'
-3598 3599 0
c Var 'aux862' direct represents '1' with '3600'
3598 -3599 3600 0
-3600 3599 0
-3600 -3598 0
c Var 'aux862' order represents '2' with '3601'
-3599 3601 0
c Var 'aux862' direct represents '2' with '3602'
3599 -3601 3602 0
-3602 3601 0
-3602 -3599 0
c Var 'aux862' order represents '3' with '3603'
-3601 3603 0
c Var 'aux862' direct represents '3' with '3604'
3601 -3603 3604 0
-3604 3603 0
-3604 -3601 0
c Var 'aux862' direct represents '4' with '-3603'
3598 3600 3602 3604 -3603 0
c Encoding variable: aux863 with domain: int(0..2) (representing constraint ((x_00003_00008=8) + (x_00005_00008=8)))
c Both direct and order encoding.
c Var 'aux863' order represents '0' with '3605'
c Var 'aux863' direct represents '0' with '3605'
c Var 'aux863' order represents '1' with '3606'
-3605 3606 0
c Var 'aux863' direct represents '1' with '3607'
3605 -3606 3607 0
-3607 3606 0
-3607 -3605 0
c Var 'aux863' direct represents '2' with '-3606'
3605 3607 -3606 0
c Encoding variable: aux864 with domain: int(0..2) (representing constraint ((x_00007_00008=8) + (x_00008_00008=8)))
c Both direct and order encoding.
c Var 'aux864' order represents '0' with '3608'
c Var 'aux864' direct represents '0' with '3608'
c Var 'aux864' order represents '1' with '3609'
-3608 3609 0
c Var 'aux864' direct represents '1' with '3610'
3608 -3609 3610 0
-3610 3609 0
-3610 -3608 0
c Var 'aux864' direct represents '2' with '-3609'
3608 3610 -3609 0
c Encoding variable: aux865 with domain: int(0..2) (representing constraint ((x_00002_00008=8) + (x_00006_00008=8)))
c Both direct and order encoding.
c Var 'aux865' order represents '0' with '3611'
c Var 'aux865' direct represents '0' with '3611'
c Var 'aux865' order represents '1' with '3612'
-3611 3612 0
c Var 'aux865' direct represents '1' with '3613'
3611 -3612 3613 0
-3613 3612 0
-3613 -3611 0
c Var 'aux865' direct represents '2' with '-3612'
3611 3613 -3612 0
c Encoding variable: aux866 with domain: int(0..2) (representing constraint ((x_00009_00008=8) + (x_00004_00008=8)))
c Both direct and order encoding.
c Var 'aux866' order represents '0' with '3614'
c Var 'aux866' direct represents '0' with '3614'
c Var 'aux866' order represents '1' with '3615'
-3614 3615 0
c Var 'aux866' direct represents '1' with '3616'
3614 -3615 3616 0
-3616 3615 0
-3616 -3614 0
c Var 'aux866' direct represents '2' with '-3615'
3614 3616 -3615 0
c Encoding variable: aux867 with domain: int(0..3) (representing constraint ((x_00001_00008=8) + aux866))
c Both direct and order encoding.
c Var 'aux867' order represents '0' with '3617'
c Var 'aux867' direct represents '0' with '3617'
c Var 'aux867' order represents '1' with '3618'
-3617 3618 0
c Var 'aux867' direct represents '1' with '3619'
3617 -3618 3619 0
-3619 3618 0
-3619 -3617 0
c Var 'aux867' order represents '2' with '3620'
-3618 3620 0
c Var 'aux867' direct represents '2' with '3621'
3618 -3620 3621 0
-3621 3620 0
-3621 -3618 0
c Var 'aux867' direct represents '3' with '-3620'
3617 3619 3621 -3620 0
c Encoding variable: aux868 with domain: int(0..4) (representing constraint (aux863 + aux865))
c Both direct and order encoding.
c Var 'aux868' order represents '0' with '3622'
c Var 'aux868' direct represents '0' with '3622'
c Var 'aux868' order represents '1' with '3623'
-3622 3623 0
c Var 'aux868' direct represents '1' with '3624'
3622 -3623 3624 0
-3624 3623 0
-3624 -3622 0
c Var 'aux868' order represents '2' with '3625'
-3623 3625 0
c Var 'aux868' direct represents '2' with '3626'
3623 -3625 3626 0
-3626 3625 0
-3626 -3623 0
c Var 'aux868' order represents '3' with '3627'
-3625 3627 0
c Var 'aux868' direct represents '3' with '3628'
3625 -3627 3628 0
-3628 3627 0
-3628 -3625 0
c Var 'aux868' direct represents '4' with '-3627'
3622 3624 3626 3628 -3627 0
c Encoding variable: aux869 with domain: int(0..2) (representing constraint ((x_00003_00008=9) + (x_00005_00008=9)))
c Both direct and order encoding.
c Var 'aux869' order represents '0' with '3629'
c Var 'aux869' direct represents '0' with '3629'
c Var 'aux869' order represents '1' with '3630'
-3629 3630 0
c Var 'aux869' direct represents '1' with '3631'
3629 -3630 3631 0
-3631 3630 0
-3631 -3629 0
c Var 'aux869' direct represents '2' with '-3630'
3629 3631 -3630 0
c Encoding variable: aux870 with domain: int(0..2) (representing constraint ((x_00007_00008=9) + (x_00008_00008=9)))
c Both direct and order encoding.
c Var 'aux870' order represents '0' with '3632'
c Var 'aux870' direct represents '0' with '3632'
c Var 'aux870' order represents '1' with '3633'
-3632 3633 0
c Var 'aux870' direct represents '1' with '3634'
3632 -3633 3634 0
-3634 3633 0
-3634 -3632 0
c Var 'aux870' direct represents '2' with '-3633'
3632 3634 -3633 0
c Encoding variable: aux871 with domain: int(0..2) (representing constraint ((x_00002_00008=9) + (x_00006_00008=9)))
c Both direct and order encoding.
c Var 'aux871' order represents '0' with '3635'
c Var 'aux871' direct represents '0' with '3635'
c Var 'aux871' order represents '1' with '3636'
-3635 3636 0
c Var 'aux871' direct represents '1' with '3637'
3635 -3636 3637 0
-3637 3636 0
-3637 -3635 0
c Var 'aux871' direct represents '2' with '-3636'
3635 3637 -3636 0
c Encoding variable: aux872 with domain: int(0..2) (representing constraint ((x_00009_00008=9) + (x_00004_00008=9)))
c Both direct and order encoding.
c Var 'aux872' order represents '0' with '3638'
c Var 'aux872' direct represents '0' with '3638'
c Var 'aux872' order represents '1' with '3639'
-3638 3639 0
c Var 'aux872' direct represents '1' with '3640'
3638 -3639 3640 0
-3640 3639 0
-3640 -3638 0
c Var 'aux872' direct represents '2' with '-3639'
3638 3640 -3639 0
c Encoding variable: aux873 with domain: int(0..3) (representing constraint ((x_00001_00008=9) + aux872))
c Both direct and order encoding.
c Var 'aux873' order represents '0' with '3641'
c Var 'aux873' direct represents '0' with '3641'
c Var 'aux873' order represents '1' with '3642'
-3641 3642 0
c Var 'aux873' direct represents '1' with '3643'
3641 -3642 3643 0
-3643 3642 0
-3643 -3641 0
c Var 'aux873' order represents '2' with '3644'
-3642 3644 0
c Var 'aux873' direct represents '2' with '3645'
3642 -3644 3645 0
-3645 3644 0
-3645 -3642 0
c Var 'aux873' direct represents '3' with '-3644'
3641 3643 3645 -3644 0
c Encoding variable: aux874 with domain: int(0..4) (representing constraint (aux869 + aux871))
c Both direct and order encoding.
c Var 'aux874' order represents '0' with '3646'
c Var 'aux874' direct represents '0' with '3646'
c Var 'aux874' order represents '1' with '3647'
-3646 3647 0
c Var 'aux874' direct represents '1' with '3648'
3646 -3647 3648 0
-3648 3647 0
-3648 -3646 0
c Var 'aux874' order represents '2' with '3649'
-3647 3649 0
c Var 'aux874' direct represents '2' with '3650'
3647 -3649 3650 0
-3650 3649 0
-3650 -3647 0
c Var 'aux874' order represents '3' with '3651'
-3649 3651 0
c Var 'aux874' direct represents '3' with '3652'
3649 -3651 3652 0
-3652 3651 0
-3652 -3649 0
c Var 'aux874' direct represents '4' with '-3651'
3646 3648 3650 3652 -3651 0
c Encoding variable: aux875 with domain: int(0..2) (representing constraint ((x_00003_00009=1) + (x_00005_00009=1)))
c Both direct and order encoding.
c Var 'aux875' order represents '0' with '3653'
c Var 'aux875' direct represents '0' with '3653'
c Var 'aux875' order represents '1' with '3654'
-3653 3654 0
c Var 'aux875' direct represents '1' with '3655'
3653 -3654 3655 0
-3655 3654 0
-3655 -3653 0
c Var 'aux875' direct represents '2' with '-3654'
3653 3655 -3654 0
c Encoding variable: aux876 with domain: int(0..2) (representing constraint ((x_00007_00009=1) + (x_00008_00009=1)))
c Both direct and order encoding.
c Var 'aux876' order represents '0' with '3656'
c Var 'aux876' direct represents '0' with '3656'
c Var 'aux876' order represents '1' with '3657'
-3656 3657 0
c Var 'aux876' direct represents '1' with '3658'
3656 -3657 3658 0
-3658 3657 0
-3658 -3656 0
c Var 'aux876' direct represents '2' with '-3657'
3656 3658 -3657 0
c Encoding variable: aux877 with domain: int(0..2) (representing constraint ((x_00002_00009=1) + (x_00006_00009=1)))
c Both direct and order encoding.
c Var 'aux877' order represents '0' with '3659'
c Var 'aux877' direct represents '0' with '3659'
c Var 'aux877' order represents '1' with '3660'
-3659 3660 0
c Var 'aux877' direct represents '1' with '3661'
3659 -3660 3661 0
-3661 3660 0
-3661 -3659 0
c Var 'aux877' direct represents '2' with '-3660'
3659 3661 -3660 0
c Encoding variable: aux878 with domain: int(0..2) (representing constraint ((x_00009_00009=1) + (x_00004_00009=1)))
c Both direct and order encoding.
c Var 'aux878' order represents '0' with '3662'
c Var 'aux878' direct represents '0' with '3662'
c Var 'aux878' order represents '1' with '3663'
-3662 3663 0
c Var 'aux878' direct represents '1' with '3664'
3662 -3663 3664 0
-3664 3663 0
-3664 -3662 0
c Var 'aux878' direct represents '2' with '-3663'
3662 3664 -3663 0
c Encoding variable: aux879 with domain: int(0..3) (representing constraint ((x_00001_00009=1) + aux878))
c Both direct and order encoding.
c Var 'aux879' order represents '0' with '3665'
c Var 'aux879' direct represents '0' with '3665'
c Var 'aux879' order represents '1' with '3666'
-3665 3666 0
c Var 'aux879' direct represents '1' with '3667'
3665 -3666 3667 0
-3667 3666 0
-3667 -3665 0
c Var 'aux879' order represents '2' with '3668'
-3666 3668 0
c Var 'aux879' direct represents '2' with '3669'
3666 -3668 3669 0
-3669 3668 0
-3669 -3666 0
c Var 'aux879' direct represents '3' with '-3668'
3665 3667 3669 -3668 0
c Encoding variable: aux880 with domain: int(0..4) (representing constraint (aux875 + aux877))
c Both direct and order encoding.
c Var 'aux880' order represents '0' with '3670'
c Var 'aux880' direct represents '0' with '3670'
c Var 'aux880' order represents '1' with '3671'
-3670 3671 0
c Var 'aux880' direct represents '1' with '3672'
3670 -3671 3672 0
-3672 3671 0
-3672 -3670 0
c Var 'aux880' order represents '2' with '3673'
-3671 3673 0
c Var 'aux880' direct represents '2' with '3674'
3671 -3673 3674 0
-3674 3673 0
-3674 -3671 0
c Var 'aux880' order represents '3' with '3675'
-3673 3675 0
c Var 'aux880' direct represents '3' with '3676'
3673 -3675 3676 0
-3676 3675 0
-3676 -3673 0
c Var 'aux880' direct represents '4' with '-3675'
3670 3672 3674 3676 -3675 0
c Encoding variable: aux881 with domain: int(0..2) (representing constraint ((x_00003_00009=2) + (x_00005_00009=2)))
c Both direct and order encoding.
c Var 'aux881' order represents '0' with '3677'
c Var 'aux881' direct represents '0' with '3677'
c Var 'aux881' order represents '1' with '3678'
-3677 3678 0
c Var 'aux881' direct represents '1' with '3679'
3677 -3678 3679 0
-3679 3678 0
-3679 -3677 0
c Var 'aux881' direct represents '2' with '-3678'
3677 3679 -3678 0
c Encoding variable: aux882 with domain: int(0..2) (representing constraint ((x_00007_00009=2) + (x_00008_00009=2)))
c Both direct and order encoding.
c Var 'aux882' order represents '0' with '3680'
c Var 'aux882' direct represents '0' with '3680'
c Var 'aux882' order represents '1' with '3681'
-3680 3681 0
c Var 'aux882' direct represents '1' with '3682'
3680 -3681 3682 0
-3682 3681 0
-3682 -3680 0
c Var 'aux882' direct represents '2' with '-3681'
3680 3682 -3681 0
c Encoding variable: aux883 with domain: int(0..2) (representing constraint ((x_00002_00009=2) + (x_00006_00009=2)))
c Both direct and order encoding.
c Var 'aux883' order represents '0' with '3683'
c Var 'aux883' direct represents '0' with '3683'
c Var 'aux883' order represents '1' with '3684'
-3683 3684 0
c Var 'aux883' direct represents '1' with '3685'
3683 -3684 3685 0
-3685 3684 0
-3685 -3683 0
c Var 'aux883' direct represents '2' with '-3684'
3683 3685 -3684 0
c Encoding variable: aux884 with domain: int(0..2) (representing constraint ((x_00009_00009=2) + (x_00004_00009=2)))
c Both direct and order encoding.
c Var 'aux884' order represents '0' with '3686'
c Var 'aux884' direct represents '0' with '3686'
c Var 'aux884' order represents '1' with '3687'
-3686 3687 0
c Var 'aux884' direct represents '1' with '3688'
3686 -3687 3688 0
-3688 3687 0
-3688 -3686 0
c Var 'aux884' direct represents '2' with '-3687'
3686 3688 -3687 0
c Encoding variable: aux885 with domain: int(0..3) (representing constraint ((x_00001_00009=2) + aux884))
c Both direct and order encoding.
c Var 'aux885' order represents '0' with '3689'
c Var 'aux885' direct represents '0' with '3689'
c Var 'aux885' order represents '1' with '3690'
-3689 3690 0
c Var 'aux885' direct represents '1' with '3691'
3689 -3690 3691 0
-3691 3690 0
-3691 -3689 0
c Var 'aux885' order represents '2' with '3692'
-3690 3692 0
c Var 'aux885' direct represents '2' with '3693'
3690 -3692 3693 0
-3693 3692 0
-3693 -3690 0
c Var 'aux885' direct represents '3' with '-3692'
3689 3691 3693 -3692 0
c Encoding variable: aux886 with domain: int(0..4) (representing constraint (aux881 + aux883))
c Both direct and order encoding.
c Var 'aux886' order represents '0' with '3694'
c Var 'aux886' direct represents '0' with '3694'
c Var 'aux886' order represents '1' with '3695'
-3694 3695 0
c Var 'aux886' direct represents '1' with '3696'
3694 -3695 3696 0
-3696 3695 0
-3696 -3694 0
c Var 'aux886' order represents '2' with '3697'
-3695 3697 0
c Var 'aux886' direct represents '2' with '3698'
3695 -3697 3698 0
-3698 3697 0
-3698 -3695 0
c Var 'aux886' order represents '3' with '3699'
-3697 3699 0
c Var 'aux886' direct represents '3' with '3700'
3697 -3699 3700 0
-3700 3699 0
-3700 -3697 0
c Var 'aux886' direct represents '4' with '-3699'
3694 3696 3698 3700 -3699 0
c Encoding variable: aux887 with domain: int(0..2) (representing constraint ((x_00003_00009=3) + (x_00005_00009=3)))
c Both direct and order encoding.
c Var 'aux887' order represents '0' with '3701'
c Var 'aux887' direct represents '0' with '3701'
c Var 'aux887' order represents '1' with '3702'
-3701 3702 0
c Var 'aux887' direct represents '1' with '3703'
3701 -3702 3703 0
-3703 3702 0
-3703 -3701 0
c Var 'aux887' direct represents '2' with '-3702'
3701 3703 -3702 0
c Encoding variable: aux888 with domain: int(0..2) (representing constraint ((x_00007_00009=3) + (x_00008_00009=3)))
c Both direct and order encoding.
c Var 'aux888' order represents '0' with '3704'
c Var 'aux888' direct represents '0' with '3704'
c Var 'aux888' order represents '1' with '3705'
-3704 3705 0
c Var 'aux888' direct represents '1' with '3706'
3704 -3705 3706 0
-3706 3705 0
-3706 -3704 0
c Var 'aux888' direct represents '2' with '-3705'
3704 3706 -3705 0
c Encoding variable: aux889 with domain: int(0..2) (representing constraint ((x_00002_00009=3) + (x_00006_00009=3)))
c Both direct and order encoding.
c Var 'aux889' order represents '0' with '3707'
c Var 'aux889' direct represents '0' with '3707'
c Var 'aux889' order represents '1' with '3708'
-3707 3708 0
c Var 'aux889' direct represents '1' with '3709'
3707 -3708 3709 0
-3709 3708 0
-3709 -3707 0
c Var 'aux889' direct represents '2' with '-3708'
3707 3709 -3708 0
c Encoding variable: aux890 with domain: int(0..2) (representing constraint ((x_00009_00009=3) + (x_00004_00009=3)))
c Both direct and order encoding.
c Var 'aux890' order represents '0' with '3710'
c Var 'aux890' direct represents '0' with '3710'
c Var 'aux890' order represents '1' with '3711'
-3710 3711 0
c Var 'aux890' direct represents '1' with '3712'
3710 -3711 3712 0
-3712 3711 0
-3712 -3710 0
c Var 'aux890' direct represents '2' with '-3711'
3710 3712 -3711 0
c Encoding variable: aux891 with domain: int(0..3) (representing constraint ((x_00001_00009=3) + aux890))
c Both direct and order encoding.
c Var 'aux891' order represents '0' with '3713'
c Var 'aux891' direct represents '0' with '3713'
c Var 'aux891' order represents '1' with '3714'
-3713 3714 0
c Var 'aux891' direct represents '1' with '3715'
3713 -3714 3715 0
-3715 3714 0
-3715 -3713 0
c Var 'aux891' order represents '2' with '3716'
-3714 3716 0
c Var 'aux891' direct represents '2' with '3717'
3714 -3716 3717 0
-3717 3716 0
-3717 -3714 0
c Var 'aux891' direct represents '3' with '-3716'
3713 3715 3717 -3716 0
c Encoding variable: aux892 with domain: int(0..4) (representing constraint (aux887 + aux889))
c Both direct and order encoding.
c Var 'aux892' order represents '0' with '3718'
c Var 'aux892' direct represents '0' with '3718'
c Var 'aux892' order represents '1' with '3719'
-3718 3719 0
c Var 'aux892' direct represents '1' with '3720'
3718 -3719 3720 0
-3720 3719 0
-3720 -3718 0
c Var 'aux892' order represents '2' with '3721'
-3719 3721 0
c Var 'aux892' direct represents '2' with '3722'
3719 -3721 3722 0
-3722 3721 0
-3722 -3719 0
c Var 'aux892' order represents '3' with '3723'
-3721 3723 0
c Var 'aux892' direct represents '3' with '3724'
3721 -3723 3724 0
-3724 3723 0
-3724 -3721 0
c Var 'aux892' direct represents '4' with '-3723'
3718 3720 3722 3724 -3723 0
c Encoding variable: aux893 with domain: int(0..2) (representing constraint ((x_00003_00009=4) + (x_00005_00009=4)))
c Both direct and order encoding.
c Var 'aux893' order represents '0' with '3725'
c Var 'aux893' direct represents '0' with '3725'
c Var 'aux893' order represents '1' with '3726'
-3725 3726 0
c Var 'aux893' direct represents '1' with '3727'
3725 -3726 3727 0
-3727 3726 0
-3727 -3725 0
c Var 'aux893' direct represents '2' with '-3726'
3725 3727 -3726 0
c Encoding variable: aux894 with domain: int(0..2) (representing constraint ((x_00007_00009=4) + (x_00008_00009=4)))
c Both direct and order encoding.
c Var 'aux894' order represents '0' with '3728'
c Var 'aux894' direct represents '0' with '3728'
c Var 'aux894' order represents '1' with '3729'
-3728 3729 0
c Var 'aux894' direct represents '1' with '3730'
3728 -3729 3730 0
-3730 3729 0
-3730 -3728 0
c Var 'aux894' direct represents '2' with '-3729'
3728 3730 -3729 0
c Encoding variable: aux895 with domain: int(0..2) (representing constraint ((x_00002_00009=4) + (x_00006_00009=4)))
c Both direct and order encoding.
c Var 'aux895' order represents '0' with '3731'
c Var 'aux895' direct represents '0' with '3731'
c Var 'aux895' order represents '1' with '3732'
-3731 3732 0
c Var 'aux895' direct represents '1' with '3733'
3731 -3732 3733 0
-3733 3732 0
-3733 -3731 0
c Var 'aux895' direct represents '2' with '-3732'
3731 3733 -3732 0
c Encoding variable: aux896 with domain: int(0..2) (representing constraint ((x_00009_00009=4) + (x_00004_00009=4)))
c Both direct and order encoding.
c Var 'aux896' order represents '0' with '3734'
c Var 'aux896' direct represents '0' with '3734'
c Var 'aux896' order represents '1' with '3735'
-3734 3735 0
c Var 'aux896' direct represents '1' with '3736'
3734 -3735 3736 0
-3736 3735 0
-3736 -3734 0
c Var 'aux896' direct represents '2' with '-3735'
3734 3736 -3735 0
c Encoding variable: aux897 with domain: int(0..3) (representing constraint ((x_00001_00009=4) + aux896))
c Both direct and order encoding.
c Var 'aux897' order represents '0' with '3737'
c Var 'aux897' direct represents '0' with '3737'
c Var 'aux897' order represents '1' with '3738'
-3737 3738 0
c Var 'aux897' direct represents '1' with '3739'
3737 -3738 3739 0
-3739 3738 0
-3739 -3737 0
c Var 'aux897' order represents '2' with '3740'
-3738 3740 0
c Var 'aux897' direct represents '2' with '3741'
3738 -3740 3741 0
-3741 3740 0
-3741 -3738 0
c Var 'aux897' direct represents '3' with '-3740'
3737 3739 3741 -3740 0
c Encoding variable: aux898 with domain: int(0..4) (representing constraint (aux893 + aux895))
c Both direct and order encoding.
c Var 'aux898' order represents '0' with '3742'
c Var 'aux898' direct represents '0' with '3742'
c Var 'aux898' order represents '1' with '3743'
-3742 3743 0
c Var 'aux898' direct represents '1' with '3744'
3742 -3743 3744 0
-3744 3743 0
-3744 -3742 0
c Var 'aux898' order represents '2' with '3745'
-3743 3745 0
c Var 'aux898' direct represents '2' with '3746'
3743 -3745 3746 0
-3746 3745 0
-3746 -3743 0
c Var 'aux898' order represents '3' with '3747'
-3745 3747 0
c Var 'aux898' direct represents '3' with '3748'
3745 -3747 3748 0
-3748 3747 0
-3748 -3745 0
c Var 'aux898' direct represents '4' with '-3747'
3742 3744 3746 3748 -3747 0
c Encoding variable: aux899 with domain: int(0..2) (representing constraint ((x_00003_00009=5) + (x_00005_00009=5)))
c Both direct and order encoding.
c Var 'aux899' order represents '0' with '3749'
c Var 'aux899' direct represents '0' with '3749'
c Var 'aux899' order represents '1' with '3750'
-3749 3750 0
c Var 'aux899' direct represents '1' with '3751'
3749 -3750 3751 0
-3751 3750 0
-3751 -3749 0
c Var 'aux899' direct represents '2' with '-3750'
3749 3751 -3750 0
c Encoding variable: aux900 with domain: int(0..2) (representing constraint ((x_00007_00009=5) + (x_00008_00009=5)))
c Both direct and order encoding.
c Var 'aux900' order represents '0' with '3752'
c Var 'aux900' direct represents '0' with '3752'
c Var 'aux900' order represents '1' with '3753'
-3752 3753 0
c Var 'aux900' direct represents '1' with '3754'
3752 -3753 3754 0
-3754 3753 0
-3754 -3752 0
c Var 'aux900' direct represents '2' with '-3753'
3752 3754 -3753 0
c Encoding variable: aux901 with domain: int(0..2) (representing constraint ((x_00002_00009=5) + (x_00006_00009=5)))
c Both direct and order encoding.
c Var 'aux901' order represents '0' with '3755'
c Var 'aux901' direct represents '0' with '3755'
c Var 'aux901' order represents '1' with '3756'
-3755 3756 0
c Var 'aux901' direct represents '1' with '3757'
3755 -3756 3757 0
-3757 3756 0
-3757 -3755 0
c Var 'aux901' direct represents '2' with '-3756'
3755 3757 -3756 0
c Encoding variable: aux902 with domain: int(0..2) (representing constraint ((x_00009_00009=5) + (x_00004_00009=5)))
c Both direct and order encoding.
c Var 'aux902' order represents '0' with '3758'
c Var 'aux902' direct represents '0' with '3758'
c Var 'aux902' order represents '1' with '3759'
-3758 3759 0
c Var 'aux902' direct represents '1' with '3760'
3758 -3759 3760 0
-3760 3759 0
-3760 -3758 0
c Var 'aux902' direct represents '2' with '-3759'
3758 3760 -3759 0
c Encoding variable: aux903 with domain: int(0..3) (representing constraint ((x_00001_00009=5) + aux902))
c Both direct and order encoding.
c Var 'aux903' order represents '0' with '3761'
c Var 'aux903' direct represents '0' with '3761'
c Var 'aux903' order represents '1' with '3762'
-3761 3762 0
c Var 'aux903' direct represents '1' with '3763'
3761 -3762 3763 0
-3763 3762 0
-3763 -3761 0
c Var 'aux903' order represents '2' with '3764'
-3762 3764 0
c Var 'aux903' direct represents '2' with '3765'
3762 -3764 3765 0
-3765 3764 0
-3765 -3762 0
c Var 'aux903' direct represents '3' with '-3764'
3761 3763 3765 -3764 0
c Encoding variable: aux904 with domain: int(0..4) (representing constraint (aux899 + aux901))
c Both direct and order encoding.
c Var 'aux904' order represents '0' with '3766'
c Var 'aux904' direct represents '0' with '3766'
c Var 'aux904' order represents '1' with '3767'
-3766 3767 0
c Var 'aux904' direct represents '1' with '3768'
3766 -3767 3768 0
-3768 3767 0
-3768 -3766 0
c Var 'aux904' order represents '2' with '3769'
-3767 3769 0
c Var 'aux904' direct represents '2' with '3770'
3767 -3769 3770 0
-3770 3769 0
-3770 -3767 0
c Var 'aux904' order represents '3' with '3771'
-3769 3771 0
c Var 'aux904' direct represents '3' with '3772'
3769 -3771 3772 0
-3772 3771 0
-3772 -3769 0
c Var 'aux904' direct represents '4' with '-3771'
3766 3768 3770 3772 -3771 0
c Encoding variable: aux905 with domain: int(0..2) (representing constraint ((x_00003_00009=6) + (x_00005_00009=6)))
c Both direct and order encoding.
c Var 'aux905' order represents '0' with '3773'
c Var 'aux905' direct represents '0' with '3773'
c Var 'aux905' order represents '1' with '3774'
-3773 3774 0
c Var 'aux905' direct represents '1' with '3775'
3773 -3774 3775 0
-3775 3774 0
-3775 -3773 0
c Var 'aux905' direct represents '2' with '-3774'
3773 3775 -3774 0
c Encoding variable: aux906 with domain: int(0..2) (representing constraint ((x_00007_00009=6) + (x_00008_00009=6)))
c Both direct and order encoding.
c Var 'aux906' order represents '0' with '3776'
c Var 'aux906' direct represents '0' with '3776'
c Var 'aux906' order represents '1' with '3777'
-3776 3777 0
c Var 'aux906' direct represents '1' with '3778'
3776 -3777 3778 0
-3778 3777 0
-3778 -3776 0
c Var 'aux906' direct represents '2' with '-3777'
3776 3778 -3777 0
c Encoding variable: aux907 with domain: int(0..2) (representing constraint ((x_00002_00009=6) + (x_00006_00009=6)))
c Both direct and order encoding.
c Var 'aux907' order represents '0' with '3779'
c Var 'aux907' direct represents '0' with '3779'
c Var 'aux907' order represents '1' with '3780'
-3779 3780 0
c Var 'aux907' direct represents '1' with '3781'
3779 -3780 3781 0
-3781 3780 0
-3781 -3779 0
c Var 'aux907' direct represents '2' with '-3780'
3779 3781 -3780 0
c Encoding variable: aux908 with domain: int(0..2) (representing constraint ((x_00009_00009=6) + (x_00004_00009=6)))
c Both direct and order encoding.
c Var 'aux908' order represents '0' with '3782'
c Var 'aux908' direct represents '0' with '3782'
c Var 'aux908' order represents '1' with '3783'
-3782 3783 0
c Var 'aux908' direct represents '1' with '3784'
3782 -3783 3784 0
-3784 3783 0
-3784 -3782 0
c Var 'aux908' direct represents '2' with '-3783'
3782 3784 -3783 0
c Encoding variable: aux909 with domain: int(0..3) (representing constraint ((x_00001_00009=6) + aux908))
c Both direct and order encoding.
c Var 'aux909' order represents '0' with '3785'
c Var 'aux909' direct represents '0' with '3785'
c Var 'aux909' order represents '1' with '3786'
-3785 3786 0
c Var 'aux909' direct represents '1' with '3787'
3785 -3786 3787 0
-3787 3786 0
-3787 -3785 0
c Var 'aux909' order represents '2' with '3788'
-3786 3788 0
c Var 'aux909' direct represents '2' with '3789'
3786 -3788 3789 0
-3789 3788 0
-3789 -3786 0
c Var 'aux909' direct represents '3' with '-3788'
3785 3787 3789 -3788 0
c Encoding variable: aux910 with domain: int(0..4) (representing constraint (aux905 + aux907))
c Both direct and order encoding.
c Var 'aux910' order represents '0' with '3790'
c Var 'aux910' direct represents '0' with '3790'
c Var 'aux910' order represents '1' with '3791'
-3790 3791 0
c Var 'aux910' direct represents '1' with '3792'
3790 -3791 3792 0
-3792 3791 0
-3792 -3790 0
c Var 'aux910' order represents '2' with '3793'
-3791 3793 0
c Var 'aux910' direct represents '2' with '3794'
3791 -3793 3794 0
-3794 3793 0
-3794 -3791 0
c Var 'aux910' order represents '3' with '3795'
-3793 3795 0
c Var 'aux910' direct represents '3' with '3796'
3793 -3795 3796 0
-3796 3795 0
-3796 -3793 0
c Var 'aux910' direct represents '4' with '-3795'
3790 3792 3794 3796 -3795 0
c Encoding variable: aux911 with domain: int(0..2) (representing constraint ((x_00003_00009=7) + (x_00005_00009=7)))
c Both direct and order encoding.
c Var 'aux911' order represents '0' with '3797'
c Var 'aux911' direct represents '0' with '3797'
c Var 'aux911' order represents '1' with '3798'
-3797 3798 0
c Var 'aux911' direct represents '1' with '3799'
3797 -3798 3799 0
-3799 3798 0
-3799 -3797 0
c Var 'aux911' direct represents '2' with '-3798'
3797 3799 -3798 0
c Encoding variable: aux912 with domain: int(0..2) (representing constraint ((x_00007_00009=7) + (x_00008_00009=7)))
c Both direct and order encoding.
c Var 'aux912' order represents '0' with '3800'
c Var 'aux912' direct represents '0' with '3800'
c Var 'aux912' order represents '1' with '3801'
-3800 3801 0
c Var 'aux912' direct represents '1' with '3802'
3800 -3801 3802 0
-3802 3801 0
-3802 -3800 0
c Var 'aux912' direct represents '2' with '-3801'
3800 3802 -3801 0
c Encoding variable: aux913 with domain: int(0..2) (representing constraint ((x_00002_00009=7) + (x_00006_00009=7)))
c Both direct and order encoding.
c Var 'aux913' order represents '0' with '3803'
c Var 'aux913' direct represents '0' with '3803'
c Var 'aux913' order represents '1' with '3804'
-3803 3804 0
c Var 'aux913' direct represents '1' with '3805'
3803 -3804 3805 0
-3805 3804 0
-3805 -3803 0
c Var 'aux913' direct represents '2' with '-3804'
3803 3805 -3804 0
c Encoding variable: aux914 with domain: int(0..2) (representing constraint ((x_00009_00009=7) + (x_00004_00009=7)))
c Both direct and order encoding.
c Var 'aux914' order represents '0' with '3806'
c Var 'aux914' direct represents '0' with '3806'
c Var 'aux914' order represents '1' with '3807'
-3806 3807 0
c Var 'aux914' direct represents '1' with '3808'
3806 -3807 3808 0
-3808 3807 0
-3808 -3806 0
c Var 'aux914' direct represents '2' with '-3807'
3806 3808 -3807 0
c Encoding variable: aux915 with domain: int(0..3) (representing constraint ((x_00001_00009=7) + aux914))
c Both direct and order encoding.
c Var 'aux915' order represents '0' with '3809'
c Var 'aux915' direct represents '0' with '3809'
c Var 'aux915' order represents '1' with '3810'
-3809 3810 0
c Var 'aux915' direct represents '1' with '3811'
3809 -3810 3811 0
-3811 3810 0
-3811 -3809 0
c Var 'aux915' order represents '2' with '3812'
-3810 3812 0
c Var 'aux915' direct represents '2' with '3813'
3810 -3812 3813 0
-3813 3812 0
-3813 -3810 0
c Var 'aux915' direct represents '3' with '-3812'
3809 3811 3813 -3812 0
c Encoding variable: aux916 with domain: int(0..4) (representing constraint (aux911 + aux913))
c Both direct and order encoding.
c Var 'aux916' order represents '0' with '3814'
c Var 'aux916' direct represents '0' with '3814'
c Var 'aux916' order represents '1' with '3815'
-3814 3815 0
c Var 'aux916' direct represents '1' with '3816'
3814 -3815 3816 0
-3816 3815 0
-3816 -3814 0
c Var 'aux916' order represents '2' with '3817'
-3815 3817 0
c Var 'aux916' direct represents '2' with '3818'
3815 -3817 3818 0
-3818 3817 0
-3818 -3815 0
c Var 'aux916' order represents '3' with '3819'
-3817 3819 0
c Var 'aux916' direct represents '3' with '3820'
3817 -3819 3820 0
-3820 3819 0
-3820 -3817 0
c Var 'aux916' direct represents '4' with '-3819'
3814 3816 3818 3820 -3819 0
c Encoding variable: aux917 with domain: int(0..2) (representing constraint ((x_00003_00009=8) + (x_00005_00009=8)))
c Both direct and order encoding.
c Var 'aux917' order represents '0' with '3821'
c Var 'aux917' direct represents '0' with '3821'
c Var 'aux917' order represents '1' with '3822'
-3821 3822 0
c Var 'aux917' direct represents '1' with '3823'
3821 -3822 3823 0
-3823 3822 0
-3823 -3821 0
c Var 'aux917' direct represents '2' with '-3822'
3821 3823 -3822 0
c Encoding variable: aux918 with domain: int(0..2) (representing constraint ((x_00007_00009=8) + (x_00008_00009=8)))
c Both direct and order encoding.
c Var 'aux918' order represents '0' with '3824'
c Var 'aux918' direct represents '0' with '3824'
c Var 'aux918' order represents '1' with '3825'
-3824 3825 0
c Var 'aux918' direct represents '1' with '3826'
3824 -3825 3826 0
-3826 3825 0
-3826 -3824 0
c Var 'aux918' direct represents '2' with '-3825'
3824 3826 -3825 0
c Encoding variable: aux919 with domain: int(0..2) (representing constraint ((x_00002_00009=8) + (x_00006_00009=8)))
c Both direct and order encoding.
c Var 'aux919' order represents '0' with '3827'
c Var 'aux919' direct represents '0' with '3827'
c Var 'aux919' order represents '1' with '3828'
-3827 3828 0
c Var 'aux919' direct represents '1' with '3829'
3827 -3828 3829 0
-3829 3828 0
-3829 -3827 0
c Var 'aux919' direct represents '2' with '-3828'
3827 3829 -3828 0
c Encoding variable: aux920 with domain: int(0..2) (representing constraint ((x_00009_00009=8) + (x_00004_00009=8)))
c Both direct and order encoding.
c Var 'aux920' order represents '0' with '3830'
c Var 'aux920' direct represents '0' with '3830'
c Var 'aux920' order represents '1' with '3831'
-3830 3831 0
c Var 'aux920' direct represents '1' with '3832'
3830 -3831 3832 0
-3832 3831 0
-3832 -3830 0
c Var 'aux920' direct represents '2' with '-3831'
3830 3832 -3831 0
c Encoding variable: aux921 with domain: int(0..3) (representing constraint ((x_00001_00009=8) + aux920))
c Both direct and order encoding.
c Var 'aux921' order represents '0' with '3833'
c Var 'aux921' direct represents '0' with '3833'
c Var 'aux921' order represents '1' with '3834'
-3833 3834 0
c Var 'aux921' direct represents '1' with '3835'
3833 -3834 3835 0
-3835 3834 0
-3835 -3833 0
c Var 'aux921' order represents '2' with '3836'
-3834 3836 0
c Var 'aux921' direct represents '2' with '3837'
3834 -3836 3837 0
-3837 3836 0
-3837 -3834 0
c Var 'aux921' direct represents '3' with '-3836'
3833 3835 3837 -3836 0
c Encoding variable: aux922 with domain: int(0..4) (representing constraint (aux917 + aux919))
c Both direct and order encoding.
c Var 'aux922' order represents '0' with '3838'
c Var 'aux922' direct represents '0' with '3838'
c Var 'aux922' order represents '1' with '3839'
-3838 3839 0
c Var 'aux922' direct represents '1' with '3840'
3838 -3839 3840 0
-3840 3839 0
-3840 -3838 0
c Var 'aux922' order represents '2' with '3841'
-3839 3841 0
c Var 'aux922' direct represents '2' with '3842'
3839 -3841 3842 0
-3842 3841 0
-3842 -3839 0
c Var 'aux922' order represents '3' with '3843'
-3841 3843 0
c Var 'aux922' direct represents '3' with '3844'
3841 -3843 3844 0
-3844 3843 0
-3844 -3841 0
c Var 'aux922' direct represents '4' with '-3843'
3838 3840 3842 3844 -3843 0
c Encoding variable: aux923 with domain: int(0..2) (representing constraint ((x_00003_00009=9) + (x_00005_00009=9)))
c Both direct and order encoding.
c Var 'aux923' order represents '0' with '3845'
c Var 'aux923' direct represents '0' with '3845'
c Var 'aux923' order represents '1' with '3846'
-3845 3846 0
c Var 'aux923' direct represents '1' with '3847'
3845 -3846 3847 0
-3847 3846 0
-3847 -3845 0
c Var 'aux923' direct represents '2' with '-3846'
3845 3847 -3846 0
c Encoding variable: aux924 with domain: int(0..2) (representing constraint ((x_00007_00009=9) + (x_00008_00009=9)))
c Both direct and order encoding.
c Var 'aux924' order represents '0' with '3848'
c Var 'aux924' direct represents '0' with '3848'
c Var 'aux924' order represents '1' with '3849'
-3848 3849 0
c Var 'aux924' direct represents '1' with '3850'
3848 -3849 3850 0
-3850 3849 0
-3850 -3848 0
c Var 'aux924' direct represents '2' with '-3849'
3848 3850 -3849 0
c Encoding variable: aux925 with domain: int(0..2) (representing constraint ((x_00002_00009=9) + (x_00006_00009=9)))
c Both direct and order encoding.
c Var 'aux925' order represents '0' with '3851'
c Var 'aux925' direct represents '0' with '3851'
c Var 'aux925' order represents '1' with '3852'
-3851 3852 0
c Var 'aux925' direct represents '1' with '3853'
3851 -3852 3853 0
-3853 3852 0
-3853 -3851 0
c Var 'aux925' direct represents '2' with '-3852'
3851 3853 -3852 0
c Encoding variable: aux926 with domain: int(0..2) (representing constraint ((x_00009_00009=9) + (x_00004_00009=9)))
c Both direct and order encoding.
c Var 'aux926' order represents '0' with '3854'
c Var 'aux926' direct represents '0' with '3854'
c Var 'aux926' order represents '1' with '3855'
-3854 3855 0
c Var 'aux926' direct represents '1' with '3856'
3854 -3855 3856 0
-3856 3855 0
-3856 -3854 0
c Var 'aux926' direct represents '2' with '-3855'
3854 3856 -3855 0
c Encoding variable: aux927 with domain: int(0..3) (representing constraint ((x_00001_00009=9) + aux926))
c Both direct and order encoding.
c Var 'aux927' order represents '0' with '3857'
c Var 'aux927' direct represents '0' with '3857'
c Var 'aux927' order represents '1' with '3858'
-3857 3858 0
c Var 'aux927' direct represents '1' with '3859'
3857 -3858 3859 0
-3859 3858 0
-3859 -3857 0
c Var 'aux927' order represents '2' with '3860'
-3858 3860 0
c Var 'aux927' direct represents '2' with '3861'
3858 -3860 3861 0
-3861 3860 0
-3861 -3858 0
c Var 'aux927' direct represents '3' with '-3860'
3857 3859 3861 -3860 0
c Encoding variable: aux928 with domain: int(0..4) (representing constraint (aux923 + aux925))
c Both direct and order encoding.
c Var 'aux928' order represents '0' with '3862'
c Var 'aux928' direct represents '0' with '3862'
c Var 'aux928' order represents '1' with '3863'
-3862 3863 0
c Var 'aux928' direct represents '1' with '3864'
3862 -3863 3864 0
-3864 3863 0
-3864 -3862 0
c Var 'aux928' order represents '2' with '3865'
-3863 3865 0
c Var 'aux928' direct represents '2' with '3866'
3863 -3865 3866 0
-3866 3865 0
-3866 -3863 0
c Var 'aux928' order represents '3' with '3867'
-3865 3867 0
c Var 'aux928' direct represents '3' with '3868'
3865 -3867 3868 0
-3868 3867 0
-3868 -3865 0
c Var 'aux928' direct represents '4' with '-3867'
3862 3864 3866 3868 -3867 0
c Encoding variable: aux929 with domain: int(0..2) (representing constraint ((x_00001_00001=1) + (x_00001_00009=1)))
c Both direct and order encoding.
c Var 'aux929' order represents '0' with '3869'
c Var 'aux929' direct represents '0' with '3869'
c Var 'aux929' order represents '1' with '3870'
-3869 3870 0
c Var 'aux929' direct represents '1' with '3871'
3869 -3870 3871 0
-3871 3870 0
-3871 -3869 0
c Var 'aux929' direct represents '2' with '-3870'
3869 3871 -3870 0
c Encoding variable: aux930 with domain: int(0..2) (representing constraint ((x_00001_00008=1) + (x_00001_00002=1)))
c Both direct and order encoding.
c Var 'aux930' order represents '0' with '3872'
c Var 'aux930' direct represents '0' with '3872'
c Var 'aux930' order represents '1' with '3873'
-3872 3873 0
c Var 'aux930' direct represents '1' with '3874'
3872 -3873 3874 0
-3874 3873 0
-3874 -3872 0
c Var 'aux930' direct represents '2' with '-3873'
3872 3874 -3873 0
c Encoding variable: aux931 with domain: int(0..2) (representing constraint ((x_00001_00007=1) + (x_00001_00004=1)))
c Both direct and order encoding.
c Var 'aux931' order represents '0' with '3875'
c Var 'aux931' direct represents '0' with '3875'
c Var 'aux931' order represents '1' with '3876'
-3875 3876 0
c Var 'aux931' direct represents '1' with '3877'
3875 -3876 3877 0
-3877 3876 0
-3877 -3875 0
c Var 'aux931' direct represents '2' with '-3876'
3875 3877 -3876 0
c Encoding variable: aux932 with domain: int(0..2) (representing constraint ((x_00001_00006=1) + (x_00001_00005=1)))
c Both direct and order encoding.
c Var 'aux932' order represents '0' with '3878'
c Var 'aux932' direct represents '0' with '3878'
c Var 'aux932' order represents '1' with '3879'
-3878 3879 0
c Var 'aux932' direct represents '1' with '3880'
3878 -3879 3880 0
-3880 3879 0
-3880 -3878 0
c Var 'aux932' direct represents '2' with '-3879'
3878 3880 -3879 0
c Encoding variable: aux933 with domain: int(0..3) (representing constraint ((x_00001_00003=1) + aux932))
c Both direct and order encoding.
c Var 'aux933' order represents '0' with '3881'
c Var 'aux933' direct represents '0' with '3881'
c Var 'aux933' order represents '1' with '3882'
-3881 3882 0
c Var 'aux933' direct represents '1' with '3883'
3881 -3882 3883 0
-3883 3882 0
-3883 -3881 0
c Var 'aux933' order represents '2' with '3884'
-3882 3884 0
c Var 'aux933' direct represents '2' with '3885'
3882 -3884 3885 0
-3885 3884 0
-3885 -3882 0
c Var 'aux933' direct represents '3' with '-3884'
3881 3883 3885 -3884 0
c Encoding variable: aux934 with domain: int(0..4) (representing constraint (aux929 + aux931))
c Both direct and order encoding.
c Var 'aux934' order represents '0' with '3886'
c Var 'aux934' direct represents '0' with '3886'
c Var 'aux934' order represents '1' with '3887'
-3886 3887 0
c Var 'aux934' direct represents '1' with '3888'
3886 -3887 3888 0
-3888 3887 0
-3888 -3886 0
c Var 'aux934' order represents '2' with '3889'
-3887 3889 0
c Var 'aux934' direct represents '2' with '3890'
3887 -3889 3890 0
-3890 3889 0
-3890 -3887 0
c Var 'aux934' order represents '3' with '3891'
-3889 3891 0
c Var 'aux934' direct represents '3' with '3892'
3889 -3891 3892 0
-3892 3891 0
-3892 -3889 0
c Var 'aux934' direct represents '4' with '-3891'
3886 3888 3890 3892 -3891 0
c Encoding variable: aux935 with domain: int(0..2) (representing constraint ((x_00001_00001=2) + (x_00001_00009=2)))
c Both direct and order encoding.
c Var 'aux935' order represents '0' with '3893'
c Var 'aux935' direct represents '0' with '3893'
c Var 'aux935' order represents '1' with '3894'
-3893 3894 0
c Var 'aux935' direct represents '1' with '3895'
3893 -3894 3895 0
-3895 3894 0
-3895 -3893 0
c Var 'aux935' direct represents '2' with '-3894'
3893 3895 -3894 0
c Encoding variable: aux936 with domain: int(0..2) (representing constraint ((x_00001_00008=2) + (x_00001_00002=2)))
c Both direct and order encoding.
c Var 'aux936' order represents '0' with '3896'
c Var 'aux936' direct represents '0' with '3896'
c Var 'aux936' order represents '1' with '3897'
-3896 3897 0
c Var 'aux936' direct represents '1' with '3898'
3896 -3897 3898 0
-3898 3897 0
-3898 -3896 0
c Var 'aux936' direct represents '2' with '-3897'
3896 3898 -3897 0
c Encoding variable: aux937 with domain: int(0..2) (representing constraint ((x_00001_00007=2) + (x_00001_00004=2)))
c Both direct and order encoding.
c Var 'aux937' order represents '0' with '3899'
c Var 'aux937' direct represents '0' with '3899'
c Var 'aux937' order represents '1' with '3900'
-3899 3900 0
c Var 'aux937' direct represents '1' with '3901'
3899 -3900 3901 0
-3901 3900 0
-3901 -3899 0
c Var 'aux937' direct represents '2' with '-3900'
3899 3901 -3900 0
c Encoding variable: aux938 with domain: int(0..2) (representing constraint ((x_00001_00006=2) + (x_00001_00005=2)))
c Both direct and order encoding.
c Var 'aux938' order represents '0' with '3902'
c Var 'aux938' direct represents '0' with '3902'
c Var 'aux938' order represents '1' with '3903'
-3902 3903 0
c Var 'aux938' direct represents '1' with '3904'
3902 -3903 3904 0
-3904 3903 0
-3904 -3902 0
c Var 'aux938' direct represents '2' with '-3903'
3902 3904 -3903 0
c Encoding variable: aux939 with domain: int(0..3) (representing constraint ((x_00001_00003=2) + aux938))
c Both direct and order encoding.
c Var 'aux939' order represents '0' with '3905'
c Var 'aux939' direct represents '0' with '3905'
c Var 'aux939' order represents '1' with '3906'
-3905 3906 0
c Var 'aux939' direct represents '1' with '3907'
3905 -3906 3907 0
-3907 3906 0
-3907 -3905 0
c Var 'aux939' order represents '2' with '3908'
-3906 3908 0
c Var 'aux939' direct represents '2' with '3909'
3906 -3908 3909 0
-3909 3908 0
-3909 -3906 0
c Var 'aux939' direct represents '3' with '-3908'
3905 3907 3909 -3908 0
c Encoding variable: aux940 with domain: int(0..4) (representing constraint (aux935 + aux937))
c Both direct and order encoding.
c Var 'aux940' order represents '0' with '3910'
c Var 'aux940' direct represents '0' with '3910'
c Var 'aux940' order represents '1' with '3911'
-3910 3911 0
c Var 'aux940' direct represents '1' with '3912'
3910 -3911 3912 0
-3912 3911 0
-3912 -3910 0
c Var 'aux940' order represents '2' with '3913'
-3911 3913 0
c Var 'aux940' direct represents '2' with '3914'
3911 -3913 3914 0
-3914 3913 0
-3914 -3911 0
c Var 'aux940' order represents '3' with '3915'
-3913 3915 0
c Var 'aux940' direct represents '3' with '3916'
3913 -3915 3916 0
-3916 3915 0
-3916 -3913 0
c Var 'aux940' direct represents '4' with '-3915'
3910 3912 3914 3916 -3915 0
c Encoding variable: aux941 with domain: int(0..2) (representing constraint ((x_00001_00001=3) + (x_00001_00009=3)))
c Both direct and order encoding.
c Var 'aux941' order represents '0' with '3917'
c Var 'aux941' direct represents '0' with '3917'
c Var 'aux941' order represents '1' with '3918'
-3917 3918 0
c Var 'aux941' direct represents '1' with '3919'
3917 -3918 3919 0
-3919 3918 0
-3919 -3917 0
c Var 'aux941' direct represents '2' with '-3918'
3917 3919 -3918 0
c Encoding variable: aux942 with domain: int(0..2) (representing constraint ((x_00001_00008=3) + (x_00001_00002=3)))
c Both direct and order encoding.
c Var 'aux942' order represents '0' with '3920'
c Var 'aux942' direct represents '0' with '3920'
c Var 'aux942' order represents '1' with '3921'
-3920 3921 0
c Var 'aux942' direct represents '1' with '3922'
3920 -3921 3922 0
-3922 3921 0
-3922 -3920 0
c Var 'aux942' direct represents '2' with '-3921'
3920 3922 -3921 0
c Encoding variable: aux943 with domain: int(0..2) (representing constraint ((x_00001_00007=3) + (x_00001_00004=3)))
c Both direct and order encoding.
c Var 'aux943' order represents '0' with '3923'
c Var 'aux943' direct represents '0' with '3923'
c Var 'aux943' order represents '1' with '3924'
-3923 3924 0
c Var 'aux943' direct represents '1' with '3925'
3923 -3924 3925 0
-3925 3924 0
-3925 -3923 0
c Var 'aux943' direct represents '2' with '-3924'
3923 3925 -3924 0
c Encoding variable: aux944 with domain: int(0..2) (representing constraint ((x_00001_00006=3) + (x_00001_00005=3)))
c Both direct and order encoding.
c Var 'aux944' order represents '0' with '3926'
c Var 'aux944' direct represents '0' with '3926'
c Var 'aux944' order represents '1' with '3927'
-3926 3927 0
c Var 'aux944' direct represents '1' with '3928'
3926 -3927 3928 0
-3928 3927 0
-3928 -3926 0
c Var 'aux944' direct represents '2' with '-3927'
3926 3928 -3927 0
c Encoding variable: aux945 with domain: int(0..3) (representing constraint ((x_00001_00003=3) + aux944))
c Both direct and order encoding.
c Var 'aux945' order represents '0' with '3929'
c Var 'aux945' direct represents '0' with '3929'
c Var 'aux945' order represents '1' with '3930'
-3929 3930 0
c Var 'aux945' direct represents '1' with '3931'
3929 -3930 3931 0
-3931 3930 0
-3931 -3929 0
c Var 'aux945' order represents '2' with '3932'
-3930 3932 0
c Var 'aux945' direct represents '2' with '3933'
3930 -3932 3933 0
-3933 3932 0
-3933 -3930 0
c Var 'aux945' direct represents '3' with '-3932'
3929 3931 3933 -3932 0
c Encoding variable: aux946 with domain: int(0..4) (representing constraint (aux941 + aux943))
c Both direct and order encoding.
c Var 'aux946' order represents '0' with '3934'
c Var 'aux946' direct represents '0' with '3934'
c Var 'aux946' order represents '1' with '3935'
-3934 3935 0
c Var 'aux946' direct represents '1' with '3936'
3934 -3935 3936 0
-3936 3935 0
-3936 -3934 0
c Var 'aux946' order represents '2' with '3937'
-3935 3937 0
c Var 'aux946' direct represents '2' with '3938'
3935 -3937 3938 0
-3938 3937 0
-3938 -3935 0
c Var 'aux946' order represents '3' with '3939'
-3937 3939 0
c Var 'aux946' direct represents '3' with '3940'
3937 -3939 3940 0
-3940 3939 0
-3940 -3937 0
c Var 'aux946' direct represents '4' with '-3939'
3934 3936 3938 3940 -3939 0
c Encoding variable: aux947 with domain: int(0..2) (representing constraint ((x_00001_00001=4) + (x_00001_00009=4)))
c Both direct and order encoding.
c Var 'aux947' order represents '0' with '3941'
c Var 'aux947' direct represents '0' with '3941'
c Var 'aux947' order represents '1' with '3942'
-3941 3942 0
c Var 'aux947' direct represents '1' with '3943'
3941 -3942 3943 0
-3943 3942 0
-3943 -3941 0
c Var 'aux947' direct represents '2' with '-3942'
3941 3943 -3942 0
c Encoding variable: aux948 with domain: int(0..2) (representing constraint ((x_00001_00008=4) + (x_00001_00002=4)))
c Both direct and order encoding.
c Var 'aux948' order represents '0' with '3944'
c Var 'aux948' direct represents '0' with '3944'
c Var 'aux948' order represents '1' with '3945'
-3944 3945 0
c Var 'aux948' direct represents '1' with '3946'
3944 -3945 3946 0
-3946 3945 0
-3946 -3944 0
c Var 'aux948' direct represents '2' with '-3945'
3944 3946 -3945 0
c Encoding variable: aux949 with domain: int(0..2) (representing constraint ((x_00001_00007=4) + (x_00001_00004=4)))
c Both direct and order encoding.
c Var 'aux949' order represents '0' with '3947'
c Var 'aux949' direct represents '0' with '3947'
c Var 'aux949' order represents '1' with '3948'
-3947 3948 0
c Var 'aux949' direct represents '1' with '3949'
3947 -3948 3949 0
-3949 3948 0
-3949 -3947 0
c Var 'aux949' direct represents '2' with '-3948'
3947 3949 -3948 0
c Encoding variable: aux950 with domain: int(0..2) (representing constraint ((x_00001_00006=4) + (x_00001_00005=4)))
c Both direct and order encoding.
c Var 'aux950' order represents '0' with '3950'
c Var 'aux950' direct represents '0' with '3950'
c Var 'aux950' order represents '1' with '3951'
-3950 3951 0
c Var 'aux950' direct represents '1' with '3952'
3950 -3951 3952 0
-3952 3951 0
-3952 -3950 0
c Var 'aux950' direct represents '2' with '-3951'
3950 3952 -3951 0
c Encoding variable: aux951 with domain: int(0..3) (representing constraint ((x_00001_00003=4) + aux950))
c Both direct and order encoding.
c Var 'aux951' order represents '0' with '3953'
c Var 'aux951' direct represents '0' with '3953'
c Var 'aux951' order represents '1' with '3954'
-3953 3954 0
c Var 'aux951' direct represents '1' with '3955'
3953 -3954 3955 0
-3955 3954 0
-3955 -3953 0
c Var 'aux951' order represents '2' with '3956'
-3954 3956 0
c Var 'aux951' direct represents '2' with '3957'
3954 -3956 3957 0
-3957 3956 0
-3957 -3954 0
c Var 'aux951' direct represents '3' with '-3956'
3953 3955 3957 -3956 0
c Encoding variable: aux952 with domain: int(0..4) (representing constraint (aux947 + aux949))
c Both direct and order encoding.
c Var 'aux952' order represents '0' with '3958'
c Var 'aux952' direct represents '0' with '3958'
c Var 'aux952' order represents '1' with '3959'
-3958 3959 0
c Var 'aux952' direct represents '1' with '3960'
3958 -3959 3960 0
-3960 3959 0
-3960 -3958 0
c Var 'aux952' order represents '2' with '3961'
-3959 3961 0
c Var 'aux952' direct represents '2' with '3962'
3959 -3961 3962 0
-3962 3961 0
-3962 -3959 0
c Var 'aux952' order represents '3' with '3963'
-3961 3963 0
c Var 'aux952' direct represents '3' with '3964'
3961 -3963 3964 0
-3964 3963 0
-3964 -3961 0
c Var 'aux952' direct represents '4' with '-3963'
3958 3960 3962 3964 -3963 0
c Encoding variable: aux953 with domain: int(0..2) (representing constraint ((x_00001_00001=5) + (x_00001_00009=5)))
c Both direct and order encoding.
c Var 'aux953' order represents '0' with '3965'
c Var 'aux953' direct represents '0' with '3965'
c Var 'aux953' order represents '1' with '3966'
-3965 3966 0
c Var 'aux953' direct represents '1' with '3967'
3965 -3966 3967 0
-3967 3966 0
-3967 -3965 0
c Var 'aux953' direct represents '2' with '-3966'
3965 3967 -3966 0
c Encoding variable: aux954 with domain: int(0..2) (representing constraint ((x_00001_00008=5) + (x_00001_00002=5)))
c Both direct and order encoding.
c Var 'aux954' order represents '0' with '3968'
c Var 'aux954' direct represents '0' with '3968'
c Var 'aux954' order represents '1' with '3969'
-3968 3969 0
c Var 'aux954' direct represents '1' with '3970'
3968 -3969 3970 0
-3970 3969 0
-3970 -3968 0
c Var 'aux954' direct represents '2' with '-3969'
3968 3970 -3969 0
c Encoding variable: aux955 with domain: int(0..2) (representing constraint ((x_00001_00007=5) + (x_00001_00004=5)))
c Both direct and order encoding.
c Var 'aux955' order represents '0' with '3971'
c Var 'aux955' direct represents '0' with '3971'
c Var 'aux955' order represents '1' with '3972'
-3971 3972 0
c Var 'aux955' direct represents '1' with '3973'
3971 -3972 3973 0
-3973 3972 0
-3973 -3971 0
c Var 'aux955' direct represents '2' with '-3972'
3971 3973 -3972 0
c Encoding variable: aux956 with domain: int(0..2) (representing constraint ((x_00001_00006=5) + (x_00001_00005=5)))
c Both direct and order encoding.
c Var 'aux956' order represents '0' with '3974'
c Var 'aux956' direct represents '0' with '3974'
c Var 'aux956' order represents '1' with '3975'
-3974 3975 0
c Var 'aux956' direct represents '1' with '3976'
3974 -3975 3976 0
-3976 3975 0
-3976 -3974 0
c Var 'aux956' direct represents '2' with '-3975'
3974 3976 -3975 0
c Encoding variable: aux957 with domain: int(0..3) (representing constraint ((x_00001_00003=5) + aux956))
c Both direct and order encoding.
c Var 'aux957' order represents '0' with '3977'
c Var 'aux957' direct represents '0' with '3977'
c Var 'aux957' order represents '1' with '3978'
-3977 3978 0
c Var 'aux957' direct represents '1' with '3979'
3977 -3978 3979 0
-3979 3978 0
-3979 -3977 0
c Var 'aux957' order represents '2' with '3980'
-3978 3980 0
c Var 'aux957' direct represents '2' with '3981'
3978 -3980 3981 0
-3981 3980 0
-3981 -3978 0
c Var 'aux957' direct represents '3' with '-3980'
3977 3979 3981 -3980 0
c Encoding variable: aux958 with domain: int(0..4) (representing constraint (aux953 + aux955))
c Both direct and order encoding.
c Var 'aux958' order represents '0' with '3982'
c Var 'aux958' direct represents '0' with '3982'
c Var 'aux958' order represents '1' with '3983'
-3982 3983 0
c Var 'aux958' direct represents '1' with '3984'
3982 -3983 3984 0
-3984 3983 0
-3984 -3982 0
c Var 'aux958' order represents '2' with '3985'
-3983 3985 0
c Var 'aux958' direct represents '2' with '3986'
3983 -3985 3986 0
-3986 3985 0
-3986 -3983 0
c Var 'aux958' order represents '3' with '3987'
-3985 3987 0
c Var 'aux958' direct represents '3' with '3988'
3985 -3987 3988 0
-3988 3987 0
-3988 -3985 0
c Var 'aux958' direct represents '4' with '-3987'
3982 3984 3986 3988 -3987 0
c Encoding variable: aux959 with domain: int(0..2) (representing constraint ((x_00001_00001=6) + (x_00001_00009=6)))
c Both direct and order encoding.
c Var 'aux959' order represents '0' with '3989'
c Var 'aux959' direct represents '0' with '3989'
c Var 'aux959' order represents '1' with '3990'
-3989 3990 0
c Var 'aux959' direct represents '1' with '3991'
3989 -3990 3991 0
-3991 3990 0
-3991 -3989 0
c Var 'aux959' direct represents '2' with '-3990'
3989 3991 -3990 0
c Encoding variable: aux960 with domain: int(0..2) (representing constraint ((x_00001_00008=6) + (x_00001_00002=6)))
c Both direct and order encoding.
c Var 'aux960' order represents '0' with '3992'
c Var 'aux960' direct represents '0' with '3992'
c Var 'aux960' order represents '1' with '3993'
-3992 3993 0
c Var 'aux960' direct represents '1' with '3994'
3992 -3993 3994 0
-3994 3993 0
-3994 -3992 0
c Var 'aux960' direct represents '2' with '-3993'
3992 3994 -3993 0
c Encoding variable: aux961 with domain: int(0..2) (representing constraint ((x_00001_00007=6) + (x_00001_00004=6)))
c Both direct and order encoding.
c Var 'aux961' order represents '0' with '3995'
c Var 'aux961' direct represents '0' with '3995'
c Var 'aux961' order represents '1' with '3996'
-3995 3996 0
c Var 'aux961' direct represents '1' with '3997'
3995 -3996 3997 0
-3997 3996 0
-3997 -3995 0
c Var 'aux961' direct represents '2' with '-3996'
3995 3997 -3996 0
c Encoding variable: aux962 with domain: int(0..2) (representing constraint ((x_00001_00006=6) + (x_00001_00005=6)))
c Both direct and order encoding.
c Var 'aux962' order represents '0' with '3998'
c Var 'aux962' direct represents '0' with '3998'
c Var 'aux962' order represents '1' with '3999'
-3998 3999 0
c Var 'aux962' direct represents '1' with '4000'
3998 -3999 4000 0
-4000 3999 0
-4000 -3998 0
c Var 'aux962' direct represents '2' with '-3999'
3998 4000 -3999 0
c Encoding variable: aux963 with domain: int(0..3) (representing constraint ((x_00001_00003=6) + aux962))
c Both direct and order encoding.
c Var 'aux963' order represents '0' with '4001'
c Var 'aux963' direct represents '0' with '4001'
c Var 'aux963' order represents '1' with '4002'
-4001 4002 0
c Var 'aux963' direct represents '1' with '4003'
4001 -4002 4003 0
-4003 4002 0
-4003 -4001 0
c Var 'aux963' order represents '2' with '4004'
-4002 4004 0
c Var 'aux963' direct represents '2' with '4005'
4002 -4004 4005 0
-4005 4004 0
-4005 -4002 0
c Var 'aux963' direct represents '3' with '-4004'
4001 4003 4005 -4004 0
c Encoding variable: aux964 with domain: int(0..4) (representing constraint (aux959 + aux961))
c Both direct and order encoding.
c Var 'aux964' order represents '0' with '4006'
c Var 'aux964' direct represents '0' with '4006'
c Var 'aux964' order represents '1' with '4007'
-4006 4007 0
c Var 'aux964' direct represents '1' with '4008'
4006 -4007 4008 0
-4008 4007 0
-4008 -4006 0
c Var 'aux964' order represents '2' with '4009'
-4007 4009 0
c Var 'aux964' direct represents '2' with '4010'
4007 -4009 4010 0
-4010 4009 0
-4010 -4007 0
c Var 'aux964' order represents '3' with '4011'
-4009 4011 0
c Var 'aux964' direct represents '3' with '4012'
4009 -4011 4012 0
-4012 4011 0
-4012 -4009 0
c Var 'aux964' direct represents '4' with '-4011'
4006 4008 4010 4012 -4011 0
c Encoding variable: aux965 with domain: int(0..2) (representing constraint ((x_00001_00001=7) + (x_00001_00009=7)))
c Both direct and order encoding.
c Var 'aux965' order represents '0' with '4013'
c Var 'aux965' direct represents '0' with '4013'
c Var 'aux965' order represents '1' with '4014'
-4013 4014 0
c Var 'aux965' direct represents '1' with '4015'
4013 -4014 4015 0
-4015 4014 0
-4015 -4013 0
c Var 'aux965' direct represents '2' with '-4014'
4013 4015 -4014 0
c Encoding variable: aux966 with domain: int(0..2) (representing constraint ((x_00001_00008=7) + (x_00001_00002=7)))
c Both direct and order encoding.
c Var 'aux966' order represents '0' with '4016'
c Var 'aux966' direct represents '0' with '4016'
c Var 'aux966' order represents '1' with '4017'
-4016 4017 0
c Var 'aux966' direct represents '1' with '4018'
4016 -4017 4018 0
-4018 4017 0
-4018 -4016 0
c Var 'aux966' direct represents '2' with '-4017'
4016 4018 -4017 0
c Encoding variable: aux967 with domain: int(0..2) (representing constraint ((x_00001_00007=7) + (x_00001_00004=7)))
c Both direct and order encoding.
c Var 'aux967' order represents '0' with '4019'
c Var 'aux967' direct represents '0' with '4019'
c Var 'aux967' order represents '1' with '4020'
-4019 4020 0
c Var 'aux967' direct represents '1' with '4021'
4019 -4020 4021 0
-4021 4020 0
-4021 -4019 0
c Var 'aux967' direct represents '2' with '-4020'
4019 4021 -4020 0
c Encoding variable: aux968 with domain: int(0..2) (representing constraint ((x_00001_00006=7) + (x_00001_00005=7)))
c Both direct and order encoding.
c Var 'aux968' order represents '0' with '4022'
c Var 'aux968' direct represents '0' with '4022'
c Var 'aux968' order represents '1' with '4023'
-4022 4023 0
c Var 'aux968' direct represents '1' with '4024'
4022 -4023 4024 0
-4024 4023 0
-4024 -4022 0
c Var 'aux968' direct represents '2' with '-4023'
4022 4024 -4023 0
c Encoding variable: aux969 with domain: int(0..3) (representing constraint ((x_00001_00003=7) + aux968))
c Both direct and order encoding.
c Var 'aux969' order represents '0' with '4025'
c Var 'aux969' direct represents '0' with '4025'
c Var 'aux969' order represents '1' with '4026'
-4025 4026 0
c Var 'aux969' direct represents '1' with '4027'
4025 -4026 4027 0
-4027 4026 0
-4027 -4025 0
c Var 'aux969' order represents '2' with '4028'
-4026 4028 0
c Var 'aux969' direct represents '2' with '4029'
4026 -4028 4029 0
-4029 4028 0
-4029 -4026 0
c Var 'aux969' direct represents '3' with '-4028'
4025 4027 4029 -4028 0
c Encoding variable: aux970 with domain: int(0..4) (representing constraint (aux965 + aux967))
c Both direct and order encoding.
c Var 'aux970' order represents '0' with '4030'
c Var 'aux970' direct represents '0' with '4030'
c Var 'aux970' order represents '1' with '4031'
-4030 4031 0
c Var 'aux970' direct represents '1' with '4032'
4030 -4031 4032 0
-4032 4031 0
-4032 -4030 0
c Var 'aux970' order represents '2' with '4033'
-4031 4033 0
c Var 'aux970' direct represents '2' with '4034'
4031 -4033 4034 0
-4034 4033 0
-4034 -4031 0
c Var 'aux970' order represents '3' with '4035'
-4033 4035 0
c Var 'aux970' direct represents '3' with '4036'
4033 -4035 4036 0
-4036 4035 0
-4036 -4033 0
c Var 'aux970' direct represents '4' with '-4035'
4030 4032 4034 4036 -4035 0
c Encoding variable: aux971 with domain: int(0..2) (representing constraint ((x_00001_00001=8) + (x_00001_00009=8)))
c Both direct and order encoding.
c Var 'aux971' order represents '0' with '4037'
c Var 'aux971' direct represents '0' with '4037'
c Var 'aux971' order represents '1' with '4038'
-4037 4038 0
c Var 'aux971' direct represents '1' with '4039'
4037 -4038 4039 0
-4039 4038 0
-4039 -4037 0
c Var 'aux971' direct represents '2' with '-4038'
4037 4039 -4038 0
c Encoding variable: aux972 with domain: int(0..2) (representing constraint ((x_00001_00008=8) + (x_00001_00002=8)))
c Both direct and order encoding.
c Var 'aux972' order represents '0' with '4040'
c Var 'aux972' direct represents '0' with '4040'
c Var 'aux972' order represents '1' with '4041'
-4040 4041 0
c Var 'aux972' direct represents '1' with '4042'
4040 -4041 4042 0
-4042 4041 0
-4042 -4040 0
c Var 'aux972' direct represents '2' with '-4041'
4040 4042 -4041 0
c Encoding variable: aux973 with domain: int(0..2) (representing constraint ((x_00001_00007=8) + (x_00001_00004=8)))
c Both direct and order encoding.
c Var 'aux973' order represents '0' with '4043'
c Var 'aux973' direct represents '0' with '4043'
c Var 'aux973' order represents '1' with '4044'
-4043 4044 0
c Var 'aux973' direct represents '1' with '4045'
4043 -4044 4045 0
-4045 4044 0
-4045 -4043 0
c Var 'aux973' direct represents '2' with '-4044'
4043 4045 -4044 0
c Encoding variable: aux974 with domain: int(0..2) (representing constraint ((x_00001_00006=8) + (x_00001_00005=8)))
c Both direct and order encoding.
c Var 'aux974' order represents '0' with '4046'
c Var 'aux974' direct represents '0' with '4046'
c Var 'aux974' order represents '1' with '4047'
-4046 4047 0
c Var 'aux974' direct represents '1' with '4048'
4046 -4047 4048 0
-4048 4047 0
-4048 -4046 0
c Var 'aux974' direct represents '2' with '-4047'
4046 4048 -4047 0
c Encoding variable: aux975 with domain: int(0..3) (representing constraint ((x_00001_00003=8) + aux974))
c Both direct and order encoding.
c Var 'aux975' order represents '0' with '4049'
c Var 'aux975' direct represents '0' with '4049'
c Var 'aux975' order represents '1' with '4050'
-4049 4050 0
c Var 'aux975' direct represents '1' with '4051'
4049 -4050 4051 0
-4051 4050 0
-4051 -4049 0
c Var 'aux975' order represents '2' with '4052'
-4050 4052 0
c Var 'aux975' direct represents '2' with '4053'
4050 -4052 4053 0
-4053 4052 0
-4053 -4050 0
c Var 'aux975' direct represents '3' with '-4052'
4049 4051 4053 -4052 0
c Encoding variable: aux976 with domain: int(0..4) (representing constraint (aux971 + aux973))
c Both direct and order encoding.
c Var 'aux976' order represents '0' with '4054'
c Var 'aux976' direct represents '0' with '4054'
c Var 'aux976' order represents '1' with '4055'
-4054 4055 0
c Var 'aux976' direct represents '1' with '4056'
4054 -4055 4056 0
-4056 4055 0
-4056 -4054 0
c Var 'aux976' order represents '2' with '4057'
-4055 4057 0
c Var 'aux976' direct represents '2' with '4058'
4055 -4057 4058 0
-4058 4057 0
-4058 -4055 0
c Var 'aux976' order represents '3' with '4059'
-4057 4059 0
c Var 'aux976' direct represents '3' with '4060'
4057 -4059 4060 0
-4060 4059 0
-4060 -4057 0
c Var 'aux976' direct represents '4' with '-4059'
4054 4056 4058 4060 -4059 0
c Encoding variable: aux977 with domain: int(0..2) (representing constraint ((x_00001_00001=9) + (x_00001_00009=9)))
c Both direct and order encoding.
c Var 'aux977' order represents '0' with '4061'
c Var 'aux977' direct represents '0' with '4061'
c Var 'aux977' order represents '1' with '4062'
-4061 4062 0
c Var 'aux977' direct represents '1' with '4063'
4061 -4062 4063 0
-4063 4062 0
-4063 -4061 0
c Var 'aux977' direct represents '2' with '-4062'
4061 4063 -4062 0
c Encoding variable: aux978 with domain: int(0..2) (representing constraint ((x_00001_00008=9) + (x_00001_00002=9)))
c Both direct and order encoding.
c Var 'aux978' order represents '0' with '4064'
c Var 'aux978' direct represents '0' with '4064'
c Var 'aux978' order represents '1' with '4065'
-4064 4065 0
c Var 'aux978' direct represents '1' with '4066'
4064 -4065 4066 0
-4066 4065 0
-4066 -4064 0
c Var 'aux978' direct represents '2' with '-4065'
4064 4066 -4065 0
c Encoding variable: aux979 with domain: int(0..2) (representing constraint ((x_00001_00007=9) + (x_00001_00004=9)))
c Both direct and order encoding.
c Var 'aux979' order represents '0' with '4067'
c Var 'aux979' direct represents '0' with '4067'
c Var 'aux979' order represents '1' with '4068'
-4067 4068 0
c Var 'aux979' direct represents '1' with '4069'
4067 -4068 4069 0
-4069 4068 0
-4069 -4067 0
c Var 'aux979' direct represents '2' with '-4068'
4067 4069 -4068 0
c Encoding variable: aux980 with domain: int(0..2) (representing constraint ((x_00001_00006=9) + (x_00001_00005=9)))
c Both direct and order encoding.
c Var 'aux980' order represents '0' with '4070'
c Var 'aux980' direct represents '0' with '4070'
c Var 'aux980' order represents '1' with '4071'
-4070 4071 0
c Var 'aux980' direct represents '1' with '4072'
4070 -4071 4072 0
-4072 4071 0
-4072 -4070 0
c Var 'aux980' direct represents '2' with '-4071'
4070 4072 -4071 0
c Encoding variable: aux981 with domain: int(0..3) (representing constraint ((x_00001_00003=9) + aux980))
c Both direct and order encoding.
c Var 'aux981' order represents '0' with '4073'
c Var 'aux981' direct represents '0' with '4073'
c Var 'aux981' order represents '1' with '4074'
-4073 4074 0
c Var 'aux981' direct represents '1' with '4075'
4073 -4074 4075 0
-4075 4074 0
-4075 -4073 0
c Var 'aux981' order represents '2' with '4076'
-4074 4076 0
c Var 'aux981' direct represents '2' with '4077'
4074 -4076 4077 0
-4077 4076 0
-4077 -4074 0
c Var 'aux981' direct represents '3' with '-4076'
4073 4075 4077 -4076 0
c Encoding variable: aux982 with domain: int(0..4) (representing constraint (aux977 + aux979))
c Both direct and order encoding.
c Var 'aux982' order represents '0' with '4078'
c Var 'aux982' direct represents '0' with '4078'
c Var 'aux982' order represents '1' with '4079'
-4078 4079 0
c Var 'aux982' direct represents '1' with '4080'
4078 -4079 4080 0
-4080 4079 0
-4080 -4078 0
c Var 'aux982' order represents '2' with '4081'
-4079 4081 0
c Var 'aux982' direct represents '2' with '4082'
4079 -4081 4082 0
-4082 4081 0
-4082 -4079 0
c Var 'aux982' order represents '3' with '4083'
-4081 4083 0
c Var 'aux982' direct represents '3' with '4084'
4081 -4083 4084 0
-4084 4083 0
-4084 -4081 0
c Var 'aux982' direct represents '4' with '-4083'
4078 4080 4082 4084 -4083 0
c Encoding variable: aux983 with domain: int(0..2) (representing constraint ((x_00002_00001=1) + (x_00002_00009=1)))
c Both direct and order encoding.
c Var 'aux983' order represents '0' with '4085'
c Var 'aux983' direct represents '0' with '4085'
c Var 'aux983' order represents '1' with '4086'
-4085 4086 0
c Var 'aux983' direct represents '1' with '4087'
4085 -4086 4087 0
-4087 4086 0
-4087 -4085 0
c Var 'aux983' direct represents '2' with '-4086'
4085 4087 -4086 0
c Encoding variable: aux984 with domain: int(0..2) (representing constraint ((x_00002_00008=1) + (x_00002_00002=1)))
c Both direct and order encoding.
c Var 'aux984' order represents '0' with '4088'
c Var 'aux984' direct represents '0' with '4088'
c Var 'aux984' order represents '1' with '4089'
-4088 4089 0
c Var 'aux984' direct represents '1' with '4090'
4088 -4089 4090 0
-4090 4089 0
-4090 -4088 0
c Var 'aux984' direct represents '2' with '-4089'
4088 4090 -4089 0
c Encoding variable: aux985 with domain: int(0..2) (representing constraint ((x_00002_00007=1) + (x_00002_00004=1)))
c Both direct and order encoding.
c Var 'aux985' order represents '0' with '4091'
c Var 'aux985' direct represents '0' with '4091'
c Var 'aux985' order represents '1' with '4092'
-4091 4092 0
c Var 'aux985' direct represents '1' with '4093'
4091 -4092 4093 0
-4093 4092 0
-4093 -4091 0
c Var 'aux985' direct represents '2' with '-4092'
4091 4093 -4092 0
c Encoding variable: aux986 with domain: int(0..2) (representing constraint ((x_00002_00006=1) + (x_00002_00005=1)))
c Both direct and order encoding.
c Var 'aux986' order represents '0' with '4094'
c Var 'aux986' direct represents '0' with '4094'
c Var 'aux986' order represents '1' with '4095'
-4094 4095 0
c Var 'aux986' direct represents '1' with '4096'
4094 -4095 4096 0
-4096 4095 0
-4096 -4094 0
c Var 'aux986' direct represents '2' with '-4095'
4094 4096 -4095 0
c Encoding variable: aux987 with domain: int(0..3) (representing constraint ((x_00002_00003=1) + aux986))
c Both direct and order encoding.
c Var 'aux987' order represents '0' with '4097'
c Var 'aux987' direct represents '0' with '4097'
c Var 'aux987' order represents '1' with '4098'
-4097 4098 0
c Var 'aux987' direct represents '1' with '4099'
4097 -4098 4099 0
-4099 4098 0
-4099 -4097 0
c Var 'aux987' order represents '2' with '4100'
-4098 4100 0
c Var 'aux987' direct represents '2' with '4101'
4098 -4100 4101 0
-4101 4100 0
-4101 -4098 0
c Var 'aux987' direct represents '3' with '-4100'
4097 4099 4101 -4100 0
c Encoding variable: aux988 with domain: int(0..4) (representing constraint (aux983 + aux985))
c Both direct and order encoding.
c Var 'aux988' order represents '0' with '4102'
c Var 'aux988' direct represents '0' with '4102'
c Var 'aux988' order represents '1' with '4103'
-4102 4103 0
c Var 'aux988' direct represents '1' with '4104'
4102 -4103 4104 0
-4104 4103 0
-4104 -4102 0
c Var 'aux988' order represents '2' with '4105'
-4103 4105 0
c Var 'aux988' direct represents '2' with '4106'
4103 -4105 4106 0
-4106 4105 0
-4106 -4103 0
c Var 'aux988' order represents '3' with '4107'
-4105 4107 0
c Var 'aux988' direct represents '3' with '4108'
4105 -4107 4108 0
-4108 4107 0
-4108 -4105 0
c Var 'aux988' direct represents '4' with '-4107'
4102 4104 4106 4108 -4107 0
c Encoding variable: aux989 with domain: int(0..2) (representing constraint ((x_00002_00001=2) + (x_00002_00009=2)))
c Both direct and order encoding.
c Var 'aux989' order represents '0' with '4109'
c Var 'aux989' direct represents '0' with '4109'
c Var 'aux989' order represents '1' with '4110'
-4109 4110 0
c Var 'aux989' direct represents '1' with '4111'
4109 -4110 4111 0
-4111 4110 0
-4111 -4109 0
c Var 'aux989' direct represents '2' with '-4110'
4109 4111 -4110 0
c Encoding variable: aux990 with domain: int(0..2) (representing constraint ((x_00002_00008=2) + (x_00002_00002=2)))
c Both direct and order encoding.
c Var 'aux990' order represents '0' with '4112'
c Var 'aux990' direct represents '0' with '4112'
c Var 'aux990' order represents '1' with '4113'
-4112 4113 0
c Var 'aux990' direct represents '1' with '4114'
4112 -4113 4114 0
-4114 4113 0
-4114 -4112 0
c Var 'aux990' direct represents '2' with '-4113'
4112 4114 -4113 0
c Encoding variable: aux991 with domain: int(0..2) (representing constraint ((x_00002_00007=2) + (x_00002_00004=2)))
c Both direct and order encoding.
c Var 'aux991' order represents '0' with '4115'
c Var 'aux991' direct represents '0' with '4115'
c Var 'aux991' order represents '1' with '4116'
-4115 4116 0
c Var 'aux991' direct represents '1' with '4117'
4115 -4116 4117 0
-4117 4116 0
-4117 -4115 0
c Var 'aux991' direct represents '2' with '-4116'
4115 4117 -4116 0
c Encoding variable: aux992 with domain: int(0..2) (representing constraint ((x_00002_00006=2) + (x_00002_00005=2)))
c Both direct and order encoding.
c Var 'aux992' order represents '0' with '4118'
c Var 'aux992' direct represents '0' with '4118'
c Var 'aux992' order represents '1' with '4119'
-4118 4119 0
c Var 'aux992' direct represents '1' with '4120'
4118 -4119 4120 0
-4120 4119 0
-4120 -4118 0
c Var 'aux992' direct represents '2' with '-4119'
4118 4120 -4119 0
c Encoding variable: aux993 with domain: int(0..3) (representing constraint ((x_00002_00003=2) + aux992))
c Both direct and order encoding.
c Var 'aux993' order represents '0' with '4121'
c Var 'aux993' direct represents '0' with '4121'
c Var 'aux993' order represents '1' with '4122'
-4121 4122 0
c Var 'aux993' direct represents '1' with '4123'
4121 -4122 4123 0
-4123 4122 0
-4123 -4121 0
c Var 'aux993' order represents '2' with '4124'
-4122 4124 0
c Var 'aux993' direct represents '2' with '4125'
4122 -4124 4125 0
-4125 4124 0
-4125 -4122 0
c Var 'aux993' direct represents '3' with '-4124'
4121 4123 4125 -4124 0
c Encoding variable: aux994 with domain: int(0..4) (representing constraint (aux989 + aux991))
c Both direct and order encoding.
c Var 'aux994' order represents '0' with '4126'
c Var 'aux994' direct represents '0' with '4126'
c Var 'aux994' order represents '1' with '4127'
-4126 4127 0
c Var 'aux994' direct represents '1' with '4128'
4126 -4127 4128 0
-4128 4127 0
-4128 -4126 0
c Var 'aux994' order represents '2' with '4129'
-4127 4129 0
c Var 'aux994' direct represents '2' with '4130'
4127 -4129 4130 0
-4130 4129 0
-4130 -4127 0
c Var 'aux994' order represents '3' with '4131'
-4129 4131 0
c Var 'aux994' direct represents '3' with '4132'
4129 -4131 4132 0
-4132 4131 0
-4132 -4129 0
c Var 'aux994' direct represents '4' with '-4131'
4126 4128 4130 4132 -4131 0
c Encoding variable: aux995 with domain: int(0..2) (representing constraint ((x_00002_00001=3) + (x_00002_00009=3)))
c Both direct and order encoding.
c Var 'aux995' order represents '0' with '4133'
c Var 'aux995' direct represents '0' with '4133'
c Var 'aux995' order represents '1' with '4134'
-4133 4134 0
c Var 'aux995' direct represents '1' with '4135'
4133 -4134 4135 0
-4135 4134 0
-4135 -4133 0
c Var 'aux995' direct represents '2' with '-4134'
4133 4135 -4134 0
c Encoding variable: aux996 with domain: int(0..2) (representing constraint ((x_00002_00008=3) + (x_00002_00002=3)))
c Both direct and order encoding.
c Var 'aux996' order represents '0' with '4136'
c Var 'aux996' direct represents '0' with '4136'
c Var 'aux996' order represents '1' with '4137'
-4136 4137 0
c Var 'aux996' direct represents '1' with '4138'
4136 -4137 4138 0
-4138 4137 0
-4138 -4136 0
c Var 'aux996' direct represents '2' with '-4137'
4136 4138 -4137 0
c Encoding variable: aux997 with domain: int(0..2) (representing constraint ((x_00002_00007=3) + (x_00002_00004=3)))
c Both direct and order encoding.
c Var 'aux997' order represents '0' with '4139'
c Var 'aux997' direct represents '0' with '4139'
c Var 'aux997' order represents '1' with '4140'
-4139 4140 0
c Var 'aux997' direct represents '1' with '4141'
4139 -4140 4141 0
-4141 4140 0
-4141 -4139 0
c Var 'aux997' direct represents '2' with '-4140'
4139 4141 -4140 0
c Encoding variable: aux998 with domain: int(0..2) (representing constraint ((x_00002_00006=3) + (x_00002_00005=3)))
c Both direct and order encoding.
c Var 'aux998' order represents '0' with '4142'
c Var 'aux998' direct represents '0' with '4142'
c Var 'aux998' order represents '1' with '4143'
-4142 4143 0
c Var 'aux998' direct represents '1' with '4144'
4142 -4143 4144 0
-4144 4143 0
-4144 -4142 0
c Var 'aux998' direct represents '2' with '-4143'
4142 4144 -4143 0
c Encoding variable: aux999 with domain: int(0..3) (representing constraint ((x_00002_00003=3) + aux998))
c Both direct and order encoding.
c Var 'aux999' order represents '0' with '4145'
c Var 'aux999' direct represents '0' with '4145'
c Var 'aux999' order represents '1' with '4146'
-4145 4146 0
c Var 'aux999' direct represents '1' with '4147'
4145 -4146 4147 0
-4147 4146 0
-4147 -4145 0
c Var 'aux999' order represents '2' with '4148'
-4146 4148 0
c Var 'aux999' direct represents '2' with '4149'
4146 -4148 4149 0
-4149 4148 0
-4149 -4146 0
c Var 'aux999' direct represents '3' with '-4148'
4145 4147 4149 -4148 0
c Encoding variable: aux1000 with domain: int(0..4) (representing constraint (aux995 + aux997))
c Both direct and order encoding.
c Var 'aux1000' order represents '0' with '4150'
c Var 'aux1000' direct represents '0' with '4150'
c Var 'aux1000' order represents '1' with '4151'
-4150 4151 0
c Var 'aux1000' direct represents '1' with '4152'
4150 -4151 4152 0
-4152 4151 0
-4152 -4150 0
c Var 'aux1000' order represents '2' with '4153'
-4151 4153 0
c Var 'aux1000' direct represents '2' with '4154'
4151 -4153 4154 0
-4154 4153 0
-4154 -4151 0
c Var 'aux1000' order represents '3' with '4155'
-4153 4155 0
c Var 'aux1000' direct represents '3' with '4156'
4153 -4155 4156 0
-4156 4155 0
-4156 -4153 0
c Var 'aux1000' direct represents '4' with '-4155'
4150 4152 4154 4156 -4155 0
c Encoding variable: aux1001 with domain: int(0..2) (representing constraint ((x_00002_00001=4) + (x_00002_00009=4)))
c Both direct and order encoding.
c Var 'aux1001' order represents '0' with '4157'
c Var 'aux1001' direct represents '0' with '4157'
c Var 'aux1001' order represents '1' with '4158'
-4157 4158 0
c Var 'aux1001' direct represents '1' with '4159'
4157 -4158 4159 0
-4159 4158 0
-4159 -4157 0
c Var 'aux1001' direct represents '2' with '-4158'
4157 4159 -4158 0
c Encoding variable: aux1002 with domain: int(0..2) (representing constraint ((x_00002_00008=4) + (x_00002_00002=4)))
c Both direct and order encoding.
c Var 'aux1002' order represents '0' with '4160'
c Var 'aux1002' direct represents '0' with '4160'
c Var 'aux1002' order represents '1' with '4161'
-4160 4161 0
c Var 'aux1002' direct represents '1' with '4162'
4160 -4161 4162 0
-4162 4161 0
-4162 -4160 0
c Var 'aux1002' direct represents '2' with '-4161'
4160 4162 -4161 0
c Encoding variable: aux1003 with domain: int(0..2) (representing constraint ((x_00002_00007=4) + (x_00002_00004=4)))
c Both direct and order encoding.
c Var 'aux1003' order represents '0' with '4163'
c Var 'aux1003' direct represents '0' with '4163'
c Var 'aux1003' order represents '1' with '4164'
-4163 4164 0
c Var 'aux1003' direct represents '1' with '4165'
4163 -4164 4165 0
-4165 4164 0
-4165 -4163 0
c Var 'aux1003' direct represents '2' with '-4164'
4163 4165 -4164 0
c Encoding variable: aux1004 with domain: int(0..2) (representing constraint ((x_00002_00006=4) + (x_00002_00005=4)))
c Both direct and order encoding.
c Var 'aux1004' order represents '0' with '4166'
c Var 'aux1004' direct represents '0' with '4166'
c Var 'aux1004' order represents '1' with '4167'
-4166 4167 0
c Var 'aux1004' direct represents '1' with '4168'
4166 -4167 4168 0
-4168 4167 0
-4168 -4166 0
c Var 'aux1004' direct represents '2' with '-4167'
4166 4168 -4167 0
c Encoding variable: aux1005 with domain: int(0..3) (representing constraint ((x_00002_00003=4) + aux1004))
c Both direct and order encoding.
c Var 'aux1005' order represents '0' with '4169'
c Var 'aux1005' direct represents '0' with '4169'
c Var 'aux1005' order represents '1' with '4170'
-4169 4170 0
c Var 'aux1005' direct represents '1' with '4171'
4169 -4170 4171 0
-4171 4170 0
-4171 -4169 0
c Var 'aux1005' order represents '2' with '4172'
-4170 4172 0
c Var 'aux1005' direct represents '2' with '4173'
4170 -4172 4173 0
-4173 4172 0
-4173 -4170 0
c Var 'aux1005' direct represents '3' with '-4172'
4169 4171 4173 -4172 0
c Encoding variable: aux1006 with domain: int(0..4) (representing constraint (aux1001 + aux1003))
c Both direct and order encoding.
c Var 'aux1006' order represents '0' with '4174'
c Var 'aux1006' direct represents '0' with '4174'
c Var 'aux1006' order represents '1' with '4175'
-4174 4175 0
c Var 'aux1006' direct represents '1' with '4176'
4174 -4175 4176 0
-4176 4175 0
-4176 -4174 0
c Var 'aux1006' order represents '2' with '4177'
-4175 4177 0
c Var 'aux1006' direct represents '2' with '4178'
4175 -4177 4178 0
-4178 4177 0
-4178 -4175 0
c Var 'aux1006' order represents '3' with '4179'
-4177 4179 0
c Var 'aux1006' direct represents '3' with '4180'
4177 -4179 4180 0
-4180 4179 0
-4180 -4177 0
c Var 'aux1006' direct represents '4' with '-4179'
4174 4176 4178 4180 -4179 0
c Encoding variable: aux1007 with domain: int(0..2) (representing constraint ((x_00002_00001=5) + (x_00002_00009=5)))
c Both direct and order encoding.
c Var 'aux1007' order represents '0' with '4181'
c Var 'aux1007' direct represents '0' with '4181'
c Var 'aux1007' order represents '1' with '4182'
-4181 4182 0
c Var 'aux1007' direct represents '1' with '4183'
4181 -4182 4183 0
-4183 4182 0
-4183 -4181 0
c Var 'aux1007' direct represents '2' with '-4182'
4181 4183 -4182 0
c Encoding variable: aux1008 with domain: int(0..2) (representing constraint ((x_00002_00008=5) + (x_00002_00002=5)))
c Both direct and order encoding.
c Var 'aux1008' order represents '0' with '4184'
c Var 'aux1008' direct represents '0' with '4184'
c Var 'aux1008' order represents '1' with '4185'
-4184 4185 0
c Var 'aux1008' direct represents '1' with '4186'
4184 -4185 4186 0
-4186 4185 0
-4186 -4184 0
c Var 'aux1008' direct represents '2' with '-4185'
4184 4186 -4185 0
c Encoding variable: aux1009 with domain: int(0..2) (representing constraint ((x_00002_00007=5) + (x_00002_00004=5)))
c Both direct and order encoding.
c Var 'aux1009' order represents '0' with '4187'
c Var 'aux1009' direct represents '0' with '4187'
c Var 'aux1009' order represents '1' with '4188'
-4187 4188 0
c Var 'aux1009' direct represents '1' with '4189'
4187 -4188 4189 0
-4189 4188 0
-4189 -4187 0
c Var 'aux1009' direct represents '2' with '-4188'
4187 4189 -4188 0
c Encoding variable: aux1010 with domain: int(0..2) (representing constraint ((x_00002_00006=5) + (x_00002_00005=5)))
c Both direct and order encoding.
c Var 'aux1010' order represents '0' with '4190'
c Var 'aux1010' direct represents '0' with '4190'
c Var 'aux1010' order represents '1' with '4191'
-4190 4191 0
c Var 'aux1010' direct represents '1' with '4192'
4190 -4191 4192 0
-4192 4191 0
-4192 -4190 0
c Var 'aux1010' direct represents '2' with '-4191'
4190 4192 -4191 0
c Encoding variable: aux1011 with domain: int(0..3) (representing constraint ((x_00002_00003=5) + aux1010))
c Both direct and order encoding.
c Var 'aux1011' order represents '0' with '4193'
c Var 'aux1011' direct represents '0' with '4193'
c Var 'aux1011' order represents '1' with '4194'
-4193 4194 0
c Var 'aux1011' direct represents '1' with '4195'
4193 -4194 4195 0
-4195 4194 0
-4195 -4193 0
c Var 'aux1011' order represents '2' with '4196'
-4194 4196 0
c Var 'aux1011' direct represents '2' with '4197'
4194 -4196 4197 0
-4197 4196 0
-4197 -4194 0
c Var 'aux1011' direct represents '3' with '-4196'
4193 4195 4197 -4196 0
c Encoding variable: aux1012 with domain: int(0..4) (representing constraint (aux1007 + aux1009))
c Both direct and order encoding.
c Var 'aux1012' order represents '0' with '4198'
c Var 'aux1012' direct represents '0' with '4198'
c Var 'aux1012' order represents '1' with '4199'
-4198 4199 0
c Var 'aux1012' direct represents '1' with '4200'
4198 -4199 4200 0
-4200 4199 0
-4200 -4198 0
c Var 'aux1012' order represents '2' with '4201'
-4199 4201 0
c Var 'aux1012' direct represents '2' with '4202'
4199 -4201 4202 0
-4202 4201 0
-4202 -4199 0
c Var 'aux1012' order represents '3' with '4203'
-4201 4203 0
c Var 'aux1012' direct represents '3' with '4204'
4201 -4203 4204 0
-4204 4203 0
-4204 -4201 0
c Var 'aux1012' direct represents '4' with '-4203'
4198 4200 4202 4204 -4203 0
c Encoding variable: aux1013 with domain: int(0..2) (representing constraint ((x_00002_00001=6) + (x_00002_00009=6)))
c Both direct and order encoding.
c Var 'aux1013' order represents '0' with '4205'
c Var 'aux1013' direct represents '0' with '4205'
c Var 'aux1013' order represents '1' with '4206'
-4205 4206 0
c Var 'aux1013' direct represents '1' with '4207'
4205 -4206 4207 0
-4207 4206 0
-4207 -4205 0
c Var 'aux1013' direct represents '2' with '-4206'
4205 4207 -4206 0
c Encoding variable: aux1014 with domain: int(0..2) (representing constraint ((x_00002_00008=6) + (x_00002_00002=6)))
c Both direct and order encoding.
c Var 'aux1014' order represents '0' with '4208'
c Var 'aux1014' direct represents '0' with '4208'
c Var 'aux1014' order represents '1' with '4209'
-4208 4209 0
c Var 'aux1014' direct represents '1' with '4210'
4208 -4209 4210 0
-4210 4209 0
-4210 -4208 0
c Var 'aux1014' direct represents '2' with '-4209'
4208 4210 -4209 0
c Encoding variable: aux1015 with domain: int(0..2) (representing constraint ((x_00002_00007=6) + (x_00002_00004=6)))
c Both direct and order encoding.
c Var 'aux1015' order represents '0' with '4211'
c Var 'aux1015' direct represents '0' with '4211'
c Var 'aux1015' order represents '1' with '4212'
-4211 4212 0
c Var 'aux1015' direct represents '1' with '4213'
4211 -4212 4213 0
-4213 4212 0
-4213 -4211 0
c Var 'aux1015' direct represents '2' with '-4212'
4211 4213 -4212 0
c Encoding variable: aux1016 with domain: int(0..2) (representing constraint ((x_00002_00006=6) + (x_00002_00005=6)))
c Both direct and order encoding.
c Var 'aux1016' order represents '0' with '4214'
c Var 'aux1016' direct represents '0' with '4214'
c Var 'aux1016' order represents '1' with '4215'
-4214 4215 0
c Var 'aux1016' direct represents '1' with '4216'
4214 -4215 4216 0
-4216 4215 0
-4216 -4214 0
c Var 'aux1016' direct represents '2' with '-4215'
4214 4216 -4215 0
c Encoding variable: aux1017 with domain: int(0..3) (representing constraint ((x_00002_00003=6) + aux1016))
c Both direct and order encoding.
c Var 'aux1017' order represents '0' with '4217'
c Var 'aux1017' direct represents '0' with '4217'
c Var 'aux1017' order represents '1' with '4218'
-4217 4218 0
c Var 'aux1017' direct represents '1' with '4219'
4217 -4218 4219 0
-4219 4218 0
-4219 -4217 0
c Var 'aux1017' order represents '2' with '4220'
-4218 4220 0
c Var 'aux1017' direct represents '2' with '4221'
4218 -4220 4221 0
-4221 4220 0
-4221 -4218 0
c Var 'aux1017' direct represents '3' with '-4220'
4217 4219 4221 -4220 0
c Encoding variable: aux1018 with domain: int(0..4) (representing constraint (aux1013 + aux1015))
c Both direct and order encoding.
c Var 'aux1018' order represents '0' with '4222'
c Var 'aux1018' direct represents '0' with '4222'
c Var 'aux1018' order represents '1' with '4223'
-4222 4223 0
c Var 'aux1018' direct represents '1' with '4224'
4222 -4223 4224 0
-4224 4223 0
-4224 -4222 0
c Var 'aux1018' order represents '2' with '4225'
-4223 4225 0
c Var 'aux1018' direct represents '2' with '4226'
4223 -4225 4226 0
-4226 4225 0
-4226 -4223 0
c Var 'aux1018' order represents '3' with '4227'
-4225 4227 0
c Var 'aux1018' direct represents '3' with '4228'
4225 -4227 4228 0
-4228 4227 0
-4228 -4225 0
c Var 'aux1018' direct represents '4' with '-4227'
4222 4224 4226 4228 -4227 0
c Encoding variable: aux1019 with domain: int(0..2) (representing constraint ((x_00002_00001=7) + (x_00002_00009=7)))
c Both direct and order encoding.
c Var 'aux1019' order represents '0' with '4229'
c Var 'aux1019' direct represents '0' with '4229'
c Var 'aux1019' order represents '1' with '4230'
-4229 4230 0
c Var 'aux1019' direct represents '1' with '4231'
4229 -4230 4231 0
-4231 4230 0
-4231 -4229 0
c Var 'aux1019' direct represents '2' with '-4230'
4229 4231 -4230 0
c Encoding variable: aux1020 with domain: int(0..2) (representing constraint ((x_00002_00008=7) + (x_00002_00002=7)))
c Both direct and order encoding.
c Var 'aux1020' order represents '0' with '4232'
c Var 'aux1020' direct represents '0' with '4232'
c Var 'aux1020' order represents '1' with '4233'
-4232 4233 0
c Var 'aux1020' direct represents '1' with '4234'
4232 -4233 4234 0
-4234 4233 0
-4234 -4232 0
c Var 'aux1020' direct represents '2' with '-4233'
4232 4234 -4233 0
c Encoding variable: aux1021 with domain: int(0..2) (representing constraint ((x_00002_00007=7) + (x_00002_00004=7)))
c Both direct and order encoding.
c Var 'aux1021' order represents '0' with '4235'
c Var 'aux1021' direct represents '0' with '4235'
c Var 'aux1021' order represents '1' with '4236'
-4235 4236 0
c Var 'aux1021' direct represents '1' with '4237'
4235 -4236 4237 0
-4237 4236 0
-4237 -4235 0
c Var 'aux1021' direct represents '2' with '-4236'
4235 4237 -4236 0
c Encoding variable: aux1022 with domain: int(0..2) (representing constraint ((x_00002_00006=7) + (x_00002_00005=7)))
c Both direct and order encoding.
c Var 'aux1022' order represents '0' with '4238'
c Var 'aux1022' direct represents '0' with '4238'
c Var 'aux1022' order represents '1' with '4239'
-4238 4239 0
c Var 'aux1022' direct represents '1' with '4240'
4238 -4239 4240 0
-4240 4239 0
-4240 -4238 0
c Var 'aux1022' direct represents '2' with '-4239'
4238 4240 -4239 0
c Encoding variable: aux1023 with domain: int(0..3) (representing constraint ((x_00002_00003=7) + aux1022))
c Both direct and order encoding.
c Var 'aux1023' order represents '0' with '4241'
c Var 'aux1023' direct represents '0' with '4241'
c Var 'aux1023' order represents '1' with '4242'
-4241 4242 0
c Var 'aux1023' direct represents '1' with '4243'
4241 -4242 4243 0
-4243 4242 0
-4243 -4241 0
c Var 'aux1023' order represents '2' with '4244'
-4242 4244 0
c Var 'aux1023' direct represents '2' with '4245'
4242 -4244 4245 0
-4245 4244 0
-4245 -4242 0
c Var 'aux1023' direct represents '3' with '-4244'
4241 4243 4245 -4244 0
c Encoding variable: aux1024 with domain: int(0..4) (representing constraint (aux1019 + aux1021))
c Both direct and order encoding.
c Var 'aux1024' order represents '0' with '4246'
c Var 'aux1024' direct represents '0' with '4246'
c Var 'aux1024' order represents '1' with '4247'
-4246 4247 0
c Var 'aux1024' direct represents '1' with '4248'
4246 -4247 4248 0
-4248 4247 0
-4248 -4246 0
c Var 'aux1024' order represents '2' with '4249'
-4247 4249 0
c Var 'aux1024' direct represents '2' with '4250'
4247 -4249 4250 0
-4250 4249 0
-4250 -4247 0
c Var 'aux1024' order represents '3' with '4251'
-4249 4251 0
c Var 'aux1024' direct represents '3' with '4252'
4249 -4251 4252 0
-4252 4251 0
-4252 -4249 0
c Var 'aux1024' direct represents '4' with '-4251'
4246 4248 4250 4252 -4251 0
c Encoding variable: aux1025 with domain: int(0..2) (representing constraint ((x_00002_00001=8) + (x_00002_00009=8)))
c Both direct and order encoding.
c Var 'aux1025' order represents '0' with '4253'
c Var 'aux1025' direct represents '0' with '4253'
c Var 'aux1025' order represents '1' with '4254'
-4253 4254 0
c Var 'aux1025' direct represents '1' with '4255'
4253 -4254 4255 0
-4255 4254 0
-4255 -4253 0
c Var 'aux1025' direct represents '2' with '-4254'
4253 4255 -4254 0
c Encoding variable: aux1026 with domain: int(0..2) (representing constraint ((x_00002_00008=8) + (x_00002_00002=8)))
c Both direct and order encoding.
c Var 'aux1026' order represents '0' with '4256'
c Var 'aux1026' direct represents '0' with '4256'
c Var 'aux1026' order represents '1' with '4257'
-4256 4257 0
c Var 'aux1026' direct represents '1' with '4258'
4256 -4257 4258 0
-4258 4257 0
-4258 -4256 0
c Var 'aux1026' direct represents '2' with '-4257'
4256 4258 -4257 0
c Encoding variable: aux1027 with domain: int(0..2) (representing constraint ((x_00002_00007=8) + (x_00002_00004=8)))
c Both direct and order encoding.
c Var 'aux1027' order represents '0' with '4259'
c Var 'aux1027' direct represents '0' with '4259'
c Var 'aux1027' order represents '1' with '4260'
-4259 4260 0
c Var 'aux1027' direct represents '1' with '4261'
4259 -4260 4261 0
-4261 4260 0
-4261 -4259 0
c Var 'aux1027' direct represents '2' with '-4260'
4259 4261 -4260 0
c Encoding variable: aux1028 with domain: int(0..2) (representing constraint ((x_00002_00006=8) + (x_00002_00005=8)))
c Both direct and order encoding.
c Var 'aux1028' order represents '0' with '4262'
c Var 'aux1028' direct represents '0' with '4262'
c Var 'aux1028' order represents '1' with '4263'
-4262 4263 0
c Var 'aux1028' direct represents '1' with '4264'
4262 -4263 4264 0
-4264 4263 0
-4264 -4262 0
c Var 'aux1028' direct represents '2' with '-4263'
4262 4264 -4263 0
c Encoding variable: aux1029 with domain: int(0..3) (representing constraint ((x_00002_00003=8) + aux1028))
c Both direct and order encoding.
c Var 'aux1029' order represents '0' with '4265'
c Var 'aux1029' direct represents '0' with '4265'
c Var 'aux1029' order represents '1' with '4266'
-4265 4266 0
c Var 'aux1029' direct represents '1' with '4267'
4265 -4266 4267 0
-4267 4266 0
-4267 -4265 0
c Var 'aux1029' order represents '2' with '4268'
-4266 4268 0
c Var 'aux1029' direct represents '2' with '4269'
4266 -4268 4269 0
-4269 4268 0
-4269 -4266 0
c Var 'aux1029' direct represents '3' with '-4268'
4265 4267 4269 -4268 0
c Encoding variable: aux1030 with domain: int(0..4) (representing constraint (aux1025 + aux1027))
c Both direct and order encoding.
c Var 'aux1030' order represents '0' with '4270'
c Var 'aux1030' direct represents '0' with '4270'
c Var 'aux1030' order represents '1' with '4271'
-4270 4271 0
c Var 'aux1030' direct represents '1' with '4272'
4270 -4271 4272 0
-4272 4271 0
-4272 -4270 0
c Var 'aux1030' order represents '2' with '4273'
-4271 4273 0
c Var 'aux1030' direct represents '2' with '4274'
4271 -4273 4274 0
-4274 4273 0
-4274 -4271 0
c Var 'aux1030' order represents '3' with '4275'
-4273 4275 0
c Var 'aux1030' direct represents '3' with '4276'
4273 -4275 4276 0
-4276 4275 0
-4276 -4273 0
c Var 'aux1030' direct represents '4' with '-4275'
4270 4272 4274 4276 -4275 0
c Encoding variable: aux1031 with domain: int(0..2) (representing constraint ((x_00002_00001=9) + (x_00002_00009=9)))
c Both direct and order encoding.
c Var 'aux1031' order represents '0' with '4277'
c Var 'aux1031' direct represents '0' with '4277'
c Var 'aux1031' order represents '1' with '4278'
-4277 4278 0
c Var 'aux1031' direct represents '1' with '4279'
4277 -4278 4279 0
-4279 4278 0
-4279 -4277 0
c Var 'aux1031' direct represents '2' with '-4278'
4277 4279 -4278 0
c Encoding variable: aux1032 with domain: int(0..2) (representing constraint ((x_00002_00008=9) + (x_00002_00002=9)))
c Both direct and order encoding.
c Var 'aux1032' order represents '0' with '4280'
c Var 'aux1032' direct represents '0' with '4280'
c Var 'aux1032' order represents '1' with '4281'
-4280 4281 0
c Var 'aux1032' direct represents '1' with '4282'
4280 -4281 4282 0
-4282 4281 0
-4282 -4280 0
c Var 'aux1032' direct represents '2' with '-4281'
4280 4282 -4281 0
c Encoding variable: aux1033 with domain: int(0..2) (representing constraint ((x_00002_00007=9) + (x_00002_00004=9)))
c Both direct and order encoding.
c Var 'aux1033' order represents '0' with '4283'
c Var 'aux1033' direct represents '0' with '4283'
c Var 'aux1033' order represents '1' with '4284'
-4283 4284 0
c Var 'aux1033' direct represents '1' with '4285'
4283 -4284 4285 0
-4285 4284 0
-4285 -4283 0
c Var 'aux1033' direct represents '2' with '-4284'
4283 4285 -4284 0
c Encoding variable: aux1034 with domain: int(0..2) (representing constraint ((x_00002_00006=9) + (x_00002_00005=9)))
c Both direct and order encoding.
c Var 'aux1034' order represents '0' with '4286'
c Var 'aux1034' direct represents '0' with '4286'
c Var 'aux1034' order represents '1' with '4287'
-4286 4287 0
c Var 'aux1034' direct represents '1' with '4288'
4286 -4287 4288 0
-4288 4287 0
-4288 -4286 0
c Var 'aux1034' direct represents '2' with '-4287'
4286 4288 -4287 0
c Encoding variable: aux1035 with domain: int(0..3) (representing constraint ((x_00002_00003=9) + aux1034))
c Both direct and order encoding.
c Var 'aux1035' order represents '0' with '4289'
c Var 'aux1035' direct represents '0' with '4289'
c Var 'aux1035' order represents '1' with '4290'
-4289 4290 0
c Var 'aux1035' direct represents '1' with '4291'
4289 -4290 4291 0
-4291 4290 0
-4291 -4289 0
c Var 'aux1035' order represents '2' with '4292'
-4290 4292 0
c Var 'aux1035' direct represents '2' with '4293'
4290 -4292 4293 0
-4293 4292 0
-4293 -4290 0
c Var 'aux1035' direct represents '3' with '-4292'
4289 4291 4293 -4292 0
c Encoding variable: aux1036 with domain: int(0..4) (representing constraint (aux1031 + aux1033))
c Both direct and order encoding.
c Var 'aux1036' order represents '0' with '4294'
c Var 'aux1036' direct represents '0' with '4294'
c Var 'aux1036' order represents '1' with '4295'
-4294 4295 0
c Var 'aux1036' direct represents '1' with '4296'
4294 -4295 4296 0
-4296 4295 0
-4296 -4294 0
c Var 'aux1036' order represents '2' with '4297'
-4295 4297 0
c Var 'aux1036' direct represents '2' with '4298'
4295 -4297 4298 0
-4298 4297 0
-4298 -4295 0
c Var 'aux1036' order represents '3' with '4299'
-4297 4299 0
c Var 'aux1036' direct represents '3' with '4300'
4297 -4299 4300 0
-4300 4299 0
-4300 -4297 0
c Var 'aux1036' direct represents '4' with '-4299'
4294 4296 4298 4300 -4299 0
c Encoding variable: aux1037 with domain: int(0..2) (representing constraint ((x_00003_00001=1) + (x_00003_00009=1)))
c Both direct and order encoding.
c Var 'aux1037' order represents '0' with '4301'
c Var 'aux1037' direct represents '0' with '4301'
c Var 'aux1037' order represents '1' with '4302'
-4301 4302 0
c Var 'aux1037' direct represents '1' with '4303'
4301 -4302 4303 0
-4303 4302 0
-4303 -4301 0
c Var 'aux1037' direct represents '2' with '-4302'
4301 4303 -4302 0
c Encoding variable: aux1038 with domain: int(0..2) (representing constraint ((x_00003_00008=1) + (x_00003_00002=1)))
c Both direct and order encoding.
c Var 'aux1038' order represents '0' with '4304'
c Var 'aux1038' direct represents '0' with '4304'
c Var 'aux1038' order represents '1' with '4305'
-4304 4305 0
c Var 'aux1038' direct represents '1' with '4306'
4304 -4305 4306 0
-4306 4305 0
-4306 -4304 0
c Var 'aux1038' direct represents '2' with '-4305'
4304 4306 -4305 0
c Encoding variable: aux1039 with domain: int(0..2) (representing constraint ((x_00003_00007=1) + (x_00003_00004=1)))
c Both direct and order encoding.
c Var 'aux1039' order represents '0' with '4307'
c Var 'aux1039' direct represents '0' with '4307'
c Var 'aux1039' order represents '1' with '4308'
-4307 4308 0
c Var 'aux1039' direct represents '1' with '4309'
4307 -4308 4309 0
-4309 4308 0
-4309 -4307 0
c Var 'aux1039' direct represents '2' with '-4308'
4307 4309 -4308 0
c Encoding variable: aux1040 with domain: int(0..2) (representing constraint ((x_00003_00006=1) + (x_00003_00005=1)))
c Both direct and order encoding.
c Var 'aux1040' order represents '0' with '4310'
c Var 'aux1040' direct represents '0' with '4310'
c Var 'aux1040' order represents '1' with '4311'
-4310 4311 0
c Var 'aux1040' direct represents '1' with '4312'
4310 -4311 4312 0
-4312 4311 0
-4312 -4310 0
c Var 'aux1040' direct represents '2' with '-4311'
4310 4312 -4311 0
c Encoding variable: aux1041 with domain: int(0..3) (representing constraint ((x_00003_00003=1) + aux1040))
c Both direct and order encoding.
c Var 'aux1041' order represents '0' with '4313'
c Var 'aux1041' direct represents '0' with '4313'
c Var 'aux1041' order represents '1' with '4314'
-4313 4314 0
c Var 'aux1041' direct represents '1' with '4315'
4313 -4314 4315 0
-4315 4314 0
-4315 -4313 0
c Var 'aux1041' order represents '2' with '4316'
-4314 4316 0
c Var 'aux1041' direct represents '2' with '4317'
4314 -4316 4317 0
-4317 4316 0
-4317 -4314 0
c Var 'aux1041' direct represents '3' with '-4316'
4313 4315 4317 -4316 0
c Encoding variable: aux1042 with domain: int(0..4) (representing constraint (aux1037 + aux1039))
c Both direct and order encoding.
c Var 'aux1042' order represents '0' with '4318'
c Var 'aux1042' direct represents '0' with '4318'
c Var 'aux1042' order represents '1' with '4319'
-4318 4319 0
c Var 'aux1042' direct represents '1' with '4320'
4318 -4319 4320 0
-4320 4319 0
-4320 -4318 0
c Var 'aux1042' order represents '2' with '4321'
-4319 4321 0
c Var 'aux1042' direct represents '2' with '4322'
4319 -4321 4322 0
-4322 4321 0
-4322 -4319 0
c Var 'aux1042' order represents '3' with '4323'
-4321 4323 0
c Var 'aux1042' direct represents '3' with '4324'
4321 -4323 4324 0
-4324 4323 0
-4324 -4321 0
c Var 'aux1042' direct represents '4' with '-4323'
4318 4320 4322 4324 -4323 0
c Encoding variable: aux1043 with domain: int(0..2) (representing constraint ((x_00003_00001=2) + (x_00003_00009=2)))
c Both direct and order encoding.
c Var 'aux1043' order represents '0' with '4325'
c Var 'aux1043' direct represents '0' with '4325'
c Var 'aux1043' order represents '1' with '4326'
-4325 4326 0
c Var 'aux1043' direct represents '1' with '4327'
4325 -4326 4327 0
-4327 4326 0
-4327 -4325 0
c Var 'aux1043' direct represents '2' with '-4326'
4325 4327 -4326 0
c Encoding variable: aux1044 with domain: int(0..2) (representing constraint ((x_00003_00008=2) + (x_00003_00002=2)))
c Both direct and order encoding.
c Var 'aux1044' order represents '0' with '4328'
c Var 'aux1044' direct represents '0' with '4328'
c Var 'aux1044' order represents '1' with '4329'
-4328 4329 0
c Var 'aux1044' direct represents '1' with '4330'
4328 -4329 4330 0
-4330 4329 0
-4330 -4328 0
c Var 'aux1044' direct represents '2' with '-4329'
4328 4330 -4329 0
c Encoding variable: aux1045 with domain: int(0..2) (representing constraint ((x_00003_00007=2) + (x_00003_00004=2)))
c Both direct and order encoding.
c Var 'aux1045' order represents '0' with '4331'
c Var 'aux1045' direct represents '0' with '4331'
c Var 'aux1045' order represents '1' with '4332'
-4331 4332 0
c Var 'aux1045' direct represents '1' with '4333'
4331 -4332 4333 0
-4333 4332 0
-4333 -4331 0
c Var 'aux1045' direct represents '2' with '-4332'
4331 4333 -4332 0
c Encoding variable: aux1046 with domain: int(0..2) (representing constraint ((x_00003_00006=2) + (x_00003_00005=2)))
c Both direct and order encoding.
c Var 'aux1046' order represents '0' with '4334'
c Var 'aux1046' direct represents '0' with '4334'
c Var 'aux1046' order represents '1' with '4335'
-4334 4335 0
c Var 'aux1046' direct represents '1' with '4336'
4334 -4335 4336 0
-4336 4335 0
-4336 -4334 0
c Var 'aux1046' direct represents '2' with '-4335'
4334 4336 -4335 0
c Encoding variable: aux1047 with domain: int(0..3) (representing constraint ((x_00003_00003=2) + aux1046))
c Both direct and order encoding.
c Var 'aux1047' order represents '0' with '4337'
c Var 'aux1047' direct represents '0' with '4337'
c Var 'aux1047' order represents '1' with '4338'
-4337 4338 0
c Var 'aux1047' direct represents '1' with '4339'
4337 -4338 4339 0
-4339 4338 0
-4339 -4337 0
c Var 'aux1047' order represents '2' with '4340'
-4338 4340 0
c Var 'aux1047' direct represents '2' with '4341'
4338 -4340 4341 0
-4341 4340 0
-4341 -4338 0
c Var 'aux1047' direct represents '3' with '-4340'
4337 4339 4341 -4340 0
c Encoding variable: aux1048 with domain: int(0..4) (representing constraint (aux1043 + aux1045))
c Both direct and order encoding.
c Var 'aux1048' order represents '0' with '4342'
c Var 'aux1048' direct represents '0' with '4342'
c Var 'aux1048' order represents '1' with '4343'
-4342 4343 0
c Var 'aux1048' direct represents '1' with '4344'
4342 -4343 4344 0
-4344 4343 0
-4344 -4342 0
c Var 'aux1048' order represents '2' with '4345'
-4343 4345 0
c Var 'aux1048' direct represents '2' with '4346'
4343 -4345 4346 0
-4346 4345 0
-4346 -4343 0
c Var 'aux1048' order represents '3' with '4347'
-4345 4347 0
c Var 'aux1048' direct represents '3' with '4348'
4345 -4347 4348 0
-4348 4347 0
-4348 -4345 0
c Var 'aux1048' direct represents '4' with '-4347'
4342 4344 4346 4348 -4347 0
c Encoding variable: aux1049 with domain: int(0..2) (representing constraint ((x_00003_00001=3) + (x_00003_00009=3)))
c Both direct and order encoding.
c Var 'aux1049' order represents '0' with '4349'
c Var 'aux1049' direct represents '0' with '4349'
c Var 'aux1049' order represents '1' with '4350'
-4349 4350 0
c Var 'aux1049' direct represents '1' with '4351'
4349 -4350 4351 0
-4351 4350 0
-4351 -4349 0
c Var 'aux1049' direct represents '2' with '-4350'
4349 4351 -4350 0
c Encoding variable: aux1050 with domain: int(0..2) (representing constraint ((x_00003_00008=3) + (x_00003_00002=3)))
c Both direct and order encoding.
c Var 'aux1050' order represents '0' with '4352'
c Var 'aux1050' direct represents '0' with '4352'
c Var 'aux1050' order represents '1' with '4353'
-4352 4353 0
c Var 'aux1050' direct represents '1' with '4354'
4352 -4353 4354 0
-4354 4353 0
-4354 -4352 0
c Var 'aux1050' direct represents '2' with '-4353'
4352 4354 -4353 0
c Encoding variable: aux1051 with domain: int(0..2) (representing constraint ((x_00003_00007=3) + (x_00003_00004=3)))
c Both direct and order encoding.
c Var 'aux1051' order represents '0' with '4355'
c Var 'aux1051' direct represents '0' with '4355'
c Var 'aux1051' order represents '1' with '4356'
-4355 4356 0
c Var 'aux1051' direct represents '1' with '4357'
4355 -4356 4357 0
-4357 4356 0
-4357 -4355 0
c Var 'aux1051' direct represents '2' with '-4356'
4355 4357 -4356 0
c Encoding variable: aux1052 with domain: int(0..2) (representing constraint ((x_00003_00006=3) + (x_00003_00005=3)))
c Both direct and order encoding.
c Var 'aux1052' order represents '0' with '4358'
c Var 'aux1052' direct represents '0' with '4358'
c Var 'aux1052' order represents '1' with '4359'
-4358 4359 0
c Var 'aux1052' direct represents '1' with '4360'
4358 -4359 4360 0
-4360 4359 0
-4360 -4358 0
c Var 'aux1052' direct represents '2' with '-4359'
4358 4360 -4359 0
c Encoding variable: aux1053 with domain: int(0..3) (representing constraint ((x_00003_00003=3) + aux1052))
c Both direct and order encoding.
c Var 'aux1053' order represents '0' with '4361'
c Var 'aux1053' direct represents '0' with '4361'
c Var 'aux1053' order represents '1' with '4362'
-4361 4362 0
c Var 'aux1053' direct represents '1' with '4363'
4361 -4362 4363 0
-4363 4362 0
-4363 -4361 0
c Var 'aux1053' order represents '2' with '4364'
-4362 4364 0
c Var 'aux1053' direct represents '2' with '4365'
4362 -4364 4365 0
-4365 4364 0
-4365 -4362 0
c Var 'aux1053' direct represents '3' with '-4364'
4361 4363 4365 -4364 0
c Encoding variable: aux1054 with domain: int(0..4) (representing constraint (aux1049 + aux1051))
c Both direct and order encoding.
c Var 'aux1054' order represents '0' with '4366'
c Var 'aux1054' direct represents '0' with '4366'
c Var 'aux1054' order represents '1' with '4367'
-4366 4367 0
c Var 'aux1054' direct represents '1' with '4368'
4366 -4367 4368 0
-4368 4367 0
-4368 -4366 0
c Var 'aux1054' order represents '2' with '4369'
-4367 4369 0
c Var 'aux1054' direct represents '2' with '4370'
4367 -4369 4370 0
-4370 4369 0
-4370 -4367 0
c Var 'aux1054' order represents '3' with '4371'
-4369 4371 0
c Var 'aux1054' direct represents '3' with '4372'
4369 -4371 4372 0
-4372 4371 0
-4372 -4369 0
c Var 'aux1054' direct represents '4' with '-4371'
4366 4368 4370 4372 -4371 0
c Encoding variable: aux1055 with domain: int(0..2) (representing constraint ((x_00003_00001=4) + (x_00003_00009=4)))
c Both direct and order encoding.
c Var 'aux1055' order represents '0' with '4373'
c Var 'aux1055' direct represents '0' with '4373'
c Var 'aux1055' order represents '1' with '4374'
-4373 4374 0
c Var 'aux1055' direct represents '1' with '4375'
4373 -4374 4375 0
-4375 4374 0
-4375 -4373 0
c Var 'aux1055' direct represents '2' with '-4374'
4373 4375 -4374 0
c Encoding variable: aux1056 with domain: int(0..2) (representing constraint ((x_00003_00008=4) + (x_00003_00002=4)))
c Both direct and order encoding.
c Var 'aux1056' order represents '0' with '4376'
c Var 'aux1056' direct represents '0' with '4376'
c Var 'aux1056' order represents '1' with '4377'
-4376 4377 0
c Var 'aux1056' direct represents '1' with '4378'
4376 -4377 4378 0
-4378 4377 0
-4378 -4376 0
c Var 'aux1056' direct represents '2' with '-4377'
4376 4378 -4377 0
c Encoding variable: aux1057 with domain: int(0..2) (representing constraint ((x_00003_00007=4) + (x_00003_00004=4)))
c Both direct and order encoding.
c Var 'aux1057' order represents '0' with '4379'
c Var 'aux1057' direct represents '0' with '4379'
c Var 'aux1057' order represents '1' with '4380'
-4379 4380 0
c Var 'aux1057' direct represents '1' with '4381'
4379 -4380 4381 0
-4381 4380 0
-4381 -4379 0
c Var 'aux1057' direct represents '2' with '-4380'
4379 4381 -4380 0
c Encoding variable: aux1058 with domain: int(0..2) (representing constraint ((x_00003_00006=4) + (x_00003_00005=4)))
c Both direct and order encoding.
c Var 'aux1058' order represents '0' with '4382'
c Var 'aux1058' direct represents '0' with '4382'
c Var 'aux1058' order represents '1' with '4383'
-4382 4383 0
c Var 'aux1058' direct represents '1' with '4384'
4382 -4383 4384 0
-4384 4383 0
-4384 -4382 0
c Var 'aux1058' direct represents '2' with '-4383'
4382 4384 -4383 0
c Encoding variable: aux1059 with domain: int(0..3) (representing constraint ((x_00003_00003=4) + aux1058))
c Both direct and order encoding.
c Var 'aux1059' order represents '0' with '4385'
c Var 'aux1059' direct represents '0' with '4385'
c Var 'aux1059' order represents '1' with '4386'
-4385 4386 0
c Var 'aux1059' direct represents '1' with '4387'
4385 -4386 4387 0
-4387 4386 0
-4387 -4385 0
c Var 'aux1059' order represents '2' with '4388'
-4386 4388 0
c Var 'aux1059' direct represents '2' with '4389'
4386 -4388 4389 0
-4389 4388 0
-4389 -4386 0
c Var 'aux1059' direct represents '3' with '-4388'
4385 4387 4389 -4388 0
c Encoding variable: aux1060 with domain: int(0..4) (representing constraint (aux1055 + aux1057))
c Both direct and order encoding.
c Var 'aux1060' order represents '0' with '4390'
c Var 'aux1060' direct represents '0' with '4390'
c Var 'aux1060' order represents '1' with '4391'
-4390 4391 0
c Var 'aux1060' direct represents '1' with '4392'
4390 -4391 4392 0
-4392 4391 0
-4392 -4390 0
c Var 'aux1060' order represents '2' with '4393'
-4391 4393 0
c Var 'aux1060' direct represents '2' with '4394'
4391 -4393 4394 0
-4394 4393 0
-4394 -4391 0
c Var 'aux1060' order represents '3' with '4395'
-4393 4395 0
c Var 'aux1060' direct represents '3' with '4396'
4393 -4395 4396 0
-4396 4395 0
-4396 -4393 0
c Var 'aux1060' direct represents '4' with '-4395'
4390 4392 4394 4396 -4395 0
c Encoding variable: aux1061 with domain: int(0..2) (representing constraint ((x_00003_00001=5) + (x_00003_00009=5)))
c Both direct and order encoding.
c Var 'aux1061' order represents '0' with '4397'
c Var 'aux1061' direct represents '0' with '4397'
c Var 'aux1061' order represents '1' with '4398'
-4397 4398 0
c Var 'aux1061' direct represents '1' with '4399'
4397 -4398 4399 0
-4399 4398 0
-4399 -4397 0
c Var 'aux1061' direct represents '2' with '-4398'
4397 4399 -4398 0
c Encoding variable: aux1062 with domain: int(0..2) (representing constraint ((x_00003_00008=5) + (x_00003_00002=5)))
c Both direct and order encoding.
c Var 'aux1062' order represents '0' with '4400'
c Var 'aux1062' direct represents '0' with '4400'
c Var 'aux1062' order represents '1' with '4401'
-4400 4401 0
c Var 'aux1062' direct represents '1' with '4402'
4400 -4401 4402 0
-4402 4401 0
-4402 -4400 0
c Var 'aux1062' direct represents '2' with '-4401'
4400 4402 -4401 0
c Encoding variable: aux1063 with domain: int(0..2) (representing constraint ((x_00003_00007=5) + (x_00003_00004=5)))
c Both direct and order encoding.
c Var 'aux1063' order represents '0' with '4403'
c Var 'aux1063' direct represents '0' with '4403'
c Var 'aux1063' order represents '1' with '4404'
-4403 4404 0
c Var 'aux1063' direct represents '1' with '4405'
4403 -4404 4405 0
-4405 4404 0
-4405 -4403 0
c Var 'aux1063' direct represents '2' with '-4404'
4403 4405 -4404 0
c Encoding variable: aux1064 with domain: int(0..2) (representing constraint ((x_00003_00006=5) + (x_00003_00005=5)))
c Both direct and order encoding.
c Var 'aux1064' order represents '0' with '4406'
c Var 'aux1064' direct represents '0' with '4406'
c Var 'aux1064' order represents '1' with '4407'
-4406 4407 0
c Var 'aux1064' direct represents '1' with '4408'
4406 -4407 4408 0
-4408 4407 0
-4408 -4406 0
c Var 'aux1064' direct represents '2' with '-4407'
4406 4408 -4407 0
c Encoding variable: aux1065 with domain: int(0..3) (representing constraint ((x_00003_00003=5) + aux1064))
c Both direct and order encoding.
c Var 'aux1065' order represents '0' with '4409'
c Var 'aux1065' direct represents '0' with '4409'
c Var 'aux1065' order represents '1' with '4410'
-4409 4410 0
c Var 'aux1065' direct represents '1' with '4411'
4409 -4410 4411 0
-4411 4410 0
-4411 -4409 0
c Var 'aux1065' order represents '2' with '4412'
-4410 4412 0
c Var 'aux1065' direct represents '2' with '4413'
4410 -4412 4413 0
-4413 4412 0
-4413 -4410 0
c Var 'aux1065' direct represents '3' with '-4412'
4409 4411 4413 -4412 0
c Encoding variable: aux1066 with domain: int(0..4) (representing constraint (aux1061 + aux1063))
c Both direct and order encoding.
c Var 'aux1066' order represents '0' with '4414'
c Var 'aux1066' direct represents '0' with '4414'
c Var 'aux1066' order represents '1' with '4415'
-4414 4415 0
c Var 'aux1066' direct represents '1' with '4416'
4414 -4415 4416 0
-4416 4415 0
-4416 -4414 0
c Var 'aux1066' order represents '2' with '4417'
-4415 4417 0
c Var 'aux1066' direct represents '2' with '4418'
4415 -4417 4418 0
-4418 4417 0
-4418 -4415 0
c Var 'aux1066' order represents '3' with '4419'
-4417 4419 0
c Var 'aux1066' direct represents '3' with '4420'
4417 -4419 4420 0
-4420 4419 0
-4420 -4417 0
c Var 'aux1066' direct represents '4' with '-4419'
4414 4416 4418 4420 -4419 0
c Encoding variable: aux1067 with domain: int(0..2) (representing constraint ((x_00003_00001=6) + (x_00003_00009=6)))
c Both direct and order encoding.
c Var 'aux1067' order represents '0' with '4421'
c Var 'aux1067' direct represents '0' with '4421'
c Var 'aux1067' order represents '1' with '4422'
-4421 4422 0
c Var 'aux1067' direct represents '1' with '4423'
4421 -4422 4423 0
-4423 4422 0
-4423 -4421 0
c Var 'aux1067' direct represents '2' with '-4422'
4421 4423 -4422 0
c Encoding variable: aux1068 with domain: int(0..2) (representing constraint ((x_00003_00008=6) + (x_00003_00002=6)))
c Both direct and order encoding.
c Var 'aux1068' order represents '0' with '4424'
c Var 'aux1068' direct represents '0' with '4424'
c Var 'aux1068' order represents '1' with '4425'
-4424 4425 0
c Var 'aux1068' direct represents '1' with '4426'
4424 -4425 4426 0
-4426 4425 0
-4426 -4424 0
c Var 'aux1068' direct represents '2' with '-4425'
4424 4426 -4425 0
c Encoding variable: aux1069 with domain: int(0..2) (representing constraint ((x_00003_00007=6) + (x_00003_00004=6)))
c Both direct and order encoding.
c Var 'aux1069' order represents '0' with '4427'
c Var 'aux1069' direct represents '0' with '4427'
c Var 'aux1069' order represents '1' with '4428'
-4427 4428 0
c Var 'aux1069' direct represents '1' with '4429'
4427 -4428 4429 0
-4429 4428 0
-4429 -4427 0
c Var 'aux1069' direct represents '2' with '-4428'
4427 4429 -4428 0
c Encoding variable: aux1070 with domain: int(0..2) (representing constraint ((x_00003_00006=6) + (x_00003_00005=6)))
c Both direct and order encoding.
c Var 'aux1070' order represents '0' with '4430'
c Var 'aux1070' direct represents '0' with '4430'
c Var 'aux1070' order represents '1' with '4431'
-4430 4431 0
c Var 'aux1070' direct represents '1' with '4432'
4430 -4431 4432 0
-4432 4431 0
-4432 -4430 0
c Var 'aux1070' direct represents '2' with '-4431'
4430 4432 -4431 0
c Encoding variable: aux1071 with domain: int(0..3) (representing constraint ((x_00003_00003=6) + aux1070))
c Both direct and order encoding.
c Var 'aux1071' order represents '0' with '4433'
c Var 'aux1071' direct represents '0' with '4433'
c Var 'aux1071' order represents '1' with '4434'
-4433 4434 0
c Var 'aux1071' direct represents '1' with '4435'
4433 -4434 4435 0
-4435 4434 0
-4435 -4433 0
c Var 'aux1071' order represents '2' with '4436'
-4434 4436 0
c Var 'aux1071' direct represents '2' with '4437'
4434 -4436 4437 0
-4437 4436 0
-4437 -4434 0
c Var 'aux1071' direct represents '3' with '-4436'
4433 4435 4437 -4436 0
c Encoding variable: aux1072 with domain: int(0..4) (representing constraint (aux1067 + aux1069))
c Both direct and order encoding.
c Var 'aux1072' order represents '0' with '4438'
c Var 'aux1072' direct represents '0' with '4438'
c Var 'aux1072' order represents '1' with '4439'
-4438 4439 0
c Var 'aux1072' direct represents '1' with '4440'
4438 -4439 4440 0
-4440 4439 0
-4440 -4438 0
c Var 'aux1072' order represents '2' with '4441'
-4439 4441 0
c Var 'aux1072' direct represents '2' with '4442'
4439 -4441 4442 0
-4442 4441 0
-4442 -4439 0
c Var 'aux1072' order represents '3' with '4443'
-4441 4443 0
c Var 'aux1072' direct represents '3' with '4444'
4441 -4443 4444 0
-4444 4443 0
-4444 -4441 0
c Var 'aux1072' direct represents '4' with '-4443'
4438 4440 4442 4444 -4443 0
c Encoding variable: aux1073 with domain: int(0..2) (representing constraint ((x_00003_00001=7) + (x_00003_00009=7)))
c Both direct and order encoding.
c Var 'aux1073' order represents '0' with '4445'
c Var 'aux1073' direct represents '0' with '4445'
c Var 'aux1073' order represents '1' with '4446'
-4445 4446 0
c Var 'aux1073' direct represents '1' with '4447'
4445 -4446 4447 0
-4447 4446 0
-4447 -4445 0
c Var 'aux1073' direct represents '2' with '-4446'
4445 4447 -4446 0
c Encoding variable: aux1074 with domain: int(0..2) (representing constraint ((x_00003_00008=7) + (x_00003_00002=7)))
c Both direct and order encoding.
c Var 'aux1074' order represents '0' with '4448'
c Var 'aux1074' direct represents '0' with '4448'
c Var 'aux1074' order represents '1' with '4449'
-4448 4449 0
c Var 'aux1074' direct represents '1' with '4450'
4448 -4449 4450 0
-4450 4449 0
-4450 -4448 0
c Var 'aux1074' direct represents '2' with '-4449'
4448 4450 -4449 0
c Encoding variable: aux1075 with domain: int(0..2) (representing constraint ((x_00003_00007=7) + (x_00003_00004=7)))
c Both direct and order encoding.
c Var 'aux1075' order represents '0' with '4451'
c Var 'aux1075' direct represents '0' with '4451'
c Var 'aux1075' order represents '1' with '4452'
-4451 4452 0
c Var 'aux1075' direct represents '1' with '4453'
4451 -4452 4453 0
-4453 4452 0
-4453 -4451 0
c Var 'aux1075' direct represents '2' with '-4452'
4451 4453 -4452 0
c Encoding variable: aux1076 with domain: int(0..2) (representing constraint ((x_00003_00006=7) + (x_00003_00005=7)))
c Both direct and order encoding.
c Var 'aux1076' order represents '0' with '4454'
c Var 'aux1076' direct represents '0' with '4454'
c Var 'aux1076' order represents '1' with '4455'
-4454 4455 0
c Var 'aux1076' direct represents '1' with '4456'
4454 -4455 4456 0
-4456 4455 0
-4456 -4454 0
c Var 'aux1076' direct represents '2' with '-4455'
4454 4456 -4455 0
c Encoding variable: aux1077 with domain: int(0..3) (representing constraint ((x_00003_00003=7) + aux1076))
c Both direct and order encoding.
c Var 'aux1077' order represents '0' with '4457'
c Var 'aux1077' direct represents '0' with '4457'
c Var 'aux1077' order represents '1' with '4458'
-4457 4458 0
c Var 'aux1077' direct represents '1' with '4459'
4457 -4458 4459 0
-4459 4458 0
-4459 -4457 0
c Var 'aux1077' order represents '2' with '4460'
-4458 4460 0
c Var 'aux1077' direct represents '2' with '4461'
4458 -4460 4461 0
-4461 4460 0
-4461 -4458 0
c Var 'aux1077' direct represents '3' with '-4460'
4457 4459 4461 -4460 0
c Encoding variable: aux1078 with domain: int(0..4) (representing constraint (aux1073 + aux1075))
c Both direct and order encoding.
c Var 'aux1078' order represents '0' with '4462'
c Var 'aux1078' direct represents '0' with '4462'
c Var 'aux1078' order represents '1' with '4463'
-4462 4463 0
c Var 'aux1078' direct represents '1' with '4464'
4462 -4463 4464 0
-4464 4463 0
-4464 -4462 0
c Var 'aux1078' order represents '2' with '4465'
-4463 4465 0
c Var 'aux1078' direct represents '2' with '4466'
4463 -4465 4466 0
-4466 4465 0
-4466 -4463 0
c Var 'aux1078' order represents '3' with '4467'
-4465 4467 0
c Var 'aux1078' direct represents '3' with '4468'
4465 -4467 4468 0
-4468 4467 0
-4468 -4465 0
c Var 'aux1078' direct represents '4' with '-4467'
4462 4464 4466 4468 -4467 0
c Encoding variable: aux1079 with domain: int(0..2) (representing constraint ((x_00003_00001=8) + (x_00003_00009=8)))
c Both direct and order encoding.
c Var 'aux1079' order represents '0' with '4469'
c Var 'aux1079' direct represents '0' with '4469'
c Var 'aux1079' order represents '1' with '4470'
-4469 4470 0
c Var 'aux1079' direct represents '1' with '4471'
4469 -4470 4471 0
-4471 4470 0
-4471 -4469 0
c Var 'aux1079' direct represents '2' with '-4470'
4469 4471 -4470 0
c Encoding variable: aux1080 with domain: int(0..2) (representing constraint ((x_00003_00008=8) + (x_00003_00002=8)))
c Both direct and order encoding.
c Var 'aux1080' order represents '0' with '4472'
c Var 'aux1080' direct represents '0' with '4472'
c Var 'aux1080' order represents '1' with '4473'
-4472 4473 0
c Var 'aux1080' direct represents '1' with '4474'
4472 -4473 4474 0
-4474 4473 0
-4474 -4472 0
c Var 'aux1080' direct represents '2' with '-4473'
4472 4474 -4473 0
c Encoding variable: aux1081 with domain: int(0..2) (representing constraint ((x_00003_00007=8) + (x_00003_00004=8)))
c Both direct and order encoding.
c Var 'aux1081' order represents '0' with '4475'
c Var 'aux1081' direct represents '0' with '4475'
c Var 'aux1081' order represents '1' with '4476'
-4475 4476 0
c Var 'aux1081' direct represents '1' with '4477'
4475 -4476 4477 0
-4477 4476 0
-4477 -4475 0
c Var 'aux1081' direct represents '2' with '-4476'
4475 4477 -4476 0
c Encoding variable: aux1082 with domain: int(0..2) (representing constraint ((x_00003_00006=8) + (x_00003_00005=8)))
c Both direct and order encoding.
c Var 'aux1082' order represents '0' with '4478'
c Var 'aux1082' direct represents '0' with '4478'
c Var 'aux1082' order represents '1' with '4479'
-4478 4479 0
c Var 'aux1082' direct represents '1' with '4480'
4478 -4479 4480 0
-4480 4479 0
-4480 -4478 0
c Var 'aux1082' direct represents '2' with '-4479'
4478 4480 -4479 0
c Encoding variable: aux1083 with domain: int(0..3) (representing constraint ((x_00003_00003=8) + aux1082))
c Both direct and order encoding.
c Var 'aux1083' order represents '0' with '4481'
c Var 'aux1083' direct represents '0' with '4481'
c Var 'aux1083' order represents '1' with '4482'
-4481 4482 0
c Var 'aux1083' direct represents '1' with '4483'
4481 -4482 4483 0
-4483 4482 0
-4483 -4481 0
c Var 'aux1083' order represents '2' with '4484'
-4482 4484 0
c Var 'aux1083' direct represents '2' with '4485'
4482 -4484 4485 0
-4485 4484 0
-4485 -4482 0
c Var 'aux1083' direct represents '3' with '-4484'
4481 4483 4485 -4484 0
c Encoding variable: aux1084 with domain: int(0..4) (representing constraint (aux1079 + aux1081))
c Both direct and order encoding.
c Var 'aux1084' order represents '0' with '4486'
c Var 'aux1084' direct represents '0' with '4486'
c Var 'aux1084' order represents '1' with '4487'
-4486 4487 0
c Var 'aux1084' direct represents '1' with '4488'
4486 -4487 4488 0
-4488 4487 0
-4488 -4486 0
c Var 'aux1084' order represents '2' with '4489'
-4487 4489 0
c Var 'aux1084' direct represents '2' with '4490'
4487 -4489 4490 0
-4490 4489 0
-4490 -4487 0
c Var 'aux1084' order represents '3' with '4491'
-4489 4491 0
c Var 'aux1084' direct represents '3' with '4492'
4489 -4491 4492 0
-4492 4491 0
-4492 -4489 0
c Var 'aux1084' direct represents '4' with '-4491'
4486 4488 4490 4492 -4491 0
c Encoding variable: aux1085 with domain: int(0..2) (representing constraint ((x_00003_00001=9) + (x_00003_00009=9)))
c Both direct and order encoding.
c Var 'aux1085' order represents '0' with '4493'
c Var 'aux1085' direct represents '0' with '4493'
c Var 'aux1085' order represents '1' with '4494'
-4493 4494 0
c Var 'aux1085' direct represents '1' with '4495'
4493 -4494 4495 0
-4495 4494 0
-4495 -4493 0
c Var 'aux1085' direct represents '2' with '-4494'
4493 4495 -4494 0
c Encoding variable: aux1086 with domain: int(0..2) (representing constraint ((x_00003_00008=9) + (x_00003_00002=9)))
c Both direct and order encoding.
c Var 'aux1086' order represents '0' with '4496'
c Var 'aux1086' direct represents '0' with '4496'
c Var 'aux1086' order represents '1' with '4497'
-4496 4497 0
c Var 'aux1086' direct represents '1' with '4498'
4496 -4497 4498 0
-4498 4497 0
-4498 -4496 0
c Var 'aux1086' direct represents '2' with '-4497'
4496 4498 -4497 0
c Encoding variable: aux1087 with domain: int(0..2) (representing constraint ((x_00003_00007=9) + (x_00003_00004=9)))
c Both direct and order encoding.
c Var 'aux1087' order represents '0' with '4499'
c Var 'aux1087' direct represents '0' with '4499'
c Var 'aux1087' order represents '1' with '4500'
-4499 4500 0
c Var 'aux1087' direct represents '1' with '4501'
4499 -4500 4501 0
-4501 4500 0
-4501 -4499 0
c Var 'aux1087' direct represents '2' with '-4500'
4499 4501 -4500 0
c Encoding variable: aux1088 with domain: int(0..2) (representing constraint ((x_00003_00006=9) + (x_00003_00005=9)))
c Both direct and order encoding.
c Var 'aux1088' order represents '0' with '4502'
c Var 'aux1088' direct represents '0' with '4502'
c Var 'aux1088' order represents '1' with '4503'
-4502 4503 0
c Var 'aux1088' direct represents '1' with '4504'
4502 -4503 4504 0
-4504 4503 0
-4504 -4502 0
c Var 'aux1088' direct represents '2' with '-4503'
4502 4504 -4503 0
c Encoding variable: aux1089 with domain: int(0..3) (representing constraint ((x_00003_00003=9) + aux1088))
c Both direct and order encoding.
c Var 'aux1089' order represents '0' with '4505'
c Var 'aux1089' direct represents '0' with '4505'
c Var 'aux1089' order represents '1' with '4506'
-4505 4506 0
c Var 'aux1089' direct represents '1' with '4507'
4505 -4506 4507 0
-4507 4506 0
-4507 -4505 0
c Var 'aux1089' order represents '2' with '4508'
-4506 4508 0
c Var 'aux1089' direct represents '2' with '4509'
4506 -4508 4509 0
-4509 4508 0
-4509 -4506 0
c Var 'aux1089' direct represents '3' with '-4508'
4505 4507 4509 -4508 0
c Encoding variable: aux1090 with domain: int(0..4) (representing constraint (aux1085 + aux1087))
c Both direct and order encoding.
c Var 'aux1090' order represents '0' with '4510'
c Var 'aux1090' direct represents '0' with '4510'
c Var 'aux1090' order represents '1' with '4511'
-4510 4511 0
c Var 'aux1090' direct represents '1' with '4512'
4510 -4511 4512 0
-4512 4511 0
-4512 -4510 0
c Var 'aux1090' order represents '2' with '4513'
-4511 4513 0
c Var 'aux1090' direct represents '2' with '4514'
4511 -4513 4514 0
-4514 4513 0
-4514 -4511 0
c Var 'aux1090' order represents '3' with '4515'
-4513 4515 0
c Var 'aux1090' direct represents '3' with '4516'
4513 -4515 4516 0
-4516 4515 0
-4516 -4513 0
c Var 'aux1090' direct represents '4' with '-4515'
4510 4512 4514 4516 -4515 0
c Encoding variable: aux1091 with domain: int(0..2) (representing constraint ((x_00004_00001=1) + (x_00004_00009=1)))
c Both direct and order encoding.
c Var 'aux1091' order represents '0' with '4517'
c Var 'aux1091' direct represents '0' with '4517'
c Var 'aux1091' order represents '1' with '4518'
-4517 4518 0
c Var 'aux1091' direct represents '1' with '4519'
4517 -4518 4519 0
-4519 4518 0
-4519 -4517 0
c Var 'aux1091' direct represents '2' with '-4518'
4517 4519 -4518 0
c Encoding variable: aux1092 with domain: int(0..2) (representing constraint ((x_00004_00008=1) + (x_00004_00002=1)))
c Both direct and order encoding.
c Var 'aux1092' order represents '0' with '4520'
c Var 'aux1092' direct represents '0' with '4520'
c Var 'aux1092' order represents '1' with '4521'
-4520 4521 0
c Var 'aux1092' direct represents '1' with '4522'
4520 -4521 4522 0
-4522 4521 0
-4522 -4520 0
c Var 'aux1092' direct represents '2' with '-4521'
4520 4522 -4521 0
c Encoding variable: aux1093 with domain: int(0..2) (representing constraint ((x_00004_00007=1) + (x_00004_00004=1)))
c Both direct and order encoding.
c Var 'aux1093' order represents '0' with '4523'
c Var 'aux1093' direct represents '0' with '4523'
c Var 'aux1093' order represents '1' with '4524'
-4523 4524 0
c Var 'aux1093' direct represents '1' with '4525'
4523 -4524 4525 0
-4525 4524 0
-4525 -4523 0
c Var 'aux1093' direct represents '2' with '-4524'
4523 4525 -4524 0
c Encoding variable: aux1094 with domain: int(0..2) (representing constraint ((x_00004_00006=1) + (x_00004_00005=1)))
c Both direct and order encoding.
c Var 'aux1094' order represents '0' with '4526'
c Var 'aux1094' direct represents '0' with '4526'
c Var 'aux1094' order represents '1' with '4527'
-4526 4527 0
c Var 'aux1094' direct represents '1' with '4528'
4526 -4527 4528 0
-4528 4527 0
-4528 -4526 0
c Var 'aux1094' direct represents '2' with '-4527'
4526 4528 -4527 0
c Encoding variable: aux1095 with domain: int(0..3) (representing constraint ((x_00004_00003=1) + aux1094))
c Both direct and order encoding.
c Var 'aux1095' order represents '0' with '4529'
c Var 'aux1095' direct represents '0' with '4529'
c Var 'aux1095' order represents '1' with '4530'
-4529 4530 0
c Var 'aux1095' direct represents '1' with '4531'
4529 -4530 4531 0
-4531 4530 0
-4531 -4529 0
c Var 'aux1095' order represents '2' with '4532'
-4530 4532 0
c Var 'aux1095' direct represents '2' with '4533'
4530 -4532 4533 0
-4533 4532 0
-4533 -4530 0
c Var 'aux1095' direct represents '3' with '-4532'
4529 4531 4533 -4532 0
c Encoding variable: aux1096 with domain: int(0..4) (representing constraint (aux1091 + aux1093))
c Both direct and order encoding.
c Var 'aux1096' order represents '0' with '4534'
c Var 'aux1096' direct represents '0' with '4534'
c Var 'aux1096' order represents '1' with '4535'
-4534 4535 0
c Var 'aux1096' direct represents '1' with '4536'
4534 -4535 4536 0
-4536 4535 0
-4536 -4534 0
c Var 'aux1096' order represents '2' with '4537'
-4535 4537 0
c Var 'aux1096' direct represents '2' with '4538'
4535 -4537 4538 0
-4538 4537 0
-4538 -4535 0
c Var 'aux1096' order represents '3' with '4539'
-4537 4539 0
c Var 'aux1096' direct represents '3' with '4540'
4537 -4539 4540 0
-4540 4539 0
-4540 -4537 0
c Var 'aux1096' direct represents '4' with '-4539'
4534 4536 4538 4540 -4539 0
c Encoding variable: aux1097 with domain: int(0..2) (representing constraint ((x_00004_00001=2) + (x_00004_00009=2)))
c Both direct and order encoding.
c Var 'aux1097' order represents '0' with '4541'
c Var 'aux1097' direct represents '0' with '4541'
c Var 'aux1097' order represents '1' with '4542'
-4541 4542 0
c Var 'aux1097' direct represents '1' with '4543'
4541 -4542 4543 0
-4543 4542 0
-4543 -4541 0
c Var 'aux1097' direct represents '2' with '-4542'
4541 4543 -4542 0
c Encoding variable: aux1098 with domain: int(0..2) (representing constraint ((x_00004_00008=2) + (x_00004_00002=2)))
c Both direct and order encoding.
c Var 'aux1098' order represents '0' with '4544'
c Var 'aux1098' direct represents '0' with '4544'
c Var 'aux1098' order represents '1' with '4545'
-4544 4545 0
c Var 'aux1098' direct represents '1' with '4546'
4544 -4545 4546 0
-4546 4545 0
-4546 -4544 0
c Var 'aux1098' direct represents '2' with '-4545'
4544 4546 -4545 0
c Encoding variable: aux1099 with domain: int(0..2) (representing constraint ((x_00004_00007=2) + (x_00004_00004=2)))
c Both direct and order encoding.
c Var 'aux1099' order represents '0' with '4547'
c Var 'aux1099' direct represents '0' with '4547'
c Var 'aux1099' order represents '1' with '4548'
-4547 4548 0
c Var 'aux1099' direct represents '1' with '4549'
4547 -4548 4549 0
-4549 4548 0
-4549 -4547 0
c Var 'aux1099' direct represents '2' with '-4548'
4547 4549 -4548 0
c Encoding variable: aux1100 with domain: int(0..2) (representing constraint ((x_00004_00006=2) + (x_00004_00005=2)))
c Both direct and order encoding.
c Var 'aux1100' order represents '0' with '4550'
c Var 'aux1100' direct represents '0' with '4550'
c Var 'aux1100' order represents '1' with '4551'
-4550 4551 0
c Var 'aux1100' direct represents '1' with '4552'
4550 -4551 4552 0
-4552 4551 0
-4552 -4550 0
c Var 'aux1100' direct represents '2' with '-4551'
4550 4552 -4551 0
c Encoding variable: aux1101 with domain: int(0..3) (representing constraint ((x_00004_00003=2) + aux1100))
c Both direct and order encoding.
c Var 'aux1101' order represents '0' with '4553'
c Var 'aux1101' direct represents '0' with '4553'
c Var 'aux1101' order represents '1' with '4554'
-4553 4554 0
c Var 'aux1101' direct represents '1' with '4555'
4553 -4554 4555 0
-4555 4554 0
-4555 -4553 0
c Var 'aux1101' order represents '2' with '4556'
-4554 4556 0
c Var 'aux1101' direct represents '2' with '4557'
4554 -4556 4557 0
-4557 4556 0
-4557 -4554 0
c Var 'aux1101' direct represents '3' with '-4556'
4553 4555 4557 -4556 0
c Encoding variable: aux1102 with domain: int(0..4) (representing constraint (aux1097 + aux1099))
c Both direct and order encoding.
c Var 'aux1102' order represents '0' with '4558'
c Var 'aux1102' direct represents '0' with '4558'
c Var 'aux1102' order represents '1' with '4559'
-4558 4559 0
c Var 'aux1102' direct represents '1' with '4560'
4558 -4559 4560 0
-4560 4559 0
-4560 -4558 0
c Var 'aux1102' order represents '2' with '4561'
-4559 4561 0
c Var 'aux1102' direct represents '2' with '4562'
4559 -4561 4562 0
-4562 4561 0
-4562 -4559 0
c Var 'aux1102' order represents '3' with '4563'
-4561 4563 0
c Var 'aux1102' direct represents '3' with '4564'
4561 -4563 4564 0
-4564 4563 0
-4564 -4561 0
c Var 'aux1102' direct represents '4' with '-4563'
4558 4560 4562 4564 -4563 0
c Encoding variable: aux1103 with domain: int(0..2) (representing constraint ((x_00004_00001=3) + (x_00004_00009=3)))
c Both direct and order encoding.
c Var 'aux1103' order represents '0' with '4565'
c Var 'aux1103' direct represents '0' with '4565'
c Var 'aux1103' order represents '1' with '4566'
-4565 4566 0
c Var 'aux1103' direct represents '1' with '4567'
4565 -4566 4567 0
-4567 4566 0
-4567 -4565 0
c Var 'aux1103' direct represents '2' with '-4566'
4565 4567 -4566 0
c Encoding variable: aux1104 with domain: int(0..2) (representing constraint ((x_00004_00008=3) + (x_00004_00002=3)))
c Both direct and order encoding.
c Var 'aux1104' order represents '0' with '4568'
c Var 'aux1104' direct represents '0' with '4568'
c Var 'aux1104' order represents '1' with '4569'
-4568 4569 0
c Var 'aux1104' direct represents '1' with '4570'
4568 -4569 4570 0
-4570 4569 0
-4570 -4568 0
c Var 'aux1104' direct represents '2' with '-4569'
4568 4570 -4569 0
c Encoding variable: aux1105 with domain: int(0..2) (representing constraint ((x_00004_00007=3) + (x_00004_00004=3)))
c Both direct and order encoding.
c Var 'aux1105' order represents '0' with '4571'
c Var 'aux1105' direct represents '0' with '4571'
c Var 'aux1105' order represents '1' with '4572'
-4571 4572 0
c Var 'aux1105' direct represents '1' with '4573'
4571 -4572 4573 0
-4573 4572 0
-4573 -4571 0
c Var 'aux1105' direct represents '2' with '-4572'
4571 4573 -4572 0
c Encoding variable: aux1106 with domain: int(0..2) (representing constraint ((x_00004_00006=3) + (x_00004_00005=3)))
c Both direct and order encoding.
c Var 'aux1106' order represents '0' with '4574'
c Var 'aux1106' direct represents '0' with '4574'
c Var 'aux1106' order represents '1' with '4575'
-4574 4575 0
c Var 'aux1106' direct represents '1' with '4576'
4574 -4575 4576 0
-4576 4575 0
-4576 -4574 0
c Var 'aux1106' direct represents '2' with '-4575'
4574 4576 -4575 0
c Encoding variable: aux1107 with domain: int(0..3) (representing constraint ((x_00004_00003=3) + aux1106))
c Both direct and order encoding.
c Var 'aux1107' order represents '0' with '4577'
c Var 'aux1107' direct represents '0' with '4577'
c Var 'aux1107' order represents '1' with '4578'
-4577 4578 0
c Var 'aux1107' direct represents '1' with '4579'
4577 -4578 4579 0
-4579 4578 0
-4579 -4577 0
c Var 'aux1107' order represents '2' with '4580'
-4578 4580 0
c Var 'aux1107' direct represents '2' with '4581'
4578 -4580 4581 0
-4581 4580 0
-4581 -4578 0
c Var 'aux1107' direct represents '3' with '-4580'
4577 4579 4581 -4580 0
c Encoding variable: aux1108 with domain: int(0..4) (representing constraint (aux1103 + aux1105))
c Both direct and order encoding.
c Var 'aux1108' order represents '0' with '4582'
c Var 'aux1108' direct represents '0' with '4582'
c Var 'aux1108' order represents '1' with '4583'
-4582 4583 0
c Var 'aux1108' direct represents '1' with '4584'
4582 -4583 4584 0
-4584 4583 0
-4584 -4582 0
c Var 'aux1108' order represents '2' with '4585'
-4583 4585 0
c Var 'aux1108' direct represents '2' with '4586'
4583 -4585 4586 0
-4586 4585 0
-4586 -4583 0
c Var 'aux1108' order represents '3' with '4587'
-4585 4587 0
c Var 'aux1108' direct represents '3' with '4588'
4585 -4587 4588 0
-4588 4587 0
-4588 -4585 0
c Var 'aux1108' direct represents '4' with '-4587'
4582 4584 4586 4588 -4587 0
c Encoding variable: aux1109 with domain: int(0..2) (representing constraint ((x_00004_00001=4) + (x_00004_00009=4)))
c Both direct and order encoding.
c Var 'aux1109' order represents '0' with '4589'
c Var 'aux1109' direct represents '0' with '4589'
c Var 'aux1109' order represents '1' with '4590'
-4589 4590 0
c Var 'aux1109' direct represents '1' with '4591'
4589 -4590 4591 0
-4591 4590 0
-4591 -4589 0
c Var 'aux1109' direct represents '2' with '-4590'
4589 4591 -4590 0
c Encoding variable: aux1110 with domain: int(0..2) (representing constraint ((x_00004_00008=4) + (x_00004_00002=4)))
c Both direct and order encoding.
c Var 'aux1110' order represents '0' with '4592'
c Var 'aux1110' direct represents '0' with '4592'
c Var 'aux1110' order represents '1' with '4593'
-4592 4593 0
c Var 'aux1110' direct represents '1' with '4594'
4592 -4593 4594 0
-4594 4593 0
-4594 -4592 0
c Var 'aux1110' direct represents '2' with '-4593'
4592 4594 -4593 0
c Encoding variable: aux1111 with domain: int(0..2) (representing constraint ((x_00004_00007=4) + (x_00004_00004=4)))
c Both direct and order encoding.
c Var 'aux1111' order represents '0' with '4595'
c Var 'aux1111' direct represents '0' with '4595'
c Var 'aux1111' order represents '1' with '4596'
-4595 4596 0
c Var 'aux1111' direct represents '1' with '4597'
4595 -4596 4597 0
-4597 4596 0
-4597 -4595 0
c Var 'aux1111' direct represents '2' with '-4596'
4595 4597 -4596 0
c Encoding variable: aux1112 with domain: int(0..2) (representing constraint ((x_00004_00006=4) + (x_00004_00005=4)))
c Both direct and order encoding.
c Var 'aux1112' order represents '0' with '4598'
c Var 'aux1112' direct represents '0' with '4598'
c Var 'aux1112' order represents '1' with '4599'
-4598 4599 0
c Var 'aux1112' direct represents '1' with '4600'
4598 -4599 4600 0
-4600 4599 0
-4600 -4598 0
c Var 'aux1112' direct represents '2' with '-4599'
4598 4600 -4599 0
c Encoding variable: aux1113 with domain: int(0..3) (representing constraint ((x_00004_00003=4) + aux1112))
c Both direct and order encoding.
c Var 'aux1113' order represents '0' with '4601'
c Var 'aux1113' direct represents '0' with '4601'
c Var 'aux1113' order represents '1' with '4602'
-4601 4602 0
c Var 'aux1113' direct represents '1' with '4603'
4601 -4602 4603 0
-4603 4602 0
-4603 -4601 0
c Var 'aux1113' order represents '2' with '4604'
-4602 4604 0
c Var 'aux1113' direct represents '2' with '4605'
4602 -4604 4605 0
-4605 4604 0
-4605 -4602 0
c Var 'aux1113' direct represents '3' with '-4604'
4601 4603 4605 -4604 0
c Encoding variable: aux1114 with domain: int(0..4) (representing constraint (aux1109 + aux1111))
c Both direct and order encoding.
c Var 'aux1114' order represents '0' with '4606'
c Var 'aux1114' direct represents '0' with '4606'
c Var 'aux1114' order represents '1' with '4607'
-4606 4607 0
c Var 'aux1114' direct represents '1' with '4608'
4606 -4607 4608 0
-4608 4607 0
-4608 -4606 0
c Var 'aux1114' order represents '2' with '4609'
-4607 4609 0
c Var 'aux1114' direct represents '2' with '4610'
4607 -4609 4610 0
-4610 4609 0
-4610 -4607 0
c Var 'aux1114' order represents '3' with '4611'
-4609 4611 0
c Var 'aux1114' direct represents '3' with '4612'
4609 -4611 4612 0
-4612 4611 0
-4612 -4609 0
c Var 'aux1114' direct represents '4' with '-4611'
4606 4608 4610 4612 -4611 0
c Encoding variable: aux1115 with domain: int(0..2) (representing constraint ((x_00004_00001=5) + (x_00004_00009=5)))
c Both direct and order encoding.
c Var 'aux1115' order represents '0' with '4613'
c Var 'aux1115' direct represents '0' with '4613'
c Var 'aux1115' order represents '1' with '4614'
-4613 4614 0
c Var 'aux1115' direct represents '1' with '4615'
4613 -4614 4615 0
-4615 4614 0
-4615 -4613 0
c Var 'aux1115' direct represents '2' with '-4614'
4613 4615 -4614 0
c Encoding variable: aux1116 with domain: int(0..2) (representing constraint ((x_00004_00008=5) + (x_00004_00002=5)))
c Both direct and order encoding.
c Var 'aux1116' order represents '0' with '4616'
c Var 'aux1116' direct represents '0' with '4616'
c Var 'aux1116' order represents '1' with '4617'
-4616 4617 0
c Var 'aux1116' direct represents '1' with '4618'
4616 -4617 4618 0
-4618 4617 0
-4618 -4616 0
c Var 'aux1116' direct represents '2' with '-4617'
4616 4618 -4617 0
c Encoding variable: aux1117 with domain: int(0..2) (representing constraint ((x_00004_00007=5) + (x_00004_00004=5)))
c Both direct and order encoding.
c Var 'aux1117' order represents '0' with '4619'
c Var 'aux1117' direct represents '0' with '4619'
c Var 'aux1117' order represents '1' with '4620'
-4619 4620 0
c Var 'aux1117' direct represents '1' with '4621'
4619 -4620 4621 0
-4621 4620 0
-4621 -4619 0
c Var 'aux1117' direct represents '2' with '-4620'
4619 4621 -4620 0
c Encoding variable: aux1118 with domain: int(0..2) (representing constraint ((x_00004_00006=5) + (x_00004_00005=5)))
c Both direct and order encoding.
c Var 'aux1118' order represents '0' with '4622'
c Var 'aux1118' direct represents '0' with '4622'
c Var 'aux1118' order represents '1' with '4623'
-4622 4623 0
c Var 'aux1118' direct represents '1' with '4624'
4622 -4623 4624 0
-4624 4623 0
-4624 -4622 0
c Var 'aux1118' direct represents '2' with '-4623'
4622 4624 -4623 0
c Encoding variable: aux1119 with domain: int(0..3) (representing constraint ((x_00004_00003=5) + aux1118))
c Both direct and order encoding.
c Var 'aux1119' order represents '0' with '4625'
c Var 'aux1119' direct represents '0' with '4625'
c Var 'aux1119' order represents '1' with '4626'
-4625 4626 0
c Var 'aux1119' direct represents '1' with '4627'
4625 -4626 4627 0
-4627 4626 0
-4627 -4625 0
c Var 'aux1119' order represents '2' with '4628'
-4626 4628 0
c Var 'aux1119' direct represents '2' with '4629'
4626 -4628 4629 0
-4629 4628 0
-4629 -4626 0
c Var 'aux1119' direct represents '3' with '-4628'
4625 4627 4629 -4628 0
c Encoding variable: aux1120 with domain: int(0..4) (representing constraint (aux1115 + aux1117))
c Both direct and order encoding.
c Var 'aux1120' order represents '0' with '4630'
c Var 'aux1120' direct represents '0' with '4630'
c Var 'aux1120' order represents '1' with '4631'
-4630 4631 0
c Var 'aux1120' direct represents '1' with '4632'
4630 -4631 4632 0
-4632 4631 0
-4632 -4630 0
c Var 'aux1120' order represents '2' with '4633'
-4631 4633 0
c Var 'aux1120' direct represents '2' with '4634'
4631 -4633 4634 0
-4634 4633 0
-4634 -4631 0
c Var 'aux1120' order represents '3' with '4635'
-4633 4635 0
c Var 'aux1120' direct represents '3' with '4636'
4633 -4635 4636 0
-4636 4635 0
-4636 -4633 0
c Var 'aux1120' direct represents '4' with '-4635'
4630 4632 4634 4636 -4635 0
c Encoding variable: aux1121 with domain: int(0..2) (representing constraint ((x_00004_00001=6) + (x_00004_00009=6)))
c Both direct and order encoding.
c Var 'aux1121' order represents '0' with '4637'
c Var 'aux1121' direct represents '0' with '4637'
c Var 'aux1121' order represents '1' with '4638'
-4637 4638 0
c Var 'aux1121' direct represents '1' with '4639'
4637 -4638 4639 0
-4639 4638 0
-4639 -4637 0
c Var 'aux1121' direct represents '2' with '-4638'
4637 4639 -4638 0
c Encoding variable: aux1122 with domain: int(0..2) (representing constraint ((x_00004_00008=6) + (x_00004_00002=6)))
c Both direct and order encoding.
c Var 'aux1122' order represents '0' with '4640'
c Var 'aux1122' direct represents '0' with '4640'
c Var 'aux1122' order represents '1' with '4641'
-4640 4641 0
c Var 'aux1122' direct represents '1' with '4642'
4640 -4641 4642 0
-4642 4641 0
-4642 -4640 0
c Var 'aux1122' direct represents '2' with '-4641'
4640 4642 -4641 0
c Encoding variable: aux1123 with domain: int(0..2) (representing constraint ((x_00004_00007=6) + (x_00004_00004=6)))
c Both direct and order encoding.
c Var 'aux1123' order represents '0' with '4643'
c Var 'aux1123' direct represents '0' with '4643'
c Var 'aux1123' order represents '1' with '4644'
-4643 4644 0
c Var 'aux1123' direct represents '1' with '4645'
4643 -4644 4645 0
-4645 4644 0
-4645 -4643 0
c Var 'aux1123' direct represents '2' with '-4644'
4643 4645 -4644 0
c Encoding variable: aux1124 with domain: int(0..2) (representing constraint ((x_00004_00006=6) + (x_00004_00005=6)))
c Both direct and order encoding.
c Var 'aux1124' order represents '0' with '4646'
c Var 'aux1124' direct represents '0' with '4646'
c Var 'aux1124' order represents '1' with '4647'
-4646 4647 0
c Var 'aux1124' direct represents '1' with '4648'
4646 -4647 4648 0
-4648 4647 0
-4648 -4646 0
c Var 'aux1124' direct represents '2' with '-4647'
4646 4648 -4647 0
c Encoding variable: aux1125 with domain: int(0..3) (representing constraint ((x_00004_00003=6) + aux1124))
c Both direct and order encoding.
c Var 'aux1125' order represents '0' with '4649'
c Var 'aux1125' direct represents '0' with '4649'
c Var 'aux1125' order represents '1' with '4650'
-4649 4650 0
c Var 'aux1125' direct represents '1' with '4651'
4649 -4650 4651 0
-4651 4650 0
-4651 -4649 0
c Var 'aux1125' order represents '2' with '4652'
-4650 4652 0
c Var 'aux1125' direct represents '2' with '4653'
4650 -4652 4653 0
-4653 4652 0
-4653 -4650 0
c Var 'aux1125' direct represents '3' with '-4652'
4649 4651 4653 -4652 0
c Encoding variable: aux1126 with domain: int(0..4) (representing constraint (aux1121 + aux1123))
c Both direct and order encoding.
c Var 'aux1126' order represents '0' with '4654'
c Var 'aux1126' direct represents '0' with '4654'
c Var 'aux1126' order represents '1' with '4655'
-4654 4655 0
c Var 'aux1126' direct represents '1' with '4656'
4654 -4655 4656 0
-4656 4655 0
-4656 -4654 0
c Var 'aux1126' order represents '2' with '4657'
-4655 4657 0
c Var 'aux1126' direct represents '2' with '4658'
4655 -4657 4658 0
-4658 4657 0
-4658 -4655 0
c Var 'aux1126' order represents '3' with '4659'
-4657 4659 0
c Var 'aux1126' direct represents '3' with '4660'
4657 -4659 4660 0
-4660 4659 0
-4660 -4657 0
c Var 'aux1126' direct represents '4' with '-4659'
4654 4656 4658 4660 -4659 0
c Encoding variable: aux1127 with domain: int(0..2) (representing constraint ((x_00004_00001=7) + (x_00004_00009=7)))
c Both direct and order encoding.
c Var 'aux1127' order represents '0' with '4661'
c Var 'aux1127' direct represents '0' with '4661'
c Var 'aux1127' order represents '1' with '4662'
-4661 4662 0
c Var 'aux1127' direct represents '1' with '4663'
4661 -4662 4663 0
-4663 4662 0
-4663 -4661 0
c Var 'aux1127' direct represents '2' with '-4662'
4661 4663 -4662 0
c Encoding variable: aux1128 with domain: int(0..2) (representing constraint ((x_00004_00008=7) + (x_00004_00002=7)))
c Both direct and order encoding.
c Var 'aux1128' order represents '0' with '4664'
c Var 'aux1128' direct represents '0' with '4664'
c Var 'aux1128' order represents '1' with '4665'
-4664 4665 0
c Var 'aux1128' direct represents '1' with '4666'
4664 -4665 4666 0
-4666 4665 0
-4666 -4664 0
c Var 'aux1128' direct represents '2' with '-4665'
4664 4666 -4665 0
c Encoding variable: aux1129 with domain: int(0..2) (representing constraint ((x_00004_00007=7) + (x_00004_00004=7)))
c Both direct and order encoding.
c Var 'aux1129' order represents '0' with '4667'
c Var 'aux1129' direct represents '0' with '4667'
c Var 'aux1129' order represents '1' with '4668'
-4667 4668 0
c Var 'aux1129' direct represents '1' with '4669'
4667 -4668 4669 0
-4669 4668 0
-4669 -4667 0
c Var 'aux1129' direct represents '2' with '-4668'
4667 4669 -4668 0
c Encoding variable: aux1130 with domain: int(0..2) (representing constraint ((x_00004_00006=7) + (x_00004_00005=7)))
c Both direct and order encoding.
c Var 'aux1130' order represents '0' with '4670'
c Var 'aux1130' direct represents '0' with '4670'
c Var 'aux1130' order represents '1' with '4671'
-4670 4671 0
c Var 'aux1130' direct represents '1' with '4672'
4670 -4671 4672 0
-4672 4671 0
-4672 -4670 0
c Var 'aux1130' direct represents '2' with '-4671'
4670 4672 -4671 0
c Encoding variable: aux1131 with domain: int(0..3) (representing constraint ((x_00004_00003=7) + aux1130))
c Both direct and order encoding.
c Var 'aux1131' order represents '0' with '4673'
c Var 'aux1131' direct represents '0' with '4673'
c Var 'aux1131' order represents '1' with '4674'
-4673 4674 0
c Var 'aux1131' direct represents '1' with '4675'
4673 -4674 4675 0
-4675 4674 0
-4675 -4673 0
c Var 'aux1131' order represents '2' with '4676'
-4674 4676 0
c Var 'aux1131' direct represents '2' with '4677'
4674 -4676 4677 0
-4677 4676 0
-4677 -4674 0
c Var 'aux1131' direct represents '3' with '-4676'
4673 4675 4677 -4676 0
c Encoding variable: aux1132 with domain: int(0..4) (representing constraint (aux1127 + aux1129))
c Both direct and order encoding.
c Var 'aux1132' order represents '0' with '4678'
c Var 'aux1132' direct represents '0' with '4678'
c Var 'aux1132' order represents '1' with '4679'
-4678 4679 0
c Var 'aux1132' direct represents '1' with '4680'
4678 -4679 4680 0
-4680 4679 0
-4680 -4678 0
c Var 'aux1132' order represents '2' with '4681'
-4679 4681 0
c Var 'aux1132' direct represents '2' with '4682'
4679 -4681 4682 0
-4682 4681 0
-4682 -4679 0
c Var 'aux1132' order represents '3' with '4683'
-4681 4683 0
c Var 'aux1132' direct represents '3' with '4684'
4681 -4683 4684 0
-4684 4683 0
-4684 -4681 0
c Var 'aux1132' direct represents '4' with '-4683'
4678 4680 4682 4684 -4683 0
c Encoding variable: aux1133 with domain: int(0..2) (representing constraint ((x_00004_00001=8) + (x_00004_00009=8)))
c Both direct and order encoding.
c Var 'aux1133' order represents '0' with '4685'
c Var 'aux1133' direct represents '0' with '4685'
c Var 'aux1133' order represents '1' with '4686'
-4685 4686 0
c Var 'aux1133' direct represents '1' with '4687'
4685 -4686 4687 0
-4687 4686 0
-4687 -4685 0
c Var 'aux1133' direct represents '2' with '-4686'
4685 4687 -4686 0
c Encoding variable: aux1134 with domain: int(0..2) (representing constraint ((x_00004_00008=8) + (x_00004_00002=8)))
c Both direct and order encoding.
c Var 'aux1134' order represents '0' with '4688'
c Var 'aux1134' direct represents '0' with '4688'
c Var 'aux1134' order represents '1' with '4689'
-4688 4689 0
c Var 'aux1134' direct represents '1' with '4690'
4688 -4689 4690 0
-4690 4689 0
-4690 -4688 0
c Var 'aux1134' direct represents '2' with '-4689'
4688 4690 -4689 0
c Encoding variable: aux1135 with domain: int(0..2) (representing constraint ((x_00004_00007=8) + (x_00004_00004=8)))
c Both direct and order encoding.
c Var 'aux1135' order represents '0' with '4691'
c Var 'aux1135' direct represents '0' with '4691'
c Var 'aux1135' order represents '1' with '4692'
-4691 4692 0
c Var 'aux1135' direct represents '1' with '4693'
4691 -4692 4693 0
-4693 4692 0
-4693 -4691 0
c Var 'aux1135' direct represents '2' with '-4692'
4691 4693 -4692 0
c Encoding variable: aux1136 with domain: int(0..2) (representing constraint ((x_00004_00006=8) + (x_00004_00005=8)))
c Both direct and order encoding.
c Var 'aux1136' order represents '0' with '4694'
c Var 'aux1136' direct represents '0' with '4694'
c Var 'aux1136' order represents '1' with '4695'
-4694 4695 0
c Var 'aux1136' direct represents '1' with '4696'
4694 -4695 4696 0
-4696 4695 0
-4696 -4694 0
c Var 'aux1136' direct represents '2' with '-4695'
4694 4696 -4695 0
c Encoding variable: aux1137 with domain: int(0..3) (representing constraint ((x_00004_00003=8) + aux1136))
c Both direct and order encoding.
c Var 'aux1137' order represents '0' with '4697'
c Var 'aux1137' direct represents '0' with '4697'
c Var 'aux1137' order represents '1' with '4698'
-4697 4698 0
c Var 'aux1137' direct represents '1' with '4699'
4697 -4698 4699 0
-4699 4698 0
-4699 -4697 0
c Var 'aux1137' order represents '2' with '4700'
-4698 4700 0
c Var 'aux1137' direct represents '2' with '4701'
4698 -4700 4701 0
-4701 4700 0
-4701 -4698 0
c Var 'aux1137' direct represents '3' with '-4700'
4697 4699 4701 -4700 0
c Encoding variable: aux1138 with domain: int(0..4) (representing constraint (aux1133 + aux1135))
c Both direct and order encoding.
c Var 'aux1138' order represents '0' with '4702'
c Var 'aux1138' direct represents '0' with '4702'
c Var 'aux1138' order represents '1' with '4703'
-4702 4703 0
c Var 'aux1138' direct represents '1' with '4704'
4702 -4703 4704 0
-4704 4703 0
-4704 -4702 0
c Var 'aux1138' order represents '2' with '4705'
-4703 4705 0
c Var 'aux1138' direct represents '2' with '4706'
4703 -4705 4706 0
-4706 4705 0
-4706 -4703 0
c Var 'aux1138' order represents '3' with '4707'
-4705 4707 0
c Var 'aux1138' direct represents '3' with '4708'
4705 -4707 4708 0
-4708 4707 0
-4708 -4705 0
c Var 'aux1138' direct represents '4' with '-4707'
4702 4704 4706 4708 -4707 0
c Encoding variable: aux1139 with domain: int(0..2) (representing constraint ((x_00004_00001=9) + (x_00004_00009=9)))
c Both direct and order encoding.
c Var 'aux1139' order represents '0' with '4709'
c Var 'aux1139' direct represents '0' with '4709'
c Var 'aux1139' order represents '1' with '4710'
-4709 4710 0
c Var 'aux1139' direct represents '1' with '4711'
4709 -4710 4711 0
-4711 4710 0
-4711 -4709 0
c Var 'aux1139' direct represents '2' with '-4710'
4709 4711 -4710 0
c Encoding variable: aux1140 with domain: int(0..2) (representing constraint ((x_00004_00008=9) + (x_00004_00002=9)))
c Both direct and order encoding.
c Var 'aux1140' order represents '0' with '4712'
c Var 'aux1140' direct represents '0' with '4712'
c Var 'aux1140' order represents '1' with '4713'
-4712 4713 0
c Var 'aux1140' direct represents '1' with '4714'
4712 -4713 4714 0
-4714 4713 0
-4714 -4712 0
c Var 'aux1140' direct represents '2' with '-4713'
4712 4714 -4713 0
c Encoding variable: aux1141 with domain: int(0..2) (representing constraint ((x_00004_00007=9) + (x_00004_00004=9)))
c Both direct and order encoding.
c Var 'aux1141' order represents '0' with '4715'
c Var 'aux1141' direct represents '0' with '4715'
c Var 'aux1141' order represents '1' with '4716'
-4715 4716 0
c Var 'aux1141' direct represents '1' with '4717'
4715 -4716 4717 0
-4717 4716 0
-4717 -4715 0
c Var 'aux1141' direct represents '2' with '-4716'
4715 4717 -4716 0
c Encoding variable: aux1142 with domain: int(0..2) (representing constraint ((x_00004_00006=9) + (x_00004_00005=9)))
c Both direct and order encoding.
c Var 'aux1142' order represents '0' with '4718'
c Var 'aux1142' direct represents '0' with '4718'
c Var 'aux1142' order represents '1' with '4719'
-4718 4719 0
c Var 'aux1142' direct represents '1' with '4720'
4718 -4719 4720 0
-4720 4719 0
-4720 -4718 0
c Var 'aux1142' direct represents '2' with '-4719'
4718 4720 -4719 0
c Encoding variable: aux1143 with domain: int(0..3) (representing constraint ((x_00004_00003=9) + aux1142))
c Both direct and order encoding.
c Var 'aux1143' order represents '0' with '4721'
c Var 'aux1143' direct represents '0' with '4721'
c Var 'aux1143' order represents '1' with '4722'
-4721 4722 0
c Var 'aux1143' direct represents '1' with '4723'
4721 -4722 4723 0
-4723 4722 0
-4723 -4721 0
c Var 'aux1143' order represents '2' with '4724'
-4722 4724 0
c Var 'aux1143' direct represents '2' with '4725'
4722 -4724 4725 0
-4725 4724 0
-4725 -4722 0
c Var 'aux1143' direct represents '3' with '-4724'
4721 4723 4725 -4724 0
c Encoding variable: aux1144 with domain: int(0..4) (representing constraint (aux1139 + aux1141))
c Both direct and order encoding.
c Var 'aux1144' order represents '0' with '4726'
c Var 'aux1144' direct represents '0' with '4726'
c Var 'aux1144' order represents '1' with '4727'
-4726 4727 0
c Var 'aux1144' direct represents '1' with '4728'
4726 -4727 4728 0
-4728 4727 0
-4728 -4726 0
c Var 'aux1144' order represents '2' with '4729'
-4727 4729 0
c Var 'aux1144' direct represents '2' with '4730'
4727 -4729 4730 0
-4730 4729 0
-4730 -4727 0
c Var 'aux1144' order represents '3' with '4731'
-4729 4731 0
c Var 'aux1144' direct represents '3' with '4732'
4729 -4731 4732 0
-4732 4731 0
-4732 -4729 0
c Var 'aux1144' direct represents '4' with '-4731'
4726 4728 4730 4732 -4731 0
c Encoding variable: aux1145 with domain: int(0..2) (representing constraint ((x_00005_00001=1) + (x_00005_00009=1)))
c Both direct and order encoding.
c Var 'aux1145' order represents '0' with '4733'
c Var 'aux1145' direct represents '0' with '4733'
c Var 'aux1145' order represents '1' with '4734'
-4733 4734 0
c Var 'aux1145' direct represents '1' with '4735'
4733 -4734 4735 0
-4735 4734 0
-4735 -4733 0
c Var 'aux1145' direct represents '2' with '-4734'
4733 4735 -4734 0
c Encoding variable: aux1146 with domain: int(0..2) (representing constraint ((x_00005_00008=1) + (x_00005_00002=1)))
c Both direct and order encoding.
c Var 'aux1146' order represents '0' with '4736'
c Var 'aux1146' direct represents '0' with '4736'
c Var 'aux1146' order represents '1' with '4737'
-4736 4737 0
c Var 'aux1146' direct represents '1' with '4738'
4736 -4737 4738 0
-4738 4737 0
-4738 -4736 0
c Var 'aux1146' direct represents '2' with '-4737'
4736 4738 -4737 0
c Encoding variable: aux1147 with domain: int(0..2) (representing constraint ((x_00005_00007=1) + (x_00005_00004=1)))
c Both direct and order encoding.
c Var 'aux1147' order represents '0' with '4739'
c Var 'aux1147' direct represents '0' with '4739'
c Var 'aux1147' order represents '1' with '4740'
-4739 4740 0
c Var 'aux1147' direct represents '1' with '4741'
4739 -4740 4741 0
-4741 4740 0
-4741 -4739 0
c Var 'aux1147' direct represents '2' with '-4740'
4739 4741 -4740 0
c Encoding variable: aux1148 with domain: int(0..2) (representing constraint ((x_00005_00006=1) + (x_00005_00005=1)))
c Both direct and order encoding.
c Var 'aux1148' order represents '0' with '4742'
c Var 'aux1148' direct represents '0' with '4742'
c Var 'aux1148' order represents '1' with '4743'
-4742 4743 0
c Var 'aux1148' direct represents '1' with '4744'
4742 -4743 4744 0
-4744 4743 0
-4744 -4742 0
c Var 'aux1148' direct represents '2' with '-4743'
4742 4744 -4743 0
c Encoding variable: aux1149 with domain: int(0..3) (representing constraint ((x_00005_00003=1) + aux1148))
c Both direct and order encoding.
c Var 'aux1149' order represents '0' with '4745'
c Var 'aux1149' direct represents '0' with '4745'
c Var 'aux1149' order represents '1' with '4746'
-4745 4746 0
c Var 'aux1149' direct represents '1' with '4747'
4745 -4746 4747 0
-4747 4746 0
-4747 -4745 0
c Var 'aux1149' order represents '2' with '4748'
-4746 4748 0
c Var 'aux1149' direct represents '2' with '4749'
4746 -4748 4749 0
-4749 4748 0
-4749 -4746 0
c Var 'aux1149' direct represents '3' with '-4748'
4745 4747 4749 -4748 0
c Encoding variable: aux1150 with domain: int(0..4) (representing constraint (aux1145 + aux1147))
c Both direct and order encoding.
c Var 'aux1150' order represents '0' with '4750'
c Var 'aux1150' direct represents '0' with '4750'
c Var 'aux1150' order represents '1' with '4751'
-4750 4751 0
c Var 'aux1150' direct represents '1' with '4752'
4750 -4751 4752 0
-4752 4751 0
-4752 -4750 0
c Var 'aux1150' order represents '2' with '4753'
-4751 4753 0
c Var 'aux1150' direct represents '2' with '4754'
4751 -4753 4754 0
-4754 4753 0
-4754 -4751 0
c Var 'aux1150' order represents '3' with '4755'
-4753 4755 0
c Var 'aux1150' direct represents '3' with '4756'
4753 -4755 4756 0
-4756 4755 0
-4756 -4753 0
c Var 'aux1150' direct represents '4' with '-4755'
4750 4752 4754 4756 -4755 0
c Encoding variable: aux1151 with domain: int(0..2) (representing constraint ((x_00005_00001=2) + (x_00005_00009=2)))
c Both direct and order encoding.
c Var 'aux1151' order represents '0' with '4757'
c Var 'aux1151' direct represents '0' with '4757'
c Var 'aux1151' order represents '1' with '4758'
-4757 4758 0
c Var 'aux1151' direct represents '1' with '4759'
4757 -4758 4759 0
-4759 4758 0
-4759 -4757 0
c Var 'aux1151' direct represents '2' with '-4758'
4757 4759 -4758 0
c Encoding variable: aux1152 with domain: int(0..2) (representing constraint ((x_00005_00008=2) + (x_00005_00002=2)))
c Both direct and order encoding.
c Var 'aux1152' order represents '0' with '4760'
c Var 'aux1152' direct represents '0' with '4760'
c Var 'aux1152' order represents '1' with '4761'
-4760 4761 0
c Var 'aux1152' direct represents '1' with '4762'
4760 -4761 4762 0
-4762 4761 0
-4762 -4760 0
c Var 'aux1152' direct represents '2' with '-4761'
4760 4762 -4761 0
c Encoding variable: aux1153 with domain: int(0..2) (representing constraint ((x_00005_00007=2) + (x_00005_00004=2)))
c Both direct and order encoding.
c Var 'aux1153' order represents '0' with '4763'
c Var 'aux1153' direct represents '0' with '4763'
c Var 'aux1153' order represents '1' with '4764'
-4763 4764 0
c Var 'aux1153' direct represents '1' with '4765'
4763 -4764 4765 0
-4765 4764 0
-4765 -4763 0
c Var 'aux1153' direct represents '2' with '-4764'
4763 4765 -4764 0
c Encoding variable: aux1154 with domain: int(0..2) (representing constraint ((x_00005_00006=2) + (x_00005_00005=2)))
c Both direct and order encoding.
c Var 'aux1154' order represents '0' with '4766'
c Var 'aux1154' direct represents '0' with '4766'
c Var 'aux1154' order represents '1' with '4767'
-4766 4767 0
c Var 'aux1154' direct represents '1' with '4768'
4766 -4767 4768 0
-4768 4767 0
-4768 -4766 0
c Var 'aux1154' direct represents '2' with '-4767'
4766 4768 -4767 0
c Encoding variable: aux1155 with domain: int(0..3) (representing constraint ((x_00005_00003=2) + aux1154))
c Both direct and order encoding.
c Var 'aux1155' order represents '0' with '4769'
c Var 'aux1155' direct represents '0' with '4769'
c Var 'aux1155' order represents '1' with '4770'
-4769 4770 0
c Var 'aux1155' direct represents '1' with '4771'
4769 -4770 4771 0
-4771 4770 0
-4771 -4769 0
c Var 'aux1155' order represents '2' with '4772'
-4770 4772 0
c Var 'aux1155' direct represents '2' with '4773'
4770 -4772 4773 0
-4773 4772 0
-4773 -4770 0
c Var 'aux1155' direct represents '3' with '-4772'
4769 4771 4773 -4772 0
c Encoding variable: aux1156 with domain: int(0..4) (representing constraint (aux1151 + aux1153))
c Both direct and order encoding.
c Var 'aux1156' order represents '0' with '4774'
c Var 'aux1156' direct represents '0' with '4774'
c Var 'aux1156' order represents '1' with '4775'
-4774 4775 0
c Var 'aux1156' direct represents '1' with '4776'
4774 -4775 4776 0
-4776 4775 0
-4776 -4774 0
c Var 'aux1156' order represents '2' with '4777'
-4775 4777 0
c Var 'aux1156' direct represents '2' with '4778'
4775 -4777 4778 0
-4778 4777 0
-4778 -4775 0
c Var 'aux1156' order represents '3' with '4779'
-4777 4779 0
c Var 'aux1156' direct represents '3' with '4780'
4777 -4779 4780 0
-4780 4779 0
-4780 -4777 0
c Var 'aux1156' direct represents '4' with '-4779'
4774 4776 4778 4780 -4779 0
c Encoding variable: aux1157 with domain: int(0..2) (representing constraint ((x_00005_00001=3) + (x_00005_00009=3)))
c Both direct and order encoding.
c Var 'aux1157' order represents '0' with '4781'
c Var 'aux1157' direct represents '0' with '4781'
c Var 'aux1157' order represents '1' with '4782'
-4781 4782 0
c Var 'aux1157' direct represents '1' with '4783'
4781 -4782 4783 0
-4783 4782 0
-4783 -4781 0
c Var 'aux1157' direct represents '2' with '-4782'
4781 4783 -4782 0
c Encoding variable: aux1158 with domain: int(0..2) (representing constraint ((x_00005_00008=3) + (x_00005_00002=3)))
c Both direct and order encoding.
c Var 'aux1158' order represents '0' with '4784'
c Var 'aux1158' direct represents '0' with '4784'
c Var 'aux1158' order represents '1' with '4785'
-4784 4785 0
c Var 'aux1158' direct represents '1' with '4786'
4784 -4785 4786 0
-4786 4785 0
-4786 -4784 0
c Var 'aux1158' direct represents '2' with '-4785'
4784 4786 -4785 0
c Encoding variable: aux1159 with domain: int(0..2) (representing constraint ((x_00005_00007=3) + (x_00005_00004=3)))
c Both direct and order encoding.
c Var 'aux1159' order represents '0' with '4787'
c Var 'aux1159' direct represents '0' with '4787'
c Var 'aux1159' order represents '1' with '4788'
-4787 4788 0
c Var 'aux1159' direct represents '1' with '4789'
4787 -4788 4789 0
-4789 4788 0
-4789 -4787 0
c Var 'aux1159' direct represents '2' with '-4788'
4787 4789 -4788 0
c Encoding variable: aux1160 with domain: int(0..2) (representing constraint ((x_00005_00006=3) + (x_00005_00005=3)))
c Both direct and order encoding.
c Var 'aux1160' order represents '0' with '4790'
c Var 'aux1160' direct represents '0' with '4790'
c Var 'aux1160' order represents '1' with '4791'
-4790 4791 0
c Var 'aux1160' direct represents '1' with '4792'
4790 -4791 4792 0
-4792 4791 0
-4792 -4790 0
c Var 'aux1160' direct represents '2' with '-4791'
4790 4792 -4791 0
c Encoding variable: aux1161 with domain: int(0..3) (representing constraint ((x_00005_00003=3) + aux1160))
c Both direct and order encoding.
c Var 'aux1161' order represents '0' with '4793'
c Var 'aux1161' direct represents '0' with '4793'
c Var 'aux1161' order represents '1' with '4794'
-4793 4794 0
c Var 'aux1161' direct represents '1' with '4795'
4793 -4794 4795 0
-4795 4794 0
-4795 -4793 0
c Var 'aux1161' order represents '2' with '4796'
-4794 4796 0
c Var 'aux1161' direct represents '2' with '4797'
4794 -4796 4797 0
-4797 4796 0
-4797 -4794 0
c Var 'aux1161' direct represents '3' with '-4796'
4793 4795 4797 -4796 0
c Encoding variable: aux1162 with domain: int(0..4) (representing constraint (aux1157 + aux1159))
c Both direct and order encoding.
c Var 'aux1162' order represents '0' with '4798'
c Var 'aux1162' direct represents '0' with '4798'
c Var 'aux1162' order represents '1' with '4799'
-4798 4799 0
c Var 'aux1162' direct represents '1' with '4800'
4798 -4799 4800 0
-4800 4799 0
-4800 -4798 0
c Var 'aux1162' order represents '2' with '4801'
-4799 4801 0
c Var 'aux1162' direct represents '2' with '4802'
4799 -4801 4802 0
-4802 4801 0
-4802 -4799 0
c Var 'aux1162' order represents '3' with '4803'
-4801 4803 0
c Var 'aux1162' direct represents '3' with '4804'
4801 -4803 4804 0
-4804 4803 0
-4804 -4801 0
c Var 'aux1162' direct represents '4' with '-4803'
4798 4800 4802 4804 -4803 0
c Encoding variable: aux1163 with domain: int(0..2) (representing constraint ((x_00005_00001=4) + (x_00005_00009=4)))
c Both direct and order encoding.
c Var 'aux1163' order represents '0' with '4805'
c Var 'aux1163' direct represents '0' with '4805'
c Var 'aux1163' order represents '1' with '4806'
-4805 4806 0
c Var 'aux1163' direct represents '1' with '4807'
4805 -4806 4807 0
-4807 4806 0
-4807 -4805 0
c Var 'aux1163' direct represents '2' with '-4806'
4805 4807 -4806 0
c Encoding variable: aux1164 with domain: int(0..2) (representing constraint ((x_00005_00008=4) + (x_00005_00002=4)))
c Both direct and order encoding.
c Var 'aux1164' order represents '0' with '4808'
c Var 'aux1164' direct represents '0' with '4808'
c Var 'aux1164' order represents '1' with '4809'
-4808 4809 0
c Var 'aux1164' direct represents '1' with '4810'
4808 -4809 4810 0
-4810 4809 0
-4810 -4808 0
c Var 'aux1164' direct represents '2' with '-4809'
4808 4810 -4809 0
c Encoding variable: aux1165 with domain: int(0..2) (representing constraint ((x_00005_00007=4) + (x_00005_00004=4)))
c Both direct and order encoding.
c Var 'aux1165' order represents '0' with '4811'
c Var 'aux1165' direct represents '0' with '4811'
c Var 'aux1165' order represents '1' with '4812'
-4811 4812 0
c Var 'aux1165' direct represents '1' with '4813'
4811 -4812 4813 0
-4813 4812 0
-4813 -4811 0
c Var 'aux1165' direct represents '2' with '-4812'
4811 4813 -4812 0
c Encoding variable: aux1166 with domain: int(0..2) (representing constraint ((x_00005_00006=4) + (x_00005_00005=4)))
c Both direct and order encoding.
c Var 'aux1166' order represents '0' with '4814'
c Var 'aux1166' direct represents '0' with '4814'
c Var 'aux1166' order represents '1' with '4815'
-4814 4815 0
c Var 'aux1166' direct represents '1' with '4816'
4814 -4815 4816 0
-4816 4815 0
-4816 -4814 0
c Var 'aux1166' direct represents '2' with '-4815'
4814 4816 -4815 0
c Encoding variable: aux1167 with domain: int(0..3) (representing constraint ((x_00005_00003=4) + aux1166))
c Both direct and order encoding.
c Var 'aux1167' order represents '0' with '4817'
c Var 'aux1167' direct represents '0' with '4817'
c Var 'aux1167' order represents '1' with '4818'
-4817 4818 0
c Var 'aux1167' direct represents '1' with '4819'
4817 -4818 4819 0
-4819 4818 0
-4819 -4817 0
c Var 'aux1167' order represents '2' with '4820'
-4818 4820 0
c Var 'aux1167' direct represents '2' with '4821'
4818 -4820 4821 0
-4821 4820 0
-4821 -4818 0
c Var 'aux1167' direct represents '3' with '-4820'
4817 4819 4821 -4820 0
c Encoding variable: aux1168 with domain: int(0..4) (representing constraint (aux1163 + aux1165))
c Both direct and order encoding.
c Var 'aux1168' order represents '0' with '4822'
c Var 'aux1168' direct represents '0' with '4822'
c Var 'aux1168' order represents '1' with '4823'
-4822 4823 0
c Var 'aux1168' direct represents '1' with '4824'
4822 -4823 4824 0
-4824 4823 0
-4824 -4822 0
c Var 'aux1168' order represents '2' with '4825'
-4823 4825 0
c Var 'aux1168' direct represents '2' with '4826'
4823 -4825 4826 0
-4826 4825 0
-4826 -4823 0
c Var 'aux1168' order represents '3' with '4827'
-4825 4827 0
c Var 'aux1168' direct represents '3' with '4828'
4825 -4827 4828 0
-4828 4827 0
-4828 -4825 0
c Var 'aux1168' direct represents '4' with '-4827'
4822 4824 4826 4828 -4827 0
c Encoding variable: aux1169 with domain: int(0..2) (representing constraint ((x_00005_00001=5) + (x_00005_00009=5)))
c Both direct and order encoding.
c Var 'aux1169' order represents '0' with '4829'
c Var 'aux1169' direct represents '0' with '4829'
c Var 'aux1169' order represents '1' with '4830'
-4829 4830 0
c Var 'aux1169' direct represents '1' with '4831'
4829 -4830 4831 0
-4831 4830 0
-4831 -4829 0
c Var 'aux1169' direct represents '2' with '-4830'
4829 4831 -4830 0
c Encoding variable: aux1170 with domain: int(0..2) (representing constraint ((x_00005_00008=5) + (x_00005_00002=5)))
c Both direct and order encoding.
c Var 'aux1170' order represents '0' with '4832'
c Var 'aux1170' direct represents '0' with '4832'
c Var 'aux1170' order represents '1' with '4833'
-4832 4833 0
c Var 'aux1170' direct represents '1' with '4834'
4832 -4833 4834 0
-4834 4833 0
-4834 -4832 0
c Var 'aux1170' direct represents '2' with '-4833'
4832 4834 -4833 0
c Encoding variable: aux1171 with domain: int(0..2) (representing constraint ((x_00005_00007=5) + (x_00005_00004=5)))
c Both direct and order encoding.
c Var 'aux1171' order represents '0' with '4835'
c Var 'aux1171' direct represents '0' with '4835'
c Var 'aux1171' order represents '1' with '4836'
-4835 4836 0
c Var 'aux1171' direct represents '1' with '4837'
4835 -4836 4837 0
-4837 4836 0
-4837 -4835 0
c Var 'aux1171' direct represents '2' with '-4836'
4835 4837 -4836 0
c Encoding variable: aux1172 with domain: int(0..2) (representing constraint ((x_00005_00006=5) + (x_00005_00005=5)))
c Both direct and order encoding.
c Var 'aux1172' order represents '0' with '4838'
c Var 'aux1172' direct represents '0' with '4838'
c Var 'aux1172' order represents '1' with '4839'
-4838 4839 0
c Var 'aux1172' direct represents '1' with '4840'
4838 -4839 4840 0
-4840 4839 0
-4840 -4838 0
c Var 'aux1172' direct represents '2' with '-4839'
4838 4840 -4839 0
c Encoding variable: aux1173 with domain: int(0..3) (representing constraint ((x_00005_00003=5) + aux1172))
c Both direct and order encoding.
c Var 'aux1173' order represents '0' with '4841'
c Var 'aux1173' direct represents '0' with '4841'
c Var 'aux1173' order represents '1' with '4842'
-4841 4842 0
c Var 'aux1173' direct represents '1' with '4843'
4841 -4842 4843 0
-4843 4842 0
-4843 -4841 0
c Var 'aux1173' order represents '2' with '4844'
-4842 4844 0
c Var 'aux1173' direct represents '2' with '4845'
4842 -4844 4845 0
-4845 4844 0
-4845 -4842 0
c Var 'aux1173' direct represents '3' with '-4844'
4841 4843 4845 -4844 0
c Encoding variable: aux1174 with domain: int(0..4) (representing constraint (aux1169 + aux1171))
c Both direct and order encoding.
c Var 'aux1174' order represents '0' with '4846'
c Var 'aux1174' direct represents '0' with '4846'
c Var 'aux1174' order represents '1' with '4847'
-4846 4847 0
c Var 'aux1174' direct represents '1' with '4848'
4846 -4847 4848 0
-4848 4847 0
-4848 -4846 0
c Var 'aux1174' order represents '2' with '4849'
-4847 4849 0
c Var 'aux1174' direct represents '2' with '4850'
4847 -4849 4850 0
-4850 4849 0
-4850 -4847 0
c Var 'aux1174' order represents '3' with '4851'
-4849 4851 0
c Var 'aux1174' direct represents '3' with '4852'
4849 -4851 4852 0
-4852 4851 0
-4852 -4849 0
c Var 'aux1174' direct represents '4' with '-4851'
4846 4848 4850 4852 -4851 0
c Encoding variable: aux1175 with domain: int(0..2) (representing constraint ((x_00005_00001=6) + (x_00005_00009=6)))
c Both direct and order encoding.
c Var 'aux1175' order represents '0' with '4853'
c Var 'aux1175' direct represents '0' with '4853'
c Var 'aux1175' order represents '1' with '4854'
-4853 4854 0
c Var 'aux1175' direct represents '1' with '4855'
4853 -4854 4855 0
-4855 4854 0
-4855 -4853 0
c Var 'aux1175' direct represents '2' with '-4854'
4853 4855 -4854 0
c Encoding variable: aux1176 with domain: int(0..2) (representing constraint ((x_00005_00008=6) + (x_00005_00002=6)))
c Both direct and order encoding.
c Var 'aux1176' order represents '0' with '4856'
c Var 'aux1176' direct represents '0' with '4856'
c Var 'aux1176' order represents '1' with '4857'
-4856 4857 0
c Var 'aux1176' direct represents '1' with '4858'
4856 -4857 4858 0
-4858 4857 0
-4858 -4856 0
c Var 'aux1176' direct represents '2' with '-4857'
4856 4858 -4857 0
c Encoding variable: aux1177 with domain: int(0..2) (representing constraint ((x_00005_00007=6) + (x_00005_00004=6)))
c Both direct and order encoding.
c Var 'aux1177' order represents '0' with '4859'
c Var 'aux1177' direct represents '0' with '4859'
c Var 'aux1177' order represents '1' with '4860'
-4859 4860 0
c Var 'aux1177' direct represents '1' with '4861'
4859 -4860 4861 0
-4861 4860 0
-4861 -4859 0
c Var 'aux1177' direct represents '2' with '-4860'
4859 4861 -4860 0
c Encoding variable: aux1178 with domain: int(0..2) (representing constraint ((x_00005_00006=6) + (x_00005_00005=6)))
c Both direct and order encoding.
c Var 'aux1178' order represents '0' with '4862'
c Var 'aux1178' direct represents '0' with '4862'
c Var 'aux1178' order represents '1' with '4863'
-4862 4863 0
c Var 'aux1178' direct represents '1' with '4864'
4862 -4863 4864 0
-4864 4863 0
-4864 -4862 0
c Var 'aux1178' direct represents '2' with '-4863'
4862 4864 -4863 0
c Encoding variable: aux1179 with domain: int(0..3) (representing constraint ((x_00005_00003=6) + aux1178))
c Both direct and order encoding.
c Var 'aux1179' order represents '0' with '4865'
c Var 'aux1179' direct represents '0' with '4865'
c Var 'aux1179' order represents '1' with '4866'
-4865 4866 0
c Var 'aux1179' direct represents '1' with '4867'
4865 -4866 4867 0
-4867 4866 0
-4867 -4865 0
c Var 'aux1179' order represents '2' with '4868'
-4866 4868 0
c Var 'aux1179' direct represents '2' with '4869'
4866 -4868 4869 0
-4869 4868 0
-4869 -4866 0
c Var 'aux1179' direct represents '3' with '-4868'
4865 4867 4869 -4868 0
c Encoding variable: aux1180 with domain: int(0..4) (representing constraint (aux1175 + aux1177))
c Both direct and order encoding.
c Var 'aux1180' order represents '0' with '4870'
c Var 'aux1180' direct represents '0' with '4870'
c Var 'aux1180' order represents '1' with '4871'
-4870 4871 0
c Var 'aux1180' direct represents '1' with '4872'
4870 -4871 4872 0
-4872 4871 0
-4872 -4870 0
c Var 'aux1180' order represents '2' with '4873'
-4871 4873 0
c Var 'aux1180' direct represents '2' with '4874'
4871 -4873 4874 0
-4874 4873 0
-4874 -4871 0
c Var 'aux1180' order represents '3' with '4875'
-4873 4875 0
c Var 'aux1180' direct represents '3' with '4876'
4873 -4875 4876 0
-4876 4875 0
-4876 -4873 0
c Var 'aux1180' direct represents '4' with '-4875'
4870 4872 4874 4876 -4875 0
c Encoding variable: aux1181 with domain: int(0..2) (representing constraint ((x_00005_00001=7) + (x_00005_00009=7)))
c Both direct and order encoding.
c Var 'aux1181' order represents '0' with '4877'
c Var 'aux1181' direct represents '0' with '4877'
c Var 'aux1181' order represents '1' with '4878'
-4877 4878 0
c Var 'aux1181' direct represents '1' with '4879'
4877 -4878 4879 0
-4879 4878 0
-4879 -4877 0
c Var 'aux1181' direct represents '2' with '-4878'
4877 4879 -4878 0
c Encoding variable: aux1182 with domain: int(0..2) (representing constraint ((x_00005_00008=7) + (x_00005_00002=7)))
c Both direct and order encoding.
c Var 'aux1182' order represents '0' with '4880'
c Var 'aux1182' direct represents '0' with '4880'
c Var 'aux1182' order represents '1' with '4881'
-4880 4881 0
c Var 'aux1182' direct represents '1' with '4882'
4880 -4881 4882 0
-4882 4881 0
-4882 -4880 0
c Var 'aux1182' direct represents '2' with '-4881'
4880 4882 -4881 0
c Encoding variable: aux1183 with domain: int(0..2) (representing constraint ((x_00005_00007=7) + (x_00005_00004=7)))
c Both direct and order encoding.
c Var 'aux1183' order represents '0' with '4883'
c Var 'aux1183' direct represents '0' with '4883'
c Var 'aux1183' order represents '1' with '4884'
-4883 4884 0
c Var 'aux1183' direct represents '1' with '4885'
4883 -4884 4885 0
-4885 4884 0
-4885 -4883 0
c Var 'aux1183' direct represents '2' with '-4884'
4883 4885 -4884 0
c Encoding variable: aux1184 with domain: int(0..2) (representing constraint ((x_00005_00006=7) + (x_00005_00005=7)))
c Both direct and order encoding.
c Var 'aux1184' order represents '0' with '4886'
c Var 'aux1184' direct represents '0' with '4886'
c Var 'aux1184' order represents '1' with '4887'
-4886 4887 0
c Var 'aux1184' direct represents '1' with '4888'
4886 -4887 4888 0
-4888 4887 0
-4888 -4886 0
c Var 'aux1184' direct represents '2' with '-4887'
4886 4888 -4887 0
c Encoding variable: aux1185 with domain: int(0..3) (representing constraint ((x_00005_00003=7) + aux1184))
c Both direct and order encoding.
c Var 'aux1185' order represents '0' with '4889'
c Var 'aux1185' direct represents '0' with '4889'
c Var 'aux1185' order represents '1' with '4890'
-4889 4890 0
c Var 'aux1185' direct represents '1' with '4891'
4889 -4890 4891 0
-4891 4890 0
-4891 -4889 0
c Var 'aux1185' order represents '2' with '4892'
-4890 4892 0
c Var 'aux1185' direct represents '2' with '4893'
4890 -4892 4893 0
-4893 4892 0
-4893 -4890 0
c Var 'aux1185' direct represents '3' with '-4892'
4889 4891 4893 -4892 0
c Encoding variable: aux1186 with domain: int(0..4) (representing constraint (aux1181 + aux1183))
c Both direct and order encoding.
c Var 'aux1186' order represents '0' with '4894'
c Var 'aux1186' direct represents '0' with '4894'
c Var 'aux1186' order represents '1' with '4895'
-4894 4895 0
c Var 'aux1186' direct represents '1' with '4896'
4894 -4895 4896 0
-4896 4895 0
-4896 -4894 0
c Var 'aux1186' order represents '2' with '4897'
-4895 4897 0
c Var 'aux1186' direct represents '2' with '4898'
4895 -4897 4898 0
-4898 4897 0
-4898 -4895 0
c Var 'aux1186' order represents '3' with '4899'
-4897 4899 0
c Var 'aux1186' direct represents '3' with '4900'
4897 -4899 4900 0
-4900 4899 0
-4900 -4897 0
c Var 'aux1186' direct represents '4' with '-4899'
4894 4896 4898 4900 -4899 0
c Encoding variable: aux1187 with domain: int(0..2) (representing constraint ((x_00005_00001=8) + (x_00005_00009=8)))
c Both direct and order encoding.
c Var 'aux1187' order represents '0' with '4901'
c Var 'aux1187' direct represents '0' with '4901'
c Var 'aux1187' order represents '1' with '4902'
-4901 4902 0
c Var 'aux1187' direct represents '1' with '4903'
4901 -4902 4903 0
-4903 4902 0
-4903 -4901 0
c Var 'aux1187' direct represents '2' with '-4902'
4901 4903 -4902 0
c Encoding variable: aux1188 with domain: int(0..2) (representing constraint ((x_00005_00008=8) + (x_00005_00002=8)))
c Both direct and order encoding.
c Var 'aux1188' order represents '0' with '4904'
c Var 'aux1188' direct represents '0' with '4904'
c Var 'aux1188' order represents '1' with '4905'
-4904 4905 0
c Var 'aux1188' direct represents '1' with '4906'
4904 -4905 4906 0
-4906 4905 0
-4906 -4904 0
c Var 'aux1188' direct represents '2' with '-4905'
4904 4906 -4905 0
c Encoding variable: aux1189 with domain: int(0..2) (representing constraint ((x_00005_00007=8) + (x_00005_00004=8)))
c Both direct and order encoding.
c Var 'aux1189' order represents '0' with '4907'
c Var 'aux1189' direct represents '0' with '4907'
c Var 'aux1189' order represents '1' with '4908'
-4907 4908 0
c Var 'aux1189' direct represents '1' with '4909'
4907 -4908 4909 0
-4909 4908 0
-4909 -4907 0
c Var 'aux1189' direct represents '2' with '-4908'
4907 4909 -4908 0
c Encoding variable: aux1190 with domain: int(0..2) (representing constraint ((x_00005_00006=8) + (x_00005_00005=8)))
c Both direct and order encoding.
c Var 'aux1190' order represents '0' with '4910'
c Var 'aux1190' direct represents '0' with '4910'
c Var 'aux1190' order represents '1' with '4911'
-4910 4911 0
c Var 'aux1190' direct represents '1' with '4912'
4910 -4911 4912 0
-4912 4911 0
-4912 -4910 0
c Var 'aux1190' direct represents '2' with '-4911'
4910 4912 -4911 0
c Encoding variable: aux1191 with domain: int(0..3) (representing constraint ((x_00005_00003=8) + aux1190))
c Both direct and order encoding.
c Var 'aux1191' order represents '0' with '4913'
c Var 'aux1191' direct represents '0' with '4913'
c Var 'aux1191' order represents '1' with '4914'
-4913 4914 0
c Var 'aux1191' direct represents '1' with '4915'
4913 -4914 4915 0
-4915 4914 0
-4915 -4913 0
c Var 'aux1191' order represents '2' with '4916'
-4914 4916 0
c Var 'aux1191' direct represents '2' with '4917'
4914 -4916 4917 0
-4917 4916 0
-4917 -4914 0
c Var 'aux1191' direct represents '3' with '-4916'
4913 4915 4917 -4916 0
c Encoding variable: aux1192 with domain: int(0..4) (representing constraint (aux1187 + aux1189))
c Both direct and order encoding.
c Var 'aux1192' order represents '0' with '4918'
c Var 'aux1192' direct represents '0' with '4918'
c Var 'aux1192' order represents '1' with '4919'
-4918 4919 0
c Var 'aux1192' direct represents '1' with '4920'
4918 -4919 4920 0
-4920 4919 0
-4920 -4918 0
c Var 'aux1192' order represents '2' with '4921'
-4919 4921 0
c Var 'aux1192' direct represents '2' with '4922'
4919 -4921 4922 0
-4922 4921 0
-4922 -4919 0
c Var 'aux1192' order represents '3' with '4923'
-4921 4923 0
c Var 'aux1192' direct represents '3' with '4924'
4921 -4923 4924 0
-4924 4923 0
-4924 -4921 0
c Var 'aux1192' direct represents '4' with '-4923'
4918 4920 4922 4924 -4923 0
c Encoding variable: aux1193 with domain: int(0..2) (representing constraint ((x_00005_00001=9) + (x_00005_00009=9)))
c Both direct and order encoding.
c Var 'aux1193' order represents '0' with '4925'
c Var 'aux1193' direct represents '0' with '4925'
c Var 'aux1193' order represents '1' with '4926'
-4925 4926 0
c Var 'aux1193' direct represents '1' with '4927'
4925 -4926 4927 0
-4927 4926 0
-4927 -4925 0
c Var 'aux1193' direct represents '2' with '-4926'
4925 4927 -4926 0
c Encoding variable: aux1194 with domain: int(0..2) (representing constraint ((x_00005_00008=9) + (x_00005_00002=9)))
c Both direct and order encoding.
c Var 'aux1194' order represents '0' with '4928'
c Var 'aux1194' direct represents '0' with '4928'
c Var 'aux1194' order represents '1' with '4929'
-4928 4929 0
c Var 'aux1194' direct represents '1' with '4930'
4928 -4929 4930 0
-4930 4929 0
-4930 -4928 0
c Var 'aux1194' direct represents '2' with '-4929'
4928 4930 -4929 0
c Encoding variable: aux1195 with domain: int(0..2) (representing constraint ((x_00005_00007=9) + (x_00005_00004=9)))
c Both direct and order encoding.
c Var 'aux1195' order represents '0' with '4931'
c Var 'aux1195' direct represents '0' with '4931'
c Var 'aux1195' order represents '1' with '4932'
-4931 4932 0
c Var 'aux1195' direct represents '1' with '4933'
4931 -4932 4933 0
-4933 4932 0
-4933 -4931 0
c Var 'aux1195' direct represents '2' with '-4932'
4931 4933 -4932 0
c Encoding variable: aux1196 with domain: int(0..2) (representing constraint ((x_00005_00006=9) + (x_00005_00005=9)))
c Both direct and order encoding.
c Var 'aux1196' order represents '0' with '4934'
c Var 'aux1196' direct represents '0' with '4934'
c Var 'aux1196' order represents '1' with '4935'
-4934 4935 0
c Var 'aux1196' direct represents '1' with '4936'
4934 -4935 4936 0
-4936 4935 0
-4936 -4934 0
c Var 'aux1196' direct represents '2' with '-4935'
4934 4936 -4935 0
c Encoding variable: aux1197 with domain: int(0..3) (representing constraint ((x_00005_00003=9) + aux1196))
c Both direct and order encoding.
c Var 'aux1197' order represents '0' with '4937'
c Var 'aux1197' direct represents '0' with '4937'
c Var 'aux1197' order represents '1' with '4938'
-4937 4938 0
c Var 'aux1197' direct represents '1' with '4939'
4937 -4938 4939 0
-4939 4938 0
-4939 -4937 0
c Var 'aux1197' order represents '2' with '4940'
-4938 4940 0
c Var 'aux1197' direct represents '2' with '4941'
4938 -4940 4941 0
-4941 4940 0
-4941 -4938 0
c Var 'aux1197' direct represents '3' with '-4940'
4937 4939 4941 -4940 0
c Encoding variable: aux1198 with domain: int(0..4) (representing constraint (aux1193 + aux1195))
c Both direct and order encoding.
c Var 'aux1198' order represents '0' with '4942'
c Var 'aux1198' direct represents '0' with '4942'
c Var 'aux1198' order represents '1' with '4943'
-4942 4943 0
c Var 'aux1198' direct represents '1' with '4944'
4942 -4943 4944 0
-4944 4943 0
-4944 -4942 0
c Var 'aux1198' order represents '2' with '4945'
-4943 4945 0
c Var 'aux1198' direct represents '2' with '4946'
4943 -4945 4946 0
-4946 4945 0
-4946 -4943 0
c Var 'aux1198' order represents '3' with '4947'
-4945 4947 0
c Var 'aux1198' direct represents '3' with '4948'
4945 -4947 4948 0
-4948 4947 0
-4948 -4945 0
c Var 'aux1198' direct represents '4' with '-4947'
4942 4944 4946 4948 -4947 0
c Encoding variable: aux1199 with domain: int(0..2) (representing constraint ((x_00006_00001=1) + (x_00006_00009=1)))
c Both direct and order encoding.
c Var 'aux1199' order represents '0' with '4949'
c Var 'aux1199' direct represents '0' with '4949'
c Var 'aux1199' order represents '1' with '4950'
-4949 4950 0
c Var 'aux1199' direct represents '1' with '4951'
4949 -4950 4951 0
-4951 4950 0
-4951 -4949 0
c Var 'aux1199' direct represents '2' with '-4950'
4949 4951 -4950 0
c Encoding variable: aux1200 with domain: int(0..2) (representing constraint ((x_00006_00008=1) + (x_00006_00002=1)))
c Both direct and order encoding.
c Var 'aux1200' order represents '0' with '4952'
c Var 'aux1200' direct represents '0' with '4952'
c Var 'aux1200' order represents '1' with '4953'
-4952 4953 0
c Var 'aux1200' direct represents '1' with '4954'
4952 -4953 4954 0
-4954 4953 0
-4954 -4952 0
c Var 'aux1200' direct represents '2' with '-4953'
4952 4954 -4953 0
c Encoding variable: aux1201 with domain: int(0..2) (representing constraint ((x_00006_00007=1) + (x_00006_00004=1)))
c Both direct and order encoding.
c Var 'aux1201' order represents '0' with '4955'
c Var 'aux1201' direct represents '0' with '4955'
c Var 'aux1201' order represents '1' with '4956'
-4955 4956 0
c Var 'aux1201' direct represents '1' with '4957'
4955 -4956 4957 0
-4957 4956 0
-4957 -4955 0
c Var 'aux1201' direct represents '2' with '-4956'
4955 4957 -4956 0
c Encoding variable: aux1202 with domain: int(0..2) (representing constraint ((x_00006_00006=1) + (x_00006_00005=1)))
c Both direct and order encoding.
c Var 'aux1202' order represents '0' with '4958'
c Var 'aux1202' direct represents '0' with '4958'
c Var 'aux1202' order represents '1' with '4959'
-4958 4959 0
c Var 'aux1202' direct represents '1' with '4960'
4958 -4959 4960 0
-4960 4959 0
-4960 -4958 0
c Var 'aux1202' direct represents '2' with '-4959'
4958 4960 -4959 0
c Encoding variable: aux1203 with domain: int(0..3) (representing constraint ((x_00006_00003=1) + aux1202))
c Both direct and order encoding.
c Var 'aux1203' order represents '0' with '4961'
c Var 'aux1203' direct represents '0' with '4961'
c Var 'aux1203' order represents '1' with '4962'
-4961 4962 0
c Var 'aux1203' direct represents '1' with '4963'
4961 -4962 4963 0
-4963 4962 0
-4963 -4961 0
c Var 'aux1203' order represents '2' with '4964'
-4962 4964 0
c Var 'aux1203' direct represents '2' with '4965'
4962 -4964 4965 0
-4965 4964 0
-4965 -4962 0
c Var 'aux1203' direct represents '3' with '-4964'
4961 4963 4965 -4964 0
c Encoding variable: aux1204 with domain: int(0..4) (representing constraint (aux1199 + aux1201))
c Both direct and order encoding.
c Var 'aux1204' order represents '0' with '4966'
c Var 'aux1204' direct represents '0' with '4966'
c Var 'aux1204' order represents '1' with '4967'
-4966 4967 0
c Var 'aux1204' direct represents '1' with '4968'
4966 -4967 4968 0
-4968 4967 0
-4968 -4966 0
c Var 'aux1204' order represents '2' with '4969'
-4967 4969 0
c Var 'aux1204' direct represents '2' with '4970'
4967 -4969 4970 0
-4970 4969 0
-4970 -4967 0
c Var 'aux1204' order represents '3' with '4971'
-4969 4971 0
c Var 'aux1204' direct represents '3' with '4972'
4969 -4971 4972 0
-4972 4971 0
-4972 -4969 0
c Var 'aux1204' direct represents '4' with '-4971'
4966 4968 4970 4972 -4971 0
c Encoding variable: aux1205 with domain: int(0..2) (representing constraint ((x_00006_00001=2) + (x_00006_00009=2)))
c Both direct and order encoding.
c Var 'aux1205' order represents '0' with '4973'
c Var 'aux1205' direct represents '0' with '4973'
c Var 'aux1205' order represents '1' with '4974'
-4973 4974 0
c Var 'aux1205' direct represents '1' with '4975'
4973 -4974 4975 0
-4975 4974 0
-4975 -4973 0
c Var 'aux1205' direct represents '2' with '-4974'
4973 4975 -4974 0
c Encoding variable: aux1206 with domain: int(0..2) (representing constraint ((x_00006_00008=2) + (x_00006_00002=2)))
c Both direct and order encoding.
c Var 'aux1206' order represents '0' with '4976'
c Var 'aux1206' direct represents '0' with '4976'
c Var 'aux1206' order represents '1' with '4977'
-4976 4977 0
c Var 'aux1206' direct represents '1' with '4978'
4976 -4977 4978 0
-4978 4977 0
-4978 -4976 0
c Var 'aux1206' direct represents '2' with '-4977'
4976 4978 -4977 0
c Encoding variable: aux1207 with domain: int(0..2) (representing constraint ((x_00006_00007=2) + (x_00006_00004=2)))
c Both direct and order encoding.
c Var 'aux1207' order represents '0' with '4979'
c Var 'aux1207' direct represents '0' with '4979'
c Var 'aux1207' order represents '1' with '4980'
-4979 4980 0
c Var 'aux1207' direct represents '1' with '4981'
4979 -4980 4981 0
-4981 4980 0
-4981 -4979 0
c Var 'aux1207' direct represents '2' with '-4980'
4979 4981 -4980 0
c Encoding variable: aux1208 with domain: int(0..2) (representing constraint ((x_00006_00006=2) + (x_00006_00005=2)))
c Both direct and order encoding.
c Var 'aux1208' order represents '0' with '4982'
c Var 'aux1208' direct represents '0' with '4982'
c Var 'aux1208' order represents '1' with '4983'
-4982 4983 0
c Var 'aux1208' direct represents '1' with '4984'
4982 -4983 4984 0
-4984 4983 0
-4984 -4982 0
c Var 'aux1208' direct represents '2' with '-4983'
4982 4984 -4983 0
c Encoding variable: aux1209 with domain: int(0..3) (representing constraint ((x_00006_00003=2) + aux1208))
c Both direct and order encoding.
c Var 'aux1209' order represents '0' with '4985'
c Var 'aux1209' direct represents '0' with '4985'
c Var 'aux1209' order represents '1' with '4986'
-4985 4986 0
c Var 'aux1209' direct represents '1' with '4987'
4985 -4986 4987 0
-4987 4986 0
-4987 -4985 0
c Var 'aux1209' order represents '2' with '4988'
-4986 4988 0
c Var 'aux1209' direct represents '2' with '4989'
4986 -4988 4989 0
-4989 4988 0
-4989 -4986 0
c Var 'aux1209' direct represents '3' with '-4988'
4985 4987 4989 -4988 0
c Encoding variable: aux1210 with domain: int(0..4) (representing constraint (aux1205 + aux1207))
c Both direct and order encoding.
c Var 'aux1210' order represents '0' with '4990'
c Var 'aux1210' direct represents '0' with '4990'
c Var 'aux1210' order represents '1' with '4991'
-4990 4991 0
c Var 'aux1210' direct represents '1' with '4992'
4990 -4991 4992 0
-4992 4991 0
-4992 -4990 0
c Var 'aux1210' order represents '2' with '4993'
-4991 4993 0
c Var 'aux1210' direct represents '2' with '4994'
4991 -4993 4994 0
-4994 4993 0
-4994 -4991 0
c Var 'aux1210' order represents '3' with '4995'
-4993 4995 0
c Var 'aux1210' direct represents '3' with '4996'
4993 -4995 4996 0
-4996 4995 0
-4996 -4993 0
c Var 'aux1210' direct represents '4' with '-4995'
4990 4992 4994 4996 -4995 0
c Encoding variable: aux1211 with domain: int(0..2) (representing constraint ((x_00006_00001=3) + (x_00006_00009=3)))
c Both direct and order encoding.
c Var 'aux1211' order represents '0' with '4997'
c Var 'aux1211' direct represents '0' with '4997'
c Var 'aux1211' order represents '1' with '4998'
-4997 4998 0
c Var 'aux1211' direct represents '1' with '4999'
4997 -4998 4999 0
-4999 4998 0
-4999 -4997 0
c Var 'aux1211' direct represents '2' with '-4998'
4997 4999 -4998 0
c Encoding variable: aux1212 with domain: int(0..2) (representing constraint ((x_00006_00008=3) + (x_00006_00002=3)))
c Both direct and order encoding.
c Var 'aux1212' order represents '0' with '5000'
c Var 'aux1212' direct represents '0' with '5000'
c Var 'aux1212' order represents '1' with '5001'
-5000 5001 0
c Var 'aux1212' direct represents '1' with '5002'
5000 -5001 5002 0
-5002 5001 0
-5002 -5000 0
c Var 'aux1212' direct represents '2' with '-5001'
5000 5002 -5001 0
c Encoding variable: aux1213 with domain: int(0..2) (representing constraint ((x_00006_00007=3) + (x_00006_00004=3)))
c Both direct and order encoding.
c Var 'aux1213' order represents '0' with '5003'
c Var 'aux1213' direct represents '0' with '5003'
c Var 'aux1213' order represents '1' with '5004'
-5003 5004 0
c Var 'aux1213' direct represents '1' with '5005'
5003 -5004 5005 0
-5005 5004 0
-5005 -5003 0
c Var 'aux1213' direct represents '2' with '-5004'
5003 5005 -5004 0
c Encoding variable: aux1214 with domain: int(0..2) (representing constraint ((x_00006_00006=3) + (x_00006_00005=3)))
c Both direct and order encoding.
c Var 'aux1214' order represents '0' with '5006'
c Var 'aux1214' direct represents '0' with '5006'
c Var 'aux1214' order represents '1' with '5007'
-5006 5007 0
c Var 'aux1214' direct represents '1' with '5008'
5006 -5007 5008 0
-5008 5007 0
-5008 -5006 0
c Var 'aux1214' direct represents '2' with '-5007'
5006 5008 -5007 0
c Encoding variable: aux1215 with domain: int(0..3) (representing constraint ((x_00006_00003=3) + aux1214))
c Both direct and order encoding.
c Var 'aux1215' order represents '0' with '5009'
c Var 'aux1215' direct represents '0' with '5009'
c Var 'aux1215' order represents '1' with '5010'
-5009 5010 0
c Var 'aux1215' direct represents '1' with '5011'
5009 -5010 5011 0
-5011 5010 0
-5011 -5009 0
c Var 'aux1215' order represents '2' with '5012'
-5010 5012 0
c Var 'aux1215' direct represents '2' with '5013'
5010 -5012 5013 0
-5013 5012 0
-5013 -5010 0
c Var 'aux1215' direct represents '3' with '-5012'
5009 5011 5013 -5012 0
c Encoding variable: aux1216 with domain: int(0..4) (representing constraint (aux1211 + aux1213))
c Both direct and order encoding.
c Var 'aux1216' order represents '0' with '5014'
c Var 'aux1216' direct represents '0' with '5014'
c Var 'aux1216' order represents '1' with '5015'
-5014 5015 0
c Var 'aux1216' direct represents '1' with '5016'
5014 -5015 5016 0
-5016 5015 0
-5016 -5014 0
c Var 'aux1216' order represents '2' with '5017'
-5015 5017 0
c Var 'aux1216' direct represents '2' with '5018'
5015 -5017 5018 0
-5018 5017 0
-5018 -5015 0
c Var 'aux1216' order represents '3' with '5019'
-5017 5019 0
c Var 'aux1216' direct represents '3' with '5020'
5017 -5019 5020 0
-5020 5019 0
-5020 -5017 0
c Var 'aux1216' direct represents '4' with '-5019'
5014 5016 5018 5020 -5019 0
c Encoding variable: aux1217 with domain: int(0..2) (representing constraint ((x_00006_00001=4) + (x_00006_00009=4)))
c Both direct and order encoding.
c Var 'aux1217' order represents '0' with '5021'
c Var 'aux1217' direct represents '0' with '5021'
c Var 'aux1217' order represents '1' with '5022'
-5021 5022 0
c Var 'aux1217' direct represents '1' with '5023'
5021 -5022 5023 0
-5023 5022 0
-5023 -5021 0
c Var 'aux1217' direct represents '2' with '-5022'
5021 5023 -5022 0
c Encoding variable: aux1218 with domain: int(0..2) (representing constraint ((x_00006_00008=4) + (x_00006_00002=4)))
c Both direct and order encoding.
c Var 'aux1218' order represents '0' with '5024'
c Var 'aux1218' direct represents '0' with '5024'
c Var 'aux1218' order represents '1' with '5025'
-5024 5025 0
c Var 'aux1218' direct represents '1' with '5026'
5024 -5025 5026 0
-5026 5025 0
-5026 -5024 0
c Var 'aux1218' direct represents '2' with '-5025'
5024 5026 -5025 0
c Encoding variable: aux1219 with domain: int(0..2) (representing constraint ((x_00006_00007=4) + (x_00006_00004=4)))
c Both direct and order encoding.
c Var 'aux1219' order represents '0' with '5027'
c Var 'aux1219' direct represents '0' with '5027'
c Var 'aux1219' order represents '1' with '5028'
-5027 5028 0
c Var 'aux1219' direct represents '1' with '5029'
5027 -5028 5029 0
-5029 5028 0
-5029 -5027 0
c Var 'aux1219' direct represents '2' with '-5028'
5027 5029 -5028 0
c Encoding variable: aux1220 with domain: int(0..2) (representing constraint ((x_00006_00006=4) + (x_00006_00005=4)))
c Both direct and order encoding.
c Var 'aux1220' order represents '0' with '5030'
c Var 'aux1220' direct represents '0' with '5030'
c Var 'aux1220' order represents '1' with '5031'
-5030 5031 0
c Var 'aux1220' direct represents '1' with '5032'
5030 -5031 5032 0
-5032 5031 0
-5032 -5030 0
c Var 'aux1220' direct represents '2' with '-5031'
5030 5032 -5031 0
c Encoding variable: aux1221 with domain: int(0..3) (representing constraint ((x_00006_00003=4) + aux1220))
c Both direct and order encoding.
c Var 'aux1221' order represents '0' with '5033'
c Var 'aux1221' direct represents '0' with '5033'
c Var 'aux1221' order represents '1' with '5034'
-5033 5034 0
c Var 'aux1221' direct represents '1' with '5035'
5033 -5034 5035 0
-5035 5034 0
-5035 -5033 0
c Var 'aux1221' order represents '2' with '5036'
-5034 5036 0
c Var 'aux1221' direct represents '2' with '5037'
5034 -5036 5037 0
-5037 5036 0
-5037 -5034 0
c Var 'aux1221' direct represents '3' with '-5036'
5033 5035 5037 -5036 0
c Encoding variable: aux1222 with domain: int(0..4) (representing constraint (aux1217 + aux1219))
c Both direct and order encoding.
c Var 'aux1222' order represents '0' with '5038'
c Var 'aux1222' direct represents '0' with '5038'
c Var 'aux1222' order represents '1' with '5039'
-5038 5039 0
c Var 'aux1222' direct represents '1' with '5040'
5038 -5039 5040 0
-5040 5039 0
-5040 -5038 0
c Var 'aux1222' order represents '2' with '5041'
-5039 5041 0
c Var 'aux1222' direct represents '2' with '5042'
5039 -5041 5042 0
-5042 5041 0
-5042 -5039 0
c Var 'aux1222' order represents '3' with '5043'
-5041 5043 0
c Var 'aux1222' direct represents '3' with '5044'
5041 -5043 5044 0
-5044 5043 0
-5044 -5041 0
c Var 'aux1222' direct represents '4' with '-5043'
5038 5040 5042 5044 -5043 0
c Encoding variable: aux1223 with domain: int(0..2) (representing constraint ((x_00006_00001=5) + (x_00006_00009=5)))
c Both direct and order encoding.
c Var 'aux1223' order represents '0' with '5045'
c Var 'aux1223' direct represents '0' with '5045'
c Var 'aux1223' order represents '1' with '5046'
-5045 5046 0
c Var 'aux1223' direct represents '1' with '5047'
5045 -5046 5047 0
-5047 5046 0
-5047 -5045 0
c Var 'aux1223' direct represents '2' with '-5046'
5045 5047 -5046 0
c Encoding variable: aux1224 with domain: int(0..2) (representing constraint ((x_00006_00008=5) + (x_00006_00002=5)))
c Both direct and order encoding.
c Var 'aux1224' order represents '0' with '5048'
c Var 'aux1224' direct represents '0' with '5048'
c Var 'aux1224' order represents '1' with '5049'
-5048 5049 0
c Var 'aux1224' direct represents '1' with '5050'
5048 -5049 5050 0
-5050 5049 0
-5050 -5048 0
c Var 'aux1224' direct represents '2' with '-5049'
5048 5050 -5049 0
c Encoding variable: aux1225 with domain: int(0..2) (representing constraint ((x_00006_00007=5) + (x_00006_00004=5)))
c Both direct and order encoding.
c Var 'aux1225' order represents '0' with '5051'
c Var 'aux1225' direct represents '0' with '5051'
c Var 'aux1225' order represents '1' with '5052'
-5051 5052 0
c Var 'aux1225' direct represents '1' with '5053'
5051 -5052 5053 0
-5053 5052 0
-5053 -5051 0
c Var 'aux1225' direct represents '2' with '-5052'
5051 5053 -5052 0
c Encoding variable: aux1226 with domain: int(0..2) (representing constraint ((x_00006_00006=5) + (x_00006_00005=5)))
c Both direct and order encoding.
c Var 'aux1226' order represents '0' with '5054'
c Var 'aux1226' direct represents '0' with '5054'
c Var 'aux1226' order represents '1' with '5055'
-5054 5055 0
c Var 'aux1226' direct represents '1' with '5056'
5054 -5055 5056 0
-5056 5055 0
-5056 -5054 0
c Var 'aux1226' direct represents '2' with '-5055'
5054 5056 -5055 0
c Encoding variable: aux1227 with domain: int(0..3) (representing constraint ((x_00006_00003=5) + aux1226))
c Both direct and order encoding.
c Var 'aux1227' order represents '0' with '5057'
c Var 'aux1227' direct represents '0' with '5057'
c Var 'aux1227' order represents '1' with '5058'
-5057 5058 0
c Var 'aux1227' direct represents '1' with '5059'
5057 -5058 5059 0
-5059 5058 0
-5059 -5057 0
c Var 'aux1227' order represents '2' with '5060'
-5058 5060 0
c Var 'aux1227' direct represents '2' with '5061'
5058 -5060 5061 0
-5061 5060 0
-5061 -5058 0
c Var 'aux1227' direct represents '3' with '-5060'
5057 5059 5061 -5060 0
c Encoding variable: aux1228 with domain: int(0..4) (representing constraint (aux1223 + aux1225))
c Both direct and order encoding.
c Var 'aux1228' order represents '0' with '5062'
c Var 'aux1228' direct represents '0' with '5062'
c Var 'aux1228' order represents '1' with '5063'
-5062 5063 0
c Var 'aux1228' direct represents '1' with '5064'
5062 -5063 5064 0
-5064 5063 0
-5064 -5062 0
c Var 'aux1228' order represents '2' with '5065'
-5063 5065 0
c Var 'aux1228' direct represents '2' with '5066'
5063 -5065 5066 0
-5066 5065 0
-5066 -5063 0
c Var 'aux1228' order represents '3' with '5067'
-5065 5067 0
c Var 'aux1228' direct represents '3' with '5068'
5065 -5067 5068 0
-5068 5067 0
-5068 -5065 0
c Var 'aux1228' direct represents '4' with '-5067'
5062 5064 5066 5068 -5067 0
c Encoding variable: aux1229 with domain: int(0..2) (representing constraint ((x_00006_00001=6) + (x_00006_00009=6)))
c Both direct and order encoding.
c Var 'aux1229' order represents '0' with '5069'
c Var 'aux1229' direct represents '0' with '5069'
c Var 'aux1229' order represents '1' with '5070'
-5069 5070 0
c Var 'aux1229' direct represents '1' with '5071'
5069 -5070 5071 0
-5071 5070 0
-5071 -5069 0
c Var 'aux1229' direct represents '2' with '-5070'
5069 5071 -5070 0
c Encoding variable: aux1230 with domain: int(0..2) (representing constraint ((x_00006_00008=6) + (x_00006_00002=6)))
c Both direct and order encoding.
c Var 'aux1230' order represents '0' with '5072'
c Var 'aux1230' direct represents '0' with '5072'
c Var 'aux1230' order represents '1' with '5073'
-5072 5073 0
c Var 'aux1230' direct represents '1' with '5074'
5072 -5073 5074 0
-5074 5073 0
-5074 -5072 0
c Var 'aux1230' direct represents '2' with '-5073'
5072 5074 -5073 0
c Encoding variable: aux1231 with domain: int(0..2) (representing constraint ((x_00006_00007=6) + (x_00006_00004=6)))
c Both direct and order encoding.
c Var 'aux1231' order represents '0' with '5075'
c Var 'aux1231' direct represents '0' with '5075'
c Var 'aux1231' order represents '1' with '5076'
-5075 5076 0
c Var 'aux1231' direct represents '1' with '5077'
5075 -5076 5077 0
-5077 5076 0
-5077 -5075 0
c Var 'aux1231' direct represents '2' with '-5076'
5075 5077 -5076 0
c Encoding variable: aux1232 with domain: int(0..2) (representing constraint ((x_00006_00006=6) + (x_00006_00005=6)))
c Both direct and order encoding.
c Var 'aux1232' order represents '0' with '5078'
c Var 'aux1232' direct represents '0' with '5078'
c Var 'aux1232' order represents '1' with '5079'
-5078 5079 0
c Var 'aux1232' direct represents '1' with '5080'
5078 -5079 5080 0
-5080 5079 0
-5080 -5078 0
c Var 'aux1232' direct represents '2' with '-5079'
5078 5080 -5079 0
c Encoding variable: aux1233 with domain: int(0..3) (representing constraint ((x_00006_00003=6) + aux1232))
c Both direct and order encoding.
c Var 'aux1233' order represents '0' with '5081'
c Var 'aux1233' direct represents '0' with '5081'
c Var 'aux1233' order represents '1' with '5082'
-5081 5082 0
c Var 'aux1233' direct represents '1' with '5083'
5081 -5082 5083 0
-5083 5082 0
-5083 -5081 0
c Var 'aux1233' order represents '2' with '5084'
-5082 5084 0
c Var 'aux1233' direct represents '2' with '5085'
5082 -5084 5085 0
-5085 5084 0
-5085 -5082 0
c Var 'aux1233' direct represents '3' with '-5084'
5081 5083 5085 -5084 0
c Encoding variable: aux1234 with domain: int(0..4) (representing constraint (aux1229 + aux1231))
c Both direct and order encoding.
c Var 'aux1234' order represents '0' with '5086'
c Var 'aux1234' direct represents '0' with '5086'
c Var 'aux1234' order represents '1' with '5087'
-5086 5087 0
c Var 'aux1234' direct represents '1' with '5088'
5086 -5087 5088 0
-5088 5087 0
-5088 -5086 0
c Var 'aux1234' order represents '2' with '5089'
-5087 5089 0
c Var 'aux1234' direct represents '2' with '5090'
5087 -5089 5090 0
-5090 5089 0
-5090 -5087 0
c Var 'aux1234' order represents '3' with '5091'
-5089 5091 0
c Var 'aux1234' direct represents '3' with '5092'
5089 -5091 5092 0
-5092 5091 0
-5092 -5089 0
c Var 'aux1234' direct represents '4' with '-5091'
5086 5088 5090 5092 -5091 0
c Encoding variable: aux1235 with domain: int(0..2) (representing constraint ((x_00006_00001=7) + (x_00006_00009=7)))
c Both direct and order encoding.
c Var 'aux1235' order represents '0' with '5093'
c Var 'aux1235' direct represents '0' with '5093'
c Var 'aux1235' order represents '1' with '5094'
-5093 5094 0
c Var 'aux1235' direct represents '1' with '5095'
5093 -5094 5095 0
-5095 5094 0
-5095 -5093 0
c Var 'aux1235' direct represents '2' with '-5094'
5093 5095 -5094 0
c Encoding variable: aux1236 with domain: int(0..2) (representing constraint ((x_00006_00008=7) + (x_00006_00002=7)))
c Both direct and order encoding.
c Var 'aux1236' order represents '0' with '5096'
c Var 'aux1236' direct represents '0' with '5096'
c Var 'aux1236' order represents '1' with '5097'
-5096 5097 0
c Var 'aux1236' direct represents '1' with '5098'
5096 -5097 5098 0
-5098 5097 0
-5098 -5096 0
c Var 'aux1236' direct represents '2' with '-5097'
5096 5098 -5097 0
c Encoding variable: aux1237 with domain: int(0..2) (representing constraint ((x_00006_00007=7) + (x_00006_00004=7)))
c Both direct and order encoding.
c Var 'aux1237' order represents '0' with '5099'
c Var 'aux1237' direct represents '0' with '5099'
c Var 'aux1237' order represents '1' with '5100'
-5099 5100 0
c Var 'aux1237' direct represents '1' with '5101'
5099 -5100 5101 0
-5101 5100 0
-5101 -5099 0
c Var 'aux1237' direct represents '2' with '-5100'
5099 5101 -5100 0
c Encoding variable: aux1238 with domain: int(0..2) (representing constraint ((x_00006_00006=7) + (x_00006_00005=7)))
c Both direct and order encoding.
c Var 'aux1238' order represents '0' with '5102'
c Var 'aux1238' direct represents '0' with '5102'
c Var 'aux1238' order represents '1' with '5103'
-5102 5103 0
c Var 'aux1238' direct represents '1' with '5104'
5102 -5103 5104 0
-5104 5103 0
-5104 -5102 0
c Var 'aux1238' direct represents '2' with '-5103'
5102 5104 -5103 0
c Encoding variable: aux1239 with domain: int(0..3) (representing constraint ((x_00006_00003=7) + aux1238))
c Both direct and order encoding.
c Var 'aux1239' order represents '0' with '5105'
c Var 'aux1239' direct represents '0' with '5105'
c Var 'aux1239' order represents '1' with '5106'
-5105 5106 0
c Var 'aux1239' direct represents '1' with '5107'
5105 -5106 5107 0
-5107 5106 0
-5107 -5105 0
c Var 'aux1239' order represents '2' with '5108'
-5106 5108 0
c Var 'aux1239' direct represents '2' with '5109'
5106 -5108 5109 0
-5109 5108 0
-5109 -5106 0
c Var 'aux1239' direct represents '3' with '-5108'
5105 5107 5109 -5108 0
c Encoding variable: aux1240 with domain: int(0..4) (representing constraint (aux1235 + aux1237))
c Both direct and order encoding.
c Var 'aux1240' order represents '0' with '5110'
c Var 'aux1240' direct represents '0' with '5110'
c Var 'aux1240' order represents '1' with '5111'
-5110 5111 0
c Var 'aux1240' direct represents '1' with '5112'
5110 -5111 5112 0
-5112 5111 0
-5112 -5110 0
c Var 'aux1240' order represents '2' with '5113'
-5111 5113 0
c Var 'aux1240' direct represents '2' with '5114'
5111 -5113 5114 0
-5114 5113 0
-5114 -5111 0
c Var 'aux1240' order represents '3' with '5115'
-5113 5115 0
c Var 'aux1240' direct represents '3' with '5116'
5113 -5115 5116 0
-5116 5115 0
-5116 -5113 0
c Var 'aux1240' direct represents '4' with '-5115'
5110 5112 5114 5116 -5115 0
c Encoding variable: aux1241 with domain: int(0..2) (representing constraint ((x_00006_00001=8) + (x_00006_00009=8)))
c Both direct and order encoding.
c Var 'aux1241' order represents '0' with '5117'
c Var 'aux1241' direct represents '0' with '5117'
c Var 'aux1241' order represents '1' with '5118'
-5117 5118 0
c Var 'aux1241' direct represents '1' with '5119'
5117 -5118 5119 0
-5119 5118 0
-5119 -5117 0
c Var 'aux1241' direct represents '2' with '-5118'
5117 5119 -5118 0
c Encoding variable: aux1242 with domain: int(0..2) (representing constraint ((x_00006_00008=8) + (x_00006_00002=8)))
c Both direct and order encoding.
c Var 'aux1242' order represents '0' with '5120'
c Var 'aux1242' direct represents '0' with '5120'
c Var 'aux1242' order represents '1' with '5121'
-5120 5121 0
c Var 'aux1242' direct represents '1' with '5122'
5120 -5121 5122 0
-5122 5121 0
-5122 -5120 0
c Var 'aux1242' direct represents '2' with '-5121'
5120 5122 -5121 0
c Encoding variable: aux1243 with domain: int(0..2) (representing constraint ((x_00006_00007=8) + (x_00006_00004=8)))
c Both direct and order encoding.
c Var 'aux1243' order represents '0' with '5123'
c Var 'aux1243' direct represents '0' with '5123'
c Var 'aux1243' order represents '1' with '5124'
-5123 5124 0
c Var 'aux1243' direct represents '1' with '5125'
5123 -5124 5125 0
-5125 5124 0
-5125 -5123 0
c Var 'aux1243' direct represents '2' with '-5124'
5123 5125 -5124 0
c Encoding variable: aux1244 with domain: int(0..2) (representing constraint ((x_00006_00006=8) + (x_00006_00005=8)))
c Both direct and order encoding.
c Var 'aux1244' order represents '0' with '5126'
c Var 'aux1244' direct represents '0' with '5126'
c Var 'aux1244' order represents '1' with '5127'
-5126 5127 0
c Var 'aux1244' direct represents '1' with '5128'
5126 -5127 5128 0
-5128 5127 0
-5128 -5126 0
c Var 'aux1244' direct represents '2' with '-5127'
5126 5128 -5127 0
c Encoding variable: aux1245 with domain: int(0..3) (representing constraint ((x_00006_00003=8) + aux1244))
c Both direct and order encoding.
c Var 'aux1245' order represents '0' with '5129'
c Var 'aux1245' direct represents '0' with '5129'
c Var 'aux1245' order represents '1' with '5130'
-5129 5130 0
c Var 'aux1245' direct represents '1' with '5131'
5129 -5130 5131 0
-5131 5130 0
-5131 -5129 0
c Var 'aux1245' order represents '2' with '5132'
-5130 5132 0
c Var 'aux1245' direct represents '2' with '5133'
5130 -5132 5133 0
-5133 5132 0
-5133 -5130 0
c Var 'aux1245' direct represents '3' with '-5132'
5129 5131 5133 -5132 0
c Encoding variable: aux1246 with domain: int(0..4) (representing constraint (aux1241 + aux1243))
c Both direct and order encoding.
c Var 'aux1246' order represents '0' with '5134'
c Var 'aux1246' direct represents '0' with '5134'
c Var 'aux1246' order represents '1' with '5135'
-5134 5135 0
c Var 'aux1246' direct represents '1' with '5136'
5134 -5135 5136 0
-5136 5135 0
-5136 -5134 0
c Var 'aux1246' order represents '2' with '5137'
-5135 5137 0
c Var 'aux1246' direct represents '2' with '5138'
5135 -5137 5138 0
-5138 5137 0
-5138 -5135 0
c Var 'aux1246' order represents '3' with '5139'
-5137 5139 0
c Var 'aux1246' direct represents '3' with '5140'
5137 -5139 5140 0
-5140 5139 0
-5140 -5137 0
c Var 'aux1246' direct represents '4' with '-5139'
5134 5136 5138 5140 -5139 0
c Encoding variable: aux1247 with domain: int(0..2) (representing constraint ((x_00006_00001=9) + (x_00006_00009=9)))
c Both direct and order encoding.
c Var 'aux1247' order represents '0' with '5141'
c Var 'aux1247' direct represents '0' with '5141'
c Var 'aux1247' order represents '1' with '5142'
-5141 5142 0
c Var 'aux1247' direct represents '1' with '5143'
5141 -5142 5143 0
-5143 5142 0
-5143 -5141 0
c Var 'aux1247' direct represents '2' with '-5142'
5141 5143 -5142 0
c Encoding variable: aux1248 with domain: int(0..2) (representing constraint ((x_00006_00008=9) + (x_00006_00002=9)))
c Both direct and order encoding.
c Var 'aux1248' order represents '0' with '5144'
c Var 'aux1248' direct represents '0' with '5144'
c Var 'aux1248' order represents '1' with '5145'
-5144 5145 0
c Var 'aux1248' direct represents '1' with '5146'
5144 -5145 5146 0
-5146 5145 0
-5146 -5144 0
c Var 'aux1248' direct represents '2' with '-5145'
5144 5146 -5145 0
c Encoding variable: aux1249 with domain: int(0..2) (representing constraint ((x_00006_00007=9) + (x_00006_00004=9)))
c Both direct and order encoding.
c Var 'aux1249' order represents '0' with '5147'
c Var 'aux1249' direct represents '0' with '5147'
c Var 'aux1249' order represents '1' with '5148'
-5147 5148 0
c Var 'aux1249' direct represents '1' with '5149'
5147 -5148 5149 0
-5149 5148 0
-5149 -5147 0
c Var 'aux1249' direct represents '2' with '-5148'
5147 5149 -5148 0
c Encoding variable: aux1250 with domain: int(0..2) (representing constraint ((x_00006_00006=9) + (x_00006_00005=9)))
c Both direct and order encoding.
c Var 'aux1250' order represents '0' with '5150'
c Var 'aux1250' direct represents '0' with '5150'
c Var 'aux1250' order represents '1' with '5151'
-5150 5151 0
c Var 'aux1250' direct represents '1' with '5152'
5150 -5151 5152 0
-5152 5151 0
-5152 -5150 0
c Var 'aux1250' direct represents '2' with '-5151'
5150 5152 -5151 0
c Encoding variable: aux1251 with domain: int(0..3) (representing constraint ((x_00006_00003=9) + aux1250))
c Both direct and order encoding.
c Var 'aux1251' order represents '0' with '5153'
c Var 'aux1251' direct represents '0' with '5153'
c Var 'aux1251' order represents '1' with '5154'
-5153 5154 0
c Var 'aux1251' direct represents '1' with '5155'
5153 -5154 5155 0
-5155 5154 0
-5155 -5153 0
c Var 'aux1251' order represents '2' with '5156'
-5154 5156 0
c Var 'aux1251' direct represents '2' with '5157'
5154 -5156 5157 0
-5157 5156 0
-5157 -5154 0
c Var 'aux1251' direct represents '3' with '-5156'
5153 5155 5157 -5156 0
c Encoding variable: aux1252 with domain: int(0..4) (representing constraint (aux1247 + aux1249))
c Both direct and order encoding.
c Var 'aux1252' order represents '0' with '5158'
c Var 'aux1252' direct represents '0' with '5158'
c Var 'aux1252' order represents '1' with '5159'
-5158 5159 0
c Var 'aux1252' direct represents '1' with '5160'
5158 -5159 5160 0
-5160 5159 0
-5160 -5158 0
c Var 'aux1252' order represents '2' with '5161'
-5159 5161 0
c Var 'aux1252' direct represents '2' with '5162'
5159 -5161 5162 0
-5162 5161 0
-5162 -5159 0
c Var 'aux1252' order represents '3' with '5163'
-5161 5163 0
c Var 'aux1252' direct represents '3' with '5164'
5161 -5163 5164 0
-5164 5163 0
-5164 -5161 0
c Var 'aux1252' direct represents '4' with '-5163'
5158 5160 5162 5164 -5163 0
c Encoding variable: aux1253 with domain: int(0..2) (representing constraint ((x_00007_00001=1) + (x_00007_00009=1)))
c Both direct and order encoding.
c Var 'aux1253' order represents '0' with '5165'
c Var 'aux1253' direct represents '0' with '5165'
c Var 'aux1253' order represents '1' with '5166'
-5165 5166 0
c Var 'aux1253' direct represents '1' with '5167'
5165 -5166 5167 0
-5167 5166 0
-5167 -5165 0
c Var 'aux1253' direct represents '2' with '-5166'
5165 5167 -5166 0
c Encoding variable: aux1254 with domain: int(0..2) (representing constraint ((x_00007_00008=1) + (x_00007_00002=1)))
c Both direct and order encoding.
c Var 'aux1254' order represents '0' with '5168'
c Var 'aux1254' direct represents '0' with '5168'
c Var 'aux1254' order represents '1' with '5169'
-5168 5169 0
c Var 'aux1254' direct represents '1' with '5170'
5168 -5169 5170 0
-5170 5169 0
-5170 -5168 0
c Var 'aux1254' direct represents '2' with '-5169'
5168 5170 -5169 0
c Encoding variable: aux1255 with domain: int(0..2) (representing constraint ((x_00007_00007=1) + (x_00007_00004=1)))
c Both direct and order encoding.
c Var 'aux1255' order represents '0' with '5171'
c Var 'aux1255' direct represents '0' with '5171'
c Var 'aux1255' order represents '1' with '5172'
-5171 5172 0
c Var 'aux1255' direct represents '1' with '5173'
5171 -5172 5173 0
-5173 5172 0
-5173 -5171 0
c Var 'aux1255' direct represents '2' with '-5172'
5171 5173 -5172 0
c Encoding variable: aux1256 with domain: int(0..2) (representing constraint ((x_00007_00006=1) + (x_00007_00005=1)))
c Both direct and order encoding.
c Var 'aux1256' order represents '0' with '5174'
c Var 'aux1256' direct represents '0' with '5174'
c Var 'aux1256' order represents '1' with '5175'
-5174 5175 0
c Var 'aux1256' direct represents '1' with '5176'
5174 -5175 5176 0
-5176 5175 0
-5176 -5174 0
c Var 'aux1256' direct represents '2' with '-5175'
5174 5176 -5175 0
c Encoding variable: aux1257 with domain: int(0..3) (representing constraint ((x_00007_00003=1) + aux1256))
c Both direct and order encoding.
c Var 'aux1257' order represents '0' with '5177'
c Var 'aux1257' direct represents '0' with '5177'
c Var 'aux1257' order represents '1' with '5178'
-5177 5178 0
c Var 'aux1257' direct represents '1' with '5179'
5177 -5178 5179 0
-5179 5178 0
-5179 -5177 0
c Var 'aux1257' order represents '2' with '5180'
-5178 5180 0
c Var 'aux1257' direct represents '2' with '5181'
5178 -5180 5181 0
-5181 5180 0
-5181 -5178 0
c Var 'aux1257' direct represents '3' with '-5180'
5177 5179 5181 -5180 0
c Encoding variable: aux1258 with domain: int(0..4) (representing constraint (aux1253 + aux1255))
c Both direct and order encoding.
c Var 'aux1258' order represents '0' with '5182'
c Var 'aux1258' direct represents '0' with '5182'
c Var 'aux1258' order represents '1' with '5183'
-5182 5183 0
c Var 'aux1258' direct represents '1' with '5184'
5182 -5183 5184 0
-5184 5183 0
-5184 -5182 0
c Var 'aux1258' order represents '2' with '5185'
-5183 5185 0
c Var 'aux1258' direct represents '2' with '5186'
5183 -5185 5186 0
-5186 5185 0
-5186 -5183 0
c Var 'aux1258' order represents '3' with '5187'
-5185 5187 0
c Var 'aux1258' direct represents '3' with '5188'
5185 -5187 5188 0
-5188 5187 0
-5188 -5185 0
c Var 'aux1258' direct represents '4' with '-5187'
5182 5184 5186 5188 -5187 0
c Encoding variable: aux1259 with domain: int(0..2) (representing constraint ((x_00007_00001=2) + (x_00007_00009=2)))
c Both direct and order encoding.
c Var 'aux1259' order represents '0' with '5189'
c Var 'aux1259' direct represents '0' with '5189'
c Var 'aux1259' order represents '1' with '5190'
-5189 5190 0
c Var 'aux1259' direct represents '1' with '5191'
5189 -5190 5191 0
-5191 5190 0
-5191 -5189 0
c Var 'aux1259' direct represents '2' with '-5190'
5189 5191 -5190 0
c Encoding variable: aux1260 with domain: int(0..2) (representing constraint ((x_00007_00008=2) + (x_00007_00002=2)))
c Both direct and order encoding.
c Var 'aux1260' order represents '0' with '5192'
c Var 'aux1260' direct represents '0' with '5192'
c Var 'aux1260' order represents '1' with '5193'
-5192 5193 0
c Var 'aux1260' direct represents '1' with '5194'
5192 -5193 5194 0
-5194 5193 0
-5194 -5192 0
c Var 'aux1260' direct represents '2' with '-5193'
5192 5194 -5193 0
c Encoding variable: aux1261 with domain: int(0..2) (representing constraint ((x_00007_00007=2) + (x_00007_00004=2)))
c Both direct and order encoding.
c Var 'aux1261' order represents '0' with '5195'
c Var 'aux1261' direct represents '0' with '5195'
c Var 'aux1261' order represents '1' with '5196'
-5195 5196 0
c Var 'aux1261' direct represents '1' with '5197'
5195 -5196 5197 0
-5197 5196 0
-5197 -5195 0
c Var 'aux1261' direct represents '2' with '-5196'
5195 5197 -5196 0
c Encoding variable: aux1262 with domain: int(0..2) (representing constraint ((x_00007_00006=2) + (x_00007_00005=2)))
c Both direct and order encoding.
c Var 'aux1262' order represents '0' with '5198'
c Var 'aux1262' direct represents '0' with '5198'
c Var 'aux1262' order represents '1' with '5199'
-5198 5199 0
c Var 'aux1262' direct represents '1' with '5200'
5198 -5199 5200 0
-5200 5199 0
-5200 -5198 0
c Var 'aux1262' direct represents '2' with '-5199'
5198 5200 -5199 0
c Encoding variable: aux1263 with domain: int(0..3) (representing constraint ((x_00007_00003=2) + aux1262))
c Both direct and order encoding.
c Var 'aux1263' order represents '0' with '5201'
c Var 'aux1263' direct represents '0' with '5201'
c Var 'aux1263' order represents '1' with '5202'
-5201 5202 0
c Var 'aux1263' direct represents '1' with '5203'
5201 -5202 5203 0
-5203 5202 0
-5203 -5201 0
c Var 'aux1263' order represents '2' with '5204'
-5202 5204 0
c Var 'aux1263' direct represents '2' with '5205'
5202 -5204 5205 0
-5205 5204 0
-5205 -5202 0
c Var 'aux1263' direct represents '3' with '-5204'
5201 5203 5205 -5204 0
c Encoding variable: aux1264 with domain: int(0..4) (representing constraint (aux1259 + aux1261))
c Both direct and order encoding.
c Var 'aux1264' order represents '0' with '5206'
c Var 'aux1264' direct represents '0' with '5206'
c Var 'aux1264' order represents '1' with '5207'
-5206 5207 0
c Var 'aux1264' direct represents '1' with '5208'
5206 -5207 5208 0
-5208 5207 0
-5208 -5206 0
c Var 'aux1264' order represents '2' with '5209'
-5207 5209 0
c Var 'aux1264' direct represents '2' with '5210'
5207 -5209 5210 0
-5210 5209 0
-5210 -5207 0
c Var 'aux1264' order represents '3' with '5211'
-5209 5211 0
c Var 'aux1264' direct represents '3' with '5212'
5209 -5211 5212 0
-5212 5211 0
-5212 -5209 0
c Var 'aux1264' direct represents '4' with '-5211'
5206 5208 5210 5212 -5211 0
c Encoding variable: aux1265 with domain: int(0..2) (representing constraint ((x_00007_00001=3) + (x_00007_00009=3)))
c Both direct and order encoding.
c Var 'aux1265' order represents '0' with '5213'
c Var 'aux1265' direct represents '0' with '5213'
c Var 'aux1265' order represents '1' with '5214'
-5213 5214 0
c Var 'aux1265' direct represents '1' with '5215'
5213 -5214 5215 0
-5215 5214 0
-5215 -5213 0
c Var 'aux1265' direct represents '2' with '-5214'
5213 5215 -5214 0
c Encoding variable: aux1266 with domain: int(0..2) (representing constraint ((x_00007_00008=3) + (x_00007_00002=3)))
c Both direct and order encoding.
c Var 'aux1266' order represents '0' with '5216'
c Var 'aux1266' direct represents '0' with '5216'
c Var 'aux1266' order represents '1' with '5217'
-5216 5217 0
c Var 'aux1266' direct represents '1' with '5218'
5216 -5217 5218 0
-5218 5217 0
-5218 -5216 0
c Var 'aux1266' direct represents '2' with '-5217'
5216 5218 -5217 0
c Encoding variable: aux1267 with domain: int(0..2) (representing constraint ((x_00007_00007=3) + (x_00007_00004=3)))
c Both direct and order encoding.
c Var 'aux1267' order represents '0' with '5219'
c Var 'aux1267' direct represents '0' with '5219'
c Var 'aux1267' order represents '1' with '5220'
-5219 5220 0
c Var 'aux1267' direct represents '1' with '5221'
5219 -5220 5221 0
-5221 5220 0
-5221 -5219 0
c Var 'aux1267' direct represents '2' with '-5220'
5219 5221 -5220 0
c Encoding variable: aux1268 with domain: int(0..2) (representing constraint ((x_00007_00006=3) + (x_00007_00005=3)))
c Both direct and order encoding.
c Var 'aux1268' order represents '0' with '5222'
c Var 'aux1268' direct represents '0' with '5222'
c Var 'aux1268' order represents '1' with '5223'
-5222 5223 0
c Var 'aux1268' direct represents '1' with '5224'
5222 -5223 5224 0
-5224 5223 0
-5224 -5222 0
c Var 'aux1268' direct represents '2' with '-5223'
5222 5224 -5223 0
c Encoding variable: aux1269 with domain: int(0..3) (representing constraint ((x_00007_00003=3) + aux1268))
c Both direct and order encoding.
c Var 'aux1269' order represents '0' with '5225'
c Var 'aux1269' direct represents '0' with '5225'
c Var 'aux1269' order represents '1' with '5226'
-5225 5226 0
c Var 'aux1269' direct represents '1' with '5227'
5225 -5226 5227 0
-5227 5226 0
-5227 -5225 0
c Var 'aux1269' order represents '2' with '5228'
-5226 5228 0
c Var 'aux1269' direct represents '2' with '5229'
5226 -5228 5229 0
-5229 5228 0
-5229 -5226 0
c Var 'aux1269' direct represents '3' with '-5228'
5225 5227 5229 -5228 0
c Encoding variable: aux1270 with domain: int(0..4) (representing constraint (aux1265 + aux1267))
c Both direct and order encoding.
c Var 'aux1270' order represents '0' with '5230'
c Var 'aux1270' direct represents '0' with '5230'
c Var 'aux1270' order represents '1' with '5231'
-5230 5231 0
c Var 'aux1270' direct represents '1' with '5232'
5230 -5231 5232 0
-5232 5231 0
-5232 -5230 0
c Var 'aux1270' order represents '2' with '5233'
-5231 5233 0
c Var 'aux1270' direct represents '2' with '5234'
5231 -5233 5234 0
-5234 5233 0
-5234 -5231 0
c Var 'aux1270' order represents '3' with '5235'
-5233 5235 0
c Var 'aux1270' direct represents '3' with '5236'
5233 -5235 5236 0
-5236 5235 0
-5236 -5233 0
c Var 'aux1270' direct represents '4' with '-5235'
5230 5232 5234 5236 -5235 0
c Encoding variable: aux1271 with domain: int(0..2) (representing constraint ((x_00007_00001=4) + (x_00007_00009=4)))
c Both direct and order encoding.
c Var 'aux1271' order represents '0' with '5237'
c Var 'aux1271' direct represents '0' with '5237'
c Var 'aux1271' order represents '1' with '5238'
-5237 5238 0
c Var 'aux1271' direct represents '1' with '5239'
5237 -5238 5239 0
-5239 5238 0
-5239 -5237 0
c Var 'aux1271' direct represents '2' with '-5238'
5237 5239 -5238 0
c Encoding variable: aux1272 with domain: int(0..2) (representing constraint ((x_00007_00008=4) + (x_00007_00002=4)))
c Both direct and order encoding.
c Var 'aux1272' order represents '0' with '5240'
c Var 'aux1272' direct represents '0' with '5240'
c Var 'aux1272' order represents '1' with '5241'
-5240 5241 0
c Var 'aux1272' direct represents '1' with '5242'
5240 -5241 5242 0
-5242 5241 0
-5242 -5240 0
c Var 'aux1272' direct represents '2' with '-5241'
5240 5242 -5241 0
c Encoding variable: aux1273 with domain: int(0..2) (representing constraint ((x_00007_00007=4) + (x_00007_00004=4)))
c Both direct and order encoding.
c Var 'aux1273' order represents '0' with '5243'
c Var 'aux1273' direct represents '0' with '5243'
c Var 'aux1273' order represents '1' with '5244'
-5243 5244 0
c Var 'aux1273' direct represents '1' with '5245'
5243 -5244 5245 0
-5245 5244 0
-5245 -5243 0
c Var 'aux1273' direct represents '2' with '-5244'
5243 5245 -5244 0
c Encoding variable: aux1274 with domain: int(0..2) (representing constraint ((x_00007_00006=4) + (x_00007_00005=4)))
c Both direct and order encoding.
c Var 'aux1274' order represents '0' with '5246'
c Var 'aux1274' direct represents '0' with '5246'
c Var 'aux1274' order represents '1' with '5247'
-5246 5247 0
c Var 'aux1274' direct represents '1' with '5248'
5246 -5247 5248 0
-5248 5247 0
-5248 -5246 0
c Var 'aux1274' direct represents '2' with '-5247'
5246 5248 -5247 0
c Encoding variable: aux1275 with domain: int(0..3) (representing constraint ((x_00007_00003=4) + aux1274))
c Both direct and order encoding.
c Var 'aux1275' order represents '0' with '5249'
c Var 'aux1275' direct represents '0' with '5249'
c Var 'aux1275' order represents '1' with '5250'
-5249 5250 0
c Var 'aux1275' direct represents '1' with '5251'
5249 -5250 5251 0
-5251 5250 0
-5251 -5249 0
c Var 'aux1275' order represents '2' with '5252'
-5250 5252 0
c Var 'aux1275' direct represents '2' with '5253'
5250 -5252 5253 0
-5253 5252 0
-5253 -5250 0
c Var 'aux1275' direct represents '3' with '-5252'
5249 5251 5253 -5252 0
c Encoding variable: aux1276 with domain: int(0..4) (representing constraint (aux1271 + aux1273))
c Both direct and order encoding.
c Var 'aux1276' order represents '0' with '5254'
c Var 'aux1276' direct represents '0' with '5254'
c Var 'aux1276' order represents '1' with '5255'
-5254 5255 0
c Var 'aux1276' direct represents '1' with '5256'
5254 -5255 5256 0
-5256 5255 0
-5256 -5254 0
c Var 'aux1276' order represents '2' with '5257'
-5255 5257 0
c Var 'aux1276' direct represents '2' with '5258'
5255 -5257 5258 0
-5258 5257 0
-5258 -5255 0
c Var 'aux1276' order represents '3' with '5259'
-5257 5259 0
c Var 'aux1276' direct represents '3' with '5260'
5257 -5259 5260 0
-5260 5259 0
-5260 -5257 0
c Var 'aux1276' direct represents '4' with '-5259'
5254 5256 5258 5260 -5259 0
c Encoding variable: aux1277 with domain: int(0..2) (representing constraint ((x_00007_00001=5) + (x_00007_00009=5)))
c Both direct and order encoding.
c Var 'aux1277' order represents '0' with '5261'
c Var 'aux1277' direct represents '0' with '5261'
c Var 'aux1277' order represents '1' with '5262'
-5261 5262 0
c Var 'aux1277' direct represents '1' with '5263'
5261 -5262 5263 0
-5263 5262 0
-5263 -5261 0
c Var 'aux1277' direct represents '2' with '-5262'
5261 5263 -5262 0
c Encoding variable: aux1278 with domain: int(0..2) (representing constraint ((x_00007_00008=5) + (x_00007_00002=5)))
c Both direct and order encoding.
c Var 'aux1278' order represents '0' with '5264'
c Var 'aux1278' direct represents '0' with '5264'
c Var 'aux1278' order represents '1' with '5265'
-5264 5265 0
c Var 'aux1278' direct represents '1' with '5266'
5264 -5265 5266 0
-5266 5265 0
-5266 -5264 0
c Var 'aux1278' direct represents '2' with '-5265'
5264 5266 -5265 0
c Encoding variable: aux1279 with domain: int(0..2) (representing constraint ((x_00007_00007=5) + (x_00007_00004=5)))
c Both direct and order encoding.
c Var 'aux1279' order represents '0' with '5267'
c Var 'aux1279' direct represents '0' with '5267'
c Var 'aux1279' order represents '1' with '5268'
-5267 5268 0
c Var 'aux1279' direct represents '1' with '5269'
5267 -5268 5269 0
-5269 5268 0
-5269 -5267 0
c Var 'aux1279' direct represents '2' with '-5268'
5267 5269 -5268 0
c Encoding variable: aux1280 with domain: int(0..2) (representing constraint ((x_00007_00006=5) + (x_00007_00005=5)))
c Both direct and order encoding.
c Var 'aux1280' order represents '0' with '5270'
c Var 'aux1280' direct represents '0' with '5270'
c Var 'aux1280' order represents '1' with '5271'
-5270 5271 0
c Var 'aux1280' direct represents '1' with '5272'
5270 -5271 5272 0
-5272 5271 0
-5272 -5270 0
c Var 'aux1280' direct represents '2' with '-5271'
5270 5272 -5271 0
c Encoding variable: aux1281 with domain: int(0..3) (representing constraint ((x_00007_00003=5) + aux1280))
c Both direct and order encoding.
c Var 'aux1281' order represents '0' with '5273'
c Var 'aux1281' direct represents '0' with '5273'
c Var 'aux1281' order represents '1' with '5274'
-5273 5274 0
c Var 'aux1281' direct represents '1' with '5275'
5273 -5274 5275 0
-5275 5274 0
-5275 -5273 0
c Var 'aux1281' order represents '2' with '5276'
-5274 5276 0
c Var 'aux1281' direct represents '2' with '5277'
5274 -5276 5277 0
-5277 5276 0
-5277 -5274 0
c Var 'aux1281' direct represents '3' with '-5276'
5273 5275 5277 -5276 0
c Encoding variable: aux1282 with domain: int(0..4) (representing constraint (aux1277 + aux1279))
c Both direct and order encoding.
c Var 'aux1282' order represents '0' with '5278'
c Var 'aux1282' direct represents '0' with '5278'
c Var 'aux1282' order represents '1' with '5279'
-5278 5279 0
c Var 'aux1282' direct represents '1' with '5280'
5278 -5279 5280 0
-5280 5279 0
-5280 -5278 0
c Var 'aux1282' order represents '2' with '5281'
-5279 5281 0
c Var 'aux1282' direct represents '2' with '5282'
5279 -5281 5282 0
-5282 5281 0
-5282 -5279 0
c Var 'aux1282' order represents '3' with '5283'
-5281 5283 0
c Var 'aux1282' direct represents '3' with '5284'
5281 -5283 5284 0
-5284 5283 0
-5284 -5281 0
c Var 'aux1282' direct represents '4' with '-5283'
5278 5280 5282 5284 -5283 0
c Encoding variable: aux1283 with domain: int(0..2) (representing constraint ((x_00007_00001=6) + (x_00007_00009=6)))
c Both direct and order encoding.
c Var 'aux1283' order represents '0' with '5285'
c Var 'aux1283' direct represents '0' with '5285'
c Var 'aux1283' order represents '1' with '5286'
-5285 5286 0
c Var 'aux1283' direct represents '1' with '5287'
5285 -5286 5287 0
-5287 5286 0
-5287 -5285 0
c Var 'aux1283' direct represents '2' with '-5286'
5285 5287 -5286 0
c Encoding variable: aux1284 with domain: int(0..2) (representing constraint ((x_00007_00008=6) + (x_00007_00002=6)))
c Both direct and order encoding.
c Var 'aux1284' order represents '0' with '5288'
c Var 'aux1284' direct represents '0' with '5288'
c Var 'aux1284' order represents '1' with '5289'
-5288 5289 0
c Var 'aux1284' direct represents '1' with '5290'
5288 -5289 5290 0
-5290 5289 0
-5290 -5288 0
c Var 'aux1284' direct represents '2' with '-5289'
5288 5290 -5289 0
c Encoding variable: aux1285 with domain: int(0..2) (representing constraint ((x_00007_00007=6) + (x_00007_00004=6)))
c Both direct and order encoding.
c Var 'aux1285' order represents '0' with '5291'
c Var 'aux1285' direct represents '0' with '5291'
c Var 'aux1285' order represents '1' with '5292'
-5291 5292 0
c Var 'aux1285' direct represents '1' with '5293'
5291 -5292 5293 0
-5293 5292 0
-5293 -5291 0
c Var 'aux1285' direct represents '2' with '-5292'
5291 5293 -5292 0
c Encoding variable: aux1286 with domain: int(0..2) (representing constraint ((x_00007_00006=6) + (x_00007_00005=6)))
c Both direct and order encoding.
c Var 'aux1286' order represents '0' with '5294'
c Var 'aux1286' direct represents '0' with '5294'
c Var 'aux1286' order represents '1' with '5295'
-5294 5295 0
c Var 'aux1286' direct represents '1' with '5296'
5294 -5295 5296 0
-5296 5295 0
-5296 -5294 0
c Var 'aux1286' direct represents '2' with '-5295'
5294 5296 -5295 0
c Encoding variable: aux1287 with domain: int(0..3) (representing constraint ((x_00007_00003=6) + aux1286))
c Both direct and order encoding.
c Var 'aux1287' order represents '0' with '5297'
c Var 'aux1287' direct represents '0' with '5297'
c Var 'aux1287' order represents '1' with '5298'
-5297 5298 0
c Var 'aux1287' direct represents '1' with '5299'
5297 -5298 5299 0
-5299 5298 0
-5299 -5297 0
c Var 'aux1287' order represents '2' with '5300'
-5298 5300 0
c Var 'aux1287' direct represents '2' with '5301'
5298 -5300 5301 0
-5301 5300 0
-5301 -5298 0
c Var 'aux1287' direct represents '3' with '-5300'
5297 5299 5301 -5300 0
c Encoding variable: aux1288 with domain: int(0..4) (representing constraint (aux1283 + aux1285))
c Both direct and order encoding.
c Var 'aux1288' order represents '0' with '5302'
c Var 'aux1288' direct represents '0' with '5302'
c Var 'aux1288' order represents '1' with '5303'
-5302 5303 0
c Var 'aux1288' direct represents '1' with '5304'
5302 -5303 5304 0
-5304 5303 0
-5304 -5302 0
c Var 'aux1288' order represents '2' with '5305'
-5303 5305 0
c Var 'aux1288' direct represents '2' with '5306'
5303 -5305 5306 0
-5306 5305 0
-5306 -5303 0
c Var 'aux1288' order represents '3' with '5307'
-5305 5307 0
c Var 'aux1288' direct represents '3' with '5308'
5305 -5307 5308 0
-5308 5307 0
-5308 -5305 0
c Var 'aux1288' direct represents '4' with '-5307'
5302 5304 5306 5308 -5307 0
c Encoding variable: aux1289 with domain: int(0..2) (representing constraint ((x_00007_00001=7) + (x_00007_00009=7)))
c Both direct and order encoding.
c Var 'aux1289' order represents '0' with '5309'
c Var 'aux1289' direct represents '0' with '5309'
c Var 'aux1289' order represents '1' with '5310'
-5309 5310 0
c Var 'aux1289' direct represents '1' with '5311'
5309 -5310 5311 0
-5311 5310 0
-5311 -5309 0
c Var 'aux1289' direct represents '2' with '-5310'
5309 5311 -5310 0
c Encoding variable: aux1290 with domain: int(0..2) (representing constraint ((x_00007_00008=7) + (x_00007_00002=7)))
c Both direct and order encoding.
c Var 'aux1290' order represents '0' with '5312'
c Var 'aux1290' direct represents '0' with '5312'
c Var 'aux1290' order represents '1' with '5313'
-5312 5313 0
c Var 'aux1290' direct represents '1' with '5314'
5312 -5313 5314 0
-5314 5313 0
-5314 -5312 0
c Var 'aux1290' direct represents '2' with '-5313'
5312 5314 -5313 0
c Encoding variable: aux1291 with domain: int(0..2) (representing constraint ((x_00007_00007=7) + (x_00007_00004=7)))
c Both direct and order encoding.
c Var 'aux1291' order represents '0' with '5315'
c Var 'aux1291' direct represents '0' with '5315'
c Var 'aux1291' order represents '1' with '5316'
-5315 5316 0
c Var 'aux1291' direct represents '1' with '5317'
5315 -5316 5317 0
-5317 5316 0
-5317 -5315 0
c Var 'aux1291' direct represents '2' with '-5316'
5315 5317 -5316 0
c Encoding variable: aux1292 with domain: int(0..2) (representing constraint ((x_00007_00006=7) + (x_00007_00005=7)))
c Both direct and order encoding.
c Var 'aux1292' order represents '0' with '5318'
c Var 'aux1292' direct represents '0' with '5318'
c Var 'aux1292' order represents '1' with '5319'
-5318 5319 0
c Var 'aux1292' direct represents '1' with '5320'
5318 -5319 5320 0
-5320 5319 0
-5320 -5318 0
c Var 'aux1292' direct represents '2' with '-5319'
5318 5320 -5319 0
c Encoding variable: aux1293 with domain: int(0..3) (representing constraint ((x_00007_00003=7) + aux1292))
c Both direct and order encoding.
c Var 'aux1293' order represents '0' with '5321'
c Var 'aux1293' direct represents '0' with '5321'
c Var 'aux1293' order represents '1' with '5322'
-5321 5322 0
c Var 'aux1293' direct represents '1' with '5323'
5321 -5322 5323 0
-5323 5322 0
-5323 -5321 0
c Var 'aux1293' order represents '2' with '5324'
-5322 5324 0
c Var 'aux1293' direct represents '2' with '5325'
5322 -5324 5325 0
-5325 5324 0
-5325 -5322 0
c Var 'aux1293' direct represents '3' with '-5324'
5321 5323 5325 -5324 0
c Encoding variable: aux1294 with domain: int(0..4) (representing constraint (aux1289 + aux1291))
c Both direct and order encoding.
c Var 'aux1294' order represents '0' with '5326'
c Var 'aux1294' direct represents '0' with '5326'
c Var 'aux1294' order represents '1' with '5327'
-5326 5327 0
c Var 'aux1294' direct represents '1' with '5328'
5326 -5327 5328 0
-5328 5327 0
-5328 -5326 0
c Var 'aux1294' order represents '2' with '5329'
-5327 5329 0
c Var 'aux1294' direct represents '2' with '5330'
5327 -5329 5330 0
-5330 5329 0
-5330 -5327 0
c Var 'aux1294' order represents '3' with '5331'
-5329 5331 0
c Var 'aux1294' direct represents '3' with '5332'
5329 -5331 5332 0
-5332 5331 0
-5332 -5329 0
c Var 'aux1294' direct represents '4' with '-5331'
5326 5328 5330 5332 -5331 0
c Encoding variable: aux1295 with domain: int(0..2) (representing constraint ((x_00007_00001=8) + (x_00007_00009=8)))
c Both direct and order encoding.
c Var 'aux1295' order represents '0' with '5333'
c Var 'aux1295' direct represents '0' with '5333'
c Var 'aux1295' order represents '1' with '5334'
-5333 5334 0
c Var 'aux1295' direct represents '1' with '5335'
5333 -5334 5335 0
-5335 5334 0
-5335 -5333 0
c Var 'aux1295' direct represents '2' with '-5334'
5333 5335 -5334 0
c Encoding variable: aux1296 with domain: int(0..2) (representing constraint ((x_00007_00008=8) + (x_00007_00002=8)))
c Both direct and order encoding.
c Var 'aux1296' order represents '0' with '5336'
c Var 'aux1296' direct represents '0' with '5336'
c Var 'aux1296' order represents '1' with '5337'
-5336 5337 0
c Var 'aux1296' direct represents '1' with '5338'
5336 -5337 5338 0
-5338 5337 0
-5338 -5336 0
c Var 'aux1296' direct represents '2' with '-5337'
5336 5338 -5337 0
c Encoding variable: aux1297 with domain: int(0..2) (representing constraint ((x_00007_00007=8) + (x_00007_00004=8)))
c Both direct and order encoding.
c Var 'aux1297' order represents '0' with '5339'
c Var 'aux1297' direct represents '0' with '5339'
c Var 'aux1297' order represents '1' with '5340'
-5339 5340 0
c Var 'aux1297' direct represents '1' with '5341'
5339 -5340 5341 0
-5341 5340 0
-5341 -5339 0
c Var 'aux1297' direct represents '2' with '-5340'
5339 5341 -5340 0
c Encoding variable: aux1298 with domain: int(0..2) (representing constraint ((x_00007_00006=8) + (x_00007_00005=8)))
c Both direct and order encoding.
c Var 'aux1298' order represents '0' with '5342'
c Var 'aux1298' direct represents '0' with '5342'
c Var 'aux1298' order represents '1' with '5343'
-5342 5343 0
c Var 'aux1298' direct represents '1' with '5344'
5342 -5343 5344 0
-5344 5343 0
-5344 -5342 0
c Var 'aux1298' direct represents '2' with '-5343'
5342 5344 -5343 0
c Encoding variable: aux1299 with domain: int(0..3) (representing constraint ((x_00007_00003=8) + aux1298))
c Both direct and order encoding.
c Var 'aux1299' order represents '0' with '5345'
c Var 'aux1299' direct represents '0' with '5345'
c Var 'aux1299' order represents '1' with '5346'
-5345 5346 0
c Var 'aux1299' direct represents '1' with '5347'
5345 -5346 5347 0
-5347 5346 0
-5347 -5345 0
c Var 'aux1299' order represents '2' with '5348'
-5346 5348 0
c Var 'aux1299' direct represents '2' with '5349'
5346 -5348 5349 0
-5349 5348 0
-5349 -5346 0
c Var 'aux1299' direct represents '3' with '-5348'
5345 5347 5349 -5348 0
c Encoding variable: aux1300 with domain: int(0..4) (representing constraint (aux1295 + aux1297))
c Both direct and order encoding.
c Var 'aux1300' order represents '0' with '5350'
c Var 'aux1300' direct represents '0' with '5350'
c Var 'aux1300' order represents '1' with '5351'
-5350 5351 0
c Var 'aux1300' direct represents '1' with '5352'
5350 -5351 5352 0
-5352 5351 0
-5352 -5350 0
c Var 'aux1300' order represents '2' with '5353'
-5351 5353 0
c Var 'aux1300' direct represents '2' with '5354'
5351 -5353 5354 0
-5354 5353 0
-5354 -5351 0
c Var 'aux1300' order represents '3' with '5355'
-5353 5355 0
c Var 'aux1300' direct represents '3' with '5356'
5353 -5355 5356 0
-5356 5355 0
-5356 -5353 0
c Var 'aux1300' direct represents '4' with '-5355'
5350 5352 5354 5356 -5355 0
c Encoding variable: aux1301 with domain: int(0..2) (representing constraint ((x_00007_00001=9) + (x_00007_00009=9)))
c Both direct and order encoding.
c Var 'aux1301' order represents '0' with '5357'
c Var 'aux1301' direct represents '0' with '5357'
c Var 'aux1301' order represents '1' with '5358'
-5357 5358 0
c Var 'aux1301' direct represents '1' with '5359'
5357 -5358 5359 0
-5359 5358 0
-5359 -5357 0
c Var 'aux1301' direct represents '2' with '-5358'
5357 5359 -5358 0
c Encoding variable: aux1302 with domain: int(0..2) (representing constraint ((x_00007_00008=9) + (x_00007_00002=9)))
c Both direct and order encoding.
c Var 'aux1302' order represents '0' with '5360'
c Var 'aux1302' direct represents '0' with '5360'
c Var 'aux1302' order represents '1' with '5361'
-5360 5361 0
c Var 'aux1302' direct represents '1' with '5362'
5360 -5361 5362 0
-5362 5361 0
-5362 -5360 0
c Var 'aux1302' direct represents '2' with '-5361'
5360 5362 -5361 0
c Encoding variable: aux1303 with domain: int(0..2) (representing constraint ((x_00007_00007=9) + (x_00007_00004=9)))
c Both direct and order encoding.
c Var 'aux1303' order represents '0' with '5363'
c Var 'aux1303' direct represents '0' with '5363'
c Var 'aux1303' order represents '1' with '5364'
-5363 5364 0
c Var 'aux1303' direct represents '1' with '5365'
5363 -5364 5365 0
-5365 5364 0
-5365 -5363 0
c Var 'aux1303' direct represents '2' with '-5364'
5363 5365 -5364 0
c Encoding variable: aux1304 with domain: int(0..2) (representing constraint ((x_00007_00006=9) + (x_00007_00005=9)))
c Both direct and order encoding.
c Var 'aux1304' order represents '0' with '5366'
c Var 'aux1304' direct represents '0' with '5366'
c Var 'aux1304' order represents '1' with '5367'
-5366 5367 0
c Var 'aux1304' direct represents '1' with '5368'
5366 -5367 5368 0
-5368 5367 0
-5368 -5366 0
c Var 'aux1304' direct represents '2' with '-5367'
5366 5368 -5367 0
c Encoding variable: aux1305 with domain: int(0..3) (representing constraint ((x_00007_00003=9) + aux1304))
c Both direct and order encoding.
c Var 'aux1305' order represents '0' with '5369'
c Var 'aux1305' direct represents '0' with '5369'
c Var 'aux1305' order represents '1' with '5370'
-5369 5370 0
c Var 'aux1305' direct represents '1' with '5371'
5369 -5370 5371 0
-5371 5370 0
-5371 -5369 0
c Var 'aux1305' order represents '2' with '5372'
-5370 5372 0
c Var 'aux1305' direct represents '2' with '5373'
5370 -5372 5373 0
-5373 5372 0
-5373 -5370 0
c Var 'aux1305' direct represents '3' with '-5372'
5369 5371 5373 -5372 0
c Encoding variable: aux1306 with domain: int(0..4) (representing constraint (aux1301 + aux1303))
c Both direct and order encoding.
c Var 'aux1306' order represents '0' with '5374'
c Var 'aux1306' direct represents '0' with '5374'
c Var 'aux1306' order represents '1' with '5375'
-5374 5375 0
c Var 'aux1306' direct represents '1' with '5376'
5374 -5375 5376 0
-5376 5375 0
-5376 -5374 0
c Var 'aux1306' order represents '2' with '5377'
-5375 5377 0
c Var 'aux1306' direct represents '2' with '5378'
5375 -5377 5378 0
-5378 5377 0
-5378 -5375 0
c Var 'aux1306' order represents '3' with '5379'
-5377 5379 0
c Var 'aux1306' direct represents '3' with '5380'
5377 -5379 5380 0
-5380 5379 0
-5380 -5377 0
c Var 'aux1306' direct represents '4' with '-5379'
5374 5376 5378 5380 -5379 0
c Encoding variable: aux1307 with domain: int(0..2) (representing constraint ((x_00008_00001=1) + (x_00008_00009=1)))
c Both direct and order encoding.
c Var 'aux1307' order represents '0' with '5381'
c Var 'aux1307' direct represents '0' with '5381'
c Var 'aux1307' order represents '1' with '5382'
-5381 5382 0
c Var 'aux1307' direct represents '1' with '5383'
5381 -5382 5383 0
-5383 5382 0
-5383 -5381 0
c Var 'aux1307' direct represents '2' with '-5382'
5381 5383 -5382 0
c Encoding variable: aux1308 with domain: int(0..2) (representing constraint ((x_00008_00008=1) + (x_00008_00002=1)))
c Both direct and order encoding.
c Var 'aux1308' order represents '0' with '5384'
c Var 'aux1308' direct represents '0' with '5384'
c Var 'aux1308' order represents '1' with '5385'
-5384 5385 0
c Var 'aux1308' direct represents '1' with '5386'
5384 -5385 5386 0
-5386 5385 0
-5386 -5384 0
c Var 'aux1308' direct represents '2' with '-5385'
5384 5386 -5385 0
c Encoding variable: aux1309 with domain: int(0..2) (representing constraint ((x_00008_00007=1) + (x_00008_00004=1)))
c Both direct and order encoding.
c Var 'aux1309' order represents '0' with '5387'
c Var 'aux1309' direct represents '0' with '5387'
c Var 'aux1309' order represents '1' with '5388'
-5387 5388 0
c Var 'aux1309' direct represents '1' with '5389'
5387 -5388 5389 0
-5389 5388 0
-5389 -5387 0
c Var 'aux1309' direct represents '2' with '-5388'
5387 5389 -5388 0
c Encoding variable: aux1310 with domain: int(0..2) (representing constraint ((x_00008_00006=1) + (x_00008_00005=1)))
c Both direct and order encoding.
c Var 'aux1310' order represents '0' with '5390'
c Var 'aux1310' direct represents '0' with '5390'
c Var 'aux1310' order represents '1' with '5391'
-5390 5391 0
c Var 'aux1310' direct represents '1' with '5392'
5390 -5391 5392 0
-5392 5391 0
-5392 -5390 0
c Var 'aux1310' direct represents '2' with '-5391'
5390 5392 -5391 0
c Encoding variable: aux1311 with domain: int(0..3) (representing constraint ((x_00008_00003=1) + aux1310))
c Both direct and order encoding.
c Var 'aux1311' order represents '0' with '5393'
c Var 'aux1311' direct represents '0' with '5393'
c Var 'aux1311' order represents '1' with '5394'
-5393 5394 0
c Var 'aux1311' direct represents '1' with '5395'
5393 -5394 5395 0
-5395 5394 0
-5395 -5393 0
c Var 'aux1311' order represents '2' with '5396'
-5394 5396 0
c Var 'aux1311' direct represents '2' with '5397'
5394 -5396 5397 0
-5397 5396 0
-5397 -5394 0
c Var 'aux1311' direct represents '3' with '-5396'
5393 5395 5397 -5396 0
c Encoding variable: aux1312 with domain: int(0..4) (representing constraint (aux1307 + aux1309))
c Both direct and order encoding.
c Var 'aux1312' order represents '0' with '5398'
c Var 'aux1312' direct represents '0' with '5398'
c Var 'aux1312' order represents '1' with '5399'
-5398 5399 0
c Var 'aux1312' direct represents '1' with '5400'
5398 -5399 5400 0
-5400 5399 0
-5400 -5398 0
c Var 'aux1312' order represents '2' with '5401'
-5399 5401 0
c Var 'aux1312' direct represents '2' with '5402'
5399 -5401 5402 0
-5402 5401 0
-5402 -5399 0
c Var 'aux1312' order represents '3' with '5403'
-5401 5403 0
c Var 'aux1312' direct represents '3' with '5404'
5401 -5403 5404 0
-5404 5403 0
-5404 -5401 0
c Var 'aux1312' direct represents '4' with '-5403'
5398 5400 5402 5404 -5403 0
c Encoding variable: aux1313 with domain: int(0..2) (representing constraint ((x_00008_00001=2) + (x_00008_00009=2)))
c Both direct and order encoding.
c Var 'aux1313' order represents '0' with '5405'
c Var 'aux1313' direct represents '0' with '5405'
c Var 'aux1313' order represents '1' with '5406'
-5405 5406 0
c Var 'aux1313' direct represents '1' with '5407'
5405 -5406 5407 0
-5407 5406 0
-5407 -5405 0
c Var 'aux1313' direct represents '2' with '-5406'
5405 5407 -5406 0
c Encoding variable: aux1314 with domain: int(0..2) (representing constraint ((x_00008_00008=2) + (x_00008_00002=2)))
c Both direct and order encoding.
c Var 'aux1314' order represents '0' with '5408'
c Var 'aux1314' direct represents '0' with '5408'
c Var 'aux1314' order represents '1' with '5409'
-5408 5409 0
c Var 'aux1314' direct represents '1' with '5410'
5408 -5409 5410 0
-5410 5409 0
-5410 -5408 0
c Var 'aux1314' direct represents '2' with '-5409'
5408 5410 -5409 0
c Encoding variable: aux1315 with domain: int(0..2) (representing constraint ((x_00008_00007=2) + (x_00008_00004=2)))
c Both direct and order encoding.
c Var 'aux1315' order represents '0' with '5411'
c Var 'aux1315' direct represents '0' with '5411'
c Var 'aux1315' order represents '1' with '5412'
-5411 5412 0
c Var 'aux1315' direct represents '1' with '5413'
5411 -5412 5413 0
-5413 5412 0
-5413 -5411 0
c Var 'aux1315' direct represents '2' with '-5412'
5411 5413 -5412 0
c Encoding variable: aux1316 with domain: int(0..2) (representing constraint ((x_00008_00006=2) + (x_00008_00005=2)))
c Both direct and order encoding.
c Var 'aux1316' order represents '0' with '5414'
c Var 'aux1316' direct represents '0' with '5414'
c Var 'aux1316' order represents '1' with '5415'
-5414 5415 0
c Var 'aux1316' direct represents '1' with '5416'
5414 -5415 5416 0
-5416 5415 0
-5416 -5414 0
c Var 'aux1316' direct represents '2' with '-5415'
5414 5416 -5415 0
c Encoding variable: aux1317 with domain: int(0..3) (representing constraint ((x_00008_00003=2) + aux1316))
c Both direct and order encoding.
c Var 'aux1317' order represents '0' with '5417'
c Var 'aux1317' direct represents '0' with '5417'
c Var 'aux1317' order represents '1' with '5418'
-5417 5418 0
c Var 'aux1317' direct represents '1' with '5419'
5417 -5418 5419 0
-5419 5418 0
-5419 -5417 0
c Var 'aux1317' order represents '2' with '5420'
-5418 5420 0
c Var 'aux1317' direct represents '2' with '5421'
5418 -5420 5421 0
-5421 5420 0
-5421 -5418 0
c Var 'aux1317' direct represents '3' with '-5420'
5417 5419 5421 -5420 0
c Encoding variable: aux1318 with domain: int(0..4) (representing constraint (aux1313 + aux1315))
c Both direct and order encoding.
c Var 'aux1318' order represents '0' with '5422'
c Var 'aux1318' direct represents '0' with '5422'
c Var 'aux1318' order represents '1' with '5423'
-5422 5423 0
c Var 'aux1318' direct represents '1' with '5424'
5422 -5423 5424 0
-5424 5423 0
-5424 -5422 0
c Var 'aux1318' order represents '2' with '5425'
-5423 5425 0
c Var 'aux1318' direct represents '2' with '5426'
5423 -5425 5426 0
-5426 5425 0
-5426 -5423 0
c Var 'aux1318' order represents '3' with '5427'
-5425 5427 0
c Var 'aux1318' direct represents '3' with '5428'
5425 -5427 5428 0
-5428 5427 0
-5428 -5425 0
c Var 'aux1318' direct represents '4' with '-5427'
5422 5424 5426 5428 -5427 0
c Encoding variable: aux1319 with domain: int(0..2) (representing constraint ((x_00008_00001=3) + (x_00008_00009=3)))
c Both direct and order encoding.
c Var 'aux1319' order represents '0' with '5429'
c Var 'aux1319' direct represents '0' with '5429'
c Var 'aux1319' order represents '1' with '5430'
-5429 5430 0
c Var 'aux1319' direct represents '1' with '5431'
5429 -5430 5431 0
-5431 5430 0
-5431 -5429 0
c Var 'aux1319' direct represents '2' with '-5430'
5429 5431 -5430 0
c Encoding variable: aux1320 with domain: int(0..2) (representing constraint ((x_00008_00008=3) + (x_00008_00002=3)))
c Both direct and order encoding.
c Var 'aux1320' order represents '0' with '5432'
c Var 'aux1320' direct represents '0' with '5432'
c Var 'aux1320' order represents '1' with '5433'
-5432 5433 0
c Var 'aux1320' direct represents '1' with '5434'
5432 -5433 5434 0
-5434 5433 0
-5434 -5432 0
c Var 'aux1320' direct represents '2' with '-5433'
5432 5434 -5433 0
c Encoding variable: aux1321 with domain: int(0..2) (representing constraint ((x_00008_00007=3) + (x_00008_00004=3)))
c Both direct and order encoding.
c Var 'aux1321' order represents '0' with '5435'
c Var 'aux1321' direct represents '0' with '5435'
c Var 'aux1321' order represents '1' with '5436'
-5435 5436 0
c Var 'aux1321' direct represents '1' with '5437'
5435 -5436 5437 0
-5437 5436 0
-5437 -5435 0
c Var 'aux1321' direct represents '2' with '-5436'
5435 5437 -5436 0
c Encoding variable: aux1322 with domain: int(0..2) (representing constraint ((x_00008_00006=3) + (x_00008_00005=3)))
c Both direct and order encoding.
c Var 'aux1322' order represents '0' with '5438'
c Var 'aux1322' direct represents '0' with '5438'
c Var 'aux1322' order represents '1' with '5439'
-5438 5439 0
c Var 'aux1322' direct represents '1' with '5440'
5438 -5439 5440 0
-5440 5439 0
-5440 -5438 0
c Var 'aux1322' direct represents '2' with '-5439'
5438 5440 -5439 0
c Encoding variable: aux1323 with domain: int(0..3) (representing constraint ((x_00008_00003=3) + aux1322))
c Both direct and order encoding.
c Var 'aux1323' order represents '0' with '5441'
c Var 'aux1323' direct represents '0' with '5441'
c Var 'aux1323' order represents '1' with '5442'
-5441 5442 0
c Var 'aux1323' direct represents '1' with '5443'
5441 -5442 5443 0
-5443 5442 0
-5443 -5441 0
c Var 'aux1323' order represents '2' with '5444'
-5442 5444 0
c Var 'aux1323' direct represents '2' with '5445'
5442 -5444 5445 0
-5445 5444 0
-5445 -5442 0
c Var 'aux1323' direct represents '3' with '-5444'
5441 5443 5445 -5444 0
c Encoding variable: aux1324 with domain: int(0..4) (representing constraint (aux1319 + aux1321))
c Both direct and order encoding.
c Var 'aux1324' order represents '0' with '5446'
c Var 'aux1324' direct represents '0' with '5446'
c Var 'aux1324' order represents '1' with '5447'
-5446 5447 0
c Var 'aux1324' direct represents '1' with '5448'
5446 -5447 5448 0
-5448 5447 0
-5448 -5446 0
c Var 'aux1324' order represents '2' with '5449'
-5447 5449 0
c Var 'aux1324' direct represents '2' with '5450'
5447 -5449 5450 0
-5450 5449 0
-5450 -5447 0
c Var 'aux1324' order represents '3' with '5451'
-5449 5451 0
c Var 'aux1324' direct represents '3' with '5452'
5449 -5451 5452 0
-5452 5451 0
-5452 -5449 0
c Var 'aux1324' direct represents '4' with '-5451'
5446 5448 5450 5452 -5451 0
c Encoding variable: aux1325 with domain: int(0..2) (representing constraint ((x_00008_00001=4) + (x_00008_00009=4)))
c Both direct and order encoding.
c Var 'aux1325' order represents '0' with '5453'
c Var 'aux1325' direct represents '0' with '5453'
c Var 'aux1325' order represents '1' with '5454'
-5453 5454 0
c Var 'aux1325' direct represents '1' with '5455'
5453 -5454 5455 0
-5455 5454 0
-5455 -5453 0
c Var 'aux1325' direct represents '2' with '-5454'
5453 5455 -5454 0
c Encoding variable: aux1326 with domain: int(0..2) (representing constraint ((x_00008_00008=4) + (x_00008_00002=4)))
c Both direct and order encoding.
c Var 'aux1326' order represents '0' with '5456'
c Var 'aux1326' direct represents '0' with '5456'
c Var 'aux1326' order represents '1' with '5457'
-5456 5457 0
c Var 'aux1326' direct represents '1' with '5458'
5456 -5457 5458 0
-5458 5457 0
-5458 -5456 0
c Var 'aux1326' direct represents '2' with '-5457'
5456 5458 -5457 0
c Encoding variable: aux1327 with domain: int(0..2) (representing constraint ((x_00008_00007=4) + (x_00008_00004=4)))
c Both direct and order encoding.
c Var 'aux1327' order represents '0' with '5459'
c Var 'aux1327' direct represents '0' with '5459'
c Var 'aux1327' order represents '1' with '5460'
-5459 5460 0
c Var 'aux1327' direct represents '1' with '5461'
5459 -5460 5461 0
-5461 5460 0
-5461 -5459 0
c Var 'aux1327' direct represents '2' with '-5460'
5459 5461 -5460 0
c Encoding variable: aux1328 with domain: int(0..2) (representing constraint ((x_00008_00006=4) + (x_00008_00005=4)))
c Both direct and order encoding.
c Var 'aux1328' order represents '0' with '5462'
c Var 'aux1328' direct represents '0' with '5462'
c Var 'aux1328' order represents '1' with '5463'
-5462 5463 0
c Var 'aux1328' direct represents '1' with '5464'
5462 -5463 5464 0
-5464 5463 0
-5464 -5462 0
c Var 'aux1328' direct represents '2' with '-5463'
5462 5464 -5463 0
c Encoding variable: aux1329 with domain: int(0..3) (representing constraint ((x_00008_00003=4) + aux1328))
c Both direct and order encoding.
c Var 'aux1329' order represents '0' with '5465'
c Var 'aux1329' direct represents '0' with '5465'
c Var 'aux1329' order represents '1' with '5466'
-5465 5466 0
c Var 'aux1329' direct represents '1' with '5467'
5465 -5466 5467 0
-5467 5466 0
-5467 -5465 0
c Var 'aux1329' order represents '2' with '5468'
-5466 5468 0
c Var 'aux1329' direct represents '2' with '5469'
5466 -5468 5469 0
-5469 5468 0
-5469 -5466 0
c Var 'aux1329' direct represents '3' with '-5468'
5465 5467 5469 -5468 0
c Encoding variable: aux1330 with domain: int(0..4) (representing constraint (aux1325 + aux1327))
c Both direct and order encoding.
c Var 'aux1330' order represents '0' with '5470'
c Var 'aux1330' direct represents '0' with '5470'
c Var 'aux1330' order represents '1' with '5471'
-5470 5471 0
c Var 'aux1330' direct represents '1' with '5472'
5470 -5471 5472 0
-5472 5471 0
-5472 -5470 0
c Var 'aux1330' order represents '2' with '5473'
-5471 5473 0
c Var 'aux1330' direct represents '2' with '5474'
5471 -5473 5474 0
-5474 5473 0
-5474 -5471 0
c Var 'aux1330' order represents '3' with '5475'
-5473 5475 0
c Var 'aux1330' direct represents '3' with '5476'
5473 -5475 5476 0
-5476 5475 0
-5476 -5473 0
c Var 'aux1330' direct represents '4' with '-5475'
5470 5472 5474 5476 -5475 0
c Encoding variable: aux1331 with domain: int(0..2) (representing constraint ((x_00008_00001=5) + (x_00008_00009=5)))
c Both direct and order encoding.
c Var 'aux1331' order represents '0' with '5477'
c Var 'aux1331' direct represents '0' with '5477'
c Var 'aux1331' order represents '1' with '5478'
-5477 5478 0
c Var 'aux1331' direct represents '1' with '5479'
5477 -5478 5479 0
-5479 5478 0
-5479 -5477 0
c Var 'aux1331' direct represents '2' with '-5478'
5477 5479 -5478 0
c Encoding variable: aux1332 with domain: int(0..2) (representing constraint ((x_00008_00008=5) + (x_00008_00002=5)))
c Both direct and order encoding.
c Var 'aux1332' order represents '0' with '5480'
c Var 'aux1332' direct represents '0' with '5480'
c Var 'aux1332' order represents '1' with '5481'
-5480 5481 0
c Var 'aux1332' direct represents '1' with '5482'
5480 -5481 5482 0
-5482 5481 0
-5482 -5480 0
c Var 'aux1332' direct represents '2' with '-5481'
5480 5482 -5481 0
c Encoding variable: aux1333 with domain: int(0..2) (representing constraint ((x_00008_00007=5) + (x_00008_00004=5)))
c Both direct and order encoding.
c Var 'aux1333' order represents '0' with '5483'
c Var 'aux1333' direct represents '0' with '5483'
c Var 'aux1333' order represents '1' with '5484'
-5483 5484 0
c Var 'aux1333' direct represents '1' with '5485'
5483 -5484 5485 0
-5485 5484 0
-5485 -5483 0
c Var 'aux1333' direct represents '2' with '-5484'
5483 5485 -5484 0
c Encoding variable: aux1334 with domain: int(0..2) (representing constraint ((x_00008_00006=5) + (x_00008_00005=5)))
c Both direct and order encoding.
c Var 'aux1334' order represents '0' with '5486'
c Var 'aux1334' direct represents '0' with '5486'
c Var 'aux1334' order represents '1' with '5487'
-5486 5487 0
c Var 'aux1334' direct represents '1' with '5488'
5486 -5487 5488 0
-5488 5487 0
-5488 -5486 0
c Var 'aux1334' direct represents '2' with '-5487'
5486 5488 -5487 0
c Encoding variable: aux1335 with domain: int(0..3) (representing constraint ((x_00008_00003=5) + aux1334))
c Both direct and order encoding.
c Var 'aux1335' order represents '0' with '5489'
c Var 'aux1335' direct represents '0' with '5489'
c Var 'aux1335' order represents '1' with '5490'
-5489 5490 0
c Var 'aux1335' direct represents '1' with '5491'
5489 -5490 5491 0
-5491 5490 0
-5491 -5489 0
c Var 'aux1335' order represents '2' with '5492'
-5490 5492 0
c Var 'aux1335' direct represents '2' with '5493'
5490 -5492 5493 0
-5493 5492 0
-5493 -5490 0
c Var 'aux1335' direct represents '3' with '-5492'
5489 5491 5493 -5492 0
c Encoding variable: aux1336 with domain: int(0..4) (representing constraint (aux1331 + aux1333))
c Both direct and order encoding.
c Var 'aux1336' order represents '0' with '5494'
c Var 'aux1336' direct represents '0' with '5494'
c Var 'aux1336' order represents '1' with '5495'
-5494 5495 0
c Var 'aux1336' direct represents '1' with '5496'
5494 -5495 5496 0
-5496 5495 0
-5496 -5494 0
c Var 'aux1336' order represents '2' with '5497'
-5495 5497 0
c Var 'aux1336' direct represents '2' with '5498'
5495 -5497 5498 0
-5498 5497 0
-5498 -5495 0
c Var 'aux1336' order represents '3' with '5499'
-5497 5499 0
c Var 'aux1336' direct represents '3' with '5500'
5497 -5499 5500 0
-5500 5499 0
-5500 -5497 0
c Var 'aux1336' direct represents '4' with '-5499'
5494 5496 5498 5500 -5499 0
c Encoding variable: aux1337 with domain: int(0..2) (representing constraint ((x_00008_00001=6) + (x_00008_00009=6)))
c Both direct and order encoding.
c Var 'aux1337' order represents '0' with '5501'
c Var 'aux1337' direct represents '0' with '5501'
c Var 'aux1337' order represents '1' with '5502'
-5501 5502 0
c Var 'aux1337' direct represents '1' with '5503'
5501 -5502 5503 0
-5503 5502 0
-5503 -5501 0
c Var 'aux1337' direct represents '2' with '-5502'
5501 5503 -5502 0
c Encoding variable: aux1338 with domain: int(0..2) (representing constraint ((x_00008_00008=6) + (x_00008_00002=6)))
c Both direct and order encoding.
c Var 'aux1338' order represents '0' with '5504'
c Var 'aux1338' direct represents '0' with '5504'
c Var 'aux1338' order represents '1' with '5505'
-5504 5505 0
c Var 'aux1338' direct represents '1' with '5506'
5504 -5505 5506 0
-5506 5505 0
-5506 -5504 0
c Var 'aux1338' direct represents '2' with '-5505'
5504 5506 -5505 0
c Encoding variable: aux1339 with domain: int(0..2) (representing constraint ((x_00008_00007=6) + (x_00008_00004=6)))
c Both direct and order encoding.
c Var 'aux1339' order represents '0' with '5507'
c Var 'aux1339' direct represents '0' with '5507'
c Var 'aux1339' order represents '1' with '5508'
-5507 5508 0
c Var 'aux1339' direct represents '1' with '5509'
5507 -5508 5509 0
-5509 5508 0
-5509 -5507 0
c Var 'aux1339' direct represents '2' with '-5508'
5507 5509 -5508 0
c Encoding variable: aux1340 with domain: int(0..2) (representing constraint ((x_00008_00006=6) + (x_00008_00005=6)))
c Both direct and order encoding.
c Var 'aux1340' order represents '0' with '5510'
c Var 'aux1340' direct represents '0' with '5510'
c Var 'aux1340' order represents '1' with '5511'
-5510 5511 0
c Var 'aux1340' direct represents '1' with '5512'
5510 -5511 5512 0
-5512 5511 0
-5512 -5510 0
c Var 'aux1340' direct represents '2' with '-5511'
5510 5512 -5511 0
c Encoding variable: aux1341 with domain: int(0..3) (representing constraint ((x_00008_00003=6) + aux1340))
c Both direct and order encoding.
c Var 'aux1341' order represents '0' with '5513'
c Var 'aux1341' direct represents '0' with '5513'
c Var 'aux1341' order represents '1' with '5514'
-5513 5514 0
c Var 'aux1341' direct represents '1' with '5515'
5513 -5514 5515 0
-5515 5514 0
-5515 -5513 0
c Var 'aux1341' order represents '2' with '5516'
-5514 5516 0
c Var 'aux1341' direct represents '2' with '5517'
5514 -5516 5517 0
-5517 5516 0
-5517 -5514 0
c Var 'aux1341' direct represents '3' with '-5516'
5513 5515 5517 -5516 0
c Encoding variable: aux1342 with domain: int(0..4) (representing constraint (aux1337 + aux1339))
c Both direct and order encoding.
c Var 'aux1342' order represents '0' with '5518'
c Var 'aux1342' direct represents '0' with '5518'
c Var 'aux1342' order represents '1' with '5519'
-5518 5519 0
c Var 'aux1342' direct represents '1' with '5520'
5518 -5519 5520 0
-5520 5519 0
-5520 -5518 0
c Var 'aux1342' order represents '2' with '5521'
-5519 5521 0
c Var 'aux1342' direct represents '2' with '5522'
5519 -5521 5522 0
-5522 5521 0
-5522 -5519 0
c Var 'aux1342' order represents '3' with '5523'
-5521 5523 0
c Var 'aux1342' direct represents '3' with '5524'
5521 -5523 5524 0
-5524 5523 0
-5524 -5521 0
c Var 'aux1342' direct represents '4' with '-5523'
5518 5520 5522 5524 -5523 0
c Encoding variable: aux1343 with domain: int(0..2) (representing constraint ((x_00008_00001=7) + (x_00008_00009=7)))
c Both direct and order encoding.
c Var 'aux1343' order represents '0' with '5525'
c Var 'aux1343' direct represents '0' with '5525'
c Var 'aux1343' order represents '1' with '5526'
-5525 5526 0
c Var 'aux1343' direct represents '1' with '5527'
5525 -5526 5527 0
-5527 5526 0
-5527 -5525 0
c Var 'aux1343' direct represents '2' with '-5526'
5525 5527 -5526 0
c Encoding variable: aux1344 with domain: int(0..2) (representing constraint ((x_00008_00008=7) + (x_00008_00002=7)))
c Both direct and order encoding.
c Var 'aux1344' order represents '0' with '5528'
c Var 'aux1344' direct represents '0' with '5528'
c Var 'aux1344' order represents '1' with '5529'
-5528 5529 0
c Var 'aux1344' direct represents '1' with '5530'
5528 -5529 5530 0
-5530 5529 0
-5530 -5528 0
c Var 'aux1344' direct represents '2' with '-5529'
5528 5530 -5529 0
c Encoding variable: aux1345 with domain: int(0..2) (representing constraint ((x_00008_00007=7) + (x_00008_00004=7)))
c Both direct and order encoding.
c Var 'aux1345' order represents '0' with '5531'
c Var 'aux1345' direct represents '0' with '5531'
c Var 'aux1345' order represents '1' with '5532'
-5531 5532 0
c Var 'aux1345' direct represents '1' with '5533'
5531 -5532 5533 0
-5533 5532 0
-5533 -5531 0
c Var 'aux1345' direct represents '2' with '-5532'
5531 5533 -5532 0
c Encoding variable: aux1346 with domain: int(0..2) (representing constraint ((x_00008_00006=7) + (x_00008_00005=7)))
c Both direct and order encoding.
c Var 'aux1346' order represents '0' with '5534'
c Var 'aux1346' direct represents '0' with '5534'
c Var 'aux1346' order represents '1' with '5535'
-5534 5535 0
c Var 'aux1346' direct represents '1' with '5536'
5534 -5535 5536 0
-5536 5535 0
-5536 -5534 0
c Var 'aux1346' direct represents '2' with '-5535'
5534 5536 -5535 0
c Encoding variable: aux1347 with domain: int(0..3) (representing constraint ((x_00008_00003=7) + aux1346))
c Both direct and order encoding.
c Var 'aux1347' order represents '0' with '5537'
c Var 'aux1347' direct represents '0' with '5537'
c Var 'aux1347' order represents '1' with '5538'
-5537 5538 0
c Var 'aux1347' direct represents '1' with '5539'
5537 -5538 5539 0
-5539 5538 0
-5539 -5537 0
c Var 'aux1347' order represents '2' with '5540'
-5538 5540 0
c Var 'aux1347' direct represents '2' with '5541'
5538 -5540 5541 0
-5541 5540 0
-5541 -5538 0
c Var 'aux1347' direct represents '3' with '-5540'
5537 5539 5541 -5540 0
c Encoding variable: aux1348 with domain: int(0..4) (representing constraint (aux1343 + aux1345))
c Both direct and order encoding.
c Var 'aux1348' order represents '0' with '5542'
c Var 'aux1348' direct represents '0' with '5542'
c Var 'aux1348' order represents '1' with '5543'
-5542 5543 0
c Var 'aux1348' direct represents '1' with '5544'
5542 -5543 5544 0
-5544 5543 0
-5544 -5542 0
c Var 'aux1348' order represents '2' with '5545'
-5543 5545 0
c Var 'aux1348' direct represents '2' with '5546'
5543 -5545 5546 0
-5546 5545 0
-5546 -5543 0
c Var 'aux1348' order represents '3' with '5547'
-5545 5547 0
c Var 'aux1348' direct represents '3' with '5548'
5545 -5547 5548 0
-5548 5547 0
-5548 -5545 0
c Var 'aux1348' direct represents '4' with '-5547'
5542 5544 5546 5548 -5547 0
c Encoding variable: aux1349 with domain: int(0..2) (representing constraint ((x_00008_00001=8) + (x_00008_00009=8)))
c Both direct and order encoding.
c Var 'aux1349' order represents '0' with '5549'
c Var 'aux1349' direct represents '0' with '5549'
c Var 'aux1349' order represents '1' with '5550'
-5549 5550 0
c Var 'aux1349' direct represents '1' with '5551'
5549 -5550 5551 0
-5551 5550 0
-5551 -5549 0
c Var 'aux1349' direct represents '2' with '-5550'
5549 5551 -5550 0
c Encoding variable: aux1350 with domain: int(0..2) (representing constraint ((x_00008_00008=8) + (x_00008_00002=8)))
c Both direct and order encoding.
c Var 'aux1350' order represents '0' with '5552'
c Var 'aux1350' direct represents '0' with '5552'
c Var 'aux1350' order represents '1' with '5553'
-5552 5553 0
c Var 'aux1350' direct represents '1' with '5554'
5552 -5553 5554 0
-5554 5553 0
-5554 -5552 0
c Var 'aux1350' direct represents '2' with '-5553'
5552 5554 -5553 0
c Encoding variable: aux1351 with domain: int(0..2) (representing constraint ((x_00008_00007=8) + (x_00008_00004=8)))
c Both direct and order encoding.
c Var 'aux1351' order represents '0' with '5555'
c Var 'aux1351' direct represents '0' with '5555'
c Var 'aux1351' order represents '1' with '5556'
-5555 5556 0
c Var 'aux1351' direct represents '1' with '5557'
5555 -5556 5557 0
-5557 5556 0
-5557 -5555 0
c Var 'aux1351' direct represents '2' with '-5556'
5555 5557 -5556 0
c Encoding variable: aux1352 with domain: int(0..2) (representing constraint ((x_00008_00006=8) + (x_00008_00005=8)))
c Both direct and order encoding.
c Var 'aux1352' order represents '0' with '5558'
c Var 'aux1352' direct represents '0' with '5558'
c Var 'aux1352' order represents '1' with '5559'
-5558 5559 0
c Var 'aux1352' direct represents '1' with '5560'
5558 -5559 5560 0
-5560 5559 0
-5560 -5558 0
c Var 'aux1352' direct represents '2' with '-5559'
5558 5560 -5559 0
c Encoding variable: aux1353 with domain: int(0..3) (representing constraint ((x_00008_00003=8) + aux1352))
c Both direct and order encoding.
c Var 'aux1353' order represents '0' with '5561'
c Var 'aux1353' direct represents '0' with '5561'
c Var 'aux1353' order represents '1' with '5562'
-5561 5562 0
c Var 'aux1353' direct represents '1' with '5563'
5561 -5562 5563 0
-5563 5562 0
-5563 -5561 0
c Var 'aux1353' order represents '2' with '5564'
-5562 5564 0
c Var 'aux1353' direct represents '2' with '5565'
5562 -5564 5565 0
-5565 5564 0
-5565 -5562 0
c Var 'aux1353' direct represents '3' with '-5564'
5561 5563 5565 -5564 0
c Encoding variable: aux1354 with domain: int(0..4) (representing constraint (aux1349 + aux1351))
c Both direct and order encoding.
c Var 'aux1354' order represents '0' with '5566'
c Var 'aux1354' direct represents '0' with '5566'
c Var 'aux1354' order represents '1' with '5567'
-5566 5567 0
c Var 'aux1354' direct represents '1' with '5568'
5566 -5567 5568 0
-5568 5567 0
-5568 -5566 0
c Var 'aux1354' order represents '2' with '5569'
-5567 5569 0
c Var 'aux1354' direct represents '2' with '5570'
5567 -5569 5570 0
-5570 5569 0
-5570 -5567 0
c Var 'aux1354' order represents '3' with '5571'
-5569 5571 0
c Var 'aux1354' direct represents '3' with '5572'
5569 -5571 5572 0
-5572 5571 0
-5572 -5569 0
c Var 'aux1354' direct represents '4' with '-5571'
5566 5568 5570 5572 -5571 0
c Encoding variable: aux1355 with domain: int(0..2) (representing constraint ((x_00008_00001=9) + (x_00008_00009=9)))
c Both direct and order encoding.
c Var 'aux1355' order represents '0' with '5573'
c Var 'aux1355' direct represents '0' with '5573'
c Var 'aux1355' order represents '1' with '5574'
-5573 5574 0
c Var 'aux1355' direct represents '1' with '5575'
5573 -5574 5575 0
-5575 5574 0
-5575 -5573 0
c Var 'aux1355' direct represents '2' with '-5574'
5573 5575 -5574 0
c Encoding variable: aux1356 with domain: int(0..2) (representing constraint ((x_00008_00008=9) + (x_00008_00002=9)))
c Both direct and order encoding.
c Var 'aux1356' order represents '0' with '5576'
c Var 'aux1356' direct represents '0' with '5576'
c Var 'aux1356' order represents '1' with '5577'
-5576 5577 0
c Var 'aux1356' direct represents '1' with '5578'
5576 -5577 5578 0
-5578 5577 0
-5578 -5576 0
c Var 'aux1356' direct represents '2' with '-5577'
5576 5578 -5577 0
c Encoding variable: aux1357 with domain: int(0..2) (representing constraint ((x_00008_00007=9) + (x_00008_00004=9)))
c Both direct and order encoding.
c Var 'aux1357' order represents '0' with '5579'
c Var 'aux1357' direct represents '0' with '5579'
c Var 'aux1357' order represents '1' with '5580'
-5579 5580 0
c Var 'aux1357' direct represents '1' with '5581'
5579 -5580 5581 0
-5581 5580 0
-5581 -5579 0
c Var 'aux1357' direct represents '2' with '-5580'
5579 5581 -5580 0
c Encoding variable: aux1358 with domain: int(0..2) (representing constraint ((x_00008_00006=9) + (x_00008_00005=9)))
c Both direct and order encoding.
c Var 'aux1358' order represents '0' with '5582'
c Var 'aux1358' direct represents '0' with '5582'
c Var 'aux1358' order represents '1' with '5583'
-5582 5583 0
c Var 'aux1358' direct represents '1' with '5584'
5582 -5583 5584 0
-5584 5583 0
-5584 -5582 0
c Var 'aux1358' direct represents '2' with '-5583'
5582 5584 -5583 0
c Encoding variable: aux1359 with domain: int(0..3) (representing constraint ((x_00008_00003=9) + aux1358))
c Both direct and order encoding.
c Var 'aux1359' order represents '0' with '5585'
c Var 'aux1359' direct represents '0' with '5585'
c Var 'aux1359' order represents '1' with '5586'
-5585 5586 0
c Var 'aux1359' direct represents '1' with '5587'
5585 -5586 5587 0
-5587 5586 0
-5587 -5585 0
c Var 'aux1359' order represents '2' with '5588'
-5586 5588 0
c Var 'aux1359' direct represents '2' with '5589'
5586 -5588 5589 0
-5589 5588 0
-5589 -5586 0
c Var 'aux1359' direct represents '3' with '-5588'
5585 5587 5589 -5588 0
c Encoding variable: aux1360 with domain: int(0..4) (representing constraint (aux1355 + aux1357))
c Both direct and order encoding.
c Var 'aux1360' order represents '0' with '5590'
c Var 'aux1360' direct represents '0' with '5590'
c Var 'aux1360' order represents '1' with '5591'
-5590 5591 0
c Var 'aux1360' direct represents '1' with '5592'
5590 -5591 5592 0
-5592 5591 0
-5592 -5590 0
c Var 'aux1360' order represents '2' with '5593'
-5591 5593 0
c Var 'aux1360' direct represents '2' with '5594'
5591 -5593 5594 0
-5594 5593 0
-5594 -5591 0
c Var 'aux1360' order represents '3' with '5595'
-5593 5595 0
c Var 'aux1360' direct represents '3' with '5596'
5593 -5595 5596 0
-5596 5595 0
-5596 -5593 0
c Var 'aux1360' direct represents '4' with '-5595'
5590 5592 5594 5596 -5595 0
c Encoding variable: aux1361 with domain: int(0..2) (representing constraint ((x_00009_00001=1) + (x_00009_00009=1)))
c Both direct and order encoding.
c Var 'aux1361' order represents '0' with '5597'
c Var 'aux1361' direct represents '0' with '5597'
c Var 'aux1361' order represents '1' with '5598'
-5597 5598 0
c Var 'aux1361' direct represents '1' with '5599'
5597 -5598 5599 0
-5599 5598 0
-5599 -5597 0
c Var 'aux1361' direct represents '2' with '-5598'
5597 5599 -5598 0
c Encoding variable: aux1362 with domain: int(0..2) (representing constraint ((x_00009_00008=1) + (x_00009_00002=1)))
c Both direct and order encoding.
c Var 'aux1362' order represents '0' with '5600'
c Var 'aux1362' direct represents '0' with '5600'
c Var 'aux1362' order represents '1' with '5601'
-5600 5601 0
c Var 'aux1362' direct represents '1' with '5602'
5600 -5601 5602 0
-5602 5601 0
-5602 -5600 0
c Var 'aux1362' direct represents '2' with '-5601'
5600 5602 -5601 0
c Encoding variable: aux1363 with domain: int(0..2) (representing constraint ((x_00009_00007=1) + (x_00009_00004=1)))
c Both direct and order encoding.
c Var 'aux1363' order represents '0' with '5603'
c Var 'aux1363' direct represents '0' with '5603'
c Var 'aux1363' order represents '1' with '5604'
-5603 5604 0
c Var 'aux1363' direct represents '1' with '5605'
5603 -5604 5605 0
-5605 5604 0
-5605 -5603 0
c Var 'aux1363' direct represents '2' with '-5604'
5603 5605 -5604 0
c Encoding variable: aux1364 with domain: int(0..2) (representing constraint ((x_00009_00006=1) + (x_00009_00005=1)))
c Both direct and order encoding.
c Var 'aux1364' order represents '0' with '5606'
c Var 'aux1364' direct represents '0' with '5606'
c Var 'aux1364' order represents '1' with '5607'
-5606 5607 0
c Var 'aux1364' direct represents '1' with '5608'
5606 -5607 5608 0
-5608 5607 0
-5608 -5606 0
c Var 'aux1364' direct represents '2' with '-5607'
5606 5608 -5607 0
c Encoding variable: aux1365 with domain: int(0..3) (representing constraint ((x_00009_00003=1) + aux1364))
c Both direct and order encoding.
c Var 'aux1365' order represents '0' with '5609'
c Var 'aux1365' direct represents '0' with '5609'
c Var 'aux1365' order represents '1' with '5610'
-5609 5610 0
c Var 'aux1365' direct represents '1' with '5611'
5609 -5610 5611 0
-5611 5610 0
-5611 -5609 0
c Var 'aux1365' order represents '2' with '5612'
-5610 5612 0
c Var 'aux1365' direct represents '2' with '5613'
5610 -5612 5613 0
-5613 5612 0
-5613 -5610 0
c Var 'aux1365' direct represents '3' with '-5612'
5609 5611 5613 -5612 0
c Encoding variable: aux1366 with domain: int(0..4) (representing constraint (aux1361 + aux1363))
c Both direct and order encoding.
c Var 'aux1366' order represents '0' with '5614'
c Var 'aux1366' direct represents '0' with '5614'
c Var 'aux1366' order represents '1' with '5615'
-5614 5615 0
c Var 'aux1366' direct represents '1' with '5616'
5614 -5615 5616 0
-5616 5615 0
-5616 -5614 0
c Var 'aux1366' order represents '2' with '5617'
-5615 5617 0
c Var 'aux1366' direct represents '2' with '5618'
5615 -5617 5618 0
-5618 5617 0
-5618 -5615 0
c Var 'aux1366' order represents '3' with '5619'
-5617 5619 0
c Var 'aux1366' direct represents '3' with '5620'
5617 -5619 5620 0
-5620 5619 0
-5620 -5617 0
c Var 'aux1366' direct represents '4' with '-5619'
5614 5616 5618 5620 -5619 0
c Encoding variable: aux1367 with domain: int(0..2) (representing constraint ((x_00009_00001=2) + (x_00009_00009=2)))
c Both direct and order encoding.
c Var 'aux1367' order represents '0' with '5621'
c Var 'aux1367' direct represents '0' with '5621'
c Var 'aux1367' order represents '1' with '5622'
-5621 5622 0
c Var 'aux1367' direct represents '1' with '5623'
5621 -5622 5623 0
-5623 5622 0
-5623 -5621 0
c Var 'aux1367' direct represents '2' with '-5622'
5621 5623 -5622 0
c Encoding variable: aux1368 with domain: int(0..2) (representing constraint ((x_00009_00008=2) + (x_00009_00002=2)))
c Both direct and order encoding.
c Var 'aux1368' order represents '0' with '5624'
c Var 'aux1368' direct represents '0' with '5624'
c Var 'aux1368' order represents '1' with '5625'
-5624 5625 0
c Var 'aux1368' direct represents '1' with '5626'
5624 -5625 5626 0
-5626 5625 0
-5626 -5624 0
c Var 'aux1368' direct represents '2' with '-5625'
5624 5626 -5625 0
c Encoding variable: aux1369 with domain: int(0..2) (representing constraint ((x_00009_00007=2) + (x_00009_00004=2)))
c Both direct and order encoding.
c Var 'aux1369' order represents '0' with '5627'
c Var 'aux1369' direct represents '0' with '5627'
c Var 'aux1369' order represents '1' with '5628'
-5627 5628 0
c Var 'aux1369' direct represents '1' with '5629'
5627 -5628 5629 0
-5629 5628 0
-5629 -5627 0
c Var 'aux1369' direct represents '2' with '-5628'
5627 5629 -5628 0
c Encoding variable: aux1370 with domain: int(0..2) (representing constraint ((x_00009_00006=2) + (x_00009_00005=2)))
c Both direct and order encoding.
c Var 'aux1370' order represents '0' with '5630'
c Var 'aux1370' direct represents '0' with '5630'
c Var 'aux1370' order represents '1' with '5631'
-5630 5631 0
c Var 'aux1370' direct represents '1' with '5632'
5630 -5631 5632 0
-5632 5631 0
-5632 -5630 0
c Var 'aux1370' direct represents '2' with '-5631'
5630 5632 -5631 0
c Encoding variable: aux1371 with domain: int(0..3) (representing constraint ((x_00009_00003=2) + aux1370))
c Both direct and order encoding.
c Var 'aux1371' order represents '0' with '5633'
c Var 'aux1371' direct represents '0' with '5633'
c Var 'aux1371' order represents '1' with '5634'
-5633 5634 0
c Var 'aux1371' direct represents '1' with '5635'
5633 -5634 5635 0
-5635 5634 0
-5635 -5633 0
c Var 'aux1371' order represents '2' with '5636'
-5634 5636 0
c Var 'aux1371' direct represents '2' with '5637'
5634 -5636 5637 0
-5637 5636 0
-5637 -5634 0
c Var 'aux1371' direct represents '3' with '-5636'
5633 5635 5637 -5636 0
c Encoding variable: aux1372 with domain: int(0..4) (representing constraint (aux1367 + aux1369))
c Both direct and order encoding.
c Var 'aux1372' order represents '0' with '5638'
c Var 'aux1372' direct represents '0' with '5638'
c Var 'aux1372' order represents '1' with '5639'
-5638 5639 0
c Var 'aux1372' direct represents '1' with '5640'
5638 -5639 5640 0
-5640 5639 0
-5640 -5638 0
c Var 'aux1372' order represents '2' with '5641'
-5639 5641 0
c Var 'aux1372' direct represents '2' with '5642'
5639 -5641 5642 0
-5642 5641 0
-5642 -5639 0
c Var 'aux1372' order represents '3' with '5643'
-5641 5643 0
c Var 'aux1372' direct represents '3' with '5644'
5641 -5643 5644 0
-5644 5643 0
-5644 -5641 0
c Var 'aux1372' direct represents '4' with '-5643'
5638 5640 5642 5644 -5643 0
c Encoding variable: aux1373 with domain: int(0..2) (representing constraint ((x_00009_00001=3) + (x_00009_00009=3)))
c Both direct and order encoding.
c Var 'aux1373' order represents '0' with '5645'
c Var 'aux1373' direct represents '0' with '5645'
c Var 'aux1373' order represents '1' with '5646'
-5645 5646 0
c Var 'aux1373' direct represents '1' with '5647'
5645 -5646 5647 0
-5647 5646 0
-5647 -5645 0
c Var 'aux1373' direct represents '2' with '-5646'
5645 5647 -5646 0
c Encoding variable: aux1374 with domain: int(0..2) (representing constraint ((x_00009_00008=3) + (x_00009_00002=3)))
c Both direct and order encoding.
c Var 'aux1374' order represents '0' with '5648'
c Var 'aux1374' direct represents '0' with '5648'
c Var 'aux1374' order represents '1' with '5649'
-5648 5649 0
c Var 'aux1374' direct represents '1' with '5650'
5648 -5649 5650 0
-5650 5649 0
-5650 -5648 0
c Var 'aux1374' direct represents '2' with '-5649'
5648 5650 -5649 0
c Encoding variable: aux1375 with domain: int(0..2) (representing constraint ((x_00009_00007=3) + (x_00009_00004=3)))
c Both direct and order encoding.
c Var 'aux1375' order represents '0' with '5651'
c Var 'aux1375' direct represents '0' with '5651'
c Var 'aux1375' order represents '1' with '5652'
-5651 5652 0
c Var 'aux1375' direct represents '1' with '5653'
5651 -5652 5653 0
-5653 5652 0
-5653 -5651 0
c Var 'aux1375' direct represents '2' with '-5652'
5651 5653 -5652 0
c Encoding variable: aux1376 with domain: int(0..2) (representing constraint ((x_00009_00006=3) + (x_00009_00005=3)))
c Both direct and order encoding.
c Var 'aux1376' order represents '0' with '5654'
c Var 'aux1376' direct represents '0' with '5654'
c Var 'aux1376' order represents '1' with '5655'
-5654 5655 0
c Var 'aux1376' direct represents '1' with '5656'
5654 -5655 5656 0
-5656 5655 0
-5656 -5654 0
c Var 'aux1376' direct represents '2' with '-5655'
5654 5656 -5655 0
c Encoding variable: aux1377 with domain: int(0..3) (representing constraint ((x_00009_00003=3) + aux1376))
c Both direct and order encoding.
c Var 'aux1377' order represents '0' with '5657'
c Var 'aux1377' direct represents '0' with '5657'
c Var 'aux1377' order represents '1' with '5658'
-5657 5658 0
c Var 'aux1377' direct represents '1' with '5659'
5657 -5658 5659 0
-5659 5658 0
-5659 -5657 0
c Var 'aux1377' order represents '2' with '5660'
-5658 5660 0
c Var 'aux1377' direct represents '2' with '5661'
5658 -5660 5661 0
-5661 5660 0
-5661 -5658 0
c Var 'aux1377' direct represents '3' with '-5660'
5657 5659 5661 -5660 0
c Encoding variable: aux1378 with domain: int(0..4) (representing constraint (aux1373 + aux1375))
c Both direct and order encoding.
c Var 'aux1378' order represents '0' with '5662'
c Var 'aux1378' direct represents '0' with '5662'
c Var 'aux1378' order represents '1' with '5663'
-5662 5663 0
c Var 'aux1378' direct represents '1' with '5664'
5662 -5663 5664 0
-5664 5663 0
-5664 -5662 0
c Var 'aux1378' order represents '2' with '5665'
-5663 5665 0
c Var 'aux1378' direct represents '2' with '5666'
5663 -5665 5666 0
-5666 5665 0
-5666 -5663 0
c Var 'aux1378' order represents '3' with '5667'
-5665 5667 0
c Var 'aux1378' direct represents '3' with '5668'
5665 -5667 5668 0
-5668 5667 0
-5668 -5665 0
c Var 'aux1378' direct represents '4' with '-5667'
5662 5664 5666 5668 -5667 0
c Encoding variable: aux1379 with domain: int(0..2) (representing constraint ((x_00009_00001=4) + (x_00009_00009=4)))
c Both direct and order encoding.
c Var 'aux1379' order represents '0' with '5669'
c Var 'aux1379' direct represents '0' with '5669'
c Var 'aux1379' order represents '1' with '5670'
-5669 5670 0
c Var 'aux1379' direct represents '1' with '5671'
5669 -5670 5671 0
-5671 5670 0
-5671 -5669 0
c Var 'aux1379' direct represents '2' with '-5670'
5669 5671 -5670 0
c Encoding variable: aux1380 with domain: int(0..2) (representing constraint ((x_00009_00008=4) + (x_00009_00002=4)))
c Both direct and order encoding.
c Var 'aux1380' order represents '0' with '5672'
c Var 'aux1380' direct represents '0' with '5672'
c Var 'aux1380' order represents '1' with '5673'
-5672 5673 0
c Var 'aux1380' direct represents '1' with '5674'
5672 -5673 5674 0
-5674 5673 0
-5674 -5672 0
c Var 'aux1380' direct represents '2' with '-5673'
5672 5674 -5673 0
c Encoding variable: aux1381 with domain: int(0..2) (representing constraint ((x_00009_00007=4) + (x_00009_00004=4)))
c Both direct and order encoding.
c Var 'aux1381' order represents '0' with '5675'
c Var 'aux1381' direct represents '0' with '5675'
c Var 'aux1381' order represents '1' with '5676'
-5675 5676 0
c Var 'aux1381' direct represents '1' with '5677'
5675 -5676 5677 0
-5677 5676 0
-5677 -5675 0
c Var 'aux1381' direct represents '2' with '-5676'
5675 5677 -5676 0
c Encoding variable: aux1382 with domain: int(0..2) (representing constraint ((x_00009_00006=4) + (x_00009_00005=4)))
c Both direct and order encoding.
c Var 'aux1382' order represents '0' with '5678'
c Var 'aux1382' direct represents '0' with '5678'
c Var 'aux1382' order represents '1' with '5679'
-5678 5679 0
c Var 'aux1382' direct represents '1' with '5680'
5678 -5679 5680 0
-5680 5679 0
-5680 -5678 0
c Var 'aux1382' direct represents '2' with '-5679'
5678 5680 -5679 0
c Encoding variable: aux1383 with domain: int(0..3) (representing constraint ((x_00009_00003=4) + aux1382))
c Both direct and order encoding.
c Var 'aux1383' order represents '0' with '5681'
c Var 'aux1383' direct represents '0' with '5681'
c Var 'aux1383' order represents '1' with '5682'
-5681 5682 0
c Var 'aux1383' direct represents '1' with '5683'
5681 -5682 5683 0
-5683 5682 0
-5683 -5681 0
c Var 'aux1383' order represents '2' with '5684'
-5682 5684 0
c Var 'aux1383' direct represents '2' with '5685'
5682 -5684 5685 0
-5685 5684 0
-5685 -5682 0
c Var 'aux1383' direct represents '3' with '-5684'
5681 5683 5685 -5684 0
c Encoding variable: aux1384 with domain: int(0..4) (representing constraint (aux1379 + aux1381))
c Both direct and order encoding.
c Var 'aux1384' order represents '0' with '5686'
c Var 'aux1384' direct represents '0' with '5686'
c Var 'aux1384' order represents '1' with '5687'
-5686 5687 0
c Var 'aux1384' direct represents '1' with '5688'
5686 -5687 5688 0
-5688 5687 0
-5688 -5686 0
c Var 'aux1384' order represents '2' with '5689'
-5687 5689 0
c Var 'aux1384' direct represents '2' with '5690'
5687 -5689 5690 0
-5690 5689 0
-5690 -5687 0
c Var 'aux1384' order represents '3' with '5691'
-5689 5691 0
c Var 'aux1384' direct represents '3' with '5692'
5689 -5691 5692 0
-5692 5691 0
-5692 -5689 0
c Var 'aux1384' direct represents '4' with '-5691'
5686 5688 5690 5692 -5691 0
c Encoding variable: aux1385 with domain: int(0..2) (representing constraint ((x_00009_00001=5) + (x_00009_00009=5)))
c Both direct and order encoding.
c Var 'aux1385' order represents '0' with '5693'
c Var 'aux1385' direct represents '0' with '5693'
c Var 'aux1385' order represents '1' with '5694'
-5693 5694 0
c Var 'aux1385' direct represents '1' with '5695'
5693 -5694 5695 0
-5695 5694 0
-5695 -5693 0
c Var 'aux1385' direct represents '2' with '-5694'
5693 5695 -5694 0
c Encoding variable: aux1386 with domain: int(0..2) (representing constraint ((x_00009_00008=5) + (x_00009_00002=5)))
c Both direct and order encoding.
c Var 'aux1386' order represents '0' with '5696'
c Var 'aux1386' direct represents '0' with '5696'
c Var 'aux1386' order represents '1' with '5697'
-5696 5697 0
c Var 'aux1386' direct represents '1' with '5698'
5696 -5697 5698 0
-5698 5697 0
-5698 -5696 0
c Var 'aux1386' direct represents '2' with '-5697'
5696 5698 -5697 0
c Encoding variable: aux1387 with domain: int(0..2) (representing constraint ((x_00009_00007=5) + (x_00009_00004=5)))
c Both direct and order encoding.
c Var 'aux1387' order represents '0' with '5699'
c Var 'aux1387' direct represents '0' with '5699'
c Var 'aux1387' order represents '1' with '5700'
-5699 5700 0
c Var 'aux1387' direct represents '1' with '5701'
5699 -5700 5701 0
-5701 5700 0
-5701 -5699 0
c Var 'aux1387' direct represents '2' with '-5700'
5699 5701 -5700 0
c Encoding variable: aux1388 with domain: int(0..2) (representing constraint ((x_00009_00006=5) + (x_00009_00005=5)))
c Both direct and order encoding.
c Var 'aux1388' order represents '0' with '5702'
c Var 'aux1388' direct represents '0' with '5702'
c Var 'aux1388' order represents '1' with '5703'
-5702 5703 0
c Var 'aux1388' direct represents '1' with '5704'
5702 -5703 5704 0
-5704 5703 0
-5704 -5702 0
c Var 'aux1388' direct represents '2' with '-5703'
5702 5704 -5703 0
c Encoding variable: aux1389 with domain: int(0..3) (representing constraint ((x_00009_00003=5) + aux1388))
c Both direct and order encoding.
c Var 'aux1389' order represents '0' with '5705'
c Var 'aux1389' direct represents '0' with '5705'
c Var 'aux1389' order represents '1' with '5706'
-5705 5706 0
c Var 'aux1389' direct represents '1' with '5707'
5705 -5706 5707 0
-5707 5706 0
-5707 -5705 0
c Var 'aux1389' order represents '2' with '5708'
-5706 5708 0
c Var 'aux1389' direct represents '2' with '5709'
5706 -5708 5709 0
-5709 5708 0
-5709 -5706 0
c Var 'aux1389' direct represents '3' with '-5708'
5705 5707 5709 -5708 0
c Encoding variable: aux1390 with domain: int(0..4) (representing constraint (aux1385 + aux1387))
c Both direct and order encoding.
c Var 'aux1390' order represents '0' with '5710'
c Var 'aux1390' direct represents '0' with '5710'
c Var 'aux1390' order represents '1' with '5711'
-5710 5711 0
c Var 'aux1390' direct represents '1' with '5712'
5710 -5711 5712 0
-5712 5711 0
-5712 -5710 0
c Var 'aux1390' order represents '2' with '5713'
-5711 5713 0
c Var 'aux1390' direct represents '2' with '5714'
5711 -5713 5714 0
-5714 5713 0
-5714 -5711 0
c Var 'aux1390' order represents '3' with '5715'
-5713 5715 0
c Var 'aux1390' direct represents '3' with '5716'
5713 -5715 5716 0
-5716 5715 0
-5716 -5713 0
c Var 'aux1390' direct represents '4' with '-5715'
5710 5712 5714 5716 -5715 0
c Encoding variable: aux1391 with domain: int(0..2) (representing constraint ((x_00009_00001=6) + (x_00009_00009=6)))
c Both direct and order encoding.
c Var 'aux1391' order represents '0' with '5717'
c Var 'aux1391' direct represents '0' with '5717'
c Var 'aux1391' order represents '1' with '5718'
-5717 5718 0
c Var 'aux1391' direct represents '1' with '5719'
5717 -5718 5719 0
-5719 5718 0
-5719 -5717 0
c Var 'aux1391' direct represents '2' with '-5718'
5717 5719 -5718 0
c Encoding variable: aux1392 with domain: int(0..2) (representing constraint ((x_00009_00008=6) + (x_00009_00002=6)))
c Both direct and order encoding.
c Var 'aux1392' order represents '0' with '5720'
c Var 'aux1392' direct represents '0' with '5720'
c Var 'aux1392' order represents '1' with '5721'
-5720 5721 0
c Var 'aux1392' direct represents '1' with '5722'
5720 -5721 5722 0
-5722 5721 0
-5722 -5720 0
c Var 'aux1392' direct represents '2' with '-5721'
5720 5722 -5721 0
c Encoding variable: aux1393 with domain: int(0..2) (representing constraint ((x_00009_00007=6) + (x_00009_00004=6)))
c Both direct and order encoding.
c Var 'aux1393' order represents '0' with '5723'
c Var 'aux1393' direct represents '0' with '5723'
c Var 'aux1393' order represents '1' with '5724'
-5723 5724 0
c Var 'aux1393' direct represents '1' with '5725'
5723 -5724 5725 0
-5725 5724 0
-5725 -5723 0
c Var 'aux1393' direct represents '2' with '-5724'
5723 5725 -5724 0
c Encoding variable: aux1394 with domain: int(0..2) (representing constraint ((x_00009_00006=6) + (x_00009_00005=6)))
c Both direct and order encoding.
c Var 'aux1394' order represents '0' with '5726'
c Var 'aux1394' direct represents '0' with '5726'
c Var 'aux1394' order represents '1' with '5727'
-5726 5727 0
c Var 'aux1394' direct represents '1' with '5728'
5726 -5727 5728 0
-5728 5727 0
-5728 -5726 0
c Var 'aux1394' direct represents '2' with '-5727'
5726 5728 -5727 0
c Encoding variable: aux1395 with domain: int(0..3) (representing constraint ((x_00009_00003=6) + aux1394))
c Both direct and order encoding.
c Var 'aux1395' order represents '0' with '5729'
c Var 'aux1395' direct represents '0' with '5729'
c Var 'aux1395' order represents '1' with '5730'
-5729 5730 0
c Var 'aux1395' direct represents '1' with '5731'
5729 -5730 5731 0
-5731 5730 0
-5731 -5729 0
c Var 'aux1395' order represents '2' with '5732'
-5730 5732 0
c Var 'aux1395' direct represents '2' with '5733'
5730 -5732 5733 0
-5733 5732 0
-5733 -5730 0
c Var 'aux1395' direct represents '3' with '-5732'
5729 5731 5733 -5732 0
c Encoding variable: aux1396 with domain: int(0..4) (representing constraint (aux1391 + aux1393))
c Both direct and order encoding.
c Var 'aux1396' order represents '0' with '5734'
c Var 'aux1396' direct represents '0' with '5734'
c Var 'aux1396' order represents '1' with '5735'
-5734 5735 0
c Var 'aux1396' direct represents '1' with '5736'
5734 -5735 5736 0
-5736 5735 0
-5736 -5734 0
c Var 'aux1396' order represents '2' with '5737'
-5735 5737 0
c Var 'aux1396' direct represents '2' with '5738'
5735 -5737 5738 0
-5738 5737 0
-5738 -5735 0
c Var 'aux1396' order represents '3' with '5739'
-5737 5739 0
c Var 'aux1396' direct represents '3' with '5740'
5737 -5739 5740 0
-5740 5739 0
-5740 -5737 0
c Var 'aux1396' direct represents '4' with '-5739'
5734 5736 5738 5740 -5739 0
c Encoding variable: aux1397 with domain: int(0..2) (representing constraint ((x_00009_00001=7) + (x_00009_00009=7)))
c Both direct and order encoding.
c Var 'aux1397' order represents '0' with '5741'
c Var 'aux1397' direct represents '0' with '5741'
c Var 'aux1397' order represents '1' with '5742'
-5741 5742 0
c Var 'aux1397' direct represents '1' with '5743'
5741 -5742 5743 0
-5743 5742 0
-5743 -5741 0
c Var 'aux1397' direct represents '2' with '-5742'
5741 5743 -5742 0
c Encoding variable: aux1398 with domain: int(0..2) (representing constraint ((x_00009_00008=7) + (x_00009_00002=7)))
c Both direct and order encoding.
c Var 'aux1398' order represents '0' with '5744'
c Var 'aux1398' direct represents '0' with '5744'
c Var 'aux1398' order represents '1' with '5745'
-5744 5745 0
c Var 'aux1398' direct represents '1' with '5746'
5744 -5745 5746 0
-5746 5745 0
-5746 -5744 0
c Var 'aux1398' direct represents '2' with '-5745'
5744 5746 -5745 0
c Encoding variable: aux1399 with domain: int(0..2) (representing constraint ((x_00009_00007=7) + (x_00009_00004=7)))
c Both direct and order encoding.
c Var 'aux1399' order represents '0' with '5747'
c Var 'aux1399' direct represents '0' with '5747'
c Var 'aux1399' order represents '1' with '5748'
-5747 5748 0
c Var 'aux1399' direct represents '1' with '5749'
5747 -5748 5749 0
-5749 5748 0
-5749 -5747 0
c Var 'aux1399' direct represents '2' with '-5748'
5747 5749 -5748 0
c Encoding variable: aux1400 with domain: int(0..2) (representing constraint ((x_00009_00006=7) + (x_00009_00005=7)))
c Both direct and order encoding.
c Var 'aux1400' order represents '0' with '5750'
c Var 'aux1400' direct represents '0' with '5750'
c Var 'aux1400' order represents '1' with '5751'
-5750 5751 0
c Var 'aux1400' direct represents '1' with '5752'
5750 -5751 5752 0
-5752 5751 0
-5752 -5750 0
c Var 'aux1400' direct represents '2' with '-5751'
5750 5752 -5751 0
c Encoding variable: aux1401 with domain: int(0..3) (representing constraint ((x_00009_00003=7) + aux1400))
c Both direct and order encoding.
c Var 'aux1401' order represents '0' with '5753'
c Var 'aux1401' direct represents '0' with '5753'
c Var 'aux1401' order represents '1' with '5754'
-5753 5754 0
c Var 'aux1401' direct represents '1' with '5755'
5753 -5754 5755 0
-5755 5754 0
-5755 -5753 0
c Var 'aux1401' order represents '2' with '5756'
-5754 5756 0
c Var 'aux1401' direct represents '2' with '5757'
5754 -5756 5757 0
-5757 5756 0
-5757 -5754 0
c Var 'aux1401' direct represents '3' with '-5756'
5753 5755 5757 -5756 0
c Encoding variable: aux1402 with domain: int(0..4) (representing constraint (aux1397 + aux1399))
c Both direct and order encoding.
c Var 'aux1402' order represents '0' with '5758'
c Var 'aux1402' direct represents '0' with '5758'
c Var 'aux1402' order represents '1' with '5759'
-5758 5759 0
c Var 'aux1402' direct represents '1' with '5760'
5758 -5759 5760 0
-5760 5759 0
-5760 -5758 0
c Var 'aux1402' order represents '2' with '5761'
-5759 5761 0
c Var 'aux1402' direct represents '2' with '5762'
5759 -5761 5762 0
-5762 5761 0
-5762 -5759 0
c Var 'aux1402' order represents '3' with '5763'
-5761 5763 0
c Var 'aux1402' direct represents '3' with '5764'
5761 -5763 5764 0
-5764 5763 0
-5764 -5761 0
c Var 'aux1402' direct represents '4' with '-5763'
5758 5760 5762 5764 -5763 0
c Encoding variable: aux1403 with domain: int(0..2) (representing constraint ((x_00009_00001=8) + (x_00009_00009=8)))
c Both direct and order encoding.
c Var 'aux1403' order represents '0' with '5765'
c Var 'aux1403' direct represents '0' with '5765'
c Var 'aux1403' order represents '1' with '5766'
-5765 5766 0
c Var 'aux1403' direct represents '1' with '5767'
5765 -5766 5767 0
-5767 5766 0
-5767 -5765 0
c Var 'aux1403' direct represents '2' with '-5766'
5765 5767 -5766 0
c Encoding variable: aux1404 with domain: int(0..2) (representing constraint ((x_00009_00008=8) + (x_00009_00002=8)))
c Both direct and order encoding.
c Var 'aux1404' order represents '0' with '5768'
c Var 'aux1404' direct represents '0' with '5768'
c Var 'aux1404' order represents '1' with '5769'
-5768 5769 0
c Var 'aux1404' direct represents '1' with '5770'
5768 -5769 5770 0
-5770 5769 0
-5770 -5768 0
c Var 'aux1404' direct represents '2' with '-5769'
5768 5770 -5769 0
c Encoding variable: aux1405 with domain: int(0..2) (representing constraint ((x_00009_00007=8) + (x_00009_00004=8)))
c Both direct and order encoding.
c Var 'aux1405' order represents '0' with '5771'
c Var 'aux1405' direct represents '0' with '5771'
c Var 'aux1405' order represents '1' with '5772'
-5771 5772 0
c Var 'aux1405' direct represents '1' with '5773'
5771 -5772 5773 0
-5773 5772 0
-5773 -5771 0
c Var 'aux1405' direct represents '2' with '-5772'
5771 5773 -5772 0
c Encoding variable: aux1406 with domain: int(0..2) (representing constraint ((x_00009_00006=8) + (x_00009_00005=8)))
c Both direct and order encoding.
c Var 'aux1406' order represents '0' with '5774'
c Var 'aux1406' direct represents '0' with '5774'
c Var 'aux1406' order represents '1' with '5775'
-5774 5775 0
c Var 'aux1406' direct represents '1' with '5776'
5774 -5775 5776 0
-5776 5775 0
-5776 -5774 0
c Var 'aux1406' direct represents '2' with '-5775'
5774 5776 -5775 0
c Encoding variable: aux1407 with domain: int(0..3) (representing constraint ((x_00009_00003=8) + aux1406))
c Both direct and order encoding.
c Var 'aux1407' order represents '0' with '5777'
c Var 'aux1407' direct represents '0' with '5777'
c Var 'aux1407' order represents '1' with '5778'
-5777 5778 0
c Var 'aux1407' direct represents '1' with '5779'
5777 -5778 5779 0
-5779 5778 0
-5779 -5777 0
c Var 'aux1407' order represents '2' with '5780'
-5778 5780 0
c Var 'aux1407' direct represents '2' with '5781'
5778 -5780 5781 0
-5781 5780 0
-5781 -5778 0
c Var 'aux1407' direct represents '3' with '-5780'
5777 5779 5781 -5780 0
c Encoding variable: aux1408 with domain: int(0..4) (representing constraint (aux1403 + aux1405))
c Both direct and order encoding.
c Var 'aux1408' order represents '0' with '5782'
c Var 'aux1408' direct represents '0' with '5782'
c Var 'aux1408' order represents '1' with '5783'
-5782 5783 0
c Var 'aux1408' direct represents '1' with '5784'
5782 -5783 5784 0
-5784 5783 0
-5784 -5782 0
c Var 'aux1408' order represents '2' with '5785'
-5783 5785 0
c Var 'aux1408' direct represents '2' with '5786'
5783 -5785 5786 0
-5786 5785 0
-5786 -5783 0
c Var 'aux1408' order represents '3' with '5787'
-5785 5787 0
c Var 'aux1408' direct represents '3' with '5788'
5785 -5787 5788 0
-5788 5787 0
-5788 -5785 0
c Var 'aux1408' direct represents '4' with '-5787'
5782 5784 5786 5788 -5787 0
c Encoding variable: aux1409 with domain: int(0..2) (representing constraint ((x_00009_00001=9) + (x_00009_00009=9)))
c Both direct and order encoding.
c Var 'aux1409' order represents '0' with '5789'
c Var 'aux1409' direct represents '0' with '5789'
c Var 'aux1409' order represents '1' with '5790'
-5789 5790 0
c Var 'aux1409' direct represents '1' with '5791'
5789 -5790 5791 0
-5791 5790 0
-5791 -5789 0
c Var 'aux1409' direct represents '2' with '-5790'
5789 5791 -5790 0
c Encoding variable: aux1410 with domain: int(0..2) (representing constraint ((x_00009_00008=9) + (x_00009_00002=9)))
c Both direct and order encoding.
c Var 'aux1410' order represents '0' with '5792'
c Var 'aux1410' direct represents '0' with '5792'
c Var 'aux1410' order represents '1' with '5793'
-5792 5793 0
c Var 'aux1410' direct represents '1' with '5794'
5792 -5793 5794 0
-5794 5793 0
-5794 -5792 0
c Var 'aux1410' direct represents '2' with '-5793'
5792 5794 -5793 0
c Encoding variable: aux1411 with domain: int(0..2) (representing constraint ((x_00009_00007=9) + (x_00009_00004=9)))
c Both direct and order encoding.
c Var 'aux1411' order represents '0' with '5795'
c Var 'aux1411' direct represents '0' with '5795'
c Var 'aux1411' order represents '1' with '5796'
-5795 5796 0
c Var 'aux1411' direct represents '1' with '5797'
5795 -5796 5797 0
-5797 5796 0
-5797 -5795 0
c Var 'aux1411' direct represents '2' with '-5796'
5795 5797 -5796 0
c Encoding variable: aux1412 with domain: int(0..2) (representing constraint ((x_00009_00006=9) + (x_00009_00005=9)))
c Both direct and order encoding.
c Var 'aux1412' order represents '0' with '5798'
c Var 'aux1412' direct represents '0' with '5798'
c Var 'aux1412' order represents '1' with '5799'
-5798 5799 0
c Var 'aux1412' direct represents '1' with '5800'
5798 -5799 5800 0
-5800 5799 0
-5800 -5798 0
c Var 'aux1412' direct represents '2' with '-5799'
5798 5800 -5799 0
c Encoding variable: aux1413 with domain: int(0..3) (representing constraint ((x_00009_00003=9) + aux1412))
c Both direct and order encoding.
c Var 'aux1413' order represents '0' with '5801'
c Var 'aux1413' direct represents '0' with '5801'
c Var 'aux1413' order represents '1' with '5802'
-5801 5802 0
c Var 'aux1413' direct represents '1' with '5803'
5801 -5802 5803 0
-5803 5802 0
-5803 -5801 0
c Var 'aux1413' order represents '2' with '5804'
-5802 5804 0
c Var 'aux1413' direct represents '2' with '5805'
5802 -5804 5805 0
-5805 5804 0
-5805 -5802 0
c Var 'aux1413' direct represents '3' with '-5804'
5801 5803 5805 -5804 0
c Encoding variable: aux1414 with domain: int(0..4) (representing constraint (aux1409 + aux1411))
c Both direct and order encoding.
c Var 'aux1414' order represents '0' with '5806'
c Var 'aux1414' direct represents '0' with '5806'
c Var 'aux1414' order represents '1' with '5807'
-5806 5807 0
c Var 'aux1414' direct represents '1' with '5808'
5806 -5807 5808 0
-5808 5807 0
-5808 -5806 0
c Var 'aux1414' order represents '2' with '5809'
-5807 5809 0
c Var 'aux1414' direct represents '2' with '5810'
5807 -5809 5810 0
-5810 5809 0
-5810 -5807 0
c Var 'aux1414' order represents '3' with '5811'
-5809 5811 0
c Var 'aux1414' direct represents '3' with '5812'
5809 -5811 5812 0
-5812 5811 0
-5812 -5809 0
c Var 'aux1414' direct represents '4' with '-5811'
5806 5808 5810 5812 -5811 0
c Encoding variable: aux1415 with domain: int(0..2) (representing constraint ((x_00003_00001=1) + (x_00002_00003=1)))
c Both direct and order encoding.
c Var 'aux1415' order represents '0' with '5813'
c Var 'aux1415' direct represents '0' with '5813'
c Var 'aux1415' order represents '1' with '5814'
-5813 5814 0
c Var 'aux1415' direct represents '1' with '5815'
5813 -5814 5815 0
-5815 5814 0
-5815 -5813 0
c Var 'aux1415' direct represents '2' with '-5814'
5813 5815 -5814 0
c Encoding variable: aux1416 with domain: int(0..2) (representing constraint ((x_00002_00002=1) + (x_00003_00002=1)))
c Both direct and order encoding.
c Var 'aux1416' order represents '0' with '5816'
c Var 'aux1416' direct represents '0' with '5816'
c Var 'aux1416' order represents '1' with '5817'
-5816 5817 0
c Var 'aux1416' direct represents '1' with '5818'
5816 -5817 5818 0
-5818 5817 0
-5818 -5816 0
c Var 'aux1416' direct represents '2' with '-5817'
5816 5818 -5817 0
c Encoding variable: aux1417 with domain: int(0..2) (representing constraint ((x_00002_00001=1) + (x_00001_00001=1)))
c Both direct and order encoding.
c Var 'aux1417' order represents '0' with '5819'
c Var 'aux1417' direct represents '0' with '5819'
c Var 'aux1417' order represents '1' with '5820'
-5819 5820 0
c Var 'aux1417' direct represents '1' with '5821'
5819 -5820 5821 0
-5821 5820 0
-5821 -5819 0
c Var 'aux1417' direct represents '2' with '-5820'
5819 5821 -5820 0
c Encoding variable: aux1418 with domain: int(0..2) (representing constraint ((x_00001_00003=1) + (x_00001_00002=1)))
c Both direct and order encoding.
c Var 'aux1418' order represents '0' with '5822'
c Var 'aux1418' direct represents '0' with '5822'
c Var 'aux1418' order represents '1' with '5823'
-5822 5823 0
c Var 'aux1418' direct represents '1' with '5824'
5822 -5823 5824 0
-5824 5823 0
-5824 -5822 0
c Var 'aux1418' direct represents '2' with '-5823'
5822 5824 -5823 0
c Encoding variable: aux1419 with domain: int(0..3) (representing constraint ((x_00003_00003=1) + aux1418))
c Both direct and order encoding.
c Var 'aux1419' order represents '0' with '5825'
c Var 'aux1419' direct represents '0' with '5825'
c Var 'aux1419' order represents '1' with '5826'
-5825 5826 0
c Var 'aux1419' direct represents '1' with '5827'
5825 -5826 5827 0
-5827 5826 0
-5827 -5825 0
c Var 'aux1419' order represents '2' with '5828'
-5826 5828 0
c Var 'aux1419' direct represents '2' with '5829'
5826 -5828 5829 0
-5829 5828 0
-5829 -5826 0
c Var 'aux1419' direct represents '3' with '-5828'
5825 5827 5829 -5828 0
c Encoding variable: aux1420 with domain: int(0..4) (representing constraint (aux1415 + aux1417))
c Both direct and order encoding.
c Var 'aux1420' order represents '0' with '5830'
c Var 'aux1420' direct represents '0' with '5830'
c Var 'aux1420' order represents '1' with '5831'
-5830 5831 0
c Var 'aux1420' direct represents '1' with '5832'
5830 -5831 5832 0
-5832 5831 0
-5832 -5830 0
c Var 'aux1420' order represents '2' with '5833'
-5831 5833 0
c Var 'aux1420' direct represents '2' with '5834'
5831 -5833 5834 0
-5834 5833 0
-5834 -5831 0
c Var 'aux1420' order represents '3' with '5835'
-5833 5835 0
c Var 'aux1420' direct represents '3' with '5836'
5833 -5835 5836 0
-5836 5835 0
-5836 -5833 0
c Var 'aux1420' direct represents '4' with '-5835'
5830 5832 5834 5836 -5835 0
c Encoding variable: aux1421 with domain: int(0..2) (representing constraint ((x_00003_00001=2) + (x_00002_00003=2)))
c Both direct and order encoding.
c Var 'aux1421' order represents '0' with '5837'
c Var 'aux1421' direct represents '0' with '5837'
c Var 'aux1421' order represents '1' with '5838'
-5837 5838 0
c Var 'aux1421' direct represents '1' with '5839'
5837 -5838 5839 0
-5839 5838 0
-5839 -5837 0
c Var 'aux1421' direct represents '2' with '-5838'
5837 5839 -5838 0
c Encoding variable: aux1422 with domain: int(0..2) (representing constraint ((x_00002_00002=2) + (x_00003_00002=2)))
c Both direct and order encoding.
c Var 'aux1422' order represents '0' with '5840'
c Var 'aux1422' direct represents '0' with '5840'
c Var 'aux1422' order represents '1' with '5841'
-5840 5841 0
c Var 'aux1422' direct represents '1' with '5842'
5840 -5841 5842 0
-5842 5841 0
-5842 -5840 0
c Var 'aux1422' direct represents '2' with '-5841'
5840 5842 -5841 0
c Encoding variable: aux1423 with domain: int(0..2) (representing constraint ((x_00002_00001=2) + (x_00001_00001=2)))
c Both direct and order encoding.
c Var 'aux1423' order represents '0' with '5843'
c Var 'aux1423' direct represents '0' with '5843'
c Var 'aux1423' order represents '1' with '5844'
-5843 5844 0
c Var 'aux1423' direct represents '1' with '5845'
5843 -5844 5845 0
-5845 5844 0
-5845 -5843 0
c Var 'aux1423' direct represents '2' with '-5844'
5843 5845 -5844 0
c Encoding variable: aux1424 with domain: int(0..2) (representing constraint ((x_00001_00003=2) + (x_00001_00002=2)))
c Both direct and order encoding.
c Var 'aux1424' order represents '0' with '5846'
c Var 'aux1424' direct represents '0' with '5846'
c Var 'aux1424' order represents '1' with '5847'
-5846 5847 0
c Var 'aux1424' direct represents '1' with '5848'
5846 -5847 5848 0
-5848 5847 0
-5848 -5846 0
c Var 'aux1424' direct represents '2' with '-5847'
5846 5848 -5847 0
c Encoding variable: aux1425 with domain: int(0..3) (representing constraint ((x_00003_00003=2) + aux1424))
c Both direct and order encoding.
c Var 'aux1425' order represents '0' with '5849'
c Var 'aux1425' direct represents '0' with '5849'
c Var 'aux1425' order represents '1' with '5850'
-5849 5850 0
c Var 'aux1425' direct represents '1' with '5851'
5849 -5850 5851 0
-5851 5850 0
-5851 -5849 0
c Var 'aux1425' order represents '2' with '5852'
-5850 5852 0
c Var 'aux1425' direct represents '2' with '5853'
5850 -5852 5853 0
-5853 5852 0
-5853 -5850 0
c Var 'aux1425' direct represents '3' with '-5852'
5849 5851 5853 -5852 0
c Encoding variable: aux1426 with domain: int(0..4) (representing constraint (aux1421 + aux1423))
c Both direct and order encoding.
c Var 'aux1426' order represents '0' with '5854'
c Var 'aux1426' direct represents '0' with '5854'
c Var 'aux1426' order represents '1' with '5855'
-5854 5855 0
c Var 'aux1426' direct represents '1' with '5856'
5854 -5855 5856 0
-5856 5855 0
-5856 -5854 0
c Var 'aux1426' order represents '2' with '5857'
-5855 5857 0
c Var 'aux1426' direct represents '2' with '5858'
5855 -5857 5858 0
-5858 5857 0
-5858 -5855 0
c Var 'aux1426' order represents '3' with '5859'
-5857 5859 0
c Var 'aux1426' direct represents '3' with '5860'
5857 -5859 5860 0
-5860 5859 0
-5860 -5857 0
c Var 'aux1426' direct represents '4' with '-5859'
5854 5856 5858 5860 -5859 0
c Encoding variable: aux1427 with domain: int(0..2) (representing constraint ((x_00003_00001=3) + (x_00002_00003=3)))
c Both direct and order encoding.
c Var 'aux1427' order represents '0' with '5861'
c Var 'aux1427' direct represents '0' with '5861'
c Var 'aux1427' order represents '1' with '5862'
-5861 5862 0
c Var 'aux1427' direct represents '1' with '5863'
5861 -5862 5863 0
-5863 5862 0
-5863 -5861 0
c Var 'aux1427' direct represents '2' with '-5862'
5861 5863 -5862 0
c Encoding variable: aux1428 with domain: int(0..2) (representing constraint ((x_00002_00002=3) + (x_00003_00002=3)))
c Both direct and order encoding.
c Var 'aux1428' order represents '0' with '5864'
c Var 'aux1428' direct represents '0' with '5864'
c Var 'aux1428' order represents '1' with '5865'
-5864 5865 0
c Var 'aux1428' direct represents '1' with '5866'
5864 -5865 5866 0
-5866 5865 0
-5866 -5864 0
c Var 'aux1428' direct represents '2' with '-5865'
5864 5866 -5865 0
c Encoding variable: aux1429 with domain: int(0..2) (representing constraint ((x_00002_00001=3) + (x_00001_00001=3)))
c Both direct and order encoding.
c Var 'aux1429' order represents '0' with '5867'
c Var 'aux1429' direct represents '0' with '5867'
c Var 'aux1429' order represents '1' with '5868'
-5867 5868 0
c Var 'aux1429' direct represents '1' with '5869'
5867 -5868 5869 0
-5869 5868 0
-5869 -5867 0
c Var 'aux1429' direct represents '2' with '-5868'
5867 5869 -5868 0
c Encoding variable: aux1430 with domain: int(0..2) (representing constraint ((x_00001_00003=3) + (x_00001_00002=3)))
c Both direct and order encoding.
c Var 'aux1430' order represents '0' with '5870'
c Var 'aux1430' direct represents '0' with '5870'
c Var 'aux1430' order represents '1' with '5871'
-5870 5871 0
c Var 'aux1430' direct represents '1' with '5872'
5870 -5871 5872 0
-5872 5871 0
-5872 -5870 0
c Var 'aux1430' direct represents '2' with '-5871'
5870 5872 -5871 0
c Encoding variable: aux1431 with domain: int(0..3) (representing constraint ((x_00003_00003=3) + aux1430))
c Both direct and order encoding.
c Var 'aux1431' order represents '0' with '5873'
c Var 'aux1431' direct represents '0' with '5873'
c Var 'aux1431' order represents '1' with '5874'
-5873 5874 0
c Var 'aux1431' direct represents '1' with '5875'
5873 -5874 5875 0
-5875 5874 0
-5875 -5873 0
c Var 'aux1431' order represents '2' with '5876'
-5874 5876 0
c Var 'aux1431' direct represents '2' with '5877'
5874 -5876 5877 0
-5877 5876 0
-5877 -5874 0
c Var 'aux1431' direct represents '3' with '-5876'
5873 5875 5877 -5876 0
c Encoding variable: aux1432 with domain: int(0..4) (representing constraint (aux1427 + aux1429))
c Both direct and order encoding.
c Var 'aux1432' order represents '0' with '5878'
c Var 'aux1432' direct represents '0' with '5878'
c Var 'aux1432' order represents '1' with '5879'
-5878 5879 0
c Var 'aux1432' direct represents '1' with '5880'
5878 -5879 5880 0
-5880 5879 0
-5880 -5878 0
c Var 'aux1432' order represents '2' with '5881'
-5879 5881 0
c Var 'aux1432' direct represents '2' with '5882'
5879 -5881 5882 0
-5882 5881 0
-5882 -5879 0
c Var 'aux1432' order represents '3' with '5883'
-5881 5883 0
c Var 'aux1432' direct represents '3' with '5884'
5881 -5883 5884 0
-5884 5883 0
-5884 -5881 0
c Var 'aux1432' direct represents '4' with '-5883'
5878 5880 5882 5884 -5883 0
c Encoding variable: aux1433 with domain: int(0..2) (representing constraint ((x_00003_00001=4) + (x_00002_00003=4)))
c Both direct and order encoding.
c Var 'aux1433' order represents '0' with '5885'
c Var 'aux1433' direct represents '0' with '5885'
c Var 'aux1433' order represents '1' with '5886'
-5885 5886 0
c Var 'aux1433' direct represents '1' with '5887'
5885 -5886 5887 0
-5887 5886 0
-5887 -5885 0
c Var 'aux1433' direct represents '2' with '-5886'
5885 5887 -5886 0
c Encoding variable: aux1434 with domain: int(0..2) (representing constraint ((x_00002_00002=4) + (x_00003_00002=4)))
c Both direct and order encoding.
c Var 'aux1434' order represents '0' with '5888'
c Var 'aux1434' direct represents '0' with '5888'
c Var 'aux1434' order represents '1' with '5889'
-5888 5889 0
c Var 'aux1434' direct represents '1' with '5890'
5888 -5889 5890 0
-5890 5889 0
-5890 -5888 0
c Var 'aux1434' direct represents '2' with '-5889'
5888 5890 -5889 0
c Encoding variable: aux1435 with domain: int(0..2) (representing constraint ((x_00002_00001=4) + (x_00001_00001=4)))
c Both direct and order encoding.
c Var 'aux1435' order represents '0' with '5891'
c Var 'aux1435' direct represents '0' with '5891'
c Var 'aux1435' order represents '1' with '5892'
-5891 5892 0
c Var 'aux1435' direct represents '1' with '5893'
5891 -5892 5893 0
-5893 5892 0
-5893 -5891 0
c Var 'aux1435' direct represents '2' with '-5892'
5891 5893 -5892 0
c Encoding variable: aux1436 with domain: int(0..2) (representing constraint ((x_00001_00003=4) + (x_00001_00002=4)))
c Both direct and order encoding.
c Var 'aux1436' order represents '0' with '5894'
c Var 'aux1436' direct represents '0' with '5894'
c Var 'aux1436' order represents '1' with '5895'
-5894 5895 0
c Var 'aux1436' direct represents '1' with '5896'
5894 -5895 5896 0
-5896 5895 0
-5896 -5894 0
c Var 'aux1436' direct represents '2' with '-5895'
5894 5896 -5895 0
c Encoding variable: aux1437 with domain: int(0..3) (representing constraint ((x_00003_00003=4) + aux1436))
c Both direct and order encoding.
c Var 'aux1437' order represents '0' with '5897'
c Var 'aux1437' direct represents '0' with '5897'
c Var 'aux1437' order represents '1' with '5898'
-5897 5898 0
c Var 'aux1437' direct represents '1' with '5899'
5897 -5898 5899 0
-5899 5898 0
-5899 -5897 0
c Var 'aux1437' order represents '2' with '5900'
-5898 5900 0
c Var 'aux1437' direct represents '2' with '5901'
5898 -5900 5901 0
-5901 5900 0
-5901 -5898 0
c Var 'aux1437' direct represents '3' with '-5900'
5897 5899 5901 -5900 0
c Encoding variable: aux1438 with domain: int(0..4) (representing constraint (aux1433 + aux1435))
c Both direct and order encoding.
c Var 'aux1438' order represents '0' with '5902'
c Var 'aux1438' direct represents '0' with '5902'
c Var 'aux1438' order represents '1' with '5903'
-5902 5903 0
c Var 'aux1438' direct represents '1' with '5904'
5902 -5903 5904 0
-5904 5903 0
-5904 -5902 0
c Var 'aux1438' order represents '2' with '5905'
-5903 5905 0
c Var 'aux1438' direct represents '2' with '5906'
5903 -5905 5906 0
-5906 5905 0
-5906 -5903 0
c Var 'aux1438' order represents '3' with '5907'
-5905 5907 0
c Var 'aux1438' direct represents '3' with '5908'
5905 -5907 5908 0
-5908 5907 0
-5908 -5905 0
c Var 'aux1438' direct represents '4' with '-5907'
5902 5904 5906 5908 -5907 0
c Encoding variable: aux1439 with domain: int(0..2) (representing constraint ((x_00003_00001=5) + (x_00002_00003=5)))
c Both direct and order encoding.
c Var 'aux1439' order represents '0' with '5909'
c Var 'aux1439' direct represents '0' with '5909'
c Var 'aux1439' order represents '1' with '5910'
-5909 5910 0
c Var 'aux1439' direct represents '1' with '5911'
5909 -5910 5911 0
-5911 5910 0
-5911 -5909 0
c Var 'aux1439' direct represents '2' with '-5910'
5909 5911 -5910 0
c Encoding variable: aux1440 with domain: int(0..2) (representing constraint ((x_00002_00002=5) + (x_00003_00002=5)))
c Both direct and order encoding.
c Var 'aux1440' order represents '0' with '5912'
c Var 'aux1440' direct represents '0' with '5912'
c Var 'aux1440' order represents '1' with '5913'
-5912 5913 0
c Var 'aux1440' direct represents '1' with '5914'
5912 -5913 5914 0
-5914 5913 0
-5914 -5912 0
c Var 'aux1440' direct represents '2' with '-5913'
5912 5914 -5913 0
c Encoding variable: aux1441 with domain: int(0..2) (representing constraint ((x_00002_00001=5) + (x_00001_00001=5)))
c Both direct and order encoding.
c Var 'aux1441' order represents '0' with '5915'
c Var 'aux1441' direct represents '0' with '5915'
c Var 'aux1441' order represents '1' with '5916'
-5915 5916 0
c Var 'aux1441' direct represents '1' with '5917'
5915 -5916 5917 0
-5917 5916 0
-5917 -5915 0
c Var 'aux1441' direct represents '2' with '-5916'
5915 5917 -5916 0
c Encoding variable: aux1442 with domain: int(0..2) (representing constraint ((x_00001_00003=5) + (x_00001_00002=5)))
c Both direct and order encoding.
c Var 'aux1442' order represents '0' with '5918'
c Var 'aux1442' direct represents '0' with '5918'
c Var 'aux1442' order represents '1' with '5919'
-5918 5919 0
c Var 'aux1442' direct represents '1' with '5920'
5918 -5919 5920 0
-5920 5919 0
-5920 -5918 0
c Var 'aux1442' direct represents '2' with '-5919'
5918 5920 -5919 0
c Encoding variable: aux1443 with domain: int(0..3) (representing constraint ((x_00003_00003=5) + aux1442))
c Both direct and order encoding.
c Var 'aux1443' order represents '0' with '5921'
c Var 'aux1443' direct represents '0' with '5921'
c Var 'aux1443' order represents '1' with '5922'
-5921 5922 0
c Var 'aux1443' direct represents '1' with '5923'
5921 -5922 5923 0
-5923 5922 0
-5923 -5921 0
c Var 'aux1443' order represents '2' with '5924'
-5922 5924 0
c Var 'aux1443' direct represents '2' with '5925'
5922 -5924 5925 0
-5925 5924 0
-5925 -5922 0
c Var 'aux1443' direct represents '3' with '-5924'
5921 5923 5925 -5924 0
c Encoding variable: aux1444 with domain: int(0..4) (representing constraint (aux1439 + aux1441))
c Both direct and order encoding.
c Var 'aux1444' order represents '0' with '5926'
c Var 'aux1444' direct represents '0' with '5926'
c Var 'aux1444' order represents '1' with '5927'
-5926 5927 0
c Var 'aux1444' direct represents '1' with '5928'
5926 -5927 5928 0
-5928 5927 0
-5928 -5926 0
c Var 'aux1444' order represents '2' with '5929'
-5927 5929 0
c Var 'aux1444' direct represents '2' with '5930'
5927 -5929 5930 0
-5930 5929 0
-5930 -5927 0
c Var 'aux1444' order represents '3' with '5931'
-5929 5931 0
c Var 'aux1444' direct represents '3' with '5932'
5929 -5931 5932 0
-5932 5931 0
-5932 -5929 0
c Var 'aux1444' direct represents '4' with '-5931'
5926 5928 5930 5932 -5931 0
c Encoding variable: aux1445 with domain: int(0..2) (representing constraint ((x_00003_00001=6) + (x_00002_00003=6)))
c Both direct and order encoding.
c Var 'aux1445' order represents '0' with '5933'
c Var 'aux1445' direct represents '0' with '5933'
c Var 'aux1445' order represents '1' with '5934'
-5933 5934 0
c Var 'aux1445' direct represents '1' with '5935'
5933 -5934 5935 0
-5935 5934 0
-5935 -5933 0
c Var 'aux1445' direct represents '2' with '-5934'
5933 5935 -5934 0
c Encoding variable: aux1446 with domain: int(0..2) (representing constraint ((x_00002_00002=6) + (x_00003_00002=6)))
c Both direct and order encoding.
c Var 'aux1446' order represents '0' with '5936'
c Var 'aux1446' direct represents '0' with '5936'
c Var 'aux1446' order represents '1' with '5937'
-5936 5937 0
c Var 'aux1446' direct represents '1' with '5938'
5936 -5937 5938 0
-5938 5937 0
-5938 -5936 0
c Var 'aux1446' direct represents '2' with '-5937'
5936 5938 -5937 0
c Encoding variable: aux1447 with domain: int(0..2) (representing constraint ((x_00002_00001=6) + (x_00001_00001=6)))
c Both direct and order encoding.
c Var 'aux1447' order represents '0' with '5939'
c Var 'aux1447' direct represents '0' with '5939'
c Var 'aux1447' order represents '1' with '5940'
-5939 5940 0
c Var 'aux1447' direct represents '1' with '5941'
5939 -5940 5941 0
-5941 5940 0
-5941 -5939 0
c Var 'aux1447' direct represents '2' with '-5940'
5939 5941 -5940 0
c Encoding variable: aux1448 with domain: int(0..2) (representing constraint ((x_00001_00003=6) + (x_00001_00002=6)))
c Both direct and order encoding.
c Var 'aux1448' order represents '0' with '5942'
c Var 'aux1448' direct represents '0' with '5942'
c Var 'aux1448' order represents '1' with '5943'
-5942 5943 0
c Var 'aux1448' direct represents '1' with '5944'
5942 -5943 5944 0
-5944 5943 0
-5944 -5942 0
c Var 'aux1448' direct represents '2' with '-5943'
5942 5944 -5943 0
c Encoding variable: aux1449 with domain: int(0..3) (representing constraint ((x_00003_00003=6) + aux1448))
c Both direct and order encoding.
c Var 'aux1449' order represents '0' with '5945'
c Var 'aux1449' direct represents '0' with '5945'
c Var 'aux1449' order represents '1' with '5946'
-5945 5946 0
c Var 'aux1449' direct represents '1' with '5947'
5945 -5946 5947 0
-5947 5946 0
-5947 -5945 0
c Var 'aux1449' order represents '2' with '5948'
-5946 5948 0
c Var 'aux1449' direct represents '2' with '5949'
5946 -5948 5949 0
-5949 5948 0
-5949 -5946 0
c Var 'aux1449' direct represents '3' with '-5948'
5945 5947 5949 -5948 0
c Encoding variable: aux1450 with domain: int(0..4) (representing constraint (aux1445 + aux1447))
c Both direct and order encoding.
c Var 'aux1450' order represents '0' with '5950'
c Var 'aux1450' direct represents '0' with '5950'
c Var 'aux1450' order represents '1' with '5951'
-5950 5951 0
c Var 'aux1450' direct represents '1' with '5952'
5950 -5951 5952 0
-5952 5951 0
-5952 -5950 0
c Var 'aux1450' order represents '2' with '5953'
-5951 5953 0
c Var 'aux1450' direct represents '2' with '5954'
5951 -5953 5954 0
-5954 5953 0
-5954 -5951 0
c Var 'aux1450' order represents '3' with '5955'
-5953 5955 0
c Var 'aux1450' direct represents '3' with '5956'
5953 -5955 5956 0
-5956 5955 0
-5956 -5953 0
c Var 'aux1450' direct represents '4' with '-5955'
5950 5952 5954 5956 -5955 0
c Encoding variable: aux1451 with domain: int(0..2) (representing constraint ((x_00003_00001=7) + (x_00002_00003=7)))
c Both direct and order encoding.
c Var 'aux1451' order represents '0' with '5957'
c Var 'aux1451' direct represents '0' with '5957'
c Var 'aux1451' order represents '1' with '5958'
-5957 5958 0
c Var 'aux1451' direct represents '1' with '5959'
5957 -5958 5959 0
-5959 5958 0
-5959 -5957 0
c Var 'aux1451' direct represents '2' with '-5958'
5957 5959 -5958 0
c Encoding variable: aux1452 with domain: int(0..2) (representing constraint ((x_00002_00002=7) + (x_00003_00002=7)))
c Both direct and order encoding.
c Var 'aux1452' order represents '0' with '5960'
c Var 'aux1452' direct represents '0' with '5960'
c Var 'aux1452' order represents '1' with '5961'
-5960 5961 0
c Var 'aux1452' direct represents '1' with '5962'
5960 -5961 5962 0
-5962 5961 0
-5962 -5960 0
c Var 'aux1452' direct represents '2' with '-5961'
5960 5962 -5961 0
c Encoding variable: aux1453 with domain: int(0..2) (representing constraint ((x_00002_00001=7) + (x_00001_00001=7)))
c Both direct and order encoding.
c Var 'aux1453' order represents '0' with '5963'
c Var 'aux1453' direct represents '0' with '5963'
c Var 'aux1453' order represents '1' with '5964'
-5963 5964 0
c Var 'aux1453' direct represents '1' with '5965'
5963 -5964 5965 0
-5965 5964 0
-5965 -5963 0
c Var 'aux1453' direct represents '2' with '-5964'
5963 5965 -5964 0
c Encoding variable: aux1454 with domain: int(0..2) (representing constraint ((x_00001_00003=7) + (x_00001_00002=7)))
c Both direct and order encoding.
c Var 'aux1454' order represents '0' with '5966'
c Var 'aux1454' direct represents '0' with '5966'
c Var 'aux1454' order represents '1' with '5967'
-5966 5967 0
c Var 'aux1454' direct represents '1' with '5968'
5966 -5967 5968 0
-5968 5967 0
-5968 -5966 0
c Var 'aux1454' direct represents '2' with '-5967'
5966 5968 -5967 0
c Encoding variable: aux1455 with domain: int(0..3) (representing constraint ((x_00003_00003=7) + aux1454))
c Both direct and order encoding.
c Var 'aux1455' order represents '0' with '5969'
c Var 'aux1455' direct represents '0' with '5969'
c Var 'aux1455' order represents '1' with '5970'
-5969 5970 0
c Var 'aux1455' direct represents '1' with '5971'
5969 -5970 5971 0
-5971 5970 0
-5971 -5969 0
c Var 'aux1455' order represents '2' with '5972'
-5970 5972 0
c Var 'aux1455' direct represents '2' with '5973'
5970 -5972 5973 0
-5973 5972 0
-5973 -5970 0
c Var 'aux1455' direct represents '3' with '-5972'
5969 5971 5973 -5972 0
c Encoding variable: aux1456 with domain: int(0..4) (representing constraint (aux1451 + aux1453))
c Both direct and order encoding.
c Var 'aux1456' order represents '0' with '5974'
c Var 'aux1456' direct represents '0' with '5974'
c Var 'aux1456' order represents '1' with '5975'
-5974 5975 0
c Var 'aux1456' direct represents '1' with '5976'
5974 -5975 5976 0
-5976 5975 0
-5976 -5974 0
c Var 'aux1456' order represents '2' with '5977'
-5975 5977 0
c Var 'aux1456' direct represents '2' with '5978'
5975 -5977 5978 0
-5978 5977 0
-5978 -5975 0
c Var 'aux1456' order represents '3' with '5979'
-5977 5979 0
c Var 'aux1456' direct represents '3' with '5980'
5977 -5979 5980 0
-5980 5979 0
-5980 -5977 0
c Var 'aux1456' direct represents '4' with '-5979'
5974 5976 5978 5980 -5979 0
c Encoding variable: aux1457 with domain: int(0..2) (representing constraint ((x_00003_00001=8) + (x_00002_00003=8)))
c Both direct and order encoding.
c Var 'aux1457' order represents '0' with '5981'
c Var 'aux1457' direct represents '0' with '5981'
c Var 'aux1457' order represents '1' with '5982'
-5981 5982 0
c Var 'aux1457' direct represents '1' with '5983'
5981 -5982 5983 0
-5983 5982 0
-5983 -5981 0
c Var 'aux1457' direct represents '2' with '-5982'
5981 5983 -5982 0
c Encoding variable: aux1458 with domain: int(0..2) (representing constraint ((x_00002_00002=8) + (x_00003_00002=8)))
c Both direct and order encoding.
c Var 'aux1458' order represents '0' with '5984'
c Var 'aux1458' direct represents '0' with '5984'
c Var 'aux1458' order represents '1' with '5985'
-5984 5985 0
c Var 'aux1458' direct represents '1' with '5986'
5984 -5985 5986 0
-5986 5985 0
-5986 -5984 0
c Var 'aux1458' direct represents '2' with '-5985'
5984 5986 -5985 0
c Encoding variable: aux1459 with domain: int(0..2) (representing constraint ((x_00002_00001=8) + (x_00001_00001=8)))
c Both direct and order encoding.
c Var 'aux1459' order represents '0' with '5987'
c Var 'aux1459' direct represents '0' with '5987'
c Var 'aux1459' order represents '1' with '5988'
-5987 5988 0
c Var 'aux1459' direct represents '1' with '5989'
5987 -5988 5989 0
-5989 5988 0
-5989 -5987 0
c Var 'aux1459' direct represents '2' with '-5988'
5987 5989 -5988 0
c Encoding variable: aux1460 with domain: int(0..2) (representing constraint ((x_00001_00003=8) + (x_00001_00002=8)))
c Both direct and order encoding.
c Var 'aux1460' order represents '0' with '5990'
c Var 'aux1460' direct represents '0' with '5990'
c Var 'aux1460' order represents '1' with '5991'
-5990 5991 0
c Var 'aux1460' direct represents '1' with '5992'
5990 -5991 5992 0
-5992 5991 0
-5992 -5990 0
c Var 'aux1460' direct represents '2' with '-5991'
5990 5992 -5991 0
c Encoding variable: aux1461 with domain: int(0..3) (representing constraint ((x_00003_00003=8) + aux1460))
c Both direct and order encoding.
c Var 'aux1461' order represents '0' with '5993'
c Var 'aux1461' direct represents '0' with '5993'
c Var 'aux1461' order represents '1' with '5994'
-5993 5994 0
c Var 'aux1461' direct represents '1' with '5995'
5993 -5994 5995 0
-5995 5994 0
-5995 -5993 0
c Var 'aux1461' order represents '2' with '5996'
-5994 5996 0
c Var 'aux1461' direct represents '2' with '5997'
5994 -5996 5997 0
-5997 5996 0
-5997 -5994 0
c Var 'aux1461' direct represents '3' with '-5996'
5993 5995 5997 -5996 0
c Encoding variable: aux1462 with domain: int(0..4) (representing constraint (aux1457 + aux1459))
c Both direct and order encoding.
c Var 'aux1462' order represents '0' with '5998'
c Var 'aux1462' direct represents '0' with '5998'
c Var 'aux1462' order represents '1' with '5999'
-5998 5999 0
c Var 'aux1462' direct represents '1' with '6000'
5998 -5999 6000 0
-6000 5999 0
-6000 -5998 0
c Var 'aux1462' order represents '2' with '6001'
-5999 6001 0
c Var 'aux1462' direct represents '2' with '6002'
5999 -6001 6002 0
-6002 6001 0
-6002 -5999 0
c Var 'aux1462' order represents '3' with '6003'
-6001 6003 0
c Var 'aux1462' direct represents '3' with '6004'
6001 -6003 6004 0
-6004 6003 0
-6004 -6001 0
c Var 'aux1462' direct represents '4' with '-6003'
5998 6000 6002 6004 -6003 0
c Encoding variable: aux1463 with domain: int(0..2) (representing constraint ((x_00003_00001=9) + (x_00002_00003=9)))
c Both direct and order encoding.
c Var 'aux1463' order represents '0' with '6005'
c Var 'aux1463' direct represents '0' with '6005'
c Var 'aux1463' order represents '1' with '6006'
-6005 6006 0
c Var 'aux1463' direct represents '1' with '6007'
6005 -6006 6007 0
-6007 6006 0
-6007 -6005 0
c Var 'aux1463' direct represents '2' with '-6006'
6005 6007 -6006 0
c Encoding variable: aux1464 with domain: int(0..2) (representing constraint ((x_00002_00002=9) + (x_00003_00002=9)))
c Both direct and order encoding.
c Var 'aux1464' order represents '0' with '6008'
c Var 'aux1464' direct represents '0' with '6008'
c Var 'aux1464' order represents '1' with '6009'
-6008 6009 0
c Var 'aux1464' direct represents '1' with '6010'
6008 -6009 6010 0
-6010 6009 0
-6010 -6008 0
c Var 'aux1464' direct represents '2' with '-6009'
6008 6010 -6009 0
c Encoding variable: aux1465 with domain: int(0..2) (representing constraint ((x_00002_00001=9) + (x_00001_00001=9)))
c Both direct and order encoding.
c Var 'aux1465' order represents '0' with '6011'
c Var 'aux1465' direct represents '0' with '6011'
c Var 'aux1465' order represents '1' with '6012'
-6011 6012 0
c Var 'aux1465' direct represents '1' with '6013'
6011 -6012 6013 0
-6013 6012 0
-6013 -6011 0
c Var 'aux1465' direct represents '2' with '-6012'
6011 6013 -6012 0
c Encoding variable: aux1466 with domain: int(0..2) (representing constraint ((x_00001_00003=9) + (x_00001_00002=9)))
c Both direct and order encoding.
c Var 'aux1466' order represents '0' with '6014'
c Var 'aux1466' direct represents '0' with '6014'
c Var 'aux1466' order represents '1' with '6015'
-6014 6015 0
c Var 'aux1466' direct represents '1' with '6016'
6014 -6015 6016 0
-6016 6015 0
-6016 -6014 0
c Var 'aux1466' direct represents '2' with '-6015'
6014 6016 -6015 0
c Encoding variable: aux1467 with domain: int(0..3) (representing constraint ((x_00003_00003=9) + aux1466))
c Both direct and order encoding.
c Var 'aux1467' order represents '0' with '6017'
c Var 'aux1467' direct represents '0' with '6017'
c Var 'aux1467' order represents '1' with '6018'
-6017 6018 0
c Var 'aux1467' direct represents '1' with '6019'
6017 -6018 6019 0
-6019 6018 0
-6019 -6017 0
c Var 'aux1467' order represents '2' with '6020'
-6018 6020 0
c Var 'aux1467' direct represents '2' with '6021'
6018 -6020 6021 0
-6021 6020 0
-6021 -6018 0
c Var 'aux1467' direct represents '3' with '-6020'
6017 6019 6021 -6020 0
c Encoding variable: aux1468 with domain: int(0..4) (representing constraint (aux1463 + aux1465))
c Both direct and order encoding.
c Var 'aux1468' order represents '0' with '6022'
c Var 'aux1468' direct represents '0' with '6022'
c Var 'aux1468' order represents '1' with '6023'
-6022 6023 0
c Var 'aux1468' direct represents '1' with '6024'
6022 -6023 6024 0
-6024 6023 0
-6024 -6022 0
c Var 'aux1468' order represents '2' with '6025'
-6023 6025 0
c Var 'aux1468' direct represents '2' with '6026'
6023 -6025 6026 0
-6026 6025 0
-6026 -6023 0
c Var 'aux1468' order represents '3' with '6027'
-6025 6027 0
c Var 'aux1468' direct represents '3' with '6028'
6025 -6027 6028 0
-6028 6027 0
-6028 -6025 0
c Var 'aux1468' direct represents '4' with '-6027'
6022 6024 6026 6028 -6027 0
c Encoding variable: aux1469 with domain: int(0..2) (representing constraint ((x_00003_00004=1) + (x_00002_00006=1)))
c Both direct and order encoding.
c Var 'aux1469' order represents '0' with '6029'
c Var 'aux1469' direct represents '0' with '6029'
c Var 'aux1469' order represents '1' with '6030'
-6029 6030 0
c Var 'aux1469' direct represents '1' with '6031'
6029 -6030 6031 0
-6031 6030 0
-6031 -6029 0
c Var 'aux1469' direct represents '2' with '-6030'
6029 6031 -6030 0
c Encoding variable: aux1470 with domain: int(0..2) (representing constraint ((x_00002_00005=1) + (x_00003_00005=1)))
c Both direct and order encoding.
c Var 'aux1470' order represents '0' with '6032'
c Var 'aux1470' direct represents '0' with '6032'
c Var 'aux1470' order represents '1' with '6033'
-6032 6033 0
c Var 'aux1470' direct represents '1' with '6034'
6032 -6033 6034 0
-6034 6033 0
-6034 -6032 0
c Var 'aux1470' direct represents '2' with '-6033'
6032 6034 -6033 0
c Encoding variable: aux1471 with domain: int(0..2) (representing constraint ((x_00002_00004=1) + (x_00001_00004=1)))
c Both direct and order encoding.
c Var 'aux1471' order represents '0' with '6035'
c Var 'aux1471' direct represents '0' with '6035'
c Var 'aux1471' order represents '1' with '6036'
-6035 6036 0
c Var 'aux1471' direct represents '1' with '6037'
6035 -6036 6037 0
-6037 6036 0
-6037 -6035 0
c Var 'aux1471' direct represents '2' with '-6036'
6035 6037 -6036 0
c Encoding variable: aux1472 with domain: int(0..2) (representing constraint ((x_00001_00006=1) + (x_00001_00005=1)))
c Both direct and order encoding.
c Var 'aux1472' order represents '0' with '6038'
c Var 'aux1472' direct represents '0' with '6038'
c Var 'aux1472' order represents '1' with '6039'
-6038 6039 0
c Var 'aux1472' direct represents '1' with '6040'
6038 -6039 6040 0
-6040 6039 0
-6040 -6038 0
c Var 'aux1472' direct represents '2' with '-6039'
6038 6040 -6039 0
c Encoding variable: aux1473 with domain: int(0..3) (representing constraint ((x_00003_00006=1) + aux1472))
c Both direct and order encoding.
c Var 'aux1473' order represents '0' with '6041'
c Var 'aux1473' direct represents '0' with '6041'
c Var 'aux1473' order represents '1' with '6042'
-6041 6042 0
c Var 'aux1473' direct represents '1' with '6043'
6041 -6042 6043 0
-6043 6042 0
-6043 -6041 0
c Var 'aux1473' order represents '2' with '6044'
-6042 6044 0
c Var 'aux1473' direct represents '2' with '6045'
6042 -6044 6045 0
-6045 6044 0
-6045 -6042 0
c Var 'aux1473' direct represents '3' with '-6044'
6041 6043 6045 -6044 0
c Encoding variable: aux1474 with domain: int(0..4) (representing constraint (aux1469 + aux1471))
c Both direct and order encoding.
c Var 'aux1474' order represents '0' with '6046'
c Var 'aux1474' direct represents '0' with '6046'
c Var 'aux1474' order represents '1' with '6047'
-6046 6047 0
c Var 'aux1474' direct represents '1' with '6048'
6046 -6047 6048 0
-6048 6047 0
-6048 -6046 0
c Var 'aux1474' order represents '2' with '6049'
-6047 6049 0
c Var 'aux1474' direct represents '2' with '6050'
6047 -6049 6050 0
-6050 6049 0
-6050 -6047 0
c Var 'aux1474' order represents '3' with '6051'
-6049 6051 0
c Var 'aux1474' direct represents '3' with '6052'
6049 -6051 6052 0
-6052 6051 0
-6052 -6049 0
c Var 'aux1474' direct represents '4' with '-6051'
6046 6048 6050 6052 -6051 0
c Encoding variable: aux1475 with domain: int(0..2) (representing constraint ((x_00003_00004=2) + (x_00002_00006=2)))
c Both direct and order encoding.
c Var 'aux1475' order represents '0' with '6053'
c Var 'aux1475' direct represents '0' with '6053'
c Var 'aux1475' order represents '1' with '6054'
-6053 6054 0
c Var 'aux1475' direct represents '1' with '6055'
6053 -6054 6055 0
-6055 6054 0
-6055 -6053 0
c Var 'aux1475' direct represents '2' with '-6054'
6053 6055 -6054 0
c Encoding variable: aux1476 with domain: int(0..2) (representing constraint ((x_00002_00005=2) + (x_00003_00005=2)))
c Both direct and order encoding.
c Var 'aux1476' order represents '0' with '6056'
c Var 'aux1476' direct represents '0' with '6056'
c Var 'aux1476' order represents '1' with '6057'
-6056 6057 0
c Var 'aux1476' direct represents '1' with '6058'
6056 -6057 6058 0
-6058 6057 0
-6058 -6056 0
c Var 'aux1476' direct represents '2' with '-6057'
6056 6058 -6057 0
c Encoding variable: aux1477 with domain: int(0..2) (representing constraint ((x_00002_00004=2) + (x_00001_00004=2)))
c Both direct and order encoding.
c Var 'aux1477' order represents '0' with '6059'
c Var 'aux1477' direct represents '0' with '6059'
c Var 'aux1477' order represents '1' with '6060'
-6059 6060 0
c Var 'aux1477' direct represents '1' with '6061'
6059 -6060 6061 0
-6061 6060 0
-6061 -6059 0
c Var 'aux1477' direct represents '2' with '-6060'
6059 6061 -6060 0
c Encoding variable: aux1478 with domain: int(0..2) (representing constraint ((x_00001_00006=2) + (x_00001_00005=2)))
c Both direct and order encoding.
c Var 'aux1478' order represents '0' with '6062'
c Var 'aux1478' direct represents '0' with '6062'
c Var 'aux1478' order represents '1' with '6063'
-6062 6063 0
c Var 'aux1478' direct represents '1' with '6064'
6062 -6063 6064 0
-6064 6063 0
-6064 -6062 0
c Var 'aux1478' direct represents '2' with '-6063'
6062 6064 -6063 0
c Encoding variable: aux1479 with domain: int(0..3) (representing constraint ((x_00003_00006=2) + aux1478))
c Both direct and order encoding.
c Var 'aux1479' order represents '0' with '6065'
c Var 'aux1479' direct represents '0' with '6065'
c Var 'aux1479' order represents '1' with '6066'
-6065 6066 0
c Var 'aux1479' direct represents '1' with '6067'
6065 -6066 6067 0
-6067 6066 0
-6067 -6065 0
c Var 'aux1479' order represents '2' with '6068'
-6066 6068 0
c Var 'aux1479' direct represents '2' with '6069'
6066 -6068 6069 0
-6069 6068 0
-6069 -6066 0
c Var 'aux1479' direct represents '3' with '-6068'
6065 6067 6069 -6068 0
c Encoding variable: aux1480 with domain: int(0..4) (representing constraint (aux1475 + aux1477))
c Both direct and order encoding.
c Var 'aux1480' order represents '0' with '6070'
c Var 'aux1480' direct represents '0' with '6070'
c Var 'aux1480' order represents '1' with '6071'
-6070 6071 0
c Var 'aux1480' direct represents '1' with '6072'
6070 -6071 6072 0
-6072 6071 0
-6072 -6070 0
c Var 'aux1480' order represents '2' with '6073'
-6071 6073 0
c Var 'aux1480' direct represents '2' with '6074'
6071 -6073 6074 0
-6074 6073 0
-6074 -6071 0
c Var 'aux1480' order represents '3' with '6075'
-6073 6075 0
c Var 'aux1480' direct represents '3' with '6076'
6073 -6075 6076 0
-6076 6075 0
-6076 -6073 0
c Var 'aux1480' direct represents '4' with '-6075'
6070 6072 6074 6076 -6075 0
c Encoding variable: aux1481 with domain: int(0..2) (representing constraint ((x_00003_00004=3) + (x_00002_00006=3)))
c Both direct and order encoding.
c Var 'aux1481' order represents '0' with '6077'
c Var 'aux1481' direct represents '0' with '6077'
c Var 'aux1481' order represents '1' with '6078'
-6077 6078 0
c Var 'aux1481' direct represents '1' with '6079'
6077 -6078 6079 0
-6079 6078 0
-6079 -6077 0
c Var 'aux1481' direct represents '2' with '-6078'
6077 6079 -6078 0
c Encoding variable: aux1482 with domain: int(0..2) (representing constraint ((x_00002_00005=3) + (x_00003_00005=3)))
c Both direct and order encoding.
c Var 'aux1482' order represents '0' with '6080'
c Var 'aux1482' direct represents '0' with '6080'
c Var 'aux1482' order represents '1' with '6081'
-6080 6081 0
c Var 'aux1482' direct represents '1' with '6082'
6080 -6081 6082 0
-6082 6081 0
-6082 -6080 0
c Var 'aux1482' direct represents '2' with '-6081'
6080 6082 -6081 0
c Encoding variable: aux1483 with domain: int(0..2) (representing constraint ((x_00002_00004=3) + (x_00001_00004=3)))
c Both direct and order encoding.
c Var 'aux1483' order represents '0' with '6083'
c Var 'aux1483' direct represents '0' with '6083'
c Var 'aux1483' order represents '1' with '6084'
-6083 6084 0
c Var 'aux1483' direct represents '1' with '6085'
6083 -6084 6085 0
-6085 6084 0
-6085 -6083 0
c Var 'aux1483' direct represents '2' with '-6084'
6083 6085 -6084 0
c Encoding variable: aux1484 with domain: int(0..2) (representing constraint ((x_00001_00006=3) + (x_00001_00005=3)))
c Both direct and order encoding.
c Var 'aux1484' order represents '0' with '6086'
c Var 'aux1484' direct represents '0' with '6086'
c Var 'aux1484' order represents '1' with '6087'
-6086 6087 0
c Var 'aux1484' direct represents '1' with '6088'
6086 -6087 6088 0
-6088 6087 0
-6088 -6086 0
c Var 'aux1484' direct represents '2' with '-6087'
6086 6088 -6087 0
c Encoding variable: aux1485 with domain: int(0..3) (representing constraint ((x_00003_00006=3) + aux1484))
c Both direct and order encoding.
c Var 'aux1485' order represents '0' with '6089'
c Var 'aux1485' direct represents '0' with '6089'
c Var 'aux1485' order represents '1' with '6090'
-6089 6090 0
c Var 'aux1485' direct represents '1' with '6091'
6089 -6090 6091 0
-6091 6090 0
-6091 -6089 0
c Var 'aux1485' order represents '2' with '6092'
-6090 6092 0
c Var 'aux1485' direct represents '2' with '6093'
6090 -6092 6093 0
-6093 6092 0
-6093 -6090 0
c Var 'aux1485' direct represents '3' with '-6092'
6089 6091 6093 -6092 0
c Encoding variable: aux1486 with domain: int(0..4) (representing constraint (aux1481 + aux1483))
c Both direct and order encoding.
c Var 'aux1486' order represents '0' with '6094'
c Var 'aux1486' direct represents '0' with '6094'
c Var 'aux1486' order represents '1' with '6095'
-6094 6095 0
c Var 'aux1486' direct represents '1' with '6096'
6094 -6095 6096 0
-6096 6095 0
-6096 -6094 0
c Var 'aux1486' order represents '2' with '6097'
-6095 6097 0
c Var 'aux1486' direct represents '2' with '6098'
6095 -6097 6098 0
-6098 6097 0
-6098 -6095 0
c Var 'aux1486' order represents '3' with '6099'
-6097 6099 0
c Var 'aux1486' direct represents '3' with '6100'
6097 -6099 6100 0
-6100 6099 0
-6100 -6097 0
c Var 'aux1486' direct represents '4' with '-6099'
6094 6096 6098 6100 -6099 0
c Encoding variable: aux1487 with domain: int(0..2) (representing constraint ((x_00003_00004=4) + (x_00002_00006=4)))
c Both direct and order encoding.
c Var 'aux1487' order represents '0' with '6101'
c Var 'aux1487' direct represents '0' with '6101'
c Var 'aux1487' order represents '1' with '6102'
-6101 6102 0
c Var 'aux1487' direct represents '1' with '6103'
6101 -6102 6103 0
-6103 6102 0
-6103 -6101 0
c Var 'aux1487' direct represents '2' with '-6102'
6101 6103 -6102 0
c Encoding variable: aux1488 with domain: int(0..2) (representing constraint ((x_00002_00005=4) + (x_00003_00005=4)))
c Both direct and order encoding.
c Var 'aux1488' order represents '0' with '6104'
c Var 'aux1488' direct represents '0' with '6104'
c Var 'aux1488' order represents '1' with '6105'
-6104 6105 0
c Var 'aux1488' direct represents '1' with '6106'
6104 -6105 6106 0
-6106 6105 0
-6106 -6104 0
c Var 'aux1488' direct represents '2' with '-6105'
6104 6106 -6105 0
c Encoding variable: aux1489 with domain: int(0..2) (representing constraint ((x_00002_00004=4) + (x_00001_00004=4)))
c Both direct and order encoding.
c Var 'aux1489' order represents '0' with '6107'
c Var 'aux1489' direct represents '0' with '6107'
c Var 'aux1489' order represents '1' with '6108'
-6107 6108 0
c Var 'aux1489' direct represents '1' with '6109'
6107 -6108 6109 0
-6109 6108 0
-6109 -6107 0
c Var 'aux1489' direct represents '2' with '-6108'
6107 6109 -6108 0
c Encoding variable: aux1490 with domain: int(0..2) (representing constraint ((x_00001_00006=4) + (x_00001_00005=4)))
c Both direct and order encoding.
c Var 'aux1490' order represents '0' with '6110'
c Var 'aux1490' direct represents '0' with '6110'
c Var 'aux1490' order represents '1' with '6111'
-6110 6111 0
c Var 'aux1490' direct represents '1' with '6112'
6110 -6111 6112 0
-6112 6111 0
-6112 -6110 0
c Var 'aux1490' direct represents '2' with '-6111'
6110 6112 -6111 0
c Encoding variable: aux1491 with domain: int(0..3) (representing constraint ((x_00003_00006=4) + aux1490))
c Both direct and order encoding.
c Var 'aux1491' order represents '0' with '6113'
c Var 'aux1491' direct represents '0' with '6113'
c Var 'aux1491' order represents '1' with '6114'
-6113 6114 0
c Var 'aux1491' direct represents '1' with '6115'
6113 -6114 6115 0
-6115 6114 0
-6115 -6113 0
c Var 'aux1491' order represents '2' with '6116'
-6114 6116 0
c Var 'aux1491' direct represents '2' with '6117'
6114 -6116 6117 0
-6117 6116 0
-6117 -6114 0
c Var 'aux1491' direct represents '3' with '-6116'
6113 6115 6117 -6116 0
c Encoding variable: aux1492 with domain: int(0..4) (representing constraint (aux1487 + aux1489))
c Both direct and order encoding.
c Var 'aux1492' order represents '0' with '6118'
c Var 'aux1492' direct represents '0' with '6118'
c Var 'aux1492' order represents '1' with '6119'
-6118 6119 0
c Var 'aux1492' direct represents '1' with '6120'
6118 -6119 6120 0
-6120 6119 0
-6120 -6118 0
c Var 'aux1492' order represents '2' with '6121'
-6119 6121 0
c Var 'aux1492' direct represents '2' with '6122'
6119 -6121 6122 0
-6122 6121 0
-6122 -6119 0
c Var 'aux1492' order represents '3' with '6123'
-6121 6123 0
c Var 'aux1492' direct represents '3' with '6124'
6121 -6123 6124 0
-6124 6123 0
-6124 -6121 0
c Var 'aux1492' direct represents '4' with '-6123'
6118 6120 6122 6124 -6123 0
c Encoding variable: aux1493 with domain: int(0..2) (representing constraint ((x_00003_00004=5) + (x_00002_00006=5)))
c Both direct and order encoding.
c Var 'aux1493' order represents '0' with '6125'
c Var 'aux1493' direct represents '0' with '6125'
c Var 'aux1493' order represents '1' with '6126'
-6125 6126 0
c Var 'aux1493' direct represents '1' with '6127'
6125 -6126 6127 0
-6127 6126 0
-6127 -6125 0
c Var 'aux1493' direct represents '2' with '-6126'
6125 6127 -6126 0
c Encoding variable: aux1494 with domain: int(0..2) (representing constraint ((x_00002_00005=5) + (x_00003_00005=5)))
c Both direct and order encoding.
c Var 'aux1494' order represents '0' with '6128'
c Var 'aux1494' direct represents '0' with '6128'
c Var 'aux1494' order represents '1' with '6129'
-6128 6129 0
c Var 'aux1494' direct represents '1' with '6130'
6128 -6129 6130 0
-6130 6129 0
-6130 -6128 0
c Var 'aux1494' direct represents '2' with '-6129'
6128 6130 -6129 0
c Encoding variable: aux1495 with domain: int(0..2) (representing constraint ((x_00002_00004=5) + (x_00001_00004=5)))
c Both direct and order encoding.
c Var 'aux1495' order represents '0' with '6131'
c Var 'aux1495' direct represents '0' with '6131'
c Var 'aux1495' order represents '1' with '6132'
-6131 6132 0
c Var 'aux1495' direct represents '1' with '6133'
6131 -6132 6133 0
-6133 6132 0
-6133 -6131 0
c Var 'aux1495' direct represents '2' with '-6132'
6131 6133 -6132 0
c Encoding variable: aux1496 with domain: int(0..2) (representing constraint ((x_00001_00006=5) + (x_00001_00005=5)))
c Both direct and order encoding.
c Var 'aux1496' order represents '0' with '6134'
c Var 'aux1496' direct represents '0' with '6134'
c Var 'aux1496' order represents '1' with '6135'
-6134 6135 0
c Var 'aux1496' direct represents '1' with '6136'
6134 -6135 6136 0
-6136 6135 0
-6136 -6134 0
c Var 'aux1496' direct represents '2' with '-6135'
6134 6136 -6135 0
c Encoding variable: aux1497 with domain: int(0..3) (representing constraint ((x_00003_00006=5) + aux1496))
c Both direct and order encoding.
c Var 'aux1497' order represents '0' with '6137'
c Var 'aux1497' direct represents '0' with '6137'
c Var 'aux1497' order represents '1' with '6138'
-6137 6138 0
c Var 'aux1497' direct represents '1' with '6139'
6137 -6138 6139 0
-6139 6138 0
-6139 -6137 0
c Var 'aux1497' order represents '2' with '6140'
-6138 6140 0
c Var 'aux1497' direct represents '2' with '6141'
6138 -6140 6141 0
-6141 6140 0
-6141 -6138 0
c Var 'aux1497' direct represents '3' with '-6140'
6137 6139 6141 -6140 0
c Encoding variable: aux1498 with domain: int(0..4) (representing constraint (aux1493 + aux1495))
c Both direct and order encoding.
c Var 'aux1498' order represents '0' with '6142'
c Var 'aux1498' direct represents '0' with '6142'
c Var 'aux1498' order represents '1' with '6143'
-6142 6143 0
c Var 'aux1498' direct represents '1' with '6144'
6142 -6143 6144 0
-6144 6143 0
-6144 -6142 0
c Var 'aux1498' order represents '2' with '6145'
-6143 6145 0
c Var 'aux1498' direct represents '2' with '6146'
6143 -6145 6146 0
-6146 6145 0
-6146 -6143 0
c Var 'aux1498' order represents '3' with '6147'
-6145 6147 0
c Var 'aux1498' direct represents '3' with '6148'
6145 -6147 6148 0
-6148 6147 0
-6148 -6145 0
c Var 'aux1498' direct represents '4' with '-6147'
6142 6144 6146 6148 -6147 0
c Encoding variable: aux1499 with domain: int(0..2) (representing constraint ((x_00003_00004=6) + (x_00002_00006=6)))
c Both direct and order encoding.
c Var 'aux1499' order represents '0' with '6149'
c Var 'aux1499' direct represents '0' with '6149'
c Var 'aux1499' order represents '1' with '6150'
-6149 6150 0
c Var 'aux1499' direct represents '1' with '6151'
6149 -6150 6151 0
-6151 6150 0
-6151 -6149 0
c Var 'aux1499' direct represents '2' with '-6150'
6149 6151 -6150 0
c Encoding variable: aux1500 with domain: int(0..2) (representing constraint ((x_00002_00005=6) + (x_00003_00005=6)))
c Both direct and order encoding.
c Var 'aux1500' order represents '0' with '6152'
c Var 'aux1500' direct represents '0' with '6152'
c Var 'aux1500' order represents '1' with '6153'
-6152 6153 0
c Var 'aux1500' direct represents '1' with '6154'
6152 -6153 6154 0
-6154 6153 0
-6154 -6152 0
c Var 'aux1500' direct represents '2' with '-6153'
6152 6154 -6153 0
c Encoding variable: aux1501 with domain: int(0..2) (representing constraint ((x_00002_00004=6) + (x_00001_00004=6)))
c Both direct and order encoding.
c Var 'aux1501' order represents '0' with '6155'
c Var 'aux1501' direct represents '0' with '6155'
c Var 'aux1501' order represents '1' with '6156'
-6155 6156 0
c Var 'aux1501' direct represents '1' with '6157'
6155 -6156 6157 0
-6157 6156 0
-6157 -6155 0
c Var 'aux1501' direct represents '2' with '-6156'
6155 6157 -6156 0
c Encoding variable: aux1502 with domain: int(0..2) (representing constraint ((x_00001_00006=6) + (x_00001_00005=6)))
c Both direct and order encoding.
c Var 'aux1502' order represents '0' with '6158'
c Var 'aux1502' direct represents '0' with '6158'
c Var 'aux1502' order represents '1' with '6159'
-6158 6159 0
c Var 'aux1502' direct represents '1' with '6160'
6158 -6159 6160 0
-6160 6159 0
-6160 -6158 0
c Var 'aux1502' direct represents '2' with '-6159'
6158 6160 -6159 0
c Encoding variable: aux1503 with domain: int(0..3) (representing constraint ((x_00003_00006=6) + aux1502))
c Both direct and order encoding.
c Var 'aux1503' order represents '0' with '6161'
c Var 'aux1503' direct represents '0' with '6161'
c Var 'aux1503' order represents '1' with '6162'
-6161 6162 0
c Var 'aux1503' direct represents '1' with '6163'
6161 -6162 6163 0
-6163 6162 0
-6163 -6161 0
c Var 'aux1503' order represents '2' with '6164'
-6162 6164 0
c Var 'aux1503' direct represents '2' with '6165'
6162 -6164 6165 0
-6165 6164 0
-6165 -6162 0
c Var 'aux1503' direct represents '3' with '-6164'
6161 6163 6165 -6164 0
c Encoding variable: aux1504 with domain: int(0..4) (representing constraint (aux1499 + aux1501))
c Both direct and order encoding.
c Var 'aux1504' order represents '0' with '6166'
c Var 'aux1504' direct represents '0' with '6166'
c Var 'aux1504' order represents '1' with '6167'
-6166 6167 0
c Var 'aux1504' direct represents '1' with '6168'
6166 -6167 6168 0
-6168 6167 0
-6168 -6166 0
c Var 'aux1504' order represents '2' with '6169'
-6167 6169 0
c Var 'aux1504' direct represents '2' with '6170'
6167 -6169 6170 0
-6170 6169 0
-6170 -6167 0
c Var 'aux1504' order represents '3' with '6171'
-6169 6171 0
c Var 'aux1504' direct represents '3' with '6172'
6169 -6171 6172 0
-6172 6171 0
-6172 -6169 0
c Var 'aux1504' direct represents '4' with '-6171'
6166 6168 6170 6172 -6171 0
c Encoding variable: aux1505 with domain: int(0..2) (representing constraint ((x_00003_00004=7) + (x_00002_00006=7)))
c Both direct and order encoding.
c Var 'aux1505' order represents '0' with '6173'
c Var 'aux1505' direct represents '0' with '6173'
c Var 'aux1505' order represents '1' with '6174'
-6173 6174 0
c Var 'aux1505' direct represents '1' with '6175'
6173 -6174 6175 0
-6175 6174 0
-6175 -6173 0
c Var 'aux1505' direct represents '2' with '-6174'
6173 6175 -6174 0
c Encoding variable: aux1506 with domain: int(0..2) (representing constraint ((x_00002_00005=7) + (x_00003_00005=7)))
c Both direct and order encoding.
c Var 'aux1506' order represents '0' with '6176'
c Var 'aux1506' direct represents '0' with '6176'
c Var 'aux1506' order represents '1' with '6177'
-6176 6177 0
c Var 'aux1506' direct represents '1' with '6178'
6176 -6177 6178 0
-6178 6177 0
-6178 -6176 0
c Var 'aux1506' direct represents '2' with '-6177'
6176 6178 -6177 0
c Encoding variable: aux1507 with domain: int(0..2) (representing constraint ((x_00002_00004=7) + (x_00001_00004=7)))
c Both direct and order encoding.
c Var 'aux1507' order represents '0' with '6179'
c Var 'aux1507' direct represents '0' with '6179'
c Var 'aux1507' order represents '1' with '6180'
-6179 6180 0
c Var 'aux1507' direct represents '1' with '6181'
6179 -6180 6181 0
-6181 6180 0
-6181 -6179 0
c Var 'aux1507' direct represents '2' with '-6180'
6179 6181 -6180 0
c Encoding variable: aux1508 with domain: int(0..2) (representing constraint ((x_00001_00006=7) + (x_00001_00005=7)))
c Both direct and order encoding.
c Var 'aux1508' order represents '0' with '6182'
c Var 'aux1508' direct represents '0' with '6182'
c Var 'aux1508' order represents '1' with '6183'
-6182 6183 0
c Var 'aux1508' direct represents '1' with '6184'
6182 -6183 6184 0
-6184 6183 0
-6184 -6182 0
c Var 'aux1508' direct represents '2' with '-6183'
6182 6184 -6183 0
c Encoding variable: aux1509 with domain: int(0..3) (representing constraint ((x_00003_00006=7) + aux1508))
c Both direct and order encoding.
c Var 'aux1509' order represents '0' with '6185'
c Var 'aux1509' direct represents '0' with '6185'
c Var 'aux1509' order represents '1' with '6186'
-6185 6186 0
c Var 'aux1509' direct represents '1' with '6187'
6185 -6186 6187 0
-6187 6186 0
-6187 -6185 0
c Var 'aux1509' order represents '2' with '6188'
-6186 6188 0
c Var 'aux1509' direct represents '2' with '6189'
6186 -6188 6189 0
-6189 6188 0
-6189 -6186 0
c Var 'aux1509' direct represents '3' with '-6188'
6185 6187 6189 -6188 0
c Encoding variable: aux1510 with domain: int(0..4) (representing constraint (aux1505 + aux1507))
c Both direct and order encoding.
c Var 'aux1510' order represents '0' with '6190'
c Var 'aux1510' direct represents '0' with '6190'
c Var 'aux1510' order represents '1' with '6191'
-6190 6191 0
c Var 'aux1510' direct represents '1' with '6192'
6190 -6191 6192 0
-6192 6191 0
-6192 -6190 0
c Var 'aux1510' order represents '2' with '6193'
-6191 6193 0
c Var 'aux1510' direct represents '2' with '6194'
6191 -6193 6194 0
-6194 6193 0
-6194 -6191 0
c Var 'aux1510' order represents '3' with '6195'
-6193 6195 0
c Var 'aux1510' direct represents '3' with '6196'
6193 -6195 6196 0
-6196 6195 0
-6196 -6193 0
c Var 'aux1510' direct represents '4' with '-6195'
6190 6192 6194 6196 -6195 0
c Encoding variable: aux1511 with domain: int(0..2) (representing constraint ((x_00003_00004=8) + (x_00002_00006=8)))
c Both direct and order encoding.
c Var 'aux1511' order represents '0' with '6197'
c Var 'aux1511' direct represents '0' with '6197'
c Var 'aux1511' order represents '1' with '6198'
-6197 6198 0
c Var 'aux1511' direct represents '1' with '6199'
6197 -6198 6199 0
-6199 6198 0
-6199 -6197 0
c Var 'aux1511' direct represents '2' with '-6198'
6197 6199 -6198 0
c Encoding variable: aux1512 with domain: int(0..2) (representing constraint ((x_00002_00005=8) + (x_00003_00005=8)))
c Both direct and order encoding.
c Var 'aux1512' order represents '0' with '6200'
c Var 'aux1512' direct represents '0' with '6200'
c Var 'aux1512' order represents '1' with '6201'
-6200 6201 0
c Var 'aux1512' direct represents '1' with '6202'
6200 -6201 6202 0
-6202 6201 0
-6202 -6200 0
c Var 'aux1512' direct represents '2' with '-6201'
6200 6202 -6201 0
c Encoding variable: aux1513 with domain: int(0..2) (representing constraint ((x_00002_00004=8) + (x_00001_00004=8)))
c Both direct and order encoding.
c Var 'aux1513' order represents '0' with '6203'
c Var 'aux1513' direct represents '0' with '6203'
c Var 'aux1513' order represents '1' with '6204'
-6203 6204 0
c Var 'aux1513' direct represents '1' with '6205'
6203 -6204 6205 0
-6205 6204 0
-6205 -6203 0
c Var 'aux1513' direct represents '2' with '-6204'
6203 6205 -6204 0
c Encoding variable: aux1514 with domain: int(0..2) (representing constraint ((x_00001_00006=8) + (x_00001_00005=8)))
c Both direct and order encoding.
c Var 'aux1514' order represents '0' with '6206'
c Var 'aux1514' direct represents '0' with '6206'
c Var 'aux1514' order represents '1' with '6207'
-6206 6207 0
c Var 'aux1514' direct represents '1' with '6208'
6206 -6207 6208 0
-6208 6207 0
-6208 -6206 0
c Var 'aux1514' direct represents '2' with '-6207'
6206 6208 -6207 0
c Encoding variable: aux1515 with domain: int(0..3) (representing constraint ((x_00003_00006=8) + aux1514))
c Both direct and order encoding.
c Var 'aux1515' order represents '0' with '6209'
c Var 'aux1515' direct represents '0' with '6209'
c Var 'aux1515' order represents '1' with '6210'
-6209 6210 0
c Var 'aux1515' direct represents '1' with '6211'
6209 -6210 6211 0
-6211 6210 0
-6211 -6209 0
c Var 'aux1515' order represents '2' with '6212'
-6210 6212 0
c Var 'aux1515' direct represents '2' with '6213'
6210 -6212 6213 0
-6213 6212 0
-6213 -6210 0
c Var 'aux1515' direct represents '3' with '-6212'
6209 6211 6213 -6212 0
c Encoding variable: aux1516 with domain: int(0..4) (representing constraint (aux1511 + aux1513))
c Both direct and order encoding.
c Var 'aux1516' order represents '0' with '6214'
c Var 'aux1516' direct represents '0' with '6214'
c Var 'aux1516' order represents '1' with '6215'
-6214 6215 0
c Var 'aux1516' direct represents '1' with '6216'
6214 -6215 6216 0
-6216 6215 0
-6216 -6214 0
c Var 'aux1516' order represents '2' with '6217'
-6215 6217 0
c Var 'aux1516' direct represents '2' with '6218'
6215 -6217 6218 0
-6218 6217 0
-6218 -6215 0
c Var 'aux1516' order represents '3' with '6219'
-6217 6219 0
c Var 'aux1516' direct represents '3' with '6220'
6217 -6219 6220 0
-6220 6219 0
-6220 -6217 0
c Var 'aux1516' direct represents '4' with '-6219'
6214 6216 6218 6220 -6219 0
c Encoding variable: aux1517 with domain: int(0..2) (representing constraint ((x_00003_00004=9) + (x_00002_00006=9)))
c Both direct and order encoding.
c Var 'aux1517' order represents '0' with '6221'
c Var 'aux1517' direct represents '0' with '6221'
c Var 'aux1517' order represents '1' with '6222'
-6221 6222 0
c Var 'aux1517' direct represents '1' with '6223'
6221 -6222 6223 0
-6223 6222 0
-6223 -6221 0
c Var 'aux1517' direct represents '2' with '-6222'
6221 6223 -6222 0
c Encoding variable: aux1518 with domain: int(0..2) (representing constraint ((x_00002_00005=9) + (x_00003_00005=9)))
c Both direct and order encoding.
c Var 'aux1518' order represents '0' with '6224'
c Var 'aux1518' direct represents '0' with '6224'
c Var 'aux1518' order represents '1' with '6225'
-6224 6225 0
c Var 'aux1518' direct represents '1' with '6226'
6224 -6225 6226 0
-6226 6225 0
-6226 -6224 0
c Var 'aux1518' direct represents '2' with '-6225'
6224 6226 -6225 0
c Encoding variable: aux1519 with domain: int(0..2) (representing constraint ((x_00002_00004=9) + (x_00001_00004=9)))
c Both direct and order encoding.
c Var 'aux1519' order represents '0' with '6227'
c Var 'aux1519' direct represents '0' with '6227'
c Var 'aux1519' order represents '1' with '6228'
-6227 6228 0
c Var 'aux1519' direct represents '1' with '6229'
6227 -6228 6229 0
-6229 6228 0
-6229 -6227 0
c Var 'aux1519' direct represents '2' with '-6228'
6227 6229 -6228 0
c Encoding variable: aux1520 with domain: int(0..2) (representing constraint ((x_00001_00006=9) + (x_00001_00005=9)))
c Both direct and order encoding.
c Var 'aux1520' order represents '0' with '6230'
c Var 'aux1520' direct represents '0' with '6230'
c Var 'aux1520' order represents '1' with '6231'
-6230 6231 0
c Var 'aux1520' direct represents '1' with '6232'
6230 -6231 6232 0
-6232 6231 0
-6232 -6230 0
c Var 'aux1520' direct represents '2' with '-6231'
6230 6232 -6231 0
c Encoding variable: aux1521 with domain: int(0..3) (representing constraint ((x_00003_00006=9) + aux1520))
c Both direct and order encoding.
c Var 'aux1521' order represents '0' with '6233'
c Var 'aux1521' direct represents '0' with '6233'
c Var 'aux1521' order represents '1' with '6234'
-6233 6234 0
c Var 'aux1521' direct represents '1' with '6235'
6233 -6234 6235 0
-6235 6234 0
-6235 -6233 0
c Var 'aux1521' order represents '2' with '6236'
-6234 6236 0
c Var 'aux1521' direct represents '2' with '6237'
6234 -6236 6237 0
-6237 6236 0
-6237 -6234 0
c Var 'aux1521' direct represents '3' with '-6236'
6233 6235 6237 -6236 0
c Encoding variable: aux1522 with domain: int(0..4) (representing constraint (aux1517 + aux1519))
c Both direct and order encoding.
c Var 'aux1522' order represents '0' with '6238'
c Var 'aux1522' direct represents '0' with '6238'
c Var 'aux1522' order represents '1' with '6239'
-6238 6239 0
c Var 'aux1522' direct represents '1' with '6240'
6238 -6239 6240 0
-6240 6239 0
-6240 -6238 0
c Var 'aux1522' order represents '2' with '6241'
-6239 6241 0
c Var 'aux1522' direct represents '2' with '6242'
6239 -6241 6242 0
-6242 6241 0
-6242 -6239 0
c Var 'aux1522' order represents '3' with '6243'
-6241 6243 0
c Var 'aux1522' direct represents '3' with '6244'
6241 -6243 6244 0
-6244 6243 0
-6244 -6241 0
c Var 'aux1522' direct represents '4' with '-6243'
6238 6240 6242 6244 -6243 0
c Encoding variable: aux1523 with domain: int(0..2) (representing constraint ((x_00003_00007=1) + (x_00002_00009=1)))
c Both direct and order encoding.
c Var 'aux1523' order represents '0' with '6245'
c Var 'aux1523' direct represents '0' with '6245'
c Var 'aux1523' order represents '1' with '6246'
-6245 6246 0
c Var 'aux1523' direct represents '1' with '6247'
6245 -6246 6247 0
-6247 6246 0
-6247 -6245 0
c Var 'aux1523' direct represents '2' with '-6246'
6245 6247 -6246 0
c Encoding variable: aux1524 with domain: int(0..2) (representing constraint ((x_00002_00008=1) + (x_00003_00008=1)))
c Both direct and order encoding.
c Var 'aux1524' order represents '0' with '6248'
c Var 'aux1524' direct represents '0' with '6248'
c Var 'aux1524' order represents '1' with '6249'
-6248 6249 0
c Var 'aux1524' direct represents '1' with '6250'
6248 -6249 6250 0
-6250 6249 0
-6250 -6248 0
c Var 'aux1524' direct represents '2' with '-6249'
6248 6250 -6249 0
c Encoding variable: aux1525 with domain: int(0..2) (representing constraint ((x_00002_00007=1) + (x_00001_00007=1)))
c Both direct and order encoding.
c Var 'aux1525' order represents '0' with '6251'
c Var 'aux1525' direct represents '0' with '6251'
c Var 'aux1525' order represents '1' with '6252'
-6251 6252 0
c Var 'aux1525' direct represents '1' with '6253'
6251 -6252 6253 0
-6253 6252 0
-6253 -6251 0
c Var 'aux1525' direct represents '2' with '-6252'
6251 6253 -6252 0
c Encoding variable: aux1526 with domain: int(0..2) (representing constraint ((x_00001_00009=1) + (x_00001_00008=1)))
c Both direct and order encoding.
c Var 'aux1526' order represents '0' with '6254'
c Var 'aux1526' direct represents '0' with '6254'
c Var 'aux1526' order represents '1' with '6255'
-6254 6255 0
c Var 'aux1526' direct represents '1' with '6256'
6254 -6255 6256 0
-6256 6255 0
-6256 -6254 0
c Var 'aux1526' direct represents '2' with '-6255'
6254 6256 -6255 0
c Encoding variable: aux1527 with domain: int(0..3) (representing constraint ((x_00003_00009=1) + aux1526))
c Both direct and order encoding.
c Var 'aux1527' order represents '0' with '6257'
c Var 'aux1527' direct represents '0' with '6257'
c Var 'aux1527' order represents '1' with '6258'
-6257 6258 0
c Var 'aux1527' direct represents '1' with '6259'
6257 -6258 6259 0
-6259 6258 0
-6259 -6257 0
c Var 'aux1527' order represents '2' with '6260'
-6258 6260 0
c Var 'aux1527' direct represents '2' with '6261'
6258 -6260 6261 0
-6261 6260 0
-6261 -6258 0
c Var 'aux1527' direct represents '3' with '-6260'
6257 6259 6261 -6260 0
c Encoding variable: aux1528 with domain: int(0..4) (representing constraint (aux1523 + aux1525))
c Both direct and order encoding.
c Var 'aux1528' order represents '0' with '6262'
c Var 'aux1528' direct represents '0' with '6262'
c Var 'aux1528' order represents '1' with '6263'
-6262 6263 0
c Var 'aux1528' direct represents '1' with '6264'
6262 -6263 6264 0
-6264 6263 0
-6264 -6262 0
c Var 'aux1528' order represents '2' with '6265'
-6263 6265 0
c Var 'aux1528' direct represents '2' with '6266'
6263 -6265 6266 0
-6266 6265 0
-6266 -6263 0
c Var 'aux1528' order represents '3' with '6267'
-6265 6267 0
c Var 'aux1528' direct represents '3' with '6268'
6265 -6267 6268 0
-6268 6267 0
-6268 -6265 0
c Var 'aux1528' direct represents '4' with '-6267'
6262 6264 6266 6268 -6267 0
c Encoding variable: aux1529 with domain: int(0..2) (representing constraint ((x_00003_00007=2) + (x_00002_00009=2)))
c Both direct and order encoding.
c Var 'aux1529' order represents '0' with '6269'
c Var 'aux1529' direct represents '0' with '6269'
c Var 'aux1529' order represents '1' with '6270'
-6269 6270 0
c Var 'aux1529' direct represents '1' with '6271'
6269 -6270 6271 0
-6271 6270 0
-6271 -6269 0
c Var 'aux1529' direct represents '2' with '-6270'
6269 6271 -6270 0
c Encoding variable: aux1530 with domain: int(0..2) (representing constraint ((x_00002_00008=2) + (x_00003_00008=2)))
c Both direct and order encoding.
c Var 'aux1530' order represents '0' with '6272'
c Var 'aux1530' direct represents '0' with '6272'
c Var 'aux1530' order represents '1' with '6273'
-6272 6273 0
c Var 'aux1530' direct represents '1' with '6274'
6272 -6273 6274 0
-6274 6273 0
-6274 -6272 0
c Var 'aux1530' direct represents '2' with '-6273'
6272 6274 -6273 0
c Encoding variable: aux1531 with domain: int(0..2) (representing constraint ((x_00002_00007=2) + (x_00001_00007=2)))
c Both direct and order encoding.
c Var 'aux1531' order represents '0' with '6275'
c Var 'aux1531' direct represents '0' with '6275'
c Var 'aux1531' order represents '1' with '6276'
-6275 6276 0
c Var 'aux1531' direct represents '1' with '6277'
6275 -6276 6277 0
-6277 6276 0
-6277 -6275 0
c Var 'aux1531' direct represents '2' with '-6276'
6275 6277 -6276 0
c Encoding variable: aux1532 with domain: int(0..2) (representing constraint ((x_00001_00009=2) + (x_00001_00008=2)))
c Both direct and order encoding.
c Var 'aux1532' order represents '0' with '6278'
c Var 'aux1532' direct represents '0' with '6278'
c Var 'aux1532' order represents '1' with '6279'
-6278 6279 0
c Var 'aux1532' direct represents '1' with '6280'
6278 -6279 6280 0
-6280 6279 0
-6280 -6278 0
c Var 'aux1532' direct represents '2' with '-6279'
6278 6280 -6279 0
c Encoding variable: aux1533 with domain: int(0..3) (representing constraint ((x_00003_00009=2) + aux1532))
c Both direct and order encoding.
c Var 'aux1533' order represents '0' with '6281'
c Var 'aux1533' direct represents '0' with '6281'
c Var 'aux1533' order represents '1' with '6282'
-6281 6282 0
c Var 'aux1533' direct represents '1' with '6283'
6281 -6282 6283 0
-6283 6282 0
-6283 -6281 0
c Var 'aux1533' order represents '2' with '6284'
-6282 6284 0
c Var 'aux1533' direct represents '2' with '6285'
6282 -6284 6285 0
-6285 6284 0
-6285 -6282 0
c Var 'aux1533' direct represents '3' with '-6284'
6281 6283 6285 -6284 0
c Encoding variable: aux1534 with domain: int(0..4) (representing constraint (aux1529 + aux1531))
c Both direct and order encoding.
c Var 'aux1534' order represents '0' with '6286'
c Var 'aux1534' direct represents '0' with '6286'
c Var 'aux1534' order represents '1' with '6287'
-6286 6287 0
c Var 'aux1534' direct represents '1' with '6288'
6286 -6287 6288 0
-6288 6287 0
-6288 -6286 0
c Var 'aux1534' order represents '2' with '6289'
-6287 6289 0
c Var 'aux1534' direct represents '2' with '6290'
6287 -6289 6290 0
-6290 6289 0
-6290 -6287 0
c Var 'aux1534' order represents '3' with '6291'
-6289 6291 0
c Var 'aux1534' direct represents '3' with '6292'
6289 -6291 6292 0
-6292 6291 0
-6292 -6289 0
c Var 'aux1534' direct represents '4' with '-6291'
6286 6288 6290 6292 -6291 0
c Encoding variable: aux1535 with domain: int(0..2) (representing constraint ((x_00003_00007=3) + (x_00002_00009=3)))
c Both direct and order encoding.
c Var 'aux1535' order represents '0' with '6293'
c Var 'aux1535' direct represents '0' with '6293'
c Var 'aux1535' order represents '1' with '6294'
-6293 6294 0
c Var 'aux1535' direct represents '1' with '6295'
6293 -6294 6295 0
-6295 6294 0
-6295 -6293 0
c Var 'aux1535' direct represents '2' with '-6294'
6293 6295 -6294 0
c Encoding variable: aux1536 with domain: int(0..2) (representing constraint ((x_00002_00008=3) + (x_00003_00008=3)))
c Both direct and order encoding.
c Var 'aux1536' order represents '0' with '6296'
c Var 'aux1536' direct represents '0' with '6296'
c Var 'aux1536' order represents '1' with '6297'
-6296 6297 0
c Var 'aux1536' direct represents '1' with '6298'
6296 -6297 6298 0
-6298 6297 0
-6298 -6296 0
c Var 'aux1536' direct represents '2' with '-6297'
6296 6298 -6297 0
c Encoding variable: aux1537 with domain: int(0..2) (representing constraint ((x_00002_00007=3) + (x_00001_00007=3)))
c Both direct and order encoding.
c Var 'aux1537' order represents '0' with '6299'
c Var 'aux1537' direct represents '0' with '6299'
c Var 'aux1537' order represents '1' with '6300'
-6299 6300 0
c Var 'aux1537' direct represents '1' with '6301'
6299 -6300 6301 0
-6301 6300 0
-6301 -6299 0
c Var 'aux1537' direct represents '2' with '-6300'
6299 6301 -6300 0
c Encoding variable: aux1538 with domain: int(0..2) (representing constraint ((x_00001_00009=3) + (x_00001_00008=3)))
c Both direct and order encoding.
c Var 'aux1538' order represents '0' with '6302'
c Var 'aux1538' direct represents '0' with '6302'
c Var 'aux1538' order represents '1' with '6303'
-6302 6303 0
c Var 'aux1538' direct represents '1' with '6304'
6302 -6303 6304 0
-6304 6303 0
-6304 -6302 0
c Var 'aux1538' direct represents '2' with '-6303'
6302 6304 -6303 0
c Encoding variable: aux1539 with domain: int(0..3) (representing constraint ((x_00003_00009=3) + aux1538))
c Both direct and order encoding.
c Var 'aux1539' order represents '0' with '6305'
c Var 'aux1539' direct represents '0' with '6305'
c Var 'aux1539' order represents '1' with '6306'
-6305 6306 0
c Var 'aux1539' direct represents '1' with '6307'
6305 -6306 6307 0
-6307 6306 0
-6307 -6305 0
c Var 'aux1539' order represents '2' with '6308'
-6306 6308 0
c Var 'aux1539' direct represents '2' with '6309'
6306 -6308 6309 0
-6309 6308 0
-6309 -6306 0
c Var 'aux1539' direct represents '3' with '-6308'
6305 6307 6309 -6308 0
c Encoding variable: aux1540 with domain: int(0..4) (representing constraint (aux1535 + aux1537))
c Both direct and order encoding.
c Var 'aux1540' order represents '0' with '6310'
c Var 'aux1540' direct represents '0' with '6310'
c Var 'aux1540' order represents '1' with '6311'
-6310 6311 0
c Var 'aux1540' direct represents '1' with '6312'
6310 -6311 6312 0
-6312 6311 0
-6312 -6310 0
c Var 'aux1540' order represents '2' with '6313'
-6311 6313 0
c Var 'aux1540' direct represents '2' with '6314'
6311 -6313 6314 0
-6314 6313 0
-6314 -6311 0
c Var 'aux1540' order represents '3' with '6315'
-6313 6315 0
c Var 'aux1540' direct represents '3' with '6316'
6313 -6315 6316 0
-6316 6315 0
-6316 -6313 0
c Var 'aux1540' direct represents '4' with '-6315'
6310 6312 6314 6316 -6315 0
c Encoding variable: aux1541 with domain: int(0..2) (representing constraint ((x_00003_00007=4) + (x_00002_00009=4)))
c Both direct and order encoding.
c Var 'aux1541' order represents '0' with '6317'
c Var 'aux1541' direct represents '0' with '6317'
c Var 'aux1541' order represents '1' with '6318'
-6317 6318 0
c Var 'aux1541' direct represents '1' with '6319'
6317 -6318 6319 0
-6319 6318 0
-6319 -6317 0
c Var 'aux1541' direct represents '2' with '-6318'
6317 6319 -6318 0
c Encoding variable: aux1542 with domain: int(0..2) (representing constraint ((x_00002_00008=4) + (x_00003_00008=4)))
c Both direct and order encoding.
c Var 'aux1542' order represents '0' with '6320'
c Var 'aux1542' direct represents '0' with '6320'
c Var 'aux1542' order represents '1' with '6321'
-6320 6321 0
c Var 'aux1542' direct represents '1' with '6322'
6320 -6321 6322 0
-6322 6321 0
-6322 -6320 0
c Var 'aux1542' direct represents '2' with '-6321'
6320 6322 -6321 0
c Encoding variable: aux1543 with domain: int(0..2) (representing constraint ((x_00002_00007=4) + (x_00001_00007=4)))
c Both direct and order encoding.
c Var 'aux1543' order represents '0' with '6323'
c Var 'aux1543' direct represents '0' with '6323'
c Var 'aux1543' order represents '1' with '6324'
-6323 6324 0
c Var 'aux1543' direct represents '1' with '6325'
6323 -6324 6325 0
-6325 6324 0
-6325 -6323 0
c Var 'aux1543' direct represents '2' with '-6324'
6323 6325 -6324 0
c Encoding variable: aux1544 with domain: int(0..2) (representing constraint ((x_00001_00009=4) + (x_00001_00008=4)))
c Both direct and order encoding.
c Var 'aux1544' order represents '0' with '6326'
c Var 'aux1544' direct represents '0' with '6326'
c Var 'aux1544' order represents '1' with '6327'
-6326 6327 0
c Var 'aux1544' direct represents '1' with '6328'
6326 -6327 6328 0
-6328 6327 0
-6328 -6326 0
c Var 'aux1544' direct represents '2' with '-6327'
6326 6328 -6327 0
c Encoding variable: aux1545 with domain: int(0..3) (representing constraint ((x_00003_00009=4) + aux1544))
c Both direct and order encoding.
c Var 'aux1545' order represents '0' with '6329'
c Var 'aux1545' direct represents '0' with '6329'
c Var 'aux1545' order represents '1' with '6330'
-6329 6330 0
c Var 'aux1545' direct represents '1' with '6331'
6329 -6330 6331 0
-6331 6330 0
-6331 -6329 0
c Var 'aux1545' order represents '2' with '6332'
-6330 6332 0
c Var 'aux1545' direct represents '2' with '6333'
6330 -6332 6333 0
-6333 6332 0
-6333 -6330 0
c Var 'aux1545' direct represents '3' with '-6332'
6329 6331 6333 -6332 0
c Encoding variable: aux1546 with domain: int(0..4) (representing constraint (aux1541 + aux1543))
c Both direct and order encoding.
c Var 'aux1546' order represents '0' with '6334'
c Var 'aux1546' direct represents '0' with '6334'
c Var 'aux1546' order represents '1' with '6335'
-6334 6335 0
c Var 'aux1546' direct represents '1' with '6336'
6334 -6335 6336 0
-6336 6335 0
-6336 -6334 0
c Var 'aux1546' order represents '2' with '6337'
-6335 6337 0
c Var 'aux1546' direct represents '2' with '6338'
6335 -6337 6338 0
-6338 6337 0
-6338 -6335 0
c Var 'aux1546' order represents '3' with '6339'
-6337 6339 0
c Var 'aux1546' direct represents '3' with '6340'
6337 -6339 6340 0
-6340 6339 0
-6340 -6337 0
c Var 'aux1546' direct represents '4' with '-6339'
6334 6336 6338 6340 -6339 0
c Encoding variable: aux1547 with domain: int(0..2) (representing constraint ((x_00003_00007=5) + (x_00002_00009=5)))
c Both direct and order encoding.
c Var 'aux1547' order represents '0' with '6341'
c Var 'aux1547' direct represents '0' with '6341'
c Var 'aux1547' order represents '1' with '6342'
-6341 6342 0
c Var 'aux1547' direct represents '1' with '6343'
6341 -6342 6343 0
-6343 6342 0
-6343 -6341 0
c Var 'aux1547' direct represents '2' with '-6342'
6341 6343 -6342 0
c Encoding variable: aux1548 with domain: int(0..2) (representing constraint ((x_00002_00008=5) + (x_00003_00008=5)))
c Both direct and order encoding.
c Var 'aux1548' order represents '0' with '6344'
c Var 'aux1548' direct represents '0' with '6344'
c Var 'aux1548' order represents '1' with '6345'
-6344 6345 0
c Var 'aux1548' direct represents '1' with '6346'
6344 -6345 6346 0
-6346 6345 0
-6346 -6344 0
c Var 'aux1548' direct represents '2' with '-6345'
6344 6346 -6345 0
c Encoding variable: aux1549 with domain: int(0..2) (representing constraint ((x_00002_00007=5) + (x_00001_00007=5)))
c Both direct and order encoding.
c Var 'aux1549' order represents '0' with '6347'
c Var 'aux1549' direct represents '0' with '6347'
c Var 'aux1549' order represents '1' with '6348'
-6347 6348 0
c Var 'aux1549' direct represents '1' with '6349'
6347 -6348 6349 0
-6349 6348 0
-6349 -6347 0
c Var 'aux1549' direct represents '2' with '-6348'
6347 6349 -6348 0
c Encoding variable: aux1550 with domain: int(0..2) (representing constraint ((x_00001_00009=5) + (x_00001_00008=5)))
c Both direct and order encoding.
c Var 'aux1550' order represents '0' with '6350'
c Var 'aux1550' direct represents '0' with '6350'
c Var 'aux1550' order represents '1' with '6351'
-6350 6351 0
c Var 'aux1550' direct represents '1' with '6352'
6350 -6351 6352 0
-6352 6351 0
-6352 -6350 0
c Var 'aux1550' direct represents '2' with '-6351'
6350 6352 -6351 0
c Encoding variable: aux1551 with domain: int(0..3) (representing constraint ((x_00003_00009=5) + aux1550))
c Both direct and order encoding.
c Var 'aux1551' order represents '0' with '6353'
c Var 'aux1551' direct represents '0' with '6353'
c Var 'aux1551' order represents '1' with '6354'
-6353 6354 0
c Var 'aux1551' direct represents '1' with '6355'
6353 -6354 6355 0
-6355 6354 0
-6355 -6353 0
c Var 'aux1551' order represents '2' with '6356'
-6354 6356 0
c Var 'aux1551' direct represents '2' with '6357'
6354 -6356 6357 0
-6357 6356 0
-6357 -6354 0
c Var 'aux1551' direct represents '3' with '-6356'
6353 6355 6357 -6356 0
c Encoding variable: aux1552 with domain: int(0..4) (representing constraint (aux1547 + aux1549))
c Both direct and order encoding.
c Var 'aux1552' order represents '0' with '6358'
c Var 'aux1552' direct represents '0' with '6358'
c Var 'aux1552' order represents '1' with '6359'
-6358 6359 0
c Var 'aux1552' direct represents '1' with '6360'
6358 -6359 6360 0
-6360 6359 0
-6360 -6358 0
c Var 'aux1552' order represents '2' with '6361'
-6359 6361 0
c Var 'aux1552' direct represents '2' with '6362'
6359 -6361 6362 0
-6362 6361 0
-6362 -6359 0
c Var 'aux1552' order represents '3' with '6363'
-6361 6363 0
c Var 'aux1552' direct represents '3' with '6364'
6361 -6363 6364 0
-6364 6363 0
-6364 -6361 0
c Var 'aux1552' direct represents '4' with '-6363'
6358 6360 6362 6364 -6363 0
c Encoding variable: aux1553 with domain: int(0..2) (representing constraint ((x_00003_00007=6) + (x_00002_00009=6)))
c Both direct and order encoding.
c Var 'aux1553' order represents '0' with '6365'
c Var 'aux1553' direct represents '0' with '6365'
c Var 'aux1553' order represents '1' with '6366'
-6365 6366 0
c Var 'aux1553' direct represents '1' with '6367'
6365 -6366 6367 0
-6367 6366 0
-6367 -6365 0
c Var 'aux1553' direct represents '2' with '-6366'
6365 6367 -6366 0
c Encoding variable: aux1554 with domain: int(0..2) (representing constraint ((x_00002_00008=6) + (x_00003_00008=6)))
c Both direct and order encoding.
c Var 'aux1554' order represents '0' with '6368'
c Var 'aux1554' direct represents '0' with '6368'
c Var 'aux1554' order represents '1' with '6369'
-6368 6369 0
c Var 'aux1554' direct represents '1' with '6370'
6368 -6369 6370 0
-6370 6369 0
-6370 -6368 0
c Var 'aux1554' direct represents '2' with '-6369'
6368 6370 -6369 0
c Encoding variable: aux1555 with domain: int(0..2) (representing constraint ((x_00002_00007=6) + (x_00001_00007=6)))
c Both direct and order encoding.
c Var 'aux1555' order represents '0' with '6371'
c Var 'aux1555' direct represents '0' with '6371'
c Var 'aux1555' order represents '1' with '6372'
-6371 6372 0
c Var 'aux1555' direct represents '1' with '6373'
6371 -6372 6373 0
-6373 6372 0
-6373 -6371 0
c Var 'aux1555' direct represents '2' with '-6372'
6371 6373 -6372 0
c Encoding variable: aux1556 with domain: int(0..2) (representing constraint ((x_00001_00009=6) + (x_00001_00008=6)))
c Both direct and order encoding.
c Var 'aux1556' order represents '0' with '6374'
c Var 'aux1556' direct represents '0' with '6374'
c Var 'aux1556' order represents '1' with '6375'
-6374 6375 0
c Var 'aux1556' direct represents '1' with '6376'
6374 -6375 6376 0
-6376 6375 0
-6376 -6374 0
c Var 'aux1556' direct represents '2' with '-6375'
6374 6376 -6375 0
c Encoding variable: aux1557 with domain: int(0..3) (representing constraint ((x_00003_00009=6) + aux1556))
c Both direct and order encoding.
c Var 'aux1557' order represents '0' with '6377'
c Var 'aux1557' direct represents '0' with '6377'
c Var 'aux1557' order represents '1' with '6378'
-6377 6378 0
c Var 'aux1557' direct represents '1' with '6379'
6377 -6378 6379 0
-6379 6378 0
-6379 -6377 0
c Var 'aux1557' order represents '2' with '6380'
-6378 6380 0
c Var 'aux1557' direct represents '2' with '6381'
6378 -6380 6381 0
-6381 6380 0
-6381 -6378 0
c Var 'aux1557' direct represents '3' with '-6380'
6377 6379 6381 -6380 0
c Encoding variable: aux1558 with domain: int(0..4) (representing constraint (aux1553 + aux1555))
c Both direct and order encoding.
c Var 'aux1558' order represents '0' with '6382'
c Var 'aux1558' direct represents '0' with '6382'
c Var 'aux1558' order represents '1' with '6383'
-6382 6383 0
c Var 'aux1558' direct represents '1' with '6384'
6382 -6383 6384 0
-6384 6383 0
-6384 -6382 0
c Var 'aux1558' order represents '2' with '6385'
-6383 6385 0
c Var 'aux1558' direct represents '2' with '6386'
6383 -6385 6386 0
-6386 6385 0
-6386 -6383 0
c Var 'aux1558' order represents '3' with '6387'
-6385 6387 0
c Var 'aux1558' direct represents '3' with '6388'
6385 -6387 6388 0
-6388 6387 0
-6388 -6385 0
c Var 'aux1558' direct represents '4' with '-6387'
6382 6384 6386 6388 -6387 0
c Encoding variable: aux1559 with domain: int(0..2) (representing constraint ((x_00003_00007=7) + (x_00002_00009=7)))
c Both direct and order encoding.
c Var 'aux1559' order represents '0' with '6389'
c Var 'aux1559' direct represents '0' with '6389'
c Var 'aux1559' order represents '1' with '6390'
-6389 6390 0
c Var 'aux1559' direct represents '1' with '6391'
6389 -6390 6391 0
-6391 6390 0
-6391 -6389 0
c Var 'aux1559' direct represents '2' with '-6390'
6389 6391 -6390 0
c Encoding variable: aux1560 with domain: int(0..2) (representing constraint ((x_00002_00008=7) + (x_00003_00008=7)))
c Both direct and order encoding.
c Var 'aux1560' order represents '0' with '6392'
c Var 'aux1560' direct represents '0' with '6392'
c Var 'aux1560' order represents '1' with '6393'
-6392 6393 0
c Var 'aux1560' direct represents '1' with '6394'
6392 -6393 6394 0
-6394 6393 0
-6394 -6392 0
c Var 'aux1560' direct represents '2' with '-6393'
6392 6394 -6393 0
c Encoding variable: aux1561 with domain: int(0..2) (representing constraint ((x_00002_00007=7) + (x_00001_00007=7)))
c Both direct and order encoding.
c Var 'aux1561' order represents '0' with '6395'
c Var 'aux1561' direct represents '0' with '6395'
c Var 'aux1561' order represents '1' with '6396'
-6395 6396 0
c Var 'aux1561' direct represents '1' with '6397'
6395 -6396 6397 0
-6397 6396 0
-6397 -6395 0
c Var 'aux1561' direct represents '2' with '-6396'
6395 6397 -6396 0
c Encoding variable: aux1562 with domain: int(0..2) (representing constraint ((x_00001_00009=7) + (x_00001_00008=7)))
c Both direct and order encoding.
c Var 'aux1562' order represents '0' with '6398'
c Var 'aux1562' direct represents '0' with '6398'
c Var 'aux1562' order represents '1' with '6399'
-6398 6399 0
c Var 'aux1562' direct represents '1' with '6400'
6398 -6399 6400 0
-6400 6399 0
-6400 -6398 0
c Var 'aux1562' direct represents '2' with '-6399'
6398 6400 -6399 0
c Encoding variable: aux1563 with domain: int(0..3) (representing constraint ((x_00003_00009=7) + aux1562))
c Both direct and order encoding.
c Var 'aux1563' order represents '0' with '6401'
c Var 'aux1563' direct represents '0' with '6401'
c Var 'aux1563' order represents '1' with '6402'
-6401 6402 0
c Var 'aux1563' direct represents '1' with '6403'
6401 -6402 6403 0
-6403 6402 0
-6403 -6401 0
c Var 'aux1563' order represents '2' with '6404'
-6402 6404 0
c Var 'aux1563' direct represents '2' with '6405'
6402 -6404 6405 0
-6405 6404 0
-6405 -6402 0
c Var 'aux1563' direct represents '3' with '-6404'
6401 6403 6405 -6404 0
c Encoding variable: aux1564 with domain: int(0..4) (representing constraint (aux1559 + aux1561))
c Both direct and order encoding.
c Var 'aux1564' order represents '0' with '6406'
c Var 'aux1564' direct represents '0' with '6406'
c Var 'aux1564' order represents '1' with '6407'
-6406 6407 0
c Var 'aux1564' direct represents '1' with '6408'
6406 -6407 6408 0
-6408 6407 0
-6408 -6406 0
c Var 'aux1564' order represents '2' with '6409'
-6407 6409 0
c Var 'aux1564' direct represents '2' with '6410'
6407 -6409 6410 0
-6410 6409 0
-6410 -6407 0
c Var 'aux1564' order represents '3' with '6411'
-6409 6411 0
c Var 'aux1564' direct represents '3' with '6412'
6409 -6411 6412 0
-6412 6411 0
-6412 -6409 0
c Var 'aux1564' direct represents '4' with '-6411'
6406 6408 6410 6412 -6411 0
c Encoding variable: aux1565 with domain: int(0..2) (representing constraint ((x_00003_00007=8) + (x_00002_00009=8)))
c Both direct and order encoding.
c Var 'aux1565' order represents '0' with '6413'
c Var 'aux1565' direct represents '0' with '6413'
c Var 'aux1565' order represents '1' with '6414'
-6413 6414 0
c Var 'aux1565' direct represents '1' with '6415'
6413 -6414 6415 0
-6415 6414 0
-6415 -6413 0
c Var 'aux1565' direct represents '2' with '-6414'
6413 6415 -6414 0
c Encoding variable: aux1566 with domain: int(0..2) (representing constraint ((x_00002_00008=8) + (x_00003_00008=8)))
c Both direct and order encoding.
c Var 'aux1566' order represents '0' with '6416'
c Var 'aux1566' direct represents '0' with '6416'
c Var 'aux1566' order represents '1' with '6417'
-6416 6417 0
c Var 'aux1566' direct represents '1' with '6418'
6416 -6417 6418 0
-6418 6417 0
-6418 -6416 0
c Var 'aux1566' direct represents '2' with '-6417'
6416 6418 -6417 0
c Encoding variable: aux1567 with domain: int(0..2) (representing constraint ((x_00002_00007=8) + (x_00001_00007=8)))
c Both direct and order encoding.
c Var 'aux1567' order represents '0' with '6419'
c Var 'aux1567' direct represents '0' with '6419'
c Var 'aux1567' order represents '1' with '6420'
-6419 6420 0
c Var 'aux1567' direct represents '1' with '6421'
6419 -6420 6421 0
-6421 6420 0
-6421 -6419 0
c Var 'aux1567' direct represents '2' with '-6420'
6419 6421 -6420 0
c Encoding variable: aux1568 with domain: int(0..2) (representing constraint ((x_00001_00009=8) + (x_00001_00008=8)))
c Both direct and order encoding.
c Var 'aux1568' order represents '0' with '6422'
c Var 'aux1568' direct represents '0' with '6422'
c Var 'aux1568' order represents '1' with '6423'
-6422 6423 0
c Var 'aux1568' direct represents '1' with '6424'
6422 -6423 6424 0
-6424 6423 0
-6424 -6422 0
c Var 'aux1568' direct represents '2' with '-6423'
6422 6424 -6423 0
c Encoding variable: aux1569 with domain: int(0..3) (representing constraint ((x_00003_00009=8) + aux1568))
c Both direct and order encoding.
c Var 'aux1569' order represents '0' with '6425'
c Var 'aux1569' direct represents '0' with '6425'
c Var 'aux1569' order represents '1' with '6426'
-6425 6426 0
c Var 'aux1569' direct represents '1' with '6427'
6425 -6426 6427 0
-6427 6426 0
-6427 -6425 0
c Var 'aux1569' order represents '2' with '6428'
-6426 6428 0
c Var 'aux1569' direct represents '2' with '6429'
6426 -6428 6429 0
-6429 6428 0
-6429 -6426 0
c Var 'aux1569' direct represents '3' with '-6428'
6425 6427 6429 -6428 0
c Encoding variable: aux1570 with domain: int(0..4) (representing constraint (aux1565 + aux1567))
c Both direct and order encoding.
c Var 'aux1570' order represents '0' with '6430'
c Var 'aux1570' direct represents '0' with '6430'
c Var 'aux1570' order represents '1' with '6431'
-6430 6431 0
c Var 'aux1570' direct represents '1' with '6432'
6430 -6431 6432 0
-6432 6431 0
-6432 -6430 0
c Var 'aux1570' order represents '2' with '6433'
-6431 6433 0
c Var 'aux1570' direct represents '2' with '6434'
6431 -6433 6434 0
-6434 6433 0
-6434 -6431 0
c Var 'aux1570' order represents '3' with '6435'
-6433 6435 0
c Var 'aux1570' direct represents '3' with '6436'
6433 -6435 6436 0
-6436 6435 0
-6436 -6433 0
c Var 'aux1570' direct represents '4' with '-6435'
6430 6432 6434 6436 -6435 0
c Encoding variable: aux1571 with domain: int(0..2) (representing constraint ((x_00003_00007=9) + (x_00002_00009=9)))
c Both direct and order encoding.
c Var 'aux1571' order represents '0' with '6437'
c Var 'aux1571' direct represents '0' with '6437'
c Var 'aux1571' order represents '1' with '6438'
-6437 6438 0
c Var 'aux1571' direct represents '1' with '6439'
6437 -6438 6439 0
-6439 6438 0
-6439 -6437 0
c Var 'aux1571' direct represents '2' with '-6438'
6437 6439 -6438 0
c Encoding variable: aux1572 with domain: int(0..2) (representing constraint ((x_00002_00008=9) + (x_00003_00008=9)))
c Both direct and order encoding.
c Var 'aux1572' order represents '0' with '6440'
c Var 'aux1572' direct represents '0' with '6440'
c Var 'aux1572' order represents '1' with '6441'
-6440 6441 0
c Var 'aux1572' direct represents '1' with '6442'
6440 -6441 6442 0
-6442 6441 0
-6442 -6440 0
c Var 'aux1572' direct represents '2' with '-6441'
6440 6442 -6441 0
c Encoding variable: aux1573 with domain: int(0..2) (representing constraint ((x_00002_00007=9) + (x_00001_00007=9)))
c Both direct and order encoding.
c Var 'aux1573' order represents '0' with '6443'
c Var 'aux1573' direct represents '0' with '6443'
c Var 'aux1573' order represents '1' with '6444'
-6443 6444 0
c Var 'aux1573' direct represents '1' with '6445'
6443 -6444 6445 0
-6445 6444 0
-6445 -6443 0
c Var 'aux1573' direct represents '2' with '-6444'
6443 6445 -6444 0
c Encoding variable: aux1574 with domain: int(0..2) (representing constraint ((x_00001_00009=9) + (x_00001_00008=9)))
c Both direct and order encoding.
c Var 'aux1574' order represents '0' with '6446'
c Var 'aux1574' direct represents '0' with '6446'
c Var 'aux1574' order represents '1' with '6447'
-6446 6447 0
c Var 'aux1574' direct represents '1' with '6448'
6446 -6447 6448 0
-6448 6447 0
-6448 -6446 0
c Var 'aux1574' direct represents '2' with '-6447'
6446 6448 -6447 0
c Encoding variable: aux1575 with domain: int(0..3) (representing constraint ((x_00003_00009=9) + aux1574))
c Both direct and order encoding.
c Var 'aux1575' order represents '0' with '6449'
c Var 'aux1575' direct represents '0' with '6449'
c Var 'aux1575' order represents '1' with '6450'
-6449 6450 0
c Var 'aux1575' direct represents '1' with '6451'
6449 -6450 6451 0
-6451 6450 0
-6451 -6449 0
c Var 'aux1575' order represents '2' with '6452'
-6450 6452 0
c Var 'aux1575' direct represents '2' with '6453'
6450 -6452 6453 0
-6453 6452 0
-6453 -6450 0
c Var 'aux1575' direct represents '3' with '-6452'
6449 6451 6453 -6452 0
c Encoding variable: aux1576 with domain: int(0..4) (representing constraint (aux1571 + aux1573))
c Both direct and order encoding.
c Var 'aux1576' order represents '0' with '6454'
c Var 'aux1576' direct represents '0' with '6454'
c Var 'aux1576' order represents '1' with '6455'
-6454 6455 0
c Var 'aux1576' direct represents '1' with '6456'
6454 -6455 6456 0
-6456 6455 0
-6456 -6454 0
c Var 'aux1576' order represents '2' with '6457'
-6455 6457 0
c Var 'aux1576' direct represents '2' with '6458'
6455 -6457 6458 0
-6458 6457 0
-6458 -6455 0
c Var 'aux1576' order represents '3' with '6459'
-6457 6459 0
c Var 'aux1576' direct represents '3' with '6460'
6457 -6459 6460 0
-6460 6459 0
-6460 -6457 0
c Var 'aux1576' direct represents '4' with '-6459'
6454 6456 6458 6460 -6459 0
c Encoding variable: aux1577 with domain: int(0..2) (representing constraint ((x_00006_00001=1) + (x_00005_00003=1)))
c Both direct and order encoding.
c Var 'aux1577' order represents '0' with '6461'
c Var 'aux1577' direct represents '0' with '6461'
c Var 'aux1577' order represents '1' with '6462'
-6461 6462 0
c Var 'aux1577' direct represents '1' with '6463'
6461 -6462 6463 0
-6463 6462 0
-6463 -6461 0
c Var 'aux1577' direct represents '2' with '-6462'
6461 6463 -6462 0
c Encoding variable: aux1578 with domain: int(0..2) (representing constraint ((x_00005_00002=1) + (x_00006_00002=1)))
c Both direct and order encoding.
c Var 'aux1578' order represents '0' with '6464'
c Var 'aux1578' direct represents '0' with '6464'
c Var 'aux1578' order represents '1' with '6465'
-6464 6465 0
c Var 'aux1578' direct represents '1' with '6466'
6464 -6465 6466 0
-6466 6465 0
-6466 -6464 0
c Var 'aux1578' direct represents '2' with '-6465'
6464 6466 -6465 0
c Encoding variable: aux1579 with domain: int(0..2) (representing constraint ((x_00005_00001=1) + (x_00004_00001=1)))
c Both direct and order encoding.
c Var 'aux1579' order represents '0' with '6467'
c Var 'aux1579' direct represents '0' with '6467'
c Var 'aux1579' order represents '1' with '6468'
-6467 6468 0
c Var 'aux1579' direct represents '1' with '6469'
6467 -6468 6469 0
-6469 6468 0
-6469 -6467 0
c Var 'aux1579' direct represents '2' with '-6468'
6467 6469 -6468 0
c Encoding variable: aux1580 with domain: int(0..2) (representing constraint ((x_00004_00003=1) + (x_00004_00002=1)))
c Both direct and order encoding.
c Var 'aux1580' order represents '0' with '6470'
c Var 'aux1580' direct represents '0' with '6470'
c Var 'aux1580' order represents '1' with '6471'
-6470 6471 0
c Var 'aux1580' direct represents '1' with '6472'
6470 -6471 6472 0
-6472 6471 0
-6472 -6470 0
c Var 'aux1580' direct represents '2' with '-6471'
6470 6472 -6471 0
c Encoding variable: aux1581 with domain: int(0..3) (representing constraint ((x_00006_00003=1) + aux1580))
c Both direct and order encoding.
c Var 'aux1581' order represents '0' with '6473'
c Var 'aux1581' direct represents '0' with '6473'
c Var 'aux1581' order represents '1' with '6474'
-6473 6474 0
c Var 'aux1581' direct represents '1' with '6475'
6473 -6474 6475 0
-6475 6474 0
-6475 -6473 0
c Var 'aux1581' order represents '2' with '6476'
-6474 6476 0
c Var 'aux1581' direct represents '2' with '6477'
6474 -6476 6477 0
-6477 6476 0
-6477 -6474 0
c Var 'aux1581' direct represents '3' with '-6476'
6473 6475 6477 -6476 0
c Encoding variable: aux1582 with domain: int(0..4) (representing constraint (aux1577 + aux1579))
c Both direct and order encoding.
c Var 'aux1582' order represents '0' with '6478'
c Var 'aux1582' direct represents '0' with '6478'
c Var 'aux1582' order represents '1' with '6479'
-6478 6479 0
c Var 'aux1582' direct represents '1' with '6480'
6478 -6479 6480 0
-6480 6479 0
-6480 -6478 0
c Var 'aux1582' order represents '2' with '6481'
-6479 6481 0
c Var 'aux1582' direct represents '2' with '6482'
6479 -6481 6482 0
-6482 6481 0
-6482 -6479 0
c Var 'aux1582' order represents '3' with '6483'
-6481 6483 0
c Var 'aux1582' direct represents '3' with '6484'
6481 -6483 6484 0
-6484 6483 0
-6484 -6481 0
c Var 'aux1582' direct represents '4' with '-6483'
6478 6480 6482 6484 -6483 0
c Encoding variable: aux1583 with domain: int(0..2) (representing constraint ((x_00006_00001=2) + (x_00005_00003=2)))
c Both direct and order encoding.
c Var 'aux1583' order represents '0' with '6485'
c Var 'aux1583' direct represents '0' with '6485'
c Var 'aux1583' order represents '1' with '6486'
-6485 6486 0
c Var 'aux1583' direct represents '1' with '6487'
6485 -6486 6487 0
-6487 6486 0
-6487 -6485 0
c Var 'aux1583' direct represents '2' with '-6486'
6485 6487 -6486 0
c Encoding variable: aux1584 with domain: int(0..2) (representing constraint ((x_00005_00002=2) + (x_00006_00002=2)))
c Both direct and order encoding.
c Var 'aux1584' order represents '0' with '6488'
c Var 'aux1584' direct represents '0' with '6488'
c Var 'aux1584' order represents '1' with '6489'
-6488 6489 0
c Var 'aux1584' direct represents '1' with '6490'
6488 -6489 6490 0
-6490 6489 0
-6490 -6488 0
c Var 'aux1584' direct represents '2' with '-6489'
6488 6490 -6489 0
c Encoding variable: aux1585 with domain: int(0..2) (representing constraint ((x_00005_00001=2) + (x_00004_00001=2)))
c Both direct and order encoding.
c Var 'aux1585' order represents '0' with '6491'
c Var 'aux1585' direct represents '0' with '6491'
c Var 'aux1585' order represents '1' with '6492'
-6491 6492 0
c Var 'aux1585' direct represents '1' with '6493'
6491 -6492 6493 0
-6493 6492 0
-6493 -6491 0
c Var 'aux1585' direct represents '2' with '-6492'
6491 6493 -6492 0
c Encoding variable: aux1586 with domain: int(0..2) (representing constraint ((x_00004_00003=2) + (x_00004_00002=2)))
c Both direct and order encoding.
c Var 'aux1586' order represents '0' with '6494'
c Var 'aux1586' direct represents '0' with '6494'
c Var 'aux1586' order represents '1' with '6495'
-6494 6495 0
c Var 'aux1586' direct represents '1' with '6496'
6494 -6495 6496 0
-6496 6495 0
-6496 -6494 0
c Var 'aux1586' direct represents '2' with '-6495'
6494 6496 -6495 0
c Encoding variable: aux1587 with domain: int(0..3) (representing constraint ((x_00006_00003=2) + aux1586))
c Both direct and order encoding.
c Var 'aux1587' order represents '0' with '6497'
c Var 'aux1587' direct represents '0' with '6497'
c Var 'aux1587' order represents '1' with '6498'
-6497 6498 0
c Var 'aux1587' direct represents '1' with '6499'
6497 -6498 6499 0
-6499 6498 0
-6499 -6497 0
c Var 'aux1587' order represents '2' with '6500'
-6498 6500 0
c Var 'aux1587' direct represents '2' with '6501'
6498 -6500 6501 0
-6501 6500 0
-6501 -6498 0
c Var 'aux1587' direct represents '3' with '-6500'
6497 6499 6501 -6500 0
c Encoding variable: aux1588 with domain: int(0..4) (representing constraint (aux1583 + aux1585))
c Both direct and order encoding.
c Var 'aux1588' order represents '0' with '6502'
c Var 'aux1588' direct represents '0' with '6502'
c Var 'aux1588' order represents '1' with '6503'
-6502 6503 0
c Var 'aux1588' direct represents '1' with '6504'
6502 -6503 6504 0
-6504 6503 0
-6504 -6502 0
c Var 'aux1588' order represents '2' with '6505'
-6503 6505 0
c Var 'aux1588' direct represents '2' with '6506'
6503 -6505 6506 0
-6506 6505 0
-6506 -6503 0
c Var 'aux1588' order represents '3' with '6507'
-6505 6507 0
c Var 'aux1588' direct represents '3' with '6508'
6505 -6507 6508 0
-6508 6507 0
-6508 -6505 0
c Var 'aux1588' direct represents '4' with '-6507'
6502 6504 6506 6508 -6507 0
c Encoding variable: aux1589 with domain: int(0..2) (representing constraint ((x_00006_00001=3) + (x_00005_00003=3)))
c Both direct and order encoding.
c Var 'aux1589' order represents '0' with '6509'
c Var 'aux1589' direct represents '0' with '6509'
c Var 'aux1589' order represents '1' with '6510'
-6509 6510 0
c Var 'aux1589' direct represents '1' with '6511'
6509 -6510 6511 0
-6511 6510 0
-6511 -6509 0
c Var 'aux1589' direct represents '2' with '-6510'
6509 6511 -6510 0
c Encoding variable: aux1590 with domain: int(0..2) (representing constraint ((x_00005_00002=3) + (x_00006_00002=3)))
c Both direct and order encoding.
c Var 'aux1590' order represents '0' with '6512'
c Var 'aux1590' direct represents '0' with '6512'
c Var 'aux1590' order represents '1' with '6513'
-6512 6513 0
c Var 'aux1590' direct represents '1' with '6514'
6512 -6513 6514 0
-6514 6513 0
-6514 -6512 0
c Var 'aux1590' direct represents '2' with '-6513'
6512 6514 -6513 0
c Encoding variable: aux1591 with domain: int(0..2) (representing constraint ((x_00005_00001=3) + (x_00004_00001=3)))
c Both direct and order encoding.
c Var 'aux1591' order represents '0' with '6515'
c Var 'aux1591' direct represents '0' with '6515'
c Var 'aux1591' order represents '1' with '6516'
-6515 6516 0
c Var 'aux1591' direct represents '1' with '6517'
6515 -6516 6517 0
-6517 6516 0
-6517 -6515 0
c Var 'aux1591' direct represents '2' with '-6516'
6515 6517 -6516 0
c Encoding variable: aux1592 with domain: int(0..2) (representing constraint ((x_00004_00003=3) + (x_00004_00002=3)))
c Both direct and order encoding.
c Var 'aux1592' order represents '0' with '6518'
c Var 'aux1592' direct represents '0' with '6518'
c Var 'aux1592' order represents '1' with '6519'
-6518 6519 0
c Var 'aux1592' direct represents '1' with '6520'
6518 -6519 6520 0
-6520 6519 0
-6520 -6518 0
c Var 'aux1592' direct represents '2' with '-6519'
6518 6520 -6519 0
c Encoding variable: aux1593 with domain: int(0..3) (representing constraint ((x_00006_00003=3) + aux1592))
c Both direct and order encoding.
c Var 'aux1593' order represents '0' with '6521'
c Var 'aux1593' direct represents '0' with '6521'
c Var 'aux1593' order represents '1' with '6522'
-6521 6522 0
c Var 'aux1593' direct represents '1' with '6523'
6521 -6522 6523 0
-6523 6522 0
-6523 -6521 0
c Var 'aux1593' order represents '2' with '6524'
-6522 6524 0
c Var 'aux1593' direct represents '2' with '6525'
6522 -6524 6525 0
-6525 6524 0
-6525 -6522 0
c Var 'aux1593' direct represents '3' with '-6524'
6521 6523 6525 -6524 0
c Encoding variable: aux1594 with domain: int(0..4) (representing constraint (aux1589 + aux1591))
c Both direct and order encoding.
c Var 'aux1594' order represents '0' with '6526'
c Var 'aux1594' direct represents '0' with '6526'
c Var 'aux1594' order represents '1' with '6527'
-6526 6527 0
c Var 'aux1594' direct represents '1' with '6528'
6526 -6527 6528 0
-6528 6527 0
-6528 -6526 0
c Var 'aux1594' order represents '2' with '6529'
-6527 6529 0
c Var 'aux1594' direct represents '2' with '6530'
6527 -6529 6530 0
-6530 6529 0
-6530 -6527 0
c Var 'aux1594' order represents '3' with '6531'
-6529 6531 0
c Var 'aux1594' direct represents '3' with '6532'
6529 -6531 6532 0
-6532 6531 0
-6532 -6529 0
c Var 'aux1594' direct represents '4' with '-6531'
6526 6528 6530 6532 -6531 0
c Encoding variable: aux1595 with domain: int(0..2) (representing constraint ((x_00006_00001=4) + (x_00005_00003=4)))
c Both direct and order encoding.
c Var 'aux1595' order represents '0' with '6533'
c Var 'aux1595' direct represents '0' with '6533'
c Var 'aux1595' order represents '1' with '6534'
-6533 6534 0
c Var 'aux1595' direct represents '1' with '6535'
6533 -6534 6535 0
-6535 6534 0
-6535 -6533 0
c Var 'aux1595' direct represents '2' with '-6534'
6533 6535 -6534 0
c Encoding variable: aux1596 with domain: int(0..2) (representing constraint ((x_00005_00002=4) + (x_00006_00002=4)))
c Both direct and order encoding.
c Var 'aux1596' order represents '0' with '6536'
c Var 'aux1596' direct represents '0' with '6536'
c Var 'aux1596' order represents '1' with '6537'
-6536 6537 0
c Var 'aux1596' direct represents '1' with '6538'
6536 -6537 6538 0
-6538 6537 0
-6538 -6536 0
c Var 'aux1596' direct represents '2' with '-6537'
6536 6538 -6537 0
c Encoding variable: aux1597 with domain: int(0..2) (representing constraint ((x_00005_00001=4) + (x_00004_00001=4)))
c Both direct and order encoding.
c Var 'aux1597' order represents '0' with '6539'
c Var 'aux1597' direct represents '0' with '6539'
c Var 'aux1597' order represents '1' with '6540'
-6539 6540 0
c Var 'aux1597' direct represents '1' with '6541'
6539 -6540 6541 0
-6541 6540 0
-6541 -6539 0
c Var 'aux1597' direct represents '2' with '-6540'
6539 6541 -6540 0
c Encoding variable: aux1598 with domain: int(0..2) (representing constraint ((x_00004_00003=4) + (x_00004_00002=4)))
c Both direct and order encoding.
c Var 'aux1598' order represents '0' with '6542'
c Var 'aux1598' direct represents '0' with '6542'
c Var 'aux1598' order represents '1' with '6543'
-6542 6543 0
c Var 'aux1598' direct represents '1' with '6544'
6542 -6543 6544 0
-6544 6543 0
-6544 -6542 0
c Var 'aux1598' direct represents '2' with '-6543'
6542 6544 -6543 0
c Encoding variable: aux1599 with domain: int(0..3) (representing constraint ((x_00006_00003=4) + aux1598))
c Both direct and order encoding.
c Var 'aux1599' order represents '0' with '6545'
c Var 'aux1599' direct represents '0' with '6545'
c Var 'aux1599' order represents '1' with '6546'
-6545 6546 0
c Var 'aux1599' direct represents '1' with '6547'
6545 -6546 6547 0
-6547 6546 0
-6547 -6545 0
c Var 'aux1599' order represents '2' with '6548'
-6546 6548 0
c Var 'aux1599' direct represents '2' with '6549'
6546 -6548 6549 0
-6549 6548 0
-6549 -6546 0
c Var 'aux1599' direct represents '3' with '-6548'
6545 6547 6549 -6548 0
c Encoding variable: aux1600 with domain: int(0..4) (representing constraint (aux1595 + aux1597))
c Both direct and order encoding.
c Var 'aux1600' order represents '0' with '6550'
c Var 'aux1600' direct represents '0' with '6550'
c Var 'aux1600' order represents '1' with '6551'
-6550 6551 0
c Var 'aux1600' direct represents '1' with '6552'
6550 -6551 6552 0
-6552 6551 0
-6552 -6550 0
c Var 'aux1600' order represents '2' with '6553'
-6551 6553 0
c Var 'aux1600' direct represents '2' with '6554'
6551 -6553 6554 0
-6554 6553 0
-6554 -6551 0
c Var 'aux1600' order represents '3' with '6555'
-6553 6555 0
c Var 'aux1600' direct represents '3' with '6556'
6553 -6555 6556 0
-6556 6555 0
-6556 -6553 0
c Var 'aux1600' direct represents '4' with '-6555'
6550 6552 6554 6556 -6555 0
c Encoding variable: aux1601 with domain: int(0..2) (representing constraint ((x_00006_00001=5) + (x_00005_00003=5)))
c Both direct and order encoding.
c Var 'aux1601' order represents '0' with '6557'
c Var 'aux1601' direct represents '0' with '6557'
c Var 'aux1601' order represents '1' with '6558'
-6557 6558 0
c Var 'aux1601' direct represents '1' with '6559'
6557 -6558 6559 0
-6559 6558 0
-6559 -6557 0
c Var 'aux1601' direct represents '2' with '-6558'
6557 6559 -6558 0
c Encoding variable: aux1602 with domain: int(0..2) (representing constraint ((x_00005_00002=5) + (x_00006_00002=5)))
c Both direct and order encoding.
c Var 'aux1602' order represents '0' with '6560'
c Var 'aux1602' direct represents '0' with '6560'
c Var 'aux1602' order represents '1' with '6561'
-6560 6561 0
c Var 'aux1602' direct represents '1' with '6562'
6560 -6561 6562 0
-6562 6561 0
-6562 -6560 0
c Var 'aux1602' direct represents '2' with '-6561'
6560 6562 -6561 0
c Encoding variable: aux1603 with domain: int(0..2) (representing constraint ((x_00005_00001=5) + (x_00004_00001=5)))
c Both direct and order encoding.
c Var 'aux1603' order represents '0' with '6563'
c Var 'aux1603' direct represents '0' with '6563'
c Var 'aux1603' order represents '1' with '6564'
-6563 6564 0
c Var 'aux1603' direct represents '1' with '6565'
6563 -6564 6565 0
-6565 6564 0
-6565 -6563 0
c Var 'aux1603' direct represents '2' with '-6564'
6563 6565 -6564 0
c Encoding variable: aux1604 with domain: int(0..2) (representing constraint ((x_00004_00003=5) + (x_00004_00002=5)))
c Both direct and order encoding.
c Var 'aux1604' order represents '0' with '6566'
c Var 'aux1604' direct represents '0' with '6566'
c Var 'aux1604' order represents '1' with '6567'
-6566 6567 0
c Var 'aux1604' direct represents '1' with '6568'
6566 -6567 6568 0
-6568 6567 0
-6568 -6566 0
c Var 'aux1604' direct represents '2' with '-6567'
6566 6568 -6567 0
c Encoding variable: aux1605 with domain: int(0..3) (representing constraint ((x_00006_00003=5) + aux1604))
c Both direct and order encoding.
c Var 'aux1605' order represents '0' with '6569'
c Var 'aux1605' direct represents '0' with '6569'
c Var 'aux1605' order represents '1' with '6570'
-6569 6570 0
c Var 'aux1605' direct represents '1' with '6571'
6569 -6570 6571 0
-6571 6570 0
-6571 -6569 0
c Var 'aux1605' order represents '2' with '6572'
-6570 6572 0
c Var 'aux1605' direct represents '2' with '6573'
6570 -6572 6573 0
-6573 6572 0
-6573 -6570 0
c Var 'aux1605' direct represents '3' with '-6572'
6569 6571 6573 -6572 0
c Encoding variable: aux1606 with domain: int(0..4) (representing constraint (aux1601 + aux1603))
c Both direct and order encoding.
c Var 'aux1606' order represents '0' with '6574'
c Var 'aux1606' direct represents '0' with '6574'
c Var 'aux1606' order represents '1' with '6575'
-6574 6575 0
c Var 'aux1606' direct represents '1' with '6576'
6574 -6575 6576 0
-6576 6575 0
-6576 -6574 0
c Var 'aux1606' order represents '2' with '6577'
-6575 6577 0
c Var 'aux1606' direct represents '2' with '6578'
6575 -6577 6578 0
-6578 6577 0
-6578 -6575 0
c Var 'aux1606' order represents '3' with '6579'
-6577 6579 0
c Var 'aux1606' direct represents '3' with '6580'
6577 -6579 6580 0
-6580 6579 0
-6580 -6577 0
c Var 'aux1606' direct represents '4' with '-6579'
6574 6576 6578 6580 -6579 0
c Encoding variable: aux1607 with domain: int(0..2) (representing constraint ((x_00006_00001=6) + (x_00005_00003=6)))
c Both direct and order encoding.
c Var 'aux1607' order represents '0' with '6581'
c Var 'aux1607' direct represents '0' with '6581'
c Var 'aux1607' order represents '1' with '6582'
-6581 6582 0
c Var 'aux1607' direct represents '1' with '6583'
6581 -6582 6583 0
-6583 6582 0
-6583 -6581 0
c Var 'aux1607' direct represents '2' with '-6582'
6581 6583 -6582 0
c Encoding variable: aux1608 with domain: int(0..2) (representing constraint ((x_00005_00002=6) + (x_00006_00002=6)))
c Both direct and order encoding.
c Var 'aux1608' order represents '0' with '6584'
c Var 'aux1608' direct represents '0' with '6584'
c Var 'aux1608' order represents '1' with '6585'
-6584 6585 0
c Var 'aux1608' direct represents '1' with '6586'
6584 -6585 6586 0
-6586 6585 0
-6586 -6584 0
c Var 'aux1608' direct represents '2' with '-6585'
6584 6586 -6585 0
c Encoding variable: aux1609 with domain: int(0..2) (representing constraint ((x_00005_00001=6) + (x_00004_00001=6)))
c Both direct and order encoding.
c Var 'aux1609' order represents '0' with '6587'
c Var 'aux1609' direct represents '0' with '6587'
c Var 'aux1609' order represents '1' with '6588'
-6587 6588 0
c Var 'aux1609' direct represents '1' with '6589'
6587 -6588 6589 0
-6589 6588 0
-6589 -6587 0
c Var 'aux1609' direct represents '2' with '-6588'
6587 6589 -6588 0
c Encoding variable: aux1610 with domain: int(0..2) (representing constraint ((x_00004_00003=6) + (x_00004_00002=6)))
c Both direct and order encoding.
c Var 'aux1610' order represents '0' with '6590'
c Var 'aux1610' direct represents '0' with '6590'
c Var 'aux1610' order represents '1' with '6591'
-6590 6591 0
c Var 'aux1610' direct represents '1' with '6592'
6590 -6591 6592 0
-6592 6591 0
-6592 -6590 0
c Var 'aux1610' direct represents '2' with '-6591'
6590 6592 -6591 0
c Encoding variable: aux1611 with domain: int(0..3) (representing constraint ((x_00006_00003=6) + aux1610))
c Both direct and order encoding.
c Var 'aux1611' order represents '0' with '6593'
c Var 'aux1611' direct represents '0' with '6593'
c Var 'aux1611' order represents '1' with '6594'
-6593 6594 0
c Var 'aux1611' direct represents '1' with '6595'
6593 -6594 6595 0
-6595 6594 0
-6595 -6593 0
c Var 'aux1611' order represents '2' with '6596'
-6594 6596 0
c Var 'aux1611' direct represents '2' with '6597'
6594 -6596 6597 0
-6597 6596 0
-6597 -6594 0
c Var 'aux1611' direct represents '3' with '-6596'
6593 6595 6597 -6596 0
c Encoding variable: aux1612 with domain: int(0..4) (representing constraint (aux1607 + aux1609))
c Both direct and order encoding.
c Var 'aux1612' order represents '0' with '6598'
c Var 'aux1612' direct represents '0' with '6598'
c Var 'aux1612' order represents '1' with '6599'
-6598 6599 0
c Var 'aux1612' direct represents '1' with '6600'
6598 -6599 6600 0
-6600 6599 0
-6600 -6598 0
c Var 'aux1612' order represents '2' with '6601'
-6599 6601 0
c Var 'aux1612' direct represents '2' with '6602'
6599 -6601 6602 0
-6602 6601 0
-6602 -6599 0
c Var 'aux1612' order represents '3' with '6603'
-6601 6603 0
c Var 'aux1612' direct represents '3' with '6604'
6601 -6603 6604 0
-6604 6603 0
-6604 -6601 0
c Var 'aux1612' direct represents '4' with '-6603'
6598 6600 6602 6604 -6603 0
c Encoding variable: aux1613 with domain: int(0..2) (representing constraint ((x_00006_00001=7) + (x_00005_00003=7)))
c Both direct and order encoding.
c Var 'aux1613' order represents '0' with '6605'
c Var 'aux1613' direct represents '0' with '6605'
c Var 'aux1613' order represents '1' with '6606'
-6605 6606 0
c Var 'aux1613' direct represents '1' with '6607'
6605 -6606 6607 0
-6607 6606 0
-6607 -6605 0
c Var 'aux1613' direct represents '2' with '-6606'
6605 6607 -6606 0
c Encoding variable: aux1614 with domain: int(0..2) (representing constraint ((x_00005_00002=7) + (x_00006_00002=7)))
c Both direct and order encoding.
c Var 'aux1614' order represents '0' with '6608'
c Var 'aux1614' direct represents '0' with '6608'
c Var 'aux1614' order represents '1' with '6609'
-6608 6609 0
c Var 'aux1614' direct represents '1' with '6610'
6608 -6609 6610 0
-6610 6609 0
-6610 -6608 0
c Var 'aux1614' direct represents '2' with '-6609'
6608 6610 -6609 0
c Encoding variable: aux1615 with domain: int(0..2) (representing constraint ((x_00005_00001=7) + (x_00004_00001=7)))
c Both direct and order encoding.
c Var 'aux1615' order represents '0' with '6611'
c Var 'aux1615' direct represents '0' with '6611'
c Var 'aux1615' order represents '1' with '6612'
-6611 6612 0
c Var 'aux1615' direct represents '1' with '6613'
6611 -6612 6613 0
-6613 6612 0
-6613 -6611 0
c Var 'aux1615' direct represents '2' with '-6612'
6611 6613 -6612 0
c Encoding variable: aux1616 with domain: int(0..2) (representing constraint ((x_00004_00003=7) + (x_00004_00002=7)))
c Both direct and order encoding.
c Var 'aux1616' order represents '0' with '6614'
c Var 'aux1616' direct represents '0' with '6614'
c Var 'aux1616' order represents '1' with '6615'
-6614 6615 0
c Var 'aux1616' direct represents '1' with '6616'
6614 -6615 6616 0
-6616 6615 0
-6616 -6614 0
c Var 'aux1616' direct represents '2' with '-6615'
6614 6616 -6615 0
c Encoding variable: aux1617 with domain: int(0..3) (representing constraint ((x_00006_00003=7) + aux1616))
c Both direct and order encoding.
c Var 'aux1617' order represents '0' with '6617'
c Var 'aux1617' direct represents '0' with '6617'
c Var 'aux1617' order represents '1' with '6618'
-6617 6618 0
c Var 'aux1617' direct represents '1' with '6619'
6617 -6618 6619 0
-6619 6618 0
-6619 -6617 0
c Var 'aux1617' order represents '2' with '6620'
-6618 6620 0
c Var 'aux1617' direct represents '2' with '6621'
6618 -6620 6621 0
-6621 6620 0
-6621 -6618 0
c Var 'aux1617' direct represents '3' with '-6620'
6617 6619 6621 -6620 0
c Encoding variable: aux1618 with domain: int(0..4) (representing constraint (aux1613 + aux1615))
c Both direct and order encoding.
c Var 'aux1618' order represents '0' with '6622'
c Var 'aux1618' direct represents '0' with '6622'
c Var 'aux1618' order represents '1' with '6623'
-6622 6623 0
c Var 'aux1618' direct represents '1' with '6624'
6622 -6623 6624 0
-6624 6623 0
-6624 -6622 0
c Var 'aux1618' order represents '2' with '6625'
-6623 6625 0
c Var 'aux1618' direct represents '2' with '6626'
6623 -6625 6626 0
-6626 6625 0
-6626 -6623 0
c Var 'aux1618' order represents '3' with '6627'
-6625 6627 0
c Var 'aux1618' direct represents '3' with '6628'
6625 -6627 6628 0
-6628 6627 0
-6628 -6625 0
c Var 'aux1618' direct represents '4' with '-6627'
6622 6624 6626 6628 -6627 0
c Encoding variable: aux1619 with domain: int(0..2) (representing constraint ((x_00006_00001=8) + (x_00005_00003=8)))
c Both direct and order encoding.
c Var 'aux1619' order represents '0' with '6629'
c Var 'aux1619' direct represents '0' with '6629'
c Var 'aux1619' order represents '1' with '6630'
-6629 6630 0
c Var 'aux1619' direct represents '1' with '6631'
6629 -6630 6631 0
-6631 6630 0
-6631 -6629 0
c Var 'aux1619' direct represents '2' with '-6630'
6629 6631 -6630 0
c Encoding variable: aux1620 with domain: int(0..2) (representing constraint ((x_00005_00002=8) + (x_00006_00002=8)))
c Both direct and order encoding.
c Var 'aux1620' order represents '0' with '6632'
c Var 'aux1620' direct represents '0' with '6632'
c Var 'aux1620' order represents '1' with '6633'
-6632 6633 0
c Var 'aux1620' direct represents '1' with '6634'
6632 -6633 6634 0
-6634 6633 0
-6634 -6632 0
c Var 'aux1620' direct represents '2' with '-6633'
6632 6634 -6633 0
c Encoding variable: aux1621 with domain: int(0..2) (representing constraint ((x_00005_00001=8) + (x_00004_00001=8)))
c Both direct and order encoding.
c Var 'aux1621' order represents '0' with '6635'
c Var 'aux1621' direct represents '0' with '6635'
c Var 'aux1621' order represents '1' with '6636'
-6635 6636 0
c Var 'aux1621' direct represents '1' with '6637'
6635 -6636 6637 0
-6637 6636 0
-6637 -6635 0
c Var 'aux1621' direct represents '2' with '-6636'
6635 6637 -6636 0
c Encoding variable: aux1622 with domain: int(0..2) (representing constraint ((x_00004_00003=8) + (x_00004_00002=8)))
c Both direct and order encoding.
c Var 'aux1622' order represents '0' with '6638'
c Var 'aux1622' direct represents '0' with '6638'
c Var 'aux1622' order represents '1' with '6639'
-6638 6639 0
c Var 'aux1622' direct represents '1' with '6640'
6638 -6639 6640 0
-6640 6639 0
-6640 -6638 0
c Var 'aux1622' direct represents '2' with '-6639'
6638 6640 -6639 0
c Encoding variable: aux1623 with domain: int(0..3) (representing constraint ((x_00006_00003=8) + aux1622))
c Both direct and order encoding.
c Var 'aux1623' order represents '0' with '6641'
c Var 'aux1623' direct represents '0' with '6641'
c Var 'aux1623' order represents '1' with '6642'
-6641 6642 0
c Var 'aux1623' direct represents '1' with '6643'
6641 -6642 6643 0
-6643 6642 0
-6643 -6641 0
c Var 'aux1623' order represents '2' with '6644'
-6642 6644 0
c Var 'aux1623' direct represents '2' with '6645'
6642 -6644 6645 0
-6645 6644 0
-6645 -6642 0
c Var 'aux1623' direct represents '3' with '-6644'
6641 6643 6645 -6644 0
c Encoding variable: aux1624 with domain: int(0..4) (representing constraint (aux1619 + aux1621))
c Both direct and order encoding.
c Var 'aux1624' order represents '0' with '6646'
c Var 'aux1624' direct represents '0' with '6646'
c Var 'aux1624' order represents '1' with '6647'
-6646 6647 0
c Var 'aux1624' direct represents '1' with '6648'
6646 -6647 6648 0
-6648 6647 0
-6648 -6646 0
c Var 'aux1624' order represents '2' with '6649'
-6647 6649 0
c Var 'aux1624' direct represents '2' with '6650'
6647 -6649 6650 0
-6650 6649 0
-6650 -6647 0
c Var 'aux1624' order represents '3' with '6651'
-6649 6651 0
c Var 'aux1624' direct represents '3' with '6652'
6649 -6651 6652 0
-6652 6651 0
-6652 -6649 0
c Var 'aux1624' direct represents '4' with '-6651'
6646 6648 6650 6652 -6651 0
c Encoding variable: aux1625 with domain: int(0..2) (representing constraint ((x_00006_00001=9) + (x_00005_00003=9)))
c Both direct and order encoding.
c Var 'aux1625' order represents '0' with '6653'
c Var 'aux1625' direct represents '0' with '6653'
c Var 'aux1625' order represents '1' with '6654'
-6653 6654 0
c Var 'aux1625' direct represents '1' with '6655'
6653 -6654 6655 0
-6655 6654 0
-6655 -6653 0
c Var 'aux1625' direct represents '2' with '-6654'
6653 6655 -6654 0
c Encoding variable: aux1626 with domain: int(0..2) (representing constraint ((x_00005_00002=9) + (x_00006_00002=9)))
c Both direct and order encoding.
c Var 'aux1626' order represents '0' with '6656'
c Var 'aux1626' direct represents '0' with '6656'
c Var 'aux1626' order represents '1' with '6657'
-6656 6657 0
c Var 'aux1626' direct represents '1' with '6658'
6656 -6657 6658 0
-6658 6657 0
-6658 -6656 0
c Var 'aux1626' direct represents '2' with '-6657'
6656 6658 -6657 0
c Encoding variable: aux1627 with domain: int(0..2) (representing constraint ((x_00005_00001=9) + (x_00004_00001=9)))
c Both direct and order encoding.
c Var 'aux1627' order represents '0' with '6659'
c Var 'aux1627' direct represents '0' with '6659'
c Var 'aux1627' order represents '1' with '6660'
-6659 6660 0
c Var 'aux1627' direct represents '1' with '6661'
6659 -6660 6661 0
-6661 6660 0
-6661 -6659 0
c Var 'aux1627' direct represents '2' with '-6660'
6659 6661 -6660 0
c Encoding variable: aux1628 with domain: int(0..2) (representing constraint ((x_00004_00003=9) + (x_00004_00002=9)))
c Both direct and order encoding.
c Var 'aux1628' order represents '0' with '6662'
c Var 'aux1628' direct represents '0' with '6662'
c Var 'aux1628' order represents '1' with '6663'
-6662 6663 0
c Var 'aux1628' direct represents '1' with '6664'
6662 -6663 6664 0
-6664 6663 0
-6664 -6662 0
c Var 'aux1628' direct represents '2' with '-6663'
6662 6664 -6663 0
c Encoding variable: aux1629 with domain: int(0..3) (representing constraint ((x_00006_00003=9) + aux1628))
c Both direct and order encoding.
c Var 'aux1629' order represents '0' with '6665'
c Var 'aux1629' direct represents '0' with '6665'
c Var 'aux1629' order represents '1' with '6666'
-6665 6666 0
c Var 'aux1629' direct represents '1' with '6667'
6665 -6666 6667 0
-6667 6666 0
-6667 -6665 0
c Var 'aux1629' order represents '2' with '6668'
-6666 6668 0
c Var 'aux1629' direct represents '2' with '6669'
6666 -6668 6669 0
-6669 6668 0
-6669 -6666 0
c Var 'aux1629' direct represents '3' with '-6668'
6665 6667 6669 -6668 0
c Encoding variable: aux1630 with domain: int(0..4) (representing constraint (aux1625 + aux1627))
c Both direct and order encoding.
c Var 'aux1630' order represents '0' with '6670'
c Var 'aux1630' direct represents '0' with '6670'
c Var 'aux1630' order represents '1' with '6671'
-6670 6671 0
c Var 'aux1630' direct represents '1' with '6672'
6670 -6671 6672 0
-6672 6671 0
-6672 -6670 0
c Var 'aux1630' order represents '2' with '6673'
-6671 6673 0
c Var 'aux1630' direct represents '2' with '6674'
6671 -6673 6674 0
-6674 6673 0
-6674 -6671 0
c Var 'aux1630' order represents '3' with '6675'
-6673 6675 0
c Var 'aux1630' direct represents '3' with '6676'
6673 -6675 6676 0
-6676 6675 0
-6676 -6673 0
c Var 'aux1630' direct represents '4' with '-6675'
6670 6672 6674 6676 -6675 0
c Encoding variable: aux1631 with domain: int(0..2) (representing constraint ((x_00006_00004=1) + (x_00005_00006=1)))
c Both direct and order encoding.
c Var 'aux1631' order represents '0' with '6677'
c Var 'aux1631' direct represents '0' with '6677'
c Var 'aux1631' order represents '1' with '6678'
-6677 6678 0
c Var 'aux1631' direct represents '1' with '6679'
6677 -6678 6679 0
-6679 6678 0
-6679 -6677 0
c Var 'aux1631' direct represents '2' with '-6678'
6677 6679 -6678 0
c Encoding variable: aux1632 with domain: int(0..2) (representing constraint ((x_00005_00005=1) + (x_00006_00005=1)))
c Both direct and order encoding.
c Var 'aux1632' order represents '0' with '6680'
c Var 'aux1632' direct represents '0' with '6680'
c Var 'aux1632' order represents '1' with '6681'
-6680 6681 0
c Var 'aux1632' direct represents '1' with '6682'
6680 -6681 6682 0
-6682 6681 0
-6682 -6680 0
c Var 'aux1632' direct represents '2' with '-6681'
6680 6682 -6681 0
c Encoding variable: aux1633 with domain: int(0..2) (representing constraint ((x_00005_00004=1) + (x_00004_00004=1)))
c Both direct and order encoding.
c Var 'aux1633' order represents '0' with '6683'
c Var 'aux1633' direct represents '0' with '6683'
c Var 'aux1633' order represents '1' with '6684'
-6683 6684 0
c Var 'aux1633' direct represents '1' with '6685'
6683 -6684 6685 0
-6685 6684 0
-6685 -6683 0
c Var 'aux1633' direct represents '2' with '-6684'
6683 6685 -6684 0
c Encoding variable: aux1634 with domain: int(0..2) (representing constraint ((x_00004_00006=1) + (x_00004_00005=1)))
c Both direct and order encoding.
c Var 'aux1634' order represents '0' with '6686'
c Var 'aux1634' direct represents '0' with '6686'
c Var 'aux1634' order represents '1' with '6687'
-6686 6687 0
c Var 'aux1634' direct represents '1' with '6688'
6686 -6687 6688 0
-6688 6687 0
-6688 -6686 0
c Var 'aux1634' direct represents '2' with '-6687'
6686 6688 -6687 0
c Encoding variable: aux1635 with domain: int(0..3) (representing constraint ((x_00006_00006=1) + aux1634))
c Both direct and order encoding.
c Var 'aux1635' order represents '0' with '6689'
c Var 'aux1635' direct represents '0' with '6689'
c Var 'aux1635' order represents '1' with '6690'
-6689 6690 0
c Var 'aux1635' direct represents '1' with '6691'
6689 -6690 6691 0
-6691 6690 0
-6691 -6689 0
c Var 'aux1635' order represents '2' with '6692'
-6690 6692 0
c Var 'aux1635' direct represents '2' with '6693'
6690 -6692 6693 0
-6693 6692 0
-6693 -6690 0
c Var 'aux1635' direct represents '3' with '-6692'
6689 6691 6693 -6692 0
c Encoding variable: aux1636 with domain: int(0..4) (representing constraint (aux1631 + aux1633))
c Both direct and order encoding.
c Var 'aux1636' order represents '0' with '6694'
c Var 'aux1636' direct represents '0' with '6694'
c Var 'aux1636' order represents '1' with '6695'
-6694 6695 0
c Var 'aux1636' direct represents '1' with '6696'
6694 -6695 6696 0
-6696 6695 0
-6696 -6694 0
c Var 'aux1636' order represents '2' with '6697'
-6695 6697 0
c Var 'aux1636' direct represents '2' with '6698'
6695 -6697 6698 0
-6698 6697 0
-6698 -6695 0
c Var 'aux1636' order represents '3' with '6699'
-6697 6699 0
c Var 'aux1636' direct represents '3' with '6700'
6697 -6699 6700 0
-6700 6699 0
-6700 -6697 0
c Var 'aux1636' direct represents '4' with '-6699'
6694 6696 6698 6700 -6699 0
c Encoding variable: aux1637 with domain: int(0..2) (representing constraint ((x_00006_00004=2) + (x_00005_00006=2)))
c Both direct and order encoding.
c Var 'aux1637' order represents '0' with '6701'
c Var 'aux1637' direct represents '0' with '6701'
c Var 'aux1637' order represents '1' with '6702'
-6701 6702 0
c Var 'aux1637' direct represents '1' with '6703'
6701 -6702 6703 0
-6703 6702 0
-6703 -6701 0
c Var 'aux1637' direct represents '2' with '-6702'
6701 6703 -6702 0
c Encoding variable: aux1638 with domain: int(0..2) (representing constraint ((x_00005_00005=2) + (x_00006_00005=2)))
c Both direct and order encoding.
c Var 'aux1638' order represents '0' with '6704'
c Var 'aux1638' direct represents '0' with '6704'
c Var 'aux1638' order represents '1' with '6705'
-6704 6705 0
c Var 'aux1638' direct represents '1' with '6706'
6704 -6705 6706 0
-6706 6705 0
-6706 -6704 0
c Var 'aux1638' direct represents '2' with '-6705'
6704 6706 -6705 0
c Encoding variable: aux1639 with domain: int(0..2) (representing constraint ((x_00005_00004=2) + (x_00004_00004=2)))
c Both direct and order encoding.
c Var 'aux1639' order represents '0' with '6707'
c Var 'aux1639' direct represents '0' with '6707'
c Var 'aux1639' order represents '1' with '6708'
-6707 6708 0
c Var 'aux1639' direct represents '1' with '6709'
6707 -6708 6709 0
-6709 6708 0
-6709 -6707 0
c Var 'aux1639' direct represents '2' with '-6708'
6707 6709 -6708 0
c Encoding variable: aux1640 with domain: int(0..2) (representing constraint ((x_00004_00006=2) + (x_00004_00005=2)))
c Both direct and order encoding.
c Var 'aux1640' order represents '0' with '6710'
c Var 'aux1640' direct represents '0' with '6710'
c Var 'aux1640' order represents '1' with '6711'
-6710 6711 0
c Var 'aux1640' direct represents '1' with '6712'
6710 -6711 6712 0
-6712 6711 0
-6712 -6710 0
c Var 'aux1640' direct represents '2' with '-6711'
6710 6712 -6711 0
c Encoding variable: aux1641 with domain: int(0..3) (representing constraint ((x_00006_00006=2) + aux1640))
c Both direct and order encoding.
c Var 'aux1641' order represents '0' with '6713'
c Var 'aux1641' direct represents '0' with '6713'
c Var 'aux1641' order represents '1' with '6714'
-6713 6714 0
c Var 'aux1641' direct represents '1' with '6715'
6713 -6714 6715 0
-6715 6714 0
-6715 -6713 0
c Var 'aux1641' order represents '2' with '6716'
-6714 6716 0
c Var 'aux1641' direct represents '2' with '6717'
6714 -6716 6717 0
-6717 6716 0
-6717 -6714 0
c Var 'aux1641' direct represents '3' with '-6716'
6713 6715 6717 -6716 0
c Encoding variable: aux1642 with domain: int(0..4) (representing constraint (aux1637 + aux1639))
c Both direct and order encoding.
c Var 'aux1642' order represents '0' with '6718'
c Var 'aux1642' direct represents '0' with '6718'
c Var 'aux1642' order represents '1' with '6719'
-6718 6719 0
c Var 'aux1642' direct represents '1' with '6720'
6718 -6719 6720 0
-6720 6719 0
-6720 -6718 0
c Var 'aux1642' order represents '2' with '6721'
-6719 6721 0
c Var 'aux1642' direct represents '2' with '6722'
6719 -6721 6722 0
-6722 6721 0
-6722 -6719 0
c Var 'aux1642' order represents '3' with '6723'
-6721 6723 0
c Var 'aux1642' direct represents '3' with '6724'
6721 -6723 6724 0
-6724 6723 0
-6724 -6721 0
c Var 'aux1642' direct represents '4' with '-6723'
6718 6720 6722 6724 -6723 0
c Encoding variable: aux1643 with domain: int(0..2) (representing constraint ((x_00006_00004=3) + (x_00005_00006=3)))
c Both direct and order encoding.
c Var 'aux1643' order represents '0' with '6725'
c Var 'aux1643' direct represents '0' with '6725'
c Var 'aux1643' order represents '1' with '6726'
-6725 6726 0
c Var 'aux1643' direct represents '1' with '6727'
6725 -6726 6727 0
-6727 6726 0
-6727 -6725 0
c Var 'aux1643' direct represents '2' with '-6726'
6725 6727 -6726 0
c Encoding variable: aux1644 with domain: int(0..2) (representing constraint ((x_00005_00005=3) + (x_00006_00005=3)))
c Both direct and order encoding.
c Var 'aux1644' order represents '0' with '6728'
c Var 'aux1644' direct represents '0' with '6728'
c Var 'aux1644' order represents '1' with '6729'
-6728 6729 0
c Var 'aux1644' direct represents '1' with '6730'
6728 -6729 6730 0
-6730 6729 0
-6730 -6728 0
c Var 'aux1644' direct represents '2' with '-6729'
6728 6730 -6729 0
c Encoding variable: aux1645 with domain: int(0..2) (representing constraint ((x_00005_00004=3) + (x_00004_00004=3)))
c Both direct and order encoding.
c Var 'aux1645' order represents '0' with '6731'
c Var 'aux1645' direct represents '0' with '6731'
c Var 'aux1645' order represents '1' with '6732'
-6731 6732 0
c Var 'aux1645' direct represents '1' with '6733'
6731 -6732 6733 0
-6733 6732 0
-6733 -6731 0
c Var 'aux1645' direct represents '2' with '-6732'
6731 6733 -6732 0
c Encoding variable: aux1646 with domain: int(0..2) (representing constraint ((x_00004_00006=3) + (x_00004_00005=3)))
c Both direct and order encoding.
c Var 'aux1646' order represents '0' with '6734'
c Var 'aux1646' direct represents '0' with '6734'
c Var 'aux1646' order represents '1' with '6735'
-6734 6735 0
c Var 'aux1646' direct represents '1' with '6736'
6734 -6735 6736 0
-6736 6735 0
-6736 -6734 0
c Var 'aux1646' direct represents '2' with '-6735'
6734 6736 -6735 0
c Encoding variable: aux1647 with domain: int(0..3) (representing constraint ((x_00006_00006=3) + aux1646))
c Both direct and order encoding.
c Var 'aux1647' order represents '0' with '6737'
c Var 'aux1647' direct represents '0' with '6737'
c Var 'aux1647' order represents '1' with '6738'
-6737 6738 0
c Var 'aux1647' direct represents '1' with '6739'
6737 -6738 6739 0
-6739 6738 0
-6739 -6737 0
c Var 'aux1647' order represents '2' with '6740'
-6738 6740 0
c Var 'aux1647' direct represents '2' with '6741'
6738 -6740 6741 0
-6741 6740 0
-6741 -6738 0
c Var 'aux1647' direct represents '3' with '-6740'
6737 6739 6741 -6740 0
c Encoding variable: aux1648 with domain: int(0..4) (representing constraint (aux1643 + aux1645))
c Both direct and order encoding.
c Var 'aux1648' order represents '0' with '6742'
c Var 'aux1648' direct represents '0' with '6742'
c Var 'aux1648' order represents '1' with '6743'
-6742 6743 0
c Var 'aux1648' direct represents '1' with '6744'
6742 -6743 6744 0
-6744 6743 0
-6744 -6742 0
c Var 'aux1648' order represents '2' with '6745'
-6743 6745 0
c Var 'aux1648' direct represents '2' with '6746'
6743 -6745 6746 0
-6746 6745 0
-6746 -6743 0
c Var 'aux1648' order represents '3' with '6747'
-6745 6747 0
c Var 'aux1648' direct represents '3' with '6748'
6745 -6747 6748 0
-6748 6747 0
-6748 -6745 0
c Var 'aux1648' direct represents '4' with '-6747'
6742 6744 6746 6748 -6747 0
c Encoding variable: aux1649 with domain: int(0..2) (representing constraint ((x_00006_00004=4) + (x_00005_00006=4)))
c Both direct and order encoding.
c Var 'aux1649' order represents '0' with '6749'
c Var 'aux1649' direct represents '0' with '6749'
c Var 'aux1649' order represents '1' with '6750'
-6749 6750 0
c Var 'aux1649' direct represents '1' with '6751'
6749 -6750 6751 0
-6751 6750 0
-6751 -6749 0
c Var 'aux1649' direct represents '2' with '-6750'
6749 6751 -6750 0
c Encoding variable: aux1650 with domain: int(0..2) (representing constraint ((x_00005_00005=4) + (x_00006_00005=4)))
c Both direct and order encoding.
c Var 'aux1650' order represents '0' with '6752'
c Var 'aux1650' direct represents '0' with '6752'
c Var 'aux1650' order represents '1' with '6753'
-6752 6753 0
c Var 'aux1650' direct represents '1' with '6754'
6752 -6753 6754 0
-6754 6753 0
-6754 -6752 0
c Var 'aux1650' direct represents '2' with '-6753'
6752 6754 -6753 0
c Encoding variable: aux1651 with domain: int(0..2) (representing constraint ((x_00005_00004=4) + (x_00004_00004=4)))
c Both direct and order encoding.
c Var 'aux1651' order represents '0' with '6755'
c Var 'aux1651' direct represents '0' with '6755'
c Var 'aux1651' order represents '1' with '6756'
-6755 6756 0
c Var 'aux1651' direct represents '1' with '6757'
6755 -6756 6757 0
-6757 6756 0
-6757 -6755 0
c Var 'aux1651' direct represents '2' with '-6756'
6755 6757 -6756 0
c Encoding variable: aux1652 with domain: int(0..2) (representing constraint ((x_00004_00006=4) + (x_00004_00005=4)))
c Both direct and order encoding.
c Var 'aux1652' order represents '0' with '6758'
c Var 'aux1652' direct represents '0' with '6758'
c Var 'aux1652' order represents '1' with '6759'
-6758 6759 0
c Var 'aux1652' direct represents '1' with '6760'
6758 -6759 6760 0
-6760 6759 0
-6760 -6758 0
c Var 'aux1652' direct represents '2' with '-6759'
6758 6760 -6759 0
c Encoding variable: aux1653 with domain: int(0..3) (representing constraint ((x_00006_00006=4) + aux1652))
c Both direct and order encoding.
c Var 'aux1653' order represents '0' with '6761'
c Var 'aux1653' direct represents '0' with '6761'
c Var 'aux1653' order represents '1' with '6762'
-6761 6762 0
c Var 'aux1653' direct represents '1' with '6763'
6761 -6762 6763 0
-6763 6762 0
-6763 -6761 0
c Var 'aux1653' order represents '2' with '6764'
-6762 6764 0
c Var 'aux1653' direct represents '2' with '6765'
6762 -6764 6765 0
-6765 6764 0
-6765 -6762 0
c Var 'aux1653' direct represents '3' with '-6764'
6761 6763 6765 -6764 0
c Encoding variable: aux1654 with domain: int(0..4) (representing constraint (aux1649 + aux1651))
c Both direct and order encoding.
c Var 'aux1654' order represents '0' with '6766'
c Var 'aux1654' direct represents '0' with '6766'
c Var 'aux1654' order represents '1' with '6767'
-6766 6767 0
c Var 'aux1654' direct represents '1' with '6768'
6766 -6767 6768 0
-6768 6767 0
-6768 -6766 0
c Var 'aux1654' order represents '2' with '6769'
-6767 6769 0
c Var 'aux1654' direct represents '2' with '6770'
6767 -6769 6770 0
-6770 6769 0
-6770 -6767 0
c Var 'aux1654' order represents '3' with '6771'
-6769 6771 0
c Var 'aux1654' direct represents '3' with '6772'
6769 -6771 6772 0
-6772 6771 0
-6772 -6769 0
c Var 'aux1654' direct represents '4' with '-6771'
6766 6768 6770 6772 -6771 0
c Encoding variable: aux1655 with domain: int(0..2) (representing constraint ((x_00006_00004=5) + (x_00005_00006=5)))
c Both direct and order encoding.
c Var 'aux1655' order represents '0' with '6773'
c Var 'aux1655' direct represents '0' with '6773'
c Var 'aux1655' order represents '1' with '6774'
-6773 6774 0
c Var 'aux1655' direct represents '1' with '6775'
6773 -6774 6775 0
-6775 6774 0
-6775 -6773 0
c Var 'aux1655' direct represents '2' with '-6774'
6773 6775 -6774 0
c Encoding variable: aux1656 with domain: int(0..2) (representing constraint ((x_00005_00005=5) + (x_00006_00005=5)))
c Both direct and order encoding.
c Var 'aux1656' order represents '0' with '6776'
c Var 'aux1656' direct represents '0' with '6776'
c Var 'aux1656' order represents '1' with '6777'
-6776 6777 0
c Var 'aux1656' direct represents '1' with '6778'
6776 -6777 6778 0
-6778 6777 0
-6778 -6776 0
c Var 'aux1656' direct represents '2' with '-6777'
6776 6778 -6777 0
c Encoding variable: aux1657 with domain: int(0..2) (representing constraint ((x_00005_00004=5) + (x_00004_00004=5)))
c Both direct and order encoding.
c Var 'aux1657' order represents '0' with '6779'
c Var 'aux1657' direct represents '0' with '6779'
c Var 'aux1657' order represents '1' with '6780'
-6779 6780 0
c Var 'aux1657' direct represents '1' with '6781'
6779 -6780 6781 0
-6781 6780 0
-6781 -6779 0
c Var 'aux1657' direct represents '2' with '-6780'
6779 6781 -6780 0
c Encoding variable: aux1658 with domain: int(0..2) (representing constraint ((x_00004_00006=5) + (x_00004_00005=5)))
c Both direct and order encoding.
c Var 'aux1658' order represents '0' with '6782'
c Var 'aux1658' direct represents '0' with '6782'
c Var 'aux1658' order represents '1' with '6783'
-6782 6783 0
c Var 'aux1658' direct represents '1' with '6784'
6782 -6783 6784 0
-6784 6783 0
-6784 -6782 0
c Var 'aux1658' direct represents '2' with '-6783'
6782 6784 -6783 0
c Encoding variable: aux1659 with domain: int(0..3) (representing constraint ((x_00006_00006=5) + aux1658))
c Both direct and order encoding.
c Var 'aux1659' order represents '0' with '6785'
c Var 'aux1659' direct represents '0' with '6785'
c Var 'aux1659' order represents '1' with '6786'
-6785 6786 0
c Var 'aux1659' direct represents '1' with '6787'
6785 -6786 6787 0
-6787 6786 0
-6787 -6785 0
c Var 'aux1659' order represents '2' with '6788'
-6786 6788 0
c Var 'aux1659' direct represents '2' with '6789'
6786 -6788 6789 0
-6789 6788 0
-6789 -6786 0
c Var 'aux1659' direct represents '3' with '-6788'
6785 6787 6789 -6788 0
c Encoding variable: aux1660 with domain: int(0..4) (representing constraint (aux1655 + aux1657))
c Both direct and order encoding.
c Var 'aux1660' order represents '0' with '6790'
c Var 'aux1660' direct represents '0' with '6790'
c Var 'aux1660' order represents '1' with '6791'
-6790 6791 0
c Var 'aux1660' direct represents '1' with '6792'
6790 -6791 6792 0
-6792 6791 0
-6792 -6790 0
c Var 'aux1660' order represents '2' with '6793'
-6791 6793 0
c Var 'aux1660' direct represents '2' with '6794'
6791 -6793 6794 0
-6794 6793 0
-6794 -6791 0
c Var 'aux1660' order represents '3' with '6795'
-6793 6795 0
c Var 'aux1660' direct represents '3' with '6796'
6793 -6795 6796 0
-6796 6795 0
-6796 -6793 0
c Var 'aux1660' direct represents '4' with '-6795'
6790 6792 6794 6796 -6795 0
c Encoding variable: aux1661 with domain: int(0..2) (representing constraint ((x_00006_00004=6) + (x_00005_00006=6)))
c Both direct and order encoding.
c Var 'aux1661' order represents '0' with '6797'
c Var 'aux1661' direct represents '0' with '6797'
c Var 'aux1661' order represents '1' with '6798'
-6797 6798 0
c Var 'aux1661' direct represents '1' with '6799'
6797 -6798 6799 0
-6799 6798 0
-6799 -6797 0
c Var 'aux1661' direct represents '2' with '-6798'
6797 6799 -6798 0
c Encoding variable: aux1662 with domain: int(0..2) (representing constraint ((x_00005_00005=6) + (x_00006_00005=6)))
c Both direct and order encoding.
c Var 'aux1662' order represents '0' with '6800'
c Var 'aux1662' direct represents '0' with '6800'
c Var 'aux1662' order represents '1' with '6801'
-6800 6801 0
c Var 'aux1662' direct represents '1' with '6802'
6800 -6801 6802 0
-6802 6801 0
-6802 -6800 0
c Var 'aux1662' direct represents '2' with '-6801'
6800 6802 -6801 0
c Encoding variable: aux1663 with domain: int(0..2) (representing constraint ((x_00005_00004=6) + (x_00004_00004=6)))
c Both direct and order encoding.
c Var 'aux1663' order represents '0' with '6803'
c Var 'aux1663' direct represents '0' with '6803'
c Var 'aux1663' order represents '1' with '6804'
-6803 6804 0
c Var 'aux1663' direct represents '1' with '6805'
6803 -6804 6805 0
-6805 6804 0
-6805 -6803 0
c Var 'aux1663' direct represents '2' with '-6804'
6803 6805 -6804 0
c Encoding variable: aux1664 with domain: int(0..2) (representing constraint ((x_00004_00006=6) + (x_00004_00005=6)))
c Both direct and order encoding.
c Var 'aux1664' order represents '0' with '6806'
c Var 'aux1664' direct represents '0' with '6806'
c Var 'aux1664' order represents '1' with '6807'
-6806 6807 0
c Var 'aux1664' direct represents '1' with '6808'
6806 -6807 6808 0
-6808 6807 0
-6808 -6806 0
c Var 'aux1664' direct represents '2' with '-6807'
6806 6808 -6807 0
c Encoding variable: aux1665 with domain: int(0..3) (representing constraint ((x_00006_00006=6) + aux1664))
c Both direct and order encoding.
c Var 'aux1665' order represents '0' with '6809'
c Var 'aux1665' direct represents '0' with '6809'
c Var 'aux1665' order represents '1' with '6810'
-6809 6810 0
c Var 'aux1665' direct represents '1' with '6811'
6809 -6810 6811 0
-6811 6810 0
-6811 -6809 0
c Var 'aux1665' order represents '2' with '6812'
-6810 6812 0
c Var 'aux1665' direct represents '2' with '6813'
6810 -6812 6813 0
-6813 6812 0
-6813 -6810 0
c Var 'aux1665' direct represents '3' with '-6812'
6809 6811 6813 -6812 0
c Encoding variable: aux1666 with domain: int(0..4) (representing constraint (aux1661 + aux1663))
c Both direct and order encoding.
c Var 'aux1666' order represents '0' with '6814'
c Var 'aux1666' direct represents '0' with '6814'
c Var 'aux1666' order represents '1' with '6815'
-6814 6815 0
c Var 'aux1666' direct represents '1' with '6816'
6814 -6815 6816 0
-6816 6815 0
-6816 -6814 0
c Var 'aux1666' order represents '2' with '6817'
-6815 6817 0
c Var 'aux1666' direct represents '2' with '6818'
6815 -6817 6818 0
-6818 6817 0
-6818 -6815 0
c Var 'aux1666' order represents '3' with '6819'
-6817 6819 0
c Var 'aux1666' direct represents '3' with '6820'
6817 -6819 6820 0
-6820 6819 0
-6820 -6817 0
c Var 'aux1666' direct represents '4' with '-6819'
6814 6816 6818 6820 -6819 0
c Encoding variable: aux1667 with domain: int(0..2) (representing constraint ((x_00006_00004=7) + (x_00005_00006=7)))
c Both direct and order encoding.
c Var 'aux1667' order represents '0' with '6821'
c Var 'aux1667' direct represents '0' with '6821'
c Var 'aux1667' order represents '1' with '6822'
-6821 6822 0
c Var 'aux1667' direct represents '1' with '6823'
6821 -6822 6823 0
-6823 6822 0
-6823 -6821 0
c Var 'aux1667' direct represents '2' with '-6822'
6821 6823 -6822 0
c Encoding variable: aux1668 with domain: int(0..2) (representing constraint ((x_00005_00005=7) + (x_00006_00005=7)))
c Both direct and order encoding.
c Var 'aux1668' order represents '0' with '6824'
c Var 'aux1668' direct represents '0' with '6824'
c Var 'aux1668' order represents '1' with '6825'
-6824 6825 0
c Var 'aux1668' direct represents '1' with '6826'
6824 -6825 6826 0
-6826 6825 0
-6826 -6824 0
c Var 'aux1668' direct represents '2' with '-6825'
6824 6826 -6825 0
c Encoding variable: aux1669 with domain: int(0..2) (representing constraint ((x_00005_00004=7) + (x_00004_00004=7)))
c Both direct and order encoding.
c Var 'aux1669' order represents '0' with '6827'
c Var 'aux1669' direct represents '0' with '6827'
c Var 'aux1669' order represents '1' with '6828'
-6827 6828 0
c Var 'aux1669' direct represents '1' with '6829'
6827 -6828 6829 0
-6829 6828 0
-6829 -6827 0
c Var 'aux1669' direct represents '2' with '-6828'
6827 6829 -6828 0
c Encoding variable: aux1670 with domain: int(0..2) (representing constraint ((x_00004_00006=7) + (x_00004_00005=7)))
c Both direct and order encoding.
c Var 'aux1670' order represents '0' with '6830'
c Var 'aux1670' direct represents '0' with '6830'
c Var 'aux1670' order represents '1' with '6831'
-6830 6831 0
c Var 'aux1670' direct represents '1' with '6832'
6830 -6831 6832 0
-6832 6831 0
-6832 -6830 0
c Var 'aux1670' direct represents '2' with '-6831'
6830 6832 -6831 0
c Encoding variable: aux1671 with domain: int(0..3) (representing constraint ((x_00006_00006=7) + aux1670))
c Both direct and order encoding.
c Var 'aux1671' order represents '0' with '6833'
c Var 'aux1671' direct represents '0' with '6833'
c Var 'aux1671' order represents '1' with '6834'
-6833 6834 0
c Var 'aux1671' direct represents '1' with '6835'
6833 -6834 6835 0
-6835 6834 0
-6835 -6833 0
c Var 'aux1671' order represents '2' with '6836'
-6834 6836 0
c Var 'aux1671' direct represents '2' with '6837'
6834 -6836 6837 0
-6837 6836 0
-6837 -6834 0
c Var 'aux1671' direct represents '3' with '-6836'
6833 6835 6837 -6836 0
c Encoding variable: aux1672 with domain: int(0..4) (representing constraint (aux1667 + aux1669))
c Both direct and order encoding.
c Var 'aux1672' order represents '0' with '6838'
c Var 'aux1672' direct represents '0' with '6838'
c Var 'aux1672' order represents '1' with '6839'
-6838 6839 0
c Var 'aux1672' direct represents '1' with '6840'
6838 -6839 6840 0
-6840 6839 0
-6840 -6838 0
c Var 'aux1672' order represents '2' with '6841'
-6839 6841 0
c Var 'aux1672' direct represents '2' with '6842'
6839 -6841 6842 0
-6842 6841 0
-6842 -6839 0
c Var 'aux1672' order represents '3' with '6843'
-6841 6843 0
c Var 'aux1672' direct represents '3' with '6844'
6841 -6843 6844 0
-6844 6843 0
-6844 -6841 0
c Var 'aux1672' direct represents '4' with '-6843'
6838 6840 6842 6844 -6843 0
c Encoding variable: aux1673 with domain: int(0..2) (representing constraint ((x_00006_00004=8) + (x_00005_00006=8)))
c Both direct and order encoding.
c Var 'aux1673' order represents '0' with '6845'
c Var 'aux1673' direct represents '0' with '6845'
c Var 'aux1673' order represents '1' with '6846'
-6845 6846 0
c Var 'aux1673' direct represents '1' with '6847'
6845 -6846 6847 0
-6847 6846 0
-6847 -6845 0
c Var 'aux1673' direct represents '2' with '-6846'
6845 6847 -6846 0
c Encoding variable: aux1674 with domain: int(0..2) (representing constraint ((x_00005_00005=8) + (x_00006_00005=8)))
c Both direct and order encoding.
c Var 'aux1674' order represents '0' with '6848'
c Var 'aux1674' direct represents '0' with '6848'
c Var 'aux1674' order represents '1' with '6849'
-6848 6849 0
c Var 'aux1674' direct represents '1' with '6850'
6848 -6849 6850 0
-6850 6849 0
-6850 -6848 0
c Var 'aux1674' direct represents '2' with '-6849'
6848 6850 -6849 0
c Encoding variable: aux1675 with domain: int(0..2) (representing constraint ((x_00005_00004=8) + (x_00004_00004=8)))
c Both direct and order encoding.
c Var 'aux1675' order represents '0' with '6851'
c Var 'aux1675' direct represents '0' with '6851'
c Var 'aux1675' order represents '1' with '6852'
-6851 6852 0
c Var 'aux1675' direct represents '1' with '6853'
6851 -6852 6853 0
-6853 6852 0
-6853 -6851 0
c Var 'aux1675' direct represents '2' with '-6852'
6851 6853 -6852 0
c Encoding variable: aux1676 with domain: int(0..2) (representing constraint ((x_00004_00006=8) + (x_00004_00005=8)))
c Both direct and order encoding.
c Var 'aux1676' order represents '0' with '6854'
c Var 'aux1676' direct represents '0' with '6854'
c Var 'aux1676' order represents '1' with '6855'
-6854 6855 0
c Var 'aux1676' direct represents '1' with '6856'
6854 -6855 6856 0
-6856 6855 0
-6856 -6854 0
c Var 'aux1676' direct represents '2' with '-6855'
6854 6856 -6855 0
c Encoding variable: aux1677 with domain: int(0..3) (representing constraint ((x_00006_00006=8) + aux1676))
c Both direct and order encoding.
c Var 'aux1677' order represents '0' with '6857'
c Var 'aux1677' direct represents '0' with '6857'
c Var 'aux1677' order represents '1' with '6858'
-6857 6858 0
c Var 'aux1677' direct represents '1' with '6859'
6857 -6858 6859 0
-6859 6858 0
-6859 -6857 0
c Var 'aux1677' order represents '2' with '6860'
-6858 6860 0
c Var 'aux1677' direct represents '2' with '6861'
6858 -6860 6861 0
-6861 6860 0
-6861 -6858 0
c Var 'aux1677' direct represents '3' with '-6860'
6857 6859 6861 -6860 0
c Encoding variable: aux1678 with domain: int(0..4) (representing constraint (aux1673 + aux1675))
c Both direct and order encoding.
c Var 'aux1678' order represents '0' with '6862'
c Var 'aux1678' direct represents '0' with '6862'
c Var 'aux1678' order represents '1' with '6863'
-6862 6863 0
c Var 'aux1678' direct represents '1' with '6864'
6862 -6863 6864 0
-6864 6863 0
-6864 -6862 0
c Var 'aux1678' order represents '2' with '6865'
-6863 6865 0
c Var 'aux1678' direct represents '2' with '6866'
6863 -6865 6866 0
-6866 6865 0
-6866 -6863 0
c Var 'aux1678' order represents '3' with '6867'
-6865 6867 0
c Var 'aux1678' direct represents '3' with '6868'
6865 -6867 6868 0
-6868 6867 0
-6868 -6865 0
c Var 'aux1678' direct represents '4' with '-6867'
6862 6864 6866 6868 -6867 0
c Encoding variable: aux1679 with domain: int(0..2) (representing constraint ((x_00006_00004=9) + (x_00005_00006=9)))
c Both direct and order encoding.
c Var 'aux1679' order represents '0' with '6869'
c Var 'aux1679' direct represents '0' with '6869'
c Var 'aux1679' order represents '1' with '6870'
-6869 6870 0
c Var 'aux1679' direct represents '1' with '6871'
6869 -6870 6871 0
-6871 6870 0
-6871 -6869 0
c Var 'aux1679' direct represents '2' with '-6870'
6869 6871 -6870 0
c Encoding variable: aux1680 with domain: int(0..2) (representing constraint ((x_00005_00005=9) + (x_00006_00005=9)))
c Both direct and order encoding.
c Var 'aux1680' order represents '0' with '6872'
c Var 'aux1680' direct represents '0' with '6872'
c Var 'aux1680' order represents '1' with '6873'
-6872 6873 0
c Var 'aux1680' direct represents '1' with '6874'
6872 -6873 6874 0
-6874 6873 0
-6874 -6872 0
c Var 'aux1680' direct represents '2' with '-6873'
6872 6874 -6873 0
c Encoding variable: aux1681 with domain: int(0..2) (representing constraint ((x_00005_00004=9) + (x_00004_00004=9)))
c Both direct and order encoding.
c Var 'aux1681' order represents '0' with '6875'
c Var 'aux1681' direct represents '0' with '6875'
c Var 'aux1681' order represents '1' with '6876'
-6875 6876 0
c Var 'aux1681' direct represents '1' with '6877'
6875 -6876 6877 0
-6877 6876 0
-6877 -6875 0
c Var 'aux1681' direct represents '2' with '-6876'
6875 6877 -6876 0
c Encoding variable: aux1682 with domain: int(0..2) (representing constraint ((x_00004_00006=9) + (x_00004_00005=9)))
c Both direct and order encoding.
c Var 'aux1682' order represents '0' with '6878'
c Var 'aux1682' direct represents '0' with '6878'
c Var 'aux1682' order represents '1' with '6879'
-6878 6879 0
c Var 'aux1682' direct represents '1' with '6880'
6878 -6879 6880 0
-6880 6879 0
-6880 -6878 0
c Var 'aux1682' direct represents '2' with '-6879'
6878 6880 -6879 0
c Encoding variable: aux1683 with domain: int(0..3) (representing constraint ((x_00006_00006=9) + aux1682))
c Both direct and order encoding.
c Var 'aux1683' order represents '0' with '6881'
c Var 'aux1683' direct represents '0' with '6881'
c Var 'aux1683' order represents '1' with '6882'
-6881 6882 0
c Var 'aux1683' direct represents '1' with '6883'
6881 -6882 6883 0
-6883 6882 0
-6883 -6881 0
c Var 'aux1683' order represents '2' with '6884'
-6882 6884 0
c Var 'aux1683' direct represents '2' with '6885'
6882 -6884 6885 0
-6885 6884 0
-6885 -6882 0
c Var 'aux1683' direct represents '3' with '-6884'
6881 6883 6885 -6884 0
c Encoding variable: aux1684 with domain: int(0..4) (representing constraint (aux1679 + aux1681))
c Both direct and order encoding.
c Var 'aux1684' order represents '0' with '6886'
c Var 'aux1684' direct represents '0' with '6886'
c Var 'aux1684' order represents '1' with '6887'
-6886 6887 0
c Var 'aux1684' direct represents '1' with '6888'
6886 -6887 6888 0
-6888 6887 0
-6888 -6886 0
c Var 'aux1684' order represents '2' with '6889'
-6887 6889 0
c Var 'aux1684' direct represents '2' with '6890'
6887 -6889 6890 0
-6890 6889 0
-6890 -6887 0
c Var 'aux1684' order represents '3' with '6891'
-6889 6891 0
c Var 'aux1684' direct represents '3' with '6892'
6889 -6891 6892 0
-6892 6891 0
-6892 -6889 0
c Var 'aux1684' direct represents '4' with '-6891'
6886 6888 6890 6892 -6891 0
c Encoding variable: aux1685 with domain: int(0..2) (representing constraint ((x_00006_00007=1) + (x_00005_00009=1)))
c Both direct and order encoding.
c Var 'aux1685' order represents '0' with '6893'
c Var 'aux1685' direct represents '0' with '6893'
c Var 'aux1685' order represents '1' with '6894'
-6893 6894 0
c Var 'aux1685' direct represents '1' with '6895'
6893 -6894 6895 0
-6895 6894 0
-6895 -6893 0
c Var 'aux1685' direct represents '2' with '-6894'
6893 6895 -6894 0
c Encoding variable: aux1686 with domain: int(0..2) (representing constraint ((x_00005_00008=1) + (x_00006_00008=1)))
c Both direct and order encoding.
c Var 'aux1686' order represents '0' with '6896'
c Var 'aux1686' direct represents '0' with '6896'
c Var 'aux1686' order represents '1' with '6897'
-6896 6897 0
c Var 'aux1686' direct represents '1' with '6898'
6896 -6897 6898 0
-6898 6897 0
-6898 -6896 0
c Var 'aux1686' direct represents '2' with '-6897'
6896 6898 -6897 0
c Encoding variable: aux1687 with domain: int(0..2) (representing constraint ((x_00005_00007=1) + (x_00004_00007=1)))
c Both direct and order encoding.
c Var 'aux1687' order represents '0' with '6899'
c Var 'aux1687' direct represents '0' with '6899'
c Var 'aux1687' order represents '1' with '6900'
-6899 6900 0
c Var 'aux1687' direct represents '1' with '6901'
6899 -6900 6901 0
-6901 6900 0
-6901 -6899 0
c Var 'aux1687' direct represents '2' with '-6900'
6899 6901 -6900 0
c Encoding variable: aux1688 with domain: int(0..2) (representing constraint ((x_00004_00009=1) + (x_00004_00008=1)))
c Both direct and order encoding.
c Var 'aux1688' order represents '0' with '6902'
c Var 'aux1688' direct represents '0' with '6902'
c Var 'aux1688' order represents '1' with '6903'
-6902 6903 0
c Var 'aux1688' direct represents '1' with '6904'
6902 -6903 6904 0
-6904 6903 0
-6904 -6902 0
c Var 'aux1688' direct represents '2' with '-6903'
6902 6904 -6903 0
c Encoding variable: aux1689 with domain: int(0..3) (representing constraint ((x_00006_00009=1) + aux1688))
c Both direct and order encoding.
c Var 'aux1689' order represents '0' with '6905'
c Var 'aux1689' direct represents '0' with '6905'
c Var 'aux1689' order represents '1' with '6906'
-6905 6906 0
c Var 'aux1689' direct represents '1' with '6907'
6905 -6906 6907 0
-6907 6906 0
-6907 -6905 0
c Var 'aux1689' order represents '2' with '6908'
-6906 6908 0
c Var 'aux1689' direct represents '2' with '6909'
6906 -6908 6909 0
-6909 6908 0
-6909 -6906 0
c Var 'aux1689' direct represents '3' with '-6908'
6905 6907 6909 -6908 0
c Encoding variable: aux1690 with domain: int(0..4) (representing constraint (aux1685 + aux1687))
c Both direct and order encoding.
c Var 'aux1690' order represents '0' with '6910'
c Var 'aux1690' direct represents '0' with '6910'
c Var 'aux1690' order represents '1' with '6911'
-6910 6911 0
c Var 'aux1690' direct represents '1' with '6912'
6910 -6911 6912 0
-6912 6911 0
-6912 -6910 0
c Var 'aux1690' order represents '2' with '6913'
-6911 6913 0
c Var 'aux1690' direct represents '2' with '6914'
6911 -6913 6914 0
-6914 6913 0
-6914 -6911 0
c Var 'aux1690' order represents '3' with '6915'
-6913 6915 0
c Var 'aux1690' direct represents '3' with '6916'
6913 -6915 6916 0
-6916 6915 0
-6916 -6913 0
c Var 'aux1690' direct represents '4' with '-6915'
6910 6912 6914 6916 -6915 0
c Encoding variable: aux1691 with domain: int(0..2) (representing constraint ((x_00006_00007=2) + (x_00005_00009=2)))
c Both direct and order encoding.
c Var 'aux1691' order represents '0' with '6917'
c Var 'aux1691' direct represents '0' with '6917'
c Var 'aux1691' order represents '1' with '6918'
-6917 6918 0
c Var 'aux1691' direct represents '1' with '6919'
6917 -6918 6919 0
-6919 6918 0
-6919 -6917 0
c Var 'aux1691' direct represents '2' with '-6918'
6917 6919 -6918 0
c Encoding variable: aux1692 with domain: int(0..2) (representing constraint ((x_00005_00008=2) + (x_00006_00008=2)))
c Both direct and order encoding.
c Var 'aux1692' order represents '0' with '6920'
c Var 'aux1692' direct represents '0' with '6920'
c Var 'aux1692' order represents '1' with '6921'
-6920 6921 0
c Var 'aux1692' direct represents '1' with '6922'
6920 -6921 6922 0
-6922 6921 0
-6922 -6920 0
c Var 'aux1692' direct represents '2' with '-6921'
6920 6922 -6921 0
c Encoding variable: aux1693 with domain: int(0..2) (representing constraint ((x_00005_00007=2) + (x_00004_00007=2)))
c Both direct and order encoding.
c Var 'aux1693' order represents '0' with '6923'
c Var 'aux1693' direct represents '0' with '6923'
c Var 'aux1693' order represents '1' with '6924'
-6923 6924 0
c Var 'aux1693' direct represents '1' with '6925'
6923 -6924 6925 0
-6925 6924 0
-6925 -6923 0
c Var 'aux1693' direct represents '2' with '-6924'
6923 6925 -6924 0
c Encoding variable: aux1694 with domain: int(0..2) (representing constraint ((x_00004_00009=2) + (x_00004_00008=2)))
c Both direct and order encoding.
c Var 'aux1694' order represents '0' with '6926'
c Var 'aux1694' direct represents '0' with '6926'
c Var 'aux1694' order represents '1' with '6927'
-6926 6927 0
c Var 'aux1694' direct represents '1' with '6928'
6926 -6927 6928 0
-6928 6927 0
-6928 -6926 0
c Var 'aux1694' direct represents '2' with '-6927'
6926 6928 -6927 0
c Encoding variable: aux1695 with domain: int(0..3) (representing constraint ((x_00006_00009=2) + aux1694))
c Both direct and order encoding.
c Var 'aux1695' order represents '0' with '6929'
c Var 'aux1695' direct represents '0' with '6929'
c Var 'aux1695' order represents '1' with '6930'
-6929 6930 0
c Var 'aux1695' direct represents '1' with '6931'
6929 -6930 6931 0
-6931 6930 0
-6931 -6929 0
c Var 'aux1695' order represents '2' with '6932'
-6930 6932 0
c Var 'aux1695' direct represents '2' with '6933'
6930 -6932 6933 0
-6933 6932 0
-6933 -6930 0
c Var 'aux1695' direct represents '3' with '-6932'
6929 6931 6933 -6932 0
c Encoding variable: aux1696 with domain: int(0..4) (representing constraint (aux1691 + aux1693))
c Both direct and order encoding.
c Var 'aux1696' order represents '0' with '6934'
c Var 'aux1696' direct represents '0' with '6934'
c Var 'aux1696' order represents '1' with '6935'
-6934 6935 0
c Var 'aux1696' direct represents '1' with '6936'
6934 -6935 6936 0
-6936 6935 0
-6936 -6934 0
c Var 'aux1696' order represents '2' with '6937'
-6935 6937 0
c Var 'aux1696' direct represents '2' with '6938'
6935 -6937 6938 0
-6938 6937 0
-6938 -6935 0
c Var 'aux1696' order represents '3' with '6939'
-6937 6939 0
c Var 'aux1696' direct represents '3' with '6940'
6937 -6939 6940 0
-6940 6939 0
-6940 -6937 0
c Var 'aux1696' direct represents '4' with '-6939'
6934 6936 6938 6940 -6939 0
c Encoding variable: aux1697 with domain: int(0..2) (representing constraint ((x_00006_00007=3) + (x_00005_00009=3)))
c Both direct and order encoding.
c Var 'aux1697' order represents '0' with '6941'
c Var 'aux1697' direct represents '0' with '6941'
c Var 'aux1697' order represents '1' with '6942'
-6941 6942 0
c Var 'aux1697' direct represents '1' with '6943'
6941 -6942 6943 0
-6943 6942 0
-6943 -6941 0
c Var 'aux1697' direct represents '2' with '-6942'
6941 6943 -6942 0
c Encoding variable: aux1698 with domain: int(0..2) (representing constraint ((x_00005_00008=3) + (x_00006_00008=3)))
c Both direct and order encoding.
c Var 'aux1698' order represents '0' with '6944'
c Var 'aux1698' direct represents '0' with '6944'
c Var 'aux1698' order represents '1' with '6945'
-6944 6945 0
c Var 'aux1698' direct represents '1' with '6946'
6944 -6945 6946 0
-6946 6945 0
-6946 -6944 0
c Var 'aux1698' direct represents '2' with '-6945'
6944 6946 -6945 0
c Encoding variable: aux1699 with domain: int(0..2) (representing constraint ((x_00005_00007=3) + (x_00004_00007=3)))
c Both direct and order encoding.
c Var 'aux1699' order represents '0' with '6947'
c Var 'aux1699' direct represents '0' with '6947'
c Var 'aux1699' order represents '1' with '6948'
-6947 6948 0
c Var 'aux1699' direct represents '1' with '6949'
6947 -6948 6949 0
-6949 6948 0
-6949 -6947 0
c Var 'aux1699' direct represents '2' with '-6948'
6947 6949 -6948 0
c Encoding variable: aux1700 with domain: int(0..2) (representing constraint ((x_00004_00009=3) + (x_00004_00008=3)))
c Both direct and order encoding.
c Var 'aux1700' order represents '0' with '6950'
c Var 'aux1700' direct represents '0' with '6950'
c Var 'aux1700' order represents '1' with '6951'
-6950 6951 0
c Var 'aux1700' direct represents '1' with '6952'
6950 -6951 6952 0
-6952 6951 0
-6952 -6950 0
c Var 'aux1700' direct represents '2' with '-6951'
6950 6952 -6951 0
c Encoding variable: aux1701 with domain: int(0..3) (representing constraint ((x_00006_00009=3) + aux1700))
c Both direct and order encoding.
c Var 'aux1701' order represents '0' with '6953'
c Var 'aux1701' direct represents '0' with '6953'
c Var 'aux1701' order represents '1' with '6954'
-6953 6954 0
c Var 'aux1701' direct represents '1' with '6955'
6953 -6954 6955 0
-6955 6954 0
-6955 -6953 0
c Var 'aux1701' order represents '2' with '6956'
-6954 6956 0
c Var 'aux1701' direct represents '2' with '6957'
6954 -6956 6957 0
-6957 6956 0
-6957 -6954 0
c Var 'aux1701' direct represents '3' with '-6956'
6953 6955 6957 -6956 0
c Encoding variable: aux1702 with domain: int(0..4) (representing constraint (aux1697 + aux1699))
c Both direct and order encoding.
c Var 'aux1702' order represents '0' with '6958'
c Var 'aux1702' direct represents '0' with '6958'
c Var 'aux1702' order represents '1' with '6959'
-6958 6959 0
c Var 'aux1702' direct represents '1' with '6960'
6958 -6959 6960 0
-6960 6959 0
-6960 -6958 0
c Var 'aux1702' order represents '2' with '6961'
-6959 6961 0
c Var 'aux1702' direct represents '2' with '6962'
6959 -6961 6962 0
-6962 6961 0
-6962 -6959 0
c Var 'aux1702' order represents '3' with '6963'
-6961 6963 0
c Var 'aux1702' direct represents '3' with '6964'
6961 -6963 6964 0
-6964 6963 0
-6964 -6961 0
c Var 'aux1702' direct represents '4' with '-6963'
6958 6960 6962 6964 -6963 0
c Encoding variable: aux1703 with domain: int(0..2) (representing constraint ((x_00006_00007=4) + (x_00005_00009=4)))
c Both direct and order encoding.
c Var 'aux1703' order represents '0' with '6965'
c Var 'aux1703' direct represents '0' with '6965'
c Var 'aux1703' order represents '1' with '6966'
-6965 6966 0
c Var 'aux1703' direct represents '1' with '6967'
6965 -6966 6967 0
-6967 6966 0
-6967 -6965 0
c Var 'aux1703' direct represents '2' with '-6966'
6965 6967 -6966 0
c Encoding variable: aux1704 with domain: int(0..2) (representing constraint ((x_00005_00008=4) + (x_00006_00008=4)))
c Both direct and order encoding.
c Var 'aux1704' order represents '0' with '6968'
c Var 'aux1704' direct represents '0' with '6968'
c Var 'aux1704' order represents '1' with '6969'
-6968 6969 0
c Var 'aux1704' direct represents '1' with '6970'
6968 -6969 6970 0
-6970 6969 0
-6970 -6968 0
c Var 'aux1704' direct represents '2' with '-6969'
6968 6970 -6969 0
c Encoding variable: aux1705 with domain: int(0..2) (representing constraint ((x_00005_00007=4) + (x_00004_00007=4)))
c Both direct and order encoding.
c Var 'aux1705' order represents '0' with '6971'
c Var 'aux1705' direct represents '0' with '6971'
c Var 'aux1705' order represents '1' with '6972'
-6971 6972 0
c Var 'aux1705' direct represents '1' with '6973'
6971 -6972 6973 0
-6973 6972 0
-6973 -6971 0
c Var 'aux1705' direct represents '2' with '-6972'
6971 6973 -6972 0
c Encoding variable: aux1706 with domain: int(0..2) (representing constraint ((x_00004_00009=4) + (x_00004_00008=4)))
c Both direct and order encoding.
c Var 'aux1706' order represents '0' with '6974'
c Var 'aux1706' direct represents '0' with '6974'
c Var 'aux1706' order represents '1' with '6975'
-6974 6975 0
c Var 'aux1706' direct represents '1' with '6976'
6974 -6975 6976 0
-6976 6975 0
-6976 -6974 0
c Var 'aux1706' direct represents '2' with '-6975'
6974 6976 -6975 0
c Encoding variable: aux1707 with domain: int(0..3) (representing constraint ((x_00006_00009=4) + aux1706))
c Both direct and order encoding.
c Var 'aux1707' order represents '0' with '6977'
c Var 'aux1707' direct represents '0' with '6977'
c Var 'aux1707' order represents '1' with '6978'
-6977 6978 0
c Var 'aux1707' direct represents '1' with '6979'
6977 -6978 6979 0
-6979 6978 0
-6979 -6977 0
c Var 'aux1707' order represents '2' with '6980'
-6978 6980 0
c Var 'aux1707' direct represents '2' with '6981'
6978 -6980 6981 0
-6981 6980 0
-6981 -6978 0
c Var 'aux1707' direct represents '3' with '-6980'
6977 6979 6981 -6980 0
c Encoding variable: aux1708 with domain: int(0..4) (representing constraint (aux1703 + aux1705))
c Both direct and order encoding.
c Var 'aux1708' order represents '0' with '6982'
c Var 'aux1708' direct represents '0' with '6982'
c Var 'aux1708' order represents '1' with '6983'
-6982 6983 0
c Var 'aux1708' direct represents '1' with '6984'
6982 -6983 6984 0
-6984 6983 0
-6984 -6982 0
c Var 'aux1708' order represents '2' with '6985'
-6983 6985 0
c Var 'aux1708' direct represents '2' with '6986'
6983 -6985 6986 0
-6986 6985 0
-6986 -6983 0
c Var 'aux1708' order represents '3' with '6987'
-6985 6987 0
c Var 'aux1708' direct represents '3' with '6988'
6985 -6987 6988 0
-6988 6987 0
-6988 -6985 0
c Var 'aux1708' direct represents '4' with '-6987'
6982 6984 6986 6988 -6987 0
c Encoding variable: aux1709 with domain: int(0..2) (representing constraint ((x_00006_00007=5) + (x_00005_00009=5)))
c Both direct and order encoding.
c Var 'aux1709' order represents '0' with '6989'
c Var 'aux1709' direct represents '0' with '6989'
c Var 'aux1709' order represents '1' with '6990'
-6989 6990 0
c Var 'aux1709' direct represents '1' with '6991'
6989 -6990 6991 0
-6991 6990 0
-6991 -6989 0
c Var 'aux1709' direct represents '2' with '-6990'
6989 6991 -6990 0
c Encoding variable: aux1710 with domain: int(0..2) (representing constraint ((x_00005_00008=5) + (x_00006_00008=5)))
c Both direct and order encoding.
c Var 'aux1710' order represents '0' with '6992'
c Var 'aux1710' direct represents '0' with '6992'
c Var 'aux1710' order represents '1' with '6993'
-6992 6993 0
c Var 'aux1710' direct represents '1' with '6994'
6992 -6993 6994 0
-6994 6993 0
-6994 -6992 0
c Var 'aux1710' direct represents '2' with '-6993'
6992 6994 -6993 0
c Encoding variable: aux1711 with domain: int(0..2) (representing constraint ((x_00005_00007=5) + (x_00004_00007=5)))
c Both direct and order encoding.
c Var 'aux1711' order represents '0' with '6995'
c Var 'aux1711' direct represents '0' with '6995'
c Var 'aux1711' order represents '1' with '6996'
-6995 6996 0
c Var 'aux1711' direct represents '1' with '6997'
6995 -6996 6997 0
-6997 6996 0
-6997 -6995 0
c Var 'aux1711' direct represents '2' with '-6996'
6995 6997 -6996 0
c Encoding variable: aux1712 with domain: int(0..2) (representing constraint ((x_00004_00009=5) + (x_00004_00008=5)))
c Both direct and order encoding.
c Var 'aux1712' order represents '0' with '6998'
c Var 'aux1712' direct represents '0' with '6998'
c Var 'aux1712' order represents '1' with '6999'
-6998 6999 0
c Var 'aux1712' direct represents '1' with '7000'
6998 -6999 7000 0
-7000 6999 0
-7000 -6998 0
c Var 'aux1712' direct represents '2' with '-6999'
6998 7000 -6999 0
c Encoding variable: aux1713 with domain: int(0..3) (representing constraint ((x_00006_00009=5) + aux1712))
c Both direct and order encoding.
c Var 'aux1713' order represents '0' with '7001'
c Var 'aux1713' direct represents '0' with '7001'
c Var 'aux1713' order represents '1' with '7002'
-7001 7002 0
c Var 'aux1713' direct represents '1' with '7003'
7001 -7002 7003 0
-7003 7002 0
-7003 -7001 0
c Var 'aux1713' order represents '2' with '7004'
-7002 7004 0
c Var 'aux1713' direct represents '2' with '7005'
7002 -7004 7005 0
-7005 7004 0
-7005 -7002 0
c Var 'aux1713' direct represents '3' with '-7004'
7001 7003 7005 -7004 0
c Encoding variable: aux1714 with domain: int(0..4) (representing constraint (aux1709 + aux1711))
c Both direct and order encoding.
c Var 'aux1714' order represents '0' with '7006'
c Var 'aux1714' direct represents '0' with '7006'
c Var 'aux1714' order represents '1' with '7007'
-7006 7007 0
c Var 'aux1714' direct represents '1' with '7008'
7006 -7007 7008 0
-7008 7007 0
-7008 -7006 0
c Var 'aux1714' order represents '2' with '7009'
-7007 7009 0
c Var 'aux1714' direct represents '2' with '7010'
7007 -7009 7010 0
-7010 7009 0
-7010 -7007 0
c Var 'aux1714' order represents '3' with '7011'
-7009 7011 0
c Var 'aux1714' direct represents '3' with '7012'
7009 -7011 7012 0
-7012 7011 0
-7012 -7009 0
c Var 'aux1714' direct represents '4' with '-7011'
7006 7008 7010 7012 -7011 0
c Encoding variable: aux1715 with domain: int(0..2) (representing constraint ((x_00006_00007=6) + (x_00005_00009=6)))
c Both direct and order encoding.
c Var 'aux1715' order represents '0' with '7013'
c Var 'aux1715' direct represents '0' with '7013'
c Var 'aux1715' order represents '1' with '7014'
-7013 7014 0
c Var 'aux1715' direct represents '1' with '7015'
7013 -7014 7015 0
-7015 7014 0
-7015 -7013 0
c Var 'aux1715' direct represents '2' with '-7014'
7013 7015 -7014 0
c Encoding variable: aux1716 with domain: int(0..2) (representing constraint ((x_00005_00008=6) + (x_00006_00008=6)))
c Both direct and order encoding.
c Var 'aux1716' order represents '0' with '7016'
c Var 'aux1716' direct represents '0' with '7016'
c Var 'aux1716' order represents '1' with '7017'
-7016 7017 0
c Var 'aux1716' direct represents '1' with '7018'
7016 -7017 7018 0
-7018 7017 0
-7018 -7016 0
c Var 'aux1716' direct represents '2' with '-7017'
7016 7018 -7017 0
c Encoding variable: aux1717 with domain: int(0..2) (representing constraint ((x_00005_00007=6) + (x_00004_00007=6)))
c Both direct and order encoding.
c Var 'aux1717' order represents '0' with '7019'
c Var 'aux1717' direct represents '0' with '7019'
c Var 'aux1717' order represents '1' with '7020'
-7019 7020 0
c Var 'aux1717' direct represents '1' with '7021'
7019 -7020 7021 0
-7021 7020 0
-7021 -7019 0
c Var 'aux1717' direct represents '2' with '-7020'
7019 7021 -7020 0
c Encoding variable: aux1718 with domain: int(0..2) (representing constraint ((x_00004_00009=6) + (x_00004_00008=6)))
c Both direct and order encoding.
c Var 'aux1718' order represents '0' with '7022'
c Var 'aux1718' direct represents '0' with '7022'
c Var 'aux1718' order represents '1' with '7023'
-7022 7023 0
c Var 'aux1718' direct represents '1' with '7024'
7022 -7023 7024 0
-7024 7023 0
-7024 -7022 0
c Var 'aux1718' direct represents '2' with '-7023'
7022 7024 -7023 0
c Encoding variable: aux1719 with domain: int(0..3) (representing constraint ((x_00006_00009=6) + aux1718))
c Both direct and order encoding.
c Var 'aux1719' order represents '0' with '7025'
c Var 'aux1719' direct represents '0' with '7025'
c Var 'aux1719' order represents '1' with '7026'
-7025 7026 0
c Var 'aux1719' direct represents '1' with '7027'
7025 -7026 7027 0
-7027 7026 0
-7027 -7025 0
c Var 'aux1719' order represents '2' with '7028'
-7026 7028 0
c Var 'aux1719' direct represents '2' with '7029'
7026 -7028 7029 0
-7029 7028 0
-7029 -7026 0
c Var 'aux1719' direct represents '3' with '-7028'
7025 7027 7029 -7028 0
c Encoding variable: aux1720 with domain: int(0..4) (representing constraint (aux1715 + aux1717))
c Both direct and order encoding.
c Var 'aux1720' order represents '0' with '7030'
c Var 'aux1720' direct represents '0' with '7030'
c Var 'aux1720' order represents '1' with '7031'
-7030 7031 0
c Var 'aux1720' direct represents '1' with '7032'
7030 -7031 7032 0
-7032 7031 0
-7032 -7030 0
c Var 'aux1720' order represents '2' with '7033'
-7031 7033 0
c Var 'aux1720' direct represents '2' with '7034'
7031 -7033 7034 0
-7034 7033 0
-7034 -7031 0
c Var 'aux1720' order represents '3' with '7035'
-7033 7035 0
c Var 'aux1720' direct represents '3' with '7036'
7033 -7035 7036 0
-7036 7035 0
-7036 -7033 0
c Var 'aux1720' direct represents '4' with '-7035'
7030 7032 7034 7036 -7035 0
c Encoding variable: aux1721 with domain: int(0..2) (representing constraint ((x_00006_00007=7) + (x_00005_00009=7)))
c Both direct and order encoding.
c Var 'aux1721' order represents '0' with '7037'
c Var 'aux1721' direct represents '0' with '7037'
c Var 'aux1721' order represents '1' with '7038'
-7037 7038 0
c Var 'aux1721' direct represents '1' with '7039'
7037 -7038 7039 0
-7039 7038 0
-7039 -7037 0
c Var 'aux1721' direct represents '2' with '-7038'
7037 7039 -7038 0
c Encoding variable: aux1722 with domain: int(0..2) (representing constraint ((x_00005_00008=7) + (x_00006_00008=7)))
c Both direct and order encoding.
c Var 'aux1722' order represents '0' with '7040'
c Var 'aux1722' direct represents '0' with '7040'
c Var 'aux1722' order represents '1' with '7041'
-7040 7041 0
c Var 'aux1722' direct represents '1' with '7042'
7040 -7041 7042 0
-7042 7041 0
-7042 -7040 0
c Var 'aux1722' direct represents '2' with '-7041'
7040 7042 -7041 0
c Encoding variable: aux1723 with domain: int(0..2) (representing constraint ((x_00005_00007=7) + (x_00004_00007=7)))
c Both direct and order encoding.
c Var 'aux1723' order represents '0' with '7043'
c Var 'aux1723' direct represents '0' with '7043'
c Var 'aux1723' order represents '1' with '7044'
-7043 7044 0
c Var 'aux1723' direct represents '1' with '7045'
7043 -7044 7045 0
-7045 7044 0
-7045 -7043 0
c Var 'aux1723' direct represents '2' with '-7044'
7043 7045 -7044 0
c Encoding variable: aux1724 with domain: int(0..2) (representing constraint ((x_00004_00009=7) + (x_00004_00008=7)))
c Both direct and order encoding.
c Var 'aux1724' order represents '0' with '7046'
c Var 'aux1724' direct represents '0' with '7046'
c Var 'aux1724' order represents '1' with '7047'
-7046 7047 0
c Var 'aux1724' direct represents '1' with '7048'
7046 -7047 7048 0
-7048 7047 0
-7048 -7046 0
c Var 'aux1724' direct represents '2' with '-7047'
7046 7048 -7047 0
c Encoding variable: aux1725 with domain: int(0..3) (representing constraint ((x_00006_00009=7) + aux1724))
c Both direct and order encoding.
c Var 'aux1725' order represents '0' with '7049'
c Var 'aux1725' direct represents '0' with '7049'
c Var 'aux1725' order represents '1' with '7050'
-7049 7050 0
c Var 'aux1725' direct represents '1' with '7051'
7049 -7050 7051 0
-7051 7050 0
-7051 -7049 0
c Var 'aux1725' order represents '2' with '7052'
-7050 7052 0
c Var 'aux1725' direct represents '2' with '7053'
7050 -7052 7053 0
-7053 7052 0
-7053 -7050 0
c Var 'aux1725' direct represents '3' with '-7052'
7049 7051 7053 -7052 0
c Encoding variable: aux1726 with domain: int(0..4) (representing constraint (aux1721 + aux1723))
c Both direct and order encoding.
c Var 'aux1726' order represents '0' with '7054'
c Var 'aux1726' direct represents '0' with '7054'
c Var 'aux1726' order represents '1' with '7055'
-7054 7055 0
c Var 'aux1726' direct represents '1' with '7056'
7054 -7055 7056 0
-7056 7055 0
-7056 -7054 0
c Var 'aux1726' order represents '2' with '7057'
-7055 7057 0
c Var 'aux1726' direct represents '2' with '7058'
7055 -7057 7058 0
-7058 7057 0
-7058 -7055 0
c Var 'aux1726' order represents '3' with '7059'
-7057 7059 0
c Var 'aux1726' direct represents '3' with '7060'
7057 -7059 7060 0
-7060 7059 0
-7060 -7057 0
c Var 'aux1726' direct represents '4' with '-7059'
7054 7056 7058 7060 -7059 0
c Encoding variable: aux1727 with domain: int(0..2) (representing constraint ((x_00006_00007=8) + (x_00005_00009=8)))
c Both direct and order encoding.
c Var 'aux1727' order represents '0' with '7061'
c Var 'aux1727' direct represents '0' with '7061'
c Var 'aux1727' order represents '1' with '7062'
-7061 7062 0
c Var 'aux1727' direct represents '1' with '7063'
7061 -7062 7063 0
-7063 7062 0
-7063 -7061 0
c Var 'aux1727' direct represents '2' with '-7062'
7061 7063 -7062 0
c Encoding variable: aux1728 with domain: int(0..2) (representing constraint ((x_00005_00008=8) + (x_00006_00008=8)))
c Both direct and order encoding.
c Var 'aux1728' order represents '0' with '7064'
c Var 'aux1728' direct represents '0' with '7064'
c Var 'aux1728' order represents '1' with '7065'
-7064 7065 0
c Var 'aux1728' direct represents '1' with '7066'
7064 -7065 7066 0
-7066 7065 0
-7066 -7064 0
c Var 'aux1728' direct represents '2' with '-7065'
7064 7066 -7065 0
c Encoding variable: aux1729 with domain: int(0..2) (representing constraint ((x_00005_00007=8) + (x_00004_00007=8)))
c Both direct and order encoding.
c Var 'aux1729' order represents '0' with '7067'
c Var 'aux1729' direct represents '0' with '7067'
c Var 'aux1729' order represents '1' with '7068'
-7067 7068 0
c Var 'aux1729' direct represents '1' with '7069'
7067 -7068 7069 0
-7069 7068 0
-7069 -7067 0
c Var 'aux1729' direct represents '2' with '-7068'
7067 7069 -7068 0
c Encoding variable: aux1730 with domain: int(0..2) (representing constraint ((x_00004_00009=8) + (x_00004_00008=8)))
c Both direct and order encoding.
c Var 'aux1730' order represents '0' with '7070'
c Var 'aux1730' direct represents '0' with '7070'
c Var 'aux1730' order represents '1' with '7071'
-7070 7071 0
c Var 'aux1730' direct represents '1' with '7072'
7070 -7071 7072 0
-7072 7071 0
-7072 -7070 0
c Var 'aux1730' direct represents '2' with '-7071'
7070 7072 -7071 0
c Encoding variable: aux1731 with domain: int(0..3) (representing constraint ((x_00006_00009=8) + aux1730))
c Both direct and order encoding.
c Var 'aux1731' order represents '0' with '7073'
c Var 'aux1731' direct represents '0' with '7073'
c Var 'aux1731' order represents '1' with '7074'
-7073 7074 0
c Var 'aux1731' direct represents '1' with '7075'
7073 -7074 7075 0
-7075 7074 0
-7075 -7073 0
c Var 'aux1731' order represents '2' with '7076'
-7074 7076 0
c Var 'aux1731' direct represents '2' with '7077'
7074 -7076 7077 0
-7077 7076 0
-7077 -7074 0
c Var 'aux1731' direct represents '3' with '-7076'
7073 7075 7077 -7076 0
c Encoding variable: aux1732 with domain: int(0..4) (representing constraint (aux1727 + aux1729))
c Both direct and order encoding.
c Var 'aux1732' order represents '0' with '7078'
c Var 'aux1732' direct represents '0' with '7078'
c Var 'aux1732' order represents '1' with '7079'
-7078 7079 0
c Var 'aux1732' direct represents '1' with '7080'
7078 -7079 7080 0
-7080 7079 0
-7080 -7078 0
c Var 'aux1732' order represents '2' with '7081'
-7079 7081 0
c Var 'aux1732' direct represents '2' with '7082'
7079 -7081 7082 0
-7082 7081 0
-7082 -7079 0
c Var 'aux1732' order represents '3' with '7083'
-7081 7083 0
c Var 'aux1732' direct represents '3' with '7084'
7081 -7083 7084 0
-7084 7083 0
-7084 -7081 0
c Var 'aux1732' direct represents '4' with '-7083'
7078 7080 7082 7084 -7083 0
c Encoding variable: aux1733 with domain: int(0..2) (representing constraint ((x_00006_00007=9) + (x_00005_00009=9)))
c Both direct and order encoding.
c Var 'aux1733' order represents '0' with '7085'
c Var 'aux1733' direct represents '0' with '7085'
c Var 'aux1733' order represents '1' with '7086'
-7085 7086 0
c Var 'aux1733' direct represents '1' with '7087'
7085 -7086 7087 0
-7087 7086 0
-7087 -7085 0
c Var 'aux1733' direct represents '2' with '-7086'
7085 7087 -7086 0
c Encoding variable: aux1734 with domain: int(0..2) (representing constraint ((x_00005_00008=9) + (x_00006_00008=9)))
c Both direct and order encoding.
c Var 'aux1734' order represents '0' with '7088'
c Var 'aux1734' direct represents '0' with '7088'
c Var 'aux1734' order represents '1' with '7089'
-7088 7089 0
c Var 'aux1734' direct represents '1' with '7090'
7088 -7089 7090 0
-7090 7089 0
-7090 -7088 0
c Var 'aux1734' direct represents '2' with '-7089'
7088 7090 -7089 0
c Encoding variable: aux1735 with domain: int(0..2) (representing constraint ((x_00005_00007=9) + (x_00004_00007=9)))
c Both direct and order encoding.
c Var 'aux1735' order represents '0' with '7091'
c Var 'aux1735' direct represents '0' with '7091'
c Var 'aux1735' order represents '1' with '7092'
-7091 7092 0
c Var 'aux1735' direct represents '1' with '7093'
7091 -7092 7093 0
-7093 7092 0
-7093 -7091 0
c Var 'aux1735' direct represents '2' with '-7092'
7091 7093 -7092 0
c Encoding variable: aux1736 with domain: int(0..2) (representing constraint ((x_00004_00009=9) + (x_00004_00008=9)))
c Both direct and order encoding.
c Var 'aux1736' order represents '0' with '7094'
c Var 'aux1736' direct represents '0' with '7094'
c Var 'aux1736' order represents '1' with '7095'
-7094 7095 0
c Var 'aux1736' direct represents '1' with '7096'
7094 -7095 7096 0
-7096 7095 0
-7096 -7094 0
c Var 'aux1736' direct represents '2' with '-7095'
7094 7096 -7095 0
c Encoding variable: aux1737 with domain: int(0..3) (representing constraint ((x_00006_00009=9) + aux1736))
c Both direct and order encoding.
c Var 'aux1737' order represents '0' with '7097'
c Var 'aux1737' direct represents '0' with '7097'
c Var 'aux1737' order represents '1' with '7098'
-7097 7098 0
c Var 'aux1737' direct represents '1' with '7099'
7097 -7098 7099 0
-7099 7098 0
-7099 -7097 0
c Var 'aux1737' order represents '2' with '7100'
-7098 7100 0
c Var 'aux1737' direct represents '2' with '7101'
7098 -7100 7101 0
-7101 7100 0
-7101 -7098 0
c Var 'aux1737' direct represents '3' with '-7100'
7097 7099 7101 -7100 0
c Encoding variable: aux1738 with domain: int(0..4) (representing constraint (aux1733 + aux1735))
c Both direct and order encoding.
c Var 'aux1738' order represents '0' with '7102'
c Var 'aux1738' direct represents '0' with '7102'
c Var 'aux1738' order represents '1' with '7103'
-7102 7103 0
c Var 'aux1738' direct represents '1' with '7104'
7102 -7103 7104 0
-7104 7103 0
-7104 -7102 0
c Var 'aux1738' order represents '2' with '7105'
-7103 7105 0
c Var 'aux1738' direct represents '2' with '7106'
7103 -7105 7106 0
-7106 7105 0
-7106 -7103 0
c Var 'aux1738' order represents '3' with '7107'
-7105 7107 0
c Var 'aux1738' direct represents '3' with '7108'
7105 -7107 7108 0
-7108 7107 0
-7108 -7105 0
c Var 'aux1738' direct represents '4' with '-7107'
7102 7104 7106 7108 -7107 0
c Encoding variable: aux1739 with domain: int(0..2) (representing constraint ((x_00008_00001=1) + (x_00007_00003=1)))
c Both direct and order encoding.
c Var 'aux1739' order represents '0' with '7109'
c Var 'aux1739' direct represents '0' with '7109'
c Var 'aux1739' order represents '1' with '7110'
-7109 7110 0
c Var 'aux1739' direct represents '1' with '7111'
7109 -7110 7111 0
-7111 7110 0
-7111 -7109 0
c Var 'aux1739' direct represents '2' with '-7110'
7109 7111 -7110 0
c Encoding variable: aux1740 with domain: int(0..2) (representing constraint ((x_00007_00002=1) + (x_00008_00002=1)))
c Both direct and order encoding.
c Var 'aux1740' order represents '0' with '7112'
c Var 'aux1740' direct represents '0' with '7112'
c Var 'aux1740' order represents '1' with '7113'
-7112 7113 0
c Var 'aux1740' direct represents '1' with '7114'
7112 -7113 7114 0
-7114 7113 0
-7114 -7112 0
c Var 'aux1740' direct represents '2' with '-7113'
7112 7114 -7113 0
c Encoding variable: aux1741 with domain: int(0..2) (representing constraint ((x_00007_00001=1) + (x_00009_00001=1)))
c Both direct and order encoding.
c Var 'aux1741' order represents '0' with '7115'
c Var 'aux1741' direct represents '0' with '7115'
c Var 'aux1741' order represents '1' with '7116'
-7115 7116 0
c Var 'aux1741' direct represents '1' with '7117'
7115 -7116 7117 0
-7117 7116 0
-7117 -7115 0
c Var 'aux1741' direct represents '2' with '-7116'
7115 7117 -7116 0
c Encoding variable: aux1742 with domain: int(0..2) (representing constraint ((x_00009_00003=1) + (x_00009_00002=1)))
c Both direct and order encoding.
c Var 'aux1742' order represents '0' with '7118'
c Var 'aux1742' direct represents '0' with '7118'
c Var 'aux1742' order represents '1' with '7119'
-7118 7119 0
c Var 'aux1742' direct represents '1' with '7120'
7118 -7119 7120 0
-7120 7119 0
-7120 -7118 0
c Var 'aux1742' direct represents '2' with '-7119'
7118 7120 -7119 0
c Encoding variable: aux1743 with domain: int(0..3) (representing constraint ((x_00008_00003=1) + aux1742))
c Both direct and order encoding.
c Var 'aux1743' order represents '0' with '7121'
c Var 'aux1743' direct represents '0' with '7121'
c Var 'aux1743' order represents '1' with '7122'
-7121 7122 0
c Var 'aux1743' direct represents '1' with '7123'
7121 -7122 7123 0
-7123 7122 0
-7123 -7121 0
c Var 'aux1743' order represents '2' with '7124'
-7122 7124 0
c Var 'aux1743' direct represents '2' with '7125'
7122 -7124 7125 0
-7125 7124 0
-7125 -7122 0
c Var 'aux1743' direct represents '3' with '-7124'
7121 7123 7125 -7124 0
c Encoding variable: aux1744 with domain: int(0..4) (representing constraint (aux1739 + aux1741))
c Both direct and order encoding.
c Var 'aux1744' order represents '0' with '7126'
c Var 'aux1744' direct represents '0' with '7126'
c Var 'aux1744' order represents '1' with '7127'
-7126 7127 0
c Var 'aux1744' direct represents '1' with '7128'
7126 -7127 7128 0
-7128 7127 0
-7128 -7126 0
c Var 'aux1744' order represents '2' with '7129'
-7127 7129 0
c Var 'aux1744' direct represents '2' with '7130'
7127 -7129 7130 0
-7130 7129 0
-7130 -7127 0
c Var 'aux1744' order represents '3' with '7131'
-7129 7131 0
c Var 'aux1744' direct represents '3' with '7132'
7129 -7131 7132 0
-7132 7131 0
-7132 -7129 0
c Var 'aux1744' direct represents '4' with '-7131'
7126 7128 7130 7132 -7131 0
c Encoding variable: aux1745 with domain: int(0..2) (representing constraint ((x_00008_00001=2) + (x_00007_00003=2)))
c Both direct and order encoding.
c Var 'aux1745' order represents '0' with '7133'
c Var 'aux1745' direct represents '0' with '7133'
c Var 'aux1745' order represents '1' with '7134'
-7133 7134 0
c Var 'aux1745' direct represents '1' with '7135'
7133 -7134 7135 0
-7135 7134 0
-7135 -7133 0
c Var 'aux1745' direct represents '2' with '-7134'
7133 7135 -7134 0
c Encoding variable: aux1746 with domain: int(0..2) (representing constraint ((x_00007_00002=2) + (x_00008_00002=2)))
c Both direct and order encoding.
c Var 'aux1746' order represents '0' with '7136'
c Var 'aux1746' direct represents '0' with '7136'
c Var 'aux1746' order represents '1' with '7137'
-7136 7137 0
c Var 'aux1746' direct represents '1' with '7138'
7136 -7137 7138 0
-7138 7137 0
-7138 -7136 0
c Var 'aux1746' direct represents '2' with '-7137'
7136 7138 -7137 0
c Encoding variable: aux1747 with domain: int(0..2) (representing constraint ((x_00007_00001=2) + (x_00009_00001=2)))
c Both direct and order encoding.
c Var 'aux1747' order represents '0' with '7139'
c Var 'aux1747' direct represents '0' with '7139'
c Var 'aux1747' order represents '1' with '7140'
-7139 7140 0
c Var 'aux1747' direct represents '1' with '7141'
7139 -7140 7141 0
-7141 7140 0
-7141 -7139 0
c Var 'aux1747' direct represents '2' with '-7140'
7139 7141 -7140 0
c Encoding variable: aux1748 with domain: int(0..2) (representing constraint ((x_00009_00003=2) + (x_00009_00002=2)))
c Both direct and order encoding.
c Var 'aux1748' order represents '0' with '7142'
c Var 'aux1748' direct represents '0' with '7142'
c Var 'aux1748' order represents '1' with '7143'
-7142 7143 0
c Var 'aux1748' direct represents '1' with '7144'
7142 -7143 7144 0
-7144 7143 0
-7144 -7142 0
c Var 'aux1748' direct represents '2' with '-7143'
7142 7144 -7143 0
c Encoding variable: aux1749 with domain: int(0..3) (representing constraint ((x_00008_00003=2) + aux1748))
c Both direct and order encoding.
c Var 'aux1749' order represents '0' with '7145'
c Var 'aux1749' direct represents '0' with '7145'
c Var 'aux1749' order represents '1' with '7146'
-7145 7146 0
c Var 'aux1749' direct represents '1' with '7147'
7145 -7146 7147 0
-7147 7146 0
-7147 -7145 0
c Var 'aux1749' order represents '2' with '7148'
-7146 7148 0
c Var 'aux1749' direct represents '2' with '7149'
7146 -7148 7149 0
-7149 7148 0
-7149 -7146 0
c Var 'aux1749' direct represents '3' with '-7148'
7145 7147 7149 -7148 0
c Encoding variable: aux1750 with domain: int(0..4) (representing constraint (aux1745 + aux1747))
c Both direct and order encoding.
c Var 'aux1750' order represents '0' with '7150'
c Var 'aux1750' direct represents '0' with '7150'
c Var 'aux1750' order represents '1' with '7151'
-7150 7151 0
c Var 'aux1750' direct represents '1' with '7152'
7150 -7151 7152 0
-7152 7151 0
-7152 -7150 0
c Var 'aux1750' order represents '2' with '7153'
-7151 7153 0
c Var 'aux1750' direct represents '2' with '7154'
7151 -7153 7154 0
-7154 7153 0
-7154 -7151 0
c Var 'aux1750' order represents '3' with '7155'
-7153 7155 0
c Var 'aux1750' direct represents '3' with '7156'
7153 -7155 7156 0
-7156 7155 0
-7156 -7153 0
c Var 'aux1750' direct represents '4' with '-7155'
7150 7152 7154 7156 -7155 0
c Encoding variable: aux1751 with domain: int(0..2) (representing constraint ((x_00008_00001=3) + (x_00007_00003=3)))
c Both direct and order encoding.
c Var 'aux1751' order represents '0' with '7157'
c Var 'aux1751' direct represents '0' with '7157'
c Var 'aux1751' order represents '1' with '7158'
-7157 7158 0
c Var 'aux1751' direct represents '1' with '7159'
7157 -7158 7159 0
-7159 7158 0
-7159 -7157 0
c Var 'aux1751' direct represents '2' with '-7158'
7157 7159 -7158 0
c Encoding variable: aux1752 with domain: int(0..2) (representing constraint ((x_00007_00002=3) + (x_00008_00002=3)))
c Both direct and order encoding.
c Var 'aux1752' order represents '0' with '7160'
c Var 'aux1752' direct represents '0' with '7160'
c Var 'aux1752' order represents '1' with '7161'
-7160 7161 0
c Var 'aux1752' direct represents '1' with '7162'
7160 -7161 7162 0
-7162 7161 0
-7162 -7160 0
c Var 'aux1752' direct represents '2' with '-7161'
7160 7162 -7161 0
c Encoding variable: aux1753 with domain: int(0..2) (representing constraint ((x_00007_00001=3) + (x_00009_00001=3)))
c Both direct and order encoding.
c Var 'aux1753' order represents '0' with '7163'
c Var 'aux1753' direct represents '0' with '7163'
c Var 'aux1753' order represents '1' with '7164'
-7163 7164 0
c Var 'aux1753' direct represents '1' with '7165'
7163 -7164 7165 0
-7165 7164 0
-7165 -7163 0
c Var 'aux1753' direct represents '2' with '-7164'
7163 7165 -7164 0
c Encoding variable: aux1754 with domain: int(0..2) (representing constraint ((x_00009_00003=3) + (x_00009_00002=3)))
c Both direct and order encoding.
c Var 'aux1754' order represents '0' with '7166'
c Var 'aux1754' direct represents '0' with '7166'
c Var 'aux1754' order represents '1' with '7167'
-7166 7167 0
c Var 'aux1754' direct represents '1' with '7168'
7166 -7167 7168 0
-7168 7167 0
-7168 -7166 0
c Var 'aux1754' direct represents '2' with '-7167'
7166 7168 -7167 0
c Encoding variable: aux1755 with domain: int(0..3) (representing constraint ((x_00008_00003=3) + aux1754))
c Both direct and order encoding.
c Var 'aux1755' order represents '0' with '7169'
c Var 'aux1755' direct represents '0' with '7169'
c Var 'aux1755' order represents '1' with '7170'
-7169 7170 0
c Var 'aux1755' direct represents '1' with '7171'
7169 -7170 7171 0
-7171 7170 0
-7171 -7169 0
c Var 'aux1755' order represents '2' with '7172'
-7170 7172 0
c Var 'aux1755' direct represents '2' with '7173'
7170 -7172 7173 0
-7173 7172 0
-7173 -7170 0
c Var 'aux1755' direct represents '3' with '-7172'
7169 7171 7173 -7172 0
c Encoding variable: aux1756 with domain: int(0..4) (representing constraint (aux1751 + aux1753))
c Both direct and order encoding.
c Var 'aux1756' order represents '0' with '7174'
c Var 'aux1756' direct represents '0' with '7174'
c Var 'aux1756' order represents '1' with '7175'
-7174 7175 0
c Var 'aux1756' direct represents '1' with '7176'
7174 -7175 7176 0
-7176 7175 0
-7176 -7174 0
c Var 'aux1756' order represents '2' with '7177'
-7175 7177 0
c Var 'aux1756' direct represents '2' with '7178'
7175 -7177 7178 0
-7178 7177 0
-7178 -7175 0
c Var 'aux1756' order represents '3' with '7179'
-7177 7179 0
c Var 'aux1756' direct represents '3' with '7180'
7177 -7179 7180 0
-7180 7179 0
-7180 -7177 0
c Var 'aux1756' direct represents '4' with '-7179'
7174 7176 7178 7180 -7179 0
c Encoding variable: aux1757 with domain: int(0..2) (representing constraint ((x_00008_00001=4) + (x_00007_00003=4)))
c Both direct and order encoding.
c Var 'aux1757' order represents '0' with '7181'
c Var 'aux1757' direct represents '0' with '7181'
c Var 'aux1757' order represents '1' with '7182'
-7181 7182 0
c Var 'aux1757' direct represents '1' with '7183'
7181 -7182 7183 0
-7183 7182 0
-7183 -7181 0
c Var 'aux1757' direct represents '2' with '-7182'
7181 7183 -7182 0
c Encoding variable: aux1758 with domain: int(0..2) (representing constraint ((x_00007_00002=4) + (x_00008_00002=4)))
c Both direct and order encoding.
c Var 'aux1758' order represents '0' with '7184'
c Var 'aux1758' direct represents '0' with '7184'
c Var 'aux1758' order represents '1' with '7185'
-7184 7185 0
c Var 'aux1758' direct represents '1' with '7186'
7184 -7185 7186 0
-7186 7185 0
-7186 -7184 0
c Var 'aux1758' direct represents '2' with '-7185'
7184 7186 -7185 0
c Encoding variable: aux1759 with domain: int(0..2) (representing constraint ((x_00007_00001=4) + (x_00009_00001=4)))
c Both direct and order encoding.
c Var 'aux1759' order represents '0' with '7187'
c Var 'aux1759' direct represents '0' with '7187'
c Var 'aux1759' order represents '1' with '7188'
-7187 7188 0
c Var 'aux1759' direct represents '1' with '7189'
7187 -7188 7189 0
-7189 7188 0
-7189 -7187 0
c Var 'aux1759' direct represents '2' with '-7188'
7187 7189 -7188 0
c Encoding variable: aux1760 with domain: int(0..2) (representing constraint ((x_00009_00003=4) + (x_00009_00002=4)))
c Both direct and order encoding.
c Var 'aux1760' order represents '0' with '7190'
c Var 'aux1760' direct represents '0' with '7190'
c Var 'aux1760' order represents '1' with '7191'
-7190 7191 0
c Var 'aux1760' direct represents '1' with '7192'
7190 -7191 7192 0
-7192 7191 0
-7192 -7190 0
c Var 'aux1760' direct represents '2' with '-7191'
7190 7192 -7191 0
c Encoding variable: aux1761 with domain: int(0..3) (representing constraint ((x_00008_00003=4) + aux1760))
c Both direct and order encoding.
c Var 'aux1761' order represents '0' with '7193'
c Var 'aux1761' direct represents '0' with '7193'
c Var 'aux1761' order represents '1' with '7194'
-7193 7194 0
c Var 'aux1761' direct represents '1' with '7195'
7193 -7194 7195 0
-7195 7194 0
-7195 -7193 0
c Var 'aux1761' order represents '2' with '7196'
-7194 7196 0
c Var 'aux1761' direct represents '2' with '7197'
7194 -7196 7197 0
-7197 7196 0
-7197 -7194 0
c Var 'aux1761' direct represents '3' with '-7196'
7193 7195 7197 -7196 0
c Encoding variable: aux1762 with domain: int(0..4) (representing constraint (aux1757 + aux1759))
c Both direct and order encoding.
c Var 'aux1762' order represents '0' with '7198'
c Var 'aux1762' direct represents '0' with '7198'
c Var 'aux1762' order represents '1' with '7199'
-7198 7199 0
c Var 'aux1762' direct represents '1' with '7200'
7198 -7199 7200 0
-7200 7199 0
-7200 -7198 0
c Var 'aux1762' order represents '2' with '7201'
-7199 7201 0
c Var 'aux1762' direct represents '2' with '7202'
7199 -7201 7202 0
-7202 7201 0
-7202 -7199 0
c Var 'aux1762' order represents '3' with '7203'
-7201 7203 0
c Var 'aux1762' direct represents '3' with '7204'
7201 -7203 7204 0
-7204 7203 0
-7204 -7201 0
c Var 'aux1762' direct represents '4' with '-7203'
7198 7200 7202 7204 -7203 0
c Encoding variable: aux1763 with domain: int(0..2) (representing constraint ((x_00008_00001=5) + (x_00007_00003=5)))
c Both direct and order encoding.
c Var 'aux1763' order represents '0' with '7205'
c Var 'aux1763' direct represents '0' with '7205'
c Var 'aux1763' order represents '1' with '7206'
-7205 7206 0
c Var 'aux1763' direct represents '1' with '7207'
7205 -7206 7207 0
-7207 7206 0
-7207 -7205 0
c Var 'aux1763' direct represents '2' with '-7206'
7205 7207 -7206 0
c Encoding variable: aux1764 with domain: int(0..2) (representing constraint ((x_00007_00002=5) + (x_00008_00002=5)))
c Both direct and order encoding.
c Var 'aux1764' order represents '0' with '7208'
c Var 'aux1764' direct represents '0' with '7208'
c Var 'aux1764' order represents '1' with '7209'
-7208 7209 0
c Var 'aux1764' direct represents '1' with '7210'
7208 -7209 7210 0
-7210 7209 0
-7210 -7208 0
c Var 'aux1764' direct represents '2' with '-7209'
7208 7210 -7209 0
c Encoding variable: aux1765 with domain: int(0..2) (representing constraint ((x_00007_00001=5) + (x_00009_00001=5)))
c Both direct and order encoding.
c Var 'aux1765' order represents '0' with '7211'
c Var 'aux1765' direct represents '0' with '7211'
c Var 'aux1765' order represents '1' with '7212'
-7211 7212 0
c Var 'aux1765' direct represents '1' with '7213'
7211 -7212 7213 0
-7213 7212 0
-7213 -7211 0
c Var 'aux1765' direct represents '2' with '-7212'
7211 7213 -7212 0
c Encoding variable: aux1766 with domain: int(0..2) (representing constraint ((x_00009_00003=5) + (x_00009_00002=5)))
c Both direct and order encoding.
c Var 'aux1766' order represents '0' with '7214'
c Var 'aux1766' direct represents '0' with '7214'
c Var 'aux1766' order represents '1' with '7215'
-7214 7215 0
c Var 'aux1766' direct represents '1' with '7216'
7214 -7215 7216 0
-7216 7215 0
-7216 -7214 0
c Var 'aux1766' direct represents '2' with '-7215'
7214 7216 -7215 0
c Encoding variable: aux1767 with domain: int(0..3) (representing constraint ((x_00008_00003=5) + aux1766))
c Both direct and order encoding.
c Var 'aux1767' order represents '0' with '7217'
c Var 'aux1767' direct represents '0' with '7217'
c Var 'aux1767' order represents '1' with '7218'
-7217 7218 0
c Var 'aux1767' direct represents '1' with '7219'
7217 -7218 7219 0
-7219 7218 0
-7219 -7217 0
c Var 'aux1767' order represents '2' with '7220'
-7218 7220 0
c Var 'aux1767' direct represents '2' with '7221'
7218 -7220 7221 0
-7221 7220 0
-7221 -7218 0
c Var 'aux1767' direct represents '3' with '-7220'
7217 7219 7221 -7220 0
c Encoding variable: aux1768 with domain: int(0..4) (representing constraint (aux1763 + aux1765))
c Both direct and order encoding.
c Var 'aux1768' order represents '0' with '7222'
c Var 'aux1768' direct represents '0' with '7222'
c Var 'aux1768' order represents '1' with '7223'
-7222 7223 0
c Var 'aux1768' direct represents '1' with '7224'
7222 -7223 7224 0
-7224 7223 0
-7224 -7222 0
c Var 'aux1768' order represents '2' with '7225'
-7223 7225 0
c Var 'aux1768' direct represents '2' with '7226'
7223 -7225 7226 0
-7226 7225 0
-7226 -7223 0
c Var 'aux1768' order represents '3' with '7227'
-7225 7227 0
c Var 'aux1768' direct represents '3' with '7228'
7225 -7227 7228 0
-7228 7227 0
-7228 -7225 0
c Var 'aux1768' direct represents '4' with '-7227'
7222 7224 7226 7228 -7227 0
c Encoding variable: aux1769 with domain: int(0..2) (representing constraint ((x_00008_00001=6) + (x_00007_00003=6)))
c Both direct and order encoding.
c Var 'aux1769' order represents '0' with '7229'
c Var 'aux1769' direct represents '0' with '7229'
c Var 'aux1769' order represents '1' with '7230'
-7229 7230 0
c Var 'aux1769' direct represents '1' with '7231'
7229 -7230 7231 0
-7231 7230 0
-7231 -7229 0
c Var 'aux1769' direct represents '2' with '-7230'
7229 7231 -7230 0
c Encoding variable: aux1770 with domain: int(0..2) (representing constraint ((x_00007_00002=6) + (x_00008_00002=6)))
c Both direct and order encoding.
c Var 'aux1770' order represents '0' with '7232'
c Var 'aux1770' direct represents '0' with '7232'
c Var 'aux1770' order represents '1' with '7233'
-7232 7233 0
c Var 'aux1770' direct represents '1' with '7234'
7232 -7233 7234 0
-7234 7233 0
-7234 -7232 0
c Var 'aux1770' direct represents '2' with '-7233'
7232 7234 -7233 0
c Encoding variable: aux1771 with domain: int(0..2) (representing constraint ((x_00007_00001=6) + (x_00009_00001=6)))
c Both direct and order encoding.
c Var 'aux1771' order represents '0' with '7235'
c Var 'aux1771' direct represents '0' with '7235'
c Var 'aux1771' order represents '1' with '7236'
-7235 7236 0
c Var 'aux1771' direct represents '1' with '7237'
7235 -7236 7237 0
-7237 7236 0
-7237 -7235 0
c Var 'aux1771' direct represents '2' with '-7236'
7235 7237 -7236 0
c Encoding variable: aux1772 with domain: int(0..2) (representing constraint ((x_00009_00003=6) + (x_00009_00002=6)))
c Both direct and order encoding.
c Var 'aux1772' order represents '0' with '7238'
c Var 'aux1772' direct represents '0' with '7238'
c Var 'aux1772' order represents '1' with '7239'
-7238 7239 0
c Var 'aux1772' direct represents '1' with '7240'
7238 -7239 7240 0
-7240 7239 0
-7240 -7238 0
c Var 'aux1772' direct represents '2' with '-7239'
7238 7240 -7239 0
c Encoding variable: aux1773 with domain: int(0..3) (representing constraint ((x_00008_00003=6) + aux1772))
c Both direct and order encoding.
c Var 'aux1773' order represents '0' with '7241'
c Var 'aux1773' direct represents '0' with '7241'
c Var 'aux1773' order represents '1' with '7242'
-7241 7242 0
c Var 'aux1773' direct represents '1' with '7243'
7241 -7242 7243 0
-7243 7242 0
-7243 -7241 0
c Var 'aux1773' order represents '2' with '7244'
-7242 7244 0
c Var 'aux1773' direct represents '2' with '7245'
7242 -7244 7245 0
-7245 7244 0
-7245 -7242 0
c Var 'aux1773' direct represents '3' with '-7244'
7241 7243 7245 -7244 0
c Encoding variable: aux1774 with domain: int(0..4) (representing constraint (aux1769 + aux1771))
c Both direct and order encoding.
c Var 'aux1774' order represents '0' with '7246'
c Var 'aux1774' direct represents '0' with '7246'
c Var 'aux1774' order represents '1' with '7247'
-7246 7247 0
c Var 'aux1774' direct represents '1' with '7248'
7246 -7247 7248 0
-7248 7247 0
-7248 -7246 0
c Var 'aux1774' order represents '2' with '7249'
-7247 7249 0
c Var 'aux1774' direct represents '2' with '7250'
7247 -7249 7250 0
-7250 7249 0
-7250 -7247 0
c Var 'aux1774' order represents '3' with '7251'
-7249 7251 0
c Var 'aux1774' direct represents '3' with '7252'
7249 -7251 7252 0
-7252 7251 0
-7252 -7249 0
c Var 'aux1774' direct represents '4' with '-7251'
7246 7248 7250 7252 -7251 0
c Encoding variable: aux1775 with domain: int(0..2) (representing constraint ((x_00008_00001=7) + (x_00007_00003=7)))
c Both direct and order encoding.
c Var 'aux1775' order represents '0' with '7253'
c Var 'aux1775' direct represents '0' with '7253'
c Var 'aux1775' order represents '1' with '7254'
-7253 7254 0
c Var 'aux1775' direct represents '1' with '7255'
7253 -7254 7255 0
-7255 7254 0
-7255 -7253 0
c Var 'aux1775' direct represents '2' with '-7254'
7253 7255 -7254 0
c Encoding variable: aux1776 with domain: int(0..2) (representing constraint ((x_00007_00002=7) + (x_00008_00002=7)))
c Both direct and order encoding.
c Var 'aux1776' order represents '0' with '7256'
c Var 'aux1776' direct represents '0' with '7256'
c Var 'aux1776' order represents '1' with '7257'
-7256 7257 0
c Var 'aux1776' direct represents '1' with '7258'
7256 -7257 7258 0
-7258 7257 0
-7258 -7256 0
c Var 'aux1776' direct represents '2' with '-7257'
7256 7258 -7257 0
c Encoding variable: aux1777 with domain: int(0..2) (representing constraint ((x_00007_00001=7) + (x_00009_00001=7)))
c Both direct and order encoding.
c Var 'aux1777' order represents '0' with '7259'
c Var 'aux1777' direct represents '0' with '7259'
c Var 'aux1777' order represents '1' with '7260'
-7259 7260 0
c Var 'aux1777' direct represents '1' with '7261'
7259 -7260 7261 0
-7261 7260 0
-7261 -7259 0
c Var 'aux1777' direct represents '2' with '-7260'
7259 7261 -7260 0
c Encoding variable: aux1778 with domain: int(0..2) (representing constraint ((x_00009_00003=7) + (x_00009_00002=7)))
c Both direct and order encoding.
c Var 'aux1778' order represents '0' with '7262'
c Var 'aux1778' direct represents '0' with '7262'
c Var 'aux1778' order represents '1' with '7263'
-7262 7263 0
c Var 'aux1778' direct represents '1' with '7264'
7262 -7263 7264 0
-7264 7263 0
-7264 -7262 0
c Var 'aux1778' direct represents '2' with '-7263'
7262 7264 -7263 0
c Encoding variable: aux1779 with domain: int(0..3) (representing constraint ((x_00008_00003=7) + aux1778))
c Both direct and order encoding.
c Var 'aux1779' order represents '0' with '7265'
c Var 'aux1779' direct represents '0' with '7265'
c Var 'aux1779' order represents '1' with '7266'
-7265 7266 0
c Var 'aux1779' direct represents '1' with '7267'
7265 -7266 7267 0
-7267 7266 0
-7267 -7265 0
c Var 'aux1779' order represents '2' with '7268'
-7266 7268 0
c Var 'aux1779' direct represents '2' with '7269'
7266 -7268 7269 0
-7269 7268 0
-7269 -7266 0
c Var 'aux1779' direct represents '3' with '-7268'
7265 7267 7269 -7268 0
c Encoding variable: aux1780 with domain: int(0..4) (representing constraint (aux1775 + aux1777))
c Both direct and order encoding.
c Var 'aux1780' order represents '0' with '7270'
c Var 'aux1780' direct represents '0' with '7270'
c Var 'aux1780' order represents '1' with '7271'
-7270 7271 0
c Var 'aux1780' direct represents '1' with '7272'
7270 -7271 7272 0
-7272 7271 0
-7272 -7270 0
c Var 'aux1780' order represents '2' with '7273'
-7271 7273 0
c Var 'aux1780' direct represents '2' with '7274'
7271 -7273 7274 0
-7274 7273 0
-7274 -7271 0
c Var 'aux1780' order represents '3' with '7275'
-7273 7275 0
c Var 'aux1780' direct represents '3' with '7276'
7273 -7275 7276 0
-7276 7275 0
-7276 -7273 0
c Var 'aux1780' direct represents '4' with '-7275'
7270 7272 7274 7276 -7275 0
c Encoding variable: aux1781 with domain: int(0..2) (representing constraint ((x_00008_00001=8) + (x_00007_00003=8)))
c Both direct and order encoding.
c Var 'aux1781' order represents '0' with '7277'
c Var 'aux1781' direct represents '0' with '7277'
c Var 'aux1781' order represents '1' with '7278'
-7277 7278 0
c Var 'aux1781' direct represents '1' with '7279'
7277 -7278 7279 0
-7279 7278 0
-7279 -7277 0
c Var 'aux1781' direct represents '2' with '-7278'
7277 7279 -7278 0
c Encoding variable: aux1782 with domain: int(0..2) (representing constraint ((x_00007_00002=8) + (x_00008_00002=8)))
c Both direct and order encoding.
c Var 'aux1782' order represents '0' with '7280'
c Var 'aux1782' direct represents '0' with '7280'
c Var 'aux1782' order represents '1' with '7281'
-7280 7281 0
c Var 'aux1782' direct represents '1' with '7282'
7280 -7281 7282 0
-7282 7281 0
-7282 -7280 0
c Var 'aux1782' direct represents '2' with '-7281'
7280 7282 -7281 0
c Encoding variable: aux1783 with domain: int(0..2) (representing constraint ((x_00007_00001=8) + (x_00009_00001=8)))
c Both direct and order encoding.
c Var 'aux1783' order represents '0' with '7283'
c Var 'aux1783' direct represents '0' with '7283'
c Var 'aux1783' order represents '1' with '7284'
-7283 7284 0
c Var 'aux1783' direct represents '1' with '7285'
7283 -7284 7285 0
-7285 7284 0
-7285 -7283 0
c Var 'aux1783' direct represents '2' with '-7284'
7283 7285 -7284 0
c Encoding variable: aux1784 with domain: int(0..2) (representing constraint ((x_00009_00003=8) + (x_00009_00002=8)))
c Both direct and order encoding.
c Var 'aux1784' order represents '0' with '7286'
c Var 'aux1784' direct represents '0' with '7286'
c Var 'aux1784' order represents '1' with '7287'
-7286 7287 0
c Var 'aux1784' direct represents '1' with '7288'
7286 -7287 7288 0
-7288 7287 0
-7288 -7286 0
c Var 'aux1784' direct represents '2' with '-7287'
7286 7288 -7287 0
c Encoding variable: aux1785 with domain: int(0..3) (representing constraint ((x_00008_00003=8) + aux1784))
c Both direct and order encoding.
c Var 'aux1785' order represents '0' with '7289'
c Var 'aux1785' direct represents '0' with '7289'
c Var 'aux1785' order represents '1' with '7290'
-7289 7290 0
c Var 'aux1785' direct represents '1' with '7291'
7289 -7290 7291 0
-7291 7290 0
-7291 -7289 0
c Var 'aux1785' order represents '2' with '7292'
-7290 7292 0
c Var 'aux1785' direct represents '2' with '7293'
7290 -7292 7293 0
-7293 7292 0
-7293 -7290 0
c Var 'aux1785' direct represents '3' with '-7292'
7289 7291 7293 -7292 0
c Encoding variable: aux1786 with domain: int(0..4) (representing constraint (aux1781 + aux1783))
c Both direct and order encoding.
c Var 'aux1786' order represents '0' with '7294'
c Var 'aux1786' direct represents '0' with '7294'
c Var 'aux1786' order represents '1' with '7295'
-7294 7295 0
c Var 'aux1786' direct represents '1' with '7296'
7294 -7295 7296 0
-7296 7295 0
-7296 -7294 0
c Var 'aux1786' order represents '2' with '7297'
-7295 7297 0
c Var 'aux1786' direct represents '2' with '7298'
7295 -7297 7298 0
-7298 7297 0
-7298 -7295 0
c Var 'aux1786' order represents '3' with '7299'
-7297 7299 0
c Var 'aux1786' direct represents '3' with '7300'
7297 -7299 7300 0
-7300 7299 0
-7300 -7297 0
c Var 'aux1786' direct represents '4' with '-7299'
7294 7296 7298 7300 -7299 0
c Encoding variable: aux1787 with domain: int(0..2) (representing constraint ((x_00008_00001=9) + (x_00007_00003=9)))
c Both direct and order encoding.
c Var 'aux1787' order represents '0' with '7301'
c Var 'aux1787' direct represents '0' with '7301'
c Var 'aux1787' order represents '1' with '7302'
-7301 7302 0
c Var 'aux1787' direct represents '1' with '7303'
7301 -7302 7303 0
-7303 7302 0
-7303 -7301 0
c Var 'aux1787' direct represents '2' with '-7302'
7301 7303 -7302 0
c Encoding variable: aux1788 with domain: int(0..2) (representing constraint ((x_00007_00002=9) + (x_00008_00002=9)))
c Both direct and order encoding.
c Var 'aux1788' order represents '0' with '7304'
c Var 'aux1788' direct represents '0' with '7304'
c Var 'aux1788' order represents '1' with '7305'
-7304 7305 0
c Var 'aux1788' direct represents '1' with '7306'
7304 -7305 7306 0
-7306 7305 0
-7306 -7304 0
c Var 'aux1788' direct represents '2' with '-7305'
7304 7306 -7305 0
c Encoding variable: aux1789 with domain: int(0..2) (representing constraint ((x_00007_00001=9) + (x_00009_00001=9)))
c Both direct and order encoding.
c Var 'aux1789' order represents '0' with '7307'
c Var 'aux1789' direct represents '0' with '7307'
c Var 'aux1789' order represents '1' with '7308'
-7307 7308 0
c Var 'aux1789' direct represents '1' with '7309'
7307 -7308 7309 0
-7309 7308 0
-7309 -7307 0
c Var 'aux1789' direct represents '2' with '-7308'
7307 7309 -7308 0
c Encoding variable: aux1790 with domain: int(0..2) (representing constraint ((x_00009_00003=9) + (x_00009_00002=9)))
c Both direct and order encoding.
c Var 'aux1790' order represents '0' with '7310'
c Var 'aux1790' direct represents '0' with '7310'
c Var 'aux1790' order represents '1' with '7311'
-7310 7311 0
c Var 'aux1790' direct represents '1' with '7312'
7310 -7311 7312 0
-7312 7311 0
-7312 -7310 0
c Var 'aux1790' direct represents '2' with '-7311'
7310 7312 -7311 0
c Encoding variable: aux1791 with domain: int(0..3) (representing constraint ((x_00008_00003=9) + aux1790))
c Both direct and order encoding.
c Var 'aux1791' order represents '0' with '7313'
c Var 'aux1791' direct represents '0' with '7313'
c Var 'aux1791' order represents '1' with '7314'
-7313 7314 0
c Var 'aux1791' direct represents '1' with '7315'
7313 -7314 7315 0
-7315 7314 0
-7315 -7313 0
c Var 'aux1791' order represents '2' with '7316'
-7314 7316 0
c Var 'aux1791' direct represents '2' with '7317'
7314 -7316 7317 0
-7317 7316 0
-7317 -7314 0
c Var 'aux1791' direct represents '3' with '-7316'
7313 7315 7317 -7316 0
c Encoding variable: aux1792 with domain: int(0..4) (representing constraint (aux1787 + aux1789))
c Both direct and order encoding.
c Var 'aux1792' order represents '0' with '7318'
c Var 'aux1792' direct represents '0' with '7318'
c Var 'aux1792' order represents '1' with '7319'
-7318 7319 0
c Var 'aux1792' direct represents '1' with '7320'
7318 -7319 7320 0
-7320 7319 0
-7320 -7318 0
c Var 'aux1792' order represents '2' with '7321'
-7319 7321 0
c Var 'aux1792' direct represents '2' with '7322'
7319 -7321 7322 0
-7322 7321 0
-7322 -7319 0
c Var 'aux1792' order represents '3' with '7323'
-7321 7323 0
c Var 'aux1792' direct represents '3' with '7324'
7321 -7323 7324 0
-7324 7323 0
-7324 -7321 0
c Var 'aux1792' direct represents '4' with '-7323'
7318 7320 7322 7324 -7323 0
c Encoding variable: aux1793 with domain: int(0..2) (representing constraint ((x_00008_00004=1) + (x_00007_00006=1)))
c Both direct and order encoding.
c Var 'aux1793' order represents '0' with '7325'
c Var 'aux1793' direct represents '0' with '7325'
c Var 'aux1793' order represents '1' with '7326'
-7325 7326 0
c Var 'aux1793' direct represents '1' with '7327'
7325 -7326 7327 0
-7327 7326 0
-7327 -7325 0
c Var 'aux1793' direct represents '2' with '-7326'
7325 7327 -7326 0
c Encoding variable: aux1794 with domain: int(0..2) (representing constraint ((x_00007_00005=1) + (x_00008_00005=1)))
c Both direct and order encoding.
c Var 'aux1794' order represents '0' with '7328'
c Var 'aux1794' direct represents '0' with '7328'
c Var 'aux1794' order represents '1' with '7329'
-7328 7329 0
c Var 'aux1794' direct represents '1' with '7330'
7328 -7329 7330 0
-7330 7329 0
-7330 -7328 0
c Var 'aux1794' direct represents '2' with '-7329'
7328 7330 -7329 0
c Encoding variable: aux1795 with domain: int(0..2) (representing constraint ((x_00007_00004=1) + (x_00009_00004=1)))
c Both direct and order encoding.
c Var 'aux1795' order represents '0' with '7331'
c Var 'aux1795' direct represents '0' with '7331'
c Var 'aux1795' order represents '1' with '7332'
-7331 7332 0
c Var 'aux1795' direct represents '1' with '7333'
7331 -7332 7333 0
-7333 7332 0
-7333 -7331 0
c Var 'aux1795' direct represents '2' with '-7332'
7331 7333 -7332 0
c Encoding variable: aux1796 with domain: int(0..2) (representing constraint ((x_00009_00006=1) + (x_00009_00005=1)))
c Both direct and order encoding.
c Var 'aux1796' order represents '0' with '7334'
c Var 'aux1796' direct represents '0' with '7334'
c Var 'aux1796' order represents '1' with '7335'
-7334 7335 0
c Var 'aux1796' direct represents '1' with '7336'
7334 -7335 7336 0
-7336 7335 0
-7336 -7334 0
c Var 'aux1796' direct represents '2' with '-7335'
7334 7336 -7335 0
c Encoding variable: aux1797 with domain: int(0..3) (representing constraint ((x_00008_00006=1) + aux1796))
c Both direct and order encoding.
c Var 'aux1797' order represents '0' with '7337'
c Var 'aux1797' direct represents '0' with '7337'
c Var 'aux1797' order represents '1' with '7338'
-7337 7338 0
c Var 'aux1797' direct represents '1' with '7339'
7337 -7338 7339 0
-7339 7338 0
-7339 -7337 0
c Var 'aux1797' order represents '2' with '7340'
-7338 7340 0
c Var 'aux1797' direct represents '2' with '7341'
7338 -7340 7341 0
-7341 7340 0
-7341 -7338 0
c Var 'aux1797' direct represents '3' with '-7340'
7337 7339 7341 -7340 0
c Encoding variable: aux1798 with domain: int(0..4) (representing constraint (aux1793 + aux1795))
c Both direct and order encoding.
c Var 'aux1798' order represents '0' with '7342'
c Var 'aux1798' direct represents '0' with '7342'
c Var 'aux1798' order represents '1' with '7343'
-7342 7343 0
c Var 'aux1798' direct represents '1' with '7344'
7342 -7343 7344 0
-7344 7343 0
-7344 -7342 0
c Var 'aux1798' order represents '2' with '7345'
-7343 7345 0
c Var 'aux1798' direct represents '2' with '7346'
7343 -7345 7346 0
-7346 7345 0
-7346 -7343 0
c Var 'aux1798' order represents '3' with '7347'
-7345 7347 0
c Var 'aux1798' direct represents '3' with '7348'
7345 -7347 7348 0
-7348 7347 0
-7348 -7345 0
c Var 'aux1798' direct represents '4' with '-7347'
7342 7344 7346 7348 -7347 0
c Encoding variable: aux1799 with domain: int(0..2) (representing constraint ((x_00008_00004=2) + (x_00007_00006=2)))
c Both direct and order encoding.
c Var 'aux1799' order represents '0' with '7349'
c Var 'aux1799' direct represents '0' with '7349'
c Var 'aux1799' order represents '1' with '7350'
-7349 7350 0
c Var 'aux1799' direct represents '1' with '7351'
7349 -7350 7351 0
-7351 7350 0
-7351 -7349 0
c Var 'aux1799' direct represents '2' with '-7350'
7349 7351 -7350 0
c Encoding variable: aux1800 with domain: int(0..2) (representing constraint ((x_00007_00005=2) + (x_00008_00005=2)))
c Both direct and order encoding.
c Var 'aux1800' order represents '0' with '7352'
c Var 'aux1800' direct represents '0' with '7352'
c Var 'aux1800' order represents '1' with '7353'
-7352 7353 0
c Var 'aux1800' direct represents '1' with '7354'
7352 -7353 7354 0
-7354 7353 0
-7354 -7352 0
c Var 'aux1800' direct represents '2' with '-7353'
7352 7354 -7353 0
c Encoding variable: aux1801 with domain: int(0..2) (representing constraint ((x_00007_00004=2) + (x_00009_00004=2)))
c Both direct and order encoding.
c Var 'aux1801' order represents '0' with '7355'
c Var 'aux1801' direct represents '0' with '7355'
c Var 'aux1801' order represents '1' with '7356'
-7355 7356 0
c Var 'aux1801' direct represents '1' with '7357'
7355 -7356 7357 0
-7357 7356 0
-7357 -7355 0
c Var 'aux1801' direct represents '2' with '-7356'
7355 7357 -7356 0
c Encoding variable: aux1802 with domain: int(0..2) (representing constraint ((x_00009_00006=2) + (x_00009_00005=2)))
c Both direct and order encoding.
c Var 'aux1802' order represents '0' with '7358'
c Var 'aux1802' direct represents '0' with '7358'
c Var 'aux1802' order represents '1' with '7359'
-7358 7359 0
c Var 'aux1802' direct represents '1' with '7360'
7358 -7359 7360 0
-7360 7359 0
-7360 -7358 0
c Var 'aux1802' direct represents '2' with '-7359'
7358 7360 -7359 0
c Encoding variable: aux1803 with domain: int(0..3) (representing constraint ((x_00008_00006=2) + aux1802))
c Both direct and order encoding.
c Var 'aux1803' order represents '0' with '7361'
c Var 'aux1803' direct represents '0' with '7361'
c Var 'aux1803' order represents '1' with '7362'
-7361 7362 0
c Var 'aux1803' direct represents '1' with '7363'
7361 -7362 7363 0
-7363 7362 0
-7363 -7361 0
c Var 'aux1803' order represents '2' with '7364'
-7362 7364 0
c Var 'aux1803' direct represents '2' with '7365'
7362 -7364 7365 0
-7365 7364 0
-7365 -7362 0
c Var 'aux1803' direct represents '3' with '-7364'
7361 7363 7365 -7364 0
c Encoding variable: aux1804 with domain: int(0..4) (representing constraint (aux1799 + aux1801))
c Both direct and order encoding.
c Var 'aux1804' order represents '0' with '7366'
c Var 'aux1804' direct represents '0' with '7366'
c Var 'aux1804' order represents '1' with '7367'
-7366 7367 0
c Var 'aux1804' direct represents '1' with '7368'
7366 -7367 7368 0
-7368 7367 0
-7368 -7366 0
c Var 'aux1804' order represents '2' with '7369'
-7367 7369 0
c Var 'aux1804' direct represents '2' with '7370'
7367 -7369 7370 0
-7370 7369 0
-7370 -7367 0
c Var 'aux1804' order represents '3' with '7371'
-7369 7371 0
c Var 'aux1804' direct represents '3' with '7372'
7369 -7371 7372 0
-7372 7371 0
-7372 -7369 0
c Var 'aux1804' direct represents '4' with '-7371'
7366 7368 7370 7372 -7371 0
c Encoding variable: aux1805 with domain: int(0..2) (representing constraint ((x_00008_00004=3) + (x_00007_00006=3)))
c Both direct and order encoding.
c Var 'aux1805' order represents '0' with '7373'
c Var 'aux1805' direct represents '0' with '7373'
c Var 'aux1805' order represents '1' with '7374'
-7373 7374 0
c Var 'aux1805' direct represents '1' with '7375'
7373 -7374 7375 0
-7375 7374 0
-7375 -7373 0
c Var 'aux1805' direct represents '2' with '-7374'
7373 7375 -7374 0
c Encoding variable: aux1806 with domain: int(0..2) (representing constraint ((x_00007_00005=3) + (x_00008_00005=3)))
c Both direct and order encoding.
c Var 'aux1806' order represents '0' with '7376'
c Var 'aux1806' direct represents '0' with '7376'
c Var 'aux1806' order represents '1' with '7377'
-7376 7377 0
c Var 'aux1806' direct represents '1' with '7378'
7376 -7377 7378 0
-7378 7377 0
-7378 -7376 0
c Var 'aux1806' direct represents '2' with '-7377'
7376 7378 -7377 0
c Encoding variable: aux1807 with domain: int(0..2) (representing constraint ((x_00007_00004=3) + (x_00009_00004=3)))
c Both direct and order encoding.
c Var 'aux1807' order represents '0' with '7379'
c Var 'aux1807' direct represents '0' with '7379'
c Var 'aux1807' order represents '1' with '7380'
-7379 7380 0
c Var 'aux1807' direct represents '1' with '7381'
7379 -7380 7381 0
-7381 7380 0
-7381 -7379 0
c Var 'aux1807' direct represents '2' with '-7380'
7379 7381 -7380 0
c Encoding variable: aux1808 with domain: int(0..2) (representing constraint ((x_00009_00006=3) + (x_00009_00005=3)))
c Both direct and order encoding.
c Var 'aux1808' order represents '0' with '7382'
c Var 'aux1808' direct represents '0' with '7382'
c Var 'aux1808' order represents '1' with '7383'
-7382 7383 0
c Var 'aux1808' direct represents '1' with '7384'
7382 -7383 7384 0
-7384 7383 0
-7384 -7382 0
c Var 'aux1808' direct represents '2' with '-7383'
7382 7384 -7383 0
c Encoding variable: aux1809 with domain: int(0..3) (representing constraint ((x_00008_00006=3) + aux1808))
c Both direct and order encoding.
c Var 'aux1809' order represents '0' with '7385'
c Var 'aux1809' direct represents '0' with '7385'
c Var 'aux1809' order represents '1' with '7386'
-7385 7386 0
c Var 'aux1809' direct represents '1' with '7387'
7385 -7386 7387 0
-7387 7386 0
-7387 -7385 0
c Var 'aux1809' order represents '2' with '7388'
-7386 7388 0
c Var 'aux1809' direct represents '2' with '7389'
7386 -7388 7389 0
-7389 7388 0
-7389 -7386 0
c Var 'aux1809' direct represents '3' with '-7388'
7385 7387 7389 -7388 0
c Encoding variable: aux1810 with domain: int(0..4) (representing constraint (aux1805 + aux1807))
c Both direct and order encoding.
c Var 'aux1810' order represents '0' with '7390'
c Var 'aux1810' direct represents '0' with '7390'
c Var 'aux1810' order represents '1' with '7391'
-7390 7391 0
c Var 'aux1810' direct represents '1' with '7392'
7390 -7391 7392 0
-7392 7391 0
-7392 -7390 0
c Var 'aux1810' order represents '2' with '7393'
-7391 7393 0
c Var 'aux1810' direct represents '2' with '7394'
7391 -7393 7394 0
-7394 7393 0
-7394 -7391 0
c Var 'aux1810' order represents '3' with '7395'
-7393 7395 0
c Var 'aux1810' direct represents '3' with '7396'
7393 -7395 7396 0
-7396 7395 0
-7396 -7393 0
c Var 'aux1810' direct represents '4' with '-7395'
7390 7392 7394 7396 -7395 0
c Encoding variable: aux1811 with domain: int(0..2) (representing constraint ((x_00008_00004=4) + (x_00007_00006=4)))
c Both direct and order encoding.
c Var 'aux1811' order represents '0' with '7397'
c Var 'aux1811' direct represents '0' with '7397'
c Var 'aux1811' order represents '1' with '7398'
-7397 7398 0
c Var 'aux1811' direct represents '1' with '7399'
7397 -7398 7399 0
-7399 7398 0
-7399 -7397 0
c Var 'aux1811' direct represents '2' with '-7398'
7397 7399 -7398 0
c Encoding variable: aux1812 with domain: int(0..2) (representing constraint ((x_00007_00005=4) + (x_00008_00005=4)))
c Both direct and order encoding.
c Var 'aux1812' order represents '0' with '7400'
c Var 'aux1812' direct represents '0' with '7400'
c Var 'aux1812' order represents '1' with '7401'
-7400 7401 0
c Var 'aux1812' direct represents '1' with '7402'
7400 -7401 7402 0
-7402 7401 0
-7402 -7400 0
c Var 'aux1812' direct represents '2' with '-7401'
7400 7402 -7401 0
c Encoding variable: aux1813 with domain: int(0..2) (representing constraint ((x_00007_00004=4) + (x_00009_00004=4)))
c Both direct and order encoding.
c Var 'aux1813' order represents '0' with '7403'
c Var 'aux1813' direct represents '0' with '7403'
c Var 'aux1813' order represents '1' with '7404'
-7403 7404 0
c Var 'aux1813' direct represents '1' with '7405'
7403 -7404 7405 0
-7405 7404 0
-7405 -7403 0
c Var 'aux1813' direct represents '2' with '-7404'
7403 7405 -7404 0
c Encoding variable: aux1814 with domain: int(0..2) (representing constraint ((x_00009_00006=4) + (x_00009_00005=4)))
c Both direct and order encoding.
c Var 'aux1814' order represents '0' with '7406'
c Var 'aux1814' direct represents '0' with '7406'
c Var 'aux1814' order represents '1' with '7407'
-7406 7407 0
c Var 'aux1814' direct represents '1' with '7408'
7406 -7407 7408 0
-7408 7407 0
-7408 -7406 0
c Var 'aux1814' direct represents '2' with '-7407'
7406 7408 -7407 0
c Encoding variable: aux1815 with domain: int(0..3) (representing constraint ((x_00008_00006=4) + aux1814))
c Both direct and order encoding.
c Var 'aux1815' order represents '0' with '7409'
c Var 'aux1815' direct represents '0' with '7409'
c Var 'aux1815' order represents '1' with '7410'
-7409 7410 0
c Var 'aux1815' direct represents '1' with '7411'
7409 -7410 7411 0
-7411 7410 0
-7411 -7409 0
c Var 'aux1815' order represents '2' with '7412'
-7410 7412 0
c Var 'aux1815' direct represents '2' with '7413'
7410 -7412 7413 0
-7413 7412 0
-7413 -7410 0
c Var 'aux1815' direct represents '3' with '-7412'
7409 7411 7413 -7412 0
c Encoding variable: aux1816 with domain: int(0..4) (representing constraint (aux1811 + aux1813))
c Both direct and order encoding.
c Var 'aux1816' order represents '0' with '7414'
c Var 'aux1816' direct represents '0' with '7414'
c Var 'aux1816' order represents '1' with '7415'
-7414 7415 0
c Var 'aux1816' direct represents '1' with '7416'
7414 -7415 7416 0
-7416 7415 0
-7416 -7414 0
c Var 'aux1816' order represents '2' with '7417'
-7415 7417 0
c Var 'aux1816' direct represents '2' with '7418'
7415 -7417 7418 0
-7418 7417 0
-7418 -7415 0
c Var 'aux1816' order represents '3' with '7419'
-7417 7419 0
c Var 'aux1816' direct represents '3' with '7420'
7417 -7419 7420 0
-7420 7419 0
-7420 -7417 0
c Var 'aux1816' direct represents '4' with '-7419'
7414 7416 7418 7420 -7419 0
c Encoding variable: aux1817 with domain: int(0..2) (representing constraint ((x_00008_00004=5) + (x_00007_00006=5)))
c Both direct and order encoding.
c Var 'aux1817' order represents '0' with '7421'
c Var 'aux1817' direct represents '0' with '7421'
c Var 'aux1817' order represents '1' with '7422'
-7421 7422 0
c Var 'aux1817' direct represents '1' with '7423'
7421 -7422 7423 0
-7423 7422 0
-7423 -7421 0
c Var 'aux1817' direct represents '2' with '-7422'
7421 7423 -7422 0
c Encoding variable: aux1818 with domain: int(0..2) (representing constraint ((x_00007_00005=5) + (x_00008_00005=5)))
c Both direct and order encoding.
c Var 'aux1818' order represents '0' with '7424'
c Var 'aux1818' direct represents '0' with '7424'
c Var 'aux1818' order represents '1' with '7425'
-7424 7425 0
c Var 'aux1818' direct represents '1' with '7426'
7424 -7425 7426 0
-7426 7425 0
-7426 -7424 0
c Var 'aux1818' direct represents '2' with '-7425'
7424 7426 -7425 0
c Encoding variable: aux1819 with domain: int(0..2) (representing constraint ((x_00007_00004=5) + (x_00009_00004=5)))
c Both direct and order encoding.
c Var 'aux1819' order represents '0' with '7427'
c Var 'aux1819' direct represents '0' with '7427'
c Var 'aux1819' order represents '1' with '7428'
-7427 7428 0
c Var 'aux1819' direct represents '1' with '7429'
7427 -7428 7429 0
-7429 7428 0
-7429 -7427 0
c Var 'aux1819' direct represents '2' with '-7428'
7427 7429 -7428 0
c Encoding variable: aux1820 with domain: int(0..2) (representing constraint ((x_00009_00006=5) + (x_00009_00005=5)))
c Both direct and order encoding.
c Var 'aux1820' order represents '0' with '7430'
c Var 'aux1820' direct represents '0' with '7430'
c Var 'aux1820' order represents '1' with '7431'
-7430 7431 0
c Var 'aux1820' direct represents '1' with '7432'
7430 -7431 7432 0
-7432 7431 0
-7432 -7430 0
c Var 'aux1820' direct represents '2' with '-7431'
7430 7432 -7431 0
c Encoding variable: aux1821 with domain: int(0..3) (representing constraint ((x_00008_00006=5) + aux1820))
c Both direct and order encoding.
c Var 'aux1821' order represents '0' with '7433'
c Var 'aux1821' direct represents '0' with '7433'
c Var 'aux1821' order represents '1' with '7434'
-7433 7434 0
c Var 'aux1821' direct represents '1' with '7435'
7433 -7434 7435 0
-7435 7434 0
-7435 -7433 0
c Var 'aux1821' order represents '2' with '7436'
-7434 7436 0
c Var 'aux1821' direct represents '2' with '7437'
7434 -7436 7437 0
-7437 7436 0
-7437 -7434 0
c Var 'aux1821' direct represents '3' with '-7436'
7433 7435 7437 -7436 0
c Encoding variable: aux1822 with domain: int(0..4) (representing constraint (aux1817 + aux1819))
c Both direct and order encoding.
c Var 'aux1822' order represents '0' with '7438'
c Var 'aux1822' direct represents '0' with '7438'
c Var 'aux1822' order represents '1' with '7439'
-7438 7439 0
c Var 'aux1822' direct represents '1' with '7440'
7438 -7439 7440 0
-7440 7439 0
-7440 -7438 0
c Var 'aux1822' order represents '2' with '7441'
-7439 7441 0
c Var 'aux1822' direct represents '2' with '7442'
7439 -7441 7442 0
-7442 7441 0
-7442 -7439 0
c Var 'aux1822' order represents '3' with '7443'
-7441 7443 0
c Var 'aux1822' direct represents '3' with '7444'
7441 -7443 7444 0
-7444 7443 0
-7444 -7441 0
c Var 'aux1822' direct represents '4' with '-7443'
7438 7440 7442 7444 -7443 0
c Encoding variable: aux1823 with domain: int(0..2) (representing constraint ((x_00008_00004=6) + (x_00007_00006=6)))
c Both direct and order encoding.
c Var 'aux1823' order represents '0' with '7445'
c Var 'aux1823' direct represents '0' with '7445'
c Var 'aux1823' order represents '1' with '7446'
-7445 7446 0
c Var 'aux1823' direct represents '1' with '7447'
7445 -7446 7447 0
-7447 7446 0
-7447 -7445 0
c Var 'aux1823' direct represents '2' with '-7446'
7445 7447 -7446 0
c Encoding variable: aux1824 with domain: int(0..2) (representing constraint ((x_00007_00005=6) + (x_00008_00005=6)))
c Both direct and order encoding.
c Var 'aux1824' order represents '0' with '7448'
c Var 'aux1824' direct represents '0' with '7448'
c Var 'aux1824' order represents '1' with '7449'
-7448 7449 0
c Var 'aux1824' direct represents '1' with '7450'
7448 -7449 7450 0
-7450 7449 0
-7450 -7448 0
c Var 'aux1824' direct represents '2' with '-7449'
7448 7450 -7449 0
c Encoding variable: aux1825 with domain: int(0..2) (representing constraint ((x_00007_00004=6) + (x_00009_00004=6)))
c Both direct and order encoding.
c Var 'aux1825' order represents '0' with '7451'
c Var 'aux1825' direct represents '0' with '7451'
c Var 'aux1825' order represents '1' with '7452'
-7451 7452 0
c Var 'aux1825' direct represents '1' with '7453'
7451 -7452 7453 0
-7453 7452 0
-7453 -7451 0
c Var 'aux1825' direct represents '2' with '-7452'
7451 7453 -7452 0
c Encoding variable: aux1826 with domain: int(0..2) (representing constraint ((x_00009_00006=6) + (x_00009_00005=6)))
c Both direct and order encoding.
c Var 'aux1826' order represents '0' with '7454'
c Var 'aux1826' direct represents '0' with '7454'
c Var 'aux1826' order represents '1' with '7455'
-7454 7455 0
c Var 'aux1826' direct represents '1' with '7456'
7454 -7455 7456 0
-7456 7455 0
-7456 -7454 0
c Var 'aux1826' direct represents '2' with '-7455'
7454 7456 -7455 0
c Encoding variable: aux1827 with domain: int(0..3) (representing constraint ((x_00008_00006=6) + aux1826))
c Both direct and order encoding.
c Var 'aux1827' order represents '0' with '7457'
c Var 'aux1827' direct represents '0' with '7457'
c Var 'aux1827' order represents '1' with '7458'
-7457 7458 0
c Var 'aux1827' direct represents '1' with '7459'
7457 -7458 7459 0
-7459 7458 0
-7459 -7457 0
c Var 'aux1827' order represents '2' with '7460'
-7458 7460 0
c Var 'aux1827' direct represents '2' with '7461'
7458 -7460 7461 0
-7461 7460 0
-7461 -7458 0
c Var 'aux1827' direct represents '3' with '-7460'
7457 7459 7461 -7460 0
c Encoding variable: aux1828 with domain: int(0..4) (representing constraint (aux1823 + aux1825))
c Both direct and order encoding.
c Var 'aux1828' order represents '0' with '7462'
c Var 'aux1828' direct represents '0' with '7462'
c Var 'aux1828' order represents '1' with '7463'
-7462 7463 0
c Var 'aux1828' direct represents '1' with '7464'
7462 -7463 7464 0
-7464 7463 0
-7464 -7462 0
c Var 'aux1828' order represents '2' with '7465'
-7463 7465 0
c Var 'aux1828' direct represents '2' with '7466'
7463 -7465 7466 0
-7466 7465 0
-7466 -7463 0
c Var 'aux1828' order represents '3' with '7467'
-7465 7467 0
c Var 'aux1828' direct represents '3' with '7468'
7465 -7467 7468 0
-7468 7467 0
-7468 -7465 0
c Var 'aux1828' direct represents '4' with '-7467'
7462 7464 7466 7468 -7467 0
c Encoding variable: aux1829 with domain: int(0..2) (representing constraint ((x_00008_00004=7) + (x_00007_00006=7)))
c Both direct and order encoding.
c Var 'aux1829' order represents '0' with '7469'
c Var 'aux1829' direct represents '0' with '7469'
c Var 'aux1829' order represents '1' with '7470'
-7469 7470 0
c Var 'aux1829' direct represents '1' with '7471'
7469 -7470 7471 0
-7471 7470 0
-7471 -7469 0
c Var 'aux1829' direct represents '2' with '-7470'
7469 7471 -7470 0
c Encoding variable: aux1830 with domain: int(0..2) (representing constraint ((x_00007_00005=7) + (x_00008_00005=7)))
c Both direct and order encoding.
c Var 'aux1830' order represents '0' with '7472'
c Var 'aux1830' direct represents '0' with '7472'
c Var 'aux1830' order represents '1' with '7473'
-7472 7473 0
c Var 'aux1830' direct represents '1' with '7474'
7472 -7473 7474 0
-7474 7473 0
-7474 -7472 0
c Var 'aux1830' direct represents '2' with '-7473'
7472 7474 -7473 0
c Encoding variable: aux1831 with domain: int(0..2) (representing constraint ((x_00007_00004=7) + (x_00009_00004=7)))
c Both direct and order encoding.
c Var 'aux1831' order represents '0' with '7475'
c Var 'aux1831' direct represents '0' with '7475'
c Var 'aux1831' order represents '1' with '7476'
-7475 7476 0
c Var 'aux1831' direct represents '1' with '7477'
7475 -7476 7477 0
-7477 7476 0
-7477 -7475 0
c Var 'aux1831' direct represents '2' with '-7476'
7475 7477 -7476 0
c Encoding variable: aux1832 with domain: int(0..2) (representing constraint ((x_00009_00006=7) + (x_00009_00005=7)))
c Both direct and order encoding.
c Var 'aux1832' order represents '0' with '7478'
c Var 'aux1832' direct represents '0' with '7478'
c Var 'aux1832' order represents '1' with '7479'
-7478 7479 0
c Var 'aux1832' direct represents '1' with '7480'
7478 -7479 7480 0
-7480 7479 0
-7480 -7478 0
c Var 'aux1832' direct represents '2' with '-7479'
7478 7480 -7479 0
c Encoding variable: aux1833 with domain: int(0..3) (representing constraint ((x_00008_00006=7) + aux1832))
c Both direct and order encoding.
c Var 'aux1833' order represents '0' with '7481'
c Var 'aux1833' direct represents '0' with '7481'
c Var 'aux1833' order represents '1' with '7482'
-7481 7482 0
c Var 'aux1833' direct represents '1' with '7483'
7481 -7482 7483 0
-7483 7482 0
-7483 -7481 0
c Var 'aux1833' order represents '2' with '7484'
-7482 7484 0
c Var 'aux1833' direct represents '2' with '7485'
7482 -7484 7485 0
-7485 7484 0
-7485 -7482 0
c Var 'aux1833' direct represents '3' with '-7484'
7481 7483 7485 -7484 0
c Encoding variable: aux1834 with domain: int(0..4) (representing constraint (aux1829 + aux1831))
c Both direct and order encoding.
c Var 'aux1834' order represents '0' with '7486'
c Var 'aux1834' direct represents '0' with '7486'
c Var 'aux1834' order represents '1' with '7487'
-7486 7487 0
c Var 'aux1834' direct represents '1' with '7488'
7486 -7487 7488 0
-7488 7487 0
-7488 -7486 0
c Var 'aux1834' order represents '2' with '7489'
-7487 7489 0
c Var 'aux1834' direct represents '2' with '7490'
7487 -7489 7490 0
-7490 7489 0
-7490 -7487 0
c Var 'aux1834' order represents '3' with '7491'
-7489 7491 0
c Var 'aux1834' direct represents '3' with '7492'
7489 -7491 7492 0
-7492 7491 0
-7492 -7489 0
c Var 'aux1834' direct represents '4' with '-7491'
7486 7488 7490 7492 -7491 0
c Encoding variable: aux1835 with domain: int(0..2) (representing constraint ((x_00008_00004=8) + (x_00007_00006=8)))
c Both direct and order encoding.
c Var 'aux1835' order represents '0' with '7493'
c Var 'aux1835' direct represents '0' with '7493'
c Var 'aux1835' order represents '1' with '7494'
-7493 7494 0
c Var 'aux1835' direct represents '1' with '7495'
7493 -7494 7495 0
-7495 7494 0
-7495 -7493 0
c Var 'aux1835' direct represents '2' with '-7494'
7493 7495 -7494 0
c Encoding variable: aux1836 with domain: int(0..2) (representing constraint ((x_00007_00005=8) + (x_00008_00005=8)))
c Both direct and order encoding.
c Var 'aux1836' order represents '0' with '7496'
c Var 'aux1836' direct represents '0' with '7496'
c Var 'aux1836' order represents '1' with '7497'
-7496 7497 0
c Var 'aux1836' direct represents '1' with '7498'
7496 -7497 7498 0
-7498 7497 0
-7498 -7496 0
c Var 'aux1836' direct represents '2' with '-7497'
7496 7498 -7497 0
c Encoding variable: aux1837 with domain: int(0..2) (representing constraint ((x_00007_00004=8) + (x_00009_00004=8)))
c Both direct and order encoding.
c Var 'aux1837' order represents '0' with '7499'
c Var 'aux1837' direct represents '0' with '7499'
c Var 'aux1837' order represents '1' with '7500'
-7499 7500 0
c Var 'aux1837' direct represents '1' with '7501'
7499 -7500 7501 0
-7501 7500 0
-7501 -7499 0
c Var 'aux1837' direct represents '2' with '-7500'
7499 7501 -7500 0
c Encoding variable: aux1838 with domain: int(0..2) (representing constraint ((x_00009_00006=8) + (x_00009_00005=8)))
c Both direct and order encoding.
c Var 'aux1838' order represents '0' with '7502'
c Var 'aux1838' direct represents '0' with '7502'
c Var 'aux1838' order represents '1' with '7503'
-7502 7503 0
c Var 'aux1838' direct represents '1' with '7504'
7502 -7503 7504 0
-7504 7503 0
-7504 -7502 0
c Var 'aux1838' direct represents '2' with '-7503'
7502 7504 -7503 0
c Encoding variable: aux1839 with domain: int(0..3) (representing constraint ((x_00008_00006=8) + aux1838))
c Both direct and order encoding.
c Var 'aux1839' order represents '0' with '7505'
c Var 'aux1839' direct represents '0' with '7505'
c Var 'aux1839' order represents '1' with '7506'
-7505 7506 0
c Var 'aux1839' direct represents '1' with '7507'
7505 -7506 7507 0
-7507 7506 0
-7507 -7505 0
c Var 'aux1839' order represents '2' with '7508'
-7506 7508 0
c Var 'aux1839' direct represents '2' with '7509'
7506 -7508 7509 0
-7509 7508 0
-7509 -7506 0
c Var 'aux1839' direct represents '3' with '-7508'
7505 7507 7509 -7508 0
c Encoding variable: aux1840 with domain: int(0..4) (representing constraint (aux1835 + aux1837))
c Both direct and order encoding.
c Var 'aux1840' order represents '0' with '7510'
c Var 'aux1840' direct represents '0' with '7510'
c Var 'aux1840' order represents '1' with '7511'
-7510 7511 0
c Var 'aux1840' direct represents '1' with '7512'
7510 -7511 7512 0
-7512 7511 0
-7512 -7510 0
c Var 'aux1840' order represents '2' with '7513'
-7511 7513 0
c Var 'aux1840' direct represents '2' with '7514'
7511 -7513 7514 0
-7514 7513 0
-7514 -7511 0
c Var 'aux1840' order represents '3' with '7515'
-7513 7515 0
c Var 'aux1840' direct represents '3' with '7516'
7513 -7515 7516 0
-7516 7515 0
-7516 -7513 0
c Var 'aux1840' direct represents '4' with '-7515'
7510 7512 7514 7516 -7515 0
c Encoding variable: aux1841 with domain: int(0..2) (representing constraint ((x_00008_00004=9) + (x_00007_00006=9)))
c Both direct and order encoding.
c Var 'aux1841' order represents '0' with '7517'
c Var 'aux1841' direct represents '0' with '7517'
c Var 'aux1841' order represents '1' with '7518'
-7517 7518 0
c Var 'aux1841' direct represents '1' with '7519'
7517 -7518 7519 0
-7519 7518 0
-7519 -7517 0
c Var 'aux1841' direct represents '2' with '-7518'
7517 7519 -7518 0
c Encoding variable: aux1842 with domain: int(0..2) (representing constraint ((x_00007_00005=9) + (x_00008_00005=9)))
c Both direct and order encoding.
c Var 'aux1842' order represents '0' with '7520'
c Var 'aux1842' direct represents '0' with '7520'
c Var 'aux1842' order represents '1' with '7521'
-7520 7521 0
c Var 'aux1842' direct represents '1' with '7522'
7520 -7521 7522 0
-7522 7521 0
-7522 -7520 0
c Var 'aux1842' direct represents '2' with '-7521'
7520 7522 -7521 0
c Encoding variable: aux1843 with domain: int(0..2) (representing constraint ((x_00007_00004=9) + (x_00009_00004=9)))
c Both direct and order encoding.
c Var 'aux1843' order represents '0' with '7523'
c Var 'aux1843' direct represents '0' with '7523'
c Var 'aux1843' order represents '1' with '7524'
-7523 7524 0
c Var 'aux1843' direct represents '1' with '7525'
7523 -7524 7525 0
-7525 7524 0
-7525 -7523 0
c Var 'aux1843' direct represents '2' with '-7524'
7523 7525 -7524 0
c Encoding variable: aux1844 with domain: int(0..2) (representing constraint ((x_00009_00006=9) + (x_00009_00005=9)))
c Both direct and order encoding.
c Var 'aux1844' order represents '0' with '7526'
c Var 'aux1844' direct represents '0' with '7526'
c Var 'aux1844' order represents '1' with '7527'
-7526 7527 0
c Var 'aux1844' direct represents '1' with '7528'
7526 -7527 7528 0
-7528 7527 0
-7528 -7526 0
c Var 'aux1844' direct represents '2' with '-7527'
7526 7528 -7527 0
c Encoding variable: aux1845 with domain: int(0..3) (representing constraint ((x_00008_00006=9) + aux1844))
c Both direct and order encoding.
c Var 'aux1845' order represents '0' with '7529'
c Var 'aux1845' direct represents '0' with '7529'
c Var 'aux1845' order represents '1' with '7530'
-7529 7530 0
c Var 'aux1845' direct represents '1' with '7531'
7529 -7530 7531 0
-7531 7530 0
-7531 -7529 0
c Var 'aux1845' order represents '2' with '7532'
-7530 7532 0
c Var 'aux1845' direct represents '2' with '7533'
7530 -7532 7533 0
-7533 7532 0
-7533 -7530 0
c Var 'aux1845' direct represents '3' with '-7532'
7529 7531 7533 -7532 0
c Encoding variable: aux1846 with domain: int(0..4) (representing constraint (aux1841 + aux1843))
c Both direct and order encoding.
c Var 'aux1846' order represents '0' with '7534'
c Var 'aux1846' direct represents '0' with '7534'
c Var 'aux1846' order represents '1' with '7535'
-7534 7535 0
c Var 'aux1846' direct represents '1' with '7536'
7534 -7535 7536 0
-7536 7535 0
-7536 -7534 0
c Var 'aux1846' order represents '2' with '7537'
-7535 7537 0
c Var 'aux1846' direct represents '2' with '7538'
7535 -7537 7538 0
-7538 7537 0
-7538 -7535 0
c Var 'aux1846' order represents '3' with '7539'
-7537 7539 0
c Var 'aux1846' direct represents '3' with '7540'
7537 -7539 7540 0
-7540 7539 0
-7540 -7537 0
c Var 'aux1846' direct represents '4' with '-7539'
7534 7536 7538 7540 -7539 0
c Encoding variable: aux1847 with domain: int(0..2) (representing constraint ((x_00008_00007=1) + (x_00007_00009=1)))
c Both direct and order encoding.
c Var 'aux1847' order represents '0' with '7541'
c Var 'aux1847' direct represents '0' with '7541'
c Var 'aux1847' order represents '1' with '7542'
-7541 7542 0
c Var 'aux1847' direct represents '1' with '7543'
7541 -7542 7543 0
-7543 7542 0
-7543 -7541 0
c Var 'aux1847' direct represents '2' with '-7542'
7541 7543 -7542 0
c Encoding variable: aux1848 with domain: int(0..2) (representing constraint ((x_00007_00008=1) + (x_00008_00008=1)))
c Both direct and order encoding.
c Var 'aux1848' order represents '0' with '7544'
c Var 'aux1848' direct represents '0' with '7544'
c Var 'aux1848' order represents '1' with '7545'
-7544 7545 0
c Var 'aux1848' direct represents '1' with '7546'
7544 -7545 7546 0
-7546 7545 0
-7546 -7544 0
c Var 'aux1848' direct represents '2' with '-7545'
7544 7546 -7545 0
c Encoding variable: aux1849 with domain: int(0..2) (representing constraint ((x_00007_00007=1) + (x_00009_00007=1)))
c Both direct and order encoding.
c Var 'aux1849' order represents '0' with '7547'
c Var 'aux1849' direct represents '0' with '7547'
c Var 'aux1849' order represents '1' with '7548'
-7547 7548 0
c Var 'aux1849' direct represents '1' with '7549'
7547 -7548 7549 0
-7549 7548 0
-7549 -7547 0
c Var 'aux1849' direct represents '2' with '-7548'
7547 7549 -7548 0
c Encoding variable: aux1850 with domain: int(0..2) (representing constraint ((x_00009_00009=1) + (x_00009_00008=1)))
c Both direct and order encoding.
c Var 'aux1850' order represents '0' with '7550'
c Var 'aux1850' direct represents '0' with '7550'
c Var 'aux1850' order represents '1' with '7551'
-7550 7551 0
c Var 'aux1850' direct represents '1' with '7552'
7550 -7551 7552 0
-7552 7551 0
-7552 -7550 0
c Var 'aux1850' direct represents '2' with '-7551'
7550 7552 -7551 0
c Encoding variable: aux1851 with domain: int(0..3) (representing constraint ((x_00008_00009=1) + aux1850))
c Both direct and order encoding.
c Var 'aux1851' order represents '0' with '7553'
c Var 'aux1851' direct represents '0' with '7553'
c Var 'aux1851' order represents '1' with '7554'
-7553 7554 0
c Var 'aux1851' direct represents '1' with '7555'
7553 -7554 7555 0
-7555 7554 0
-7555 -7553 0
c Var 'aux1851' order represents '2' with '7556'
-7554 7556 0
c Var 'aux1851' direct represents '2' with '7557'
7554 -7556 7557 0
-7557 7556 0
-7557 -7554 0
c Var 'aux1851' direct represents '3' with '-7556'
7553 7555 7557 -7556 0
c Encoding variable: aux1852 with domain: int(0..4) (representing constraint (aux1847 + aux1849))
c Both direct and order encoding.
c Var 'aux1852' order represents '0' with '7558'
c Var 'aux1852' direct represents '0' with '7558'
c Var 'aux1852' order represents '1' with '7559'
-7558 7559 0
c Var 'aux1852' direct represents '1' with '7560'
7558 -7559 7560 0
-7560 7559 0
-7560 -7558 0
c Var 'aux1852' order represents '2' with '7561'
-7559 7561 0
c Var 'aux1852' direct represents '2' with '7562'
7559 -7561 7562 0
-7562 7561 0
-7562 -7559 0
c Var 'aux1852' order represents '3' with '7563'
-7561 7563 0
c Var 'aux1852' direct represents '3' with '7564'
7561 -7563 7564 0
-7564 7563 0
-7564 -7561 0
c Var 'aux1852' direct represents '4' with '-7563'
7558 7560 7562 7564 -7563 0
c Encoding variable: aux1853 with domain: int(0..2) (representing constraint ((x_00008_00007=2) + (x_00007_00009=2)))
c Both direct and order encoding.
c Var 'aux1853' order represents '0' with '7565'
c Var 'aux1853' direct represents '0' with '7565'
c Var 'aux1853' order represents '1' with '7566'
-7565 7566 0
c Var 'aux1853' direct represents '1' with '7567'
7565 -7566 7567 0
-7567 7566 0
-7567 -7565 0
c Var 'aux1853' direct represents '2' with '-7566'
7565 7567 -7566 0
c Encoding variable: aux1854 with domain: int(0..2) (representing constraint ((x_00007_00008=2) + (x_00008_00008=2)))
c Both direct and order encoding.
c Var 'aux1854' order represents '0' with '7568'
c Var 'aux1854' direct represents '0' with '7568'
c Var 'aux1854' order represents '1' with '7569'
-7568 7569 0
c Var 'aux1854' direct represents '1' with '7570'
7568 -7569 7570 0
-7570 7569 0
-7570 -7568 0
c Var 'aux1854' direct represents '2' with '-7569'
7568 7570 -7569 0
c Encoding variable: aux1855 with domain: int(0..2) (representing constraint ((x_00007_00007=2) + (x_00009_00007=2)))
c Both direct and order encoding.
c Var 'aux1855' order represents '0' with '7571'
c Var 'aux1855' direct represents '0' with '7571'
c Var 'aux1855' order represents '1' with '7572'
-7571 7572 0
c Var 'aux1855' direct represents '1' with '7573'
7571 -7572 7573 0
-7573 7572 0
-7573 -7571 0
c Var 'aux1855' direct represents '2' with '-7572'
7571 7573 -7572 0
c Encoding variable: aux1856 with domain: int(0..2) (representing constraint ((x_00009_00009=2) + (x_00009_00008=2)))
c Both direct and order encoding.
c Var 'aux1856' order represents '0' with '7574'
c Var 'aux1856' direct represents '0' with '7574'
c Var 'aux1856' order represents '1' with '7575'
-7574 7575 0
c Var 'aux1856' direct represents '1' with '7576'
7574 -7575 7576 0
-7576 7575 0
-7576 -7574 0
c Var 'aux1856' direct represents '2' with '-7575'
7574 7576 -7575 0
c Encoding variable: aux1857 with domain: int(0..3) (representing constraint ((x_00008_00009=2) + aux1856))
c Both direct and order encoding.
c Var 'aux1857' order represents '0' with '7577'
c Var 'aux1857' direct represents '0' with '7577'
c Var 'aux1857' order represents '1' with '7578'
-7577 7578 0
c Var 'aux1857' direct represents '1' with '7579'
7577 -7578 7579 0
-7579 7578 0
-7579 -7577 0
c Var 'aux1857' order represents '2' with '7580'
-7578 7580 0
c Var 'aux1857' direct represents '2' with '7581'
7578 -7580 7581 0
-7581 7580 0
-7581 -7578 0
c Var 'aux1857' direct represents '3' with '-7580'
7577 7579 7581 -7580 0
c Encoding variable: aux1858 with domain: int(0..4) (representing constraint (aux1853 + aux1855))
c Both direct and order encoding.
c Var 'aux1858' order represents '0' with '7582'
c Var 'aux1858' direct represents '0' with '7582'
c Var 'aux1858' order represents '1' with '7583'
-7582 7583 0
c Var 'aux1858' direct represents '1' with '7584'
7582 -7583 7584 0
-7584 7583 0
-7584 -7582 0
c Var 'aux1858' order represents '2' with '7585'
-7583 7585 0
c Var 'aux1858' direct represents '2' with '7586'
7583 -7585 7586 0
-7586 7585 0
-7586 -7583 0
c Var 'aux1858' order represents '3' with '7587'
-7585 7587 0
c Var 'aux1858' direct represents '3' with '7588'
7585 -7587 7588 0
-7588 7587 0
-7588 -7585 0
c Var 'aux1858' direct represents '4' with '-7587'
7582 7584 7586 7588 -7587 0
c Encoding variable: aux1859 with domain: int(0..2) (representing constraint ((x_00008_00007=3) + (x_00007_00009=3)))
c Both direct and order encoding.
c Var 'aux1859' order represents '0' with '7589'
c Var 'aux1859' direct represents '0' with '7589'
c Var 'aux1859' order represents '1' with '7590'
-7589 7590 0
c Var 'aux1859' direct represents '1' with '7591'
7589 -7590 7591 0
-7591 7590 0
-7591 -7589 0
c Var 'aux1859' direct represents '2' with '-7590'
7589 7591 -7590 0
c Encoding variable: aux1860 with domain: int(0..2) (representing constraint ((x_00007_00008=3) + (x_00008_00008=3)))
c Both direct and order encoding.
c Var 'aux1860' order represents '0' with '7592'
c Var 'aux1860' direct represents '0' with '7592'
c Var 'aux1860' order represents '1' with '7593'
-7592 7593 0
c Var 'aux1860' direct represents '1' with '7594'
7592 -7593 7594 0
-7594 7593 0
-7594 -7592 0
c Var 'aux1860' direct represents '2' with '-7593'
7592 7594 -7593 0
c Encoding variable: aux1861 with domain: int(0..2) (representing constraint ((x_00007_00007=3) + (x_00009_00007=3)))
c Both direct and order encoding.
c Var 'aux1861' order represents '0' with '7595'
c Var 'aux1861' direct represents '0' with '7595'
c Var 'aux1861' order represents '1' with '7596'
-7595 7596 0
c Var 'aux1861' direct represents '1' with '7597'
7595 -7596 7597 0
-7597 7596 0
-7597 -7595 0
c Var 'aux1861' direct represents '2' with '-7596'
7595 7597 -7596 0
c Encoding variable: aux1862 with domain: int(0..2) (representing constraint ((x_00009_00009=3) + (x_00009_00008=3)))
c Both direct and order encoding.
c Var 'aux1862' order represents '0' with '7598'
c Var 'aux1862' direct represents '0' with '7598'
c Var 'aux1862' order represents '1' with '7599'
-7598 7599 0
c Var 'aux1862' direct represents '1' with '7600'
7598 -7599 7600 0
-7600 7599 0
-7600 -7598 0
c Var 'aux1862' direct represents '2' with '-7599'
7598 7600 -7599 0
c Encoding variable: aux1863 with domain: int(0..3) (representing constraint ((x_00008_00009=3) + aux1862))
c Both direct and order encoding.
c Var 'aux1863' order represents '0' with '7601'
c Var 'aux1863' direct represents '0' with '7601'
c Var 'aux1863' order represents '1' with '7602'
-7601 7602 0
c Var 'aux1863' direct represents '1' with '7603'
7601 -7602 7603 0
-7603 7602 0
-7603 -7601 0
c Var 'aux1863' order represents '2' with '7604'
-7602 7604 0
c Var 'aux1863' direct represents '2' with '7605'
7602 -7604 7605 0
-7605 7604 0
-7605 -7602 0
c Var 'aux1863' direct represents '3' with '-7604'
7601 7603 7605 -7604 0
c Encoding variable: aux1864 with domain: int(0..4) (representing constraint (aux1859 + aux1861))
c Both direct and order encoding.
c Var 'aux1864' order represents '0' with '7606'
c Var 'aux1864' direct represents '0' with '7606'
c Var 'aux1864' order represents '1' with '7607'
-7606 7607 0
c Var 'aux1864' direct represents '1' with '7608'
7606 -7607 7608 0
-7608 7607 0
-7608 -7606 0
c Var 'aux1864' order represents '2' with '7609'
-7607 7609 0
c Var 'aux1864' direct represents '2' with '7610'
7607 -7609 7610 0
-7610 7609 0
-7610 -7607 0
c Var 'aux1864' order represents '3' with '7611'
-7609 7611 0
c Var 'aux1864' direct represents '3' with '7612'
7609 -7611 7612 0
-7612 7611 0
-7612 -7609 0
c Var 'aux1864' direct represents '4' with '-7611'
7606 7608 7610 7612 -7611 0
c Encoding variable: aux1865 with domain: int(0..2) (representing constraint ((x_00008_00007=4) + (x_00007_00009=4)))
c Both direct and order encoding.
c Var 'aux1865' order represents '0' with '7613'
c Var 'aux1865' direct represents '0' with '7613'
c Var 'aux1865' order represents '1' with '7614'
-7613 7614 0
c Var 'aux1865' direct represents '1' with '7615'
7613 -7614 7615 0
-7615 7614 0
-7615 -7613 0
c Var 'aux1865' direct represents '2' with '-7614'
7613 7615 -7614 0
c Encoding variable: aux1866 with domain: int(0..2) (representing constraint ((x_00007_00008=4) + (x_00008_00008=4)))
c Both direct and order encoding.
c Var 'aux1866' order represents '0' with '7616'
c Var 'aux1866' direct represents '0' with '7616'
c Var 'aux1866' order represents '1' with '7617'
-7616 7617 0
c Var 'aux1866' direct represents '1' with '7618'
7616 -7617 7618 0
-7618 7617 0
-7618 -7616 0
c Var 'aux1866' direct represents '2' with '-7617'
7616 7618 -7617 0
c Encoding variable: aux1867 with domain: int(0..2) (representing constraint ((x_00007_00007=4) + (x_00009_00007=4)))
c Both direct and order encoding.
c Var 'aux1867' order represents '0' with '7619'
c Var 'aux1867' direct represents '0' with '7619'
c Var 'aux1867' order represents '1' with '7620'
-7619 7620 0
c Var 'aux1867' direct represents '1' with '7621'
7619 -7620 7621 0
-7621 7620 0
-7621 -7619 0
c Var 'aux1867' direct represents '2' with '-7620'
7619 7621 -7620 0
c Encoding variable: aux1868 with domain: int(0..2) (representing constraint ((x_00009_00009=4) + (x_00009_00008=4)))
c Both direct and order encoding.
c Var 'aux1868' order represents '0' with '7622'
c Var 'aux1868' direct represents '0' with '7622'
c Var 'aux1868' order represents '1' with '7623'
-7622 7623 0
c Var 'aux1868' direct represents '1' with '7624'
7622 -7623 7624 0
-7624 7623 0
-7624 -7622 0
c Var 'aux1868' direct represents '2' with '-7623'
7622 7624 -7623 0
c Encoding variable: aux1869 with domain: int(0..3) (representing constraint ((x_00008_00009=4) + aux1868))
c Both direct and order encoding.
c Var 'aux1869' order represents '0' with '7625'
c Var 'aux1869' direct represents '0' with '7625'
c Var 'aux1869' order represents '1' with '7626'
-7625 7626 0
c Var 'aux1869' direct represents '1' with '7627'
7625 -7626 7627 0
-7627 7626 0
-7627 -7625 0
c Var 'aux1869' order represents '2' with '7628'
-7626 7628 0
c Var 'aux1869' direct represents '2' with '7629'
7626 -7628 7629 0
-7629 7628 0
-7629 -7626 0
c Var 'aux1869' direct represents '3' with '-7628'
7625 7627 7629 -7628 0
c Encoding variable: aux1870 with domain: int(0..4) (representing constraint (aux1865 + aux1867))
c Both direct and order encoding.
c Var 'aux1870' order represents '0' with '7630'
c Var 'aux1870' direct represents '0' with '7630'
c Var 'aux1870' order represents '1' with '7631'
-7630 7631 0
c Var 'aux1870' direct represents '1' with '7632'
7630 -7631 7632 0
-7632 7631 0
-7632 -7630 0
c Var 'aux1870' order represents '2' with '7633'
-7631 7633 0
c Var 'aux1870' direct represents '2' with '7634'
7631 -7633 7634 0
-7634 7633 0
-7634 -7631 0
c Var 'aux1870' order represents '3' with '7635'
-7633 7635 0
c Var 'aux1870' direct represents '3' with '7636'
7633 -7635 7636 0
-7636 7635 0
-7636 -7633 0
c Var 'aux1870' direct represents '4' with '-7635'
7630 7632 7634 7636 -7635 0
c Encoding variable: aux1871 with domain: int(0..2) (representing constraint ((x_00008_00007=5) + (x_00007_00009=5)))
c Both direct and order encoding.
c Var 'aux1871' order represents '0' with '7637'
c Var 'aux1871' direct represents '0' with '7637'
c Var 'aux1871' order represents '1' with '7638'
-7637 7638 0
c Var 'aux1871' direct represents '1' with '7639'
7637 -7638 7639 0
-7639 7638 0
-7639 -7637 0
c Var 'aux1871' direct represents '2' with '-7638'
7637 7639 -7638 0
c Encoding variable: aux1872 with domain: int(0..2) (representing constraint ((x_00007_00008=5) + (x_00008_00008=5)))
c Both direct and order encoding.
c Var 'aux1872' order represents '0' with '7640'
c Var 'aux1872' direct represents '0' with '7640'
c Var 'aux1872' order represents '1' with '7641'
-7640 7641 0
c Var 'aux1872' direct represents '1' with '7642'
7640 -7641 7642 0
-7642 7641 0
-7642 -7640 0
c Var 'aux1872' direct represents '2' with '-7641'
7640 7642 -7641 0
c Encoding variable: aux1873 with domain: int(0..2) (representing constraint ((x_00007_00007=5) + (x_00009_00007=5)))
c Both direct and order encoding.
c Var 'aux1873' order represents '0' with '7643'
c Var 'aux1873' direct represents '0' with '7643'
c Var 'aux1873' order represents '1' with '7644'
-7643 7644 0
c Var 'aux1873' direct represents '1' with '7645'
7643 -7644 7645 0
-7645 7644 0
-7645 -7643 0
c Var 'aux1873' direct represents '2' with '-7644'
7643 7645 -7644 0
c Encoding variable: aux1874 with domain: int(0..2) (representing constraint ((x_00009_00009=5) + (x_00009_00008=5)))
c Both direct and order encoding.
c Var 'aux1874' order represents '0' with '7646'
c Var 'aux1874' direct represents '0' with '7646'
c Var 'aux1874' order represents '1' with '7647'
-7646 7647 0
c Var 'aux1874' direct represents '1' with '7648'
7646 -7647 7648 0
-7648 7647 0
-7648 -7646 0
c Var 'aux1874' direct represents '2' with '-7647'
7646 7648 -7647 0
c Encoding variable: aux1875 with domain: int(0..3) (representing constraint ((x_00008_00009=5) + aux1874))
c Both direct and order encoding.
c Var 'aux1875' order represents '0' with '7649'
c Var 'aux1875' direct represents '0' with '7649'
c Var 'aux1875' order represents '1' with '7650'
-7649 7650 0
c Var 'aux1875' direct represents '1' with '7651'
7649 -7650 7651 0
-7651 7650 0
-7651 -7649 0
c Var 'aux1875' order represents '2' with '7652'
-7650 7652 0
c Var 'aux1875' direct represents '2' with '7653'
7650 -7652 7653 0
-7653 7652 0
-7653 -7650 0
c Var 'aux1875' direct represents '3' with '-7652'
7649 7651 7653 -7652 0
c Encoding variable: aux1876 with domain: int(0..4) (representing constraint (aux1871 + aux1873))
c Both direct and order encoding.
c Var 'aux1876' order represents '0' with '7654'
c Var 'aux1876' direct represents '0' with '7654'
c Var 'aux1876' order represents '1' with '7655'
-7654 7655 0
c Var 'aux1876' direct represents '1' with '7656'
7654 -7655 7656 0
-7656 7655 0
-7656 -7654 0
c Var 'aux1876' order represents '2' with '7657'
-7655 7657 0
c Var 'aux1876' direct represents '2' with '7658'
7655 -7657 7658 0
-7658 7657 0
-7658 -7655 0
c Var 'aux1876' order represents '3' with '7659'
-7657 7659 0
c Var 'aux1876' direct represents '3' with '7660'
7657 -7659 7660 0
-7660 7659 0
-7660 -7657 0
c Var 'aux1876' direct represents '4' with '-7659'
7654 7656 7658 7660 -7659 0
c Encoding variable: aux1877 with domain: int(0..2) (representing constraint ((x_00008_00007=6) + (x_00007_00009=6)))
c Both direct and order encoding.
c Var 'aux1877' order represents '0' with '7661'
c Var 'aux1877' direct represents '0' with '7661'
c Var 'aux1877' order represents '1' with '7662'
-7661 7662 0
c Var 'aux1877' direct represents '1' with '7663'
7661 -7662 7663 0
-7663 7662 0
-7663 -7661 0
c Var 'aux1877' direct represents '2' with '-7662'
7661 7663 -7662 0
c Encoding variable: aux1878 with domain: int(0..2) (representing constraint ((x_00007_00008=6) + (x_00008_00008=6)))
c Both direct and order encoding.
c Var 'aux1878' order represents '0' with '7664'
c Var 'aux1878' direct represents '0' with '7664'
c Var 'aux1878' order represents '1' with '7665'
-7664 7665 0
c Var 'aux1878' direct represents '1' with '7666'
7664 -7665 7666 0
-7666 7665 0
-7666 -7664 0
c Var 'aux1878' direct represents '2' with '-7665'
7664 7666 -7665 0
c Encoding variable: aux1879 with domain: int(0..2) (representing constraint ((x_00007_00007=6) + (x_00009_00007=6)))
c Both direct and order encoding.
c Var 'aux1879' order represents '0' with '7667'
c Var 'aux1879' direct represents '0' with '7667'
c Var 'aux1879' order represents '1' with '7668'
-7667 7668 0
c Var 'aux1879' direct represents '1' with '7669'
7667 -7668 7669 0
-7669 7668 0
-7669 -7667 0
c Var 'aux1879' direct represents '2' with '-7668'
7667 7669 -7668 0
c Encoding variable: aux1880 with domain: int(0..2) (representing constraint ((x_00009_00009=6) + (x_00009_00008=6)))
c Both direct and order encoding.
c Var 'aux1880' order represents '0' with '7670'
c Var 'aux1880' direct represents '0' with '7670'
c Var 'aux1880' order represents '1' with '7671'
-7670 7671 0
c Var 'aux1880' direct represents '1' with '7672'
7670 -7671 7672 0
-7672 7671 0
-7672 -7670 0
c Var 'aux1880' direct represents '2' with '-7671'
7670 7672 -7671 0
c Encoding variable: aux1881 with domain: int(0..3) (representing constraint ((x_00008_00009=6) + aux1880))
c Both direct and order encoding.
c Var 'aux1881' order represents '0' with '7673'
c Var 'aux1881' direct represents '0' with '7673'
c Var 'aux1881' order represents '1' with '7674'
-7673 7674 0
c Var 'aux1881' direct represents '1' with '7675'
7673 -7674 7675 0
-7675 7674 0
-7675 -7673 0
c Var 'aux1881' order represents '2' with '7676'
-7674 7676 0
c Var 'aux1881' direct represents '2' with '7677'
7674 -7676 7677 0
-7677 7676 0
-7677 -7674 0
c Var 'aux1881' direct represents '3' with '-7676'
7673 7675 7677 -7676 0
c Encoding variable: aux1882 with domain: int(0..4) (representing constraint (aux1877 + aux1879))
c Both direct and order encoding.
c Var 'aux1882' order represents '0' with '7678'
c Var 'aux1882' direct represents '0' with '7678'
c Var 'aux1882' order represents '1' with '7679'
-7678 7679 0
c Var 'aux1882' direct represents '1' with '7680'
7678 -7679 7680 0
-7680 7679 0
-7680 -7678 0
c Var 'aux1882' order represents '2' with '7681'
-7679 7681 0
c Var 'aux1882' direct represents '2' with '7682'
7679 -7681 7682 0
-7682 7681 0
-7682 -7679 0
c Var 'aux1882' order represents '3' with '7683'
-7681 7683 0
c Var 'aux1882' direct represents '3' with '7684'
7681 -7683 7684 0
-7684 7683 0
-7684 -7681 0
c Var 'aux1882' direct represents '4' with '-7683'
7678 7680 7682 7684 -7683 0
c Encoding variable: aux1883 with domain: int(0..2) (representing constraint ((x_00008_00007=7) + (x_00007_00009=7)))
c Both direct and order encoding.
c Var 'aux1883' order represents '0' with '7685'
c Var 'aux1883' direct represents '0' with '7685'
c Var 'aux1883' order represents '1' with '7686'
-7685 7686 0
c Var 'aux1883' direct represents '1' with '7687'
7685 -7686 7687 0
-7687 7686 0
-7687 -7685 0
c Var 'aux1883' direct represents '2' with '-7686'
7685 7687 -7686 0
c Encoding variable: aux1884 with domain: int(0..2) (representing constraint ((x_00007_00008=7) + (x_00008_00008=7)))
c Both direct and order encoding.
c Var 'aux1884' order represents '0' with '7688'
c Var 'aux1884' direct represents '0' with '7688'
c Var 'aux1884' order represents '1' with '7689'
-7688 7689 0
c Var 'aux1884' direct represents '1' with '7690'
7688 -7689 7690 0
-7690 7689 0
-7690 -7688 0
c Var 'aux1884' direct represents '2' with '-7689'
7688 7690 -7689 0
c Encoding variable: aux1885 with domain: int(0..2) (representing constraint ((x_00007_00007=7) + (x_00009_00007=7)))
c Both direct and order encoding.
c Var 'aux1885' order represents '0' with '7691'
c Var 'aux1885' direct represents '0' with '7691'
c Var 'aux1885' order represents '1' with '7692'
-7691 7692 0
c Var 'aux1885' direct represents '1' with '7693'
7691 -7692 7693 0
-7693 7692 0
-7693 -7691 0
c Var 'aux1885' direct represents '2' with '-7692'
7691 7693 -7692 0
c Encoding variable: aux1886 with domain: int(0..2) (representing constraint ((x_00009_00009=7) + (x_00009_00008=7)))
c Both direct and order encoding.
c Var 'aux1886' order represents '0' with '7694'
c Var 'aux1886' direct represents '0' with '7694'
c Var 'aux1886' order represents '1' with '7695'
-7694 7695 0
c Var 'aux1886' direct represents '1' with '7696'
7694 -7695 7696 0
-7696 7695 0
-7696 -7694 0
c Var 'aux1886' direct represents '2' with '-7695'
7694 7696 -7695 0
c Encoding variable: aux1887 with domain: int(0..3) (representing constraint ((x_00008_00009=7) + aux1886))
c Both direct and order encoding.
c Var 'aux1887' order represents '0' with '7697'
c Var 'aux1887' direct represents '0' with '7697'
c Var 'aux1887' order represents '1' with '7698'
-7697 7698 0
c Var 'aux1887' direct represents '1' with '7699'
7697 -7698 7699 0
-7699 7698 0
-7699 -7697 0
c Var 'aux1887' order represents '2' with '7700'
-7698 7700 0
c Var 'aux1887' direct represents '2' with '7701'
7698 -7700 7701 0
-7701 7700 0
-7701 -7698 0
c Var 'aux1887' direct represents '3' with '-7700'
7697 7699 7701 -7700 0
c Encoding variable: aux1888 with domain: int(0..4) (representing constraint (aux1883 + aux1885))
c Both direct and order encoding.
c Var 'aux1888' order represents '0' with '7702'
c Var 'aux1888' direct represents '0' with '7702'
c Var 'aux1888' order represents '1' with '7703'
-7702 7703 0
c Var 'aux1888' direct represents '1' with '7704'
7702 -7703 7704 0
-7704 7703 0
-7704 -7702 0
c Var 'aux1888' order represents '2' with '7705'
-7703 7705 0
c Var 'aux1888' direct represents '2' with '7706'
7703 -7705 7706 0
-7706 7705 0
-7706 -7703 0
c Var 'aux1888' order represents '3' with '7707'
-7705 7707 0
c Var 'aux1888' direct represents '3' with '7708'
7705 -7707 7708 0
-7708 7707 0
-7708 -7705 0
c Var 'aux1888' direct represents '4' with '-7707'
7702 7704 7706 7708 -7707 0
c Encoding variable: aux1889 with domain: int(0..2) (representing constraint ((x_00008_00007=8) + (x_00007_00009=8)))
c Both direct and order encoding.
c Var 'aux1889' order represents '0' with '7709'
c Var 'aux1889' direct represents '0' with '7709'
c Var 'aux1889' order represents '1' with '7710'
-7709 7710 0
c Var 'aux1889' direct represents '1' with '7711'
7709 -7710 7711 0
-7711 7710 0
-7711 -7709 0
c Var 'aux1889' direct represents '2' with '-7710'
7709 7711 -7710 0
c Encoding variable: aux1890 with domain: int(0..2) (representing constraint ((x_00007_00008=8) + (x_00008_00008=8)))
c Both direct and order encoding.
c Var 'aux1890' order represents '0' with '7712'
c Var 'aux1890' direct represents '0' with '7712'
c Var 'aux1890' order represents '1' with '7713'
-7712 7713 0
c Var 'aux1890' direct represents '1' with '7714'
7712 -7713 7714 0
-7714 7713 0
-7714 -7712 0
c Var 'aux1890' direct represents '2' with '-7713'
7712 7714 -7713 0
c Encoding variable: aux1891 with domain: int(0..2) (representing constraint ((x_00007_00007=8) + (x_00009_00007=8)))
c Both direct and order encoding.
c Var 'aux1891' order represents '0' with '7715'
c Var 'aux1891' direct represents '0' with '7715'
c Var 'aux1891' order represents '1' with '7716'
-7715 7716 0
c Var 'aux1891' direct represents '1' with '7717'
7715 -7716 7717 0
-7717 7716 0
-7717 -7715 0
c Var 'aux1891' direct represents '2' with '-7716'
7715 7717 -7716 0
c Encoding variable: aux1892 with domain: int(0..2) (representing constraint ((x_00009_00009=8) + (x_00009_00008=8)))
c Both direct and order encoding.
c Var 'aux1892' order represents '0' with '7718'
c Var 'aux1892' direct represents '0' with '7718'
c Var 'aux1892' order represents '1' with '7719'
-7718 7719 0
c Var 'aux1892' direct represents '1' with '7720'
7718 -7719 7720 0
-7720 7719 0
-7720 -7718 0
c Var 'aux1892' direct represents '2' with '-7719'
7718 7720 -7719 0
c Encoding variable: aux1893 with domain: int(0..3) (representing constraint ((x_00008_00009=8) + aux1892))
c Both direct and order encoding.
c Var 'aux1893' order represents '0' with '7721'
c Var 'aux1893' direct represents '0' with '7721'
c Var 'aux1893' order represents '1' with '7722'
-7721 7722 0
c Var 'aux1893' direct represents '1' with '7723'
7721 -7722 7723 0
-7723 7722 0
-7723 -7721 0
c Var 'aux1893' order represents '2' with '7724'
-7722 7724 0
c Var 'aux1893' direct represents '2' with '7725'
7722 -7724 7725 0
-7725 7724 0
-7725 -7722 0
c Var 'aux1893' direct represents '3' with '-7724'
7721 7723 7725 -7724 0
c Encoding variable: aux1894 with domain: int(0..4) (representing constraint (aux1889 + aux1891))
c Both direct and order encoding.
c Var 'aux1894' order represents '0' with '7726'
c Var 'aux1894' direct represents '0' with '7726'
c Var 'aux1894' order represents '1' with '7727'
-7726 7727 0
c Var 'aux1894' direct represents '1' with '7728'
7726 -7727 7728 0
-7728 7727 0
-7728 -7726 0
c Var 'aux1894' order represents '2' with '7729'
-7727 7729 0
c Var 'aux1894' direct represents '2' with '7730'
7727 -7729 7730 0
-7730 7729 0
-7730 -7727 0
c Var 'aux1894' order represents '3' with '7731'
-7729 7731 0
c Var 'aux1894' direct represents '3' with '7732'
7729 -7731 7732 0
-7732 7731 0
-7732 -7729 0
c Var 'aux1894' direct represents '4' with '-7731'
7726 7728 7730 7732 -7731 0
c Encoding variable: aux1895 with domain: int(0..2) (representing constraint ((x_00008_00007=9) + (x_00007_00009=9)))
c Both direct and order encoding.
c Var 'aux1895' order represents '0' with '7733'
c Var 'aux1895' direct represents '0' with '7733'
c Var 'aux1895' order represents '1' with '7734'
-7733 7734 0
c Var 'aux1895' direct represents '1' with '7735'
7733 -7734 7735 0
-7735 7734 0
-7735 -7733 0
c Var 'aux1895' direct represents '2' with '-7734'
7733 7735 -7734 0
c Encoding variable: aux1896 with domain: int(0..2) (representing constraint ((x_00007_00008=9) + (x_00008_00008=9)))
c Both direct and order encoding.
c Var 'aux1896' order represents '0' with '7736'
c Var 'aux1896' direct represents '0' with '7736'
c Var 'aux1896' order represents '1' with '7737'
-7736 7737 0
c Var 'aux1896' direct represents '1' with '7738'
7736 -7737 7738 0
-7738 7737 0
-7738 -7736 0
c Var 'aux1896' direct represents '2' with '-7737'
7736 7738 -7737 0
c Encoding variable: aux1897 with domain: int(0..2) (representing constraint ((x_00007_00007=9) + (x_00009_00007=9)))
c Both direct and order encoding.
c Var 'aux1897' order represents '0' with '7739'
c Var 'aux1897' direct represents '0' with '7739'
c Var 'aux1897' order represents '1' with '7740'
-7739 7740 0
c Var 'aux1897' direct represents '1' with '7741'
7739 -7740 7741 0
-7741 7740 0
-7741 -7739 0
c Var 'aux1897' direct represents '2' with '-7740'
7739 7741 -7740 0
c Encoding variable: aux1898 with domain: int(0..2) (representing constraint ((x_00009_00009=9) + (x_00009_00008=9)))
c Both direct and order encoding.
c Var 'aux1898' order represents '0' with '7742'
c Var 'aux1898' direct represents '0' with '7742'
c Var 'aux1898' order represents '1' with '7743'
-7742 7743 0
c Var 'aux1898' direct represents '1' with '7744'
7742 -7743 7744 0
-7744 7743 0
-7744 -7742 0
c Var 'aux1898' direct represents '2' with '-7743'
7742 7744 -7743 0
c Encoding variable: aux1899 with domain: int(0..3) (representing constraint ((x_00008_00009=9) + aux1898))
c Both direct and order encoding.
c Var 'aux1899' order represents '0' with '7745'
c Var 'aux1899' direct represents '0' with '7745'
c Var 'aux1899' order represents '1' with '7746'
-7745 7746 0
c Var 'aux1899' direct represents '1' with '7747'
7745 -7746 7747 0
-7747 7746 0
-7747 -7745 0
c Var 'aux1899' order represents '2' with '7748'
-7746 7748 0
c Var 'aux1899' direct represents '2' with '7749'
7746 -7748 7749 0
-7749 7748 0
-7749 -7746 0
c Var 'aux1899' direct represents '3' with '-7748'
7745 7747 7749 -7748 0
c Encoding variable: aux1900 with domain: int(0..4) (representing constraint (aux1895 + aux1897))
c Both direct and order encoding.
c Var 'aux1900' order represents '0' with '7750'
c Var 'aux1900' direct represents '0' with '7750'
c Var 'aux1900' order represents '1' with '7751'
-7750 7751 0
c Var 'aux1900' direct represents '1' with '7752'
7750 -7751 7752 0
-7752 7751 0
-7752 -7750 0
c Var 'aux1900' order represents '2' with '7753'
-7751 7753 0
c Var 'aux1900' direct represents '2' with '7754'
7751 -7753 7754 0
-7754 7753 0
-7754 -7751 0
c Var 'aux1900' order represents '3' with '7755'
-7753 7755 0
c Var 'aux1900' direct represents '3' with '7756'
7753 -7755 7756 0
-7756 7755 0
-7756 -7753 0
c Var 'aux1900' direct represents '4' with '-7755'
7750 7752 7754 7756 -7755 0
c Encoding variable: aux1901 with domain: int(0..2) (representing constraint ((x_00003_00005=1) + (x_00002_00006=1)))
c Both direct and order encoding.
c Var 'aux1901' order represents '0' with '7757'
c Var 'aux1901' direct represents '0' with '7757'
c Var 'aux1901' order represents '1' with '7758'
-7757 7758 0
c Var 'aux1901' direct represents '1' with '7759'
7757 -7758 7759 0
-7759 7758 0
-7759 -7757 0
c Var 'aux1901' direct represents '2' with '-7758'
7757 7759 -7758 0
c Encoding variable: aux1902 with domain: int(0..2) (representing constraint ((x_00003_00005=2) + (x_00002_00006=2)))
c Both direct and order encoding.
c Var 'aux1902' order represents '0' with '7760'
c Var 'aux1902' direct represents '0' with '7760'
c Var 'aux1902' order represents '1' with '7761'
-7760 7761 0
c Var 'aux1902' direct represents '1' with '7762'
7760 -7761 7762 0
-7762 7761 0
-7762 -7760 0
c Var 'aux1902' direct represents '2' with '-7761'
7760 7762 -7761 0
c Encoding variable: aux1903 with domain: int(0..2) (representing constraint ((x_00003_00005=3) + (x_00002_00006=3)))
c Both direct and order encoding.
c Var 'aux1903' order represents '0' with '7763'
c Var 'aux1903' direct represents '0' with '7763'
c Var 'aux1903' order represents '1' with '7764'
-7763 7764 0
c Var 'aux1903' direct represents '1' with '7765'
7763 -7764 7765 0
-7765 7764 0
-7765 -7763 0
c Var 'aux1903' direct represents '2' with '-7764'
7763 7765 -7764 0
c Encoding variable: aux1904 with domain: int(0..2) (representing constraint ((x_00003_00005=4) + (x_00002_00006=4)))
c Both direct and order encoding.
c Var 'aux1904' order represents '0' with '7766'
c Var 'aux1904' direct represents '0' with '7766'
c Var 'aux1904' order represents '1' with '7767'
-7766 7767 0
c Var 'aux1904' direct represents '1' with '7768'
7766 -7767 7768 0
-7768 7767 0
-7768 -7766 0
c Var 'aux1904' direct represents '2' with '-7767'
7766 7768 -7767 0
c Encoding variable: aux1905 with domain: int(0..2) (representing constraint ((x_00003_00005=5) + (x_00002_00006=5)))
c Both direct and order encoding.
c Var 'aux1905' order represents '0' with '7769'
c Var 'aux1905' direct represents '0' with '7769'
c Var 'aux1905' order represents '1' with '7770'
-7769 7770 0
c Var 'aux1905' direct represents '1' with '7771'
7769 -7770 7771 0
-7771 7770 0
-7771 -7769 0
c Var 'aux1905' direct represents '2' with '-7770'
7769 7771 -7770 0
c Encoding variable: aux1906 with domain: int(0..2) (representing constraint ((x_00003_00005=6) + (x_00002_00006=6)))
c Both direct and order encoding.
c Var 'aux1906' order represents '0' with '7772'
c Var 'aux1906' direct represents '0' with '7772'
c Var 'aux1906' order represents '1' with '7773'
-7772 7773 0
c Var 'aux1906' direct represents '1' with '7774'
7772 -7773 7774 0
-7774 7773 0
-7774 -7772 0
c Var 'aux1906' direct represents '2' with '-7773'
7772 7774 -7773 0
c Encoding variable: aux1907 with domain: int(0..2) (representing constraint ((x_00003_00005=7) + (x_00002_00006=7)))
c Both direct and order encoding.
c Var 'aux1907' order represents '0' with '7775'
c Var 'aux1907' direct represents '0' with '7775'
c Var 'aux1907' order represents '1' with '7776'
-7775 7776 0
c Var 'aux1907' direct represents '1' with '7777'
7775 -7776 7777 0
-7777 7776 0
-7777 -7775 0
c Var 'aux1907' direct represents '2' with '-7776'
7775 7777 -7776 0
c Encoding variable: aux1908 with domain: int(0..2) (representing constraint ((x_00003_00005=8) + (x_00002_00006=8)))
c Both direct and order encoding.
c Var 'aux1908' order represents '0' with '7778'
c Var 'aux1908' direct represents '0' with '7778'
c Var 'aux1908' order represents '1' with '7779'
-7778 7779 0
c Var 'aux1908' direct represents '1' with '7780'
7778 -7779 7780 0
-7780 7779 0
-7780 -7778 0
c Var 'aux1908' direct represents '2' with '-7779'
7778 7780 -7779 0
c Encoding variable: aux1909 with domain: int(0..2) (representing constraint ((x_00003_00005=9) + (x_00002_00006=9)))
c Both direct and order encoding.
c Var 'aux1909' order represents '0' with '7781'
c Var 'aux1909' direct represents '0' with '7781'
c Var 'aux1909' order represents '1' with '7782'
-7781 7782 0
c Var 'aux1909' direct represents '1' with '7783'
7781 -7782 7783 0
-7783 7782 0
-7783 -7781 0
c Var 'aux1909' direct represents '2' with '-7782'
7781 7783 -7782 0
c Encoding variable: aux1910 with domain: int(0..2) (representing constraint ((x_00003_00009=1) + (x_00002_00009=1)))
c Both direct and order encoding.
c Var 'aux1910' order represents '0' with '7784'
c Var 'aux1910' direct represents '0' with '7784'
c Var 'aux1910' order represents '1' with '7785'
-7784 7785 0
c Var 'aux1910' direct represents '1' with '7786'
7784 -7785 7786 0
-7786 7785 0
-7786 -7784 0
c Var 'aux1910' direct represents '2' with '-7785'
7784 7786 -7785 0
c Encoding variable: aux1911 with domain: int(0..2) (representing constraint ((x_00003_00009=2) + (x_00002_00009=2)))
c Both direct and order encoding.
c Var 'aux1911' order represents '0' with '7787'
c Var 'aux1911' direct represents '0' with '7787'
c Var 'aux1911' order represents '1' with '7788'
-7787 7788 0
c Var 'aux1911' direct represents '1' with '7789'
7787 -7788 7789 0
-7789 7788 0
-7789 -7787 0
c Var 'aux1911' direct represents '2' with '-7788'
7787 7789 -7788 0
c Encoding variable: aux1912 with domain: int(0..2) (representing constraint ((x_00003_00009=3) + (x_00002_00009=3)))
c Both direct and order encoding.
c Var 'aux1912' order represents '0' with '7790'
c Var 'aux1912' direct represents '0' with '7790'
c Var 'aux1912' order represents '1' with '7791'
-7790 7791 0
c Var 'aux1912' direct represents '1' with '7792'
7790 -7791 7792 0
-7792 7791 0
-7792 -7790 0
c Var 'aux1912' direct represents '2' with '-7791'
7790 7792 -7791 0
c Encoding variable: aux1913 with domain: int(0..2) (representing constraint ((x_00003_00009=4) + (x_00002_00009=4)))
c Both direct and order encoding.
c Var 'aux1913' order represents '0' with '7793'
c Var 'aux1913' direct represents '0' with '7793'
c Var 'aux1913' order represents '1' with '7794'
-7793 7794 0
c Var 'aux1913' direct represents '1' with '7795'
7793 -7794 7795 0
-7795 7794 0
-7795 -7793 0
c Var 'aux1913' direct represents '2' with '-7794'
7793 7795 -7794 0
c Encoding variable: aux1914 with domain: int(0..2) (representing constraint ((x_00003_00009=5) + (x_00002_00009=5)))
c Both direct and order encoding.
c Var 'aux1914' order represents '0' with '7796'
c Var 'aux1914' direct represents '0' with '7796'
c Var 'aux1914' order represents '1' with '7797'
-7796 7797 0
c Var 'aux1914' direct represents '1' with '7798'
7796 -7797 7798 0
-7798 7797 0
-7798 -7796 0
c Var 'aux1914' direct represents '2' with '-7797'
7796 7798 -7797 0
c Encoding variable: aux1915 with domain: int(0..2) (representing constraint ((x_00003_00009=6) + (x_00002_00009=6)))
c Both direct and order encoding.
c Var 'aux1915' order represents '0' with '7799'
c Var 'aux1915' direct represents '0' with '7799'
c Var 'aux1915' order represents '1' with '7800'
-7799 7800 0
c Var 'aux1915' direct represents '1' with '7801'
7799 -7800 7801 0
-7801 7800 0
-7801 -7799 0
c Var 'aux1915' direct represents '2' with '-7800'
7799 7801 -7800 0
c Encoding variable: aux1916 with domain: int(0..2) (representing constraint ((x_00003_00009=7) + (x_00002_00009=7)))
c Both direct and order encoding.
c Var 'aux1916' order represents '0' with '7802'
c Var 'aux1916' direct represents '0' with '7802'
c Var 'aux1916' order represents '1' with '7803'
-7802 7803 0
c Var 'aux1916' direct represents '1' with '7804'
7802 -7803 7804 0
-7804 7803 0
-7804 -7802 0
c Var 'aux1916' direct represents '2' with '-7803'
7802 7804 -7803 0
c Encoding variable: aux1917 with domain: int(0..2) (representing constraint ((x_00003_00009=8) + (x_00002_00009=8)))
c Both direct and order encoding.
c Var 'aux1917' order represents '0' with '7805'
c Var 'aux1917' direct represents '0' with '7805'
c Var 'aux1917' order represents '1' with '7806'
-7805 7806 0
c Var 'aux1917' direct represents '1' with '7807'
7805 -7806 7807 0
-7807 7806 0
-7807 -7805 0
c Var 'aux1917' direct represents '2' with '-7806'
7805 7807 -7806 0
c Encoding variable: aux1918 with domain: int(0..2) (representing constraint ((x_00003_00009=9) + (x_00002_00009=9)))
c Both direct and order encoding.
c Var 'aux1918' order represents '0' with '7808'
c Var 'aux1918' direct represents '0' with '7808'
c Var 'aux1918' order represents '1' with '7809'
-7808 7809 0
c Var 'aux1918' direct represents '1' with '7810'
7808 -7809 7810 0
-7810 7809 0
-7810 -7808 0
c Var 'aux1918' direct represents '2' with '-7809'
7808 7810 -7809 0
c Encoding variable: aux1919 with domain: int(0..2) (representing constraint ((x_00003_00001=1) + (x_00002_00002=1)))
c Both direct and order encoding.
c Var 'aux1919' order represents '0' with '7811'
c Var 'aux1919' direct represents '0' with '7811'
c Var 'aux1919' order represents '1' with '7812'
-7811 7812 0
c Var 'aux1919' direct represents '1' with '7813'
7811 -7812 7813 0
-7813 7812 0
-7813 -7811 0
c Var 'aux1919' direct represents '2' with '-7812'
7811 7813 -7812 0
c Encoding variable: aux1920 with domain: int(0..2) (representing constraint ((x_00003_00001=2) + (x_00002_00002=2)))
c Both direct and order encoding.
c Var 'aux1920' order represents '0' with '7814'
c Var 'aux1920' direct represents '0' with '7814'
c Var 'aux1920' order represents '1' with '7815'
-7814 7815 0
c Var 'aux1920' direct represents '1' with '7816'
7814 -7815 7816 0
-7816 7815 0
-7816 -7814 0
c Var 'aux1920' direct represents '2' with '-7815'
7814 7816 -7815 0
c Encoding variable: aux1921 with domain: int(0..2) (representing constraint ((x_00003_00001=3) + (x_00002_00002=3)))
c Both direct and order encoding.
c Var 'aux1921' order represents '0' with '7817'
c Var 'aux1921' direct represents '0' with '7817'
c Var 'aux1921' order represents '1' with '7818'
-7817 7818 0
c Var 'aux1921' direct represents '1' with '7819'
7817 -7818 7819 0
-7819 7818 0
-7819 -7817 0
c Var 'aux1921' direct represents '2' with '-7818'
7817 7819 -7818 0
c Encoding variable: aux1922 with domain: int(0..2) (representing constraint ((x_00003_00001=4) + (x_00002_00002=4)))
c Both direct and order encoding.
c Var 'aux1922' order represents '0' with '7820'
c Var 'aux1922' direct represents '0' with '7820'
c Var 'aux1922' order represents '1' with '7821'
-7820 7821 0
c Var 'aux1922' direct represents '1' with '7822'
7820 -7821 7822 0
-7822 7821 0
-7822 -7820 0
c Var 'aux1922' direct represents '2' with '-7821'
7820 7822 -7821 0
c Encoding variable: aux1923 with domain: int(0..2) (representing constraint ((x_00003_00001=5) + (x_00002_00002=5)))
c Both direct and order encoding.
c Var 'aux1923' order represents '0' with '7823'
c Var 'aux1923' direct represents '0' with '7823'
c Var 'aux1923' order represents '1' with '7824'
-7823 7824 0
c Var 'aux1923' direct represents '1' with '7825'
7823 -7824 7825 0
-7825 7824 0
-7825 -7823 0
c Var 'aux1923' direct represents '2' with '-7824'
7823 7825 -7824 0
c Encoding variable: aux1924 with domain: int(0..2) (representing constraint ((x_00003_00001=6) + (x_00002_00002=6)))
c Both direct and order encoding.
c Var 'aux1924' order represents '0' with '7826'
c Var 'aux1924' direct represents '0' with '7826'
c Var 'aux1924' order represents '1' with '7827'
-7826 7827 0
c Var 'aux1924' direct represents '1' with '7828'
7826 -7827 7828 0
-7828 7827 0
-7828 -7826 0
c Var 'aux1924' direct represents '2' with '-7827'
7826 7828 -7827 0
c Encoding variable: aux1925 with domain: int(0..2) (representing constraint ((x_00003_00001=7) + (x_00002_00002=7)))
c Both direct and order encoding.
c Var 'aux1925' order represents '0' with '7829'
c Var 'aux1925' direct represents '0' with '7829'
c Var 'aux1925' order represents '1' with '7830'
-7829 7830 0
c Var 'aux1925' direct represents '1' with '7831'
7829 -7830 7831 0
-7831 7830 0
-7831 -7829 0
c Var 'aux1925' direct represents '2' with '-7830'
7829 7831 -7830 0
c Encoding variable: aux1926 with domain: int(0..2) (representing constraint ((x_00003_00001=8) + (x_00002_00002=8)))
c Both direct and order encoding.
c Var 'aux1926' order represents '0' with '7832'
c Var 'aux1926' direct represents '0' with '7832'
c Var 'aux1926' order represents '1' with '7833'
-7832 7833 0
c Var 'aux1926' direct represents '1' with '7834'
7832 -7833 7834 0
-7834 7833 0
-7834 -7832 0
c Var 'aux1926' direct represents '2' with '-7833'
7832 7834 -7833 0
c Encoding variable: aux1927 with domain: int(0..2) (representing constraint ((x_00003_00001=9) + (x_00002_00002=9)))
c Both direct and order encoding.
c Var 'aux1927' order represents '0' with '7835'
c Var 'aux1927' direct represents '0' with '7835'
c Var 'aux1927' order represents '1' with '7836'
-7835 7836 0
c Var 'aux1927' direct represents '1' with '7837'
7835 -7836 7837 0
-7837 7836 0
-7837 -7835 0
c Var 'aux1927' direct represents '2' with '-7836'
7835 7837 -7836 0
c Encoding variable: aux1928 with domain: int(0..2) (representing constraint ((x_00008_00001=1) + (x_00007_00001=1)))
c Both direct and order encoding.
c Var 'aux1928' order represents '0' with '7838'
c Var 'aux1928' direct represents '0' with '7838'
c Var 'aux1928' order represents '1' with '7839'
-7838 7839 0
c Var 'aux1928' direct represents '1' with '7840'
7838 -7839 7840 0
-7840 7839 0
-7840 -7838 0
c Var 'aux1928' direct represents '2' with '-7839'
7838 7840 -7839 0
c Encoding variable: aux1929 with domain: int(0..2) (representing constraint ((x_00008_00001=2) + (x_00007_00001=2)))
c Both direct and order encoding.
c Var 'aux1929' order represents '0' with '7841'
c Var 'aux1929' direct represents '0' with '7841'
c Var 'aux1929' order represents '1' with '7842'
-7841 7842 0
c Var 'aux1929' direct represents '1' with '7843'
7841 -7842 7843 0
-7843 7842 0
-7843 -7841 0
c Var 'aux1929' direct represents '2' with '-7842'
7841 7843 -7842 0
c Encoding variable: aux1930 with domain: int(0..2) (representing constraint ((x_00008_00001=3) + (x_00007_00001=3)))
c Both direct and order encoding.
c Var 'aux1930' order represents '0' with '7844'
c Var 'aux1930' direct represents '0' with '7844'
c Var 'aux1930' order represents '1' with '7845'
-7844 7845 0
c Var 'aux1930' direct represents '1' with '7846'
7844 -7845 7846 0
-7846 7845 0
-7846 -7844 0
c Var 'aux1930' direct represents '2' with '-7845'
7844 7846 -7845 0
c Encoding variable: aux1931 with domain: int(0..2) (representing constraint ((x_00008_00001=4) + (x_00007_00001=4)))
c Both direct and order encoding.
c Var 'aux1931' order represents '0' with '7847'
c Var 'aux1931' direct represents '0' with '7847'
c Var 'aux1931' order represents '1' with '7848'
-7847 7848 0
c Var 'aux1931' direct represents '1' with '7849'
7847 -7848 7849 0
-7849 7848 0
-7849 -7847 0
c Var 'aux1931' direct represents '2' with '-7848'
7847 7849 -7848 0
c Encoding variable: aux1932 with domain: int(0..2) (representing constraint ((x_00008_00001=5) + (x_00007_00001=5)))
c Both direct and order encoding.
c Var 'aux1932' order represents '0' with '7850'
c Var 'aux1932' direct represents '0' with '7850'
c Var 'aux1932' order represents '1' with '7851'
-7850 7851 0
c Var 'aux1932' direct represents '1' with '7852'
7850 -7851 7852 0
-7852 7851 0
-7852 -7850 0
c Var 'aux1932' direct represents '2' with '-7851'
7850 7852 -7851 0
c Encoding variable: aux1933 with domain: int(0..2) (representing constraint ((x_00008_00001=6) + (x_00007_00001=6)))
c Both direct and order encoding.
c Var 'aux1933' order represents '0' with '7853'
c Var 'aux1933' direct represents '0' with '7853'
c Var 'aux1933' order represents '1' with '7854'
-7853 7854 0
c Var 'aux1933' direct represents '1' with '7855'
7853 -7854 7855 0
-7855 7854 0
-7855 -7853 0
c Var 'aux1933' direct represents '2' with '-7854'
7853 7855 -7854 0
c Encoding variable: aux1934 with domain: int(0..2) (representing constraint ((x_00008_00001=7) + (x_00007_00001=7)))
c Both direct and order encoding.
c Var 'aux1934' order represents '0' with '7856'
c Var 'aux1934' direct represents '0' with '7856'
c Var 'aux1934' order represents '1' with '7857'
-7856 7857 0
c Var 'aux1934' direct represents '1' with '7858'
7856 -7857 7858 0
-7858 7857 0
-7858 -7856 0
c Var 'aux1934' direct represents '2' with '-7857'
7856 7858 -7857 0
c Encoding variable: aux1935 with domain: int(0..2) (representing constraint ((x_00008_00001=8) + (x_00007_00001=8)))
c Both direct and order encoding.
c Var 'aux1935' order represents '0' with '7859'
c Var 'aux1935' direct represents '0' with '7859'
c Var 'aux1935' order represents '1' with '7860'
-7859 7860 0
c Var 'aux1935' direct represents '1' with '7861'
7859 -7860 7861 0
-7861 7860 0
-7861 -7859 0
c Var 'aux1935' direct represents '2' with '-7860'
7859 7861 -7860 0
c Encoding variable: aux1936 with domain: int(0..2) (representing constraint ((x_00008_00001=9) + (x_00007_00001=9)))
c Both direct and order encoding.
c Var 'aux1936' order represents '0' with '7862'
c Var 'aux1936' direct represents '0' with '7862'
c Var 'aux1936' order represents '1' with '7863'
-7862 7863 0
c Var 'aux1936' direct represents '1' with '7864'
7862 -7863 7864 0
-7864 7863 0
-7864 -7862 0
c Var 'aux1936' direct represents '2' with '-7863'
7862 7864 -7863 0
c Encoding variable: aux1937 with domain: int(0..2) (representing constraint ((x_00008_00004=1) + (x_00007_00005=1)))
c Both direct and order encoding.
c Var 'aux1937' order represents '0' with '7865'
c Var 'aux1937' direct represents '0' with '7865'
c Var 'aux1937' order represents '1' with '7866'
-7865 7866 0
c Var 'aux1937' direct represents '1' with '7867'
7865 -7866 7867 0
-7867 7866 0
-7867 -7865 0
c Var 'aux1937' direct represents '2' with '-7866'
7865 7867 -7866 0
c Encoding variable: aux1938 with domain: int(0..2) (representing constraint ((x_00008_00004=2) + (x_00007_00005=2)))
c Both direct and order encoding.
c Var 'aux1938' order represents '0' with '7868'
c Var 'aux1938' direct represents '0' with '7868'
c Var 'aux1938' order represents '1' with '7869'
-7868 7869 0
c Var 'aux1938' direct represents '1' with '7870'
7868 -7869 7870 0
-7870 7869 0
-7870 -7868 0
c Var 'aux1938' direct represents '2' with '-7869'
7868 7870 -7869 0
c Encoding variable: aux1939 with domain: int(0..2) (representing constraint ((x_00008_00004=3) + (x_00007_00005=3)))
c Both direct and order encoding.
c Var 'aux1939' order represents '0' with '7871'
c Var 'aux1939' direct represents '0' with '7871'
c Var 'aux1939' order represents '1' with '7872'
-7871 7872 0
c Var 'aux1939' direct represents '1' with '7873'
7871 -7872 7873 0
-7873 7872 0
-7873 -7871 0
c Var 'aux1939' direct represents '2' with '-7872'
7871 7873 -7872 0
c Encoding variable: aux1940 with domain: int(0..2) (representing constraint ((x_00008_00004=4) + (x_00007_00005=4)))
c Both direct and order encoding.
c Var 'aux1940' order represents '0' with '7874'
c Var 'aux1940' direct represents '0' with '7874'
c Var 'aux1940' order represents '1' with '7875'
-7874 7875 0
c Var 'aux1940' direct represents '1' with '7876'
7874 -7875 7876 0
-7876 7875 0
-7876 -7874 0
c Var 'aux1940' direct represents '2' with '-7875'
7874 7876 -7875 0
c Encoding variable: aux1941 with domain: int(0..2) (representing constraint ((x_00008_00004=5) + (x_00007_00005=5)))
c Both direct and order encoding.
c Var 'aux1941' order represents '0' with '7877'
c Var 'aux1941' direct represents '0' with '7877'
c Var 'aux1941' order represents '1' with '7878'
-7877 7878 0
c Var 'aux1941' direct represents '1' with '7879'
7877 -7878 7879 0
-7879 7878 0
-7879 -7877 0
c Var 'aux1941' direct represents '2' with '-7878'
7877 7879 -7878 0
c Encoding variable: aux1942 with domain: int(0..2) (representing constraint ((x_00008_00004=6) + (x_00007_00005=6)))
c Both direct and order encoding.
c Var 'aux1942' order represents '0' with '7880'
c Var 'aux1942' direct represents '0' with '7880'
c Var 'aux1942' order represents '1' with '7881'
-7880 7881 0
c Var 'aux1942' direct represents '1' with '7882'
7880 -7881 7882 0
-7882 7881 0
-7882 -7880 0
c Var 'aux1942' direct represents '2' with '-7881'
7880 7882 -7881 0
c Encoding variable: aux1943 with domain: int(0..2) (representing constraint ((x_00008_00004=7) + (x_00007_00005=7)))
c Both direct and order encoding.
c Var 'aux1943' order represents '0' with '7883'
c Var 'aux1943' direct represents '0' with '7883'
c Var 'aux1943' order represents '1' with '7884'
-7883 7884 0
c Var 'aux1943' direct represents '1' with '7885'
7883 -7884 7885 0
-7885 7884 0
-7885 -7883 0
c Var 'aux1943' direct represents '2' with '-7884'
7883 7885 -7884 0
c Encoding variable: aux1944 with domain: int(0..2) (representing constraint ((x_00008_00004=8) + (x_00007_00005=8)))
c Both direct and order encoding.
c Var 'aux1944' order represents '0' with '7886'
c Var 'aux1944' direct represents '0' with '7886'
c Var 'aux1944' order represents '1' with '7887'
-7886 7887 0
c Var 'aux1944' direct represents '1' with '7888'
7886 -7887 7888 0
-7888 7887 0
-7888 -7886 0
c Var 'aux1944' direct represents '2' with '-7887'
7886 7888 -7887 0
c Encoding variable: aux1945 with domain: int(0..2) (representing constraint ((x_00008_00004=9) + (x_00007_00005=9)))
c Both direct and order encoding.
c Var 'aux1945' order represents '0' with '7889'
c Var 'aux1945' direct represents '0' with '7889'
c Var 'aux1945' order represents '1' with '7890'
-7889 7890 0
c Var 'aux1945' direct represents '1' with '7891'
7889 -7890 7891 0
-7891 7890 0
-7891 -7889 0
c Var 'aux1945' direct represents '2' with '-7890'
7889 7891 -7890 0
c Encoding variable: aux1946 with domain: int(0..2) (representing constraint ((x_00008_00008=1) + (x_00007_00009=1)))
c Both direct and order encoding.
c Var 'aux1946' order represents '0' with '7892'
c Var 'aux1946' direct represents '0' with '7892'
c Var 'aux1946' order represents '1' with '7893'
-7892 7893 0
c Var 'aux1946' direct represents '1' with '7894'
7892 -7893 7894 0
-7894 7893 0
-7894 -7892 0
c Var 'aux1946' direct represents '2' with '-7893'
7892 7894 -7893 0
c Encoding variable: aux1947 with domain: int(0..2) (representing constraint ((x_00008_00008=2) + (x_00007_00009=2)))
c Both direct and order encoding.
c Var 'aux1947' order represents '0' with '7895'
c Var 'aux1947' direct represents '0' with '7895'
c Var 'aux1947' order represents '1' with '7896'
-7895 7896 0
c Var 'aux1947' direct represents '1' with '7897'
7895 -7896 7897 0
-7897 7896 0
-7897 -7895 0
c Var 'aux1947' direct represents '2' with '-7896'
7895 7897 -7896 0
c Encoding variable: aux1948 with domain: int(0..2) (representing constraint ((x_00008_00008=3) + (x_00007_00009=3)))
c Both direct and order encoding.
c Var 'aux1948' order represents '0' with '7898'
c Var 'aux1948' direct represents '0' with '7898'
c Var 'aux1948' order represents '1' with '7899'
-7898 7899 0
c Var 'aux1948' direct represents '1' with '7900'
7898 -7899 7900 0
-7900 7899 0
-7900 -7898 0
c Var 'aux1948' direct represents '2' with '-7899'
7898 7900 -7899 0
c Encoding variable: aux1949 with domain: int(0..2) (representing constraint ((x_00008_00008=4) + (x_00007_00009=4)))
c Both direct and order encoding.
c Var 'aux1949' order represents '0' with '7901'
c Var 'aux1949' direct represents '0' with '7901'
c Var 'aux1949' order represents '1' with '7902'
-7901 7902 0
c Var 'aux1949' direct represents '1' with '7903'
7901 -7902 7903 0
-7903 7902 0
-7903 -7901 0
c Var 'aux1949' direct represents '2' with '-7902'
7901 7903 -7902 0
c Encoding variable: aux1950 with domain: int(0..2) (representing constraint ((x_00008_00008=5) + (x_00007_00009=5)))
c Both direct and order encoding.
c Var 'aux1950' order represents '0' with '7904'
c Var 'aux1950' direct represents '0' with '7904'
c Var 'aux1950' order represents '1' with '7905'
-7904 7905 0
c Var 'aux1950' direct represents '1' with '7906'
7904 -7905 7906 0
-7906 7905 0
-7906 -7904 0
c Var 'aux1950' direct represents '2' with '-7905'
7904 7906 -7905 0
c Encoding variable: aux1951 with domain: int(0..2) (representing constraint ((x_00008_00008=6) + (x_00007_00009=6)))
c Both direct and order encoding.
c Var 'aux1951' order represents '0' with '7907'
c Var 'aux1951' direct represents '0' with '7907'
c Var 'aux1951' order represents '1' with '7908'
-7907 7908 0
c Var 'aux1951' direct represents '1' with '7909'
7907 -7908 7909 0
-7909 7908 0
-7909 -7907 0
c Var 'aux1951' direct represents '2' with '-7908'
7907 7909 -7908 0
c Encoding variable: aux1952 with domain: int(0..2) (representing constraint ((x_00008_00008=7) + (x_00007_00009=7)))
c Both direct and order encoding.
c Var 'aux1952' order represents '0' with '7910'
c Var 'aux1952' direct represents '0' with '7910'
c Var 'aux1952' order represents '1' with '7911'
-7910 7911 0
c Var 'aux1952' direct represents '1' with '7912'
7910 -7911 7912 0
-7912 7911 0
-7912 -7910 0
c Var 'aux1952' direct represents '2' with '-7911'
7910 7912 -7911 0
c Encoding variable: aux1953 with domain: int(0..2) (representing constraint ((x_00008_00008=8) + (x_00007_00009=8)))
c Both direct and order encoding.
c Var 'aux1953' order represents '0' with '7913'
c Var 'aux1953' direct represents '0' with '7913'
c Var 'aux1953' order represents '1' with '7914'
-7913 7914 0
c Var 'aux1953' direct represents '1' with '7915'
7913 -7914 7915 0
-7915 7914 0
-7915 -7913 0
c Var 'aux1953' direct represents '2' with '-7914'
7913 7915 -7914 0
c Encoding variable: aux1954 with domain: int(0..2) (representing constraint ((x_00008_00008=9) + (x_00007_00009=9)))
c Both direct and order encoding.
c Var 'aux1954' order represents '0' with '7916'
c Var 'aux1954' direct represents '0' with '7916'
c Var 'aux1954' order represents '1' with '7917'
-7916 7917 0
c Var 'aux1954' direct represents '1' with '7918'
7916 -7917 7918 0
-7918 7917 0
-7918 -7916 0
c Var 'aux1954' direct represents '2' with '-7917'
7916 7918 -7917 0
c Encoding variable: aux1955 with domain: bool (representing constraint ((x_00001_00001 + x_00001_00002)<=3))
c Var 'aux1955' direct represents '0' with '-7919'
c Var 'aux1955' direct represents '1' with '7919'
c Var 'aux1955' order represents '1' with '1'
c Var 'aux1955' order represents '0' with '-7919'
c Encoding variable: aux1956 with domain: bool (representing constraint (3<=(x_00001_00001 + x_00001_00002)))
c Var 'aux1956' direct represents '0' with '-7920'
c Var 'aux1956' direct represents '1' with '7920'
c Var 'aux1956' order represents '1' with '1'
c Var 'aux1956' order represents '0' with '-7920'
c Encoding variable: aux1957 with domain: bool (representing constraint ((x_00001_00003 + x_00001_00004 + x_00001_00005)<=15))
c Var 'aux1957' direct represents '0' with '-7921'
c Var 'aux1957' direct represents '1' with '7921'
c Var 'aux1957' order represents '1' with '1'
c Var 'aux1957' order represents '0' with '-7921'
c Encoding variable: aux1958 with domain: bool (representing constraint (15<=(x_00001_00003 + x_00001_00004 + x_00001_00005)))
c Var 'aux1958' direct represents '0' with '-7922'
c Var 'aux1958' direct represents '1' with '7922'
c Var 'aux1958' order represents '1' with '1'
c Var 'aux1958' order represents '0' with '-7922'
c Encoding variable: aux1959 with domain: bool (representing constraint ((aux437 + shift(x_00003_00005, -1) + shift(x_00002_00006, -1))<=18))
c Var 'aux1959' direct represents '0' with '-7923'
c Var 'aux1959' direct represents '1' with '7923'
c Var 'aux1959' order represents '1' with '1'
c Var 'aux1959' order represents '0' with '-7923'
c Encoding variable: aux1960 with domain: bool (representing constraint (18<=(aux437 + shift(x_00003_00005, -1) + shift(x_00002_00006, -1))))
c Var 'aux1960' direct represents '0' with '-7924'
c Var 'aux1960' direct represents '1' with '7924'
c Var 'aux1960' order represents '1' with '1'
c Var 'aux1960' order represents '0' with '-7924'
c Encoding variable: aux1961 with domain: bool (representing constraint ((x_00002_00007 + x_00001_00007)<=4))
c Var 'aux1961' direct represents '0' with '-7925'
c Var 'aux1961' direct represents '1' with '7925'
c Var 'aux1961' order represents '1' with '1'
c Var 'aux1961' order represents '0' with '-7925'
c Encoding variable: aux1962 with domain: bool (representing constraint (4<=(x_00002_00007 + x_00001_00007)))
c Var 'aux1962' direct represents '0' with '-7926'
c Var 'aux1962' direct represents '1' with '7926'
c Var 'aux1962' order represents '1' with '1'
c Var 'aux1962' order represents '0' with '-7926'
c Encoding variable: aux1963 with domain: bool (representing constraint ((x_00002_00008 + x_00001_00008)<=16))
c Var 'aux1963' direct represents '0' with '-7927'
c Var 'aux1963' direct represents '1' with '7927'
c Var 'aux1963' order represents '1' with '1'
c Var 'aux1963' order represents '0' with '-7927'
c Encoding variable: aux1964 with domain: bool (representing constraint (16<=(x_00002_00008 + x_00001_00008)))
c Var 'aux1964' direct represents '0' with '-7928'
c Var 'aux1964' direct represents '1' with '7928'
c Var 'aux1964' order represents '1' with '1'
c Var 'aux1964' order represents '0' with '-7928'
c Encoding variable: aux1965 with domain: bool (representing constraint ((aux438 + shift(x_00003_00009, -1) + shift(x_00004_00009, -1))<=11))
c Var 'aux1965' direct represents '0' with '-7929'
c Var 'aux1965' direct represents '1' with '7929'
c Var 'aux1965' order represents '1' with '1'
c Var 'aux1965' order represents '0' with '-7929'
c Encoding variable: aux1966 with domain: bool (representing constraint (11<=(aux438 + shift(x_00003_00009, -1) + shift(x_00004_00009, -1))))
c Var 'aux1966' direct represents '0' with '-7930'
c Var 'aux1966' direct represents '1' with '7930'
c Var 'aux1966' order represents '1' with '1'
c Var 'aux1966' order represents '0' with '-7930'
c Encoding variable: aux1967 with domain: bool (representing constraint ((aux439 + shift(x_00003_00001, -1) + shift(x_00002_00002, -1))<=21))
c Var 'aux1967' direct represents '0' with '-7931'
c Var 'aux1967' direct represents '1' with '7931'
c Var 'aux1967' order represents '1' with '1'
c Var 'aux1967' order represents '0' with '-7931'
c Encoding variable: aux1968 with domain: bool (representing constraint (21<=(aux439 + shift(x_00003_00001, -1) + shift(x_00002_00002, -1))))
c Var 'aux1968' direct represents '0' with '-7932'
c Var 'aux1968' direct represents '1' with '7932'
c Var 'aux1968' order represents '1' with '1'
c Var 'aux1968' order represents '0' with '-7932'
c Encoding variable: aux1969 with domain: bool (representing constraint ((x_00002_00003 + x_00002_00004)<=17))
c Var 'aux1969' direct represents '0' with '-7933'
c Var 'aux1969' direct represents '1' with '7933'
c Var 'aux1969' order represents '1' with '1'
c Var 'aux1969' order represents '0' with '-7933'
c Encoding variable: aux1970 with domain: bool (representing constraint (17<=(x_00002_00003 + x_00002_00004)))
c Var 'aux1970' direct represents '0' with '-7934'
c Var 'aux1970' direct represents '1' with '7934'
c Var 'aux1970' order represents '1' with '1'
c Var 'aux1970' order represents '0' with '-7934'
c Encoding variable: aux1971 with domain: bool (representing constraint ((x_00003_00003 + x_00003_00004 + x_00004_00004)<=9))
c Var 'aux1971' direct represents '0' with '-7935'
c Var 'aux1971' direct represents '1' with '7935'
c Var 'aux1971' order represents '1' with '1'
c Var 'aux1971' order represents '0' with '-7935'
c Encoding variable: aux1972 with domain: bool (representing constraint (9<=(x_00003_00003 + x_00003_00004 + x_00004_00004)))
c Var 'aux1972' direct represents '0' with '-7936'
c Var 'aux1972' direct represents '1' with '7936'
c Var 'aux1972' order represents '1' with '1'
c Var 'aux1972' order represents '0' with '-7936'
c Encoding variable: aux1973 with domain: bool (representing constraint ((x_00003_00006 + x_00004_00006 + x_00005_00006)<=8))
c Var 'aux1973' direct represents '0' with '-7937'
c Var 'aux1973' direct represents '1' with '7937'
c Var 'aux1973' order represents '1' with '1'
c Var 'aux1973' order represents '0' with '-7937'
c Encoding variable: aux1974 with domain: bool (representing constraint (8<=(x_00003_00006 + x_00004_00006 + x_00005_00006)))
c Var 'aux1974' direct represents '0' with '-7938'
c Var 'aux1974' direct represents '1' with '7938'
c Var 'aux1974' order represents '1' with '1'
c Var 'aux1974' order represents '0' with '-7938'
c Encoding variable: aux1975 with domain: bool (representing constraint ((x_00003_00007 + x_00003_00008 + x_00004_00007)<=20))
c Var 'aux1975' direct represents '0' with '-7939'
c Var 'aux1975' direct represents '1' with '7939'
c Var 'aux1975' order represents '1' with '1'
c Var 'aux1975' order represents '0' with '-7939'
c Encoding variable: aux1976 with domain: bool (representing constraint (20<=(x_00003_00007 + x_00003_00008 + x_00004_00007)))
c Var 'aux1976' direct represents '0' with '-7940'
c Var 'aux1976' direct represents '1' with '7940'
c Var 'aux1976' order represents '1' with '1'
c Var 'aux1976' order represents '0' with '-7940'
c Encoding variable: aux1977 with domain: bool (representing constraint ((x_00004_00001 + x_00005_00001)<=6))
c Var 'aux1977' direct represents '0' with '-7941'
c Var 'aux1977' direct represents '1' with '7941'
c Var 'aux1977' order represents '1' with '1'
c Var 'aux1977' order represents '0' with '-7941'
c Encoding variable: aux1978 with domain: bool (representing constraint (6<=(x_00004_00001 + x_00005_00001)))
c Var 'aux1978' direct represents '0' with '-7942'
c Var 'aux1978' direct represents '1' with '7942'
c Var 'aux1978' order represents '1' with '1'
c Var 'aux1978' order represents '0' with '-7942'
c Encoding variable: aux1979 with domain: bool (representing constraint ((x_00004_00002 + x_00004_00003)<=14))
c Var 'aux1979' direct represents '0' with '-7943'
c Var 'aux1979' direct represents '1' with '7943'
c Var 'aux1979' order represents '1' with '1'
c Var 'aux1979' order represents '0' with '-7943'
c Encoding variable: aux1980 with domain: bool (representing constraint (14<=(x_00004_00002 + x_00004_00003)))
c Var 'aux1980' direct represents '0' with '-7944'
c Var 'aux1980' direct represents '1' with '7944'
c Var 'aux1980' order represents '1' with '1'
c Var 'aux1980' order represents '0' with '-7944'
c Encoding variable: aux1981 with domain: bool (representing constraint ((x_00004_00005 + x_00005_00005 + x_00006_00005)<=17))
c Var 'aux1981' direct represents '0' with '-7945'
c Var 'aux1981' direct represents '1' with '7945'
c Var 'aux1981' order represents '1' with '1'
c Var 'aux1981' order represents '0' with '-7945'
c Encoding variable: aux1982 with domain: bool (representing constraint (17<=(x_00004_00005 + x_00005_00005 + x_00006_00005)))
c Var 'aux1982' direct represents '0' with '-7946'
c Var 'aux1982' direct represents '1' with '7946'
c Var 'aux1982' order represents '1' with '1'
c Var 'aux1982' order represents '0' with '-7946'
c Encoding variable: aux1983 with domain: bool (representing constraint ((x_00004_00008 + x_00005_00007 + x_00005_00008)<=17))
c Var 'aux1983' direct represents '0' with '-7947'
c Var 'aux1983' direct represents '1' with '7947'
c Var 'aux1983' order represents '1' with '1'
c Var 'aux1983' order represents '0' with '-7947'
c Encoding variable: aux1984 with domain: bool (representing constraint (17<=(x_00004_00008 + x_00005_00007 + x_00005_00008)))
c Var 'aux1984' direct represents '0' with '-7948'
c Var 'aux1984' direct represents '1' with '7948'
c Var 'aux1984' order represents '1' with '1'
c Var 'aux1984' order represents '0' with '-7948'
c Encoding variable: aux1985 with domain: bool (representing constraint ((x_00005_00002 + x_00005_00003 + x_00006_00002)<=13))
c Var 'aux1985' direct represents '0' with '-7949'
c Var 'aux1985' direct represents '1' with '7949'
c Var 'aux1985' order represents '1' with '1'
c Var 'aux1985' order represents '0' with '-7949'
c Encoding variable: aux1986 with domain: bool (representing constraint (13<=(x_00005_00002 + x_00005_00003 + x_00006_00002)))
c Var 'aux1986' direct represents '0' with '-7950'
c Var 'aux1986' direct represents '1' with '7950'
c Var 'aux1986' order represents '1' with '1'
c Var 'aux1986' order represents '0' with '-7950'
c Encoding variable: aux1987 with domain: bool (representing constraint ((x_00007_00004 + x_00005_00004 + x_00006_00004)<=20))
c Var 'aux1987' direct represents '0' with '-7951'
c Var 'aux1987' direct represents '1' with '7951'
c Var 'aux1987' order represents '1' with '1'
c Var 'aux1987' order represents '0' with '-7951'
c Encoding variable: aux1988 with domain: bool (representing constraint (20<=(x_00007_00004 + x_00005_00004 + x_00006_00004)))
c Var 'aux1988' direct represents '0' with '-7952'
c Var 'aux1988' direct represents '1' with '7952'
c Var 'aux1988' order represents '1' with '1'
c Var 'aux1988' order represents '0' with '-7952'
c Encoding variable: aux1989 with domain: bool (representing constraint ((x_00005_00009 + x_00006_00009)<=12))
c Var 'aux1989' direct represents '0' with '-7953'
c Var 'aux1989' direct represents '1' with '7953'
c Var 'aux1989' order represents '1' with '1'
c Var 'aux1989' order represents '0' with '-7953'
c Encoding variable: aux1990 with domain: bool (representing constraint (12<=(x_00005_00009 + x_00006_00009)))
c Var 'aux1990' direct represents '0' with '-7954'
c Var 'aux1990' direct represents '1' with '7954'
c Var 'aux1990' order represents '1' with '1'
c Var 'aux1990' order represents '0' with '-7954'
c Encoding variable: aux1991 with domain: bool (representing constraint ((aux440 + shift(x_00008_00001, -1) + shift(x_00009_00001, -1))<=23))
c Var 'aux1991' direct represents '0' with '-7955'
c Var 'aux1991' direct represents '1' with '7955'
c Var 'aux1991' order represents '1' with '1'
c Var 'aux1991' order represents '0' with '-7955'
c Encoding variable: aux1992 with domain: bool (representing constraint (23<=(aux440 + shift(x_00008_00001, -1) + shift(x_00009_00001, -1))))
c Var 'aux1992' direct represents '0' with '-7956'
c Var 'aux1992' direct represents '1' with '7956'
c Var 'aux1992' order represents '1' with '1'
c Var 'aux1992' order represents '0' with '-7956'
c Encoding variable: aux1993 with domain: bool (representing constraint ((x_00007_00002 + x_00007_00003 + x_00006_00003)<=6))
c Var 'aux1993' direct represents '0' with '-7957'
c Var 'aux1993' direct represents '1' with '7957'
c Var 'aux1993' order represents '1' with '1'
c Var 'aux1993' order represents '0' with '-7957'
c Encoding variable: aux1994 with domain: bool (representing constraint (6<=(x_00007_00002 + x_00007_00003 + x_00006_00003)))
c Var 'aux1994' direct represents '0' with '-7958'
c Var 'aux1994' direct represents '1' with '7958'
c Var 'aux1994' order represents '1' with '1'
c Var 'aux1994' order represents '0' with '-7958'
c Encoding variable: aux1995 with domain: bool (representing constraint ((x_00007_00006 + x_00007_00007 + x_00006_00006)<=20))
c Var 'aux1995' direct represents '0' with '-7959'
c Var 'aux1995' direct represents '1' with '7959'
c Var 'aux1995' order represents '1' with '1'
c Var 'aux1995' order represents '0' with '-7959'
c Encoding variable: aux1996 with domain: bool (representing constraint (20<=(x_00007_00006 + x_00007_00007 + x_00006_00006)))
c Var 'aux1996' direct represents '0' with '-7960'
c Var 'aux1996' direct represents '1' with '7960'
c Var 'aux1996' order represents '1' with '1'
c Var 'aux1996' order represents '0' with '-7960'
c Encoding variable: aux1997 with domain: bool (representing constraint ((x_00006_00007 + x_00006_00008)<=6))
c Var 'aux1997' direct represents '0' with '-7961'
c Var 'aux1997' direct represents '1' with '7961'
c Var 'aux1997' order represents '1' with '1'
c Var 'aux1997' order represents '0' with '-7961'
c Encoding variable: aux1998 with domain: bool (representing constraint (6<=(x_00006_00007 + x_00006_00008)))
c Var 'aux1998' direct represents '0' with '-7962'
c Var 'aux1998' direct represents '1' with '7962'
c Var 'aux1998' order represents '1' with '1'
c Var 'aux1998' order represents '0' with '-7962'
c Encoding variable: aux1999 with domain: bool (representing constraint ((aux441 + shift(x_00008_00004, -1) + shift(x_00008_00005, -1))<=6))
c Var 'aux1999' direct represents '0' with '-7963'
c Var 'aux1999' direct represents '1' with '7963'
c Var 'aux1999' order represents '1' with '1'
c Var 'aux1999' order represents '0' with '-7963'
c Encoding variable: aux2000 with domain: bool (representing constraint (6<=(aux441 + shift(x_00008_00004, -1) + shift(x_00008_00005, -1))))
c Var 'aux2000' direct represents '0' with '-7964'
c Var 'aux2000' direct represents '1' with '7964'
c Var 'aux2000' order represents '1' with '1'
c Var 'aux2000' order represents '0' with '-7964'
c Encoding variable: aux2001 with domain: bool (representing constraint ((shift(x_00007_00009, -1) + aux442 + shift(x_00008_00008, -1))<=10))
c Var 'aux2001' direct represents '0' with '-7965'
c Var 'aux2001' direct represents '1' with '7965'
c Var 'aux2001' order represents '1' with '1'
c Var 'aux2001' order represents '0' with '-7965'
c Encoding variable: aux2002 with domain: bool (representing constraint (10<=(shift(x_00007_00009, -1) + aux442 + shift(x_00008_00008, -1))))
c Var 'aux2002' direct represents '0' with '-7966'
c Var 'aux2002' direct represents '1' with '7966'
c Var 'aux2002' order represents '1' with '1'
c Var 'aux2002' order represents '0' with '-7966'
c Encoding variable: aux2003 with domain: bool (representing constraint ((x_00008_00002 + x_00009_00002)<=8))
c Var 'aux2003' direct represents '0' with '-7967'
c Var 'aux2003' direct represents '1' with '7967'
c Var 'aux2003' order represents '1' with '1'
c Var 'aux2003' order represents '0' with '-7967'
c Encoding variable: aux2004 with domain: bool (representing constraint (8<=(x_00008_00002 + x_00009_00002)))
c Var 'aux2004' direct represents '0' with '-7968'
c Var 'aux2004' direct represents '1' with '7968'
c Var 'aux2004' order represents '1' with '1'
c Var 'aux2004' order represents '0' with '-7968'
c Encoding variable: aux2005 with domain: bool (representing constraint ((x_00008_00003 + x_00009_00003)<=16))
c Var 'aux2005' direct represents '0' with '-7969'
c Var 'aux2005' direct represents '1' with '7969'
c Var 'aux2005' order represents '1' with '1'
c Var 'aux2005' order represents '0' with '-7969'
c Encoding variable: aux2006 with domain: bool (representing constraint (16<=(x_00008_00003 + x_00009_00003)))
c Var 'aux2006' direct represents '0' with '-7970'
c Var 'aux2006' direct represents '1' with '7970'
c Var 'aux2006' order represents '1' with '1'
c Var 'aux2006' order represents '0' with '-7970'
c Encoding variable: aux2007 with domain: bool (representing constraint ((x_00008_00006 + x_00008_00007)<=15))
c Var 'aux2007' direct represents '0' with '-7971'
c Var 'aux2007' direct represents '1' with '7971'
c Var 'aux2007' order represents '1' with '1'
c Var 'aux2007' order represents '0' with '-7971'
c Encoding variable: aux2008 with domain: bool (representing constraint (15<=(x_00008_00006 + x_00008_00007)))
c Var 'aux2008' direct represents '0' with '-7972'
c Var 'aux2008' direct represents '1' with '7972'
c Var 'aux2008' order represents '1' with '1'
c Var 'aux2008' order represents '0' with '-7972'
c Encoding variable: aux2009 with domain: bool (representing constraint ((x_00009_00005 + x_00009_00006 + x_00009_00007)<=13))
c Var 'aux2009' direct represents '0' with '-7973'
c Var 'aux2009' direct represents '1' with '7973'
c Var 'aux2009' order represents '1' with '1'
c Var 'aux2009' order represents '0' with '-7973'
c Encoding variable: aux2010 with domain: bool (representing constraint (13<=(x_00009_00005 + x_00009_00006 + x_00009_00007)))
c Var 'aux2010' direct represents '0' with '-7974'
c Var 'aux2010' direct represents '1' with '7974'
c Var 'aux2010' order represents '1' with '1'
c Var 'aux2010' order represents '0' with '-7974'
c Encoding variable: aux2011 with domain: bool (representing constraint ((x_00009_00008 + x_00009_00009)<=17))
c Var 'aux2011' direct represents '0' with '-7975'
c Var 'aux2011' direct represents '1' with '7975'
c Var 'aux2011' order represents '1' with '1'
c Var 'aux2011' order represents '0' with '-7975'
c Encoding variable: aux2012 with domain: bool (representing constraint (17<=(x_00009_00008 + x_00009_00009)))
c Var 'aux2012' direct represents '0' with '-7976'
c Var 'aux2012' direct represents '1' with '7976'
c Var 'aux2012' order represents '1' with '1'
c Var 'aux2012' order represents '0' with '-7976'
c Encoding variable: aux2013 with domain: bool (representing constraint ((aux444 + aux447 + aux448)<=1))
c Var 'aux2013' direct represents '0' with '-7977'
c Var 'aux2013' direct represents '1' with '7977'
c Var 'aux2013' order represents '1' with '1'
c Var 'aux2013' order represents '0' with '-7977'
c Encoding variable: aux2014 with domain: bool (representing constraint (1<=(aux444 + aux447 + aux448)))
c Var 'aux2014' direct represents '0' with '-7978'
c Var 'aux2014' direct represents '1' with '7978'
c Var 'aux2014' order represents '1' with '1'
c Var 'aux2014' order represents '0' with '-7978'
c Encoding variable: aux2015 with domain: bool (representing constraint ((aux450 + aux453 + aux454)<=1))
c Var 'aux2015' direct represents '0' with '-7979'
c Var 'aux2015' direct represents '1' with '7979'
c Var 'aux2015' order represents '1' with '1'
c Var 'aux2015' order represents '0' with '-7979'
c Encoding variable: aux2016 with domain: bool (representing constraint (1<=(aux450 + aux453 + aux454)))
c Var 'aux2016' direct represents '0' with '-7980'
c Var 'aux2016' direct represents '1' with '7980'
c Var 'aux2016' order represents '1' with '1'
c Var 'aux2016' order represents '0' with '-7980'
c Encoding variable: aux2017 with domain: bool (representing constraint ((aux456 + aux459 + aux460)<=1))
c Var 'aux2017' direct represents '0' with '-7981'
c Var 'aux2017' direct represents '1' with '7981'
c Var 'aux2017' order represents '1' with '1'
c Var 'aux2017' order represents '0' with '-7981'
c Encoding variable: aux2018 with domain: bool (representing constraint (1<=(aux456 + aux459 + aux460)))
c Var 'aux2018' direct represents '0' with '-7982'
c Var 'aux2018' direct represents '1' with '7982'
c Var 'aux2018' order represents '1' with '1'
c Var 'aux2018' order represents '0' with '-7982'
c Encoding variable: aux2019 with domain: bool (representing constraint ((aux462 + aux465 + aux466)<=1))
c Var 'aux2019' direct represents '0' with '-7983'
c Var 'aux2019' direct represents '1' with '7983'
c Var 'aux2019' order represents '1' with '1'
c Var 'aux2019' order represents '0' with '-7983'
c Encoding variable: aux2020 with domain: bool (representing constraint (1<=(aux462 + aux465 + aux466)))
c Var 'aux2020' direct represents '0' with '-7984'
c Var 'aux2020' direct represents '1' with '7984'
c Var 'aux2020' order represents '1' with '1'
c Var 'aux2020' order represents '0' with '-7984'
c Encoding variable: aux2021 with domain: bool (representing constraint ((aux468 + aux471 + aux472)<=1))
c Var 'aux2021' direct represents '0' with '-7985'
c Var 'aux2021' direct represents '1' with '7985'
c Var 'aux2021' order represents '1' with '1'
c Var 'aux2021' order represents '0' with '-7985'
c Encoding variable: aux2022 with domain: bool (representing constraint (1<=(aux468 + aux471 + aux472)))
c Var 'aux2022' direct represents '0' with '-7986'
c Var 'aux2022' direct represents '1' with '7986'
c Var 'aux2022' order represents '1' with '1'
c Var 'aux2022' order represents '0' with '-7986'
c Encoding variable: aux2023 with domain: bool (representing constraint ((aux474 + aux477 + aux478)<=1))
c Var 'aux2023' direct represents '0' with '-7987'
c Var 'aux2023' direct represents '1' with '7987'
c Var 'aux2023' order represents '1' with '1'
c Var 'aux2023' order represents '0' with '-7987'
c Encoding variable: aux2024 with domain: bool (representing constraint (1<=(aux474 + aux477 + aux478)))
c Var 'aux2024' direct represents '0' with '-7988'
c Var 'aux2024' direct represents '1' with '7988'
c Var 'aux2024' order represents '1' with '1'
c Var 'aux2024' order represents '0' with '-7988'
c Encoding variable: aux2025 with domain: bool (representing constraint ((aux480 + aux483 + aux484)<=1))
c Var 'aux2025' direct represents '0' with '-7989'
c Var 'aux2025' direct represents '1' with '7989'
c Var 'aux2025' order represents '1' with '1'
c Var 'aux2025' order represents '0' with '-7989'
c Encoding variable: aux2026 with domain: bool (representing constraint (1<=(aux480 + aux483 + aux484)))
c Var 'aux2026' direct represents '0' with '-7990'
c Var 'aux2026' direct represents '1' with '7990'
c Var 'aux2026' order represents '1' with '1'
c Var 'aux2026' order represents '0' with '-7990'
c Encoding variable: aux2027 with domain: bool (representing constraint ((aux486 + aux489 + aux490)<=1))
c Var 'aux2027' direct represents '0' with '-7991'
c Var 'aux2027' direct represents '1' with '7991'
c Var 'aux2027' order represents '1' with '1'
c Var 'aux2027' order represents '0' with '-7991'
c Encoding variable: aux2028 with domain: bool (representing constraint (1<=(aux486 + aux489 + aux490)))
c Var 'aux2028' direct represents '0' with '-7992'
c Var 'aux2028' direct represents '1' with '7992'
c Var 'aux2028' order represents '1' with '1'
c Var 'aux2028' order represents '0' with '-7992'
c Encoding variable: aux2029 with domain: bool (representing constraint ((aux492 + aux495 + aux496)<=1))
c Var 'aux2029' direct represents '0' with '-7993'
c Var 'aux2029' direct represents '1' with '7993'
c Var 'aux2029' order represents '1' with '1'
c Var 'aux2029' order represents '0' with '-7993'
c Encoding variable: aux2030 with domain: bool (representing constraint (1<=(aux492 + aux495 + aux496)))
c Var 'aux2030' direct represents '0' with '-7994'
c Var 'aux2030' direct represents '1' with '7994'
c Var 'aux2030' order represents '1' with '1'
c Var 'aux2030' order represents '0' with '-7994'
c Encoding variable: aux2031 with domain: bool (representing constraint ((aux498 + aux501 + aux502)<=1))
c Var 'aux2031' direct represents '0' with '-7995'
c Var 'aux2031' direct represents '1' with '7995'
c Var 'aux2031' order represents '1' with '1'
c Var 'aux2031' order represents '0' with '-7995'
c Encoding variable: aux2032 with domain: bool (representing constraint (1<=(aux498 + aux501 + aux502)))
c Var 'aux2032' direct represents '0' with '-7996'
c Var 'aux2032' direct represents '1' with '7996'
c Var 'aux2032' order represents '1' with '1'
c Var 'aux2032' order represents '0' with '-7996'
c Encoding variable: aux2033 with domain: bool (representing constraint ((aux504 + aux507 + aux508)<=1))
c Var 'aux2033' direct represents '0' with '-7997'
c Var 'aux2033' direct represents '1' with '7997'
c Var 'aux2033' order represents '1' with '1'
c Var 'aux2033' order represents '0' with '-7997'
c Encoding variable: aux2034 with domain: bool (representing constraint (1<=(aux504 + aux507 + aux508)))
c Var 'aux2034' direct represents '0' with '-7998'
c Var 'aux2034' direct represents '1' with '7998'
c Var 'aux2034' order represents '1' with '1'
c Var 'aux2034' order represents '0' with '-7998'
c Encoding variable: aux2035 with domain: bool (representing constraint ((aux510 + aux513 + aux514)<=1))
c Var 'aux2035' direct represents '0' with '-7999'
c Var 'aux2035' direct represents '1' with '7999'
c Var 'aux2035' order represents '1' with '1'
c Var 'aux2035' order represents '0' with '-7999'
c Encoding variable: aux2036 with domain: bool (representing constraint (1<=(aux510 + aux513 + aux514)))
c Var 'aux2036' direct represents '0' with '-8000'
c Var 'aux2036' direct represents '1' with '8000'
c Var 'aux2036' order represents '1' with '1'
c Var 'aux2036' order represents '0' with '-8000'
c Encoding variable: aux2037 with domain: bool (representing constraint ((aux516 + aux519 + aux520)<=1))
c Var 'aux2037' direct represents '0' with '-8001'
c Var 'aux2037' direct represents '1' with '8001'
c Var 'aux2037' order represents '1' with '1'
c Var 'aux2037' order represents '0' with '-8001'
c Encoding variable: aux2038 with domain: bool (representing constraint (1<=(aux516 + aux519 + aux520)))
c Var 'aux2038' direct represents '0' with '-8002'
c Var 'aux2038' direct represents '1' with '8002'
c Var 'aux2038' order represents '1' with '1'
c Var 'aux2038' order represents '0' with '-8002'
c Encoding variable: aux2039 with domain: bool (representing constraint ((aux522 + aux525 + aux526)<=1))
c Var 'aux2039' direct represents '0' with '-8003'
c Var 'aux2039' direct represents '1' with '8003'
c Var 'aux2039' order represents '1' with '1'
c Var 'aux2039' order represents '0' with '-8003'
c Encoding variable: aux2040 with domain: bool (representing constraint (1<=(aux522 + aux525 + aux526)))
c Var 'aux2040' direct represents '0' with '-8004'
c Var 'aux2040' direct represents '1' with '8004'
c Var 'aux2040' order represents '1' with '1'
c Var 'aux2040' order represents '0' with '-8004'
c Encoding variable: aux2041 with domain: bool (representing constraint ((aux528 + aux531 + aux532)<=1))
c Var 'aux2041' direct represents '0' with '-8005'
c Var 'aux2041' direct represents '1' with '8005'
c Var 'aux2041' order represents '1' with '1'
c Var 'aux2041' order represents '0' with '-8005'
c Encoding variable: aux2042 with domain: bool (representing constraint (1<=(aux528 + aux531 + aux532)))
c Var 'aux2042' direct represents '0' with '-8006'
c Var 'aux2042' direct represents '1' with '8006'
c Var 'aux2042' order represents '1' with '1'
c Var 'aux2042' order represents '0' with '-8006'
c Encoding variable: aux2043 with domain: bool (representing constraint ((aux534 + aux537 + aux538)<=1))
c Var 'aux2043' direct represents '0' with '-8007'
c Var 'aux2043' direct represents '1' with '8007'
c Var 'aux2043' order represents '1' with '1'
c Var 'aux2043' order represents '0' with '-8007'
c Encoding variable: aux2044 with domain: bool (representing constraint (1<=(aux534 + aux537 + aux538)))
c Var 'aux2044' direct represents '0' with '-8008'
c Var 'aux2044' direct represents '1' with '8008'
c Var 'aux2044' order represents '1' with '1'
c Var 'aux2044' order represents '0' with '-8008'
c Encoding variable: aux2045 with domain: bool (representing constraint ((aux540 + aux543 + aux544)<=1))
c Var 'aux2045' direct represents '0' with '-8009'
c Var 'aux2045' direct represents '1' with '8009'
c Var 'aux2045' order represents '1' with '1'
c Var 'aux2045' order represents '0' with '-8009'
c Encoding variable: aux2046 with domain: bool (representing constraint (1<=(aux540 + aux543 + aux544)))
c Var 'aux2046' direct represents '0' with '-8010'
c Var 'aux2046' direct represents '1' with '8010'
c Var 'aux2046' order represents '1' with '1'
c Var 'aux2046' order represents '0' with '-8010'
c Encoding variable: aux2047 with domain: bool (representing constraint ((aux546 + aux549 + aux550)<=1))
c Var 'aux2047' direct represents '0' with '-8011'
c Var 'aux2047' direct represents '1' with '8011'
c Var 'aux2047' order represents '1' with '1'
c Var 'aux2047' order represents '0' with '-8011'
c Encoding variable: aux2048 with domain: bool (representing constraint (1<=(aux546 + aux549 + aux550)))
c Var 'aux2048' direct represents '0' with '-8012'
c Var 'aux2048' direct represents '1' with '8012'
c Var 'aux2048' order represents '1' with '1'
c Var 'aux2048' order represents '0' with '-8012'
c Encoding variable: aux2049 with domain: bool (representing constraint ((aux552 + aux555 + aux556)<=1))
c Var 'aux2049' direct represents '0' with '-8013'
c Var 'aux2049' direct represents '1' with '8013'
c Var 'aux2049' order represents '1' with '1'
c Var 'aux2049' order represents '0' with '-8013'
c Encoding variable: aux2050 with domain: bool (representing constraint (1<=(aux552 + aux555 + aux556)))
c Var 'aux2050' direct represents '0' with '-8014'
c Var 'aux2050' direct represents '1' with '8014'
c Var 'aux2050' order represents '1' with '1'
c Var 'aux2050' order represents '0' with '-8014'
c Encoding variable: aux2051 with domain: bool (representing constraint ((aux558 + aux561 + aux562)<=1))
c Var 'aux2051' direct represents '0' with '-8015'
c Var 'aux2051' direct represents '1' with '8015'
c Var 'aux2051' order represents '1' with '1'
c Var 'aux2051' order represents '0' with '-8015'
c Encoding variable: aux2052 with domain: bool (representing constraint (1<=(aux558 + aux561 + aux562)))
c Var 'aux2052' direct represents '0' with '-8016'
c Var 'aux2052' direct represents '1' with '8016'
c Var 'aux2052' order represents '1' with '1'
c Var 'aux2052' order represents '0' with '-8016'
c Encoding variable: aux2053 with domain: bool (representing constraint ((aux564 + aux567 + aux568)<=1))
c Var 'aux2053' direct represents '0' with '-8017'
c Var 'aux2053' direct represents '1' with '8017'
c Var 'aux2053' order represents '1' with '1'
c Var 'aux2053' order represents '0' with '-8017'
c Encoding variable: aux2054 with domain: bool (representing constraint (1<=(aux564 + aux567 + aux568)))
c Var 'aux2054' direct represents '0' with '-8018'
c Var 'aux2054' direct represents '1' with '8018'
c Var 'aux2054' order represents '1' with '1'
c Var 'aux2054' order represents '0' with '-8018'
c Encoding variable: aux2055 with domain: bool (representing constraint ((aux570 + aux573 + aux574)<=1))
c Var 'aux2055' direct represents '0' with '-8019'
c Var 'aux2055' direct represents '1' with '8019'
c Var 'aux2055' order represents '1' with '1'
c Var 'aux2055' order represents '0' with '-8019'
c Encoding variable: aux2056 with domain: bool (representing constraint (1<=(aux570 + aux573 + aux574)))
c Var 'aux2056' direct represents '0' with '-8020'
c Var 'aux2056' direct represents '1' with '8020'
c Var 'aux2056' order represents '1' with '1'
c Var 'aux2056' order represents '0' with '-8020'
c Encoding variable: aux2057 with domain: bool (representing constraint ((aux576 + aux579 + aux580)<=1))
c Var 'aux2057' direct represents '0' with '-8021'
c Var 'aux2057' direct represents '1' with '8021'
c Var 'aux2057' order represents '1' with '1'
c Var 'aux2057' order represents '0' with '-8021'
c Encoding variable: aux2058 with domain: bool (representing constraint (1<=(aux576 + aux579 + aux580)))
c Var 'aux2058' direct represents '0' with '-8022'
c Var 'aux2058' direct represents '1' with '8022'
c Var 'aux2058' order represents '1' with '1'
c Var 'aux2058' order represents '0' with '-8022'
c Encoding variable: aux2059 with domain: bool (representing constraint ((aux582 + aux585 + aux586)<=1))
c Var 'aux2059' direct represents '0' with '-8023'
c Var 'aux2059' direct represents '1' with '8023'
c Var 'aux2059' order represents '1' with '1'
c Var 'aux2059' order represents '0' with '-8023'
c Encoding variable: aux2060 with domain: bool (representing constraint (1<=(aux582 + aux585 + aux586)))
c Var 'aux2060' direct represents '0' with '-8024'
c Var 'aux2060' direct represents '1' with '8024'
c Var 'aux2060' order represents '1' with '1'
c Var 'aux2060' order represents '0' with '-8024'
c Encoding variable: aux2061 with domain: bool (representing constraint ((aux588 + aux591 + aux592)<=1))
c Var 'aux2061' direct represents '0' with '-8025'
c Var 'aux2061' direct represents '1' with '8025'
c Var 'aux2061' order represents '1' with '1'
c Var 'aux2061' order represents '0' with '-8025'
c Encoding variable: aux2062 with domain: bool (representing constraint (1<=(aux588 + aux591 + aux592)))
c Var 'aux2062' direct represents '0' with '-8026'
c Var 'aux2062' direct represents '1' with '8026'
c Var 'aux2062' order represents '1' with '1'
c Var 'aux2062' order represents '0' with '-8026'
c Encoding variable: aux2063 with domain: bool (representing constraint ((aux594 + aux597 + aux598)<=1))
c Var 'aux2063' direct represents '0' with '-8027'
c Var 'aux2063' direct represents '1' with '8027'
c Var 'aux2063' order represents '1' with '1'
c Var 'aux2063' order represents '0' with '-8027'
c Encoding variable: aux2064 with domain: bool (representing constraint (1<=(aux594 + aux597 + aux598)))
c Var 'aux2064' direct represents '0' with '-8028'
c Var 'aux2064' direct represents '1' with '8028'
c Var 'aux2064' order represents '1' with '1'
c Var 'aux2064' order represents '0' with '-8028'
c Encoding variable: aux2065 with domain: bool (representing constraint ((aux600 + aux603 + aux604)<=1))
c Var 'aux2065' direct represents '0' with '-8029'
c Var 'aux2065' direct represents '1' with '8029'
c Var 'aux2065' order represents '1' with '1'
c Var 'aux2065' order represents '0' with '-8029'
c Encoding variable: aux2066 with domain: bool (representing constraint (1<=(aux600 + aux603 + aux604)))
c Var 'aux2066' direct represents '0' with '-8030'
c Var 'aux2066' direct represents '1' with '8030'
c Var 'aux2066' order represents '1' with '1'
c Var 'aux2066' order represents '0' with '-8030'
c Encoding variable: aux2067 with domain: bool (representing constraint ((aux606 + aux609 + aux610)<=1))
c Var 'aux2067' direct represents '0' with '-8031'
c Var 'aux2067' direct represents '1' with '8031'
c Var 'aux2067' order represents '1' with '1'
c Var 'aux2067' order represents '0' with '-8031'
c Encoding variable: aux2068 with domain: bool (representing constraint (1<=(aux606 + aux609 + aux610)))
c Var 'aux2068' direct represents '0' with '-8032'
c Var 'aux2068' direct represents '1' with '8032'
c Var 'aux2068' order represents '1' with '1'
c Var 'aux2068' order represents '0' with '-8032'
c Encoding variable: aux2069 with domain: bool (representing constraint ((aux612 + aux615 + aux616)<=1))
c Var 'aux2069' direct represents '0' with '-8033'
c Var 'aux2069' direct represents '1' with '8033'
c Var 'aux2069' order represents '1' with '1'
c Var 'aux2069' order represents '0' with '-8033'
c Encoding variable: aux2070 with domain: bool (representing constraint (1<=(aux612 + aux615 + aux616)))
c Var 'aux2070' direct represents '0' with '-8034'
c Var 'aux2070' direct represents '1' with '8034'
c Var 'aux2070' order represents '1' with '1'
c Var 'aux2070' order represents '0' with '-8034'
c Encoding variable: aux2071 with domain: bool (representing constraint ((aux618 + aux621 + aux622)<=1))
c Var 'aux2071' direct represents '0' with '-8035'
c Var 'aux2071' direct represents '1' with '8035'
c Var 'aux2071' order represents '1' with '1'
c Var 'aux2071' order represents '0' with '-8035'
c Encoding variable: aux2072 with domain: bool (representing constraint (1<=(aux618 + aux621 + aux622)))
c Var 'aux2072' direct represents '0' with '-8036'
c Var 'aux2072' direct represents '1' with '8036'
c Var 'aux2072' order represents '1' with '1'
c Var 'aux2072' order represents '0' with '-8036'
c Encoding variable: aux2073 with domain: bool (representing constraint ((aux624 + aux627 + aux628)<=1))
c Var 'aux2073' direct represents '0' with '-8037'
c Var 'aux2073' direct represents '1' with '8037'
c Var 'aux2073' order represents '1' with '1'
c Var 'aux2073' order represents '0' with '-8037'
c Encoding variable: aux2074 with domain: bool (representing constraint (1<=(aux624 + aux627 + aux628)))
c Var 'aux2074' direct represents '0' with '-8038'
c Var 'aux2074' direct represents '1' with '8038'
c Var 'aux2074' order represents '1' with '1'
c Var 'aux2074' order represents '0' with '-8038'
c Encoding variable: aux2075 with domain: bool (representing constraint ((aux630 + aux633 + aux634)<=1))
c Var 'aux2075' direct represents '0' with '-8039'
c Var 'aux2075' direct represents '1' with '8039'
c Var 'aux2075' order represents '1' with '1'
c Var 'aux2075' order represents '0' with '-8039'
c Encoding variable: aux2076 with domain: bool (representing constraint (1<=(aux630 + aux633 + aux634)))
c Var 'aux2076' direct represents '0' with '-8040'
c Var 'aux2076' direct represents '1' with '8040'
c Var 'aux2076' order represents '1' with '1'
c Var 'aux2076' order represents '0' with '-8040'
c Encoding variable: aux2077 with domain: bool (representing constraint ((aux636 + aux639 + aux640)<=1))
c Var 'aux2077' direct represents '0' with '-8041'
c Var 'aux2077' direct represents '1' with '8041'
c Var 'aux2077' order represents '1' with '1'
c Var 'aux2077' order represents '0' with '-8041'
c Encoding variable: aux2078 with domain: bool (representing constraint (1<=(aux636 + aux639 + aux640)))
c Var 'aux2078' direct represents '0' with '-8042'
c Var 'aux2078' direct represents '1' with '8042'
c Var 'aux2078' order represents '1' with '1'
c Var 'aux2078' order represents '0' with '-8042'
c Encoding variable: aux2079 with domain: bool (representing constraint ((aux642 + aux645 + aux646)<=1))
c Var 'aux2079' direct represents '0' with '-8043'
c Var 'aux2079' direct represents '1' with '8043'
c Var 'aux2079' order represents '1' with '1'
c Var 'aux2079' order represents '0' with '-8043'
c Encoding variable: aux2080 with domain: bool (representing constraint (1<=(aux642 + aux645 + aux646)))
c Var 'aux2080' direct represents '0' with '-8044'
c Var 'aux2080' direct represents '1' with '8044'
c Var 'aux2080' order represents '1' with '1'
c Var 'aux2080' order represents '0' with '-8044'
c Encoding variable: aux2081 with domain: bool (representing constraint ((aux648 + aux651 + aux652)<=1))
c Var 'aux2081' direct represents '0' with '-8045'
c Var 'aux2081' direct represents '1' with '8045'
c Var 'aux2081' order represents '1' with '1'
c Var 'aux2081' order represents '0' with '-8045'
c Encoding variable: aux2082 with domain: bool (representing constraint (1<=(aux648 + aux651 + aux652)))
c Var 'aux2082' direct represents '0' with '-8046'
c Var 'aux2082' direct represents '1' with '8046'
c Var 'aux2082' order represents '1' with '1'
c Var 'aux2082' order represents '0' with '-8046'
c Encoding variable: aux2083 with domain: bool (representing constraint ((aux654 + aux657 + aux658)<=1))
c Var 'aux2083' direct represents '0' with '-8047'
c Var 'aux2083' direct represents '1' with '8047'
c Var 'aux2083' order represents '1' with '1'
c Var 'aux2083' order represents '0' with '-8047'
c Encoding variable: aux2084 with domain: bool (representing constraint (1<=(aux654 + aux657 + aux658)))
c Var 'aux2084' direct represents '0' with '-8048'
c Var 'aux2084' direct represents '1' with '8048'
c Var 'aux2084' order represents '1' with '1'
c Var 'aux2084' order represents '0' with '-8048'
c Encoding variable: aux2085 with domain: bool (representing constraint ((aux660 + aux663 + aux664)<=1))
c Var 'aux2085' direct represents '0' with '-8049'
c Var 'aux2085' direct represents '1' with '8049'
c Var 'aux2085' order represents '1' with '1'
c Var 'aux2085' order represents '0' with '-8049'
c Encoding variable: aux2086 with domain: bool (representing constraint (1<=(aux660 + aux663 + aux664)))
c Var 'aux2086' direct represents '0' with '-8050'
c Var 'aux2086' direct represents '1' with '8050'
c Var 'aux2086' order represents '1' with '1'
c Var 'aux2086' order represents '0' with '-8050'
c Encoding variable: aux2087 with domain: bool (representing constraint ((aux666 + aux669 + aux670)<=1))
c Var 'aux2087' direct represents '0' with '-8051'
c Var 'aux2087' direct represents '1' with '8051'
c Var 'aux2087' order represents '1' with '1'
c Var 'aux2087' order represents '0' with '-8051'
c Encoding variable: aux2088 with domain: bool (representing constraint (1<=(aux666 + aux669 + aux670)))
c Var 'aux2088' direct represents '0' with '-8052'
c Var 'aux2088' direct represents '1' with '8052'
c Var 'aux2088' order represents '1' with '1'
c Var 'aux2088' order represents '0' with '-8052'
c Encoding variable: aux2089 with domain: bool (representing constraint ((aux672 + aux675 + aux676)<=1))
c Var 'aux2089' direct represents '0' with '-8053'
c Var 'aux2089' direct represents '1' with '8053'
c Var 'aux2089' order represents '1' with '1'
c Var 'aux2089' order represents '0' with '-8053'
c Encoding variable: aux2090 with domain: bool (representing constraint (1<=(aux672 + aux675 + aux676)))
c Var 'aux2090' direct represents '0' with '-8054'
c Var 'aux2090' direct represents '1' with '8054'
c Var 'aux2090' order represents '1' with '1'
c Var 'aux2090' order represents '0' with '-8054'
c Encoding variable: aux2091 with domain: bool (representing constraint ((aux678 + aux681 + aux682)<=1))
c Var 'aux2091' direct represents '0' with '-8055'
c Var 'aux2091' direct represents '1' with '8055'
c Var 'aux2091' order represents '1' with '1'
c Var 'aux2091' order represents '0' with '-8055'
c Encoding variable: aux2092 with domain: bool (representing constraint (1<=(aux678 + aux681 + aux682)))
c Var 'aux2092' direct represents '0' with '-8056'
c Var 'aux2092' direct represents '1' with '8056'
c Var 'aux2092' order represents '1' with '1'
c Var 'aux2092' order represents '0' with '-8056'
c Encoding variable: aux2093 with domain: bool (representing constraint ((aux684 + aux687 + aux688)<=1))
c Var 'aux2093' direct represents '0' with '-8057'
c Var 'aux2093' direct represents '1' with '8057'
c Var 'aux2093' order represents '1' with '1'
c Var 'aux2093' order represents '0' with '-8057'
c Encoding variable: aux2094 with domain: bool (representing constraint (1<=(aux684 + aux687 + aux688)))
c Var 'aux2094' direct represents '0' with '-8058'
c Var 'aux2094' direct represents '1' with '8058'
c Var 'aux2094' order represents '1' with '1'
c Var 'aux2094' order represents '0' with '-8058'
c Encoding variable: aux2095 with domain: bool (representing constraint ((aux690 + aux693 + aux694)<=1))
c Var 'aux2095' direct represents '0' with '-8059'
c Var 'aux2095' direct represents '1' with '8059'
c Var 'aux2095' order represents '1' with '1'
c Var 'aux2095' order represents '0' with '-8059'
c Encoding variable: aux2096 with domain: bool (representing constraint (1<=(aux690 + aux693 + aux694)))
c Var 'aux2096' direct represents '0' with '-8060'
c Var 'aux2096' direct represents '1' with '8060'
c Var 'aux2096' order represents '1' with '1'
c Var 'aux2096' order represents '0' with '-8060'
c Encoding variable: aux2097 with domain: bool (representing constraint ((aux696 + aux699 + aux700)<=1))
c Var 'aux2097' direct represents '0' with '-8061'
c Var 'aux2097' direct represents '1' with '8061'
c Var 'aux2097' order represents '1' with '1'
c Var 'aux2097' order represents '0' with '-8061'
c Encoding variable: aux2098 with domain: bool (representing constraint (1<=(aux696 + aux699 + aux700)))
c Var 'aux2098' direct represents '0' with '-8062'
c Var 'aux2098' direct represents '1' with '8062'
c Var 'aux2098' order represents '1' with '1'
c Var 'aux2098' order represents '0' with '-8062'
c Encoding variable: aux2099 with domain: bool (representing constraint ((aux702 + aux705 + aux706)<=1))
c Var 'aux2099' direct represents '0' with '-8063'
c Var 'aux2099' direct represents '1' with '8063'
c Var 'aux2099' order represents '1' with '1'
c Var 'aux2099' order represents '0' with '-8063'
c Encoding variable: aux2100 with domain: bool (representing constraint (1<=(aux702 + aux705 + aux706)))
c Var 'aux2100' direct represents '0' with '-8064'
c Var 'aux2100' direct represents '1' with '8064'
c Var 'aux2100' order represents '1' with '1'
c Var 'aux2100' order represents '0' with '-8064'
c Encoding variable: aux2101 with domain: bool (representing constraint ((aux708 + aux711 + aux712)<=1))
c Var 'aux2101' direct represents '0' with '-8065'
c Var 'aux2101' direct represents '1' with '8065'
c Var 'aux2101' order represents '1' with '1'
c Var 'aux2101' order represents '0' with '-8065'
c Encoding variable: aux2102 with domain: bool (representing constraint (1<=(aux708 + aux711 + aux712)))
c Var 'aux2102' direct represents '0' with '-8066'
c Var 'aux2102' direct represents '1' with '8066'
c Var 'aux2102' order represents '1' with '1'
c Var 'aux2102' order represents '0' with '-8066'
c Encoding variable: aux2103 with domain: bool (representing constraint ((aux714 + aux717 + aux718)<=1))
c Var 'aux2103' direct represents '0' with '-8067'
c Var 'aux2103' direct represents '1' with '8067'
c Var 'aux2103' order represents '1' with '1'
c Var 'aux2103' order represents '0' with '-8067'
c Encoding variable: aux2104 with domain: bool (representing constraint (1<=(aux714 + aux717 + aux718)))
c Var 'aux2104' direct represents '0' with '-8068'
c Var 'aux2104' direct represents '1' with '8068'
c Var 'aux2104' order represents '1' with '1'
c Var 'aux2104' order represents '0' with '-8068'
c Encoding variable: aux2105 with domain: bool (representing constraint ((aux720 + aux723 + aux724)<=1))
c Var 'aux2105' direct represents '0' with '-8069'
c Var 'aux2105' direct represents '1' with '8069'
c Var 'aux2105' order represents '1' with '1'
c Var 'aux2105' order represents '0' with '-8069'
c Encoding variable: aux2106 with domain: bool (representing constraint (1<=(aux720 + aux723 + aux724)))
c Var 'aux2106' direct represents '0' with '-8070'
c Var 'aux2106' direct represents '1' with '8070'
c Var 'aux2106' order represents '1' with '1'
c Var 'aux2106' order represents '0' with '-8070'
c Encoding variable: aux2107 with domain: bool (representing constraint ((aux726 + aux729 + aux730)<=1))
c Var 'aux2107' direct represents '0' with '-8071'
c Var 'aux2107' direct represents '1' with '8071'
c Var 'aux2107' order represents '1' with '1'
c Var 'aux2107' order represents '0' with '-8071'
c Encoding variable: aux2108 with domain: bool (representing constraint (1<=(aux726 + aux729 + aux730)))
c Var 'aux2108' direct represents '0' with '-8072'
c Var 'aux2108' direct represents '1' with '8072'
c Var 'aux2108' order represents '1' with '1'
c Var 'aux2108' order represents '0' with '-8072'
c Encoding variable: aux2109 with domain: bool (representing constraint ((aux732 + aux735 + aux736)<=1))
c Var 'aux2109' direct represents '0' with '-8073'
c Var 'aux2109' direct represents '1' with '8073'
c Var 'aux2109' order represents '1' with '1'
c Var 'aux2109' order represents '0' with '-8073'
c Encoding variable: aux2110 with domain: bool (representing constraint (1<=(aux732 + aux735 + aux736)))
c Var 'aux2110' direct represents '0' with '-8074'
c Var 'aux2110' direct represents '1' with '8074'
c Var 'aux2110' order represents '1' with '1'
c Var 'aux2110' order represents '0' with '-8074'
c Encoding variable: aux2111 with domain: bool (representing constraint ((aux738 + aux741 + aux742)<=1))
c Var 'aux2111' direct represents '0' with '-8075'
c Var 'aux2111' direct represents '1' with '8075'
c Var 'aux2111' order represents '1' with '1'
c Var 'aux2111' order represents '0' with '-8075'
c Encoding variable: aux2112 with domain: bool (representing constraint (1<=(aux738 + aux741 + aux742)))
c Var 'aux2112' direct represents '0' with '-8076'
c Var 'aux2112' direct represents '1' with '8076'
c Var 'aux2112' order represents '1' with '1'
c Var 'aux2112' order represents '0' with '-8076'
c Encoding variable: aux2113 with domain: bool (representing constraint ((aux744 + aux747 + aux748)<=1))
c Var 'aux2113' direct represents '0' with '-8077'
c Var 'aux2113' direct represents '1' with '8077'
c Var 'aux2113' order represents '1' with '1'
c Var 'aux2113' order represents '0' with '-8077'
c Encoding variable: aux2114 with domain: bool (representing constraint (1<=(aux744 + aux747 + aux748)))
c Var 'aux2114' direct represents '0' with '-8078'
c Var 'aux2114' direct represents '1' with '8078'
c Var 'aux2114' order represents '1' with '1'
c Var 'aux2114' order represents '0' with '-8078'
c Encoding variable: aux2115 with domain: bool (representing constraint ((aux750 + aux753 + aux754)<=1))
c Var 'aux2115' direct represents '0' with '-8079'
c Var 'aux2115' direct represents '1' with '8079'
c Var 'aux2115' order represents '1' with '1'
c Var 'aux2115' order represents '0' with '-8079'
c Encoding variable: aux2116 with domain: bool (representing constraint (1<=(aux750 + aux753 + aux754)))
c Var 'aux2116' direct represents '0' with '-8080'
c Var 'aux2116' direct represents '1' with '8080'
c Var 'aux2116' order represents '1' with '1'
c Var 'aux2116' order represents '0' with '-8080'
c Encoding variable: aux2117 with domain: bool (representing constraint ((aux756 + aux759 + aux760)<=1))
c Var 'aux2117' direct represents '0' with '-8081'
c Var 'aux2117' direct represents '1' with '8081'
c Var 'aux2117' order represents '1' with '1'
c Var 'aux2117' order represents '0' with '-8081'
c Encoding variable: aux2118 with domain: bool (representing constraint (1<=(aux756 + aux759 + aux760)))
c Var 'aux2118' direct represents '0' with '-8082'
c Var 'aux2118' direct represents '1' with '8082'
c Var 'aux2118' order represents '1' with '1'
c Var 'aux2118' order represents '0' with '-8082'
c Encoding variable: aux2119 with domain: bool (representing constraint ((aux762 + aux765 + aux766)<=1))
c Var 'aux2119' direct represents '0' with '-8083'
c Var 'aux2119' direct represents '1' with '8083'
c Var 'aux2119' order represents '1' with '1'
c Var 'aux2119' order represents '0' with '-8083'
c Encoding variable: aux2120 with domain: bool (representing constraint (1<=(aux762 + aux765 + aux766)))
c Var 'aux2120' direct represents '0' with '-8084'
c Var 'aux2120' direct represents '1' with '8084'
c Var 'aux2120' order represents '1' with '1'
c Var 'aux2120' order represents '0' with '-8084'
c Encoding variable: aux2121 with domain: bool (representing constraint ((aux768 + aux771 + aux772)<=1))
c Var 'aux2121' direct represents '0' with '-8085'
c Var 'aux2121' direct represents '1' with '8085'
c Var 'aux2121' order represents '1' with '1'
c Var 'aux2121' order represents '0' with '-8085'
c Encoding variable: aux2122 with domain: bool (representing constraint (1<=(aux768 + aux771 + aux772)))
c Var 'aux2122' direct represents '0' with '-8086'
c Var 'aux2122' direct represents '1' with '8086'
c Var 'aux2122' order represents '1' with '1'
c Var 'aux2122' order represents '0' with '-8086'
c Encoding variable: aux2123 with domain: bool (representing constraint ((aux774 + aux777 + aux778)<=1))
c Var 'aux2123' direct represents '0' with '-8087'
c Var 'aux2123' direct represents '1' with '8087'
c Var 'aux2123' order represents '1' with '1'
c Var 'aux2123' order represents '0' with '-8087'
c Encoding variable: aux2124 with domain: bool (representing constraint (1<=(aux774 + aux777 + aux778)))
c Var 'aux2124' direct represents '0' with '-8088'
c Var 'aux2124' direct represents '1' with '8088'
c Var 'aux2124' order represents '1' with '1'
c Var 'aux2124' order represents '0' with '-8088'
c Encoding variable: aux2125 with domain: bool (representing constraint ((aux780 + aux783 + aux784)<=1))
c Var 'aux2125' direct represents '0' with '-8089'
c Var 'aux2125' direct represents '1' with '8089'
c Var 'aux2125' order represents '1' with '1'
c Var 'aux2125' order represents '0' with '-8089'
c Encoding variable: aux2126 with domain: bool (representing constraint (1<=(aux780 + aux783 + aux784)))
c Var 'aux2126' direct represents '0' with '-8090'
c Var 'aux2126' direct represents '1' with '8090'
c Var 'aux2126' order represents '1' with '1'
c Var 'aux2126' order represents '0' with '-8090'
c Encoding variable: aux2127 with domain: bool (representing constraint ((aux786 + aux789 + aux790)<=1))
c Var 'aux2127' direct represents '0' with '-8091'
c Var 'aux2127' direct represents '1' with '8091'
c Var 'aux2127' order represents '1' with '1'
c Var 'aux2127' order represents '0' with '-8091'
c Encoding variable: aux2128 with domain: bool (representing constraint (1<=(aux786 + aux789 + aux790)))
c Var 'aux2128' direct represents '0' with '-8092'
c Var 'aux2128' direct represents '1' with '8092'
c Var 'aux2128' order represents '1' with '1'
c Var 'aux2128' order represents '0' with '-8092'
c Encoding variable: aux2129 with domain: bool (representing constraint ((aux792 + aux795 + aux796)<=1))
c Var 'aux2129' direct represents '0' with '-8093'
c Var 'aux2129' direct represents '1' with '8093'
c Var 'aux2129' order represents '1' with '1'
c Var 'aux2129' order represents '0' with '-8093'
c Encoding variable: aux2130 with domain: bool (representing constraint (1<=(aux792 + aux795 + aux796)))
c Var 'aux2130' direct represents '0' with '-8094'
c Var 'aux2130' direct represents '1' with '8094'
c Var 'aux2130' order represents '1' with '1'
c Var 'aux2130' order represents '0' with '-8094'
c Encoding variable: aux2131 with domain: bool (representing constraint ((aux798 + aux801 + aux802)<=1))
c Var 'aux2131' direct represents '0' with '-8095'
c Var 'aux2131' direct represents '1' with '8095'
c Var 'aux2131' order represents '1' with '1'
c Var 'aux2131' order represents '0' with '-8095'
c Encoding variable: aux2132 with domain: bool (representing constraint (1<=(aux798 + aux801 + aux802)))
c Var 'aux2132' direct represents '0' with '-8096'
c Var 'aux2132' direct represents '1' with '8096'
c Var 'aux2132' order represents '1' with '1'
c Var 'aux2132' order represents '0' with '-8096'
c Encoding variable: aux2133 with domain: bool (representing constraint ((aux804 + aux807 + aux808)<=1))
c Var 'aux2133' direct represents '0' with '-8097'
c Var 'aux2133' direct represents '1' with '8097'
c Var 'aux2133' order represents '1' with '1'
c Var 'aux2133' order represents '0' with '-8097'
c Encoding variable: aux2134 with domain: bool (representing constraint (1<=(aux804 + aux807 + aux808)))
c Var 'aux2134' direct represents '0' with '-8098'
c Var 'aux2134' direct represents '1' with '8098'
c Var 'aux2134' order represents '1' with '1'
c Var 'aux2134' order represents '0' with '-8098'
c Encoding variable: aux2135 with domain: bool (representing constraint ((aux810 + aux813 + aux814)<=1))
c Var 'aux2135' direct represents '0' with '-8099'
c Var 'aux2135' direct represents '1' with '8099'
c Var 'aux2135' order represents '1' with '1'
c Var 'aux2135' order represents '0' with '-8099'
c Encoding variable: aux2136 with domain: bool (representing constraint (1<=(aux810 + aux813 + aux814)))
c Var 'aux2136' direct represents '0' with '-8100'
c Var 'aux2136' direct represents '1' with '8100'
c Var 'aux2136' order represents '1' with '1'
c Var 'aux2136' order represents '0' with '-8100'
c Encoding variable: aux2137 with domain: bool (representing constraint ((aux816 + aux819 + aux820)<=1))
c Var 'aux2137' direct represents '0' with '-8101'
c Var 'aux2137' direct represents '1' with '8101'
c Var 'aux2137' order represents '1' with '1'
c Var 'aux2137' order represents '0' with '-8101'
c Encoding variable: aux2138 with domain: bool (representing constraint (1<=(aux816 + aux819 + aux820)))
c Var 'aux2138' direct represents '0' with '-8102'
c Var 'aux2138' direct represents '1' with '8102'
c Var 'aux2138' order represents '1' with '1'
c Var 'aux2138' order represents '0' with '-8102'
c Encoding variable: aux2139 with domain: bool (representing constraint ((aux822 + aux825 + aux826)<=1))
c Var 'aux2139' direct represents '0' with '-8103'
c Var 'aux2139' direct represents '1' with '8103'
c Var 'aux2139' order represents '1' with '1'
c Var 'aux2139' order represents '0' with '-8103'
c Encoding variable: aux2140 with domain: bool (representing constraint (1<=(aux822 + aux825 + aux826)))
c Var 'aux2140' direct represents '0' with '-8104'
c Var 'aux2140' direct represents '1' with '8104'
c Var 'aux2140' order represents '1' with '1'
c Var 'aux2140' order represents '0' with '-8104'
c Encoding variable: aux2141 with domain: bool (representing constraint ((aux828 + aux831 + aux832)<=1))
c Var 'aux2141' direct represents '0' with '-8105'
c Var 'aux2141' direct represents '1' with '8105'
c Var 'aux2141' order represents '1' with '1'
c Var 'aux2141' order represents '0' with '-8105'
c Encoding variable: aux2142 with domain: bool (representing constraint (1<=(aux828 + aux831 + aux832)))
c Var 'aux2142' direct represents '0' with '-8106'
c Var 'aux2142' direct represents '1' with '8106'
c Var 'aux2142' order represents '1' with '1'
c Var 'aux2142' order represents '0' with '-8106'
c Encoding variable: aux2143 with domain: bool (representing constraint ((aux834 + aux837 + aux838)<=1))
c Var 'aux2143' direct represents '0' with '-8107'
c Var 'aux2143' direct represents '1' with '8107'
c Var 'aux2143' order represents '1' with '1'
c Var 'aux2143' order represents '0' with '-8107'
c Encoding variable: aux2144 with domain: bool (representing constraint (1<=(aux834 + aux837 + aux838)))
c Var 'aux2144' direct represents '0' with '-8108'
c Var 'aux2144' direct represents '1' with '8108'
c Var 'aux2144' order represents '1' with '1'
c Var 'aux2144' order represents '0' with '-8108'
c Encoding variable: aux2145 with domain: bool (representing constraint ((aux840 + aux843 + aux844)<=1))
c Var 'aux2145' direct represents '0' with '-8109'
c Var 'aux2145' direct represents '1' with '8109'
c Var 'aux2145' order represents '1' with '1'
c Var 'aux2145' order represents '0' with '-8109'
c Encoding variable: aux2146 with domain: bool (representing constraint (1<=(aux840 + aux843 + aux844)))
c Var 'aux2146' direct represents '0' with '-8110'
c Var 'aux2146' direct represents '1' with '8110'
c Var 'aux2146' order represents '1' with '1'
c Var 'aux2146' order represents '0' with '-8110'
c Encoding variable: aux2147 with domain: bool (representing constraint ((aux846 + aux849 + aux850)<=1))
c Var 'aux2147' direct represents '0' with '-8111'
c Var 'aux2147' direct represents '1' with '8111'
c Var 'aux2147' order represents '1' with '1'
c Var 'aux2147' order represents '0' with '-8111'
c Encoding variable: aux2148 with domain: bool (representing constraint (1<=(aux846 + aux849 + aux850)))
c Var 'aux2148' direct represents '0' with '-8112'
c Var 'aux2148' direct represents '1' with '8112'
c Var 'aux2148' order represents '1' with '1'
c Var 'aux2148' order represents '0' with '-8112'
c Encoding variable: aux2149 with domain: bool (representing constraint ((aux852 + aux855 + aux856)<=1))
c Var 'aux2149' direct represents '0' with '-8113'
c Var 'aux2149' direct represents '1' with '8113'
c Var 'aux2149' order represents '1' with '1'
c Var 'aux2149' order represents '0' with '-8113'
c Encoding variable: aux2150 with domain: bool (representing constraint (1<=(aux852 + aux855 + aux856)))
c Var 'aux2150' direct represents '0' with '-8114'
c Var 'aux2150' direct represents '1' with '8114'
c Var 'aux2150' order represents '1' with '1'
c Var 'aux2150' order represents '0' with '-8114'
c Encoding variable: aux2151 with domain: bool (representing constraint ((aux858 + aux861 + aux862)<=1))
c Var 'aux2151' direct represents '0' with '-8115'
c Var 'aux2151' direct represents '1' with '8115'
c Var 'aux2151' order represents '1' with '1'
c Var 'aux2151' order represents '0' with '-8115'
c Encoding variable: aux2152 with domain: bool (representing constraint (1<=(aux858 + aux861 + aux862)))
c Var 'aux2152' direct represents '0' with '-8116'
c Var 'aux2152' direct represents '1' with '8116'
c Var 'aux2152' order represents '1' with '1'
c Var 'aux2152' order represents '0' with '-8116'
c Encoding variable: aux2153 with domain: bool (representing constraint ((aux864 + aux867 + aux868)<=1))
c Var 'aux2153' direct represents '0' with '-8117'
c Var 'aux2153' direct represents '1' with '8117'
c Var 'aux2153' order represents '1' with '1'
c Var 'aux2153' order represents '0' with '-8117'
c Encoding variable: aux2154 with domain: bool (representing constraint (1<=(aux864 + aux867 + aux868)))
c Var 'aux2154' direct represents '0' with '-8118'
c Var 'aux2154' direct represents '1' with '8118'
c Var 'aux2154' order represents '1' with '1'
c Var 'aux2154' order represents '0' with '-8118'
c Encoding variable: aux2155 with domain: bool (representing constraint ((aux870 + aux873 + aux874)<=1))
c Var 'aux2155' direct represents '0' with '-8119'
c Var 'aux2155' direct represents '1' with '8119'
c Var 'aux2155' order represents '1' with '1'
c Var 'aux2155' order represents '0' with '-8119'
c Encoding variable: aux2156 with domain: bool (representing constraint (1<=(aux870 + aux873 + aux874)))
c Var 'aux2156' direct represents '0' with '-8120'
c Var 'aux2156' direct represents '1' with '8120'
c Var 'aux2156' order represents '1' with '1'
c Var 'aux2156' order represents '0' with '-8120'
c Encoding variable: aux2157 with domain: bool (representing constraint ((aux876 + aux879 + aux880)<=1))
c Var 'aux2157' direct represents '0' with '-8121'
c Var 'aux2157' direct represents '1' with '8121'
c Var 'aux2157' order represents '1' with '1'
c Var 'aux2157' order represents '0' with '-8121'
c Encoding variable: aux2158 with domain: bool (representing constraint (1<=(aux876 + aux879 + aux880)))
c Var 'aux2158' direct represents '0' with '-8122'
c Var 'aux2158' direct represents '1' with '8122'
c Var 'aux2158' order represents '1' with '1'
c Var 'aux2158' order represents '0' with '-8122'
c Encoding variable: aux2159 with domain: bool (representing constraint ((aux882 + aux885 + aux886)<=1))
c Var 'aux2159' direct represents '0' with '-8123'
c Var 'aux2159' direct represents '1' with '8123'
c Var 'aux2159' order represents '1' with '1'
c Var 'aux2159' order represents '0' with '-8123'
c Encoding variable: aux2160 with domain: bool (representing constraint (1<=(aux882 + aux885 + aux886)))
c Var 'aux2160' direct represents '0' with '-8124'
c Var 'aux2160' direct represents '1' with '8124'
c Var 'aux2160' order represents '1' with '1'
c Var 'aux2160' order represents '0' with '-8124'
c Encoding variable: aux2161 with domain: bool (representing constraint ((aux888 + aux891 + aux892)<=1))
c Var 'aux2161' direct represents '0' with '-8125'
c Var 'aux2161' direct represents '1' with '8125'
c Var 'aux2161' order represents '1' with '1'
c Var 'aux2161' order represents '0' with '-8125'
c Encoding variable: aux2162 with domain: bool (representing constraint (1<=(aux888 + aux891 + aux892)))
c Var 'aux2162' direct represents '0' with '-8126'
c Var 'aux2162' direct represents '1' with '8126'
c Var 'aux2162' order represents '1' with '1'
c Var 'aux2162' order represents '0' with '-8126'
c Encoding variable: aux2163 with domain: bool (representing constraint ((aux894 + aux897 + aux898)<=1))
c Var 'aux2163' direct represents '0' with '-8127'
c Var 'aux2163' direct represents '1' with '8127'
c Var 'aux2163' order represents '1' with '1'
c Var 'aux2163' order represents '0' with '-8127'
c Encoding variable: aux2164 with domain: bool (representing constraint (1<=(aux894 + aux897 + aux898)))
c Var 'aux2164' direct represents '0' with '-8128'
c Var 'aux2164' direct represents '1' with '8128'
c Var 'aux2164' order represents '1' with '1'
c Var 'aux2164' order represents '0' with '-8128'
c Encoding variable: aux2165 with domain: bool (representing constraint ((aux900 + aux903 + aux904)<=1))
c Var 'aux2165' direct represents '0' with '-8129'
c Var 'aux2165' direct represents '1' with '8129'
c Var 'aux2165' order represents '1' with '1'
c Var 'aux2165' order represents '0' with '-8129'
c Encoding variable: aux2166 with domain: bool (representing constraint (1<=(aux900 + aux903 + aux904)))
c Var 'aux2166' direct represents '0' with '-8130'
c Var 'aux2166' direct represents '1' with '8130'
c Var 'aux2166' order represents '1' with '1'
c Var 'aux2166' order represents '0' with '-8130'
c Encoding variable: aux2167 with domain: bool (representing constraint ((aux906 + aux909 + aux910)<=1))
c Var 'aux2167' direct represents '0' with '-8131'
c Var 'aux2167' direct represents '1' with '8131'
c Var 'aux2167' order represents '1' with '1'
c Var 'aux2167' order represents '0' with '-8131'
c Encoding variable: aux2168 with domain: bool (representing constraint (1<=(aux906 + aux909 + aux910)))
c Var 'aux2168' direct represents '0' with '-8132'
c Var 'aux2168' direct represents '1' with '8132'
c Var 'aux2168' order represents '1' with '1'
c Var 'aux2168' order represents '0' with '-8132'
c Encoding variable: aux2169 with domain: bool (representing constraint ((aux912 + aux915 + aux916)<=1))
c Var 'aux2169' direct represents '0' with '-8133'
c Var 'aux2169' direct represents '1' with '8133'
c Var 'aux2169' order represents '1' with '1'
c Var 'aux2169' order represents '0' with '-8133'
c Encoding variable: aux2170 with domain: bool (representing constraint (1<=(aux912 + aux915 + aux916)))
c Var 'aux2170' direct represents '0' with '-8134'
c Var 'aux2170' direct represents '1' with '8134'
c Var 'aux2170' order represents '1' with '1'
c Var 'aux2170' order represents '0' with '-8134'
c Encoding variable: aux2171 with domain: bool (representing constraint ((aux918 + aux921 + aux922)<=1))
c Var 'aux2171' direct represents '0' with '-8135'
c Var 'aux2171' direct represents '1' with '8135'
c Var 'aux2171' order represents '1' with '1'
c Var 'aux2171' order represents '0' with '-8135'
c Encoding variable: aux2172 with domain: bool (representing constraint (1<=(aux918 + aux921 + aux922)))
c Var 'aux2172' direct represents '0' with '-8136'
c Var 'aux2172' direct represents '1' with '8136'
c Var 'aux2172' order represents '1' with '1'
c Var 'aux2172' order represents '0' with '-8136'
c Encoding variable: aux2173 with domain: bool (representing constraint ((aux924 + aux927 + aux928)<=1))
c Var 'aux2173' direct represents '0' with '-8137'
c Var 'aux2173' direct represents '1' with '8137'
c Var 'aux2173' order represents '1' with '1'
c Var 'aux2173' order represents '0' with '-8137'
c Encoding variable: aux2174 with domain: bool (representing constraint (1<=(aux924 + aux927 + aux928)))
c Var 'aux2174' direct represents '0' with '-8138'
c Var 'aux2174' direct represents '1' with '8138'
c Var 'aux2174' order represents '1' with '1'
c Var 'aux2174' order represents '0' with '-8138'
c Encoding variable: aux2175 with domain: bool (representing constraint ((aux930 + aux933 + aux934)<=1))
c Var 'aux2175' direct represents '0' with '-8139'
c Var 'aux2175' direct represents '1' with '8139'
c Var 'aux2175' order represents '1' with '1'
c Var 'aux2175' order represents '0' with '-8139'
c Encoding variable: aux2176 with domain: bool (representing constraint (1<=(aux930 + aux933 + aux934)))
c Var 'aux2176' direct represents '0' with '-8140'
c Var 'aux2176' direct represents '1' with '8140'
c Var 'aux2176' order represents '1' with '1'
c Var 'aux2176' order represents '0' with '-8140'
c Encoding variable: aux2177 with domain: bool (representing constraint ((aux936 + aux939 + aux940)<=1))
c Var 'aux2177' direct represents '0' with '-8141'
c Var 'aux2177' direct represents '1' with '8141'
c Var 'aux2177' order represents '1' with '1'
c Var 'aux2177' order represents '0' with '-8141'
c Encoding variable: aux2178 with domain: bool (representing constraint (1<=(aux936 + aux939 + aux940)))
c Var 'aux2178' direct represents '0' with '-8142'
c Var 'aux2178' direct represents '1' with '8142'
c Var 'aux2178' order represents '1' with '1'
c Var 'aux2178' order represents '0' with '-8142'
c Encoding variable: aux2179 with domain: bool (representing constraint ((aux942 + aux945 + aux946)<=1))
c Var 'aux2179' direct represents '0' with '-8143'
c Var 'aux2179' direct represents '1' with '8143'
c Var 'aux2179' order represents '1' with '1'
c Var 'aux2179' order represents '0' with '-8143'
c Encoding variable: aux2180 with domain: bool (representing constraint (1<=(aux942 + aux945 + aux946)))
c Var 'aux2180' direct represents '0' with '-8144'
c Var 'aux2180' direct represents '1' with '8144'
c Var 'aux2180' order represents '1' with '1'
c Var 'aux2180' order represents '0' with '-8144'
c Encoding variable: aux2181 with domain: bool (representing constraint ((aux948 + aux951 + aux952)<=1))
c Var 'aux2181' direct represents '0' with '-8145'
c Var 'aux2181' direct represents '1' with '8145'
c Var 'aux2181' order represents '1' with '1'
c Var 'aux2181' order represents '0' with '-8145'
c Encoding variable: aux2182 with domain: bool (representing constraint (1<=(aux948 + aux951 + aux952)))
c Var 'aux2182' direct represents '0' with '-8146'
c Var 'aux2182' direct represents '1' with '8146'
c Var 'aux2182' order represents '1' with '1'
c Var 'aux2182' order represents '0' with '-8146'
c Encoding variable: aux2183 with domain: bool (representing constraint ((aux954 + aux957 + aux958)<=1))
c Var 'aux2183' direct represents '0' with '-8147'
c Var 'aux2183' direct represents '1' with '8147'
c Var 'aux2183' order represents '1' with '1'
c Var 'aux2183' order represents '0' with '-8147'
c Encoding variable: aux2184 with domain: bool (representing constraint (1<=(aux954 + aux957 + aux958)))
c Var 'aux2184' direct represents '0' with '-8148'
c Var 'aux2184' direct represents '1' with '8148'
c Var 'aux2184' order represents '1' with '1'
c Var 'aux2184' order represents '0' with '-8148'
c Encoding variable: aux2185 with domain: bool (representing constraint ((aux960 + aux963 + aux964)<=1))
c Var 'aux2185' direct represents '0' with '-8149'
c Var 'aux2185' direct represents '1' with '8149'
c Var 'aux2185' order represents '1' with '1'
c Var 'aux2185' order represents '0' with '-8149'
c Encoding variable: aux2186 with domain: bool (representing constraint (1<=(aux960 + aux963 + aux964)))
c Var 'aux2186' direct represents '0' with '-8150'
c Var 'aux2186' direct represents '1' with '8150'
c Var 'aux2186' order represents '1' with '1'
c Var 'aux2186' order represents '0' with '-8150'
c Encoding variable: aux2187 with domain: bool (representing constraint ((aux966 + aux969 + aux970)<=1))
c Var 'aux2187' direct represents '0' with '-8151'
c Var 'aux2187' direct represents '1' with '8151'
c Var 'aux2187' order represents '1' with '1'
c Var 'aux2187' order represents '0' with '-8151'
c Encoding variable: aux2188 with domain: bool (representing constraint (1<=(aux966 + aux969 + aux970)))
c Var 'aux2188' direct represents '0' with '-8152'
c Var 'aux2188' direct represents '1' with '8152'
c Var 'aux2188' order represents '1' with '1'
c Var 'aux2188' order represents '0' with '-8152'
c Encoding variable: aux2189 with domain: bool (representing constraint ((aux972 + aux975 + aux976)<=1))
c Var 'aux2189' direct represents '0' with '-8153'
c Var 'aux2189' direct represents '1' with '8153'
c Var 'aux2189' order represents '1' with '1'
c Var 'aux2189' order represents '0' with '-8153'
c Encoding variable: aux2190 with domain: bool (representing constraint (1<=(aux972 + aux975 + aux976)))
c Var 'aux2190' direct represents '0' with '-8154'
c Var 'aux2190' direct represents '1' with '8154'
c Var 'aux2190' order represents '1' with '1'
c Var 'aux2190' order represents '0' with '-8154'
c Encoding variable: aux2191 with domain: bool (representing constraint ((aux978 + aux981 + aux982)<=1))
c Var 'aux2191' direct represents '0' with '-8155'
c Var 'aux2191' direct represents '1' with '8155'
c Var 'aux2191' order represents '1' with '1'
c Var 'aux2191' order represents '0' with '-8155'
c Encoding variable: aux2192 with domain: bool (representing constraint (1<=(aux978 + aux981 + aux982)))
c Var 'aux2192' direct represents '0' with '-8156'
c Var 'aux2192' direct represents '1' with '8156'
c Var 'aux2192' order represents '1' with '1'
c Var 'aux2192' order represents '0' with '-8156'
c Encoding variable: aux2193 with domain: bool (representing constraint ((aux984 + aux987 + aux988)<=1))
c Var 'aux2193' direct represents '0' with '-8157'
c Var 'aux2193' direct represents '1' with '8157'
c Var 'aux2193' order represents '1' with '1'
c Var 'aux2193' order represents '0' with '-8157'
c Encoding variable: aux2194 with domain: bool (representing constraint (1<=(aux984 + aux987 + aux988)))
c Var 'aux2194' direct represents '0' with '-8158'
c Var 'aux2194' direct represents '1' with '8158'
c Var 'aux2194' order represents '1' with '1'
c Var 'aux2194' order represents '0' with '-8158'
c Encoding variable: aux2195 with domain: bool (representing constraint ((aux990 + aux993 + aux994)<=1))
c Var 'aux2195' direct represents '0' with '-8159'
c Var 'aux2195' direct represents '1' with '8159'
c Var 'aux2195' order represents '1' with '1'
c Var 'aux2195' order represents '0' with '-8159'
c Encoding variable: aux2196 with domain: bool (representing constraint (1<=(aux990 + aux993 + aux994)))
c Var 'aux2196' direct represents '0' with '-8160'
c Var 'aux2196' direct represents '1' with '8160'
c Var 'aux2196' order represents '1' with '1'
c Var 'aux2196' order represents '0' with '-8160'
c Encoding variable: aux2197 with domain: bool (representing constraint ((aux996 + aux999 + aux1000)<=1))
c Var 'aux2197' direct represents '0' with '-8161'
c Var 'aux2197' direct represents '1' with '8161'
c Var 'aux2197' order represents '1' with '1'
c Var 'aux2197' order represents '0' with '-8161'
c Encoding variable: aux2198 with domain: bool (representing constraint (1<=(aux996 + aux999 + aux1000)))
c Var 'aux2198' direct represents '0' with '-8162'
c Var 'aux2198' direct represents '1' with '8162'
c Var 'aux2198' order represents '1' with '1'
c Var 'aux2198' order represents '0' with '-8162'
c Encoding variable: aux2199 with domain: bool (representing constraint ((aux1002 + aux1005 + aux1006)<=1))
c Var 'aux2199' direct represents '0' with '-8163'
c Var 'aux2199' direct represents '1' with '8163'
c Var 'aux2199' order represents '1' with '1'
c Var 'aux2199' order represents '0' with '-8163'
c Encoding variable: aux2200 with domain: bool (representing constraint (1<=(aux1002 + aux1005 + aux1006)))
c Var 'aux2200' direct represents '0' with '-8164'
c Var 'aux2200' direct represents '1' with '8164'
c Var 'aux2200' order represents '1' with '1'
c Var 'aux2200' order represents '0' with '-8164'
c Encoding variable: aux2201 with domain: bool (representing constraint ((aux1008 + aux1011 + aux1012)<=1))
c Var 'aux2201' direct represents '0' with '-8165'
c Var 'aux2201' direct represents '1' with '8165'
c Var 'aux2201' order represents '1' with '1'
c Var 'aux2201' order represents '0' with '-8165'
c Encoding variable: aux2202 with domain: bool (representing constraint (1<=(aux1008 + aux1011 + aux1012)))
c Var 'aux2202' direct represents '0' with '-8166'
c Var 'aux2202' direct represents '1' with '8166'
c Var 'aux2202' order represents '1' with '1'
c Var 'aux2202' order represents '0' with '-8166'
c Encoding variable: aux2203 with domain: bool (representing constraint ((aux1014 + aux1017 + aux1018)<=1))
c Var 'aux2203' direct represents '0' with '-8167'
c Var 'aux2203' direct represents '1' with '8167'
c Var 'aux2203' order represents '1' with '1'
c Var 'aux2203' order represents '0' with '-8167'
c Encoding variable: aux2204 with domain: bool (representing constraint (1<=(aux1014 + aux1017 + aux1018)))
c Var 'aux2204' direct represents '0' with '-8168'
c Var 'aux2204' direct represents '1' with '8168'
c Var 'aux2204' order represents '1' with '1'
c Var 'aux2204' order represents '0' with '-8168'
c Encoding variable: aux2205 with domain: bool (representing constraint ((aux1020 + aux1023 + aux1024)<=1))
c Var 'aux2205' direct represents '0' with '-8169'
c Var 'aux2205' direct represents '1' with '8169'
c Var 'aux2205' order represents '1' with '1'
c Var 'aux2205' order represents '0' with '-8169'
c Encoding variable: aux2206 with domain: bool (representing constraint (1<=(aux1020 + aux1023 + aux1024)))
c Var 'aux2206' direct represents '0' with '-8170'
c Var 'aux2206' direct represents '1' with '8170'
c Var 'aux2206' order represents '1' with '1'
c Var 'aux2206' order represents '0' with '-8170'
c Encoding variable: aux2207 with domain: bool (representing constraint ((aux1026 + aux1029 + aux1030)<=1))
c Var 'aux2207' direct represents '0' with '-8171'
c Var 'aux2207' direct represents '1' with '8171'
c Var 'aux2207' order represents '1' with '1'
c Var 'aux2207' order represents '0' with '-8171'
c Encoding variable: aux2208 with domain: bool (representing constraint (1<=(aux1026 + aux1029 + aux1030)))
c Var 'aux2208' direct represents '0' with '-8172'
c Var 'aux2208' direct represents '1' with '8172'
c Var 'aux2208' order represents '1' with '1'
c Var 'aux2208' order represents '0' with '-8172'
c Encoding variable: aux2209 with domain: bool (representing constraint ((aux1032 + aux1035 + aux1036)<=1))
c Var 'aux2209' direct represents '0' with '-8173'
c Var 'aux2209' direct represents '1' with '8173'
c Var 'aux2209' order represents '1' with '1'
c Var 'aux2209' order represents '0' with '-8173'
c Encoding variable: aux2210 with domain: bool (representing constraint (1<=(aux1032 + aux1035 + aux1036)))
c Var 'aux2210' direct represents '0' with '-8174'
c Var 'aux2210' direct represents '1' with '8174'
c Var 'aux2210' order represents '1' with '1'
c Var 'aux2210' order represents '0' with '-8174'
c Encoding variable: aux2211 with domain: bool (representing constraint ((aux1038 + aux1041 + aux1042)<=1))
c Var 'aux2211' direct represents '0' with '-8175'
c Var 'aux2211' direct represents '1' with '8175'
c Var 'aux2211' order represents '1' with '1'
c Var 'aux2211' order represents '0' with '-8175'
c Encoding variable: aux2212 with domain: bool (representing constraint (1<=(aux1038 + aux1041 + aux1042)))
c Var 'aux2212' direct represents '0' with '-8176'
c Var 'aux2212' direct represents '1' with '8176'
c Var 'aux2212' order represents '1' with '1'
c Var 'aux2212' order represents '0' with '-8176'
c Encoding variable: aux2213 with domain: bool (representing constraint ((aux1044 + aux1047 + aux1048)<=1))
c Var 'aux2213' direct represents '0' with '-8177'
c Var 'aux2213' direct represents '1' with '8177'
c Var 'aux2213' order represents '1' with '1'
c Var 'aux2213' order represents '0' with '-8177'
c Encoding variable: aux2214 with domain: bool (representing constraint (1<=(aux1044 + aux1047 + aux1048)))
c Var 'aux2214' direct represents '0' with '-8178'
c Var 'aux2214' direct represents '1' with '8178'
c Var 'aux2214' order represents '1' with '1'
c Var 'aux2214' order represents '0' with '-8178'
c Encoding variable: aux2215 with domain: bool (representing constraint ((aux1050 + aux1053 + aux1054)<=1))
c Var 'aux2215' direct represents '0' with '-8179'
c Var 'aux2215' direct represents '1' with '8179'
c Var 'aux2215' order represents '1' with '1'
c Var 'aux2215' order represents '0' with '-8179'
c Encoding variable: aux2216 with domain: bool (representing constraint (1<=(aux1050 + aux1053 + aux1054)))
c Var 'aux2216' direct represents '0' with '-8180'
c Var 'aux2216' direct represents '1' with '8180'
c Var 'aux2216' order represents '1' with '1'
c Var 'aux2216' order represents '0' with '-8180'
c Encoding variable: aux2217 with domain: bool (representing constraint ((aux1056 + aux1059 + aux1060)<=1))
c Var 'aux2217' direct represents '0' with '-8181'
c Var 'aux2217' direct represents '1' with '8181'
c Var 'aux2217' order represents '1' with '1'
c Var 'aux2217' order represents '0' with '-8181'
c Encoding variable: aux2218 with domain: bool (representing constraint (1<=(aux1056 + aux1059 + aux1060)))
c Var 'aux2218' direct represents '0' with '-8182'
c Var 'aux2218' direct represents '1' with '8182'
c Var 'aux2218' order represents '1' with '1'
c Var 'aux2218' order represents '0' with '-8182'
c Encoding variable: aux2219 with domain: bool (representing constraint ((aux1062 + aux1065 + aux1066)<=1))
c Var 'aux2219' direct represents '0' with '-8183'
c Var 'aux2219' direct represents '1' with '8183'
c Var 'aux2219' order represents '1' with '1'
c Var 'aux2219' order represents '0' with '-8183'
c Encoding variable: aux2220 with domain: bool (representing constraint (1<=(aux1062 + aux1065 + aux1066)))
c Var 'aux2220' direct represents '0' with '-8184'
c Var 'aux2220' direct represents '1' with '8184'
c Var 'aux2220' order represents '1' with '1'
c Var 'aux2220' order represents '0' with '-8184'
c Encoding variable: aux2221 with domain: bool (representing constraint ((aux1068 + aux1071 + aux1072)<=1))
c Var 'aux2221' direct represents '0' with '-8185'
c Var 'aux2221' direct represents '1' with '8185'
c Var 'aux2221' order represents '1' with '1'
c Var 'aux2221' order represents '0' with '-8185'
c Encoding variable: aux2222 with domain: bool (representing constraint (1<=(aux1068 + aux1071 + aux1072)))
c Var 'aux2222' direct represents '0' with '-8186'
c Var 'aux2222' direct represents '1' with '8186'
c Var 'aux2222' order represents '1' with '1'
c Var 'aux2222' order represents '0' with '-8186'
c Encoding variable: aux2223 with domain: bool (representing constraint ((aux1074 + aux1077 + aux1078)<=1))
c Var 'aux2223' direct represents '0' with '-8187'
c Var 'aux2223' direct represents '1' with '8187'
c Var 'aux2223' order represents '1' with '1'
c Var 'aux2223' order represents '0' with '-8187'
c Encoding variable: aux2224 with domain: bool (representing constraint (1<=(aux1074 + aux1077 + aux1078)))
c Var 'aux2224' direct represents '0' with '-8188'
c Var 'aux2224' direct represents '1' with '8188'
c Var 'aux2224' order represents '1' with '1'
c Var 'aux2224' order represents '0' with '-8188'
c Encoding variable: aux2225 with domain: bool (representing constraint ((aux1080 + aux1083 + aux1084)<=1))
c Var 'aux2225' direct represents '0' with '-8189'
c Var 'aux2225' direct represents '1' with '8189'
c Var 'aux2225' order represents '1' with '1'
c Var 'aux2225' order represents '0' with '-8189'
c Encoding variable: aux2226 with domain: bool (representing constraint (1<=(aux1080 + aux1083 + aux1084)))
c Var 'aux2226' direct represents '0' with '-8190'
c Var 'aux2226' direct represents '1' with '8190'
c Var 'aux2226' order represents '1' with '1'
c Var 'aux2226' order represents '0' with '-8190'
c Encoding variable: aux2227 with domain: bool (representing constraint ((aux1086 + aux1089 + aux1090)<=1))
c Var 'aux2227' direct represents '0' with '-8191'
c Var 'aux2227' direct represents '1' with '8191'
c Var 'aux2227' order represents '1' with '1'
c Var 'aux2227' order represents '0' with '-8191'
c Encoding variable: aux2228 with domain: bool (representing constraint (1<=(aux1086 + aux1089 + aux1090)))
c Var 'aux2228' direct represents '0' with '-8192'
c Var 'aux2228' direct represents '1' with '8192'
c Var 'aux2228' order represents '1' with '1'
c Var 'aux2228' order represents '0' with '-8192'
c Encoding variable: aux2229 with domain: bool (representing constraint ((aux1092 + aux1095 + aux1096)<=1))
c Var 'aux2229' direct represents '0' with '-8193'
c Var 'aux2229' direct represents '1' with '8193'
c Var 'aux2229' order represents '1' with '1'
c Var 'aux2229' order represents '0' with '-8193'
c Encoding variable: aux2230 with domain: bool (representing constraint (1<=(aux1092 + aux1095 + aux1096)))
c Var 'aux2230' direct represents '0' with '-8194'
c Var 'aux2230' direct represents '1' with '8194'
c Var 'aux2230' order represents '1' with '1'
c Var 'aux2230' order represents '0' with '-8194'
c Encoding variable: aux2231 with domain: bool (representing constraint ((aux1098 + aux1101 + aux1102)<=1))
c Var 'aux2231' direct represents '0' with '-8195'
c Var 'aux2231' direct represents '1' with '8195'
c Var 'aux2231' order represents '1' with '1'
c Var 'aux2231' order represents '0' with '-8195'
c Encoding variable: aux2232 with domain: bool (representing constraint (1<=(aux1098 + aux1101 + aux1102)))
c Var 'aux2232' direct represents '0' with '-8196'
c Var 'aux2232' direct represents '1' with '8196'
c Var 'aux2232' order represents '1' with '1'
c Var 'aux2232' order represents '0' with '-8196'
c Encoding variable: aux2233 with domain: bool (representing constraint ((aux1104 + aux1107 + aux1108)<=1))
c Var 'aux2233' direct represents '0' with '-8197'
c Var 'aux2233' direct represents '1' with '8197'
c Var 'aux2233' order represents '1' with '1'
c Var 'aux2233' order represents '0' with '-8197'
c Encoding variable: aux2234 with domain: bool (representing constraint (1<=(aux1104 + aux1107 + aux1108)))
c Var 'aux2234' direct represents '0' with '-8198'
c Var 'aux2234' direct represents '1' with '8198'
c Var 'aux2234' order represents '1' with '1'
c Var 'aux2234' order represents '0' with '-8198'
c Encoding variable: aux2235 with domain: bool (representing constraint ((aux1110 + aux1113 + aux1114)<=1))
c Var 'aux2235' direct represents '0' with '-8199'
c Var 'aux2235' direct represents '1' with '8199'
c Var 'aux2235' order represents '1' with '1'
c Var 'aux2235' order represents '0' with '-8199'
c Encoding variable: aux2236 with domain: bool (representing constraint (1<=(aux1110 + aux1113 + aux1114)))
c Var 'aux2236' direct represents '0' with '-8200'
c Var 'aux2236' direct represents '1' with '8200'
c Var 'aux2236' order represents '1' with '1'
c Var 'aux2236' order represents '0' with '-8200'
c Encoding variable: aux2237 with domain: bool (representing constraint ((aux1116 + aux1119 + aux1120)<=1))
c Var 'aux2237' direct represents '0' with '-8201'
c Var 'aux2237' direct represents '1' with '8201'
c Var 'aux2237' order represents '1' with '1'
c Var 'aux2237' order represents '0' with '-8201'
c Encoding variable: aux2238 with domain: bool (representing constraint (1<=(aux1116 + aux1119 + aux1120)))
c Var 'aux2238' direct represents '0' with '-8202'
c Var 'aux2238' direct represents '1' with '8202'
c Var 'aux2238' order represents '1' with '1'
c Var 'aux2238' order represents '0' with '-8202'
c Encoding variable: aux2239 with domain: bool (representing constraint ((aux1122 + aux1125 + aux1126)<=1))
c Var 'aux2239' direct represents '0' with '-8203'
c Var 'aux2239' direct represents '1' with '8203'
c Var 'aux2239' order represents '1' with '1'
c Var 'aux2239' order represents '0' with '-8203'
c Encoding variable: aux2240 with domain: bool (representing constraint (1<=(aux1122 + aux1125 + aux1126)))
c Var 'aux2240' direct represents '0' with '-8204'
c Var 'aux2240' direct represents '1' with '8204'
c Var 'aux2240' order represents '1' with '1'
c Var 'aux2240' order represents '0' with '-8204'
c Encoding variable: aux2241 with domain: bool (representing constraint ((aux1128 + aux1131 + aux1132)<=1))
c Var 'aux2241' direct represents '0' with '-8205'
c Var 'aux2241' direct represents '1' with '8205'
c Var 'aux2241' order represents '1' with '1'
c Var 'aux2241' order represents '0' with '-8205'
c Encoding variable: aux2242 with domain: bool (representing constraint (1<=(aux1128 + aux1131 + aux1132)))
c Var 'aux2242' direct represents '0' with '-8206'
c Var 'aux2242' direct represents '1' with '8206'
c Var 'aux2242' order represents '1' with '1'
c Var 'aux2242' order represents '0' with '-8206'
c Encoding variable: aux2243 with domain: bool (representing constraint ((aux1134 + aux1137 + aux1138)<=1))
c Var 'aux2243' direct represents '0' with '-8207'
c Var 'aux2243' direct represents '1' with '8207'
c Var 'aux2243' order represents '1' with '1'
c Var 'aux2243' order represents '0' with '-8207'
c Encoding variable: aux2244 with domain: bool (representing constraint (1<=(aux1134 + aux1137 + aux1138)))
c Var 'aux2244' direct represents '0' with '-8208'
c Var 'aux2244' direct represents '1' with '8208'
c Var 'aux2244' order represents '1' with '1'
c Var 'aux2244' order represents '0' with '-8208'
c Encoding variable: aux2245 with domain: bool (representing constraint ((aux1140 + aux1143 + aux1144)<=1))
c Var 'aux2245' direct represents '0' with '-8209'
c Var 'aux2245' direct represents '1' with '8209'
c Var 'aux2245' order represents '1' with '1'
c Var 'aux2245' order represents '0' with '-8209'
c Encoding variable: aux2246 with domain: bool (representing constraint (1<=(aux1140 + aux1143 + aux1144)))
c Var 'aux2246' direct represents '0' with '-8210'
c Var 'aux2246' direct represents '1' with '8210'
c Var 'aux2246' order represents '1' with '1'
c Var 'aux2246' order represents '0' with '-8210'
c Encoding variable: aux2247 with domain: bool (representing constraint ((aux1146 + aux1149 + aux1150)<=1))
c Var 'aux2247' direct represents '0' with '-8211'
c Var 'aux2247' direct represents '1' with '8211'
c Var 'aux2247' order represents '1' with '1'
c Var 'aux2247' order represents '0' with '-8211'
c Encoding variable: aux2248 with domain: bool (representing constraint (1<=(aux1146 + aux1149 + aux1150)))
c Var 'aux2248' direct represents '0' with '-8212'
c Var 'aux2248' direct represents '1' with '8212'
c Var 'aux2248' order represents '1' with '1'
c Var 'aux2248' order represents '0' with '-8212'
c Encoding variable: aux2249 with domain: bool (representing constraint ((aux1152 + aux1155 + aux1156)<=1))
c Var 'aux2249' direct represents '0' with '-8213'
c Var 'aux2249' direct represents '1' with '8213'
c Var 'aux2249' order represents '1' with '1'
c Var 'aux2249' order represents '0' with '-8213'
c Encoding variable: aux2250 with domain: bool (representing constraint (1<=(aux1152 + aux1155 + aux1156)))
c Var 'aux2250' direct represents '0' with '-8214'
c Var 'aux2250' direct represents '1' with '8214'
c Var 'aux2250' order represents '1' with '1'
c Var 'aux2250' order represents '0' with '-8214'
c Encoding variable: aux2251 with domain: bool (representing constraint ((aux1158 + aux1161 + aux1162)<=1))
c Var 'aux2251' direct represents '0' with '-8215'
c Var 'aux2251' direct represents '1' with '8215'
c Var 'aux2251' order represents '1' with '1'
c Var 'aux2251' order represents '0' with '-8215'
c Encoding variable: aux2252 with domain: bool (representing constraint (1<=(aux1158 + aux1161 + aux1162)))
c Var 'aux2252' direct represents '0' with '-8216'
c Var 'aux2252' direct represents '1' with '8216'
c Var 'aux2252' order represents '1' with '1'
c Var 'aux2252' order represents '0' with '-8216'
c Encoding variable: aux2253 with domain: bool (representing constraint ((aux1164 + aux1167 + aux1168)<=1))
c Var 'aux2253' direct represents '0' with '-8217'
c Var 'aux2253' direct represents '1' with '8217'
c Var 'aux2253' order represents '1' with '1'
c Var 'aux2253' order represents '0' with '-8217'
c Encoding variable: aux2254 with domain: bool (representing constraint (1<=(aux1164 + aux1167 + aux1168)))
c Var 'aux2254' direct represents '0' with '-8218'
c Var 'aux2254' direct represents '1' with '8218'
c Var 'aux2254' order represents '1' with '1'
c Var 'aux2254' order represents '0' with '-8218'
c Encoding variable: aux2255 with domain: bool (representing constraint ((aux1170 + aux1173 + aux1174)<=1))
c Var 'aux2255' direct represents '0' with '-8219'
c Var 'aux2255' direct represents '1' with '8219'
c Var 'aux2255' order represents '1' with '1'
c Var 'aux2255' order represents '0' with '-8219'
c Encoding variable: aux2256 with domain: bool (representing constraint (1<=(aux1170 + aux1173 + aux1174)))
c Var 'aux2256' direct represents '0' with '-8220'
c Var 'aux2256' direct represents '1' with '8220'
c Var 'aux2256' order represents '1' with '1'
c Var 'aux2256' order represents '0' with '-8220'
c Encoding variable: aux2257 with domain: bool (representing constraint ((aux1176 + aux1179 + aux1180)<=1))
c Var 'aux2257' direct represents '0' with '-8221'
c Var 'aux2257' direct represents '1' with '8221'
c Var 'aux2257' order represents '1' with '1'
c Var 'aux2257' order represents '0' with '-8221'
c Encoding variable: aux2258 with domain: bool (representing constraint (1<=(aux1176 + aux1179 + aux1180)))
c Var 'aux2258' direct represents '0' with '-8222'
c Var 'aux2258' direct represents '1' with '8222'
c Var 'aux2258' order represents '1' with '1'
c Var 'aux2258' order represents '0' with '-8222'
c Encoding variable: aux2259 with domain: bool (representing constraint ((aux1182 + aux1185 + aux1186)<=1))
c Var 'aux2259' direct represents '0' with '-8223'
c Var 'aux2259' direct represents '1' with '8223'
c Var 'aux2259' order represents '1' with '1'
c Var 'aux2259' order represents '0' with '-8223'
c Encoding variable: aux2260 with domain: bool (representing constraint (1<=(aux1182 + aux1185 + aux1186)))
c Var 'aux2260' direct represents '0' with '-8224'
c Var 'aux2260' direct represents '1' with '8224'
c Var 'aux2260' order represents '1' with '1'
c Var 'aux2260' order represents '0' with '-8224'
c Encoding variable: aux2261 with domain: bool (representing constraint ((aux1188 + aux1191 + aux1192)<=1))
c Var 'aux2261' direct represents '0' with '-8225'
c Var 'aux2261' direct represents '1' with '8225'
c Var 'aux2261' order represents '1' with '1'
c Var 'aux2261' order represents '0' with '-8225'
c Encoding variable: aux2262 with domain: bool (representing constraint (1<=(aux1188 + aux1191 + aux1192)))
c Var 'aux2262' direct represents '0' with '-8226'
c Var 'aux2262' direct represents '1' with '8226'
c Var 'aux2262' order represents '1' with '1'
c Var 'aux2262' order represents '0' with '-8226'
c Encoding variable: aux2263 with domain: bool (representing constraint ((aux1194 + aux1197 + aux1198)<=1))
c Var 'aux2263' direct represents '0' with '-8227'
c Var 'aux2263' direct represents '1' with '8227'
c Var 'aux2263' order represents '1' with '1'
c Var 'aux2263' order represents '0' with '-8227'
c Encoding variable: aux2264 with domain: bool (representing constraint (1<=(aux1194 + aux1197 + aux1198)))
c Var 'aux2264' direct represents '0' with '-8228'
c Var 'aux2264' direct represents '1' with '8228'
c Var 'aux2264' order represents '1' with '1'
c Var 'aux2264' order represents '0' with '-8228'
c Encoding variable: aux2265 with domain: bool (representing constraint ((aux1200 + aux1203 + aux1204)<=1))
c Var 'aux2265' direct represents '0' with '-8229'
c Var 'aux2265' direct represents '1' with '8229'
c Var 'aux2265' order represents '1' with '1'
c Var 'aux2265' order represents '0' with '-8229'
c Encoding variable: aux2266 with domain: bool (representing constraint (1<=(aux1200 + aux1203 + aux1204)))
c Var 'aux2266' direct represents '0' with '-8230'
c Var 'aux2266' direct represents '1' with '8230'
c Var 'aux2266' order represents '1' with '1'
c Var 'aux2266' order represents '0' with '-8230'
c Encoding variable: aux2267 with domain: bool (representing constraint ((aux1206 + aux1209 + aux1210)<=1))
c Var 'aux2267' direct represents '0' with '-8231'
c Var 'aux2267' direct represents '1' with '8231'
c Var 'aux2267' order represents '1' with '1'
c Var 'aux2267' order represents '0' with '-8231'
c Encoding variable: aux2268 with domain: bool (representing constraint (1<=(aux1206 + aux1209 + aux1210)))
c Var 'aux2268' direct represents '0' with '-8232'
c Var 'aux2268' direct represents '1' with '8232'
c Var 'aux2268' order represents '1' with '1'
c Var 'aux2268' order represents '0' with '-8232'
c Encoding variable: aux2269 with domain: bool (representing constraint ((aux1212 + aux1215 + aux1216)<=1))
c Var 'aux2269' direct represents '0' with '-8233'
c Var 'aux2269' direct represents '1' with '8233'
c Var 'aux2269' order represents '1' with '1'
c Var 'aux2269' order represents '0' with '-8233'
c Encoding variable: aux2270 with domain: bool (representing constraint (1<=(aux1212 + aux1215 + aux1216)))
c Var 'aux2270' direct represents '0' with '-8234'
c Var 'aux2270' direct represents '1' with '8234'
c Var 'aux2270' order represents '1' with '1'
c Var 'aux2270' order represents '0' with '-8234'
c Encoding variable: aux2271 with domain: bool (representing constraint ((aux1218 + aux1221 + aux1222)<=1))
c Var 'aux2271' direct represents '0' with '-8235'
c Var 'aux2271' direct represents '1' with '8235'
c Var 'aux2271' order represents '1' with '1'
c Var 'aux2271' order represents '0' with '-8235'
c Encoding variable: aux2272 with domain: bool (representing constraint (1<=(aux1218 + aux1221 + aux1222)))
c Var 'aux2272' direct represents '0' with '-8236'
c Var 'aux2272' direct represents '1' with '8236'
c Var 'aux2272' order represents '1' with '1'
c Var 'aux2272' order represents '0' with '-8236'
c Encoding variable: aux2273 with domain: bool (representing constraint ((aux1224 + aux1227 + aux1228)<=1))
c Var 'aux2273' direct represents '0' with '-8237'
c Var 'aux2273' direct represents '1' with '8237'
c Var 'aux2273' order represents '1' with '1'
c Var 'aux2273' order represents '0' with '-8237'
c Encoding variable: aux2274 with domain: bool (representing constraint (1<=(aux1224 + aux1227 + aux1228)))
c Var 'aux2274' direct represents '0' with '-8238'
c Var 'aux2274' direct represents '1' with '8238'
c Var 'aux2274' order represents '1' with '1'
c Var 'aux2274' order represents '0' with '-8238'
c Encoding variable: aux2275 with domain: bool (representing constraint ((aux1230 + aux1233 + aux1234)<=1))
c Var 'aux2275' direct represents '0' with '-8239'
c Var 'aux2275' direct represents '1' with '8239'
c Var 'aux2275' order represents '1' with '1'
c Var 'aux2275' order represents '0' with '-8239'
c Encoding variable: aux2276 with domain: bool (representing constraint (1<=(aux1230 + aux1233 + aux1234)))
c Var 'aux2276' direct represents '0' with '-8240'
c Var 'aux2276' direct represents '1' with '8240'
c Var 'aux2276' order represents '1' with '1'
c Var 'aux2276' order represents '0' with '-8240'
c Encoding variable: aux2277 with domain: bool (representing constraint ((aux1236 + aux1239 + aux1240)<=1))
c Var 'aux2277' direct represents '0' with '-8241'
c Var 'aux2277' direct represents '1' with '8241'
c Var 'aux2277' order represents '1' with '1'
c Var 'aux2277' order represents '0' with '-8241'
c Encoding variable: aux2278 with domain: bool (representing constraint (1<=(aux1236 + aux1239 + aux1240)))
c Var 'aux2278' direct represents '0' with '-8242'
c Var 'aux2278' direct represents '1' with '8242'
c Var 'aux2278' order represents '1' with '1'
c Var 'aux2278' order represents '0' with '-8242'
c Encoding variable: aux2279 with domain: bool (representing constraint ((aux1242 + aux1245 + aux1246)<=1))
c Var 'aux2279' direct represents '0' with '-8243'
c Var 'aux2279' direct represents '1' with '8243'
c Var 'aux2279' order represents '1' with '1'
c Var 'aux2279' order represents '0' with '-8243'
c Encoding variable: aux2280 with domain: bool (representing constraint (1<=(aux1242 + aux1245 + aux1246)))
c Var 'aux2280' direct represents '0' with '-8244'
c Var 'aux2280' direct represents '1' with '8244'
c Var 'aux2280' order represents '1' with '1'
c Var 'aux2280' order represents '0' with '-8244'
c Encoding variable: aux2281 with domain: bool (representing constraint ((aux1248 + aux1251 + aux1252)<=1))
c Var 'aux2281' direct represents '0' with '-8245'
c Var 'aux2281' direct represents '1' with '8245'
c Var 'aux2281' order represents '1' with '1'
c Var 'aux2281' order represents '0' with '-8245'
c Encoding variable: aux2282 with domain: bool (representing constraint (1<=(aux1248 + aux1251 + aux1252)))
c Var 'aux2282' direct represents '0' with '-8246'
c Var 'aux2282' direct represents '1' with '8246'
c Var 'aux2282' order represents '1' with '1'
c Var 'aux2282' order represents '0' with '-8246'
c Encoding variable: aux2283 with domain: bool (representing constraint ((aux1254 + aux1257 + aux1258)<=1))
c Var 'aux2283' direct represents '0' with '-8247'
c Var 'aux2283' direct represents '1' with '8247'
c Var 'aux2283' order represents '1' with '1'
c Var 'aux2283' order represents '0' with '-8247'
c Encoding variable: aux2284 with domain: bool (representing constraint (1<=(aux1254 + aux1257 + aux1258)))
c Var 'aux2284' direct represents '0' with '-8248'
c Var 'aux2284' direct represents '1' with '8248'
c Var 'aux2284' order represents '1' with '1'
c Var 'aux2284' order represents '0' with '-8248'
c Encoding variable: aux2285 with domain: bool (representing constraint ((aux1260 + aux1263 + aux1264)<=1))
c Var 'aux2285' direct represents '0' with '-8249'
c Var 'aux2285' direct represents '1' with '8249'
c Var 'aux2285' order represents '1' with '1'
c Var 'aux2285' order represents '0' with '-8249'
c Encoding variable: aux2286 with domain: bool (representing constraint (1<=(aux1260 + aux1263 + aux1264)))
c Var 'aux2286' direct represents '0' with '-8250'
c Var 'aux2286' direct represents '1' with '8250'
c Var 'aux2286' order represents '1' with '1'
c Var 'aux2286' order represents '0' with '-8250'
c Encoding variable: aux2287 with domain: bool (representing constraint ((aux1266 + aux1269 + aux1270)<=1))
c Var 'aux2287' direct represents '0' with '-8251'
c Var 'aux2287' direct represents '1' with '8251'
c Var 'aux2287' order represents '1' with '1'
c Var 'aux2287' order represents '0' with '-8251'
c Encoding variable: aux2288 with domain: bool (representing constraint (1<=(aux1266 + aux1269 + aux1270)))
c Var 'aux2288' direct represents '0' with '-8252'
c Var 'aux2288' direct represents '1' with '8252'
c Var 'aux2288' order represents '1' with '1'
c Var 'aux2288' order represents '0' with '-8252'
c Encoding variable: aux2289 with domain: bool (representing constraint ((aux1272 + aux1275 + aux1276)<=1))
c Var 'aux2289' direct represents '0' with '-8253'
c Var 'aux2289' direct represents '1' with '8253'
c Var 'aux2289' order represents '1' with '1'
c Var 'aux2289' order represents '0' with '-8253'
c Encoding variable: aux2290 with domain: bool (representing constraint (1<=(aux1272 + aux1275 + aux1276)))
c Var 'aux2290' direct represents '0' with '-8254'
c Var 'aux2290' direct represents '1' with '8254'
c Var 'aux2290' order represents '1' with '1'
c Var 'aux2290' order represents '0' with '-8254'
c Encoding variable: aux2291 with domain: bool (representing constraint ((aux1278 + aux1281 + aux1282)<=1))
c Var 'aux2291' direct represents '0' with '-8255'
c Var 'aux2291' direct represents '1' with '8255'
c Var 'aux2291' order represents '1' with '1'
c Var 'aux2291' order represents '0' with '-8255'
c Encoding variable: aux2292 with domain: bool (representing constraint (1<=(aux1278 + aux1281 + aux1282)))
c Var 'aux2292' direct represents '0' with '-8256'
c Var 'aux2292' direct represents '1' with '8256'
c Var 'aux2292' order represents '1' with '1'
c Var 'aux2292' order represents '0' with '-8256'
c Encoding variable: aux2293 with domain: bool (representing constraint ((aux1284 + aux1287 + aux1288)<=1))
c Var 'aux2293' direct represents '0' with '-8257'
c Var 'aux2293' direct represents '1' with '8257'
c Var 'aux2293' order represents '1' with '1'
c Var 'aux2293' order represents '0' with '-8257'
c Encoding variable: aux2294 with domain: bool (representing constraint (1<=(aux1284 + aux1287 + aux1288)))
c Var 'aux2294' direct represents '0' with '-8258'
c Var 'aux2294' direct represents '1' with '8258'
c Var 'aux2294' order represents '1' with '1'
c Var 'aux2294' order represents '0' with '-8258'
c Encoding variable: aux2295 with domain: bool (representing constraint ((aux1290 + aux1293 + aux1294)<=1))
c Var 'aux2295' direct represents '0' with '-8259'
c Var 'aux2295' direct represents '1' with '8259'
c Var 'aux2295' order represents '1' with '1'
c Var 'aux2295' order represents '0' with '-8259'
c Encoding variable: aux2296 with domain: bool (representing constraint (1<=(aux1290 + aux1293 + aux1294)))
c Var 'aux2296' direct represents '0' with '-8260'
c Var 'aux2296' direct represents '1' with '8260'
c Var 'aux2296' order represents '1' with '1'
c Var 'aux2296' order represents '0' with '-8260'
c Encoding variable: aux2297 with domain: bool (representing constraint ((aux1296 + aux1299 + aux1300)<=1))
c Var 'aux2297' direct represents '0' with '-8261'
c Var 'aux2297' direct represents '1' with '8261'
c Var 'aux2297' order represents '1' with '1'
c Var 'aux2297' order represents '0' with '-8261'
c Encoding variable: aux2298 with domain: bool (representing constraint (1<=(aux1296 + aux1299 + aux1300)))
c Var 'aux2298' direct represents '0' with '-8262'
c Var 'aux2298' direct represents '1' with '8262'
c Var 'aux2298' order represents '1' with '1'
c Var 'aux2298' order represents '0' with '-8262'
c Encoding variable: aux2299 with domain: bool (representing constraint ((aux1302 + aux1305 + aux1306)<=1))
c Var 'aux2299' direct represents '0' with '-8263'
c Var 'aux2299' direct represents '1' with '8263'
c Var 'aux2299' order represents '1' with '1'
c Var 'aux2299' order represents '0' with '-8263'
c Encoding variable: aux2300 with domain: bool (representing constraint (1<=(aux1302 + aux1305 + aux1306)))
c Var 'aux2300' direct represents '0' with '-8264'
c Var 'aux2300' direct represents '1' with '8264'
c Var 'aux2300' order represents '1' with '1'
c Var 'aux2300' order represents '0' with '-8264'
c Encoding variable: aux2301 with domain: bool (representing constraint ((aux1308 + aux1311 + aux1312)<=1))
c Var 'aux2301' direct represents '0' with '-8265'
c Var 'aux2301' direct represents '1' with '8265'
c Var 'aux2301' order represents '1' with '1'
c Var 'aux2301' order represents '0' with '-8265'
c Encoding variable: aux2302 with domain: bool (representing constraint (1<=(aux1308 + aux1311 + aux1312)))
c Var 'aux2302' direct represents '0' with '-8266'
c Var 'aux2302' direct represents '1' with '8266'
c Var 'aux2302' order represents '1' with '1'
c Var 'aux2302' order represents '0' with '-8266'
c Encoding variable: aux2303 with domain: bool (representing constraint ((aux1314 + aux1317 + aux1318)<=1))
c Var 'aux2303' direct represents '0' with '-8267'
c Var 'aux2303' direct represents '1' with '8267'
c Var 'aux2303' order represents '1' with '1'
c Var 'aux2303' order represents '0' with '-8267'
c Encoding variable: aux2304 with domain: bool (representing constraint (1<=(aux1314 + aux1317 + aux1318)))
c Var 'aux2304' direct represents '0' with '-8268'
c Var 'aux2304' direct represents '1' with '8268'
c Var 'aux2304' order represents '1' with '1'
c Var 'aux2304' order represents '0' with '-8268'
c Encoding variable: aux2305 with domain: bool (representing constraint ((aux1320 + aux1323 + aux1324)<=1))
c Var 'aux2305' direct represents '0' with '-8269'
c Var 'aux2305' direct represents '1' with '8269'
c Var 'aux2305' order represents '1' with '1'
c Var 'aux2305' order represents '0' with '-8269'
c Encoding variable: aux2306 with domain: bool (representing constraint (1<=(aux1320 + aux1323 + aux1324)))
c Var 'aux2306' direct represents '0' with '-8270'
c Var 'aux2306' direct represents '1' with '8270'
c Var 'aux2306' order represents '1' with '1'
c Var 'aux2306' order represents '0' with '-8270'
c Encoding variable: aux2307 with domain: bool (representing constraint ((aux1326 + aux1329 + aux1330)<=1))
c Var 'aux2307' direct represents '0' with '-8271'
c Var 'aux2307' direct represents '1' with '8271'
c Var 'aux2307' order represents '1' with '1'
c Var 'aux2307' order represents '0' with '-8271'
c Encoding variable: aux2308 with domain: bool (representing constraint (1<=(aux1326 + aux1329 + aux1330)))
c Var 'aux2308' direct represents '0' with '-8272'
c Var 'aux2308' direct represents '1' with '8272'
c Var 'aux2308' order represents '1' with '1'
c Var 'aux2308' order represents '0' with '-8272'
c Encoding variable: aux2309 with domain: bool (representing constraint ((aux1332 + aux1335 + aux1336)<=1))
c Var 'aux2309' direct represents '0' with '-8273'
c Var 'aux2309' direct represents '1' with '8273'
c Var 'aux2309' order represents '1' with '1'
c Var 'aux2309' order represents '0' with '-8273'
c Encoding variable: aux2310 with domain: bool (representing constraint (1<=(aux1332 + aux1335 + aux1336)))
c Var 'aux2310' direct represents '0' with '-8274'
c Var 'aux2310' direct represents '1' with '8274'
c Var 'aux2310' order represents '1' with '1'
c Var 'aux2310' order represents '0' with '-8274'
c Encoding variable: aux2311 with domain: bool (representing constraint ((aux1338 + aux1341 + aux1342)<=1))
c Var 'aux2311' direct represents '0' with '-8275'
c Var 'aux2311' direct represents '1' with '8275'
c Var 'aux2311' order represents '1' with '1'
c Var 'aux2311' order represents '0' with '-8275'
c Encoding variable: aux2312 with domain: bool (representing constraint (1<=(aux1338 + aux1341 + aux1342)))
c Var 'aux2312' direct represents '0' with '-8276'
c Var 'aux2312' direct represents '1' with '8276'
c Var 'aux2312' order represents '1' with '1'
c Var 'aux2312' order represents '0' with '-8276'
c Encoding variable: aux2313 with domain: bool (representing constraint ((aux1344 + aux1347 + aux1348)<=1))
c Var 'aux2313' direct represents '0' with '-8277'
c Var 'aux2313' direct represents '1' with '8277'
c Var 'aux2313' order represents '1' with '1'
c Var 'aux2313' order represents '0' with '-8277'
c Encoding variable: aux2314 with domain: bool (representing constraint (1<=(aux1344 + aux1347 + aux1348)))
c Var 'aux2314' direct represents '0' with '-8278'
c Var 'aux2314' direct represents '1' with '8278'
c Var 'aux2314' order represents '1' with '1'
c Var 'aux2314' order represents '0' with '-8278'
c Encoding variable: aux2315 with domain: bool (representing constraint ((aux1350 + aux1353 + aux1354)<=1))
c Var 'aux2315' direct represents '0' with '-8279'
c Var 'aux2315' direct represents '1' with '8279'
c Var 'aux2315' order represents '1' with '1'
c Var 'aux2315' order represents '0' with '-8279'
c Encoding variable: aux2316 with domain: bool (representing constraint (1<=(aux1350 + aux1353 + aux1354)))
c Var 'aux2316' direct represents '0' with '-8280'
c Var 'aux2316' direct represents '1' with '8280'
c Var 'aux2316' order represents '1' with '1'
c Var 'aux2316' order represents '0' with '-8280'
c Encoding variable: aux2317 with domain: bool (representing constraint ((aux1356 + aux1359 + aux1360)<=1))
c Var 'aux2317' direct represents '0' with '-8281'
c Var 'aux2317' direct represents '1' with '8281'
c Var 'aux2317' order represents '1' with '1'
c Var 'aux2317' order represents '0' with '-8281'
c Encoding variable: aux2318 with domain: bool (representing constraint (1<=(aux1356 + aux1359 + aux1360)))
c Var 'aux2318' direct represents '0' with '-8282'
c Var 'aux2318' direct represents '1' with '8282'
c Var 'aux2318' order represents '1' with '1'
c Var 'aux2318' order represents '0' with '-8282'
c Encoding variable: aux2319 with domain: bool (representing constraint ((aux1362 + aux1365 + aux1366)<=1))
c Var 'aux2319' direct represents '0' with '-8283'
c Var 'aux2319' direct represents '1' with '8283'
c Var 'aux2319' order represents '1' with '1'
c Var 'aux2319' order represents '0' with '-8283'
c Encoding variable: aux2320 with domain: bool (representing constraint (1<=(aux1362 + aux1365 + aux1366)))
c Var 'aux2320' direct represents '0' with '-8284'
c Var 'aux2320' direct represents '1' with '8284'
c Var 'aux2320' order represents '1' with '1'
c Var 'aux2320' order represents '0' with '-8284'
c Encoding variable: aux2321 with domain: bool (representing constraint ((aux1368 + aux1371 + aux1372)<=1))
c Var 'aux2321' direct represents '0' with '-8285'
c Var 'aux2321' direct represents '1' with '8285'
c Var 'aux2321' order represents '1' with '1'
c Var 'aux2321' order represents '0' with '-8285'
c Encoding variable: aux2322 with domain: bool (representing constraint (1<=(aux1368 + aux1371 + aux1372)))
c Var 'aux2322' direct represents '0' with '-8286'
c Var 'aux2322' direct represents '1' with '8286'
c Var 'aux2322' order represents '1' with '1'
c Var 'aux2322' order represents '0' with '-8286'
c Encoding variable: aux2323 with domain: bool (representing constraint ((aux1374 + aux1377 + aux1378)<=1))
c Var 'aux2323' direct represents '0' with '-8287'
c Var 'aux2323' direct represents '1' with '8287'
c Var 'aux2323' order represents '1' with '1'
c Var 'aux2323' order represents '0' with '-8287'
c Encoding variable: aux2324 with domain: bool (representing constraint (1<=(aux1374 + aux1377 + aux1378)))
c Var 'aux2324' direct represents '0' with '-8288'
c Var 'aux2324' direct represents '1' with '8288'
c Var 'aux2324' order represents '1' with '1'
c Var 'aux2324' order represents '0' with '-8288'
c Encoding variable: aux2325 with domain: bool (representing constraint ((aux1380 + aux1383 + aux1384)<=1))
c Var 'aux2325' direct represents '0' with '-8289'
c Var 'aux2325' direct represents '1' with '8289'
c Var 'aux2325' order represents '1' with '1'
c Var 'aux2325' order represents '0' with '-8289'
c Encoding variable: aux2326 with domain: bool (representing constraint (1<=(aux1380 + aux1383 + aux1384)))
c Var 'aux2326' direct represents '0' with '-8290'
c Var 'aux2326' direct represents '1' with '8290'
c Var 'aux2326' order represents '1' with '1'
c Var 'aux2326' order represents '0' with '-8290'
c Encoding variable: aux2327 with domain: bool (representing constraint ((aux1386 + aux1389 + aux1390)<=1))
c Var 'aux2327' direct represents '0' with '-8291'
c Var 'aux2327' direct represents '1' with '8291'
c Var 'aux2327' order represents '1' with '1'
c Var 'aux2327' order represents '0' with '-8291'
c Encoding variable: aux2328 with domain: bool (representing constraint (1<=(aux1386 + aux1389 + aux1390)))
c Var 'aux2328' direct represents '0' with '-8292'
c Var 'aux2328' direct represents '1' with '8292'
c Var 'aux2328' order represents '1' with '1'
c Var 'aux2328' order represents '0' with '-8292'
c Encoding variable: aux2329 with domain: bool (representing constraint ((aux1392 + aux1395 + aux1396)<=1))
c Var 'aux2329' direct represents '0' with '-8293'
c Var 'aux2329' direct represents '1' with '8293'
c Var 'aux2329' order represents '1' with '1'
c Var 'aux2329' order represents '0' with '-8293'
c Encoding variable: aux2330 with domain: bool (representing constraint (1<=(aux1392 + aux1395 + aux1396)))
c Var 'aux2330' direct represents '0' with '-8294'
c Var 'aux2330' direct represents '1' with '8294'
c Var 'aux2330' order represents '1' with '1'
c Var 'aux2330' order represents '0' with '-8294'
c Encoding variable: aux2331 with domain: bool (representing constraint ((aux1398 + aux1401 + aux1402)<=1))
c Var 'aux2331' direct represents '0' with '-8295'
c Var 'aux2331' direct represents '1' with '8295'
c Var 'aux2331' order represents '1' with '1'
c Var 'aux2331' order represents '0' with '-8295'
c Encoding variable: aux2332 with domain: bool (representing constraint (1<=(aux1398 + aux1401 + aux1402)))
c Var 'aux2332' direct represents '0' with '-8296'
c Var 'aux2332' direct represents '1' with '8296'
c Var 'aux2332' order represents '1' with '1'
c Var 'aux2332' order represents '0' with '-8296'
c Encoding variable: aux2333 with domain: bool (representing constraint ((aux1404 + aux1407 + aux1408)<=1))
c Var 'aux2333' direct represents '0' with '-8297'
c Var 'aux2333' direct represents '1' with '8297'
c Var 'aux2333' order represents '1' with '1'
c Var 'aux2333' order represents '0' with '-8297'
c Encoding variable: aux2334 with domain: bool (representing constraint (1<=(aux1404 + aux1407 + aux1408)))
c Var 'aux2334' direct represents '0' with '-8298'
c Var 'aux2334' direct represents '1' with '8298'
c Var 'aux2334' order represents '1' with '1'
c Var 'aux2334' order represents '0' with '-8298'
c Encoding variable: aux2335 with domain: bool (representing constraint ((aux1410 + aux1413 + aux1414)<=1))
c Var 'aux2335' direct represents '0' with '-8299'
c Var 'aux2335' direct represents '1' with '8299'
c Var 'aux2335' order represents '1' with '1'
c Var 'aux2335' order represents '0' with '-8299'
c Encoding variable: aux2336 with domain: bool (representing constraint (1<=(aux1410 + aux1413 + aux1414)))
c Var 'aux2336' direct represents '0' with '-8300'
c Var 'aux2336' direct represents '1' with '8300'
c Var 'aux2336' order represents '1' with '1'
c Var 'aux2336' order represents '0' with '-8300'
c Encoding variable: aux2337 with domain: bool (representing constraint ((aux1416 + aux1419 + aux1420)<=1))
c Var 'aux2337' direct represents '0' with '-8301'
c Var 'aux2337' direct represents '1' with '8301'
c Var 'aux2337' order represents '1' with '1'
c Var 'aux2337' order represents '0' with '-8301'
c Encoding variable: aux2338 with domain: bool (representing constraint (1<=(aux1416 + aux1419 + aux1420)))
c Var 'aux2338' direct represents '0' with '-8302'
c Var 'aux2338' direct represents '1' with '8302'
c Var 'aux2338' order represents '1' with '1'
c Var 'aux2338' order represents '0' with '-8302'
c Encoding variable: aux2339 with domain: bool (representing constraint ((aux1422 + aux1425 + aux1426)<=1))
c Var 'aux2339' direct represents '0' with '-8303'
c Var 'aux2339' direct represents '1' with '8303'
c Var 'aux2339' order represents '1' with '1'
c Var 'aux2339' order represents '0' with '-8303'
c Encoding variable: aux2340 with domain: bool (representing constraint (1<=(aux1422 + aux1425 + aux1426)))
c Var 'aux2340' direct represents '0' with '-8304'
c Var 'aux2340' direct represents '1' with '8304'
c Var 'aux2340' order represents '1' with '1'
c Var 'aux2340' order represents '0' with '-8304'
c Encoding variable: aux2341 with domain: bool (representing constraint ((aux1428 + aux1431 + aux1432)<=1))
c Var 'aux2341' direct represents '0' with '-8305'
c Var 'aux2341' direct represents '1' with '8305'
c Var 'aux2341' order represents '1' with '1'
c Var 'aux2341' order represents '0' with '-8305'
c Encoding variable: aux2342 with domain: bool (representing constraint (1<=(aux1428 + aux1431 + aux1432)))
c Var 'aux2342' direct represents '0' with '-8306'
c Var 'aux2342' direct represents '1' with '8306'
c Var 'aux2342' order represents '1' with '1'
c Var 'aux2342' order represents '0' with '-8306'
c Encoding variable: aux2343 with domain: bool (representing constraint ((aux1434 + aux1437 + aux1438)<=1))
c Var 'aux2343' direct represents '0' with '-8307'
c Var 'aux2343' direct represents '1' with '8307'
c Var 'aux2343' order represents '1' with '1'
c Var 'aux2343' order represents '0' with '-8307'
c Encoding variable: aux2344 with domain: bool (representing constraint (1<=(aux1434 + aux1437 + aux1438)))
c Var 'aux2344' direct represents '0' with '-8308'
c Var 'aux2344' direct represents '1' with '8308'
c Var 'aux2344' order represents '1' with '1'
c Var 'aux2344' order represents '0' with '-8308'
c Encoding variable: aux2345 with domain: bool (representing constraint ((aux1440 + aux1443 + aux1444)<=1))
c Var 'aux2345' direct represents '0' with '-8309'
c Var 'aux2345' direct represents '1' with '8309'
c Var 'aux2345' order represents '1' with '1'
c Var 'aux2345' order represents '0' with '-8309'
c Encoding variable: aux2346 with domain: bool (representing constraint (1<=(aux1440 + aux1443 + aux1444)))
c Var 'aux2346' direct represents '0' with '-8310'
c Var 'aux2346' direct represents '1' with '8310'
c Var 'aux2346' order represents '1' with '1'
c Var 'aux2346' order represents '0' with '-8310'
c Encoding variable: aux2347 with domain: bool (representing constraint ((aux1446 + aux1449 + aux1450)<=1))
c Var 'aux2347' direct represents '0' with '-8311'
c Var 'aux2347' direct represents '1' with '8311'
c Var 'aux2347' order represents '1' with '1'
c Var 'aux2347' order represents '0' with '-8311'
c Encoding variable: aux2348 with domain: bool (representing constraint (1<=(aux1446 + aux1449 + aux1450)))
c Var 'aux2348' direct represents '0' with '-8312'
c Var 'aux2348' direct represents '1' with '8312'
c Var 'aux2348' order represents '1' with '1'
c Var 'aux2348' order represents '0' with '-8312'
c Encoding variable: aux2349 with domain: bool (representing constraint ((aux1452 + aux1455 + aux1456)<=1))
c Var 'aux2349' direct represents '0' with '-8313'
c Var 'aux2349' direct represents '1' with '8313'
c Var 'aux2349' order represents '1' with '1'
c Var 'aux2349' order represents '0' with '-8313'
c Encoding variable: aux2350 with domain: bool (representing constraint (1<=(aux1452 + aux1455 + aux1456)))
c Var 'aux2350' direct represents '0' with '-8314'
c Var 'aux2350' direct represents '1' with '8314'
c Var 'aux2350' order represents '1' with '1'
c Var 'aux2350' order represents '0' with '-8314'
c Encoding variable: aux2351 with domain: bool (representing constraint ((aux1458 + aux1461 + aux1462)<=1))
c Var 'aux2351' direct represents '0' with '-8315'
c Var 'aux2351' direct represents '1' with '8315'
c Var 'aux2351' order represents '1' with '1'
c Var 'aux2351' order represents '0' with '-8315'
c Encoding variable: aux2352 with domain: bool (representing constraint (1<=(aux1458 + aux1461 + aux1462)))
c Var 'aux2352' direct represents '0' with '-8316'
c Var 'aux2352' direct represents '1' with '8316'
c Var 'aux2352' order represents '1' with '1'
c Var 'aux2352' order represents '0' with '-8316'
c Encoding variable: aux2353 with domain: bool (representing constraint ((aux1464 + aux1467 + aux1468)<=1))
c Var 'aux2353' direct represents '0' with '-8317'
c Var 'aux2353' direct represents '1' with '8317'
c Var 'aux2353' order represents '1' with '1'
c Var 'aux2353' order represents '0' with '-8317'
c Encoding variable: aux2354 with domain: bool (representing constraint (1<=(aux1464 + aux1467 + aux1468)))
c Var 'aux2354' direct represents '0' with '-8318'
c Var 'aux2354' direct represents '1' with '8318'
c Var 'aux2354' order represents '1' with '1'
c Var 'aux2354' order represents '0' with '-8318'
c Encoding variable: aux2355 with domain: bool (representing constraint ((aux1470 + aux1473 + aux1474)<=1))
c Var 'aux2355' direct represents '0' with '-8319'
c Var 'aux2355' direct represents '1' with '8319'
c Var 'aux2355' order represents '1' with '1'
c Var 'aux2355' order represents '0' with '-8319'
c Encoding variable: aux2356 with domain: bool (representing constraint (1<=(aux1470 + aux1473 + aux1474)))
c Var 'aux2356' direct represents '0' with '-8320'
c Var 'aux2356' direct represents '1' with '8320'
c Var 'aux2356' order represents '1' with '1'
c Var 'aux2356' order represents '0' with '-8320'
c Encoding variable: aux2357 with domain: bool (representing constraint ((aux1476 + aux1479 + aux1480)<=1))
c Var 'aux2357' direct represents '0' with '-8321'
c Var 'aux2357' direct represents '1' with '8321'
c Var 'aux2357' order represents '1' with '1'
c Var 'aux2357' order represents '0' with '-8321'
c Encoding variable: aux2358 with domain: bool (representing constraint (1<=(aux1476 + aux1479 + aux1480)))
c Var 'aux2358' direct represents '0' with '-8322'
c Var 'aux2358' direct represents '1' with '8322'
c Var 'aux2358' order represents '1' with '1'
c Var 'aux2358' order represents '0' with '-8322'
c Encoding variable: aux2359 with domain: bool (representing constraint ((aux1482 + aux1485 + aux1486)<=1))
c Var 'aux2359' direct represents '0' with '-8323'
c Var 'aux2359' direct represents '1' with '8323'
c Var 'aux2359' order represents '1' with '1'
c Var 'aux2359' order represents '0' with '-8323'
c Encoding variable: aux2360 with domain: bool (representing constraint (1<=(aux1482 + aux1485 + aux1486)))
c Var 'aux2360' direct represents '0' with '-8324'
c Var 'aux2360' direct represents '1' with '8324'
c Var 'aux2360' order represents '1' with '1'
c Var 'aux2360' order represents '0' with '-8324'
c Encoding variable: aux2361 with domain: bool (representing constraint ((aux1488 + aux1491 + aux1492)<=1))
c Var 'aux2361' direct represents '0' with '-8325'
c Var 'aux2361' direct represents '1' with '8325'
c Var 'aux2361' order represents '1' with '1'
c Var 'aux2361' order represents '0' with '-8325'
c Encoding variable: aux2362 with domain: bool (representing constraint (1<=(aux1488 + aux1491 + aux1492)))
c Var 'aux2362' direct represents '0' with '-8326'
c Var 'aux2362' direct represents '1' with '8326'
c Var 'aux2362' order represents '1' with '1'
c Var 'aux2362' order represents '0' with '-8326'
c Encoding variable: aux2363 with domain: bool (representing constraint ((aux1494 + aux1497 + aux1498)<=1))
c Var 'aux2363' direct represents '0' with '-8327'
c Var 'aux2363' direct represents '1' with '8327'
c Var 'aux2363' order represents '1' with '1'
c Var 'aux2363' order represents '0' with '-8327'
c Encoding variable: aux2364 with domain: bool (representing constraint (1<=(aux1494 + aux1497 + aux1498)))
c Var 'aux2364' direct represents '0' with '-8328'
c Var 'aux2364' direct represents '1' with '8328'
c Var 'aux2364' order represents '1' with '1'
c Var 'aux2364' order represents '0' with '-8328'
c Encoding variable: aux2365 with domain: bool (representing constraint ((aux1500 + aux1503 + aux1504)<=1))
c Var 'aux2365' direct represents '0' with '-8329'
c Var 'aux2365' direct represents '1' with '8329'
c Var 'aux2365' order represents '1' with '1'
c Var 'aux2365' order represents '0' with '-8329'
c Encoding variable: aux2366 with domain: bool (representing constraint (1<=(aux1500 + aux1503 + aux1504)))
c Var 'aux2366' direct represents '0' with '-8330'
c Var 'aux2366' direct represents '1' with '8330'
c Var 'aux2366' order represents '1' with '1'
c Var 'aux2366' order represents '0' with '-8330'
c Encoding variable: aux2367 with domain: bool (representing constraint ((aux1506 + aux1509 + aux1510)<=1))
c Var 'aux2367' direct represents '0' with '-8331'
c Var 'aux2367' direct represents '1' with '8331'
c Var 'aux2367' order represents '1' with '1'
c Var 'aux2367' order represents '0' with '-8331'
c Encoding variable: aux2368 with domain: bool (representing constraint (1<=(aux1506 + aux1509 + aux1510)))
c Var 'aux2368' direct represents '0' with '-8332'
c Var 'aux2368' direct represents '1' with '8332'
c Var 'aux2368' order represents '1' with '1'
c Var 'aux2368' order represents '0' with '-8332'
c Encoding variable: aux2369 with domain: bool (representing constraint ((aux1512 + aux1515 + aux1516)<=1))
c Var 'aux2369' direct represents '0' with '-8333'
c Var 'aux2369' direct represents '1' with '8333'
c Var 'aux2369' order represents '1' with '1'
c Var 'aux2369' order represents '0' with '-8333'
c Encoding variable: aux2370 with domain: bool (representing constraint (1<=(aux1512 + aux1515 + aux1516)))
c Var 'aux2370' direct represents '0' with '-8334'
c Var 'aux2370' direct represents '1' with '8334'
c Var 'aux2370' order represents '1' with '1'
c Var 'aux2370' order represents '0' with '-8334'
c Encoding variable: aux2371 with domain: bool (representing constraint ((aux1518 + aux1521 + aux1522)<=1))
c Var 'aux2371' direct represents '0' with '-8335'
c Var 'aux2371' direct represents '1' with '8335'
c Var 'aux2371' order represents '1' with '1'
c Var 'aux2371' order represents '0' with '-8335'
c Encoding variable: aux2372 with domain: bool (representing constraint (1<=(aux1518 + aux1521 + aux1522)))
c Var 'aux2372' direct represents '0' with '-8336'
c Var 'aux2372' direct represents '1' with '8336'
c Var 'aux2372' order represents '1' with '1'
c Var 'aux2372' order represents '0' with '-8336'
c Encoding variable: aux2373 with domain: bool (representing constraint ((aux1524 + aux1527 + aux1528)<=1))
c Var 'aux2373' direct represents '0' with '-8337'
c Var 'aux2373' direct represents '1' with '8337'
c Var 'aux2373' order represents '1' with '1'
c Var 'aux2373' order represents '0' with '-8337'
c Encoding variable: aux2374 with domain: bool (representing constraint (1<=(aux1524 + aux1527 + aux1528)))
c Var 'aux2374' direct represents '0' with '-8338'
c Var 'aux2374' direct represents '1' with '8338'
c Var 'aux2374' order represents '1' with '1'
c Var 'aux2374' order represents '0' with '-8338'
c Encoding variable: aux2375 with domain: bool (representing constraint ((aux1530 + aux1533 + aux1534)<=1))
c Var 'aux2375' direct represents '0' with '-8339'
c Var 'aux2375' direct represents '1' with '8339'
c Var 'aux2375' order represents '1' with '1'
c Var 'aux2375' order represents '0' with '-8339'
c Encoding variable: aux2376 with domain: bool (representing constraint (1<=(aux1530 + aux1533 + aux1534)))
c Var 'aux2376' direct represents '0' with '-8340'
c Var 'aux2376' direct represents '1' with '8340'
c Var 'aux2376' order represents '1' with '1'
c Var 'aux2376' order represents '0' with '-8340'
c Encoding variable: aux2377 with domain: bool (representing constraint ((aux1536 + aux1539 + aux1540)<=1))
c Var 'aux2377' direct represents '0' with '-8341'
c Var 'aux2377' direct represents '1' with '8341'
c Var 'aux2377' order represents '1' with '1'
c Var 'aux2377' order represents '0' with '-8341'
c Encoding variable: aux2378 with domain: bool (representing constraint (1<=(aux1536 + aux1539 + aux1540)))
c Var 'aux2378' direct represents '0' with '-8342'
c Var 'aux2378' direct represents '1' with '8342'
c Var 'aux2378' order represents '1' with '1'
c Var 'aux2378' order represents '0' with '-8342'
c Encoding variable: aux2379 with domain: bool (representing constraint ((aux1542 + aux1545 + aux1546)<=1))
c Var 'aux2379' direct represents '0' with '-8343'
c Var 'aux2379' direct represents '1' with '8343'
c Var 'aux2379' order represents '1' with '1'
c Var 'aux2379' order represents '0' with '-8343'
c Encoding variable: aux2380 with domain: bool (representing constraint (1<=(aux1542 + aux1545 + aux1546)))
c Var 'aux2380' direct represents '0' with '-8344'
c Var 'aux2380' direct represents '1' with '8344'
c Var 'aux2380' order represents '1' with '1'
c Var 'aux2380' order represents '0' with '-8344'
c Encoding variable: aux2381 with domain: bool (representing constraint ((aux1548 + aux1551 + aux1552)<=1))
c Var 'aux2381' direct represents '0' with '-8345'
c Var 'aux2381' direct represents '1' with '8345'
c Var 'aux2381' order represents '1' with '1'
c Var 'aux2381' order represents '0' with '-8345'
c Encoding variable: aux2382 with domain: bool (representing constraint (1<=(aux1548 + aux1551 + aux1552)))
c Var 'aux2382' direct represents '0' with '-8346'
c Var 'aux2382' direct represents '1' with '8346'
c Var 'aux2382' order represents '1' with '1'
c Var 'aux2382' order represents '0' with '-8346'
c Encoding variable: aux2383 with domain: bool (representing constraint ((aux1554 + aux1557 + aux1558)<=1))
c Var 'aux2383' direct represents '0' with '-8347'
c Var 'aux2383' direct represents '1' with '8347'
c Var 'aux2383' order represents '1' with '1'
c Var 'aux2383' order represents '0' with '-8347'
c Encoding variable: aux2384 with domain: bool (representing constraint (1<=(aux1554 + aux1557 + aux1558)))
c Var 'aux2384' direct represents '0' with '-8348'
c Var 'aux2384' direct represents '1' with '8348'
c Var 'aux2384' order represents '1' with '1'
c Var 'aux2384' order represents '0' with '-8348'
c Encoding variable: aux2385 with domain: bool (representing constraint ((aux1560 + aux1563 + aux1564)<=1))
c Var 'aux2385' direct represents '0' with '-8349'
c Var 'aux2385' direct represents '1' with '8349'
c Var 'aux2385' order represents '1' with '1'
c Var 'aux2385' order represents '0' with '-8349'
c Encoding variable: aux2386 with domain: bool (representing constraint (1<=(aux1560 + aux1563 + aux1564)))
c Var 'aux2386' direct represents '0' with '-8350'
c Var 'aux2386' direct represents '1' with '8350'
c Var 'aux2386' order represents '1' with '1'
c Var 'aux2386' order represents '0' with '-8350'
c Encoding variable: aux2387 with domain: bool (representing constraint ((aux1566 + aux1569 + aux1570)<=1))
c Var 'aux2387' direct represents '0' with '-8351'
c Var 'aux2387' direct represents '1' with '8351'
c Var 'aux2387' order represents '1' with '1'
c Var 'aux2387' order represents '0' with '-8351'
c Encoding variable: aux2388 with domain: bool (representing constraint (1<=(aux1566 + aux1569 + aux1570)))
c Var 'aux2388' direct represents '0' with '-8352'
c Var 'aux2388' direct represents '1' with '8352'
c Var 'aux2388' order represents '1' with '1'
c Var 'aux2388' order represents '0' with '-8352'
c Encoding variable: aux2389 with domain: bool (representing constraint ((aux1572 + aux1575 + aux1576)<=1))
c Var 'aux2389' direct represents '0' with '-8353'
c Var 'aux2389' direct represents '1' with '8353'
c Var 'aux2389' order represents '1' with '1'
c Var 'aux2389' order represents '0' with '-8353'
c Encoding variable: aux2390 with domain: bool (representing constraint (1<=(aux1572 + aux1575 + aux1576)))
c Var 'aux2390' direct represents '0' with '-8354'
c Var 'aux2390' direct represents '1' with '8354'
c Var 'aux2390' order represents '1' with '1'
c Var 'aux2390' order represents '0' with '-8354'
c Encoding variable: aux2391 with domain: bool (representing constraint ((aux1578 + aux1581 + aux1582)<=1))
c Var 'aux2391' direct represents '0' with '-8355'
c Var 'aux2391' direct represents '1' with '8355'
c Var 'aux2391' order represents '1' with '1'
c Var 'aux2391' order represents '0' with '-8355'
c Encoding variable: aux2392 with domain: bool (representing constraint (1<=(aux1578 + aux1581 + aux1582)))
c Var 'aux2392' direct represents '0' with '-8356'
c Var 'aux2392' direct represents '1' with '8356'
c Var 'aux2392' order represents '1' with '1'
c Var 'aux2392' order represents '0' with '-8356'
c Encoding variable: aux2393 with domain: bool (representing constraint ((aux1584 + aux1587 + aux1588)<=1))
c Var 'aux2393' direct represents '0' with '-8357'
c Var 'aux2393' direct represents '1' with '8357'
c Var 'aux2393' order represents '1' with '1'
c Var 'aux2393' order represents '0' with '-8357'
c Encoding variable: aux2394 with domain: bool (representing constraint (1<=(aux1584 + aux1587 + aux1588)))
c Var 'aux2394' direct represents '0' with '-8358'
c Var 'aux2394' direct represents '1' with '8358'
c Var 'aux2394' order represents '1' with '1'
c Var 'aux2394' order represents '0' with '-8358'
c Encoding variable: aux2395 with domain: bool (representing constraint ((aux1590 + aux1593 + aux1594)<=1))
c Var 'aux2395' direct represents '0' with '-8359'
c Var 'aux2395' direct represents '1' with '8359'
c Var 'aux2395' order represents '1' with '1'
c Var 'aux2395' order represents '0' with '-8359'
c Encoding variable: aux2396 with domain: bool (representing constraint (1<=(aux1590 + aux1593 + aux1594)))
c Var 'aux2396' direct represents '0' with '-8360'
c Var 'aux2396' direct represents '1' with '8360'
c Var 'aux2396' order represents '1' with '1'
c Var 'aux2396' order represents '0' with '-8360'
c Encoding variable: aux2397 with domain: bool (representing constraint ((aux1596 + aux1599 + aux1600)<=1))
c Var 'aux2397' direct represents '0' with '-8361'
c Var 'aux2397' direct represents '1' with '8361'
c Var 'aux2397' order represents '1' with '1'
c Var 'aux2397' order represents '0' with '-8361'
c Encoding variable: aux2398 with domain: bool (representing constraint (1<=(aux1596 + aux1599 + aux1600)))
c Var 'aux2398' direct represents '0' with '-8362'
c Var 'aux2398' direct represents '1' with '8362'
c Var 'aux2398' order represents '1' with '1'
c Var 'aux2398' order represents '0' with '-8362'
c Encoding variable: aux2399 with domain: bool (representing constraint ((aux1602 + aux1605 + aux1606)<=1))
c Var 'aux2399' direct represents '0' with '-8363'
c Var 'aux2399' direct represents '1' with '8363'
c Var 'aux2399' order represents '1' with '1'
c Var 'aux2399' order represents '0' with '-8363'
c Encoding variable: aux2400 with domain: bool (representing constraint (1<=(aux1602 + aux1605 + aux1606)))
c Var 'aux2400' direct represents '0' with '-8364'
c Var 'aux2400' direct represents '1' with '8364'
c Var 'aux2400' order represents '1' with '1'
c Var 'aux2400' order represents '0' with '-8364'
c Encoding variable: aux2401 with domain: bool (representing constraint ((aux1608 + aux1611 + aux1612)<=1))
c Var 'aux2401' direct represents '0' with '-8365'
c Var 'aux2401' direct represents '1' with '8365'
c Var 'aux2401' order represents '1' with '1'
c Var 'aux2401' order represents '0' with '-8365'
c Encoding variable: aux2402 with domain: bool (representing constraint (1<=(aux1608 + aux1611 + aux1612)))
c Var 'aux2402' direct represents '0' with '-8366'
c Var 'aux2402' direct represents '1' with '8366'
c Var 'aux2402' order represents '1' with '1'
c Var 'aux2402' order represents '0' with '-8366'
c Encoding variable: aux2403 with domain: bool (representing constraint ((aux1614 + aux1617 + aux1618)<=1))
c Var 'aux2403' direct represents '0' with '-8367'
c Var 'aux2403' direct represents '1' with '8367'
c Var 'aux2403' order represents '1' with '1'
c Var 'aux2403' order represents '0' with '-8367'
c Encoding variable: aux2404 with domain: bool (representing constraint (1<=(aux1614 + aux1617 + aux1618)))
c Var 'aux2404' direct represents '0' with '-8368'
c Var 'aux2404' direct represents '1' with '8368'
c Var 'aux2404' order represents '1' with '1'
c Var 'aux2404' order represents '0' with '-8368'
c Encoding variable: aux2405 with domain: bool (representing constraint ((aux1620 + aux1623 + aux1624)<=1))
c Var 'aux2405' direct represents '0' with '-8369'
c Var 'aux2405' direct represents '1' with '8369'
c Var 'aux2405' order represents '1' with '1'
c Var 'aux2405' order represents '0' with '-8369'
c Encoding variable: aux2406 with domain: bool (representing constraint (1<=(aux1620 + aux1623 + aux1624)))
c Var 'aux2406' direct represents '0' with '-8370'
c Var 'aux2406' direct represents '1' with '8370'
c Var 'aux2406' order represents '1' with '1'
c Var 'aux2406' order represents '0' with '-8370'
c Encoding variable: aux2407 with domain: bool (representing constraint ((aux1626 + aux1629 + aux1630)<=1))
c Var 'aux2407' direct represents '0' with '-8371'
c Var 'aux2407' direct represents '1' with '8371'
c Var 'aux2407' order represents '1' with '1'
c Var 'aux2407' order represents '0' with '-8371'
c Encoding variable: aux2408 with domain: bool (representing constraint (1<=(aux1626 + aux1629 + aux1630)))
c Var 'aux2408' direct represents '0' with '-8372'
c Var 'aux2408' direct represents '1' with '8372'
c Var 'aux2408' order represents '1' with '1'
c Var 'aux2408' order represents '0' with '-8372'
c Encoding variable: aux2409 with domain: bool (representing constraint ((aux1632 + aux1635 + aux1636)<=1))
c Var 'aux2409' direct represents '0' with '-8373'
c Var 'aux2409' direct represents '1' with '8373'
c Var 'aux2409' order represents '1' with '1'
c Var 'aux2409' order represents '0' with '-8373'
c Encoding variable: aux2410 with domain: bool (representing constraint (1<=(aux1632 + aux1635 + aux1636)))
c Var 'aux2410' direct represents '0' with '-8374'
c Var 'aux2410' direct represents '1' with '8374'
c Var 'aux2410' order represents '1' with '1'
c Var 'aux2410' order represents '0' with '-8374'
c Encoding variable: aux2411 with domain: bool (representing constraint ((aux1638 + aux1641 + aux1642)<=1))
c Var 'aux2411' direct represents '0' with '-8375'
c Var 'aux2411' direct represents '1' with '8375'
c Var 'aux2411' order represents '1' with '1'
c Var 'aux2411' order represents '0' with '-8375'
c Encoding variable: aux2412 with domain: bool (representing constraint (1<=(aux1638 + aux1641 + aux1642)))
c Var 'aux2412' direct represents '0' with '-8376'
c Var 'aux2412' direct represents '1' with '8376'
c Var 'aux2412' order represents '1' with '1'
c Var 'aux2412' order represents '0' with '-8376'
c Encoding variable: aux2413 with domain: bool (representing constraint ((aux1644 + aux1647 + aux1648)<=1))
c Var 'aux2413' direct represents '0' with '-8377'
c Var 'aux2413' direct represents '1' with '8377'
c Var 'aux2413' order represents '1' with '1'
c Var 'aux2413' order represents '0' with '-8377'
c Encoding variable: aux2414 with domain: bool (representing constraint (1<=(aux1644 + aux1647 + aux1648)))
c Var 'aux2414' direct represents '0' with '-8378'
c Var 'aux2414' direct represents '1' with '8378'
c Var 'aux2414' order represents '1' with '1'
c Var 'aux2414' order represents '0' with '-8378'
c Encoding variable: aux2415 with domain: bool (representing constraint ((aux1650 + aux1653 + aux1654)<=1))
c Var 'aux2415' direct represents '0' with '-8379'
c Var 'aux2415' direct represents '1' with '8379'
c Var 'aux2415' order represents '1' with '1'
c Var 'aux2415' order represents '0' with '-8379'
c Encoding variable: aux2416 with domain: bool (representing constraint (1<=(aux1650 + aux1653 + aux1654)))
c Var 'aux2416' direct represents '0' with '-8380'
c Var 'aux2416' direct represents '1' with '8380'
c Var 'aux2416' order represents '1' with '1'
c Var 'aux2416' order represents '0' with '-8380'
c Encoding variable: aux2417 with domain: bool (representing constraint ((aux1656 + aux1659 + aux1660)<=1))
c Var 'aux2417' direct represents '0' with '-8381'
c Var 'aux2417' direct represents '1' with '8381'
c Var 'aux2417' order represents '1' with '1'
c Var 'aux2417' order represents '0' with '-8381'
c Encoding variable: aux2418 with domain: bool (representing constraint (1<=(aux1656 + aux1659 + aux1660)))
c Var 'aux2418' direct represents '0' with '-8382'
c Var 'aux2418' direct represents '1' with '8382'
c Var 'aux2418' order represents '1' with '1'
c Var 'aux2418' order represents '0' with '-8382'
c Encoding variable: aux2419 with domain: bool (representing constraint ((aux1662 + aux1665 + aux1666)<=1))
c Var 'aux2419' direct represents '0' with '-8383'
c Var 'aux2419' direct represents '1' with '8383'
c Var 'aux2419' order represents '1' with '1'
c Var 'aux2419' order represents '0' with '-8383'
c Encoding variable: aux2420 with domain: bool (representing constraint (1<=(aux1662 + aux1665 + aux1666)))
c Var 'aux2420' direct represents '0' with '-8384'
c Var 'aux2420' direct represents '1' with '8384'
c Var 'aux2420' order represents '1' with '1'
c Var 'aux2420' order represents '0' with '-8384'
c Encoding variable: aux2421 with domain: bool (representing constraint ((aux1668 + aux1671 + aux1672)<=1))
c Var 'aux2421' direct represents '0' with '-8385'
c Var 'aux2421' direct represents '1' with '8385'
c Var 'aux2421' order represents '1' with '1'
c Var 'aux2421' order represents '0' with '-8385'
c Encoding variable: aux2422 with domain: bool (representing constraint (1<=(aux1668 + aux1671 + aux1672)))
c Var 'aux2422' direct represents '0' with '-8386'
c Var 'aux2422' direct represents '1' with '8386'
c Var 'aux2422' order represents '1' with '1'
c Var 'aux2422' order represents '0' with '-8386'
c Encoding variable: aux2423 with domain: bool (representing constraint ((aux1674 + aux1677 + aux1678)<=1))
c Var 'aux2423' direct represents '0' with '-8387'
c Var 'aux2423' direct represents '1' with '8387'
c Var 'aux2423' order represents '1' with '1'
c Var 'aux2423' order represents '0' with '-8387'
c Encoding variable: aux2424 with domain: bool (representing constraint (1<=(aux1674 + aux1677 + aux1678)))
c Var 'aux2424' direct represents '0' with '-8388'
c Var 'aux2424' direct represents '1' with '8388'
c Var 'aux2424' order represents '1' with '1'
c Var 'aux2424' order represents '0' with '-8388'
c Encoding variable: aux2425 with domain: bool (representing constraint ((aux1680 + aux1683 + aux1684)<=1))
c Var 'aux2425' direct represents '0' with '-8389'
c Var 'aux2425' direct represents '1' with '8389'
c Var 'aux2425' order represents '1' with '1'
c Var 'aux2425' order represents '0' with '-8389'
c Encoding variable: aux2426 with domain: bool (representing constraint (1<=(aux1680 + aux1683 + aux1684)))
c Var 'aux2426' direct represents '0' with '-8390'
c Var 'aux2426' direct represents '1' with '8390'
c Var 'aux2426' order represents '1' with '1'
c Var 'aux2426' order represents '0' with '-8390'
c Encoding variable: aux2427 with domain: bool (representing constraint ((aux1686 + aux1689 + aux1690)<=1))
c Var 'aux2427' direct represents '0' with '-8391'
c Var 'aux2427' direct represents '1' with '8391'
c Var 'aux2427' order represents '1' with '1'
c Var 'aux2427' order represents '0' with '-8391'
c Encoding variable: aux2428 with domain: bool (representing constraint (1<=(aux1686 + aux1689 + aux1690)))
c Var 'aux2428' direct represents '0' with '-8392'
c Var 'aux2428' direct represents '1' with '8392'
c Var 'aux2428' order represents '1' with '1'
c Var 'aux2428' order represents '0' with '-8392'
c Encoding variable: aux2429 with domain: bool (representing constraint ((aux1692 + aux1695 + aux1696)<=1))
c Var 'aux2429' direct represents '0' with '-8393'
c Var 'aux2429' direct represents '1' with '8393'
c Var 'aux2429' order represents '1' with '1'
c Var 'aux2429' order represents '0' with '-8393'
c Encoding variable: aux2430 with domain: bool (representing constraint (1<=(aux1692 + aux1695 + aux1696)))
c Var 'aux2430' direct represents '0' with '-8394'
c Var 'aux2430' direct represents '1' with '8394'
c Var 'aux2430' order represents '1' with '1'
c Var 'aux2430' order represents '0' with '-8394'
c Encoding variable: aux2431 with domain: bool (representing constraint ((aux1698 + aux1701 + aux1702)<=1))
c Var 'aux2431' direct represents '0' with '-8395'
c Var 'aux2431' direct represents '1' with '8395'
c Var 'aux2431' order represents '1' with '1'
c Var 'aux2431' order represents '0' with '-8395'
c Encoding variable: aux2432 with domain: bool (representing constraint (1<=(aux1698 + aux1701 + aux1702)))
c Var 'aux2432' direct represents '0' with '-8396'
c Var 'aux2432' direct represents '1' with '8396'
c Var 'aux2432' order represents '1' with '1'
c Var 'aux2432' order represents '0' with '-8396'
c Encoding variable: aux2433 with domain: bool (representing constraint ((aux1704 + aux1707 + aux1708)<=1))
c Var 'aux2433' direct represents '0' with '-8397'
c Var 'aux2433' direct represents '1' with '8397'
c Var 'aux2433' order represents '1' with '1'
c Var 'aux2433' order represents '0' with '-8397'
c Encoding variable: aux2434 with domain: bool (representing constraint (1<=(aux1704 + aux1707 + aux1708)))
c Var 'aux2434' direct represents '0' with '-8398'
c Var 'aux2434' direct represents '1' with '8398'
c Var 'aux2434' order represents '1' with '1'
c Var 'aux2434' order represents '0' with '-8398'
c Encoding variable: aux2435 with domain: bool (representing constraint ((aux1710 + aux1713 + aux1714)<=1))
c Var 'aux2435' direct represents '0' with '-8399'
c Var 'aux2435' direct represents '1' with '8399'
c Var 'aux2435' order represents '1' with '1'
c Var 'aux2435' order represents '0' with '-8399'
c Encoding variable: aux2436 with domain: bool (representing constraint (1<=(aux1710 + aux1713 + aux1714)))
c Var 'aux2436' direct represents '0' with '-8400'
c Var 'aux2436' direct represents '1' with '8400'
c Var 'aux2436' order represents '1' with '1'
c Var 'aux2436' order represents '0' with '-8400'
c Encoding variable: aux2437 with domain: bool (representing constraint ((aux1716 + aux1719 + aux1720)<=1))
c Var 'aux2437' direct represents '0' with '-8401'
c Var 'aux2437' direct represents '1' with '8401'
c Var 'aux2437' order represents '1' with '1'
c Var 'aux2437' order represents '0' with '-8401'
c Encoding variable: aux2438 with domain: bool (representing constraint (1<=(aux1716 + aux1719 + aux1720)))
c Var 'aux2438' direct represents '0' with '-8402'
c Var 'aux2438' direct represents '1' with '8402'
c Var 'aux2438' order represents '1' with '1'
c Var 'aux2438' order represents '0' with '-8402'
c Encoding variable: aux2439 with domain: bool (representing constraint ((aux1722 + aux1725 + aux1726)<=1))
c Var 'aux2439' direct represents '0' with '-8403'
c Var 'aux2439' direct represents '1' with '8403'
c Var 'aux2439' order represents '1' with '1'
c Var 'aux2439' order represents '0' with '-8403'
c Encoding variable: aux2440 with domain: bool (representing constraint (1<=(aux1722 + aux1725 + aux1726)))
c Var 'aux2440' direct represents '0' with '-8404'
c Var 'aux2440' direct represents '1' with '8404'
c Var 'aux2440' order represents '1' with '1'
c Var 'aux2440' order represents '0' with '-8404'
c Encoding variable: aux2441 with domain: bool (representing constraint ((aux1728 + aux1731 + aux1732)<=1))
c Var 'aux2441' direct represents '0' with '-8405'
c Var 'aux2441' direct represents '1' with '8405'
c Var 'aux2441' order represents '1' with '1'
c Var 'aux2441' order represents '0' with '-8405'
c Encoding variable: aux2442 with domain: bool (representing constraint (1<=(aux1728 + aux1731 + aux1732)))
c Var 'aux2442' direct represents '0' with '-8406'
c Var 'aux2442' direct represents '1' with '8406'
c Var 'aux2442' order represents '1' with '1'
c Var 'aux2442' order represents '0' with '-8406'
c Encoding variable: aux2443 with domain: bool (representing constraint ((aux1734 + aux1737 + aux1738)<=1))
c Var 'aux2443' direct represents '0' with '-8407'
c Var 'aux2443' direct represents '1' with '8407'
c Var 'aux2443' order represents '1' with '1'
c Var 'aux2443' order represents '0' with '-8407'
c Encoding variable: aux2444 with domain: bool (representing constraint (1<=(aux1734 + aux1737 + aux1738)))
c Var 'aux2444' direct represents '0' with '-8408'
c Var 'aux2444' direct represents '1' with '8408'
c Var 'aux2444' order represents '1' with '1'
c Var 'aux2444' order represents '0' with '-8408'
c Encoding variable: aux2445 with domain: bool (representing constraint ((aux1740 + aux1743 + aux1744)<=1))
c Var 'aux2445' direct represents '0' with '-8409'
c Var 'aux2445' direct represents '1' with '8409'
c Var 'aux2445' order represents '1' with '1'
c Var 'aux2445' order represents '0' with '-8409'
c Encoding variable: aux2446 with domain: bool (representing constraint (1<=(aux1740 + aux1743 + aux1744)))
c Var 'aux2446' direct represents '0' with '-8410'
c Var 'aux2446' direct represents '1' with '8410'
c Var 'aux2446' order represents '1' with '1'
c Var 'aux2446' order represents '0' with '-8410'
c Encoding variable: aux2447 with domain: bool (representing constraint ((aux1746 + aux1749 + aux1750)<=1))
c Var 'aux2447' direct represents '0' with '-8411'
c Var 'aux2447' direct represents '1' with '8411'
c Var 'aux2447' order represents '1' with '1'
c Var 'aux2447' order represents '0' with '-8411'
c Encoding variable: aux2448 with domain: bool (representing constraint (1<=(aux1746 + aux1749 + aux1750)))
c Var 'aux2448' direct represents '0' with '-8412'
c Var 'aux2448' direct represents '1' with '8412'
c Var 'aux2448' order represents '1' with '1'
c Var 'aux2448' order represents '0' with '-8412'
c Encoding variable: aux2449 with domain: bool (representing constraint ((aux1752 + aux1755 + aux1756)<=1))
c Var 'aux2449' direct represents '0' with '-8413'
c Var 'aux2449' direct represents '1' with '8413'
c Var 'aux2449' order represents '1' with '1'
c Var 'aux2449' order represents '0' with '-8413'
c Encoding variable: aux2450 with domain: bool (representing constraint (1<=(aux1752 + aux1755 + aux1756)))
c Var 'aux2450' direct represents '0' with '-8414'
c Var 'aux2450' direct represents '1' with '8414'
c Var 'aux2450' order represents '1' with '1'
c Var 'aux2450' order represents '0' with '-8414'
c Encoding variable: aux2451 with domain: bool (representing constraint ((aux1758 + aux1761 + aux1762)<=1))
c Var 'aux2451' direct represents '0' with '-8415'
c Var 'aux2451' direct represents '1' with '8415'
c Var 'aux2451' order represents '1' with '1'
c Var 'aux2451' order represents '0' with '-8415'
c Encoding variable: aux2452 with domain: bool (representing constraint (1<=(aux1758 + aux1761 + aux1762)))
c Var 'aux2452' direct represents '0' with '-8416'
c Var 'aux2452' direct represents '1' with '8416'
c Var 'aux2452' order represents '1' with '1'
c Var 'aux2452' order represents '0' with '-8416'
c Encoding variable: aux2453 with domain: bool (representing constraint ((aux1764 + aux1767 + aux1768)<=1))
c Var 'aux2453' direct represents '0' with '-8417'
c Var 'aux2453' direct represents '1' with '8417'
c Var 'aux2453' order represents '1' with '1'
c Var 'aux2453' order represents '0' with '-8417'
c Encoding variable: aux2454 with domain: bool (representing constraint (1<=(aux1764 + aux1767 + aux1768)))
c Var 'aux2454' direct represents '0' with '-8418'
c Var 'aux2454' direct represents '1' with '8418'
c Var 'aux2454' order represents '1' with '1'
c Var 'aux2454' order represents '0' with '-8418'
c Encoding variable: aux2455 with domain: bool (representing constraint ((aux1770 + aux1773 + aux1774)<=1))
c Var 'aux2455' direct represents '0' with '-8419'
c Var 'aux2455' direct represents '1' with '8419'
c Var 'aux2455' order represents '1' with '1'
c Var 'aux2455' order represents '0' with '-8419'
c Encoding variable: aux2456 with domain: bool (representing constraint (1<=(aux1770 + aux1773 + aux1774)))
c Var 'aux2456' direct represents '0' with '-8420'
c Var 'aux2456' direct represents '1' with '8420'
c Var 'aux2456' order represents '1' with '1'
c Var 'aux2456' order represents '0' with '-8420'
c Encoding variable: aux2457 with domain: bool (representing constraint ((aux1776 + aux1779 + aux1780)<=1))
c Var 'aux2457' direct represents '0' with '-8421'
c Var 'aux2457' direct represents '1' with '8421'
c Var 'aux2457' order represents '1' with '1'
c Var 'aux2457' order represents '0' with '-8421'
c Encoding variable: aux2458 with domain: bool (representing constraint (1<=(aux1776 + aux1779 + aux1780)))
c Var 'aux2458' direct represents '0' with '-8422'
c Var 'aux2458' direct represents '1' with '8422'
c Var 'aux2458' order represents '1' with '1'
c Var 'aux2458' order represents '0' with '-8422'
c Encoding variable: aux2459 with domain: bool (representing constraint ((aux1782 + aux1785 + aux1786)<=1))
c Var 'aux2459' direct represents '0' with '-8423'
c Var 'aux2459' direct represents '1' with '8423'
c Var 'aux2459' order represents '1' with '1'
c Var 'aux2459' order represents '0' with '-8423'
c Encoding variable: aux2460 with domain: bool (representing constraint (1<=(aux1782 + aux1785 + aux1786)))
c Var 'aux2460' direct represents '0' with '-8424'
c Var 'aux2460' direct represents '1' with '8424'
c Var 'aux2460' order represents '1' with '1'
c Var 'aux2460' order represents '0' with '-8424'
c Encoding variable: aux2461 with domain: bool (representing constraint ((aux1788 + aux1791 + aux1792)<=1))
c Var 'aux2461' direct represents '0' with '-8425'
c Var 'aux2461' direct represents '1' with '8425'
c Var 'aux2461' order represents '1' with '1'
c Var 'aux2461' order represents '0' with '-8425'
c Encoding variable: aux2462 with domain: bool (representing constraint (1<=(aux1788 + aux1791 + aux1792)))
c Var 'aux2462' direct represents '0' with '-8426'
c Var 'aux2462' direct represents '1' with '8426'
c Var 'aux2462' order represents '1' with '1'
c Var 'aux2462' order represents '0' with '-8426'
c Encoding variable: aux2463 with domain: bool (representing constraint ((aux1794 + aux1797 + aux1798)<=1))
c Var 'aux2463' direct represents '0' with '-8427'
c Var 'aux2463' direct represents '1' with '8427'
c Var 'aux2463' order represents '1' with '1'
c Var 'aux2463' order represents '0' with '-8427'
c Encoding variable: aux2464 with domain: bool (representing constraint (1<=(aux1794 + aux1797 + aux1798)))
c Var 'aux2464' direct represents '0' with '-8428'
c Var 'aux2464' direct represents '1' with '8428'
c Var 'aux2464' order represents '1' with '1'
c Var 'aux2464' order represents '0' with '-8428'
c Encoding variable: aux2465 with domain: bool (representing constraint ((aux1800 + aux1803 + aux1804)<=1))
c Var 'aux2465' direct represents '0' with '-8429'
c Var 'aux2465' direct represents '1' with '8429'
c Var 'aux2465' order represents '1' with '1'
c Var 'aux2465' order represents '0' with '-8429'
c Encoding variable: aux2466 with domain: bool (representing constraint (1<=(aux1800 + aux1803 + aux1804)))
c Var 'aux2466' direct represents '0' with '-8430'
c Var 'aux2466' direct represents '1' with '8430'
c Var 'aux2466' order represents '1' with '1'
c Var 'aux2466' order represents '0' with '-8430'
c Encoding variable: aux2467 with domain: bool (representing constraint ((aux1806 + aux1809 + aux1810)<=1))
c Var 'aux2467' direct represents '0' with '-8431'
c Var 'aux2467' direct represents '1' with '8431'
c Var 'aux2467' order represents '1' with '1'
c Var 'aux2467' order represents '0' with '-8431'
c Encoding variable: aux2468 with domain: bool (representing constraint (1<=(aux1806 + aux1809 + aux1810)))
c Var 'aux2468' direct represents '0' with '-8432'
c Var 'aux2468' direct represents '1' with '8432'
c Var 'aux2468' order represents '1' with '1'
c Var 'aux2468' order represents '0' with '-8432'
c Encoding variable: aux2469 with domain: bool (representing constraint ((aux1812 + aux1815 + aux1816)<=1))
c Var 'aux2469' direct represents '0' with '-8433'
c Var 'aux2469' direct represents '1' with '8433'
c Var 'aux2469' order represents '1' with '1'
c Var 'aux2469' order represents '0' with '-8433'
c Encoding variable: aux2470 with domain: bool (representing constraint (1<=(aux1812 + aux1815 + aux1816)))
c Var 'aux2470' direct represents '0' with '-8434'
c Var 'aux2470' direct represents '1' with '8434'
c Var 'aux2470' order represents '1' with '1'
c Var 'aux2470' order represents '0' with '-8434'
c Encoding variable: aux2471 with domain: bool (representing constraint ((aux1818 + aux1821 + aux1822)<=1))
c Var 'aux2471' direct represents '0' with '-8435'
c Var 'aux2471' direct represents '1' with '8435'
c Var 'aux2471' order represents '1' with '1'
c Var 'aux2471' order represents '0' with '-8435'
c Encoding variable: aux2472 with domain: bool (representing constraint (1<=(aux1818 + aux1821 + aux1822)))
c Var 'aux2472' direct represents '0' with '-8436'
c Var 'aux2472' direct represents '1' with '8436'
c Var 'aux2472' order represents '1' with '1'
c Var 'aux2472' order represents '0' with '-8436'
c Encoding variable: aux2473 with domain: bool (representing constraint ((aux1824 + aux1827 + aux1828)<=1))
c Var 'aux2473' direct represents '0' with '-8437'
c Var 'aux2473' direct represents '1' with '8437'
c Var 'aux2473' order represents '1' with '1'
c Var 'aux2473' order represents '0' with '-8437'
c Encoding variable: aux2474 with domain: bool (representing constraint (1<=(aux1824 + aux1827 + aux1828)))
c Var 'aux2474' direct represents '0' with '-8438'
c Var 'aux2474' direct represents '1' with '8438'
c Var 'aux2474' order represents '1' with '1'
c Var 'aux2474' order represents '0' with '-8438'
c Encoding variable: aux2475 with domain: bool (representing constraint ((aux1830 + aux1833 + aux1834)<=1))
c Var 'aux2475' direct represents '0' with '-8439'
c Var 'aux2475' direct represents '1' with '8439'
c Var 'aux2475' order represents '1' with '1'
c Var 'aux2475' order represents '0' with '-8439'
c Encoding variable: aux2476 with domain: bool (representing constraint (1<=(aux1830 + aux1833 + aux1834)))
c Var 'aux2476' direct represents '0' with '-8440'
c Var 'aux2476' direct represents '1' with '8440'
c Var 'aux2476' order represents '1' with '1'
c Var 'aux2476' order represents '0' with '-8440'
c Encoding variable: aux2477 with domain: bool (representing constraint ((aux1836 + aux1839 + aux1840)<=1))
c Var 'aux2477' direct represents '0' with '-8441'
c Var 'aux2477' direct represents '1' with '8441'
c Var 'aux2477' order represents '1' with '1'
c Var 'aux2477' order represents '0' with '-8441'
c Encoding variable: aux2478 with domain: bool (representing constraint (1<=(aux1836 + aux1839 + aux1840)))
c Var 'aux2478' direct represents '0' with '-8442'
c Var 'aux2478' direct represents '1' with '8442'
c Var 'aux2478' order represents '1' with '1'
c Var 'aux2478' order represents '0' with '-8442'
c Encoding variable: aux2479 with domain: bool (representing constraint ((aux1842 + aux1845 + aux1846)<=1))
c Var 'aux2479' direct represents '0' with '-8443'
c Var 'aux2479' direct represents '1' with '8443'
c Var 'aux2479' order represents '1' with '1'
c Var 'aux2479' order represents '0' with '-8443'
c Encoding variable: aux2480 with domain: bool (representing constraint (1<=(aux1842 + aux1845 + aux1846)))
c Var 'aux2480' direct represents '0' with '-8444'
c Var 'aux2480' direct represents '1' with '8444'
c Var 'aux2480' order represents '1' with '1'
c Var 'aux2480' order represents '0' with '-8444'
c Encoding variable: aux2481 with domain: bool (representing constraint ((aux1848 + aux1851 + aux1852)<=1))
c Var 'aux2481' direct represents '0' with '-8445'
c Var 'aux2481' direct represents '1' with '8445'
c Var 'aux2481' order represents '1' with '1'
c Var 'aux2481' order represents '0' with '-8445'
c Encoding variable: aux2482 with domain: bool (representing constraint (1<=(aux1848 + aux1851 + aux1852)))
c Var 'aux2482' direct represents '0' with '-8446'
c Var 'aux2482' direct represents '1' with '8446'
c Var 'aux2482' order represents '1' with '1'
c Var 'aux2482' order represents '0' with '-8446'
c Encoding variable: aux2483 with domain: bool (representing constraint ((aux1854 + aux1857 + aux1858)<=1))
c Var 'aux2483' direct represents '0' with '-8447'
c Var 'aux2483' direct represents '1' with '8447'
c Var 'aux2483' order represents '1' with '1'
c Var 'aux2483' order represents '0' with '-8447'
c Encoding variable: aux2484 with domain: bool (representing constraint (1<=(aux1854 + aux1857 + aux1858)))
c Var 'aux2484' direct represents '0' with '-8448'
c Var 'aux2484' direct represents '1' with '8448'
c Var 'aux2484' order represents '1' with '1'
c Var 'aux2484' order represents '0' with '-8448'
c Encoding variable: aux2485 with domain: bool (representing constraint ((aux1860 + aux1863 + aux1864)<=1))
c Var 'aux2485' direct represents '0' with '-8449'
c Var 'aux2485' direct represents '1' with '8449'
c Var 'aux2485' order represents '1' with '1'
c Var 'aux2485' order represents '0' with '-8449'
c Encoding variable: aux2486 with domain: bool (representing constraint (1<=(aux1860 + aux1863 + aux1864)))
c Var 'aux2486' direct represents '0' with '-8450'
c Var 'aux2486' direct represents '1' with '8450'
c Var 'aux2486' order represents '1' with '1'
c Var 'aux2486' order represents '0' with '-8450'
c Encoding variable: aux2487 with domain: bool (representing constraint ((aux1866 + aux1869 + aux1870)<=1))
c Var 'aux2487' direct represents '0' with '-8451'
c Var 'aux2487' direct represents '1' with '8451'
c Var 'aux2487' order represents '1' with '1'
c Var 'aux2487' order represents '0' with '-8451'
c Encoding variable: aux2488 with domain: bool (representing constraint (1<=(aux1866 + aux1869 + aux1870)))
c Var 'aux2488' direct represents '0' with '-8452'
c Var 'aux2488' direct represents '1' with '8452'
c Var 'aux2488' order represents '1' with '1'
c Var 'aux2488' order represents '0' with '-8452'
c Encoding variable: aux2489 with domain: bool (representing constraint ((aux1872 + aux1875 + aux1876)<=1))
c Var 'aux2489' direct represents '0' with '-8453'
c Var 'aux2489' direct represents '1' with '8453'
c Var 'aux2489' order represents '1' with '1'
c Var 'aux2489' order represents '0' with '-8453'
c Encoding variable: aux2490 with domain: bool (representing constraint (1<=(aux1872 + aux1875 + aux1876)))
c Var 'aux2490' direct represents '0' with '-8454'
c Var 'aux2490' direct represents '1' with '8454'
c Var 'aux2490' order represents '1' with '1'
c Var 'aux2490' order represents '0' with '-8454'
c Encoding variable: aux2491 with domain: bool (representing constraint ((aux1878 + aux1881 + aux1882)<=1))
c Var 'aux2491' direct represents '0' with '-8455'
c Var 'aux2491' direct represents '1' with '8455'
c Var 'aux2491' order represents '1' with '1'
c Var 'aux2491' order represents '0' with '-8455'
c Encoding variable: aux2492 with domain: bool (representing constraint (1<=(aux1878 + aux1881 + aux1882)))
c Var 'aux2492' direct represents '0' with '-8456'
c Var 'aux2492' direct represents '1' with '8456'
c Var 'aux2492' order represents '1' with '1'
c Var 'aux2492' order represents '0' with '-8456'
c Encoding variable: aux2493 with domain: bool (representing constraint ((aux1884 + aux1887 + aux1888)<=1))
c Var 'aux2493' direct represents '0' with '-8457'
c Var 'aux2493' direct represents '1' with '8457'
c Var 'aux2493' order represents '1' with '1'
c Var 'aux2493' order represents '0' with '-8457'
c Encoding variable: aux2494 with domain: bool (representing constraint (1<=(aux1884 + aux1887 + aux1888)))
c Var 'aux2494' direct represents '0' with '-8458'
c Var 'aux2494' direct represents '1' with '8458'
c Var 'aux2494' order represents '1' with '1'
c Var 'aux2494' order represents '0' with '-8458'
c Encoding variable: aux2495 with domain: bool (representing constraint ((aux1890 + aux1893 + aux1894)<=1))
c Var 'aux2495' direct represents '0' with '-8459'
c Var 'aux2495' direct represents '1' with '8459'
c Var 'aux2495' order represents '1' with '1'
c Var 'aux2495' order represents '0' with '-8459'
c Encoding variable: aux2496 with domain: bool (representing constraint (1<=(aux1890 + aux1893 + aux1894)))
c Var 'aux2496' direct represents '0' with '-8460'
c Var 'aux2496' direct represents '1' with '8460'
c Var 'aux2496' order represents '1' with '1'
c Var 'aux2496' order represents '0' with '-8460'
c Encoding variable: aux2497 with domain: bool (representing constraint ((aux1896 + aux1899 + aux1900)<=1))
c Var 'aux2497' direct represents '0' with '-8461'
c Var 'aux2497' direct represents '1' with '8461'
c Var 'aux2497' order represents '1' with '1'
c Var 'aux2497' order represents '0' with '-8461'
c Encoding variable: aux2498 with domain: bool (representing constraint (1<=(aux1896 + aux1899 + aux1900)))
c Var 'aux2498' direct represents '0' with '-8462'
c Var 'aux2498' direct represents '1' with '8462'
c Var 'aux2498' order represents '1' with '1'
c Var 'aux2498' order represents '0' with '-8462'
c (((x_00001_00001 + x_00001_00002)<=3)=tv=SATLiteral(7919))
-7919 18 0
-7919 2 17 0
-7919 3 0
-7919 5 0
-7919 7 0
-7919 9 0
-7919 11 0
-7919 13 0
-7919 15 0
7919 -3 -17 0
7919 -2 -18 0
c ((3<=(x_00001_00001 + x_00001_00002))=tv=SATLiteral(7920))
-7920 -2 -17 0
7920 17 0
7920 2 0
7920 3 0
7920 5 0
7920 7 0
7920 9 0
7920 11 0
7920 13 0
7920 15 0
c (((x_00001_00003 + x_00001_00004 + x_00001_00005)<=15)=tv=SATLiteral(7921))
-7921 54 75 0
-7921 56 73 0
-7921 58 71 0
-7921 60 69 0
-7921 32 52 75 0
-7921 32 54 73 0
-7921 32 56 71 0
-7921 32 58 69 0
-7921 32 60 67 0
-7921 33 50 75 0
-7921 33 52 73 0
-7921 33 54 71 0
-7921 33 56 69 0
-7921 33 58 67 0
-7921 33 60 65 0
-7921 35 48 75 0
-7921 35 50 73 0
-7921 35 52 71 0
-7921 35 54 69 0
-7921 35 56 67 0
-7921 35 58 65 0
-7921 35 60 63 0
-7921 37 47 75 0
-7921 37 48 73 0
-7921 37 50 71 0
-7921 37 52 69 0
-7921 37 54 67 0
-7921 37 56 65 0
-7921 37 58 63 0
-7921 37 60 62 0
-7921 39 75 0
-7921 39 47 73 0
-7921 39 48 71 0
-7921 39 50 69 0
-7921 39 52 67 0
-7921 39 54 65 0
-7921 39 56 63 0
-7921 39 58 62 0
-7921 39 60 0
-7921 41 73 0
-7921 41 47 71 0
-7921 41 48 69 0
-7921 41 50 67 0
-7921 41 52 65 0
-7921 41 54 63 0
-7921 41 56 62 0
-7921 41 58 0
-7921 41 60 0
-7921 43 71 0
-7921 43 47 69 0
-7921 43 48 67 0
-7921 43 50 65 0
-7921 43 52 63 0
-7921 43 54 62 0
-7921 43 56 0
-7921 43 58 0
-7921 43 60 0
-7921 45 69 0
-7921 45 47 67 0
-7921 45 48 65 0
-7921 45 50 63 0
-7921 45 52 62 0
-7921 45 54 0
-7921 45 56 0
-7921 45 58 0
-7921 45 60 0
7921 -54 -62 0
7921 -52 -63 0
7921 -50 -65 0
7921 -48 -67 0
7921 -47 -69 0
7921 -45 -56 -62 0
7921 -45 -54 -63 0
7921 -45 -52 -65 0
7921 -45 -50 -67 0
7921 -45 -48 -69 0
7921 -45 -47 -71 0
7921 -43 -58 -62 0
7921 -43 -56 -63 0
7921 -43 -54 -65 0
7921 -43 -52 -67 0
7921 -43 -50 -69 0
7921 -43 -48 -71 0
7921 -43 -47 -73 0
7921 -41 -60 -62 0
7921 -41 -58 -63 0
7921 -41 -56 -65 0
7921 -41 -54 -67 0
7921 -41 -52 -69 0
7921 -41 -50 -71 0
7921 -41 -48 -73 0
7921 -41 -47 -75 0
7921 -39 -62 0
7921 -39 -60 -63 0
7921 -39 -58 -65 0
7921 -39 -56 -67 0
7921 -39 -54 -69 0
7921 -39 -52 -71 0
7921 -39 -50 -73 0
7921 -39 -48 -75 0
7921 -39 -47 0
7921 -37 -63 0
7921 -37 -60 -65 0
7921 -37 -58 -67 0
7921 -37 -56 -69 0
7921 -37 -54 -71 0
7921 -37 -52 -73 0
7921 -37 -50 -75 0
7921 -37 -48 0
7921 -37 -47 0
7921 -35 -65 0
7921 -35 -60 -67 0
7921 -35 -58 -69 0
7921 -35 -56 -71 0
7921 -35 -54 -73 0
7921 -35 -52 -75 0
7921 -35 -50 0
7921 -35 -48 0
7921 -35 -47 0
7921 -33 -67 0
7921 -33 -60 -69 0
7921 -33 -58 -71 0
7921 -33 -56 -73 0
7921 -33 -54 -75 0
7921 -33 -52 0
7921 -33 -50 0
7921 -33 -48 0
7921 -33 -47 0
7921 -32 -69 0
7921 -32 -60 -71 0
7921 -32 -58 -73 0
7921 -32 -56 -75 0
7921 -32 -54 0
7921 -32 -52 0
7921 -32 -50 0
7921 -32 -48 0
7921 -32 -47 0
c ((15<=(x_00001_00003 + x_00001_00004 + x_00001_00005))=tv=SATLiteral(7922))
-7922 -52 -62 0
-7922 -50 -63 0
-7922 -48 -65 0
-7922 -47 -67 0
-7922 -45 -54 -62 0
-7922 -45 -52 -63 0
-7922 -45 -50 -65 0
-7922 -45 -48 -67 0
-7922 -45 -47 -69 0
-7922 -43 -56 -62 0
-7922 -43 -54 -63 0
-7922 -43 -52 -65 0
-7922 -43 -50 -67 0
-7922 -43 -48 -69 0
-7922 -43 -47 -71 0
-7922 -41 -58 -62 0
-7922 -41 -56 -63 0
-7922 -41 -54 -65 0
-7922 -41 -52 -67 0
-7922 -41 -50 -69 0
-7922 -41 -48 -71 0
-7922 -41 -47 -73 0
-7922 -39 -60 -62 0
-7922 -39 -58 -63 0
-7922 -39 -56 -65 0
-7922 -39 -54 -67 0
-7922 -39 -52 -69 0
-7922 -39 -50 -71 0
-7922 -39 -48 -73 0
-7922 -39 -47 -75 0
-7922 -37 -62 0
-7922 -37 -60 -63 0
-7922 -37 -58 -65 0
-7922 -37 -56 -67 0
-7922 -37 -54 -69 0
-7922 -37 -52 -71 0
-7922 -37 -50 -73 0
-7922 -37 -48 -75 0
-7922 -37 -47 0
-7922 -35 -63 0
-7922 -35 -60 -65 0
-7922 -35 -58 -67 0
-7922 -35 -56 -69 0
-7922 -35 -54 -71 0
-7922 -35 -52 -73 0
-7922 -35 -50 -75 0
-7922 -35 -48 0
-7922 -35 -47 0
-7922 -33 -65 0
-7922 -33 -60 -67 0
-7922 -33 -58 -69 0
-7922 -33 -56 -71 0
-7922 -33 -54 -73 0
-7922 -33 -52 -75 0
-7922 -33 -50 0
-7922 -33 -48 0
-7922 -33 -47 0
-7922 -32 -67 0
-7922 -32 -60 -69 0
-7922 -32 -58 -71 0
-7922 -32 -56 -73 0
-7922 -32 -54 -75 0
-7922 -32 -52 0
-7922 -32 -50 0
-7922 -32 -48 0
-7922 -32 -47 0
7922 52 75 0
7922 54 73 0
7922 56 71 0
7922 58 69 0
7922 60 67 0
7922 32 50 75 0
7922 32 52 73 0
7922 32 54 71 0
7922 32 56 69 0
7922 32 58 67 0
7922 32 60 65 0
7922 33 48 75 0
7922 33 50 73 0
7922 33 52 71 0
7922 33 54 69 0
7922 33 56 67 0
7922 33 58 65 0
7922 33 60 63 0
7922 35 47 75 0
7922 35 48 73 0
7922 35 50 71 0
7922 35 52 69 0
7922 35 54 67 0
7922 35 56 65 0
7922 35 58 63 0
7922 35 60 62 0
7922 37 75 0
7922 37 47 73 0
7922 37 48 71 0
7922 37 50 69 0
7922 37 52 67 0
7922 37 54 65 0
7922 37 56 63 0
7922 37 58 62 0
7922 37 60 0
7922 39 73 0
7922 39 47 71 0
7922 39 48 69 0
7922 39 50 67 0
7922 39 52 65 0
7922 39 54 63 0
7922 39 56 62 0
7922 39 58 0
7922 39 60 0
7922 41 71 0
7922 41 47 69 0
7922 41 48 67 0
7922 41 50 65 0
7922 41 52 63 0
7922 41 54 62 0
7922 41 56 0
7922 41 58 0
7922 41 60 0
7922 43 69 0
7922 43 47 67 0
7922 43 48 65 0
7922 43 50 63 0
7922 43 52 62 0
7922 43 54 0
7922 43 56 0
7922 43 58 0
7922 43 60 0
7922 45 67 0
7922 45 47 65 0
7922 45 48 63 0
7922 45 50 62 0
7922 45 52 0
7922 45 54 0
7922 45 56 0
7922 45 58 0
7922 45 60 0
c (((aux437 + shift(x_00003_00005, -1) + shift(x_00002_00006, -1))<=18)=tv=SATLiteral(7923))
-7923 215 1768 0
-7923 217 1766 0
-7923 219 1764 0
-7923 221 1762 0
-7923 223 1760 0
-7923 225 1758 0
-7923 332 213 1768 0
-7923 332 215 1766 0
-7923 332 217 1764 0
-7923 332 219 1762 0
-7923 332 221 1760 0
-7923 332 223 1758 0
-7923 332 225 1756 0
-7923 333 212 1768 0
-7923 333 213 1766 0
-7923 333 215 1764 0
-7923 333 217 1762 0
-7923 333 219 1760 0
-7923 333 221 1758 0
-7923 333 223 1756 0
-7923 333 225 1754 0
-7923 335 1768 0
-7923 335 212 1766 0
-7923 335 213 1764 0
-7923 335 215 1762 0
-7923 335 217 1760 0
-7923 335 219 1758 0
-7923 335 221 1756 0
-7923 335 223 1754 0
-7923 335 225 1752 0
-7923 337 1766 0
-7923 337 212 1764 0
-7923 337 213 1762 0
-7923 337 215 1760 0
-7923 337 217 1758 0
-7923 337 219 1756 0
-7923 337 221 1754 0
-7923 337 223 1752 0
-7923 337 225 1750 0
-7923 339 1764 0
-7923 339 212 1762 0
-7923 339 213 1760 0
-7923 339 215 1758 0
-7923 339 217 1756 0
-7923 339 219 1754 0
-7923 339 221 1752 0
-7923 339 223 1750 0
-7923 339 225 1748 0
-7923 341 1762 0
-7923 341 212 1760 0
-7923 341 213 1758 0
-7923 341 215 1756 0
-7923 341 217 1754 0
-7923 341 219 1752 0
-7923 341 221 1750 0
-7923 341 223 1748 0
-7923 341 225 1746 0
-7923 343 1760 0
-7923 343 212 1758 0
-7923 343 213 1756 0
-7923 343 215 1754 0
-7923 343 217 1752 0
-7923 343 219 1750 0
-7923 343 221 1748 0
-7923 343 223 1746 0
-7923 343 225 1744 0
-7923 345 1758 0
-7923 345 212 1756 0
-7923 345 213 1754 0
-7923 345 215 1752 0
-7923 345 217 1750 0
-7923 345 219 1748 0
-7923 345 221 1746 0
-7923 345 223 1744 0
-7923 345 225 1742 0
7923 -1742 0
7923 -225 -1744 0
7923 -223 -1746 0
7923 -221 -1748 0
7923 -219 -1750 0
7923 -217 -1752 0
7923 -215 -1754 0
7923 -213 -1756 0
7923 -212 -1758 0
7923 -345 -1744 0
7923 -345 -225 -1746 0
7923 -345 -223 -1748 0
7923 -345 -221 -1750 0
7923 -345 -219 -1752 0
7923 -345 -217 -1754 0
7923 -345 -215 -1756 0
7923 -345 -213 -1758 0
7923 -345 -212 -1760 0
7923 -343 -1746 0
7923 -343 -225 -1748 0
7923 -343 -223 -1750 0
7923 -343 -221 -1752 0
7923 -343 -219 -1754 0
7923 -343 -217 -1756 0
7923 -343 -215 -1758 0
7923 -343 -213 -1760 0
7923 -343 -212 -1762 0
7923 -341 -1748 0
7923 -341 -225 -1750 0
7923 -341 -223 -1752 0
7923 -341 -221 -1754 0
7923 -341 -219 -1756 0
7923 -341 -217 -1758 0
7923 -341 -215 -1760 0
7923 -341 -213 -1762 0
7923 -341 -212 -1764 0
7923 -339 -1750 0
7923 -339 -225 -1752 0
7923 -339 -223 -1754 0
7923 -339 -221 -1756 0
7923 -339 -219 -1758 0
7923 -339 -217 -1760 0
7923 -339 -215 -1762 0
7923 -339 -213 -1764 0
7923 -339 -212 -1766 0
7923 -337 -1752 0
7923 -337 -225 -1754 0
7923 -337 -223 -1756 0
7923 -337 -221 -1758 0
7923 -337 -219 -1760 0
7923 -337 -217 -1762 0
7923 -337 -215 -1764 0
7923 -337 -213 -1766 0
7923 -337 -212 -1768 0
7923 -335 -1754 0
7923 -335 -225 -1756 0
7923 -335 -223 -1758 0
7923 -335 -221 -1760 0
7923 -335 -219 -1762 0
7923 -335 -217 -1764 0
7923 -335 -215 -1766 0
7923 -335 -213 -1768 0
7923 -335 -212 0
7923 -333 -1756 0
7923 -333 -225 -1758 0
7923 -333 -223 -1760 0
7923 -333 -221 -1762 0
7923 -333 -219 -1764 0
7923 -333 -217 -1766 0
7923 -333 -215 -1768 0
7923 -333 -213 0
7923 -333 -212 0
7923 -332 -1758 0
7923 -332 -225 -1760 0
7923 -332 -223 -1762 0
7923 -332 -221 -1764 0
7923 -332 -219 -1766 0
7923 -332 -217 -1768 0
7923 -332 -215 0
7923 -332 -213 0
7923 -332 -212 0
c ((18<=(aux437 + shift(x_00003_00005, -1) + shift(x_00002_00006, -1)))=tv=SATLiteral(7924))
-7924 -1740 0
-7924 -225 -1742 0
-7924 -223 -1744 0
-7924 -221 -1746 0
-7924 -219 -1748 0
-7924 -217 -1750 0
-7924 -215 -1752 0
-7924 -213 -1754 0
-7924 -212 -1756 0
-7924 -345 -1742 0
-7924 -345 -225 -1744 0
-7924 -345 -223 -1746 0
-7924 -345 -221 -1748 0
-7924 -345 -219 -1750 0
-7924 -345 -217 -1752 0
-7924 -345 -215 -1754 0
-7924 -345 -213 -1756 0
-7924 -345 -212 -1758 0
-7924 -343 -1744 0
-7924 -343 -225 -1746 0
-7924 -343 -223 -1748 0
-7924 -343 -221 -1750 0
-7924 -343 -219 -1752 0
-7924 -343 -217 -1754 0
-7924 -343 -215 -1756 0
-7924 -343 -213 -1758 0
-7924 -343 -212 -1760 0
-7924 -341 -1746 0
-7924 -341 -225 -1748 0
-7924 -341 -223 -1750 0
-7924 -341 -221 -1752 0
-7924 -341 -219 -1754 0
-7924 -341 -217 -1756 0
-7924 -341 -215 -1758 0
-7924 -341 -213 -1760 0
-7924 -341 -212 -1762 0
-7924 -339 -1748 0
-7924 -339 -225 -1750 0
-7924 -339 -223 -1752 0
-7924 -339 -221 -1754 0
-7924 -339 -219 -1756 0
-7924 -339 -217 -1758 0
-7924 -339 -215 -1760 0
-7924 -339 -213 -1762 0
-7924 -339 -212 -1764 0
-7924 -337 -1750 0
-7924 -337 -225 -1752 0
-7924 -337 -223 -1754 0
-7924 -337 -221 -1756 0
-7924 -337 -219 -1758 0
-7924 -337 -217 -1760 0
-7924 -337 -215 -1762 0
-7924 -337 -213 -1764 0
-7924 -337 -212 -1766 0
-7924 -335 -1752 0
-7924 -335 -225 -1754 0
-7924 -335 -223 -1756 0
-7924 -335 -221 -1758 0
-7924 -335 -219 -1760 0
-7924 -335 -217 -1762 0
-7924 -335 -215 -1764 0
-7924 -335 -213 -1766 0
-7924 -335 -212 -1768 0
-7924 -333 -1754 0
-7924 -333 -225 -1756 0
-7924 -333 -223 -1758 0
-7924 -333 -221 -1760 0
-7924 -333 -219 -1762 0
-7924 -333 -217 -1764 0
-7924 -333 -215 -1766 0
-7924 -333 -213 -1768 0
-7924 -333 -212 0
-7924 -332 -1756 0
-7924 -332 -225 -1758 0
-7924 -332 -223 -1760 0
-7924 -332 -221 -1762 0
-7924 -332 -219 -1764 0
-7924 -332 -217 -1766 0
-7924 -332 -215 -1768 0
-7924 -332 -213 0
-7924 -332 -212 0
7924 213 1768 0
7924 215 1766 0
7924 217 1764 0
7924 219 1762 0
7924 221 1760 0
7924 223 1758 0
7924 225 1756 0
7924 332 212 1768 0
7924 332 213 1766 0
7924 332 215 1764 0
7924 332 217 1762 0
7924 332 219 1760 0
7924 332 221 1758 0
7924 332 223 1756 0
7924 332 225 1754 0
7924 333 1768 0
7924 333 212 1766 0
7924 333 213 1764 0
7924 333 215 1762 0
7924 333 217 1760 0
7924 333 219 1758 0
7924 333 221 1756 0
7924 333 223 1754 0
7924 333 225 1752 0
7924 335 1766 0
7924 335 212 1764 0
7924 335 213 1762 0
7924 335 215 1760 0
7924 335 217 1758 0
7924 335 219 1756 0
7924 335 221 1754 0
7924 335 223 1752 0
7924 335 225 1750 0
7924 337 1764 0
7924 337 212 1762 0
7924 337 213 1760 0
7924 337 215 1758 0
7924 337 217 1756 0
7924 337 219 1754 0
7924 337 221 1752 0
7924 337 223 1750 0
7924 337 225 1748 0
7924 339 1762 0
7924 339 212 1760 0
7924 339 213 1758 0
7924 339 215 1756 0
7924 339 217 1754 0
7924 339 219 1752 0
7924 339 221 1750 0
7924 339 223 1748 0
7924 339 225 1746 0
7924 341 1760 0
7924 341 212 1758 0
7924 341 213 1756 0
7924 341 215 1754 0
7924 341 217 1752 0
7924 341 219 1750 0
7924 341 221 1748 0
7924 341 223 1746 0
7924 341 225 1744 0
7924 343 1758 0
7924 343 212 1756 0
7924 343 213 1754 0
7924 343 215 1752 0
7924 343 217 1750 0
7924 343 219 1748 0
7924 343 221 1746 0
7924 343 223 1744 0
7924 343 225 1742 0
7924 345 1756 0
7924 345 212 1754 0
7924 345 213 1752 0
7924 345 215 1750 0
7924 345 217 1748 0
7924 345 219 1746 0
7924 345 221 1744 0
7924 345 223 1742 0
7924 345 225 1740 0
c (((x_00002_00007 + x_00001_00007)<=4)=tv=SATLiteral(7925))
-7925 95 0
-7925 227 93 0
-7925 228 92 0
-7925 230 0
-7925 232 0
-7925 234 0
-7925 236 0
-7925 238 0
-7925 240 0
7925 -230 -92 0
7925 -228 -93 0
7925 -227 -95 0
c ((4<=(x_00002_00007 + x_00001_00007))=tv=SATLiteral(7926))
-7926 -228 -92 0
-7926 -227 -93 0
7926 93 0
7926 227 92 0
7926 228 0
7926 230 0
7926 232 0
7926 234 0
7926 236 0
7926 238 0
7926 240 0
c (((x_00002_00008 + x_00001_00008)<=16)=tv=SATLiteral(7927))
-7927 253 120 0
-7927 255 118 0
7927 -118 0
7927 -255 -120 0
7927 -253 0
7927 -251 0
7927 -249 0
7927 -247 0
7927 -245 0
7927 -243 0
7927 -242 0
c ((16<=(x_00002_00008 + x_00001_00008))=tv=SATLiteral(7928))
-7928 -116 0
-7928 -255 -118 0
-7928 -253 -120 0
-7928 -251 0
-7928 -249 0
-7928 -247 0
-7928 -245 0
-7928 -243 0
-7928 -242 0
7928 251 120 0
7928 253 118 0
7928 255 116 0
c (((aux438 + shift(x_00003_00009, -1) + shift(x_00004_00009, -1))<=11)=tv=SATLiteral(7929))
-7929 1791 0
-7929 527 1789 0
-7929 528 1787 0
-7929 530 1785 0
-7929 532 1783 0
-7929 534 1781 0
-7929 536 1779 0
-7929 538 1777 0
-7929 540 1775 0
-7929 392 1789 0
-7929 392 527 1787 0
-7929 392 528 1785 0
-7929 392 530 1783 0
-7929 392 532 1781 0
-7929 392 534 1779 0
-7929 392 536 1777 0
-7929 392 538 1775 0
-7929 392 540 1773 0
-7929 393 1787 0
-7929 393 527 1785 0
-7929 393 528 1783 0
-7929 393 530 1781 0
-7929 393 532 1779 0
-7929 393 534 1777 0
-7929 393 536 1775 0
-7929 393 538 1773 0
-7929 393 540 1771 0
-7929 395 1785 0
-7929 395 527 1783 0
-7929 395 528 1781 0
-7929 395 530 1779 0
-7929 395 532 1777 0
-7929 395 534 1775 0
-7929 395 536 1773 0
-7929 395 538 1771 0
-7929 395 540 1770 0
-7929 397 1783 0
-7929 397 527 1781 0
-7929 397 528 1779 0
-7929 397 530 1777 0
-7929 397 532 1775 0
-7929 397 534 1773 0
-7929 397 536 1771 0
-7929 397 538 1770 0
-7929 397 540 0
-7929 399 1781 0
-7929 399 527 1779 0
-7929 399 528 1777 0
-7929 399 530 1775 0
-7929 399 532 1773 0
-7929 399 534 1771 0
-7929 399 536 1770 0
-7929 399 538 0
-7929 399 540 0
-7929 401 1779 0
-7929 401 527 1777 0
-7929 401 528 1775 0
-7929 401 530 1773 0
-7929 401 532 1771 0
-7929 401 534 1770 0
-7929 401 536 0
-7929 401 538 0
-7929 401 540 0
-7929 403 1777 0
-7929 403 527 1775 0
-7929 403 528 1773 0
-7929 403 530 1771 0
-7929 403 532 1770 0
-7929 403 534 0
-7929 403 536 0
-7929 403 538 0
-7929 403 540 0
-7929 405 1775 0
-7929 405 527 1773 0
-7929 405 528 1771 0
-7929 405 530 1770 0
-7929 405 532 0
-7929 405 534 0
-7929 405 536 0
-7929 405 538 0
-7929 405 540 0
7929 -532 -1770 0
7929 -530 -1771 0
7929 -528 -1773 0
7929 -527 -1775 0
7929 -405 -534 -1770 0
7929 -405 -532 -1771 0
7929 -405 -530 -1773 0
7929 -405 -528 -1775 0
7929 -405 -527 -1777 0
7929 -403 -536 -1770 0
7929 -403 -534 -1771 0
7929 -403 -532 -1773 0
7929 -403 -530 -1775 0
7929 -403 -528 -1777 0
7929 -403 -527 -1779 0
7929 -401 -538 -1770 0
7929 -401 -536 -1771 0
7929 -401 -534 -1773 0
7929 -401 -532 -1775 0
7929 -401 -530 -1777 0
7929 -401 -528 -1779 0
7929 -401 -527 -1781 0
7929 -399 -540 -1770 0
7929 -399 -538 -1771 0
7929 -399 -536 -1773 0
7929 -399 -534 -1775 0
7929 -399 -532 -1777 0
7929 -399 -530 -1779 0
7929 -399 -528 -1781 0
7929 -399 -527 -1783 0
7929 -397 -1770 0
7929 -397 -540 -1771 0
7929 -397 -538 -1773 0
7929 -397 -536 -1775 0
7929 -397 -534 -1777 0
7929 -397 -532 -1779 0
7929 -397 -530 -1781 0
7929 -397 -528 -1783 0
7929 -397 -527 -1785 0
7929 -395 -1771 0
7929 -395 -540 -1773 0
7929 -395 -538 -1775 0
7929 -395 -536 -1777 0
7929 -395 -534 -1779 0
7929 -395 -532 -1781 0
7929 -395 -530 -1783 0
7929 -395 -528 -1785 0
7929 -395 -527 -1787 0
7929 -393 -1773 0
7929 -393 -540 -1775 0
7929 -393 -538 -1777 0
7929 -393 -536 -1779 0
7929 -393 -534 -1781 0
7929 -393 -532 -1783 0
7929 -393 -530 -1785 0
7929 -393 -528 -1787 0
7929 -393 -527 -1789 0
7929 -392 -1775 0
7929 -392 -540 -1777 0
7929 -392 -538 -1779 0
7929 -392 -536 -1781 0
7929 -392 -534 -1783 0
7929 -392 -532 -1785 0
7929 -392 -530 -1787 0
7929 -392 -528 -1789 0
7929 -392 -527 -1791 0
c ((11<=(aux438 + shift(x_00003_00009, -1) + shift(x_00004_00009, -1)))=tv=SATLiteral(7930))
-7930 -530 -1770 0
-7930 -528 -1771 0
-7930 -527 -1773 0
-7930 -405 -532 -1770 0
-7930 -405 -530 -1771 0
-7930 -405 -528 -1773 0
-7930 -405 -527 -1775 0
-7930 -403 -534 -1770 0
-7930 -403 -532 -1771 0
-7930 -403 -530 -1773 0
-7930 -403 -528 -1775 0
-7930 -403 -527 -1777 0
-7930 -401 -536 -1770 0
-7930 -401 -534 -1771 0
-7930 -401 -532 -1773 0
-7930 -401 -530 -1775 0
-7930 -401 -528 -1777 0
-7930 -401 -527 -1779 0
-7930 -399 -538 -1770 0
-7930 -399 -536 -1771 0
-7930 -399 -534 -1773 0
-7930 -399 -532 -1775 0
-7930 -399 -530 -1777 0
-7930 -399 -528 -1779 0
-7930 -399 -527 -1781 0
-7930 -397 -540 -1770 0
-7930 -397 -538 -1771 0
-7930 -397 -536 -1773 0
-7930 -397 -534 -1775 0
-7930 -397 -532 -1777 0
-7930 -397 -530 -1779 0
-7930 -397 -528 -1781 0
-7930 -397 -527 -1783 0
-7930 -395 -1770 0
-7930 -395 -540 -1771 0
-7930 -395 -538 -1773 0
-7930 -395 -536 -1775 0
-7930 -395 -534 -1777 0
-7930 -395 -532 -1779 0
-7930 -395 -530 -1781 0
-7930 -395 -528 -1783 0
-7930 -395 -527 -1785 0
-7930 -393 -1771 0
-7930 -393 -540 -1773 0
-7930 -393 -538 -1775 0
-7930 -393 -536 -1777 0
-7930 -393 -534 -1779 0
-7930 -393 -532 -1781 0
-7930 -393 -530 -1783 0
-7930 -393 -528 -1785 0
-7930 -393 -527 -1787 0
-7930 -392 -1773 0
-7930 -392 -540 -1775 0
-7930 -392 -538 -1777 0
-7930 -392 -536 -1779 0
-7930 -392 -534 -1781 0
-7930 -392 -532 -1783 0
-7930 -392 -530 -1785 0
-7930 -392 -528 -1787 0
-7930 -392 -527 -1789 0
7930 1789 0
7930 527 1787 0
7930 528 1785 0
7930 530 1783 0
7930 532 1781 0
7930 534 1779 0
7930 536 1777 0
7930 538 1775 0
7930 540 1773 0
7930 392 1787 0
7930 392 527 1785 0
7930 392 528 1783 0
7930 392 530 1781 0
7930 392 532 1779 0
7930 392 534 1777 0
7930 392 536 1775 0
7930 392 538 1773 0
7930 392 540 1771 0
7930 393 1785 0
7930 393 527 1783 0
7930 393 528 1781 0
7930 393 530 1779 0
7930 393 532 1777 0
7930 393 534 1775 0
7930 393 536 1773 0
7930 393 538 1771 0
7930 393 540 1770 0
7930 395 1783 0
7930 395 527 1781 0
7930 395 528 1779 0
7930 395 530 1777 0
7930 395 532 1775 0
7930 395 534 1773 0
7930 395 536 1771 0
7930 395 538 1770 0
7930 395 540 0
7930 397 1781 0
7930 397 527 1779 0
7930 397 528 1777 0
7930 397 530 1775 0
7930 397 532 1773 0
7930 397 534 1771 0
7930 397 536 1770 0
7930 397 538 0
7930 397 540 0
7930 399 1779 0
7930 399 527 1777 0
7930 399 528 1775 0
7930 399 530 1773 0
7930 399 532 1771 0
7930 399 534 1770 0
7930 399 536 0
7930 399 538 0
7930 399 540 0
7930 401 1777 0
7930 401 527 1775 0
7930 401 528 1773 0
7930 401 530 1771 0
7930 401 532 1770 0
7930 401 534 0
7930 401 536 0
7930 401 538 0
7930 401 540 0
7930 403 1775 0
7930 403 527 1773 0
7930 403 528 1771 0
7930 403 530 1770 0
7930 403 532 0
7930 403 534 0
7930 403 536 0
7930 403 538 0
7930 403 540 0
7930 405 1773 0
7930 405 527 1771 0
7930 405 528 1770 0
7930 405 530 0
7930 405 532 0
7930 405 534 0
7930 405 536 0
7930 405 538 0
7930 405 540 0
c (((aux439 + shift(x_00003_00001, -1) + shift(x_00002_00002, -1))<=21)=tv=SATLiteral(7931))
-7931 161 1830 0
-7931 163 1828 0
-7931 165 1826 0
-7931 272 159 1830 0
-7931 272 161 1828 0
-7931 272 163 1826 0
-7931 272 165 1824 0
-7931 273 157 1830 0
-7931 273 159 1828 0
-7931 273 161 1826 0
-7931 273 163 1824 0
-7931 273 165 1822 0
-7931 275 155 1830 0
-7931 275 157 1828 0
-7931 275 159 1826 0
-7931 275 161 1824 0
-7931 275 163 1822 0
-7931 275 165 1820 0
-7931 277 153 1830 0
-7931 277 155 1828 0
-7931 277 157 1826 0
-7931 277 159 1824 0
-7931 277 161 1822 0
-7931 277 163 1820 0
-7931 277 165 1818 0
-7931 279 152 1830 0
-7931 279 153 1828 0
-7931 279 155 1826 0
-7931 279 157 1824 0
-7931 279 159 1822 0
-7931 279 161 1820 0
-7931 279 163 1818 0
-7931 279 165 1816 0
-7931 281 1830 0
-7931 281 152 1828 0
-7931 281 153 1826 0
-7931 281 155 1824 0
-7931 281 157 1822 0
-7931 281 159 1820 0
-7931 281 161 1818 0
-7931 281 163 1816 0
-7931 281 165 1814 0
-7931 283 1828 0
-7931 283 152 1826 0
-7931 283 153 1824 0
-7931 283 155 1822 0
-7931 283 157 1820 0
-7931 283 159 1818 0
-7931 283 161 1816 0
-7931 283 163 1814 0
-7931 283 165 1812 0
-7931 285 1826 0
-7931 285 152 1824 0
-7931 285 153 1822 0
-7931 285 155 1820 0
-7931 285 157 1818 0
-7931 285 159 1816 0
-7931 285 161 1814 0
-7931 285 163 1812 0
-7931 285 165 1810 0
7931 -1810 0
7931 -165 -1812 0
7931 -163 -1814 0
7931 -161 -1816 0
7931 -159 -1818 0
7931 -157 -1820 0
7931 -155 -1822 0
7931 -153 -1824 0
7931 -152 -1826 0
7931 -285 -1812 0
7931 -285 -165 -1814 0
7931 -285 -163 -1816 0
7931 -285 -161 -1818 0
7931 -285 -159 -1820 0
7931 -285 -157 -1822 0
7931 -285 -155 -1824 0
7931 -285 -153 -1826 0
7931 -285 -152 -1828 0
7931 -283 -1814 0
7931 -283 -165 -1816 0
7931 -283 -163 -1818 0
7931 -283 -161 -1820 0
7931 -283 -159 -1822 0
7931 -283 -157 -1824 0
7931 -283 -155 -1826 0
7931 -283 -153 -1828 0
7931 -283 -152 -1830 0
7931 -281 -1816 0
7931 -281 -165 -1818 0
7931 -281 -163 -1820 0
7931 -281 -161 -1822 0
7931 -281 -159 -1824 0
7931 -281 -157 -1826 0
7931 -281 -155 -1828 0
7931 -281 -153 -1830 0
7931 -281 -152 0
7931 -279 -1818 0
7931 -279 -165 -1820 0
7931 -279 -163 -1822 0
7931 -279 -161 -1824 0
7931 -279 -159 -1826 0
7931 -279 -157 -1828 0
7931 -279 -155 -1830 0
7931 -279 -153 0
7931 -279 -152 0
7931 -277 -1820 0
7931 -277 -165 -1822 0
7931 -277 -163 -1824 0
7931 -277 -161 -1826 0
7931 -277 -159 -1828 0
7931 -277 -157 -1830 0
7931 -277 -155 0
7931 -277 -153 0
7931 -277 -152 0
7931 -275 -1822 0
7931 -275 -165 -1824 0
7931 -275 -163 -1826 0
7931 -275 -161 -1828 0
7931 -275 -159 -1830 0
7931 -275 -157 0
7931 -275 -155 0
7931 -275 -153 0
7931 -275 -152 0
7931 -273 -1824 0
7931 -273 -165 -1826 0
7931 -273 -163 -1828 0
7931 -273 -161 -1830 0
7931 -273 -159 0
7931 -273 -157 0
7931 -273 -155 0
7931 -273 -153 0
7931 -273 -152 0
7931 -272 -1826 0
7931 -272 -165 -1828 0
7931 -272 -163 -1830 0
7931 -272 -161 0
7931 -272 -159 0
7931 -272 -157 0
7931 -272 -155 0
7931 -272 -153 0
7931 -272 -152 0
c ((21<=(aux439 + shift(x_00003_00001, -1) + shift(x_00002_00002, -1)))=tv=SATLiteral(7932))
-7932 -1808 0
-7932 -165 -1810 0
-7932 -163 -1812 0
-7932 -161 -1814 0
-7932 -159 -1816 0
-7932 -157 -1818 0
-7932 -155 -1820 0
-7932 -153 -1822 0
-7932 -152 -1824 0
-7932 -285 -1810 0
-7932 -285 -165 -1812 0
-7932 -285 -163 -1814 0
-7932 -285 -161 -1816 0
-7932 -285 -159 -1818 0
-7932 -285 -157 -1820 0
-7932 -285 -155 -1822 0
-7932 -285 -153 -1824 0
-7932 -285 -152 -1826 0
-7932 -283 -1812 0
-7932 -283 -165 -1814 0
-7932 -283 -163 -1816 0
-7932 -283 -161 -1818 0
-7932 -283 -159 -1820 0
-7932 -283 -157 -1822 0
-7932 -283 -155 -1824 0
-7932 -283 -153 -1826 0
-7932 -283 -152 -1828 0
-7932 -281 -1814 0
-7932 -281 -165 -1816 0
-7932 -281 -163 -1818 0
-7932 -281 -161 -1820 0
-7932 -281 -159 -1822 0
-7932 -281 -157 -1824 0
-7932 -281 -155 -1826 0
-7932 -281 -153 -1828 0
-7932 -281 -152 -1830 0
-7932 -279 -1816 0
-7932 -279 -165 -1818 0
-7932 -279 -163 -1820 0
-7932 -279 -161 -1822 0
-7932 -279 -159 -1824 0
-7932 -279 -157 -1826 0
-7932 -279 -155 -1828 0
-7932 -279 -153 -1830 0
-7932 -279 -152 0
-7932 -277 -1818 0
-7932 -277 -165 -1820 0
-7932 -277 -163 -1822 0
-7932 -277 -161 -1824 0
-7932 -277 -159 -1826 0
-7932 -277 -157 -1828 0
-7932 -277 -155 -1830 0
-7932 -277 -153 0
-7932 -277 -152 0
-7932 -275 -1820 0
-7932 -275 -165 -1822 0
-7932 -275 -163 -1824 0
-7932 -275 -161 -1826 0
-7932 -275 -159 -1828 0
-7932 -275 -157 -1830 0
-7932 -275 -155 0
-7932 -275 -153 0
-7932 -275 -152 0
-7932 -273 -1822 0
-7932 -273 -165 -1824 0
-7932 -273 -163 -1826 0
-7932 -273 -161 -1828 0
-7932 -273 -159 -1830 0
-7932 -273 -157 0
-7932 -273 -155 0
-7932 -273 -153 0
-7932 -273 -152 0
-7932 -272 -1824 0
-7932 -272 -165 -1826 0
-7932 -272 -163 -1828 0
-7932 -272 -161 -1830 0
-7932 -272 -159 0
-7932 -272 -157 0
-7932 -272 -155 0
-7932 -272 -153 0
-7932 -272 -152 0
7932 159 1830 0
7932 161 1828 0
7932 163 1826 0
7932 165 1824 0
7932 272 157 1830 0
7932 272 159 1828 0
7932 272 161 1826 0
7932 272 163 1824 0
7932 272 165 1822 0
7932 273 155 1830 0
7932 273 157 1828 0
7932 273 159 1826 0
7932 273 161 1824 0
7932 273 163 1822 0
7932 273 165 1820 0
7932 275 153 1830 0
7932 275 155 1828 0
7932 275 157 1826 0
7932 275 159 1824 0
7932 275 161 1822 0
7932 275 163 1820 0
7932 275 165 1818 0
7932 277 152 1830 0
7932 277 153 1828 0
7932 277 155 1826 0
7932 277 157 1824 0
7932 277 159 1822 0
7932 277 161 1820 0
7932 277 163 1818 0
7932 277 165 1816 0
7932 279 1830 0
7932 279 152 1828 0
7932 279 153 1826 0
7932 279 155 1824 0
7932 279 157 1822 0
7932 279 159 1820 0
7932 279 161 1818 0
7932 279 163 1816 0
7932 279 165 1814 0
7932 281 1828 0
7932 281 152 1826 0
7932 281 153 1824 0
7932 281 155 1822 0
7932 281 157 1820 0
7932 281 159 1818 0
7932 281 161 1816 0
7932 281 163 1814 0
7932 281 165 1812 0
7932 283 1826 0
7932 283 152 1824 0
7932 283 153 1822 0
7932 283 155 1820 0
7932 283 157 1818 0
7932 283 159 1816 0
7932 283 161 1814 0
7932 283 163 1812 0
7932 283 165 1810 0
7932 285 1824 0
7932 285 152 1822 0
7932 285 153 1820 0
7932 285 155 1818 0
7932 285 157 1816 0
7932 285 159 1814 0
7932 285 161 1812 0
7932 285 163 1810 0
7932 285 165 1808 0
c (((x_00002_00003 + x_00002_00004)<=17)=tv=SATLiteral(7933))
-7933 180 195 0
7933 -195 0
7933 -180 0
7933 -178 0
7933 -176 0
7933 -174 0
7933 -172 0
7933 -170 0
7933 -168 0
7933 -167 0
c ((17<=(x_00002_00003 + x_00002_00004))=tv=SATLiteral(7934))
-7934 -193 0
-7934 -180 -195 0
-7934 -178 0
-7934 -176 0
-7934 -174 0
-7934 -172 0
-7934 -170 0
-7934 -168 0
-7934 -167 0
7934 178 195 0
7934 180 193 0
c (((x_00003_00003 + x_00003_00004 + x_00004_00004)<=9)=tv=SATLiteral(7935))
-7935 463 0
-7935 317 461 0
-7935 318 459 0
-7935 320 457 0
-7935 322 455 0
-7935 324 453 0
-7935 326 452 0
-7935 328 0
-7935 330 0
-7935 302 461 0
-7935 302 317 459 0
-7935 302 318 457 0
-7935 302 320 455 0
-7935 302 322 453 0
-7935 302 324 452 0
-7935 302 326 0
-7935 302 328 0
-7935 302 330 0
-7935 303 459 0
-7935 303 317 457 0
-7935 303 318 455 0
-7935 303 320 453 0
-7935 303 322 452 0
-7935 303 324 0
-7935 303 326 0
-7935 303 328 0
-7935 303 330 0
-7935 305 457 0
-7935 305 317 455 0
-7935 305 318 453 0
-7935 305 320 452 0
-7935 305 322 0
-7935 305 324 0
-7935 305 326 0
-7935 305 328 0
-7935 305 330 0
-7935 307 455 0
-7935 307 317 453 0
-7935 307 318 452 0
-7935 307 320 0
-7935 307 322 0
-7935 307 324 0
-7935 307 326 0
-7935 307 328 0
-7935 307 330 0
-7935 309 453 0
-7935 309 317 452 0
-7935 309 318 0
-7935 309 320 0
-7935 309 322 0
-7935 309 324 0
-7935 309 326 0
-7935 309 328 0
-7935 309 330 0
-7935 311 452 0
-7935 311 317 0
-7935 311 318 0
-7935 311 320 0
-7935 311 322 0
-7935 311 324 0
-7935 311 326 0
-7935 311 328 0
-7935 311 330 0
-7935 313 0
-7935 313 317 0
-7935 313 318 0
-7935 313 320 0
-7935 313 322 0
-7935 313 324 0
-7935 313 326 0
-7935 313 328 0
-7935 313 330 0
-7935 315 0
-7935 315 317 0
-7935 315 318 0
-7935 315 320 0
-7935 315 322 0
-7935 315 324 0
-7935 315 326 0
-7935 315 328 0
-7935 315 330 0
7935 -313 -317 -452 0
7935 -311 -318 -452 0
7935 -311 -317 -453 0
7935 -309 -320 -452 0
7935 -309 -318 -453 0
7935 -309 -317 -455 0
7935 -307 -322 -452 0
7935 -307 -320 -453 0
7935 -307 -318 -455 0
7935 -307 -317 -457 0
7935 -305 -324 -452 0
7935 -305 -322 -453 0
7935 -305 -320 -455 0
7935 -305 -318 -457 0
7935 -305 -317 -459 0
7935 -303 -326 -452 0
7935 -303 -324 -453 0
7935 -303 -322 -455 0
7935 -303 -320 -457 0
7935 -303 -318 -459 0
7935 -303 -317 -461 0
7935 -302 -328 -452 0
7935 -302 -326 -453 0
7935 -302 -324 -455 0
7935 -302 -322 -457 0
7935 -302 -320 -459 0
7935 -302 -318 -461 0
7935 -302 -317 -463 0
c ((9<=(x_00003_00003 + x_00003_00004 + x_00004_00004))=tv=SATLiteral(7936))
-7936 -311 -317 -452 0
-7936 -309 -318 -452 0
-7936 -309 -317 -453 0
-7936 -307 -320 -452 0
-7936 -307 -318 -453 0
-7936 -307 -317 -455 0
-7936 -305 -322 -452 0
-7936 -305 -320 -453 0
-7936 -305 -318 -455 0
-7936 -305 -317 -457 0
-7936 -303 -324 -452 0
-7936 -303 -322 -453 0
-7936 -303 -320 -455 0
-7936 -303 -318 -457 0
-7936 -303 -317 -459 0
-7936 -302 -326 -452 0
-7936 -302 -324 -453 0
-7936 -302 -322 -455 0
-7936 -302 -320 -457 0
-7936 -302 -318 -459 0
-7936 -302 -317 -461 0
7936 461 0
7936 317 459 0
7936 318 457 0
7936 320 455 0
7936 322 453 0
7936 324 452 0
7936 326 0
7936 328 0
7936 330 0
7936 302 459 0
7936 302 317 457 0
7936 302 318 455 0
7936 302 320 453 0
7936 302 322 452 0
7936 302 324 0
7936 302 326 0
7936 302 328 0
7936 302 330 0
7936 303 457 0
7936 303 317 455 0
7936 303 318 453 0
7936 303 320 452 0
7936 303 322 0
7936 303 324 0
7936 303 326 0
7936 303 328 0
7936 303 330 0
7936 305 455 0
7936 305 317 453 0
7936 305 318 452 0
7936 305 320 0
7936 305 322 0
7936 305 324 0
7936 305 326 0
7936 305 328 0
7936 305 330 0
7936 307 453 0
7936 307 317 452 0
7936 307 318 0
7936 307 320 0
7936 307 322 0
7936 307 324 0
7936 307 326 0
7936 307 328 0
7936 307 330 0
7936 309 452 0
7936 309 317 0
7936 309 318 0
7936 309 320 0
7936 309 322 0
7936 309 324 0
7936 309 326 0
7936 309 328 0
7936 309 330 0
7936 311 0
7936 311 317 0
7936 311 318 0
7936 311 320 0
7936 311 322 0
7936 311 324 0
7936 311 326 0
7936 311 328 0
7936 311 330 0
7936 313 0
7936 313 317 0
7936 313 318 0
7936 313 320 0
7936 313 322 0
7936 313 324 0
7936 313 326 0
7936 313 328 0
7936 313 330 0
7936 315 0
7936 315 317 0
7936 315 318 0
7936 315 320 0
7936 315 322 0
7936 315 324 0
7936 315 326 0
7936 315 328 0
7936 315 330 0
c (((x_00003_00006 + x_00004_00006 + x_00005_00006)<=8)=tv=SATLiteral(7937))
-7937 626 0
-7937 482 624 0
-7937 483 622 0
-7937 485 620 0
-7937 487 618 0
-7937 489 617 0
-7937 491 0
-7937 493 0
-7937 495 0
-7937 347 624 0
-7937 347 482 622 0
-7937 347 483 620 0
-7937 347 485 618 0
-7937 347 487 617 0
-7937 347 489 0
-7937 347 491 0
-7937 347 493 0
-7937 347 495 0
-7937 348 622 0
-7937 348 482 620 0
-7937 348 483 618 0
-7937 348 485 617 0
-7937 348 487 0
-7937 348 489 0
-7937 348 491 0
-7937 348 493 0
-7937 348 495 0
-7937 350 620 0
-7937 350 482 618 0
-7937 350 483 617 0
-7937 350 485 0
-7937 350 487 0
-7937 350 489 0
-7937 350 491 0
-7937 350 493 0
-7937 350 495 0
-7937 352 618 0
-7937 352 482 617 0
-7937 352 483 0
-7937 352 485 0
-7937 352 487 0
-7937 352 489 0
-7937 352 491 0
-7937 352 493 0
-7937 352 495 0
-7937 354 617 0
-7937 354 482 0
-7937 354 483 0
-7937 354 485 0
-7937 354 487 0
-7937 354 489 0
-7937 354 491 0
-7937 354 493 0
-7937 354 495 0
-7937 356 0
-7937 356 482 0
-7937 356 483 0
-7937 356 485 0
-7937 356 487 0
-7937 356 489 0
-7937 356 491 0
-7937 356 493 0
-7937 356 495 0
-7937 358 0
-7937 358 482 0
-7937 358 483 0
-7937 358 485 0
-7937 358 487 0
-7937 358 489 0
-7937 358 491 0
-7937 358 493 0
-7937 358 495 0
-7937 360 0
-7937 360 482 0
-7937 360 483 0
-7937 360 485 0
-7937 360 487 0
-7937 360 489 0
-7937 360 491 0
-7937 360 493 0
-7937 360 495 0
7937 -356 -482 -617 0
7937 -354 -483 -617 0
7937 -354 -482 -618 0
7937 -352 -485 -617 0
7937 -352 -483 -618 0
7937 -352 -482 -620 0
7937 -350 -487 -617 0
7937 -350 -485 -618 0
7937 -350 -483 -620 0
7937 -350 -482 -622 0
7937 -348 -489 -617 0
7937 -348 -487 -618 0
7937 -348 -485 -620 0
7937 -348 -483 -622 0
7937 -348 -482 -624 0
7937 -347 -491 -617 0
7937 -347 -489 -618 0
7937 -347 -487 -620 0
7937 -347 -485 -622 0
7937 -347 -483 -624 0
7937 -347 -482 -626 0
c ((8<=(x_00003_00006 + x_00004_00006 + x_00005_00006))=tv=SATLiteral(7938))
-7938 -354 -482 -617 0
-7938 -352 -483 -617 0
-7938 -352 -482 -618 0
-7938 -350 -485 -617 0
-7938 -350 -483 -618 0
-7938 -350 -482 -620 0
-7938 -348 -487 -617 0
-7938 -348 -485 -618 0
-7938 -348 -483 -620 0
-7938 -348 -482 -622 0
-7938 -347 -489 -617 0
-7938 -347 -487 -618 0
-7938 -347 -485 -620 0
-7938 -347 -483 -622 0
-7938 -347 -482 -624 0
7938 624 0
7938 482 622 0
7938 483 620 0
7938 485 618 0
7938 487 617 0
7938 489 0
7938 491 0
7938 493 0
7938 495 0
7938 347 622 0
7938 347 482 620 0
7938 347 483 618 0
7938 347 485 617 0
7938 347 487 0
7938 347 489 0
7938 347 491 0
7938 347 493 0
7938 347 495 0
7938 348 620 0
7938 348 482 618 0
7938 348 483 617 0
7938 348 485 0
7938 348 487 0
7938 348 489 0
7938 348 491 0
7938 348 493 0
7938 348 495 0
7938 350 618 0
7938 350 482 617 0
7938 350 483 0
7938 350 485 0
7938 350 487 0
7938 350 489 0
7938 350 491 0
7938 350 493 0
7938 350 495 0
7938 352 617 0
7938 352 482 0
7938 352 483 0
7938 352 485 0
7938 352 487 0
7938 352 489 0
7938 352 491 0
7938 352 493 0
7938 352 495 0
7938 354 0
7938 354 482 0
7938 354 483 0
7938 354 485 0
7938 354 487 0
7938 354 489 0
7938 354 491 0
7938 354 493 0
7938 354 495 0
7938 356 0
7938 356 482 0
7938 356 483 0
7938 356 485 0
7938 356 487 0
7938 356 489 0
7938 356 491 0
7938 356 493 0
7938 356 495 0
7938 358 0
7938 358 482 0
7938 358 483 0
7938 358 485 0
7938 358 487 0
7938 358 489 0
7938 358 491 0
7938 358 493 0
7938 358 495 0
7938 360 0
7938 360 482 0
7938 360 483 0
7938 360 485 0
7938 360 487 0
7938 360 489 0
7938 360 491 0
7938 360 493 0
7938 360 495 0
c (((x_00003_00007 + x_00003_00008 + x_00004_00007)<=20)=tv=SATLiteral(7939))
-7939 363 390 510 0
-7939 365 388 510 0
-7939 365 390 508 0
-7939 367 386 510 0
-7939 367 388 508 0
-7939 367 390 506 0
-7939 369 384 510 0
-7939 369 386 508 0
-7939 369 388 506 0
-7939 369 390 504 0
-7939 371 382 510 0
-7939 371 384 508 0
-7939 371 386 506 0
-7939 371 388 504 0
-7939 371 390 502 0
-7939 373 380 510 0
-7939 373 382 508 0
-7939 373 384 506 0
-7939 373 386 504 0
-7939 373 388 502 0
-7939 373 390 500 0
-7939 375 378 510 0
-7939 375 380 508 0
-7939 375 382 506 0
-7939 375 384 504 0
-7939 375 386 502 0
-7939 375 388 500 0
-7939 375 390 498 0
7939 -498 0
7939 -390 -500 0
7939 -388 -502 0
7939 -386 -504 0
7939 -384 -506 0
7939 -382 -508 0
7939 -380 -510 0
7939 -378 0
7939 -377 0
7939 -375 -500 0
7939 -375 -390 -502 0
7939 -375 -388 -504 0
7939 -375 -386 -506 0
7939 -375 -384 -508 0
7939 -375 -382 -510 0
7939 -375 -380 0
7939 -375 -378 0
7939 -375 -377 0
7939 -373 -502 0
7939 -373 -390 -504 0
7939 -373 -388 -506 0
7939 -373 -386 -508 0
7939 -373 -384 -510 0
7939 -373 -382 0
7939 -373 -380 0
7939 -373 -378 0
7939 -373 -377 0
7939 -371 -504 0
7939 -371 -390 -506 0
7939 -371 -388 -508 0
7939 -371 -386 -510 0
7939 -371 -384 0
7939 -371 -382 0
7939 -371 -380 0
7939 -371 -378 0
7939 -371 -377 0
7939 -369 -506 0
7939 -369 -390 -508 0
7939 -369 -388 -510 0
7939 -369 -386 0
7939 -369 -384 0
7939 -369 -382 0
7939 -369 -380 0
7939 -369 -378 0
7939 -369 -377 0
7939 -367 -508 0
7939 -367 -390 -510 0
7939 -367 -388 0
7939 -367 -386 0
7939 -367 -384 0
7939 -367 -382 0
7939 -367 -380 0
7939 -367 -378 0
7939 -367 -377 0
7939 -365 -510 0
7939 -365 -390 0
7939 -365 -388 0
7939 -365 -386 0
7939 -365 -384 0
7939 -365 -382 0
7939 -365 -380 0
7939 -365 -378 0
7939 -365 -377 0
7939 -363 0
7939 -363 -390 0
7939 -363 -388 0
7939 -363 -386 0
7939 -363 -384 0
7939 -363 -382 0
7939 -363 -380 0
7939 -363 -378 0
7939 -363 -377 0
7939 -362 0
7939 -362 -390 0
7939 -362 -388 0
7939 -362 -386 0
7939 -362 -384 0
7939 -362 -382 0
7939 -362 -380 0
7939 -362 -378 0
7939 -362 -377 0
c ((20<=(x_00003_00007 + x_00003_00008 + x_00004_00007))=tv=SATLiteral(7940))
-7940 -497 0
-7940 -390 -498 0
-7940 -388 -500 0
-7940 -386 -502 0
-7940 -384 -504 0
-7940 -382 -506 0
-7940 -380 -508 0
-7940 -378 -510 0
-7940 -377 0
-7940 -375 -498 0
-7940 -375 -390 -500 0
-7940 -375 -388 -502 0
-7940 -375 -386 -504 0
-7940 -375 -384 -506 0
-7940 -375 -382 -508 0
-7940 -375 -380 -510 0
-7940 -375 -378 0
-7940 -375 -377 0
-7940 -373 -500 0
-7940 -373 -390 -502 0
-7940 -373 -388 -504 0
-7940 -373 -386 -506 0
-7940 -373 -384 -508 0
-7940 -373 -382 -510 0
-7940 -373 -380 0
-7940 -373 -378 0
-7940 -373 -377 0
-7940 -371 -502 0
-7940 -371 -390 -504 0
-7940 -371 -388 -506 0
-7940 -371 -386 -508 0
-7940 -371 -384 -510 0
-7940 -371 -382 0
-7940 -371 -380 0
-7940 -371 -378 0
-7940 -371 -377 0
-7940 -369 -504 0
-7940 -369 -390 -506 0
-7940 -369 -388 -508 0
-7940 -369 -386 -510 0
-7940 -369 -384 0
-7940 -369 -382 0
-7940 -369 -380 0
-7940 -369 -378 0
-7940 -369 -377 0
-7940 -367 -506 0
-7940 -367 -390 -508 0
-7940 -367 -388 -510 0
-7940 -367 -386 0
-7940 -367 -384 0
-7940 -367 -382 0
-7940 -367 -380 0
-7940 -367 -378 0
-7940 -367 -377 0
-7940 -365 -508 0
-7940 -365 -390 -510 0
-7940 -365 -388 0
-7940 -365 -386 0
-7940 -365 -384 0
-7940 -365 -382 0
-7940 -365 -380 0
-7940 -365 -378 0
-7940 -365 -377 0
-7940 -363 -510 0
-7940 -363 -390 0
-7940 -363 -388 0
-7940 -363 -386 0
-7940 -363 -384 0
-7940 -363 -382 0
-7940 -363 -380 0
-7940 -363 -378 0
-7940 -363 -377 0
-7940 -362 0
-7940 -362 -390 0
-7940 -362 -388 0
-7940 -362 -386 0
-7940 -362 -384 0
-7940 -362 -382 0
-7940 -362 -380 0
-7940 -362 -378 0
-7940 -362 -377 0
7940 362 390 510 0
7940 363 388 510 0
7940 363 390 508 0
7940 365 386 510 0
7940 365 388 508 0
7940 365 390 506 0
7940 367 384 510 0
7940 367 386 508 0
7940 367 388 506 0
7940 367 390 504 0
7940 369 382 510 0
7940 369 384 508 0
7940 369 386 506 0
7940 369 388 504 0
7940 369 390 502 0
7940 371 380 510 0
7940 371 382 508 0
7940 371 384 506 0
7940 371 386 504 0
7940 371 388 502 0
7940 371 390 500 0
7940 373 378 510 0
7940 373 380 508 0
7940 373 382 506 0
7940 373 384 504 0
7940 373 386 502 0
7940 373 388 500 0
7940 373 390 498 0
7940 375 377 510 0
7940 375 378 508 0
7940 375 380 506 0
7940 375 382 504 0
7940 375 384 502 0
7940 375 386 500 0
7940 375 388 498 0
7940 375 390 497 0
c (((x_00004_00001 + x_00005_00001)<=6)=tv=SATLiteral(7941))
-7941 549 0
-7941 407 547 0
-7941 408 545 0
-7941 410 543 0
-7941 412 542 0
-7941 414 0
-7941 416 0
-7941 418 0
-7941 420 0
7941 -414 -542 0
7941 -412 -543 0
7941 -410 -545 0
7941 -408 -547 0
7941 -407 -549 0
c ((6<=(x_00004_00001 + x_00005_00001))=tv=SATLiteral(7942))
-7942 -412 -542 0
-7942 -410 -543 0
-7942 -408 -545 0
-7942 -407 -547 0
7942 547 0
7942 407 545 0
7942 408 543 0
7942 410 542 0
7942 412 0
7942 414 0
7942 416 0
7942 418 0
7942 420 0
c (((x_00004_00002 + x_00004_00003)<=14)=tv=SATLiteral(7943))
-7943 429 450 0
-7943 431 448 0
-7943 433 446 0
-7943 435 444 0
7943 -444 0
7943 -435 -446 0
7943 -433 -448 0
7943 -431 -450 0
7943 -429 0
7943 -427 0
7943 -425 0
7943 -423 0
7943 -422 0
c ((14<=(x_00004_00002 + x_00004_00003))=tv=SATLiteral(7944))
-7944 -442 0
-7944 -435 -444 0
-7944 -433 -446 0
-7944 -431 -448 0
-7944 -429 -450 0
-7944 -427 0
-7944 -425 0
-7944 -423 0
-7944 -422 0
7944 427 450 0
7944 429 448 0
7944 431 446 0
7944 433 444 0
7944 435 442 0
c (((x_00004_00005 + x_00005_00005 + x_00006_00005)<=17)=tv=SATLiteral(7945))
-7945 613 750 0
-7945 615 748 0
-7945 467 611 750 0
-7945 467 613 748 0
-7945 467 615 746 0
-7945 468 609 750 0
-7945 468 611 748 0
-7945 468 613 746 0
-7945 468 615 744 0
-7945 470 607 750 0
-7945 470 609 748 0
-7945 470 611 746 0
-7945 470 613 744 0
-7945 470 615 742 0
-7945 472 605 750 0
-7945 472 607 748 0
-7945 472 609 746 0
-7945 472 611 744 0
-7945 472 613 742 0
-7945 472 615 740 0
-7945 474 603 750 0
-7945 474 605 748 0
-7945 474 607 746 0
-7945 474 609 744 0
-7945 474 611 742 0
-7945 474 613 740 0
-7945 474 615 738 0
-7945 476 602 750 0
-7945 476 603 748 0
-7945 476 605 746 0
-7945 476 607 744 0
-7945 476 609 742 0
-7945 476 611 740 0
-7945 476 613 738 0
-7945 476 615 737 0
-7945 478 750 0
-7945 478 602 748 0
-7945 478 603 746 0
-7945 478 605 744 0
-7945 478 607 742 0
-7945 478 609 740 0
-7945 478 611 738 0
-7945 478 613 737 0
-7945 478 615 0
-7945 480 748 0
-7945 480 602 746 0
-7945 480 603 744 0
-7945 480 605 742 0
-7945 480 607 740 0
-7945 480 609 738 0
-7945 480 611 737 0
-7945 480 613 0
-7945 480 615 0
7945 -613 -737 0
7945 -611 -738 0
7945 -609 -740 0
7945 -607 -742 0
7945 -605 -744 0
7945 -603 -746 0
7945 -602 -748 0
7945 -480 -615 -737 0
7945 -480 -613 -738 0
7945 -480 -611 -740 0
7945 -480 -609 -742 0
7945 -480 -607 -744 0
7945 -480 -605 -746 0
7945 -480 -603 -748 0
7945 -480 -602 -750 0
7945 -478 -737 0
7945 -478 -615 -738 0
7945 -478 -613 -740 0
7945 -478 -611 -742 0
7945 -478 -609 -744 0
7945 -478 -607 -746 0
7945 -478 -605 -748 0
7945 -478 -603 -750 0
7945 -478 -602 0
7945 -476 -738 0
7945 -476 -615 -740 0
7945 -476 -613 -742 0
7945 -476 -611 -744 0
7945 -476 -609 -746 0
7945 -476 -607 -748 0
7945 -476 -605 -750 0
7945 -476 -603 0
7945 -476 -602 0
7945 -474 -740 0
7945 -474 -615 -742 0
7945 -474 -613 -744 0
7945 -474 -611 -746 0
7945 -474 -609 -748 0
7945 -474 -607 -750 0
7945 -474 -605 0
7945 -474 -603 0
7945 -474 -602 0
7945 -472 -742 0
7945 -472 -615 -744 0
7945 -472 -613 -746 0
7945 -472 -611 -748 0
7945 -472 -609 -750 0
7945 -472 -607 0
7945 -472 -605 0
7945 -472 -603 0
7945 -472 -602 0
7945 -470 -744 0
7945 -470 -615 -746 0
7945 -470 -613 -748 0
7945 -470 -611 -750 0
7945 -470 -609 0
7945 -470 -607 0
7945 -470 -605 0
7945 -470 -603 0
7945 -470 -602 0
7945 -468 -746 0
7945 -468 -615 -748 0
7945 -468 -613 -750 0
7945 -468 -611 0
7945 -468 -609 0
7945 -468 -607 0
7945 -468 -605 0
7945 -468 -603 0
7945 -468 -602 0
7945 -467 -748 0
7945 -467 -615 -750 0
7945 -467 -613 0
7945 -467 -611 0
7945 -467 -609 0
7945 -467 -607 0
7945 -467 -605 0
7945 -467 -603 0
7945 -467 -602 0
c ((17<=(x_00004_00005 + x_00005_00005 + x_00006_00005))=tv=SATLiteral(7946))
-7946 -611 -737 0
-7946 -609 -738 0
-7946 -607 -740 0
-7946 -605 -742 0
-7946 -603 -744 0
-7946 -602 -746 0
-7946 -480 -613 -737 0
-7946 -480 -611 -738 0
-7946 -480 -609 -740 0
-7946 -480 -607 -742 0
-7946 -480 -605 -744 0
-7946 -480 -603 -746 0
-7946 -480 -602 -748 0
-7946 -478 -615 -737 0
-7946 -478 -613 -738 0
-7946 -478 -611 -740 0
-7946 -478 -609 -742 0
-7946 -478 -607 -744 0
-7946 -478 -605 -746 0
-7946 -478 -603 -748 0
-7946 -478 -602 -750 0
-7946 -476 -737 0
-7946 -476 -615 -738 0
-7946 -476 -613 -740 0
-7946 -476 -611 -742 0
-7946 -476 -609 -744 0
-7946 -476 -607 -746 0
-7946 -476 -605 -748 0
-7946 -476 -603 -750 0
-7946 -476 -602 0
-7946 -474 -738 0
-7946 -474 -615 -740 0
-7946 -474 -613 -742 0
-7946 -474 -611 -744 0
-7946 -474 -609 -746 0
-7946 -474 -607 -748 0
-7946 -474 -605 -750 0
-7946 -474 -603 0
-7946 -474 -602 0
-7946 -472 -740 0
-7946 -472 -615 -742 0
-7946 -472 -613 -744 0
-7946 -472 -611 -746 0
-7946 -472 -609 -748 0
-7946 -472 -607 -750 0
-7946 -472 -605 0
-7946 -472 -603 0
-7946 -472 -602 0
-7946 -470 -742 0
-7946 -470 -615 -744 0
-7946 -470 -613 -746 0
-7946 -470 -611 -748 0
-7946 -470 -609 -750 0
-7946 -470 -607 0
-7946 -470 -605 0
-7946 -470 -603 0
-7946 -470 -602 0
-7946 -468 -744 0
-7946 -468 -615 -746 0
-7946 -468 -613 -748 0
-7946 -468 -611 -750 0
-7946 -468 -609 0
-7946 -468 -607 0
-7946 -468 -605 0
-7946 -468 -603 0
-7946 -468 -602 0
-7946 -467 -746 0
-7946 -467 -615 -748 0
-7946 -467 -613 -750 0
-7946 -467 -611 0
-7946 -467 -609 0
-7946 -467 -607 0
-7946 -467 -605 0
-7946 -467 -603 0
-7946 -467 -602 0
7946 611 750 0
7946 613 748 0
7946 615 746 0
7946 467 609 750 0
7946 467 611 748 0
7946 467 613 746 0
7946 467 615 744 0
7946 468 607 750 0
7946 468 609 748 0
7946 468 611 746 0
7946 468 613 744 0
7946 468 615 742 0
7946 470 605 750 0
7946 470 607 748 0
7946 470 609 746 0
7946 470 611 744 0
7946 470 613 742 0
7946 470 615 740 0
7946 472 603 750 0
7946 472 605 748 0
7946 472 607 746 0
7946 472 609 744 0
7946 472 611 742 0
7946 472 613 740 0
7946 472 615 738 0
7946 474 602 750 0
7946 474 603 748 0
7946 474 605 746 0
7946 474 607 744 0
7946 474 609 742 0
7946 474 611 740 0
7946 474 613 738 0
7946 474 615 737 0
7946 476 750 0
7946 476 602 748 0
7946 476 603 746 0
7946 476 605 744 0
7946 476 607 742 0
7946 476 609 740 0
7946 476 611 738 0
7946 476 613 737 0
7946 476 615 0
7946 478 748 0
7946 478 602 746 0
7946 478 603 744 0
7946 478 605 742 0
7946 478 607 740 0
7946 478 609 738 0
7946 478 611 737 0
7946 478 613 0
7946 478 615 0
7946 480 746 0
7946 480 602 744 0
7946 480 603 742 0
7946 480 605 740 0
7946 480 607 738 0
7946 480 609 737 0
7946 480 611 0
7946 480 613 0
7946 480 615 0
c (((x_00004_00008 + x_00005_00007 + x_00005_00008)<=17)=tv=SATLiteral(7947))
-7947 643 660 0
-7947 645 658 0
-7947 512 641 660 0
-7947 512 643 658 0
-7947 512 645 656 0
-7947 513 639 660 0
-7947 513 641 658 0
-7947 513 643 656 0
-7947 513 645 654 0
-7947 515 637 660 0
-7947 515 639 658 0
-7947 515 641 656 0
-7947 515 643 654 0
-7947 515 645 652 0
-7947 517 635 660 0
-7947 517 637 658 0
-7947 517 639 656 0
-7947 517 641 654 0
-7947 517 643 652 0
-7947 517 645 650 0
-7947 519 633 660 0
-7947 519 635 658 0
-7947 519 637 656 0
-7947 519 639 654 0
-7947 519 641 652 0
-7947 519 643 650 0
-7947 519 645 648 0
-7947 521 632 660 0
-7947 521 633 658 0
-7947 521 635 656 0
-7947 521 637 654 0
-7947 521 639 652 0
-7947 521 641 650 0
-7947 521 643 648 0
-7947 521 645 647 0
-7947 523 660 0
-7947 523 632 658 0
-7947 523 633 656 0
-7947 523 635 654 0
-7947 523 637 652 0
-7947 523 639 650 0
-7947 523 641 648 0
-7947 523 643 647 0
-7947 523 645 0
-7947 525 658 0
-7947 525 632 656 0
-7947 525 633 654 0
-7947 525 635 652 0
-7947 525 637 650 0
-7947 525 639 648 0
-7947 525 641 647 0
-7947 525 643 0
-7947 525 645 0
7947 -643 -647 0
7947 -641 -648 0
7947 -639 -650 0
7947 -637 -652 0
7947 -635 -654 0
7947 -633 -656 0
7947 -632 -658 0
7947 -525 -645 -647 0
7947 -525 -643 -648 0
7947 -525 -641 -650 0
7947 -525 -639 -652 0
7947 -525 -637 -654 0
7947 -525 -635 -656 0
7947 -525 -633 -658 0
7947 -525 -632 -660 0
7947 -523 -647 0
7947 -523 -645 -648 0
7947 -523 -643 -650 0
7947 -523 -641 -652 0
7947 -523 -639 -654 0
7947 -523 -637 -656 0
7947 -523 -635 -658 0
7947 -523 -633 -660 0
7947 -523 -632 0
7947 -521 -648 0
7947 -521 -645 -650 0
7947 -521 -643 -652 0
7947 -521 -641 -654 0
7947 -521 -639 -656 0
7947 -521 -637 -658 0
7947 -521 -635 -660 0
7947 -521 -633 0
7947 -521 -632 0
7947 -519 -650 0
7947 -519 -645 -652 0
7947 -519 -643 -654 0
7947 -519 -641 -656 0
7947 -519 -639 -658 0
7947 -519 -637 -660 0
7947 -519 -635 0
7947 -519 -633 0
7947 -519 -632 0
7947 -517 -652 0
7947 -517 -645 -654 0
7947 -517 -643 -656 0
7947 -517 -641 -658 0
7947 -517 -639 -660 0
7947 -517 -637 0
7947 -517 -635 0
7947 -517 -633 0
7947 -517 -632 0
7947 -515 -654 0
7947 -515 -645 -656 0
7947 -515 -643 -658 0
7947 -515 -641 -660 0
7947 -515 -639 0
7947 -515 -637 0
7947 -515 -635 0
7947 -515 -633 0
7947 -515 -632 0
7947 -513 -656 0
7947 -513 -645 -658 0
7947 -513 -643 -660 0
7947 -513 -641 0
7947 -513 -639 0
7947 -513 -637 0
7947 -513 -635 0
7947 -513 -633 0
7947 -513 -632 0
7947 -512 -658 0
7947 -512 -645 -660 0
7947 -512 -643 0
7947 -512 -641 0
7947 -512 -639 0
7947 -512 -637 0
7947 -512 -635 0
7947 -512 -633 0
7947 -512 -632 0
c ((17<=(x_00004_00008 + x_00005_00007 + x_00005_00008))=tv=SATLiteral(7948))
-7948 -641 -647 0
-7948 -639 -648 0
-7948 -637 -650 0
-7948 -635 -652 0
-7948 -633 -654 0
-7948 -632 -656 0
-7948 -525 -643 -647 0
-7948 -525 -641 -648 0
-7948 -525 -639 -650 0
-7948 -525 -637 -652 0
-7948 -525 -635 -654 0
-7948 -525 -633 -656 0
-7948 -525 -632 -658 0
-7948 -523 -645 -647 0
-7948 -523 -643 -648 0
-7948 -523 -641 -650 0
-7948 -523 -639 -652 0
-7948 -523 -637 -654 0
-7948 -523 -635 -656 0
-7948 -523 -633 -658 0
-7948 -523 -632 -660 0
-7948 -521 -647 0
-7948 -521 -645 -648 0
-7948 -521 -643 -650 0
-7948 -521 -641 -652 0
-7948 -521 -639 -654 0
-7948 -521 -637 -656 0
-7948 -521 -635 -658 0
-7948 -521 -633 -660 0
-7948 -521 -632 0
-7948 -519 -648 0
-7948 -519 -645 -650 0
-7948 -519 -643 -652 0
-7948 -519 -641 -654 0
-7948 -519 -639 -656 0
-7948 -519 -637 -658 0
-7948 -519 -635 -660 0
-7948 -519 -633 0
-7948 -519 -632 0
-7948 -517 -650 0
-7948 -517 -645 -652 0
-7948 -517 -643 -654 0
-7948 -517 -641 -656 0
-7948 -517 -639 -658 0
-7948 -517 -637 -660 0
-7948 -517 -635 0
-7948 -517 -633 0
-7948 -517 -632 0
-7948 -515 -652 0
-7948 -515 -645 -654 0
-7948 -515 -643 -656 0
-7948 -515 -641 -658 0
-7948 -515 -639 -660 0
-7948 -515 -637 0
-7948 -515 -635 0
-7948 -515 -633 0
-7948 -515 -632 0
-7948 -513 -654 0
-7948 -513 -645 -656 0
-7948 -513 -643 -658 0
-7948 -513 -641 -660 0
-7948 -513 -639 0
-7948 -513 -637 0
-7948 -513 -635 0
-7948 -513 -633 0
-7948 -513 -632 0
-7948 -512 -656 0
-7948 -512 -645 -658 0
-7948 -512 -643 -660 0
-7948 -512 -641 0
-7948 -512 -639 0
-7948 -512 -637 0
-7948 -512 -635 0
-7948 -512 -633 0
-7948 -512 -632 0
7948 641 660 0
7948 643 658 0
7948 645 656 0
7948 512 639 660 0
7948 512 641 658 0
7948 512 643 656 0
7948 512 645 654 0
7948 513 637 660 0
7948 513 639 658 0
7948 513 641 656 0
7948 513 643 654 0
7948 513 645 652 0
7948 515 635 660 0
7948 515 637 658 0
7948 515 639 656 0
7948 515 641 654 0
7948 515 643 652 0
7948 515 645 650 0
7948 517 633 660 0
7948 517 635 658 0
7948 517 637 656 0
7948 517 639 654 0
7948 517 641 652 0
7948 517 643 650 0
7948 517 645 648 0
7948 519 632 660 0
7948 519 633 658 0
7948 519 635 656 0
7948 519 637 654 0
7948 519 639 652 0
7948 519 641 650 0
7948 519 643 648 0
7948 519 645 647 0
7948 521 660 0
7948 521 632 658 0
7948 521 633 656 0
7948 521 635 654 0
7948 521 637 652 0
7948 521 639 650 0
7948 521 641 648 0
7948 521 643 647 0
7948 521 645 0
7948 523 658 0
7948 523 632 656 0
7948 523 633 654 0
7948 523 635 652 0
7948 523 637 650 0
7948 523 639 648 0
7948 523 641 647 0
7948 523 643 0
7948 523 645 0
7948 525 656 0
7948 525 632 654 0
7948 525 633 652 0
7948 525 635 650 0
7948 525 637 648 0
7948 525 639 647 0
7948 525 641 0
7948 525 643 0
7948 525 645 0
c (((x_00005_00002 + x_00005_00003 + x_00006_00002)<=13)=tv=SATLiteral(7949))
-7949 575 705 0
-7949 577 703 0
-7949 579 701 0
-7949 581 699 0
-7949 583 697 0
-7949 585 695 0
-7949 557 573 705 0
-7949 557 575 703 0
-7949 557 577 701 0
-7949 557 579 699 0
-7949 557 581 697 0
-7949 557 583 695 0
-7949 557 585 693 0
-7949 558 572 705 0
-7949 558 573 703 0
-7949 558 575 701 0
-7949 558 577 699 0
-7949 558 579 697 0
-7949 558 581 695 0
-7949 558 583 693 0
-7949 558 585 692 0
-7949 560 705 0
-7949 560 572 703 0
-7949 560 573 701 0
-7949 560 575 699 0
-7949 560 577 697 0
-7949 560 579 695 0
-7949 560 581 693 0
-7949 560 583 692 0
-7949 560 585 0
-7949 562 703 0
-7949 562 572 701 0
-7949 562 573 699 0
-7949 562 575 697 0
-7949 562 577 695 0
-7949 562 579 693 0
-7949 562 581 692 0
-7949 562 583 0
-7949 562 585 0
-7949 564 701 0
-7949 564 572 699 0
-7949 564 573 697 0
-7949 564 575 695 0
-7949 564 577 693 0
-7949 564 579 692 0
-7949 564 581 0
-7949 564 583 0
-7949 564 585 0
-7949 566 699 0
-7949 566 572 697 0
-7949 566 573 695 0
-7949 566 575 693 0
-7949 566 577 692 0
-7949 566 579 0
-7949 566 581 0
-7949 566 583 0
-7949 566 585 0
-7949 568 697 0
-7949 568 572 695 0
-7949 568 573 693 0
-7949 568 575 692 0
-7949 568 577 0
-7949 568 579 0
-7949 568 581 0
-7949 568 583 0
-7949 568 585 0
-7949 570 695 0
-7949 570 572 693 0
-7949 570 573 692 0
-7949 570 575 0
-7949 570 577 0
-7949 570 579 0
-7949 570 581 0
-7949 570 583 0
-7949 570 585 0
7949 -575 -692 0
7949 -573 -693 0
7949 -572 -695 0
7949 -570 -577 -692 0
7949 -570 -575 -693 0
7949 -570 -573 -695 0
7949 -570 -572 -697 0
7949 -568 -579 -692 0
7949 -568 -577 -693 0
7949 -568 -575 -695 0
7949 -568 -573 -697 0
7949 -568 -572 -699 0
7949 -566 -581 -692 0
7949 -566 -579 -693 0
7949 -566 -577 -695 0
7949 -566 -575 -697 0
7949 -566 -573 -699 0
7949 -566 -572 -701 0
7949 -564 -583 -692 0
7949 -564 -581 -693 0
7949 -564 -579 -695 0
7949 -564 -577 -697 0
7949 -564 -575 -699 0
7949 -564 -573 -701 0
7949 -564 -572 -703 0
7949 -562 -585 -692 0
7949 -562 -583 -693 0
7949 -562 -581 -695 0
7949 -562 -579 -697 0
7949 -562 -577 -699 0
7949 -562 -575 -701 0
7949 -562 -573 -703 0
7949 -562 -572 -705 0
7949 -560 -692 0
7949 -560 -585 -693 0
7949 -560 -583 -695 0
7949 -560 -581 -697 0
7949 -560 -579 -699 0
7949 -560 -577 -701 0
7949 -560 -575 -703 0
7949 -560 -573 -705 0
7949 -560 -572 0
7949 -558 -693 0
7949 -558 -585 -695 0
7949 -558 -583 -697 0
7949 -558 -581 -699 0
7949 -558 -579 -701 0
7949 -558 -577 -703 0
7949 -558 -575 -705 0
7949 -558 -573 0
7949 -558 -572 0
7949 -557 -695 0
7949 -557 -585 -697 0
7949 -557 -583 -699 0
7949 -557 -581 -701 0
7949 -557 -579 -703 0
7949 -557 -577 -705 0
7949 -557 -575 0
7949 -557 -573 0
7949 -557 -572 0
c ((13<=(x_00005_00002 + x_00005_00003 + x_00006_00002))=tv=SATLiteral(7950))
-7950 -573 -692 0
-7950 -572 -693 0
-7950 -570 -575 -692 0
-7950 -570 -573 -693 0
-7950 -570 -572 -695 0
-7950 -568 -577 -692 0
-7950 -568 -575 -693 0
-7950 -568 -573 -695 0
-7950 -568 -572 -697 0
-7950 -566 -579 -692 0
-7950 -566 -577 -693 0
-7950 -566 -575 -695 0
-7950 -566 -573 -697 0
-7950 -566 -572 -699 0
-7950 -564 -581 -692 0
-7950 -564 -579 -693 0
-7950 -564 -577 -695 0
-7950 -564 -575 -697 0
-7950 -564 -573 -699 0
-7950 -564 -572 -701 0
-7950 -562 -583 -692 0
-7950 -562 -581 -693 0
-7950 -562 -579 -695 0
-7950 -562 -577 -697 0
-7950 -562 -575 -699 0
-7950 -562 -573 -701 0
-7950 -562 -572 -703 0
-7950 -560 -585 -692 0
-7950 -560 -583 -693 0
-7950 -560 -581 -695 0
-7950 -560 -579 -697 0
-7950 -560 -577 -699 0
-7950 -560 -575 -701 0
-7950 -560 -573 -703 0
-7950 -560 -572 -705 0
-7950 -558 -692 0
-7950 -558 -585 -693 0
-7950 -558 -583 -695 0
-7950 -558 -581 -697 0
-7950 -558 -579 -699 0
-7950 -558 -577 -701 0
-7950 -558 -575 -703 0
-7950 -558 -573 -705 0
-7950 -558 -572 0
-7950 -557 -693 0
-7950 -557 -585 -695 0
-7950 -557 -583 -697 0
-7950 -557 -581 -699 0
-7950 -557 -579 -701 0
-7950 -557 -577 -703 0
-7950 -557 -575 -705 0
-7950 -557 -573 0
-7950 -557 -572 0
7950 573 705 0
7950 575 703 0
7950 577 701 0
7950 579 699 0
7950 581 697 0
7950 583 695 0
7950 585 693 0
7950 557 572 705 0
7950 557 573 703 0
7950 557 575 701 0
7950 557 577 699 0
7950 557 579 697 0
7950 557 581 695 0
7950 557 583 693 0
7950 557 585 692 0
7950 558 705 0
7950 558 572 703 0
7950 558 573 701 0
7950 558 575 699 0
7950 558 577 697 0
7950 558 579 695 0
7950 558 581 693 0
7950 558 583 692 0
7950 558 585 0
7950 560 703 0
7950 560 572 701 0
7950 560 573 699 0
7950 560 575 697 0
7950 560 577 695 0
7950 560 579 693 0
7950 560 581 692 0
7950 560 583 0
7950 560 585 0
7950 562 701 0
7950 562 572 699 0
7950 562 573 697 0
7950 562 575 695 0
7950 562 577 693 0
7950 562 579 692 0
7950 562 581 0
7950 562 583 0
7950 562 585 0
7950 564 699 0
7950 564 572 697 0
7950 564 573 695 0
7950 564 575 693 0
7950 564 577 692 0
7950 564 579 0
7950 564 581 0
7950 564 583 0
7950 564 585 0
7950 566 697 0
7950 566 572 695 0
7950 566 573 693 0
7950 566 575 692 0
7950 566 577 0
7950 566 579 0
7950 566 581 0
7950 566 583 0
7950 566 585 0
7950 568 695 0
7950 568 572 693 0
7950 568 573 692 0
7950 568 575 0
7950 568 577 0
7950 568 579 0
7950 568 581 0
7950 568 583 0
7950 568 585 0
7950 570 693 0
7950 570 572 692 0
7950 570 573 0
7950 570 575 0
7950 570 577 0
7950 570 579 0
7950 570 581 0
7950 570 583 0
7950 570 585 0
c (((x_00007_00004 + x_00005_00004 + x_00006_00004)<=20)=tv=SATLiteral(7951))
-7951 858 600 735 0
-7951 860 598 735 0
-7951 860 600 733 0
-7951 862 596 735 0
-7951 862 598 733 0
-7951 862 600 731 0
-7951 864 594 735 0
-7951 864 596 733 0
-7951 864 598 731 0
-7951 864 600 729 0
-7951 866 592 735 0
-7951 866 594 733 0
-7951 866 596 731 0
-7951 866 598 729 0
-7951 866 600 727 0
-7951 868 590 735 0
-7951 868 592 733 0
-7951 868 594 731 0
-7951 868 596 729 0
-7951 868 598 727 0
-7951 868 600 725 0
-7951 870 588 735 0
-7951 870 590 733 0
-7951 870 592 731 0
-7951 870 594 729 0
-7951 870 596 727 0
-7951 870 598 725 0
-7951 870 600 723 0
7951 -723 0
7951 -600 -725 0
7951 -598 -727 0
7951 -596 -729 0
7951 -594 -731 0
7951 -592 -733 0
7951 -590 -735 0
7951 -588 0
7951 -587 0
7951 -870 -725 0
7951 -870 -600 -727 0
7951 -870 -598 -729 0
7951 -870 -596 -731 0
7951 -870 -594 -733 0
7951 -870 -592 -735 0
7951 -870 -590 0
7951 -870 -588 0
7951 -870 -587 0
7951 -868 -727 0
7951 -868 -600 -729 0
7951 -868 -598 -731 0
7951 -868 -596 -733 0
7951 -868 -594 -735 0
7951 -868 -592 0
7951 -868 -590 0
7951 -868 -588 0
7951 -868 -587 0
7951 -866 -729 0
7951 -866 -600 -731 0
7951 -866 -598 -733 0
7951 -866 -596 -735 0
7951 -866 -594 0
7951 -866 -592 0
7951 -866 -590 0
7951 -866 -588 0
7951 -866 -587 0
7951 -864 -731 0
7951 -864 -600 -733 0
7951 -864 -598 -735 0
7951 -864 -596 0
7951 -864 -594 0
7951 -864 -592 0
7951 -864 -590 0
7951 -864 -588 0
7951 -864 -587 0
7951 -862 -733 0
7951 -862 -600 -735 0
7951 -862 -598 0
7951 -862 -596 0
7951 -862 -594 0
7951 -862 -592 0
7951 -862 -590 0
7951 -862 -588 0
7951 -862 -587 0
7951 -860 -735 0
7951 -860 -600 0
7951 -860 -598 0
7951 -860 -596 0
7951 -860 -594 0
7951 -860 -592 0
7951 -860 -590 0
7951 -860 -588 0
7951 -860 -587 0
7951 -858 0
7951 -858 -600 0
7951 -858 -598 0
7951 -858 -596 0
7951 -858 -594 0
7951 -858 -592 0
7951 -858 -590 0
7951 -858 -588 0
7951 -858 -587 0
7951 -857 0
7951 -857 -600 0
7951 -857 -598 0
7951 -857 -596 0
7951 -857 -594 0
7951 -857 -592 0
7951 -857 -590 0
7951 -857 -588 0
7951 -857 -587 0
c ((20<=(x_00007_00004 + x_00005_00004 + x_00006_00004))=tv=SATLiteral(7952))
-7952 -722 0
-7952 -600 -723 0
-7952 -598 -725 0
-7952 -596 -727 0
-7952 -594 -729 0
-7952 -592 -731 0
-7952 -590 -733 0
-7952 -588 -735 0
-7952 -587 0
-7952 -870 -723 0
-7952 -870 -600 -725 0
-7952 -870 -598 -727 0
-7952 -870 -596 -729 0
-7952 -870 -594 -731 0
-7952 -870 -592 -733 0
-7952 -870 -590 -735 0
-7952 -870 -588 0
-7952 -870 -587 0
-7952 -868 -725 0
-7952 -868 -600 -727 0
-7952 -868 -598 -729 0
-7952 -868 -596 -731 0
-7952 -868 -594 -733 0
-7952 -868 -592 -735 0
-7952 -868 -590 0
-7952 -868 -588 0
-7952 -868 -587 0
-7952 -866 -727 0
-7952 -866 -600 -729 0
-7952 -866 -598 -731 0
-7952 -866 -596 -733 0
-7952 -866 -594 -735 0
-7952 -866 -592 0
-7952 -866 -590 0
-7952 -866 -588 0
-7952 -866 -587 0
-7952 -864 -729 0
-7952 -864 -600 -731 0
-7952 -864 -598 -733 0
-7952 -864 -596 -735 0
-7952 -864 -594 0
-7952 -864 -592 0
-7952 -864 -590 0
-7952 -864 -588 0
-7952 -864 -587 0
-7952 -862 -731 0
-7952 -862 -600 -733 0
-7952 -862 -598 -735 0
-7952 -862 -596 0
-7952 -862 -594 0
-7952 -862 -592 0
-7952 -862 -590 0
-7952 -862 -588 0
-7952 -862 -587 0
-7952 -860 -733 0
-7952 -860 -600 -735 0
-7952 -860 -598 0
-7952 -860 -596 0
-7952 -860 -594 0
-7952 -860 -592 0
-7952 -860 -590 0
-7952 -860 -588 0
-7952 -860 -587 0
-7952 -858 -735 0
-7952 -858 -600 0
-7952 -858 -598 0
-7952 -858 -596 0
-7952 -858 -594 0
-7952 -858 -592 0
-7952 -858 -590 0
-7952 -858 -588 0
-7952 -858 -587 0
-7952 -857 0
-7952 -857 -600 0
-7952 -857 -598 0
-7952 -857 -596 0
-7952 -857 -594 0
-7952 -857 -592 0
-7952 -857 -590 0
-7952 -857 -588 0
-7952 -857 -587 0
7952 857 600 735 0
7952 858 598 735 0
7952 858 600 733 0
7952 860 596 735 0
7952 860 598 733 0
7952 860 600 731 0
7952 862 594 735 0
7952 862 596 733 0
7952 862 598 731 0
7952 862 600 729 0
7952 864 592 735 0
7952 864 594 733 0
7952 864 596 731 0
7952 864 598 729 0
7952 864 600 727 0
7952 866 590 735 0
7952 866 592 733 0
7952 866 594 731 0
7952 866 596 729 0
7952 866 598 727 0
7952 866 600 725 0
7952 868 588 735 0
7952 868 590 733 0
7952 868 592 731 0
7952 868 594 729 0
7952 868 596 727 0
7952 868 598 725 0
7952 868 600 723 0
7952 870 587 735 0
7952 870 588 733 0
7952 870 590 731 0
7952 870 592 729 0
7952 870 594 727 0
7952 870 596 725 0
7952 870 598 723 0
7952 870 600 722 0
c (((x_00005_00009 + x_00006_00009)<=12)=tv=SATLiteral(7953))
-7953 665 810 0
-7953 667 808 0
-7953 669 806 0
-7953 671 804 0
-7953 673 802 0
-7953 675 800 0
7953 -800 0
7953 -675 -802 0
7953 -673 -804 0
7953 -671 -806 0
7953 -669 -808 0
7953 -667 -810 0
7953 -665 0
7953 -663 0
7953 -662 0
c ((12<=(x_00005_00009 + x_00006_00009))=tv=SATLiteral(7954))
-7954 -798 0
-7954 -675 -800 0
-7954 -673 -802 0
-7954 -671 -804 0
-7954 -669 -806 0
-7954 -667 -808 0
-7954 -665 -810 0
-7954 -663 0
-7954 -662 0
7954 663 810 0
7954 665 808 0
7954 667 806 0
7954 669 804 0
7954 671 802 0
7954 673 800 0
7954 675 798 0
c (((aux440 + shift(x_00008_00001, -1) + shift(x_00009_00001, -1))<=23)=tv=SATLiteral(7955))
-7955 1095 1861 0
-7955 947 1093 1861 0
-7955 947 1095 1859 0
-7955 948 1091 1861 0
-7955 948 1093 1859 0
-7955 948 1095 1857 0
-7955 950 1089 1861 0
-7955 950 1091 1859 0
-7955 950 1093 1857 0
-7955 950 1095 1855 0
-7955 952 1087 1861 0
-7955 952 1089 1859 0
-7955 952 1091 1857 0
-7955 952 1093 1855 0
-7955 952 1095 1853 0
-7955 954 1085 1861 0
-7955 954 1087 1859 0
-7955 954 1089 1857 0
-7955 954 1091 1855 0
-7955 954 1093 1853 0
-7955 954 1095 1851 0
-7955 956 1083 1861 0
-7955 956 1085 1859 0
-7955 956 1087 1857 0
-7955 956 1089 1855 0
-7955 956 1091 1853 0
-7955 956 1093 1851 0
-7955 956 1095 1849 0
-7955 958 1082 1861 0
-7955 958 1083 1859 0
-7955 958 1085 1857 0
-7955 958 1087 1855 0
-7955 958 1089 1853 0
-7955 958 1091 1851 0
-7955 958 1093 1849 0
-7955 958 1095 1847 0
-7955 960 1861 0
-7955 960 1082 1859 0
-7955 960 1083 1857 0
-7955 960 1085 1855 0
-7955 960 1087 1853 0
-7955 960 1089 1851 0
-7955 960 1091 1849 0
-7955 960 1093 1847 0
-7955 960 1095 1845 0
7955 -1845 0
7955 -1095 -1847 0
7955 -1093 -1849 0
7955 -1091 -1851 0
7955 -1089 -1853 0
7955 -1087 -1855 0
7955 -1085 -1857 0
7955 -1083 -1859 0
7955 -1082 -1861 0
7955 -960 -1847 0
7955 -960 -1095 -1849 0
7955 -960 -1093 -1851 0
7955 -960 -1091 -1853 0
7955 -960 -1089 -1855 0
7955 -960 -1087 -1857 0
7955 -960 -1085 -1859 0
7955 -960 -1083 -1861 0
7955 -960 -1082 0
7955 -958 -1849 0
7955 -958 -1095 -1851 0
7955 -958 -1093 -1853 0
7955 -958 -1091 -1855 0
7955 -958 -1089 -1857 0
7955 -958 -1087 -1859 0
7955 -958 -1085 -1861 0
7955 -958 -1083 0
7955 -958 -1082 0
7955 -956 -1851 0
7955 -956 -1095 -1853 0
7955 -956 -1093 -1855 0
7955 -956 -1091 -1857 0
7955 -956 -1089 -1859 0
7955 -956 -1087 -1861 0
7955 -956 -1085 0
7955 -956 -1083 0
7955 -956 -1082 0
7955 -954 -1853 0
7955 -954 -1095 -1855 0
7955 -954 -1093 -1857 0
7955 -954 -1091 -1859 0
7955 -954 -1089 -1861 0
7955 -954 -1087 0
7955 -954 -1085 0
7955 -954 -1083 0
7955 -954 -1082 0
7955 -952 -1855 0
7955 -952 -1095 -1857 0
7955 -952 -1093 -1859 0
7955 -952 -1091 -1861 0
7955 -952 -1089 0
7955 -952 -1087 0
7955 -952 -1085 0
7955 -952 -1083 0
7955 -952 -1082 0
7955 -950 -1857 0
7955 -950 -1095 -1859 0
7955 -950 -1093 -1861 0
7955 -950 -1091 0
7955 -950 -1089 0
7955 -950 -1087 0
7955 -950 -1085 0
7955 -950 -1083 0
7955 -950 -1082 0
7955 -948 -1859 0
7955 -948 -1095 -1861 0
7955 -948 -1093 0
7955 -948 -1091 0
7955 -948 -1089 0
7955 -948 -1087 0
7955 -948 -1085 0
7955 -948 -1083 0
7955 -948 -1082 0
7955 -947 -1861 0
7955 -947 -1095 0
7955 -947 -1093 0
7955 -947 -1091 0
7955 -947 -1089 0
7955 -947 -1087 0
7955 -947 -1085 0
7955 -947 -1083 0
7955 -947 -1082 0
c ((23<=(aux440 + shift(x_00008_00001, -1) + shift(x_00009_00001, -1)))=tv=SATLiteral(7956))
-7956 -1843 0
-7956 -1095 -1845 0
-7956 -1093 -1847 0
-7956 -1091 -1849 0
-7956 -1089 -1851 0
-7956 -1087 -1853 0
-7956 -1085 -1855 0
-7956 -1083 -1857 0
-7956 -1082 -1859 0
-7956 -960 -1845 0
-7956 -960 -1095 -1847 0
-7956 -960 -1093 -1849 0
-7956 -960 -1091 -1851 0
-7956 -960 -1089 -1853 0
-7956 -960 -1087 -1855 0
-7956 -960 -1085 -1857 0
-7956 -960 -1083 -1859 0
-7956 -960 -1082 -1861 0
-7956 -958 -1847 0
-7956 -958 -1095 -1849 0
-7956 -958 -1093 -1851 0
-7956 -958 -1091 -1853 0
-7956 -958 -1089 -1855 0
-7956 -958 -1087 -1857 0
-7956 -958 -1085 -1859 0
-7956 -958 -1083 -1861 0
-7956 -958 -1082 0
-7956 -956 -1849 0
-7956 -956 -1095 -1851 0
-7956 -956 -1093 -1853 0
-7956 -956 -1091 -1855 0
-7956 -956 -1089 -1857 0
-7956 -956 -1087 -1859 0
-7956 -956 -1085 -1861 0
-7956 -956 -1083 0
-7956 -956 -1082 0
-7956 -954 -1851 0
-7956 -954 -1095 -1853 0
-7956 -954 -1093 -1855 0
-7956 -954 -1091 -1857 0
-7956 -954 -1089 -1859 0
-7956 -954 -1087 -1861 0
-7956 -954 -1085 0
-7956 -954 -1083 0
-7956 -954 -1082 0
-7956 -952 -1853 0
-7956 -952 -1095 -1855 0
-7956 -952 -1093 -1857 0
-7956 -952 -1091 -1859 0
-7956 -952 -1089 -1861 0
-7956 -952 -1087 0
-7956 -952 -1085 0
-7956 -952 -1083 0
-7956 -952 -1082 0
-7956 -950 -1855 0
-7956 -950 -1095 -1857 0
-7956 -950 -1093 -1859 0
-7956 -950 -1091 -1861 0
-7956 -950 -1089 0
-7956 -950 -1087 0
-7956 -950 -1085 0
-7956 -950 -1083 0
-7956 -950 -1082 0
-7956 -948 -1857 0
-7956 -948 -1095 -1859 0
-7956 -948 -1093 -1861 0
-7956 -948 -1091 0
-7956 -948 -1089 0
-7956 -948 -1087 0
-7956 -948 -1085 0
-7956 -948 -1083 0
-7956 -948 -1082 0
-7956 -947 -1859 0
-7956 -947 -1095 -1861 0
-7956 -947 -1093 0
-7956 -947 -1091 0
-7956 -947 -1089 0
-7956 -947 -1087 0
-7956 -947 -1085 0
-7956 -947 -1083 0
-7956 -947 -1082 0
7956 1093 1861 0
7956 1095 1859 0
7956 947 1091 1861 0
7956 947 1093 1859 0
7956 947 1095 1857 0
7956 948 1089 1861 0
7956 948 1091 1859 0
7956 948 1093 1857 0
7956 948 1095 1855 0
7956 950 1087 1861 0
7956 950 1089 1859 0
7956 950 1091 1857 0
7956 950 1093 1855 0
7956 950 1095 1853 0
7956 952 1085 1861 0
7956 952 1087 1859 0
7956 952 1089 1857 0
7956 952 1091 1855 0
7956 952 1093 1853 0
7956 952 1095 1851 0
7956 954 1083 1861 0
7956 954 1085 1859 0
7956 954 1087 1857 0
7956 954 1089 1855 0
7956 954 1091 1853 0
7956 954 1093 1851 0
7956 954 1095 1849 0
7956 956 1082 1861 0
7956 956 1083 1859 0
7956 956 1085 1857 0
7956 956 1087 1855 0
7956 956 1089 1853 0
7956 956 1091 1851 0
7956 956 1093 1849 0
7956 956 1095 1847 0
7956 958 1861 0
7956 958 1082 1859 0
7956 958 1083 1857 0
7956 958 1085 1855 0
7956 958 1087 1853 0
7956 958 1089 1851 0
7956 958 1091 1849 0
7956 958 1093 1847 0
7956 958 1095 1845 0
7956 960 1859 0
7956 960 1082 1857 0
7956 960 1083 1855 0
7956 960 1085 1853 0
7956 960 1087 1851 0
7956 960 1089 1849 0
7956 960 1091 1847 0
7956 960 1093 1845 0
7956 960 1095 1843 0
c (((x_00007_00002 + x_00007_00003 + x_00006_00003)<=6)=tv=SATLiteral(7957))
-7957 712 0
-7957 842 710 0
-7957 843 708 0
-7957 845 707 0
-7957 847 0
-7957 849 0
-7957 851 0
-7957 853 0
-7957 855 0
-7957 827 710 0
-7957 827 842 708 0
-7957 827 843 707 0
-7957 827 845 0
-7957 827 847 0
-7957 827 849 0
-7957 827 851 0
-7957 827 853 0
-7957 827 855 0
-7957 828 708 0
-7957 828 842 707 0
-7957 828 843 0
-7957 828 845 0
-7957 828 847 0
-7957 828 849 0
-7957 828 851 0
-7957 828 853 0
-7957 828 855 0
-7957 830 707 0
-7957 830 842 0
-7957 830 843 0
-7957 830 845 0
-7957 830 847 0
-7957 830 849 0
-7957 830 851 0
-7957 830 853 0
-7957 830 855 0
-7957 832 0
-7957 832 842 0
-7957 832 843 0
-7957 832 845 0
-7957 832 847 0
-7957 832 849 0
-7957 832 851 0
-7957 832 853 0
-7957 832 855 0
-7957 834 0
-7957 834 842 0
-7957 834 843 0
-7957 834 845 0
-7957 834 847 0
-7957 834 849 0
-7957 834 851 0
-7957 834 853 0
-7957 834 855 0
-7957 836 0
-7957 836 842 0
-7957 836 843 0
-7957 836 845 0
-7957 836 847 0
-7957 836 849 0
-7957 836 851 0
-7957 836 853 0
-7957 836 855 0
-7957 838 0
-7957 838 842 0
-7957 838 843 0
-7957 838 845 0
-7957 838 847 0
-7957 838 849 0
-7957 838 851 0
-7957 838 853 0
-7957 838 855 0
-7957 840 0
-7957 840 842 0
-7957 840 843 0
-7957 840 845 0
-7957 840 847 0
-7957 840 849 0
-7957 840 851 0
-7957 840 853 0
-7957 840 855 0
7957 -832 -842 -707 0
7957 -830 -843 -707 0
7957 -830 -842 -708 0
7957 -828 -845 -707 0
7957 -828 -843 -708 0
7957 -828 -842 -710 0
7957 -827 -847 -707 0
7957 -827 -845 -708 0
7957 -827 -843 -710 0
7957 -827 -842 -712 0
c ((6<=(x_00007_00002 + x_00007_00003 + x_00006_00003))=tv=SATLiteral(7958))
-7958 -830 -842 -707 0
-7958 -828 -843 -707 0
-7958 -828 -842 -708 0
-7958 -827 -845 -707 0
-7958 -827 -843 -708 0
-7958 -827 -842 -710 0
7958 710 0
7958 842 708 0
7958 843 707 0
7958 845 0
7958 847 0
7958 849 0
7958 851 0
7958 853 0
7958 855 0
7958 827 708 0
7958 827 842 707 0
7958 827 843 0
7958 827 845 0
7958 827 847 0
7958 827 849 0
7958 827 851 0
7958 827 853 0
7958 827 855 0
7958 828 707 0
7958 828 842 0
7958 828 843 0
7958 828 845 0
7958 828 847 0
7958 828 849 0
7958 828 851 0
7958 828 853 0
7958 828 855 0
7958 830 0
7958 830 842 0
7958 830 843 0
7958 830 845 0
7958 830 847 0
7958 830 849 0
7958 830 851 0
7958 830 853 0
7958 830 855 0
7958 832 0
7958 832 842 0
7958 832 843 0
7958 832 845 0
7958 832 847 0
7958 832 849 0
7958 832 851 0
7958 832 853 0
7958 832 855 0
7958 834 0
7958 834 842 0
7958 834 843 0
7958 834 845 0
7958 834 847 0
7958 834 849 0
7958 834 851 0
7958 834 853 0
7958 834 855 0
7958 836 0
7958 836 842 0
7958 836 843 0
7958 836 845 0
7958 836 847 0
7958 836 849 0
7958 836 851 0
7958 836 853 0
7958 836 855 0
7958 838 0
7958 838 842 0
7958 838 843 0
7958 838 845 0
7958 838 847 0
7958 838 849 0
7958 838 851 0
7958 838 853 0
7958 838 855 0
7958 840 0
7958 840 842 0
7958 840 843 0
7958 840 845 0
7958 840 847 0
7958 840 849 0
7958 840 851 0
7958 840 853 0
7958 840 855 0
c (((x_00007_00006 + x_00007_00007 + x_00006_00006)<=20)=tv=SATLiteral(7959))
-7959 888 915 765 0
-7959 890 913 765 0
-7959 890 915 763 0
-7959 892 911 765 0
-7959 892 913 763 0
-7959 892 915 761 0
-7959 894 909 765 0
-7959 894 911 763 0
-7959 894 913 761 0
-7959 894 915 759 0
-7959 896 907 765 0
-7959 896 909 763 0
-7959 896 911 761 0
-7959 896 913 759 0
-7959 896 915 757 0
-7959 898 905 765 0
-7959 898 907 763 0
-7959 898 909 761 0
-7959 898 911 759 0
-7959 898 913 757 0
-7959 898 915 755 0
-7959 900 903 765 0
-7959 900 905 763 0
-7959 900 907 761 0
-7959 900 909 759 0
-7959 900 911 757 0
-7959 900 913 755 0
-7959 900 915 753 0
7959 -753 0
7959 -915 -755 0
7959 -913 -757 0
7959 -911 -759 0
7959 -909 -761 0
7959 -907 -763 0
7959 -905 -765 0
7959 -903 0
7959 -902 0
7959 -900 -755 0
7959 -900 -915 -757 0
7959 -900 -913 -759 0
7959 -900 -911 -761 0
7959 -900 -909 -763 0
7959 -900 -907 -765 0
7959 -900 -905 0
7959 -900 -903 0
7959 -900 -902 0
7959 -898 -757 0
7959 -898 -915 -759 0
7959 -898 -913 -761 0
7959 -898 -911 -763 0
7959 -898 -909 -765 0
7959 -898 -907 0
7959 -898 -905 0
7959 -898 -903 0
7959 -898 -902 0
7959 -896 -759 0
7959 -896 -915 -761 0
7959 -896 -913 -763 0
7959 -896 -911 -765 0
7959 -896 -909 0
7959 -896 -907 0
7959 -896 -905 0
7959 -896 -903 0
7959 -896 -902 0
7959 -894 -761 0
7959 -894 -915 -763 0
7959 -894 -913 -765 0
7959 -894 -911 0
7959 -894 -909 0
7959 -894 -907 0
7959 -894 -905 0
7959 -894 -903 0
7959 -894 -902 0
7959 -892 -763 0
7959 -892 -915 -765 0
7959 -892 -913 0
7959 -892 -911 0
7959 -892 -909 0
7959 -892 -907 0
7959 -892 -905 0
7959 -892 -903 0
7959 -892 -902 0
7959 -890 -765 0
7959 -890 -915 0
7959 -890 -913 0
7959 -890 -911 0
7959 -890 -909 0
7959 -890 -907 0
7959 -890 -905 0
7959 -890 -903 0
7959 -890 -902 0
7959 -888 0
7959 -888 -915 0
7959 -888 -913 0
7959 -888 -911 0
7959 -888 -909 0
7959 -888 -907 0
7959 -888 -905 0
7959 -888 -903 0
7959 -888 -902 0
7959 -887 0
7959 -887 -915 0
7959 -887 -913 0
7959 -887 -911 0
7959 -887 -909 0
7959 -887 -907 0
7959 -887 -905 0
7959 -887 -903 0
7959 -887 -902 0
c ((20<=(x_00007_00006 + x_00007_00007 + x_00006_00006))=tv=SATLiteral(7960))
-7960 -752 0
-7960 -915 -753 0
-7960 -913 -755 0
-7960 -911 -757 0
-7960 -909 -759 0
-7960 -907 -761 0
-7960 -905 -763 0
-7960 -903 -765 0
-7960 -902 0
-7960 -900 -753 0
-7960 -900 -915 -755 0
-7960 -900 -913 -757 0
-7960 -900 -911 -759 0
-7960 -900 -909 -761 0
-7960 -900 -907 -763 0
-7960 -900 -905 -765 0
-7960 -900 -903 0
-7960 -900 -902 0
-7960 -898 -755 0
-7960 -898 -915 -757 0
-7960 -898 -913 -759 0
-7960 -898 -911 -761 0
-7960 -898 -909 -763 0
-7960 -898 -907 -765 0
-7960 -898 -905 0
-7960 -898 -903 0
-7960 -898 -902 0
-7960 -896 -757 0
-7960 -896 -915 -759 0
-7960 -896 -913 -761 0
-7960 -896 -911 -763 0
-7960 -896 -909 -765 0
-7960 -896 -907 0
-7960 -896 -905 0
-7960 -896 -903 0
-7960 -896 -902 0
-7960 -894 -759 0
-7960 -894 -915 -761 0
-7960 -894 -913 -763 0
-7960 -894 -911 -765 0
-7960 -894 -909 0
-7960 -894 -907 0
-7960 -894 -905 0
-7960 -894 -903 0
-7960 -894 -902 0
-7960 -892 -761 0
-7960 -892 -915 -763 0
-7960 -892 -913 -765 0
-7960 -892 -911 0
-7960 -892 -909 0
-7960 -892 -907 0
-7960 -892 -905 0
-7960 -892 -903 0
-7960 -892 -902 0
-7960 -890 -763 0
-7960 -890 -915 -765 0
-7960 -890 -913 0
-7960 -890 -911 0
-7960 -890 -909 0
-7960 -890 -907 0
-7960 -890 -905 0
-7960 -890 -903 0
-7960 -890 -902 0
-7960 -888 -765 0
-7960 -888 -915 0
-7960 -888 -913 0
-7960 -888 -911 0
-7960 -888 -909 0
-7960 -888 -907 0
-7960 -888 -905 0
-7960 -888 -903 0
-7960 -888 -902 0
-7960 -887 0
-7960 -887 -915 0
-7960 -887 -913 0
-7960 -887 -911 0
-7960 -887 -909 0
-7960 -887 -907 0
-7960 -887 -905 0
-7960 -887 -903 0
-7960 -887 -902 0
7960 887 915 765 0
7960 888 913 765 0
7960 888 915 763 0
7960 890 911 765 0
7960 890 913 763 0
7960 890 915 761 0
7960 892 909 765 0
7960 892 911 763 0
7960 892 913 761 0
7960 892 915 759 0
7960 894 907 765 0
7960 894 909 763 0
7960 894 911 761 0
7960 894 913 759 0
7960 894 915 757 0
7960 896 905 765 0
7960 896 907 763 0
7960 896 909 761 0
7960 896 911 759 0
7960 896 913 757 0
7960 896 915 755 0
7960 898 903 765 0
7960 898 905 763 0
7960 898 907 761 0
7960 898 909 759 0
7960 898 911 757 0
7960 898 913 755 0
7960 898 915 753 0
7960 900 902 765 0
7960 900 903 763 0
7960 900 905 761 0
7960 900 907 759 0
7960 900 909 757 0
7960 900 911 755 0
7960 900 913 753 0
7960 900 915 752 0
c (((x_00006_00007 + x_00006_00008)<=6)=tv=SATLiteral(7961))
-7961 789 0
-7961 767 787 0
-7961 768 785 0
-7961 770 783 0
-7961 772 782 0
-7961 774 0
-7961 776 0
-7961 778 0
-7961 780 0
7961 -774 -782 0
7961 -772 -783 0
7961 -770 -785 0
7961 -768 -787 0
7961 -767 -789 0
c ((6<=(x_00006_00007 + x_00006_00008))=tv=SATLiteral(7962))
-7962 -772 -782 0
-7962 -770 -783 0
-7962 -768 -785 0
-7962 -767 -787 0
7962 787 0
7962 767 785 0
7962 768 783 0
7962 770 782 0
7962 772 0
7962 774 0
7962 776 0
7962 778 0
7962 780 0
c (((aux441 + shift(x_00008_00004, -1) + shift(x_00008_00005, -1))<=6)=tv=SATLiteral(7963))
-7963 1874 0
-7963 1007 1872 0
-7963 1008 1870 0
-7963 1010 1868 0
-7963 1012 1866 0
-7963 1014 1864 0
-7963 1016 1863 0
-7963 1018 0
-7963 1020 0
-7963 992 1872 0
-7963 992 1007 1870 0
-7963 992 1008 1868 0
-7963 992 1010 1866 0
-7963 992 1012 1864 0
-7963 992 1014 1863 0
-7963 992 1016 0
-7963 992 1018 0
-7963 992 1020 0
-7963 993 1870 0
-7963 993 1007 1868 0
-7963 993 1008 1866 0
-7963 993 1010 1864 0
-7963 993 1012 1863 0
-7963 993 1014 0
-7963 993 1016 0
-7963 993 1018 0
-7963 993 1020 0
-7963 995 1868 0
-7963 995 1007 1866 0
-7963 995 1008 1864 0
-7963 995 1010 1863 0
-7963 995 1012 0
-7963 995 1014 0
-7963 995 1016 0
-7963 995 1018 0
-7963 995 1020 0
-7963 997 1866 0
-7963 997 1007 1864 0
-7963 997 1008 1863 0
-7963 997 1010 0
-7963 997 1012 0
-7963 997 1014 0
-7963 997 1016 0
-7963 997 1018 0
-7963 997 1020 0
-7963 999 1864 0
-7963 999 1007 1863 0
-7963 999 1008 0
-7963 999 1010 0
-7963 999 1012 0
-7963 999 1014 0
-7963 999 1016 0
-7963 999 1018 0
-7963 999 1020 0
-7963 1001 1863 0
-7963 1001 1007 0
-7963 1001 1008 0
-7963 1001 1010 0
-7963 1001 1012 0
-7963 1001 1014 0
-7963 1001 1016 0
-7963 1001 1018 0
-7963 1001 1020 0
-7963 1003 0
-7963 1003 1007 0
-7963 1003 1008 0
-7963 1003 1010 0
-7963 1003 1012 0
-7963 1003 1014 0
-7963 1003 1016 0
-7963 1003 1018 0
-7963 1003 1020 0
-7963 1005 0
-7963 1005 1007 0
-7963 1005 1008 0
-7963 1005 1010 0
-7963 1005 1012 0
-7963 1005 1014 0
-7963 1005 1016 0
-7963 1005 1018 0
-7963 1005 1020 0
7963 -1003 -1007 -1863 0
7963 -1001 -1008 -1863 0
7963 -1001 -1007 -1864 0
7963 -999 -1010 -1863 0
7963 -999 -1008 -1864 0
7963 -999 -1007 -1866 0
7963 -997 -1012 -1863 0
7963 -997 -1010 -1864 0
7963 -997 -1008 -1866 0
7963 -997 -1007 -1868 0
7963 -995 -1014 -1863 0
7963 -995 -1012 -1864 0
7963 -995 -1010 -1866 0
7963 -995 -1008 -1868 0
7963 -995 -1007 -1870 0
7963 -993 -1016 -1863 0
7963 -993 -1014 -1864 0
7963 -993 -1012 -1866 0
7963 -993 -1010 -1868 0
7963 -993 -1008 -1870 0
7963 -993 -1007 -1872 0
7963 -992 -1018 -1863 0
7963 -992 -1016 -1864 0
7963 -992 -1014 -1866 0
7963 -992 -1012 -1868 0
7963 -992 -1010 -1870 0
7963 -992 -1008 -1872 0
7963 -992 -1007 -1874 0
c ((6<=(aux441 + shift(x_00008_00004, -1) + shift(x_00008_00005, -1)))=tv=SATLiteral(7964))
-7964 -1001 -1007 -1863 0
-7964 -999 -1008 -1863 0
-7964 -999 -1007 -1864 0
-7964 -997 -1010 -1863 0
-7964 -997 -1008 -1864 0
-7964 -997 -1007 -1866 0
-7964 -995 -1012 -1863 0
-7964 -995 -1010 -1864 0
-7964 -995 -1008 -1866 0
-7964 -995 -1007 -1868 0
-7964 -993 -1014 -1863 0
-7964 -993 -1012 -1864 0
-7964 -993 -1010 -1866 0
-7964 -993 -1008 -1868 0
-7964 -993 -1007 -1870 0
-7964 -992 -1016 -1863 0
-7964 -992 -1014 -1864 0
-7964 -992 -1012 -1866 0
-7964 -992 -1010 -1868 0
-7964 -992 -1008 -1870 0
-7964 -992 -1007 -1872 0
7964 1872 0
7964 1007 1870 0
7964 1008 1868 0
7964 1010 1866 0
7964 1012 1864 0
7964 1014 1863 0
7964 1016 0
7964 1018 0
7964 1020 0
7964 992 1870 0
7964 992 1007 1868 0
7964 992 1008 1866 0
7964 992 1010 1864 0
7964 992 1012 1863 0
7964 992 1014 0
7964 992 1016 0
7964 992 1018 0
7964 992 1020 0
7964 993 1868 0
7964 993 1007 1866 0
7964 993 1008 1864 0
7964 993 1010 1863 0
7964 993 1012 0
7964 993 1014 0
7964 993 1016 0
7964 993 1018 0
7964 993 1020 0
7964 995 1866 0
7964 995 1007 1864 0
7964 995 1008 1863 0
7964 995 1010 0
7964 995 1012 0
7964 995 1014 0
7964 995 1016 0
7964 995 1018 0
7964 995 1020 0
7964 997 1864 0
7964 997 1007 1863 0
7964 997 1008 0
7964 997 1010 0
7964 997 1012 0
7964 997 1014 0
7964 997 1016 0
7964 997 1018 0
7964 997 1020 0
7964 999 1863 0
7964 999 1007 0
7964 999 1008 0
7964 999 1010 0
7964 999 1012 0
7964 999 1014 0
7964 999 1016 0
7964 999 1018 0
7964 999 1020 0
7964 1001 0
7964 1001 1007 0
7964 1001 1008 0
7964 1001 1010 0
7964 1001 1012 0
7964 1001 1014 0
7964 1001 1016 0
7964 1001 1018 0
7964 1001 1020 0
7964 1003 0
7964 1003 1007 0
7964 1003 1008 0
7964 1003 1010 0
7964 1003 1012 0
7964 1003 1014 0
7964 1003 1016 0
7964 1003 1018 0
7964 1003 1020 0
7964 1005 0
7964 1005 1007 0
7964 1005 1008 0
7964 1005 1010 0
7964 1005 1012 0
7964 1005 1014 0
7964 1005 1016 0
7964 1005 1018 0
7964 1005 1020 0
c (((shift(x_00007_00009, -1) + aux442 + shift(x_00008_00008, -1))<=10)=tv=SATLiteral(7965))
-7965 1913 0
-7965 1052 1911 0
-7965 1053 1909 0
-7965 1055 1907 0
-7965 1057 1905 0
-7965 1059 1903 0
-7965 1061 1901 0
-7965 1063 1899 0
-7965 1065 1897 0
-7965 932 1911 0
-7965 932 1052 1909 0
-7965 932 1053 1907 0
-7965 932 1055 1905 0
-7965 932 1057 1903 0
-7965 932 1059 1901 0
-7965 932 1061 1899 0
-7965 932 1063 1897 0
-7965 932 1065 1895 0
-7965 933 1909 0
-7965 933 1052 1907 0
-7965 933 1053 1905 0
-7965 933 1055 1903 0
-7965 933 1057 1901 0
-7965 933 1059 1899 0
-7965 933 1061 1897 0
-7965 933 1063 1895 0
-7965 933 1065 1894 0
-7965 935 1907 0
-7965 935 1052 1905 0
-7965 935 1053 1903 0
-7965 935 1055 1901 0
-7965 935 1057 1899 0
-7965 935 1059 1897 0
-7965 935 1061 1895 0
-7965 935 1063 1894 0
-7965 935 1065 0
-7965 937 1905 0
-7965 937 1052 1903 0
-7965 937 1053 1901 0
-7965 937 1055 1899 0
-7965 937 1057 1897 0
-7965 937 1059 1895 0
-7965 937 1061 1894 0
-7965 937 1063 0
-7965 937 1065 0
-7965 939 1903 0
-7965 939 1052 1901 0
-7965 939 1053 1899 0
-7965 939 1055 1897 0
-7965 939 1057 1895 0
-7965 939 1059 1894 0
-7965 939 1061 0
-7965 939 1063 0
-7965 939 1065 0
-7965 941 1901 0
-7965 941 1052 1899 0
-7965 941 1053 1897 0
-7965 941 1055 1895 0
-7965 941 1057 1894 0
-7965 941 1059 0
-7965 941 1061 0
-7965 941 1063 0
-7965 941 1065 0
-7965 943 1899 0
-7965 943 1052 1897 0
-7965 943 1053 1895 0
-7965 943 1055 1894 0
-7965 943 1057 0
-7965 943 1059 0
-7965 943 1061 0
-7965 943 1063 0
-7965 943 1065 0
-7965 945 1897 0
-7965 945 1052 1895 0
-7965 945 1053 1894 0
-7965 945 1055 0
-7965 945 1057 0
-7965 945 1059 0
-7965 945 1061 0
-7965 945 1063 0
-7965 945 1065 0
7965 -1055 -1894 0
7965 -1053 -1895 0
7965 -1052 -1897 0
7965 -945 -1057 -1894 0
7965 -945 -1055 -1895 0
7965 -945 -1053 -1897 0
7965 -945 -1052 -1899 0
7965 -943 -1059 -1894 0
7965 -943 -1057 -1895 0
7965 -943 -1055 -1897 0
7965 -943 -1053 -1899 0
7965 -943 -1052 -1901 0
7965 -941 -1061 -1894 0
7965 -941 -1059 -1895 0
7965 -941 -1057 -1897 0
7965 -941 -1055 -1899 0
7965 -941 -1053 -1901 0
7965 -941 -1052 -1903 0
7965 -939 -1063 -1894 0
7965 -939 -1061 -1895 0
7965 -939 -1059 -1897 0
7965 -939 -1057 -1899 0
7965 -939 -1055 -1901 0
7965 -939 -1053 -1903 0
7965 -939 -1052 -1905 0
7965 -937 -1065 -1894 0
7965 -937 -1063 -1895 0
7965 -937 -1061 -1897 0
7965 -937 -1059 -1899 0
7965 -937 -1057 -1901 0
7965 -937 -1055 -1903 0
7965 -937 -1053 -1905 0
7965 -937 -1052 -1907 0
7965 -935 -1894 0
7965 -935 -1065 -1895 0
7965 -935 -1063 -1897 0
7965 -935 -1061 -1899 0
7965 -935 -1059 -1901 0
7965 -935 -1057 -1903 0
7965 -935 -1055 -1905 0
7965 -935 -1053 -1907 0
7965 -935 -1052 -1909 0
7965 -933 -1895 0
7965 -933 -1065 -1897 0
7965 -933 -1063 -1899 0
7965 -933 -1061 -1901 0
7965 -933 -1059 -1903 0
7965 -933 -1057 -1905 0
7965 -933 -1055 -1907 0
7965 -933 -1053 -1909 0
7965 -933 -1052 -1911 0
7965 -932 -1897 0
7965 -932 -1065 -1899 0
7965 -932 -1063 -1901 0
7965 -932 -1061 -1903 0
7965 -932 -1059 -1905 0
7965 -932 -1057 -1907 0
7965 -932 -1055 -1909 0
7965 -932 -1053 -1911 0
7965 -932 -1052 -1913 0
c ((10<=(shift(x_00007_00009, -1) + aux442 + shift(x_00008_00008, -1)))=tv=SATLiteral(7966))
-7966 -1053 -1894 0
-7966 -1052 -1895 0
-7966 -945 -1055 -1894 0
-7966 -945 -1053 -1895 0
-7966 -945 -1052 -1897 0
-7966 -943 -1057 -1894 0
-7966 -943 -1055 -1895 0
-7966 -943 -1053 -1897 0
-7966 -943 -1052 -1899 0
-7966 -941 -1059 -1894 0
-7966 -941 -1057 -1895 0
-7966 -941 -1055 -1897 0
-7966 -941 -1053 -1899 0
-7966 -941 -1052 -1901 0
-7966 -939 -1061 -1894 0
-7966 -939 -1059 -1895 0
-7966 -939 -1057 -1897 0
-7966 -939 -1055 -1899 0
-7966 -939 -1053 -1901 0
-7966 -939 -1052 -1903 0
-7966 -937 -1063 -1894 0
-7966 -937 -1061 -1895 0
-7966 -937 -1059 -1897 0
-7966 -937 -1057 -1899 0
-7966 -937 -1055 -1901 0
-7966 -937 -1053 -1903 0
-7966 -937 -1052 -1905 0
-7966 -935 -1065 -1894 0
-7966 -935 -1063 -1895 0
-7966 -935 -1061 -1897 0
-7966 -935 -1059 -1899 0
-7966 -935 -1057 -1901 0
-7966 -935 -1055 -1903 0
-7966 -935 -1053 -1905 0
-7966 -935 -1052 -1907 0
-7966 -933 -1894 0
-7966 -933 -1065 -1895 0
-7966 -933 -1063 -1897 0
-7966 -933 -1061 -1899 0
-7966 -933 -1059 -1901 0
-7966 -933 -1057 -1903 0
-7966 -933 -1055 -1905 0
-7966 -933 -1053 -1907 0
-7966 -933 -1052 -1909 0
-7966 -932 -1895 0
-7966 -932 -1065 -1897 0
-7966 -932 -1063 -1899 0
-7966 -932 -1061 -1901 0
-7966 -932 -1059 -1903 0
-7966 -932 -1057 -1905 0
-7966 -932 -1055 -1907 0
-7966 -932 -1053 -1909 0
-7966 -932 -1052 -1911 0
7966 1911 0
7966 1052 1909 0
7966 1053 1907 0
7966 1055 1905 0
7966 1057 1903 0
7966 1059 1901 0
7966 1061 1899 0
7966 1063 1897 0
7966 1065 1895 0
7966 932 1909 0
7966 932 1052 1907 0
7966 932 1053 1905 0
7966 932 1055 1903 0
7966 932 1057 1901 0
7966 932 1059 1899 0
7966 932 1061 1897 0
7966 932 1063 1895 0
7966 932 1065 1894 0
7966 933 1907 0
7966 933 1052 1905 0
7966 933 1053 1903 0
7966 933 1055 1901 0
7966 933 1057 1899 0
7966 933 1059 1897 0
7966 933 1061 1895 0
7966 933 1063 1894 0
7966 933 1065 0
7966 935 1905 0
7966 935 1052 1903 0
7966 935 1053 1901 0
7966 935 1055 1899 0
7966 935 1057 1897 0
7966 935 1059 1895 0
7966 935 1061 1894 0
7966 935 1063 0
7966 935 1065 0
7966 937 1903 0
7966 937 1052 1901 0
7966 937 1053 1899 0
7966 937 1055 1897 0
7966 937 1057 1895 0
7966 937 1059 1894 0
7966 937 1061 0
7966 937 1063 0
7966 937 1065 0
7966 939 1901 0
7966 939 1052 1899 0
7966 939 1053 1897 0
7966 939 1055 1895 0
7966 939 1057 1894 0
7966 939 1059 0
7966 939 1061 0
7966 939 1063 0
7966 939 1065 0
7966 941 1899 0
7966 941 1052 1897 0
7966 941 1053 1895 0
7966 941 1055 1894 0
7966 941 1057 0
7966 941 1059 0
7966 941 1061 0
7966 941 1063 0
7966 941 1065 0
7966 943 1897 0
7966 943 1052 1895 0
7966 943 1053 1894 0
7966 943 1055 0
7966 943 1057 0
7966 943 1059 0
7966 943 1061 0
7966 943 1063 0
7966 943 1065 0
7966 945 1895 0
7966 945 1052 1894 0
7966 945 1053 0
7966 945 1055 0
7966 945 1057 0
7966 945 1059 0
7966 945 1061 0
7966 945 1063 0
7966 945 1065 0
c (((x_00008_00002 + x_00009_00002)<=8)=tv=SATLiteral(7967))
-7967 1108 0
-7967 962 1106 0
-7967 963 1104 0
-7967 965 1102 0
-7967 967 1100 0
-7967 969 1098 0
-7967 971 1097 0
-7967 973 0
-7967 975 0
7967 -973 -1097 0
7967 -971 -1098 0
7967 -969 -1100 0
7967 -967 -1102 0
7967 -965 -1104 0
7967 -963 -1106 0
7967 -962 -1108 0
c ((8<=(x_00008_00002 + x_00009_00002))=tv=SATLiteral(7968))
-7968 -971 -1097 0
-7968 -969 -1098 0
-7968 -967 -1100 0
-7968 -965 -1102 0
-7968 -963 -1104 0
-7968 -962 -1106 0
7968 1106 0
7968 962 1104 0
7968 963 1102 0
7968 965 1100 0
7968 967 1098 0
7968 969 1097 0
7968 971 0
7968 973 0
7968 975 0
c (((x_00008_00003 + x_00009_00003)<=16)=tv=SATLiteral(7969))
-7969 988 1125 0
-7969 990 1123 0
7969 -1123 0
7969 -990 -1125 0
7969 -988 0
7969 -986 0
7969 -984 0
7969 -982 0
7969 -980 0
7969 -978 0
7969 -977 0
c ((16<=(x_00008_00003 + x_00009_00003))=tv=SATLiteral(7970))
-7970 -1121 0
-7970 -990 -1123 0
-7970 -988 -1125 0
-7970 -986 0
-7970 -984 0
-7970 -982 0
-7970 -980 0
-7970 -978 0
-7970 -977 0
7970 986 1125 0
7970 988 1123 0
7970 990 1121 0
c (((x_00008_00006 + x_00008_00007)<=15)=tv=SATLiteral(7971))
-7971 1031 1050 0
-7971 1033 1048 0
-7971 1035 1046 0
7971 -1046 0
7971 -1035 -1048 0
7971 -1033 -1050 0
7971 -1031 0
7971 -1029 0
7971 -1027 0
7971 -1025 0
7971 -1023 0
7971 -1022 0
c ((15<=(x_00008_00006 + x_00008_00007))=tv=SATLiteral(7972))
-7972 -1044 0
-7972 -1035 -1046 0
-7972 -1033 -1048 0
-7972 -1031 -1050 0
-7972 -1029 0
-7972 -1027 0
-7972 -1025 0
-7972 -1023 0
-7972 -1022 0
7972 1029 1050 0
7972 1031 1048 0
7972 1033 1046 0
7972 1035 1044 0
c (((x_00009_00005 + x_00009_00006 + x_00009_00007)<=13)=tv=SATLiteral(7973))
-7973 1160 1185 0
-7973 1162 1183 0
-7973 1164 1181 0
-7973 1166 1179 0
-7973 1168 1177 0
-7973 1170 1175 0
-7973 1142 1158 1185 0
-7973 1142 1160 1183 0
-7973 1142 1162 1181 0
-7973 1142 1164 1179 0
-7973 1142 1166 1177 0
-7973 1142 1168 1175 0
-7973 1142 1170 1173 0
-7973 1143 1157 1185 0
-7973 1143 1158 1183 0
-7973 1143 1160 1181 0
-7973 1143 1162 1179 0
-7973 1143 1164 1177 0
-7973 1143 1166 1175 0
-7973 1143 1168 1173 0
-7973 1143 1170 1172 0
-7973 1145 1185 0
-7973 1145 1157 1183 0
-7973 1145 1158 1181 0
-7973 1145 1160 1179 0
-7973 1145 1162 1177 0
-7973 1145 1164 1175 0
-7973 1145 1166 1173 0
-7973 1145 1168 1172 0
-7973 1145 1170 0
-7973 1147 1183 0
-7973 1147 1157 1181 0
-7973 1147 1158 1179 0
-7973 1147 1160 1177 0
-7973 1147 1162 1175 0
-7973 1147 1164 1173 0
-7973 1147 1166 1172 0
-7973 1147 1168 0
-7973 1147 1170 0
-7973 1149 1181 0
-7973 1149 1157 1179 0
-7973 1149 1158 1177 0
-7973 1149 1160 1175 0
-7973 1149 1162 1173 0
-7973 1149 1164 1172 0
-7973 1149 1166 0
-7973 1149 1168 0
-7973 1149 1170 0
-7973 1151 1179 0
-7973 1151 1157 1177 0
-7973 1151 1158 1175 0
-7973 1151 1160 1173 0
-7973 1151 1162 1172 0
-7973 1151 1164 0
-7973 1151 1166 0
-7973 1151 1168 0
-7973 1151 1170 0
-7973 1153 1177 0
-7973 1153 1157 1175 0
-7973 1153 1158 1173 0
-7973 1153 1160 1172 0
-7973 1153 1162 0
-7973 1153 1164 0
-7973 1153 1166 0
-7973 1153 1168 0
-7973 1153 1170 0
-7973 1155 1175 0
-7973 1155 1157 1173 0
-7973 1155 1158 1172 0
-7973 1155 1160 0
-7973 1155 1162 0
-7973 1155 1164 0
-7973 1155 1166 0
-7973 1155 1168 0
-7973 1155 1170 0
7973 -1160 -1172 0
7973 -1158 -1173 0
7973 -1157 -1175 0
7973 -1155 -1162 -1172 0
7973 -1155 -1160 -1173 0
7973 -1155 -1158 -1175 0
7973 -1155 -1157 -1177 0
7973 -1153 -1164 -1172 0
7973 -1153 -1162 -1173 0
7973 -1153 -1160 -1175 0
7973 -1153 -1158 -1177 0
7973 -1153 -1157 -1179 0
7973 -1151 -1166 -1172 0
7973 -1151 -1164 -1173 0
7973 -1151 -1162 -1175 0
7973 -1151 -1160 -1177 0
7973 -1151 -1158 -1179 0
7973 -1151 -1157 -1181 0
7973 -1149 -1168 -1172 0
7973 -1149 -1166 -1173 0
7973 -1149 -1164 -1175 0
7973 -1149 -1162 -1177 0
7973 -1149 -1160 -1179 0
7973 -1149 -1158 -1181 0
7973 -1149 -1157 -1183 0
7973 -1147 -1170 -1172 0
7973 -1147 -1168 -1173 0
7973 -1147 -1166 -1175 0
7973 -1147 -1164 -1177 0
7973 -1147 -1162 -1179 0
7973 -1147 -1160 -1181 0
7973 -1147 -1158 -1183 0
7973 -1147 -1157 -1185 0
7973 -1145 -1172 0
7973 -1145 -1170 -1173 0
7973 -1145 -1168 -1175 0
7973 -1145 -1166 -1177 0
7973 -1145 -1164 -1179 0
7973 -1145 -1162 -1181 0
7973 -1145 -1160 -1183 0
7973 -1145 -1158 -1185 0
7973 -1145 -1157 0
7973 -1143 -1173 0
7973 -1143 -1170 -1175 0
7973 -1143 -1168 -1177 0
7973 -1143 -1166 -1179 0
7973 -1143 -1164 -1181 0
7973 -1143 -1162 -1183 0
7973 -1143 -1160 -1185 0
7973 -1143 -1158 0
7973 -1143 -1157 0
7973 -1142 -1175 0
7973 -1142 -1170 -1177 0
7973 -1142 -1168 -1179 0
7973 -1142 -1166 -1181 0
7973 -1142 -1164 -1183 0
7973 -1142 -1162 -1185 0
7973 -1142 -1160 0
7973 -1142 -1158 0
7973 -1142 -1157 0
c ((13<=(x_00009_00005 + x_00009_00006 + x_00009_00007))=tv=SATLiteral(7974))
-7974 -1158 -1172 0
-7974 -1157 -1173 0
-7974 -1155 -1160 -1172 0
-7974 -1155 -1158 -1173 0
-7974 -1155 -1157 -1175 0
-7974 -1153 -1162 -1172 0
-7974 -1153 -1160 -1173 0
-7974 -1153 -1158 -1175 0
-7974 -1153 -1157 -1177 0
-7974 -1151 -1164 -1172 0
-7974 -1151 -1162 -1173 0
-7974 -1151 -1160 -1175 0
-7974 -1151 -1158 -1177 0
-7974 -1151 -1157 -1179 0
-7974 -1149 -1166 -1172 0
-7974 -1149 -1164 -1173 0
-7974 -1149 -1162 -1175 0
-7974 -1149 -1160 -1177 0
-7974 -1149 -1158 -1179 0
-7974 -1149 -1157 -1181 0
-7974 -1147 -1168 -1172 0
-7974 -1147 -1166 -1173 0
-7974 -1147 -1164 -1175 0
-7974 -1147 -1162 -1177 0
-7974 -1147 -1160 -1179 0
-7974 -1147 -1158 -1181 0
-7974 -1147 -1157 -1183 0
-7974 -1145 -1170 -1172 0
-7974 -1145 -1168 -1173 0
-7974 -1145 -1166 -1175 0
-7974 -1145 -1164 -1177 0
-7974 -1145 -1162 -1179 0
-7974 -1145 -1160 -1181 0
-7974 -1145 -1158 -1183 0
-7974 -1145 -1157 -1185 0
-7974 -1143 -1172 0
-7974 -1143 -1170 -1173 0
-7974 -1143 -1168 -1175 0
-7974 -1143 -1166 -1177 0
-7974 -1143 -1164 -1179 0
-7974 -1143 -1162 -1181 0
-7974 -1143 -1160 -1183 0
-7974 -1143 -1158 -1185 0
-7974 -1143 -1157 0
-7974 -1142 -1173 0
-7974 -1142 -1170 -1175 0
-7974 -1142 -1168 -1177 0
-7974 -1142 -1166 -1179 0
-7974 -1142 -1164 -1181 0
-7974 -1142 -1162 -1183 0
-7974 -1142 -1160 -1185 0
-7974 -1142 -1158 0
-7974 -1142 -1157 0
7974 1158 1185 0
7974 1160 1183 0
7974 1162 1181 0
7974 1164 1179 0
7974 1166 1177 0
7974 1168 1175 0
7974 1170 1173 0
7974 1142 1157 1185 0
7974 1142 1158 1183 0
7974 1142 1160 1181 0
7974 1142 1162 1179 0
7974 1142 1164 1177 0
7974 1142 1166 1175 0
7974 1142 1168 1173 0
7974 1142 1170 1172 0
7974 1143 1185 0
7974 1143 1157 1183 0
7974 1143 1158 1181 0
7974 1143 1160 1179 0
7974 1143 1162 1177 0
7974 1143 1164 1175 0
7974 1143 1166 1173 0
7974 1143 1168 1172 0
7974 1143 1170 0
7974 1145 1183 0
7974 1145 1157 1181 0
7974 1145 1158 1179 0
7974 1145 1160 1177 0
7974 1145 1162 1175 0
7974 1145 1164 1173 0
7974 1145 1166 1172 0
7974 1145 1168 0
7974 1145 1170 0
7974 1147 1181 0
7974 1147 1157 1179 0
7974 1147 1158 1177 0
7974 1147 1160 1175 0
7974 1147 1162 1173 0
7974 1147 1164 1172 0
7974 1147 1166 0
7974 1147 1168 0
7974 1147 1170 0
7974 1149 1179 0
7974 1149 1157 1177 0
7974 1149 1158 1175 0
7974 1149 1160 1173 0
7974 1149 1162 1172 0
7974 1149 1164 0
7974 1149 1166 0
7974 1149 1168 0
7974 1149 1170 0
7974 1151 1177 0
7974 1151 1157 1175 0
7974 1151 1158 1173 0
7974 1151 1160 1172 0
7974 1151 1162 0
7974 1151 1164 0
7974 1151 1166 0
7974 1151 1168 0
7974 1151 1170 0
7974 1153 1175 0
7974 1153 1157 1173 0
7974 1153 1158 1172 0
7974 1153 1160 0
7974 1153 1162 0
7974 1153 1164 0
7974 1153 1166 0
7974 1153 1168 0
7974 1153 1170 0
7974 1155 1173 0
7974 1155 1157 1172 0
7974 1155 1158 0
7974 1155 1160 0
7974 1155 1162 0
7974 1155 1164 0
7974 1155 1166 0
7974 1155 1168 0
7974 1155 1170 0
c (((x_00009_00008 + x_00009_00009)<=17)=tv=SATLiteral(7975))
-7975 1200 1215 0
7975 -1215 0
7975 -1200 0
7975 -1198 0
7975 -1196 0
7975 -1194 0
7975 -1192 0
7975 -1190 0
7975 -1188 0
7975 -1187 0
c ((17<=(x_00009_00008 + x_00009_00009))=tv=SATLiteral(7976))
-7976 -1213 0
-7976 -1200 -1215 0
-7976 -1198 0
-7976 -1196 0
-7976 -1194 0
-7976 -1192 0
-7976 -1190 0
-7976 -1188 0
-7976 -1187 0
7976 1198 1215 0
7976 1200 1213 0
c (((aux444 + aux447 + aux448)<=1)=tv=SATLiteral(7977))
-7977 1943 0
-7977 1937 1942 0
-7977 1938 0
-7977 1940 0
-7977 1928 1942 0
-7977 1928 1937 0
-7977 1928 1938 0
-7977 1928 1940 0
-7977 1929 0
-7977 1929 1937 0
-7977 1929 1938 0
-7977 1929 1940 0
7977 -1929 -1937 -1942 0
7977 -1928 -1938 -1942 0
7977 -1928 -1937 -1943 0
c ((1<=(aux444 + aux447 + aux448))=tv=SATLiteral(7978))
-7978 -1928 -1937 -1942 0
7978 1942 0
7978 1937 0
7978 1938 0
7978 1940 0
7978 1928 0
7978 1928 1937 0
7978 1928 1938 0
7978 1928 1940 0
7978 1929 0
7978 1929 1937 0
7978 1929 1938 0
7978 1929 1940 0
c (((aux450 + aux453 + aux454)<=1)=tv=SATLiteral(7979))
-7979 1967 0
-7979 1961 1966 0
-7979 1962 0
-7979 1964 0
-7979 1952 1966 0
-7979 1952 1961 0
-7979 1952 1962 0
-7979 1952 1964 0
-7979 1953 0
-7979 1953 1961 0
-7979 1953 1962 0
-7979 1953 1964 0
7979 -1953 -1961 -1966 0
7979 -1952 -1962 -1966 0
7979 -1952 -1961 -1967 0
c ((1<=(aux450 + aux453 + aux454))=tv=SATLiteral(7980))
-7980 -1952 -1961 -1966 0
7980 1966 0
7980 1961 0
7980 1962 0
7980 1964 0
7980 1952 0
7980 1952 1961 0
7980 1952 1962 0
7980 1952 1964 0
7980 1953 0
7980 1953 1961 0
7980 1953 1962 0
7980 1953 1964 0
c (((aux456 + aux459 + aux460)<=1)=tv=SATLiteral(7981))
-7981 1991 0
-7981 1985 1990 0
-7981 1986 0
-7981 1988 0
-7981 1976 1990 0
-7981 1976 1985 0
-7981 1976 1986 0
-7981 1976 1988 0
-7981 1977 0
-7981 1977 1985 0
-7981 1977 1986 0
-7981 1977 1988 0
7981 -1977 -1985 -1990 0
7981 -1976 -1986 -1990 0
7981 -1976 -1985 -1991 0
c ((1<=(aux456 + aux459 + aux460))=tv=SATLiteral(7982))
-7982 -1976 -1985 -1990 0
7982 1990 0
7982 1985 0
7982 1986 0
7982 1988 0
7982 1976 0
7982 1976 1985 0
7982 1976 1986 0
7982 1976 1988 0
7982 1977 0
7982 1977 1985 0
7982 1977 1986 0
7982 1977 1988 0
c (((aux462 + aux465 + aux466)<=1)=tv=SATLiteral(7983))
-7983 2015 0
-7983 2009 2014 0
-7983 2010 0
-7983 2012 0
-7983 2000 2014 0
-7983 2000 2009 0
-7983 2000 2010 0
-7983 2000 2012 0
-7983 2001 0
-7983 2001 2009 0
-7983 2001 2010 0
-7983 2001 2012 0
7983 -2001 -2009 -2014 0
7983 -2000 -2010 -2014 0
7983 -2000 -2009 -2015 0
c ((1<=(aux462 + aux465 + aux466))=tv=SATLiteral(7984))
-7984 -2000 -2009 -2014 0
7984 2014 0
7984 2009 0
7984 2010 0
7984 2012 0
7984 2000 0
7984 2000 2009 0
7984 2000 2010 0
7984 2000 2012 0
7984 2001 0
7984 2001 2009 0
7984 2001 2010 0
7984 2001 2012 0
c (((aux468 + aux471 + aux472)<=1)=tv=SATLiteral(7985))
-7985 2039 0
-7985 2033 2038 0
-7985 2034 0
-7985 2036 0
-7985 2024 2038 0
-7985 2024 2033 0
-7985 2024 2034 0
-7985 2024 2036 0
-7985 2025 0
-7985 2025 2033 0
-7985 2025 2034 0
-7985 2025 2036 0
7985 -2025 -2033 -2038 0
7985 -2024 -2034 -2038 0
7985 -2024 -2033 -2039 0
c ((1<=(aux468 + aux471 + aux472))=tv=SATLiteral(7986))
-7986 -2024 -2033 -2038 0
7986 2038 0
7986 2033 0
7986 2034 0
7986 2036 0
7986 2024 0
7986 2024 2033 0
7986 2024 2034 0
7986 2024 2036 0
7986 2025 0
7986 2025 2033 0
7986 2025 2034 0
7986 2025 2036 0
c (((aux474 + aux477 + aux478)<=1)=tv=SATLiteral(7987))
-7987 2063 0
-7987 2057 2062 0
-7987 2058 0
-7987 2060 0
-7987 2048 2062 0
-7987 2048 2057 0
-7987 2048 2058 0
-7987 2048 2060 0
-7987 2049 0
-7987 2049 2057 0
-7987 2049 2058 0
-7987 2049 2060 0
7987 -2049 -2057 -2062 0
7987 -2048 -2058 -2062 0
7987 -2048 -2057 -2063 0
c ((1<=(aux474 + aux477 + aux478))=tv=SATLiteral(7988))
-7988 -2048 -2057 -2062 0
7988 2062 0
7988 2057 0
7988 2058 0
7988 2060 0
7988 2048 0
7988 2048 2057 0
7988 2048 2058 0
7988 2048 2060 0
7988 2049 0
7988 2049 2057 0
7988 2049 2058 0
7988 2049 2060 0
c (((aux480 + aux483 + aux484)<=1)=tv=SATLiteral(7989))
-7989 2087 0
-7989 2081 2086 0
-7989 2082 0
-7989 2084 0
-7989 2072 2086 0
-7989 2072 2081 0
-7989 2072 2082 0
-7989 2072 2084 0
-7989 2073 0
-7989 2073 2081 0
-7989 2073 2082 0
-7989 2073 2084 0
7989 -2073 -2081 -2086 0
7989 -2072 -2082 -2086 0
7989 -2072 -2081 -2087 0
c ((1<=(aux480 + aux483 + aux484))=tv=SATLiteral(7990))
-7990 -2072 -2081 -2086 0
7990 2086 0
7990 2081 0
7990 2082 0
7990 2084 0
7990 2072 0
7990 2072 2081 0
7990 2072 2082 0
7990 2072 2084 0
7990 2073 0
7990 2073 2081 0
7990 2073 2082 0
7990 2073 2084 0
c (((aux486 + aux489 + aux490)<=1)=tv=SATLiteral(7991))
-7991 2111 0
-7991 2105 2110 0
-7991 2106 0
-7991 2108 0
-7991 2096 2110 0
-7991 2096 2105 0
-7991 2096 2106 0
-7991 2096 2108 0
-7991 2097 0
-7991 2097 2105 0
-7991 2097 2106 0
-7991 2097 2108 0
7991 -2097 -2105 -2110 0
7991 -2096 -2106 -2110 0
7991 -2096 -2105 -2111 0
c ((1<=(aux486 + aux489 + aux490))=tv=SATLiteral(7992))
-7992 -2096 -2105 -2110 0
7992 2110 0
7992 2105 0
7992 2106 0
7992 2108 0
7992 2096 0
7992 2096 2105 0
7992 2096 2106 0
7992 2096 2108 0
7992 2097 0
7992 2097 2105 0
7992 2097 2106 0
7992 2097 2108 0
c (((aux492 + aux495 + aux496)<=1)=tv=SATLiteral(7993))
-7993 2135 0
-7993 2129 2134 0
-7993 2130 0
-7993 2132 0
-7993 2120 2134 0
-7993 2120 2129 0
-7993 2120 2130 0
-7993 2120 2132 0
-7993 2121 0
-7993 2121 2129 0
-7993 2121 2130 0
-7993 2121 2132 0
7993 -2121 -2129 -2134 0
7993 -2120 -2130 -2134 0
7993 -2120 -2129 -2135 0
c ((1<=(aux492 + aux495 + aux496))=tv=SATLiteral(7994))
-7994 -2120 -2129 -2134 0
7994 2134 0
7994 2129 0
7994 2130 0
7994 2132 0
7994 2120 0
7994 2120 2129 0
7994 2120 2130 0
7994 2120 2132 0
7994 2121 0
7994 2121 2129 0
7994 2121 2130 0
7994 2121 2132 0
c (((aux498 + aux501 + aux502)<=1)=tv=SATLiteral(7995))
-7995 2159 0
-7995 2153 2158 0
-7995 2154 0
-7995 2156 0
-7995 2144 2158 0
-7995 2144 2153 0
-7995 2144 2154 0
-7995 2144 2156 0
-7995 2145 0
-7995 2145 2153 0
-7995 2145 2154 0
-7995 2145 2156 0
7995 -2145 -2153 -2158 0
7995 -2144 -2154 -2158 0
7995 -2144 -2153 -2159 0
c ((1<=(aux498 + aux501 + aux502))=tv=SATLiteral(7996))
-7996 -2144 -2153 -2158 0
7996 2158 0
7996 2153 0
7996 2154 0
7996 2156 0
7996 2144 0
7996 2144 2153 0
7996 2144 2154 0
7996 2144 2156 0
7996 2145 0
7996 2145 2153 0
7996 2145 2154 0
7996 2145 2156 0
c (((aux504 + aux507 + aux508)<=1)=tv=SATLiteral(7997))
-7997 2183 0
-7997 2177 2182 0
-7997 2178 0
-7997 2180 0
-7997 2168 2182 0
-7997 2168 2177 0
-7997 2168 2178 0
-7997 2168 2180 0
-7997 2169 0
-7997 2169 2177 0
-7997 2169 2178 0
-7997 2169 2180 0
7997 -2169 -2177 -2182 0
7997 -2168 -2178 -2182 0
7997 -2168 -2177 -2183 0
c ((1<=(aux504 + aux507 + aux508))=tv=SATLiteral(7998))
-7998 -2168 -2177 -2182 0
7998 2182 0
7998 2177 0
7998 2178 0
7998 2180 0
7998 2168 0
7998 2168 2177 0
7998 2168 2178 0
7998 2168 2180 0
7998 2169 0
7998 2169 2177 0
7998 2169 2178 0
7998 2169 2180 0
c (((aux510 + aux513 + aux514)<=1)=tv=SATLiteral(7999))
-7999 2207 0
-7999 2201 2206 0
-7999 2202 0
-7999 2204 0
-7999 2192 2206 0
-7999 2192 2201 0
-7999 2192 2202 0
-7999 2192 2204 0
-7999 2193 0
-7999 2193 2201 0
-7999 2193 2202 0
-7999 2193 2204 0
7999 -2193 -2201 -2206 0
7999 -2192 -2202 -2206 0
7999 -2192 -2201 -2207 0
c ((1<=(aux510 + aux513 + aux514))=tv=SATLiteral(8000))
-8000 -2192 -2201 -2206 0
8000 2206 0
8000 2201 0
8000 2202 0
8000 2204 0
8000 2192 0
8000 2192 2201 0
8000 2192 2202 0
8000 2192 2204 0
8000 2193 0
8000 2193 2201 0
8000 2193 2202 0
8000 2193 2204 0
c (((aux516 + aux519 + aux520)<=1)=tv=SATLiteral(8001))
-8001 2231 0
-8001 2225 2230 0
-8001 2226 0
-8001 2228 0
-8001 2216 2230 0
-8001 2216 2225 0
-8001 2216 2226 0
-8001 2216 2228 0
-8001 2217 0
-8001 2217 2225 0
-8001 2217 2226 0
-8001 2217 2228 0
8001 -2217 -2225 -2230 0
8001 -2216 -2226 -2230 0
8001 -2216 -2225 -2231 0
c ((1<=(aux516 + aux519 + aux520))=tv=SATLiteral(8002))
-8002 -2216 -2225 -2230 0
8002 2230 0
8002 2225 0
8002 2226 0
8002 2228 0
8002 2216 0
8002 2216 2225 0
8002 2216 2226 0
8002 2216 2228 0
8002 2217 0
8002 2217 2225 0
8002 2217 2226 0
8002 2217 2228 0
c (((aux522 + aux525 + aux526)<=1)=tv=SATLiteral(8003))
-8003 2255 0
-8003 2249 2254 0
-8003 2250 0
-8003 2252 0
-8003 2240 2254 0
-8003 2240 2249 0
-8003 2240 2250 0
-8003 2240 2252 0
-8003 2241 0
-8003 2241 2249 0
-8003 2241 2250 0
-8003 2241 2252 0
8003 -2241 -2249 -2254 0
8003 -2240 -2250 -2254 0
8003 -2240 -2249 -2255 0
c ((1<=(aux522 + aux525 + aux526))=tv=SATLiteral(8004))
-8004 -2240 -2249 -2254 0
8004 2254 0
8004 2249 0
8004 2250 0
8004 2252 0
8004 2240 0
8004 2240 2249 0
8004 2240 2250 0
8004 2240 2252 0
8004 2241 0
8004 2241 2249 0
8004 2241 2250 0
8004 2241 2252 0
c (((aux528 + aux531 + aux532)<=1)=tv=SATLiteral(8005))
-8005 2279 0
-8005 2273 2278 0
-8005 2274 0
-8005 2276 0
-8005 2264 2278 0
-8005 2264 2273 0
-8005 2264 2274 0
-8005 2264 2276 0
-8005 2265 0
-8005 2265 2273 0
-8005 2265 2274 0
-8005 2265 2276 0
8005 -2265 -2273 -2278 0
8005 -2264 -2274 -2278 0
8005 -2264 -2273 -2279 0
c ((1<=(aux528 + aux531 + aux532))=tv=SATLiteral(8006))
-8006 -2264 -2273 -2278 0
8006 2278 0
8006 2273 0
8006 2274 0
8006 2276 0
8006 2264 0
8006 2264 2273 0
8006 2264 2274 0
8006 2264 2276 0
8006 2265 0
8006 2265 2273 0
8006 2265 2274 0
8006 2265 2276 0
c (((aux534 + aux537 + aux538)<=1)=tv=SATLiteral(8007))
-8007 2303 0
-8007 2297 2302 0
-8007 2298 0
-8007 2300 0
-8007 2288 2302 0
-8007 2288 2297 0
-8007 2288 2298 0
-8007 2288 2300 0
-8007 2289 0
-8007 2289 2297 0
-8007 2289 2298 0
-8007 2289 2300 0
8007 -2289 -2297 -2302 0
8007 -2288 -2298 -2302 0
8007 -2288 -2297 -2303 0
c ((1<=(aux534 + aux537 + aux538))=tv=SATLiteral(8008))
-8008 -2288 -2297 -2302 0
8008 2302 0
8008 2297 0
8008 2298 0
8008 2300 0
8008 2288 0
8008 2288 2297 0
8008 2288 2298 0
8008 2288 2300 0
8008 2289 0
8008 2289 2297 0
8008 2289 2298 0
8008 2289 2300 0
c (((aux540 + aux543 + aux544)<=1)=tv=SATLiteral(8009))
-8009 2327 0
-8009 2321 2326 0
-8009 2322 0
-8009 2324 0
-8009 2312 2326 0
-8009 2312 2321 0
-8009 2312 2322 0
-8009 2312 2324 0
-8009 2313 0
-8009 2313 2321 0
-8009 2313 2322 0
-8009 2313 2324 0
8009 -2313 -2321 -2326 0
8009 -2312 -2322 -2326 0
8009 -2312 -2321 -2327 0
c ((1<=(aux540 + aux543 + aux544))=tv=SATLiteral(8010))
-8010 -2312 -2321 -2326 0
8010 2326 0
8010 2321 0
8010 2322 0
8010 2324 0
8010 2312 0
8010 2312 2321 0
8010 2312 2322 0
8010 2312 2324 0
8010 2313 0
8010 2313 2321 0
8010 2313 2322 0
8010 2313 2324 0
c (((aux546 + aux549 + aux550)<=1)=tv=SATLiteral(8011))
-8011 2351 0
-8011 2345 2350 0
-8011 2346 0
-8011 2348 0
-8011 2336 2350 0
-8011 2336 2345 0
-8011 2336 2346 0
-8011 2336 2348 0
-8011 2337 0
-8011 2337 2345 0
-8011 2337 2346 0
-8011 2337 2348 0
8011 -2337 -2345 -2350 0
8011 -2336 -2346 -2350 0
8011 -2336 -2345 -2351 0
c ((1<=(aux546 + aux549 + aux550))=tv=SATLiteral(8012))
-8012 -2336 -2345 -2350 0
8012 2350 0
8012 2345 0
8012 2346 0
8012 2348 0
8012 2336 0
8012 2336 2345 0
8012 2336 2346 0
8012 2336 2348 0
8012 2337 0
8012 2337 2345 0
8012 2337 2346 0
8012 2337 2348 0
c (((aux552 + aux555 + aux556)<=1)=tv=SATLiteral(8013))
-8013 2375 0
-8013 2369 2374 0
-8013 2370 0
-8013 2372 0
-8013 2360 2374 0
-8013 2360 2369 0
-8013 2360 2370 0
-8013 2360 2372 0
-8013 2361 0
-8013 2361 2369 0
-8013 2361 2370 0
-8013 2361 2372 0
8013 -2361 -2369 -2374 0
8013 -2360 -2370 -2374 0
8013 -2360 -2369 -2375 0
c ((1<=(aux552 + aux555 + aux556))=tv=SATLiteral(8014))
-8014 -2360 -2369 -2374 0
8014 2374 0
8014 2369 0
8014 2370 0
8014 2372 0
8014 2360 0
8014 2360 2369 0
8014 2360 2370 0
8014 2360 2372 0
8014 2361 0
8014 2361 2369 0
8014 2361 2370 0
8014 2361 2372 0
c (((aux558 + aux561 + aux562)<=1)=tv=SATLiteral(8015))
-8015 2399 0
-8015 2393 2398 0
-8015 2394 0
-8015 2396 0
-8015 2384 2398 0
-8015 2384 2393 0
-8015 2384 2394 0
-8015 2384 2396 0
-8015 2385 0
-8015 2385 2393 0
-8015 2385 2394 0
-8015 2385 2396 0
8015 -2385 -2393 -2398 0
8015 -2384 -2394 -2398 0
8015 -2384 -2393 -2399 0
c ((1<=(aux558 + aux561 + aux562))=tv=SATLiteral(8016))
-8016 -2384 -2393 -2398 0
8016 2398 0
8016 2393 0
8016 2394 0
8016 2396 0
8016 2384 0
8016 2384 2393 0
8016 2384 2394 0
8016 2384 2396 0
8016 2385 0
8016 2385 2393 0
8016 2385 2394 0
8016 2385 2396 0
c (((aux564 + aux567 + aux568)<=1)=tv=SATLiteral(8017))
-8017 2423 0
-8017 2417 2422 0
-8017 2418 0
-8017 2420 0
-8017 2408 2422 0
-8017 2408 2417 0
-8017 2408 2418 0
-8017 2408 2420 0
-8017 2409 0
-8017 2409 2417 0
-8017 2409 2418 0
-8017 2409 2420 0
8017 -2409 -2417 -2422 0
8017 -2408 -2418 -2422 0
8017 -2408 -2417 -2423 0
c ((1<=(aux564 + aux567 + aux568))=tv=SATLiteral(8018))
-8018 -2408 -2417 -2422 0
8018 2422 0
8018 2417 0
8018 2418 0
8018 2420 0
8018 2408 0
8018 2408 2417 0
8018 2408 2418 0
8018 2408 2420 0
8018 2409 0
8018 2409 2417 0
8018 2409 2418 0
8018 2409 2420 0
c (((aux570 + aux573 + aux574)<=1)=tv=SATLiteral(8019))
-8019 2447 0
-8019 2441 2446 0
-8019 2442 0
-8019 2444 0
-8019 2432 2446 0
-8019 2432 2441 0
-8019 2432 2442 0
-8019 2432 2444 0
-8019 2433 0
-8019 2433 2441 0
-8019 2433 2442 0
-8019 2433 2444 0
8019 -2433 -2441 -2446 0
8019 -2432 -2442 -2446 0
8019 -2432 -2441 -2447 0
c ((1<=(aux570 + aux573 + aux574))=tv=SATLiteral(8020))
-8020 -2432 -2441 -2446 0
8020 2446 0
8020 2441 0
8020 2442 0
8020 2444 0
8020 2432 0
8020 2432 2441 0
8020 2432 2442 0
8020 2432 2444 0
8020 2433 0
8020 2433 2441 0
8020 2433 2442 0
8020 2433 2444 0
c (((aux576 + aux579 + aux580)<=1)=tv=SATLiteral(8021))
-8021 2471 0
-8021 2465 2470 0
-8021 2466 0
-8021 2468 0
-8021 2456 2470 0
-8021 2456 2465 0
-8021 2456 2466 0
-8021 2456 2468 0
-8021 2457 0
-8021 2457 2465 0
-8021 2457 2466 0
-8021 2457 2468 0
8021 -2457 -2465 -2470 0
8021 -2456 -2466 -2470 0
8021 -2456 -2465 -2471 0
c ((1<=(aux576 + aux579 + aux580))=tv=SATLiteral(8022))
-8022 -2456 -2465 -2470 0
8022 2470 0
8022 2465 0
8022 2466 0
8022 2468 0
8022 2456 0
8022 2456 2465 0
8022 2456 2466 0
8022 2456 2468 0
8022 2457 0
8022 2457 2465 0
8022 2457 2466 0
8022 2457 2468 0
c (((aux582 + aux585 + aux586)<=1)=tv=SATLiteral(8023))
-8023 2495 0
-8023 2489 2494 0
-8023 2490 0
-8023 2492 0
-8023 2480 2494 0
-8023 2480 2489 0
-8023 2480 2490 0
-8023 2480 2492 0
-8023 2481 0
-8023 2481 2489 0
-8023 2481 2490 0
-8023 2481 2492 0
8023 -2481 -2489 -2494 0
8023 -2480 -2490 -2494 0
8023 -2480 -2489 -2495 0
c ((1<=(aux582 + aux585 + aux586))=tv=SATLiteral(8024))
-8024 -2480 -2489 -2494 0
8024 2494 0
8024 2489 0
8024 2490 0
8024 2492 0
8024 2480 0
8024 2480 2489 0
8024 2480 2490 0
8024 2480 2492 0
8024 2481 0
8024 2481 2489 0
8024 2481 2490 0
8024 2481 2492 0
c (((aux588 + aux591 + aux592)<=1)=tv=SATLiteral(8025))
-8025 2519 0
-8025 2513 2518 0
-8025 2514 0
-8025 2516 0
-8025 2504 2518 0
-8025 2504 2513 0
-8025 2504 2514 0
-8025 2504 2516 0
-8025 2505 0
-8025 2505 2513 0
-8025 2505 2514 0
-8025 2505 2516 0
8025 -2505 -2513 -2518 0
8025 -2504 -2514 -2518 0
8025 -2504 -2513 -2519 0
c ((1<=(aux588 + aux591 + aux592))=tv=SATLiteral(8026))
-8026 -2504 -2513 -2518 0
8026 2518 0
8026 2513 0
8026 2514 0
8026 2516 0
8026 2504 0
8026 2504 2513 0
8026 2504 2514 0
8026 2504 2516 0
8026 2505 0
8026 2505 2513 0
8026 2505 2514 0
8026 2505 2516 0
c (((aux594 + aux597 + aux598)<=1)=tv=SATLiteral(8027))
-8027 2543 0
-8027 2537 2542 0
-8027 2538 0
-8027 2540 0
-8027 2528 2542 0
-8027 2528 2537 0
-8027 2528 2538 0
-8027 2528 2540 0
-8027 2529 0
-8027 2529 2537 0
-8027 2529 2538 0
-8027 2529 2540 0
8027 -2529 -2537 -2542 0
8027 -2528 -2538 -2542 0
8027 -2528 -2537 -2543 0
c ((1<=(aux594 + aux597 + aux598))=tv=SATLiteral(8028))
-8028 -2528 -2537 -2542 0
8028 2542 0
8028 2537 0
8028 2538 0
8028 2540 0
8028 2528 0
8028 2528 2537 0
8028 2528 2538 0
8028 2528 2540 0
8028 2529 0
8028 2529 2537 0
8028 2529 2538 0
8028 2529 2540 0
c (((aux600 + aux603 + aux604)<=1)=tv=SATLiteral(8029))
-8029 2567 0
-8029 2561 2566 0
-8029 2562 0
-8029 2564 0
-8029 2552 2566 0
-8029 2552 2561 0
-8029 2552 2562 0
-8029 2552 2564 0
-8029 2553 0
-8029 2553 2561 0
-8029 2553 2562 0
-8029 2553 2564 0
8029 -2553 -2561 -2566 0
8029 -2552 -2562 -2566 0
8029 -2552 -2561 -2567 0
c ((1<=(aux600 + aux603 + aux604))=tv=SATLiteral(8030))
-8030 -2552 -2561 -2566 0
8030 2566 0
8030 2561 0
8030 2562 0
8030 2564 0
8030 2552 0
8030 2552 2561 0
8030 2552 2562 0
8030 2552 2564 0
8030 2553 0
8030 2553 2561 0
8030 2553 2562 0
8030 2553 2564 0
c (((aux606 + aux609 + aux610)<=1)=tv=SATLiteral(8031))
-8031 2591 0
-8031 2585 2590 0
-8031 2586 0
-8031 2588 0
-8031 2576 2590 0
-8031 2576 2585 0
-8031 2576 2586 0
-8031 2576 2588 0
-8031 2577 0
-8031 2577 2585 0
-8031 2577 2586 0
-8031 2577 2588 0
8031 -2577 -2585 -2590 0
8031 -2576 -2586 -2590 0
8031 -2576 -2585 -2591 0
c ((1<=(aux606 + aux609 + aux610))=tv=SATLiteral(8032))
-8032 -2576 -2585 -2590 0
8032 2590 0
8032 2585 0
8032 2586 0
8032 2588 0
8032 2576 0
8032 2576 2585 0
8032 2576 2586 0
8032 2576 2588 0
8032 2577 0
8032 2577 2585 0
8032 2577 2586 0
8032 2577 2588 0
c (((aux612 + aux615 + aux616)<=1)=tv=SATLiteral(8033))
-8033 2615 0
-8033 2609 2614 0
-8033 2610 0
-8033 2612 0
-8033 2600 2614 0
-8033 2600 2609 0
-8033 2600 2610 0
-8033 2600 2612 0
-8033 2601 0
-8033 2601 2609 0
-8033 2601 2610 0
-8033 2601 2612 0
8033 -2601 -2609 -2614 0
8033 -2600 -2610 -2614 0
8033 -2600 -2609 -2615 0
c ((1<=(aux612 + aux615 + aux616))=tv=SATLiteral(8034))
-8034 -2600 -2609 -2614 0
8034 2614 0
8034 2609 0
8034 2610 0
8034 2612 0
8034 2600 0
8034 2600 2609 0
8034 2600 2610 0
8034 2600 2612 0
8034 2601 0
8034 2601 2609 0
8034 2601 2610 0
8034 2601 2612 0
c (((aux618 + aux621 + aux622)<=1)=tv=SATLiteral(8035))
-8035 2639 0
-8035 2633 2638 0
-8035 2634 0
-8035 2636 0
-8035 2624 2638 0
-8035 2624 2633 0
-8035 2624 2634 0
-8035 2624 2636 0
-8035 2625 0
-8035 2625 2633 0
-8035 2625 2634 0
-8035 2625 2636 0
8035 -2625 -2633 -2638 0
8035 -2624 -2634 -2638 0
8035 -2624 -2633 -2639 0
c ((1<=(aux618 + aux621 + aux622))=tv=SATLiteral(8036))
-8036 -2624 -2633 -2638 0
8036 2638 0
8036 2633 0
8036 2634 0
8036 2636 0
8036 2624 0
8036 2624 2633 0
8036 2624 2634 0
8036 2624 2636 0
8036 2625 0
8036 2625 2633 0
8036 2625 2634 0
8036 2625 2636 0
c (((aux624 + aux627 + aux628)<=1)=tv=SATLiteral(8037))
-8037 2663 0
-8037 2657 2662 0
-8037 2658 0
-8037 2660 0
-8037 2648 2662 0
-8037 2648 2657 0
-8037 2648 2658 0
-8037 2648 2660 0
-8037 2649 0
-8037 2649 2657 0
-8037 2649 2658 0
-8037 2649 2660 0
8037 -2649 -2657 -2662 0
8037 -2648 -2658 -2662 0
8037 -2648 -2657 -2663 0
c ((1<=(aux624 + aux627 + aux628))=tv=SATLiteral(8038))
-8038 -2648 -2657 -2662 0
8038 2662 0
8038 2657 0
8038 2658 0
8038 2660 0
8038 2648 0
8038 2648 2657 0
8038 2648 2658 0
8038 2648 2660 0
8038 2649 0
8038 2649 2657 0
8038 2649 2658 0
8038 2649 2660 0
c (((aux630 + aux633 + aux634)<=1)=tv=SATLiteral(8039))
-8039 2687 0
-8039 2681 2686 0
-8039 2682 0
-8039 2684 0
-8039 2672 2686 0
-8039 2672 2681 0
-8039 2672 2682 0
-8039 2672 2684 0
-8039 2673 0
-8039 2673 2681 0
-8039 2673 2682 0
-8039 2673 2684 0
8039 -2673 -2681 -2686 0
8039 -2672 -2682 -2686 0
8039 -2672 -2681 -2687 0
c ((1<=(aux630 + aux633 + aux634))=tv=SATLiteral(8040))
-8040 -2672 -2681 -2686 0
8040 2686 0
8040 2681 0
8040 2682 0
8040 2684 0
8040 2672 0
8040 2672 2681 0
8040 2672 2682 0
8040 2672 2684 0
8040 2673 0
8040 2673 2681 0
8040 2673 2682 0
8040 2673 2684 0
c (((aux636 + aux639 + aux640)<=1)=tv=SATLiteral(8041))
-8041 2711 0
-8041 2705 2710 0
-8041 2706 0
-8041 2708 0
-8041 2696 2710 0
-8041 2696 2705 0
-8041 2696 2706 0
-8041 2696 2708 0
-8041 2697 0
-8041 2697 2705 0
-8041 2697 2706 0
-8041 2697 2708 0
8041 -2697 -2705 -2710 0
8041 -2696 -2706 -2710 0
8041 -2696 -2705 -2711 0
c ((1<=(aux636 + aux639 + aux640))=tv=SATLiteral(8042))
-8042 -2696 -2705 -2710 0
8042 2710 0
8042 2705 0
8042 2706 0
8042 2708 0
8042 2696 0
8042 2696 2705 0
8042 2696 2706 0
8042 2696 2708 0
8042 2697 0
8042 2697 2705 0
8042 2697 2706 0
8042 2697 2708 0
c (((aux642 + aux645 + aux646)<=1)=tv=SATLiteral(8043))
-8043 2735 0
-8043 2729 2734 0
-8043 2730 0
-8043 2732 0
-8043 2720 2734 0
-8043 2720 2729 0
-8043 2720 2730 0
-8043 2720 2732 0
-8043 2721 0
-8043 2721 2729 0
-8043 2721 2730 0
-8043 2721 2732 0
8043 -2721 -2729 -2734 0
8043 -2720 -2730 -2734 0
8043 -2720 -2729 -2735 0
c ((1<=(aux642 + aux645 + aux646))=tv=SATLiteral(8044))
-8044 -2720 -2729 -2734 0
8044 2734 0
8044 2729 0
8044 2730 0
8044 2732 0
8044 2720 0
8044 2720 2729 0
8044 2720 2730 0
8044 2720 2732 0
8044 2721 0
8044 2721 2729 0
8044 2721 2730 0
8044 2721 2732 0
c (((aux648 + aux651 + aux652)<=1)=tv=SATLiteral(8045))
-8045 2759 0
-8045 2753 2758 0
-8045 2754 0
-8045 2756 0
-8045 2744 2758 0
-8045 2744 2753 0
-8045 2744 2754 0
-8045 2744 2756 0
-8045 2745 0
-8045 2745 2753 0
-8045 2745 2754 0
-8045 2745 2756 0
8045 -2745 -2753 -2758 0
8045 -2744 -2754 -2758 0
8045 -2744 -2753 -2759 0
c ((1<=(aux648 + aux651 + aux652))=tv=SATLiteral(8046))
-8046 -2744 -2753 -2758 0
8046 2758 0
8046 2753 0
8046 2754 0
8046 2756 0
8046 2744 0
8046 2744 2753 0
8046 2744 2754 0
8046 2744 2756 0
8046 2745 0
8046 2745 2753 0
8046 2745 2754 0
8046 2745 2756 0
c (((aux654 + aux657 + aux658)<=1)=tv=SATLiteral(8047))
-8047 2783 0
-8047 2777 2782 0
-8047 2778 0
-8047 2780 0
-8047 2768 2782 0
-8047 2768 2777 0
-8047 2768 2778 0
-8047 2768 2780 0
-8047 2769 0
-8047 2769 2777 0
-8047 2769 2778 0
-8047 2769 2780 0
8047 -2769 -2777 -2782 0
8047 -2768 -2778 -2782 0
8047 -2768 -2777 -2783 0
c ((1<=(aux654 + aux657 + aux658))=tv=SATLiteral(8048))
-8048 -2768 -2777 -2782 0
8048 2782 0
8048 2777 0
8048 2778 0
8048 2780 0
8048 2768 0
8048 2768 2777 0
8048 2768 2778 0
8048 2768 2780 0
8048 2769 0
8048 2769 2777 0
8048 2769 2778 0
8048 2769 2780 0
c (((aux660 + aux663 + aux664)<=1)=tv=SATLiteral(8049))
-8049 2807 0
-8049 2801 2806 0
-8049 2802 0
-8049 2804 0
-8049 2792 2806 0
-8049 2792 2801 0
-8049 2792 2802 0
-8049 2792 2804 0
-8049 2793 0
-8049 2793 2801 0
-8049 2793 2802 0
-8049 2793 2804 0
8049 -2793 -2801 -2806 0
8049 -2792 -2802 -2806 0
8049 -2792 -2801 -2807 0
c ((1<=(aux660 + aux663 + aux664))=tv=SATLiteral(8050))
-8050 -2792 -2801 -2806 0
8050 2806 0
8050 2801 0
8050 2802 0
8050 2804 0
8050 2792 0
8050 2792 2801 0
8050 2792 2802 0
8050 2792 2804 0
8050 2793 0
8050 2793 2801 0
8050 2793 2802 0
8050 2793 2804 0
c (((aux666 + aux669 + aux670)<=1)=tv=SATLiteral(8051))
-8051 2831 0
-8051 2825 2830 0
-8051 2826 0
-8051 2828 0
-8051 2816 2830 0
-8051 2816 2825 0
-8051 2816 2826 0
-8051 2816 2828 0
-8051 2817 0
-8051 2817 2825 0
-8051 2817 2826 0
-8051 2817 2828 0
8051 -2817 -2825 -2830 0
8051 -2816 -2826 -2830 0
8051 -2816 -2825 -2831 0
c ((1<=(aux666 + aux669 + aux670))=tv=SATLiteral(8052))
-8052 -2816 -2825 -2830 0
8052 2830 0
8052 2825 0
8052 2826 0
8052 2828 0
8052 2816 0
8052 2816 2825 0
8052 2816 2826 0
8052 2816 2828 0
8052 2817 0
8052 2817 2825 0
8052 2817 2826 0
8052 2817 2828 0
c (((aux672 + aux675 + aux676)<=1)=tv=SATLiteral(8053))
-8053 2855 0
-8053 2849 2854 0
-8053 2850 0
-8053 2852 0
-8053 2840 2854 0
-8053 2840 2849 0
-8053 2840 2850 0
-8053 2840 2852 0
-8053 2841 0
-8053 2841 2849 0
-8053 2841 2850 0
-8053 2841 2852 0
8053 -2841 -2849 -2854 0
8053 -2840 -2850 -2854 0
8053 -2840 -2849 -2855 0
c ((1<=(aux672 + aux675 + aux676))=tv=SATLiteral(8054))
-8054 -2840 -2849 -2854 0
8054 2854 0
8054 2849 0
8054 2850 0
8054 2852 0
8054 2840 0
8054 2840 2849 0
8054 2840 2850 0
8054 2840 2852 0
8054 2841 0
8054 2841 2849 0
8054 2841 2850 0
8054 2841 2852 0
c (((aux678 + aux681 + aux682)<=1)=tv=SATLiteral(8055))
-8055 2879 0
-8055 2873 2878 0
-8055 2874 0
-8055 2876 0
-8055 2864 2878 0
-8055 2864 2873 0
-8055 2864 2874 0
-8055 2864 2876 0
-8055 2865 0
-8055 2865 2873 0
-8055 2865 2874 0
-8055 2865 2876 0
8055 -2865 -2873 -2878 0
8055 -2864 -2874 -2878 0
8055 -2864 -2873 -2879 0
c ((1<=(aux678 + aux681 + aux682))=tv=SATLiteral(8056))
-8056 -2864 -2873 -2878 0
8056 2878 0
8056 2873 0
8056 2874 0
8056 2876 0
8056 2864 0
8056 2864 2873 0
8056 2864 2874 0
8056 2864 2876 0
8056 2865 0
8056 2865 2873 0
8056 2865 2874 0
8056 2865 2876 0
c (((aux684 + aux687 + aux688)<=1)=tv=SATLiteral(8057))
-8057 2903 0
-8057 2897 2902 0
-8057 2898 0
-8057 2900 0
-8057 2888 2902 0
-8057 2888 2897 0
-8057 2888 2898 0
-8057 2888 2900 0
-8057 2889 0
-8057 2889 2897 0
-8057 2889 2898 0
-8057 2889 2900 0
8057 -2889 -2897 -2902 0
8057 -2888 -2898 -2902 0
8057 -2888 -2897 -2903 0
c ((1<=(aux684 + aux687 + aux688))=tv=SATLiteral(8058))
-8058 -2888 -2897 -2902 0
8058 2902 0
8058 2897 0
8058 2898 0
8058 2900 0
8058 2888 0
8058 2888 2897 0
8058 2888 2898 0
8058 2888 2900 0
8058 2889 0
8058 2889 2897 0
8058 2889 2898 0
8058 2889 2900 0
c (((aux690 + aux693 + aux694)<=1)=tv=SATLiteral(8059))
-8059 2927 0
-8059 2921 2926 0
-8059 2922 0
-8059 2924 0
-8059 2912 2926 0
-8059 2912 2921 0
-8059 2912 2922 0
-8059 2912 2924 0
-8059 2913 0
-8059 2913 2921 0
-8059 2913 2922 0
-8059 2913 2924 0
8059 -2913 -2921 -2926 0
8059 -2912 -2922 -2926 0
8059 -2912 -2921 -2927 0
c ((1<=(aux690 + aux693 + aux694))=tv=SATLiteral(8060))
-8060 -2912 -2921 -2926 0
8060 2926 0
8060 2921 0
8060 2922 0
8060 2924 0
8060 2912 0
8060 2912 2921 0
8060 2912 2922 0
8060 2912 2924 0
8060 2913 0
8060 2913 2921 0
8060 2913 2922 0
8060 2913 2924 0
c (((aux696 + aux699 + aux700)<=1)=tv=SATLiteral(8061))
-8061 2951 0
-8061 2945 2950 0
-8061 2946 0
-8061 2948 0
-8061 2936 2950 0
-8061 2936 2945 0
-8061 2936 2946 0
-8061 2936 2948 0
-8061 2937 0
-8061 2937 2945 0
-8061 2937 2946 0
-8061 2937 2948 0
8061 -2937 -2945 -2950 0
8061 -2936 -2946 -2950 0
8061 -2936 -2945 -2951 0
c ((1<=(aux696 + aux699 + aux700))=tv=SATLiteral(8062))
-8062 -2936 -2945 -2950 0
8062 2950 0
8062 2945 0
8062 2946 0
8062 2948 0
8062 2936 0
8062 2936 2945 0
8062 2936 2946 0
8062 2936 2948 0
8062 2937 0
8062 2937 2945 0
8062 2937 2946 0
8062 2937 2948 0
c (((aux702 + aux705 + aux706)<=1)=tv=SATLiteral(8063))
-8063 2975 0
-8063 2969 2974 0
-8063 2970 0
-8063 2972 0
-8063 2960 2974 0
-8063 2960 2969 0
-8063 2960 2970 0
-8063 2960 2972 0
-8063 2961 0
-8063 2961 2969 0
-8063 2961 2970 0
-8063 2961 2972 0
8063 -2961 -2969 -2974 0
8063 -2960 -2970 -2974 0
8063 -2960 -2969 -2975 0
c ((1<=(aux702 + aux705 + aux706))=tv=SATLiteral(8064))
-8064 -2960 -2969 -2974 0
8064 2974 0
8064 2969 0
8064 2970 0
8064 2972 0
8064 2960 0
8064 2960 2969 0
8064 2960 2970 0
8064 2960 2972 0
8064 2961 0
8064 2961 2969 0
8064 2961 2970 0
8064 2961 2972 0
c (((aux708 + aux711 + aux712)<=1)=tv=SATLiteral(8065))
-8065 2999 0
-8065 2993 2998 0
-8065 2994 0
-8065 2996 0
-8065 2984 2998 0
-8065 2984 2993 0
-8065 2984 2994 0
-8065 2984 2996 0
-8065 2985 0
-8065 2985 2993 0
-8065 2985 2994 0
-8065 2985 2996 0
8065 -2985 -2993 -2998 0
8065 -2984 -2994 -2998 0
8065 -2984 -2993 -2999 0
c ((1<=(aux708 + aux711 + aux712))=tv=SATLiteral(8066))
-8066 -2984 -2993 -2998 0
8066 2998 0
8066 2993 0
8066 2994 0
8066 2996 0
8066 2984 0
8066 2984 2993 0
8066 2984 2994 0
8066 2984 2996 0
8066 2985 0
8066 2985 2993 0
8066 2985 2994 0
8066 2985 2996 0
c (((aux714 + aux717 + aux718)<=1)=tv=SATLiteral(8067))
-8067 3023 0
-8067 3017 3022 0
-8067 3018 0
-8067 3020 0
-8067 3008 3022 0
-8067 3008 3017 0
-8067 3008 3018 0
-8067 3008 3020 0
-8067 3009 0
-8067 3009 3017 0
-8067 3009 3018 0
-8067 3009 3020 0
8067 -3009 -3017 -3022 0
8067 -3008 -3018 -3022 0
8067 -3008 -3017 -3023 0
c ((1<=(aux714 + aux717 + aux718))=tv=SATLiteral(8068))
-8068 -3008 -3017 -3022 0
8068 3022 0
8068 3017 0
8068 3018 0
8068 3020 0
8068 3008 0
8068 3008 3017 0
8068 3008 3018 0
8068 3008 3020 0
8068 3009 0
8068 3009 3017 0
8068 3009 3018 0
8068 3009 3020 0
c (((aux720 + aux723 + aux724)<=1)=tv=SATLiteral(8069))
-8069 3047 0
-8069 3041 3046 0
-8069 3042 0
-8069 3044 0
-8069 3032 3046 0
-8069 3032 3041 0
-8069 3032 3042 0
-8069 3032 3044 0
-8069 3033 0
-8069 3033 3041 0
-8069 3033 3042 0
-8069 3033 3044 0
8069 -3033 -3041 -3046 0
8069 -3032 -3042 -3046 0
8069 -3032 -3041 -3047 0
c ((1<=(aux720 + aux723 + aux724))=tv=SATLiteral(8070))
-8070 -3032 -3041 -3046 0
8070 3046 0
8070 3041 0
8070 3042 0
8070 3044 0
8070 3032 0
8070 3032 3041 0
8070 3032 3042 0
8070 3032 3044 0
8070 3033 0
8070 3033 3041 0
8070 3033 3042 0
8070 3033 3044 0
c (((aux726 + aux729 + aux730)<=1)=tv=SATLiteral(8071))
-8071 3071 0
-8071 3065 3070 0
-8071 3066 0
-8071 3068 0
-8071 3056 3070 0
-8071 3056 3065 0
-8071 3056 3066 0
-8071 3056 3068 0
-8071 3057 0
-8071 3057 3065 0
-8071 3057 3066 0
-8071 3057 3068 0
8071 -3057 -3065 -3070 0
8071 -3056 -3066 -3070 0
8071 -3056 -3065 -3071 0
c ((1<=(aux726 + aux729 + aux730))=tv=SATLiteral(8072))
-8072 -3056 -3065 -3070 0
8072 3070 0
8072 3065 0
8072 3066 0
8072 3068 0
8072 3056 0
8072 3056 3065 0
8072 3056 3066 0
8072 3056 3068 0
8072 3057 0
8072 3057 3065 0
8072 3057 3066 0
8072 3057 3068 0
c (((aux732 + aux735 + aux736)<=1)=tv=SATLiteral(8073))
-8073 3095 0
-8073 3089 3094 0
-8073 3090 0
-8073 3092 0
-8073 3080 3094 0
-8073 3080 3089 0
-8073 3080 3090 0
-8073 3080 3092 0
-8073 3081 0
-8073 3081 3089 0
-8073 3081 3090 0
-8073 3081 3092 0
8073 -3081 -3089 -3094 0
8073 -3080 -3090 -3094 0
8073 -3080 -3089 -3095 0
c ((1<=(aux732 + aux735 + aux736))=tv=SATLiteral(8074))
-8074 -3080 -3089 -3094 0
8074 3094 0
8074 3089 0
8074 3090 0
8074 3092 0
8074 3080 0
8074 3080 3089 0
8074 3080 3090 0
8074 3080 3092 0
8074 3081 0
8074 3081 3089 0
8074 3081 3090 0
8074 3081 3092 0
c (((aux738 + aux741 + aux742)<=1)=tv=SATLiteral(8075))
-8075 3119 0
-8075 3113 3118 0
-8075 3114 0
-8075 3116 0
-8075 3104 3118 0
-8075 3104 3113 0
-8075 3104 3114 0
-8075 3104 3116 0
-8075 3105 0
-8075 3105 3113 0
-8075 3105 3114 0
-8075 3105 3116 0
8075 -3105 -3113 -3118 0
8075 -3104 -3114 -3118 0
8075 -3104 -3113 -3119 0
c ((1<=(aux738 + aux741 + aux742))=tv=SATLiteral(8076))
-8076 -3104 -3113 -3118 0
8076 3118 0
8076 3113 0
8076 3114 0
8076 3116 0
8076 3104 0
8076 3104 3113 0
8076 3104 3114 0
8076 3104 3116 0
8076 3105 0
8076 3105 3113 0
8076 3105 3114 0
8076 3105 3116 0
c (((aux744 + aux747 + aux748)<=1)=tv=SATLiteral(8077))
-8077 3143 0
-8077 3137 3142 0
-8077 3138 0
-8077 3140 0
-8077 3128 3142 0
-8077 3128 3137 0
-8077 3128 3138 0
-8077 3128 3140 0
-8077 3129 0
-8077 3129 3137 0
-8077 3129 3138 0
-8077 3129 3140 0
8077 -3129 -3137 -3142 0
8077 -3128 -3138 -3142 0
8077 -3128 -3137 -3143 0
c ((1<=(aux744 + aux747 + aux748))=tv=SATLiteral(8078))
-8078 -3128 -3137 -3142 0
8078 3142 0
8078 3137 0
8078 3138 0
8078 3140 0
8078 3128 0
8078 3128 3137 0
8078 3128 3138 0
8078 3128 3140 0
8078 3129 0
8078 3129 3137 0
8078 3129 3138 0
8078 3129 3140 0
c (((aux750 + aux753 + aux754)<=1)=tv=SATLiteral(8079))
-8079 3167 0
-8079 3161 3166 0
-8079 3162 0
-8079 3164 0
-8079 3152 3166 0
-8079 3152 3161 0
-8079 3152 3162 0
-8079 3152 3164 0
-8079 3153 0
-8079 3153 3161 0
-8079 3153 3162 0
-8079 3153 3164 0
8079 -3153 -3161 -3166 0
8079 -3152 -3162 -3166 0
8079 -3152 -3161 -3167 0
c ((1<=(aux750 + aux753 + aux754))=tv=SATLiteral(8080))
-8080 -3152 -3161 -3166 0
8080 3166 0
8080 3161 0
8080 3162 0
8080 3164 0
8080 3152 0
8080 3152 3161 0
8080 3152 3162 0
8080 3152 3164 0
8080 3153 0
8080 3153 3161 0
8080 3153 3162 0
8080 3153 3164 0
c (((aux756 + aux759 + aux760)<=1)=tv=SATLiteral(8081))
-8081 3191 0
-8081 3185 3190 0
-8081 3186 0
-8081 3188 0
-8081 3176 3190 0
-8081 3176 3185 0
-8081 3176 3186 0
-8081 3176 3188 0
-8081 3177 0
-8081 3177 3185 0
-8081 3177 3186 0
-8081 3177 3188 0
8081 -3177 -3185 -3190 0
8081 -3176 -3186 -3190 0
8081 -3176 -3185 -3191 0
c ((1<=(aux756 + aux759 + aux760))=tv=SATLiteral(8082))
-8082 -3176 -3185 -3190 0
8082 3190 0
8082 3185 0
8082 3186 0
8082 3188 0
8082 3176 0
8082 3176 3185 0
8082 3176 3186 0
8082 3176 3188 0
8082 3177 0
8082 3177 3185 0
8082 3177 3186 0
8082 3177 3188 0
c (((aux762 + aux765 + aux766)<=1)=tv=SATLiteral(8083))
-8083 3215 0
-8083 3209 3214 0
-8083 3210 0
-8083 3212 0
-8083 3200 3214 0
-8083 3200 3209 0
-8083 3200 3210 0
-8083 3200 3212 0
-8083 3201 0
-8083 3201 3209 0
-8083 3201 3210 0
-8083 3201 3212 0
8083 -3201 -3209 -3214 0
8083 -3200 -3210 -3214 0
8083 -3200 -3209 -3215 0
c ((1<=(aux762 + aux765 + aux766))=tv=SATLiteral(8084))
-8084 -3200 -3209 -3214 0
8084 3214 0
8084 3209 0
8084 3210 0
8084 3212 0
8084 3200 0
8084 3200 3209 0
8084 3200 3210 0
8084 3200 3212 0
8084 3201 0
8084 3201 3209 0
8084 3201 3210 0
8084 3201 3212 0
c (((aux768 + aux771 + aux772)<=1)=tv=SATLiteral(8085))
-8085 3239 0
-8085 3233 3238 0
-8085 3234 0
-8085 3236 0
-8085 3224 3238 0
-8085 3224 3233 0
-8085 3224 3234 0
-8085 3224 3236 0
-8085 3225 0
-8085 3225 3233 0
-8085 3225 3234 0
-8085 3225 3236 0
8085 -3225 -3233 -3238 0
8085 -3224 -3234 -3238 0
8085 -3224 -3233 -3239 0
c ((1<=(aux768 + aux771 + aux772))=tv=SATLiteral(8086))
-8086 -3224 -3233 -3238 0
8086 3238 0
8086 3233 0
8086 3234 0
8086 3236 0
8086 3224 0
8086 3224 3233 0
8086 3224 3234 0
8086 3224 3236 0
8086 3225 0
8086 3225 3233 0
8086 3225 3234 0
8086 3225 3236 0
c (((aux774 + aux777 + aux778)<=1)=tv=SATLiteral(8087))
-8087 3263 0
-8087 3257 3262 0
-8087 3258 0
-8087 3260 0
-8087 3248 3262 0
-8087 3248 3257 0
-8087 3248 3258 0
-8087 3248 3260 0
-8087 3249 0
-8087 3249 3257 0
-8087 3249 3258 0
-8087 3249 3260 0
8087 -3249 -3257 -3262 0
8087 -3248 -3258 -3262 0
8087 -3248 -3257 -3263 0
c ((1<=(aux774 + aux777 + aux778))=tv=SATLiteral(8088))
-8088 -3248 -3257 -3262 0
8088 3262 0
8088 3257 0
8088 3258 0
8088 3260 0
8088 3248 0
8088 3248 3257 0
8088 3248 3258 0
8088 3248 3260 0
8088 3249 0
8088 3249 3257 0
8088 3249 3258 0
8088 3249 3260 0
c (((aux780 + aux783 + aux784)<=1)=tv=SATLiteral(8089))
-8089 3287 0
-8089 3281 3286 0
-8089 3282 0
-8089 3284 0
-8089 3272 3286 0
-8089 3272 3281 0
-8089 3272 3282 0
-8089 3272 3284 0
-8089 3273 0
-8089 3273 3281 0
-8089 3273 3282 0
-8089 3273 3284 0
8089 -3273 -3281 -3286 0
8089 -3272 -3282 -3286 0
8089 -3272 -3281 -3287 0
c ((1<=(aux780 + aux783 + aux784))=tv=SATLiteral(8090))
-8090 -3272 -3281 -3286 0
8090 3286 0
8090 3281 0
8090 3282 0
8090 3284 0
8090 3272 0
8090 3272 3281 0
8090 3272 3282 0
8090 3272 3284 0
8090 3273 0
8090 3273 3281 0
8090 3273 3282 0
8090 3273 3284 0
c (((aux786 + aux789 + aux790)<=1)=tv=SATLiteral(8091))
-8091 3311 0
-8091 3305 3310 0
-8091 3306 0
-8091 3308 0
-8091 3296 3310 0
-8091 3296 3305 0
-8091 3296 3306 0
-8091 3296 3308 0
-8091 3297 0
-8091 3297 3305 0
-8091 3297 3306 0
-8091 3297 3308 0
8091 -3297 -3305 -3310 0
8091 -3296 -3306 -3310 0
8091 -3296 -3305 -3311 0
c ((1<=(aux786 + aux789 + aux790))=tv=SATLiteral(8092))
-8092 -3296 -3305 -3310 0
8092 3310 0
8092 3305 0
8092 3306 0
8092 3308 0
8092 3296 0
8092 3296 3305 0
8092 3296 3306 0
8092 3296 3308 0
8092 3297 0
8092 3297 3305 0
8092 3297 3306 0
8092 3297 3308 0
c (((aux792 + aux795 + aux796)<=1)=tv=SATLiteral(8093))
-8093 3335 0
-8093 3329 3334 0
-8093 3330 0
-8093 3332 0
-8093 3320 3334 0
-8093 3320 3329 0
-8093 3320 3330 0
-8093 3320 3332 0
-8093 3321 0
-8093 3321 3329 0
-8093 3321 3330 0
-8093 3321 3332 0
8093 -3321 -3329 -3334 0
8093 -3320 -3330 -3334 0
8093 -3320 -3329 -3335 0
c ((1<=(aux792 + aux795 + aux796))=tv=SATLiteral(8094))
-8094 -3320 -3329 -3334 0
8094 3334 0
8094 3329 0
8094 3330 0
8094 3332 0
8094 3320 0
8094 3320 3329 0
8094 3320 3330 0
8094 3320 3332 0
8094 3321 0
8094 3321 3329 0
8094 3321 3330 0
8094 3321 3332 0
c (((aux798 + aux801 + aux802)<=1)=tv=SATLiteral(8095))
-8095 3359 0
-8095 3353 3358 0
-8095 3354 0
-8095 3356 0
-8095 3344 3358 0
-8095 3344 3353 0
-8095 3344 3354 0
-8095 3344 3356 0
-8095 3345 0
-8095 3345 3353 0
-8095 3345 3354 0
-8095 3345 3356 0
8095 -3345 -3353 -3358 0
8095 -3344 -3354 -3358 0
8095 -3344 -3353 -3359 0
c ((1<=(aux798 + aux801 + aux802))=tv=SATLiteral(8096))
-8096 -3344 -3353 -3358 0
8096 3358 0
8096 3353 0
8096 3354 0
8096 3356 0
8096 3344 0
8096 3344 3353 0
8096 3344 3354 0
8096 3344 3356 0
8096 3345 0
8096 3345 3353 0
8096 3345 3354 0
8096 3345 3356 0
c (((aux804 + aux807 + aux808)<=1)=tv=SATLiteral(8097))
-8097 3383 0
-8097 3377 3382 0
-8097 3378 0
-8097 3380 0
-8097 3368 3382 0
-8097 3368 3377 0
-8097 3368 3378 0
-8097 3368 3380 0
-8097 3369 0
-8097 3369 3377 0
-8097 3369 3378 0
-8097 3369 3380 0
8097 -3369 -3377 -3382 0
8097 -3368 -3378 -3382 0
8097 -3368 -3377 -3383 0
c ((1<=(aux804 + aux807 + aux808))=tv=SATLiteral(8098))
-8098 -3368 -3377 -3382 0
8098 3382 0
8098 3377 0
8098 3378 0
8098 3380 0
8098 3368 0
8098 3368 3377 0
8098 3368 3378 0
8098 3368 3380 0
8098 3369 0
8098 3369 3377 0
8098 3369 3378 0
8098 3369 3380 0
c (((aux810 + aux813 + aux814)<=1)=tv=SATLiteral(8099))
-8099 3407 0
-8099 3401 3406 0
-8099 3402 0
-8099 3404 0
-8099 3392 3406 0
-8099 3392 3401 0
-8099 3392 3402 0
-8099 3392 3404 0
-8099 3393 0
-8099 3393 3401 0
-8099 3393 3402 0
-8099 3393 3404 0
8099 -3393 -3401 -3406 0
8099 -3392 -3402 -3406 0
8099 -3392 -3401 -3407 0
c ((1<=(aux810 + aux813 + aux814))=tv=SATLiteral(8100))
-8100 -3392 -3401 -3406 0
8100 3406 0
8100 3401 0
8100 3402 0
8100 3404 0
8100 3392 0
8100 3392 3401 0
8100 3392 3402 0
8100 3392 3404 0
8100 3393 0
8100 3393 3401 0
8100 3393 3402 0
8100 3393 3404 0
c (((aux816 + aux819 + aux820)<=1)=tv=SATLiteral(8101))
-8101 3431 0
-8101 3425 3430 0
-8101 3426 0
-8101 3428 0
-8101 3416 3430 0
-8101 3416 3425 0
-8101 3416 3426 0
-8101 3416 3428 0
-8101 3417 0
-8101 3417 3425 0
-8101 3417 3426 0
-8101 3417 3428 0
8101 -3417 -3425 -3430 0
8101 -3416 -3426 -3430 0
8101 -3416 -3425 -3431 0
c ((1<=(aux816 + aux819 + aux820))=tv=SATLiteral(8102))
-8102 -3416 -3425 -3430 0
8102 3430 0
8102 3425 0
8102 3426 0
8102 3428 0
8102 3416 0
8102 3416 3425 0
8102 3416 3426 0
8102 3416 3428 0
8102 3417 0
8102 3417 3425 0
8102 3417 3426 0
8102 3417 3428 0
c (((aux822 + aux825 + aux826)<=1)=tv=SATLiteral(8103))
-8103 3455 0
-8103 3449 3454 0
-8103 3450 0
-8103 3452 0
-8103 3440 3454 0
-8103 3440 3449 0
-8103 3440 3450 0
-8103 3440 3452 0
-8103 3441 0
-8103 3441 3449 0
-8103 3441 3450 0
-8103 3441 3452 0
8103 -3441 -3449 -3454 0
8103 -3440 -3450 -3454 0
8103 -3440 -3449 -3455 0
c ((1<=(aux822 + aux825 + aux826))=tv=SATLiteral(8104))
-8104 -3440 -3449 -3454 0
8104 3454 0
8104 3449 0
8104 3450 0
8104 3452 0
8104 3440 0
8104 3440 3449 0
8104 3440 3450 0
8104 3440 3452 0
8104 3441 0
8104 3441 3449 0
8104 3441 3450 0
8104 3441 3452 0
c (((aux828 + aux831 + aux832)<=1)=tv=SATLiteral(8105))
-8105 3479 0
-8105 3473 3478 0
-8105 3474 0
-8105 3476 0
-8105 3464 3478 0
-8105 3464 3473 0
-8105 3464 3474 0
-8105 3464 3476 0
-8105 3465 0
-8105 3465 3473 0
-8105 3465 3474 0
-8105 3465 3476 0
8105 -3465 -3473 -3478 0
8105 -3464 -3474 -3478 0
8105 -3464 -3473 -3479 0
c ((1<=(aux828 + aux831 + aux832))=tv=SATLiteral(8106))
-8106 -3464 -3473 -3478 0
8106 3478 0
8106 3473 0
8106 3474 0
8106 3476 0
8106 3464 0
8106 3464 3473 0
8106 3464 3474 0
8106 3464 3476 0
8106 3465 0
8106 3465 3473 0
8106 3465 3474 0
8106 3465 3476 0
c (((aux834 + aux837 + aux838)<=1)=tv=SATLiteral(8107))
-8107 3503 0
-8107 3497 3502 0
-8107 3498 0
-8107 3500 0
-8107 3488 3502 0
-8107 3488 3497 0
-8107 3488 3498 0
-8107 3488 3500 0
-8107 3489 0
-8107 3489 3497 0
-8107 3489 3498 0
-8107 3489 3500 0
8107 -3489 -3497 -3502 0
8107 -3488 -3498 -3502 0
8107 -3488 -3497 -3503 0
c ((1<=(aux834 + aux837 + aux838))=tv=SATLiteral(8108))
-8108 -3488 -3497 -3502 0
8108 3502 0
8108 3497 0
8108 3498 0
8108 3500 0
8108 3488 0
8108 3488 3497 0
8108 3488 3498 0
8108 3488 3500 0
8108 3489 0
8108 3489 3497 0
8108 3489 3498 0
8108 3489 3500 0
c (((aux840 + aux843 + aux844)<=1)=tv=SATLiteral(8109))
-8109 3527 0
-8109 3521 3526 0
-8109 3522 0
-8109 3524 0
-8109 3512 3526 0
-8109 3512 3521 0
-8109 3512 3522 0
-8109 3512 3524 0
-8109 3513 0
-8109 3513 3521 0
-8109 3513 3522 0
-8109 3513 3524 0
8109 -3513 -3521 -3526 0
8109 -3512 -3522 -3526 0
8109 -3512 -3521 -3527 0
c ((1<=(aux840 + aux843 + aux844))=tv=SATLiteral(8110))
-8110 -3512 -3521 -3526 0
8110 3526 0
8110 3521 0
8110 3522 0
8110 3524 0
8110 3512 0
8110 3512 3521 0
8110 3512 3522 0
8110 3512 3524 0
8110 3513 0
8110 3513 3521 0
8110 3513 3522 0
8110 3513 3524 0
c (((aux846 + aux849 + aux850)<=1)=tv=SATLiteral(8111))
-8111 3551 0
-8111 3545 3550 0
-8111 3546 0
-8111 3548 0
-8111 3536 3550 0
-8111 3536 3545 0
-8111 3536 3546 0
-8111 3536 3548 0
-8111 3537 0
-8111 3537 3545 0
-8111 3537 3546 0
-8111 3537 3548 0
8111 -3537 -3545 -3550 0
8111 -3536 -3546 -3550 0
8111 -3536 -3545 -3551 0
c ((1<=(aux846 + aux849 + aux850))=tv=SATLiteral(8112))
-8112 -3536 -3545 -3550 0
8112 3550 0
8112 3545 0
8112 3546 0
8112 3548 0
8112 3536 0
8112 3536 3545 0
8112 3536 3546 0
8112 3536 3548 0
8112 3537 0
8112 3537 3545 0
8112 3537 3546 0
8112 3537 3548 0
c (((aux852 + aux855 + aux856)<=1)=tv=SATLiteral(8113))
-8113 3575 0
-8113 3569 3574 0
-8113 3570 0
-8113 3572 0
-8113 3560 3574 0
-8113 3560 3569 0
-8113 3560 3570 0
-8113 3560 3572 0
-8113 3561 0
-8113 3561 3569 0
-8113 3561 3570 0
-8113 3561 3572 0
8113 -3561 -3569 -3574 0
8113 -3560 -3570 -3574 0
8113 -3560 -3569 -3575 0
c ((1<=(aux852 + aux855 + aux856))=tv=SATLiteral(8114))
-8114 -3560 -3569 -3574 0
8114 3574 0
8114 3569 0
8114 3570 0
8114 3572 0
8114 3560 0
8114 3560 3569 0
8114 3560 3570 0
8114 3560 3572 0
8114 3561 0
8114 3561 3569 0
8114 3561 3570 0
8114 3561 3572 0
c (((aux858 + aux861 + aux862)<=1)=tv=SATLiteral(8115))
-8115 3599 0
-8115 3593 3598 0
-8115 3594 0
-8115 3596 0
-8115 3584 3598 0
-8115 3584 3593 0
-8115 3584 3594 0
-8115 3584 3596 0
-8115 3585 0
-8115 3585 3593 0
-8115 3585 3594 0
-8115 3585 3596 0
8115 -3585 -3593 -3598 0
8115 -3584 -3594 -3598 0
8115 -3584 -3593 -3599 0
c ((1<=(aux858 + aux861 + aux862))=tv=SATLiteral(8116))
-8116 -3584 -3593 -3598 0
8116 3598 0
8116 3593 0
8116 3594 0
8116 3596 0
8116 3584 0
8116 3584 3593 0
8116 3584 3594 0
8116 3584 3596 0
8116 3585 0
8116 3585 3593 0
8116 3585 3594 0
8116 3585 3596 0
c (((aux864 + aux867 + aux868)<=1)=tv=SATLiteral(8117))
-8117 3623 0
-8117 3617 3622 0
-8117 3618 0
-8117 3620 0
-8117 3608 3622 0
-8117 3608 3617 0
-8117 3608 3618 0
-8117 3608 3620 0
-8117 3609 0
-8117 3609 3617 0
-8117 3609 3618 0
-8117 3609 3620 0
8117 -3609 -3617 -3622 0
8117 -3608 -3618 -3622 0
8117 -3608 -3617 -3623 0
c ((1<=(aux864 + aux867 + aux868))=tv=SATLiteral(8118))
-8118 -3608 -3617 -3622 0
8118 3622 0
8118 3617 0
8118 3618 0
8118 3620 0
8118 3608 0
8118 3608 3617 0
8118 3608 3618 0
8118 3608 3620 0
8118 3609 0
8118 3609 3617 0
8118 3609 3618 0
8118 3609 3620 0
c (((aux870 + aux873 + aux874)<=1)=tv=SATLiteral(8119))
-8119 3647 0
-8119 3641 3646 0
-8119 3642 0
-8119 3644 0
-8119 3632 3646 0
-8119 3632 3641 0
-8119 3632 3642 0
-8119 3632 3644 0
-8119 3633 0
-8119 3633 3641 0
-8119 3633 3642 0
-8119 3633 3644 0
8119 -3633 -3641 -3646 0
8119 -3632 -3642 -3646 0
8119 -3632 -3641 -3647 0
c ((1<=(aux870 + aux873 + aux874))=tv=SATLiteral(8120))
-8120 -3632 -3641 -3646 0
8120 3646 0
8120 3641 0
8120 3642 0
8120 3644 0
8120 3632 0
8120 3632 3641 0
8120 3632 3642 0
8120 3632 3644 0
8120 3633 0
8120 3633 3641 0
8120 3633 3642 0
8120 3633 3644 0
c (((aux876 + aux879 + aux880)<=1)=tv=SATLiteral(8121))
-8121 3671 0
-8121 3665 3670 0
-8121 3666 0
-8121 3668 0
-8121 3656 3670 0
-8121 3656 3665 0
-8121 3656 3666 0
-8121 3656 3668 0
-8121 3657 0
-8121 3657 3665 0
-8121 3657 3666 0
-8121 3657 3668 0
8121 -3657 -3665 -3670 0
8121 -3656 -3666 -3670 0
8121 -3656 -3665 -3671 0
c ((1<=(aux876 + aux879 + aux880))=tv=SATLiteral(8122))
-8122 -3656 -3665 -3670 0
8122 3670 0
8122 3665 0
8122 3666 0
8122 3668 0
8122 3656 0
8122 3656 3665 0
8122 3656 3666 0
8122 3656 3668 0
8122 3657 0
8122 3657 3665 0
8122 3657 3666 0
8122 3657 3668 0
c (((aux882 + aux885 + aux886)<=1)=tv=SATLiteral(8123))
-8123 3695 0
-8123 3689 3694 0
-8123 3690 0
-8123 3692 0
-8123 3680 3694 0
-8123 3680 3689 0
-8123 3680 3690 0
-8123 3680 3692 0
-8123 3681 0
-8123 3681 3689 0
-8123 3681 3690 0
-8123 3681 3692 0
8123 -3681 -3689 -3694 0
8123 -3680 -3690 -3694 0
8123 -3680 -3689 -3695 0
c ((1<=(aux882 + aux885 + aux886))=tv=SATLiteral(8124))
-8124 -3680 -3689 -3694 0
8124 3694 0
8124 3689 0
8124 3690 0
8124 3692 0
8124 3680 0
8124 3680 3689 0
8124 3680 3690 0
8124 3680 3692 0
8124 3681 0
8124 3681 3689 0
8124 3681 3690 0
8124 3681 3692 0
c (((aux888 + aux891 + aux892)<=1)=tv=SATLiteral(8125))
-8125 3719 0
-8125 3713 3718 0
-8125 3714 0
-8125 3716 0
-8125 3704 3718 0
-8125 3704 3713 0
-8125 3704 3714 0
-8125 3704 3716 0
-8125 3705 0
-8125 3705 3713 0
-8125 3705 3714 0
-8125 3705 3716 0
8125 -3705 -3713 -3718 0
8125 -3704 -3714 -3718 0
8125 -3704 -3713 -3719 0
c ((1<=(aux888 + aux891 + aux892))=tv=SATLiteral(8126))
-8126 -3704 -3713 -3718 0
8126 3718 0
8126 3713 0
8126 3714 0
8126 3716 0
8126 3704 0
8126 3704 3713 0
8126 3704 3714 0
8126 3704 3716 0
8126 3705 0
8126 3705 3713 0
8126 3705 3714 0
8126 3705 3716 0
c (((aux894 + aux897 + aux898)<=1)=tv=SATLiteral(8127))
-8127 3743 0
-8127 3737 3742 0
-8127 3738 0
-8127 3740 0
-8127 3728 3742 0
-8127 3728 3737 0
-8127 3728 3738 0
-8127 3728 3740 0
-8127 3729 0
-8127 3729 3737 0
-8127 3729 3738 0
-8127 3729 3740 0
8127 -3729 -3737 -3742 0
8127 -3728 -3738 -3742 0
8127 -3728 -3737 -3743 0
c ((1<=(aux894 + aux897 + aux898))=tv=SATLiteral(8128))
-8128 -3728 -3737 -3742 0
8128 3742 0
8128 3737 0
8128 3738 0
8128 3740 0
8128 3728 0
8128 3728 3737 0
8128 3728 3738 0
8128 3728 3740 0
8128 3729 0
8128 3729 3737 0
8128 3729 3738 0
8128 3729 3740 0
c (((aux900 + aux903 + aux904)<=1)=tv=SATLiteral(8129))
-8129 3767 0
-8129 3761 3766 0
-8129 3762 0
-8129 3764 0
-8129 3752 3766 0
-8129 3752 3761 0
-8129 3752 3762 0
-8129 3752 3764 0
-8129 3753 0
-8129 3753 3761 0
-8129 3753 3762 0
-8129 3753 3764 0
8129 -3753 -3761 -3766 0
8129 -3752 -3762 -3766 0
8129 -3752 -3761 -3767 0
c ((1<=(aux900 + aux903 + aux904))=tv=SATLiteral(8130))
-8130 -3752 -3761 -3766 0
8130 3766 0
8130 3761 0
8130 3762 0
8130 3764 0
8130 3752 0
8130 3752 3761 0
8130 3752 3762 0
8130 3752 3764 0
8130 3753 0
8130 3753 3761 0
8130 3753 3762 0
8130 3753 3764 0
c (((aux906 + aux909 + aux910)<=1)=tv=SATLiteral(8131))
-8131 3791 0
-8131 3785 3790 0
-8131 3786 0
-8131 3788 0
-8131 3776 3790 0
-8131 3776 3785 0
-8131 3776 3786 0
-8131 3776 3788 0
-8131 3777 0
-8131 3777 3785 0
-8131 3777 3786 0
-8131 3777 3788 0
8131 -3777 -3785 -3790 0
8131 -3776 -3786 -3790 0
8131 -3776 -3785 -3791 0
c ((1<=(aux906 + aux909 + aux910))=tv=SATLiteral(8132))
-8132 -3776 -3785 -3790 0
8132 3790 0
8132 3785 0
8132 3786 0
8132 3788 0
8132 3776 0
8132 3776 3785 0
8132 3776 3786 0
8132 3776 3788 0
8132 3777 0
8132 3777 3785 0
8132 3777 3786 0
8132 3777 3788 0
c (((aux912 + aux915 + aux916)<=1)=tv=SATLiteral(8133))
-8133 3815 0
-8133 3809 3814 0
-8133 3810 0
-8133 3812 0
-8133 3800 3814 0
-8133 3800 3809 0
-8133 3800 3810 0
-8133 3800 3812 0
-8133 3801 0
-8133 3801 3809 0
-8133 3801 3810 0
-8133 3801 3812 0
8133 -3801 -3809 -3814 0
8133 -3800 -3810 -3814 0
8133 -3800 -3809 -3815 0
c ((1<=(aux912 + aux915 + aux916))=tv=SATLiteral(8134))
-8134 -3800 -3809 -3814 0
8134 3814 0
8134 3809 0
8134 3810 0
8134 3812 0
8134 3800 0
8134 3800 3809 0
8134 3800 3810 0
8134 3800 3812 0
8134 3801 0
8134 3801 3809 0
8134 3801 3810 0
8134 3801 3812 0
c (((aux918 + aux921 + aux922)<=1)=tv=SATLiteral(8135))
-8135 3839 0
-8135 3833 3838 0
-8135 3834 0
-8135 3836 0
-8135 3824 3838 0
-8135 3824 3833 0
-8135 3824 3834 0
-8135 3824 3836 0
-8135 3825 0
-8135 3825 3833 0
-8135 3825 3834 0
-8135 3825 3836 0
8135 -3825 -3833 -3838 0
8135 -3824 -3834 -3838 0
8135 -3824 -3833 -3839 0
c ((1<=(aux918 + aux921 + aux922))=tv=SATLiteral(8136))
-8136 -3824 -3833 -3838 0
8136 3838 0
8136 3833 0
8136 3834 0
8136 3836 0
8136 3824 0
8136 3824 3833 0
8136 3824 3834 0
8136 3824 3836 0
8136 3825 0
8136 3825 3833 0
8136 3825 3834 0
8136 3825 3836 0
c (((aux924 + aux927 + aux928)<=1)=tv=SATLiteral(8137))
-8137 3863 0
-8137 3857 3862 0
-8137 3858 0
-8137 3860 0
-8137 3848 3862 0
-8137 3848 3857 0
-8137 3848 3858 0
-8137 3848 3860 0
-8137 3849 0
-8137 3849 3857 0
-8137 3849 3858 0
-8137 3849 3860 0
8137 -3849 -3857 -3862 0
8137 -3848 -3858 -3862 0
8137 -3848 -3857 -3863 0
c ((1<=(aux924 + aux927 + aux928))=tv=SATLiteral(8138))
-8138 -3848 -3857 -3862 0
8138 3862 0
8138 3857 0
8138 3858 0
8138 3860 0
8138 3848 0
8138 3848 3857 0
8138 3848 3858 0
8138 3848 3860 0
8138 3849 0
8138 3849 3857 0
8138 3849 3858 0
8138 3849 3860 0
c (((aux930 + aux933 + aux934)<=1)=tv=SATLiteral(8139))
-8139 3887 0
-8139 3881 3886 0
-8139 3882 0
-8139 3884 0
-8139 3872 3886 0
-8139 3872 3881 0
-8139 3872 3882 0
-8139 3872 3884 0
-8139 3873 0
-8139 3873 3881 0
-8139 3873 3882 0
-8139 3873 3884 0
8139 -3873 -3881 -3886 0
8139 -3872 -3882 -3886 0
8139 -3872 -3881 -3887 0
c ((1<=(aux930 + aux933 + aux934))=tv=SATLiteral(8140))
-8140 -3872 -3881 -3886 0
8140 3886 0
8140 3881 0
8140 3882 0
8140 3884 0
8140 3872 0
8140 3872 3881 0
8140 3872 3882 0
8140 3872 3884 0
8140 3873 0
8140 3873 3881 0
8140 3873 3882 0
8140 3873 3884 0
c (((aux936 + aux939 + aux940)<=1)=tv=SATLiteral(8141))
-8141 3911 0
-8141 3905 3910 0
-8141 3906 0
-8141 3908 0
-8141 3896 3910 0
-8141 3896 3905 0
-8141 3896 3906 0
-8141 3896 3908 0
-8141 3897 0
-8141 3897 3905 0
-8141 3897 3906 0
-8141 3897 3908 0
8141 -3897 -3905 -3910 0
8141 -3896 -3906 -3910 0
8141 -3896 -3905 -3911 0
c ((1<=(aux936 + aux939 + aux940))=tv=SATLiteral(8142))
-8142 -3896 -3905 -3910 0
8142 3910 0
8142 3905 0
8142 3906 0
8142 3908 0
8142 3896 0
8142 3896 3905 0
8142 3896 3906 0
8142 3896 3908 0
8142 3897 0
8142 3897 3905 0
8142 3897 3906 0
8142 3897 3908 0
c (((aux942 + aux945 + aux946)<=1)=tv=SATLiteral(8143))
-8143 3935 0
-8143 3929 3934 0
-8143 3930 0
-8143 3932 0
-8143 3920 3934 0
-8143 3920 3929 0
-8143 3920 3930 0
-8143 3920 3932 0
-8143 3921 0
-8143 3921 3929 0
-8143 3921 3930 0
-8143 3921 3932 0
8143 -3921 -3929 -3934 0
8143 -3920 -3930 -3934 0
8143 -3920 -3929 -3935 0
c ((1<=(aux942 + aux945 + aux946))=tv=SATLiteral(8144))
-8144 -3920 -3929 -3934 0
8144 3934 0
8144 3929 0
8144 3930 0
8144 3932 0
8144 3920 0
8144 3920 3929 0
8144 3920 3930 0
8144 3920 3932 0
8144 3921 0
8144 3921 3929 0
8144 3921 3930 0
8144 3921 3932 0
c (((aux948 + aux951 + aux952)<=1)=tv=SATLiteral(8145))
-8145 3959 0
-8145 3953 3958 0
-8145 3954 0
-8145 3956 0
-8145 3944 3958 0
-8145 3944 3953 0
-8145 3944 3954 0
-8145 3944 3956 0
-8145 3945 0
-8145 3945 3953 0
-8145 3945 3954 0
-8145 3945 3956 0
8145 -3945 -3953 -3958 0
8145 -3944 -3954 -3958 0
8145 -3944 -3953 -3959 0
c ((1<=(aux948 + aux951 + aux952))=tv=SATLiteral(8146))
-8146 -3944 -3953 -3958 0
8146 3958 0
8146 3953 0
8146 3954 0
8146 3956 0
8146 3944 0
8146 3944 3953 0
8146 3944 3954 0
8146 3944 3956 0
8146 3945 0
8146 3945 3953 0
8146 3945 3954 0
8146 3945 3956 0
c (((aux954 + aux957 + aux958)<=1)=tv=SATLiteral(8147))
-8147 3983 0
-8147 3977 3982 0
-8147 3978 0
-8147 3980 0
-8147 3968 3982 0
-8147 3968 3977 0
-8147 3968 3978 0
-8147 3968 3980 0
-8147 3969 0
-8147 3969 3977 0
-8147 3969 3978 0
-8147 3969 3980 0
8147 -3969 -3977 -3982 0
8147 -3968 -3978 -3982 0
8147 -3968 -3977 -3983 0
c ((1<=(aux954 + aux957 + aux958))=tv=SATLiteral(8148))
-8148 -3968 -3977 -3982 0
8148 3982 0
8148 3977 0
8148 3978 0
8148 3980 0
8148 3968 0
8148 3968 3977 0
8148 3968 3978 0
8148 3968 3980 0
8148 3969 0
8148 3969 3977 0
8148 3969 3978 0
8148 3969 3980 0
c (((aux960 + aux963 + aux964)<=1)=tv=SATLiteral(8149))
-8149 4007 0
-8149 4001 4006 0
-8149 4002 0
-8149 4004 0
-8149 3992 4006 0
-8149 3992 4001 0
-8149 3992 4002 0
-8149 3992 4004 0
-8149 3993 0
-8149 3993 4001 0
-8149 3993 4002 0
-8149 3993 4004 0
8149 -3993 -4001 -4006 0
8149 -3992 -4002 -4006 0
8149 -3992 -4001 -4007 0
c ((1<=(aux960 + aux963 + aux964))=tv=SATLiteral(8150))
-8150 -3992 -4001 -4006 0
8150 4006 0
8150 4001 0
8150 4002 0
8150 4004 0
8150 3992 0
8150 3992 4001 0
8150 3992 4002 0
8150 3992 4004 0
8150 3993 0
8150 3993 4001 0
8150 3993 4002 0
8150 3993 4004 0
c (((aux966 + aux969 + aux970)<=1)=tv=SATLiteral(8151))
-8151 4031 0
-8151 4025 4030 0
-8151 4026 0
-8151 4028 0
-8151 4016 4030 0
-8151 4016 4025 0
-8151 4016 4026 0
-8151 4016 4028 0
-8151 4017 0
-8151 4017 4025 0
-8151 4017 4026 0
-8151 4017 4028 0
8151 -4017 -4025 -4030 0
8151 -4016 -4026 -4030 0
8151 -4016 -4025 -4031 0
c ((1<=(aux966 + aux969 + aux970))=tv=SATLiteral(8152))
-8152 -4016 -4025 -4030 0
8152 4030 0
8152 4025 0
8152 4026 0
8152 4028 0
8152 4016 0
8152 4016 4025 0
8152 4016 4026 0
8152 4016 4028 0
8152 4017 0
8152 4017 4025 0
8152 4017 4026 0
8152 4017 4028 0
c (((aux972 + aux975 + aux976)<=1)=tv=SATLiteral(8153))
-8153 4055 0
-8153 4049 4054 0
-8153 4050 0
-8153 4052 0
-8153 4040 4054 0
-8153 4040 4049 0
-8153 4040 4050 0
-8153 4040 4052 0
-8153 4041 0
-8153 4041 4049 0
-8153 4041 4050 0
-8153 4041 4052 0
8153 -4041 -4049 -4054 0
8153 -4040 -4050 -4054 0
8153 -4040 -4049 -4055 0
c ((1<=(aux972 + aux975 + aux976))=tv=SATLiteral(8154))
-8154 -4040 -4049 -4054 0
8154 4054 0
8154 4049 0
8154 4050 0
8154 4052 0
8154 4040 0
8154 4040 4049 0
8154 4040 4050 0
8154 4040 4052 0
8154 4041 0
8154 4041 4049 0
8154 4041 4050 0
8154 4041 4052 0
c (((aux978 + aux981 + aux982)<=1)=tv=SATLiteral(8155))
-8155 4079 0
-8155 4073 4078 0
-8155 4074 0
-8155 4076 0
-8155 4064 4078 0
-8155 4064 4073 0
-8155 4064 4074 0
-8155 4064 4076 0
-8155 4065 0
-8155 4065 4073 0
-8155 4065 4074 0
-8155 4065 4076 0
8155 -4065 -4073 -4078 0
8155 -4064 -4074 -4078 0
8155 -4064 -4073 -4079 0
c ((1<=(aux978 + aux981 + aux982))=tv=SATLiteral(8156))
-8156 -4064 -4073 -4078 0
8156 4078 0
8156 4073 0
8156 4074 0
8156 4076 0
8156 4064 0
8156 4064 4073 0
8156 4064 4074 0
8156 4064 4076 0
8156 4065 0
8156 4065 4073 0
8156 4065 4074 0
8156 4065 4076 0
c (((aux984 + aux987 + aux988)<=1)=tv=SATLiteral(8157))
-8157 4103 0
-8157 4097 4102 0
-8157 4098 0
-8157 4100 0
-8157 4088 4102 0
-8157 4088 4097 0
-8157 4088 4098 0
-8157 4088 4100 0
-8157 4089 0
-8157 4089 4097 0
-8157 4089 4098 0
-8157 4089 4100 0
8157 -4089 -4097 -4102 0
8157 -4088 -4098 -4102 0
8157 -4088 -4097 -4103 0
c ((1<=(aux984 + aux987 + aux988))=tv=SATLiteral(8158))
-8158 -4088 -4097 -4102 0
8158 4102 0
8158 4097 0
8158 4098 0
8158 4100 0
8158 4088 0
8158 4088 4097 0
8158 4088 4098 0
8158 4088 4100 0
8158 4089 0
8158 4089 4097 0
8158 4089 4098 0
8158 4089 4100 0
c (((aux990 + aux993 + aux994)<=1)=tv=SATLiteral(8159))
-8159 4127 0
-8159 4121 4126 0
-8159 4122 0
-8159 4124 0
-8159 4112 4126 0
-8159 4112 4121 0
-8159 4112 4122 0
-8159 4112 4124 0
-8159 4113 0
-8159 4113 4121 0
-8159 4113 4122 0
-8159 4113 4124 0
8159 -4113 -4121 -4126 0
8159 -4112 -4122 -4126 0
8159 -4112 -4121 -4127 0
c ((1<=(aux990 + aux993 + aux994))=tv=SATLiteral(8160))
-8160 -4112 -4121 -4126 0
8160 4126 0
8160 4121 0
8160 4122 0
8160 4124 0
8160 4112 0
8160 4112 4121 0
8160 4112 4122 0
8160 4112 4124 0
8160 4113 0
8160 4113 4121 0
8160 4113 4122 0
8160 4113 4124 0
c (((aux996 + aux999 + aux1000)<=1)=tv=SATLiteral(8161))
-8161 4151 0
-8161 4145 4150 0
-8161 4146 0
-8161 4148 0
-8161 4136 4150 0
-8161 4136 4145 0
-8161 4136 4146 0
-8161 4136 4148 0
-8161 4137 0
-8161 4137 4145 0
-8161 4137 4146 0
-8161 4137 4148 0
8161 -4137 -4145 -4150 0
8161 -4136 -4146 -4150 0
8161 -4136 -4145 -4151 0
c ((1<=(aux996 + aux999 + aux1000))=tv=SATLiteral(8162))
-8162 -4136 -4145 -4150 0
8162 4150 0
8162 4145 0
8162 4146 0
8162 4148 0
8162 4136 0
8162 4136 4145 0
8162 4136 4146 0
8162 4136 4148 0
8162 4137 0
8162 4137 4145 0
8162 4137 4146 0
8162 4137 4148 0
c (((aux1002 + aux1005 + aux1006)<=1)=tv=SATLiteral(8163))
-8163 4175 0
-8163 4169 4174 0
-8163 4170 0
-8163 4172 0
-8163 4160 4174 0
-8163 4160 4169 0
-8163 4160 4170 0
-8163 4160 4172 0
-8163 4161 0
-8163 4161 4169 0
-8163 4161 4170 0
-8163 4161 4172 0
8163 -4161 -4169 -4174 0
8163 -4160 -4170 -4174 0
8163 -4160 -4169 -4175 0
c ((1<=(aux1002 + aux1005 + aux1006))=tv=SATLiteral(8164))
-8164 -4160 -4169 -4174 0
8164 4174 0
8164 4169 0
8164 4170 0
8164 4172 0
8164 4160 0
8164 4160 4169 0
8164 4160 4170 0
8164 4160 4172 0
8164 4161 0
8164 4161 4169 0
8164 4161 4170 0
8164 4161 4172 0
c (((aux1008 + aux1011 + aux1012)<=1)=tv=SATLiteral(8165))
-8165 4199 0
-8165 4193 4198 0
-8165 4194 0
-8165 4196 0
-8165 4184 4198 0
-8165 4184 4193 0
-8165 4184 4194 0
-8165 4184 4196 0
-8165 4185 0
-8165 4185 4193 0
-8165 4185 4194 0
-8165 4185 4196 0
8165 -4185 -4193 -4198 0
8165 -4184 -4194 -4198 0
8165 -4184 -4193 -4199 0
c ((1<=(aux1008 + aux1011 + aux1012))=tv=SATLiteral(8166))
-8166 -4184 -4193 -4198 0
8166 4198 0
8166 4193 0
8166 4194 0
8166 4196 0
8166 4184 0
8166 4184 4193 0
8166 4184 4194 0
8166 4184 4196 0
8166 4185 0
8166 4185 4193 0
8166 4185 4194 0
8166 4185 4196 0
c (((aux1014 + aux1017 + aux1018)<=1)=tv=SATLiteral(8167))
-8167 4223 0
-8167 4217 4222 0
-8167 4218 0
-8167 4220 0
-8167 4208 4222 0
-8167 4208 4217 0
-8167 4208 4218 0
-8167 4208 4220 0
-8167 4209 0
-8167 4209 4217 0
-8167 4209 4218 0
-8167 4209 4220 0
8167 -4209 -4217 -4222 0
8167 -4208 -4218 -4222 0
8167 -4208 -4217 -4223 0
c ((1<=(aux1014 + aux1017 + aux1018))=tv=SATLiteral(8168))
-8168 -4208 -4217 -4222 0
8168 4222 0
8168 4217 0
8168 4218 0
8168 4220 0
8168 4208 0
8168 4208 4217 0
8168 4208 4218 0
8168 4208 4220 0
8168 4209 0
8168 4209 4217 0
8168 4209 4218 0
8168 4209 4220 0
c (((aux1020 + aux1023 + aux1024)<=1)=tv=SATLiteral(8169))
-8169 4247 0
-8169 4241 4246 0
-8169 4242 0
-8169 4244 0
-8169 4232 4246 0
-8169 4232 4241 0
-8169 4232 4242 0
-8169 4232 4244 0
-8169 4233 0
-8169 4233 4241 0
-8169 4233 4242 0
-8169 4233 4244 0
8169 -4233 -4241 -4246 0
8169 -4232 -4242 -4246 0
8169 -4232 -4241 -4247 0
c ((1<=(aux1020 + aux1023 + aux1024))=tv=SATLiteral(8170))
-8170 -4232 -4241 -4246 0
8170 4246 0
8170 4241 0
8170 4242 0
8170 4244 0
8170 4232 0
8170 4232 4241 0
8170 4232 4242 0
8170 4232 4244 0
8170 4233 0
8170 4233 4241 0
8170 4233 4242 0
8170 4233 4244 0
c (((aux1026 + aux1029 + aux1030)<=1)=tv=SATLiteral(8171))
-8171 4271 0
-8171 4265 4270 0
-8171 4266 0
-8171 4268 0
-8171 4256 4270 0
-8171 4256 4265 0
-8171 4256 4266 0
-8171 4256 4268 0
-8171 4257 0
-8171 4257 4265 0
-8171 4257 4266 0
-8171 4257 4268 0
8171 -4257 -4265 -4270 0
8171 -4256 -4266 -4270 0
8171 -4256 -4265 -4271 0
c ((1<=(aux1026 + aux1029 + aux1030))=tv=SATLiteral(8172))
-8172 -4256 -4265 -4270 0
8172 4270 0
8172 4265 0
8172 4266 0
8172 4268 0
8172 4256 0
8172 4256 4265 0
8172 4256 4266 0
8172 4256 4268 0
8172 4257 0
8172 4257 4265 0
8172 4257 4266 0
8172 4257 4268 0
c (((aux1032 + aux1035 + aux1036)<=1)=tv=SATLiteral(8173))
-8173 4295 0
-8173 4289 4294 0
-8173 4290 0
-8173 4292 0
-8173 4280 4294 0
-8173 4280 4289 0
-8173 4280 4290 0
-8173 4280 4292 0
-8173 4281 0
-8173 4281 4289 0
-8173 4281 4290 0
-8173 4281 4292 0
8173 -4281 -4289 -4294 0
8173 -4280 -4290 -4294 0
8173 -4280 -4289 -4295 0
c ((1<=(aux1032 + aux1035 + aux1036))=tv=SATLiteral(8174))
-8174 -4280 -4289 -4294 0
8174 4294 0
8174 4289 0
8174 4290 0
8174 4292 0
8174 4280 0
8174 4280 4289 0
8174 4280 4290 0
8174 4280 4292 0
8174 4281 0
8174 4281 4289 0
8174 4281 4290 0
8174 4281 4292 0
c (((aux1038 + aux1041 + aux1042)<=1)=tv=SATLiteral(8175))
-8175 4319 0
-8175 4313 4318 0
-8175 4314 0
-8175 4316 0
-8175 4304 4318 0
-8175 4304 4313 0
-8175 4304 4314 0
-8175 4304 4316 0
-8175 4305 0
-8175 4305 4313 0
-8175 4305 4314 0
-8175 4305 4316 0
8175 -4305 -4313 -4318 0
8175 -4304 -4314 -4318 0
8175 -4304 -4313 -4319 0
c ((1<=(aux1038 + aux1041 + aux1042))=tv=SATLiteral(8176))
-8176 -4304 -4313 -4318 0
8176 4318 0
8176 4313 0
8176 4314 0
8176 4316 0
8176 4304 0
8176 4304 4313 0
8176 4304 4314 0
8176 4304 4316 0
8176 4305 0
8176 4305 4313 0
8176 4305 4314 0
8176 4305 4316 0
c (((aux1044 + aux1047 + aux1048)<=1)=tv=SATLiteral(8177))
-8177 4343 0
-8177 4337 4342 0
-8177 4338 0
-8177 4340 0
-8177 4328 4342 0
-8177 4328 4337 0
-8177 4328 4338 0
-8177 4328 4340 0
-8177 4329 0
-8177 4329 4337 0
-8177 4329 4338 0
-8177 4329 4340 0
8177 -4329 -4337 -4342 0
8177 -4328 -4338 -4342 0
8177 -4328 -4337 -4343 0
c ((1<=(aux1044 + aux1047 + aux1048))=tv=SATLiteral(8178))
-8178 -4328 -4337 -4342 0
8178 4342 0
8178 4337 0
8178 4338 0
8178 4340 0
8178 4328 0
8178 4328 4337 0
8178 4328 4338 0
8178 4328 4340 0
8178 4329 0
8178 4329 4337 0
8178 4329 4338 0
8178 4329 4340 0
c (((aux1050 + aux1053 + aux1054)<=1)=tv=SATLiteral(8179))
-8179 4367 0
-8179 4361 4366 0
-8179 4362 0
-8179 4364 0
-8179 4352 4366 0
-8179 4352 4361 0
-8179 4352 4362 0
-8179 4352 4364 0
-8179 4353 0
-8179 4353 4361 0
-8179 4353 4362 0
-8179 4353 4364 0
8179 -4353 -4361 -4366 0
8179 -4352 -4362 -4366 0
8179 -4352 -4361 -4367 0
c ((1<=(aux1050 + aux1053 + aux1054))=tv=SATLiteral(8180))
-8180 -4352 -4361 -4366 0
8180 4366 0
8180 4361 0
8180 4362 0
8180 4364 0
8180 4352 0
8180 4352 4361 0
8180 4352 4362 0
8180 4352 4364 0
8180 4353 0
8180 4353 4361 0
8180 4353 4362 0
8180 4353 4364 0
c (((aux1056 + aux1059 + aux1060)<=1)=tv=SATLiteral(8181))
-8181 4391 0
-8181 4385 4390 0
-8181 4386 0
-8181 4388 0
-8181 4376 4390 0
-8181 4376 4385 0
-8181 4376 4386 0
-8181 4376 4388 0
-8181 4377 0
-8181 4377 4385 0
-8181 4377 4386 0
-8181 4377 4388 0
8181 -4377 -4385 -4390 0
8181 -4376 -4386 -4390 0
8181 -4376 -4385 -4391 0
c ((1<=(aux1056 + aux1059 + aux1060))=tv=SATLiteral(8182))
-8182 -4376 -4385 -4390 0
8182 4390 0
8182 4385 0
8182 4386 0
8182 4388 0
8182 4376 0
8182 4376 4385 0
8182 4376 4386 0
8182 4376 4388 0
8182 4377 0
8182 4377 4385 0
8182 4377 4386 0
8182 4377 4388 0
c (((aux1062 + aux1065 + aux1066)<=1)=tv=SATLiteral(8183))
-8183 4415 0
-8183 4409 4414 0
-8183 4410 0
-8183 4412 0
-8183 4400 4414 0
-8183 4400 4409 0
-8183 4400 4410 0
-8183 4400 4412 0
-8183 4401 0
-8183 4401 4409 0
-8183 4401 4410 0
-8183 4401 4412 0
8183 -4401 -4409 -4414 0
8183 -4400 -4410 -4414 0
8183 -4400 -4409 -4415 0
c ((1<=(aux1062 + aux1065 + aux1066))=tv=SATLiteral(8184))
-8184 -4400 -4409 -4414 0
8184 4414 0
8184 4409 0
8184 4410 0
8184 4412 0
8184 4400 0
8184 4400 4409 0
8184 4400 4410 0
8184 4400 4412 0
8184 4401 0
8184 4401 4409 0
8184 4401 4410 0
8184 4401 4412 0
c (((aux1068 + aux1071 + aux1072)<=1)=tv=SATLiteral(8185))
-8185 4439 0
-8185 4433 4438 0
-8185 4434 0
-8185 4436 0
-8185 4424 4438 0
-8185 4424 4433 0
-8185 4424 4434 0
-8185 4424 4436 0
-8185 4425 0
-8185 4425 4433 0
-8185 4425 4434 0
-8185 4425 4436 0
8185 -4425 -4433 -4438 0
8185 -4424 -4434 -4438 0
8185 -4424 -4433 -4439 0
c ((1<=(aux1068 + aux1071 + aux1072))=tv=SATLiteral(8186))
-8186 -4424 -4433 -4438 0
8186 4438 0
8186 4433 0
8186 4434 0
8186 4436 0
8186 4424 0
8186 4424 4433 0
8186 4424 4434 0
8186 4424 4436 0
8186 4425 0
8186 4425 4433 0
8186 4425 4434 0
8186 4425 4436 0
c (((aux1074 + aux1077 + aux1078)<=1)=tv=SATLiteral(8187))
-8187 4463 0
-8187 4457 4462 0
-8187 4458 0
-8187 4460 0
-8187 4448 4462 0
-8187 4448 4457 0
-8187 4448 4458 0
-8187 4448 4460 0
-8187 4449 0
-8187 4449 4457 0
-8187 4449 4458 0
-8187 4449 4460 0
8187 -4449 -4457 -4462 0
8187 -4448 -4458 -4462 0
8187 -4448 -4457 -4463 0
c ((1<=(aux1074 + aux1077 + aux1078))=tv=SATLiteral(8188))
-8188 -4448 -4457 -4462 0
8188 4462 0
8188 4457 0
8188 4458 0
8188 4460 0
8188 4448 0
8188 4448 4457 0
8188 4448 4458 0
8188 4448 4460 0
8188 4449 0
8188 4449 4457 0
8188 4449 4458 0
8188 4449 4460 0
c (((aux1080 + aux1083 + aux1084)<=1)=tv=SATLiteral(8189))
-8189 4487 0
-8189 4481 4486 0
-8189 4482 0
-8189 4484 0
-8189 4472 4486 0
-8189 4472 4481 0
-8189 4472 4482 0
-8189 4472 4484 0
-8189 4473 0
-8189 4473 4481 0
-8189 4473 4482 0
-8189 4473 4484 0
8189 -4473 -4481 -4486 0
8189 -4472 -4482 -4486 0
8189 -4472 -4481 -4487 0
c ((1<=(aux1080 + aux1083 + aux1084))=tv=SATLiteral(8190))
-8190 -4472 -4481 -4486 0
8190 4486 0
8190 4481 0
8190 4482 0
8190 4484 0
8190 4472 0
8190 4472 4481 0
8190 4472 4482 0
8190 4472 4484 0
8190 4473 0
8190 4473 4481 0
8190 4473 4482 0
8190 4473 4484 0
c (((aux1086 + aux1089 + aux1090)<=1)=tv=SATLiteral(8191))
-8191 4511 0
-8191 4505 4510 0
-8191 4506 0
-8191 4508 0
-8191 4496 4510 0
-8191 4496 4505 0
-8191 4496 4506 0
-8191 4496 4508 0
-8191 4497 0
-8191 4497 4505 0
-8191 4497 4506 0
-8191 4497 4508 0
8191 -4497 -4505 -4510 0
8191 -4496 -4506 -4510 0
8191 -4496 -4505 -4511 0
c ((1<=(aux1086 + aux1089 + aux1090))=tv=SATLiteral(8192))
-8192 -4496 -4505 -4510 0
8192 4510 0
8192 4505 0
8192 4506 0
8192 4508 0
8192 4496 0
8192 4496 4505 0
8192 4496 4506 0
8192 4496 4508 0
8192 4497 0
8192 4497 4505 0
8192 4497 4506 0
8192 4497 4508 0
c (((aux1092 + aux1095 + aux1096)<=1)=tv=SATLiteral(8193))
-8193 4535 0
-8193 4529 4534 0
-8193 4530 0
-8193 4532 0
-8193 4520 4534 0
-8193 4520 4529 0
-8193 4520 4530 0
-8193 4520 4532 0
-8193 4521 0
-8193 4521 4529 0
-8193 4521 4530 0
-8193 4521 4532 0
8193 -4521 -4529 -4534 0
8193 -4520 -4530 -4534 0
8193 -4520 -4529 -4535 0
c ((1<=(aux1092 + aux1095 + aux1096))=tv=SATLiteral(8194))
-8194 -4520 -4529 -4534 0
8194 4534 0
8194 4529 0
8194 4530 0
8194 4532 0
8194 4520 0
8194 4520 4529 0
8194 4520 4530 0
8194 4520 4532 0
8194 4521 0
8194 4521 4529 0
8194 4521 4530 0
8194 4521 4532 0
c (((aux1098 + aux1101 + aux1102)<=1)=tv=SATLiteral(8195))
-8195 4559 0
-8195 4553 4558 0
-8195 4554 0
-8195 4556 0
-8195 4544 4558 0
-8195 4544 4553 0
-8195 4544 4554 0
-8195 4544 4556 0
-8195 4545 0
-8195 4545 4553 0
-8195 4545 4554 0
-8195 4545 4556 0
8195 -4545 -4553 -4558 0
8195 -4544 -4554 -4558 0
8195 -4544 -4553 -4559 0
c ((1<=(aux1098 + aux1101 + aux1102))=tv=SATLiteral(8196))
-8196 -4544 -4553 -4558 0
8196 4558 0
8196 4553 0
8196 4554 0
8196 4556 0
8196 4544 0
8196 4544 4553 0
8196 4544 4554 0
8196 4544 4556 0
8196 4545 0
8196 4545 4553 0
8196 4545 4554 0
8196 4545 4556 0
c (((aux1104 + aux1107 + aux1108)<=1)=tv=SATLiteral(8197))
-8197 4583 0
-8197 4577 4582 0
-8197 4578 0
-8197 4580 0
-8197 4568 4582 0
-8197 4568 4577 0
-8197 4568 4578 0
-8197 4568 4580 0
-8197 4569 0
-8197 4569 4577 0
-8197 4569 4578 0
-8197 4569 4580 0
8197 -4569 -4577 -4582 0
8197 -4568 -4578 -4582 0
8197 -4568 -4577 -4583 0
c ((1<=(aux1104 + aux1107 + aux1108))=tv=SATLiteral(8198))
-8198 -4568 -4577 -4582 0
8198 4582 0
8198 4577 0
8198 4578 0
8198 4580 0
8198 4568 0
8198 4568 4577 0
8198 4568 4578 0
8198 4568 4580 0
8198 4569 0
8198 4569 4577 0
8198 4569 4578 0
8198 4569 4580 0
c (((aux1110 + aux1113 + aux1114)<=1)=tv=SATLiteral(8199))
-8199 4607 0
-8199 4601 4606 0
-8199 4602 0
-8199 4604 0
-8199 4592 4606 0
-8199 4592 4601 0
-8199 4592 4602 0
-8199 4592 4604 0
-8199 4593 0
-8199 4593 4601 0
-8199 4593 4602 0
-8199 4593 4604 0
8199 -4593 -4601 -4606 0
8199 -4592 -4602 -4606 0
8199 -4592 -4601 -4607 0
c ((1<=(aux1110 + aux1113 + aux1114))=tv=SATLiteral(8200))
-8200 -4592 -4601 -4606 0
8200 4606 0
8200 4601 0
8200 4602 0
8200 4604 0
8200 4592 0
8200 4592 4601 0
8200 4592 4602 0
8200 4592 4604 0
8200 4593 0
8200 4593 4601 0
8200 4593 4602 0
8200 4593 4604 0
c (((aux1116 + aux1119 + aux1120)<=1)=tv=SATLiteral(8201))
-8201 4631 0
-8201 4625 4630 0
-8201 4626 0
-8201 4628 0
-8201 4616 4630 0
-8201 4616 4625 0
-8201 4616 4626 0
-8201 4616 4628 0
-8201 4617 0
-8201 4617 4625 0
-8201 4617 4626 0
-8201 4617 4628 0
8201 -4617 -4625 -4630 0
8201 -4616 -4626 -4630 0
8201 -4616 -4625 -4631 0
c ((1<=(aux1116 + aux1119 + aux1120))=tv=SATLiteral(8202))
-8202 -4616 -4625 -4630 0
8202 4630 0
8202 4625 0
8202 4626 0
8202 4628 0
8202 4616 0
8202 4616 4625 0
8202 4616 4626 0
8202 4616 4628 0
8202 4617 0
8202 4617 4625 0
8202 4617 4626 0
8202 4617 4628 0
c (((aux1122 + aux1125 + aux1126)<=1)=tv=SATLiteral(8203))
-8203 4655 0
-8203 4649 4654 0
-8203 4650 0
-8203 4652 0
-8203 4640 4654 0
-8203 4640 4649 0
-8203 4640 4650 0
-8203 4640 4652 0
-8203 4641 0
-8203 4641 4649 0
-8203 4641 4650 0
-8203 4641 4652 0
8203 -4641 -4649 -4654 0
8203 -4640 -4650 -4654 0
8203 -4640 -4649 -4655 0
c ((1<=(aux1122 + aux1125 + aux1126))=tv=SATLiteral(8204))
-8204 -4640 -4649 -4654 0
8204 4654 0
8204 4649 0
8204 4650 0
8204 4652 0
8204 4640 0
8204 4640 4649 0
8204 4640 4650 0
8204 4640 4652 0
8204 4641 0
8204 4641 4649 0
8204 4641 4650 0
8204 4641 4652 0
c (((aux1128 + aux1131 + aux1132)<=1)=tv=SATLiteral(8205))
-8205 4679 0
-8205 4673 4678 0
-8205 4674 0
-8205 4676 0
-8205 4664 4678 0
-8205 4664 4673 0
-8205 4664 4674 0
-8205 4664 4676 0
-8205 4665 0
-8205 4665 4673 0
-8205 4665 4674 0
-8205 4665 4676 0
8205 -4665 -4673 -4678 0
8205 -4664 -4674 -4678 0
8205 -4664 -4673 -4679 0
c ((1<=(aux1128 + aux1131 + aux1132))=tv=SATLiteral(8206))
-8206 -4664 -4673 -4678 0
8206 4678 0
8206 4673 0
8206 4674 0
8206 4676 0
8206 4664 0
8206 4664 4673 0
8206 4664 4674 0
8206 4664 4676 0
8206 4665 0
8206 4665 4673 0
8206 4665 4674 0
8206 4665 4676 0
c (((aux1134 + aux1137 + aux1138)<=1)=tv=SATLiteral(8207))
-8207 4703 0
-8207 4697 4702 0
-8207 4698 0
-8207 4700 0
-8207 4688 4702 0
-8207 4688 4697 0
-8207 4688 4698 0
-8207 4688 4700 0
-8207 4689 0
-8207 4689 4697 0
-8207 4689 4698 0
-8207 4689 4700 0
8207 -4689 -4697 -4702 0
8207 -4688 -4698 -4702 0
8207 -4688 -4697 -4703 0
c ((1<=(aux1134 + aux1137 + aux1138))=tv=SATLiteral(8208))
-8208 -4688 -4697 -4702 0
8208 4702 0
8208 4697 0
8208 4698 0
8208 4700 0
8208 4688 0
8208 4688 4697 0
8208 4688 4698 0
8208 4688 4700 0
8208 4689 0
8208 4689 4697 0
8208 4689 4698 0
8208 4689 4700 0
c (((aux1140 + aux1143 + aux1144)<=1)=tv=SATLiteral(8209))
-8209 4727 0
-8209 4721 4726 0
-8209 4722 0
-8209 4724 0
-8209 4712 4726 0
-8209 4712 4721 0
-8209 4712 4722 0
-8209 4712 4724 0
-8209 4713 0
-8209 4713 4721 0
-8209 4713 4722 0
-8209 4713 4724 0
8209 -4713 -4721 -4726 0
8209 -4712 -4722 -4726 0
8209 -4712 -4721 -4727 0
c ((1<=(aux1140 + aux1143 + aux1144))=tv=SATLiteral(8210))
-8210 -4712 -4721 -4726 0
8210 4726 0
8210 4721 0
8210 4722 0
8210 4724 0
8210 4712 0
8210 4712 4721 0
8210 4712 4722 0
8210 4712 4724 0
8210 4713 0
8210 4713 4721 0
8210 4713 4722 0
8210 4713 4724 0
c (((aux1146 + aux1149 + aux1150)<=1)=tv=SATLiteral(8211))
-8211 4751 0
-8211 4745 4750 0
-8211 4746 0
-8211 4748 0
-8211 4736 4750 0
-8211 4736 4745 0
-8211 4736 4746 0
-8211 4736 4748 0
-8211 4737 0
-8211 4737 4745 0
-8211 4737 4746 0
-8211 4737 4748 0
8211 -4737 -4745 -4750 0
8211 -4736 -4746 -4750 0
8211 -4736 -4745 -4751 0
c ((1<=(aux1146 + aux1149 + aux1150))=tv=SATLiteral(8212))
-8212 -4736 -4745 -4750 0
8212 4750 0
8212 4745 0
8212 4746 0
8212 4748 0
8212 4736 0
8212 4736 4745 0
8212 4736 4746 0
8212 4736 4748 0
8212 4737 0
8212 4737 4745 0
8212 4737 4746 0
8212 4737 4748 0
c (((aux1152 + aux1155 + aux1156)<=1)=tv=SATLiteral(8213))
-8213 4775 0
-8213 4769 4774 0
-8213 4770 0
-8213 4772 0
-8213 4760 4774 0
-8213 4760 4769 0
-8213 4760 4770 0
-8213 4760 4772 0
-8213 4761 0
-8213 4761 4769 0
-8213 4761 4770 0
-8213 4761 4772 0
8213 -4761 -4769 -4774 0
8213 -4760 -4770 -4774 0
8213 -4760 -4769 -4775 0
c ((1<=(aux1152 + aux1155 + aux1156))=tv=SATLiteral(8214))
-8214 -4760 -4769 -4774 0
8214 4774 0
8214 4769 0
8214 4770 0
8214 4772 0
8214 4760 0
8214 4760 4769 0
8214 4760 4770 0
8214 4760 4772 0
8214 4761 0
8214 4761 4769 0
8214 4761 4770 0
8214 4761 4772 0
c (((aux1158 + aux1161 + aux1162)<=1)=tv=SATLiteral(8215))
-8215 4799 0
-8215 4793 4798 0
-8215 4794 0
-8215 4796 0
-8215 4784 4798 0
-8215 4784 4793 0
-8215 4784 4794 0
-8215 4784 4796 0
-8215 4785 0
-8215 4785 4793 0
-8215 4785 4794 0
-8215 4785 4796 0
8215 -4785 -4793 -4798 0
8215 -4784 -4794 -4798 0
8215 -4784 -4793 -4799 0
c ((1<=(aux1158 + aux1161 + aux1162))=tv=SATLiteral(8216))
-8216 -4784 -4793 -4798 0
8216 4798 0
8216 4793 0
8216 4794 0
8216 4796 0
8216 4784 0
8216 4784 4793 0
8216 4784 4794 0
8216 4784 4796 0
8216 4785 0
8216 4785 4793 0
8216 4785 4794 0
8216 4785 4796 0
c (((aux1164 + aux1167 + aux1168)<=1)=tv=SATLiteral(8217))
-8217 4823 0
-8217 4817 4822 0
-8217 4818 0
-8217 4820 0
-8217 4808 4822 0
-8217 4808 4817 0
-8217 4808 4818 0
-8217 4808 4820 0
-8217 4809 0
-8217 4809 4817 0
-8217 4809 4818 0
-8217 4809 4820 0
8217 -4809 -4817 -4822 0
8217 -4808 -4818 -4822 0
8217 -4808 -4817 -4823 0
c ((1<=(aux1164 + aux1167 + aux1168))=tv=SATLiteral(8218))
-8218 -4808 -4817 -4822 0
8218 4822 0
8218 4817 0
8218 4818 0
8218 4820 0
8218 4808 0
8218 4808 4817 0
8218 4808 4818 0
8218 4808 4820 0
8218 4809 0
8218 4809 4817 0
8218 4809 4818 0
8218 4809 4820 0
c (((aux1170 + aux1173 + aux1174)<=1)=tv=SATLiteral(8219))
-8219 4847 0
-8219 4841 4846 0
-8219 4842 0
-8219 4844 0
-8219 4832 4846 0
-8219 4832 4841 0
-8219 4832 4842 0
-8219 4832 4844 0
-8219 4833 0
-8219 4833 4841 0
-8219 4833 4842 0
-8219 4833 4844 0
8219 -4833 -4841 -4846 0
8219 -4832 -4842 -4846 0
8219 -4832 -4841 -4847 0
c ((1<=(aux1170 + aux1173 + aux1174))=tv=SATLiteral(8220))
-8220 -4832 -4841 -4846 0
8220 4846 0
8220 4841 0
8220 4842 0
8220 4844 0
8220 4832 0
8220 4832 4841 0
8220 4832 4842 0
8220 4832 4844 0
8220 4833 0
8220 4833 4841 0
8220 4833 4842 0
8220 4833 4844 0
c (((aux1176 + aux1179 + aux1180)<=1)=tv=SATLiteral(8221))
-8221 4871 0
-8221 4865 4870 0
-8221 4866 0
-8221 4868 0
-8221 4856 4870 0
-8221 4856 4865 0
-8221 4856 4866 0
-8221 4856 4868 0
-8221 4857 0
-8221 4857 4865 0
-8221 4857 4866 0
-8221 4857 4868 0
8221 -4857 -4865 -4870 0
8221 -4856 -4866 -4870 0
8221 -4856 -4865 -4871 0
c ((1<=(aux1176 + aux1179 + aux1180))=tv=SATLiteral(8222))
-8222 -4856 -4865 -4870 0
8222 4870 0
8222 4865 0
8222 4866 0
8222 4868 0
8222 4856 0
8222 4856 4865 0
8222 4856 4866 0
8222 4856 4868 0
8222 4857 0
8222 4857 4865 0
8222 4857 4866 0
8222 4857 4868 0
c (((aux1182 + aux1185 + aux1186)<=1)=tv=SATLiteral(8223))
-8223 4895 0
-8223 4889 4894 0
-8223 4890 0
-8223 4892 0
-8223 4880 4894 0
-8223 4880 4889 0
-8223 4880 4890 0
-8223 4880 4892 0
-8223 4881 0
-8223 4881 4889 0
-8223 4881 4890 0
-8223 4881 4892 0
8223 -4881 -4889 -4894 0
8223 -4880 -4890 -4894 0
8223 -4880 -4889 -4895 0
c ((1<=(aux1182 + aux1185 + aux1186))=tv=SATLiteral(8224))
-8224 -4880 -4889 -4894 0
8224 4894 0
8224 4889 0
8224 4890 0
8224 4892 0
8224 4880 0
8224 4880 4889 0
8224 4880 4890 0
8224 4880 4892 0
8224 4881 0
8224 4881 4889 0
8224 4881 4890 0
8224 4881 4892 0
c (((aux1188 + aux1191 + aux1192)<=1)=tv=SATLiteral(8225))
-8225 4919 0
-8225 4913 4918 0
-8225 4914 0
-8225 4916 0
-8225 4904 4918 0
-8225 4904 4913 0
-8225 4904 4914 0
-8225 4904 4916 0
-8225 4905 0
-8225 4905 4913 0
-8225 4905 4914 0
-8225 4905 4916 0
8225 -4905 -4913 -4918 0
8225 -4904 -4914 -4918 0
8225 -4904 -4913 -4919 0
c ((1<=(aux1188 + aux1191 + aux1192))=tv=SATLiteral(8226))
-8226 -4904 -4913 -4918 0
8226 4918 0
8226 4913 0
8226 4914 0
8226 4916 0
8226 4904 0
8226 4904 4913 0
8226 4904 4914 0
8226 4904 4916 0
8226 4905 0
8226 4905 4913 0
8226 4905 4914 0
8226 4905 4916 0
c (((aux1194 + aux1197 + aux1198)<=1)=tv=SATLiteral(8227))
-8227 4943 0
-8227 4937 4942 0
-8227 4938 0
-8227 4940 0
-8227 4928 4942 0
-8227 4928 4937 0
-8227 4928 4938 0
-8227 4928 4940 0
-8227 4929 0
-8227 4929 4937 0
-8227 4929 4938 0
-8227 4929 4940 0
8227 -4929 -4937 -4942 0
8227 -4928 -4938 -4942 0
8227 -4928 -4937 -4943 0
c ((1<=(aux1194 + aux1197 + aux1198))=tv=SATLiteral(8228))
-8228 -4928 -4937 -4942 0
8228 4942 0
8228 4937 0
8228 4938 0
8228 4940 0
8228 4928 0
8228 4928 4937 0
8228 4928 4938 0
8228 4928 4940 0
8228 4929 0
8228 4929 4937 0
8228 4929 4938 0
8228 4929 4940 0
c (((aux1200 + aux1203 + aux1204)<=1)=tv=SATLiteral(8229))
-8229 4967 0
-8229 4961 4966 0
-8229 4962 0
-8229 4964 0
-8229 4952 4966 0
-8229 4952 4961 0
-8229 4952 4962 0
-8229 4952 4964 0
-8229 4953 0
-8229 4953 4961 0
-8229 4953 4962 0
-8229 4953 4964 0
8229 -4953 -4961 -4966 0
8229 -4952 -4962 -4966 0
8229 -4952 -4961 -4967 0
c ((1<=(aux1200 + aux1203 + aux1204))=tv=SATLiteral(8230))
-8230 -4952 -4961 -4966 0
8230 4966 0
8230 4961 0
8230 4962 0
8230 4964 0
8230 4952 0
8230 4952 4961 0
8230 4952 4962 0
8230 4952 4964 0
8230 4953 0
8230 4953 4961 0
8230 4953 4962 0
8230 4953 4964 0
c (((aux1206 + aux1209 + aux1210)<=1)=tv=SATLiteral(8231))
-8231 4991 0
-8231 4985 4990 0
-8231 4986 0
-8231 4988 0
-8231 4976 4990 0
-8231 4976 4985 0
-8231 4976 4986 0
-8231 4976 4988 0
-8231 4977 0
-8231 4977 4985 0
-8231 4977 4986 0
-8231 4977 4988 0
8231 -4977 -4985 -4990 0
8231 -4976 -4986 -4990 0
8231 -4976 -4985 -4991 0
c ((1<=(aux1206 + aux1209 + aux1210))=tv=SATLiteral(8232))
-8232 -4976 -4985 -4990 0
8232 4990 0
8232 4985 0
8232 4986 0
8232 4988 0
8232 4976 0
8232 4976 4985 0
8232 4976 4986 0
8232 4976 4988 0
8232 4977 0
8232 4977 4985 0
8232 4977 4986 0
8232 4977 4988 0
c (((aux1212 + aux1215 + aux1216)<=1)=tv=SATLiteral(8233))
-8233 5015 0
-8233 5009 5014 0
-8233 5010 0
-8233 5012 0
-8233 5000 5014 0
-8233 5000 5009 0
-8233 5000 5010 0
-8233 5000 5012 0
-8233 5001 0
-8233 5001 5009 0
-8233 5001 5010 0
-8233 5001 5012 0
8233 -5001 -5009 -5014 0
8233 -5000 -5010 -5014 0
8233 -5000 -5009 -5015 0
c ((1<=(aux1212 + aux1215 + aux1216))=tv=SATLiteral(8234))
-8234 -5000 -5009 -5014 0
8234 5014 0
8234 5009 0
8234 5010 0
8234 5012 0
8234 5000 0
8234 5000 5009 0
8234 5000 5010 0
8234 5000 5012 0
8234 5001 0
8234 5001 5009 0
8234 5001 5010 0
8234 5001 5012 0
c (((aux1218 + aux1221 + aux1222)<=1)=tv=SATLiteral(8235))
-8235 5039 0
-8235 5033 5038 0
-8235 5034 0
-8235 5036 0
-8235 5024 5038 0
-8235 5024 5033 0
-8235 5024 5034 0
-8235 5024 5036 0
-8235 5025 0
-8235 5025 5033 0
-8235 5025 5034 0
-8235 5025 5036 0
8235 -5025 -5033 -5038 0
8235 -5024 -5034 -5038 0
8235 -5024 -5033 -5039 0
c ((1<=(aux1218 + aux1221 + aux1222))=tv=SATLiteral(8236))
-8236 -5024 -5033 -5038 0
8236 5038 0
8236 5033 0
8236 5034 0
8236 5036 0
8236 5024 0
8236 5024 5033 0
8236 5024 5034 0
8236 5024 5036 0
8236 5025 0
8236 5025 5033 0
8236 5025 5034 0
8236 5025 5036 0
c (((aux1224 + aux1227 + aux1228)<=1)=tv=SATLiteral(8237))
-8237 5063 0
-8237 5057 5062 0
-8237 5058 0
-8237 5060 0
-8237 5048 5062 0
-8237 5048 5057 0
-8237 5048 5058 0
-8237 5048 5060 0
-8237 5049 0
-8237 5049 5057 0
-8237 5049 5058 0
-8237 5049 5060 0
8237 -5049 -5057 -5062 0
8237 -5048 -5058 -5062 0
8237 -5048 -5057 -5063 0
c ((1<=(aux1224 + aux1227 + aux1228))=tv=SATLiteral(8238))
-8238 -5048 -5057 -5062 0
8238 5062 0
8238 5057 0
8238 5058 0
8238 5060 0
8238 5048 0
8238 5048 5057 0
8238 5048 5058 0
8238 5048 5060 0
8238 5049 0
8238 5049 5057 0
8238 5049 5058 0
8238 5049 5060 0
c (((aux1230 + aux1233 + aux1234)<=1)=tv=SATLiteral(8239))
-8239 5087 0
-8239 5081 5086 0
-8239 5082 0
-8239 5084 0
-8239 5072 5086 0
-8239 5072 5081 0
-8239 5072 5082 0
-8239 5072 5084 0
-8239 5073 0
-8239 5073 5081 0
-8239 5073 5082 0
-8239 5073 5084 0
8239 -5073 -5081 -5086 0
8239 -5072 -5082 -5086 0
8239 -5072 -5081 -5087 0
c ((1<=(aux1230 + aux1233 + aux1234))=tv=SATLiteral(8240))
-8240 -5072 -5081 -5086 0
8240 5086 0
8240 5081 0
8240 5082 0
8240 5084 0
8240 5072 0
8240 5072 5081 0
8240 5072 5082 0
8240 5072 5084 0
8240 5073 0
8240 5073 5081 0
8240 5073 5082 0
8240 5073 5084 0
c (((aux1236 + aux1239 + aux1240)<=1)=tv=SATLiteral(8241))
-8241 5111 0
-8241 5105 5110 0
-8241 5106 0
-8241 5108 0
-8241 5096 5110 0
-8241 5096 5105 0
-8241 5096 5106 0
-8241 5096 5108 0
-8241 5097 0
-8241 5097 5105 0
-8241 5097 5106 0
-8241 5097 5108 0
8241 -5097 -5105 -5110 0
8241 -5096 -5106 -5110 0
8241 -5096 -5105 -5111 0
c ((1<=(aux1236 + aux1239 + aux1240))=tv=SATLiteral(8242))
-8242 -5096 -5105 -5110 0
8242 5110 0
8242 5105 0
8242 5106 0
8242 5108 0
8242 5096 0
8242 5096 5105 0
8242 5096 5106 0
8242 5096 5108 0
8242 5097 0
8242 5097 5105 0
8242 5097 5106 0
8242 5097 5108 0
c (((aux1242 + aux1245 + aux1246)<=1)=tv=SATLiteral(8243))
-8243 5135 0
-8243 5129 5134 0
-8243 5130 0
-8243 5132 0
-8243 5120 5134 0
-8243 5120 5129 0
-8243 5120 5130 0
-8243 5120 5132 0
-8243 5121 0
-8243 5121 5129 0
-8243 5121 5130 0
-8243 5121 5132 0
8243 -5121 -5129 -5134 0
8243 -5120 -5130 -5134 0
8243 -5120 -5129 -5135 0
c ((1<=(aux1242 + aux1245 + aux1246))=tv=SATLiteral(8244))
-8244 -5120 -5129 -5134 0
8244 5134 0
8244 5129 0
8244 5130 0
8244 5132 0
8244 5120 0
8244 5120 5129 0
8244 5120 5130 0
8244 5120 5132 0
8244 5121 0
8244 5121 5129 0
8244 5121 5130 0
8244 5121 5132 0
c (((aux1248 + aux1251 + aux1252)<=1)=tv=SATLiteral(8245))
-8245 5159 0
-8245 5153 5158 0
-8245 5154 0
-8245 5156 0
-8245 5144 5158 0
-8245 5144 5153 0
-8245 5144 5154 0
-8245 5144 5156 0
-8245 5145 0
-8245 5145 5153 0
-8245 5145 5154 0
-8245 5145 5156 0
8245 -5145 -5153 -5158 0
8245 -5144 -5154 -5158 0
8245 -5144 -5153 -5159 0
c ((1<=(aux1248 + aux1251 + aux1252))=tv=SATLiteral(8246))
-8246 -5144 -5153 -5158 0
8246 5158 0
8246 5153 0
8246 5154 0
8246 5156 0
8246 5144 0
8246 5144 5153 0
8246 5144 5154 0
8246 5144 5156 0
8246 5145 0
8246 5145 5153 0
8246 5145 5154 0
8246 5145 5156 0
c (((aux1254 + aux1257 + aux1258)<=1)=tv=SATLiteral(8247))
-8247 5183 0
-8247 5177 5182 0
-8247 5178 0
-8247 5180 0
-8247 5168 5182 0
-8247 5168 5177 0
-8247 5168 5178 0
-8247 5168 5180 0
-8247 5169 0
-8247 5169 5177 0
-8247 5169 5178 0
-8247 5169 5180 0
8247 -5169 -5177 -5182 0
8247 -5168 -5178 -5182 0
8247 -5168 -5177 -5183 0
c ((1<=(aux1254 + aux1257 + aux1258))=tv=SATLiteral(8248))
-8248 -5168 -5177 -5182 0
8248 5182 0
8248 5177 0
8248 5178 0
8248 5180 0
8248 5168 0
8248 5168 5177 0
8248 5168 5178 0
8248 5168 5180 0
8248 5169 0
8248 5169 5177 0
8248 5169 5178 0
8248 5169 5180 0
c (((aux1260 + aux1263 + aux1264)<=1)=tv=SATLiteral(8249))
-8249 5207 0
-8249 5201 5206 0
-8249 5202 0
-8249 5204 0
-8249 5192 5206 0
-8249 5192 5201 0
-8249 5192 5202 0
-8249 5192 5204 0
-8249 5193 0
-8249 5193 5201 0
-8249 5193 5202 0
-8249 5193 5204 0
8249 -5193 -5201 -5206 0
8249 -5192 -5202 -5206 0
8249 -5192 -5201 -5207 0
c ((1<=(aux1260 + aux1263 + aux1264))=tv=SATLiteral(8250))
-8250 -5192 -5201 -5206 0
8250 5206 0
8250 5201 0
8250 5202 0
8250 5204 0
8250 5192 0
8250 5192 5201 0
8250 5192 5202 0
8250 5192 5204 0
8250 5193 0
8250 5193 5201 0
8250 5193 5202 0
8250 5193 5204 0
c (((aux1266 + aux1269 + aux1270)<=1)=tv=SATLiteral(8251))
-8251 5231 0
-8251 5225 5230 0
-8251 5226 0
-8251 5228 0
-8251 5216 5230 0
-8251 5216 5225 0
-8251 5216 5226 0
-8251 5216 5228 0
-8251 5217 0
-8251 5217 5225 0
-8251 5217 5226 0
-8251 5217 5228 0
8251 -5217 -5225 -5230 0
8251 -5216 -5226 -5230 0
8251 -5216 -5225 -5231 0
c ((1<=(aux1266 + aux1269 + aux1270))=tv=SATLiteral(8252))
-8252 -5216 -5225 -5230 0
8252 5230 0
8252 5225 0
8252 5226 0
8252 5228 0
8252 5216 0
8252 5216 5225 0
8252 5216 5226 0
8252 5216 5228 0
8252 5217 0
8252 5217 5225 0
8252 5217 5226 0
8252 5217 5228 0
c (((aux1272 + aux1275 + aux1276)<=1)=tv=SATLiteral(8253))
-8253 5255 0
-8253 5249 5254 0
-8253 5250 0
-8253 5252 0
-8253 5240 5254 0
-8253 5240 5249 0
-8253 5240 5250 0
-8253 5240 5252 0
-8253 5241 0
-8253 5241 5249 0
-8253 5241 5250 0
-8253 5241 5252 0
8253 -5241 -5249 -5254 0
8253 -5240 -5250 -5254 0
8253 -5240 -5249 -5255 0
c ((1<=(aux1272 + aux1275 + aux1276))=tv=SATLiteral(8254))
-8254 -5240 -5249 -5254 0
8254 5254 0
8254 5249 0
8254 5250 0
8254 5252 0
8254 5240 0
8254 5240 5249 0
8254 5240 5250 0
8254 5240 5252 0
8254 5241 0
8254 5241 5249 0
8254 5241 5250 0
8254 5241 5252 0
c (((aux1278 + aux1281 + aux1282)<=1)=tv=SATLiteral(8255))
-8255 5279 0
-8255 5273 5278 0
-8255 5274 0
-8255 5276 0
-8255 5264 5278 0
-8255 5264 5273 0
-8255 5264 5274 0
-8255 5264 5276 0
-8255 5265 0
-8255 5265 5273 0
-8255 5265 5274 0
-8255 5265 5276 0
8255 -5265 -5273 -5278 0
8255 -5264 -5274 -5278 0
8255 -5264 -5273 -5279 0
c ((1<=(aux1278 + aux1281 + aux1282))=tv=SATLiteral(8256))
-8256 -5264 -5273 -5278 0
8256 5278 0
8256 5273 0
8256 5274 0
8256 5276 0
8256 5264 0
8256 5264 5273 0
8256 5264 5274 0
8256 5264 5276 0
8256 5265 0
8256 5265 5273 0
8256 5265 5274 0
8256 5265 5276 0
c (((aux1284 + aux1287 + aux1288)<=1)=tv=SATLiteral(8257))
-8257 5303 0
-8257 5297 5302 0
-8257 5298 0
-8257 5300 0
-8257 5288 5302 0
-8257 5288 5297 0
-8257 5288 5298 0
-8257 5288 5300 0
-8257 5289 0
-8257 5289 5297 0
-8257 5289 5298 0
-8257 5289 5300 0
8257 -5289 -5297 -5302 0
8257 -5288 -5298 -5302 0
8257 -5288 -5297 -5303 0
c ((1<=(aux1284 + aux1287 + aux1288))=tv=SATLiteral(8258))
-8258 -5288 -5297 -5302 0
8258 5302 0
8258 5297 0
8258 5298 0
8258 5300 0
8258 5288 0
8258 5288 5297 0
8258 5288 5298 0
8258 5288 5300 0
8258 5289 0
8258 5289 5297 0
8258 5289 5298 0
8258 5289 5300 0
c (((aux1290 + aux1293 + aux1294)<=1)=tv=SATLiteral(8259))
-8259 5327 0
-8259 5321 5326 0
-8259 5322 0
-8259 5324 0
-8259 5312 5326 0
-8259 5312 5321 0
-8259 5312 5322 0
-8259 5312 5324 0
-8259 5313 0
-8259 5313 5321 0
-8259 5313 5322 0
-8259 5313 5324 0
8259 -5313 -5321 -5326 0
8259 -5312 -5322 -5326 0
8259 -5312 -5321 -5327 0
c ((1<=(aux1290 + aux1293 + aux1294))=tv=SATLiteral(8260))
-8260 -5312 -5321 -5326 0
8260 5326 0
8260 5321 0
8260 5322 0
8260 5324 0
8260 5312 0
8260 5312 5321 0
8260 5312 5322 0
8260 5312 5324 0
8260 5313 0
8260 5313 5321 0
8260 5313 5322 0
8260 5313 5324 0
c (((aux1296 + aux1299 + aux1300)<=1)=tv=SATLiteral(8261))
-8261 5351 0
-8261 5345 5350 0
-8261 5346 0
-8261 5348 0
-8261 5336 5350 0
-8261 5336 5345 0
-8261 5336 5346 0
-8261 5336 5348 0
-8261 5337 0
-8261 5337 5345 0
-8261 5337 5346 0
-8261 5337 5348 0
8261 -5337 -5345 -5350 0
8261 -5336 -5346 -5350 0
8261 -5336 -5345 -5351 0
c ((1<=(aux1296 + aux1299 + aux1300))=tv=SATLiteral(8262))
-8262 -5336 -5345 -5350 0
8262 5350 0
8262 5345 0
8262 5346 0
8262 5348 0
8262 5336 0
8262 5336 5345 0
8262 5336 5346 0
8262 5336 5348 0
8262 5337 0
8262 5337 5345 0
8262 5337 5346 0
8262 5337 5348 0
c (((aux1302 + aux1305 + aux1306)<=1)=tv=SATLiteral(8263))
-8263 5375 0
-8263 5369 5374 0
-8263 5370 0
-8263 5372 0
-8263 5360 5374 0
-8263 5360 5369 0
-8263 5360 5370 0
-8263 5360 5372 0
-8263 5361 0
-8263 5361 5369 0
-8263 5361 5370 0
-8263 5361 5372 0
8263 -5361 -5369 -5374 0
8263 -5360 -5370 -5374 0
8263 -5360 -5369 -5375 0
c ((1<=(aux1302 + aux1305 + aux1306))=tv=SATLiteral(8264))
-8264 -5360 -5369 -5374 0
8264 5374 0
8264 5369 0
8264 5370 0
8264 5372 0
8264 5360 0
8264 5360 5369 0
8264 5360 5370 0
8264 5360 5372 0
8264 5361 0
8264 5361 5369 0
8264 5361 5370 0
8264 5361 5372 0
c (((aux1308 + aux1311 + aux1312)<=1)=tv=SATLiteral(8265))
-8265 5399 0
-8265 5393 5398 0
-8265 5394 0
-8265 5396 0
-8265 5384 5398 0
-8265 5384 5393 0
-8265 5384 5394 0
-8265 5384 5396 0
-8265 5385 0
-8265 5385 5393 0
-8265 5385 5394 0
-8265 5385 5396 0
8265 -5385 -5393 -5398 0
8265 -5384 -5394 -5398 0
8265 -5384 -5393 -5399 0
c ((1<=(aux1308 + aux1311 + aux1312))=tv=SATLiteral(8266))
-8266 -5384 -5393 -5398 0
8266 5398 0
8266 5393 0
8266 5394 0
8266 5396 0
8266 5384 0
8266 5384 5393 0
8266 5384 5394 0
8266 5384 5396 0
8266 5385 0
8266 5385 5393 0
8266 5385 5394 0
8266 5385 5396 0
c (((aux1314 + aux1317 + aux1318)<=1)=tv=SATLiteral(8267))
-8267 5423 0
-8267 5417 5422 0
-8267 5418 0
-8267 5420 0
-8267 5408 5422 0
-8267 5408 5417 0
-8267 5408 5418 0
-8267 5408 5420 0
-8267 5409 0
-8267 5409 5417 0
-8267 5409 5418 0
-8267 5409 5420 0
8267 -5409 -5417 -5422 0
8267 -5408 -5418 -5422 0
8267 -5408 -5417 -5423 0
c ((1<=(aux1314 + aux1317 + aux1318))=tv=SATLiteral(8268))
-8268 -5408 -5417 -5422 0
8268 5422 0
8268 5417 0
8268 5418 0
8268 5420 0
8268 5408 0
8268 5408 5417 0
8268 5408 5418 0
8268 5408 5420 0
8268 5409 0
8268 5409 5417 0
8268 5409 5418 0
8268 5409 5420 0
c (((aux1320 + aux1323 + aux1324)<=1)=tv=SATLiteral(8269))
-8269 5447 0
-8269 5441 5446 0
-8269 5442 0
-8269 5444 0
-8269 5432 5446 0
-8269 5432 5441 0
-8269 5432 5442 0
-8269 5432 5444 0
-8269 5433 0
-8269 5433 5441 0
-8269 5433 5442 0
-8269 5433 5444 0
8269 -5433 -5441 -5446 0
8269 -5432 -5442 -5446 0
8269 -5432 -5441 -5447 0
c ((1<=(aux1320 + aux1323 + aux1324))=tv=SATLiteral(8270))
-8270 -5432 -5441 -5446 0
8270 5446 0
8270 5441 0
8270 5442 0
8270 5444 0
8270 5432 0
8270 5432 5441 0
8270 5432 5442 0
8270 5432 5444 0
8270 5433 0
8270 5433 5441 0
8270 5433 5442 0
8270 5433 5444 0
c (((aux1326 + aux1329 + aux1330)<=1)=tv=SATLiteral(8271))
-8271 5471 0
-8271 5465 5470 0
-8271 5466 0
-8271 5468 0
-8271 5456 5470 0
-8271 5456 5465 0
-8271 5456 5466 0
-8271 5456 5468 0
-8271 5457 0
-8271 5457 5465 0
-8271 5457 5466 0
-8271 5457 5468 0
8271 -5457 -5465 -5470 0
8271 -5456 -5466 -5470 0
8271 -5456 -5465 -5471 0
c ((1<=(aux1326 + aux1329 + aux1330))=tv=SATLiteral(8272))
-8272 -5456 -5465 -5470 0
8272 5470 0
8272 5465 0
8272 5466 0
8272 5468 0
8272 5456 0
8272 5456 5465 0
8272 5456 5466 0
8272 5456 5468 0
8272 5457 0
8272 5457 5465 0
8272 5457 5466 0
8272 5457 5468 0
c (((aux1332 + aux1335 + aux1336)<=1)=tv=SATLiteral(8273))
-8273 5495 0
-8273 5489 5494 0
-8273 5490 0
-8273 5492 0
-8273 5480 5494 0
-8273 5480 5489 0
-8273 5480 5490 0
-8273 5480 5492 0
-8273 5481 0
-8273 5481 5489 0
-8273 5481 5490 0
-8273 5481 5492 0
8273 -5481 -5489 -5494 0
8273 -5480 -5490 -5494 0
8273 -5480 -5489 -5495 0
c ((1<=(aux1332 + aux1335 + aux1336))=tv=SATLiteral(8274))
-8274 -5480 -5489 -5494 0
8274 5494 0
8274 5489 0
8274 5490 0
8274 5492 0
8274 5480 0
8274 5480 5489 0
8274 5480 5490 0
8274 5480 5492 0
8274 5481 0
8274 5481 5489 0
8274 5481 5490 0
8274 5481 5492 0
c (((aux1338 + aux1341 + aux1342)<=1)=tv=SATLiteral(8275))
-8275 5519 0
-8275 5513 5518 0
-8275 5514 0
-8275 5516 0
-8275 5504 5518 0
-8275 5504 5513 0
-8275 5504 5514 0
-8275 5504 5516 0
-8275 5505 0
-8275 5505 5513 0
-8275 5505 5514 0
-8275 5505 5516 0
8275 -5505 -5513 -5518 0
8275 -5504 -5514 -5518 0
8275 -5504 -5513 -5519 0
c ((1<=(aux1338 + aux1341 + aux1342))=tv=SATLiteral(8276))
-8276 -5504 -5513 -5518 0
8276 5518 0
8276 5513 0
8276 5514 0
8276 5516 0
8276 5504 0
8276 5504 5513 0
8276 5504 5514 0
8276 5504 5516 0
8276 5505 0
8276 5505 5513 0
8276 5505 5514 0
8276 5505 5516 0
c (((aux1344 + aux1347 + aux1348)<=1)=tv=SATLiteral(8277))
-8277 5543 0
-8277 5537 5542 0
-8277 5538 0
-8277 5540 0
-8277 5528 5542 0
-8277 5528 5537 0
-8277 5528 5538 0
-8277 5528 5540 0
-8277 5529 0
-8277 5529 5537 0
-8277 5529 5538 0
-8277 5529 5540 0
8277 -5529 -5537 -5542 0
8277 -5528 -5538 -5542 0
8277 -5528 -5537 -5543 0
c ((1<=(aux1344 + aux1347 + aux1348))=tv=SATLiteral(8278))
-8278 -5528 -5537 -5542 0
8278 5542 0
8278 5537 0
8278 5538 0
8278 5540 0
8278 5528 0
8278 5528 5537 0
8278 5528 5538 0
8278 5528 5540 0
8278 5529 0
8278 5529 5537 0
8278 5529 5538 0
8278 5529 5540 0
c (((aux1350 + aux1353 + aux1354)<=1)=tv=SATLiteral(8279))
-8279 5567 0
-8279 5561 5566 0
-8279 5562 0
-8279 5564 0
-8279 5552 5566 0
-8279 5552 5561 0
-8279 5552 5562 0
-8279 5552 5564 0
-8279 5553 0
-8279 5553 5561 0
-8279 5553 5562 0
-8279 5553 5564 0
8279 -5553 -5561 -5566 0
8279 -5552 -5562 -5566 0
8279 -5552 -5561 -5567 0
c ((1<=(aux1350 + aux1353 + aux1354))=tv=SATLiteral(8280))
-8280 -5552 -5561 -5566 0
8280 5566 0
8280 5561 0
8280 5562 0
8280 5564 0
8280 5552 0
8280 5552 5561 0
8280 5552 5562 0
8280 5552 5564 0
8280 5553 0
8280 5553 5561 0
8280 5553 5562 0
8280 5553 5564 0
c (((aux1356 + aux1359 + aux1360)<=1)=tv=SATLiteral(8281))
-8281 5591 0
-8281 5585 5590 0
-8281 5586 0
-8281 5588 0
-8281 5576 5590 0
-8281 5576 5585 0
-8281 5576 5586 0
-8281 5576 5588 0
-8281 5577 0
-8281 5577 5585 0
-8281 5577 5586 0
-8281 5577 5588 0
8281 -5577 -5585 -5590 0
8281 -5576 -5586 -5590 0
8281 -5576 -5585 -5591 0
c ((1<=(aux1356 + aux1359 + aux1360))=tv=SATLiteral(8282))
-8282 -5576 -5585 -5590 0
8282 5590 0
8282 5585 0
8282 5586 0
8282 5588 0
8282 5576 0
8282 5576 5585 0
8282 5576 5586 0
8282 5576 5588 0
8282 5577 0
8282 5577 5585 0
8282 5577 5586 0
8282 5577 5588 0
c (((aux1362 + aux1365 + aux1366)<=1)=tv=SATLiteral(8283))
-8283 5615 0
-8283 5609 5614 0
-8283 5610 0
-8283 5612 0
-8283 5600 5614 0
-8283 5600 5609 0
-8283 5600 5610 0
-8283 5600 5612 0
-8283 5601 0
-8283 5601 5609 0
-8283 5601 5610 0
-8283 5601 5612 0
8283 -5601 -5609 -5614 0
8283 -5600 -5610 -5614 0
8283 -5600 -5609 -5615 0
c ((1<=(aux1362 + aux1365 + aux1366))=tv=SATLiteral(8284))
-8284 -5600 -5609 -5614 0
8284 5614 0
8284 5609 0
8284 5610 0
8284 5612 0
8284 5600 0
8284 5600 5609 0
8284 5600 5610 0
8284 5600 5612 0
8284 5601 0
8284 5601 5609 0
8284 5601 5610 0
8284 5601 5612 0
c (((aux1368 + aux1371 + aux1372)<=1)=tv=SATLiteral(8285))
-8285 5639 0
-8285 5633 5638 0
-8285 5634 0
-8285 5636 0
-8285 5624 5638 0
-8285 5624 5633 0
-8285 5624 5634 0
-8285 5624 5636 0
-8285 5625 0
-8285 5625 5633 0
-8285 5625 5634 0
-8285 5625 5636 0
8285 -5625 -5633 -5638 0
8285 -5624 -5634 -5638 0
8285 -5624 -5633 -5639 0
c ((1<=(aux1368 + aux1371 + aux1372))=tv=SATLiteral(8286))
-8286 -5624 -5633 -5638 0
8286 5638 0
8286 5633 0
8286 5634 0
8286 5636 0
8286 5624 0
8286 5624 5633 0
8286 5624 5634 0
8286 5624 5636 0
8286 5625 0
8286 5625 5633 0
8286 5625 5634 0
8286 5625 5636 0
c (((aux1374 + aux1377 + aux1378)<=1)=tv=SATLiteral(8287))
-8287 5663 0
-8287 5657 5662 0
-8287 5658 0
-8287 5660 0
-8287 5648 5662 0
-8287 5648 5657 0
-8287 5648 5658 0
-8287 5648 5660 0
-8287 5649 0
-8287 5649 5657 0
-8287 5649 5658 0
-8287 5649 5660 0
8287 -5649 -5657 -5662 0
8287 -5648 -5658 -5662 0
8287 -5648 -5657 -5663 0
c ((1<=(aux1374 + aux1377 + aux1378))=tv=SATLiteral(8288))
-8288 -5648 -5657 -5662 0
8288 5662 0
8288 5657 0
8288 5658 0
8288 5660 0
8288 5648 0
8288 5648 5657 0
8288 5648 5658 0
8288 5648 5660 0
8288 5649 0
8288 5649 5657 0
8288 5649 5658 0
8288 5649 5660 0
c (((aux1380 + aux1383 + aux1384)<=1)=tv=SATLiteral(8289))
-8289 5687 0
-8289 5681 5686 0
-8289 5682 0
-8289 5684 0
-8289 5672 5686 0
-8289 5672 5681 0
-8289 5672 5682 0
-8289 5672 5684 0
-8289 5673 0
-8289 5673 5681 0
-8289 5673 5682 0
-8289 5673 5684 0
8289 -5673 -5681 -5686 0
8289 -5672 -5682 -5686 0
8289 -5672 -5681 -5687 0
c ((1<=(aux1380 + aux1383 + aux1384))=tv=SATLiteral(8290))
-8290 -5672 -5681 -5686 0
8290 5686 0
8290 5681 0
8290 5682 0
8290 5684 0
8290 5672 0
8290 5672 5681 0
8290 5672 5682 0
8290 5672 5684 0
8290 5673 0
8290 5673 5681 0
8290 5673 5682 0
8290 5673 5684 0
c (((aux1386 + aux1389 + aux1390)<=1)=tv=SATLiteral(8291))
-8291 5711 0
-8291 5705 5710 0
-8291 5706 0
-8291 5708 0
-8291 5696 5710 0
-8291 5696 5705 0
-8291 5696 5706 0
-8291 5696 5708 0
-8291 5697 0
-8291 5697 5705 0
-8291 5697 5706 0
-8291 5697 5708 0
8291 -5697 -5705 -5710 0
8291 -5696 -5706 -5710 0
8291 -5696 -5705 -5711 0
c ((1<=(aux1386 + aux1389 + aux1390))=tv=SATLiteral(8292))
-8292 -5696 -5705 -5710 0
8292 5710 0
8292 5705 0
8292 5706 0
8292 5708 0
8292 5696 0
8292 5696 5705 0
8292 5696 5706 0
8292 5696 5708 0
8292 5697 0
8292 5697 5705 0
8292 5697 5706 0
8292 5697 5708 0
c (((aux1392 + aux1395 + aux1396)<=1)=tv=SATLiteral(8293))
-8293 5735 0
-8293 5729 5734 0
-8293 5730 0
-8293 5732 0
-8293 5720 5734 0
-8293 5720 5729 0
-8293 5720 5730 0
-8293 5720 5732 0
-8293 5721 0
-8293 5721 5729 0
-8293 5721 5730 0
-8293 5721 5732 0
8293 -5721 -5729 -5734 0
8293 -5720 -5730 -5734 0
8293 -5720 -5729 -5735 0
c ((1<=(aux1392 + aux1395 + aux1396))=tv=SATLiteral(8294))
-8294 -5720 -5729 -5734 0
8294 5734 0
8294 5729 0
8294 5730 0
8294 5732 0
8294 5720 0
8294 5720 5729 0
8294 5720 5730 0
8294 5720 5732 0
8294 5721 0
8294 5721 5729 0
8294 5721 5730 0
8294 5721 5732 0
c (((aux1398 + aux1401 + aux1402)<=1)=tv=SATLiteral(8295))
-8295 5759 0
-8295 5753 5758 0
-8295 5754 0
-8295 5756 0
-8295 5744 5758 0
-8295 5744 5753 0
-8295 5744 5754 0
-8295 5744 5756 0
-8295 5745 0
-8295 5745 5753 0
-8295 5745 5754 0
-8295 5745 5756 0
8295 -5745 -5753 -5758 0
8295 -5744 -5754 -5758 0
8295 -5744 -5753 -5759 0
c ((1<=(aux1398 + aux1401 + aux1402))=tv=SATLiteral(8296))
-8296 -5744 -5753 -5758 0
8296 5758 0
8296 5753 0
8296 5754 0
8296 5756 0
8296 5744 0
8296 5744 5753 0
8296 5744 5754 0
8296 5744 5756 0
8296 5745 0
8296 5745 5753 0
8296 5745 5754 0
8296 5745 5756 0
c (((aux1404 + aux1407 + aux1408)<=1)=tv=SATLiteral(8297))
-8297 5783 0
-8297 5777 5782 0
-8297 5778 0
-8297 5780 0
-8297 5768 5782 0
-8297 5768 5777 0
-8297 5768 5778 0
-8297 5768 5780 0
-8297 5769 0
-8297 5769 5777 0
-8297 5769 5778 0
-8297 5769 5780 0
8297 -5769 -5777 -5782 0
8297 -5768 -5778 -5782 0
8297 -5768 -5777 -5783 0
c ((1<=(aux1404 + aux1407 + aux1408))=tv=SATLiteral(8298))
-8298 -5768 -5777 -5782 0
8298 5782 0
8298 5777 0
8298 5778 0
8298 5780 0
8298 5768 0
8298 5768 5777 0
8298 5768 5778 0
8298 5768 5780 0
8298 5769 0
8298 5769 5777 0
8298 5769 5778 0
8298 5769 5780 0
c (((aux1410 + aux1413 + aux1414)<=1)=tv=SATLiteral(8299))
-8299 5807 0
-8299 5801 5806 0
-8299 5802 0
-8299 5804 0
-8299 5792 5806 0
-8299 5792 5801 0
-8299 5792 5802 0
-8299 5792 5804 0
-8299 5793 0
-8299 5793 5801 0
-8299 5793 5802 0
-8299 5793 5804 0
8299 -5793 -5801 -5806 0
8299 -5792 -5802 -5806 0
8299 -5792 -5801 -5807 0
c ((1<=(aux1410 + aux1413 + aux1414))=tv=SATLiteral(8300))
-8300 -5792 -5801 -5806 0
8300 5806 0
8300 5801 0
8300 5802 0
8300 5804 0
8300 5792 0
8300 5792 5801 0
8300 5792 5802 0
8300 5792 5804 0
8300 5793 0
8300 5793 5801 0
8300 5793 5802 0
8300 5793 5804 0
c (((aux1416 + aux1419 + aux1420)<=1)=tv=SATLiteral(8301))
-8301 5831 0
-8301 5825 5830 0
-8301 5826 0
-8301 5828 0
-8301 5816 5830 0
-8301 5816 5825 0
-8301 5816 5826 0
-8301 5816 5828 0
-8301 5817 0
-8301 5817 5825 0
-8301 5817 5826 0
-8301 5817 5828 0
8301 -5817 -5825 -5830 0
8301 -5816 -5826 -5830 0
8301 -5816 -5825 -5831 0
c ((1<=(aux1416 + aux1419 + aux1420))=tv=SATLiteral(8302))
-8302 -5816 -5825 -5830 0
8302 5830 0
8302 5825 0
8302 5826 0
8302 5828 0
8302 5816 0
8302 5816 5825 0
8302 5816 5826 0
8302 5816 5828 0
8302 5817 0
8302 5817 5825 0
8302 5817 5826 0
8302 5817 5828 0
c (((aux1422 + aux1425 + aux1426)<=1)=tv=SATLiteral(8303))
-8303 5855 0
-8303 5849 5854 0
-8303 5850 0
-8303 5852 0
-8303 5840 5854 0
-8303 5840 5849 0
-8303 5840 5850 0
-8303 5840 5852 0
-8303 5841 0
-8303 5841 5849 0
-8303 5841 5850 0
-8303 5841 5852 0
8303 -5841 -5849 -5854 0
8303 -5840 -5850 -5854 0
8303 -5840 -5849 -5855 0
c ((1<=(aux1422 + aux1425 + aux1426))=tv=SATLiteral(8304))
-8304 -5840 -5849 -5854 0
8304 5854 0
8304 5849 0
8304 5850 0
8304 5852 0
8304 5840 0
8304 5840 5849 0
8304 5840 5850 0
8304 5840 5852 0
8304 5841 0
8304 5841 5849 0
8304 5841 5850 0
8304 5841 5852 0
c (((aux1428 + aux1431 + aux1432)<=1)=tv=SATLiteral(8305))
-8305 5879 0
-8305 5873 5878 0
-8305 5874 0
-8305 5876 0
-8305 5864 5878 0
-8305 5864 5873 0
-8305 5864 5874 0
-8305 5864 5876 0
-8305 5865 0
-8305 5865 5873 0
-8305 5865 5874 0
-8305 5865 5876 0
8305 -5865 -5873 -5878 0
8305 -5864 -5874 -5878 0
8305 -5864 -5873 -5879 0
c ((1<=(aux1428 + aux1431 + aux1432))=tv=SATLiteral(8306))
-8306 -5864 -5873 -5878 0
8306 5878 0
8306 5873 0
8306 5874 0
8306 5876 0
8306 5864 0
8306 5864 5873 0
8306 5864 5874 0
8306 5864 5876 0
8306 5865 0
8306 5865 5873 0
8306 5865 5874 0
8306 5865 5876 0
c (((aux1434 + aux1437 + aux1438)<=1)=tv=SATLiteral(8307))
-8307 5903 0
-8307 5897 5902 0
-8307 5898 0
-8307 5900 0
-8307 5888 5902 0
-8307 5888 5897 0
-8307 5888 5898 0
-8307 5888 5900 0
-8307 5889 0
-8307 5889 5897 0
-8307 5889 5898 0
-8307 5889 5900 0
8307 -5889 -5897 -5902 0
8307 -5888 -5898 -5902 0
8307 -5888 -5897 -5903 0
c ((1<=(aux1434 + aux1437 + aux1438))=tv=SATLiteral(8308))
-8308 -5888 -5897 -5902 0
8308 5902 0
8308 5897 0
8308 5898 0
8308 5900 0
8308 5888 0
8308 5888 5897 0
8308 5888 5898 0
8308 5888 5900 0
8308 5889 0
8308 5889 5897 0
8308 5889 5898 0
8308 5889 5900 0
c (((aux1440 + aux1443 + aux1444)<=1)=tv=SATLiteral(8309))
-8309 5927 0
-8309 5921 5926 0
-8309 5922 0
-8309 5924 0
-8309 5912 5926 0
-8309 5912 5921 0
-8309 5912 5922 0
-8309 5912 5924 0
-8309 5913 0
-8309 5913 5921 0
-8309 5913 5922 0
-8309 5913 5924 0
8309 -5913 -5921 -5926 0
8309 -5912 -5922 -5926 0
8309 -5912 -5921 -5927 0
c ((1<=(aux1440 + aux1443 + aux1444))=tv=SATLiteral(8310))
-8310 -5912 -5921 -5926 0
8310 5926 0
8310 5921 0
8310 5922 0
8310 5924 0
8310 5912 0
8310 5912 5921 0
8310 5912 5922 0
8310 5912 5924 0
8310 5913 0
8310 5913 5921 0
8310 5913 5922 0
8310 5913 5924 0
c (((aux1446 + aux1449 + aux1450)<=1)=tv=SATLiteral(8311))
-8311 5951 0
-8311 5945 5950 0
-8311 5946 0
-8311 5948 0
-8311 5936 5950 0
-8311 5936 5945 0
-8311 5936 5946 0
-8311 5936 5948 0
-8311 5937 0
-8311 5937 5945 0
-8311 5937 5946 0
-8311 5937 5948 0
8311 -5937 -5945 -5950 0
8311 -5936 -5946 -5950 0
8311 -5936 -5945 -5951 0
c ((1<=(aux1446 + aux1449 + aux1450))=tv=SATLiteral(8312))
-8312 -5936 -5945 -5950 0
8312 5950 0
8312 5945 0
8312 5946 0
8312 5948 0
8312 5936 0
8312 5936 5945 0
8312 5936 5946 0
8312 5936 5948 0
8312 5937 0
8312 5937 5945 0
8312 5937 5946 0
8312 5937 5948 0
c (((aux1452 + aux1455 + aux1456)<=1)=tv=SATLiteral(8313))
-8313 5975 0
-8313 5969 5974 0
-8313 5970 0
-8313 5972 0
-8313 5960 5974 0
-8313 5960 5969 0
-8313 5960 5970 0
-8313 5960 5972 0
-8313 5961 0
-8313 5961 5969 0
-8313 5961 5970 0
-8313 5961 5972 0
8313 -5961 -5969 -5974 0
8313 -5960 -5970 -5974 0
8313 -5960 -5969 -5975 0
c ((1<=(aux1452 + aux1455 + aux1456))=tv=SATLiteral(8314))
-8314 -5960 -5969 -5974 0
8314 5974 0
8314 5969 0
8314 5970 0
8314 5972 0
8314 5960 0
8314 5960 5969 0
8314 5960 5970 0
8314 5960 5972 0
8314 5961 0
8314 5961 5969 0
8314 5961 5970 0
8314 5961 5972 0
c (((aux1458 + aux1461 + aux1462)<=1)=tv=SATLiteral(8315))
-8315 5999 0
-8315 5993 5998 0
-8315 5994 0
-8315 5996 0
-8315 5984 5998 0
-8315 5984 5993 0
-8315 5984 5994 0
-8315 5984 5996 0
-8315 5985 0
-8315 5985 5993 0
-8315 5985 5994 0
-8315 5985 5996 0
8315 -5985 -5993 -5998 0
8315 -5984 -5994 -5998 0
8315 -5984 -5993 -5999 0
c ((1<=(aux1458 + aux1461 + aux1462))=tv=SATLiteral(8316))
-8316 -5984 -5993 -5998 0
8316 5998 0
8316 5993 0
8316 5994 0
8316 5996 0
8316 5984 0
8316 5984 5993 0
8316 5984 5994 0
8316 5984 5996 0
8316 5985 0
8316 5985 5993 0
8316 5985 5994 0
8316 5985 5996 0
c (((aux1464 + aux1467 + aux1468)<=1)=tv=SATLiteral(8317))
-8317 6023 0
-8317 6017 6022 0
-8317 6018 0
-8317 6020 0
-8317 6008 6022 0
-8317 6008 6017 0
-8317 6008 6018 0
-8317 6008 6020 0
-8317 6009 0
-8317 6009 6017 0
-8317 6009 6018 0
-8317 6009 6020 0
8317 -6009 -6017 -6022 0
8317 -6008 -6018 -6022 0
8317 -6008 -6017 -6023 0
c ((1<=(aux1464 + aux1467 + aux1468))=tv=SATLiteral(8318))
-8318 -6008 -6017 -6022 0
8318 6022 0
8318 6017 0
8318 6018 0
8318 6020 0
8318 6008 0
8318 6008 6017 0
8318 6008 6018 0
8318 6008 6020 0
8318 6009 0
8318 6009 6017 0
8318 6009 6018 0
8318 6009 6020 0
c (((aux1470 + aux1473 + aux1474)<=1)=tv=SATLiteral(8319))
-8319 6047 0
-8319 6041 6046 0
-8319 6042 0
-8319 6044 0
-8319 6032 6046 0
-8319 6032 6041 0
-8319 6032 6042 0
-8319 6032 6044 0
-8319 6033 0
-8319 6033 6041 0
-8319 6033 6042 0
-8319 6033 6044 0
8319 -6033 -6041 -6046 0
8319 -6032 -6042 -6046 0
8319 -6032 -6041 -6047 0
c ((1<=(aux1470 + aux1473 + aux1474))=tv=SATLiteral(8320))
-8320 -6032 -6041 -6046 0
8320 6046 0
8320 6041 0
8320 6042 0
8320 6044 0
8320 6032 0
8320 6032 6041 0
8320 6032 6042 0
8320 6032 6044 0
8320 6033 0
8320 6033 6041 0
8320 6033 6042 0
8320 6033 6044 0
c (((aux1476 + aux1479 + aux1480)<=1)=tv=SATLiteral(8321))
-8321 6071 0
-8321 6065 6070 0
-8321 6066 0
-8321 6068 0
-8321 6056 6070 0
-8321 6056 6065 0
-8321 6056 6066 0
-8321 6056 6068 0
-8321 6057 0
-8321 6057 6065 0
-8321 6057 6066 0
-8321 6057 6068 0
8321 -6057 -6065 -6070 0
8321 -6056 -6066 -6070 0
8321 -6056 -6065 -6071 0
c ((1<=(aux1476 + aux1479 + aux1480))=tv=SATLiteral(8322))
-8322 -6056 -6065 -6070 0
8322 6070 0
8322 6065 0
8322 6066 0
8322 6068 0
8322 6056 0
8322 6056 6065 0
8322 6056 6066 0
8322 6056 6068 0
8322 6057 0
8322 6057 6065 0
8322 6057 6066 0
8322 6057 6068 0
c (((aux1482 + aux1485 + aux1486)<=1)=tv=SATLiteral(8323))
-8323 6095 0
-8323 6089 6094 0
-8323 6090 0
-8323 6092 0
-8323 6080 6094 0
-8323 6080 6089 0
-8323 6080 6090 0
-8323 6080 6092 0
-8323 6081 0
-8323 6081 6089 0
-8323 6081 6090 0
-8323 6081 6092 0
8323 -6081 -6089 -6094 0
8323 -6080 -6090 -6094 0
8323 -6080 -6089 -6095 0
c ((1<=(aux1482 + aux1485 + aux1486))=tv=SATLiteral(8324))
-8324 -6080 -6089 -6094 0
8324 6094 0
8324 6089 0
8324 6090 0
8324 6092 0
8324 6080 0
8324 6080 6089 0
8324 6080 6090 0
8324 6080 6092 0
8324 6081 0
8324 6081 6089 0
8324 6081 6090 0
8324 6081 6092 0
c (((aux1488 + aux1491 + aux1492)<=1)=tv=SATLiteral(8325))
-8325 6119 0
-8325 6113 6118 0
-8325 6114 0
-8325 6116 0
-8325 6104 6118 0
-8325 6104 6113 0
-8325 6104 6114 0
-8325 6104 6116 0
-8325 6105 0
-8325 6105 6113 0
-8325 6105 6114 0
-8325 6105 6116 0
8325 -6105 -6113 -6118 0
8325 -6104 -6114 -6118 0
8325 -6104 -6113 -6119 0
c ((1<=(aux1488 + aux1491 + aux1492))=tv=SATLiteral(8326))
-8326 -6104 -6113 -6118 0
8326 6118 0
8326 6113 0
8326 6114 0
8326 6116 0
8326 6104 0
8326 6104 6113 0
8326 6104 6114 0
8326 6104 6116 0
8326 6105 0
8326 6105 6113 0
8326 6105 6114 0
8326 6105 6116 0
c (((aux1494 + aux1497 + aux1498)<=1)=tv=SATLiteral(8327))
-8327 6143 0
-8327 6137 6142 0
-8327 6138 0
-8327 6140 0
-8327 6128 6142 0
-8327 6128 6137 0
-8327 6128 6138 0
-8327 6128 6140 0
-8327 6129 0
-8327 6129 6137 0
-8327 6129 6138 0
-8327 6129 6140 0
8327 -6129 -6137 -6142 0
8327 -6128 -6138 -6142 0
8327 -6128 -6137 -6143 0
c ((1<=(aux1494 + aux1497 + aux1498))=tv=SATLiteral(8328))
-8328 -6128 -6137 -6142 0
8328 6142 0
8328 6137 0
8328 6138 0
8328 6140 0
8328 6128 0
8328 6128 6137 0
8328 6128 6138 0
8328 6128 6140 0
8328 6129 0
8328 6129 6137 0
8328 6129 6138 0
8328 6129 6140 0
c (((aux1500 + aux1503 + aux1504)<=1)=tv=SATLiteral(8329))
-8329 6167 0
-8329 6161 6166 0
-8329 6162 0
-8329 6164 0
-8329 6152 6166 0
-8329 6152 6161 0
-8329 6152 6162 0
-8329 6152 6164 0
-8329 6153 0
-8329 6153 6161 0
-8329 6153 6162 0
-8329 6153 6164 0
8329 -6153 -6161 -6166 0
8329 -6152 -6162 -6166 0
8329 -6152 -6161 -6167 0
c ((1<=(aux1500 + aux1503 + aux1504))=tv=SATLiteral(8330))
-8330 -6152 -6161 -6166 0
8330 6166 0
8330 6161 0
8330 6162 0
8330 6164 0
8330 6152 0
8330 6152 6161 0
8330 6152 6162 0
8330 6152 6164 0
8330 6153 0
8330 6153 6161 0
8330 6153 6162 0
8330 6153 6164 0
c (((aux1506 + aux1509 + aux1510)<=1)=tv=SATLiteral(8331))
-8331 6191 0
-8331 6185 6190 0
-8331 6186 0
-8331 6188 0
-8331 6176 6190 0
-8331 6176 6185 0
-8331 6176 6186 0
-8331 6176 6188 0
-8331 6177 0
-8331 6177 6185 0
-8331 6177 6186 0
-8331 6177 6188 0
8331 -6177 -6185 -6190 0
8331 -6176 -6186 -6190 0
8331 -6176 -6185 -6191 0
c ((1<=(aux1506 + aux1509 + aux1510))=tv=SATLiteral(8332))
-8332 -6176 -6185 -6190 0
8332 6190 0
8332 6185 0
8332 6186 0
8332 6188 0
8332 6176 0
8332 6176 6185 0
8332 6176 6186 0
8332 6176 6188 0
8332 6177 0
8332 6177 6185 0
8332 6177 6186 0
8332 6177 6188 0
c (((aux1512 + aux1515 + aux1516)<=1)=tv=SATLiteral(8333))
-8333 6215 0
-8333 6209 6214 0
-8333 6210 0
-8333 6212 0
-8333 6200 6214 0
-8333 6200 6209 0
-8333 6200 6210 0
-8333 6200 6212 0
-8333 6201 0
-8333 6201 6209 0
-8333 6201 6210 0
-8333 6201 6212 0
8333 -6201 -6209 -6214 0
8333 -6200 -6210 -6214 0
8333 -6200 -6209 -6215 0
c ((1<=(aux1512 + aux1515 + aux1516))=tv=SATLiteral(8334))
-8334 -6200 -6209 -6214 0
8334 6214 0
8334 6209 0
8334 6210 0
8334 6212 0
8334 6200 0
8334 6200 6209 0
8334 6200 6210 0
8334 6200 6212 0
8334 6201 0
8334 6201 6209 0
8334 6201 6210 0
8334 6201 6212 0
c (((aux1518 + aux1521 + aux1522)<=1)=tv=SATLiteral(8335))
-8335 6239 0
-8335 6233 6238 0
-8335 6234 0
-8335 6236 0
-8335 6224 6238 0
-8335 6224 6233 0
-8335 6224 6234 0
-8335 6224 6236 0
-8335 6225 0
-8335 6225 6233 0
-8335 6225 6234 0
-8335 6225 6236 0
8335 -6225 -6233 -6238 0
8335 -6224 -6234 -6238 0
8335 -6224 -6233 -6239 0
c ((1<=(aux1518 + aux1521 + aux1522))=tv=SATLiteral(8336))
-8336 -6224 -6233 -6238 0
8336 6238 0
8336 6233 0
8336 6234 0
8336 6236 0
8336 6224 0
8336 6224 6233 0
8336 6224 6234 0
8336 6224 6236 0
8336 6225 0
8336 6225 6233 0
8336 6225 6234 0
8336 6225 6236 0
c (((aux1524 + aux1527 + aux1528)<=1)=tv=SATLiteral(8337))
-8337 6263 0
-8337 6257 6262 0
-8337 6258 0
-8337 6260 0
-8337 6248 6262 0
-8337 6248 6257 0
-8337 6248 6258 0
-8337 6248 6260 0
-8337 6249 0
-8337 6249 6257 0
-8337 6249 6258 0
-8337 6249 6260 0
8337 -6249 -6257 -6262 0
8337 -6248 -6258 -6262 0
8337 -6248 -6257 -6263 0
c ((1<=(aux1524 + aux1527 + aux1528))=tv=SATLiteral(8338))
-8338 -6248 -6257 -6262 0
8338 6262 0
8338 6257 0
8338 6258 0
8338 6260 0
8338 6248 0
8338 6248 6257 0
8338 6248 6258 0
8338 6248 6260 0
8338 6249 0
8338 6249 6257 0
8338 6249 6258 0
8338 6249 6260 0
c (((aux1530 + aux1533 + aux1534)<=1)=tv=SATLiteral(8339))
-8339 6287 0
-8339 6281 6286 0
-8339 6282 0
-8339 6284 0
-8339 6272 6286 0
-8339 6272 6281 0
-8339 6272 6282 0
-8339 6272 6284 0
-8339 6273 0
-8339 6273 6281 0
-8339 6273 6282 0
-8339 6273 6284 0
8339 -6273 -6281 -6286 0
8339 -6272 -6282 -6286 0
8339 -6272 -6281 -6287 0
c ((1<=(aux1530 + aux1533 + aux1534))=tv=SATLiteral(8340))
-8340 -6272 -6281 -6286 0
8340 6286 0
8340 6281 0
8340 6282 0
8340 6284 0
8340 6272 0
8340 6272 6281 0
8340 6272 6282 0
8340 6272 6284 0
8340 6273 0
8340 6273 6281 0
8340 6273 6282 0
8340 6273 6284 0
c (((aux1536 + aux1539 + aux1540)<=1)=tv=SATLiteral(8341))
-8341 6311 0
-8341 6305 6310 0
-8341 6306 0
-8341 6308 0
-8341 6296 6310 0
-8341 6296 6305 0
-8341 6296 6306 0
-8341 6296 6308 0
-8341 6297 0
-8341 6297 6305 0
-8341 6297 6306 0
-8341 6297 6308 0
8341 -6297 -6305 -6310 0
8341 -6296 -6306 -6310 0
8341 -6296 -6305 -6311 0
c ((1<=(aux1536 + aux1539 + aux1540))=tv=SATLiteral(8342))
-8342 -6296 -6305 -6310 0
8342 6310 0
8342 6305 0
8342 6306 0
8342 6308 0
8342 6296 0
8342 6296 6305 0
8342 6296 6306 0
8342 6296 6308 0
8342 6297 0
8342 6297 6305 0
8342 6297 6306 0
8342 6297 6308 0
c (((aux1542 + aux1545 + aux1546)<=1)=tv=SATLiteral(8343))
-8343 6335 0
-8343 6329 6334 0
-8343 6330 0
-8343 6332 0
-8343 6320 6334 0
-8343 6320 6329 0
-8343 6320 6330 0
-8343 6320 6332 0
-8343 6321 0
-8343 6321 6329 0
-8343 6321 6330 0
-8343 6321 6332 0
8343 -6321 -6329 -6334 0
8343 -6320 -6330 -6334 0
8343 -6320 -6329 -6335 0
c ((1<=(aux1542 + aux1545 + aux1546))=tv=SATLiteral(8344))
-8344 -6320 -6329 -6334 0
8344 6334 0
8344 6329 0
8344 6330 0
8344 6332 0
8344 6320 0
8344 6320 6329 0
8344 6320 6330 0
8344 6320 6332 0
8344 6321 0
8344 6321 6329 0
8344 6321 6330 0
8344 6321 6332 0
c (((aux1548 + aux1551 + aux1552)<=1)=tv=SATLiteral(8345))
-8345 6359 0
-8345 6353 6358 0
-8345 6354 0
-8345 6356 0
-8345 6344 6358 0
-8345 6344 6353 0
-8345 6344 6354 0
-8345 6344 6356 0
-8345 6345 0
-8345 6345 6353 0
-8345 6345 6354 0
-8345 6345 6356 0
8345 -6345 -6353 -6358 0
8345 -6344 -6354 -6358 0
8345 -6344 -6353 -6359 0
c ((1<=(aux1548 + aux1551 + aux1552))=tv=SATLiteral(8346))
-8346 -6344 -6353 -6358 0
8346 6358 0
8346 6353 0
8346 6354 0
8346 6356 0
8346 6344 0
8346 6344 6353 0
8346 6344 6354 0
8346 6344 6356 0
8346 6345 0
8346 6345 6353 0
8346 6345 6354 0
8346 6345 6356 0
c (((aux1554 + aux1557 + aux1558)<=1)=tv=SATLiteral(8347))
-8347 6383 0
-8347 6377 6382 0
-8347 6378 0
-8347 6380 0
-8347 6368 6382 0
-8347 6368 6377 0
-8347 6368 6378 0
-8347 6368 6380 0
-8347 6369 0
-8347 6369 6377 0
-8347 6369 6378 0
-8347 6369 6380 0
8347 -6369 -6377 -6382 0
8347 -6368 -6378 -6382 0
8347 -6368 -6377 -6383 0
c ((1<=(aux1554 + aux1557 + aux1558))=tv=SATLiteral(8348))
-8348 -6368 -6377 -6382 0
8348 6382 0
8348 6377 0
8348 6378 0
8348 6380 0
8348 6368 0
8348 6368 6377 0
8348 6368 6378 0
8348 6368 6380 0
8348 6369 0
8348 6369 6377 0
8348 6369 6378 0
8348 6369 6380 0
c (((aux1560 + aux1563 + aux1564)<=1)=tv=SATLiteral(8349))
-8349 6407 0
-8349 6401 6406 0
-8349 6402 0
-8349 6404 0
-8349 6392 6406 0
-8349 6392 6401 0
-8349 6392 6402 0
-8349 6392 6404 0
-8349 6393 0
-8349 6393 6401 0
-8349 6393 6402 0
-8349 6393 6404 0
8349 -6393 -6401 -6406 0
8349 -6392 -6402 -6406 0
8349 -6392 -6401 -6407 0
c ((1<=(aux1560 + aux1563 + aux1564))=tv=SATLiteral(8350))
-8350 -6392 -6401 -6406 0
8350 6406 0
8350 6401 0
8350 6402 0
8350 6404 0
8350 6392 0
8350 6392 6401 0
8350 6392 6402 0
8350 6392 6404 0
8350 6393 0
8350 6393 6401 0
8350 6393 6402 0
8350 6393 6404 0
c (((aux1566 + aux1569 + aux1570)<=1)=tv=SATLiteral(8351))
-8351 6431 0
-8351 6425 6430 0
-8351 6426 0
-8351 6428 0
-8351 6416 6430 0
-8351 6416 6425 0
-8351 6416 6426 0
-8351 6416 6428 0
-8351 6417 0
-8351 6417 6425 0
-8351 6417 6426 0
-8351 6417 6428 0
8351 -6417 -6425 -6430 0
8351 -6416 -6426 -6430 0
8351 -6416 -6425 -6431 0
c ((1<=(aux1566 + aux1569 + aux1570))=tv=SATLiteral(8352))
-8352 -6416 -6425 -6430 0
8352 6430 0
8352 6425 0
8352 6426 0
8352 6428 0
8352 6416 0
8352 6416 6425 0
8352 6416 6426 0
8352 6416 6428 0
8352 6417 0
8352 6417 6425 0
8352 6417 6426 0
8352 6417 6428 0
c (((aux1572 + aux1575 + aux1576)<=1)=tv=SATLiteral(8353))
-8353 6455 0
-8353 6449 6454 0
-8353 6450 0
-8353 6452 0
-8353 6440 6454 0
-8353 6440 6449 0
-8353 6440 6450 0
-8353 6440 6452 0
-8353 6441 0
-8353 6441 6449 0
-8353 6441 6450 0
-8353 6441 6452 0
8353 -6441 -6449 -6454 0
8353 -6440 -6450 -6454 0
8353 -6440 -6449 -6455 0
c ((1<=(aux1572 + aux1575 + aux1576))=tv=SATLiteral(8354))
-8354 -6440 -6449 -6454 0
8354 6454 0
8354 6449 0
8354 6450 0
8354 6452 0
8354 6440 0
8354 6440 6449 0
8354 6440 6450 0
8354 6440 6452 0
8354 6441 0
8354 6441 6449 0
8354 6441 6450 0
8354 6441 6452 0
c (((aux1578 + aux1581 + aux1582)<=1)=tv=SATLiteral(8355))
-8355 6479 0
-8355 6473 6478 0
-8355 6474 0
-8355 6476 0
-8355 6464 6478 0
-8355 6464 6473 0
-8355 6464 6474 0
-8355 6464 6476 0
-8355 6465 0
-8355 6465 6473 0
-8355 6465 6474 0
-8355 6465 6476 0
8355 -6465 -6473 -6478 0
8355 -6464 -6474 -6478 0
8355 -6464 -6473 -6479 0
c ((1<=(aux1578 + aux1581 + aux1582))=tv=SATLiteral(8356))
-8356 -6464 -6473 -6478 0
8356 6478 0
8356 6473 0
8356 6474 0
8356 6476 0
8356 6464 0
8356 6464 6473 0
8356 6464 6474 0
8356 6464 6476 0
8356 6465 0
8356 6465 6473 0
8356 6465 6474 0
8356 6465 6476 0
c (((aux1584 + aux1587 + aux1588)<=1)=tv=SATLiteral(8357))
-8357 6503 0
-8357 6497 6502 0
-8357 6498 0
-8357 6500 0
-8357 6488 6502 0
-8357 6488 6497 0
-8357 6488 6498 0
-8357 6488 6500 0
-8357 6489 0
-8357 6489 6497 0
-8357 6489 6498 0
-8357 6489 6500 0
8357 -6489 -6497 -6502 0
8357 -6488 -6498 -6502 0
8357 -6488 -6497 -6503 0
c ((1<=(aux1584 + aux1587 + aux1588))=tv=SATLiteral(8358))
-8358 -6488 -6497 -6502 0
8358 6502 0
8358 6497 0
8358 6498 0
8358 6500 0
8358 6488 0
8358 6488 6497 0
8358 6488 6498 0
8358 6488 6500 0
8358 6489 0
8358 6489 6497 0
8358 6489 6498 0
8358 6489 6500 0
c (((aux1590 + aux1593 + aux1594)<=1)=tv=SATLiteral(8359))
-8359 6527 0
-8359 6521 6526 0
-8359 6522 0
-8359 6524 0
-8359 6512 6526 0
-8359 6512 6521 0
-8359 6512 6522 0
-8359 6512 6524 0
-8359 6513 0
-8359 6513 6521 0
-8359 6513 6522 0
-8359 6513 6524 0
8359 -6513 -6521 -6526 0
8359 -6512 -6522 -6526 0
8359 -6512 -6521 -6527 0
c ((1<=(aux1590 + aux1593 + aux1594))=tv=SATLiteral(8360))
-8360 -6512 -6521 -6526 0
8360 6526 0
8360 6521 0
8360 6522 0
8360 6524 0
8360 6512 0
8360 6512 6521 0
8360 6512 6522 0
8360 6512 6524 0
8360 6513 0
8360 6513 6521 0
8360 6513 6522 0
8360 6513 6524 0
c (((aux1596 + aux1599 + aux1600)<=1)=tv=SATLiteral(8361))
-8361 6551 0
-8361 6545 6550 0
-8361 6546 0
-8361 6548 0
-8361 6536 6550 0
-8361 6536 6545 0
-8361 6536 6546 0
-8361 6536 6548 0
-8361 6537 0
-8361 6537 6545 0
-8361 6537 6546 0
-8361 6537 6548 0
8361 -6537 -6545 -6550 0
8361 -6536 -6546 -6550 0
8361 -6536 -6545 -6551 0
c ((1<=(aux1596 + aux1599 + aux1600))=tv=SATLiteral(8362))
-8362 -6536 -6545 -6550 0
8362 6550 0
8362 6545 0
8362 6546 0
8362 6548 0
8362 6536 0
8362 6536 6545 0
8362 6536 6546 0
8362 6536 6548 0
8362 6537 0
8362 6537 6545 0
8362 6537 6546 0
8362 6537 6548 0
c (((aux1602 + aux1605 + aux1606)<=1)=tv=SATLiteral(8363))
-8363 6575 0
-8363 6569 6574 0
-8363 6570 0
-8363 6572 0
-8363 6560 6574 0
-8363 6560 6569 0
-8363 6560 6570 0
-8363 6560 6572 0
-8363 6561 0
-8363 6561 6569 0
-8363 6561 6570 0
-8363 6561 6572 0
8363 -6561 -6569 -6574 0
8363 -6560 -6570 -6574 0
8363 -6560 -6569 -6575 0
c ((1<=(aux1602 + aux1605 + aux1606))=tv=SATLiteral(8364))
-8364 -6560 -6569 -6574 0
8364 6574 0
8364 6569 0
8364 6570 0
8364 6572 0
8364 6560 0
8364 6560 6569 0
8364 6560 6570 0
8364 6560 6572 0
8364 6561 0
8364 6561 6569 0
8364 6561 6570 0
8364 6561 6572 0
c (((aux1608 + aux1611 + aux1612)<=1)=tv=SATLiteral(8365))
-8365 6599 0
-8365 6593 6598 0
-8365 6594 0
-8365 6596 0
-8365 6584 6598 0
-8365 6584 6593 0
-8365 6584 6594 0
-8365 6584 6596 0
-8365 6585 0
-8365 6585 6593 0
-8365 6585 6594 0
-8365 6585 6596 0
8365 -6585 -6593 -6598 0
8365 -6584 -6594 -6598 0
8365 -6584 -6593 -6599 0
c ((1<=(aux1608 + aux1611 + aux1612))=tv=SATLiteral(8366))
-8366 -6584 -6593 -6598 0
8366 6598 0
8366 6593 0
8366 6594 0
8366 6596 0
8366 6584 0
8366 6584 6593 0
8366 6584 6594 0
8366 6584 6596 0
8366 6585 0
8366 6585 6593 0
8366 6585 6594 0
8366 6585 6596 0
c (((aux1614 + aux1617 + aux1618)<=1)=tv=SATLiteral(8367))
-8367 6623 0
-8367 6617 6622 0
-8367 6618 0
-8367 6620 0
-8367 6608 6622 0
-8367 6608 6617 0
-8367 6608 6618 0
-8367 6608 6620 0
-8367 6609 0
-8367 6609 6617 0
-8367 6609 6618 0
-8367 6609 6620 0
8367 -6609 -6617 -6622 0
8367 -6608 -6618 -6622 0
8367 -6608 -6617 -6623 0
c ((1<=(aux1614 + aux1617 + aux1618))=tv=SATLiteral(8368))
-8368 -6608 -6617 -6622 0
8368 6622 0
8368 6617 0
8368 6618 0
8368 6620 0
8368 6608 0
8368 6608 6617 0
8368 6608 6618 0
8368 6608 6620 0
8368 6609 0
8368 6609 6617 0
8368 6609 6618 0
8368 6609 6620 0
c (((aux1620 + aux1623 + aux1624)<=1)=tv=SATLiteral(8369))
-8369 6647 0
-8369 6641 6646 0
-8369 6642 0
-8369 6644 0
-8369 6632 6646 0
-8369 6632 6641 0
-8369 6632 6642 0
-8369 6632 6644 0
-8369 6633 0
-8369 6633 6641 0
-8369 6633 6642 0
-8369 6633 6644 0
8369 -6633 -6641 -6646 0
8369 -6632 -6642 -6646 0
8369 -6632 -6641 -6647 0
c ((1<=(aux1620 + aux1623 + aux1624))=tv=SATLiteral(8370))
-8370 -6632 -6641 -6646 0
8370 6646 0
8370 6641 0
8370 6642 0
8370 6644 0
8370 6632 0
8370 6632 6641 0
8370 6632 6642 0
8370 6632 6644 0
8370 6633 0
8370 6633 6641 0
8370 6633 6642 0
8370 6633 6644 0
c (((aux1626 + aux1629 + aux1630)<=1)=tv=SATLiteral(8371))
-8371 6671 0
-8371 6665 6670 0
-8371 6666 0
-8371 6668 0
-8371 6656 6670 0
-8371 6656 6665 0
-8371 6656 6666 0
-8371 6656 6668 0
-8371 6657 0
-8371 6657 6665 0
-8371 6657 6666 0
-8371 6657 6668 0
8371 -6657 -6665 -6670 0
8371 -6656 -6666 -6670 0
8371 -6656 -6665 -6671 0
c ((1<=(aux1626 + aux1629 + aux1630))=tv=SATLiteral(8372))
-8372 -6656 -6665 -6670 0
8372 6670 0
8372 6665 0
8372 6666 0
8372 6668 0
8372 6656 0
8372 6656 6665 0
8372 6656 6666 0
8372 6656 6668 0
8372 6657 0
8372 6657 6665 0
8372 6657 6666 0
8372 6657 6668 0
c (((aux1632 + aux1635 + aux1636)<=1)=tv=SATLiteral(8373))
-8373 6695 0
-8373 6689 6694 0
-8373 6690 0
-8373 6692 0
-8373 6680 6694 0
-8373 6680 6689 0
-8373 6680 6690 0
-8373 6680 6692 0
-8373 6681 0
-8373 6681 6689 0
-8373 6681 6690 0
-8373 6681 6692 0
8373 -6681 -6689 -6694 0
8373 -6680 -6690 -6694 0
8373 -6680 -6689 -6695 0
c ((1<=(aux1632 + aux1635 + aux1636))=tv=SATLiteral(8374))
-8374 -6680 -6689 -6694 0
8374 6694 0
8374 6689 0
8374 6690 0
8374 6692 0
8374 6680 0
8374 6680 6689 0
8374 6680 6690 0
8374 6680 6692 0
8374 6681 0
8374 6681 6689 0
8374 6681 6690 0
8374 6681 6692 0
c (((aux1638 + aux1641 + aux1642)<=1)=tv=SATLiteral(8375))
-8375 6719 0
-8375 6713 6718 0
-8375 6714 0
-8375 6716 0
-8375 6704 6718 0
-8375 6704 6713 0
-8375 6704 6714 0
-8375 6704 6716 0
-8375 6705 0
-8375 6705 6713 0
-8375 6705 6714 0
-8375 6705 6716 0
8375 -6705 -6713 -6718 0
8375 -6704 -6714 -6718 0
8375 -6704 -6713 -6719 0
c ((1<=(aux1638 + aux1641 + aux1642))=tv=SATLiteral(8376))
-8376 -6704 -6713 -6718 0
8376 6718 0
8376 6713 0
8376 6714 0
8376 6716 0
8376 6704 0
8376 6704 6713 0
8376 6704 6714 0
8376 6704 6716 0
8376 6705 0
8376 6705 6713 0
8376 6705 6714 0
8376 6705 6716 0
c (((aux1644 + aux1647 + aux1648)<=1)=tv=SATLiteral(8377))
-8377 6743 0
-8377 6737 6742 0
-8377 6738 0
-8377 6740 0
-8377 6728 6742 0
-8377 6728 6737 0
-8377 6728 6738 0
-8377 6728 6740 0
-8377 6729 0
-8377 6729 6737 0
-8377 6729 6738 0
-8377 6729 6740 0
8377 -6729 -6737 -6742 0
8377 -6728 -6738 -6742 0
8377 -6728 -6737 -6743 0
c ((1<=(aux1644 + aux1647 + aux1648))=tv=SATLiteral(8378))
-8378 -6728 -6737 -6742 0
8378 6742 0
8378 6737 0
8378 6738 0
8378 6740 0
8378 6728 0
8378 6728 6737 0
8378 6728 6738 0
8378 6728 6740 0
8378 6729 0
8378 6729 6737 0
8378 6729 6738 0
8378 6729 6740 0
c (((aux1650 + aux1653 + aux1654)<=1)=tv=SATLiteral(8379))
-8379 6767 0
-8379 6761 6766 0
-8379 6762 0
-8379 6764 0
-8379 6752 6766 0
-8379 6752 6761 0
-8379 6752 6762 0
-8379 6752 6764 0
-8379 6753 0
-8379 6753 6761 0
-8379 6753 6762 0
-8379 6753 6764 0
8379 -6753 -6761 -6766 0
8379 -6752 -6762 -6766 0
8379 -6752 -6761 -6767 0
c ((1<=(aux1650 + aux1653 + aux1654))=tv=SATLiteral(8380))
-8380 -6752 -6761 -6766 0
8380 6766 0
8380 6761 0
8380 6762 0
8380 6764 0
8380 6752 0
8380 6752 6761 0
8380 6752 6762 0
8380 6752 6764 0
8380 6753 0
8380 6753 6761 0
8380 6753 6762 0
8380 6753 6764 0
c (((aux1656 + aux1659 + aux1660)<=1)=tv=SATLiteral(8381))
-8381 6791 0
-8381 6785 6790 0
-8381 6786 0
-8381 6788 0
-8381 6776 6790 0
-8381 6776 6785 0
-8381 6776 6786 0
-8381 6776 6788 0
-8381 6777 0
-8381 6777 6785 0
-8381 6777 6786 0
-8381 6777 6788 0
8381 -6777 -6785 -6790 0
8381 -6776 -6786 -6790 0
8381 -6776 -6785 -6791 0
c ((1<=(aux1656 + aux1659 + aux1660))=tv=SATLiteral(8382))
-8382 -6776 -6785 -6790 0
8382 6790 0
8382 6785 0
8382 6786 0
8382 6788 0
8382 6776 0
8382 6776 6785 0
8382 6776 6786 0
8382 6776 6788 0
8382 6777 0
8382 6777 6785 0
8382 6777 6786 0
8382 6777 6788 0
c (((aux1662 + aux1665 + aux1666)<=1)=tv=SATLiteral(8383))
-8383 6815 0
-8383 6809 6814 0
-8383 6810 0
-8383 6812 0
-8383 6800 6814 0
-8383 6800 6809 0
-8383 6800 6810 0
-8383 6800 6812 0
-8383 6801 0
-8383 6801 6809 0
-8383 6801 6810 0
-8383 6801 6812 0
8383 -6801 -6809 -6814 0
8383 -6800 -6810 -6814 0
8383 -6800 -6809 -6815 0
c ((1<=(aux1662 + aux1665 + aux1666))=tv=SATLiteral(8384))
-8384 -6800 -6809 -6814 0
8384 6814 0
8384 6809 0
8384 6810 0
8384 6812 0
8384 6800 0
8384 6800 6809 0
8384 6800 6810 0
8384 6800 6812 0
8384 6801 0
8384 6801 6809 0
8384 6801 6810 0
8384 6801 6812 0
c (((aux1668 + aux1671 + aux1672)<=1)=tv=SATLiteral(8385))
-8385 6839 0
-8385 6833 6838 0
-8385 6834 0
-8385 6836 0
-8385 6824 6838 0
-8385 6824 6833 0
-8385 6824 6834 0
-8385 6824 6836 0
-8385 6825 0
-8385 6825 6833 0
-8385 6825 6834 0
-8385 6825 6836 0
8385 -6825 -6833 -6838 0
8385 -6824 -6834 -6838 0
8385 -6824 -6833 -6839 0
c ((1<=(aux1668 + aux1671 + aux1672))=tv=SATLiteral(8386))
-8386 -6824 -6833 -6838 0
8386 6838 0
8386 6833 0
8386 6834 0
8386 6836 0
8386 6824 0
8386 6824 6833 0
8386 6824 6834 0
8386 6824 6836 0
8386 6825 0
8386 6825 6833 0
8386 6825 6834 0
8386 6825 6836 0
c (((aux1674 + aux1677 + aux1678)<=1)=tv=SATLiteral(8387))
-8387 6863 0
-8387 6857 6862 0
-8387 6858 0
-8387 6860 0
-8387 6848 6862 0
-8387 6848 6857 0
-8387 6848 6858 0
-8387 6848 6860 0
-8387 6849 0
-8387 6849 6857 0
-8387 6849 6858 0
-8387 6849 6860 0
8387 -6849 -6857 -6862 0
8387 -6848 -6858 -6862 0
8387 -6848 -6857 -6863 0
c ((1<=(aux1674 + aux1677 + aux1678))=tv=SATLiteral(8388))
-8388 -6848 -6857 -6862 0
8388 6862 0
8388 6857 0
8388 6858 0
8388 6860 0
8388 6848 0
8388 6848 6857 0
8388 6848 6858 0
8388 6848 6860 0
8388 6849 0
8388 6849 6857 0
8388 6849 6858 0
8388 6849 6860 0
c (((aux1680 + aux1683 + aux1684)<=1)=tv=SATLiteral(8389))
-8389 6887 0
-8389 6881 6886 0
-8389 6882 0
-8389 6884 0
-8389 6872 6886 0
-8389 6872 6881 0
-8389 6872 6882 0
-8389 6872 6884 0
-8389 6873 0
-8389 6873 6881 0
-8389 6873 6882 0
-8389 6873 6884 0
8389 -6873 -6881 -6886 0
8389 -6872 -6882 -6886 0
8389 -6872 -6881 -6887 0
c ((1<=(aux1680 + aux1683 + aux1684))=tv=SATLiteral(8390))
-8390 -6872 -6881 -6886 0
8390 6886 0
8390 6881 0
8390 6882 0
8390 6884 0
8390 6872 0
8390 6872 6881 0
8390 6872 6882 0
8390 6872 6884 0
8390 6873 0
8390 6873 6881 0
8390 6873 6882 0
8390 6873 6884 0
c (((aux1686 + aux1689 + aux1690)<=1)=tv=SATLiteral(8391))
-8391 6911 0
-8391 6905 6910 0
-8391 6906 0
-8391 6908 0
-8391 6896 6910 0
-8391 6896 6905 0
-8391 6896 6906 0
-8391 6896 6908 0
-8391 6897 0
-8391 6897 6905 0
-8391 6897 6906 0
-8391 6897 6908 0
8391 -6897 -6905 -6910 0
8391 -6896 -6906 -6910 0
8391 -6896 -6905 -6911 0
c ((1<=(aux1686 + aux1689 + aux1690))=tv=SATLiteral(8392))
-8392 -6896 -6905 -6910 0
8392 6910 0
8392 6905 0
8392 6906 0
8392 6908 0
8392 6896 0
8392 6896 6905 0
8392 6896 6906 0
8392 6896 6908 0
8392 6897 0
8392 6897 6905 0
8392 6897 6906 0
8392 6897 6908 0
c (((aux1692 + aux1695 + aux1696)<=1)=tv=SATLiteral(8393))
-8393 6935 0
-8393 6929 6934 0
-8393 6930 0
-8393 6932 0
-8393 6920 6934 0
-8393 6920 6929 0
-8393 6920 6930 0
-8393 6920 6932 0
-8393 6921 0
-8393 6921 6929 0
-8393 6921 6930 0
-8393 6921 6932 0
8393 -6921 -6929 -6934 0
8393 -6920 -6930 -6934 0
8393 -6920 -6929 -6935 0
c ((1<=(aux1692 + aux1695 + aux1696))=tv=SATLiteral(8394))
-8394 -6920 -6929 -6934 0
8394 6934 0
8394 6929 0
8394 6930 0
8394 6932 0
8394 6920 0
8394 6920 6929 0
8394 6920 6930 0
8394 6920 6932 0
8394 6921 0
8394 6921 6929 0
8394 6921 6930 0
8394 6921 6932 0
c (((aux1698 + aux1701 + aux1702)<=1)=tv=SATLiteral(8395))
-8395 6959 0
-8395 6953 6958 0
-8395 6954 0
-8395 6956 0
-8395 6944 6958 0
-8395 6944 6953 0
-8395 6944 6954 0
-8395 6944 6956 0
-8395 6945 0
-8395 6945 6953 0
-8395 6945 6954 0
-8395 6945 6956 0
8395 -6945 -6953 -6958 0
8395 -6944 -6954 -6958 0
8395 -6944 -6953 -6959 0
c ((1<=(aux1698 + aux1701 + aux1702))=tv=SATLiteral(8396))
-8396 -6944 -6953 -6958 0
8396 6958 0
8396 6953 0
8396 6954 0
8396 6956 0
8396 6944 0
8396 6944 6953 0
8396 6944 6954 0
8396 6944 6956 0
8396 6945 0
8396 6945 6953 0
8396 6945 6954 0
8396 6945 6956 0
c (((aux1704 + aux1707 + aux1708)<=1)=tv=SATLiteral(8397))
-8397 6983 0
-8397 6977 6982 0
-8397 6978 0
-8397 6980 0
-8397 6968 6982 0
-8397 6968 6977 0
-8397 6968 6978 0
-8397 6968 6980 0
-8397 6969 0
-8397 6969 6977 0
-8397 6969 6978 0
-8397 6969 6980 0
8397 -6969 -6977 -6982 0
8397 -6968 -6978 -6982 0
8397 -6968 -6977 -6983 0
c ((1<=(aux1704 + aux1707 + aux1708))=tv=SATLiteral(8398))
-8398 -6968 -6977 -6982 0
8398 6982 0
8398 6977 0
8398 6978 0
8398 6980 0
8398 6968 0
8398 6968 6977 0
8398 6968 6978 0
8398 6968 6980 0
8398 6969 0
8398 6969 6977 0
8398 6969 6978 0
8398 6969 6980 0
c (((aux1710 + aux1713 + aux1714)<=1)=tv=SATLiteral(8399))
-8399 7007 0
-8399 7001 7006 0
-8399 7002 0
-8399 7004 0
-8399 6992 7006 0
-8399 6992 7001 0
-8399 6992 7002 0
-8399 6992 7004 0
-8399 6993 0
-8399 6993 7001 0
-8399 6993 7002 0
-8399 6993 7004 0
8399 -6993 -7001 -7006 0
8399 -6992 -7002 -7006 0
8399 -6992 -7001 -7007 0
c ((1<=(aux1710 + aux1713 + aux1714))=tv=SATLiteral(8400))
-8400 -6992 -7001 -7006 0
8400 7006 0
8400 7001 0
8400 7002 0
8400 7004 0
8400 6992 0
8400 6992 7001 0
8400 6992 7002 0
8400 6992 7004 0
8400 6993 0
8400 6993 7001 0
8400 6993 7002 0
8400 6993 7004 0
c (((aux1716 + aux1719 + aux1720)<=1)=tv=SATLiteral(8401))
-8401 7031 0
-8401 7025 7030 0
-8401 7026 0
-8401 7028 0
-8401 7016 7030 0
-8401 7016 7025 0
-8401 7016 7026 0
-8401 7016 7028 0
-8401 7017 0
-8401 7017 7025 0
-8401 7017 7026 0
-8401 7017 7028 0
8401 -7017 -7025 -7030 0
8401 -7016 -7026 -7030 0
8401 -7016 -7025 -7031 0
c ((1<=(aux1716 + aux1719 + aux1720))=tv=SATLiteral(8402))
-8402 -7016 -7025 -7030 0
8402 7030 0
8402 7025 0
8402 7026 0
8402 7028 0
8402 7016 0
8402 7016 7025 0
8402 7016 7026 0
8402 7016 7028 0
8402 7017 0
8402 7017 7025 0
8402 7017 7026 0
8402 7017 7028 0
c (((aux1722 + aux1725 + aux1726)<=1)=tv=SATLiteral(8403))
-8403 7055 0
-8403 7049 7054 0
-8403 7050 0
-8403 7052 0
-8403 7040 7054 0
-8403 7040 7049 0
-8403 7040 7050 0
-8403 7040 7052 0
-8403 7041 0
-8403 7041 7049 0
-8403 7041 7050 0
-8403 7041 7052 0
8403 -7041 -7049 -7054 0
8403 -7040 -7050 -7054 0
8403 -7040 -7049 -7055 0
c ((1<=(aux1722 + aux1725 + aux1726))=tv=SATLiteral(8404))
-8404 -7040 -7049 -7054 0
8404 7054 0
8404 7049 0
8404 7050 0
8404 7052 0
8404 7040 0
8404 7040 7049 0
8404 7040 7050 0
8404 7040 7052 0
8404 7041 0
8404 7041 7049 0
8404 7041 7050 0
8404 7041 7052 0
c (((aux1728 + aux1731 + aux1732)<=1)=tv=SATLiteral(8405))
-8405 7079 0
-8405 7073 7078 0
-8405 7074 0
-8405 7076 0
-8405 7064 7078 0
-8405 7064 7073 0
-8405 7064 7074 0
-8405 7064 7076 0
-8405 7065 0
-8405 7065 7073 0
-8405 7065 7074 0
-8405 7065 7076 0
8405 -7065 -7073 -7078 0
8405 -7064 -7074 -7078 0
8405 -7064 -7073 -7079 0
c ((1<=(aux1728 + aux1731 + aux1732))=tv=SATLiteral(8406))
-8406 -7064 -7073 -7078 0
8406 7078 0
8406 7073 0
8406 7074 0
8406 7076 0
8406 7064 0
8406 7064 7073 0
8406 7064 7074 0
8406 7064 7076 0
8406 7065 0
8406 7065 7073 0
8406 7065 7074 0
8406 7065 7076 0
c (((aux1734 + aux1737 + aux1738)<=1)=tv=SATLiteral(8407))
-8407 7103 0
-8407 7097 7102 0
-8407 7098 0
-8407 7100 0
-8407 7088 7102 0
-8407 7088 7097 0
-8407 7088 7098 0
-8407 7088 7100 0
-8407 7089 0
-8407 7089 7097 0
-8407 7089 7098 0
-8407 7089 7100 0
8407 -7089 -7097 -7102 0
8407 -7088 -7098 -7102 0
8407 -7088 -7097 -7103 0
c ((1<=(aux1734 + aux1737 + aux1738))=tv=SATLiteral(8408))
-8408 -7088 -7097 -7102 0
8408 7102 0
8408 7097 0
8408 7098 0
8408 7100 0
8408 7088 0
8408 7088 7097 0
8408 7088 7098 0
8408 7088 7100 0
8408 7089 0
8408 7089 7097 0
8408 7089 7098 0
8408 7089 7100 0
c (((aux1740 + aux1743 + aux1744)<=1)=tv=SATLiteral(8409))
-8409 7127 0
-8409 7121 7126 0
-8409 7122 0
-8409 7124 0
-8409 7112 7126 0
-8409 7112 7121 0
-8409 7112 7122 0
-8409 7112 7124 0
-8409 7113 0
-8409 7113 7121 0
-8409 7113 7122 0
-8409 7113 7124 0
8409 -7113 -7121 -7126 0
8409 -7112 -7122 -7126 0
8409 -7112 -7121 -7127 0
c ((1<=(aux1740 + aux1743 + aux1744))=tv=SATLiteral(8410))
-8410 -7112 -7121 -7126 0
8410 7126 0
8410 7121 0
8410 7122 0
8410 7124 0
8410 7112 0
8410 7112 7121 0
8410 7112 7122 0
8410 7112 7124 0
8410 7113 0
8410 7113 7121 0
8410 7113 7122 0
8410 7113 7124 0
c (((aux1746 + aux1749 + aux1750)<=1)=tv=SATLiteral(8411))
-8411 7151 0
-8411 7145 7150 0
-8411 7146 0
-8411 7148 0
-8411 7136 7150 0
-8411 7136 7145 0
-8411 7136 7146 0
-8411 7136 7148 0
-8411 7137 0
-8411 7137 7145 0
-8411 7137 7146 0
-8411 7137 7148 0
8411 -7137 -7145 -7150 0
8411 -7136 -7146 -7150 0
8411 -7136 -7145 -7151 0
c ((1<=(aux1746 + aux1749 + aux1750))=tv=SATLiteral(8412))
-8412 -7136 -7145 -7150 0
8412 7150 0
8412 7145 0
8412 7146 0
8412 7148 0
8412 7136 0
8412 7136 7145 0
8412 7136 7146 0
8412 7136 7148 0
8412 7137 0
8412 7137 7145 0
8412 7137 7146 0
8412 7137 7148 0
c (((aux1752 + aux1755 + aux1756)<=1)=tv=SATLiteral(8413))
-8413 7175 0
-8413 7169 7174 0
-8413 7170 0
-8413 7172 0
-8413 7160 7174 0
-8413 7160 7169 0
-8413 7160 7170 0
-8413 7160 7172 0
-8413 7161 0
-8413 7161 7169 0
-8413 7161 7170 0
-8413 7161 7172 0
8413 -7161 -7169 -7174 0
8413 -7160 -7170 -7174 0
8413 -7160 -7169 -7175 0
c ((1<=(aux1752 + aux1755 + aux1756))=tv=SATLiteral(8414))
-8414 -7160 -7169 -7174 0
8414 7174 0
8414 7169 0
8414 7170 0
8414 7172 0
8414 7160 0
8414 7160 7169 0
8414 7160 7170 0
8414 7160 7172 0
8414 7161 0
8414 7161 7169 0
8414 7161 7170 0
8414 7161 7172 0
c (((aux1758 + aux1761 + aux1762)<=1)=tv=SATLiteral(8415))
-8415 7199 0
-8415 7193 7198 0
-8415 7194 0
-8415 7196 0
-8415 7184 7198 0
-8415 7184 7193 0
-8415 7184 7194 0
-8415 7184 7196 0
-8415 7185 0
-8415 7185 7193 0
-8415 7185 7194 0
-8415 7185 7196 0
8415 -7185 -7193 -7198 0
8415 -7184 -7194 -7198 0
8415 -7184 -7193 -7199 0
c ((1<=(aux1758 + aux1761 + aux1762))=tv=SATLiteral(8416))
-8416 -7184 -7193 -7198 0
8416 7198 0
8416 7193 0
8416 7194 0
8416 7196 0
8416 7184 0
8416 7184 7193 0
8416 7184 7194 0
8416 7184 7196 0
8416 7185 0
8416 7185 7193 0
8416 7185 7194 0
8416 7185 7196 0
c (((aux1764 + aux1767 + aux1768)<=1)=tv=SATLiteral(8417))
-8417 7223 0
-8417 7217 7222 0
-8417 7218 0
-8417 7220 0
-8417 7208 7222 0
-8417 7208 7217 0
-8417 7208 7218 0
-8417 7208 7220 0
-8417 7209 0
-8417 7209 7217 0
-8417 7209 7218 0
-8417 7209 7220 0
8417 -7209 -7217 -7222 0
8417 -7208 -7218 -7222 0
8417 -7208 -7217 -7223 0
c ((1<=(aux1764 + aux1767 + aux1768))=tv=SATLiteral(8418))
-8418 -7208 -7217 -7222 0
8418 7222 0
8418 7217 0
8418 7218 0
8418 7220 0
8418 7208 0
8418 7208 7217 0
8418 7208 7218 0
8418 7208 7220 0
8418 7209 0
8418 7209 7217 0
8418 7209 7218 0
8418 7209 7220 0
c (((aux1770 + aux1773 + aux1774)<=1)=tv=SATLiteral(8419))
-8419 7247 0
-8419 7241 7246 0
-8419 7242 0
-8419 7244 0
-8419 7232 7246 0
-8419 7232 7241 0
-8419 7232 7242 0
-8419 7232 7244 0
-8419 7233 0
-8419 7233 7241 0
-8419 7233 7242 0
-8419 7233 7244 0
8419 -7233 -7241 -7246 0
8419 -7232 -7242 -7246 0
8419 -7232 -7241 -7247 0
c ((1<=(aux1770 + aux1773 + aux1774))=tv=SATLiteral(8420))
-8420 -7232 -7241 -7246 0
8420 7246 0
8420 7241 0
8420 7242 0
8420 7244 0
8420 7232 0
8420 7232 7241 0
8420 7232 7242 0
8420 7232 7244 0
8420 7233 0
8420 7233 7241 0
8420 7233 7242 0
8420 7233 7244 0
c (((aux1776 + aux1779 + aux1780)<=1)=tv=SATLiteral(8421))
-8421 7271 0
-8421 7265 7270 0
-8421 7266 0
-8421 7268 0
-8421 7256 7270 0
-8421 7256 7265 0
-8421 7256 7266 0
-8421 7256 7268 0
-8421 7257 0
-8421 7257 7265 0
-8421 7257 7266 0
-8421 7257 7268 0
8421 -7257 -7265 -7270 0
8421 -7256 -7266 -7270 0
8421 -7256 -7265 -7271 0
c ((1<=(aux1776 + aux1779 + aux1780))=tv=SATLiteral(8422))
-8422 -7256 -7265 -7270 0
8422 7270 0
8422 7265 0
8422 7266 0
8422 7268 0
8422 7256 0
8422 7256 7265 0
8422 7256 7266 0
8422 7256 7268 0
8422 7257 0
8422 7257 7265 0
8422 7257 7266 0
8422 7257 7268 0
c (((aux1782 + aux1785 + aux1786)<=1)=tv=SATLiteral(8423))
-8423 7295 0
-8423 7289 7294 0
-8423 7290 0
-8423 7292 0
-8423 7280 7294 0
-8423 7280 7289 0
-8423 7280 7290 0
-8423 7280 7292 0
-8423 7281 0
-8423 7281 7289 0
-8423 7281 7290 0
-8423 7281 7292 0
8423 -7281 -7289 -7294 0
8423 -7280 -7290 -7294 0
8423 -7280 -7289 -7295 0
c ((1<=(aux1782 + aux1785 + aux1786))=tv=SATLiteral(8424))
-8424 -7280 -7289 -7294 0
8424 7294 0
8424 7289 0
8424 7290 0
8424 7292 0
8424 7280 0
8424 7280 7289 0
8424 7280 7290 0
8424 7280 7292 0
8424 7281 0
8424 7281 7289 0
8424 7281 7290 0
8424 7281 7292 0
c (((aux1788 + aux1791 + aux1792)<=1)=tv=SATLiteral(8425))
-8425 7319 0
-8425 7313 7318 0
-8425 7314 0
-8425 7316 0
-8425 7304 7318 0
-8425 7304 7313 0
-8425 7304 7314 0
-8425 7304 7316 0
-8425 7305 0
-8425 7305 7313 0
-8425 7305 7314 0
-8425 7305 7316 0
8425 -7305 -7313 -7318 0
8425 -7304 -7314 -7318 0
8425 -7304 -7313 -7319 0
c ((1<=(aux1788 + aux1791 + aux1792))=tv=SATLiteral(8426))
-8426 -7304 -7313 -7318 0
8426 7318 0
8426 7313 0
8426 7314 0
8426 7316 0
8426 7304 0
8426 7304 7313 0
8426 7304 7314 0
8426 7304 7316 0
8426 7305 0
8426 7305 7313 0
8426 7305 7314 0
8426 7305 7316 0
c (((aux1794 + aux1797 + aux1798)<=1)=tv=SATLiteral(8427))
-8427 7343 0
-8427 7337 7342 0
-8427 7338 0
-8427 7340 0
-8427 7328 7342 0
-8427 7328 7337 0
-8427 7328 7338 0
-8427 7328 7340 0
-8427 7329 0
-8427 7329 7337 0
-8427 7329 7338 0
-8427 7329 7340 0
8427 -7329 -7337 -7342 0
8427 -7328 -7338 -7342 0
8427 -7328 -7337 -7343 0
c ((1<=(aux1794 + aux1797 + aux1798))=tv=SATLiteral(8428))
-8428 -7328 -7337 -7342 0
8428 7342 0
8428 7337 0
8428 7338 0
8428 7340 0
8428 7328 0
8428 7328 7337 0
8428 7328 7338 0
8428 7328 7340 0
8428 7329 0
8428 7329 7337 0
8428 7329 7338 0
8428 7329 7340 0
c (((aux1800 + aux1803 + aux1804)<=1)=tv=SATLiteral(8429))
-8429 7367 0
-8429 7361 7366 0
-8429 7362 0
-8429 7364 0
-8429 7352 7366 0
-8429 7352 7361 0
-8429 7352 7362 0
-8429 7352 7364 0
-8429 7353 0
-8429 7353 7361 0
-8429 7353 7362 0
-8429 7353 7364 0
8429 -7353 -7361 -7366 0
8429 -7352 -7362 -7366 0
8429 -7352 -7361 -7367 0
c ((1<=(aux1800 + aux1803 + aux1804))=tv=SATLiteral(8430))
-8430 -7352 -7361 -7366 0
8430 7366 0
8430 7361 0
8430 7362 0
8430 7364 0
8430 7352 0
8430 7352 7361 0
8430 7352 7362 0
8430 7352 7364 0
8430 7353 0
8430 7353 7361 0
8430 7353 7362 0
8430 7353 7364 0
c (((aux1806 + aux1809 + aux1810)<=1)=tv=SATLiteral(8431))
-8431 7391 0
-8431 7385 7390 0
-8431 7386 0
-8431 7388 0
-8431 7376 7390 0
-8431 7376 7385 0
-8431 7376 7386 0
-8431 7376 7388 0
-8431 7377 0
-8431 7377 7385 0
-8431 7377 7386 0
-8431 7377 7388 0
8431 -7377 -7385 -7390 0
8431 -7376 -7386 -7390 0
8431 -7376 -7385 -7391 0
c ((1<=(aux1806 + aux1809 + aux1810))=tv=SATLiteral(8432))
-8432 -7376 -7385 -7390 0
8432 7390 0
8432 7385 0
8432 7386 0
8432 7388 0
8432 7376 0
8432 7376 7385 0
8432 7376 7386 0
8432 7376 7388 0
8432 7377 0
8432 7377 7385 0
8432 7377 7386 0
8432 7377 7388 0
c (((aux1812 + aux1815 + aux1816)<=1)=tv=SATLiteral(8433))
-8433 7415 0
-8433 7409 7414 0
-8433 7410 0
-8433 7412 0
-8433 7400 7414 0
-8433 7400 7409 0
-8433 7400 7410 0
-8433 7400 7412 0
-8433 7401 0
-8433 7401 7409 0
-8433 7401 7410 0
-8433 7401 7412 0
8433 -7401 -7409 -7414 0
8433 -7400 -7410 -7414 0
8433 -7400 -7409 -7415 0
c ((1<=(aux1812 + aux1815 + aux1816))=tv=SATLiteral(8434))
-8434 -7400 -7409 -7414 0
8434 7414 0
8434 7409 0
8434 7410 0
8434 7412 0
8434 7400 0
8434 7400 7409 0
8434 7400 7410 0
8434 7400 7412 0
8434 7401 0
8434 7401 7409 0
8434 7401 7410 0
8434 7401 7412 0
c (((aux1818 + aux1821 + aux1822)<=1)=tv=SATLiteral(8435))
-8435 7439 0
-8435 7433 7438 0
-8435 7434 0
-8435 7436 0
-8435 7424 7438 0
-8435 7424 7433 0
-8435 7424 7434 0
-8435 7424 7436 0
-8435 7425 0
-8435 7425 7433 0
-8435 7425 7434 0
-8435 7425 7436 0
8435 -7425 -7433 -7438 0
8435 -7424 -7434 -7438 0
8435 -7424 -7433 -7439 0
c ((1<=(aux1818 + aux1821 + aux1822))=tv=SATLiteral(8436))
-8436 -7424 -7433 -7438 0
8436 7438 0
8436 7433 0
8436 7434 0
8436 7436 0
8436 7424 0
8436 7424 7433 0
8436 7424 7434 0
8436 7424 7436 0
8436 7425 0
8436 7425 7433 0
8436 7425 7434 0
8436 7425 7436 0
c (((aux1824 + aux1827 + aux1828)<=1)=tv=SATLiteral(8437))
-8437 7463 0
-8437 7457 7462 0
-8437 7458 0
-8437 7460 0
-8437 7448 7462 0
-8437 7448 7457 0
-8437 7448 7458 0
-8437 7448 7460 0
-8437 7449 0
-8437 7449 7457 0
-8437 7449 7458 0
-8437 7449 7460 0
8437 -7449 -7457 -7462 0
8437 -7448 -7458 -7462 0
8437 -7448 -7457 -7463 0
c ((1<=(aux1824 + aux1827 + aux1828))=tv=SATLiteral(8438))
-8438 -7448 -7457 -7462 0
8438 7462 0
8438 7457 0
8438 7458 0
8438 7460 0
8438 7448 0
8438 7448 7457 0
8438 7448 7458 0
8438 7448 7460 0
8438 7449 0
8438 7449 7457 0
8438 7449 7458 0
8438 7449 7460 0
c (((aux1830 + aux1833 + aux1834)<=1)=tv=SATLiteral(8439))
-8439 7487 0
-8439 7481 7486 0
-8439 7482 0
-8439 7484 0
-8439 7472 7486 0
-8439 7472 7481 0
-8439 7472 7482 0
-8439 7472 7484 0
-8439 7473 0
-8439 7473 7481 0
-8439 7473 7482 0
-8439 7473 7484 0
8439 -7473 -7481 -7486 0
8439 -7472 -7482 -7486 0
8439 -7472 -7481 -7487 0
c ((1<=(aux1830 + aux1833 + aux1834))=tv=SATLiteral(8440))
-8440 -7472 -7481 -7486 0
8440 7486 0
8440 7481 0
8440 7482 0
8440 7484 0
8440 7472 0
8440 7472 7481 0
8440 7472 7482 0
8440 7472 7484 0
8440 7473 0
8440 7473 7481 0
8440 7473 7482 0
8440 7473 7484 0
c (((aux1836 + aux1839 + aux1840)<=1)=tv=SATLiteral(8441))
-8441 7511 0
-8441 7505 7510 0
-8441 7506 0
-8441 7508 0
-8441 7496 7510 0
-8441 7496 7505 0
-8441 7496 7506 0
-8441 7496 7508 0
-8441 7497 0
-8441 7497 7505 0
-8441 7497 7506 0
-8441 7497 7508 0
8441 -7497 -7505 -7510 0
8441 -7496 -7506 -7510 0
8441 -7496 -7505 -7511 0
c ((1<=(aux1836 + aux1839 + aux1840))=tv=SATLiteral(8442))
-8442 -7496 -7505 -7510 0
8442 7510 0
8442 7505 0
8442 7506 0
8442 7508 0
8442 7496 0
8442 7496 7505 0
8442 7496 7506 0
8442 7496 7508 0
8442 7497 0
8442 7497 7505 0
8442 7497 7506 0
8442 7497 7508 0
c (((aux1842 + aux1845 + aux1846)<=1)=tv=SATLiteral(8443))
-8443 7535 0
-8443 7529 7534 0
-8443 7530 0
-8443 7532 0
-8443 7520 7534 0
-8443 7520 7529 0
-8443 7520 7530 0
-8443 7520 7532 0
-8443 7521 0
-8443 7521 7529 0
-8443 7521 7530 0
-8443 7521 7532 0
8443 -7521 -7529 -7534 0
8443 -7520 -7530 -7534 0
8443 -7520 -7529 -7535 0
c ((1<=(aux1842 + aux1845 + aux1846))=tv=SATLiteral(8444))
-8444 -7520 -7529 -7534 0
8444 7534 0
8444 7529 0
8444 7530 0
8444 7532 0
8444 7520 0
8444 7520 7529 0
8444 7520 7530 0
8444 7520 7532 0
8444 7521 0
8444 7521 7529 0
8444 7521 7530 0
8444 7521 7532 0
c (((aux1848 + aux1851 + aux1852)<=1)=tv=SATLiteral(8445))
-8445 7559 0
-8445 7553 7558 0
-8445 7554 0
-8445 7556 0
-8445 7544 7558 0
-8445 7544 7553 0
-8445 7544 7554 0
-8445 7544 7556 0
-8445 7545 0
-8445 7545 7553 0
-8445 7545 7554 0
-8445 7545 7556 0
8445 -7545 -7553 -7558 0
8445 -7544 -7554 -7558 0
8445 -7544 -7553 -7559 0
c ((1<=(aux1848 + aux1851 + aux1852))=tv=SATLiteral(8446))
-8446 -7544 -7553 -7558 0
8446 7558 0
8446 7553 0
8446 7554 0
8446 7556 0
8446 7544 0
8446 7544 7553 0
8446 7544 7554 0
8446 7544 7556 0
8446 7545 0
8446 7545 7553 0
8446 7545 7554 0
8446 7545 7556 0
c (((aux1854 + aux1857 + aux1858)<=1)=tv=SATLiteral(8447))
-8447 7583 0
-8447 7577 7582 0
-8447 7578 0
-8447 7580 0
-8447 7568 7582 0
-8447 7568 7577 0
-8447 7568 7578 0
-8447 7568 7580 0
-8447 7569 0
-8447 7569 7577 0
-8447 7569 7578 0
-8447 7569 7580 0
8447 -7569 -7577 -7582 0
8447 -7568 -7578 -7582 0
8447 -7568 -7577 -7583 0
c ((1<=(aux1854 + aux1857 + aux1858))=tv=SATLiteral(8448))
-8448 -7568 -7577 -7582 0
8448 7582 0
8448 7577 0
8448 7578 0
8448 7580 0
8448 7568 0
8448 7568 7577 0
8448 7568 7578 0
8448 7568 7580 0
8448 7569 0
8448 7569 7577 0
8448 7569 7578 0
8448 7569 7580 0
c (((aux1860 + aux1863 + aux1864)<=1)=tv=SATLiteral(8449))
-8449 7607 0
-8449 7601 7606 0
-8449 7602 0
-8449 7604 0
-8449 7592 7606 0
-8449 7592 7601 0
-8449 7592 7602 0
-8449 7592 7604 0
-8449 7593 0
-8449 7593 7601 0
-8449 7593 7602 0
-8449 7593 7604 0
8449 -7593 -7601 -7606 0
8449 -7592 -7602 -7606 0
8449 -7592 -7601 -7607 0
c ((1<=(aux1860 + aux1863 + aux1864))=tv=SATLiteral(8450))
-8450 -7592 -7601 -7606 0
8450 7606 0
8450 7601 0
8450 7602 0
8450 7604 0
8450 7592 0
8450 7592 7601 0
8450 7592 7602 0
8450 7592 7604 0
8450 7593 0
8450 7593 7601 0
8450 7593 7602 0
8450 7593 7604 0
c (((aux1866 + aux1869 + aux1870)<=1)=tv=SATLiteral(8451))
-8451 7631 0
-8451 7625 7630 0
-8451 7626 0
-8451 7628 0
-8451 7616 7630 0
-8451 7616 7625 0
-8451 7616 7626 0
-8451 7616 7628 0
-8451 7617 0
-8451 7617 7625 0
-8451 7617 7626 0
-8451 7617 7628 0
8451 -7617 -7625 -7630 0
8451 -7616 -7626 -7630 0
8451 -7616 -7625 -7631 0
c ((1<=(aux1866 + aux1869 + aux1870))=tv=SATLiteral(8452))
-8452 -7616 -7625 -7630 0
8452 7630 0
8452 7625 0
8452 7626 0
8452 7628 0
8452 7616 0
8452 7616 7625 0
8452 7616 7626 0
8452 7616 7628 0
8452 7617 0
8452 7617 7625 0
8452 7617 7626 0
8452 7617 7628 0
c (((aux1872 + aux1875 + aux1876)<=1)=tv=SATLiteral(8453))
-8453 7655 0
-8453 7649 7654 0
-8453 7650 0
-8453 7652 0
-8453 7640 7654 0
-8453 7640 7649 0
-8453 7640 7650 0
-8453 7640 7652 0
-8453 7641 0
-8453 7641 7649 0
-8453 7641 7650 0
-8453 7641 7652 0
8453 -7641 -7649 -7654 0
8453 -7640 -7650 -7654 0
8453 -7640 -7649 -7655 0
c ((1<=(aux1872 + aux1875 + aux1876))=tv=SATLiteral(8454))
-8454 -7640 -7649 -7654 0
8454 7654 0
8454 7649 0
8454 7650 0
8454 7652 0
8454 7640 0
8454 7640 7649 0
8454 7640 7650 0
8454 7640 7652 0
8454 7641 0
8454 7641 7649 0
8454 7641 7650 0
8454 7641 7652 0
c (((aux1878 + aux1881 + aux1882)<=1)=tv=SATLiteral(8455))
-8455 7679 0
-8455 7673 7678 0
-8455 7674 0
-8455 7676 0
-8455 7664 7678 0
-8455 7664 7673 0
-8455 7664 7674 0
-8455 7664 7676 0
-8455 7665 0
-8455 7665 7673 0
-8455 7665 7674 0
-8455 7665 7676 0
8455 -7665 -7673 -7678 0
8455 -7664 -7674 -7678 0
8455 -7664 -7673 -7679 0
c ((1<=(aux1878 + aux1881 + aux1882))=tv=SATLiteral(8456))
-8456 -7664 -7673 -7678 0
8456 7678 0
8456 7673 0
8456 7674 0
8456 7676 0
8456 7664 0
8456 7664 7673 0
8456 7664 7674 0
8456 7664 7676 0
8456 7665 0
8456 7665 7673 0
8456 7665 7674 0
8456 7665 7676 0
c (((aux1884 + aux1887 + aux1888)<=1)=tv=SATLiteral(8457))
-8457 7703 0
-8457 7697 7702 0
-8457 7698 0
-8457 7700 0
-8457 7688 7702 0
-8457 7688 7697 0
-8457 7688 7698 0
-8457 7688 7700 0
-8457 7689 0
-8457 7689 7697 0
-8457 7689 7698 0
-8457 7689 7700 0
8457 -7689 -7697 -7702 0
8457 -7688 -7698 -7702 0
8457 -7688 -7697 -7703 0
c ((1<=(aux1884 + aux1887 + aux1888))=tv=SATLiteral(8458))
-8458 -7688 -7697 -7702 0
8458 7702 0
8458 7697 0
8458 7698 0
8458 7700 0
8458 7688 0
8458 7688 7697 0
8458 7688 7698 0
8458 7688 7700 0
8458 7689 0
8458 7689 7697 0
8458 7689 7698 0
8458 7689 7700 0
c (((aux1890 + aux1893 + aux1894)<=1)=tv=SATLiteral(8459))
-8459 7727 0
-8459 7721 7726 0
-8459 7722 0
-8459 7724 0
-8459 7712 7726 0
-8459 7712 7721 0
-8459 7712 7722 0
-8459 7712 7724 0
-8459 7713 0
-8459 7713 7721 0
-8459 7713 7722 0
-8459 7713 7724 0
8459 -7713 -7721 -7726 0
8459 -7712 -7722 -7726 0
8459 -7712 -7721 -7727 0
c ((1<=(aux1890 + aux1893 + aux1894))=tv=SATLiteral(8460))
-8460 -7712 -7721 -7726 0
8460 7726 0
8460 7721 0
8460 7722 0
8460 7724 0
8460 7712 0
8460 7712 7721 0
8460 7712 7722 0
8460 7712 7724 0
8460 7713 0
8460 7713 7721 0
8460 7713 7722 0
8460 7713 7724 0
c (((aux1896 + aux1899 + aux1900)<=1)=tv=SATLiteral(8461))
-8461 7751 0
-8461 7745 7750 0
-8461 7746 0
-8461 7748 0
-8461 7736 7750 0
-8461 7736 7745 0
-8461 7736 7746 0
-8461 7736 7748 0
-8461 7737 0
-8461 7737 7745 0
-8461 7737 7746 0
-8461 7737 7748 0
8461 -7737 -7745 -7750 0
8461 -7736 -7746 -7750 0
8461 -7736 -7745 -7751 0
c ((1<=(aux1896 + aux1899 + aux1900))=tv=SATLiteral(8462))
-8462 -7736 -7745 -7750 0
8462 7750 0
8462 7745 0
8462 7746 0
8462 7748 0
8462 7736 0
8462 7736 7745 0
8462 7736 7746 0
8462 7736 7748 0
8462 7737 0
8462 7737 7745 0
8462 7737 7746 0
8462 7737 7748 0
c ((SATLiteral(7919) /\ SATLiteral(7920))=tv=SATLiteral(1302))
1302 -7919 -7920 0
7919 -1302 0
7920 -1302 0
c ((SATLiteral(7921) /\ SATLiteral(7922))=tv=SATLiteral(1303))
1303 -7921 -7922 0
7921 -1303 0
7922 -1303 0
c ((SATLiteral(7923) /\ SATLiteral(7924))=tv=SATLiteral(1304))
1304 -7923 -7924 0
7923 -1304 0
7924 -1304 0
c ((SATLiteral(7925) /\ SATLiteral(7926))=tv=SATLiteral(1305))
1305 -7925 -7926 0
7925 -1305 0
7926 -1305 0
c ((SATLiteral(7927) /\ SATLiteral(7928))=tv=SATLiteral(1306))
1306 -7927 -7928 0
7927 -1306 0
7928 -1306 0
c ((SATLiteral(7929) /\ SATLiteral(7930))=tv=SATLiteral(1307))
1307 -7929 -7930 0
7929 -1307 0
7930 -1307 0
c ((SATLiteral(7931) /\ SATLiteral(7932))=tv=SATLiteral(1308))
1308 -7931 -7932 0
7931 -1308 0
7932 -1308 0
c ((SATLiteral(7933) /\ SATLiteral(7934))=tv=SATLiteral(1309))
1309 -7933 -7934 0
7933 -1309 0
7934 -1309 0
c ((SATLiteral(7935) /\ SATLiteral(7936))=tv=SATLiteral(1310))
1310 -7935 -7936 0
7935 -1310 0
7936 -1310 0
c ((SATLiteral(7937) /\ SATLiteral(7938))=tv=SATLiteral(1311))
1311 -7937 -7938 0
7937 -1311 0
7938 -1311 0
c ((SATLiteral(7939) /\ SATLiteral(7940))=tv=SATLiteral(1312))
1312 -7939 -7940 0
7939 -1312 0
7940 -1312 0
c ((SATLiteral(7941) /\ SATLiteral(7942))=tv=SATLiteral(1313))
1313 -7941 -7942 0
7941 -1313 0
7942 -1313 0
c ((SATLiteral(7943) /\ SATLiteral(7944))=tv=SATLiteral(1314))
1314 -7943 -7944 0
7943 -1314 0
7944 -1314 0
c ((SATLiteral(7945) /\ SATLiteral(7946))=tv=SATLiteral(1315))
1315 -7945 -7946 0
7945 -1315 0
7946 -1315 0
c ((SATLiteral(7947) /\ SATLiteral(7948))=tv=SATLiteral(1316))
1316 -7947 -7948 0
7947 -1316 0
7948 -1316 0
c ((SATLiteral(7949) /\ SATLiteral(7950))=tv=SATLiteral(1317))
1317 -7949 -7950 0
7949 -1317 0
7950 -1317 0
c ((SATLiteral(7951) /\ SATLiteral(7952))=tv=SATLiteral(1318))
1318 -7951 -7952 0
7951 -1318 0
7952 -1318 0
c ((SATLiteral(7953) /\ SATLiteral(7954))=tv=SATLiteral(1319))
1319 -7953 -7954 0
7953 -1319 0
7954 -1319 0
c ((SATLiteral(7955) /\ SATLiteral(7956))=tv=SATLiteral(1320))
1320 -7955 -7956 0
7955 -1320 0
7956 -1320 0
c ((SATLiteral(7957) /\ SATLiteral(7958))=tv=SATLiteral(1321))
1321 -7957 -7958 0
7957 -1321 0
7958 -1321 0
c ((SATLiteral(7959) /\ SATLiteral(7960))=tv=SATLiteral(1322))
1322 -7959 -7960 0
7959 -1322 0
7960 -1322 0
c ((SATLiteral(7961) /\ SATLiteral(7962))=tv=SATLiteral(1323))
1323 -7961 -7962 0
7961 -1323 0
7962 -1323 0
c ((SATLiteral(7963) /\ SATLiteral(7964))=tv=SATLiteral(1324))
1324 -7963 -7964 0
7963 -1324 0
7964 -1324 0
c ((SATLiteral(7965) /\ SATLiteral(7966))=tv=SATLiteral(1325))
1325 -7965 -7966 0
7965 -1325 0
7966 -1325 0
c ((SATLiteral(7967) /\ SATLiteral(7968))=tv=SATLiteral(1326))
1326 -7967 -7968 0
7967 -1326 0
7968 -1326 0
c ((SATLiteral(7969) /\ SATLiteral(7970))=tv=SATLiteral(1327))
1327 -7969 -7970 0
7969 -1327 0
7970 -1327 0
c ((SATLiteral(7971) /\ SATLiteral(7972))=tv=SATLiteral(1328))
1328 -7971 -7972 0
7971 -1328 0
7972 -1328 0
c ((SATLiteral(7973) /\ SATLiteral(7974))=tv=SATLiteral(1329))
1329 -7973 -7974 0
7973 -1329 0
7974 -1329 0
c ((SATLiteral(7975) /\ SATLiteral(7976))=tv=SATLiteral(1330))
1330 -7975 -7976 0
7975 -1330 0
7976 -1330 0
c ((x_00001_00001 != x_00001_00002)=tv=SATLiteral(1331))
-2 17 1331 0
-4 19 1331 0
-6 21 1331 0
-8 23 1331 0
-10 25 1331 0
-12 27 1331 0
-14 29 1331 0
-16 31 1331 0
15 -30 1331 0
-17 2 1331 0
-19 4 1331 0
-21 6 1331 0
-23 8 1331 0
-25 10 1331 0
-27 12 1331 0
-29 14 1331 0
-31 16 1331 0
30 -15 1331 0
-2 -17 -1331 0
-4 -19 -1331 0
-6 -21 -1331 0
-8 -23 -1331 0
-10 -25 -1331 0
-12 -27 -1331 0
-14 -29 -1331 0
-16 -31 -1331 0
15 30 -1331 0
c ((x_00002_00007 != x_00001_00007)=tv=SATLiteral(1332))
-227 92 1332 0
-229 94 1332 0
-231 96 1332 0
-233 98 1332 0
-235 100 1332 0
-237 102 1332 0
-239 104 1332 0
-241 106 1332 0
240 -105 1332 0
-92 227 1332 0
-94 229 1332 0
-96 231 1332 0
-98 233 1332 0
-100 235 1332 0
-102 237 1332 0
-104 239 1332 0
-106 241 1332 0
105 -240 1332 0
-227 -92 -1332 0
-229 -94 -1332 0
-231 -96 -1332 0
-233 -98 -1332 0
-235 -100 -1332 0
-237 -102 -1332 0
-239 -104 -1332 0
-241 -106 -1332 0
240 105 -1332 0
c ((x_00002_00008 != x_00001_00008)=tv=SATLiteral(1333))
-242 107 1333 0
-244 109 1333 0
-246 111 1333 0
-248 113 1333 0
-250 115 1333 0
-252 117 1333 0
-254 119 1333 0
-256 121 1333 0
255 -120 1333 0
-107 242 1333 0
-109 244 1333 0
-111 246 1333 0
-113 248 1333 0
-115 250 1333 0
-117 252 1333 0
-119 254 1333 0
-121 256 1333 0
120 -255 1333 0
-242 -107 -1333 0
-244 -109 -1333 0
-246 -111 -1333 0
-248 -113 -1333 0
-250 -115 -1333 0
-252 -117 -1333 0
-254 -119 -1333 0
-256 -121 -1333 0
255 120 -1333 0
c ((x_00002_00003 != x_00002_00004)=tv=SATLiteral(1334))
-167 182 1334 0
-169 184 1334 0
-171 186 1334 0
-173 188 1334 0
-175 190 1334 0
-177 192 1334 0
-179 194 1334 0
-181 196 1334 0
180 -195 1334 0
-182 167 1334 0
-184 169 1334 0
-186 171 1334 0
-188 173 1334 0
-190 175 1334 0
-192 177 1334 0
-194 179 1334 0
-196 181 1334 0
195 -180 1334 0
-167 -182 -1334 0
-169 -184 -1334 0
-171 -186 -1334 0
-173 -188 -1334 0
-175 -190 -1334 0
-177 -192 -1334 0
-179 -194 -1334 0
-181 -196 -1334 0
180 195 -1334 0
c ((x_00004_00001 != x_00005_00001)=tv=SATLiteral(1335))
-407 542 1335 0
-409 544 1335 0
-411 546 1335 0
-413 548 1335 0
-415 550 1335 0
-417 552 1335 0
-419 554 1335 0
-421 556 1335 0
420 -555 1335 0
-542 407 1335 0
-544 409 1335 0
-546 411 1335 0
-548 413 1335 0
-550 415 1335 0
-552 417 1335 0
-554 419 1335 0
-556 421 1335 0
555 -420 1335 0
-407 -542 -1335 0
-409 -544 -1335 0
-411 -546 -1335 0
-413 -548 -1335 0
-415 -550 -1335 0
-417 -552 -1335 0
-419 -554 -1335 0
-421 -556 -1335 0
420 555 -1335 0
c ((x_00004_00002 != x_00004_00003)=tv=SATLiteral(1336))
-422 437 1336 0
-424 439 1336 0
-426 441 1336 0
-428 443 1336 0
-430 445 1336 0
-432 447 1336 0
-434 449 1336 0
-436 451 1336 0
435 -450 1336 0
-437 422 1336 0
-439 424 1336 0
-441 426 1336 0
-443 428 1336 0
-445 430 1336 0
-447 432 1336 0
-449 434 1336 0
-451 436 1336 0
450 -435 1336 0
-422 -437 -1336 0
-424 -439 -1336 0
-426 -441 -1336 0
-428 -443 -1336 0
-430 -445 -1336 0
-432 -447 -1336 0
-434 -449 -1336 0
-436 -451 -1336 0
435 450 -1336 0
c ((x_00005_00009 != x_00006_00009)=tv=SATLiteral(1337))
-662 797 1337 0
-664 799 1337 0
-666 801 1337 0
-668 803 1337 0
-670 805 1337 0
-672 807 1337 0
-674 809 1337 0
-676 811 1337 0
675 -810 1337 0
-797 662 1337 0
-799 664 1337 0
-801 666 1337 0
-803 668 1337 0
-805 670 1337 0
-807 672 1337 0
-809 674 1337 0
-811 676 1337 0
810 -675 1337 0
-662 -797 -1337 0
-664 -799 -1337 0
-666 -801 -1337 0
-668 -803 -1337 0
-670 -805 -1337 0
-672 -807 -1337 0
-674 -809 -1337 0
-676 -811 -1337 0
675 810 -1337 0
c ((x_00006_00007 != x_00006_00008)=tv=SATLiteral(1338))
-767 782 1338 0
-769 784 1338 0
-771 786 1338 0
-773 788 1338 0
-775 790 1338 0
-777 792 1338 0
-779 794 1338 0
-781 796 1338 0
780 -795 1338 0
-782 767 1338 0
-784 769 1338 0
-786 771 1338 0
-788 773 1338 0
-790 775 1338 0
-792 777 1338 0
-794 779 1338 0
-796 781 1338 0
795 -780 1338 0
-767 -782 -1338 0
-769 -784 -1338 0
-771 -786 -1338 0
-773 -788 -1338 0
-775 -790 -1338 0
-777 -792 -1338 0
-779 -794 -1338 0
-781 -796 -1338 0
780 795 -1338 0
c ((x_00008_00002 != x_00009_00002)=tv=SATLiteral(1339))
-962 1097 1339 0
-964 1099 1339 0
-966 1101 1339 0
-968 1103 1339 0
-970 1105 1339 0
-972 1107 1339 0
-974 1109 1339 0
-976 1111 1339 0
975 -1110 1339 0
-1097 962 1339 0
-1099 964 1339 0
-1101 966 1339 0
-1103 968 1339 0
-1105 970 1339 0
-1107 972 1339 0
-1109 974 1339 0
-1111 976 1339 0
1110 -975 1339 0
-962 -1097 -1339 0
-964 -1099 -1339 0
-966 -1101 -1339 0
-968 -1103 -1339 0
-970 -1105 -1339 0
-972 -1107 -1339 0
-974 -1109 -1339 0
-976 -1111 -1339 0
975 1110 -1339 0
c ((x_00008_00003 != x_00009_00003)=tv=SATLiteral(1340))
-977 1112 1340 0
-979 1114 1340 0
-981 1116 1340 0
-983 1118 1340 0
-985 1120 1340 0
-987 1122 1340 0
-989 1124 1340 0
-991 1126 1340 0
990 -1125 1340 0
-1112 977 1340 0
-1114 979 1340 0
-1116 981 1340 0
-1118 983 1340 0
-1120 985 1340 0
-1122 987 1340 0
-1124 989 1340 0
-1126 991 1340 0
1125 -990 1340 0
-977 -1112 -1340 0
-979 -1114 -1340 0
-981 -1116 -1340 0
-983 -1118 -1340 0
-985 -1120 -1340 0
-987 -1122 -1340 0
-989 -1124 -1340 0
-991 -1126 -1340 0
990 1125 -1340 0
c ((x_00008_00006 != x_00008_00007)=tv=SATLiteral(1341))
-1022 1037 1341 0
-1024 1039 1341 0
-1026 1041 1341 0
-1028 1043 1341 0
-1030 1045 1341 0
-1032 1047 1341 0
-1034 1049 1341 0
-1036 1051 1341 0
1035 -1050 1341 0
-1037 1022 1341 0
-1039 1024 1341 0
-1041 1026 1341 0
-1043 1028 1341 0
-1045 1030 1341 0
-1047 1032 1341 0
-1049 1034 1341 0
-1051 1036 1341 0
1050 -1035 1341 0
-1022 -1037 -1341 0
-1024 -1039 -1341 0
-1026 -1041 -1341 0
-1028 -1043 -1341 0
-1030 -1045 -1341 0
-1032 -1047 -1341 0
-1034 -1049 -1341 0
-1036 -1051 -1341 0
1035 1050 -1341 0
c ((x_00009_00008 != x_00009_00009)=tv=SATLiteral(1342))
-1187 1202 1342 0
-1189 1204 1342 0
-1191 1206 1342 0
-1193 1208 1342 0
-1195 1210 1342 0
-1197 1212 1342 0
-1199 1214 1342 0
-1201 1216 1342 0
1200 -1215 1342 0
-1202 1187 1342 0
-1204 1189 1342 0
-1206 1191 1342 0
-1208 1193 1342 0
-1210 1195 1342 0
-1212 1197 1342 0
-1214 1199 1342 0
-1216 1201 1342 0
1215 -1200 1342 0
-1187 -1202 -1342 0
-1189 -1204 -1342 0
-1191 -1206 -1342 0
-1193 -1208 -1342 0
-1195 -1210 -1342 0
-1197 -1212 -1342 0
-1199 -1214 -1342 0
-1201 -1216 -1342 0
1200 1215 -1342 0
c ((SATLiteral(7977) /\ SATLiteral(7978))=tv=SATLiteral(1343))
1343 -7977 -7978 0
7977 -1343 0
7978 -1343 0
c ((SATLiteral(7979) /\ SATLiteral(7980))=tv=SATLiteral(1344))
1344 -7979 -7980 0
7979 -1344 0
7980 -1344 0
c ((SATLiteral(7981) /\ SATLiteral(7982))=tv=SATLiteral(1345))
1345 -7981 -7982 0
7981 -1345 0
7982 -1345 0
c ((SATLiteral(7983) /\ SATLiteral(7984))=tv=SATLiteral(1346))
1346 -7983 -7984 0
7983 -1346 0
7984 -1346 0
c ((SATLiteral(7985) /\ SATLiteral(7986))=tv=SATLiteral(1347))
1347 -7985 -7986 0
7985 -1347 0
7986 -1347 0
c ((SATLiteral(7987) /\ SATLiteral(7988))=tv=SATLiteral(1348))
1348 -7987 -7988 0
7987 -1348 0
7988 -1348 0
c ((SATLiteral(7989) /\ SATLiteral(7990))=tv=SATLiteral(1349))
1349 -7989 -7990 0
7989 -1349 0
7990 -1349 0
c ((SATLiteral(7991) /\ SATLiteral(7992))=tv=SATLiteral(1350))
1350 -7991 -7992 0
7991 -1350 0
7992 -1350 0
c ((SATLiteral(7993) /\ SATLiteral(7994))=tv=SATLiteral(1351))
1351 -7993 -7994 0
7993 -1351 0
7994 -1351 0
c ((SATLiteral(7995) /\ SATLiteral(7996))=tv=SATLiteral(1352))
1352 -7995 -7996 0
7995 -1352 0
7996 -1352 0
c ((SATLiteral(7997) /\ SATLiteral(7998))=tv=SATLiteral(1353))
1353 -7997 -7998 0
7997 -1353 0
7998 -1353 0
c ((SATLiteral(7999) /\ SATLiteral(8000))=tv=SATLiteral(1354))
1354 -7999 -8000 0
7999 -1354 0
8000 -1354 0
c ((SATLiteral(8001) /\ SATLiteral(8002))=tv=SATLiteral(1355))
1355 -8001 -8002 0
8001 -1355 0
8002 -1355 0
c ((SATLiteral(8003) /\ SATLiteral(8004))=tv=SATLiteral(1356))
1356 -8003 -8004 0
8003 -1356 0
8004 -1356 0
c ((SATLiteral(8005) /\ SATLiteral(8006))=tv=SATLiteral(1357))
1357 -8005 -8006 0
8005 -1357 0
8006 -1357 0
c ((SATLiteral(8007) /\ SATLiteral(8008))=tv=SATLiteral(1358))
1358 -8007 -8008 0
8007 -1358 0
8008 -1358 0
c ((SATLiteral(8009) /\ SATLiteral(8010))=tv=SATLiteral(1359))
1359 -8009 -8010 0
8009 -1359 0
8010 -1359 0
c ((SATLiteral(8011) /\ SATLiteral(8012))=tv=SATLiteral(1360))
1360 -8011 -8012 0
8011 -1360 0
8012 -1360 0
c ((SATLiteral(8013) /\ SATLiteral(8014))=tv=SATLiteral(1361))
1361 -8013 -8014 0
8013 -1361 0
8014 -1361 0
c ((SATLiteral(8015) /\ SATLiteral(8016))=tv=SATLiteral(1362))
1362 -8015 -8016 0
8015 -1362 0
8016 -1362 0
c ((SATLiteral(8017) /\ SATLiteral(8018))=tv=SATLiteral(1363))
1363 -8017 -8018 0
8017 -1363 0
8018 -1363 0
c ((SATLiteral(8019) /\ SATLiteral(8020))=tv=SATLiteral(1364))
1364 -8019 -8020 0
8019 -1364 0
8020 -1364 0
c ((SATLiteral(8021) /\ SATLiteral(8022))=tv=SATLiteral(1365))
1365 -8021 -8022 0
8021 -1365 0
8022 -1365 0
c ((SATLiteral(8023) /\ SATLiteral(8024))=tv=SATLiteral(1366))
1366 -8023 -8024 0
8023 -1366 0
8024 -1366 0
c ((SATLiteral(8025) /\ SATLiteral(8026))=tv=SATLiteral(1367))
1367 -8025 -8026 0
8025 -1367 0
8026 -1367 0
c ((SATLiteral(8027) /\ SATLiteral(8028))=tv=SATLiteral(1368))
1368 -8027 -8028 0
8027 -1368 0
8028 -1368 0
c ((SATLiteral(8029) /\ SATLiteral(8030))=tv=SATLiteral(1369))
1369 -8029 -8030 0
8029 -1369 0
8030 -1369 0
c ((SATLiteral(8031) /\ SATLiteral(8032))=tv=SATLiteral(1370))
1370 -8031 -8032 0
8031 -1370 0
8032 -1370 0
c ((SATLiteral(8033) /\ SATLiteral(8034))=tv=SATLiteral(1371))
1371 -8033 -8034 0
8033 -1371 0
8034 -1371 0
c ((SATLiteral(8035) /\ SATLiteral(8036))=tv=SATLiteral(1372))
1372 -8035 -8036 0
8035 -1372 0
8036 -1372 0
c ((SATLiteral(8037) /\ SATLiteral(8038))=tv=SATLiteral(1373))
1373 -8037 -8038 0
8037 -1373 0
8038 -1373 0
c ((SATLiteral(8039) /\ SATLiteral(8040))=tv=SATLiteral(1374))
1374 -8039 -8040 0
8039 -1374 0
8040 -1374 0
c ((SATLiteral(8041) /\ SATLiteral(8042))=tv=SATLiteral(1375))
1375 -8041 -8042 0
8041 -1375 0
8042 -1375 0
c ((SATLiteral(8043) /\ SATLiteral(8044))=tv=SATLiteral(1376))
1376 -8043 -8044 0
8043 -1376 0
8044 -1376 0
c ((SATLiteral(8045) /\ SATLiteral(8046))=tv=SATLiteral(1377))
1377 -8045 -8046 0
8045 -1377 0
8046 -1377 0
c ((SATLiteral(8047) /\ SATLiteral(8048))=tv=SATLiteral(1378))
1378 -8047 -8048 0
8047 -1378 0
8048 -1378 0
c ((SATLiteral(8049) /\ SATLiteral(8050))=tv=SATLiteral(1379))
1379 -8049 -8050 0
8049 -1379 0
8050 -1379 0
c ((SATLiteral(8051) /\ SATLiteral(8052))=tv=SATLiteral(1380))
1380 -8051 -8052 0
8051 -1380 0
8052 -1380 0
c ((SATLiteral(8053) /\ SATLiteral(8054))=tv=SATLiteral(1381))
1381 -8053 -8054 0
8053 -1381 0
8054 -1381 0
c ((SATLiteral(8055) /\ SATLiteral(8056))=tv=SATLiteral(1382))
1382 -8055 -8056 0
8055 -1382 0
8056 -1382 0
c ((SATLiteral(8057) /\ SATLiteral(8058))=tv=SATLiteral(1383))
1383 -8057 -8058 0
8057 -1383 0
8058 -1383 0
c ((SATLiteral(8059) /\ SATLiteral(8060))=tv=SATLiteral(1384))
1384 -8059 -8060 0
8059 -1384 0
8060 -1384 0
c ((SATLiteral(8061) /\ SATLiteral(8062))=tv=SATLiteral(1385))
1385 -8061 -8062 0
8061 -1385 0
8062 -1385 0
c ((SATLiteral(8063) /\ SATLiteral(8064))=tv=SATLiteral(1386))
1386 -8063 -8064 0
8063 -1386 0
8064 -1386 0
c ((SATLiteral(8065) /\ SATLiteral(8066))=tv=SATLiteral(1387))
1387 -8065 -8066 0
8065 -1387 0
8066 -1387 0
c ((SATLiteral(8067) /\ SATLiteral(8068))=tv=SATLiteral(1388))
1388 -8067 -8068 0
8067 -1388 0
8068 -1388 0
c ((SATLiteral(8069) /\ SATLiteral(8070))=tv=SATLiteral(1389))
1389 -8069 -8070 0
8069 -1389 0
8070 -1389 0
c ((SATLiteral(8071) /\ SATLiteral(8072))=tv=SATLiteral(1390))
1390 -8071 -8072 0
8071 -1390 0
8072 -1390 0
c ((SATLiteral(8073) /\ SATLiteral(8074))=tv=SATLiteral(1391))
1391 -8073 -8074 0
8073 -1391 0
8074 -1391 0
c ((SATLiteral(8075) /\ SATLiteral(8076))=tv=SATLiteral(1392))
1392 -8075 -8076 0
8075 -1392 0
8076 -1392 0
c ((SATLiteral(8077) /\ SATLiteral(8078))=tv=SATLiteral(1393))
1393 -8077 -8078 0
8077 -1393 0
8078 -1393 0
c ((SATLiteral(8079) /\ SATLiteral(8080))=tv=SATLiteral(1394))
1394 -8079 -8080 0
8079 -1394 0
8080 -1394 0
c ((SATLiteral(8081) /\ SATLiteral(8082))=tv=SATLiteral(1395))
1395 -8081 -8082 0
8081 -1395 0
8082 -1395 0
c ((SATLiteral(8083) /\ SATLiteral(8084))=tv=SATLiteral(1396))
1396 -8083 -8084 0
8083 -1396 0
8084 -1396 0
c ((SATLiteral(8085) /\ SATLiteral(8086))=tv=SATLiteral(1397))
1397 -8085 -8086 0
8085 -1397 0
8086 -1397 0
c ((SATLiteral(8087) /\ SATLiteral(8088))=tv=SATLiteral(1398))
1398 -8087 -8088 0
8087 -1398 0
8088 -1398 0
c ((SATLiteral(8089) /\ SATLiteral(8090))=tv=SATLiteral(1399))
1399 -8089 -8090 0
8089 -1399 0
8090 -1399 0
c ((SATLiteral(8091) /\ SATLiteral(8092))=tv=SATLiteral(1400))
1400 -8091 -8092 0
8091 -1400 0
8092 -1400 0
c ((SATLiteral(8093) /\ SATLiteral(8094))=tv=SATLiteral(1401))
1401 -8093 -8094 0
8093 -1401 0
8094 -1401 0
c ((SATLiteral(8095) /\ SATLiteral(8096))=tv=SATLiteral(1402))
1402 -8095 -8096 0
8095 -1402 0
8096 -1402 0
c ((SATLiteral(8097) /\ SATLiteral(8098))=tv=SATLiteral(1403))
1403 -8097 -8098 0
8097 -1403 0
8098 -1403 0
c ((SATLiteral(8099) /\ SATLiteral(8100))=tv=SATLiteral(1404))
1404 -8099 -8100 0
8099 -1404 0
8100 -1404 0
c ((SATLiteral(8101) /\ SATLiteral(8102))=tv=SATLiteral(1405))
1405 -8101 -8102 0
8101 -1405 0
8102 -1405 0
c ((SATLiteral(8103) /\ SATLiteral(8104))=tv=SATLiteral(1406))
1406 -8103 -8104 0
8103 -1406 0
8104 -1406 0
c ((SATLiteral(8105) /\ SATLiteral(8106))=tv=SATLiteral(1407))
1407 -8105 -8106 0
8105 -1407 0
8106 -1407 0
c ((SATLiteral(8107) /\ SATLiteral(8108))=tv=SATLiteral(1408))
1408 -8107 -8108 0
8107 -1408 0
8108 -1408 0
c ((SATLiteral(8109) /\ SATLiteral(8110))=tv=SATLiteral(1409))
1409 -8109 -8110 0
8109 -1409 0
8110 -1409 0
c ((SATLiteral(8111) /\ SATLiteral(8112))=tv=SATLiteral(1410))
1410 -8111 -8112 0
8111 -1410 0
8112 -1410 0
c ((SATLiteral(8113) /\ SATLiteral(8114))=tv=SATLiteral(1411))
1411 -8113 -8114 0
8113 -1411 0
8114 -1411 0
c ((SATLiteral(8115) /\ SATLiteral(8116))=tv=SATLiteral(1412))
1412 -8115 -8116 0
8115 -1412 0
8116 -1412 0
c ((SATLiteral(8117) /\ SATLiteral(8118))=tv=SATLiteral(1413))
1413 -8117 -8118 0
8117 -1413 0
8118 -1413 0
c ((SATLiteral(8119) /\ SATLiteral(8120))=tv=SATLiteral(1414))
1414 -8119 -8120 0
8119 -1414 0
8120 -1414 0
c ((SATLiteral(8121) /\ SATLiteral(8122))=tv=SATLiteral(1415))
1415 -8121 -8122 0
8121 -1415 0
8122 -1415 0
c ((SATLiteral(8123) /\ SATLiteral(8124))=tv=SATLiteral(1416))
1416 -8123 -8124 0
8123 -1416 0
8124 -1416 0
c ((SATLiteral(8125) /\ SATLiteral(8126))=tv=SATLiteral(1417))
1417 -8125 -8126 0
8125 -1417 0
8126 -1417 0
c ((SATLiteral(8127) /\ SATLiteral(8128))=tv=SATLiteral(1418))
1418 -8127 -8128 0
8127 -1418 0
8128 -1418 0
c ((SATLiteral(8129) /\ SATLiteral(8130))=tv=SATLiteral(1419))
1419 -8129 -8130 0
8129 -1419 0
8130 -1419 0
c ((SATLiteral(8131) /\ SATLiteral(8132))=tv=SATLiteral(1420))
1420 -8131 -8132 0
8131 -1420 0
8132 -1420 0
c ((SATLiteral(8133) /\ SATLiteral(8134))=tv=SATLiteral(1421))
1421 -8133 -8134 0
8133 -1421 0
8134 -1421 0
c ((SATLiteral(8135) /\ SATLiteral(8136))=tv=SATLiteral(1422))
1422 -8135 -8136 0
8135 -1422 0
8136 -1422 0
c ((SATLiteral(8137) /\ SATLiteral(8138))=tv=SATLiteral(1423))
1423 -8137 -8138 0
8137 -1423 0
8138 -1423 0
c ((SATLiteral(8139) /\ SATLiteral(8140))=tv=SATLiteral(1424))
1424 -8139 -8140 0
8139 -1424 0
8140 -1424 0
c ((SATLiteral(8141) /\ SATLiteral(8142))=tv=SATLiteral(1425))
1425 -8141 -8142 0
8141 -1425 0
8142 -1425 0
c ((SATLiteral(8143) /\ SATLiteral(8144))=tv=SATLiteral(1426))
1426 -8143 -8144 0
8143 -1426 0
8144 -1426 0
c ((SATLiteral(8145) /\ SATLiteral(8146))=tv=SATLiteral(1427))
1427 -8145 -8146 0
8145 -1427 0
8146 -1427 0
c ((SATLiteral(8147) /\ SATLiteral(8148))=tv=SATLiteral(1428))
1428 -8147 -8148 0
8147 -1428 0
8148 -1428 0
c ((SATLiteral(8149) /\ SATLiteral(8150))=tv=SATLiteral(1429))
1429 -8149 -8150 0
8149 -1429 0
8150 -1429 0
c ((SATLiteral(8151) /\ SATLiteral(8152))=tv=SATLiteral(1430))
1430 -8151 -8152 0
8151 -1430 0
8152 -1430 0
c ((SATLiteral(8153) /\ SATLiteral(8154))=tv=SATLiteral(1431))
1431 -8153 -8154 0
8153 -1431 0
8154 -1431 0
c ((SATLiteral(8155) /\ SATLiteral(8156))=tv=SATLiteral(1432))
1432 -8155 -8156 0
8155 -1432 0
8156 -1432 0
c ((SATLiteral(8157) /\ SATLiteral(8158))=tv=SATLiteral(1433))
1433 -8157 -8158 0
8157 -1433 0
8158 -1433 0
c ((SATLiteral(8159) /\ SATLiteral(8160))=tv=SATLiteral(1434))
1434 -8159 -8160 0
8159 -1434 0
8160 -1434 0
c ((SATLiteral(8161) /\ SATLiteral(8162))=tv=SATLiteral(1435))
1435 -8161 -8162 0
8161 -1435 0
8162 -1435 0
c ((SATLiteral(8163) /\ SATLiteral(8164))=tv=SATLiteral(1436))
1436 -8163 -8164 0
8163 -1436 0
8164 -1436 0
c ((SATLiteral(8165) /\ SATLiteral(8166))=tv=SATLiteral(1437))
1437 -8165 -8166 0
8165 -1437 0
8166 -1437 0
c ((SATLiteral(8167) /\ SATLiteral(8168))=tv=SATLiteral(1438))
1438 -8167 -8168 0
8167 -1438 0
8168 -1438 0
c ((SATLiteral(8169) /\ SATLiteral(8170))=tv=SATLiteral(1439))
1439 -8169 -8170 0
8169 -1439 0
8170 -1439 0
c ((SATLiteral(8171) /\ SATLiteral(8172))=tv=SATLiteral(1440))
1440 -8171 -8172 0
8171 -1440 0
8172 -1440 0
c ((SATLiteral(8173) /\ SATLiteral(8174))=tv=SATLiteral(1441))
1441 -8173 -8174 0
8173 -1441 0
8174 -1441 0
c ((SATLiteral(8175) /\ SATLiteral(8176))=tv=SATLiteral(1442))
1442 -8175 -8176 0
8175 -1442 0
8176 -1442 0
c ((SATLiteral(8177) /\ SATLiteral(8178))=tv=SATLiteral(1443))
1443 -8177 -8178 0
8177 -1443 0
8178 -1443 0
c ((SATLiteral(8179) /\ SATLiteral(8180))=tv=SATLiteral(1444))
1444 -8179 -8180 0
8179 -1444 0
8180 -1444 0
c ((SATLiteral(8181) /\ SATLiteral(8182))=tv=SATLiteral(1445))
1445 -8181 -8182 0
8181 -1445 0
8182 -1445 0
c ((SATLiteral(8183) /\ SATLiteral(8184))=tv=SATLiteral(1446))
1446 -8183 -8184 0
8183 -1446 0
8184 -1446 0
c ((SATLiteral(8185) /\ SATLiteral(8186))=tv=SATLiteral(1447))
1447 -8185 -8186 0
8185 -1447 0
8186 -1447 0
c ((SATLiteral(8187) /\ SATLiteral(8188))=tv=SATLiteral(1448))
1448 -8187 -8188 0
8187 -1448 0
8188 -1448 0
c ((SATLiteral(8189) /\ SATLiteral(8190))=tv=SATLiteral(1449))
1449 -8189 -8190 0
8189 -1449 0
8190 -1449 0
c ((SATLiteral(8191) /\ SATLiteral(8192))=tv=SATLiteral(1450))
1450 -8191 -8192 0
8191 -1450 0
8192 -1450 0
c ((SATLiteral(8193) /\ SATLiteral(8194))=tv=SATLiteral(1451))
1451 -8193 -8194 0
8193 -1451 0
8194 -1451 0
c ((SATLiteral(8195) /\ SATLiteral(8196))=tv=SATLiteral(1452))
1452 -8195 -8196 0
8195 -1452 0
8196 -1452 0
c ((SATLiteral(8197) /\ SATLiteral(8198))=tv=SATLiteral(1453))
1453 -8197 -8198 0
8197 -1453 0
8198 -1453 0
c ((SATLiteral(8199) /\ SATLiteral(8200))=tv=SATLiteral(1454))
1454 -8199 -8200 0
8199 -1454 0
8200 -1454 0
c ((SATLiteral(8201) /\ SATLiteral(8202))=tv=SATLiteral(1455))
1455 -8201 -8202 0
8201 -1455 0
8202 -1455 0
c ((SATLiteral(8203) /\ SATLiteral(8204))=tv=SATLiteral(1456))
1456 -8203 -8204 0
8203 -1456 0
8204 -1456 0
c ((SATLiteral(8205) /\ SATLiteral(8206))=tv=SATLiteral(1457))
1457 -8205 -8206 0
8205 -1457 0
8206 -1457 0
c ((SATLiteral(8207) /\ SATLiteral(8208))=tv=SATLiteral(1458))
1458 -8207 -8208 0
8207 -1458 0
8208 -1458 0
c ((SATLiteral(8209) /\ SATLiteral(8210))=tv=SATLiteral(1459))
1459 -8209 -8210 0
8209 -1459 0
8210 -1459 0
c ((SATLiteral(8211) /\ SATLiteral(8212))=tv=SATLiteral(1460))
1460 -8211 -8212 0
8211 -1460 0
8212 -1460 0
c ((SATLiteral(8213) /\ SATLiteral(8214))=tv=SATLiteral(1461))
1461 -8213 -8214 0
8213 -1461 0
8214 -1461 0
c ((SATLiteral(8215) /\ SATLiteral(8216))=tv=SATLiteral(1462))
1462 -8215 -8216 0
8215 -1462 0
8216 -1462 0
c ((SATLiteral(8217) /\ SATLiteral(8218))=tv=SATLiteral(1463))
1463 -8217 -8218 0
8217 -1463 0
8218 -1463 0
c ((SATLiteral(8219) /\ SATLiteral(8220))=tv=SATLiteral(1464))
1464 -8219 -8220 0
8219 -1464 0
8220 -1464 0
c ((SATLiteral(8221) /\ SATLiteral(8222))=tv=SATLiteral(1465))
1465 -8221 -8222 0
8221 -1465 0
8222 -1465 0
c ((SATLiteral(8223) /\ SATLiteral(8224))=tv=SATLiteral(1466))
1466 -8223 -8224 0
8223 -1466 0
8224 -1466 0
c ((SATLiteral(8225) /\ SATLiteral(8226))=tv=SATLiteral(1467))
1467 -8225 -8226 0
8225 -1467 0
8226 -1467 0
c ((SATLiteral(8227) /\ SATLiteral(8228))=tv=SATLiteral(1468))
1468 -8227 -8228 0
8227 -1468 0
8228 -1468 0
c ((SATLiteral(8229) /\ SATLiteral(8230))=tv=SATLiteral(1469))
1469 -8229 -8230 0
8229 -1469 0
8230 -1469 0
c ((SATLiteral(8231) /\ SATLiteral(8232))=tv=SATLiteral(1470))
1470 -8231 -8232 0
8231 -1470 0
8232 -1470 0
c ((SATLiteral(8233) /\ SATLiteral(8234))=tv=SATLiteral(1471))
1471 -8233 -8234 0
8233 -1471 0
8234 -1471 0
c ((SATLiteral(8235) /\ SATLiteral(8236))=tv=SATLiteral(1472))
1472 -8235 -8236 0
8235 -1472 0
8236 -1472 0
c ((SATLiteral(8237) /\ SATLiteral(8238))=tv=SATLiteral(1473))
1473 -8237 -8238 0
8237 -1473 0
8238 -1473 0
c ((SATLiteral(8239) /\ SATLiteral(8240))=tv=SATLiteral(1474))
1474 -8239 -8240 0
8239 -1474 0
8240 -1474 0
c ((SATLiteral(8241) /\ SATLiteral(8242))=tv=SATLiteral(1475))
1475 -8241 -8242 0
8241 -1475 0
8242 -1475 0
c ((SATLiteral(8243) /\ SATLiteral(8244))=tv=SATLiteral(1476))
1476 -8243 -8244 0
8243 -1476 0
8244 -1476 0
c ((SATLiteral(8245) /\ SATLiteral(8246))=tv=SATLiteral(1477))
1477 -8245 -8246 0
8245 -1477 0
8246 -1477 0
c ((SATLiteral(8247) /\ SATLiteral(8248))=tv=SATLiteral(1478))
1478 -8247 -8248 0
8247 -1478 0
8248 -1478 0
c ((SATLiteral(8249) /\ SATLiteral(8250))=tv=SATLiteral(1479))
1479 -8249 -8250 0
8249 -1479 0
8250 -1479 0
c ((SATLiteral(8251) /\ SATLiteral(8252))=tv=SATLiteral(1480))
1480 -8251 -8252 0
8251 -1480 0
8252 -1480 0
c ((SATLiteral(8253) /\ SATLiteral(8254))=tv=SATLiteral(1481))
1481 -8253 -8254 0
8253 -1481 0
8254 -1481 0
c ((SATLiteral(8255) /\ SATLiteral(8256))=tv=SATLiteral(1482))
1482 -8255 -8256 0
8255 -1482 0
8256 -1482 0
c ((SATLiteral(8257) /\ SATLiteral(8258))=tv=SATLiteral(1483))
1483 -8257 -8258 0
8257 -1483 0
8258 -1483 0
c ((SATLiteral(8259) /\ SATLiteral(8260))=tv=SATLiteral(1484))
1484 -8259 -8260 0
8259 -1484 0
8260 -1484 0
c ((SATLiteral(8261) /\ SATLiteral(8262))=tv=SATLiteral(1485))
1485 -8261 -8262 0
8261 -1485 0
8262 -1485 0
c ((SATLiteral(8263) /\ SATLiteral(8264))=tv=SATLiteral(1486))
1486 -8263 -8264 0
8263 -1486 0
8264 -1486 0
c ((SATLiteral(8265) /\ SATLiteral(8266))=tv=SATLiteral(1487))
1487 -8265 -8266 0
8265 -1487 0
8266 -1487 0
c ((SATLiteral(8267) /\ SATLiteral(8268))=tv=SATLiteral(1488))
1488 -8267 -8268 0
8267 -1488 0
8268 -1488 0
c ((SATLiteral(8269) /\ SATLiteral(8270))=tv=SATLiteral(1489))
1489 -8269 -8270 0
8269 -1489 0
8270 -1489 0
c ((SATLiteral(8271) /\ SATLiteral(8272))=tv=SATLiteral(1490))
1490 -8271 -8272 0
8271 -1490 0
8272 -1490 0
c ((SATLiteral(8273) /\ SATLiteral(8274))=tv=SATLiteral(1491))
1491 -8273 -8274 0
8273 -1491 0
8274 -1491 0
c ((SATLiteral(8275) /\ SATLiteral(8276))=tv=SATLiteral(1492))
1492 -8275 -8276 0
8275 -1492 0
8276 -1492 0
c ((SATLiteral(8277) /\ SATLiteral(8278))=tv=SATLiteral(1493))
1493 -8277 -8278 0
8277 -1493 0
8278 -1493 0
c ((SATLiteral(8279) /\ SATLiteral(8280))=tv=SATLiteral(1494))
1494 -8279 -8280 0
8279 -1494 0
8280 -1494 0
c ((SATLiteral(8281) /\ SATLiteral(8282))=tv=SATLiteral(1495))
1495 -8281 -8282 0
8281 -1495 0
8282 -1495 0
c ((SATLiteral(8283) /\ SATLiteral(8284))=tv=SATLiteral(1496))
1496 -8283 -8284 0
8283 -1496 0
8284 -1496 0
c ((SATLiteral(8285) /\ SATLiteral(8286))=tv=SATLiteral(1497))
1497 -8285 -8286 0
8285 -1497 0
8286 -1497 0
c ((SATLiteral(8287) /\ SATLiteral(8288))=tv=SATLiteral(1498))
1498 -8287 -8288 0
8287 -1498 0
8288 -1498 0
c ((SATLiteral(8289) /\ SATLiteral(8290))=tv=SATLiteral(1499))
1499 -8289 -8290 0
8289 -1499 0
8290 -1499 0
c ((SATLiteral(8291) /\ SATLiteral(8292))=tv=SATLiteral(1500))
1500 -8291 -8292 0
8291 -1500 0
8292 -1500 0
c ((SATLiteral(8293) /\ SATLiteral(8294))=tv=SATLiteral(1501))
1501 -8293 -8294 0
8293 -1501 0
8294 -1501 0
c ((SATLiteral(8295) /\ SATLiteral(8296))=tv=SATLiteral(1502))
1502 -8295 -8296 0
8295 -1502 0
8296 -1502 0
c ((SATLiteral(8297) /\ SATLiteral(8298))=tv=SATLiteral(1503))
1503 -8297 -8298 0
8297 -1503 0
8298 -1503 0
c ((SATLiteral(8299) /\ SATLiteral(8300))=tv=SATLiteral(1504))
1504 -8299 -8300 0
8299 -1504 0
8300 -1504 0
c ((SATLiteral(8301) /\ SATLiteral(8302))=tv=SATLiteral(1505))
1505 -8301 -8302 0
8301 -1505 0
8302 -1505 0
c ((SATLiteral(8303) /\ SATLiteral(8304))=tv=SATLiteral(1506))
1506 -8303 -8304 0
8303 -1506 0
8304 -1506 0
c ((SATLiteral(8305) /\ SATLiteral(8306))=tv=SATLiteral(1507))
1507 -8305 -8306 0
8305 -1507 0
8306 -1507 0
c ((SATLiteral(8307) /\ SATLiteral(8308))=tv=SATLiteral(1508))
1508 -8307 -8308 0
8307 -1508 0
8308 -1508 0
c ((SATLiteral(8309) /\ SATLiteral(8310))=tv=SATLiteral(1509))
1509 -8309 -8310 0
8309 -1509 0
8310 -1509 0
c ((SATLiteral(8311) /\ SATLiteral(8312))=tv=SATLiteral(1510))
1510 -8311 -8312 0
8311 -1510 0
8312 -1510 0
c ((SATLiteral(8313) /\ SATLiteral(8314))=tv=SATLiteral(1511))
1511 -8313 -8314 0
8313 -1511 0
8314 -1511 0
c ((SATLiteral(8315) /\ SATLiteral(8316))=tv=SATLiteral(1512))
1512 -8315 -8316 0
8315 -1512 0
8316 -1512 0
c ((SATLiteral(8317) /\ SATLiteral(8318))=tv=SATLiteral(1513))
1513 -8317 -8318 0
8317 -1513 0
8318 -1513 0
c ((SATLiteral(8319) /\ SATLiteral(8320))=tv=SATLiteral(1514))
1514 -8319 -8320 0
8319 -1514 0
8320 -1514 0
c ((SATLiteral(8321) /\ SATLiteral(8322))=tv=SATLiteral(1515))
1515 -8321 -8322 0
8321 -1515 0
8322 -1515 0
c ((SATLiteral(8323) /\ SATLiteral(8324))=tv=SATLiteral(1516))
1516 -8323 -8324 0
8323 -1516 0
8324 -1516 0
c ((SATLiteral(8325) /\ SATLiteral(8326))=tv=SATLiteral(1517))
1517 -8325 -8326 0
8325 -1517 0
8326 -1517 0
c ((SATLiteral(8327) /\ SATLiteral(8328))=tv=SATLiteral(1518))
1518 -8327 -8328 0
8327 -1518 0
8328 -1518 0
c ((SATLiteral(8329) /\ SATLiteral(8330))=tv=SATLiteral(1519))
1519 -8329 -8330 0
8329 -1519 0
8330 -1519 0
c ((SATLiteral(8331) /\ SATLiteral(8332))=tv=SATLiteral(1520))
1520 -8331 -8332 0
8331 -1520 0
8332 -1520 0
c ((SATLiteral(8333) /\ SATLiteral(8334))=tv=SATLiteral(1521))
1521 -8333 -8334 0
8333 -1521 0
8334 -1521 0
c ((SATLiteral(8335) /\ SATLiteral(8336))=tv=SATLiteral(1522))
1522 -8335 -8336 0
8335 -1522 0
8336 -1522 0
c ((SATLiteral(8337) /\ SATLiteral(8338))=tv=SATLiteral(1523))
1523 -8337 -8338 0
8337 -1523 0
8338 -1523 0
c ((SATLiteral(8339) /\ SATLiteral(8340))=tv=SATLiteral(1524))
1524 -8339 -8340 0
8339 -1524 0
8340 -1524 0
c ((SATLiteral(8341) /\ SATLiteral(8342))=tv=SATLiteral(1525))
1525 -8341 -8342 0
8341 -1525 0
8342 -1525 0
c ((SATLiteral(8343) /\ SATLiteral(8344))=tv=SATLiteral(1526))
1526 -8343 -8344 0
8343 -1526 0
8344 -1526 0
c ((SATLiteral(8345) /\ SATLiteral(8346))=tv=SATLiteral(1527))
1527 -8345 -8346 0
8345 -1527 0
8346 -1527 0
c ((SATLiteral(8347) /\ SATLiteral(8348))=tv=SATLiteral(1528))
1528 -8347 -8348 0
8347 -1528 0
8348 -1528 0
c ((SATLiteral(8349) /\ SATLiteral(8350))=tv=SATLiteral(1529))
1529 -8349 -8350 0
8349 -1529 0
8350 -1529 0
c ((SATLiteral(8351) /\ SATLiteral(8352))=tv=SATLiteral(1530))
1530 -8351 -8352 0
8351 -1530 0
8352 -1530 0
c ((SATLiteral(8353) /\ SATLiteral(8354))=tv=SATLiteral(1531))
1531 -8353 -8354 0
8353 -1531 0
8354 -1531 0
c ((SATLiteral(8355) /\ SATLiteral(8356))=tv=SATLiteral(1532))
1532 -8355 -8356 0
8355 -1532 0
8356 -1532 0
c ((SATLiteral(8357) /\ SATLiteral(8358))=tv=SATLiteral(1533))
1533 -8357 -8358 0
8357 -1533 0
8358 -1533 0
c ((SATLiteral(8359) /\ SATLiteral(8360))=tv=SATLiteral(1534))
1534 -8359 -8360 0
8359 -1534 0
8360 -1534 0
c ((SATLiteral(8361) /\ SATLiteral(8362))=tv=SATLiteral(1535))
1535 -8361 -8362 0
8361 -1535 0
8362 -1535 0
c ((SATLiteral(8363) /\ SATLiteral(8364))=tv=SATLiteral(1536))
1536 -8363 -8364 0
8363 -1536 0
8364 -1536 0
c ((SATLiteral(8365) /\ SATLiteral(8366))=tv=SATLiteral(1537))
1537 -8365 -8366 0
8365 -1537 0
8366 -1537 0
c ((SATLiteral(8367) /\ SATLiteral(8368))=tv=SATLiteral(1538))
1538 -8367 -8368 0
8367 -1538 0
8368 -1538 0
c ((SATLiteral(8369) /\ SATLiteral(8370))=tv=SATLiteral(1539))
1539 -8369 -8370 0
8369 -1539 0
8370 -1539 0
c ((SATLiteral(8371) /\ SATLiteral(8372))=tv=SATLiteral(1540))
1540 -8371 -8372 0
8371 -1540 0
8372 -1540 0
c ((SATLiteral(8373) /\ SATLiteral(8374))=tv=SATLiteral(1541))
1541 -8373 -8374 0
8373 -1541 0
8374 -1541 0
c ((SATLiteral(8375) /\ SATLiteral(8376))=tv=SATLiteral(1542))
1542 -8375 -8376 0
8375 -1542 0
8376 -1542 0
c ((SATLiteral(8377) /\ SATLiteral(8378))=tv=SATLiteral(1543))
1543 -8377 -8378 0
8377 -1543 0
8378 -1543 0
c ((SATLiteral(8379) /\ SATLiteral(8380))=tv=SATLiteral(1544))
1544 -8379 -8380 0
8379 -1544 0
8380 -1544 0
c ((SATLiteral(8381) /\ SATLiteral(8382))=tv=SATLiteral(1545))
1545 -8381 -8382 0
8381 -1545 0
8382 -1545 0
c ((SATLiteral(8383) /\ SATLiteral(8384))=tv=SATLiteral(1546))
1546 -8383 -8384 0
8383 -1546 0
8384 -1546 0
c ((SATLiteral(8385) /\ SATLiteral(8386))=tv=SATLiteral(1547))
1547 -8385 -8386 0
8385 -1547 0
8386 -1547 0
c ((SATLiteral(8387) /\ SATLiteral(8388))=tv=SATLiteral(1548))
1548 -8387 -8388 0
8387 -1548 0
8388 -1548 0
c ((SATLiteral(8389) /\ SATLiteral(8390))=tv=SATLiteral(1549))
1549 -8389 -8390 0
8389 -1549 0
8390 -1549 0
c ((SATLiteral(8391) /\ SATLiteral(8392))=tv=SATLiteral(1550))
1550 -8391 -8392 0
8391 -1550 0
8392 -1550 0
c ((SATLiteral(8393) /\ SATLiteral(8394))=tv=SATLiteral(1551))
1551 -8393 -8394 0
8393 -1551 0
8394 -1551 0
c ((SATLiteral(8395) /\ SATLiteral(8396))=tv=SATLiteral(1552))
1552 -8395 -8396 0
8395 -1552 0
8396 -1552 0
c ((SATLiteral(8397) /\ SATLiteral(8398))=tv=SATLiteral(1553))
1553 -8397 -8398 0
8397 -1553 0
8398 -1553 0
c ((SATLiteral(8399) /\ SATLiteral(8400))=tv=SATLiteral(1554))
1554 -8399 -8400 0
8399 -1554 0
8400 -1554 0
c ((SATLiteral(8401) /\ SATLiteral(8402))=tv=SATLiteral(1555))
1555 -8401 -8402 0
8401 -1555 0
8402 -1555 0
c ((SATLiteral(8403) /\ SATLiteral(8404))=tv=SATLiteral(1556))
1556 -8403 -8404 0
8403 -1556 0
8404 -1556 0
c ((SATLiteral(8405) /\ SATLiteral(8406))=tv=SATLiteral(1557))
1557 -8405 -8406 0
8405 -1557 0
8406 -1557 0
c ((SATLiteral(8407) /\ SATLiteral(8408))=tv=SATLiteral(1558))
1558 -8407 -8408 0
8407 -1558 0
8408 -1558 0
c ((SATLiteral(8409) /\ SATLiteral(8410))=tv=SATLiteral(1559))
1559 -8409 -8410 0
8409 -1559 0
8410 -1559 0
c ((SATLiteral(8411) /\ SATLiteral(8412))=tv=SATLiteral(1560))
1560 -8411 -8412 0
8411 -1560 0
8412 -1560 0
c ((SATLiteral(8413) /\ SATLiteral(8414))=tv=SATLiteral(1561))
1561 -8413 -8414 0
8413 -1561 0
8414 -1561 0
c ((SATLiteral(8415) /\ SATLiteral(8416))=tv=SATLiteral(1562))
1562 -8415 -8416 0
8415 -1562 0
8416 -1562 0
c ((SATLiteral(8417) /\ SATLiteral(8418))=tv=SATLiteral(1563))
1563 -8417 -8418 0
8417 -1563 0
8418 -1563 0
c ((SATLiteral(8419) /\ SATLiteral(8420))=tv=SATLiteral(1564))
1564 -8419 -8420 0
8419 -1564 0
8420 -1564 0
c ((SATLiteral(8421) /\ SATLiteral(8422))=tv=SATLiteral(1565))
1565 -8421 -8422 0
8421 -1565 0
8422 -1565 0
c ((SATLiteral(8423) /\ SATLiteral(8424))=tv=SATLiteral(1566))
1566 -8423 -8424 0
8423 -1566 0
8424 -1566 0
c ((SATLiteral(8425) /\ SATLiteral(8426))=tv=SATLiteral(1567))
1567 -8425 -8426 0
8425 -1567 0
8426 -1567 0
c ((SATLiteral(8427) /\ SATLiteral(8428))=tv=SATLiteral(1568))
1568 -8427 -8428 0
8427 -1568 0
8428 -1568 0
c ((SATLiteral(8429) /\ SATLiteral(8430))=tv=SATLiteral(1569))
1569 -8429 -8430 0
8429 -1569 0
8430 -1569 0
c ((SATLiteral(8431) /\ SATLiteral(8432))=tv=SATLiteral(1570))
1570 -8431 -8432 0
8431 -1570 0
8432 -1570 0
c ((SATLiteral(8433) /\ SATLiteral(8434))=tv=SATLiteral(1571))
1571 -8433 -8434 0
8433 -1571 0
8434 -1571 0
c ((SATLiteral(8435) /\ SATLiteral(8436))=tv=SATLiteral(1572))
1572 -8435 -8436 0
8435 -1572 0
8436 -1572 0
c ((SATLiteral(8437) /\ SATLiteral(8438))=tv=SATLiteral(1573))
1573 -8437 -8438 0
8437 -1573 0
8438 -1573 0
c ((SATLiteral(8439) /\ SATLiteral(8440))=tv=SATLiteral(1574))
1574 -8439 -8440 0
8439 -1574 0
8440 -1574 0
c ((SATLiteral(8441) /\ SATLiteral(8442))=tv=SATLiteral(1575))
1575 -8441 -8442 0
8441 -1575 0
8442 -1575 0
c ((SATLiteral(8443) /\ SATLiteral(8444))=tv=SATLiteral(1576))
1576 -8443 -8444 0
8443 -1576 0
8444 -1576 0
c ((SATLiteral(8445) /\ SATLiteral(8446))=tv=SATLiteral(1577))
1577 -8445 -8446 0
8445 -1577 0
8446 -1577 0
c ((SATLiteral(8447) /\ SATLiteral(8448))=tv=SATLiteral(1578))
1578 -8447 -8448 0
8447 -1578 0
8448 -1578 0
c ((SATLiteral(8449) /\ SATLiteral(8450))=tv=SATLiteral(1579))
1579 -8449 -8450 0
8449 -1579 0
8450 -1579 0
c ((SATLiteral(8451) /\ SATLiteral(8452))=tv=SATLiteral(1580))
1580 -8451 -8452 0
8451 -1580 0
8452 -1580 0
c ((SATLiteral(8453) /\ SATLiteral(8454))=tv=SATLiteral(1581))
1581 -8453 -8454 0
8453 -1581 0
8454 -1581 0
c ((SATLiteral(8455) /\ SATLiteral(8456))=tv=SATLiteral(1582))
1582 -8455 -8456 0
8455 -1582 0
8456 -1582 0
c ((SATLiteral(8457) /\ SATLiteral(8458))=tv=SATLiteral(1583))
1583 -8457 -8458 0
8457 -1583 0
8458 -1583 0
c ((SATLiteral(8459) /\ SATLiteral(8460))=tv=SATLiteral(1584))
1584 -8459 -8460 0
8459 -1584 0
8460 -1584 0
c ((SATLiteral(8461) /\ SATLiteral(8462))=tv=SATLiteral(1585))
1585 -8461 -8462 0
8461 -1585 0
8462 -1585 0
c (((SATLiteral(32) + SATLiteral(47) + SATLiteral(62))<=1)=tv=SATLiteral(1586))
-1586 -47 -62 0
-1586 -32 -62 0
-1586 -32 -47 0
1586 47 62 0
1586 32 62 0
1586 32 47 0
c (((SATLiteral(34) + SATLiteral(49) + SATLiteral(64))<=1)=tv=SATLiteral(1587))
-1587 -49 -64 0
-1587 -34 -64 0
-1587 -34 -49 0
1587 49 64 0
1587 34 64 0
1587 34 49 0
c (((SATLiteral(36) + SATLiteral(51) + SATLiteral(66))<=1)=tv=SATLiteral(1588))
-1588 -51 -66 0
-1588 -36 -66 0
-1588 -36 -51 0
1588 51 66 0
1588 36 66 0
1588 36 51 0
c (((SATLiteral(38) + SATLiteral(53) + SATLiteral(68))<=1)=tv=SATLiteral(1589))
-1589 -53 -68 0
-1589 -38 -68 0
-1589 -38 -53 0
1589 53 68 0
1589 38 68 0
1589 38 53 0
c (((SATLiteral(40) + SATLiteral(55) + SATLiteral(70))<=1)=tv=SATLiteral(1590))
-1590 -55 -70 0
-1590 -40 -70 0
-1590 -40 -55 0
1590 55 70 0
1590 40 70 0
1590 40 55 0
c (((SATLiteral(42) + SATLiteral(57) + SATLiteral(72))<=1)=tv=SATLiteral(1591))
-1591 -57 -72 0
-1591 -42 -72 0
-1591 -42 -57 0
1591 57 72 0
1591 42 72 0
1591 42 57 0
c (((SATLiteral(44) + SATLiteral(59) + SATLiteral(74))<=1)=tv=SATLiteral(1592))
-1592 -59 -74 0
-1592 -44 -74 0
-1592 -44 -59 0
1592 59 74 0
1592 44 74 0
1592 44 59 0
c (((SATLiteral(46) + SATLiteral(61) + SATLiteral(76))<=1)=tv=SATLiteral(1593))
-1593 -61 -76 0
-1593 -46 -76 0
-1593 -46 -61 0
1593 61 76 0
1593 46 76 0
1593 46 61 0
c (((SATLiteral(-45) + SATLiteral(-60) + SATLiteral(-75))<=1)=tv=SATLiteral(1594))
-1594 60 75 0
-1594 45 75 0
-1594 45 60 0
1594 -60 -75 0
1594 -45 -75 0
1594 -45 -60 0
c (((SATLiteral(77) + aux1901 + SATLiteral(197))<=1)=tv=SATLiteral(1595))
-1595 7758 0
-1595 -197 7757 0
-1595 -77 7757 0
-1595 -77 -197 0
1595 197 -7757 0
1595 77 -7757 0
1595 77 197 -7758 0
c (((SATLiteral(79) + aux1902 + SATLiteral(199))<=1)=tv=SATLiteral(1596))
-1596 7761 0
-1596 -199 7760 0
-1596 -79 7760 0
-1596 -79 -199 0
1596 199 -7760 0
1596 79 -7760 0
1596 79 199 -7761 0
c (((SATLiteral(81) + aux1903 + SATLiteral(201))<=1)=tv=SATLiteral(1597))
-1597 7764 0
-1597 -201 7763 0
-1597 -81 7763 0
-1597 -81 -201 0
1597 201 -7763 0
1597 81 -7763 0
1597 81 201 -7764 0
c (((SATLiteral(83) + aux1904 + SATLiteral(203))<=1)=tv=SATLiteral(1598))
-1598 7767 0
-1598 -203 7766 0
-1598 -83 7766 0
-1598 -83 -203 0
1598 203 -7766 0
1598 83 -7766 0
1598 83 203 -7767 0
c (((SATLiteral(85) + aux1905 + SATLiteral(205))<=1)=tv=SATLiteral(1599))
-1599 7770 0
-1599 -205 7769 0
-1599 -85 7769 0
-1599 -85 -205 0
1599 205 -7769 0
1599 85 -7769 0
1599 85 205 -7770 0
c (((SATLiteral(87) + aux1906 + SATLiteral(207))<=1)=tv=SATLiteral(1600))
-1600 7773 0
-1600 -207 7772 0
-1600 -87 7772 0
-1600 -87 -207 0
1600 207 -7772 0
1600 87 -7772 0
1600 87 207 -7773 0
c (((SATLiteral(89) + aux1907 + SATLiteral(209))<=1)=tv=SATLiteral(1601))
-1601 7776 0
-1601 -209 7775 0
-1601 -89 7775 0
-1601 -89 -209 0
1601 209 -7775 0
1601 89 -7775 0
1601 89 209 -7776 0
c (((SATLiteral(91) + aux1908 + SATLiteral(211))<=1)=tv=SATLiteral(1602))
-1602 7779 0
-1602 -211 7778 0
-1602 -91 7778 0
-1602 -91 -211 0
1602 211 -7778 0
1602 91 -7778 0
1602 91 211 -7779 0
c (((SATLiteral(-90) + aux1909 + SATLiteral(-210))<=1)=tv=SATLiteral(1603))
-1603 7782 0
-1603 210 7781 0
-1603 90 7781 0
-1603 90 210 0
1603 -210 -7781 0
1603 -90 -7781 0
1603 -90 -210 -7782 0
c (((SATLiteral(122) + aux1910 + SATLiteral(527))<=1)=tv=SATLiteral(1604))
-1604 7785 0
-1604 -527 7784 0
-1604 -122 7784 0
-1604 -122 -527 0
1604 527 -7784 0
1604 122 -7784 0
1604 122 527 -7785 0
c (((SATLiteral(124) + aux1911 + SATLiteral(529))<=1)=tv=SATLiteral(1605))
-1605 7788 0
-1605 -529 7787 0
-1605 -124 7787 0
-1605 -124 -529 0
1605 529 -7787 0
1605 124 -7787 0
1605 124 529 -7788 0
c (((SATLiteral(126) + aux1912 + SATLiteral(531))<=1)=tv=SATLiteral(1606))
-1606 7791 0
-1606 -531 7790 0
-1606 -126 7790 0
-1606 -126 -531 0
1606 531 -7790 0
1606 126 -7790 0
1606 126 531 -7791 0
c (((SATLiteral(128) + aux1913 + SATLiteral(533))<=1)=tv=SATLiteral(1607))
-1607 7794 0
-1607 -533 7793 0
-1607 -128 7793 0
-1607 -128 -533 0
1607 533 -7793 0
1607 128 -7793 0
1607 128 533 -7794 0
c (((SATLiteral(130) + aux1914 + SATLiteral(535))<=1)=tv=SATLiteral(1608))
-1608 7797 0
-1608 -535 7796 0
-1608 -130 7796 0
-1608 -130 -535 0
1608 535 -7796 0
1608 130 -7796 0
1608 130 535 -7797 0
c (((SATLiteral(132) + aux1915 + SATLiteral(537))<=1)=tv=SATLiteral(1609))
-1609 7800 0
-1609 -537 7799 0
-1609 -132 7799 0
-1609 -132 -537 0
1609 537 -7799 0
1609 132 -7799 0
1609 132 537 -7800 0
c (((SATLiteral(134) + aux1916 + SATLiteral(539))<=1)=tv=SATLiteral(1610))
-1610 7803 0
-1610 -539 7802 0
-1610 -134 7802 0
-1610 -134 -539 0
1610 539 -7802 0
1610 134 -7802 0
1610 134 539 -7803 0
c (((SATLiteral(136) + aux1917 + SATLiteral(541))<=1)=tv=SATLiteral(1611))
-1611 7806 0
-1611 -541 7805 0
-1611 -136 7805 0
-1611 -136 -541 0
1611 541 -7805 0
1611 136 -7805 0
1611 136 541 -7806 0
c (((SATLiteral(-135) + aux1918 + SATLiteral(-540))<=1)=tv=SATLiteral(1612))
-1612 7809 0
-1612 540 7808 0
-1612 135 7808 0
-1612 135 540 0
1612 -540 -7808 0
1612 -135 -7808 0
1612 -135 -540 -7809 0
c (((SATLiteral(287) + aux1919 + SATLiteral(137))<=1)=tv=SATLiteral(1613))
-1613 7812 0
-1613 -137 7811 0
-1613 -287 7811 0
-1613 -287 -137 0
1613 137 -7811 0
1613 287 -7811 0
1613 287 137 -7812 0
c (((SATLiteral(289) + aux1920 + SATLiteral(139))<=1)=tv=SATLiteral(1614))
-1614 7815 0
-1614 -139 7814 0
-1614 -289 7814 0
-1614 -289 -139 0
1614 139 -7814 0
1614 289 -7814 0
1614 289 139 -7815 0
c (((SATLiteral(291) + aux1921 + SATLiteral(141))<=1)=tv=SATLiteral(1615))
-1615 7818 0
-1615 -141 7817 0
-1615 -291 7817 0
-1615 -291 -141 0
1615 141 -7817 0
1615 291 -7817 0
1615 291 141 -7818 0
c (((SATLiteral(293) + aux1922 + SATLiteral(143))<=1)=tv=SATLiteral(1616))
-1616 7821 0
-1616 -143 7820 0
-1616 -293 7820 0
-1616 -293 -143 0
1616 143 -7820 0
1616 293 -7820 0
1616 293 143 -7821 0
c (((SATLiteral(295) + aux1923 + SATLiteral(145))<=1)=tv=SATLiteral(1617))
-1617 7824 0
-1617 -145 7823 0
-1617 -295 7823 0
-1617 -295 -145 0
1617 145 -7823 0
1617 295 -7823 0
1617 295 145 -7824 0
c (((SATLiteral(297) + aux1924 + SATLiteral(147))<=1)=tv=SATLiteral(1618))
-1618 7827 0
-1618 -147 7826 0
-1618 -297 7826 0
-1618 -297 -147 0
1618 147 -7826 0
1618 297 -7826 0
1618 297 147 -7827 0
c (((SATLiteral(299) + aux1925 + SATLiteral(149))<=1)=tv=SATLiteral(1619))
-1619 7830 0
-1619 -149 7829 0
-1619 -299 7829 0
-1619 -299 -149 0
1619 149 -7829 0
1619 299 -7829 0
1619 299 149 -7830 0
c (((SATLiteral(301) + aux1926 + SATLiteral(151))<=1)=tv=SATLiteral(1620))
-1620 7833 0
-1620 -151 7832 0
-1620 -301 7832 0
-1620 -301 -151 0
1620 151 -7832 0
1620 301 -7832 0
1620 301 151 -7833 0
c (((SATLiteral(-300) + aux1927 + SATLiteral(-150))<=1)=tv=SATLiteral(1621))
-1621 7836 0
-1621 150 7835 0
-1621 300 7835 0
-1621 300 150 0
1621 -150 -7835 0
1621 -300 -7835 0
1621 -300 -150 -7836 0
c (((SATLiteral(302) + SATLiteral(317) + SATLiteral(452))<=1)=tv=SATLiteral(1622))
-1622 -317 -452 0
-1622 -302 -452 0
-1622 -302 -317 0
1622 317 452 0
1622 302 452 0
1622 302 317 0
c (((SATLiteral(304) + SATLiteral(319) + SATLiteral(454))<=1)=tv=SATLiteral(1623))
-1623 -319 -454 0
-1623 -304 -454 0
-1623 -304 -319 0
1623 319 454 0
1623 304 454 0
1623 304 319 0
c (((SATLiteral(306) + SATLiteral(321) + SATLiteral(456))<=1)=tv=SATLiteral(1624))
-1624 -321 -456 0
-1624 -306 -456 0
-1624 -306 -321 0
1624 321 456 0
1624 306 456 0
1624 306 321 0
c (((SATLiteral(308) + SATLiteral(323) + SATLiteral(458))<=1)=tv=SATLiteral(1625))
-1625 -323 -458 0
-1625 -308 -458 0
-1625 -308 -323 0
1625 323 458 0
1625 308 458 0
1625 308 323 0
c (((SATLiteral(310) + SATLiteral(325) + SATLiteral(460))<=1)=tv=SATLiteral(1626))
-1626 -325 -460 0
-1626 -310 -460 0
-1626 -310 -325 0
1626 325 460 0
1626 310 460 0
1626 310 325 0
c (((SATLiteral(312) + SATLiteral(327) + SATLiteral(462))<=1)=tv=SATLiteral(1627))
-1627 -327 -462 0
-1627 -312 -462 0
-1627 -312 -327 0
1627 327 462 0
1627 312 462 0
1627 312 327 0
c (((SATLiteral(314) + SATLiteral(329) + SATLiteral(464))<=1)=tv=SATLiteral(1628))
-1628 -329 -464 0
-1628 -314 -464 0
-1628 -314 -329 0
1628 329 464 0
1628 314 464 0
1628 314 329 0
c (((SATLiteral(316) + SATLiteral(331) + SATLiteral(466))<=1)=tv=SATLiteral(1629))
-1629 -331 -466 0
-1629 -316 -466 0
-1629 -316 -331 0
1629 331 466 0
1629 316 466 0
1629 316 331 0
c (((SATLiteral(-315) + SATLiteral(-330) + SATLiteral(-465))<=1)=tv=SATLiteral(1630))
-1630 330 465 0
-1630 315 465 0
-1630 315 330 0
1630 -330 -465 0
1630 -315 -465 0
1630 -315 -330 0
c (((SATLiteral(347) + SATLiteral(482) + SATLiteral(617))<=1)=tv=SATLiteral(1631))
-1631 -482 -617 0
-1631 -347 -617 0
-1631 -347 -482 0
1631 482 617 0
1631 347 617 0
1631 347 482 0
c (((SATLiteral(349) + SATLiteral(484) + SATLiteral(619))<=1)=tv=SATLiteral(1632))
-1632 -484 -619 0
-1632 -349 -619 0
-1632 -349 -484 0
1632 484 619 0
1632 349 619 0
1632 349 484 0
c (((SATLiteral(351) + SATLiteral(486) + SATLiteral(621))<=1)=tv=SATLiteral(1633))
-1633 -486 -621 0
-1633 -351 -621 0
-1633 -351 -486 0
1633 486 621 0
1633 351 621 0
1633 351 486 0
c (((SATLiteral(353) + SATLiteral(488) + SATLiteral(623))<=1)=tv=SATLiteral(1634))
-1634 -488 -623 0
-1634 -353 -623 0
-1634 -353 -488 0
1634 488 623 0
1634 353 623 0
1634 353 488 0
c (((SATLiteral(355) + SATLiteral(490) + SATLiteral(625))<=1)=tv=SATLiteral(1635))
-1635 -490 -625 0
-1635 -355 -625 0
-1635 -355 -490 0
1635 490 625 0
1635 355 625 0
1635 355 490 0
c (((SATLiteral(357) + SATLiteral(492) + SATLiteral(627))<=1)=tv=SATLiteral(1636))
-1636 -492 -627 0
-1636 -357 -627 0
-1636 -357 -492 0
1636 492 627 0
1636 357 627 0
1636 357 492 0
c (((SATLiteral(359) + SATLiteral(494) + SATLiteral(629))<=1)=tv=SATLiteral(1637))
-1637 -494 -629 0
-1637 -359 -629 0
-1637 -359 -494 0
1637 494 629 0
1637 359 629 0
1637 359 494 0
c (((SATLiteral(361) + SATLiteral(496) + SATLiteral(631))<=1)=tv=SATLiteral(1638))
-1638 -496 -631 0
-1638 -361 -631 0
-1638 -361 -496 0
1638 496 631 0
1638 361 631 0
1638 361 496 0
c (((SATLiteral(-360) + SATLiteral(-495) + SATLiteral(-630))<=1)=tv=SATLiteral(1639))
-1639 495 630 0
-1639 360 630 0
-1639 360 495 0
1639 -495 -630 0
1639 -360 -630 0
1639 -360 -495 0
c (((SATLiteral(362) + SATLiteral(377) + SATLiteral(497))<=1)=tv=SATLiteral(1640))
-1640 -377 -497 0
-1640 -362 -497 0
-1640 -362 -377 0
1640 377 497 0
1640 362 497 0
1640 362 377 0
c (((SATLiteral(364) + SATLiteral(379) + SATLiteral(499))<=1)=tv=SATLiteral(1641))
-1641 -379 -499 0
-1641 -364 -499 0
-1641 -364 -379 0
1641 379 499 0
1641 364 499 0
1641 364 379 0
c (((SATLiteral(366) + SATLiteral(381) + SATLiteral(501))<=1)=tv=SATLiteral(1642))
-1642 -381 -501 0
-1642 -366 -501 0
-1642 -366 -381 0
1642 381 501 0
1642 366 501 0
1642 366 381 0
c (((SATLiteral(368) + SATLiteral(383) + SATLiteral(503))<=1)=tv=SATLiteral(1643))
-1643 -383 -503 0
-1643 -368 -503 0
-1643 -368 -383 0
1643 383 503 0
1643 368 503 0
1643 368 383 0
c (((SATLiteral(370) + SATLiteral(385) + SATLiteral(505))<=1)=tv=SATLiteral(1644))
-1644 -385 -505 0
-1644 -370 -505 0
-1644 -370 -385 0
1644 385 505 0
1644 370 505 0
1644 370 385 0
c (((SATLiteral(372) + SATLiteral(387) + SATLiteral(507))<=1)=tv=SATLiteral(1645))
-1645 -387 -507 0
-1645 -372 -507 0
-1645 -372 -387 0
1645 387 507 0
1645 372 507 0
1645 372 387 0
c (((SATLiteral(374) + SATLiteral(389) + SATLiteral(509))<=1)=tv=SATLiteral(1646))
-1646 -389 -509 0
-1646 -374 -509 0
-1646 -374 -389 0
1646 389 509 0
1646 374 509 0
1646 374 389 0
c (((SATLiteral(376) + SATLiteral(391) + SATLiteral(511))<=1)=tv=SATLiteral(1647))
-1647 -391 -511 0
-1647 -376 -511 0
-1647 -376 -391 0
1647 391 511 0
1647 376 511 0
1647 376 391 0
c (((SATLiteral(-375) + SATLiteral(-390) + SATLiteral(-510))<=1)=tv=SATLiteral(1648))
-1648 390 510 0
-1648 375 510 0
-1648 375 390 0
1648 -390 -510 0
1648 -375 -510 0
1648 -375 -390 0
c (((SATLiteral(737) + SATLiteral(467) + SATLiteral(602))<=1)=tv=SATLiteral(1649))
-1649 -467 -602 0
-1649 -737 -602 0
-1649 -737 -467 0
1649 467 602 0
1649 737 602 0
1649 737 467 0
c (((SATLiteral(739) + SATLiteral(469) + SATLiteral(604))<=1)=tv=SATLiteral(1650))
-1650 -469 -604 0
-1650 -739 -604 0
-1650 -739 -469 0
1650 469 604 0
1650 739 604 0
1650 739 469 0
c (((SATLiteral(741) + SATLiteral(471) + SATLiteral(606))<=1)=tv=SATLiteral(1651))
-1651 -471 -606 0
-1651 -741 -606 0
-1651 -741 -471 0
1651 471 606 0
1651 741 606 0
1651 741 471 0
c (((SATLiteral(743) + SATLiteral(473) + SATLiteral(608))<=1)=tv=SATLiteral(1652))
-1652 -473 -608 0
-1652 -743 -608 0
-1652 -743 -473 0
1652 473 608 0
1652 743 608 0
1652 743 473 0
c (((SATLiteral(745) + SATLiteral(475) + SATLiteral(610))<=1)=tv=SATLiteral(1653))
-1653 -475 -610 0
-1653 -745 -610 0
-1653 -745 -475 0
1653 475 610 0
1653 745 610 0
1653 745 475 0
c (((SATLiteral(747) + SATLiteral(477) + SATLiteral(612))<=1)=tv=SATLiteral(1654))
-1654 -477 -612 0
-1654 -747 -612 0
-1654 -747 -477 0
1654 477 612 0
1654 747 612 0
1654 747 477 0
c (((SATLiteral(749) + SATLiteral(479) + SATLiteral(614))<=1)=tv=SATLiteral(1655))
-1655 -479 -614 0
-1655 -749 -614 0
-1655 -749 -479 0
1655 479 614 0
1655 749 614 0
1655 749 479 0
c (((SATLiteral(751) + SATLiteral(481) + SATLiteral(616))<=1)=tv=SATLiteral(1656))
-1656 -481 -616 0
-1656 -751 -616 0
-1656 -751 -481 0
1656 481 616 0
1656 751 616 0
1656 751 481 0
c (((SATLiteral(-750) + SATLiteral(-480) + SATLiteral(-615))<=1)=tv=SATLiteral(1657))
-1657 480 615 0
-1657 750 615 0
-1657 750 480 0
1657 -480 -615 0
1657 -750 -615 0
1657 -750 -480 0
c (((SATLiteral(512) + SATLiteral(632) + SATLiteral(647))<=1)=tv=SATLiteral(1658))
-1658 -632 -647 0
-1658 -512 -647 0
-1658 -512 -632 0
1658 632 647 0
1658 512 647 0
1658 512 632 0
c (((SATLiteral(514) + SATLiteral(634) + SATLiteral(649))<=1)=tv=SATLiteral(1659))
-1659 -634 -649 0
-1659 -514 -649 0
-1659 -514 -634 0
1659 634 649 0
1659 514 649 0
1659 514 634 0
c (((SATLiteral(516) + SATLiteral(636) + SATLiteral(651))<=1)=tv=SATLiteral(1660))
-1660 -636 -651 0
-1660 -516 -651 0
-1660 -516 -636 0
1660 636 651 0
1660 516 651 0
1660 516 636 0
c (((SATLiteral(518) + SATLiteral(638) + SATLiteral(653))<=1)=tv=SATLiteral(1661))
-1661 -638 -653 0
-1661 -518 -653 0
-1661 -518 -638 0
1661 638 653 0
1661 518 653 0
1661 518 638 0
c (((SATLiteral(520) + SATLiteral(640) + SATLiteral(655))<=1)=tv=SATLiteral(1662))
-1662 -640 -655 0
-1662 -520 -655 0
-1662 -520 -640 0
1662 640 655 0
1662 520 655 0
1662 520 640 0
c (((SATLiteral(522) + SATLiteral(642) + SATLiteral(657))<=1)=tv=SATLiteral(1663))
-1663 -642 -657 0
-1663 -522 -657 0
-1663 -522 -642 0
1663 642 657 0
1663 522 657 0
1663 522 642 0
c (((SATLiteral(524) + SATLiteral(644) + SATLiteral(659))<=1)=tv=SATLiteral(1664))
-1664 -644 -659 0
-1664 -524 -659 0
-1664 -524 -644 0
1664 644 659 0
1664 524 659 0
1664 524 644 0
c (((SATLiteral(526) + SATLiteral(646) + SATLiteral(661))<=1)=tv=SATLiteral(1665))
-1665 -646 -661 0
-1665 -526 -661 0
-1665 -526 -646 0
1665 646 661 0
1665 526 661 0
1665 526 646 0
c (((SATLiteral(-525) + SATLiteral(-645) + SATLiteral(-660))<=1)=tv=SATLiteral(1666))
-1666 645 660 0
-1666 525 660 0
-1666 525 645 0
1666 -645 -660 0
1666 -525 -660 0
1666 -525 -645 0
c (((SATLiteral(692) + SATLiteral(557) + SATLiteral(572))<=1)=tv=SATLiteral(1667))
-1667 -557 -572 0
-1667 -692 -572 0
-1667 -692 -557 0
1667 557 572 0
1667 692 572 0
1667 692 557 0
c (((SATLiteral(694) + SATLiteral(559) + SATLiteral(574))<=1)=tv=SATLiteral(1668))
-1668 -559 -574 0
-1668 -694 -574 0
-1668 -694 -559 0
1668 559 574 0
1668 694 574 0
1668 694 559 0
c (((SATLiteral(696) + SATLiteral(561) + SATLiteral(576))<=1)=tv=SATLiteral(1669))
-1669 -561 -576 0
-1669 -696 -576 0
-1669 -696 -561 0
1669 561 576 0
1669 696 576 0
1669 696 561 0
c (((SATLiteral(698) + SATLiteral(563) + SATLiteral(578))<=1)=tv=SATLiteral(1670))
-1670 -563 -578 0
-1670 -698 -578 0
-1670 -698 -563 0
1670 563 578 0
1670 698 578 0
1670 698 563 0
c (((SATLiteral(700) + SATLiteral(565) + SATLiteral(580))<=1)=tv=SATLiteral(1671))
-1671 -565 -580 0
-1671 -700 -580 0
-1671 -700 -565 0
1671 565 580 0
1671 700 580 0
1671 700 565 0
c (((SATLiteral(702) + SATLiteral(567) + SATLiteral(582))<=1)=tv=SATLiteral(1672))
-1672 -567 -582 0
-1672 -702 -582 0
-1672 -702 -567 0
1672 567 582 0
1672 702 582 0
1672 702 567 0
c (((SATLiteral(704) + SATLiteral(569) + SATLiteral(584))<=1)=tv=SATLiteral(1673))
-1673 -569 -584 0
-1673 -704 -584 0
-1673 -704 -569 0
1673 569 584 0
1673 704 584 0
1673 704 569 0
c (((SATLiteral(706) + SATLiteral(571) + SATLiteral(586))<=1)=tv=SATLiteral(1674))
-1674 -571 -586 0
-1674 -706 -586 0
-1674 -706 -571 0
1674 571 586 0
1674 706 586 0
1674 706 571 0
c (((SATLiteral(-705) + SATLiteral(-570) + SATLiteral(-585))<=1)=tv=SATLiteral(1675))
-1675 570 585 0
-1675 705 585 0
-1675 705 570 0
1675 -570 -585 0
1675 -705 -585 0
1675 -705 -570 0
c (((SATLiteral(722) + SATLiteral(857) + SATLiteral(587))<=1)=tv=SATLiteral(1676))
-1676 -857 -587 0
-1676 -722 -587 0
-1676 -722 -857 0
1676 857 587 0
1676 722 587 0
1676 722 857 0
c (((SATLiteral(724) + SATLiteral(859) + SATLiteral(589))<=1)=tv=SATLiteral(1677))
-1677 -859 -589 0
-1677 -724 -589 0
-1677 -724 -859 0
1677 859 589 0
1677 724 589 0
1677 724 859 0
c (((SATLiteral(726) + SATLiteral(861) + SATLiteral(591))<=1)=tv=SATLiteral(1678))
-1678 -861 -591 0
-1678 -726 -591 0
-1678 -726 -861 0
1678 861 591 0
1678 726 591 0
1678 726 861 0
c (((SATLiteral(728) + SATLiteral(863) + SATLiteral(593))<=1)=tv=SATLiteral(1679))
-1679 -863 -593 0
-1679 -728 -593 0
-1679 -728 -863 0
1679 863 593 0
1679 728 593 0
1679 728 863 0
c (((SATLiteral(730) + SATLiteral(865) + SATLiteral(595))<=1)=tv=SATLiteral(1680))
-1680 -865 -595 0
-1680 -730 -595 0
-1680 -730 -865 0
1680 865 595 0
1680 730 595 0
1680 730 865 0
c (((SATLiteral(732) + SATLiteral(867) + SATLiteral(597))<=1)=tv=SATLiteral(1681))
-1681 -867 -597 0
-1681 -732 -597 0
-1681 -732 -867 0
1681 867 597 0
1681 732 597 0
1681 732 867 0
c (((SATLiteral(734) + SATLiteral(869) + SATLiteral(599))<=1)=tv=SATLiteral(1682))
-1682 -869 -599 0
-1682 -734 -599 0
-1682 -734 -869 0
1682 869 599 0
1682 734 599 0
1682 734 869 0
c (((SATLiteral(736) + SATLiteral(871) + SATLiteral(601))<=1)=tv=SATLiteral(1683))
-1683 -871 -601 0
-1683 -736 -601 0
-1683 -736 -871 0
1683 871 601 0
1683 736 601 0
1683 736 871 0
c (((SATLiteral(-735) + SATLiteral(-870) + SATLiteral(-600))<=1)=tv=SATLiteral(1684))
-1684 870 600 0
-1684 735 600 0
-1684 735 870 0
1684 -870 -600 0
1684 -735 -600 0
1684 -735 -870 0
c (((SATLiteral(677) + aux1928 + SATLiteral(1082))<=1)=tv=SATLiteral(1685))
-1685 7839 0
-1685 -1082 7838 0
-1685 -677 7838 0
-1685 -677 -1082 0
1685 1082 -7838 0
1685 677 -7838 0
1685 677 1082 -7839 0
c (((SATLiteral(679) + aux1929 + SATLiteral(1084))<=1)=tv=SATLiteral(1686))
-1686 7842 0
-1686 -1084 7841 0
-1686 -679 7841 0
-1686 -679 -1084 0
1686 1084 -7841 0
1686 679 -7841 0
1686 679 1084 -7842 0
c (((SATLiteral(681) + aux1930 + SATLiteral(1086))<=1)=tv=SATLiteral(1687))
-1687 7845 0
-1687 -1086 7844 0
-1687 -681 7844 0
-1687 -681 -1086 0
1687 1086 -7844 0
1687 681 -7844 0
1687 681 1086 -7845 0
c (((SATLiteral(683) + aux1931 + SATLiteral(1088))<=1)=tv=SATLiteral(1688))
-1688 7848 0
-1688 -1088 7847 0
-1688 -683 7847 0
-1688 -683 -1088 0
1688 1088 -7847 0
1688 683 -7847 0
1688 683 1088 -7848 0
c (((SATLiteral(685) + aux1932 + SATLiteral(1090))<=1)=tv=SATLiteral(1689))
-1689 7851 0
-1689 -1090 7850 0
-1689 -685 7850 0
-1689 -685 -1090 0
1689 1090 -7850 0
1689 685 -7850 0
1689 685 1090 -7851 0
c (((SATLiteral(687) + aux1933 + SATLiteral(1092))<=1)=tv=SATLiteral(1690))
-1690 7854 0
-1690 -1092 7853 0
-1690 -687 7853 0
-1690 -687 -1092 0
1690 1092 -7853 0
1690 687 -7853 0
1690 687 1092 -7854 0
c (((SATLiteral(689) + aux1934 + SATLiteral(1094))<=1)=tv=SATLiteral(1691))
-1691 7857 0
-1691 -1094 7856 0
-1691 -689 7856 0
-1691 -689 -1094 0
1691 1094 -7856 0
1691 689 -7856 0
1691 689 1094 -7857 0
c (((SATLiteral(691) + aux1935 + SATLiteral(1096))<=1)=tv=SATLiteral(1692))
-1692 7860 0
-1692 -1096 7859 0
-1692 -691 7859 0
-1692 -691 -1096 0
1692 1096 -7859 0
1692 691 -7859 0
1692 691 1096 -7860 0
c (((SATLiteral(-690) + aux1936 + SATLiteral(-1095))<=1)=tv=SATLiteral(1693))
-1693 7863 0
-1693 1095 7862 0
-1693 690 7862 0
-1693 690 1095 0
1693 -1095 -7862 0
1693 -690 -7862 0
1693 -690 -1095 -7863 0
c (((SATLiteral(707) + SATLiteral(827) + SATLiteral(842))<=1)=tv=SATLiteral(1694))
-1694 -827 -842 0
-1694 -707 -842 0
-1694 -707 -827 0
1694 827 842 0
1694 707 842 0
1694 707 827 0
c (((SATLiteral(709) + SATLiteral(829) + SATLiteral(844))<=1)=tv=SATLiteral(1695))
-1695 -829 -844 0
-1695 -709 -844 0
-1695 -709 -829 0
1695 829 844 0
1695 709 844 0
1695 709 829 0
c (((SATLiteral(711) + SATLiteral(831) + SATLiteral(846))<=1)=tv=SATLiteral(1696))
-1696 -831 -846 0
-1696 -711 -846 0
-1696 -711 -831 0
1696 831 846 0
1696 711 846 0
1696 711 831 0
c (((SATLiteral(713) + SATLiteral(833) + SATLiteral(848))<=1)=tv=SATLiteral(1697))
-1697 -833 -848 0
-1697 -713 -848 0
-1697 -713 -833 0
1697 833 848 0
1697 713 848 0
1697 713 833 0
c (((SATLiteral(715) + SATLiteral(835) + SATLiteral(850))<=1)=tv=SATLiteral(1698))
-1698 -835 -850 0
-1698 -715 -850 0
-1698 -715 -835 0
1698 835 850 0
1698 715 850 0
1698 715 835 0
c (((SATLiteral(717) + SATLiteral(837) + SATLiteral(852))<=1)=tv=SATLiteral(1699))
-1699 -837 -852 0
-1699 -717 -852 0
-1699 -717 -837 0
1699 837 852 0
1699 717 852 0
1699 717 837 0
c (((SATLiteral(719) + SATLiteral(839) + SATLiteral(854))<=1)=tv=SATLiteral(1700))
-1700 -839 -854 0
-1700 -719 -854 0
-1700 -719 -839 0
1700 839 854 0
1700 719 854 0
1700 719 839 0
c (((SATLiteral(721) + SATLiteral(841) + SATLiteral(856))<=1)=tv=SATLiteral(1701))
-1701 -841 -856 0
-1701 -721 -856 0
-1701 -721 -841 0
1701 841 856 0
1701 721 856 0
1701 721 841 0
c (((SATLiteral(-720) + SATLiteral(-840) + SATLiteral(-855))<=1)=tv=SATLiteral(1702))
-1702 840 855 0
-1702 720 855 0
-1702 720 840 0
1702 -840 -855 0
1702 -720 -855 0
1702 -720 -840 0
c (((SATLiteral(752) + SATLiteral(887) + SATLiteral(902))<=1)=tv=SATLiteral(1703))
-1703 -887 -902 0
-1703 -752 -902 0
-1703 -752 -887 0
1703 887 902 0
1703 752 902 0
1703 752 887 0
c (((SATLiteral(754) + SATLiteral(889) + SATLiteral(904))<=1)=tv=SATLiteral(1704))
-1704 -889 -904 0
-1704 -754 -904 0
-1704 -754 -889 0
1704 889 904 0
1704 754 904 0
1704 754 889 0
c (((SATLiteral(756) + SATLiteral(891) + SATLiteral(906))<=1)=tv=SATLiteral(1705))
-1705 -891 -906 0
-1705 -756 -906 0
-1705 -756 -891 0
1705 891 906 0
1705 756 906 0
1705 756 891 0
c (((SATLiteral(758) + SATLiteral(893) + SATLiteral(908))<=1)=tv=SATLiteral(1706))
-1706 -893 -908 0
-1706 -758 -908 0
-1706 -758 -893 0
1706 893 908 0
1706 758 908 0
1706 758 893 0
c (((SATLiteral(760) + SATLiteral(895) + SATLiteral(910))<=1)=tv=SATLiteral(1707))
-1707 -895 -910 0
-1707 -760 -910 0
-1707 -760 -895 0
1707 895 910 0
1707 760 910 0
1707 760 895 0
c (((SATLiteral(762) + SATLiteral(897) + SATLiteral(912))<=1)=tv=SATLiteral(1708))
-1708 -897 -912 0
-1708 -762 -912 0
-1708 -762 -897 0
1708 897 912 0
1708 762 912 0
1708 762 897 0
c (((SATLiteral(764) + SATLiteral(899) + SATLiteral(914))<=1)=tv=SATLiteral(1709))
-1709 -899 -914 0
-1709 -764 -914 0
-1709 -764 -899 0
1709 899 914 0
1709 764 914 0
1709 764 899 0
c (((SATLiteral(766) + SATLiteral(901) + SATLiteral(916))<=1)=tv=SATLiteral(1710))
-1710 -901 -916 0
-1710 -766 -916 0
-1710 -766 -901 0
1710 901 916 0
1710 766 916 0
1710 766 901 0
c (((SATLiteral(-765) + SATLiteral(-900) + SATLiteral(-915))<=1)=tv=SATLiteral(1711))
-1711 900 915 0
-1711 765 915 0
-1711 765 900 0
1711 -900 -915 0
1711 -765 -915 0
1711 -765 -900 0
c (((SATLiteral(1007) + aux1937 + SATLiteral(1127))<=1)=tv=SATLiteral(1712))
-1712 7866 0
-1712 -1127 7865 0
-1712 -1007 7865 0
-1712 -1007 -1127 0
1712 1127 -7865 0
1712 1007 -7865 0
1712 1007 1127 -7866 0
c (((SATLiteral(1009) + aux1938 + SATLiteral(1129))<=1)=tv=SATLiteral(1713))
-1713 7869 0
-1713 -1129 7868 0
-1713 -1009 7868 0
-1713 -1009 -1129 0
1713 1129 -7868 0
1713 1009 -7868 0
1713 1009 1129 -7869 0
c (((SATLiteral(1011) + aux1939 + SATLiteral(1131))<=1)=tv=SATLiteral(1714))
-1714 7872 0
-1714 -1131 7871 0
-1714 -1011 7871 0
-1714 -1011 -1131 0
1714 1131 -7871 0
1714 1011 -7871 0
1714 1011 1131 -7872 0
c (((SATLiteral(1013) + aux1940 + SATLiteral(1133))<=1)=tv=SATLiteral(1715))
-1715 7875 0
-1715 -1133 7874 0
-1715 -1013 7874 0
-1715 -1013 -1133 0
1715 1133 -7874 0
1715 1013 -7874 0
1715 1013 1133 -7875 0
c (((SATLiteral(1015) + aux1941 + SATLiteral(1135))<=1)=tv=SATLiteral(1716))
-1716 7878 0
-1716 -1135 7877 0
-1716 -1015 7877 0
-1716 -1015 -1135 0
1716 1135 -7877 0
1716 1015 -7877 0
1716 1015 1135 -7878 0
c (((SATLiteral(1017) + aux1942 + SATLiteral(1137))<=1)=tv=SATLiteral(1717))
-1717 7881 0
-1717 -1137 7880 0
-1717 -1017 7880 0
-1717 -1017 -1137 0
1717 1137 -7880 0
1717 1017 -7880 0
1717 1017 1137 -7881 0
c (((SATLiteral(1019) + aux1943 + SATLiteral(1139))<=1)=tv=SATLiteral(1718))
-1718 7884 0
-1718 -1139 7883 0
-1718 -1019 7883 0
-1718 -1019 -1139 0
1718 1139 -7883 0
1718 1019 -7883 0
1718 1019 1139 -7884 0
c (((SATLiteral(1021) + aux1944 + SATLiteral(1141))<=1)=tv=SATLiteral(1719))
-1719 7887 0
-1719 -1141 7886 0
-1719 -1021 7886 0
-1719 -1021 -1141 0
1719 1141 -7886 0
1719 1021 -7886 0
1719 1021 1141 -7887 0
c (((SATLiteral(-1020) + aux1945 + SATLiteral(-1140))<=1)=tv=SATLiteral(1720))
-1720 7890 0
-1720 1140 7889 0
-1720 1020 7889 0
-1720 1020 1140 0
1720 -1140 -7889 0
1720 -1020 -7889 0
1720 -1020 -1140 -7890 0
c (((SATLiteral(1067) + aux1946 + SATLiteral(917))<=1)=tv=SATLiteral(1721))
-1721 7893 0
-1721 -917 7892 0
-1721 -1067 7892 0
-1721 -1067 -917 0
1721 917 -7892 0
1721 1067 -7892 0
1721 1067 917 -7893 0
c (((SATLiteral(1069) + aux1947 + SATLiteral(919))<=1)=tv=SATLiteral(1722))
-1722 7896 0
-1722 -919 7895 0
-1722 -1069 7895 0
-1722 -1069 -919 0
1722 919 -7895 0
1722 1069 -7895 0
1722 1069 919 -7896 0
c (((SATLiteral(1071) + aux1948 + SATLiteral(921))<=1)=tv=SATLiteral(1723))
-1723 7899 0
-1723 -921 7898 0
-1723 -1071 7898 0
-1723 -1071 -921 0
1723 921 -7898 0
1723 1071 -7898 0
1723 1071 921 -7899 0
c (((SATLiteral(1073) + aux1949 + SATLiteral(923))<=1)=tv=SATLiteral(1724))
-1724 7902 0
-1724 -923 7901 0
-1724 -1073 7901 0
-1724 -1073 -923 0
1724 923 -7901 0
1724 1073 -7901 0
1724 1073 923 -7902 0
c (((SATLiteral(1075) + aux1950 + SATLiteral(925))<=1)=tv=SATLiteral(1725))
-1725 7905 0
-1725 -925 7904 0
-1725 -1075 7904 0
-1725 -1075 -925 0
1725 925 -7904 0
1725 1075 -7904 0
1725 1075 925 -7905 0
c (((SATLiteral(1077) + aux1951 + SATLiteral(927))<=1)=tv=SATLiteral(1726))
-1726 7908 0
-1726 -927 7907 0
-1726 -1077 7907 0
-1726 -1077 -927 0
1726 927 -7907 0
1726 1077 -7907 0
1726 1077 927 -7908 0
c (((SATLiteral(1079) + aux1952 + SATLiteral(929))<=1)=tv=SATLiteral(1727))
-1727 7911 0
-1727 -929 7910 0
-1727 -1079 7910 0
-1727 -1079 -929 0
1727 929 -7910 0
1727 1079 -7910 0
1727 1079 929 -7911 0
c (((SATLiteral(1081) + aux1953 + SATLiteral(931))<=1)=tv=SATLiteral(1728))
-1728 7914 0
-1728 -931 7913 0
-1728 -1081 7913 0
-1728 -1081 -931 0
1728 931 -7913 0
1728 1081 -7913 0
1728 1081 931 -7914 0
c (((SATLiteral(-1080) + aux1954 + SATLiteral(-930))<=1)=tv=SATLiteral(1729))
-1729 7917 0
-1729 930 7916 0
-1729 1080 7916 0
-1729 1080 930 0
1729 -930 -7916 0
1729 -1080 -7916 0
1729 -1080 -930 -7917 0
c (((SATLiteral(1142) + SATLiteral(1157) + SATLiteral(1172))<=1)=tv=SATLiteral(1730))
-1730 -1157 -1172 0
-1730 -1142 -1172 0
-1730 -1142 -1157 0
1730 1157 1172 0
1730 1142 1172 0
1730 1142 1157 0
c (((SATLiteral(1144) + SATLiteral(1159) + SATLiteral(1174))<=1)=tv=SATLiteral(1731))
-1731 -1159 -1174 0
-1731 -1144 -1174 0
-1731 -1144 -1159 0
1731 1159 1174 0
1731 1144 1174 0
1731 1144 1159 0
c (((SATLiteral(1146) + SATLiteral(1161) + SATLiteral(1176))<=1)=tv=SATLiteral(1732))
-1732 -1161 -1176 0
-1732 -1146 -1176 0
-1732 -1146 -1161 0
1732 1161 1176 0
1732 1146 1176 0
1732 1146 1161 0
c (((SATLiteral(1148) + SATLiteral(1163) + SATLiteral(1178))<=1)=tv=SATLiteral(1733))
-1733 -1163 -1178 0
-1733 -1148 -1178 0
-1733 -1148 -1163 0
1733 1163 1178 0
1733 1148 1178 0
1733 1148 1163 0
c (((SATLiteral(1150) + SATLiteral(1165) + SATLiteral(1180))<=1)=tv=SATLiteral(1734))
-1734 -1165 -1180 0
-1734 -1150 -1180 0
-1734 -1150 -1165 0
1734 1165 1180 0
1734 1150 1180 0
1734 1150 1165 0
c (((SATLiteral(1152) + SATLiteral(1167) + SATLiteral(1182))<=1)=tv=SATLiteral(1735))
-1735 -1167 -1182 0
-1735 -1152 -1182 0
-1735 -1152 -1167 0
1735 1167 1182 0
1735 1152 1182 0
1735 1152 1167 0
c (((SATLiteral(1154) + SATLiteral(1169) + SATLiteral(1184))<=1)=tv=SATLiteral(1736))
-1736 -1169 -1184 0
-1736 -1154 -1184 0
-1736 -1154 -1169 0
1736 1169 1184 0
1736 1154 1184 0
1736 1154 1169 0
c (((SATLiteral(1156) + SATLiteral(1171) + SATLiteral(1186))<=1)=tv=SATLiteral(1737))
-1737 -1171 -1186 0
-1737 -1156 -1186 0
-1737 -1156 -1171 0
1737 1171 1186 0
1737 1156 1186 0
1737 1156 1171 0
c (((SATLiteral(-1155) + SATLiteral(-1170) + SATLiteral(-1185))<=1)=tv=SATLiteral(1738))
-1738 1170 1185 0
-1738 1155 1185 0
-1738 1155 1170 0
1738 -1170 -1185 0
1738 -1155 -1185 0
1738 -1155 -1170 0
c (SATLiteral(1273) -> SATLiteral(1302))
-1273 1302 0
c (SATLiteral(1274) -> SATLiteral(1303))
-1274 1303 0
c (SATLiteral(1275) -> SATLiteral(1304))
-1275 1304 0
c (SATLiteral(1276) -> SATLiteral(1305))
-1276 1305 0
c (SATLiteral(1277) -> SATLiteral(1306))
-1277 1306 0
c (SATLiteral(1278) -> SATLiteral(1307))
-1278 1307 0
c (SATLiteral(1279) -> SATLiteral(1308))
-1279 1308 0
c (SATLiteral(1280) -> SATLiteral(1309))
-1280 1309 0
c (SATLiteral(1281) -> SATLiteral(1310))
-1281 1310 0
c (SATLiteral(1282) -> SATLiteral(1311))
-1282 1311 0
c (SATLiteral(1283) -> SATLiteral(1312))
-1283 1312 0
c (SATLiteral(1284) -> SATLiteral(1313))
-1284 1313 0
c (SATLiteral(1285) -> SATLiteral(1314))
-1285 1314 0
c (SATLiteral(1286) -> SATLiteral(1315))
-1286 1315 0
c (SATLiteral(1287) -> SATLiteral(1316))
-1287 1316 0
c (SATLiteral(1288) -> SATLiteral(1317))
-1288 1317 0
c (SATLiteral(1289) -> SATLiteral(1318))
-1289 1318 0
c (SATLiteral(1290) -> SATLiteral(1319))
-1290 1319 0
c (SATLiteral(1291) -> SATLiteral(1320))
-1291 1320 0
c (SATLiteral(1292) -> SATLiteral(1321))
-1292 1321 0
c (SATLiteral(1293) -> SATLiteral(1322))
-1293 1322 0
c (SATLiteral(1294) -> SATLiteral(1323))
-1294 1323 0
c (SATLiteral(1295) -> SATLiteral(1324))
-1295 1324 0
c (SATLiteral(1296) -> SATLiteral(1325))
-1296 1325 0
c (SATLiteral(1297) -> SATLiteral(1326))
-1297 1326 0
c (SATLiteral(1298) -> SATLiteral(1327))
-1298 1327 0
c (SATLiteral(1299) -> SATLiteral(1328))
-1299 1328 0
c (SATLiteral(1300) -> SATLiteral(1329))
-1300 1329 0
c (SATLiteral(1301) -> SATLiteral(1330))
-1301 1330 0
c (SATLiteral(1244) -> SATLiteral(1331))
-1244 1331 0
c (SATLiteral(1247) -> SATLiteral(1332))
-1247 1332 0
c (SATLiteral(1248) -> SATLiteral(1333))
-1248 1333 0
c (SATLiteral(1251) -> SATLiteral(1334))
-1251 1334 0
c (SATLiteral(1255) -> SATLiteral(1335))
-1255 1335 0
c (SATLiteral(1256) -> SATLiteral(1336))
-1256 1336 0
c (SATLiteral(1261) -> SATLiteral(1337))
-1261 1337 0
c (SATLiteral(1265) -> SATLiteral(1338))
-1265 1338 0
c (SATLiteral(1268) -> SATLiteral(1339))
-1268 1339 0
c (SATLiteral(1269) -> SATLiteral(1340))
-1269 1340 0
c (SATLiteral(1270) -> SATLiteral(1341))
-1270 1341 0
c (SATLiteral(1272) -> SATLiteral(1342))
-1272 1342 0
c (SATLiteral(1217) -> SATLiteral(1343))
-1217 1343 0
c (SATLiteral(1217) -> SATLiteral(1344))
-1217 1344 0
c (SATLiteral(1217) -> SATLiteral(1345))
-1217 1345 0
c (SATLiteral(1217) -> SATLiteral(1346))
-1217 1346 0
c (SATLiteral(1217) -> SATLiteral(1347))
-1217 1347 0
c (SATLiteral(1217) -> SATLiteral(1348))
-1217 1348 0
c (SATLiteral(1217) -> SATLiteral(1349))
-1217 1349 0
c (SATLiteral(1217) -> SATLiteral(1350))
-1217 1350 0
c (SATLiteral(1217) -> SATLiteral(1351))
-1217 1351 0
c (SATLiteral(1218) -> SATLiteral(1352))
-1218 1352 0
c (SATLiteral(1218) -> SATLiteral(1353))
-1218 1353 0
c (SATLiteral(1218) -> SATLiteral(1354))
-1218 1354 0
c (SATLiteral(1218) -> SATLiteral(1355))
-1218 1355 0
c (SATLiteral(1218) -> SATLiteral(1356))
-1218 1356 0
c (SATLiteral(1218) -> SATLiteral(1357))
-1218 1357 0
c (SATLiteral(1218) -> SATLiteral(1358))
-1218 1358 0
c (SATLiteral(1218) -> SATLiteral(1359))
-1218 1359 0
c (SATLiteral(1218) -> SATLiteral(1360))
-1218 1360 0
c (SATLiteral(1219) -> SATLiteral(1361))
-1219 1361 0
c (SATLiteral(1219) -> SATLiteral(1362))
-1219 1362 0
c (SATLiteral(1219) -> SATLiteral(1363))
-1219 1363 0
c (SATLiteral(1219) -> SATLiteral(1364))
-1219 1364 0
c (SATLiteral(1219) -> SATLiteral(1365))
-1219 1365 0
c (SATLiteral(1219) -> SATLiteral(1366))
-1219 1366 0
c (SATLiteral(1219) -> SATLiteral(1367))
-1219 1367 0
c (SATLiteral(1219) -> SATLiteral(1368))
-1219 1368 0
c (SATLiteral(1219) -> SATLiteral(1369))
-1219 1369 0
c (SATLiteral(1220) -> SATLiteral(1370))
-1220 1370 0
c (SATLiteral(1220) -> SATLiteral(1371))
-1220 1371 0
c (SATLiteral(1220) -> SATLiteral(1372))
-1220 1372 0
c (SATLiteral(1220) -> SATLiteral(1373))
-1220 1373 0
c (SATLiteral(1220) -> SATLiteral(1374))
-1220 1374 0
c (SATLiteral(1220) -> SATLiteral(1375))
-1220 1375 0
c (SATLiteral(1220) -> SATLiteral(1376))
-1220 1376 0
c (SATLiteral(1220) -> SATLiteral(1377))
-1220 1377 0
c (SATLiteral(1220) -> SATLiteral(1378))
-1220 1378 0
c (SATLiteral(1221) -> SATLiteral(1379))
-1221 1379 0
c (SATLiteral(1221) -> SATLiteral(1380))
-1221 1380 0
c (SATLiteral(1221) -> SATLiteral(1381))
-1221 1381 0
c (SATLiteral(1221) -> SATLiteral(1382))
-1221 1382 0
c (SATLiteral(1221) -> SATLiteral(1383))
-1221 1383 0
c (SATLiteral(1221) -> SATLiteral(1384))
-1221 1384 0
c (SATLiteral(1221) -> SATLiteral(1385))
-1221 1385 0
c (SATLiteral(1221) -> SATLiteral(1386))
-1221 1386 0
c (SATLiteral(1221) -> SATLiteral(1387))
-1221 1387 0
c (SATLiteral(1222) -> SATLiteral(1388))
-1222 1388 0
c (SATLiteral(1222) -> SATLiteral(1389))
-1222 1389 0
c (SATLiteral(1222) -> SATLiteral(1390))
-1222 1390 0
c (SATLiteral(1222) -> SATLiteral(1391))
-1222 1391 0
c (SATLiteral(1222) -> SATLiteral(1392))
-1222 1392 0
c (SATLiteral(1222) -> SATLiteral(1393))
-1222 1393 0
c (SATLiteral(1222) -> SATLiteral(1394))
-1222 1394 0
c (SATLiteral(1222) -> SATLiteral(1395))
-1222 1395 0
c (SATLiteral(1222) -> SATLiteral(1396))
-1222 1396 0
c (SATLiteral(1223) -> SATLiteral(1397))
-1223 1397 0
c (SATLiteral(1223) -> SATLiteral(1398))
-1223 1398 0
c (SATLiteral(1223) -> SATLiteral(1399))
-1223 1399 0
c (SATLiteral(1223) -> SATLiteral(1400))
-1223 1400 0
c (SATLiteral(1223) -> SATLiteral(1401))
-1223 1401 0
c (SATLiteral(1223) -> SATLiteral(1402))
-1223 1402 0
c (SATLiteral(1223) -> SATLiteral(1403))
-1223 1403 0
c (SATLiteral(1223) -> SATLiteral(1404))
-1223 1404 0
c (SATLiteral(1223) -> SATLiteral(1405))
-1223 1405 0
c (SATLiteral(1224) -> SATLiteral(1406))
-1224 1406 0
c (SATLiteral(1224) -> SATLiteral(1407))
-1224 1407 0
c (SATLiteral(1224) -> SATLiteral(1408))
-1224 1408 0
c (SATLiteral(1224) -> SATLiteral(1409))
-1224 1409 0
c (SATLiteral(1224) -> SATLiteral(1410))
-1224 1410 0
c (SATLiteral(1224) -> SATLiteral(1411))
-1224 1411 0
c (SATLiteral(1224) -> SATLiteral(1412))
-1224 1412 0
c (SATLiteral(1224) -> SATLiteral(1413))
-1224 1413 0
c (SATLiteral(1224) -> SATLiteral(1414))
-1224 1414 0
c (SATLiteral(1225) -> SATLiteral(1415))
-1225 1415 0
c (SATLiteral(1225) -> SATLiteral(1416))
-1225 1416 0
c (SATLiteral(1225) -> SATLiteral(1417))
-1225 1417 0
c (SATLiteral(1225) -> SATLiteral(1418))
-1225 1418 0
c (SATLiteral(1225) -> SATLiteral(1419))
-1225 1419 0
c (SATLiteral(1225) -> SATLiteral(1420))
-1225 1420 0
c (SATLiteral(1225) -> SATLiteral(1421))
-1225 1421 0
c (SATLiteral(1225) -> SATLiteral(1422))
-1225 1422 0
c (SATLiteral(1225) -> SATLiteral(1423))
-1225 1423 0
c (SATLiteral(1226) -> SATLiteral(1424))
-1226 1424 0
c (SATLiteral(1226) -> SATLiteral(1425))
-1226 1425 0
c (SATLiteral(1226) -> SATLiteral(1426))
-1226 1426 0
c (SATLiteral(1226) -> SATLiteral(1427))
-1226 1427 0
c (SATLiteral(1226) -> SATLiteral(1428))
-1226 1428 0
c (SATLiteral(1226) -> SATLiteral(1429))
-1226 1429 0
c (SATLiteral(1226) -> SATLiteral(1430))
-1226 1430 0
c (SATLiteral(1226) -> SATLiteral(1431))
-1226 1431 0
c (SATLiteral(1226) -> SATLiteral(1432))
-1226 1432 0
c (SATLiteral(1227) -> SATLiteral(1433))
-1227 1433 0
c (SATLiteral(1227) -> SATLiteral(1434))
-1227 1434 0
c (SATLiteral(1227) -> SATLiteral(1435))
-1227 1435 0
c (SATLiteral(1227) -> SATLiteral(1436))
-1227 1436 0
c (SATLiteral(1227) -> SATLiteral(1437))
-1227 1437 0
c (SATLiteral(1227) -> SATLiteral(1438))
-1227 1438 0
c (SATLiteral(1227) -> SATLiteral(1439))
-1227 1439 0
c (SATLiteral(1227) -> SATLiteral(1440))
-1227 1440 0
c (SATLiteral(1227) -> SATLiteral(1441))
-1227 1441 0
c (SATLiteral(1228) -> SATLiteral(1442))
-1228 1442 0
c (SATLiteral(1228) -> SATLiteral(1443))
-1228 1443 0
c (SATLiteral(1228) -> SATLiteral(1444))
-1228 1444 0
c (SATLiteral(1228) -> SATLiteral(1445))
-1228 1445 0
c (SATLiteral(1228) -> SATLiteral(1446))
-1228 1446 0
c (SATLiteral(1228) -> SATLiteral(1447))
-1228 1447 0
c (SATLiteral(1228) -> SATLiteral(1448))
-1228 1448 0
c (SATLiteral(1228) -> SATLiteral(1449))
-1228 1449 0
c (SATLiteral(1228) -> SATLiteral(1450))
-1228 1450 0
c (SATLiteral(1229) -> SATLiteral(1451))
-1229 1451 0
c (SATLiteral(1229) -> SATLiteral(1452))
-1229 1452 0
c (SATLiteral(1229) -> SATLiteral(1453))
-1229 1453 0
c (SATLiteral(1229) -> SATLiteral(1454))
-1229 1454 0
c (SATLiteral(1229) -> SATLiteral(1455))
-1229 1455 0
c (SATLiteral(1229) -> SATLiteral(1456))
-1229 1456 0
c (SATLiteral(1229) -> SATLiteral(1457))
-1229 1457 0
c (SATLiteral(1229) -> SATLiteral(1458))
-1229 1458 0
c (SATLiteral(1229) -> SATLiteral(1459))
-1229 1459 0
c (SATLiteral(1230) -> SATLiteral(1460))
-1230 1460 0
c (SATLiteral(1230) -> SATLiteral(1461))
-1230 1461 0
c (SATLiteral(1230) -> SATLiteral(1462))
-1230 1462 0
c (SATLiteral(1230) -> SATLiteral(1463))
-1230 1463 0
c (SATLiteral(1230) -> SATLiteral(1464))
-1230 1464 0
c (SATLiteral(1230) -> SATLiteral(1465))
-1230 1465 0
c (SATLiteral(1230) -> SATLiteral(1466))
-1230 1466 0
c (SATLiteral(1230) -> SATLiteral(1467))
-1230 1467 0
c (SATLiteral(1230) -> SATLiteral(1468))
-1230 1468 0
c (SATLiteral(1231) -> SATLiteral(1469))
-1231 1469 0
c (SATLiteral(1231) -> SATLiteral(1470))
-1231 1470 0
c (SATLiteral(1231) -> SATLiteral(1471))
-1231 1471 0
c (SATLiteral(1231) -> SATLiteral(1472))
-1231 1472 0
c (SATLiteral(1231) -> SATLiteral(1473))
-1231 1473 0
c (SATLiteral(1231) -> SATLiteral(1474))
-1231 1474 0
c (SATLiteral(1231) -> SATLiteral(1475))
-1231 1475 0
c (SATLiteral(1231) -> SATLiteral(1476))
-1231 1476 0
c (SATLiteral(1231) -> SATLiteral(1477))
-1231 1477 0
c (SATLiteral(1232) -> SATLiteral(1478))
-1232 1478 0
c (SATLiteral(1232) -> SATLiteral(1479))
-1232 1479 0
c (SATLiteral(1232) -> SATLiteral(1480))
-1232 1480 0
c (SATLiteral(1232) -> SATLiteral(1481))
-1232 1481 0
c (SATLiteral(1232) -> SATLiteral(1482))
-1232 1482 0
c (SATLiteral(1232) -> SATLiteral(1483))
-1232 1483 0
c (SATLiteral(1232) -> SATLiteral(1484))
-1232 1484 0
c (SATLiteral(1232) -> SATLiteral(1485))
-1232 1485 0
c (SATLiteral(1232) -> SATLiteral(1486))
-1232 1486 0
c (SATLiteral(1233) -> SATLiteral(1487))
-1233 1487 0
c (SATLiteral(1233) -> SATLiteral(1488))
-1233 1488 0
c (SATLiteral(1233) -> SATLiteral(1489))
-1233 1489 0
c (SATLiteral(1233) -> SATLiteral(1490))
-1233 1490 0
c (SATLiteral(1233) -> SATLiteral(1491))
-1233 1491 0
c (SATLiteral(1233) -> SATLiteral(1492))
-1233 1492 0
c (SATLiteral(1233) -> SATLiteral(1493))
-1233 1493 0
c (SATLiteral(1233) -> SATLiteral(1494))
-1233 1494 0
c (SATLiteral(1233) -> SATLiteral(1495))
-1233 1495 0
c (SATLiteral(1234) -> SATLiteral(1496))
-1234 1496 0
c (SATLiteral(1234) -> SATLiteral(1497))
-1234 1497 0
c (SATLiteral(1234) -> SATLiteral(1498))
-1234 1498 0
c (SATLiteral(1234) -> SATLiteral(1499))
-1234 1499 0
c (SATLiteral(1234) -> SATLiteral(1500))
-1234 1500 0
c (SATLiteral(1234) -> SATLiteral(1501))
-1234 1501 0
c (SATLiteral(1234) -> SATLiteral(1502))
-1234 1502 0
c (SATLiteral(1234) -> SATLiteral(1503))
-1234 1503 0
c (SATLiteral(1234) -> SATLiteral(1504))
-1234 1504 0
c (SATLiteral(1235) -> SATLiteral(1505))
-1235 1505 0
c (SATLiteral(1235) -> SATLiteral(1506))
-1235 1506 0
c (SATLiteral(1235) -> SATLiteral(1507))
-1235 1507 0
c (SATLiteral(1235) -> SATLiteral(1508))
-1235 1508 0
c (SATLiteral(1235) -> SATLiteral(1509))
-1235 1509 0
c (SATLiteral(1235) -> SATLiteral(1510))
-1235 1510 0
c (SATLiteral(1235) -> SATLiteral(1511))
-1235 1511 0
c (SATLiteral(1235) -> SATLiteral(1512))
-1235 1512 0
c (SATLiteral(1235) -> SATLiteral(1513))
-1235 1513 0
c (SATLiteral(1236) -> SATLiteral(1514))
-1236 1514 0
c (SATLiteral(1236) -> SATLiteral(1515))
-1236 1515 0
c (SATLiteral(1236) -> SATLiteral(1516))
-1236 1516 0
c (SATLiteral(1236) -> SATLiteral(1517))
-1236 1517 0
c (SATLiteral(1236) -> SATLiteral(1518))
-1236 1518 0
c (SATLiteral(1236) -> SATLiteral(1519))
-1236 1519 0
c (SATLiteral(1236) -> SATLiteral(1520))
-1236 1520 0
c (SATLiteral(1236) -> SATLiteral(1521))
-1236 1521 0
c (SATLiteral(1236) -> SATLiteral(1522))
-1236 1522 0
c (SATLiteral(1237) -> SATLiteral(1523))
-1237 1523 0
c (SATLiteral(1237) -> SATLiteral(1524))
-1237 1524 0
c (SATLiteral(1237) -> SATLiteral(1525))
-1237 1525 0
c (SATLiteral(1237) -> SATLiteral(1526))
-1237 1526 0
c (SATLiteral(1237) -> SATLiteral(1527))
-1237 1527 0
c (SATLiteral(1237) -> SATLiteral(1528))
-1237 1528 0
c (SATLiteral(1237) -> SATLiteral(1529))
-1237 1529 0
c (SATLiteral(1237) -> SATLiteral(1530))
-1237 1530 0
c (SATLiteral(1237) -> SATLiteral(1531))
-1237 1531 0
c (SATLiteral(1238) -> SATLiteral(1532))
-1238 1532 0
c (SATLiteral(1238) -> SATLiteral(1533))
-1238 1533 0
c (SATLiteral(1238) -> SATLiteral(1534))
-1238 1534 0
c (SATLiteral(1238) -> SATLiteral(1535))
-1238 1535 0
c (SATLiteral(1238) -> SATLiteral(1536))
-1238 1536 0
c (SATLiteral(1238) -> SATLiteral(1537))
-1238 1537 0
c (SATLiteral(1238) -> SATLiteral(1538))
-1238 1538 0
c (SATLiteral(1238) -> SATLiteral(1539))
-1238 1539 0
c (SATLiteral(1238) -> SATLiteral(1540))
-1238 1540 0
c (SATLiteral(1239) -> SATLiteral(1541))
-1239 1541 0
c (SATLiteral(1239) -> SATLiteral(1542))
-1239 1542 0
c (SATLiteral(1239) -> SATLiteral(1543))
-1239 1543 0
c (SATLiteral(1239) -> SATLiteral(1544))
-1239 1544 0
c (SATLiteral(1239) -> SATLiteral(1545))
-1239 1545 0
c (SATLiteral(1239) -> SATLiteral(1546))
-1239 1546 0
c (SATLiteral(1239) -> SATLiteral(1547))
-1239 1547 0
c (SATLiteral(1239) -> SATLiteral(1548))
-1239 1548 0
c (SATLiteral(1239) -> SATLiteral(1549))
-1239 1549 0
c (SATLiteral(1240) -> SATLiteral(1550))
-1240 1550 0
c (SATLiteral(1240) -> SATLiteral(1551))
-1240 1551 0
c (SATLiteral(1240) -> SATLiteral(1552))
-1240 1552 0
c (SATLiteral(1240) -> SATLiteral(1553))
-1240 1553 0
c (SATLiteral(1240) -> SATLiteral(1554))
-1240 1554 0
c (SATLiteral(1240) -> SATLiteral(1555))
-1240 1555 0
c (SATLiteral(1240) -> SATLiteral(1556))
-1240 1556 0
c (SATLiteral(1240) -> SATLiteral(1557))
-1240 1557 0
c (SATLiteral(1240) -> SATLiteral(1558))
-1240 1558 0
c (SATLiteral(1241) -> SATLiteral(1559))
-1241 1559 0
c (SATLiteral(1241) -> SATLiteral(1560))
-1241 1560 0
c (SATLiteral(1241) -> SATLiteral(1561))
-1241 1561 0
c (SATLiteral(1241) -> SATLiteral(1562))
-1241 1562 0
c (SATLiteral(1241) -> SATLiteral(1563))
-1241 1563 0
c (SATLiteral(1241) -> SATLiteral(1564))
-1241 1564 0
c (SATLiteral(1241) -> SATLiteral(1565))
-1241 1565 0
c (SATLiteral(1241) -> SATLiteral(1566))
-1241 1566 0
c (SATLiteral(1241) -> SATLiteral(1567))
-1241 1567 0
c (SATLiteral(1242) -> SATLiteral(1568))
-1242 1568 0
c (SATLiteral(1242) -> SATLiteral(1569))
-1242 1569 0
c (SATLiteral(1242) -> SATLiteral(1570))
-1242 1570 0
c (SATLiteral(1242) -> SATLiteral(1571))
-1242 1571 0
c (SATLiteral(1242) -> SATLiteral(1572))
-1242 1572 0
c (SATLiteral(1242) -> SATLiteral(1573))
-1242 1573 0
c (SATLiteral(1242) -> SATLiteral(1574))
-1242 1574 0
c (SATLiteral(1242) -> SATLiteral(1575))
-1242 1575 0
c (SATLiteral(1242) -> SATLiteral(1576))
-1242 1576 0
c (SATLiteral(1243) -> SATLiteral(1577))
-1243 1577 0
c (SATLiteral(1243) -> SATLiteral(1578))
-1243 1578 0
c (SATLiteral(1243) -> SATLiteral(1579))
-1243 1579 0
c (SATLiteral(1243) -> SATLiteral(1580))
-1243 1580 0
c (SATLiteral(1243) -> SATLiteral(1581))
-1243 1581 0
c (SATLiteral(1243) -> SATLiteral(1582))
-1243 1582 0
c (SATLiteral(1243) -> SATLiteral(1583))
-1243 1583 0
c (SATLiteral(1243) -> SATLiteral(1584))
-1243 1584 0
c (SATLiteral(1243) -> SATLiteral(1585))
-1243 1585 0
c (SATLiteral(1245) -> SATLiteral(1586))
-1245 1586 0
c (SATLiteral(1245) -> SATLiteral(1587))
-1245 1587 0
c (SATLiteral(1245) -> SATLiteral(1588))
-1245 1588 0
c (SATLiteral(1245) -> SATLiteral(1589))
-1245 1589 0
c (SATLiteral(1245) -> SATLiteral(1590))
-1245 1590 0
c (SATLiteral(1245) -> SATLiteral(1591))
-1245 1591 0
c (SATLiteral(1245) -> SATLiteral(1592))
-1245 1592 0
c (SATLiteral(1245) -> SATLiteral(1593))
-1245 1593 0
c (SATLiteral(1245) -> SATLiteral(1594))
-1245 1594 0
c (SATLiteral(1246) -> SATLiteral(1595))
-1246 1595 0
c (SATLiteral(1246) -> SATLiteral(1596))
-1246 1596 0
c (SATLiteral(1246) -> SATLiteral(1597))
-1246 1597 0
c (SATLiteral(1246) -> SATLiteral(1598))
-1246 1598 0
c (SATLiteral(1246) -> SATLiteral(1599))
-1246 1599 0
c (SATLiteral(1246) -> SATLiteral(1600))
-1246 1600 0
c (SATLiteral(1246) -> SATLiteral(1601))
-1246 1601 0
c (SATLiteral(1246) -> SATLiteral(1602))
-1246 1602 0
c (SATLiteral(1246) -> SATLiteral(1603))
-1246 1603 0
c (SATLiteral(1249) -> SATLiteral(1604))
-1249 1604 0
c (SATLiteral(1249) -> SATLiteral(1605))
-1249 1605 0
c (SATLiteral(1249) -> SATLiteral(1606))
-1249 1606 0
c (SATLiteral(1249) -> SATLiteral(1607))
-1249 1607 0
c (SATLiteral(1249) -> SATLiteral(1608))
-1249 1608 0
c (SATLiteral(1249) -> SATLiteral(1609))
-1249 1609 0
c (SATLiteral(1249) -> SATLiteral(1610))
-1249 1610 0
c (SATLiteral(1249) -> SATLiteral(1611))
-1249 1611 0
c (SATLiteral(1249) -> SATLiteral(1612))
-1249 1612 0
c (SATLiteral(1250) -> SATLiteral(1613))
-1250 1613 0
c (SATLiteral(1250) -> SATLiteral(1614))
-1250 1614 0
c (SATLiteral(1250) -> SATLiteral(1615))
-1250 1615 0
c (SATLiteral(1250) -> SATLiteral(1616))
-1250 1616 0
c (SATLiteral(1250) -> SATLiteral(1617))
-1250 1617 0
c (SATLiteral(1250) -> SATLiteral(1618))
-1250 1618 0
c (SATLiteral(1250) -> SATLiteral(1619))
-1250 1619 0
c (SATLiteral(1250) -> SATLiteral(1620))
-1250 1620 0
c (SATLiteral(1250) -> SATLiteral(1621))
-1250 1621 0
c (SATLiteral(1252) -> SATLiteral(1622))
-1252 1622 0
c (SATLiteral(1252) -> SATLiteral(1623))
-1252 1623 0
c (SATLiteral(1252) -> SATLiteral(1624))
-1252 1624 0
c (SATLiteral(1252) -> SATLiteral(1625))
-1252 1625 0
c (SATLiteral(1252) -> SATLiteral(1626))
-1252 1626 0
c (SATLiteral(1252) -> SATLiteral(1627))
-1252 1627 0
c (SATLiteral(1252) -> SATLiteral(1628))
-1252 1628 0
c (SATLiteral(1252) -> SATLiteral(1629))
-1252 1629 0
c (SATLiteral(1252) -> SATLiteral(1630))
-1252 1630 0
c (SATLiteral(1253) -> SATLiteral(1631))
-1253 1631 0
c (SATLiteral(1253) -> SATLiteral(1632))
-1253 1632 0
c (SATLiteral(1253) -> SATLiteral(1633))
-1253 1633 0
c (SATLiteral(1253) -> SATLiteral(1634))
-1253 1634 0
c (SATLiteral(1253) -> SATLiteral(1635))
-1253 1635 0
c (SATLiteral(1253) -> SATLiteral(1636))
-1253 1636 0
c (SATLiteral(1253) -> SATLiteral(1637))
-1253 1637 0
c (SATLiteral(1253) -> SATLiteral(1638))
-1253 1638 0
c (SATLiteral(1253) -> SATLiteral(1639))
-1253 1639 0
c (SATLiteral(1254) -> SATLiteral(1640))
-1254 1640 0
c (SATLiteral(1254) -> SATLiteral(1641))
-1254 1641 0
c (SATLiteral(1254) -> SATLiteral(1642))
-1254 1642 0
c (SATLiteral(1254) -> SATLiteral(1643))
-1254 1643 0
c (SATLiteral(1254) -> SATLiteral(1644))
-1254 1644 0
c (SATLiteral(1254) -> SATLiteral(1645))
-1254 1645 0
c (SATLiteral(1254) -> SATLiteral(1646))
-1254 1646 0
c (SATLiteral(1254) -> SATLiteral(1647))
-1254 1647 0
c (SATLiteral(1254) -> SATLiteral(1648))
-1254 1648 0
c (SATLiteral(1257) -> SATLiteral(1649))
-1257 1649 0
c (SATLiteral(1257) -> SATLiteral(1650))
-1257 1650 0
c (SATLiteral(1257) -> SATLiteral(1651))
-1257 1651 0
c (SATLiteral(1257) -> SATLiteral(1652))
-1257 1652 0
c (SATLiteral(1257) -> SATLiteral(1653))
-1257 1653 0
c (SATLiteral(1257) -> SATLiteral(1654))
-1257 1654 0
c (SATLiteral(1257) -> SATLiteral(1655))
-1257 1655 0
c (SATLiteral(1257) -> SATLiteral(1656))
-1257 1656 0
c (SATLiteral(1257) -> SATLiteral(1657))
-1257 1657 0
c (SATLiteral(1258) -> SATLiteral(1658))
-1258 1658 0
c (SATLiteral(1258) -> SATLiteral(1659))
-1258 1659 0
c (SATLiteral(1258) -> SATLiteral(1660))
-1258 1660 0
c (SATLiteral(1258) -> SATLiteral(1661))
-1258 1661 0
c (SATLiteral(1258) -> SATLiteral(1662))
-1258 1662 0
c (SATLiteral(1258) -> SATLiteral(1663))
-1258 1663 0
c (SATLiteral(1258) -> SATLiteral(1664))
-1258 1664 0
c (SATLiteral(1258) -> SATLiteral(1665))
-1258 1665 0
c (SATLiteral(1258) -> SATLiteral(1666))
-1258 1666 0
c (SATLiteral(1259) -> SATLiteral(1667))
-1259 1667 0
c (SATLiteral(1259) -> SATLiteral(1668))
-1259 1668 0
c (SATLiteral(1259) -> SATLiteral(1669))
-1259 1669 0
c (SATLiteral(1259) -> SATLiteral(1670))
-1259 1670 0
c (SATLiteral(1259) -> SATLiteral(1671))
-1259 1671 0
c (SATLiteral(1259) -> SATLiteral(1672))
-1259 1672 0
c (SATLiteral(1259) -> SATLiteral(1673))
-1259 1673 0
c (SATLiteral(1259) -> SATLiteral(1674))
-1259 1674 0
c (SATLiteral(1259) -> SATLiteral(1675))
-1259 1675 0
c (SATLiteral(1260) -> SATLiteral(1676))
-1260 1676 0
c (SATLiteral(1260) -> SATLiteral(1677))
-1260 1677 0
c (SATLiteral(1260) -> SATLiteral(1678))
-1260 1678 0
c (SATLiteral(1260) -> SATLiteral(1679))
-1260 1679 0
c (SATLiteral(1260) -> SATLiteral(1680))
-1260 1680 0
c (SATLiteral(1260) -> SATLiteral(1681))
-1260 1681 0
c (SATLiteral(1260) -> SATLiteral(1682))
-1260 1682 0
c (SATLiteral(1260) -> SATLiteral(1683))
-1260 1683 0
c (SATLiteral(1260) -> SATLiteral(1684))
-1260 1684 0
c (SATLiteral(1262) -> SATLiteral(1685))
-1262 1685 0
c (SATLiteral(1262) -> SATLiteral(1686))
-1262 1686 0
c (SATLiteral(1262) -> SATLiteral(1687))
-1262 1687 0
c (SATLiteral(1262) -> SATLiteral(1688))
-1262 1688 0
c (SATLiteral(1262) -> SATLiteral(1689))
-1262 1689 0
c (SATLiteral(1262) -> SATLiteral(1690))
-1262 1690 0
c (SATLiteral(1262) -> SATLiteral(1691))
-1262 1691 0
c (SATLiteral(1262) -> SATLiteral(1692))
-1262 1692 0
c (SATLiteral(1262) -> SATLiteral(1693))
-1262 1693 0
c (SATLiteral(1263) -> SATLiteral(1694))
-1263 1694 0
c (SATLiteral(1263) -> SATLiteral(1695))
-1263 1695 0
c (SATLiteral(1263) -> SATLiteral(1696))
-1263 1696 0
c (SATLiteral(1263) -> SATLiteral(1697))
-1263 1697 0
c (SATLiteral(1263) -> SATLiteral(1698))
-1263 1698 0
c (SATLiteral(1263) -> SATLiteral(1699))
-1263 1699 0
c (SATLiteral(1263) -> SATLiteral(1700))
-1263 1700 0
c (SATLiteral(1263) -> SATLiteral(1701))
-1263 1701 0
c (SATLiteral(1263) -> SATLiteral(1702))
-1263 1702 0
c (SATLiteral(1264) -> SATLiteral(1703))
-1264 1703 0
c (SATLiteral(1264) -> SATLiteral(1704))
-1264 1704 0
c (SATLiteral(1264) -> SATLiteral(1705))
-1264 1705 0
c (SATLiteral(1264) -> SATLiteral(1706))
-1264 1706 0
c (SATLiteral(1264) -> SATLiteral(1707))
-1264 1707 0
c (SATLiteral(1264) -> SATLiteral(1708))
-1264 1708 0
c (SATLiteral(1264) -> SATLiteral(1709))
-1264 1709 0
c (SATLiteral(1264) -> SATLiteral(1710))
-1264 1710 0
c (SATLiteral(1264) -> SATLiteral(1711))
-1264 1711 0
c (SATLiteral(1266) -> SATLiteral(1712))
-1266 1712 0
c (SATLiteral(1266) -> SATLiteral(1713))
-1266 1713 0
c (SATLiteral(1266) -> SATLiteral(1714))
-1266 1714 0
c (SATLiteral(1266) -> SATLiteral(1715))
-1266 1715 0
c (SATLiteral(1266) -> SATLiteral(1716))
-1266 1716 0
c (SATLiteral(1266) -> SATLiteral(1717))
-1266 1717 0
c (SATLiteral(1266) -> SATLiteral(1718))
-1266 1718 0
c (SATLiteral(1266) -> SATLiteral(1719))
-1266 1719 0
c (SATLiteral(1266) -> SATLiteral(1720))
-1266 1720 0
c (SATLiteral(1267) -> SATLiteral(1721))
-1267 1721 0
c (SATLiteral(1267) -> SATLiteral(1722))
-1267 1722 0
c (SATLiteral(1267) -> SATLiteral(1723))
-1267 1723 0
c (SATLiteral(1267) -> SATLiteral(1724))
-1267 1724 0
c (SATLiteral(1267) -> SATLiteral(1725))
-1267 1725 0
c (SATLiteral(1267) -> SATLiteral(1726))
-1267 1726 0
c (SATLiteral(1267) -> SATLiteral(1727))
-1267 1727 0
c (SATLiteral(1267) -> SATLiteral(1728))
-1267 1728 0
c (SATLiteral(1267) -> SATLiteral(1729))
-1267 1729 0
c (SATLiteral(1271) -> SATLiteral(1730))
-1271 1730 0
c (SATLiteral(1271) -> SATLiteral(1731))
-1271 1731 0
c (SATLiteral(1271) -> SATLiteral(1732))
-1271 1732 0
c (SATLiteral(1271) -> SATLiteral(1733))
-1271 1733 0
c (SATLiteral(1271) -> SATLiteral(1734))
-1271 1734 0
c (SATLiteral(1271) -> SATLiteral(1735))
-1271 1735 0
c (SATLiteral(1271) -> SATLiteral(1736))
-1271 1736 0
c (SATLiteral(1271) -> SATLiteral(1737))
-1271 1737 0
c (SATLiteral(1271) -> SATLiteral(1738))
-1271 1738 0
c (( - aux437 + shift(x_00001_00006, -1) + shift(x_00002_00005, -1))<=0)
197 -1739 0
198 -1740 0
200 -1742 0
202 -1744 0
204 -1746 0
206 -1748 0
208 -1750 0
210 -1752 0
77 -1739 0
77 197 -1740 0
77 198 -1742 0
77 200 -1744 0
77 202 -1746 0
77 204 -1748 0
77 206 -1750 0
77 208 -1752 0
77 210 -1754 0
78 -1740 0
78 197 -1742 0
78 198 -1744 0
78 200 -1746 0
78 202 -1748 0
78 204 -1750 0
78 206 -1752 0
78 208 -1754 0
78 210 -1756 0
80 -1742 0
80 197 -1744 0
80 198 -1746 0
80 200 -1748 0
80 202 -1750 0
80 204 -1752 0
80 206 -1754 0
80 208 -1756 0
80 210 -1758 0
82 -1744 0
82 197 -1746 0
82 198 -1748 0
82 200 -1750 0
82 202 -1752 0
82 204 -1754 0
82 206 -1756 0
82 208 -1758 0
82 210 -1760 0
84 -1746 0
84 197 -1748 0
84 198 -1750 0
84 200 -1752 0
84 202 -1754 0
84 204 -1756 0
84 206 -1758 0
84 208 -1760 0
84 210 -1762 0
86 -1748 0
86 197 -1750 0
86 198 -1752 0
86 200 -1754 0
86 202 -1756 0
86 204 -1758 0
86 206 -1760 0
86 208 -1762 0
86 210 -1764 0
88 -1750 0
88 197 -1752 0
88 198 -1754 0
88 200 -1756 0
88 202 -1758 0
88 204 -1760 0
88 206 -1762 0
88 208 -1764 0
88 210 -1766 0
90 -1752 0
90 197 -1754 0
90 198 -1756 0
90 200 -1758 0
90 202 -1760 0
90 204 -1762 0
90 206 -1764 0
90 208 -1766 0
90 210 -1768 0
c (0<=( - aux437 + shift(x_00001_00006, -1) + shift(x_00002_00005, -1)))
-210 1768 0
-208 1766 0
-206 1764 0
-204 1762 0
-202 1760 0
-200 1758 0
-198 1756 0
-197 1754 0
-90 1768 0
-90 -210 1766 0
-90 -208 1764 0
-90 -206 1762 0
-90 -204 1760 0
-90 -202 1758 0
-90 -200 1756 0
-90 -198 1754 0
-90 -197 1752 0
-88 1766 0
-88 -210 1764 0
-88 -208 1762 0
-88 -206 1760 0
-88 -204 1758 0
-88 -202 1756 0
-88 -200 1754 0
-88 -198 1752 0
-88 -197 1750 0
-86 1764 0
-86 -210 1762 0
-86 -208 1760 0
-86 -206 1758 0
-86 -204 1756 0
-86 -202 1754 0
-86 -200 1752 0
-86 -198 1750 0
-86 -197 1748 0
-84 1762 0
-84 -210 1760 0
-84 -208 1758 0
-84 -206 1756 0
-84 -204 1754 0
-84 -202 1752 0
-84 -200 1750 0
-84 -198 1748 0
-84 -197 1746 0
-82 1760 0
-82 -210 1758 0
-82 -208 1756 0
-82 -206 1754 0
-82 -204 1752 0
-82 -202 1750 0
-82 -200 1748 0
-82 -198 1746 0
-82 -197 1744 0
-80 1758 0
-80 -210 1756 0
-80 -208 1754 0
-80 -206 1752 0
-80 -204 1750 0
-80 -202 1748 0
-80 -200 1746 0
-80 -198 1744 0
-80 -197 1742 0
-78 1756 0
-78 -210 1754 0
-78 -208 1752 0
-78 -206 1750 0
-78 -204 1748 0
-78 -202 1746 0
-78 -200 1744 0
-78 -198 1742 0
-78 -197 1740 0
-77 1754 0
-77 -210 1752 0
-77 -208 1750 0
-77 -206 1748 0
-77 -204 1746 0
-77 -202 1744 0
-77 -200 1742 0
-77 -198 1740 0
-77 -197 1739 0
c (( - aux438 + shift(x_00001_00009, -1) + shift(x_00002_00009, -1))<=0)
257 -1770 0
258 -1771 0
260 -1773 0
262 -1775 0
264 -1777 0
266 -1779 0
268 -1781 0
270 -1783 0
122 -1770 0
122 257 -1771 0
122 258 -1773 0
122 260 -1775 0
122 262 -1777 0
122 264 -1779 0
122 266 -1781 0
122 268 -1783 0
122 270 -1785 0
123 -1771 0
123 257 -1773 0
123 258 -1775 0
123 260 -1777 0
123 262 -1779 0
123 264 -1781 0
123 266 -1783 0
123 268 -1785 0
123 270 -1787 0
125 -1773 0
125 257 -1775 0
125 258 -1777 0
125 260 -1779 0
125 262 -1781 0
125 264 -1783 0
125 266 -1785 0
125 268 -1787 0
125 270 -1789 0
127 -1775 0
127 257 -1777 0
127 258 -1779 0
127 260 -1781 0
127 262 -1783 0
127 264 -1785 0
127 266 -1787 0
127 268 -1789 0
127 270 -1791 0
129 -1777 0
129 257 -1779 0
129 258 -1781 0
129 260 -1783 0
129 262 -1785 0
129 264 -1787 0
129 266 -1789 0
129 268 -1791 0
129 270 -1793 0
131 -1779 0
131 257 -1781 0
131 258 -1783 0
131 260 -1785 0
131 262 -1787 0
131 264 -1789 0
131 266 -1791 0
131 268 -1793 0
131 270 -1795 0
133 -1781 0
133 257 -1783 0
133 258 -1785 0
133 260 -1787 0
133 262 -1789 0
133 264 -1791 0
133 266 -1793 0
133 268 -1795 0
133 270 -1797 0
135 -1783 0
135 257 -1785 0
135 258 -1787 0
135 260 -1789 0
135 262 -1791 0
135 264 -1793 0
135 266 -1795 0
135 268 -1797 0
135 270 -1799 0
c (0<=( - aux438 + shift(x_00001_00009, -1) + shift(x_00002_00009, -1)))
-270 1799 0
-268 1797 0
-266 1795 0
-264 1793 0
-262 1791 0
-260 1789 0
-258 1787 0
-257 1785 0
-135 1799 0
-135 -270 1797 0
-135 -268 1795 0
-135 -266 1793 0
-135 -264 1791 0
-135 -262 1789 0
-135 -260 1787 0
-135 -258 1785 0
-135 -257 1783 0
-133 1797 0
-133 -270 1795 0
-133 -268 1793 0
-133 -266 1791 0
-133 -264 1789 0
-133 -262 1787 0
-133 -260 1785 0
-133 -258 1783 0
-133 -257 1781 0
-131 1795 0
-131 -270 1793 0
-131 -268 1791 0
-131 -266 1789 0
-131 -264 1787 0
-131 -262 1785 0
-131 -260 1783 0
-131 -258 1781 0
-131 -257 1779 0
-129 1793 0
-129 -270 1791 0
-129 -268 1789 0
-129 -266 1787 0
-129 -264 1785 0
-129 -262 1783 0
-129 -260 1781 0
-129 -258 1779 0
-129 -257 1777 0
-127 1791 0
-127 -270 1789 0
-127 -268 1787 0
-127 -266 1785 0
-127 -264 1783 0
-127 -262 1781 0
-127 -260 1779 0
-127 -258 1777 0
-127 -257 1775 0
-125 1789 0
-125 -270 1787 0
-125 -268 1785 0
-125 -266 1783 0
-125 -264 1781 0
-125 -262 1779 0
-125 -260 1777 0
-125 -258 1775 0
-125 -257 1773 0
-123 1787 0
-123 -270 1785 0
-123 -268 1783 0
-123 -266 1781 0
-123 -264 1779 0
-123 -262 1777 0
-123 -260 1775 0
-123 -258 1773 0
-123 -257 1771 0
-122 1785 0
-122 -270 1783 0
-122 -268 1781 0
-122 -266 1779 0
-122 -264 1777 0
-122 -262 1775 0
-122 -260 1773 0
-122 -258 1771 0
-122 -257 1770 0
c (( - aux439 + shift(x_00003_00002, -1) + shift(x_00002_00001, -1))<=0)
137 -1801 0
138 -1802 0
140 -1804 0
142 -1806 0
144 -1808 0
146 -1810 0
148 -1812 0
150 -1814 0
287 -1801 0
287 137 -1802 0
287 138 -1804 0
287 140 -1806 0
287 142 -1808 0
287 144 -1810 0
287 146 -1812 0
287 148 -1814 0
287 150 -1816 0
288 -1802 0
288 137 -1804 0
288 138 -1806 0
288 140 -1808 0
288 142 -1810 0
288 144 -1812 0
288 146 -1814 0
288 148 -1816 0
288 150 -1818 0
290 -1804 0
290 137 -1806 0
290 138 -1808 0
290 140 -1810 0
290 142 -1812 0
290 144 -1814 0
290 146 -1816 0
290 148 -1818 0
290 150 -1820 0
292 -1806 0
292 137 -1808 0
292 138 -1810 0
292 140 -1812 0
292 142 -1814 0
292 144 -1816 0
292 146 -1818 0
292 148 -1820 0
292 150 -1822 0
294 -1808 0
294 137 -1810 0
294 138 -1812 0
294 140 -1814 0
294 142 -1816 0
294 144 -1818 0
294 146 -1820 0
294 148 -1822 0
294 150 -1824 0
296 -1810 0
296 137 -1812 0
296 138 -1814 0
296 140 -1816 0
296 142 -1818 0
296 144 -1820 0
296 146 -1822 0
296 148 -1824 0
296 150 -1826 0
298 -1812 0
298 137 -1814 0
298 138 -1816 0
298 140 -1818 0
298 142 -1820 0
298 144 -1822 0
298 146 -1824 0
298 148 -1826 0
298 150 -1828 0
300 -1814 0
300 137 -1816 0
300 138 -1818 0
300 140 -1820 0
300 142 -1822 0
300 144 -1824 0
300 146 -1826 0
300 148 -1828 0
300 150 -1830 0
c (0<=( - aux439 + shift(x_00003_00002, -1) + shift(x_00002_00001, -1)))
-150 1830 0
-148 1828 0
-146 1826 0
-144 1824 0
-142 1822 0
-140 1820 0
-138 1818 0
-137 1816 0
-300 1830 0
-300 -150 1828 0
-300 -148 1826 0
-300 -146 1824 0
-300 -144 1822 0
-300 -142 1820 0
-300 -140 1818 0
-300 -138 1816 0
-300 -137 1814 0
-298 1828 0
-298 -150 1826 0
-298 -148 1824 0
-298 -146 1822 0
-298 -144 1820 0
-298 -142 1818 0
-298 -140 1816 0
-298 -138 1814 0
-298 -137 1812 0
-296 1826 0
-296 -150 1824 0
-296 -148 1822 0
-296 -146 1820 0
-296 -144 1818 0
-296 -142 1816 0
-296 -140 1814 0
-296 -138 1812 0
-296 -137 1810 0
-294 1824 0
-294 -150 1822 0
-294 -148 1820 0
-294 -146 1818 0
-294 -144 1816 0
-294 -142 1814 0
-294 -140 1812 0
-294 -138 1810 0
-294 -137 1808 0
-292 1822 0
-292 -150 1820 0
-292 -148 1818 0
-292 -146 1816 0
-292 -144 1814 0
-292 -142 1812 0
-292 -140 1810 0
-292 -138 1808 0
-292 -137 1806 0
-290 1820 0
-290 -150 1818 0
-290 -148 1816 0
-290 -146 1814 0
-290 -144 1812 0
-290 -142 1810 0
-290 -140 1808 0
-290 -138 1806 0
-290 -137 1804 0
-288 1818 0
-288 -150 1816 0
-288 -148 1814 0
-288 -146 1812 0
-288 -144 1810 0
-288 -142 1808 0
-288 -140 1806 0
-288 -138 1804 0
-288 -137 1802 0
-287 1816 0
-287 -150 1814 0
-287 -148 1812 0
-287 -146 1810 0
-287 -144 1808 0
-287 -142 1806 0
-287 -140 1804 0
-287 -138 1802 0
-287 -137 1801 0
c ((shift(x_00007_00001, -1) - aux440 + shift(x_00006_00001, -1))<=0)
677 -1832 0
678 -1833 0
680 -1835 0
682 -1837 0
684 -1839 0
686 -1841 0
688 -1843 0
690 -1845 0
812 -1832 0
812 677 -1833 0
812 678 -1835 0
812 680 -1837 0
812 682 -1839 0
812 684 -1841 0
812 686 -1843 0
812 688 -1845 0
812 690 -1847 0
813 -1833 0
813 677 -1835 0
813 678 -1837 0
813 680 -1839 0
813 682 -1841 0
813 684 -1843 0
813 686 -1845 0
813 688 -1847 0
813 690 -1849 0
815 -1835 0
815 677 -1837 0
815 678 -1839 0
815 680 -1841 0
815 682 -1843 0
815 684 -1845 0
815 686 -1847 0
815 688 -1849 0
815 690 -1851 0
817 -1837 0
817 677 -1839 0
817 678 -1841 0
817 680 -1843 0
817 682 -1845 0
817 684 -1847 0
817 686 -1849 0
817 688 -1851 0
817 690 -1853 0
819 -1839 0
819 677 -1841 0
819 678 -1843 0
819 680 -1845 0
819 682 -1847 0
819 684 -1849 0
819 686 -1851 0
819 688 -1853 0
819 690 -1855 0
821 -1841 0
821 677 -1843 0
821 678 -1845 0
821 680 -1847 0
821 682 -1849 0
821 684 -1851 0
821 686 -1853 0
821 688 -1855 0
821 690 -1857 0
823 -1843 0
823 677 -1845 0
823 678 -1847 0
823 680 -1849 0
823 682 -1851 0
823 684 -1853 0
823 686 -1855 0
823 688 -1857 0
823 690 -1859 0
825 -1845 0
825 677 -1847 0
825 678 -1849 0
825 680 -1851 0
825 682 -1853 0
825 684 -1855 0
825 686 -1857 0
825 688 -1859 0
825 690 -1861 0
c (0<=(shift(x_00007_00001, -1) - aux440 + shift(x_00006_00001, -1)))
-690 1861 0
-688 1859 0
-686 1857 0
-684 1855 0
-682 1853 0
-680 1851 0
-678 1849 0
-677 1847 0
-825 1861 0
-825 -690 1859 0
-825 -688 1857 0
-825 -686 1855 0
-825 -684 1853 0
-825 -682 1851 0
-825 -680 1849 0
-825 -678 1847 0
-825 -677 1845 0
-823 1859 0
-823 -690 1857 0
-823 -688 1855 0
-823 -686 1853 0
-823 -684 1851 0
-823 -682 1849 0
-823 -680 1847 0
-823 -678 1845 0
-823 -677 1843 0
-821 1857 0
-821 -690 1855 0
-821 -688 1853 0
-821 -686 1851 0
-821 -684 1849 0
-821 -682 1847 0
-821 -680 1845 0
-821 -678 1843 0
-821 -677 1841 0
-819 1855 0
-819 -690 1853 0
-819 -688 1851 0
-819 -686 1849 0
-819 -684 1847 0
-819 -682 1845 0
-819 -680 1843 0
-819 -678 1841 0
-819 -677 1839 0
-817 1853 0
-817 -690 1851 0
-817 -688 1849 0
-817 -686 1847 0
-817 -684 1845 0
-817 -682 1843 0
-817 -680 1841 0
-817 -678 1839 0
-817 -677 1837 0
-815 1851 0
-815 -690 1849 0
-815 -688 1847 0
-815 -686 1845 0
-815 -684 1843 0
-815 -682 1841 0
-815 -680 1839 0
-815 -678 1837 0
-815 -677 1835 0
-813 1849 0
-813 -690 1847 0
-813 -688 1845 0
-813 -686 1843 0
-813 -684 1841 0
-813 -682 1839 0
-813 -680 1837 0
-813 -678 1835 0
-813 -677 1833 0
-812 1847 0
-812 -690 1845 0
-812 -688 1843 0
-812 -686 1841 0
-812 -684 1839 0
-812 -682 1837 0
-812 -680 1835 0
-812 -678 1833 0
-812 -677 1832 0
c ((shift(x_00007_00005, -1) - aux441 + shift(x_00009_00004, -1))<=0)
1127 -1863 0
1128 -1864 0
1130 -1866 0
1132 -1868 0
1134 -1870 0
1136 -1872 0
1138 -1874 0
1140 -1876 0
872 -1863 0
872 1127 -1864 0
872 1128 -1866 0
872 1130 -1868 0
872 1132 -1870 0
872 1134 -1872 0
872 1136 -1874 0
872 1138 -1876 0
872 1140 -1878 0
873 -1864 0
873 1127 -1866 0
873 1128 -1868 0
873 1130 -1870 0
873 1132 -1872 0
873 1134 -1874 0
873 1136 -1876 0
873 1138 -1878 0
873 1140 -1880 0
875 -1866 0
875 1127 -1868 0
875 1128 -1870 0
875 1130 -1872 0
875 1132 -1874 0
875 1134 -1876 0
875 1136 -1878 0
875 1138 -1880 0
875 1140 -1882 0
877 -1868 0
877 1127 -1870 0
877 1128 -1872 0
877 1130 -1874 0
877 1132 -1876 0
877 1134 -1878 0
877 1136 -1880 0
877 1138 -1882 0
877 1140 -1884 0
879 -1870 0
879 1127 -1872 0
879 1128 -1874 0
879 1130 -1876 0
879 1132 -1878 0
879 1134 -1880 0
879 1136 -1882 0
879 1138 -1884 0
879 1140 -1886 0
881 -1872 0
881 1127 -1874 0
881 1128 -1876 0
881 1130 -1878 0
881 1132 -1880 0
881 1134 -1882 0
881 1136 -1884 0
881 1138 -1886 0
881 1140 -1888 0
883 -1874 0
883 1127 -1876 0
883 1128 -1878 0
883 1130 -1880 0
883 1132 -1882 0
883 1134 -1884 0
883 1136 -1886 0
883 1138 -1888 0
883 1140 -1890 0
885 -1876 0
885 1127 -1878 0
885 1128 -1880 0
885 1130 -1882 0
885 1132 -1884 0
885 1134 -1886 0
885 1136 -1888 0
885 1138 -1890 0
885 1140 -1892 0
c (0<=(shift(x_00007_00005, -1) - aux441 + shift(x_00009_00004, -1)))
-1140 1892 0
-1138 1890 0
-1136 1888 0
-1134 1886 0
-1132 1884 0
-1130 1882 0
-1128 1880 0
-1127 1878 0
-885 1892 0
-885 -1140 1890 0
-885 -1138 1888 0
-885 -1136 1886 0
-885 -1134 1884 0
-885 -1132 1882 0
-885 -1130 1880 0
-885 -1128 1878 0
-885 -1127 1876 0
-883 1890 0
-883 -1140 1888 0
-883 -1138 1886 0
-883 -1136 1884 0
-883 -1134 1882 0
-883 -1132 1880 0
-883 -1130 1878 0
-883 -1128 1876 0
-883 -1127 1874 0
-881 1888 0
-881 -1140 1886 0
-881 -1138 1884 0
-881 -1136 1882 0
-881 -1134 1880 0
-881 -1132 1878 0
-881 -1130 1876 0
-881 -1128 1874 0
-881 -1127 1872 0
-879 1886 0
-879 -1140 1884 0
-879 -1138 1882 0
-879 -1136 1880 0
-879 -1134 1878 0
-879 -1132 1876 0
-879 -1130 1874 0
-879 -1128 1872 0
-879 -1127 1870 0
-877 1884 0
-877 -1140 1882 0
-877 -1138 1880 0
-877 -1136 1878 0
-877 -1134 1876 0
-877 -1132 1874 0
-877 -1130 1872 0
-877 -1128 1870 0
-877 -1127 1868 0
-875 1882 0
-875 -1140 1880 0
-875 -1138 1878 0
-875 -1136 1876 0
-875 -1134 1874 0
-875 -1132 1872 0
-875 -1130 1870 0
-875 -1128 1868 0
-875 -1127 1866 0
-873 1880 0
-873 -1140 1878 0
-873 -1138 1876 0
-873 -1136 1874 0
-873 -1134 1872 0
-873 -1132 1870 0
-873 -1130 1868 0
-873 -1128 1866 0
-873 -1127 1864 0
-872 1878 0
-872 -1140 1876 0
-872 -1138 1874 0
-872 -1136 1872 0
-872 -1134 1870 0
-872 -1132 1868 0
-872 -1130 1866 0
-872 -1128 1864 0
-872 -1127 1863 0
c ((shift(x_00007_00008, -1) - aux442 + shift(x_00008_00009, -1))<=0)
1067 -1894 0
1068 -1895 0
1070 -1897 0
1072 -1899 0
1074 -1901 0
1076 -1903 0
1078 -1905 0
1080 -1907 0
917 -1894 0
917 1067 -1895 0
917 1068 -1897 0
917 1070 -1899 0
917 1072 -1901 0
917 1074 -1903 0
917 1076 -1905 0
917 1078 -1907 0
917 1080 -1909 0
918 -1895 0
918 1067 -1897 0
918 1068 -1899 0
918 1070 -1901 0
918 1072 -1903 0
918 1074 -1905 0
918 1076 -1907 0
918 1078 -1909 0
918 1080 -1911 0
920 -1897 0
920 1067 -1899 0
920 1068 -1901 0
920 1070 -1903 0
920 1072 -1905 0
920 1074 -1907 0
920 1076 -1909 0
920 1078 -1911 0
920 1080 -1913 0
922 -1899 0
922 1067 -1901 0
922 1068 -1903 0
922 1070 -1905 0
922 1072 -1907 0
922 1074 -1909 0
922 1076 -1911 0
922 1078 -1913 0
922 1080 -1915 0
924 -1901 0
924 1067 -1903 0
924 1068 -1905 0
924 1070 -1907 0
924 1072 -1909 0
924 1074 -1911 0
924 1076 -1913 0
924 1078 -1915 0
924 1080 -1917 0
926 -1903 0
926 1067 -1905 0
926 1068 -1907 0
926 1070 -1909 0
926 1072 -1911 0
926 1074 -1913 0
926 1076 -1915 0
926 1078 -1917 0
926 1080 -1919 0
928 -1905 0
928 1067 -1907 0
928 1068 -1909 0
928 1070 -1911 0
928 1072 -1913 0
928 1074 -1915 0
928 1076 -1917 0
928 1078 -1919 0
928 1080 -1921 0
930 -1907 0
930 1067 -1909 0
930 1068 -1911 0
930 1070 -1913 0
930 1072 -1915 0
930 1074 -1917 0
930 1076 -1919 0
930 1078 -1921 0
930 1080 -1923 0
c (0<=(shift(x_00007_00008, -1) - aux442 + shift(x_00008_00009, -1)))
-1080 1923 0
-1078 1921 0
-1076 1919 0
-1074 1917 0
-1072 1915 0
-1070 1913 0
-1068 1911 0
-1067 1909 0
-930 1923 0
-930 -1080 1921 0
-930 -1078 1919 0
-930 -1076 1917 0
-930 -1074 1915 0
-930 -1072 1913 0
-930 -1070 1911 0
-930 -1068 1909 0
-930 -1067 1907 0
-928 1921 0
-928 -1080 1919 0
-928 -1078 1917 0
-928 -1076 1915 0
-928 -1074 1913 0
-928 -1072 1911 0
-928 -1070 1909 0
-928 -1068 1907 0
-928 -1067 1905 0
-926 1919 0
-926 -1080 1917 0
-926 -1078 1915 0
-926 -1076 1913 0
-926 -1074 1911 0
-926 -1072 1909 0
-926 -1070 1907 0
-926 -1068 1905 0
-926 -1067 1903 0
-924 1917 0
-924 -1080 1915 0
-924 -1078 1913 0
-924 -1076 1911 0
-924 -1074 1909 0
-924 -1072 1907 0
-924 -1070 1905 0
-924 -1068 1903 0
-924 -1067 1901 0
-922 1915 0
-922 -1080 1913 0
-922 -1078 1911 0
-922 -1076 1909 0
-922 -1074 1907 0
-922 -1072 1905 0
-922 -1070 1903 0
-922 -1068 1901 0
-922 -1067 1899 0
-920 1913 0
-920 -1080 1911 0
-920 -1078 1909 0
-920 -1076 1907 0
-920 -1074 1905 0
-920 -1072 1903 0
-920 -1070 1901 0
-920 -1068 1899 0
-920 -1067 1897 0
-918 1911 0
-918 -1080 1909 0
-918 -1078 1907 0
-918 -1076 1905 0
-918 -1074 1903 0
-918 -1072 1901 0
-918 -1070 1899 0
-918 -1068 1897 0
-918 -1067 1895 0
-917 1909 0
-917 -1080 1907 0
-917 -1078 1905 0
-917 -1076 1903 0
-917 -1074 1901 0
-917 -1072 1899 0
-917 -1070 1897 0
-917 -1068 1895 0
-917 -1067 1894 0
c ((SATLiteral(332) - aux1901 + SATLiteral(212))<=0)
-212 -7757 0
-332 -7757 0
-332 -212 -7758 0
c (0<=(SATLiteral(332) - aux1901 + SATLiteral(212)))
212 7758 0
332 7758 0
332 212 7757 0
c ((SATLiteral(334) - aux1902 + SATLiteral(214))<=0)
-214 -7760 0
-334 -7760 0
-334 -214 -7761 0
c (0<=(SATLiteral(334) - aux1902 + SATLiteral(214)))
214 7761 0
334 7761 0
334 214 7760 0
c ((SATLiteral(336) - aux1903 + SATLiteral(216))<=0)
-216 -7763 0
-336 -7763 0
-336 -216 -7764 0
c (0<=(SATLiteral(336) - aux1903 + SATLiteral(216)))
216 7764 0
336 7764 0
336 216 7763 0
c ((SATLiteral(338) - aux1904 + SATLiteral(218))<=0)
-218 -7766 0
-338 -7766 0
-338 -218 -7767 0
c (0<=(SATLiteral(338) - aux1904 + SATLiteral(218)))
218 7767 0
338 7767 0
338 218 7766 0
c ((SATLiteral(340) - aux1905 + SATLiteral(220))<=0)
-220 -7769 0
-340 -7769 0
-340 -220 -7770 0
c (0<=(SATLiteral(340) - aux1905 + SATLiteral(220)))
220 7770 0
340 7770 0
340 220 7769 0
c ((SATLiteral(342) - aux1906 + SATLiteral(222))<=0)
-222 -7772 0
-342 -7772 0
-342 -222 -7773 0
c (0<=(SATLiteral(342) - aux1906 + SATLiteral(222)))
222 7773 0
342 7773 0
342 222 7772 0
c ((SATLiteral(344) - aux1907 + SATLiteral(224))<=0)
-224 -7775 0
-344 -7775 0
-344 -224 -7776 0
c (0<=(SATLiteral(344) - aux1907 + SATLiteral(224)))
224 7776 0
344 7776 0
344 224 7775 0
c ((SATLiteral(346) - aux1908 + SATLiteral(226))<=0)
-226 -7778 0
-346 -7778 0
-346 -226 -7779 0
c (0<=(SATLiteral(346) - aux1908 + SATLiteral(226)))
226 7779 0
346 7779 0
346 226 7778 0
c ((SATLiteral(-345) - aux1909 + SATLiteral(-225))<=0)
225 -7781 0
345 -7781 0
345 225 -7782 0
c (0<=(SATLiteral(-345) - aux1909 + SATLiteral(-225)))
-225 7782 0
-345 7782 0
-345 -225 7781 0
c ((SATLiteral(392) - aux1910 + SATLiteral(257))<=0)
-257 -7784 0
-392 -7784 0
-392 -257 -7785 0
c (0<=(SATLiteral(392) - aux1910 + SATLiteral(257)))
257 7785 0
392 7785 0
392 257 7784 0
c ((SATLiteral(394) - aux1911 + SATLiteral(259))<=0)
-259 -7787 0
-394 -7787 0
-394 -259 -7788 0
c (0<=(SATLiteral(394) - aux1911 + SATLiteral(259)))
259 7788 0
394 7788 0
394 259 7787 0
c ((SATLiteral(396) - aux1912 + SATLiteral(261))<=0)
-261 -7790 0
-396 -7790 0
-396 -261 -7791 0
c (0<=(SATLiteral(396) - aux1912 + SATLiteral(261)))
261 7791 0
396 7791 0
396 261 7790 0
c ((SATLiteral(398) - aux1913 + SATLiteral(263))<=0)
-263 -7793 0
-398 -7793 0
-398 -263 -7794 0
c (0<=(SATLiteral(398) - aux1913 + SATLiteral(263)))
263 7794 0
398 7794 0
398 263 7793 0
c ((SATLiteral(400) - aux1914 + SATLiteral(265))<=0)
-265 -7796 0
-400 -7796 0
-400 -265 -7797 0
c (0<=(SATLiteral(400) - aux1914 + SATLiteral(265)))
265 7797 0
400 7797 0
400 265 7796 0
c ((SATLiteral(402) - aux1915 + SATLiteral(267))<=0)
-267 -7799 0
-402 -7799 0
-402 -267 -7800 0
c (0<=(SATLiteral(402) - aux1915 + SATLiteral(267)))
267 7800 0
402 7800 0
402 267 7799 0
c ((SATLiteral(404) - aux1916 + SATLiteral(269))<=0)
-269 -7802 0
-404 -7802 0
-404 -269 -7803 0
c (0<=(SATLiteral(404) - aux1916 + SATLiteral(269)))
269 7803 0
404 7803 0
404 269 7802 0
c ((SATLiteral(406) - aux1917 + SATLiteral(271))<=0)
-271 -7805 0
-406 -7805 0
-406 -271 -7806 0
c (0<=(SATLiteral(406) - aux1917 + SATLiteral(271)))
271 7806 0
406 7806 0
406 271 7805 0
c ((SATLiteral(-405) - aux1918 + SATLiteral(-270))<=0)
270 -7808 0
405 -7808 0
405 270 -7809 0
c (0<=(SATLiteral(-405) - aux1918 + SATLiteral(-270)))
-270 7809 0
-405 7809 0
-405 -270 7808 0
c ((SATLiteral(272) - aux1919 + SATLiteral(152))<=0)
-152 -7811 0
-272 -7811 0
-272 -152 -7812 0
c (0<=(SATLiteral(272) - aux1919 + SATLiteral(152)))
152 7812 0
272 7812 0
272 152 7811 0
c ((SATLiteral(274) - aux1920 + SATLiteral(154))<=0)
-154 -7814 0
-274 -7814 0
-274 -154 -7815 0
c (0<=(SATLiteral(274) - aux1920 + SATLiteral(154)))
154 7815 0
274 7815 0
274 154 7814 0
c ((SATLiteral(276) - aux1921 + SATLiteral(156))<=0)
-156 -7817 0
-276 -7817 0
-276 -156 -7818 0
c (0<=(SATLiteral(276) - aux1921 + SATLiteral(156)))
156 7818 0
276 7818 0
276 156 7817 0
c ((SATLiteral(278) - aux1922 + SATLiteral(158))<=0)
-158 -7820 0
-278 -7820 0
-278 -158 -7821 0
c (0<=(SATLiteral(278) - aux1922 + SATLiteral(158)))
158 7821 0
278 7821 0
278 158 7820 0
c ((SATLiteral(280) - aux1923 + SATLiteral(160))<=0)
-160 -7823 0
-280 -7823 0
-280 -160 -7824 0
c (0<=(SATLiteral(280) - aux1923 + SATLiteral(160)))
160 7824 0
280 7824 0
280 160 7823 0
c ((SATLiteral(282) - aux1924 + SATLiteral(162))<=0)
-162 -7826 0
-282 -7826 0
-282 -162 -7827 0
c (0<=(SATLiteral(282) - aux1924 + SATLiteral(162)))
162 7827 0
282 7827 0
282 162 7826 0
c ((SATLiteral(284) - aux1925 + SATLiteral(164))<=0)
-164 -7829 0
-284 -7829 0
-284 -164 -7830 0
c (0<=(SATLiteral(284) - aux1925 + SATLiteral(164)))
164 7830 0
284 7830 0
284 164 7829 0
c ((SATLiteral(286) - aux1926 + SATLiteral(166))<=0)
-166 -7832 0
-286 -7832 0
-286 -166 -7833 0
c (0<=(SATLiteral(286) - aux1926 + SATLiteral(166)))
166 7833 0
286 7833 0
286 166 7832 0
c ((SATLiteral(-285) - aux1927 + SATLiteral(-165))<=0)
165 -7835 0
285 -7835 0
285 165 -7836 0
c (0<=(SATLiteral(-285) - aux1927 + SATLiteral(-165)))
-165 7836 0
-285 7836 0
-285 -165 7835 0
c ((SATLiteral(947) - aux1928 + SATLiteral(812))<=0)
-812 -7838 0
-947 -7838 0
-947 -812 -7839 0
c (0<=(SATLiteral(947) - aux1928 + SATLiteral(812)))
812 7839 0
947 7839 0
947 812 7838 0
c ((SATLiteral(949) - aux1929 + SATLiteral(814))<=0)
-814 -7841 0
-949 -7841 0
-949 -814 -7842 0
c (0<=(SATLiteral(949) - aux1929 + SATLiteral(814)))
814 7842 0
949 7842 0
949 814 7841 0
c ((SATLiteral(951) - aux1930 + SATLiteral(816))<=0)
-816 -7844 0
-951 -7844 0
-951 -816 -7845 0
c (0<=(SATLiteral(951) - aux1930 + SATLiteral(816)))
816 7845 0
951 7845 0
951 816 7844 0
c ((SATLiteral(953) - aux1931 + SATLiteral(818))<=0)
-818 -7847 0
-953 -7847 0
-953 -818 -7848 0
c (0<=(SATLiteral(953) - aux1931 + SATLiteral(818)))
818 7848 0
953 7848 0
953 818 7847 0
c ((SATLiteral(955) - aux1932 + SATLiteral(820))<=0)
-820 -7850 0
-955 -7850 0
-955 -820 -7851 0
c (0<=(SATLiteral(955) - aux1932 + SATLiteral(820)))
820 7851 0
955 7851 0
955 820 7850 0
c ((SATLiteral(957) - aux1933 + SATLiteral(822))<=0)
-822 -7853 0
-957 -7853 0
-957 -822 -7854 0
c (0<=(SATLiteral(957) - aux1933 + SATLiteral(822)))
822 7854 0
957 7854 0
957 822 7853 0
c ((SATLiteral(959) - aux1934 + SATLiteral(824))<=0)
-824 -7856 0
-959 -7856 0
-959 -824 -7857 0
c (0<=(SATLiteral(959) - aux1934 + SATLiteral(824)))
824 7857 0
959 7857 0
959 824 7856 0
c ((SATLiteral(961) - aux1935 + SATLiteral(826))<=0)
-826 -7859 0
-961 -7859 0
-961 -826 -7860 0
c (0<=(SATLiteral(961) - aux1935 + SATLiteral(826)))
826 7860 0
961 7860 0
961 826 7859 0
c ((SATLiteral(-960) - aux1936 + SATLiteral(-825))<=0)
825 -7862 0
960 -7862 0
960 825 -7863 0
c (0<=(SATLiteral(-960) - aux1936 + SATLiteral(-825)))
-825 7863 0
-960 7863 0
-960 -825 7862 0
c ((SATLiteral(992) - aux1937 + SATLiteral(872))<=0)
-872 -7865 0
-992 -7865 0
-992 -872 -7866 0
c (0<=(SATLiteral(992) - aux1937 + SATLiteral(872)))
872 7866 0
992 7866 0
992 872 7865 0
c ((SATLiteral(994) - aux1938 + SATLiteral(874))<=0)
-874 -7868 0
-994 -7868 0
-994 -874 -7869 0
c (0<=(SATLiteral(994) - aux1938 + SATLiteral(874)))
874 7869 0
994 7869 0
994 874 7868 0
c ((SATLiteral(996) - aux1939 + SATLiteral(876))<=0)
-876 -7871 0
-996 -7871 0
-996 -876 -7872 0
c (0<=(SATLiteral(996) - aux1939 + SATLiteral(876)))
876 7872 0
996 7872 0
996 876 7871 0
c ((SATLiteral(998) - aux1940 + SATLiteral(878))<=0)
-878 -7874 0
-998 -7874 0
-998 -878 -7875 0
c (0<=(SATLiteral(998) - aux1940 + SATLiteral(878)))
878 7875 0
998 7875 0
998 878 7874 0
c ((SATLiteral(1000) - aux1941 + SATLiteral(880))<=0)
-880 -7877 0
-1000 -7877 0
-1000 -880 -7878 0
c (0<=(SATLiteral(1000) - aux1941 + SATLiteral(880)))
880 7878 0
1000 7878 0
1000 880 7877 0
c ((SATLiteral(1002) - aux1942 + SATLiteral(882))<=0)
-882 -7880 0
-1002 -7880 0
-1002 -882 -7881 0
c (0<=(SATLiteral(1002) - aux1942 + SATLiteral(882)))
882 7881 0
1002 7881 0
1002 882 7880 0
c ((SATLiteral(1004) - aux1943 + SATLiteral(884))<=0)
-884 -7883 0
-1004 -7883 0
-1004 -884 -7884 0
c (0<=(SATLiteral(1004) - aux1943 + SATLiteral(884)))
884 7884 0
1004 7884 0
1004 884 7883 0
c ((SATLiteral(1006) - aux1944 + SATLiteral(886))<=0)
-886 -7886 0
-1006 -7886 0
-1006 -886 -7887 0
c (0<=(SATLiteral(1006) - aux1944 + SATLiteral(886)))
886 7887 0
1006 7887 0
1006 886 7886 0
c ((SATLiteral(-1005) - aux1945 + SATLiteral(-885))<=0)
885 -7889 0
1005 -7889 0
1005 885 -7890 0
c (0<=(SATLiteral(-1005) - aux1945 + SATLiteral(-885)))
-885 7890 0
-1005 7890 0
-1005 -885 7889 0
c ((SATLiteral(1052) - aux1946 + SATLiteral(932))<=0)
-932 -7892 0
-1052 -7892 0
-1052 -932 -7893 0
c (0<=(SATLiteral(1052) - aux1946 + SATLiteral(932)))
932 7893 0
1052 7893 0
1052 932 7892 0
c ((SATLiteral(1054) - aux1947 + SATLiteral(934))<=0)
-934 -7895 0
-1054 -7895 0
-1054 -934 -7896 0
c (0<=(SATLiteral(1054) - aux1947 + SATLiteral(934)))
934 7896 0
1054 7896 0
1054 934 7895 0
c ((SATLiteral(1056) - aux1948 + SATLiteral(936))<=0)
-936 -7898 0
-1056 -7898 0
-1056 -936 -7899 0
c (0<=(SATLiteral(1056) - aux1948 + SATLiteral(936)))
936 7899 0
1056 7899 0
1056 936 7898 0
c ((SATLiteral(1058) - aux1949 + SATLiteral(938))<=0)
-938 -7901 0
-1058 -7901 0
-1058 -938 -7902 0
c (0<=(SATLiteral(1058) - aux1949 + SATLiteral(938)))
938 7902 0
1058 7902 0
1058 938 7901 0
c ((SATLiteral(1060) - aux1950 + SATLiteral(940))<=0)
-940 -7904 0
-1060 -7904 0
-1060 -940 -7905 0
c (0<=(SATLiteral(1060) - aux1950 + SATLiteral(940)))
940 7905 0
1060 7905 0
1060 940 7904 0
c ((SATLiteral(1062) - aux1951 + SATLiteral(942))<=0)
-942 -7907 0
-1062 -7907 0
-1062 -942 -7908 0
c (0<=(SATLiteral(1062) - aux1951 + SATLiteral(942)))
942 7908 0
1062 7908 0
1062 942 7907 0
c ((SATLiteral(1064) - aux1952 + SATLiteral(944))<=0)
-944 -7910 0
-1064 -7910 0
-1064 -944 -7911 0
c (0<=(SATLiteral(1064) - aux1952 + SATLiteral(944)))
944 7911 0
1064 7911 0
1064 944 7910 0
c ((SATLiteral(1066) - aux1953 + SATLiteral(946))<=0)
-946 -7913 0
-1066 -7913 0
-1066 -946 -7914 0
c (0<=(SATLiteral(1066) - aux1953 + SATLiteral(946)))
946 7914 0
1066 7914 0
1066 946 7913 0
c ((SATLiteral(-1065) - aux1954 + SATLiteral(-945))<=0)
945 -7916 0
1065 -7916 0
1065 945 -7917 0
c (0<=(SATLiteral(-1065) - aux1954 + SATLiteral(-945)))
-945 7917 0
-1065 7917 0
-1065 -945 7916 0
c ((SATLiteral(272) - aux443 + SATLiteral(542))<=0)
-542 -1925 0
-272 -1925 0
-272 -542 -1926 0
c (0<=(SATLiteral(272) - aux443 + SATLiteral(542)))
542 1926 0
272 1926 0
272 542 1925 0
c ((SATLiteral(947) - aux444 + SATLiteral(812))<=0)
-812 -1928 0
-947 -1928 0
-947 -812 -1929 0
c (0<=(SATLiteral(947) - aux444 + SATLiteral(812)))
812 1929 0
947 1929 0
947 812 1928 0
c (( - aux445 + SATLiteral(677) + SATLiteral(137))<=0)
-137 -1931 0
-677 -1931 0
-677 -137 -1932 0
c (0<=( - aux445 + SATLiteral(677) + SATLiteral(137)))
137 1932 0
677 1932 0
677 137 1931 0
c (( - aux446 + SATLiteral(407) + SATLiteral(1082))<=0)
-1082 -1934 0
-407 -1934 0
-407 -1082 -1935 0
c (0<=( - aux446 + SATLiteral(407) + SATLiteral(1082)))
1082 1935 0
407 1935 0
407 1082 1934 0
c ((aux446 - aux447 + SATLiteral(2))<=0)
1934 -1937 0
1935 -1938 0
-2 -1937 0
-2 1934 -1938 0
-2 1935 -1940 0
c (0<=(aux446 - aux447 + SATLiteral(2)))
-1935 1940 0
-1934 1938 0
2 1940 0
2 -1935 1938 0
2 -1934 1937 0
c ((aux443 + aux445 - aux448)<=0)
1931 -1942 0
1932 -1943 0
1925 -1942 0
1925 1931 -1943 0
1925 1932 -1945 0
1926 -1943 0
1926 1931 -1945 0
1926 1932 -1947 0
c (0<=(aux443 + aux445 - aux448))
-1932 1947 0
-1931 1945 0
-1926 1947 0
-1926 -1932 1945 0
-1926 -1931 1943 0
-1925 1945 0
-1925 -1932 1943 0
-1925 -1931 1942 0
c ((SATLiteral(274) - aux449 + SATLiteral(544))<=0)
-544 -1949 0
-274 -1949 0
-274 -544 -1950 0
c (0<=(SATLiteral(274) - aux449 + SATLiteral(544)))
544 1950 0
274 1950 0
274 544 1949 0
c ((SATLiteral(949) - aux450 + SATLiteral(814))<=0)
-814 -1952 0
-949 -1952 0
-949 -814 -1953 0
c (0<=(SATLiteral(949) - aux450 + SATLiteral(814)))
814 1953 0
949 1953 0
949 814 1952 0
c (( - aux451 + SATLiteral(679) + SATLiteral(139))<=0)
-139 -1955 0
-679 -1955 0
-679 -139 -1956 0
c (0<=( - aux451 + SATLiteral(679) + SATLiteral(139)))
139 1956 0
679 1956 0
679 139 1955 0
c (( - aux452 + SATLiteral(409) + SATLiteral(1084))<=0)
-1084 -1958 0
-409 -1958 0
-409 -1084 -1959 0
c (0<=( - aux452 + SATLiteral(409) + SATLiteral(1084)))
1084 1959 0
409 1959 0
409 1084 1958 0
c ((aux452 - aux453 + SATLiteral(4))<=0)
1958 -1961 0
1959 -1962 0
-4 -1961 0
-4 1958 -1962 0
-4 1959 -1964 0
c (0<=(aux452 - aux453 + SATLiteral(4)))
-1959 1964 0
-1958 1962 0
4 1964 0
4 -1959 1962 0
4 -1958 1961 0
c ((aux449 + aux451 - aux454)<=0)
1955 -1966 0
1956 -1967 0
1949 -1966 0
1949 1955 -1967 0
1949 1956 -1969 0
1950 -1967 0
1950 1955 -1969 0
1950 1956 -1971 0
c (0<=(aux449 + aux451 - aux454))
-1956 1971 0
-1955 1969 0
-1950 1971 0
-1950 -1956 1969 0
-1950 -1955 1967 0
-1949 1969 0
-1949 -1956 1967 0
-1949 -1955 1966 0
c ((SATLiteral(276) - aux455 + SATLiteral(546))<=0)
-546 -1973 0
-276 -1973 0
-276 -546 -1974 0
c (0<=(SATLiteral(276) - aux455 + SATLiteral(546)))
546 1974 0
276 1974 0
276 546 1973 0
c ((SATLiteral(951) - aux456 + SATLiteral(816))<=0)
-816 -1976 0
-951 -1976 0
-951 -816 -1977 0
c (0<=(SATLiteral(951) - aux456 + SATLiteral(816)))
816 1977 0
951 1977 0
951 816 1976 0
c (( - aux457 + SATLiteral(681) + SATLiteral(141))<=0)
-141 -1979 0
-681 -1979 0
-681 -141 -1980 0
c (0<=( - aux457 + SATLiteral(681) + SATLiteral(141)))
141 1980 0
681 1980 0
681 141 1979 0
c (( - aux458 + SATLiteral(411) + SATLiteral(1086))<=0)
-1086 -1982 0
-411 -1982 0
-411 -1086 -1983 0
c (0<=( - aux458 + SATLiteral(411) + SATLiteral(1086)))
1086 1983 0
411 1983 0
411 1086 1982 0
c ((aux458 - aux459 + SATLiteral(6))<=0)
1982 -1985 0
1983 -1986 0
-6 -1985 0
-6 1982 -1986 0
-6 1983 -1988 0
c (0<=(aux458 - aux459 + SATLiteral(6)))
-1983 1988 0
-1982 1986 0
6 1988 0
6 -1983 1986 0
6 -1982 1985 0
c ((aux455 + aux457 - aux460)<=0)
1979 -1990 0
1980 -1991 0
1973 -1990 0
1973 1979 -1991 0
1973 1980 -1993 0
1974 -1991 0
1974 1979 -1993 0
1974 1980 -1995 0
c (0<=(aux455 + aux457 - aux460))
-1980 1995 0
-1979 1993 0
-1974 1995 0
-1974 -1980 1993 0
-1974 -1979 1991 0
-1973 1993 0
-1973 -1980 1991 0
-1973 -1979 1990 0
c ((SATLiteral(278) - aux461 + SATLiteral(548))<=0)
-548 -1997 0
-278 -1997 0
-278 -548 -1998 0
c (0<=(SATLiteral(278) - aux461 + SATLiteral(548)))
548 1998 0
278 1998 0
278 548 1997 0
c ((SATLiteral(953) - aux462 + SATLiteral(818))<=0)
-818 -2000 0
-953 -2000 0
-953 -818 -2001 0
c (0<=(SATLiteral(953) - aux462 + SATLiteral(818)))
818 2001 0
953 2001 0
953 818 2000 0
c (( - aux463 + SATLiteral(683) + SATLiteral(143))<=0)
-143 -2003 0
-683 -2003 0
-683 -143 -2004 0
c (0<=( - aux463 + SATLiteral(683) + SATLiteral(143)))
143 2004 0
683 2004 0
683 143 2003 0
c (( - aux464 + SATLiteral(413) + SATLiteral(1088))<=0)
-1088 -2006 0
-413 -2006 0
-413 -1088 -2007 0
c (0<=( - aux464 + SATLiteral(413) + SATLiteral(1088)))
1088 2007 0
413 2007 0
413 1088 2006 0
c ((aux464 - aux465 + SATLiteral(8))<=0)
2006 -2009 0
2007 -2010 0
-8 -2009 0
-8 2006 -2010 0
-8 2007 -2012 0
c (0<=(aux464 - aux465 + SATLiteral(8)))
-2007 2012 0
-2006 2010 0
8 2012 0
8 -2007 2010 0
8 -2006 2009 0
c ((aux461 + aux463 - aux466)<=0)
2003 -2014 0
2004 -2015 0
1997 -2014 0
1997 2003 -2015 0
1997 2004 -2017 0
1998 -2015 0
1998 2003 -2017 0
1998 2004 -2019 0
c (0<=(aux461 + aux463 - aux466))
-2004 2019 0
-2003 2017 0
-1998 2019 0
-1998 -2004 2017 0
-1998 -2003 2015 0
-1997 2017 0
-1997 -2004 2015 0
-1997 -2003 2014 0
c ((SATLiteral(280) - aux467 + SATLiteral(550))<=0)
-550 -2021 0
-280 -2021 0
-280 -550 -2022 0
c (0<=(SATLiteral(280) - aux467 + SATLiteral(550)))
550 2022 0
280 2022 0
280 550 2021 0
c ((SATLiteral(955) - aux468 + SATLiteral(820))<=0)
-820 -2024 0
-955 -2024 0
-955 -820 -2025 0
c (0<=(SATLiteral(955) - aux468 + SATLiteral(820)))
820 2025 0
955 2025 0
955 820 2024 0
c (( - aux469 + SATLiteral(685) + SATLiteral(145))<=0)
-145 -2027 0
-685 -2027 0
-685 -145 -2028 0
c (0<=( - aux469 + SATLiteral(685) + SATLiteral(145)))
145 2028 0
685 2028 0
685 145 2027 0
c (( - aux470 + SATLiteral(415) + SATLiteral(1090))<=0)
-1090 -2030 0
-415 -2030 0
-415 -1090 -2031 0
c (0<=( - aux470 + SATLiteral(415) + SATLiteral(1090)))
1090 2031 0
415 2031 0
415 1090 2030 0
c ((aux470 - aux471 + SATLiteral(10))<=0)
2030 -2033 0
2031 -2034 0
-10 -2033 0
-10 2030 -2034 0
-10 2031 -2036 0
c (0<=(aux470 - aux471 + SATLiteral(10)))
-2031 2036 0
-2030 2034 0
10 2036 0
10 -2031 2034 0
10 -2030 2033 0
c ((aux467 + aux469 - aux472)<=0)
2027 -2038 0
2028 -2039 0
2021 -2038 0
2021 2027 -2039 0
2021 2028 -2041 0
2022 -2039 0
2022 2027 -2041 0
2022 2028 -2043 0
c (0<=(aux467 + aux469 - aux472))
-2028 2043 0
-2027 2041 0
-2022 2043 0
-2022 -2028 2041 0
-2022 -2027 2039 0
-2021 2041 0
-2021 -2028 2039 0
-2021 -2027 2038 0
c ((SATLiteral(282) - aux473 + SATLiteral(552))<=0)
-552 -2045 0
-282 -2045 0
-282 -552 -2046 0
c (0<=(SATLiteral(282) - aux473 + SATLiteral(552)))
552 2046 0
282 2046 0
282 552 2045 0
c ((SATLiteral(957) - aux474 + SATLiteral(822))<=0)
-822 -2048 0
-957 -2048 0
-957 -822 -2049 0
c (0<=(SATLiteral(957) - aux474 + SATLiteral(822)))
822 2049 0
957 2049 0
957 822 2048 0
c (( - aux475 + SATLiteral(687) + SATLiteral(147))<=0)
-147 -2051 0
-687 -2051 0
-687 -147 -2052 0
c (0<=( - aux475 + SATLiteral(687) + SATLiteral(147)))
147 2052 0
687 2052 0
687 147 2051 0
c (( - aux476 + SATLiteral(417) + SATLiteral(1092))<=0)
-1092 -2054 0
-417 -2054 0
-417 -1092 -2055 0
c (0<=( - aux476 + SATLiteral(417) + SATLiteral(1092)))
1092 2055 0
417 2055 0
417 1092 2054 0
c ((aux476 - aux477 + SATLiteral(12))<=0)
2054 -2057 0
2055 -2058 0
-12 -2057 0
-12 2054 -2058 0
-12 2055 -2060 0
c (0<=(aux476 - aux477 + SATLiteral(12)))
-2055 2060 0
-2054 2058 0
12 2060 0
12 -2055 2058 0
12 -2054 2057 0
c ((aux473 + aux475 - aux478)<=0)
2051 -2062 0
2052 -2063 0
2045 -2062 0
2045 2051 -2063 0
2045 2052 -2065 0
2046 -2063 0
2046 2051 -2065 0
2046 2052 -2067 0
c (0<=(aux473 + aux475 - aux478))
-2052 2067 0
-2051 2065 0
-2046 2067 0
-2046 -2052 2065 0
-2046 -2051 2063 0
-2045 2065 0
-2045 -2052 2063 0
-2045 -2051 2062 0
c ((SATLiteral(284) - aux479 + SATLiteral(554))<=0)
-554 -2069 0
-284 -2069 0
-284 -554 -2070 0
c (0<=(SATLiteral(284) - aux479 + SATLiteral(554)))
554 2070 0
284 2070 0
284 554 2069 0
c ((SATLiteral(959) - aux480 + SATLiteral(824))<=0)
-824 -2072 0
-959 -2072 0
-959 -824 -2073 0
c (0<=(SATLiteral(959) - aux480 + SATLiteral(824)))
824 2073 0
959 2073 0
959 824 2072 0
c (( - aux481 + SATLiteral(689) + SATLiteral(149))<=0)
-149 -2075 0
-689 -2075 0
-689 -149 -2076 0
c (0<=( - aux481 + SATLiteral(689) + SATLiteral(149)))
149 2076 0
689 2076 0
689 149 2075 0
c (( - aux482 + SATLiteral(419) + SATLiteral(1094))<=0)
-1094 -2078 0
-419 -2078 0
-419 -1094 -2079 0
c (0<=( - aux482 + SATLiteral(419) + SATLiteral(1094)))
1094 2079 0
419 2079 0
419 1094 2078 0
c ((aux482 - aux483 + SATLiteral(14))<=0)
2078 -2081 0
2079 -2082 0
-14 -2081 0
-14 2078 -2082 0
-14 2079 -2084 0
c (0<=(aux482 - aux483 + SATLiteral(14)))
-2079 2084 0
-2078 2082 0
14 2084 0
14 -2079 2082 0
14 -2078 2081 0
c ((aux479 + aux481 - aux484)<=0)
2075 -2086 0
2076 -2087 0
2069 -2086 0
2069 2075 -2087 0
2069 2076 -2089 0
2070 -2087 0
2070 2075 -2089 0
2070 2076 -2091 0
c (0<=(aux479 + aux481 - aux484))
-2076 2091 0
-2075 2089 0
-2070 2091 0
-2070 -2076 2089 0
-2070 -2075 2087 0
-2069 2089 0
-2069 -2076 2087 0
-2069 -2075 2086 0
c ((SATLiteral(286) - aux485 + SATLiteral(556))<=0)
-556 -2093 0
-286 -2093 0
-286 -556 -2094 0
c (0<=(SATLiteral(286) - aux485 + SATLiteral(556)))
556 2094 0
286 2094 0
286 556 2093 0
c ((SATLiteral(961) - aux486 + SATLiteral(826))<=0)
-826 -2096 0
-961 -2096 0
-961 -826 -2097 0
c (0<=(SATLiteral(961) - aux486 + SATLiteral(826)))
826 2097 0
961 2097 0
961 826 2096 0
c (( - aux487 + SATLiteral(691) + SATLiteral(151))<=0)
-151 -2099 0
-691 -2099 0
-691 -151 -2100 0
c (0<=( - aux487 + SATLiteral(691) + SATLiteral(151)))
151 2100 0
691 2100 0
691 151 2099 0
c (( - aux488 + SATLiteral(421) + SATLiteral(1096))<=0)
-1096 -2102 0
-421 -2102 0
-421 -1096 -2103 0
c (0<=( - aux488 + SATLiteral(421) + SATLiteral(1096)))
1096 2103 0
421 2103 0
421 1096 2102 0
c ((aux488 - aux489 + SATLiteral(16))<=0)
2102 -2105 0
2103 -2106 0
-16 -2105 0
-16 2102 -2106 0
-16 2103 -2108 0
c (0<=(aux488 - aux489 + SATLiteral(16)))
-2103 2108 0
-2102 2106 0
16 2108 0
16 -2103 2106 0
16 -2102 2105 0
c ((aux485 + aux487 - aux490)<=0)
2099 -2110 0
2100 -2111 0
2093 -2110 0
2093 2099 -2111 0
2093 2100 -2113 0
2094 -2111 0
2094 2099 -2113 0
2094 2100 -2115 0
c (0<=(aux485 + aux487 - aux490))
-2100 2115 0
-2099 2113 0
-2094 2115 0
-2094 -2100 2113 0
-2094 -2099 2111 0
-2093 2113 0
-2093 -2100 2111 0
-2093 -2099 2110 0
c ((SATLiteral(-285) - aux491 + SATLiteral(-555))<=0)
555 -2117 0
285 -2117 0
285 555 -2118 0
c (0<=(SATLiteral(-285) - aux491 + SATLiteral(-555)))
-555 2118 0
-285 2118 0
-285 -555 2117 0
c ((SATLiteral(-960) - aux492 + SATLiteral(-825))<=0)
825 -2120 0
960 -2120 0
960 825 -2121 0
c (0<=(SATLiteral(-960) - aux492 + SATLiteral(-825)))
-825 2121 0
-960 2121 0
-960 -825 2120 0
c (( - aux493 + SATLiteral(-690) + SATLiteral(-150))<=0)
150 -2123 0
690 -2123 0
690 150 -2124 0
c (0<=( - aux493 + SATLiteral(-690) + SATLiteral(-150)))
-150 2124 0
-690 2124 0
-690 -150 2123 0
c (( - aux494 + SATLiteral(-420) + SATLiteral(-1095))<=0)
1095 -2126 0
420 -2126 0
420 1095 -2127 0
c (0<=( - aux494 + SATLiteral(-420) + SATLiteral(-1095)))
-1095 2127 0
-420 2127 0
-420 -1095 2126 0
c ((aux494 - aux495 + SATLiteral(-15))<=0)
2126 -2129 0
2127 -2130 0
15 -2129 0
15 2126 -2130 0
15 2127 -2132 0
c (0<=(aux494 - aux495 + SATLiteral(-15)))
-2127 2132 0
-2126 2130 0
-15 2132 0
-15 -2127 2130 0
-15 -2126 2129 0
c ((aux491 + aux493 - aux496)<=0)
2123 -2134 0
2124 -2135 0
2117 -2134 0
2117 2123 -2135 0
2117 2124 -2137 0
2118 -2135 0
2118 2123 -2137 0
2118 2124 -2139 0
c (0<=(aux491 + aux493 - aux496))
-2124 2139 0
-2123 2137 0
-2118 2139 0
-2118 -2124 2137 0
-2118 -2123 2135 0
-2117 2137 0
-2117 -2124 2135 0
-2117 -2123 2134 0
c ((SATLiteral(287) - aux497 + SATLiteral(557))<=0)
-557 -2141 0
-287 -2141 0
-287 -557 -2142 0
c (0<=(SATLiteral(287) - aux497 + SATLiteral(557)))
557 2142 0
287 2142 0
287 557 2141 0
c ((SATLiteral(962) - aux498 + SATLiteral(827))<=0)
-827 -2144 0
-962 -2144 0
-962 -827 -2145 0
c (0<=(SATLiteral(962) - aux498 + SATLiteral(827)))
827 2145 0
962 2145 0
962 827 2144 0
c (( - aux499 + SATLiteral(692) + SATLiteral(152))<=0)
-152 -2147 0
-692 -2147 0
-692 -152 -2148 0
c (0<=( - aux499 + SATLiteral(692) + SATLiteral(152)))
152 2148 0
692 2148 0
692 152 2147 0
c (( - aux500 + SATLiteral(422) + SATLiteral(1097))<=0)
-1097 -2150 0
-422 -2150 0
-422 -1097 -2151 0
c (0<=( - aux500 + SATLiteral(422) + SATLiteral(1097)))
1097 2151 0
422 2151 0
422 1097 2150 0
c ((aux500 - aux501 + SATLiteral(17))<=0)
2150 -2153 0
2151 -2154 0
-17 -2153 0
-17 2150 -2154 0
-17 2151 -2156 0
c (0<=(aux500 - aux501 + SATLiteral(17)))
-2151 2156 0
-2150 2154 0
17 2156 0
17 -2151 2154 0
17 -2150 2153 0
c ((aux497 + aux499 - aux502)<=0)
2147 -2158 0
2148 -2159 0
2141 -2158 0
2141 2147 -2159 0
2141 2148 -2161 0
2142 -2159 0
2142 2147 -2161 0
2142 2148 -2163 0
c (0<=(aux497 + aux499 - aux502))
-2148 2163 0
-2147 2161 0
-2142 2163 0
-2142 -2148 2161 0
-2142 -2147 2159 0
-2141 2161 0
-2141 -2148 2159 0
-2141 -2147 2158 0
c ((SATLiteral(289) - aux503 + SATLiteral(559))<=0)
-559 -2165 0
-289 -2165 0
-289 -559 -2166 0
c (0<=(SATLiteral(289) - aux503 + SATLiteral(559)))
559 2166 0
289 2166 0
289 559 2165 0
c ((SATLiteral(964) - aux504 + SATLiteral(829))<=0)
-829 -2168 0
-964 -2168 0
-964 -829 -2169 0
c (0<=(SATLiteral(964) - aux504 + SATLiteral(829)))
829 2169 0
964 2169 0
964 829 2168 0
c (( - aux505 + SATLiteral(694) + SATLiteral(154))<=0)
-154 -2171 0
-694 -2171 0
-694 -154 -2172 0
c (0<=( - aux505 + SATLiteral(694) + SATLiteral(154)))
154 2172 0
694 2172 0
694 154 2171 0
c (( - aux506 + SATLiteral(424) + SATLiteral(1099))<=0)
-1099 -2174 0
-424 -2174 0
-424 -1099 -2175 0
c (0<=( - aux506 + SATLiteral(424) + SATLiteral(1099)))
1099 2175 0
424 2175 0
424 1099 2174 0
c ((aux506 - aux507 + SATLiteral(19))<=0)
2174 -2177 0
2175 -2178 0
-19 -2177 0
-19 2174 -2178 0
-19 2175 -2180 0
c (0<=(aux506 - aux507 + SATLiteral(19)))
-2175 2180 0
-2174 2178 0
19 2180 0
19 -2175 2178 0
19 -2174 2177 0
c ((aux503 + aux505 - aux508)<=0)
2171 -2182 0
2172 -2183 0
2165 -2182 0
2165 2171 -2183 0
2165 2172 -2185 0
2166 -2183 0
2166 2171 -2185 0
2166 2172 -2187 0
c (0<=(aux503 + aux505 - aux508))
-2172 2187 0
-2171 2185 0
-2166 2187 0
-2166 -2172 2185 0
-2166 -2171 2183 0
-2165 2185 0
-2165 -2172 2183 0
-2165 -2171 2182 0
c ((SATLiteral(291) - aux509 + SATLiteral(561))<=0)
-561 -2189 0
-291 -2189 0
-291 -561 -2190 0
c (0<=(SATLiteral(291) - aux509 + SATLiteral(561)))
561 2190 0
291 2190 0
291 561 2189 0
c ((SATLiteral(966) - aux510 + SATLiteral(831))<=0)
-831 -2192 0
-966 -2192 0
-966 -831 -2193 0
c (0<=(SATLiteral(966) - aux510 + SATLiteral(831)))
831 2193 0
966 2193 0
966 831 2192 0
c (( - aux511 + SATLiteral(696) + SATLiteral(156))<=0)
-156 -2195 0
-696 -2195 0
-696 -156 -2196 0
c (0<=( - aux511 + SATLiteral(696) + SATLiteral(156)))
156 2196 0
696 2196 0
696 156 2195 0
c (( - aux512 + SATLiteral(426) + SATLiteral(1101))<=0)
-1101 -2198 0
-426 -2198 0
-426 -1101 -2199 0
c (0<=( - aux512 + SATLiteral(426) + SATLiteral(1101)))
1101 2199 0
426 2199 0
426 1101 2198 0
c ((aux512 - aux513 + SATLiteral(21))<=0)
2198 -2201 0
2199 -2202 0
-21 -2201 0
-21 2198 -2202 0
-21 2199 -2204 0
c (0<=(aux512 - aux513 + SATLiteral(21)))
-2199 2204 0
-2198 2202 0
21 2204 0
21 -2199 2202 0
21 -2198 2201 0
c ((aux509 + aux511 - aux514)<=0)
2195 -2206 0
2196 -2207 0
2189 -2206 0
2189 2195 -2207 0
2189 2196 -2209 0
2190 -2207 0
2190 2195 -2209 0
2190 2196 -2211 0
c (0<=(aux509 + aux511 - aux514))
-2196 2211 0
-2195 2209 0
-2190 2211 0
-2190 -2196 2209 0
-2190 -2195 2207 0
-2189 2209 0
-2189 -2196 2207 0
-2189 -2195 2206 0
c ((SATLiteral(293) - aux515 + SATLiteral(563))<=0)
-563 -2213 0
-293 -2213 0
-293 -563 -2214 0
c (0<=(SATLiteral(293) - aux515 + SATLiteral(563)))
563 2214 0
293 2214 0
293 563 2213 0
c ((SATLiteral(968) - aux516 + SATLiteral(833))<=0)
-833 -2216 0
-968 -2216 0
-968 -833 -2217 0
c (0<=(SATLiteral(968) - aux516 + SATLiteral(833)))
833 2217 0
968 2217 0
968 833 2216 0
c (( - aux517 + SATLiteral(698) + SATLiteral(158))<=0)
-158 -2219 0
-698 -2219 0
-698 -158 -2220 0
c (0<=( - aux517 + SATLiteral(698) + SATLiteral(158)))
158 2220 0
698 2220 0
698 158 2219 0
c (( - aux518 + SATLiteral(428) + SATLiteral(1103))<=0)
-1103 -2222 0
-428 -2222 0
-428 -1103 -2223 0
c (0<=( - aux518 + SATLiteral(428) + SATLiteral(1103)))
1103 2223 0
428 2223 0
428 1103 2222 0
c ((aux518 - aux519 + SATLiteral(23))<=0)
2222 -2225 0
2223 -2226 0
-23 -2225 0
-23 2222 -2226 0
-23 2223 -2228 0
c (0<=(aux518 - aux519 + SATLiteral(23)))
-2223 2228 0
-2222 2226 0
23 2228 0
23 -2223 2226 0
23 -2222 2225 0
c ((aux515 + aux517 - aux520)<=0)
2219 -2230 0
2220 -2231 0
2213 -2230 0
2213 2219 -2231 0
2213 2220 -2233 0
2214 -2231 0
2214 2219 -2233 0
2214 2220 -2235 0
c (0<=(aux515 + aux517 - aux520))
-2220 2235 0
-2219 2233 0
-2214 2235 0
-2214 -2220 2233 0
-2214 -2219 2231 0
-2213 2233 0
-2213 -2220 2231 0
-2213 -2219 2230 0
c ((SATLiteral(295) - aux521 + SATLiteral(565))<=0)
-565 -2237 0
-295 -2237 0
-295 -565 -2238 0
c (0<=(SATLiteral(295) - aux521 + SATLiteral(565)))
565 2238 0
295 2238 0
295 565 2237 0
c ((SATLiteral(970) - aux522 + SATLiteral(835))<=0)
-835 -2240 0
-970 -2240 0
-970 -835 -2241 0
c (0<=(SATLiteral(970) - aux522 + SATLiteral(835)))
835 2241 0
970 2241 0
970 835 2240 0
c (( - aux523 + SATLiteral(700) + SATLiteral(160))<=0)
-160 -2243 0
-700 -2243 0
-700 -160 -2244 0
c (0<=( - aux523 + SATLiteral(700) + SATLiteral(160)))
160 2244 0
700 2244 0
700 160 2243 0
c (( - aux524 + SATLiteral(430) + SATLiteral(1105))<=0)
-1105 -2246 0
-430 -2246 0
-430 -1105 -2247 0
c (0<=( - aux524 + SATLiteral(430) + SATLiteral(1105)))
1105 2247 0
430 2247 0
430 1105 2246 0
c ((aux524 - aux525 + SATLiteral(25))<=0)
2246 -2249 0
2247 -2250 0
-25 -2249 0
-25 2246 -2250 0
-25 2247 -2252 0
c (0<=(aux524 - aux525 + SATLiteral(25)))
-2247 2252 0
-2246 2250 0
25 2252 0
25 -2247 2250 0
25 -2246 2249 0
c ((aux521 + aux523 - aux526)<=0)
2243 -2254 0
2244 -2255 0
2237 -2254 0
2237 2243 -2255 0
2237 2244 -2257 0
2238 -2255 0
2238 2243 -2257 0
2238 2244 -2259 0
c (0<=(aux521 + aux523 - aux526))
-2244 2259 0
-2243 2257 0
-2238 2259 0
-2238 -2244 2257 0
-2238 -2243 2255 0
-2237 2257 0
-2237 -2244 2255 0
-2237 -2243 2254 0
c ((SATLiteral(297) - aux527 + SATLiteral(567))<=0)
-567 -2261 0
-297 -2261 0
-297 -567 -2262 0
c (0<=(SATLiteral(297) - aux527 + SATLiteral(567)))
567 2262 0
297 2262 0
297 567 2261 0
c ((SATLiteral(972) - aux528 + SATLiteral(837))<=0)
-837 -2264 0
-972 -2264 0
-972 -837 -2265 0
c (0<=(SATLiteral(972) - aux528 + SATLiteral(837)))
837 2265 0
972 2265 0
972 837 2264 0
c (( - aux529 + SATLiteral(702) + SATLiteral(162))<=0)
-162 -2267 0
-702 -2267 0
-702 -162 -2268 0
c (0<=( - aux529 + SATLiteral(702) + SATLiteral(162)))
162 2268 0
702 2268 0
702 162 2267 0
c (( - aux530 + SATLiteral(432) + SATLiteral(1107))<=0)
-1107 -2270 0
-432 -2270 0
-432 -1107 -2271 0
c (0<=( - aux530 + SATLiteral(432) + SATLiteral(1107)))
1107 2271 0
432 2271 0
432 1107 2270 0
c ((aux530 - aux531 + SATLiteral(27))<=0)
2270 -2273 0
2271 -2274 0
-27 -2273 0
-27 2270 -2274 0
-27 2271 -2276 0
c (0<=(aux530 - aux531 + SATLiteral(27)))
-2271 2276 0
-2270 2274 0
27 2276 0
27 -2271 2274 0
27 -2270 2273 0
c ((aux527 + aux529 - aux532)<=0)
2267 -2278 0
2268 -2279 0
2261 -2278 0
2261 2267 -2279 0
2261 2268 -2281 0
2262 -2279 0
2262 2267 -2281 0
2262 2268 -2283 0
c (0<=(aux527 + aux529 - aux532))
-2268 2283 0
-2267 2281 0
-2262 2283 0
-2262 -2268 2281 0
-2262 -2267 2279 0
-2261 2281 0
-2261 -2268 2279 0
-2261 -2267 2278 0
c ((SATLiteral(299) - aux533 + SATLiteral(569))<=0)
-569 -2285 0
-299 -2285 0
-299 -569 -2286 0
c (0<=(SATLiteral(299) - aux533 + SATLiteral(569)))
569 2286 0
299 2286 0
299 569 2285 0
c ((SATLiteral(974) - aux534 + SATLiteral(839))<=0)
-839 -2288 0
-974 -2288 0
-974 -839 -2289 0
c (0<=(SATLiteral(974) - aux534 + SATLiteral(839)))
839 2289 0
974 2289 0
974 839 2288 0
c (( - aux535 + SATLiteral(704) + SATLiteral(164))<=0)
-164 -2291 0
-704 -2291 0
-704 -164 -2292 0
c (0<=( - aux535 + SATLiteral(704) + SATLiteral(164)))
164 2292 0
704 2292 0
704 164 2291 0
c (( - aux536 + SATLiteral(434) + SATLiteral(1109))<=0)
-1109 -2294 0
-434 -2294 0
-434 -1109 -2295 0
c (0<=( - aux536 + SATLiteral(434) + SATLiteral(1109)))
1109 2295 0
434 2295 0
434 1109 2294 0
c ((aux536 - aux537 + SATLiteral(29))<=0)
2294 -2297 0
2295 -2298 0
-29 -2297 0
-29 2294 -2298 0
-29 2295 -2300 0
c (0<=(aux536 - aux537 + SATLiteral(29)))
-2295 2300 0
-2294 2298 0
29 2300 0
29 -2295 2298 0
29 -2294 2297 0
c ((aux533 + aux535 - aux538)<=0)
2291 -2302 0
2292 -2303 0
2285 -2302 0
2285 2291 -2303 0
2285 2292 -2305 0
2286 -2303 0
2286 2291 -2305 0
2286 2292 -2307 0
c (0<=(aux533 + aux535 - aux538))
-2292 2307 0
-2291 2305 0
-2286 2307 0
-2286 -2292 2305 0
-2286 -2291 2303 0
-2285 2305 0
-2285 -2292 2303 0
-2285 -2291 2302 0
c ((SATLiteral(301) - aux539 + SATLiteral(571))<=0)
-571 -2309 0
-301 -2309 0
-301 -571 -2310 0
c (0<=(SATLiteral(301) - aux539 + SATLiteral(571)))
571 2310 0
301 2310 0
301 571 2309 0
c ((SATLiteral(976) - aux540 + SATLiteral(841))<=0)
-841 -2312 0
-976 -2312 0
-976 -841 -2313 0
c (0<=(SATLiteral(976) - aux540 + SATLiteral(841)))
841 2313 0
976 2313 0
976 841 2312 0
c (( - aux541 + SATLiteral(706) + SATLiteral(166))<=0)
-166 -2315 0
-706 -2315 0
-706 -166 -2316 0
c (0<=( - aux541 + SATLiteral(706) + SATLiteral(166)))
166 2316 0
706 2316 0
706 166 2315 0
c (( - aux542 + SATLiteral(436) + SATLiteral(1111))<=0)
-1111 -2318 0
-436 -2318 0
-436 -1111 -2319 0
c (0<=( - aux542 + SATLiteral(436) + SATLiteral(1111)))
1111 2319 0
436 2319 0
436 1111 2318 0
c ((aux542 - aux543 + SATLiteral(31))<=0)
2318 -2321 0
2319 -2322 0
-31 -2321 0
-31 2318 -2322 0
-31 2319 -2324 0
c (0<=(aux542 - aux543 + SATLiteral(31)))
-2319 2324 0
-2318 2322 0
31 2324 0
31 -2319 2322 0
31 -2318 2321 0
c ((aux539 + aux541 - aux544)<=0)
2315 -2326 0
2316 -2327 0
2309 -2326 0
2309 2315 -2327 0
2309 2316 -2329 0
2310 -2327 0
2310 2315 -2329 0
2310 2316 -2331 0
c (0<=(aux539 + aux541 - aux544))
-2316 2331 0
-2315 2329 0
-2310 2331 0
-2310 -2316 2329 0
-2310 -2315 2327 0
-2309 2329 0
-2309 -2316 2327 0
-2309 -2315 2326 0
c ((SATLiteral(-300) - aux545 + SATLiteral(-570))<=0)
570 -2333 0
300 -2333 0
300 570 -2334 0
c (0<=(SATLiteral(-300) - aux545 + SATLiteral(-570)))
-570 2334 0
-300 2334 0
-300 -570 2333 0
c ((SATLiteral(-975) - aux546 + SATLiteral(-840))<=0)
840 -2336 0
975 -2336 0
975 840 -2337 0
c (0<=(SATLiteral(-975) - aux546 + SATLiteral(-840)))
-840 2337 0
-975 2337 0
-975 -840 2336 0
c (( - aux547 + SATLiteral(-705) + SATLiteral(-165))<=0)
165 -2339 0
705 -2339 0
705 165 -2340 0
c (0<=( - aux547 + SATLiteral(-705) + SATLiteral(-165)))
-165 2340 0
-705 2340 0
-705 -165 2339 0
c (( - aux548 + SATLiteral(-435) + SATLiteral(-1110))<=0)
1110 -2342 0
435 -2342 0
435 1110 -2343 0
c (0<=( - aux548 + SATLiteral(-435) + SATLiteral(-1110)))
-1110 2343 0
-435 2343 0
-435 -1110 2342 0
c ((aux548 - aux549 + SATLiteral(-30))<=0)
2342 -2345 0
2343 -2346 0
30 -2345 0
30 2342 -2346 0
30 2343 -2348 0
c (0<=(aux548 - aux549 + SATLiteral(-30)))
-2343 2348 0
-2342 2346 0
-30 2348 0
-30 -2343 2346 0
-30 -2342 2345 0
c ((aux545 + aux547 - aux550)<=0)
2339 -2350 0
2340 -2351 0
2333 -2350 0
2333 2339 -2351 0
2333 2340 -2353 0
2334 -2351 0
2334 2339 -2353 0
2334 2340 -2355 0
c (0<=(aux545 + aux547 - aux550))
-2340 2355 0
-2339 2353 0
-2334 2355 0
-2334 -2340 2353 0
-2334 -2339 2351 0
-2333 2353 0
-2333 -2340 2351 0
-2333 -2339 2350 0
c ((SATLiteral(302) - aux551 + SATLiteral(572))<=0)
-572 -2357 0
-302 -2357 0
-302 -572 -2358 0
c (0<=(SATLiteral(302) - aux551 + SATLiteral(572)))
572 2358 0
302 2358 0
302 572 2357 0
c ((SATLiteral(977) - aux552 + SATLiteral(842))<=0)
-842 -2360 0
-977 -2360 0
-977 -842 -2361 0
c (0<=(SATLiteral(977) - aux552 + SATLiteral(842)))
842 2361 0
977 2361 0
977 842 2360 0
c (( - aux553 + SATLiteral(707) + SATLiteral(167))<=0)
-167 -2363 0
-707 -2363 0
-707 -167 -2364 0
c (0<=( - aux553 + SATLiteral(707) + SATLiteral(167)))
167 2364 0
707 2364 0
707 167 2363 0
c (( - aux554 + SATLiteral(437) + SATLiteral(1112))<=0)
-1112 -2366 0
-437 -2366 0
-437 -1112 -2367 0
c (0<=( - aux554 + SATLiteral(437) + SATLiteral(1112)))
1112 2367 0
437 2367 0
437 1112 2366 0
c ((aux554 - aux555 + SATLiteral(32))<=0)
2366 -2369 0
2367 -2370 0
-32 -2369 0
-32 2366 -2370 0
-32 2367 -2372 0
c (0<=(aux554 - aux555 + SATLiteral(32)))
-2367 2372 0
-2366 2370 0
32 2372 0
32 -2367 2370 0
32 -2366 2369 0
c ((aux551 + aux553 - aux556)<=0)
2363 -2374 0
2364 -2375 0
2357 -2374 0
2357 2363 -2375 0
2357 2364 -2377 0
2358 -2375 0
2358 2363 -2377 0
2358 2364 -2379 0
c (0<=(aux551 + aux553 - aux556))
-2364 2379 0
-2363 2377 0
-2358 2379 0
-2358 -2364 2377 0
-2358 -2363 2375 0
-2357 2377 0
-2357 -2364 2375 0
-2357 -2363 2374 0
c ((SATLiteral(304) - aux557 + SATLiteral(574))<=0)
-574 -2381 0
-304 -2381 0
-304 -574 -2382 0
c (0<=(SATLiteral(304) - aux557 + SATLiteral(574)))
574 2382 0
304 2382 0
304 574 2381 0
c ((SATLiteral(979) - aux558 + SATLiteral(844))<=0)
-844 -2384 0
-979 -2384 0
-979 -844 -2385 0
c (0<=(SATLiteral(979) - aux558 + SATLiteral(844)))
844 2385 0
979 2385 0
979 844 2384 0
c (( - aux559 + SATLiteral(709) + SATLiteral(169))<=0)
-169 -2387 0
-709 -2387 0
-709 -169 -2388 0
c (0<=( - aux559 + SATLiteral(709) + SATLiteral(169)))
169 2388 0
709 2388 0
709 169 2387 0
c (( - aux560 + SATLiteral(439) + SATLiteral(1114))<=0)
-1114 -2390 0
-439 -2390 0
-439 -1114 -2391 0
c (0<=( - aux560 + SATLiteral(439) + SATLiteral(1114)))
1114 2391 0
439 2391 0
439 1114 2390 0
c ((aux560 - aux561 + SATLiteral(34))<=0)
2390 -2393 0
2391 -2394 0
-34 -2393 0
-34 2390 -2394 0
-34 2391 -2396 0
c (0<=(aux560 - aux561 + SATLiteral(34)))
-2391 2396 0
-2390 2394 0
34 2396 0
34 -2391 2394 0
34 -2390 2393 0
c ((aux557 + aux559 - aux562)<=0)
2387 -2398 0
2388 -2399 0
2381 -2398 0
2381 2387 -2399 0
2381 2388 -2401 0
2382 -2399 0
2382 2387 -2401 0
2382 2388 -2403 0
c (0<=(aux557 + aux559 - aux562))
-2388 2403 0
-2387 2401 0
-2382 2403 0
-2382 -2388 2401 0
-2382 -2387 2399 0
-2381 2401 0
-2381 -2388 2399 0
-2381 -2387 2398 0
c ((SATLiteral(306) - aux563 + SATLiteral(576))<=0)
-576 -2405 0
-306 -2405 0
-306 -576 -2406 0
c (0<=(SATLiteral(306) - aux563 + SATLiteral(576)))
576 2406 0
306 2406 0
306 576 2405 0
c ((SATLiteral(981) - aux564 + SATLiteral(846))<=0)
-846 -2408 0
-981 -2408 0
-981 -846 -2409 0
c (0<=(SATLiteral(981) - aux564 + SATLiteral(846)))
846 2409 0
981 2409 0
981 846 2408 0
c (( - aux565 + SATLiteral(711) + SATLiteral(171))<=0)
-171 -2411 0
-711 -2411 0
-711 -171 -2412 0
c (0<=( - aux565 + SATLiteral(711) + SATLiteral(171)))
171 2412 0
711 2412 0
711 171 2411 0
c (( - aux566 + SATLiteral(441) + SATLiteral(1116))<=0)
-1116 -2414 0
-441 -2414 0
-441 -1116 -2415 0
c (0<=( - aux566 + SATLiteral(441) + SATLiteral(1116)))
1116 2415 0
441 2415 0
441 1116 2414 0
c ((aux566 - aux567 + SATLiteral(36))<=0)
2414 -2417 0
2415 -2418 0
-36 -2417 0
-36 2414 -2418 0
-36 2415 -2420 0
c (0<=(aux566 - aux567 + SATLiteral(36)))
-2415 2420 0
-2414 2418 0
36 2420 0
36 -2415 2418 0
36 -2414 2417 0
c ((aux563 + aux565 - aux568)<=0)
2411 -2422 0
2412 -2423 0
2405 -2422 0
2405 2411 -2423 0
2405 2412 -2425 0
2406 -2423 0
2406 2411 -2425 0
2406 2412 -2427 0
c (0<=(aux563 + aux565 - aux568))
-2412 2427 0
-2411 2425 0
-2406 2427 0
-2406 -2412 2425 0
-2406 -2411 2423 0
-2405 2425 0
-2405 -2412 2423 0
-2405 -2411 2422 0
c ((SATLiteral(308) - aux569 + SATLiteral(578))<=0)
-578 -2429 0
-308 -2429 0
-308 -578 -2430 0
c (0<=(SATLiteral(308) - aux569 + SATLiteral(578)))
578 2430 0
308 2430 0
308 578 2429 0
c ((SATLiteral(983) - aux570 + SATLiteral(848))<=0)
-848 -2432 0
-983 -2432 0
-983 -848 -2433 0
c (0<=(SATLiteral(983) - aux570 + SATLiteral(848)))
848 2433 0
983 2433 0
983 848 2432 0
c (( - aux571 + SATLiteral(713) + SATLiteral(173))<=0)
-173 -2435 0
-713 -2435 0
-713 -173 -2436 0
c (0<=( - aux571 + SATLiteral(713) + SATLiteral(173)))
173 2436 0
713 2436 0
713 173 2435 0
c (( - aux572 + SATLiteral(443) + SATLiteral(1118))<=0)
-1118 -2438 0
-443 -2438 0
-443 -1118 -2439 0
c (0<=( - aux572 + SATLiteral(443) + SATLiteral(1118)))
1118 2439 0
443 2439 0
443 1118 2438 0
c ((aux572 - aux573 + SATLiteral(38))<=0)
2438 -2441 0
2439 -2442 0
-38 -2441 0
-38 2438 -2442 0
-38 2439 -2444 0
c (0<=(aux572 - aux573 + SATLiteral(38)))
-2439 2444 0
-2438 2442 0
38 2444 0
38 -2439 2442 0
38 -2438 2441 0
c ((aux569 + aux571 - aux574)<=0)
2435 -2446 0
2436 -2447 0
2429 -2446 0
2429 2435 -2447 0
2429 2436 -2449 0
2430 -2447 0
2430 2435 -2449 0
2430 2436 -2451 0
c (0<=(aux569 + aux571 - aux574))
-2436 2451 0
-2435 2449 0
-2430 2451 0
-2430 -2436 2449 0
-2430 -2435 2447 0
-2429 2449 0
-2429 -2436 2447 0
-2429 -2435 2446 0
c ((SATLiteral(310) - aux575 + SATLiteral(580))<=0)
-580 -2453 0
-310 -2453 0
-310 -580 -2454 0
c (0<=(SATLiteral(310) - aux575 + SATLiteral(580)))
580 2454 0
310 2454 0
310 580 2453 0
c ((SATLiteral(985) - aux576 + SATLiteral(850))<=0)
-850 -2456 0
-985 -2456 0
-985 -850 -2457 0
c (0<=(SATLiteral(985) - aux576 + SATLiteral(850)))
850 2457 0
985 2457 0
985 850 2456 0
c (( - aux577 + SATLiteral(715) + SATLiteral(175))<=0)
-175 -2459 0
-715 -2459 0
-715 -175 -2460 0
c (0<=( - aux577 + SATLiteral(715) + SATLiteral(175)))
175 2460 0
715 2460 0
715 175 2459 0
c (( - aux578 + SATLiteral(445) + SATLiteral(1120))<=0)
-1120 -2462 0
-445 -2462 0
-445 -1120 -2463 0
c (0<=( - aux578 + SATLiteral(445) + SATLiteral(1120)))
1120 2463 0
445 2463 0
445 1120 2462 0
c ((aux578 - aux579 + SATLiteral(40))<=0)
2462 -2465 0
2463 -2466 0
-40 -2465 0
-40 2462 -2466 0
-40 2463 -2468 0
c (0<=(aux578 - aux579 + SATLiteral(40)))
-2463 2468 0
-2462 2466 0
40 2468 0
40 -2463 2466 0
40 -2462 2465 0
c ((aux575 + aux577 - aux580)<=0)
2459 -2470 0
2460 -2471 0
2453 -2470 0
2453 2459 -2471 0
2453 2460 -2473 0
2454 -2471 0
2454 2459 -2473 0
2454 2460 -2475 0
c (0<=(aux575 + aux577 - aux580))
-2460 2475 0
-2459 2473 0
-2454 2475 0
-2454 -2460 2473 0
-2454 -2459 2471 0
-2453 2473 0
-2453 -2460 2471 0
-2453 -2459 2470 0
c ((SATLiteral(312) - aux581 + SATLiteral(582))<=0)
-582 -2477 0
-312 -2477 0
-312 -582 -2478 0
c (0<=(SATLiteral(312) - aux581 + SATLiteral(582)))
582 2478 0
312 2478 0
312 582 2477 0
c ((SATLiteral(987) - aux582 + SATLiteral(852))<=0)
-852 -2480 0
-987 -2480 0
-987 -852 -2481 0
c (0<=(SATLiteral(987) - aux582 + SATLiteral(852)))
852 2481 0
987 2481 0
987 852 2480 0
c (( - aux583 + SATLiteral(717) + SATLiteral(177))<=0)
-177 -2483 0
-717 -2483 0
-717 -177 -2484 0
c (0<=( - aux583 + SATLiteral(717) + SATLiteral(177)))
177 2484 0
717 2484 0
717 177 2483 0
c (( - aux584 + SATLiteral(447) + SATLiteral(1122))<=0)
-1122 -2486 0
-447 -2486 0
-447 -1122 -2487 0
c (0<=( - aux584 + SATLiteral(447) + SATLiteral(1122)))
1122 2487 0
447 2487 0
447 1122 2486 0
c ((aux584 - aux585 + SATLiteral(42))<=0)
2486 -2489 0
2487 -2490 0
-42 -2489 0
-42 2486 -2490 0
-42 2487 -2492 0
c (0<=(aux584 - aux585 + SATLiteral(42)))
-2487 2492 0
-2486 2490 0
42 2492 0
42 -2487 2490 0
42 -2486 2489 0
c ((aux581 + aux583 - aux586)<=0)
2483 -2494 0
2484 -2495 0
2477 -2494 0
2477 2483 -2495 0
2477 2484 -2497 0
2478 -2495 0
2478 2483 -2497 0
2478 2484 -2499 0
c (0<=(aux581 + aux583 - aux586))
-2484 2499 0
-2483 2497 0
-2478 2499 0
-2478 -2484 2497 0
-2478 -2483 2495 0
-2477 2497 0
-2477 -2484 2495 0
-2477 -2483 2494 0
c ((SATLiteral(314) - aux587 + SATLiteral(584))<=0)
-584 -2501 0
-314 -2501 0
-314 -584 -2502 0
c (0<=(SATLiteral(314) - aux587 + SATLiteral(584)))
584 2502 0
314 2502 0
314 584 2501 0
c ((SATLiteral(989) - aux588 + SATLiteral(854))<=0)
-854 -2504 0
-989 -2504 0
-989 -854 -2505 0
c (0<=(SATLiteral(989) - aux588 + SATLiteral(854)))
854 2505 0
989 2505 0
989 854 2504 0
c (( - aux589 + SATLiteral(719) + SATLiteral(179))<=0)
-179 -2507 0
-719 -2507 0
-719 -179 -2508 0
c (0<=( - aux589 + SATLiteral(719) + SATLiteral(179)))
179 2508 0
719 2508 0
719 179 2507 0
c (( - aux590 + SATLiteral(449) + SATLiteral(1124))<=0)
-1124 -2510 0
-449 -2510 0
-449 -1124 -2511 0
c (0<=( - aux590 + SATLiteral(449) + SATLiteral(1124)))
1124 2511 0
449 2511 0
449 1124 2510 0
c ((aux590 - aux591 + SATLiteral(44))<=0)
2510 -2513 0
2511 -2514 0
-44 -2513 0
-44 2510 -2514 0
-44 2511 -2516 0
c (0<=(aux590 - aux591 + SATLiteral(44)))
-2511 2516 0
-2510 2514 0
44 2516 0
44 -2511 2514 0
44 -2510 2513 0
c ((aux587 + aux589 - aux592)<=0)
2507 -2518 0
2508 -2519 0
2501 -2518 0
2501 2507 -2519 0
2501 2508 -2521 0
2502 -2519 0
2502 2507 -2521 0
2502 2508 -2523 0
c (0<=(aux587 + aux589 - aux592))
-2508 2523 0
-2507 2521 0
-2502 2523 0
-2502 -2508 2521 0
-2502 -2507 2519 0
-2501 2521 0
-2501 -2508 2519 0
-2501 -2507 2518 0
c ((SATLiteral(316) - aux593 + SATLiteral(586))<=0)
-586 -2525 0
-316 -2525 0
-316 -586 -2526 0
c (0<=(SATLiteral(316) - aux593 + SATLiteral(586)))
586 2526 0
316 2526 0
316 586 2525 0
c ((SATLiteral(991) - aux594 + SATLiteral(856))<=0)
-856 -2528 0
-991 -2528 0
-991 -856 -2529 0
c (0<=(SATLiteral(991) - aux594 + SATLiteral(856)))
856 2529 0
991 2529 0
991 856 2528 0
c (( - aux595 + SATLiteral(721) + SATLiteral(181))<=0)
-181 -2531 0
-721 -2531 0
-721 -181 -2532 0
c (0<=( - aux595 + SATLiteral(721) + SATLiteral(181)))
181 2532 0
721 2532 0
721 181 2531 0
c (( - aux596 + SATLiteral(451) + SATLiteral(1126))<=0)
-1126 -2534 0
-451 -2534 0
-451 -1126 -2535 0
c (0<=( - aux596 + SATLiteral(451) + SATLiteral(1126)))
1126 2535 0
451 2535 0
451 1126 2534 0
c ((aux596 - aux597 + SATLiteral(46))<=0)
2534 -2537 0
2535 -2538 0
-46 -2537 0
-46 2534 -2538 0
-46 2535 -2540 0
c (0<=(aux596 - aux597 + SATLiteral(46)))
-2535 2540 0
-2534 2538 0
46 2540 0
46 -2535 2538 0
46 -2534 2537 0
c ((aux593 + aux595 - aux598)<=0)
2531 -2542 0
2532 -2543 0
2525 -2542 0
2525 2531 -2543 0
2525 2532 -2545 0
2526 -2543 0
2526 2531 -2545 0
2526 2532 -2547 0
c (0<=(aux593 + aux595 - aux598))
-2532 2547 0
-2531 2545 0
-2526 2547 0
-2526 -2532 2545 0
-2526 -2531 2543 0
-2525 2545 0
-2525 -2532 2543 0
-2525 -2531 2542 0
c ((SATLiteral(-315) - aux599 + SATLiteral(-585))<=0)
585 -2549 0
315 -2549 0
315 585 -2550 0
c (0<=(SATLiteral(-315) - aux599 + SATLiteral(-585)))
-585 2550 0
-315 2550 0
-315 -585 2549 0
c ((SATLiteral(-990) - aux600 + SATLiteral(-855))<=0)
855 -2552 0
990 -2552 0
990 855 -2553 0
c (0<=(SATLiteral(-990) - aux600 + SATLiteral(-855)))
-855 2553 0
-990 2553 0
-990 -855 2552 0
c (( - aux601 + SATLiteral(-720) + SATLiteral(-180))<=0)
180 -2555 0
720 -2555 0
720 180 -2556 0
c (0<=( - aux601 + SATLiteral(-720) + SATLiteral(-180)))
-180 2556 0
-720 2556 0
-720 -180 2555 0
c (( - aux602 + SATLiteral(-450) + SATLiteral(-1125))<=0)
1125 -2558 0
450 -2558 0
450 1125 -2559 0
c (0<=( - aux602 + SATLiteral(-450) + SATLiteral(-1125)))
-1125 2559 0
-450 2559 0
-450 -1125 2558 0
c ((aux602 - aux603 + SATLiteral(-45))<=0)
2558 -2561 0
2559 -2562 0
45 -2561 0
45 2558 -2562 0
45 2559 -2564 0
c (0<=(aux602 - aux603 + SATLiteral(-45)))
-2559 2564 0
-2558 2562 0
-45 2564 0
-45 -2559 2562 0
-45 -2558 2561 0
c ((aux599 + aux601 - aux604)<=0)
2555 -2566 0
2556 -2567 0
2549 -2566 0
2549 2555 -2567 0
2549 2556 -2569 0
2550 -2567 0
2550 2555 -2569 0
2550 2556 -2571 0
c (0<=(aux599 + aux601 - aux604))
-2556 2571 0
-2555 2569 0
-2550 2571 0
-2550 -2556 2569 0
-2550 -2555 2567 0
-2549 2569 0
-2549 -2556 2567 0
-2549 -2555 2566 0
c ((SATLiteral(317) - aux605 + SATLiteral(587))<=0)
-587 -2573 0
-317 -2573 0
-317 -587 -2574 0
c (0<=(SATLiteral(317) - aux605 + SATLiteral(587)))
587 2574 0
317 2574 0
317 587 2573 0
c ((SATLiteral(992) - aux606 + SATLiteral(857))<=0)
-857 -2576 0
-992 -2576 0
-992 -857 -2577 0
c (0<=(SATLiteral(992) - aux606 + SATLiteral(857)))
857 2577 0
992 2577 0
992 857 2576 0
c (( - aux607 + SATLiteral(722) + SATLiteral(182))<=0)
-182 -2579 0
-722 -2579 0
-722 -182 -2580 0
c (0<=( - aux607 + SATLiteral(722) + SATLiteral(182)))
182 2580 0
722 2580 0
722 182 2579 0
c (( - aux608 + SATLiteral(452) + SATLiteral(1127))<=0)
-1127 -2582 0
-452 -2582 0
-452 -1127 -2583 0
c (0<=( - aux608 + SATLiteral(452) + SATLiteral(1127)))
1127 2583 0
452 2583 0
452 1127 2582 0
c ((aux608 - aux609 + SATLiteral(47))<=0)
2582 -2585 0
2583 -2586 0
-47 -2585 0
-47 2582 -2586 0
-47 2583 -2588 0
c (0<=(aux608 - aux609 + SATLiteral(47)))
-2583 2588 0
-2582 2586 0
47 2588 0
47 -2583 2586 0
47 -2582 2585 0
c ((aux605 + aux607 - aux610)<=0)
2579 -2590 0
2580 -2591 0
2573 -2590 0
2573 2579 -2591 0
2573 2580 -2593 0
2574 -2591 0
2574 2579 -2593 0
2574 2580 -2595 0
c (0<=(aux605 + aux607 - aux610))
-2580 2595 0
-2579 2593 0
-2574 2595 0
-2574 -2580 2593 0
-2574 -2579 2591 0
-2573 2593 0
-2573 -2580 2591 0
-2573 -2579 2590 0
c ((SATLiteral(319) - aux611 + SATLiteral(589))<=0)
-589 -2597 0
-319 -2597 0
-319 -589 -2598 0
c (0<=(SATLiteral(319) - aux611 + SATLiteral(589)))
589 2598 0
319 2598 0
319 589 2597 0
c ((SATLiteral(994) - aux612 + SATLiteral(859))<=0)
-859 -2600 0
-994 -2600 0
-994 -859 -2601 0
c (0<=(SATLiteral(994) - aux612 + SATLiteral(859)))
859 2601 0
994 2601 0
994 859 2600 0
c (( - aux613 + SATLiteral(724) + SATLiteral(184))<=0)
-184 -2603 0
-724 -2603 0
-724 -184 -2604 0
c (0<=( - aux613 + SATLiteral(724) + SATLiteral(184)))
184 2604 0
724 2604 0
724 184 2603 0
c (( - aux614 + SATLiteral(454) + SATLiteral(1129))<=0)
-1129 -2606 0
-454 -2606 0
-454 -1129 -2607 0
c (0<=( - aux614 + SATLiteral(454) + SATLiteral(1129)))
1129 2607 0
454 2607 0
454 1129 2606 0
c ((aux614 - aux615 + SATLiteral(49))<=0)
2606 -2609 0
2607 -2610 0
-49 -2609 0
-49 2606 -2610 0
-49 2607 -2612 0
c (0<=(aux614 - aux615 + SATLiteral(49)))
-2607 2612 0
-2606 2610 0
49 2612 0
49 -2607 2610 0
49 -2606 2609 0
c ((aux611 + aux613 - aux616)<=0)
2603 -2614 0
2604 -2615 0
2597 -2614 0
2597 2603 -2615 0
2597 2604 -2617 0
2598 -2615 0
2598 2603 -2617 0
2598 2604 -2619 0
c (0<=(aux611 + aux613 - aux616))
-2604 2619 0
-2603 2617 0
-2598 2619 0
-2598 -2604 2617 0
-2598 -2603 2615 0
-2597 2617 0
-2597 -2604 2615 0
-2597 -2603 2614 0
c ((SATLiteral(321) - aux617 + SATLiteral(591))<=0)
-591 -2621 0
-321 -2621 0
-321 -591 -2622 0
c (0<=(SATLiteral(321) - aux617 + SATLiteral(591)))
591 2622 0
321 2622 0
321 591 2621 0
c ((SATLiteral(996) - aux618 + SATLiteral(861))<=0)
-861 -2624 0
-996 -2624 0
-996 -861 -2625 0
c (0<=(SATLiteral(996) - aux618 + SATLiteral(861)))
861 2625 0
996 2625 0
996 861 2624 0
c (( - aux619 + SATLiteral(726) + SATLiteral(186))<=0)
-186 -2627 0
-726 -2627 0
-726 -186 -2628 0
c (0<=( - aux619 + SATLiteral(726) + SATLiteral(186)))
186 2628 0
726 2628 0
726 186 2627 0
c (( - aux620 + SATLiteral(456) + SATLiteral(1131))<=0)
-1131 -2630 0
-456 -2630 0
-456 -1131 -2631 0
c (0<=( - aux620 + SATLiteral(456) + SATLiteral(1131)))
1131 2631 0
456 2631 0
456 1131 2630 0
c ((aux620 - aux621 + SATLiteral(51))<=0)
2630 -2633 0
2631 -2634 0
-51 -2633 0
-51 2630 -2634 0
-51 2631 -2636 0
c (0<=(aux620 - aux621 + SATLiteral(51)))
-2631 2636 0
-2630 2634 0
51 2636 0
51 -2631 2634 0
51 -2630 2633 0
c ((aux617 + aux619 - aux622)<=0)
2627 -2638 0
2628 -2639 0
2621 -2638 0
2621 2627 -2639 0
2621 2628 -2641 0
2622 -2639 0
2622 2627 -2641 0
2622 2628 -2643 0
c (0<=(aux617 + aux619 - aux622))
-2628 2643 0
-2627 2641 0
-2622 2643 0
-2622 -2628 2641 0
-2622 -2627 2639 0
-2621 2641 0
-2621 -2628 2639 0
-2621 -2627 2638 0
c ((SATLiteral(323) - aux623 + SATLiteral(593))<=0)
-593 -2645 0
-323 -2645 0
-323 -593 -2646 0
c (0<=(SATLiteral(323) - aux623 + SATLiteral(593)))
593 2646 0
323 2646 0
323 593 2645 0
c ((SATLiteral(998) - aux624 + SATLiteral(863))<=0)
-863 -2648 0
-998 -2648 0
-998 -863 -2649 0
c (0<=(SATLiteral(998) - aux624 + SATLiteral(863)))
863 2649 0
998 2649 0
998 863 2648 0
c (( - aux625 + SATLiteral(728) + SATLiteral(188))<=0)
-188 -2651 0
-728 -2651 0
-728 -188 -2652 0
c (0<=( - aux625 + SATLiteral(728) + SATLiteral(188)))
188 2652 0
728 2652 0
728 188 2651 0
c (( - aux626 + SATLiteral(458) + SATLiteral(1133))<=0)
-1133 -2654 0
-458 -2654 0
-458 -1133 -2655 0
c (0<=( - aux626 + SATLiteral(458) + SATLiteral(1133)))
1133 2655 0
458 2655 0
458 1133 2654 0
c ((aux626 - aux627 + SATLiteral(53))<=0)
2654 -2657 0
2655 -2658 0
-53 -2657 0
-53 2654 -2658 0
-53 2655 -2660 0
c (0<=(aux626 - aux627 + SATLiteral(53)))
-2655 2660 0
-2654 2658 0
53 2660 0
53 -2655 2658 0
53 -2654 2657 0
c ((aux623 + aux625 - aux628)<=0)
2651 -2662 0
2652 -2663 0
2645 -2662 0
2645 2651 -2663 0
2645 2652 -2665 0
2646 -2663 0
2646 2651 -2665 0
2646 2652 -2667 0
c (0<=(aux623 + aux625 - aux628))
-2652 2667 0
-2651 2665 0
-2646 2667 0
-2646 -2652 2665 0
-2646 -2651 2663 0
-2645 2665 0
-2645 -2652 2663 0
-2645 -2651 2662 0
c ((SATLiteral(325) - aux629 + SATLiteral(595))<=0)
-595 -2669 0
-325 -2669 0
-325 -595 -2670 0
c (0<=(SATLiteral(325) - aux629 + SATLiteral(595)))
595 2670 0
325 2670 0
325 595 2669 0
c ((SATLiteral(1000) - aux630 + SATLiteral(865))<=0)
-865 -2672 0
-1000 -2672 0
-1000 -865 -2673 0
c (0<=(SATLiteral(1000) - aux630 + SATLiteral(865)))
865 2673 0
1000 2673 0
1000 865 2672 0
c (( - aux631 + SATLiteral(730) + SATLiteral(190))<=0)
-190 -2675 0
-730 -2675 0
-730 -190 -2676 0
c (0<=( - aux631 + SATLiteral(730) + SATLiteral(190)))
190 2676 0
730 2676 0
730 190 2675 0
c (( - aux632 + SATLiteral(460) + SATLiteral(1135))<=0)
-1135 -2678 0
-460 -2678 0
-460 -1135 -2679 0
c (0<=( - aux632 + SATLiteral(460) + SATLiteral(1135)))
1135 2679 0
460 2679 0
460 1135 2678 0
c ((aux632 - aux633 + SATLiteral(55))<=0)
2678 -2681 0
2679 -2682 0
-55 -2681 0
-55 2678 -2682 0
-55 2679 -2684 0
c (0<=(aux632 - aux633 + SATLiteral(55)))
-2679 2684 0
-2678 2682 0
55 2684 0
55 -2679 2682 0
55 -2678 2681 0
c ((aux629 + aux631 - aux634)<=0)
2675 -2686 0
2676 -2687 0
2669 -2686 0
2669 2675 -2687 0
2669 2676 -2689 0
2670 -2687 0
2670 2675 -2689 0
2670 2676 -2691 0
c (0<=(aux629 + aux631 - aux634))
-2676 2691 0
-2675 2689 0
-2670 2691 0
-2670 -2676 2689 0
-2670 -2675 2687 0
-2669 2689 0
-2669 -2676 2687 0
-2669 -2675 2686 0
c ((SATLiteral(327) - aux635 + SATLiteral(597))<=0)
-597 -2693 0
-327 -2693 0
-327 -597 -2694 0
c (0<=(SATLiteral(327) - aux635 + SATLiteral(597)))
597 2694 0
327 2694 0
327 597 2693 0
c ((SATLiteral(1002) - aux636 + SATLiteral(867))<=0)
-867 -2696 0
-1002 -2696 0
-1002 -867 -2697 0
c (0<=(SATLiteral(1002) - aux636 + SATLiteral(867)))
867 2697 0
1002 2697 0
1002 867 2696 0
c (( - aux637 + SATLiteral(732) + SATLiteral(192))<=0)
-192 -2699 0
-732 -2699 0
-732 -192 -2700 0
c (0<=( - aux637 + SATLiteral(732) + SATLiteral(192)))
192 2700 0
732 2700 0
732 192 2699 0
c (( - aux638 + SATLiteral(462) + SATLiteral(1137))<=0)
-1137 -2702 0
-462 -2702 0
-462 -1137 -2703 0
c (0<=( - aux638 + SATLiteral(462) + SATLiteral(1137)))
1137 2703 0
462 2703 0
462 1137 2702 0
c ((aux638 - aux639 + SATLiteral(57))<=0)
2702 -2705 0
2703 -2706 0
-57 -2705 0
-57 2702 -2706 0
-57 2703 -2708 0
c (0<=(aux638 - aux639 + SATLiteral(57)))
-2703 2708 0
-2702 2706 0
57 2708 0
57 -2703 2706 0
57 -2702 2705 0
c ((aux635 + aux637 - aux640)<=0)
2699 -2710 0
2700 -2711 0
2693 -2710 0
2693 2699 -2711 0
2693 2700 -2713 0
2694 -2711 0
2694 2699 -2713 0
2694 2700 -2715 0
c (0<=(aux635 + aux637 - aux640))
-2700 2715 0
-2699 2713 0
-2694 2715 0
-2694 -2700 2713 0
-2694 -2699 2711 0
-2693 2713 0
-2693 -2700 2711 0
-2693 -2699 2710 0
c ((SATLiteral(329) - aux641 + SATLiteral(599))<=0)
-599 -2717 0
-329 -2717 0
-329 -599 -2718 0
c (0<=(SATLiteral(329) - aux641 + SATLiteral(599)))
599 2718 0
329 2718 0
329 599 2717 0
c ((SATLiteral(1004) - aux642 + SATLiteral(869))<=0)
-869 -2720 0
-1004 -2720 0
-1004 -869 -2721 0
c (0<=(SATLiteral(1004) - aux642 + SATLiteral(869)))
869 2721 0
1004 2721 0
1004 869 2720 0
c (( - aux643 + SATLiteral(734) + SATLiteral(194))<=0)
-194 -2723 0
-734 -2723 0
-734 -194 -2724 0
c (0<=( - aux643 + SATLiteral(734) + SATLiteral(194)))
194 2724 0
734 2724 0
734 194 2723 0
c (( - aux644 + SATLiteral(464) + SATLiteral(1139))<=0)
-1139 -2726 0
-464 -2726 0
-464 -1139 -2727 0
c (0<=( - aux644 + SATLiteral(464) + SATLiteral(1139)))
1139 2727 0
464 2727 0
464 1139 2726 0
c ((aux644 - aux645 + SATLiteral(59))<=0)
2726 -2729 0
2727 -2730 0
-59 -2729 0
-59 2726 -2730 0
-59 2727 -2732 0
c (0<=(aux644 - aux645 + SATLiteral(59)))
-2727 2732 0
-2726 2730 0
59 2732 0
59 -2727 2730 0
59 -2726 2729 0
c ((aux641 + aux643 - aux646)<=0)
2723 -2734 0
2724 -2735 0
2717 -2734 0
2717 2723 -2735 0
2717 2724 -2737 0
2718 -2735 0
2718 2723 -2737 0
2718 2724 -2739 0
c (0<=(aux641 + aux643 - aux646))
-2724 2739 0
-2723 2737 0
-2718 2739 0
-2718 -2724 2737 0
-2718 -2723 2735 0
-2717 2737 0
-2717 -2724 2735 0
-2717 -2723 2734 0
c ((SATLiteral(331) - aux647 + SATLiteral(601))<=0)
-601 -2741 0
-331 -2741 0
-331 -601 -2742 0
c (0<=(SATLiteral(331) - aux647 + SATLiteral(601)))
601 2742 0
331 2742 0
331 601 2741 0
c ((SATLiteral(1006) - aux648 + SATLiteral(871))<=0)
-871 -2744 0
-1006 -2744 0
-1006 -871 -2745 0
c (0<=(SATLiteral(1006) - aux648 + SATLiteral(871)))
871 2745 0
1006 2745 0
1006 871 2744 0
c (( - aux649 + SATLiteral(736) + SATLiteral(196))<=0)
-196 -2747 0
-736 -2747 0
-736 -196 -2748 0
c (0<=( - aux649 + SATLiteral(736) + SATLiteral(196)))
196 2748 0
736 2748 0
736 196 2747 0
c (( - aux650 + SATLiteral(466) + SATLiteral(1141))<=0)
-1141 -2750 0
-466 -2750 0
-466 -1141 -2751 0
c (0<=( - aux650 + SATLiteral(466) + SATLiteral(1141)))
1141 2751 0
466 2751 0
466 1141 2750 0
c ((aux650 - aux651 + SATLiteral(61))<=0)
2750 -2753 0
2751 -2754 0
-61 -2753 0
-61 2750 -2754 0
-61 2751 -2756 0
c (0<=(aux650 - aux651 + SATLiteral(61)))
-2751 2756 0
-2750 2754 0
61 2756 0
61 -2751 2754 0
61 -2750 2753 0
c ((aux647 + aux649 - aux652)<=0)
2747 -2758 0
2748 -2759 0
2741 -2758 0
2741 2747 -2759 0
2741 2748 -2761 0
2742 -2759 0
2742 2747 -2761 0
2742 2748 -2763 0
c (0<=(aux647 + aux649 - aux652))
-2748 2763 0
-2747 2761 0
-2742 2763 0
-2742 -2748 2761 0
-2742 -2747 2759 0
-2741 2761 0
-2741 -2748 2759 0
-2741 -2747 2758 0
c ((SATLiteral(-330) - aux653 + SATLiteral(-600))<=0)
600 -2765 0
330 -2765 0
330 600 -2766 0
c (0<=(SATLiteral(-330) - aux653 + SATLiteral(-600)))
-600 2766 0
-330 2766 0
-330 -600 2765 0
c ((SATLiteral(-1005) - aux654 + SATLiteral(-870))<=0)
870 -2768 0
1005 -2768 0
1005 870 -2769 0
c (0<=(SATLiteral(-1005) - aux654 + SATLiteral(-870)))
-870 2769 0
-1005 2769 0
-1005 -870 2768 0
c (( - aux655 + SATLiteral(-735) + SATLiteral(-195))<=0)
195 -2771 0
735 -2771 0
735 195 -2772 0
c (0<=( - aux655 + SATLiteral(-735) + SATLiteral(-195)))
-195 2772 0
-735 2772 0
-735 -195 2771 0
c (( - aux656 + SATLiteral(-465) + SATLiteral(-1140))<=0)
1140 -2774 0
465 -2774 0
465 1140 -2775 0
c (0<=( - aux656 + SATLiteral(-465) + SATLiteral(-1140)))
-1140 2775 0
-465 2775 0
-465 -1140 2774 0
c ((aux656 - aux657 + SATLiteral(-60))<=0)
2774 -2777 0
2775 -2778 0
60 -2777 0
60 2774 -2778 0
60 2775 -2780 0
c (0<=(aux656 - aux657 + SATLiteral(-60)))
-2775 2780 0
-2774 2778 0
-60 2780 0
-60 -2775 2778 0
-60 -2774 2777 0
c ((aux653 + aux655 - aux658)<=0)
2771 -2782 0
2772 -2783 0
2765 -2782 0
2765 2771 -2783 0
2765 2772 -2785 0
2766 -2783 0
2766 2771 -2785 0
2766 2772 -2787 0
c (0<=(aux653 + aux655 - aux658))
-2772 2787 0
-2771 2785 0
-2766 2787 0
-2766 -2772 2785 0
-2766 -2771 2783 0
-2765 2785 0
-2765 -2772 2783 0
-2765 -2771 2782 0
c ((SATLiteral(332) - aux659 + SATLiteral(602))<=0)
-602 -2789 0
-332 -2789 0
-332 -602 -2790 0
c (0<=(SATLiteral(332) - aux659 + SATLiteral(602)))
602 2790 0
332 2790 0
332 602 2789 0
c ((SATLiteral(1007) - aux660 + SATLiteral(872))<=0)
-872 -2792 0
-1007 -2792 0
-1007 -872 -2793 0
c (0<=(SATLiteral(1007) - aux660 + SATLiteral(872)))
872 2793 0
1007 2793 0
1007 872 2792 0
c (( - aux661 + SATLiteral(737) + SATLiteral(197))<=0)
-197 -2795 0
-737 -2795 0
-737 -197 -2796 0
c (0<=( - aux661 + SATLiteral(737) + SATLiteral(197)))
197 2796 0
737 2796 0
737 197 2795 0
c (( - aux662 + SATLiteral(467) + SATLiteral(1142))<=0)
-1142 -2798 0
-467 -2798 0
-467 -1142 -2799 0
c (0<=( - aux662 + SATLiteral(467) + SATLiteral(1142)))
1142 2799 0
467 2799 0
467 1142 2798 0
c ((aux662 - aux663 + SATLiteral(62))<=0)
2798 -2801 0
2799 -2802 0
-62 -2801 0
-62 2798 -2802 0
-62 2799 -2804 0
c (0<=(aux662 - aux663 + SATLiteral(62)))
-2799 2804 0
-2798 2802 0
62 2804 0
62 -2799 2802 0
62 -2798 2801 0
c ((aux659 + aux661 - aux664)<=0)
2795 -2806 0
2796 -2807 0
2789 -2806 0
2789 2795 -2807 0
2789 2796 -2809 0
2790 -2807 0
2790 2795 -2809 0
2790 2796 -2811 0
c (0<=(aux659 + aux661 - aux664))
-2796 2811 0
-2795 2809 0
-2790 2811 0
-2790 -2796 2809 0
-2790 -2795 2807 0
-2789 2809 0
-2789 -2796 2807 0
-2789 -2795 2806 0
c ((SATLiteral(334) - aux665 + SATLiteral(604))<=0)
-604 -2813 0
-334 -2813 0
-334 -604 -2814 0
c (0<=(SATLiteral(334) - aux665 + SATLiteral(604)))
604 2814 0
334 2814 0
334 604 2813 0
c ((SATLiteral(1009) - aux666 + SATLiteral(874))<=0)
-874 -2816 0
-1009 -2816 0
-1009 -874 -2817 0
c (0<=(SATLiteral(1009) - aux666 + SATLiteral(874)))
874 2817 0
1009 2817 0
1009 874 2816 0
c (( - aux667 + SATLiteral(739) + SATLiteral(199))<=0)
-199 -2819 0
-739 -2819 0
-739 -199 -2820 0
c (0<=( - aux667 + SATLiteral(739) + SATLiteral(199)))
199 2820 0
739 2820 0
739 199 2819 0
c (( - aux668 + SATLiteral(469) + SATLiteral(1144))<=0)
-1144 -2822 0
-469 -2822 0
-469 -1144 -2823 0
c (0<=( - aux668 + SATLiteral(469) + SATLiteral(1144)))
1144 2823 0
469 2823 0
469 1144 2822 0
c ((aux668 - aux669 + SATLiteral(64))<=0)
2822 -2825 0
2823 -2826 0
-64 -2825 0
-64 2822 -2826 0
-64 2823 -2828 0
c (0<=(aux668 - aux669 + SATLiteral(64)))
-2823 2828 0
-2822 2826 0
64 2828 0
64 -2823 2826 0
64 -2822 2825 0
c ((aux665 + aux667 - aux670)<=0)
2819 -2830 0
2820 -2831 0
2813 -2830 0
2813 2819 -2831 0
2813 2820 -2833 0
2814 -2831 0
2814 2819 -2833 0
2814 2820 -2835 0
c (0<=(aux665 + aux667 - aux670))
-2820 2835 0
-2819 2833 0
-2814 2835 0
-2814 -2820 2833 0
-2814 -2819 2831 0
-2813 2833 0
-2813 -2820 2831 0
-2813 -2819 2830 0
c ((SATLiteral(336) - aux671 + SATLiteral(606))<=0)
-606 -2837 0
-336 -2837 0
-336 -606 -2838 0
c (0<=(SATLiteral(336) - aux671 + SATLiteral(606)))
606 2838 0
336 2838 0
336 606 2837 0
c ((SATLiteral(1011) - aux672 + SATLiteral(876))<=0)
-876 -2840 0
-1011 -2840 0
-1011 -876 -2841 0
c (0<=(SATLiteral(1011) - aux672 + SATLiteral(876)))
876 2841 0
1011 2841 0
1011 876 2840 0
c (( - aux673 + SATLiteral(741) + SATLiteral(201))<=0)
-201 -2843 0
-741 -2843 0
-741 -201 -2844 0
c (0<=( - aux673 + SATLiteral(741) + SATLiteral(201)))
201 2844 0
741 2844 0
741 201 2843 0
c (( - aux674 + SATLiteral(471) + SATLiteral(1146))<=0)
-1146 -2846 0
-471 -2846 0
-471 -1146 -2847 0
c (0<=( - aux674 + SATLiteral(471) + SATLiteral(1146)))
1146 2847 0
471 2847 0
471 1146 2846 0
c ((aux674 - aux675 + SATLiteral(66))<=0)
2846 -2849 0
2847 -2850 0
-66 -2849 0
-66 2846 -2850 0
-66 2847 -2852 0
c (0<=(aux674 - aux675 + SATLiteral(66)))
-2847 2852 0
-2846 2850 0
66 2852 0
66 -2847 2850 0
66 -2846 2849 0
c ((aux671 + aux673 - aux676)<=0)
2843 -2854 0
2844 -2855 0
2837 -2854 0
2837 2843 -2855 0
2837 2844 -2857 0
2838 -2855 0
2838 2843 -2857 0
2838 2844 -2859 0
c (0<=(aux671 + aux673 - aux676))
-2844 2859 0
-2843 2857 0
-2838 2859 0
-2838 -2844 2857 0
-2838 -2843 2855 0
-2837 2857 0
-2837 -2844 2855 0
-2837 -2843 2854 0
c ((SATLiteral(338) - aux677 + SATLiteral(608))<=0)
-608 -2861 0
-338 -2861 0
-338 -608 -2862 0
c (0<=(SATLiteral(338) - aux677 + SATLiteral(608)))
608 2862 0
338 2862 0
338 608 2861 0
c ((SATLiteral(1013) - aux678 + SATLiteral(878))<=0)
-878 -2864 0
-1013 -2864 0
-1013 -878 -2865 0
c (0<=(SATLiteral(1013) - aux678 + SATLiteral(878)))
878 2865 0
1013 2865 0
1013 878 2864 0
c (( - aux679 + SATLiteral(743) + SATLiteral(203))<=0)
-203 -2867 0
-743 -2867 0
-743 -203 -2868 0
c (0<=( - aux679 + SATLiteral(743) + SATLiteral(203)))
203 2868 0
743 2868 0
743 203 2867 0
c (( - aux680 + SATLiteral(473) + SATLiteral(1148))<=0)
-1148 -2870 0
-473 -2870 0
-473 -1148 -2871 0
c (0<=( - aux680 + SATLiteral(473) + SATLiteral(1148)))
1148 2871 0
473 2871 0
473 1148 2870 0
c ((aux680 - aux681 + SATLiteral(68))<=0)
2870 -2873 0
2871 -2874 0
-68 -2873 0
-68 2870 -2874 0
-68 2871 -2876 0
c (0<=(aux680 - aux681 + SATLiteral(68)))
-2871 2876 0
-2870 2874 0
68 2876 0
68 -2871 2874 0
68 -2870 2873 0
c ((aux677 + aux679 - aux682)<=0)
2867 -2878 0
2868 -2879 0
2861 -2878 0
2861 2867 -2879 0
2861 2868 -2881 0
2862 -2879 0
2862 2867 -2881 0
2862 2868 -2883 0
c (0<=(aux677 + aux679 - aux682))
-2868 2883 0
-2867 2881 0
-2862 2883 0
-2862 -2868 2881 0
-2862 -2867 2879 0
-2861 2881 0
-2861 -2868 2879 0
-2861 -2867 2878 0
c ((SATLiteral(340) - aux683 + SATLiteral(610))<=0)
-610 -2885 0
-340 -2885 0
-340 -610 -2886 0
c (0<=(SATLiteral(340) - aux683 + SATLiteral(610)))
610 2886 0
340 2886 0
340 610 2885 0
c ((SATLiteral(1015) - aux684 + SATLiteral(880))<=0)
-880 -2888 0
-1015 -2888 0
-1015 -880 -2889 0
c (0<=(SATLiteral(1015) - aux684 + SATLiteral(880)))
880 2889 0
1015 2889 0
1015 880 2888 0
c (( - aux685 + SATLiteral(745) + SATLiteral(205))<=0)
-205 -2891 0
-745 -2891 0
-745 -205 -2892 0
c (0<=( - aux685 + SATLiteral(745) + SATLiteral(205)))
205 2892 0
745 2892 0
745 205 2891 0
c (( - aux686 + SATLiteral(475) + SATLiteral(1150))<=0)
-1150 -2894 0
-475 -2894 0
-475 -1150 -2895 0
c (0<=( - aux686 + SATLiteral(475) + SATLiteral(1150)))
1150 2895 0
475 2895 0
475 1150 2894 0
c ((aux686 - aux687 + SATLiteral(70))<=0)
2894 -2897 0
2895 -2898 0
-70 -2897 0
-70 2894 -2898 0
-70 2895 -2900 0
c (0<=(aux686 - aux687 + SATLiteral(70)))
-2895 2900 0
-2894 2898 0
70 2900 0
70 -2895 2898 0
70 -2894 2897 0
c ((aux683 + aux685 - aux688)<=0)
2891 -2902 0
2892 -2903 0
2885 -2902 0
2885 2891 -2903 0
2885 2892 -2905 0
2886 -2903 0
2886 2891 -2905 0
2886 2892 -2907 0
c (0<=(aux683 + aux685 - aux688))
-2892 2907 0
-2891 2905 0
-2886 2907 0
-2886 -2892 2905 0
-2886 -2891 2903 0
-2885 2905 0
-2885 -2892 2903 0
-2885 -2891 2902 0
c ((SATLiteral(342) - aux689 + SATLiteral(612))<=0)
-612 -2909 0
-342 -2909 0
-342 -612 -2910 0
c (0<=(SATLiteral(342) - aux689 + SATLiteral(612)))
612 2910 0
342 2910 0
342 612 2909 0
c ((SATLiteral(1017) - aux690 + SATLiteral(882))<=0)
-882 -2912 0
-1017 -2912 0
-1017 -882 -2913 0
c (0<=(SATLiteral(1017) - aux690 + SATLiteral(882)))
882 2913 0
1017 2913 0
1017 882 2912 0
c (( - aux691 + SATLiteral(747) + SATLiteral(207))<=0)
-207 -2915 0
-747 -2915 0
-747 -207 -2916 0
c (0<=( - aux691 + SATLiteral(747) + SATLiteral(207)))
207 2916 0
747 2916 0
747 207 2915 0
c (( - aux692 + SATLiteral(477) + SATLiteral(1152))<=0)
-1152 -2918 0
-477 -2918 0
-477 -1152 -2919 0
c (0<=( - aux692 + SATLiteral(477) + SATLiteral(1152)))
1152 2919 0
477 2919 0
477 1152 2918 0
c ((aux692 - aux693 + SATLiteral(72))<=0)
2918 -2921 0
2919 -2922 0
-72 -2921 0
-72 2918 -2922 0
-72 2919 -2924 0
c (0<=(aux692 - aux693 + SATLiteral(72)))
-2919 2924 0
-2918 2922 0
72 2924 0
72 -2919 2922 0
72 -2918 2921 0
c ((aux689 + aux691 - aux694)<=0)
2915 -2926 0
2916 -2927 0
2909 -2926 0
2909 2915 -2927 0
2909 2916 -2929 0
2910 -2927 0
2910 2915 -2929 0
2910 2916 -2931 0
c (0<=(aux689 + aux691 - aux694))
-2916 2931 0
-2915 2929 0
-2910 2931 0
-2910 -2916 2929 0
-2910 -2915 2927 0
-2909 2929 0
-2909 -2916 2927 0
-2909 -2915 2926 0
c ((SATLiteral(344) - aux695 + SATLiteral(614))<=0)
-614 -2933 0
-344 -2933 0
-344 -614 -2934 0
c (0<=(SATLiteral(344) - aux695 + SATLiteral(614)))
614 2934 0
344 2934 0
344 614 2933 0
c ((SATLiteral(1019) - aux696 + SATLiteral(884))<=0)
-884 -2936 0
-1019 -2936 0
-1019 -884 -2937 0
c (0<=(SATLiteral(1019) - aux696 + SATLiteral(884)))
884 2937 0
1019 2937 0
1019 884 2936 0
c (( - aux697 + SATLiteral(749) + SATLiteral(209))<=0)
-209 -2939 0
-749 -2939 0
-749 -209 -2940 0
c (0<=( - aux697 + SATLiteral(749) + SATLiteral(209)))
209 2940 0
749 2940 0
749 209 2939 0
c (( - aux698 + SATLiteral(479) + SATLiteral(1154))<=0)
-1154 -2942 0
-479 -2942 0
-479 -1154 -2943 0
c (0<=( - aux698 + SATLiteral(479) + SATLiteral(1154)))
1154 2943 0
479 2943 0
479 1154 2942 0
c ((aux698 - aux699 + SATLiteral(74))<=0)
2942 -2945 0
2943 -2946 0
-74 -2945 0
-74 2942 -2946 0
-74 2943 -2948 0
c (0<=(aux698 - aux699 + SATLiteral(74)))
-2943 2948 0
-2942 2946 0
74 2948 0
74 -2943 2946 0
74 -2942 2945 0
c ((aux695 + aux697 - aux700)<=0)
2939 -2950 0
2940 -2951 0
2933 -2950 0
2933 2939 -2951 0
2933 2940 -2953 0
2934 -2951 0
2934 2939 -2953 0
2934 2940 -2955 0
c (0<=(aux695 + aux697 - aux700))
-2940 2955 0
-2939 2953 0
-2934 2955 0
-2934 -2940 2953 0
-2934 -2939 2951 0
-2933 2953 0
-2933 -2940 2951 0
-2933 -2939 2950 0
c ((SATLiteral(346) - aux701 + SATLiteral(616))<=0)
-616 -2957 0
-346 -2957 0
-346 -616 -2958 0
c (0<=(SATLiteral(346) - aux701 + SATLiteral(616)))
616 2958 0
346 2958 0
346 616 2957 0
c ((SATLiteral(1021) - aux702 + SATLiteral(886))<=0)
-886 -2960 0
-1021 -2960 0
-1021 -886 -2961 0
c (0<=(SATLiteral(1021) - aux702 + SATLiteral(886)))
886 2961 0
1021 2961 0
1021 886 2960 0
c (( - aux703 + SATLiteral(751) + SATLiteral(211))<=0)
-211 -2963 0
-751 -2963 0
-751 -211 -2964 0
c (0<=( - aux703 + SATLiteral(751) + SATLiteral(211)))
211 2964 0
751 2964 0
751 211 2963 0
c (( - aux704 + SATLiteral(481) + SATLiteral(1156))<=0)
-1156 -2966 0
-481 -2966 0
-481 -1156 -2967 0
c (0<=( - aux704 + SATLiteral(481) + SATLiteral(1156)))
1156 2967 0
481 2967 0
481 1156 2966 0
c ((aux704 - aux705 + SATLiteral(76))<=0)
2966 -2969 0
2967 -2970 0
-76 -2969 0
-76 2966 -2970 0
-76 2967 -2972 0
c (0<=(aux704 - aux705 + SATLiteral(76)))
-2967 2972 0
-2966 2970 0
76 2972 0
76 -2967 2970 0
76 -2966 2969 0
c ((aux701 + aux703 - aux706)<=0)
2963 -2974 0
2964 -2975 0
2957 -2974 0
2957 2963 -2975 0
2957 2964 -2977 0
2958 -2975 0
2958 2963 -2977 0
2958 2964 -2979 0
c (0<=(aux701 + aux703 - aux706))
-2964 2979 0
-2963 2977 0
-2958 2979 0
-2958 -2964 2977 0
-2958 -2963 2975 0
-2957 2977 0
-2957 -2964 2975 0
-2957 -2963 2974 0
c ((SATLiteral(-345) - aux707 + SATLiteral(-615))<=0)
615 -2981 0
345 -2981 0
345 615 -2982 0
c (0<=(SATLiteral(-345) - aux707 + SATLiteral(-615)))
-615 2982 0
-345 2982 0
-345 -615 2981 0
c ((SATLiteral(-1020) - aux708 + SATLiteral(-885))<=0)
885 -2984 0
1020 -2984 0
1020 885 -2985 0
c (0<=(SATLiteral(-1020) - aux708 + SATLiteral(-885)))
-885 2985 0
-1020 2985 0
-1020 -885 2984 0
c (( - aux709 + SATLiteral(-750) + SATLiteral(-210))<=0)
210 -2987 0
750 -2987 0
750 210 -2988 0
c (0<=( - aux709 + SATLiteral(-750) + SATLiteral(-210)))
-210 2988 0
-750 2988 0
-750 -210 2987 0
c (( - aux710 + SATLiteral(-480) + SATLiteral(-1155))<=0)
1155 -2990 0
480 -2990 0
480 1155 -2991 0
c (0<=( - aux710 + SATLiteral(-480) + SATLiteral(-1155)))
-1155 2991 0
-480 2991 0
-480 -1155 2990 0
c ((aux710 - aux711 + SATLiteral(-75))<=0)
2990 -2993 0
2991 -2994 0
75 -2993 0
75 2990 -2994 0
75 2991 -2996 0
c (0<=(aux710 - aux711 + SATLiteral(-75)))
-2991 2996 0
-2990 2994 0
-75 2996 0
-75 -2991 2994 0
-75 -2990 2993 0
c ((aux707 + aux709 - aux712)<=0)
2987 -2998 0
2988 -2999 0
2981 -2998 0
2981 2987 -2999 0
2981 2988 -3001 0
2982 -2999 0
2982 2987 -3001 0
2982 2988 -3003 0
c (0<=(aux707 + aux709 - aux712))
-2988 3003 0
-2987 3001 0
-2982 3003 0
-2982 -2988 3001 0
-2982 -2987 2999 0
-2981 3001 0
-2981 -2988 2999 0
-2981 -2987 2998 0
c ((SATLiteral(347) - aux713 + SATLiteral(617))<=0)
-617 -3005 0
-347 -3005 0
-347 -617 -3006 0
c (0<=(SATLiteral(347) - aux713 + SATLiteral(617)))
617 3006 0
347 3006 0
347 617 3005 0
c ((SATLiteral(1022) - aux714 + SATLiteral(887))<=0)
-887 -3008 0
-1022 -3008 0
-1022 -887 -3009 0
c (0<=(SATLiteral(1022) - aux714 + SATLiteral(887)))
887 3009 0
1022 3009 0
1022 887 3008 0
c (( - aux715 + SATLiteral(752) + SATLiteral(212))<=0)
-212 -3011 0
-752 -3011 0
-752 -212 -3012 0
c (0<=( - aux715 + SATLiteral(752) + SATLiteral(212)))
212 3012 0
752 3012 0
752 212 3011 0
c (( - aux716 + SATLiteral(482) + SATLiteral(1157))<=0)
-1157 -3014 0
-482 -3014 0
-482 -1157 -3015 0
c (0<=( - aux716 + SATLiteral(482) + SATLiteral(1157)))
1157 3015 0
482 3015 0
482 1157 3014 0
c ((aux716 - aux717 + SATLiteral(77))<=0)
3014 -3017 0
3015 -3018 0
-77 -3017 0
-77 3014 -3018 0
-77 3015 -3020 0
c (0<=(aux716 - aux717 + SATLiteral(77)))
-3015 3020 0
-3014 3018 0
77 3020 0
77 -3015 3018 0
77 -3014 3017 0
c ((aux713 + aux715 - aux718)<=0)
3011 -3022 0
3012 -3023 0
3005 -3022 0
3005 3011 -3023 0
3005 3012 -3025 0
3006 -3023 0
3006 3011 -3025 0
3006 3012 -3027 0
c (0<=(aux713 + aux715 - aux718))
-3012 3027 0
-3011 3025 0
-3006 3027 0
-3006 -3012 3025 0
-3006 -3011 3023 0
-3005 3025 0
-3005 -3012 3023 0
-3005 -3011 3022 0
c ((SATLiteral(349) - aux719 + SATLiteral(619))<=0)
-619 -3029 0
-349 -3029 0
-349 -619 -3030 0
c (0<=(SATLiteral(349) - aux719 + SATLiteral(619)))
619 3030 0
349 3030 0
349 619 3029 0
c ((SATLiteral(1024) - aux720 + SATLiteral(889))<=0)
-889 -3032 0
-1024 -3032 0
-1024 -889 -3033 0
c (0<=(SATLiteral(1024) - aux720 + SATLiteral(889)))
889 3033 0
1024 3033 0
1024 889 3032 0
c (( - aux721 + SATLiteral(754) + SATLiteral(214))<=0)
-214 -3035 0
-754 -3035 0
-754 -214 -3036 0
c (0<=( - aux721 + SATLiteral(754) + SATLiteral(214)))
214 3036 0
754 3036 0
754 214 3035 0
c (( - aux722 + SATLiteral(484) + SATLiteral(1159))<=0)
-1159 -3038 0
-484 -3038 0
-484 -1159 -3039 0
c (0<=( - aux722 + SATLiteral(484) + SATLiteral(1159)))
1159 3039 0
484 3039 0
484 1159 3038 0
c ((aux722 - aux723 + SATLiteral(79))<=0)
3038 -3041 0
3039 -3042 0
-79 -3041 0
-79 3038 -3042 0
-79 3039 -3044 0
c (0<=(aux722 - aux723 + SATLiteral(79)))
-3039 3044 0
-3038 3042 0
79 3044 0
79 -3039 3042 0
79 -3038 3041 0
c ((aux719 + aux721 - aux724)<=0)
3035 -3046 0
3036 -3047 0
3029 -3046 0
3029 3035 -3047 0
3029 3036 -3049 0
3030 -3047 0
3030 3035 -3049 0
3030 3036 -3051 0
c (0<=(aux719 + aux721 - aux724))
-3036 3051 0
-3035 3049 0
-3030 3051 0
-3030 -3036 3049 0
-3030 -3035 3047 0
-3029 3049 0
-3029 -3036 3047 0
-3029 -3035 3046 0
c ((SATLiteral(351) - aux725 + SATLiteral(621))<=0)
-621 -3053 0
-351 -3053 0
-351 -621 -3054 0
c (0<=(SATLiteral(351) - aux725 + SATLiteral(621)))
621 3054 0
351 3054 0
351 621 3053 0
c ((SATLiteral(1026) - aux726 + SATLiteral(891))<=0)
-891 -3056 0
-1026 -3056 0
-1026 -891 -3057 0
c (0<=(SATLiteral(1026) - aux726 + SATLiteral(891)))
891 3057 0
1026 3057 0
1026 891 3056 0
c (( - aux727 + SATLiteral(756) + SATLiteral(216))<=0)
-216 -3059 0
-756 -3059 0
-756 -216 -3060 0
c (0<=( - aux727 + SATLiteral(756) + SATLiteral(216)))
216 3060 0
756 3060 0
756 216 3059 0
c (( - aux728 + SATLiteral(486) + SATLiteral(1161))<=0)
-1161 -3062 0
-486 -3062 0
-486 -1161 -3063 0
c (0<=( - aux728 + SATLiteral(486) + SATLiteral(1161)))
1161 3063 0
486 3063 0
486 1161 3062 0
c ((aux728 - aux729 + SATLiteral(81))<=0)
3062 -3065 0
3063 -3066 0
-81 -3065 0
-81 3062 -3066 0
-81 3063 -3068 0
c (0<=(aux728 - aux729 + SATLiteral(81)))
-3063 3068 0
-3062 3066 0
81 3068 0
81 -3063 3066 0
81 -3062 3065 0
c ((aux725 + aux727 - aux730)<=0)
3059 -3070 0
3060 -3071 0
3053 -3070 0
3053 3059 -3071 0
3053 3060 -3073 0
3054 -3071 0
3054 3059 -3073 0
3054 3060 -3075 0
c (0<=(aux725 + aux727 - aux730))
-3060 3075 0
-3059 3073 0
-3054 3075 0
-3054 -3060 3073 0
-3054 -3059 3071 0
-3053 3073 0
-3053 -3060 3071 0
-3053 -3059 3070 0
c ((SATLiteral(353) - aux731 + SATLiteral(623))<=0)
-623 -3077 0
-353 -3077 0
-353 -623 -3078 0
c (0<=(SATLiteral(353) - aux731 + SATLiteral(623)))
623 3078 0
353 3078 0
353 623 3077 0
c ((SATLiteral(1028) - aux732 + SATLiteral(893))<=0)
-893 -3080 0
-1028 -3080 0
-1028 -893 -3081 0
c (0<=(SATLiteral(1028) - aux732 + SATLiteral(893)))
893 3081 0
1028 3081 0
1028 893 3080 0
c (( - aux733 + SATLiteral(758) + SATLiteral(218))<=0)
-218 -3083 0
-758 -3083 0
-758 -218 -3084 0
c (0<=( - aux733 + SATLiteral(758) + SATLiteral(218)))
218 3084 0
758 3084 0
758 218 3083 0
c (( - aux734 + SATLiteral(488) + SATLiteral(1163))<=0)
-1163 -3086 0
-488 -3086 0
-488 -1163 -3087 0
c (0<=( - aux734 + SATLiteral(488) + SATLiteral(1163)))
1163 3087 0
488 3087 0
488 1163 3086 0
c ((aux734 - aux735 + SATLiteral(83))<=0)
3086 -3089 0
3087 -3090 0
-83 -3089 0
-83 3086 -3090 0
-83 3087 -3092 0
c (0<=(aux734 - aux735 + SATLiteral(83)))
-3087 3092 0
-3086 3090 0
83 3092 0
83 -3087 3090 0
83 -3086 3089 0
c ((aux731 + aux733 - aux736)<=0)
3083 -3094 0
3084 -3095 0
3077 -3094 0
3077 3083 -3095 0
3077 3084 -3097 0
3078 -3095 0
3078 3083 -3097 0
3078 3084 -3099 0
c (0<=(aux731 + aux733 - aux736))
-3084 3099 0
-3083 3097 0
-3078 3099 0
-3078 -3084 3097 0
-3078 -3083 3095 0
-3077 3097 0
-3077 -3084 3095 0
-3077 -3083 3094 0
c ((SATLiteral(355) - aux737 + SATLiteral(625))<=0)
-625 -3101 0
-355 -3101 0
-355 -625 -3102 0
c (0<=(SATLiteral(355) - aux737 + SATLiteral(625)))
625 3102 0
355 3102 0
355 625 3101 0
c ((SATLiteral(1030) - aux738 + SATLiteral(895))<=0)
-895 -3104 0
-1030 -3104 0
-1030 -895 -3105 0
c (0<=(SATLiteral(1030) - aux738 + SATLiteral(895)))
895 3105 0
1030 3105 0
1030 895 3104 0
c (( - aux739 + SATLiteral(760) + SATLiteral(220))<=0)
-220 -3107 0
-760 -3107 0
-760 -220 -3108 0
c (0<=( - aux739 + SATLiteral(760) + SATLiteral(220)))
220 3108 0
760 3108 0
760 220 3107 0
c (( - aux740 + SATLiteral(490) + SATLiteral(1165))<=0)
-1165 -3110 0
-490 -3110 0
-490 -1165 -3111 0
c (0<=( - aux740 + SATLiteral(490) + SATLiteral(1165)))
1165 3111 0
490 3111 0
490 1165 3110 0
c ((aux740 - aux741 + SATLiteral(85))<=0)
3110 -3113 0
3111 -3114 0
-85 -3113 0
-85 3110 -3114 0
-85 3111 -3116 0
c (0<=(aux740 - aux741 + SATLiteral(85)))
-3111 3116 0
-3110 3114 0
85 3116 0
85 -3111 3114 0
85 -3110 3113 0
c ((aux737 + aux739 - aux742)<=0)
3107 -3118 0
3108 -3119 0
3101 -3118 0
3101 3107 -3119 0
3101 3108 -3121 0
3102 -3119 0
3102 3107 -3121 0
3102 3108 -3123 0
c (0<=(aux737 + aux739 - aux742))
-3108 3123 0
-3107 3121 0
-3102 3123 0
-3102 -3108 3121 0
-3102 -3107 3119 0
-3101 3121 0
-3101 -3108 3119 0
-3101 -3107 3118 0
c ((SATLiteral(357) - aux743 + SATLiteral(627))<=0)
-627 -3125 0
-357 -3125 0
-357 -627 -3126 0
c (0<=(SATLiteral(357) - aux743 + SATLiteral(627)))
627 3126 0
357 3126 0
357 627 3125 0
c ((SATLiteral(1032) - aux744 + SATLiteral(897))<=0)
-897 -3128 0
-1032 -3128 0
-1032 -897 -3129 0
c (0<=(SATLiteral(1032) - aux744 + SATLiteral(897)))
897 3129 0
1032 3129 0
1032 897 3128 0
c (( - aux745 + SATLiteral(762) + SATLiteral(222))<=0)
-222 -3131 0
-762 -3131 0
-762 -222 -3132 0
c (0<=( - aux745 + SATLiteral(762) + SATLiteral(222)))
222 3132 0
762 3132 0
762 222 3131 0
c (( - aux746 + SATLiteral(492) + SATLiteral(1167))<=0)
-1167 -3134 0
-492 -3134 0
-492 -1167 -3135 0
c (0<=( - aux746 + SATLiteral(492) + SATLiteral(1167)))
1167 3135 0
492 3135 0
492 1167 3134 0
c ((aux746 - aux747 + SATLiteral(87))<=0)
3134 -3137 0
3135 -3138 0
-87 -3137 0
-87 3134 -3138 0
-87 3135 -3140 0
c (0<=(aux746 - aux747 + SATLiteral(87)))
-3135 3140 0
-3134 3138 0
87 3140 0
87 -3135 3138 0
87 -3134 3137 0
c ((aux743 + aux745 - aux748)<=0)
3131 -3142 0
3132 -3143 0
3125 -3142 0
3125 3131 -3143 0
3125 3132 -3145 0
3126 -3143 0
3126 3131 -3145 0
3126 3132 -3147 0
c (0<=(aux743 + aux745 - aux748))
-3132 3147 0
-3131 3145 0
-3126 3147 0
-3126 -3132 3145 0
-3126 -3131 3143 0
-3125 3145 0
-3125 -3132 3143 0
-3125 -3131 3142 0
c ((SATLiteral(359) - aux749 + SATLiteral(629))<=0)
-629 -3149 0
-359 -3149 0
-359 -629 -3150 0
c (0<=(SATLiteral(359) - aux749 + SATLiteral(629)))
629 3150 0
359 3150 0
359 629 3149 0
c ((SATLiteral(1034) - aux750 + SATLiteral(899))<=0)
-899 -3152 0
-1034 -3152 0
-1034 -899 -3153 0
c (0<=(SATLiteral(1034) - aux750 + SATLiteral(899)))
899 3153 0
1034 3153 0
1034 899 3152 0
c (( - aux751 + SATLiteral(764) + SATLiteral(224))<=0)
-224 -3155 0
-764 -3155 0
-764 -224 -3156 0
c (0<=( - aux751 + SATLiteral(764) + SATLiteral(224)))
224 3156 0
764 3156 0
764 224 3155 0
c (( - aux752 + SATLiteral(494) + SATLiteral(1169))<=0)
-1169 -3158 0
-494 -3158 0
-494 -1169 -3159 0
c (0<=( - aux752 + SATLiteral(494) + SATLiteral(1169)))
1169 3159 0
494 3159 0
494 1169 3158 0
c ((aux752 - aux753 + SATLiteral(89))<=0)
3158 -3161 0
3159 -3162 0
-89 -3161 0
-89 3158 -3162 0
-89 3159 -3164 0
c (0<=(aux752 - aux753 + SATLiteral(89)))
-3159 3164 0
-3158 3162 0
89 3164 0
89 -3159 3162 0
89 -3158 3161 0
c ((aux749 + aux751 - aux754)<=0)
3155 -3166 0
3156 -3167 0
3149 -3166 0
3149 3155 -3167 0
3149 3156 -3169 0
3150 -3167 0
3150 3155 -3169 0
3150 3156 -3171 0
c (0<=(aux749 + aux751 - aux754))
-3156 3171 0
-3155 3169 0
-3150 3171 0
-3150 -3156 3169 0
-3150 -3155 3167 0
-3149 3169 0
-3149 -3156 3167 0
-3149 -3155 3166 0
c ((SATLiteral(361) - aux755 + SATLiteral(631))<=0)
-631 -3173 0
-361 -3173 0
-361 -631 -3174 0
c (0<=(SATLiteral(361) - aux755 + SATLiteral(631)))
631 3174 0
361 3174 0
361 631 3173 0
c ((SATLiteral(1036) - aux756 + SATLiteral(901))<=0)
-901 -3176 0
-1036 -3176 0
-1036 -901 -3177 0
c (0<=(SATLiteral(1036) - aux756 + SATLiteral(901)))
901 3177 0
1036 3177 0
1036 901 3176 0
c (( - aux757 + SATLiteral(766) + SATLiteral(226))<=0)
-226 -3179 0
-766 -3179 0
-766 -226 -3180 0
c (0<=( - aux757 + SATLiteral(766) + SATLiteral(226)))
226 3180 0
766 3180 0
766 226 3179 0
c (( - aux758 + SATLiteral(496) + SATLiteral(1171))<=0)
-1171 -3182 0
-496 -3182 0
-496 -1171 -3183 0
c (0<=( - aux758 + SATLiteral(496) + SATLiteral(1171)))
1171 3183 0
496 3183 0
496 1171 3182 0
c ((aux758 - aux759 + SATLiteral(91))<=0)
3182 -3185 0
3183 -3186 0
-91 -3185 0
-91 3182 -3186 0
-91 3183 -3188 0
c (0<=(aux758 - aux759 + SATLiteral(91)))
-3183 3188 0
-3182 3186 0
91 3188 0
91 -3183 3186 0
91 -3182 3185 0
c ((aux755 + aux757 - aux760)<=0)
3179 -3190 0
3180 -3191 0
3173 -3190 0
3173 3179 -3191 0
3173 3180 -3193 0
3174 -3191 0
3174 3179 -3193 0
3174 3180 -3195 0
c (0<=(aux755 + aux757 - aux760))
-3180 3195 0
-3179 3193 0
-3174 3195 0
-3174 -3180 3193 0
-3174 -3179 3191 0
-3173 3193 0
-3173 -3180 3191 0
-3173 -3179 3190 0
c ((SATLiteral(-360) - aux761 + SATLiteral(-630))<=0)
630 -3197 0
360 -3197 0
360 630 -3198 0
c (0<=(SATLiteral(-360) - aux761 + SATLiteral(-630)))
-630 3198 0
-360 3198 0
-360 -630 3197 0
c ((SATLiteral(-1035) - aux762 + SATLiteral(-900))<=0)
900 -3200 0
1035 -3200 0
1035 900 -3201 0
c (0<=(SATLiteral(-1035) - aux762 + SATLiteral(-900)))
-900 3201 0
-1035 3201 0
-1035 -900 3200 0
c (( - aux763 + SATLiteral(-765) + SATLiteral(-225))<=0)
225 -3203 0
765 -3203 0
765 225 -3204 0
c (0<=( - aux763 + SATLiteral(-765) + SATLiteral(-225)))
-225 3204 0
-765 3204 0
-765 -225 3203 0
c (( - aux764 + SATLiteral(-495) + SATLiteral(-1170))<=0)
1170 -3206 0
495 -3206 0
495 1170 -3207 0
c (0<=( - aux764 + SATLiteral(-495) + SATLiteral(-1170)))
-1170 3207 0
-495 3207 0
-495 -1170 3206 0
c ((aux764 - aux765 + SATLiteral(-90))<=0)
3206 -3209 0
3207 -3210 0
90 -3209 0
90 3206 -3210 0
90 3207 -3212 0
c (0<=(aux764 - aux765 + SATLiteral(-90)))
-3207 3212 0
-3206 3210 0
-90 3212 0
-90 -3207 3210 0
-90 -3206 3209 0
c ((aux761 + aux763 - aux766)<=0)
3203 -3214 0
3204 -3215 0
3197 -3214 0
3197 3203 -3215 0
3197 3204 -3217 0
3198 -3215 0
3198 3203 -3217 0
3198 3204 -3219 0
c (0<=(aux761 + aux763 - aux766))
-3204 3219 0
-3203 3217 0
-3198 3219 0
-3198 -3204 3217 0
-3198 -3203 3215 0
-3197 3217 0
-3197 -3204 3215 0
-3197 -3203 3214 0
c ((SATLiteral(362) - aux767 + SATLiteral(632))<=0)
-632 -3221 0
-362 -3221 0
-362 -632 -3222 0
c (0<=(SATLiteral(362) - aux767 + SATLiteral(632)))
632 3222 0
362 3222 0
362 632 3221 0
c ((SATLiteral(1037) - aux768 + SATLiteral(902))<=0)
-902 -3224 0
-1037 -3224 0
-1037 -902 -3225 0
c (0<=(SATLiteral(1037) - aux768 + SATLiteral(902)))
902 3225 0
1037 3225 0
1037 902 3224 0
c (( - aux769 + SATLiteral(767) + SATLiteral(227))<=0)
-227 -3227 0
-767 -3227 0
-767 -227 -3228 0
c (0<=( - aux769 + SATLiteral(767) + SATLiteral(227)))
227 3228 0
767 3228 0
767 227 3227 0
c (( - aux770 + SATLiteral(497) + SATLiteral(1172))<=0)
-1172 -3230 0
-497 -3230 0
-497 -1172 -3231 0
c (0<=( - aux770 + SATLiteral(497) + SATLiteral(1172)))
1172 3231 0
497 3231 0
497 1172 3230 0
c ((aux770 - aux771 + SATLiteral(92))<=0)
3230 -3233 0
3231 -3234 0
-92 -3233 0
-92 3230 -3234 0
-92 3231 -3236 0
c (0<=(aux770 - aux771 + SATLiteral(92)))
-3231 3236 0
-3230 3234 0
92 3236 0
92 -3231 3234 0
92 -3230 3233 0
c ((aux767 + aux769 - aux772)<=0)
3227 -3238 0
3228 -3239 0
3221 -3238 0
3221 3227 -3239 0
3221 3228 -3241 0
3222 -3239 0
3222 3227 -3241 0
3222 3228 -3243 0
c (0<=(aux767 + aux769 - aux772))
-3228 3243 0
-3227 3241 0
-3222 3243 0
-3222 -3228 3241 0
-3222 -3227 3239 0
-3221 3241 0
-3221 -3228 3239 0
-3221 -3227 3238 0
c ((SATLiteral(364) - aux773 + SATLiteral(634))<=0)
-634 -3245 0
-364 -3245 0
-364 -634 -3246 0
c (0<=(SATLiteral(364) - aux773 + SATLiteral(634)))
634 3246 0
364 3246 0
364 634 3245 0
c ((SATLiteral(1039) - aux774 + SATLiteral(904))<=0)
-904 -3248 0
-1039 -3248 0
-1039 -904 -3249 0
c (0<=(SATLiteral(1039) - aux774 + SATLiteral(904)))
904 3249 0
1039 3249 0
1039 904 3248 0
c (( - aux775 + SATLiteral(769) + SATLiteral(229))<=0)
-229 -3251 0
-769 -3251 0
-769 -229 -3252 0
c (0<=( - aux775 + SATLiteral(769) + SATLiteral(229)))
229 3252 0
769 3252 0
769 229 3251 0
c (( - aux776 + SATLiteral(499) + SATLiteral(1174))<=0)
-1174 -3254 0
-499 -3254 0
-499 -1174 -3255 0
c (0<=( - aux776 + SATLiteral(499) + SATLiteral(1174)))
1174 3255 0
499 3255 0
499 1174 3254 0
c ((aux776 - aux777 + SATLiteral(94))<=0)
3254 -3257 0
3255 -3258 0
-94 -3257 0
-94 3254 -3258 0
-94 3255 -3260 0
c (0<=(aux776 - aux777 + SATLiteral(94)))
-3255 3260 0
-3254 3258 0
94 3260 0
94 -3255 3258 0
94 -3254 3257 0
c ((aux773 + aux775 - aux778)<=0)
3251 -3262 0
3252 -3263 0
3245 -3262 0
3245 3251 -3263 0
3245 3252 -3265 0
3246 -3263 0
3246 3251 -3265 0
3246 3252 -3267 0
c (0<=(aux773 + aux775 - aux778))
-3252 3267 0
-3251 3265 0
-3246 3267 0
-3246 -3252 3265 0
-3246 -3251 3263 0
-3245 3265 0
-3245 -3252 3263 0
-3245 -3251 3262 0
c ((SATLiteral(366) - aux779 + SATLiteral(636))<=0)
-636 -3269 0
-366 -3269 0
-366 -636 -3270 0
c (0<=(SATLiteral(366) - aux779 + SATLiteral(636)))
636 3270 0
366 3270 0
366 636 3269 0
c ((SATLiteral(1041) - aux780 + SATLiteral(906))<=0)
-906 -3272 0
-1041 -3272 0
-1041 -906 -3273 0
c (0<=(SATLiteral(1041) - aux780 + SATLiteral(906)))
906 3273 0
1041 3273 0
1041 906 3272 0
c (( - aux781 + SATLiteral(771) + SATLiteral(231))<=0)
-231 -3275 0
-771 -3275 0
-771 -231 -3276 0
c (0<=( - aux781 + SATLiteral(771) + SATLiteral(231)))
231 3276 0
771 3276 0
771 231 3275 0
c (( - aux782 + SATLiteral(501) + SATLiteral(1176))<=0)
-1176 -3278 0
-501 -3278 0
-501 -1176 -3279 0
c (0<=( - aux782 + SATLiteral(501) + SATLiteral(1176)))
1176 3279 0
501 3279 0
501 1176 3278 0
c ((aux782 - aux783 + SATLiteral(96))<=0)
3278 -3281 0
3279 -3282 0
-96 -3281 0
-96 3278 -3282 0
-96 3279 -3284 0
c (0<=(aux782 - aux783 + SATLiteral(96)))
-3279 3284 0
-3278 3282 0
96 3284 0
96 -3279 3282 0
96 -3278 3281 0
c ((aux779 + aux781 - aux784)<=0)
3275 -3286 0
3276 -3287 0
3269 -3286 0
3269 3275 -3287 0
3269 3276 -3289 0
3270 -3287 0
3270 3275 -3289 0
3270 3276 -3291 0
c (0<=(aux779 + aux781 - aux784))
-3276 3291 0
-3275 3289 0
-3270 3291 0
-3270 -3276 3289 0
-3270 -3275 3287 0
-3269 3289 0
-3269 -3276 3287 0
-3269 -3275 3286 0
c ((SATLiteral(368) - aux785 + SATLiteral(638))<=0)
-638 -3293 0
-368 -3293 0
-368 -638 -3294 0
c (0<=(SATLiteral(368) - aux785 + SATLiteral(638)))
638 3294 0
368 3294 0
368 638 3293 0
c ((SATLiteral(1043) - aux786 + SATLiteral(908))<=0)
-908 -3296 0
-1043 -3296 0
-1043 -908 -3297 0
c (0<=(SATLiteral(1043) - aux786 + SATLiteral(908)))
908 3297 0
1043 3297 0
1043 908 3296 0
c (( - aux787 + SATLiteral(773) + SATLiteral(233))<=0)
-233 -3299 0
-773 -3299 0
-773 -233 -3300 0
c (0<=( - aux787 + SATLiteral(773) + SATLiteral(233)))
233 3300 0
773 3300 0
773 233 3299 0
c (( - aux788 + SATLiteral(503) + SATLiteral(1178))<=0)
-1178 -3302 0
-503 -3302 0
-503 -1178 -3303 0
c (0<=( - aux788 + SATLiteral(503) + SATLiteral(1178)))
1178 3303 0
503 3303 0
503 1178 3302 0
c ((aux788 - aux789 + SATLiteral(98))<=0)
3302 -3305 0
3303 -3306 0
-98 -3305 0
-98 3302 -3306 0
-98 3303 -3308 0
c (0<=(aux788 - aux789 + SATLiteral(98)))
-3303 3308 0
-3302 3306 0
98 3308 0
98 -3303 3306 0
98 -3302 3305 0
c ((aux785 + aux787 - aux790)<=0)
3299 -3310 0
3300 -3311 0
3293 -3310 0
3293 3299 -3311 0
3293 3300 -3313 0
3294 -3311 0
3294 3299 -3313 0
3294 3300 -3315 0
c (0<=(aux785 + aux787 - aux790))
-3300 3315 0
-3299 3313 0
-3294 3315 0
-3294 -3300 3313 0
-3294 -3299 3311 0
-3293 3313 0
-3293 -3300 3311 0
-3293 -3299 3310 0
c ((SATLiteral(370) - aux791 + SATLiteral(640))<=0)
-640 -3317 0
-370 -3317 0
-370 -640 -3318 0
c (0<=(SATLiteral(370) - aux791 + SATLiteral(640)))
640 3318 0
370 3318 0
370 640 3317 0
c ((SATLiteral(1045) - aux792 + SATLiteral(910))<=0)
-910 -3320 0
-1045 -3320 0
-1045 -910 -3321 0
c (0<=(SATLiteral(1045) - aux792 + SATLiteral(910)))
910 3321 0
1045 3321 0
1045 910 3320 0
c (( - aux793 + SATLiteral(775) + SATLiteral(235))<=0)
-235 -3323 0
-775 -3323 0
-775 -235 -3324 0
c (0<=( - aux793 + SATLiteral(775) + SATLiteral(235)))
235 3324 0
775 3324 0
775 235 3323 0
c (( - aux794 + SATLiteral(505) + SATLiteral(1180))<=0)
-1180 -3326 0
-505 -3326 0
-505 -1180 -3327 0
c (0<=( - aux794 + SATLiteral(505) + SATLiteral(1180)))
1180 3327 0
505 3327 0
505 1180 3326 0
c ((aux794 - aux795 + SATLiteral(100))<=0)
3326 -3329 0
3327 -3330 0
-100 -3329 0
-100 3326 -3330 0
-100 3327 -3332 0
c (0<=(aux794 - aux795 + SATLiteral(100)))
-3327 3332 0
-3326 3330 0
100 3332 0
100 -3327 3330 0
100 -3326 3329 0
c ((aux791 + aux793 - aux796)<=0)
3323 -3334 0
3324 -3335 0
3317 -3334 0
3317 3323 -3335 0
3317 3324 -3337 0
3318 -3335 0
3318 3323 -3337 0
3318 3324 -3339 0
c (0<=(aux791 + aux793 - aux796))
-3324 3339 0
-3323 3337 0
-3318 3339 0
-3318 -3324 3337 0
-3318 -3323 3335 0
-3317 3337 0
-3317 -3324 3335 0
-3317 -3323 3334 0
c ((SATLiteral(372) - aux797 + SATLiteral(642))<=0)
-642 -3341 0
-372 -3341 0
-372 -642 -3342 0
c (0<=(SATLiteral(372) - aux797 + SATLiteral(642)))
642 3342 0
372 3342 0
372 642 3341 0
c ((SATLiteral(1047) - aux798 + SATLiteral(912))<=0)
-912 -3344 0
-1047 -3344 0
-1047 -912 -3345 0
c (0<=(SATLiteral(1047) - aux798 + SATLiteral(912)))
912 3345 0
1047 3345 0
1047 912 3344 0
c (( - aux799 + SATLiteral(777) + SATLiteral(237))<=0)
-237 -3347 0
-777 -3347 0
-777 -237 -3348 0
c (0<=( - aux799 + SATLiteral(777) + SATLiteral(237)))
237 3348 0
777 3348 0
777 237 3347 0
c (( - aux800 + SATLiteral(507) + SATLiteral(1182))<=0)
-1182 -3350 0
-507 -3350 0
-507 -1182 -3351 0
c (0<=( - aux800 + SATLiteral(507) + SATLiteral(1182)))
1182 3351 0
507 3351 0
507 1182 3350 0
c ((aux800 - aux801 + SATLiteral(102))<=0)
3350 -3353 0
3351 -3354 0
-102 -3353 0
-102 3350 -3354 0
-102 3351 -3356 0
c (0<=(aux800 - aux801 + SATLiteral(102)))
-3351 3356 0
-3350 3354 0
102 3356 0
102 -3351 3354 0
102 -3350 3353 0
c ((aux797 + aux799 - aux802)<=0)
3347 -3358 0
3348 -3359 0
3341 -3358 0
3341 3347 -3359 0
3341 3348 -3361 0
3342 -3359 0
3342 3347 -3361 0
3342 3348 -3363 0
c (0<=(aux797 + aux799 - aux802))
-3348 3363 0
-3347 3361 0
-3342 3363 0
-3342 -3348 3361 0
-3342 -3347 3359 0
-3341 3361 0
-3341 -3348 3359 0
-3341 -3347 3358 0
c ((SATLiteral(374) - aux803 + SATLiteral(644))<=0)
-644 -3365 0
-374 -3365 0
-374 -644 -3366 0
c (0<=(SATLiteral(374) - aux803 + SATLiteral(644)))
644 3366 0
374 3366 0
374 644 3365 0
c ((SATLiteral(1049) - aux804 + SATLiteral(914))<=0)
-914 -3368 0
-1049 -3368 0
-1049 -914 -3369 0
c (0<=(SATLiteral(1049) - aux804 + SATLiteral(914)))
914 3369 0
1049 3369 0
1049 914 3368 0
c (( - aux805 + SATLiteral(779) + SATLiteral(239))<=0)
-239 -3371 0
-779 -3371 0
-779 -239 -3372 0
c (0<=( - aux805 + SATLiteral(779) + SATLiteral(239)))
239 3372 0
779 3372 0
779 239 3371 0
c (( - aux806 + SATLiteral(509) + SATLiteral(1184))<=0)
-1184 -3374 0
-509 -3374 0
-509 -1184 -3375 0
c (0<=( - aux806 + SATLiteral(509) + SATLiteral(1184)))
1184 3375 0
509 3375 0
509 1184 3374 0
c ((aux806 - aux807 + SATLiteral(104))<=0)
3374 -3377 0
3375 -3378 0
-104 -3377 0
-104 3374 -3378 0
-104 3375 -3380 0
c (0<=(aux806 - aux807 + SATLiteral(104)))
-3375 3380 0
-3374 3378 0
104 3380 0
104 -3375 3378 0
104 -3374 3377 0
c ((aux803 + aux805 - aux808)<=0)
3371 -3382 0
3372 -3383 0
3365 -3382 0
3365 3371 -3383 0
3365 3372 -3385 0
3366 -3383 0
3366 3371 -3385 0
3366 3372 -3387 0
c (0<=(aux803 + aux805 - aux808))
-3372 3387 0
-3371 3385 0
-3366 3387 0
-3366 -3372 3385 0
-3366 -3371 3383 0
-3365 3385 0
-3365 -3372 3383 0
-3365 -3371 3382 0
c ((SATLiteral(376) - aux809 + SATLiteral(646))<=0)
-646 -3389 0
-376 -3389 0
-376 -646 -3390 0
c (0<=(SATLiteral(376) - aux809 + SATLiteral(646)))
646 3390 0
376 3390 0
376 646 3389 0
c ((SATLiteral(1051) - aux810 + SATLiteral(916))<=0)
-916 -3392 0
-1051 -3392 0
-1051 -916 -3393 0
c (0<=(SATLiteral(1051) - aux810 + SATLiteral(916)))
916 3393 0
1051 3393 0
1051 916 3392 0
c (( - aux811 + SATLiteral(781) + SATLiteral(241))<=0)
-241 -3395 0
-781 -3395 0
-781 -241 -3396 0
c (0<=( - aux811 + SATLiteral(781) + SATLiteral(241)))
241 3396 0
781 3396 0
781 241 3395 0
c (( - aux812 + SATLiteral(511) + SATLiteral(1186))<=0)
-1186 -3398 0
-511 -3398 0
-511 -1186 -3399 0
c (0<=( - aux812 + SATLiteral(511) + SATLiteral(1186)))
1186 3399 0
511 3399 0
511 1186 3398 0
c ((aux812 - aux813 + SATLiteral(106))<=0)
3398 -3401 0
3399 -3402 0
-106 -3401 0
-106 3398 -3402 0
-106 3399 -3404 0
c (0<=(aux812 - aux813 + SATLiteral(106)))
-3399 3404 0
-3398 3402 0
106 3404 0
106 -3399 3402 0
106 -3398 3401 0
c ((aux809 + aux811 - aux814)<=0)
3395 -3406 0
3396 -3407 0
3389 -3406 0
3389 3395 -3407 0
3389 3396 -3409 0
3390 -3407 0
3390 3395 -3409 0
3390 3396 -3411 0
c (0<=(aux809 + aux811 - aux814))
-3396 3411 0
-3395 3409 0
-3390 3411 0
-3390 -3396 3409 0
-3390 -3395 3407 0
-3389 3409 0
-3389 -3396 3407 0
-3389 -3395 3406 0
c ((SATLiteral(-375) - aux815 + SATLiteral(-645))<=0)
645 -3413 0
375 -3413 0
375 645 -3414 0
c (0<=(SATLiteral(-375) - aux815 + SATLiteral(-645)))
-645 3414 0
-375 3414 0
-375 -645 3413 0
c ((SATLiteral(-1050) - aux816 + SATLiteral(-915))<=0)
915 -3416 0
1050 -3416 0
1050 915 -3417 0
c (0<=(SATLiteral(-1050) - aux816 + SATLiteral(-915)))
-915 3417 0
-1050 3417 0
-1050 -915 3416 0
c (( - aux817 + SATLiteral(-780) + SATLiteral(-240))<=0)
240 -3419 0
780 -3419 0
780 240 -3420 0
c (0<=( - aux817 + SATLiteral(-780) + SATLiteral(-240)))
-240 3420 0
-780 3420 0
-780 -240 3419 0
c (( - aux818 + SATLiteral(-510) + SATLiteral(-1185))<=0)
1185 -3422 0
510 -3422 0
510 1185 -3423 0
c (0<=( - aux818 + SATLiteral(-510) + SATLiteral(-1185)))
-1185 3423 0
-510 3423 0
-510 -1185 3422 0
c ((aux818 - aux819 + SATLiteral(-105))<=0)
3422 -3425 0
3423 -3426 0
105 -3425 0
105 3422 -3426 0
105 3423 -3428 0
c (0<=(aux818 - aux819 + SATLiteral(-105)))
-3423 3428 0
-3422 3426 0
-105 3428 0
-105 -3423 3426 0
-105 -3422 3425 0
c ((aux815 + aux817 - aux820)<=0)
3419 -3430 0
3420 -3431 0
3413 -3430 0
3413 3419 -3431 0
3413 3420 -3433 0
3414 -3431 0
3414 3419 -3433 0
3414 3420 -3435 0
c (0<=(aux815 + aux817 - aux820))
-3420 3435 0
-3419 3433 0
-3414 3435 0
-3414 -3420 3433 0
-3414 -3419 3431 0
-3413 3433 0
-3413 -3420 3431 0
-3413 -3419 3430 0
c ((SATLiteral(377) - aux821 + SATLiteral(647))<=0)
-647 -3437 0
-377 -3437 0
-377 -647 -3438 0
c (0<=(SATLiteral(377) - aux821 + SATLiteral(647)))
647 3438 0
377 3438 0
377 647 3437 0
c ((SATLiteral(1052) - aux822 + SATLiteral(917))<=0)
-917 -3440 0
-1052 -3440 0
-1052 -917 -3441 0
c (0<=(SATLiteral(1052) - aux822 + SATLiteral(917)))
917 3441 0
1052 3441 0
1052 917 3440 0
c (( - aux823 + SATLiteral(782) + SATLiteral(242))<=0)
-242 -3443 0
-782 -3443 0
-782 -242 -3444 0
c (0<=( - aux823 + SATLiteral(782) + SATLiteral(242)))
242 3444 0
782 3444 0
782 242 3443 0
c (( - aux824 + SATLiteral(512) + SATLiteral(1187))<=0)
-1187 -3446 0
-512 -3446 0
-512 -1187 -3447 0
c (0<=( - aux824 + SATLiteral(512) + SATLiteral(1187)))
1187 3447 0
512 3447 0
512 1187 3446 0
c ((aux824 - aux825 + SATLiteral(107))<=0)
3446 -3449 0
3447 -3450 0
-107 -3449 0
-107 3446 -3450 0
-107 3447 -3452 0
c (0<=(aux824 - aux825 + SATLiteral(107)))
-3447 3452 0
-3446 3450 0
107 3452 0
107 -3447 3450 0
107 -3446 3449 0
c ((aux821 + aux823 - aux826)<=0)
3443 -3454 0
3444 -3455 0
3437 -3454 0
3437 3443 -3455 0
3437 3444 -3457 0
3438 -3455 0
3438 3443 -3457 0
3438 3444 -3459 0
c (0<=(aux821 + aux823 - aux826))
-3444 3459 0
-3443 3457 0
-3438 3459 0
-3438 -3444 3457 0
-3438 -3443 3455 0
-3437 3457 0
-3437 -3444 3455 0
-3437 -3443 3454 0
c ((SATLiteral(379) - aux827 + SATLiteral(649))<=0)
-649 -3461 0
-379 -3461 0
-379 -649 -3462 0
c (0<=(SATLiteral(379) - aux827 + SATLiteral(649)))
649 3462 0
379 3462 0
379 649 3461 0
c ((SATLiteral(1054) - aux828 + SATLiteral(919))<=0)
-919 -3464 0
-1054 -3464 0
-1054 -919 -3465 0
c (0<=(SATLiteral(1054) - aux828 + SATLiteral(919)))
919 3465 0
1054 3465 0
1054 919 3464 0
c (( - aux829 + SATLiteral(784) + SATLiteral(244))<=0)
-244 -3467 0
-784 -3467 0
-784 -244 -3468 0
c (0<=( - aux829 + SATLiteral(784) + SATLiteral(244)))
244 3468 0
784 3468 0
784 244 3467 0
c (( - aux830 + SATLiteral(514) + SATLiteral(1189))<=0)
-1189 -3470 0
-514 -3470 0
-514 -1189 -3471 0
c (0<=( - aux830 + SATLiteral(514) + SATLiteral(1189)))
1189 3471 0
514 3471 0
514 1189 3470 0
c ((aux830 - aux831 + SATLiteral(109))<=0)
3470 -3473 0
3471 -3474 0
-109 -3473 0
-109 3470 -3474 0
-109 3471 -3476 0
c (0<=(aux830 - aux831 + SATLiteral(109)))
-3471 3476 0
-3470 3474 0
109 3476 0
109 -3471 3474 0
109 -3470 3473 0
c ((aux827 + aux829 - aux832)<=0)
3467 -3478 0
3468 -3479 0
3461 -3478 0
3461 3467 -3479 0
3461 3468 -3481 0
3462 -3479 0
3462 3467 -3481 0
3462 3468 -3483 0
c (0<=(aux827 + aux829 - aux832))
-3468 3483 0
-3467 3481 0
-3462 3483 0
-3462 -3468 3481 0
-3462 -3467 3479 0
-3461 3481 0
-3461 -3468 3479 0
-3461 -3467 3478 0
c ((SATLiteral(381) - aux833 + SATLiteral(651))<=0)
-651 -3485 0
-381 -3485 0
-381 -651 -3486 0
c (0<=(SATLiteral(381) - aux833 + SATLiteral(651)))
651 3486 0
381 3486 0
381 651 3485 0
c ((SATLiteral(1056) - aux834 + SATLiteral(921))<=0)
-921 -3488 0
-1056 -3488 0
-1056 -921 -3489 0
c (0<=(SATLiteral(1056) - aux834 + SATLiteral(921)))
921 3489 0
1056 3489 0
1056 921 3488 0
c (( - aux835 + SATLiteral(786) + SATLiteral(246))<=0)
-246 -3491 0
-786 -3491 0
-786 -246 -3492 0
c (0<=( - aux835 + SATLiteral(786) + SATLiteral(246)))
246 3492 0
786 3492 0
786 246 3491 0
c (( - aux836 + SATLiteral(516) + SATLiteral(1191))<=0)
-1191 -3494 0
-516 -3494 0
-516 -1191 -3495 0
c (0<=( - aux836 + SATLiteral(516) + SATLiteral(1191)))
1191 3495 0
516 3495 0
516 1191 3494 0
c ((aux836 - aux837 + SATLiteral(111))<=0)
3494 -3497 0
3495 -3498 0
-111 -3497 0
-111 3494 -3498 0
-111 3495 -3500 0
c (0<=(aux836 - aux837 + SATLiteral(111)))
-3495 3500 0
-3494 3498 0
111 3500 0
111 -3495 3498 0
111 -3494 3497 0
c ((aux833 + aux835 - aux838)<=0)
3491 -3502 0
3492 -3503 0
3485 -3502 0
3485 3491 -3503 0
3485 3492 -3505 0
3486 -3503 0
3486 3491 -3505 0
3486 3492 -3507 0
c (0<=(aux833 + aux835 - aux838))
-3492 3507 0
-3491 3505 0
-3486 3507 0
-3486 -3492 3505 0
-3486 -3491 3503 0
-3485 3505 0
-3485 -3492 3503 0
-3485 -3491 3502 0
c ((SATLiteral(383) - aux839 + SATLiteral(653))<=0)
-653 -3509 0
-383 -3509 0
-383 -653 -3510 0
c (0<=(SATLiteral(383) - aux839 + SATLiteral(653)))
653 3510 0
383 3510 0
383 653 3509 0
c ((SATLiteral(1058) - aux840 + SATLiteral(923))<=0)
-923 -3512 0
-1058 -3512 0
-1058 -923 -3513 0
c (0<=(SATLiteral(1058) - aux840 + SATLiteral(923)))
923 3513 0
1058 3513 0
1058 923 3512 0
c (( - aux841 + SATLiteral(788) + SATLiteral(248))<=0)
-248 -3515 0
-788 -3515 0
-788 -248 -3516 0
c (0<=( - aux841 + SATLiteral(788) + SATLiteral(248)))
248 3516 0
788 3516 0
788 248 3515 0
c (( - aux842 + SATLiteral(518) + SATLiteral(1193))<=0)
-1193 -3518 0
-518 -3518 0
-518 -1193 -3519 0
c (0<=( - aux842 + SATLiteral(518) + SATLiteral(1193)))
1193 3519 0
518 3519 0
518 1193 3518 0
c ((aux842 - aux843 + SATLiteral(113))<=0)
3518 -3521 0
3519 -3522 0
-113 -3521 0
-113 3518 -3522 0
-113 3519 -3524 0
c (0<=(aux842 - aux843 + SATLiteral(113)))
-3519 3524 0
-3518 3522 0
113 3524 0
113 -3519 3522 0
113 -3518 3521 0
c ((aux839 + aux841 - aux844)<=0)
3515 -3526 0
3516 -3527 0
3509 -3526 0
3509 3515 -3527 0
3509 3516 -3529 0
3510 -3527 0
3510 3515 -3529 0
3510 3516 -3531 0
c (0<=(aux839 + aux841 - aux844))
-3516 3531 0
-3515 3529 0
-3510 3531 0
-3510 -3516 3529 0
-3510 -3515 3527 0
-3509 3529 0
-3509 -3516 3527 0
-3509 -3515 3526 0
c ((SATLiteral(385) - aux845 + SATLiteral(655))<=0)
-655 -3533 0
-385 -3533 0
-385 -655 -3534 0
c (0<=(SATLiteral(385) - aux845 + SATLiteral(655)))
655 3534 0
385 3534 0
385 655 3533 0
c ((SATLiteral(1060) - aux846 + SATLiteral(925))<=0)
-925 -3536 0
-1060 -3536 0
-1060 -925 -3537 0
c (0<=(SATLiteral(1060) - aux846 + SATLiteral(925)))
925 3537 0
1060 3537 0
1060 925 3536 0
c (( - aux847 + SATLiteral(790) + SATLiteral(250))<=0)
-250 -3539 0
-790 -3539 0
-790 -250 -3540 0
c (0<=( - aux847 + SATLiteral(790) + SATLiteral(250)))
250 3540 0
790 3540 0
790 250 3539 0
c (( - aux848 + SATLiteral(520) + SATLiteral(1195))<=0)
-1195 -3542 0
-520 -3542 0
-520 -1195 -3543 0
c (0<=( - aux848 + SATLiteral(520) + SATLiteral(1195)))
1195 3543 0
520 3543 0
520 1195 3542 0
c ((aux848 - aux849 + SATLiteral(115))<=0)
3542 -3545 0
3543 -3546 0
-115 -3545 0
-115 3542 -3546 0
-115 3543 -3548 0
c (0<=(aux848 - aux849 + SATLiteral(115)))
-3543 3548 0
-3542 3546 0
115 3548 0
115 -3543 3546 0
115 -3542 3545 0
c ((aux845 + aux847 - aux850)<=0)
3539 -3550 0
3540 -3551 0
3533 -3550 0
3533 3539 -3551 0
3533 3540 -3553 0
3534 -3551 0
3534 3539 -3553 0
3534 3540 -3555 0
c (0<=(aux845 + aux847 - aux850))
-3540 3555 0
-3539 3553 0
-3534 3555 0
-3534 -3540 3553 0
-3534 -3539 3551 0
-3533 3553 0
-3533 -3540 3551 0
-3533 -3539 3550 0
c ((SATLiteral(387) - aux851 + SATLiteral(657))<=0)
-657 -3557 0
-387 -3557 0
-387 -657 -3558 0
c (0<=(SATLiteral(387) - aux851 + SATLiteral(657)))
657 3558 0
387 3558 0
387 657 3557 0
c ((SATLiteral(1062) - aux852 + SATLiteral(927))<=0)
-927 -3560 0
-1062 -3560 0
-1062 -927 -3561 0
c (0<=(SATLiteral(1062) - aux852 + SATLiteral(927)))
927 3561 0
1062 3561 0
1062 927 3560 0
c (( - aux853 + SATLiteral(792) + SATLiteral(252))<=0)
-252 -3563 0
-792 -3563 0
-792 -252 -3564 0
c (0<=( - aux853 + SATLiteral(792) + SATLiteral(252)))
252 3564 0
792 3564 0
792 252 3563 0
c (( - aux854 + SATLiteral(522) + SATLiteral(1197))<=0)
-1197 -3566 0
-522 -3566 0
-522 -1197 -3567 0
c (0<=( - aux854 + SATLiteral(522) + SATLiteral(1197)))
1197 3567 0
522 3567 0
522 1197 3566 0
c ((aux854 - aux855 + SATLiteral(117))<=0)
3566 -3569 0
3567 -3570 0
-117 -3569 0
-117 3566 -3570 0
-117 3567 -3572 0
c (0<=(aux854 - aux855 + SATLiteral(117)))
-3567 3572 0
-3566 3570 0
117 3572 0
117 -3567 3570 0
117 -3566 3569 0
c ((aux851 + aux853 - aux856)<=0)
3563 -3574 0
3564 -3575 0
3557 -3574 0
3557 3563 -3575 0
3557 3564 -3577 0
3558 -3575 0
3558 3563 -3577 0
3558 3564 -3579 0
c (0<=(aux851 + aux853 - aux856))
-3564 3579 0
-3563 3577 0
-3558 3579 0
-3558 -3564 3577 0
-3558 -3563 3575 0
-3557 3577 0
-3557 -3564 3575 0
-3557 -3563 3574 0
c ((SATLiteral(389) - aux857 + SATLiteral(659))<=0)
-659 -3581 0
-389 -3581 0
-389 -659 -3582 0
c (0<=(SATLiteral(389) - aux857 + SATLiteral(659)))
659 3582 0
389 3582 0
389 659 3581 0
c ((SATLiteral(1064) - aux858 + SATLiteral(929))<=0)
-929 -3584 0
-1064 -3584 0
-1064 -929 -3585 0
c (0<=(SATLiteral(1064) - aux858 + SATLiteral(929)))
929 3585 0
1064 3585 0
1064 929 3584 0
c (( - aux859 + SATLiteral(794) + SATLiteral(254))<=0)
-254 -3587 0
-794 -3587 0
-794 -254 -3588 0
c (0<=( - aux859 + SATLiteral(794) + SATLiteral(254)))
254 3588 0
794 3588 0
794 254 3587 0
c (( - aux860 + SATLiteral(524) + SATLiteral(1199))<=0)
-1199 -3590 0
-524 -3590 0
-524 -1199 -3591 0
c (0<=( - aux860 + SATLiteral(524) + SATLiteral(1199)))
1199 3591 0
524 3591 0
524 1199 3590 0
c ((aux860 - aux861 + SATLiteral(119))<=0)
3590 -3593 0
3591 -3594 0
-119 -3593 0
-119 3590 -3594 0
-119 3591 -3596 0
c (0<=(aux860 - aux861 + SATLiteral(119)))
-3591 3596 0
-3590 3594 0
119 3596 0
119 -3591 3594 0
119 -3590 3593 0
c ((aux857 + aux859 - aux862)<=0)
3587 -3598 0
3588 -3599 0
3581 -3598 0
3581 3587 -3599 0
3581 3588 -3601 0
3582 -3599 0
3582 3587 -3601 0
3582 3588 -3603 0
c (0<=(aux857 + aux859 - aux862))
-3588 3603 0
-3587 3601 0
-3582 3603 0
-3582 -3588 3601 0
-3582 -3587 3599 0
-3581 3601 0
-3581 -3588 3599 0
-3581 -3587 3598 0
c ((SATLiteral(391) - aux863 + SATLiteral(661))<=0)
-661 -3605 0
-391 -3605 0
-391 -661 -3606 0
c (0<=(SATLiteral(391) - aux863 + SATLiteral(661)))
661 3606 0
391 3606 0
391 661 3605 0
c ((SATLiteral(1066) - aux864 + SATLiteral(931))<=0)
-931 -3608 0
-1066 -3608 0
-1066 -931 -3609 0
c (0<=(SATLiteral(1066) - aux864 + SATLiteral(931)))
931 3609 0
1066 3609 0
1066 931 3608 0
c (( - aux865 + SATLiteral(796) + SATLiteral(256))<=0)
-256 -3611 0
-796 -3611 0
-796 -256 -3612 0
c (0<=( - aux865 + SATLiteral(796) + SATLiteral(256)))
256 3612 0
796 3612 0
796 256 3611 0
c (( - aux866 + SATLiteral(526) + SATLiteral(1201))<=0)
-1201 -3614 0
-526 -3614 0
-526 -1201 -3615 0
c (0<=( - aux866 + SATLiteral(526) + SATLiteral(1201)))
1201 3615 0
526 3615 0
526 1201 3614 0
c ((aux866 - aux867 + SATLiteral(121))<=0)
3614 -3617 0
3615 -3618 0
-121 -3617 0
-121 3614 -3618 0
-121 3615 -3620 0
c (0<=(aux866 - aux867 + SATLiteral(121)))
-3615 3620 0
-3614 3618 0
121 3620 0
121 -3615 3618 0
121 -3614 3617 0
c ((aux863 + aux865 - aux868)<=0)
3611 -3622 0
3612 -3623 0
3605 -3622 0
3605 3611 -3623 0
3605 3612 -3625 0
3606 -3623 0
3606 3611 -3625 0
3606 3612 -3627 0
c (0<=(aux863 + aux865 - aux868))
-3612 3627 0
-3611 3625 0
-3606 3627 0
-3606 -3612 3625 0
-3606 -3611 3623 0
-3605 3625 0
-3605 -3612 3623 0
-3605 -3611 3622 0
c ((SATLiteral(-390) - aux869 + SATLiteral(-660))<=0)
660 -3629 0
390 -3629 0
390 660 -3630 0
c (0<=(SATLiteral(-390) - aux869 + SATLiteral(-660)))
-660 3630 0
-390 3630 0
-390 -660 3629 0
c ((SATLiteral(-1065) - aux870 + SATLiteral(-930))<=0)
930 -3632 0
1065 -3632 0
1065 930 -3633 0
c (0<=(SATLiteral(-1065) - aux870 + SATLiteral(-930)))
-930 3633 0
-1065 3633 0
-1065 -930 3632 0
c (( - aux871 + SATLiteral(-795) + SATLiteral(-255))<=0)
255 -3635 0
795 -3635 0
795 255 -3636 0
c (0<=( - aux871 + SATLiteral(-795) + SATLiteral(-255)))
-255 3636 0
-795 3636 0
-795 -255 3635 0
c (( - aux872 + SATLiteral(-525) + SATLiteral(-1200))<=0)
1200 -3638 0
525 -3638 0
525 1200 -3639 0
c (0<=( - aux872 + SATLiteral(-525) + SATLiteral(-1200)))
-1200 3639 0
-525 3639 0
-525 -1200 3638 0
c ((aux872 - aux873 + SATLiteral(-120))<=0)
3638 -3641 0
3639 -3642 0
120 -3641 0
120 3638 -3642 0
120 3639 -3644 0
c (0<=(aux872 - aux873 + SATLiteral(-120)))
-3639 3644 0
-3638 3642 0
-120 3644 0
-120 -3639 3642 0
-120 -3638 3641 0
c ((aux869 + aux871 - aux874)<=0)
3635 -3646 0
3636 -3647 0
3629 -3646 0
3629 3635 -3647 0
3629 3636 -3649 0
3630 -3647 0
3630 3635 -3649 0
3630 3636 -3651 0
c (0<=(aux869 + aux871 - aux874))
-3636 3651 0
-3635 3649 0
-3630 3651 0
-3630 -3636 3649 0
-3630 -3635 3647 0
-3629 3649 0
-3629 -3636 3647 0
-3629 -3635 3646 0
c ((SATLiteral(392) - aux875 + SATLiteral(662))<=0)
-662 -3653 0
-392 -3653 0
-392 -662 -3654 0
c (0<=(SATLiteral(392) - aux875 + SATLiteral(662)))
662 3654 0
392 3654 0
392 662 3653 0
c ((SATLiteral(1067) - aux876 + SATLiteral(932))<=0)
-932 -3656 0
-1067 -3656 0
-1067 -932 -3657 0
c (0<=(SATLiteral(1067) - aux876 + SATLiteral(932)))
932 3657 0
1067 3657 0
1067 932 3656 0
c (( - aux877 + SATLiteral(797) + SATLiteral(257))<=0)
-257 -3659 0
-797 -3659 0
-797 -257 -3660 0
c (0<=( - aux877 + SATLiteral(797) + SATLiteral(257)))
257 3660 0
797 3660 0
797 257 3659 0
c (( - aux878 + SATLiteral(527) + SATLiteral(1202))<=0)
-1202 -3662 0
-527 -3662 0
-527 -1202 -3663 0
c (0<=( - aux878 + SATLiteral(527) + SATLiteral(1202)))
1202 3663 0
527 3663 0
527 1202 3662 0
c ((aux878 - aux879 + SATLiteral(122))<=0)
3662 -3665 0
3663 -3666 0
-122 -3665 0
-122 3662 -3666 0
-122 3663 -3668 0
c (0<=(aux878 - aux879 + SATLiteral(122)))
-3663 3668 0
-3662 3666 0
122 3668 0
122 -3663 3666 0
122 -3662 3665 0
c ((aux875 + aux877 - aux880)<=0)
3659 -3670 0
3660 -3671 0
3653 -3670 0
3653 3659 -3671 0
3653 3660 -3673 0
3654 -3671 0
3654 3659 -3673 0
3654 3660 -3675 0
c (0<=(aux875 + aux877 - aux880))
-3660 3675 0
-3659 3673 0
-3654 3675 0
-3654 -3660 3673 0
-3654 -3659 3671 0
-3653 3673 0
-3653 -3660 3671 0
-3653 -3659 3670 0
c ((SATLiteral(394) - aux881 + SATLiteral(664))<=0)
-664 -3677 0
-394 -3677 0
-394 -664 -3678 0
c (0<=(SATLiteral(394) - aux881 + SATLiteral(664)))
664 3678 0
394 3678 0
394 664 3677 0
c ((SATLiteral(1069) - aux882 + SATLiteral(934))<=0)
-934 -3680 0
-1069 -3680 0
-1069 -934 -3681 0
c (0<=(SATLiteral(1069) - aux882 + SATLiteral(934)))
934 3681 0
1069 3681 0
1069 934 3680 0
c (( - aux883 + SATLiteral(799) + SATLiteral(259))<=0)
-259 -3683 0
-799 -3683 0
-799 -259 -3684 0
c (0<=( - aux883 + SATLiteral(799) + SATLiteral(259)))
259 3684 0
799 3684 0
799 259 3683 0
c (( - aux884 + SATLiteral(529) + SATLiteral(1204))<=0)
-1204 -3686 0
-529 -3686 0
-529 -1204 -3687 0
c (0<=( - aux884 + SATLiteral(529) + SATLiteral(1204)))
1204 3687 0
529 3687 0
529 1204 3686 0
c ((aux884 - aux885 + SATLiteral(124))<=0)
3686 -3689 0
3687 -3690 0
-124 -3689 0
-124 3686 -3690 0
-124 3687 -3692 0
c (0<=(aux884 - aux885 + SATLiteral(124)))
-3687 3692 0
-3686 3690 0
124 3692 0
124 -3687 3690 0
124 -3686 3689 0
c ((aux881 + aux883 - aux886)<=0)
3683 -3694 0
3684 -3695 0
3677 -3694 0
3677 3683 -3695 0
3677 3684 -3697 0
3678 -3695 0
3678 3683 -3697 0
3678 3684 -3699 0
c (0<=(aux881 + aux883 - aux886))
-3684 3699 0
-3683 3697 0
-3678 3699 0
-3678 -3684 3697 0
-3678 -3683 3695 0
-3677 3697 0
-3677 -3684 3695 0
-3677 -3683 3694 0
c ((SATLiteral(396) - aux887 + SATLiteral(666))<=0)
-666 -3701 0
-396 -3701 0
-396 -666 -3702 0
c (0<=(SATLiteral(396) - aux887 + SATLiteral(666)))
666 3702 0
396 3702 0
396 666 3701 0
c ((SATLiteral(1071) - aux888 + SATLiteral(936))<=0)
-936 -3704 0
-1071 -3704 0
-1071 -936 -3705 0
c (0<=(SATLiteral(1071) - aux888 + SATLiteral(936)))
936 3705 0
1071 3705 0
1071 936 3704 0
c (( - aux889 + SATLiteral(801) + SATLiteral(261))<=0)
-261 -3707 0
-801 -3707 0
-801 -261 -3708 0
c (0<=( - aux889 + SATLiteral(801) + SATLiteral(261)))
261 3708 0
801 3708 0
801 261 3707 0
c (( - aux890 + SATLiteral(531) + SATLiteral(1206))<=0)
-1206 -3710 0
-531 -3710 0
-531 -1206 -3711 0
c (0<=( - aux890 + SATLiteral(531) + SATLiteral(1206)))
1206 3711 0
531 3711 0
531 1206 3710 0
c ((aux890 - aux891 + SATLiteral(126))<=0)
3710 -3713 0
3711 -3714 0
-126 -3713 0
-126 3710 -3714 0
-126 3711 -3716 0
c (0<=(aux890 - aux891 + SATLiteral(126)))
-3711 3716 0
-3710 3714 0
126 3716 0
126 -3711 3714 0
126 -3710 3713 0
c ((aux887 + aux889 - aux892)<=0)
3707 -3718 0
3708 -3719 0
3701 -3718 0
3701 3707 -3719 0
3701 3708 -3721 0
3702 -3719 0
3702 3707 -3721 0
3702 3708 -3723 0
c (0<=(aux887 + aux889 - aux892))
-3708 3723 0
-3707 3721 0
-3702 3723 0
-3702 -3708 3721 0
-3702 -3707 3719 0
-3701 3721 0
-3701 -3708 3719 0
-3701 -3707 3718 0
c ((SATLiteral(398) - aux893 + SATLiteral(668))<=0)
-668 -3725 0
-398 -3725 0
-398 -668 -3726 0
c (0<=(SATLiteral(398) - aux893 + SATLiteral(668)))
668 3726 0
398 3726 0
398 668 3725 0
c ((SATLiteral(1073) - aux894 + SATLiteral(938))<=0)
-938 -3728 0
-1073 -3728 0
-1073 -938 -3729 0
c (0<=(SATLiteral(1073) - aux894 + SATLiteral(938)))
938 3729 0
1073 3729 0
1073 938 3728 0
c (( - aux895 + SATLiteral(803) + SATLiteral(263))<=0)
-263 -3731 0
-803 -3731 0
-803 -263 -3732 0
c (0<=( - aux895 + SATLiteral(803) + SATLiteral(263)))
263 3732 0
803 3732 0
803 263 3731 0
c (( - aux896 + SATLiteral(533) + SATLiteral(1208))<=0)
-1208 -3734 0
-533 -3734 0
-533 -1208 -3735 0
c (0<=( - aux896 + SATLiteral(533) + SATLiteral(1208)))
1208 3735 0
533 3735 0
533 1208 3734 0
c ((aux896 - aux897 + SATLiteral(128))<=0)
3734 -3737 0
3735 -3738 0
-128 -3737 0
-128 3734 -3738 0
-128 3735 -3740 0
c (0<=(aux896 - aux897 + SATLiteral(128)))
-3735 3740 0
-3734 3738 0
128 3740 0
128 -3735 3738 0
128 -3734 3737 0
c ((aux893 + aux895 - aux898)<=0)
3731 -3742 0
3732 -3743 0
3725 -3742 0
3725 3731 -3743 0
3725 3732 -3745 0
3726 -3743 0
3726 3731 -3745 0
3726 3732 -3747 0
c (0<=(aux893 + aux895 - aux898))
-3732 3747 0
-3731 3745 0
-3726 3747 0
-3726 -3732 3745 0
-3726 -3731 3743 0
-3725 3745 0
-3725 -3732 3743 0
-3725 -3731 3742 0
c ((SATLiteral(400) - aux899 + SATLiteral(670))<=0)
-670 -3749 0
-400 -3749 0
-400 -670 -3750 0
c (0<=(SATLiteral(400) - aux899 + SATLiteral(670)))
670 3750 0
400 3750 0
400 670 3749 0
c ((SATLiteral(1075) - aux900 + SATLiteral(940))<=0)
-940 -3752 0
-1075 -3752 0
-1075 -940 -3753 0
c (0<=(SATLiteral(1075) - aux900 + SATLiteral(940)))
940 3753 0
1075 3753 0
1075 940 3752 0
c (( - aux901 + SATLiteral(805) + SATLiteral(265))<=0)
-265 -3755 0
-805 -3755 0
-805 -265 -3756 0
c (0<=( - aux901 + SATLiteral(805) + SATLiteral(265)))
265 3756 0
805 3756 0
805 265 3755 0
c (( - aux902 + SATLiteral(535) + SATLiteral(1210))<=0)
-1210 -3758 0
-535 -3758 0
-535 -1210 -3759 0
c (0<=( - aux902 + SATLiteral(535) + SATLiteral(1210)))
1210 3759 0
535 3759 0
535 1210 3758 0
c ((aux902 - aux903 + SATLiteral(130))<=0)
3758 -3761 0
3759 -3762 0
-130 -3761 0
-130 3758 -3762 0
-130 3759 -3764 0
c (0<=(aux902 - aux903 + SATLiteral(130)))
-3759 3764 0
-3758 3762 0
130 3764 0
130 -3759 3762 0
130 -3758 3761 0
c ((aux899 + aux901 - aux904)<=0)
3755 -3766 0
3756 -3767 0
3749 -3766 0
3749 3755 -3767 0
3749 3756 -3769 0
3750 -3767 0
3750 3755 -3769 0
3750 3756 -3771 0
c (0<=(aux899 + aux901 - aux904))
-3756 3771 0
-3755 3769 0
-3750 3771 0
-3750 -3756 3769 0
-3750 -3755 3767 0
-3749 3769 0
-3749 -3756 3767 0
-3749 -3755 3766 0
c ((SATLiteral(402) - aux905 + SATLiteral(672))<=0)
-672 -3773 0
-402 -3773 0
-402 -672 -3774 0
c (0<=(SATLiteral(402) - aux905 + SATLiteral(672)))
672 3774 0
402 3774 0
402 672 3773 0
c ((SATLiteral(1077) - aux906 + SATLiteral(942))<=0)
-942 -3776 0
-1077 -3776 0
-1077 -942 -3777 0
c (0<=(SATLiteral(1077) - aux906 + SATLiteral(942)))
942 3777 0
1077 3777 0
1077 942 3776 0
c (( - aux907 + SATLiteral(807) + SATLiteral(267))<=0)
-267 -3779 0
-807 -3779 0
-807 -267 -3780 0
c (0<=( - aux907 + SATLiteral(807) + SATLiteral(267)))
267 3780 0
807 3780 0
807 267 3779 0
c (( - aux908 + SATLiteral(537) + SATLiteral(1212))<=0)
-1212 -3782 0
-537 -3782 0
-537 -1212 -3783 0
c (0<=( - aux908 + SATLiteral(537) + SATLiteral(1212)))
1212 3783 0
537 3783 0
537 1212 3782 0
c ((aux908 - aux909 + SATLiteral(132))<=0)
3782 -3785 0
3783 -3786 0
-132 -3785 0
-132 3782 -3786 0
-132 3783 -3788 0
c (0<=(aux908 - aux909 + SATLiteral(132)))
-3783 3788 0
-3782 3786 0
132 3788 0
132 -3783 3786 0
132 -3782 3785 0
c ((aux905 + aux907 - aux910)<=0)
3779 -3790 0
3780 -3791 0
3773 -3790 0
3773 3779 -3791 0
3773 3780 -3793 0
3774 -3791 0
3774 3779 -3793 0
3774 3780 -3795 0
c (0<=(aux905 + aux907 - aux910))
-3780 3795 0
-3779 3793 0
-3774 3795 0
-3774 -3780 3793 0
-3774 -3779 3791 0
-3773 3793 0
-3773 -3780 3791 0
-3773 -3779 3790 0
c ((SATLiteral(404) - aux911 + SATLiteral(674))<=0)
-674 -3797 0
-404 -3797 0
-404 -674 -3798 0
c (0<=(SATLiteral(404) - aux911 + SATLiteral(674)))
674 3798 0
404 3798 0
404 674 3797 0
c ((SATLiteral(1079) - aux912 + SATLiteral(944))<=0)
-944 -3800 0
-1079 -3800 0
-1079 -944 -3801 0
c (0<=(SATLiteral(1079) - aux912 + SATLiteral(944)))
944 3801 0
1079 3801 0
1079 944 3800 0
c (( - aux913 + SATLiteral(809) + SATLiteral(269))<=0)
-269 -3803 0
-809 -3803 0
-809 -269 -3804 0
c (0<=( - aux913 + SATLiteral(809) + SATLiteral(269)))
269 3804 0
809 3804 0
809 269 3803 0
c (( - aux914 + SATLiteral(539) + SATLiteral(1214))<=0)
-1214 -3806 0
-539 -3806 0
-539 -1214 -3807 0
c (0<=( - aux914 + SATLiteral(539) + SATLiteral(1214)))
1214 3807 0
539 3807 0
539 1214 3806 0
c ((aux914 - aux915 + SATLiteral(134))<=0)
3806 -3809 0
3807 -3810 0
-134 -3809 0
-134 3806 -3810 0
-134 3807 -3812 0
c (0<=(aux914 - aux915 + SATLiteral(134)))
-3807 3812 0
-3806 3810 0
134 3812 0
134 -3807 3810 0
134 -3806 3809 0
c ((aux911 + aux913 - aux916)<=0)
3803 -3814 0
3804 -3815 0
3797 -3814 0
3797 3803 -3815 0
3797 3804 -3817 0
3798 -3815 0
3798 3803 -3817 0
3798 3804 -3819 0
c (0<=(aux911 + aux913 - aux916))
-3804 3819 0
-3803 3817 0
-3798 3819 0
-3798 -3804 3817 0
-3798 -3803 3815 0
-3797 3817 0
-3797 -3804 3815 0
-3797 -3803 3814 0
c ((SATLiteral(406) - aux917 + SATLiteral(676))<=0)
-676 -3821 0
-406 -3821 0
-406 -676 -3822 0
c (0<=(SATLiteral(406) - aux917 + SATLiteral(676)))
676 3822 0
406 3822 0
406 676 3821 0
c ((SATLiteral(1081) - aux918 + SATLiteral(946))<=0)
-946 -3824 0
-1081 -3824 0
-1081 -946 -3825 0
c (0<=(SATLiteral(1081) - aux918 + SATLiteral(946)))
946 3825 0
1081 3825 0
1081 946 3824 0
c (( - aux919 + SATLiteral(811) + SATLiteral(271))<=0)
-271 -3827 0
-811 -3827 0
-811 -271 -3828 0
c (0<=( - aux919 + SATLiteral(811) + SATLiteral(271)))
271 3828 0
811 3828 0
811 271 3827 0
c (( - aux920 + SATLiteral(541) + SATLiteral(1216))<=0)
-1216 -3830 0
-541 -3830 0
-541 -1216 -3831 0
c (0<=( - aux920 + SATLiteral(541) + SATLiteral(1216)))
1216 3831 0
541 3831 0
541 1216 3830 0
c ((aux920 - aux921 + SATLiteral(136))<=0)
3830 -3833 0
3831 -3834 0
-136 -3833 0
-136 3830 -3834 0
-136 3831 -3836 0
c (0<=(aux920 - aux921 + SATLiteral(136)))
-3831 3836 0
-3830 3834 0
136 3836 0
136 -3831 3834 0
136 -3830 3833 0
c ((aux917 + aux919 - aux922)<=0)
3827 -3838 0
3828 -3839 0
3821 -3838 0
3821 3827 -3839 0
3821 3828 -3841 0
3822 -3839 0
3822 3827 -3841 0
3822 3828 -3843 0
c (0<=(aux917 + aux919 - aux922))
-3828 3843 0
-3827 3841 0
-3822 3843 0
-3822 -3828 3841 0
-3822 -3827 3839 0
-3821 3841 0
-3821 -3828 3839 0
-3821 -3827 3838 0
c ((SATLiteral(-405) - aux923 + SATLiteral(-675))<=0)
675 -3845 0
405 -3845 0
405 675 -3846 0
c (0<=(SATLiteral(-405) - aux923 + SATLiteral(-675)))
-675 3846 0
-405 3846 0
-405 -675 3845 0
c ((SATLiteral(-1080) - aux924 + SATLiteral(-945))<=0)
945 -3848 0
1080 -3848 0
1080 945 -3849 0
c (0<=(SATLiteral(-1080) - aux924 + SATLiteral(-945)))
-945 3849 0
-1080 3849 0
-1080 -945 3848 0
c (( - aux925 + SATLiteral(-810) + SATLiteral(-270))<=0)
270 -3851 0
810 -3851 0
810 270 -3852 0
c (0<=( - aux925 + SATLiteral(-810) + SATLiteral(-270)))
-270 3852 0
-810 3852 0
-810 -270 3851 0
c (( - aux926 + SATLiteral(-540) + SATLiteral(-1215))<=0)
1215 -3854 0
540 -3854 0
540 1215 -3855 0
c (0<=( - aux926 + SATLiteral(-540) + SATLiteral(-1215)))
-1215 3855 0
-540 3855 0
-540 -1215 3854 0
c ((aux926 - aux927 + SATLiteral(-135))<=0)
3854 -3857 0
3855 -3858 0
135 -3857 0
135 3854 -3858 0
135 3855 -3860 0
c (0<=(aux926 - aux927 + SATLiteral(-135)))
-3855 3860 0
-3854 3858 0
-135 3860 0
-135 -3855 3858 0
-135 -3854 3857 0
c ((aux923 + aux925 - aux928)<=0)
3851 -3862 0
3852 -3863 0
3845 -3862 0
3845 3851 -3863 0
3845 3852 -3865 0
3846 -3863 0
3846 3851 -3865 0
3846 3852 -3867 0
c (0<=(aux923 + aux925 - aux928))
-3852 3867 0
-3851 3865 0
-3846 3867 0
-3846 -3852 3865 0
-3846 -3851 3863 0
-3845 3865 0
-3845 -3852 3863 0
-3845 -3851 3862 0
c (( - aux929 + SATLiteral(2) + SATLiteral(122))<=0)
-122 -3869 0
-2 -3869 0
-2 -122 -3870 0
c (0<=( - aux929 + SATLiteral(2) + SATLiteral(122)))
122 3870 0
2 3870 0
2 122 3869 0
c (( - aux930 + SATLiteral(17) + SATLiteral(107))<=0)
-107 -3872 0
-17 -3872 0
-17 -107 -3873 0
c (0<=( - aux930 + SATLiteral(17) + SATLiteral(107)))
107 3873 0
17 3873 0
17 107 3872 0
c (( - aux931 + SATLiteral(47) + SATLiteral(92))<=0)
-92 -3875 0
-47 -3875 0
-47 -92 -3876 0
c (0<=( - aux931 + SATLiteral(47) + SATLiteral(92)))
92 3876 0
47 3876 0
47 92 3875 0
c (( - aux932 + SATLiteral(62) + SATLiteral(77))<=0)
-77 -3878 0
-62 -3878 0
-62 -77 -3879 0
c (0<=( - aux932 + SATLiteral(62) + SATLiteral(77)))
77 3879 0
62 3879 0
62 77 3878 0
c ((aux932 - aux933 + SATLiteral(32))<=0)
3878 -3881 0
3879 -3882 0
-32 -3881 0
-32 3878 -3882 0
-32 3879 -3884 0
c (0<=(aux932 - aux933 + SATLiteral(32)))
-3879 3884 0
-3878 3882 0
32 3884 0
32 -3879 3882 0
32 -3878 3881 0
c ((aux929 + aux931 - aux934)<=0)
3875 -3886 0
3876 -3887 0
3869 -3886 0
3869 3875 -3887 0
3869 3876 -3889 0
3870 -3887 0
3870 3875 -3889 0
3870 3876 -3891 0
c (0<=(aux929 + aux931 - aux934))
-3876 3891 0
-3875 3889 0
-3870 3891 0
-3870 -3876 3889 0
-3870 -3875 3887 0
-3869 3889 0
-3869 -3876 3887 0
-3869 -3875 3886 0
c (( - aux935 + SATLiteral(4) + SATLiteral(124))<=0)
-124 -3893 0
-4 -3893 0
-4 -124 -3894 0
c (0<=( - aux935 + SATLiteral(4) + SATLiteral(124)))
124 3894 0
4 3894 0
4 124 3893 0
c (( - aux936 + SATLiteral(19) + SATLiteral(109))<=0)
-109 -3896 0
-19 -3896 0
-19 -109 -3897 0
c (0<=( - aux936 + SATLiteral(19) + SATLiteral(109)))
109 3897 0
19 3897 0
19 109 3896 0
c (( - aux937 + SATLiteral(49) + SATLiteral(94))<=0)
-94 -3899 0
-49 -3899 0
-49 -94 -3900 0
c (0<=( - aux937 + SATLiteral(49) + SATLiteral(94)))
94 3900 0
49 3900 0
49 94 3899 0
c (( - aux938 + SATLiteral(64) + SATLiteral(79))<=0)
-79 -3902 0
-64 -3902 0
-64 -79 -3903 0
c (0<=( - aux938 + SATLiteral(64) + SATLiteral(79)))
79 3903 0
64 3903 0
64 79 3902 0
c ((aux938 - aux939 + SATLiteral(34))<=0)
3902 -3905 0
3903 -3906 0
-34 -3905 0
-34 3902 -3906 0
-34 3903 -3908 0
c (0<=(aux938 - aux939 + SATLiteral(34)))
-3903 3908 0
-3902 3906 0
34 3908 0
34 -3903 3906 0
34 -3902 3905 0
c ((aux935 + aux937 - aux940)<=0)
3899 -3910 0
3900 -3911 0
3893 -3910 0
3893 3899 -3911 0
3893 3900 -3913 0
3894 -3911 0
3894 3899 -3913 0
3894 3900 -3915 0
c (0<=(aux935 + aux937 - aux940))
-3900 3915 0
-3899 3913 0
-3894 3915 0
-3894 -3900 3913 0
-3894 -3899 3911 0
-3893 3913 0
-3893 -3900 3911 0
-3893 -3899 3910 0
c (( - aux941 + SATLiteral(6) + SATLiteral(126))<=0)
-126 -3917 0
-6 -3917 0
-6 -126 -3918 0
c (0<=( - aux941 + SATLiteral(6) + SATLiteral(126)))
126 3918 0
6 3918 0
6 126 3917 0
c (( - aux942 + SATLiteral(21) + SATLiteral(111))<=0)
-111 -3920 0
-21 -3920 0
-21 -111 -3921 0
c (0<=( - aux942 + SATLiteral(21) + SATLiteral(111)))
111 3921 0
21 3921 0
21 111 3920 0
c (( - aux943 + SATLiteral(51) + SATLiteral(96))<=0)
-96 -3923 0
-51 -3923 0
-51 -96 -3924 0
c (0<=( - aux943 + SATLiteral(51) + SATLiteral(96)))
96 3924 0
51 3924 0
51 96 3923 0
c (( - aux944 + SATLiteral(66) + SATLiteral(81))<=0)
-81 -3926 0
-66 -3926 0
-66 -81 -3927 0
c (0<=( - aux944 + SATLiteral(66) + SATLiteral(81)))
81 3927 0
66 3927 0
66 81 3926 0
c ((aux944 - aux945 + SATLiteral(36))<=0)
3926 -3929 0
3927 -3930 0
-36 -3929 0
-36 3926 -3930 0
-36 3927 -3932 0
c (0<=(aux944 - aux945 + SATLiteral(36)))
-3927 3932 0
-3926 3930 0
36 3932 0
36 -3927 3930 0
36 -3926 3929 0
c ((aux941 + aux943 - aux946)<=0)
3923 -3934 0
3924 -3935 0
3917 -3934 0
3917 3923 -3935 0
3917 3924 -3937 0
3918 -3935 0
3918 3923 -3937 0
3918 3924 -3939 0
c (0<=(aux941 + aux943 - aux946))
-3924 3939 0
-3923 3937 0
-3918 3939 0
-3918 -3924 3937 0
-3918 -3923 3935 0
-3917 3937 0
-3917 -3924 3935 0
-3917 -3923 3934 0
c (( - aux947 + SATLiteral(8) + SATLiteral(128))<=0)
-128 -3941 0
-8 -3941 0
-8 -128 -3942 0
c (0<=( - aux947 + SATLiteral(8) + SATLiteral(128)))
128 3942 0
8 3942 0
8 128 3941 0
c (( - aux948 + SATLiteral(23) + SATLiteral(113))<=0)
-113 -3944 0
-23 -3944 0
-23 -113 -3945 0
c (0<=( - aux948 + SATLiteral(23) + SATLiteral(113)))
113 3945 0
23 3945 0
23 113 3944 0
c (( - aux949 + SATLiteral(53) + SATLiteral(98))<=0)
-98 -3947 0
-53 -3947 0
-53 -98 -3948 0
c (0<=( - aux949 + SATLiteral(53) + SATLiteral(98)))
98 3948 0
53 3948 0
53 98 3947 0
c (( - aux950 + SATLiteral(68) + SATLiteral(83))<=0)
-83 -3950 0
-68 -3950 0
-68 -83 -3951 0
c (0<=( - aux950 + SATLiteral(68) + SATLiteral(83)))
83 3951 0
68 3951 0
68 83 3950 0
c ((aux950 - aux951 + SATLiteral(38))<=0)
3950 -3953 0
3951 -3954 0
-38 -3953 0
-38 3950 -3954 0
-38 3951 -3956 0
c (0<=(aux950 - aux951 + SATLiteral(38)))
-3951 3956 0
-3950 3954 0
38 3956 0
38 -3951 3954 0
38 -3950 3953 0
c ((aux947 + aux949 - aux952)<=0)
3947 -3958 0
3948 -3959 0
3941 -3958 0
3941 3947 -3959 0
3941 3948 -3961 0
3942 -3959 0
3942 3947 -3961 0
3942 3948 -3963 0
c (0<=(aux947 + aux949 - aux952))
-3948 3963 0
-3947 3961 0
-3942 3963 0
-3942 -3948 3961 0
-3942 -3947 3959 0
-3941 3961 0
-3941 -3948 3959 0
-3941 -3947 3958 0
c (( - aux953 + SATLiteral(10) + SATLiteral(130))<=0)
-130 -3965 0
-10 -3965 0
-10 -130 -3966 0
c (0<=( - aux953 + SATLiteral(10) + SATLiteral(130)))
130 3966 0
10 3966 0
10 130 3965 0
c (( - aux954 + SATLiteral(25) + SATLiteral(115))<=0)
-115 -3968 0
-25 -3968 0
-25 -115 -3969 0
c (0<=( - aux954 + SATLiteral(25) + SATLiteral(115)))
115 3969 0
25 3969 0
25 115 3968 0
c (( - aux955 + SATLiteral(55) + SATLiteral(100))<=0)
-100 -3971 0
-55 -3971 0
-55 -100 -3972 0
c (0<=( - aux955 + SATLiteral(55) + SATLiteral(100)))
100 3972 0
55 3972 0
55 100 3971 0
c (( - aux956 + SATLiteral(70) + SATLiteral(85))<=0)
-85 -3974 0
-70 -3974 0
-70 -85 -3975 0
c (0<=( - aux956 + SATLiteral(70) + SATLiteral(85)))
85 3975 0
70 3975 0
70 85 3974 0
c ((aux956 - aux957 + SATLiteral(40))<=0)
3974 -3977 0
3975 -3978 0
-40 -3977 0
-40 3974 -3978 0
-40 3975 -3980 0
c (0<=(aux956 - aux957 + SATLiteral(40)))
-3975 3980 0
-3974 3978 0
40 3980 0
40 -3975 3978 0
40 -3974 3977 0
c ((aux953 + aux955 - aux958)<=0)
3971 -3982 0
3972 -3983 0
3965 -3982 0
3965 3971 -3983 0
3965 3972 -3985 0
3966 -3983 0
3966 3971 -3985 0
3966 3972 -3987 0
c (0<=(aux953 + aux955 - aux958))
-3972 3987 0
-3971 3985 0
-3966 3987 0
-3966 -3972 3985 0
-3966 -3971 3983 0
-3965 3985 0
-3965 -3972 3983 0
-3965 -3971 3982 0
c (( - aux959 + SATLiteral(12) + SATLiteral(132))<=0)
-132 -3989 0
-12 -3989 0
-12 -132 -3990 0
c (0<=( - aux959 + SATLiteral(12) + SATLiteral(132)))
132 3990 0
12 3990 0
12 132 3989 0
c (( - aux960 + SATLiteral(27) + SATLiteral(117))<=0)
-117 -3992 0
-27 -3992 0
-27 -117 -3993 0
c (0<=( - aux960 + SATLiteral(27) + SATLiteral(117)))
117 3993 0
27 3993 0
27 117 3992 0
c (( - aux961 + SATLiteral(57) + SATLiteral(102))<=0)
-102 -3995 0
-57 -3995 0
-57 -102 -3996 0
c (0<=( - aux961 + SATLiteral(57) + SATLiteral(102)))
102 3996 0
57 3996 0
57 102 3995 0
c (( - aux962 + SATLiteral(72) + SATLiteral(87))<=0)
-87 -3998 0
-72 -3998 0
-72 -87 -3999 0
c (0<=( - aux962 + SATLiteral(72) + SATLiteral(87)))
87 3999 0
72 3999 0
72 87 3998 0
c ((aux962 - aux963 + SATLiteral(42))<=0)
3998 -4001 0
3999 -4002 0
-42 -4001 0
-42 3998 -4002 0
-42 3999 -4004 0
c (0<=(aux962 - aux963 + SATLiteral(42)))
-3999 4004 0
-3998 4002 0
42 4004 0
42 -3999 4002 0
42 -3998 4001 0
c ((aux959 + aux961 - aux964)<=0)
3995 -4006 0
3996 -4007 0
3989 -4006 0
3989 3995 -4007 0
3989 3996 -4009 0
3990 -4007 0
3990 3995 -4009 0
3990 3996 -4011 0
c (0<=(aux959 + aux961 - aux964))
-3996 4011 0
-3995 4009 0
-3990 4011 0
-3990 -3996 4009 0
-3990 -3995 4007 0
-3989 4009 0
-3989 -3996 4007 0
-3989 -3995 4006 0
c (( - aux965 + SATLiteral(14) + SATLiteral(134))<=0)
-134 -4013 0
-14 -4013 0
-14 -134 -4014 0
c (0<=( - aux965 + SATLiteral(14) + SATLiteral(134)))
134 4014 0
14 4014 0
14 134 4013 0
c (( - aux966 + SATLiteral(29) + SATLiteral(119))<=0)
-119 -4016 0
-29 -4016 0
-29 -119 -4017 0
c (0<=( - aux966 + SATLiteral(29) + SATLiteral(119)))
119 4017 0
29 4017 0
29 119 4016 0
c (( - aux967 + SATLiteral(59) + SATLiteral(104))<=0)
-104 -4019 0
-59 -4019 0
-59 -104 -4020 0
c (0<=( - aux967 + SATLiteral(59) + SATLiteral(104)))
104 4020 0
59 4020 0
59 104 4019 0
c (( - aux968 + SATLiteral(74) + SATLiteral(89))<=0)
-89 -4022 0
-74 -4022 0
-74 -89 -4023 0
c (0<=( - aux968 + SATLiteral(74) + SATLiteral(89)))
89 4023 0
74 4023 0
74 89 4022 0
c ((aux968 - aux969 + SATLiteral(44))<=0)
4022 -4025 0
4023 -4026 0
-44 -4025 0
-44 4022 -4026 0
-44 4023 -4028 0
c (0<=(aux968 - aux969 + SATLiteral(44)))
-4023 4028 0
-4022 4026 0
44 4028 0
44 -4023 4026 0
44 -4022 4025 0
c ((aux965 + aux967 - aux970)<=0)
4019 -4030 0
4020 -4031 0
4013 -4030 0
4013 4019 -4031 0
4013 4020 -4033 0
4014 -4031 0
4014 4019 -4033 0
4014 4020 -4035 0
c (0<=(aux965 + aux967 - aux970))
-4020 4035 0
-4019 4033 0
-4014 4035 0
-4014 -4020 4033 0
-4014 -4019 4031 0
-4013 4033 0
-4013 -4020 4031 0
-4013 -4019 4030 0
c (( - aux971 + SATLiteral(16) + SATLiteral(136))<=0)
-136 -4037 0
-16 -4037 0
-16 -136 -4038 0
c (0<=( - aux971 + SATLiteral(16) + SATLiteral(136)))
136 4038 0
16 4038 0
16 136 4037 0
c (( - aux972 + SATLiteral(31) + SATLiteral(121))<=0)
-121 -4040 0
-31 -4040 0
-31 -121 -4041 0
c (0<=( - aux972 + SATLiteral(31) + SATLiteral(121)))
121 4041 0
31 4041 0
31 121 4040 0
c (( - aux973 + SATLiteral(61) + SATLiteral(106))<=0)
-106 -4043 0
-61 -4043 0
-61 -106 -4044 0
c (0<=( - aux973 + SATLiteral(61) + SATLiteral(106)))
106 4044 0
61 4044 0
61 106 4043 0
c (( - aux974 + SATLiteral(76) + SATLiteral(91))<=0)
-91 -4046 0
-76 -4046 0
-76 -91 -4047 0
c (0<=( - aux974 + SATLiteral(76) + SATLiteral(91)))
91 4047 0
76 4047 0
76 91 4046 0
c ((aux974 - aux975 + SATLiteral(46))<=0)
4046 -4049 0
4047 -4050 0
-46 -4049 0
-46 4046 -4050 0
-46 4047 -4052 0
c (0<=(aux974 - aux975 + SATLiteral(46)))
-4047 4052 0
-4046 4050 0
46 4052 0
46 -4047 4050 0
46 -4046 4049 0
c ((aux971 + aux973 - aux976)<=0)
4043 -4054 0
4044 -4055 0
4037 -4054 0
4037 4043 -4055 0
4037 4044 -4057 0
4038 -4055 0
4038 4043 -4057 0
4038 4044 -4059 0
c (0<=(aux971 + aux973 - aux976))
-4044 4059 0
-4043 4057 0
-4038 4059 0
-4038 -4044 4057 0
-4038 -4043 4055 0
-4037 4057 0
-4037 -4044 4055 0
-4037 -4043 4054 0
c (( - aux977 + SATLiteral(-15) + SATLiteral(-135))<=0)
135 -4061 0
15 -4061 0
15 135 -4062 0
c (0<=( - aux977 + SATLiteral(-15) + SATLiteral(-135)))
-135 4062 0
-15 4062 0
-15 -135 4061 0
c (( - aux978 + SATLiteral(-30) + SATLiteral(-120))<=0)
120 -4064 0
30 -4064 0
30 120 -4065 0
c (0<=( - aux978 + SATLiteral(-30) + SATLiteral(-120)))
-120 4065 0
-30 4065 0
-30 -120 4064 0
c (( - aux979 + SATLiteral(-60) + SATLiteral(-105))<=0)
105 -4067 0
60 -4067 0
60 105 -4068 0
c (0<=( - aux979 + SATLiteral(-60) + SATLiteral(-105)))
-105 4068 0
-60 4068 0
-60 -105 4067 0
c (( - aux980 + SATLiteral(-75) + SATLiteral(-90))<=0)
90 -4070 0
75 -4070 0
75 90 -4071 0
c (0<=( - aux980 + SATLiteral(-75) + SATLiteral(-90)))
-90 4071 0
-75 4071 0
-75 -90 4070 0
c ((aux980 - aux981 + SATLiteral(-45))<=0)
4070 -4073 0
4071 -4074 0
45 -4073 0
45 4070 -4074 0
45 4071 -4076 0
c (0<=(aux980 - aux981 + SATLiteral(-45)))
-4071 4076 0
-4070 4074 0
-45 4076 0
-45 -4071 4074 0
-45 -4070 4073 0
c ((aux977 + aux979 - aux982)<=0)
4067 -4078 0
4068 -4079 0
4061 -4078 0
4061 4067 -4079 0
4061 4068 -4081 0
4062 -4079 0
4062 4067 -4081 0
4062 4068 -4083 0
c (0<=(aux977 + aux979 - aux982))
-4068 4083 0
-4067 4081 0
-4062 4083 0
-4062 -4068 4081 0
-4062 -4067 4079 0
-4061 4081 0
-4061 -4068 4079 0
-4061 -4067 4078 0
c (( - aux983 + SATLiteral(137) + SATLiteral(257))<=0)
-257 -4085 0
-137 -4085 0
-137 -257 -4086 0
c (0<=( - aux983 + SATLiteral(137) + SATLiteral(257)))
257 4086 0
137 4086 0
137 257 4085 0
c (( - aux984 + SATLiteral(152) + SATLiteral(242))<=0)
-242 -4088 0
-152 -4088 0
-152 -242 -4089 0
c (0<=( - aux984 + SATLiteral(152) + SATLiteral(242)))
242 4089 0
152 4089 0
152 242 4088 0
c (( - aux985 + SATLiteral(182) + SATLiteral(227))<=0)
-227 -4091 0
-182 -4091 0
-182 -227 -4092 0
c (0<=( - aux985 + SATLiteral(182) + SATLiteral(227)))
227 4092 0
182 4092 0
182 227 4091 0
c (( - aux986 + SATLiteral(197) + SATLiteral(212))<=0)
-212 -4094 0
-197 -4094 0
-197 -212 -4095 0
c (0<=( - aux986 + SATLiteral(197) + SATLiteral(212)))
212 4095 0
197 4095 0
197 212 4094 0
c ((aux986 - aux987 + SATLiteral(167))<=0)
4094 -4097 0
4095 -4098 0
-167 -4097 0
-167 4094 -4098 0
-167 4095 -4100 0
c (0<=(aux986 - aux987 + SATLiteral(167)))
-4095 4100 0
-4094 4098 0
167 4100 0
167 -4095 4098 0
167 -4094 4097 0
c ((aux983 + aux985 - aux988)<=0)
4091 -4102 0
4092 -4103 0
4085 -4102 0
4085 4091 -4103 0
4085 4092 -4105 0
4086 -4103 0
4086 4091 -4105 0
4086 4092 -4107 0
c (0<=(aux983 + aux985 - aux988))
-4092 4107 0
-4091 4105 0
-4086 4107 0
-4086 -4092 4105 0
-4086 -4091 4103 0
-4085 4105 0
-4085 -4092 4103 0
-4085 -4091 4102 0
c (( - aux989 + SATLiteral(139) + SATLiteral(259))<=0)
-259 -4109 0
-139 -4109 0
-139 -259 -4110 0
c (0<=( - aux989 + SATLiteral(139) + SATLiteral(259)))
259 4110 0
139 4110 0
139 259 4109 0
c (( - aux990 + SATLiteral(154) + SATLiteral(244))<=0)
-244 -4112 0
-154 -4112 0
-154 -244 -4113 0
c (0<=( - aux990 + SATLiteral(154) + SATLiteral(244)))
244 4113 0
154 4113 0
154 244 4112 0
c (( - aux991 + SATLiteral(184) + SATLiteral(229))<=0)
-229 -4115 0
-184 -4115 0
-184 -229 -4116 0
c (0<=( - aux991 + SATLiteral(184) + SATLiteral(229)))
229 4116 0
184 4116 0
184 229 4115 0
c (( - aux992 + SATLiteral(199) + SATLiteral(214))<=0)
-214 -4118 0
-199 -4118 0
-199 -214 -4119 0
c (0<=( - aux992 + SATLiteral(199) + SATLiteral(214)))
214 4119 0
199 4119 0
199 214 4118 0
c ((aux992 - aux993 + SATLiteral(169))<=0)
4118 -4121 0
4119 -4122 0
-169 -4121 0
-169 4118 -4122 0
-169 4119 -4124 0
c (0<=(aux992 - aux993 + SATLiteral(169)))
-4119 4124 0
-4118 4122 0
169 4124 0
169 -4119 4122 0
169 -4118 4121 0
c ((aux989 + aux991 - aux994)<=0)
4115 -4126 0
4116 -4127 0
4109 -4126 0
4109 4115 -4127 0
4109 4116 -4129 0
4110 -4127 0
4110 4115 -4129 0
4110 4116 -4131 0
c (0<=(aux989 + aux991 - aux994))
-4116 4131 0
-4115 4129 0
-4110 4131 0
-4110 -4116 4129 0
-4110 -4115 4127 0
-4109 4129 0
-4109 -4116 4127 0
-4109 -4115 4126 0
c (( - aux995 + SATLiteral(141) + SATLiteral(261))<=0)
-261 -4133 0
-141 -4133 0
-141 -261 -4134 0
c (0<=( - aux995 + SATLiteral(141) + SATLiteral(261)))
261 4134 0
141 4134 0
141 261 4133 0
c (( - aux996 + SATLiteral(156) + SATLiteral(246))<=0)
-246 -4136 0
-156 -4136 0
-156 -246 -4137 0
c (0<=( - aux996 + SATLiteral(156) + SATLiteral(246)))
246 4137 0
156 4137 0
156 246 4136 0
c (( - aux997 + SATLiteral(186) + SATLiteral(231))<=0)
-231 -4139 0
-186 -4139 0
-186 -231 -4140 0
c (0<=( - aux997 + SATLiteral(186) + SATLiteral(231)))
231 4140 0
186 4140 0
186 231 4139 0
c (( - aux998 + SATLiteral(201) + SATLiteral(216))<=0)
-216 -4142 0
-201 -4142 0
-201 -216 -4143 0
c (0<=( - aux998 + SATLiteral(201) + SATLiteral(216)))
216 4143 0
201 4143 0
201 216 4142 0
c ((aux998 - aux999 + SATLiteral(171))<=0)
4142 -4145 0
4143 -4146 0
-171 -4145 0
-171 4142 -4146 0
-171 4143 -4148 0
c (0<=(aux998 - aux999 + SATLiteral(171)))
-4143 4148 0
-4142 4146 0
171 4148 0
171 -4143 4146 0
171 -4142 4145 0
c ((aux995 + aux997 - aux1000)<=0)
4139 -4150 0
4140 -4151 0
4133 -4150 0
4133 4139 -4151 0
4133 4140 -4153 0
4134 -4151 0
4134 4139 -4153 0
4134 4140 -4155 0
c (0<=(aux995 + aux997 - aux1000))
-4140 4155 0
-4139 4153 0
-4134 4155 0
-4134 -4140 4153 0
-4134 -4139 4151 0
-4133 4153 0
-4133 -4140 4151 0
-4133 -4139 4150 0
c (( - aux1001 + SATLiteral(143) + SATLiteral(263))<=0)
-263 -4157 0
-143 -4157 0
-143 -263 -4158 0
c (0<=( - aux1001 + SATLiteral(143) + SATLiteral(263)))
263 4158 0
143 4158 0
143 263 4157 0
c (( - aux1002 + SATLiteral(158) + SATLiteral(248))<=0)
-248 -4160 0
-158 -4160 0
-158 -248 -4161 0
c (0<=( - aux1002 + SATLiteral(158) + SATLiteral(248)))
248 4161 0
158 4161 0
158 248 4160 0
c (( - aux1003 + SATLiteral(188) + SATLiteral(233))<=0)
-233 -4163 0
-188 -4163 0
-188 -233 -4164 0
c (0<=( - aux1003 + SATLiteral(188) + SATLiteral(233)))
233 4164 0
188 4164 0
188 233 4163 0
c (( - aux1004 + SATLiteral(203) + SATLiteral(218))<=0)
-218 -4166 0
-203 -4166 0
-203 -218 -4167 0
c (0<=( - aux1004 + SATLiteral(203) + SATLiteral(218)))
218 4167 0
203 4167 0
203 218 4166 0
c ((aux1004 - aux1005 + SATLiteral(173))<=0)
4166 -4169 0
4167 -4170 0
-173 -4169 0
-173 4166 -4170 0
-173 4167 -4172 0
c (0<=(aux1004 - aux1005 + SATLiteral(173)))
-4167 4172 0
-4166 4170 0
173 4172 0
173 -4167 4170 0
173 -4166 4169 0
c ((aux1001 + aux1003 - aux1006)<=0)
4163 -4174 0
4164 -4175 0
4157 -4174 0
4157 4163 -4175 0
4157 4164 -4177 0
4158 -4175 0
4158 4163 -4177 0
4158 4164 -4179 0
c (0<=(aux1001 + aux1003 - aux1006))
-4164 4179 0
-4163 4177 0
-4158 4179 0
-4158 -4164 4177 0
-4158 -4163 4175 0
-4157 4177 0
-4157 -4164 4175 0
-4157 -4163 4174 0
c (( - aux1007 + SATLiteral(145) + SATLiteral(265))<=0)
-265 -4181 0
-145 -4181 0
-145 -265 -4182 0
c (0<=( - aux1007 + SATLiteral(145) + SATLiteral(265)))
265 4182 0
145 4182 0
145 265 4181 0
c (( - aux1008 + SATLiteral(160) + SATLiteral(250))<=0)
-250 -4184 0
-160 -4184 0
-160 -250 -4185 0
c (0<=( - aux1008 + SATLiteral(160) + SATLiteral(250)))
250 4185 0
160 4185 0
160 250 4184 0
c (( - aux1009 + SATLiteral(190) + SATLiteral(235))<=0)
-235 -4187 0
-190 -4187 0
-190 -235 -4188 0
c (0<=( - aux1009 + SATLiteral(190) + SATLiteral(235)))
235 4188 0
190 4188 0
190 235 4187 0
c (( - aux1010 + SATLiteral(205) + SATLiteral(220))<=0)
-220 -4190 0
-205 -4190 0
-205 -220 -4191 0
c (0<=( - aux1010 + SATLiteral(205) + SATLiteral(220)))
220 4191 0
205 4191 0
205 220 4190 0
c ((aux1010 - aux1011 + SATLiteral(175))<=0)
4190 -4193 0
4191 -4194 0
-175 -4193 0
-175 4190 -4194 0
-175 4191 -4196 0
c (0<=(aux1010 - aux1011 + SATLiteral(175)))
-4191 4196 0
-4190 4194 0
175 4196 0
175 -4191 4194 0
175 -4190 4193 0
c ((aux1007 + aux1009 - aux1012)<=0)
4187 -4198 0
4188 -4199 0
4181 -4198 0
4181 4187 -4199 0
4181 4188 -4201 0
4182 -4199 0
4182 4187 -4201 0
4182 4188 -4203 0
c (0<=(aux1007 + aux1009 - aux1012))
-4188 4203 0
-4187 4201 0
-4182 4203 0
-4182 -4188 4201 0
-4182 -4187 4199 0
-4181 4201 0
-4181 -4188 4199 0
-4181 -4187 4198 0
c (( - aux1013 + SATLiteral(147) + SATLiteral(267))<=0)
-267 -4205 0
-147 -4205 0
-147 -267 -4206 0
c (0<=( - aux1013 + SATLiteral(147) + SATLiteral(267)))
267 4206 0
147 4206 0
147 267 4205 0
c (( - aux1014 + SATLiteral(162) + SATLiteral(252))<=0)
-252 -4208 0
-162 -4208 0
-162 -252 -4209 0
c (0<=( - aux1014 + SATLiteral(162) + SATLiteral(252)))
252 4209 0
162 4209 0
162 252 4208 0
c (( - aux1015 + SATLiteral(192) + SATLiteral(237))<=0)
-237 -4211 0
-192 -4211 0
-192 -237 -4212 0
c (0<=( - aux1015 + SATLiteral(192) + SATLiteral(237)))
237 4212 0
192 4212 0
192 237 4211 0
c (( - aux1016 + SATLiteral(207) + SATLiteral(222))<=0)
-222 -4214 0
-207 -4214 0
-207 -222 -4215 0
c (0<=( - aux1016 + SATLiteral(207) + SATLiteral(222)))
222 4215 0
207 4215 0
207 222 4214 0
c ((aux1016 - aux1017 + SATLiteral(177))<=0)
4214 -4217 0
4215 -4218 0
-177 -4217 0
-177 4214 -4218 0
-177 4215 -4220 0
c (0<=(aux1016 - aux1017 + SATLiteral(177)))
-4215 4220 0
-4214 4218 0
177 4220 0
177 -4215 4218 0
177 -4214 4217 0
c ((aux1013 + aux1015 - aux1018)<=0)
4211 -4222 0
4212 -4223 0
4205 -4222 0
4205 4211 -4223 0
4205 4212 -4225 0
4206 -4223 0
4206 4211 -4225 0
4206 4212 -4227 0
c (0<=(aux1013 + aux1015 - aux1018))
-4212 4227 0
-4211 4225 0
-4206 4227 0
-4206 -4212 4225 0
-4206 -4211 4223 0
-4205 4225 0
-4205 -4212 4223 0
-4205 -4211 4222 0
c (( - aux1019 + SATLiteral(149) + SATLiteral(269))<=0)
-269 -4229 0
-149 -4229 0
-149 -269 -4230 0
c (0<=( - aux1019 + SATLiteral(149) + SATLiteral(269)))
269 4230 0
149 4230 0
149 269 4229 0
c (( - aux1020 + SATLiteral(164) + SATLiteral(254))<=0)
-254 -4232 0
-164 -4232 0
-164 -254 -4233 0
c (0<=( - aux1020 + SATLiteral(164) + SATLiteral(254)))
254 4233 0
164 4233 0
164 254 4232 0
c (( - aux1021 + SATLiteral(194) + SATLiteral(239))<=0)
-239 -4235 0
-194 -4235 0
-194 -239 -4236 0
c (0<=( - aux1021 + SATLiteral(194) + SATLiteral(239)))
239 4236 0
194 4236 0
194 239 4235 0
c (( - aux1022 + SATLiteral(209) + SATLiteral(224))<=0)
-224 -4238 0
-209 -4238 0
-209 -224 -4239 0
c (0<=( - aux1022 + SATLiteral(209) + SATLiteral(224)))
224 4239 0
209 4239 0
209 224 4238 0
c ((aux1022 - aux1023 + SATLiteral(179))<=0)
4238 -4241 0
4239 -4242 0
-179 -4241 0
-179 4238 -4242 0
-179 4239 -4244 0
c (0<=(aux1022 - aux1023 + SATLiteral(179)))
-4239 4244 0
-4238 4242 0
179 4244 0
179 -4239 4242 0
179 -4238 4241 0
c ((aux1019 + aux1021 - aux1024)<=0)
4235 -4246 0
4236 -4247 0
4229 -4246 0
4229 4235 -4247 0
4229 4236 -4249 0
4230 -4247 0
4230 4235 -4249 0
4230 4236 -4251 0
c (0<=(aux1019 + aux1021 - aux1024))
-4236 4251 0
-4235 4249 0
-4230 4251 0
-4230 -4236 4249 0
-4230 -4235 4247 0
-4229 4249 0
-4229 -4236 4247 0
-4229 -4235 4246 0
c (( - aux1025 + SATLiteral(151) + SATLiteral(271))<=0)
-271 -4253 0
-151 -4253 0
-151 -271 -4254 0
c (0<=( - aux1025 + SATLiteral(151) + SATLiteral(271)))
271 4254 0
151 4254 0
151 271 4253 0
c (( - aux1026 + SATLiteral(166) + SATLiteral(256))<=0)
-256 -4256 0
-166 -4256 0
-166 -256 -4257 0
c (0<=( - aux1026 + SATLiteral(166) + SATLiteral(256)))
256 4257 0
166 4257 0
166 256 4256 0
c (( - aux1027 + SATLiteral(196) + SATLiteral(241))<=0)
-241 -4259 0
-196 -4259 0
-196 -241 -4260 0
c (0<=( - aux1027 + SATLiteral(196) + SATLiteral(241)))
241 4260 0
196 4260 0
196 241 4259 0
c (( - aux1028 + SATLiteral(211) + SATLiteral(226))<=0)
-226 -4262 0
-211 -4262 0
-211 -226 -4263 0
c (0<=( - aux1028 + SATLiteral(211) + SATLiteral(226)))
226 4263 0
211 4263 0
211 226 4262 0
c ((aux1028 - aux1029 + SATLiteral(181))<=0)
4262 -4265 0
4263 -4266 0
-181 -4265 0
-181 4262 -4266 0
-181 4263 -4268 0
c (0<=(aux1028 - aux1029 + SATLiteral(181)))
-4263 4268 0
-4262 4266 0
181 4268 0
181 -4263 4266 0
181 -4262 4265 0
c ((aux1025 + aux1027 - aux1030)<=0)
4259 -4270 0
4260 -4271 0
4253 -4270 0
4253 4259 -4271 0
4253 4260 -4273 0
4254 -4271 0
4254 4259 -4273 0
4254 4260 -4275 0
c (0<=(aux1025 + aux1027 - aux1030))
-4260 4275 0
-4259 4273 0
-4254 4275 0
-4254 -4260 4273 0
-4254 -4259 4271 0
-4253 4273 0
-4253 -4260 4271 0
-4253 -4259 4270 0
c (( - aux1031 + SATLiteral(-150) + SATLiteral(-270))<=0)
270 -4277 0
150 -4277 0
150 270 -4278 0
c (0<=( - aux1031 + SATLiteral(-150) + SATLiteral(-270)))
-270 4278 0
-150 4278 0
-150 -270 4277 0
c (( - aux1032 + SATLiteral(-165) + SATLiteral(-255))<=0)
255 -4280 0
165 -4280 0
165 255 -4281 0
c (0<=( - aux1032 + SATLiteral(-165) + SATLiteral(-255)))
-255 4281 0
-165 4281 0
-165 -255 4280 0
c (( - aux1033 + SATLiteral(-195) + SATLiteral(-240))<=0)
240 -4283 0
195 -4283 0
195 240 -4284 0
c (0<=( - aux1033 + SATLiteral(-195) + SATLiteral(-240)))
-240 4284 0
-195 4284 0
-195 -240 4283 0
c (( - aux1034 + SATLiteral(-210) + SATLiteral(-225))<=0)
225 -4286 0
210 -4286 0
210 225 -4287 0
c (0<=( - aux1034 + SATLiteral(-210) + SATLiteral(-225)))
-225 4287 0
-210 4287 0
-210 -225 4286 0
c ((aux1034 - aux1035 + SATLiteral(-180))<=0)
4286 -4289 0
4287 -4290 0
180 -4289 0
180 4286 -4290 0
180 4287 -4292 0
c (0<=(aux1034 - aux1035 + SATLiteral(-180)))
-4287 4292 0
-4286 4290 0
-180 4292 0
-180 -4287 4290 0
-180 -4286 4289 0
c ((aux1031 + aux1033 - aux1036)<=0)
4283 -4294 0
4284 -4295 0
4277 -4294 0
4277 4283 -4295 0
4277 4284 -4297 0
4278 -4295 0
4278 4283 -4297 0
4278 4284 -4299 0
c (0<=(aux1031 + aux1033 - aux1036))
-4284 4299 0
-4283 4297 0
-4278 4299 0
-4278 -4284 4297 0
-4278 -4283 4295 0
-4277 4297 0
-4277 -4284 4295 0
-4277 -4283 4294 0
c ((SATLiteral(272) + SATLiteral(392) - aux1037)<=0)
-392 -4301 0
-272 -4301 0
-272 -392 -4302 0
c (0<=(SATLiteral(272) + SATLiteral(392) - aux1037))
392 4302 0
272 4302 0
272 392 4301 0
c ((SATLiteral(287) + SATLiteral(377) - aux1038)<=0)
-377 -4304 0
-287 -4304 0
-287 -377 -4305 0
c (0<=(SATLiteral(287) + SATLiteral(377) - aux1038))
377 4305 0
287 4305 0
287 377 4304 0
c ((SATLiteral(317) + SATLiteral(362) - aux1039)<=0)
-362 -4307 0
-317 -4307 0
-317 -362 -4308 0
c (0<=(SATLiteral(317) + SATLiteral(362) - aux1039))
362 4308 0
317 4308 0
317 362 4307 0
c ((SATLiteral(332) + SATLiteral(347) - aux1040)<=0)
-347 -4310 0
-332 -4310 0
-332 -347 -4311 0
c (0<=(SATLiteral(332) + SATLiteral(347) - aux1040))
347 4311 0
332 4311 0
332 347 4310 0
c ((SATLiteral(302) + aux1040 - aux1041)<=0)
4310 -4313 0
4311 -4314 0
-302 -4313 0
-302 4310 -4314 0
-302 4311 -4316 0
c (0<=(SATLiteral(302) + aux1040 - aux1041))
-4311 4316 0
-4310 4314 0
302 4316 0
302 -4311 4314 0
302 -4310 4313 0
c ((aux1037 + aux1039 - aux1042)<=0)
4307 -4318 0
4308 -4319 0
4301 -4318 0
4301 4307 -4319 0
4301 4308 -4321 0
4302 -4319 0
4302 4307 -4321 0
4302 4308 -4323 0
c (0<=(aux1037 + aux1039 - aux1042))
-4308 4323 0
-4307 4321 0
-4302 4323 0
-4302 -4308 4321 0
-4302 -4307 4319 0
-4301 4321 0
-4301 -4308 4319 0
-4301 -4307 4318 0
c ((SATLiteral(274) + SATLiteral(394) - aux1043)<=0)
-394 -4325 0
-274 -4325 0
-274 -394 -4326 0
c (0<=(SATLiteral(274) + SATLiteral(394) - aux1043))
394 4326 0
274 4326 0
274 394 4325 0
c ((SATLiteral(289) + SATLiteral(379) - aux1044)<=0)
-379 -4328 0
-289 -4328 0
-289 -379 -4329 0
c (0<=(SATLiteral(289) + SATLiteral(379) - aux1044))
379 4329 0
289 4329 0
289 379 4328 0
c ((SATLiteral(319) + SATLiteral(364) - aux1045)<=0)
-364 -4331 0
-319 -4331 0
-319 -364 -4332 0
c (0<=(SATLiteral(319) + SATLiteral(364) - aux1045))
364 4332 0
319 4332 0
319 364 4331 0
c ((SATLiteral(334) + SATLiteral(349) - aux1046)<=0)
-349 -4334 0
-334 -4334 0
-334 -349 -4335 0
c (0<=(SATLiteral(334) + SATLiteral(349) - aux1046))
349 4335 0
334 4335 0
334 349 4334 0
c ((SATLiteral(304) + aux1046 - aux1047)<=0)
4334 -4337 0
4335 -4338 0
-304 -4337 0
-304 4334 -4338 0
-304 4335 -4340 0
c (0<=(SATLiteral(304) + aux1046 - aux1047))
-4335 4340 0
-4334 4338 0
304 4340 0
304 -4335 4338 0
304 -4334 4337 0
c ((aux1043 + aux1045 - aux1048)<=0)
4331 -4342 0
4332 -4343 0
4325 -4342 0
4325 4331 -4343 0
4325 4332 -4345 0
4326 -4343 0
4326 4331 -4345 0
4326 4332 -4347 0
c (0<=(aux1043 + aux1045 - aux1048))
-4332 4347 0
-4331 4345 0
-4326 4347 0
-4326 -4332 4345 0
-4326 -4331 4343 0
-4325 4345 0
-4325 -4332 4343 0
-4325 -4331 4342 0
c ((SATLiteral(276) + SATLiteral(396) - aux1049)<=0)
-396 -4349 0
-276 -4349 0
-276 -396 -4350 0
c (0<=(SATLiteral(276) + SATLiteral(396) - aux1049))
396 4350 0
276 4350 0
276 396 4349 0
c ((SATLiteral(291) + SATLiteral(381) - aux1050)<=0)
-381 -4352 0
-291 -4352 0
-291 -381 -4353 0
c (0<=(SATLiteral(291) + SATLiteral(381) - aux1050))
381 4353 0
291 4353 0
291 381 4352 0
c ((SATLiteral(321) + SATLiteral(366) - aux1051)<=0)
-366 -4355 0
-321 -4355 0
-321 -366 -4356 0
c (0<=(SATLiteral(321) + SATLiteral(366) - aux1051))
366 4356 0
321 4356 0
321 366 4355 0
c ((SATLiteral(336) + SATLiteral(351) - aux1052)<=0)
-351 -4358 0
-336 -4358 0
-336 -351 -4359 0
c (0<=(SATLiteral(336) + SATLiteral(351) - aux1052))
351 4359 0
336 4359 0
336 351 4358 0
c ((SATLiteral(306) + aux1052 - aux1053)<=0)
4358 -4361 0
4359 -4362 0
-306 -4361 0
-306 4358 -4362 0
-306 4359 -4364 0
c (0<=(SATLiteral(306) + aux1052 - aux1053))
-4359 4364 0
-4358 4362 0
306 4364 0
306 -4359 4362 0
306 -4358 4361 0
c ((aux1049 + aux1051 - aux1054)<=0)
4355 -4366 0
4356 -4367 0
4349 -4366 0
4349 4355 -4367 0
4349 4356 -4369 0
4350 -4367 0
4350 4355 -4369 0
4350 4356 -4371 0
c (0<=(aux1049 + aux1051 - aux1054))
-4356 4371 0
-4355 4369 0
-4350 4371 0
-4350 -4356 4369 0
-4350 -4355 4367 0
-4349 4369 0
-4349 -4356 4367 0
-4349 -4355 4366 0
c ((SATLiteral(278) + SATLiteral(398) - aux1055)<=0)
-398 -4373 0
-278 -4373 0
-278 -398 -4374 0
c (0<=(SATLiteral(278) + SATLiteral(398) - aux1055))
398 4374 0
278 4374 0
278 398 4373 0
c ((SATLiteral(293) + SATLiteral(383) - aux1056)<=0)
-383 -4376 0
-293 -4376 0
-293 -383 -4377 0
c (0<=(SATLiteral(293) + SATLiteral(383) - aux1056))
383 4377 0
293 4377 0
293 383 4376 0
c ((SATLiteral(323) + SATLiteral(368) - aux1057)<=0)
-368 -4379 0
-323 -4379 0
-323 -368 -4380 0
c (0<=(SATLiteral(323) + SATLiteral(368) - aux1057))
368 4380 0
323 4380 0
323 368 4379 0
c ((SATLiteral(338) + SATLiteral(353) - aux1058)<=0)
-353 -4382 0
-338 -4382 0
-338 -353 -4383 0
c (0<=(SATLiteral(338) + SATLiteral(353) - aux1058))
353 4383 0
338 4383 0
338 353 4382 0
c ((SATLiteral(308) + aux1058 - aux1059)<=0)
4382 -4385 0
4383 -4386 0
-308 -4385 0
-308 4382 -4386 0
-308 4383 -4388 0
c (0<=(SATLiteral(308) + aux1058 - aux1059))
-4383 4388 0
-4382 4386 0
308 4388 0
308 -4383 4386 0
308 -4382 4385 0
c ((aux1055 + aux1057 - aux1060)<=0)
4379 -4390 0
4380 -4391 0
4373 -4390 0
4373 4379 -4391 0
4373 4380 -4393 0
4374 -4391 0
4374 4379 -4393 0
4374 4380 -4395 0
c (0<=(aux1055 + aux1057 - aux1060))
-4380 4395 0
-4379 4393 0
-4374 4395 0
-4374 -4380 4393 0
-4374 -4379 4391 0
-4373 4393 0
-4373 -4380 4391 0
-4373 -4379 4390 0
c ((SATLiteral(280) + SATLiteral(400) - aux1061)<=0)
-400 -4397 0
-280 -4397 0
-280 -400 -4398 0
c (0<=(SATLiteral(280) + SATLiteral(400) - aux1061))
400 4398 0
280 4398 0
280 400 4397 0
c ((SATLiteral(295) + SATLiteral(385) - aux1062)<=0)
-385 -4400 0
-295 -4400 0
-295 -385 -4401 0
c (0<=(SATLiteral(295) + SATLiteral(385) - aux1062))
385 4401 0
295 4401 0
295 385 4400 0
c ((SATLiteral(325) + SATLiteral(370) - aux1063)<=0)
-370 -4403 0
-325 -4403 0
-325 -370 -4404 0
c (0<=(SATLiteral(325) + SATLiteral(370) - aux1063))
370 4404 0
325 4404 0
325 370 4403 0
c ((SATLiteral(340) + SATLiteral(355) - aux1064)<=0)
-355 -4406 0
-340 -4406 0
-340 -355 -4407 0
c (0<=(SATLiteral(340) + SATLiteral(355) - aux1064))
355 4407 0
340 4407 0
340 355 4406 0
c ((SATLiteral(310) + aux1064 - aux1065)<=0)
4406 -4409 0
4407 -4410 0
-310 -4409 0
-310 4406 -4410 0
-310 4407 -4412 0
c (0<=(SATLiteral(310) + aux1064 - aux1065))
-4407 4412 0
-4406 4410 0
310 4412 0
310 -4407 4410 0
310 -4406 4409 0
c ((aux1061 + aux1063 - aux1066)<=0)
4403 -4414 0
4404 -4415 0
4397 -4414 0
4397 4403 -4415 0
4397 4404 -4417 0
4398 -4415 0
4398 4403 -4417 0
4398 4404 -4419 0
c (0<=(aux1061 + aux1063 - aux1066))
-4404 4419 0
-4403 4417 0
-4398 4419 0
-4398 -4404 4417 0
-4398 -4403 4415 0
-4397 4417 0
-4397 -4404 4415 0
-4397 -4403 4414 0
c ((SATLiteral(282) + SATLiteral(402) - aux1067)<=0)
-402 -4421 0
-282 -4421 0
-282 -402 -4422 0
c (0<=(SATLiteral(282) + SATLiteral(402) - aux1067))
402 4422 0
282 4422 0
282 402 4421 0
c ((SATLiteral(297) + SATLiteral(387) - aux1068)<=0)
-387 -4424 0
-297 -4424 0
-297 -387 -4425 0
c (0<=(SATLiteral(297) + SATLiteral(387) - aux1068))
387 4425 0
297 4425 0
297 387 4424 0
c ((SATLiteral(327) + SATLiteral(372) - aux1069)<=0)
-372 -4427 0
-327 -4427 0
-327 -372 -4428 0
c (0<=(SATLiteral(327) + SATLiteral(372) - aux1069))
372 4428 0
327 4428 0
327 372 4427 0
c ((SATLiteral(342) + SATLiteral(357) - aux1070)<=0)
-357 -4430 0
-342 -4430 0
-342 -357 -4431 0
c (0<=(SATLiteral(342) + SATLiteral(357) - aux1070))
357 4431 0
342 4431 0
342 357 4430 0
c ((SATLiteral(312) + aux1070 - aux1071)<=0)
4430 -4433 0
4431 -4434 0
-312 -4433 0
-312 4430 -4434 0
-312 4431 -4436 0
c (0<=(SATLiteral(312) + aux1070 - aux1071))
-4431 4436 0
-4430 4434 0
312 4436 0
312 -4431 4434 0
312 -4430 4433 0
c ((aux1067 + aux1069 - aux1072)<=0)
4427 -4438 0
4428 -4439 0
4421 -4438 0
4421 4427 -4439 0
4421 4428 -4441 0
4422 -4439 0
4422 4427 -4441 0
4422 4428 -4443 0
c (0<=(aux1067 + aux1069 - aux1072))
-4428 4443 0
-4427 4441 0
-4422 4443 0
-4422 -4428 4441 0
-4422 -4427 4439 0
-4421 4441 0
-4421 -4428 4439 0
-4421 -4427 4438 0
c ((SATLiteral(284) + SATLiteral(404) - aux1073)<=0)
-404 -4445 0
-284 -4445 0
-284 -404 -4446 0
c (0<=(SATLiteral(284) + SATLiteral(404) - aux1073))
404 4446 0
284 4446 0
284 404 4445 0
c ((SATLiteral(299) + SATLiteral(389) - aux1074)<=0)
-389 -4448 0
-299 -4448 0
-299 -389 -4449 0
c (0<=(SATLiteral(299) + SATLiteral(389) - aux1074))
389 4449 0
299 4449 0
299 389 4448 0
c ((SATLiteral(329) + SATLiteral(374) - aux1075)<=0)
-374 -4451 0
-329 -4451 0
-329 -374 -4452 0
c (0<=(SATLiteral(329) + SATLiteral(374) - aux1075))
374 4452 0
329 4452 0
329 374 4451 0
c ((SATLiteral(344) + SATLiteral(359) - aux1076)<=0)
-359 -4454 0
-344 -4454 0
-344 -359 -4455 0
c (0<=(SATLiteral(344) + SATLiteral(359) - aux1076))
359 4455 0
344 4455 0
344 359 4454 0
c ((SATLiteral(314) + aux1076 - aux1077)<=0)
4454 -4457 0
4455 -4458 0
-314 -4457 0
-314 4454 -4458 0
-314 4455 -4460 0
c (0<=(SATLiteral(314) + aux1076 - aux1077))
-4455 4460 0
-4454 4458 0
314 4460 0
314 -4455 4458 0
314 -4454 4457 0
c ((aux1073 + aux1075 - aux1078)<=0)
4451 -4462 0
4452 -4463 0
4445 -4462 0
4445 4451 -4463 0
4445 4452 -4465 0
4446 -4463 0
4446 4451 -4465 0
4446 4452 -4467 0
c (0<=(aux1073 + aux1075 - aux1078))
-4452 4467 0
-4451 4465 0
-4446 4467 0
-4446 -4452 4465 0
-4446 -4451 4463 0
-4445 4465 0
-4445 -4452 4463 0
-4445 -4451 4462 0
c ((SATLiteral(286) + SATLiteral(406) - aux1079)<=0)
-406 -4469 0
-286 -4469 0
-286 -406 -4470 0
c (0<=(SATLiteral(286) + SATLiteral(406) - aux1079))
406 4470 0
286 4470 0
286 406 4469 0
c ((SATLiteral(301) + SATLiteral(391) - aux1080)<=0)
-391 -4472 0
-301 -4472 0
-301 -391 -4473 0
c (0<=(SATLiteral(301) + SATLiteral(391) - aux1080))
391 4473 0
301 4473 0
301 391 4472 0
c ((SATLiteral(331) + SATLiteral(376) - aux1081)<=0)
-376 -4475 0
-331 -4475 0
-331 -376 -4476 0
c (0<=(SATLiteral(331) + SATLiteral(376) - aux1081))
376 4476 0
331 4476 0
331 376 4475 0
c ((SATLiteral(346) + SATLiteral(361) - aux1082)<=0)
-361 -4478 0
-346 -4478 0
-346 -361 -4479 0
c (0<=(SATLiteral(346) + SATLiteral(361) - aux1082))
361 4479 0
346 4479 0
346 361 4478 0
c ((SATLiteral(316) + aux1082 - aux1083)<=0)
4478 -4481 0
4479 -4482 0
-316 -4481 0
-316 4478 -4482 0
-316 4479 -4484 0
c (0<=(SATLiteral(316) + aux1082 - aux1083))
-4479 4484 0
-4478 4482 0
316 4484 0
316 -4479 4482 0
316 -4478 4481 0
c ((aux1079 + aux1081 - aux1084)<=0)
4475 -4486 0
4476 -4487 0
4469 -4486 0
4469 4475 -4487 0
4469 4476 -4489 0
4470 -4487 0
4470 4475 -4489 0
4470 4476 -4491 0
c (0<=(aux1079 + aux1081 - aux1084))
-4476 4491 0
-4475 4489 0
-4470 4491 0
-4470 -4476 4489 0
-4470 -4475 4487 0
-4469 4489 0
-4469 -4476 4487 0
-4469 -4475 4486 0
c ((SATLiteral(-285) + SATLiteral(-405) - aux1085)<=0)
405 -4493 0
285 -4493 0
285 405 -4494 0
c (0<=(SATLiteral(-285) + SATLiteral(-405) - aux1085))
-405 4494 0
-285 4494 0
-285 -405 4493 0
c ((SATLiteral(-300) + SATLiteral(-390) - aux1086)<=0)
390 -4496 0
300 -4496 0
300 390 -4497 0
c (0<=(SATLiteral(-300) + SATLiteral(-390) - aux1086))
-390 4497 0
-300 4497 0
-300 -390 4496 0
c ((SATLiteral(-330) + SATLiteral(-375) - aux1087)<=0)
375 -4499 0
330 -4499 0
330 375 -4500 0
c (0<=(SATLiteral(-330) + SATLiteral(-375) - aux1087))
-375 4500 0
-330 4500 0
-330 -375 4499 0
c ((SATLiteral(-345) + SATLiteral(-360) - aux1088)<=0)
360 -4502 0
345 -4502 0
345 360 -4503 0
c (0<=(SATLiteral(-345) + SATLiteral(-360) - aux1088))
-360 4503 0
-345 4503 0
-345 -360 4502 0
c ((SATLiteral(-315) + aux1088 - aux1089)<=0)
4502 -4505 0
4503 -4506 0
315 -4505 0
315 4502 -4506 0
315 4503 -4508 0
c (0<=(SATLiteral(-315) + aux1088 - aux1089))
-4503 4508 0
-4502 4506 0
-315 4508 0
-315 -4503 4506 0
-315 -4502 4505 0
c ((aux1085 + aux1087 - aux1090)<=0)
4499 -4510 0
4500 -4511 0
4493 -4510 0
4493 4499 -4511 0
4493 4500 -4513 0
4494 -4511 0
4494 4499 -4513 0
4494 4500 -4515 0
c (0<=(aux1085 + aux1087 - aux1090))
-4500 4515 0
-4499 4513 0
-4494 4515 0
-4494 -4500 4513 0
-4494 -4499 4511 0
-4493 4513 0
-4493 -4500 4511 0
-4493 -4499 4510 0
c (( - aux1091 + SATLiteral(407) + SATLiteral(527))<=0)
-527 -4517 0
-407 -4517 0
-407 -527 -4518 0
c (0<=( - aux1091 + SATLiteral(407) + SATLiteral(527)))
527 4518 0
407 4518 0
407 527 4517 0
c (( - aux1092 + SATLiteral(422) + SATLiteral(512))<=0)
-512 -4520 0
-422 -4520 0
-422 -512 -4521 0
c (0<=( - aux1092 + SATLiteral(422) + SATLiteral(512)))
512 4521 0
422 4521 0
422 512 4520 0
c (( - aux1093 + SATLiteral(452) + SATLiteral(497))<=0)
-497 -4523 0
-452 -4523 0
-452 -497 -4524 0
c (0<=( - aux1093 + SATLiteral(452) + SATLiteral(497)))
497 4524 0
452 4524 0
452 497 4523 0
c (( - aux1094 + SATLiteral(467) + SATLiteral(482))<=0)
-482 -4526 0
-467 -4526 0
-467 -482 -4527 0
c (0<=( - aux1094 + SATLiteral(467) + SATLiteral(482)))
482 4527 0
467 4527 0
467 482 4526 0
c ((aux1094 - aux1095 + SATLiteral(437))<=0)
4526 -4529 0
4527 -4530 0
-437 -4529 0
-437 4526 -4530 0
-437 4527 -4532 0
c (0<=(aux1094 - aux1095 + SATLiteral(437)))
-4527 4532 0
-4526 4530 0
437 4532 0
437 -4527 4530 0
437 -4526 4529 0
c ((aux1091 + aux1093 - aux1096)<=0)
4523 -4534 0
4524 -4535 0
4517 -4534 0
4517 4523 -4535 0
4517 4524 -4537 0
4518 -4535 0
4518 4523 -4537 0
4518 4524 -4539 0
c (0<=(aux1091 + aux1093 - aux1096))
-4524 4539 0
-4523 4537 0
-4518 4539 0
-4518 -4524 4537 0
-4518 -4523 4535 0
-4517 4537 0
-4517 -4524 4535 0
-4517 -4523 4534 0
c (( - aux1097 + SATLiteral(409) + SATLiteral(529))<=0)
-529 -4541 0
-409 -4541 0
-409 -529 -4542 0
c (0<=( - aux1097 + SATLiteral(409) + SATLiteral(529)))
529 4542 0
409 4542 0
409 529 4541 0
c (( - aux1098 + SATLiteral(424) + SATLiteral(514))<=0)
-514 -4544 0
-424 -4544 0
-424 -514 -4545 0
c (0<=( - aux1098 + SATLiteral(424) + SATLiteral(514)))
514 4545 0
424 4545 0
424 514 4544 0
c (( - aux1099 + SATLiteral(454) + SATLiteral(499))<=0)
-499 -4547 0
-454 -4547 0
-454 -499 -4548 0
c (0<=( - aux1099 + SATLiteral(454) + SATLiteral(499)))
499 4548 0
454 4548 0
454 499 4547 0
c (( - aux1100 + SATLiteral(469) + SATLiteral(484))<=0)
-484 -4550 0
-469 -4550 0
-469 -484 -4551 0
c (0<=( - aux1100 + SATLiteral(469) + SATLiteral(484)))
484 4551 0
469 4551 0
469 484 4550 0
c ((aux1100 - aux1101 + SATLiteral(439))<=0)
4550 -4553 0
4551 -4554 0
-439 -4553 0
-439 4550 -4554 0
-439 4551 -4556 0
c (0<=(aux1100 - aux1101 + SATLiteral(439)))
-4551 4556 0
-4550 4554 0
439 4556 0
439 -4551 4554 0
439 -4550 4553 0
c ((aux1097 + aux1099 - aux1102)<=0)
4547 -4558 0
4548 -4559 0
4541 -4558 0
4541 4547 -4559 0
4541 4548 -4561 0
4542 -4559 0
4542 4547 -4561 0
4542 4548 -4563 0
c (0<=(aux1097 + aux1099 - aux1102))
-4548 4563 0
-4547 4561 0
-4542 4563 0
-4542 -4548 4561 0
-4542 -4547 4559 0
-4541 4561 0
-4541 -4548 4559 0
-4541 -4547 4558 0
c (( - aux1103 + SATLiteral(411) + SATLiteral(531))<=0)
-531 -4565 0
-411 -4565 0
-411 -531 -4566 0
c (0<=( - aux1103 + SATLiteral(411) + SATLiteral(531)))
531 4566 0
411 4566 0
411 531 4565 0
c (( - aux1104 + SATLiteral(426) + SATLiteral(516))<=0)
-516 -4568 0
-426 -4568 0
-426 -516 -4569 0
c (0<=( - aux1104 + SATLiteral(426) + SATLiteral(516)))
516 4569 0
426 4569 0
426 516 4568 0
c (( - aux1105 + SATLiteral(456) + SATLiteral(501))<=0)
-501 -4571 0
-456 -4571 0
-456 -501 -4572 0
c (0<=( - aux1105 + SATLiteral(456) + SATLiteral(501)))
501 4572 0
456 4572 0
456 501 4571 0
c (( - aux1106 + SATLiteral(471) + SATLiteral(486))<=0)
-486 -4574 0
-471 -4574 0
-471 -486 -4575 0
c (0<=( - aux1106 + SATLiteral(471) + SATLiteral(486)))
486 4575 0
471 4575 0
471 486 4574 0
c ((aux1106 - aux1107 + SATLiteral(441))<=0)
4574 -4577 0
4575 -4578 0
-441 -4577 0
-441 4574 -4578 0
-441 4575 -4580 0
c (0<=(aux1106 - aux1107 + SATLiteral(441)))
-4575 4580 0
-4574 4578 0
441 4580 0
441 -4575 4578 0
441 -4574 4577 0
c ((aux1103 + aux1105 - aux1108)<=0)
4571 -4582 0
4572 -4583 0
4565 -4582 0
4565 4571 -4583 0
4565 4572 -4585 0
4566 -4583 0
4566 4571 -4585 0
4566 4572 -4587 0
c (0<=(aux1103 + aux1105 - aux1108))
-4572 4587 0
-4571 4585 0
-4566 4587 0
-4566 -4572 4585 0
-4566 -4571 4583 0
-4565 4585 0
-4565 -4572 4583 0
-4565 -4571 4582 0
c (( - aux1109 + SATLiteral(413) + SATLiteral(533))<=0)
-533 -4589 0
-413 -4589 0
-413 -533 -4590 0
c (0<=( - aux1109 + SATLiteral(413) + SATLiteral(533)))
533 4590 0
413 4590 0
413 533 4589 0
c (( - aux1110 + SATLiteral(428) + SATLiteral(518))<=0)
-518 -4592 0
-428 -4592 0
-428 -518 -4593 0
c (0<=( - aux1110 + SATLiteral(428) + SATLiteral(518)))
518 4593 0
428 4593 0
428 518 4592 0
c (( - aux1111 + SATLiteral(458) + SATLiteral(503))<=0)
-503 -4595 0
-458 -4595 0
-458 -503 -4596 0
c (0<=( - aux1111 + SATLiteral(458) + SATLiteral(503)))
503 4596 0
458 4596 0
458 503 4595 0
c (( - aux1112 + SATLiteral(473) + SATLiteral(488))<=0)
-488 -4598 0
-473 -4598 0
-473 -488 -4599 0
c (0<=( - aux1112 + SATLiteral(473) + SATLiteral(488)))
488 4599 0
473 4599 0
473 488 4598 0
c ((aux1112 - aux1113 + SATLiteral(443))<=0)
4598 -4601 0
4599 -4602 0
-443 -4601 0
-443 4598 -4602 0
-443 4599 -4604 0
c (0<=(aux1112 - aux1113 + SATLiteral(443)))
-4599 4604 0
-4598 4602 0
443 4604 0
443 -4599 4602 0
443 -4598 4601 0
c ((aux1109 + aux1111 - aux1114)<=0)
4595 -4606 0
4596 -4607 0
4589 -4606 0
4589 4595 -4607 0
4589 4596 -4609 0
4590 -4607 0
4590 4595 -4609 0
4590 4596 -4611 0
c (0<=(aux1109 + aux1111 - aux1114))
-4596 4611 0
-4595 4609 0
-4590 4611 0
-4590 -4596 4609 0
-4590 -4595 4607 0
-4589 4609 0
-4589 -4596 4607 0
-4589 -4595 4606 0
c (( - aux1115 + SATLiteral(415) + SATLiteral(535))<=0)
-535 -4613 0
-415 -4613 0
-415 -535 -4614 0
c (0<=( - aux1115 + SATLiteral(415) + SATLiteral(535)))
535 4614 0
415 4614 0
415 535 4613 0
c (( - aux1116 + SATLiteral(430) + SATLiteral(520))<=0)
-520 -4616 0
-430 -4616 0
-430 -520 -4617 0
c (0<=( - aux1116 + SATLiteral(430) + SATLiteral(520)))
520 4617 0
430 4617 0
430 520 4616 0
c (( - aux1117 + SATLiteral(460) + SATLiteral(505))<=0)
-505 -4619 0
-460 -4619 0
-460 -505 -4620 0
c (0<=( - aux1117 + SATLiteral(460) + SATLiteral(505)))
505 4620 0
460 4620 0
460 505 4619 0
c (( - aux1118 + SATLiteral(475) + SATLiteral(490))<=0)
-490 -4622 0
-475 -4622 0
-475 -490 -4623 0
c (0<=( - aux1118 + SATLiteral(475) + SATLiteral(490)))
490 4623 0
475 4623 0
475 490 4622 0
c ((aux1118 - aux1119 + SATLiteral(445))<=0)
4622 -4625 0
4623 -4626 0
-445 -4625 0
-445 4622 -4626 0
-445 4623 -4628 0
c (0<=(aux1118 - aux1119 + SATLiteral(445)))
-4623 4628 0
-4622 4626 0
445 4628 0
445 -4623 4626 0
445 -4622 4625 0
c ((aux1115 + aux1117 - aux1120)<=0)
4619 -4630 0
4620 -4631 0
4613 -4630 0
4613 4619 -4631 0
4613 4620 -4633 0
4614 -4631 0
4614 4619 -4633 0
4614 4620 -4635 0
c (0<=(aux1115 + aux1117 - aux1120))
-4620 4635 0
-4619 4633 0
-4614 4635 0
-4614 -4620 4633 0
-4614 -4619 4631 0
-4613 4633 0
-4613 -4620 4631 0
-4613 -4619 4630 0
c (( - aux1121 + SATLiteral(417) + SATLiteral(537))<=0)
-537 -4637 0
-417 -4637 0
-417 -537 -4638 0
c (0<=( - aux1121 + SATLiteral(417) + SATLiteral(537)))
537 4638 0
417 4638 0
417 537 4637 0
c (( - aux1122 + SATLiteral(432) + SATLiteral(522))<=0)
-522 -4640 0
-432 -4640 0
-432 -522 -4641 0
c (0<=( - aux1122 + SATLiteral(432) + SATLiteral(522)))
522 4641 0
432 4641 0
432 522 4640 0
c (( - aux1123 + SATLiteral(462) + SATLiteral(507))<=0)
-507 -4643 0
-462 -4643 0
-462 -507 -4644 0
c (0<=( - aux1123 + SATLiteral(462) + SATLiteral(507)))
507 4644 0
462 4644 0
462 507 4643 0
c (( - aux1124 + SATLiteral(477) + SATLiteral(492))<=0)
-492 -4646 0
-477 -4646 0
-477 -492 -4647 0
c (0<=( - aux1124 + SATLiteral(477) + SATLiteral(492)))
492 4647 0
477 4647 0
477 492 4646 0
c ((aux1124 - aux1125 + SATLiteral(447))<=0)
4646 -4649 0
4647 -4650 0
-447 -4649 0
-447 4646 -4650 0
-447 4647 -4652 0
c (0<=(aux1124 - aux1125 + SATLiteral(447)))
-4647 4652 0
-4646 4650 0
447 4652 0
447 -4647 4650 0
447 -4646 4649 0
c ((aux1121 + aux1123 - aux1126)<=0)
4643 -4654 0
4644 -4655 0
4637 -4654 0
4637 4643 -4655 0
4637 4644 -4657 0
4638 -4655 0
4638 4643 -4657 0
4638 4644 -4659 0
c (0<=(aux1121 + aux1123 - aux1126))
-4644 4659 0
-4643 4657 0
-4638 4659 0
-4638 -4644 4657 0
-4638 -4643 4655 0
-4637 4657 0
-4637 -4644 4655 0
-4637 -4643 4654 0
c (( - aux1127 + SATLiteral(419) + SATLiteral(539))<=0)
-539 -4661 0
-419 -4661 0
-419 -539 -4662 0
c (0<=( - aux1127 + SATLiteral(419) + SATLiteral(539)))
539 4662 0
419 4662 0
419 539 4661 0
c (( - aux1128 + SATLiteral(434) + SATLiteral(524))<=0)
-524 -4664 0
-434 -4664 0
-434 -524 -4665 0
c (0<=( - aux1128 + SATLiteral(434) + SATLiteral(524)))
524 4665 0
434 4665 0
434 524 4664 0
c (( - aux1129 + SATLiteral(464) + SATLiteral(509))<=0)
-509 -4667 0
-464 -4667 0
-464 -509 -4668 0
c (0<=( - aux1129 + SATLiteral(464) + SATLiteral(509)))
509 4668 0
464 4668 0
464 509 4667 0
c (( - aux1130 + SATLiteral(479) + SATLiteral(494))<=0)
-494 -4670 0
-479 -4670 0
-479 -494 -4671 0
c (0<=( - aux1130 + SATLiteral(479) + SATLiteral(494)))
494 4671 0
479 4671 0
479 494 4670 0
c ((aux1130 - aux1131 + SATLiteral(449))<=0)
4670 -4673 0
4671 -4674 0
-449 -4673 0
-449 4670 -4674 0
-449 4671 -4676 0
c (0<=(aux1130 - aux1131 + SATLiteral(449)))
-4671 4676 0
-4670 4674 0
449 4676 0
449 -4671 4674 0
449 -4670 4673 0
c ((aux1127 + aux1129 - aux1132)<=0)
4667 -4678 0
4668 -4679 0
4661 -4678 0
4661 4667 -4679 0
4661 4668 -4681 0
4662 -4679 0
4662 4667 -4681 0
4662 4668 -4683 0
c (0<=(aux1127 + aux1129 - aux1132))
-4668 4683 0
-4667 4681 0
-4662 4683 0
-4662 -4668 4681 0
-4662 -4667 4679 0
-4661 4681 0
-4661 -4668 4679 0
-4661 -4667 4678 0
c (( - aux1133 + SATLiteral(421) + SATLiteral(541))<=0)
-541 -4685 0
-421 -4685 0
-421 -541 -4686 0
c (0<=( - aux1133 + SATLiteral(421) + SATLiteral(541)))
541 4686 0
421 4686 0
421 541 4685 0
c (( - aux1134 + SATLiteral(436) + SATLiteral(526))<=0)
-526 -4688 0
-436 -4688 0
-436 -526 -4689 0
c (0<=( - aux1134 + SATLiteral(436) + SATLiteral(526)))
526 4689 0
436 4689 0
436 526 4688 0
c (( - aux1135 + SATLiteral(466) + SATLiteral(511))<=0)
-511 -4691 0
-466 -4691 0
-466 -511 -4692 0
c (0<=( - aux1135 + SATLiteral(466) + SATLiteral(511)))
511 4692 0
466 4692 0
466 511 4691 0
c (( - aux1136 + SATLiteral(481) + SATLiteral(496))<=0)
-496 -4694 0
-481 -4694 0
-481 -496 -4695 0
c (0<=( - aux1136 + SATLiteral(481) + SATLiteral(496)))
496 4695 0
481 4695 0
481 496 4694 0
c ((aux1136 - aux1137 + SATLiteral(451))<=0)
4694 -4697 0
4695 -4698 0
-451 -4697 0
-451 4694 -4698 0
-451 4695 -4700 0
c (0<=(aux1136 - aux1137 + SATLiteral(451)))
-4695 4700 0
-4694 4698 0
451 4700 0
451 -4695 4698 0
451 -4694 4697 0
c ((aux1133 + aux1135 - aux1138)<=0)
4691 -4702 0
4692 -4703 0
4685 -4702 0
4685 4691 -4703 0
4685 4692 -4705 0
4686 -4703 0
4686 4691 -4705 0
4686 4692 -4707 0
c (0<=(aux1133 + aux1135 - aux1138))
-4692 4707 0
-4691 4705 0
-4686 4707 0
-4686 -4692 4705 0
-4686 -4691 4703 0
-4685 4705 0
-4685 -4692 4703 0
-4685 -4691 4702 0
c (( - aux1139 + SATLiteral(-420) + SATLiteral(-540))<=0)
540 -4709 0
420 -4709 0
420 540 -4710 0
c (0<=( - aux1139 + SATLiteral(-420) + SATLiteral(-540)))
-540 4710 0
-420 4710 0
-420 -540 4709 0
c (( - aux1140 + SATLiteral(-435) + SATLiteral(-525))<=0)
525 -4712 0
435 -4712 0
435 525 -4713 0
c (0<=( - aux1140 + SATLiteral(-435) + SATLiteral(-525)))
-525 4713 0
-435 4713 0
-435 -525 4712 0
c (( - aux1141 + SATLiteral(-465) + SATLiteral(-510))<=0)
510 -4715 0
465 -4715 0
465 510 -4716 0
c (0<=( - aux1141 + SATLiteral(-465) + SATLiteral(-510)))
-510 4716 0
-465 4716 0
-465 -510 4715 0
c (( - aux1142 + SATLiteral(-480) + SATLiteral(-495))<=0)
495 -4718 0
480 -4718 0
480 495 -4719 0
c (0<=( - aux1142 + SATLiteral(-480) + SATLiteral(-495)))
-495 4719 0
-480 4719 0
-480 -495 4718 0
c ((aux1142 - aux1143 + SATLiteral(-450))<=0)
4718 -4721 0
4719 -4722 0
450 -4721 0
450 4718 -4722 0
450 4719 -4724 0
c (0<=(aux1142 - aux1143 + SATLiteral(-450)))
-4719 4724 0
-4718 4722 0
-450 4724 0
-450 -4719 4722 0
-450 -4718 4721 0
c ((aux1139 + aux1141 - aux1144)<=0)
4715 -4726 0
4716 -4727 0
4709 -4726 0
4709 4715 -4727 0
4709 4716 -4729 0
4710 -4727 0
4710 4715 -4729 0
4710 4716 -4731 0
c (0<=(aux1139 + aux1141 - aux1144))
-4716 4731 0
-4715 4729 0
-4710 4731 0
-4710 -4716 4729 0
-4710 -4715 4727 0
-4709 4729 0
-4709 -4716 4727 0
-4709 -4715 4726 0
c (( - aux1145 + SATLiteral(542) + SATLiteral(662))<=0)
-662 -4733 0
-542 -4733 0
-542 -662 -4734 0
c (0<=( - aux1145 + SATLiteral(542) + SATLiteral(662)))
662 4734 0
542 4734 0
542 662 4733 0
c (( - aux1146 + SATLiteral(557) + SATLiteral(647))<=0)
-647 -4736 0
-557 -4736 0
-557 -647 -4737 0
c (0<=( - aux1146 + SATLiteral(557) + SATLiteral(647)))
647 4737 0
557 4737 0
557 647 4736 0
c (( - aux1147 + SATLiteral(587) + SATLiteral(632))<=0)
-632 -4739 0
-587 -4739 0
-587 -632 -4740 0
c (0<=( - aux1147 + SATLiteral(587) + SATLiteral(632)))
632 4740 0
587 4740 0
587 632 4739 0
c (( - aux1148 + SATLiteral(602) + SATLiteral(617))<=0)
-617 -4742 0
-602 -4742 0
-602 -617 -4743 0
c (0<=( - aux1148 + SATLiteral(602) + SATLiteral(617)))
617 4743 0
602 4743 0
602 617 4742 0
c ((aux1148 - aux1149 + SATLiteral(572))<=0)
4742 -4745 0
4743 -4746 0
-572 -4745 0
-572 4742 -4746 0
-572 4743 -4748 0
c (0<=(aux1148 - aux1149 + SATLiteral(572)))
-4743 4748 0
-4742 4746 0
572 4748 0
572 -4743 4746 0
572 -4742 4745 0
c ((aux1145 + aux1147 - aux1150)<=0)
4739 -4750 0
4740 -4751 0
4733 -4750 0
4733 4739 -4751 0
4733 4740 -4753 0
4734 -4751 0
4734 4739 -4753 0
4734 4740 -4755 0
c (0<=(aux1145 + aux1147 - aux1150))
-4740 4755 0
-4739 4753 0
-4734 4755 0
-4734 -4740 4753 0
-4734 -4739 4751 0
-4733 4753 0
-4733 -4740 4751 0
-4733 -4739 4750 0
c (( - aux1151 + SATLiteral(544) + SATLiteral(664))<=0)
-664 -4757 0
-544 -4757 0
-544 -664 -4758 0
c (0<=( - aux1151 + SATLiteral(544) + SATLiteral(664)))
664 4758 0
544 4758 0
544 664 4757 0
c (( - aux1152 + SATLiteral(559) + SATLiteral(649))<=0)
-649 -4760 0
-559 -4760 0
-559 -649 -4761 0
c (0<=( - aux1152 + SATLiteral(559) + SATLiteral(649)))
649 4761 0
559 4761 0
559 649 4760 0
c (( - aux1153 + SATLiteral(589) + SATLiteral(634))<=0)
-634 -4763 0
-589 -4763 0
-589 -634 -4764 0
c (0<=( - aux1153 + SATLiteral(589) + SATLiteral(634)))
634 4764 0
589 4764 0
589 634 4763 0
c (( - aux1154 + SATLiteral(604) + SATLiteral(619))<=0)
-619 -4766 0
-604 -4766 0
-604 -619 -4767 0
c (0<=( - aux1154 + SATLiteral(604) + SATLiteral(619)))
619 4767 0
604 4767 0
604 619 4766 0
c ((aux1154 - aux1155 + SATLiteral(574))<=0)
4766 -4769 0
4767 -4770 0
-574 -4769 0
-574 4766 -4770 0
-574 4767 -4772 0
c (0<=(aux1154 - aux1155 + SATLiteral(574)))
-4767 4772 0
-4766 4770 0
574 4772 0
574 -4767 4770 0
574 -4766 4769 0
c ((aux1151 + aux1153 - aux1156)<=0)
4763 -4774 0
4764 -4775 0
4757 -4774 0
4757 4763 -4775 0
4757 4764 -4777 0
4758 -4775 0
4758 4763 -4777 0
4758 4764 -4779 0
c (0<=(aux1151 + aux1153 - aux1156))
-4764 4779 0
-4763 4777 0
-4758 4779 0
-4758 -4764 4777 0
-4758 -4763 4775 0
-4757 4777 0
-4757 -4764 4775 0
-4757 -4763 4774 0
c (( - aux1157 + SATLiteral(546) + SATLiteral(666))<=0)
-666 -4781 0
-546 -4781 0
-546 -666 -4782 0
c (0<=( - aux1157 + SATLiteral(546) + SATLiteral(666)))
666 4782 0
546 4782 0
546 666 4781 0
c (( - aux1158 + SATLiteral(561) + SATLiteral(651))<=0)
-651 -4784 0
-561 -4784 0
-561 -651 -4785 0
c (0<=( - aux1158 + SATLiteral(561) + SATLiteral(651)))
651 4785 0
561 4785 0
561 651 4784 0
c (( - aux1159 + SATLiteral(591) + SATLiteral(636))<=0)
-636 -4787 0
-591 -4787 0
-591 -636 -4788 0
c (0<=( - aux1159 + SATLiteral(591) + SATLiteral(636)))
636 4788 0
591 4788 0
591 636 4787 0
c (( - aux1160 + SATLiteral(606) + SATLiteral(621))<=0)
-621 -4790 0
-606 -4790 0
-606 -621 -4791 0
c (0<=( - aux1160 + SATLiteral(606) + SATLiteral(621)))
621 4791 0
606 4791 0
606 621 4790 0
c ((aux1160 - aux1161 + SATLiteral(576))<=0)
4790 -4793 0
4791 -4794 0
-576 -4793 0
-576 4790 -4794 0
-576 4791 -4796 0
c (0<=(aux1160 - aux1161 + SATLiteral(576)))
-4791 4796 0
-4790 4794 0
576 4796 0
576 -4791 4794 0
576 -4790 4793 0
c ((aux1157 + aux1159 - aux1162)<=0)
4787 -4798 0
4788 -4799 0
4781 -4798 0
4781 4787 -4799 0
4781 4788 -4801 0
4782 -4799 0
4782 4787 -4801 0
4782 4788 -4803 0
c (0<=(aux1157 + aux1159 - aux1162))
-4788 4803 0
-4787 4801 0
-4782 4803 0
-4782 -4788 4801 0
-4782 -4787 4799 0
-4781 4801 0
-4781 -4788 4799 0
-4781 -4787 4798 0
c (( - aux1163 + SATLiteral(548) + SATLiteral(668))<=0)
-668 -4805 0
-548 -4805 0
-548 -668 -4806 0
c (0<=( - aux1163 + SATLiteral(548) + SATLiteral(668)))
668 4806 0
548 4806 0
548 668 4805 0
c (( - aux1164 + SATLiteral(563) + SATLiteral(653))<=0)
-653 -4808 0
-563 -4808 0
-563 -653 -4809 0
c (0<=( - aux1164 + SATLiteral(563) + SATLiteral(653)))
653 4809 0
563 4809 0
563 653 4808 0
c (( - aux1165 + SATLiteral(593) + SATLiteral(638))<=0)
-638 -4811 0
-593 -4811 0
-593 -638 -4812 0
c (0<=( - aux1165 + SATLiteral(593) + SATLiteral(638)))
638 4812 0
593 4812 0
593 638 4811 0
c (( - aux1166 + SATLiteral(608) + SATLiteral(623))<=0)
-623 -4814 0
-608 -4814 0
-608 -623 -4815 0
c (0<=( - aux1166 + SATLiteral(608) + SATLiteral(623)))
623 4815 0
608 4815 0
608 623 4814 0
c ((aux1166 - aux1167 + SATLiteral(578))<=0)
4814 -4817 0
4815 -4818 0
-578 -4817 0
-578 4814 -4818 0
-578 4815 -4820 0
c (0<=(aux1166 - aux1167 + SATLiteral(578)))
-4815 4820 0
-4814 4818 0
578 4820 0
578 -4815 4818 0
578 -4814 4817 0
c ((aux1163 + aux1165 - aux1168)<=0)
4811 -4822 0
4812 -4823 0
4805 -4822 0
4805 4811 -4823 0
4805 4812 -4825 0
4806 -4823 0
4806 4811 -4825 0
4806 4812 -4827 0
c (0<=(aux1163 + aux1165 - aux1168))
-4812 4827 0
-4811 4825 0
-4806 4827 0
-4806 -4812 4825 0
-4806 -4811 4823 0
-4805 4825 0
-4805 -4812 4823 0
-4805 -4811 4822 0
c (( - aux1169 + SATLiteral(550) + SATLiteral(670))<=0)
-670 -4829 0
-550 -4829 0
-550 -670 -4830 0
c (0<=( - aux1169 + SATLiteral(550) + SATLiteral(670)))
670 4830 0
550 4830 0
550 670 4829 0
c (( - aux1170 + SATLiteral(565) + SATLiteral(655))<=0)
-655 -4832 0
-565 -4832 0
-565 -655 -4833 0
c (0<=( - aux1170 + SATLiteral(565) + SATLiteral(655)))
655 4833 0
565 4833 0
565 655 4832 0
c (( - aux1171 + SATLiteral(595) + SATLiteral(640))<=0)
-640 -4835 0
-595 -4835 0
-595 -640 -4836 0
c (0<=( - aux1171 + SATLiteral(595) + SATLiteral(640)))
640 4836 0
595 4836 0
595 640 4835 0
c (( - aux1172 + SATLiteral(610) + SATLiteral(625))<=0)
-625 -4838 0
-610 -4838 0
-610 -625 -4839 0
c (0<=( - aux1172 + SATLiteral(610) + SATLiteral(625)))
625 4839 0
610 4839 0
610 625 4838 0
c ((aux1172 - aux1173 + SATLiteral(580))<=0)
4838 -4841 0
4839 -4842 0
-580 -4841 0
-580 4838 -4842 0
-580 4839 -4844 0
c (0<=(aux1172 - aux1173 + SATLiteral(580)))
-4839 4844 0
-4838 4842 0
580 4844 0
580 -4839 4842 0
580 -4838 4841 0
c ((aux1169 + aux1171 - aux1174)<=0)
4835 -4846 0
4836 -4847 0
4829 -4846 0
4829 4835 -4847 0
4829 4836 -4849 0
4830 -4847 0
4830 4835 -4849 0
4830 4836 -4851 0
c (0<=(aux1169 + aux1171 - aux1174))
-4836 4851 0
-4835 4849 0
-4830 4851 0
-4830 -4836 4849 0
-4830 -4835 4847 0
-4829 4849 0
-4829 -4836 4847 0
-4829 -4835 4846 0
c (( - aux1175 + SATLiteral(552) + SATLiteral(672))<=0)
-672 -4853 0
-552 -4853 0
-552 -672 -4854 0
c (0<=( - aux1175 + SATLiteral(552) + SATLiteral(672)))
672 4854 0
552 4854 0
552 672 4853 0
c (( - aux1176 + SATLiteral(567) + SATLiteral(657))<=0)
-657 -4856 0
-567 -4856 0
-567 -657 -4857 0
c (0<=( - aux1176 + SATLiteral(567) + SATLiteral(657)))
657 4857 0
567 4857 0
567 657 4856 0
c (( - aux1177 + SATLiteral(597) + SATLiteral(642))<=0)
-642 -4859 0
-597 -4859 0
-597 -642 -4860 0
c (0<=( - aux1177 + SATLiteral(597) + SATLiteral(642)))
642 4860 0
597 4860 0
597 642 4859 0
c (( - aux1178 + SATLiteral(612) + SATLiteral(627))<=0)
-627 -4862 0
-612 -4862 0
-612 -627 -4863 0
c (0<=( - aux1178 + SATLiteral(612) + SATLiteral(627)))
627 4863 0
612 4863 0
612 627 4862 0
c ((aux1178 - aux1179 + SATLiteral(582))<=0)
4862 -4865 0
4863 -4866 0
-582 -4865 0
-582 4862 -4866 0
-582 4863 -4868 0
c (0<=(aux1178 - aux1179 + SATLiteral(582)))
-4863 4868 0
-4862 4866 0
582 4868 0
582 -4863 4866 0
582 -4862 4865 0
c ((aux1175 + aux1177 - aux1180)<=0)
4859 -4870 0
4860 -4871 0
4853 -4870 0
4853 4859 -4871 0
4853 4860 -4873 0
4854 -4871 0
4854 4859 -4873 0
4854 4860 -4875 0
c (0<=(aux1175 + aux1177 - aux1180))
-4860 4875 0
-4859 4873 0
-4854 4875 0
-4854 -4860 4873 0
-4854 -4859 4871 0
-4853 4873 0
-4853 -4860 4871 0
-4853 -4859 4870 0
c (( - aux1181 + SATLiteral(554) + SATLiteral(674))<=0)
-674 -4877 0
-554 -4877 0
-554 -674 -4878 0
c (0<=( - aux1181 + SATLiteral(554) + SATLiteral(674)))
674 4878 0
554 4878 0
554 674 4877 0
c (( - aux1182 + SATLiteral(569) + SATLiteral(659))<=0)
-659 -4880 0
-569 -4880 0
-569 -659 -4881 0
c (0<=( - aux1182 + SATLiteral(569) + SATLiteral(659)))
659 4881 0
569 4881 0
569 659 4880 0
c (( - aux1183 + SATLiteral(599) + SATLiteral(644))<=0)
-644 -4883 0
-599 -4883 0
-599 -644 -4884 0
c (0<=( - aux1183 + SATLiteral(599) + SATLiteral(644)))
644 4884 0
599 4884 0
599 644 4883 0
c (( - aux1184 + SATLiteral(614) + SATLiteral(629))<=0)
-629 -4886 0
-614 -4886 0
-614 -629 -4887 0
c (0<=( - aux1184 + SATLiteral(614) + SATLiteral(629)))
629 4887 0
614 4887 0
614 629 4886 0
c ((aux1184 - aux1185 + SATLiteral(584))<=0)
4886 -4889 0
4887 -4890 0
-584 -4889 0
-584 4886 -4890 0
-584 4887 -4892 0
c (0<=(aux1184 - aux1185 + SATLiteral(584)))
-4887 4892 0
-4886 4890 0
584 4892 0
584 -4887 4890 0
584 -4886 4889 0
c ((aux1181 + aux1183 - aux1186)<=0)
4883 -4894 0
4884 -4895 0
4877 -4894 0
4877 4883 -4895 0
4877 4884 -4897 0
4878 -4895 0
4878 4883 -4897 0
4878 4884 -4899 0
c (0<=(aux1181 + aux1183 - aux1186))
-4884 4899 0
-4883 4897 0
-4878 4899 0
-4878 -4884 4897 0
-4878 -4883 4895 0
-4877 4897 0
-4877 -4884 4895 0
-4877 -4883 4894 0
c (( - aux1187 + SATLiteral(556) + SATLiteral(676))<=0)
-676 -4901 0
-556 -4901 0
-556 -676 -4902 0
c (0<=( - aux1187 + SATLiteral(556) + SATLiteral(676)))
676 4902 0
556 4902 0
556 676 4901 0
c (( - aux1188 + SATLiteral(571) + SATLiteral(661))<=0)
-661 -4904 0
-571 -4904 0
-571 -661 -4905 0
c (0<=( - aux1188 + SATLiteral(571) + SATLiteral(661)))
661 4905 0
571 4905 0
571 661 4904 0
c (( - aux1189 + SATLiteral(601) + SATLiteral(646))<=0)
-646 -4907 0
-601 -4907 0
-601 -646 -4908 0
c (0<=( - aux1189 + SATLiteral(601) + SATLiteral(646)))
646 4908 0
601 4908 0
601 646 4907 0
c (( - aux1190 + SATLiteral(616) + SATLiteral(631))<=0)
-631 -4910 0
-616 -4910 0
-616 -631 -4911 0
c (0<=( - aux1190 + SATLiteral(616) + SATLiteral(631)))
631 4911 0
616 4911 0
616 631 4910 0
c ((aux1190 - aux1191 + SATLiteral(586))<=0)
4910 -4913 0
4911 -4914 0
-586 -4913 0
-586 4910 -4914 0
-586 4911 -4916 0
c (0<=(aux1190 - aux1191 + SATLiteral(586)))
-4911 4916 0
-4910 4914 0
586 4916 0
586 -4911 4914 0
586 -4910 4913 0
c ((aux1187 + aux1189 - aux1192)<=0)
4907 -4918 0
4908 -4919 0
4901 -4918 0
4901 4907 -4919 0
4901 4908 -4921 0
4902 -4919 0
4902 4907 -4921 0
4902 4908 -4923 0
c (0<=(aux1187 + aux1189 - aux1192))
-4908 4923 0
-4907 4921 0
-4902 4923 0
-4902 -4908 4921 0
-4902 -4907 4919 0
-4901 4921 0
-4901 -4908 4919 0
-4901 -4907 4918 0
c (( - aux1193 + SATLiteral(-555) + SATLiteral(-675))<=0)
675 -4925 0
555 -4925 0
555 675 -4926 0
c (0<=( - aux1193 + SATLiteral(-555) + SATLiteral(-675)))
-675 4926 0
-555 4926 0
-555 -675 4925 0
c (( - aux1194 + SATLiteral(-570) + SATLiteral(-660))<=0)
660 -4928 0
570 -4928 0
570 660 -4929 0
c (0<=( - aux1194 + SATLiteral(-570) + SATLiteral(-660)))
-660 4929 0
-570 4929 0
-570 -660 4928 0
c (( - aux1195 + SATLiteral(-600) + SATLiteral(-645))<=0)
645 -4931 0
600 -4931 0
600 645 -4932 0
c (0<=( - aux1195 + SATLiteral(-600) + SATLiteral(-645)))
-645 4932 0
-600 4932 0
-600 -645 4931 0
c (( - aux1196 + SATLiteral(-615) + SATLiteral(-630))<=0)
630 -4934 0
615 -4934 0
615 630 -4935 0
c (0<=( - aux1196 + SATLiteral(-615) + SATLiteral(-630)))
-630 4935 0
-615 4935 0
-615 -630 4934 0
c ((aux1196 - aux1197 + SATLiteral(-585))<=0)
4934 -4937 0
4935 -4938 0
585 -4937 0
585 4934 -4938 0
585 4935 -4940 0
c (0<=(aux1196 - aux1197 + SATLiteral(-585)))
-4935 4940 0
-4934 4938 0
-585 4940 0
-585 -4935 4938 0
-585 -4934 4937 0
c ((aux1193 + aux1195 - aux1198)<=0)
4931 -4942 0
4932 -4943 0
4925 -4942 0
4925 4931 -4943 0
4925 4932 -4945 0
4926 -4943 0
4926 4931 -4945 0
4926 4932 -4947 0
c (0<=(aux1193 + aux1195 - aux1198))
-4932 4947 0
-4931 4945 0
-4926 4947 0
-4926 -4932 4945 0
-4926 -4931 4943 0
-4925 4945 0
-4925 -4932 4943 0
-4925 -4931 4942 0
c ((SATLiteral(677) + SATLiteral(797) - aux1199)<=0)
-797 -4949 0
-677 -4949 0
-677 -797 -4950 0
c (0<=(SATLiteral(677) + SATLiteral(797) - aux1199))
797 4950 0
677 4950 0
677 797 4949 0
c ((SATLiteral(692) + SATLiteral(782) - aux1200)<=0)
-782 -4952 0
-692 -4952 0
-692 -782 -4953 0
c (0<=(SATLiteral(692) + SATLiteral(782) - aux1200))
782 4953 0
692 4953 0
692 782 4952 0
c ((SATLiteral(722) + SATLiteral(767) - aux1201)<=0)
-767 -4955 0
-722 -4955 0
-722 -767 -4956 0
c (0<=(SATLiteral(722) + SATLiteral(767) - aux1201))
767 4956 0
722 4956 0
722 767 4955 0
c ((SATLiteral(737) + SATLiteral(752) - aux1202)<=0)
-752 -4958 0
-737 -4958 0
-737 -752 -4959 0
c (0<=(SATLiteral(737) + SATLiteral(752) - aux1202))
752 4959 0
737 4959 0
737 752 4958 0
c ((SATLiteral(707) + aux1202 - aux1203)<=0)
4958 -4961 0
4959 -4962 0
-707 -4961 0
-707 4958 -4962 0
-707 4959 -4964 0
c (0<=(SATLiteral(707) + aux1202 - aux1203))
-4959 4964 0
-4958 4962 0
707 4964 0
707 -4959 4962 0
707 -4958 4961 0
c ((aux1199 + aux1201 - aux1204)<=0)
4955 -4966 0
4956 -4967 0
4949 -4966 0
4949 4955 -4967 0
4949 4956 -4969 0
4950 -4967 0
4950 4955 -4969 0
4950 4956 -4971 0
c (0<=(aux1199 + aux1201 - aux1204))
-4956 4971 0
-4955 4969 0
-4950 4971 0
-4950 -4956 4969 0
-4950 -4955 4967 0
-4949 4969 0
-4949 -4956 4967 0
-4949 -4955 4966 0
c ((SATLiteral(679) + SATLiteral(799) - aux1205)<=0)
-799 -4973 0
-679 -4973 0
-679 -799 -4974 0
c (0<=(SATLiteral(679) + SATLiteral(799) - aux1205))
799 4974 0
679 4974 0
679 799 4973 0
c ((SATLiteral(694) + SATLiteral(784) - aux1206)<=0)
-784 -4976 0
-694 -4976 0
-694 -784 -4977 0
c (0<=(SATLiteral(694) + SATLiteral(784) - aux1206))
784 4977 0
694 4977 0
694 784 4976 0
c ((SATLiteral(724) + SATLiteral(769) - aux1207)<=0)
-769 -4979 0
-724 -4979 0
-724 -769 -4980 0
c (0<=(SATLiteral(724) + SATLiteral(769) - aux1207))
769 4980 0
724 4980 0
724 769 4979 0
c ((SATLiteral(739) + SATLiteral(754) - aux1208)<=0)
-754 -4982 0
-739 -4982 0
-739 -754 -4983 0
c (0<=(SATLiteral(739) + SATLiteral(754) - aux1208))
754 4983 0
739 4983 0
739 754 4982 0
c ((SATLiteral(709) + aux1208 - aux1209)<=0)
4982 -4985 0
4983 -4986 0
-709 -4985 0
-709 4982 -4986 0
-709 4983 -4988 0
c (0<=(SATLiteral(709) + aux1208 - aux1209))
-4983 4988 0
-4982 4986 0
709 4988 0
709 -4983 4986 0
709 -4982 4985 0
c ((aux1205 + aux1207 - aux1210)<=0)
4979 -4990 0
4980 -4991 0
4973 -4990 0
4973 4979 -4991 0
4973 4980 -4993 0
4974 -4991 0
4974 4979 -4993 0
4974 4980 -4995 0
c (0<=(aux1205 + aux1207 - aux1210))
-4980 4995 0
-4979 4993 0
-4974 4995 0
-4974 -4980 4993 0
-4974 -4979 4991 0
-4973 4993 0
-4973 -4980 4991 0
-4973 -4979 4990 0
c ((SATLiteral(681) + SATLiteral(801) - aux1211)<=0)
-801 -4997 0
-681 -4997 0
-681 -801 -4998 0
c (0<=(SATLiteral(681) + SATLiteral(801) - aux1211))
801 4998 0
681 4998 0
681 801 4997 0
c ((SATLiteral(696) + SATLiteral(786) - aux1212)<=0)
-786 -5000 0
-696 -5000 0
-696 -786 -5001 0
c (0<=(SATLiteral(696) + SATLiteral(786) - aux1212))
786 5001 0
696 5001 0
696 786 5000 0
c ((SATLiteral(726) + SATLiteral(771) - aux1213)<=0)
-771 -5003 0
-726 -5003 0
-726 -771 -5004 0
c (0<=(SATLiteral(726) + SATLiteral(771) - aux1213))
771 5004 0
726 5004 0
726 771 5003 0
c ((SATLiteral(741) + SATLiteral(756) - aux1214)<=0)
-756 -5006 0
-741 -5006 0
-741 -756 -5007 0
c (0<=(SATLiteral(741) + SATLiteral(756) - aux1214))
756 5007 0
741 5007 0
741 756 5006 0
c ((SATLiteral(711) + aux1214 - aux1215)<=0)
5006 -5009 0
5007 -5010 0
-711 -5009 0
-711 5006 -5010 0
-711 5007 -5012 0
c (0<=(SATLiteral(711) + aux1214 - aux1215))
-5007 5012 0
-5006 5010 0
711 5012 0
711 -5007 5010 0
711 -5006 5009 0
c ((aux1211 + aux1213 - aux1216)<=0)
5003 -5014 0
5004 -5015 0
4997 -5014 0
4997 5003 -5015 0
4997 5004 -5017 0
4998 -5015 0
4998 5003 -5017 0
4998 5004 -5019 0
c (0<=(aux1211 + aux1213 - aux1216))
-5004 5019 0
-5003 5017 0
-4998 5019 0
-4998 -5004 5017 0
-4998 -5003 5015 0
-4997 5017 0
-4997 -5004 5015 0
-4997 -5003 5014 0
c ((SATLiteral(683) + SATLiteral(803) - aux1217)<=0)
-803 -5021 0
-683 -5021 0
-683 -803 -5022 0
c (0<=(SATLiteral(683) + SATLiteral(803) - aux1217))
803 5022 0
683 5022 0
683 803 5021 0
c ((SATLiteral(698) + SATLiteral(788) - aux1218)<=0)
-788 -5024 0
-698 -5024 0
-698 -788 -5025 0
c (0<=(SATLiteral(698) + SATLiteral(788) - aux1218))
788 5025 0
698 5025 0
698 788 5024 0
c ((SATLiteral(728) + SATLiteral(773) - aux1219)<=0)
-773 -5027 0
-728 -5027 0
-728 -773 -5028 0
c (0<=(SATLiteral(728) + SATLiteral(773) - aux1219))
773 5028 0
728 5028 0
728 773 5027 0
c ((SATLiteral(743) + SATLiteral(758) - aux1220)<=0)
-758 -5030 0
-743 -5030 0
-743 -758 -5031 0
c (0<=(SATLiteral(743) + SATLiteral(758) - aux1220))
758 5031 0
743 5031 0
743 758 5030 0
c ((SATLiteral(713) + aux1220 - aux1221)<=0)
5030 -5033 0
5031 -5034 0
-713 -5033 0
-713 5030 -5034 0
-713 5031 -5036 0
c (0<=(SATLiteral(713) + aux1220 - aux1221))
-5031 5036 0
-5030 5034 0
713 5036 0
713 -5031 5034 0
713 -5030 5033 0
c ((aux1217 + aux1219 - aux1222)<=0)
5027 -5038 0
5028 -5039 0
5021 -5038 0
5021 5027 -5039 0
5021 5028 -5041 0
5022 -5039 0
5022 5027 -5041 0
5022 5028 -5043 0
c (0<=(aux1217 + aux1219 - aux1222))
-5028 5043 0
-5027 5041 0
-5022 5043 0
-5022 -5028 5041 0
-5022 -5027 5039 0
-5021 5041 0
-5021 -5028 5039 0
-5021 -5027 5038 0
c ((SATLiteral(685) + SATLiteral(805) - aux1223)<=0)
-805 -5045 0
-685 -5045 0
-685 -805 -5046 0
c (0<=(SATLiteral(685) + SATLiteral(805) - aux1223))
805 5046 0
685 5046 0
685 805 5045 0
c ((SATLiteral(700) + SATLiteral(790) - aux1224)<=0)
-790 -5048 0
-700 -5048 0
-700 -790 -5049 0
c (0<=(SATLiteral(700) + SATLiteral(790) - aux1224))
790 5049 0
700 5049 0
700 790 5048 0
c ((SATLiteral(730) + SATLiteral(775) - aux1225)<=0)
-775 -5051 0
-730 -5051 0
-730 -775 -5052 0
c (0<=(SATLiteral(730) + SATLiteral(775) - aux1225))
775 5052 0
730 5052 0
730 775 5051 0
c ((SATLiteral(745) + SATLiteral(760) - aux1226)<=0)
-760 -5054 0
-745 -5054 0
-745 -760 -5055 0
c (0<=(SATLiteral(745) + SATLiteral(760) - aux1226))
760 5055 0
745 5055 0
745 760 5054 0
c ((SATLiteral(715) + aux1226 - aux1227)<=0)
5054 -5057 0
5055 -5058 0
-715 -5057 0
-715 5054 -5058 0
-715 5055 -5060 0
c (0<=(SATLiteral(715) + aux1226 - aux1227))
-5055 5060 0
-5054 5058 0
715 5060 0
715 -5055 5058 0
715 -5054 5057 0
c ((aux1223 + aux1225 - aux1228)<=0)
5051 -5062 0
5052 -5063 0
5045 -5062 0
5045 5051 -5063 0
5045 5052 -5065 0
5046 -5063 0
5046 5051 -5065 0
5046 5052 -5067 0
c (0<=(aux1223 + aux1225 - aux1228))
-5052 5067 0
-5051 5065 0
-5046 5067 0
-5046 -5052 5065 0
-5046 -5051 5063 0
-5045 5065 0
-5045 -5052 5063 0
-5045 -5051 5062 0
c ((SATLiteral(687) + SATLiteral(807) - aux1229)<=0)
-807 -5069 0
-687 -5069 0
-687 -807 -5070 0
c (0<=(SATLiteral(687) + SATLiteral(807) - aux1229))
807 5070 0
687 5070 0
687 807 5069 0
c ((SATLiteral(702) + SATLiteral(792) - aux1230)<=0)
-792 -5072 0
-702 -5072 0
-702 -792 -5073 0
c (0<=(SATLiteral(702) + SATLiteral(792) - aux1230))
792 5073 0
702 5073 0
702 792 5072 0
c ((SATLiteral(732) + SATLiteral(777) - aux1231)<=0)
-777 -5075 0
-732 -5075 0
-732 -777 -5076 0
c (0<=(SATLiteral(732) + SATLiteral(777) - aux1231))
777 5076 0
732 5076 0
732 777 5075 0
c ((SATLiteral(747) + SATLiteral(762) - aux1232)<=0)
-762 -5078 0
-747 -5078 0
-747 -762 -5079 0
c (0<=(SATLiteral(747) + SATLiteral(762) - aux1232))
762 5079 0
747 5079 0
747 762 5078 0
c ((SATLiteral(717) + aux1232 - aux1233)<=0)
5078 -5081 0
5079 -5082 0
-717 -5081 0
-717 5078 -5082 0
-717 5079 -5084 0
c (0<=(SATLiteral(717) + aux1232 - aux1233))
-5079 5084 0
-5078 5082 0
717 5084 0
717 -5079 5082 0
717 -5078 5081 0
c ((aux1229 + aux1231 - aux1234)<=0)
5075 -5086 0
5076 -5087 0
5069 -5086 0
5069 5075 -5087 0
5069 5076 -5089 0
5070 -5087 0
5070 5075 -5089 0
5070 5076 -5091 0
c (0<=(aux1229 + aux1231 - aux1234))
-5076 5091 0
-5075 5089 0
-5070 5091 0
-5070 -5076 5089 0
-5070 -5075 5087 0
-5069 5089 0
-5069 -5076 5087 0
-5069 -5075 5086 0
c ((SATLiteral(689) + SATLiteral(809) - aux1235)<=0)
-809 -5093 0
-689 -5093 0
-689 -809 -5094 0
c (0<=(SATLiteral(689) + SATLiteral(809) - aux1235))
809 5094 0
689 5094 0
689 809 5093 0
c ((SATLiteral(704) + SATLiteral(794) - aux1236)<=0)
-794 -5096 0
-704 -5096 0
-704 -794 -5097 0
c (0<=(SATLiteral(704) + SATLiteral(794) - aux1236))
794 5097 0
704 5097 0
704 794 5096 0
c ((SATLiteral(734) + SATLiteral(779) - aux1237)<=0)
-779 -5099 0
-734 -5099 0
-734 -779 -5100 0
c (0<=(SATLiteral(734) + SATLiteral(779) - aux1237))
779 5100 0
734 5100 0
734 779 5099 0
c ((SATLiteral(749) + SATLiteral(764) - aux1238)<=0)
-764 -5102 0
-749 -5102 0
-749 -764 -5103 0
c (0<=(SATLiteral(749) + SATLiteral(764) - aux1238))
764 5103 0
749 5103 0
749 764 5102 0
c ((SATLiteral(719) + aux1238 - aux1239)<=0)
5102 -5105 0
5103 -5106 0
-719 -5105 0
-719 5102 -5106 0
-719 5103 -5108 0
c (0<=(SATLiteral(719) + aux1238 - aux1239))
-5103 5108 0
-5102 5106 0
719 5108 0
719 -5103 5106 0
719 -5102 5105 0
c ((aux1235 + aux1237 - aux1240)<=0)
5099 -5110 0
5100 -5111 0
5093 -5110 0
5093 5099 -5111 0
5093 5100 -5113 0
5094 -5111 0
5094 5099 -5113 0
5094 5100 -5115 0
c (0<=(aux1235 + aux1237 - aux1240))
-5100 5115 0
-5099 5113 0
-5094 5115 0
-5094 -5100 5113 0
-5094 -5099 5111 0
-5093 5113 0
-5093 -5100 5111 0
-5093 -5099 5110 0
c ((SATLiteral(691) + SATLiteral(811) - aux1241)<=0)
-811 -5117 0
-691 -5117 0
-691 -811 -5118 0
c (0<=(SATLiteral(691) + SATLiteral(811) - aux1241))
811 5118 0
691 5118 0
691 811 5117 0
c ((SATLiteral(706) + SATLiteral(796) - aux1242)<=0)
-796 -5120 0
-706 -5120 0
-706 -796 -5121 0
c (0<=(SATLiteral(706) + SATLiteral(796) - aux1242))
796 5121 0
706 5121 0
706 796 5120 0
c ((SATLiteral(736) + SATLiteral(781) - aux1243)<=0)
-781 -5123 0
-736 -5123 0
-736 -781 -5124 0
c (0<=(SATLiteral(736) + SATLiteral(781) - aux1243))
781 5124 0
736 5124 0
736 781 5123 0
c ((SATLiteral(751) + SATLiteral(766) - aux1244)<=0)
-766 -5126 0
-751 -5126 0
-751 -766 -5127 0
c (0<=(SATLiteral(751) + SATLiteral(766) - aux1244))
766 5127 0
751 5127 0
751 766 5126 0
c ((SATLiteral(721) + aux1244 - aux1245)<=0)
5126 -5129 0
5127 -5130 0
-721 -5129 0
-721 5126 -5130 0
-721 5127 -5132 0
c (0<=(SATLiteral(721) + aux1244 - aux1245))
-5127 5132 0
-5126 5130 0
721 5132 0
721 -5127 5130 0
721 -5126 5129 0
c ((aux1241 + aux1243 - aux1246)<=0)
5123 -5134 0
5124 -5135 0
5117 -5134 0
5117 5123 -5135 0
5117 5124 -5137 0
5118 -5135 0
5118 5123 -5137 0
5118 5124 -5139 0
c (0<=(aux1241 + aux1243 - aux1246))
-5124 5139 0
-5123 5137 0
-5118 5139 0
-5118 -5124 5137 0
-5118 -5123 5135 0
-5117 5137 0
-5117 -5124 5135 0
-5117 -5123 5134 0
c ((SATLiteral(-690) + SATLiteral(-810) - aux1247)<=0)
810 -5141 0
690 -5141 0
690 810 -5142 0
c (0<=(SATLiteral(-690) + SATLiteral(-810) - aux1247))
-810 5142 0
-690 5142 0
-690 -810 5141 0
c ((SATLiteral(-705) + SATLiteral(-795) - aux1248)<=0)
795 -5144 0
705 -5144 0
705 795 -5145 0
c (0<=(SATLiteral(-705) + SATLiteral(-795) - aux1248))
-795 5145 0
-705 5145 0
-705 -795 5144 0
c ((SATLiteral(-735) + SATLiteral(-780) - aux1249)<=0)
780 -5147 0
735 -5147 0
735 780 -5148 0
c (0<=(SATLiteral(-735) + SATLiteral(-780) - aux1249))
-780 5148 0
-735 5148 0
-735 -780 5147 0
c ((SATLiteral(-750) + SATLiteral(-765) - aux1250)<=0)
765 -5150 0
750 -5150 0
750 765 -5151 0
c (0<=(SATLiteral(-750) + SATLiteral(-765) - aux1250))
-765 5151 0
-750 5151 0
-750 -765 5150 0
c ((SATLiteral(-720) + aux1250 - aux1251)<=0)
5150 -5153 0
5151 -5154 0
720 -5153 0
720 5150 -5154 0
720 5151 -5156 0
c (0<=(SATLiteral(-720) + aux1250 - aux1251))
-5151 5156 0
-5150 5154 0
-720 5156 0
-720 -5151 5154 0
-720 -5150 5153 0
c ((aux1247 + aux1249 - aux1252)<=0)
5147 -5158 0
5148 -5159 0
5141 -5158 0
5141 5147 -5159 0
5141 5148 -5161 0
5142 -5159 0
5142 5147 -5161 0
5142 5148 -5163 0
c (0<=(aux1247 + aux1249 - aux1252))
-5148 5163 0
-5147 5161 0
-5142 5163 0
-5142 -5148 5161 0
-5142 -5147 5159 0
-5141 5161 0
-5141 -5148 5159 0
-5141 -5147 5158 0
c (( - aux1253 + SATLiteral(812) + SATLiteral(932))<=0)
-932 -5165 0
-812 -5165 0
-812 -932 -5166 0
c (0<=( - aux1253 + SATLiteral(812) + SATLiteral(932)))
932 5166 0
812 5166 0
812 932 5165 0
c (( - aux1254 + SATLiteral(827) + SATLiteral(917))<=0)
-917 -5168 0
-827 -5168 0
-827 -917 -5169 0
c (0<=( - aux1254 + SATLiteral(827) + SATLiteral(917)))
917 5169 0
827 5169 0
827 917 5168 0
c (( - aux1255 + SATLiteral(857) + SATLiteral(902))<=0)
-902 -5171 0
-857 -5171 0
-857 -902 -5172 0
c (0<=( - aux1255 + SATLiteral(857) + SATLiteral(902)))
902 5172 0
857 5172 0
857 902 5171 0
c (( - aux1256 + SATLiteral(872) + SATLiteral(887))<=0)
-887 -5174 0
-872 -5174 0
-872 -887 -5175 0
c (0<=( - aux1256 + SATLiteral(872) + SATLiteral(887)))
887 5175 0
872 5175 0
872 887 5174 0
c ((aux1256 - aux1257 + SATLiteral(842))<=0)
5174 -5177 0
5175 -5178 0
-842 -5177 0
-842 5174 -5178 0
-842 5175 -5180 0
c (0<=(aux1256 - aux1257 + SATLiteral(842)))
-5175 5180 0
-5174 5178 0
842 5180 0
842 -5175 5178 0
842 -5174 5177 0
c ((aux1253 + aux1255 - aux1258)<=0)
5171 -5182 0
5172 -5183 0
5165 -5182 0
5165 5171 -5183 0
5165 5172 -5185 0
5166 -5183 0
5166 5171 -5185 0
5166 5172 -5187 0
c (0<=(aux1253 + aux1255 - aux1258))
-5172 5187 0
-5171 5185 0
-5166 5187 0
-5166 -5172 5185 0
-5166 -5171 5183 0
-5165 5185 0
-5165 -5172 5183 0
-5165 -5171 5182 0
c (( - aux1259 + SATLiteral(814) + SATLiteral(934))<=0)
-934 -5189 0
-814 -5189 0
-814 -934 -5190 0
c (0<=( - aux1259 + SATLiteral(814) + SATLiteral(934)))
934 5190 0
814 5190 0
814 934 5189 0
c (( - aux1260 + SATLiteral(829) + SATLiteral(919))<=0)
-919 -5192 0
-829 -5192 0
-829 -919 -5193 0
c (0<=( - aux1260 + SATLiteral(829) + SATLiteral(919)))
919 5193 0
829 5193 0
829 919 5192 0
c (( - aux1261 + SATLiteral(859) + SATLiteral(904))<=0)
-904 -5195 0
-859 -5195 0
-859 -904 -5196 0
c (0<=( - aux1261 + SATLiteral(859) + SATLiteral(904)))
904 5196 0
859 5196 0
859 904 5195 0
c (( - aux1262 + SATLiteral(874) + SATLiteral(889))<=0)
-889 -5198 0
-874 -5198 0
-874 -889 -5199 0
c (0<=( - aux1262 + SATLiteral(874) + SATLiteral(889)))
889 5199 0
874 5199 0
874 889 5198 0
c ((aux1262 - aux1263 + SATLiteral(844))<=0)
5198 -5201 0
5199 -5202 0
-844 -5201 0
-844 5198 -5202 0
-844 5199 -5204 0
c (0<=(aux1262 - aux1263 + SATLiteral(844)))
-5199 5204 0
-5198 5202 0
844 5204 0
844 -5199 5202 0
844 -5198 5201 0
c ((aux1259 + aux1261 - aux1264)<=0)
5195 -5206 0
5196 -5207 0
5189 -5206 0
5189 5195 -5207 0
5189 5196 -5209 0
5190 -5207 0
5190 5195 -5209 0
5190 5196 -5211 0
c (0<=(aux1259 + aux1261 - aux1264))
-5196 5211 0
-5195 5209 0
-5190 5211 0
-5190 -5196 5209 0
-5190 -5195 5207 0
-5189 5209 0
-5189 -5196 5207 0
-5189 -5195 5206 0
c (( - aux1265 + SATLiteral(816) + SATLiteral(936))<=0)
-936 -5213 0
-816 -5213 0
-816 -936 -5214 0
c (0<=( - aux1265 + SATLiteral(816) + SATLiteral(936)))
936 5214 0
816 5214 0
816 936 5213 0
c (( - aux1266 + SATLiteral(831) + SATLiteral(921))<=0)
-921 -5216 0
-831 -5216 0
-831 -921 -5217 0
c (0<=( - aux1266 + SATLiteral(831) + SATLiteral(921)))
921 5217 0
831 5217 0
831 921 5216 0
c (( - aux1267 + SATLiteral(861) + SATLiteral(906))<=0)
-906 -5219 0
-861 -5219 0
-861 -906 -5220 0
c (0<=( - aux1267 + SATLiteral(861) + SATLiteral(906)))
906 5220 0
861 5220 0
861 906 5219 0
c (( - aux1268 + SATLiteral(876) + SATLiteral(891))<=0)
-891 -5222 0
-876 -5222 0
-876 -891 -5223 0
c (0<=( - aux1268 + SATLiteral(876) + SATLiteral(891)))
891 5223 0
876 5223 0
876 891 5222 0
c ((aux1268 - aux1269 + SATLiteral(846))<=0)
5222 -5225 0
5223 -5226 0
-846 -5225 0
-846 5222 -5226 0
-846 5223 -5228 0
c (0<=(aux1268 - aux1269 + SATLiteral(846)))
-5223 5228 0
-5222 5226 0
846 5228 0
846 -5223 5226 0
846 -5222 5225 0
c ((aux1265 + aux1267 - aux1270)<=0)
5219 -5230 0
5220 -5231 0
5213 -5230 0
5213 5219 -5231 0
5213 5220 -5233 0
5214 -5231 0
5214 5219 -5233 0
5214 5220 -5235 0
c (0<=(aux1265 + aux1267 - aux1270))
-5220 5235 0
-5219 5233 0
-5214 5235 0
-5214 -5220 5233 0
-5214 -5219 5231 0
-5213 5233 0
-5213 -5220 5231 0
-5213 -5219 5230 0
c (( - aux1271 + SATLiteral(818) + SATLiteral(938))<=0)
-938 -5237 0
-818 -5237 0
-818 -938 -5238 0
c (0<=( - aux1271 + SATLiteral(818) + SATLiteral(938)))
938 5238 0
818 5238 0
818 938 5237 0
c (( - aux1272 + SATLiteral(833) + SATLiteral(923))<=0)
-923 -5240 0
-833 -5240 0
-833 -923 -5241 0
c (0<=( - aux1272 + SATLiteral(833) + SATLiteral(923)))
923 5241 0
833 5241 0
833 923 5240 0
c (( - aux1273 + SATLiteral(863) + SATLiteral(908))<=0)
-908 -5243 0
-863 -5243 0
-863 -908 -5244 0
c (0<=( - aux1273 + SATLiteral(863) + SATLiteral(908)))
908 5244 0
863 5244 0
863 908 5243 0
c (( - aux1274 + SATLiteral(878) + SATLiteral(893))<=0)
-893 -5246 0
-878 -5246 0
-878 -893 -5247 0
c (0<=( - aux1274 + SATLiteral(878) + SATLiteral(893)))
893 5247 0
878 5247 0
878 893 5246 0
c ((aux1274 - aux1275 + SATLiteral(848))<=0)
5246 -5249 0
5247 -5250 0
-848 -5249 0
-848 5246 -5250 0
-848 5247 -5252 0
c (0<=(aux1274 - aux1275 + SATLiteral(848)))
-5247 5252 0
-5246 5250 0
848 5252 0
848 -5247 5250 0
848 -5246 5249 0
c ((aux1271 + aux1273 - aux1276)<=0)
5243 -5254 0
5244 -5255 0
5237 -5254 0
5237 5243 -5255 0
5237 5244 -5257 0
5238 -5255 0
5238 5243 -5257 0
5238 5244 -5259 0
c (0<=(aux1271 + aux1273 - aux1276))
-5244 5259 0
-5243 5257 0
-5238 5259 0
-5238 -5244 5257 0
-5238 -5243 5255 0
-5237 5257 0
-5237 -5244 5255 0
-5237 -5243 5254 0
c (( - aux1277 + SATLiteral(820) + SATLiteral(940))<=0)
-940 -5261 0
-820 -5261 0
-820 -940 -5262 0
c (0<=( - aux1277 + SATLiteral(820) + SATLiteral(940)))
940 5262 0
820 5262 0
820 940 5261 0
c (( - aux1278 + SATLiteral(835) + SATLiteral(925))<=0)
-925 -5264 0
-835 -5264 0
-835 -925 -5265 0
c (0<=( - aux1278 + SATLiteral(835) + SATLiteral(925)))
925 5265 0
835 5265 0
835 925 5264 0
c (( - aux1279 + SATLiteral(865) + SATLiteral(910))<=0)
-910 -5267 0
-865 -5267 0
-865 -910 -5268 0
c (0<=( - aux1279 + SATLiteral(865) + SATLiteral(910)))
910 5268 0
865 5268 0
865 910 5267 0
c (( - aux1280 + SATLiteral(880) + SATLiteral(895))<=0)
-895 -5270 0
-880 -5270 0
-880 -895 -5271 0
c (0<=( - aux1280 + SATLiteral(880) + SATLiteral(895)))
895 5271 0
880 5271 0
880 895 5270 0
c ((aux1280 - aux1281 + SATLiteral(850))<=0)
5270 -5273 0
5271 -5274 0
-850 -5273 0
-850 5270 -5274 0
-850 5271 -5276 0
c (0<=(aux1280 - aux1281 + SATLiteral(850)))
-5271 5276 0
-5270 5274 0
850 5276 0
850 -5271 5274 0
850 -5270 5273 0
c ((aux1277 + aux1279 - aux1282)<=0)
5267 -5278 0
5268 -5279 0
5261 -5278 0
5261 5267 -5279 0
5261 5268 -5281 0
5262 -5279 0
5262 5267 -5281 0
5262 5268 -5283 0
c (0<=(aux1277 + aux1279 - aux1282))
-5268 5283 0
-5267 5281 0
-5262 5283 0
-5262 -5268 5281 0
-5262 -5267 5279 0
-5261 5281 0
-5261 -5268 5279 0
-5261 -5267 5278 0
c (( - aux1283 + SATLiteral(822) + SATLiteral(942))<=0)
-942 -5285 0
-822 -5285 0
-822 -942 -5286 0
c (0<=( - aux1283 + SATLiteral(822) + SATLiteral(942)))
942 5286 0
822 5286 0
822 942 5285 0
c (( - aux1284 + SATLiteral(837) + SATLiteral(927))<=0)
-927 -5288 0
-837 -5288 0
-837 -927 -5289 0
c (0<=( - aux1284 + SATLiteral(837) + SATLiteral(927)))
927 5289 0
837 5289 0
837 927 5288 0
c (( - aux1285 + SATLiteral(867) + SATLiteral(912))<=0)
-912 -5291 0
-867 -5291 0
-867 -912 -5292 0
c (0<=( - aux1285 + SATLiteral(867) + SATLiteral(912)))
912 5292 0
867 5292 0
867 912 5291 0
c (( - aux1286 + SATLiteral(882) + SATLiteral(897))<=0)
-897 -5294 0
-882 -5294 0
-882 -897 -5295 0
c (0<=( - aux1286 + SATLiteral(882) + SATLiteral(897)))
897 5295 0
882 5295 0
882 897 5294 0
c ((aux1286 - aux1287 + SATLiteral(852))<=0)
5294 -5297 0
5295 -5298 0
-852 -5297 0
-852 5294 -5298 0
-852 5295 -5300 0
c (0<=(aux1286 - aux1287 + SATLiteral(852)))
-5295 5300 0
-5294 5298 0
852 5300 0
852 -5295 5298 0
852 -5294 5297 0
c ((aux1283 + aux1285 - aux1288)<=0)
5291 -5302 0
5292 -5303 0
5285 -5302 0
5285 5291 -5303 0
5285 5292 -5305 0
5286 -5303 0
5286 5291 -5305 0
5286 5292 -5307 0
c (0<=(aux1283 + aux1285 - aux1288))
-5292 5307 0
-5291 5305 0
-5286 5307 0
-5286 -5292 5305 0
-5286 -5291 5303 0
-5285 5305 0
-5285 -5292 5303 0
-5285 -5291 5302 0
c (( - aux1289 + SATLiteral(824) + SATLiteral(944))<=0)
-944 -5309 0
-824 -5309 0
-824 -944 -5310 0
c (0<=( - aux1289 + SATLiteral(824) + SATLiteral(944)))
944 5310 0
824 5310 0
824 944 5309 0
c (( - aux1290 + SATLiteral(839) + SATLiteral(929))<=0)
-929 -5312 0
-839 -5312 0
-839 -929 -5313 0
c (0<=( - aux1290 + SATLiteral(839) + SATLiteral(929)))
929 5313 0
839 5313 0
839 929 5312 0
c (( - aux1291 + SATLiteral(869) + SATLiteral(914))<=0)
-914 -5315 0
-869 -5315 0
-869 -914 -5316 0
c (0<=( - aux1291 + SATLiteral(869) + SATLiteral(914)))
914 5316 0
869 5316 0
869 914 5315 0
c (( - aux1292 + SATLiteral(884) + SATLiteral(899))<=0)
-899 -5318 0
-884 -5318 0
-884 -899 -5319 0
c (0<=( - aux1292 + SATLiteral(884) + SATLiteral(899)))
899 5319 0
884 5319 0
884 899 5318 0
c ((aux1292 - aux1293 + SATLiteral(854))<=0)
5318 -5321 0
5319 -5322 0
-854 -5321 0
-854 5318 -5322 0
-854 5319 -5324 0
c (0<=(aux1292 - aux1293 + SATLiteral(854)))
-5319 5324 0
-5318 5322 0
854 5324 0
854 -5319 5322 0
854 -5318 5321 0
c ((aux1289 + aux1291 - aux1294)<=0)
5315 -5326 0
5316 -5327 0
5309 -5326 0
5309 5315 -5327 0
5309 5316 -5329 0
5310 -5327 0
5310 5315 -5329 0
5310 5316 -5331 0
c (0<=(aux1289 + aux1291 - aux1294))
-5316 5331 0
-5315 5329 0
-5310 5331 0
-5310 -5316 5329 0
-5310 -5315 5327 0
-5309 5329 0
-5309 -5316 5327 0
-5309 -5315 5326 0
c (( - aux1295 + SATLiteral(826) + SATLiteral(946))<=0)
-946 -5333 0
-826 -5333 0
-826 -946 -5334 0
c (0<=( - aux1295 + SATLiteral(826) + SATLiteral(946)))
946 5334 0
826 5334 0
826 946 5333 0
c (( - aux1296 + SATLiteral(841) + SATLiteral(931))<=0)
-931 -5336 0
-841 -5336 0
-841 -931 -5337 0
c (0<=( - aux1296 + SATLiteral(841) + SATLiteral(931)))
931 5337 0
841 5337 0
841 931 5336 0
c (( - aux1297 + SATLiteral(871) + SATLiteral(916))<=0)
-916 -5339 0
-871 -5339 0
-871 -916 -5340 0
c (0<=( - aux1297 + SATLiteral(871) + SATLiteral(916)))
916 5340 0
871 5340 0
871 916 5339 0
c (( - aux1298 + SATLiteral(886) + SATLiteral(901))<=0)
-901 -5342 0
-886 -5342 0
-886 -901 -5343 0
c (0<=( - aux1298 + SATLiteral(886) + SATLiteral(901)))
901 5343 0
886 5343 0
886 901 5342 0
c ((aux1298 - aux1299 + SATLiteral(856))<=0)
5342 -5345 0
5343 -5346 0
-856 -5345 0
-856 5342 -5346 0
-856 5343 -5348 0
c (0<=(aux1298 - aux1299 + SATLiteral(856)))
-5343 5348 0
-5342 5346 0
856 5348 0
856 -5343 5346 0
856 -5342 5345 0
c ((aux1295 + aux1297 - aux1300)<=0)
5339 -5350 0
5340 -5351 0
5333 -5350 0
5333 5339 -5351 0
5333 5340 -5353 0
5334 -5351 0
5334 5339 -5353 0
5334 5340 -5355 0
c (0<=(aux1295 + aux1297 - aux1300))
-5340 5355 0
-5339 5353 0
-5334 5355 0
-5334 -5340 5353 0
-5334 -5339 5351 0
-5333 5353 0
-5333 -5340 5351 0
-5333 -5339 5350 0
c (( - aux1301 + SATLiteral(-825) + SATLiteral(-945))<=0)
945 -5357 0
825 -5357 0
825 945 -5358 0
c (0<=( - aux1301 + SATLiteral(-825) + SATLiteral(-945)))
-945 5358 0
-825 5358 0
-825 -945 5357 0
c (( - aux1302 + SATLiteral(-840) + SATLiteral(-930))<=0)
930 -5360 0
840 -5360 0
840 930 -5361 0
c (0<=( - aux1302 + SATLiteral(-840) + SATLiteral(-930)))
-930 5361 0
-840 5361 0
-840 -930 5360 0
c (( - aux1303 + SATLiteral(-870) + SATLiteral(-915))<=0)
915 -5363 0
870 -5363 0
870 915 -5364 0
c (0<=( - aux1303 + SATLiteral(-870) + SATLiteral(-915)))
-915 5364 0
-870 5364 0
-870 -915 5363 0
c (( - aux1304 + SATLiteral(-885) + SATLiteral(-900))<=0)
900 -5366 0
885 -5366 0
885 900 -5367 0
c (0<=( - aux1304 + SATLiteral(-885) + SATLiteral(-900)))
-900 5367 0
-885 5367 0
-885 -900 5366 0
c ((aux1304 - aux1305 + SATLiteral(-855))<=0)
5366 -5369 0
5367 -5370 0
855 -5369 0
855 5366 -5370 0
855 5367 -5372 0
c (0<=(aux1304 - aux1305 + SATLiteral(-855)))
-5367 5372 0
-5366 5370 0
-855 5372 0
-855 -5367 5370 0
-855 -5366 5369 0
c ((aux1301 + aux1303 - aux1306)<=0)
5363 -5374 0
5364 -5375 0
5357 -5374 0
5357 5363 -5375 0
5357 5364 -5377 0
5358 -5375 0
5358 5363 -5377 0
5358 5364 -5379 0
c (0<=(aux1301 + aux1303 - aux1306))
-5364 5379 0
-5363 5377 0
-5358 5379 0
-5358 -5364 5377 0
-5358 -5363 5375 0
-5357 5377 0
-5357 -5364 5375 0
-5357 -5363 5374 0
c ((SATLiteral(947) + SATLiteral(1067) - aux1307)<=0)
-1067 -5381 0
-947 -5381 0
-947 -1067 -5382 0
c (0<=(SATLiteral(947) + SATLiteral(1067) - aux1307))
1067 5382 0
947 5382 0
947 1067 5381 0
c ((SATLiteral(962) + SATLiteral(1052) - aux1308)<=0)
-1052 -5384 0
-962 -5384 0
-962 -1052 -5385 0
c (0<=(SATLiteral(962) + SATLiteral(1052) - aux1308))
1052 5385 0
962 5385 0
962 1052 5384 0
c ((SATLiteral(992) + SATLiteral(1037) - aux1309)<=0)
-1037 -5387 0
-992 -5387 0
-992 -1037 -5388 0
c (0<=(SATLiteral(992) + SATLiteral(1037) - aux1309))
1037 5388 0
992 5388 0
992 1037 5387 0
c ((SATLiteral(1007) + SATLiteral(1022) - aux1310)<=0)
-1022 -5390 0
-1007 -5390 0
-1007 -1022 -5391 0
c (0<=(SATLiteral(1007) + SATLiteral(1022) - aux1310))
1022 5391 0
1007 5391 0
1007 1022 5390 0
c ((SATLiteral(977) + aux1310 - aux1311)<=0)
5390 -5393 0
5391 -5394 0
-977 -5393 0
-977 5390 -5394 0
-977 5391 -5396 0
c (0<=(SATLiteral(977) + aux1310 - aux1311))
-5391 5396 0
-5390 5394 0
977 5396 0
977 -5391 5394 0
977 -5390 5393 0
c ((aux1307 + aux1309 - aux1312)<=0)
5387 -5398 0
5388 -5399 0
5381 -5398 0
5381 5387 -5399 0
5381 5388 -5401 0
5382 -5399 0
5382 5387 -5401 0
5382 5388 -5403 0
c (0<=(aux1307 + aux1309 - aux1312))
-5388 5403 0
-5387 5401 0
-5382 5403 0
-5382 -5388 5401 0
-5382 -5387 5399 0
-5381 5401 0
-5381 -5388 5399 0
-5381 -5387 5398 0
c ((SATLiteral(949) + SATLiteral(1069) - aux1313)<=0)
-1069 -5405 0
-949 -5405 0
-949 -1069 -5406 0
c (0<=(SATLiteral(949) + SATLiteral(1069) - aux1313))
1069 5406 0
949 5406 0
949 1069 5405 0
c ((SATLiteral(964) + SATLiteral(1054) - aux1314)<=0)
-1054 -5408 0
-964 -5408 0
-964 -1054 -5409 0
c (0<=(SATLiteral(964) + SATLiteral(1054) - aux1314))
1054 5409 0
964 5409 0
964 1054 5408 0
c ((SATLiteral(994) + SATLiteral(1039) - aux1315)<=0)
-1039 -5411 0
-994 -5411 0
-994 -1039 -5412 0
c (0<=(SATLiteral(994) + SATLiteral(1039) - aux1315))
1039 5412 0
994 5412 0
994 1039 5411 0
c ((SATLiteral(1009) + SATLiteral(1024) - aux1316)<=0)
-1024 -5414 0
-1009 -5414 0
-1009 -1024 -5415 0
c (0<=(SATLiteral(1009) + SATLiteral(1024) - aux1316))
1024 5415 0
1009 5415 0
1009 1024 5414 0
c ((SATLiteral(979) + aux1316 - aux1317)<=0)
5414 -5417 0
5415 -5418 0
-979 -5417 0
-979 5414 -5418 0
-979 5415 -5420 0
c (0<=(SATLiteral(979) + aux1316 - aux1317))
-5415 5420 0
-5414 5418 0
979 5420 0
979 -5415 5418 0
979 -5414 5417 0
c ((aux1313 + aux1315 - aux1318)<=0)
5411 -5422 0
5412 -5423 0
5405 -5422 0
5405 5411 -5423 0
5405 5412 -5425 0
5406 -5423 0
5406 5411 -5425 0
5406 5412 -5427 0
c (0<=(aux1313 + aux1315 - aux1318))
-5412 5427 0
-5411 5425 0
-5406 5427 0
-5406 -5412 5425 0
-5406 -5411 5423 0
-5405 5425 0
-5405 -5412 5423 0
-5405 -5411 5422 0
c ((SATLiteral(951) + SATLiteral(1071) - aux1319)<=0)
-1071 -5429 0
-951 -5429 0
-951 -1071 -5430 0
c (0<=(SATLiteral(951) + SATLiteral(1071) - aux1319))
1071 5430 0
951 5430 0
951 1071 5429 0
c ((SATLiteral(966) + SATLiteral(1056) - aux1320)<=0)
-1056 -5432 0
-966 -5432 0
-966 -1056 -5433 0
c (0<=(SATLiteral(966) + SATLiteral(1056) - aux1320))
1056 5433 0
966 5433 0
966 1056 5432 0
c ((SATLiteral(996) + SATLiteral(1041) - aux1321)<=0)
-1041 -5435 0
-996 -5435 0
-996 -1041 -5436 0
c (0<=(SATLiteral(996) + SATLiteral(1041) - aux1321))
1041 5436 0
996 5436 0
996 1041 5435 0
c ((SATLiteral(1011) + SATLiteral(1026) - aux1322)<=0)
-1026 -5438 0
-1011 -5438 0
-1011 -1026 -5439 0
c (0<=(SATLiteral(1011) + SATLiteral(1026) - aux1322))
1026 5439 0
1011 5439 0
1011 1026 5438 0
c ((SATLiteral(981) + aux1322 - aux1323)<=0)
5438 -5441 0
5439 -5442 0
-981 -5441 0
-981 5438 -5442 0
-981 5439 -5444 0
c (0<=(SATLiteral(981) + aux1322 - aux1323))
-5439 5444 0
-5438 5442 0
981 5444 0
981 -5439 5442 0
981 -5438 5441 0
c ((aux1319 + aux1321 - aux1324)<=0)
5435 -5446 0
5436 -5447 0
5429 -5446 0
5429 5435 -5447 0
5429 5436 -5449 0
5430 -5447 0
5430 5435 -5449 0
5430 5436 -5451 0
c (0<=(aux1319 + aux1321 - aux1324))
-5436 5451 0
-5435 5449 0
-5430 5451 0
-5430 -5436 5449 0
-5430 -5435 5447 0
-5429 5449 0
-5429 -5436 5447 0
-5429 -5435 5446 0
c ((SATLiteral(953) + SATLiteral(1073) - aux1325)<=0)
-1073 -5453 0
-953 -5453 0
-953 -1073 -5454 0
c (0<=(SATLiteral(953) + SATLiteral(1073) - aux1325))
1073 5454 0
953 5454 0
953 1073 5453 0
c ((SATLiteral(968) + SATLiteral(1058) - aux1326)<=0)
-1058 -5456 0
-968 -5456 0
-968 -1058 -5457 0
c (0<=(SATLiteral(968) + SATLiteral(1058) - aux1326))
1058 5457 0
968 5457 0
968 1058 5456 0
c ((SATLiteral(998) + SATLiteral(1043) - aux1327)<=0)
-1043 -5459 0
-998 -5459 0
-998 -1043 -5460 0
c (0<=(SATLiteral(998) + SATLiteral(1043) - aux1327))
1043 5460 0
998 5460 0
998 1043 5459 0
c ((SATLiteral(1013) + SATLiteral(1028) - aux1328)<=0)
-1028 -5462 0
-1013 -5462 0
-1013 -1028 -5463 0
c (0<=(SATLiteral(1013) + SATLiteral(1028) - aux1328))
1028 5463 0
1013 5463 0
1013 1028 5462 0
c ((SATLiteral(983) + aux1328 - aux1329)<=0)
5462 -5465 0
5463 -5466 0
-983 -5465 0
-983 5462 -5466 0
-983 5463 -5468 0
c (0<=(SATLiteral(983) + aux1328 - aux1329))
-5463 5468 0
-5462 5466 0
983 5468 0
983 -5463 5466 0
983 -5462 5465 0
c ((aux1325 + aux1327 - aux1330)<=0)
5459 -5470 0
5460 -5471 0
5453 -5470 0
5453 5459 -5471 0
5453 5460 -5473 0
5454 -5471 0
5454 5459 -5473 0
5454 5460 -5475 0
c (0<=(aux1325 + aux1327 - aux1330))
-5460 5475 0
-5459 5473 0
-5454 5475 0
-5454 -5460 5473 0
-5454 -5459 5471 0
-5453 5473 0
-5453 -5460 5471 0
-5453 -5459 5470 0
c ((SATLiteral(955) + SATLiteral(1075) - aux1331)<=0)
-1075 -5477 0
-955 -5477 0
-955 -1075 -5478 0
c (0<=(SATLiteral(955) + SATLiteral(1075) - aux1331))
1075 5478 0
955 5478 0
955 1075 5477 0
c ((SATLiteral(970) + SATLiteral(1060) - aux1332)<=0)
-1060 -5480 0
-970 -5480 0
-970 -1060 -5481 0
c (0<=(SATLiteral(970) + SATLiteral(1060) - aux1332))
1060 5481 0
970 5481 0
970 1060 5480 0
c ((SATLiteral(1000) + SATLiteral(1045) - aux1333)<=0)
-1045 -5483 0
-1000 -5483 0
-1000 -1045 -5484 0
c (0<=(SATLiteral(1000) + SATLiteral(1045) - aux1333))
1045 5484 0
1000 5484 0
1000 1045 5483 0
c ((SATLiteral(1015) + SATLiteral(1030) - aux1334)<=0)
-1030 -5486 0
-1015 -5486 0
-1015 -1030 -5487 0
c (0<=(SATLiteral(1015) + SATLiteral(1030) - aux1334))
1030 5487 0
1015 5487 0
1015 1030 5486 0
c ((SATLiteral(985) + aux1334 - aux1335)<=0)
5486 -5489 0
5487 -5490 0
-985 -5489 0
-985 5486 -5490 0
-985 5487 -5492 0
c (0<=(SATLiteral(985) + aux1334 - aux1335))
-5487 5492 0
-5486 5490 0
985 5492 0
985 -5487 5490 0
985 -5486 5489 0
c ((aux1331 + aux1333 - aux1336)<=0)
5483 -5494 0
5484 -5495 0
5477 -5494 0
5477 5483 -5495 0
5477 5484 -5497 0
5478 -5495 0
5478 5483 -5497 0
5478 5484 -5499 0
c (0<=(aux1331 + aux1333 - aux1336))
-5484 5499 0
-5483 5497 0
-5478 5499 0
-5478 -5484 5497 0
-5478 -5483 5495 0
-5477 5497 0
-5477 -5484 5495 0
-5477 -5483 5494 0
c ((SATLiteral(957) + SATLiteral(1077) - aux1337)<=0)
-1077 -5501 0
-957 -5501 0
-957 -1077 -5502 0
c (0<=(SATLiteral(957) + SATLiteral(1077) - aux1337))
1077 5502 0
957 5502 0
957 1077 5501 0
c ((SATLiteral(972) + SATLiteral(1062) - aux1338)<=0)
-1062 -5504 0
-972 -5504 0
-972 -1062 -5505 0
c (0<=(SATLiteral(972) + SATLiteral(1062) - aux1338))
1062 5505 0
972 5505 0
972 1062 5504 0
c ((SATLiteral(1002) + SATLiteral(1047) - aux1339)<=0)
-1047 -5507 0
-1002 -5507 0
-1002 -1047 -5508 0
c (0<=(SATLiteral(1002) + SATLiteral(1047) - aux1339))
1047 5508 0
1002 5508 0
1002 1047 5507 0
c ((SATLiteral(1017) + SATLiteral(1032) - aux1340)<=0)
-1032 -5510 0
-1017 -5510 0
-1017 -1032 -5511 0
c (0<=(SATLiteral(1017) + SATLiteral(1032) - aux1340))
1032 5511 0
1017 5511 0
1017 1032 5510 0
c ((SATLiteral(987) + aux1340 - aux1341)<=0)
5510 -5513 0
5511 -5514 0
-987 -5513 0
-987 5510 -5514 0
-987 5511 -5516 0
c (0<=(SATLiteral(987) + aux1340 - aux1341))
-5511 5516 0
-5510 5514 0
987 5516 0
987 -5511 5514 0
987 -5510 5513 0
c ((aux1337 + aux1339 - aux1342)<=0)
5507 -5518 0
5508 -5519 0
5501 -5518 0
5501 5507 -5519 0
5501 5508 -5521 0
5502 -5519 0
5502 5507 -5521 0
5502 5508 -5523 0
c (0<=(aux1337 + aux1339 - aux1342))
-5508 5523 0
-5507 5521 0
-5502 5523 0
-5502 -5508 5521 0
-5502 -5507 5519 0
-5501 5521 0
-5501 -5508 5519 0
-5501 -5507 5518 0
c ((SATLiteral(959) + SATLiteral(1079) - aux1343)<=0)
-1079 -5525 0
-959 -5525 0
-959 -1079 -5526 0
c (0<=(SATLiteral(959) + SATLiteral(1079) - aux1343))
1079 5526 0
959 5526 0
959 1079 5525 0
c ((SATLiteral(974) + SATLiteral(1064) - aux1344)<=0)
-1064 -5528 0
-974 -5528 0
-974 -1064 -5529 0
c (0<=(SATLiteral(974) + SATLiteral(1064) - aux1344))
1064 5529 0
974 5529 0
974 1064 5528 0
c ((SATLiteral(1004) + SATLiteral(1049) - aux1345)<=0)
-1049 -5531 0
-1004 -5531 0
-1004 -1049 -5532 0
c (0<=(SATLiteral(1004) + SATLiteral(1049) - aux1345))
1049 5532 0
1004 5532 0
1004 1049 5531 0
c ((SATLiteral(1019) + SATLiteral(1034) - aux1346)<=0)
-1034 -5534 0
-1019 -5534 0
-1019 -1034 -5535 0
c (0<=(SATLiteral(1019) + SATLiteral(1034) - aux1346))
1034 5535 0
1019 5535 0
1019 1034 5534 0
c ((SATLiteral(989) + aux1346 - aux1347)<=0)
5534 -5537 0
5535 -5538 0
-989 -5537 0
-989 5534 -5538 0
-989 5535 -5540 0
c (0<=(SATLiteral(989) + aux1346 - aux1347))
-5535 5540 0
-5534 5538 0
989 5540 0
989 -5535 5538 0
989 -5534 5537 0
c ((aux1343 + aux1345 - aux1348)<=0)
5531 -5542 0
5532 -5543 0
5525 -5542 0
5525 5531 -5543 0
5525 5532 -5545 0
5526 -5543 0
5526 5531 -5545 0
5526 5532 -5547 0
c (0<=(aux1343 + aux1345 - aux1348))
-5532 5547 0
-5531 5545 0
-5526 5547 0
-5526 -5532 5545 0
-5526 -5531 5543 0
-5525 5545 0
-5525 -5532 5543 0
-5525 -5531 5542 0
c ((SATLiteral(961) + SATLiteral(1081) - aux1349)<=0)
-1081 -5549 0
-961 -5549 0
-961 -1081 -5550 0
c (0<=(SATLiteral(961) + SATLiteral(1081) - aux1349))
1081 5550 0
961 5550 0
961 1081 5549 0
c ((SATLiteral(976) + SATLiteral(1066) - aux1350)<=0)
-1066 -5552 0
-976 -5552 0
-976 -1066 -5553 0
c (0<=(SATLiteral(976) + SATLiteral(1066) - aux1350))
1066 5553 0
976 5553 0
976 1066 5552 0
c ((SATLiteral(1006) + SATLiteral(1051) - aux1351)<=0)
-1051 -5555 0
-1006 -5555 0
-1006 -1051 -5556 0
c (0<=(SATLiteral(1006) + SATLiteral(1051) - aux1351))
1051 5556 0
1006 5556 0
1006 1051 5555 0
c ((SATLiteral(1021) + SATLiteral(1036) - aux1352)<=0)
-1036 -5558 0
-1021 -5558 0
-1021 -1036 -5559 0
c (0<=(SATLiteral(1021) + SATLiteral(1036) - aux1352))
1036 5559 0
1021 5559 0
1021 1036 5558 0
c ((SATLiteral(991) + aux1352 - aux1353)<=0)
5558 -5561 0
5559 -5562 0
-991 -5561 0
-991 5558 -5562 0
-991 5559 -5564 0
c (0<=(SATLiteral(991) + aux1352 - aux1353))
-5559 5564 0
-5558 5562 0
991 5564 0
991 -5559 5562 0
991 -5558 5561 0
c ((aux1349 + aux1351 - aux1354)<=0)
5555 -5566 0
5556 -5567 0
5549 -5566 0
5549 5555 -5567 0
5549 5556 -5569 0
5550 -5567 0
5550 5555 -5569 0
5550 5556 -5571 0
c (0<=(aux1349 + aux1351 - aux1354))
-5556 5571 0
-5555 5569 0
-5550 5571 0
-5550 -5556 5569 0
-5550 -5555 5567 0
-5549 5569 0
-5549 -5556 5567 0
-5549 -5555 5566 0
c ((SATLiteral(-960) + SATLiteral(-1080) - aux1355)<=0)
1080 -5573 0
960 -5573 0
960 1080 -5574 0
c (0<=(SATLiteral(-960) + SATLiteral(-1080) - aux1355))
-1080 5574 0
-960 5574 0
-960 -1080 5573 0
c ((SATLiteral(-975) + SATLiteral(-1065) - aux1356)<=0)
1065 -5576 0
975 -5576 0
975 1065 -5577 0
c (0<=(SATLiteral(-975) + SATLiteral(-1065) - aux1356))
-1065 5577 0
-975 5577 0
-975 -1065 5576 0
c ((SATLiteral(-1005) + SATLiteral(-1050) - aux1357)<=0)
1050 -5579 0
1005 -5579 0
1005 1050 -5580 0
c (0<=(SATLiteral(-1005) + SATLiteral(-1050) - aux1357))
-1050 5580 0
-1005 5580 0
-1005 -1050 5579 0
c ((SATLiteral(-1020) + SATLiteral(-1035) - aux1358)<=0)
1035 -5582 0
1020 -5582 0
1020 1035 -5583 0
c (0<=(SATLiteral(-1020) + SATLiteral(-1035) - aux1358))
-1035 5583 0
-1020 5583 0
-1020 -1035 5582 0
c ((SATLiteral(-990) + aux1358 - aux1359)<=0)
5582 -5585 0
5583 -5586 0
990 -5585 0
990 5582 -5586 0
990 5583 -5588 0
c (0<=(SATLiteral(-990) + aux1358 - aux1359))
-5583 5588 0
-5582 5586 0
-990 5588 0
-990 -5583 5586 0
-990 -5582 5585 0
c ((aux1355 + aux1357 - aux1360)<=0)
5579 -5590 0
5580 -5591 0
5573 -5590 0
5573 5579 -5591 0
5573 5580 -5593 0
5574 -5591 0
5574 5579 -5593 0
5574 5580 -5595 0
c (0<=(aux1355 + aux1357 - aux1360))
-5580 5595 0
-5579 5593 0
-5574 5595 0
-5574 -5580 5593 0
-5574 -5579 5591 0
-5573 5593 0
-5573 -5580 5591 0
-5573 -5579 5590 0
c (( - aux1361 + SATLiteral(1082) + SATLiteral(1202))<=0)
-1202 -5597 0
-1082 -5597 0
-1082 -1202 -5598 0
c (0<=( - aux1361 + SATLiteral(1082) + SATLiteral(1202)))
1202 5598 0
1082 5598 0
1082 1202 5597 0
c (( - aux1362 + SATLiteral(1097) + SATLiteral(1187))<=0)
-1187 -5600 0
-1097 -5600 0
-1097 -1187 -5601 0
c (0<=( - aux1362 + SATLiteral(1097) + SATLiteral(1187)))
1187 5601 0
1097 5601 0
1097 1187 5600 0
c (( - aux1363 + SATLiteral(1127) + SATLiteral(1172))<=0)
-1172 -5603 0
-1127 -5603 0
-1127 -1172 -5604 0
c (0<=( - aux1363 + SATLiteral(1127) + SATLiteral(1172)))
1172 5604 0
1127 5604 0
1127 1172 5603 0
c (( - aux1364 + SATLiteral(1142) + SATLiteral(1157))<=0)
-1157 -5606 0
-1142 -5606 0
-1142 -1157 -5607 0
c (0<=( - aux1364 + SATLiteral(1142) + SATLiteral(1157)))
1157 5607 0
1142 5607 0
1142 1157 5606 0
c ((aux1364 - aux1365 + SATLiteral(1112))<=0)
5606 -5609 0
5607 -5610 0
-1112 -5609 0
-1112 5606 -5610 0
-1112 5607 -5612 0
c (0<=(aux1364 - aux1365 + SATLiteral(1112)))
-5607 5612 0
-5606 5610 0
1112 5612 0
1112 -5607 5610 0
1112 -5606 5609 0
c ((aux1361 + aux1363 - aux1366)<=0)
5603 -5614 0
5604 -5615 0
5597 -5614 0
5597 5603 -5615 0
5597 5604 -5617 0
5598 -5615 0
5598 5603 -5617 0
5598 5604 -5619 0
c (0<=(aux1361 + aux1363 - aux1366))
-5604 5619 0
-5603 5617 0
-5598 5619 0
-5598 -5604 5617 0
-5598 -5603 5615 0
-5597 5617 0
-5597 -5604 5615 0
-5597 -5603 5614 0
c (( - aux1367 + SATLiteral(1084) + SATLiteral(1204))<=0)
-1204 -5621 0
-1084 -5621 0
-1084 -1204 -5622 0
c (0<=( - aux1367 + SATLiteral(1084) + SATLiteral(1204)))
1204 5622 0
1084 5622 0
1084 1204 5621 0
c (( - aux1368 + SATLiteral(1099) + SATLiteral(1189))<=0)
-1189 -5624 0
-1099 -5624 0
-1099 -1189 -5625 0
c (0<=( - aux1368 + SATLiteral(1099) + SATLiteral(1189)))
1189 5625 0
1099 5625 0
1099 1189 5624 0
c (( - aux1369 + SATLiteral(1129) + SATLiteral(1174))<=0)
-1174 -5627 0
-1129 -5627 0
-1129 -1174 -5628 0
c (0<=( - aux1369 + SATLiteral(1129) + SATLiteral(1174)))
1174 5628 0
1129 5628 0
1129 1174 5627 0
c (( - aux1370 + SATLiteral(1144) + SATLiteral(1159))<=0)
-1159 -5630 0
-1144 -5630 0
-1144 -1159 -5631 0
c (0<=( - aux1370 + SATLiteral(1144) + SATLiteral(1159)))
1159 5631 0
1144 5631 0
1144 1159 5630 0
c ((aux1370 - aux1371 + SATLiteral(1114))<=0)
5630 -5633 0
5631 -5634 0
-1114 -5633 0
-1114 5630 -5634 0
-1114 5631 -5636 0
c (0<=(aux1370 - aux1371 + SATLiteral(1114)))
-5631 5636 0
-5630 5634 0
1114 5636 0
1114 -5631 5634 0
1114 -5630 5633 0
c ((aux1367 + aux1369 - aux1372)<=0)
5627 -5638 0
5628 -5639 0
5621 -5638 0
5621 5627 -5639 0
5621 5628 -5641 0
5622 -5639 0
5622 5627 -5641 0
5622 5628 -5643 0
c (0<=(aux1367 + aux1369 - aux1372))
-5628 5643 0
-5627 5641 0
-5622 5643 0
-5622 -5628 5641 0
-5622 -5627 5639 0
-5621 5641 0
-5621 -5628 5639 0
-5621 -5627 5638 0
c (( - aux1373 + SATLiteral(1086) + SATLiteral(1206))<=0)
-1206 -5645 0
-1086 -5645 0
-1086 -1206 -5646 0
c (0<=( - aux1373 + SATLiteral(1086) + SATLiteral(1206)))
1206 5646 0
1086 5646 0
1086 1206 5645 0
c (( - aux1374 + SATLiteral(1101) + SATLiteral(1191))<=0)
-1191 -5648 0
-1101 -5648 0
-1101 -1191 -5649 0
c (0<=( - aux1374 + SATLiteral(1101) + SATLiteral(1191)))
1191 5649 0
1101 5649 0
1101 1191 5648 0
c (( - aux1375 + SATLiteral(1131) + SATLiteral(1176))<=0)
-1176 -5651 0
-1131 -5651 0
-1131 -1176 -5652 0
c (0<=( - aux1375 + SATLiteral(1131) + SATLiteral(1176)))
1176 5652 0
1131 5652 0
1131 1176 5651 0
c (( - aux1376 + SATLiteral(1146) + SATLiteral(1161))<=0)
-1161 -5654 0
-1146 -5654 0
-1146 -1161 -5655 0
c (0<=( - aux1376 + SATLiteral(1146) + SATLiteral(1161)))
1161 5655 0
1146 5655 0
1146 1161 5654 0
c ((aux1376 - aux1377 + SATLiteral(1116))<=0)
5654 -5657 0
5655 -5658 0
-1116 -5657 0
-1116 5654 -5658 0
-1116 5655 -5660 0
c (0<=(aux1376 - aux1377 + SATLiteral(1116)))
-5655 5660 0
-5654 5658 0
1116 5660 0
1116 -5655 5658 0
1116 -5654 5657 0
c ((aux1373 + aux1375 - aux1378)<=0)
5651 -5662 0
5652 -5663 0
5645 -5662 0
5645 5651 -5663 0
5645 5652 -5665 0
5646 -5663 0
5646 5651 -5665 0
5646 5652 -5667 0
c (0<=(aux1373 + aux1375 - aux1378))
-5652 5667 0
-5651 5665 0
-5646 5667 0
-5646 -5652 5665 0
-5646 -5651 5663 0
-5645 5665 0
-5645 -5652 5663 0
-5645 -5651 5662 0
c (( - aux1379 + SATLiteral(1088) + SATLiteral(1208))<=0)
-1208 -5669 0
-1088 -5669 0
-1088 -1208 -5670 0
c (0<=( - aux1379 + SATLiteral(1088) + SATLiteral(1208)))
1208 5670 0
1088 5670 0
1088 1208 5669 0
c (( - aux1380 + SATLiteral(1103) + SATLiteral(1193))<=0)
-1193 -5672 0
-1103 -5672 0
-1103 -1193 -5673 0
c (0<=( - aux1380 + SATLiteral(1103) + SATLiteral(1193)))
1193 5673 0
1103 5673 0
1103 1193 5672 0
c (( - aux1381 + SATLiteral(1133) + SATLiteral(1178))<=0)
-1178 -5675 0
-1133 -5675 0
-1133 -1178 -5676 0
c (0<=( - aux1381 + SATLiteral(1133) + SATLiteral(1178)))
1178 5676 0
1133 5676 0
1133 1178 5675 0
c (( - aux1382 + SATLiteral(1148) + SATLiteral(1163))<=0)
-1163 -5678 0
-1148 -5678 0
-1148 -1163 -5679 0
c (0<=( - aux1382 + SATLiteral(1148) + SATLiteral(1163)))
1163 5679 0
1148 5679 0
1148 1163 5678 0
c ((aux1382 - aux1383 + SATLiteral(1118))<=0)
5678 -5681 0
5679 -5682 0
-1118 -5681 0
-1118 5678 -5682 0
-1118 5679 -5684 0
c (0<=(aux1382 - aux1383 + SATLiteral(1118)))
-5679 5684 0
-5678 5682 0
1118 5684 0
1118 -5679 5682 0
1118 -5678 5681 0
c ((aux1379 + aux1381 - aux1384)<=0)
5675 -5686 0
5676 -5687 0
5669 -5686 0
5669 5675 -5687 0
5669 5676 -5689 0
5670 -5687 0
5670 5675 -5689 0
5670 5676 -5691 0
c (0<=(aux1379 + aux1381 - aux1384))
-5676 5691 0
-5675 5689 0
-5670 5691 0
-5670 -5676 5689 0
-5670 -5675 5687 0
-5669 5689 0
-5669 -5676 5687 0
-5669 -5675 5686 0
c (( - aux1385 + SATLiteral(1090) + SATLiteral(1210))<=0)
-1210 -5693 0
-1090 -5693 0
-1090 -1210 -5694 0
c (0<=( - aux1385 + SATLiteral(1090) + SATLiteral(1210)))
1210 5694 0
1090 5694 0
1090 1210 5693 0
c (( - aux1386 + SATLiteral(1105) + SATLiteral(1195))<=0)
-1195 -5696 0
-1105 -5696 0
-1105 -1195 -5697 0
c (0<=( - aux1386 + SATLiteral(1105) + SATLiteral(1195)))
1195 5697 0
1105 5697 0
1105 1195 5696 0
c (( - aux1387 + SATLiteral(1135) + SATLiteral(1180))<=0)
-1180 -5699 0
-1135 -5699 0
-1135 -1180 -5700 0
c (0<=( - aux1387 + SATLiteral(1135) + SATLiteral(1180)))
1180 5700 0
1135 5700 0
1135 1180 5699 0
c (( - aux1388 + SATLiteral(1150) + SATLiteral(1165))<=0)
-1165 -5702 0
-1150 -5702 0
-1150 -1165 -5703 0
c (0<=( - aux1388 + SATLiteral(1150) + SATLiteral(1165)))
1165 5703 0
1150 5703 0
1150 1165 5702 0
c ((aux1388 - aux1389 + SATLiteral(1120))<=0)
5702 -5705 0
5703 -5706 0
-1120 -5705 0
-1120 5702 -5706 0
-1120 5703 -5708 0
c (0<=(aux1388 - aux1389 + SATLiteral(1120)))
-5703 5708 0
-5702 5706 0
1120 5708 0
1120 -5703 5706 0
1120 -5702 5705 0
c ((aux1385 + aux1387 - aux1390)<=0)
5699 -5710 0
5700 -5711 0
5693 -5710 0
5693 5699 -5711 0
5693 5700 -5713 0
5694 -5711 0
5694 5699 -5713 0
5694 5700 -5715 0
c (0<=(aux1385 + aux1387 - aux1390))
-5700 5715 0
-5699 5713 0
-5694 5715 0
-5694 -5700 5713 0
-5694 -5699 5711 0
-5693 5713 0
-5693 -5700 5711 0
-5693 -5699 5710 0
c (( - aux1391 + SATLiteral(1092) + SATLiteral(1212))<=0)
-1212 -5717 0
-1092 -5717 0
-1092 -1212 -5718 0
c (0<=( - aux1391 + SATLiteral(1092) + SATLiteral(1212)))
1212 5718 0
1092 5718 0
1092 1212 5717 0
c (( - aux1392 + SATLiteral(1107) + SATLiteral(1197))<=0)
-1197 -5720 0
-1107 -5720 0
-1107 -1197 -5721 0
c (0<=( - aux1392 + SATLiteral(1107) + SATLiteral(1197)))
1197 5721 0
1107 5721 0
1107 1197 5720 0
c (( - aux1393 + SATLiteral(1137) + SATLiteral(1182))<=0)
-1182 -5723 0
-1137 -5723 0
-1137 -1182 -5724 0
c (0<=( - aux1393 + SATLiteral(1137) + SATLiteral(1182)))
1182 5724 0
1137 5724 0
1137 1182 5723 0
c (( - aux1394 + SATLiteral(1152) + SATLiteral(1167))<=0)
-1167 -5726 0
-1152 -5726 0
-1152 -1167 -5727 0
c (0<=( - aux1394 + SATLiteral(1152) + SATLiteral(1167)))
1167 5727 0
1152 5727 0
1152 1167 5726 0
c ((aux1394 - aux1395 + SATLiteral(1122))<=0)
5726 -5729 0
5727 -5730 0
-1122 -5729 0
-1122 5726 -5730 0
-1122 5727 -5732 0
c (0<=(aux1394 - aux1395 + SATLiteral(1122)))
-5727 5732 0
-5726 5730 0
1122 5732 0
1122 -5727 5730 0
1122 -5726 5729 0
c ((aux1391 + aux1393 - aux1396)<=0)
5723 -5734 0
5724 -5735 0
5717 -5734 0
5717 5723 -5735 0
5717 5724 -5737 0
5718 -5735 0
5718 5723 -5737 0
5718 5724 -5739 0
c (0<=(aux1391 + aux1393 - aux1396))
-5724 5739 0
-5723 5737 0
-5718 5739 0
-5718 -5724 5737 0
-5718 -5723 5735 0
-5717 5737 0
-5717 -5724 5735 0
-5717 -5723 5734 0
c (( - aux1397 + SATLiteral(1094) + SATLiteral(1214))<=0)
-1214 -5741 0
-1094 -5741 0
-1094 -1214 -5742 0
c (0<=( - aux1397 + SATLiteral(1094) + SATLiteral(1214)))
1214 5742 0
1094 5742 0
1094 1214 5741 0
c (( - aux1398 + SATLiteral(1109) + SATLiteral(1199))<=0)
-1199 -5744 0
-1109 -5744 0
-1109 -1199 -5745 0
c (0<=( - aux1398 + SATLiteral(1109) + SATLiteral(1199)))
1199 5745 0
1109 5745 0
1109 1199 5744 0
c (( - aux1399 + SATLiteral(1139) + SATLiteral(1184))<=0)
-1184 -5747 0
-1139 -5747 0
-1139 -1184 -5748 0
c (0<=( - aux1399 + SATLiteral(1139) + SATLiteral(1184)))
1184 5748 0
1139 5748 0
1139 1184 5747 0
c (( - aux1400 + SATLiteral(1154) + SATLiteral(1169))<=0)
-1169 -5750 0
-1154 -5750 0
-1154 -1169 -5751 0
c (0<=( - aux1400 + SATLiteral(1154) + SATLiteral(1169)))
1169 5751 0
1154 5751 0
1154 1169 5750 0
c ((aux1400 - aux1401 + SATLiteral(1124))<=0)
5750 -5753 0
5751 -5754 0
-1124 -5753 0
-1124 5750 -5754 0
-1124 5751 -5756 0
c (0<=(aux1400 - aux1401 + SATLiteral(1124)))
-5751 5756 0
-5750 5754 0
1124 5756 0
1124 -5751 5754 0
1124 -5750 5753 0
c ((aux1397 + aux1399 - aux1402)<=0)
5747 -5758 0
5748 -5759 0
5741 -5758 0
5741 5747 -5759 0
5741 5748 -5761 0
5742 -5759 0
5742 5747 -5761 0
5742 5748 -5763 0
c (0<=(aux1397 + aux1399 - aux1402))
-5748 5763 0
-5747 5761 0
-5742 5763 0
-5742 -5748 5761 0
-5742 -5747 5759 0
-5741 5761 0
-5741 -5748 5759 0
-5741 -5747 5758 0
c (( - aux1403 + SATLiteral(1096) + SATLiteral(1216))<=0)
-1216 -5765 0
-1096 -5765 0
-1096 -1216 -5766 0
c (0<=( - aux1403 + SATLiteral(1096) + SATLiteral(1216)))
1216 5766 0
1096 5766 0
1096 1216 5765 0
c (( - aux1404 + SATLiteral(1111) + SATLiteral(1201))<=0)
-1201 -5768 0
-1111 -5768 0
-1111 -1201 -5769 0
c (0<=( - aux1404 + SATLiteral(1111) + SATLiteral(1201)))
1201 5769 0
1111 5769 0
1111 1201 5768 0
c (( - aux1405 + SATLiteral(1141) + SATLiteral(1186))<=0)
-1186 -5771 0
-1141 -5771 0
-1141 -1186 -5772 0
c (0<=( - aux1405 + SATLiteral(1141) + SATLiteral(1186)))
1186 5772 0
1141 5772 0
1141 1186 5771 0
c (( - aux1406 + SATLiteral(1156) + SATLiteral(1171))<=0)
-1171 -5774 0
-1156 -5774 0
-1156 -1171 -5775 0
c (0<=( - aux1406 + SATLiteral(1156) + SATLiteral(1171)))
1171 5775 0
1156 5775 0
1156 1171 5774 0
c ((aux1406 - aux1407 + SATLiteral(1126))<=0)
5774 -5777 0
5775 -5778 0
-1126 -5777 0
-1126 5774 -5778 0
-1126 5775 -5780 0
c (0<=(aux1406 - aux1407 + SATLiteral(1126)))
-5775 5780 0
-5774 5778 0
1126 5780 0
1126 -5775 5778 0
1126 -5774 5777 0
c ((aux1403 + aux1405 - aux1408)<=0)
5771 -5782 0
5772 -5783 0
5765 -5782 0
5765 5771 -5783 0
5765 5772 -5785 0
5766 -5783 0
5766 5771 -5785 0
5766 5772 -5787 0
c (0<=(aux1403 + aux1405 - aux1408))
-5772 5787 0
-5771 5785 0
-5766 5787 0
-5766 -5772 5785 0
-5766 -5771 5783 0
-5765 5785 0
-5765 -5772 5783 0
-5765 -5771 5782 0
c (( - aux1409 + SATLiteral(-1095) + SATLiteral(-1215))<=0)
1215 -5789 0
1095 -5789 0
1095 1215 -5790 0
c (0<=( - aux1409 + SATLiteral(-1095) + SATLiteral(-1215)))
-1215 5790 0
-1095 5790 0
-1095 -1215 5789 0
c (( - aux1410 + SATLiteral(-1110) + SATLiteral(-1200))<=0)
1200 -5792 0
1110 -5792 0
1110 1200 -5793 0
c (0<=( - aux1410 + SATLiteral(-1110) + SATLiteral(-1200)))
-1200 5793 0
-1110 5793 0
-1110 -1200 5792 0
c (( - aux1411 + SATLiteral(-1140) + SATLiteral(-1185))<=0)
1185 -5795 0
1140 -5795 0
1140 1185 -5796 0
c (0<=( - aux1411 + SATLiteral(-1140) + SATLiteral(-1185)))
-1185 5796 0
-1140 5796 0
-1140 -1185 5795 0
c (( - aux1412 + SATLiteral(-1155) + SATLiteral(-1170))<=0)
1170 -5798 0
1155 -5798 0
1155 1170 -5799 0
c (0<=( - aux1412 + SATLiteral(-1155) + SATLiteral(-1170)))
-1170 5799 0
-1155 5799 0
-1155 -1170 5798 0
c ((aux1412 - aux1413 + SATLiteral(-1125))<=0)
5798 -5801 0
5799 -5802 0
1125 -5801 0
1125 5798 -5802 0
1125 5799 -5804 0
c (0<=(aux1412 - aux1413 + SATLiteral(-1125)))
-5799 5804 0
-5798 5802 0
-1125 5804 0
-1125 -5799 5802 0
-1125 -5798 5801 0
c ((aux1409 + aux1411 - aux1414)<=0)
5795 -5806 0
5796 -5807 0
5789 -5806 0
5789 5795 -5807 0
5789 5796 -5809 0
5790 -5807 0
5790 5795 -5809 0
5790 5796 -5811 0
c (0<=(aux1409 + aux1411 - aux1414))
-5796 5811 0
-5795 5809 0
-5790 5811 0
-5790 -5796 5809 0
-5790 -5795 5807 0
-5789 5809 0
-5789 -5796 5807 0
-5789 -5795 5806 0
c ((SATLiteral(272) - aux1415 + SATLiteral(167))<=0)
-167 -5813 0
-272 -5813 0
-272 -167 -5814 0
c (0<=(SATLiteral(272) - aux1415 + SATLiteral(167)))
167 5814 0
272 5814 0
272 167 5813 0
c ((SATLiteral(287) - aux1416 + SATLiteral(152))<=0)
-152 -5816 0
-287 -5816 0
-287 -152 -5817 0
c (0<=(SATLiteral(287) - aux1416 + SATLiteral(152)))
152 5817 0
287 5817 0
287 152 5816 0
c ((SATLiteral(2) - aux1417 + SATLiteral(137))<=0)
-137 -5819 0
-2 -5819 0
-2 -137 -5820 0
c (0<=(SATLiteral(2) - aux1417 + SATLiteral(137)))
137 5820 0
2 5820 0
2 137 5819 0
c ((SATLiteral(17) + SATLiteral(32) - aux1418)<=0)
-32 -5822 0
-17 -5822 0
-17 -32 -5823 0
c (0<=(SATLiteral(17) + SATLiteral(32) - aux1418))
32 5823 0
17 5823 0
17 32 5822 0
c ((SATLiteral(302) + aux1418 - aux1419)<=0)
5822 -5825 0
5823 -5826 0
-302 -5825 0
-302 5822 -5826 0
-302 5823 -5828 0
c (0<=(SATLiteral(302) + aux1418 - aux1419))
-5823 5828 0
-5822 5826 0
302 5828 0
302 -5823 5826 0
302 -5822 5825 0
c ((aux1415 + aux1417 - aux1420)<=0)
5819 -5830 0
5820 -5831 0
5813 -5830 0
5813 5819 -5831 0
5813 5820 -5833 0
5814 -5831 0
5814 5819 -5833 0
5814 5820 -5835 0
c (0<=(aux1415 + aux1417 - aux1420))
-5820 5835 0
-5819 5833 0
-5814 5835 0
-5814 -5820 5833 0
-5814 -5819 5831 0
-5813 5833 0
-5813 -5820 5831 0
-5813 -5819 5830 0
c ((SATLiteral(274) - aux1421 + SATLiteral(169))<=0)
-169 -5837 0
-274 -5837 0
-274 -169 -5838 0
c (0<=(SATLiteral(274) - aux1421 + SATLiteral(169)))
169 5838 0
274 5838 0
274 169 5837 0
c ((SATLiteral(289) - aux1422 + SATLiteral(154))<=0)
-154 -5840 0
-289 -5840 0
-289 -154 -5841 0
c (0<=(SATLiteral(289) - aux1422 + SATLiteral(154)))
154 5841 0
289 5841 0
289 154 5840 0
c ((SATLiteral(4) - aux1423 + SATLiteral(139))<=0)
-139 -5843 0
-4 -5843 0
-4 -139 -5844 0
c (0<=(SATLiteral(4) - aux1423 + SATLiteral(139)))
139 5844 0
4 5844 0
4 139 5843 0
c ((SATLiteral(19) + SATLiteral(34) - aux1424)<=0)
-34 -5846 0
-19 -5846 0
-19 -34 -5847 0
c (0<=(SATLiteral(19) + SATLiteral(34) - aux1424))
34 5847 0
19 5847 0
19 34 5846 0
c ((SATLiteral(304) + aux1424 - aux1425)<=0)
5846 -5849 0
5847 -5850 0
-304 -5849 0
-304 5846 -5850 0
-304 5847 -5852 0
c (0<=(SATLiteral(304) + aux1424 - aux1425))
-5847 5852 0
-5846 5850 0
304 5852 0
304 -5847 5850 0
304 -5846 5849 0
c ((aux1421 + aux1423 - aux1426)<=0)
5843 -5854 0
5844 -5855 0
5837 -5854 0
5837 5843 -5855 0
5837 5844 -5857 0
5838 -5855 0
5838 5843 -5857 0
5838 5844 -5859 0
c (0<=(aux1421 + aux1423 - aux1426))
-5844 5859 0
-5843 5857 0
-5838 5859 0
-5838 -5844 5857 0
-5838 -5843 5855 0
-5837 5857 0
-5837 -5844 5855 0
-5837 -5843 5854 0
c ((SATLiteral(276) - aux1427 + SATLiteral(171))<=0)
-171 -5861 0
-276 -5861 0
-276 -171 -5862 0
c (0<=(SATLiteral(276) - aux1427 + SATLiteral(171)))
171 5862 0
276 5862 0
276 171 5861 0
c ((SATLiteral(291) - aux1428 + SATLiteral(156))<=0)
-156 -5864 0
-291 -5864 0
-291 -156 -5865 0
c (0<=(SATLiteral(291) - aux1428 + SATLiteral(156)))
156 5865 0
291 5865 0
291 156 5864 0
c ((SATLiteral(6) - aux1429 + SATLiteral(141))<=0)
-141 -5867 0
-6 -5867 0
-6 -141 -5868 0
c (0<=(SATLiteral(6) - aux1429 + SATLiteral(141)))
141 5868 0
6 5868 0
6 141 5867 0
c ((SATLiteral(21) + SATLiteral(36) - aux1430)<=0)
-36 -5870 0
-21 -5870 0
-21 -36 -5871 0
c (0<=(SATLiteral(21) + SATLiteral(36) - aux1430))
36 5871 0
21 5871 0
21 36 5870 0
c ((SATLiteral(306) + aux1430 - aux1431)<=0)
5870 -5873 0
5871 -5874 0
-306 -5873 0
-306 5870 -5874 0
-306 5871 -5876 0
c (0<=(SATLiteral(306) + aux1430 - aux1431))
-5871 5876 0
-5870 5874 0
306 5876 0
306 -5871 5874 0
306 -5870 5873 0
c ((aux1427 + aux1429 - aux1432)<=0)
5867 -5878 0
5868 -5879 0
5861 -5878 0
5861 5867 -5879 0
5861 5868 -5881 0
5862 -5879 0
5862 5867 -5881 0
5862 5868 -5883 0
c (0<=(aux1427 + aux1429 - aux1432))
-5868 5883 0
-5867 5881 0
-5862 5883 0
-5862 -5868 5881 0
-5862 -5867 5879 0
-5861 5881 0
-5861 -5868 5879 0
-5861 -5867 5878 0
c ((SATLiteral(278) - aux1433 + SATLiteral(173))<=0)
-173 -5885 0
-278 -5885 0
-278 -173 -5886 0
c (0<=(SATLiteral(278) - aux1433 + SATLiteral(173)))
173 5886 0
278 5886 0
278 173 5885 0
c ((SATLiteral(293) - aux1434 + SATLiteral(158))<=0)
-158 -5888 0
-293 -5888 0
-293 -158 -5889 0
c (0<=(SATLiteral(293) - aux1434 + SATLiteral(158)))
158 5889 0
293 5889 0
293 158 5888 0
c ((SATLiteral(8) - aux1435 + SATLiteral(143))<=0)
-143 -5891 0
-8 -5891 0
-8 -143 -5892 0
c (0<=(SATLiteral(8) - aux1435 + SATLiteral(143)))
143 5892 0
8 5892 0
8 143 5891 0
c ((SATLiteral(23) + SATLiteral(38) - aux1436)<=0)
-38 -5894 0
-23 -5894 0
-23 -38 -5895 0
c (0<=(SATLiteral(23) + SATLiteral(38) - aux1436))
38 5895 0
23 5895 0
23 38 5894 0
c ((SATLiteral(308) + aux1436 - aux1437)<=0)
5894 -5897 0
5895 -5898 0
-308 -5897 0
-308 5894 -5898 0
-308 5895 -5900 0
c (0<=(SATLiteral(308) + aux1436 - aux1437))
-5895 5900 0
-5894 5898 0
308 5900 0
308 -5895 5898 0
308 -5894 5897 0
c ((aux1433 + aux1435 - aux1438)<=0)
5891 -5902 0
5892 -5903 0
5885 -5902 0
5885 5891 -5903 0
5885 5892 -5905 0
5886 -5903 0
5886 5891 -5905 0
5886 5892 -5907 0
c (0<=(aux1433 + aux1435 - aux1438))
-5892 5907 0
-5891 5905 0
-5886 5907 0
-5886 -5892 5905 0
-5886 -5891 5903 0
-5885 5905 0
-5885 -5892 5903 0
-5885 -5891 5902 0
c ((SATLiteral(280) - aux1439 + SATLiteral(175))<=0)
-175 -5909 0
-280 -5909 0
-280 -175 -5910 0
c (0<=(SATLiteral(280) - aux1439 + SATLiteral(175)))
175 5910 0
280 5910 0
280 175 5909 0
c ((SATLiteral(295) - aux1440 + SATLiteral(160))<=0)
-160 -5912 0
-295 -5912 0
-295 -160 -5913 0
c (0<=(SATLiteral(295) - aux1440 + SATLiteral(160)))
160 5913 0
295 5913 0
295 160 5912 0
c ((SATLiteral(10) - aux1441 + SATLiteral(145))<=0)
-145 -5915 0
-10 -5915 0
-10 -145 -5916 0
c (0<=(SATLiteral(10) - aux1441 + SATLiteral(145)))
145 5916 0
10 5916 0
10 145 5915 0
c ((SATLiteral(25) + SATLiteral(40) - aux1442)<=0)
-40 -5918 0
-25 -5918 0
-25 -40 -5919 0
c (0<=(SATLiteral(25) + SATLiteral(40) - aux1442))
40 5919 0
25 5919 0
25 40 5918 0
c ((SATLiteral(310) + aux1442 - aux1443)<=0)
5918 -5921 0
5919 -5922 0
-310 -5921 0
-310 5918 -5922 0
-310 5919 -5924 0
c (0<=(SATLiteral(310) + aux1442 - aux1443))
-5919 5924 0
-5918 5922 0
310 5924 0
310 -5919 5922 0
310 -5918 5921 0
c ((aux1439 + aux1441 - aux1444)<=0)
5915 -5926 0
5916 -5927 0
5909 -5926 0
5909 5915 -5927 0
5909 5916 -5929 0
5910 -5927 0
5910 5915 -5929 0
5910 5916 -5931 0
c (0<=(aux1439 + aux1441 - aux1444))
-5916 5931 0
-5915 5929 0
-5910 5931 0
-5910 -5916 5929 0
-5910 -5915 5927 0
-5909 5929 0
-5909 -5916 5927 0
-5909 -5915 5926 0
c ((SATLiteral(282) - aux1445 + SATLiteral(177))<=0)
-177 -5933 0
-282 -5933 0
-282 -177 -5934 0
c (0<=(SATLiteral(282) - aux1445 + SATLiteral(177)))
177 5934 0
282 5934 0
282 177 5933 0
c ((SATLiteral(297) - aux1446 + SATLiteral(162))<=0)
-162 -5936 0
-297 -5936 0
-297 -162 -5937 0
c (0<=(SATLiteral(297) - aux1446 + SATLiteral(162)))
162 5937 0
297 5937 0
297 162 5936 0
c ((SATLiteral(12) - aux1447 + SATLiteral(147))<=0)
-147 -5939 0
-12 -5939 0
-12 -147 -5940 0
c (0<=(SATLiteral(12) - aux1447 + SATLiteral(147)))
147 5940 0
12 5940 0
12 147 5939 0
c ((SATLiteral(27) + SATLiteral(42) - aux1448)<=0)
-42 -5942 0
-27 -5942 0
-27 -42 -5943 0
c (0<=(SATLiteral(27) + SATLiteral(42) - aux1448))
42 5943 0
27 5943 0
27 42 5942 0
c ((SATLiteral(312) + aux1448 - aux1449)<=0)
5942 -5945 0
5943 -5946 0
-312 -5945 0
-312 5942 -5946 0
-312 5943 -5948 0
c (0<=(SATLiteral(312) + aux1448 - aux1449))
-5943 5948 0
-5942 5946 0
312 5948 0
312 -5943 5946 0
312 -5942 5945 0
c ((aux1445 + aux1447 - aux1450)<=0)
5939 -5950 0
5940 -5951 0
5933 -5950 0
5933 5939 -5951 0
5933 5940 -5953 0
5934 -5951 0
5934 5939 -5953 0
5934 5940 -5955 0
c (0<=(aux1445 + aux1447 - aux1450))
-5940 5955 0
-5939 5953 0
-5934 5955 0
-5934 -5940 5953 0
-5934 -5939 5951 0
-5933 5953 0
-5933 -5940 5951 0
-5933 -5939 5950 0
c ((SATLiteral(284) - aux1451 + SATLiteral(179))<=0)
-179 -5957 0
-284 -5957 0
-284 -179 -5958 0
c (0<=(SATLiteral(284) - aux1451 + SATLiteral(179)))
179 5958 0
284 5958 0
284 179 5957 0
c ((SATLiteral(299) - aux1452 + SATLiteral(164))<=0)
-164 -5960 0
-299 -5960 0
-299 -164 -5961 0
c (0<=(SATLiteral(299) - aux1452 + SATLiteral(164)))
164 5961 0
299 5961 0
299 164 5960 0
c ((SATLiteral(14) - aux1453 + SATLiteral(149))<=0)
-149 -5963 0
-14 -5963 0
-14 -149 -5964 0
c (0<=(SATLiteral(14) - aux1453 + SATLiteral(149)))
149 5964 0
14 5964 0
14 149 5963 0
c ((SATLiteral(29) + SATLiteral(44) - aux1454)<=0)
-44 -5966 0
-29 -5966 0
-29 -44 -5967 0
c (0<=(SATLiteral(29) + SATLiteral(44) - aux1454))
44 5967 0
29 5967 0
29 44 5966 0
c ((SATLiteral(314) + aux1454 - aux1455)<=0)
5966 -5969 0
5967 -5970 0
-314 -5969 0
-314 5966 -5970 0
-314 5967 -5972 0
c (0<=(SATLiteral(314) + aux1454 - aux1455))
-5967 5972 0
-5966 5970 0
314 5972 0
314 -5967 5970 0
314 -5966 5969 0
c ((aux1451 + aux1453 - aux1456)<=0)
5963 -5974 0
5964 -5975 0
5957 -5974 0
5957 5963 -5975 0
5957 5964 -5977 0
5958 -5975 0
5958 5963 -5977 0
5958 5964 -5979 0
c (0<=(aux1451 + aux1453 - aux1456))
-5964 5979 0
-5963 5977 0
-5958 5979 0
-5958 -5964 5977 0
-5958 -5963 5975 0
-5957 5977 0
-5957 -5964 5975 0
-5957 -5963 5974 0
c ((SATLiteral(286) - aux1457 + SATLiteral(181))<=0)
-181 -5981 0
-286 -5981 0
-286 -181 -5982 0
c (0<=(SATLiteral(286) - aux1457 + SATLiteral(181)))
181 5982 0
286 5982 0
286 181 5981 0
c ((SATLiteral(301) - aux1458 + SATLiteral(166))<=0)
-166 -5984 0
-301 -5984 0
-301 -166 -5985 0
c (0<=(SATLiteral(301) - aux1458 + SATLiteral(166)))
166 5985 0
301 5985 0
301 166 5984 0
c ((SATLiteral(16) - aux1459 + SATLiteral(151))<=0)
-151 -5987 0
-16 -5987 0
-16 -151 -5988 0
c (0<=(SATLiteral(16) - aux1459 + SATLiteral(151)))
151 5988 0
16 5988 0
16 151 5987 0
c ((SATLiteral(31) + SATLiteral(46) - aux1460)<=0)
-46 -5990 0
-31 -5990 0
-31 -46 -5991 0
c (0<=(SATLiteral(31) + SATLiteral(46) - aux1460))
46 5991 0
31 5991 0
31 46 5990 0
c ((SATLiteral(316) + aux1460 - aux1461)<=0)
5990 -5993 0
5991 -5994 0
-316 -5993 0
-316 5990 -5994 0
-316 5991 -5996 0
c (0<=(SATLiteral(316) + aux1460 - aux1461))
-5991 5996 0
-5990 5994 0
316 5996 0
316 -5991 5994 0
316 -5990 5993 0
c ((aux1457 + aux1459 - aux1462)<=0)
5987 -5998 0
5988 -5999 0
5981 -5998 0
5981 5987 -5999 0
5981 5988 -6001 0
5982 -5999 0
5982 5987 -6001 0
5982 5988 -6003 0
c (0<=(aux1457 + aux1459 - aux1462))
-5988 6003 0
-5987 6001 0
-5982 6003 0
-5982 -5988 6001 0
-5982 -5987 5999 0
-5981 6001 0
-5981 -5988 5999 0
-5981 -5987 5998 0
c ((SATLiteral(-285) - aux1463 + SATLiteral(-180))<=0)
180 -6005 0
285 -6005 0
285 180 -6006 0
c (0<=(SATLiteral(-285) - aux1463 + SATLiteral(-180)))
-180 6006 0
-285 6006 0
-285 -180 6005 0
c ((SATLiteral(-300) - aux1464 + SATLiteral(-165))<=0)
165 -6008 0
300 -6008 0
300 165 -6009 0
c (0<=(SATLiteral(-300) - aux1464 + SATLiteral(-165)))
-165 6009 0
-300 6009 0
-300 -165 6008 0
c ((SATLiteral(-15) - aux1465 + SATLiteral(-150))<=0)
150 -6011 0
15 -6011 0
15 150 -6012 0
c (0<=(SATLiteral(-15) - aux1465 + SATLiteral(-150)))
-150 6012 0
-15 6012 0
-15 -150 6011 0
c ((SATLiteral(-30) + SATLiteral(-45) - aux1466)<=0)
45 -6014 0
30 -6014 0
30 45 -6015 0
c (0<=(SATLiteral(-30) + SATLiteral(-45) - aux1466))
-45 6015 0
-30 6015 0
-30 -45 6014 0
c ((SATLiteral(-315) + aux1466 - aux1467)<=0)
6014 -6017 0
6015 -6018 0
315 -6017 0
315 6014 -6018 0
315 6015 -6020 0
c (0<=(SATLiteral(-315) + aux1466 - aux1467))
-6015 6020 0
-6014 6018 0
-315 6020 0
-315 -6015 6018 0
-315 -6014 6017 0
c ((aux1463 + aux1465 - aux1468)<=0)
6011 -6022 0
6012 -6023 0
6005 -6022 0
6005 6011 -6023 0
6005 6012 -6025 0
6006 -6023 0
6006 6011 -6025 0
6006 6012 -6027 0
c (0<=(aux1463 + aux1465 - aux1468))
-6012 6027 0
-6011 6025 0
-6006 6027 0
-6006 -6012 6025 0
-6006 -6011 6023 0
-6005 6025 0
-6005 -6012 6023 0
-6005 -6011 6022 0
c ((SATLiteral(317) - aux1469 + SATLiteral(212))<=0)
-212 -6029 0
-317 -6029 0
-317 -212 -6030 0
c (0<=(SATLiteral(317) - aux1469 + SATLiteral(212)))
212 6030 0
317 6030 0
317 212 6029 0
c ((SATLiteral(332) - aux1470 + SATLiteral(197))<=0)
-197 -6032 0
-332 -6032 0
-332 -197 -6033 0
c (0<=(SATLiteral(332) - aux1470 + SATLiteral(197)))
197 6033 0
332 6033 0
332 197 6032 0
c ((SATLiteral(47) - aux1471 + SATLiteral(182))<=0)
-182 -6035 0
-47 -6035 0
-47 -182 -6036 0
c (0<=(SATLiteral(47) - aux1471 + SATLiteral(182)))
182 6036 0
47 6036 0
47 182 6035 0
c ((SATLiteral(62) + SATLiteral(77) - aux1472)<=0)
-77 -6038 0
-62 -6038 0
-62 -77 -6039 0
c (0<=(SATLiteral(62) + SATLiteral(77) - aux1472))
77 6039 0
62 6039 0
62 77 6038 0
c ((SATLiteral(347) + aux1472 - aux1473)<=0)
6038 -6041 0
6039 -6042 0
-347 -6041 0
-347 6038 -6042 0
-347 6039 -6044 0
c (0<=(SATLiteral(347) + aux1472 - aux1473))
-6039 6044 0
-6038 6042 0
347 6044 0
347 -6039 6042 0
347 -6038 6041 0
c ((aux1469 + aux1471 - aux1474)<=0)
6035 -6046 0
6036 -6047 0
6029 -6046 0
6029 6035 -6047 0
6029 6036 -6049 0
6030 -6047 0
6030 6035 -6049 0
6030 6036 -6051 0
c (0<=(aux1469 + aux1471 - aux1474))
-6036 6051 0
-6035 6049 0
-6030 6051 0
-6030 -6036 6049 0
-6030 -6035 6047 0
-6029 6049 0
-6029 -6036 6047 0
-6029 -6035 6046 0
c ((SATLiteral(319) - aux1475 + SATLiteral(214))<=0)
-214 -6053 0
-319 -6053 0
-319 -214 -6054 0
c (0<=(SATLiteral(319) - aux1475 + SATLiteral(214)))
214 6054 0
319 6054 0
319 214 6053 0
c ((SATLiteral(334) - aux1476 + SATLiteral(199))<=0)
-199 -6056 0
-334 -6056 0
-334 -199 -6057 0
c (0<=(SATLiteral(334) - aux1476 + SATLiteral(199)))
199 6057 0
334 6057 0
334 199 6056 0
c ((SATLiteral(49) - aux1477 + SATLiteral(184))<=0)
-184 -6059 0
-49 -6059 0
-49 -184 -6060 0
c (0<=(SATLiteral(49) - aux1477 + SATLiteral(184)))
184 6060 0
49 6060 0
49 184 6059 0
c ((SATLiteral(64) + SATLiteral(79) - aux1478)<=0)
-79 -6062 0
-64 -6062 0
-64 -79 -6063 0
c (0<=(SATLiteral(64) + SATLiteral(79) - aux1478))
79 6063 0
64 6063 0
64 79 6062 0
c ((SATLiteral(349) + aux1478 - aux1479)<=0)
6062 -6065 0
6063 -6066 0
-349 -6065 0
-349 6062 -6066 0
-349 6063 -6068 0
c (0<=(SATLiteral(349) + aux1478 - aux1479))
-6063 6068 0
-6062 6066 0
349 6068 0
349 -6063 6066 0
349 -6062 6065 0
c ((aux1475 + aux1477 - aux1480)<=0)
6059 -6070 0
6060 -6071 0
6053 -6070 0
6053 6059 -6071 0
6053 6060 -6073 0
6054 -6071 0
6054 6059 -6073 0
6054 6060 -6075 0
c (0<=(aux1475 + aux1477 - aux1480))
-6060 6075 0
-6059 6073 0
-6054 6075 0
-6054 -6060 6073 0
-6054 -6059 6071 0
-6053 6073 0
-6053 -6060 6071 0
-6053 -6059 6070 0
c ((SATLiteral(321) - aux1481 + SATLiteral(216))<=0)
-216 -6077 0
-321 -6077 0
-321 -216 -6078 0
c (0<=(SATLiteral(321) - aux1481 + SATLiteral(216)))
216 6078 0
321 6078 0
321 216 6077 0
c ((SATLiteral(336) - aux1482 + SATLiteral(201))<=0)
-201 -6080 0
-336 -6080 0
-336 -201 -6081 0
c (0<=(SATLiteral(336) - aux1482 + SATLiteral(201)))
201 6081 0
336 6081 0
336 201 6080 0
c ((SATLiteral(51) - aux1483 + SATLiteral(186))<=0)
-186 -6083 0
-51 -6083 0
-51 -186 -6084 0
c (0<=(SATLiteral(51) - aux1483 + SATLiteral(186)))
186 6084 0
51 6084 0
51 186 6083 0
c ((SATLiteral(66) + SATLiteral(81) - aux1484)<=0)
-81 -6086 0
-66 -6086 0
-66 -81 -6087 0
c (0<=(SATLiteral(66) + SATLiteral(81) - aux1484))
81 6087 0
66 6087 0
66 81 6086 0
c ((SATLiteral(351) + aux1484 - aux1485)<=0)
6086 -6089 0
6087 -6090 0
-351 -6089 0
-351 6086 -6090 0
-351 6087 -6092 0
c (0<=(SATLiteral(351) + aux1484 - aux1485))
-6087 6092 0
-6086 6090 0
351 6092 0
351 -6087 6090 0
351 -6086 6089 0
c ((aux1481 + aux1483 - aux1486)<=0)
6083 -6094 0
6084 -6095 0
6077 -6094 0
6077 6083 -6095 0
6077 6084 -6097 0
6078 -6095 0
6078 6083 -6097 0
6078 6084 -6099 0
c (0<=(aux1481 + aux1483 - aux1486))
-6084 6099 0
-6083 6097 0
-6078 6099 0
-6078 -6084 6097 0
-6078 -6083 6095 0
-6077 6097 0
-6077 -6084 6095 0
-6077 -6083 6094 0
c ((SATLiteral(323) - aux1487 + SATLiteral(218))<=0)
-218 -6101 0
-323 -6101 0
-323 -218 -6102 0
c (0<=(SATLiteral(323) - aux1487 + SATLiteral(218)))
218 6102 0
323 6102 0
323 218 6101 0
c ((SATLiteral(338) - aux1488 + SATLiteral(203))<=0)
-203 -6104 0
-338 -6104 0
-338 -203 -6105 0
c (0<=(SATLiteral(338) - aux1488 + SATLiteral(203)))
203 6105 0
338 6105 0
338 203 6104 0
c ((SATLiteral(53) - aux1489 + SATLiteral(188))<=0)
-188 -6107 0
-53 -6107 0
-53 -188 -6108 0
c (0<=(SATLiteral(53) - aux1489 + SATLiteral(188)))
188 6108 0
53 6108 0
53 188 6107 0
c ((SATLiteral(68) + SATLiteral(83) - aux1490)<=0)
-83 -6110 0
-68 -6110 0
-68 -83 -6111 0
c (0<=(SATLiteral(68) + SATLiteral(83) - aux1490))
83 6111 0
68 6111 0
68 83 6110 0
c ((SATLiteral(353) + aux1490 - aux1491)<=0)
6110 -6113 0
6111 -6114 0
-353 -6113 0
-353 6110 -6114 0
-353 6111 -6116 0
c (0<=(SATLiteral(353) + aux1490 - aux1491))
-6111 6116 0
-6110 6114 0
353 6116 0
353 -6111 6114 0
353 -6110 6113 0
c ((aux1487 + aux1489 - aux1492)<=0)
6107 -6118 0
6108 -6119 0
6101 -6118 0
6101 6107 -6119 0
6101 6108 -6121 0
6102 -6119 0
6102 6107 -6121 0
6102 6108 -6123 0
c (0<=(aux1487 + aux1489 - aux1492))
-6108 6123 0
-6107 6121 0
-6102 6123 0
-6102 -6108 6121 0
-6102 -6107 6119 0
-6101 6121 0
-6101 -6108 6119 0
-6101 -6107 6118 0
c ((SATLiteral(325) - aux1493 + SATLiteral(220))<=0)
-220 -6125 0
-325 -6125 0
-325 -220 -6126 0
c (0<=(SATLiteral(325) - aux1493 + SATLiteral(220)))
220 6126 0
325 6126 0
325 220 6125 0
c ((SATLiteral(340) - aux1494 + SATLiteral(205))<=0)
-205 -6128 0
-340 -6128 0
-340 -205 -6129 0
c (0<=(SATLiteral(340) - aux1494 + SATLiteral(205)))
205 6129 0
340 6129 0
340 205 6128 0
c ((SATLiteral(55) - aux1495 + SATLiteral(190))<=0)
-190 -6131 0
-55 -6131 0
-55 -190 -6132 0
c (0<=(SATLiteral(55) - aux1495 + SATLiteral(190)))
190 6132 0
55 6132 0
55 190 6131 0
c ((SATLiteral(70) + SATLiteral(85) - aux1496)<=0)
-85 -6134 0
-70 -6134 0
-70 -85 -6135 0
c (0<=(SATLiteral(70) + SATLiteral(85) - aux1496))
85 6135 0
70 6135 0
70 85 6134 0
c ((SATLiteral(355) + aux1496 - aux1497)<=0)
6134 -6137 0
6135 -6138 0
-355 -6137 0
-355 6134 -6138 0
-355 6135 -6140 0
c (0<=(SATLiteral(355) + aux1496 - aux1497))
-6135 6140 0
-6134 6138 0
355 6140 0
355 -6135 6138 0
355 -6134 6137 0
c ((aux1493 + aux1495 - aux1498)<=0)
6131 -6142 0
6132 -6143 0
6125 -6142 0
6125 6131 -6143 0
6125 6132 -6145 0
6126 -6143 0
6126 6131 -6145 0
6126 6132 -6147 0
c (0<=(aux1493 + aux1495 - aux1498))
-6132 6147 0
-6131 6145 0
-6126 6147 0
-6126 -6132 6145 0
-6126 -6131 6143 0
-6125 6145 0
-6125 -6132 6143 0
-6125 -6131 6142 0
c ((SATLiteral(327) - aux1499 + SATLiteral(222))<=0)
-222 -6149 0
-327 -6149 0
-327 -222 -6150 0
c (0<=(SATLiteral(327) - aux1499 + SATLiteral(222)))
222 6150 0
327 6150 0
327 222 6149 0
c ((SATLiteral(342) - aux1500 + SATLiteral(207))<=0)
-207 -6152 0
-342 -6152 0
-342 -207 -6153 0
c (0<=(SATLiteral(342) - aux1500 + SATLiteral(207)))
207 6153 0
342 6153 0
342 207 6152 0
c ((SATLiteral(57) - aux1501 + SATLiteral(192))<=0)
-192 -6155 0
-57 -6155 0
-57 -192 -6156 0
c (0<=(SATLiteral(57) - aux1501 + SATLiteral(192)))
192 6156 0
57 6156 0
57 192 6155 0
c ((SATLiteral(72) + SATLiteral(87) - aux1502)<=0)
-87 -6158 0
-72 -6158 0
-72 -87 -6159 0
c (0<=(SATLiteral(72) + SATLiteral(87) - aux1502))
87 6159 0
72 6159 0
72 87 6158 0
c ((SATLiteral(357) + aux1502 - aux1503)<=0)
6158 -6161 0
6159 -6162 0
-357 -6161 0
-357 6158 -6162 0
-357 6159 -6164 0
c (0<=(SATLiteral(357) + aux1502 - aux1503))
-6159 6164 0
-6158 6162 0
357 6164 0
357 -6159 6162 0
357 -6158 6161 0
c ((aux1499 + aux1501 - aux1504)<=0)
6155 -6166 0
6156 -6167 0
6149 -6166 0
6149 6155 -6167 0
6149 6156 -6169 0
6150 -6167 0
6150 6155 -6169 0
6150 6156 -6171 0
c (0<=(aux1499 + aux1501 - aux1504))
-6156 6171 0
-6155 6169 0
-6150 6171 0
-6150 -6156 6169 0
-6150 -6155 6167 0
-6149 6169 0
-6149 -6156 6167 0
-6149 -6155 6166 0
c ((SATLiteral(329) - aux1505 + SATLiteral(224))<=0)
-224 -6173 0
-329 -6173 0
-329 -224 -6174 0
c (0<=(SATLiteral(329) - aux1505 + SATLiteral(224)))
224 6174 0
329 6174 0
329 224 6173 0
c ((SATLiteral(344) - aux1506 + SATLiteral(209))<=0)
-209 -6176 0
-344 -6176 0
-344 -209 -6177 0
c (0<=(SATLiteral(344) - aux1506 + SATLiteral(209)))
209 6177 0
344 6177 0
344 209 6176 0
c ((SATLiteral(59) - aux1507 + SATLiteral(194))<=0)
-194 -6179 0
-59 -6179 0
-59 -194 -6180 0
c (0<=(SATLiteral(59) - aux1507 + SATLiteral(194)))
194 6180 0
59 6180 0
59 194 6179 0
c ((SATLiteral(74) + SATLiteral(89) - aux1508)<=0)
-89 -6182 0
-74 -6182 0
-74 -89 -6183 0
c (0<=(SATLiteral(74) + SATLiteral(89) - aux1508))
89 6183 0
74 6183 0
74 89 6182 0
c ((SATLiteral(359) + aux1508 - aux1509)<=0)
6182 -6185 0
6183 -6186 0
-359 -6185 0
-359 6182 -6186 0
-359 6183 -6188 0
c (0<=(SATLiteral(359) + aux1508 - aux1509))
-6183 6188 0
-6182 6186 0
359 6188 0
359 -6183 6186 0
359 -6182 6185 0
c ((aux1505 + aux1507 - aux1510)<=0)
6179 -6190 0
6180 -6191 0
6173 -6190 0
6173 6179 -6191 0
6173 6180 -6193 0
6174 -6191 0
6174 6179 -6193 0
6174 6180 -6195 0
c (0<=(aux1505 + aux1507 - aux1510))
-6180 6195 0
-6179 6193 0
-6174 6195 0
-6174 -6180 6193 0
-6174 -6179 6191 0
-6173 6193 0
-6173 -6180 6191 0
-6173 -6179 6190 0
c ((SATLiteral(331) - aux1511 + SATLiteral(226))<=0)
-226 -6197 0
-331 -6197 0
-331 -226 -6198 0
c (0<=(SATLiteral(331) - aux1511 + SATLiteral(226)))
226 6198 0
331 6198 0
331 226 6197 0
c ((SATLiteral(346) - aux1512 + SATLiteral(211))<=0)
-211 -6200 0
-346 -6200 0
-346 -211 -6201 0
c (0<=(SATLiteral(346) - aux1512 + SATLiteral(211)))
211 6201 0
346 6201 0
346 211 6200 0
c ((SATLiteral(61) - aux1513 + SATLiteral(196))<=0)
-196 -6203 0
-61 -6203 0
-61 -196 -6204 0
c (0<=(SATLiteral(61) - aux1513 + SATLiteral(196)))
196 6204 0
61 6204 0
61 196 6203 0
c ((SATLiteral(76) + SATLiteral(91) - aux1514)<=0)
-91 -6206 0
-76 -6206 0
-76 -91 -6207 0
c (0<=(SATLiteral(76) + SATLiteral(91) - aux1514))
91 6207 0
76 6207 0
76 91 6206 0
c ((SATLiteral(361) + aux1514 - aux1515)<=0)
6206 -6209 0
6207 -6210 0
-361 -6209 0
-361 6206 -6210 0
-361 6207 -6212 0
c (0<=(SATLiteral(361) + aux1514 - aux1515))
-6207 6212 0
-6206 6210 0
361 6212 0
361 -6207 6210 0
361 -6206 6209 0
c ((aux1511 + aux1513 - aux1516)<=0)
6203 -6214 0
6204 -6215 0
6197 -6214 0
6197 6203 -6215 0
6197 6204 -6217 0
6198 -6215 0
6198 6203 -6217 0
6198 6204 -6219 0
c (0<=(aux1511 + aux1513 - aux1516))
-6204 6219 0
-6203 6217 0
-6198 6219 0
-6198 -6204 6217 0
-6198 -6203 6215 0
-6197 6217 0
-6197 -6204 6215 0
-6197 -6203 6214 0
c ((SATLiteral(-330) - aux1517 + SATLiteral(-225))<=0)
225 -6221 0
330 -6221 0
330 225 -6222 0
c (0<=(SATLiteral(-330) - aux1517 + SATLiteral(-225)))
-225 6222 0
-330 6222 0
-330 -225 6221 0
c ((SATLiteral(-345) - aux1518 + SATLiteral(-210))<=0)
210 -6224 0
345 -6224 0
345 210 -6225 0
c (0<=(SATLiteral(-345) - aux1518 + SATLiteral(-210)))
-210 6225 0
-345 6225 0
-345 -210 6224 0
c ((SATLiteral(-60) - aux1519 + SATLiteral(-195))<=0)
195 -6227 0
60 -6227 0
60 195 -6228 0
c (0<=(SATLiteral(-60) - aux1519 + SATLiteral(-195)))
-195 6228 0
-60 6228 0
-60 -195 6227 0
c ((SATLiteral(-75) + SATLiteral(-90) - aux1520)<=0)
90 -6230 0
75 -6230 0
75 90 -6231 0
c (0<=(SATLiteral(-75) + SATLiteral(-90) - aux1520))
-90 6231 0
-75 6231 0
-75 -90 6230 0
c ((SATLiteral(-360) + aux1520 - aux1521)<=0)
6230 -6233 0
6231 -6234 0
360 -6233 0
360 6230 -6234 0
360 6231 -6236 0
c (0<=(SATLiteral(-360) + aux1520 - aux1521))
-6231 6236 0
-6230 6234 0
-360 6236 0
-360 -6231 6234 0
-360 -6230 6233 0
c ((aux1517 + aux1519 - aux1522)<=0)
6227 -6238 0
6228 -6239 0
6221 -6238 0
6221 6227 -6239 0
6221 6228 -6241 0
6222 -6239 0
6222 6227 -6241 0
6222 6228 -6243 0
c (0<=(aux1517 + aux1519 - aux1522))
-6228 6243 0
-6227 6241 0
-6222 6243 0
-6222 -6228 6241 0
-6222 -6227 6239 0
-6221 6241 0
-6221 -6228 6239 0
-6221 -6227 6238 0
c ((SATLiteral(362) - aux1523 + SATLiteral(257))<=0)
-257 -6245 0
-362 -6245 0
-362 -257 -6246 0
c (0<=(SATLiteral(362) - aux1523 + SATLiteral(257)))
257 6246 0
362 6246 0
362 257 6245 0
c ((SATLiteral(377) - aux1524 + SATLiteral(242))<=0)
-242 -6248 0
-377 -6248 0
-377 -242 -6249 0
c (0<=(SATLiteral(377) - aux1524 + SATLiteral(242)))
242 6249 0
377 6249 0
377 242 6248 0
c ((SATLiteral(92) - aux1525 + SATLiteral(227))<=0)
-227 -6251 0
-92 -6251 0
-92 -227 -6252 0
c (0<=(SATLiteral(92) - aux1525 + SATLiteral(227)))
227 6252 0
92 6252 0
92 227 6251 0
c ((SATLiteral(107) + SATLiteral(122) - aux1526)<=0)
-122 -6254 0
-107 -6254 0
-107 -122 -6255 0
c (0<=(SATLiteral(107) + SATLiteral(122) - aux1526))
122 6255 0
107 6255 0
107 122 6254 0
c ((SATLiteral(392) + aux1526 - aux1527)<=0)
6254 -6257 0
6255 -6258 0
-392 -6257 0
-392 6254 -6258 0
-392 6255 -6260 0
c (0<=(SATLiteral(392) + aux1526 - aux1527))
-6255 6260 0
-6254 6258 0
392 6260 0
392 -6255 6258 0
392 -6254 6257 0
c ((aux1523 + aux1525 - aux1528)<=0)
6251 -6262 0
6252 -6263 0
6245 -6262 0
6245 6251 -6263 0
6245 6252 -6265 0
6246 -6263 0
6246 6251 -6265 0
6246 6252 -6267 0
c (0<=(aux1523 + aux1525 - aux1528))
-6252 6267 0
-6251 6265 0
-6246 6267 0
-6246 -6252 6265 0
-6246 -6251 6263 0
-6245 6265 0
-6245 -6252 6263 0
-6245 -6251 6262 0
c ((SATLiteral(364) - aux1529 + SATLiteral(259))<=0)
-259 -6269 0
-364 -6269 0
-364 -259 -6270 0
c (0<=(SATLiteral(364) - aux1529 + SATLiteral(259)))
259 6270 0
364 6270 0
364 259 6269 0
c ((SATLiteral(379) - aux1530 + SATLiteral(244))<=0)
-244 -6272 0
-379 -6272 0
-379 -244 -6273 0
c (0<=(SATLiteral(379) - aux1530 + SATLiteral(244)))
244 6273 0
379 6273 0
379 244 6272 0
c ((SATLiteral(94) - aux1531 + SATLiteral(229))<=0)
-229 -6275 0
-94 -6275 0
-94 -229 -6276 0
c (0<=(SATLiteral(94) - aux1531 + SATLiteral(229)))
229 6276 0
94 6276 0
94 229 6275 0
c ((SATLiteral(109) + SATLiteral(124) - aux1532)<=0)
-124 -6278 0
-109 -6278 0
-109 -124 -6279 0
c (0<=(SATLiteral(109) + SATLiteral(124) - aux1532))
124 6279 0
109 6279 0
109 124 6278 0
c ((SATLiteral(394) + aux1532 - aux1533)<=0)
6278 -6281 0
6279 -6282 0
-394 -6281 0
-394 6278 -6282 0
-394 6279 -6284 0
c (0<=(SATLiteral(394) + aux1532 - aux1533))
-6279 6284 0
-6278 6282 0
394 6284 0
394 -6279 6282 0
394 -6278 6281 0
c ((aux1529 + aux1531 - aux1534)<=0)
6275 -6286 0
6276 -6287 0
6269 -6286 0
6269 6275 -6287 0
6269 6276 -6289 0
6270 -6287 0
6270 6275 -6289 0
6270 6276 -6291 0
c (0<=(aux1529 + aux1531 - aux1534))
-6276 6291 0
-6275 6289 0
-6270 6291 0
-6270 -6276 6289 0
-6270 -6275 6287 0
-6269 6289 0
-6269 -6276 6287 0
-6269 -6275 6286 0
c ((SATLiteral(366) - aux1535 + SATLiteral(261))<=0)
-261 -6293 0
-366 -6293 0
-366 -261 -6294 0
c (0<=(SATLiteral(366) - aux1535 + SATLiteral(261)))
261 6294 0
366 6294 0
366 261 6293 0
c ((SATLiteral(381) - aux1536 + SATLiteral(246))<=0)
-246 -6296 0
-381 -6296 0
-381 -246 -6297 0
c (0<=(SATLiteral(381) - aux1536 + SATLiteral(246)))
246 6297 0
381 6297 0
381 246 6296 0
c ((SATLiteral(96) - aux1537 + SATLiteral(231))<=0)
-231 -6299 0
-96 -6299 0
-96 -231 -6300 0
c (0<=(SATLiteral(96) - aux1537 + SATLiteral(231)))
231 6300 0
96 6300 0
96 231 6299 0
c ((SATLiteral(111) + SATLiteral(126) - aux1538)<=0)
-126 -6302 0
-111 -6302 0
-111 -126 -6303 0
c (0<=(SATLiteral(111) + SATLiteral(126) - aux1538))
126 6303 0
111 6303 0
111 126 6302 0
c ((SATLiteral(396) + aux1538 - aux1539)<=0)
6302 -6305 0
6303 -6306 0
-396 -6305 0
-396 6302 -6306 0
-396 6303 -6308 0
c (0<=(SATLiteral(396) + aux1538 - aux1539))
-6303 6308 0
-6302 6306 0
396 6308 0
396 -6303 6306 0
396 -6302 6305 0
c ((aux1535 + aux1537 - aux1540)<=0)
6299 -6310 0
6300 -6311 0
6293 -6310 0
6293 6299 -6311 0
6293 6300 -6313 0
6294 -6311 0
6294 6299 -6313 0
6294 6300 -6315 0
c (0<=(aux1535 + aux1537 - aux1540))
-6300 6315 0
-6299 6313 0
-6294 6315 0
-6294 -6300 6313 0
-6294 -6299 6311 0
-6293 6313 0
-6293 -6300 6311 0
-6293 -6299 6310 0
c ((SATLiteral(368) - aux1541 + SATLiteral(263))<=0)
-263 -6317 0
-368 -6317 0
-368 -263 -6318 0
c (0<=(SATLiteral(368) - aux1541 + SATLiteral(263)))
263 6318 0
368 6318 0
368 263 6317 0
c ((SATLiteral(383) - aux1542 + SATLiteral(248))<=0)
-248 -6320 0
-383 -6320 0
-383 -248 -6321 0
c (0<=(SATLiteral(383) - aux1542 + SATLiteral(248)))
248 6321 0
383 6321 0
383 248 6320 0
c ((SATLiteral(98) - aux1543 + SATLiteral(233))<=0)
-233 -6323 0
-98 -6323 0
-98 -233 -6324 0
c (0<=(SATLiteral(98) - aux1543 + SATLiteral(233)))
233 6324 0
98 6324 0
98 233 6323 0
c ((SATLiteral(113) + SATLiteral(128) - aux1544)<=0)
-128 -6326 0
-113 -6326 0
-113 -128 -6327 0
c (0<=(SATLiteral(113) + SATLiteral(128) - aux1544))
128 6327 0
113 6327 0
113 128 6326 0
c ((SATLiteral(398) + aux1544 - aux1545)<=0)
6326 -6329 0
6327 -6330 0
-398 -6329 0
-398 6326 -6330 0
-398 6327 -6332 0
c (0<=(SATLiteral(398) + aux1544 - aux1545))
-6327 6332 0
-6326 6330 0
398 6332 0
398 -6327 6330 0
398 -6326 6329 0
c ((aux1541 + aux1543 - aux1546)<=0)
6323 -6334 0
6324 -6335 0
6317 -6334 0
6317 6323 -6335 0
6317 6324 -6337 0
6318 -6335 0
6318 6323 -6337 0
6318 6324 -6339 0
c (0<=(aux1541 + aux1543 - aux1546))
-6324 6339 0
-6323 6337 0
-6318 6339 0
-6318 -6324 6337 0
-6318 -6323 6335 0
-6317 6337 0
-6317 -6324 6335 0
-6317 -6323 6334 0
c ((SATLiteral(370) - aux1547 + SATLiteral(265))<=0)
-265 -6341 0
-370 -6341 0
-370 -265 -6342 0
c (0<=(SATLiteral(370) - aux1547 + SATLiteral(265)))
265 6342 0
370 6342 0
370 265 6341 0
c ((SATLiteral(385) - aux1548 + SATLiteral(250))<=0)
-250 -6344 0
-385 -6344 0
-385 -250 -6345 0
c (0<=(SATLiteral(385) - aux1548 + SATLiteral(250)))
250 6345 0
385 6345 0
385 250 6344 0
c ((SATLiteral(100) - aux1549 + SATLiteral(235))<=0)
-235 -6347 0
-100 -6347 0
-100 -235 -6348 0
c (0<=(SATLiteral(100) - aux1549 + SATLiteral(235)))
235 6348 0
100 6348 0
100 235 6347 0
c ((SATLiteral(115) + SATLiteral(130) - aux1550)<=0)
-130 -6350 0
-115 -6350 0
-115 -130 -6351 0
c (0<=(SATLiteral(115) + SATLiteral(130) - aux1550))
130 6351 0
115 6351 0
115 130 6350 0
c ((SATLiteral(400) + aux1550 - aux1551)<=0)
6350 -6353 0
6351 -6354 0
-400 -6353 0
-400 6350 -6354 0
-400 6351 -6356 0
c (0<=(SATLiteral(400) + aux1550 - aux1551))
-6351 6356 0
-6350 6354 0
400 6356 0
400 -6351 6354 0
400 -6350 6353 0
c ((aux1547 + aux1549 - aux1552)<=0)
6347 -6358 0
6348 -6359 0
6341 -6358 0
6341 6347 -6359 0
6341 6348 -6361 0
6342 -6359 0
6342 6347 -6361 0
6342 6348 -6363 0
c (0<=(aux1547 + aux1549 - aux1552))
-6348 6363 0
-6347 6361 0
-6342 6363 0
-6342 -6348 6361 0
-6342 -6347 6359 0
-6341 6361 0
-6341 -6348 6359 0
-6341 -6347 6358 0
c ((SATLiteral(372) - aux1553 + SATLiteral(267))<=0)
-267 -6365 0
-372 -6365 0
-372 -267 -6366 0
c (0<=(SATLiteral(372) - aux1553 + SATLiteral(267)))
267 6366 0
372 6366 0
372 267 6365 0
c ((SATLiteral(387) - aux1554 + SATLiteral(252))<=0)
-252 -6368 0
-387 -6368 0
-387 -252 -6369 0
c (0<=(SATLiteral(387) - aux1554 + SATLiteral(252)))
252 6369 0
387 6369 0
387 252 6368 0
c ((SATLiteral(102) - aux1555 + SATLiteral(237))<=0)
-237 -6371 0
-102 -6371 0
-102 -237 -6372 0
c (0<=(SATLiteral(102) - aux1555 + SATLiteral(237)))
237 6372 0
102 6372 0
102 237 6371 0
c ((SATLiteral(117) + SATLiteral(132) - aux1556)<=0)
-132 -6374 0
-117 -6374 0
-117 -132 -6375 0
c (0<=(SATLiteral(117) + SATLiteral(132) - aux1556))
132 6375 0
117 6375 0
117 132 6374 0
c ((SATLiteral(402) + aux1556 - aux1557)<=0)
6374 -6377 0
6375 -6378 0
-402 -6377 0
-402 6374 -6378 0
-402 6375 -6380 0
c (0<=(SATLiteral(402) + aux1556 - aux1557))
-6375 6380 0
-6374 6378 0
402 6380 0
402 -6375 6378 0
402 -6374 6377 0
c ((aux1553 + aux1555 - aux1558)<=0)
6371 -6382 0
6372 -6383 0
6365 -6382 0
6365 6371 -6383 0
6365 6372 -6385 0
6366 -6383 0
6366 6371 -6385 0
6366 6372 -6387 0
c (0<=(aux1553 + aux1555 - aux1558))
-6372 6387 0
-6371 6385 0
-6366 6387 0
-6366 -6372 6385 0
-6366 -6371 6383 0
-6365 6385 0
-6365 -6372 6383 0
-6365 -6371 6382 0
c ((SATLiteral(374) - aux1559 + SATLiteral(269))<=0)
-269 -6389 0
-374 -6389 0
-374 -269 -6390 0
c (0<=(SATLiteral(374) - aux1559 + SATLiteral(269)))
269 6390 0
374 6390 0
374 269 6389 0
c ((SATLiteral(389) - aux1560 + SATLiteral(254))<=0)
-254 -6392 0
-389 -6392 0
-389 -254 -6393 0
c (0<=(SATLiteral(389) - aux1560 + SATLiteral(254)))
254 6393 0
389 6393 0
389 254 6392 0
c ((SATLiteral(104) - aux1561 + SATLiteral(239))<=0)
-239 -6395 0
-104 -6395 0
-104 -239 -6396 0
c (0<=(SATLiteral(104) - aux1561 + SATLiteral(239)))
239 6396 0
104 6396 0
104 239 6395 0
c ((SATLiteral(119) + SATLiteral(134) - aux1562)<=0)
-134 -6398 0
-119 -6398 0
-119 -134 -6399 0
c (0<=(SATLiteral(119) + SATLiteral(134) - aux1562))
134 6399 0
119 6399 0
119 134 6398 0
c ((SATLiteral(404) + aux1562 - aux1563)<=0)
6398 -6401 0
6399 -6402 0
-404 -6401 0
-404 6398 -6402 0
-404 6399 -6404 0
c (0<=(SATLiteral(404) + aux1562 - aux1563))
-6399 6404 0
-6398 6402 0
404 6404 0
404 -6399 6402 0
404 -6398 6401 0
c ((aux1559 + aux1561 - aux1564)<=0)
6395 -6406 0
6396 -6407 0
6389 -6406 0
6389 6395 -6407 0
6389 6396 -6409 0
6390 -6407 0
6390 6395 -6409 0
6390 6396 -6411 0
c (0<=(aux1559 + aux1561 - aux1564))
-6396 6411 0
-6395 6409 0
-6390 6411 0
-6390 -6396 6409 0
-6390 -6395 6407 0
-6389 6409 0
-6389 -6396 6407 0
-6389 -6395 6406 0
c ((SATLiteral(376) - aux1565 + SATLiteral(271))<=0)
-271 -6413 0
-376 -6413 0
-376 -271 -6414 0
c (0<=(SATLiteral(376) - aux1565 + SATLiteral(271)))
271 6414 0
376 6414 0
376 271 6413 0
c ((SATLiteral(391) - aux1566 + SATLiteral(256))<=0)
-256 -6416 0
-391 -6416 0
-391 -256 -6417 0
c (0<=(SATLiteral(391) - aux1566 + SATLiteral(256)))
256 6417 0
391 6417 0
391 256 6416 0
c ((SATLiteral(106) - aux1567 + SATLiteral(241))<=0)
-241 -6419 0
-106 -6419 0
-106 -241 -6420 0
c (0<=(SATLiteral(106) - aux1567 + SATLiteral(241)))
241 6420 0
106 6420 0
106 241 6419 0
c ((SATLiteral(121) + SATLiteral(136) - aux1568)<=0)
-136 -6422 0
-121 -6422 0
-121 -136 -6423 0
c (0<=(SATLiteral(121) + SATLiteral(136) - aux1568))
136 6423 0
121 6423 0
121 136 6422 0
c ((SATLiteral(406) + aux1568 - aux1569)<=0)
6422 -6425 0
6423 -6426 0
-406 -6425 0
-406 6422 -6426 0
-406 6423 -6428 0
c (0<=(SATLiteral(406) + aux1568 - aux1569))
-6423 6428 0
-6422 6426 0
406 6428 0
406 -6423 6426 0
406 -6422 6425 0
c ((aux1565 + aux1567 - aux1570)<=0)
6419 -6430 0
6420 -6431 0
6413 -6430 0
6413 6419 -6431 0
6413 6420 -6433 0
6414 -6431 0
6414 6419 -6433 0
6414 6420 -6435 0
c (0<=(aux1565 + aux1567 - aux1570))
-6420 6435 0
-6419 6433 0
-6414 6435 0
-6414 -6420 6433 0
-6414 -6419 6431 0
-6413 6433 0
-6413 -6420 6431 0
-6413 -6419 6430 0
c ((SATLiteral(-375) - aux1571 + SATLiteral(-270))<=0)
270 -6437 0
375 -6437 0
375 270 -6438 0
c (0<=(SATLiteral(-375) - aux1571 + SATLiteral(-270)))
-270 6438 0
-375 6438 0
-375 -270 6437 0
c ((SATLiteral(-390) - aux1572 + SATLiteral(-255))<=0)
255 -6440 0
390 -6440 0
390 255 -6441 0
c (0<=(SATLiteral(-390) - aux1572 + SATLiteral(-255)))
-255 6441 0
-390 6441 0
-390 -255 6440 0
c ((SATLiteral(-105) - aux1573 + SATLiteral(-240))<=0)
240 -6443 0
105 -6443 0
105 240 -6444 0
c (0<=(SATLiteral(-105) - aux1573 + SATLiteral(-240)))
-240 6444 0
-105 6444 0
-105 -240 6443 0
c ((SATLiteral(-120) + SATLiteral(-135) - aux1574)<=0)
135 -6446 0
120 -6446 0
120 135 -6447 0
c (0<=(SATLiteral(-120) + SATLiteral(-135) - aux1574))
-135 6447 0
-120 6447 0
-120 -135 6446 0
c ((SATLiteral(-405) + aux1574 - aux1575)<=0)
6446 -6449 0
6447 -6450 0
405 -6449 0
405 6446 -6450 0
405 6447 -6452 0
c (0<=(SATLiteral(-405) + aux1574 - aux1575))
-6447 6452 0
-6446 6450 0
-405 6452 0
-405 -6447 6450 0
-405 -6446 6449 0
c ((aux1571 + aux1573 - aux1576)<=0)
6443 -6454 0
6444 -6455 0
6437 -6454 0
6437 6443 -6455 0
6437 6444 -6457 0
6438 -6455 0
6438 6443 -6457 0
6438 6444 -6459 0
c (0<=(aux1571 + aux1573 - aux1576))
-6444 6459 0
-6443 6457 0
-6438 6459 0
-6438 -6444 6457 0
-6438 -6443 6455 0
-6437 6457 0
-6437 -6444 6455 0
-6437 -6443 6454 0
c ((SATLiteral(677) - aux1577 + SATLiteral(572))<=0)
-572 -6461 0
-677 -6461 0
-677 -572 -6462 0
c (0<=(SATLiteral(677) - aux1577 + SATLiteral(572)))
572 6462 0
677 6462 0
677 572 6461 0
c ((SATLiteral(692) - aux1578 + SATLiteral(557))<=0)
-557 -6464 0
-692 -6464 0
-692 -557 -6465 0
c (0<=(SATLiteral(692) - aux1578 + SATLiteral(557)))
557 6465 0
692 6465 0
692 557 6464 0
c (( - aux1579 + SATLiteral(407) + SATLiteral(542))<=0)
-542 -6467 0
-407 -6467 0
-407 -542 -6468 0
c (0<=( - aux1579 + SATLiteral(407) + SATLiteral(542)))
542 6468 0
407 6468 0
407 542 6467 0
c (( - aux1580 + SATLiteral(422) + SATLiteral(437))<=0)
-437 -6470 0
-422 -6470 0
-422 -437 -6471 0
c (0<=( - aux1580 + SATLiteral(422) + SATLiteral(437)))
437 6471 0
422 6471 0
422 437 6470 0
c ((SATLiteral(707) + aux1580 - aux1581)<=0)
6470 -6473 0
6471 -6474 0
-707 -6473 0
-707 6470 -6474 0
-707 6471 -6476 0
c (0<=(SATLiteral(707) + aux1580 - aux1581))
-6471 6476 0
-6470 6474 0
707 6476 0
707 -6471 6474 0
707 -6470 6473 0
c ((aux1577 + aux1579 - aux1582)<=0)
6467 -6478 0
6468 -6479 0
6461 -6478 0
6461 6467 -6479 0
6461 6468 -6481 0
6462 -6479 0
6462 6467 -6481 0
6462 6468 -6483 0
c (0<=(aux1577 + aux1579 - aux1582))
-6468 6483 0
-6467 6481 0
-6462 6483 0
-6462 -6468 6481 0
-6462 -6467 6479 0
-6461 6481 0
-6461 -6468 6479 0
-6461 -6467 6478 0
c ((SATLiteral(679) - aux1583 + SATLiteral(574))<=0)
-574 -6485 0
-679 -6485 0
-679 -574 -6486 0
c (0<=(SATLiteral(679) - aux1583 + SATLiteral(574)))
574 6486 0
679 6486 0
679 574 6485 0
c ((SATLiteral(694) - aux1584 + SATLiteral(559))<=0)
-559 -6488 0
-694 -6488 0
-694 -559 -6489 0
c (0<=(SATLiteral(694) - aux1584 + SATLiteral(559)))
559 6489 0
694 6489 0
694 559 6488 0
c (( - aux1585 + SATLiteral(409) + SATLiteral(544))<=0)
-544 -6491 0
-409 -6491 0
-409 -544 -6492 0
c (0<=( - aux1585 + SATLiteral(409) + SATLiteral(544)))
544 6492 0
409 6492 0
409 544 6491 0
c (( - aux1586 + SATLiteral(424) + SATLiteral(439))<=0)
-439 -6494 0
-424 -6494 0
-424 -439 -6495 0
c (0<=( - aux1586 + SATLiteral(424) + SATLiteral(439)))
439 6495 0
424 6495 0
424 439 6494 0
c ((SATLiteral(709) + aux1586 - aux1587)<=0)
6494 -6497 0
6495 -6498 0
-709 -6497 0
-709 6494 -6498 0
-709 6495 -6500 0
c (0<=(SATLiteral(709) + aux1586 - aux1587))
-6495 6500 0
-6494 6498 0
709 6500 0
709 -6495 6498 0
709 -6494 6497 0
c ((aux1583 + aux1585 - aux1588)<=0)
6491 -6502 0
6492 -6503 0
6485 -6502 0
6485 6491 -6503 0
6485 6492 -6505 0
6486 -6503 0
6486 6491 -6505 0
6486 6492 -6507 0
c (0<=(aux1583 + aux1585 - aux1588))
-6492 6507 0
-6491 6505 0
-6486 6507 0
-6486 -6492 6505 0
-6486 -6491 6503 0
-6485 6505 0
-6485 -6492 6503 0
-6485 -6491 6502 0
c ((SATLiteral(681) - aux1589 + SATLiteral(576))<=0)
-576 -6509 0
-681 -6509 0
-681 -576 -6510 0
c (0<=(SATLiteral(681) - aux1589 + SATLiteral(576)))
576 6510 0
681 6510 0
681 576 6509 0
c ((SATLiteral(696) - aux1590 + SATLiteral(561))<=0)
-561 -6512 0
-696 -6512 0
-696 -561 -6513 0
c (0<=(SATLiteral(696) - aux1590 + SATLiteral(561)))
561 6513 0
696 6513 0
696 561 6512 0
c (( - aux1591 + SATLiteral(411) + SATLiteral(546))<=0)
-546 -6515 0
-411 -6515 0
-411 -546 -6516 0
c (0<=( - aux1591 + SATLiteral(411) + SATLiteral(546)))
546 6516 0
411 6516 0
411 546 6515 0
c (( - aux1592 + SATLiteral(426) + SATLiteral(441))<=0)
-441 -6518 0
-426 -6518 0
-426 -441 -6519 0
c (0<=( - aux1592 + SATLiteral(426) + SATLiteral(441)))
441 6519 0
426 6519 0
426 441 6518 0
c ((SATLiteral(711) + aux1592 - aux1593)<=0)
6518 -6521 0
6519 -6522 0
-711 -6521 0
-711 6518 -6522 0
-711 6519 -6524 0
c (0<=(SATLiteral(711) + aux1592 - aux1593))
-6519 6524 0
-6518 6522 0
711 6524 0
711 -6519 6522 0
711 -6518 6521 0
c ((aux1589 + aux1591 - aux1594)<=0)
6515 -6526 0
6516 -6527 0
6509 -6526 0
6509 6515 -6527 0
6509 6516 -6529 0
6510 -6527 0
6510 6515 -6529 0
6510 6516 -6531 0
c (0<=(aux1589 + aux1591 - aux1594))
-6516 6531 0
-6515 6529 0
-6510 6531 0
-6510 -6516 6529 0
-6510 -6515 6527 0
-6509 6529 0
-6509 -6516 6527 0
-6509 -6515 6526 0
c ((SATLiteral(683) - aux1595 + SATLiteral(578))<=0)
-578 -6533 0
-683 -6533 0
-683 -578 -6534 0
c (0<=(SATLiteral(683) - aux1595 + SATLiteral(578)))
578 6534 0
683 6534 0
683 578 6533 0
c ((SATLiteral(698) - aux1596 + SATLiteral(563))<=0)
-563 -6536 0
-698 -6536 0
-698 -563 -6537 0
c (0<=(SATLiteral(698) - aux1596 + SATLiteral(563)))
563 6537 0
698 6537 0
698 563 6536 0
c (( - aux1597 + SATLiteral(413) + SATLiteral(548))<=0)
-548 -6539 0
-413 -6539 0
-413 -548 -6540 0
c (0<=( - aux1597 + SATLiteral(413) + SATLiteral(548)))
548 6540 0
413 6540 0
413 548 6539 0
c (( - aux1598 + SATLiteral(428) + SATLiteral(443))<=0)
-443 -6542 0
-428 -6542 0
-428 -443 -6543 0
c (0<=( - aux1598 + SATLiteral(428) + SATLiteral(443)))
443 6543 0
428 6543 0
428 443 6542 0
c ((SATLiteral(713) + aux1598 - aux1599)<=0)
6542 -6545 0
6543 -6546 0
-713 -6545 0
-713 6542 -6546 0
-713 6543 -6548 0
c (0<=(SATLiteral(713) + aux1598 - aux1599))
-6543 6548 0
-6542 6546 0
713 6548 0
713 -6543 6546 0
713 -6542 6545 0
c ((aux1595 + aux1597 - aux1600)<=0)
6539 -6550 0
6540 -6551 0
6533 -6550 0
6533 6539 -6551 0
6533 6540 -6553 0
6534 -6551 0
6534 6539 -6553 0
6534 6540 -6555 0
c (0<=(aux1595 + aux1597 - aux1600))
-6540 6555 0
-6539 6553 0
-6534 6555 0
-6534 -6540 6553 0
-6534 -6539 6551 0
-6533 6553 0
-6533 -6540 6551 0
-6533 -6539 6550 0
c ((SATLiteral(685) - aux1601 + SATLiteral(580))<=0)
-580 -6557 0
-685 -6557 0
-685 -580 -6558 0
c (0<=(SATLiteral(685) - aux1601 + SATLiteral(580)))
580 6558 0
685 6558 0
685 580 6557 0
c ((SATLiteral(700) - aux1602 + SATLiteral(565))<=0)
-565 -6560 0
-700 -6560 0
-700 -565 -6561 0
c (0<=(SATLiteral(700) - aux1602 + SATLiteral(565)))
565 6561 0
700 6561 0
700 565 6560 0
c (( - aux1603 + SATLiteral(415) + SATLiteral(550))<=0)
-550 -6563 0
-415 -6563 0
-415 -550 -6564 0
c (0<=( - aux1603 + SATLiteral(415) + SATLiteral(550)))
550 6564 0
415 6564 0
415 550 6563 0
c (( - aux1604 + SATLiteral(430) + SATLiteral(445))<=0)
-445 -6566 0
-430 -6566 0
-430 -445 -6567 0
c (0<=( - aux1604 + SATLiteral(430) + SATLiteral(445)))
445 6567 0
430 6567 0
430 445 6566 0
c ((SATLiteral(715) + aux1604 - aux1605)<=0)
6566 -6569 0
6567 -6570 0
-715 -6569 0
-715 6566 -6570 0
-715 6567 -6572 0
c (0<=(SATLiteral(715) + aux1604 - aux1605))
-6567 6572 0
-6566 6570 0
715 6572 0
715 -6567 6570 0
715 -6566 6569 0
c ((aux1601 + aux1603 - aux1606)<=0)
6563 -6574 0
6564 -6575 0
6557 -6574 0
6557 6563 -6575 0
6557 6564 -6577 0
6558 -6575 0
6558 6563 -6577 0
6558 6564 -6579 0
c (0<=(aux1601 + aux1603 - aux1606))
-6564 6579 0
-6563 6577 0
-6558 6579 0
-6558 -6564 6577 0
-6558 -6563 6575 0
-6557 6577 0
-6557 -6564 6575 0
-6557 -6563 6574 0
c ((SATLiteral(687) - aux1607 + SATLiteral(582))<=0)
-582 -6581 0
-687 -6581 0
-687 -582 -6582 0
c (0<=(SATLiteral(687) - aux1607 + SATLiteral(582)))
582 6582 0
687 6582 0
687 582 6581 0
c ((SATLiteral(702) - aux1608 + SATLiteral(567))<=0)
-567 -6584 0
-702 -6584 0
-702 -567 -6585 0
c (0<=(SATLiteral(702) - aux1608 + SATLiteral(567)))
567 6585 0
702 6585 0
702 567 6584 0
c (( - aux1609 + SATLiteral(417) + SATLiteral(552))<=0)
-552 -6587 0
-417 -6587 0
-417 -552 -6588 0
c (0<=( - aux1609 + SATLiteral(417) + SATLiteral(552)))
552 6588 0
417 6588 0
417 552 6587 0
c (( - aux1610 + SATLiteral(432) + SATLiteral(447))<=0)
-447 -6590 0
-432 -6590 0
-432 -447 -6591 0
c (0<=( - aux1610 + SATLiteral(432) + SATLiteral(447)))
447 6591 0
432 6591 0
432 447 6590 0
c ((SATLiteral(717) + aux1610 - aux1611)<=0)
6590 -6593 0
6591 -6594 0
-717 -6593 0
-717 6590 -6594 0
-717 6591 -6596 0
c (0<=(SATLiteral(717) + aux1610 - aux1611))
-6591 6596 0
-6590 6594 0
717 6596 0
717 -6591 6594 0
717 -6590 6593 0
c ((aux1607 + aux1609 - aux1612)<=0)
6587 -6598 0
6588 -6599 0
6581 -6598 0
6581 6587 -6599 0
6581 6588 -6601 0
6582 -6599 0
6582 6587 -6601 0
6582 6588 -6603 0
c (0<=(aux1607 + aux1609 - aux1612))
-6588 6603 0
-6587 6601 0
-6582 6603 0
-6582 -6588 6601 0
-6582 -6587 6599 0
-6581 6601 0
-6581 -6588 6599 0
-6581 -6587 6598 0
c ((SATLiteral(689) - aux1613 + SATLiteral(584))<=0)
-584 -6605 0
-689 -6605 0
-689 -584 -6606 0
c (0<=(SATLiteral(689) - aux1613 + SATLiteral(584)))
584 6606 0
689 6606 0
689 584 6605 0
c ((SATLiteral(704) - aux1614 + SATLiteral(569))<=0)
-569 -6608 0
-704 -6608 0
-704 -569 -6609 0
c (0<=(SATLiteral(704) - aux1614 + SATLiteral(569)))
569 6609 0
704 6609 0
704 569 6608 0
c (( - aux1615 + SATLiteral(419) + SATLiteral(554))<=0)
-554 -6611 0
-419 -6611 0
-419 -554 -6612 0
c (0<=( - aux1615 + SATLiteral(419) + SATLiteral(554)))
554 6612 0
419 6612 0
419 554 6611 0
c (( - aux1616 + SATLiteral(434) + SATLiteral(449))<=0)
-449 -6614 0
-434 -6614 0
-434 -449 -6615 0
c (0<=( - aux1616 + SATLiteral(434) + SATLiteral(449)))
449 6615 0
434 6615 0
434 449 6614 0
c ((SATLiteral(719) + aux1616 - aux1617)<=0)
6614 -6617 0
6615 -6618 0
-719 -6617 0
-719 6614 -6618 0
-719 6615 -6620 0
c (0<=(SATLiteral(719) + aux1616 - aux1617))
-6615 6620 0
-6614 6618 0
719 6620 0
719 -6615 6618 0
719 -6614 6617 0
c ((aux1613 + aux1615 - aux1618)<=0)
6611 -6622 0
6612 -6623 0
6605 -6622 0
6605 6611 -6623 0
6605 6612 -6625 0
6606 -6623 0
6606 6611 -6625 0
6606 6612 -6627 0
c (0<=(aux1613 + aux1615 - aux1618))
-6612 6627 0
-6611 6625 0
-6606 6627 0
-6606 -6612 6625 0
-6606 -6611 6623 0
-6605 6625 0
-6605 -6612 6623 0
-6605 -6611 6622 0
c ((SATLiteral(691) - aux1619 + SATLiteral(586))<=0)
-586 -6629 0
-691 -6629 0
-691 -586 -6630 0
c (0<=(SATLiteral(691) - aux1619 + SATLiteral(586)))
586 6630 0
691 6630 0
691 586 6629 0
c ((SATLiteral(706) - aux1620 + SATLiteral(571))<=0)
-571 -6632 0
-706 -6632 0
-706 -571 -6633 0
c (0<=(SATLiteral(706) - aux1620 + SATLiteral(571)))
571 6633 0
706 6633 0
706 571 6632 0
c (( - aux1621 + SATLiteral(421) + SATLiteral(556))<=0)
-556 -6635 0
-421 -6635 0
-421 -556 -6636 0
c (0<=( - aux1621 + SATLiteral(421) + SATLiteral(556)))
556 6636 0
421 6636 0
421 556 6635 0
c (( - aux1622 + SATLiteral(436) + SATLiteral(451))<=0)
-451 -6638 0
-436 -6638 0
-436 -451 -6639 0
c (0<=( - aux1622 + SATLiteral(436) + SATLiteral(451)))
451 6639 0
436 6639 0
436 451 6638 0
c ((SATLiteral(721) + aux1622 - aux1623)<=0)
6638 -6641 0
6639 -6642 0
-721 -6641 0
-721 6638 -6642 0
-721 6639 -6644 0
c (0<=(SATLiteral(721) + aux1622 - aux1623))
-6639 6644 0
-6638 6642 0
721 6644 0
721 -6639 6642 0
721 -6638 6641 0
c ((aux1619 + aux1621 - aux1624)<=0)
6635 -6646 0
6636 -6647 0
6629 -6646 0
6629 6635 -6647 0
6629 6636 -6649 0
6630 -6647 0
6630 6635 -6649 0
6630 6636 -6651 0
c (0<=(aux1619 + aux1621 - aux1624))
-6636 6651 0
-6635 6649 0
-6630 6651 0
-6630 -6636 6649 0
-6630 -6635 6647 0
-6629 6649 0
-6629 -6636 6647 0
-6629 -6635 6646 0
c ((SATLiteral(-690) - aux1625 + SATLiteral(-585))<=0)
585 -6653 0
690 -6653 0
690 585 -6654 0
c (0<=(SATLiteral(-690) - aux1625 + SATLiteral(-585)))
-585 6654 0
-690 6654 0
-690 -585 6653 0
c ((SATLiteral(-705) - aux1626 + SATLiteral(-570))<=0)
570 -6656 0
705 -6656 0
705 570 -6657 0
c (0<=(SATLiteral(-705) - aux1626 + SATLiteral(-570)))
-570 6657 0
-705 6657 0
-705 -570 6656 0
c (( - aux1627 + SATLiteral(-420) + SATLiteral(-555))<=0)
555 -6659 0
420 -6659 0
420 555 -6660 0
c (0<=( - aux1627 + SATLiteral(-420) + SATLiteral(-555)))
-555 6660 0
-420 6660 0
-420 -555 6659 0
c (( - aux1628 + SATLiteral(-435) + SATLiteral(-450))<=0)
450 -6662 0
435 -6662 0
435 450 -6663 0
c (0<=( - aux1628 + SATLiteral(-435) + SATLiteral(-450)))
-450 6663 0
-435 6663 0
-435 -450 6662 0
c ((SATLiteral(-720) + aux1628 - aux1629)<=0)
6662 -6665 0
6663 -6666 0
720 -6665 0
720 6662 -6666 0
720 6663 -6668 0
c (0<=(SATLiteral(-720) + aux1628 - aux1629))
-6663 6668 0
-6662 6666 0
-720 6668 0
-720 -6663 6666 0
-720 -6662 6665 0
c ((aux1625 + aux1627 - aux1630)<=0)
6659 -6670 0
6660 -6671 0
6653 -6670 0
6653 6659 -6671 0
6653 6660 -6673 0
6654 -6671 0
6654 6659 -6673 0
6654 6660 -6675 0
c (0<=(aux1625 + aux1627 - aux1630))
-6660 6675 0
-6659 6673 0
-6654 6675 0
-6654 -6660 6673 0
-6654 -6659 6671 0
-6653 6673 0
-6653 -6660 6671 0
-6653 -6659 6670 0
c ((SATLiteral(722) - aux1631 + SATLiteral(617))<=0)
-617 -6677 0
-722 -6677 0
-722 -617 -6678 0
c (0<=(SATLiteral(722) - aux1631 + SATLiteral(617)))
617 6678 0
722 6678 0
722 617 6677 0
c ((SATLiteral(737) - aux1632 + SATLiteral(602))<=0)
-602 -6680 0
-737 -6680 0
-737 -602 -6681 0
c (0<=(SATLiteral(737) - aux1632 + SATLiteral(602)))
602 6681 0
737 6681 0
737 602 6680 0
c (( - aux1633 + SATLiteral(452) + SATLiteral(587))<=0)
-587 -6683 0
-452 -6683 0
-452 -587 -6684 0
c (0<=( - aux1633 + SATLiteral(452) + SATLiteral(587)))
587 6684 0
452 6684 0
452 587 6683 0
c (( - aux1634 + SATLiteral(467) + SATLiteral(482))<=0)
-482 -6686 0
-467 -6686 0
-467 -482 -6687 0
c (0<=( - aux1634 + SATLiteral(467) + SATLiteral(482)))
482 6687 0
467 6687 0
467 482 6686 0
c ((SATLiteral(752) + aux1634 - aux1635)<=0)
6686 -6689 0
6687 -6690 0
-752 -6689 0
-752 6686 -6690 0
-752 6687 -6692 0
c (0<=(SATLiteral(752) + aux1634 - aux1635))
-6687 6692 0
-6686 6690 0
752 6692 0
752 -6687 6690 0
752 -6686 6689 0
c ((aux1631 + aux1633 - aux1636)<=0)
6683 -6694 0
6684 -6695 0
6677 -6694 0
6677 6683 -6695 0
6677 6684 -6697 0
6678 -6695 0
6678 6683 -6697 0
6678 6684 -6699 0
c (0<=(aux1631 + aux1633 - aux1636))
-6684 6699 0
-6683 6697 0
-6678 6699 0
-6678 -6684 6697 0
-6678 -6683 6695 0
-6677 6697 0
-6677 -6684 6695 0
-6677 -6683 6694 0
c ((SATLiteral(724) - aux1637 + SATLiteral(619))<=0)
-619 -6701 0
-724 -6701 0
-724 -619 -6702 0
c (0<=(SATLiteral(724) - aux1637 + SATLiteral(619)))
619 6702 0
724 6702 0
724 619 6701 0
c ((SATLiteral(739) - aux1638 + SATLiteral(604))<=0)
-604 -6704 0
-739 -6704 0
-739 -604 -6705 0
c (0<=(SATLiteral(739) - aux1638 + SATLiteral(604)))
604 6705 0
739 6705 0
739 604 6704 0
c (( - aux1639 + SATLiteral(454) + SATLiteral(589))<=0)
-589 -6707 0
-454 -6707 0
-454 -589 -6708 0
c (0<=( - aux1639 + SATLiteral(454) + SATLiteral(589)))
589 6708 0
454 6708 0
454 589 6707 0
c (( - aux1640 + SATLiteral(469) + SATLiteral(484))<=0)
-484 -6710 0
-469 -6710 0
-469 -484 -6711 0
c (0<=( - aux1640 + SATLiteral(469) + SATLiteral(484)))
484 6711 0
469 6711 0
469 484 6710 0
c ((SATLiteral(754) + aux1640 - aux1641)<=0)
6710 -6713 0
6711 -6714 0
-754 -6713 0
-754 6710 -6714 0
-754 6711 -6716 0
c (0<=(SATLiteral(754) + aux1640 - aux1641))
-6711 6716 0
-6710 6714 0
754 6716 0
754 -6711 6714 0
754 -6710 6713 0
c ((aux1637 + aux1639 - aux1642)<=0)
6707 -6718 0
6708 -6719 0
6701 -6718 0
6701 6707 -6719 0
6701 6708 -6721 0
6702 -6719 0
6702 6707 -6721 0
6702 6708 -6723 0
c (0<=(aux1637 + aux1639 - aux1642))
-6708 6723 0
-6707 6721 0
-6702 6723 0
-6702 -6708 6721 0
-6702 -6707 6719 0
-6701 6721 0
-6701 -6708 6719 0
-6701 -6707 6718 0
c ((SATLiteral(726) - aux1643 + SATLiteral(621))<=0)
-621 -6725 0
-726 -6725 0
-726 -621 -6726 0
c (0<=(SATLiteral(726) - aux1643 + SATLiteral(621)))
621 6726 0
726 6726 0
726 621 6725 0
c ((SATLiteral(741) - aux1644 + SATLiteral(606))<=0)
-606 -6728 0
-741 -6728 0
-741 -606 -6729 0
c (0<=(SATLiteral(741) - aux1644 + SATLiteral(606)))
606 6729 0
741 6729 0
741 606 6728 0
c (( - aux1645 + SATLiteral(456) + SATLiteral(591))<=0)
-591 -6731 0
-456 -6731 0
-456 -591 -6732 0
c (0<=( - aux1645 + SATLiteral(456) + SATLiteral(591)))
591 6732 0
456 6732 0
456 591 6731 0
c (( - aux1646 + SATLiteral(471) + SATLiteral(486))<=0)
-486 -6734 0
-471 -6734 0
-471 -486 -6735 0
c (0<=( - aux1646 + SATLiteral(471) + SATLiteral(486)))
486 6735 0
471 6735 0
471 486 6734 0
c ((SATLiteral(756) + aux1646 - aux1647)<=0)
6734 -6737 0
6735 -6738 0
-756 -6737 0
-756 6734 -6738 0
-756 6735 -6740 0
c (0<=(SATLiteral(756) + aux1646 - aux1647))
-6735 6740 0
-6734 6738 0
756 6740 0
756 -6735 6738 0
756 -6734 6737 0
c ((aux1643 + aux1645 - aux1648)<=0)
6731 -6742 0
6732 -6743 0
6725 -6742 0
6725 6731 -6743 0
6725 6732 -6745 0
6726 -6743 0
6726 6731 -6745 0
6726 6732 -6747 0
c (0<=(aux1643 + aux1645 - aux1648))
-6732 6747 0
-6731 6745 0
-6726 6747 0
-6726 -6732 6745 0
-6726 -6731 6743 0
-6725 6745 0
-6725 -6732 6743 0
-6725 -6731 6742 0
c ((SATLiteral(728) - aux1649 + SATLiteral(623))<=0)
-623 -6749 0
-728 -6749 0
-728 -623 -6750 0
c (0<=(SATLiteral(728) - aux1649 + SATLiteral(623)))
623 6750 0
728 6750 0
728 623 6749 0
c ((SATLiteral(743) - aux1650 + SATLiteral(608))<=0)
-608 -6752 0
-743 -6752 0
-743 -608 -6753 0
c (0<=(SATLiteral(743) - aux1650 + SATLiteral(608)))
608 6753 0
743 6753 0
743 608 6752 0
c (( - aux1651 + SATLiteral(458) + SATLiteral(593))<=0)
-593 -6755 0
-458 -6755 0
-458 -593 -6756 0
c (0<=( - aux1651 + SATLiteral(458) + SATLiteral(593)))
593 6756 0
458 6756 0
458 593 6755 0
c (( - aux1652 + SATLiteral(473) + SATLiteral(488))<=0)
-488 -6758 0
-473 -6758 0
-473 -488 -6759 0
c (0<=( - aux1652 + SATLiteral(473) + SATLiteral(488)))
488 6759 0
473 6759 0
473 488 6758 0
c ((SATLiteral(758) + aux1652 - aux1653)<=0)
6758 -6761 0
6759 -6762 0
-758 -6761 0
-758 6758 -6762 0
-758 6759 -6764 0
c (0<=(SATLiteral(758) + aux1652 - aux1653))
-6759 6764 0
-6758 6762 0
758 6764 0
758 -6759 6762 0
758 -6758 6761 0
c ((aux1649 + aux1651 - aux1654)<=0)
6755 -6766 0
6756 -6767 0
6749 -6766 0
6749 6755 -6767 0
6749 6756 -6769 0
6750 -6767 0
6750 6755 -6769 0
6750 6756 -6771 0
c (0<=(aux1649 + aux1651 - aux1654))
-6756 6771 0
-6755 6769 0
-6750 6771 0
-6750 -6756 6769 0
-6750 -6755 6767 0
-6749 6769 0
-6749 -6756 6767 0
-6749 -6755 6766 0
c ((SATLiteral(730) - aux1655 + SATLiteral(625))<=0)
-625 -6773 0
-730 -6773 0
-730 -625 -6774 0
c (0<=(SATLiteral(730) - aux1655 + SATLiteral(625)))
625 6774 0
730 6774 0
730 625 6773 0
c ((SATLiteral(745) - aux1656 + SATLiteral(610))<=0)
-610 -6776 0
-745 -6776 0
-745 -610 -6777 0
c (0<=(SATLiteral(745) - aux1656 + SATLiteral(610)))
610 6777 0
745 6777 0
745 610 6776 0
c (( - aux1657 + SATLiteral(460) + SATLiteral(595))<=0)
-595 -6779 0
-460 -6779 0
-460 -595 -6780 0
c (0<=( - aux1657 + SATLiteral(460) + SATLiteral(595)))
595 6780 0
460 6780 0
460 595 6779 0
c (( - aux1658 + SATLiteral(475) + SATLiteral(490))<=0)
-490 -6782 0
-475 -6782 0
-475 -490 -6783 0
c (0<=( - aux1658 + SATLiteral(475) + SATLiteral(490)))
490 6783 0
475 6783 0
475 490 6782 0
c ((SATLiteral(760) + aux1658 - aux1659)<=0)
6782 -6785 0
6783 -6786 0
-760 -6785 0
-760 6782 -6786 0
-760 6783 -6788 0
c (0<=(SATLiteral(760) + aux1658 - aux1659))
-6783 6788 0
-6782 6786 0
760 6788 0
760 -6783 6786 0
760 -6782 6785 0
c ((aux1655 + aux1657 - aux1660)<=0)
6779 -6790 0
6780 -6791 0
6773 -6790 0
6773 6779 -6791 0
6773 6780 -6793 0
6774 -6791 0
6774 6779 -6793 0
6774 6780 -6795 0
c (0<=(aux1655 + aux1657 - aux1660))
-6780 6795 0
-6779 6793 0
-6774 6795 0
-6774 -6780 6793 0
-6774 -6779 6791 0
-6773 6793 0
-6773 -6780 6791 0
-6773 -6779 6790 0
c ((SATLiteral(732) - aux1661 + SATLiteral(627))<=0)
-627 -6797 0
-732 -6797 0
-732 -627 -6798 0
c (0<=(SATLiteral(732) - aux1661 + SATLiteral(627)))
627 6798 0
732 6798 0
732 627 6797 0
c ((SATLiteral(747) - aux1662 + SATLiteral(612))<=0)
-612 -6800 0
-747 -6800 0
-747 -612 -6801 0
c (0<=(SATLiteral(747) - aux1662 + SATLiteral(612)))
612 6801 0
747 6801 0
747 612 6800 0
c (( - aux1663 + SATLiteral(462) + SATLiteral(597))<=0)
-597 -6803 0
-462 -6803 0
-462 -597 -6804 0
c (0<=( - aux1663 + SATLiteral(462) + SATLiteral(597)))
597 6804 0
462 6804 0
462 597 6803 0
c (( - aux1664 + SATLiteral(477) + SATLiteral(492))<=0)
-492 -6806 0
-477 -6806 0
-477 -492 -6807 0
c (0<=( - aux1664 + SATLiteral(477) + SATLiteral(492)))
492 6807 0
477 6807 0
477 492 6806 0
c ((SATLiteral(762) + aux1664 - aux1665)<=0)
6806 -6809 0
6807 -6810 0
-762 -6809 0
-762 6806 -6810 0
-762 6807 -6812 0
c (0<=(SATLiteral(762) + aux1664 - aux1665))
-6807 6812 0
-6806 6810 0
762 6812 0
762 -6807 6810 0
762 -6806 6809 0
c ((aux1661 + aux1663 - aux1666)<=0)
6803 -6814 0
6804 -6815 0
6797 -6814 0
6797 6803 -6815 0
6797 6804 -6817 0
6798 -6815 0
6798 6803 -6817 0
6798 6804 -6819 0
c (0<=(aux1661 + aux1663 - aux1666))
-6804 6819 0
-6803 6817 0
-6798 6819 0
-6798 -6804 6817 0
-6798 -6803 6815 0
-6797 6817 0
-6797 -6804 6815 0
-6797 -6803 6814 0
c ((SATLiteral(734) - aux1667 + SATLiteral(629))<=0)
-629 -6821 0
-734 -6821 0
-734 -629 -6822 0
c (0<=(SATLiteral(734) - aux1667 + SATLiteral(629)))
629 6822 0
734 6822 0
734 629 6821 0
c ((SATLiteral(749) - aux1668 + SATLiteral(614))<=0)
-614 -6824 0
-749 -6824 0
-749 -614 -6825 0
c (0<=(SATLiteral(749) - aux1668 + SATLiteral(614)))
614 6825 0
749 6825 0
749 614 6824 0
c (( - aux1669 + SATLiteral(464) + SATLiteral(599))<=0)
-599 -6827 0
-464 -6827 0
-464 -599 -6828 0
c (0<=( - aux1669 + SATLiteral(464) + SATLiteral(599)))
599 6828 0
464 6828 0
464 599 6827 0
c (( - aux1670 + SATLiteral(479) + SATLiteral(494))<=0)
-494 -6830 0
-479 -6830 0
-479 -494 -6831 0
c (0<=( - aux1670 + SATLiteral(479) + SATLiteral(494)))
494 6831 0
479 6831 0
479 494 6830 0
c ((SATLiteral(764) + aux1670 - aux1671)<=0)
6830 -6833 0
6831 -6834 0
-764 -6833 0
-764 6830 -6834 0
-764 6831 -6836 0
c (0<=(SATLiteral(764) + aux1670 - aux1671))
-6831 6836 0
-6830 6834 0
764 6836 0
764 -6831 6834 0
764 -6830 6833 0
c ((aux1667 + aux1669 - aux1672)<=0)
6827 -6838 0
6828 -6839 0
6821 -6838 0
6821 6827 -6839 0
6821 6828 -6841 0
6822 -6839 0
6822 6827 -6841 0
6822 6828 -6843 0
c (0<=(aux1667 + aux1669 - aux1672))
-6828 6843 0
-6827 6841 0
-6822 6843 0
-6822 -6828 6841 0
-6822 -6827 6839 0
-6821 6841 0
-6821 -6828 6839 0
-6821 -6827 6838 0
c ((SATLiteral(736) - aux1673 + SATLiteral(631))<=0)
-631 -6845 0
-736 -6845 0
-736 -631 -6846 0
c (0<=(SATLiteral(736) - aux1673 + SATLiteral(631)))
631 6846 0
736 6846 0
736 631 6845 0
c ((SATLiteral(751) - aux1674 + SATLiteral(616))<=0)
-616 -6848 0
-751 -6848 0
-751 -616 -6849 0
c (0<=(SATLiteral(751) - aux1674 + SATLiteral(616)))
616 6849 0
751 6849 0
751 616 6848 0
c (( - aux1675 + SATLiteral(466) + SATLiteral(601))<=0)
-601 -6851 0
-466 -6851 0
-466 -601 -6852 0
c (0<=( - aux1675 + SATLiteral(466) + SATLiteral(601)))
601 6852 0
466 6852 0
466 601 6851 0
c (( - aux1676 + SATLiteral(481) + SATLiteral(496))<=0)
-496 -6854 0
-481 -6854 0
-481 -496 -6855 0
c (0<=( - aux1676 + SATLiteral(481) + SATLiteral(496)))
496 6855 0
481 6855 0
481 496 6854 0
c ((SATLiteral(766) + aux1676 - aux1677)<=0)
6854 -6857 0
6855 -6858 0
-766 -6857 0
-766 6854 -6858 0
-766 6855 -6860 0
c (0<=(SATLiteral(766) + aux1676 - aux1677))
-6855 6860 0
-6854 6858 0
766 6860 0
766 -6855 6858 0
766 -6854 6857 0
c ((aux1673 + aux1675 - aux1678)<=0)
6851 -6862 0
6852 -6863 0
6845 -6862 0
6845 6851 -6863 0
6845 6852 -6865 0
6846 -6863 0
6846 6851 -6865 0
6846 6852 -6867 0
c (0<=(aux1673 + aux1675 - aux1678))
-6852 6867 0
-6851 6865 0
-6846 6867 0
-6846 -6852 6865 0
-6846 -6851 6863 0
-6845 6865 0
-6845 -6852 6863 0
-6845 -6851 6862 0
c ((SATLiteral(-735) - aux1679 + SATLiteral(-630))<=0)
630 -6869 0
735 -6869 0
735 630 -6870 0
c (0<=(SATLiteral(-735) - aux1679 + SATLiteral(-630)))
-630 6870 0
-735 6870 0
-735 -630 6869 0
c ((SATLiteral(-750) - aux1680 + SATLiteral(-615))<=0)
615 -6872 0
750 -6872 0
750 615 -6873 0
c (0<=(SATLiteral(-750) - aux1680 + SATLiteral(-615)))
-615 6873 0
-750 6873 0
-750 -615 6872 0
c (( - aux1681 + SATLiteral(-465) + SATLiteral(-600))<=0)
600 -6875 0
465 -6875 0
465 600 -6876 0
c (0<=( - aux1681 + SATLiteral(-465) + SATLiteral(-600)))
-600 6876 0
-465 6876 0
-465 -600 6875 0
c (( - aux1682 + SATLiteral(-480) + SATLiteral(-495))<=0)
495 -6878 0
480 -6878 0
480 495 -6879 0
c (0<=( - aux1682 + SATLiteral(-480) + SATLiteral(-495)))
-495 6879 0
-480 6879 0
-480 -495 6878 0
c ((SATLiteral(-765) + aux1682 - aux1683)<=0)
6878 -6881 0
6879 -6882 0
765 -6881 0
765 6878 -6882 0
765 6879 -6884 0
c (0<=(SATLiteral(-765) + aux1682 - aux1683))
-6879 6884 0
-6878 6882 0
-765 6884 0
-765 -6879 6882 0
-765 -6878 6881 0
c ((aux1679 + aux1681 - aux1684)<=0)
6875 -6886 0
6876 -6887 0
6869 -6886 0
6869 6875 -6887 0
6869 6876 -6889 0
6870 -6887 0
6870 6875 -6889 0
6870 6876 -6891 0
c (0<=(aux1679 + aux1681 - aux1684))
-6876 6891 0
-6875 6889 0
-6870 6891 0
-6870 -6876 6889 0
-6870 -6875 6887 0
-6869 6889 0
-6869 -6876 6887 0
-6869 -6875 6886 0
c ((SATLiteral(767) - aux1685 + SATLiteral(662))<=0)
-662 -6893 0
-767 -6893 0
-767 -662 -6894 0
c (0<=(SATLiteral(767) - aux1685 + SATLiteral(662)))
662 6894 0
767 6894 0
767 662 6893 0
c ((SATLiteral(782) - aux1686 + SATLiteral(647))<=0)
-647 -6896 0
-782 -6896 0
-782 -647 -6897 0
c (0<=(SATLiteral(782) - aux1686 + SATLiteral(647)))
647 6897 0
782 6897 0
782 647 6896 0
c (( - aux1687 + SATLiteral(497) + SATLiteral(632))<=0)
-632 -6899 0
-497 -6899 0
-497 -632 -6900 0
c (0<=( - aux1687 + SATLiteral(497) + SATLiteral(632)))
632 6900 0
497 6900 0
497 632 6899 0
c (( - aux1688 + SATLiteral(512) + SATLiteral(527))<=0)
-527 -6902 0
-512 -6902 0
-512 -527 -6903 0
c (0<=( - aux1688 + SATLiteral(512) + SATLiteral(527)))
527 6903 0
512 6903 0
512 527 6902 0
c ((SATLiteral(797) + aux1688 - aux1689)<=0)
6902 -6905 0
6903 -6906 0
-797 -6905 0
-797 6902 -6906 0
-797 6903 -6908 0
c (0<=(SATLiteral(797) + aux1688 - aux1689))
-6903 6908 0
-6902 6906 0
797 6908 0
797 -6903 6906 0
797 -6902 6905 0
c ((aux1685 + aux1687 - aux1690)<=0)
6899 -6910 0
6900 -6911 0
6893 -6910 0
6893 6899 -6911 0
6893 6900 -6913 0
6894 -6911 0
6894 6899 -6913 0
6894 6900 -6915 0
c (0<=(aux1685 + aux1687 - aux1690))
-6900 6915 0
-6899 6913 0
-6894 6915 0
-6894 -6900 6913 0
-6894 -6899 6911 0
-6893 6913 0
-6893 -6900 6911 0
-6893 -6899 6910 0
c ((SATLiteral(769) - aux1691 + SATLiteral(664))<=0)
-664 -6917 0
-769 -6917 0
-769 -664 -6918 0
c (0<=(SATLiteral(769) - aux1691 + SATLiteral(664)))
664 6918 0
769 6918 0
769 664 6917 0
c ((SATLiteral(784) - aux1692 + SATLiteral(649))<=0)
-649 -6920 0
-784 -6920 0
-784 -649 -6921 0
c (0<=(SATLiteral(784) - aux1692 + SATLiteral(649)))
649 6921 0
784 6921 0
784 649 6920 0
c (( - aux1693 + SATLiteral(499) + SATLiteral(634))<=0)
-634 -6923 0
-499 -6923 0
-499 -634 -6924 0
c (0<=( - aux1693 + SATLiteral(499) + SATLiteral(634)))
634 6924 0
499 6924 0
499 634 6923 0
c (( - aux1694 + SATLiteral(514) + SATLiteral(529))<=0)
-529 -6926 0
-514 -6926 0
-514 -529 -6927 0
c (0<=( - aux1694 + SATLiteral(514) + SATLiteral(529)))
529 6927 0
514 6927 0
514 529 6926 0
c ((SATLiteral(799) + aux1694 - aux1695)<=0)
6926 -6929 0
6927 -6930 0
-799 -6929 0
-799 6926 -6930 0
-799 6927 -6932 0
c (0<=(SATLiteral(799) + aux1694 - aux1695))
-6927 6932 0
-6926 6930 0
799 6932 0
799 -6927 6930 0
799 -6926 6929 0
c ((aux1691 + aux1693 - aux1696)<=0)
6923 -6934 0
6924 -6935 0
6917 -6934 0
6917 6923 -6935 0
6917 6924 -6937 0
6918 -6935 0
6918 6923 -6937 0
6918 6924 -6939 0
c (0<=(aux1691 + aux1693 - aux1696))
-6924 6939 0
-6923 6937 0
-6918 6939 0
-6918 -6924 6937 0
-6918 -6923 6935 0
-6917 6937 0
-6917 -6924 6935 0
-6917 -6923 6934 0
c ((SATLiteral(771) - aux1697 + SATLiteral(666))<=0)
-666 -6941 0
-771 -6941 0
-771 -666 -6942 0
c (0<=(SATLiteral(771) - aux1697 + SATLiteral(666)))
666 6942 0
771 6942 0
771 666 6941 0
c ((SATLiteral(786) - aux1698 + SATLiteral(651))<=0)
-651 -6944 0
-786 -6944 0
-786 -651 -6945 0
c (0<=(SATLiteral(786) - aux1698 + SATLiteral(651)))
651 6945 0
786 6945 0
786 651 6944 0
c (( - aux1699 + SATLiteral(501) + SATLiteral(636))<=0)
-636 -6947 0
-501 -6947 0
-501 -636 -6948 0
c (0<=( - aux1699 + SATLiteral(501) + SATLiteral(636)))
636 6948 0
501 6948 0
501 636 6947 0
c (( - aux1700 + SATLiteral(516) + SATLiteral(531))<=0)
-531 -6950 0
-516 -6950 0
-516 -531 -6951 0
c (0<=( - aux1700 + SATLiteral(516) + SATLiteral(531)))
531 6951 0
516 6951 0
516 531 6950 0
c ((SATLiteral(801) + aux1700 - aux1701)<=0)
6950 -6953 0
6951 -6954 0
-801 -6953 0
-801 6950 -6954 0
-801 6951 -6956 0
c (0<=(SATLiteral(801) + aux1700 - aux1701))
-6951 6956 0
-6950 6954 0
801 6956 0
801 -6951 6954 0
801 -6950 6953 0
c ((aux1697 + aux1699 - aux1702)<=0)
6947 -6958 0
6948 -6959 0
6941 -6958 0
6941 6947 -6959 0
6941 6948 -6961 0
6942 -6959 0
6942 6947 -6961 0
6942 6948 -6963 0
c (0<=(aux1697 + aux1699 - aux1702))
-6948 6963 0
-6947 6961 0
-6942 6963 0
-6942 -6948 6961 0
-6942 -6947 6959 0
-6941 6961 0
-6941 -6948 6959 0
-6941 -6947 6958 0
c ((SATLiteral(773) - aux1703 + SATLiteral(668))<=0)
-668 -6965 0
-773 -6965 0
-773 -668 -6966 0
c (0<=(SATLiteral(773) - aux1703 + SATLiteral(668)))
668 6966 0
773 6966 0
773 668 6965 0
c ((SATLiteral(788) - aux1704 + SATLiteral(653))<=0)
-653 -6968 0
-788 -6968 0
-788 -653 -6969 0
c (0<=(SATLiteral(788) - aux1704 + SATLiteral(653)))
653 6969 0
788 6969 0
788 653 6968 0
c (( - aux1705 + SATLiteral(503) + SATLiteral(638))<=0)
-638 -6971 0
-503 -6971 0
-503 -638 -6972 0
c (0<=( - aux1705 + SATLiteral(503) + SATLiteral(638)))
638 6972 0
503 6972 0
503 638 6971 0
c (( - aux1706 + SATLiteral(518) + SATLiteral(533))<=0)
-533 -6974 0
-518 -6974 0
-518 -533 -6975 0
c (0<=( - aux1706 + SATLiteral(518) + SATLiteral(533)))
533 6975 0
518 6975 0
518 533 6974 0
c ((SATLiteral(803) + aux1706 - aux1707)<=0)
6974 -6977 0
6975 -6978 0
-803 -6977 0
-803 6974 -6978 0
-803 6975 -6980 0
c (0<=(SATLiteral(803) + aux1706 - aux1707))
-6975 6980 0
-6974 6978 0
803 6980 0
803 -6975 6978 0
803 -6974 6977 0
c ((aux1703 + aux1705 - aux1708)<=0)
6971 -6982 0
6972 -6983 0
6965 -6982 0
6965 6971 -6983 0
6965 6972 -6985 0
6966 -6983 0
6966 6971 -6985 0
6966 6972 -6987 0
c (0<=(aux1703 + aux1705 - aux1708))
-6972 6987 0
-6971 6985 0
-6966 6987 0
-6966 -6972 6985 0
-6966 -6971 6983 0
-6965 6985 0
-6965 -6972 6983 0
-6965 -6971 6982 0
c ((SATLiteral(775) - aux1709 + SATLiteral(670))<=0)
-670 -6989 0
-775 -6989 0
-775 -670 -6990 0
c (0<=(SATLiteral(775) - aux1709 + SATLiteral(670)))
670 6990 0
775 6990 0
775 670 6989 0
c ((SATLiteral(790) - aux1710 + SATLiteral(655))<=0)
-655 -6992 0
-790 -6992 0
-790 -655 -6993 0
c (0<=(SATLiteral(790) - aux1710 + SATLiteral(655)))
655 6993 0
790 6993 0
790 655 6992 0
c (( - aux1711 + SATLiteral(505) + SATLiteral(640))<=0)
-640 -6995 0
-505 -6995 0
-505 -640 -6996 0
c (0<=( - aux1711 + SATLiteral(505) + SATLiteral(640)))
640 6996 0
505 6996 0
505 640 6995 0
c (( - aux1712 + SATLiteral(520) + SATLiteral(535))<=0)
-535 -6998 0
-520 -6998 0
-520 -535 -6999 0
c (0<=( - aux1712 + SATLiteral(520) + SATLiteral(535)))
535 6999 0
520 6999 0
520 535 6998 0
c ((SATLiteral(805) + aux1712 - aux1713)<=0)
6998 -7001 0
6999 -7002 0
-805 -7001 0
-805 6998 -7002 0
-805 6999 -7004 0
c (0<=(SATLiteral(805) + aux1712 - aux1713))
-6999 7004 0
-6998 7002 0
805 7004 0
805 -6999 7002 0
805 -6998 7001 0
c ((aux1709 + aux1711 - aux1714)<=0)
6995 -7006 0
6996 -7007 0
6989 -7006 0
6989 6995 -7007 0
6989 6996 -7009 0
6990 -7007 0
6990 6995 -7009 0
6990 6996 -7011 0
c (0<=(aux1709 + aux1711 - aux1714))
-6996 7011 0
-6995 7009 0
-6990 7011 0
-6990 -6996 7009 0
-6990 -6995 7007 0
-6989 7009 0
-6989 -6996 7007 0
-6989 -6995 7006 0
c ((SATLiteral(777) - aux1715 + SATLiteral(672))<=0)
-672 -7013 0
-777 -7013 0
-777 -672 -7014 0
c (0<=(SATLiteral(777) - aux1715 + SATLiteral(672)))
672 7014 0
777 7014 0
777 672 7013 0
c ((SATLiteral(792) - aux1716 + SATLiteral(657))<=0)
-657 -7016 0
-792 -7016 0
-792 -657 -7017 0
c (0<=(SATLiteral(792) - aux1716 + SATLiteral(657)))
657 7017 0
792 7017 0
792 657 7016 0
c (( - aux1717 + SATLiteral(507) + SATLiteral(642))<=0)
-642 -7019 0
-507 -7019 0
-507 -642 -7020 0
c (0<=( - aux1717 + SATLiteral(507) + SATLiteral(642)))
642 7020 0
507 7020 0
507 642 7019 0
c (( - aux1718 + SATLiteral(522) + SATLiteral(537))<=0)
-537 -7022 0
-522 -7022 0
-522 -537 -7023 0
c (0<=( - aux1718 + SATLiteral(522) + SATLiteral(537)))
537 7023 0
522 7023 0
522 537 7022 0
c ((SATLiteral(807) + aux1718 - aux1719)<=0)
7022 -7025 0
7023 -7026 0
-807 -7025 0
-807 7022 -7026 0
-807 7023 -7028 0
c (0<=(SATLiteral(807) + aux1718 - aux1719))
-7023 7028 0
-7022 7026 0
807 7028 0
807 -7023 7026 0
807 -7022 7025 0
c ((aux1715 + aux1717 - aux1720)<=0)
7019 -7030 0
7020 -7031 0
7013 -7030 0
7013 7019 -7031 0
7013 7020 -7033 0
7014 -7031 0
7014 7019 -7033 0
7014 7020 -7035 0
c (0<=(aux1715 + aux1717 - aux1720))
-7020 7035 0
-7019 7033 0
-7014 7035 0
-7014 -7020 7033 0
-7014 -7019 7031 0
-7013 7033 0
-7013 -7020 7031 0
-7013 -7019 7030 0
c ((SATLiteral(779) - aux1721 + SATLiteral(674))<=0)
-674 -7037 0
-779 -7037 0
-779 -674 -7038 0
c (0<=(SATLiteral(779) - aux1721 + SATLiteral(674)))
674 7038 0
779 7038 0
779 674 7037 0
c ((SATLiteral(794) - aux1722 + SATLiteral(659))<=0)
-659 -7040 0
-794 -7040 0
-794 -659 -7041 0
c (0<=(SATLiteral(794) - aux1722 + SATLiteral(659)))
659 7041 0
794 7041 0
794 659 7040 0
c (( - aux1723 + SATLiteral(509) + SATLiteral(644))<=0)
-644 -7043 0
-509 -7043 0
-509 -644 -7044 0
c (0<=( - aux1723 + SATLiteral(509) + SATLiteral(644)))
644 7044 0
509 7044 0
509 644 7043 0
c (( - aux1724 + SATLiteral(524) + SATLiteral(539))<=0)
-539 -7046 0
-524 -7046 0
-524 -539 -7047 0
c (0<=( - aux1724 + SATLiteral(524) + SATLiteral(539)))
539 7047 0
524 7047 0
524 539 7046 0
c ((SATLiteral(809) + aux1724 - aux1725)<=0)
7046 -7049 0
7047 -7050 0
-809 -7049 0
-809 7046 -7050 0
-809 7047 -7052 0
c (0<=(SATLiteral(809) + aux1724 - aux1725))
-7047 7052 0
-7046 7050 0
809 7052 0
809 -7047 7050 0
809 -7046 7049 0
c ((aux1721 + aux1723 - aux1726)<=0)
7043 -7054 0
7044 -7055 0
7037 -7054 0
7037 7043 -7055 0
7037 7044 -7057 0
7038 -7055 0
7038 7043 -7057 0
7038 7044 -7059 0
c (0<=(aux1721 + aux1723 - aux1726))
-7044 7059 0
-7043 7057 0
-7038 7059 0
-7038 -7044 7057 0
-7038 -7043 7055 0
-7037 7057 0
-7037 -7044 7055 0
-7037 -7043 7054 0
c ((SATLiteral(781) - aux1727 + SATLiteral(676))<=0)
-676 -7061 0
-781 -7061 0
-781 -676 -7062 0
c (0<=(SATLiteral(781) - aux1727 + SATLiteral(676)))
676 7062 0
781 7062 0
781 676 7061 0
c ((SATLiteral(796) - aux1728 + SATLiteral(661))<=0)
-661 -7064 0
-796 -7064 0
-796 -661 -7065 0
c (0<=(SATLiteral(796) - aux1728 + SATLiteral(661)))
661 7065 0
796 7065 0
796 661 7064 0
c (( - aux1729 + SATLiteral(511) + SATLiteral(646))<=0)
-646 -7067 0
-511 -7067 0
-511 -646 -7068 0
c (0<=( - aux1729 + SATLiteral(511) + SATLiteral(646)))
646 7068 0
511 7068 0
511 646 7067 0
c (( - aux1730 + SATLiteral(526) + SATLiteral(541))<=0)
-541 -7070 0
-526 -7070 0
-526 -541 -7071 0
c (0<=( - aux1730 + SATLiteral(526) + SATLiteral(541)))
541 7071 0
526 7071 0
526 541 7070 0
c ((SATLiteral(811) + aux1730 - aux1731)<=0)
7070 -7073 0
7071 -7074 0
-811 -7073 0
-811 7070 -7074 0
-811 7071 -7076 0
c (0<=(SATLiteral(811) + aux1730 - aux1731))
-7071 7076 0
-7070 7074 0
811 7076 0
811 -7071 7074 0
811 -7070 7073 0
c ((aux1727 + aux1729 - aux1732)<=0)
7067 -7078 0
7068 -7079 0
7061 -7078 0
7061 7067 -7079 0
7061 7068 -7081 0
7062 -7079 0
7062 7067 -7081 0
7062 7068 -7083 0
c (0<=(aux1727 + aux1729 - aux1732))
-7068 7083 0
-7067 7081 0
-7062 7083 0
-7062 -7068 7081 0
-7062 -7067 7079 0
-7061 7081 0
-7061 -7068 7079 0
-7061 -7067 7078 0
c ((SATLiteral(-780) - aux1733 + SATLiteral(-675))<=0)
675 -7085 0
780 -7085 0
780 675 -7086 0
c (0<=(SATLiteral(-780) - aux1733 + SATLiteral(-675)))
-675 7086 0
-780 7086 0
-780 -675 7085 0
c ((SATLiteral(-795) - aux1734 + SATLiteral(-660))<=0)
660 -7088 0
795 -7088 0
795 660 -7089 0
c (0<=(SATLiteral(-795) - aux1734 + SATLiteral(-660)))
-660 7089 0
-795 7089 0
-795 -660 7088 0
c (( - aux1735 + SATLiteral(-510) + SATLiteral(-645))<=0)
645 -7091 0
510 -7091 0
510 645 -7092 0
c (0<=( - aux1735 + SATLiteral(-510) + SATLiteral(-645)))
-645 7092 0
-510 7092 0
-510 -645 7091 0
c (( - aux1736 + SATLiteral(-525) + SATLiteral(-540))<=0)
540 -7094 0
525 -7094 0
525 540 -7095 0
c (0<=( - aux1736 + SATLiteral(-525) + SATLiteral(-540)))
-540 7095 0
-525 7095 0
-525 -540 7094 0
c ((SATLiteral(-810) + aux1736 - aux1737)<=0)
7094 -7097 0
7095 -7098 0
810 -7097 0
810 7094 -7098 0
810 7095 -7100 0
c (0<=(SATLiteral(-810) + aux1736 - aux1737))
-7095 7100 0
-7094 7098 0
-810 7100 0
-810 -7095 7098 0
-810 -7094 7097 0
c ((aux1733 + aux1735 - aux1738)<=0)
7091 -7102 0
7092 -7103 0
7085 -7102 0
7085 7091 -7103 0
7085 7092 -7105 0
7086 -7103 0
7086 7091 -7105 0
7086 7092 -7107 0
c (0<=(aux1733 + aux1735 - aux1738))
-7092 7107 0
-7091 7105 0
-7086 7107 0
-7086 -7092 7105 0
-7086 -7091 7103 0
-7085 7105 0
-7085 -7092 7103 0
-7085 -7091 7102 0
c ((SATLiteral(947) - aux1739 + SATLiteral(842))<=0)
-842 -7109 0
-947 -7109 0
-947 -842 -7110 0
c (0<=(SATLiteral(947) - aux1739 + SATLiteral(842)))
842 7110 0
947 7110 0
947 842 7109 0
c ((SATLiteral(962) - aux1740 + SATLiteral(827))<=0)
-827 -7112 0
-962 -7112 0
-962 -827 -7113 0
c (0<=(SATLiteral(962) - aux1740 + SATLiteral(827)))
827 7113 0
962 7113 0
962 827 7112 0
c (( - aux1741 + SATLiteral(1082) + SATLiteral(812))<=0)
-812 -7115 0
-1082 -7115 0
-1082 -812 -7116 0
c (0<=( - aux1741 + SATLiteral(1082) + SATLiteral(812)))
812 7116 0
1082 7116 0
1082 812 7115 0
c (( - aux1742 + SATLiteral(1097) + SATLiteral(1112))<=0)
-1112 -7118 0
-1097 -7118 0
-1097 -1112 -7119 0
c (0<=( - aux1742 + SATLiteral(1097) + SATLiteral(1112)))
1112 7119 0
1097 7119 0
1097 1112 7118 0
c ((SATLiteral(977) + aux1742 - aux1743)<=0)
7118 -7121 0
7119 -7122 0
-977 -7121 0
-977 7118 -7122 0
-977 7119 -7124 0
c (0<=(SATLiteral(977) + aux1742 - aux1743))
-7119 7124 0
-7118 7122 0
977 7124 0
977 -7119 7122 0
977 -7118 7121 0
c ((aux1739 + aux1741 - aux1744)<=0)
7115 -7126 0
7116 -7127 0
7109 -7126 0
7109 7115 -7127 0
7109 7116 -7129 0
7110 -7127 0
7110 7115 -7129 0
7110 7116 -7131 0
c (0<=(aux1739 + aux1741 - aux1744))
-7116 7131 0
-7115 7129 0
-7110 7131 0
-7110 -7116 7129 0
-7110 -7115 7127 0
-7109 7129 0
-7109 -7116 7127 0
-7109 -7115 7126 0
c ((SATLiteral(949) - aux1745 + SATLiteral(844))<=0)
-844 -7133 0
-949 -7133 0
-949 -844 -7134 0
c (0<=(SATLiteral(949) - aux1745 + SATLiteral(844)))
844 7134 0
949 7134 0
949 844 7133 0
c ((SATLiteral(964) - aux1746 + SATLiteral(829))<=0)
-829 -7136 0
-964 -7136 0
-964 -829 -7137 0
c (0<=(SATLiteral(964) - aux1746 + SATLiteral(829)))
829 7137 0
964 7137 0
964 829 7136 0
c (( - aux1747 + SATLiteral(1084) + SATLiteral(814))<=0)
-814 -7139 0
-1084 -7139 0
-1084 -814 -7140 0
c (0<=( - aux1747 + SATLiteral(1084) + SATLiteral(814)))
814 7140 0
1084 7140 0
1084 814 7139 0
c (( - aux1748 + SATLiteral(1099) + SATLiteral(1114))<=0)
-1114 -7142 0
-1099 -7142 0
-1099 -1114 -7143 0
c (0<=( - aux1748 + SATLiteral(1099) + SATLiteral(1114)))
1114 7143 0
1099 7143 0
1099 1114 7142 0
c ((SATLiteral(979) + aux1748 - aux1749)<=0)
7142 -7145 0
7143 -7146 0
-979 -7145 0
-979 7142 -7146 0
-979 7143 -7148 0
c (0<=(SATLiteral(979) + aux1748 - aux1749))
-7143 7148 0
-7142 7146 0
979 7148 0
979 -7143 7146 0
979 -7142 7145 0
c ((aux1745 + aux1747 - aux1750)<=0)
7139 -7150 0
7140 -7151 0
7133 -7150 0
7133 7139 -7151 0
7133 7140 -7153 0
7134 -7151 0
7134 7139 -7153 0
7134 7140 -7155 0
c (0<=(aux1745 + aux1747 - aux1750))
-7140 7155 0
-7139 7153 0
-7134 7155 0
-7134 -7140 7153 0
-7134 -7139 7151 0
-7133 7153 0
-7133 -7140 7151 0
-7133 -7139 7150 0
c ((SATLiteral(951) - aux1751 + SATLiteral(846))<=0)
-846 -7157 0
-951 -7157 0
-951 -846 -7158 0
c (0<=(SATLiteral(951) - aux1751 + SATLiteral(846)))
846 7158 0
951 7158 0
951 846 7157 0
c ((SATLiteral(966) - aux1752 + SATLiteral(831))<=0)
-831 -7160 0
-966 -7160 0
-966 -831 -7161 0
c (0<=(SATLiteral(966) - aux1752 + SATLiteral(831)))
831 7161 0
966 7161 0
966 831 7160 0
c (( - aux1753 + SATLiteral(1086) + SATLiteral(816))<=0)
-816 -7163 0
-1086 -7163 0
-1086 -816 -7164 0
c (0<=( - aux1753 + SATLiteral(1086) + SATLiteral(816)))
816 7164 0
1086 7164 0
1086 816 7163 0
c (( - aux1754 + SATLiteral(1101) + SATLiteral(1116))<=0)
-1116 -7166 0
-1101 -7166 0
-1101 -1116 -7167 0
c (0<=( - aux1754 + SATLiteral(1101) + SATLiteral(1116)))
1116 7167 0
1101 7167 0
1101 1116 7166 0
c ((SATLiteral(981) + aux1754 - aux1755)<=0)
7166 -7169 0
7167 -7170 0
-981 -7169 0
-981 7166 -7170 0
-981 7167 -7172 0
c (0<=(SATLiteral(981) + aux1754 - aux1755))
-7167 7172 0
-7166 7170 0
981 7172 0
981 -7167 7170 0
981 -7166 7169 0
c ((aux1751 + aux1753 - aux1756)<=0)
7163 -7174 0
7164 -7175 0
7157 -7174 0
7157 7163 -7175 0
7157 7164 -7177 0
7158 -7175 0
7158 7163 -7177 0
7158 7164 -7179 0
c (0<=(aux1751 + aux1753 - aux1756))
-7164 7179 0
-7163 7177 0
-7158 7179 0
-7158 -7164 7177 0
-7158 -7163 7175 0
-7157 7177 0
-7157 -7164 7175 0
-7157 -7163 7174 0
c ((SATLiteral(953) - aux1757 + SATLiteral(848))<=0)
-848 -7181 0
-953 -7181 0
-953 -848 -7182 0
c (0<=(SATLiteral(953) - aux1757 + SATLiteral(848)))
848 7182 0
953 7182 0
953 848 7181 0
c ((SATLiteral(968) - aux1758 + SATLiteral(833))<=0)
-833 -7184 0
-968 -7184 0
-968 -833 -7185 0
c (0<=(SATLiteral(968) - aux1758 + SATLiteral(833)))
833 7185 0
968 7185 0
968 833 7184 0
c (( - aux1759 + SATLiteral(1088) + SATLiteral(818))<=0)
-818 -7187 0
-1088 -7187 0
-1088 -818 -7188 0
c (0<=( - aux1759 + SATLiteral(1088) + SATLiteral(818)))
818 7188 0
1088 7188 0
1088 818 7187 0
c (( - aux1760 + SATLiteral(1103) + SATLiteral(1118))<=0)
-1118 -7190 0
-1103 -7190 0
-1103 -1118 -7191 0
c (0<=( - aux1760 + SATLiteral(1103) + SATLiteral(1118)))
1118 7191 0
1103 7191 0
1103 1118 7190 0
c ((SATLiteral(983) + aux1760 - aux1761)<=0)
7190 -7193 0
7191 -7194 0
-983 -7193 0
-983 7190 -7194 0
-983 7191 -7196 0
c (0<=(SATLiteral(983) + aux1760 - aux1761))
-7191 7196 0
-7190 7194 0
983 7196 0
983 -7191 7194 0
983 -7190 7193 0
c ((aux1757 + aux1759 - aux1762)<=0)
7187 -7198 0
7188 -7199 0
7181 -7198 0
7181 7187 -7199 0
7181 7188 -7201 0
7182 -7199 0
7182 7187 -7201 0
7182 7188 -7203 0
c (0<=(aux1757 + aux1759 - aux1762))
-7188 7203 0
-7187 7201 0
-7182 7203 0
-7182 -7188 7201 0
-7182 -7187 7199 0
-7181 7201 0
-7181 -7188 7199 0
-7181 -7187 7198 0
c ((SATLiteral(955) - aux1763 + SATLiteral(850))<=0)
-850 -7205 0
-955 -7205 0
-955 -850 -7206 0
c (0<=(SATLiteral(955) - aux1763 + SATLiteral(850)))
850 7206 0
955 7206 0
955 850 7205 0
c ((SATLiteral(970) - aux1764 + SATLiteral(835))<=0)
-835 -7208 0
-970 -7208 0
-970 -835 -7209 0
c (0<=(SATLiteral(970) - aux1764 + SATLiteral(835)))
835 7209 0
970 7209 0
970 835 7208 0
c (( - aux1765 + SATLiteral(1090) + SATLiteral(820))<=0)
-820 -7211 0
-1090 -7211 0
-1090 -820 -7212 0
c (0<=( - aux1765 + SATLiteral(1090) + SATLiteral(820)))
820 7212 0
1090 7212 0
1090 820 7211 0
c (( - aux1766 + SATLiteral(1105) + SATLiteral(1120))<=0)
-1120 -7214 0
-1105 -7214 0
-1105 -1120 -7215 0
c (0<=( - aux1766 + SATLiteral(1105) + SATLiteral(1120)))
1120 7215 0
1105 7215 0
1105 1120 7214 0
c ((SATLiteral(985) + aux1766 - aux1767)<=0)
7214 -7217 0
7215 -7218 0
-985 -7217 0
-985 7214 -7218 0
-985 7215 -7220 0
c (0<=(SATLiteral(985) + aux1766 - aux1767))
-7215 7220 0
-7214 7218 0
985 7220 0
985 -7215 7218 0
985 -7214 7217 0
c ((aux1763 + aux1765 - aux1768)<=0)
7211 -7222 0
7212 -7223 0
7205 -7222 0
7205 7211 -7223 0
7205 7212 -7225 0
7206 -7223 0
7206 7211 -7225 0
7206 7212 -7227 0
c (0<=(aux1763 + aux1765 - aux1768))
-7212 7227 0
-7211 7225 0
-7206 7227 0
-7206 -7212 7225 0
-7206 -7211 7223 0
-7205 7225 0
-7205 -7212 7223 0
-7205 -7211 7222 0
c ((SATLiteral(957) - aux1769 + SATLiteral(852))<=0)
-852 -7229 0
-957 -7229 0
-957 -852 -7230 0
c (0<=(SATLiteral(957) - aux1769 + SATLiteral(852)))
852 7230 0
957 7230 0
957 852 7229 0
c ((SATLiteral(972) - aux1770 + SATLiteral(837))<=0)
-837 -7232 0
-972 -7232 0
-972 -837 -7233 0
c (0<=(SATLiteral(972) - aux1770 + SATLiteral(837)))
837 7233 0
972 7233 0
972 837 7232 0
c (( - aux1771 + SATLiteral(1092) + SATLiteral(822))<=0)
-822 -7235 0
-1092 -7235 0
-1092 -822 -7236 0
c (0<=( - aux1771 + SATLiteral(1092) + SATLiteral(822)))
822 7236 0
1092 7236 0
1092 822 7235 0
c (( - aux1772 + SATLiteral(1107) + SATLiteral(1122))<=0)
-1122 -7238 0
-1107 -7238 0
-1107 -1122 -7239 0
c (0<=( - aux1772 + SATLiteral(1107) + SATLiteral(1122)))
1122 7239 0
1107 7239 0
1107 1122 7238 0
c ((SATLiteral(987) + aux1772 - aux1773)<=0)
7238 -7241 0
7239 -7242 0
-987 -7241 0
-987 7238 -7242 0
-987 7239 -7244 0
c (0<=(SATLiteral(987) + aux1772 - aux1773))
-7239 7244 0
-7238 7242 0
987 7244 0
987 -7239 7242 0
987 -7238 7241 0
c ((aux1769 + aux1771 - aux1774)<=0)
7235 -7246 0
7236 -7247 0
7229 -7246 0
7229 7235 -7247 0
7229 7236 -7249 0
7230 -7247 0
7230 7235 -7249 0
7230 7236 -7251 0
c (0<=(aux1769 + aux1771 - aux1774))
-7236 7251 0
-7235 7249 0
-7230 7251 0
-7230 -7236 7249 0
-7230 -7235 7247 0
-7229 7249 0
-7229 -7236 7247 0
-7229 -7235 7246 0
c ((SATLiteral(959) - aux1775 + SATLiteral(854))<=0)
-854 -7253 0
-959 -7253 0
-959 -854 -7254 0
c (0<=(SATLiteral(959) - aux1775 + SATLiteral(854)))
854 7254 0
959 7254 0
959 854 7253 0
c ((SATLiteral(974) - aux1776 + SATLiteral(839))<=0)
-839 -7256 0
-974 -7256 0
-974 -839 -7257 0
c (0<=(SATLiteral(974) - aux1776 + SATLiteral(839)))
839 7257 0
974 7257 0
974 839 7256 0
c (( - aux1777 + SATLiteral(1094) + SATLiteral(824))<=0)
-824 -7259 0
-1094 -7259 0
-1094 -824 -7260 0
c (0<=( - aux1777 + SATLiteral(1094) + SATLiteral(824)))
824 7260 0
1094 7260 0
1094 824 7259 0
c (( - aux1778 + SATLiteral(1109) + SATLiteral(1124))<=0)
-1124 -7262 0
-1109 -7262 0
-1109 -1124 -7263 0
c (0<=( - aux1778 + SATLiteral(1109) + SATLiteral(1124)))
1124 7263 0
1109 7263 0
1109 1124 7262 0
c ((SATLiteral(989) + aux1778 - aux1779)<=0)
7262 -7265 0
7263 -7266 0
-989 -7265 0
-989 7262 -7266 0
-989 7263 -7268 0
c (0<=(SATLiteral(989) + aux1778 - aux1779))
-7263 7268 0
-7262 7266 0
989 7268 0
989 -7263 7266 0
989 -7262 7265 0
c ((aux1775 + aux1777 - aux1780)<=0)
7259 -7270 0
7260 -7271 0
7253 -7270 0
7253 7259 -7271 0
7253 7260 -7273 0
7254 -7271 0
7254 7259 -7273 0
7254 7260 -7275 0
c (0<=(aux1775 + aux1777 - aux1780))
-7260 7275 0
-7259 7273 0
-7254 7275 0
-7254 -7260 7273 0
-7254 -7259 7271 0
-7253 7273 0
-7253 -7260 7271 0
-7253 -7259 7270 0
c ((SATLiteral(961) - aux1781 + SATLiteral(856))<=0)
-856 -7277 0
-961 -7277 0
-961 -856 -7278 0
c (0<=(SATLiteral(961) - aux1781 + SATLiteral(856)))
856 7278 0
961 7278 0
961 856 7277 0
c ((SATLiteral(976) - aux1782 + SATLiteral(841))<=0)
-841 -7280 0
-976 -7280 0
-976 -841 -7281 0
c (0<=(SATLiteral(976) - aux1782 + SATLiteral(841)))
841 7281 0
976 7281 0
976 841 7280 0
c (( - aux1783 + SATLiteral(1096) + SATLiteral(826))<=0)
-826 -7283 0
-1096 -7283 0
-1096 -826 -7284 0
c (0<=( - aux1783 + SATLiteral(1096) + SATLiteral(826)))
826 7284 0
1096 7284 0
1096 826 7283 0
c (( - aux1784 + SATLiteral(1111) + SATLiteral(1126))<=0)
-1126 -7286 0
-1111 -7286 0
-1111 -1126 -7287 0
c (0<=( - aux1784 + SATLiteral(1111) + SATLiteral(1126)))
1126 7287 0
1111 7287 0
1111 1126 7286 0
c ((SATLiteral(991) + aux1784 - aux1785)<=0)
7286 -7289 0
7287 -7290 0
-991 -7289 0
-991 7286 -7290 0
-991 7287 -7292 0
c (0<=(SATLiteral(991) + aux1784 - aux1785))
-7287 7292 0
-7286 7290 0
991 7292 0
991 -7287 7290 0
991 -7286 7289 0
c ((aux1781 + aux1783 - aux1786)<=0)
7283 -7294 0
7284 -7295 0
7277 -7294 0
7277 7283 -7295 0
7277 7284 -7297 0
7278 -7295 0
7278 7283 -7297 0
7278 7284 -7299 0
c (0<=(aux1781 + aux1783 - aux1786))
-7284 7299 0
-7283 7297 0
-7278 7299 0
-7278 -7284 7297 0
-7278 -7283 7295 0
-7277 7297 0
-7277 -7284 7295 0
-7277 -7283 7294 0
c ((SATLiteral(-960) - aux1787 + SATLiteral(-855))<=0)
855 -7301 0
960 -7301 0
960 855 -7302 0
c (0<=(SATLiteral(-960) - aux1787 + SATLiteral(-855)))
-855 7302 0
-960 7302 0
-960 -855 7301 0
c ((SATLiteral(-975) - aux1788 + SATLiteral(-840))<=0)
840 -7304 0
975 -7304 0
975 840 -7305 0
c (0<=(SATLiteral(-975) - aux1788 + SATLiteral(-840)))
-840 7305 0
-975 7305 0
-975 -840 7304 0
c (( - aux1789 + SATLiteral(-1095) + SATLiteral(-825))<=0)
825 -7307 0
1095 -7307 0
1095 825 -7308 0
c (0<=( - aux1789 + SATLiteral(-1095) + SATLiteral(-825)))
-825 7308 0
-1095 7308 0
-1095 -825 7307 0
c (( - aux1790 + SATLiteral(-1110) + SATLiteral(-1125))<=0)
1125 -7310 0
1110 -7310 0
1110 1125 -7311 0
c (0<=( - aux1790 + SATLiteral(-1110) + SATLiteral(-1125)))
-1125 7311 0
-1110 7311 0
-1110 -1125 7310 0
c ((SATLiteral(-990) + aux1790 - aux1791)<=0)
7310 -7313 0
7311 -7314 0
990 -7313 0
990 7310 -7314 0
990 7311 -7316 0
c (0<=(SATLiteral(-990) + aux1790 - aux1791))
-7311 7316 0
-7310 7314 0
-990 7316 0
-990 -7311 7314 0
-990 -7310 7313 0
c ((aux1787 + aux1789 - aux1792)<=0)
7307 -7318 0
7308 -7319 0
7301 -7318 0
7301 7307 -7319 0
7301 7308 -7321 0
7302 -7319 0
7302 7307 -7321 0
7302 7308 -7323 0
c (0<=(aux1787 + aux1789 - aux1792))
-7308 7323 0
-7307 7321 0
-7302 7323 0
-7302 -7308 7321 0
-7302 -7307 7319 0
-7301 7321 0
-7301 -7308 7319 0
-7301 -7307 7318 0
c ((SATLiteral(992) - aux1793 + SATLiteral(887))<=0)
-887 -7325 0
-992 -7325 0
-992 -887 -7326 0
c (0<=(SATLiteral(992) - aux1793 + SATLiteral(887)))
887 7326 0
992 7326 0
992 887 7325 0
c ((SATLiteral(1007) - aux1794 + SATLiteral(872))<=0)
-872 -7328 0
-1007 -7328 0
-1007 -872 -7329 0
c (0<=(SATLiteral(1007) - aux1794 + SATLiteral(872)))
872 7329 0
1007 7329 0
1007 872 7328 0
c (( - aux1795 + SATLiteral(1127) + SATLiteral(857))<=0)
-857 -7331 0
-1127 -7331 0
-1127 -857 -7332 0
c (0<=( - aux1795 + SATLiteral(1127) + SATLiteral(857)))
857 7332 0
1127 7332 0
1127 857 7331 0
c (( - aux1796 + SATLiteral(1142) + SATLiteral(1157))<=0)
-1157 -7334 0
-1142 -7334 0
-1142 -1157 -7335 0
c (0<=( - aux1796 + SATLiteral(1142) + SATLiteral(1157)))
1157 7335 0
1142 7335 0
1142 1157 7334 0
c ((SATLiteral(1022) + aux1796 - aux1797)<=0)
7334 -7337 0
7335 -7338 0
-1022 -7337 0
-1022 7334 -7338 0
-1022 7335 -7340 0
c (0<=(SATLiteral(1022) + aux1796 - aux1797))
-7335 7340 0
-7334 7338 0
1022 7340 0
1022 -7335 7338 0
1022 -7334 7337 0
c ((aux1793 + aux1795 - aux1798)<=0)
7331 -7342 0
7332 -7343 0
7325 -7342 0
7325 7331 -7343 0
7325 7332 -7345 0
7326 -7343 0
7326 7331 -7345 0
7326 7332 -7347 0
c (0<=(aux1793 + aux1795 - aux1798))
-7332 7347 0
-7331 7345 0
-7326 7347 0
-7326 -7332 7345 0
-7326 -7331 7343 0
-7325 7345 0
-7325 -7332 7343 0
-7325 -7331 7342 0
c ((SATLiteral(994) - aux1799 + SATLiteral(889))<=0)
-889 -7349 0
-994 -7349 0
-994 -889 -7350 0
c (0<=(SATLiteral(994) - aux1799 + SATLiteral(889)))
889 7350 0
994 7350 0
994 889 7349 0
c ((SATLiteral(1009) - aux1800 + SATLiteral(874))<=0)
-874 -7352 0
-1009 -7352 0
-1009 -874 -7353 0
c (0<=(SATLiteral(1009) - aux1800 + SATLiteral(874)))
874 7353 0
1009 7353 0
1009 874 7352 0
c (( - aux1801 + SATLiteral(1129) + SATLiteral(859))<=0)
-859 -7355 0
-1129 -7355 0
-1129 -859 -7356 0
c (0<=( - aux1801 + SATLiteral(1129) + SATLiteral(859)))
859 7356 0
1129 7356 0
1129 859 7355 0
c (( - aux1802 + SATLiteral(1144) + SATLiteral(1159))<=0)
-1159 -7358 0
-1144 -7358 0
-1144 -1159 -7359 0
c (0<=( - aux1802 + SATLiteral(1144) + SATLiteral(1159)))
1159 7359 0
1144 7359 0
1144 1159 7358 0
c ((SATLiteral(1024) + aux1802 - aux1803)<=0)
7358 -7361 0
7359 -7362 0
-1024 -7361 0
-1024 7358 -7362 0
-1024 7359 -7364 0
c (0<=(SATLiteral(1024) + aux1802 - aux1803))
-7359 7364 0
-7358 7362 0
1024 7364 0
1024 -7359 7362 0
1024 -7358 7361 0
c ((aux1799 + aux1801 - aux1804)<=0)
7355 -7366 0
7356 -7367 0
7349 -7366 0
7349 7355 -7367 0
7349 7356 -7369 0
7350 -7367 0
7350 7355 -7369 0
7350 7356 -7371 0
c (0<=(aux1799 + aux1801 - aux1804))
-7356 7371 0
-7355 7369 0
-7350 7371 0
-7350 -7356 7369 0
-7350 -7355 7367 0
-7349 7369 0
-7349 -7356 7367 0
-7349 -7355 7366 0
c ((SATLiteral(996) - aux1805 + SATLiteral(891))<=0)
-891 -7373 0
-996 -7373 0
-996 -891 -7374 0
c (0<=(SATLiteral(996) - aux1805 + SATLiteral(891)))
891 7374 0
996 7374 0
996 891 7373 0
c ((SATLiteral(1011) - aux1806 + SATLiteral(876))<=0)
-876 -7376 0
-1011 -7376 0
-1011 -876 -7377 0
c (0<=(SATLiteral(1011) - aux1806 + SATLiteral(876)))
876 7377 0
1011 7377 0
1011 876 7376 0
c (( - aux1807 + SATLiteral(1131) + SATLiteral(861))<=0)
-861 -7379 0
-1131 -7379 0
-1131 -861 -7380 0
c (0<=( - aux1807 + SATLiteral(1131) + SATLiteral(861)))
861 7380 0
1131 7380 0
1131 861 7379 0
c (( - aux1808 + SATLiteral(1146) + SATLiteral(1161))<=0)
-1161 -7382 0
-1146 -7382 0
-1146 -1161 -7383 0
c (0<=( - aux1808 + SATLiteral(1146) + SATLiteral(1161)))
1161 7383 0
1146 7383 0
1146 1161 7382 0
c ((SATLiteral(1026) + aux1808 - aux1809)<=0)
7382 -7385 0
7383 -7386 0
-1026 -7385 0
-1026 7382 -7386 0
-1026 7383 -7388 0
c (0<=(SATLiteral(1026) + aux1808 - aux1809))
-7383 7388 0
-7382 7386 0
1026 7388 0
1026 -7383 7386 0
1026 -7382 7385 0
c ((aux1805 + aux1807 - aux1810)<=0)
7379 -7390 0
7380 -7391 0
7373 -7390 0
7373 7379 -7391 0
7373 7380 -7393 0
7374 -7391 0
7374 7379 -7393 0
7374 7380 -7395 0
c (0<=(aux1805 + aux1807 - aux1810))
-7380 7395 0
-7379 7393 0
-7374 7395 0
-7374 -7380 7393 0
-7374 -7379 7391 0
-7373 7393 0
-7373 -7380 7391 0
-7373 -7379 7390 0
c ((SATLiteral(998) - aux1811 + SATLiteral(893))<=0)
-893 -7397 0
-998 -7397 0
-998 -893 -7398 0
c (0<=(SATLiteral(998) - aux1811 + SATLiteral(893)))
893 7398 0
998 7398 0
998 893 7397 0
c ((SATLiteral(1013) - aux1812 + SATLiteral(878))<=0)
-878 -7400 0
-1013 -7400 0
-1013 -878 -7401 0
c (0<=(SATLiteral(1013) - aux1812 + SATLiteral(878)))
878 7401 0
1013 7401 0
1013 878 7400 0
c (( - aux1813 + SATLiteral(1133) + SATLiteral(863))<=0)
-863 -7403 0
-1133 -7403 0
-1133 -863 -7404 0
c (0<=( - aux1813 + SATLiteral(1133) + SATLiteral(863)))
863 7404 0
1133 7404 0
1133 863 7403 0
c (( - aux1814 + SATLiteral(1148) + SATLiteral(1163))<=0)
-1163 -7406 0
-1148 -7406 0
-1148 -1163 -7407 0
c (0<=( - aux1814 + SATLiteral(1148) + SATLiteral(1163)))
1163 7407 0
1148 7407 0
1148 1163 7406 0
c ((SATLiteral(1028) + aux1814 - aux1815)<=0)
7406 -7409 0
7407 -7410 0
-1028 -7409 0
-1028 7406 -7410 0
-1028 7407 -7412 0
c (0<=(SATLiteral(1028) + aux1814 - aux1815))
-7407 7412 0
-7406 7410 0
1028 7412 0
1028 -7407 7410 0
1028 -7406 7409 0
c ((aux1811 + aux1813 - aux1816)<=0)
7403 -7414 0
7404 -7415 0
7397 -7414 0
7397 7403 -7415 0
7397 7404 -7417 0
7398 -7415 0
7398 7403 -7417 0
7398 7404 -7419 0
c (0<=(aux1811 + aux1813 - aux1816))
-7404 7419 0
-7403 7417 0
-7398 7419 0
-7398 -7404 7417 0
-7398 -7403 7415 0
-7397 7417 0
-7397 -7404 7415 0
-7397 -7403 7414 0
c ((SATLiteral(1000) - aux1817 + SATLiteral(895))<=0)
-895 -7421 0
-1000 -7421 0
-1000 -895 -7422 0
c (0<=(SATLiteral(1000) - aux1817 + SATLiteral(895)))
895 7422 0
1000 7422 0
1000 895 7421 0
c ((SATLiteral(1015) - aux1818 + SATLiteral(880))<=0)
-880 -7424 0
-1015 -7424 0
-1015 -880 -7425 0
c (0<=(SATLiteral(1015) - aux1818 + SATLiteral(880)))
880 7425 0
1015 7425 0
1015 880 7424 0
c (( - aux1819 + SATLiteral(1135) + SATLiteral(865))<=0)
-865 -7427 0
-1135 -7427 0
-1135 -865 -7428 0
c (0<=( - aux1819 + SATLiteral(1135) + SATLiteral(865)))
865 7428 0
1135 7428 0
1135 865 7427 0
c (( - aux1820 + SATLiteral(1150) + SATLiteral(1165))<=0)
-1165 -7430 0
-1150 -7430 0
-1150 -1165 -7431 0
c (0<=( - aux1820 + SATLiteral(1150) + SATLiteral(1165)))
1165 7431 0
1150 7431 0
1150 1165 7430 0
c ((SATLiteral(1030) + aux1820 - aux1821)<=0)
7430 -7433 0
7431 -7434 0
-1030 -7433 0
-1030 7430 -7434 0
-1030 7431 -7436 0
c (0<=(SATLiteral(1030) + aux1820 - aux1821))
-7431 7436 0
-7430 7434 0
1030 7436 0
1030 -7431 7434 0
1030 -7430 7433 0
c ((aux1817 + aux1819 - aux1822)<=0)
7427 -7438 0
7428 -7439 0
7421 -7438 0
7421 7427 -7439 0
7421 7428 -7441 0
7422 -7439 0
7422 7427 -7441 0
7422 7428 -7443 0
c (0<=(aux1817 + aux1819 - aux1822))
-7428 7443 0
-7427 7441 0
-7422 7443 0
-7422 -7428 7441 0
-7422 -7427 7439 0
-7421 7441 0
-7421 -7428 7439 0
-7421 -7427 7438 0
c ((SATLiteral(1002) - aux1823 + SATLiteral(897))<=0)
-897 -7445 0
-1002 -7445 0
-1002 -897 -7446 0
c (0<=(SATLiteral(1002) - aux1823 + SATLiteral(897)))
897 7446 0
1002 7446 0
1002 897 7445 0
c ((SATLiteral(1017) - aux1824 + SATLiteral(882))<=0)
-882 -7448 0
-1017 -7448 0
-1017 -882 -7449 0
c (0<=(SATLiteral(1017) - aux1824 + SATLiteral(882)))
882 7449 0
1017 7449 0
1017 882 7448 0
c (( - aux1825 + SATLiteral(1137) + SATLiteral(867))<=0)
-867 -7451 0
-1137 -7451 0
-1137 -867 -7452 0
c (0<=( - aux1825 + SATLiteral(1137) + SATLiteral(867)))
867 7452 0
1137 7452 0
1137 867 7451 0
c (( - aux1826 + SATLiteral(1152) + SATLiteral(1167))<=0)
-1167 -7454 0
-1152 -7454 0
-1152 -1167 -7455 0
c (0<=( - aux1826 + SATLiteral(1152) + SATLiteral(1167)))
1167 7455 0
1152 7455 0
1152 1167 7454 0
c ((SATLiteral(1032) + aux1826 - aux1827)<=0)
7454 -7457 0
7455 -7458 0
-1032 -7457 0
-1032 7454 -7458 0
-1032 7455 -7460 0
c (0<=(SATLiteral(1032) + aux1826 - aux1827))
-7455 7460 0
-7454 7458 0
1032 7460 0
1032 -7455 7458 0
1032 -7454 7457 0
c ((aux1823 + aux1825 - aux1828)<=0)
7451 -7462 0
7452 -7463 0
7445 -7462 0
7445 7451 -7463 0
7445 7452 -7465 0
7446 -7463 0
7446 7451 -7465 0
7446 7452 -7467 0
c (0<=(aux1823 + aux1825 - aux1828))
-7452 7467 0
-7451 7465 0
-7446 7467 0
-7446 -7452 7465 0
-7446 -7451 7463 0
-7445 7465 0
-7445 -7452 7463 0
-7445 -7451 7462 0
c ((SATLiteral(1004) - aux1829 + SATLiteral(899))<=0)
-899 -7469 0
-1004 -7469 0
-1004 -899 -7470 0
c (0<=(SATLiteral(1004) - aux1829 + SATLiteral(899)))
899 7470 0
1004 7470 0
1004 899 7469 0
c ((SATLiteral(1019) - aux1830 + SATLiteral(884))<=0)
-884 -7472 0
-1019 -7472 0
-1019 -884 -7473 0
c (0<=(SATLiteral(1019) - aux1830 + SATLiteral(884)))
884 7473 0
1019 7473 0
1019 884 7472 0
c (( - aux1831 + SATLiteral(1139) + SATLiteral(869))<=0)
-869 -7475 0
-1139 -7475 0
-1139 -869 -7476 0
c (0<=( - aux1831 + SATLiteral(1139) + SATLiteral(869)))
869 7476 0
1139 7476 0
1139 869 7475 0
c (( - aux1832 + SATLiteral(1154) + SATLiteral(1169))<=0)
-1169 -7478 0
-1154 -7478 0
-1154 -1169 -7479 0
c (0<=( - aux1832 + SATLiteral(1154) + SATLiteral(1169)))
1169 7479 0
1154 7479 0
1154 1169 7478 0
c ((SATLiteral(1034) + aux1832 - aux1833)<=0)
7478 -7481 0
7479 -7482 0
-1034 -7481 0
-1034 7478 -7482 0
-1034 7479 -7484 0
c (0<=(SATLiteral(1034) + aux1832 - aux1833))
-7479 7484 0
-7478 7482 0
1034 7484 0
1034 -7479 7482 0
1034 -7478 7481 0
c ((aux1829 + aux1831 - aux1834)<=0)
7475 -7486 0
7476 -7487 0
7469 -7486 0
7469 7475 -7487 0
7469 7476 -7489 0
7470 -7487 0
7470 7475 -7489 0
7470 7476 -7491 0
c (0<=(aux1829 + aux1831 - aux1834))
-7476 7491 0
-7475 7489 0
-7470 7491 0
-7470 -7476 7489 0
-7470 -7475 7487 0
-7469 7489 0
-7469 -7476 7487 0
-7469 -7475 7486 0
c ((SATLiteral(1006) - aux1835 + SATLiteral(901))<=0)
-901 -7493 0
-1006 -7493 0
-1006 -901 -7494 0
c (0<=(SATLiteral(1006) - aux1835 + SATLiteral(901)))
901 7494 0
1006 7494 0
1006 901 7493 0
c ((SATLiteral(1021) - aux1836 + SATLiteral(886))<=0)
-886 -7496 0
-1021 -7496 0
-1021 -886 -7497 0
c (0<=(SATLiteral(1021) - aux1836 + SATLiteral(886)))
886 7497 0
1021 7497 0
1021 886 7496 0
c (( - aux1837 + SATLiteral(1141) + SATLiteral(871))<=0)
-871 -7499 0
-1141 -7499 0
-1141 -871 -7500 0
c (0<=( - aux1837 + SATLiteral(1141) + SATLiteral(871)))
871 7500 0
1141 7500 0
1141 871 7499 0
c (( - aux1838 + SATLiteral(1156) + SATLiteral(1171))<=0)
-1171 -7502 0
-1156 -7502 0
-1156 -1171 -7503 0
c (0<=( - aux1838 + SATLiteral(1156) + SATLiteral(1171)))
1171 7503 0
1156 7503 0
1156 1171 7502 0
c ((SATLiteral(1036) + aux1838 - aux1839)<=0)
7502 -7505 0
7503 -7506 0
-1036 -7505 0
-1036 7502 -7506 0
-1036 7503 -7508 0
c (0<=(SATLiteral(1036) + aux1838 - aux1839))
-7503 7508 0
-7502 7506 0
1036 7508 0
1036 -7503 7506 0
1036 -7502 7505 0
c ((aux1835 + aux1837 - aux1840)<=0)
7499 -7510 0
7500 -7511 0
7493 -7510 0
7493 7499 -7511 0
7493 7500 -7513 0
7494 -7511 0
7494 7499 -7513 0
7494 7500 -7515 0
c (0<=(aux1835 + aux1837 - aux1840))
-7500 7515 0
-7499 7513 0
-7494 7515 0
-7494 -7500 7513 0
-7494 -7499 7511 0
-7493 7513 0
-7493 -7500 7511 0
-7493 -7499 7510 0
c ((SATLiteral(-1005) - aux1841 + SATLiteral(-900))<=0)
900 -7517 0
1005 -7517 0
1005 900 -7518 0
c (0<=(SATLiteral(-1005) - aux1841 + SATLiteral(-900)))
-900 7518 0
-1005 7518 0
-1005 -900 7517 0
c ((SATLiteral(-1020) - aux1842 + SATLiteral(-885))<=0)
885 -7520 0
1020 -7520 0
1020 885 -7521 0
c (0<=(SATLiteral(-1020) - aux1842 + SATLiteral(-885)))
-885 7521 0
-1020 7521 0
-1020 -885 7520 0
c (( - aux1843 + SATLiteral(-1140) + SATLiteral(-870))<=0)
870 -7523 0
1140 -7523 0
1140 870 -7524 0
c (0<=( - aux1843 + SATLiteral(-1140) + SATLiteral(-870)))
-870 7524 0
-1140 7524 0
-1140 -870 7523 0
c (( - aux1844 + SATLiteral(-1155) + SATLiteral(-1170))<=0)
1170 -7526 0
1155 -7526 0
1155 1170 -7527 0
c (0<=( - aux1844 + SATLiteral(-1155) + SATLiteral(-1170)))
-1170 7527 0
-1155 7527 0
-1155 -1170 7526 0
c ((SATLiteral(-1035) + aux1844 - aux1845)<=0)
7526 -7529 0
7527 -7530 0
1035 -7529 0
1035 7526 -7530 0
1035 7527 -7532 0
c (0<=(SATLiteral(-1035) + aux1844 - aux1845))
-7527 7532 0
-7526 7530 0
-1035 7532 0
-1035 -7527 7530 0
-1035 -7526 7529 0
c ((aux1841 + aux1843 - aux1846)<=0)
7523 -7534 0
7524 -7535 0
7517 -7534 0
7517 7523 -7535 0
7517 7524 -7537 0
7518 -7535 0
7518 7523 -7537 0
7518 7524 -7539 0
c (0<=(aux1841 + aux1843 - aux1846))
-7524 7539 0
-7523 7537 0
-7518 7539 0
-7518 -7524 7537 0
-7518 -7523 7535 0
-7517 7537 0
-7517 -7524 7535 0
-7517 -7523 7534 0
c ((SATLiteral(1037) - aux1847 + SATLiteral(932))<=0)
-932 -7541 0
-1037 -7541 0
-1037 -932 -7542 0
c (0<=(SATLiteral(1037) - aux1847 + SATLiteral(932)))
932 7542 0
1037 7542 0
1037 932 7541 0
c ((SATLiteral(1052) - aux1848 + SATLiteral(917))<=0)
-917 -7544 0
-1052 -7544 0
-1052 -917 -7545 0
c (0<=(SATLiteral(1052) - aux1848 + SATLiteral(917)))
917 7545 0
1052 7545 0
1052 917 7544 0
c (( - aux1849 + SATLiteral(1172) + SATLiteral(902))<=0)
-902 -7547 0
-1172 -7547 0
-1172 -902 -7548 0
c (0<=( - aux1849 + SATLiteral(1172) + SATLiteral(902)))
902 7548 0
1172 7548 0
1172 902 7547 0
c (( - aux1850 + SATLiteral(1187) + SATLiteral(1202))<=0)
-1202 -7550 0
-1187 -7550 0
-1187 -1202 -7551 0
c (0<=( - aux1850 + SATLiteral(1187) + SATLiteral(1202)))
1202 7551 0
1187 7551 0
1187 1202 7550 0
c ((SATLiteral(1067) + aux1850 - aux1851)<=0)
7550 -7553 0
7551 -7554 0
-1067 -7553 0
-1067 7550 -7554 0
-1067 7551 -7556 0
c (0<=(SATLiteral(1067) + aux1850 - aux1851))
-7551 7556 0
-7550 7554 0
1067 7556 0
1067 -7551 7554 0
1067 -7550 7553 0
c ((aux1847 + aux1849 - aux1852)<=0)
7547 -7558 0
7548 -7559 0
7541 -7558 0
7541 7547 -7559 0
7541 7548 -7561 0
7542 -7559 0
7542 7547 -7561 0
7542 7548 -7563 0
c (0<=(aux1847 + aux1849 - aux1852))
-7548 7563 0
-7547 7561 0
-7542 7563 0
-7542 -7548 7561 0
-7542 -7547 7559 0
-7541 7561 0
-7541 -7548 7559 0
-7541 -7547 7558 0
c ((SATLiteral(1039) - aux1853 + SATLiteral(934))<=0)
-934 -7565 0
-1039 -7565 0
-1039 -934 -7566 0
c (0<=(SATLiteral(1039) - aux1853 + SATLiteral(934)))
934 7566 0
1039 7566 0
1039 934 7565 0
c ((SATLiteral(1054) - aux1854 + SATLiteral(919))<=0)
-919 -7568 0
-1054 -7568 0
-1054 -919 -7569 0
c (0<=(SATLiteral(1054) - aux1854 + SATLiteral(919)))
919 7569 0
1054 7569 0
1054 919 7568 0
c (( - aux1855 + SATLiteral(1174) + SATLiteral(904))<=0)
-904 -7571 0
-1174 -7571 0
-1174 -904 -7572 0
c (0<=( - aux1855 + SATLiteral(1174) + SATLiteral(904)))
904 7572 0
1174 7572 0
1174 904 7571 0
c (( - aux1856 + SATLiteral(1189) + SATLiteral(1204))<=0)
-1204 -7574 0
-1189 -7574 0
-1189 -1204 -7575 0
c (0<=( - aux1856 + SATLiteral(1189) + SATLiteral(1204)))
1204 7575 0
1189 7575 0
1189 1204 7574 0
c ((SATLiteral(1069) + aux1856 - aux1857)<=0)
7574 -7577 0
7575 -7578 0
-1069 -7577 0
-1069 7574 -7578 0
-1069 7575 -7580 0
c (0<=(SATLiteral(1069) + aux1856 - aux1857))
-7575 7580 0
-7574 7578 0
1069 7580 0
1069 -7575 7578 0
1069 -7574 7577 0
c ((aux1853 + aux1855 - aux1858)<=0)
7571 -7582 0
7572 -7583 0
7565 -7582 0
7565 7571 -7583 0
7565 7572 -7585 0
7566 -7583 0
7566 7571 -7585 0
7566 7572 -7587 0
c (0<=(aux1853 + aux1855 - aux1858))
-7572 7587 0
-7571 7585 0
-7566 7587 0
-7566 -7572 7585 0
-7566 -7571 7583 0
-7565 7585 0
-7565 -7572 7583 0
-7565 -7571 7582 0
c ((SATLiteral(1041) - aux1859 + SATLiteral(936))<=0)
-936 -7589 0
-1041 -7589 0
-1041 -936 -7590 0
c (0<=(SATLiteral(1041) - aux1859 + SATLiteral(936)))
936 7590 0
1041 7590 0
1041 936 7589 0
c ((SATLiteral(1056) - aux1860 + SATLiteral(921))<=0)
-921 -7592 0
-1056 -7592 0
-1056 -921 -7593 0
c (0<=(SATLiteral(1056) - aux1860 + SATLiteral(921)))
921 7593 0
1056 7593 0
1056 921 7592 0
c (( - aux1861 + SATLiteral(1176) + SATLiteral(906))<=0)
-906 -7595 0
-1176 -7595 0
-1176 -906 -7596 0
c (0<=( - aux1861 + SATLiteral(1176) + SATLiteral(906)))
906 7596 0
1176 7596 0
1176 906 7595 0
c (( - aux1862 + SATLiteral(1191) + SATLiteral(1206))<=0)
-1206 -7598 0
-1191 -7598 0
-1191 -1206 -7599 0
c (0<=( - aux1862 + SATLiteral(1191) + SATLiteral(1206)))
1206 7599 0
1191 7599 0
1191 1206 7598 0
c ((SATLiteral(1071) + aux1862 - aux1863)<=0)
7598 -7601 0
7599 -7602 0
-1071 -7601 0
-1071 7598 -7602 0
-1071 7599 -7604 0
c (0<=(SATLiteral(1071) + aux1862 - aux1863))
-7599 7604 0
-7598 7602 0
1071 7604 0
1071 -7599 7602 0
1071 -7598 7601 0
c ((aux1859 + aux1861 - aux1864)<=0)
7595 -7606 0
7596 -7607 0
7589 -7606 0
7589 7595 -7607 0
7589 7596 -7609 0
7590 -7607 0
7590 7595 -7609 0
7590 7596 -7611 0
c (0<=(aux1859 + aux1861 - aux1864))
-7596 7611 0
-7595 7609 0
-7590 7611 0
-7590 -7596 7609 0
-7590 -7595 7607 0
-7589 7609 0
-7589 -7596 7607 0
-7589 -7595 7606 0
c ((SATLiteral(1043) - aux1865 + SATLiteral(938))<=0)
-938 -7613 0
-1043 -7613 0
-1043 -938 -7614 0
c (0<=(SATLiteral(1043) - aux1865 + SATLiteral(938)))
938 7614 0
1043 7614 0
1043 938 7613 0
c ((SATLiteral(1058) - aux1866 + SATLiteral(923))<=0)
-923 -7616 0
-1058 -7616 0
-1058 -923 -7617 0
c (0<=(SATLiteral(1058) - aux1866 + SATLiteral(923)))
923 7617 0
1058 7617 0
1058 923 7616 0
c (( - aux1867 + SATLiteral(1178) + SATLiteral(908))<=0)
-908 -7619 0
-1178 -7619 0
-1178 -908 -7620 0
c (0<=( - aux1867 + SATLiteral(1178) + SATLiteral(908)))
908 7620 0
1178 7620 0
1178 908 7619 0
c (( - aux1868 + SATLiteral(1193) + SATLiteral(1208))<=0)
-1208 -7622 0
-1193 -7622 0
-1193 -1208 -7623 0
c (0<=( - aux1868 + SATLiteral(1193) + SATLiteral(1208)))
1208 7623 0
1193 7623 0
1193 1208 7622 0
c ((SATLiteral(1073) + aux1868 - aux1869)<=0)
7622 -7625 0
7623 -7626 0
-1073 -7625 0
-1073 7622 -7626 0
-1073 7623 -7628 0
c (0<=(SATLiteral(1073) + aux1868 - aux1869))
-7623 7628 0
-7622 7626 0
1073 7628 0
1073 -7623 7626 0
1073 -7622 7625 0
c ((aux1865 + aux1867 - aux1870)<=0)
7619 -7630 0
7620 -7631 0
7613 -7630 0
7613 7619 -7631 0
7613 7620 -7633 0
7614 -7631 0
7614 7619 -7633 0
7614 7620 -7635 0
c (0<=(aux1865 + aux1867 - aux1870))
-7620 7635 0
-7619 7633 0
-7614 7635 0
-7614 -7620 7633 0
-7614 -7619 7631 0
-7613 7633 0
-7613 -7620 7631 0
-7613 -7619 7630 0
c ((SATLiteral(1045) - aux1871 + SATLiteral(940))<=0)
-940 -7637 0
-1045 -7637 0
-1045 -940 -7638 0
c (0<=(SATLiteral(1045) - aux1871 + SATLiteral(940)))
940 7638 0
1045 7638 0
1045 940 7637 0
c ((SATLiteral(1060) - aux1872 + SATLiteral(925))<=0)
-925 -7640 0
-1060 -7640 0
-1060 -925 -7641 0
c (0<=(SATLiteral(1060) - aux1872 + SATLiteral(925)))
925 7641 0
1060 7641 0
1060 925 7640 0
c (( - aux1873 + SATLiteral(1180) + SATLiteral(910))<=0)
-910 -7643 0
-1180 -7643 0
-1180 -910 -7644 0
c (0<=( - aux1873 + SATLiteral(1180) + SATLiteral(910)))
910 7644 0
1180 7644 0
1180 910 7643 0
c (( - aux1874 + SATLiteral(1195) + SATLiteral(1210))<=0)
-1210 -7646 0
-1195 -7646 0
-1195 -1210 -7647 0
c (0<=( - aux1874 + SATLiteral(1195) + SATLiteral(1210)))
1210 7647 0
1195 7647 0
1195 1210 7646 0
c ((SATLiteral(1075) + aux1874 - aux1875)<=0)
7646 -7649 0
7647 -7650 0
-1075 -7649 0
-1075 7646 -7650 0
-1075 7647 -7652 0
c (0<=(SATLiteral(1075) + aux1874 - aux1875))
-7647 7652 0
-7646 7650 0
1075 7652 0
1075 -7647 7650 0
1075 -7646 7649 0
c ((aux1871 + aux1873 - aux1876)<=0)
7643 -7654 0
7644 -7655 0
7637 -7654 0
7637 7643 -7655 0
7637 7644 -7657 0
7638 -7655 0
7638 7643 -7657 0
7638 7644 -7659 0
c (0<=(aux1871 + aux1873 - aux1876))
-7644 7659 0
-7643 7657 0
-7638 7659 0
-7638 -7644 7657 0
-7638 -7643 7655 0
-7637 7657 0
-7637 -7644 7655 0
-7637 -7643 7654 0
c ((SATLiteral(1047) - aux1877 + SATLiteral(942))<=0)
-942 -7661 0
-1047 -7661 0
-1047 -942 -7662 0
c (0<=(SATLiteral(1047) - aux1877 + SATLiteral(942)))
942 7662 0
1047 7662 0
1047 942 7661 0
c ((SATLiteral(1062) - aux1878 + SATLiteral(927))<=0)
-927 -7664 0
-1062 -7664 0
-1062 -927 -7665 0
c (0<=(SATLiteral(1062) - aux1878 + SATLiteral(927)))
927 7665 0
1062 7665 0
1062 927 7664 0
c (( - aux1879 + SATLiteral(1182) + SATLiteral(912))<=0)
-912 -7667 0
-1182 -7667 0
-1182 -912 -7668 0
c (0<=( - aux1879 + SATLiteral(1182) + SATLiteral(912)))
912 7668 0
1182 7668 0
1182 912 7667 0
c (( - aux1880 + SATLiteral(1197) + SATLiteral(1212))<=0)
-1212 -7670 0
-1197 -7670 0
-1197 -1212 -7671 0
c (0<=( - aux1880 + SATLiteral(1197) + SATLiteral(1212)))
1212 7671 0
1197 7671 0
1197 1212 7670 0
c ((SATLiteral(1077) + aux1880 - aux1881)<=0)
7670 -7673 0
7671 -7674 0
-1077 -7673 0
-1077 7670 -7674 0
-1077 7671 -7676 0
c (0<=(SATLiteral(1077) + aux1880 - aux1881))
-7671 7676 0
-7670 7674 0
1077 7676 0
1077 -7671 7674 0
1077 -7670 7673 0
c ((aux1877 + aux1879 - aux1882)<=0)
7667 -7678 0
7668 -7679 0
7661 -7678 0
7661 7667 -7679 0
7661 7668 -7681 0
7662 -7679 0
7662 7667 -7681 0
7662 7668 -7683 0
c (0<=(aux1877 + aux1879 - aux1882))
-7668 7683 0
-7667 7681 0
-7662 7683 0
-7662 -7668 7681 0
-7662 -7667 7679 0
-7661 7681 0
-7661 -7668 7679 0
-7661 -7667 7678 0
c ((SATLiteral(1049) - aux1883 + SATLiteral(944))<=0)
-944 -7685 0
-1049 -7685 0
-1049 -944 -7686 0
c (0<=(SATLiteral(1049) - aux1883 + SATLiteral(944)))
944 7686 0
1049 7686 0
1049 944 7685 0
c ((SATLiteral(1064) - aux1884 + SATLiteral(929))<=0)
-929 -7688 0
-1064 -7688 0
-1064 -929 -7689 0
c (0<=(SATLiteral(1064) - aux1884 + SATLiteral(929)))
929 7689 0
1064 7689 0
1064 929 7688 0
c (( - aux1885 + SATLiteral(1184) + SATLiteral(914))<=0)
-914 -7691 0
-1184 -7691 0
-1184 -914 -7692 0
c (0<=( - aux1885 + SATLiteral(1184) + SATLiteral(914)))
914 7692 0
1184 7692 0
1184 914 7691 0
c (( - aux1886 + SATLiteral(1199) + SATLiteral(1214))<=0)
-1214 -7694 0
-1199 -7694 0
-1199 -1214 -7695 0
c (0<=( - aux1886 + SATLiteral(1199) + SATLiteral(1214)))
1214 7695 0
1199 7695 0
1199 1214 7694 0
c ((SATLiteral(1079) + aux1886 - aux1887)<=0)
7694 -7697 0
7695 -7698 0
-1079 -7697 0
-1079 7694 -7698 0
-1079 7695 -7700 0
c (0<=(SATLiteral(1079) + aux1886 - aux1887))
-7695 7700 0
-7694 7698 0
1079 7700 0
1079 -7695 7698 0
1079 -7694 7697 0
c ((aux1883 + aux1885 - aux1888)<=0)
7691 -7702 0
7692 -7703 0
7685 -7702 0
7685 7691 -7703 0
7685 7692 -7705 0
7686 -7703 0
7686 7691 -7705 0
7686 7692 -7707 0
c (0<=(aux1883 + aux1885 - aux1888))
-7692 7707 0
-7691 7705 0
-7686 7707 0
-7686 -7692 7705 0
-7686 -7691 7703 0
-7685 7705 0
-7685 -7692 7703 0
-7685 -7691 7702 0
c ((SATLiteral(1051) - aux1889 + SATLiteral(946))<=0)
-946 -7709 0
-1051 -7709 0
-1051 -946 -7710 0
c (0<=(SATLiteral(1051) - aux1889 + SATLiteral(946)))
946 7710 0
1051 7710 0
1051 946 7709 0
c ((SATLiteral(1066) - aux1890 + SATLiteral(931))<=0)
-931 -7712 0
-1066 -7712 0
-1066 -931 -7713 0
c (0<=(SATLiteral(1066) - aux1890 + SATLiteral(931)))
931 7713 0
1066 7713 0
1066 931 7712 0
c (( - aux1891 + SATLiteral(1186) + SATLiteral(916))<=0)
-916 -7715 0
-1186 -7715 0
-1186 -916 -7716 0
c (0<=( - aux1891 + SATLiteral(1186) + SATLiteral(916)))
916 7716 0
1186 7716 0
1186 916 7715 0
c (( - aux1892 + SATLiteral(1201) + SATLiteral(1216))<=0)
-1216 -7718 0
-1201 -7718 0
-1201 -1216 -7719 0
c (0<=( - aux1892 + SATLiteral(1201) + SATLiteral(1216)))
1216 7719 0
1201 7719 0
1201 1216 7718 0
c ((SATLiteral(1081) + aux1892 - aux1893)<=0)
7718 -7721 0
7719 -7722 0
-1081 -7721 0
-1081 7718 -7722 0
-1081 7719 -7724 0
c (0<=(SATLiteral(1081) + aux1892 - aux1893))
-7719 7724 0
-7718 7722 0
1081 7724 0
1081 -7719 7722 0
1081 -7718 7721 0
c ((aux1889 + aux1891 - aux1894)<=0)
7715 -7726 0
7716 -7727 0
7709 -7726 0
7709 7715 -7727 0
7709 7716 -7729 0
7710 -7727 0
7710 7715 -7729 0
7710 7716 -7731 0
c (0<=(aux1889 + aux1891 - aux1894))
-7716 7731 0
-7715 7729 0
-7710 7731 0
-7710 -7716 7729 0
-7710 -7715 7727 0
-7709 7729 0
-7709 -7716 7727 0
-7709 -7715 7726 0
c ((SATLiteral(-1050) - aux1895 + SATLiteral(-945))<=0)
945 -7733 0
1050 -7733 0
1050 945 -7734 0
c (0<=(SATLiteral(-1050) - aux1895 + SATLiteral(-945)))
-945 7734 0
-1050 7734 0
-1050 -945 7733 0
c ((SATLiteral(-1065) - aux1896 + SATLiteral(-930))<=0)
930 -7736 0
1065 -7736 0
1065 930 -7737 0
c (0<=(SATLiteral(-1065) - aux1896 + SATLiteral(-930)))
-930 7737 0
-1065 7737 0
-1065 -930 7736 0
c (( - aux1897 + SATLiteral(-1185) + SATLiteral(-915))<=0)
915 -7739 0
1185 -7739 0
1185 915 -7740 0
c (0<=( - aux1897 + SATLiteral(-1185) + SATLiteral(-915)))
-915 7740 0
-1185 7740 0
-1185 -915 7739 0
c (( - aux1898 + SATLiteral(-1200) + SATLiteral(-1215))<=0)
1215 -7742 0
1200 -7742 0
1200 1215 -7743 0
c (0<=( - aux1898 + SATLiteral(-1200) + SATLiteral(-1215)))
-1215 7743 0
-1200 7743 0
-1200 -1215 7742 0
c ((SATLiteral(-1080) + aux1898 - aux1899)<=0)
7742 -7745 0
7743 -7746 0
1080 -7745 0
1080 7742 -7746 0
1080 7743 -7748 0
c (0<=(SATLiteral(-1080) + aux1898 - aux1899))
-7743 7748 0
-7742 7746 0
-1080 7748 0
-1080 -7743 7746 0
-1080 -7742 7745 0
c ((aux1895 + aux1897 - aux1900)<=0)
7739 -7750 0
7740 -7751 0
7733 -7750 0
7733 7739 -7751 0
7733 7740 -7753 0
7734 -7751 0
7734 7739 -7753 0
7734 7740 -7755 0
c (0<=(aux1895 + aux1897 - aux1900))
-7740 7755 0
-7739 7753 0
-7734 7755 0
-7734 -7740 7753 0
-7734 -7739 7751 0
-7733 7753 0
-7733 -7740 7751 0
-7733 -7739 7750 0
